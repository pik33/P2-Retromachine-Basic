00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic026b.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 26
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 40 8F A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 60 6C 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed F4 69 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 68 5A 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 D4 5C 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 38 58 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 38 C5 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 14 64 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 AC F6 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 5C 1E 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 14 1C 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb EC 2D 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 68 51 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7B 00 00 FF 
00818     13 E4 05 F1 | 	add	objptr, ##62995
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7B 00 00 FF 
0082c     58 E4 85 F1 | 	sub	objptr, ##63064
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     B0 BD B1 FD | 	call	#__system___waitms
0083c     7B 00 00 FF 
00840     58 E4 05 F1 | 	add	objptr, ##63064
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7B 00 00 FF 
00854     58 E4 85 F1 | 	sub	objptr, ##63064
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     88 BD B1 FD | 	call	#__system___waitms
00864     7B 00 00 FF 
00868     58 E4 05 F1 | 	add	objptr, ##63064
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7B 00 00 FF 
0087c     58 E4 85 F1 | 	sub	objptr, ##63064
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     60 BD B1 FD | 	call	#__system___waitms
0088c     7B 00 00 FF 
00890     58 E4 05 F1 | 	add	objptr, ##63064
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7B 00 00 FF 
008a4     58 E4 85 F1 | 	sub	objptr, ##63064
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     D0 E5 05 F1 | 	add	objptr, ##62928
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     D8 E5 85 F1 | 	sub	objptr, ##62936
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     F4 B2 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     44 B3 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     34 B3 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     E0 E5 05 F1 | 	add	objptr, ##62944
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     FC E5 85 F1 | 	sub	objptr, ##62972
009b0     98 B2 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     E0 E5 05 F1 | 	add	objptr, ##62944
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     FC E5 85 F1 | 	sub	objptr, ##62972
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     00 E4 05 F1 | 	add	objptr, ##44544
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     6A 00 00 FF 
00a68     60 E4 85 F1 | 	sub	objptr, ##54368
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     F0 E5 05 F1 | 	add	objptr, ##43504
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     5C 01 00 FF 
00abc     36 17 06 F6 | 	mov	arg03, ##@LR__4587
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     57 00 00 FF 
00afc     00 E4 85 F1 | 	sub	objptr, ##44544
00b00     C8 DC B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     00 DC B1 FD | 	call	#__system__LTrim_S
00b0c     57 00 00 FF 
00b10     00 E4 05 F1 | 	add	objptr, ##44544
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     5C 01 00 FF 
00b1c     37 1F 06 F6 | 	mov	local01, ##@LR__4588
00b20     24 00 00 FF 
00b24     A4 E4 05 F1 | 	add	objptr, ##18596
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     A4 E4 85 F1 | 	sub	objptr, ##18596
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     57 00 00 FF 
00b3c     00 E4 85 F1 | 	sub	objptr, ##44544
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7B 00 00 FF 
00b5c     A8 E4 05 F1 | 	add	objptr, ##63144
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7B 00 00 FF 
00b68     A8 E4 85 F1 | 	sub	objptr, ##63144
00b6c     C0 27 90 AD |  if_e	jmp	#LR__0149
00b70     7B 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##63148
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     AC E4 85 F1 | 	sub	objptr, ##18604
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     57 00 00 FF 
00b90     00 E4 85 F1 | 	sub	objptr, ##44544
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     57 00 00 FF 
00bc0     00 E4 05 F1 | 	add	objptr, ##44544
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     57 00 00 FF 
00bcc     00 E4 85 F1 | 	sub	objptr, ##44544
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     78 D8 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     5C 01 00 FF 
00be4     38 15 06 F6 | 	mov	arg02, ##@LR__4589
00be8     34 B7 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7B 00 00 FF 
00bf8     AC E4 05 F1 | 	add	objptr, ##63148
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7B 00 00 FF 
00c04     AC E4 85 F1 | 	sub	objptr, ##63148
00c08     7B 00 00 AF 
00c0c     AC E4 05 A1 |  if_e	add	objptr, ##63148
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7B 00 00 AF 
00c18     AC E4 85 A1 |  if_e	sub	objptr, ##63148
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     57 00 00 FF 
00c24     00 E4 05 F1 | 	add	objptr, ##44544
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     57 00 00 FF 
00c30     00 E4 85 F1 | 	sub	objptr, ##44544
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     14 D8 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     5C 01 00 FF 
00c48     3A 15 06 F6 | 	mov	arg02, ##@LR__4590
00c4c     D0 B6 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7B 00 00 AF 
00c58     AC E4 05 A1 |  if_e	add	objptr, ##63148
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7B 00 00 AF 
00c64     AC E4 85 A1 |  if_e	sub	objptr, ##63148
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7B 00 00 AF 
00c70     AC E4 05 A1 |  if_e	add	objptr, ##63148
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7B 00 00 AF 
00c7c     AC E4 85 A1 |  if_e	sub	objptr, ##63148
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     F0 E5 05 F1 | 	add	objptr, ##43504
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     BC E4 05 F1 | 	add	objptr, ##19644
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7B 00 00 FF 
00ca8     AC E4 85 F1 | 	sub	objptr, ##63148
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     57 00 00 FF 
00cc4     00 E4 05 F1 | 	add	objptr, ##44544
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     57 00 00 FF 
00cd0     00 E4 85 F1 | 	sub	objptr, ##44544
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     74 D7 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     5C 01 00 FF 
00ce8     3C 2F 06 F6 | 	mov	local09, ##@LR__4591
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     2C B6 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     F0 E5 05 F1 | 	add	objptr, ##43504
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     F0 E5 85 F1 | 	sub	objptr, ##43504
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7B 00 00 FF 
00d34     A8 E4 05 F1 | 	add	objptr, ##63144
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7B 00 00 FF 
00d40     A8 E4 85 F1 | 	sub	objptr, ##63144
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7B 00 00 FF 
00d58     A8 E4 05 F1 | 	add	objptr, ##63144
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7B 00 00 FF 
00d64     A8 E4 85 F1 | 	sub	objptr, ##63144
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     57 00 00 FF 
00d74     00 E4 05 F1 | 	add	objptr, ##44544
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     57 00 00 FF 
00d80     00 E4 85 F1 | 	sub	objptr, ##44544
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     14 D6 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     14 DA B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     4C D9 B1 FD | 	call	#__system__LTrim_S
00dc0     7B 00 00 FF 
00dc4     B0 E4 05 F1 | 	add	objptr, ##63152
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     B0 E4 85 F1 | 	sub	objptr, ##18608
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     57 00 00 FF 
00ddc     00 E4 85 F1 | 	sub	objptr, ##44544
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     50 D5 B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     D8 D9 B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     10 D9 B1 FD | 	call	#__system__LTrim_S
00dfc     57 00 00 FF 
00e00     00 E4 05 F1 | 	add	objptr, ##44544
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     57 00 00 FF 
00e0c     00 E4 85 F1 | 	sub	objptr, ##44544
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     5C 01 00 FF 
00e18     3E 1F 06 F6 | 	mov	local01, ##@LR__4592
00e1c     7B 00 00 FF 
00e20     B0 E4 05 F1 | 	add	objptr, ##63152
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7B 00 00 FF 
00e2c     B0 E4 85 F1 | 	sub	objptr, ##63152
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     57 00 00 FF 
00e34     08 E4 05 F1 | 	add	objptr, ##44552
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     57 00 00 FF 
00e40     08 E4 85 F1 | 	sub	objptr, ##44552
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7B 00 00 FF 
00e54     B0 E4 05 F1 | 	add	objptr, ##63152
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7B 00 00 FF 
00e60     B0 E4 85 F1 | 	sub	objptr, ##63152
00e64     5C 01 00 FF 
00e68     3F 15 06 F6 | 	mov	arg02, ##@LR__4593
00e6c     B0 B4 B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     57 00 00 5F 
00e78     08 E4 05 51 |  if_ne	add	objptr, ##44552
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     57 00 00 5F 
00e84     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     57 00 00 FF 
00e90     08 E4 05 F1 | 	add	objptr, ##44552
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     57 00 00 FF 
00e9c     08 E4 85 F1 | 	sub	objptr, ##44552
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7B 00 00 FF 
00eb0     B0 E4 05 F1 | 	add	objptr, ##63152
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7B 00 00 FF 
00ebc     B0 E4 85 F1 | 	sub	objptr, ##63152
00ec0     5C 01 00 FF 
00ec4     40 15 06 F6 | 	mov	arg02, ##@LR__4594
00ec8     54 B4 B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     57 00 00 AF 
00ed4     08 E4 05 A1 |  if_e	add	objptr, ##44552
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     57 00 00 AF 
00ee0     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     57 00 00 FF 
00eec     08 E4 05 F1 | 	add	objptr, ##44552
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     57 00 00 FF 
00ef8     08 E4 85 F1 | 	sub	objptr, ##44552
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7B 00 00 FF 
00f08     B0 E4 05 F1 | 	add	objptr, ##63152
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7B 00 00 FF 
00f14     B0 E4 85 F1 | 	sub	objptr, ##63152
00f18     5C 01 00 FF 
00f1c     41 15 06 F6 | 	mov	arg02, ##@LR__4595
00f20     FC B3 B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     57 00 00 5F 
00f2c     08 E4 05 51 |  if_ne	add	objptr, ##44552
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     57 00 00 5F 
00f38     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     57 00 00 FF 
00f44     08 E4 05 F1 | 	add	objptr, ##44552
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     57 00 00 FF 
00f50     08 E4 85 F1 | 	sub	objptr, ##44552
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7B 00 00 FF 
00f60     B0 E4 05 F1 | 	add	objptr, ##63152
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7B 00 00 FF 
00f6c     B0 E4 85 F1 | 	sub	objptr, ##63152
00f70     5C 01 00 FF 
00f74     42 15 06 F6 | 	mov	arg02, ##@LR__4596
00f78     A4 B3 B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     57 00 00 AF 
00f84     08 E4 05 A1 |  if_e	add	objptr, ##44552
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     57 00 00 AF 
00f90     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     57 00 00 FF 
00fb0     00 E4 05 F1 | 	add	objptr, ##44544
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     57 00 00 FF 
00fbc     00 E4 85 F1 | 	sub	objptr, ##44544
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     88 D4 B1 FD | 	call	#__system__Mid_S
00fcc     7B 00 00 FF 
00fd0     B4 E4 05 F1 | 	add	objptr, ##63156
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7B 00 00 FF 
00fe0     B4 E4 85 F1 | 	sub	objptr, ##63156
00fe4     C0 29 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7B 00 00 FF 
01010     A8 E4 05 F1 | 	add	objptr, ##63144
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7B 00 00 FF 
0101c     A8 E4 85 F1 | 	sub	objptr, ##63144
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7B 00 00 FF 
0106c     BC E4 05 F1 | 	add	objptr, ##63164
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7B 00 00 FF 
010a0     BC E4 85 F1 | 	sub	objptr, ##63164
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     57 00 00 FF 
010b4     00 E4 05 F1 | 	add	objptr, ##44544
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     BC E4 05 F1 | 	add	objptr, ##18620
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7B 00 00 FF 
010cc     BC E4 85 F1 | 	sub	objptr, ##63164
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     7C D3 B1 FD | 	call	#__system__Mid_S
010d8     7B 00 00 FF 
010dc     C4 E4 05 F1 | 	add	objptr, ##63172
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7B 00 00 FF 
010e8     C4 E4 85 F1 | 	sub	objptr, ##63172
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     5C 01 00 FF 
010f4     43 15 06 F6 | 	mov	arg02, ##@LR__4597
010f8     24 B2 B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     F0 E5 05 F1 | 	add	objptr, ##43504
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     D4 E4 05 F1 | 	add	objptr, ##19668
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7B 00 00 FF 
01128     C4 E4 85 F1 | 	sub	objptr, ##63172
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     57 00 00 FF 
01138     00 E4 05 F1 | 	add	objptr, ##44544
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     BC E4 05 F1 | 	add	objptr, ##18620
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7B 00 00 FF 
01164     BC E4 85 F1 | 	sub	objptr, ##63164
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     DC D2 B1 FD | 	call	#__system__Mid_S
01178     7B 00 00 FF 
0117c     C4 E4 05 F1 | 	add	objptr, ##63172
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7B 00 00 FF 
01188     C4 E4 85 F1 | 	sub	objptr, ##63172
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     5C 01 00 FF 
01194     44 15 06 F6 | 	mov	arg02, ##@LR__4598
01198     84 B1 B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     F0 E5 05 F1 | 	add	objptr, ##43504
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     D4 E4 05 F1 | 	add	objptr, ##19668
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7B 00 00 FF 
011c8     C4 E4 85 F1 | 	sub	objptr, ##63172
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     F0 E5 05 F1 | 	add	objptr, ##43504
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     5C 01 00 FF 
011fc     45 15 06 F6 | 	mov	arg02, ##@LR__4599
01200     54 00 00 FF 
01204     F0 E5 85 F1 | 	sub	objptr, ##43504
01208     14 B1 B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     F0 E5 05 F1 | 	add	objptr, ##43504
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     D4 E4 05 F1 | 	add	objptr, ##19668
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     D4 E4 85 F1 | 	sub	objptr, ##19668
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     F0 E5 85 F1 | 	sub	objptr, ##43504
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     D8 B0 B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     F0 E5 05 F1 | 	add	objptr, ##43504
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     F0 E5 85 F1 | 	sub	objptr, ##43504
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7B 00 00 FF 
01314     C4 E4 05 F1 | 	add	objptr, ##63172
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7B 00 00 FF 
01320     C4 E4 85 F1 | 	sub	objptr, ##63172
01324     5C 01 00 FF 
01328     47 15 06 F6 | 	mov	arg02, ##@LR__4600
0132c     F0 AF B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7B 00 00 FF 
01340     C4 E4 05 F1 | 	add	objptr, ##63172
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7B 00 00 FF 
0134c     C4 E4 85 F1 | 	sub	objptr, ##63172
01350     5C 01 00 FF 
01354     49 15 06 F6 | 	mov	arg02, ##@LR__4601
01358     C4 AF B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     F0 E5 05 F1 | 	add	objptr, ##43504
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     F0 E5 85 F1 | 	sub	objptr, ##43504
01398     28 D0 B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     5C 01 00 FF 
013a4     4B 15 06 F6 | 	mov	arg02, ##@LR__4602
013a8     74 AF B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     F0 E5 05 F1 | 	add	objptr, ##43504
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     F0 E5 85 F1 | 	sub	objptr, ##43504
013e0     58 CF B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     5C 01 00 FF 
013ec     4D 15 06 F6 | 	mov	arg02, ##@LR__4603
013f0     2C AF B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     F0 E5 05 F1 | 	add	objptr, ##43504
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     F0 E5 85 F1 | 	sub	objptr, ##43504
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     40 CF B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     C0 AE B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     F0 E5 05 F1 | 	add	objptr, ##43504
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     F0 E5 85 F1 | 	sub	objptr, ##43504
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     F0 E5 05 F1 | 	add	objptr, ##43504
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     DC E4 05 F1 | 	add	objptr, ##19676
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     DC E4 85 F1 | 	sub	objptr, ##19676
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     E0 E4 05 F1 | 	add	objptr, ##19680
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7B 00 00 FF 
01594     CC E4 85 F1 | 	sub	objptr, ##63180
01598     5C 01 00 FF 
0159c     4F 15 06 F6 | 	mov	arg02, ##@LR__4604
015a0     7C AD B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7B 00 00 FF 
015b0     CC E4 05 F1 | 	add	objptr, ##63180
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7B 00 00 FF 
015bc     CC E4 85 F1 | 	sub	objptr, ##63180
015c0     5C 01 00 FF 
015c4     51 15 06 F6 | 	mov	arg02, ##@LR__4605
015c8     54 AD B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7B 00 00 FF 
015d8     CC E4 05 F1 | 	add	objptr, ##63180
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7B 00 00 FF 
015e4     CC E4 85 F1 | 	sub	objptr, ##63180
015e8     5C 01 00 FF 
015ec     53 15 06 F6 | 	mov	arg02, ##@LR__4606
015f0     2C AD B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7B 00 00 FF 
01600     CC E4 05 F1 | 	add	objptr, ##63180
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7B 00 00 FF 
0160c     CC E4 85 F1 | 	sub	objptr, ##63180
01610     5C 01 00 FF 
01614     55 33 06 F6 | 	mov	local11, ##@LR__4607
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     00 AD B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7B 00 00 FF 
0162c     CC E4 05 F1 | 	add	objptr, ##63180
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7B 00 00 FF 
01638     CC E4 85 F1 | 	sub	objptr, ##63180
0163c     5C 01 00 FF 
01640     57 31 06 F6 | 	mov	local10, ##@LR__4608
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     D0 AC B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7B 00 00 FF 
0165c     CC E4 05 F1 | 	add	objptr, ##63180
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7B 00 00 FF 
01668     CC E4 85 F1 | 	sub	objptr, ##63180
0166c     5C 01 00 FF 
01670     59 31 06 F6 | 	mov	local10, ##@LR__4609
01674     18 15 02 F6 | 	mov	arg02, local10
01678     A4 AC B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7B 00 00 FF 
01688     CC E4 05 F1 | 	add	objptr, ##63180
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7B 00 00 FF 
01694     CC E4 85 F1 | 	sub	objptr, ##63180
01698     5C 01 00 FF 
0169c     5B 37 06 F6 | 	mov	local13, ##@LR__4610
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     78 AC B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7B 00 00 FF 
016b4     D0 E4 05 F1 | 	add	objptr, ##63184
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7B 00 00 FF 
016c0     D0 E4 85 F1 | 	sub	objptr, ##63184
016c4     5C 01 00 FF 
016c8     5D 4B 06 F6 | 	mov	local23, ##@LR__4611
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     48 AC B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7B 00 00 FF 
016e4     CC E4 05 F1 | 	add	objptr, ##63180
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7B 00 00 FF 
016f0     CC E4 85 F1 | 	sub	objptr, ##63180
016f4     5C 01 00 FF 
016f8     5F 4B 06 F6 | 	mov	local23, ##@LR__4612
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     1C AC B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7B 00 00 FF 
01710     D0 E4 05 F1 | 	add	objptr, ##63184
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7B 00 00 FF 
0171c     D0 E4 85 F1 | 	sub	objptr, ##63184
01720     5C 01 00 FF 
01724     61 45 06 F6 | 	mov	local20, ##@LR__4613
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     EC AB B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7B 00 00 FF 
01740     CC E4 05 F1 | 	add	objptr, ##63180
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7B 00 00 FF 
0174c     CC E4 85 F1 | 	sub	objptr, ##63180
01750     5C 01 00 FF 
01754     63 45 06 F6 | 	mov	local20, ##@LR__4614
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     C0 AB B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7B 00 00 FF 
0176c     D0 E4 05 F1 | 	add	objptr, ##63184
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7B 00 00 FF 
01778     D0 E4 85 F1 | 	sub	objptr, ##63184
0177c     5C 01 00 FF 
01780     65 4D 06 F6 | 	mov	local24, ##@LR__4615
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     90 AB B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7B 00 00 FF 
0179c     CC E4 05 F1 | 	add	objptr, ##63180
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7B 00 00 FF 
017a8     CC E4 85 F1 | 	sub	objptr, ##63180
017ac     5C 01 00 FF 
017b0     67 4F 06 F6 | 	mov	local25, ##@LR__4616
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     60 AB B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7B 00 00 FF 
017cc     D0 E4 05 F1 | 	add	objptr, ##63184
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7B 00 00 FF 
017d8     D0 E4 85 F1 | 	sub	objptr, ##63184
017dc     5C 01 00 FF 
017e0     69 51 06 F6 | 	mov	local26, ##@LR__4617
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     30 AB B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     F0 E5 05 F1 | 	add	objptr, ##43504
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     DC E4 05 F1 | 	add	objptr, ##19676
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7B 00 00 FF 
01824     D0 E4 85 F1 | 	sub	objptr, ##63184
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     20 AB B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     F0 E5 05 F1 | 	add	objptr, ##43504
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     F0 E5 85 F1 | 	sub	objptr, ##43504
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     F0 E5 05 F1 | 	add	objptr, ##43504
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     F0 E5 85 F1 | 	sub	objptr, ##43504
01930     98 CE B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     D0 CD B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     F0 E5 05 F1 | 	add	objptr, ##43504
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     F0 E5 85 F1 | 	sub	objptr, ##43504
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     F0 E5 05 F1 | 	add	objptr, ##43504
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     F0 E5 85 F1 | 	sub	objptr, ##43504
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     F0 E5 05 F1 | 	add	objptr, ##43504
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     F0 E5 85 F1 | 	sub	objptr, ##43504
01a98     A0 C8 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     5C 01 00 FF 
01aa4     6B 15 06 F6 | 	mov	arg02, ##@LR__4618
01aa8     74 A8 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     F0 E5 05 F1 | 	add	objptr, ##43504
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     F0 E5 85 F1 | 	sub	objptr, ##43504
01ad8     E8 C8 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     5C 01 00 FF 
01ae4     6D 15 06 F6 | 	mov	arg02, ##@LR__4619
01ae8     34 A8 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     F0 E5 05 F1 | 	add	objptr, ##43504
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     F0 E5 85 F1 | 	sub	objptr, ##43504
01b24     24 CB B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     F0 E5 05 F1 | 	add	objptr, ##43504
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     F0 E5 85 F1 | 	sub	objptr, ##43504
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     F0 E5 05 F1 | 	add	objptr, ##43504
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     F0 E5 85 F1 | 	sub	objptr, ##43504
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     84 17 90 AD |  if_e	jmp	#LR__0149
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     F0 E5 05 F1 | 	add	objptr, ##43504
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     F0 E5 85 F1 | 	sub	objptr, ##43504
01bc0     08 36 B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7B 00 00 5F 
01bcc     D4 E4 05 51 |  if_ne	add	objptr, ##63188
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7B 00 00 FF 
01bd8     D4 E4 E5 F3 | 	sumnz	objptr, ##63188
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7B 00 00 AF 
01be4     D4 E4 85 A1 |  if_e	sub	objptr, ##63188
01be8     7B 00 00 FF 
01bec     D4 E4 05 F1 | 	add	objptr, ##63188
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     E4 E4 85 F1 | 	sub	objptr, ##19684
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     E8 E4 05 F1 | 	add	objptr, ##19688
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     E4 E4 85 F1 | 	sub	objptr, ##19684
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     5C 01 00 FF 
01c38     6F 17 06 F6 | 	mov	arg03, ##@LR__4620
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     F0 E5 85 F1 | 	sub	objptr, ##43504
01c48     38 CC B1 FD | 	call	#__system__Instr
01c4c     7B 00 00 FF 
01c50     DC E4 05 F1 | 	add	objptr, ##63196
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7B 00 00 FF 
01c60     DC E4 85 F1 | 	sub	objptr, ##63196
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7B 00 00 FF 
01c70     D4 E4 05 F1 | 	add	objptr, ##63188
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     E4 E4 85 F1 | 	sub	objptr, ##19684
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     F0 E5 85 F1 | 	sub	objptr, ##43504
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7B 00 00 FF 
01cb8     DC E4 05 F1 | 	add	objptr, ##63196
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7B 00 00 FF 
01cc4     DC E4 85 F1 | 	sub	objptr, ##63196
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7B 00 00 FF 
01cdc     D4 E4 05 F1 | 	add	objptr, ##63188
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     E4 E4 85 F1 | 	sub	objptr, ##19684
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     E4 E4 05 F1 | 	add	objptr, ##19684
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     E4 E4 85 F1 | 	sub	objptr, ##19684
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     E4 E4 05 F1 | 	add	objptr, ##19684
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     E4 E4 85 F1 | 	sub	objptr, ##19684
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     F0 E5 85 F1 | 	sub	objptr, ##43504
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7B 00 00 FF 
01dd0     DC E4 05 F1 | 	add	objptr, ##63196
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7B 00 00 FF 
01ddc     DC E4 85 F1 | 	sub	objptr, ##63196
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     D8 C5 B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7B 00 00 FF 
01df4     D4 E4 05 F1 | 	add	objptr, ##63188
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     E4 E4 85 F1 | 	sub	objptr, ##19684
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     EC E4 05 F1 | 	add	objptr, ##19692
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7B 00 00 FF 
01e34     DC E4 85 F1 | 	sub	objptr, ##63196
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     F8 C4 B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7B 00 00 FF 
01e4c     D4 E4 05 F1 | 	add	objptr, ##63188
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     E4 E4 85 F1 | 	sub	objptr, ##19684
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     F0 E5 85 F1 | 	sub	objptr, ##43504
01e74     C4 C4 B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     5C 01 00 FF 
01e80     71 15 06 F6 | 	mov	arg02, ##@LR__4621
01e84     98 A4 B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7B 00 00 FF 
01e94     D4 E4 05 F1 | 	add	objptr, ##63188
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     E4 E4 85 F1 | 	sub	objptr, ##19684
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     F0 E5 85 F1 | 	sub	objptr, ##43504
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7B 00 00 FF 
01ee8     D4 E4 05 F1 | 	add	objptr, ##63188
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     E4 E4 85 F1 | 	sub	objptr, ##19684
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     E4 E4 05 F1 | 	add	objptr, ##19684
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     E4 E4 85 F1 | 	sub	objptr, ##19684
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     E4 E4 05 F1 | 	add	objptr, ##19684
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     E4 E4 85 F1 | 	sub	objptr, ##19684
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     F0 E5 85 F1 | 	sub	objptr, ##43504
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     CC C3 B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7B 00 00 FF 
02000     D4 E4 05 F1 | 	add	objptr, ##63188
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     E4 E4 85 F1 | 	sub	objptr, ##19684
02014     F2 26 02 F1 | 	add	local05, objptr
02018     5C 01 00 FF 
0201c     73 33 06 F6 | 	mov	local11, ##@LR__4622
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     F0 E5 85 F1 | 	sub	objptr, ##43504
0202c                 | LR__0107
0202c     7B 00 00 FF 
02030     D4 E4 05 F1 | 	add	objptr, ##63188
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     E4 E4 85 F1 | 	sub	objptr, ##19684
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     E8 E4 05 F1 | 	add	objptr, ##19688
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7B 00 00 FF 
0205c     D8 E4 85 F1 | 	sub	objptr, ##63192
02060     5C 01 00 FF 
02064     75 15 06 F6 | 	mov	arg02, ##@LR__4623
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     B0 A2 B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7B 00 00 FF 
0207c     D8 E4 05 F1 | 	add	objptr, ##63192
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7B 00 00 FF 
02088     D8 E4 85 F1 | 	sub	objptr, ##63192
0208c     5C 01 00 FF 
02090     7B 15 06 F6 | 	mov	arg02, ##@LR__4624
02094     88 A2 B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7B 00 00 FF 
020a4     D8 E4 05 F1 | 	add	objptr, ##63192
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7B 00 00 FF 
020b0     D8 E4 85 F1 | 	sub	objptr, ##63192
020b4     5C 01 00 FF 
020b8     82 15 06 F6 | 	mov	arg02, ##@LR__4625
020bc     60 A2 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7B 00 00 FF 
020cc     D4 E4 05 F1 | 	add	objptr, ##63188
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     E4 E4 85 F1 | 	sub	objptr, ##19684
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     F0 E5 85 F1 | 	sub	objptr, ##43504
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7B 00 00 FF 
02118     D4 E4 05 F1 | 	add	objptr, ##63188
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     E4 E4 85 F1 | 	sub	objptr, ##19684
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     5C 01 00 FF 
0213c     88 15 06 F6 | 	mov	arg02, ##@LR__4626
02140     54 00 00 FF 
02144     F0 E5 85 F1 | 	sub	objptr, ##43504
02148     D4 A1 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7B 00 00 FF 
02158     D4 E4 05 F1 | 	add	objptr, ##63188
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     E4 E4 85 F1 | 	sub	objptr, ##19684
02170     F2 26 02 F1 | 	add	local05, objptr
02174     5C 01 00 FF 
02178     8B 33 06 F6 | 	mov	local11, ##@LR__4627
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     E4 E4 05 F1 | 	add	objptr, ##19684
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     E4 E4 85 F1 | 	sub	objptr, ##19684
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     F0 E5 85 F1 | 	sub	objptr, ##43504
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7B 00 00 FF 
021b8     D4 E4 05 F1 | 	add	objptr, ##63188
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     E4 E4 85 F1 | 	sub	objptr, ##19684
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     5C 01 00 FF 
021e0     8D 15 06 F6 | 	mov	arg02, ##@LR__4628
021e4     54 00 00 FF 
021e8     F0 E5 85 F1 | 	sub	objptr, ##43504
021ec     30 A1 B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7B 00 00 FF 
021fc     D4 E4 05 F1 | 	add	objptr, ##63188
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     E4 E4 85 F1 | 	sub	objptr, ##19684
02214     F2 26 02 F1 | 	add	local05, objptr
02218     5C 01 00 FF 
0221c     91 33 06 F6 | 	mov	local11, ##@LR__4629
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     E4 E4 05 F1 | 	add	objptr, ##19684
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     E4 E4 85 F1 | 	sub	objptr, ##19684
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     F0 E5 85 F1 | 	sub	objptr, ##43504
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7B 00 00 FF 
02260     D8 E4 05 F1 | 	add	objptr, ##63192
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7B 00 00 FF 
0226c     D8 E4 85 F1 | 	sub	objptr, ##63192
02270     5C 01 00 FF 
02274     93 15 06 F6 | 	mov	arg02, ##@LR__4630
02278     A4 A0 B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7B 00 00 FF 
02288     D8 E4 05 F1 | 	add	objptr, ##63192
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7B 00 00 FF 
02294     D8 E4 85 F1 | 	sub	objptr, ##63192
02298     5C 01 00 FF 
0229c     98 15 06 F6 | 	mov	arg02, ##@LR__4631
022a0     7C A0 B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7B 00 00 FF 
022b0     D4 E4 05 F1 | 	add	objptr, ##63188
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     E4 E4 85 F1 | 	sub	objptr, ##19684
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     5C 01 00 FF 
022d4     9B 15 06 F6 | 	mov	arg02, ##@LR__4632
022d8     54 00 00 FF 
022dc     F0 E5 85 F1 | 	sub	objptr, ##43504
022e0     3C A0 B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7B 00 00 FF 
022f0     D4 E4 05 F1 | 	add	objptr, ##63188
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     E4 E4 85 F1 | 	sub	objptr, ##19684
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     5C 01 00 FF 
02310     A1 33 06 F6 | 	mov	local11, ##@LR__4633
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     F0 E5 85 F1 | 	sub	objptr, ##43504
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7B 00 00 FF 
02324     D4 E4 05 F1 | 	add	objptr, ##63188
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     E4 E4 85 F1 | 	sub	objptr, ##19684
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     5C 01 00 FF 
02348     A3 15 06 F6 | 	mov	arg02, ##@LR__4634
0234c     54 00 00 FF 
02350     F0 E5 85 F1 | 	sub	objptr, ##43504
02354     C8 9F B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7B 00 00 FF 
02364     D4 E4 05 F1 | 	add	objptr, ##63188
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     E4 E4 85 F1 | 	sub	objptr, ##19684
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     5C 01 00 FF 
02384     AC 33 06 F6 | 	mov	local11, ##@LR__4635
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     F0 E5 85 F1 | 	sub	objptr, ##43504
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7B 00 00 FF 
02398     D4 E4 05 F1 | 	add	objptr, ##63188
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     E4 E4 85 F1 | 	sub	objptr, ##19684
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     5C 01 00 FF 
023bc     AE 15 06 F6 | 	mov	arg02, ##@LR__4636
023c0     54 00 00 FF 
023c4     F0 E5 85 F1 | 	sub	objptr, ##43504
023c8     54 9F B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7B 00 00 FF 
023d8     D4 E4 05 F1 | 	add	objptr, ##63188
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     E4 E4 85 F1 | 	sub	objptr, ##19684
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     5C 01 00 FF 
023f8     B7 33 06 F6 | 	mov	local11, ##@LR__4637
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     F0 E5 85 F1 | 	sub	objptr, ##43504
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7B 00 00 FF 
0240c     D4 E4 05 F1 | 	add	objptr, ##63188
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     E4 E4 85 F1 | 	sub	objptr, ##19684
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     5C 01 00 FF 
02430     B9 15 06 F6 | 	mov	arg02, ##@LR__4638
02434     54 00 00 FF 
02438     F0 E5 85 F1 | 	sub	objptr, ##43504
0243c     E0 9E B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7B 00 00 FF 
0244c     D4 E4 05 F1 | 	add	objptr, ##63188
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     E4 E4 85 F1 | 	sub	objptr, ##19684
02464     F2 26 02 F1 | 	add	local05, objptr
02468     5C 01 00 FF 
0246c     C2 33 06 F6 | 	mov	local11, ##@LR__4639
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     F0 E5 85 F1 | 	sub	objptr, ##43504
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7B 00 00 FF 
02480     D4 E4 05 F1 | 	add	objptr, ##63188
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     E4 E4 85 F1 | 	sub	objptr, ##19684
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     5C 01 00 FF 
024a8     C4 15 06 F6 | 	mov	arg02, ##@LR__4640
024ac     54 00 00 FF 
024b0     F0 E5 85 F1 | 	sub	objptr, ##43504
024b4     68 9E B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7B 00 00 FF 
024c4     D4 E4 05 F1 | 	add	objptr, ##63188
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     E4 E4 85 F1 | 	sub	objptr, ##19684
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     5C 01 00 FF 
024e4     C7 33 06 F6 | 	mov	local11, ##@LR__4641
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     F0 E5 85 F1 | 	sub	objptr, ##43504
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     60 06 90 3D |  if_ae	jmp	#LR__0129
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     F0 E5 05 F1 | 	add	objptr, ##43504
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     F0 E5 85 F1 | 	sub	objptr, ##43504
02534     70 14 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     F0 E5 05 F1 | 	add	objptr, ##43504
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     F0 E5 85 F1 | 	sub	objptr, ##43504
0256c     EC 05 90 3D |  if_ae	jmp	#LR__0128
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     F0 E5 05 F1 | 	add	objptr, ##43504
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     F0 E5 85 F1 | 	sub	objptr, ##43504
025a0     B8 0D B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     F0 E5 05 F1 | 	add	objptr, ##43504
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     F0 E5 85 F1 | 	sub	objptr, ##43504
025d8     80 05 90 3D |  if_ae	jmp	#LR__0128
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     F0 E5 05 F1 | 	add	objptr, ##43504
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     F0 E5 85 F1 | 	sub	objptr, ##43504
0260c                 | ' 
0260c                 | ' select case s
0260c     5D 01 00 FF 
02610     A4 14 06 F6 | 	mov	arg02, ##@LR__4711
02614     08 9D B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     F0 E5 05 F1 | 	add	objptr, ##43504
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     F0 E5 85 F1 | 	sub	objptr, ##43504
02658     00 05 90 3D |  if_ae	jmp	#LR__0128
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     F0 E5 05 F1 | 	add	objptr, ##43504
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     F0 E5 85 F1 | 	sub	objptr, ##43504
0268c     18 15 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     F0 E5 05 F1 | 	add	objptr, ##43504
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     F0 E5 85 F1 | 	sub	objptr, ##43504
026c4     94 04 90 3D |  if_ae	jmp	#LR__0128
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     F0 E5 05 F1 | 	add	objptr, ##43504
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 35 02 F6 | 	mov	local12, local03
026e0     03 34 66 F0 | 	shl	local12, #3
026e4     F2 4A 02 F6 | 	mov	local23, objptr
026e8     F2 34 02 F1 | 	add	local12, objptr
026ec     1A 13 02 FB | 	rdlong	arg01, local12
026f0     54 00 00 FF 
026f4     F0 E5 85 F1 | 	sub	objptr, ##43504
026f8     2C 20 B0 FD | 	call	#_isfunction
026fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02700     04 2E 06 F1 | 	add	local09, #4
02704     17 FB 61 FC | 	wrlong	result1, local09
02708                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02708     11 2F 02 F6 | 	mov	local09, local03
0270c     03 2E 66 F0 | 	shl	local09, #3
02710     54 00 00 FF 
02714     F0 E5 05 F1 | 	add	objptr, ##43504
02718     F2 2E 02 F1 | 	add	local09, objptr
0271c     04 2E 06 F1 | 	add	local09, #4
02720     17 33 02 FB | 	rdlong	local11, local09
02724     01 32 56 F2 | 	cmps	local11, #1 wc
02728     54 00 00 FF 
0272c     F0 E5 85 F1 | 	sub	objptr, ##43504
02730     28 04 90 3D |  if_ae	jmp	#LR__0128
02734     11 2F 02 F6 | 	mov	local09, local03
02738     03 2E 66 F0 | 	shl	local09, #3
0273c     54 00 00 FF 
02740     F0 E5 05 F1 | 	add	objptr, ##43504
02744     F2 2E 02 F1 | 	add	local09, objptr
02748     11 31 02 F6 | 	mov	local10, local03
0274c     18 37 02 F6 | 	mov	local13, local10
02750     03 36 66 F0 | 	shl	local13, #3
02754     F2 34 02 F6 | 	mov	local12, objptr
02758     F2 36 02 F1 | 	add	local13, objptr
0275c     1B 13 02 FB | 	rdlong	arg01, local13
02760     54 00 00 FF 
02764     F0 E5 85 F1 | 	sub	objptr, ##43504
02768     D0 0E B0 FD | 	call	#_isnotename
0276c     04 2E 06 F1 | 	add	local09, #4
02770     17 FB 61 FC | 	wrlong	result1, local09
02774                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02774                 | ' if lparts(i).token>0 then 
02774     11 2F 02 F6 | 	mov	local09, local03
02778     03 2E 66 F0 | 	shl	local09, #3
0277c     54 00 00 FF 
02780     F0 E5 05 F1 | 	add	objptr, ##43504
02784     F2 2E 02 F1 | 	add	local09, objptr
02788     04 2E 06 F1 | 	add	local09, #4
0278c     17 33 02 FB | 	rdlong	local11, local09
02790     01 32 56 F2 | 	cmps	local11, #1 wc
02794     54 00 00 FF 
02798     F0 E5 85 F1 | 	sub	objptr, ##43504
0279c     88 00 90 CD |  if_b	jmp	#LR__0120
027a0     11 27 02 F6 | 	mov	local05, local03
027a4     03 26 66 F0 | 	shl	local05, #3
027a8     54 00 00 FF 
027ac     F0 E5 05 F1 | 	add	objptr, ##43504
027b0     F2 26 02 F1 | 	add	local05, objptr
027b4     04 26 06 F1 | 	add	local05, #4
027b8     13 33 02 FB | 	rdlong	local11, local05
027bc     19 13 02 F6 | 	mov	arg01, local11
027c0     54 00 00 FF 
027c4     F0 E5 85 F1 | 	sub	objptr, ##43504
027c8     D4 5F B1 FD | 	call	#_getnoteval
027cc     FD 62 02 F6 | 	mov	local35, result1
027d0     11 2F 02 F6 | 	mov	local09, local03
027d4     03 2E 66 F0 | 	shl	local09, #3
027d8     54 00 00 FF 
027dc     F0 E5 05 F1 | 	add	objptr, ##43504
027e0     F2 2E 02 F1 | 	add	local09, objptr
027e4     31 13 02 F6 | 	mov	arg01, local35
027e8     54 00 00 FF 
027ec     F0 E5 85 F1 | 	sub	objptr, ##43504
027f0     40 BD B1 FD | 	call	#__system__str_S
027f4     17 FB 61 FC | 	wrlong	result1, local09
027f8     11 25 02 F6 | 	mov	local04, local03
027fc     12 2F 02 F6 | 	mov	local09, local04
02800     03 2E 66 F0 | 	shl	local09, #3
02804     54 00 00 FF 
02808     F0 E5 05 F1 | 	add	objptr, ##43504
0280c     F2 2E 02 F1 | 	add	local09, objptr
02810     04 2E 06 F1 | 	add	local09, #4
02814     01 00 80 FF 
02818     17 05 68 FC | 	wrlong	##514, local09
0281c     54 00 00 FF 
02820     F0 E5 85 F1 | 	sub	objptr, ##43504
02824     34 03 90 FD | 	jmp	#LR__0128
02828                 | LR__0120
02828     11 27 02 F6 | 	mov	local05, local03
0282c     03 26 66 F0 | 	shl	local05, #3
02830     54 00 00 FF 
02834     F0 E5 05 F1 | 	add	objptr, ##43504
02838     F2 26 02 F1 | 	add	local05, objptr
0283c     13 13 02 FB | 	rdlong	arg01, local05
02840     54 00 00 FF 
02844     F0 E5 85 F1 | 	sub	objptr, ##43504
02848     50 25 B0 FD | 	call	#_isnum
0284c     FD 1E 02 F6 | 	mov	local01, result1
02850     7B 00 00 FF 
02854     E0 E4 05 F1 | 	add	objptr, ##63200
02858     F2 1E 62 FC | 	wrlong	local01, objptr
0285c     11 27 02 F6 | 	mov	local05, local03
02860     03 26 66 F0 | 	shl	local05, #3
02864     26 00 00 FF 
02868     F0 E4 85 F1 | 	sub	objptr, ##19696
0286c     F2 26 02 F1 | 	add	local05, objptr
02870     13 13 02 FB | 	rdlong	arg01, local05
02874     54 00 00 FF 
02878     F0 E5 85 F1 | 	sub	objptr, ##43504
0287c     F4 27 B0 FD | 	call	#_isint
02880     FD 1E 02 F6 | 	mov	local01, result1
02884     7B 00 00 FF 
02888     E4 E4 05 F1 | 	add	objptr, ##63204
0288c     F2 1E 62 FC | 	wrlong	local01, objptr
02890     11 27 02 F6 | 	mov	local05, local03
02894     03 26 66 F0 | 	shl	local05, #3
02898     26 00 00 FF 
0289c     F4 E4 85 F1 | 	sub	objptr, ##19700
028a0     F2 28 02 F6 | 	mov	local06, objptr
028a4     F2 26 02 F1 | 	add	local05, objptr
028a8     13 13 02 FB | 	rdlong	arg01, local05
028ac     54 00 00 FF 
028b0     F0 E5 85 F1 | 	sub	objptr, ##43504
028b4     14 29 B0 FD | 	call	#_isdec
028b8     7B 00 00 FF 
028bc     E8 E4 05 F1 | 	add	objptr, ##63208
028c0     F2 FA 61 FC | 	wrlong	result1, objptr
028c4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028c4     08 E4 85 F1 | 	sub	objptr, #8
028c8     F2 1E 0A FB | 	rdlong	local01, objptr wz
028cc     7B 00 00 FF 
028d0     E0 E4 85 F1 | 	sub	objptr, ##63200
028d4     60 00 90 AD |  if_e	jmp	#LR__0121
028d8     7B 00 00 FF 
028dc     E4 E4 05 F1 | 	add	objptr, ##63204
028e0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028e4     7B 00 00 FF 
028e8     E4 E4 85 F1 | 	sub	objptr, ##63204
028ec     48 00 90 AD |  if_e	jmp	#LR__0121
028f0     7B 00 00 FF 
028f4     E8 E4 05 F1 | 	add	objptr, ##63208
028f8     F2 32 0A FB | 	rdlong	local11, objptr wz
028fc     7B 00 00 FF 
02900     E8 E4 85 F1 | 	sub	objptr, ##63208
02904     30 00 90 AD |  if_e	jmp	#LR__0121
02908     11 25 02 F6 | 	mov	local04, local03
0290c     12 2F 02 F6 | 	mov	local09, local04
02910     03 2E 66 F0 | 	shl	local09, #3
02914     54 00 00 FF 
02918     F0 E5 05 F1 | 	add	objptr, ##43504
0291c     F2 2E 02 F1 | 	add	local09, objptr
02920     04 2E 06 F1 | 	add	local09, #4
02924     01 00 80 FF 
02928     17 01 68 FC | 	wrlong	##512, local09
0292c     54 00 00 FF 
02930     F0 E5 85 F1 | 	sub	objptr, ##43504
02934     24 02 90 FD | 	jmp	#LR__0128
02938                 | LR__0121
02938                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02938     7B 00 00 FF 
0293c     E0 E4 05 F1 | 	add	objptr, ##63200
02940     F2 1E 0A FB | 	rdlong	local01, objptr wz
02944     7B 00 00 FF 
02948     E0 E4 85 F1 | 	sub	objptr, ##63200
0294c     64 00 90 AD |  if_e	jmp	#LR__0122
02950     7B 00 00 FF 
02954     E4 E4 05 F1 | 	add	objptr, ##63204
02958     F2 2E 0A FB | 	rdlong	local09, objptr wz
0295c     7B 00 00 FF 
02960     E4 E4 85 F1 | 	sub	objptr, ##63204
02964     7B 00 00 5F 
02968     E8 E4 05 51 |  if_ne	add	objptr, ##63208
0296c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02970     7B 00 00 5F 
02974     E8 E4 85 51 |  if_ne	sub	objptr, ##63208
02978     19 29 22 56 |  if_ne	not	local06, local11
0297c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02980     30 00 90 AD |  if_e	jmp	#LR__0122
02984     11 25 02 F6 | 	mov	local04, local03
02988     12 2F 02 F6 | 	mov	local09, local04
0298c     03 2E 66 F0 | 	shl	local09, #3
02990     54 00 00 FF 
02994     F0 E5 05 F1 | 	add	objptr, ##43504
02998     F2 2E 02 F1 | 	add	local09, objptr
0299c     04 2E 06 F1 | 	add	local09, #4
029a0     01 00 80 FF 
029a4     17 03 68 FC | 	wrlong	##513, local09
029a8     54 00 00 FF 
029ac     F0 E5 85 F1 | 	sub	objptr, ##43504
029b0     A8 01 90 FD | 	jmp	#LR__0128
029b4                 | LR__0122
029b4                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
029b4     7B 00 00 FF 
029b8     E0 E4 05 F1 | 	add	objptr, ##63200
029bc     F2 1E 0A FB | 	rdlong	local01, objptr wz
029c0     7B 00 00 FF 
029c4     E0 E4 85 F1 | 	sub	objptr, ##63200
029c8     7B 00 00 5F 
029cc     E4 E4 05 51 |  if_ne	add	objptr, ##63204
029d0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029d4     7B 00 00 5F 
029d8     E4 E4 85 51 |  if_ne	sub	objptr, ##63204
029dc     17 2F 22 56 |  if_ne	not	local09, local09
029e0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029e4     7B 00 00 5F 
029e8     E8 E4 05 51 |  if_ne	add	objptr, ##63208
029ec     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029f0     7B 00 00 5F 
029f4     E8 E4 85 51 |  if_ne	sub	objptr, ##63208
029f8     19 29 22 56 |  if_ne	not	local06, local11
029fc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02a00     30 00 90 AD |  if_e	jmp	#LR__0123
02a04     11 25 02 F6 | 	mov	local04, local03
02a08     12 2F 02 F6 | 	mov	local09, local04
02a0c     03 2E 66 F0 | 	shl	local09, #3
02a10     54 00 00 FF 
02a14     F0 E5 05 F1 | 	add	objptr, ##43504
02a18     F2 2E 02 F1 | 	add	local09, objptr
02a1c     04 2E 06 F1 | 	add	local09, #4
02a20     01 00 80 FF 
02a24     17 05 68 FC | 	wrlong	##514, local09
02a28     54 00 00 FF 
02a2c     F0 E5 85 F1 | 	sub	objptr, ##43504
02a30     28 01 90 FD | 	jmp	#LR__0128
02a34                 | LR__0123
02a34                 | ' 
02a34                 | ' if isstring(lparts(i).part$) then 
02a34     11 27 02 F6 | 	mov	local05, local03
02a38     03 26 66 F0 | 	shl	local05, #3
02a3c     54 00 00 FF 
02a40     F0 E5 05 F1 | 	add	objptr, ##43504
02a44     F2 26 02 F1 | 	add	local05, objptr
02a48     13 13 02 FB | 	rdlong	arg01, local05
02a4c     54 00 00 FF 
02a50     F0 E5 85 F1 | 	sub	objptr, ##43504
02a54     34 28 B0 FD | 	call	#_isstring
02a58     00 FA 0D F2 | 	cmp	result1, #0 wz
02a5c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a60     11 2F 02 F6 | 	mov	local09, local03
02a64     03 2E 66 F0 | 	shl	local09, #3
02a68     54 00 00 FF 
02a6c     F0 E5 05 F1 | 	add	objptr, ##43504
02a70     F2 2E 02 F1 | 	add	local09, objptr
02a74     04 2E 06 F1 | 	add	local09, #4
02a78     01 00 80 FF 
02a7c     17 07 68 FC | 	wrlong	##515, local09
02a80     11 25 02 F6 | 	mov	local04, local03
02a84     12 2F 02 F6 | 	mov	local09, local04
02a88     03 2E 66 F0 | 	shl	local09, #3
02a8c     F2 2E 02 F1 | 	add	local09, objptr
02a90     11 37 02 F6 | 	mov	local13, local03
02a94     03 36 66 F0 | 	shl	local13, #3
02a98     F2 36 02 F1 | 	add	local13, objptr
02a9c     1B 29 02 FB | 	rdlong	local06, local13
02aa0     02 32 06 F6 | 	mov	local11, #2
02aa4     11 4B 02 F6 | 	mov	local23, local03
02aa8     25 43 02 F6 | 	mov	local19, local23
02aac     21 45 02 F6 | 	mov	local20, local19
02ab0     03 44 66 F0 | 	shl	local20, #3
02ab4     F2 46 02 F6 | 	mov	local21, objptr
02ab8     F2 44 02 F1 | 	add	local20, objptr
02abc     22 13 02 FB | 	rdlong	arg01, local20
02ac0     54 00 00 FF 
02ac4     F0 E5 85 F1 | 	sub	objptr, ##43504
02ac8     09 2B 02 F6 | 	mov	local07, arg01
02acc     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ad0                 | LR__0124
02ad0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ad4     01 2A 06 51 |  if_ne	add	local07, #1
02ad8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02adc                 | LR__0125
02adc     09 2B 82 F1 | 	sub	local07, arg01
02ae0     15 35 02 F6 | 	mov	local12, local07
02ae4     1A 17 02 F6 | 	mov	arg03, local12
02ae8     02 16 86 F1 | 	sub	arg03, #2
02aec     14 13 02 F6 | 	mov	arg01, local06
02af0     19 15 02 F6 | 	mov	arg02, local11
02af4     5C B9 B1 FD | 	call	#__system__Mid_S
02af8     17 FB 61 FC | 	wrlong	result1, local09
02afc     5C 00 90 FD | 	jmp	#LR__0128
02b00                 | LR__0126
02b00                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02b00     11 25 02 F6 | 	mov	local04, local03
02b04     12 27 02 F6 | 	mov	local05, local04
02b08     03 26 66 F0 | 	shl	local05, #3
02b0c     54 00 00 FF 
02b10     F0 E5 05 F1 | 	add	objptr, ##43504
02b14     F2 26 02 F1 | 	add	local05, objptr
02b18     13 13 02 FB | 	rdlong	arg01, local05
02b1c     54 00 00 FF 
02b20     F0 E5 85 F1 | 	sub	objptr, ##43504
02b24     00 20 B0 FD | 	call	#_isname
02b28     00 FA 4D F2 | 	cmps	result1, #0 wz
02b2c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b30     11 25 02 F6 | 	mov	local04, local03
02b34     12 2F 02 F6 | 	mov	local09, local04
02b38     03 2E 66 F0 | 	shl	local09, #3
02b3c     54 00 00 FF 
02b40     F0 E5 05 F1 | 	add	objptr, ##43504
02b44     F2 2E 02 F1 | 	add	local09, objptr
02b48     04 2E 06 F1 | 	add	local09, #4
02b4c     01 00 80 FF 
02b50     17 09 68 FC | 	wrlong	##516, local09
02b54     54 00 00 FF 
02b58     F0 E5 85 F1 | 	sub	objptr, ##43504
02b5c                 | LR__0127
02b5c                 | LR__0128
02b5c     01 22 06 F1 | 	add	local03, #1
02b60     98 F9 9F FD | 	jmp	#LR__0119
02b64                 | LR__0129
02b64     1D 2F 02 F6 | 	mov	local09, local15
02b68     03 2E 66 F0 | 	shl	local09, #3
02b6c     54 00 00 FF 
02b70     F0 E5 05 F1 | 	add	objptr, ##43504
02b74     F2 2E 02 F1 | 	add	local09, objptr
02b78     04 2E 06 F1 | 	add	local09, #4
02b7c     17 FD 6B FC | 	wrlong	#510, local09
02b80     1D 2F 02 F6 | 	mov	local09, local15
02b84     03 2E 66 F0 | 	shl	local09, #3
02b88     F2 26 02 F6 | 	mov	local05, objptr
02b8c     F2 2E 02 F1 | 	add	local09, objptr
02b90     5C 01 00 FF 
02b94     C9 29 06 F6 | 	mov	local06, ##@LR__4642
02b98     17 29 62 FC | 	wrlong	local06, local09
02b9c     10 00 00 FF 
02ba0     54 E4 05 F1 | 	add	objptr, ##8276
02ba4     F2 3A 62 FC | 	wrlong	local15, objptr
02ba8                 | ' 
02ba8                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02ba8                 | ' 
02ba8                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02ba8                 | '  
02ba8                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02ba8     16 00 00 FF 
02bac     94 E4 05 F1 | 	add	objptr, ##11412
02bb0     F2 12 02 FB | 	rdlong	arg01, objptr
02bb4     7B 00 00 FF 
02bb8     D8 E4 85 F1 | 	sub	objptr, ##63192
02bbc     5C 01 00 FF 
02bc0     CA 2F 06 F6 | 	mov	local09, ##@LR__4643
02bc4     17 15 02 F6 | 	mov	arg02, local09
02bc8     54 97 B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     EC 00 90 AD |  if_e	jmp	#LR__0130
02bd4     7B 00 00 FF 
02bd8     D8 E4 05 F1 | 	add	objptr, ##63192
02bdc     F2 12 02 FB | 	rdlong	arg01, objptr
02be0     7B 00 00 FF 
02be4     D8 E4 85 F1 | 	sub	objptr, ##63192
02be8     5C 01 00 FF 
02bec     CF 27 06 F6 | 	mov	local05, ##@LR__4644
02bf0     13 2F 02 F6 | 	mov	local09, local05
02bf4     17 15 02 F6 | 	mov	arg02, local09
02bf8     24 97 B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     BC 00 90 AD |  if_e	jmp	#LR__0130
02c04     7B 00 00 FF 
02c08     D8 E4 05 F1 | 	add	objptr, ##63192
02c0c     F2 12 02 FB | 	rdlong	arg01, objptr
02c10     7B 00 00 FF 
02c14     D8 E4 85 F1 | 	sub	objptr, ##63192
02c18     5C 01 00 FF 
02c1c     D4 29 06 F6 | 	mov	local06, ##@LR__4645
02c20     14 27 02 F6 | 	mov	local05, local06
02c24     13 15 02 F6 | 	mov	arg02, local05
02c28     F4 96 B1 FD | 	call	#__system___string_cmp
02c2c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c30     8C 00 90 AD |  if_e	jmp	#LR__0130
02c34     7B 00 00 FF 
02c38     D8 E4 05 F1 | 	add	objptr, ##63192
02c3c     F2 12 02 FB | 	rdlong	arg01, objptr
02c40     7B 00 00 FF 
02c44     D8 E4 85 F1 | 	sub	objptr, ##63192
02c48     5C 01 00 FF 
02c4c     D9 33 06 F6 | 	mov	local11, ##@LR__4646
02c50     19 29 02 F6 | 	mov	local06, local11
02c54     14 15 02 F6 | 	mov	arg02, local06
02c58     C4 96 B1 FD | 	call	#__system___string_cmp
02c5c     FD 26 0A F6 | 	mov	local05, result1 wz
02c60     5C 00 90 AD |  if_e	jmp	#LR__0130
02c64     7B 00 00 FF 
02c68     D8 E4 05 F1 | 	add	objptr, ##63192
02c6c     F2 12 02 FB | 	rdlong	arg01, objptr
02c70     7B 00 00 FF 
02c74     D8 E4 85 F1 | 	sub	objptr, ##63192
02c78     5C 01 00 FF 
02c7c     DD 33 06 F6 | 	mov	local11, ##@LR__4647
02c80     19 15 02 F6 | 	mov	arg02, local11
02c84     98 96 B1 FD | 	call	#__system___string_cmp
02c88     FD 28 0A F6 | 	mov	local06, result1 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0130
02c90     7B 00 00 FF 
02c94     D8 E4 05 F1 | 	add	objptr, ##63192
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     7B 00 00 FF 
02ca0     D8 E4 85 F1 | 	sub	objptr, ##63192
02ca4     5C 01 00 FF 
02ca8     E0 37 06 F6 | 	mov	local13, ##@LR__4648
02cac     1B 31 02 F6 | 	mov	local10, local13
02cb0     18 15 02 F6 | 	mov	arg02, local10
02cb4     68 96 B1 FD | 	call	#__system___string_cmp
02cb8     FD 32 0A F6 | 	mov	local11, result1 wz
02cbc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cc0                 | LR__0130
02cc0     7B 00 00 FF 
02cc4     D4 E4 05 F1 | 	add	objptr, ##63188
02cc8     F2 36 02 FB | 	rdlong	local13, objptr
02ccc     1B 31 02 F6 | 	mov	local10, local13
02cd0     01 30 06 F1 | 	add	local10, #1
02cd4     18 35 02 F6 | 	mov	local12, local10
02cd8     1A 4B 02 F6 | 	mov	local23, local12
02cdc     03 4A 66 F0 | 	shl	local23, #3
02ce0     26 00 00 FF 
02ce4     E4 E4 85 F1 | 	sub	objptr, ##19684
02ce8     F2 42 02 F6 | 	mov	local19, objptr
02cec     F2 4A 02 F1 | 	add	local23, objptr
02cf0     04 4A 06 F1 | 	add	local23, #4
02cf4     25 47 02 FB | 	rdlong	local21, local23
02cf8     04 4A 86 F1 | 	sub	local23, #4
02cfc     23 45 02 F6 | 	mov	local20, local21
02d00     01 00 00 FF 
02d04     04 44 0E F2 | 	cmp	local20, ##516 wz
02d08     54 00 00 FF 
02d0c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d10     48 00 90 5D |  if_ne	jmp	#LR__0131
02d14     7B 00 00 FF 
02d18     D4 E4 05 F1 | 	add	objptr, ##63188
02d1c     F2 2E 02 FB | 	rdlong	local09, objptr
02d20     01 2E 06 F1 | 	add	local09, #1
02d24     17 27 02 F6 | 	mov	local05, local09
02d28     03 26 66 F0 | 	shl	local05, #3
02d2c     26 00 00 FF 
02d30     E4 E4 85 F1 | 	sub	objptr, ##19684
02d34     F2 28 02 F6 | 	mov	local06, objptr
02d38     F2 26 02 F1 | 	add	local05, objptr
02d3c     01 00 00 FF 
02d40     03 32 06 F6 | 	mov	local11, ##515
02d44     04 26 06 F1 | 	add	local05, #4
02d48     01 00 80 FF 
02d4c     13 07 68 FC | 	wrlong	##515, local05
02d50     04 26 86 F1 | 	sub	local05, #4
02d54     54 00 00 FF 
02d58     F0 E5 85 F1 | 	sub	objptr, ##43504
02d5c                 | LR__0131
02d5c                 | ' 
02d5c                 | ' ' abbreviated command has to be at the position addptr
02d5c                 | ' 
02d5c                 | ' 
02d5c                 | ' 
02d5c                 | ' '2b determine a type of the line
02d5c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d5c     54 00 00 FF 
02d60     F0 E5 05 F1 | 	add	objptr, ##43504
02d64     F2 12 02 FB | 	rdlong	arg01, objptr
02d68     54 00 00 FF 
02d6c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d70     58 24 B0 FD | 	call	#_isdec
02d74     00 FA 0D F2 | 	cmp	result1, #0 wz
02d78     30 00 90 AD |  if_e	jmp	#LR__0132
02d7c     54 00 00 FF 
02d80     F0 E5 05 F1 | 	add	objptr, ##43504
02d84     F2 12 02 FB | 	rdlong	arg01, objptr
02d88     54 00 00 FF 
02d8c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d90     00 14 06 F6 | 	mov	arg02, #0
02d94     54 C7 B1 FD | 	call	#__system____builtin_atoi
02d98     7B 00 00 FF 
02d9c     74 E4 05 F1 | 	add	objptr, ##63092
02da0     F2 FA 61 FC | 	wrlong	result1, objptr
02da4     7B 00 00 FF 
02da8     74 E4 85 F1 | 	sub	objptr, ##63092
02dac                 | LR__0132
02dac                 | ' 
02dac                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dac     7B 00 00 FF 
02db0     74 E4 05 F1 | 	add	objptr, ##63092
02db4     F2 1E 02 FB | 	rdlong	local01, objptr
02db8     7B 00 00 FF 
02dbc     74 E4 85 F1 | 	sub	objptr, ##63092
02dc0     01 1E 16 F2 | 	cmp	local01, #1 wc
02dc4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dc8     01 3A 0E F2 | 	cmp	local15, #1 wz
02dcc     57 00 00 AF 
02dd0     08 E4 05 A1 |  if_e	add	objptr, ##44552
02dd4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02dd8     57 00 00 AF 
02ddc     08 E4 85 A1 |  if_e	sub	objptr, ##44552
02de0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02de4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02de8     7B 00 00 FF 
02dec     74 E4 05 F1 | 	add	objptr, ##63092
02df0     F2 12 02 FB | 	rdlong	arg01, objptr
02df4     7B 00 00 FF 
02df8     74 E4 85 F1 | 	sub	objptr, ##63092
02dfc     F0 24 B0 FD | 	call	#_deleteline
02e00     4C 05 90 FD | 	jmp	#LR__0150
02e04                 | LR__0133
02e04                 | ' 
02e04                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e04     7B 00 00 FF 
02e08     74 E4 05 F1 | 	add	objptr, ##63092
02e0c     F2 1E 02 FB | 	rdlong	local01, objptr
02e10     7B 00 00 FF 
02e14     74 E4 85 F1 | 	sub	objptr, ##63092
02e18     01 1E 16 F2 | 	cmp	local01, #1 wc
02e1c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e20     57 00 00 FF 
02e24     08 E4 05 F1 | 	add	objptr, ##44552
02e28     F2 26 02 FB | 	rdlong	local05, objptr
02e2c     57 00 00 FF 
02e30     08 E4 85 F1 | 	sub	objptr, ##44552
02e34     13 2F 0A F6 | 	mov	local09, local05 wz
02e38     20 00 90 AD |  if_e	jmp	#LR__0134
02e3c     57 00 00 FF 
02e40     08 E4 05 F1 | 	add	objptr, ##44552
02e44     F2 32 02 FB | 	rdlong	local11, objptr
02e48     57 00 00 FF 
02e4c     08 E4 85 F1 | 	sub	objptr, ##44552
02e50     19 29 02 F6 | 	mov	local06, local11
02e54     03 28 0E F2 | 	cmp	local06, #3 wz
02e58     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e5c                 | LR__0134
02e5c     55 00 00 FF 
02e60     04 E4 05 F1 | 	add	objptr, ##43524
02e64     F2 36 02 FB | 	rdlong	local13, objptr
02e68     55 00 00 FF 
02e6c     04 E4 85 F1 | 	sub	objptr, ##43524
02e70     1B 31 02 F6 | 	mov	local10, local13
02e74     1B 30 0E F2 | 	cmp	local10, #27 wz
02e78     90 00 90 AD |  if_e	jmp	#LR__0136
02e7c     7B 00 00 FF 
02e80     74 E4 05 F1 | 	add	objptr, ##63092
02e84     F2 12 02 FB | 	rdlong	arg01, objptr
02e88     24 00 00 FF 
02e8c     6C E4 85 F1 | 	sub	objptr, ##18540
02e90     F2 16 02 FB | 	rdlong	arg03, objptr
02e94     57 00 00 FF 
02e98     08 E4 85 F1 | 	sub	objptr, ##44552
02e9c     00 14 06 F6 | 	mov	arg02, #0
02ea0     80 38 B0 FD | 	call	#_compile
02ea4     FD 20 0A F6 | 	mov	local02, result1 wz
02ea8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ea8                 | '   if err<>0 then printerror(err): goto 104
02ea8     0C 00 90 AD |  if_e	jmp	#LR__0135
02eac     10 13 02 F6 | 	mov	arg01, local02
02eb0     A4 5C B1 FD | 	call	#_printerror
02eb4     98 04 90 FD | 	jmp	#LR__0150
02eb8                 | LR__0135
02eb8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02eb8     7B 00 00 FF 
02ebc     B0 E4 05 F1 | 	add	objptr, ##63152
02ec0     F2 12 02 FB | 	rdlong	arg01, objptr
02ec4     7B 00 00 FF 
02ec8     B0 E4 85 F1 | 	sub	objptr, ##63152
02ecc     5C 01 00 FF 
02ed0     E4 15 06 F6 | 	mov	arg02, ##@LR__4649
02ed4     48 94 B1 FD | 	call	#__system___string_cmp
02ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
02edc     70 04 90 AD |  if_e	jmp	#LR__0150
02ee0     7B 00 00 FF 
02ee4     B0 E4 05 F1 | 	add	objptr, ##63152
02ee8     F2 1E 02 FB | 	rdlong	local01, objptr
02eec     24 00 00 FF 
02ef0     B0 E4 85 F1 | 	sub	objptr, ##18608
02ef4     F2 1E 62 FC | 	wrlong	local01, objptr
02ef8     08 E4 05 F1 | 	add	objptr, #8
02efc     F2 08 68 FC | 	wrlong	#4, objptr
02f00     57 00 00 FF 
02f04     08 E4 85 F1 | 	sub	objptr, ##44552
02f08     64 DB 9F FD | 	jmp	#LR__0020
02f0c                 | LR__0136
02f0c                 | '       							
02f0c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f0c     7B 00 00 FF 
02f10     74 E4 05 F1 | 	add	objptr, ##63092
02f14     F2 1E 02 FB | 	rdlong	local01, objptr
02f18     7B 00 00 FF 
02f1c     74 E4 85 F1 | 	sub	objptr, ##63092
02f20     01 1E 16 F2 | 	cmp	local01, #1 wc
02f24     EC 00 90 CD |  if_b	jmp	#LR__0139
02f28     57 00 00 FF 
02f2c     08 E4 05 F1 | 	add	objptr, ##44552
02f30     F2 26 02 FB | 	rdlong	local05, objptr
02f34     57 00 00 FF 
02f38     08 E4 85 F1 | 	sub	objptr, ##44552
02f3c     01 26 0E F2 | 	cmp	local05, #1 wz
02f40     20 00 90 AD |  if_e	jmp	#LR__0137
02f44     57 00 00 FF 
02f48     08 E4 05 F1 | 	add	objptr, ##44552
02f4c     F2 32 02 FB | 	rdlong	local11, objptr
02f50     57 00 00 FF 
02f54     08 E4 85 F1 | 	sub	objptr, ##44552
02f58     19 29 02 F6 | 	mov	local06, local11
02f5c     02 28 0E F2 | 	cmp	local06, #2 wz
02f60     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f64                 | LR__0137
02f64     54 00 00 FF 
02f68     FC E5 05 F1 | 	add	objptr, ##43516
02f6c     F2 36 02 FB | 	rdlong	local13, objptr
02f70     54 00 00 FF 
02f74     FC E5 85 F1 | 	sub	objptr, ##43516
02f78     1B 31 02 F6 | 	mov	local10, local13
02f7c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f80     90 00 90 AD |  if_e	jmp	#LR__0139
02f84     7B 00 00 FF 
02f88     74 E4 05 F1 | 	add	objptr, ##63092
02f8c     F2 12 02 FB | 	rdlong	arg01, objptr
02f90     24 00 00 FF 
02f94     6C E4 85 F1 | 	sub	objptr, ##18540
02f98     F2 16 02 FB | 	rdlong	arg03, objptr
02f9c     57 00 00 FF 
02fa0     08 E4 85 F1 | 	sub	objptr, ##44552
02fa4     00 14 06 F6 | 	mov	arg02, #0
02fa8     78 37 B0 FD | 	call	#_compile
02fac     FD 20 0A F6 | 	mov	local02, result1 wz
02fb0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fb0                 | '   if err<>0 then printerror(err): goto 104
02fb0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fb4     10 13 02 F6 | 	mov	arg01, local02
02fb8     9C 5B B1 FD | 	call	#_printerror
02fbc     90 03 90 FD | 	jmp	#LR__0150
02fc0                 | LR__0138
02fc0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fc0     7B 00 00 FF 
02fc4     B0 E4 05 F1 | 	add	objptr, ##63152
02fc8     F2 12 02 FB | 	rdlong	arg01, objptr
02fcc     7B 00 00 FF 
02fd0     B0 E4 85 F1 | 	sub	objptr, ##63152
02fd4     5C 01 00 FF 
02fd8     E5 15 06 F6 | 	mov	arg02, ##@LR__4650
02fdc     40 93 B1 FD | 	call	#__system___string_cmp
02fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe4     68 03 90 AD |  if_e	jmp	#LR__0150
02fe8     7B 00 00 FF 
02fec     B0 E4 05 F1 | 	add	objptr, ##63152
02ff0     F2 1E 02 FB | 	rdlong	local01, objptr
02ff4     24 00 00 FF 
02ff8     B0 E4 85 F1 | 	sub	objptr, ##18608
02ffc     F2 1E 62 FC | 	wrlong	local01, objptr
03000     08 E4 05 F1 | 	add	objptr, #8
03004     F2 08 68 FC | 	wrlong	#4, objptr
03008     57 00 00 FF 
0300c     08 E4 85 F1 | 	sub	objptr, ##44552
03010     5C DA 9F FD | 	jmp	#LR__0020
03014                 | LR__0139
03014                 | ' 							 
03014                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03014     7B 00 00 FF 
03018     74 E4 05 F1 | 	add	objptr, ##63092
0301c     F2 1E 02 FB | 	rdlong	local01, objptr
03020     7B 00 00 FF 
03024     74 E4 85 F1 | 	sub	objptr, ##63092
03028     01 1E 16 F2 | 	cmp	local01, #1 wc
0302c     D4 00 90 CD |  if_b	jmp	#LR__0141
03030     57 00 00 FF 
03034     08 E4 05 F1 | 	add	objptr, ##44552
03038     F2 26 0A FB | 	rdlong	local05, objptr wz
0303c     57 00 00 FF 
03040     08 E4 85 F1 | 	sub	objptr, ##44552
03044     20 00 90 AD |  if_e	jmp	#LR__0140
03048     57 00 00 FF 
0304c     08 E4 05 F1 | 	add	objptr, ##44552
03050     F2 32 02 FB | 	rdlong	local11, objptr
03054     57 00 00 FF 
03058     08 E4 85 F1 | 	sub	objptr, ##44552
0305c     19 29 02 F6 | 	mov	local06, local11
03060     03 28 0E F2 | 	cmp	local06, #3 wz
03064     9C 00 90 5D |  if_ne	jmp	#LR__0141
03068                 | LR__0140
03068     55 00 00 FF 
0306c     04 E4 05 F1 | 	add	objptr, ##43524
03070     F2 36 02 FB | 	rdlong	local13, objptr
03074     55 00 00 FF 
03078     04 E4 85 F1 | 	sub	objptr, ##43524
0307c     1B 31 02 F6 | 	mov	local10, local13
03080     1B 30 0E F2 | 	cmp	local10, #27 wz
03084     7C 00 90 5D |  if_ne	jmp	#LR__0141
03088     7B 00 00 FF 
0308c     74 E4 05 F1 | 	add	objptr, ##63092
03090     F2 12 02 FB | 	rdlong	arg01, objptr
03094     24 00 00 FF 
03098     6C E4 85 F1 | 	sub	objptr, ##18540
0309c     F2 16 02 FB | 	rdlong	arg03, objptr
030a0     57 00 00 FF 
030a4     08 E4 85 F1 | 	sub	objptr, ##44552
030a8     00 14 06 F6 | 	mov	arg02, #0
030ac     44 37 B0 FD | 	call	#_compile_assign
030b0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030b0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030b0     7B 00 00 FF 
030b4     B0 E4 05 F1 | 	add	objptr, ##63152
030b8     F2 12 02 FB | 	rdlong	arg01, objptr
030bc     7B 00 00 FF 
030c0     B0 E4 85 F1 | 	sub	objptr, ##63152
030c4     5C 01 00 FF 
030c8     E6 15 06 F6 | 	mov	arg02, ##@LR__4651
030cc     50 92 B1 FD | 	call	#__system___string_cmp
030d0     00 FA 0D F2 | 	cmp	result1, #0 wz
030d4     78 02 90 AD |  if_e	jmp	#LR__0150
030d8     7B 00 00 FF 
030dc     B0 E4 05 F1 | 	add	objptr, ##63152
030e0     F2 1E 02 FB | 	rdlong	local01, objptr
030e4     24 00 00 FF 
030e8     B0 E4 85 F1 | 	sub	objptr, ##18608
030ec     F2 1E 62 FC | 	wrlong	local01, objptr
030f0     08 E4 05 F1 | 	add	objptr, #8
030f4     F2 08 68 FC | 	wrlong	#4, objptr
030f8     57 00 00 FF 
030fc     08 E4 85 F1 | 	sub	objptr, ##44552
03100     6C D9 9F FD | 	jmp	#LR__0020
03104                 | LR__0141
03104                 | '     							 
03104                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03104     7B 00 00 FF 
03108     74 E4 05 F1 | 	add	objptr, ##63092
0310c     F2 1E 02 FB | 	rdlong	local01, objptr
03110     7B 00 00 FF 
03114     74 E4 85 F1 | 	sub	objptr, ##63092
03118     01 1E 16 F2 | 	cmp	local01, #1 wc
0311c     CC 00 90 CD |  if_b	jmp	#LR__0142
03120     57 00 00 FF 
03124     08 E4 05 F1 | 	add	objptr, ##44552
03128     F2 26 02 FB | 	rdlong	local05, objptr
0312c     57 00 00 FF 
03130     08 E4 85 F1 | 	sub	objptr, ##44552
03134     01 26 0E F2 | 	cmp	local05, #1 wz
03138     57 00 00 5F 
0313c     08 E4 05 51 |  if_ne	add	objptr, ##44552
03140     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03144     57 00 00 5F 
03148     08 E4 85 51 |  if_ne	sub	objptr, ##44552
0314c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03150     54 00 00 AF 
03154     FC E5 05 A1 |  if_e	add	objptr, ##43516
03158     F2 36 02 AB |  if_e	rdlong	local13, objptr
0315c     54 00 00 AF 
03160     FC E5 85 A1 |  if_e	sub	objptr, ##43516
03164     1B 31 02 A6 |  if_e	mov	local10, local13
03168     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0316c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03170     7B 00 00 FF 
03174     74 E4 05 F1 | 	add	objptr, ##63092
03178     F2 12 02 FB | 	rdlong	arg01, objptr
0317c     24 00 00 FF 
03180     6C E4 85 F1 | 	sub	objptr, ##18540
03184     F2 16 02 FB | 	rdlong	arg03, objptr
03188     57 00 00 FF 
0318c     08 E4 85 F1 | 	sub	objptr, ##44552
03190     00 14 06 F6 | 	mov	arg02, #0
03194     5C 36 B0 FD | 	call	#_compile_assign
03198                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
03198                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
03198     7B 00 00 FF 
0319c     B0 E4 05 F1 | 	add	objptr, ##63152
031a0     F2 12 02 FB | 	rdlong	arg01, objptr
031a4     7B 00 00 FF 
031a8     B0 E4 85 F1 | 	sub	objptr, ##63152
031ac     5C 01 00 FF 
031b0     E7 15 06 F6 | 	mov	arg02, ##@LR__4652
031b4     68 91 B1 FD | 	call	#__system___string_cmp
031b8     00 FA 0D F2 | 	cmp	result1, #0 wz
031bc     90 01 90 AD |  if_e	jmp	#LR__0150
031c0     7B 00 00 FF 
031c4     B0 E4 05 F1 | 	add	objptr, ##63152
031c8     F2 1E 02 FB | 	rdlong	local01, objptr
031cc     24 00 00 FF 
031d0     B0 E4 85 F1 | 	sub	objptr, ##18608
031d4     F2 1E 62 FC | 	wrlong	local01, objptr
031d8     08 E4 05 F1 | 	add	objptr, #8
031dc     F2 08 68 FC | 	wrlong	#4, objptr
031e0     57 00 00 FF 
031e4     08 E4 85 F1 | 	sub	objptr, ##44552
031e8     84 D8 9F FD | 	jmp	#LR__0020
031ec                 | LR__0142
031ec                 | ' 
031ec                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031ec     54 00 00 FF 
031f0     F4 E5 05 F1 | 	add	objptr, ##43508
031f4     F2 1E 02 FB | 	rdlong	local01, objptr
031f8     54 00 00 FF 
031fc     F4 E5 85 F1 | 	sub	objptr, ##43508
03200     01 00 00 FF 
03204     04 1E 0E F2 | 	cmp	local01, ##516 wz
03208     54 00 00 AF 
0320c     FC E5 05 A1 |  if_e	add	objptr, ##43516
03210     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03214     54 00 00 AF 
03218     FC E5 85 A1 |  if_e	sub	objptr, ##43516
0321c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03220     14 00 90 5D |  if_ne	jmp	#LR__0143
03224     00 12 06 F6 | 	mov	arg01, #0
03228     00 14 06 F6 | 	mov	arg02, #0
0322c     00 16 06 F6 | 	mov	arg03, #0
03230     C0 35 B0 FD | 	call	#_compile_assign
03234     90 00 90 FD | 	jmp	#LR__0145
03238                 | LR__0143
03238                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03238     54 00 00 FF 
0323c     F4 E5 05 F1 | 	add	objptr, ##43508
03240     F2 1E 02 FB | 	rdlong	local01, objptr
03244     54 00 00 FF 
03248     F4 E5 85 F1 | 	sub	objptr, ##43508
0324c     01 00 00 FF 
03250     04 1E 0E F2 | 	cmp	local01, ##516 wz
03254     54 00 00 AF 
03258     FC E5 05 A1 |  if_e	add	objptr, ##43516
0325c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03260     54 00 00 AF 
03264     FC E5 85 A1 |  if_e	sub	objptr, ##43516
03268     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0326c     44 00 90 5D |  if_ne	jmp	#LR__0144
03270     00 12 06 F6 | 	mov	arg01, #0
03274     10 EA B1 FD | 	call	#__system___getiolock_0474
03278     FD 12 02 F6 | 	mov	arg01, result1
0327c     78 90 B1 FD | 	call	#__system___lockmem
03280     5C 01 00 FF 
03284     E8 15 06 F6 | 	mov	arg02, ##@LR__4653
03288     00 12 06 F6 | 	mov	arg01, #0
0328c     00 16 06 F6 | 	mov	arg03, #0
03290     68 9D B1 FD | 	call	#__system___basic_print_string
03294     00 12 06 F6 | 	mov	arg01, #0
03298     0A 14 06 F6 | 	mov	arg02, #10
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     00 9D B1 FD | 	call	#__system___basic_print_char
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     DC E9 B1 FD | 	call	#__system___getiolock_0474
032ac     FD 00 68 FC | 	wrlong	#0, result1
032b0     7C 00 90 FD | 	jmp	#LR__0149
032b4                 | LR__0144
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     00 14 06 F6 | 	mov	arg02, #0
032bc     00 16 06 F6 | 	mov	arg03, #0
032c0     60 34 B0 FD | 	call	#_compile
032c4     FD 20 02 F6 | 	mov	local02, result1
032c8                 | LR__0145
032c8                 | ' 
032c8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032c8                 | ' 
032c8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032c8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032c8                 | ' if err=0 then execute_line() else printerror(err)
032c8     00 20 0E F2 | 	cmp	local02, #0 wz
032cc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032d0     00 12 06 F6 | 	mov	arg01, #0
032d4     EC 6C B0 FD | 	call	#_execute_line
032d8     08 00 90 FD | 	jmp	#LR__0147
032dc                 | LR__0146
032dc     10 13 02 F6 | 	mov	arg01, local02
032e0     74 58 B1 FD | 	call	#_printerror
032e4                 | LR__0147
032e4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032e4     7B 00 00 FF 
032e8     B0 E4 05 F1 | 	add	objptr, ##63152
032ec     F2 12 02 FB | 	rdlong	arg01, objptr
032f0     7B 00 00 FF 
032f4     B0 E4 85 F1 | 	sub	objptr, ##63152
032f8     5D 01 00 FF 
032fc     17 14 06 F6 | 	mov	arg02, ##@LR__4654
03300     1C 90 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     24 00 90 AD |  if_e	jmp	#LR__0148
0330c     7B 00 00 FF 
03310     B0 E4 05 F1 | 	add	objptr, ##63152
03314     F2 1E 02 FB | 	rdlong	local01, objptr
03318     24 00 00 FF 
0331c     B0 E4 85 F1 | 	sub	objptr, ##18608
03320     F2 1E 62 FC | 	wrlong	local01, objptr
03324     57 00 00 FF 
03328     00 E4 85 F1 | 	sub	objptr, ##44544
0332c     40 D7 9F FD | 	jmp	#LR__0020
03330                 | LR__0148
03330                 | LR__0149
03330     5D 01 00 FF 
03334     18 12 06 F6 | 	mov	arg01, ##@LR__4655
03338                 | ' 
03338                 | ' write(text)
03338     80 7E B1 FD | 	call	#_hg010b_spin2_write
0333c                 | ' crlf
0333c     DC 7F B1 FD | 	call	#_hg010b_spin2_crlf
03340     5D 01 00 FF 
03344     19 12 06 F6 | 	mov	arg01, ##@LR__4656
03348                 | ' 
03348                 | ' write(text)
03348     70 7E B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     CC 7F B1 FD | 	call	#_hg010b_spin2_crlf
03350                 | LR__0150
03350     A7 F0 03 F6 | 	mov	ptra, fp
03354     B2 00 A0 FD | 	call	#popregs_
03358                 | _interpret_ret
03358     2D 00 64 FD | 	ret
0335c                 | 
0335c                 | ' 
0335c                 | ' 
0335c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0335c                 | ' 
0335c                 | ' function isoperator(s as string) as ubyte
0335c                 | _isoperator
0335c     01 4A 05 F6 | 	mov	COUNT_, #1
03360     A8 00 A0 FD | 	call	#pushregs_
03364                 | ' 
03364                 | ' select case s
03364     09 1F 02 F6 | 	mov	local01, arg01
03368     5D 01 00 FF 
0336c     1F 14 06 F6 | 	mov	arg02, ##@LR__4657
03370     0F 13 02 F6 | 	mov	arg01, local01
03374     A8 8F B1 FD | 	call	#__system___string_cmp
03378     00 FA 0D F2 | 	cmp	result1, #0 wz
0337c     FC 01 90 AD |  if_e	jmp	#LR__0160
03380     5D 01 00 FF 
03384     21 14 06 F6 | 	mov	arg02, ##@LR__4658
03388     0F 13 02 F6 | 	mov	arg01, local01
0338c     90 8F B1 FD | 	call	#__system___string_cmp
03390     00 FA 0D F2 | 	cmp	result1, #0 wz
03394     EC 01 90 AD |  if_e	jmp	#LR__0161
03398     5D 01 00 FF 
0339c     23 14 06 F6 | 	mov	arg02, ##@LR__4659
033a0     0F 13 02 F6 | 	mov	arg01, local01
033a4     78 8F B1 FD | 	call	#__system___string_cmp
033a8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ac     DC 01 90 AD |  if_e	jmp	#LR__0162
033b0     5D 01 00 FF 
033b4     26 14 06 F6 | 	mov	arg02, ##@LR__4660
033b8     0F 13 02 F6 | 	mov	arg01, local01
033bc     60 8F B1 FD | 	call	#__system___string_cmp
033c0     00 FA 0D F2 | 	cmp	result1, #0 wz
033c4     CC 01 90 AD |  if_e	jmp	#LR__0163
033c8     5D 01 00 FF 
033cc     2A 14 06 F6 | 	mov	arg02, ##@LR__4661
033d0     0F 13 02 F6 | 	mov	arg01, local01
033d4     48 8F B1 FD | 	call	#__system___string_cmp
033d8     00 FA 0D F2 | 	cmp	result1, #0 wz
033dc     BC 01 90 AD |  if_e	jmp	#LR__0164
033e0     5D 01 00 FF 
033e4     2C 14 06 F6 | 	mov	arg02, ##@LR__4662
033e8     0F 13 02 F6 | 	mov	arg01, local01
033ec     30 8F B1 FD | 	call	#__system___string_cmp
033f0     00 FA 0D F2 | 	cmp	result1, #0 wz
033f4     AC 01 90 AD |  if_e	jmp	#LR__0165
033f8     5D 01 00 FF 
033fc     2E 14 06 F6 | 	mov	arg02, ##@LR__4663
03400     0F 13 02 F6 | 	mov	arg01, local01
03404     18 8F B1 FD | 	call	#__system___string_cmp
03408     00 FA 0D F2 | 	cmp	result1, #0 wz
0340c     9C 01 90 AD |  if_e	jmp	#LR__0166
03410     5D 01 00 FF 
03414     32 14 06 F6 | 	mov	arg02, ##@LR__4664
03418     0F 13 02 F6 | 	mov	arg01, local01
0341c     00 8F B1 FD | 	call	#__system___string_cmp
03420     00 FA 0D F2 | 	cmp	result1, #0 wz
03424     8C 01 90 AD |  if_e	jmp	#LR__0167
03428     5D 01 00 FF 
0342c     36 14 06 F6 | 	mov	arg02, ##@LR__4665
03430     0F 13 02 F6 | 	mov	arg01, local01
03434     E8 8E B1 FD | 	call	#__system___string_cmp
03438     00 FA 0D F2 | 	cmp	result1, #0 wz
0343c     7C 01 90 AD |  if_e	jmp	#LR__0168
03440     5D 01 00 FF 
03444     3A 14 06 F6 | 	mov	arg02, ##@LR__4666
03448     0F 13 02 F6 | 	mov	arg01, local01
0344c     D0 8E B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     6C 01 90 AD |  if_e	jmp	#LR__0169
03458     5D 01 00 FF 
0345c     3E 14 06 F6 | 	mov	arg02, ##@LR__4667
03460     0F 13 02 F6 | 	mov	arg01, local01
03464     B8 8E B1 FD | 	call	#__system___string_cmp
03468     00 FA 0D F2 | 	cmp	result1, #0 wz
0346c     5C 01 90 AD |  if_e	jmp	#LR__0170
03470     5D 01 00 FF 
03474     42 14 06 F6 | 	mov	arg02, ##@LR__4668
03478     0F 13 02 F6 | 	mov	arg01, local01
0347c     A0 8E B1 FD | 	call	#__system___string_cmp
03480     00 FA 0D F2 | 	cmp	result1, #0 wz
03484     4C 01 90 AD |  if_e	jmp	#LR__0171
03488     5D 01 00 FF 
0348c     44 14 06 F6 | 	mov	arg02, ##@LR__4669
03490     0F 13 02 F6 | 	mov	arg01, local01
03494     88 8E B1 FD | 	call	#__system___string_cmp
03498     00 FA 0D F2 | 	cmp	result1, #0 wz
0349c     3C 01 90 AD |  if_e	jmp	#LR__0172
034a0     5D 01 00 FF 
034a4     48 14 06 F6 | 	mov	arg02, ##@LR__4670
034a8     0F 13 02 F6 | 	mov	arg01, local01
034ac     70 8E B1 FD | 	call	#__system___string_cmp
034b0     00 FA 0D F2 | 	cmp	result1, #0 wz
034b4     2C 01 90 AD |  if_e	jmp	#LR__0173
034b8     5D 01 00 FF 
034bc     4A 14 06 F6 | 	mov	arg02, ##@LR__4671
034c0     0F 13 02 F6 | 	mov	arg01, local01
034c4     58 8E B1 FD | 	call	#__system___string_cmp
034c8     00 FA 0D F2 | 	cmp	result1, #0 wz
034cc     1C 01 90 AD |  if_e	jmp	#LR__0174
034d0     5D 01 00 FF 
034d4     4C 14 06 F6 | 	mov	arg02, ##@LR__4672
034d8     0F 13 02 F6 | 	mov	arg01, local01
034dc     40 8E B1 FD | 	call	#__system___string_cmp
034e0     00 FA 0D F2 | 	cmp	result1, #0 wz
034e4     0C 01 90 AD |  if_e	jmp	#LR__0175
034e8     5D 01 00 FF 
034ec     4F 14 06 F6 | 	mov	arg02, ##@LR__4673
034f0     0F 13 02 F6 | 	mov	arg01, local01
034f4     28 8E B1 FD | 	call	#__system___string_cmp
034f8     00 FA 0D F2 | 	cmp	result1, #0 wz
034fc     FC 00 90 AD |  if_e	jmp	#LR__0176
03500     5D 01 00 FF 
03504     52 14 06 F6 | 	mov	arg02, ##@LR__4674
03508     0F 13 02 F6 | 	mov	arg01, local01
0350c     10 8E B1 FD | 	call	#__system___string_cmp
03510     00 FA 0D F2 | 	cmp	result1, #0 wz
03514     EC 00 90 AD |  if_e	jmp	#LR__0177
03518     5D 01 00 FF 
0351c     54 14 06 F6 | 	mov	arg02, ##@LR__4675
03520     0F 13 02 F6 | 	mov	arg01, local01
03524     F8 8D B1 FD | 	call	#__system___string_cmp
03528     00 FA 0D F2 | 	cmp	result1, #0 wz
0352c     DC 00 90 AD |  if_e	jmp	#LR__0178
03530     5D 01 00 FF 
03534     56 14 06 F6 | 	mov	arg02, ##@LR__4676
03538     0F 13 02 F6 | 	mov	arg01, local01
0353c     E0 8D B1 FD | 	call	#__system___string_cmp
03540     00 FA 0D F2 | 	cmp	result1, #0 wz
03544     CC 00 90 AD |  if_e	jmp	#LR__0179
03548     5D 01 00 FF 
0354c     59 14 06 F6 | 	mov	arg02, ##@LR__4677
03550     0F 13 02 F6 | 	mov	arg01, local01
03554     C8 8D B1 FD | 	call	#__system___string_cmp
03558     00 FA 0D F2 | 	cmp	result1, #0 wz
0355c     BC 00 90 AD |  if_e	jmp	#LR__0180
03560     5D 01 00 FF 
03564     5C 14 06 F6 | 	mov	arg02, ##@LR__4678
03568     0F 13 02 F6 | 	mov	arg01, local01
0356c     B0 8D B1 FD | 	call	#__system___string_cmp
03570     00 FA 0D F2 | 	cmp	result1, #0 wz
03574     AC 00 90 AD |  if_e	jmp	#LR__0181
03578     B0 00 90 FD | 	jmp	#LR__0182
0357c                 | LR__0160
0357c     01 FA 05 F6 | 	mov	result1, #1
03580     AC 00 90 FD | 	jmp	#LR__0183
03584                 | LR__0161
03584     02 FA 05 F6 | 	mov	result1, #2
03588     A4 00 90 FD | 	jmp	#LR__0183
0358c                 | LR__0162
0358c     03 FA 05 F6 | 	mov	result1, #3
03590     9C 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0163
03594     04 FA 05 F6 | 	mov	result1, #4
03598     94 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0164
0359c     05 FA 05 F6 | 	mov	result1, #5
035a0     8C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0165
035a4     06 FA 05 F6 | 	mov	result1, #6
035a8     84 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0166
035ac     07 FA 05 F6 | 	mov	result1, #7
035b0     7C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0167
035b4     08 FA 05 F6 | 	mov	result1, #8
035b8     74 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0168
035bc     09 FA 05 F6 | 	mov	result1, #9
035c0     6C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0169
035c4     0A FA 05 F6 | 	mov	result1, #10
035c8     64 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0170
035cc     0B FA 05 F6 | 	mov	result1, #11
035d0     5C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0171
035d4     0C FA 05 F6 | 	mov	result1, #12
035d8     54 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0172
035dc     0D FA 05 F6 | 	mov	result1, #13
035e0     4C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0173
035e4     0E FA 05 F6 | 	mov	result1, #14
035e8     44 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0174
035ec     1B FA 05 F6 | 	mov	result1, #27
035f0     3C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0175
035f4     27 FA 05 F6 | 	mov	result1, #39
035f8     34 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0176
035fc     26 FA 05 F6 | 	mov	result1, #38
03600     2C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0177
03604     10 FA 05 F6 | 	mov	result1, #16
03608     24 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0178
0360c     0F FA 05 F6 | 	mov	result1, #15
03610     1C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0179
03614     2A FA 05 F6 | 	mov	result1, #42
03618     14 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0180
0361c     28 FA 05 F6 | 	mov	result1, #40
03620     0C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0181
03624     29 FA 05 F6 | 	mov	result1, #41
03628     04 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0182
0362c     00 FA 05 F6 | 	mov	result1, #0
03630                 | LR__0183
03630     A7 F0 03 F6 | 	mov	ptra, fp
03634     B2 00 A0 FD | 	call	#popregs_
03638                 | _isoperator_ret
03638     2D 00 64 FD | 	ret
0363c                 | 
0363c                 | ' 
0363c                 | ' 
0363c                 | ' function isnotename(s as string) as ulong
0363c                 | _isnotename
0363c     07 4A 05 F6 | 	mov	COUNT_, #7
03640     A8 00 A0 FD | 	call	#pushregs_
03644                 | ' if left$(s,1)<>"#" then return 0
03644     09 1F 02 F6 | 	mov	local01, arg01
03648     01 14 06 F6 | 	mov	arg02, #1
0364c     EC AC B1 FD | 	call	#__system__Left_S
03650     FD 12 02 F6 | 	mov	arg01, result1
03654     5D 01 00 FF 
03658     5F 14 06 F6 | 	mov	arg02, ##@LR__4679
0365c     C0 8C B1 FD | 	call	#__system___string_cmp
03660     00 FA 0D F2 | 	cmp	result1, #0 wz
03664     00 FA 05 56 |  if_ne	mov	result1, #0
03668     30 03 90 5D |  if_ne	jmp	#LR__0213
0366c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     03 14 06 F6 | 	mov	arg02, #3
03674     01 16 06 F6 | 	mov	arg03, #1
03678     D8 AD B1 FD | 	call	#__system__Mid_S
0367c     FD 12 02 F6 | 	mov	arg01, result1
03680     5D 01 00 FF 
03684     61 14 06 F6 | 	mov	arg02, ##@LR__4680
03688     94 8C B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     18 00 90 5D |  if_ne	jmp	#LR__0190
03694     0F 13 02 F6 | 	mov	arg01, local01
03698     02 14 06 F6 | 	mov	arg02, #2
0369c     02 16 06 F6 | 	mov	arg03, #2
036a0     B0 AD B1 FD | 	call	#__system__Mid_S
036a4     FD 20 02 F6 | 	mov	local02, result1
036a8     14 00 90 FD | 	jmp	#LR__0191
036ac                 | LR__0190
036ac     0F 13 02 F6 | 	mov	arg01, local01
036b0     02 14 06 F6 | 	mov	arg02, #2
036b4     01 16 06 F6 | 	mov	arg03, #1
036b8     98 AD B1 FD | 	call	#__system__Mid_S
036bc     FD 20 02 F6 | 	mov	local02, result1
036c0                 | LR__0191
036c0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036c0     0F 13 02 F6 | 	mov	arg01, local01
036c4     09 23 02 F6 | 	mov	local03, arg01
036c8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036cc                 | LR__0192
036cc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036d0     01 22 06 51 |  if_ne	add	local03, #1
036d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036d8                 | LR__0193
036d8     09 23 82 F1 | 	sub	local03, arg01
036dc     11 15 02 F6 | 	mov	arg02, local03
036e0     01 14 86 F1 | 	sub	arg02, #1
036e4     0F 13 02 F6 | 	mov	arg01, local01
036e8     01 16 06 F6 | 	mov	arg03, #1
036ec     64 AD B1 FD | 	call	#__system__Mid_S
036f0     FD 12 02 F6 | 	mov	arg01, result1
036f4     5D 01 00 FF 
036f8     63 14 06 F6 | 	mov	arg02, ##@LR__4681
036fc     20 8C B1 FD | 	call	#__system___string_cmp
03700     00 FA 0D F2 | 	cmp	result1, #0 wz
03704     28 00 90 AD |  if_e	jmp	#LR__0194
03708     0F 13 02 F6 | 	mov	arg01, local01
0370c     01 14 06 F6 | 	mov	arg02, #1
03710     B0 AC B1 FD | 	call	#__system__Right_S
03714     FD 12 02 F6 | 	mov	arg01, result1
03718     40 BF B1 FD | 	call	#__system____builtin_atof
0371c     FD 12 02 F6 | 	mov	arg01, result1
03720     00 14 06 F6 | 	mov	arg02, #0
03724     14 BC B1 FD | 	call	#__system___float_tointeger
03728     FD 24 02 F6 | 	mov	local04, result1
0372c     34 00 90 FD | 	jmp	#LR__0195
03730                 | LR__0194
03730     0F 13 02 F6 | 	mov	arg01, local01
03734     01 14 06 F6 | 	mov	arg02, #1
03738     88 AC B1 FD | 	call	#__system__Right_S
0373c     FD 12 02 F6 | 	mov	arg01, result1
03740     18 BF B1 FD | 	call	#__system____builtin_atof
03744     FD 14 02 F6 | 	mov	arg02, result1
03748     00 C0 5F FF 
0374c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03750     20 B7 B1 FD | 	call	#__system___float_mul
03754     FD 12 02 F6 | 	mov	arg01, result1
03758     00 14 06 F6 | 	mov	arg02, #0
0375c     DC BB B1 FD | 	call	#__system___float_tointeger
03760     FD 24 02 F6 | 	mov	local04, result1
03764                 | LR__0195
03764                 | ' 
03764                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03764     00 24 0E F2 | 	cmp	local04, #0 wz
03768     24 00 90 5D |  if_ne	jmp	#LR__0196
0376c     0F 13 02 F6 | 	mov	arg01, local01
03770     01 14 06 F6 | 	mov	arg02, #1
03774     4C AC B1 FD | 	call	#__system__Right_S
03778     FD 12 02 F6 | 	mov	arg01, result1
0377c     5D 01 00 FF 
03780     65 14 06 F6 | 	mov	arg02, ##@LR__4682
03784     98 8B B1 FD | 	call	#__system___string_cmp
03788     00 FA 0D F2 | 	cmp	result1, #0 wz
0378c     04 24 06 56 |  if_ne	mov	local04, #4
03790                 | LR__0196
03790                 | ' 
03790                 | ' select case s1
03790     10 27 02 F6 | 	mov	local05, local02
03794     5D 01 00 FF 
03798     67 14 06 F6 | 	mov	arg02, ##@LR__4683
0379c     13 13 02 F6 | 	mov	arg01, local05
037a0     7C 8B B1 FD | 	call	#__system___string_cmp
037a4     00 FA 0D F2 | 	cmp	result1, #0 wz
037a8     24 01 90 AD |  if_e	jmp	#LR__0197
037ac     5D 01 00 FF 
037b0     69 14 06 F6 | 	mov	arg02, ##@LR__4684
037b4     13 13 02 F6 | 	mov	arg01, local05
037b8     64 8B B1 FD | 	call	#__system___string_cmp
037bc     00 FA 0D F2 | 	cmp	result1, #0 wz
037c0     18 01 90 AD |  if_e	jmp	#LR__0198
037c4     5D 01 00 FF 
037c8     6C 14 06 F6 | 	mov	arg02, ##@LR__4685
037cc     13 13 02 F6 | 	mov	arg01, local05
037d0     4C 8B B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     0C 01 90 AD |  if_e	jmp	#LR__0199
037dc     5D 01 00 FF 
037e0     6E 14 06 F6 | 	mov	arg02, ##@LR__4686
037e4     13 13 02 F6 | 	mov	arg01, local05
037e8     34 8B B1 FD | 	call	#__system___string_cmp
037ec     00 FA 0D F2 | 	cmp	result1, #0 wz
037f0     00 01 90 AD |  if_e	jmp	#LR__0200
037f4     5D 01 00 FF 
037f8     71 14 06 F6 | 	mov	arg02, ##@LR__4687
037fc     13 13 02 F6 | 	mov	arg01, local05
03800     1C 8B B1 FD | 	call	#__system___string_cmp
03804     00 FA 0D F2 | 	cmp	result1, #0 wz
03808     F4 00 90 AD |  if_e	jmp	#LR__0201
0380c     5D 01 00 FF 
03810     73 14 06 F6 | 	mov	arg02, ##@LR__4688
03814     13 13 02 F6 | 	mov	arg01, local05
03818     04 8B B1 FD | 	call	#__system___string_cmp
0381c     00 FA 0D F2 | 	cmp	result1, #0 wz
03820     E8 00 90 AD |  if_e	jmp	#LR__0202
03824     5D 01 00 FF 
03828     75 14 06 F6 | 	mov	arg02, ##@LR__4689
0382c     13 13 02 F6 | 	mov	arg01, local05
03830     EC 8A B1 FD | 	call	#__system___string_cmp
03834     00 FA 0D F2 | 	cmp	result1, #0 wz
03838     DC 00 90 AD |  if_e	jmp	#LR__0203
0383c     5D 01 00 FF 
03840     78 14 06 F6 | 	mov	arg02, ##@LR__4690
03844     13 13 02 F6 | 	mov	arg01, local05
03848     D4 8A B1 FD | 	call	#__system___string_cmp
0384c     00 FA 0D F2 | 	cmp	result1, #0 wz
03850     D0 00 90 AD |  if_e	jmp	#LR__0204
03854     5D 01 00 FF 
03858     7A 14 06 F6 | 	mov	arg02, ##@LR__4691
0385c     13 13 02 F6 | 	mov	arg01, local05
03860     BC 8A B1 FD | 	call	#__system___string_cmp
03864     00 FA 0D F2 | 	cmp	result1, #0 wz
03868     C4 00 90 AD |  if_e	jmp	#LR__0205
0386c     5D 01 00 FF 
03870     7D 14 06 F6 | 	mov	arg02, ##@LR__4692
03874     13 13 02 F6 | 	mov	arg01, local05
03878     A4 8A B1 FD | 	call	#__system___string_cmp
0387c     00 FA 0D F2 | 	cmp	result1, #0 wz
03880     B8 00 90 AD |  if_e	jmp	#LR__0206
03884     5D 01 00 FF 
03888     7F 14 06 F6 | 	mov	arg02, ##@LR__4693
0388c     13 13 02 F6 | 	mov	arg01, local05
03890     8C 8A B1 FD | 	call	#__system___string_cmp
03894     00 FA 0D F2 | 	cmp	result1, #0 wz
03898     AC 00 90 AD |  if_e	jmp	#LR__0207
0389c     5D 01 00 FF 
038a0     82 14 06 F6 | 	mov	arg02, ##@LR__4694
038a4     13 13 02 F6 | 	mov	arg01, local05
038a8     74 8A B1 FD | 	call	#__system___string_cmp
038ac     00 FA 0D F2 | 	cmp	result1, #0 wz
038b0     A0 00 90 AD |  if_e	jmp	#LR__0208
038b4     5D 01 00 FF 
038b8     84 14 06 F6 | 	mov	arg02, ##@LR__4695
038bc     13 13 02 F6 | 	mov	arg01, local05
038c0     5C 8A B1 FD | 	call	#__system___string_cmp
038c4     00 FA 0D F2 | 	cmp	result1, #0 wz
038c8     94 00 90 AD |  if_e	jmp	#LR__0209
038cc     9C 00 90 FD | 	jmp	#LR__0210
038d0                 | LR__0197
038d0     01 00 00 FF 
038d4     00 29 06 F6 | 	mov	local06, ##768
038d8     98 00 90 FD | 	jmp	#LR__0211
038dc                 | LR__0198
038dc     01 00 00 FF 
038e0     01 29 06 F6 | 	mov	local06, ##769
038e4     8C 00 90 FD | 	jmp	#LR__0211
038e8                 | LR__0199
038e8     01 00 00 FF 
038ec     02 29 06 F6 | 	mov	local06, ##770
038f0     80 00 90 FD | 	jmp	#LR__0211
038f4                 | LR__0200
038f4     01 00 00 FF 
038f8     03 29 06 F6 | 	mov	local06, ##771
038fc     74 00 90 FD | 	jmp	#LR__0211
03900                 | LR__0201
03900     01 00 00 FF 
03904     04 29 06 F6 | 	mov	local06, ##772
03908     68 00 90 FD | 	jmp	#LR__0211
0390c                 | LR__0202
0390c     01 00 00 FF 
03910     05 29 06 F6 | 	mov	local06, ##773
03914     5C 00 90 FD | 	jmp	#LR__0211
03918                 | LR__0203
03918     01 00 00 FF 
0391c     06 29 06 F6 | 	mov	local06, ##774
03920     50 00 90 FD | 	jmp	#LR__0211
03924                 | LR__0204
03924     01 00 00 FF 
03928     07 29 06 F6 | 	mov	local06, ##775
0392c     44 00 90 FD | 	jmp	#LR__0211
03930                 | LR__0205
03930     01 00 00 FF 
03934     08 29 06 F6 | 	mov	local06, ##776
03938     38 00 90 FD | 	jmp	#LR__0211
0393c                 | LR__0206
0393c     01 00 00 FF 
03940     09 29 06 F6 | 	mov	local06, ##777
03944     2C 00 90 FD | 	jmp	#LR__0211
03948                 | LR__0207
03948     01 00 00 FF 
0394c     0A 29 06 F6 | 	mov	local06, ##778
03950     20 00 90 FD | 	jmp	#LR__0211
03954                 | LR__0208
03954     01 00 00 FF 
03958     0B 29 06 F6 | 	mov	local06, ##779
0395c     14 00 90 FD | 	jmp	#LR__0211
03960                 | LR__0209
03960     01 00 00 FF 
03964     0B 29 06 F6 | 	mov	local06, ##779
03968     08 00 90 FD | 	jmp	#LR__0211
0396c                 | LR__0210
0396c     00 FA 05 F6 | 	mov	result1, #0
03970     28 00 90 FD | 	jmp	#LR__0213
03974                 | LR__0211
03974                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03974     FF FF 7F FF 
03978     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0397c     18 00 90 CD |  if_b	jmp	#LR__0212
03980     0A 24 56 F2 | 	cmps	local04, #10 wc
03984     12 2B 02 C6 |  if_b	mov	local07, local04
03988     01 2A 66 C0 |  if_b	shl	local07, #1
0398c     12 2B 02 C1 |  if_b	add	local07, local04
03990     02 2A 66 C0 |  if_b	shl	local07, #2
03994     15 29 02 C1 |  if_b	add	local06, local07
03998                 | LR__0212
03998                 | ' return token
03998     14 FB 01 F6 | 	mov	result1, local06
0399c                 | LR__0213
0399c     A7 F0 03 F6 | 	mov	ptra, fp
039a0     B2 00 A0 FD | 	call	#popregs_
039a4                 | _isnotename_ret
039a4     2D 00 64 FD | 	ret
039a8                 | 
039a8                 | ' 
039a8                 | ' 
039a8                 | ' function isseparator(s as string) as ubyte
039a8                 | _isseparator
039a8     01 4A 05 F6 | 	mov	COUNT_, #1
039ac     A8 00 A0 FD | 	call	#pushregs_
039b0                 | ' 
039b0                 | ' select case s
039b0     09 1F 02 F6 | 	mov	local01, arg01
039b4     5D 01 00 FF 
039b8     86 14 06 F6 | 	mov	arg02, ##@LR__4696
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     5C 89 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     54 01 90 AD |  if_e	jmp	#LR__0220
039cc     5D 01 00 FF 
039d0     88 14 06 F6 | 	mov	arg02, ##@LR__4697
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     44 89 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     44 01 90 AD |  if_e	jmp	#LR__0221
039e4     5D 01 00 FF 
039e8     8A 14 06 F6 | 	mov	arg02, ##@LR__4698
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     2C 89 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     34 01 90 AD |  if_e	jmp	#LR__0222
039fc     5D 01 00 FF 
03a00     8C 14 06 F6 | 	mov	arg02, ##@LR__4699
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     14 89 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     24 01 90 AD |  if_e	jmp	#LR__0223
03a14     5D 01 00 FF 
03a18     8E 14 06 F6 | 	mov	arg02, ##@LR__4700
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     FC 88 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     14 01 90 AD |  if_e	jmp	#LR__0224
03a2c     5D 01 00 FF 
03a30     90 14 06 F6 | 	mov	arg02, ##@LR__4701
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     E4 88 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     04 01 90 AD |  if_e	jmp	#LR__0225
03a44     5D 01 00 FF 
03a48     92 14 06 F6 | 	mov	arg02, ##@LR__4702
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     CC 88 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     F4 00 90 AD |  if_e	jmp	#LR__0226
03a5c     5D 01 00 FF 
03a60     94 14 06 F6 | 	mov	arg02, ##@LR__4703
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     B4 88 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     E4 00 90 AD |  if_e	jmp	#LR__0227
03a74     5D 01 00 FF 
03a78     96 14 06 F6 | 	mov	arg02, ##@LR__4704
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     9C 88 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     D4 00 90 AD |  if_e	jmp	#LR__0228
03a8c     5D 01 00 FF 
03a90     98 14 06 F6 | 	mov	arg02, ##@LR__4705
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     84 88 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     C4 00 90 AD |  if_e	jmp	#LR__0229
03aa4     5D 01 00 FF 
03aa8     9A 14 06 F6 | 	mov	arg02, ##@LR__4706
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     6C 88 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     B4 00 90 AD |  if_e	jmp	#LR__0230
03abc     5D 01 00 FF 
03ac0     9C 14 06 F6 | 	mov	arg02, ##@LR__4707
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     54 88 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ad4     5D 01 00 FF 
03ad8     9E 14 06 F6 | 	mov	arg02, ##@LR__4708
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     3C 88 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     94 00 90 AD |  if_e	jmp	#LR__0232
03aec     5D 01 00 FF 
03af0     A0 14 06 F6 | 	mov	arg02, ##@LR__4709
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     24 88 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     84 00 90 AD |  if_e	jmp	#LR__0233
03b04     5D 01 00 FF 
03b08     A2 14 06 F6 | 	mov	arg02, ##@LR__4710
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     0C 88 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     74 00 90 AD |  if_e	jmp	#LR__0234
03b1c     78 00 90 FD | 	jmp	#LR__0235
03b20                 | LR__0220
03b20     01 FA 05 F6 | 	mov	result1, #1
03b24     74 00 90 FD | 	jmp	#LR__0236
03b28                 | LR__0221
03b28     02 FA 05 F6 | 	mov	result1, #2
03b2c     6C 00 90 FD | 	jmp	#LR__0236
03b30                 | LR__0222
03b30     1B FA 05 F6 | 	mov	result1, #27
03b34     64 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0223
03b38     11 FA 05 F6 | 	mov	result1, #17
03b3c     5C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0224
03b40     05 FA 05 F6 | 	mov	result1, #5
03b44     54 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0225
03b48     06 FA 05 F6 | 	mov	result1, #6
03b4c     4C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0226
03b50     12 FA 05 F6 | 	mov	result1, #18
03b54     44 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0227
03b58     13 FA 05 F6 | 	mov	result1, #19
03b5c     3C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0228
03b60     0C FA 05 F6 | 	mov	result1, #12
03b64     34 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0229
03b68     14 FA 05 F6 | 	mov	result1, #20
03b6c     2C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0230
03b70     15 FA 05 F6 | 	mov	result1, #21
03b74     24 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0231
03b78     16 FA 05 F6 | 	mov	result1, #22
03b7c     1C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0232
03b80     FF FB 05 F6 | 	mov	result1, #511
03b84     14 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0233
03b88     0F FA 05 F6 | 	mov	result1, #15
03b8c     0C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0234
03b90     10 FA 05 F6 | 	mov	result1, #16
03b94     04 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0235
03b98     00 FA 05 F6 | 	mov	result1, #0
03b9c                 | LR__0236
03b9c     A7 F0 03 F6 | 	mov	ptra, fp
03ba0     B2 00 A0 FD | 	call	#popregs_
03ba4                 | _isseparator_ret
03ba4     2D 00 64 FD | 	ret
03ba8                 | 
03ba8                 | ' 
03ba8                 | ' 
03ba8                 | ' function iscommand(s as string) as ubyte
03ba8                 | _iscommand
03ba8     01 4A 05 F6 | 	mov	COUNT_, #1
03bac     A8 00 A0 FD | 	call	#pushregs_
03bb0                 | ' 
03bb0                 | ' select case s
03bb0     09 1F 02 F6 | 	mov	local01, arg01
03bb4     5D 01 00 FF 
03bb8     A6 14 06 F6 | 	mov	arg02, ##@LR__4712
03bbc     0F 13 02 F6 | 	mov	arg01, local01
03bc0     5C 87 B1 FD | 	call	#__system___string_cmp
03bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc8     74 08 90 AD |  if_e	jmp	#LR__0240
03bcc     5D 01 00 FF 
03bd0     AB 14 06 F6 | 	mov	arg02, ##@LR__4713
03bd4     0F 13 02 F6 | 	mov	arg01, local01
03bd8     44 87 B1 FD | 	call	#__system___string_cmp
03bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03be0     64 08 90 AD |  if_e	jmp	#LR__0241
03be4     5D 01 00 FF 
03be8     AE 14 06 F6 | 	mov	arg02, ##@LR__4714
03bec     0F 13 02 F6 | 	mov	arg01, local01
03bf0     2C 87 B1 FD | 	call	#__system___string_cmp
03bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf8     54 08 90 AD |  if_e	jmp	#LR__0242
03bfc     5D 01 00 FF 
03c00     B2 14 06 F6 | 	mov	arg02, ##@LR__4715
03c04     0F 13 02 F6 | 	mov	arg01, local01
03c08     14 87 B1 FD | 	call	#__system___string_cmp
03c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c10     44 08 90 AD |  if_e	jmp	#LR__0243
03c14     5D 01 00 FF 
03c18     B7 14 06 F6 | 	mov	arg02, ##@LR__4716
03c1c     0F 13 02 F6 | 	mov	arg01, local01
03c20     FC 86 B1 FD | 	call	#__system___string_cmp
03c24     00 FA 0D F2 | 	cmp	result1, #0 wz
03c28     34 08 90 AD |  if_e	jmp	#LR__0244
03c2c     5D 01 00 FF 
03c30     BB 14 06 F6 | 	mov	arg02, ##@LR__4717
03c34     0F 13 02 F6 | 	mov	arg01, local01
03c38     E4 86 B1 FD | 	call	#__system___string_cmp
03c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c40     24 08 90 AD |  if_e	jmp	#LR__0245
03c44     5D 01 00 FF 
03c48     C2 14 06 F6 | 	mov	arg02, ##@LR__4718
03c4c     0F 13 02 F6 | 	mov	arg01, local01
03c50     CC 86 B1 FD | 	call	#__system___string_cmp
03c54     00 FA 0D F2 | 	cmp	result1, #0 wz
03c58     14 08 90 AD |  if_e	jmp	#LR__0246
03c5c     5D 01 00 FF 
03c60     C6 14 06 F6 | 	mov	arg02, ##@LR__4719
03c64     0F 13 02 F6 | 	mov	arg01, local01
03c68     B4 86 B1 FD | 	call	#__system___string_cmp
03c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c70     04 08 90 AD |  if_e	jmp	#LR__0247
03c74     5D 01 00 FF 
03c78     CC 14 06 F6 | 	mov	arg02, ##@LR__4720
03c7c     0F 13 02 F6 | 	mov	arg01, local01
03c80     9C 86 B1 FD | 	call	#__system___string_cmp
03c84     00 FA 0D F2 | 	cmp	result1, #0 wz
03c88     F4 07 90 AD |  if_e	jmp	#LR__0248
03c8c     5D 01 00 FF 
03c90     D0 14 06 F6 | 	mov	arg02, ##@LR__4721
03c94     0F 13 02 F6 | 	mov	arg01, local01
03c98     84 86 B1 FD | 	call	#__system___string_cmp
03c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03ca0     E4 07 90 AD |  if_e	jmp	#LR__0249
03ca4     5D 01 00 FF 
03ca8     D6 14 06 F6 | 	mov	arg02, ##@LR__4722
03cac     0F 13 02 F6 | 	mov	arg01, local01
03cb0     6C 86 B1 FD | 	call	#__system___string_cmp
03cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb8     D4 07 90 AD |  if_e	jmp	#LR__0250
03cbc     5D 01 00 FF 
03cc0     D9 14 06 F6 | 	mov	arg02, ##@LR__4723
03cc4     0F 13 02 F6 | 	mov	arg01, local01
03cc8     54 86 B1 FD | 	call	#__system___string_cmp
03ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
03cd0     C4 07 90 AD |  if_e	jmp	#LR__0251
03cd4     5D 01 00 FF 
03cd8     DF 14 06 F6 | 	mov	arg02, ##@LR__4724
03cdc     0F 13 02 F6 | 	mov	arg01, local01
03ce0     3C 86 B1 FD | 	call	#__system___string_cmp
03ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce8     B4 07 90 AD |  if_e	jmp	#LR__0252
03cec     5D 01 00 FF 
03cf0     E3 14 06 F6 | 	mov	arg02, ##@LR__4725
03cf4     0F 13 02 F6 | 	mov	arg01, local01
03cf8     24 86 B1 FD | 	call	#__system___string_cmp
03cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03d00     A4 07 90 AD |  if_e	jmp	#LR__0253
03d04     5D 01 00 FF 
03d08     EA 14 06 F6 | 	mov	arg02, ##@LR__4726
03d0c     0F 13 02 F6 | 	mov	arg01, local01
03d10     0C 86 B1 FD | 	call	#__system___string_cmp
03d14     00 FA 0D F2 | 	cmp	result1, #0 wz
03d18     94 07 90 AD |  if_e	jmp	#LR__0254
03d1c     5D 01 00 FF 
03d20     F1 14 06 F6 | 	mov	arg02, ##@LR__4727
03d24     0F 13 02 F6 | 	mov	arg01, local01
03d28     F4 85 B1 FD | 	call	#__system___string_cmp
03d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d30     84 07 90 AD |  if_e	jmp	#LR__0255
03d34     5D 01 00 FF 
03d38     F8 14 06 F6 | 	mov	arg02, ##@LR__4728
03d3c     0F 13 02 F6 | 	mov	arg01, local01
03d40     DC 85 B1 FD | 	call	#__system___string_cmp
03d44     00 FA 0D F2 | 	cmp	result1, #0 wz
03d48     74 07 90 AD |  if_e	jmp	#LR__0256
03d4c     5D 01 00 FF 
03d50     02 15 06 F6 | 	mov	arg02, ##@LR__4729
03d54     0F 13 02 F6 | 	mov	arg01, local01
03d58     C4 85 B1 FD | 	call	#__system___string_cmp
03d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d60     64 07 90 AD |  if_e	jmp	#LR__0257
03d64     5D 01 00 FF 
03d68     06 15 06 F6 | 	mov	arg02, ##@LR__4730
03d6c     0F 13 02 F6 | 	mov	arg01, local01
03d70     AC 85 B1 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     54 07 90 AD |  if_e	jmp	#LR__0258
03d7c     5D 01 00 FF 
03d80     0A 15 06 F6 | 	mov	arg02, ##@LR__4731
03d84     0F 13 02 F6 | 	mov	arg01, local01
03d88     94 85 B1 FD | 	call	#__system___string_cmp
03d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d90     44 07 90 AD |  if_e	jmp	#LR__0259
03d94     5D 01 00 FF 
03d98     0E 15 06 F6 | 	mov	arg02, ##@LR__4732
03d9c     0F 13 02 F6 | 	mov	arg01, local01
03da0     7C 85 B1 FD | 	call	#__system___string_cmp
03da4     00 FA 0D F2 | 	cmp	result1, #0 wz
03da8     34 07 90 AD |  if_e	jmp	#LR__0260
03dac     5D 01 00 FF 
03db0     12 15 06 F6 | 	mov	arg02, ##@LR__4733
03db4     0F 13 02 F6 | 	mov	arg01, local01
03db8     64 85 B1 FD | 	call	#__system___string_cmp
03dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc0     24 07 90 AD |  if_e	jmp	#LR__0261
03dc4     5D 01 00 FF 
03dc8     18 15 06 F6 | 	mov	arg02, ##@LR__4734
03dcc     0F 13 02 F6 | 	mov	arg01, local01
03dd0     4C 85 B1 FD | 	call	#__system___string_cmp
03dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd8     14 07 90 AD |  if_e	jmp	#LR__0262
03ddc     5D 01 00 FF 
03de0     1D 15 06 F6 | 	mov	arg02, ##@LR__4735
03de4     0F 13 02 F6 | 	mov	arg01, local01
03de8     34 85 B1 FD | 	call	#__system___string_cmp
03dec     00 FA 0D F2 | 	cmp	result1, #0 wz
03df0     04 07 90 AD |  if_e	jmp	#LR__0263
03df4     5D 01 00 FF 
03df8     21 15 06 F6 | 	mov	arg02, ##@LR__4736
03dfc     0F 13 02 F6 | 	mov	arg01, local01
03e00     1C 85 B1 FD | 	call	#__system___string_cmp
03e04     00 FA 0D F2 | 	cmp	result1, #0 wz
03e08     F4 06 90 AD |  if_e	jmp	#LR__0264
03e0c     5D 01 00 FF 
03e10     26 15 06 F6 | 	mov	arg02, ##@LR__4737
03e14     0F 13 02 F6 | 	mov	arg01, local01
03e18     04 85 B1 FD | 	call	#__system___string_cmp
03e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e20     E4 06 90 AD |  if_e	jmp	#LR__0265
03e24     5D 01 00 FF 
03e28     2E 15 06 F6 | 	mov	arg02, ##@LR__4738
03e2c     0F 13 02 F6 | 	mov	arg01, local01
03e30     EC 84 B1 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     D4 06 90 AD |  if_e	jmp	#LR__0266
03e3c     5D 01 00 FF 
03e40     32 15 06 F6 | 	mov	arg02, ##@LR__4739
03e44     0F 13 02 F6 | 	mov	arg01, local01
03e48     D4 84 B1 FD | 	call	#__system___string_cmp
03e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e50     C4 06 90 AD |  if_e	jmp	#LR__0267
03e54     5D 01 00 FF 
03e58     37 15 06 F6 | 	mov	arg02, ##@LR__4740
03e5c     0F 13 02 F6 | 	mov	arg01, local01
03e60     BC 84 B1 FD | 	call	#__system___string_cmp
03e64     00 FA 0D F2 | 	cmp	result1, #0 wz
03e68     B4 06 90 AD |  if_e	jmp	#LR__0268
03e6c     5D 01 00 FF 
03e70     3B 15 06 F6 | 	mov	arg02, ##@LR__4741
03e74     0F 13 02 F6 | 	mov	arg01, local01
03e78     A4 84 B1 FD | 	call	#__system___string_cmp
03e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e80     A4 06 90 AD |  if_e	jmp	#LR__0269
03e84     5D 01 00 FF 
03e88     40 15 06 F6 | 	mov	arg02, ##@LR__4742
03e8c     0F 13 02 F6 | 	mov	arg01, local01
03e90     8C 84 B1 FD | 	call	#__system___string_cmp
03e94     00 FA 0D F2 | 	cmp	result1, #0 wz
03e98     94 06 90 AD |  if_e	jmp	#LR__0270
03e9c     5D 01 00 FF 
03ea0     44 15 06 F6 | 	mov	arg02, ##@LR__4743
03ea4     0F 13 02 F6 | 	mov	arg01, local01
03ea8     74 84 B1 FD | 	call	#__system___string_cmp
03eac     00 FA 0D F2 | 	cmp	result1, #0 wz
03eb0     84 06 90 AD |  if_e	jmp	#LR__0271
03eb4     5D 01 00 FF 
03eb8     47 15 06 F6 | 	mov	arg02, ##@LR__4744
03ebc     0F 13 02 F6 | 	mov	arg01, local01
03ec0     5C 84 B1 FD | 	call	#__system___string_cmp
03ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec8     74 06 90 AD |  if_e	jmp	#LR__0272
03ecc     5D 01 00 FF 
03ed0     4D 15 06 F6 | 	mov	arg02, ##@LR__4745
03ed4     0F 13 02 F6 | 	mov	arg01, local01
03ed8     44 84 B1 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     64 06 90 AD |  if_e	jmp	#LR__0273
03ee4     5D 01 00 FF 
03ee8     51 15 06 F6 | 	mov	arg02, ##@LR__4746
03eec     0F 13 02 F6 | 	mov	arg01, local01
03ef0     2C 84 B1 FD | 	call	#__system___string_cmp
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     54 06 90 AD |  if_e	jmp	#LR__0274
03efc     5D 01 00 FF 
03f00     56 15 06 F6 | 	mov	arg02, ##@LR__4747
03f04     0F 13 02 F6 | 	mov	arg01, local01
03f08     14 84 B1 FD | 	call	#__system___string_cmp
03f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f10     44 06 90 AD |  if_e	jmp	#LR__0275
03f14     5D 01 00 FF 
03f18     59 15 06 F6 | 	mov	arg02, ##@LR__4748
03f1c     0F 13 02 F6 | 	mov	arg01, local01
03f20     FC 83 B1 FD | 	call	#__system___string_cmp
03f24     00 FA 0D F2 | 	cmp	result1, #0 wz
03f28     34 06 90 AD |  if_e	jmp	#LR__0276
03f2c     5D 01 00 FF 
03f30     5C 15 06 F6 | 	mov	arg02, ##@LR__4749
03f34     0F 13 02 F6 | 	mov	arg01, local01
03f38     E4 83 B1 FD | 	call	#__system___string_cmp
03f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f40     24 06 90 AD |  if_e	jmp	#LR__0277
03f44     5D 01 00 FF 
03f48     60 15 06 F6 | 	mov	arg02, ##@LR__4750
03f4c     0F 13 02 F6 | 	mov	arg01, local01
03f50     CC 83 B1 FD | 	call	#__system___string_cmp
03f54     00 FA 0D F2 | 	cmp	result1, #0 wz
03f58     14 06 90 AD |  if_e	jmp	#LR__0278
03f5c     5D 01 00 FF 
03f60     63 15 06 F6 | 	mov	arg02, ##@LR__4751
03f64     0F 13 02 F6 | 	mov	arg01, local01
03f68     B4 83 B1 FD | 	call	#__system___string_cmp
03f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f70     04 06 90 AD |  if_e	jmp	#LR__0279
03f74     5D 01 00 FF 
03f78     67 15 06 F6 | 	mov	arg02, ##@LR__4752
03f7c     0F 13 02 F6 | 	mov	arg01, local01
03f80     9C 83 B1 FD | 	call	#__system___string_cmp
03f84     00 FA 0D F2 | 	cmp	result1, #0 wz
03f88     F4 05 90 AD |  if_e	jmp	#LR__0280
03f8c     5D 01 00 FF 
03f90     6C 15 06 F6 | 	mov	arg02, ##@LR__4753
03f94     0F 13 02 F6 | 	mov	arg01, local01
03f98     84 83 B1 FD | 	call	#__system___string_cmp
03f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03fa0     E4 05 90 AD |  if_e	jmp	#LR__0281
03fa4     5D 01 00 FF 
03fa8     6F 15 06 F6 | 	mov	arg02, ##@LR__4754
03fac     0F 13 02 F6 | 	mov	arg01, local01
03fb0     6C 83 B1 FD | 	call	#__system___string_cmp
03fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb8     D4 05 90 AD |  if_e	jmp	#LR__0282
03fbc     5D 01 00 FF 
03fc0     74 15 06 F6 | 	mov	arg02, ##@LR__4755
03fc4     0F 13 02 F6 | 	mov	arg01, local01
03fc8     54 83 B1 FD | 	call	#__system___string_cmp
03fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fd0     C4 05 90 AD |  if_e	jmp	#LR__0283
03fd4     5D 01 00 FF 
03fd8     78 15 06 F6 | 	mov	arg02, ##@LR__4756
03fdc     0F 13 02 F6 | 	mov	arg01, local01
03fe0     3C 83 B1 FD | 	call	#__system___string_cmp
03fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe8     B4 05 90 AD |  if_e	jmp	#LR__0284
03fec     5D 01 00 FF 
03ff0     7E 15 06 F6 | 	mov	arg02, ##@LR__4757
03ff4     0F 13 02 F6 | 	mov	arg01, local01
03ff8     24 83 B1 FD | 	call	#__system___string_cmp
03ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
04000     A4 05 90 AD |  if_e	jmp	#LR__0285
04004     5D 01 00 FF 
04008     83 15 06 F6 | 	mov	arg02, ##@LR__4758
0400c     0F 13 02 F6 | 	mov	arg01, local01
04010     0C 83 B1 FD | 	call	#__system___string_cmp
04014     00 FA 0D F2 | 	cmp	result1, #0 wz
04018     94 05 90 AD |  if_e	jmp	#LR__0286
0401c     5D 01 00 FF 
04020     86 15 06 F6 | 	mov	arg02, ##@LR__4759
04024     0F 13 02 F6 | 	mov	arg01, local01
04028     F4 82 B1 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     84 05 90 AD |  if_e	jmp	#LR__0287
04034     5D 01 00 FF 
04038     8C 15 06 F6 | 	mov	arg02, ##@LR__4760
0403c     0F 13 02 F6 | 	mov	arg01, local01
04040     DC 82 B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     74 05 90 AD |  if_e	jmp	#LR__0288
0404c     5D 01 00 FF 
04050     90 15 06 F6 | 	mov	arg02, ##@LR__4761
04054     0F 13 02 F6 | 	mov	arg01, local01
04058     C4 82 B1 FD | 	call	#__system___string_cmp
0405c     00 FA 0D F2 | 	cmp	result1, #0 wz
04060     64 05 90 AD |  if_e	jmp	#LR__0289
04064     5D 01 00 FF 
04068     95 15 06 F6 | 	mov	arg02, ##@LR__4762
0406c     0F 13 02 F6 | 	mov	arg01, local01
04070     AC 82 B1 FD | 	call	#__system___string_cmp
04074     00 FA 0D F2 | 	cmp	result1, #0 wz
04078     54 05 90 AD |  if_e	jmp	#LR__0290
0407c     5D 01 00 FF 
04080     98 15 06 F6 | 	mov	arg02, ##@LR__4763
04084     0F 13 02 F6 | 	mov	arg01, local01
04088     94 82 B1 FD | 	call	#__system___string_cmp
0408c     00 FA 0D F2 | 	cmp	result1, #0 wz
04090     44 05 90 AD |  if_e	jmp	#LR__0291
04094     5D 01 00 FF 
04098     9E 15 06 F6 | 	mov	arg02, ##@LR__4764
0409c     0F 13 02 F6 | 	mov	arg01, local01
040a0     7C 82 B1 FD | 	call	#__system___string_cmp
040a4     00 FA 0D F2 | 	cmp	result1, #0 wz
040a8     34 05 90 AD |  if_e	jmp	#LR__0292
040ac     5D 01 00 FF 
040b0     A1 15 06 F6 | 	mov	arg02, ##@LR__4765
040b4     0F 13 02 F6 | 	mov	arg01, local01
040b8     64 82 B1 FD | 	call	#__system___string_cmp
040bc     00 FA 0D F2 | 	cmp	result1, #0 wz
040c0     24 05 90 AD |  if_e	jmp	#LR__0293
040c4     5D 01 00 FF 
040c8     AA 15 06 F6 | 	mov	arg02, ##@LR__4766
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     4C 82 B1 FD | 	call	#__system___string_cmp
040d4     00 FA 0D F2 | 	cmp	result1, #0 wz
040d8     14 05 90 AD |  if_e	jmp	#LR__0294
040dc     5D 01 00 FF 
040e0     B0 15 06 F6 | 	mov	arg02, ##@LR__4767
040e4     0F 13 02 F6 | 	mov	arg01, local01
040e8     34 82 B1 FD | 	call	#__system___string_cmp
040ec     00 FA 0D F2 | 	cmp	result1, #0 wz
040f0     04 05 90 AD |  if_e	jmp	#LR__0295
040f4     5D 01 00 FF 
040f8     B6 15 06 F6 | 	mov	arg02, ##@LR__4768
040fc     0F 13 02 F6 | 	mov	arg01, local01
04100     1C 82 B1 FD | 	call	#__system___string_cmp
04104     00 FA 0D F2 | 	cmp	result1, #0 wz
04108     F4 04 90 AD |  if_e	jmp	#LR__0296
0410c     5D 01 00 FF 
04110     BF 15 06 F6 | 	mov	arg02, ##@LR__4769
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     04 82 B1 FD | 	call	#__system___string_cmp
0411c     00 FA 0D F2 | 	cmp	result1, #0 wz
04120     E4 04 90 AD |  if_e	jmp	#LR__0297
04124     5D 01 00 FF 
04128     C9 15 06 F6 | 	mov	arg02, ##@LR__4770
0412c     0F 13 02 F6 | 	mov	arg01, local01
04130     EC 81 B1 FD | 	call	#__system___string_cmp
04134     00 FA 0D F2 | 	cmp	result1, #0 wz
04138     D4 04 90 AD |  if_e	jmp	#LR__0298
0413c     5D 01 00 FF 
04140     D2 15 06 F6 | 	mov	arg02, ##@LR__4771
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     D4 81 B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     C4 04 90 AD |  if_e	jmp	#LR__0299
04154     5D 01 00 FF 
04158     D7 15 06 F6 | 	mov	arg02, ##@LR__4772
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     BC 81 B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     B4 04 90 AD |  if_e	jmp	#LR__0300
0416c     5D 01 00 FF 
04170     DC 15 06 F6 | 	mov	arg02, ##@LR__4773
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     A4 81 B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     A4 04 90 AD |  if_e	jmp	#LR__0301
04184     5D 01 00 FF 
04188     E0 15 06 F6 | 	mov	arg02, ##@LR__4774
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     8C 81 B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     94 04 90 AD |  if_e	jmp	#LR__0302
0419c     5D 01 00 FF 
041a0     E5 15 06 F6 | 	mov	arg02, ##@LR__4775
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     74 81 B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     84 04 90 AD |  if_e	jmp	#LR__0303
041b4     5D 01 00 FF 
041b8     EE 15 06 F6 | 	mov	arg02, ##@LR__4776
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     5C 81 B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     74 04 90 AD |  if_e	jmp	#LR__0304
041cc     5D 01 00 FF 
041d0     F3 15 06 F6 | 	mov	arg02, ##@LR__4777
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     44 81 B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     64 04 90 AD |  if_e	jmp	#LR__0305
041e4     5D 01 00 FF 
041e8     F9 15 06 F6 | 	mov	arg02, ##@LR__4778
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     2C 81 B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     54 04 90 AD |  if_e	jmp	#LR__0306
041fc     5D 01 00 FF 
04200     FB 15 06 F6 | 	mov	arg02, ##@LR__4779
04204     0F 13 02 F6 | 	mov	arg01, local01
04208     14 81 B1 FD | 	call	#__system___string_cmp
0420c     00 FA 0D F2 | 	cmp	result1, #0 wz
04210     44 04 90 AD |  if_e	jmp	#LR__0307
04214     5D 01 00 FF 
04218     FF 15 06 F6 | 	mov	arg02, ##@LR__4780
0421c     0F 13 02 F6 | 	mov	arg01, local01
04220     FC 80 B1 FD | 	call	#__system___string_cmp
04224     00 FA 0D F2 | 	cmp	result1, #0 wz
04228     34 04 90 AD |  if_e	jmp	#LR__0308
0422c     5E 01 00 FF 
04230     07 14 06 F6 | 	mov	arg02, ##@LR__4781
04234     0F 13 02 F6 | 	mov	arg01, local01
04238     E4 80 B1 FD | 	call	#__system___string_cmp
0423c     00 FA 0D F2 | 	cmp	result1, #0 wz
04240     24 04 90 AD |  if_e	jmp	#LR__0309
04244     5E 01 00 FF 
04248     0B 14 06 F6 | 	mov	arg02, ##@LR__4782
0424c     0F 13 02 F6 | 	mov	arg01, local01
04250     CC 80 B1 FD | 	call	#__system___string_cmp
04254     00 FA 0D F2 | 	cmp	result1, #0 wz
04258     14 04 90 AD |  if_e	jmp	#LR__0310
0425c     5E 01 00 FF 
04260     10 14 06 F6 | 	mov	arg02, ##@LR__4783
04264     0F 13 02 F6 | 	mov	arg01, local01
04268     B4 80 B1 FD | 	call	#__system___string_cmp
0426c     00 FA 0D F2 | 	cmp	result1, #0 wz
04270     04 04 90 AD |  if_e	jmp	#LR__0311
04274     5E 01 00 FF 
04278     13 14 06 F6 | 	mov	arg02, ##@LR__4784
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     9C 80 B1 FD | 	call	#__system___string_cmp
04284     00 FA 0D F2 | 	cmp	result1, #0 wz
04288     F4 03 90 AD |  if_e	jmp	#LR__0312
0428c     5E 01 00 FF 
04290     1C 14 06 F6 | 	mov	arg02, ##@LR__4785
04294     0F 13 02 F6 | 	mov	arg01, local01
04298     84 80 B1 FD | 	call	#__system___string_cmp
0429c     00 FA 0D F2 | 	cmp	result1, #0 wz
042a0     E4 03 90 AD |  if_e	jmp	#LR__0313
042a4     5E 01 00 FF 
042a8     23 14 06 F6 | 	mov	arg02, ##@LR__4786
042ac     0F 13 02 F6 | 	mov	arg01, local01
042b0     6C 80 B1 FD | 	call	#__system___string_cmp
042b4     00 FA 0D F2 | 	cmp	result1, #0 wz
042b8     D4 03 90 AD |  if_e	jmp	#LR__0314
042bc     5E 01 00 FF 
042c0     2A 14 06 F6 | 	mov	arg02, ##@LR__4787
042c4     0F 13 02 F6 | 	mov	arg01, local01
042c8     54 80 B1 FD | 	call	#__system___string_cmp
042cc     00 FA 0D F2 | 	cmp	result1, #0 wz
042d0     C4 03 90 AD |  if_e	jmp	#LR__0315
042d4     5E 01 00 FF 
042d8     31 14 06 F6 | 	mov	arg02, ##@LR__4788
042dc     0F 13 02 F6 | 	mov	arg01, local01
042e0     3C 80 B1 FD | 	call	#__system___string_cmp
042e4     00 FA 0D F2 | 	cmp	result1, #0 wz
042e8     B4 03 90 AD |  if_e	jmp	#LR__0316
042ec     5E 01 00 FF 
042f0     3C 14 06 F6 | 	mov	arg02, ##@LR__4789
042f4     0F 13 02 F6 | 	mov	arg01, local01
042f8     24 80 B1 FD | 	call	#__system___string_cmp
042fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04300     A4 03 90 AD |  if_e	jmp	#LR__0317
04304     5E 01 00 FF 
04308     43 14 06 F6 | 	mov	arg02, ##@LR__4790
0430c     0F 13 02 F6 | 	mov	arg01, local01
04310     0C 80 B1 FD | 	call	#__system___string_cmp
04314     00 FA 0D F2 | 	cmp	result1, #0 wz
04318     94 03 90 AD |  if_e	jmp	#LR__0318
0431c     5E 01 00 FF 
04320     4B 14 06 F6 | 	mov	arg02, ##@LR__4791
04324     0F 13 02 F6 | 	mov	arg01, local01
04328     F4 7F B1 FD | 	call	#__system___string_cmp
0432c     00 FA 0D F2 | 	cmp	result1, #0 wz
04330     84 03 90 AD |  if_e	jmp	#LR__0319
04334     5E 01 00 FF 
04338     51 14 06 F6 | 	mov	arg02, ##@LR__4792
0433c     0F 13 02 F6 | 	mov	arg01, local01
04340     DC 7F B1 FD | 	call	#__system___string_cmp
04344     00 FA 0D F2 | 	cmp	result1, #0 wz
04348     74 03 90 AD |  if_e	jmp	#LR__0320
0434c     5E 01 00 FF 
04350     55 14 06 F6 | 	mov	arg02, ##@LR__4793
04354     0F 13 02 F6 | 	mov	arg01, local01
04358     C4 7F B1 FD | 	call	#__system___string_cmp
0435c     00 FA 0D F2 | 	cmp	result1, #0 wz
04360     64 03 90 AD |  if_e	jmp	#LR__0321
04364     5E 01 00 FF 
04368     5C 14 06 F6 | 	mov	arg02, ##@LR__4794
0436c     0F 13 02 F6 | 	mov	arg01, local01
04370     AC 7F B1 FD | 	call	#__system___string_cmp
04374     00 FA 0D F2 | 	cmp	result1, #0 wz
04378     54 03 90 AD |  if_e	jmp	#LR__0322
0437c     5E 01 00 FF 
04380     60 14 06 F6 | 	mov	arg02, ##@LR__4795
04384     0F 13 02 F6 | 	mov	arg01, local01
04388     94 7F B1 FD | 	call	#__system___string_cmp
0438c     00 FA 0D F2 | 	cmp	result1, #0 wz
04390     44 03 90 AD |  if_e	jmp	#LR__0323
04394     5E 01 00 FF 
04398     65 14 06 F6 | 	mov	arg02, ##@LR__4796
0439c     0F 13 02 F6 | 	mov	arg01, local01
043a0     7C 7F B1 FD | 	call	#__system___string_cmp
043a4     00 FA 0D F2 | 	cmp	result1, #0 wz
043a8     34 03 90 AD |  if_e	jmp	#LR__0324
043ac     5E 01 00 FF 
043b0     6C 14 06 F6 | 	mov	arg02, ##@LR__4797
043b4     0F 13 02 F6 | 	mov	arg01, local01
043b8     64 7F B1 FD | 	call	#__system___string_cmp
043bc     00 FA 0D F2 | 	cmp	result1, #0 wz
043c0     24 03 90 AD |  if_e	jmp	#LR__0325
043c4     5E 01 00 FF 
043c8     76 14 06 F6 | 	mov	arg02, ##@LR__4798
043cc     0F 13 02 F6 | 	mov	arg01, local01
043d0     4C 7F B1 FD | 	call	#__system___string_cmp
043d4     00 FA 0D F2 | 	cmp	result1, #0 wz
043d8     14 03 90 AD |  if_e	jmp	#LR__0326
043dc     5E 01 00 FF 
043e0     7A 14 06 F6 | 	mov	arg02, ##@LR__4799
043e4     0F 13 02 F6 | 	mov	arg01, local01
043e8     34 7F B1 FD | 	call	#__system___string_cmp
043ec     00 FA 0D F2 | 	cmp	result1, #0 wz
043f0     04 03 90 AD |  if_e	jmp	#LR__0327
043f4     5E 01 00 FF 
043f8     82 14 06 F6 | 	mov	arg02, ##@LR__4800
043fc     0F 13 02 F6 | 	mov	arg01, local01
04400     1C 7F B1 FD | 	call	#__system___string_cmp
04404     00 FA 0D F2 | 	cmp	result1, #0 wz
04408     F4 02 90 AD |  if_e	jmp	#LR__0328
0440c     5E 01 00 FF 
04410     86 14 06 F6 | 	mov	arg02, ##@LR__4801
04414     0F 13 02 F6 | 	mov	arg01, local01
04418     04 7F B1 FD | 	call	#__system___string_cmp
0441c     00 FA 0D F2 | 	cmp	result1, #0 wz
04420     E4 02 90 AD |  if_e	jmp	#LR__0329
04424     5E 01 00 FF 
04428     8C 14 06 F6 | 	mov	arg02, ##@LR__4802
0442c     0F 13 02 F6 | 	mov	arg01, local01
04430     EC 7E B1 FD | 	call	#__system___string_cmp
04434     00 FA 0D F2 | 	cmp	result1, #0 wz
04438     D4 02 90 AD |  if_e	jmp	#LR__0330
0443c     D8 02 90 FD | 	jmp	#LR__0331
04440                 | LR__0240
04440     5C FA 05 F6 | 	mov	result1, #92
04444     D4 02 90 FD | 	jmp	#LR__0332
04448                 | LR__0241
04448     5C FA 05 F6 | 	mov	result1, #92
0444c     CC 02 90 FD | 	jmp	#LR__0332
04450                 | LR__0242
04450     47 FA 05 F6 | 	mov	result1, #71
04454     C4 02 90 FD | 	jmp	#LR__0332
04458                 | LR__0243
04458     59 FA 05 F6 | 	mov	result1, #89
0445c     BC 02 90 FD | 	jmp	#LR__0332
04460                 | LR__0244
04460     59 FA 05 F6 | 	mov	result1, #89
04464     B4 02 90 FD | 	jmp	#LR__0332
04468                 | LR__0245
04468     45 FA 05 F6 | 	mov	result1, #69
0446c     AC 02 90 FD | 	jmp	#LR__0332
04470                 | LR__0246
04470     45 FA 05 F6 | 	mov	result1, #69
04474     A4 02 90 FD | 	jmp	#LR__0332
04478                 | LR__0247
04478     69 FA 05 F6 | 	mov	result1, #105
0447c     9C 02 90 FD | 	jmp	#LR__0332
04480                 | LR__0248
04480     40 FA 05 F6 | 	mov	result1, #64
04484     94 02 90 FD | 	jmp	#LR__0332
04488                 | LR__0249
04488     49 FA 05 F6 | 	mov	result1, #73
0448c     8C 02 90 FD | 	jmp	#LR__0332
04490                 | LR__0250
04490     49 FA 05 F6 | 	mov	result1, #73
04494     84 02 90 FD | 	jmp	#LR__0332
04498                 | LR__0251
04498     50 FA 05 F6 | 	mov	result1, #80
0449c     7C 02 90 FD | 	jmp	#LR__0332
044a0                 | LR__0252
044a0     50 FA 05 F6 | 	mov	result1, #80
044a4     74 02 90 FD | 	jmp	#LR__0332
044a8                 | LR__0253
044a8     68 FA 05 F6 | 	mov	result1, #104
044ac     6C 02 90 FD | 	jmp	#LR__0332
044b0                 | LR__0254
044b0     73 FA 05 F6 | 	mov	result1, #115
044b4     64 02 90 FD | 	jmp	#LR__0332
044b8                 | LR__0255
044b8     74 FA 05 F6 | 	mov	result1, #116
044bc     5C 02 90 FD | 	jmp	#LR__0332
044c0                 | LR__0256
044c0     6C FA 05 F6 | 	mov	result1, #108
044c4     54 02 90 FD | 	jmp	#LR__0332
044c8                 | LR__0257
044c8     6C FA 05 F6 | 	mov	result1, #108
044cc     4C 02 90 FD | 	jmp	#LR__0332
044d0                 | LR__0258
044d0     89 FA 05 F6 | 	mov	result1, #137
044d4     44 02 90 FD | 	jmp	#LR__0332
044d8                 | LR__0259
044d8     72 FA 05 F6 | 	mov	result1, #114
044dc     3C 02 90 FD | 	jmp	#LR__0332
044e0                 | LR__0260
044e0     5D FA 05 F6 | 	mov	result1, #93
044e4     34 02 90 FD | 	jmp	#LR__0332
044e8                 | LR__0261
044e8     96 FA 05 F6 | 	mov	result1, #150
044ec     2C 02 90 FD | 	jmp	#LR__0332
044f0                 | LR__0262
044f0     43 FA 05 F6 | 	mov	result1, #67
044f4     24 02 90 FD | 	jmp	#LR__0332
044f8                 | LR__0263
044f8     43 FA 05 F6 | 	mov	result1, #67
044fc     1C 02 90 FD | 	jmp	#LR__0332
04500                 | LR__0264
04500     5A FA 05 F6 | 	mov	result1, #90
04504     14 02 90 FD | 	jmp	#LR__0332
04508                 | LR__0265
04508     46 FA 05 F6 | 	mov	result1, #70
0450c     0C 02 90 FD | 	jmp	#LR__0332
04510                 | LR__0266
04510     46 FA 05 F6 | 	mov	result1, #70
04514     04 02 90 FD | 	jmp	#LR__0332
04518                 | LR__0267
04518     71 FA 05 F6 | 	mov	result1, #113
0451c     FC 01 90 FD | 	jmp	#LR__0332
04520                 | LR__0268
04520     71 FA 05 F6 | 	mov	result1, #113
04524     F4 01 90 FD | 	jmp	#LR__0332
04528                 | LR__0269
04528     60 FA 05 F6 | 	mov	result1, #96
0452c     EC 01 90 FD | 	jmp	#LR__0332
04530                 | LR__0270
04530     4A FA 05 F6 | 	mov	result1, #74
04534     E4 01 90 FD | 	jmp	#LR__0332
04538                 | LR__0271
04538     4A FA 05 F6 | 	mov	result1, #74
0453c     DC 01 90 FD | 	jmp	#LR__0332
04540                 | LR__0272
04540     48 FA 05 F6 | 	mov	result1, #72
04544     D4 01 90 FD | 	jmp	#LR__0332
04548                 | LR__0273
04548     48 FA 05 F6 | 	mov	result1, #72
0454c     CC 01 90 FD | 	jmp	#LR__0332
04550                 | LR__0274
04550     4E FA 05 F6 | 	mov	result1, #78
04554     C4 01 90 FD | 	jmp	#LR__0332
04558                 | LR__0275
04558     4E FA 05 F6 | 	mov	result1, #78
0455c     BC 01 90 FD | 	jmp	#LR__0332
04560                 | LR__0276
04560     58 FA 05 F6 | 	mov	result1, #88
04564     B4 01 90 FD | 	jmp	#LR__0332
04568                 | LR__0277
04568     5F FA 05 F6 | 	mov	result1, #95
0456c     AC 01 90 FD | 	jmp	#LR__0332
04570                 | LR__0278
04570     5F FA 05 F6 | 	mov	result1, #95
04574     A4 01 90 FD | 	jmp	#LR__0332
04578                 | LR__0279
04578     8A FA 05 F6 | 	mov	result1, #138
0457c     9C 01 90 FD | 	jmp	#LR__0332
04580                 | LR__0280
04580     4C FA 05 F6 | 	mov	result1, #76
04584     94 01 90 FD | 	jmp	#LR__0332
04588                 | LR__0281
04588     4C FA 05 F6 | 	mov	result1, #76
0458c     8C 01 90 FD | 	jmp	#LR__0332
04590                 | LR__0282
04590     52 FA 05 F6 | 	mov	result1, #82
04594     84 01 90 FD | 	jmp	#LR__0332
04598                 | LR__0283
04598     52 FA 05 F6 | 	mov	result1, #82
0459c     7C 01 90 FD | 	jmp	#LR__0332
045a0                 | LR__0284
045a0     97 FA 05 F6 | 	mov	result1, #151
045a4     74 01 90 FD | 	jmp	#LR__0332
045a8                 | LR__0285
045a8     61 FA 05 F6 | 	mov	result1, #97
045ac     6C 01 90 FD | 	jmp	#LR__0332
045b0                 | LR__0286
045b0     61 FA 05 F6 | 	mov	result1, #97
045b4     64 01 90 FD | 	jmp	#LR__0332
045b8                 | LR__0287
045b8     63 FA 05 F6 | 	mov	result1, #99
045bc     5C 01 90 FD | 	jmp	#LR__0332
045c0                 | LR__0288
045c0     41 FA 05 F6 | 	mov	result1, #65
045c4     54 01 90 FD | 	jmp	#LR__0332
045c8                 | LR__0289
045c8     4B FA 05 F6 | 	mov	result1, #75
045cc     4C 01 90 FD | 	jmp	#LR__0332
045d0                 | LR__0290
045d0     4B FA 05 F6 | 	mov	result1, #75
045d4     44 01 90 FD | 	jmp	#LR__0332
045d8                 | LR__0291
045d8     5E FA 05 F6 | 	mov	result1, #94
045dc     3C 01 90 FD | 	jmp	#LR__0332
045e0                 | LR__0292
045e0     5E FA 05 F6 | 	mov	result1, #94
045e4     34 01 90 FD | 	jmp	#LR__0332
045e8                 | LR__0293
045e8     7C FA 05 F6 | 	mov	result1, #124
045ec     2C 01 90 FD | 	jmp	#LR__0332
045f0                 | LR__0294
045f0     7E FA 05 F6 | 	mov	result1, #126
045f4     24 01 90 FD | 	jmp	#LR__0332
045f8                 | LR__0295
045f8     7D FA 05 F6 | 	mov	result1, #125
045fc     1C 01 90 FD | 	jmp	#LR__0332
04600                 | LR__0296
04600     7F FA 05 F6 | 	mov	result1, #127
04604     14 01 90 FD | 	jmp	#LR__0332
04608                 | LR__0297
04608     80 FA 05 F6 | 	mov	result1, #128
0460c     0C 01 90 FD | 	jmp	#LR__0332
04610                 | LR__0298
04610     55 FA 05 F6 | 	mov	result1, #85
04614     04 01 90 FD | 	jmp	#LR__0332
04618                 | LR__0299
04618     75 FA 05 F6 | 	mov	result1, #117
0461c     FC 00 90 FD | 	jmp	#LR__0332
04620                 | LR__0300
04620     42 FA 05 F6 | 	mov	result1, #66
04624     F4 00 90 FD | 	jmp	#LR__0332
04628                 | LR__0301
04628     42 FA 05 F6 | 	mov	result1, #66
0462c     EC 00 90 FD | 	jmp	#LR__0332
04630                 | LR__0302
04630     95 FA 05 F6 | 	mov	result1, #149
04634     E4 00 90 FD | 	jmp	#LR__0332
04638                 | LR__0303
04638     81 FA 05 F6 | 	mov	result1, #129
0463c     DC 00 90 FD | 	jmp	#LR__0332
04640                 | LR__0304
04640     81 FA 05 F6 | 	mov	result1, #129
04644     D4 00 90 FD | 	jmp	#LR__0332
04648                 | LR__0305
04648     44 FA 05 F6 | 	mov	result1, #68
0464c     CC 00 90 FD | 	jmp	#LR__0332
04650                 | LR__0306
04650     44 FA 05 F6 | 	mov	result1, #68
04654     C4 00 90 FD | 	jmp	#LR__0332
04658                 | LR__0307
04658     88 FA 05 F6 | 	mov	result1, #136
0465c     BC 00 90 FD | 	jmp	#LR__0332
04660                 | LR__0308
04660     92 FA 05 F6 | 	mov	result1, #146
04664     B4 00 90 FD | 	jmp	#LR__0332
04668                 | LR__0309
04668     4D FA 05 F6 | 	mov	result1, #77
0466c     AC 00 90 FD | 	jmp	#LR__0332
04670                 | LR__0310
04670     51 FA 05 F6 | 	mov	result1, #81
04674     A4 00 90 FD | 	jmp	#LR__0332
04678                 | LR__0311
04678     51 FA 05 F6 | 	mov	result1, #81
0467c     9C 00 90 FD | 	jmp	#LR__0332
04680                 | LR__0312
04680     8E FA 05 F6 | 	mov	result1, #142
04684     94 00 90 FD | 	jmp	#LR__0332
04688                 | LR__0313
04688     90 FA 05 F6 | 	mov	result1, #144
0468c     8C 00 90 FD | 	jmp	#LR__0332
04690                 | LR__0314
04690     8D FA 05 F6 | 	mov	result1, #141
04694     84 00 90 FD | 	jmp	#LR__0332
04698                 | LR__0315
04698     8C FA 05 F6 | 	mov	result1, #140
0469c     7C 00 90 FD | 	jmp	#LR__0332
046a0                 | LR__0316
046a0     91 FA 05 F6 | 	mov	result1, #145
046a4     74 00 90 FD | 	jmp	#LR__0332
046a8                 | LR__0317
046a8     8B FA 05 F6 | 	mov	result1, #139
046ac     6C 00 90 FD | 	jmp	#LR__0332
046b0                 | LR__0318
046b0     8F FA 05 F6 | 	mov	result1, #143
046b4     64 00 90 FD | 	jmp	#LR__0332
046b8                 | LR__0319
046b8     75 FA 05 F6 | 	mov	result1, #117
046bc     5C 00 90 FD | 	jmp	#LR__0332
046c0                 | LR__0320
046c0     75 FA 05 F6 | 	mov	result1, #117
046c4     54 00 90 FD | 	jmp	#LR__0332
046c8                 | LR__0321
046c8     6D FA 05 F6 | 	mov	result1, #109
046cc     4C 00 90 FD | 	jmp	#LR__0332
046d0                 | LR__0322
046d0     6D FA 05 F6 | 	mov	result1, #109
046d4     44 00 90 FD | 	jmp	#LR__0332
046d8                 | LR__0323
046d8     5B FA 05 F6 | 	mov	result1, #91
046dc     3C 00 90 FD | 	jmp	#LR__0332
046e0                 | LR__0324
046e0     56 FA 05 F6 | 	mov	result1, #86
046e4     34 00 90 FD | 	jmp	#LR__0332
046e8                 | LR__0325
046e8     70 FA 05 F6 | 	mov	result1, #112
046ec     2C 00 90 FD | 	jmp	#LR__0332
046f0                 | LR__0326
046f0     70 FA 05 F6 | 	mov	result1, #112
046f4     24 00 90 FD | 	jmp	#LR__0332
046f8                 | LR__0327
046f8     57 FA 05 F6 | 	mov	result1, #87
046fc     1C 00 90 FD | 	jmp	#LR__0332
04700                 | LR__0328
04700     57 FA 05 F6 | 	mov	result1, #87
04704     14 00 90 FD | 	jmp	#LR__0332
04708                 | LR__0329
04708     77 FA 05 F6 | 	mov	result1, #119
0470c     0C 00 90 FD | 	jmp	#LR__0332
04710                 | LR__0330
04710     78 FA 05 F6 | 	mov	result1, #120
04714     04 00 90 FD | 	jmp	#LR__0332
04718                 | LR__0331
04718     00 FA 05 F6 | 	mov	result1, #0
0471c                 | LR__0332
0471c     A7 F0 03 F6 | 	mov	ptra, fp
04720     B2 00 A0 FD | 	call	#popregs_
04724                 | _iscommand_ret
04724     2D 00 64 FD | 	ret
04728                 | 
04728                 | ' 
04728                 | ' function isfunction(s as string) as ubyte
04728                 | _isfunction
04728     01 4A 05 F6 | 	mov	COUNT_, #1
0472c     A8 00 A0 FD | 	call	#pushregs_
04730                 | ' 
04730                 | ' select case s
04730     09 1F 02 F6 | 	mov	local01, arg01
04734     5E 01 00 FF 
04738     92 14 06 F6 | 	mov	arg02, ##@LR__4803
0473c     0F 13 02 F6 | 	mov	arg01, local01
04740     DC 7B B1 FD | 	call	#__system___string_cmp
04744     00 FA 0D F2 | 	cmp	result1, #0 wz
04748     D4 02 90 AD |  if_e	jmp	#LR__0340
0474c     5E 01 00 FF 
04750     96 14 06 F6 | 	mov	arg02, ##@LR__4804
04754     0F 13 02 F6 | 	mov	arg01, local01
04758     C4 7B B1 FD | 	call	#__system___string_cmp
0475c     00 FA 0D F2 | 	cmp	result1, #0 wz
04760     C4 02 90 AD |  if_e	jmp	#LR__0341
04764     5E 01 00 FF 
04768     9B 14 06 F6 | 	mov	arg02, ##@LR__4805
0476c     0F 13 02 F6 | 	mov	arg01, local01
04770     AC 7B B1 FD | 	call	#__system___string_cmp
04774     00 FA 0D F2 | 	cmp	result1, #0 wz
04778     B4 02 90 AD |  if_e	jmp	#LR__0342
0477c     5E 01 00 FF 
04780     9F 14 06 F6 | 	mov	arg02, ##@LR__4806
04784     0F 13 02 F6 | 	mov	arg01, local01
04788     94 7B B1 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     A4 02 90 AD |  if_e	jmp	#LR__0343
04794     5E 01 00 FF 
04798     A4 14 06 F6 | 	mov	arg02, ##@LR__4807
0479c     0F 13 02 F6 | 	mov	arg01, local01
047a0     7C 7B B1 FD | 	call	#__system___string_cmp
047a4     00 FA 0D F2 | 	cmp	result1, #0 wz
047a8     94 02 90 AD |  if_e	jmp	#LR__0344
047ac     5E 01 00 FF 
047b0     AB 14 06 F6 | 	mov	arg02, ##@LR__4808
047b4     0F 13 02 F6 | 	mov	arg01, local01
047b8     64 7B B1 FD | 	call	#__system___string_cmp
047bc     00 FA 0D F2 | 	cmp	result1, #0 wz
047c0     84 02 90 AD |  if_e	jmp	#LR__0345
047c4     5E 01 00 FF 
047c8     B0 14 06 F6 | 	mov	arg02, ##@LR__4809
047cc     0F 13 02 F6 | 	mov	arg01, local01
047d0     4C 7B B1 FD | 	call	#__system___string_cmp
047d4     00 FA 0D F2 | 	cmp	result1, #0 wz
047d8     74 02 90 AD |  if_e	jmp	#LR__0346
047dc     5E 01 00 FF 
047e0     B4 14 06 F6 | 	mov	arg02, ##@LR__4810
047e4     0F 13 02 F6 | 	mov	arg01, local01
047e8     34 7B B1 FD | 	call	#__system___string_cmp
047ec     00 FA 0D F2 | 	cmp	result1, #0 wz
047f0     64 02 90 AD |  if_e	jmp	#LR__0347
047f4     5E 01 00 FF 
047f8     B8 14 06 F6 | 	mov	arg02, ##@LR__4811
047fc     0F 13 02 F6 | 	mov	arg01, local01
04800     1C 7B B1 FD | 	call	#__system___string_cmp
04804     00 FA 0D F2 | 	cmp	result1, #0 wz
04808     54 02 90 AD |  if_e	jmp	#LR__0348
0480c     5E 01 00 FF 
04810     BE 14 06 F6 | 	mov	arg02, ##@LR__4812
04814     0F 13 02 F6 | 	mov	arg01, local01
04818     04 7B B1 FD | 	call	#__system___string_cmp
0481c     00 FA 0D F2 | 	cmp	result1, #0 wz
04820     44 02 90 AD |  if_e	jmp	#LR__0349
04824     5E 01 00 FF 
04828     C2 14 06 F6 | 	mov	arg02, ##@LR__4813
0482c     0F 13 02 F6 | 	mov	arg01, local01
04830     EC 7A B1 FD | 	call	#__system___string_cmp
04834     00 FA 0D F2 | 	cmp	result1, #0 wz
04838     34 02 90 AD |  if_e	jmp	#LR__0350
0483c     5E 01 00 FF 
04840     CB 14 06 F6 | 	mov	arg02, ##@LR__4814
04844     0F 13 02 F6 | 	mov	arg01, local01
04848     D4 7A B1 FD | 	call	#__system___string_cmp
0484c     00 FA 0D F2 | 	cmp	result1, #0 wz
04850     24 02 90 AD |  if_e	jmp	#LR__0351
04854     5E 01 00 FF 
04858     CF 14 06 F6 | 	mov	arg02, ##@LR__4815
0485c     0F 13 02 F6 | 	mov	arg01, local01
04860     BC 7A B1 FD | 	call	#__system___string_cmp
04864     00 FA 0D F2 | 	cmp	result1, #0 wz
04868     14 02 90 AD |  if_e	jmp	#LR__0352
0486c     5E 01 00 FF 
04870     DD 14 06 F6 | 	mov	arg02, ##@LR__4816
04874     0F 13 02 F6 | 	mov	arg01, local01
04878     A4 7A B1 FD | 	call	#__system___string_cmp
0487c     00 FA 0D F2 | 	cmp	result1, #0 wz
04880     04 02 90 AD |  if_e	jmp	#LR__0353
04884     5E 01 00 FF 
04888     EA 14 06 F6 | 	mov	arg02, ##@LR__4817
0488c     0F 13 02 F6 | 	mov	arg01, local01
04890     8C 7A B1 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     F4 01 90 AD |  if_e	jmp	#LR__0354
0489c     5E 01 00 FF 
048a0     F2 14 06 F6 | 	mov	arg02, ##@LR__4818
048a4     0F 13 02 F6 | 	mov	arg01, local01
048a8     74 7A B1 FD | 	call	#__system___string_cmp
048ac     00 FA 0D F2 | 	cmp	result1, #0 wz
048b0     E4 01 90 AD |  if_e	jmp	#LR__0355
048b4     5E 01 00 FF 
048b8     F9 14 06 F6 | 	mov	arg02, ##@LR__4819
048bc     0F 13 02 F6 | 	mov	arg01, local01
048c0     5C 7A B1 FD | 	call	#__system___string_cmp
048c4     00 FA 0D F2 | 	cmp	result1, #0 wz
048c8     D4 01 90 AD |  if_e	jmp	#LR__0356
048cc     5E 01 00 FF 
048d0     FF 14 06 F6 | 	mov	arg02, ##@LR__4820
048d4     0F 13 02 F6 | 	mov	arg01, local01
048d8     44 7A B1 FD | 	call	#__system___string_cmp
048dc     00 FA 0D F2 | 	cmp	result1, #0 wz
048e0     C4 01 90 AD |  if_e	jmp	#LR__0357
048e4     5E 01 00 FF 
048e8     06 15 06 F6 | 	mov	arg02, ##@LR__4821
048ec     0F 13 02 F6 | 	mov	arg01, local01
048f0     2C 7A B1 FD | 	call	#__system___string_cmp
048f4     00 FA 0D F2 | 	cmp	result1, #0 wz
048f8     B4 01 90 AD |  if_e	jmp	#LR__0358
048fc     5E 01 00 FF 
04900     0D 15 06 F6 | 	mov	arg02, ##@LR__4822
04904     0F 13 02 F6 | 	mov	arg01, local01
04908     14 7A B1 FD | 	call	#__system___string_cmp
0490c     00 FA 0D F2 | 	cmp	result1, #0 wz
04910     A4 01 90 AD |  if_e	jmp	#LR__0359
04914     5E 01 00 FF 
04918     14 15 06 F6 | 	mov	arg02, ##@LR__4823
0491c     0F 13 02 F6 | 	mov	arg01, local01
04920     FC 79 B1 FD | 	call	#__system___string_cmp
04924     00 FA 0D F2 | 	cmp	result1, #0 wz
04928     94 01 90 AD |  if_e	jmp	#LR__0360
0492c     5E 01 00 FF 
04930     1B 15 06 F6 | 	mov	arg02, ##@LR__4824
04934     0F 13 02 F6 | 	mov	arg01, local01
04938     E4 79 B1 FD | 	call	#__system___string_cmp
0493c     00 FA 0D F2 | 	cmp	result1, #0 wz
04940     84 01 90 AD |  if_e	jmp	#LR__0361
04944     5E 01 00 FF 
04948     20 15 06 F6 | 	mov	arg02, ##@LR__4825
0494c     0F 13 02 F6 | 	mov	arg01, local01
04950     CC 79 B1 FD | 	call	#__system___string_cmp
04954     00 FA 0D F2 | 	cmp	result1, #0 wz
04958     74 01 90 AD |  if_e	jmp	#LR__0362
0495c     5E 01 00 FF 
04960     28 15 06 F6 | 	mov	arg02, ##@LR__4826
04964     0F 13 02 F6 | 	mov	arg01, local01
04968     B4 79 B1 FD | 	call	#__system___string_cmp
0496c     00 FA 0D F2 | 	cmp	result1, #0 wz
04970     64 01 90 AD |  if_e	jmp	#LR__0363
04974     5E 01 00 FF 
04978     2E 15 06 F6 | 	mov	arg02, ##@LR__4827
0497c     0F 13 02 F6 | 	mov	arg01, local01
04980     9C 79 B1 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     54 01 90 AD |  if_e	jmp	#LR__0364
0498c     5E 01 00 FF 
04990     34 15 06 F6 | 	mov	arg02, ##@LR__4828
04994     0F 13 02 F6 | 	mov	arg01, local01
04998     84 79 B1 FD | 	call	#__system___string_cmp
0499c     00 FA 0D F2 | 	cmp	result1, #0 wz
049a0     44 01 90 AD |  if_e	jmp	#LR__0365
049a4     5E 01 00 FF 
049a8     38 15 06 F6 | 	mov	arg02, ##@LR__4829
049ac     0F 13 02 F6 | 	mov	arg01, local01
049b0     6C 79 B1 FD | 	call	#__system___string_cmp
049b4     00 FA 0D F2 | 	cmp	result1, #0 wz
049b8     34 01 90 AD |  if_e	jmp	#LR__0366
049bc     5E 01 00 FF 
049c0     3C 15 06 F6 | 	mov	arg02, ##@LR__4830
049c4     0F 13 02 F6 | 	mov	arg01, local01
049c8     54 79 B1 FD | 	call	#__system___string_cmp
049cc     00 FA 0D F2 | 	cmp	result1, #0 wz
049d0     24 01 90 AD |  if_e	jmp	#LR__0367
049d4     5E 01 00 FF 
049d8     40 15 06 F6 | 	mov	arg02, ##@LR__4831
049dc     0F 13 02 F6 | 	mov	arg01, local01
049e0     3C 79 B1 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     14 01 90 AD |  if_e	jmp	#LR__0368
049ec     5E 01 00 FF 
049f0     46 15 06 F6 | 	mov	arg02, ##@LR__4832
049f4     0F 13 02 F6 | 	mov	arg01, local01
049f8     24 79 B1 FD | 	call	#__system___string_cmp
049fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04a00     04 01 90 AD |  if_e	jmp	#LR__0369
04a04     5E 01 00 FF 
04a08     4C 15 06 F6 | 	mov	arg02, ##@LR__4833
04a0c     0F 13 02 F6 | 	mov	arg01, local01
04a10     0C 79 B1 FD | 	call	#__system___string_cmp
04a14     00 FA 0D F2 | 	cmp	result1, #0 wz
04a18     F4 00 90 AD |  if_e	jmp	#LR__0370
04a1c     F8 00 90 FD | 	jmp	#LR__0371
04a20                 | LR__0340
04a20     9E FA 05 F6 | 	mov	result1, #158
04a24     F4 00 90 FD | 	jmp	#LR__0372
04a28                 | LR__0341
04a28     85 FA 05 F6 | 	mov	result1, #133
04a2c     EC 00 90 FD | 	jmp	#LR__0372
04a30                 | LR__0342
04a30     9B FA 05 F6 | 	mov	result1, #155
04a34     E4 00 90 FD | 	jmp	#LR__0372
04a38                 | LR__0343
04a38     9B FA 05 F6 | 	mov	result1, #155
04a3c     DC 00 90 FD | 	jmp	#LR__0372
04a40                 | LR__0344
04a40     9B FA 05 F6 | 	mov	result1, #155
04a44     D4 00 90 FD | 	jmp	#LR__0372
04a48                 | LR__0345
04a48     84 FA 05 F6 | 	mov	result1, #132
04a4c     CC 00 90 FD | 	jmp	#LR__0372
04a50                 | LR__0346
04a50     86 FA 05 F6 | 	mov	result1, #134
04a54     C4 00 90 FD | 	jmp	#LR__0372
04a58                 | LR__0347
04a58     82 FA 05 F6 | 	mov	result1, #130
04a5c     BC 00 90 FD | 	jmp	#LR__0372
04a60                 | LR__0348
04a60     99 FA 05 F6 | 	mov	result1, #153
04a64     B4 00 90 FD | 	jmp	#LR__0372
04a68                 | LR__0349
04a68     9C FA 05 F6 | 	mov	result1, #156
04a6c     AC 00 90 FD | 	jmp	#LR__0372
04a70                 | LR__0350
04a70     6F FA 05 F6 | 	mov	result1, #111
04a74     A4 00 90 FD | 	jmp	#LR__0372
04a78                 | LR__0351
04a78     6F FA 05 F6 | 	mov	result1, #111
04a7c     9C 00 90 FD | 	jmp	#LR__0372
04a80                 | LR__0352
04a80     93 FA 05 F6 | 	mov	result1, #147
04a84     94 00 90 FD | 	jmp	#LR__0372
04a88                 | LR__0353
04a88     94 FA 05 F6 | 	mov	result1, #148
04a8c     8C 00 90 FD | 	jmp	#LR__0372
04a90                 | LR__0354
04a90     62 FA 05 F6 | 	mov	result1, #98
04a94     84 00 90 FD | 	jmp	#LR__0372
04a98                 | LR__0355
04a98     9D FA 05 F6 | 	mov	result1, #157
04a9c     7C 00 90 FD | 	jmp	#LR__0372
04aa0                 | LR__0356
04aa0     9A FA 05 F6 | 	mov	result1, #154
04aa4     74 00 90 FD | 	jmp	#LR__0372
04aa8                 | LR__0357
04aa8     66 FA 05 F6 | 	mov	result1, #102
04aac     6C 00 90 FD | 	jmp	#LR__0372
04ab0                 | LR__0358
04ab0     67 FA 05 F6 | 	mov	result1, #103
04ab4     64 00 90 FD | 	jmp	#LR__0372
04ab8                 | LR__0359
04ab8     64 FA 05 F6 | 	mov	result1, #100
04abc     5C 00 90 FD | 	jmp	#LR__0372
04ac0                 | LR__0360
04ac0     65 FA 05 F6 | 	mov	result1, #101
04ac4     54 00 90 FD | 	jmp	#LR__0372
04ac8                 | LR__0361
04ac8     98 FA 05 F6 | 	mov	result1, #152
04acc     4C 00 90 FD | 	jmp	#LR__0372
04ad0                 | LR__0362
04ad0     7B FA 05 F6 | 	mov	result1, #123
04ad4     44 00 90 FD | 	jmp	#LR__0372
04ad8                 | LR__0363
04ad8     76 FA 05 F6 | 	mov	result1, #118
04adc     3C 00 90 FD | 	jmp	#LR__0372
04ae0                 | LR__0364
04ae0     7A FA 05 F6 | 	mov	result1, #122
04ae4     34 00 90 FD | 	jmp	#LR__0372
04ae8                 | LR__0365
04ae8     54 FA 05 F6 | 	mov	result1, #84
04aec     2C 00 90 FD | 	jmp	#LR__0372
04af0                 | LR__0366
04af0     6B FA 05 F6 | 	mov	result1, #107
04af4     24 00 90 FD | 	jmp	#LR__0372
04af8                 | LR__0367
04af8     87 FA 05 F6 | 	mov	result1, #135
04afc     1C 00 90 FD | 	jmp	#LR__0372
04b00                 | LR__0368
04b00     6A FA 05 F6 | 	mov	result1, #106
04b04     14 00 90 FD | 	jmp	#LR__0372
04b08                 | LR__0369
04b08     6E FA 05 F6 | 	mov	result1, #110
04b0c     0C 00 90 FD | 	jmp	#LR__0372
04b10                 | LR__0370
04b10     83 FA 05 F6 | 	mov	result1, #131
04b14     04 00 90 FD | 	jmp	#LR__0372
04b18                 | LR__0371
04b18     00 FA 05 F6 | 	mov	result1, #0
04b1c                 | LR__0372
04b1c     A7 F0 03 F6 | 	mov	ptra, fp
04b20     B2 00 A0 FD | 	call	#popregs_
04b24                 | _isfunction_ret
04b24     2D 00 64 FD | 	ret
04b28                 | 
04b28                 | ' 
04b28                 | ' function isname(s as string) as boolean
04b28                 | _isname
04b28     0D 4A 05 F6 | 	mov	COUNT_, #13
04b2c     A8 00 A0 FD | 	call	#pushregs_
04b30     09 1F 02 F6 | 	mov	local01, arg01
04b34     09 21 02 F6 | 	mov	local02, arg01
04b38     97 06 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
04b3c                 | LR__0380
04b3c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04b40     01 20 06 51 |  if_ne	add	local02, #1
04b44     F4 FF 9F 5D |  if_ne	jmp	#LR__0380
04b48                 | LR__0381
04b48     09 21 82 F1 | 	sub	local02, arg01
04b4c     10 FB 01 F6 | 	mov	result1, local02
04b50     FD 22 0A F6 | 	mov	local03, result1 wz
04b54     00 FA 05 A6 |  if_e	mov	result1, #0
04b58     34 02 90 AD |  if_e	jmp	#LR__0393
04b5c     0F 13 02 F6 | 	mov	arg01, local01
04b60     01 14 06 F6 | 	mov	arg02, #1
04b64     01 16 06 F6 | 	mov	arg03, #1
04b68     E8 98 B1 FD | 	call	#__system__Mid_S
04b6c     FD 24 02 F6 | 	mov	local04, result1
04b70                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04b70     5E 01 00 FF 
04b74     50 15 06 F6 | 	mov	arg02, ##@LR__4834
04b78     12 13 02 F6 | 	mov	arg01, local04
04b7c     A0 77 B1 FD | 	call	#__system___string_cmp
04b80     00 FA 55 F2 | 	cmps	result1, #0 wc
04b84     18 00 90 CD |  if_b	jmp	#LR__0382
04b88     5E 01 00 FF 
04b8c     52 15 06 F6 | 	mov	arg02, ##@LR__4835
04b90     12 13 02 F6 | 	mov	arg01, local04
04b94     88 77 B1 FD | 	call	#__system___string_cmp
04b98     01 FA 55 F2 | 	cmps	result1, #1 wc
04b9c     1C 00 90 CD |  if_b	jmp	#LR__0383
04ba0                 | LR__0382
04ba0     5E 01 00 FF 
04ba4     54 15 06 F6 | 	mov	arg02, ##@LR__4836
04ba8     12 13 02 F6 | 	mov	arg01, local04
04bac     70 77 B1 FD | 	call	#__system___string_cmp
04bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb4     00 FA 05 56 |  if_ne	mov	result1, #0
04bb8     D4 01 90 5D |  if_ne	jmp	#LR__0393
04bbc                 | LR__0383
04bbc                 | ' if l>2 then 
04bbc     03 22 56 F2 | 	cmps	local03, #3 wc
04bc0     C8 01 90 CD |  if_b	jmp	#LR__0392
04bc4                 | '   for i=2 to l
04bc4     02 26 06 F6 | 	mov	local05, #2
04bc8     11 29 02 F6 | 	mov	local06, local03
04bcc     01 28 06 F1 | 	add	local06, #1
04bd0                 | LR__0384
04bd0     14 27 52 F2 | 	cmps	local05, local06 wc
04bd4     B4 01 90 3D |  if_ae	jmp	#LR__0391
04bd8     0F 13 02 F6 | 	mov	arg01, local01
04bdc     13 15 02 F6 | 	mov	arg02, local05
04be0     01 16 06 F6 | 	mov	arg03, #1
04be4     6C 98 B1 FD | 	call	#__system__Mid_S
04be8     FD 24 02 F6 | 	mov	local04, result1
04bec                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04bec     11 27 52 F2 | 	cmps	local05, local03 wc
04bf0     9C 00 90 3D |  if_ae	jmp	#LR__0387
04bf4     5E 01 00 FF 
04bf8     56 15 06 F6 | 	mov	arg02, ##@LR__4837
04bfc     12 13 02 F6 | 	mov	arg01, local04
04c00     1C 77 B1 FD | 	call	#__system___string_cmp
04c04     00 FA 55 F2 | 	cmps	result1, #0 wc
04c08     18 00 90 CD |  if_b	jmp	#LR__0385
04c0c     5E 01 00 FF 
04c10     58 15 06 F6 | 	mov	arg02, ##@LR__4838
04c14     12 13 02 F6 | 	mov	arg01, local04
04c18     04 77 B1 FD | 	call	#__system___string_cmp
04c1c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c20     6C 00 90 CD |  if_b	jmp	#LR__0387
04c24                 | LR__0385
04c24     5E 01 00 FF 
04c28     5A 15 06 F6 | 	mov	arg02, ##@LR__4839
04c2c     12 13 02 F6 | 	mov	arg01, local04
04c30     EC 76 B1 FD | 	call	#__system___string_cmp
04c34     00 FA 55 F2 | 	cmps	result1, #0 wc
04c38     18 00 90 CD |  if_b	jmp	#LR__0386
04c3c     5E 01 00 FF 
04c40     5C 15 06 F6 | 	mov	arg02, ##@LR__4840
04c44     12 13 02 F6 | 	mov	arg01, local04
04c48     D4 76 B1 FD | 	call	#__system___string_cmp
04c4c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c50     3C 00 90 CD |  if_b	jmp	#LR__0387
04c54                 | LR__0386
04c54     5E 01 00 FF 
04c58     5E 2B 06 F6 | 	mov	local07, ##@LR__4841
04c5c     12 13 02 F6 | 	mov	arg01, local04
04c60     15 15 02 F6 | 	mov	arg02, local07
04c64     B8 76 B1 FD | 	call	#__system___string_cmp
04c68     00 FA 0D F2 | 	cmp	result1, #0 wz
04c6c     20 00 90 AD |  if_e	jmp	#LR__0387
04c70     5E 01 00 FF 
04c74     60 2D 06 F6 | 	mov	local08, ##@LR__4842
04c78     12 13 02 F6 | 	mov	arg01, local04
04c7c     16 15 02 F6 | 	mov	arg02, local08
04c80     9C 76 B1 FD | 	call	#__system___string_cmp
04c84     FD 2E 0A F6 | 	mov	local09, result1 wz
04c88     00 FA 05 56 |  if_ne	mov	result1, #0
04c8c     00 01 90 5D |  if_ne	jmp	#LR__0393
04c90                 | LR__0387
04c90                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04c90     11 27 0A F2 | 	cmp	local05, local03 wz
04c94     EC 00 90 5D |  if_ne	jmp	#LR__0390
04c98     5E 01 00 FF 
04c9c     62 31 06 F6 | 	mov	local10, ##@LR__4843
04ca0     12 13 02 F6 | 	mov	arg01, local04
04ca4     18 15 02 F6 | 	mov	arg02, local10
04ca8     74 76 B1 FD | 	call	#__system___string_cmp
04cac     FD 32 02 F6 | 	mov	local11, result1
04cb0     00 32 56 F2 | 	cmps	local11, #0 wc
04cb4     1C 00 90 CD |  if_b	jmp	#LR__0388
04cb8     5E 01 00 FF 
04cbc     64 15 06 F6 | 	mov	arg02, ##@LR__4844
04cc0     12 13 02 F6 | 	mov	arg01, local04
04cc4     58 76 B1 FD | 	call	#__system___string_cmp
04cc8     FD 30 02 F6 | 	mov	local10, result1
04ccc     01 30 56 F2 | 	cmps	local10, #1 wc
04cd0     B0 00 90 CD |  if_b	jmp	#LR__0390
04cd4                 | LR__0388
04cd4     5E 01 00 FF 
04cd8     66 15 06 F6 | 	mov	arg02, ##@LR__4845
04cdc     12 13 02 F6 | 	mov	arg01, local04
04ce0     3C 76 B1 FD | 	call	#__system___string_cmp
04ce4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ce8     1C 00 90 CD |  if_b	jmp	#LR__0389
04cec     5E 01 00 FF 
04cf0     68 2F 06 F6 | 	mov	local09, ##@LR__4846
04cf4     12 13 02 F6 | 	mov	arg01, local04
04cf8     17 15 02 F6 | 	mov	arg02, local09
04cfc     20 76 B1 FD | 	call	#__system___string_cmp
04d00     01 FA 55 F2 | 	cmps	result1, #1 wc
04d04     7C 00 90 CD |  if_b	jmp	#LR__0390
04d08                 | LR__0389
04d08     5E 01 00 FF 
04d0c     6A 2F 06 F6 | 	mov	local09, ##@LR__4847
04d10     12 13 02 F6 | 	mov	arg01, local04
04d14     17 15 02 F6 | 	mov	arg02, local09
04d18     04 76 B1 FD | 	call	#__system___string_cmp
04d1c     00 FA 4D F2 | 	cmps	result1, #0 wz
04d20     60 00 90 AD |  if_e	jmp	#LR__0390
04d24     5E 01 00 FF 
04d28     6C 2D 06 F6 | 	mov	local08, ##@LR__4848
04d2c     12 13 02 F6 | 	mov	arg01, local04
04d30     16 15 02 F6 | 	mov	arg02, local08
04d34     E8 75 B1 FD | 	call	#__system___string_cmp
04d38     FD 2E 0A F6 | 	mov	local09, result1 wz
04d3c     44 00 90 AD |  if_e	jmp	#LR__0390
04d40     5E 01 00 FF 
04d44     6E 35 06 F6 | 	mov	local12, ##@LR__4849
04d48     1A 2D 02 F6 | 	mov	local08, local12
04d4c     12 13 02 F6 | 	mov	arg01, local04
04d50     16 15 02 F6 | 	mov	arg02, local08
04d54     C8 75 B1 FD | 	call	#__system___string_cmp
04d58     FD 2A 0A F6 | 	mov	local07, result1 wz
04d5c     24 00 90 AD |  if_e	jmp	#LR__0390
04d60     5E 01 00 FF 
04d64     70 37 06 F6 | 	mov	local13, ##@LR__4850
04d68     1B 35 02 F6 | 	mov	local12, local13
04d6c     12 13 02 F6 | 	mov	arg01, local04
04d70     1A 15 02 F6 | 	mov	arg02, local12
04d74     A8 75 B1 FD | 	call	#__system___string_cmp
04d78     FD 2C 0A F6 | 	mov	local08, result1 wz
04d7c     00 FA 05 56 |  if_ne	mov	result1, #0
04d80     0C 00 90 5D |  if_ne	jmp	#LR__0393
04d84                 | LR__0390
04d84     01 26 06 F1 | 	add	local05, #1
04d88     44 FE 9F FD | 	jmp	#LR__0384
04d8c                 | LR__0391
04d8c                 | LR__0392
04d8c                 | ' return true
04d8c     01 FA 65 F6 | 	neg	result1, #1
04d90                 | LR__0393
04d90     A7 F0 03 F6 | 	mov	ptra, fp
04d94     B2 00 A0 FD | 	call	#popregs_
04d98                 | _isname_ret
04d98     2D 00 64 FD | 	ret
04d9c                 | 
04d9c                 | ' 
04d9c                 | ' function isnum(s as string) as boolean
04d9c                 | _isnum
04d9c     0D 4A 05 F6 | 	mov	COUNT_, #13
04da0     A8 00 A0 FD | 	call	#pushregs_
04da4     09 1F 02 F6 | 	mov	local01, arg01
04da8     00 20 06 F6 | 	mov	local02, #0
04dac     00 22 06 F6 | 	mov	local03, #0
04db0     0F 13 02 F6 | 	mov	arg01, local01
04db4     09 25 02 F6 | 	mov	local04, arg01
04db8     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
04dbc                 | LR__0400
04dbc     12 FB C9 FA | 	rdbyte	result1, local04 wz
04dc0     01 24 06 51 |  if_ne	add	local04, #1
04dc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
04dc8                 | LR__0401
04dc8     09 25 82 F1 | 	sub	local04, arg01
04dcc     12 FB 01 F6 | 	mov	result1, local04
04dd0     FD 26 0A F6 | 	mov	local05, result1 wz
04dd4     00 FA 05 A6 |  if_e	mov	result1, #0
04dd8     8C 02 90 AD |  if_e	jmp	#LR__0412
04ddc     0F 13 02 F6 | 	mov	arg01, local01
04de0     01 14 06 F6 | 	mov	arg02, #1
04de4     01 16 06 F6 | 	mov	arg03, #1
04de8     68 96 B1 FD | 	call	#__system__Mid_S
04dec     FD 28 02 F6 | 	mov	local06, result1
04df0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04df0     5E 01 00 FF 
04df4     72 15 06 F6 | 	mov	arg02, ##@LR__4851
04df8     14 13 02 F6 | 	mov	arg01, local06
04dfc     20 75 B1 FD | 	call	#__system___string_cmp
04e00     00 FA 55 F2 | 	cmps	result1, #0 wc
04e04     18 00 90 CD |  if_b	jmp	#LR__0402
04e08     5E 01 00 FF 
04e0c     74 15 06 F6 | 	mov	arg02, ##@LR__4852
04e10     14 13 02 F6 | 	mov	arg01, local06
04e14     08 75 B1 FD | 	call	#__system___string_cmp
04e18     01 FA 55 F2 | 	cmps	result1, #1 wc
04e1c     78 00 90 CD |  if_b	jmp	#LR__0403
04e20                 | LR__0402
04e20     5E 01 00 FF 
04e24     76 15 06 F6 | 	mov	arg02, ##@LR__4853
04e28     14 13 02 F6 | 	mov	arg01, local06
04e2c     F0 74 B1 FD | 	call	#__system___string_cmp
04e30     00 FA 0D F2 | 	cmp	result1, #0 wz
04e34     60 00 90 AD |  if_e	jmp	#LR__0403
04e38     5E 01 00 FF 
04e3c     78 2B 06 F6 | 	mov	local07, ##@LR__4854
04e40     14 13 02 F6 | 	mov	arg01, local06
04e44     15 15 02 F6 | 	mov	arg02, local07
04e48     D4 74 B1 FD | 	call	#__system___string_cmp
04e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e50     44 00 90 AD |  if_e	jmp	#LR__0403
04e54     5E 01 00 FF 
04e58     7A 2D 06 F6 | 	mov	local08, ##@LR__4855
04e5c     16 2B 02 F6 | 	mov	local07, local08
04e60     14 13 02 F6 | 	mov	arg01, local06
04e64     15 15 02 F6 | 	mov	arg02, local07
04e68     B4 74 B1 FD | 	call	#__system___string_cmp
04e6c     00 FA 4D F2 | 	cmps	result1, #0 wz
04e70     24 00 90 AD |  if_e	jmp	#LR__0403
04e74     5E 01 00 FF 
04e78     7C 2F 06 F6 | 	mov	local09, ##@LR__4856
04e7c     17 2D 02 F6 | 	mov	local08, local09
04e80     14 13 02 F6 | 	mov	arg01, local06
04e84     16 15 02 F6 | 	mov	arg02, local08
04e88     94 74 B1 FD | 	call	#__system___string_cmp
04e8c     FD 2A 0A F6 | 	mov	local07, result1 wz
04e90     00 FA 05 56 |  if_ne	mov	result1, #0
04e94     D0 01 90 5D |  if_ne	jmp	#LR__0412
04e98                 | LR__0403
04e98                 | ' if m$="." then ds=1
04e98     5E 01 00 FF 
04e9c     7E 15 06 F6 | 	mov	arg02, ##@LR__4857
04ea0     14 13 02 F6 | 	mov	arg01, local06
04ea4     78 74 B1 FD | 	call	#__system___string_cmp
04ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eac     01 20 06 A6 |  if_e	mov	local02, #1
04eb0                 | ' if l>1 then 
04eb0     02 26 56 F2 | 	cmps	local05, #2 wc
04eb4     AC 01 90 CD |  if_b	jmp	#LR__0411
04eb8                 | '   for i=2 to l
04eb8     02 30 06 F6 | 	mov	local10, #2
04ebc     13 33 02 F6 | 	mov	local11, local05
04ec0     01 32 06 F1 | 	add	local11, #1
04ec4                 | LR__0404
04ec4     19 31 52 F2 | 	cmps	local10, local11 wc
04ec8     98 01 90 3D |  if_ae	jmp	#LR__0410
04ecc     0F 13 02 F6 | 	mov	arg01, local01
04ed0     18 15 02 F6 | 	mov	arg02, local10
04ed4     01 16 06 F6 | 	mov	arg03, #1
04ed8     78 95 B1 FD | 	call	#__system__Mid_S
04edc     FD 28 02 F6 | 	mov	local06, result1
04ee0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04ee0     5E 01 00 FF 
04ee4     80 15 06 F6 | 	mov	arg02, ##@LR__4858
04ee8     14 13 02 F6 | 	mov	arg01, local06
04eec     30 74 B1 FD | 	call	#__system___string_cmp
04ef0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ef4     18 00 90 CD |  if_b	jmp	#LR__0405
04ef8     5E 01 00 FF 
04efc     82 15 06 F6 | 	mov	arg02, ##@LR__4859
04f00     14 13 02 F6 | 	mov	arg01, local06
04f04     18 74 B1 FD | 	call	#__system___string_cmp
04f08     01 FA 55 F2 | 	cmps	result1, #1 wc
04f0c     98 00 90 CD |  if_b	jmp	#LR__0406
04f10                 | LR__0405
04f10     5E 01 00 FF 
04f14     84 15 06 F6 | 	mov	arg02, ##@LR__4860
04f18     14 13 02 F6 | 	mov	arg01, local06
04f1c     00 74 B1 FD | 	call	#__system___string_cmp
04f20     00 FA 0D F2 | 	cmp	result1, #0 wz
04f24     80 00 90 AD |  if_e	jmp	#LR__0406
04f28     5E 01 00 FF 
04f2c     86 2B 06 F6 | 	mov	local07, ##@LR__4861
04f30     14 13 02 F6 | 	mov	arg01, local06
04f34     15 15 02 F6 | 	mov	arg02, local07
04f38     E4 73 B1 FD | 	call	#__system___string_cmp
04f3c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f40     64 00 90 AD |  if_e	jmp	#LR__0406
04f44     5E 01 00 FF 
04f48     88 2D 06 F6 | 	mov	local08, ##@LR__4862
04f4c     16 2B 02 F6 | 	mov	local07, local08
04f50     14 13 02 F6 | 	mov	arg01, local06
04f54     15 15 02 F6 | 	mov	arg02, local07
04f58     C4 73 B1 FD | 	call	#__system___string_cmp
04f5c     FD 34 0A F6 | 	mov	local12, result1 wz
04f60     44 00 90 AD |  if_e	jmp	#LR__0406
04f64     5E 01 00 FF 
04f68     8A 2F 06 F6 | 	mov	local09, ##@LR__4863
04f6c     17 2D 02 F6 | 	mov	local08, local09
04f70     14 13 02 F6 | 	mov	arg01, local06
04f74     16 15 02 F6 | 	mov	arg02, local08
04f78     A4 73 B1 FD | 	call	#__system___string_cmp
04f7c     FD 2A 0A F6 | 	mov	local07, result1 wz
04f80     24 00 90 AD |  if_e	jmp	#LR__0406
04f84     5E 01 00 FF 
04f88     8C 37 06 F6 | 	mov	local13, ##@LR__4864
04f8c     1B 2F 02 F6 | 	mov	local09, local13
04f90     14 13 02 F6 | 	mov	arg01, local06
04f94     17 15 02 F6 | 	mov	arg02, local09
04f98     84 73 B1 FD | 	call	#__system___string_cmp
04f9c     FD 2C 0A F6 | 	mov	local08, result1 wz
04fa0     00 FA 05 56 |  if_ne	mov	result1, #0
04fa4     C0 00 90 5D |  if_ne	jmp	#LR__0412
04fa8                 | LR__0406
04fa8                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04fa8     5E 01 00 FF 
04fac     8E 15 06 F6 | 	mov	arg02, ##@LR__4865
04fb0     14 13 02 F6 | 	mov	arg01, local06
04fb4     68 73 B1 FD | 	call	#__system___string_cmp
04fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fbc     38 00 90 5D |  if_ne	jmp	#LR__0407
04fc0     18 15 02 F6 | 	mov	arg02, local10
04fc4     01 14 86 F1 | 	sub	arg02, #1
04fc8     0F 13 02 F6 | 	mov	arg01, local01
04fcc     01 16 06 F6 | 	mov	arg03, #1
04fd0     80 94 B1 FD | 	call	#__system__Mid_S
04fd4     FD 12 02 F6 | 	mov	arg01, result1
04fd8     70 96 B1 FD | 	call	#__system__LCase_S
04fdc     FD 12 02 F6 | 	mov	arg01, result1
04fe0     5E 01 00 FF 
04fe4     90 15 06 F6 | 	mov	arg02, ##@LR__4866
04fe8     34 73 B1 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     00 FA 05 56 |  if_ne	mov	result1, #0
04ff4     70 00 90 5D |  if_ne	jmp	#LR__0412
04ff8                 | LR__0407
04ff8                 | '     if m$="." then ds+=1: if ds>1 then return false
04ff8     5E 01 00 FF 
04ffc     92 15 06 F6 | 	mov	arg02, ##@LR__4867
05000     14 13 02 F6 | 	mov	arg01, local06
05004     18 73 B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     01 20 06 A1 |  if_e	add	local02, #1
05010     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05014     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05018     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0412
0501c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0501c     5E 01 00 FF 
05020     94 15 06 F6 | 	mov	arg02, ##@LR__4868
05024     14 13 02 F6 | 	mov	arg01, local06
05028     F4 72 B1 FD | 	call	#__system___string_cmp
0502c     00 FA 4D F2 | 	cmps	result1, #0 wz
05030     18 00 90 AD |  if_e	jmp	#LR__0408
05034     5E 01 00 FF 
05038     96 15 06 F6 | 	mov	arg02, ##@LR__4869
0503c     14 13 02 F6 | 	mov	arg01, local06
05040     DC 72 B1 FD | 	call	#__system___string_cmp
05044     00 FA 4D F2 | 	cmps	result1, #0 wz
05048     10 00 90 5D |  if_ne	jmp	#LR__0409
0504c                 | LR__0408
0504c     01 22 06 F1 | 	add	local03, #1
05050     02 22 56 F2 | 	cmps	local03, #2 wc
05054     00 FA 05 36 |  if_ae	mov	result1, #0
05058     0C 00 90 3D |  if_ae	jmp	#LR__0412
0505c                 | LR__0409
0505c     01 30 06 F1 | 	add	local10, #1
05060     60 FE 9F FD | 	jmp	#LR__0404
05064                 | LR__0410
05064                 | LR__0411
05064                 | ' return true
05064     01 FA 65 F6 | 	neg	result1, #1
05068                 | LR__0412
05068     A7 F0 03 F6 | 	mov	ptra, fp
0506c     B2 00 A0 FD | 	call	#popregs_
05070                 | _isnum_ret
05070     2D 00 64 FD | 	ret
05074                 | 
05074                 | '   
05074                 | ' function isint(s as string) as boolean
05074                 | _isint
05074     05 4A 05 F6 | 	mov	COUNT_, #5
05078     A8 00 A0 FD | 	call	#pushregs_
0507c     09 1F 02 F6 | 	mov	local01, arg01
05080     09 21 02 F6 | 	mov	local02, arg01
05084     97 06 48 FB | 	callpa	#(@LR__0421-@LR__0420)>>2,fcache_load_ptr_
05088                 | LR__0420
05088     10 FB C9 FA | 	rdbyte	result1, local02 wz
0508c     01 20 06 51 |  if_ne	add	local02, #1
05090     F4 FF 9F 5D |  if_ne	jmp	#LR__0420
05094                 | LR__0421
05094     09 21 82 F1 | 	sub	local02, arg01
05098     10 FB 01 F6 | 	mov	result1, local02
0509c     FD 20 0A F6 | 	mov	local02, result1 wz
050a0     00 FA 05 A6 |  if_e	mov	result1, #0
050a4     18 01 90 AD |  if_e	jmp	#LR__0429
050a8     0F 13 02 F6 | 	mov	arg01, local01
050ac     01 14 06 F6 | 	mov	arg02, #1
050b0     01 16 06 F6 | 	mov	arg03, #1
050b4     9C 93 B1 FD | 	call	#__system__Mid_S
050b8     FD 22 02 F6 | 	mov	local03, result1
050bc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
050bc     5E 01 00 FF 
050c0     98 15 06 F6 | 	mov	arg02, ##@LR__4870
050c4     11 13 02 F6 | 	mov	arg01, local03
050c8     54 72 B1 FD | 	call	#__system___string_cmp
050cc     00 FA 55 F2 | 	cmps	result1, #0 wc
050d0     18 00 90 CD |  if_b	jmp	#LR__0422
050d4     5E 01 00 FF 
050d8     9A 15 06 F6 | 	mov	arg02, ##@LR__4871
050dc     11 13 02 F6 | 	mov	arg01, local03
050e0     3C 72 B1 FD | 	call	#__system___string_cmp
050e4     01 FA 55 F2 | 	cmps	result1, #1 wc
050e8     4C 00 90 CD |  if_b	jmp	#LR__0423
050ec                 | LR__0422
050ec     5E 01 00 FF 
050f0     9C 15 06 F6 | 	mov	arg02, ##@LR__4872
050f4     11 13 02 F6 | 	mov	arg01, local03
050f8     24 72 B1 FD | 	call	#__system___string_cmp
050fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05100     34 00 90 AD |  if_e	jmp	#LR__0423
05104     5E 01 00 FF 
05108     9E 15 06 F6 | 	mov	arg02, ##@LR__4873
0510c     11 13 02 F6 | 	mov	arg01, local03
05110     0C 72 B1 FD | 	call	#__system___string_cmp
05114     00 FA 0D F2 | 	cmp	result1, #0 wz
05118     1C 00 90 AD |  if_e	jmp	#LR__0423
0511c     5E 01 00 FF 
05120     A0 15 06 F6 | 	mov	arg02, ##@LR__4874
05124     11 13 02 F6 | 	mov	arg01, local03
05128     F4 71 B1 FD | 	call	#__system___string_cmp
0512c     00 FA 0D F2 | 	cmp	result1, #0 wz
05130     00 FA 05 56 |  if_ne	mov	result1, #0
05134     88 00 90 5D |  if_ne	jmp	#LR__0429
05138                 | LR__0423
05138                 | ' 
05138                 | ' if l>1 then 
05138     02 20 56 F2 | 	cmps	local02, #2 wc
0513c     7C 00 90 CD |  if_b	jmp	#LR__0428
05140                 | '   for i=2 to l
05140     02 24 06 F6 | 	mov	local04, #2
05144     10 27 02 F6 | 	mov	local05, local02
05148     01 26 06 F1 | 	add	local05, #1
0514c                 | LR__0424
0514c     13 25 52 F2 | 	cmps	local04, local05 wc
05150     68 00 90 3D |  if_ae	jmp	#LR__0427
05154     0F 13 02 F6 | 	mov	arg01, local01
05158     12 15 02 F6 | 	mov	arg02, local04
0515c     01 16 06 F6 | 	mov	arg03, #1
05160     F0 92 B1 FD | 	call	#__system__Mid_S
05164     FD 22 02 F6 | 	mov	local03, result1
05168                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05168     5E 01 00 FF 
0516c     A2 15 06 F6 | 	mov	arg02, ##@LR__4875
05170     11 13 02 F6 | 	mov	arg01, local03
05174     A8 71 B1 FD | 	call	#__system___string_cmp
05178     00 FA 55 F2 | 	cmps	result1, #0 wc
0517c     18 00 90 CD |  if_b	jmp	#LR__0425
05180     5E 01 00 FF 
05184     A4 15 06 F6 | 	mov	arg02, ##@LR__4876
05188     11 13 02 F6 | 	mov	arg01, local03
0518c     90 71 B1 FD | 	call	#__system___string_cmp
05190     01 FA 55 F2 | 	cmps	result1, #1 wc
05194     1C 00 90 CD |  if_b	jmp	#LR__0426
05198                 | LR__0425
05198     5E 01 00 FF 
0519c     A6 15 06 F6 | 	mov	arg02, ##@LR__4877
051a0     11 13 02 F6 | 	mov	arg01, local03
051a4     78 71 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     00 FA 05 56 |  if_ne	mov	result1, #0
051b0     0C 00 90 5D |  if_ne	jmp	#LR__0429
051b4                 | LR__0426
051b4     01 24 06 F1 | 	add	local04, #1
051b8     90 FF 9F FD | 	jmp	#LR__0424
051bc                 | LR__0427
051bc                 | LR__0428
051bc                 | ' return true
051bc     01 FA 65 F6 | 	neg	result1, #1
051c0                 | LR__0429
051c0     A7 F0 03 F6 | 	mov	ptra, fp
051c4     B2 00 A0 FD | 	call	#popregs_
051c8                 | _isint_ret
051c8     2D 00 64 FD | 	ret
051cc                 | 
051cc                 | ' 
051cc                 | ' function isdec(s as string) as boolean
051cc                 | _isdec
051cc     05 4A 05 F6 | 	mov	COUNT_, #5
051d0     A8 00 A0 FD | 	call	#pushregs_
051d4     09 1F 02 F6 | 	mov	local01, arg01
051d8     09 21 02 F6 | 	mov	local02, arg01
051dc     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
051e0                 | LR__0430
051e0     10 FB C9 FA | 	rdbyte	result1, local02 wz
051e4     01 20 06 51 |  if_ne	add	local02, #1
051e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
051ec                 | LR__0431
051ec     09 21 82 F1 | 	sub	local02, arg01
051f0     10 FB 01 F6 | 	mov	result1, local02
051f4     FD 20 0A F6 | 	mov	local02, result1 wz
051f8     00 FA 05 A6 |  if_e	mov	result1, #0
051fc     80 00 90 AD |  if_e	jmp	#LR__0436
05200                 | ' for i=1 to l
05200     01 22 06 F6 | 	mov	local03, #1
05204     10 25 02 F6 | 	mov	local04, local02
05208     01 24 06 F1 | 	add	local04, #1
0520c                 | LR__0432
0520c     12 23 52 F2 | 	cmps	local03, local04 wc
05210     68 00 90 3D |  if_ae	jmp	#LR__0435
05214     0F 13 02 F6 | 	mov	arg01, local01
05218     11 15 02 F6 | 	mov	arg02, local03
0521c     01 16 06 F6 | 	mov	arg03, #1
05220     30 92 B1 FD | 	call	#__system__Mid_S
05224     FD 26 02 F6 | 	mov	local05, result1
05228                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05228     5E 01 00 FF 
0522c     A8 15 06 F6 | 	mov	arg02, ##@LR__4878
05230     13 13 02 F6 | 	mov	arg01, local05
05234     E8 70 B1 FD | 	call	#__system___string_cmp
05238     00 FA 55 F2 | 	cmps	result1, #0 wc
0523c     18 00 90 CD |  if_b	jmp	#LR__0433
05240     5E 01 00 FF 
05244     AA 15 06 F6 | 	mov	arg02, ##@LR__4879
05248     13 13 02 F6 | 	mov	arg01, local05
0524c     D0 70 B1 FD | 	call	#__system___string_cmp
05250     01 FA 55 F2 | 	cmps	result1, #1 wc
05254     1C 00 90 CD |  if_b	jmp	#LR__0434
05258                 | LR__0433
05258     5E 01 00 FF 
0525c     AC 15 06 F6 | 	mov	arg02, ##@LR__4880
05260     13 13 02 F6 | 	mov	arg01, local05
05264     B8 70 B1 FD | 	call	#__system___string_cmp
05268     00 FA 0D F2 | 	cmp	result1, #0 wz
0526c     00 FA 05 56 |  if_ne	mov	result1, #0
05270     0C 00 90 5D |  if_ne	jmp	#LR__0436
05274                 | LR__0434
05274     01 22 06 F1 | 	add	local03, #1
05278     90 FF 9F FD | 	jmp	#LR__0432
0527c                 | LR__0435
0527c                 | ' return true
0527c     01 FA 65 F6 | 	neg	result1, #1
05280                 | LR__0436
05280     A7 F0 03 F6 | 	mov	ptra, fp
05284     B2 00 A0 FD | 	call	#popregs_
05288                 | _isdec_ret
05288     2D 00 64 FD | 	ret
0528c                 | 
0528c                 | ' 
0528c                 | ' function isstring(s as string) as boolean
0528c                 | _isstring
0528c     01 4A 05 F6 | 	mov	COUNT_, #1
05290     A8 00 A0 FD | 	call	#pushregs_
05294                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
05294     09 1F 02 F6 | 	mov	local01, arg01
05298     01 14 06 F6 | 	mov	arg02, #1
0529c     9C 90 B1 FD | 	call	#__system__Left_S
052a0     FD 12 02 F6 | 	mov	arg01, result1
052a4     5E 01 00 FF 
052a8     AE 15 06 F6 | 	mov	arg02, ##@LR__4881
052ac     70 70 B1 FD | 	call	#__system___string_cmp
052b0     00 FA 4D F2 | 	cmps	result1, #0 wz
052b4     28 00 90 5D |  if_ne	jmp	#LR__0440
052b8     0F 13 02 F6 | 	mov	arg01, local01
052bc     01 14 06 F6 | 	mov	arg02, #1
052c0     00 91 B1 FD | 	call	#__system__Right_S
052c4     FD 12 02 F6 | 	mov	arg01, result1
052c8     5E 01 00 FF 
052cc     B0 15 06 F6 | 	mov	arg02, ##@LR__4882
052d0     4C 70 B1 FD | 	call	#__system___string_cmp
052d4     00 FA 4D F2 | 	cmps	result1, #0 wz
052d8     01 FA 65 A6 |  if_e	neg	result1, #1
052dc     04 00 90 AD |  if_e	jmp	#LR__0441
052e0                 | LR__0440
052e0     00 FA 05 F6 | 	mov	result1, #0
052e4                 | LR__0441
052e4     A7 F0 03 F6 | 	mov	ptra, fp
052e8     B2 00 A0 FD | 	call	#popregs_
052ec                 | _isstring_ret
052ec     2D 00 64 FD | 	ret
052f0                 | 
052f0                 | ' 
052f0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
052f0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052f0                 | ' 
052f0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052f0                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
052f0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052f0                 | ' 
052f0                 | ' '----- delete a line from a program
052f0                 | ' 
052f0                 | ' function deleteline(aline as ulong) as integer
052f0                 | _deleteline
052f0     03 4A 05 F6 | 	mov	COUNT_, #3
052f4     A8 00 A0 FD | 	call	#pushregs_
052f8     2C F0 07 F1 | 	add	ptra, #44
052fc     04 4E 05 F1 | 	add	fp, #4
05300     A7 12 62 FC | 	wrlong	arg01, fp
05304     6A 00 00 FF 
05308     68 E4 05 F1 | 	add	objptr, ##54376
0530c     F2 1E 02 FB | 	rdlong	local01, objptr
05310     0C 4E 05 F1 | 	add	fp, #12
05314     A7 1E 62 FC | 	wrlong	local01, fp
05318     10 4E 85 F1 | 	sub	fp, #16
0531c                 | ' 
0531c                 | ' 
0531c                 | ' searchptr=programstart
0531c                 | ' 
0531c                 | ' do
0531c     5E 00 00 FF 
05320     A8 E5 85 F1 | 	sub	objptr, ##48552
05324                 | LR__0450
05324     14 4E 05 F1 | 	add	fp, #20
05328     A7 12 02 F6 | 	mov	arg01, fp
0532c     04 4E 85 F1 | 	sub	fp, #4
05330     A7 14 02 FB | 	rdlong	arg02, fp
05334     10 4E 85 F1 | 	sub	fp, #16
05338     18 16 06 F6 | 	mov	arg03, #24
0533c     B4 63 B1 FD | 	call	#_psram_spin2_read1
05340     10 4E 05 F1 | 	add	fp, #16
05344     A7 1E 02 FB | 	rdlong	local01, fp
05348     08 4E 85 F1 | 	sub	fp, #8
0534c     A7 1E 62 FC | 	wrlong	local01, fp
05350     20 4E 05 F1 | 	add	fp, #32
05354     A7 1E 02 FB | 	rdlong	local01, fp
05358     18 4E 85 F1 | 	sub	fp, #24
0535c     A7 1E 62 FC | 	wrlong	local01, fp
05360     04 4E 05 F1 | 	add	fp, #4
05364     A7 1E 02 FB | 	rdlong	local01, fp
05368     10 4E 85 F1 | 	sub	fp, #16
0536c     A7 16 02 FB | 	rdlong	arg03, fp
05370     04 4E 85 F1 | 	sub	fp, #4
05374     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05378     28 4E 05 C1 |  if_b	add	fp, #40
0537c     A7 20 02 CB |  if_b	rdlong	local02, fp
05380     28 4E 85 C1 |  if_b	sub	fp, #40
05384     FF FF 3F CF 
05388     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0538c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0450
05390     0B 00 00 FF 
05394     C0 E4 85 F1 | 	sub	objptr, ##5824
05398                 | ' 
05398                 | ' 
05398                 | ' if header(0)<>aline then return -1
05398     14 4E 05 F1 | 	add	fp, #20
0539c     A7 1E 02 FB | 	rdlong	local01, fp
053a0     10 4E 85 F1 | 	sub	fp, #16
053a4     A7 22 02 FB | 	rdlong	local03, fp
053a8     04 4E 85 F1 | 	sub	fp, #4
053ac     11 1F 0A F2 | 	cmp	local01, local03 wz
053b0     01 FA 65 56 |  if_ne	neg	result1, #1
053b4     C8 02 90 5D |  if_ne	jmp	#LR__0456
053b8     08 4E 05 F1 | 	add	fp, #8
053bc     A7 12 02 FB | 	rdlong	arg01, fp
053c0     08 4E 85 F1 | 	sub	fp, #8
053c4     01 14 66 F6 | 	neg	arg02, #1
053c8     F0 38 B1 FD | 	call	#_pslpoke
053cc                 | ' 
053cc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
053cc                 | ' 
053cc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
053cc     28 4E 05 F1 | 	add	fp, #40
053d0     A7 1E 02 FB | 	rdlong	local01, fp
053d4     28 4E 85 F1 | 	sub	fp, #40
053d8     FF FF 3F FF 
053dc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
053e0     24 4E 05 A1 |  if_e	add	fp, #36
053e4     A7 22 02 AB |  if_e	rdlong	local03, fp
053e8     24 4E 85 A1 |  if_e	sub	fp, #36
053ec     FF FF 7F AF 
053f0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
053f4     78 00 90 5D |  if_ne	jmp	#LR__0451
053f8     6A 00 00 FF 
053fc     68 E4 05 F1 | 	add	objptr, ##54376
05400     F2 00 68 FC | 	wrlong	#0, objptr
05404     07 00 00 FF 
05408     28 E4 85 F1 | 	sub	objptr, ##3624
0540c     F2 00 68 FC | 	wrlong	#0, objptr
05410     07 00 00 FF 
05414     2C E4 05 F1 | 	add	objptr, ##3628
05418     F2 00 68 FC | 	wrlong	#0, objptr
0541c     04 E4 05 F1 | 	add	objptr, #4
05420     FF FF FF FF 
05424     F2 FE 6B FC | 	wrlong	##-1, objptr
05428     6A 00 00 FF 
0542c     70 E4 85 F1 | 	sub	objptr, ##54384
05430     00 12 06 F6 | 	mov	arg01, #0
05434     01 14 66 F6 | 	neg	arg02, #1
05438     80 38 B1 FD | 	call	#_pslpoke
0543c     10 12 06 F6 | 	mov	arg01, #16
05440     01 14 66 F6 | 	neg	arg02, #1
05444     74 38 B1 FD | 	call	#_pslpoke
05448     14 12 06 F6 | 	mov	arg01, #20
0544c     1E 14 CE F9 | 	bmask	arg02, #30
05450     68 38 B1 FD | 	call	#_pslpoke
05454     79 00 00 FF 
05458     94 E5 05 F1 | 	add	objptr, ##62356
0545c     F2 00 68 FC | 	wrlong	#0, objptr
05460     04 E4 05 F1 | 	add	objptr, #4
05464     F2 00 68 FC | 	wrlong	#0, objptr
05468     79 00 00 FF 
0546c     98 E5 85 F1 | 	sub	objptr, ##62360
05470                 | LR__0451
05470                 | ' 
05470                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05470     28 4E 05 F1 | 	add	fp, #40
05474     A7 1E 02 FB | 	rdlong	local01, fp
05478     28 4E 85 F1 | 	sub	fp, #40
0547c     FF FF 3F FF 
05480     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05484     74 00 90 5D |  if_ne	jmp	#LR__0452
05488     24 4E 05 F1 | 	add	fp, #36
0548c     A7 22 02 FB | 	rdlong	local03, fp
05490     24 4E 85 F1 | 	sub	fp, #36
05494     FF FF 7F FF 
05498     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0549c     5C 00 90 AD |  if_e	jmp	#LR__0452
054a0     24 4E 05 F1 | 	add	fp, #36
054a4     A7 12 02 FB | 	rdlong	arg01, fp
054a8     24 4E 85 F1 | 	sub	fp, #36
054ac     14 12 06 F1 | 	add	arg01, #20
054b0     1E 14 CE F9 | 	bmask	arg02, #30
054b4     04 38 B1 FD | 	call	#_pslpoke
054b8     24 4E 05 F1 | 	add	fp, #36
054bc     A7 1E 02 FB | 	rdlong	local01, fp
054c0     6A 00 00 FF 
054c4     70 E4 05 F1 | 	add	objptr, ##54384
054c8     F2 1E 62 FC | 	wrlong	local01, objptr
054cc     6A 00 00 FF 
054d0     70 E4 85 F1 | 	sub	objptr, ##54384
054d4     A7 12 02 FB | 	rdlong	arg01, fp
054d8     24 4E 85 F1 | 	sub	fp, #36
054dc     0C 39 B1 FD | 	call	#_pslpeek
054e0     6A 00 00 FF 
054e4     6C E4 05 F1 | 	add	objptr, ##54380
054e8     F2 FA 61 FC | 	wrlong	result1, objptr
054ec     6A 00 00 FF 
054f0     6C E4 85 F1 | 	sub	objptr, ##54380
054f4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
054f4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
054f4                 | '   lastline=pslpeek(header(4))
054f4                 | '   return 0
054f4     00 FA 05 F6 | 	mov	result1, #0
054f8     84 01 90 FD | 	jmp	#LR__0456
054fc                 | LR__0452
054fc                 | ' 
054fc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
054fc     28 4E 05 F1 | 	add	fp, #40
05500     A7 1E 02 FB | 	rdlong	local01, fp
05504     28 4E 85 F1 | 	sub	fp, #40
05508     FF FF 3F FF 
0550c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05510     58 00 90 AD |  if_e	jmp	#LR__0453
05514     24 4E 05 F1 | 	add	fp, #36
05518     A7 22 02 FB | 	rdlong	local03, fp
0551c     24 4E 85 F1 | 	sub	fp, #36
05520     FF FF 7F FF 
05524     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05528     40 00 90 5D |  if_ne	jmp	#LR__0453
0552c     28 4E 05 F1 | 	add	fp, #40
05530     A7 12 02 FB | 	rdlong	arg01, fp
05534     28 4E 85 F1 | 	sub	fp, #40
05538     10 12 06 F1 | 	add	arg01, #16
0553c     01 14 66 F6 | 	neg	arg02, #1
05540     78 37 B1 FD | 	call	#_pslpoke
05544     28 4E 05 F1 | 	add	fp, #40
05548     A7 1E 02 FB | 	rdlong	local01, fp
0554c     28 4E 85 F1 | 	sub	fp, #40
05550     6A 00 00 FF 
05554     68 E4 05 F1 | 	add	objptr, ##54376
05558     F2 1E 62 FC | 	wrlong	local01, objptr
0555c     6A 00 00 FF 
05560     68 E4 85 F1 | 	sub	objptr, ##54376
05564                 | ' '   print "deleted first line"
05564                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05564                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05564                 | '   return 0
05564     00 FA 05 F6 | 	mov	result1, #0
05568     14 01 90 FD | 	jmp	#LR__0456
0556c                 | LR__0453
0556c                 | ' 
0556c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0556c     28 4E 05 F1 | 	add	fp, #40
05570     A7 1E 02 FB | 	rdlong	local01, fp
05574     28 4E 85 F1 | 	sub	fp, #40
05578     FF FF 3F FF 
0557c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05580     24 4E 05 51 |  if_ne	add	fp, #36
05584     A7 22 02 5B |  if_ne	rdlong	local03, fp
05588     24 4E 85 51 |  if_ne	sub	fp, #36
0558c     FF FF 7F 5F 
05590     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05594     40 00 90 AD |  if_e	jmp	#LR__0454
05598     28 4E 05 F1 | 	add	fp, #40
0559c     A7 12 02 FB | 	rdlong	arg01, fp
055a0     10 12 06 F1 | 	add	arg01, #16
055a4     04 4E 85 F1 | 	sub	fp, #4
055a8     A7 14 02 FB | 	rdlong	arg02, fp
055ac     24 4E 85 F1 | 	sub	fp, #36
055b0     08 37 B1 FD | 	call	#_pslpoke
055b4     24 4E 05 F1 | 	add	fp, #36
055b8     A7 12 02 FB | 	rdlong	arg01, fp
055bc     14 12 06 F1 | 	add	arg01, #20
055c0     04 4E 05 F1 | 	add	fp, #4
055c4     A7 14 02 FB | 	rdlong	arg02, fp
055c8     28 4E 85 F1 | 	sub	fp, #40
055cc     EC 36 B1 FD | 	call	#_pslpoke
055d0                 | '    pslpoke(header(5)+16,header(4))  
055d0                 | '    pslpoke(header(4)+20, header(5))
055d0                 | '    return 0
055d0     00 FA 05 F6 | 	mov	result1, #0
055d4     A8 00 90 FD | 	jmp	#LR__0456
055d8                 | LR__0454
055d8     10 4E 05 F1 | 	add	fp, #16
055dc     A7 1E 02 FB | 	rdlong	local01, fp
055e0     08 4E 85 F1 | 	sub	fp, #8
055e4     A7 1E 62 FC | 	wrlong	local01, fp
055e8     6A 00 00 FF 
055ec     68 E4 05 F1 | 	add	objptr, ##54376
055f0     F2 1E 02 FB | 	rdlong	local01, objptr
055f4     08 4E 05 F1 | 	add	fp, #8
055f8     A7 1E 62 FC | 	wrlong	local01, fp
055fc     10 4E 85 F1 | 	sub	fp, #16
05600                 | ' 
05600                 | ' 
05600                 | ' 
05600                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05600                 | ' 
05600                 | ' lineptr2=searchptr
05600                 | ' searchptr=programstart
05600                 | ' 
05600                 | ' do
05600     5E 00 00 FF 
05604     A8 E5 85 F1 | 	sub	objptr, ##48552
05608                 | LR__0455
05608     14 4E 05 F1 | 	add	fp, #20
0560c     A7 12 02 F6 | 	mov	arg01, fp
05610     04 4E 85 F1 | 	sub	fp, #4
05614     A7 14 02 FB | 	rdlong	arg02, fp
05618     10 4E 85 F1 | 	sub	fp, #16
0561c     18 16 06 F6 | 	mov	arg03, #24
05620     D0 60 B1 FD | 	call	#_psram_spin2_read1
05624     10 4E 05 F1 | 	add	fp, #16
05628     A7 1E 02 FB | 	rdlong	local01, fp
0562c     08 4E 85 F1 | 	sub	fp, #8
05630     A7 1E 62 FC | 	wrlong	local01, fp
05634     20 4E 05 F1 | 	add	fp, #32
05638     A7 1E 02 FB | 	rdlong	local01, fp
0563c     18 4E 85 F1 | 	sub	fp, #24
05640     A7 1E 62 FC | 	wrlong	local01, fp
05644     04 4E 05 F1 | 	add	fp, #4
05648     A7 1E 02 FB | 	rdlong	local01, fp
0564c     10 4E 85 F1 | 	sub	fp, #16
05650     A7 22 02 FB | 	rdlong	local03, fp
05654     04 4E 85 F1 | 	sub	fp, #4
05658     11 1F 12 F2 | 	cmp	local01, local03 wc
0565c     28 4E 05 C1 |  if_b	add	fp, #40
05660     A7 20 02 CB |  if_b	rdlong	local02, fp
05664     28 4E 85 C1 |  if_b	sub	fp, #40
05668     FF FF 3F CF 
0566c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05670     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0455
05674     0B 00 00 FF 
05678     C0 E4 85 F1 | 	sub	objptr, ##5824
0567c     00 FA 05 F6 | 	mov	result1, #0
05680                 | LR__0456
05680     A7 F0 03 F6 | 	mov	ptra, fp
05684     B2 00 A0 FD | 	call	#popregs_
05688                 | _deleteline_ret
05688     2D 00 64 FD | 	ret
0568c                 | 
0568c                 | ' 
0568c                 | ' sub save_line
0568c                 | _save_line
0568c     03 4A 05 F6 | 	mov	COUNT_, #3
05690     A8 00 A0 FD | 	call	#pushregs_
05694     6A 00 00 FF 
05698     60 E4 05 F1 | 	add	objptr, ##54368
0569c     F2 16 02 FB | 	rdlong	arg03, objptr
056a0     01 16 06 F1 | 	add	arg03, #1
056a4     05 00 00 FF 
056a8     18 E4 85 F1 | 	sub	objptr, ##2584
056ac     F2 14 02 FB | 	rdlong	arg02, objptr
056b0     0B 15 02 FD | 	qmul	arg02, arg03
056b4     0E 00 00 FF 
056b8     44 E4 85 F1 | 	sub	objptr, ##7236
056bc     F2 12 02 FB | 	rdlong	arg01, objptr
056c0     57 00 00 FF 
056c4     04 E4 85 F1 | 	sub	objptr, ##44548
056c8     09 1F 02 F6 | 	mov	local01, arg01
056cc     18 20 62 FD | 	getqx	local02
056d0     97 06 48 FB | 	callpa	#(@LR__0461-@LR__0460)>>2,fcache_load_ptr_
056d4                 | LR__0460
056d4     0F FB C9 FA | 	rdbyte	result1, local01 wz
056d8     01 1E 06 51 |  if_ne	add	local01, #1
056dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0460
056e0                 | LR__0461
056e0     09 1F 82 F1 | 	sub	local01, arg01
056e4     03 1E CE F7 | 	test	local01, #3 wz
056e8     02 1E 46 50 |  if_ne	shr	local01, #2
056ec     01 1E 06 51 |  if_ne	add	local01, #1
056f0     02 1E 66 50 |  if_ne	shl	local01, #2
056f4     10 23 02 F6 | 	mov	local03, local02
056f8     0F 23 02 F1 | 	add	local03, local01
056fc     63 00 00 FF 
05700     40 E4 05 F1 | 	add	objptr, ##50752
05704     F2 16 02 FB | 	rdlong	arg03, objptr
05708     10 17 02 F1 | 	add	arg03, local02
0570c     04 00 00 FF 
05710     28 E4 05 F1 | 	add	objptr, ##2088
05714     F2 16 62 FC | 	wrlong	arg03, objptr
05718     04 E4 05 F1 | 	add	objptr, #4
0571c     F2 1E 62 FC | 	wrlong	local01, objptr
05720     0C E4 85 F1 | 	sub	objptr, #12
05724     F2 12 02 F6 | 	mov	arg01, objptr
05728     04 00 00 FF 
0572c     20 E4 85 F1 | 	sub	objptr, ##2080
05730     F2 14 02 FB | 	rdlong	arg02, objptr
05734     10 17 02 F6 | 	mov	arg03, local02
05738     57 00 00 FF 
0573c     80 E5 85 F1 | 	sub	objptr, ##44928
05740     4C 60 B1 FD | 	call	#_psram_spin2_write
05744     4B 00 00 FF 
05748     44 E5 05 F1 | 	add	objptr, ##38724
0574c     F2 12 02 FB | 	rdlong	arg01, objptr
05750     0C 00 00 FF 
05754     3C E4 05 F1 | 	add	objptr, ##6204
05758     F2 14 02 FB | 	rdlong	arg02, objptr
0575c     10 15 02 F1 | 	add	arg02, local02
05760     0F 17 02 F6 | 	mov	arg03, local01
05764     57 00 00 FF 
05768     80 E5 85 F1 | 	sub	objptr, ##44928
0576c     20 60 B1 FD | 	call	#_psram_spin2_write
05770     57 00 00 FF 
05774     80 E5 05 F1 | 	add	objptr, ##44928
05778     F2 1E 02 FB | 	rdlong	local01, objptr
0577c     11 1F 02 F1 | 	add	local01, local03
05780     F2 1E 62 FC | 	wrlong	local01, objptr
05784     63 00 00 FF 
05788     40 E4 85 F1 | 	sub	objptr, ##50752
0578c     A7 F0 03 F6 | 	mov	ptra, fp
05790     B2 00 A0 FD | 	call	#popregs_
05794                 | _save_line_ret
05794     2D 00 64 FD | 	ret
05798                 | 
05798                 | ' 
05798                 | ' 
05798                 | ' function insertline(aline as ulong) as integer
05798                 | _insertline
05798     02 4A 05 F6 | 	mov	COUNT_, #2
0579c     A8 00 A0 FD | 	call	#pushregs_
057a0     28 F0 07 F1 | 	add	ptra, #40
057a4     04 4E 05 F1 | 	add	fp, #4
057a8     A7 12 62 FC | 	wrlong	arg01, fp
057ac     6A 00 00 FF 
057b0     68 E4 05 F1 | 	add	objptr, ##54376
057b4     F2 1E 02 FB | 	rdlong	local01, objptr
057b8     04 4E 05 F1 | 	add	fp, #4
057bc     A7 1E 62 FC | 	wrlong	local01, fp
057c0     08 4E 85 F1 | 	sub	fp, #8
057c4                 | ' 
057c4                 | ' do
057c4     5E 00 00 FF 
057c8     A8 E5 85 F1 | 	sub	objptr, ##48552
057cc                 | LR__0470
057cc     10 4E 05 F1 | 	add	fp, #16
057d0     A7 12 02 F6 | 	mov	arg01, fp
057d4     08 4E 85 F1 | 	sub	fp, #8
057d8     A7 14 02 FB | 	rdlong	arg02, fp
057dc     08 4E 85 F1 | 	sub	fp, #8
057e0     18 16 06 F6 | 	mov	arg03, #24
057e4     0C 5F B1 FD | 	call	#_psram_spin2_read1
057e8     08 4E 05 F1 | 	add	fp, #8
057ec     A7 1E 02 FB | 	rdlong	local01, fp
057f0     04 4E 05 F1 | 	add	fp, #4
057f4     A7 1E 62 FC | 	wrlong	local01, fp
057f8     18 4E 05 F1 | 	add	fp, #24
057fc     A7 1E 02 FB | 	rdlong	local01, fp
05800     1C 4E 85 F1 | 	sub	fp, #28
05804     A7 1E 62 FC | 	wrlong	local01, fp
05808     08 4E 05 F1 | 	add	fp, #8
0580c     A7 1E 02 FB | 	rdlong	local01, fp
05810     0C 4E 85 F1 | 	sub	fp, #12
05814     A7 16 02 FB | 	rdlong	arg03, fp
05818     04 4E 85 F1 | 	sub	fp, #4
0581c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05820     24 4E 05 C1 |  if_b	add	fp, #36
05824     A7 20 02 CB |  if_b	rdlong	local02, fp
05828     24 4E 85 C1 |  if_b	sub	fp, #36
0582c     FF FF 3F CF 
05830     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05834     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0470
05838     0B 00 00 FF 
0583c     C0 E4 85 F1 | 	sub	objptr, ##5824
05840                 | ' 
05840                 | ' if header(0)=aline then return -1 ' delete it first
05840     10 4E 05 F1 | 	add	fp, #16
05844     A7 1E 02 FB | 	rdlong	local01, fp
05848     0C 4E 85 F1 | 	sub	fp, #12
0584c     A7 20 02 FB | 	rdlong	local02, fp
05850     04 4E 85 F1 | 	sub	fp, #4
05854     10 1F 0A F2 | 	cmp	local01, local02 wz
05858     01 FA 65 A6 |  if_e	neg	result1, #1
0585c     48 01 90 AD |  if_e	jmp	#LR__0473
05860                 | ' if header(0)<aline then return -2 ' end of program reached
05860     10 4E 05 F1 | 	add	fp, #16
05864     A7 1E 02 FB | 	rdlong	local01, fp
05868     0C 4E 85 F1 | 	sub	fp, #12
0586c     A7 16 02 FB | 	rdlong	arg03, fp
05870     04 4E 85 F1 | 	sub	fp, #4
05874     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05878     02 FA 65 C6 |  if_b	neg	result1, #2
0587c     28 01 90 CD |  if_b	jmp	#LR__0473
05880                 | ' 
05880                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05880     20 4E 05 F1 | 	add	fp, #32
05884     A7 1E 02 FB | 	rdlong	local01, fp
05888     20 4E 85 F1 | 	sub	fp, #32
0588c     FF FF 7F FF 
05890     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05894     78 00 90 5D |  if_ne	jmp	#LR__0471
05898     63 00 00 FF 
0589c     40 E4 05 F1 | 	add	objptr, ##50752
058a0     F2 1E 02 FB | 	rdlong	local01, objptr
058a4     07 00 00 FF 
058a8     28 E4 05 F1 | 	add	objptr, ##3624
058ac     F2 1E 62 FC | 	wrlong	local01, objptr
058b0     0C 4E 05 F1 | 	add	fp, #12
058b4     A7 12 02 FB | 	rdlong	arg01, fp
058b8     0C 4E 85 F1 | 	sub	fp, #12
058bc     10 12 06 F1 | 	add	arg01, #16
058c0     07 00 00 FF 
058c4     28 E4 85 F1 | 	sub	objptr, ##3624
058c8     F2 14 02 FB | 	rdlong	arg02, objptr
058cc     63 00 00 FF 
058d0     40 E4 85 F1 | 	sub	objptr, ##50752
058d4     E4 33 B1 FD | 	call	#_pslpoke
058d8     67 00 00 FF 
058dc     70 E4 05 F1 | 	add	objptr, ##52848
058e0     FF FF FF FF 
058e4     F2 FE 6B FC | 	wrlong	##-1, objptr
058e8     0C 4E 05 F1 | 	add	fp, #12
058ec     A7 1E 02 FB | 	rdlong	local01, fp
058f0     0C 4E 85 F1 | 	sub	fp, #12
058f4     04 E4 05 F1 | 	add	objptr, #4
058f8     F2 1E 62 FC | 	wrlong	local01, objptr
058fc     67 00 00 FF 
05900     74 E4 85 F1 | 	sub	objptr, ##52852
05904     84 FD BF FD | 	call	#_save_line
05908                 | '   programstart=programptr
05908                 | '   pslpoke(lineptr2+16,programptr)
05908                 | '   ucompiledline(4)=$FFFF_FFFF
05908                 | '   ucompiledline(5)=lineptr2
05908                 | '   save_line
05908                 | '   return 0
05908     00 FA 05 F6 | 	mov	result1, #0
0590c     98 00 90 FD | 	jmp	#LR__0473
05910                 | LR__0471
05910                 | ' 
05910                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05910     20 4E 05 F1 | 	add	fp, #32
05914     A7 1E 02 FB | 	rdlong	local01, fp
05918     20 4E 85 F1 | 	sub	fp, #32
0591c     FF FF 7F FF 
05920     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05924     7C 00 90 AD |  if_e	jmp	#LR__0472
05928     20 4E 05 F1 | 	add	fp, #32
0592c     A7 1E 02 FB | 	rdlong	local01, fp
05930     67 00 00 FF 
05934     70 E4 05 F1 | 	add	objptr, ##52848
05938     F2 1E 62 FC | 	wrlong	local01, objptr
0593c     14 4E 85 F1 | 	sub	fp, #20
05940     A7 1E 02 FB | 	rdlong	local01, fp
05944     04 E4 05 F1 | 	add	objptr, #4
05948     F2 1E 62 FC | 	wrlong	local01, objptr
0594c     A7 12 02 FB | 	rdlong	arg01, fp
05950     0C 4E 85 F1 | 	sub	fp, #12
05954     10 12 06 F1 | 	add	arg01, #16
05958     04 00 00 FF 
0595c     34 E4 85 F1 | 	sub	objptr, ##2100
05960     F2 14 02 FB | 	rdlong	arg02, objptr
05964     63 00 00 FF 
05968     40 E4 85 F1 | 	sub	objptr, ##50752
0596c     4C 33 B1 FD | 	call	#_pslpoke
05970     20 4E 05 F1 | 	add	fp, #32
05974     A7 12 02 FB | 	rdlong	arg01, fp
05978     20 4E 85 F1 | 	sub	fp, #32
0597c     14 12 06 F1 | 	add	arg01, #20
05980     63 00 00 FF 
05984     40 E4 05 F1 | 	add	objptr, ##50752
05988     F2 14 02 FB | 	rdlong	arg02, objptr
0598c     63 00 00 FF 
05990     40 E4 85 F1 | 	sub	objptr, ##50752
05994     24 33 B1 FD | 	call	#_pslpoke
05998     F0 FC BF FD | 	call	#_save_line
0599c                 | '   ucompiledline(4)=header(4)
0599c                 | '   ucompiledline(5)=lineptr2
0599c                 | '   pslpoke(lineptr2+16,programptr)
0599c                 | '   pslpoke(header(4)+20,programptr)
0599c                 | '   save_line
0599c                 | '   return 0
0599c     00 FA 05 F6 | 	mov	result1, #0
059a0     04 00 90 FD | 	jmp	#LR__0473
059a4                 | LR__0472
059a4     00 FA 05 F6 | 	mov	result1, #0
059a8                 | LR__0473
059a8     A7 F0 03 F6 | 	mov	ptra, fp
059ac     B2 00 A0 FD | 	call	#popregs_
059b0                 | _insertline_ret
059b0     2D 00 64 FD | 	ret
059b4                 | 
059b4                 | ' 
059b4                 | ' sub add_line_at_end(aline) 
059b4                 | _add_line_at_end
059b4     6A 00 00 FF 
059b8     6C E4 05 F1 | 	add	objptr, ##54380
059bc     F2 12 62 FC | 	wrlong	arg01, objptr
059c0     04 E4 05 F1 | 	add	objptr, #4
059c4     F2 14 02 FB | 	rdlong	arg02, objptr
059c8     03 00 00 FF 
059cc     00 E4 85 F1 | 	sub	objptr, ##1536
059d0     F2 14 62 FC | 	wrlong	arg02, objptr
059d4     03 00 00 FF 
059d8     00 E4 05 F1 | 	add	objptr, ##1536
059dc     F2 12 02 FB | 	rdlong	arg01, objptr
059e0     14 12 06 F1 | 	add	arg01, #20
059e4     07 00 00 FF 
059e8     30 E4 85 F1 | 	sub	objptr, ##3632
059ec     F2 14 02 FB | 	rdlong	arg02, objptr
059f0     63 00 00 FF 
059f4     40 E4 85 F1 | 	sub	objptr, ##50752
059f8     C0 32 B1 FD | 	call	#_pslpoke
059fc     63 00 00 FF 
05a00     40 E4 05 F1 | 	add	objptr, ##50752
05a04     F2 14 02 FB | 	rdlong	arg02, objptr
05a08     07 00 00 FF 
05a0c     30 E4 05 F1 | 	add	objptr, ##3632
05a10     F2 14 62 FC | 	wrlong	arg02, objptr
05a14     02 00 00 FF 
05a18     FC E5 85 F1 | 	sub	objptr, ##1532
05a1c     FF FF BF FF 
05a20     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05a24                 | ' 
05a24                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05a24                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05a24     04 00 00 FF 
05a28     34 E4 85 F1 | 	sub	objptr, ##2100
05a2c     F2 14 0A FB | 	rdlong	arg02, objptr wz
05a30     63 00 00 FF 
05a34     40 E4 85 F1 | 	sub	objptr, ##50752
05a38     67 00 00 AF 
05a3c     70 E4 05 A1 |  if_e	add	objptr, ##52848
05a40     FF FF FF AF 
05a44     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05a48     67 00 00 AF 
05a4c     70 E4 85 A1 |  if_e	sub	objptr, ##52848
05a50     38 FC BF FD | 	call	#_save_line
05a54     63 00 00 FF 
05a58     40 E4 05 F1 | 	add	objptr, ##50752
05a5c     F2 12 02 FB | 	rdlong	arg01, objptr
05a60     63 00 00 FF 
05a64     40 E4 85 F1 | 	sub	objptr, ##50752
05a68     01 14 66 F6 | 	neg	arg02, #1
05a6c     4C 32 B1 FD | 	call	#_pslpoke
05a70                 | _add_line_at_end_ret
05a70     2D 00 64 FD | 	ret
05a74                 | 
05a74                 | ' 
05a74                 | ' function compile_immediate(linetype as ulong) as integer
05a74                 | _compile_immediate
05a74     09 4A 05 F6 | 	mov	COUNT_, #9
05a78     A8 00 A0 FD | 	call	#pushregs_
05a7c                 | _compile_immediate_enter
05a7c     09 25 0A F6 | 	mov	local04, arg01 wz
05a80     00 26 06 F6 | 	mov	local05, #0
05a84     00 28 06 F6 | 	mov	local06, #0
05a88                 | ' 
05a88                 | ' ' linetype=cont+1, linetype=0 immediate
05a88                 | ' '  : 1: this is the first part of the line that will continue
05a88                 | ' ' 2 - this is the continuation of the line
05a88                 | ' ' 3 - this is the last continued line
05a88                 | ' ' 4 - this is the one and only part
05a88                 | ' 
05a88                 | ' err=0
05a88                 | ' cmd=0
05a88                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05a88     30 00 90 5D |  if_ne	jmp	#LR__0480
05a8c     54 00 00 FF 
05a90     F4 E5 05 F1 | 	add	objptr, ##43508
05a94     F2 28 02 FB | 	rdlong	local06, objptr
05a98     02 00 00 FF 
05a9c     34 E4 05 F1 | 	add	objptr, ##1076
05aa0     F2 02 68 FC | 	wrlong	#1, objptr
05aa4     00 2A 06 F6 | 	mov	local07, #0
05aa8     13 00 00 FF 
05aac     38 E4 05 F1 | 	add	objptr, ##9784
05ab0     F2 00 68 FC | 	wrlong	#0, objptr
05ab4     6A 00 00 FF 
05ab8     60 E4 85 F1 | 	sub	objptr, ##54368
05abc                 | LR__0480
05abc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05abc     02 24 0E F2 | 	cmp	local04, #2 wz
05ac0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05ac4     24 00 90 5D |  if_ne	jmp	#LR__0481
05ac8     54 00 00 FF 
05acc     F4 E5 05 F1 | 	add	objptr, ##43508
05ad0     F2 28 02 FB | 	rdlong	local06, objptr
05ad4     01 2A 06 F6 | 	mov	local07, #1
05ad8     02 00 00 FF 
05adc     34 E4 05 F1 | 	add	objptr, ##1076
05ae0     F2 02 68 FC | 	wrlong	#1, objptr
05ae4     57 00 00 FF 
05ae8     28 E4 85 F1 | 	sub	objptr, ##44584
05aec                 | LR__0481
05aec                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05aec     04 24 0E F2 | 	cmp	local04, #4 wz
05af0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05af4     30 00 90 5D |  if_ne	jmp	#LR__0482
05af8     54 00 00 FF 
05afc     FC E5 05 F1 | 	add	objptr, ##43516
05b00     F2 28 02 FB | 	rdlong	local06, objptr
05b04     02 2A 06 F6 | 	mov	local07, #2
05b08     02 00 00 FF 
05b0c     2C E4 05 F1 | 	add	objptr, ##1068
05b10     F2 04 68 FC | 	wrlong	#2, objptr
05b14     13 00 00 FF 
05b18     38 E4 05 F1 | 	add	objptr, ##9784
05b1c     F2 04 68 FC | 	wrlong	#2, objptr
05b20     6A 00 00 FF 
05b24     60 E4 85 F1 | 	sub	objptr, ##54368
05b28                 | LR__0482
05b28                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05b28     05 24 0E F2 | 	cmp	local04, #5 wz
05b2c     44 00 90 5D |  if_ne	jmp	#LR__0483
05b30     57 00 00 FF 
05b34     28 E4 05 F1 | 	add	objptr, ##44584
05b38     F2 FA 01 FB | 	rdlong	result1, objptr
05b3c     FD 2A 02 F6 | 	mov	local07, result1
05b40     03 2A 66 F0 | 	shl	local07, #3
05b44     02 00 00 FF 
05b48     38 E4 85 F1 | 	sub	objptr, ##1080
05b4c     F2 2A 02 F1 | 	add	local07, objptr
05b50     04 2A 06 F1 | 	add	local07, #4
05b54     15 29 02 FB | 	rdlong	local06, local07
05b58     FD 2A 02 F6 | 	mov	local07, result1
05b5c     01 2A 06 F1 | 	add	local07, #1
05b60     02 00 00 FF 
05b64     38 E4 05 F1 | 	add	objptr, ##1080
05b68     F2 2A 62 FC | 	wrlong	local07, objptr
05b6c     57 00 00 FF 
05b70     28 E4 85 F1 | 	sub	objptr, ##44584
05b74                 | LR__0483
05b74     00 2C 06 F6 | 	mov	local08, #0
05b78                 | ' vars=0
05b78                 | ' 'print  "In compile_immediate cmd=:", cmd
05b78                 | ' 451 select case cmd
05b78     5C 28 0E F2 | 	cmp	local06, #92 wz
05b7c     08 02 90 AD |  if_e	jmp	#LR__0484
05b80     47 28 0E F2 | 	cmp	local06, #71 wz
05b84     0C 02 90 AD |  if_e	jmp	#LR__0485
05b88     59 28 0E F2 | 	cmp	local06, #89 wz
05b8c     10 02 90 AD |  if_e	jmp	#LR__0486
05b90     45 28 0E F2 | 	cmp	local06, #69 wz
05b94     14 02 90 AD |  if_e	jmp	#LR__0487
05b98     69 28 0E F2 | 	cmp	local06, #105 wz
05b9c     18 02 90 AD |  if_e	jmp	#LR__0488
05ba0     40 28 0E F2 | 	cmp	local06, #64 wz
05ba4     84 04 90 AD |  if_e	jmp	#LR__0543
05ba8     49 28 0E F2 | 	cmp	local06, #73 wz
05bac     14 02 90 AD |  if_e	jmp	#LR__0489
05bb0     50 28 0E F2 | 	cmp	local06, #80 wz
05bb4     18 02 90 AD |  if_e	jmp	#LR__0490
05bb8     68 28 0E F2 | 	cmp	local06, #104 wz
05bbc     1C 02 90 AD |  if_e	jmp	#LR__0491
05bc0     74 28 0E F2 | 	cmp	local06, #116 wz
05bc4     20 02 90 AD |  if_e	jmp	#LR__0492
05bc8     73 28 0E F2 | 	cmp	local06, #115 wz
05bcc     24 02 90 AD |  if_e	jmp	#LR__0493
05bd0     6C 28 0E F2 | 	cmp	local06, #108 wz
05bd4     28 02 90 AD |  if_e	jmp	#LR__0494
05bd8     89 28 0E F2 | 	cmp	local06, #137 wz
05bdc     4C 04 90 AD |  if_e	jmp	#LR__0543
05be0     72 28 0E F2 | 	cmp	local06, #114 wz
05be4     24 02 90 AD |  if_e	jmp	#LR__0495
05be8     5D 28 0E F2 | 	cmp	local06, #93 wz
05bec     3C 04 90 AD |  if_e	jmp	#LR__0543
05bf0     96 28 0E F2 | 	cmp	local06, #150 wz
05bf4     1C 02 90 AD |  if_e	jmp	#LR__0496
05bf8     43 28 0E F2 | 	cmp	local06, #67 wz
05bfc     1C 02 90 AD |  if_e	jmp	#LR__0497
05c00     5A 28 0E F2 | 	cmp	local06, #90 wz
05c04     20 02 90 AD |  if_e	jmp	#LR__0498
05c08     4E 28 0E F2 | 	cmp	local06, #78 wz
05c0c     20 02 90 AD |  if_e	jmp	#LR__0499
05c10     46 28 0E F2 | 	cmp	local06, #70 wz
05c14     34 02 90 AD |  if_e	jmp	#LR__0501
05c18     71 28 0E F2 | 	cmp	local06, #113 wz
05c1c     38 02 90 AD |  if_e	jmp	#LR__0502
05c20     60 28 0E F2 | 	cmp	local06, #96 wz
05c24     3C 02 90 AD |  if_e	jmp	#LR__0503
05c28     4A 28 0E F2 | 	cmp	local06, #74 wz
05c2c     40 02 90 AD |  if_e	jmp	#LR__0504
05c30     48 28 0E F2 | 	cmp	local06, #72 wz
05c34     40 02 90 AD |  if_e	jmp	#LR__0505
05c38     58 28 0E F2 | 	cmp	local06, #88 wz
05c3c     44 02 90 AD |  if_e	jmp	#LR__0506
05c40     5F 28 0E F2 | 	cmp	local06, #95 wz
05c44     44 02 90 AD |  if_e	jmp	#LR__0507
05c48     8A 28 0E F2 | 	cmp	local06, #138 wz
05c4c     48 02 90 AD |  if_e	jmp	#LR__0508
05c50     4C 28 0E F2 | 	cmp	local06, #76 wz
05c54     4C 02 90 AD |  if_e	jmp	#LR__0509
05c58     52 28 0E F2 | 	cmp	local06, #82 wz
05c5c     50 02 90 AD |  if_e	jmp	#LR__0510
05c60     97 28 0E F2 | 	cmp	local06, #151 wz
05c64     54 02 90 AD |  if_e	jmp	#LR__0511
05c68     61 28 0E F2 | 	cmp	local06, #97 wz
05c6c     58 02 90 AD |  if_e	jmp	#LR__0512
05c70     63 28 0E F2 | 	cmp	local06, #99 wz
05c74     5C 02 90 AD |  if_e	jmp	#LR__0513
05c78     41 28 0E F2 | 	cmp	local06, #65 wz
05c7c     AC 03 90 AD |  if_e	jmp	#LR__0543
05c80     4B 28 0E F2 | 	cmp	local06, #75 wz
05c84     58 02 90 AD |  if_e	jmp	#LR__0514
05c88     5E 28 0E F2 | 	cmp	local06, #94 wz
05c8c     58 02 90 AD |  if_e	jmp	#LR__0515
05c90     7C 28 0E F2 | 	cmp	local06, #124 wz
05c94     5C 02 90 AD |  if_e	jmp	#LR__0516
05c98     7D 28 0E F2 | 	cmp	local06, #125 wz
05c9c     60 02 90 AD |  if_e	jmp	#LR__0517
05ca0     7E 28 0E F2 | 	cmp	local06, #126 wz
05ca4     64 02 90 AD |  if_e	jmp	#LR__0518
05ca8     7F 28 0E F2 | 	cmp	local06, #127 wz
05cac     68 02 90 AD |  if_e	jmp	#LR__0519
05cb0     80 28 0E F2 | 	cmp	local06, #128 wz
05cb4     6C 02 90 AD |  if_e	jmp	#LR__0520
05cb8     55 28 0E F2 | 	cmp	local06, #85 wz
05cbc     70 02 90 AD |  if_e	jmp	#LR__0521
05cc0     75 28 0E F2 | 	cmp	local06, #117 wz
05cc4     74 02 90 AD |  if_e	jmp	#LR__0522
05cc8     42 28 0E F2 | 	cmp	local06, #66 wz
05ccc     78 02 90 AD |  if_e	jmp	#LR__0523
05cd0     95 28 0E F2 | 	cmp	local06, #149 wz
05cd4     7C 02 90 AD |  if_e	jmp	#LR__0524
05cd8     81 28 0E F2 | 	cmp	local06, #129 wz
05cdc     80 02 90 AD |  if_e	jmp	#LR__0525
05ce0     44 28 0E F2 | 	cmp	local06, #68 wz
05ce4     84 02 90 AD |  if_e	jmp	#LR__0526
05ce8     88 28 0E F2 | 	cmp	local06, #136 wz
05cec     3C 03 90 AD |  if_e	jmp	#LR__0543
05cf0     92 28 0E F2 | 	cmp	local06, #146 wz
05cf4     80 02 90 AD |  if_e	jmp	#LR__0527
05cf8     4D 28 0E F2 | 	cmp	local06, #77 wz
05cfc     2C 03 90 AD |  if_e	jmp	#LR__0543
05d00     51 28 0E F2 | 	cmp	local06, #81 wz
05d04     78 02 90 AD |  if_e	jmp	#LR__0528
05d08     8E 28 0E F2 | 	cmp	local06, #142 wz
05d0c     7C 02 90 AD |  if_e	jmp	#LR__0529
05d10     90 28 0E F2 | 	cmp	local06, #144 wz
05d14     80 02 90 AD |  if_e	jmp	#LR__0530
05d18     8D 28 0E F2 | 	cmp	local06, #141 wz
05d1c     84 02 90 AD |  if_e	jmp	#LR__0531
05d20     8C 28 0E F2 | 	cmp	local06, #140 wz
05d24     88 02 90 AD |  if_e	jmp	#LR__0532
05d28     91 28 0E F2 | 	cmp	local06, #145 wz
05d2c     8C 02 90 AD |  if_e	jmp	#LR__0533
05d30     8B 28 0E F2 | 	cmp	local06, #139 wz
05d34     90 02 90 AD |  if_e	jmp	#LR__0534
05d38     8F 28 0E F2 | 	cmp	local06, #143 wz
05d3c     94 02 90 AD |  if_e	jmp	#LR__0535
05d40     6D 28 0E F2 | 	cmp	local06, #109 wz
05d44     98 02 90 AD |  if_e	jmp	#LR__0536
05d48     70 28 0E F2 | 	cmp	local06, #112 wz
05d4c     DC 02 90 AD |  if_e	jmp	#LR__0543
05d50     56 28 0E F2 | 	cmp	local06, #86 wz
05d54     94 02 90 AD |  if_e	jmp	#LR__0537
05d58     57 28 0E F2 | 	cmp	local06, #87 wz
05d5c     CC 02 90 AD |  if_e	jmp	#LR__0543
05d60     79 28 0E F2 | 	cmp	local06, #121 wz
05d64     90 02 90 AD |  if_e	jmp	#LR__0538
05d68     77 28 0E F2 | 	cmp	local06, #119 wz
05d6c     94 02 90 AD |  if_e	jmp	#LR__0539
05d70     78 28 0E F2 | 	cmp	local06, #120 wz
05d74     98 02 90 AD |  if_e	jmp	#LR__0540
05d78     01 00 00 FF 
05d7c     04 28 0E F2 | 	cmp	local06, ##516 wz
05d80     98 02 90 AD |  if_e	jmp	#LR__0541
05d84     9C 02 90 FD | 	jmp	#LR__0542
05d88                 | LR__0484
05d88     A0 0C B0 FD | 	call	#_compile_fun_2p
05d8c     FD 26 02 F6 | 	mov	local05, result1
05d90     98 02 90 FD | 	jmp	#LR__0543
05d94                 | LR__0485
05d94     D4 0D B0 FD | 	call	#_compile_fun_4p
05d98     FD 26 02 F6 | 	mov	local05, result1
05d9c     8C 02 90 FD | 	jmp	#LR__0543
05da0                 | LR__0486
05da0     9C 2E B0 FD | 	call	#_expr
05da4                 | ' expr()
05da4                 | ' return 0
05da4     00 26 06 F6 | 	mov	local05, #0
05da8     80 02 90 FD | 	jmp	#LR__0543
05dac                 | LR__0487
05dac     F0 0C B0 FD | 	call	#_compile_fun_3p
05db0     FD 26 02 F6 | 	mov	local05, result1
05db4     74 02 90 FD | 	jmp	#LR__0543
05db8                 | LR__0488
05db8     84 2E B0 FD | 	call	#_expr
05dbc                 | ' expr()
05dbc                 | ' return 0
05dbc     00 26 06 F6 | 	mov	local05, #0
05dc0     68 02 90 FD | 	jmp	#LR__0543
05dc4                 | LR__0489
05dc4     78 2E B0 FD | 	call	#_expr
05dc8                 | ' expr()
05dc8                 | ' return 0
05dc8     00 26 06 F6 | 	mov	local05, #0
05dcc     5C 02 90 FD | 	jmp	#LR__0543
05dd0                 | LR__0490
05dd0     38 10 B0 FD | 	call	#_compile_fun_varp
05dd4     FD 2C 02 F6 | 	mov	local08, result1
05dd8     50 02 90 FD | 	jmp	#LR__0543
05ddc                 | LR__0491
05ddc     60 2E B0 FD | 	call	#_expr
05de0                 | ' expr()
05de0                 | ' return 0
05de0     00 26 06 F6 | 	mov	local05, #0
05de4     44 02 90 FD | 	jmp	#LR__0543
05de8                 | LR__0492
05de8     20 10 B0 FD | 	call	#_compile_fun_varp
05dec     FD 2C 02 F6 | 	mov	local08, result1
05df0     38 02 90 FD | 	jmp	#LR__0543
05df4                 | LR__0493
05df4     14 10 B0 FD | 	call	#_compile_fun_varp
05df8     FD 2C 02 F6 | 	mov	local08, result1
05dfc     2C 02 90 FD | 	jmp	#LR__0543
05e00                 | LR__0494
05e00     8C 0E B0 FD | 	call	#_compile_fun_5p
05e04     FD 26 02 F6 | 	mov	local05, result1
05e08     20 02 90 FD | 	jmp	#LR__0543
05e0c                 | LR__0495
05e0c     E8 19 B0 FD | 	call	#_compile_dim
05e10     D4 02 90 FD | 	jmp	#LR__0544
05e14                 | LR__0496
05e14     14 0C B0 FD | 	call	#_compile_fun_2p
05e18     10 02 90 FD | 	jmp	#LR__0543
05e1c                 | LR__0497
05e1c     0C 0C B0 FD | 	call	#_compile_fun_2p
05e20     FD 26 02 F6 | 	mov	local05, result1
05e24     04 02 90 FD | 	jmp	#LR__0543
05e28                 | LR__0498
05e28     A4 18 B0 FD | 	call	#_compile_else
05e2c     B8 02 90 FD | 	jmp	#LR__0544
05e30                 | LR__0499
05e30     01 24 16 F2 | 	cmp	local04, #1 wc
05e34     08 00 90 CD |  if_b	jmp	#LR__0500
05e38     A4 2A B0 FD | 	call	#_compile_goto
05e3c     A8 02 90 FD | 	jmp	#LR__0544
05e40                 | LR__0500
05e40     19 12 06 F6 | 	mov	arg01, #25
05e44     10 2D B1 FD | 	call	#_printerror
05e48     9C 02 90 FD | 	jmp	#LR__0544
05e4c                 | LR__0501
05e4c     50 0C B0 FD | 	call	#_compile_fun_3p
05e50     FD 26 02 F6 | 	mov	local05, result1
05e54     D4 01 90 FD | 	jmp	#LR__0543
05e58                 | LR__0502
05e58     10 0D B0 FD | 	call	#_compile_fun_4p
05e5c     FD 26 02 F6 | 	mov	local05, result1
05e60     C8 01 90 FD | 	jmp	#LR__0543
05e64                 | LR__0503
05e64     D8 2D B0 FD | 	call	#_expr
05e68                 | ' expr()
05e68                 | ' return 0
05e68     00 26 06 F6 | 	mov	local05, #0
05e6c     BC 01 90 FD | 	jmp	#LR__0543
05e70                 | LR__0504
05e70     94 20 B0 FD | 	call	#_compile_for
05e74     70 02 90 FD | 	jmp	#LR__0544
05e78                 | LR__0505
05e78     F0 0C B0 FD | 	call	#_compile_fun_4p
05e7c     FD 26 02 F6 | 	mov	local05, result1
05e80     A8 01 90 FD | 	jmp	#LR__0543
05e84                 | LR__0506
05e84     08 17 B0 FD | 	call	#_compile_if
05e88     5C 02 90 FD | 	jmp	#LR__0544
05e8c                 | LR__0507
05e8c     B0 2D B0 FD | 	call	#_expr
05e90                 | ' expr()
05e90                 | ' return 0
05e90     00 26 06 F6 | 	mov	local05, #0
05e94     94 01 90 FD | 	jmp	#LR__0543
05e98                 | LR__0508
05e98     A4 2D B0 FD | 	call	#_expr
05e9c                 | ' expr()
05e9c                 | ' return 0
05e9c     00 26 06 F6 | 	mov	local05, #0
05ea0     88 01 90 FD | 	jmp	#LR__0543
05ea4                 | LR__0509
05ea4     64 0F B0 FD | 	call	#_compile_fun_varp
05ea8     FD 2C 02 F6 | 	mov	local08, result1
05eac     7C 01 90 FD | 	jmp	#LR__0543
05eb0                 | LR__0510
05eb0     58 0F B0 FD | 	call	#_compile_fun_varp
05eb4     FD 2C 02 F6 | 	mov	local08, result1
05eb8     70 01 90 FD | 	jmp	#LR__0543
05ebc                 | LR__0511
05ebc     6C 0B B0 FD | 	call	#_compile_fun_2p
05ec0     FD 26 02 F6 | 	mov	local05, result1
05ec4     64 01 90 FD | 	jmp	#LR__0543
05ec8                 | LR__0512
05ec8     74 2D B0 FD | 	call	#_expr
05ecc                 | ' expr()
05ecc                 | ' return 0
05ecc     00 26 06 F6 | 	mov	local05, #0
05ed0     58 01 90 FD | 	jmp	#LR__0543
05ed4                 | LR__0513
05ed4     68 2D B0 FD | 	call	#_expr
05ed8                 | ' expr()
05ed8                 | ' return 0
05ed8     00 26 06 F6 | 	mov	local05, #0
05edc     4C 01 90 FD | 	jmp	#LR__0543
05ee0                 | LR__0514
05ee0     4C 28 B0 FD | 	call	#_compile_next
05ee4     00 02 90 FD | 	jmp	#LR__0544
05ee8                 | LR__0515
05ee8     54 2D B0 FD | 	call	#_expr
05eec                 | ' expr()
05eec                 | ' return 0
05eec     00 26 06 F6 | 	mov	local05, #0
05ef0     38 01 90 FD | 	jmp	#LR__0543
05ef4                 | LR__0516
05ef4     48 2D B0 FD | 	call	#_expr
05ef8                 | ' expr()
05ef8                 | ' return 0
05ef8     00 26 06 F6 | 	mov	local05, #0
05efc     2C 01 90 FD | 	jmp	#LR__0543
05f00                 | LR__0517
05f00     3C 2D B0 FD | 	call	#_expr
05f04                 | ' expr()
05f04                 | ' return 0
05f04     00 26 06 F6 | 	mov	local05, #0
05f08     20 01 90 FD | 	jmp	#LR__0543
05f0c                 | LR__0518
05f0c     30 2D B0 FD | 	call	#_expr
05f10                 | ' expr()
05f10                 | ' return 0
05f10     00 26 06 F6 | 	mov	local05, #0
05f14     14 01 90 FD | 	jmp	#LR__0543
05f18                 | LR__0519
05f18     50 0C B0 FD | 	call	#_compile_fun_4p
05f1c     FD 26 02 F6 | 	mov	local05, result1
05f20     08 01 90 FD | 	jmp	#LR__0543
05f24                 | LR__0520
05f24     18 2D B0 FD | 	call	#_expr
05f28                 | ' expr()
05f28                 | ' return 0
05f28     00 26 06 F6 | 	mov	local05, #0
05f2c     FC 00 90 FD | 	jmp	#LR__0543
05f30                 | LR__0521
05f30     F8 0A B0 FD | 	call	#_compile_fun_2p
05f34     FD 26 02 F6 | 	mov	local05, result1
05f38     F0 00 90 FD | 	jmp	#LR__0543
05f3c                 | LR__0522
05f3c     CC 0E B0 FD | 	call	#_compile_fun_varp
05f40     FD 2C 02 F6 | 	mov	local08, result1
05f44     E4 00 90 FD | 	jmp	#LR__0543
05f48                 | LR__0523
05f48     E0 0A B0 FD | 	call	#_compile_fun_2p
05f4c     FD 26 02 F6 | 	mov	local05, result1
05f50     D8 00 90 FD | 	jmp	#LR__0543
05f54                 | LR__0524
05f54     D4 0A B0 FD | 	call	#_compile_fun_2p
05f58     FD 26 02 F6 | 	mov	local05, result1
05f5c     CC 00 90 FD | 	jmp	#LR__0543
05f60                 | LR__0525
05f60     C8 0A B0 FD | 	call	#_compile_fun_2p
05f64     FD 26 02 F6 | 	mov	local05, result1
05f68     C0 00 90 FD | 	jmp	#LR__0543
05f6c                 | LR__0526
05f6c     48 0F B0 FD | 	call	#_compile_print
05f70     FD 26 02 F6 | 	mov	local05, result1
05f74     70 01 90 FD | 	jmp	#LR__0544
05f78                 | LR__0527
05f78     C4 2C B0 FD | 	call	#_expr
05f7c                 | ' expr()
05f7c                 | ' return 0
05f7c     AC 00 90 FD | 	jmp	#LR__0543
05f80                 | LR__0528
05f80     88 0E B0 FD | 	call	#_compile_fun_varp
05f84     FD 2C 02 F6 | 	mov	local08, result1
05f88     A0 00 90 FD | 	jmp	#LR__0543
05f8c                 | LR__0529
05f8c     9C 0A B0 FD | 	call	#_compile_fun_2p
05f90     FD 26 02 F6 | 	mov	local05, result1
05f94     94 00 90 FD | 	jmp	#LR__0543
05f98                 | LR__0530
05f98     90 0A B0 FD | 	call	#_compile_fun_2p
05f9c     FD 26 02 F6 | 	mov	local05, result1
05fa0     88 00 90 FD | 	jmp	#LR__0543
05fa4                 | LR__0531
05fa4     84 0A B0 FD | 	call	#_compile_fun_2p
05fa8     FD 26 02 F6 | 	mov	local05, result1
05fac     7C 00 90 FD | 	jmp	#LR__0543
05fb0                 | LR__0532
05fb0     78 0A B0 FD | 	call	#_compile_fun_2p
05fb4     FD 26 02 F6 | 	mov	local05, result1
05fb8     70 00 90 FD | 	jmp	#LR__0543
05fbc                 | LR__0533
05fbc     6C 0A B0 FD | 	call	#_compile_fun_2p
05fc0     FD 26 02 F6 | 	mov	local05, result1
05fc4     64 00 90 FD | 	jmp	#LR__0543
05fc8                 | LR__0534
05fc8     60 0A B0 FD | 	call	#_compile_fun_2p
05fcc     FD 26 02 F6 | 	mov	local05, result1
05fd0     58 00 90 FD | 	jmp	#LR__0543
05fd4                 | LR__0535
05fd4     54 0A B0 FD | 	call	#_compile_fun_2p
05fd8     FD 26 02 F6 | 	mov	local05, result1
05fdc     4C 00 90 FD | 	jmp	#LR__0543
05fe0                 | LR__0536
05fe0     BC 0A B0 FD | 	call	#_compile_fun_3p
05fe4     FD 26 02 F6 | 	mov	local05, result1
05fe8     40 00 90 FD | 	jmp	#LR__0543
05fec                 | LR__0537
05fec     50 2C B0 FD | 	call	#_expr
05ff0                 | ' expr()
05ff0                 | ' return 0
05ff0     00 26 06 F6 | 	mov	local05, #0
05ff4     34 00 90 FD | 	jmp	#LR__0543
05ff8                 | LR__0538
05ff8     30 0A B0 FD | 	call	#_compile_fun_2p
05ffc     FD 26 02 F6 | 	mov	local05, result1
06000     28 00 90 FD | 	jmp	#LR__0543
06004                 | LR__0539
06004     24 0A B0 FD | 	call	#_compile_fun_2p
06008     FD 26 02 F6 | 	mov	local05, result1
0600c     1C 00 90 FD | 	jmp	#LR__0543
06010                 | LR__0540
06010     18 0A B0 FD | 	call	#_compile_fun_2p
06014     FD 26 02 F6 | 	mov	local05, result1
06018     10 00 90 FD | 	jmp	#LR__0543
0601c                 | LR__0541
0601c     E8 01 B0 FD | 	call	#_compile_array_assign
06020     C4 00 90 FD | 	jmp	#LR__0544
06024                 | LR__0542
06024     48 09 B0 FD | 	call	#_compile_unknown
06028     BC 00 90 FD | 	jmp	#LR__0544
0602c                 | LR__0543
0602c     14 23 02 F6 | 	mov	local03, local06
06030     16 1F 02 F6 | 	mov	local01, local08
06034     0F 2B 02 F6 | 	mov	local07, local01
06038     10 2F 02 F6 | 	mov	local09, local02
0603c     11 29 02 F6 | 	mov	local06, local03
06040     6A 00 00 FF 
06044     60 E4 05 F1 | 	add	objptr, ##54368
06048     F2 1E 02 FB | 	rdlong	local01, objptr
0604c     0F 2D 02 F6 | 	mov	local08, local01
06050     01 2C 66 F0 | 	shl	local08, #1
06054     0F 2D 02 F1 | 	add	local08, local01
06058     02 2C 66 F0 | 	shl	local08, #2
0605c     03 00 00 FF 
06060     00 E4 85 F1 | 	sub	objptr, ##1536
06064     F2 2C 02 F1 | 	add	local08, objptr
06068     16 2B 62 FC | 	wrlong	local07, local08
0606c     03 00 00 FF 
06070     00 E4 05 F1 | 	add	objptr, ##1536
06074     F2 1E 02 FB | 	rdlong	local01, objptr
06078     0F 2D 02 F6 | 	mov	local08, local01
0607c     01 2C 66 F0 | 	shl	local08, #1
06080     0F 2D 02 F1 | 	add	local08, local01
06084     02 2C 66 F0 | 	shl	local08, #2
06088     03 00 00 FF 
0608c     00 E4 85 F1 | 	sub	objptr, ##1536
06090     F2 2C 02 F1 | 	add	local08, objptr
06094     04 2C 06 F1 | 	add	local08, #4
06098     16 2F 62 FC | 	wrlong	local09, local08
0609c     03 00 00 FF 
060a0     00 E4 05 F1 | 	add	objptr, ##1536
060a4     F2 1E 02 FB | 	rdlong	local01, objptr
060a8     0F 2D 02 F6 | 	mov	local08, local01
060ac     01 2C 66 F0 | 	shl	local08, #1
060b0     0F 2D 02 F1 | 	add	local08, local01
060b4     02 2C 66 F0 | 	shl	local08, #2
060b8     03 00 00 FF 
060bc     00 E4 85 F1 | 	sub	objptr, ##1536
060c0     F2 2C 02 F1 | 	add	local08, objptr
060c4     08 2C 06 F1 | 	add	local08, #8
060c8     16 29 62 FC | 	wrlong	local06, local08
060cc     03 00 00 FF 
060d0     00 E4 05 F1 | 	add	objptr, ##1536
060d4     F2 2A 02 FB | 	rdlong	local07, objptr
060d8     01 2A 06 F1 | 	add	local07, #1
060dc     F2 2A 62 FC | 	wrlong	local07, objptr
060e0     6A 00 00 FF 
060e4     60 E4 85 F1 | 	sub	objptr, ##54368
060e8                 | LR__0544
060e8                 | ' 
060e8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
060e8                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
060e8     00 24 0E F2 | 	cmp	local04, #0 wz
060ec     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
060f0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
060f4     38 00 90 5D |  if_ne	jmp	#LR__0545
060f8     6A 00 00 FF 
060fc     60 E4 05 F1 | 	add	objptr, ##54368
06100     F2 2C 02 FB | 	rdlong	local08, objptr
06104     16 1F 02 F6 | 	mov	local01, local08
06108     01 1E 66 F0 | 	shl	local01, #1
0610c     16 1F 02 F1 | 	add	local01, local08
06110     02 1E 66 F0 | 	shl	local01, #2
06114     03 00 00 FF 
06118     00 E4 85 F1 | 	sub	objptr, ##1536
0611c     F2 1E 02 F1 | 	add	local01, objptr
06120     08 1E 06 F1 | 	add	local01, #8
06124     0F FD 6B FC | 	wrlong	#510, local01
06128     67 00 00 FF 
0612c     60 E4 85 F1 | 	sub	objptr, ##52832
06130                 | LR__0545
06130                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
06130     6A 00 00 FF 
06134     60 E4 05 F1 | 	add	objptr, ##54368
06138     F2 1E 02 FB | 	rdlong	local01, objptr
0613c     6A 00 00 FF 
06140     60 E4 85 F1 | 	sub	objptr, ##54368
06144     97 58 48 FB | 	callpa	#(@LR__0548-@LR__0546)>>2,fcache_load_ptr_
06148                 | LR__0546
06148     0F 2D 02 F6 | 	mov	local08, local01
0614c     01 2C 66 F0 | 	shl	local08, #1
06150     0F 2D 02 F1 | 	add	local08, local01
06154     02 2C 66 F0 | 	shl	local08, #2
06158     67 00 00 FF 
0615c     60 E4 05 F1 | 	add	objptr, ##52832
06160     F2 2C 02 F1 | 	add	local08, objptr
06164     08 2C 06 F1 | 	add	local08, #8
06168     16 2D 02 FB | 	rdlong	local08, local08
0616c     9B 2C 0E F2 | 	cmp	local08, #155 wz
06170     67 00 00 FF 
06174     60 E4 85 F1 | 	sub	objptr, ##52832
06178     70 00 90 5D |  if_ne	jmp	#LR__0547
0617c     0F 2D 02 F6 | 	mov	local08, local01
06180     01 2C 86 F1 | 	sub	local08, #1
06184     16 2F 02 F6 | 	mov	local09, local08
06188     01 2E 66 F0 | 	shl	local09, #1
0618c     16 2F 02 F1 | 	add	local09, local08
06190     02 2E 66 F0 | 	shl	local09, #2
06194     67 00 00 FF 
06198     60 E4 05 F1 | 	add	objptr, ##52832
0619c     F2 2E 02 F1 | 	add	local09, objptr
061a0     08 2E 06 F1 | 	add	local09, #8
061a4     17 2D 02 FB | 	rdlong	local08, local09
061a8     11 2C 0E F2 | 	cmp	local08, #17 wz
061ac     67 00 00 FF 
061b0     60 E4 85 F1 | 	sub	objptr, ##52832
061b4     34 00 90 5D |  if_ne	jmp	#LR__0547
061b8     0F 2F 02 F6 | 	mov	local09, local01
061bc     01 2E 86 F1 | 	sub	local09, #1
061c0     17 2D 02 F6 | 	mov	local08, local09
061c4     01 2C 66 F0 | 	shl	local08, #1
061c8     17 2D 02 F1 | 	add	local08, local09
061cc     02 2C 66 F0 | 	shl	local08, #2
061d0     67 00 00 FF 
061d4     60 E4 05 F1 | 	add	objptr, ##52832
061d8     F2 2C 02 F1 | 	add	local08, objptr
061dc     08 2C 06 F1 | 	add	local08, #8
061e0     16 25 68 FC | 	wrlong	#18, local08
061e4     67 00 00 FF 
061e8     60 E4 85 F1 | 	sub	objptr, ##52832
061ec                 | LR__0547
061ec     01 1E 86 F1 | 	sub	local01, #1
061f0     01 1E 56 F2 | 	cmps	local01, #1 wc
061f4     50 FF 9F 3D |  if_ae	jmp	#LR__0546
061f8                 | LR__0548
061f8                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
061f8                 | ' return err
061f8     13 FB 01 F6 | 	mov	result1, local05
061fc     A7 F0 03 F6 | 	mov	ptra, fp
06200     B2 00 A0 FD | 	call	#popregs_
06204                 | _compile_immediate_ret
06204     2D 00 64 FD | 	ret
06208                 | 
06208                 | ' 
06208                 | ' sub compile_array_assign
06208                 | _compile_array_assign
06208     0A 4A 05 F6 | 	mov	COUNT_, #10
0620c     A8 00 A0 FD | 	call	#pushregs_
06210     00 24 06 F6 | 	mov	local04, #0
06214     57 00 00 FF 
06218     28 E4 05 F1 | 	add	objptr, ##44584
0621c     F2 26 02 FB | 	rdlong	local05, objptr
06220     13 FB 01 F6 | 	mov	result1, local05
06224     01 FA 85 F1 | 	sub	result1, #1
06228     03 FA 65 F0 | 	shl	result1, #3
0622c     02 00 00 FF 
06230     38 E4 85 F1 | 	sub	objptr, ##1080
06234     F2 FA 01 F1 | 	add	result1, objptr
06238     FD 28 02 FB | 	rdlong	local06, result1
0623c                 | ' numpar=0
0623c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
0623c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
0623c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
0623c                 | ' if lparts(ct).token=token_lpar then
0623c     03 26 66 F0 | 	shl	local05, #3
06240     F2 26 02 F1 | 	add	local05, objptr
06244     04 26 06 F1 | 	add	local05, #4
06248     13 27 02 FB | 	rdlong	local05, local05
0624c     15 26 0E F2 | 	cmp	local05, #21 wz
06250     54 00 00 FF 
06254     F0 E5 85 F1 | 	sub	objptr, ##43504
06258     D4 01 90 5D |  if_ne	jmp	#LR__0554
0625c     57 00 00 FF 
06260     28 E4 05 F1 | 	add	objptr, ##44584
06264     F2 2A 02 FB | 	rdlong	local07, objptr
06268     01 2A 06 F1 | 	add	local07, #1
0626c     F2 2A 62 FC | 	wrlong	local07, objptr
06270     57 00 00 FF 
06274     28 E4 85 F1 | 	sub	objptr, ##44584
06278                 | '   ct+=1 											' omit this lpar, this is for expr list
06278                 | '   do
06278                 | LR__0550
06278     C4 29 B0 FD | 	call	#_expr
0627c     57 00 00 FF 
06280     28 E4 05 F1 | 	add	objptr, ##44584
06284     F2 26 02 FB | 	rdlong	local05, objptr
06288     01 26 06 F1 | 	add	local05, #1
0628c     F2 26 62 FC | 	wrlong	local05, objptr
06290     01 24 06 F1 | 	add	local04, #1
06294     01 26 86 F1 | 	sub	local05, #1
06298     03 26 66 F0 | 	shl	local05, #3
0629c     02 00 00 FF 
062a0     38 E4 85 F1 | 	sub	objptr, ##1080
062a4     F2 26 02 F1 | 	add	local05, objptr
062a8     04 26 06 F1 | 	add	local05, #4
062ac     13 2B 02 FB | 	rdlong	local07, local05
062b0     14 2A 0E F2 | 	cmp	local07, #20 wz
062b4     54 00 00 FF 
062b8     F0 E5 85 F1 | 	sub	objptr, ##43504
062bc     34 00 90 AD |  if_e	jmp	#LR__0551
062c0     57 00 00 FF 
062c4     28 E4 05 F1 | 	add	objptr, ##44584
062c8     F2 2A 02 FB | 	rdlong	local07, objptr
062cc     03 2A 66 F0 | 	shl	local07, #3
062d0     02 00 00 FF 
062d4     38 E4 85 F1 | 	sub	objptr, ##1080
062d8     F2 2A 02 F1 | 	add	local07, objptr
062dc     04 2A 06 F1 | 	add	local07, #4
062e0     15 2B 02 FB | 	rdlong	local07, local07
062e4     FE 2B 0E F2 | 	cmp	local07, #510 wz
062e8     54 00 00 FF 
062ec     F0 E5 85 F1 | 	sub	objptr, ##43504
062f0     84 FF 9F 5D |  if_ne	jmp	#LR__0550
062f4                 | LR__0551
062f4     57 00 00 FF 
062f8     28 E4 05 F1 | 	add	objptr, ##44584
062fc     F2 2A 02 FB | 	rdlong	local07, objptr
06300     01 2A 06 F1 | 	add	local07, #1
06304     F2 2A 62 FC | 	wrlong	local07, objptr
06308     57 00 00 FF 
0630c     28 E4 85 F1 | 	sub	objptr, ##44584
06310     2C 29 B0 FD | 	call	#_expr
06314     01 2C 66 F6 | 	neg	local08, #1
06318     00 2E 06 F6 | 	mov	local09, #0
0631c                 | ' '   print "in array_assign, rpar found, numpar=",numpar
0631c                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
0631c                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
0631c                 | ' ct+=1 : expr()
0631c                 | ' ' now find the vae
0631c                 | ' 
0631c                 | ' j=-1 : i=0 : do : 
0631c                 | LR__0552
0631c                 | '   if variables(i).name=varname$ then j=i: exit loop
0631c     17 27 02 F6 | 	mov	local05, local09
06320     04 26 66 F0 | 	shl	local05, #4
06324     34 00 00 FF 
06328     EC E5 05 F1 | 	add	objptr, ##27116
0632c     F2 26 02 F1 | 	add	local05, objptr
06330     13 13 02 FB | 	rdlong	arg01, local05
06334     14 15 02 F6 | 	mov	arg02, local06
06338     34 00 00 FF 
0633c     EC E5 85 F1 | 	sub	objptr, ##27116
06340     DC 5F B1 FD | 	call	#__system___string_cmp
06344     00 FA 0D F2 | 	cmp	result1, #0 wz
06348     17 2D 02 A6 |  if_e	mov	local08, local09
0634c     20 00 90 AD |  if_e	jmp	#LR__0553
06350     01 2E 06 F1 | 	add	local09, #1
06354     54 00 00 FF 
06358     EC E5 05 F1 | 	add	objptr, ##43500
0635c     F2 2A 02 FB | 	rdlong	local07, objptr
06360     54 00 00 FF 
06364     EC E5 85 F1 | 	sub	objptr, ##43500
06368     15 2F 5A F2 | 	cmps	local09, local07 wcz
0636c     AC FF 9F ED |  if_be	jmp	#LR__0552
06370                 | LR__0553
06370     16 1F 02 F6 | 	mov	local01, local08
06374     12 21 02 F6 | 	mov	local02, local04
06378     17 22 06 F6 | 	mov	local03, #23
0637c     0F 2B 02 F6 | 	mov	local07, local01
06380     10 31 02 F6 | 	mov	local10, local02
06384     11 2D 02 F6 | 	mov	local08, local03
06388     6A 00 00 FF 
0638c     60 E4 05 F1 | 	add	objptr, ##54368
06390     F2 1E 02 FB | 	rdlong	local01, objptr
06394     0F 2F 02 F6 | 	mov	local09, local01
06398     01 2E 66 F0 | 	shl	local09, #1
0639c     0F 2F 02 F1 | 	add	local09, local01
063a0     02 2E 66 F0 | 	shl	local09, #2
063a4     03 00 00 FF 
063a8     00 E4 85 F1 | 	sub	objptr, ##1536
063ac     F2 2E 02 F1 | 	add	local09, objptr
063b0     17 2B 62 FC | 	wrlong	local07, local09
063b4     03 00 00 FF 
063b8     00 E4 05 F1 | 	add	objptr, ##1536
063bc     F2 1E 02 FB | 	rdlong	local01, objptr
063c0     0F 2F 02 F6 | 	mov	local09, local01
063c4     01 2E 66 F0 | 	shl	local09, #1
063c8     0F 2F 02 F1 | 	add	local09, local01
063cc     02 2E 66 F0 | 	shl	local09, #2
063d0     03 00 00 FF 
063d4     00 E4 85 F1 | 	sub	objptr, ##1536
063d8     F2 2E 02 F1 | 	add	local09, objptr
063dc     04 2E 06 F1 | 	add	local09, #4
063e0     17 31 62 FC | 	wrlong	local10, local09
063e4     03 00 00 FF 
063e8     00 E4 05 F1 | 	add	objptr, ##1536
063ec     F2 30 02 FB | 	rdlong	local10, objptr
063f0     18 1F 02 F6 | 	mov	local01, local10
063f4     01 1E 66 F0 | 	shl	local01, #1
063f8     18 1F 02 F1 | 	add	local01, local10
063fc     02 1E 66 F0 | 	shl	local01, #2
06400     03 00 00 FF 
06404     00 E4 85 F1 | 	sub	objptr, ##1536
06408     F2 1E 02 F1 | 	add	local01, objptr
0640c     08 1E 06 F1 | 	add	local01, #8
06410     0F 2D 62 FC | 	wrlong	local08, local01
06414     03 00 00 FF 
06418     00 E4 05 F1 | 	add	objptr, ##1536
0641c     F2 2A 02 FB | 	rdlong	local07, objptr
06420     01 2A 06 F1 | 	add	local07, #1
06424     F2 2A 62 FC | 	wrlong	local07, objptr
06428     6A 00 00 FF 
0642c     60 E4 85 F1 | 	sub	objptr, ##54368
06430                 | LR__0554
06430     A7 F0 03 F6 | 	mov	ptra, fp
06434     B2 00 A0 FD | 	call	#popregs_
06438                 | _compile_array_assign_ret
06438     2D 00 64 FD | 	ret
0643c                 | 
0643c                 | ' 
0643c                 | ' 
0643c                 | ' sub compile_immediate_assign(linetype as ulong)
0643c                 | _compile_immediate_assign
0643c     09 4A 05 F6 | 	mov	COUNT_, #9
06440     A8 00 A0 FD | 	call	#pushregs_
06444     09 25 0A F6 | 	mov	local04, arg01 wz
06448     FF 22 06 F6 | 	mov	local03, #255
0644c     01 26 66 F6 | 	neg	local05, #1
06450                 | ' 
06450                 | ' t1.result_type=result_error : t1.result.uresult=0
06450                 | ' i=-1: j=-1
06450                 | ' 
06450                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
06450     2C 00 90 5D |  if_ne	jmp	#LR__0560
06454     54 00 00 FF 
06458     F0 E5 05 F1 | 	add	objptr, ##43504
0645c     F2 28 02 FB | 	rdlong	local06, objptr
06460     02 00 00 FF 
06464     38 E4 05 F1 | 	add	objptr, ##1080
06468     F2 04 68 FC | 	wrlong	#2, objptr
0646c     13 00 00 FF 
06470     38 E4 05 F1 | 	add	objptr, ##9784
06474     F2 00 68 FC | 	wrlong	#0, objptr
06478     6A 00 00 FF 
0647c     60 E4 85 F1 | 	sub	objptr, ##54368
06480                 | LR__0560
06480                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
06480     02 24 0E F2 | 	cmp	local04, #2 wz
06484     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06488     54 00 00 AF 
0648c     F0 E5 05 A1 |  if_e	add	objptr, ##43504
06490     F2 28 02 AB |  if_e	rdlong	local06, objptr
06494     02 00 00 AF 
06498     38 E4 05 A1 |  if_e	add	objptr, ##1080
0649c     F2 04 68 AC |  if_e	wrlong	#2, objptr
064a0     57 00 00 AF 
064a4     28 E4 85 A1 |  if_e	sub	objptr, ##44584
064a8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
064a8     04 24 0E F2 | 	cmp	local04, #4 wz
064ac     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
064b0     2C 00 90 5D |  if_ne	jmp	#LR__0561
064b4     54 00 00 FF 
064b8     F8 E5 05 F1 | 	add	objptr, ##43512
064bc     F2 28 02 FB | 	rdlong	local06, objptr
064c0     02 00 00 FF 
064c4     30 E4 05 F1 | 	add	objptr, ##1072
064c8     F2 06 68 FC | 	wrlong	#3, objptr
064cc     13 00 00 FF 
064d0     38 E4 05 F1 | 	add	objptr, ##9784
064d4     F2 04 68 FC | 	wrlong	#2, objptr
064d8     6A 00 00 FF 
064dc     60 E4 85 F1 | 	sub	objptr, ##54368
064e0                 | LR__0561
064e0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
064e0     05 24 0E F2 | 	cmp	local04, #5 wz
064e4     3C 00 90 5D |  if_ne	jmp	#LR__0562
064e8     57 00 00 FF 
064ec     28 E4 05 F1 | 	add	objptr, ##44584
064f0     F2 FA 01 FB | 	rdlong	result1, objptr
064f4     FD 28 02 F6 | 	mov	local06, result1
064f8     03 28 66 F0 | 	shl	local06, #3
064fc     02 00 00 FF 
06500     38 E4 85 F1 | 	sub	objptr, ##1080
06504     F2 28 02 F1 | 	add	local06, objptr
06508     14 29 02 FB | 	rdlong	local06, local06
0650c     02 FA 05 F1 | 	add	result1, #2
06510     02 00 00 FF 
06514     38 E4 05 F1 | 	add	objptr, ##1080
06518     F2 FA 61 FC | 	wrlong	result1, objptr
0651c     57 00 00 FF 
06520     28 E4 85 F1 | 	sub	objptr, ##44584
06524                 | LR__0562
06524     14 13 02 F6 | 	mov	arg01, local06
06528     01 14 06 F6 | 	mov	arg02, #1
0652c     94 7E B1 FD | 	call	#__system__Right_S
06530     0C 27 B0 FD | 	call	#_expr
06534                 | '  
06534                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06534                 | ' 
06534                 | ' suffix2$=right$(varname2$,1)
06534                 | ' expr()
06534                 | ' 
06534                 | ' 
06534                 | ' if varnum>0 then
06534     54 00 00 FF 
06538     EC E5 05 F1 | 	add	objptr, ##43500
0653c     F2 2A 02 FB | 	rdlong	local07, objptr
06540     54 00 00 FF 
06544     EC E5 85 F1 | 	sub	objptr, ##43500
06548     01 2A 56 F2 | 	cmps	local07, #1 wc
0654c     58 00 90 CD |  if_b	jmp	#LR__0565
06550                 | '   for i=0 to varnum-1
06550     00 2C 06 F6 | 	mov	local08, #0
06554     54 00 00 FF 
06558     EC E5 05 F1 | 	add	objptr, ##43500
0655c     F2 2E 02 FB | 	rdlong	local09, objptr
06560     54 00 00 FF 
06564     EC E5 85 F1 | 	sub	objptr, ##43500
06568                 | LR__0563
06568     17 2D 52 F2 | 	cmps	local08, local09 wc
0656c     38 00 90 3D |  if_ae	jmp	#LR__0564
06570                 | '     if variables(i).name=varname2$ then j=i : exit
06570     16 2B 02 F6 | 	mov	local07, local08
06574     04 2A 66 F0 | 	shl	local07, #4
06578     34 00 00 FF 
0657c     EC E5 05 F1 | 	add	objptr, ##27116
06580     F2 2A 02 F1 | 	add	local07, objptr
06584     15 13 02 FB | 	rdlong	arg01, local07
06588     14 15 02 F6 | 	mov	arg02, local06
0658c     34 00 00 FF 
06590     EC E5 85 F1 | 	sub	objptr, ##27116
06594     88 5D B1 FD | 	call	#__system___string_cmp
06598     00 FA 0D F2 | 	cmp	result1, #0 wz
0659c     16 27 02 A6 |  if_e	mov	local05, local08
065a0     01 2C 06 51 |  if_ne	add	local08, #1
065a4     C0 FF 9F 5D |  if_ne	jmp	#LR__0563
065a8                 | LR__0564
065a8                 | LR__0565
065a8                 | ' if  j=-1 andalso varnum<maxvars then   
065a8     FF FF 7F FF 
065ac     FF 27 0E F2 | 	cmp	local05, ##-1 wz
065b0     60 00 90 5D |  if_ne	jmp	#LR__0566
065b4     54 00 00 FF 
065b8     EC E5 05 F1 | 	add	objptr, ##43500
065bc     F2 2A 02 FB | 	rdlong	local07, objptr
065c0     54 00 00 FF 
065c4     EC E5 85 F1 | 	sub	objptr, ##43500
065c8     01 00 00 FF 
065cc     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
065d0     40 00 90 3D |  if_ae	jmp	#LR__0566
065d4     54 00 00 FF 
065d8     EC E5 05 F1 | 	add	objptr, ##43500
065dc     F2 2E 02 FB | 	rdlong	local09, objptr
065e0     04 2E 66 F0 | 	shl	local09, #4
065e4     20 00 00 FF 
065e8     00 E4 85 F1 | 	sub	objptr, ##16384
065ec     F2 2E 02 F1 | 	add	local09, objptr
065f0     17 29 62 FC | 	wrlong	local06, local09
065f4     20 00 00 FF 
065f8     00 E4 05 F1 | 	add	objptr, ##16384
065fc     F2 2A 02 FB | 	rdlong	local07, objptr
06600     15 27 02 F6 | 	mov	local05, local07
06604     01 2A 06 F1 | 	add	local07, #1
06608     F2 2A 62 FC | 	wrlong	local07, objptr
0660c     54 00 00 FF 
06610     EC E5 85 F1 | 	sub	objptr, ##43500
06614                 | LR__0566
06614     13 1F 02 F6 | 	mov	local01, local05
06618     17 22 06 F6 | 	mov	local03, #23
0661c     0F 2B 02 F6 | 	mov	local07, local01
06620     10 2F 02 F6 | 	mov	local09, local02
06624     11 1F 02 F6 | 	mov	local01, local03
06628     6A 00 00 FF 
0662c     60 E4 05 F1 | 	add	objptr, ##54368
06630     F2 2C 02 FB | 	rdlong	local08, objptr
06634     16 29 02 F6 | 	mov	local06, local08
06638     01 28 66 F0 | 	shl	local06, #1
0663c     16 29 02 F1 | 	add	local06, local08
06640     02 28 66 F0 | 	shl	local06, #2
06644     03 00 00 FF 
06648     00 E4 85 F1 | 	sub	objptr, ##1536
0664c     F2 28 02 F1 | 	add	local06, objptr
06650     14 2B 62 FC | 	wrlong	local07, local06
06654     03 00 00 FF 
06658     00 E4 05 F1 | 	add	objptr, ##1536
0665c     F2 2C 02 FB | 	rdlong	local08, objptr
06660     16 2B 02 F6 | 	mov	local07, local08
06664     01 2A 66 F0 | 	shl	local07, #1
06668     16 2B 02 F1 | 	add	local07, local08
0666c     02 2A 66 F0 | 	shl	local07, #2
06670     03 00 00 FF 
06674     00 E4 85 F1 | 	sub	objptr, ##1536
06678     F2 2A 02 F1 | 	add	local07, objptr
0667c     04 2A 06 F1 | 	add	local07, #4
06680     15 2F 62 FC | 	wrlong	local09, local07
06684     03 00 00 FF 
06688     00 E4 05 F1 | 	add	objptr, ##1536
0668c     F2 2E 02 FB | 	rdlong	local09, objptr
06690     17 2D 02 F6 | 	mov	local08, local09
06694     01 2C 66 F0 | 	shl	local08, #1
06698     17 2D 02 F1 | 	add	local08, local09
0669c     02 2C 66 F0 | 	shl	local08, #2
066a0     03 00 00 FF 
066a4     00 E4 85 F1 | 	sub	objptr, ##1536
066a8     F2 2C 02 F1 | 	add	local08, objptr
066ac     08 2C 06 F1 | 	add	local08, #8
066b0     16 1F 62 FC | 	wrlong	local01, local08
066b4     03 00 00 FF 
066b8     00 E4 05 F1 | 	add	objptr, ##1536
066bc     F2 2A 02 FB | 	rdlong	local07, objptr
066c0     01 2A 06 F1 | 	add	local07, #1
066c4     F2 2A 62 FC | 	wrlong	local07, objptr
066c8     6A 00 00 FF 
066cc     60 E4 85 F1 | 	sub	objptr, ##54368
066d0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
066d0                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
066d0     00 24 0E F2 | 	cmp	local04, #0 wz
066d4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066d8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
066dc     38 00 90 5D |  if_ne	jmp	#LR__0567
066e0     6A 00 00 FF 
066e4     60 E4 05 F1 | 	add	objptr, ##54368
066e8     F2 1E 02 FB | 	rdlong	local01, objptr
066ec     0F 2F 02 F6 | 	mov	local09, local01
066f0     01 2E 66 F0 | 	shl	local09, #1
066f4     0F 2F 02 F1 | 	add	local09, local01
066f8     02 2E 66 F0 | 	shl	local09, #2
066fc     03 00 00 FF 
06700     00 E4 85 F1 | 	sub	objptr, ##1536
06704     F2 2E 02 F1 | 	add	local09, objptr
06708     08 2E 06 F1 | 	add	local09, #8
0670c     17 FD 6B FC | 	wrlong	#510, local09
06710     67 00 00 FF 
06714     60 E4 85 F1 | 	sub	objptr, ##52832
06718                 | LR__0567
06718     A7 F0 03 F6 | 	mov	ptra, fp
0671c     B2 00 A0 FD | 	call	#popregs_
06720                 | _compile_immediate_assign_ret
06720     2D 00 64 FD | 	ret
06724                 | 
06724                 | ' 
06724                 | ' ' ------------------ compile the line that is calling a command 
06724                 | ' 
06724                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06724                 | _compile
06724     04 4A 05 F6 | 	mov	COUNT_, #4
06728     A8 00 A0 FD | 	call	#pushregs_
0672c     09 1F 0A F6 | 	mov	local01, arg01 wz
06730     0A 21 02 F6 | 	mov	local02, arg02
06734     0B 23 02 F6 | 	mov	local03, arg03
06738                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06738                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06738                 | '  
06738                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06738                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06738     0C 00 90 5D |  if_ne	jmp	#LR__0570
0673c     00 12 06 F6 | 	mov	arg01, #0
06740     30 F3 BF FD | 	call	#_compile_immediate
06744     A0 00 90 FD | 	jmp	#LR__0577
06748                 | LR__0570
06748     67 00 00 FF 
0674c     60 E4 05 F1 | 	add	objptr, ##52832
06750     F2 1E 62 FC | 	wrlong	local01, objptr
06754     04 E4 05 F1 | 	add	objptr, #4
06758     F2 20 62 FC | 	wrlong	local02, objptr
0675c     67 00 00 FF 
06760     64 E4 85 F1 | 	sub	objptr, ##52836
06764     11 13 02 F6 | 	mov	arg01, local03
06768     01 12 06 F1 | 	add	arg01, #1
0676c     04 F3 BF FD | 	call	#_compile_immediate
06770     FD 24 0A F6 | 	mov	local04, result1 wz
06774                 | ' 
06774                 | ' ucompiledline(0)=alinemajor
06774                 | ' ucompiledline(1)=alineminor
06774                 | ' 
06774                 | ' 
06774                 | ' ' cont: 0: this is the first part of the line that will continue
06774                 | ' ' 1 - this is the continuation of the line
06774                 | ' ' 2 - this is the last continued line
06774                 | ' ' 3 - this is the ome and only part
06774                 | ' 
06774                 | ' err=compile_immediate(cont+1) 
06774                 | ' if err=0 then
06774     6C 00 90 5D |  if_ne	jmp	#LR__0576
06778                 | '   if cont=3 orelse cont=2 then 
06778     03 22 0E F2 | 	cmp	local03, #3 wz
0677c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06780     60 00 90 5D |  if_ne	jmp	#LR__0575
06784                 | '     if alinemajor >lastline then 
06784     6A 00 00 FF 
06788     6C E4 05 F1 | 	add	objptr, ##54380
0678c     F2 16 02 FB | 	rdlong	arg03, objptr
06790     6A 00 00 FF 
06794     6C E4 85 F1 | 	sub	objptr, ##54380
06798     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0679c     0C 00 90 ED |  if_be	jmp	#LR__0571
067a0     0F 13 02 F6 | 	mov	arg01, local01
067a4     0C F2 BF FD | 	call	#_add_line_at_end
067a8     38 00 90 FD | 	jmp	#LR__0574
067ac                 | LR__0571
067ac     0F 13 02 F6 | 	mov	arg01, local01
067b0     3C EB BF FD | 	call	#_deleteline
067b4                 | '       deleteline(alinemajor)  
067b4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
067b4     6A 00 00 FF 
067b8     6C E4 05 F1 | 	add	objptr, ##54380
067bc     F2 16 02 FB | 	rdlong	arg03, objptr
067c0     6A 00 00 FF 
067c4     6C E4 85 F1 | 	sub	objptr, ##54380
067c8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
067cc     0C 00 90 ED |  if_be	jmp	#LR__0572
067d0     0F 13 02 F6 | 	mov	arg01, local01
067d4     DC F1 BF FD | 	call	#_add_line_at_end
067d8     08 00 90 FD | 	jmp	#LR__0573
067dc                 | LR__0572
067dc     0F 13 02 F6 | 	mov	arg01, local01
067e0     B4 EF BF FD | 	call	#_insertline
067e4                 | LR__0573
067e4                 | LR__0574
067e4                 | LR__0575
067e4                 | LR__0576
067e4                 | ' return err
067e4     12 FB 01 F6 | 	mov	result1, local04
067e8                 | LR__0577
067e8     A7 F0 03 F6 | 	mov	ptra, fp
067ec     B2 00 A0 FD | 	call	#popregs_
067f0                 | _compile_ret
067f0     2D 00 64 FD | 	ret
067f4                 | 
067f4                 | ' 
067f4                 | ' ' ------------------ compile the line that is assigning to a variable
067f4                 | ' 
067f4                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
067f4                 | _compile_assign
067f4     03 4A 05 F6 | 	mov	COUNT_, #3
067f8     A8 00 A0 FD | 	call	#pushregs_
067fc     09 1F 0A F6 | 	mov	local01, arg01 wz
06800     0A 21 02 F6 | 	mov	local02, arg02
06804     0B 23 02 F6 | 	mov	local03, arg03
06808                 | ' 
06808                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06808                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06808     0C 00 90 5D |  if_ne	jmp	#LR__0580
0680c     00 12 06 F6 | 	mov	arg01, #0
06810     28 FC BF FD | 	call	#_compile_immediate_assign
06814     94 00 90 FD | 	jmp	#LR__0586
06818                 | LR__0580
06818     67 00 00 FF 
0681c     60 E4 05 F1 | 	add	objptr, ##52832
06820     F2 1E 62 FC | 	wrlong	local01, objptr
06824     04 E4 05 F1 | 	add	objptr, #4
06828     F2 20 62 FC | 	wrlong	local02, objptr
0682c     67 00 00 FF 
06830     64 E4 85 F1 | 	sub	objptr, ##52836
06834     11 13 02 F6 | 	mov	arg01, local03
06838     01 12 06 F1 | 	add	arg01, #1
0683c     FC FB BF FD | 	call	#_compile_immediate_assign
06840                 | ' 
06840                 | ' ucompiledline(0)=alinemajor
06840                 | ' ucompiledline(1)=alineminor
06840                 | ' 
06840                 | ' compile_immediate_assign(cont+1) 
06840                 | ' 
06840                 | ' if cont=3 orelse cont=2 then 
06840     03 22 0E F2 | 	cmp	local03, #3 wz
06844     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06848     60 00 90 5D |  if_ne	jmp	#LR__0585
0684c                 | '   if alinemajor >lastline then 
0684c     6A 00 00 FF 
06850     6C E4 05 F1 | 	add	objptr, ##54380
06854     F2 16 02 FB | 	rdlong	arg03, objptr
06858     6A 00 00 FF 
0685c     6C E4 85 F1 | 	sub	objptr, ##54380
06860     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06864     0C 00 90 ED |  if_be	jmp	#LR__0581
06868     0F 13 02 F6 | 	mov	arg01, local01
0686c     44 F1 BF FD | 	call	#_add_line_at_end
06870     38 00 90 FD | 	jmp	#LR__0584
06874                 | LR__0581
06874     0F 13 02 F6 | 	mov	arg01, local01
06878     74 EA BF FD | 	call	#_deleteline
0687c                 | '     deleteline(alinemajor)  
0687c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0687c     6A 00 00 FF 
06880     6C E4 05 F1 | 	add	objptr, ##54380
06884     F2 16 02 FB | 	rdlong	arg03, objptr
06888     6A 00 00 FF 
0688c     6C E4 85 F1 | 	sub	objptr, ##54380
06890     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06894     0C 00 90 ED |  if_be	jmp	#LR__0582
06898     0F 13 02 F6 | 	mov	arg01, local01
0689c     14 F1 BF FD | 	call	#_add_line_at_end
068a0     08 00 90 FD | 	jmp	#LR__0583
068a4                 | LR__0582
068a4     0F 13 02 F6 | 	mov	arg01, local01
068a8     EC EE BF FD | 	call	#_insertline
068ac                 | LR__0583
068ac                 | LR__0584
068ac                 | LR__0585
068ac                 | LR__0586
068ac     A7 F0 03 F6 | 	mov	ptra, fp
068b0     B2 00 A0 FD | 	call	#popregs_
068b4                 | _compile_assign_ret
068b4     2D 00 64 FD | 	ret
068b8                 | 
068b8                 | ' 
068b8                 | ' sub compile_error(errno)
068b8                 | _compile_error
068b8     FF 04 06 F6 | 	mov	_var03, #255
068bc     01 07 02 F6 | 	mov	_var04, _var02
068c0     02 09 02 F6 | 	mov	_var05, _var03
068c4     6A 00 00 FF 
068c8     60 E4 05 F1 | 	add	objptr, ##54368
068cc     F2 0A 02 FB | 	rdlong	_var06, objptr
068d0     05 0D 02 F6 | 	mov	_var07, _var06
068d4     01 0C 66 F0 | 	shl	_var07, #1
068d8     05 0D 02 F1 | 	add	_var07, _var06
068dc     02 0C 66 F0 | 	shl	_var07, #2
068e0     03 00 00 FF 
068e4     00 E4 85 F1 | 	sub	objptr, ##1536
068e8     F2 0C 02 F1 | 	add	_var07, objptr
068ec     06 13 62 FC | 	wrlong	arg01, _var07
068f0     03 00 00 FF 
068f4     00 E4 05 F1 | 	add	objptr, ##1536
068f8     F2 0C 02 FB | 	rdlong	_var07, objptr
068fc     06 0B 02 F6 | 	mov	_var06, _var07
06900     01 0A 66 F0 | 	shl	_var06, #1
06904     06 0B 02 F1 | 	add	_var06, _var07
06908     02 0A 66 F0 | 	shl	_var06, #2
0690c     03 00 00 FF 
06910     00 E4 85 F1 | 	sub	objptr, ##1536
06914     F2 0A 02 F1 | 	add	_var06, objptr
06918     04 0A 06 F1 | 	add	_var06, #4
0691c     05 07 62 FC | 	wrlong	_var04, _var06
06920     03 00 00 FF 
06924     00 E4 05 F1 | 	add	objptr, ##1536
06928     F2 0C 02 FB | 	rdlong	_var07, objptr
0692c     06 0B 02 F6 | 	mov	_var06, _var07
06930     01 0A 66 F0 | 	shl	_var06, #1
06934     06 0B 02 F1 | 	add	_var06, _var07
06938     02 0A 66 F0 | 	shl	_var06, #2
0693c     03 00 00 FF 
06940     00 E4 85 F1 | 	sub	objptr, ##1536
06944     F2 0A 02 F1 | 	add	_var06, objptr
06948     08 0A 06 F1 | 	add	_var06, #8
0694c     05 09 62 FC | 	wrlong	_var05, _var06
06950     03 00 00 FF 
06954     00 E4 05 F1 | 	add	objptr, ##1536
06958     F2 12 02 FB | 	rdlong	arg01, objptr
0695c     01 12 06 F1 | 	add	arg01, #1
06960     F2 12 62 FC | 	wrlong	arg01, objptr
06964     6A 00 00 FF 
06968     60 E4 85 F1 | 	sub	objptr, ##54368
0696c                 | _compile_error_ret
0696c     2D 00 64 FD | 	ret
06970                 | 
06970                 | ' 
06970                 | ' sub compile_unknown() 
06970                 | _compile_unknown
06970     FF 04 06 F6 | 	mov	_var03, #255
06974     17 00 06 F6 | 	mov	_var01, #23
06978     01 07 02 F6 | 	mov	_var04, _var02
0697c     02 01 02 F6 | 	mov	_var01, _var03
06980     6A 00 00 FF 
06984     60 E4 05 F1 | 	add	objptr, ##54368
06988     F2 08 02 FB | 	rdlong	_var05, objptr
0698c     04 0B 02 F6 | 	mov	_var06, _var05
06990     01 0A 66 F0 | 	shl	_var06, #1
06994     04 0B 02 F1 | 	add	_var06, _var05
06998     02 0A 66 F0 | 	shl	_var06, #2
0699c     03 00 00 FF 
069a0     00 E4 85 F1 | 	sub	objptr, ##1536
069a4     F2 0A 02 F1 | 	add	_var06, objptr
069a8     05 2F 68 FC | 	wrlong	#23, _var06
069ac     03 00 00 FF 
069b0     00 E4 05 F1 | 	add	objptr, ##1536
069b4     F2 0A 02 FB | 	rdlong	_var06, objptr
069b8     05 09 02 F6 | 	mov	_var05, _var06
069bc     01 08 66 F0 | 	shl	_var05, #1
069c0     05 09 02 F1 | 	add	_var05, _var06
069c4     02 08 66 F0 | 	shl	_var05, #2
069c8     03 00 00 FF 
069cc     00 E4 85 F1 | 	sub	objptr, ##1536
069d0     F2 08 02 F1 | 	add	_var05, objptr
069d4     04 08 06 F1 | 	add	_var05, #4
069d8     04 07 62 FC | 	wrlong	_var04, _var05
069dc     03 00 00 FF 
069e0     00 E4 05 F1 | 	add	objptr, ##1536
069e4     F2 0A 02 FB | 	rdlong	_var06, objptr
069e8     05 09 02 F6 | 	mov	_var05, _var06
069ec     01 08 66 F0 | 	shl	_var05, #1
069f0     05 09 02 F1 | 	add	_var05, _var06
069f4     02 08 66 F0 | 	shl	_var05, #2
069f8     03 00 00 FF 
069fc     00 E4 85 F1 | 	sub	objptr, ##1536
06a00     F2 08 02 F1 | 	add	_var05, objptr
06a04     08 08 06 F1 | 	add	_var05, #8
06a08     04 01 62 FC | 	wrlong	_var01, _var05
06a0c     03 00 00 FF 
06a10     00 E4 05 F1 | 	add	objptr, ##1536
06a14     F2 0A 02 FB | 	rdlong	_var06, objptr
06a18     01 0A 06 F1 | 	add	_var06, #1
06a1c     F2 0A 62 FC | 	wrlong	_var06, objptr
06a20     6A 00 00 FF 
06a24     60 E4 85 F1 | 	sub	objptr, ##54368
06a28                 | _compile_unknown_ret
06a28     2D 00 64 FD | 	ret
06a2c                 | 
06a2c                 | ' 
06a2c                 | ' function compile_fun_2p() as ulong
06a2c                 | _compile_fun_2p
06a2c     01 4A 05 F6 | 	mov	COUNT_, #1
06a30     A8 00 A0 FD | 	call	#pushregs_
06a34     08 22 B0 FD | 	call	#_expr
06a38                 | ' 
06a38                 | ' expr()
06a38                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06a38     57 00 00 FF 
06a3c     28 E4 05 F1 | 	add	objptr, ##44584
06a40     F2 1E 02 FB | 	rdlong	local01, objptr
06a44     03 1E 66 F0 | 	shl	local01, #3
06a48     02 00 00 FF 
06a4c     38 E4 85 F1 | 	sub	objptr, ##1080
06a50     F2 1E 02 F1 | 	add	local01, objptr
06a54     04 1E 06 F1 | 	add	local01, #4
06a58     0F 1F 02 FB | 	rdlong	local01, local01
06a5c     11 1E 0E F2 | 	cmp	local01, #17 wz
06a60     54 00 00 FF 
06a64     F0 E5 85 F1 | 	sub	objptr, ##43504
06a68     15 FA 05 56 |  if_ne	mov	result1, #21
06a6c     24 00 90 5D |  if_ne	jmp	#LR__0590
06a70     57 00 00 FF 
06a74     28 E4 05 F1 | 	add	objptr, ##44584
06a78     F2 1E 02 FB | 	rdlong	local01, objptr
06a7c     01 1E 06 F1 | 	add	local01, #1
06a80     F2 1E 62 FC | 	wrlong	local01, objptr
06a84     57 00 00 FF 
06a88     28 E4 85 F1 | 	sub	objptr, ##44584
06a8c     B0 21 B0 FD | 	call	#_expr
06a90     00 FA 05 F6 | 	mov	result1, #0
06a94                 | LR__0590
06a94     A7 F0 03 F6 | 	mov	ptra, fp
06a98     B2 00 A0 FD | 	call	#popregs_
06a9c                 | _compile_fun_2p_ret
06a9c     2D 00 64 FD | 	ret
06aa0                 | 
06aa0                 | ' 
06aa0                 | ' function compile_fun_3p() as ulong
06aa0                 | _compile_fun_3p
06aa0     01 4A 05 F6 | 	mov	COUNT_, #1
06aa4     A8 00 A0 FD | 	call	#pushregs_
06aa8     94 21 B0 FD | 	call	#_expr
06aac                 | ' 
06aac                 | ' expr()
06aac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06aac     57 00 00 FF 
06ab0     28 E4 05 F1 | 	add	objptr, ##44584
06ab4     F2 1E 02 FB | 	rdlong	local01, objptr
06ab8     03 1E 66 F0 | 	shl	local01, #3
06abc     02 00 00 FF 
06ac0     38 E4 85 F1 | 	sub	objptr, ##1080
06ac4     F2 1E 02 F1 | 	add	local01, objptr
06ac8     04 1E 06 F1 | 	add	local01, #4
06acc     0F 1F 02 FB | 	rdlong	local01, local01
06ad0     11 1E 0E F2 | 	cmp	local01, #17 wz
06ad4     54 00 00 FF 
06ad8     F0 E5 85 F1 | 	sub	objptr, ##43504
06adc     15 FA 05 56 |  if_ne	mov	result1, #21
06ae0     7C 00 90 5D |  if_ne	jmp	#LR__0600
06ae4     57 00 00 FF 
06ae8     28 E4 05 F1 | 	add	objptr, ##44584
06aec     F2 1E 02 FB | 	rdlong	local01, objptr
06af0     01 1E 06 F1 | 	add	local01, #1
06af4     F2 1E 62 FC | 	wrlong	local01, objptr
06af8     57 00 00 FF 
06afc     28 E4 85 F1 | 	sub	objptr, ##44584
06b00     3C 21 B0 FD | 	call	#_expr
06b04                 | ' expr()
06b04                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b04     57 00 00 FF 
06b08     28 E4 05 F1 | 	add	objptr, ##44584
06b0c     F2 1E 02 FB | 	rdlong	local01, objptr
06b10     03 1E 66 F0 | 	shl	local01, #3
06b14     02 00 00 FF 
06b18     38 E4 85 F1 | 	sub	objptr, ##1080
06b1c     F2 1E 02 F1 | 	add	local01, objptr
06b20     04 1E 06 F1 | 	add	local01, #4
06b24     0F 1F 02 FB | 	rdlong	local01, local01
06b28     11 1E 0E F2 | 	cmp	local01, #17 wz
06b2c     54 00 00 FF 
06b30     F0 E5 85 F1 | 	sub	objptr, ##43504
06b34     15 FA 05 56 |  if_ne	mov	result1, #21
06b38     24 00 90 5D |  if_ne	jmp	#LR__0600
06b3c     57 00 00 FF 
06b40     28 E4 05 F1 | 	add	objptr, ##44584
06b44     F2 1E 02 FB | 	rdlong	local01, objptr
06b48     01 1E 06 F1 | 	add	local01, #1
06b4c     F2 1E 62 FC | 	wrlong	local01, objptr
06b50     57 00 00 FF 
06b54     28 E4 85 F1 | 	sub	objptr, ##44584
06b58     E4 20 B0 FD | 	call	#_expr
06b5c     00 FA 05 F6 | 	mov	result1, #0
06b60                 | LR__0600
06b60     A7 F0 03 F6 | 	mov	ptra, fp
06b64     B2 00 A0 FD | 	call	#popregs_
06b68                 | _compile_fun_3p_ret
06b68     2D 00 64 FD | 	ret
06b6c                 | 
06b6c                 | ' 
06b6c                 | ' function compile_fun_4p() as ulong
06b6c                 | _compile_fun_4p
06b6c     01 4A 05 F6 | 	mov	COUNT_, #1
06b70     A8 00 A0 FD | 	call	#pushregs_
06b74     C8 20 B0 FD | 	call	#_expr
06b78                 | ' 
06b78                 | ' expr()
06b78                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b78     57 00 00 FF 
06b7c     28 E4 05 F1 | 	add	objptr, ##44584
06b80     F2 1E 02 FB | 	rdlong	local01, objptr
06b84     03 1E 66 F0 | 	shl	local01, #3
06b88     02 00 00 FF 
06b8c     38 E4 85 F1 | 	sub	objptr, ##1080
06b90     F2 1E 02 F1 | 	add	local01, objptr
06b94     04 1E 06 F1 | 	add	local01, #4
06b98     0F 1F 02 FB | 	rdlong	local01, local01
06b9c     11 1E 0E F2 | 	cmp	local01, #17 wz
06ba0     54 00 00 FF 
06ba4     F0 E5 85 F1 | 	sub	objptr, ##43504
06ba8     15 FA 05 56 |  if_ne	mov	result1, #21
06bac     D4 00 90 5D |  if_ne	jmp	#LR__0610
06bb0     57 00 00 FF 
06bb4     28 E4 05 F1 | 	add	objptr, ##44584
06bb8     F2 1E 02 FB | 	rdlong	local01, objptr
06bbc     01 1E 06 F1 | 	add	local01, #1
06bc0     F2 1E 62 FC | 	wrlong	local01, objptr
06bc4     57 00 00 FF 
06bc8     28 E4 85 F1 | 	sub	objptr, ##44584
06bcc     70 20 B0 FD | 	call	#_expr
06bd0                 | ' expr()
06bd0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06bd0     57 00 00 FF 
06bd4     28 E4 05 F1 | 	add	objptr, ##44584
06bd8     F2 1E 02 FB | 	rdlong	local01, objptr
06bdc     03 1E 66 F0 | 	shl	local01, #3
06be0     02 00 00 FF 
06be4     38 E4 85 F1 | 	sub	objptr, ##1080
06be8     F2 1E 02 F1 | 	add	local01, objptr
06bec     04 1E 06 F1 | 	add	local01, #4
06bf0     0F 1F 02 FB | 	rdlong	local01, local01
06bf4     11 1E 0E F2 | 	cmp	local01, #17 wz
06bf8     54 00 00 FF 
06bfc     F0 E5 85 F1 | 	sub	objptr, ##43504
06c00     15 FA 05 56 |  if_ne	mov	result1, #21
06c04     7C 00 90 5D |  if_ne	jmp	#LR__0610
06c08     57 00 00 FF 
06c0c     28 E4 05 F1 | 	add	objptr, ##44584
06c10     F2 1E 02 FB | 	rdlong	local01, objptr
06c14     01 1E 06 F1 | 	add	local01, #1
06c18     F2 1E 62 FC | 	wrlong	local01, objptr
06c1c     57 00 00 FF 
06c20     28 E4 85 F1 | 	sub	objptr, ##44584
06c24     18 20 B0 FD | 	call	#_expr
06c28                 | ' expr()
06c28                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c28     57 00 00 FF 
06c2c     28 E4 05 F1 | 	add	objptr, ##44584
06c30     F2 1E 02 FB | 	rdlong	local01, objptr
06c34     03 1E 66 F0 | 	shl	local01, #3
06c38     02 00 00 FF 
06c3c     38 E4 85 F1 | 	sub	objptr, ##1080
06c40     F2 1E 02 F1 | 	add	local01, objptr
06c44     04 1E 06 F1 | 	add	local01, #4
06c48     0F 1F 02 FB | 	rdlong	local01, local01
06c4c     11 1E 0E F2 | 	cmp	local01, #17 wz
06c50     54 00 00 FF 
06c54     F0 E5 85 F1 | 	sub	objptr, ##43504
06c58     15 FA 05 56 |  if_ne	mov	result1, #21
06c5c     24 00 90 5D |  if_ne	jmp	#LR__0610
06c60     57 00 00 FF 
06c64     28 E4 05 F1 | 	add	objptr, ##44584
06c68     F2 1E 02 FB | 	rdlong	local01, objptr
06c6c     01 1E 06 F1 | 	add	local01, #1
06c70     F2 1E 62 FC | 	wrlong	local01, objptr
06c74     57 00 00 FF 
06c78     28 E4 85 F1 | 	sub	objptr, ##44584
06c7c     C0 1F B0 FD | 	call	#_expr
06c80     00 FA 05 F6 | 	mov	result1, #0
06c84                 | LR__0610
06c84     A7 F0 03 F6 | 	mov	ptra, fp
06c88     B2 00 A0 FD | 	call	#popregs_
06c8c                 | _compile_fun_4p_ret
06c8c     2D 00 64 FD | 	ret
06c90                 | 
06c90                 | ' 
06c90                 | ' 
06c90                 | ' function compile_fun_5p() as ulong
06c90                 | _compile_fun_5p
06c90     01 4A 05 F6 | 	mov	COUNT_, #1
06c94     A8 00 A0 FD | 	call	#pushregs_
06c98     A4 1F B0 FD | 	call	#_expr
06c9c                 | ' 
06c9c                 | ' expr()
06c9c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c9c     57 00 00 FF 
06ca0     28 E4 05 F1 | 	add	objptr, ##44584
06ca4     F2 1E 02 FB | 	rdlong	local01, objptr
06ca8     03 1E 66 F0 | 	shl	local01, #3
06cac     02 00 00 FF 
06cb0     38 E4 85 F1 | 	sub	objptr, ##1080
06cb4     F2 1E 02 F1 | 	add	local01, objptr
06cb8     04 1E 06 F1 | 	add	local01, #4
06cbc     0F 1F 02 FB | 	rdlong	local01, local01
06cc0     11 1E 0E F2 | 	cmp	local01, #17 wz
06cc4     54 00 00 FF 
06cc8     F0 E5 85 F1 | 	sub	objptr, ##43504
06ccc     15 FA 05 56 |  if_ne	mov	result1, #21
06cd0     2C 01 90 5D |  if_ne	jmp	#LR__0620
06cd4     57 00 00 FF 
06cd8     28 E4 05 F1 | 	add	objptr, ##44584
06cdc     F2 1E 02 FB | 	rdlong	local01, objptr
06ce0     01 1E 06 F1 | 	add	local01, #1
06ce4     F2 1E 62 FC | 	wrlong	local01, objptr
06ce8     57 00 00 FF 
06cec     28 E4 85 F1 | 	sub	objptr, ##44584
06cf0     4C 1F B0 FD | 	call	#_expr
06cf4                 | ' expr()
06cf4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cf4     57 00 00 FF 
06cf8     28 E4 05 F1 | 	add	objptr, ##44584
06cfc     F2 1E 02 FB | 	rdlong	local01, objptr
06d00     03 1E 66 F0 | 	shl	local01, #3
06d04     02 00 00 FF 
06d08     38 E4 85 F1 | 	sub	objptr, ##1080
06d0c     F2 1E 02 F1 | 	add	local01, objptr
06d10     04 1E 06 F1 | 	add	local01, #4
06d14     0F 1F 02 FB | 	rdlong	local01, local01
06d18     11 1E 0E F2 | 	cmp	local01, #17 wz
06d1c     54 00 00 FF 
06d20     F0 E5 85 F1 | 	sub	objptr, ##43504
06d24     15 FA 05 56 |  if_ne	mov	result1, #21
06d28     D4 00 90 5D |  if_ne	jmp	#LR__0620
06d2c     57 00 00 FF 
06d30     28 E4 05 F1 | 	add	objptr, ##44584
06d34     F2 1E 02 FB | 	rdlong	local01, objptr
06d38     01 1E 06 F1 | 	add	local01, #1
06d3c     F2 1E 62 FC | 	wrlong	local01, objptr
06d40     57 00 00 FF 
06d44     28 E4 85 F1 | 	sub	objptr, ##44584
06d48     F4 1E B0 FD | 	call	#_expr
06d4c                 | ' expr()
06d4c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d4c     57 00 00 FF 
06d50     28 E4 05 F1 | 	add	objptr, ##44584
06d54     F2 1E 02 FB | 	rdlong	local01, objptr
06d58     03 1E 66 F0 | 	shl	local01, #3
06d5c     02 00 00 FF 
06d60     38 E4 85 F1 | 	sub	objptr, ##1080
06d64     F2 1E 02 F1 | 	add	local01, objptr
06d68     04 1E 06 F1 | 	add	local01, #4
06d6c     0F 1F 02 FB | 	rdlong	local01, local01
06d70     11 1E 0E F2 | 	cmp	local01, #17 wz
06d74     54 00 00 FF 
06d78     F0 E5 85 F1 | 	sub	objptr, ##43504
06d7c     15 FA 05 56 |  if_ne	mov	result1, #21
06d80     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d84     57 00 00 FF 
06d88     28 E4 05 F1 | 	add	objptr, ##44584
06d8c     F2 1E 02 FB | 	rdlong	local01, objptr
06d90     01 1E 06 F1 | 	add	local01, #1
06d94     F2 1E 62 FC | 	wrlong	local01, objptr
06d98     57 00 00 FF 
06d9c     28 E4 85 F1 | 	sub	objptr, ##44584
06da0     9C 1E B0 FD | 	call	#_expr
06da4                 | ' expr()
06da4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06da4     57 00 00 FF 
06da8     28 E4 05 F1 | 	add	objptr, ##44584
06dac     F2 1E 02 FB | 	rdlong	local01, objptr
06db0     03 1E 66 F0 | 	shl	local01, #3
06db4     02 00 00 FF 
06db8     38 E4 85 F1 | 	sub	objptr, ##1080
06dbc     F2 1E 02 F1 | 	add	local01, objptr
06dc0     04 1E 06 F1 | 	add	local01, #4
06dc4     0F 1F 02 FB | 	rdlong	local01, local01
06dc8     11 1E 0E F2 | 	cmp	local01, #17 wz
06dcc     54 00 00 FF 
06dd0     F0 E5 85 F1 | 	sub	objptr, ##43504
06dd4     15 FA 05 56 |  if_ne	mov	result1, #21
06dd8     24 00 90 5D |  if_ne	jmp	#LR__0620
06ddc     57 00 00 FF 
06de0     28 E4 05 F1 | 	add	objptr, ##44584
06de4     F2 1E 02 FB | 	rdlong	local01, objptr
06de8     01 1E 06 F1 | 	add	local01, #1
06dec     F2 1E 62 FC | 	wrlong	local01, objptr
06df0     57 00 00 FF 
06df4     28 E4 85 F1 | 	sub	objptr, ##44584
06df8     44 1E B0 FD | 	call	#_expr
06dfc     00 FA 05 F6 | 	mov	result1, #0
06e00                 | LR__0620
06e00     A7 F0 03 F6 | 	mov	ptra, fp
06e04     B2 00 A0 FD | 	call	#popregs_
06e08                 | _compile_fun_5p_ret
06e08     2D 00 64 FD | 	ret
06e0c                 | 
06e0c                 | ' 
06e0c                 | ' function compile_fun_varp() as ulong 
06e0c                 | _compile_fun_varp
06e0c     02 4A 05 F6 | 	mov	COUNT_, #2
06e10     A8 00 A0 FD | 	call	#pushregs_
06e14     00 1E 06 F6 | 	mov	local01, #0
06e18                 | ' i=0
06e18                 | ' if lparts(ct).token<>token_end then
06e18     57 00 00 FF 
06e1c     28 E4 05 F1 | 	add	objptr, ##44584
06e20     F2 20 02 FB | 	rdlong	local02, objptr
06e24     03 20 66 F0 | 	shl	local02, #3
06e28     02 00 00 FF 
06e2c     38 E4 85 F1 | 	sub	objptr, ##1080
06e30     F2 20 02 F1 | 	add	local02, objptr
06e34     04 20 06 F1 | 	add	local02, #4
06e38     10 21 02 FB | 	rdlong	local02, local02
06e3c     FE 21 0E F2 | 	cmp	local02, #510 wz
06e40     54 00 00 FF 
06e44     F0 E5 85 F1 | 	sub	objptr, ##43504
06e48     5C 00 90 AD |  if_e	jmp	#LR__0632
06e4c                 | '   do
06e4c                 | LR__0630
06e4c     F0 1D B0 FD | 	call	#_expr
06e50     01 1E 06 F1 | 	add	local01, #1
06e54                 | '   expr()
06e54                 | '    i+=1
06e54                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06e54     57 00 00 FF 
06e58     28 E4 05 F1 | 	add	objptr, ##44584
06e5c     F2 20 02 FB | 	rdlong	local02, objptr
06e60     03 20 66 F0 | 	shl	local02, #3
06e64     02 00 00 FF 
06e68     38 E4 85 F1 | 	sub	objptr, ##1080
06e6c     F2 20 02 F1 | 	add	local02, objptr
06e70     04 20 06 F1 | 	add	local02, #4
06e74     10 21 02 FB | 	rdlong	local02, local02
06e78     11 20 0E F2 | 	cmp	local02, #17 wz
06e7c     54 00 00 FF 
06e80     F0 E5 85 F1 | 	sub	objptr, ##43504
06e84     20 00 90 5D |  if_ne	jmp	#LR__0631
06e88     57 00 00 FF 
06e8c     28 E4 05 F1 | 	add	objptr, ##44584
06e90     F2 20 02 FB | 	rdlong	local02, objptr
06e94     01 20 06 F1 | 	add	local02, #1
06e98     F2 20 62 FC | 	wrlong	local02, objptr
06e9c     57 00 00 FF 
06ea0     28 E4 85 F1 | 	sub	objptr, ##44584
06ea4     A4 FF 9F FD | 	jmp	#LR__0630
06ea8                 | LR__0631
06ea8                 | LR__0632
06ea8                 | ' return i
06ea8     0F FB 01 F6 | 	mov	result1, local01
06eac     A7 F0 03 F6 | 	mov	ptra, fp
06eb0     B2 00 A0 FD | 	call	#popregs_
06eb4                 | _compile_fun_varp_ret
06eb4     2D 00 64 FD | 	ret
06eb8                 | 
06eb8                 | ' 
06eb8                 | ' 
06eb8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06eb8                 | _compile_print
06eb8     0B 4A 05 F6 | 	mov	COUNT_, #11
06ebc     A8 00 A0 FD | 	call	#pushregs_
06ec0     00 1E 06 F6 | 	mov	local01, #0
06ec4     1D 22 06 F6 | 	mov	local03, #29
06ec8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06ec8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06ec8     57 00 00 FF 
06ecc     28 E4 05 F1 | 	add	objptr, ##44584
06ed0     F2 24 02 FB | 	rdlong	local04, objptr
06ed4     03 24 66 F0 | 	shl	local04, #3
06ed8     02 00 00 FF 
06edc     38 E4 85 F1 | 	sub	objptr, ##1080
06ee0     F2 24 02 F1 | 	add	local04, objptr
06ee4     04 24 06 F1 | 	add	local04, #4
06ee8     12 25 02 FB | 	rdlong	local04, local04
06eec     FE 25 0E F2 | 	cmp	local04, #510 wz
06ef0     54 00 00 FF 
06ef4     F0 E5 85 F1 | 	sub	objptr, ##43504
06ef8     68 01 90 5D |  if_ne	jmp	#LR__0640
06efc     20 22 06 F6 | 	mov	local03, #32
06f00     0F 27 02 F6 | 	mov	local05, local01
06f04     10 29 02 F6 | 	mov	local06, local02
06f08     11 2B 02 F6 | 	mov	local07, local03
06f0c     6A 00 00 FF 
06f10     60 E4 05 F1 | 	add	objptr, ##54368
06f14     F2 2C 02 FB | 	rdlong	local08, objptr
06f18     16 2F 02 F6 | 	mov	local09, local08
06f1c     01 2E 66 F0 | 	shl	local09, #1
06f20     16 2F 02 F1 | 	add	local09, local08
06f24     02 2E 66 F0 | 	shl	local09, #2
06f28     03 00 00 FF 
06f2c     00 E4 85 F1 | 	sub	objptr, ##1536
06f30     F2 2E 02 F1 | 	add	local09, objptr
06f34     17 27 62 FC | 	wrlong	local05, local09
06f38     03 00 00 FF 
06f3c     00 E4 05 F1 | 	add	objptr, ##1536
06f40     F2 26 02 FB | 	rdlong	local05, objptr
06f44     13 31 02 F6 | 	mov	local10, local05
06f48     01 30 66 F0 | 	shl	local10, #1
06f4c     13 31 02 F1 | 	add	local10, local05
06f50     02 30 66 F0 | 	shl	local10, #2
06f54     03 00 00 FF 
06f58     00 E4 85 F1 | 	sub	objptr, ##1536
06f5c     F2 30 02 F1 | 	add	local10, objptr
06f60     04 30 06 F1 | 	add	local10, #4
06f64     18 29 62 FC | 	wrlong	local06, local10
06f68     03 00 00 FF 
06f6c     00 E4 05 F1 | 	add	objptr, ##1536
06f70     F2 26 02 FB | 	rdlong	local05, objptr
06f74     13 33 02 F6 | 	mov	local11, local05
06f78     01 32 66 F0 | 	shl	local11, #1
06f7c     13 33 02 F1 | 	add	local11, local05
06f80     02 32 66 F0 | 	shl	local11, #2
06f84     03 00 00 FF 
06f88     00 E4 85 F1 | 	sub	objptr, ##1536
06f8c     F2 32 02 F1 | 	add	local11, objptr
06f90     08 32 06 F1 | 	add	local11, #8
06f94     19 2B 62 FC | 	wrlong	local07, local11
06f98     03 00 00 FF 
06f9c     00 E4 05 F1 | 	add	objptr, ##1536
06fa0     F2 26 02 FB | 	rdlong	local05, objptr
06fa4     01 26 06 F1 | 	add	local05, #1
06fa8     F2 26 62 FC | 	wrlong	local05, objptr
06fac     44 22 06 F6 | 	mov	local03, #68
06fb0     0F 27 02 F6 | 	mov	local05, local01
06fb4     10 29 02 F6 | 	mov	local06, local02
06fb8     11 2B 02 F6 | 	mov	local07, local03
06fbc     F2 2C 02 FB | 	rdlong	local08, objptr
06fc0     16 2F 02 F6 | 	mov	local09, local08
06fc4     01 2E 66 F0 | 	shl	local09, #1
06fc8     16 2F 02 F1 | 	add	local09, local08
06fcc     02 2E 66 F0 | 	shl	local09, #2
06fd0     03 00 00 FF 
06fd4     00 E4 85 F1 | 	sub	objptr, ##1536
06fd8     F2 2E 02 F1 | 	add	local09, objptr
06fdc     17 27 62 FC | 	wrlong	local05, local09
06fe0     03 00 00 FF 
06fe4     00 E4 05 F1 | 	add	objptr, ##1536
06fe8     F2 32 02 FB | 	rdlong	local11, objptr
06fec     19 31 02 F6 | 	mov	local10, local11
06ff0     01 30 66 F0 | 	shl	local10, #1
06ff4     19 31 02 F1 | 	add	local10, local11
06ff8     02 30 66 F0 | 	shl	local10, #2
06ffc     03 00 00 FF 
07000     00 E4 85 F1 | 	sub	objptr, ##1536
07004     F2 30 02 F1 | 	add	local10, objptr
07008     04 30 06 F1 | 	add	local10, #4
0700c     18 29 62 FC | 	wrlong	local06, local10
07010     03 00 00 FF 
07014     00 E4 05 F1 | 	add	objptr, ##1536
07018     F2 30 02 FB | 	rdlong	local10, objptr
0701c     18 33 02 F6 | 	mov	local11, local10
07020     01 32 66 F0 | 	shl	local11, #1
07024     18 33 02 F1 | 	add	local11, local10
07028     02 32 66 F0 | 	shl	local11, #2
0702c     03 00 00 FF 
07030     00 E4 85 F1 | 	sub	objptr, ##1536
07034     F2 32 02 F1 | 	add	local11, objptr
07038     08 32 06 F1 | 	add	local11, #8
0703c     19 2B 62 FC | 	wrlong	local07, local11
07040     03 00 00 FF 
07044     00 E4 05 F1 | 	add	objptr, ##1536
07048     F2 26 02 FB | 	rdlong	local05, objptr
0704c     01 26 06 F1 | 	add	local05, #1
07050     F2 26 62 FC | 	wrlong	local05, objptr
07054     6A 00 00 FF 
07058     60 E4 85 F1 | 	sub	objptr, ##54368
0705c     00 FA 05 F6 | 	mov	result1, #0
07060     20 05 90 FD | 	jmp	#LR__0647
07064                 | LR__0640
07064                 | ' do
07064                 | LR__0641
07064     D8 1B B0 FD | 	call	#_expr
07068                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
07068                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07068     57 00 00 FF 
0706c     28 E4 05 F1 | 	add	objptr, ##44584
07070     F2 24 02 FB | 	rdlong	local04, objptr
07074     03 24 66 F0 | 	shl	local04, #3
07078     02 00 00 FF 
0707c     38 E4 85 F1 | 	sub	objptr, ##1080
07080     F2 24 02 F1 | 	add	local04, objptr
07084     04 24 06 F1 | 	add	local04, #4
07088     12 2D 02 FB | 	rdlong	local08, local04
0708c     11 2C 0E F2 | 	cmp	local08, #17 wz
07090     54 00 00 FF 
07094     F0 E5 85 F1 | 	sub	objptr, ##43504
07098     60 01 90 5D |  if_ne	jmp	#LR__0642
0709c     21 22 06 F6 | 	mov	local03, #33
070a0     0F 27 02 F6 | 	mov	local05, local01
070a4     10 29 02 F6 | 	mov	local06, local02
070a8     11 2B 02 F6 | 	mov	local07, local03
070ac     6A 00 00 FF 
070b0     60 E4 05 F1 | 	add	objptr, ##54368
070b4     F2 2C 02 FB | 	rdlong	local08, objptr
070b8     16 2F 02 F6 | 	mov	local09, local08
070bc     01 2E 66 F0 | 	shl	local09, #1
070c0     16 2F 02 F1 | 	add	local09, local08
070c4     02 2E 66 F0 | 	shl	local09, #2
070c8     03 00 00 FF 
070cc     00 E4 85 F1 | 	sub	objptr, ##1536
070d0     F2 2E 02 F1 | 	add	local09, objptr
070d4     17 27 62 FC | 	wrlong	local05, local09
070d8     03 00 00 FF 
070dc     00 E4 05 F1 | 	add	objptr, ##1536
070e0     F2 32 02 FB | 	rdlong	local11, objptr
070e4     19 31 02 F6 | 	mov	local10, local11
070e8     01 30 66 F0 | 	shl	local10, #1
070ec     19 31 02 F1 | 	add	local10, local11
070f0     02 30 66 F0 | 	shl	local10, #2
070f4     03 00 00 FF 
070f8     00 E4 85 F1 | 	sub	objptr, ##1536
070fc     F2 30 02 F1 | 	add	local10, objptr
07100     04 30 06 F1 | 	add	local10, #4
07104     18 29 62 FC | 	wrlong	local06, local10
07108     03 00 00 FF 
0710c     00 E4 05 F1 | 	add	objptr, ##1536
07110     F2 26 02 FB | 	rdlong	local05, objptr
07114     13 33 02 F6 | 	mov	local11, local05
07118     01 32 66 F0 | 	shl	local11, #1
0711c     13 33 02 F1 | 	add	local11, local05
07120     02 32 66 F0 | 	shl	local11, #2
07124     03 00 00 FF 
07128     00 E4 85 F1 | 	sub	objptr, ##1536
0712c     F2 32 02 F1 | 	add	local11, objptr
07130     08 32 06 F1 | 	add	local11, #8
07134     19 2B 62 FC | 	wrlong	local07, local11
07138     03 00 00 FF 
0713c     00 E4 05 F1 | 	add	objptr, ##1536
07140     F2 26 02 FB | 	rdlong	local05, objptr
07144     01 26 06 F1 | 	add	local05, #1
07148     F2 26 62 FC | 	wrlong	local05, objptr
0714c     44 22 06 F6 | 	mov	local03, #68
07150     0F 27 02 F6 | 	mov	local05, local01
07154     10 29 02 F6 | 	mov	local06, local02
07158     11 2B 02 F6 | 	mov	local07, local03
0715c     F2 2C 02 FB | 	rdlong	local08, objptr
07160     16 2F 02 F6 | 	mov	local09, local08
07164     01 2E 66 F0 | 	shl	local09, #1
07168     16 2F 02 F1 | 	add	local09, local08
0716c     02 2E 66 F0 | 	shl	local09, #2
07170     03 00 00 FF 
07174     00 E4 85 F1 | 	sub	objptr, ##1536
07178     F2 2E 02 F1 | 	add	local09, objptr
0717c     17 27 62 FC | 	wrlong	local05, local09
07180     03 00 00 FF 
07184     00 E4 05 F1 | 	add	objptr, ##1536
07188     F2 32 02 FB | 	rdlong	local11, objptr
0718c     19 31 02 F6 | 	mov	local10, local11
07190     01 30 66 F0 | 	shl	local10, #1
07194     19 31 02 F1 | 	add	local10, local11
07198     02 30 66 F0 | 	shl	local10, #2
0719c     03 00 00 FF 
071a0     00 E4 85 F1 | 	sub	objptr, ##1536
071a4     F2 30 02 F1 | 	add	local10, objptr
071a8     04 30 06 F1 | 	add	local10, #4
071ac     18 29 62 FC | 	wrlong	local06, local10
071b0     03 00 00 FF 
071b4     00 E4 05 F1 | 	add	objptr, ##1536
071b8     F2 30 02 FB | 	rdlong	local10, objptr
071bc     18 33 02 F6 | 	mov	local11, local10
071c0     01 32 66 F0 | 	shl	local11, #1
071c4     18 33 02 F1 | 	add	local11, local10
071c8     02 32 66 F0 | 	shl	local11, #2
071cc     03 00 00 FF 
071d0     00 E4 85 F1 | 	sub	objptr, ##1536
071d4     F2 32 02 F1 | 	add	local11, objptr
071d8     08 32 06 F1 | 	add	local11, #8
071dc     19 2B 62 FC | 	wrlong	local07, local11
071e0     03 00 00 FF 
071e4     00 E4 05 F1 | 	add	objptr, ##1536
071e8     F2 26 02 FB | 	rdlong	local05, objptr
071ec     01 26 06 F1 | 	add	local05, #1
071f0     F2 26 62 FC | 	wrlong	local05, objptr
071f4     6A 00 00 FF 
071f8     60 E4 85 F1 | 	sub	objptr, ##54368
071fc                 | LR__0642
071fc                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
071fc     57 00 00 FF 
07200     28 E4 05 F1 | 	add	objptr, ##44584
07204     F2 24 02 FB | 	rdlong	local04, objptr
07208     03 24 66 F0 | 	shl	local04, #3
0720c     02 00 00 FF 
07210     38 E4 85 F1 | 	sub	objptr, ##1080
07214     F2 24 02 F1 | 	add	local04, objptr
07218     04 24 06 F1 | 	add	local04, #4
0721c     12 2D 02 FB | 	rdlong	local08, local04
07220     12 2C 0E F2 | 	cmp	local08, #18 wz
07224     54 00 00 FF 
07228     F0 E5 85 F1 | 	sub	objptr, ##43504
0722c     60 01 90 5D |  if_ne	jmp	#LR__0643
07230     22 22 06 F6 | 	mov	local03, #34
07234     0F 27 02 F6 | 	mov	local05, local01
07238     10 29 02 F6 | 	mov	local06, local02
0723c     11 2B 02 F6 | 	mov	local07, local03
07240     6A 00 00 FF 
07244     60 E4 05 F1 | 	add	objptr, ##54368
07248     F2 2C 02 FB | 	rdlong	local08, objptr
0724c     16 2F 02 F6 | 	mov	local09, local08
07250     01 2E 66 F0 | 	shl	local09, #1
07254     16 2F 02 F1 | 	add	local09, local08
07258     02 2E 66 F0 | 	shl	local09, #2
0725c     03 00 00 FF 
07260     00 E4 85 F1 | 	sub	objptr, ##1536
07264     F2 2E 02 F1 | 	add	local09, objptr
07268     17 27 62 FC | 	wrlong	local05, local09
0726c     03 00 00 FF 
07270     00 E4 05 F1 | 	add	objptr, ##1536
07274     F2 32 02 FB | 	rdlong	local11, objptr
07278     19 31 02 F6 | 	mov	local10, local11
0727c     01 30 66 F0 | 	shl	local10, #1
07280     19 31 02 F1 | 	add	local10, local11
07284     02 30 66 F0 | 	shl	local10, #2
07288     03 00 00 FF 
0728c     00 E4 85 F1 | 	sub	objptr, ##1536
07290     F2 30 02 F1 | 	add	local10, objptr
07294     04 30 06 F1 | 	add	local10, #4
07298     18 29 62 FC | 	wrlong	local06, local10
0729c     03 00 00 FF 
072a0     00 E4 05 F1 | 	add	objptr, ##1536
072a4     F2 26 02 FB | 	rdlong	local05, objptr
072a8     13 33 02 F6 | 	mov	local11, local05
072ac     01 32 66 F0 | 	shl	local11, #1
072b0     13 33 02 F1 | 	add	local11, local05
072b4     02 32 66 F0 | 	shl	local11, #2
072b8     03 00 00 FF 
072bc     00 E4 85 F1 | 	sub	objptr, ##1536
072c0     F2 32 02 F1 | 	add	local11, objptr
072c4     08 32 06 F1 | 	add	local11, #8
072c8     19 2B 62 FC | 	wrlong	local07, local11
072cc     03 00 00 FF 
072d0     00 E4 05 F1 | 	add	objptr, ##1536
072d4     F2 26 02 FB | 	rdlong	local05, objptr
072d8     01 26 06 F1 | 	add	local05, #1
072dc     F2 26 62 FC | 	wrlong	local05, objptr
072e0     44 22 06 F6 | 	mov	local03, #68
072e4     0F 27 02 F6 | 	mov	local05, local01
072e8     10 29 02 F6 | 	mov	local06, local02
072ec     11 2B 02 F6 | 	mov	local07, local03
072f0     F2 2C 02 FB | 	rdlong	local08, objptr
072f4     16 2F 02 F6 | 	mov	local09, local08
072f8     01 2E 66 F0 | 	shl	local09, #1
072fc     16 2F 02 F1 | 	add	local09, local08
07300     02 2E 66 F0 | 	shl	local09, #2
07304     03 00 00 FF 
07308     00 E4 85 F1 | 	sub	objptr, ##1536
0730c     F2 2E 02 F1 | 	add	local09, objptr
07310     17 27 62 FC | 	wrlong	local05, local09
07314     03 00 00 FF 
07318     00 E4 05 F1 | 	add	objptr, ##1536
0731c     F2 32 02 FB | 	rdlong	local11, objptr
07320     19 31 02 F6 | 	mov	local10, local11
07324     01 30 66 F0 | 	shl	local10, #1
07328     19 31 02 F1 | 	add	local10, local11
0732c     02 30 66 F0 | 	shl	local10, #2
07330     03 00 00 FF 
07334     00 E4 85 F1 | 	sub	objptr, ##1536
07338     F2 30 02 F1 | 	add	local10, objptr
0733c     04 30 06 F1 | 	add	local10, #4
07340     18 29 62 FC | 	wrlong	local06, local10
07344     03 00 00 FF 
07348     00 E4 05 F1 | 	add	objptr, ##1536
0734c     F2 30 02 FB | 	rdlong	local10, objptr
07350     18 33 02 F6 | 	mov	local11, local10
07354     01 32 66 F0 | 	shl	local11, #1
07358     18 33 02 F1 | 	add	local11, local10
0735c     02 32 66 F0 | 	shl	local11, #2
07360     03 00 00 FF 
07364     00 E4 85 F1 | 	sub	objptr, ##1536
07368     F2 32 02 F1 | 	add	local11, objptr
0736c     08 32 06 F1 | 	add	local11, #8
07370     19 2B 62 FC | 	wrlong	local07, local11
07374     03 00 00 FF 
07378     00 E4 05 F1 | 	add	objptr, ##1536
0737c     F2 26 02 FB | 	rdlong	local05, objptr
07380     01 26 06 F1 | 	add	local05, #1
07384     F2 26 62 FC | 	wrlong	local05, objptr
07388     6A 00 00 FF 
0738c     60 E4 85 F1 | 	sub	objptr, ##54368
07390                 | LR__0643
07390                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07390     57 00 00 FF 
07394     28 E4 05 F1 | 	add	objptr, ##44584
07398     F2 24 02 FB | 	rdlong	local04, objptr
0739c     03 24 66 F0 | 	shl	local04, #3
073a0     02 00 00 FF 
073a4     38 E4 85 F1 | 	sub	objptr, ##1080
073a8     F2 24 02 F1 | 	add	local04, objptr
073ac     04 24 06 F1 | 	add	local04, #4
073b0     12 2D 02 FB | 	rdlong	local08, local04
073b4     FE 2D 0E F2 | 	cmp	local08, #510 wz
073b8     54 00 00 FF 
073bc     F0 E5 85 F1 | 	sub	objptr, ##43504
073c0     B8 00 90 5D |  if_ne	jmp	#LR__0644
073c4     44 22 06 F6 | 	mov	local03, #68
073c8     0F 27 02 F6 | 	mov	local05, local01
073cc     10 29 02 F6 | 	mov	local06, local02
073d0     11 2B 02 F6 | 	mov	local07, local03
073d4     6A 00 00 FF 
073d8     60 E4 05 F1 | 	add	objptr, ##54368
073dc     F2 2C 02 FB | 	rdlong	local08, objptr
073e0     16 2F 02 F6 | 	mov	local09, local08
073e4     01 2E 66 F0 | 	shl	local09, #1
073e8     16 2F 02 F1 | 	add	local09, local08
073ec     02 2E 66 F0 | 	shl	local09, #2
073f0     03 00 00 FF 
073f4     00 E4 85 F1 | 	sub	objptr, ##1536
073f8     F2 2E 02 F1 | 	add	local09, objptr
073fc     17 27 62 FC | 	wrlong	local05, local09
07400     03 00 00 FF 
07404     00 E4 05 F1 | 	add	objptr, ##1536
07408     F2 32 02 FB | 	rdlong	local11, objptr
0740c     19 31 02 F6 | 	mov	local10, local11
07410     01 30 66 F0 | 	shl	local10, #1
07414     19 31 02 F1 | 	add	local10, local11
07418     02 30 66 F0 | 	shl	local10, #2
0741c     03 00 00 FF 
07420     00 E4 85 F1 | 	sub	objptr, ##1536
07424     F2 30 02 F1 | 	add	local10, objptr
07428     04 30 06 F1 | 	add	local10, #4
0742c     18 29 62 FC | 	wrlong	local06, local10
07430     03 00 00 FF 
07434     00 E4 05 F1 | 	add	objptr, ##1536
07438     F2 30 02 FB | 	rdlong	local10, objptr
0743c     18 33 02 F6 | 	mov	local11, local10
07440     01 32 66 F0 | 	shl	local11, #1
07444     18 33 02 F1 | 	add	local11, local10
07448     02 32 66 F0 | 	shl	local11, #2
0744c     03 00 00 FF 
07450     00 E4 85 F1 | 	sub	objptr, ##1536
07454     F2 32 02 F1 | 	add	local11, objptr
07458     08 32 06 F1 | 	add	local11, #8
0745c     19 2B 62 FC | 	wrlong	local07, local11
07460     03 00 00 FF 
07464     00 E4 05 F1 | 	add	objptr, ##1536
07468     F2 26 02 FB | 	rdlong	local05, objptr
0746c     01 26 06 F1 | 	add	local05, #1
07470     F2 26 62 FC | 	wrlong	local05, objptr
07474     6A 00 00 FF 
07478     60 E4 85 F1 | 	sub	objptr, ##54368
0747c                 | LR__0644
0747c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
0747c     57 00 00 FF 
07480     28 E4 05 F1 | 	add	objptr, ##44584
07484     F2 24 02 FB | 	rdlong	local04, objptr
07488     03 24 66 F0 | 	shl	local04, #3
0748c     02 00 00 FF 
07490     38 E4 85 F1 | 	sub	objptr, ##1080
07494     F2 24 02 F1 | 	add	local04, objptr
07498     04 24 06 F1 | 	add	local04, #4
0749c     12 2D 02 FB | 	rdlong	local08, local04
074a0     11 2C 0E F2 | 	cmp	local08, #17 wz
074a4     54 00 00 FF 
074a8     F0 E5 85 F1 | 	sub	objptr, ##43504
074ac     6C 00 90 AD |  if_e	jmp	#LR__0645
074b0     57 00 00 FF 
074b4     28 E4 05 F1 | 	add	objptr, ##44584
074b8     F2 2C 02 FB | 	rdlong	local08, objptr
074bc     03 2C 66 F0 | 	shl	local08, #3
074c0     02 00 00 FF 
074c4     38 E4 85 F1 | 	sub	objptr, ##1080
074c8     F2 2C 02 F1 | 	add	local08, objptr
074cc     04 2C 06 F1 | 	add	local08, #4
074d0     16 2D 02 FB | 	rdlong	local08, local08
074d4     12 2C 0E F2 | 	cmp	local08, #18 wz
074d8     54 00 00 FF 
074dc     F0 E5 85 F1 | 	sub	objptr, ##43504
074e0     38 00 90 AD |  if_e	jmp	#LR__0645
074e4     57 00 00 FF 
074e8     28 E4 05 F1 | 	add	objptr, ##44584
074ec     F2 32 02 FB | 	rdlong	local11, objptr
074f0     03 32 66 F0 | 	shl	local11, #3
074f4     02 00 00 FF 
074f8     38 E4 85 F1 | 	sub	objptr, ##1080
074fc     F2 32 02 F1 | 	add	local11, objptr
07500     04 32 06 F1 | 	add	local11, #4
07504     19 33 02 FB | 	rdlong	local11, local11
07508     FE 33 0E F2 | 	cmp	local11, #510 wz
0750c     54 00 00 FF 
07510     F0 E5 85 F1 | 	sub	objptr, ##43504
07514     16 FA 05 56 |  if_ne	mov	result1, #22
07518     68 00 90 5D |  if_ne	jmp	#LR__0647
0751c                 | LR__0645
0751c     57 00 00 FF 
07520     28 E4 05 F1 | 	add	objptr, ##44584
07524     F2 24 02 FB | 	rdlong	local04, objptr
07528     01 24 06 F1 | 	add	local04, #1
0752c     F2 24 62 FC | 	wrlong	local04, objptr
07530     03 24 66 F0 | 	shl	local04, #3
07534     02 00 00 FF 
07538     38 E4 85 F1 | 	sub	objptr, ##1080
0753c     F2 24 02 F1 | 	add	local04, objptr
07540     04 24 06 F1 | 	add	local04, #4
07544     12 2D 02 FB | 	rdlong	local08, local04
07548     FE 2D 0E F2 | 	cmp	local08, #510 wz
0754c     54 00 00 FF 
07550     F0 E5 85 F1 | 	sub	objptr, ##43504
07554     28 00 90 AD |  if_e	jmp	#LR__0646
07558     57 00 00 FF 
0755c     28 E4 05 F1 | 	add	objptr, ##44584
07560     F2 32 02 FB | 	rdlong	local11, objptr
07564     0E 00 00 FF 
07568     1C E4 05 F1 | 	add	objptr, ##7196
0756c     F2 30 02 FB | 	rdlong	local10, objptr
07570     65 00 00 FF 
07574     44 E4 85 F1 | 	sub	objptr, ##51780
07578     18 33 52 F2 | 	cmps	local11, local10 wc
0757c     E4 FA 9F CD |  if_b	jmp	#LR__0641
07580                 | LR__0646
07580                 | ' return 0
07580     00 FA 05 F6 | 	mov	result1, #0
07584                 | LR__0647
07584     A7 F0 03 F6 | 	mov	ptra, fp
07588     B2 00 A0 FD | 	call	#popregs_
0758c                 | _compile_print_ret
0758c     2D 00 64 FD | 	ret
07590                 | 
07590                 | ' 
07590                 | ' function compile_if() as ulong  
07590                 | _compile_if
07590     05 4A 05 F6 | 	mov	COUNT_, #5
07594     A8 00 A0 FD | 	call	#pushregs_
07598                 | _compile_if_enter
07598     A4 16 B0 FD | 	call	#_expr
0759c                 | ' expr()
0759c                 | ' return 0
0759c     57 00 00 FF 
075a0     28 E4 05 F1 | 	add	objptr, ##44584
075a4     F2 FA 01 FB | 	rdlong	result1, objptr
075a8     01 FA 05 F1 | 	add	result1, #1
075ac     F2 FA 61 FC | 	wrlong	result1, objptr
075b0     58 22 06 F6 | 	mov	local03, #88
075b4     0F 25 02 F6 | 	mov	local04, local01
075b8     10 27 02 F6 | 	mov	local05, local02
075bc     11 1F 02 F6 | 	mov	local01, local03
075c0     13 00 00 FF 
075c4     38 E4 05 F1 | 	add	objptr, ##9784
075c8     F2 12 02 FB | 	rdlong	arg01, objptr
075cc     09 FB 01 F6 | 	mov	result1, arg01
075d0     01 FA 65 F0 | 	shl	result1, #1
075d4     09 FB 01 F1 | 	add	result1, arg01
075d8     02 FA 65 F0 | 	shl	result1, #2
075dc     03 00 00 FF 
075e0     00 E4 85 F1 | 	sub	objptr, ##1536
075e4     F2 FA 01 F1 | 	add	result1, objptr
075e8     FD 24 62 FC | 	wrlong	local04, result1
075ec     03 00 00 FF 
075f0     00 E4 05 F1 | 	add	objptr, ##1536
075f4     F2 12 02 FB | 	rdlong	arg01, objptr
075f8     09 25 02 F6 | 	mov	local04, arg01
075fc     01 24 66 F0 | 	shl	local04, #1
07600     09 25 02 F1 | 	add	local04, arg01
07604     02 24 66 F0 | 	shl	local04, #2
07608     03 00 00 FF 
0760c     00 E4 85 F1 | 	sub	objptr, ##1536
07610     F2 24 02 F1 | 	add	local04, objptr
07614     04 24 06 F1 | 	add	local04, #4
07618     12 27 62 FC | 	wrlong	local05, local04
0761c     03 00 00 FF 
07620     00 E4 05 F1 | 	add	objptr, ##1536
07624     F2 24 02 FB | 	rdlong	local04, objptr
07628     12 27 02 F6 | 	mov	local05, local04
0762c     01 26 66 F0 | 	shl	local05, #1
07630     12 27 02 F1 | 	add	local05, local04
07634     02 26 66 F0 | 	shl	local05, #2
07638     03 00 00 FF 
0763c     00 E4 85 F1 | 	sub	objptr, ##1536
07640     F2 26 02 F1 | 	add	local05, objptr
07644     08 26 06 F1 | 	add	local05, #8
07648     13 1F 62 FC | 	wrlong	local01, local05
0764c     03 00 00 FF 
07650     00 E4 05 F1 | 	add	objptr, ##1536
07654     F2 24 02 FB | 	rdlong	local04, objptr
07658     01 24 06 F1 | 	add	local04, #1
0765c     F2 24 62 FC | 	wrlong	local04, objptr
07660                 | ' 
07660                 | ' 'print "In compile_if"
07660                 | ' compile_fun_1p()
07660                 | ' cmd=lparts(ct).token : ct+=1
07660                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07660                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07660                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07660     13 00 00 FF 
07664     38 E4 85 F1 | 	sub	objptr, ##9784
07668     F2 26 02 FB | 	rdlong	local05, objptr
0766c     01 26 06 F1 | 	add	local05, #1
07670     03 26 66 F0 | 	shl	local05, #3
07674     02 00 00 FF 
07678     38 E4 85 F1 | 	sub	objptr, ##1080
0767c     F2 26 02 F1 | 	add	local05, objptr
07680     13 13 02 FB | 	rdlong	arg01, local05
07684     54 00 00 FF 
07688     F0 E5 85 F1 | 	sub	objptr, ##43504
0768c                 | ' 
0768c                 | ' select case s
0768c     5D 01 00 FF 
07690     A4 14 06 F6 | 	mov	arg02, ##@LR__4711
07694     88 4C B1 FD | 	call	#__system___string_cmp
07698     00 FA 0D F2 | 	cmp	result1, #0 wz
0769c     1B FA 05 A6 |  if_e	mov	result1, #27
076a0     00 FA 05 56 |  if_ne	mov	result1, #0
076a4     00 FA 0D F2 | 	cmp	result1, #0 wz
076a8     0C 00 90 AD |  if_e	jmp	#LR__0650
076ac     05 12 06 F6 | 	mov	arg01, #5
076b0     88 ED BF FD | 	call	#_compile_immediate_assign
076b4     08 00 90 FD | 	jmp	#LR__0651
076b8                 | LR__0650
076b8     05 12 06 F6 | 	mov	arg01, #5
076bc     B4 E3 BF FD | 	call	#_compile_immediate
076c0                 | LR__0651
076c0                 | ' 
076c0                 | ' 
076c0                 | ' return 0
076c0     00 FA 05 F6 | 	mov	result1, #0
076c4     A7 F0 03 F6 | 	mov	ptra, fp
076c8     B2 00 A0 FD | 	call	#popregs_
076cc                 | _compile_if_ret
076cc     2D 00 64 FD | 	ret
076d0                 | 
076d0                 | ' 
076d0                 | ' function compile_else() as ulong  
076d0                 | _compile_else
076d0     05 4A 05 F6 | 	mov	COUNT_, #5
076d4     A8 00 A0 FD | 	call	#pushregs_
076d8                 | _compile_else_enter
076d8     5A 22 06 F6 | 	mov	local03, #90
076dc     0F 25 02 F6 | 	mov	local04, local01
076e0     10 27 02 F6 | 	mov	local05, local02
076e4     11 1F 02 F6 | 	mov	local01, local03
076e8     6A 00 00 FF 
076ec     60 E4 05 F1 | 	add	objptr, ##54368
076f0     F2 12 02 FB | 	rdlong	arg01, objptr
076f4     09 FB 01 F6 | 	mov	result1, arg01
076f8     01 FA 65 F0 | 	shl	result1, #1
076fc     09 FB 01 F1 | 	add	result1, arg01
07700     02 FA 65 F0 | 	shl	result1, #2
07704     03 00 00 FF 
07708     00 E4 85 F1 | 	sub	objptr, ##1536
0770c     F2 FA 01 F1 | 	add	result1, objptr
07710     FD 24 62 FC | 	wrlong	local04, result1
07714     03 00 00 FF 
07718     00 E4 05 F1 | 	add	objptr, ##1536
0771c     F2 FA 01 FB | 	rdlong	result1, objptr
07720     FD 24 02 F6 | 	mov	local04, result1
07724     01 24 66 F0 | 	shl	local04, #1
07728     FD 24 02 F1 | 	add	local04, result1
0772c     02 24 66 F0 | 	shl	local04, #2
07730     03 00 00 FF 
07734     00 E4 85 F1 | 	sub	objptr, ##1536
07738     F2 24 02 F1 | 	add	local04, objptr
0773c     04 24 06 F1 | 	add	local04, #4
07740     12 27 62 FC | 	wrlong	local05, local04
07744     03 00 00 FF 
07748     00 E4 05 F1 | 	add	objptr, ##1536
0774c     F2 24 02 FB | 	rdlong	local04, objptr
07750     12 27 02 F6 | 	mov	local05, local04
07754     01 26 66 F0 | 	shl	local05, #1
07758     12 27 02 F1 | 	add	local05, local04
0775c     02 26 66 F0 | 	shl	local05, #2
07760     03 00 00 FF 
07764     00 E4 85 F1 | 	sub	objptr, ##1536
07768     F2 26 02 F1 | 	add	local05, objptr
0776c     08 26 06 F1 | 	add	local05, #8
07770     13 1F 62 FC | 	wrlong	local01, local05
07774     03 00 00 FF 
07778     00 E4 05 F1 | 	add	objptr, ##1536
0777c     F2 24 02 FB | 	rdlong	local04, objptr
07780     01 24 06 F1 | 	add	local04, #1
07784     F2 24 62 FC | 	wrlong	local04, objptr
07788                 | ' 
07788                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
07788                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07788     13 00 00 FF 
0778c     38 E4 85 F1 | 	sub	objptr, ##9784
07790     F2 26 02 FB | 	rdlong	local05, objptr
07794     01 26 06 F1 | 	add	local05, #1
07798     03 26 66 F0 | 	shl	local05, #3
0779c     02 00 00 FF 
077a0     38 E4 85 F1 | 	sub	objptr, ##1080
077a4     F2 26 02 F1 | 	add	local05, objptr
077a8     13 13 02 FB | 	rdlong	arg01, local05
077ac     54 00 00 FF 
077b0     F0 E5 85 F1 | 	sub	objptr, ##43504
077b4                 | ' 
077b4                 | ' select case s
077b4     5D 01 00 FF 
077b8     A4 14 06 F6 | 	mov	arg02, ##@LR__4711
077bc     60 4B B1 FD | 	call	#__system___string_cmp
077c0     00 FA 0D F2 | 	cmp	result1, #0 wz
077c4     1B FA 05 A6 |  if_e	mov	result1, #27
077c8     00 FA 05 56 |  if_ne	mov	result1, #0
077cc     00 FA 0D F2 | 	cmp	result1, #0 wz
077d0     0C 00 90 AD |  if_e	jmp	#LR__0660
077d4     05 12 06 F6 | 	mov	arg01, #5
077d8     60 EC BF FD | 	call	#_compile_immediate_assign
077dc     08 00 90 FD | 	jmp	#LR__0661
077e0                 | LR__0660
077e0     05 12 06 F6 | 	mov	arg01, #5
077e4     8C E2 BF FD | 	call	#_compile_immediate
077e8                 | LR__0661
077e8                 | ' 
077e8                 | ' 
077e8                 | ' return 0
077e8     00 FA 05 F6 | 	mov	result1, #0
077ec     A7 F0 03 F6 | 	mov	ptra, fp
077f0     B2 00 A0 FD | 	call	#popregs_
077f4                 | _compile_else_ret
077f4     2D 00 64 FD | 	ret
077f8                 | 
077f8                 | ' 
077f8                 | ' 
077f8                 | ' function compile_dim() as ulong  
077f8                 | _compile_dim
077f8     11 4A 05 F6 | 	mov	COUNT_, #17
077fc     A8 00 A0 FD | 	call	#pushregs_
07800     01 1E 06 F6 | 	mov	local01, #1
07804     01 20 06 F6 | 	mov	local02, #1
07808     01 22 06 F6 | 	mov	local03, #1
0780c                 | ' 
0780c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0780c                 | ' 
0780c                 | ' if isname(lparts(ct).part$) then 
0780c     57 00 00 FF 
07810     28 E4 05 F1 | 	add	objptr, ##44584
07814     F2 18 02 FB | 	rdlong	arg04, objptr
07818     03 18 66 F0 | 	shl	arg04, #3
0781c     02 00 00 FF 
07820     38 E4 85 F1 | 	sub	objptr, ##1080
07824     F2 18 02 F1 | 	add	arg04, objptr
07828     0C 13 02 FB | 	rdlong	arg01, arg04
0782c     54 00 00 FF 
07830     F0 E5 85 F1 | 	sub	objptr, ##43504
07834     F0 D2 BF FD | 	call	#_isname
07838     00 FA 0D F2 | 	cmp	result1, #0 wz
0783c     AC 05 90 AD |  if_e	jmp	#LR__0694
07840     57 00 00 FF 
07844     28 E4 05 F1 | 	add	objptr, ##44584
07848     F2 24 02 FB | 	rdlong	local04, objptr
0784c     03 24 66 F0 | 	shl	local04, #3
07850     02 00 00 FF 
07854     38 E4 85 F1 | 	sub	objptr, ##1080
07858     F2 24 02 F1 | 	add	local04, objptr
0785c     12 27 02 FB | 	rdlong	local05, local04
07860     01 28 66 F6 | 	neg	local06, #1
07864                 | '   varname2$=lparts(ct).part$ 
07864                 | '   j=-1
07864                 | '   if varnum>0 then
07864     04 E4 85 F1 | 	sub	objptr, #4
07868     F2 2A 02 FB | 	rdlong	local07, objptr
0786c     54 00 00 FF 
07870     EC E5 85 F1 | 	sub	objptr, ##43500
07874     01 2A 56 F2 | 	cmps	local07, #1 wc
07878     58 00 90 CD |  if_b	jmp	#LR__0672
0787c                 | '  '   print "in dim, varnum=";varnum
0787c                 | '     for i=0 to varnum-1
0787c     00 2C 06 F6 | 	mov	local08, #0
07880     54 00 00 FF 
07884     EC E5 05 F1 | 	add	objptr, ##43500
07888     F2 2E 02 FB | 	rdlong	local09, objptr
0788c     54 00 00 FF 
07890     EC E5 85 F1 | 	sub	objptr, ##43500
07894                 | LR__0670
07894     17 2D 52 F2 | 	cmps	local08, local09 wc
07898     38 00 90 3D |  if_ae	jmp	#LR__0671
0789c                 | '       if variables(i).name=varname2$ then j=i : exit
0789c     16 25 02 F6 | 	mov	local04, local08
078a0     04 24 66 F0 | 	shl	local04, #4
078a4     34 00 00 FF 
078a8     EC E5 05 F1 | 	add	objptr, ##27116
078ac     F2 24 02 F1 | 	add	local04, objptr
078b0     12 13 02 FB | 	rdlong	arg01, local04
078b4     13 15 02 F6 | 	mov	arg02, local05
078b8     34 00 00 FF 
078bc     EC E5 85 F1 | 	sub	objptr, ##27116
078c0     5C 4A B1 FD | 	call	#__system___string_cmp
078c4     00 FA 0D F2 | 	cmp	result1, #0 wz
078c8     16 29 02 A6 |  if_e	mov	local06, local08
078cc     01 2C 06 51 |  if_ne	add	local08, #1
078d0     C0 FF 9F 5D |  if_ne	jmp	#LR__0670
078d4                 | LR__0671
078d4                 | LR__0672
078d4                 | ' '  if j<>-1 then printerror (42) : return 42
078d4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
078d4     FF FF 7F FF 
078d8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
078dc     54 00 00 AF 
078e0     EC E5 05 A1 |  if_e	add	objptr, ##43500
078e4     F2 28 02 AB |  if_e	rdlong	local06, objptr
078e8     54 00 00 AF 
078ec     EC E5 85 A1 |  if_e	sub	objptr, ##43500
078f0     78 00 90 AD |  if_e	jmp	#LR__0673
078f4     00 12 06 F6 | 	mov	arg01, #0
078f8     8C A3 B1 FD | 	call	#__system___getiolock_0474
078fc     FD 12 02 F6 | 	mov	arg01, result1
07900     F4 49 B1 FD | 	call	#__system___lockmem
07904     5E 01 00 FF 
07908     B2 15 06 F6 | 	mov	arg02, ##@LR__4883
0790c     00 12 06 F6 | 	mov	arg01, #0
07910     00 16 06 F6 | 	mov	arg03, #0
07914     E4 56 B1 FD | 	call	#__system___basic_print_string
07918     7B 00 00 FF 
0791c     74 E4 05 F1 | 	add	objptr, ##63092
07920     F2 14 02 FB | 	rdlong	arg02, objptr
07924     7B 00 00 FF 
07928     74 E4 85 F1 | 	sub	objptr, ##63092
0792c     00 12 06 F6 | 	mov	arg01, #0
07930     00 16 06 F6 | 	mov	arg03, #0
07934     0A 18 06 F6 | 	mov	arg04, #10
07938     44 57 B1 FD | 	call	#__system___basic_print_unsigned
0793c     5E 01 00 FF 
07940     C0 15 06 F6 | 	mov	arg02, ##@LR__4884
07944     00 12 06 F6 | 	mov	arg01, #0
07948     00 16 06 F6 | 	mov	arg03, #0
0794c     AC 56 B1 FD | 	call	#__system___basic_print_string
07950     00 12 06 F6 | 	mov	arg01, #0
07954     0A 14 06 F6 | 	mov	arg02, #10
07958     00 16 06 F6 | 	mov	arg03, #0
0795c     44 56 B1 FD | 	call	#__system___basic_print_char
07960     00 12 06 F6 | 	mov	arg01, #0
07964     20 A3 B1 FD | 	call	#__system___getiolock_0474
07968     FD 00 68 FC | 	wrlong	#0, result1
0796c                 | LR__0673
0796c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
0796c     57 00 00 FF 
07970     28 E4 05 F1 | 	add	objptr, ##44584
07974     F2 18 02 FB | 	rdlong	arg04, objptr
07978     01 18 06 F1 | 	add	arg04, #1
0797c     03 18 66 F0 | 	shl	arg04, #3
07980     02 00 00 FF 
07984     38 E4 85 F1 | 	sub	objptr, ##1080
07988     F2 18 02 F1 | 	add	arg04, objptr
0798c     0C 13 02 FB | 	rdlong	arg01, arg04
07990     5E 01 00 FF 
07994     E1 15 06 F6 | 	mov	arg02, ##@LR__4885
07998     54 00 00 FF 
0799c     F0 E5 85 F1 | 	sub	objptr, ##43504
079a0     7C 49 B1 FD | 	call	#__system___string_cmp
079a4     00 FA 0D F2 | 	cmp	result1, #0 wz
079a8     50 00 90 AD |  if_e	jmp	#LR__0674
079ac     57 00 00 FF 
079b0     28 E4 05 F1 | 	add	objptr, ##44584
079b4     F2 2E 02 FB | 	rdlong	local09, objptr
079b8     01 2E 06 F1 | 	add	local09, #1
079bc     03 2E 66 F0 | 	shl	local09, #3
079c0     02 00 00 FF 
079c4     38 E4 85 F1 | 	sub	objptr, ##1080
079c8     F2 2E 02 F1 | 	add	local09, objptr
079cc     17 13 02 FB | 	rdlong	arg01, local09
079d0     5E 01 00 FF 
079d4     E3 15 06 F6 | 	mov	arg02, ##@LR__4886
079d8     54 00 00 FF 
079dc     F0 E5 85 F1 | 	sub	objptr, ##43504
079e0     3C 49 B1 FD | 	call	#__system___string_cmp
079e4     00 FA 0D F2 | 	cmp	result1, #0 wz
079e8     10 00 90 AD |  if_e	jmp	#LR__0674
079ec     2B 12 06 F6 | 	mov	arg01, #43
079f0     64 11 B1 FD | 	call	#_printerror
079f4     2B FA 05 F6 | 	mov	result1, #43
079f8     00 05 90 FD | 	jmp	#LR__0696
079fc                 | LR__0674
079fc                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
079fc     57 00 00 FF 
07a00     28 E4 05 F1 | 	add	objptr, ##44584
07a04     F2 14 02 FB | 	rdlong	arg02, objptr
07a08     01 14 06 F1 | 	add	arg02, #1
07a0c     03 14 66 F0 | 	shl	arg02, #3
07a10     02 00 00 FF 
07a14     38 E4 85 F1 | 	sub	objptr, ##1080
07a18     F2 14 02 F1 | 	add	arg02, objptr
07a1c     0A 13 02 FB | 	rdlong	arg01, arg02
07a20     5E 01 00 FF 
07a24     E6 15 06 F6 | 	mov	arg02, ##@LR__4887
07a28     54 00 00 FF 
07a2c     F0 E5 85 F1 | 	sub	objptr, ##43504
07a30     EC 48 B1 FD | 	call	#__system___string_cmp
07a34     00 FA 0D F2 | 	cmp	result1, #0 wz
07a38     57 00 00 AF 
07a3c     28 E4 05 A1 |  if_e	add	objptr, ##44584
07a40     F2 30 02 AB |  if_e	rdlong	local10, objptr
07a44     57 00 00 AF 
07a48     28 E4 85 A1 |  if_e	sub	objptr, ##44584
07a4c     01 30 06 A1 |  if_e	add	local10, #1
07a50     7C 01 90 AD |  if_e	jmp	#LR__0680
07a54     57 00 00 FF 
07a58     28 E4 05 F1 | 	add	objptr, ##44584
07a5c     F2 30 02 FB | 	rdlong	local10, objptr
07a60     57 00 00 FF 
07a64     28 E4 85 F1 | 	sub	objptr, ##44584
07a68     02 30 06 F1 | 	add	local10, #2
07a6c     00 32 06 F6 | 	mov	local11, #0
07a70                 | '   l=ct+2 : m=0 : do
07a70                 | LR__0675
07a70                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07a70                 | '     if isdec(lparts(l).part$) then 
07a70     18 25 02 F6 | 	mov	local04, local10
07a74     03 24 66 F0 | 	shl	local04, #3
07a78     54 00 00 FF 
07a7c     F0 E5 05 F1 | 	add	objptr, ##43504
07a80     F2 24 02 F1 | 	add	local04, objptr
07a84     12 13 02 FB | 	rdlong	arg01, local04
07a88     54 00 00 FF 
07a8c     F0 E5 85 F1 | 	sub	objptr, ##43504
07a90     38 D7 BF FD | 	call	#_isdec
07a94     00 FA 0D F2 | 	cmp	result1, #0 wz
07a98     44 00 90 AD |  if_e	jmp	#LR__0676
07a9c     19 35 02 F6 | 	mov	local12, local11
07aa0     0F 35 06 F1 | 	add	local12, #local01
07aa4     18 2F 02 F6 | 	mov	local09, local10
07aa8     03 2E 66 F0 | 	shl	local09, #3
07aac     54 00 00 FF 
07ab0     F0 E5 05 F1 | 	add	objptr, ##43504
07ab4     F2 2E 02 F1 | 	add	local09, objptr
07ab8     17 13 02 FB | 	rdlong	arg01, local09
07abc     00 14 06 F6 | 	mov	arg02, #0
07ac0     54 00 00 FF 
07ac4     F0 E5 85 F1 | 	sub	objptr, ##43504
07ac8     20 7A B1 FD | 	call	#__system____builtin_atoi
07acc     FD 36 02 F6 | 	mov	local13, result1
07ad0                 | 	'.live	local13
07ad0                 | 	'.live	local12
07ad0     00 34 8E F9 | 	altd	local12, #0
07ad4     1B 35 02 F6 | 	mov	local12, local13
07ad8     01 32 06 F1 | 	add	local11, #1
07adc     10 00 90 FD | 	jmp	#LR__0677
07ae0                 | LR__0676
07ae0     11 12 06 F6 | 	mov	arg01, #17
07ae4     70 10 B1 FD | 	call	#_printerror
07ae8                 | '       printerror (17)  : return(17)
07ae8     11 FA 05 F6 | 	mov	result1, #17
07aec     0C 04 90 FD | 	jmp	#LR__0696
07af0                 | LR__0677
07af0                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07af0     18 25 02 F6 | 	mov	local04, local10
07af4     01 24 06 F1 | 	add	local04, #1
07af8     03 24 66 F0 | 	shl	local04, #3
07afc     54 00 00 FF 
07b00     F0 E5 05 F1 | 	add	objptr, ##43504
07b04     F2 24 02 F1 | 	add	local04, objptr
07b08     12 13 02 FB | 	rdlong	arg01, local04
07b0c     5E 01 00 FF 
07b10     E9 15 06 F6 | 	mov	arg02, ##@LR__4888
07b14     54 00 00 FF 
07b18     F0 E5 85 F1 | 	sub	objptr, ##43504
07b1c     00 48 B1 FD | 	call	#__system___string_cmp
07b20     00 FA 0D F2 | 	cmp	result1, #0 wz
07b24     48 00 90 AD |  if_e	jmp	#LR__0678
07b28     18 37 02 F6 | 	mov	local13, local10
07b2c     01 36 06 F1 | 	add	local13, #1
07b30     03 36 66 F0 | 	shl	local13, #3
07b34     54 00 00 FF 
07b38     F0 E5 05 F1 | 	add	objptr, ##43504
07b3c     F2 36 02 F1 | 	add	local13, objptr
07b40     1B 13 02 FB | 	rdlong	arg01, local13
07b44     5E 01 00 FF 
07b48     EB 15 06 F6 | 	mov	arg02, ##@LR__4889
07b4c     54 00 00 FF 
07b50     F0 E5 85 F1 | 	sub	objptr, ##43504
07b54     C8 47 B1 FD | 	call	#__system___string_cmp
07b58     00 FA 0D F2 | 	cmp	result1, #0 wz
07b5c     10 00 90 AD |  if_e	jmp	#LR__0678
07b60     2C 12 06 F6 | 	mov	arg01, #44
07b64     F0 0F B1 FD | 	call	#_printerror
07b68     2C FA 05 F6 | 	mov	result1, #44
07b6c     8C 03 90 FD | 	jmp	#LR__0696
07b70                 | LR__0678
07b70     02 30 06 F1 | 	add	local10, #2
07b74     18 25 02 F6 | 	mov	local04, local10
07b78     01 24 86 F1 | 	sub	local04, #1
07b7c     03 24 66 F0 | 	shl	local04, #3
07b80     54 00 00 FF 
07b84     F0 E5 05 F1 | 	add	objptr, ##43504
07b88     F2 24 02 F1 | 	add	local04, objptr
07b8c     12 13 02 FB | 	rdlong	arg01, local04
07b90     5E 01 00 FF 
07b94     ED 15 06 F6 | 	mov	arg02, ##@LR__4890
07b98     54 00 00 FF 
07b9c     F0 E5 85 F1 | 	sub	objptr, ##43504
07ba0     7C 47 B1 FD | 	call	#__system___string_cmp
07ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ba8     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07bac     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0675
07bb0                 | '   if m>3 then printerror(45): return(45)
07bb0     04 32 56 F2 | 	cmps	local11, #4 wc
07bb4     10 00 90 CD |  if_b	jmp	#LR__0679
07bb8     2D 12 06 F6 | 	mov	arg01, #45
07bbc     98 0F B1 FD | 	call	#_printerror
07bc0     2D FA 05 F6 | 	mov	result1, #45
07bc4     34 03 90 FD | 	jmp	#LR__0696
07bc8                 | LR__0679
07bc8     00 39 06 F6 | 	mov	local14, #256
07bcc     0C 3A 06 F6 | 	mov	local15, #12
07bd0                 | LR__0680
07bd0                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07bd0                 | '   arraytype=array_no_type : esize=12
07bd0                 | ' 1350 
07bd0                 | '   if lparts(l).part$="as" then
07bd0     18 25 02 F6 | 	mov	local04, local10
07bd4     03 24 66 F0 | 	shl	local04, #3
07bd8     54 00 00 FF 
07bdc     F0 E5 05 F1 | 	add	objptr, ##43504
07be0     F2 24 02 F1 | 	add	local04, objptr
07be4     12 13 02 FB | 	rdlong	arg01, local04
07be8     5E 01 00 FF 
07bec     EF 15 06 F6 | 	mov	arg02, ##@LR__4891
07bf0     54 00 00 FF 
07bf4     F0 E5 85 F1 | 	sub	objptr, ##43504
07bf8     24 47 B1 FD | 	call	#__system___string_cmp
07bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
07c00     F8 01 90 5D |  if_ne	jmp	#LR__0695
07c04                 | '     select case lparts(l+1).part$
07c04     18 35 02 F6 | 	mov	local12, local10
07c08     01 34 06 F1 | 	add	local12, #1
07c0c     03 34 66 F0 | 	shl	local12, #3
07c10     54 00 00 FF 
07c14     F0 E5 05 F1 | 	add	objptr, ##43504
07c18     F2 34 02 F1 | 	add	local12, objptr
07c1c     1A 3D 02 FB | 	rdlong	local16, local12
07c20     5E 01 00 FF 
07c24     F2 15 06 F6 | 	mov	arg02, ##@LR__4892
07c28     1E 13 02 F6 | 	mov	arg01, local16
07c2c     54 00 00 FF 
07c30     F0 E5 85 F1 | 	sub	objptr, ##43504
07c34     E8 46 B1 FD | 	call	#__system___string_cmp
07c38     00 FA 0D F2 | 	cmp	result1, #0 wz
07c3c     0C 01 90 AD |  if_e	jmp	#LR__0681
07c40     5E 01 00 FF 
07c44     F7 15 06 F6 | 	mov	arg02, ##@LR__4893
07c48     1E 13 02 F6 | 	mov	arg01, local16
07c4c     D0 46 B1 FD | 	call	#__system___string_cmp
07c50     00 FA 0D F2 | 	cmp	result1, #0 wz
07c54     00 01 90 AD |  if_e	jmp	#LR__0682
07c58     5E 01 00 FF 
07c5c     FD 15 06 F6 | 	mov	arg02, ##@LR__4894
07c60     1E 13 02 F6 | 	mov	arg01, local16
07c64     B8 46 B1 FD | 	call	#__system___string_cmp
07c68     00 FA 0D F2 | 	cmp	result1, #0 wz
07c6c     F4 00 90 AD |  if_e	jmp	#LR__0683
07c70     5F 01 00 FF 
07c74     03 14 06 F6 | 	mov	arg02, ##@LR__4895
07c78     1E 13 02 F6 | 	mov	arg01, local16
07c7c     A0 46 B1 FD | 	call	#__system___string_cmp
07c80     00 FA 0D F2 | 	cmp	result1, #0 wz
07c84     E8 00 90 AD |  if_e	jmp	#LR__0684
07c88     5F 01 00 FF 
07c8c     0A 14 06 F6 | 	mov	arg02, ##@LR__4896
07c90     1E 13 02 F6 | 	mov	arg01, local16
07c94     88 46 B1 FD | 	call	#__system___string_cmp
07c98     00 FA 0D F2 | 	cmp	result1, #0 wz
07c9c     DC 00 90 AD |  if_e	jmp	#LR__0685
07ca0     5F 01 00 FF 
07ca4     0F 14 06 F6 | 	mov	arg02, ##@LR__4897
07ca8     1E 13 02 F6 | 	mov	arg01, local16
07cac     70 46 B1 FD | 	call	#__system___string_cmp
07cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
07cb4     D0 00 90 AD |  if_e	jmp	#LR__0686
07cb8     5F 01 00 FF 
07cbc     17 14 06 F6 | 	mov	arg02, ##@LR__4898
07cc0     1E 13 02 F6 | 	mov	arg01, local16
07cc4     58 46 B1 FD | 	call	#__system___string_cmp
07cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07ccc     C4 00 90 AD |  if_e	jmp	#LR__0687
07cd0     5F 01 00 FF 
07cd4     1D 14 06 F6 | 	mov	arg02, ##@LR__4899
07cd8     1E 13 02 F6 | 	mov	arg01, local16
07cdc     40 46 B1 FD | 	call	#__system___string_cmp
07ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
07ce4     B8 00 90 AD |  if_e	jmp	#LR__0688
07ce8     5F 01 00 FF 
07cec     23 14 06 F6 | 	mov	arg02, ##@LR__4900
07cf0     1E 13 02 F6 | 	mov	arg01, local16
07cf4     28 46 B1 FD | 	call	#__system___string_cmp
07cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cfc     AC 00 90 AD |  if_e	jmp	#LR__0689
07d00     5F 01 00 FF 
07d04     2A 14 06 F6 | 	mov	arg02, ##@LR__4901
07d08     1E 13 02 F6 | 	mov	arg01, local16
07d0c     10 46 B1 FD | 	call	#__system___string_cmp
07d10     00 FA 0D F2 | 	cmp	result1, #0 wz
07d14     A0 00 90 AD |  if_e	jmp	#LR__0690
07d18     5F 01 00 FF 
07d1c     31 14 06 F6 | 	mov	arg02, ##@LR__4902
07d20     1E 13 02 F6 | 	mov	arg01, local16
07d24     F8 45 B1 FD | 	call	#__system___string_cmp
07d28     00 FA 0D F2 | 	cmp	result1, #0 wz
07d2c     94 00 90 AD |  if_e	jmp	#LR__0691
07d30     5F 01 00 FF 
07d34     38 14 06 F6 | 	mov	arg02, ##@LR__4903
07d38     1E 13 02 F6 | 	mov	arg01, local16
07d3c     E0 45 B1 FD | 	call	#__system___string_cmp
07d40     00 FA 0D F2 | 	cmp	result1, #0 wz
07d44     88 00 90 AD |  if_e	jmp	#LR__0692
07d48     90 00 90 FD | 	jmp	#LR__0693
07d4c                 | LR__0681
07d4c     01 39 06 F6 | 	mov	local14, #257
07d50     01 3A 06 F6 | 	mov	local15, #1
07d54     A4 00 90 FD | 	jmp	#LR__0695
07d58                 | LR__0682
07d58     02 39 06 F6 | 	mov	local14, #258
07d5c     01 3A 06 F6 | 	mov	local15, #1
07d60     98 00 90 FD | 	jmp	#LR__0695
07d64                 | LR__0683
07d64     03 39 06 F6 | 	mov	local14, #259
07d68     02 3A 06 F6 | 	mov	local15, #2
07d6c     8C 00 90 FD | 	jmp	#LR__0695
07d70                 | LR__0684
07d70     04 39 06 F6 | 	mov	local14, #260
07d74     02 3A 06 F6 | 	mov	local15, #2
07d78     80 00 90 FD | 	jmp	#LR__0695
07d7c                 | LR__0685
07d7c     05 39 06 F6 | 	mov	local14, #261
07d80     04 3A 06 F6 | 	mov	local15, #4
07d84     74 00 90 FD | 	jmp	#LR__0695
07d88                 | LR__0686
07d88     05 39 06 F6 | 	mov	local14, #261
07d8c     04 3A 06 F6 | 	mov	local15, #4
07d90     68 00 90 FD | 	jmp	#LR__0695
07d94                 | LR__0687
07d94     06 39 06 F6 | 	mov	local14, #262
07d98     04 3A 06 F6 | 	mov	local15, #4
07d9c     5C 00 90 FD | 	jmp	#LR__0695
07da0                 | LR__0688
07da0     07 39 06 F6 | 	mov	local14, #263
07da4     08 3A 06 F6 | 	mov	local15, #8
07da8     50 00 90 FD | 	jmp	#LR__0695
07dac                 | LR__0689
07dac     08 39 06 F6 | 	mov	local14, #264
07db0     08 3A 06 F6 | 	mov	local15, #8
07db4     44 00 90 FD | 	jmp	#LR__0695
07db8                 | LR__0690
07db8     09 39 06 F6 | 	mov	local14, #265
07dbc     04 3A 06 F6 | 	mov	local15, #4
07dc0     38 00 90 FD | 	jmp	#LR__0695
07dc4                 | LR__0691
07dc4     0A 39 06 F6 | 	mov	local14, #266
07dc8     08 3A 06 F6 | 	mov	local15, #8
07dcc     2C 00 90 FD | 	jmp	#LR__0695
07dd0                 | LR__0692
07dd0     0B 39 06 F6 | 	mov	local14, #267
07dd4     04 3A 06 F6 | 	mov	local15, #4
07dd8     20 00 90 FD | 	jmp	#LR__0695
07ddc                 | LR__0693
07ddc     2F 12 06 F6 | 	mov	arg01, #47
07de0     74 0D B1 FD | 	call	#_printerror
07de4     2F FA 05 F6 | 	mov	result1, #47
07de8     10 01 90 FD | 	jmp	#LR__0696
07dec                 | LR__0694
07dec     2E 12 06 F6 | 	mov	arg01, #46
07df0     64 0D B1 FD | 	call	#_printerror
07df4                 | '   printerror(46): return 46
07df4     2E FA 05 F6 | 	mov	result1, #46
07df8     00 01 90 FD | 	jmp	#LR__0696
07dfc                 | LR__0695
07dfc     0F 3B 02 FD | 	qmul	local15, local01
07e00     18 2A 62 FD | 	getqx	local07
07e04     10 2B 02 FD | 	qmul	local07, local02
07e08     18 3C 62 FD | 	getqx	local16
07e0c     11 3D 02 FD | 	qmul	local16, local03
07e10     7B 00 00 FF 
07e14     5C E4 05 F1 | 	add	objptr, ##63068
07e18     F2 3E 02 FB | 	rdlong	local17, objptr
07e1c     1C 15 02 F6 | 	mov	arg02, local14
07e20     18 3C 62 FD | 	getqx	local16
07e24     1E 3F 82 F1 | 	sub	local17, local16
07e28     10 3E 86 F1 | 	sub	local17, #16
07e2c     0F 3E 26 F5 | 	andn	local17, #15
07e30     F2 3E 62 FC | 	wrlong	local17, objptr
07e34     7B 00 00 FF 
07e38     5C E4 85 F1 | 	sub	objptr, ##63068
07e3c     1F 13 02 F6 | 	mov	arg01, local17
07e40     C0 0E B1 FD | 	call	#_psdpoke
07e44     1F 13 02 F6 | 	mov	arg01, local17
07e48     02 12 06 F1 | 	add	arg01, #2
07e4c     1D 15 02 F6 | 	mov	arg02, local15
07e50     B0 0E B1 FD | 	call	#_psdpoke
07e54     1F 13 02 F6 | 	mov	arg01, local17
07e58     04 12 06 F1 | 	add	arg01, #4
07e5c     0F 15 02 F6 | 	mov	arg02, local01
07e60     58 0E B1 FD | 	call	#_pslpoke
07e64     1F 13 02 F6 | 	mov	arg01, local17
07e68     08 12 06 F1 | 	add	arg01, #8
07e6c     10 15 02 F6 | 	mov	arg02, local02
07e70     48 0E B1 FD | 	call	#_pslpoke
07e74     1F 13 02 F6 | 	mov	arg01, local17
07e78     0C 12 06 F1 | 	add	arg01, #12
07e7c     11 15 02 F6 | 	mov	arg02, local03
07e80     38 0E B1 FD | 	call	#_pslpoke
07e84     14 35 02 F6 | 	mov	local12, local06
07e88     04 34 66 F0 | 	shl	local12, #4
07e8c     34 00 00 FF 
07e90     EC E5 05 F1 | 	add	objptr, ##27116
07e94     F2 34 02 F1 | 	add	local12, objptr
07e98     1A 27 62 FC | 	wrlong	local05, local12
07e9c     14 35 02 F6 | 	mov	local12, local06
07ea0     04 34 66 F0 | 	shl	local12, #4
07ea4     F2 34 02 F1 | 	add	local12, objptr
07ea8     04 34 06 F1 | 	add	local12, #4
07eac     1A 3F 62 FC | 	wrlong	local17, local12
07eb0     14 35 02 F6 | 	mov	local12, local06
07eb4     04 34 66 F0 | 	shl	local12, #4
07eb8     F2 34 02 F1 | 	add	local12, objptr
07ebc     0C 34 06 F1 | 	add	local12, #12
07ec0     1A 39 62 FC | 	wrlong	local14, local12
07ec4                 | ' memtop=arrayptr
07ec4                 | ' 
07ec4                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
07ec4                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
07ec4                 | ' pslpoke arrayptr+4,dims(0)
07ec4                 | ' pslpoke arrayptr+8,dims(1)
07ec4                 | ' pslpoke arrayptr+12,dims(2)
07ec4                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
07ec4                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
07ec4                 | ' 
07ec4                 | ' 
07ec4                 | ' variables(j).name=varname2$
07ec4                 | ' variables(j).value.uresult=arrayptr
07ec4                 | ' variables(j).vartype=arraytype
07ec4                 | ' if j=varnum then varnum+=1
07ec4     20 00 00 FF 
07ec8     00 E4 05 F1 | 	add	objptr, ##16384
07ecc     F2 2A 02 FB | 	rdlong	local07, objptr
07ed0     54 00 00 FF 
07ed4     EC E5 85 F1 | 	sub	objptr, ##43500
07ed8     15 29 0A F2 | 	cmp	local06, local07 wz
07edc     54 00 00 AF 
07ee0     EC E5 05 A1 |  if_e	add	objptr, ##43500
07ee4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07ee8     01 2A 06 A1 |  if_e	add	local07, #1
07eec     F2 2A 62 AC |  if_e	wrlong	local07, objptr
07ef0     54 00 00 AF 
07ef4     EC E5 85 A1 |  if_e	sub	objptr, ##43500
07ef8                 | ' 
07ef8                 | ' return 0
07ef8     00 FA 05 F6 | 	mov	result1, #0
07efc                 | LR__0696
07efc     A7 F0 03 F6 | 	mov	ptra, fp
07f00     B2 00 A0 FD | 	call	#popregs_
07f04                 | _compile_dim_ret
07f04     2D 00 64 FD | 	ret
07f08                 | 
07f08                 | ' 
07f08                 | ' 
07f08                 | ' function compile_for() as ulong  
07f08                 | _compile_for
07f08     07 4A 05 F6 | 	mov	COUNT_, #7
07f0c     A8 00 A0 FD | 	call	#pushregs_
07f10                 | ' 
07f10                 | ' 
07f10                 | ' 
07f10                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07f10     57 00 00 FF 
07f14     28 E4 05 F1 | 	add	objptr, ##44584
07f18     F2 14 02 FB | 	rdlong	arg02, objptr
07f1c     01 14 06 F1 | 	add	arg02, #1
07f20     03 14 66 F0 | 	shl	arg02, #3
07f24     02 00 00 FF 
07f28     38 E4 85 F1 | 	sub	objptr, ##1080
07f2c     F2 14 02 F1 | 	add	arg02, objptr
07f30     0A 13 02 FB | 	rdlong	arg01, arg02
07f34     54 00 00 FF 
07f38     F0 E5 85 F1 | 	sub	objptr, ##43504
07f3c                 | ' 
07f3c                 | ' select case s
07f3c     5D 01 00 FF 
07f40     A4 14 06 F6 | 	mov	arg02, ##@LR__4711
07f44     D8 43 B1 FD | 	call	#__system___string_cmp
07f48     00 FA 0D F2 | 	cmp	result1, #0 wz
07f4c     1B FA 05 A6 |  if_e	mov	result1, #27
07f50     00 FA 05 56 |  if_ne	mov	result1, #0
07f54     00 FA 0D F2 | 	cmp	result1, #0 wz
07f58     0C 00 90 AD |  if_e	jmp	#LR__0700
07f5c     05 12 06 F6 | 	mov	arg01, #5
07f60     D8 E4 BF FD | 	call	#_compile_immediate_assign
07f64     10 00 90 FD | 	jmp	#LR__0701
07f68                 | LR__0700
07f68     20 12 06 F6 | 	mov	arg01, #32
07f6c     48 E9 BF FD | 	call	#_compile_error
07f70     20 FA 05 F6 | 	mov	result1, #32
07f74     E8 02 90 FD | 	jmp	#LR__0707
07f78                 | LR__0701
07f78     6A 00 00 FF 
07f7c     60 E4 05 F1 | 	add	objptr, ##54368
07f80     F2 12 02 FB | 	rdlong	arg01, objptr
07f84     09 25 02 F6 | 	mov	local04, arg01
07f88     01 24 86 F1 | 	sub	local04, #1
07f8c     12 15 02 F6 | 	mov	arg02, local04
07f90     01 14 66 F0 | 	shl	arg02, #1
07f94     12 15 02 F1 | 	add	arg02, local04
07f98     02 14 66 F0 | 	shl	arg02, #2
07f9c     03 00 00 FF 
07fa0     00 E4 85 F1 | 	sub	objptr, ##1536
07fa4     F2 14 02 F1 | 	add	arg02, objptr
07fa8     0A 1F 02 FB | 	rdlong	local01, arg02
07fac     04 14 06 F1 | 	add	arg02, #4
07fb0     0A 27 02 FB | 	rdlong	local05, arg02
07fb4     01 12 86 F1 | 	sub	arg01, #1
07fb8     09 29 02 F6 | 	mov	local06, arg01
07fbc     01 28 66 F0 | 	shl	local06, #1
07fc0     09 29 02 F1 | 	add	local06, arg01
07fc4     02 28 66 F0 | 	shl	local06, #2
07fc8     F2 28 02 F1 | 	add	local06, objptr
07fcc     08 28 06 F1 | 	add	local06, #8
07fd0     14 13 02 FB | 	rdlong	arg01, local06
07fd4     13 21 02 F6 | 	mov	local02, local05
07fd8     09 23 02 F6 | 	mov	local03, arg01
07fdc                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
07fdc                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
07fdc     17 22 0E F2 | 	cmp	local03, #23 wz
07fe0     67 00 00 FF 
07fe4     60 E4 85 F1 | 	sub	objptr, ##52832
07fe8     10 00 90 AD |  if_e	jmp	#LR__0702
07fec     22 12 06 F6 | 	mov	arg01, #34
07ff0     C4 E8 BF FD | 	call	#_compile_error
07ff4     22 FA 05 F6 | 	mov	result1, #34
07ff8     64 02 90 FD | 	jmp	#LR__0707
07ffc                 | LR__0702
07ffc     0F 2B 02 F6 | 	mov	local07, local01
08000                 | ' varnum=t1.result.uresult
08000                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
08000     57 00 00 FF 
08004     28 E4 05 F1 | 	add	objptr, ##44584
08008     F2 24 02 FB | 	rdlong	local04, objptr
0800c     03 24 66 F0 | 	shl	local04, #3
08010     02 00 00 FF 
08014     38 E4 85 F1 | 	sub	objptr, ##1080
08018     F2 24 02 F1 | 	add	local04, objptr
0801c     12 13 02 FB | 	rdlong	arg01, local04
08020     5F 01 00 FF 
08024     3F 14 06 F6 | 	mov	arg02, ##@LR__4904
08028     54 00 00 FF 
0802c     F0 E5 85 F1 | 	sub	objptr, ##43504
08030     EC 42 B1 FD | 	call	#__system___string_cmp
08034     00 FA 0D F2 | 	cmp	result1, #0 wz
08038     10 00 90 AD |  if_e	jmp	#LR__0703
0803c     21 12 06 F6 | 	mov	arg01, #33
08040     74 E8 BF FD | 	call	#_compile_error
08044     21 FA 05 F6 | 	mov	result1, #33
08048     14 02 90 FD | 	jmp	#LR__0707
0804c                 | LR__0703
0804c     57 00 00 FF 
08050     28 E4 05 F1 | 	add	objptr, ##44584
08054     F2 24 02 FB | 	rdlong	local04, objptr
08058     01 24 06 F1 | 	add	local04, #1
0805c     F2 24 62 FC | 	wrlong	local04, objptr
08060     57 00 00 FF 
08064     28 E4 85 F1 | 	sub	objptr, ##44584
08068     D4 0B B0 FD | 	call	#_expr
0806c                 | ' ct+=1
0806c                 | ' expr()  ' there is "to" value pushed on the stack
0806c                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0806c     57 00 00 FF 
08070     28 E4 05 F1 | 	add	objptr, ##44584
08074     F2 24 02 FB | 	rdlong	local04, objptr
08078     03 24 66 F0 | 	shl	local04, #3
0807c     02 00 00 FF 
08080     38 E4 85 F1 | 	sub	objptr, ##1080
08084     F2 24 02 F1 | 	add	local04, objptr
08088     12 13 02 FB | 	rdlong	arg01, local04
0808c     5F 01 00 FF 
08090     42 14 06 F6 | 	mov	arg02, ##@LR__4905
08094     54 00 00 FF 
08098     F0 E5 85 F1 | 	sub	objptr, ##43504
0809c     80 42 B1 FD | 	call	#__system___string_cmp
080a0     00 FA 0D F2 | 	cmp	result1, #0 wz
080a4     3C 00 90 AD |  if_e	jmp	#LR__0704
080a8     57 00 00 FF 
080ac     28 E4 05 F1 | 	add	objptr, ##44584
080b0     F2 28 02 FB | 	rdlong	local06, objptr
080b4     03 28 66 F0 | 	shl	local06, #3
080b8     02 00 00 FF 
080bc     38 E4 85 F1 | 	sub	objptr, ##1080
080c0     F2 28 02 F1 | 	add	local06, objptr
080c4     14 13 02 FB | 	rdlong	arg01, local06
080c8     5F 01 00 FF 
080cc     47 14 06 F6 | 	mov	arg02, ##@LR__4906
080d0     54 00 00 FF 
080d4     F0 E5 85 F1 | 	sub	objptr, ##43504
080d8     44 42 B1 FD | 	call	#__system___string_cmp
080dc     00 FA 0D F2 | 	cmp	result1, #0 wz
080e0     24 00 90 5D |  if_ne	jmp	#LR__0705
080e4                 | LR__0704
080e4     57 00 00 FF 
080e8     28 E4 05 F1 | 	add	objptr, ##44584
080ec     F2 28 02 FB | 	rdlong	local06, objptr
080f0     01 28 06 F1 | 	add	local06, #1
080f4     F2 28 62 FC | 	wrlong	local06, objptr
080f8     57 00 00 FF 
080fc     28 E4 85 F1 | 	sub	objptr, ##44584
08100     3C 0B B0 FD | 	call	#_expr
08104     78 00 90 FD | 	jmp	#LR__0706
08108                 | LR__0705
08108     6A 00 00 FF 
0810c     60 E4 05 F1 | 	add	objptr, ##54368
08110     F2 28 02 FB | 	rdlong	local06, objptr
08114     14 27 02 F6 | 	mov	local05, local06
08118     01 26 66 F0 | 	shl	local05, #1
0811c     14 27 02 F1 | 	add	local05, local06
08120     02 26 66 F0 | 	shl	local05, #2
08124     03 00 00 FF 
08128     00 E4 85 F1 | 	sub	objptr, ##1536
0812c     F2 26 02 F1 | 	add	local05, objptr
08130     08 26 06 F1 | 	add	local05, #8
08134     13 39 68 FC | 	wrlong	#28, local05
08138     03 00 00 FF 
0813c     00 E4 05 F1 | 	add	objptr, ##1536
08140     F2 28 02 FB | 	rdlong	local06, objptr
08144     14 27 02 F6 | 	mov	local05, local06
08148     01 26 66 F0 | 	shl	local05, #1
0814c     14 27 02 F1 | 	add	local05, local06
08150     02 26 66 F0 | 	shl	local05, #2
08154     03 00 00 FF 
08158     00 E4 85 F1 | 	sub	objptr, ##1536
0815c     F2 26 02 F1 | 	add	local05, objptr
08160     13 03 68 FC | 	wrlong	#1, local05
08164     03 00 00 FF 
08168     00 E4 05 F1 | 	add	objptr, ##1536
0816c     F2 28 02 FB | 	rdlong	local06, objptr
08170     01 28 06 F1 | 	add	local06, #1
08174     F2 28 62 FC | 	wrlong	local06, objptr
08178     6A 00 00 FF 
0817c     60 E4 85 F1 | 	sub	objptr, ##54368
08180                 | LR__0706
08180     6A 00 00 FF 
08184     60 E4 05 F1 | 	add	objptr, ##54368
08188     F2 28 02 FB | 	rdlong	local06, objptr
0818c     14 27 02 F6 | 	mov	local05, local06
08190     01 26 66 F0 | 	shl	local05, #1
08194     14 27 02 F1 | 	add	local05, local06
08198     02 26 66 F0 | 	shl	local05, #2
0819c     03 00 00 FF 
081a0     00 E4 85 F1 | 	sub	objptr, ##1536
081a4     F2 26 02 F1 | 	add	local05, objptr
081a8     08 26 06 F1 | 	add	local05, #8
081ac     13 39 68 FC | 	wrlong	#28, local05
081b0     03 00 00 FF 
081b4     00 E4 05 F1 | 	add	objptr, ##1536
081b8     F2 28 02 FB | 	rdlong	local06, objptr
081bc     14 27 02 F6 | 	mov	local05, local06
081c0     01 26 66 F0 | 	shl	local05, #1
081c4     14 27 02 F1 | 	add	local05, local06
081c8     02 26 66 F0 | 	shl	local05, #2
081cc     03 00 00 FF 
081d0     00 E4 85 F1 | 	sub	objptr, ##1536
081d4     F2 26 02 F1 | 	add	local05, objptr
081d8     13 2B 62 FC | 	wrlong	local07, local05
081dc     03 00 00 FF 
081e0     00 E4 05 F1 | 	add	objptr, ##1536
081e4     F2 2A 02 FB | 	rdlong	local07, objptr
081e8     01 2A 06 F1 | 	add	local07, #1
081ec     F2 2A 62 FC | 	wrlong	local07, objptr
081f0     15 29 02 F6 | 	mov	local06, local07
081f4     01 28 66 F0 | 	shl	local06, #1
081f8     15 29 02 F1 | 	add	local06, local07
081fc     02 28 66 F0 | 	shl	local06, #2
08200     03 00 00 FF 
08204     00 E4 85 F1 | 	sub	objptr, ##1536
08208     F2 28 02 F1 | 	add	local06, objptr
0820c     08 28 06 F1 | 	add	local06, #8
08210     14 95 68 FC | 	wrlong	#74, local06
08214     03 00 00 FF 
08218     00 E4 05 F1 | 	add	objptr, ##1536
0821c     F2 2A 02 FB | 	rdlong	local07, objptr
08220     15 29 02 F6 | 	mov	local06, local07
08224     01 28 66 F0 | 	shl	local06, #1
08228     15 29 02 F1 | 	add	local06, local07
0822c     02 28 66 F0 | 	shl	local06, #2
08230     03 00 00 FF 
08234     00 E4 85 F1 | 	sub	objptr, ##1536
08238     F2 28 02 F1 | 	add	local06, objptr
0823c     14 01 68 FC | 	wrlong	#0, local06
08240     03 00 00 FF 
08244     00 E4 05 F1 | 	add	objptr, ##1536
08248     F2 2A 02 FB | 	rdlong	local07, objptr
0824c     01 2A 06 F1 | 	add	local07, #1
08250     F2 2A 62 FC | 	wrlong	local07, objptr
08254     6A 00 00 FF 
08258     60 E4 85 F1 | 	sub	objptr, ##54368
0825c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0825c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0825c                 | ' 
0825c                 | ' 
0825c                 | ' return 0
0825c     00 FA 05 F6 | 	mov	result1, #0
08260                 | LR__0707
08260     A7 F0 03 F6 | 	mov	ptra, fp
08264     B2 00 A0 FD | 	call	#popregs_
08268                 | _compile_for_ret
08268     2D 00 64 FD | 	ret
0826c                 | 
0826c                 | ' 
0826c                 | ' 
0826c                 | ' sub do_for()
0826c                 | _do_for
0826c     05 4A 05 F6 | 	mov	COUNT_, #5
08270     A8 00 A0 FD | 	call	#pushregs_
08274     79 00 00 FF 
08278     BC E5 05 F1 | 	add	objptr, ##62396
0827c     F2 24 02 FB | 	rdlong	local04, objptr
08280     01 24 06 F1 | 	add	local04, #1
08284     F2 24 62 FC | 	wrlong	local04, objptr
08288     79 00 00 FF 
0828c     BC E5 85 F1 | 	sub	objptr, ##62396
08290     34 1E B0 FD | 	call	#_pop
08294     FD 1E 02 F6 | 	mov	local01, result1
08298     FE 20 02 F6 | 	mov	local02, result2
0829c     FF 22 02 F6 | 	mov	local03, result3
082a0     79 00 00 FF 
082a4     BC E5 05 F1 | 	add	objptr, ##62396
082a8     F2 24 02 FB | 	rdlong	local04, objptr
082ac     12 27 02 F6 | 	mov	local05, local04
082b0     02 26 66 F0 | 	shl	local05, #2
082b4     12 27 02 F1 | 	add	local05, local04
082b8     02 26 66 F0 | 	shl	local05, #2
082bc     07 00 00 FF 
082c0     40 E5 85 F1 | 	sub	objptr, ##3904
082c4     F2 26 02 F1 | 	add	local05, objptr
082c8     08 26 06 F1 | 	add	local05, #8
082cc     13 1F 62 FC | 	wrlong	local01, local05
082d0     72 00 00 FF 
082d4     7C E4 85 F1 | 	sub	objptr, ##58492
082d8     EC 1D B0 FD | 	call	#_pop
082dc     FD 1E 02 F6 | 	mov	local01, result1
082e0     FE 20 02 F6 | 	mov	local02, result2
082e4     FF 22 02 F6 | 	mov	local03, result3
082e8     79 00 00 FF 
082ec     BC E5 05 F1 | 	add	objptr, ##62396
082f0     F2 24 02 FB | 	rdlong	local04, objptr
082f4     12 27 02 F6 | 	mov	local05, local04
082f8     02 26 66 F0 | 	shl	local05, #2
082fc     12 27 02 F1 | 	add	local05, local04
08300     02 26 66 F0 | 	shl	local05, #2
08304     07 00 00 FF 
08308     40 E5 85 F1 | 	sub	objptr, ##3904
0830c     F2 26 02 F1 | 	add	local05, objptr
08310     0C 26 06 F1 | 	add	local05, #12
08314     13 1F 62 FC | 	wrlong	local01, local05
08318     72 00 00 FF 
0831c     7C E4 85 F1 | 	sub	objptr, ##58492
08320     A4 1D B0 FD | 	call	#_pop
08324     FD 1E 02 F6 | 	mov	local01, result1
08328     FE 20 02 F6 | 	mov	local02, result2
0832c     FF 22 02 F6 | 	mov	local03, result3
08330     79 00 00 FF 
08334     BC E5 05 F1 | 	add	objptr, ##62396
08338     F2 24 02 FB | 	rdlong	local04, objptr
0833c     12 27 02 F6 | 	mov	local05, local04
08340     02 26 66 F0 | 	shl	local05, #2
08344     12 27 02 F1 | 	add	local05, local04
08348     02 26 66 F0 | 	shl	local05, #2
0834c     07 00 00 FF 
08350     40 E5 85 F1 | 	sub	objptr, ##3904
08354     F2 26 02 F1 | 	add	local05, objptr
08358     10 26 06 F1 | 	add	local05, #16
0835c     13 1F 62 FC | 	wrlong	local01, local05
08360                 | ' fortop+=1
08360                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
08360                 | ' 'if i> maxfor then printerror(36) : return
08360                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
08360                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
08360                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
08360                 | ' if compiledline(lineptr_e).result_type=token_end then
08360     08 00 00 FF 
08364     18 E4 85 F1 | 	sub	objptr, ##4120
08368     F2 1E 02 FB | 	rdlong	local01, objptr
0836c     0F 27 02 F6 | 	mov	local05, local01
08370     01 26 66 F0 | 	shl	local05, #1
08374     0F 27 02 F1 | 	add	local05, local01
08378     02 26 66 F0 | 	shl	local05, #2
0837c     03 00 00 FF 
08380     04 E4 85 F1 | 	sub	objptr, ##1540
08384     F2 26 02 F1 | 	add	local05, objptr
08388     08 26 06 F1 | 	add	local05, #8
0838c     13 27 02 FB | 	rdlong	local05, local05
08390     FE 27 0E F2 | 	cmp	local05, #510 wz
08394     67 00 00 FF 
08398     60 E4 85 F1 | 	sub	objptr, ##52832
0839c     70 00 90 5D |  if_ne	jmp	#LR__0710
083a0     79 00 00 FF 
083a4     BC E5 05 F1 | 	add	objptr, ##62396
083a8     F2 1E 02 FB | 	rdlong	local01, objptr
083ac     0F 27 02 F6 | 	mov	local05, local01
083b0     02 26 66 F0 | 	shl	local05, #2
083b4     0F 27 02 F1 | 	add	local05, local01
083b8     02 26 66 F0 | 	shl	local05, #2
083bc     07 00 00 FF 
083c0     40 E5 85 F1 | 	sub	objptr, ##3904
083c4     F2 26 02 F1 | 	add	local05, objptr
083c8     07 00 00 FF 
083cc     18 E5 05 F1 | 	add	objptr, ##3864
083d0     F2 1E 02 FB | 	rdlong	local01, objptr
083d4     13 1F 62 FC | 	wrlong	local01, local05
083d8     28 E4 05 F1 | 	add	objptr, #40
083dc     F2 1E 02 FB | 	rdlong	local01, objptr
083e0     0F 27 02 F6 | 	mov	local05, local01
083e4     02 26 66 F0 | 	shl	local05, #2
083e8     0F 27 02 F1 | 	add	local05, local01
083ec     02 26 66 F0 | 	shl	local05, #2
083f0     07 00 00 FF 
083f4     40 E5 85 F1 | 	sub	objptr, ##3904
083f8     F2 26 02 F1 | 	add	local05, objptr
083fc     04 26 06 F1 | 	add	local05, #4
08400     13 01 68 FC | 	wrlong	#0, local05
08404     72 00 00 FF 
08408     7C E4 85 F1 | 	sub	objptr, ##58492
0840c     7C 00 90 FD | 	jmp	#LR__0711
08410                 | LR__0710
08410     79 00 00 FF 
08414     BC E5 05 F1 | 	add	objptr, ##62396
08418     F2 1E 02 FB | 	rdlong	local01, objptr
0841c     0F 27 02 F6 | 	mov	local05, local01
08420     02 26 66 F0 | 	shl	local05, #2
08424     0F 27 02 F1 | 	add	local05, local01
08428     02 26 66 F0 | 	shl	local05, #2
0842c     07 00 00 FF 
08430     40 E5 85 F1 | 	sub	objptr, ##3904
08434     F2 26 02 F1 | 	add	local05, objptr
08438     07 00 00 FF 
0843c     20 E5 05 F1 | 	add	objptr, ##3872
08440     F2 1E 02 FB | 	rdlong	local01, objptr
08444     13 1F 62 FC | 	wrlong	local01, local05
08448     20 E4 05 F1 | 	add	objptr, #32
0844c     F2 1E 02 FB | 	rdlong	local01, objptr
08450     0F 27 02 F6 | 	mov	local05, local01
08454     02 26 66 F0 | 	shl	local05, #2
08458     0F 27 02 F1 | 	add	local05, local01
0845c     02 26 66 F0 | 	shl	local05, #2
08460     07 00 00 FF 
08464     40 E5 85 F1 | 	sub	objptr, ##3904
08468     F2 26 02 F1 | 	add	local05, objptr
0846c     08 00 00 FF 
08470     18 E4 85 F1 | 	sub	objptr, ##4120
08474     F2 1E 02 FB | 	rdlong	local01, objptr
08478     6A 00 00 FF 
0847c     64 E4 85 F1 | 	sub	objptr, ##54372
08480     01 1E 06 F1 | 	add	local01, #1
08484     04 26 06 F1 | 	add	local05, #4
08488     13 1F 62 FC | 	wrlong	local01, local05
0848c                 | LR__0711
0848c     A7 F0 03 F6 | 	mov	ptra, fp
08490     B2 00 A0 FD | 	call	#popregs_
08494                 | _do_for_ret
08494     2D 00 64 FD | 	ret
08498                 | 
08498                 | ' 
08498                 | ' ' now do_next todo
08498                 | ' 
08498                 | ' sub do_next()
08498                 | _do_next
08498     04 4A 05 F6 | 	mov	COUNT_, #4
0849c     A8 00 A0 FD | 	call	#pushregs_
084a0     24 1C B0 FD | 	call	#_pop
084a4     FD 1E 02 F6 | 	mov	local01, result1
084a8     FE 20 02 F6 | 	mov	local02, result2
084ac     FF 22 02 F6 | 	mov	local03, result3
084b0                 | ' 
084b0                 | ' t1=pop() :varnum=t1.result.uresult
084b0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
084b0     79 00 00 FF 
084b4     BC E5 05 F1 | 	add	objptr, ##62396
084b8     F2 12 02 FB | 	rdlong	arg01, objptr
084bc     09 25 02 F6 | 	mov	local04, arg01
084c0     02 24 66 F0 | 	shl	local04, #2
084c4     09 25 02 F1 | 	add	local04, arg01
084c8     02 24 66 F0 | 	shl	local04, #2
084cc     07 00 00 FF 
084d0     40 E5 85 F1 | 	sub	objptr, ##3904
084d4     F2 24 02 F1 | 	add	local04, objptr
084d8     08 24 06 F1 | 	add	local04, #8
084dc     12 25 02 FB | 	rdlong	local04, local04
084e0     0F 25 0A F2 | 	cmp	local04, local01 wz
084e4     72 00 00 FF 
084e8     7C E4 85 F1 | 	sub	objptr, ##58492
084ec     0C 00 90 AD |  if_e	jmp	#LR__0720
084f0     25 12 06 F6 | 	mov	arg01, #37
084f4     60 06 B1 FD | 	call	#_printerror
084f8     28 02 90 FD | 	jmp	#LR__0724
084fc                 | LR__0720
084fc     79 00 00 FF 
08500     BC E5 05 F1 | 	add	objptr, ##62396
08504     F2 12 02 FB | 	rdlong	arg01, objptr
08508     09 25 02 F6 | 	mov	local04, arg01
0850c     02 24 66 F0 | 	shl	local04, #2
08510     09 25 02 F1 | 	add	local04, arg01
08514     02 24 66 F0 | 	shl	local04, #2
08518     07 00 00 FF 
0851c     40 E5 85 F1 | 	sub	objptr, ##3904
08520     F2 24 02 F1 | 	add	local04, objptr
08524     0C 24 06 F1 | 	add	local04, #12
08528     12 25 02 FB | 	rdlong	local04, local04
0852c     0F 13 02 F6 | 	mov	arg01, local01
08530     04 12 66 F0 | 	shl	arg01, #4
08534     3D 00 00 FF 
08538     90 E4 85 F1 | 	sub	objptr, ##31376
0853c     F2 12 02 F1 | 	add	arg01, objptr
08540     0F FF 01 F6 | 	mov	result3, local01
08544     04 FE 65 F0 | 	shl	result3, #4
08548     F2 FE 01 F1 | 	add	result3, objptr
0854c     04 FE 05 F1 | 	add	result3, #4
08550     FF FE 01 FB | 	rdlong	result3, result3
08554     12 FF 01 F1 | 	add	result3, local04
08558     04 12 06 F1 | 	add	arg01, #4
0855c     09 FF 61 FC | 	wrlong	result3, arg01
08560                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08560                 | ' if fortable(fortop).stepval>=0 then
08560     44 00 00 FF 
08564     D0 E5 05 F1 | 	add	objptr, ##35280
08568     F2 12 02 FB | 	rdlong	arg01, objptr
0856c     09 25 02 F6 | 	mov	local04, arg01
08570     02 24 66 F0 | 	shl	local04, #2
08574     09 25 02 F1 | 	add	local04, arg01
08578     02 24 66 F0 | 	shl	local04, #2
0857c     07 00 00 FF 
08580     40 E5 85 F1 | 	sub	objptr, ##3904
08584     F2 24 02 F1 | 	add	local04, objptr
08588     0C 24 06 F1 | 	add	local04, #12
0858c     12 25 02 FB | 	rdlong	local04, local04
08590     00 24 56 F2 | 	cmps	local04, #0 wc
08594     72 00 00 FF 
08598     7C E4 85 F1 | 	sub	objptr, ##58492
0859c     78 00 90 CD |  if_b	jmp	#LR__0721
085a0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
085a0     04 1E 66 F0 | 	shl	local01, #4
085a4     34 00 00 FF 
085a8     EC E5 05 F1 | 	add	objptr, ##27116
085ac     F2 1E 02 F1 | 	add	local01, objptr
085b0     44 00 00 FF 
085b4     D0 E5 05 F1 | 	add	objptr, ##35280
085b8     F2 24 02 FB | 	rdlong	local04, objptr
085bc     12 13 02 F6 | 	mov	arg01, local04
085c0     02 12 66 F0 | 	shl	arg01, #2
085c4     12 13 02 F1 | 	add	arg01, local04
085c8     02 12 66 F0 | 	shl	arg01, #2
085cc     07 00 00 FF 
085d0     40 E5 85 F1 | 	sub	objptr, ##3904
085d4     F2 12 02 F1 | 	add	arg01, objptr
085d8     04 1E 06 F1 | 	add	local01, #4
085dc     0F 25 02 FB | 	rdlong	local04, local01
085e0     10 12 06 F1 | 	add	arg01, #16
085e4     09 13 02 FB | 	rdlong	arg01, arg01
085e8     09 25 5A F2 | 	cmps	local04, arg01 wcz
085ec     72 00 00 FF 
085f0     7C E4 85 F1 | 	sub	objptr, ##58492
085f4     9C 00 90 ED |  if_be	jmp	#LR__0723
085f8     79 00 00 FF 
085fc     BC E5 05 F1 | 	add	objptr, ##62396
08600     F2 24 02 FB | 	rdlong	local04, objptr
08604     01 24 86 F1 | 	sub	local04, #1
08608     F2 24 62 FC | 	wrlong	local04, objptr
0860c     79 00 00 FF 
08610     BC E5 85 F1 | 	sub	objptr, ##62396
08614     0C 01 90 FD | 	jmp	#LR__0724
08618                 | LR__0721
08618                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08618     0F 13 02 F6 | 	mov	arg01, local01
0861c     04 12 66 F0 | 	shl	arg01, #4
08620     34 00 00 FF 
08624     EC E5 05 F1 | 	add	objptr, ##27116
08628     F2 12 02 F1 | 	add	arg01, objptr
0862c     44 00 00 FF 
08630     D0 E5 05 F1 | 	add	objptr, ##35280
08634     F2 24 02 FB | 	rdlong	local04, objptr
08638     12 1F 02 F6 | 	mov	local01, local04
0863c     02 1E 66 F0 | 	shl	local01, #2
08640     12 1F 02 F1 | 	add	local01, local04
08644     02 1E 66 F0 | 	shl	local01, #2
08648     07 00 00 FF 
0864c     40 E5 85 F1 | 	sub	objptr, ##3904
08650     F2 1E 02 F1 | 	add	local01, objptr
08654     04 12 06 F1 | 	add	arg01, #4
08658     09 13 02 FB | 	rdlong	arg01, arg01
0865c     10 1E 06 F1 | 	add	local01, #16
08660     0F 1F 02 FB | 	rdlong	local01, local01
08664     0F 13 52 F2 | 	cmps	arg01, local01 wc
08668     72 00 00 FF 
0866c     7C E4 85 F1 | 	sub	objptr, ##58492
08670     20 00 90 3D |  if_ae	jmp	#LR__0722
08674     79 00 00 FF 
08678     BC E5 05 F1 | 	add	objptr, ##62396
0867c     F2 24 02 FB | 	rdlong	local04, objptr
08680     01 24 86 F1 | 	sub	local04, #1
08684     F2 24 62 FC | 	wrlong	local04, objptr
08688     79 00 00 FF 
0868c     BC E5 85 F1 | 	sub	objptr, ##62396
08690     90 00 90 FD | 	jmp	#LR__0724
08694                 | LR__0722
08694                 | LR__0723
08694     79 00 00 FF 
08698     BC E5 05 F1 | 	add	objptr, ##62396
0869c     F2 1E 02 FB | 	rdlong	local01, objptr
086a0     0F 25 02 F6 | 	mov	local04, local01
086a4     02 24 66 F0 | 	shl	local04, #2
086a8     0F 25 02 F1 | 	add	local04, local01
086ac     02 24 66 F0 | 	shl	local04, #2
086b0     07 00 00 FF 
086b4     40 E5 85 F1 | 	sub	objptr, ##3904
086b8     F2 24 02 F1 | 	add	local04, objptr
086bc     12 25 02 FB | 	rdlong	local04, local04
086c0     07 00 00 FF 
086c4     18 E5 05 F1 | 	add	objptr, ##3864
086c8     F2 24 62 FC | 	wrlong	local04, objptr
086cc     28 E4 05 F1 | 	add	objptr, #40
086d0     F2 1E 02 FB | 	rdlong	local01, objptr
086d4     0F 25 02 F6 | 	mov	local04, local01
086d8     02 24 66 F0 | 	shl	local04, #2
086dc     0F 25 02 F1 | 	add	local04, local01
086e0     02 24 66 F0 | 	shl	local04, #2
086e4     07 00 00 FF 
086e8     40 E5 85 F1 | 	sub	objptr, ##3904
086ec     F2 24 02 F1 | 	add	local04, objptr
086f0     04 24 06 F1 | 	add	local04, #4
086f4     12 25 02 FB | 	rdlong	local04, local04
086f8     07 00 00 FF 
086fc     1C E5 05 F1 | 	add	objptr, ##3868
08700     F2 24 62 FC | 	wrlong	local04, objptr
08704     0F 00 00 FF 
08708     38 E5 85 F1 | 	sub	objptr, ##7992
0870c     F2 24 02 FB | 	rdlong	local04, objptr
08710     01 24 86 F1 | 	sub	local04, #1
08714     04 E4 05 F1 | 	add	objptr, #4
08718     F2 24 62 FC | 	wrlong	local04, objptr
0871c     6A 00 00 FF 
08720     64 E4 85 F1 | 	sub	objptr, ##54372
08724                 | LR__0724
08724     A7 F0 03 F6 | 	mov	ptra, fp
08728     B2 00 A0 FD | 	call	#popregs_
0872c                 | _do_next_ret
0872c     2D 00 64 FD | 	ret
08730                 | 
08730                 | ' 
08730                 | ' 
08730                 | ' function compile_next() as ulong
08730                 | _compile_next
08730     04 4A 05 F6 | 	mov	COUNT_, #4
08734     A8 00 A0 FD | 	call	#pushregs_
08738     57 00 00 FF 
0873c     28 E4 05 F1 | 	add	objptr, ##44584
08740     F2 12 02 FB | 	rdlong	arg01, objptr
08744     03 12 66 F0 | 	shl	arg01, #3
08748     02 00 00 FF 
0874c     38 E4 85 F1 | 	sub	objptr, ##1080
08750     F2 12 02 F1 | 	add	arg01, objptr
08754     09 1F 02 FB | 	rdlong	local01, arg01
08758                 | ' 
08758                 | ' varname$=lparts(ct).part$ 
08758                 | ' 'suffix$=right$(varname$,1)
08758                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08758                 | ' if varnum=0 then compile_error(35)  : return 35
08758     04 E4 85 F1 | 	sub	objptr, #4
0875c     F2 14 0A FB | 	rdlong	arg02, objptr wz
08760     54 00 00 FF 
08764     EC E5 85 F1 | 	sub	objptr, ##43500
08768     10 00 90 5D |  if_ne	jmp	#LR__0730
0876c     23 12 06 F6 | 	mov	arg01, #35
08770     44 E1 BF FD | 	call	#_compile_error
08774     23 FA 05 F6 | 	mov	result1, #35
08778     58 01 90 FD | 	jmp	#LR__0734
0877c                 | LR__0730
0877c     01 20 66 F6 | 	neg	local02, #1
08780                 | ' j=-1
08780                 | ' for i=0 to varnum-1
08780     00 22 06 F6 | 	mov	local03, #0
08784     54 00 00 FF 
08788     EC E5 05 F1 | 	add	objptr, ##43500
0878c     F2 24 02 FB | 	rdlong	local04, objptr
08790     54 00 00 FF 
08794     EC E5 85 F1 | 	sub	objptr, ##43500
08798                 | LR__0731
08798     12 23 12 F2 | 	cmp	local03, local04 wc
0879c     38 00 90 3D |  if_ae	jmp	#LR__0732
087a0                 | '   if variables(i).name=varname$ then j=i : exit
087a0     11 15 02 F6 | 	mov	arg02, local03
087a4     04 14 66 F0 | 	shl	arg02, #4
087a8     34 00 00 FF 
087ac     EC E5 05 F1 | 	add	objptr, ##27116
087b0     F2 14 02 F1 | 	add	arg02, objptr
087b4     0A 13 02 FB | 	rdlong	arg01, arg02
087b8     0F 15 02 F6 | 	mov	arg02, local01
087bc     34 00 00 FF 
087c0     EC E5 85 F1 | 	sub	objptr, ##27116
087c4     58 3B B1 FD | 	call	#__system___string_cmp
087c8     00 FA 0D F2 | 	cmp	result1, #0 wz
087cc     11 21 02 A6 |  if_e	mov	local02, local03
087d0     01 22 06 51 |  if_ne	add	local03, #1
087d4     C0 FF 9F 5D |  if_ne	jmp	#LR__0731
087d8                 | LR__0732
087d8                 | ' if j=-1 then compile_error(35) : return 35
087d8     FF FF 7F FF 
087dc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
087e0     10 00 90 5D |  if_ne	jmp	#LR__0733
087e4     23 12 06 F6 | 	mov	arg01, #35
087e8     CC E0 BF FD | 	call	#_compile_error
087ec     23 FA 05 F6 | 	mov	result1, #35
087f0     E0 00 90 FD | 	jmp	#LR__0734
087f4                 | LR__0733
087f4     6A 00 00 FF 
087f8     60 E4 05 F1 | 	add	objptr, ##54368
087fc     F2 24 02 FB | 	rdlong	local04, objptr
08800     12 23 02 F6 | 	mov	local03, local04
08804     01 22 66 F0 | 	shl	local03, #1
08808     12 23 02 F1 | 	add	local03, local04
0880c     02 22 66 F0 | 	shl	local03, #2
08810     03 00 00 FF 
08814     00 E4 85 F1 | 	sub	objptr, ##1536
08818     F2 22 02 F1 | 	add	local03, objptr
0881c     08 22 06 F1 | 	add	local03, #8
08820     11 39 68 FC | 	wrlong	#28, local03
08824     03 00 00 FF 
08828     00 E4 05 F1 | 	add	objptr, ##1536
0882c     F2 24 02 FB | 	rdlong	local04, objptr
08830     12 23 02 F6 | 	mov	local03, local04
08834     01 22 66 F0 | 	shl	local03, #1
08838     12 23 02 F1 | 	add	local03, local04
0883c     02 22 66 F0 | 	shl	local03, #2
08840     03 00 00 FF 
08844     00 E4 85 F1 | 	sub	objptr, ##1536
08848     F2 22 02 F1 | 	add	local03, objptr
0884c     11 21 62 FC | 	wrlong	local02, local03
08850     03 00 00 FF 
08854     00 E4 05 F1 | 	add	objptr, ##1536
08858     F2 24 02 FB | 	rdlong	local04, objptr
0885c     01 24 06 F1 | 	add	local04, #1
08860     F2 24 62 FC | 	wrlong	local04, objptr
08864     12 23 02 F6 | 	mov	local03, local04
08868     01 22 66 F0 | 	shl	local03, #1
0886c     12 23 02 F1 | 	add	local03, local04
08870     02 22 66 F0 | 	shl	local03, #2
08874     03 00 00 FF 
08878     00 E4 85 F1 | 	sub	objptr, ##1536
0887c     F2 22 02 F1 | 	add	local03, objptr
08880     08 22 06 F1 | 	add	local03, #8
08884     11 97 68 FC | 	wrlong	#75, local03
08888     03 00 00 FF 
0888c     00 E4 05 F1 | 	add	objptr, ##1536
08890     F2 24 02 FB | 	rdlong	local04, objptr
08894     12 23 02 F6 | 	mov	local03, local04
08898     01 22 66 F0 | 	shl	local03, #1
0889c     12 23 02 F1 | 	add	local03, local04
088a0     02 22 66 F0 | 	shl	local03, #2
088a4     03 00 00 FF 
088a8     00 E4 85 F1 | 	sub	objptr, ##1536
088ac     F2 22 02 F1 | 	add	local03, objptr
088b0     11 01 68 FC | 	wrlong	#0, local03
088b4     03 00 00 FF 
088b8     00 E4 05 F1 | 	add	objptr, ##1536
088bc     F2 24 02 FB | 	rdlong	local04, objptr
088c0     01 24 06 F1 | 	add	local04, #1
088c4     F2 24 62 FC | 	wrlong	local04, objptr
088c8     6A 00 00 FF 
088cc     60 E4 85 F1 | 	sub	objptr, ##54368
088d0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
088d0                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
088d0                 | ' return 0
088d0     00 FA 05 F6 | 	mov	result1, #0
088d4                 | LR__0734
088d4     A7 F0 03 F6 | 	mov	ptra, fp
088d8     B2 00 A0 FD | 	call	#popregs_
088dc                 | _compile_next_ret
088dc     2D 00 64 FD | 	ret
088e0                 | 
088e0                 | ' 
088e0                 | ' 
088e0                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
088e0                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
088e0                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
088e0                 | ' 
088e0                 | ' 
088e0                 | ' function compile_goto( ) as ulong
088e0                 | _compile_goto
088e0     03 4A 05 F6 | 	mov	COUNT_, #3
088e4     A8 00 A0 FD | 	call	#pushregs_
088e8     28 F0 07 F1 | 	add	ptra, #40
088ec                 | ' 
088ec                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
088ec     57 00 00 FF 
088f0     28 E4 05 F1 | 	add	objptr, ##44584
088f4     F2 16 02 FB | 	rdlong	arg03, objptr
088f8     03 16 66 F0 | 	shl	arg03, #3
088fc     02 00 00 FF 
08900     38 E4 85 F1 | 	sub	objptr, ##1080
08904     F2 16 02 F1 | 	add	arg03, objptr
08908     04 16 06 F1 | 	add	arg03, #4
0890c     0B 17 02 FB | 	rdlong	arg03, arg03
08910     01 00 00 FF 
08914     00 16 0E F2 | 	cmp	arg03, ##512 wz
08918     54 00 00 FF 
0891c     F0 E5 85 F1 | 	sub	objptr, ##43504
08920     CC 02 90 5D |  if_ne	jmp	#LR__0745
08924     57 00 00 FF 
08928     28 E4 05 F1 | 	add	objptr, ##44584
0892c     F2 16 02 FB | 	rdlong	arg03, objptr
08930     01 16 06 F1 | 	add	arg03, #1
08934     03 16 66 F0 | 	shl	arg03, #3
08938     02 00 00 FF 
0893c     38 E4 85 F1 | 	sub	objptr, ##1080
08940     F2 16 02 F1 | 	add	arg03, objptr
08944     04 16 06 F1 | 	add	arg03, #4
08948     0B 17 02 FB | 	rdlong	arg03, arg03
0894c     FE 17 0E F2 | 	cmp	arg03, #510 wz
08950     54 00 00 FF 
08954     F0 E5 85 F1 | 	sub	objptr, ##43504
08958     94 02 90 5D |  if_ne	jmp	#LR__0745
0895c     57 00 00 FF 
08960     28 E4 05 F1 | 	add	objptr, ##44584
08964     F2 16 02 FB | 	rdlong	arg03, objptr
08968     03 16 66 F0 | 	shl	arg03, #3
0896c     02 00 00 FF 
08970     38 E4 85 F1 | 	sub	objptr, ##1080
08974     F2 16 02 F1 | 	add	arg03, objptr
08978     0B 13 02 FB | 	rdlong	arg01, arg03
0897c     00 14 06 F6 | 	mov	arg02, #0
08980     54 00 00 FF 
08984     F0 E5 85 F1 | 	sub	objptr, ##43504
08988     60 6B B1 FD | 	call	#__system____builtin_atoi
0898c     04 4E 05 F1 | 	add	fp, #4
08990     A7 FA 61 FC | 	wrlong	result1, fp
08994     6A 00 00 FF 
08998     60 E4 05 F1 | 	add	objptr, ##54368
0899c     F2 1E 02 FB | 	rdlong	local01, objptr
089a0     0F 21 02 F6 | 	mov	local02, local01
089a4     01 20 66 F0 | 	shl	local02, #1
089a8     0F 21 02 F1 | 	add	local02, local01
089ac     02 20 66 F0 | 	shl	local02, #2
089b0     03 00 00 FF 
089b4     00 E4 85 F1 | 	sub	objptr, ##1536
089b8     F2 20 02 F1 | 	add	local02, objptr
089bc     08 20 06 F1 | 	add	local02, #8
089c0     10 9D 68 FC | 	wrlong	#78, local02
089c4     03 00 00 FF 
089c8     08 E4 05 F1 | 	add	objptr, ##1544
089cc     F2 22 02 FB | 	rdlong	local03, objptr
089d0     6A 00 00 FF 
089d4     68 E4 85 F1 | 	sub	objptr, ##54376
089d8     04 4E 05 F1 | 	add	fp, #4
089dc     A7 22 62 FC | 	wrlong	local03, fp
089e0     08 4E 85 F1 | 	sub	fp, #8
089e4                 | ' 
089e4                 | '   gotoline=val%(lparts(ct).part$) 
089e4                 | '   compiledline(lineptr).result_type=token_fast_goto
089e4                 | ' ' now find a pointer to goto
089e4                 | '   gotoptr=programstart
089e4                 | '   do
089e4                 | LR__0740
089e4     10 4E 05 F1 | 	add	fp, #16
089e8     A7 12 02 F6 | 	mov	arg01, fp
089ec     08 4E 85 F1 | 	sub	fp, #8
089f0     A7 14 02 FB | 	rdlong	arg02, fp
089f4     08 4E 85 F1 | 	sub	fp, #8
089f8     18 16 06 F6 | 	mov	arg03, #24
089fc     0B 00 00 FF 
08a00     C0 E4 05 F1 | 	add	objptr, ##5824
08a04     EC 2C B1 FD | 	call	#_psram_spin2_read1
08a08     0B 00 00 FF 
08a0c     C0 E4 85 F1 | 	sub	objptr, ##5824
08a10                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08a10                 | '     if gotoheader(0)<>$FFFFFFFF then
08a10     10 4E 05 F1 | 	add	fp, #16
08a14     A7 22 02 FB | 	rdlong	local03, fp
08a18     10 4E 85 F1 | 	sub	fp, #16
08a1c     FF FF 7F FF 
08a20     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08a24     24 00 90 AD |  if_e	jmp	#LR__0741
08a28     08 4E 05 F1 | 	add	fp, #8
08a2c     A7 22 02 FB | 	rdlong	local03, fp
08a30     04 4E 05 F1 | 	add	fp, #4
08a34     A7 22 62 FC | 	wrlong	local03, fp
08a38     18 4E 05 F1 | 	add	fp, #24
08a3c     A7 22 02 FB | 	rdlong	local03, fp
08a40     1C 4E 85 F1 | 	sub	fp, #28
08a44     A7 22 62 FC | 	wrlong	local03, fp
08a48     08 4E 85 F1 | 	sub	fp, #8
08a4c                 | LR__0741
08a4c     24 4E 05 F1 | 	add	fp, #36
08a50     A7 22 02 FB | 	rdlong	local03, fp
08a54     24 4E 85 F1 | 	sub	fp, #36
08a58     FF FF 3F FF 
08a5c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08a60     10 4E 05 51 |  if_ne	add	fp, #16
08a64     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08a68     10 4E 85 51 |  if_ne	sub	fp, #16
08a6c     FF FF 7F 5F 
08a70     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08a74     1C 00 90 AD |  if_e	jmp	#LR__0742
08a78     10 4E 05 F1 | 	add	fp, #16
08a7c     A7 22 02 FB | 	rdlong	local03, fp
08a80     0C 4E 85 F1 | 	sub	fp, #12
08a84     A7 20 02 FB | 	rdlong	local02, fp
08a88     04 4E 85 F1 | 	sub	fp, #4
08a8c     10 23 0A F2 | 	cmp	local03, local02 wz
08a90     50 FF 9F 5D |  if_ne	jmp	#LR__0740
08a94                 | LR__0742
08a94                 | '   if gotoheader(0)=gotoline then
08a94     10 4E 05 F1 | 	add	fp, #16
08a98     A7 22 02 FB | 	rdlong	local03, fp
08a9c     0C 4E 85 F1 | 	sub	fp, #12
08aa0     A7 1E 02 FB | 	rdlong	local01, fp
08aa4     04 4E 85 F1 | 	sub	fp, #4
08aa8     0F 23 0A F2 | 	cmp	local03, local01 wz
08aac     7C 00 90 5D |  if_ne	jmp	#LR__0743
08ab0     6A 00 00 FF 
08ab4     60 E4 05 F1 | 	add	objptr, ##54368
08ab8     F2 1E 02 FB | 	rdlong	local01, objptr
08abc     0F 21 02 F6 | 	mov	local02, local01
08ac0     01 20 66 F0 | 	shl	local02, #1
08ac4     0F 21 02 F1 | 	add	local02, local01
08ac8     02 20 66 F0 | 	shl	local02, #2
08acc     03 00 00 FF 
08ad0     00 E4 85 F1 | 	sub	objptr, ##1536
08ad4     F2 20 02 F1 | 	add	local02, objptr
08ad8     0C 4E 05 F1 | 	add	fp, #12
08adc     A7 22 02 FB | 	rdlong	local03, fp
08ae0     10 23 62 FC | 	wrlong	local03, local02
08ae4     03 00 00 FF 
08ae8     00 E4 05 F1 | 	add	objptr, ##1536
08aec     F2 1E 02 FB | 	rdlong	local01, objptr
08af0     0F 21 02 F6 | 	mov	local02, local01
08af4     01 20 66 F0 | 	shl	local02, #1
08af8     0F 21 02 F1 | 	add	local02, local01
08afc     02 20 66 F0 | 	shl	local02, #2
08b00     03 00 00 FF 
08b04     00 E4 85 F1 | 	sub	objptr, ##1536
08b08     F2 20 02 F1 | 	add	local02, objptr
08b0c     08 4E 85 F1 | 	sub	fp, #8
08b10     A7 22 02 FB | 	rdlong	local03, fp
08b14     04 4E 85 F1 | 	sub	fp, #4
08b18     04 20 06 F1 | 	add	local02, #4
08b1c     10 23 62 FC | 	wrlong	local03, local02
08b20     67 00 00 FF 
08b24     60 E4 85 F1 | 	sub	objptr, ##52832
08b28     A4 00 90 FD | 	jmp	#LR__0744
08b2c                 | LR__0743
08b2c     6A 00 00 FF 
08b30     60 E4 05 F1 | 	add	objptr, ##54368
08b34     F2 1E 02 FB | 	rdlong	local01, objptr
08b38     0F 21 02 F6 | 	mov	local02, local01
08b3c     01 20 66 F0 | 	shl	local02, #1
08b40     0F 21 02 F1 | 	add	local02, local01
08b44     02 20 66 F0 | 	shl	local02, #2
08b48     03 00 00 FF 
08b4c     00 E4 85 F1 | 	sub	objptr, ##1536
08b50     F2 20 02 F1 | 	add	local02, objptr
08b54     00 00 C0 FF 
08b58     10 01 68 FC | 	wrlong	##-2147483648, local02
08b5c     03 00 00 FF 
08b60     00 E4 05 F1 | 	add	objptr, ##1536
08b64     F2 1E 02 FB | 	rdlong	local01, objptr
08b68     0F 21 02 F6 | 	mov	local02, local01
08b6c     01 20 66 F0 | 	shl	local02, #1
08b70     0F 21 02 F1 | 	add	local02, local01
08b74     02 20 66 F0 | 	shl	local02, #2
08b78     03 00 00 FF 
08b7c     00 E4 85 F1 | 	sub	objptr, ##1536
08b80     F2 20 02 F1 | 	add	local02, objptr
08b84     04 4E 05 F1 | 	add	fp, #4
08b88     A7 22 02 FB | 	rdlong	local03, fp
08b8c     04 4E 85 F1 | 	sub	fp, #4
08b90     04 20 06 F1 | 	add	local02, #4
08b94     10 23 62 FC | 	wrlong	local03, local02
08b98     03 00 00 FF 
08b9c     00 E4 05 F1 | 	add	objptr, ##1536
08ba0     F2 1E 02 FB | 	rdlong	local01, objptr
08ba4     0F 21 02 F6 | 	mov	local02, local01
08ba8     01 20 66 F0 | 	shl	local02, #1
08bac     0F 21 02 F1 | 	add	local02, local01
08bb0     02 20 66 F0 | 	shl	local02, #2
08bb4     03 00 00 FF 
08bb8     00 E4 85 F1 | 	sub	objptr, ##1536
08bbc     F2 20 02 F1 | 	add	local02, objptr
08bc0     08 20 06 F1 | 	add	local02, #8
08bc4     10 A7 68 FC | 	wrlong	#83, local02
08bc8     67 00 00 FF 
08bcc     60 E4 85 F1 | 	sub	objptr, ##52832
08bd0                 | LR__0744
08bd0     6A 00 00 FF 
08bd4     60 E4 05 F1 | 	add	objptr, ##54368
08bd8     F2 22 02 FB | 	rdlong	local03, objptr
08bdc     01 22 06 F1 | 	add	local03, #1
08be0     F2 22 62 FC | 	wrlong	local03, objptr
08be4     6A 00 00 FF 
08be8     60 E4 85 F1 | 	sub	objptr, ##54368
08bec     40 00 90 FD | 	jmp	#LR__0746
08bf0                 | LR__0745
08bf0                 | '    print "We have a slow goto, todo  "
08bf0     00 12 06 F6 | 	mov	arg01, #0
08bf4     90 90 B1 FD | 	call	#__system___getiolock_0474
08bf8     FD 12 02 F6 | 	mov	arg01, result1
08bfc     F8 36 B1 FD | 	call	#__system___lockmem
08c00     5F 01 00 FF 
08c04     4A 14 06 F6 | 	mov	arg02, ##@LR__4907
08c08     00 12 06 F6 | 	mov	arg01, #0
08c0c     00 16 06 F6 | 	mov	arg03, #0
08c10     E8 43 B1 FD | 	call	#__system___basic_print_string
08c14     00 12 06 F6 | 	mov	arg01, #0
08c18     0A 14 06 F6 | 	mov	arg02, #10
08c1c     00 16 06 F6 | 	mov	arg03, #0
08c20     80 43 B1 FD | 	call	#__system___basic_print_char
08c24     00 12 06 F6 | 	mov	arg01, #0
08c28     5C 90 B1 FD | 	call	#__system___getiolock_0474
08c2c     FD 00 68 FC | 	wrlong	#0, result1
08c30                 | LR__0746
08c30                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08c30                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08c30                 | ' return 0
08c30     00 FA 05 F6 | 	mov	result1, #0
08c34     A7 F0 03 F6 | 	mov	ptra, fp
08c38     B2 00 A0 FD | 	call	#popregs_
08c3c                 | _compile_goto_ret
08c3c     2D 00 64 FD | 	ret
08c40                 | 
08c40                 | ' 
08c40                 | ' 
08c40                 | ' 
08c40                 | ' 
08c40                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c40                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08c40                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c40                 | ' 
08c40                 | ' 
08c40                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c40                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08c40                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c40                 | ' 
08c40                 | ' 
08c40                 | ' function expr() as integer 
08c40                 | _expr
08c40     07 4A 05 F6 | 	mov	COUNT_, #7
08c44     A8 00 A0 FD | 	call	#pushregs_
08c48                 | _expr_enter
08c48     57 00 00 FF 
08c4c     28 E4 05 F1 | 	add	objptr, ##44584
08c50     F2 24 02 FB | 	rdlong	local04, objptr
08c54     03 24 66 F0 | 	shl	local04, #3
08c58     02 00 00 FF 
08c5c     38 E4 85 F1 | 	sub	objptr, ##1080
08c60     F2 24 02 F1 | 	add	local04, objptr
08c64     04 24 06 F1 | 	add	local04, #4
08c68     12 27 02 FB | 	rdlong	local05, local04
08c6c                 | ' 
08c6c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08c6c     FE 27 0E F2 | 	cmp	local05, #510 wz
08c70     54 00 00 FF 
08c74     F0 E5 85 F1 | 	sub	objptr, ##43504
08c78     C4 00 90 5D |  if_ne	jmp	#LR__0750
08c7c     1D 1E 06 F6 | 	mov	local01, #29
08c80     FF 22 06 F6 | 	mov	local03, #255
08c84     0F 29 02 F6 | 	mov	local06, local01
08c88     10 2B 02 F6 | 	mov	local07, local02
08c8c     11 1F 02 F6 | 	mov	local01, local03
08c90     6A 00 00 FF 
08c94     60 E4 05 F1 | 	add	objptr, ##54368
08c98     F2 26 02 FB | 	rdlong	local05, objptr
08c9c     13 25 02 F6 | 	mov	local04, local05
08ca0     01 24 66 F0 | 	shl	local04, #1
08ca4     13 25 02 F1 | 	add	local04, local05
08ca8     02 24 66 F0 | 	shl	local04, #2
08cac     03 00 00 FF 
08cb0     00 E4 85 F1 | 	sub	objptr, ##1536
08cb4     F2 24 02 F1 | 	add	local04, objptr
08cb8     12 29 62 FC | 	wrlong	local06, local04
08cbc     03 00 00 FF 
08cc0     00 E4 05 F1 | 	add	objptr, ##1536
08cc4     F2 28 02 FB | 	rdlong	local06, objptr
08cc8     14 27 02 F6 | 	mov	local05, local06
08ccc     01 26 66 F0 | 	shl	local05, #1
08cd0     14 27 02 F1 | 	add	local05, local06
08cd4     02 26 66 F0 | 	shl	local05, #2
08cd8     03 00 00 FF 
08cdc     00 E4 85 F1 | 	sub	objptr, ##1536
08ce0     F2 26 02 F1 | 	add	local05, objptr
08ce4     04 26 06 F1 | 	add	local05, #4
08ce8     13 2B 62 FC | 	wrlong	local07, local05
08cec     03 00 00 FF 
08cf0     00 E4 05 F1 | 	add	objptr, ##1536
08cf4     F2 2A 02 FB | 	rdlong	local07, objptr
08cf8     15 29 02 F6 | 	mov	local06, local07
08cfc     01 28 66 F0 | 	shl	local06, #1
08d00     15 29 02 F1 | 	add	local06, local07
08d04     02 28 66 F0 | 	shl	local06, #2
08d08     03 00 00 FF 
08d0c     00 E4 85 F1 | 	sub	objptr, ##1536
08d10     F2 28 02 F1 | 	add	local06, objptr
08d14     08 28 06 F1 | 	add	local06, #8
08d18     14 1F 62 FC | 	wrlong	local01, local06
08d1c     03 00 00 FF 
08d20     00 E4 05 F1 | 	add	objptr, ##1536
08d24     F2 28 02 FB | 	rdlong	local06, objptr
08d28     01 28 06 F1 | 	add	local06, #1
08d2c     F2 28 62 FC | 	wrlong	local06, objptr
08d30     6A 00 00 FF 
08d34     60 E4 85 F1 | 	sub	objptr, ##54368
08d38     1D FA 05 F6 | 	mov	result1, #29
08d3c     54 01 90 FD | 	jmp	#LR__0753
08d40                 | LR__0750
08d40     00 1E 06 F6 | 	mov	local01, #0
08d44     58 01 B0 FD | 	call	#_addsub
08d48     57 00 00 FF 
08d4c     28 E4 05 F1 | 	add	objptr, ##44584
08d50     F2 24 02 FB | 	rdlong	local04, objptr
08d54     03 24 66 F0 | 	shl	local04, #3
08d58     02 00 00 FF 
08d5c     38 E4 85 F1 | 	sub	objptr, ##1080
08d60     F2 24 02 F1 | 	add	local04, objptr
08d64     04 24 06 F1 | 	add	local04, #4
08d68     12 27 02 FB | 	rdlong	local05, local04
08d6c                 | ' t3.result.uresult=0
08d6c                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08d6c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08d6c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08d6c     54 00 00 FF 
08d70     F0 E5 85 F1 | 	sub	objptr, ##43504
08d74                 | LR__0751
08d74     1B 26 0E F2 | 	cmp	local05, #27 wz
08d78     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08d7c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08d80     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08d84     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08d88     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08d8c     00 01 90 5D |  if_ne	jmp	#LR__0752
08d90     57 00 00 FF 
08d94     28 E4 05 F1 | 	add	objptr, ##44584
08d98     F2 28 02 FB | 	rdlong	local06, objptr
08d9c     01 28 06 F1 | 	add	local06, #1
08da0     F2 28 62 FC | 	wrlong	local06, objptr
08da4     57 00 00 FF 
08da8     28 E4 85 F1 | 	sub	objptr, ##44584
08dac     F0 00 B0 FD | 	call	#_addsub
08db0     13 23 02 F6 | 	mov	local03, local05
08db4     0F 29 02 F6 | 	mov	local06, local01
08db8     10 2B 02 F6 | 	mov	local07, local02
08dbc     11 27 02 F6 | 	mov	local05, local03
08dc0     6A 00 00 FF 
08dc4     60 E4 05 F1 | 	add	objptr, ##54368
08dc8     F2 24 02 FB | 	rdlong	local04, objptr
08dcc     12 FB 01 F6 | 	mov	result1, local04
08dd0     01 FA 65 F0 | 	shl	result1, #1
08dd4     12 FB 01 F1 | 	add	result1, local04
08dd8     02 FA 65 F0 | 	shl	result1, #2
08ddc     03 00 00 FF 
08de0     00 E4 85 F1 | 	sub	objptr, ##1536
08de4     F2 FA 01 F1 | 	add	result1, objptr
08de8     FD 28 62 FC | 	wrlong	local06, result1
08dec     03 00 00 FF 
08df0     00 E4 05 F1 | 	add	objptr, ##1536
08df4     F2 28 02 FB | 	rdlong	local06, objptr
08df8     14 25 02 F6 | 	mov	local04, local06
08dfc     01 24 66 F0 | 	shl	local04, #1
08e00     14 25 02 F1 | 	add	local04, local06
08e04     02 24 66 F0 | 	shl	local04, #2
08e08     03 00 00 FF 
08e0c     00 E4 85 F1 | 	sub	objptr, ##1536
08e10     F2 24 02 F1 | 	add	local04, objptr
08e14     04 24 06 F1 | 	add	local04, #4
08e18     12 2B 62 FC | 	wrlong	local07, local04
08e1c     03 00 00 FF 
08e20     00 E4 05 F1 | 	add	objptr, ##1536
08e24     F2 2A 02 FB | 	rdlong	local07, objptr
08e28     15 29 02 F6 | 	mov	local06, local07
08e2c     01 28 66 F0 | 	shl	local06, #1
08e30     15 29 02 F1 | 	add	local06, local07
08e34     02 28 66 F0 | 	shl	local06, #2
08e38     03 00 00 FF 
08e3c     00 E4 85 F1 | 	sub	objptr, ##1536
08e40     F2 28 02 F1 | 	add	local06, objptr
08e44     08 28 06 F1 | 	add	local06, #8
08e48     14 27 62 FC | 	wrlong	local05, local06
08e4c     03 00 00 FF 
08e50     00 E4 05 F1 | 	add	objptr, ##1536
08e54     F2 28 02 FB | 	rdlong	local06, objptr
08e58     01 28 06 F1 | 	add	local06, #1
08e5c     F2 28 62 FC | 	wrlong	local06, objptr
08e60     13 00 00 FF 
08e64     38 E4 85 F1 | 	sub	objptr, ##9784
08e68     F2 24 02 FB | 	rdlong	local04, objptr
08e6c     03 24 66 F0 | 	shl	local04, #3
08e70     02 00 00 FF 
08e74     38 E4 85 F1 | 	sub	objptr, ##1080
08e78     F2 24 02 F1 | 	add	local04, objptr
08e7c     04 24 06 F1 | 	add	local04, #4
08e80     12 27 02 FB | 	rdlong	local05, local04
08e84     54 00 00 FF 
08e88     F0 E5 85 F1 | 	sub	objptr, ##43504
08e8c     E4 FE 9F FD | 	jmp	#LR__0751
08e90                 | LR__0752
08e90                 | ' return 0  
08e90     00 FA 05 F6 | 	mov	result1, #0
08e94                 | LR__0753
08e94     A7 F0 03 F6 | 	mov	ptra, fp
08e98     B2 00 A0 FD | 	call	#popregs_
08e9c                 | _expr_ret
08e9c     2D 00 64 FD | 	ret
08ea0                 | 
08ea0                 | ' 
08ea0                 | ' 
08ea0                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08ea0                 | ' 
08ea0                 | ' function addsub() as integer 
08ea0                 | _addsub
08ea0     07 4A 05 F6 | 	mov	COUNT_, #7
08ea4     A8 00 A0 FD | 	call	#pushregs_
08ea8                 | _addsub_enter
08ea8     00 1E 06 F6 | 	mov	local01, #0
08eac     50 01 B0 FD | 	call	#_muldiv
08eb0     57 00 00 FF 
08eb4     28 E4 05 F1 | 	add	objptr, ##44584
08eb8     F2 24 02 FB | 	rdlong	local04, objptr
08ebc     03 24 66 F0 | 	shl	local04, #3
08ec0     02 00 00 FF 
08ec4     38 E4 85 F1 | 	sub	objptr, ##1080
08ec8     F2 24 02 F1 | 	add	local04, objptr
08ecc     04 24 06 F1 | 	add	local04, #4
08ed0     12 27 02 FB | 	rdlong	local05, local04
08ed4                 | ' t3.result.uresult=0
08ed4                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08ed4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08ed4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
08ed4     54 00 00 FF 
08ed8     F0 E5 85 F1 | 	sub	objptr, ##43504
08edc                 | LR__0760
08edc     01 26 0E F2 | 	cmp	local05, #1 wz
08ee0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
08ee4     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08ee8     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
08eec     00 01 90 5D |  if_ne	jmp	#LR__0761
08ef0     57 00 00 FF 
08ef4     28 E4 05 F1 | 	add	objptr, ##44584
08ef8     F2 24 02 FB | 	rdlong	local04, objptr
08efc     01 24 06 F1 | 	add	local04, #1
08f00     F2 24 62 FC | 	wrlong	local04, objptr
08f04     57 00 00 FF 
08f08     28 E4 85 F1 | 	sub	objptr, ##44584
08f0c     F0 00 B0 FD | 	call	#_muldiv
08f10     13 23 02 F6 | 	mov	local03, local05
08f14     0F 29 02 F6 | 	mov	local06, local01
08f18     10 2B 02 F6 | 	mov	local07, local02
08f1c     11 27 02 F6 | 	mov	local05, local03
08f20     6A 00 00 FF 
08f24     60 E4 05 F1 | 	add	objptr, ##54368
08f28     F2 24 02 FB | 	rdlong	local04, objptr
08f2c     12 FB 01 F6 | 	mov	result1, local04
08f30     01 FA 65 F0 | 	shl	result1, #1
08f34     12 FB 01 F1 | 	add	result1, local04
08f38     02 FA 65 F0 | 	shl	result1, #2
08f3c     03 00 00 FF 
08f40     00 E4 85 F1 | 	sub	objptr, ##1536
08f44     F2 FA 01 F1 | 	add	result1, objptr
08f48     FD 28 62 FC | 	wrlong	local06, result1
08f4c     03 00 00 FF 
08f50     00 E4 05 F1 | 	add	objptr, ##1536
08f54     F2 28 02 FB | 	rdlong	local06, objptr
08f58     14 25 02 F6 | 	mov	local04, local06
08f5c     01 24 66 F0 | 	shl	local04, #1
08f60     14 25 02 F1 | 	add	local04, local06
08f64     02 24 66 F0 | 	shl	local04, #2
08f68     03 00 00 FF 
08f6c     00 E4 85 F1 | 	sub	objptr, ##1536
08f70     F2 24 02 F1 | 	add	local04, objptr
08f74     04 24 06 F1 | 	add	local04, #4
08f78     12 2B 62 FC | 	wrlong	local07, local04
08f7c     03 00 00 FF 
08f80     00 E4 05 F1 | 	add	objptr, ##1536
08f84     F2 2A 02 FB | 	rdlong	local07, objptr
08f88     15 29 02 F6 | 	mov	local06, local07
08f8c     01 28 66 F0 | 	shl	local06, #1
08f90     15 29 02 F1 | 	add	local06, local07
08f94     02 28 66 F0 | 	shl	local06, #2
08f98     03 00 00 FF 
08f9c     00 E4 85 F1 | 	sub	objptr, ##1536
08fa0     F2 28 02 F1 | 	add	local06, objptr
08fa4     08 28 06 F1 | 	add	local06, #8
08fa8     14 27 62 FC | 	wrlong	local05, local06
08fac     03 00 00 FF 
08fb0     00 E4 05 F1 | 	add	objptr, ##1536
08fb4     F2 28 02 FB | 	rdlong	local06, objptr
08fb8     01 28 06 F1 | 	add	local06, #1
08fbc     F2 28 62 FC | 	wrlong	local06, objptr
08fc0     13 00 00 FF 
08fc4     38 E4 85 F1 | 	sub	objptr, ##9784
08fc8     F2 24 02 FB | 	rdlong	local04, objptr
08fcc     03 24 66 F0 | 	shl	local04, #3
08fd0     02 00 00 FF 
08fd4     38 E4 85 F1 | 	sub	objptr, ##1080
08fd8     F2 24 02 F1 | 	add	local04, objptr
08fdc     04 24 06 F1 | 	add	local04, #4
08fe0     12 27 02 FB | 	rdlong	local05, local04
08fe4     54 00 00 FF 
08fe8     F0 E5 85 F1 | 	sub	objptr, ##43504
08fec     EC FE 9F FD | 	jmp	#LR__0760
08ff0                 | LR__0761
08ff0                 | '   return 0
08ff0     00 FA 05 F6 | 	mov	result1, #0
08ff4     A7 F0 03 F6 | 	mov	ptra, fp
08ff8     B2 00 A0 FD | 	call	#popregs_
08ffc                 | _addsub_ret
08ffc     2D 00 64 FD | 	ret
09000                 | 
09000                 | ' 
09000                 | ' sub muldiv()
09000                 | _muldiv
09000     08 4A 05 F6 | 	mov	COUNT_, #8
09004     A8 00 A0 FD | 	call	#pushregs_
09008                 | _muldiv_enter
09008     00 1E 06 F6 | 	mov	local01, #0
0900c     58 01 B0 FD | 	call	#_getvalue
09010     57 00 00 FF 
09014     28 E4 05 F1 | 	add	objptr, ##44584
09018     F2 24 02 FB | 	rdlong	local04, objptr
0901c     03 24 66 F0 | 	shl	local04, #3
09020     02 00 00 FF 
09024     38 E4 85 F1 | 	sub	objptr, ##1080
09028     F2 24 02 F1 | 	add	local04, objptr
0902c     04 24 06 F1 | 	add	local04, #4
09030     12 27 02 FB | 	rdlong	local05, local04
09034                 | ' t3.result.uresult=0
09034                 | ' getvalue()    
09034                 | ' op = lparts(ct).token
09034                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09034     54 00 00 FF 
09038     F0 E5 85 F1 | 	sub	objptr, ##43504
0903c                 | LR__0770
0903c     05 26 0E F2 | 	cmp	local05, #5 wz
09040     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09044     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09048     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0904c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09050     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09054     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09058     00 01 90 5D |  if_ne	jmp	#LR__0771
0905c     57 00 00 FF 
09060     28 E4 05 F1 | 	add	objptr, ##44584
09064     F2 24 02 FB | 	rdlong	local04, objptr
09068     01 24 06 F1 | 	add	local04, #1
0906c     F2 24 62 FC | 	wrlong	local04, objptr
09070     57 00 00 FF 
09074     28 E4 85 F1 | 	sub	objptr, ##44584
09078     EC 00 B0 FD | 	call	#_getvalue
0907c     13 23 02 F6 | 	mov	local03, local05
09080     0F 29 02 F6 | 	mov	local06, local01
09084     10 2B 02 F6 | 	mov	local07, local02
09088     11 27 02 F6 | 	mov	local05, local03
0908c     6A 00 00 FF 
09090     60 E4 05 F1 | 	add	objptr, ##54368
09094     F2 24 02 FB | 	rdlong	local04, objptr
09098     12 2D 02 F6 | 	mov	local08, local04
0909c     01 2C 66 F0 | 	shl	local08, #1
090a0     12 2D 02 F1 | 	add	local08, local04
090a4     02 2C 66 F0 | 	shl	local08, #2
090a8     03 00 00 FF 
090ac     00 E4 85 F1 | 	sub	objptr, ##1536
090b0     F2 2C 02 F1 | 	add	local08, objptr
090b4     16 29 62 FC | 	wrlong	local06, local08
090b8     03 00 00 FF 
090bc     00 E4 05 F1 | 	add	objptr, ##1536
090c0     F2 2C 02 FB | 	rdlong	local08, objptr
090c4     16 29 02 F6 | 	mov	local06, local08
090c8     01 28 66 F0 | 	shl	local06, #1
090cc     16 29 02 F1 | 	add	local06, local08
090d0     02 28 66 F0 | 	shl	local06, #2
090d4     03 00 00 FF 
090d8     00 E4 85 F1 | 	sub	objptr, ##1536
090dc     F2 28 02 F1 | 	add	local06, objptr
090e0     04 28 06 F1 | 	add	local06, #4
090e4     14 2B 62 FC | 	wrlong	local07, local06
090e8     03 00 00 FF 
090ec     00 E4 05 F1 | 	add	objptr, ##1536
090f0     F2 2C 02 FB | 	rdlong	local08, objptr
090f4     16 2B 02 F6 | 	mov	local07, local08
090f8     01 2A 66 F0 | 	shl	local07, #1
090fc     16 2B 02 F1 | 	add	local07, local08
09100     02 2A 66 F0 | 	shl	local07, #2
09104     03 00 00 FF 
09108     00 E4 85 F1 | 	sub	objptr, ##1536
0910c     F2 2A 02 F1 | 	add	local07, objptr
09110     08 2A 06 F1 | 	add	local07, #8
09114     15 27 62 FC | 	wrlong	local05, local07
09118     03 00 00 FF 
0911c     00 E4 05 F1 | 	add	objptr, ##1536
09120     F2 28 02 FB | 	rdlong	local06, objptr
09124     01 28 06 F1 | 	add	local06, #1
09128     F2 28 62 FC | 	wrlong	local06, objptr
0912c     13 00 00 FF 
09130     38 E4 85 F1 | 	sub	objptr, ##9784
09134     F2 24 02 FB | 	rdlong	local04, objptr
09138     03 24 66 F0 | 	shl	local04, #3
0913c     02 00 00 FF 
09140     38 E4 85 F1 | 	sub	objptr, ##1080
09144     F2 24 02 F1 | 	add	local04, objptr
09148     04 24 06 F1 | 	add	local04, #4
0914c     12 27 02 FB | 	rdlong	local05, local04
09150     54 00 00 FF 
09154     F0 E5 85 F1 | 	sub	objptr, ##43504
09158     E0 FE 9F FD | 	jmp	#LR__0770
0915c                 | LR__0771
0915c     A7 F0 03 F6 | 	mov	ptra, fp
09160     B2 00 A0 FD | 	call	#popregs_
09164                 | _muldiv_ret
09164     2D 00 64 FD | 	ret
09168                 | 
09168                 | ' 
09168                 | ' sub getvalue() 
09168                 | _getvalue
09168     0B 4A 05 F6 | 	mov	COUNT_, #11
0916c     A8 00 A0 FD | 	call	#pushregs_
09170                 | _getvalue_enter
09170     01 24 06 F6 | 	mov	local04, #1
09174     00 1E 06 F6 | 	mov	local01, #0
09178     1D 22 06 F6 | 	mov	local03, #29
0917c     57 00 00 FF 
09180     28 E4 05 F1 | 	add	objptr, ##44584
09184     F2 16 02 FB | 	rdlong	arg03, objptr
09188     03 16 66 F0 | 	shl	arg03, #3
0918c     02 00 00 FF 
09190     38 E4 85 F1 | 	sub	objptr, ##1080
09194     F2 16 02 F1 | 	add	arg03, objptr
09198     04 16 06 F1 | 	add	arg03, #4
0919c     0B 27 02 FB | 	rdlong	local05, arg03
091a0                 | ' m=1
091a0                 | ' t1.result.uresult=0: t1.result_type=result_uint
091a0                 | ' op=lparts(ct).token
091a0                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
091a0     02 26 0E F2 | 	cmp	local05, #2 wz
091a4     54 00 00 FF 
091a8     F0 E5 85 F1 | 	sub	objptr, ##43504
091ac     38 00 90 5D |  if_ne	jmp	#LR__0780
091b0     01 24 66 F6 | 	neg	local04, #1
091b4     57 00 00 FF 
091b8     28 E4 05 F1 | 	add	objptr, ##44584
091bc     F2 26 02 FB | 	rdlong	local05, objptr
091c0     01 26 06 F1 | 	add	local05, #1
091c4     F2 26 62 FC | 	wrlong	local05, objptr
091c8     03 26 66 F0 | 	shl	local05, #3
091cc     02 00 00 FF 
091d0     38 E4 85 F1 | 	sub	objptr, ##1080
091d4     F2 26 02 F1 | 	add	local05, objptr
091d8     04 26 06 F1 | 	add	local05, #4
091dc     13 27 02 FB | 	rdlong	local05, local05
091e0     54 00 00 FF 
091e4     F0 E5 85 F1 | 	sub	objptr, ##43504
091e8                 | LR__0780
091e8                 | ' select case op
091e8     01 00 00 FF 
091ec     00 26 0E F2 | 	cmp	local05, ##512 wz
091f0     3C 00 90 AD |  if_e	jmp	#LR__0781
091f4     01 00 00 FF 
091f8     01 26 0E F2 | 	cmp	local05, ##513 wz
091fc     88 01 90 AD |  if_e	jmp	#LR__0784
09200     01 00 00 FF 
09204     02 26 0E F2 | 	cmp	local05, ##514 wz
09208     84 02 90 AD |  if_e	jmp	#LR__0785
0920c     01 00 00 FF 
09210     03 26 0E F2 | 	cmp	local05, ##515 wz
09214     E8 03 90 AD |  if_e	jmp	#LR__0788
09218     01 00 00 FF 
0921c     04 26 0E F2 | 	cmp	local05, ##516 wz
09220     B8 05 90 AD |  if_e	jmp	#LR__0793
09224     15 26 0E F2 | 	cmp	local05, #21 wz
09228     D8 05 90 AD |  if_e	jmp	#LR__0794
0922c     48 06 90 FD | 	jmp	#LR__0795
09230                 | LR__0781
09230                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09230     01 24 0E F2 | 	cmp	local04, #1 wz
09234     3C 00 90 5D |  if_ne	jmp	#LR__0782
09238     57 00 00 FF 
0923c     28 E4 05 F1 | 	add	objptr, ##44584
09240     F2 26 02 FB | 	rdlong	local05, objptr
09244     03 26 66 F0 | 	shl	local05, #3
09248     02 00 00 FF 
0924c     38 E4 85 F1 | 	sub	objptr, ##1080
09250     F2 26 02 F1 | 	add	local05, objptr
09254     13 13 02 FB | 	rdlong	arg01, local05
09258     00 14 06 F6 | 	mov	arg02, #0
0925c     54 00 00 FF 
09260     F0 E5 85 F1 | 	sub	objptr, ##43504
09264     84 62 B1 FD | 	call	#__system____builtin_atoi
09268     FD 24 02 FD | 	qmul	local04, result1
0926c     18 1E 62 FD | 	getqx	local01
09270     1C 22 06 F6 | 	mov	local03, #28
09274                 | LR__0782
09274                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09274     FF FF 7F FF 
09278     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0927c     3C 00 90 5D |  if_ne	jmp	#LR__0783
09280     57 00 00 FF 
09284     28 E4 05 F1 | 	add	objptr, ##44584
09288     F2 26 02 FB | 	rdlong	local05, objptr
0928c     03 26 66 F0 | 	shl	local05, #3
09290     02 00 00 FF 
09294     38 E4 85 F1 | 	sub	objptr, ##1080
09298     F2 26 02 F1 | 	add	local05, objptr
0929c     13 13 02 FB | 	rdlong	arg01, local05
092a0     00 14 06 F6 | 	mov	arg02, #0
092a4     54 00 00 FF 
092a8     F0 E5 85 F1 | 	sub	objptr, ##43504
092ac     3C 62 B1 FD | 	call	#__system____builtin_atoi
092b0     FD 24 02 FD | 	qmul	local04, result1
092b4     18 1E 62 FD | 	getqx	local01
092b8     1C 22 06 F6 | 	mov	local03, #28
092bc                 | LR__0783
092bc     0F 29 02 F6 | 	mov	local06, local01
092c0     10 2B 02 F6 | 	mov	local07, local02
092c4     11 27 02 F6 | 	mov	local05, local03
092c8     6A 00 00 FF 
092cc     60 E4 05 F1 | 	add	objptr, ##54368
092d0     F2 1E 02 FB | 	rdlong	local01, objptr
092d4     0F 25 02 F6 | 	mov	local04, local01
092d8     01 24 66 F0 | 	shl	local04, #1
092dc     0F 25 02 F1 | 	add	local04, local01
092e0     02 24 66 F0 | 	shl	local04, #2
092e4     03 00 00 FF 
092e8     00 E4 85 F1 | 	sub	objptr, ##1536
092ec     F2 24 02 F1 | 	add	local04, objptr
092f0     12 29 62 FC | 	wrlong	local06, local04
092f4     03 00 00 FF 
092f8     00 E4 05 F1 | 	add	objptr, ##1536
092fc     F2 28 02 FB | 	rdlong	local06, objptr
09300     14 1F 02 F6 | 	mov	local01, local06
09304     01 1E 66 F0 | 	shl	local01, #1
09308     14 1F 02 F1 | 	add	local01, local06
0930c     02 1E 66 F0 | 	shl	local01, #2
09310     03 00 00 FF 
09314     00 E4 85 F1 | 	sub	objptr, ##1536
09318     F2 1E 02 F1 | 	add	local01, objptr
0931c     04 1E 06 F1 | 	add	local01, #4
09320     0F 2B 62 FC | 	wrlong	local07, local01
09324     03 00 00 FF 
09328     00 E4 05 F1 | 	add	objptr, ##1536
0932c     F2 2A 02 FB | 	rdlong	local07, objptr
09330     15 29 02 F6 | 	mov	local06, local07
09334     01 28 66 F0 | 	shl	local06, #1
09338     15 29 02 F1 | 	add	local06, local07
0933c     02 28 66 F0 | 	shl	local06, #2
09340     03 00 00 FF 
09344     00 E4 85 F1 | 	sub	objptr, ##1536
09348     F2 28 02 F1 | 	add	local06, objptr
0934c     08 28 06 F1 | 	add	local06, #8
09350     14 27 62 FC | 	wrlong	local05, local06
09354     03 00 00 FF 
09358     00 E4 05 F1 | 	add	objptr, ##1536
0935c     F2 28 02 FB | 	rdlong	local06, objptr
09360     01 28 06 F1 | 	add	local06, #1
09364     F2 28 62 FC | 	wrlong	local06, objptr
09368     13 00 00 FF 
0936c     38 E4 85 F1 | 	sub	objptr, ##9784
09370     F2 28 02 FB | 	rdlong	local06, objptr
09374     01 28 06 F1 | 	add	local06, #1
09378     F2 28 62 FC | 	wrlong	local06, objptr
0937c     57 00 00 FF 
09380     28 E4 85 F1 | 	sub	objptr, ##44584
09384     14 05 90 FD | 	jmp	#LR__0796
09388                 | LR__0784
09388     57 00 00 FF 
0938c     28 E4 05 F1 | 	add	objptr, ##44584
09390     F2 28 02 FB | 	rdlong	local06, objptr
09394     03 28 66 F0 | 	shl	local06, #3
09398     02 00 00 FF 
0939c     38 E4 85 F1 | 	sub	objptr, ##1080
093a0     F2 28 02 F1 | 	add	local06, objptr
093a4     14 13 02 FB | 	rdlong	arg01, local06
093a8     00 14 06 F6 | 	mov	arg02, #0
093ac     54 00 00 FF 
093b0     F0 E5 85 F1 | 	sub	objptr, ##43504
093b4     34 61 B1 FD | 	call	#__system____builtin_atoi
093b8     FD 24 02 FD | 	qmul	local04, result1
093bc     6A 00 00 FF 
093c0     60 E4 05 F1 | 	add	objptr, ##54368
093c4     F2 28 02 FB | 	rdlong	local06, objptr
093c8     14 2D 02 F6 | 	mov	local08, local06
093cc     01 2C 66 F0 | 	shl	local08, #1
093d0     14 2D 02 F1 | 	add	local08, local06
093d4     02 2C 66 F0 | 	shl	local08, #2
093d8     03 00 00 FF 
093dc     00 E4 85 F1 | 	sub	objptr, ##1536
093e0     F2 2C 02 F1 | 	add	local08, objptr
093e4     03 00 00 FF 
093e8     00 E4 05 F1 | 	add	objptr, ##1536
093ec     18 1E 62 FD | 	getqx	local01
093f0     1C 22 06 F6 | 	mov	local03, #28
093f4     0F 29 02 F6 | 	mov	local06, local01
093f8     10 2B 02 F6 | 	mov	local07, local02
093fc     16 29 62 FC | 	wrlong	local06, local08
09400     11 2D 02 F6 | 	mov	local08, local03
09404     F2 28 02 FB | 	rdlong	local06, objptr
09408     14 27 02 F6 | 	mov	local05, local06
0940c     01 26 66 F0 | 	shl	local05, #1
09410     14 27 02 F1 | 	add	local05, local06
09414     02 26 66 F0 | 	shl	local05, #2
09418     03 00 00 FF 
0941c     00 E4 85 F1 | 	sub	objptr, ##1536
09420     F2 26 02 F1 | 	add	local05, objptr
09424     04 26 06 F1 | 	add	local05, #4
09428     13 2B 62 FC | 	wrlong	local07, local05
0942c     03 00 00 FF 
09430     00 E4 05 F1 | 	add	objptr, ##1536
09434     F2 2A 02 FB | 	rdlong	local07, objptr
09438     15 29 02 F6 | 	mov	local06, local07
0943c     01 28 66 F0 | 	shl	local06, #1
09440     15 29 02 F1 | 	add	local06, local07
09444     02 28 66 F0 | 	shl	local06, #2
09448     03 00 00 FF 
0944c     00 E4 85 F1 | 	sub	objptr, ##1536
09450     F2 28 02 F1 | 	add	local06, objptr
09454     08 28 06 F1 | 	add	local06, #8
09458     14 2D 62 FC | 	wrlong	local08, local06
0945c     03 00 00 FF 
09460     00 E4 05 F1 | 	add	objptr, ##1536
09464     F2 28 02 FB | 	rdlong	local06, objptr
09468     01 28 06 F1 | 	add	local06, #1
0946c     F2 28 62 FC | 	wrlong	local06, objptr
09470     13 00 00 FF 
09474     38 E4 85 F1 | 	sub	objptr, ##9784
09478     F2 28 02 FB | 	rdlong	local06, objptr
0947c     01 28 06 F1 | 	add	local06, #1
09480     F2 28 62 FC | 	wrlong	local06, objptr
09484     57 00 00 FF 
09488     28 E4 85 F1 | 	sub	objptr, ##44584
0948c     0C 04 90 FD | 	jmp	#LR__0796
09490                 | LR__0785
09490                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09490     01 24 0E F2 | 	cmp	local04, #1 wz
09494     48 00 90 5D |  if_ne	jmp	#LR__0786
09498     00 C0 1F FF 
0949c     00 28 06 F6 | 	mov	local06, ##1065353216
094a0     57 00 00 FF 
094a4     28 E4 05 F1 | 	add	objptr, ##44584
094a8     F2 2C 02 FB | 	rdlong	local08, objptr
094ac     03 2C 66 F0 | 	shl	local08, #3
094b0     02 00 00 FF 
094b4     38 E4 85 F1 | 	sub	objptr, ##1080
094b8     F2 2C 02 F1 | 	add	local08, objptr
094bc     16 13 02 FB | 	rdlong	arg01, local08
094c0     54 00 00 FF 
094c4     F0 E5 85 F1 | 	sub	objptr, ##43504
094c8     90 61 B1 FD | 	call	#__system____builtin_atof
094cc     FD 14 02 F6 | 	mov	arg02, result1
094d0     14 13 02 F6 | 	mov	arg01, local06
094d4     9C 59 B1 FD | 	call	#__system___float_mul
094d8     FD 1E 02 F6 | 	mov	local01, result1
094dc     1E 22 06 F6 | 	mov	local03, #30
094e0                 | LR__0786
094e0                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
094e0     FF FF 7F FF 
094e4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
094e8     48 00 90 5D |  if_ne	jmp	#LR__0787
094ec     00 C0 5F FF 
094f0     00 28 06 F6 | 	mov	local06, ##-1082130432
094f4     57 00 00 FF 
094f8     28 E4 05 F1 | 	add	objptr, ##44584
094fc     F2 2C 02 FB | 	rdlong	local08, objptr
09500     03 2C 66 F0 | 	shl	local08, #3
09504     02 00 00 FF 
09508     38 E4 85 F1 | 	sub	objptr, ##1080
0950c     F2 2C 02 F1 | 	add	local08, objptr
09510     16 13 02 FB | 	rdlong	arg01, local08
09514     54 00 00 FF 
09518     F0 E5 85 F1 | 	sub	objptr, ##43504
0951c     3C 61 B1 FD | 	call	#__system____builtin_atof
09520     FD 14 02 F6 | 	mov	arg02, result1
09524     14 13 02 F6 | 	mov	arg01, local06
09528     48 59 B1 FD | 	call	#__system___float_mul
0952c     FD 1E 02 F6 | 	mov	local01, result1
09530     1E 22 06 F6 | 	mov	local03, #30
09534                 | LR__0787
09534     0F 29 02 F6 | 	mov	local06, local01
09538     10 2B 02 F6 | 	mov	local07, local02
0953c     11 27 02 F6 | 	mov	local05, local03
09540     6A 00 00 FF 
09544     60 E4 05 F1 | 	add	objptr, ##54368
09548     F2 1E 02 FB | 	rdlong	local01, objptr
0954c     0F 2D 02 F6 | 	mov	local08, local01
09550     01 2C 66 F0 | 	shl	local08, #1
09554     0F 2D 02 F1 | 	add	local08, local01
09558     02 2C 66 F0 | 	shl	local08, #2
0955c     03 00 00 FF 
09560     00 E4 85 F1 | 	sub	objptr, ##1536
09564     F2 2C 02 F1 | 	add	local08, objptr
09568     16 29 62 FC | 	wrlong	local06, local08
0956c     03 00 00 FF 
09570     00 E4 05 F1 | 	add	objptr, ##1536
09574     F2 2C 02 FB | 	rdlong	local08, objptr
09578     16 29 02 F6 | 	mov	local06, local08
0957c     01 28 66 F0 | 	shl	local06, #1
09580     16 29 02 F1 | 	add	local06, local08
09584     02 28 66 F0 | 	shl	local06, #2
09588     03 00 00 FF 
0958c     00 E4 85 F1 | 	sub	objptr, ##1536
09590     F2 28 02 F1 | 	add	local06, objptr
09594     04 28 06 F1 | 	add	local06, #4
09598     14 2B 62 FC | 	wrlong	local07, local06
0959c     03 00 00 FF 
095a0     00 E4 05 F1 | 	add	objptr, ##1536
095a4     F2 2C 02 FB | 	rdlong	local08, objptr
095a8     16 2B 02 F6 | 	mov	local07, local08
095ac     01 2A 66 F0 | 	shl	local07, #1
095b0     16 2B 02 F1 | 	add	local07, local08
095b4     02 2A 66 F0 | 	shl	local07, #2
095b8     03 00 00 FF 
095bc     00 E4 85 F1 | 	sub	objptr, ##1536
095c0     F2 2A 02 F1 | 	add	local07, objptr
095c4     08 2A 06 F1 | 	add	local07, #8
095c8     15 27 62 FC | 	wrlong	local05, local07
095cc     03 00 00 FF 
095d0     00 E4 05 F1 | 	add	objptr, ##1536
095d4     F2 28 02 FB | 	rdlong	local06, objptr
095d8     01 28 06 F1 | 	add	local06, #1
095dc     F2 28 62 FC | 	wrlong	local06, objptr
095e0     13 00 00 FF 
095e4     38 E4 85 F1 | 	sub	objptr, ##9784
095e8     F2 28 02 FB | 	rdlong	local06, objptr
095ec     01 28 06 F1 | 	add	local06, #1
095f0     F2 28 62 FC | 	wrlong	local06, objptr
095f4     57 00 00 FF 
095f8     28 E4 85 F1 | 	sub	objptr, ##44584
095fc     9C 02 90 FD | 	jmp	#LR__0796
09600                 | LR__0788
09600     1F 22 06 F6 | 	mov	local03, #31
09604     57 00 00 FF 
09608     28 E4 05 F1 | 	add	objptr, ##44584
0960c     F2 16 02 FB | 	rdlong	arg03, objptr
09610     03 16 66 F0 | 	shl	arg03, #3
09614     02 00 00 FF 
09618     38 E4 85 F1 | 	sub	objptr, ##1080
0961c     F2 16 02 F1 | 	add	arg03, objptr
09620     0B 13 02 FB | 	rdlong	arg01, arg03
09624     54 00 00 FF 
09628     F0 E5 85 F1 | 	sub	objptr, ##43504
0962c     09 2F 02 F6 | 	mov	local09, arg01
09630     97 06 48 FB | 	callpa	#(@LR__0790-@LR__0789)>>2,fcache_load_ptr_
09634                 | LR__0789
09634     17 FB C9 FA | 	rdbyte	result1, local09 wz
09638     01 2E 06 51 |  if_ne	add	local09, #1
0963c     F4 FF 9F 5D |  if_ne	jmp	#LR__0789
09640                 | LR__0790
09640     09 2F 82 F1 | 	sub	local09, arg01
09644     17 FB 01 F6 | 	mov	result1, local09
09648     7B 00 00 FF 
0964c     A8 E4 05 F1 | 	add	objptr, ##63144
09650     F2 FA 61 FC | 	wrlong	result1, objptr
09654     4C E4 85 F1 | 	sub	objptr, #76
09658     F2 12 02 FB | 	rdlong	arg01, objptr
0965c     FD 12 82 F1 | 	sub	arg01, result1
09660     04 12 86 F1 | 	sub	arg01, #4
09664     03 12 26 F5 | 	andn	arg01, #3
09668     F2 12 62 FC | 	wrlong	arg01, objptr
0966c     4C E4 05 F1 | 	add	objptr, #76
09670     F2 14 02 FB | 	rdlong	arg02, objptr
09674     7B 00 00 FF 
09678     A8 E4 85 F1 | 	sub	objptr, ##63144
0967c     3C F6 B0 FD | 	call	#_pslpoke
09680                 | '     pslpoke memtop,l
09680                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09680     01 30 06 F6 | 	mov	local10, #1
09684     7B 00 00 FF 
09688     A8 E4 05 F1 | 	add	objptr, ##63144
0968c     F2 32 02 FB | 	rdlong	local11, objptr
09690     7B 00 00 FF 
09694     A8 E4 85 F1 | 	sub	objptr, ##63144
09698     01 32 06 F1 | 	add	local11, #1
0969c                 | LR__0791
0969c     19 31 52 F2 | 	cmps	local10, local11 wc
096a0     5C 00 90 3D |  if_ae	jmp	#LR__0792
096a4     7B 00 00 FF 
096a8     5C E4 05 F1 | 	add	objptr, ##63068
096ac     F2 2A 02 FB | 	rdlong	local07, objptr
096b0     03 2A 06 F1 | 	add	local07, #3
096b4     18 2B 02 F1 | 	add	local07, local10
096b8     24 00 00 FF 
096bc     34 E4 85 F1 | 	sub	objptr, ##18484
096c0     F2 2C 02 FB | 	rdlong	local08, objptr
096c4     03 2C 66 F0 | 	shl	local08, #3
096c8     02 00 00 FF 
096cc     38 E4 85 F1 | 	sub	objptr, ##1080
096d0     F2 2C 02 F1 | 	add	local08, objptr
096d4     16 13 02 FB | 	rdlong	arg01, local08
096d8     18 15 02 F6 | 	mov	arg02, local10
096dc     01 16 06 F6 | 	mov	arg03, #1
096e0     54 00 00 FF 
096e4     F0 E5 85 F1 | 	sub	objptr, ##43504
096e8     68 4D B1 FD | 	call	#__system__Mid_S
096ec     FD 14 C2 FA | 	rdbyte	arg02, result1
096f0     15 13 02 F6 | 	mov	arg01, local07
096f4     54 F6 B0 FD | 	call	#_pspoke
096f8     01 30 06 F1 | 	add	local10, #1
096fc     9C FF 9F FD | 	jmp	#LR__0791
09700                 | LR__0792
09700     7B 00 00 FF 
09704     5C E4 05 F1 | 	add	objptr, ##63068
09708     F2 1E 02 FB | 	rdlong	local01, objptr
0970c     2B 22 06 F6 | 	mov	local03, #43
09710     0F 29 02 F6 | 	mov	local06, local01
09714     10 2B 02 F6 | 	mov	local07, local02
09718     11 33 02 F6 | 	mov	local11, local03
0971c     10 00 00 FF 
09720     FC E5 85 F1 | 	sub	objptr, ##8700
09724     F2 30 02 FB | 	rdlong	local10, objptr
09728     18 2D 02 F6 | 	mov	local08, local10
0972c     01 2C 66 F0 | 	shl	local08, #1
09730     18 2D 02 F1 | 	add	local08, local10
09734     02 2C 66 F0 | 	shl	local08, #2
09738     03 00 00 FF 
0973c     00 E4 85 F1 | 	sub	objptr, ##1536
09740     F2 2C 02 F1 | 	add	local08, objptr
09744     16 29 62 FC | 	wrlong	local06, local08
09748     03 00 00 FF 
0974c     00 E4 05 F1 | 	add	objptr, ##1536
09750     F2 30 02 FB | 	rdlong	local10, objptr
09754     18 2D 02 F6 | 	mov	local08, local10
09758     01 2C 66 F0 | 	shl	local08, #1
0975c     18 2D 02 F1 | 	add	local08, local10
09760     02 2C 66 F0 | 	shl	local08, #2
09764     03 00 00 FF 
09768     00 E4 85 F1 | 	sub	objptr, ##1536
0976c     F2 2C 02 F1 | 	add	local08, objptr
09770     04 2C 06 F1 | 	add	local08, #4
09774     16 2B 62 FC | 	wrlong	local07, local08
09778     03 00 00 FF 
0977c     00 E4 05 F1 | 	add	objptr, ##1536
09780     F2 30 02 FB | 	rdlong	local10, objptr
09784     18 2D 02 F6 | 	mov	local08, local10
09788     01 2C 66 F0 | 	shl	local08, #1
0978c     18 2D 02 F1 | 	add	local08, local10
09790     02 2C 66 F0 | 	shl	local08, #2
09794     03 00 00 FF 
09798     00 E4 85 F1 | 	sub	objptr, ##1536
0979c     F2 2C 02 F1 | 	add	local08, objptr
097a0     08 2C 06 F1 | 	add	local08, #8
097a4     16 33 62 FC | 	wrlong	local11, local08
097a8     03 00 00 FF 
097ac     00 E4 05 F1 | 	add	objptr, ##1536
097b0     F2 28 02 FB | 	rdlong	local06, objptr
097b4     01 28 06 F1 | 	add	local06, #1
097b8     F2 28 62 FC | 	wrlong	local06, objptr
097bc     13 00 00 FF 
097c0     38 E4 85 F1 | 	sub	objptr, ##9784
097c4     F2 28 02 FB | 	rdlong	local06, objptr
097c8     01 28 06 F1 | 	add	local06, #1
097cc     F2 28 62 FC | 	wrlong	local06, objptr
097d0     57 00 00 FF 
097d4     28 E4 85 F1 | 	sub	objptr, ##44584
097d8     C0 00 90 FD | 	jmp	#LR__0796
097dc                 | LR__0793
097dc     12 13 02 F6 | 	mov	arg01, local04
097e0     B8 03 B0 FD | 	call	#_getvar
097e4     57 00 00 FF 
097e8     28 E4 05 F1 | 	add	objptr, ##44584
097ec     F2 28 02 FB | 	rdlong	local06, objptr
097f0     01 28 06 F1 | 	add	local06, #1
097f4     F2 28 62 FC | 	wrlong	local06, objptr
097f8     57 00 00 FF 
097fc     28 E4 85 F1 | 	sub	objptr, ##44584
09800     98 00 90 FD | 	jmp	#LR__0796
09804                 | LR__0794
09804     57 00 00 FF 
09808     28 E4 05 F1 | 	add	objptr, ##44584
0980c     F2 28 02 FB | 	rdlong	local06, objptr
09810     01 28 06 F1 | 	add	local06, #1
09814     F2 28 62 FC | 	wrlong	local06, objptr
09818     57 00 00 FF 
0981c     28 E4 85 F1 | 	sub	objptr, ##44584
09820     1C F4 BF FD | 	call	#_expr
09824                 | '     ct+=1
09824                 | '     expr() 
09824                 | '     if lparts(ct).token=token_rpar then ct+=1
09824     57 00 00 FF 
09828     28 E4 05 F1 | 	add	objptr, ##44584
0982c     F2 32 02 FB | 	rdlong	local11, objptr
09830     03 32 66 F0 | 	shl	local11, #3
09834     02 00 00 FF 
09838     38 E4 85 F1 | 	sub	objptr, ##1080
0983c     F2 32 02 F1 | 	add	local11, objptr
09840     04 32 06 F1 | 	add	local11, #4
09844     19 33 02 FB | 	rdlong	local11, local11
09848     14 32 0E F2 | 	cmp	local11, #20 wz
0984c     54 00 00 FF 
09850     F0 E5 85 F1 | 	sub	objptr, ##43504
09854     44 00 90 5D |  if_ne	jmp	#LR__0796
09858     57 00 00 FF 
0985c     28 E4 05 F1 | 	add	objptr, ##44584
09860     F2 28 02 FB | 	rdlong	local06, objptr
09864     01 28 06 F1 | 	add	local06, #1
09868     F2 28 62 FC | 	wrlong	local06, objptr
0986c     57 00 00 FF 
09870     28 E4 85 F1 | 	sub	objptr, ##44584
09874     24 00 90 FD | 	jmp	#LR__0796
09878                 | LR__0795
09878     12 13 02 F6 | 	mov	arg01, local04
0987c     28 00 B0 FD | 	call	#_getfun
09880     57 00 00 FF 
09884     28 E4 05 F1 | 	add	objptr, ##44584
09888     F2 28 02 FB | 	rdlong	local06, objptr
0988c     01 28 06 F1 | 	add	local06, #1
09890     F2 28 62 FC | 	wrlong	local06, objptr
09894     57 00 00 FF 
09898     28 E4 85 F1 | 	sub	objptr, ##44584
0989c                 | LR__0796
0989c     A7 F0 03 F6 | 	mov	ptra, fp
098a0     B2 00 A0 FD | 	call	#popregs_
098a4                 | _getvalue_ret
098a4     2D 00 64 FD | 	ret
098a8                 | 
098a8                 | ' 
098a8                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
098a8                 | _getfun
098a8     0A 4A 05 F6 | 	mov	COUNT_, #10
098ac     A8 00 A0 FD | 	call	#pushregs_
098b0                 | _getfun_enter
098b0     09 25 02 F6 | 	mov	local04, arg01
098b4     57 00 00 FF 
098b8     28 E4 05 F1 | 	add	objptr, ##44584
098bc     F2 26 02 FB | 	rdlong	local05, objptr
098c0     13 29 02 F6 | 	mov	local06, local05
098c4     00 2A 06 F6 | 	mov	local07, #0
098c8                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
098c8                 | ' oldct=ct
098c8                 | ' numpar=0
098c8                 | '   
098c8                 | ' if lparts(ct+1).token=token_lpar then
098c8     01 26 06 F1 | 	add	local05, #1
098cc     03 26 66 F0 | 	shl	local05, #3
098d0     02 00 00 FF 
098d4     38 E4 85 F1 | 	sub	objptr, ##1080
098d8     F2 26 02 F1 | 	add	local05, objptr
098dc     04 26 06 F1 | 	add	local05, #4
098e0     13 27 02 FB | 	rdlong	local05, local05
098e4     15 26 0E F2 | 	cmp	local05, #21 wz
098e8     54 00 00 FF 
098ec     F0 E5 85 F1 | 	sub	objptr, ##43504
098f0     08 01 90 5D |  if_ne	jmp	#LR__0804
098f4     57 00 00 FF 
098f8     28 E4 05 F1 | 	add	objptr, ##44584
098fc     F2 2C 02 FB | 	rdlong	local08, objptr
09900     01 2C 06 F1 | 	add	local08, #1
09904     F2 2C 62 FC | 	wrlong	local08, objptr
09908     57 00 00 FF 
0990c     28 E4 85 F1 | 	sub	objptr, ##44584
09910                 | '   ct+=1 											' omit this lpar, this is for expr list
09910                 | '   do
09910                 | LR__0800
09910     57 00 00 FF 
09914     28 E4 05 F1 | 	add	objptr, ##44584
09918     F2 26 02 FB | 	rdlong	local05, objptr
0991c     01 26 06 F1 | 	add	local05, #1
09920     F2 26 62 FC | 	wrlong	local05, objptr
09924                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09924                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09924     03 26 66 F0 | 	shl	local05, #3
09928     02 00 00 FF 
0992c     38 E4 85 F1 | 	sub	objptr, ##1080
09930     F2 26 02 F1 | 	add	local05, objptr
09934     04 26 06 F1 | 	add	local05, #4
09938     13 2D 02 FB | 	rdlong	local08, local05
0993c     15 2C 0E F2 | 	cmp	local08, #21 wz
09940     54 00 00 FF 
09944     F0 E5 85 F1 | 	sub	objptr, ##43504
09948     40 00 90 5D |  if_ne	jmp	#LR__0801
0994c     57 00 00 FF 
09950     28 E4 05 F1 | 	add	objptr, ##44584
09954     F2 2C 02 FB | 	rdlong	local08, objptr
09958     01 2C 06 F1 | 	add	local08, #1
0995c     F2 2C 62 FC | 	wrlong	local08, objptr
09960     57 00 00 FF 
09964     28 E4 85 F1 | 	sub	objptr, ##44584
09968     D4 F2 BF FD | 	call	#_expr
0996c     57 00 00 FF 
09970     28 E4 05 F1 | 	add	objptr, ##44584
09974     F2 2C 02 FB | 	rdlong	local08, objptr
09978     01 2C 06 F1 | 	add	local08, #1
0997c     F2 2C 62 FC | 	wrlong	local08, objptr
09980     57 00 00 FF 
09984     28 E4 85 F1 | 	sub	objptr, ##44584
09988     04 00 90 FD | 	jmp	#LR__0802
0998c                 | LR__0801
0998c     B0 F2 BF FD | 	call	#_expr
09990                 | LR__0802
09990     01 2A 06 F1 | 	add	local07, #1
09994     57 00 00 FF 
09998     28 E4 05 F1 | 	add	objptr, ##44584
0999c     F2 26 02 FB | 	rdlong	local05, objptr
099a0     03 26 66 F0 | 	shl	local05, #3
099a4     02 00 00 FF 
099a8     38 E4 85 F1 | 	sub	objptr, ##1080
099ac     F2 26 02 F1 | 	add	local05, objptr
099b0     04 26 06 F1 | 	add	local05, #4
099b4     13 2D 02 FB | 	rdlong	local08, local05
099b8     14 2C 0E F2 | 	cmp	local08, #20 wz
099bc     54 00 00 FF 
099c0     F0 E5 85 F1 | 	sub	objptr, ##43504
099c4     34 00 90 AD |  if_e	jmp	#LR__0803
099c8     57 00 00 FF 
099cc     28 E4 05 F1 | 	add	objptr, ##44584
099d0     F2 2C 02 FB | 	rdlong	local08, objptr
099d4     03 2C 66 F0 | 	shl	local08, #3
099d8     02 00 00 FF 
099dc     38 E4 85 F1 | 	sub	objptr, ##1080
099e0     F2 2C 02 F1 | 	add	local08, objptr
099e4     04 2C 06 F1 | 	add	local08, #4
099e8     16 2D 02 FB | 	rdlong	local08, local08
099ec     FE 2D 0E F2 | 	cmp	local08, #510 wz
099f0     54 00 00 FF 
099f4     F0 E5 85 F1 | 	sub	objptr, ##43504
099f8     14 FF 9F 5D |  if_ne	jmp	#LR__0800
099fc                 | LR__0803
099fc                 | LR__0804
099fc     15 1F 02 F6 | 	mov	local01, local07
09a00     03 28 66 F0 | 	shl	local06, #3
09a04     54 00 00 FF 
09a08     F0 E5 05 F1 | 	add	objptr, ##43504
09a0c     F2 28 02 F1 | 	add	local06, objptr
09a10     04 28 06 F1 | 	add	local06, #4
09a14     14 23 02 FB | 	rdlong	local03, local06
09a18     0F 2D 02 F6 | 	mov	local08, local01
09a1c     10 2B 02 F6 | 	mov	local07, local02
09a20     11 29 02 F6 | 	mov	local06, local03
09a24     15 00 00 FF 
09a28     70 E4 05 F1 | 	add	objptr, ##10864
09a2c     F2 26 02 FB | 	rdlong	local05, objptr
09a30     13 13 02 F6 | 	mov	arg01, local05
09a34     01 12 66 F0 | 	shl	arg01, #1
09a38     13 13 02 F1 | 	add	arg01, local05
09a3c     02 12 66 F0 | 	shl	arg01, #2
09a40     03 00 00 FF 
09a44     00 E4 85 F1 | 	sub	objptr, ##1536
09a48     F2 12 02 F1 | 	add	arg01, objptr
09a4c     09 2D 62 FC | 	wrlong	local08, arg01
09a50     03 00 00 FF 
09a54     00 E4 05 F1 | 	add	objptr, ##1536
09a58     F2 2C 02 FB | 	rdlong	local08, objptr
09a5c     16 2F 02 F6 | 	mov	local09, local08
09a60     01 2E 66 F0 | 	shl	local09, #1
09a64     16 2F 02 F1 | 	add	local09, local08
09a68     02 2E 66 F0 | 	shl	local09, #2
09a6c     03 00 00 FF 
09a70     00 E4 85 F1 | 	sub	objptr, ##1536
09a74     F2 2E 02 F1 | 	add	local09, objptr
09a78     04 2E 06 F1 | 	add	local09, #4
09a7c     17 2B 62 FC | 	wrlong	local07, local09
09a80     03 00 00 FF 
09a84     00 E4 05 F1 | 	add	objptr, ##1536
09a88     F2 2C 02 FB | 	rdlong	local08, objptr
09a8c     16 31 02 F6 | 	mov	local10, local08
09a90     01 30 66 F0 | 	shl	local10, #1
09a94     16 31 02 F1 | 	add	local10, local08
09a98     02 30 66 F0 | 	shl	local10, #2
09a9c     03 00 00 FF 
09aa0     00 E4 85 F1 | 	sub	objptr, ##1536
09aa4     F2 30 02 F1 | 	add	local10, objptr
09aa8     08 30 06 F1 | 	add	local10, #8
09aac     18 29 62 FC | 	wrlong	local06, local10
09ab0     03 00 00 FF 
09ab4     00 E4 05 F1 | 	add	objptr, ##1536
09ab8     F2 2C 02 FB | 	rdlong	local08, objptr
09abc     01 2C 06 F1 | 	add	local08, #1
09ac0     F2 2C 62 FC | 	wrlong	local08, objptr
09ac4     6A 00 00 FF 
09ac8     60 E4 85 F1 | 	sub	objptr, ##54368
09acc                 | ' 
09acc                 | ' t2.result.uresult=numpar
09acc                 | ' 
09acc                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
09acc                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09acc                 | ' 
09acc                 | '   
09acc                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09acc     FF FF 7F FF 
09ad0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09ad4     B8 00 90 5D |  if_ne	jmp	#LR__0805
09ad8     15 22 06 F6 | 	mov	local03, #21
09adc     0F 2D 02 F6 | 	mov	local08, local01
09ae0     10 2B 02 F6 | 	mov	local07, local02
09ae4     11 29 02 F6 | 	mov	local06, local03
09ae8     6A 00 00 FF 
09aec     60 E4 05 F1 | 	add	objptr, ##54368
09af0     F2 26 02 FB | 	rdlong	local05, objptr
09af4     13 13 02 F6 | 	mov	arg01, local05
09af8     01 12 66 F0 | 	shl	arg01, #1
09afc     13 13 02 F1 | 	add	arg01, local05
09b00     02 12 66 F0 | 	shl	arg01, #2
09b04     03 00 00 FF 
09b08     00 E4 85 F1 | 	sub	objptr, ##1536
09b0c     F2 12 02 F1 | 	add	arg01, objptr
09b10     09 2D 62 FC | 	wrlong	local08, arg01
09b14     03 00 00 FF 
09b18     00 E4 05 F1 | 	add	objptr, ##1536
09b1c     F2 30 02 FB | 	rdlong	local10, objptr
09b20     18 2F 02 F6 | 	mov	local09, local10
09b24     01 2E 66 F0 | 	shl	local09, #1
09b28     18 2F 02 F1 | 	add	local09, local10
09b2c     02 2E 66 F0 | 	shl	local09, #2
09b30     03 00 00 FF 
09b34     00 E4 85 F1 | 	sub	objptr, ##1536
09b38     F2 2E 02 F1 | 	add	local09, objptr
09b3c     04 2E 06 F1 | 	add	local09, #4
09b40     17 2B 62 FC | 	wrlong	local07, local09
09b44     03 00 00 FF 
09b48     00 E4 05 F1 | 	add	objptr, ##1536
09b4c     F2 2E 02 FB | 	rdlong	local09, objptr
09b50     17 31 02 F6 | 	mov	local10, local09
09b54     01 30 66 F0 | 	shl	local10, #1
09b58     17 31 02 F1 | 	add	local10, local09
09b5c     02 30 66 F0 | 	shl	local10, #2
09b60     03 00 00 FF 
09b64     00 E4 85 F1 | 	sub	objptr, ##1536
09b68     F2 30 02 F1 | 	add	local10, objptr
09b6c     08 30 06 F1 | 	add	local10, #8
09b70     18 29 62 FC | 	wrlong	local06, local10
09b74     03 00 00 FF 
09b78     00 E4 05 F1 | 	add	objptr, ##1536
09b7c     F2 2C 02 FB | 	rdlong	local08, objptr
09b80     01 2C 06 F1 | 	add	local08, #1
09b84     F2 2C 62 FC | 	wrlong	local08, objptr
09b88     6A 00 00 FF 
09b8c     60 E4 85 F1 | 	sub	objptr, ##54368
09b90                 | LR__0805
09b90     A7 F0 03 F6 | 	mov	ptra, fp
09b94     B2 00 A0 FD | 	call	#popregs_
09b98                 | _getfun_ret
09b98     2D 00 64 FD | 	ret
09b9c                 | 
09b9c                 | '   
09b9c                 | '   
09b9c                 | ' sub getvar(m as integer) 
09b9c                 | _getvar
09b9c     0A 4A 05 F6 | 	mov	COUNT_, #10
09ba0     A8 00 A0 FD | 	call	#pushregs_
09ba4                 | _getvar_enter
09ba4     09 25 02 F6 | 	mov	local04, arg01
09ba8     57 00 00 FF 
09bac     28 E4 05 F1 | 	add	objptr, ##44584
09bb0     F2 14 02 FB | 	rdlong	arg02, objptr
09bb4     03 14 66 F0 | 	shl	arg02, #3
09bb8     02 00 00 FF 
09bbc     38 E4 85 F1 | 	sub	objptr, ##1080
09bc0     F2 14 02 F1 | 	add	arg02, objptr
09bc4     0A 27 02 FB | 	rdlong	local05, arg02
09bc8     13 13 02 F6 | 	mov	arg01, local05
09bcc     01 14 06 F6 | 	mov	arg02, #1
09bd0     54 00 00 FF 
09bd4     F0 E5 85 F1 | 	sub	objptr, ##43504
09bd8     E8 47 B1 FD | 	call	#__system__Right_S
09bdc     FD 28 02 F6 | 	mov	local06, result1
09be0     01 2A 66 F6 | 	neg	local07, #1
09be4                 | ' 
09be4                 | ' varname$=lparts(ct).part$
09be4                 | ' suffix$=right$(varname$,1)
09be4                 | ' j=-1
09be4                 | ' 
09be4                 | ' for i=0 to varnum-1
09be4     00 2C 06 F6 | 	mov	local08, #0
09be8     54 00 00 FF 
09bec     EC E5 05 F1 | 	add	objptr, ##43500
09bf0     F2 2E 02 FB | 	rdlong	local09, objptr
09bf4     54 00 00 FF 
09bf8     EC E5 85 F1 | 	sub	objptr, ##43500
09bfc                 | LR__0810
09bfc     17 2D 52 F2 | 	cmps	local08, local09 wc
09c00     38 00 90 3D |  if_ae	jmp	#LR__0811
09c04                 | '   if variables(i).name=varname$ then j=i : exit
09c04     16 15 02 F6 | 	mov	arg02, local08
09c08     04 14 66 F0 | 	shl	arg02, #4
09c0c     34 00 00 FF 
09c10     EC E5 05 F1 | 	add	objptr, ##27116
09c14     F2 14 02 F1 | 	add	arg02, objptr
09c18     0A 13 02 FB | 	rdlong	arg01, arg02
09c1c     13 15 02 F6 | 	mov	arg02, local05
09c20     34 00 00 FF 
09c24     EC E5 85 F1 | 	sub	objptr, ##27116
09c28     F4 26 B1 FD | 	call	#__system___string_cmp
09c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
09c30     16 2B 02 A6 |  if_e	mov	local07, local08
09c34     01 2C 06 51 |  if_ne	add	local08, #1
09c38     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
09c3c                 | LR__0811
09c3c                 | ' if  j=-1 andalso varnum<maxvars then   
09c3c     FF FF 7F FF 
09c40     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09c44     A8 00 90 5D |  if_ne	jmp	#LR__0812
09c48     54 00 00 FF 
09c4c     EC E5 05 F1 | 	add	objptr, ##43500
09c50     F2 2E 02 FB | 	rdlong	local09, objptr
09c54     54 00 00 FF 
09c58     EC E5 85 F1 | 	sub	objptr, ##43500
09c5c     01 00 00 FF 
09c60     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09c64     88 00 90 3D |  if_ae	jmp	#LR__0812
09c68     54 00 00 FF 
09c6c     EC E5 05 F1 | 	add	objptr, ##43500
09c70     F2 2E 02 FB | 	rdlong	local09, objptr
09c74     04 2E 66 F0 | 	shl	local09, #4
09c78     20 00 00 FF 
09c7c     00 E4 85 F1 | 	sub	objptr, ##16384
09c80     F2 2E 02 F1 | 	add	local09, objptr
09c84     17 27 62 FC | 	wrlong	local05, local09
09c88     20 00 00 FF 
09c8c     00 E4 05 F1 | 	add	objptr, ##16384
09c90     F2 2E 02 FB | 	rdlong	local09, objptr
09c94     04 2E 66 F0 | 	shl	local09, #4
09c98     20 00 00 FF 
09c9c     00 E4 85 F1 | 	sub	objptr, ##16384
09ca0     F2 2E 02 F1 | 	add	local09, objptr
09ca4     04 2E 06 F1 | 	add	local09, #4
09ca8     17 01 68 FC | 	wrlong	#0, local09
09cac     20 00 00 FF 
09cb0     00 E4 05 F1 | 	add	objptr, ##16384
09cb4     F2 2E 02 FB | 	rdlong	local09, objptr
09cb8     04 2E 66 F0 | 	shl	local09, #4
09cbc     20 00 00 FF 
09cc0     00 E4 85 F1 | 	sub	objptr, ##16384
09cc4     F2 2E 02 F1 | 	add	local09, objptr
09cc8     0C 2E 06 F1 | 	add	local09, #12
09ccc     17 39 68 FC | 	wrlong	#28, local09
09cd0     20 00 00 FF 
09cd4     00 E4 05 F1 | 	add	objptr, ##16384
09cd8     F2 2E 02 FB | 	rdlong	local09, objptr
09cdc     17 2B 02 F6 | 	mov	local07, local09
09ce0     01 2E 06 F1 | 	add	local09, #1
09ce4     F2 2E 62 FC | 	wrlong	local09, objptr
09ce8     54 00 00 FF 
09cec     EC E5 85 F1 | 	sub	objptr, ##43500
09cf0                 | LR__0812
09cf0     00 2E 06 F6 | 	mov	local09, #0
09cf4                 | ' numpar=0
09cf4                 | ' ' check if it is an array
09cf4                 | ' 
09cf4                 | ' if lparts(ct+1).token=token_lpar then
09cf4     57 00 00 FF 
09cf8     28 E4 05 F1 | 	add	objptr, ##44584
09cfc     F2 2C 02 FB | 	rdlong	local08, objptr
09d00     01 2C 06 F1 | 	add	local08, #1
09d04     03 2C 66 F0 | 	shl	local08, #3
09d08     02 00 00 FF 
09d0c     38 E4 85 F1 | 	sub	objptr, ##1080
09d10     F2 2C 02 F1 | 	add	local08, objptr
09d14     04 2C 06 F1 | 	add	local08, #4
09d18     16 2D 02 FB | 	rdlong	local08, local08
09d1c     15 2C 0E F2 | 	cmp	local08, #21 wz
09d20     54 00 00 FF 
09d24     F0 E5 85 F1 | 	sub	objptr, ##43504
09d28     08 01 90 5D |  if_ne	jmp	#LR__0817
09d2c     57 00 00 FF 
09d30     28 E4 05 F1 | 	add	objptr, ##44584
09d34     F2 30 02 FB | 	rdlong	local10, objptr
09d38     01 30 06 F1 | 	add	local10, #1
09d3c     F2 30 62 FC | 	wrlong	local10, objptr
09d40     57 00 00 FF 
09d44     28 E4 85 F1 | 	sub	objptr, ##44584
09d48                 | '   ct+=1 											' omit this lpar, this is for expr list
09d48                 | '   do
09d48                 | LR__0813
09d48     57 00 00 FF 
09d4c     28 E4 05 F1 | 	add	objptr, ##44584
09d50     F2 2C 02 FB | 	rdlong	local08, objptr
09d54     01 2C 06 F1 | 	add	local08, #1
09d58     F2 2C 62 FC | 	wrlong	local08, objptr
09d5c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09d5c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09d5c     03 2C 66 F0 | 	shl	local08, #3
09d60     02 00 00 FF 
09d64     38 E4 85 F1 | 	sub	objptr, ##1080
09d68     F2 2C 02 F1 | 	add	local08, objptr
09d6c     04 2C 06 F1 | 	add	local08, #4
09d70     16 31 02 FB | 	rdlong	local10, local08
09d74     15 30 0E F2 | 	cmp	local10, #21 wz
09d78     54 00 00 FF 
09d7c     F0 E5 85 F1 | 	sub	objptr, ##43504
09d80     40 00 90 5D |  if_ne	jmp	#LR__0814
09d84     57 00 00 FF 
09d88     28 E4 05 F1 | 	add	objptr, ##44584
09d8c     F2 30 02 FB | 	rdlong	local10, objptr
09d90     01 30 06 F1 | 	add	local10, #1
09d94     F2 30 62 FC | 	wrlong	local10, objptr
09d98     57 00 00 FF 
09d9c     28 E4 85 F1 | 	sub	objptr, ##44584
09da0     9C EE BF FD | 	call	#_expr
09da4     57 00 00 FF 
09da8     28 E4 05 F1 | 	add	objptr, ##44584
09dac     F2 30 02 FB | 	rdlong	local10, objptr
09db0     01 30 06 F1 | 	add	local10, #1
09db4     F2 30 62 FC | 	wrlong	local10, objptr
09db8     57 00 00 FF 
09dbc     28 E4 85 F1 | 	sub	objptr, ##44584
09dc0     04 00 90 FD | 	jmp	#LR__0815
09dc4                 | LR__0814
09dc4     78 EE BF FD | 	call	#_expr
09dc8                 | LR__0815
09dc8     01 2E 06 F1 | 	add	local09, #1
09dcc     57 00 00 FF 
09dd0     28 E4 05 F1 | 	add	objptr, ##44584
09dd4     F2 2C 02 FB | 	rdlong	local08, objptr
09dd8     03 2C 66 F0 | 	shl	local08, #3
09ddc     02 00 00 FF 
09de0     38 E4 85 F1 | 	sub	objptr, ##1080
09de4     F2 2C 02 F1 | 	add	local08, objptr
09de8     04 2C 06 F1 | 	add	local08, #4
09dec     16 31 02 FB | 	rdlong	local10, local08
09df0     14 30 0E F2 | 	cmp	local10, #20 wz
09df4     54 00 00 FF 
09df8     F0 E5 85 F1 | 	sub	objptr, ##43504
09dfc     34 00 90 AD |  if_e	jmp	#LR__0816
09e00     57 00 00 FF 
09e04     28 E4 05 F1 | 	add	objptr, ##44584
09e08     F2 30 02 FB | 	rdlong	local10, objptr
09e0c     03 30 66 F0 | 	shl	local10, #3
09e10     02 00 00 FF 
09e14     38 E4 85 F1 | 	sub	objptr, ##1080
09e18     F2 30 02 F1 | 	add	local10, objptr
09e1c     04 30 06 F1 | 	add	local10, #4
09e20     18 31 02 FB | 	rdlong	local10, local10
09e24     FE 31 0E F2 | 	cmp	local10, #510 wz
09e28     54 00 00 FF 
09e2c     F0 E5 85 F1 | 	sub	objptr, ##43504
09e30     14 FF 9F 5D |  if_ne	jmp	#LR__0813
09e34                 | LR__0816
09e34                 | LR__0817
09e34     17 21 02 F6 | 	mov	local02, local09
09e38     11 22 06 F6 | 	mov	local03, #17
09e3c     15 1F 02 F6 | 	mov	local01, local07
09e40     0F 31 02 F6 | 	mov	local10, local01
09e44     10 2F 02 F6 | 	mov	local09, local02
09e48     11 2D 02 F6 | 	mov	local08, local03
09e4c     6A 00 00 FF 
09e50     60 E4 05 F1 | 	add	objptr, ##54368
09e54     F2 2A 02 FB | 	rdlong	local07, objptr
09e58     15 29 02 F6 | 	mov	local06, local07
09e5c     01 28 66 F0 | 	shl	local06, #1
09e60     15 29 02 F1 | 	add	local06, local07
09e64     02 28 66 F0 | 	shl	local06, #2
09e68     03 00 00 FF 
09e6c     00 E4 85 F1 | 	sub	objptr, ##1536
09e70     F2 28 02 F1 | 	add	local06, objptr
09e74     14 31 62 FC | 	wrlong	local10, local06
09e78     03 00 00 FF 
09e7c     00 E4 05 F1 | 	add	objptr, ##1536
09e80     F2 30 02 FB | 	rdlong	local10, objptr
09e84     18 27 02 F6 | 	mov	local05, local10
09e88     01 26 66 F0 | 	shl	local05, #1
09e8c     18 27 02 F1 | 	add	local05, local10
09e90     02 26 66 F0 | 	shl	local05, #2
09e94     03 00 00 FF 
09e98     00 E4 85 F1 | 	sub	objptr, ##1536
09e9c     F2 26 02 F1 | 	add	local05, objptr
09ea0     04 26 06 F1 | 	add	local05, #4
09ea4     13 2F 62 FC | 	wrlong	local09, local05
09ea8     03 00 00 FF 
09eac     00 E4 05 F1 | 	add	objptr, ##1536
09eb0     F2 30 02 FB | 	rdlong	local10, objptr
09eb4     18 FB 01 F6 | 	mov	result1, local10
09eb8     01 FA 65 F0 | 	shl	result1, #1
09ebc     18 FB 01 F1 | 	add	result1, local10
09ec0     02 FA 65 F0 | 	shl	result1, #2
09ec4     03 00 00 FF 
09ec8     00 E4 85 F1 | 	sub	objptr, ##1536
09ecc     F2 FA 01 F1 | 	add	result1, objptr
09ed0     08 FA 05 F1 | 	add	result1, #8
09ed4     FD 2C 62 FC | 	wrlong	local08, result1
09ed8     03 00 00 FF 
09edc     00 E4 05 F1 | 	add	objptr, ##1536
09ee0     F2 30 02 FB | 	rdlong	local10, objptr
09ee4     01 30 06 F1 | 	add	local10, #1
09ee8     F2 30 62 FC | 	wrlong	local10, objptr
09eec     6A 00 00 FF 
09ef0     60 E4 85 F1 | 	sub	objptr, ##54368
09ef4                 | ' 
09ef4                 | ' t2.result.twowords(1)=numpar
09ef4                 | ' 
09ef4                 | ' 
09ef4                 | ' 
09ef4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09ef4                 | ' 
09ef4                 | ' 
09ef4                 | '  
09ef4                 | ' 
09ef4                 | ' 701 
09ef4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09ef4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09ef4     FF FF 7F FF 
09ef8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09efc     B8 00 90 5D |  if_ne	jmp	#LR__0818
09f00     15 22 06 F6 | 	mov	local03, #21
09f04     0F 31 02 F6 | 	mov	local10, local01
09f08     10 2F 02 F6 | 	mov	local09, local02
09f0c     11 2D 02 F6 | 	mov	local08, local03
09f10     6A 00 00 FF 
09f14     60 E4 05 F1 | 	add	objptr, ##54368
09f18     F2 2A 02 FB | 	rdlong	local07, objptr
09f1c     15 29 02 F6 | 	mov	local06, local07
09f20     01 28 66 F0 | 	shl	local06, #1
09f24     15 29 02 F1 | 	add	local06, local07
09f28     02 28 66 F0 | 	shl	local06, #2
09f2c     03 00 00 FF 
09f30     00 E4 85 F1 | 	sub	objptr, ##1536
09f34     F2 28 02 F1 | 	add	local06, objptr
09f38     14 31 62 FC | 	wrlong	local10, local06
09f3c     03 00 00 FF 
09f40     00 E4 05 F1 | 	add	objptr, ##1536
09f44     F2 1E 02 FB | 	rdlong	local01, objptr
09f48     0F 27 02 F6 | 	mov	local05, local01
09f4c     01 26 66 F0 | 	shl	local05, #1
09f50     0F 27 02 F1 | 	add	local05, local01
09f54     02 26 66 F0 | 	shl	local05, #2
09f58     03 00 00 FF 
09f5c     00 E4 85 F1 | 	sub	objptr, ##1536
09f60     F2 26 02 F1 | 	add	local05, objptr
09f64     04 26 06 F1 | 	add	local05, #4
09f68     13 2F 62 FC | 	wrlong	local09, local05
09f6c     03 00 00 FF 
09f70     00 E4 05 F1 | 	add	objptr, ##1536
09f74     F2 1E 02 FB | 	rdlong	local01, objptr
09f78     0F FB 01 F6 | 	mov	result1, local01
09f7c     01 FA 65 F0 | 	shl	result1, #1
09f80     0F FB 01 F1 | 	add	result1, local01
09f84     02 FA 65 F0 | 	shl	result1, #2
09f88     03 00 00 FF 
09f8c     00 E4 85 F1 | 	sub	objptr, ##1536
09f90     F2 FA 01 F1 | 	add	result1, objptr
09f94     08 FA 05 F1 | 	add	result1, #8
09f98     FD 2C 62 FC | 	wrlong	local08, result1
09f9c     03 00 00 FF 
09fa0     00 E4 05 F1 | 	add	objptr, ##1536
09fa4     F2 30 02 FB | 	rdlong	local10, objptr
09fa8     01 30 06 F1 | 	add	local10, #1
09fac     F2 30 62 FC | 	wrlong	local10, objptr
09fb0     6A 00 00 FF 
09fb4     60 E4 85 F1 | 	sub	objptr, ##54368
09fb8                 | LR__0818
09fb8     A7 F0 03 F6 | 	mov	ptra, fp
09fbc     B2 00 A0 FD | 	call	#popregs_
09fc0                 | _getvar_ret
09fc0     2D 00 64 FD | 	ret
09fc4                 | 
09fc4                 | ' 
09fc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09fc4                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
09fc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09fc4                 | ' 
09fc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09fc4                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
09fc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09fc4                 | ' 
09fc4                 | ' function execute_line (astart=0 as integer) as integer
09fc4                 | _execute_line
09fc4     04 4A 05 F6 | 	mov	COUNT_, #4
09fc8     A8 00 A0 FD | 	call	#pushregs_
09fcc     79 00 00 FF 
09fd0     98 E5 05 F1 | 	add	objptr, ##62360
09fd4     F2 00 68 FC | 	wrlong	#0, objptr
09fd8                 | ' runptr2=0
09fd8                 | ' for lineptr_e=astart to lineptr-1
09fd8     0F 00 00 FF 
09fdc     34 E5 85 F1 | 	sub	objptr, ##7988
09fe0     F2 12 62 FC | 	wrlong	arg01, objptr
09fe4     04 E4 85 F1 | 	sub	objptr, #4
09fe8     F2 1E 02 FB | 	rdlong	local01, objptr
09fec     6A 00 00 FF 
09ff0     60 E4 85 F1 | 	sub	objptr, ##54368
09ff4                 | LR__0820
09ff4     6A 00 00 FF 
09ff8     64 E4 05 F1 | 	add	objptr, ##54372
09ffc     F2 FA 01 FB | 	rdlong	result1, objptr
0a000     6A 00 00 FF 
0a004     64 E4 85 F1 | 	sub	objptr, ##54372
0a008     0F FB 51 F2 | 	cmps	result1, local01 wc
0a00c     98 00 90 3D |  if_ae	jmp	#LR__0821
0a010     6A 00 00 FF 
0a014     64 E4 05 F1 | 	add	objptr, ##54372
0a018     F2 FA 01 FB | 	rdlong	result1, objptr
0a01c     FD 20 02 F6 | 	mov	local02, result1
0a020     01 20 66 F0 | 	shl	local02, #1
0a024     FD 20 02 F1 | 	add	local02, result1
0a028     02 20 66 F0 | 	shl	local02, #2
0a02c     03 00 00 FF 
0a030     04 E4 85 F1 | 	sub	objptr, ##1540
0a034     F2 20 02 F1 | 	add	local02, objptr
0a038     08 20 06 F1 | 	add	local02, #8
0a03c     10 21 02 FB | 	rdlong	local02, local02
0a040     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a044     02 20 66 F0 | 	shl	local02, #2
0a048     04 00 00 FF 
0a04c     1C E4 85 F1 | 	sub	objptr, ##2076
0a050     F2 20 02 F1 | 	add	local02, objptr
0a054     10 21 02 FB | 	rdlong	local02, local02
0a058     10 23 02 F6 | 	mov	local03, local02
0a05c     13 20 46 F7 | 	zerox	local02, #19
0a060     14 22 46 F0 | 	shr	local03, #20
0a064     02 22 66 F0 | 	shl	local03, #2
0a068     ED 22 02 F1 | 	add	local03, __methods__
0a06c     11 23 02 FB | 	rdlong	local03, local03
0a070     63 00 00 FF 
0a074     44 E4 85 F1 | 	sub	objptr, ##50756
0a078     F2 24 02 F6 | 	mov	local04, objptr
0a07c     10 E5 01 F6 | 	mov	objptr, local02
0a080     2D 22 62 FD | 	call	local03
0a084     12 E5 01 F6 | 	mov	objptr, local04
0a088     6A 00 00 FF 
0a08c     64 E4 05 F1 | 	add	objptr, ##54372
0a090     F2 24 02 FB | 	rdlong	local04, objptr
0a094     01 24 06 F1 | 	add	local04, #1
0a098     F2 24 62 FC | 	wrlong	local04, objptr
0a09c     6A 00 00 FF 
0a0a0     64 E4 85 F1 | 	sub	objptr, ##54372
0a0a4     4C FF 9F FD | 	jmp	#LR__0820
0a0a8                 | LR__0821
0a0a8                 | ' return runptr2
0a0a8     79 00 00 FF 
0a0ac     98 E5 05 F1 | 	add	objptr, ##62360
0a0b0     F2 FA 01 FB | 	rdlong	result1, objptr
0a0b4     79 00 00 FF 
0a0b8     98 E5 85 F1 | 	sub	objptr, ##62360
0a0bc     A7 F0 03 F6 | 	mov	ptra, fp
0a0c0     B2 00 A0 FD | 	call	#popregs_
0a0c4                 | _execute_line_ret
0a0c4     2D 00 64 FD | 	ret
0a0c8                 | 
0a0c8                 | ' 
0a0c8                 | ' 
0a0c8                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a0c8                 | ' 
0a0c8                 | ' function pop() as expr_result
0a0c8                 | _pop
0a0c8                 | ' 
0a0c8                 | ' if stackpointer=0 then
0a0c8     63 00 00 FF 
0a0cc     3C E4 05 F1 | 	add	objptr, ##50748
0a0d0     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a0d4     63 00 00 FF 
0a0d8     3C E4 85 F1 | 	sub	objptr, ##50748
0a0dc     FF 04 06 A6 |  if_e	mov	_var03, #255
0a0e0     18 00 06 A6 |  if_e	mov	_var01, #24
0a0e4     68 00 90 AD |  if_e	jmp	#LR__0830
0a0e8     63 00 00 FF 
0a0ec     3C E4 05 F1 | 	add	objptr, ##50748
0a0f0     F2 FA 01 FB | 	rdlong	result1, objptr
0a0f4     01 FA 85 F1 | 	sub	result1, #1
0a0f8     F2 FA 61 FC | 	wrlong	result1, objptr
0a0fc     FD FE 01 F6 | 	mov	result3, result1
0a100     01 FE 65 F0 | 	shl	result3, #1
0a104     FD FE 01 F1 | 	add	result3, result1
0a108     02 FE 65 F0 | 	shl	result3, #2
0a10c     0C 00 00 FF 
0a110     0C E4 85 F1 | 	sub	objptr, ##6156
0a114     F2 FE 01 F1 | 	add	result3, objptr
0a118     FF 00 02 FB | 	rdlong	_var01, result3
0a11c     04 FE 05 F1 | 	add	result3, #4
0a120     FF FE 01 FB | 	rdlong	result3, result3
0a124     FD FC 01 F6 | 	mov	result2, result1
0a128     01 FC 65 F0 | 	shl	result2, #1
0a12c     FD FC 01 F1 | 	add	result2, result1
0a130     02 FC 65 F0 | 	shl	result2, #2
0a134     F2 FC 01 F1 | 	add	result2, objptr
0a138     08 FC 05 F1 | 	add	result2, #8
0a13c     FE FA 01 FB | 	rdlong	result1, result2
0a140     FF 02 02 F6 | 	mov	_var02, result3
0a144     FD 04 02 F6 | 	mov	_var03, result1
0a148     57 00 00 FF 
0a14c     30 E4 85 F1 | 	sub	objptr, ##44592
0a150                 | LR__0830
0a150                 | ' return t1
0a150     01 FD 01 F6 | 	mov	result2, _var02
0a154     02 FF 01 F6 | 	mov	result3, _var03
0a158     00 FB 01 F6 | 	mov	result1, _var01
0a15c                 | _pop_ret
0a15c     2D 00 64 FD | 	ret
0a160                 | 
0a160                 | ' 
0a160                 | ' sub push(t1 as expr_result )
0a160                 | _push
0a160                 | ' 
0a160                 | ' 'print "In push: "; t1.result_type
0a160                 | ' 'print "In push: "; t1.result.uresult
0a160                 | ' 
0a160                 | ' if stackpointer<maxstack then 
0a160     63 00 00 FF 
0a164     3C E4 05 F1 | 	add	objptr, ##50748
0a168     F2 00 02 FB | 	rdlong	_var01, objptr
0a16c     63 00 00 FF 
0a170     3C E4 85 F1 | 	sub	objptr, ##50748
0a174     01 00 00 FF 
0a178     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a17c     BC 00 90 3D |  if_ae	jmp	#LR__0840
0a180     09 01 02 FB | 	rdlong	_var01, arg01
0a184     04 12 06 F1 | 	add	arg01, #4
0a188     09 03 02 FB | 	rdlong	_var02, arg01
0a18c     04 12 06 F1 | 	add	arg01, #4
0a190     09 13 02 FB | 	rdlong	arg01, arg01
0a194     63 00 00 FF 
0a198     3C E4 05 F1 | 	add	objptr, ##50748
0a19c     F2 04 02 FB | 	rdlong	_var03, objptr
0a1a0     02 07 02 F6 | 	mov	_var04, _var03
0a1a4     01 06 66 F0 | 	shl	_var04, #1
0a1a8     02 07 02 F1 | 	add	_var04, _var03
0a1ac     02 06 66 F0 | 	shl	_var04, #2
0a1b0     0C 00 00 FF 
0a1b4     0C E4 85 F1 | 	sub	objptr, ##6156
0a1b8     F2 06 02 F1 | 	add	_var04, objptr
0a1bc     03 01 62 FC | 	wrlong	_var01, _var04
0a1c0     0C 00 00 FF 
0a1c4     0C E4 05 F1 | 	add	objptr, ##6156
0a1c8     F2 06 02 FB | 	rdlong	_var04, objptr
0a1cc     03 05 02 F6 | 	mov	_var03, _var04
0a1d0     01 04 66 F0 | 	shl	_var03, #1
0a1d4     03 05 02 F1 | 	add	_var03, _var04
0a1d8     02 04 66 F0 | 	shl	_var03, #2
0a1dc     0C 00 00 FF 
0a1e0     0C E4 85 F1 | 	sub	objptr, ##6156
0a1e4     F2 04 02 F1 | 	add	_var03, objptr
0a1e8     04 04 06 F1 | 	add	_var03, #4
0a1ec     02 03 62 FC | 	wrlong	_var02, _var03
0a1f0     0C 00 00 FF 
0a1f4     0C E4 05 F1 | 	add	objptr, ##6156
0a1f8     F2 06 02 FB | 	rdlong	_var04, objptr
0a1fc     03 05 02 F6 | 	mov	_var03, _var04
0a200     01 04 66 F0 | 	shl	_var03, #1
0a204     03 05 02 F1 | 	add	_var03, _var04
0a208     02 04 66 F0 | 	shl	_var03, #2
0a20c     0C 00 00 FF 
0a210     0C E4 85 F1 | 	sub	objptr, ##6156
0a214     F2 04 02 F1 | 	add	_var03, objptr
0a218     08 04 06 F1 | 	add	_var03, #8
0a21c     02 13 62 FC | 	wrlong	arg01, _var03
0a220     0C 00 00 FF 
0a224     0C E4 05 F1 | 	add	objptr, ##6156
0a228     F2 00 02 FB | 	rdlong	_var01, objptr
0a22c     01 00 06 F1 | 	add	_var01, #1
0a230     F2 00 62 FC | 	wrlong	_var01, objptr
0a234     63 00 00 FF 
0a238     3C E4 85 F1 | 	sub	objptr, ##50748
0a23c                 | LR__0840
0a23c                 | _push_ret
0a23c     2D 00 64 FD | 	ret
0a240                 | 
0a240                 | ' 
0a240                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a240                 | ' 
0a240                 | ' sub do_push
0a240                 | _do_push
0a240                 | ' if stackpointer<maxstack then 
0a240     63 00 00 FF 
0a244     3C E4 05 F1 | 	add	objptr, ##50748
0a248     F2 00 02 FB | 	rdlong	_var01, objptr
0a24c     63 00 00 FF 
0a250     3C E4 85 F1 | 	sub	objptr, ##50748
0a254     01 00 00 FF 
0a258     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a25c     F8 00 90 3D |  if_ae	jmp	#LR__0850
0a260     6A 00 00 FF 
0a264     64 E4 05 F1 | 	add	objptr, ##54372
0a268     F2 02 02 FB | 	rdlong	_var02, objptr
0a26c     01 05 02 F6 | 	mov	_var03, _var02
0a270     01 04 66 F0 | 	shl	_var03, #1
0a274     01 05 02 F1 | 	add	_var03, _var02
0a278     02 04 66 F0 | 	shl	_var03, #2
0a27c     03 00 00 FF 
0a280     04 E4 85 F1 | 	sub	objptr, ##1540
0a284     F2 04 02 F1 | 	add	_var03, objptr
0a288     02 01 02 FB | 	rdlong	_var01, _var03
0a28c     04 04 06 F1 | 	add	_var03, #4
0a290     02 07 02 FB | 	rdlong	_var04, _var03
0a294     01 05 02 F6 | 	mov	_var03, _var02
0a298     01 04 66 F0 | 	shl	_var03, #1
0a29c     01 05 02 F1 | 	add	_var03, _var02
0a2a0     02 04 66 F0 | 	shl	_var03, #2
0a2a4     F2 04 02 F1 | 	add	_var03, objptr
0a2a8     08 04 06 F1 | 	add	_var03, #8
0a2ac     02 03 02 FB | 	rdlong	_var02, _var03
0a2b0     04 00 00 FF 
0a2b4     24 E4 85 F1 | 	sub	objptr, ##2084
0a2b8     F2 04 02 FB | 	rdlong	_var03, objptr
0a2bc     02 09 02 F6 | 	mov	_var05, _var03
0a2c0     01 08 66 F0 | 	shl	_var05, #1
0a2c4     02 09 02 F1 | 	add	_var05, _var03
0a2c8     02 08 66 F0 | 	shl	_var05, #2
0a2cc     0C 00 00 FF 
0a2d0     0C E4 85 F1 | 	sub	objptr, ##6156
0a2d4     F2 08 02 F1 | 	add	_var05, objptr
0a2d8     04 01 62 FC | 	wrlong	_var01, _var05
0a2dc     0C 00 00 FF 
0a2e0     0C E4 05 F1 | 	add	objptr, ##6156
0a2e4     F2 08 02 FB | 	rdlong	_var05, objptr
0a2e8     04 05 02 F6 | 	mov	_var03, _var05
0a2ec     01 04 66 F0 | 	shl	_var03, #1
0a2f0     04 05 02 F1 | 	add	_var03, _var05
0a2f4     02 04 66 F0 | 	shl	_var03, #2
0a2f8     0C 00 00 FF 
0a2fc     0C E4 85 F1 | 	sub	objptr, ##6156
0a300     F2 04 02 F1 | 	add	_var03, objptr
0a304     04 04 06 F1 | 	add	_var03, #4
0a308     02 07 62 FC | 	wrlong	_var04, _var03
0a30c     0C 00 00 FF 
0a310     0C E4 05 F1 | 	add	objptr, ##6156
0a314     F2 08 02 FB | 	rdlong	_var05, objptr
0a318     04 07 02 F6 | 	mov	_var04, _var05
0a31c     01 06 66 F0 | 	shl	_var04, #1
0a320     04 07 02 F1 | 	add	_var04, _var05
0a324     02 06 66 F0 | 	shl	_var04, #2
0a328     0C 00 00 FF 
0a32c     0C E4 85 F1 | 	sub	objptr, ##6156
0a330     F2 06 02 F1 | 	add	_var04, objptr
0a334     08 06 06 F1 | 	add	_var04, #8
0a338     03 03 62 FC | 	wrlong	_var02, _var04
0a33c     0C 00 00 FF 
0a340     0C E4 05 F1 | 	add	objptr, ##6156
0a344     F2 00 02 FB | 	rdlong	_var01, objptr
0a348     01 00 06 F1 | 	add	_var01, #1
0a34c     F2 00 62 FC | 	wrlong	_var01, objptr
0a350     63 00 00 FF 
0a354     3C E4 85 F1 | 	sub	objptr, ##50748
0a358                 | LR__0850
0a358                 | _do_push_ret
0a358     2D 00 64 FD | 	ret
0a35c                 | 
0a35c                 | ' 
0a35c                 | '   
0a35c                 | ' sub csave_block(address as ulong)
0a35c                 | _csave_block
0a35c     09 01 02 F6 | 	mov	_var01, arg01
0a360                 | ' 
0a360                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0a360                 | ' ' we enter it at the state of playing 1 kHz header tone
0a360                 | ' 
0a360                 | ' for i=0 to 63 step 2
0a360     00 02 06 F6 | 	mov	_var02, #0
0a364                 | LR__0860
0a364                 | '   do: loop until lpeek(base+32*7)>32768
0a364     56 00 00 FF 
0a368     F4 E5 05 F1 | 	add	objptr, ##44532
0a36c     97 0C 48 FB | 	callpa	#(@LR__0862-@LR__0861)>>2,fcache_load_ptr_
0a370                 | LR__0861
0a370     F2 12 02 FB | 	rdlong	arg01, objptr
0a374     E0 12 06 F1 | 	add	arg01, #224
0a378     09 FB 01 FB | 	rdlong	result1, arg01
0a37c     40 00 00 FF 
0a380     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a384     E8 FF 9F CD |  if_b	jmp	#LR__0861
0a388                 | LR__0862
0a388     00 13 02 F6 | 	mov	arg01, _var01
0a38c     01 05 02 F6 | 	mov	_var03, _var02
0a390     02 04 66 F0 | 	shl	_var03, #2
0a394     02 13 02 F1 | 	add	arg01, _var03
0a398     09 07 02 FB | 	rdlong	_var04, arg01
0a39c     24 00 00 FF 
0a3a0     D4 E4 05 F1 | 	add	objptr, ##18644
0a3a4     F2 06 62 FC | 	wrlong	_var04, objptr
0a3a8     7B 00 00 FF 
0a3ac     C8 E4 85 F1 | 	sub	objptr, ##63176
0a3b0                 | '   q=lpeek(address+4*i)
0a3b0                 | '      for bit=0 to 31
0a3b0     00 08 06 F6 | 	mov	_var05, #0
0a3b4     97 84 48 FB | 	callpa	#(@LR__0867-@LR__0863)>>2,fcache_load_ptr_
0a3b8                 | LR__0863
0a3b8                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0a3b8     7B 00 00 FF 
0a3bc     C8 E4 05 F1 | 	add	objptr, ##63176
0a3c0     F2 06 02 FB | 	rdlong	_var04, objptr
0a3c4     7B 00 00 FF 
0a3c8     C8 E4 85 F1 | 	sub	objptr, ##63176
0a3cc     04 05 C2 F9 | 	decod	_var03, _var05
0a3d0     02 07 CA F7 | 	test	_var04, _var03 wz
0a3d4     60 00 90 AD |  if_e	jmp	#LR__0864
0a3d8     04 05 02 F6 | 	mov	_var03, _var05
0a3dc     02 04 66 F0 | 	shl	_var03, #2
0a3e0     77 00 00 FF 
0a3e4     90 E4 05 F1 | 	add	objptr, ##61072
0a3e8     F2 04 02 F1 | 	add	_var03, objptr
0a3ec     02 FF 48 FC | 	wrbyte	#127, _var03
0a3f0     04 05 02 F6 | 	mov	_var03, _var05
0a3f4     02 04 66 F0 | 	shl	_var03, #2
0a3f8     01 04 06 F1 | 	add	_var03, #1
0a3fc     F2 04 02 F1 | 	add	_var03, objptr
0a400     02 01 49 FC | 	wrbyte	#128, _var03
0a404     04 05 02 F6 | 	mov	_var03, _var05
0a408     02 04 66 F0 | 	shl	_var03, #2
0a40c     02 04 06 F1 | 	add	_var03, #2
0a410     F2 04 02 F1 | 	add	_var03, objptr
0a414     02 FF 48 FC | 	wrbyte	#127, _var03
0a418     04 05 02 F6 | 	mov	_var03, _var05
0a41c     02 04 66 F0 | 	shl	_var03, #2
0a420     03 04 06 F1 | 	add	_var03, #3
0a424     F2 04 02 F1 | 	add	_var03, objptr
0a428     02 01 49 FC | 	wrbyte	#128, _var03
0a42c     77 00 00 FF 
0a430     90 E4 85 F1 | 	sub	objptr, ##61072
0a434     5C 00 90 FD | 	jmp	#LR__0865
0a438                 | LR__0864
0a438     04 05 02 F6 | 	mov	_var03, _var05
0a43c     02 04 66 F0 | 	shl	_var03, #2
0a440     77 00 00 FF 
0a444     90 E4 05 F1 | 	add	objptr, ##61072
0a448     F2 04 02 F1 | 	add	_var03, objptr
0a44c     02 01 49 FC | 	wrbyte	#128, _var03
0a450     04 05 02 F6 | 	mov	_var03, _var05
0a454     02 04 66 F0 | 	shl	_var03, #2
0a458     01 04 06 F1 | 	add	_var03, #1
0a45c     F2 04 02 F1 | 	add	_var03, objptr
0a460     02 01 49 FC | 	wrbyte	#128, _var03
0a464     04 05 02 F6 | 	mov	_var03, _var05
0a468     02 04 66 F0 | 	shl	_var03, #2
0a46c     02 04 06 F1 | 	add	_var03, #2
0a470     F2 04 02 F1 | 	add	_var03, objptr
0a474     02 FF 48 FC | 	wrbyte	#127, _var03
0a478     04 05 02 F6 | 	mov	_var03, _var05
0a47c     02 04 66 F0 | 	shl	_var03, #2
0a480     03 04 06 F1 | 	add	_var03, #3
0a484     F2 04 02 F1 | 	add	_var03, objptr
0a488     02 FF 48 FC | 	wrbyte	#127, _var03
0a48c     77 00 00 FF 
0a490     90 E4 85 F1 | 	sub	objptr, ##61072
0a494                 | LR__0865
0a494     01 08 06 F1 | 	add	_var05, #1
0a498     20 08 56 F2 | 	cmps	_var05, #32 wc
0a49c     18 FF 9F CD |  if_b	jmp	#LR__0863
0a4a0                 | '   do: loop until lpeek(base+32*7)<32768
0a4a0     56 00 00 FF 
0a4a4     F4 E5 05 F1 | 	add	objptr, ##44532
0a4a8                 | LR__0866
0a4a8     F2 12 02 FB | 	rdlong	arg01, objptr
0a4ac     E0 12 06 F1 | 	add	arg01, #224
0a4b0     09 FB 01 FB | 	rdlong	result1, arg01
0a4b4     40 00 00 FF 
0a4b8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a4bc     E8 FF 9F 3D |  if_ae	jmp	#LR__0866
0a4c0                 | LR__0867
0a4c0     00 13 02 F6 | 	mov	arg01, _var01
0a4c4     04 12 06 F1 | 	add	arg01, #4
0a4c8     01 05 02 F6 | 	mov	_var03, _var02
0a4cc     02 04 66 F0 | 	shl	_var03, #2
0a4d0     02 13 02 F1 | 	add	arg01, _var03
0a4d4     09 07 02 FB | 	rdlong	_var04, arg01
0a4d8     24 00 00 FF 
0a4dc     D4 E4 05 F1 | 	add	objptr, ##18644
0a4e0     F2 06 62 FC | 	wrlong	_var04, objptr
0a4e4     7B 00 00 FF 
0a4e8     C8 E4 85 F1 | 	sub	objptr, ##63176
0a4ec                 | '   q=lpeek(address+4+4*i)
0a4ec                 | '      for bit=0 to 31
0a4ec     00 08 06 F6 | 	mov	_var05, #0
0a4f0     97 94 48 FB | 	callpa	#(@LR__0871-@LR__0868)>>2,fcache_load_ptr_
0a4f4                 | LR__0868
0a4f4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0a4f4     7B 00 00 FF 
0a4f8     C8 E4 05 F1 | 	add	objptr, ##63176
0a4fc     F2 06 02 FB | 	rdlong	_var04, objptr
0a500     7B 00 00 FF 
0a504     C8 E4 85 F1 | 	sub	objptr, ##63176
0a508     04 05 C2 F9 | 	decod	_var03, _var05
0a50c     02 07 CA F7 | 	test	_var04, _var03 wz
0a510     80 00 90 AD |  if_e	jmp	#LR__0869
0a514     04 0B 02 F6 | 	mov	_var06, _var05
0a518     02 0A 66 F0 | 	shl	_var06, #2
0a51c     80 04 06 F6 | 	mov	_var03, #128
0a520     05 05 02 F1 | 	add	_var03, _var06
0a524     77 00 00 FF 
0a528     90 E4 05 F1 | 	add	objptr, ##61072
0a52c     F2 04 02 F1 | 	add	_var03, objptr
0a530     02 FF 48 FC | 	wrbyte	#127, _var03
0a534     04 0B 02 F6 | 	mov	_var06, _var05
0a538     02 0A 66 F0 | 	shl	_var06, #2
0a53c     80 04 06 F6 | 	mov	_var03, #128
0a540     05 05 02 F1 | 	add	_var03, _var06
0a544     01 04 06 F1 | 	add	_var03, #1
0a548     F2 04 02 F1 | 	add	_var03, objptr
0a54c     02 01 49 FC | 	wrbyte	#128, _var03
0a550     04 0B 02 F6 | 	mov	_var06, _var05
0a554     02 0A 66 F0 | 	shl	_var06, #2
0a558     80 04 06 F6 | 	mov	_var03, #128
0a55c     05 05 02 F1 | 	add	_var03, _var06
0a560     02 04 06 F1 | 	add	_var03, #2
0a564     F2 04 02 F1 | 	add	_var03, objptr
0a568     02 FF 48 FC | 	wrbyte	#127, _var03
0a56c     04 0B 02 F6 | 	mov	_var06, _var05
0a570     02 0A 66 F0 | 	shl	_var06, #2
0a574     80 04 06 F6 | 	mov	_var03, #128
0a578     05 05 02 F1 | 	add	_var03, _var06
0a57c     03 04 06 F1 | 	add	_var03, #3
0a580     F2 04 02 F1 | 	add	_var03, objptr
0a584     02 01 49 FC | 	wrbyte	#128, _var03
0a588     77 00 00 FF 
0a58c     90 E4 85 F1 | 	sub	objptr, ##61072
0a590     7C 00 90 FD | 	jmp	#LR__0870
0a594                 | LR__0869
0a594     04 0B 02 F6 | 	mov	_var06, _var05
0a598     02 0A 66 F0 | 	shl	_var06, #2
0a59c     80 04 06 F6 | 	mov	_var03, #128
0a5a0     05 05 02 F1 | 	add	_var03, _var06
0a5a4     77 00 00 FF 
0a5a8     90 E4 05 F1 | 	add	objptr, ##61072
0a5ac     F2 04 02 F1 | 	add	_var03, objptr
0a5b0     02 01 49 FC | 	wrbyte	#128, _var03
0a5b4     04 0B 02 F6 | 	mov	_var06, _var05
0a5b8     02 0A 66 F0 | 	shl	_var06, #2
0a5bc     80 04 06 F6 | 	mov	_var03, #128
0a5c0     05 05 02 F1 | 	add	_var03, _var06
0a5c4     01 04 06 F1 | 	add	_var03, #1
0a5c8     F2 04 02 F1 | 	add	_var03, objptr
0a5cc     02 01 49 FC | 	wrbyte	#128, _var03
0a5d0     04 0B 02 F6 | 	mov	_var06, _var05
0a5d4     02 0A 66 F0 | 	shl	_var06, #2
0a5d8     80 04 06 F6 | 	mov	_var03, #128
0a5dc     05 05 02 F1 | 	add	_var03, _var06
0a5e0     02 04 06 F1 | 	add	_var03, #2
0a5e4     F2 04 02 F1 | 	add	_var03, objptr
0a5e8     02 FF 48 FC | 	wrbyte	#127, _var03
0a5ec     04 0B 02 F6 | 	mov	_var06, _var05
0a5f0     02 0A 66 F0 | 	shl	_var06, #2
0a5f4     80 04 06 F6 | 	mov	_var03, #128
0a5f8     05 05 02 F1 | 	add	_var03, _var06
0a5fc     03 04 06 F1 | 	add	_var03, #3
0a600     F2 04 02 F1 | 	add	_var03, objptr
0a604     02 FF 48 FC | 	wrbyte	#127, _var03
0a608     77 00 00 FF 
0a60c     90 E4 85 F1 | 	sub	objptr, ##61072
0a610                 | LR__0870
0a610     01 08 06 F1 | 	add	_var05, #1
0a614     20 08 56 F2 | 	cmps	_var05, #32 wc
0a618     D8 FE 9F CD |  if_b	jmp	#LR__0868
0a61c                 | LR__0871
0a61c     02 02 06 F1 | 	add	_var02, #2
0a620     40 02 56 F2 | 	cmps	_var02, #64 wc
0a624     3C FD 9F CD |  if_b	jmp	#LR__0860
0a628                 | ' do: loop until lpeek(base+32*7)>32768
0a628     56 00 00 FF 
0a62c     F4 E5 05 F1 | 	add	objptr, ##44532
0a630     97 84 48 FB | 	callpa	#(@LR__0880-@LR__0872)>>2,fcache_load_ptr_
0a634                 | LR__0872
0a634     F2 12 02 FB | 	rdlong	arg01, objptr
0a638     E0 12 06 F1 | 	add	arg01, #224
0a63c     09 FB 01 FB | 	rdlong	result1, arg01
0a640     40 00 00 FF 
0a644     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a648     E8 FF 9F CD |  if_b	jmp	#LR__0872
0a64c     56 00 00 FF 
0a650     F4 E5 85 F1 | 	sub	objptr, ##44532
0a654                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a654     00 02 06 F6 | 	mov	_var02, #0
0a658                 | LR__0873
0a658     01 07 52 F6 | 	abs	_var04, _var02 wc
0a65c     07 06 06 F5 | 	and	_var04, #7
0a660     03 07 82 F6 | 	negc	_var04, _var04
0a664     04 06 56 F2 | 	cmps	_var04, #4 wc
0a668     20 00 90 3D |  if_ae	jmp	#LR__0874
0a66c     01 0B 02 F6 | 	mov	_var06, _var02
0a670     77 00 00 FF 
0a674     90 E4 05 F1 | 	add	objptr, ##61072
0a678     F2 0A 02 F1 | 	add	_var06, objptr
0a67c     05 FF 48 FC | 	wrbyte	#127, _var06
0a680     77 00 00 FF 
0a684     90 E4 85 F1 | 	sub	objptr, ##61072
0a688     1C 00 90 FD | 	jmp	#LR__0875
0a68c                 | LR__0874
0a68c     01 0B 02 F6 | 	mov	_var06, _var02
0a690     77 00 00 FF 
0a694     90 E4 05 F1 | 	add	objptr, ##61072
0a698     F2 0A 02 F1 | 	add	_var06, objptr
0a69c     05 01 49 FC | 	wrbyte	#128, _var06
0a6a0     77 00 00 FF 
0a6a4     90 E4 85 F1 | 	sub	objptr, ##61072
0a6a8                 | LR__0875
0a6a8     01 02 06 F1 | 	add	_var02, #1
0a6ac     80 02 56 F2 | 	cmps	_var02, #128 wc
0a6b0     A4 FF 9F CD |  if_b	jmp	#LR__0873
0a6b4                 | ' 
0a6b4                 | ' do: loop until lpeek(base+32*7)<32768
0a6b4     56 00 00 FF 
0a6b8     F4 E5 05 F1 | 	add	objptr, ##44532
0a6bc                 | LR__0876
0a6bc     F2 12 02 FB | 	rdlong	arg01, objptr
0a6c0     E0 12 06 F1 | 	add	arg01, #224
0a6c4     09 FB 01 FB | 	rdlong	result1, arg01
0a6c8     40 00 00 FF 
0a6cc     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a6d0     E8 FF 9F 3D |  if_ae	jmp	#LR__0876
0a6d4     56 00 00 FF 
0a6d8     F4 E5 85 F1 | 	sub	objptr, ##44532
0a6dc                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a6dc     80 02 06 F6 | 	mov	_var02, #128
0a6e0                 | LR__0877
0a6e0     01 07 52 F6 | 	abs	_var04, _var02 wc
0a6e4     07 06 06 F5 | 	and	_var04, #7
0a6e8     03 07 82 F6 | 	negc	_var04, _var04
0a6ec     04 06 56 F2 | 	cmps	_var04, #4 wc
0a6f0     20 00 90 3D |  if_ae	jmp	#LR__0878
0a6f4     01 0B 02 F6 | 	mov	_var06, _var02
0a6f8     77 00 00 FF 
0a6fc     90 E4 05 F1 | 	add	objptr, ##61072
0a700     F2 0A 02 F1 | 	add	_var06, objptr
0a704     05 FF 48 FC | 	wrbyte	#127, _var06
0a708     77 00 00 FF 
0a70c     90 E4 85 F1 | 	sub	objptr, ##61072
0a710     1C 00 90 FD | 	jmp	#LR__0879
0a714                 | LR__0878
0a714     01 0B 02 F6 | 	mov	_var06, _var02
0a718     77 00 00 FF 
0a71c     90 E4 05 F1 | 	add	objptr, ##61072
0a720     F2 0A 02 F1 | 	add	_var06, objptr
0a724     05 01 49 FC | 	wrbyte	#128, _var06
0a728     77 00 00 FF 
0a72c     90 E4 85 F1 | 	sub	objptr, ##61072
0a730                 | LR__0879
0a730     01 02 06 F1 | 	add	_var02, #1
0a734     00 03 16 F2 | 	cmp	_var02, #256 wc
0a738     A4 FF 9F CD |  if_b	jmp	#LR__0877
0a73c                 | LR__0880
0a73c                 | _csave_block_ret
0a73c     2D 00 64 FD | 	ret
0a740                 | 
0a740                 | ' 
0a740                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0a740                 | _csave_addtoblock
0a740     04 4A 05 F6 | 	mov	COUNT_, #4
0a744     A8 00 A0 FD | 	call	#pushregs_
0a748     09 1F 02 F6 | 	mov	local01, arg01
0a74c                 | ' 
0a74c                 | ' 
0a74c                 | ' if force=0 then
0a74c     07 14 4E F7 | 	zerox	arg02, #7 wz
0a750     78 00 90 5D |  if_ne	jmp	#LR__0890
0a754     79 00 00 FF 
0a758     90 E5 05 F1 | 	add	objptr, ##62352
0a75c     F2 14 02 FB | 	rdlong	arg02, objptr
0a760     02 00 00 FF 
0a764     00 E4 85 F1 | 	sub	objptr, ##1024
0a768     F2 14 02 F1 | 	add	arg02, objptr
0a76c     0A 1F 42 FC | 	wrbyte	local01, arg02
0a770     02 00 00 FF 
0a774     00 E4 05 F1 | 	add	objptr, ##1024
0a778     F2 1E 02 FB | 	rdlong	local01, objptr
0a77c     01 1E 06 F1 | 	add	local01, #1
0a780     F2 1E 62 FC | 	wrlong	local01, objptr
0a784                 | '   block(blockptr)=d
0a784                 | '   blockptr+=1
0a784                 | '   if blockptr>=255 then
0a784     79 00 00 FF 
0a788     90 E5 85 F1 | 	sub	objptr, ##62352
0a78c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a790     E4 00 90 CD |  if_b	jmp	#LR__0894
0a794     77 00 00 FF 
0a798     90 E5 05 F1 | 	add	objptr, ##61328
0a79c     F2 12 02 F6 | 	mov	arg01, objptr
0a7a0     77 00 00 FF 
0a7a4     90 E5 85 F1 | 	sub	objptr, ##61328
0a7a8     B0 FB BF FD | 	call	#_csave_block
0a7ac     79 00 00 FF 
0a7b0     90 E5 05 F1 | 	add	objptr, ##62352
0a7b4     F2 00 68 FC | 	wrlong	#0, objptr
0a7b8     79 00 00 FF 
0a7bc     90 E5 85 F1 | 	sub	objptr, ##62352
0a7c0     2C 13 06 F6 | 	mov	arg01, #300
0a7c4     24 1E B1 FD | 	call	#__system___waitms
0a7c8     AC 00 90 FD | 	jmp	#LR__0894
0a7cc                 | LR__0890
0a7cc     79 00 00 FF 
0a7d0     90 E5 05 F1 | 	add	objptr, ##62352
0a7d4     F2 20 02 FB | 	rdlong	local02, objptr
0a7d8     02 00 00 FF 
0a7dc     00 E4 85 F1 | 	sub	objptr, ##1024
0a7e0     F2 20 02 F1 | 	add	local02, objptr
0a7e4     10 1F 42 FC | 	wrbyte	local01, local02
0a7e8                 | '   block(blockptr)=d
0a7e8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a7e8     02 00 00 FF 
0a7ec     00 E4 05 F1 | 	add	objptr, ##1024
0a7f0     F2 22 02 FB | 	rdlong	local03, objptr
0a7f4     79 00 00 FF 
0a7f8     90 E5 85 F1 | 	sub	objptr, ##62352
0a7fc     FF 22 16 F2 | 	cmp	local03, #255 wc
0a800     40 00 90 3D |  if_ae	jmp	#LR__0893
0a804     79 00 00 FF 
0a808     90 E5 05 F1 | 	add	objptr, ##62352
0a80c     F2 24 02 FB | 	rdlong	local04, objptr
0a810     79 00 00 FF 
0a814     90 E5 85 F1 | 	sub	objptr, ##62352
0a818                 | LR__0891
0a818     00 25 56 F2 | 	cmps	local04, #256 wc
0a81c     24 00 90 3D |  if_ae	jmp	#LR__0892
0a820     12 21 02 F6 | 	mov	local02, local04
0a824     77 00 00 FF 
0a828     90 E5 05 F1 | 	add	objptr, ##61328
0a82c     F2 20 02 F1 | 	add	local02, objptr
0a830     10 01 48 FC | 	wrbyte	#0, local02
0a834     01 24 06 F1 | 	add	local04, #1
0a838     77 00 00 FF 
0a83c     90 E5 85 F1 | 	sub	objptr, ##61328
0a840     D4 FF 9F FD | 	jmp	#LR__0891
0a844                 | LR__0892
0a844                 | LR__0893
0a844     77 00 00 FF 
0a848     90 E5 05 F1 | 	add	objptr, ##61328
0a84c     F2 12 02 F6 | 	mov	arg01, objptr
0a850     77 00 00 FF 
0a854     90 E5 85 F1 | 	sub	objptr, ##61328
0a858     00 FB BF FD | 	call	#_csave_block
0a85c     79 00 00 FF 
0a860     90 E5 05 F1 | 	add	objptr, ##62352
0a864     F2 00 68 FC | 	wrlong	#0, objptr
0a868     79 00 00 FF 
0a86c     90 E5 85 F1 | 	sub	objptr, ##62352
0a870     2C 13 06 F6 | 	mov	arg01, #300
0a874     74 1D B1 FD | 	call	#__system___waitms
0a878                 | LR__0894
0a878     A7 F0 03 F6 | 	mov	ptra, fp
0a87c     B2 00 A0 FD | 	call	#popregs_
0a880                 | _csave_addtoblock_ret
0a880     2D 00 64 FD | 	ret
0a884                 | 
0a884                 | ' 
0a884                 | ' sub test_csave
0a884                 | _test_csave
0a884     04 4A 05 F6 | 	mov	COUNT_, #4
0a888     A8 00 A0 FD | 	call	#pushregs_
0a88c     C0 F0 07 F1 | 	add	ptra, #192
0a890                 | ' 'dim fileheader,savestart, saveptr as ulong
0a890                 | ' 
0a890                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a890     6A 00 00 FF 
0a894     68 E4 05 F1 | 	add	objptr, ##54376
0a898     F2 12 02 FB | 	rdlong	arg01, objptr
0a89c     6A 00 00 FF 
0a8a0     68 E4 85 F1 | 	sub	objptr, ##54376
0a8a4     44 E5 B0 FD | 	call	#_pslpeek
0a8a8     FF FF 7F FF 
0a8ac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a8b0     0C 00 90 5D |  if_ne	jmp	#LR__0900
0a8b4     1B 12 06 F6 | 	mov	arg01, #27
0a8b8     9C E2 B0 FD | 	call	#_printerror
0a8bc     0C 03 90 FD | 	jmp	#LR__0912
0a8c0                 | LR__0900
0a8c0     04 F8 BF FD | 	call	#_pop
0a8c4     FF 1E 02 F6 | 	mov	local01, result3
0a8c8     90 4E 05 F1 | 	add	fp, #144
0a8cc     A7 FA 61 FC | 	wrlong	result1, fp
0a8d0     04 4E 05 F1 | 	add	fp, #4
0a8d4     A7 FC 61 FC | 	wrlong	result2, fp
0a8d8     04 4E 05 F1 | 	add	fp, #4
0a8dc     A7 1E 62 FC | 	wrlong	local01, fp
0a8e0                 | ' t1=pop()
0a8e0                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a8e0     98 4E 85 F1 | 	sub	fp, #152
0a8e4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a8e8     5F 01 00 5F 
0a8ec     66 1E 06 56 |  if_ne	mov	local01, ##@LR__4908
0a8f0     8C 4E 05 51 |  if_ne	add	fp, #140
0a8f4     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a8f8     8C 4E 85 51 |  if_ne	sub	fp, #140
0a8fc     90 4E 05 A1 |  if_e	add	fp, #144
0a900     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a904     04 4E 85 A1 |  if_e	sub	fp, #4
0a908     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a90c     8C 4E 85 A1 |  if_e	sub	fp, #140
0a910                 | ' 
0a910                 | ' ' prepare 1 kHz header wave
0a910                 | ' 
0a910                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a910     A7 00 68 FC | 	wrlong	#0, fp
0a914     97 34 48 FB | 	callpa	#(@LR__0904-@LR__0901)>>2,fcache_load_ptr_
0a918                 | LR__0901
0a918     A7 1E 02 FB | 	rdlong	local01, fp
0a91c     0F 1F 52 F6 | 	abs	local01, local01 wc
0a920     07 1E 06 F5 | 	and	local01, #7
0a924     0F 1F 82 F6 | 	negc	local01, local01
0a928     04 1E 56 F2 | 	cmps	local01, #4 wc
0a92c     20 00 90 3D |  if_ae	jmp	#LR__0902
0a930     A7 1E 02 FB | 	rdlong	local01, fp
0a934     77 00 00 FF 
0a938     90 E4 05 F1 | 	add	objptr, ##61072
0a93c     F2 1E 02 F1 | 	add	local01, objptr
0a940     0F FF 48 FC | 	wrbyte	#127, local01
0a944     77 00 00 FF 
0a948     90 E4 85 F1 | 	sub	objptr, ##61072
0a94c     1C 00 90 FD | 	jmp	#LR__0903
0a950                 | LR__0902
0a950     A7 1E 02 FB | 	rdlong	local01, fp
0a954     77 00 00 FF 
0a958     90 E4 05 F1 | 	add	objptr, ##61072
0a95c     F2 1E 02 F1 | 	add	local01, objptr
0a960     0F 01 49 FC | 	wrbyte	#128, local01
0a964     77 00 00 FF 
0a968     90 E4 85 F1 | 	sub	objptr, ##61072
0a96c                 | LR__0903
0a96c     A7 1E 02 FB | 	rdlong	local01, fp
0a970     01 1E 06 F1 | 	add	local01, #1
0a974     A7 1E 62 FC | 	wrlong	local01, fp
0a978     00 1F 56 F2 | 	cmps	local01, #256 wc
0a97c     98 FF 9F CD |  if_b	jmp	#LR__0901
0a980                 | LR__0904
0a980     77 00 00 FF 
0a984     90 E4 05 F1 | 	add	objptr, ##61072
0a988     F2 14 02 F6 | 	mov	arg02, objptr
0a98c     07 12 06 F6 | 	mov	arg01, #7
0a990     0F 00 00 FF 
0a994     40 17 06 F6 | 	mov	arg03, ##8000
0a998     0E 18 C6 F9 | 	decod	arg04, #14
0a99c     00 1B 06 F6 | 	mov	arg05, #256
0a9a0     00 1C 06 F6 | 	mov	arg06, #0
0a9a4     6B 00 00 FF 
0a9a8     D0 E5 85 F1 | 	sub	objptr, ##55248
0a9ac     94 15 B1 FD | 	call	#_audio096_spin2_play8
0a9b0     0B 00 00 FF 
0a9b4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a9b8     05 00 00 FF 
0a9bc     B8 13 06 F6 | 	mov	arg01, ##3000
0a9c0     28 1C B1 FD | 	call	#__system___waitms
0a9c4     79 00 00 FF 
0a9c8     90 E5 05 F1 | 	add	objptr, ##62352
0a9cc     F2 00 68 FC | 	wrlong	#0, objptr
0a9d0     79 00 00 FF 
0a9d4     90 E5 85 F1 | 	sub	objptr, ##62352
0a9d8     72 12 06 F6 | 	mov	arg01, #114
0a9dc     00 14 06 F6 | 	mov	arg02, #0
0a9e0     5C FD BF FD | 	call	#_csave_addtoblock
0a9e4     62 12 06 F6 | 	mov	arg01, #98
0a9e8     00 14 06 F6 | 	mov	arg02, #0
0a9ec     50 FD BF FD | 	call	#_csave_addtoblock
0a9f0     61 12 06 F6 | 	mov	arg01, #97
0a9f4     00 14 06 F6 | 	mov	arg02, #0
0a9f8     44 FD BF FD | 	call	#_csave_addtoblock
0a9fc     0D 12 06 F6 | 	mov	arg01, #13
0aa00     00 14 06 F6 | 	mov	arg02, #0
0aa04     38 FD BF FD | 	call	#_csave_addtoblock
0aa08                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0aa08                 | ' waitms 3000 
0aa08                 | ' 
0aa08                 | ' blockptr=0
0aa08                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0aa08                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0aa08     A7 02 68 FC | 	wrlong	#1, fp
0aa0c     8C 4E 05 F1 | 	add	fp, #140
0aa10     A7 12 02 FB | 	rdlong	arg01, fp
0aa14     8C 4E 85 F1 | 	sub	fp, #140
0aa18     09 21 02 F6 | 	mov	local02, arg01
0aa1c     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0aa20                 | LR__0905
0aa20     10 FB C9 FA | 	rdbyte	result1, local02 wz
0aa24     01 20 06 51 |  if_ne	add	local02, #1
0aa28     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0aa2c                 | LR__0906
0aa2c     09 21 82 F1 | 	sub	local02, arg01
0aa30     10 23 02 F6 | 	mov	local03, local02
0aa34     01 22 06 F1 | 	add	local03, #1
0aa38                 | LR__0907
0aa38     A7 1E 02 FB | 	rdlong	local01, fp
0aa3c     11 1F 52 F2 | 	cmps	local01, local03 wc
0aa40     34 00 90 3D |  if_ae	jmp	#LR__0908
0aa44     8C 4E 05 F1 | 	add	fp, #140
0aa48     A7 12 02 FB | 	rdlong	arg01, fp
0aa4c     8C 4E 85 F1 | 	sub	fp, #140
0aa50     A7 14 02 FB | 	rdlong	arg02, fp
0aa54     01 16 06 F6 | 	mov	arg03, #1
0aa58     F8 39 B1 FD | 	call	#__system__Mid_S
0aa5c     FD 12 C2 FA | 	rdbyte	arg01, result1
0aa60     00 14 06 F6 | 	mov	arg02, #0
0aa64     D8 FC BF FD | 	call	#_csave_addtoblock
0aa68     A7 1E 02 FB | 	rdlong	local01, fp
0aa6c     01 1E 06 F1 | 	add	local01, #1
0aa70     A7 1E 62 FC | 	wrlong	local01, fp
0aa74     C0 FF 9F FD | 	jmp	#LR__0907
0aa78                 | LR__0908
0aa78     00 12 06 F6 | 	mov	arg01, #0
0aa7c     00 14 06 F6 | 	mov	arg02, #0
0aa80     BC FC BF FD | 	call	#_csave_addtoblock
0aa84     72 12 06 F6 | 	mov	arg01, #114
0aa88     00 14 06 F6 | 	mov	arg02, #0
0aa8c     B0 FC BF FD | 	call	#_csave_addtoblock
0aa90     62 12 06 F6 | 	mov	arg01, #98
0aa94     00 14 06 F6 | 	mov	arg02, #0
0aa98     A4 FC BF FD | 	call	#_csave_addtoblock
0aa9c     73 12 06 F6 | 	mov	arg01, #115
0aaa0     00 14 06 F6 | 	mov	arg02, #0
0aaa4     98 FC BF FD | 	call	#_csave_addtoblock
0aaa8     0D 12 06 F6 | 	mov	arg01, #13
0aaac     00 14 06 F6 | 	mov	arg02, #0
0aab0     8C FC BF FD | 	call	#_csave_addtoblock
0aab4     6A 00 00 FF 
0aab8     68 E4 05 F1 | 	add	objptr, ##54376
0aabc     F2 1E 02 FB | 	rdlong	local01, objptr
0aac0     6A 00 00 FF 
0aac4     68 E4 85 F1 | 	sub	objptr, ##54376
0aac8     9C 4E 05 F1 | 	add	fp, #156
0aacc     A7 1E 62 FC | 	wrlong	local01, fp
0aad0     9C 4E 85 F1 | 	sub	fp, #156
0aad4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0aad4                 | ' 
0aad4                 | ' saveptr=programstart
0aad4                 | ' do
0aad4                 | LR__0909
0aad4     A0 4E 05 F1 | 	add	fp, #160
0aad8     A7 12 02 F6 | 	mov	arg01, fp
0aadc     04 4E 85 F1 | 	sub	fp, #4
0aae0     A7 14 02 FB | 	rdlong	arg02, fp
0aae4     9C 4E 85 F1 | 	sub	fp, #156
0aae8     18 16 06 F6 | 	mov	arg03, #24
0aaec     0B 00 00 FF 
0aaf0     C0 E4 05 F1 | 	add	objptr, ##5824
0aaf4     FC 0B B1 FD | 	call	#_psram_spin2_read1
0aaf8     0C 4E 05 F1 | 	add	fp, #12
0aafc     A7 12 02 F6 | 	mov	arg01, fp
0ab00     9C 4E 05 F1 | 	add	fp, #156
0ab04     A7 14 02 FB | 	rdlong	arg02, fp
0ab08     04 4E 05 F1 | 	add	fp, #4
0ab0c     A7 16 02 FB | 	rdlong	arg03, fp
0ab10     AC 4E 85 F1 | 	sub	fp, #172
0ab14     DC 0B B1 FD | 	call	#_psram_spin2_read1
0ab18     0B 00 00 FF 
0ab1c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab20     AC 4E 05 F1 | 	add	fp, #172
0ab24     A7 12 02 FB | 	rdlong	arg01, fp
0ab28     AC 4E 85 F1 | 	sub	fp, #172
0ab2c     00 14 06 F6 | 	mov	arg02, #0
0ab30     0C FC BF FD | 	call	#_csave_addtoblock
0ab34                 | '   psram.read1(varptr(header(0)),saveptr,24)
0ab34                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0ab34                 | '   csave_addtoblock(header(3),0) ' that's always <255
0ab34                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0ab34     A7 00 68 FC | 	wrlong	#0, fp
0ab38     AC 4E 05 F1 | 	add	fp, #172
0ab3c     A7 24 02 FB | 	rdlong	local04, fp
0ab40     AC 4E 85 F1 | 	sub	fp, #172
0ab44                 | LR__0910
0ab44     A7 1E 02 FB | 	rdlong	local01, fp
0ab48     12 1F 52 F2 | 	cmps	local01, local04 wc
0ab4c     2C 00 90 3D |  if_ae	jmp	#LR__0911
0ab50     A7 22 02 FB | 	rdlong	local03, fp
0ab54     0C 4E 05 F1 | 	add	fp, #12
0ab58     A7 22 02 F1 | 	add	local03, fp
0ab5c     11 13 C2 FA | 	rdbyte	arg01, local03
0ab60     00 14 06 F6 | 	mov	arg02, #0
0ab64     0C 4E 85 F1 | 	sub	fp, #12
0ab68     D4 FB BF FD | 	call	#_csave_addtoblock
0ab6c     A7 22 02 FB | 	rdlong	local03, fp
0ab70     01 22 06 F1 | 	add	local03, #1
0ab74     A7 22 62 FC | 	wrlong	local03, fp
0ab78     C8 FF 9F FD | 	jmp	#LR__0910
0ab7c                 | LR__0911
0ab7c     B4 4E 05 F1 | 	add	fp, #180
0ab80     A7 1E 02 FB | 	rdlong	local01, fp
0ab84     18 4E 85 F1 | 	sub	fp, #24
0ab88     A7 1E 62 FC | 	wrlong	local01, fp
0ab8c     18 4E 05 F1 | 	add	fp, #24
0ab90     A7 1E 02 FB | 	rdlong	local01, fp
0ab94     B4 4E 85 F1 | 	sub	fp, #180
0ab98     FF FF 3F FF 
0ab9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0aba0     30 FF 9F 5D |  if_ne	jmp	#LR__0909
0aba4     00 12 06 F6 | 	mov	arg01, #0
0aba8     01 14 06 F6 | 	mov	arg02, #1
0abac     90 FB BF FD | 	call	#_csave_addtoblock
0abb0     56 00 00 FF 
0abb4     F4 E5 05 F1 | 	add	objptr, ##44532
0abb8     F2 12 02 FB | 	rdlong	arg01, objptr
0abbc     56 00 00 FF 
0abc0     F4 E5 85 F1 | 	sub	objptr, ##44532
0abc4     F4 12 06 F1 | 	add	arg01, #244
0abc8     09 01 58 FC | 	wrword	#0, arg01
0abcc                 | LR__0912
0abcc     A7 F0 03 F6 | 	mov	ptra, fp
0abd0     B2 00 A0 FD | 	call	#popregs_
0abd4                 | _test_csave_ret
0abd4     2D 00 64 FD | 	ret
0abd8                 | 
0abd8                 | ' 
0abd8                 | ' ' ----------------- Save the program
0abd8                 | ' 
0abd8                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0abd8                 | _do_save
0abd8     02 4A 05 F6 | 	mov	COUNT_, #2
0abdc     A8 00 A0 FD | 	call	#pushregs_
0abe0     01 00 00 FF 
0abe4     BC F0 07 F1 | 	add	ptra, ##700
0abe8     01 00 00 FF 
0abec     10 4E 05 F1 | 	add	fp, ##528
0abf0     B1 B0 86 FF 
0abf4     A7 E4 68 FC | 	wrlong	##224486002, fp
0abf8     01 00 00 FF 
0abfc     10 4E 85 F1 | 	sub	fp, ##528
0ac00     C4 F4 BF FD | 	call	#_pop
0ac04     FF 16 02 F6 | 	mov	arg03, result3
0ac08     A7 FA 61 FC | 	wrlong	result1, fp
0ac0c     04 4E 05 F1 | 	add	fp, #4
0ac10     A7 FC 61 FC | 	wrlong	result2, fp
0ac14     04 4E 05 F1 | 	add	fp, #4
0ac18     A7 16 62 FC | 	wrlong	arg03, fp
0ac1c     08 4E 85 F1 | 	sub	fp, #8
0ac20                 | ' 
0ac20                 | ' fileheader=$0D616272' rba+ver'
0ac20                 | ' 
0ac20                 | ' t1=pop() 
0ac20                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0ac20     6A 00 00 FF 
0ac24     68 E4 05 F1 | 	add	objptr, ##54376
0ac28     F2 12 02 FB | 	rdlong	arg01, objptr
0ac2c     6A 00 00 FF 
0ac30     68 E4 85 F1 | 	sub	objptr, ##54376
0ac34     B4 E1 B0 FD | 	call	#_pslpeek
0ac38     FF FF 7F FF 
0ac3c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0ac40     0C 00 90 5D |  if_ne	jmp	#LR__0920
0ac44     1B 12 06 F6 | 	mov	arg01, #27
0ac48     0C DF B0 FD | 	call	#_printerror
0ac4c     68 02 90 FD | 	jmp	#LR__0926
0ac50                 | LR__0920
0ac50                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0ac50     08 4E 05 F1 | 	add	fp, #8
0ac54     A7 16 02 FB | 	rdlong	arg03, fp
0ac58     08 4E 85 F1 | 	sub	fp, #8
0ac5c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ac60     18 00 90 5D |  if_ne	jmp	#LR__0921
0ac64     A7 12 02 FB | 	rdlong	arg01, fp
0ac68     00 34 B0 FD | 	call	#_convertstring
0ac6c     A7 FA 61 FC | 	wrlong	result1, fp
0ac70     08 4E 05 F1 | 	add	fp, #8
0ac74     A7 3E 68 FC | 	wrlong	#31, fp
0ac78     08 4E 85 F1 | 	sub	fp, #8
0ac7c                 | LR__0921
0ac7c                 | ' if t1.result_type=result_string then
0ac7c     08 4E 05 F1 | 	add	fp, #8
0ac80     A7 1E 02 FB | 	rdlong	local01, fp
0ac84     08 4E 85 F1 | 	sub	fp, #8
0ac88     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ac8c     28 02 90 5D |  if_ne	jmp	#LR__0925
0ac90                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0ac90     A7 12 02 FB | 	rdlong	arg01, fp
0ac94     5F 01 00 FF 
0ac98     71 14 06 F6 | 	mov	arg02, ##@LR__4909
0ac9c     80 16 B1 FD | 	call	#__system___string_cmp
0aca0     00 FA 0D F2 | 	cmp	result1, #0 wz
0aca4     5F 01 00 AF 
0aca8     72 1E 06 A6 |  if_e	mov	local01, ##@LR__4910
0acac     A7 1E 62 AC |  if_e	wrlong	local01, fp
0acb0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0acb0     09 12 06 F6 | 	mov	arg01, #9
0acb4     04 66 B1 FD | 	call	#__system__close
0acb8     09 1E 06 F6 | 	mov	local01, #9
0acbc     72 00 00 FF 
0acc0     78 E4 05 F1 | 	add	objptr, ##58488
0acc4     F2 12 02 FB | 	rdlong	arg01, objptr
0acc8     72 00 00 FF 
0accc     78 E4 85 F1 | 	sub	objptr, ##58488
0acd0     5F 01 00 FF 
0acd4     7D 14 06 F6 | 	mov	arg02, ##@LR__4911
0acd8     78 16 B1 FD | 	call	#__system___string_concat
0acdc     FD 12 02 F6 | 	mov	arg01, result1
0ace0     A7 14 02 FB | 	rdlong	arg02, fp
0ace4     6C 16 B1 FD | 	call	#__system___string_concat
0ace8     FD 14 02 F6 | 	mov	arg02, result1
0acec     0F 13 02 F6 | 	mov	arg01, local01
0acf0     0D 16 06 F6 | 	mov	arg03, #13
0acf4     00 22 B1 FD | 	call	#__system___basic_open_string
0acf8     01 00 00 FF 
0acfc     0C 4E 05 F1 | 	add	fp, ##524
0ad00     A7 0A 68 FC | 	wrlong	#5, fp
0ad04     6A 00 00 FF 
0ad08     68 E4 05 F1 | 	add	objptr, ##54376
0ad0c     F2 1E 02 FB | 	rdlong	local01, objptr
0ad10     6A 00 00 FF 
0ad14     68 E4 85 F1 | 	sub	objptr, ##54376
0ad18     0C 4E 05 F1 | 	add	fp, #12
0ad1c     A7 1E 62 FC | 	wrlong	local01, fp
0ad20     01 00 00 FF 
0ad24     18 4E 85 F1 | 	sub	fp, ##536
0ad28                 | ' '  put #9,1,fileheader,1
0ad28                 | '   i=5
0ad28                 | '   saveptr=programstart
0ad28                 | '   do
0ad28                 | LR__0922
0ad28     01 00 00 FF 
0ad2c     1C 4E 05 F1 | 	add	fp, ##540
0ad30     A7 12 02 F6 | 	mov	arg01, fp
0ad34     04 4E 85 F1 | 	sub	fp, #4
0ad38     A7 14 02 FB | 	rdlong	arg02, fp
0ad3c     01 00 00 FF 
0ad40     18 4E 85 F1 | 	sub	fp, ##536
0ad44     18 16 06 F6 | 	mov	arg03, #24
0ad48     0B 00 00 FF 
0ad4c     C0 E4 05 F1 | 	add	objptr, ##5824
0ad50     A0 09 B1 FD | 	call	#_psram_spin2_read1
0ad54     01 00 00 FF 
0ad58     34 4E 05 F1 | 	add	fp, ##564
0ad5c     A7 12 02 F6 | 	mov	arg01, fp
0ad60     10 4E 85 F1 | 	sub	fp, #16
0ad64     A7 14 02 FB | 	rdlong	arg02, fp
0ad68     04 4E 05 F1 | 	add	fp, #4
0ad6c     A7 16 02 FB | 	rdlong	arg03, fp
0ad70     01 00 00 FF 
0ad74     28 4E 85 F1 | 	sub	fp, ##552
0ad78     78 09 B1 FD | 	call	#_psram_spin2_read1
0ad7c     0B 00 00 FF 
0ad80     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad84     5F 01 00 FF 
0ad88     7F 1E 06 F6 | 	mov	local01, ##@LR__4912
0ad8c     01 00 00 FF 
0ad90     B4 4E 05 F1 | 	add	fp, ##692
0ad94     A7 1E 62 FC | 	wrlong	local01, fp
0ad98                 | '     psram.read1(varptr(header(0)),saveptr,24)
0ad98                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0ad98                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0ad98     A8 4E 85 F1 | 	sub	fp, #168
0ad9c     A7 02 68 FC | 	wrlong	#1, fp
0ada0     1C 4E 05 F1 | 	add	fp, #28
0ada4     A7 20 02 FB | 	rdlong	local02, fp
0ada8     01 00 00 FF 
0adac     28 4E 85 F1 | 	sub	fp, ##552
0adb0     01 20 06 F1 | 	add	local02, #1
0adb4                 | LR__0923
0adb4     01 00 00 FF 
0adb8     0C 4E 05 F1 | 	add	fp, ##524
0adbc     A7 1E 02 FB | 	rdlong	local01, fp
0adc0     01 00 00 FF 
0adc4     0C 4E 85 F1 | 	sub	fp, ##524
0adc8     10 1F 52 F2 | 	cmps	local01, local02 wc
0adcc     64 00 90 3D |  if_ae	jmp	#LR__0924
0add0     01 00 00 FF 
0add4     B4 4E 05 F1 | 	add	fp, ##692
0add8     A7 1E 02 FB | 	rdlong	local01, fp
0addc     A8 4E 85 F1 | 	sub	fp, #168
0ade0     A7 16 02 FB | 	rdlong	arg03, fp
0ade4     01 16 86 F1 | 	sub	arg03, #1
0ade8     28 4E 05 F1 | 	add	fp, #40
0adec     A7 16 02 F1 | 	add	arg03, fp
0adf0     0B 13 C2 FA | 	rdbyte	arg01, arg03
0adf4     01 00 00 FF 
0adf8     34 4E 85 F1 | 	sub	fp, ##564
0adfc     00 37 B1 FD | 	call	#__system__Chr_S
0ae00     FD 14 02 F6 | 	mov	arg02, result1
0ae04     0F 13 02 F6 | 	mov	arg01, local01
0ae08     48 15 B1 FD | 	call	#__system___string_concat
0ae0c     01 00 00 FF 
0ae10     B4 4E 05 F1 | 	add	fp, ##692
0ae14     A7 FA 61 FC | 	wrlong	result1, fp
0ae18     A8 4E 85 F1 | 	sub	fp, #168
0ae1c     A7 1E 02 FB | 	rdlong	local01, fp
0ae20     01 1E 06 F1 | 	add	local01, #1
0ae24     A7 1E 62 FC | 	wrlong	local01, fp
0ae28     01 00 00 FF 
0ae2c     0C 4E 85 F1 | 	sub	fp, ##524
0ae30     80 FF 9F FD | 	jmp	#LR__0923
0ae34                 | LR__0924
0ae34                 | '  '   put #9,i,header(3),1 : i+=4
0ae34                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0ae34                 | '      print #9, saveline$
0ae34     09 12 06 F6 | 	mov	arg01, #9
0ae38     4C 6E B1 FD | 	call	#__system___getiolock_0474
0ae3c     FD 12 02 F6 | 	mov	arg01, result1
0ae40     B4 14 B1 FD | 	call	#__system___lockmem
0ae44     01 00 00 FF 
0ae48     B4 4E 05 F1 | 	add	fp, ##692
0ae4c     A7 14 02 FB | 	rdlong	arg02, fp
0ae50     01 00 00 FF 
0ae54     B4 4E 85 F1 | 	sub	fp, ##692
0ae58     09 12 06 F6 | 	mov	arg01, #9
0ae5c     00 16 06 F6 | 	mov	arg03, #0
0ae60     98 21 B1 FD | 	call	#__system___basic_print_string
0ae64     09 12 06 F6 | 	mov	arg01, #9
0ae68     0A 14 06 F6 | 	mov	arg02, #10
0ae6c     00 16 06 F6 | 	mov	arg03, #0
0ae70     30 21 B1 FD | 	call	#__system___basic_print_char
0ae74     09 12 06 F6 | 	mov	arg01, #9
0ae78     0C 6E B1 FD | 	call	#__system___getiolock_0474
0ae7c     FD 00 68 FC | 	wrlong	#0, result1
0ae80     01 00 00 FF 
0ae84     30 4E 05 F1 | 	add	fp, ##560
0ae88     A7 1E 02 FB | 	rdlong	local01, fp
0ae8c     18 4E 85 F1 | 	sub	fp, #24
0ae90     A7 1E 62 FC | 	wrlong	local01, fp
0ae94     18 4E 05 F1 | 	add	fp, #24
0ae98     A7 1E 02 FB | 	rdlong	local01, fp
0ae9c     01 00 00 FF 
0aea0     30 4E 85 F1 | 	sub	fp, ##560
0aea4     FF FF 3F FF 
0aea8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0aeac     78 FE 9F 5D |  if_ne	jmp	#LR__0922
0aeb0                 | '   close #9  
0aeb0     09 12 06 F6 | 	mov	arg01, #9
0aeb4     04 64 B1 FD | 	call	#__system__close
0aeb8                 | LR__0925
0aeb8                 | LR__0926
0aeb8     A7 F0 03 F6 | 	mov	ptra, fp
0aebc     B2 00 A0 FD | 	call	#popregs_
0aec0                 | _do_save_ret
0aec0     2D 00 64 FD | 	ret
0aec4                 | 
0aec4                 | ' 
0aec4                 | ' '----------------- Load the program
0aec4                 | ' 'lo todo: errors while loading
0aec4                 | ' sub do_load
0aec4                 | _do_load
0aec4     01 4A 05 F6 | 	mov	COUNT_, #1
0aec8     A8 00 A0 FD | 	call	#pushregs_
0aecc     A4 F0 07 F1 | 	add	ptra, #164
0aed0     A0 4E 05 F1 | 	add	fp, #160
0aed4     A7 12 02 F6 | 	mov	arg01, fp
0aed8     80 4E 85 F1 | 	sub	fp, #128
0aedc     A7 14 02 F6 | 	mov	arg02, fp
0aee0     20 4E 85 F1 | 	sub	fp, #32
0aee4     09 15 62 FC | 	wrlong	arg02, arg01
0aee8     DC F1 BF FD | 	call	#_pop
0aeec     FF 1A 02 F6 | 	mov	arg05, result3
0aef0     A7 FA 61 FC | 	wrlong	result1, fp
0aef4     04 4E 05 F1 | 	add	fp, #4
0aef8     A7 FC 61 FC | 	wrlong	result2, fp
0aefc     04 4E 05 F1 | 	add	fp, #4
0af00     A7 1A 62 FC | 	wrlong	arg05, fp
0af04                 | ' 
0af04                 | ' lpoke varptr(line2$),varptr(line2)
0af04                 | ' t1=pop() 
0af04                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0af04                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0af04     08 4E 85 F1 | 	sub	fp, #8
0af08     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0af0c     18 00 90 5D |  if_ne	jmp	#LR__0930
0af10     A7 12 02 FB | 	rdlong	arg01, fp
0af14     54 31 B0 FD | 	call	#_convertstring
0af18     A7 FA 61 FC | 	wrlong	result1, fp
0af1c     08 4E 05 F1 | 	add	fp, #8
0af20     A7 3E 68 FC | 	wrlong	#31, fp
0af24     08 4E 85 F1 | 	sub	fp, #8
0af28                 | LR__0930
0af28                 | ' if t1.result_type=result_string then
0af28     08 4E 05 F1 | 	add	fp, #8
0af2c     A7 1E 02 FB | 	rdlong	local01, fp
0af30     08 4E 85 F1 | 	sub	fp, #8
0af34     1F 1E 0E F2 | 	cmp	local01, #31 wz
0af38     40 03 90 5D |  if_ne	jmp	#LR__0937
0af3c     A4 2B B0 FD | 	call	#_do_new
0af40                 | '   do_new
0af40                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0af40     A7 12 02 FB | 	rdlong	arg01, fp
0af44     5F 01 00 FF 
0af48     80 14 06 F6 | 	mov	arg02, ##@LR__4913
0af4c     D0 13 B1 FD | 	call	#__system___string_cmp
0af50     00 FA 0D F2 | 	cmp	result1, #0 wz
0af54     5F 01 00 AF 
0af58     81 1E 06 A6 |  if_e	mov	local01, ##@LR__4914
0af5c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0af60                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0af60     09 12 06 F6 | 	mov	arg01, #9
0af64     54 63 B1 FD | 	call	#__system__close
0af68     09 1E 06 F6 | 	mov	local01, #9
0af6c     72 00 00 FF 
0af70     78 E4 05 F1 | 	add	objptr, ##58488
0af74     F2 12 02 FB | 	rdlong	arg01, objptr
0af78     72 00 00 FF 
0af7c     78 E4 85 F1 | 	sub	objptr, ##58488
0af80     5F 01 00 FF 
0af84     8C 14 06 F6 | 	mov	arg02, ##@LR__4915
0af88     C8 13 B1 FD | 	call	#__system___string_concat
0af8c     FD 12 02 F6 | 	mov	arg01, result1
0af90     A7 14 02 FB | 	rdlong	arg02, fp
0af94     BC 13 B1 FD | 	call	#__system___string_concat
0af98     FD 14 02 F6 | 	mov	arg02, result1
0af9c     0F 13 02 F6 | 	mov	arg01, local01
0afa0     00 16 06 F6 | 	mov	arg03, #0
0afa4     50 1F B1 FD | 	call	#__system___basic_open_string
0afa8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0afac     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0afb0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0afb4     10 4E 05 F1 | 	add	fp, #16
0afb8     A7 FA 61 FC | 	wrlong	result1, fp
0afbc                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0afbc     10 4E 85 F1 | 	sub	fp, #16
0afc0     9C 00 90 AD |  if_e	jmp	#LR__0931
0afc4     00 12 06 F6 | 	mov	arg01, #0
0afc8     BC 6C B1 FD | 	call	#__system___getiolock_0474
0afcc     FD 12 02 F6 | 	mov	arg01, result1
0afd0     24 13 B1 FD | 	call	#__system___lockmem
0afd4     5F 01 00 FF 
0afd8     8E 14 06 F6 | 	mov	arg02, ##@LR__4916
0afdc     00 12 06 F6 | 	mov	arg01, #0
0afe0     00 16 06 F6 | 	mov	arg03, #0
0afe4     14 20 B1 FD | 	call	#__system___basic_print_string
0afe8     10 4E 05 F1 | 	add	fp, #16
0afec     A7 14 02 FB | 	rdlong	arg02, fp
0aff0     10 4E 85 F1 | 	sub	fp, #16
0aff4     00 12 06 F6 | 	mov	arg01, #0
0aff8     00 16 06 F6 | 	mov	arg03, #0
0affc     0A 18 06 F6 | 	mov	arg04, #10
0b000     3C 20 B1 FD | 	call	#__system___basic_print_integer
0b004     5F 01 00 FF 
0b008     9C 14 06 F6 | 	mov	arg02, ##@LR__4917
0b00c     00 12 06 F6 | 	mov	arg01, #0
0b010     00 16 06 F6 | 	mov	arg03, #0
0b014     E4 1F B1 FD | 	call	#__system___basic_print_string
0b018     10 4E 05 F1 | 	add	fp, #16
0b01c     A7 12 02 FB | 	rdlong	arg01, fp
0b020     10 4E 85 F1 | 	sub	fp, #16
0b024     60 39 B1 FD | 	call	#__system___strerror
0b028     FD 14 02 F6 | 	mov	arg02, result1
0b02c     00 12 06 F6 | 	mov	arg01, #0
0b030     00 16 06 F6 | 	mov	arg03, #0
0b034     C4 1F B1 FD | 	call	#__system___basic_print_string
0b038     00 12 06 F6 | 	mov	arg01, #0
0b03c     0A 14 06 F6 | 	mov	arg02, #10
0b040     00 16 06 F6 | 	mov	arg03, #0
0b044     5C 1F B1 FD | 	call	#__system___basic_print_char
0b048     00 12 06 F6 | 	mov	arg01, #0
0b04c     38 6C B1 FD | 	call	#__system___getiolock_0474
0b050     FD 00 68 FC | 	wrlong	#0, result1
0b054     09 12 06 F6 | 	mov	arg01, #9
0b058     60 62 B1 FD | 	call	#__system__close
0b05c     24 02 90 FD | 	jmp	#LR__0939
0b060                 | LR__0931
0b060     0C 4E 05 F1 | 	add	fp, #12
0b064     A7 0A 68 FC | 	wrlong	#5, fp
0b068                 | '   i=5
0b068                 | '   get #9,1,header,1
0b068     0C 4E 05 F1 | 	add	fp, #12
0b06c     A7 16 02 F6 | 	mov	arg03, fp
0b070     18 4E 85 F1 | 	sub	fp, #24
0b074     09 12 06 F6 | 	mov	arg01, #9
0b078     01 14 06 F6 | 	mov	arg02, #1
0b07c     01 18 06 F6 | 	mov	arg04, #1
0b080     04 1A 06 F6 | 	mov	arg05, #4
0b084     84 20 B1 FD | 	call	#__system___basic_get
0b088                 | '   
0b088                 | '   if header<>$0D616272 then 
0b088     18 4E 05 F1 | 	add	fp, #24
0b08c     A7 1E 02 FB | 	rdlong	local01, fp
0b090     18 4E 85 F1 | 	sub	fp, #24
0b094     B1 B0 06 FF 
0b098     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0b09c     F0 00 90 AD |  if_e	jmp	#LR__0934
0b0a0                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b0a0     09 12 06 F6 | 	mov	arg01, #9
0b0a4     14 62 B1 FD | 	call	#__system__close
0b0a8     09 1E 06 F6 | 	mov	local01, #9
0b0ac     72 00 00 FF 
0b0b0     78 E4 05 F1 | 	add	objptr, ##58488
0b0b4     F2 12 02 FB | 	rdlong	arg01, objptr
0b0b8     72 00 00 FF 
0b0bc     78 E4 85 F1 | 	sub	objptr, ##58488
0b0c0     5F 01 00 FF 
0b0c4     9F 14 06 F6 | 	mov	arg02, ##@LR__4918
0b0c8     88 12 B1 FD | 	call	#__system___string_concat
0b0cc     FD 12 02 F6 | 	mov	arg01, result1
0b0d0     A7 14 02 FB | 	rdlong	arg02, fp
0b0d4     7C 12 B1 FD | 	call	#__system___string_concat
0b0d8     FD 14 02 F6 | 	mov	arg02, result1
0b0dc     0F 13 02 F6 | 	mov	arg01, local01
0b0e0     00 16 06 F6 | 	mov	arg03, #0
0b0e4     10 1E B1 FD | 	call	#__system___basic_open_string
0b0e8                 | '     do
0b0e8                 | LR__0932
0b0e8     09 12 06 F6 | 	mov	arg01, #9
0b0ec     14 14 B1 FD | 	call	#__system___basic_read_line
0b0f0     57 00 00 FF 
0b0f4     00 E4 05 F1 | 	add	objptr, ##44544
0b0f8     F2 FA 61 FC | 	wrlong	result1, objptr
0b0fc                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0b0fc     57 00 00 FF 
0b100     00 E4 85 F1 | 	sub	objptr, ##44544
0b104     FD 12 02 F6 | 	mov	arg01, result1
0b108     01 14 06 F6 | 	mov	arg02, #1
0b10c     2C 32 B1 FD | 	call	#__system__Left_S
0b110     FD 12 02 F6 | 	mov	arg01, result1
0b114     5F 01 00 FF 
0b118     A1 14 06 F6 | 	mov	arg02, ##@LR__4919
0b11c     00 12 B1 FD | 	call	#__system___string_cmp
0b120     00 FA 55 F2 | 	cmps	result1, #0 wc
0b124     34 00 90 CD |  if_b	jmp	#LR__0933
0b128     57 00 00 FF 
0b12c     00 E4 05 F1 | 	add	objptr, ##44544
0b130     F2 12 02 FB | 	rdlong	arg01, objptr
0b134     57 00 00 FF 
0b138     00 E4 85 F1 | 	sub	objptr, ##44544
0b13c     01 14 06 F6 | 	mov	arg02, #1
0b140     F8 31 B1 FD | 	call	#__system__Left_S
0b144     FD 12 02 F6 | 	mov	arg01, result1
0b148     5F 01 00 FF 
0b14c     A3 14 06 F6 | 	mov	arg02, ##@LR__4920
0b150     CC 11 B1 FD | 	call	#__system___string_cmp
0b154     01 FA 55 F2 | 	cmps	result1, #1 wc
0b158     C0 58 BF CD |  if_b	call	#_interpret
0b15c                 | LR__0933
0b15c     57 00 00 FF 
0b160     00 E4 05 F1 | 	add	objptr, ##44544
0b164     F2 12 02 FB | 	rdlong	arg01, objptr
0b168     57 00 00 FF 
0b16c     00 E4 85 F1 | 	sub	objptr, ##44544
0b170     5F 01 00 FF 
0b174     A5 14 06 F6 | 	mov	arg02, ##@LR__4921
0b178     A4 11 B1 FD | 	call	#__system___string_cmp
0b17c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b180     64 FF 9F 5D |  if_ne	jmp	#LR__0932
0b184                 | '     close #9
0b184     09 12 06 F6 | 	mov	arg01, #9
0b188     30 61 B1 FD | 	call	#__system__close
0b18c     F4 00 90 FD | 	jmp	#LR__0938
0b190                 | LR__0934
0b190                 | '   'printerror(26) : close #9 : return
0b190                 | '     do
0b190                 | LR__0935
0b190                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0b190     0C 4E 05 F1 | 	add	fp, #12
0b194     A7 14 02 FB | 	rdlong	arg02, fp
0b198     10 4E 05 F1 | 	add	fp, #16
0b19c     A7 16 02 F6 | 	mov	arg03, fp
0b1a0     1C 4E 85 F1 | 	sub	fp, #28
0b1a4     09 12 06 F6 | 	mov	arg01, #9
0b1a8     01 18 06 F6 | 	mov	arg04, #1
0b1ac     04 1A 06 F6 | 	mov	arg05, #4
0b1b0     58 1F B1 FD | 	call	#__system___basic_get
0b1b4     14 4E 05 F1 | 	add	fp, #20
0b1b8     A7 FA 61 FC | 	wrlong	result1, fp
0b1bc     08 4E 85 F1 | 	sub	fp, #8
0b1c0     A7 1E 02 FB | 	rdlong	local01, fp
0b1c4     04 1E 06 F1 | 	add	local01, #4
0b1c8     A7 1E 62 FC | 	wrlong	local01, fp
0b1cc     10 4E 05 F1 | 	add	fp, #16
0b1d0     A7 1E 02 FB | 	rdlong	local01, fp
0b1d4     04 4E 05 F1 | 	add	fp, #4
0b1d8     A7 1E 02 F1 | 	add	local01, fp
0b1dc     0F 01 48 FC | 	wrbyte	#0, local01
0b1e0                 | '       if amount=1 then  
0b1e0     0C 4E 85 F1 | 	sub	fp, #12
0b1e4     A7 1E 02 FB | 	rdlong	local01, fp
0b1e8     14 4E 85 F1 | 	sub	fp, #20
0b1ec     01 1E 0E F2 | 	cmp	local01, #1 wz
0b1f0     68 00 90 5D |  if_ne	jmp	#LR__0936
0b1f4                 | '         get #9,i,line2(0),linelength : i+=linelength
0b1f4     0C 4E 05 F1 | 	add	fp, #12
0b1f8     A7 14 02 FB | 	rdlong	arg02, fp
0b1fc     14 4E 05 F1 | 	add	fp, #20
0b200     A7 16 02 F6 | 	mov	arg03, fp
0b204     04 4E 85 F1 | 	sub	fp, #4
0b208     A7 18 02 FB | 	rdlong	arg04, fp
0b20c     1C 4E 85 F1 | 	sub	fp, #28
0b210     09 12 06 F6 | 	mov	arg01, #9
0b214     01 1A 06 F6 | 	mov	arg05, #1
0b218     F0 1E B1 FD | 	call	#__system___basic_get
0b21c     0C 4E 05 F1 | 	add	fp, #12
0b220     A7 1E 02 FB | 	rdlong	local01, fp
0b224     10 4E 05 F1 | 	add	fp, #16
0b228     A7 1A 02 FB | 	rdlong	arg05, fp
0b22c     0D 1F 02 F1 | 	add	local01, arg05
0b230     10 4E 85 F1 | 	sub	fp, #16
0b234     A7 1E 62 FC | 	wrlong	local01, fp
0b238     94 4E 05 F1 | 	add	fp, #148
0b23c     A7 1E 02 FB | 	rdlong	local01, fp
0b240     A0 4E 85 F1 | 	sub	fp, #160
0b244     57 00 00 FF 
0b248     00 E4 05 F1 | 	add	objptr, ##44544
0b24c     F2 1E 62 FC | 	wrlong	local01, objptr
0b250     57 00 00 FF 
0b254     00 E4 85 F1 | 	sub	objptr, ##44544
0b258     C0 57 BF FD | 	call	#_interpret
0b25c                 | LR__0936
0b25c     14 4E 05 F1 | 	add	fp, #20
0b260     A7 1E 02 FB | 	rdlong	local01, fp
0b264     14 4E 85 F1 | 	sub	fp, #20
0b268     01 1E 56 F2 | 	cmps	local01, #1 wc
0b26c     20 FF 9F 3D |  if_ae	jmp	#LR__0935
0b270                 | '     close #9 
0b270     09 12 06 F6 | 	mov	arg01, #9
0b274     44 60 B1 FD | 	call	#__system__close
0b278     08 00 90 FD | 	jmp	#LR__0938
0b27c                 | LR__0937
0b27c     1E 12 06 F6 | 	mov	arg01, #30
0b280     D4 D8 B0 FD | 	call	#_printerror
0b284                 | LR__0938
0b284                 | LR__0939
0b284     A7 F0 03 F6 | 	mov	ptra, fp
0b288     B2 00 A0 FD | 	call	#popregs_
0b28c                 | _do_load_ret
0b28c     2D 00 64 FD | 	ret
0b290                 | 
0b290                 | ' 
0b290                 | ' '----------------- Run the program 
0b290                 | ' 
0b290                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0b290                 | ' 
0b290                 | ' sub do_run
0b290                 | _do_run
0b290     01 4A 05 F6 | 	mov	COUNT_, #1
0b294     A8 00 A0 FD | 	call	#pushregs_
0b298     6A 00 00 FF 
0b29c     68 E4 05 F1 | 	add	objptr, ##54376
0b2a0     F2 1C 02 FB | 	rdlong	arg06, objptr
0b2a4     0F 00 00 FF 
0b2a8     2C E5 05 F1 | 	add	objptr, ##7980
0b2ac     F2 1C 62 FC | 	wrlong	arg06, objptr
0b2b0     04 E4 05 F1 | 	add	objptr, #4
0b2b4     F2 00 68 FC | 	wrlong	#0, objptr
0b2b8     04 E4 05 F1 | 	add	objptr, #4
0b2bc     FF FF FF FF 
0b2c0     F2 FE 6B FC | 	wrlong	##-1, objptr
0b2c4                 | ' if inrun>0 then 
0b2c4     04 E4 05 F1 | 	add	objptr, #4
0b2c8     F2 1C 02 FB | 	rdlong	arg06, objptr
0b2cc     79 00 00 FF 
0b2d0     A0 E5 85 F1 | 	sub	objptr, ##62368
0b2d4     01 1C 16 F2 | 	cmp	arg06, #1 wc
0b2d8     30 00 90 CD |  if_b	jmp	#LR__0940
0b2dc     79 00 00 FF 
0b2e0     A4 E5 05 F1 | 	add	objptr, ##62372
0b2e4     F2 12 02 F6 | 	mov	arg01, objptr
0b2e8     10 E4 85 F1 | 	sub	objptr, #16
0b2ec     F2 14 02 FB | 	rdlong	arg02, objptr
0b2f0     18 16 06 F6 | 	mov	arg03, #24
0b2f4     6E 00 00 FF 
0b2f8     D4 E4 85 F1 | 	sub	objptr, ##56532
0b2fc     F4 03 B1 FD | 	call	#_psram_spin2_read1
0b300     0B 00 00 FF 
0b304     C0 E4 85 F1 | 	sub	objptr, ##5824
0b308                 | '   psram.read1(varptr(runheader),runptr,24)  
0b308                 | '   return
0b308     C4 02 90 FD | 	jmp	#LR__0947
0b30c                 | LR__0940
0b30c     79 00 00 FF 
0b310     A0 E5 05 F1 | 	add	objptr, ##62368
0b314     F2 02 68 FC | 	wrlong	#1, objptr
0b318     04 E4 05 F1 | 	add	objptr, #4
0b31c     F2 12 02 F6 | 	mov	arg01, objptr
0b320     10 E4 85 F1 | 	sub	objptr, #16
0b324     F2 14 02 FB | 	rdlong	arg02, objptr
0b328     18 16 06 F6 | 	mov	arg03, #24
0b32c     6E 00 00 FF 
0b330     D4 E4 85 F1 | 	sub	objptr, ##56532
0b334     BC 03 B1 FD | 	call	#_psram_spin2_read1
0b338                 | ' inrun=1
0b338                 | ' psram.read1(varptr(runheader),runptr,24) 
0b338                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0b338     6E 00 00 FF 
0b33c     E4 E4 05 F1 | 	add	objptr, ##56548
0b340     F2 1E 02 FB | 	rdlong	local01, objptr
0b344     79 00 00 FF 
0b348     A4 E5 85 F1 | 	sub	objptr, ##62372
0b34c     FF FF 7F FF 
0b350     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0b354     79 00 00 AF 
0b358     A0 E5 05 A1 |  if_e	add	objptr, ##62368
0b35c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0b360     79 00 00 AF 
0b364     A0 E5 85 A1 |  if_e	sub	objptr, ##62368
0b368     64 02 90 AD |  if_e	jmp	#LR__0947
0b36c                 | ' do 
0b36c                 | LR__0941
0b36c                 | '   if runptr<>oldrunptr then
0b36c     79 00 00 FF 
0b370     94 E5 05 F1 | 	add	objptr, ##62356
0b374     F2 1E 02 FB | 	rdlong	local01, objptr
0b378     08 E4 05 F1 | 	add	objptr, #8
0b37c     F2 1C 02 FB | 	rdlong	arg06, objptr
0b380     79 00 00 FF 
0b384     9C E5 85 F1 | 	sub	objptr, ##62364
0b388     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0b38c     CC 00 90 AD |  if_e	jmp	#LR__0942
0b390     79 00 00 FF 
0b394     A4 E5 05 F1 | 	add	objptr, ##62372
0b398     F2 12 02 F6 | 	mov	arg01, objptr
0b39c     10 E4 85 F1 | 	sub	objptr, #16
0b3a0     F2 14 02 FB | 	rdlong	arg02, objptr
0b3a4     18 16 06 F6 | 	mov	arg03, #24
0b3a8     6E 00 00 FF 
0b3ac     D4 E4 85 F1 | 	sub	objptr, ##56532
0b3b0     40 03 B1 FD | 	call	#_psram_spin2_read1
0b3b4     5B 00 00 FF 
0b3b8     A0 E5 05 F1 | 	add	objptr, ##47008
0b3bc     F2 12 02 F6 | 	mov	arg01, objptr
0b3c0     12 00 00 FF 
0b3c4     34 E5 05 F1 | 	add	objptr, ##9524
0b3c8     F2 14 02 FB | 	rdlong	arg02, objptr
0b3cc     14 00 00 FF 
0b3d0     4C E5 85 F1 | 	sub	objptr, ##10572
0b3d4     F2 1E 02 FB | 	rdlong	local01, objptr
0b3d8     01 1E 66 F0 | 	shl	local01, #1
0b3dc     0F 15 02 F1 | 	add	arg02, local01
0b3e0     14 00 00 FF 
0b3e4     64 E5 05 F1 | 	add	objptr, ##10596
0b3e8     F2 16 02 FB | 	rdlong	arg03, objptr
0b3ec     18 E4 85 F1 | 	sub	objptr, #24
0b3f0     F2 1E 02 FB | 	rdlong	local01, objptr
0b3f4     0F 17 82 F1 | 	sub	arg03, local01
0b3f8     6E 00 00 FF 
0b3fc     D4 E4 85 F1 | 	sub	objptr, ##56532
0b400     F0 02 B1 FD | 	call	#_psram_spin2_read1
0b404     6E 00 00 FF 
0b408     EC E4 05 F1 | 	add	objptr, ##56556
0b40c     F2 1E 02 FB | 	rdlong	local01, objptr
0b410     18 E4 85 F1 | 	sub	objptr, #24
0b414     F2 1C 02 FB | 	rdlong	arg06, objptr
0b418     0E 1F 82 F1 | 	sub	local01, arg06
0b41c     14 00 00 FF 
0b420     4C E5 85 F1 | 	sub	objptr, ##10572
0b424     F2 1C 02 FB | 	rdlong	arg06, objptr
0b428     0E 1F 12 FD | 	qdiv	local01, arg06
0b42c     05 00 00 FF 
0b430     18 E4 05 F1 | 	add	objptr, ##2584
0b434     18 1E 62 FD | 	getqx	local01
0b438     03 1E 86 F1 | 	sub	local01, #3
0b43c     F2 1E 62 FC | 	wrlong	local01, objptr
0b440     0F 00 00 FF 
0b444     34 E5 05 F1 | 	add	objptr, ##7988
0b448     F2 1E 02 FB | 	rdlong	local01, objptr
0b44c     08 E4 05 F1 | 	add	objptr, #8
0b450     F2 1E 62 FC | 	wrlong	local01, objptr
0b454     79 00 00 FF 
0b458     9C E5 85 F1 | 	sub	objptr, ##62364
0b45c                 | LR__0942
0b45c     79 00 00 FF 
0b460     B8 E5 05 F1 | 	add	objptr, ##62392
0b464     F2 1E 02 FB | 	rdlong	local01, objptr
0b468     24 E4 85 F1 | 	sub	objptr, #36
0b46c     F2 1E 62 FC | 	wrlong	local01, objptr
0b470     04 E4 05 F1 | 	add	objptr, #4
0b474     F2 12 02 FB | 	rdlong	arg01, objptr
0b478     79 00 00 FF 
0b47c     98 E5 85 F1 | 	sub	objptr, ##62360
0b480     40 EB BF FD | 	call	#_execute_line
0b484     79 00 00 FF 
0b488     98 E5 05 F1 | 	add	objptr, ##62360
0b48c     F2 FA 61 FC | 	wrlong	result1, objptr
0b490     04 E4 85 F1 | 	sub	objptr, #4
0b494     F2 1E 02 FB | 	rdlong	local01, objptr
0b498     79 00 00 FF 
0b49c     94 E5 85 F1 | 	sub	objptr, ##62356
0b4a0     FF FF 3F FF 
0b4a4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b4a8     30 00 90 AD |  if_e	jmp	#LR__0944
0b4ac     E0 12 06 F6 | 	mov	arg01, #224
0b4b0     D0 05 B1 FD | 	call	#_usbnew_spin2_keystate
0b4b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4b8     10 00 90 5D |  if_ne	jmp	#LR__0943
0b4bc     E4 12 06 F6 | 	mov	arg01, #228
0b4c0     C0 05 B1 FD | 	call	#_usbnew_spin2_keystate
0b4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4c8     A0 FE 9F AD |  if_e	jmp	#LR__0941
0b4cc                 | LR__0943
0b4cc     06 12 06 F6 | 	mov	arg01, #6
0b4d0     B0 05 B1 FD | 	call	#_usbnew_spin2_keystate
0b4d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4d8     90 FE 9F AD |  if_e	jmp	#LR__0941
0b4dc                 | LR__0944
0b4dc                 | '   ''do whatever kbm.peek_latest_key()=$106 
0b4dc                 | ' if runheader(5)<>$7FFF_FFFF then 
0b4dc     79 00 00 FF 
0b4e0     B8 E5 05 F1 | 	add	objptr, ##62392
0b4e4     F2 1E 02 FB | 	rdlong	local01, objptr
0b4e8     79 00 00 FF 
0b4ec     B8 E5 85 F1 | 	sub	objptr, ##62392
0b4f0     FF FF 3F FF 
0b4f4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b4f8     C0 00 90 AD |  if_e	jmp	#LR__0946
0b4fc                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)  : kbm.get_key ' eat ctrl-c
0b4fc     79 00 00 FF 
0b500     C4 E5 05 F1 | 	add	objptr, ##62404
0b504     F2 1E 02 FB | 	rdlong	local01, objptr
0b508     79 00 00 FF 
0b50c     C4 E5 85 F1 | 	sub	objptr, ##62404
0b510     01 1E 0E F2 | 	cmp	local01, #1 wz
0b514     40 00 90 5D |  if_ne	jmp	#LR__0945
0b518     7B 00 00 FF 
0b51c     68 E4 05 F1 | 	add	objptr, ##63080
0b520     F2 14 02 FB | 	rdlong	arg02, objptr
0b524     04 E4 85 F1 | 	sub	objptr, #4
0b528     F2 1A 02 FB | 	rdlong	arg05, objptr
0b52c     07 12 06 F6 | 	mov	arg01, #7
0b530     56 00 00 FF 
0b534     44 16 06 F6 | 	mov	arg03, ##44100
0b538     0C 18 C6 F9 | 	decod	arg04, #12
0b53c     01 1C 66 F6 | 	neg	arg06, #1
0b540     6F 00 00 FF 
0b544     A4 E5 85 F1 | 	sub	objptr, ##57252
0b548     5C 09 B1 FD | 	call	#_audio096_spin2_play
0b54c     0B 00 00 FF 
0b550     C0 E4 85 F1 | 	sub	objptr, ##5824
0b554     C8 05 B1 FD | 	call	#_usbnew_spin2_get_key
0b558                 | LR__0945
0b558                 | '   print "Stopped at line ";runheader(0)
0b558     00 12 06 F6 | 	mov	arg01, #0
0b55c     28 67 B1 FD | 	call	#__system___getiolock_0474
0b560     FD 12 02 F6 | 	mov	arg01, result1
0b564     90 0D B1 FD | 	call	#__system___lockmem
0b568     5F 01 00 FF 
0b56c     A6 14 06 F6 | 	mov	arg02, ##@LR__4922
0b570     00 12 06 F6 | 	mov	arg01, #0
0b574     00 16 06 F6 | 	mov	arg03, #0
0b578     80 1A B1 FD | 	call	#__system___basic_print_string
0b57c     79 00 00 FF 
0b580     A4 E5 05 F1 | 	add	objptr, ##62372
0b584     F2 14 02 FB | 	rdlong	arg02, objptr
0b588     79 00 00 FF 
0b58c     A4 E5 85 F1 | 	sub	objptr, ##62372
0b590     00 12 06 F6 | 	mov	arg01, #0
0b594     00 16 06 F6 | 	mov	arg03, #0
0b598     0A 18 06 F6 | 	mov	arg04, #10
0b59c     E0 1A B1 FD | 	call	#__system___basic_print_unsigned
0b5a0     00 12 06 F6 | 	mov	arg01, #0
0b5a4     0A 14 06 F6 | 	mov	arg02, #10
0b5a8     00 16 06 F6 | 	mov	arg03, #0
0b5ac     F4 19 B1 FD | 	call	#__system___basic_print_char
0b5b0     00 12 06 F6 | 	mov	arg01, #0
0b5b4     D0 66 B1 FD | 	call	#__system___getiolock_0474
0b5b8     FD 00 68 FC | 	wrlong	#0, result1
0b5bc                 | LR__0946
0b5bc     79 00 00 FF 
0b5c0     A0 E5 05 F1 | 	add	objptr, ##62368
0b5c4     F2 00 68 FC | 	wrlong	#0, objptr
0b5c8     79 00 00 FF 
0b5cc     A0 E5 85 F1 | 	sub	objptr, ##62368
0b5d0                 | LR__0947
0b5d0     A7 F0 03 F6 | 	mov	ptra, fp
0b5d4     B2 00 A0 FD | 	call	#popregs_
0b5d8                 | _do_run_ret
0b5d8     2D 00 64 FD | 	ret
0b5dc                 | 
0b5dc                 | ' 
0b5dc                 | ' 
0b5dc                 | ' 
0b5dc                 | ' 
0b5dc                 | ' 
0b5dc                 | ' 
0b5dc                 | ' 
0b5dc                 | ' sub do_defenv
0b5dc                 | _do_defenv
0b5dc     09 4A 05 F6 | 	mov	COUNT_, #9
0b5e0     A8 00 A0 FD | 	call	#pushregs_
0b5e4     B4 F0 07 F1 | 	add	ptra, #180
0b5e8     6A 00 00 FF 
0b5ec     64 E4 05 F1 | 	add	objptr, ##54372
0b5f0     F2 1E 02 FB | 	rdlong	local01, objptr
0b5f4     0F 1B 02 F6 | 	mov	arg05, local01
0b5f8     01 1A 66 F0 | 	shl	arg05, #1
0b5fc     0F 1B 02 F1 | 	add	arg05, local01
0b600     02 1A 66 F0 | 	shl	arg05, #2
0b604     03 00 00 FF 
0b608     04 E4 85 F1 | 	sub	objptr, ##1540
0b60c     F2 20 02 F6 | 	mov	local02, objptr
0b610     F2 1A 02 F1 | 	add	arg05, objptr
0b614     0D 1B 02 FB | 	rdlong	arg05, arg05
0b618     10 4E 05 F1 | 	add	fp, #16
0b61c     A7 1A 62 FC | 	wrlong	arg05, fp
0b620                 | ' 
0b620                 | ' numpar=compiledline(lineptr_e).result.uresult
0b620                 | ' 
0b620                 | ' 
0b620                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0b620                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0b620                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0b620                 | ' 
0b620                 | ' 
0b620                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0b620     10 4E 85 F1 | 	sub	fp, #16
0b624     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b628     67 00 00 FF 
0b62c     60 E4 85 F1 | 	sub	objptr, ##52832
0b630     10 4E 05 51 |  if_ne	add	fp, #16
0b634     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b638     10 4E 85 51 |  if_ne	sub	fp, #16
0b63c     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0b640     10 4E 05 51 |  if_ne	add	fp, #16
0b644     0F 21 02 56 |  if_ne	mov	local02, local01
0b648     10 4E 85 51 |  if_ne	sub	fp, #16
0b64c     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0b650     24 0C 90 5D |  if_ne	jmp	#LR__0971
0b654                 | ' 
0b654                 | '  
0b654                 | ' if numpar=2 then
0b654     10 4E 05 F1 | 	add	fp, #16
0b658     A7 20 02 FB | 	rdlong	local02, fp
0b65c     10 4E 85 F1 | 	sub	fp, #16
0b660     02 20 0E F2 | 	cmp	local02, #2 wz
0b664     CC 03 90 5D |  if_ne	jmp	#LR__0962
0b668     5C EA BF FD | 	call	#_pop
0b66c     FF 1A 02 F6 | 	mov	arg05, result3
0b670     5C 4E 05 F1 | 	add	fp, #92
0b674     A7 FA 61 FC | 	wrlong	result1, fp
0b678     04 4E 05 F1 | 	add	fp, #4
0b67c     A7 FC 61 FC | 	wrlong	result2, fp
0b680     04 4E 05 F1 | 	add	fp, #4
0b684     A7 1A 62 FC | 	wrlong	arg05, fp
0b688                 | '   t1=pop()
0b688                 | '   if t1.result_type=result_string2 then 
0b688     64 4E 85 F1 | 	sub	fp, #100
0b68c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b690     20 00 90 5D |  if_ne	jmp	#LR__0950
0b694     5C 4E 05 F1 | 	add	fp, #92
0b698     A7 12 02 FB | 	rdlong	arg01, fp
0b69c     5C 4E 85 F1 | 	sub	fp, #92
0b6a0     C8 29 B0 FD | 	call	#_convertstring
0b6a4     68 4E 05 F1 | 	add	fp, #104
0b6a8     A7 FA 61 FC | 	wrlong	result1, fp
0b6ac     68 4E 85 F1 | 	sub	fp, #104
0b6b0     58 00 90 FD | 	jmp	#LR__0953
0b6b4                 | LR__0950
0b6b4     64 4E 05 F1 | 	add	fp, #100
0b6b8     A7 20 02 FB | 	rdlong	local02, fp
0b6bc     64 4E 85 F1 | 	sub	fp, #100
0b6c0     1F 20 0E F2 | 	cmp	local02, #31 wz
0b6c4     18 00 90 5D |  if_ne	jmp	#LR__0951
0b6c8     5C 4E 05 F1 | 	add	fp, #92
0b6cc     A7 20 02 FB | 	rdlong	local02, fp
0b6d0     0C 4E 05 F1 | 	add	fp, #12
0b6d4     A7 20 62 FC | 	wrlong	local02, fp
0b6d8     68 4E 85 F1 | 	sub	fp, #104
0b6dc     2C 00 90 FD | 	jmp	#LR__0952
0b6e0                 | LR__0951
0b6e0     5F 01 00 FF 
0b6e4     B7 20 06 F6 | 	mov	local02, ##@LR__4923
0b6e8     68 4E 05 F1 | 	add	fp, #104
0b6ec     A7 20 62 FC | 	wrlong	local02, fp
0b6f0     0C 4E 85 F1 | 	sub	fp, #12
0b6f4     A7 12 02 F6 | 	mov	arg01, fp
0b6f8     5C 4E 85 F1 | 	sub	fp, #92
0b6fc     1C 73 B0 FD | 	call	#_converttoint
0b700     24 4E 05 F1 | 	add	fp, #36
0b704     A7 FA 61 FC | 	wrlong	result1, fp
0b708     24 4E 85 F1 | 	sub	fp, #36
0b70c                 | LR__0952
0b70c                 | LR__0953
0b70c                 | ' 
0b70c                 | '     
0b70c                 | '   if s1<>"" then 
0b70c     68 4E 05 F1 | 	add	fp, #104
0b710     A7 12 02 FB | 	rdlong	arg01, fp
0b714     68 4E 85 F1 | 	sub	fp, #104
0b718     5F 01 00 FF 
0b71c     B8 14 06 F6 | 	mov	arg02, ##@LR__4924
0b720     FC 0B B1 FD | 	call	#__system___string_cmp
0b724     00 FA 0D F2 | 	cmp	result1, #0 wz
0b728     F8 01 90 AD |  if_e	jmp	#LR__0957
0b72c     98 E9 BF FD | 	call	#_pop
0b730     FF 1E 02 F6 | 	mov	local01, result3
0b734     5C 4E 05 F1 | 	add	fp, #92
0b738     A7 FA 61 FC | 	wrlong	result1, fp
0b73c     04 4E 05 F1 | 	add	fp, #4
0b740     A7 FC 61 FC | 	wrlong	result2, fp
0b744     04 4E 05 F1 | 	add	fp, #4
0b748     A7 1E 62 FC | 	wrlong	local01, fp
0b74c     08 4E 85 F1 | 	sub	fp, #8
0b750     A7 12 02 F6 | 	mov	arg01, fp
0b754     5C 4E 85 F1 | 	sub	fp, #92
0b758     C0 72 B0 FD | 	call	#_converttoint
0b75c     20 4E 05 F1 | 	add	fp, #32
0b760     A7 FA 61 FC | 	wrlong	result1, fp
0b764     20 4E 85 F1 | 	sub	fp, #32
0b768                 | '     t1=pop()
0b768                 | '     channel=converttoint(t1) 
0b768                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0b768     09 12 06 F6 | 	mov	arg01, #9
0b76c     4C 5B B1 FD | 	call	#__system__close
0b770     09 20 06 F6 | 	mov	local02, #9
0b774     5F 01 00 FF 
0b778     B9 12 06 F6 | 	mov	arg01, ##@LR__4925
0b77c     68 4E 05 F1 | 	add	fp, #104
0b780     A7 14 02 FB | 	rdlong	arg02, fp
0b784     68 4E 85 F1 | 	sub	fp, #104
0b788     C8 0B B1 FD | 	call	#__system___string_concat
0b78c     FD 14 02 F6 | 	mov	arg02, result1
0b790     10 13 02 F6 | 	mov	arg01, local02
0b794     00 16 06 F6 | 	mov	arg03, #0
0b798     5C 17 B1 FD | 	call	#__system___basic_open_string
0b79c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b7a0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b7a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b7a8     0C 4E 05 F1 | 	add	fp, #12
0b7ac     A7 FA 61 FC | 	wrlong	result1, fp
0b7b0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b7b0     0C 4E 85 F1 | 	sub	fp, #12
0b7b4     A0 00 90 AD |  if_e	jmp	#LR__0954
0b7b8     00 12 06 F6 | 	mov	arg01, #0
0b7bc     C8 64 B1 FD | 	call	#__system___getiolock_0474
0b7c0     FD 12 02 F6 | 	mov	arg01, result1
0b7c4     30 0B B1 FD | 	call	#__system___lockmem
0b7c8     5F 01 00 FF 
0b7cc     C6 14 06 F6 | 	mov	arg02, ##@LR__4926
0b7d0     00 12 06 F6 | 	mov	arg01, #0
0b7d4     00 16 06 F6 | 	mov	arg03, #0
0b7d8     20 18 B1 FD | 	call	#__system___basic_print_string
0b7dc     0C 4E 05 F1 | 	add	fp, #12
0b7e0     A7 14 02 FB | 	rdlong	arg02, fp
0b7e4     0C 4E 85 F1 | 	sub	fp, #12
0b7e8     00 12 06 F6 | 	mov	arg01, #0
0b7ec     00 16 06 F6 | 	mov	arg03, #0
0b7f0     0A 18 06 F6 | 	mov	arg04, #10
0b7f4     48 18 B1 FD | 	call	#__system___basic_print_integer
0b7f8     5F 01 00 FF 
0b7fc     D4 14 06 F6 | 	mov	arg02, ##@LR__4927
0b800     00 12 06 F6 | 	mov	arg01, #0
0b804     00 16 06 F6 | 	mov	arg03, #0
0b808     F0 17 B1 FD | 	call	#__system___basic_print_string
0b80c     00 20 06 F6 | 	mov	local02, #0
0b810     0C 4E 05 F1 | 	add	fp, #12
0b814     A7 12 02 FB | 	rdlong	arg01, fp
0b818     0C 4E 85 F1 | 	sub	fp, #12
0b81c     68 31 B1 FD | 	call	#__system___strerror
0b820     FD 14 02 F6 | 	mov	arg02, result1
0b824     10 13 02 F6 | 	mov	arg01, local02
0b828     00 16 06 F6 | 	mov	arg03, #0
0b82c     CC 17 B1 FD | 	call	#__system___basic_print_string
0b830     00 12 06 F6 | 	mov	arg01, #0
0b834     0A 14 06 F6 | 	mov	arg02, #10
0b838     00 16 06 F6 | 	mov	arg03, #0
0b83c     64 17 B1 FD | 	call	#__system___basic_print_char
0b840     00 12 06 F6 | 	mov	arg01, #0
0b844     40 64 B1 FD | 	call	#__system___getiolock_0474
0b848     FD 00 68 FC | 	wrlong	#0, result1
0b84c     09 12 06 F6 | 	mov	arg01, #9
0b850     68 5A B1 FD | 	call	#__system__close
0b854     20 0A 90 FD | 	jmp	#LR__0971
0b858                 | LR__0954
0b858                 | '     get #9,17,envbuf8(channel,0),256
0b858     20 4E 05 F1 | 	add	fp, #32
0b85c     A7 1A 02 FB | 	rdlong	arg05, fp
0b860     20 4E 85 F1 | 	sub	fp, #32
0b864     0D 17 02 F6 | 	mov	arg03, arg05
0b868     09 16 66 F0 | 	shl	arg03, #9
0b86c     0D 17 02 F1 | 	add	arg03, arg05
0b870     2C 00 00 FF 
0b874     CC E4 05 F1 | 	add	objptr, ##22732
0b878     F2 16 02 F1 | 	add	arg03, objptr
0b87c     09 12 06 F6 | 	mov	arg01, #9
0b880     11 14 06 F6 | 	mov	arg02, #17
0b884     00 19 06 F6 | 	mov	arg04, #256
0b888     01 1A 06 F6 | 	mov	arg05, #1
0b88c     2C 00 00 FF 
0b890     CC E4 85 F1 | 	sub	objptr, ##22732
0b894     74 18 B1 FD | 	call	#__system___basic_get
0b898                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b898     14 4E 05 F1 | 	add	fp, #20
0b89c     A7 FE 69 FC | 	wrlong	#255, fp
0b8a0     14 4E 85 F1 | 	sub	fp, #20
0b8a4     2C 00 00 FF 
0b8a8     CC E4 05 F1 | 	add	objptr, ##22732
0b8ac     97 30 48 FB | 	callpa	#(@LR__0956-@LR__0955)>>2,fcache_load_ptr_
0b8b0                 | LR__0955
0b8b0     20 4E 05 F1 | 	add	fp, #32
0b8b4     A7 18 02 FB | 	rdlong	arg04, fp
0b8b8     0C 21 02 F6 | 	mov	local02, arg04
0b8bc     09 20 66 F0 | 	shl	local02, #9
0b8c0     F2 20 02 F1 | 	add	local02, objptr
0b8c4     0C 4E 85 F1 | 	sub	fp, #12
0b8c8     A7 1E 02 FB | 	rdlong	local01, fp
0b8cc     0F 1B 02 F6 | 	mov	arg05, local01
0b8d0     01 1A 66 F0 | 	shl	arg05, #1
0b8d4     10 1B 02 F1 | 	add	arg05, local02
0b8d8     0C 21 02 F6 | 	mov	local02, arg04
0b8dc     09 20 66 F0 | 	shl	local02, #9
0b8e0     0C 21 02 F1 | 	add	local02, arg04
0b8e4     F2 20 02 F1 | 	add	local02, objptr
0b8e8     10 1F 02 F1 | 	add	local01, local02
0b8ec     0F 21 C2 FA | 	rdbyte	local02, local01
0b8f0     00 21 06 FA | 	mul	local02, #256
0b8f4     0D 21 52 FC | 	wrword	local02, arg05
0b8f8     A7 20 02 FB | 	rdlong	local02, fp
0b8fc     01 20 86 F1 | 	sub	local02, #1
0b900     A7 20 62 FC | 	wrlong	local02, fp
0b904     14 4E 85 F1 | 	sub	fp, #20
0b908     00 20 56 F2 | 	cmps	local02, #0 wc
0b90c     A0 FF 9F 3D |  if_ae	jmp	#LR__0955
0b910                 | LR__0956
0b910     2C 00 00 FF 
0b914     CC E4 85 F1 | 	sub	objptr, ##22732
0b918                 | '     close #9
0b918     09 12 06 F6 | 	mov	arg01, #9
0b91c     9C 59 B1 FD | 	call	#__system__close
0b920                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b920                 | '     return
0b920     54 09 90 FD | 	jmp	#LR__0971
0b924                 | LR__0957
0b924                 | '     if wptr < ($80000 - 2048) then 
0b924     24 4E 05 F1 | 	add	fp, #36
0b928     A7 22 02 FB | 	rdlong	local03, fp
0b92c     24 4E 85 F1 | 	sub	fp, #36
0b930     FC 03 00 FF 
0b934     00 22 56 F2 | 	cmps	local03, ##522240 wc
0b938     7C 00 90 3D |  if_ae	jmp	#LR__0960
0b93c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0b93c     14 4E 05 F1 | 	add	fp, #20
0b940     A7 00 68 FC | 	wrlong	#0, fp
0b944     14 4E 85 F1 | 	sub	fp, #20
0b948     2C 00 00 FF 
0b94c     CC E4 05 F1 | 	add	objptr, ##22732
0b950     97 2C 48 FB | 	callpa	#(@LR__0959-@LR__0958)>>2,fcache_load_ptr_
0b954                 | LR__0958
0b954     20 4E 05 F1 | 	add	fp, #32
0b958     A7 22 02 FB | 	rdlong	local03, fp
0b95c     09 22 66 F0 | 	shl	local03, #9
0b960     F2 22 02 F1 | 	add	local03, objptr
0b964     0C 4E 85 F1 | 	sub	fp, #12
0b968     A7 20 02 FB | 	rdlong	local02, fp
0b96c     10 1F 02 F6 | 	mov	local01, local02
0b970     01 1E 66 F0 | 	shl	local01, #1
0b974     11 1F 02 F1 | 	add	local01, local03
0b978     10 4E 05 F1 | 	add	fp, #16
0b97c     A7 12 02 FB | 	rdlong	arg01, fp
0b980     01 20 66 F0 | 	shl	local02, #1
0b984     10 13 02 F1 | 	add	arg01, local02
0b988     09 FB E1 FA | 	rdword	result1, arg01
0b98c     0F FB 51 FC | 	wrword	result1, local01
0b990     10 4E 85 F1 | 	sub	fp, #16
0b994     A7 22 02 FB | 	rdlong	local03, fp
0b998     01 22 06 F1 | 	add	local03, #1
0b99c     A7 22 62 FC | 	wrlong	local03, fp
0b9a0     14 4E 85 F1 | 	sub	fp, #20
0b9a4     00 23 56 F2 | 	cmps	local03, #256 wc
0b9a8     A8 FF 9F CD |  if_b	jmp	#LR__0958
0b9ac                 | LR__0959
0b9ac     2C 00 00 FF 
0b9b0     CC E4 85 F1 | 	sub	objptr, ##22732
0b9b4     C0 08 90 FD | 	jmp	#LR__0971
0b9b8                 | LR__0960
0b9b8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0b9b8     14 4E 05 F1 | 	add	fp, #20
0b9bc     A7 00 68 FC | 	wrlong	#0, fp
0b9c0     14 4E 85 F1 | 	sub	fp, #20
0b9c4                 | LR__0961
0b9c4     20 4E 05 F1 | 	add	fp, #32
0b9c8     A7 22 02 FB | 	rdlong	local03, fp
0b9cc     09 22 66 F0 | 	shl	local03, #9
0b9d0     2C 00 00 FF 
0b9d4     CC E4 05 F1 | 	add	objptr, ##22732
0b9d8     F2 22 02 F1 | 	add	local03, objptr
0b9dc     0C 4E 85 F1 | 	sub	fp, #12
0b9e0     A7 20 02 FB | 	rdlong	local02, fp
0b9e4     10 1F 02 F6 | 	mov	local01, local02
0b9e8     01 1E 66 F0 | 	shl	local01, #1
0b9ec     11 1F 02 F1 | 	add	local01, local03
0b9f0     10 4E 05 F1 | 	add	fp, #16
0b9f4     A7 12 02 FB | 	rdlong	arg01, fp
0b9f8     24 4E 85 F1 | 	sub	fp, #36
0b9fc     01 20 66 F0 | 	shl	local02, #1
0ba00     10 13 02 F1 | 	add	arg01, local02
0ba04     2C 00 00 FF 
0ba08     CC E4 85 F1 | 	sub	objptr, ##22732
0ba0c     34 D4 B0 FD | 	call	#_psdpeek
0ba10     0F FB 51 FC | 	wrword	result1, local01
0ba14     14 4E 05 F1 | 	add	fp, #20
0ba18     A7 24 02 FB | 	rdlong	local04, fp
0ba1c     01 24 06 F1 | 	add	local04, #1
0ba20     A7 24 62 FC | 	wrlong	local04, fp
0ba24     14 4E 85 F1 | 	sub	fp, #20
0ba28     00 25 56 F2 | 	cmps	local04, #256 wc
0ba2c     94 FF 9F CD |  if_b	jmp	#LR__0961
0ba30                 | '     return   
0ba30     44 08 90 FD | 	jmp	#LR__0971
0ba34                 | LR__0962
0ba34                 | ' 
0ba34                 | ' if numpar=5 then    'simple adsr
0ba34     10 4E 05 F1 | 	add	fp, #16
0ba38     A7 22 02 FB | 	rdlong	local03, fp
0ba3c     10 4E 85 F1 | 	sub	fp, #16
0ba40     05 22 0E F2 | 	cmp	local03, #5 wz
0ba44     30 08 90 5D |  if_ne	jmp	#LR__0970
0ba48     7C E6 BF FD | 	call	#_pop
0ba4c     FF 1E 02 F6 | 	mov	local01, result3
0ba50     5C 4E 05 F1 | 	add	fp, #92
0ba54     A7 FA 61 FC | 	wrlong	result1, fp
0ba58     04 4E 05 F1 | 	add	fp, #4
0ba5c     A7 FC 61 FC | 	wrlong	result2, fp
0ba60     04 4E 05 F1 | 	add	fp, #4
0ba64     A7 1E 62 FC | 	wrlong	local01, fp
0ba68     08 4E 85 F1 | 	sub	fp, #8
0ba6c     A7 12 02 F6 | 	mov	arg01, fp
0ba70     5C 4E 85 F1 | 	sub	fp, #92
0ba74     50 70 B0 FD | 	call	#_converttofloat
0ba78     FD 22 02 F6 | 	mov	local03, result1
0ba7c     34 4E 05 F1 | 	add	fp, #52
0ba80     A7 22 62 FC | 	wrlong	local03, fp
0ba84     34 4E 85 F1 | 	sub	fp, #52
0ba88     3C E6 BF FD | 	call	#_pop
0ba8c     FF 1E 02 F6 | 	mov	local01, result3
0ba90     5C 4E 05 F1 | 	add	fp, #92
0ba94     A7 FA 61 FC | 	wrlong	result1, fp
0ba98     04 4E 05 F1 | 	add	fp, #4
0ba9c     A7 FC 61 FC | 	wrlong	result2, fp
0baa0     04 4E 05 F1 | 	add	fp, #4
0baa4     A7 1E 62 FC | 	wrlong	local01, fp
0baa8     08 4E 85 F1 | 	sub	fp, #8
0baac     A7 12 02 F6 | 	mov	arg01, fp
0bab0     5C 4E 85 F1 | 	sub	fp, #92
0bab4     10 70 B0 FD | 	call	#_converttofloat
0bab8     FD 22 02 F6 | 	mov	local03, result1
0babc     30 4E 05 F1 | 	add	fp, #48
0bac0     A7 22 62 FC | 	wrlong	local03, fp
0bac4     30 4E 85 F1 | 	sub	fp, #48
0bac8     FC E5 BF FD | 	call	#_pop
0bacc     FF 1E 02 F6 | 	mov	local01, result3
0bad0     5C 4E 05 F1 | 	add	fp, #92
0bad4     A7 FA 61 FC | 	wrlong	result1, fp
0bad8     04 4E 05 F1 | 	add	fp, #4
0badc     A7 FC 61 FC | 	wrlong	result2, fp
0bae0     04 4E 05 F1 | 	add	fp, #4
0bae4     A7 1E 62 FC | 	wrlong	local01, fp
0bae8     08 4E 85 F1 | 	sub	fp, #8
0baec     A7 12 02 F6 | 	mov	arg01, fp
0baf0     5C 4E 85 F1 | 	sub	fp, #92
0baf4     D0 6F B0 FD | 	call	#_converttofloat
0baf8     FD 22 02 F6 | 	mov	local03, result1
0bafc     2C 4E 05 F1 | 	add	fp, #44
0bb00     A7 22 62 FC | 	wrlong	local03, fp
0bb04     2C 4E 85 F1 | 	sub	fp, #44
0bb08     BC E5 BF FD | 	call	#_pop
0bb0c     FF 1E 02 F6 | 	mov	local01, result3
0bb10     5C 4E 05 F1 | 	add	fp, #92
0bb14     A7 FA 61 FC | 	wrlong	result1, fp
0bb18     04 4E 05 F1 | 	add	fp, #4
0bb1c     A7 FC 61 FC | 	wrlong	result2, fp
0bb20     04 4E 05 F1 | 	add	fp, #4
0bb24     A7 1E 62 FC | 	wrlong	local01, fp
0bb28     08 4E 85 F1 | 	sub	fp, #8
0bb2c     A7 12 02 F6 | 	mov	arg01, fp
0bb30     5C 4E 85 F1 | 	sub	fp, #92
0bb34     90 6F B0 FD | 	call	#_converttofloat
0bb38     FD 22 02 F6 | 	mov	local03, result1
0bb3c     28 4E 05 F1 | 	add	fp, #40
0bb40     A7 22 62 FC | 	wrlong	local03, fp
0bb44     28 4E 85 F1 | 	sub	fp, #40
0bb48     7C E5 BF FD | 	call	#_pop
0bb4c     FF 1E 02 F6 | 	mov	local01, result3
0bb50     5C 4E 05 F1 | 	add	fp, #92
0bb54     A7 FA 61 FC | 	wrlong	result1, fp
0bb58     04 4E 05 F1 | 	add	fp, #4
0bb5c     A7 FC 61 FC | 	wrlong	result2, fp
0bb60     04 4E 05 F1 | 	add	fp, #4
0bb64     A7 1E 62 FC | 	wrlong	local01, fp
0bb68     08 4E 85 F1 | 	sub	fp, #8
0bb6c     A7 12 02 F6 | 	mov	arg01, fp
0bb70     5C 4E 85 F1 | 	sub	fp, #92
0bb74     A4 6E B0 FD | 	call	#_converttoint
0bb78     20 4E 05 F1 | 	add	fp, #32
0bb7c     A7 FA 61 FC | 	wrlong	result1, fp
0bb80                 | ' 
0bb80                 | '   t1=pop() : rr=converttofloat(t1)
0bb80                 | '   t1=pop() : ss=converttofloat(t1) 
0bb80                 | '   t1=pop() : dd=converttofloat(t1)
0bb80                 | '   t1=pop() : aa=converttofloat(t1)
0bb80                 | '   t1=pop() : channel=converttoint(t1)
0bb80                 | '   if ss<0.0 then ss=0.0 
0bb80     10 4E 05 F1 | 	add	fp, #16
0bb84     A7 12 02 FB | 	rdlong	arg01, fp
0bb88     30 4E 85 F1 | 	sub	fp, #48
0bb8c     00 14 06 F6 | 	mov	arg02, #0
0bb90     01 16 06 F6 | 	mov	arg03, #1
0bb94     10 37 B1 FD | 	call	#__system___float_cmp
0bb98     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb9c     30 4E 05 C1 |  if_b	add	fp, #48
0bba0     A7 00 68 CC |  if_b	wrlong	#0, fp
0bba4     30 4E 85 C1 |  if_b	sub	fp, #48
0bba8                 | '   if ss>1.0 then ss=1.0
0bba8     30 4E 05 F1 | 	add	fp, #48
0bbac     A7 12 02 FB | 	rdlong	arg01, fp
0bbb0     30 4E 85 F1 | 	sub	fp, #48
0bbb4     00 C0 1F FF 
0bbb8     00 14 06 F6 | 	mov	arg02, ##1065353216
0bbbc     01 16 66 F6 | 	neg	arg03, #1
0bbc0     E4 36 B1 FD | 	call	#__system___float_cmp
0bbc4     01 FA 55 F2 | 	cmps	result1, #1 wc
0bbc8     30 4E 05 31 |  if_ae	add	fp, #48
0bbcc     00 C0 9F 3F 
0bbd0     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0bbd4     30 4E 85 31 |  if_ae	sub	fp, #48
0bbd8     28 4E 05 F1 | 	add	fp, #40
0bbdc     A7 12 02 FB | 	rdlong	arg01, fp
0bbe0     04 4E 05 F1 | 	add	fp, #4
0bbe4     A7 14 02 FB | 	rdlong	arg02, fp
0bbe8     2C 4E 85 F1 | 	sub	fp, #44
0bbec     B4 2E B1 FD | 	call	#__system___float_add
0bbf0     FD 12 02 F6 | 	mov	arg01, result1
0bbf4     34 4E 05 F1 | 	add	fp, #52
0bbf8     A7 14 02 FB | 	rdlong	arg02, fp
0bbfc     34 4E 85 F1 | 	sub	fp, #52
0bc00     A0 2E B1 FD | 	call	#__system___float_add
0bc04     4C 4E 05 F1 | 	add	fp, #76
0bc08     A7 FA 61 FC | 	wrlong	result1, fp
0bc0c     FD 14 02 F6 | 	mov	arg02, result1
0bc10     4C 4E 85 F1 | 	sub	fp, #76
0bc14     00 C0 21 FF 
0bc18     00 12 06 F6 | 	mov	arg01, ##1132462080
0bc1c     58 34 B1 FD | 	call	#__system___float_div
0bc20     50 4E 05 F1 | 	add	fp, #80
0bc24     A7 FA 61 FC | 	wrlong	result1, fp
0bc28     28 4E 85 F1 | 	sub	fp, #40
0bc2c     A7 12 02 FB | 	rdlong	arg01, fp
0bc30     FD 14 02 F6 | 	mov	arg02, result1
0bc34     28 4E 85 F1 | 	sub	fp, #40
0bc38     38 32 B1 FD | 	call	#__system___float_mul
0bc3c     FD 12 02 F6 | 	mov	arg01, result1
0bc40     01 14 06 F6 | 	mov	arg02, #1
0bc44     F4 36 B1 FD | 	call	#__system___float_tointeger
0bc48     A7 FA 61 FC | 	wrlong	result1, fp
0bc4c     2C 4E 05 F1 | 	add	fp, #44
0bc50     A7 12 02 FB | 	rdlong	arg01, fp
0bc54     24 4E 05 F1 | 	add	fp, #36
0bc58     A7 14 02 FB | 	rdlong	arg02, fp
0bc5c     50 4E 85 F1 | 	sub	fp, #80
0bc60     10 32 B1 FD | 	call	#__system___float_mul
0bc64     FD 12 02 F6 | 	mov	arg01, result1
0bc68     01 14 06 F6 | 	mov	arg02, #1
0bc6c     CC 36 B1 FD | 	call	#__system___float_tointeger
0bc70     04 4E 05 F1 | 	add	fp, #4
0bc74     A7 FA 61 FC | 	wrlong	result1, fp
0bc78     30 4E 05 F1 | 	add	fp, #48
0bc7c     A7 12 02 FB | 	rdlong	arg01, fp
0bc80     1C 4E 05 F1 | 	add	fp, #28
0bc84     A7 14 02 FB | 	rdlong	arg02, fp
0bc88     50 4E 85 F1 | 	sub	fp, #80
0bc8c     E4 31 B1 FD | 	call	#__system___float_mul
0bc90     FD 12 02 F6 | 	mov	arg01, result1
0bc94     01 14 06 F6 | 	mov	arg02, #1
0bc98     A0 36 B1 FD | 	call	#__system___float_tointeger
0bc9c     FD 22 02 F6 | 	mov	local03, result1
0bca0     0C 4E 05 F1 | 	add	fp, #12
0bca4     A7 22 62 FC | 	wrlong	local03, fp
0bca8     0C 4E 85 F1 | 	sub	fp, #12
0bcac                 | '   fulltime=aa+dd+rr
0bcac                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0bcac     00 12 06 F6 | 	mov	arg01, #0
0bcb0     D4 5F B1 FD | 	call	#__system___getiolock_0474
0bcb4     FD 12 02 F6 | 	mov	arg01, result1
0bcb8     3C 06 B1 FD | 	call	#__system___lockmem
0bcbc     A7 14 02 FB | 	rdlong	arg02, fp
0bcc0     00 12 06 F6 | 	mov	arg01, #0
0bcc4     00 16 06 F6 | 	mov	arg03, #0
0bcc8     0A 18 06 F6 | 	mov	arg04, #10
0bccc     70 13 B1 FD | 	call	#__system___basic_print_integer
0bcd0     00 12 06 F6 | 	mov	arg01, #0
0bcd4     09 14 06 F6 | 	mov	arg02, #9
0bcd8     00 16 06 F6 | 	mov	arg03, #0
0bcdc     C4 12 B1 FD | 	call	#__system___basic_print_char
0bce0     04 4E 05 F1 | 	add	fp, #4
0bce4     A7 14 02 FB | 	rdlong	arg02, fp
0bce8     04 4E 85 F1 | 	sub	fp, #4
0bcec     00 12 06 F6 | 	mov	arg01, #0
0bcf0     00 16 06 F6 | 	mov	arg03, #0
0bcf4     0A 18 06 F6 | 	mov	arg04, #10
0bcf8     44 13 B1 FD | 	call	#__system___basic_print_integer
0bcfc     00 12 06 F6 | 	mov	arg01, #0
0bd00     09 14 06 F6 | 	mov	arg02, #9
0bd04     00 16 06 F6 | 	mov	arg03, #0
0bd08     98 12 B1 FD | 	call	#__system___basic_print_char
0bd0c     0C 4E 05 F1 | 	add	fp, #12
0bd10     A7 14 02 FB | 	rdlong	arg02, fp
0bd14     0C 4E 85 F1 | 	sub	fp, #12
0bd18     00 12 06 F6 | 	mov	arg01, #0
0bd1c     00 16 06 F6 | 	mov	arg03, #0
0bd20     0A 18 06 F6 | 	mov	arg04, #10
0bd24     18 13 B1 FD | 	call	#__system___basic_print_integer
0bd28     00 12 06 F6 | 	mov	arg01, #0
0bd2c     09 14 06 F6 | 	mov	arg02, #9
0bd30     00 16 06 F6 | 	mov	arg03, #0
0bd34     6C 12 B1 FD | 	call	#__system___basic_print_char
0bd38     A7 14 02 FB | 	rdlong	arg02, fp
0bd3c     04 4E 05 F1 | 	add	fp, #4
0bd40     A7 22 02 FB | 	rdlong	local03, fp
0bd44     11 15 02 F1 | 	add	arg02, local03
0bd48     08 4E 05 F1 | 	add	fp, #8
0bd4c     A7 22 02 FB | 	rdlong	local03, fp
0bd50     0C 4E 85 F1 | 	sub	fp, #12
0bd54     11 15 02 F1 | 	add	arg02, local03
0bd58     00 12 06 F6 | 	mov	arg01, #0
0bd5c     00 16 06 F6 | 	mov	arg03, #0
0bd60     0A 18 06 F6 | 	mov	arg04, #10
0bd64     D8 12 B1 FD | 	call	#__system___basic_print_integer
0bd68     00 12 06 F6 | 	mov	arg01, #0
0bd6c     0A 14 06 F6 | 	mov	arg02, #10
0bd70     00 16 06 F6 | 	mov	arg03, #0
0bd74     2C 12 B1 FD | 	call	#__system___basic_print_char
0bd78     00 12 06 F6 | 	mov	arg01, #0
0bd7c     08 5F B1 FD | 	call	#__system___getiolock_0474
0bd80     FD 00 68 FC | 	wrlong	#0, result1
0bd84     F8 BF 23 FF 
0bd88     00 22 06 F6 | 	mov	local03, ##1199566848
0bd8c     A7 12 02 FB | 	rdlong	arg01, fp
0bd90     09 13 52 F6 | 	abs	arg01, arg01 wc
0bd94     1F 26 C6 C9 |  if_b	decod	local05, #31
0bd98     00 26 06 36 |  if_ae	mov	local05, #0
0bd9c     D0 2C B1 FD | 	call	#__system___float_fromuns
0bda0     13 FB 61 F5 | 	xor	result1, local05
0bda4     FD 14 02 F6 | 	mov	arg02, result1
0bda8     11 13 02 F6 | 	mov	arg01, local03
0bdac     C8 32 B1 FD | 	call	#__system___float_div
0bdb0     54 4E 05 F1 | 	add	fp, #84
0bdb4     A7 FA 61 FC | 	wrlong	result1, fp
0bdb8     F8 BF 23 FF 
0bdbc     00 22 06 F6 | 	mov	local03, ##1199566848
0bdc0     24 4E 85 F1 | 	sub	fp, #36
0bdc4     A7 14 02 FB | 	rdlong	arg02, fp
0bdc8     30 4E 85 F1 | 	sub	fp, #48
0bdcc     F8 BF 23 FF 
0bdd0     00 12 06 F6 | 	mov	arg01, ##1199566848
0bdd4     9C 30 B1 FD | 	call	#__system___float_mul
0bdd8     FD 14 02 F6 | 	mov	arg02, result1
0bddc     11 13 02 F6 | 	mov	arg01, local03
0bde0     1F 14 E6 F4 | 	bitnot	arg02, #31
0bde4     BC 2C B1 FD | 	call	#__system___float_add
0bde8     FD 22 02 F6 | 	mov	local03, result1
0bdec     04 4E 05 F1 | 	add	fp, #4
0bdf0     A7 12 02 FB | 	rdlong	arg01, fp
0bdf4     04 4E 85 F1 | 	sub	fp, #4
0bdf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0bdfc     1F 26 C6 C9 |  if_b	decod	local05, #31
0be00     00 26 06 36 |  if_ae	mov	local05, #0
0be04     68 2C B1 FD | 	call	#__system___float_fromuns
0be08     13 FB 61 F5 | 	xor	result1, local05
0be0c     FD 14 02 F6 | 	mov	arg02, result1
0be10     11 13 02 F6 | 	mov	arg01, local03
0be14     60 32 B1 FD | 	call	#__system___float_div
0be18     2C 4E 05 F1 | 	add	fp, #44
0be1c     A7 FA 61 FC | 	wrlong	result1, fp
0be20     04 4E 05 F1 | 	add	fp, #4
0be24     A7 14 02 FB | 	rdlong	arg02, fp
0be28     30 4E 85 F1 | 	sub	fp, #48
0be2c     F8 BF 23 FF 
0be30     00 12 06 F6 | 	mov	arg01, ##1199566848
0be34     3C 30 B1 FD | 	call	#__system___float_mul
0be38     FD 22 02 F6 | 	mov	local03, result1
0be3c     0C 4E 05 F1 | 	add	fp, #12
0be40     A7 12 02 FB | 	rdlong	arg01, fp
0be44     0C 4E 85 F1 | 	sub	fp, #12
0be48     09 13 52 F6 | 	abs	arg01, arg01 wc
0be4c     1F 26 C6 C9 |  if_b	decod	local05, #31
0be50     00 26 06 36 |  if_ae	mov	local05, #0
0be54     18 2C B1 FD | 	call	#__system___float_fromuns
0be58     13 FB 61 F5 | 	xor	result1, local05
0be5c     FD 14 02 F6 | 	mov	arg02, result1
0be60     11 13 02 F6 | 	mov	arg01, local03
0be64     10 32 B1 FD | 	call	#__system___float_div
0be68     FD 22 02 F6 | 	mov	local03, result1
0be6c     58 4E 05 F1 | 	add	fp, #88
0be70     A7 22 62 FC | 	wrlong	local03, fp
0be74     58 4E 85 F1 | 	sub	fp, #88
0be78                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0be78     00 12 06 F6 | 	mov	arg01, #0
0be7c     08 5E B1 FD | 	call	#__system___getiolock_0474
0be80     FD 12 02 F6 | 	mov	arg01, result1
0be84     70 04 B1 FD | 	call	#__system___lockmem
0be88     54 4E 05 F1 | 	add	fp, #84
0be8c     A7 14 02 FB | 	rdlong	arg02, fp
0be90     54 4E 85 F1 | 	sub	fp, #84
0be94     00 12 06 F6 | 	mov	arg01, #0
0be98     00 16 06 F6 | 	mov	arg03, #0
0be9c     23 18 06 F6 | 	mov	arg04, #35
0bea0     E8 35 B1 FD | 	call	#__system___basic_print_float
0bea4     00 12 06 F6 | 	mov	arg01, #0
0bea8     09 14 06 F6 | 	mov	arg02, #9
0beac     00 16 06 F6 | 	mov	arg03, #0
0beb0     F0 10 B1 FD | 	call	#__system___basic_print_char
0beb4     2C 4E 05 F1 | 	add	fp, #44
0beb8     A7 14 02 FB | 	rdlong	arg02, fp
0bebc     2C 4E 85 F1 | 	sub	fp, #44
0bec0     00 12 06 F6 | 	mov	arg01, #0
0bec4     00 16 06 F6 | 	mov	arg03, #0
0bec8     23 18 06 F6 | 	mov	arg04, #35
0becc     BC 35 B1 FD | 	call	#__system___basic_print_float
0bed0     00 12 06 F6 | 	mov	arg01, #0
0bed4     09 14 06 F6 | 	mov	arg02, #9
0bed8     00 16 06 F6 | 	mov	arg03, #0
0bedc     C4 10 B1 FD | 	call	#__system___basic_print_char
0bee0     58 4E 05 F1 | 	add	fp, #88
0bee4     A7 14 02 FB | 	rdlong	arg02, fp
0bee8     58 4E 85 F1 | 	sub	fp, #88
0beec     00 12 06 F6 | 	mov	arg01, #0
0bef0     00 16 06 F6 | 	mov	arg03, #0
0bef4     23 18 06 F6 | 	mov	arg04, #35
0bef8     90 35 B1 FD | 	call	#__system___basic_print_float
0befc     00 12 06 F6 | 	mov	arg01, #0
0bf00     0A 14 06 F6 | 	mov	arg02, #10
0bf04     00 16 06 F6 | 	mov	arg03, #0
0bf08     98 10 B1 FD | 	call	#__system___basic_print_char
0bf0c     00 12 06 F6 | 	mov	arg01, #0
0bf10     74 5D B1 FD | 	call	#__system___getiolock_0474
0bf14     FD 00 68 FC | 	wrlong	#0, result1
0bf18     20 4E 05 F1 | 	add	fp, #32
0bf1c     A7 28 02 FB | 	rdlong	local06, fp
0bf20     20 4E 85 F1 | 	sub	fp, #32
0bf24     01 28 66 F0 | 	shl	local06, #1
0bf28     7B 00 00 FF 
0bf2c     78 E4 05 F1 | 	add	objptr, ##63096
0bf30     F2 28 02 F1 | 	add	local06, objptr
0bf34     A7 2A 02 FB | 	rdlong	local07, fp
0bf38     04 4E 05 F1 | 	add	fp, #4
0bf3c     A7 22 02 FB | 	rdlong	local03, fp
0bf40     11 2B 02 F1 | 	add	local07, local03
0bf44     14 2B 52 FC | 	wrword	local07, local06
0bf48     24 4E 05 F1 | 	add	fp, #36
0bf4c     A7 00 68 FC | 	wrlong	#0, fp
0bf50                 | '   suspoints(channel)=a+d
0bf50                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0bf50     14 4E 85 F1 | 	sub	fp, #20
0bf54     A7 00 68 FC | 	wrlong	#0, fp
0bf58     14 4E 85 F1 | 	sub	fp, #20
0bf5c     A7 2C 02 FB | 	rdlong	local08, fp
0bf60     7B 00 00 FF 
0bf64     78 E4 85 F1 | 	sub	objptr, ##63096
0bf68                 | LR__0963
0bf68     14 4E 05 F1 | 	add	fp, #20
0bf6c     A7 22 02 FB | 	rdlong	local03, fp
0bf70     14 4E 85 F1 | 	sub	fp, #20
0bf74     16 23 52 F2 | 	cmps	local03, local08 wc
0bf78     80 00 90 3D |  if_ae	jmp	#LR__0964
0bf7c     20 4E 05 F1 | 	add	fp, #32
0bf80     A7 28 02 FB | 	rdlong	local06, fp
0bf84     09 28 66 F0 | 	shl	local06, #9
0bf88     2C 00 00 FF 
0bf8c     CC E4 05 F1 | 	add	objptr, ##22732
0bf90     F2 28 02 F1 | 	add	local06, objptr
0bf94     0C 4E 85 F1 | 	sub	fp, #12
0bf98     A7 22 02 FB | 	rdlong	local03, fp
0bf9c     01 22 66 F0 | 	shl	local03, #1
0bfa0     14 23 02 F1 | 	add	local03, local06
0bfa4     14 4E 05 F1 | 	add	fp, #20
0bfa8     A7 12 02 FB | 	rdlong	arg01, fp
0bfac     28 4E 85 F1 | 	sub	fp, #40
0bfb0     2C 00 00 FF 
0bfb4     CC E4 85 F1 | 	sub	objptr, ##22732
0bfb8     01 14 06 F6 | 	mov	arg02, #1
0bfbc     7C 33 B1 FD | 	call	#__system___float_tointeger
0bfc0     11 FB 51 FC | 	wrword	result1, local03
0bfc4     28 4E 05 F1 | 	add	fp, #40
0bfc8     A7 12 02 FB | 	rdlong	arg01, fp
0bfcc     2C 4E 05 F1 | 	add	fp, #44
0bfd0     A7 14 02 FB | 	rdlong	arg02, fp
0bfd4     54 4E 85 F1 | 	sub	fp, #84
0bfd8     C8 2A B1 FD | 	call	#__system___float_add
0bfdc     28 4E 05 F1 | 	add	fp, #40
0bfe0     A7 FA 61 FC | 	wrlong	result1, fp
0bfe4     14 4E 85 F1 | 	sub	fp, #20
0bfe8     A7 20 02 FB | 	rdlong	local02, fp
0bfec     01 20 06 F1 | 	add	local02, #1
0bff0     A7 20 62 FC | 	wrlong	local02, fp
0bff4     14 4E 85 F1 | 	sub	fp, #20
0bff8     6C FF 9F FD | 	jmp	#LR__0963
0bffc                 | LR__0964
0bffc                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0bffc     A7 22 02 FB | 	rdlong	local03, fp
0c000     14 4E 05 F1 | 	add	fp, #20
0c004     A7 22 62 FC | 	wrlong	local03, fp
0c008     14 4E 85 F1 | 	sub	fp, #20
0c00c     A7 2E 02 FB | 	rdlong	local09, fp
0c010     04 4E 05 F1 | 	add	fp, #4
0c014     A7 22 02 FB | 	rdlong	local03, fp
0c018     04 4E 85 F1 | 	sub	fp, #4
0c01c     11 2F 02 F1 | 	add	local09, local03
0c020                 | LR__0965
0c020     14 4E 05 F1 | 	add	fp, #20
0c024     A7 22 02 FB | 	rdlong	local03, fp
0c028     14 4E 85 F1 | 	sub	fp, #20
0c02c     17 23 52 F2 | 	cmps	local03, local09 wc
0c030     A8 00 90 3D |  if_ae	jmp	#LR__0966
0c034     20 4E 05 F1 | 	add	fp, #32
0c038     A7 2C 02 FB | 	rdlong	local08, fp
0c03c     09 2C 66 F0 | 	shl	local08, #9
0c040     2C 00 00 FF 
0c044     CC E4 05 F1 | 	add	objptr, ##22732
0c048     F2 2C 02 F1 | 	add	local08, objptr
0c04c     0C 4E 85 F1 | 	sub	fp, #12
0c050     A7 2A 02 FB | 	rdlong	local07, fp
0c054     01 2A 66 F0 | 	shl	local07, #1
0c058     16 2B 02 F1 | 	add	local07, local08
0c05c     14 4E 05 F1 | 	add	fp, #20
0c060     A7 12 02 FB | 	rdlong	arg01, fp
0c064     28 4E 85 F1 | 	sub	fp, #40
0c068     2C 00 00 FF 
0c06c     CC E4 85 F1 | 	sub	objptr, ##22732
0c070     01 14 06 F6 | 	mov	arg02, #1
0c074     C4 32 B1 FD | 	call	#__system___float_tointeger
0c078     15 FB 51 FC | 	wrword	result1, local07
0c07c     28 4E 05 F1 | 	add	fp, #40
0c080     A7 12 02 FB | 	rdlong	arg01, fp
0c084     04 4E 05 F1 | 	add	fp, #4
0c088     A7 14 02 FB | 	rdlong	arg02, fp
0c08c     2C 4E 85 F1 | 	sub	fp, #44
0c090     1F 14 E6 F4 | 	bitnot	arg02, #31
0c094     0C 2A B1 FD | 	call	#__system___float_add
0c098     28 4E 05 F1 | 	add	fp, #40
0c09c     A7 FA 61 FC | 	wrlong	result1, fp
0c0a0     28 4E 85 F1 | 	sub	fp, #40
0c0a4     FD 12 02 F6 | 	mov	arg01, result1
0c0a8     00 14 06 F6 | 	mov	arg02, #0
0c0ac     01 16 06 F6 | 	mov	arg03, #1
0c0b0     F4 31 B1 FD | 	call	#__system___float_cmp
0c0b4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c0b8     28 4E 05 C1 |  if_b	add	fp, #40
0c0bc     A7 00 68 CC |  if_b	wrlong	#0, fp
0c0c0     28 4E 85 C1 |  if_b	sub	fp, #40
0c0c4     14 4E 05 F1 | 	add	fp, #20
0c0c8     A7 20 02 FB | 	rdlong	local02, fp
0c0cc     01 20 06 F1 | 	add	local02, #1
0c0d0     A7 20 62 FC | 	wrlong	local02, fp
0c0d4     14 4E 85 F1 | 	sub	fp, #20
0c0d8     44 FF 9F FD | 	jmp	#LR__0965
0c0dc                 | LR__0966
0c0dc                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0c0dc     A7 22 02 FB | 	rdlong	local03, fp
0c0e0     04 4E 05 F1 | 	add	fp, #4
0c0e4     A7 2E 02 FB | 	rdlong	local09, fp
0c0e8     17 23 02 F1 | 	add	local03, local09
0c0ec     10 4E 05 F1 | 	add	fp, #16
0c0f0     A7 22 62 FC | 	wrlong	local03, fp
0c0f4     14 4E 85 F1 | 	sub	fp, #20
0c0f8                 | LR__0967
0c0f8     14 4E 05 F1 | 	add	fp, #20
0c0fc     A7 28 02 FB | 	rdlong	local06, fp
0c100     14 4E 85 F1 | 	sub	fp, #20
0c104     00 29 56 F2 | 	cmps	local06, #256 wc
0c108     A8 00 90 3D |  if_ae	jmp	#LR__0968
0c10c     20 4E 05 F1 | 	add	fp, #32
0c110     A7 2E 02 FB | 	rdlong	local09, fp
0c114     09 2E 66 F0 | 	shl	local09, #9
0c118     2C 00 00 FF 
0c11c     CC E4 05 F1 | 	add	objptr, ##22732
0c120     F2 2E 02 F1 | 	add	local09, objptr
0c124     0C 4E 85 F1 | 	sub	fp, #12
0c128     A7 2C 02 FB | 	rdlong	local08, fp
0c12c     01 2C 66 F0 | 	shl	local08, #1
0c130     17 2D 02 F1 | 	add	local08, local09
0c134     14 4E 05 F1 | 	add	fp, #20
0c138     A7 12 02 FB | 	rdlong	arg01, fp
0c13c     28 4E 85 F1 | 	sub	fp, #40
0c140     2C 00 00 FF 
0c144     CC E4 85 F1 | 	sub	objptr, ##22732
0c148     01 14 06 F6 | 	mov	arg02, #1
0c14c     EC 31 B1 FD | 	call	#__system___float_tointeger
0c150     16 FB 51 FC | 	wrword	result1, local08
0c154     28 4E 05 F1 | 	add	fp, #40
0c158     A7 12 02 FB | 	rdlong	arg01, fp
0c15c     30 4E 05 F1 | 	add	fp, #48
0c160     A7 14 02 FB | 	rdlong	arg02, fp
0c164     58 4E 85 F1 | 	sub	fp, #88
0c168     1F 14 E6 F4 | 	bitnot	arg02, #31
0c16c     34 29 B1 FD | 	call	#__system___float_add
0c170     28 4E 05 F1 | 	add	fp, #40
0c174     A7 FA 61 FC | 	wrlong	result1, fp
0c178     28 4E 85 F1 | 	sub	fp, #40
0c17c     FD 12 02 F6 | 	mov	arg01, result1
0c180     00 14 06 F6 | 	mov	arg02, #0
0c184     01 16 06 F6 | 	mov	arg03, #1
0c188     1C 31 B1 FD | 	call	#__system___float_cmp
0c18c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c190     28 4E 05 C1 |  if_b	add	fp, #40
0c194     A7 00 68 CC |  if_b	wrlong	#0, fp
0c198     28 4E 85 C1 |  if_b	sub	fp, #40
0c19c     14 4E 05 F1 | 	add	fp, #20
0c1a0     A7 2E 02 FB | 	rdlong	local09, fp
0c1a4     01 2E 06 F1 | 	add	local09, #1
0c1a8     A7 2E 62 FC | 	wrlong	local09, fp
0c1ac     14 4E 85 F1 | 	sub	fp, #20
0c1b0     44 FF 9F FD | 	jmp	#LR__0967
0c1b4                 | LR__0968
0c1b4     20 4E 05 F1 | 	add	fp, #32
0c1b8     A7 28 02 FB | 	rdlong	local06, fp
0c1bc     09 28 66 F0 | 	shl	local06, #9
0c1c0     2C 00 00 FF 
0c1c4     CC E4 05 F1 | 	add	objptr, ##22732
0c1c8     F2 28 02 F1 | 	add	local06, objptr
0c1cc     FE 29 06 F1 | 	add	local06, #510
0c1d0     14 01 58 FC | 	wrword	#0, local06
0c1d4                 | '   envbuf(channel,255)=0
0c1d4                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0c1d4     0C 4E 85 F1 | 	sub	fp, #12
0c1d8     A7 00 68 FC | 	wrlong	#0, fp
0c1dc     14 4E 85 F1 | 	sub	fp, #20
0c1e0     2C 00 00 FF 
0c1e4     CC E4 85 F1 | 	sub	objptr, ##22732
0c1e8                 | LR__0969
0c1e8     00 12 06 F6 | 	mov	arg01, #0
0c1ec     98 5A B1 FD | 	call	#__system___getiolock_0474
0c1f0     FD 12 02 F6 | 	mov	arg01, result1
0c1f4     00 01 B1 FD | 	call	#__system___lockmem
0c1f8     20 4E 05 F1 | 	add	fp, #32
0c1fc     A7 2E 02 FB | 	rdlong	local09, fp
0c200     09 2E 66 F0 | 	shl	local09, #9
0c204     2C 00 00 FF 
0c208     CC E4 05 F1 | 	add	objptr, ##22732
0c20c     F2 2E 02 F1 | 	add	local09, objptr
0c210     0C 4E 85 F1 | 	sub	fp, #12
0c214     A7 2C 02 FB | 	rdlong	local08, fp
0c218     14 4E 85 F1 | 	sub	fp, #20
0c21c     01 2C 66 F0 | 	shl	local08, #1
0c220     17 2D 02 F1 | 	add	local08, local09
0c224     16 15 E2 FA | 	rdword	arg02, local08
0c228     00 12 06 F6 | 	mov	arg01, #0
0c22c     00 16 06 F6 | 	mov	arg03, #0
0c230     0A 18 06 F6 | 	mov	arg04, #10
0c234     2C 00 00 FF 
0c238     CC E4 85 F1 | 	sub	objptr, ##22732
0c23c     40 0E B1 FD | 	call	#__system___basic_print_unsigned
0c240     00 12 06 F6 | 	mov	arg01, #0
0c244     09 14 06 F6 | 	mov	arg02, #9
0c248     00 16 06 F6 | 	mov	arg03, #0
0c24c     54 0D B1 FD | 	call	#__system___basic_print_char
0c250     00 12 06 F6 | 	mov	arg01, #0
0c254     30 5A B1 FD | 	call	#__system___getiolock_0474
0c258     FD 00 68 FC | 	wrlong	#0, result1
0c25c     14 4E 05 F1 | 	add	fp, #20
0c260     A7 2E 02 FB | 	rdlong	local09, fp
0c264     01 2E 06 F1 | 	add	local09, #1
0c268     A7 2E 62 FC | 	wrlong	local09, fp
0c26c     14 4E 85 F1 | 	sub	fp, #20
0c270     00 2F 56 F2 | 	cmps	local09, #256 wc
0c274     70 FF 9F CD |  if_b	jmp	#LR__0969
0c278                 | LR__0970
0c278                 | LR__0971
0c278     A7 F0 03 F6 | 	mov	ptra, fp
0c27c     B2 00 A0 FD | 	call	#popregs_
0c280                 | _do_defenv_ret
0c280     2D 00 64 FD | 	ret
0c284                 | 
0c284                 | ' 
0c284                 | ' 
0c284                 | ' sub do_play
0c284                 | _do_play
0c284     05 4A 05 F6 | 	mov	COUNT_, #5
0c288     A8 00 A0 FD | 	call	#pushregs_
0c28c     74 F0 07 F1 | 	add	ptra, #116
0c290     60 4E 05 F1 | 	add	fp, #96
0c294     F5 25 A2 FF 
0c298     A7 AA 68 FC | 	wrlong	##1145825877, fp
0c29c                 | ' speed_coeff=815.6614449376854599406528189911
0c29c                 | ' 
0c29c                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0c29c     5C 4E 85 F1 | 	sub	fp, #92
0c2a0     A7 00 68 FC | 	wrlong	#0, fp
0c2a4     97 18 48 FB | 	callpa	#(@LR__0981-@LR__0980)>>2,fcache_load_ptr_
0c2a8                 | LR__0980
0c2a8     A7 18 02 FB | 	rdlong	arg04, fp
0c2ac     02 18 66 F0 | 	shl	arg04, #2
0c2b0     2C 4E 05 F1 | 	add	fp, #44
0c2b4     A7 18 02 F1 | 	add	arg04, fp
0c2b8     00 00 E0 FF 
0c2bc     0C 01 68 FC | 	wrlong	##-1073741824, arg04
0c2c0     2C 4E 85 F1 | 	sub	fp, #44
0c2c4     A7 1E 02 FB | 	rdlong	local01, fp
0c2c8     01 1E 06 F1 | 	add	local01, #1
0c2cc     A7 1E 62 FC | 	wrlong	local01, fp
0c2d0     09 1E 56 F2 | 	cmps	local01, #9 wc
0c2d4     D0 FF 9F CD |  if_b	jmp	#LR__0980
0c2d8                 | LR__0981
0c2d8     04 4E 85 F1 | 	sub	fp, #4
0c2dc     6A 00 00 FF 
0c2e0     64 E4 05 F1 | 	add	objptr, ##54372
0c2e4     F2 20 02 FB | 	rdlong	local02, objptr
0c2e8     10 23 02 F6 | 	mov	local03, local02
0c2ec     01 22 66 F0 | 	shl	local03, #1
0c2f0     10 23 02 F1 | 	add	local03, local02
0c2f4     02 22 66 F0 | 	shl	local03, #2
0c2f8     03 00 00 FF 
0c2fc     04 E4 85 F1 | 	sub	objptr, ##1540
0c300     F2 22 02 F1 | 	add	local03, objptr
0c304     11 25 02 FB | 	rdlong	local04, local03
0c308     A7 24 62 FC | 	wrlong	local04, fp
0c30c                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0c30c                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0c30c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c30c                 | ' for i=numpar to 1 step -1 
0c30c     04 4E 05 F1 | 	add	fp, #4
0c310     A7 24 62 FC | 	wrlong	local04, fp
0c314     04 4E 85 F1 | 	sub	fp, #4
0c318     67 00 00 FF 
0c31c     60 E4 85 F1 | 	sub	objptr, ##52832
0c320                 | LR__0982
0c320     A4 DD BF FD | 	call	#_pop
0c324     54 4E 05 F1 | 	add	fp, #84
0c328     A7 FA 61 FC | 	wrlong	result1, fp
0c32c     04 4E 05 F1 | 	add	fp, #4
0c330     A7 FC 61 FC | 	wrlong	result2, fp
0c334     04 4E 05 F1 | 	add	fp, #4
0c338     A7 FE 61 FC | 	wrlong	result3, fp
0c33c     58 4E 85 F1 | 	sub	fp, #88
0c340     A7 22 02 FB | 	rdlong	local03, fp
0c344     01 22 86 F1 | 	sub	local03, #1
0c348     02 22 66 F0 | 	shl	local03, #2
0c34c     2C 4E 05 F1 | 	add	fp, #44
0c350     A7 22 02 F1 | 	add	local03, fp
0c354     24 4E 05 F1 | 	add	fp, #36
0c358     A7 26 02 F6 | 	mov	local05, fp
0c35c     13 13 02 F6 | 	mov	arg01, local05
0c360     54 4E 85 F1 | 	sub	fp, #84
0c364     60 67 B0 FD | 	call	#_converttofloat
0c368     11 FB 61 FC | 	wrlong	result1, local03
0c36c     04 4E 05 F1 | 	add	fp, #4
0c370     A7 1E 02 FB | 	rdlong	local01, fp
0c374     01 1E 86 F1 | 	sub	local01, #1
0c378     A7 1E 62 FC | 	wrlong	local01, fp
0c37c     04 4E 85 F1 | 	sub	fp, #4
0c380     01 1E 56 F2 | 	cmps	local01, #1 wc
0c384     98 FF 9F 3D |  if_ae	jmp	#LR__0982
0c388                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0c388     30 4E 05 F1 | 	add	fp, #48
0c38c     A7 12 02 FB | 	rdlong	arg01, fp
0c390     30 4E 85 F1 | 	sub	fp, #48
0c394     00 14 06 F6 | 	mov	arg02, #0
0c398     01 16 06 F6 | 	mov	arg03, #1
0c39c     08 2F B1 FD | 	call	#__system___float_cmp
0c3a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0c3a4     0C 4E 05 C1 |  if_b	add	fp, #12
0c3a8     A7 00 68 CC |  if_b	wrlong	#0, fp
0c3ac     0C 4E 85 C1 |  if_b	sub	fp, #12
0c3b0     20 00 90 CD |  if_b	jmp	#LR__0983
0c3b4     30 4E 05 F1 | 	add	fp, #48
0c3b8     A7 12 02 FB | 	rdlong	arg01, fp
0c3bc     30 4E 85 F1 | 	sub	fp, #48
0c3c0     01 14 06 F6 | 	mov	arg02, #1
0c3c4     74 2F B1 FD | 	call	#__system___float_tointeger
0c3c8     0C 4E 05 F1 | 	add	fp, #12
0c3cc     A7 FA 61 FC | 	wrlong	result1, fp
0c3d0     0C 4E 85 F1 | 	sub	fp, #12
0c3d4                 | LR__0983
0c3d4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0c3d4     34 4E 05 F1 | 	add	fp, #52
0c3d8     A7 12 02 FB | 	rdlong	arg01, fp
0c3dc     34 4E 85 F1 | 	sub	fp, #52
0c3e0     00 14 06 F6 | 	mov	arg02, #0
0c3e4     01 16 06 F6 | 	mov	arg03, #1
0c3e8     BC 2E B1 FD | 	call	#__system___float_cmp
0c3ec     00 FA 55 F2 | 	cmps	result1, #0 wc
0c3f0     40 00 90 3D |  if_ae	jmp	#LR__0984
0c3f4     0C 4E 05 F1 | 	add	fp, #12
0c3f8     A7 20 02 FB | 	rdlong	local02, fp
0c3fc     10 23 02 F6 | 	mov	local03, local02
0c400     01 22 66 F0 | 	shl	local03, #1
0c404     10 23 02 F1 | 	add	local03, local02
0c408     03 22 66 F0 | 	shl	local03, #3
0c40c     34 00 00 FF 
0c410     2C E5 05 F1 | 	add	objptr, ##26924
0c414     F2 22 02 F1 | 	add	local03, objptr
0c418     11 23 02 FB | 	rdlong	local03, local03
0c41c     58 4E 05 F1 | 	add	fp, #88
0c420     A7 22 62 FC | 	wrlong	local03, fp
0c424     64 4E 85 F1 | 	sub	fp, #100
0c428     34 00 00 FF 
0c42c     2C E5 85 F1 | 	sub	objptr, ##26924
0c430     44 00 90 FD | 	jmp	#LR__0985
0c434                 | LR__0984
0c434     34 4E 05 F1 | 	add	fp, #52
0c438     A7 24 02 FB | 	rdlong	local04, fp
0c43c     30 4E 05 F1 | 	add	fp, #48
0c440     A7 24 62 FC | 	wrlong	local04, fp
0c444     58 4E 85 F1 | 	sub	fp, #88
0c448     A7 20 02 FB | 	rdlong	local02, fp
0c44c     10 23 02 F6 | 	mov	local03, local02
0c450     01 22 66 F0 | 	shl	local03, #1
0c454     10 23 02 F1 | 	add	local03, local02
0c458     03 22 66 F0 | 	shl	local03, #3
0c45c     34 00 00 FF 
0c460     2C E5 05 F1 | 	add	objptr, ##26924
0c464     F2 22 02 F1 | 	add	local03, objptr
0c468     0C 4E 85 F1 | 	sub	fp, #12
0c46c     11 25 62 FC | 	wrlong	local04, local03
0c470     34 00 00 FF 
0c474     2C E5 85 F1 | 	sub	objptr, ##26924
0c478                 | LR__0985
0c478                 | ' if params(2)<0 orelse params(2)>16.384 then vol=channels(channel).vol else vol=params(2) : channels(channel).vol=vol
0c478     38 4E 05 F1 | 	add	fp, #56
0c47c     A7 12 02 FB | 	rdlong	arg01, fp
0c480     38 4E 85 F1 | 	sub	fp, #56
0c484     00 14 06 F6 | 	mov	arg02, #0
0c488     01 16 06 F6 | 	mov	arg03, #1
0c48c     18 2E B1 FD | 	call	#__system___float_cmp
0c490     00 FA 55 F2 | 	cmps	result1, #0 wc
0c494     24 00 90 CD |  if_b	jmp	#LR__0986
0c498     38 4E 05 F1 | 	add	fp, #56
0c49c     A7 12 02 FB | 	rdlong	arg01, fp
0c4a0     38 4E 85 F1 | 	sub	fp, #56
0c4a4     89 C1 20 FF 
0c4a8     6F 14 06 F6 | 	mov	arg02, ##1099108975
0c4ac     01 16 66 F6 | 	neg	arg03, #1
0c4b0     F4 2D B1 FD | 	call	#__system___float_cmp
0c4b4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c4b8     44 00 90 CD |  if_b	jmp	#LR__0987
0c4bc                 | LR__0986
0c4bc     0C 4E 05 F1 | 	add	fp, #12
0c4c0     A7 20 02 FB | 	rdlong	local02, fp
0c4c4     10 23 02 F6 | 	mov	local03, local02
0c4c8     01 22 66 F0 | 	shl	local03, #1
0c4cc     10 23 02 F1 | 	add	local03, local02
0c4d0     03 22 66 F0 | 	shl	local03, #3
0c4d4     34 00 00 FF 
0c4d8     2C E5 05 F1 | 	add	objptr, ##26924
0c4dc     F2 22 02 F1 | 	add	local03, objptr
0c4e0     0C 22 06 F1 | 	add	local03, #12
0c4e4     11 23 02 FB | 	rdlong	local03, local03
0c4e8     60 4E 05 F1 | 	add	fp, #96
0c4ec     A7 22 62 FC | 	wrlong	local03, fp
0c4f0     6C 4E 85 F1 | 	sub	fp, #108
0c4f4     34 00 00 FF 
0c4f8     2C E5 85 F1 | 	sub	objptr, ##26924
0c4fc     48 00 90 FD | 	jmp	#LR__0988
0c500                 | LR__0987
0c500     38 4E 05 F1 | 	add	fp, #56
0c504     A7 24 02 FB | 	rdlong	local04, fp
0c508     34 4E 05 F1 | 	add	fp, #52
0c50c     A7 24 62 FC | 	wrlong	local04, fp
0c510     60 4E 85 F1 | 	sub	fp, #96
0c514     A7 20 02 FB | 	rdlong	local02, fp
0c518     10 23 02 F6 | 	mov	local03, local02
0c51c     01 22 66 F0 | 	shl	local03, #1
0c520     10 23 02 F1 | 	add	local03, local02
0c524     03 22 66 F0 | 	shl	local03, #3
0c528     34 00 00 FF 
0c52c     2C E5 05 F1 | 	add	objptr, ##26924
0c530     F2 22 02 F1 | 	add	local03, objptr
0c534     0C 4E 85 F1 | 	sub	fp, #12
0c538     0C 22 06 F1 | 	add	local03, #12
0c53c     11 25 62 FC | 	wrlong	local04, local03
0c540     34 00 00 FF 
0c544     2C E5 85 F1 | 	sub	objptr, ##26924
0c548                 | LR__0988
0c548                 | ' if params(3)<0 orelse params(3)>8.0 then wave=channels(channel).wave else wave=round(params(3)) : channels(channel).wave=wave
0c548     3C 4E 05 F1 | 	add	fp, #60
0c54c     A7 12 02 FB | 	rdlong	arg01, fp
0c550     3C 4E 85 F1 | 	sub	fp, #60
0c554     00 14 06 F6 | 	mov	arg02, #0
0c558     01 16 06 F6 | 	mov	arg03, #1
0c55c     48 2D B1 FD | 	call	#__system___float_cmp
0c560     00 FA 55 F2 | 	cmps	result1, #0 wc
0c564     24 00 90 CD |  if_b	jmp	#LR__0989
0c568     3C 4E 05 F1 | 	add	fp, #60
0c56c     A7 12 02 FB | 	rdlong	arg01, fp
0c570     3C 4E 85 F1 | 	sub	fp, #60
0c574     00 80 20 FF 
0c578     00 14 06 F6 | 	mov	arg02, ##1090519040
0c57c     01 16 66 F6 | 	neg	arg03, #1
0c580     24 2D B1 FD | 	call	#__system___float_cmp
0c584     01 FA 55 F2 | 	cmps	result1, #1 wc
0c588     48 00 90 CD |  if_b	jmp	#LR__0990
0c58c                 | LR__0989
0c58c     0C 4E 05 F1 | 	add	fp, #12
0c590     A7 22 02 FB | 	rdlong	local03, fp
0c594     11 27 02 F6 | 	mov	local05, local03
0c598     01 26 66 F0 | 	shl	local05, #1
0c59c     11 27 02 F1 | 	add	local05, local03
0c5a0     03 26 66 F0 | 	shl	local05, #3
0c5a4     34 00 00 FF 
0c5a8     2C E5 05 F1 | 	add	objptr, ##26924
0c5ac     F2 26 02 F1 | 	add	local05, objptr
0c5b0     04 26 06 F1 | 	add	local05, #4
0c5b4     13 27 C2 FA | 	rdbyte	local05, local05
0c5b8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c5bc     14 4E 05 F1 | 	add	fp, #20
0c5c0     A7 24 62 FC | 	wrlong	local04, fp
0c5c4     20 4E 85 F1 | 	sub	fp, #32
0c5c8     34 00 00 FF 
0c5cc     2C E5 85 F1 | 	sub	objptr, ##26924
0c5d0     54 00 90 FD | 	jmp	#LR__0991
0c5d4                 | LR__0990
0c5d4     3C 4E 05 F1 | 	add	fp, #60
0c5d8     A7 12 02 FB | 	rdlong	arg01, fp
0c5dc     3C 4E 85 F1 | 	sub	fp, #60
0c5e0     01 14 06 F6 | 	mov	arg02, #1
0c5e4     54 2D B1 FD | 	call	#__system___float_tointeger
0c5e8     20 4E 05 F1 | 	add	fp, #32
0c5ec     A7 FA 61 FC | 	wrlong	result1, fp
0c5f0     14 4E 85 F1 | 	sub	fp, #20
0c5f4     A7 20 02 FB | 	rdlong	local02, fp
0c5f8     10 23 02 F6 | 	mov	local03, local02
0c5fc     01 22 66 F0 | 	shl	local03, #1
0c600     10 23 02 F1 | 	add	local03, local02
0c604     03 22 66 F0 | 	shl	local03, #3
0c608     34 00 00 FF 
0c60c     2C E5 05 F1 | 	add	objptr, ##26924
0c610     F2 22 02 F1 | 	add	local03, objptr
0c614     0C 4E 85 F1 | 	sub	fp, #12
0c618     04 22 06 F1 | 	add	local03, #4
0c61c     11 FB 41 FC | 	wrbyte	result1, local03
0c620     34 00 00 FF 
0c624     2C E5 85 F1 | 	sub	objptr, ##26924
0c628                 | LR__0991
0c628                 | ' if params(4)<0 orelse params(4)>8.0 then env=channels(channel).env else env=round(params(4)) : channels(channel).env=env
0c628     40 4E 05 F1 | 	add	fp, #64
0c62c     A7 12 02 FB | 	rdlong	arg01, fp
0c630     40 4E 85 F1 | 	sub	fp, #64
0c634     00 14 06 F6 | 	mov	arg02, #0
0c638     01 16 06 F6 | 	mov	arg03, #1
0c63c     68 2C B1 FD | 	call	#__system___float_cmp
0c640     00 FA 55 F2 | 	cmps	result1, #0 wc
0c644     24 00 90 CD |  if_b	jmp	#LR__0992
0c648     40 4E 05 F1 | 	add	fp, #64
0c64c     A7 12 02 FB | 	rdlong	arg01, fp
0c650     40 4E 85 F1 | 	sub	fp, #64
0c654     00 80 20 FF 
0c658     00 14 06 F6 | 	mov	arg02, ##1090519040
0c65c     01 16 66 F6 | 	neg	arg03, #1
0c660     44 2C B1 FD | 	call	#__system___float_cmp
0c664     01 FA 55 F2 | 	cmps	result1, #1 wc
0c668     48 00 90 CD |  if_b	jmp	#LR__0993
0c66c                 | LR__0992
0c66c     0C 4E 05 F1 | 	add	fp, #12
0c670     A7 22 02 FB | 	rdlong	local03, fp
0c674     11 27 02 F6 | 	mov	local05, local03
0c678     01 26 66 F0 | 	shl	local05, #1
0c67c     11 27 02 F1 | 	add	local05, local03
0c680     03 26 66 F0 | 	shl	local05, #3
0c684     34 00 00 FF 
0c688     2C E5 05 F1 | 	add	objptr, ##26924
0c68c     F2 26 02 F1 | 	add	local05, objptr
0c690     05 26 06 F1 | 	add	local05, #5
0c694     13 27 C2 FA | 	rdbyte	local05, local05
0c698     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c69c     18 4E 05 F1 | 	add	fp, #24
0c6a0     A7 24 62 FC | 	wrlong	local04, fp
0c6a4     24 4E 85 F1 | 	sub	fp, #36
0c6a8     34 00 00 FF 
0c6ac     2C E5 85 F1 | 	sub	objptr, ##26924
0c6b0     54 00 90 FD | 	jmp	#LR__0994
0c6b4                 | LR__0993
0c6b4     40 4E 05 F1 | 	add	fp, #64
0c6b8     A7 12 02 FB | 	rdlong	arg01, fp
0c6bc     40 4E 85 F1 | 	sub	fp, #64
0c6c0     01 14 06 F6 | 	mov	arg02, #1
0c6c4     74 2C B1 FD | 	call	#__system___float_tointeger
0c6c8     24 4E 05 F1 | 	add	fp, #36
0c6cc     A7 FA 61 FC | 	wrlong	result1, fp
0c6d0     18 4E 85 F1 | 	sub	fp, #24
0c6d4     A7 20 02 FB | 	rdlong	local02, fp
0c6d8     10 23 02 F6 | 	mov	local03, local02
0c6dc     01 22 66 F0 | 	shl	local03, #1
0c6e0     10 23 02 F1 | 	add	local03, local02
0c6e4     03 22 66 F0 | 	shl	local03, #3
0c6e8     34 00 00 FF 
0c6ec     2C E5 05 F1 | 	add	objptr, ##26924
0c6f0     F2 22 02 F1 | 	add	local03, objptr
0c6f4     0C 4E 85 F1 | 	sub	fp, #12
0c6f8     05 22 06 F1 | 	add	local03, #5
0c6fc     11 FB 41 FC | 	wrbyte	result1, local03
0c700     34 00 00 FF 
0c704     2C E5 85 F1 | 	sub	objptr, ##26924
0c708                 | LR__0994
0c708                 | ' if params(5)<0 orelse params(5)>1000.0 then slen=channels(channel).length else slen=params(5) : channels(channel).length=slen
0c708     44 4E 05 F1 | 	add	fp, #68
0c70c     A7 12 02 FB | 	rdlong	arg01, fp
0c710     44 4E 85 F1 | 	sub	fp, #68
0c714     00 14 06 F6 | 	mov	arg02, #0
0c718     01 16 06 F6 | 	mov	arg03, #1
0c71c     88 2B B1 FD | 	call	#__system___float_cmp
0c720     00 FA 55 F2 | 	cmps	result1, #0 wc
0c724     24 00 90 CD |  if_b	jmp	#LR__0995
0c728     44 4E 05 F1 | 	add	fp, #68
0c72c     A7 12 02 FB | 	rdlong	arg01, fp
0c730     44 4E 85 F1 | 	sub	fp, #68
0c734     00 3D 22 FF 
0c738     00 14 06 F6 | 	mov	arg02, ##1148846080
0c73c     01 16 66 F6 | 	neg	arg03, #1
0c740     64 2B B1 FD | 	call	#__system___float_cmp
0c744     01 FA 55 F2 | 	cmps	result1, #1 wc
0c748     44 00 90 CD |  if_b	jmp	#LR__0996
0c74c                 | LR__0995
0c74c     0C 4E 05 F1 | 	add	fp, #12
0c750     A7 20 02 FB | 	rdlong	local02, fp
0c754     10 23 02 F6 | 	mov	local03, local02
0c758     01 22 66 F0 | 	shl	local03, #1
0c75c     10 23 02 F1 | 	add	local03, local02
0c760     03 22 66 F0 | 	shl	local03, #3
0c764     34 00 00 FF 
0c768     2C E5 05 F1 | 	add	objptr, ##26924
0c76c     F2 22 02 F1 | 	add	local03, objptr
0c770     08 22 06 F1 | 	add	local03, #8
0c774     11 25 02 FB | 	rdlong	local04, local03
0c778     64 4E 05 F1 | 	add	fp, #100
0c77c     A7 24 62 FC | 	wrlong	local04, fp
0c780     70 4E 85 F1 | 	sub	fp, #112
0c784     34 00 00 FF 
0c788     2C E5 85 F1 | 	sub	objptr, ##26924
0c78c     48 00 90 FD | 	jmp	#LR__0997
0c790                 | LR__0996
0c790     44 4E 05 F1 | 	add	fp, #68
0c794     A7 24 02 FB | 	rdlong	local04, fp
0c798     2C 4E 05 F1 | 	add	fp, #44
0c79c     A7 24 62 FC | 	wrlong	local04, fp
0c7a0     64 4E 85 F1 | 	sub	fp, #100
0c7a4     A7 20 02 FB | 	rdlong	local02, fp
0c7a8     10 23 02 F6 | 	mov	local03, local02
0c7ac     01 22 66 F0 | 	shl	local03, #1
0c7b0     10 23 02 F1 | 	add	local03, local02
0c7b4     03 22 66 F0 | 	shl	local03, #3
0c7b8     34 00 00 FF 
0c7bc     2C E5 05 F1 | 	add	objptr, ##26924
0c7c0     F2 22 02 F1 | 	add	local03, objptr
0c7c4     0C 4E 85 F1 | 	sub	fp, #12
0c7c8     08 22 06 F1 | 	add	local03, #8
0c7cc     11 25 62 FC | 	wrlong	local04, local03
0c7d0     34 00 00 FF 
0c7d4     2C E5 85 F1 | 	sub	objptr, ##26924
0c7d8                 | LR__0997
0c7d8                 | ' if params(6)<0 orelse params(6)>10000.0 then delay=channels(channel).delay else delay=round(params(6)) : channels(channel).delay=delay
0c7d8     48 4E 05 F1 | 	add	fp, #72
0c7dc     A7 12 02 FB | 	rdlong	arg01, fp
0c7e0     48 4E 85 F1 | 	sub	fp, #72
0c7e4     00 14 06 F6 | 	mov	arg02, #0
0c7e8     01 16 06 F6 | 	mov	arg03, #1
0c7ec     B8 2A B1 FD | 	call	#__system___float_cmp
0c7f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0c7f4     24 00 90 CD |  if_b	jmp	#LR__0998
0c7f8     48 4E 05 F1 | 	add	fp, #72
0c7fc     A7 12 02 FB | 	rdlong	arg01, fp
0c800     48 4E 85 F1 | 	sub	fp, #72
0c804     20 0E 23 FF 
0c808     00 14 06 F6 | 	mov	arg02, ##1176256512
0c80c     01 16 66 F6 | 	neg	arg03, #1
0c810     94 2A B1 FD | 	call	#__system___float_cmp
0c814     01 FA 55 F2 | 	cmps	result1, #1 wc
0c818     48 00 90 CD |  if_b	jmp	#LR__0999
0c81c                 | LR__0998
0c81c     0C 4E 05 F1 | 	add	fp, #12
0c820     A7 22 02 FB | 	rdlong	local03, fp
0c824     11 27 02 F6 | 	mov	local05, local03
0c828     01 26 66 F0 | 	shl	local05, #1
0c82c     11 27 02 F1 | 	add	local05, local03
0c830     03 26 66 F0 | 	shl	local05, #3
0c834     34 00 00 FF 
0c838     2C E5 05 F1 | 	add	objptr, ##26924
0c83c     F2 26 02 F1 | 	add	local05, objptr
0c840     06 26 06 F1 | 	add	local05, #6
0c844     13 27 E2 FA | 	rdword	local05, local05
0c848     13 25 32 F9 | 	getword	local04, local05, #0
0c84c     1C 4E 05 F1 | 	add	fp, #28
0c850     A7 24 62 FC | 	wrlong	local04, fp
0c854     28 4E 85 F1 | 	sub	fp, #40
0c858     34 00 00 FF 
0c85c     2C E5 85 F1 | 	sub	objptr, ##26924
0c860     54 00 90 FD | 	jmp	#LR__1000
0c864                 | LR__0999
0c864     48 4E 05 F1 | 	add	fp, #72
0c868     A7 12 02 FB | 	rdlong	arg01, fp
0c86c     48 4E 85 F1 | 	sub	fp, #72
0c870     01 14 06 F6 | 	mov	arg02, #1
0c874     C4 2A B1 FD | 	call	#__system___float_tointeger
0c878     28 4E 05 F1 | 	add	fp, #40
0c87c     A7 FA 61 FC | 	wrlong	result1, fp
0c880     1C 4E 85 F1 | 	sub	fp, #28
0c884     A7 20 02 FB | 	rdlong	local02, fp
0c888     10 23 02 F6 | 	mov	local03, local02
0c88c     01 22 66 F0 | 	shl	local03, #1
0c890     10 23 02 F1 | 	add	local03, local02
0c894     03 22 66 F0 | 	shl	local03, #3
0c898     34 00 00 FF 
0c89c     2C E5 05 F1 | 	add	objptr, ##26924
0c8a0     F2 22 02 F1 | 	add	local03, objptr
0c8a4     0C 4E 85 F1 | 	sub	fp, #12
0c8a8     06 22 06 F1 | 	add	local03, #6
0c8ac     11 FB 51 FC | 	wrword	result1, local03
0c8b0     34 00 00 FF 
0c8b4     2C E5 85 F1 | 	sub	objptr, ##26924
0c8b8                 | LR__1000
0c8b8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0c8b8     4C 4E 05 F1 | 	add	fp, #76
0c8bc     A7 12 02 FB | 	rdlong	arg01, fp
0c8c0     4C 4E 85 F1 | 	sub	fp, #76
0c8c4     00 C0 5F FF 
0c8c8     00 14 06 F6 | 	mov	arg02, ##-1082130432
0c8cc     01 16 06 F6 | 	mov	arg03, #1
0c8d0     D4 29 B1 FD | 	call	#__system___float_cmp
0c8d4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c8d8     24 00 90 CD |  if_b	jmp	#LR__1001
0c8dc     4C 4E 05 F1 | 	add	fp, #76
0c8e0     A7 12 02 FB | 	rdlong	arg01, fp
0c8e4     4C 4E 85 F1 | 	sub	fp, #76
0c8e8     00 C0 1F FF 
0c8ec     00 14 06 F6 | 	mov	arg02, ##1065353216
0c8f0     01 16 66 F6 | 	neg	arg03, #1
0c8f4     B0 29 B1 FD | 	call	#__system___float_cmp
0c8f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0c8fc     44 00 90 CD |  if_b	jmp	#LR__1002
0c900                 | LR__1001
0c900     0C 4E 05 F1 | 	add	fp, #12
0c904     A7 20 02 FB | 	rdlong	local02, fp
0c908     10 23 02 F6 | 	mov	local03, local02
0c90c     01 22 66 F0 | 	shl	local03, #1
0c910     10 23 02 F1 | 	add	local03, local02
0c914     03 22 66 F0 | 	shl	local03, #3
0c918     34 00 00 FF 
0c91c     2C E5 05 F1 | 	add	objptr, ##26924
0c920     F2 22 02 F1 | 	add	local03, objptr
0c924     10 22 06 F1 | 	add	local03, #16
0c928     11 27 02 FB | 	rdlong	local05, local03
0c92c     5C 4E 05 F1 | 	add	fp, #92
0c930     A7 26 62 FC | 	wrlong	local05, fp
0c934     68 4E 85 F1 | 	sub	fp, #104
0c938     34 00 00 FF 
0c93c     2C E5 85 F1 | 	sub	objptr, ##26924
0c940     48 00 90 FD | 	jmp	#LR__1003
0c944                 | LR__1002
0c944     4C 4E 05 F1 | 	add	fp, #76
0c948     A7 26 02 FB | 	rdlong	local05, fp
0c94c     1C 4E 05 F1 | 	add	fp, #28
0c950     A7 26 62 FC | 	wrlong	local05, fp
0c954     5C 4E 85 F1 | 	sub	fp, #92
0c958     A7 20 02 FB | 	rdlong	local02, fp
0c95c     10 23 02 F6 | 	mov	local03, local02
0c960     01 22 66 F0 | 	shl	local03, #1
0c964     10 23 02 F1 | 	add	local03, local02
0c968     03 22 66 F0 | 	shl	local03, #3
0c96c     34 00 00 FF 
0c970     2C E5 05 F1 | 	add	objptr, ##26924
0c974     F2 22 02 F1 | 	add	local03, objptr
0c978     0C 4E 85 F1 | 	sub	fp, #12
0c97c     10 22 06 F1 | 	add	local03, #16
0c980     11 27 62 FC | 	wrlong	local05, local03
0c984     34 00 00 FF 
0c988     2C E5 85 F1 | 	sub	objptr, ##26924
0c98c                 | LR__1003
0c98c                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0c98c     50 4E 05 F1 | 	add	fp, #80
0c990     A7 12 02 FB | 	rdlong	arg01, fp
0c994     50 4E 85 F1 | 	sub	fp, #80
0c998     00 14 06 F6 | 	mov	arg02, #0
0c99c     01 16 06 F6 | 	mov	arg03, #1
0c9a0     04 29 B1 FD | 	call	#__system___float_cmp
0c9a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c9a8     24 00 90 CD |  if_b	jmp	#LR__1004
0c9ac     50 4E 05 F1 | 	add	fp, #80
0c9b0     A7 12 02 FB | 	rdlong	arg01, fp
0c9b4     50 4E 85 F1 | 	sub	fp, #80
0c9b8     80 BF 21 FF 
0c9bc     00 14 06 F6 | 	mov	arg02, ##1132396544
0c9c0     01 16 66 F6 | 	neg	arg03, #1
0c9c4     E0 28 B1 FD | 	call	#__system___float_cmp
0c9c8     01 FA 55 F2 | 	cmps	result1, #1 wc
0c9cc     44 00 90 CD |  if_b	jmp	#LR__1005
0c9d0                 | LR__1004
0c9d0     0C 4E 05 F1 | 	add	fp, #12
0c9d4     A7 22 02 FB | 	rdlong	local03, fp
0c9d8     11 27 02 F6 | 	mov	local05, local03
0c9dc     01 26 66 F0 | 	shl	local05, #1
0c9e0     11 27 02 F1 | 	add	local05, local03
0c9e4     03 26 66 F0 | 	shl	local05, #3
0c9e8     34 00 00 FF 
0c9ec     2C E5 05 F1 | 	add	objptr, ##26924
0c9f0     F2 26 02 F1 | 	add	local05, objptr
0c9f4     14 26 06 F1 | 	add	local05, #20
0c9f8     13 25 E2 FA | 	rdword	local04, local05
0c9fc     20 4E 05 F1 | 	add	fp, #32
0ca00     A7 24 62 FC | 	wrlong	local04, fp
0ca04     2C 4E 85 F1 | 	sub	fp, #44
0ca08     34 00 00 FF 
0ca0c     2C E5 85 F1 | 	sub	objptr, ##26924
0ca10     54 00 90 FD | 	jmp	#LR__1006
0ca14                 | LR__1005
0ca14     50 4E 05 F1 | 	add	fp, #80
0ca18     A7 12 02 FB | 	rdlong	arg01, fp
0ca1c     50 4E 85 F1 | 	sub	fp, #80
0ca20     01 14 06 F6 | 	mov	arg02, #1
0ca24     14 29 B1 FD | 	call	#__system___float_tointeger
0ca28     2C 4E 05 F1 | 	add	fp, #44
0ca2c     A7 FA 61 FC | 	wrlong	result1, fp
0ca30     20 4E 85 F1 | 	sub	fp, #32
0ca34     A7 20 02 FB | 	rdlong	local02, fp
0ca38     10 23 02 F6 | 	mov	local03, local02
0ca3c     01 22 66 F0 | 	shl	local03, #1
0ca40     10 23 02 F1 | 	add	local03, local02
0ca44     03 22 66 F0 | 	shl	local03, #3
0ca48     34 00 00 FF 
0ca4c     2C E5 05 F1 | 	add	objptr, ##26924
0ca50     F2 22 02 F1 | 	add	local03, objptr
0ca54     0C 4E 85 F1 | 	sub	fp, #12
0ca58     14 22 06 F1 | 	add	local03, #20
0ca5c     11 FB 51 FC | 	wrword	result1, local03
0ca60     34 00 00 FF 
0ca64     2C E5 85 F1 | 	sub	objptr, ##26924
0ca68                 | LR__1006
0ca68     60 4E 05 F1 | 	add	fp, #96
0ca6c     A7 12 02 FB | 	rdlong	arg01, fp
0ca70     10 4E 05 F1 | 	add	fp, #16
0ca74     A7 14 02 FB | 	rdlong	arg02, fp
0ca78     70 4E 85 F1 | 	sub	fp, #112
0ca7c     F8 25 B1 FD | 	call	#__system___float_div
0ca80     FD 12 02 F6 | 	mov	arg01, result1
0ca84     01 14 06 F6 | 	mov	arg02, #1
0ca88     B0 28 B1 FD | 	call	#__system___float_tointeger
0ca8c     FD 24 02 F6 | 	mov	local04, result1
0ca90     14 4E 05 F1 | 	add	fp, #20
0ca94     A7 24 62 FC | 	wrlong	local04, fp
0ca98     54 4E 05 F1 | 	add	fp, #84
0ca9c     A7 14 02 FB | 	rdlong	arg02, fp
0caa0     68 4E 85 F1 | 	sub	fp, #104
0caa4     00 00 23 FF 
0caa8     00 12 06 F6 | 	mov	arg01, ##1174405120
0caac     C4 23 B1 FD | 	call	#__system___float_mul
0cab0     FD 12 02 F6 | 	mov	arg01, result1
0cab4     01 14 06 F6 | 	mov	arg02, #1
0cab8     80 28 B1 FD | 	call	#__system___float_tointeger
0cabc     0D 24 C6 F9 | 	decod	local04, #13
0cac0     FD 24 02 F1 | 	add	local04, result1
0cac4     18 4E 05 F1 | 	add	fp, #24
0cac8     A7 24 62 FC | 	wrlong	local04, fp
0cacc     54 4E 05 F1 | 	add	fp, #84
0cad0     A7 14 02 FB | 	rdlong	arg02, fp
0cad4     6C 4E 85 F1 | 	sub	fp, #108
0cad8     00 3D 22 FF 
0cadc     00 12 06 F6 | 	mov	arg01, ##1148846080
0cae0     90 23 B1 FD | 	call	#__system___float_mul
0cae4     FD 12 02 F6 | 	mov	arg01, result1
0cae8     01 14 06 F6 | 	mov	arg02, #1
0caec     4C 28 B1 FD | 	call	#__system___float_tointeger
0caf0     1C 4E 05 F1 | 	add	fp, #28
0caf4     A7 FA 61 FC | 	wrlong	result1, fp
0caf8     56 00 00 FF 
0cafc     F4 E5 05 F1 | 	add	objptr, ##44532
0cb00     F2 24 02 FB | 	rdlong	local04, objptr
0cb04     56 00 00 FF 
0cb08     F4 E5 85 F1 | 	sub	objptr, ##44532
0cb0c     10 4E 85 F1 | 	sub	fp, #16
0cb10     A7 20 02 FB | 	rdlong	local02, fp
0cb14     06 20 66 F0 | 	shl	local02, #6
0cb18     10 25 02 F1 | 	add	local04, local02
0cb1c     04 4E 85 F1 | 	sub	fp, #4
0cb20     A7 24 62 FC | 	wrlong	local04, fp
0cb24     5C 4E 05 F1 | 	add	fp, #92
0cb28     A7 12 02 FB | 	rdlong	arg01, fp
0cb2c     64 4E 85 F1 | 	sub	fp, #100
0cb30     72 3F 20 FF 
0cb34     EA 14 06 F6 | 	mov	arg02, ##1082057962
0cb38     38 23 B1 FD | 	call	#__system___float_mul
0cb3c     FD 12 02 F6 | 	mov	arg01, result1
0cb40     01 14 06 F6 | 	mov	arg02, #1
0cb44     F4 27 B1 FD | 	call	#__system___float_tointeger
0cb48     10 4E 05 F1 | 	add	fp, #16
0cb4c     A7 FA 61 FC | 	wrlong	result1, fp
0cb50                 | ' 
0cb50                 | ' speed=round(speed_coeff/slen)
0cb50                 | ' ipan=8192+round(8192*pan)
0cb50                 | ' ivol=round(1000.0*vol)
0cb50                 | ' base2=base+64*channel
0cb50                 | ' skip=round(freq*3.9827219) 
0cb50                 | ' if wave <8 then 
0cb50     10 4E 05 F1 | 	add	fp, #16
0cb54     A7 24 02 FB | 	rdlong	local04, fp
0cb58     20 4E 85 F1 | 	sub	fp, #32
0cb5c     08 24 56 F2 | 	cmps	local04, #8 wc
0cb60     40 00 90 3D |  if_ae	jmp	#LR__1007
0cb64     08 4E 05 F1 | 	add	fp, #8
0cb68     A7 12 02 FB | 	rdlong	arg01, fp
0cb6c     08 12 06 F1 | 	add	arg01, #8
0cb70     18 4E 05 F1 | 	add	fp, #24
0cb74     A7 14 02 FB | 	rdlong	arg02, fp
0cb78     20 4E 85 F1 | 	sub	fp, #32
0cb7c     0B 14 66 F0 | 	shl	arg02, #11
0cb80     0C 00 00 FF 
0cb84     CC E4 05 F1 | 	add	objptr, ##6348
0cb88     F2 14 02 F1 | 	add	arg02, objptr
0cb8c     0C 00 00 FF 
0cb90     CC E4 85 F1 | 	sub	objptr, ##6348
0cb94     00 00 60 FF 
0cb98     00 14 06 F1 | 	add	arg02, ##-1073741824
0cb9c     09 15 62 FC | 	wrlong	arg02, arg01
0cba0     18 00 90 FD | 	jmp	#LR__1008
0cba4                 | LR__1007
0cba4     08 4E 05 F1 | 	add	fp, #8
0cba8     A7 12 02 FB | 	rdlong	arg01, fp
0cbac     08 4E 85 F1 | 	sub	fp, #8
0cbb0     08 12 06 F1 | 	add	arg01, #8
0cbb4     00 00 E4 FF 
0cbb8     09 01 68 FC | 	wrlong	##-939524096, arg01
0cbbc                 | LR__1008
0cbbc     08 4E 05 F1 | 	add	fp, #8
0cbc0     A7 12 02 FB | 	rdlong	arg01, fp
0cbc4     10 12 06 F1 | 	add	arg01, #16
0cbc8     04 00 80 FF 
0cbcc     09 01 68 FC | 	wrlong	##2048, arg01
0cbd0     A7 12 02 FB | 	rdlong	arg01, fp
0cbd4     0C 12 06 F1 | 	add	arg01, #12
0cbd8     09 01 68 FC | 	wrlong	#0, arg01
0cbdc     A7 12 02 FB | 	rdlong	arg01, fp
0cbe0     14 12 06 F1 | 	add	arg01, #20
0cbe4     14 4E 05 F1 | 	add	fp, #20
0cbe8     A7 14 02 FB | 	rdlong	arg02, fp
0cbec     09 15 52 FC | 	wrword	arg02, arg01
0cbf0     14 4E 85 F1 | 	sub	fp, #20
0cbf4     A7 12 02 FB | 	rdlong	arg01, fp
0cbf8     16 12 06 F1 | 	add	arg01, #22
0cbfc     10 4E 05 F1 | 	add	fp, #16
0cc00     A7 14 02 FB | 	rdlong	arg02, fp
0cc04     09 15 52 FC | 	wrword	arg02, arg01
0cc08                 | '   
0cc08                 | ' lpoke base2+16,2048
0cc08                 | ' lpoke base2+12,0
0cc08                 | ' dpoke base2+20,ivol 
0cc08                 | ' dpoke base2+22,ipan 
0cc08                 | ' if wave<8 then
0cc08     08 4E 05 F1 | 	add	fp, #8
0cc0c     A7 24 02 FB | 	rdlong	local04, fp
0cc10     20 4E 85 F1 | 	sub	fp, #32
0cc14     08 24 56 F2 | 	cmps	local04, #8 wc
0cc18     2C 00 90 3D |  if_ae	jmp	#LR__1009
0cc1c     08 4E 05 F1 | 	add	fp, #8
0cc20     A7 12 02 FB | 	rdlong	arg01, fp
0cc24     18 12 06 F1 | 	add	arg01, #24
0cc28     09 29 58 FC | 	wrword	#20, arg01
0cc2c     A7 12 02 FB | 	rdlong	arg01, fp
0cc30     1A 12 06 F1 | 	add	arg01, #26
0cc34     08 4E 05 F1 | 	add	fp, #8
0cc38     A7 14 02 FB | 	rdlong	arg02, fp
0cc3c     10 4E 85 F1 | 	sub	fp, #16
0cc40     09 15 52 FC | 	wrword	arg02, arg01
0cc44     A4 00 90 FD | 	jmp	#LR__1010
0cc48                 | LR__1009
0cc48     08 4E 05 F1 | 	add	fp, #8
0cc4c     A7 24 02 FB | 	rdlong	local04, fp
0cc50     18 24 06 F1 | 	add	local04, #24
0cc54     5C 4E 05 F1 | 	add	fp, #92
0cc58     A7 14 02 FB | 	rdlong	arg02, fp
0cc5c     64 4E 85 F1 | 	sub	fp, #100
0cc60     58 D0 24 FF 
0cc64     B0 13 06 F6 | 	mov	arg01, ##1235268016
0cc68     0C 24 B1 FD | 	call	#__system___float_div
0cc6c     FD 12 02 F6 | 	mov	arg01, result1
0cc70     01 14 06 F6 | 	mov	arg02, #1
0cc74     C4 26 B1 FD | 	call	#__system___float_tointeger
0cc78     12 FB 51 FC | 	wrword	result1, local04
0cc7c                 | '   dpoke base2+24,round(1316406/freq)  : print 1316406/freq
0cc7c     00 12 06 F6 | 	mov	arg01, #0
0cc80     04 50 B1 FD | 	call	#__system___getiolock_0474
0cc84     FD 12 02 F6 | 	mov	arg01, result1
0cc88     6C F6 B0 FD | 	call	#__system___lockmem
0cc8c     00 20 06 F6 | 	mov	local02, #0
0cc90     64 4E 05 F1 | 	add	fp, #100
0cc94     A7 14 02 FB | 	rdlong	arg02, fp
0cc98     64 4E 85 F1 | 	sub	fp, #100
0cc9c     58 D0 24 FF 
0cca0     B0 13 06 F6 | 	mov	arg01, ##1235268016
0cca4     D0 23 B1 FD | 	call	#__system___float_div
0cca8     FD 14 02 F6 | 	mov	arg02, result1
0ccac     10 13 02 F6 | 	mov	arg01, local02
0ccb0     00 16 06 F6 | 	mov	arg03, #0
0ccb4     23 18 06 F6 | 	mov	arg04, #35
0ccb8     D0 27 B1 FD | 	call	#__system___basic_print_float
0ccbc     00 12 06 F6 | 	mov	arg01, #0
0ccc0     0A 14 06 F6 | 	mov	arg02, #10
0ccc4     00 16 06 F6 | 	mov	arg03, #0
0ccc8     D8 02 B1 FD | 	call	#__system___basic_print_char
0cccc     00 12 06 F6 | 	mov	arg01, #0
0ccd0     B4 4F B1 FD | 	call	#__system___getiolock_0474
0ccd4     FD 00 68 FC | 	wrlong	#0, result1
0ccd8     08 4E 05 F1 | 	add	fp, #8
0ccdc     A7 12 02 FB | 	rdlong	arg01, fp
0cce0     08 4E 85 F1 | 	sub	fp, #8
0cce4     1A 12 06 F1 | 	add	arg01, #26
0cce8     09 01 5A FC | 	wrword	#256, arg01
0ccec                 | LR__1010
0ccec     08 4E 05 F1 | 	add	fp, #8
0ccf0     A7 12 02 FB | 	rdlong	arg01, fp
0ccf4     20 12 06 F1 | 	add	arg01, #32
0ccf8     09 01 68 FC | 	wrlong	#0, arg01
0ccfc                 | ' 'dpoke base2+28,$4000_0000
0ccfc                 | ' lpoke base2+32,0 
0ccfc                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0ccfc     1C 4E 05 F1 | 	add	fp, #28
0cd00     A7 24 02 FB | 	rdlong	local04, fp
0cd04     24 4E 85 F1 | 	sub	fp, #36
0cd08     08 24 0E F2 | 	cmp	local04, #8 wz
0cd0c     18 00 90 5D |  if_ne	jmp	#LR__1011
0cd10     08 4E 05 F1 | 	add	fp, #8
0cd14     A7 12 02 FB | 	rdlong	arg01, fp
0cd18     08 4E 85 F1 | 	sub	fp, #8
0cd1c     24 12 06 F1 | 	add	arg01, #36
0cd20     09 01 68 FC | 	wrlong	#0, arg01
0cd24     34 00 90 FD | 	jmp	#LR__1012
0cd28                 | LR__1011
0cd28     08 4E 05 F1 | 	add	fp, #8
0cd2c     A7 12 02 FB | 	rdlong	arg01, fp
0cd30     24 12 06 F1 | 	add	arg01, #36
0cd34     1C 4E 05 F1 | 	add	fp, #28
0cd38     A7 14 02 FB | 	rdlong	arg02, fp
0cd3c     24 4E 85 F1 | 	sub	fp, #36
0cd40     09 14 66 F0 | 	shl	arg02, #9
0cd44     2C 00 00 FF 
0cd48     CC E4 05 F1 | 	add	objptr, ##22732
0cd4c     F2 14 02 F1 | 	add	arg02, objptr
0cd50     2C 00 00 FF 
0cd54     CC E4 85 F1 | 	sub	objptr, ##22732
0cd58     09 15 62 FC | 	wrlong	arg02, arg01
0cd5c                 | LR__1012
0cd5c     08 4E 05 F1 | 	add	fp, #8
0cd60     A7 12 02 FB | 	rdlong	arg01, fp
0cd64     28 12 06 F1 | 	add	arg01, #40
0cd68     0C 4E 05 F1 | 	add	fp, #12
0cd6c     A7 14 02 FB | 	rdlong	arg02, fp
0cd70     09 15 62 FC | 	wrlong	arg02, arg01
0cd74     0C 4E 85 F1 | 	sub	fp, #12
0cd78     A7 12 02 FB | 	rdlong	arg01, fp
0cd7c     2C 12 06 F1 | 	add	arg01, #44
0cd80     24 4E 05 F1 | 	add	fp, #36
0cd84     A7 14 02 FB | 	rdlong	arg02, fp
0cd88     09 15 62 FC | 	wrlong	arg02, arg01
0cd8c                 | ' lpoke base2+40,speed' speed
0cd8c                 | ' lpoke base2+44,sus 'len
0cd8c                 | ' 
0cd8c                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0cd8c     04 4E 85 F1 | 	sub	fp, #4
0cd90     A7 24 02 FB | 	rdlong	local04, fp
0cd94     28 4E 85 F1 | 	sub	fp, #40
0cd98     01 24 56 F2 | 	cmps	local04, #1 wc
0cd9c     28 4E 05 31 |  if_ae	add	fp, #40
0cda0     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0cda4     28 4E 85 31 |  if_ae	sub	fp, #40
0cda8     40 F8 B0 3D |  if_ae	call	#__system___waitms
0cdac     A7 F0 03 F6 | 	mov	ptra, fp
0cdb0     B2 00 A0 FD | 	call	#popregs_
0cdb4                 | _do_play_ret
0cdb4     2D 00 64 FD | 	ret
0cdb8                 | 
0cdb8                 | ' 
0cdb8                 | ' sub do_release
0cdb8                 | _do_release
0cdb8     00 4A 05 F6 | 	mov	COUNT_, #0
0cdbc     A8 00 A0 FD | 	call	#pushregs_
0cdc0     10 F0 07 F1 | 	add	ptra, #16
0cdc4     00 D3 BF FD | 	call	#_pop
0cdc8     FF 14 02 F6 | 	mov	arg02, result3
0cdcc     A7 FA 61 FC | 	wrlong	result1, fp
0cdd0     04 4E 05 F1 | 	add	fp, #4
0cdd4     A7 FC 61 FC | 	wrlong	result2, fp
0cdd8     04 4E 05 F1 | 	add	fp, #4
0cddc     A7 14 62 FC | 	wrlong	arg02, fp
0cde0     08 4E 85 F1 | 	sub	fp, #8
0cde4     A7 12 02 F6 | 	mov	arg01, fp
0cde8     30 5C B0 FD | 	call	#_converttoint
0cdec     0C 4E 05 F1 | 	add	fp, #12
0cdf0     A7 FA 61 FC | 	wrlong	result1, fp
0cdf4                 | ' t1=pop()
0cdf4                 | ' channel=converttoint(t1)
0cdf4                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0cdf4     0C 4E 85 F1 | 	sub	fp, #12
0cdf8     00 FA 55 F2 | 	cmps	result1, #0 wc
0cdfc     44 00 90 CD |  if_b	jmp	#LR__1020
0ce00     0C 4E 05 F1 | 	add	fp, #12
0ce04     A7 14 02 FB | 	rdlong	arg02, fp
0ce08     0C 4E 85 F1 | 	sub	fp, #12
0ce0c     08 14 56 F2 | 	cmps	arg02, #8 wc
0ce10     30 00 90 3D |  if_ae	jmp	#LR__1020
0ce14     56 00 00 FF 
0ce18     F4 E5 05 F1 | 	add	objptr, ##44532
0ce1c     F2 12 02 FB | 	rdlong	arg01, objptr
0ce20     56 00 00 FF 
0ce24     F4 E5 85 F1 | 	sub	objptr, ##44532
0ce28     0C 4E 05 F1 | 	add	fp, #12
0ce2c     A7 14 02 FB | 	rdlong	arg02, fp
0ce30     0C 4E 85 F1 | 	sub	fp, #12
0ce34     06 14 66 F0 | 	shl	arg02, #6
0ce38     0A 13 02 F1 | 	add	arg01, arg02
0ce3c     2C 12 06 F1 | 	add	arg01, #44
0ce40     09 FF 69 FC | 	wrlong	#255, arg01
0ce44                 | LR__1020
0ce44     A7 F0 03 F6 | 	mov	ptra, fp
0ce48     B2 00 A0 FD | 	call	#popregs_
0ce4c                 | _do_release_ret
0ce4c     2D 00 64 FD | 	ret
0ce50                 | 
0ce50                 | ' 
0ce50                 | ' 
0ce50                 | ' sub do_defsnd
0ce50                 | _do_defsnd
0ce50     05 4A 05 F6 | 	mov	COUNT_, #5
0ce54     A8 00 A0 FD | 	call	#pushregs_
0ce58     88 F0 07 F1 | 	add	ptra, #136
0ce5c     6A 00 00 FF 
0ce60     64 E4 05 F1 | 	add	objptr, ##54372
0ce64     F2 1A 02 FB | 	rdlong	arg05, objptr
0ce68     0D 19 02 F6 | 	mov	arg04, arg05
0ce6c     01 18 66 F0 | 	shl	arg04, #1
0ce70     0D 19 02 F1 | 	add	arg04, arg05
0ce74     02 18 66 F0 | 	shl	arg04, #2
0ce78     03 00 00 FF 
0ce7c     04 E4 85 F1 | 	sub	objptr, ##1540
0ce80     F2 18 02 F1 | 	add	arg04, objptr
0ce84     0C 1B 02 FB | 	rdlong	arg05, arg04
0ce88     A7 1A 62 FC | 	wrlong	arg05, fp
0ce8c                 | ' 
0ce8c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce8c                 | ' 
0ce8c                 | ' 
0ce8c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0ce8c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0ce8c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0ce8c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0ce8c                 | ' 
0ce8c                 | ' if numpar<2 then return
0ce8c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ce90     67 00 00 FF 
0ce94     60 E4 85 F1 | 	sub	objptr, ##52832
0ce98     A0 09 90 CD |  if_b	jmp	#LR__1058
0ce9c                 | ' 
0ce9c                 | '   
0ce9c                 | ' if numpar=2 then
0ce9c     A7 1A 02 FB | 	rdlong	arg05, fp
0cea0     02 1A 0E F2 | 	cmp	arg05, #2 wz
0cea4     0C 04 90 5D |  if_ne	jmp	#LR__1041
0cea8     1C D2 BF FD | 	call	#_pop
0ceac     FF 1A 02 F6 | 	mov	arg05, result3
0ceb0     2C 4E 05 F1 | 	add	fp, #44
0ceb4     A7 FA 61 FC | 	wrlong	result1, fp
0ceb8     04 4E 05 F1 | 	add	fp, #4
0cebc     A7 FC 61 FC | 	wrlong	result2, fp
0cec0     04 4E 05 F1 | 	add	fp, #4
0cec4     A7 1A 62 FC | 	wrlong	arg05, fp
0cec8                 | '   t1=pop()
0cec8                 | '   if t1.result_type=result_string2 then 
0cec8     34 4E 85 F1 | 	sub	fp, #52
0cecc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ced0     20 00 90 5D |  if_ne	jmp	#LR__1030
0ced4     2C 4E 05 F1 | 	add	fp, #44
0ced8     A7 12 02 FB | 	rdlong	arg01, fp
0cedc     2C 4E 85 F1 | 	sub	fp, #44
0cee0     88 11 B0 FD | 	call	#_convertstring
0cee4     38 4E 05 F1 | 	add	fp, #56
0cee8     A7 FA 61 FC | 	wrlong	result1, fp
0ceec     38 4E 85 F1 | 	sub	fp, #56
0cef0     58 00 90 FD | 	jmp	#LR__1033
0cef4                 | LR__1030
0cef4     34 4E 05 F1 | 	add	fp, #52
0cef8     A7 1A 02 FB | 	rdlong	arg05, fp
0cefc     34 4E 85 F1 | 	sub	fp, #52
0cf00     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0cf04     18 00 90 5D |  if_ne	jmp	#LR__1031
0cf08     2C 4E 05 F1 | 	add	fp, #44
0cf0c     A7 1A 02 FB | 	rdlong	arg05, fp
0cf10     0C 4E 05 F1 | 	add	fp, #12
0cf14     A7 1A 62 FC | 	wrlong	arg05, fp
0cf18     38 4E 85 F1 | 	sub	fp, #56
0cf1c     2C 00 90 FD | 	jmp	#LR__1032
0cf20                 | LR__1031
0cf20     5F 01 00 FF 
0cf24     D7 1A 06 F6 | 	mov	arg05, ##@LR__4928
0cf28     38 4E 05 F1 | 	add	fp, #56
0cf2c     A7 1A 62 FC | 	wrlong	arg05, fp
0cf30     0C 4E 85 F1 | 	sub	fp, #12
0cf34     A7 12 02 F6 | 	mov	arg01, fp
0cf38     2C 4E 85 F1 | 	sub	fp, #44
0cf3c     DC 5A B0 FD | 	call	#_converttoint
0cf40     14 4E 05 F1 | 	add	fp, #20
0cf44     A7 FA 61 FC | 	wrlong	result1, fp
0cf48     14 4E 85 F1 | 	sub	fp, #20
0cf4c                 | LR__1032
0cf4c                 | LR__1033
0cf4c                 | ' 
0cf4c                 | '     
0cf4c                 | '   if s<>"" then 
0cf4c     38 4E 05 F1 | 	add	fp, #56
0cf50     A7 12 02 FB | 	rdlong	arg01, fp
0cf54     38 4E 85 F1 | 	sub	fp, #56
0cf58     5F 01 00 FF 
0cf5c     D8 14 06 F6 | 	mov	arg02, ##@LR__4929
0cf60     BC F3 B0 FD | 	call	#__system___string_cmp
0cf64     00 FA 0D F2 | 	cmp	result1, #0 wz
0cf68     88 01 90 AD |  if_e	jmp	#LR__1035
0cf6c     58 D1 BF FD | 	call	#_pop
0cf70     FF 1A 02 F6 | 	mov	arg05, result3
0cf74     2C 4E 05 F1 | 	add	fp, #44
0cf78     A7 FA 61 FC | 	wrlong	result1, fp
0cf7c     04 4E 05 F1 | 	add	fp, #4
0cf80     A7 FC 61 FC | 	wrlong	result2, fp
0cf84     04 4E 05 F1 | 	add	fp, #4
0cf88     A7 1A 62 FC | 	wrlong	arg05, fp
0cf8c     08 4E 85 F1 | 	sub	fp, #8
0cf90     A7 12 02 F6 | 	mov	arg01, fp
0cf94     2C 4E 85 F1 | 	sub	fp, #44
0cf98     80 5A B0 FD | 	call	#_converttoint
0cf9c     10 4E 05 F1 | 	add	fp, #16
0cfa0     A7 FA 61 FC | 	wrlong	result1, fp
0cfa4     10 4E 85 F1 | 	sub	fp, #16
0cfa8                 | '     t1=pop()
0cfa8                 | '     channel=converttoint(t1) 
0cfa8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0cfa8     09 12 06 F6 | 	mov	arg01, #9
0cfac     0C 43 B1 FD | 	call	#__system__close
0cfb0     09 1E 06 F6 | 	mov	local01, #9
0cfb4     5F 01 00 FF 
0cfb8     D9 12 06 F6 | 	mov	arg01, ##@LR__4930
0cfbc     38 4E 05 F1 | 	add	fp, #56
0cfc0     A7 14 02 FB | 	rdlong	arg02, fp
0cfc4     38 4E 85 F1 | 	sub	fp, #56
0cfc8     88 F3 B0 FD | 	call	#__system___string_concat
0cfcc     FD 14 02 F6 | 	mov	arg02, result1
0cfd0     0F 13 02 F6 | 	mov	arg01, local01
0cfd4     00 16 06 F6 | 	mov	arg03, #0
0cfd8     1C FF B0 FD | 	call	#__system___basic_open_string
0cfdc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cfe0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cfe4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cfe8     7B 00 00 FF 
0cfec     F4 E4 05 F1 | 	add	objptr, ##63220
0cff0     F2 FA 61 FC | 	wrlong	result1, objptr
0cff4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0cff4     7B 00 00 FF 
0cff8     F4 E4 85 F1 | 	sub	objptr, ##63220
0cffc     B0 00 90 AD |  if_e	jmp	#LR__1034
0d000     00 12 06 F6 | 	mov	arg01, #0
0d004     80 4C B1 FD | 	call	#__system___getiolock_0474
0d008     FD 12 02 F6 | 	mov	arg01, result1
0d00c     E8 F2 B0 FD | 	call	#__system___lockmem
0d010     5F 01 00 FF 
0d014     E6 14 06 F6 | 	mov	arg02, ##@LR__4931
0d018     00 12 06 F6 | 	mov	arg01, #0
0d01c     00 16 06 F6 | 	mov	arg03, #0
0d020     D8 FF B0 FD | 	call	#__system___basic_print_string
0d024     7B 00 00 FF 
0d028     F4 E4 05 F1 | 	add	objptr, ##63220
0d02c     F2 14 02 FB | 	rdlong	arg02, objptr
0d030     7B 00 00 FF 
0d034     F4 E4 85 F1 | 	sub	objptr, ##63220
0d038     00 12 06 F6 | 	mov	arg01, #0
0d03c     00 16 06 F6 | 	mov	arg03, #0
0d040     0A 18 06 F6 | 	mov	arg04, #10
0d044     F8 FF B0 FD | 	call	#__system___basic_print_integer
0d048     5F 01 00 FF 
0d04c     F4 14 06 F6 | 	mov	arg02, ##@LR__4932
0d050     00 12 06 F6 | 	mov	arg01, #0
0d054     00 16 06 F6 | 	mov	arg03, #0
0d058     A0 FF B0 FD | 	call	#__system___basic_print_string
0d05c     00 1E 06 F6 | 	mov	local01, #0
0d060     7B 00 00 FF 
0d064     F4 E4 05 F1 | 	add	objptr, ##63220
0d068     F2 12 02 FB | 	rdlong	arg01, objptr
0d06c     7B 00 00 FF 
0d070     F4 E4 85 F1 | 	sub	objptr, ##63220
0d074     10 19 B1 FD | 	call	#__system___strerror
0d078     FD 14 02 F6 | 	mov	arg02, result1
0d07c     0F 13 02 F6 | 	mov	arg01, local01
0d080     00 16 06 F6 | 	mov	arg03, #0
0d084     74 FF B0 FD | 	call	#__system___basic_print_string
0d088     00 12 06 F6 | 	mov	arg01, #0
0d08c     0A 14 06 F6 | 	mov	arg02, #10
0d090     00 16 06 F6 | 	mov	arg03, #0
0d094     0C FF B0 FD | 	call	#__system___basic_print_char
0d098     00 12 06 F6 | 	mov	arg01, #0
0d09c     E8 4B B1 FD | 	call	#__system___getiolock_0474
0d0a0     FD 00 68 FC | 	wrlong	#0, result1
0d0a4     09 12 06 F6 | 	mov	arg01, #9
0d0a8     10 42 B1 FD | 	call	#__system__close
0d0ac     8C 07 90 FD | 	jmp	#LR__1058
0d0b0                 | LR__1034
0d0b0                 | '     get #9,17,samplebuf(channel,0),1024
0d0b0     10 4E 05 F1 | 	add	fp, #16
0d0b4     A7 16 02 FB | 	rdlong	arg03, fp
0d0b8     10 4E 85 F1 | 	sub	fp, #16
0d0bc     0B 16 66 F0 | 	shl	arg03, #11
0d0c0     0C 00 00 FF 
0d0c4     CC E4 05 F1 | 	add	objptr, ##6348
0d0c8     F2 16 02 F1 | 	add	arg03, objptr
0d0cc     09 12 06 F6 | 	mov	arg01, #9
0d0d0     11 14 06 F6 | 	mov	arg02, #17
0d0d4     0A 18 C6 F9 | 	decod	arg04, #10
0d0d8     02 1A 06 F6 | 	mov	arg05, #2
0d0dc     0C 00 00 FF 
0d0e0     CC E4 85 F1 | 	sub	objptr, ##6348
0d0e4     24 00 B1 FD | 	call	#__system___basic_get
0d0e8                 | '     close #9
0d0e8     09 12 06 F6 | 	mov	arg01, #9
0d0ec     CC 41 B1 FD | 	call	#__system__close
0d0f0                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d0f0                 | '     return
0d0f0     48 07 90 FD | 	jmp	#LR__1058
0d0f4                 | LR__1035
0d0f4                 | '     if wptr < ($80000 - 2048) then 
0d0f4     14 4E 05 F1 | 	add	fp, #20
0d0f8     A7 1E 02 FB | 	rdlong	local01, fp
0d0fc     14 4E 85 F1 | 	sub	fp, #20
0d100     FC 03 00 FF 
0d104     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0d108     80 00 90 3D |  if_ae	jmp	#LR__1038
0d10c                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0d10c     04 4E 05 F1 | 	add	fp, #4
0d110     A7 00 68 FC | 	wrlong	#0, fp
0d114     04 4E 85 F1 | 	sub	fp, #4
0d118     0C 00 00 FF 
0d11c     CC E4 05 F1 | 	add	objptr, ##6348
0d120     97 2E 48 FB | 	callpa	#(@LR__1037-@LR__1036)>>2,fcache_load_ptr_
0d124                 | LR__1036
0d124     10 4E 05 F1 | 	add	fp, #16
0d128     A7 1E 02 FB | 	rdlong	local01, fp
0d12c     0B 1E 66 F0 | 	shl	local01, #11
0d130     F2 1E 02 F1 | 	add	local01, objptr
0d134     0C 4E 85 F1 | 	sub	fp, #12
0d138     A7 1A 02 FB | 	rdlong	arg05, fp
0d13c     0D 19 02 F6 | 	mov	arg04, arg05
0d140     01 18 66 F0 | 	shl	arg04, #1
0d144     0F 19 02 F1 | 	add	arg04, local01
0d148     10 4E 05 F1 | 	add	fp, #16
0d14c     A7 12 02 FB | 	rdlong	arg01, fp
0d150     01 1A 66 F0 | 	shl	arg05, #1
0d154     0D 13 02 F1 | 	add	arg01, arg05
0d158     09 FB E1 FA | 	rdword	result1, arg01
0d15c     0C FB 51 FC | 	wrword	result1, arg04
0d160     10 4E 85 F1 | 	sub	fp, #16
0d164     A7 1E 02 FB | 	rdlong	local01, fp
0d168     01 1E 06 F1 | 	add	local01, #1
0d16c     A7 1E 62 FC | 	wrlong	local01, fp
0d170     04 4E 85 F1 | 	sub	fp, #4
0d174     02 00 00 FF 
0d178     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0d17c     A4 FF 9F CD |  if_b	jmp	#LR__1036
0d180                 | LR__1037
0d180     0C 00 00 FF 
0d184     CC E4 85 F1 | 	sub	objptr, ##6348
0d188     B0 06 90 FD | 	jmp	#LR__1058
0d18c                 | LR__1038
0d18c                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0d18c     04 4E 05 F1 | 	add	fp, #4
0d190     A7 00 68 FC | 	wrlong	#0, fp
0d194     04 4E 85 F1 | 	sub	fp, #4
0d198                 | LR__1039
0d198     10 4E 05 F1 | 	add	fp, #16
0d19c     A7 1A 02 FB | 	rdlong	arg05, fp
0d1a0     0B 1A 66 F0 | 	shl	arg05, #11
0d1a4     0C 00 00 FF 
0d1a8     CC E4 05 F1 | 	add	objptr, ##6348
0d1ac     F2 1A 02 F1 | 	add	arg05, objptr
0d1b0     0C 4E 85 F1 | 	sub	fp, #12
0d1b4     A7 18 02 FB | 	rdlong	arg04, fp
0d1b8     0C 21 02 F6 | 	mov	local02, arg04
0d1bc     01 20 66 F0 | 	shl	local02, #1
0d1c0     0D 21 02 F1 | 	add	local02, arg05
0d1c4     10 4E 05 F1 | 	add	fp, #16
0d1c8     A7 12 02 FB | 	rdlong	arg01, fp
0d1cc     14 4E 85 F1 | 	sub	fp, #20
0d1d0     01 18 66 F0 | 	shl	arg04, #1
0d1d4     0C 13 02 F1 | 	add	arg01, arg04
0d1d8     0C 00 00 FF 
0d1dc     CC E4 85 F1 | 	sub	objptr, ##6348
0d1e0     60 BC B0 FD | 	call	#_psdpeek
0d1e4     10 FB 51 FC | 	wrword	result1, local02
0d1e8     04 4E 05 F1 | 	add	fp, #4
0d1ec     A7 22 02 FB | 	rdlong	local03, fp
0d1f0     01 22 06 F1 | 	add	local03, #1
0d1f4     A7 22 62 FC | 	wrlong	local03, fp
0d1f8     04 4E 85 F1 | 	sub	fp, #4
0d1fc     02 00 00 FF 
0d200     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d204     90 FF 9F CD |  if_b	jmp	#LR__1039
0d208                 | '     return 
0d208     30 06 90 FD | 	jmp	#LR__1058
0d20c                 | '   
0d20c                 | '   par=converttoint(t1)  : print par
0d20c                 | '   t1=pop()
0d20c                 | '   channel=converttoint(t1)  
0d20c                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0d20c                 | LR__1040
0d20c     10 4E 05 F1 | 	add	fp, #16
0d210     A7 22 02 FB | 	rdlong	local03, fp
0d214     0B 22 66 F0 | 	shl	local03, #11
0d218     0C 00 00 FF 
0d21c     CC E4 05 F1 | 	add	objptr, ##6348
0d220     F2 22 02 F1 | 	add	local03, objptr
0d224     0C 4E 85 F1 | 	sub	fp, #12
0d228     A7 12 02 FB | 	rdlong	arg01, fp
0d22c     09 21 02 F6 | 	mov	local02, arg01
0d230     01 20 66 F0 | 	shl	local02, #1
0d234     11 21 02 F1 | 	add	local02, local03
0d238     04 4E 85 F1 | 	sub	fp, #4
0d23c     0C 00 00 FF 
0d240     CC E4 85 F1 | 	sub	objptr, ##6348
0d244     09 13 52 F6 | 	abs	arg01, arg01 wc
0d248     1F 24 C6 C9 |  if_b	decod	local04, #31
0d24c     00 24 06 36 |  if_ae	mov	local04, #0
0d250     1C 18 B1 FD | 	call	#__system___float_fromuns
0d254     12 FB 61 F5 | 	xor	result1, local04
0d258     FD 14 02 F6 | 	mov	arg02, result1
0d25c     87 E4 1D FF 
0d260     DB 13 06 F6 | 	mov	arg01, ##1003032539
0d264     0C 1C B1 FD | 	call	#__system___float_mul
0d268     FD 12 02 F6 | 	mov	arg01, result1
0d26c     40 25 B1 FD | 	call	#__system____builtin_sinf
0d270     FD 14 02 F6 | 	mov	arg02, result1
0d274     58 7F 23 FF 
0d278     00 12 06 F6 | 	mov	arg01, ##1191096320
0d27c     F4 1B B1 FD | 	call	#__system___float_mul
0d280     FD 12 02 F6 | 	mov	arg01, result1
0d284     01 14 06 F6 | 	mov	arg02, #1
0d288     B0 20 B1 FD | 	call	#__system___float_tointeger
0d28c     10 FB 51 FC | 	wrword	result1, local02
0d290     04 4E 05 F1 | 	add	fp, #4
0d294     A7 22 02 FB | 	rdlong	local03, fp
0d298     01 22 06 F1 | 	add	local03, #1
0d29c     A7 22 62 FC | 	wrlong	local03, fp
0d2a0     04 4E 85 F1 | 	sub	fp, #4
0d2a4     02 00 00 FF 
0d2a8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d2ac     5C FF 9F CD |  if_b	jmp	#LR__1040
0d2b0                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d2b0                 | '   return
0d2b0     88 05 90 FD | 	jmp	#LR__1058
0d2b4                 | LR__1041
0d2b4                 | ' for i=0 to 15 : harm(i)=0: next i  
0d2b4     04 4E 05 F1 | 	add	fp, #4
0d2b8     A7 00 68 FC | 	wrlong	#0, fp
0d2bc     97 16 48 FB | 	callpa	#(@LR__1043-@LR__1042)>>2,fcache_load_ptr_
0d2c0                 | LR__1042
0d2c0     A7 22 02 FB | 	rdlong	local03, fp
0d2c4     02 22 66 F0 | 	shl	local03, #2
0d2c8     38 4E 05 F1 | 	add	fp, #56
0d2cc     A7 22 02 F1 | 	add	local03, fp
0d2d0     11 01 68 FC | 	wrlong	#0, local03
0d2d4     38 4E 85 F1 | 	sub	fp, #56
0d2d8     A7 22 02 FB | 	rdlong	local03, fp
0d2dc     01 22 06 F1 | 	add	local03, #1
0d2e0     A7 22 62 FC | 	wrlong	local03, fp
0d2e4     10 22 56 F2 | 	cmps	local03, #16 wc
0d2e8     D4 FF 9F CD |  if_b	jmp	#LR__1042
0d2ec                 | LR__1043
0d2ec     04 4E 85 F1 | 	sub	fp, #4
0d2f0                 | ' for i=numpar to 2 step -1 
0d2f0     A7 1E 02 FB | 	rdlong	local01, fp
0d2f4     04 4E 05 F1 | 	add	fp, #4
0d2f8     A7 1E 62 FC | 	wrlong	local01, fp
0d2fc     04 4E 85 F1 | 	sub	fp, #4
0d300                 | LR__1044
0d300     C4 CD BF FD | 	call	#_pop
0d304     2C 4E 05 F1 | 	add	fp, #44
0d308     A7 FA 61 FC | 	wrlong	result1, fp
0d30c     04 4E 05 F1 | 	add	fp, #4
0d310     A7 FC 61 FC | 	wrlong	result2, fp
0d314     04 4E 05 F1 | 	add	fp, #4
0d318     A7 FE 61 FC | 	wrlong	result3, fp
0d31c     30 4E 85 F1 | 	sub	fp, #48
0d320     A7 22 02 FB | 	rdlong	local03, fp
0d324     02 22 86 F1 | 	sub	local03, #2
0d328     02 22 66 F0 | 	shl	local03, #2
0d32c     38 4E 05 F1 | 	add	fp, #56
0d330     A7 22 02 F1 | 	add	local03, fp
0d334     10 4E 85 F1 | 	sub	fp, #16
0d338     A7 12 02 F6 | 	mov	arg01, fp
0d33c     2C 4E 85 F1 | 	sub	fp, #44
0d340     84 57 B0 FD | 	call	#_converttofloat
0d344     11 FB 61 FC | 	wrlong	result1, local03
0d348     04 4E 05 F1 | 	add	fp, #4
0d34c     A7 22 02 FB | 	rdlong	local03, fp
0d350     01 22 86 F1 | 	sub	local03, #1
0d354     A7 22 62 FC | 	wrlong	local03, fp
0d358     04 4E 85 F1 | 	sub	fp, #4
0d35c     02 22 56 F2 | 	cmps	local03, #2 wc
0d360     9C FF 9F 3D |  if_ae	jmp	#LR__1044
0d364     60 CD BF FD | 	call	#_pop
0d368     FF 1E 02 F6 | 	mov	local01, result3
0d36c     2C 4E 05 F1 | 	add	fp, #44
0d370     A7 FA 61 FC | 	wrlong	result1, fp
0d374     04 4E 05 F1 | 	add	fp, #4
0d378     A7 FC 61 FC | 	wrlong	result2, fp
0d37c     04 4E 05 F1 | 	add	fp, #4
0d380     A7 1E 62 FC | 	wrlong	local01, fp
0d384     08 4E 85 F1 | 	sub	fp, #8
0d388     A7 12 02 F6 | 	mov	arg01, fp
0d38c     2C 4E 85 F1 | 	sub	fp, #44
0d390     88 56 B0 FD | 	call	#_converttoint
0d394     FD 1E 02 F6 | 	mov	local01, result1
0d398     10 4E 05 F1 | 	add	fp, #16
0d39c     A7 1E 62 FC | 	wrlong	local01, fp
0d3a0     10 4E 85 F1 | 	sub	fp, #16
0d3a4                 | ' t1=pop()
0d3a4                 | ' channel=converttoint(t1) : print channel
0d3a4     00 12 06 F6 | 	mov	arg01, #0
0d3a8     DC 48 B1 FD | 	call	#__system___getiolock_0474
0d3ac     FD 12 02 F6 | 	mov	arg01, result1
0d3b0     44 EF B0 FD | 	call	#__system___lockmem
0d3b4     10 4E 05 F1 | 	add	fp, #16
0d3b8     A7 14 02 FB | 	rdlong	arg02, fp
0d3bc     10 4E 85 F1 | 	sub	fp, #16
0d3c0     00 12 06 F6 | 	mov	arg01, #0
0d3c4     00 16 06 F6 | 	mov	arg03, #0
0d3c8     0A 18 06 F6 | 	mov	arg04, #10
0d3cc     70 FC B0 FD | 	call	#__system___basic_print_integer
0d3d0     00 12 06 F6 | 	mov	arg01, #0
0d3d4     0A 14 06 F6 | 	mov	arg02, #10
0d3d8     00 16 06 F6 | 	mov	arg03, #0
0d3dc     C4 FB B0 FD | 	call	#__system___basic_print_char
0d3e0     00 12 06 F6 | 	mov	arg01, #0
0d3e4     A0 48 B1 FD | 	call	#__system___getiolock_0474
0d3e8     FD 00 68 FC | 	wrlong	#0, result1
0d3ec                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0d3ec     08 4E 05 F1 | 	add	fp, #8
0d3f0     02 00 80 FF 
0d3f4     A7 00 68 FC | 	wrlong	##1024, fp
0d3f8     08 4E 85 F1 | 	sub	fp, #8
0d3fc     0C 00 00 FF 
0d400     CC E4 05 F1 | 	add	objptr, ##6348
0d404     97 18 48 FB | 	callpa	#(@LR__1047-@LR__1045)>>2,fcache_load_ptr_
0d408                 | LR__1045
0d408     02 00 00 FF 
0d40c     00 14 DC FC | 	rep	@LR__1048, ##1024
0d410                 | LR__1046
0d410     10 4E 05 F1 | 	add	fp, #16
0d414     A7 20 02 FB | 	rdlong	local02, fp
0d418     0B 20 66 F0 | 	shl	local02, #11
0d41c     F2 20 02 F1 | 	add	local02, objptr
0d420     0C 4E 85 F1 | 	sub	fp, #12
0d424     A7 22 02 FB | 	rdlong	local03, fp
0d428     04 4E 85 F1 | 	sub	fp, #4
0d42c     01 22 66 F0 | 	shl	local03, #1
0d430     10 23 02 F1 | 	add	local03, local02
0d434     11 01 58 FC | 	wrword	#0, local03
0d438                 | LR__1047
0d438                 | LR__1048
0d438     0C 00 00 FF 
0d43c     CC E4 85 F1 | 	sub	objptr, ##6348
0d440     20 4E 05 F1 | 	add	fp, #32
0d444     A7 00 68 FC | 	wrlong	#0, fp
0d448                 | ' max=0
0d448                 | ' if harm(0)<0 then
0d448     1C 4E 05 F1 | 	add	fp, #28
0d44c     A7 12 02 FB | 	rdlong	arg01, fp
0d450     3C 4E 85 F1 | 	sub	fp, #60
0d454     00 14 06 F6 | 	mov	arg02, #0
0d458     01 16 06 F6 | 	mov	arg03, #1
0d45c     48 1E B1 FD | 	call	#__system___float_cmp
0d460     00 FA 55 F2 | 	cmps	result1, #0 wc
0d464     04 01 90 3D |  if_ae	jmp	#LR__1051
0d468     3C 4E 05 F1 | 	add	fp, #60
0d46c     A7 FA 01 FB | 	rdlong	result1, fp
0d470     1F FA 05 F4 | 	bitl	result1, #31
0d474     24 4E 85 F1 | 	sub	fp, #36
0d478     A7 FA 61 FC | 	wrlong	result1, fp
0d47c     28 4E 05 F1 | 	add	fp, #40
0d480     A7 FA 01 FB | 	rdlong	result1, fp
0d484     1F FA 05 F4 | 	bitl	result1, #31
0d488     24 4E 85 F1 | 	sub	fp, #36
0d48c     A7 FA 61 FC | 	wrlong	result1, fp
0d490     20 4E 05 F1 | 	add	fp, #32
0d494     00 C0 9F FF 
0d498     A7 00 68 FC | 	wrlong	##1065353216, fp
0d49c     24 4E 85 F1 | 	sub	fp, #36
0d4a0     A7 1E 02 FB | 	rdlong	local01, fp
0d4a4     28 4E 05 F1 | 	add	fp, #40
0d4a8     A7 1E 62 FC | 	wrlong	local01, fp
0d4ac     24 4E 85 F1 | 	sub	fp, #36
0d4b0     A7 1E 02 FB | 	rdlong	local01, fp
0d4b4     28 4E 05 F1 | 	add	fp, #40
0d4b8     A7 1E 62 FC | 	wrlong	local01, fp
0d4bc                 | '   harm(0)=1
0d4bc                 | '   harm(1)=even
0d4bc                 | '   harm(2)=odd
0d4bc                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0d4bc     40 4E 85 F1 | 	sub	fp, #64
0d4c0     A7 06 68 FC | 	wrlong	#3, fp
0d4c4                 | LR__1049
0d4c4     A7 22 02 FB | 	rdlong	local03, fp
0d4c8     11 27 02 F6 | 	mov	local05, local03
0d4cc     02 26 66 F0 | 	shl	local05, #2
0d4d0     38 4E 05 F1 | 	add	fp, #56
0d4d4     A7 26 02 F1 | 	add	local05, fp
0d4d8     02 22 86 F1 | 	sub	local03, #2
0d4dc     02 22 66 F0 | 	shl	local03, #2
0d4e0     A7 22 02 F1 | 	add	local03, fp
0d4e4     11 13 02 FB | 	rdlong	arg01, local03
0d4e8     24 4E 85 F1 | 	sub	fp, #36
0d4ec     A7 14 02 FB | 	rdlong	arg02, fp
0d4f0     18 4E 85 F1 | 	sub	fp, #24
0d4f4     7C 19 B1 FD | 	call	#__system___float_mul
0d4f8     13 FB 61 FC | 	wrlong	result1, local05
0d4fc     04 4E 05 F1 | 	add	fp, #4
0d500     A7 22 02 FB | 	rdlong	local03, fp
0d504     02 22 06 F1 | 	add	local03, #2
0d508     A7 22 62 FC | 	wrlong	local03, fp
0d50c     10 22 56 F2 | 	cmps	local03, #16 wc
0d510     B0 FF 9F CD |  if_b	jmp	#LR__1049
0d514                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0d514     A7 08 68 FC | 	wrlong	#4, fp
0d518                 | LR__1050
0d518     A7 22 02 FB | 	rdlong	local03, fp
0d51c     11 27 02 F6 | 	mov	local05, local03
0d520     02 26 66 F0 | 	shl	local05, #2
0d524     38 4E 05 F1 | 	add	fp, #56
0d528     A7 26 02 F1 | 	add	local05, fp
0d52c     02 22 86 F1 | 	sub	local03, #2
0d530     02 22 66 F0 | 	shl	local03, #2
0d534     A7 22 02 F1 | 	add	local03, fp
0d538     11 13 02 FB | 	rdlong	arg01, local03
0d53c     20 4E 85 F1 | 	sub	fp, #32
0d540     A7 14 02 FB | 	rdlong	arg02, fp
0d544     1C 4E 85 F1 | 	sub	fp, #28
0d548     28 19 B1 FD | 	call	#__system___float_mul
0d54c     13 FB 61 FC | 	wrlong	result1, local05
0d550     04 4E 05 F1 | 	add	fp, #4
0d554     A7 22 02 FB | 	rdlong	local03, fp
0d558     02 22 06 F1 | 	add	local03, #2
0d55c     A7 22 62 FC | 	wrlong	local03, fp
0d560     0F 22 56 F2 | 	cmps	local03, #15 wc
0d564     B0 FF 9F CD |  if_b	jmp	#LR__1050
0d568     04 4E 85 F1 | 	sub	fp, #4
0d56c                 | LR__1051
0d56c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0d56c     3C 4E 05 F1 | 	add	fp, #60
0d570     A7 12 02 FB | 	rdlong	arg01, fp
0d574     3C 4E 85 F1 | 	sub	fp, #60
0d578     00 14 06 F6 | 	mov	arg02, #0
0d57c     01 16 66 F6 | 	neg	arg03, #1
0d580     24 1D B1 FD | 	call	#__system___float_cmp
0d584     00 FA 55 F2 | 	cmps	result1, #0 wc
0d588     B0 02 90 CD |  if_b	jmp	#LR__1057
0d58c                 | '   for i=0 to 1023
0d58c     04 4E 05 F1 | 	add	fp, #4
0d590     A7 00 68 FC | 	wrlong	#0, fp
0d594     04 4E 85 F1 | 	sub	fp, #4
0d598                 | LR__1052
0d598     24 4E 05 F1 | 	add	fp, #36
0d59c     A7 00 68 FC | 	wrlong	#0, fp
0d5a0                 | '     spl=0
0d5a0                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0d5a0     1C 4E 85 F1 | 	sub	fp, #28
0d5a4     A7 00 68 FC | 	wrlong	#0, fp
0d5a8                 | LR__1053
0d5a8     A7 26 02 FB | 	rdlong	local05, fp
0d5ac     02 26 66 F0 | 	shl	local05, #2
0d5b0     34 4E 05 F1 | 	add	fp, #52
0d5b4     A7 26 02 F1 | 	add	local05, fp
0d5b8     13 23 02 FB | 	rdlong	local03, local05
0d5bc     87 E4 1D FF 
0d5c0     DB 27 06 F6 | 	mov	local05, ##1003032539
0d5c4     38 4E 85 F1 | 	sub	fp, #56
0d5c8     A7 12 02 FB | 	rdlong	arg01, fp
0d5cc     04 4E 85 F1 | 	sub	fp, #4
0d5d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5d4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d5d8     00 24 06 36 |  if_ae	mov	local04, #0
0d5dc     90 14 B1 FD | 	call	#__system___float_fromuns
0d5e0     12 FB 61 F5 | 	xor	result1, local04
0d5e4     FD 14 02 F6 | 	mov	arg02, result1
0d5e8     13 13 02 F6 | 	mov	arg01, local05
0d5ec     84 18 B1 FD | 	call	#__system___float_mul
0d5f0     FD 26 02 F6 | 	mov	local05, result1
0d5f4     08 4E 05 F1 | 	add	fp, #8
0d5f8     A7 12 02 FB | 	rdlong	arg01, fp
0d5fc     08 4E 85 F1 | 	sub	fp, #8
0d600     01 12 06 F1 | 	add	arg01, #1
0d604     09 13 52 F6 | 	abs	arg01, arg01 wc
0d608     1F 24 C6 C9 |  if_b	decod	local04, #31
0d60c     00 24 06 36 |  if_ae	mov	local04, #0
0d610     5C 14 B1 FD | 	call	#__system___float_fromuns
0d614     12 FB 61 F5 | 	xor	result1, local04
0d618     FD 14 02 F6 | 	mov	arg02, result1
0d61c     13 13 02 F6 | 	mov	arg01, local05
0d620     50 18 B1 FD | 	call	#__system___float_mul
0d624     FD 12 02 F6 | 	mov	arg01, result1
0d628     84 21 B1 FD | 	call	#__system____builtin_sinf
0d62c     FD 14 02 F6 | 	mov	arg02, result1
0d630     11 13 02 F6 | 	mov	arg01, local03
0d634     3C 18 B1 FD | 	call	#__system___float_mul
0d638     FD 14 02 F6 | 	mov	arg02, result1
0d63c     24 4E 05 F1 | 	add	fp, #36
0d640     A7 12 02 FB | 	rdlong	arg01, fp
0d644     24 4E 85 F1 | 	sub	fp, #36
0d648     58 14 B1 FD | 	call	#__system___float_add
0d64c     24 4E 05 F1 | 	add	fp, #36
0d650     A7 FA 61 FC | 	wrlong	result1, fp
0d654     1C 4E 85 F1 | 	sub	fp, #28
0d658     A7 16 02 FB | 	rdlong	arg03, fp
0d65c     01 16 06 F1 | 	add	arg03, #1
0d660     A7 16 62 FC | 	wrlong	arg03, fp
0d664     10 16 56 F2 | 	cmps	arg03, #16 wc
0d668     3C FF 9F CD |  if_b	jmp	#LR__1053
0d66c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0d66c     1C 4E 05 F1 | 	add	fp, #28
0d670     A7 12 02 FB | 	rdlong	arg01, fp
0d674     1F 12 06 F4 | 	bitl	arg01, #31
0d678     04 4E 85 F1 | 	sub	fp, #4
0d67c     A7 14 02 FB | 	rdlong	arg02, fp
0d680     20 4E 85 F1 | 	sub	fp, #32
0d684     01 16 66 F6 | 	neg	arg03, #1
0d688     1C 1C B1 FD | 	call	#__system___float_cmp
0d68c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d690     18 00 90 CD |  if_b	jmp	#LR__1054
0d694     24 4E 05 F1 | 	add	fp, #36
0d698     A7 FA 01 FB | 	rdlong	result1, fp
0d69c     1F FA 05 F4 | 	bitl	result1, #31
0d6a0     04 4E 85 F1 | 	sub	fp, #4
0d6a4     A7 FA 61 FC | 	wrlong	result1, fp
0d6a8     20 4E 85 F1 | 	sub	fp, #32
0d6ac                 | LR__1054
0d6ac     04 4E 05 F1 | 	add	fp, #4
0d6b0     A7 22 02 FB | 	rdlong	local03, fp
0d6b4     01 22 06 F1 | 	add	local03, #1
0d6b8     A7 22 62 FC | 	wrlong	local03, fp
0d6bc     04 4E 85 F1 | 	sub	fp, #4
0d6c0     02 00 00 FF 
0d6c4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d6c8     CC FE 9F CD |  if_b	jmp	#LR__1052
0d6cc                 | '   for i=0 to 1023
0d6cc     04 4E 05 F1 | 	add	fp, #4
0d6d0     A7 00 68 FC | 	wrlong	#0, fp
0d6d4     04 4E 85 F1 | 	sub	fp, #4
0d6d8                 | LR__1055
0d6d8     24 4E 05 F1 | 	add	fp, #36
0d6dc     A7 00 68 FC | 	wrlong	#0, fp
0d6e0                 | '     spl=0
0d6e0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0d6e0     1C 4E 85 F1 | 	sub	fp, #28
0d6e4     A7 00 68 FC | 	wrlong	#0, fp
0d6e8                 | LR__1056
0d6e8     A7 26 02 FB | 	rdlong	local05, fp
0d6ec     02 26 66 F0 | 	shl	local05, #2
0d6f0     34 4E 05 F1 | 	add	fp, #52
0d6f4     A7 26 02 F1 | 	add	local05, fp
0d6f8     13 27 02 FB | 	rdlong	local05, local05
0d6fc     1C 4E 85 F1 | 	sub	fp, #28
0d700     A7 14 02 FB | 	rdlong	arg02, fp
0d704     20 4E 85 F1 | 	sub	fp, #32
0d708     58 7F 23 FF 
0d70c     00 12 06 F6 | 	mov	arg01, ##1191096320
0d710     64 19 B1 FD | 	call	#__system___float_div
0d714     FD 14 02 F6 | 	mov	arg02, result1
0d718     13 13 02 F6 | 	mov	arg01, local05
0d71c     54 17 B1 FD | 	call	#__system___float_mul
0d720     FD 22 02 F6 | 	mov	local03, result1
0d724     87 E4 1D FF 
0d728     DB 27 06 F6 | 	mov	local05, ##1003032539
0d72c     04 4E 05 F1 | 	add	fp, #4
0d730     A7 12 02 FB | 	rdlong	arg01, fp
0d734     04 4E 85 F1 | 	sub	fp, #4
0d738     09 13 52 F6 | 	abs	arg01, arg01 wc
0d73c     1F 24 C6 C9 |  if_b	decod	local04, #31
0d740     00 24 06 36 |  if_ae	mov	local04, #0
0d744     28 13 B1 FD | 	call	#__system___float_fromuns
0d748     12 FB 61 F5 | 	xor	result1, local04
0d74c     FD 14 02 F6 | 	mov	arg02, result1
0d750     13 13 02 F6 | 	mov	arg01, local05
0d754     1C 17 B1 FD | 	call	#__system___float_mul
0d758     FD 26 02 F6 | 	mov	local05, result1
0d75c     08 4E 05 F1 | 	add	fp, #8
0d760     A7 12 02 FB | 	rdlong	arg01, fp
0d764     08 4E 85 F1 | 	sub	fp, #8
0d768     01 12 06 F1 | 	add	arg01, #1
0d76c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d770     1F 24 C6 C9 |  if_b	decod	local04, #31
0d774     00 24 06 36 |  if_ae	mov	local04, #0
0d778     F4 12 B1 FD | 	call	#__system___float_fromuns
0d77c     12 FB 61 F5 | 	xor	result1, local04
0d780     FD 14 02 F6 | 	mov	arg02, result1
0d784     13 13 02 F6 | 	mov	arg01, local05
0d788     E8 16 B1 FD | 	call	#__system___float_mul
0d78c     FD 12 02 F6 | 	mov	arg01, result1
0d790     1C 20 B1 FD | 	call	#__system____builtin_sinf
0d794     FD 14 02 F6 | 	mov	arg02, result1
0d798     11 13 02 F6 | 	mov	arg01, local03
0d79c     D4 16 B1 FD | 	call	#__system___float_mul
0d7a0     FD 14 02 F6 | 	mov	arg02, result1
0d7a4     24 4E 05 F1 | 	add	fp, #36
0d7a8     A7 12 02 FB | 	rdlong	arg01, fp
0d7ac     24 4E 85 F1 | 	sub	fp, #36
0d7b0     F0 12 B1 FD | 	call	#__system___float_add
0d7b4     24 4E 05 F1 | 	add	fp, #36
0d7b8     A7 FA 61 FC | 	wrlong	result1, fp
0d7bc     1C 4E 85 F1 | 	sub	fp, #28
0d7c0     A7 26 02 FB | 	rdlong	local05, fp
0d7c4     01 26 06 F1 | 	add	local05, #1
0d7c8     A7 26 62 FC | 	wrlong	local05, fp
0d7cc     10 26 56 F2 | 	cmps	local05, #16 wc
0d7d0     14 FF 9F CD |  if_b	jmp	#LR__1056
0d7d4     08 4E 05 F1 | 	add	fp, #8
0d7d8     A7 26 02 FB | 	rdlong	local05, fp
0d7dc     0B 26 66 F0 | 	shl	local05, #11
0d7e0     0C 00 00 FF 
0d7e4     CC E4 05 F1 | 	add	objptr, ##6348
0d7e8     F2 26 02 F1 | 	add	local05, objptr
0d7ec     0C 4E 85 F1 | 	sub	fp, #12
0d7f0     A7 20 02 FB | 	rdlong	local02, fp
0d7f4     01 20 66 F0 | 	shl	local02, #1
0d7f8     13 21 02 F1 | 	add	local02, local05
0d7fc     20 4E 05 F1 | 	add	fp, #32
0d800     A7 12 02 FB | 	rdlong	arg01, fp
0d804     24 4E 85 F1 | 	sub	fp, #36
0d808     0C 00 00 FF 
0d80c     CC E4 85 F1 | 	sub	objptr, ##6348
0d810     01 14 06 F6 | 	mov	arg02, #1
0d814     24 1B B1 FD | 	call	#__system___float_tointeger
0d818     10 FB 51 FC | 	wrword	result1, local02
0d81c     04 4E 05 F1 | 	add	fp, #4
0d820     A7 22 02 FB | 	rdlong	local03, fp
0d824     01 22 06 F1 | 	add	local03, #1
0d828     A7 22 62 FC | 	wrlong	local03, fp
0d82c     04 4E 85 F1 | 	sub	fp, #4
0d830     02 00 00 FF 
0d834     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d838     9C FE 9F CD |  if_b	jmp	#LR__1055
0d83c                 | LR__1057
0d83c                 | LR__1058
0d83c     A7 F0 03 F6 | 	mov	ptra, fp
0d840     B2 00 A0 FD | 	call	#popregs_
0d844                 | _do_defsnd_ret
0d844     2D 00 64 FD | 	ret
0d848                 | 
0d848                 | ' 
0d848                 | ' ' ---------------  List the program. 
0d848                 | ' 
0d848                 | ' sub do_list
0d848                 | _do_list
0d848     02 4A 05 F6 | 	mov	COUNT_, #2
0d84c     A8 00 A0 FD | 	call	#pushregs_
0d850     B8 F0 07 F1 | 	add	ptra, #184
0d854     04 4E 05 F1 | 	add	fp, #4
0d858     A7 00 68 FC | 	wrlong	#0, fp
0d85c     04 4E 05 F1 | 	add	fp, #4
0d860     FF FF BF FF 
0d864     A7 FE 6B FC | 	wrlong	##2147483647, fp
0d868     08 4E 85 F1 | 	sub	fp, #8
0d86c     6A 00 00 FF 
0d870     64 E4 05 F1 | 	add	objptr, ##54372
0d874     F2 1E 02 FB | 	rdlong	local01, objptr
0d878     0F 17 02 F6 | 	mov	arg03, local01
0d87c     01 16 66 F0 | 	shl	arg03, #1
0d880     0F 17 02 F1 | 	add	arg03, local01
0d884     02 16 66 F0 | 	shl	arg03, #2
0d888     03 00 00 FF 
0d88c     04 E4 85 F1 | 	sub	objptr, ##1540
0d890     F2 16 02 F1 | 	add	arg03, objptr
0d894     0B 17 02 FB | 	rdlong	arg03, arg03
0d898     A7 16 62 FC | 	wrlong	arg03, fp
0d89c                 | ' 
0d89c                 | ' startline=0 : endline=$7FFFFFFF
0d89c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d89c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0d89c     01 16 0E F2 | 	cmp	arg03, #1 wz
0d8a0     67 00 00 FF 
0d8a4     60 E4 85 F1 | 	sub	objptr, ##52832
0d8a8     3C 00 90 5D |  if_ne	jmp	#LR__1060
0d8ac     18 C8 BF FD | 	call	#_pop
0d8b0     FF 1E 02 F6 | 	mov	local01, result3
0d8b4     0C 4E 05 F1 | 	add	fp, #12
0d8b8     A7 FA 61 FC | 	wrlong	result1, fp
0d8bc     04 4E 05 F1 | 	add	fp, #4
0d8c0     A7 FC 61 FC | 	wrlong	result2, fp
0d8c4     04 4E 05 F1 | 	add	fp, #4
0d8c8     A7 1E 62 FC | 	wrlong	local01, fp
0d8cc     08 4E 85 F1 | 	sub	fp, #8
0d8d0     A7 12 02 F6 | 	mov	arg01, fp
0d8d4     0C 4E 85 F1 | 	sub	fp, #12
0d8d8     40 51 B0 FD | 	call	#_converttoint
0d8dc     04 4E 05 F1 | 	add	fp, #4
0d8e0     A7 FA 61 FC | 	wrlong	result1, fp
0d8e4     04 4E 85 F1 | 	sub	fp, #4
0d8e8                 | LR__1060
0d8e8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0d8e8     A7 16 02 FB | 	rdlong	arg03, fp
0d8ec     02 16 0E F2 | 	cmp	arg03, #2 wz
0d8f0     7C 00 90 5D |  if_ne	jmp	#LR__1061
0d8f4     D0 C7 BF FD | 	call	#_pop
0d8f8     FF 1E 02 F6 | 	mov	local01, result3
0d8fc     0C 4E 05 F1 | 	add	fp, #12
0d900     A7 FA 61 FC | 	wrlong	result1, fp
0d904     04 4E 05 F1 | 	add	fp, #4
0d908     A7 FC 61 FC | 	wrlong	result2, fp
0d90c     04 4E 05 F1 | 	add	fp, #4
0d910     A7 1E 62 FC | 	wrlong	local01, fp
0d914     08 4E 85 F1 | 	sub	fp, #8
0d918     A7 12 02 F6 | 	mov	arg01, fp
0d91c     0C 4E 85 F1 | 	sub	fp, #12
0d920     F8 50 B0 FD | 	call	#_converttoint
0d924     FD 1E 02 F6 | 	mov	local01, result1
0d928     08 4E 05 F1 | 	add	fp, #8
0d92c     A7 1E 62 FC | 	wrlong	local01, fp
0d930     08 4E 85 F1 | 	sub	fp, #8
0d934     90 C7 BF FD | 	call	#_pop
0d938     FF 1E 02 F6 | 	mov	local01, result3
0d93c     0C 4E 05 F1 | 	add	fp, #12
0d940     A7 FA 61 FC | 	wrlong	result1, fp
0d944     04 4E 05 F1 | 	add	fp, #4
0d948     A7 FC 61 FC | 	wrlong	result2, fp
0d94c     04 4E 05 F1 | 	add	fp, #4
0d950     A7 1E 62 FC | 	wrlong	local01, fp
0d954     08 4E 85 F1 | 	sub	fp, #8
0d958     A7 12 02 F6 | 	mov	arg01, fp
0d95c     0C 4E 85 F1 | 	sub	fp, #12
0d960     B8 50 B0 FD | 	call	#_converttoint
0d964     04 4E 05 F1 | 	add	fp, #4
0d968     A7 FA 61 FC | 	wrlong	result1, fp
0d96c     04 4E 85 F1 | 	sub	fp, #4
0d970                 | LR__1061
0d970                 | ' 
0d970                 | ' 
0d970                 | ' print
0d970     00 12 06 F6 | 	mov	arg01, #0
0d974     10 43 B1 FD | 	call	#__system___getiolock_0474
0d978     FD 12 02 F6 | 	mov	arg01, result1
0d97c     78 E9 B0 FD | 	call	#__system___lockmem
0d980     00 12 06 F6 | 	mov	arg01, #0
0d984     0A 14 06 F6 | 	mov	arg02, #10
0d988     00 16 06 F6 | 	mov	arg03, #0
0d98c     14 F6 B0 FD | 	call	#__system___basic_print_char
0d990     00 12 06 F6 | 	mov	arg01, #0
0d994     F0 42 B1 FD | 	call	#__system___getiolock_0474
0d998     FD 00 68 FC | 	wrlong	#0, result1
0d99c     6A 00 00 FF 
0d9a0     68 E4 05 F1 | 	add	objptr, ##54376
0d9a4     F2 20 02 FB | 	rdlong	local02, objptr
0d9a8     11 00 00 FF 
0d9ac     84 E4 05 F1 | 	add	objptr, ##8836
0d9b0     F2 20 62 FC | 	wrlong	local02, objptr
0d9b4     7B 00 00 FF 
0d9b8     EC E4 85 F1 | 	sub	objptr, ##63212
0d9bc                 | ' do 
0d9bc                 | LR__1062
0d9bc     20 4E 05 F1 | 	add	fp, #32
0d9c0     A7 12 02 F6 | 	mov	arg01, fp
0d9c4     20 4E 85 F1 | 	sub	fp, #32
0d9c8     7B 00 00 FF 
0d9cc     EC E4 05 F1 | 	add	objptr, ##63212
0d9d0     F2 14 02 FB | 	rdlong	arg02, objptr
0d9d4     18 16 06 F6 | 	mov	arg03, #24
0d9d8     70 00 00 FF 
0d9dc     2C E4 85 F1 | 	sub	objptr, ##57388
0d9e0     10 DD B0 FD | 	call	#_psram_spin2_read1
0d9e4     0B 00 00 FF 
0d9e8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d9ec                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0d9ec                 | '   
0d9ec                 | '   if header(0)<> $FFFFFFFF then
0d9ec     20 4E 05 F1 | 	add	fp, #32
0d9f0     A7 20 02 FB | 	rdlong	local02, fp
0d9f4     20 4E 85 F1 | 	sub	fp, #32
0d9f8     FF FF 7F FF 
0d9fc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0da00     A8 00 90 AD |  if_e	jmp	#LR__1064
0da04     38 4E 05 F1 | 	add	fp, #56
0da08     3F 16 06 F6 | 	mov	arg03, #63
0da0c     28 16 62 FD | 	setq	arg03
0da10     A7 00 68 FC | 	wrlong	#0, fp
0da14     A7 12 02 F6 | 	mov	arg01, fp
0da18     10 4E 85 F1 | 	sub	fp, #16
0da1c     A7 14 02 FB | 	rdlong	arg02, fp
0da20     04 4E 05 F1 | 	add	fp, #4
0da24     A7 16 02 FB | 	rdlong	arg03, fp
0da28     2C 4E 85 F1 | 	sub	fp, #44
0da2c     0B 00 00 FF 
0da30     C0 E4 05 F1 | 	add	objptr, ##5824
0da34     BC DC B0 FD | 	call	#_psram_spin2_read1
0da38     0B 00 00 FF 
0da3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0da40                 | '     longfill(linebuf,0,64)
0da40                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0da40                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0da40     20 4E 05 F1 | 	add	fp, #32
0da44     A7 20 02 FB | 	rdlong	local02, fp
0da48     1C 4E 85 F1 | 	sub	fp, #28
0da4c     A7 1E 02 FB | 	rdlong	local01, fp
0da50     04 4E 85 F1 | 	sub	fp, #4
0da54     0F 21 52 F2 | 	cmps	local02, local01 wc
0da58     30 00 90 CD |  if_b	jmp	#LR__1063
0da5c     20 4E 05 F1 | 	add	fp, #32
0da60     A7 20 02 FB | 	rdlong	local02, fp
0da64     18 4E 85 F1 | 	sub	fp, #24
0da68     A7 16 02 FB | 	rdlong	arg03, fp
0da6c     08 4E 85 F1 | 	sub	fp, #8
0da70     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0da74     14 00 90 1D |  if_a	jmp	#LR__1063
0da78     38 4E 05 F1 | 	add	fp, #56
0da7c     A7 12 02 F6 | 	mov	arg01, fp
0da80     38 4E 85 F1 | 	sub	fp, #56
0da84                 | ' 
0da84                 | ' write(text)
0da84     34 D7 B0 FD | 	call	#_hg010b_spin2_write
0da88                 | ' crlf
0da88     90 D8 B0 FD | 	call	#_hg010b_spin2_crlf
0da8c                 | LR__1063
0da8c     34 4E 05 F1 | 	add	fp, #52
0da90     A7 20 02 FB | 	rdlong	local02, fp
0da94     34 4E 85 F1 | 	sub	fp, #52
0da98     7B 00 00 FF 
0da9c     EC E4 05 F1 | 	add	objptr, ##63212
0daa0     F2 20 62 FC | 	wrlong	local02, objptr
0daa4     7B 00 00 FF 
0daa8     EC E4 85 F1 | 	sub	objptr, ##63212
0daac                 | LR__1064
0daac     34 4E 05 F1 | 	add	fp, #52
0dab0     A7 20 02 FB | 	rdlong	local02, fp
0dab4     34 4E 85 F1 | 	sub	fp, #52
0dab8     FF FF 3F FF 
0dabc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0dac0     20 4E 05 51 |  if_ne	add	fp, #32
0dac4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0dac8     20 4E 85 51 |  if_ne	sub	fp, #32
0dacc     FF FF 7F 5F 
0dad0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0dad4     E4 FE 9F 5D |  if_ne	jmp	#LR__1062
0dad8     A7 F0 03 F6 | 	mov	ptra, fp
0dadc     B2 00 A0 FD | 	call	#popregs_
0dae0                 | _do_list_ret
0dae0     2D 00 64 FD | 	ret
0dae4                 | 
0dae4                 | ' 
0dae4                 | ' '---------------- Clear the program
0dae4                 | ' 
0dae4                 | ' sub do_new
0dae4                 | _do_new
0dae4     03 4A 05 F6 | 	mov	COUNT_, #3
0dae8     A8 00 A0 FD | 	call	#pushregs_
0daec     00 12 06 F6 | 	mov	arg01, #0
0daf0     01 14 66 F6 | 	neg	arg02, #1
0daf4     C4 B1 B0 FD | 	call	#_pslpoke
0daf8     54 00 00 FF 
0dafc     EC E5 05 F1 | 	add	objptr, ##43500
0db00     F2 00 68 FC | 	wrlong	#0, objptr
0db04     15 00 00 FF 
0db08     7C E4 05 F1 | 	add	objptr, ##10876
0db0c     F2 00 68 FC | 	wrlong	#0, objptr
0db10     0F 00 00 FF 
0db14     2C E5 05 F1 | 	add	objptr, ##7980
0db18     F2 00 68 FC | 	wrlong	#0, objptr
0db1c     04 E4 05 F1 | 	add	objptr, #4
0db20     F2 00 68 FC | 	wrlong	#0, objptr
0db24     16 00 00 FF 
0db28     5C E5 85 F1 | 	sub	objptr, ##11612
0db2c     F2 00 68 FC | 	wrlong	#0, objptr
0db30     07 00 00 FF 
0db34     24 E4 05 F1 | 	add	objptr, ##3620
0db38     F2 00 68 FC | 	wrlong	#0, objptr
0db3c     07 00 00 FF 
0db40     20 E4 85 F1 | 	sub	objptr, ##3616
0db44     F2 00 68 FC | 	wrlong	#0, objptr
0db48     0F 00 00 FF 
0db4c     34 E4 05 F1 | 	add	objptr, ##7732
0db50     F2 00 68 FC | 	wrlong	#0, objptr
0db54     08 00 00 FF 
0db58     08 E4 85 F1 | 	sub	objptr, ##4104
0db5c     F2 00 68 FC | 	wrlong	#0, objptr
0db60     04 E4 05 F1 | 	add	objptr, #4
0db64     FF FF FF FF 
0db68     F2 FE 6B FC | 	wrlong	##-1, objptr
0db6c     0F 00 00 FF 
0db70     4C E5 05 F1 | 	add	objptr, ##8012
0db74     F2 00 68 FC | 	wrlong	#0, objptr
0db78                 | ' 
0db78                 | ' pslpoke(0,$FFFFFFFF)
0db78                 | ' varnum=0
0db78                 | ' programstart=0 :runptr=0 : runptr2=0
0db78                 | ' stackpointer=0
0db78                 | ' lineptr=0 
0db78                 | ' programptr=0 : stringptr=0
0db78                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0db78                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0db78     00 1E 06 F6 | 	mov	local01, #0
0db7c     07 00 00 FF 
0db80     40 E5 85 F1 | 	sub	objptr, ##3904
0db84     97 16 48 FB | 	callpa	#(@LR__1071-@LR__1070)>>2,fcache_load_ptr_
0db88                 | LR__1070
0db88     0F 21 02 F6 | 	mov	local02, local01
0db8c     02 20 66 F0 | 	shl	local02, #2
0db90     0F 21 02 F1 | 	add	local02, local01
0db94     02 20 66 F0 | 	shl	local02, #2
0db98     F2 20 02 F1 | 	add	local02, objptr
0db9c     08 20 06 F1 | 	add	local02, #8
0dba0     FF FF FF FF 
0dba4     10 FF 6B FC | 	wrlong	##-1, local02
0dba8     01 1E 06 F1 | 	add	local01, #1
0dbac     81 1E 56 F2 | 	cmps	local01, #129 wc
0dbb0     D4 FF 9F CD |  if_b	jmp	#LR__1070
0dbb4                 | LR__1071
0dbb4     72 00 00 FF 
0dbb8     7C E4 85 F1 | 	sub	objptr, ##58492
0dbbc                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0dbbc     00 1E 06 F6 | 	mov	local01, #0
0dbc0                 | LR__1072
0dbc0     0F 21 02 F6 | 	mov	local02, local01
0dbc4     02 20 66 F0 | 	shl	local02, #2
0dbc8     7B 00 00 FF 
0dbcc     18 E4 05 F1 | 	add	objptr, ##63000
0dbd0     F2 20 02 F1 | 	add	local02, objptr
0dbd4     10 21 0A FB | 	rdlong	local02, local02 wz
0dbd8     7B 00 00 FF 
0dbdc     18 E4 85 F1 | 	sub	objptr, ##63000
0dbe0     34 00 90 AD |  if_e	jmp	#LR__1073
0dbe4     0F 13 02 F6 | 	mov	arg01, local01
0dbe8     00 14 06 F6 | 	mov	arg02, #0
0dbec     00 16 06 F6 | 	mov	arg03, #0
0dbf0     54 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dbf4     0F 21 02 F6 | 	mov	local02, local01
0dbf8     02 20 66 F0 | 	shl	local02, #2
0dbfc     7B 00 00 FF 
0dc00     18 E4 05 F1 | 	add	objptr, ##63000
0dc04     F2 20 02 F1 | 	add	local02, objptr
0dc08     10 13 02 FB | 	rdlong	arg01, local02
0dc0c     7B 00 00 FF 
0dc10     18 E4 85 F1 | 	sub	objptr, ##63000
0dc14     64 26 B1 FD | 	call	#__system___gc_free
0dc18                 | LR__1073
0dc18     7B 00 00 FF 
0dc1c     6C E4 05 F1 | 	add	objptr, ##63084
0dc20     00 C0 9F FF 
0dc24     F2 00 68 FC | 	wrlong	##1065353216, objptr
0dc28     04 E4 05 F1 | 	add	objptr, #4
0dc2c     00 C0 9F FF 
0dc30     F2 00 68 FC | 	wrlong	##1065353216, objptr
0dc34     7B 00 00 FF 
0dc38     70 E4 85 F1 | 	sub	objptr, ##63088
0dc3c     F2 22 02 FB | 	rdlong	local03, objptr
0dc40     7B 00 00 FF 
0dc44     5C E4 05 F1 | 	add	objptr, ##63068
0dc48     F2 22 62 FC | 	wrlong	local03, objptr
0dc4c     7B 00 00 FF 
0dc50     5C E4 85 F1 | 	sub	objptr, ##63068
0dc54     11 12 06 F6 | 	mov	arg01, #17
0dc58     08 14 06 F6 | 	mov	arg02, #8
0dc5c     10 16 06 F6 | 	mov	arg03, #16
0dc60     E4 C5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dc64     10 12 06 F6 | 	mov	arg01, #16
0dc68     20 14 06 F6 | 	mov	arg02, #32
0dc6c     20 16 06 F6 | 	mov	arg03, #32
0dc70     D4 C5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dc74     50 A3 B0 FD | 	call	#_init_audio
0dc78     01 1E 06 F1 | 	add	local01, #1
0dc7c     10 1E 56 F2 | 	cmps	local01, #16 wc
0dc80     3C FF 9F CD |  if_b	jmp	#LR__1072
0dc84     A7 F0 03 F6 | 	mov	ptra, fp
0dc88     B2 00 A0 FD | 	call	#popregs_
0dc8c                 | _do_new_ret
0dc8c     2D 00 64 FD | 	ret
0dc90                 | 
0dc90                 | ' 
0dc90                 | ' '----------------------- goto
0dc90                 | ' sub do_fast_goto
0dc90                 | _do_fast_goto
0dc90     02 4A 05 F6 | 	mov	COUNT_, #2
0dc94     A8 00 A0 FD | 	call	#pushregs_
0dc98                 | _do_fast_goto_enter
0dc98     6A 00 00 FF 
0dc9c     64 E4 05 F1 | 	add	objptr, ##54372
0dca0     F2 12 02 FB | 	rdlong	arg01, objptr
0dca4     09 1F 02 F6 | 	mov	local01, arg01
0dca8     01 1E 66 F0 | 	shl	local01, #1
0dcac     09 1F 02 F1 | 	add	local01, arg01
0dcb0     02 1E 66 F0 | 	shl	local01, #2
0dcb4     03 00 00 FF 
0dcb8     04 E4 85 F1 | 	sub	objptr, ##1540
0dcbc     F2 1E 02 F1 | 	add	local01, objptr
0dcc0     0F 21 02 FB | 	rdlong	local02, local01
0dcc4     10 13 02 F6 | 	mov	arg01, local02
0dcc8     67 00 00 FF 
0dccc     60 E4 85 F1 | 	sub	objptr, ##52832
0dcd0     18 B1 B0 FD | 	call	#_pslpeek
0dcd4     FD 12 02 F6 | 	mov	arg01, result1
0dcd8                 | ' 
0dcd8                 | ' testptr=compiledline(lineptr_e).result.uresult
0dcd8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0dcd8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0dcd8     6A 00 00 FF 
0dcdc     64 E4 05 F1 | 	add	objptr, ##54372
0dce0     F2 FA 01 FB | 	rdlong	result1, objptr
0dce4     FD 1E 02 F6 | 	mov	local01, result1
0dce8     01 1E 66 F0 | 	shl	local01, #1
0dcec     FD 1E 02 F1 | 	add	local01, result1
0dcf0     02 1E 66 F0 | 	shl	local01, #2
0dcf4     03 00 00 FF 
0dcf8     04 E4 85 F1 | 	sub	objptr, ##1540
0dcfc     F2 1E 02 F1 | 	add	local01, objptr
0dd00     04 1E 06 F1 | 	add	local01, #4
0dd04     0F 1F 02 FB | 	rdlong	local01, local01
0dd08     0F 13 0A F2 | 	cmp	arg01, local01 wz
0dd0c     67 00 00 FF 
0dd10     60 E4 85 F1 | 	sub	objptr, ##52832
0dd14     58 00 90 5D |  if_ne	jmp	#LR__1080
0dd18     79 00 00 FF 
0dd1c     94 E5 05 F1 | 	add	objptr, ##62356
0dd20     F2 20 62 FC | 	wrlong	local02, objptr
0dd24     0F 00 00 FF 
0dd28     34 E5 85 F1 | 	sub	objptr, ##7988
0dd2c     F2 20 02 FB | 	rdlong	local02, objptr
0dd30     01 20 86 F1 | 	sub	local02, #1
0dd34     04 E4 05 F1 | 	add	objptr, #4
0dd38     F2 20 62 FC | 	wrlong	local02, objptr
0dd3c                 | '   runptr=testptr
0dd3c                 | '   lineptr_e=lineptr-1
0dd3c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0dd3c     0F 00 00 FF 
0dd40     54 E5 05 F1 | 	add	objptr, ##8020
0dd44     F2 20 02 FB | 	rdlong	local02, objptr
0dd48     79 00 00 FF 
0dd4c     B8 E5 85 F1 | 	sub	objptr, ##62392
0dd50     FF FF 3F FF 
0dd54     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0dd58     79 00 00 AF 
0dd5c     B8 E5 05 A1 |  if_e	add	objptr, ##62392
0dd60     F2 00 68 AC |  if_e	wrlong	#0, objptr
0dd64     79 00 00 AF 
0dd68     B8 E5 85 A1 |  if_e	sub	objptr, ##62392
0dd6c     04 00 90 FD | 	jmp	#LR__1081
0dd70                 | LR__1080
0dd70     0C 00 B0 FD | 	call	#_do_find_goto
0dd74                 | LR__1081
0dd74     A7 F0 03 F6 | 	mov	ptra, fp
0dd78     B2 00 A0 FD | 	call	#popregs_
0dd7c                 | _do_fast_goto_ret
0dd7c     2D 00 64 FD | 	ret
0dd80                 | 
0dd80                 | ' 
0dd80                 | ' 
0dd80                 | ' 
0dd80                 | ' 
0dd80                 | ' sub do_find_goto
0dd80                 | _do_find_goto
0dd80     03 4A 05 F6 | 	mov	COUNT_, #3
0dd84     A8 00 A0 FD | 	call	#pushregs_
0dd88     24 F0 07 F1 | 	add	ptra, #36
0dd8c                 | _do_find_goto_enter
0dd8c     6A 00 00 FF 
0dd90     64 E4 05 F1 | 	add	objptr, ##54372
0dd94     F2 1E 02 FB | 	rdlong	local01, objptr
0dd98     0F 21 02 F6 | 	mov	local02, local01
0dd9c     01 20 66 F0 | 	shl	local02, #1
0dda0     0F 21 02 F1 | 	add	local02, local01
0dda4     02 20 66 F0 | 	shl	local02, #2
0dda8     03 00 00 FF 
0ddac     04 E4 85 F1 | 	sub	objptr, ##1540
0ddb0     F2 20 02 F1 | 	add	local02, objptr
0ddb4     04 20 06 F1 | 	add	local02, #4
0ddb8     10 21 02 FB | 	rdlong	local02, local02
0ddbc     A7 20 62 FC | 	wrlong	local02, fp
0ddc0     03 00 00 FF 
0ddc4     08 E4 05 F1 | 	add	objptr, ##1544
0ddc8     F2 22 02 FB | 	rdlong	local03, objptr
0ddcc     6A 00 00 FF 
0ddd0     68 E4 85 F1 | 	sub	objptr, ##54376
0ddd4     04 4E 05 F1 | 	add	fp, #4
0ddd8     A7 22 62 FC | 	wrlong	local03, fp
0dddc     04 4E 85 F1 | 	sub	fp, #4
0dde0                 | ' 
0dde0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0dde0                 | '  ' print "find goto"                                                                     'print gotoline 
0dde0                 | ' gotoptr=programstart
0dde0                 | ' do
0dde0                 | LR__1090
0dde0     0C 4E 05 F1 | 	add	fp, #12
0dde4     A7 12 02 F6 | 	mov	arg01, fp
0dde8     08 4E 85 F1 | 	sub	fp, #8
0ddec     A7 14 02 FB | 	rdlong	arg02, fp
0ddf0     04 4E 85 F1 | 	sub	fp, #4
0ddf4     18 16 06 F6 | 	mov	arg03, #24
0ddf8     0B 00 00 FF 
0ddfc     C0 E4 05 F1 | 	add	objptr, ##5824
0de00     F0 D8 B0 FD | 	call	#_psram_spin2_read1
0de04     0B 00 00 FF 
0de08     C0 E4 85 F1 | 	sub	objptr, ##5824
0de0c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0de0c                 | '   if gotoheader(0)<>$FFFFFFFF then
0de0c     0C 4E 05 F1 | 	add	fp, #12
0de10     A7 22 02 FB | 	rdlong	local03, fp
0de14     0C 4E 85 F1 | 	sub	fp, #12
0de18     FF FF 7F FF 
0de1c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0de20     24 00 90 AD |  if_e	jmp	#LR__1091
0de24     04 4E 05 F1 | 	add	fp, #4
0de28     A7 22 02 FB | 	rdlong	local03, fp
0de2c     04 4E 05 F1 | 	add	fp, #4
0de30     A7 22 62 FC | 	wrlong	local03, fp
0de34     18 4E 05 F1 | 	add	fp, #24
0de38     A7 22 02 FB | 	rdlong	local03, fp
0de3c     1C 4E 85 F1 | 	sub	fp, #28
0de40     A7 22 62 FC | 	wrlong	local03, fp
0de44     04 4E 85 F1 | 	sub	fp, #4
0de48                 | LR__1091
0de48     20 4E 05 F1 | 	add	fp, #32
0de4c     A7 22 02 FB | 	rdlong	local03, fp
0de50     20 4E 85 F1 | 	sub	fp, #32
0de54     FF FF 3F FF 
0de58     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0de5c     0C 4E 05 51 |  if_ne	add	fp, #12
0de60     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0de64     0C 4E 85 51 |  if_ne	sub	fp, #12
0de68     FF FF 7F 5F 
0de6c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0de70     18 00 90 AD |  if_e	jmp	#LR__1092
0de74     0C 4E 05 F1 | 	add	fp, #12
0de78     A7 22 02 FB | 	rdlong	local03, fp
0de7c     0C 4E 85 F1 | 	sub	fp, #12
0de80     A7 20 02 FB | 	rdlong	local02, fp
0de84     10 23 0A F2 | 	cmp	local03, local02 wz
0de88     54 FF 9F 5D |  if_ne	jmp	#LR__1090
0de8c                 | LR__1092
0de8c                 | ' 
0de8c                 | ' if gotoheader(0)=gotoline then
0de8c     0C 4E 05 F1 | 	add	fp, #12
0de90     A7 22 02 FB | 	rdlong	local03, fp
0de94     0C 4E 85 F1 | 	sub	fp, #12
0de98     A7 1E 02 FB | 	rdlong	local01, fp
0de9c     0F 23 0A F2 | 	cmp	local03, local01 wz
0dea0     D8 00 90 5D |  if_ne	jmp	#LR__1093
0dea4     6A 00 00 FF 
0dea8     64 E4 05 F1 | 	add	objptr, ##54372
0deac     F2 1E 02 FB | 	rdlong	local01, objptr
0deb0     0F 21 02 F6 | 	mov	local02, local01
0deb4     01 20 66 F0 | 	shl	local02, #1
0deb8     0F 21 02 F1 | 	add	local02, local01
0debc     02 20 66 F0 | 	shl	local02, #2
0dec0     03 00 00 FF 
0dec4     04 E4 85 F1 | 	sub	objptr, ##1540
0dec8     F2 20 02 F1 | 	add	local02, objptr
0decc     08 4E 05 F1 | 	add	fp, #8
0ded0     A7 22 02 FB | 	rdlong	local03, fp
0ded4     10 23 62 FC | 	wrlong	local03, local02
0ded8     03 00 00 FF 
0dedc     04 E4 05 F1 | 	add	objptr, ##1540
0dee0     F2 1E 02 FB | 	rdlong	local01, objptr
0dee4     0F 21 02 F6 | 	mov	local02, local01
0dee8     01 20 66 F0 | 	shl	local02, #1
0deec     0F 21 02 F1 | 	add	local02, local01
0def0     02 20 66 F0 | 	shl	local02, #2
0def4     03 00 00 FF 
0def8     04 E4 85 F1 | 	sub	objptr, ##1540
0defc     F2 20 02 F1 | 	add	local02, objptr
0df00     08 20 06 F1 | 	add	local02, #8
0df04     10 9D 68 FC | 	wrlong	#78, local02
0df08     03 00 00 FF 
0df0c     04 E4 05 F1 | 	add	objptr, ##1540
0df10     F2 20 02 FB | 	rdlong	local02, objptr
0df14     10 13 02 F6 | 	mov	arg01, local02
0df18     01 12 66 F0 | 	shl	arg01, #1
0df1c     10 13 02 F1 | 	add	arg01, local02
0df20     02 12 66 F0 | 	shl	arg01, #2
0df24     03 00 00 FF 
0df28     04 E4 85 F1 | 	sub	objptr, ##1540
0df2c     F2 12 02 F1 | 	add	arg01, objptr
0df30     12 00 00 FF 
0df34     3C E5 05 F1 | 	add	objptr, ##9532
0df38     F2 14 02 FB | 	rdlong	arg02, objptr
0df3c     02 22 06 F6 | 	mov	local03, #2
0df40     10 23 02 F1 | 	add	local03, local02
0df44     14 00 00 FF 
0df48     54 E5 85 F1 | 	sub	objptr, ##10580
0df4c     F2 16 02 FB | 	rdlong	arg03, objptr
0df50     0B 23 02 FD | 	qmul	local03, arg03
0df54     08 4E 85 F1 | 	sub	fp, #8
0df58     59 00 00 FF 
0df5c     88 E5 85 F1 | 	sub	objptr, ##45960
0df60     18 22 62 FD | 	getqx	local03
0df64     11 15 02 F1 | 	add	arg02, local03
0df68     24 D8 B0 FD | 	call	#_psram_spin2_write
0df6c     0B 00 00 FF 
0df70     C0 E4 85 F1 | 	sub	objptr, ##5824
0df74     18 FD BF FD | 	call	#_do_fast_goto
0df78     08 00 90 FD | 	jmp	#LR__1094
0df7c                 | LR__1093
0df7c     26 12 06 F6 | 	mov	arg01, #38
0df80     D4 AB B0 FD | 	call	#_printerror
0df84                 | LR__1094
0df84     A7 F0 03 F6 | 	mov	ptra, fp
0df88     B2 00 A0 FD | 	call	#popregs_
0df8c                 | _do_find_goto_ret
0df8c     2D 00 64 FD | 	ret
0df90                 | 
0df90                 | ' 
0df90                 | ' sub do_slow_goto
0df90                 | _do_slow_goto
0df90                 | _do_slow_goto_ret
0df90     2D 00 64 FD | 	ret
0df94                 | 
0df94                 | ' 
0df94                 | ' '----------------------- Error processing
0df94                 | ' 
0df94                 | ' sub do_error
0df94                 | _do_error
0df94     01 4A 05 F6 | 	mov	COUNT_, #1
0df98     A8 00 A0 FD | 	call	#pushregs_
0df9c     6A 00 00 FF 
0dfa0     64 E4 05 F1 | 	add	objptr, ##54372
0dfa4     F2 18 02 FB | 	rdlong	arg04, objptr
0dfa8     0C 17 02 F6 | 	mov	arg03, arg04
0dfac     01 16 66 F0 | 	shl	arg03, #1
0dfb0     0C 17 02 F1 | 	add	arg03, arg04
0dfb4     02 16 66 F0 | 	shl	arg03, #2
0dfb8     03 00 00 FF 
0dfbc     04 E4 85 F1 | 	sub	objptr, ##1540
0dfc0     F2 16 02 F1 | 	add	arg03, objptr
0dfc4     0B 1F 02 FB | 	rdlong	local01, arg03
0dfc8                 | ' r=compiledline(lineptr_e).result.uresult
0dfc8                 | ' print "Error ";r;": ";errors$(r)
0dfc8     00 12 06 F6 | 	mov	arg01, #0
0dfcc     67 00 00 FF 
0dfd0     60 E4 85 F1 | 	sub	objptr, ##52832
0dfd4     B0 3C B1 FD | 	call	#__system___getiolock_0474
0dfd8     FD 12 02 F6 | 	mov	arg01, result1
0dfdc     18 E3 B0 FD | 	call	#__system___lockmem
0dfe0     5F 01 00 FF 
0dfe4     F7 14 06 F6 | 	mov	arg02, ##@LR__4933
0dfe8     00 12 06 F6 | 	mov	arg01, #0
0dfec     00 16 06 F6 | 	mov	arg03, #0
0dff0     08 F0 B0 FD | 	call	#__system___basic_print_string
0dff4     00 12 06 F6 | 	mov	arg01, #0
0dff8     0F 15 02 F6 | 	mov	arg02, local01
0dffc     00 16 06 F6 | 	mov	arg03, #0
0e000     0A 18 06 F6 | 	mov	arg04, #10
0e004     78 F0 B0 FD | 	call	#__system___basic_print_unsigned
0e008     5F 01 00 FF 
0e00c     FE 14 06 F6 | 	mov	arg02, ##@LR__4934
0e010     00 12 06 F6 | 	mov	arg01, #0
0e014     00 16 06 F6 | 	mov	arg03, #0
0e018     E0 EF B0 FD | 	call	#__system___basic_print_string
0e01c     02 1E 66 F0 | 	shl	local01, #2
0e020     65 00 00 FF 
0e024     60 E4 05 F1 | 	add	objptr, ##51808
0e028     F2 1E 02 F1 | 	add	local01, objptr
0e02c     0F 15 02 FB | 	rdlong	arg02, local01
0e030     00 12 06 F6 | 	mov	arg01, #0
0e034     00 16 06 F6 | 	mov	arg03, #0
0e038     65 00 00 FF 
0e03c     60 E4 85 F1 | 	sub	objptr, ##51808
0e040     B8 EF B0 FD | 	call	#__system___basic_print_string
0e044     00 12 06 F6 | 	mov	arg01, #0
0e048     0A 14 06 F6 | 	mov	arg02, #10
0e04c     00 16 06 F6 | 	mov	arg03, #0
0e050     50 EF B0 FD | 	call	#__system___basic_print_char
0e054     00 12 06 F6 | 	mov	arg01, #0
0e058     2C 3C B1 FD | 	call	#__system___getiolock_0474
0e05c     FD 00 68 FC | 	wrlong	#0, result1
0e060     A7 F0 03 F6 | 	mov	ptra, fp
0e064     B2 00 A0 FD | 	call	#popregs_
0e068                 | _do_error_ret
0e068     2D 00 64 FD | 	ret
0e06c                 | 
0e06c                 | ' 
0e06c                 | ' 
0e06c                 | ' '------------------ Assigning to a variable  
0e06c                 | ' 
0e06c                 | ' function  convertstring(psaddr as ulong) as string
0e06c                 | _convertstring
0e06c     04 4A 05 F6 | 	mov	COUNT_, #4
0e070     A8 00 A0 FD | 	call	#pushregs_
0e074     09 1F 02 F6 | 	mov	local01, arg01
0e078     70 AD B0 FD | 	call	#_pslpeek
0e07c     FD 20 02 F6 | 	mov	local02, result1
0e080     5F 01 00 FF 
0e084     01 23 06 F6 | 	mov	local03, ##@LR__4935
0e088                 | ' 'print "in convertstring: psaddr=";psaddr
0e088                 | ' l=pslpeek(psaddr)
0e088                 | ' 'print "in convertstring: len=";l
0e088                 | ' s="" 
0e088                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0e088     01 24 06 F6 | 	mov	local04, #1
0e08c     01 20 06 F1 | 	add	local02, #1
0e090                 | LR__1100
0e090     10 25 52 F2 | 	cmps	local04, local02 wc
0e094     30 00 90 3D |  if_ae	jmp	#LR__1101
0e098     0F 13 02 F6 | 	mov	arg01, local01
0e09c     03 12 06 F1 | 	add	arg01, #3
0e0a0     12 13 02 F1 | 	add	arg01, local04
0e0a4     EC AC B0 FD | 	call	#_pspeek
0e0a8     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0e0ac     50 04 B1 FD | 	call	#__system__Chr_S
0e0b0     FD 14 02 F6 | 	mov	arg02, result1
0e0b4     11 13 02 F6 | 	mov	arg01, local03
0e0b8     98 E2 B0 FD | 	call	#__system___string_concat
0e0bc     FD 22 02 F6 | 	mov	local03, result1
0e0c0     01 24 06 F1 | 	add	local04, #1
0e0c4     C8 FF 9F FD | 	jmp	#LR__1100
0e0c8                 | LR__1101
0e0c8                 | ' 'print "in convertstring: str=";s
0e0c8                 | ' return s
0e0c8     11 FB 01 F6 | 	mov	result1, local03
0e0cc     A7 F0 03 F6 | 	mov	ptra, fp
0e0d0     B2 00 A0 FD | 	call	#popregs_
0e0d4                 | _convertstring_ret
0e0d4     2D 00 64 FD | 	ret
0e0d8                 | 
0e0d8                 | ' 
0e0d8                 | ' sub do_assign
0e0d8                 | _do_assign
0e0d8     05 4A 05 F6 | 	mov	COUNT_, #5
0e0dc     A8 00 A0 FD | 	call	#pushregs_
0e0e0     44 F0 07 F1 | 	add	ptra, #68
0e0e4     6A 00 00 FF 
0e0e8     64 E4 05 F1 | 	add	objptr, ##54372
0e0ec     F2 16 02 FB | 	rdlong	arg03, objptr
0e0f0     0B 15 02 F6 | 	mov	arg02, arg03
0e0f4     01 14 66 F0 | 	shl	arg02, #1
0e0f8     0B 15 02 F1 | 	add	arg02, arg03
0e0fc     02 14 66 F0 | 	shl	arg02, #2
0e100     03 00 00 FF 
0e104     04 E4 85 F1 | 	sub	objptr, ##1540
0e108     F2 14 02 F1 | 	add	arg02, objptr
0e10c     0A 15 02 FB | 	rdlong	arg02, arg02
0e110     18 4E 05 F1 | 	add	fp, #24
0e114     A7 14 62 FC | 	wrlong	arg02, fp
0e118                 | ' 
0e118                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0e118                 | ' 
0e118                 | ' if variables(varnum).vartype<array_no_type then 
0e118     18 4E 85 F1 | 	sub	fp, #24
0e11c     04 14 66 F0 | 	shl	arg02, #4
0e120     32 00 00 FF 
0e124     74 E4 85 F1 | 	sub	objptr, ##25716
0e128     F2 14 02 F1 | 	add	arg02, objptr
0e12c     0C 14 06 F1 | 	add	arg02, #12
0e130     0A 17 02 FB | 	rdlong	arg03, arg02
0e134     00 17 16 F2 | 	cmp	arg03, #256 wc
0e138     34 00 00 FF 
0e13c     EC E5 85 F1 | 	sub	objptr, ##27116
0e140     18 01 90 3D |  if_ae	jmp	#LR__1110
0e144     80 BF BF FD | 	call	#_pop
0e148     A7 FA 61 FC | 	wrlong	result1, fp
0e14c     04 4E 05 F1 | 	add	fp, #4
0e150     A7 FC 61 FC | 	wrlong	result2, fp
0e154     04 4E 05 F1 | 	add	fp, #4
0e158     A7 FE 61 FC | 	wrlong	result3, fp
0e15c     08 4E 85 F1 | 	sub	fp, #8
0e160     A7 16 02 FB | 	rdlong	arg03, fp
0e164     04 4E 05 F1 | 	add	fp, #4
0e168     A7 14 02 FB | 	rdlong	arg02, fp
0e16c     14 4E 05 F1 | 	add	fp, #20
0e170     A7 12 02 FB | 	rdlong	arg01, fp
0e174     04 12 66 F0 | 	shl	arg01, #4
0e178     34 00 00 FF 
0e17c     EC E5 05 F1 | 	add	objptr, ##27116
0e180     F2 12 02 F1 | 	add	arg01, objptr
0e184     04 12 06 F1 | 	add	arg01, #4
0e188     09 17 62 FC | 	wrlong	arg03, arg01
0e18c     A7 16 02 FB | 	rdlong	arg03, fp
0e190     04 16 66 F0 | 	shl	arg03, #4
0e194     F2 16 02 F1 | 	add	arg03, objptr
0e198     08 16 06 F1 | 	add	arg03, #8
0e19c     0B 15 62 FC | 	wrlong	arg02, arg03
0e1a0     A7 16 02 FB | 	rdlong	arg03, fp
0e1a4     04 16 66 F0 | 	shl	arg03, #4
0e1a8     F2 16 02 F1 | 	add	arg03, objptr
0e1ac     10 4E 85 F1 | 	sub	fp, #16
0e1b0     A7 14 02 FB | 	rdlong	arg02, fp
0e1b4     0C 16 06 F1 | 	add	arg03, #12
0e1b8     0B 15 62 FC | 	wrlong	arg02, arg03
0e1bc                 | '   t1=pop() 
0e1bc                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0e1bc                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0e1bc                 | '   if variables(varnum).vartype<>result_string2 then return
0e1bc     10 4E 05 F1 | 	add	fp, #16
0e1c0     A7 16 02 FB | 	rdlong	arg03, fp
0e1c4     18 4E 85 F1 | 	sub	fp, #24
0e1c8     04 16 66 F0 | 	shl	arg03, #4
0e1cc     F2 16 02 F1 | 	add	arg03, objptr
0e1d0     0C 16 06 F1 | 	add	arg03, #12
0e1d4     0B 17 02 FB | 	rdlong	arg03, arg03
0e1d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
0e1dc     34 00 00 FF 
0e1e0     EC E5 85 F1 | 	sub	objptr, ##27116
0e1e4     E4 04 90 5D |  if_ne	jmp	#LR__1133
0e1e8     18 4E 05 F1 | 	add	fp, #24
0e1ec     A7 16 02 FB | 	rdlong	arg03, fp
0e1f0     0B 1F 02 F6 | 	mov	local01, arg03
0e1f4     04 1E 66 F0 | 	shl	local01, #4
0e1f8     34 00 00 FF 
0e1fc     EC E5 05 F1 | 	add	objptr, ##27116
0e200     F2 1E 02 F1 | 	add	local01, objptr
0e204     18 4E 85 F1 | 	sub	fp, #24
0e208     04 16 66 F0 | 	shl	arg03, #4
0e20c     F2 16 02 F1 | 	add	arg03, objptr
0e210     04 16 06 F1 | 	add	arg03, #4
0e214     0B 13 02 FB | 	rdlong	arg01, arg03
0e218     34 00 00 FF 
0e21c     EC E5 85 F1 | 	sub	objptr, ##27116
0e220     48 FE BF FD | 	call	#_convertstring
0e224     04 1E 06 F1 | 	add	local01, #4
0e228     0F FB 61 FC | 	wrlong	result1, local01
0e22c     18 4E 05 F1 | 	add	fp, #24
0e230     A7 1E 02 FB | 	rdlong	local01, fp
0e234     18 4E 85 F1 | 	sub	fp, #24
0e238     04 1E 66 F0 | 	shl	local01, #4
0e23c     34 00 00 FF 
0e240     EC E5 05 F1 | 	add	objptr, ##27116
0e244     F2 1E 02 F1 | 	add	local01, objptr
0e248     0C 1E 06 F1 | 	add	local01, #12
0e24c     0F 3F 68 FC | 	wrlong	#31, local01
0e250                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0e250                 | '   variables(varnum).vartype=result_string
0e250                 | '   return
0e250     34 00 00 FF 
0e254     EC E5 85 F1 | 	sub	objptr, ##27116
0e258     70 04 90 FD | 	jmp	#LR__1133
0e25c                 | LR__1110
0e25c                 | ' for i=0 to 2 : arrid(i)=0 : next i
0e25c     1C 4E 05 F1 | 	add	fp, #28
0e260     A7 00 68 FC | 	wrlong	#0, fp
0e264     97 16 48 FB | 	callpa	#(@LR__1112-@LR__1111)>>2,fcache_load_ptr_
0e268                 | LR__1111
0e268     A7 1E 02 FB | 	rdlong	local01, fp
0e26c     02 1E 66 F0 | 	shl	local01, #2
0e270     18 4E 05 F1 | 	add	fp, #24
0e274     A7 1E 02 F1 | 	add	local01, fp
0e278     0F 01 68 FC | 	wrlong	#0, local01
0e27c     18 4E 85 F1 | 	sub	fp, #24
0e280     A7 1E 02 FB | 	rdlong	local01, fp
0e284     01 1E 06 F1 | 	add	local01, #1
0e288     A7 1E 62 FC | 	wrlong	local01, fp
0e28c     03 1E 16 F2 | 	cmp	local01, #3 wc
0e290     D4 FF 9F CD |  if_b	jmp	#LR__1111
0e294                 | LR__1112
0e294     6A 00 00 FF 
0e298     64 E4 05 F1 | 	add	objptr, ##54372
0e29c     F2 16 02 FB | 	rdlong	arg03, objptr
0e2a0     0B 1F 02 F6 | 	mov	local01, arg03
0e2a4     01 1E 66 F0 | 	shl	local01, #1
0e2a8     0B 1F 02 F1 | 	add	local01, arg03
0e2ac     02 1E 66 F0 | 	shl	local01, #2
0e2b0     03 00 00 FF 
0e2b4     04 E4 85 F1 | 	sub	objptr, ##1540
0e2b8     F2 1E 02 F1 | 	add	local01, objptr
0e2bc     04 1E 06 F1 | 	add	local01, #4
0e2c0     0F 21 02 FB | 	rdlong	local02, local01
0e2c4     04 4E 05 F1 | 	add	fp, #4
0e2c8     A7 20 62 FC | 	wrlong	local02, fp
0e2cc     20 4E 85 F1 | 	sub	fp, #32
0e2d0     67 00 00 FF 
0e2d4     60 E4 85 F1 | 	sub	objptr, ##52832
0e2d8     EC BD BF FD | 	call	#_pop
0e2dc     A7 FA 61 FC | 	wrlong	result1, fp
0e2e0     04 4E 05 F1 | 	add	fp, #4
0e2e4     A7 FC 61 FC | 	wrlong	result2, fp
0e2e8     04 4E 05 F1 | 	add	fp, #4
0e2ec     A7 FE 61 FC | 	wrlong	result3, fp
0e2f0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0e2f0                 | ' t1=pop() ' var value
0e2f0                 | ' if numpar>0 then
0e2f0     18 4E 05 F1 | 	add	fp, #24
0e2f4     A7 22 02 FB | 	rdlong	local03, fp
0e2f8     20 4E 85 F1 | 	sub	fp, #32
0e2fc     01 22 16 F2 | 	cmp	local03, #1 wc
0e300     78 00 90 CD |  if_b	jmp	#LR__1115
0e304                 | '   for i=numpar to 1 step -1
0e304     20 4E 05 F1 | 	add	fp, #32
0e308     A7 24 0A FB | 	rdlong	local04, fp wz
0e30c     04 4E 85 F1 | 	sub	fp, #4
0e310     A7 24 62 FC | 	wrlong	local04, fp
0e314     1C 4E 85 F1 | 	sub	fp, #28
0e318     60 00 90 AD |  if_e	jmp	#LR__1114
0e31c                 | LR__1113
0e31c     A8 BD BF FD | 	call	#_pop
0e320     0C 4E 05 F1 | 	add	fp, #12
0e324     A7 FA 61 FC | 	wrlong	result1, fp
0e328     04 4E 05 F1 | 	add	fp, #4
0e32c     A7 FC 61 FC | 	wrlong	result2, fp
0e330     04 4E 05 F1 | 	add	fp, #4
0e334     A7 FE 61 FC | 	wrlong	result3, fp
0e338     08 4E 05 F1 | 	add	fp, #8
0e33c     A7 22 02 FB | 	rdlong	local03, fp
0e340     01 22 86 F1 | 	sub	local03, #1
0e344     02 22 66 F0 | 	shl	local03, #2
0e348     18 4E 05 F1 | 	add	fp, #24
0e34c     A7 22 02 F1 | 	add	local03, fp
0e350     28 4E 85 F1 | 	sub	fp, #40
0e354     A7 12 02 F6 | 	mov	arg01, fp
0e358     0C 4E 85 F1 | 	sub	fp, #12
0e35c     BC 46 B0 FD | 	call	#_converttoint
0e360     11 FB 61 FC | 	wrlong	result1, local03
0e364     1C 4E 05 F1 | 	add	fp, #28
0e368     A7 24 02 FB | 	rdlong	local04, fp
0e36c     01 24 8E F1 | 	sub	local04, #1 wz
0e370     A7 24 62 FC | 	wrlong	local04, fp
0e374     1C 4E 85 F1 | 	sub	fp, #28
0e378     A0 FF 9F 5D |  if_ne	jmp	#LR__1113
0e37c                 | LR__1114
0e37c                 | LR__1115
0e37c     18 4E 05 F1 | 	add	fp, #24
0e380     A7 1E 02 FB | 	rdlong	local01, fp
0e384     04 1E 66 F0 | 	shl	local01, #4
0e388     34 00 00 FF 
0e38c     EC E5 05 F1 | 	add	objptr, ##27116
0e390     F2 1E 02 F1 | 	add	local01, objptr
0e394     04 1E 06 F1 | 	add	local01, #4
0e398     0F 13 02 FB | 	rdlong	arg01, local01
0e39c     0C 4E 05 F1 | 	add	fp, #12
0e3a0     A7 12 62 FC | 	wrlong	arg01, fp
0e3a4     24 4E 85 F1 | 	sub	fp, #36
0e3a8     34 00 00 FF 
0e3ac     EC E5 85 F1 | 	sub	objptr, ##27116
0e3b0     38 AA B0 FD | 	call	#_pslpeek
0e3b4     FD 24 32 F9 | 	getword	local04, result1, #0
0e3b8     28 4E 05 F1 | 	add	fp, #40
0e3bc     A7 24 62 FC | 	wrlong	local04, fp
0e3c0     04 4E 85 F1 | 	sub	fp, #4
0e3c4     A7 12 02 FB | 	rdlong	arg01, fp
0e3c8     24 4E 85 F1 | 	sub	fp, #36
0e3cc     02 12 06 F1 | 	add	arg01, #2
0e3d0     C0 A9 B0 FD | 	call	#_pspeek
0e3d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e3d8     2C 4E 05 F1 | 	add	fp, #44
0e3dc     A7 FA 61 FC | 	wrlong	result1, fp
0e3e0                 | ' esize=pspeek(arrptr+2)
0e3e0                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0e3e0     08 4E 85 F1 | 	sub	fp, #8
0e3e4     A7 12 02 FB | 	rdlong	arg01, fp
0e3e8     24 4E 85 F1 | 	sub	fp, #36
0e3ec     04 12 06 F1 | 	add	arg01, #4
0e3f0     F8 A9 B0 FD | 	call	#_pslpeek
0e3f4     FD 24 02 F6 | 	mov	local04, result1
0e3f8     34 4E 05 F1 | 	add	fp, #52
0e3fc     A7 1E 02 FB | 	rdlong	local01, fp
0e400     34 4E 85 F1 | 	sub	fp, #52
0e404     12 1F 12 F2 | 	cmp	local01, local04 wc
0e408     54 00 90 3D |  if_ae	jmp	#LR__1116
0e40c     24 4E 05 F1 | 	add	fp, #36
0e410     A7 12 02 FB | 	rdlong	arg01, fp
0e414     24 4E 85 F1 | 	sub	fp, #36
0e418     08 12 06 F1 | 	add	arg01, #8
0e41c     CC A9 B0 FD | 	call	#_pslpeek
0e420     FD 1E 02 F6 | 	mov	local01, result1
0e424     38 4E 05 F1 | 	add	fp, #56
0e428     A7 24 02 FB | 	rdlong	local04, fp
0e42c     38 4E 85 F1 | 	sub	fp, #56
0e430     0F 25 12 F2 | 	cmp	local04, local01 wc
0e434     28 00 90 3D |  if_ae	jmp	#LR__1116
0e438     24 4E 05 F1 | 	add	fp, #36
0e43c     A7 12 02 FB | 	rdlong	arg01, fp
0e440     24 4E 85 F1 | 	sub	fp, #36
0e444     0C 12 06 F1 | 	add	arg01, #12
0e448     A0 A9 B0 FD | 	call	#_pslpeek
0e44c     3C 4E 05 F1 | 	add	fp, #60
0e450     A7 24 02 FB | 	rdlong	local04, fp
0e454     3C 4E 85 F1 | 	sub	fp, #60
0e458     FD 24 12 F2 | 	cmp	local04, result1 wc
0e45c     0C 00 90 CD |  if_b	jmp	#LR__1117
0e460                 | LR__1116
0e460     31 12 06 F6 | 	mov	arg01, #49
0e464     F0 A6 B0 FD | 	call	#_printerror
0e468     60 02 90 FD | 	jmp	#LR__1133
0e46c                 | LR__1117
0e46c     24 4E 05 F1 | 	add	fp, #36
0e470     A7 12 02 FB | 	rdlong	arg01, fp
0e474     09 25 02 F6 | 	mov	local04, arg01
0e478     10 24 06 F1 | 	add	local04, #16
0e47c     24 4E 85 F1 | 	sub	fp, #36
0e480     04 12 06 F1 | 	add	arg01, #4
0e484     64 A9 B0 FD | 	call	#_pslpeek
0e488     FD 1E 02 F6 | 	mov	local01, result1
0e48c     38 4E 05 F1 | 	add	fp, #56
0e490     A7 20 02 FB | 	rdlong	local02, fp
0e494     10 1F 02 FD | 	qmul	local01, local02
0e498     04 4E 85 F1 | 	sub	fp, #4
0e49c     A7 22 02 FB | 	rdlong	local03, fp
0e4a0     10 4E 85 F1 | 	sub	fp, #16
0e4a4     A7 12 02 FB | 	rdlong	arg01, fp
0e4a8     24 4E 85 F1 | 	sub	fp, #36
0e4ac     08 12 06 F1 | 	add	arg01, #8
0e4b0     18 20 62 FD | 	getqx	local02
0e4b4     10 23 02 F1 | 	add	local03, local02
0e4b8     30 A9 B0 FD | 	call	#_pslpeek
0e4bc     FD 20 02 F6 | 	mov	local02, result1
0e4c0     24 4E 05 F1 | 	add	fp, #36
0e4c4     A7 12 02 FB | 	rdlong	arg01, fp
0e4c8     24 4E 85 F1 | 	sub	fp, #36
0e4cc     04 12 06 F1 | 	add	arg01, #4
0e4d0     18 A9 B0 FD | 	call	#_pslpeek
0e4d4     FD 20 02 FD | 	qmul	local02, result1
0e4d8     3C 4E 05 F1 | 	add	fp, #60
0e4dc     A7 20 02 FB | 	rdlong	local02, fp
0e4e0     18 1E 62 FD | 	getqx	local01
0e4e4     10 1F 02 FD | 	qmul	local01, local02
0e4e8     10 4E 85 F1 | 	sub	fp, #16
0e4ec     A7 20 02 FB | 	rdlong	local02, fp
0e4f0     18 1E 62 FD | 	getqx	local01
0e4f4     0F 23 02 F1 | 	add	local03, local01
0e4f8     11 21 02 FD | 	qmul	local02, local03
0e4fc     04 4E 05 F1 | 	add	fp, #4
0e500                 | ' 
0e500                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0e500                 | ' select case arrtype
0e500     18 22 62 FD | 	getqx	local03
0e504     11 25 02 F1 | 	add	local04, local03
0e508     A7 24 62 FC | 	wrlong	local04, fp
0e50c     08 4E 85 F1 | 	sub	fp, #8
0e510     A7 26 02 FB | 	rdlong	local05, fp
0e514     28 4E 85 F1 | 	sub	fp, #40
0e518     00 27 86 F1 | 	sub	local05, #256
0e51c     0C 26 26 F3 | 	fle	local05, #12
0e520     30 26 62 FD | 	jmprel	local05
0e524                 | LR__1118
0e524     30 00 90 FD | 	jmp	#LR__1119
0e528     58 00 90 FD | 	jmp	#LR__1120
0e52c     6C 00 90 FD | 	jmp	#LR__1121
0e530     80 00 90 FD | 	jmp	#LR__1122
0e534     B0 00 90 FD | 	jmp	#LR__1123
0e538     E0 00 90 FD | 	jmp	#LR__1124
0e53c     F4 00 90 FD | 	jmp	#LR__1125
0e540     08 01 90 FD | 	jmp	#LR__1126
0e544     1C 01 90 FD | 	jmp	#LR__1127
0e548     30 01 90 FD | 	jmp	#LR__1128
0e54c     44 01 90 FD | 	jmp	#LR__1129
0e550     58 01 90 FD | 	jmp	#LR__1130
0e554     6C 01 90 FD | 	jmp	#LR__1131
0e558                 | LR__1119
0e558     A7 12 02 F6 | 	mov	arg01, fp
0e55c     30 4E 05 F1 | 	add	fp, #48
0e560     A7 14 02 FB | 	rdlong	arg02, fp
0e564     30 4E 85 F1 | 	sub	fp, #48
0e568     0C 16 06 F6 | 	mov	arg03, #12
0e56c     0B 00 00 FF 
0e570     C0 E4 05 F1 | 	add	objptr, ##5824
0e574     18 D2 B0 FD | 	call	#_psram_spin2_write
0e578     0B 00 00 FF 
0e57c     C0 E4 85 F1 | 	sub	objptr, ##5824
0e580     48 01 90 FD | 	jmp	#LR__1132
0e584                 | LR__1120
0e584     30 4E 05 F1 | 	add	fp, #48
0e588     A7 12 02 FB | 	rdlong	arg01, fp
0e58c     30 4E 85 F1 | 	sub	fp, #48
0e590     A7 14 02 FB | 	rdlong	arg02, fp
0e594     B4 A7 B0 FD | 	call	#_pspoke
0e598     30 01 90 FD | 	jmp	#LR__1132
0e59c                 | LR__1121
0e59c     30 4E 05 F1 | 	add	fp, #48
0e5a0     A7 12 02 FB | 	rdlong	arg01, fp
0e5a4     30 4E 85 F1 | 	sub	fp, #48
0e5a8     A7 14 02 FB | 	rdlong	arg02, fp
0e5ac     9C A7 B0 FD | 	call	#_pspoke
0e5b0     18 01 90 FD | 	jmp	#LR__1132
0e5b4                 | LR__1122
0e5b4     30 4E 05 F1 | 	add	fp, #48
0e5b8     A7 12 02 FB | 	rdlong	arg01, fp
0e5bc     30 4E 85 F1 | 	sub	fp, #48
0e5c0     A7 14 02 FB | 	rdlong	arg02, fp
0e5c4     84 A7 B0 FD | 	call	#_pspoke
0e5c8     30 4E 05 F1 | 	add	fp, #48
0e5cc     A7 12 02 FB | 	rdlong	arg01, fp
0e5d0     30 4E 85 F1 | 	sub	fp, #48
0e5d4     01 12 06 F1 | 	add	arg01, #1
0e5d8     A7 14 02 FB | 	rdlong	arg02, fp
0e5dc     08 14 46 F0 | 	shr	arg02, #8
0e5e0     68 A7 B0 FD | 	call	#_pspoke
0e5e4     E4 00 90 FD | 	jmp	#LR__1132
0e5e8                 | LR__1123
0e5e8     30 4E 05 F1 | 	add	fp, #48
0e5ec     A7 12 02 FB | 	rdlong	arg01, fp
0e5f0     30 4E 85 F1 | 	sub	fp, #48
0e5f4     A7 14 02 FB | 	rdlong	arg02, fp
0e5f8     50 A7 B0 FD | 	call	#_pspoke
0e5fc     30 4E 05 F1 | 	add	fp, #48
0e600     A7 12 02 FB | 	rdlong	arg01, fp
0e604     30 4E 85 F1 | 	sub	fp, #48
0e608     01 12 06 F1 | 	add	arg01, #1
0e60c     A7 14 02 FB | 	rdlong	arg02, fp
0e610     08 14 46 F0 | 	shr	arg02, #8
0e614     34 A7 B0 FD | 	call	#_pspoke
0e618     B0 00 90 FD | 	jmp	#LR__1132
0e61c                 | LR__1124
0e61c     30 4E 05 F1 | 	add	fp, #48
0e620     A7 12 02 FB | 	rdlong	arg01, fp
0e624     30 4E 85 F1 | 	sub	fp, #48
0e628     A7 14 02 FB | 	rdlong	arg02, fp
0e62c     8C A6 B0 FD | 	call	#_pslpoke
0e630     98 00 90 FD | 	jmp	#LR__1132
0e634                 | LR__1125
0e634     30 4E 05 F1 | 	add	fp, #48
0e638     A7 12 02 FB | 	rdlong	arg01, fp
0e63c     30 4E 85 F1 | 	sub	fp, #48
0e640     A7 14 02 FB | 	rdlong	arg02, fp
0e644     74 A6 B0 FD | 	call	#_pslpoke
0e648     80 00 90 FD | 	jmp	#LR__1132
0e64c                 | LR__1126
0e64c     30 4E 05 F1 | 	add	fp, #48
0e650     A7 12 02 FB | 	rdlong	arg01, fp
0e654     30 4E 85 F1 | 	sub	fp, #48
0e658     A7 14 02 FB | 	rdlong	arg02, fp
0e65c     5C A6 B0 FD | 	call	#_pslpoke
0e660     68 00 90 FD | 	jmp	#LR__1132
0e664                 | LR__1127
0e664     30 4E 05 F1 | 	add	fp, #48
0e668     A7 12 02 FB | 	rdlong	arg01, fp
0e66c     30 4E 85 F1 | 	sub	fp, #48
0e670     A7 14 02 FB | 	rdlong	arg02, fp
0e674     44 A6 B0 FD | 	call	#_pslpoke
0e678     50 00 90 FD | 	jmp	#LR__1132
0e67c                 | LR__1128
0e67c     30 4E 05 F1 | 	add	fp, #48
0e680     A7 12 02 FB | 	rdlong	arg01, fp
0e684     30 4E 85 F1 | 	sub	fp, #48
0e688     A7 14 02 FB | 	rdlong	arg02, fp
0e68c     2C A6 B0 FD | 	call	#_pslpoke
0e690     38 00 90 FD | 	jmp	#LR__1132
0e694                 | LR__1129
0e694     30 4E 05 F1 | 	add	fp, #48
0e698     A7 12 02 FB | 	rdlong	arg01, fp
0e69c     30 4E 85 F1 | 	sub	fp, #48
0e6a0     A7 14 02 FB | 	rdlong	arg02, fp
0e6a4     14 A6 B0 FD | 	call	#_pslpoke
0e6a8     20 00 90 FD | 	jmp	#LR__1132
0e6ac                 | LR__1130
0e6ac     30 4E 05 F1 | 	add	fp, #48
0e6b0     A7 12 02 FB | 	rdlong	arg01, fp
0e6b4     30 4E 85 F1 | 	sub	fp, #48
0e6b8     A7 14 02 FB | 	rdlong	arg02, fp
0e6bc     FC A5 B0 FD | 	call	#_pslpoke
0e6c0     08 00 90 FD | 	jmp	#LR__1132
0e6c4                 | LR__1131
0e6c4     2F 12 06 F6 | 	mov	arg01, #47
0e6c8     8C A4 B0 FD | 	call	#_printerror
0e6cc                 | LR__1132
0e6cc                 | LR__1133
0e6cc     A7 F0 03 F6 | 	mov	ptra, fp
0e6d0     B2 00 A0 FD | 	call	#popregs_
0e6d4                 | _do_assign_ret
0e6d4     2D 00 64 FD | 	ret
0e6d8                 | 
0e6d8                 | ' 
0e6d8                 | ' 
0e6d8                 | ' ' --------------------- Read a variable and push to the stack
0e6d8                 | ' 
0e6d8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0e6d8                 | ' 
0e6d8                 | ' sub do_getvar
0e6d8                 | _do_getvar
0e6d8     04 4A 05 F6 | 	mov	COUNT_, #4
0e6dc     A8 00 A0 FD | 	call	#pushregs_
0e6e0     3C F0 07 F1 | 	add	ptra, #60
0e6e4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0e6e4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0e6e4     6A 00 00 FF 
0e6e8     64 E4 05 F1 | 	add	objptr, ##54372
0e6ec     F2 1E 02 FB | 	rdlong	local01, objptr
0e6f0     0F 17 02 F6 | 	mov	arg03, local01
0e6f4     01 16 66 F0 | 	shl	arg03, #1
0e6f8     0F 17 02 F1 | 	add	arg03, local01
0e6fc     02 16 66 F0 | 	shl	arg03, #2
0e700     03 00 00 FF 
0e704     04 E4 85 F1 | 	sub	objptr, ##1540
0e708     F2 16 02 F1 | 	add	arg03, objptr
0e70c     04 16 06 F1 | 	add	arg03, #4
0e710     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0e714     67 00 00 FF 
0e718     60 E4 85 F1 | 	sub	objptr, ##52832
0e71c     C4 00 90 5D |  if_ne	jmp	#LR__1141
0e720     6A 00 00 FF 
0e724     64 E4 05 F1 | 	add	objptr, ##54372
0e728     F2 1E 02 FB | 	rdlong	local01, objptr
0e72c     0F 13 02 F6 | 	mov	arg01, local01
0e730     01 12 66 F0 | 	shl	arg01, #1
0e734     0F 13 02 F1 | 	add	arg01, local01
0e738     02 12 66 F0 | 	shl	arg01, #2
0e73c     03 00 00 FF 
0e740     04 E4 85 F1 | 	sub	objptr, ##1540
0e744     F2 12 02 F1 | 	add	arg01, objptr
0e748     09 1F 02 FB | 	rdlong	local01, arg01
0e74c     04 1E 66 F0 | 	shl	local01, #4
0e750     32 00 00 FF 
0e754     74 E4 85 F1 | 	sub	objptr, ##25716
0e758     F2 1E 02 F1 | 	add	local01, objptr
0e75c     04 1E 06 F1 | 	add	local01, #4
0e760     0F 13 02 FB | 	rdlong	arg01, local01
0e764     04 1E 06 F1 | 	add	local01, #4
0e768     0F 1F 02 FB | 	rdlong	local01, local01
0e76c     A7 12 62 FC | 	wrlong	arg01, fp
0e770     04 4E 05 F1 | 	add	fp, #4
0e774     A7 1E 62 FC | 	wrlong	local01, fp
0e778     35 00 00 FF 
0e77c     78 E4 05 F1 | 	add	objptr, ##27256
0e780     F2 1E 02 FB | 	rdlong	local01, objptr
0e784     0F 13 02 F6 | 	mov	arg01, local01
0e788     01 12 66 F0 | 	shl	arg01, #1
0e78c     0F 13 02 F1 | 	add	arg01, local01
0e790     02 12 66 F0 | 	shl	arg01, #2
0e794     03 00 00 FF 
0e798     04 E4 85 F1 | 	sub	objptr, ##1540
0e79c     F2 12 02 F1 | 	add	arg01, objptr
0e7a0     09 1F 02 FB | 	rdlong	local01, arg01
0e7a4     04 1E 66 F0 | 	shl	local01, #4
0e7a8     32 00 00 FF 
0e7ac     74 E4 85 F1 | 	sub	objptr, ##25716
0e7b0     F2 1E 02 F1 | 	add	local01, objptr
0e7b4     0C 1E 06 F1 | 	add	local01, #12
0e7b8     0F 1F 02 FB | 	rdlong	local01, local01
0e7bc     04 4E 05 F1 | 	add	fp, #4
0e7c0     A7 1E 62 FC | 	wrlong	local01, fp
0e7c4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0e7c4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0e7c4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0e7c4     08 4E 85 F1 | 	sub	fp, #8
0e7c8     00 1F 16 F2 | 	cmp	local01, #256 wc
0e7cc     34 00 00 FF 
0e7d0     EC E5 85 F1 | 	sub	objptr, ##27116
0e7d4     0C 00 90 3D |  if_ae	jmp	#LR__1140
0e7d8     A7 12 02 F6 | 	mov	arg01, fp
0e7dc     80 B9 BF FD | 	call	#_push
0e7e0     A0 04 90 FD | 	jmp	#LR__1162
0e7e4                 | LR__1140
0e7e4                 | LR__1141
0e7e4     6A 00 00 FF 
0e7e8     64 E4 05 F1 | 	add	objptr, ##54372
0e7ec     F2 16 02 FB | 	rdlong	arg03, objptr
0e7f0     0B 15 02 F6 | 	mov	arg02, arg03
0e7f4     01 14 66 F0 | 	shl	arg02, #1
0e7f8     0B 15 02 F1 | 	add	arg02, arg03
0e7fc     02 14 66 F0 | 	shl	arg02, #2
0e800     03 00 00 FF 
0e804     04 E4 85 F1 | 	sub	objptr, ##1540
0e808     F2 14 02 F1 | 	add	arg02, objptr
0e80c     0A 17 02 FB | 	rdlong	arg03, arg02
0e810     04 16 66 F0 | 	shl	arg03, #4
0e814     32 00 00 FF 
0e818     74 E4 85 F1 | 	sub	objptr, ##25716
0e81c     F2 16 02 F1 | 	add	arg03, objptr
0e820     04 16 06 F1 | 	add	arg03, #4
0e824     0B 13 02 FB | 	rdlong	arg01, arg03
0e828     0C 4E 05 F1 | 	add	fp, #12
0e82c     A7 12 62 FC | 	wrlong	arg01, fp
0e830     0C 4E 85 F1 | 	sub	fp, #12
0e834     34 00 00 FF 
0e838     EC E5 85 F1 | 	sub	objptr, ##27116
0e83c     AC A5 B0 FD | 	call	#_pslpeek
0e840     FD FA 31 F9 | 	getword	result1, result1, #0
0e844     10 4E 05 F1 | 	add	fp, #16
0e848     A7 FA 61 FC | 	wrlong	result1, fp
0e84c     6A 00 00 FF 
0e850     64 E4 05 F1 | 	add	objptr, ##54372
0e854     F2 16 02 FB | 	rdlong	arg03, objptr
0e858     0B 15 02 F6 | 	mov	arg02, arg03
0e85c     01 14 66 F0 | 	shl	arg02, #1
0e860     0B 15 02 F1 | 	add	arg02, arg03
0e864     02 14 66 F0 | 	shl	arg02, #2
0e868     03 00 00 FF 
0e86c     04 E4 85 F1 | 	sub	objptr, ##1540
0e870     F2 14 02 F1 | 	add	arg02, objptr
0e874     04 14 06 F1 | 	add	arg02, #4
0e878     0A 17 02 FB | 	rdlong	arg03, arg02
0e87c     04 4E 05 F1 | 	add	fp, #4
0e880     A7 16 62 FC | 	wrlong	arg03, fp
0e884     08 4E 85 F1 | 	sub	fp, #8
0e888     A7 12 02 FB | 	rdlong	arg01, fp
0e88c     0C 4E 85 F1 | 	sub	fp, #12
0e890     02 12 06 F1 | 	add	arg01, #2
0e894     67 00 00 FF 
0e898     60 E4 85 F1 | 	sub	objptr, ##52832
0e89c     F4 A4 B0 FD | 	call	#_pspeek
0e8a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e8a4     18 4E 05 F1 | 	add	fp, #24
0e8a8     A7 FA 61 FC | 	wrlong	result1, fp
0e8ac     0C 4E 85 F1 | 	sub	fp, #12
0e8b0     A7 12 02 FB | 	rdlong	arg01, fp
0e8b4     0C 4E 85 F1 | 	sub	fp, #12
0e8b8     04 12 06 F1 | 	add	arg01, #4
0e8bc     2C A5 B0 FD | 	call	#_pslpeek
0e8c0     1C 4E 05 F1 | 	add	fp, #28
0e8c4     A7 FA 61 FC | 	wrlong	result1, fp
0e8c8     10 4E 85 F1 | 	sub	fp, #16
0e8cc     A7 12 02 FB | 	rdlong	arg01, fp
0e8d0     0C 4E 85 F1 | 	sub	fp, #12
0e8d4     08 12 06 F1 | 	add	arg01, #8
0e8d8     10 A5 B0 FD | 	call	#_pslpeek
0e8dc     20 4E 05 F1 | 	add	fp, #32
0e8e0     A7 FA 61 FC | 	wrlong	result1, fp
0e8e4     14 4E 85 F1 | 	sub	fp, #20
0e8e8     A7 12 02 FB | 	rdlong	arg01, fp
0e8ec     0C 4E 85 F1 | 	sub	fp, #12
0e8f0     0C 12 06 F1 | 	add	arg01, #12
0e8f4     F4 A4 B0 FD | 	call	#_pslpeek
0e8f8     24 4E 05 F1 | 	add	fp, #36
0e8fc     A7 FA 61 FC | 	wrlong	result1, fp
0e900                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0e900                 | ' esize=pspeek(arrptr+2)
0e900                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0e900                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0e900                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0e900                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0e900     10 4E 85 F1 | 	sub	fp, #16
0e904     A7 16 02 FB | 	rdlong	arg03, fp
0e908     14 4E 85 F1 | 	sub	fp, #20
0e90c     03 16 16 F2 | 	cmp	arg03, #3 wc
0e910     38 00 90 CD |  if_b	jmp	#LR__1142
0e914     B0 B7 BF FD | 	call	#_pop
0e918     FF 16 02 F6 | 	mov	arg03, result3
0e91c     A7 FA 61 FC | 	wrlong	result1, fp
0e920     04 4E 05 F1 | 	add	fp, #4
0e924     A7 FC 61 FC | 	wrlong	result2, fp
0e928     04 4E 05 F1 | 	add	fp, #4
0e92c     A7 16 62 FC | 	wrlong	arg03, fp
0e930     08 4E 85 F1 | 	sub	fp, #8
0e934     A7 12 02 F6 | 	mov	arg01, fp
0e938     E0 40 B0 FD | 	call	#_converttoint
0e93c     30 4E 05 F1 | 	add	fp, #48
0e940     A7 FA 61 FC | 	wrlong	result1, fp
0e944     30 4E 85 F1 | 	sub	fp, #48
0e948     0C 00 90 FD | 	jmp	#LR__1143
0e94c                 | LR__1142
0e94c     30 4E 05 F1 | 	add	fp, #48
0e950     A7 00 68 FC | 	wrlong	#0, fp
0e954     30 4E 85 F1 | 	sub	fp, #48
0e958                 | LR__1143
0e958                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0e958     14 4E 05 F1 | 	add	fp, #20
0e95c     A7 16 02 FB | 	rdlong	arg03, fp
0e960     14 4E 85 F1 | 	sub	fp, #20
0e964     02 16 16 F2 | 	cmp	arg03, #2 wc
0e968     38 00 90 CD |  if_b	jmp	#LR__1144
0e96c     58 B7 BF FD | 	call	#_pop
0e970     FF 16 02 F6 | 	mov	arg03, result3
0e974     A7 FA 61 FC | 	wrlong	result1, fp
0e978     04 4E 05 F1 | 	add	fp, #4
0e97c     A7 FC 61 FC | 	wrlong	result2, fp
0e980     04 4E 05 F1 | 	add	fp, #4
0e984     A7 16 62 FC | 	wrlong	arg03, fp
0e988     08 4E 85 F1 | 	sub	fp, #8
0e98c     A7 12 02 F6 | 	mov	arg01, fp
0e990     88 40 B0 FD | 	call	#_converttoint
0e994     2C 4E 05 F1 | 	add	fp, #44
0e998     A7 FA 61 FC | 	wrlong	result1, fp
0e99c     2C 4E 85 F1 | 	sub	fp, #44
0e9a0     0C 00 90 FD | 	jmp	#LR__1145
0e9a4                 | LR__1144
0e9a4     2C 4E 05 F1 | 	add	fp, #44
0e9a8     A7 00 68 FC | 	wrlong	#0, fp
0e9ac     2C 4E 85 F1 | 	sub	fp, #44
0e9b0                 | LR__1145
0e9b0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0e9b0     14 4E 05 F1 | 	add	fp, #20
0e9b4     A7 16 02 FB | 	rdlong	arg03, fp
0e9b8     14 4E 85 F1 | 	sub	fp, #20
0e9bc     01 16 16 F2 | 	cmp	arg03, #1 wc
0e9c0     38 00 90 CD |  if_b	jmp	#LR__1146
0e9c4     00 B7 BF FD | 	call	#_pop
0e9c8     FF 16 02 F6 | 	mov	arg03, result3
0e9cc     A7 FA 61 FC | 	wrlong	result1, fp
0e9d0     04 4E 05 F1 | 	add	fp, #4
0e9d4     A7 FC 61 FC | 	wrlong	result2, fp
0e9d8     04 4E 05 F1 | 	add	fp, #4
0e9dc     A7 16 62 FC | 	wrlong	arg03, fp
0e9e0     08 4E 85 F1 | 	sub	fp, #8
0e9e4     A7 12 02 F6 | 	mov	arg01, fp
0e9e8     30 40 B0 FD | 	call	#_converttoint
0e9ec     28 4E 05 F1 | 	add	fp, #40
0e9f0     A7 FA 61 FC | 	wrlong	result1, fp
0e9f4     28 4E 85 F1 | 	sub	fp, #40
0e9f8     0C 00 90 FD | 	jmp	#LR__1147
0e9fc                 | LR__1146
0e9fc     28 4E 05 F1 | 	add	fp, #40
0ea00     A7 00 68 FC | 	wrlong	#0, fp
0ea04     28 4E 85 F1 | 	sub	fp, #40
0ea08                 | LR__1147
0ea08     0C 4E 05 F1 | 	add	fp, #12
0ea0c     A7 20 02 FB | 	rdlong	local02, fp
0ea10     1C 4E 05 F1 | 	add	fp, #28
0ea14     A7 22 02 FB | 	rdlong	local03, fp
0ea18     04 4E 05 F1 | 	add	fp, #4
0ea1c     A7 FC 01 FB | 	rdlong	result2, fp
0ea20     10 4E 85 F1 | 	sub	fp, #16
0ea24     A7 FE 01 FB | 	rdlong	result3, fp
0ea28     FF FC 01 FD | 	qmul	result2, result3
0ea2c     10 20 06 F1 | 	add	local02, #16
0ea30     14 4E 05 F1 | 	add	fp, #20
0ea34     A7 FC 01 FB | 	rdlong	result2, fp
0ea38     18 FA 61 FD | 	getqx	result1
0ea3c     FF FC 01 FD | 	qmul	result2, result3
0ea40     FD 22 02 F1 | 	add	local03, result1
0ea44     10 4E 85 F1 | 	sub	fp, #16
0ea48     A7 FE 01 FB | 	rdlong	result3, fp
0ea4c     18 FC 61 FD | 	getqx	result2
0ea50     FF FC 01 FD | 	qmul	result2, result3
0ea54     08 4E 85 F1 | 	sub	fp, #8
0ea58     A7 FE 01 FB | 	rdlong	result3, fp
0ea5c     18 FC 61 FD | 	getqx	result2
0ea60     FE 22 02 F1 | 	add	local03, result2
0ea64     FF 22 02 FD | 	qmul	local03, result3
0ea68     1C 4E 05 F1 | 	add	fp, #28
0ea6c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ea6c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0ea6c                 | ' 
0ea6c                 | ' select case vartype
0ea6c     18 FC 61 FD | 	getqx	result2
0ea70     FE 20 02 F1 | 	add	local02, result2
0ea74     A7 20 62 FC | 	wrlong	local02, fp
0ea78     24 4E 85 F1 | 	sub	fp, #36
0ea7c     A7 24 02 FB | 	rdlong	local04, fp
0ea80     10 4E 85 F1 | 	sub	fp, #16
0ea84     00 25 86 F1 | 	sub	local04, #256
0ea88     0C 24 26 F3 | 	fle	local04, #12
0ea8c     30 24 62 FD | 	jmprel	local04
0ea90                 | LR__1148
0ea90     30 00 90 FD | 	jmp	#LR__1149
0ea94     58 00 90 FD | 	jmp	#LR__1150
0ea98     8C 00 90 FD | 	jmp	#LR__1151
0ea9c     AC 00 90 FD | 	jmp	#LR__1152
0eaa0     E8 00 90 FD | 	jmp	#LR__1153
0eaa4     08 01 90 FD | 	jmp	#LR__1154
0eaa8     24 01 90 FD | 	jmp	#LR__1155
0eaac     40 01 90 FD | 	jmp	#LR__1156
0eab0     50 01 90 FD | 	jmp	#LR__1157
0eab4     60 01 90 FD | 	jmp	#LR__1158
0eab8     7C 01 90 FD | 	jmp	#LR__1159
0eabc     8C 01 90 FD | 	jmp	#LR__1160
0eac0     B8 01 90 FD | 	jmp	#LR__1161
0eac4                 | LR__1149
0eac4     A7 12 02 F6 | 	mov	arg01, fp
0eac8     34 4E 05 F1 | 	add	fp, #52
0eacc     A7 14 02 FB | 	rdlong	arg02, fp
0ead0     34 4E 85 F1 | 	sub	fp, #52
0ead4     0C 16 06 F6 | 	mov	arg03, #12
0ead8     0B 00 00 FF 
0eadc     C0 E4 05 F1 | 	add	objptr, ##5824
0eae0     10 CC B0 FD | 	call	#_psram_spin2_read1
0eae4     0B 00 00 FF 
0eae8     C0 E4 85 F1 | 	sub	objptr, ##5824
0eaec     8C 01 90 FD | 	jmp	#LR__1161
0eaf0                 | LR__1150
0eaf0     08 4E 05 F1 | 	add	fp, #8
0eaf4     A7 38 68 FC | 	wrlong	#28, fp
0eaf8     2C 4E 05 F1 | 	add	fp, #44
0eafc     A7 12 02 FB | 	rdlong	arg01, fp
0eb00     34 4E 85 F1 | 	sub	fp, #52
0eb04     8C A2 B0 FD | 	call	#_pspeek
0eb08     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eb0c     A7 FA 61 FC | 	wrlong	result1, fp
0eb10     80 FA 15 F2 | 	cmp	result1, #128 wc
0eb14     00 1F 66 36 |  if_ae	neg	local01, #256
0eb18     A7 22 02 3B |  if_ae	rdlong	local03, fp
0eb1c     11 1F 42 35 |  if_ae	or	local01, local03
0eb20     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0eb24     54 01 90 FD | 	jmp	#LR__1161
0eb28                 | LR__1151
0eb28     08 4E 05 F1 | 	add	fp, #8
0eb2c     A7 3A 68 FC | 	wrlong	#29, fp
0eb30     2C 4E 05 F1 | 	add	fp, #44
0eb34     A7 12 02 FB | 	rdlong	arg01, fp
0eb38     34 4E 85 F1 | 	sub	fp, #52
0eb3c     54 A2 B0 FD | 	call	#_pspeek
0eb40     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eb44     A7 FA 61 FC | 	wrlong	result1, fp
0eb48     30 01 90 FD | 	jmp	#LR__1161
0eb4c                 | LR__1152
0eb4c     08 4E 05 F1 | 	add	fp, #8
0eb50     A7 38 68 FC | 	wrlong	#28, fp
0eb54     2C 4E 05 F1 | 	add	fp, #44
0eb58     A7 12 02 FB | 	rdlong	arg01, fp
0eb5c     34 4E 85 F1 | 	sub	fp, #52
0eb60     88 A2 B0 FD | 	call	#_pslpeek
0eb64     FD FA 31 F9 | 	getword	result1, result1, #0
0eb68     A7 FA 61 FC | 	wrlong	result1, fp
0eb6c     40 00 00 FF 
0eb70     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0eb74     FF 7F 00 3F 
0eb78     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0eb7c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0eb80     11 1F 42 35 |  if_ae	or	local01, local03
0eb84     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0eb88     F0 00 90 FD | 	jmp	#LR__1161
0eb8c                 | LR__1153
0eb8c     08 4E 05 F1 | 	add	fp, #8
0eb90     A7 3A 68 FC | 	wrlong	#29, fp
0eb94     2C 4E 05 F1 | 	add	fp, #44
0eb98     A7 12 02 FB | 	rdlong	arg01, fp
0eb9c     34 4E 85 F1 | 	sub	fp, #52
0eba0     48 A2 B0 FD | 	call	#_pslpeek
0eba4     FD FA 31 F9 | 	getword	result1, result1, #0
0eba8     A7 FA 61 FC | 	wrlong	result1, fp
0ebac     CC 00 90 FD | 	jmp	#LR__1161
0ebb0                 | LR__1154
0ebb0     08 4E 05 F1 | 	add	fp, #8
0ebb4     A7 38 68 FC | 	wrlong	#28, fp
0ebb8     2C 4E 05 F1 | 	add	fp, #44
0ebbc     A7 12 02 FB | 	rdlong	arg01, fp
0ebc0     34 4E 85 F1 | 	sub	fp, #52
0ebc4     24 A2 B0 FD | 	call	#_pslpeek
0ebc8     A7 FA 61 FC | 	wrlong	result1, fp
0ebcc     AC 00 90 FD | 	jmp	#LR__1161
0ebd0                 | LR__1155
0ebd0     08 4E 05 F1 | 	add	fp, #8
0ebd4     A7 3A 68 FC | 	wrlong	#29, fp
0ebd8     2C 4E 05 F1 | 	add	fp, #44
0ebdc     A7 12 02 FB | 	rdlong	arg01, fp
0ebe0     34 4E 85 F1 | 	sub	fp, #52
0ebe4     04 A2 B0 FD | 	call	#_pslpeek
0ebe8     A7 FA 61 FC | 	wrlong	result1, fp
0ebec     8C 00 90 FD | 	jmp	#LR__1161
0ebf0                 | LR__1156
0ebf0     08 4E 05 F1 | 	add	fp, #8
0ebf4     A7 FE 69 FC | 	wrlong	#255, fp
0ebf8     08 4E 85 F1 | 	sub	fp, #8
0ebfc     A7 60 68 FC | 	wrlong	#48, fp
0ec00     78 00 90 FD | 	jmp	#LR__1161
0ec04                 | LR__1157
0ec04     08 4E 05 F1 | 	add	fp, #8
0ec08     A7 FE 69 FC | 	wrlong	#255, fp
0ec0c     08 4E 85 F1 | 	sub	fp, #8
0ec10     A7 60 68 FC | 	wrlong	#48, fp
0ec14     64 00 90 FD | 	jmp	#LR__1161
0ec18                 | LR__1158
0ec18     08 4E 05 F1 | 	add	fp, #8
0ec1c     A7 3C 68 FC | 	wrlong	#30, fp
0ec20     2C 4E 05 F1 | 	add	fp, #44
0ec24     A7 12 02 FB | 	rdlong	arg01, fp
0ec28     34 4E 85 F1 | 	sub	fp, #52
0ec2c     BC A1 B0 FD | 	call	#_pslpeek
0ec30     A7 FA 61 FC | 	wrlong	result1, fp
0ec34     44 00 90 FD | 	jmp	#LR__1161
0ec38                 | LR__1159
0ec38     08 4E 05 F1 | 	add	fp, #8
0ec3c     A7 FE 69 FC | 	wrlong	#255, fp
0ec40     08 4E 85 F1 | 	sub	fp, #8
0ec44     A7 60 68 FC | 	wrlong	#48, fp
0ec48     30 00 90 FD | 	jmp	#LR__1161
0ec4c                 | LR__1160
0ec4c     08 4E 05 F1 | 	add	fp, #8
0ec50     A7 3E 68 FC | 	wrlong	#31, fp
0ec54     2C 4E 05 F1 | 	add	fp, #44
0ec58     A7 12 02 FB | 	rdlong	arg01, fp
0ec5c     34 4E 85 F1 | 	sub	fp, #52
0ec60     88 A1 B0 FD | 	call	#_pslpeek
0ec64     A7 FA 61 FC | 	wrlong	result1, fp
0ec68     00 04 00 FF 
0ec6c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0ec70     08 4E 05 31 |  if_ae	add	fp, #8
0ec74     A7 56 68 3C |  if_ae	wrlong	#43, fp
0ec78     08 4E 85 31 |  if_ae	sub	fp, #8
0ec7c                 | LR__1161
0ec7c     A7 12 02 F6 | 	mov	arg01, fp
0ec80     DC B4 BF FD | 	call	#_push
0ec84                 | LR__1162
0ec84     A7 F0 03 F6 | 	mov	ptra, fp
0ec88     B2 00 A0 FD | 	call	#popregs_
0ec8c                 | _do_getvar_ret
0ec8c     2D 00 64 FD | 	ret
0ec90                 | 
0ec90                 | ' 
0ec90                 | ' 
0ec90                 | ' sub do_getaddr
0ec90                 | _do_getaddr
0ec90     01 4A 05 F6 | 	mov	COUNT_, #1
0ec94     A8 00 A0 FD | 	call	#pushregs_
0ec98     38 F0 07 F1 | 	add	ptra, #56
0ec9c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0ec9c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0ec9c     6A 00 00 FF 
0eca0     64 E4 05 F1 | 	add	objptr, ##54372
0eca4     F2 12 02 FB | 	rdlong	arg01, objptr
0eca8     09 FD 01 F6 | 	mov	result2, arg01
0ecac     01 FC 65 F0 | 	shl	result2, #1
0ecb0     09 FD 01 F1 | 	add	result2, arg01
0ecb4     02 FC 65 F0 | 	shl	result2, #2
0ecb8     03 00 00 FF 
0ecbc     04 E4 85 F1 | 	sub	objptr, ##1540
0ecc0     F2 FC 01 F1 | 	add	result2, objptr
0ecc4     04 FC 05 F1 | 	add	result2, #4
0ecc8     FE FC 09 FB | 	rdlong	result2, result2 wz
0eccc     67 00 00 FF 
0ecd0     60 E4 85 F1 | 	sub	objptr, ##52832
0ecd4     C4 00 90 5D |  if_ne	jmp	#LR__1170
0ecd8     6A 00 00 FF 
0ecdc     64 E4 05 F1 | 	add	objptr, ##54372
0ece0     F2 12 02 FB | 	rdlong	arg01, objptr
0ece4     09 FD 01 F6 | 	mov	result2, arg01
0ece8     01 FC 65 F0 | 	shl	result2, #1
0ecec     09 FD 01 F1 | 	add	result2, arg01
0ecf0     02 FC 65 F0 | 	shl	result2, #2
0ecf4     03 00 00 FF 
0ecf8     04 E4 85 F1 | 	sub	objptr, ##1540
0ecfc     F2 FC 01 F1 | 	add	result2, objptr
0ed00     FE 12 02 FB | 	rdlong	arg01, result2
0ed04     04 12 66 F0 | 	shl	arg01, #4
0ed08     32 00 00 FF 
0ed0c     74 E4 85 F1 | 	sub	objptr, ##25716
0ed10     F2 12 02 F1 | 	add	arg01, objptr
0ed14     0C 12 06 F1 | 	add	arg01, #12
0ed18     09 13 02 FB | 	rdlong	arg01, arg01
0ed1c     08 4E 05 F1 | 	add	fp, #8
0ed20     A7 12 62 FC | 	wrlong	arg01, fp
0ed24                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ed24                 | '    if t1.result_type>=array_no_type then goto 2200
0ed24     08 4E 85 F1 | 	sub	fp, #8
0ed28     00 13 16 F2 | 	cmp	arg01, #256 wc
0ed2c     34 00 00 FF 
0ed30     EC E5 85 F1 | 	sub	objptr, ##27116
0ed34     64 00 90 3D |  if_ae	jmp	#LR__1171
0ed38     6A 00 00 FF 
0ed3c     64 E4 05 F1 | 	add	objptr, ##54372
0ed40     F2 12 02 FB | 	rdlong	arg01, objptr
0ed44     09 FB 01 F6 | 	mov	result1, arg01
0ed48     01 FA 65 F0 | 	shl	result1, #1
0ed4c     09 FB 01 F1 | 	add	result1, arg01
0ed50     02 FA 65 F0 | 	shl	result1, #2
0ed54     03 00 00 FF 
0ed58     04 E4 85 F1 | 	sub	objptr, ##1540
0ed5c     F2 FA 01 F1 | 	add	result1, objptr
0ed60     FD FA 01 FB | 	rdlong	result1, result1
0ed64     04 FA 65 F0 | 	shl	result1, #4
0ed68     32 00 00 FF 
0ed6c     74 E4 85 F1 | 	sub	objptr, ##25716
0ed70     F2 FA 01 F1 | 	add	result1, objptr
0ed74     04 FA 05 F1 | 	add	result1, #4
0ed78     34 00 00 FF 
0ed7c     EC E5 85 F1 | 	sub	objptr, ##27116
0ed80     A7 FA 61 FC | 	wrlong	result1, fp
0ed84     08 4E 05 F1 | 	add	fp, #8
0ed88     A7 3A 68 FC | 	wrlong	#29, fp
0ed8c     08 4E 85 F1 | 	sub	fp, #8
0ed90     A7 12 02 F6 | 	mov	arg01, fp
0ed94     C8 B3 BF FD | 	call	#_push
0ed98                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0ed98                 | '   t1.result_type=result_uint
0ed98                 | '   push t1 : return
0ed98     D8 02 90 FD | 	jmp	#LR__1180
0ed9c                 | LR__1170
0ed9c                 | LR__1171
0ed9c     6A 00 00 FF 
0eda0     64 E4 05 F1 | 	add	objptr, ##54372
0eda4     F2 FE 01 FB | 	rdlong	result3, objptr
0eda8     FF 12 02 F6 | 	mov	arg01, result3
0edac     01 12 66 F0 | 	shl	arg01, #1
0edb0     FF 12 02 F1 | 	add	arg01, result3
0edb4     02 12 66 F0 | 	shl	arg01, #2
0edb8     03 00 00 FF 
0edbc     04 E4 85 F1 | 	sub	objptr, ##1540
0edc0     F2 12 02 F1 | 	add	arg01, objptr
0edc4     09 13 02 FB | 	rdlong	arg01, arg01
0edc8     04 12 66 F0 | 	shl	arg01, #4
0edcc     32 00 00 FF 
0edd0     74 E4 85 F1 | 	sub	objptr, ##25716
0edd4     F2 12 02 F1 | 	add	arg01, objptr
0edd8     04 12 06 F1 | 	add	arg01, #4
0eddc     09 13 02 FB | 	rdlong	arg01, arg01
0ede0     0C 4E 05 F1 | 	add	fp, #12
0ede4     A7 12 62 FC | 	wrlong	arg01, fp
0ede8     0C 4E 85 F1 | 	sub	fp, #12
0edec     34 00 00 FF 
0edf0     EC E5 85 F1 | 	sub	objptr, ##27116
0edf4     F4 9F B0 FD | 	call	#_pslpeek
0edf8     FD FA 31 F9 | 	getword	result1, result1, #0
0edfc     10 4E 05 F1 | 	add	fp, #16
0ee00     A7 FA 61 FC | 	wrlong	result1, fp
0ee04     6A 00 00 FF 
0ee08     64 E4 05 F1 | 	add	objptr, ##54372
0ee0c     F2 FE 01 FB | 	rdlong	result3, objptr
0ee10     FF 12 02 F6 | 	mov	arg01, result3
0ee14     01 12 66 F0 | 	shl	arg01, #1
0ee18     FF 12 02 F1 | 	add	arg01, result3
0ee1c     02 12 66 F0 | 	shl	arg01, #2
0ee20     03 00 00 FF 
0ee24     04 E4 85 F1 | 	sub	objptr, ##1540
0ee28     F2 12 02 F1 | 	add	arg01, objptr
0ee2c     04 12 06 F1 | 	add	arg01, #4
0ee30     09 13 02 FB | 	rdlong	arg01, arg01
0ee34     04 4E 05 F1 | 	add	fp, #4
0ee38     A7 12 62 FC | 	wrlong	arg01, fp
0ee3c     08 4E 85 F1 | 	sub	fp, #8
0ee40     A7 12 02 FB | 	rdlong	arg01, fp
0ee44     0C 4E 85 F1 | 	sub	fp, #12
0ee48     02 12 06 F1 | 	add	arg01, #2
0ee4c     67 00 00 FF 
0ee50     60 E4 85 F1 | 	sub	objptr, ##52832
0ee54     3C 9F B0 FD | 	call	#_pspeek
0ee58     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ee5c     18 4E 05 F1 | 	add	fp, #24
0ee60     A7 FA 61 FC | 	wrlong	result1, fp
0ee64     0C 4E 85 F1 | 	sub	fp, #12
0ee68     A7 12 02 FB | 	rdlong	arg01, fp
0ee6c     0C 4E 85 F1 | 	sub	fp, #12
0ee70     04 12 06 F1 | 	add	arg01, #4
0ee74     74 9F B0 FD | 	call	#_pslpeek
0ee78     1C 4E 05 F1 | 	add	fp, #28
0ee7c     A7 FA 61 FC | 	wrlong	result1, fp
0ee80     10 4E 85 F1 | 	sub	fp, #16
0ee84     A7 12 02 FB | 	rdlong	arg01, fp
0ee88     0C 4E 85 F1 | 	sub	fp, #12
0ee8c     08 12 06 F1 | 	add	arg01, #8
0ee90     58 9F B0 FD | 	call	#_pslpeek
0ee94     20 4E 05 F1 | 	add	fp, #32
0ee98     A7 FA 61 FC | 	wrlong	result1, fp
0ee9c     14 4E 85 F1 | 	sub	fp, #20
0eea0     A7 12 02 FB | 	rdlong	arg01, fp
0eea4     0C 4E 85 F1 | 	sub	fp, #12
0eea8     0C 12 06 F1 | 	add	arg01, #12
0eeac     3C 9F B0 FD | 	call	#_pslpeek
0eeb0     24 4E 05 F1 | 	add	fp, #36
0eeb4     A7 FA 61 FC | 	wrlong	result1, fp
0eeb8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0eeb8                 | ' esize=pspeek(arrptr+2)
0eeb8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0eeb8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0eeb8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0eeb8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0eeb8     10 4E 85 F1 | 	sub	fp, #16
0eebc     A7 12 02 FB | 	rdlong	arg01, fp
0eec0     14 4E 85 F1 | 	sub	fp, #20
0eec4     03 12 16 F2 | 	cmp	arg01, #3 wc
0eec8     34 00 90 CD |  if_b	jmp	#LR__1172
0eecc     F8 B1 BF FD | 	call	#_pop
0eed0     A7 FA 61 FC | 	wrlong	result1, fp
0eed4     04 4E 05 F1 | 	add	fp, #4
0eed8     A7 FC 61 FC | 	wrlong	result2, fp
0eedc     04 4E 05 F1 | 	add	fp, #4
0eee0     A7 FE 61 FC | 	wrlong	result3, fp
0eee4     08 4E 85 F1 | 	sub	fp, #8
0eee8     A7 12 02 F6 | 	mov	arg01, fp
0eeec     2C 3B B0 FD | 	call	#_converttoint
0eef0     30 4E 05 F1 | 	add	fp, #48
0eef4     A7 FA 61 FC | 	wrlong	result1, fp
0eef8     30 4E 85 F1 | 	sub	fp, #48
0eefc     0C 00 90 FD | 	jmp	#LR__1173
0ef00                 | LR__1172
0ef00     30 4E 05 F1 | 	add	fp, #48
0ef04     A7 00 68 FC | 	wrlong	#0, fp
0ef08     30 4E 85 F1 | 	sub	fp, #48
0ef0c                 | LR__1173
0ef0c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0ef0c     14 4E 05 F1 | 	add	fp, #20
0ef10     A7 12 02 FB | 	rdlong	arg01, fp
0ef14     14 4E 85 F1 | 	sub	fp, #20
0ef18     02 12 16 F2 | 	cmp	arg01, #2 wc
0ef1c     34 00 90 CD |  if_b	jmp	#LR__1174
0ef20     A4 B1 BF FD | 	call	#_pop
0ef24     A7 FA 61 FC | 	wrlong	result1, fp
0ef28     04 4E 05 F1 | 	add	fp, #4
0ef2c     A7 FC 61 FC | 	wrlong	result2, fp
0ef30     04 4E 05 F1 | 	add	fp, #4
0ef34     A7 FE 61 FC | 	wrlong	result3, fp
0ef38     08 4E 85 F1 | 	sub	fp, #8
0ef3c     A7 12 02 F6 | 	mov	arg01, fp
0ef40     D8 3A B0 FD | 	call	#_converttoint
0ef44     2C 4E 05 F1 | 	add	fp, #44
0ef48     A7 FA 61 FC | 	wrlong	result1, fp
0ef4c     2C 4E 85 F1 | 	sub	fp, #44
0ef50     0C 00 90 FD | 	jmp	#LR__1175
0ef54                 | LR__1174
0ef54     2C 4E 05 F1 | 	add	fp, #44
0ef58     A7 00 68 FC | 	wrlong	#0, fp
0ef5c     2C 4E 85 F1 | 	sub	fp, #44
0ef60                 | LR__1175
0ef60                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0ef60     14 4E 05 F1 | 	add	fp, #20
0ef64     A7 12 02 FB | 	rdlong	arg01, fp
0ef68     14 4E 85 F1 | 	sub	fp, #20
0ef6c     01 12 16 F2 | 	cmp	arg01, #1 wc
0ef70     34 00 90 CD |  if_b	jmp	#LR__1176
0ef74     50 B1 BF FD | 	call	#_pop
0ef78     A7 FA 61 FC | 	wrlong	result1, fp
0ef7c     04 4E 05 F1 | 	add	fp, #4
0ef80     A7 FC 61 FC | 	wrlong	result2, fp
0ef84     04 4E 05 F1 | 	add	fp, #4
0ef88     A7 FE 61 FC | 	wrlong	result3, fp
0ef8c     08 4E 85 F1 | 	sub	fp, #8
0ef90     A7 12 02 F6 | 	mov	arg01, fp
0ef94     84 3A B0 FD | 	call	#_converttoint
0ef98     28 4E 05 F1 | 	add	fp, #40
0ef9c     A7 FA 61 FC | 	wrlong	result1, fp
0efa0     28 4E 85 F1 | 	sub	fp, #40
0efa4     0C 00 90 FD | 	jmp	#LR__1177
0efa8                 | LR__1176
0efa8     28 4E 05 F1 | 	add	fp, #40
0efac     A7 00 68 FC | 	wrlong	#0, fp
0efb0     28 4E 85 F1 | 	sub	fp, #40
0efb4                 | LR__1177
0efb4                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0efb4                 | ' if numpar>0 then
0efb4     14 4E 05 F1 | 	add	fp, #20
0efb8     A7 FE 01 FB | 	rdlong	result3, fp
0efbc     14 4E 85 F1 | 	sub	fp, #20
0efc0     01 FE 15 F2 | 	cmp	result3, #1 wc
0efc4     8C 00 90 CD |  if_b	jmp	#LR__1178
0efc8     0C 4E 05 F1 | 	add	fp, #12
0efcc     A7 FC 01 FB | 	rdlong	result2, fp
0efd0     1C 4E 05 F1 | 	add	fp, #28
0efd4     A7 FE 01 FB | 	rdlong	result3, fp
0efd8     04 4E 05 F1 | 	add	fp, #4
0efdc     A7 12 02 FB | 	rdlong	arg01, fp
0efe0     10 4E 85 F1 | 	sub	fp, #16
0efe4     A7 FA 01 FB | 	rdlong	result1, fp
0efe8     FD 12 02 FD | 	qmul	arg01, result1
0efec     10 FC 05 F1 | 	add	result2, #16
0eff0     14 4E 05 F1 | 	add	fp, #20
0eff4     A7 1E 02 FB | 	rdlong	local01, fp
0eff8     18 12 62 FD | 	getqx	arg01
0effc     FD 1E 02 FD | 	qmul	local01, result1
0f000     09 FF 01 F1 | 	add	result3, arg01
0f004     10 4E 85 F1 | 	sub	fp, #16
0f008     A7 1E 02 FB | 	rdlong	local01, fp
0f00c     18 FA 61 FD | 	getqx	result1
0f010     0F FB 01 FD | 	qmul	result1, local01
0f014     08 4E 85 F1 | 	sub	fp, #8
0f018     A7 1E 02 FB | 	rdlong	local01, fp
0f01c     18 FA 61 FD | 	getqx	result1
0f020     FD FE 01 F1 | 	add	result3, result1
0f024     0F FF 01 FD | 	qmul	result3, local01
0f028     1C 4E 05 F1 | 	add	fp, #28
0f02c     18 1E 62 FD | 	getqx	local01
0f030     0F FD 01 F1 | 	add	result2, local01
0f034     A7 FC 61 FC | 	wrlong	result2, fp
0f038     2C 4E 85 F1 | 	sub	fp, #44
0f03c     A7 3A 68 FC | 	wrlong	#29, fp
0f040     2C 4E 05 F1 | 	add	fp, #44
0f044     A7 1E 02 FB | 	rdlong	local01, fp
0f048     34 4E 85 F1 | 	sub	fp, #52
0f04c     A7 1E 62 FC | 	wrlong	local01, fp
0f050     18 00 90 FD | 	jmp	#LR__1179
0f054                 | LR__1178
0f054     08 4E 05 F1 | 	add	fp, #8
0f058     A7 3A 68 FC | 	wrlong	#29, fp
0f05c     04 4E 05 F1 | 	add	fp, #4
0f060     A7 1E 02 FB | 	rdlong	local01, fp
0f064     0C 4E 85 F1 | 	sub	fp, #12
0f068     A7 1E 62 FC | 	wrlong	local01, fp
0f06c                 | LR__1179
0f06c     A7 12 02 F6 | 	mov	arg01, fp
0f070     EC B0 BF FD | 	call	#_push
0f074                 | LR__1180
0f074     A7 F0 03 F6 | 	mov	ptra, fp
0f078     B2 00 A0 FD | 	call	#popregs_
0f07c                 | _do_getaddr_ret
0f07c     2D 00 64 FD | 	ret
0f080                 | 
0f080                 | ' 
0f080                 | ' 
0f080                 | ' sub do_inkey
0f080                 | _do_inkey
0f080     02 4A 05 F6 | 	mov	COUNT_, #2
0f084     A8 00 A0 FD | 	call	#pushregs_
0f088     0C F0 07 F1 | 	add	ptra, #12
0f08c     90 CA B0 FD | 	call	#_usbnew_spin2_get_key
0f090     65 00 00 FF 
0f094     58 E4 05 F1 | 	add	objptr, ##51800
0f098     F2 FA 61 FC | 	wrlong	result1, objptr
0f09c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0f09c     65 00 00 FF 
0f0a0     58 E4 85 F1 | 	sub	objptr, ##51800
0f0a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f0a8     94 00 90 AD |  if_e	jmp	#LR__1191
0f0ac     65 00 00 FF 
0f0b0     58 E4 05 F1 | 	add	objptr, ##51800
0f0b4     F2 1C 02 FB | 	rdlong	arg06, objptr
0f0b8     65 00 00 FF 
0f0bc     58 E4 85 F1 | 	sub	objptr, ##51800
0f0c0     00 00 40 FF 
0f0c4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f0c8     65 00 00 CF 
0f0cc     58 E4 05 C1 |  if_b	add	objptr, ##51800
0f0d0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f0d4     65 00 00 CF 
0f0d8     58 E4 85 C1 |  if_b	sub	objptr, ##51800
0f0dc     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f0e0     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f0e4     58 00 90 3D |  if_ae	jmp	#LR__1191
0f0e8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0f0e8     79 00 00 FF 
0f0ec     C4 E5 05 F1 | 	add	objptr, ##62404
0f0f0     F2 1C 02 FB | 	rdlong	arg06, objptr
0f0f4     79 00 00 FF 
0f0f8     C4 E5 85 F1 | 	sub	objptr, ##62404
0f0fc     01 1C 0E F2 | 	cmp	arg06, #1 wz
0f100     3C 00 90 5D |  if_ne	jmp	#LR__1190
0f104     7B 00 00 FF 
0f108     68 E4 05 F1 | 	add	objptr, ##63080
0f10c     F2 14 02 FB | 	rdlong	arg02, objptr
0f110     04 E4 85 F1 | 	sub	objptr, #4
0f114     F2 1A 02 FB | 	rdlong	arg05, objptr
0f118     07 12 06 F6 | 	mov	arg01, #7
0f11c     56 00 00 FF 
0f120     44 16 06 F6 | 	mov	arg03, ##44100
0f124     0C 18 C6 F9 | 	decod	arg04, #12
0f128     01 1C 66 F6 | 	neg	arg06, #1
0f12c     6F 00 00 FF 
0f130     A4 E5 85 F1 | 	sub	objptr, ##57252
0f134     70 CD B0 FD | 	call	#_audio096_spin2_play
0f138     0B 00 00 FF 
0f13c     C0 E4 85 F1 | 	sub	objptr, ##5824
0f140                 | LR__1190
0f140                 | LR__1191
0f140                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0f140     65 00 00 FF 
0f144     58 E4 05 F1 | 	add	objptr, ##51800
0f148     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0f14c     65 00 00 FF 
0f150     58 E4 85 F1 | 	sub	objptr, ##51800
0f154     D4 01 90 AD |  if_e	jmp	#LR__1200
0f158     65 00 00 FF 
0f15c     58 E4 05 F1 | 	add	objptr, ##51800
0f160     F2 1C 02 FB | 	rdlong	arg06, objptr
0f164     65 00 00 FF 
0f168     58 E4 85 F1 | 	sub	objptr, ##51800
0f16c     00 00 40 FF 
0f170     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f174     65 00 00 CF 
0f178     58 E4 05 C1 |  if_b	add	objptr, ##51800
0f17c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f180     65 00 00 CF 
0f184     58 E4 85 C1 |  if_b	sub	objptr, ##51800
0f188     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f18c     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f190     98 01 90 3D |  if_ae	jmp	#LR__1200
0f194                 | '   if leds and 2 = 2 then 
0f194     7B 00 00 FF 
0f198     88 E4 05 F1 | 	add	objptr, ##63112
0f19c     F2 1E 0A FB | 	rdlong	local01, objptr wz
0f1a0     7B 00 00 FF 
0f1a4     88 E4 85 F1 | 	sub	objptr, ##63112
0f1a8     58 01 90 AD |  if_e	jmp	#LR__1199
0f1ac                 | '     if key>96 andalso key<123 then
0f1ac     65 00 00 FF 
0f1b0     58 E4 05 F1 | 	add	objptr, ##51800
0f1b4     F2 1E 02 FB | 	rdlong	local01, objptr
0f1b8     65 00 00 FF 
0f1bc     58 E4 85 F1 | 	sub	objptr, ##51800
0f1c0     61 1E 16 F2 | 	cmp	local01, #97 wc
0f1c4     3C 00 90 CD |  if_b	jmp	#LR__1192
0f1c8     65 00 00 FF 
0f1cc     58 E4 05 F1 | 	add	objptr, ##51800
0f1d0     F2 1E 02 FB | 	rdlong	local01, objptr
0f1d4     65 00 00 FF 
0f1d8     58 E4 85 F1 | 	sub	objptr, ##51800
0f1dc     7B 1E 16 F2 | 	cmp	local01, #123 wc
0f1e0     20 00 90 3D |  if_ae	jmp	#LR__1192
0f1e4     65 00 00 FF 
0f1e8     58 E4 05 F1 | 	add	objptr, ##51800
0f1ec     F2 1E 02 FB | 	rdlong	local01, objptr
0f1f0     20 1E 86 F1 | 	sub	local01, #32
0f1f4     F2 1E 62 FC | 	wrlong	local01, objptr
0f1f8     65 00 00 FF 
0f1fc     58 E4 85 F1 | 	sub	objptr, ##51800
0f200     00 01 90 FD | 	jmp	#LR__1198
0f204                 | LR__1192
0f204     65 00 00 FF 
0f208     58 E4 05 F1 | 	add	objptr, ##51800
0f20c     F2 1E 02 FB | 	rdlong	local01, objptr
0f210     65 00 00 FF 
0f214     58 E4 85 F1 | 	sub	objptr, ##51800
0f218     41 1E 16 F2 | 	cmp	local01, #65 wc
0f21c     3C 00 90 CD |  if_b	jmp	#LR__1193
0f220     65 00 00 FF 
0f224     58 E4 05 F1 | 	add	objptr, ##51800
0f228     F2 1E 02 FB | 	rdlong	local01, objptr
0f22c     65 00 00 FF 
0f230     58 E4 85 F1 | 	sub	objptr, ##51800
0f234     5B 1E 16 F2 | 	cmp	local01, #91 wc
0f238     20 00 90 3D |  if_ae	jmp	#LR__1193
0f23c     65 00 00 FF 
0f240     58 E4 05 F1 | 	add	objptr, ##51800
0f244     F2 1E 02 FB | 	rdlong	local01, objptr
0f248     20 1E 06 F1 | 	add	local01, #32
0f24c     F2 1E 62 FC | 	wrlong	local01, objptr
0f250     65 00 00 FF 
0f254     58 E4 85 F1 | 	sub	objptr, ##51800
0f258     A8 00 90 FD | 	jmp	#LR__1197
0f25c                 | LR__1193
0f25c     65 00 00 FF 
0f260     58 E4 05 F1 | 	add	objptr, ##51800
0f264     F2 1E 02 FB | 	rdlong	local01, objptr
0f268     65 00 00 FF 
0f26c     58 E4 85 F1 | 	sub	objptr, ##51800
0f270     17 1E 16 F2 | 	cmp	local01, #23 wc
0f274     3C 00 90 CD |  if_b	jmp	#LR__1194
0f278     65 00 00 FF 
0f27c     58 E4 05 F1 | 	add	objptr, ##51800
0f280     F2 1E 02 FB | 	rdlong	local01, objptr
0f284     65 00 00 FF 
0f288     58 E4 85 F1 | 	sub	objptr, ##51800
0f28c     20 1E 16 F2 | 	cmp	local01, #32 wc
0f290     20 00 90 3D |  if_ae	jmp	#LR__1194
0f294     65 00 00 FF 
0f298     58 E4 05 F1 | 	add	objptr, ##51800
0f29c     F2 1E 02 FB | 	rdlong	local01, objptr
0f2a0     09 1E 86 F1 | 	sub	local01, #9
0f2a4     F2 1E 62 FC | 	wrlong	local01, objptr
0f2a8     65 00 00 FF 
0f2ac     58 E4 85 F1 | 	sub	objptr, ##51800
0f2b0     50 00 90 FD | 	jmp	#LR__1196
0f2b4                 | LR__1194
0f2b4     65 00 00 FF 
0f2b8     58 E4 05 F1 | 	add	objptr, ##51800
0f2bc     F2 20 02 FB | 	rdlong	local02, objptr
0f2c0     65 00 00 FF 
0f2c4     58 E4 85 F1 | 	sub	objptr, ##51800
0f2c8     0E 20 16 F2 | 	cmp	local02, #14 wc
0f2cc     34 00 90 CD |  if_b	jmp	#LR__1195
0f2d0     65 00 00 FF 
0f2d4     58 E4 05 F1 | 	add	objptr, ##51800
0f2d8     F2 1E 02 FB | 	rdlong	local01, objptr
0f2dc     65 00 00 FF 
0f2e0     58 E4 85 F1 | 	sub	objptr, ##51800
0f2e4     17 1E 16 F2 | 	cmp	local01, #23 wc
0f2e8     7B 00 00 CF 
0f2ec     98 E4 05 C1 |  if_b	add	objptr, ##63128
0f2f0     F2 20 02 CB |  if_b	rdlong	local02, objptr
0f2f4     27 20 06 C1 |  if_b	add	local02, #39
0f2f8     F2 20 62 CC |  if_b	wrlong	local02, objptr
0f2fc     7B 00 00 CF 
0f300     98 E4 85 C1 |  if_b	sub	objptr, ##63128
0f304                 | LR__1195
0f304                 | LR__1196
0f304                 | LR__1197
0f304                 | LR__1198
0f304                 | LR__1199
0f304     65 00 00 FF 
0f308     58 E4 05 F1 | 	add	objptr, ##51800
0f30c     F2 12 02 FB | 	rdlong	arg01, objptr
0f310     65 00 00 FF 
0f314     58 E4 85 F1 | 	sub	objptr, ##51800
0f318     80 9B B0 FD | 	call	#_scantochar
0f31c     FD 12 02 F6 | 	mov	arg01, result1
0f320     DC F1 B0 FD | 	call	#__system__Chr_S
0f324     A7 FA 61 FC | 	wrlong	result1, fp
0f328     0C 00 90 FD | 	jmp	#LR__1201
0f32c                 | LR__1200
0f32c     5F 01 00 FF 
0f330     02 21 06 F6 | 	mov	local02, ##@LR__4936
0f334     A7 20 62 FC | 	wrlong	local02, fp
0f338                 | LR__1201
0f338     08 4E 05 F1 | 	add	fp, #8
0f33c     A7 3E 68 FC | 	wrlong	#31, fp
0f340     08 4E 85 F1 | 	sub	fp, #8
0f344     A7 12 02 F6 | 	mov	arg01, fp
0f348     14 AE BF FD | 	call	#_push
0f34c     A7 F0 03 F6 | 	mov	ptra, fp
0f350     B2 00 A0 FD | 	call	#popregs_
0f354                 | _do_inkey_ret
0f354     2D 00 64 FD | 	ret
0f358                 | 
0f358                 | '  
0f358                 | ' '------------------------ Operators 
0f358                 | ' 
0f358                 | ' sub do_plus 
0f358                 | _do_plus
0f358     05 4A 05 F6 | 	mov	COUNT_, #5
0f35c     A8 00 A0 FD | 	call	#pushregs_
0f360     18 F0 07 F1 | 	add	ptra, #24
0f364     60 AD BF FD | 	call	#_pop
0f368     FD 1E 02 F6 | 	mov	local01, result1
0f36c     FE 20 02 F6 | 	mov	local02, result2
0f370     FF 22 02 F6 | 	mov	local03, result3
0f374     0C 4E 05 F1 | 	add	fp, #12
0f378     A7 1E 62 FC | 	wrlong	local01, fp
0f37c     04 4E 05 F1 | 	add	fp, #4
0f380     A7 20 62 FC | 	wrlong	local02, fp
0f384     04 4E 05 F1 | 	add	fp, #4
0f388     A7 22 62 FC | 	wrlong	local03, fp
0f38c     14 4E 85 F1 | 	sub	fp, #20
0f390     34 AD BF FD | 	call	#_pop
0f394     FF 22 02 F6 | 	mov	local03, result3
0f398     A7 FA 61 FC | 	wrlong	result1, fp
0f39c     04 4E 05 F1 | 	add	fp, #4
0f3a0     A7 FC 61 FC | 	wrlong	result2, fp
0f3a4     04 4E 05 F1 | 	add	fp, #4
0f3a8     A7 22 62 FC | 	wrlong	local03, fp
0f3ac                 | ' 
0f3ac                 | ' t2=pop()
0f3ac                 | ' t1=pop()
0f3ac                 | ' 
0f3ac                 | ' 
0f3ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0f3ac     08 4E 85 F1 | 	sub	fp, #8
0f3b0     1D 22 0E F2 | 	cmp	local03, #29 wz
0f3b4     14 4E 05 A1 |  if_e	add	fp, #20
0f3b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f3bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f3c0     12 23 02 A6 |  if_e	mov	local03, local04
0f3c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f3c8     1C 00 90 5D |  if_ne	jmp	#LR__1210
0f3cc     A7 1E 02 FB | 	rdlong	local01, fp
0f3d0     0C 4E 05 F1 | 	add	fp, #12
0f3d4     A7 20 02 FB | 	rdlong	local02, fp
0f3d8     0C 4E 85 F1 | 	sub	fp, #12
0f3dc     10 1F 02 F1 | 	add	local01, local02
0f3e0     A7 1E 62 FC | 	wrlong	local01, fp
0f3e4     48 04 90 FD | 	jmp	#LR__1225
0f3e8                 | LR__1210
0f3e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0f3e8     08 4E 05 F1 | 	add	fp, #8
0f3ec     A7 1E 02 FB | 	rdlong	local01, fp
0f3f0     08 4E 85 F1 | 	sub	fp, #8
0f3f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f3f8     14 4E 05 A1 |  if_e	add	fp, #20
0f3fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f400     14 4E 85 A1 |  if_e	sub	fp, #20
0f404     12 23 02 A6 |  if_e	mov	local03, local04
0f408     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f40c     28 00 90 5D |  if_ne	jmp	#LR__1211
0f410     A7 1E 02 FB | 	rdlong	local01, fp
0f414     0C 4E 05 F1 | 	add	fp, #12
0f418     A7 20 02 FB | 	rdlong	local02, fp
0f41c     0C 4E 85 F1 | 	sub	fp, #12
0f420     10 1F 02 F1 | 	add	local01, local02
0f424     A7 1E 62 FC | 	wrlong	local01, fp
0f428     08 4E 05 F1 | 	add	fp, #8
0f42c     A7 38 68 FC | 	wrlong	#28, fp
0f430     08 4E 85 F1 | 	sub	fp, #8
0f434     F8 03 90 FD | 	jmp	#LR__1225
0f438                 | LR__1211
0f438                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f438     08 4E 05 F1 | 	add	fp, #8
0f43c     A7 1E 02 FB | 	rdlong	local01, fp
0f440     08 4E 85 F1 | 	sub	fp, #8
0f444     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f448     14 4E 05 A1 |  if_e	add	fp, #20
0f44c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f450     14 4E 85 A1 |  if_e	sub	fp, #20
0f454     12 23 02 A6 |  if_e	mov	local03, local04
0f458     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f45c     30 00 90 5D |  if_ne	jmp	#LR__1212
0f460     A7 12 02 FB | 	rdlong	arg01, fp
0f464     08 F6 B0 FD | 	call	#__system___float_fromuns
0f468     FD 12 02 F6 | 	mov	arg01, result1
0f46c     0C 4E 05 F1 | 	add	fp, #12
0f470     A7 14 02 FB | 	rdlong	arg02, fp
0f474     0C 4E 85 F1 | 	sub	fp, #12
0f478     28 F6 B0 FD | 	call	#__system___float_add
0f47c     A7 FA 61 FC | 	wrlong	result1, fp
0f480     08 4E 05 F1 | 	add	fp, #8
0f484     A7 3C 68 FC | 	wrlong	#30, fp
0f488     08 4E 85 F1 | 	sub	fp, #8
0f48c     A0 03 90 FD | 	jmp	#LR__1225
0f490                 | LR__1212
0f490                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0f490     08 4E 05 F1 | 	add	fp, #8
0f494     A7 1E 02 FB | 	rdlong	local01, fp
0f498     08 4E 85 F1 | 	sub	fp, #8
0f49c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f4a0     14 4E 05 A1 |  if_e	add	fp, #20
0f4a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f4ac     12 23 02 A6 |  if_e	mov	local03, local04
0f4b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f4b4     1C 00 90 5D |  if_ne	jmp	#LR__1213
0f4b8     A7 1E 02 FB | 	rdlong	local01, fp
0f4bc     0C 4E 05 F1 | 	add	fp, #12
0f4c0     A7 20 02 FB | 	rdlong	local02, fp
0f4c4     0C 4E 85 F1 | 	sub	fp, #12
0f4c8     10 1F 02 F1 | 	add	local01, local02
0f4cc     A7 1E 62 FC | 	wrlong	local01, fp
0f4d0     5C 03 90 FD | 	jmp	#LR__1225
0f4d4                 | LR__1213
0f4d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0f4d4     08 4E 05 F1 | 	add	fp, #8
0f4d8     A7 1E 02 FB | 	rdlong	local01, fp
0f4dc     08 4E 85 F1 | 	sub	fp, #8
0f4e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f4e4     14 4E 05 A1 |  if_e	add	fp, #20
0f4e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4ec     14 4E 85 A1 |  if_e	sub	fp, #20
0f4f0     12 23 02 A6 |  if_e	mov	local03, local04
0f4f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f4f8     1C 00 90 5D |  if_ne	jmp	#LR__1214
0f4fc     A7 1E 02 FB | 	rdlong	local01, fp
0f500     0C 4E 05 F1 | 	add	fp, #12
0f504     A7 20 02 FB | 	rdlong	local02, fp
0f508     0C 4E 85 F1 | 	sub	fp, #12
0f50c     10 1F 02 F1 | 	add	local01, local02
0f510     A7 1E 62 FC | 	wrlong	local01, fp
0f514     18 03 90 FD | 	jmp	#LR__1225
0f518                 | LR__1214
0f518                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f518     08 4E 05 F1 | 	add	fp, #8
0f51c     A7 1E 02 FB | 	rdlong	local01, fp
0f520     08 4E 85 F1 | 	sub	fp, #8
0f524     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f528     14 4E 05 A1 |  if_e	add	fp, #20
0f52c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f530     14 4E 85 A1 |  if_e	sub	fp, #20
0f534     12 23 02 A6 |  if_e	mov	local03, local04
0f538     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f53c     40 00 90 5D |  if_ne	jmp	#LR__1215
0f540     A7 12 02 FB | 	rdlong	arg01, fp
0f544     09 13 52 F6 | 	abs	arg01, arg01 wc
0f548     1F 26 C6 C9 |  if_b	decod	local05, #31
0f54c     00 26 06 36 |  if_ae	mov	local05, #0
0f550     1C F5 B0 FD | 	call	#__system___float_fromuns
0f554     13 FB 61 F5 | 	xor	result1, local05
0f558     FD 12 02 F6 | 	mov	arg01, result1
0f55c     0C 4E 05 F1 | 	add	fp, #12
0f560     A7 14 02 FB | 	rdlong	arg02, fp
0f564     0C 4E 85 F1 | 	sub	fp, #12
0f568     38 F5 B0 FD | 	call	#__system___float_add
0f56c     A7 FA 61 FC | 	wrlong	result1, fp
0f570     08 4E 05 F1 | 	add	fp, #8
0f574     A7 3C 68 FC | 	wrlong	#30, fp
0f578     08 4E 85 F1 | 	sub	fp, #8
0f57c     B0 02 90 FD | 	jmp	#LR__1225
0f580                 | LR__1215
0f580                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0f580     08 4E 05 F1 | 	add	fp, #8
0f584     A7 1E 02 FB | 	rdlong	local01, fp
0f588     08 4E 85 F1 | 	sub	fp, #8
0f58c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f590     14 4E 05 A1 |  if_e	add	fp, #20
0f594     A7 24 02 AB |  if_e	rdlong	local04, fp
0f598     14 4E 85 A1 |  if_e	sub	fp, #20
0f59c     12 23 02 A6 |  if_e	mov	local03, local04
0f5a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f5a4     28 00 90 5D |  if_ne	jmp	#LR__1216
0f5a8     A7 1E 02 FB | 	rdlong	local01, fp
0f5ac     0C 4E 05 F1 | 	add	fp, #12
0f5b0     A7 12 02 FB | 	rdlong	arg01, fp
0f5b4     0C 4E 85 F1 | 	sub	fp, #12
0f5b8     B4 F4 B0 FD | 	call	#__system___float_fromuns
0f5bc     FD 14 02 F6 | 	mov	arg02, result1
0f5c0     0F 13 02 F6 | 	mov	arg01, local01
0f5c4     DC F4 B0 FD | 	call	#__system___float_add
0f5c8     A7 FA 61 FC | 	wrlong	result1, fp
0f5cc     60 02 90 FD | 	jmp	#LR__1225
0f5d0                 | LR__1216
0f5d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0f5d0     08 4E 05 F1 | 	add	fp, #8
0f5d4     A7 1E 02 FB | 	rdlong	local01, fp
0f5d8     08 4E 85 F1 | 	sub	fp, #8
0f5dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5e0     14 4E 05 A1 |  if_e	add	fp, #20
0f5e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f5ec     12 23 02 A6 |  if_e	mov	local03, local04
0f5f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f5f4     38 00 90 5D |  if_ne	jmp	#LR__1217
0f5f8     A7 1E 02 FB | 	rdlong	local01, fp
0f5fc     0C 4E 05 F1 | 	add	fp, #12
0f600     A7 12 02 FB | 	rdlong	arg01, fp
0f604     0C 4E 85 F1 | 	sub	fp, #12
0f608     09 13 52 F6 | 	abs	arg01, arg01 wc
0f60c     1F 26 C6 C9 |  if_b	decod	local05, #31
0f610     00 26 06 36 |  if_ae	mov	local05, #0
0f614     58 F4 B0 FD | 	call	#__system___float_fromuns
0f618     13 FB 61 F5 | 	xor	result1, local05
0f61c     FD 14 02 F6 | 	mov	arg02, result1
0f620     0F 13 02 F6 | 	mov	arg01, local01
0f624     7C F4 B0 FD | 	call	#__system___float_add
0f628     A7 FA 61 FC | 	wrlong	result1, fp
0f62c     00 02 90 FD | 	jmp	#LR__1225
0f630                 | LR__1217
0f630                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0f630     08 4E 05 F1 | 	add	fp, #8
0f634     A7 1E 02 FB | 	rdlong	local01, fp
0f638     08 4E 85 F1 | 	sub	fp, #8
0f63c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f640     14 4E 05 A1 |  if_e	add	fp, #20
0f644     A7 24 02 AB |  if_e	rdlong	local04, fp
0f648     14 4E 85 A1 |  if_e	sub	fp, #20
0f64c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0f650     1C 00 90 5D |  if_ne	jmp	#LR__1218
0f654     A7 12 02 FB | 	rdlong	arg01, fp
0f658     0C 4E 05 F1 | 	add	fp, #12
0f65c     A7 14 02 FB | 	rdlong	arg02, fp
0f660     0C 4E 85 F1 | 	sub	fp, #12
0f664     3C F4 B0 FD | 	call	#__system___float_add
0f668     A7 FA 61 FC | 	wrlong	result1, fp
0f66c     C0 01 90 FD | 	jmp	#LR__1225
0f670                 | LR__1218
0f670                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0f670     08 4E 05 F1 | 	add	fp, #8
0f674     A7 1E 02 FB | 	rdlong	local01, fp
0f678     08 4E 85 F1 | 	sub	fp, #8
0f67c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f680     24 00 90 5D |  if_ne	jmp	#LR__1219
0f684     14 4E 05 F1 | 	add	fp, #20
0f688     A7 22 02 FB | 	rdlong	local03, fp
0f68c     14 4E 85 F1 | 	sub	fp, #20
0f690     1F 22 0E F2 | 	cmp	local03, #31 wz
0f694     A7 04 68 5C |  if_ne	wrlong	#2, fp
0f698     08 4E 05 51 |  if_ne	add	fp, #8
0f69c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f6a0     08 4E 85 51 |  if_ne	sub	fp, #8
0f6a4     88 01 90 5D |  if_ne	jmp	#LR__1225
0f6a8                 | LR__1219
0f6a8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0f6a8     14 4E 05 F1 | 	add	fp, #20
0f6ac     A7 1E 02 FB | 	rdlong	local01, fp
0f6b0     14 4E 85 F1 | 	sub	fp, #20
0f6b4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f6b8     24 00 90 5D |  if_ne	jmp	#LR__1220
0f6bc     08 4E 05 F1 | 	add	fp, #8
0f6c0     A7 22 02 FB | 	rdlong	local03, fp
0f6c4     08 4E 85 F1 | 	sub	fp, #8
0f6c8     1F 22 0E F2 | 	cmp	local03, #31 wz
0f6cc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0f6d0     08 4E 05 51 |  if_ne	add	fp, #8
0f6d4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f6d8     08 4E 85 51 |  if_ne	sub	fp, #8
0f6dc     50 01 90 5D |  if_ne	jmp	#LR__1225
0f6e0                 | LR__1220
0f6e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0f6e0     08 4E 05 F1 | 	add	fp, #8
0f6e4     A7 1E 02 FB | 	rdlong	local01, fp
0f6e8     08 4E 85 F1 | 	sub	fp, #8
0f6ec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f6f0     14 4E 05 A1 |  if_e	add	fp, #20
0f6f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f6f8     14 4E 85 A1 |  if_e	sub	fp, #20
0f6fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f700     1C 00 90 5D |  if_ne	jmp	#LR__1221
0f704     A7 12 02 FB | 	rdlong	arg01, fp
0f708     0C 4E 05 F1 | 	add	fp, #12
0f70c     A7 14 02 FB | 	rdlong	arg02, fp
0f710     0C 4E 85 F1 | 	sub	fp, #12
0f714     3C CC B0 FD | 	call	#__system___string_concat
0f718     A7 FA 61 FC | 	wrlong	result1, fp
0f71c     10 01 90 FD | 	jmp	#LR__1225
0f720                 | LR__1221
0f720                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0f720     08 4E 05 F1 | 	add	fp, #8
0f724     A7 1E 02 FB | 	rdlong	local01, fp
0f728     08 4E 85 F1 | 	sub	fp, #8
0f72c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f730     14 4E 05 A1 |  if_e	add	fp, #20
0f734     A7 22 02 AB |  if_e	rdlong	local03, fp
0f738     14 4E 85 A1 |  if_e	sub	fp, #20
0f73c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f740     30 00 90 5D |  if_ne	jmp	#LR__1222
0f744     A7 12 02 FB | 	rdlong	arg01, fp
0f748     20 E9 BF FD | 	call	#_convertstring
0f74c     FD 12 02 F6 | 	mov	arg01, result1
0f750     0C 4E 05 F1 | 	add	fp, #12
0f754     A7 14 02 FB | 	rdlong	arg02, fp
0f758     0C 4E 85 F1 | 	sub	fp, #12
0f75c     F4 CB B0 FD | 	call	#__system___string_concat
0f760     A7 FA 61 FC | 	wrlong	result1, fp
0f764     08 4E 05 F1 | 	add	fp, #8
0f768     A7 3E 68 FC | 	wrlong	#31, fp
0f76c     08 4E 85 F1 | 	sub	fp, #8
0f770     BC 00 90 FD | 	jmp	#LR__1225
0f774                 | LR__1222
0f774                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0f774     08 4E 05 F1 | 	add	fp, #8
0f778     A7 1E 02 FB | 	rdlong	local01, fp
0f77c     08 4E 85 F1 | 	sub	fp, #8
0f780     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f784     14 4E 05 A1 |  if_e	add	fp, #20
0f788     A7 22 02 AB |  if_e	rdlong	local03, fp
0f78c     14 4E 85 A1 |  if_e	sub	fp, #20
0f790     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f794     28 00 90 5D |  if_ne	jmp	#LR__1223
0f798     A7 1E 02 FB | 	rdlong	local01, fp
0f79c     0C 4E 05 F1 | 	add	fp, #12
0f7a0     A7 12 02 FB | 	rdlong	arg01, fp
0f7a4     0C 4E 85 F1 | 	sub	fp, #12
0f7a8     C0 E8 BF FD | 	call	#_convertstring
0f7ac     FD 14 02 F6 | 	mov	arg02, result1
0f7b0     0F 13 02 F6 | 	mov	arg01, local01
0f7b4     9C CB B0 FD | 	call	#__system___string_concat
0f7b8     A7 FA 61 FC | 	wrlong	result1, fp
0f7bc     70 00 90 FD | 	jmp	#LR__1225
0f7c0                 | LR__1223
0f7c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0f7c0     08 4E 05 F1 | 	add	fp, #8
0f7c4     A7 1E 02 FB | 	rdlong	local01, fp
0f7c8     08 4E 85 F1 | 	sub	fp, #8
0f7cc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f7d0     14 4E 05 A1 |  if_e	add	fp, #20
0f7d4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7d8     14 4E 85 A1 |  if_e	sub	fp, #20
0f7dc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f7e0     3C 00 90 5D |  if_ne	jmp	#LR__1224
0f7e4     A7 12 02 FB | 	rdlong	arg01, fp
0f7e8     80 E8 BF FD | 	call	#_convertstring
0f7ec     FD 1E 02 F6 | 	mov	local01, result1
0f7f0     0C 4E 05 F1 | 	add	fp, #12
0f7f4     A7 12 02 FB | 	rdlong	arg01, fp
0f7f8     0C 4E 85 F1 | 	sub	fp, #12
0f7fc     6C E8 BF FD | 	call	#_convertstring
0f800     FD 14 02 F6 | 	mov	arg02, result1
0f804     0F 13 02 F6 | 	mov	arg01, local01
0f808     48 CB B0 FD | 	call	#__system___string_concat
0f80c     A7 FA 61 FC | 	wrlong	result1, fp
0f810     08 4E 05 F1 | 	add	fp, #8
0f814     A7 3E 68 FC | 	wrlong	#31, fp
0f818     08 4E 85 F1 | 	sub	fp, #8
0f81c     10 00 90 FD | 	jmp	#LR__1225
0f820                 | LR__1224
0f820     A7 08 68 FC | 	wrlong	#4, fp
0f824     08 4E 05 F1 | 	add	fp, #8
0f828     A7 FE 69 FC | 	wrlong	#255, fp
0f82c     08 4E 85 F1 | 	sub	fp, #8
0f830                 | LR__1225
0f830     A7 12 02 F6 | 	mov	arg01, fp
0f834     28 A9 BF FD | 	call	#_push
0f838     A7 F0 03 F6 | 	mov	ptra, fp
0f83c     B2 00 A0 FD | 	call	#popregs_
0f840                 | _do_plus_ret
0f840     2D 00 64 FD | 	ret
0f844                 | 
0f844                 | ' 
0f844                 | ' sub do_minus
0f844                 | _do_minus
0f844     05 4A 05 F6 | 	mov	COUNT_, #5
0f848     A8 00 A0 FD | 	call	#pushregs_
0f84c     18 F0 07 F1 | 	add	ptra, #24
0f850     74 A8 BF FD | 	call	#_pop
0f854     FD 1E 02 F6 | 	mov	local01, result1
0f858     FE 20 02 F6 | 	mov	local02, result2
0f85c     FF 22 02 F6 | 	mov	local03, result3
0f860     0C 4E 05 F1 | 	add	fp, #12
0f864     A7 1E 62 FC | 	wrlong	local01, fp
0f868     04 4E 05 F1 | 	add	fp, #4
0f86c     A7 20 62 FC | 	wrlong	local02, fp
0f870     04 4E 05 F1 | 	add	fp, #4
0f874     A7 22 62 FC | 	wrlong	local03, fp
0f878     14 4E 85 F1 | 	sub	fp, #20
0f87c     48 A8 BF FD | 	call	#_pop
0f880     FF 22 02 F6 | 	mov	local03, result3
0f884     A7 FA 61 FC | 	wrlong	result1, fp
0f888     04 4E 05 F1 | 	add	fp, #4
0f88c     A7 FC 61 FC | 	wrlong	result2, fp
0f890     04 4E 05 F1 | 	add	fp, #4
0f894     A7 22 62 FC | 	wrlong	local03, fp
0f898                 | ' 
0f898                 | ' t2=pop()
0f898                 | ' t1=pop()
0f898                 | ' 
0f898                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0f898     08 4E 85 F1 | 	sub	fp, #8
0f89c     1D 22 0E F2 | 	cmp	local03, #29 wz
0f8a0     14 4E 05 A1 |  if_e	add	fp, #20
0f8a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f8ac     12 23 02 A6 |  if_e	mov	local03, local04
0f8b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f8b4     5C 00 90 5D |  if_ne	jmp	#LR__1231
0f8b8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0f8b8     0C 4E 05 F1 | 	add	fp, #12
0f8bc     A7 1E 02 FB | 	rdlong	local01, fp
0f8c0     0C 4E 85 F1 | 	sub	fp, #12
0f8c4     A7 22 02 FB | 	rdlong	local03, fp
0f8c8     11 1F 12 F2 | 	cmp	local01, local03 wc
0f8cc     1C 00 90 3D |  if_ae	jmp	#LR__1230
0f8d0     A7 1E 02 FB | 	rdlong	local01, fp
0f8d4     0C 4E 05 F1 | 	add	fp, #12
0f8d8     A7 20 02 FB | 	rdlong	local02, fp
0f8dc     0C 4E 85 F1 | 	sub	fp, #12
0f8e0     10 1F 82 F1 | 	sub	local01, local02
0f8e4     A7 1E 62 FC | 	wrlong	local01, fp
0f8e8     F4 02 90 FD | 	jmp	#LR__1240
0f8ec                 | LR__1230
0f8ec     A7 1E 02 FB | 	rdlong	local01, fp
0f8f0     0C 4E 05 F1 | 	add	fp, #12
0f8f4     A7 20 02 FB | 	rdlong	local02, fp
0f8f8     0C 4E 85 F1 | 	sub	fp, #12
0f8fc     10 1F 82 F1 | 	sub	local01, local02
0f900     A7 1E 62 FC | 	wrlong	local01, fp
0f904     08 4E 05 F1 | 	add	fp, #8
0f908     A7 38 68 FC | 	wrlong	#28, fp
0f90c     08 4E 85 F1 | 	sub	fp, #8
0f910     CC 02 90 FD | 	jmp	#LR__1240
0f914                 | LR__1231
0f914                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0f914     08 4E 05 F1 | 	add	fp, #8
0f918     A7 1E 02 FB | 	rdlong	local01, fp
0f91c     08 4E 85 F1 | 	sub	fp, #8
0f920     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f924     14 4E 05 A1 |  if_e	add	fp, #20
0f928     A7 24 02 AB |  if_e	rdlong	local04, fp
0f92c     14 4E 85 A1 |  if_e	sub	fp, #20
0f930     12 23 02 A6 |  if_e	mov	local03, local04
0f934     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f938     28 00 90 5D |  if_ne	jmp	#LR__1232
0f93c     A7 1E 02 FB | 	rdlong	local01, fp
0f940     0C 4E 05 F1 | 	add	fp, #12
0f944     A7 20 02 FB | 	rdlong	local02, fp
0f948     0C 4E 85 F1 | 	sub	fp, #12
0f94c     10 1F 82 F1 | 	sub	local01, local02
0f950     A7 1E 62 FC | 	wrlong	local01, fp
0f954     08 4E 05 F1 | 	add	fp, #8
0f958     A7 38 68 FC | 	wrlong	#28, fp
0f95c     08 4E 85 F1 | 	sub	fp, #8
0f960     7C 02 90 FD | 	jmp	#LR__1240
0f964                 | LR__1232
0f964                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0f964     08 4E 05 F1 | 	add	fp, #8
0f968     A7 1E 02 FB | 	rdlong	local01, fp
0f96c     08 4E 85 F1 | 	sub	fp, #8
0f970     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f974     14 4E 05 A1 |  if_e	add	fp, #20
0f978     A7 24 02 AB |  if_e	rdlong	local04, fp
0f97c     14 4E 85 A1 |  if_e	sub	fp, #20
0f980     12 23 02 A6 |  if_e	mov	local03, local04
0f984     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f988     34 00 90 5D |  if_ne	jmp	#LR__1233
0f98c     A7 12 02 FB | 	rdlong	arg01, fp
0f990     DC F0 B0 FD | 	call	#__system___float_fromuns
0f994     FD 12 02 F6 | 	mov	arg01, result1
0f998     0C 4E 05 F1 | 	add	fp, #12
0f99c     A7 14 02 FB | 	rdlong	arg02, fp
0f9a0     0C 4E 85 F1 | 	sub	fp, #12
0f9a4     1F 14 E6 F4 | 	bitnot	arg02, #31
0f9a8     F8 F0 B0 FD | 	call	#__system___float_add
0f9ac     A7 FA 61 FC | 	wrlong	result1, fp
0f9b0     08 4E 05 F1 | 	add	fp, #8
0f9b4     A7 3C 68 FC | 	wrlong	#30, fp
0f9b8     08 4E 85 F1 | 	sub	fp, #8
0f9bc     20 02 90 FD | 	jmp	#LR__1240
0f9c0                 | LR__1233
0f9c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0f9c0     08 4E 05 F1 | 	add	fp, #8
0f9c4     A7 1E 02 FB | 	rdlong	local01, fp
0f9c8     08 4E 85 F1 | 	sub	fp, #8
0f9cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f9d0     14 4E 05 A1 |  if_e	add	fp, #20
0f9d4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9d8     14 4E 85 A1 |  if_e	sub	fp, #20
0f9dc     12 23 02 A6 |  if_e	mov	local03, local04
0f9e0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f9e4     1C 00 90 5D |  if_ne	jmp	#LR__1234
0f9e8     A7 1E 02 FB | 	rdlong	local01, fp
0f9ec     0C 4E 05 F1 | 	add	fp, #12
0f9f0     A7 20 02 FB | 	rdlong	local02, fp
0f9f4     0C 4E 85 F1 | 	sub	fp, #12
0f9f8     10 1F 82 F1 | 	sub	local01, local02
0f9fc     A7 1E 62 FC | 	wrlong	local01, fp
0fa00     DC 01 90 FD | 	jmp	#LR__1240
0fa04                 | LR__1234
0fa04                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0fa04     08 4E 05 F1 | 	add	fp, #8
0fa08     A7 1E 02 FB | 	rdlong	local01, fp
0fa0c     08 4E 85 F1 | 	sub	fp, #8
0fa10     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa14     14 4E 05 A1 |  if_e	add	fp, #20
0fa18     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa1c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa20     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0fa24     1C 00 90 5D |  if_ne	jmp	#LR__1235
0fa28     A7 1E 02 FB | 	rdlong	local01, fp
0fa2c     0C 4E 05 F1 | 	add	fp, #12
0fa30     A7 20 02 FB | 	rdlong	local02, fp
0fa34     0C 4E 85 F1 | 	sub	fp, #12
0fa38     10 1F 82 F1 | 	sub	local01, local02
0fa3c     A7 1E 62 FC | 	wrlong	local01, fp
0fa40     9C 01 90 FD | 	jmp	#LR__1240
0fa44                 | LR__1235
0fa44                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0fa44     08 4E 05 F1 | 	add	fp, #8
0fa48     A7 1E 02 FB | 	rdlong	local01, fp
0fa4c     08 4E 85 F1 | 	sub	fp, #8
0fa50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa54     14 4E 05 A1 |  if_e	add	fp, #20
0fa58     A7 22 02 AB |  if_e	rdlong	local03, fp
0fa5c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fa64     44 00 90 5D |  if_ne	jmp	#LR__1236
0fa68     A7 12 02 FB | 	rdlong	arg01, fp
0fa6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa70     1F 26 C6 C9 |  if_b	decod	local05, #31
0fa74     00 26 06 36 |  if_ae	mov	local05, #0
0fa78     F4 EF B0 FD | 	call	#__system___float_fromuns
0fa7c     13 FB 61 F5 | 	xor	result1, local05
0fa80     FD 12 02 F6 | 	mov	arg01, result1
0fa84     0C 4E 05 F1 | 	add	fp, #12
0fa88     A7 14 02 FB | 	rdlong	arg02, fp
0fa8c     0C 4E 85 F1 | 	sub	fp, #12
0fa90     1F 14 E6 F4 | 	bitnot	arg02, #31
0fa94     0C F0 B0 FD | 	call	#__system___float_add
0fa98     A7 FA 61 FC | 	wrlong	result1, fp
0fa9c     08 4E 05 F1 | 	add	fp, #8
0faa0     A7 3C 68 FC | 	wrlong	#30, fp
0faa4     08 4E 85 F1 | 	sub	fp, #8
0faa8     34 01 90 FD | 	jmp	#LR__1240
0faac                 | LR__1236
0faac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0faac     08 4E 05 F1 | 	add	fp, #8
0fab0     A7 1E 02 FB | 	rdlong	local01, fp
0fab4     08 4E 85 F1 | 	sub	fp, #8
0fab8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fabc     14 4E 05 A1 |  if_e	add	fp, #20
0fac0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fac4     14 4E 85 A1 |  if_e	sub	fp, #20
0fac8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0facc     2C 00 90 5D |  if_ne	jmp	#LR__1237
0fad0     A7 1E 02 FB | 	rdlong	local01, fp
0fad4     0C 4E 05 F1 | 	add	fp, #12
0fad8     A7 12 02 FB | 	rdlong	arg01, fp
0fadc     0C 4E 85 F1 | 	sub	fp, #12
0fae0     8C EF B0 FD | 	call	#__system___float_fromuns
0fae4     FD 14 02 F6 | 	mov	arg02, result1
0fae8     0F 13 02 F6 | 	mov	arg01, local01
0faec     1F 14 E6 F4 | 	bitnot	arg02, #31
0faf0     B0 EF B0 FD | 	call	#__system___float_add
0faf4     A7 FA 61 FC | 	wrlong	result1, fp
0faf8     E4 00 90 FD | 	jmp	#LR__1240
0fafc                 | LR__1237
0fafc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0fafc     08 4E 05 F1 | 	add	fp, #8
0fb00     A7 1E 02 FB | 	rdlong	local01, fp
0fb04     08 4E 85 F1 | 	sub	fp, #8
0fb08     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fb0c     14 4E 05 A1 |  if_e	add	fp, #20
0fb10     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb14     14 4E 85 A1 |  if_e	sub	fp, #20
0fb18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fb1c     3C 00 90 5D |  if_ne	jmp	#LR__1238
0fb20     A7 1E 02 FB | 	rdlong	local01, fp
0fb24     0C 4E 05 F1 | 	add	fp, #12
0fb28     A7 12 02 FB | 	rdlong	arg01, fp
0fb2c     0C 4E 85 F1 | 	sub	fp, #12
0fb30     09 13 52 F6 | 	abs	arg01, arg01 wc
0fb34     1F 26 C6 C9 |  if_b	decod	local05, #31
0fb38     00 26 06 36 |  if_ae	mov	local05, #0
0fb3c     30 EF B0 FD | 	call	#__system___float_fromuns
0fb40     13 FB 61 F5 | 	xor	result1, local05
0fb44     FD 14 02 F6 | 	mov	arg02, result1
0fb48     0F 13 02 F6 | 	mov	arg01, local01
0fb4c     1F 14 E6 F4 | 	bitnot	arg02, #31
0fb50     50 EF B0 FD | 	call	#__system___float_add
0fb54     A7 FA 61 FC | 	wrlong	result1, fp
0fb58     84 00 90 FD | 	jmp	#LR__1240
0fb5c                 | LR__1238
0fb5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0fb5c     08 4E 05 F1 | 	add	fp, #8
0fb60     A7 1E 02 FB | 	rdlong	local01, fp
0fb64     08 4E 85 F1 | 	sub	fp, #8
0fb68     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fb6c     14 4E 05 A1 |  if_e	add	fp, #20
0fb70     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb74     14 4E 85 A1 |  if_e	sub	fp, #20
0fb78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb7c     20 00 90 5D |  if_ne	jmp	#LR__1239
0fb80     A7 12 02 FB | 	rdlong	arg01, fp
0fb84     0C 4E 05 F1 | 	add	fp, #12
0fb88     A7 14 02 FB | 	rdlong	arg02, fp
0fb8c     0C 4E 85 F1 | 	sub	fp, #12
0fb90     1F 14 E6 F4 | 	bitnot	arg02, #31
0fb94     0C EF B0 FD | 	call	#__system___float_add
0fb98     A7 FA 61 FC | 	wrlong	result1, fp
0fb9c     40 00 90 FD | 	jmp	#LR__1240
0fba0                 | LR__1239
0fba0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0fba0     08 4E 05 F1 | 	add	fp, #8
0fba4     A7 1E 02 FB | 	rdlong	local01, fp
0fba8     08 4E 85 F1 | 	sub	fp, #8
0fbac     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fbb0     14 4E 05 51 |  if_ne	add	fp, #20
0fbb4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fbb8     14 4E 85 51 |  if_ne	sub	fp, #20
0fbbc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0fbc0     A7 06 68 AC |  if_e	wrlong	#3, fp
0fbc4     08 4E 05 A1 |  if_e	add	fp, #8
0fbc8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fbcc     08 4E 85 A1 |  if_e	sub	fp, #8
0fbd0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0fbd4     08 4E 05 51 |  if_ne	add	fp, #8
0fbd8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fbdc     08 4E 85 51 |  if_ne	sub	fp, #8
0fbe0                 | LR__1240
0fbe0     A7 12 02 F6 | 	mov	arg01, fp
0fbe4     78 A5 BF FD | 	call	#_push
0fbe8     A7 F0 03 F6 | 	mov	ptra, fp
0fbec     B2 00 A0 FD | 	call	#popregs_
0fbf0                 | _do_minus_ret
0fbf0     2D 00 64 FD | 	ret
0fbf4                 | 
0fbf4                 | ' 
0fbf4                 | ' sub do_and 
0fbf4                 | _do_and
0fbf4     03 4A 05 F6 | 	mov	COUNT_, #3
0fbf8     A8 00 A0 FD | 	call	#pushregs_
0fbfc     18 F0 07 F1 | 	add	ptra, #24
0fc00     C4 A4 BF FD | 	call	#_pop
0fc04     FD 12 02 F6 | 	mov	arg01, result1
0fc08     FE 1E 02 F6 | 	mov	local01, result2
0fc0c     FF 20 02 F6 | 	mov	local02, result3
0fc10     0C 4E 05 F1 | 	add	fp, #12
0fc14     A7 12 62 FC | 	wrlong	arg01, fp
0fc18     04 4E 05 F1 | 	add	fp, #4
0fc1c     A7 1E 62 FC | 	wrlong	local01, fp
0fc20     04 4E 05 F1 | 	add	fp, #4
0fc24     A7 20 62 FC | 	wrlong	local02, fp
0fc28     14 4E 85 F1 | 	sub	fp, #20
0fc2c     98 A4 BF FD | 	call	#_pop
0fc30     FF 22 02 F6 | 	mov	local03, result3
0fc34     A7 FA 61 FC | 	wrlong	result1, fp
0fc38     04 4E 05 F1 | 	add	fp, #4
0fc3c     A7 FC 61 FC | 	wrlong	result2, fp
0fc40     04 4E 05 F1 | 	add	fp, #4
0fc44     A7 22 62 FC | 	wrlong	local03, fp
0fc48                 | ' 
0fc48                 | ' t2=pop()
0fc48                 | ' t1=pop()
0fc48                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fc48     08 4E 85 F1 | 	sub	fp, #8
0fc4c     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc50     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc54     A7 22 62 AC |  if_e	wrlong	local03, fp
0fc58     08 4E 05 A1 |  if_e	add	fp, #8
0fc5c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fc60     08 4E 85 A1 |  if_e	sub	fp, #8
0fc64                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fc64     14 4E 05 F1 | 	add	fp, #20
0fc68     A7 22 02 FB | 	rdlong	local03, fp
0fc6c     14 4E 85 F1 | 	sub	fp, #20
0fc70     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc74     18 00 90 5D |  if_ne	jmp	#LR__1250
0fc78     0C 4E 05 F1 | 	add	fp, #12
0fc7c     A7 22 02 FB | 	rdlong	local03, fp
0fc80     A7 22 62 FC | 	wrlong	local03, fp
0fc84     08 4E 05 F1 | 	add	fp, #8
0fc88     A7 3A 68 FC | 	wrlong	#29, fp
0fc8c     14 4E 85 F1 | 	sub	fp, #20
0fc90                 | LR__1250
0fc90                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0fc90     08 4E 05 F1 | 	add	fp, #8
0fc94     A7 22 02 FB | 	rdlong	local03, fp
0fc98     08 4E 85 F1 | 	sub	fp, #8
0fc9c     1F 22 0E F2 | 	cmp	local03, #31 wz
0fca0     14 4E 05 51 |  if_ne	add	fp, #20
0fca4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fca8     14 4E 85 51 |  if_ne	sub	fp, #20
0fcac     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fcb0     08 4E 05 51 |  if_ne	add	fp, #8
0fcb4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fcb8     08 4E 85 51 |  if_ne	sub	fp, #8
0fcbc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fcc0     14 4E 05 51 |  if_ne	add	fp, #20
0fcc4     14 4E 85 51 |  if_ne	sub	fp, #20
0fcc8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fccc     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fcd0     08 4E 05 A1 |  if_e	add	fp, #8
0fcd4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fcd8     08 4E 85 A1 |  if_e	sub	fp, #8
0fcdc     18 00 90 AD |  if_e	jmp	#LR__1251
0fce0     A7 22 02 FB | 	rdlong	local03, fp
0fce4     0C 4E 05 F1 | 	add	fp, #12
0fce8     A7 1E 02 FB | 	rdlong	local01, fp
0fcec     0C 4E 85 F1 | 	sub	fp, #12
0fcf0     0F 23 02 F5 | 	and	local03, local01
0fcf4     A7 22 62 FC | 	wrlong	local03, fp
0fcf8                 | LR__1251
0fcf8     A7 12 02 F6 | 	mov	arg01, fp
0fcfc     60 A4 BF FD | 	call	#_push
0fd00     A7 F0 03 F6 | 	mov	ptra, fp
0fd04     B2 00 A0 FD | 	call	#popregs_
0fd08                 | _do_and_ret
0fd08     2D 00 64 FD | 	ret
0fd0c                 | 
0fd0c                 | ' 
0fd0c                 | ' sub do_or 
0fd0c                 | _do_or
0fd0c     03 4A 05 F6 | 	mov	COUNT_, #3
0fd10     A8 00 A0 FD | 	call	#pushregs_
0fd14     18 F0 07 F1 | 	add	ptra, #24
0fd18     AC A3 BF FD | 	call	#_pop
0fd1c     FD 12 02 F6 | 	mov	arg01, result1
0fd20     FE 1E 02 F6 | 	mov	local01, result2
0fd24     FF 20 02 F6 | 	mov	local02, result3
0fd28     0C 4E 05 F1 | 	add	fp, #12
0fd2c     A7 12 62 FC | 	wrlong	arg01, fp
0fd30     04 4E 05 F1 | 	add	fp, #4
0fd34     A7 1E 62 FC | 	wrlong	local01, fp
0fd38     04 4E 05 F1 | 	add	fp, #4
0fd3c     A7 20 62 FC | 	wrlong	local02, fp
0fd40     14 4E 85 F1 | 	sub	fp, #20
0fd44     80 A3 BF FD | 	call	#_pop
0fd48     FF 22 02 F6 | 	mov	local03, result3
0fd4c     A7 FA 61 FC | 	wrlong	result1, fp
0fd50     04 4E 05 F1 | 	add	fp, #4
0fd54     A7 FC 61 FC | 	wrlong	result2, fp
0fd58     04 4E 05 F1 | 	add	fp, #4
0fd5c     A7 22 62 FC | 	wrlong	local03, fp
0fd60                 | ' 
0fd60                 | ' t2=pop()
0fd60                 | ' t1=pop()
0fd60                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fd60     08 4E 85 F1 | 	sub	fp, #8
0fd64     1C 22 0E F2 | 	cmp	local03, #28 wz
0fd68     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd6c     A7 22 62 AC |  if_e	wrlong	local03, fp
0fd70     08 4E 05 A1 |  if_e	add	fp, #8
0fd74     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fd78     08 4E 85 A1 |  if_e	sub	fp, #8
0fd7c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fd7c     14 4E 05 F1 | 	add	fp, #20
0fd80     A7 22 02 FB | 	rdlong	local03, fp
0fd84     14 4E 85 F1 | 	sub	fp, #20
0fd88     1C 22 0E F2 | 	cmp	local03, #28 wz
0fd8c     18 00 90 5D |  if_ne	jmp	#LR__1260
0fd90     0C 4E 05 F1 | 	add	fp, #12
0fd94     A7 22 02 FB | 	rdlong	local03, fp
0fd98     A7 22 62 FC | 	wrlong	local03, fp
0fd9c     08 4E 05 F1 | 	add	fp, #8
0fda0     A7 3A 68 FC | 	wrlong	#29, fp
0fda4     14 4E 85 F1 | 	sub	fp, #20
0fda8                 | LR__1260
0fda8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0fda8     08 4E 05 F1 | 	add	fp, #8
0fdac     A7 22 02 FB | 	rdlong	local03, fp
0fdb0     08 4E 85 F1 | 	sub	fp, #8
0fdb4     1F 22 0E F2 | 	cmp	local03, #31 wz
0fdb8     14 4E 05 51 |  if_ne	add	fp, #20
0fdbc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fdc0     14 4E 85 51 |  if_ne	sub	fp, #20
0fdc4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fdc8     08 4E 05 51 |  if_ne	add	fp, #8
0fdcc     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fdd0     08 4E 85 51 |  if_ne	sub	fp, #8
0fdd4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fdd8     14 4E 05 51 |  if_ne	add	fp, #20
0fddc     14 4E 85 51 |  if_ne	sub	fp, #20
0fde0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fde4     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fde8     08 4E 05 A1 |  if_e	add	fp, #8
0fdec     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fdf0     08 4E 85 A1 |  if_e	sub	fp, #8
0fdf4     18 00 90 AD |  if_e	jmp	#LR__1261
0fdf8     A7 22 02 FB | 	rdlong	local03, fp
0fdfc     0C 4E 05 F1 | 	add	fp, #12
0fe00     A7 1E 02 FB | 	rdlong	local01, fp
0fe04     0C 4E 85 F1 | 	sub	fp, #12
0fe08     0F 23 42 F5 | 	or	local03, local01
0fe0c     A7 22 62 FC | 	wrlong	local03, fp
0fe10                 | LR__1261
0fe10     A7 12 02 F6 | 	mov	arg01, fp
0fe14     48 A3 BF FD | 	call	#_push
0fe18     A7 F0 03 F6 | 	mov	ptra, fp
0fe1c     B2 00 A0 FD | 	call	#popregs_
0fe20                 | _do_or_ret
0fe20     2D 00 64 FD | 	ret
0fe24                 | 
0fe24                 | ' 
0fe24                 | ' sub do_mul
0fe24                 | _do_mul
0fe24     05 4A 05 F6 | 	mov	COUNT_, #5
0fe28     A8 00 A0 FD | 	call	#pushregs_
0fe2c     18 F0 07 F1 | 	add	ptra, #24
0fe30     94 A2 BF FD | 	call	#_pop
0fe34     FD 1E 02 F6 | 	mov	local01, result1
0fe38     FE 20 02 F6 | 	mov	local02, result2
0fe3c     FF 22 02 F6 | 	mov	local03, result3
0fe40     0C 4E 05 F1 | 	add	fp, #12
0fe44     A7 1E 62 FC | 	wrlong	local01, fp
0fe48     04 4E 05 F1 | 	add	fp, #4
0fe4c     A7 20 62 FC | 	wrlong	local02, fp
0fe50     04 4E 05 F1 | 	add	fp, #4
0fe54     A7 22 62 FC | 	wrlong	local03, fp
0fe58     14 4E 85 F1 | 	sub	fp, #20
0fe5c     68 A2 BF FD | 	call	#_pop
0fe60     FF 22 02 F6 | 	mov	local03, result3
0fe64     A7 FA 61 FC | 	wrlong	result1, fp
0fe68     04 4E 05 F1 | 	add	fp, #4
0fe6c     A7 FC 61 FC | 	wrlong	result2, fp
0fe70     04 4E 05 F1 | 	add	fp, #4
0fe74     A7 22 62 FC | 	wrlong	local03, fp
0fe78                 | ' 
0fe78                 | ' t2=pop()
0fe78                 | ' t1=pop()
0fe78                 | ' 
0fe78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0fe78     08 4E 85 F1 | 	sub	fp, #8
0fe7c     1D 22 0E F2 | 	cmp	local03, #29 wz
0fe80     14 4E 05 A1 |  if_e	add	fp, #20
0fe84     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe88     14 4E 85 A1 |  if_e	sub	fp, #20
0fe8c     12 23 02 A6 |  if_e	mov	local03, local04
0fe90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fe94     20 00 90 5D |  if_ne	jmp	#LR__1270
0fe98     A7 20 02 FB | 	rdlong	local02, fp
0fe9c     0C 4E 05 F1 | 	add	fp, #12
0fea0     A7 22 02 FB | 	rdlong	local03, fp
0fea4     11 21 02 FD | 	qmul	local02, local03
0fea8     0C 4E 85 F1 | 	sub	fp, #12
0feac     18 1E 62 FD | 	getqx	local01
0feb0     A7 1E 62 FC | 	wrlong	local01, fp
0feb4     C4 02 90 FD | 	jmp	#LR__1279
0feb8                 | LR__1270
0feb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0feb8     08 4E 05 F1 | 	add	fp, #8
0febc     A7 1E 02 FB | 	rdlong	local01, fp
0fec0     08 4E 85 F1 | 	sub	fp, #8
0fec4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fec8     14 4E 05 A1 |  if_e	add	fp, #20
0fecc     A7 24 02 AB |  if_e	rdlong	local04, fp
0fed0     14 4E 85 A1 |  if_e	sub	fp, #20
0fed4     12 23 02 A6 |  if_e	mov	local03, local04
0fed8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fedc     2C 00 90 5D |  if_ne	jmp	#LR__1271
0fee0     A7 20 02 FB | 	rdlong	local02, fp
0fee4     0C 4E 05 F1 | 	add	fp, #12
0fee8     A7 22 02 FB | 	rdlong	local03, fp
0feec     11 21 02 FD | 	qmul	local02, local03
0fef0     0C 4E 85 F1 | 	sub	fp, #12
0fef4     18 1E 62 FD | 	getqx	local01
0fef8     A7 1E 62 FC | 	wrlong	local01, fp
0fefc     08 4E 05 F1 | 	add	fp, #8
0ff00     A7 38 68 FC | 	wrlong	#28, fp
0ff04     08 4E 85 F1 | 	sub	fp, #8
0ff08     70 02 90 FD | 	jmp	#LR__1279
0ff0c                 | LR__1271
0ff0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0ff0c     08 4E 05 F1 | 	add	fp, #8
0ff10     A7 1E 02 FB | 	rdlong	local01, fp
0ff14     08 4E 85 F1 | 	sub	fp, #8
0ff18     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff1c     14 4E 05 A1 |  if_e	add	fp, #20
0ff20     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff24     14 4E 85 A1 |  if_e	sub	fp, #20
0ff28     12 23 02 A6 |  if_e	mov	local03, local04
0ff2c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff30     30 00 90 5D |  if_ne	jmp	#LR__1272
0ff34     A7 12 02 FB | 	rdlong	arg01, fp
0ff38     34 EB B0 FD | 	call	#__system___float_fromuns
0ff3c     FD 12 02 F6 | 	mov	arg01, result1
0ff40     0C 4E 05 F1 | 	add	fp, #12
0ff44     A7 14 02 FB | 	rdlong	arg02, fp
0ff48     0C 4E 85 F1 | 	sub	fp, #12
0ff4c     24 EF B0 FD | 	call	#__system___float_mul
0ff50     A7 FA 61 FC | 	wrlong	result1, fp
0ff54     08 4E 05 F1 | 	add	fp, #8
0ff58     A7 3C 68 FC | 	wrlong	#30, fp
0ff5c     08 4E 85 F1 | 	sub	fp, #8
0ff60     18 02 90 FD | 	jmp	#LR__1279
0ff64                 | LR__1272
0ff64                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0ff64     08 4E 05 F1 | 	add	fp, #8
0ff68     A7 1E 02 FB | 	rdlong	local01, fp
0ff6c     08 4E 85 F1 | 	sub	fp, #8
0ff70     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff74     14 4E 05 A1 |  if_e	add	fp, #20
0ff78     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff7c     14 4E 85 A1 |  if_e	sub	fp, #20
0ff80     12 23 02 A6 |  if_e	mov	local03, local04
0ff84     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ff88     20 00 90 5D |  if_ne	jmp	#LR__1273
0ff8c     A7 20 02 FB | 	rdlong	local02, fp
0ff90     0C 4E 05 F1 | 	add	fp, #12
0ff94     A7 22 02 FB | 	rdlong	local03, fp
0ff98     11 21 02 FD | 	qmul	local02, local03
0ff9c     0C 4E 85 F1 | 	sub	fp, #12
0ffa0     18 1E 62 FD | 	getqx	local01
0ffa4     A7 1E 62 FC | 	wrlong	local01, fp
0ffa8     D0 01 90 FD | 	jmp	#LR__1279
0ffac                 | LR__1273
0ffac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0ffac     08 4E 05 F1 | 	add	fp, #8
0ffb0     A7 1E 02 FB | 	rdlong	local01, fp
0ffb4     08 4E 85 F1 | 	sub	fp, #8
0ffb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ffbc     14 4E 05 A1 |  if_e	add	fp, #20
0ffc0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffc4     14 4E 85 A1 |  if_e	sub	fp, #20
0ffc8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0ffcc     20 00 90 5D |  if_ne	jmp	#LR__1274
0ffd0     A7 20 02 FB | 	rdlong	local02, fp
0ffd4     0C 4E 05 F1 | 	add	fp, #12
0ffd8     A7 22 02 FB | 	rdlong	local03, fp
0ffdc     11 21 02 FD | 	qmul	local02, local03
0ffe0     0C 4E 85 F1 | 	sub	fp, #12
0ffe4     18 1E 62 FD | 	getqx	local01
0ffe8     A7 1E 62 FC | 	wrlong	local01, fp
0ffec     8C 01 90 FD | 	jmp	#LR__1279
0fff0                 | LR__1274
0fff0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0fff0     08 4E 05 F1 | 	add	fp, #8
0fff4     A7 1E 02 FB | 	rdlong	local01, fp
0fff8     08 4E 85 F1 | 	sub	fp, #8
0fffc     1C 1E 0E F2 | 	cmp	local01, #28 wz
10000     14 4E 05 A1 |  if_e	add	fp, #20
10004     A7 22 02 AB |  if_e	rdlong	local03, fp
10008     14 4E 85 A1 |  if_e	sub	fp, #20
1000c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10010     40 00 90 5D |  if_ne	jmp	#LR__1275
10014     A7 12 02 FB | 	rdlong	arg01, fp
10018     09 13 52 F6 | 	abs	arg01, arg01 wc
1001c     1F 26 C6 C9 |  if_b	decod	local05, #31
10020     00 26 06 36 |  if_ae	mov	local05, #0
10024     48 EA B0 FD | 	call	#__system___float_fromuns
10028     13 FB 61 F5 | 	xor	result1, local05
1002c     FD 12 02 F6 | 	mov	arg01, result1
10030     0C 4E 05 F1 | 	add	fp, #12
10034     A7 14 02 FB | 	rdlong	arg02, fp
10038     0C 4E 85 F1 | 	sub	fp, #12
1003c     34 EE B0 FD | 	call	#__system___float_mul
10040     A7 FA 61 FC | 	wrlong	result1, fp
10044     08 4E 05 F1 | 	add	fp, #8
10048     A7 3C 68 FC | 	wrlong	#30, fp
1004c     08 4E 85 F1 | 	sub	fp, #8
10050     28 01 90 FD | 	jmp	#LR__1279
10054                 | LR__1275
10054                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
10054     08 4E 05 F1 | 	add	fp, #8
10058     A7 1E 02 FB | 	rdlong	local01, fp
1005c     08 4E 85 F1 | 	sub	fp, #8
10060     1E 1E 0E F2 | 	cmp	local01, #30 wz
10064     14 4E 05 A1 |  if_e	add	fp, #20
10068     A7 22 02 AB |  if_e	rdlong	local03, fp
1006c     14 4E 85 A1 |  if_e	sub	fp, #20
10070     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10074     28 00 90 5D |  if_ne	jmp	#LR__1276
10078     A7 1E 02 FB | 	rdlong	local01, fp
1007c     0C 4E 05 F1 | 	add	fp, #12
10080     A7 12 02 FB | 	rdlong	arg01, fp
10084     0C 4E 85 F1 | 	sub	fp, #12
10088     E4 E9 B0 FD | 	call	#__system___float_fromuns
1008c     FD 14 02 F6 | 	mov	arg02, result1
10090     0F 13 02 F6 | 	mov	arg01, local01
10094     DC ED B0 FD | 	call	#__system___float_mul
10098     A7 FA 61 FC | 	wrlong	result1, fp
1009c     DC 00 90 FD | 	jmp	#LR__1279
100a0                 | LR__1276
100a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
100a0     08 4E 05 F1 | 	add	fp, #8
100a4     A7 1E 02 FB | 	rdlong	local01, fp
100a8     08 4E 85 F1 | 	sub	fp, #8
100ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
100b0     14 4E 05 A1 |  if_e	add	fp, #20
100b4     A7 22 02 AB |  if_e	rdlong	local03, fp
100b8     14 4E 85 A1 |  if_e	sub	fp, #20
100bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
100c0     38 00 90 5D |  if_ne	jmp	#LR__1277
100c4     A7 1E 02 FB | 	rdlong	local01, fp
100c8     0C 4E 05 F1 | 	add	fp, #12
100cc     A7 12 02 FB | 	rdlong	arg01, fp
100d0     0C 4E 85 F1 | 	sub	fp, #12
100d4     09 13 52 F6 | 	abs	arg01, arg01 wc
100d8     1F 26 C6 C9 |  if_b	decod	local05, #31
100dc     00 26 06 36 |  if_ae	mov	local05, #0
100e0     8C E9 B0 FD | 	call	#__system___float_fromuns
100e4     13 FB 61 F5 | 	xor	result1, local05
100e8     FD 14 02 F6 | 	mov	arg02, result1
100ec     0F 13 02 F6 | 	mov	arg01, local01
100f0     80 ED B0 FD | 	call	#__system___float_mul
100f4     A7 FA 61 FC | 	wrlong	result1, fp
100f8     80 00 90 FD | 	jmp	#LR__1279
100fc                 | LR__1277
100fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
100fc     08 4E 05 F1 | 	add	fp, #8
10100     A7 1E 02 FB | 	rdlong	local01, fp
10104     08 4E 85 F1 | 	sub	fp, #8
10108     1E 1E 0E F2 | 	cmp	local01, #30 wz
1010c     14 4E 05 A1 |  if_e	add	fp, #20
10110     A7 22 02 AB |  if_e	rdlong	local03, fp
10114     14 4E 85 A1 |  if_e	sub	fp, #20
10118     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1011c     1C 00 90 5D |  if_ne	jmp	#LR__1278
10120     A7 12 02 FB | 	rdlong	arg01, fp
10124     0C 4E 05 F1 | 	add	fp, #12
10128     A7 14 02 FB | 	rdlong	arg02, fp
1012c     0C 4E 85 F1 | 	sub	fp, #12
10130     40 ED B0 FD | 	call	#__system___float_mul
10134     A7 FA 61 FC | 	wrlong	result1, fp
10138     40 00 90 FD | 	jmp	#LR__1279
1013c                 | LR__1278
1013c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1013c     08 4E 05 F1 | 	add	fp, #8
10140     A7 1E 02 FB | 	rdlong	local01, fp
10144     08 4E 85 F1 | 	sub	fp, #8
10148     1F 1E 0E F2 | 	cmp	local01, #31 wz
1014c     14 4E 05 51 |  if_ne	add	fp, #20
10150     A7 22 02 5B |  if_ne	rdlong	local03, fp
10154     14 4E 85 51 |  if_ne	sub	fp, #20
10158     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1015c     A7 10 68 AC |  if_e	wrlong	#8, fp
10160     08 4E 05 A1 |  if_e	add	fp, #8
10164     A7 FE 69 AC |  if_e	wrlong	#255, fp
10168     08 4E 85 A1 |  if_e	sub	fp, #8
1016c     A7 12 68 5C |  if_ne	wrlong	#9, fp
10170     08 4E 05 51 |  if_ne	add	fp, #8
10174     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10178     08 4E 85 51 |  if_ne	sub	fp, #8
1017c                 | LR__1279
1017c     A7 12 02 F6 | 	mov	arg01, fp
10180     DC 9F BF FD | 	call	#_push
10184     A7 F0 03 F6 | 	mov	ptra, fp
10188     B2 00 A0 FD | 	call	#popregs_
1018c                 | _do_mul_ret
1018c     2D 00 64 FD | 	ret
10190                 | 
10190                 | ' 
10190                 | ' sub do_div 
10190                 | _do_div
10190     01 4A 05 F6 | 	mov	COUNT_, #1
10194     A8 00 A0 FD | 	call	#pushregs_
10198     18 F0 07 F1 | 	add	ptra, #24
1019c     28 9F BF FD | 	call	#_pop
101a0     FD 66 02 F6 | 	mov	muldivb_, result1
101a4     FE 64 02 F6 | 	mov	muldiva_, result2
101a8     FF 1E 02 F6 | 	mov	local01, result3
101ac     0C 4E 05 F1 | 	add	fp, #12
101b0     A7 66 62 FC | 	wrlong	muldivb_, fp
101b4     04 4E 05 F1 | 	add	fp, #4
101b8     A7 64 62 FC | 	wrlong	muldiva_, fp
101bc     04 4E 05 F1 | 	add	fp, #4
101c0     A7 1E 62 FC | 	wrlong	local01, fp
101c4     14 4E 85 F1 | 	sub	fp, #20
101c8     FC 9E BF FD | 	call	#_pop
101cc     A7 FA 61 FC | 	wrlong	result1, fp
101d0     04 4E 05 F1 | 	add	fp, #4
101d4     A7 FC 61 FC | 	wrlong	result2, fp
101d8     04 4E 05 F1 | 	add	fp, #4
101dc     A7 FE 61 FC | 	wrlong	result3, fp
101e0                 | ' 
101e0                 | ' t2=pop()
101e0                 | ' t1=pop()
101e0                 | ' 
101e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
101e0     08 4E 85 F1 | 	sub	fp, #8
101e4     1F FE 0D F2 | 	cmp	result3, #31 wz
101e8     14 4E 05 51 |  if_ne	add	fp, #20
101ec     A7 12 02 5B |  if_ne	rdlong	arg01, fp
101f0     14 4E 85 51 |  if_ne	sub	fp, #20
101f4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
101f8     A7 14 68 AC |  if_e	wrlong	#10, fp
101fc     08 4E 05 A1 |  if_e	add	fp, #8
10200     A7 FE 69 AC |  if_e	wrlong	#255, fp
10204     08 4E 85 A1 |  if_e	sub	fp, #8
10208     90 01 90 AD |  if_e	jmp	#LR__1286
1020c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1020c     08 4E 05 F1 | 	add	fp, #8
10210     A7 66 02 FB | 	rdlong	muldivb_, fp
10214     08 4E 85 F1 | 	sub	fp, #8
10218     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1021c     1C 00 90 5D |  if_ne	jmp	#LR__1280
10220     08 4E 05 F1 | 	add	fp, #8
10224     A7 38 68 FC | 	wrlong	#28, fp
10228     08 4E 85 F1 | 	sub	fp, #8
1022c     A7 12 02 FB | 	rdlong	arg01, fp
10230     00 14 06 F6 | 	mov	arg02, #0
10234     04 F1 B0 FD | 	call	#__system___float_tointeger
10238     A7 FA 61 FC | 	wrlong	result1, fp
1023c                 | LR__1280
1023c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1023c     14 4E 05 F1 | 	add	fp, #20
10240     A7 66 02 FB | 	rdlong	muldivb_, fp
10244     14 4E 85 F1 | 	sub	fp, #20
10248     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1024c     28 00 90 5D |  if_ne	jmp	#LR__1281
10250     14 4E 05 F1 | 	add	fp, #20
10254     A7 38 68 FC | 	wrlong	#28, fp
10258     08 4E 85 F1 | 	sub	fp, #8
1025c     A7 12 02 FB | 	rdlong	arg01, fp
10260     0C 4E 85 F1 | 	sub	fp, #12
10264     00 14 06 F6 | 	mov	arg02, #0
10268     D0 F0 B0 FD | 	call	#__system___float_tointeger
1026c     0C 4E 05 F1 | 	add	fp, #12
10270     A7 FA 61 FC | 	wrlong	result1, fp
10274     0C 4E 85 F1 | 	sub	fp, #12
10278                 | LR__1281
10278                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10278     08 4E 05 F1 | 	add	fp, #8
1027c     A7 66 02 FB | 	rdlong	muldivb_, fp
10280     08 4E 85 F1 | 	sub	fp, #8
10284     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10288     14 4E 05 A1 |  if_e	add	fp, #20
1028c     A7 1E 02 AB |  if_e	rdlong	local01, fp
10290     14 4E 85 A1 |  if_e	sub	fp, #20
10294     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10298     20 00 90 5D |  if_ne	jmp	#LR__1282
1029c     0C 4E 05 F1 | 	add	fp, #12
102a0     A7 1E 02 FB | 	rdlong	local01, fp
102a4     0C 4E 85 F1 | 	sub	fp, #12
102a8     A7 66 02 FB | 	rdlong	muldivb_, fp
102ac     0F 67 12 FD | 	qdiv	muldivb_, local01
102b0     18 1E 62 FD | 	getqx	local01
102b4     A7 1E 62 FC | 	wrlong	local01, fp
102b8     E0 00 90 FD | 	jmp	#LR__1286
102bc                 | LR__1282
102bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
102bc     08 4E 05 F1 | 	add	fp, #8
102c0     A7 66 02 FB | 	rdlong	muldivb_, fp
102c4     08 4E 85 F1 | 	sub	fp, #8
102c8     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
102cc     14 4E 05 A1 |  if_e	add	fp, #20
102d0     A7 1E 02 AB |  if_e	rdlong	local01, fp
102d4     14 4E 85 A1 |  if_e	sub	fp, #20
102d8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
102dc     2C 00 90 5D |  if_ne	jmp	#LR__1283
102e0     0C 4E 05 F1 | 	add	fp, #12
102e4     A7 1E 02 FB | 	rdlong	local01, fp
102e8     0C 4E 85 F1 | 	sub	fp, #12
102ec     A7 66 02 FB | 	rdlong	muldivb_, fp
102f0     0F 67 12 FD | 	qdiv	muldivb_, local01
102f4     18 1E 62 FD | 	getqx	local01
102f8     A7 1E 62 FC | 	wrlong	local01, fp
102fc     08 4E 05 F1 | 	add	fp, #8
10300     A7 38 68 FC | 	wrlong	#28, fp
10304     08 4E 85 F1 | 	sub	fp, #8
10308     90 00 90 FD | 	jmp	#LR__1286
1030c                 | LR__1283
1030c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1030c     08 4E 05 F1 | 	add	fp, #8
10310     A7 66 02 FB | 	rdlong	muldivb_, fp
10314     08 4E 85 F1 | 	sub	fp, #8
10318     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1031c     14 4E 05 A1 |  if_e	add	fp, #20
10320     A7 1E 02 AB |  if_e	rdlong	local01, fp
10324     14 4E 85 A1 |  if_e	sub	fp, #20
10328     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1032c     1C 00 90 5D |  if_ne	jmp	#LR__1284
10330     A7 64 02 FB | 	rdlong	muldiva_, fp
10334     0C 4E 05 F1 | 	add	fp, #12
10338     A7 66 02 FB | 	rdlong	muldivb_, fp
1033c     0C 4E 85 F1 | 	sub	fp, #12
10340     BA 00 A0 FD | 	call	#divide_
10344     A7 66 62 FC | 	wrlong	muldivb_, fp
10348     50 00 90 FD | 	jmp	#LR__1286
1034c                 | LR__1284
1034c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1034c     08 4E 05 F1 | 	add	fp, #8
10350     A7 66 02 FB | 	rdlong	muldivb_, fp
10354     08 4E 85 F1 | 	sub	fp, #8
10358     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1035c     14 4E 05 A1 |  if_e	add	fp, #20
10360     A7 1E 02 AB |  if_e	rdlong	local01, fp
10364     14 4E 85 A1 |  if_e	sub	fp, #20
10368     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1036c     1C 00 90 5D |  if_ne	jmp	#LR__1285
10370     A7 64 02 FB | 	rdlong	muldiva_, fp
10374     0C 4E 05 F1 | 	add	fp, #12
10378     A7 66 02 FB | 	rdlong	muldivb_, fp
1037c     0C 4E 85 F1 | 	sub	fp, #12
10380     BA 00 A0 FD | 	call	#divide_
10384     A7 66 62 FC | 	wrlong	muldivb_, fp
10388     10 00 90 FD | 	jmp	#LR__1286
1038c                 | LR__1285
1038c     A7 16 68 FC | 	wrlong	#11, fp
10390     08 4E 05 F1 | 	add	fp, #8
10394     A7 FE 69 FC | 	wrlong	#255, fp
10398     08 4E 85 F1 | 	sub	fp, #8
1039c                 | LR__1286
1039c     A7 12 02 F6 | 	mov	arg01, fp
103a0     BC 9D BF FD | 	call	#_push
103a4     A7 F0 03 F6 | 	mov	ptra, fp
103a8     B2 00 A0 FD | 	call	#popregs_
103ac                 | _do_div_ret
103ac     2D 00 64 FD | 	ret
103b0                 | 
103b0                 | ' 
103b0                 | ' sub do_fdiv 
103b0                 | _do_fdiv
103b0     02 4A 05 F6 | 	mov	COUNT_, #2
103b4     A8 00 A0 FD | 	call	#pushregs_
103b8     18 F0 07 F1 | 	add	ptra, #24
103bc     08 9D BF FD | 	call	#_pop
103c0     FD 14 02 F6 | 	mov	arg02, result1
103c4     FE 12 02 F6 | 	mov	arg01, result2
103c8     FF 1E 02 F6 | 	mov	local01, result3
103cc     0C 4E 05 F1 | 	add	fp, #12
103d0     A7 14 62 FC | 	wrlong	arg02, fp
103d4     04 4E 05 F1 | 	add	fp, #4
103d8     A7 12 62 FC | 	wrlong	arg01, fp
103dc     04 4E 05 F1 | 	add	fp, #4
103e0     A7 1E 62 FC | 	wrlong	local01, fp
103e4     14 4E 85 F1 | 	sub	fp, #20
103e8     DC 9C BF FD | 	call	#_pop
103ec     A7 FA 61 FC | 	wrlong	result1, fp
103f0     04 4E 05 F1 | 	add	fp, #4
103f4     A7 FC 61 FC | 	wrlong	result2, fp
103f8     04 4E 05 F1 | 	add	fp, #4
103fc     A7 FE 61 FC | 	wrlong	result3, fp
10400                 | ' 
10400                 | ' t2=pop()
10400                 | ' t1=pop()
10400                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
10400     08 4E 85 F1 | 	sub	fp, #8
10404     1F FE 0D F2 | 	cmp	result3, #31 wz
10408     14 4E 05 51 |  if_ne	add	fp, #20
1040c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10410     14 4E 85 51 |  if_ne	sub	fp, #20
10414     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10418     A7 14 68 AC |  if_e	wrlong	#10, fp
1041c     08 4E 05 A1 |  if_e	add	fp, #8
10420     A7 FE 69 AC |  if_e	wrlong	#255, fp
10424     08 4E 85 A1 |  if_e	sub	fp, #8
10428     38 01 90 AD |  if_e	jmp	#LR__1295
1042c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1042c     08 4E 05 F1 | 	add	fp, #8
10430     A7 14 02 FB | 	rdlong	arg02, fp
10434     08 4E 85 F1 | 	sub	fp, #8
10438     1C 14 0E F2 | 	cmp	arg02, #28 wz
1043c     28 00 90 5D |  if_ne	jmp	#LR__1290
10440     08 4E 05 F1 | 	add	fp, #8
10444     A7 3C 68 FC | 	wrlong	#30, fp
10448     08 4E 85 F1 | 	sub	fp, #8
1044c     A7 12 02 FB | 	rdlong	arg01, fp
10450     09 13 52 F6 | 	abs	arg01, arg01 wc
10454     1F 20 C6 C9 |  if_b	decod	local02, #31
10458     00 20 06 36 |  if_ae	mov	local02, #0
1045c     10 E6 B0 FD | 	call	#__system___float_fromuns
10460     10 FB 61 F5 | 	xor	result1, local02
10464     A7 FA 61 FC | 	wrlong	result1, fp
10468                 | LR__1290
10468                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
10468     08 4E 05 F1 | 	add	fp, #8
1046c     A7 14 02 FB | 	rdlong	arg02, fp
10470     08 4E 85 F1 | 	sub	fp, #8
10474     1D 14 0E F2 | 	cmp	arg02, #29 wz
10478     18 00 90 5D |  if_ne	jmp	#LR__1291
1047c     08 4E 05 F1 | 	add	fp, #8
10480     A7 3C 68 FC | 	wrlong	#30, fp
10484     08 4E 85 F1 | 	sub	fp, #8
10488     A7 12 02 FB | 	rdlong	arg01, fp
1048c     E0 E5 B0 FD | 	call	#__system___float_fromuns
10490     A7 FA 61 FC | 	wrlong	result1, fp
10494                 | LR__1291
10494                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10494     14 4E 05 F1 | 	add	fp, #20
10498     A7 14 02 FB | 	rdlong	arg02, fp
1049c     14 4E 85 F1 | 	sub	fp, #20
104a0     1C 14 0E F2 | 	cmp	arg02, #28 wz
104a4     34 00 90 5D |  if_ne	jmp	#LR__1292
104a8     14 4E 05 F1 | 	add	fp, #20
104ac     A7 3C 68 FC | 	wrlong	#30, fp
104b0     08 4E 85 F1 | 	sub	fp, #8
104b4     A7 12 02 FB | 	rdlong	arg01, fp
104b8     0C 4E 85 F1 | 	sub	fp, #12
104bc     09 13 52 F6 | 	abs	arg01, arg01 wc
104c0     1F 20 C6 C9 |  if_b	decod	local02, #31
104c4     00 20 06 36 |  if_ae	mov	local02, #0
104c8     A4 E5 B0 FD | 	call	#__system___float_fromuns
104cc     10 FB 61 F5 | 	xor	result1, local02
104d0     0C 4E 05 F1 | 	add	fp, #12
104d4     A7 FA 61 FC | 	wrlong	result1, fp
104d8     0C 4E 85 F1 | 	sub	fp, #12
104dc                 | LR__1292
104dc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
104dc     14 4E 05 F1 | 	add	fp, #20
104e0     A7 14 02 FB | 	rdlong	arg02, fp
104e4     14 4E 85 F1 | 	sub	fp, #20
104e8     1D 14 0E F2 | 	cmp	arg02, #29 wz
104ec     24 00 90 5D |  if_ne	jmp	#LR__1293
104f0     14 4E 05 F1 | 	add	fp, #20
104f4     A7 3C 68 FC | 	wrlong	#30, fp
104f8     08 4E 85 F1 | 	sub	fp, #8
104fc     A7 12 02 FB | 	rdlong	arg01, fp
10500     0C 4E 85 F1 | 	sub	fp, #12
10504     68 E5 B0 FD | 	call	#__system___float_fromuns
10508     0C 4E 05 F1 | 	add	fp, #12
1050c     A7 FA 61 FC | 	wrlong	result1, fp
10510     0C 4E 85 F1 | 	sub	fp, #12
10514                 | LR__1293
10514                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
10514     08 4E 05 F1 | 	add	fp, #8
10518     A7 14 02 FB | 	rdlong	arg02, fp
1051c     08 4E 85 F1 | 	sub	fp, #8
10520     1E 14 0E F2 | 	cmp	arg02, #30 wz
10524     14 4E 05 A1 |  if_e	add	fp, #20
10528     A7 1E 02 AB |  if_e	rdlong	local01, fp
1052c     14 4E 85 A1 |  if_e	sub	fp, #20
10530     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10534     1C 00 90 5D |  if_ne	jmp	#LR__1294
10538     A7 12 02 FB | 	rdlong	arg01, fp
1053c     0C 4E 05 F1 | 	add	fp, #12
10540     A7 14 02 FB | 	rdlong	arg02, fp
10544     0C 4E 85 F1 | 	sub	fp, #12
10548     2C EB B0 FD | 	call	#__system___float_div
1054c     A7 FA 61 FC | 	wrlong	result1, fp
10550     10 00 90 FD | 	jmp	#LR__1295
10554                 | LR__1294
10554     A7 16 68 FC | 	wrlong	#11, fp
10558     08 4E 05 F1 | 	add	fp, #8
1055c     A7 FE 69 FC | 	wrlong	#255, fp
10560     08 4E 85 F1 | 	sub	fp, #8
10564                 | LR__1295
10564     A7 12 02 F6 | 	mov	arg01, fp
10568     F4 9B BF FD | 	call	#_push
1056c     A7 F0 03 F6 | 	mov	ptra, fp
10570     B2 00 A0 FD | 	call	#popregs_
10574                 | _do_fdiv_ret
10574     2D 00 64 FD | 	ret
10578                 | 
10578                 | ' 
10578                 | ' 
10578                 | ' sub do_mod 
10578                 | _do_mod
10578     01 4A 05 F6 | 	mov	COUNT_, #1
1057c     A8 00 A0 FD | 	call	#pushregs_
10580     18 F0 07 F1 | 	add	ptra, #24
10584     40 9B BF FD | 	call	#_pop
10588     FD 66 02 F6 | 	mov	muldivb_, result1
1058c     FE 64 02 F6 | 	mov	muldiva_, result2
10590     FF 1E 02 F6 | 	mov	local01, result3
10594     0C 4E 05 F1 | 	add	fp, #12
10598     A7 66 62 FC | 	wrlong	muldivb_, fp
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 64 62 FC | 	wrlong	muldiva_, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 1E 62 FC | 	wrlong	local01, fp
105ac     14 4E 85 F1 | 	sub	fp, #20
105b0     14 9B BF FD | 	call	#_pop
105b4     A7 FA 61 FC | 	wrlong	result1, fp
105b8     04 4E 05 F1 | 	add	fp, #4
105bc     A7 FC 61 FC | 	wrlong	result2, fp
105c0     04 4E 05 F1 | 	add	fp, #4
105c4     A7 FE 61 FC | 	wrlong	result3, fp
105c8                 | ' 
105c8                 | ' t2=pop()
105c8                 | ' t1=pop()
105c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
105c8     08 4E 85 F1 | 	sub	fp, #8
105cc     1F FE 0D F2 | 	cmp	result3, #31 wz
105d0     14 4E 05 51 |  if_ne	add	fp, #20
105d4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
105d8     14 4E 85 51 |  if_ne	sub	fp, #20
105dc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
105e0     A7 14 68 AC |  if_e	wrlong	#10, fp
105e4     08 4E 05 A1 |  if_e	add	fp, #8
105e8     A7 FE 69 AC |  if_e	wrlong	#255, fp
105ec     08 4E 85 A1 |  if_e	sub	fp, #8
105f0     90 01 90 AD |  if_e	jmp	#LR__1306
105f4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
105f4     08 4E 05 F1 | 	add	fp, #8
105f8     A7 66 02 FB | 	rdlong	muldivb_, fp
105fc     08 4E 85 F1 | 	sub	fp, #8
10600     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10604     1C 00 90 5D |  if_ne	jmp	#LR__1300
10608     08 4E 05 F1 | 	add	fp, #8
1060c     A7 38 68 FC | 	wrlong	#28, fp
10610     08 4E 85 F1 | 	sub	fp, #8
10614     A7 12 02 FB | 	rdlong	arg01, fp
10618     00 14 06 F6 | 	mov	arg02, #0
1061c     1C ED B0 FD | 	call	#__system___float_tointeger
10620     A7 FA 61 FC | 	wrlong	result1, fp
10624                 | LR__1300
10624                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10624     14 4E 05 F1 | 	add	fp, #20
10628     A7 66 02 FB | 	rdlong	muldivb_, fp
1062c     14 4E 85 F1 | 	sub	fp, #20
10630     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10634     28 00 90 5D |  if_ne	jmp	#LR__1301
10638     14 4E 05 F1 | 	add	fp, #20
1063c     A7 38 68 FC | 	wrlong	#28, fp
10640     08 4E 85 F1 | 	sub	fp, #8
10644     A7 12 02 FB | 	rdlong	arg01, fp
10648     0C 4E 85 F1 | 	sub	fp, #12
1064c     00 14 06 F6 | 	mov	arg02, #0
10650     E8 EC B0 FD | 	call	#__system___float_tointeger
10654     0C 4E 05 F1 | 	add	fp, #12
10658     A7 FA 61 FC | 	wrlong	result1, fp
1065c     0C 4E 85 F1 | 	sub	fp, #12
10660                 | LR__1301
10660                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
10660     08 4E 05 F1 | 	add	fp, #8
10664     A7 66 02 FB | 	rdlong	muldivb_, fp
10668     08 4E 85 F1 | 	sub	fp, #8
1066c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10670     14 4E 05 A1 |  if_e	add	fp, #20
10674     A7 1E 02 AB |  if_e	rdlong	local01, fp
10678     14 4E 85 A1 |  if_e	sub	fp, #20
1067c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10680     20 00 90 5D |  if_ne	jmp	#LR__1302
10684     0C 4E 05 F1 | 	add	fp, #12
10688     A7 1E 02 FB | 	rdlong	local01, fp
1068c     0C 4E 85 F1 | 	sub	fp, #12
10690     A7 66 02 FB | 	rdlong	muldivb_, fp
10694     0F 67 12 FD | 	qdiv	muldivb_, local01
10698     19 1E 62 FD | 	getqy	local01
1069c     A7 1E 62 FC | 	wrlong	local01, fp
106a0     E0 00 90 FD | 	jmp	#LR__1306
106a4                 | LR__1302
106a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
106a4     08 4E 05 F1 | 	add	fp, #8
106a8     A7 66 02 FB | 	rdlong	muldivb_, fp
106ac     08 4E 85 F1 | 	sub	fp, #8
106b0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
106b4     14 4E 05 A1 |  if_e	add	fp, #20
106b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
106bc     14 4E 85 A1 |  if_e	sub	fp, #20
106c0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
106c4     2C 00 90 5D |  if_ne	jmp	#LR__1303
106c8     0C 4E 05 F1 | 	add	fp, #12
106cc     A7 1E 02 FB | 	rdlong	local01, fp
106d0     0C 4E 85 F1 | 	sub	fp, #12
106d4     A7 66 02 FB | 	rdlong	muldivb_, fp
106d8     0F 67 12 FD | 	qdiv	muldivb_, local01
106dc     19 1E 62 FD | 	getqy	local01
106e0     A7 1E 62 FC | 	wrlong	local01, fp
106e4     08 4E 05 F1 | 	add	fp, #8
106e8     A7 38 68 FC | 	wrlong	#28, fp
106ec     08 4E 85 F1 | 	sub	fp, #8
106f0     90 00 90 FD | 	jmp	#LR__1306
106f4                 | LR__1303
106f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
106f4     08 4E 05 F1 | 	add	fp, #8
106f8     A7 66 02 FB | 	rdlong	muldivb_, fp
106fc     08 4E 85 F1 | 	sub	fp, #8
10700     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10704     14 4E 05 A1 |  if_e	add	fp, #20
10708     A7 1E 02 AB |  if_e	rdlong	local01, fp
1070c     14 4E 85 A1 |  if_e	sub	fp, #20
10710     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10714     1C 00 90 5D |  if_ne	jmp	#LR__1304
10718     A7 64 02 FB | 	rdlong	muldiva_, fp
1071c     0C 4E 05 F1 | 	add	fp, #12
10720     A7 66 02 FB | 	rdlong	muldivb_, fp
10724     0C 4E 85 F1 | 	sub	fp, #12
10728     BA 00 A0 FD | 	call	#divide_
1072c     A7 64 62 FC | 	wrlong	muldiva_, fp
10730     50 00 90 FD | 	jmp	#LR__1306
10734                 | LR__1304
10734                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
10734     08 4E 05 F1 | 	add	fp, #8
10738     A7 66 02 FB | 	rdlong	muldivb_, fp
1073c     08 4E 85 F1 | 	sub	fp, #8
10740     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10744     14 4E 05 A1 |  if_e	add	fp, #20
10748     A7 1E 02 AB |  if_e	rdlong	local01, fp
1074c     14 4E 85 A1 |  if_e	sub	fp, #20
10750     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10754     1C 00 90 5D |  if_ne	jmp	#LR__1305
10758     A7 64 02 FB | 	rdlong	muldiva_, fp
1075c     0C 4E 05 F1 | 	add	fp, #12
10760     A7 66 02 FB | 	rdlong	muldivb_, fp
10764     0C 4E 85 F1 | 	sub	fp, #12
10768     BA 00 A0 FD | 	call	#divide_
1076c     A7 64 62 FC | 	wrlong	muldiva_, fp
10770     10 00 90 FD | 	jmp	#LR__1306
10774                 | LR__1305
10774     A7 16 68 FC | 	wrlong	#11, fp
10778     08 4E 05 F1 | 	add	fp, #8
1077c     A7 FE 69 FC | 	wrlong	#255, fp
10780     08 4E 85 F1 | 	sub	fp, #8
10784                 | LR__1306
10784     A7 12 02 F6 | 	mov	arg01, fp
10788     D4 99 BF FD | 	call	#_push
1078c     A7 F0 03 F6 | 	mov	ptra, fp
10790     B2 00 A0 FD | 	call	#popregs_
10794                 | _do_mod_ret
10794     2D 00 64 FD | 	ret
10798                 | 
10798                 | ' 
10798                 | ' sub do_shl 
10798                 | _do_shl
10798     03 4A 05 F6 | 	mov	COUNT_, #3
1079c     A8 00 A0 FD | 	call	#pushregs_
107a0     18 F0 07 F1 | 	add	ptra, #24
107a4     20 99 BF FD | 	call	#_pop
107a8     FD 12 02 F6 | 	mov	arg01, result1
107ac     FE 1E 02 F6 | 	mov	local01, result2
107b0     FF 20 02 F6 | 	mov	local02, result3
107b4     0C 4E 05 F1 | 	add	fp, #12
107b8     A7 12 62 FC | 	wrlong	arg01, fp
107bc     04 4E 05 F1 | 	add	fp, #4
107c0     A7 1E 62 FC | 	wrlong	local01, fp
107c4     04 4E 05 F1 | 	add	fp, #4
107c8     A7 20 62 FC | 	wrlong	local02, fp
107cc     14 4E 85 F1 | 	sub	fp, #20
107d0     F4 98 BF FD | 	call	#_pop
107d4     FF 22 02 F6 | 	mov	local03, result3
107d8     A7 FA 61 FC | 	wrlong	result1, fp
107dc     04 4E 05 F1 | 	add	fp, #4
107e0     A7 FC 61 FC | 	wrlong	result2, fp
107e4     04 4E 05 F1 | 	add	fp, #4
107e8     A7 22 62 FC | 	wrlong	local03, fp
107ec                 | ' 
107ec                 | ' t2=pop()
107ec                 | ' t1=pop()
107ec                 | ' 
107ec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
107ec     08 4E 85 F1 | 	sub	fp, #8
107f0     1C 22 0E F2 | 	cmp	local03, #28 wz
107f4     A7 22 02 AB |  if_e	rdlong	local03, fp
107f8     A7 22 62 AC |  if_e	wrlong	local03, fp
107fc     08 4E 05 A1 |  if_e	add	fp, #8
10800     A7 3A 68 AC |  if_e	wrlong	#29, fp
10804     08 4E 85 A1 |  if_e	sub	fp, #8
10808                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10808     14 4E 05 F1 | 	add	fp, #20
1080c     A7 22 02 FB | 	rdlong	local03, fp
10810     14 4E 85 F1 | 	sub	fp, #20
10814     1C 22 0E F2 | 	cmp	local03, #28 wz
10818     18 00 90 5D |  if_ne	jmp	#LR__1310
1081c     0C 4E 05 F1 | 	add	fp, #12
10820     A7 22 02 FB | 	rdlong	local03, fp
10824     A7 22 62 FC | 	wrlong	local03, fp
10828     08 4E 05 F1 | 	add	fp, #8
1082c     A7 3A 68 FC | 	wrlong	#29, fp
10830     14 4E 85 F1 | 	sub	fp, #20
10834                 | LR__1310
10834                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
10834     08 4E 05 F1 | 	add	fp, #8
10838     A7 22 02 FB | 	rdlong	local03, fp
1083c     08 4E 85 F1 | 	sub	fp, #8
10840     1F 22 0E F2 | 	cmp	local03, #31 wz
10844     14 4E 05 51 |  if_ne	add	fp, #20
10848     A7 20 02 5B |  if_ne	rdlong	local02, fp
1084c     14 4E 85 51 |  if_ne	sub	fp, #20
10850     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10854     08 4E 05 51 |  if_ne	add	fp, #8
10858     A7 22 02 5B |  if_ne	rdlong	local03, fp
1085c     08 4E 85 51 |  if_ne	sub	fp, #8
10860     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10864     14 4E 05 51 |  if_ne	add	fp, #20
10868     14 4E 85 51 |  if_ne	sub	fp, #20
1086c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10870     A7 0C 68 AC |  if_e	wrlong	#6, fp
10874     08 4E 05 A1 |  if_e	add	fp, #8
10878     A7 FE 69 AC |  if_e	wrlong	#255, fp
1087c     08 4E 85 A1 |  if_e	sub	fp, #8
10880     18 00 90 AD |  if_e	jmp	#LR__1311
10884     A7 22 02 FB | 	rdlong	local03, fp
10888     0C 4E 05 F1 | 	add	fp, #12
1088c     A7 1E 02 FB | 	rdlong	local01, fp
10890     0C 4E 85 F1 | 	sub	fp, #12
10894     0F 23 62 F0 | 	shl	local03, local01
10898     A7 22 62 FC | 	wrlong	local03, fp
1089c                 | LR__1311
1089c     A7 12 02 F6 | 	mov	arg01, fp
108a0     BC 98 BF FD | 	call	#_push
108a4     A7 F0 03 F6 | 	mov	ptra, fp
108a8     B2 00 A0 FD | 	call	#popregs_
108ac                 | _do_shl_ret
108ac     2D 00 64 FD | 	ret
108b0                 | 
108b0                 | ' 
108b0                 | ' sub do_shr 
108b0                 | _do_shr
108b0     03 4A 05 F6 | 	mov	COUNT_, #3
108b4     A8 00 A0 FD | 	call	#pushregs_
108b8     18 F0 07 F1 | 	add	ptra, #24
108bc     08 98 BF FD | 	call	#_pop
108c0     FD 12 02 F6 | 	mov	arg01, result1
108c4     FE 1E 02 F6 | 	mov	local01, result2
108c8     FF 20 02 F6 | 	mov	local02, result3
108cc     0C 4E 05 F1 | 	add	fp, #12
108d0     A7 12 62 FC | 	wrlong	arg01, fp
108d4     04 4E 05 F1 | 	add	fp, #4
108d8     A7 1E 62 FC | 	wrlong	local01, fp
108dc     04 4E 05 F1 | 	add	fp, #4
108e0     A7 20 62 FC | 	wrlong	local02, fp
108e4     14 4E 85 F1 | 	sub	fp, #20
108e8     DC 97 BF FD | 	call	#_pop
108ec     FF 22 02 F6 | 	mov	local03, result3
108f0     A7 FA 61 FC | 	wrlong	result1, fp
108f4     04 4E 05 F1 | 	add	fp, #4
108f8     A7 FC 61 FC | 	wrlong	result2, fp
108fc     04 4E 05 F1 | 	add	fp, #4
10900     A7 22 62 FC | 	wrlong	local03, fp
10904                 | ' t2=pop()
10904                 | ' t1=pop()
10904                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10904     08 4E 85 F1 | 	sub	fp, #8
10908     1C 22 0E F2 | 	cmp	local03, #28 wz
1090c     A7 22 02 AB |  if_e	rdlong	local03, fp
10910     A7 22 62 AC |  if_e	wrlong	local03, fp
10914     08 4E 05 A1 |  if_e	add	fp, #8
10918     A7 3A 68 AC |  if_e	wrlong	#29, fp
1091c     08 4E 85 A1 |  if_e	sub	fp, #8
10920                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10920     14 4E 05 F1 | 	add	fp, #20
10924     A7 22 02 FB | 	rdlong	local03, fp
10928     14 4E 85 F1 | 	sub	fp, #20
1092c     1C 22 0E F2 | 	cmp	local03, #28 wz
10930     18 00 90 5D |  if_ne	jmp	#LR__1320
10934     0C 4E 05 F1 | 	add	fp, #12
10938     A7 22 02 FB | 	rdlong	local03, fp
1093c     A7 22 62 FC | 	wrlong	local03, fp
10940     08 4E 05 F1 | 	add	fp, #8
10944     A7 3A 68 FC | 	wrlong	#29, fp
10948     14 4E 85 F1 | 	sub	fp, #20
1094c                 | LR__1320
1094c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1094c     08 4E 05 F1 | 	add	fp, #8
10950     A7 22 02 FB | 	rdlong	local03, fp
10954     08 4E 85 F1 | 	sub	fp, #8
10958     1F 22 0E F2 | 	cmp	local03, #31 wz
1095c     14 4E 05 51 |  if_ne	add	fp, #20
10960     A7 20 02 5B |  if_ne	rdlong	local02, fp
10964     14 4E 85 51 |  if_ne	sub	fp, #20
10968     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1096c     08 4E 05 51 |  if_ne	add	fp, #8
10970     A7 22 02 5B |  if_ne	rdlong	local03, fp
10974     08 4E 85 51 |  if_ne	sub	fp, #8
10978     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1097c     14 4E 05 51 |  if_ne	add	fp, #20
10980     14 4E 85 51 |  if_ne	sub	fp, #20
10984     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10988     A7 0C 68 AC |  if_e	wrlong	#6, fp
1098c     08 4E 05 A1 |  if_e	add	fp, #8
10990     A7 FE 69 AC |  if_e	wrlong	#255, fp
10994     08 4E 85 A1 |  if_e	sub	fp, #8
10998     18 00 90 AD |  if_e	jmp	#LR__1321
1099c     A7 22 02 FB | 	rdlong	local03, fp
109a0     0C 4E 05 F1 | 	add	fp, #12
109a4     A7 1E 02 FB | 	rdlong	local01, fp
109a8     0C 4E 85 F1 | 	sub	fp, #12
109ac     0F 23 42 F0 | 	shr	local03, local01
109b0     A7 22 62 FC | 	wrlong	local03, fp
109b4                 | LR__1321
109b4     A7 12 02 F6 | 	mov	arg01, fp
109b8     A4 97 BF FD | 	call	#_push
109bc     A7 F0 03 F6 | 	mov	ptra, fp
109c0     B2 00 A0 FD | 	call	#popregs_
109c4                 | _do_shr_ret
109c4     2D 00 64 FD | 	ret
109c8                 | 
109c8                 | ' 
109c8                 | ' sub do_power 
109c8                 | _do_power
109c8     02 4A 05 F6 | 	mov	COUNT_, #2
109cc     A8 00 A0 FD | 	call	#pushregs_
109d0     18 F0 07 F1 | 	add	ptra, #24
109d4     F0 96 BF FD | 	call	#_pop
109d8     FD 14 02 F6 | 	mov	arg02, result1
109dc     FE 12 02 F6 | 	mov	arg01, result2
109e0     FF 1E 02 F6 | 	mov	local01, result3
109e4     0C 4E 05 F1 | 	add	fp, #12
109e8     A7 14 62 FC | 	wrlong	arg02, fp
109ec     04 4E 05 F1 | 	add	fp, #4
109f0     A7 12 62 FC | 	wrlong	arg01, fp
109f4     04 4E 05 F1 | 	add	fp, #4
109f8     A7 1E 62 FC | 	wrlong	local01, fp
109fc     14 4E 85 F1 | 	sub	fp, #20
10a00     C4 96 BF FD | 	call	#_pop
10a04     A7 FA 61 FC | 	wrlong	result1, fp
10a08     04 4E 05 F1 | 	add	fp, #4
10a0c     A7 FC 61 FC | 	wrlong	result2, fp
10a10     04 4E 05 F1 | 	add	fp, #4
10a14     A7 FE 61 FC | 	wrlong	result3, fp
10a18                 | ' t2=pop()
10a18                 | ' t1=pop()
10a18                 | ' 
10a18                 | ' 
10a18                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
10a18     08 4E 85 F1 | 	sub	fp, #8
10a1c     1F FE 0D F2 | 	cmp	result3, #31 wz
10a20     14 4E 05 51 |  if_ne	add	fp, #20
10a24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10a28     14 4E 85 51 |  if_ne	sub	fp, #20
10a2c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10a30     A7 18 68 AC |  if_e	wrlong	#12, fp
10a34     08 4E 05 A1 |  if_e	add	fp, #8
10a38     A7 FE 69 AC |  if_e	wrlong	#255, fp
10a3c     08 4E 85 A1 |  if_e	sub	fp, #8
10a40     38 01 90 AD |  if_e	jmp	#LR__1335
10a44                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10a44     08 4E 05 F1 | 	add	fp, #8
10a48     A7 14 02 FB | 	rdlong	arg02, fp
10a4c     08 4E 85 F1 | 	sub	fp, #8
10a50     1C 14 0E F2 | 	cmp	arg02, #28 wz
10a54     28 00 90 5D |  if_ne	jmp	#LR__1330
10a58     08 4E 05 F1 | 	add	fp, #8
10a5c     A7 3C 68 FC | 	wrlong	#30, fp
10a60     08 4E 85 F1 | 	sub	fp, #8
10a64     A7 12 02 FB | 	rdlong	arg01, fp
10a68     09 13 52 F6 | 	abs	arg01, arg01 wc
10a6c     1F 20 C6 C9 |  if_b	decod	local02, #31
10a70     00 20 06 36 |  if_ae	mov	local02, #0
10a74     F8 DF B0 FD | 	call	#__system___float_fromuns
10a78     10 FB 61 F5 | 	xor	result1, local02
10a7c     A7 FA 61 FC | 	wrlong	result1, fp
10a80                 | LR__1330
10a80                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
10a80     08 4E 05 F1 | 	add	fp, #8
10a84     A7 14 02 FB | 	rdlong	arg02, fp
10a88     08 4E 85 F1 | 	sub	fp, #8
10a8c     1D 14 0E F2 | 	cmp	arg02, #29 wz
10a90     18 00 90 5D |  if_ne	jmp	#LR__1331
10a94     08 4E 05 F1 | 	add	fp, #8
10a98     A7 3C 68 FC | 	wrlong	#30, fp
10a9c     08 4E 85 F1 | 	sub	fp, #8
10aa0     A7 12 02 FB | 	rdlong	arg01, fp
10aa4     C8 DF B0 FD | 	call	#__system___float_fromuns
10aa8     A7 FA 61 FC | 	wrlong	result1, fp
10aac                 | LR__1331
10aac                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10aac     14 4E 05 F1 | 	add	fp, #20
10ab0     A7 14 02 FB | 	rdlong	arg02, fp
10ab4     14 4E 85 F1 | 	sub	fp, #20
10ab8     1C 14 0E F2 | 	cmp	arg02, #28 wz
10abc     34 00 90 5D |  if_ne	jmp	#LR__1332
10ac0     14 4E 05 F1 | 	add	fp, #20
10ac4     A7 3C 68 FC | 	wrlong	#30, fp
10ac8     08 4E 85 F1 | 	sub	fp, #8
10acc     A7 12 02 FB | 	rdlong	arg01, fp
10ad0     0C 4E 85 F1 | 	sub	fp, #12
10ad4     09 13 52 F6 | 	abs	arg01, arg01 wc
10ad8     1F 20 C6 C9 |  if_b	decod	local02, #31
10adc     00 20 06 36 |  if_ae	mov	local02, #0
10ae0     8C DF B0 FD | 	call	#__system___float_fromuns
10ae4     10 FB 61 F5 | 	xor	result1, local02
10ae8     0C 4E 05 F1 | 	add	fp, #12
10aec     A7 FA 61 FC | 	wrlong	result1, fp
10af0     0C 4E 85 F1 | 	sub	fp, #12
10af4                 | LR__1332
10af4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
10af4     14 4E 05 F1 | 	add	fp, #20
10af8     A7 14 02 FB | 	rdlong	arg02, fp
10afc     14 4E 85 F1 | 	sub	fp, #20
10b00     1D 14 0E F2 | 	cmp	arg02, #29 wz
10b04     24 00 90 5D |  if_ne	jmp	#LR__1333
10b08     14 4E 05 F1 | 	add	fp, #20
10b0c     A7 3C 68 FC | 	wrlong	#30, fp
10b10     08 4E 85 F1 | 	sub	fp, #8
10b14     A7 12 02 FB | 	rdlong	arg01, fp
10b18     0C 4E 85 F1 | 	sub	fp, #12
10b1c     50 DF B0 FD | 	call	#__system___float_fromuns
10b20     0C 4E 05 F1 | 	add	fp, #12
10b24     A7 FA 61 FC | 	wrlong	result1, fp
10b28     0C 4E 85 F1 | 	sub	fp, #12
10b2c                 | LR__1333
10b2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
10b2c     08 4E 05 F1 | 	add	fp, #8
10b30     A7 14 02 FB | 	rdlong	arg02, fp
10b34     08 4E 85 F1 | 	sub	fp, #8
10b38     1E 14 0E F2 | 	cmp	arg02, #30 wz
10b3c     14 4E 05 A1 |  if_e	add	fp, #20
10b40     A7 1E 02 AB |  if_e	rdlong	local01, fp
10b44     14 4E 85 A1 |  if_e	sub	fp, #20
10b48     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10b4c     1C 00 90 5D |  if_ne	jmp	#LR__1334
10b50     A7 12 02 FB | 	rdlong	arg01, fp
10b54     0C 4E 05 F1 | 	add	fp, #12
10b58     A7 14 02 FB | 	rdlong	arg02, fp
10b5c     0C 4E 85 F1 | 	sub	fp, #12
10b60     F4 F1 B0 FD | 	call	#__system____builtin_powf
10b64     A7 FA 61 FC | 	wrlong	result1, fp
10b68     10 00 90 FD | 	jmp	#LR__1335
10b6c                 | LR__1334
10b6c     A7 1A 68 FC | 	wrlong	#13, fp
10b70     08 4E 05 F1 | 	add	fp, #8
10b74     A7 FE 69 FC | 	wrlong	#255, fp
10b78     08 4E 85 F1 | 	sub	fp, #8
10b7c                 | LR__1335
10b7c     A7 12 02 F6 | 	mov	arg01, fp
10b80     DC 95 BF FD | 	call	#_push
10b84     A7 F0 03 F6 | 	mov	ptra, fp
10b88     B2 00 A0 FD | 	call	#popregs_
10b8c                 | _do_power_ret
10b8c     2D 00 64 FD | 	ret
10b90                 | 
10b90                 | ' 
10b90                 | ' 
10b90                 | ' sub do_eq
10b90                 | _do_eq
10b90     05 4A 05 F6 | 	mov	COUNT_, #5
10b94     A8 00 A0 FD | 	call	#pushregs_
10b98     18 F0 07 F1 | 	add	ptra, #24
10b9c     28 95 BF FD | 	call	#_pop
10ba0     FD 1E 02 F6 | 	mov	local01, result1
10ba4     FE 20 02 F6 | 	mov	local02, result2
10ba8     FF 22 02 F6 | 	mov	local03, result3
10bac     0C 4E 05 F1 | 	add	fp, #12
10bb0     A7 1E 62 FC | 	wrlong	local01, fp
10bb4     04 4E 05 F1 | 	add	fp, #4
10bb8     A7 20 62 FC | 	wrlong	local02, fp
10bbc     04 4E 05 F1 | 	add	fp, #4
10bc0     A7 22 62 FC | 	wrlong	local03, fp
10bc4     14 4E 85 F1 | 	sub	fp, #20
10bc8     FC 94 BF FD | 	call	#_pop
10bcc     FF 22 02 F6 | 	mov	local03, result3
10bd0     A7 FA 61 FC | 	wrlong	result1, fp
10bd4     04 4E 05 F1 | 	add	fp, #4
10bd8     A7 FC 61 FC | 	wrlong	result2, fp
10bdc     04 4E 05 F1 | 	add	fp, #4
10be0     A7 22 62 FC | 	wrlong	local03, fp
10be4                 | ' t2=pop()
10be4                 | ' t1=pop()
10be4                 | ' 
10be4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
10be4     08 4E 85 F1 | 	sub	fp, #8
10be8     1F 22 0E F2 | 	cmp	local03, #31 wz
10bec     14 4E 05 A1 |  if_e	add	fp, #20
10bf0     A7 24 02 AB |  if_e	rdlong	local04, fp
10bf4     14 4E 85 A1 |  if_e	sub	fp, #20
10bf8     12 23 02 A6 |  if_e	mov	local03, local04
10bfc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10c00     28 00 90 5D |  if_ne	jmp	#LR__1340
10c04     00 1E 06 F6 | 	mov	local01, #0
10c08     A7 12 02 FB | 	rdlong	arg01, fp
10c0c     0C 4E 05 F1 | 	add	fp, #12
10c10     A7 14 02 FB | 	rdlong	arg02, fp
10c14     0C 4E 85 F1 | 	sub	fp, #12
10c18     04 B7 B0 FD | 	call	#__system___string_cmp
10c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
10c20     00 1E 26 A6 |  if_e	not	local01, #0
10c24     A7 1E 62 FC | 	wrlong	local01, fp
10c28     1C 04 90 FD | 	jmp	#LR__1353
10c2c                 | LR__1340
10c2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
10c2c     08 4E 05 F1 | 	add	fp, #8
10c30     A7 1E 02 FB | 	rdlong	local01, fp
10c34     08 4E 85 F1 | 	sub	fp, #8
10c38     1E 1E 0E F2 | 	cmp	local01, #30 wz
10c3c     14 4E 05 A1 |  if_e	add	fp, #20
10c40     A7 24 02 AB |  if_e	rdlong	local04, fp
10c44     14 4E 85 A1 |  if_e	sub	fp, #20
10c48     12 23 02 A6 |  if_e	mov	local03, local04
10c4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10c50     2C 00 90 5D |  if_ne	jmp	#LR__1341
10c54     00 1E 06 F6 | 	mov	local01, #0
10c58     A7 12 02 FB | 	rdlong	arg01, fp
10c5c     0C 4E 05 F1 | 	add	fp, #12
10c60     A7 14 02 FB | 	rdlong	arg02, fp
10c64     0C 4E 85 F1 | 	sub	fp, #12
10c68     01 16 06 F6 | 	mov	arg03, #1
10c6c     38 E6 B0 FD | 	call	#__system___float_cmp
10c70     00 FA 0D F2 | 	cmp	result1, #0 wz
10c74     00 1E 26 A6 |  if_e	not	local01, #0
10c78     A7 1E 62 FC | 	wrlong	local01, fp
10c7c     C8 03 90 FD | 	jmp	#LR__1353
10c80                 | LR__1341
10c80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
10c80     08 4E 05 F1 | 	add	fp, #8
10c84     A7 1E 02 FB | 	rdlong	local01, fp
10c88     08 4E 85 F1 | 	sub	fp, #8
10c8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10c90     14 4E 05 A1 |  if_e	add	fp, #20
10c94     A7 24 02 AB |  if_e	rdlong	local04, fp
10c98     14 4E 85 A1 |  if_e	sub	fp, #20
10c9c     12 23 02 A6 |  if_e	mov	local03, local04
10ca0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10ca4     48 00 90 5D |  if_ne	jmp	#LR__1342
10ca8     00 1E 06 F6 | 	mov	local01, #0
10cac     A7 20 02 FB | 	rdlong	local02, fp
10cb0     0C 4E 05 F1 | 	add	fp, #12
10cb4     A7 12 02 FB | 	rdlong	arg01, fp
10cb8     0C 4E 85 F1 | 	sub	fp, #12
10cbc     09 13 52 F6 | 	abs	arg01, arg01 wc
10cc0     1F 26 C6 C9 |  if_b	decod	local05, #31
10cc4     00 26 06 36 |  if_ae	mov	local05, #0
10cc8     A4 DD B0 FD | 	call	#__system___float_fromuns
10ccc     13 FB 61 F5 | 	xor	result1, local05
10cd0     FD 14 02 F6 | 	mov	arg02, result1
10cd4     10 13 02 F6 | 	mov	arg01, local02
10cd8     01 16 06 F6 | 	mov	arg03, #1
10cdc     C8 E5 B0 FD | 	call	#__system___float_cmp
10ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
10ce4     00 1E 26 A6 |  if_e	not	local01, #0
10ce8     A7 1E 62 FC | 	wrlong	local01, fp
10cec     58 03 90 FD | 	jmp	#LR__1353
10cf0                 | LR__1342
10cf0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
10cf0     08 4E 05 F1 | 	add	fp, #8
10cf4     A7 1E 02 FB | 	rdlong	local01, fp
10cf8     08 4E 85 F1 | 	sub	fp, #8
10cfc     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d00     14 4E 05 A1 |  if_e	add	fp, #20
10d04     A7 24 02 AB |  if_e	rdlong	local04, fp
10d08     14 4E 85 A1 |  if_e	sub	fp, #20
10d0c     12 23 02 A6 |  if_e	mov	local03, local04
10d10     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10d14     38 00 90 5D |  if_ne	jmp	#LR__1343
10d18     00 1E 06 F6 | 	mov	local01, #0
10d1c     A7 20 02 FB | 	rdlong	local02, fp
10d20     0C 4E 05 F1 | 	add	fp, #12
10d24     A7 12 02 FB | 	rdlong	arg01, fp
10d28     0C 4E 85 F1 | 	sub	fp, #12
10d2c     40 DD B0 FD | 	call	#__system___float_fromuns
10d30     FD 14 02 F6 | 	mov	arg02, result1
10d34     10 13 02 F6 | 	mov	arg01, local02
10d38     01 16 06 F6 | 	mov	arg03, #1
10d3c     68 E5 B0 FD | 	call	#__system___float_cmp
10d40     00 FA 0D F2 | 	cmp	result1, #0 wz
10d44     00 1E 26 A6 |  if_e	not	local01, #0
10d48     A7 1E 62 FC | 	wrlong	local01, fp
10d4c     F8 02 90 FD | 	jmp	#LR__1353
10d50                 | LR__1343
10d50                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
10d50     08 4E 05 F1 | 	add	fp, #8
10d54     A7 1E 02 FB | 	rdlong	local01, fp
10d58     08 4E 85 F1 | 	sub	fp, #8
10d5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10d60     14 4E 05 A1 |  if_e	add	fp, #20
10d64     A7 24 02 AB |  if_e	rdlong	local04, fp
10d68     14 4E 85 A1 |  if_e	sub	fp, #20
10d6c     12 23 02 A6 |  if_e	mov	local03, local04
10d70     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10d74     44 00 90 5D |  if_ne	jmp	#LR__1344
10d78     00 1E 06 F6 | 	mov	local01, #0
10d7c     A7 12 02 FB | 	rdlong	arg01, fp
10d80     09 13 52 F6 | 	abs	arg01, arg01 wc
10d84     1F 26 C6 C9 |  if_b	decod	local05, #31
10d88     00 26 06 36 |  if_ae	mov	local05, #0
10d8c     E0 DC B0 FD | 	call	#__system___float_fromuns
10d90     13 FB 61 F5 | 	xor	result1, local05
10d94     FD 12 02 F6 | 	mov	arg01, result1
10d98     0C 4E 05 F1 | 	add	fp, #12
10d9c     A7 14 02 FB | 	rdlong	arg02, fp
10da0     0C 4E 85 F1 | 	sub	fp, #12
10da4     01 16 06 F6 | 	mov	arg03, #1
10da8     FC E4 B0 FD | 	call	#__system___float_cmp
10dac     00 FA 0D F2 | 	cmp	result1, #0 wz
10db0     00 1E 26 A6 |  if_e	not	local01, #0
10db4     A7 1E 62 FC | 	wrlong	local01, fp
10db8     8C 02 90 FD | 	jmp	#LR__1353
10dbc                 | LR__1344
10dbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
10dbc     08 4E 05 F1 | 	add	fp, #8
10dc0     A7 1E 02 FB | 	rdlong	local01, fp
10dc4     08 4E 85 F1 | 	sub	fp, #8
10dc8     1C 1E 0E F2 | 	cmp	local01, #28 wz
10dcc     14 4E 05 A1 |  if_e	add	fp, #20
10dd0     A7 24 02 AB |  if_e	rdlong	local04, fp
10dd4     14 4E 85 A1 |  if_e	sub	fp, #20
10dd8     12 23 02 A6 |  if_e	mov	local03, local04
10ddc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10de0     24 00 90 5D |  if_ne	jmp	#LR__1345
10de4     00 1E 06 F6 | 	mov	local01, #0
10de8     A7 20 02 FB | 	rdlong	local02, fp
10dec     0C 4E 05 F1 | 	add	fp, #12
10df0     A7 22 02 FB | 	rdlong	local03, fp
10df4     0C 4E 85 F1 | 	sub	fp, #12
10df8     11 21 0A F2 | 	cmp	local02, local03 wz
10dfc     01 1E 66 A6 |  if_e	neg	local01, #1
10e00     A7 1E 62 FC | 	wrlong	local01, fp
10e04     40 02 90 FD | 	jmp	#LR__1353
10e08                 | LR__1345
10e08                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
10e08     08 4E 05 F1 | 	add	fp, #8
10e0c     A7 1E 02 FB | 	rdlong	local01, fp
10e10     08 4E 85 F1 | 	sub	fp, #8
10e14     1C 1E 0E F2 | 	cmp	local01, #28 wz
10e18     14 4E 05 A1 |  if_e	add	fp, #20
10e1c     A7 24 02 AB |  if_e	rdlong	local04, fp
10e20     14 4E 85 A1 |  if_e	sub	fp, #20
10e24     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10e28     24 00 90 5D |  if_ne	jmp	#LR__1346
10e2c     00 1E 06 F6 | 	mov	local01, #0
10e30     A7 20 02 FB | 	rdlong	local02, fp
10e34     0C 4E 05 F1 | 	add	fp, #12
10e38     A7 22 02 FB | 	rdlong	local03, fp
10e3c     0C 4E 85 F1 | 	sub	fp, #12
10e40     11 21 0A F2 | 	cmp	local02, local03 wz
10e44     01 1E 66 A6 |  if_e	neg	local01, #1
10e48     A7 1E 62 FC | 	wrlong	local01, fp
10e4c     F8 01 90 FD | 	jmp	#LR__1353
10e50                 | LR__1346
10e50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
10e50     08 4E 05 F1 | 	add	fp, #8
10e54     A7 1E 02 FB | 	rdlong	local01, fp
10e58     08 4E 85 F1 | 	sub	fp, #8
10e5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10e60     14 4E 05 A1 |  if_e	add	fp, #20
10e64     A7 22 02 AB |  if_e	rdlong	local03, fp
10e68     14 4E 85 A1 |  if_e	sub	fp, #20
10e6c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10e70     34 00 90 5D |  if_ne	jmp	#LR__1347
10e74     00 1E 06 F6 | 	mov	local01, #0
10e78     A7 12 02 FB | 	rdlong	arg01, fp
10e7c     F0 DB B0 FD | 	call	#__system___float_fromuns
10e80     FD 12 02 F6 | 	mov	arg01, result1
10e84     0C 4E 05 F1 | 	add	fp, #12
10e88     A7 14 02 FB | 	rdlong	arg02, fp
10e8c     0C 4E 85 F1 | 	sub	fp, #12
10e90     01 16 06 F6 | 	mov	arg03, #1
10e94     10 E4 B0 FD | 	call	#__system___float_cmp
10e98     00 FA 0D F2 | 	cmp	result1, #0 wz
10e9c     00 1E 26 A6 |  if_e	not	local01, #0
10ea0     A7 1E 62 FC | 	wrlong	local01, fp
10ea4     A0 01 90 FD | 	jmp	#LR__1353
10ea8                 | LR__1347
10ea8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
10ea8     08 4E 05 F1 | 	add	fp, #8
10eac     A7 1E 02 FB | 	rdlong	local01, fp
10eb0     08 4E 85 F1 | 	sub	fp, #8
10eb4     1D 1E 0E F2 | 	cmp	local01, #29 wz
10eb8     14 4E 05 A1 |  if_e	add	fp, #20
10ebc     A7 22 02 AB |  if_e	rdlong	local03, fp
10ec0     14 4E 85 A1 |  if_e	sub	fp, #20
10ec4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10ec8     24 00 90 5D |  if_ne	jmp	#LR__1348
10ecc     00 1E 06 F6 | 	mov	local01, #0
10ed0     A7 20 02 FB | 	rdlong	local02, fp
10ed4     0C 4E 05 F1 | 	add	fp, #12
10ed8     A7 22 02 FB | 	rdlong	local03, fp
10edc     0C 4E 85 F1 | 	sub	fp, #12
10ee0     11 21 0A F2 | 	cmp	local02, local03 wz
10ee4     01 1E 66 A6 |  if_e	neg	local01, #1
10ee8     A7 1E 62 FC | 	wrlong	local01, fp
10eec     58 01 90 FD | 	jmp	#LR__1353
10ef0                 | LR__1348
10ef0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
10ef0     08 4E 05 F1 | 	add	fp, #8
10ef4     A7 1E 02 FB | 	rdlong	local01, fp
10ef8     08 4E 85 F1 | 	sub	fp, #8
10efc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10f00     14 4E 05 A1 |  if_e	add	fp, #20
10f04     A7 22 02 AB |  if_e	rdlong	local03, fp
10f08     14 4E 85 A1 |  if_e	sub	fp, #20
10f0c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10f10     24 00 90 5D |  if_ne	jmp	#LR__1349
10f14     00 1E 06 F6 | 	mov	local01, #0
10f18     A7 20 02 FB | 	rdlong	local02, fp
10f1c     0C 4E 05 F1 | 	add	fp, #12
10f20     A7 22 02 FB | 	rdlong	local03, fp
10f24     0C 4E 85 F1 | 	sub	fp, #12
10f28     11 21 0A F2 | 	cmp	local02, local03 wz
10f2c     01 1E 66 A6 |  if_e	neg	local01, #1
10f30     A7 1E 62 FC | 	wrlong	local01, fp
10f34     10 01 90 FD | 	jmp	#LR__1353
10f38                 | LR__1349
10f38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
10f38     08 4E 05 F1 | 	add	fp, #8
10f3c     A7 1E 02 FB | 	rdlong	local01, fp
10f40     08 4E 85 F1 | 	sub	fp, #8
10f44     2B 1E 0E F2 | 	cmp	local01, #43 wz
10f48     14 4E 05 A1 |  if_e	add	fp, #20
10f4c     A7 22 02 AB |  if_e	rdlong	local03, fp
10f50     14 4E 85 A1 |  if_e	sub	fp, #20
10f54     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10f58     30 00 90 5D |  if_ne	jmp	#LR__1350
10f5c     00 1E 06 F6 | 	mov	local01, #0
10f60     A7 12 02 FB | 	rdlong	arg01, fp
10f64     04 D1 BF FD | 	call	#_convertstring
10f68     FD 12 02 F6 | 	mov	arg01, result1
10f6c     0C 4E 05 F1 | 	add	fp, #12
10f70     A7 14 02 FB | 	rdlong	arg02, fp
10f74     0C 4E 85 F1 | 	sub	fp, #12
10f78     A4 B3 B0 FD | 	call	#__system___string_cmp
10f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
10f80     00 1E 26 A6 |  if_e	not	local01, #0
10f84     A7 1E 62 FC | 	wrlong	local01, fp
10f88     BC 00 90 FD | 	jmp	#LR__1353
10f8c                 | LR__1350
10f8c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
10f8c     08 4E 05 F1 | 	add	fp, #8
10f90     A7 1E 02 FB | 	rdlong	local01, fp
10f94     08 4E 85 F1 | 	sub	fp, #8
10f98     1F 1E 0E F2 | 	cmp	local01, #31 wz
10f9c     14 4E 05 A1 |  if_e	add	fp, #20
10fa0     A7 22 02 AB |  if_e	rdlong	local03, fp
10fa4     14 4E 85 A1 |  if_e	sub	fp, #20
10fa8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10fac     34 00 90 5D |  if_ne	jmp	#LR__1351
10fb0     00 1E 06 F6 | 	mov	local01, #0
10fb4     A7 20 02 FB | 	rdlong	local02, fp
10fb8     0C 4E 05 F1 | 	add	fp, #12
10fbc     A7 12 02 FB | 	rdlong	arg01, fp
10fc0     0C 4E 85 F1 | 	sub	fp, #12
10fc4     A4 D0 BF FD | 	call	#_convertstring
10fc8     FD 14 02 F6 | 	mov	arg02, result1
10fcc     10 13 02 F6 | 	mov	arg01, local02
10fd0     4C B3 B0 FD | 	call	#__system___string_cmp
10fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
10fd8     00 1E 26 A6 |  if_e	not	local01, #0
10fdc     A7 1E 62 FC | 	wrlong	local01, fp
10fe0     64 00 90 FD | 	jmp	#LR__1353
10fe4                 | LR__1351
10fe4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
10fe4     08 4E 05 F1 | 	add	fp, #8
10fe8     A7 1E 02 FB | 	rdlong	local01, fp
10fec     08 4E 85 F1 | 	sub	fp, #8
10ff0     2B 1E 0E F2 | 	cmp	local01, #43 wz
10ff4     14 4E 05 A1 |  if_e	add	fp, #20
10ff8     A7 22 02 AB |  if_e	rdlong	local03, fp
10ffc     14 4E 85 A1 |  if_e	sub	fp, #20
11000     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11004     3C 00 90 5D |  if_ne	jmp	#LR__1352
11008     00 1E 06 F6 | 	mov	local01, #0
1100c     A7 12 02 FB | 	rdlong	arg01, fp
11010     58 D0 BF FD | 	call	#_convertstring
11014     FD 20 02 F6 | 	mov	local02, result1
11018     0C 4E 05 F1 | 	add	fp, #12
1101c     A7 12 02 FB | 	rdlong	arg01, fp
11020     0C 4E 85 F1 | 	sub	fp, #12
11024     44 D0 BF FD | 	call	#_convertstring
11028     FD 14 02 F6 | 	mov	arg02, result1
1102c     10 13 02 F6 | 	mov	arg01, local02
11030     EC B2 B0 FD | 	call	#__system___string_cmp
11034     00 FA 0D F2 | 	cmp	result1, #0 wz
11038     00 1E 26 A6 |  if_e	not	local01, #0
1103c     A7 1E 62 FC | 	wrlong	local01, fp
11040     04 00 90 FD | 	jmp	#LR__1353
11044                 | LR__1352
11044     A7 00 68 FC | 	wrlong	#0, fp
11048                 | LR__1353
11048     08 4E 05 F1 | 	add	fp, #8
1104c     A7 38 68 FC | 	wrlong	#28, fp
11050     08 4E 85 F1 | 	sub	fp, #8
11054     A7 12 02 F6 | 	mov	arg01, fp
11058     04 91 BF FD | 	call	#_push
1105c     A7 F0 03 F6 | 	mov	ptra, fp
11060     B2 00 A0 FD | 	call	#popregs_
11064                 | _do_eq_ret
11064     2D 00 64 FD | 	ret
11068                 | 
11068                 | ' 
11068                 | ' sub do_gt
11068                 | _do_gt
11068     05 4A 05 F6 | 	mov	COUNT_, #5
1106c     A8 00 A0 FD | 	call	#pushregs_
11070     18 F0 07 F1 | 	add	ptra, #24
11074     50 90 BF FD | 	call	#_pop
11078     FD 1E 02 F6 | 	mov	local01, result1
1107c     FE 20 02 F6 | 	mov	local02, result2
11080     FF 22 02 F6 | 	mov	local03, result3
11084     0C 4E 05 F1 | 	add	fp, #12
11088     A7 1E 62 FC | 	wrlong	local01, fp
1108c     04 4E 05 F1 | 	add	fp, #4
11090     A7 20 62 FC | 	wrlong	local02, fp
11094     04 4E 05 F1 | 	add	fp, #4
11098     A7 22 62 FC | 	wrlong	local03, fp
1109c     14 4E 85 F1 | 	sub	fp, #20
110a0     24 90 BF FD | 	call	#_pop
110a4     FF 22 02 F6 | 	mov	local03, result3
110a8     A7 FA 61 FC | 	wrlong	result1, fp
110ac     04 4E 05 F1 | 	add	fp, #4
110b0     A7 FC 61 FC | 	wrlong	result2, fp
110b4     04 4E 05 F1 | 	add	fp, #4
110b8     A7 22 62 FC | 	wrlong	local03, fp
110bc                 | ' t2=pop()
110bc                 | ' t1=pop()
110bc                 | ' 
110bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
110bc     08 4E 85 F1 | 	sub	fp, #8
110c0     1F 22 0E F2 | 	cmp	local03, #31 wz
110c4     14 4E 05 A1 |  if_e	add	fp, #20
110c8     A7 24 02 AB |  if_e	rdlong	local04, fp
110cc     14 4E 85 A1 |  if_e	sub	fp, #20
110d0     12 23 02 A6 |  if_e	mov	local03, local04
110d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
110d8     28 00 90 5D |  if_ne	jmp	#LR__1360
110dc     00 1E 06 F6 | 	mov	local01, #0
110e0     A7 12 02 FB | 	rdlong	arg01, fp
110e4     0C 4E 05 F1 | 	add	fp, #12
110e8     A7 14 02 FB | 	rdlong	arg02, fp
110ec     0C 4E 85 F1 | 	sub	fp, #12
110f0     2C B2 B0 FD | 	call	#__system___string_cmp
110f4     01 FA 55 F2 | 	cmps	result1, #1 wc
110f8     00 1E 26 36 |  if_ae	not	local01, #0
110fc     A7 1E 62 FC | 	wrlong	local01, fp
11100     1C 04 90 FD | 	jmp	#LR__1373
11104                 | LR__1360
11104                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
11104     08 4E 05 F1 | 	add	fp, #8
11108     A7 1E 02 FB | 	rdlong	local01, fp
1110c     08 4E 85 F1 | 	sub	fp, #8
11110     1E 1E 0E F2 | 	cmp	local01, #30 wz
11114     14 4E 05 A1 |  if_e	add	fp, #20
11118     A7 24 02 AB |  if_e	rdlong	local04, fp
1111c     14 4E 85 A1 |  if_e	sub	fp, #20
11120     12 23 02 A6 |  if_e	mov	local03, local04
11124     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11128     2C 00 90 5D |  if_ne	jmp	#LR__1361
1112c     00 1E 06 F6 | 	mov	local01, #0
11130     A7 12 02 FB | 	rdlong	arg01, fp
11134     0C 4E 05 F1 | 	add	fp, #12
11138     A7 14 02 FB | 	rdlong	arg02, fp
1113c     0C 4E 85 F1 | 	sub	fp, #12
11140     01 16 66 F6 | 	neg	arg03, #1
11144     60 E1 B0 FD | 	call	#__system___float_cmp
11148     01 FA 55 F2 | 	cmps	result1, #1 wc
1114c     00 1E 26 36 |  if_ae	not	local01, #0
11150     A7 1E 62 FC | 	wrlong	local01, fp
11154     C8 03 90 FD | 	jmp	#LR__1373
11158                 | LR__1361
11158                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11158     08 4E 05 F1 | 	add	fp, #8
1115c     A7 1E 02 FB | 	rdlong	local01, fp
11160     08 4E 85 F1 | 	sub	fp, #8
11164     1E 1E 0E F2 | 	cmp	local01, #30 wz
11168     14 4E 05 A1 |  if_e	add	fp, #20
1116c     A7 24 02 AB |  if_e	rdlong	local04, fp
11170     14 4E 85 A1 |  if_e	sub	fp, #20
11174     12 23 02 A6 |  if_e	mov	local03, local04
11178     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1117c     48 00 90 5D |  if_ne	jmp	#LR__1362
11180     00 1E 06 F6 | 	mov	local01, #0
11184     A7 20 02 FB | 	rdlong	local02, fp
11188     0C 4E 05 F1 | 	add	fp, #12
1118c     A7 12 02 FB | 	rdlong	arg01, fp
11190     0C 4E 85 F1 | 	sub	fp, #12
11194     09 13 52 F6 | 	abs	arg01, arg01 wc
11198     1F 26 C6 C9 |  if_b	decod	local05, #31
1119c     00 26 06 36 |  if_ae	mov	local05, #0
111a0     CC D8 B0 FD | 	call	#__system___float_fromuns
111a4     13 FB 61 F5 | 	xor	result1, local05
111a8     FD 14 02 F6 | 	mov	arg02, result1
111ac     10 13 02 F6 | 	mov	arg01, local02
111b0     01 16 66 F6 | 	neg	arg03, #1
111b4     F0 E0 B0 FD | 	call	#__system___float_cmp
111b8     01 FA 55 F2 | 	cmps	result1, #1 wc
111bc     00 1E 26 36 |  if_ae	not	local01, #0
111c0     A7 1E 62 FC | 	wrlong	local01, fp
111c4     58 03 90 FD | 	jmp	#LR__1373
111c8                 | LR__1362
111c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
111c8     08 4E 05 F1 | 	add	fp, #8
111cc     A7 1E 02 FB | 	rdlong	local01, fp
111d0     08 4E 85 F1 | 	sub	fp, #8
111d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
111d8     14 4E 05 A1 |  if_e	add	fp, #20
111dc     A7 24 02 AB |  if_e	rdlong	local04, fp
111e0     14 4E 85 A1 |  if_e	sub	fp, #20
111e4     12 23 02 A6 |  if_e	mov	local03, local04
111e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
111ec     38 00 90 5D |  if_ne	jmp	#LR__1363
111f0     00 1E 06 F6 | 	mov	local01, #0
111f4     A7 20 02 FB | 	rdlong	local02, fp
111f8     0C 4E 05 F1 | 	add	fp, #12
111fc     A7 12 02 FB | 	rdlong	arg01, fp
11200     0C 4E 85 F1 | 	sub	fp, #12
11204     68 D8 B0 FD | 	call	#__system___float_fromuns
11208     FD 14 02 F6 | 	mov	arg02, result1
1120c     10 13 02 F6 | 	mov	arg01, local02
11210     01 16 66 F6 | 	neg	arg03, #1
11214     90 E0 B0 FD | 	call	#__system___float_cmp
11218     01 FA 55 F2 | 	cmps	result1, #1 wc
1121c     00 1E 26 36 |  if_ae	not	local01, #0
11220     A7 1E 62 FC | 	wrlong	local01, fp
11224     F8 02 90 FD | 	jmp	#LR__1373
11228                 | LR__1363
11228                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11228     08 4E 05 F1 | 	add	fp, #8
1122c     A7 1E 02 FB | 	rdlong	local01, fp
11230     08 4E 85 F1 | 	sub	fp, #8
11234     1C 1E 0E F2 | 	cmp	local01, #28 wz
11238     14 4E 05 A1 |  if_e	add	fp, #20
1123c     A7 24 02 AB |  if_e	rdlong	local04, fp
11240     14 4E 85 A1 |  if_e	sub	fp, #20
11244     12 23 02 A6 |  if_e	mov	local03, local04
11248     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1124c     44 00 90 5D |  if_ne	jmp	#LR__1364
11250     00 1E 06 F6 | 	mov	local01, #0
11254     A7 12 02 FB | 	rdlong	arg01, fp
11258     09 13 52 F6 | 	abs	arg01, arg01 wc
1125c     1F 26 C6 C9 |  if_b	decod	local05, #31
11260     00 26 06 36 |  if_ae	mov	local05, #0
11264     08 D8 B0 FD | 	call	#__system___float_fromuns
11268     13 FB 61 F5 | 	xor	result1, local05
1126c     FD 12 02 F6 | 	mov	arg01, result1
11270     0C 4E 05 F1 | 	add	fp, #12
11274     A7 14 02 FB | 	rdlong	arg02, fp
11278     0C 4E 85 F1 | 	sub	fp, #12
1127c     01 16 66 F6 | 	neg	arg03, #1
11280     24 E0 B0 FD | 	call	#__system___float_cmp
11284     01 FA 55 F2 | 	cmps	result1, #1 wc
11288     00 1E 26 36 |  if_ae	not	local01, #0
1128c     A7 1E 62 FC | 	wrlong	local01, fp
11290     8C 02 90 FD | 	jmp	#LR__1373
11294                 | LR__1364
11294                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11294     08 4E 05 F1 | 	add	fp, #8
11298     A7 1E 02 FB | 	rdlong	local01, fp
1129c     08 4E 85 F1 | 	sub	fp, #8
112a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
112a4     14 4E 05 A1 |  if_e	add	fp, #20
112a8     A7 24 02 AB |  if_e	rdlong	local04, fp
112ac     14 4E 85 A1 |  if_e	sub	fp, #20
112b0     12 23 02 A6 |  if_e	mov	local03, local04
112b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
112b8     24 00 90 5D |  if_ne	jmp	#LR__1365
112bc     00 1E 06 F6 | 	mov	local01, #0
112c0     A7 20 02 FB | 	rdlong	local02, fp
112c4     0C 4E 05 F1 | 	add	fp, #12
112c8     A7 22 02 FB | 	rdlong	local03, fp
112cc     0C 4E 85 F1 | 	sub	fp, #12
112d0     11 21 5A F2 | 	cmps	local02, local03 wcz
112d4     01 1E 66 16 |  if_a	neg	local01, #1
112d8     A7 1E 62 FC | 	wrlong	local01, fp
112dc     40 02 90 FD | 	jmp	#LR__1373
112e0                 | LR__1365
112e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
112e0     08 4E 05 F1 | 	add	fp, #8
112e4     A7 1E 02 FB | 	rdlong	local01, fp
112e8     08 4E 85 F1 | 	sub	fp, #8
112ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
112f0     14 4E 05 A1 |  if_e	add	fp, #20
112f4     A7 24 02 AB |  if_e	rdlong	local04, fp
112f8     14 4E 85 A1 |  if_e	sub	fp, #20
112fc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11300     24 00 90 5D |  if_ne	jmp	#LR__1366
11304     00 1E 06 F6 | 	mov	local01, #0
11308     A7 20 02 FB | 	rdlong	local02, fp
1130c     0C 4E 05 F1 | 	add	fp, #12
11310     A7 22 02 FB | 	rdlong	local03, fp
11314     0C 4E 85 F1 | 	sub	fp, #12
11318     11 21 5A F2 | 	cmps	local02, local03 wcz
1131c     01 1E 66 16 |  if_a	neg	local01, #1
11320     A7 1E 62 FC | 	wrlong	local01, fp
11324     F8 01 90 FD | 	jmp	#LR__1373
11328                 | LR__1366
11328                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11328     08 4E 05 F1 | 	add	fp, #8
1132c     A7 1E 02 FB | 	rdlong	local01, fp
11330     08 4E 85 F1 | 	sub	fp, #8
11334     1D 1E 0E F2 | 	cmp	local01, #29 wz
11338     14 4E 05 A1 |  if_e	add	fp, #20
1133c     A7 22 02 AB |  if_e	rdlong	local03, fp
11340     14 4E 85 A1 |  if_e	sub	fp, #20
11344     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11348     34 00 90 5D |  if_ne	jmp	#LR__1367
1134c     00 1E 06 F6 | 	mov	local01, #0
11350     A7 12 02 FB | 	rdlong	arg01, fp
11354     18 D7 B0 FD | 	call	#__system___float_fromuns
11358     FD 12 02 F6 | 	mov	arg01, result1
1135c     0C 4E 05 F1 | 	add	fp, #12
11360     A7 14 02 FB | 	rdlong	arg02, fp
11364     0C 4E 85 F1 | 	sub	fp, #12
11368     01 16 66 F6 | 	neg	arg03, #1
1136c     38 DF B0 FD | 	call	#__system___float_cmp
11370     01 FA 55 F2 | 	cmps	result1, #1 wc
11374     00 1E 26 36 |  if_ae	not	local01, #0
11378     A7 1E 62 FC | 	wrlong	local01, fp
1137c     A0 01 90 FD | 	jmp	#LR__1373
11380                 | LR__1367
11380                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11380     08 4E 05 F1 | 	add	fp, #8
11384     A7 1E 02 FB | 	rdlong	local01, fp
11388     08 4E 85 F1 | 	sub	fp, #8
1138c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11390     14 4E 05 A1 |  if_e	add	fp, #20
11394     A7 22 02 AB |  if_e	rdlong	local03, fp
11398     14 4E 85 A1 |  if_e	sub	fp, #20
1139c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
113a0     24 00 90 5D |  if_ne	jmp	#LR__1368
113a4     00 1E 06 F6 | 	mov	local01, #0
113a8     A7 20 02 FB | 	rdlong	local02, fp
113ac     0C 4E 05 F1 | 	add	fp, #12
113b0     A7 22 02 FB | 	rdlong	local03, fp
113b4     0C 4E 85 F1 | 	sub	fp, #12
113b8     11 21 5A F2 | 	cmps	local02, local03 wcz
113bc     01 1E 66 16 |  if_a	neg	local01, #1
113c0     A7 1E 62 FC | 	wrlong	local01, fp
113c4     58 01 90 FD | 	jmp	#LR__1373
113c8                 | LR__1368
113c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
113c8     08 4E 05 F1 | 	add	fp, #8
113cc     A7 1E 02 FB | 	rdlong	local01, fp
113d0     08 4E 85 F1 | 	sub	fp, #8
113d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
113d8     14 4E 05 A1 |  if_e	add	fp, #20
113dc     A7 22 02 AB |  if_e	rdlong	local03, fp
113e0     14 4E 85 A1 |  if_e	sub	fp, #20
113e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
113e8     24 00 90 5D |  if_ne	jmp	#LR__1369
113ec     00 1E 06 F6 | 	mov	local01, #0
113f0     A7 20 02 FB | 	rdlong	local02, fp
113f4     0C 4E 05 F1 | 	add	fp, #12
113f8     A7 22 02 FB | 	rdlong	local03, fp
113fc     0C 4E 85 F1 | 	sub	fp, #12
11400     11 21 1A F2 | 	cmp	local02, local03 wcz
11404     01 1E 66 16 |  if_a	neg	local01, #1
11408     A7 1E 62 FC | 	wrlong	local01, fp
1140c     10 01 90 FD | 	jmp	#LR__1373
11410                 | LR__1369
11410                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
11410     08 4E 05 F1 | 	add	fp, #8
11414     A7 1E 02 FB | 	rdlong	local01, fp
11418     08 4E 85 F1 | 	sub	fp, #8
1141c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11420     14 4E 05 A1 |  if_e	add	fp, #20
11424     A7 22 02 AB |  if_e	rdlong	local03, fp
11428     14 4E 85 A1 |  if_e	sub	fp, #20
1142c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11430     30 00 90 5D |  if_ne	jmp	#LR__1370
11434     00 1E 06 F6 | 	mov	local01, #0
11438     A7 12 02 FB | 	rdlong	arg01, fp
1143c     2C CC BF FD | 	call	#_convertstring
11440     FD 12 02 F6 | 	mov	arg01, result1
11444     0C 4E 05 F1 | 	add	fp, #12
11448     A7 14 02 FB | 	rdlong	arg02, fp
1144c     0C 4E 85 F1 | 	sub	fp, #12
11450     CC AE B0 FD | 	call	#__system___string_cmp
11454     01 FA 55 F2 | 	cmps	result1, #1 wc
11458     00 1E 26 36 |  if_ae	not	local01, #0
1145c     A7 1E 62 FC | 	wrlong	local01, fp
11460     BC 00 90 FD | 	jmp	#LR__1373
11464                 | LR__1370
11464                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
11464     08 4E 05 F1 | 	add	fp, #8
11468     A7 1E 02 FB | 	rdlong	local01, fp
1146c     08 4E 85 F1 | 	sub	fp, #8
11470     1F 1E 0E F2 | 	cmp	local01, #31 wz
11474     14 4E 05 A1 |  if_e	add	fp, #20
11478     A7 22 02 AB |  if_e	rdlong	local03, fp
1147c     14 4E 85 A1 |  if_e	sub	fp, #20
11480     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11484     34 00 90 5D |  if_ne	jmp	#LR__1371
11488     00 1E 06 F6 | 	mov	local01, #0
1148c     A7 20 02 FB | 	rdlong	local02, fp
11490     0C 4E 05 F1 | 	add	fp, #12
11494     A7 12 02 FB | 	rdlong	arg01, fp
11498     0C 4E 85 F1 | 	sub	fp, #12
1149c     CC CB BF FD | 	call	#_convertstring
114a0     FD 14 02 F6 | 	mov	arg02, result1
114a4     10 13 02 F6 | 	mov	arg01, local02
114a8     74 AE B0 FD | 	call	#__system___string_cmp
114ac     01 FA 55 F2 | 	cmps	result1, #1 wc
114b0     00 1E 26 36 |  if_ae	not	local01, #0
114b4     A7 1E 62 FC | 	wrlong	local01, fp
114b8     64 00 90 FD | 	jmp	#LR__1373
114bc                 | LR__1371
114bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
114bc     08 4E 05 F1 | 	add	fp, #8
114c0     A7 1E 02 FB | 	rdlong	local01, fp
114c4     08 4E 85 F1 | 	sub	fp, #8
114c8     2B 1E 0E F2 | 	cmp	local01, #43 wz
114cc     14 4E 05 A1 |  if_e	add	fp, #20
114d0     A7 22 02 AB |  if_e	rdlong	local03, fp
114d4     14 4E 85 A1 |  if_e	sub	fp, #20
114d8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
114dc     3C 00 90 5D |  if_ne	jmp	#LR__1372
114e0     00 1E 06 F6 | 	mov	local01, #0
114e4     A7 12 02 FB | 	rdlong	arg01, fp
114e8     80 CB BF FD | 	call	#_convertstring
114ec     FD 20 02 F6 | 	mov	local02, result1
114f0     0C 4E 05 F1 | 	add	fp, #12
114f4     A7 12 02 FB | 	rdlong	arg01, fp
114f8     0C 4E 85 F1 | 	sub	fp, #12
114fc     6C CB BF FD | 	call	#_convertstring
11500     FD 14 02 F6 | 	mov	arg02, result1
11504     10 13 02 F6 | 	mov	arg01, local02
11508     14 AE B0 FD | 	call	#__system___string_cmp
1150c     01 FA 55 F2 | 	cmps	result1, #1 wc
11510     00 1E 26 36 |  if_ae	not	local01, #0
11514     A7 1E 62 FC | 	wrlong	local01, fp
11518     04 00 90 FD | 	jmp	#LR__1373
1151c                 | LR__1372
1151c     A7 00 68 FC | 	wrlong	#0, fp
11520                 | LR__1373
11520     08 4E 05 F1 | 	add	fp, #8
11524     A7 38 68 FC | 	wrlong	#28, fp
11528     08 4E 85 F1 | 	sub	fp, #8
1152c     A7 12 02 F6 | 	mov	arg01, fp
11530     2C 8C BF FD | 	call	#_push
11534     A7 F0 03 F6 | 	mov	ptra, fp
11538     B2 00 A0 FD | 	call	#popregs_
1153c                 | _do_gt_ret
1153c     2D 00 64 FD | 	ret
11540                 | 
11540                 | ' 
11540                 | ' sub do_lt
11540                 | _do_lt
11540     05 4A 05 F6 | 	mov	COUNT_, #5
11544     A8 00 A0 FD | 	call	#pushregs_
11548     18 F0 07 F1 | 	add	ptra, #24
1154c     78 8B BF FD | 	call	#_pop
11550     FD 1E 02 F6 | 	mov	local01, result1
11554     FE 20 02 F6 | 	mov	local02, result2
11558     FF 22 02 F6 | 	mov	local03, result3
1155c     0C 4E 05 F1 | 	add	fp, #12
11560     A7 1E 62 FC | 	wrlong	local01, fp
11564     04 4E 05 F1 | 	add	fp, #4
11568     A7 20 62 FC | 	wrlong	local02, fp
1156c     04 4E 05 F1 | 	add	fp, #4
11570     A7 22 62 FC | 	wrlong	local03, fp
11574     14 4E 85 F1 | 	sub	fp, #20
11578     4C 8B BF FD | 	call	#_pop
1157c     FF 22 02 F6 | 	mov	local03, result3
11580     A7 FA 61 FC | 	wrlong	result1, fp
11584     04 4E 05 F1 | 	add	fp, #4
11588     A7 FC 61 FC | 	wrlong	result2, fp
1158c     04 4E 05 F1 | 	add	fp, #4
11590     A7 22 62 FC | 	wrlong	local03, fp
11594                 | ' t2=pop()
11594                 | ' t1=pop()
11594                 | ' 
11594                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
11594     08 4E 85 F1 | 	sub	fp, #8
11598     1F 22 0E F2 | 	cmp	local03, #31 wz
1159c     14 4E 05 A1 |  if_e	add	fp, #20
115a0     A7 24 02 AB |  if_e	rdlong	local04, fp
115a4     14 4E 85 A1 |  if_e	sub	fp, #20
115a8     12 23 02 A6 |  if_e	mov	local03, local04
115ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
115b0     28 00 90 5D |  if_ne	jmp	#LR__1380
115b4     00 1E 06 F6 | 	mov	local01, #0
115b8     A7 12 02 FB | 	rdlong	arg01, fp
115bc     0C 4E 05 F1 | 	add	fp, #12
115c0     A7 14 02 FB | 	rdlong	arg02, fp
115c4     0C 4E 85 F1 | 	sub	fp, #12
115c8     54 AD B0 FD | 	call	#__system___string_cmp
115cc     00 FA 55 F2 | 	cmps	result1, #0 wc
115d0     00 1E 26 C6 |  if_b	not	local01, #0
115d4     A7 1E 62 FC | 	wrlong	local01, fp
115d8     0C 04 90 FD | 	jmp	#LR__1393
115dc                 | LR__1380
115dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
115dc     08 4E 05 F1 | 	add	fp, #8
115e0     A7 1E 02 FB | 	rdlong	local01, fp
115e4     08 4E 85 F1 | 	sub	fp, #8
115e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
115ec     14 4E 05 A1 |  if_e	add	fp, #20
115f0     A7 24 02 AB |  if_e	rdlong	local04, fp
115f4     14 4E 85 A1 |  if_e	sub	fp, #20
115f8     12 23 02 A6 |  if_e	mov	local03, local04
115fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11600     2C 00 90 5D |  if_ne	jmp	#LR__1381
11604     00 1E 06 F6 | 	mov	local01, #0
11608     A7 12 02 FB | 	rdlong	arg01, fp
1160c     0C 4E 05 F1 | 	add	fp, #12
11610     A7 14 02 FB | 	rdlong	arg02, fp
11614     0C 4E 85 F1 | 	sub	fp, #12
11618     01 16 06 F6 | 	mov	arg03, #1
1161c     88 DC B0 FD | 	call	#__system___float_cmp
11620     00 FA 55 F2 | 	cmps	result1, #0 wc
11624     00 1E 26 C6 |  if_b	not	local01, #0
11628     A7 1E 62 FC | 	wrlong	local01, fp
1162c     B8 03 90 FD | 	jmp	#LR__1393
11630                 | LR__1381
11630                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
11630     08 4E 05 F1 | 	add	fp, #8
11634     A7 1E 02 FB | 	rdlong	local01, fp
11638     08 4E 85 F1 | 	sub	fp, #8
1163c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11640     14 4E 05 A1 |  if_e	add	fp, #20
11644     A7 24 02 AB |  if_e	rdlong	local04, fp
11648     14 4E 85 A1 |  if_e	sub	fp, #20
1164c     12 23 02 A6 |  if_e	mov	local03, local04
11650     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11654     48 00 90 5D |  if_ne	jmp	#LR__1382
11658     00 1E 06 F6 | 	mov	local01, #0
1165c     A7 20 02 FB | 	rdlong	local02, fp
11660     0C 4E 05 F1 | 	add	fp, #12
11664     A7 12 02 FB | 	rdlong	arg01, fp
11668     0C 4E 85 F1 | 	sub	fp, #12
1166c     09 13 52 F6 | 	abs	arg01, arg01 wc
11670     1F 26 C6 C9 |  if_b	decod	local05, #31
11674     00 26 06 36 |  if_ae	mov	local05, #0
11678     F4 D3 B0 FD | 	call	#__system___float_fromuns
1167c     13 FB 61 F5 | 	xor	result1, local05
11680     FD 14 02 F6 | 	mov	arg02, result1
11684     10 13 02 F6 | 	mov	arg01, local02
11688     01 16 06 F6 | 	mov	arg03, #1
1168c     18 DC B0 FD | 	call	#__system___float_cmp
11690     00 FA 55 F2 | 	cmps	result1, #0 wc
11694     00 1E 26 C6 |  if_b	not	local01, #0
11698     A7 1E 62 FC | 	wrlong	local01, fp
1169c     48 03 90 FD | 	jmp	#LR__1393
116a0                 | LR__1382
116a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
116a0     08 4E 05 F1 | 	add	fp, #8
116a4     A7 1E 02 FB | 	rdlong	local01, fp
116a8     08 4E 85 F1 | 	sub	fp, #8
116ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
116b0     14 4E 05 A1 |  if_e	add	fp, #20
116b4     A7 24 02 AB |  if_e	rdlong	local04, fp
116b8     14 4E 85 A1 |  if_e	sub	fp, #20
116bc     12 23 02 A6 |  if_e	mov	local03, local04
116c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
116c4     38 00 90 5D |  if_ne	jmp	#LR__1383
116c8     00 1E 06 F6 | 	mov	local01, #0
116cc     A7 20 02 FB | 	rdlong	local02, fp
116d0     0C 4E 05 F1 | 	add	fp, #12
116d4     A7 12 02 FB | 	rdlong	arg01, fp
116d8     0C 4E 85 F1 | 	sub	fp, #12
116dc     90 D3 B0 FD | 	call	#__system___float_fromuns
116e0     FD 14 02 F6 | 	mov	arg02, result1
116e4     10 13 02 F6 | 	mov	arg01, local02
116e8     01 16 06 F6 | 	mov	arg03, #1
116ec     B8 DB B0 FD | 	call	#__system___float_cmp
116f0     00 FA 55 F2 | 	cmps	result1, #0 wc
116f4     00 1E 26 C6 |  if_b	not	local01, #0
116f8     A7 1E 62 FC | 	wrlong	local01, fp
116fc     E8 02 90 FD | 	jmp	#LR__1393
11700                 | LR__1383
11700                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
11700     08 4E 05 F1 | 	add	fp, #8
11704     A7 1E 02 FB | 	rdlong	local01, fp
11708     08 4E 85 F1 | 	sub	fp, #8
1170c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11710     14 4E 05 A1 |  if_e	add	fp, #20
11714     A7 24 02 AB |  if_e	rdlong	local04, fp
11718     14 4E 85 A1 |  if_e	sub	fp, #20
1171c     12 23 02 A6 |  if_e	mov	local03, local04
11720     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11724     44 00 90 5D |  if_ne	jmp	#LR__1384
11728     00 1E 06 F6 | 	mov	local01, #0
1172c     A7 12 02 FB | 	rdlong	arg01, fp
11730     09 13 52 F6 | 	abs	arg01, arg01 wc
11734     1F 26 C6 C9 |  if_b	decod	local05, #31
11738     00 26 06 36 |  if_ae	mov	local05, #0
1173c     30 D3 B0 FD | 	call	#__system___float_fromuns
11740     13 FB 61 F5 | 	xor	result1, local05
11744     FD 12 02 F6 | 	mov	arg01, result1
11748     0C 4E 05 F1 | 	add	fp, #12
1174c     A7 14 02 FB | 	rdlong	arg02, fp
11750     0C 4E 85 F1 | 	sub	fp, #12
11754     01 16 06 F6 | 	mov	arg03, #1
11758     4C DB B0 FD | 	call	#__system___float_cmp
1175c     00 FA 55 F2 | 	cmps	result1, #0 wc
11760     00 1E 26 C6 |  if_b	not	local01, #0
11764     A7 1E 62 FC | 	wrlong	local01, fp
11768     7C 02 90 FD | 	jmp	#LR__1393
1176c                 | LR__1384
1176c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1176c     08 4E 05 F1 | 	add	fp, #8
11770     A7 1E 02 FB | 	rdlong	local01, fp
11774     08 4E 85 F1 | 	sub	fp, #8
11778     1C 1E 0E F2 | 	cmp	local01, #28 wz
1177c     14 4E 05 A1 |  if_e	add	fp, #20
11780     A7 24 02 AB |  if_e	rdlong	local04, fp
11784     14 4E 85 A1 |  if_e	sub	fp, #20
11788     12 23 02 A6 |  if_e	mov	local03, local04
1178c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11790     20 00 90 5D |  if_ne	jmp	#LR__1385
11794     A7 20 02 FB | 	rdlong	local02, fp
11798     0C 4E 05 F1 | 	add	fp, #12
1179c     A7 22 02 FB | 	rdlong	local03, fp
117a0     0C 4E 85 F1 | 	sub	fp, #12
117a4     11 21 52 F2 | 	cmps	local02, local03 wc
117a8     0F 1F A2 F1 | 	subx	local01, local01
117ac     A7 1E 62 FC | 	wrlong	local01, fp
117b0     34 02 90 FD | 	jmp	#LR__1393
117b4                 | LR__1385
117b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
117b4     08 4E 05 F1 | 	add	fp, #8
117b8     A7 1E 02 FB | 	rdlong	local01, fp
117bc     08 4E 85 F1 | 	sub	fp, #8
117c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
117c4     14 4E 05 A1 |  if_e	add	fp, #20
117c8     A7 24 02 AB |  if_e	rdlong	local04, fp
117cc     14 4E 85 A1 |  if_e	sub	fp, #20
117d0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
117d4     20 00 90 5D |  if_ne	jmp	#LR__1386
117d8     A7 20 02 FB | 	rdlong	local02, fp
117dc     0C 4E 05 F1 | 	add	fp, #12
117e0     A7 22 02 FB | 	rdlong	local03, fp
117e4     0C 4E 85 F1 | 	sub	fp, #12
117e8     11 21 52 F2 | 	cmps	local02, local03 wc
117ec     0F 1F A2 F1 | 	subx	local01, local01
117f0     A7 1E 62 FC | 	wrlong	local01, fp
117f4     F0 01 90 FD | 	jmp	#LR__1393
117f8                 | LR__1386
117f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
117f8     08 4E 05 F1 | 	add	fp, #8
117fc     A7 1E 02 FB | 	rdlong	local01, fp
11800     08 4E 85 F1 | 	sub	fp, #8
11804     1D 1E 0E F2 | 	cmp	local01, #29 wz
11808     14 4E 05 A1 |  if_e	add	fp, #20
1180c     A7 22 02 AB |  if_e	rdlong	local03, fp
11810     14 4E 85 A1 |  if_e	sub	fp, #20
11814     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11818     34 00 90 5D |  if_ne	jmp	#LR__1387
1181c     00 1E 06 F6 | 	mov	local01, #0
11820     A7 12 02 FB | 	rdlong	arg01, fp
11824     48 D2 B0 FD | 	call	#__system___float_fromuns
11828     FD 12 02 F6 | 	mov	arg01, result1
1182c     0C 4E 05 F1 | 	add	fp, #12
11830     A7 14 02 FB | 	rdlong	arg02, fp
11834     0C 4E 85 F1 | 	sub	fp, #12
11838     01 16 06 F6 | 	mov	arg03, #1
1183c     68 DA B0 FD | 	call	#__system___float_cmp
11840     00 FA 55 F2 | 	cmps	result1, #0 wc
11844     00 1E 26 C6 |  if_b	not	local01, #0
11848     A7 1E 62 FC | 	wrlong	local01, fp
1184c     98 01 90 FD | 	jmp	#LR__1393
11850                 | LR__1387
11850                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
11850     08 4E 05 F1 | 	add	fp, #8
11854     A7 1E 02 FB | 	rdlong	local01, fp
11858     08 4E 85 F1 | 	sub	fp, #8
1185c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11860     14 4E 05 A1 |  if_e	add	fp, #20
11864     A7 22 02 AB |  if_e	rdlong	local03, fp
11868     14 4E 85 A1 |  if_e	sub	fp, #20
1186c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11870     20 00 90 5D |  if_ne	jmp	#LR__1388
11874     A7 20 02 FB | 	rdlong	local02, fp
11878     0C 4E 05 F1 | 	add	fp, #12
1187c     A7 22 02 FB | 	rdlong	local03, fp
11880     0C 4E 85 F1 | 	sub	fp, #12
11884     11 21 52 F2 | 	cmps	local02, local03 wc
11888     0F 1F A2 F1 | 	subx	local01, local01
1188c     A7 1E 62 FC | 	wrlong	local01, fp
11890     54 01 90 FD | 	jmp	#LR__1393
11894                 | LR__1388
11894                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
11894     08 4E 05 F1 | 	add	fp, #8
11898     A7 1E 02 FB | 	rdlong	local01, fp
1189c     08 4E 85 F1 | 	sub	fp, #8
118a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
118a4     14 4E 05 A1 |  if_e	add	fp, #20
118a8     A7 22 02 AB |  if_e	rdlong	local03, fp
118ac     14 4E 85 A1 |  if_e	sub	fp, #20
118b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
118b4     20 00 90 5D |  if_ne	jmp	#LR__1389
118b8     A7 20 02 FB | 	rdlong	local02, fp
118bc     0C 4E 05 F1 | 	add	fp, #12
118c0     A7 22 02 FB | 	rdlong	local03, fp
118c4     0C 4E 85 F1 | 	sub	fp, #12
118c8     11 21 12 F2 | 	cmp	local02, local03 wc
118cc     0F 1F A2 F1 | 	subx	local01, local01
118d0     A7 1E 62 FC | 	wrlong	local01, fp
118d4     10 01 90 FD | 	jmp	#LR__1393
118d8                 | LR__1389
118d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
118d8     08 4E 05 F1 | 	add	fp, #8
118dc     A7 1E 02 FB | 	rdlong	local01, fp
118e0     08 4E 85 F1 | 	sub	fp, #8
118e4     2B 1E 0E F2 | 	cmp	local01, #43 wz
118e8     14 4E 05 A1 |  if_e	add	fp, #20
118ec     A7 22 02 AB |  if_e	rdlong	local03, fp
118f0     14 4E 85 A1 |  if_e	sub	fp, #20
118f4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
118f8     30 00 90 5D |  if_ne	jmp	#LR__1390
118fc     00 1E 06 F6 | 	mov	local01, #0
11900     A7 12 02 FB | 	rdlong	arg01, fp
11904     64 C7 BF FD | 	call	#_convertstring
11908     FD 12 02 F6 | 	mov	arg01, result1
1190c     0C 4E 05 F1 | 	add	fp, #12
11910     A7 14 02 FB | 	rdlong	arg02, fp
11914     0C 4E 85 F1 | 	sub	fp, #12
11918     04 AA B0 FD | 	call	#__system___string_cmp
1191c     00 FA 55 F2 | 	cmps	result1, #0 wc
11920     00 1E 26 C6 |  if_b	not	local01, #0
11924     A7 1E 62 FC | 	wrlong	local01, fp
11928     BC 00 90 FD | 	jmp	#LR__1393
1192c                 | LR__1390
1192c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1192c     08 4E 05 F1 | 	add	fp, #8
11930     A7 1E 02 FB | 	rdlong	local01, fp
11934     08 4E 85 F1 | 	sub	fp, #8
11938     1F 1E 0E F2 | 	cmp	local01, #31 wz
1193c     14 4E 05 A1 |  if_e	add	fp, #20
11940     A7 22 02 AB |  if_e	rdlong	local03, fp
11944     14 4E 85 A1 |  if_e	sub	fp, #20
11948     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1194c     34 00 90 5D |  if_ne	jmp	#LR__1391
11950     00 1E 06 F6 | 	mov	local01, #0
11954     A7 20 02 FB | 	rdlong	local02, fp
11958     0C 4E 05 F1 | 	add	fp, #12
1195c     A7 12 02 FB | 	rdlong	arg01, fp
11960     0C 4E 85 F1 | 	sub	fp, #12
11964     04 C7 BF FD | 	call	#_convertstring
11968     FD 14 02 F6 | 	mov	arg02, result1
1196c     10 13 02 F6 | 	mov	arg01, local02
11970     AC A9 B0 FD | 	call	#__system___string_cmp
11974     00 FA 55 F2 | 	cmps	result1, #0 wc
11978     00 1E 26 C6 |  if_b	not	local01, #0
1197c     A7 1E 62 FC | 	wrlong	local01, fp
11980     64 00 90 FD | 	jmp	#LR__1393
11984                 | LR__1391
11984                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
11984     08 4E 05 F1 | 	add	fp, #8
11988     A7 1E 02 FB | 	rdlong	local01, fp
1198c     08 4E 85 F1 | 	sub	fp, #8
11990     2B 1E 0E F2 | 	cmp	local01, #43 wz
11994     14 4E 05 A1 |  if_e	add	fp, #20
11998     A7 22 02 AB |  if_e	rdlong	local03, fp
1199c     14 4E 85 A1 |  if_e	sub	fp, #20
119a0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
119a4     3C 00 90 5D |  if_ne	jmp	#LR__1392
119a8     00 1E 06 F6 | 	mov	local01, #0
119ac     A7 12 02 FB | 	rdlong	arg01, fp
119b0     B8 C6 BF FD | 	call	#_convertstring
119b4     FD 20 02 F6 | 	mov	local02, result1
119b8     0C 4E 05 F1 | 	add	fp, #12
119bc     A7 12 02 FB | 	rdlong	arg01, fp
119c0     0C 4E 85 F1 | 	sub	fp, #12
119c4     A4 C6 BF FD | 	call	#_convertstring
119c8     FD 14 02 F6 | 	mov	arg02, result1
119cc     10 13 02 F6 | 	mov	arg01, local02
119d0     4C A9 B0 FD | 	call	#__system___string_cmp
119d4     00 FA 55 F2 | 	cmps	result1, #0 wc
119d8     00 1E 26 C6 |  if_b	not	local01, #0
119dc     A7 1E 62 FC | 	wrlong	local01, fp
119e0     04 00 90 FD | 	jmp	#LR__1393
119e4                 | LR__1392
119e4     A7 00 68 FC | 	wrlong	#0, fp
119e8                 | LR__1393
119e8     08 4E 05 F1 | 	add	fp, #8
119ec     A7 38 68 FC | 	wrlong	#28, fp
119f0     08 4E 85 F1 | 	sub	fp, #8
119f4     A7 12 02 F6 | 	mov	arg01, fp
119f8     64 87 BF FD | 	call	#_push
119fc     A7 F0 03 F6 | 	mov	ptra, fp
11a00     B2 00 A0 FD | 	call	#popregs_
11a04                 | _do_lt_ret
11a04     2D 00 64 FD | 	ret
11a08                 | 
11a08                 | ' 
11a08                 | ' sub do_ge
11a08                 | _do_ge
11a08     05 4A 05 F6 | 	mov	COUNT_, #5
11a0c     A8 00 A0 FD | 	call	#pushregs_
11a10     18 F0 07 F1 | 	add	ptra, #24
11a14     B0 86 BF FD | 	call	#_pop
11a18     FD 1E 02 F6 | 	mov	local01, result1
11a1c     FE 20 02 F6 | 	mov	local02, result2
11a20     FF 22 02 F6 | 	mov	local03, result3
11a24     0C 4E 05 F1 | 	add	fp, #12
11a28     A7 1E 62 FC | 	wrlong	local01, fp
11a2c     04 4E 05 F1 | 	add	fp, #4
11a30     A7 20 62 FC | 	wrlong	local02, fp
11a34     04 4E 05 F1 | 	add	fp, #4
11a38     A7 22 62 FC | 	wrlong	local03, fp
11a3c     14 4E 85 F1 | 	sub	fp, #20
11a40     84 86 BF FD | 	call	#_pop
11a44     FF 22 02 F6 | 	mov	local03, result3
11a48     A7 FA 61 FC | 	wrlong	result1, fp
11a4c     04 4E 05 F1 | 	add	fp, #4
11a50     A7 FC 61 FC | 	wrlong	result2, fp
11a54     04 4E 05 F1 | 	add	fp, #4
11a58     A7 22 62 FC | 	wrlong	local03, fp
11a5c                 | ' t2=pop()
11a5c                 | ' t1=pop()
11a5c                 | ' 
11a5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
11a5c     08 4E 85 F1 | 	sub	fp, #8
11a60     1F 22 0E F2 | 	cmp	local03, #31 wz
11a64     14 4E 05 A1 |  if_e	add	fp, #20
11a68     A7 24 02 AB |  if_e	rdlong	local04, fp
11a6c     14 4E 85 A1 |  if_e	sub	fp, #20
11a70     12 23 02 A6 |  if_e	mov	local03, local04
11a74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11a78     28 00 90 5D |  if_ne	jmp	#LR__1400
11a7c     00 1E 06 F6 | 	mov	local01, #0
11a80     A7 12 02 FB | 	rdlong	arg01, fp
11a84     0C 4E 05 F1 | 	add	fp, #12
11a88     A7 14 02 FB | 	rdlong	arg02, fp
11a8c     0C 4E 85 F1 | 	sub	fp, #12
11a90     8C A8 B0 FD | 	call	#__system___string_cmp
11a94     00 FA 55 F2 | 	cmps	result1, #0 wc
11a98     00 1E 26 36 |  if_ae	not	local01, #0
11a9c     A7 1E 62 FC | 	wrlong	local01, fp
11aa0     1C 04 90 FD | 	jmp	#LR__1413
11aa4                 | LR__1400
11aa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
11aa4     08 4E 05 F1 | 	add	fp, #8
11aa8     A7 1E 02 FB | 	rdlong	local01, fp
11aac     08 4E 85 F1 | 	sub	fp, #8
11ab0     1E 1E 0E F2 | 	cmp	local01, #30 wz
11ab4     14 4E 05 A1 |  if_e	add	fp, #20
11ab8     A7 24 02 AB |  if_e	rdlong	local04, fp
11abc     14 4E 85 A1 |  if_e	sub	fp, #20
11ac0     12 23 02 A6 |  if_e	mov	local03, local04
11ac4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ac8     2C 00 90 5D |  if_ne	jmp	#LR__1401
11acc     00 1E 06 F6 | 	mov	local01, #0
11ad0     A7 12 02 FB | 	rdlong	arg01, fp
11ad4     0C 4E 05 F1 | 	add	fp, #12
11ad8     A7 14 02 FB | 	rdlong	arg02, fp
11adc     0C 4E 85 F1 | 	sub	fp, #12
11ae0     01 16 66 F6 | 	neg	arg03, #1
11ae4     C0 D7 B0 FD | 	call	#__system___float_cmp
11ae8     00 FA 55 F2 | 	cmps	result1, #0 wc
11aec     00 1E 26 36 |  if_ae	not	local01, #0
11af0     A7 1E 62 FC | 	wrlong	local01, fp
11af4     C8 03 90 FD | 	jmp	#LR__1413
11af8                 | LR__1401
11af8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
11af8     08 4E 05 F1 | 	add	fp, #8
11afc     A7 1E 02 FB | 	rdlong	local01, fp
11b00     08 4E 85 F1 | 	sub	fp, #8
11b04     1E 1E 0E F2 | 	cmp	local01, #30 wz
11b08     14 4E 05 A1 |  if_e	add	fp, #20
11b0c     A7 24 02 AB |  if_e	rdlong	local04, fp
11b10     14 4E 85 A1 |  if_e	sub	fp, #20
11b14     12 23 02 A6 |  if_e	mov	local03, local04
11b18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b1c     48 00 90 5D |  if_ne	jmp	#LR__1402
11b20     00 1E 06 F6 | 	mov	local01, #0
11b24     A7 20 02 FB | 	rdlong	local02, fp
11b28     0C 4E 05 F1 | 	add	fp, #12
11b2c     A7 12 02 FB | 	rdlong	arg01, fp
11b30     0C 4E 85 F1 | 	sub	fp, #12
11b34     09 13 52 F6 | 	abs	arg01, arg01 wc
11b38     1F 26 C6 C9 |  if_b	decod	local05, #31
11b3c     00 26 06 36 |  if_ae	mov	local05, #0
11b40     2C CF B0 FD | 	call	#__system___float_fromuns
11b44     13 FB 61 F5 | 	xor	result1, local05
11b48     FD 14 02 F6 | 	mov	arg02, result1
11b4c     10 13 02 F6 | 	mov	arg01, local02
11b50     01 16 66 F6 | 	neg	arg03, #1
11b54     50 D7 B0 FD | 	call	#__system___float_cmp
11b58     00 FA 55 F2 | 	cmps	result1, #0 wc
11b5c     00 1E 26 36 |  if_ae	not	local01, #0
11b60     A7 1E 62 FC | 	wrlong	local01, fp
11b64     58 03 90 FD | 	jmp	#LR__1413
11b68                 | LR__1402
11b68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
11b68     08 4E 05 F1 | 	add	fp, #8
11b6c     A7 1E 02 FB | 	rdlong	local01, fp
11b70     08 4E 85 F1 | 	sub	fp, #8
11b74     1E 1E 0E F2 | 	cmp	local01, #30 wz
11b78     14 4E 05 A1 |  if_e	add	fp, #20
11b7c     A7 24 02 AB |  if_e	rdlong	local04, fp
11b80     14 4E 85 A1 |  if_e	sub	fp, #20
11b84     12 23 02 A6 |  if_e	mov	local03, local04
11b88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11b8c     38 00 90 5D |  if_ne	jmp	#LR__1403
11b90     00 1E 06 F6 | 	mov	local01, #0
11b94     A7 20 02 FB | 	rdlong	local02, fp
11b98     0C 4E 05 F1 | 	add	fp, #12
11b9c     A7 12 02 FB | 	rdlong	arg01, fp
11ba0     0C 4E 85 F1 | 	sub	fp, #12
11ba4     C8 CE B0 FD | 	call	#__system___float_fromuns
11ba8     FD 14 02 F6 | 	mov	arg02, result1
11bac     10 13 02 F6 | 	mov	arg01, local02
11bb0     01 16 66 F6 | 	neg	arg03, #1
11bb4     F0 D6 B0 FD | 	call	#__system___float_cmp
11bb8     00 FA 55 F2 | 	cmps	result1, #0 wc
11bbc     00 1E 26 36 |  if_ae	not	local01, #0
11bc0     A7 1E 62 FC | 	wrlong	local01, fp
11bc4     F8 02 90 FD | 	jmp	#LR__1413
11bc8                 | LR__1403
11bc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
11bc8     08 4E 05 F1 | 	add	fp, #8
11bcc     A7 1E 02 FB | 	rdlong	local01, fp
11bd0     08 4E 85 F1 | 	sub	fp, #8
11bd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
11bd8     14 4E 05 A1 |  if_e	add	fp, #20
11bdc     A7 24 02 AB |  if_e	rdlong	local04, fp
11be0     14 4E 85 A1 |  if_e	sub	fp, #20
11be4     12 23 02 A6 |  if_e	mov	local03, local04
11be8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11bec     44 00 90 5D |  if_ne	jmp	#LR__1404
11bf0     00 1E 06 F6 | 	mov	local01, #0
11bf4     A7 12 02 FB | 	rdlong	arg01, fp
11bf8     09 13 52 F6 | 	abs	arg01, arg01 wc
11bfc     1F 26 C6 C9 |  if_b	decod	local05, #31
11c00     00 26 06 36 |  if_ae	mov	local05, #0
11c04     68 CE B0 FD | 	call	#__system___float_fromuns
11c08     13 FB 61 F5 | 	xor	result1, local05
11c0c     FD 12 02 F6 | 	mov	arg01, result1
11c10     0C 4E 05 F1 | 	add	fp, #12
11c14     A7 14 02 FB | 	rdlong	arg02, fp
11c18     0C 4E 85 F1 | 	sub	fp, #12
11c1c     01 16 66 F6 | 	neg	arg03, #1
11c20     84 D6 B0 FD | 	call	#__system___float_cmp
11c24     00 FA 55 F2 | 	cmps	result1, #0 wc
11c28     00 1E 26 36 |  if_ae	not	local01, #0
11c2c     A7 1E 62 FC | 	wrlong	local01, fp
11c30     8C 02 90 FD | 	jmp	#LR__1413
11c34                 | LR__1404
11c34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
11c34     08 4E 05 F1 | 	add	fp, #8
11c38     A7 1E 02 FB | 	rdlong	local01, fp
11c3c     08 4E 85 F1 | 	sub	fp, #8
11c40     1C 1E 0E F2 | 	cmp	local01, #28 wz
11c44     14 4E 05 A1 |  if_e	add	fp, #20
11c48     A7 24 02 AB |  if_e	rdlong	local04, fp
11c4c     14 4E 85 A1 |  if_e	sub	fp, #20
11c50     12 23 02 A6 |  if_e	mov	local03, local04
11c54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11c58     24 00 90 5D |  if_ne	jmp	#LR__1405
11c5c     00 1E 06 F6 | 	mov	local01, #0
11c60     A7 20 02 FB | 	rdlong	local02, fp
11c64     0C 4E 05 F1 | 	add	fp, #12
11c68     A7 22 02 FB | 	rdlong	local03, fp
11c6c     0C 4E 85 F1 | 	sub	fp, #12
11c70     11 21 52 F2 | 	cmps	local02, local03 wc
11c74     01 1E 66 36 |  if_ae	neg	local01, #1
11c78     A7 1E 62 FC | 	wrlong	local01, fp
11c7c     40 02 90 FD | 	jmp	#LR__1413
11c80                 | LR__1405
11c80                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
11c80     08 4E 05 F1 | 	add	fp, #8
11c84     A7 1E 02 FB | 	rdlong	local01, fp
11c88     08 4E 85 F1 | 	sub	fp, #8
11c8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11c90     14 4E 05 A1 |  if_e	add	fp, #20
11c94     A7 24 02 AB |  if_e	rdlong	local04, fp
11c98     14 4E 85 A1 |  if_e	sub	fp, #20
11c9c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11ca0     24 00 90 5D |  if_ne	jmp	#LR__1406
11ca4     00 1E 06 F6 | 	mov	local01, #0
11ca8     A7 20 02 FB | 	rdlong	local02, fp
11cac     0C 4E 05 F1 | 	add	fp, #12
11cb0     A7 22 02 FB | 	rdlong	local03, fp
11cb4     0C 4E 85 F1 | 	sub	fp, #12
11cb8     11 21 52 F2 | 	cmps	local02, local03 wc
11cbc     01 1E 66 36 |  if_ae	neg	local01, #1
11cc0     A7 1E 62 FC | 	wrlong	local01, fp
11cc4     F8 01 90 FD | 	jmp	#LR__1413
11cc8                 | LR__1406
11cc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
11cc8     08 4E 05 F1 | 	add	fp, #8
11ccc     A7 1E 02 FB | 	rdlong	local01, fp
11cd0     08 4E 85 F1 | 	sub	fp, #8
11cd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
11cd8     14 4E 05 A1 |  if_e	add	fp, #20
11cdc     A7 22 02 AB |  if_e	rdlong	local03, fp
11ce0     14 4E 85 A1 |  if_e	sub	fp, #20
11ce4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ce8     34 00 90 5D |  if_ne	jmp	#LR__1407
11cec     00 1E 06 F6 | 	mov	local01, #0
11cf0     A7 12 02 FB | 	rdlong	arg01, fp
11cf4     78 CD B0 FD | 	call	#__system___float_fromuns
11cf8     FD 12 02 F6 | 	mov	arg01, result1
11cfc     0C 4E 05 F1 | 	add	fp, #12
11d00     A7 14 02 FB | 	rdlong	arg02, fp
11d04     0C 4E 85 F1 | 	sub	fp, #12
11d08     01 16 66 F6 | 	neg	arg03, #1
11d0c     98 D5 B0 FD | 	call	#__system___float_cmp
11d10     00 FA 55 F2 | 	cmps	result1, #0 wc
11d14     00 1E 26 36 |  if_ae	not	local01, #0
11d18     A7 1E 62 FC | 	wrlong	local01, fp
11d1c     A0 01 90 FD | 	jmp	#LR__1413
11d20                 | LR__1407
11d20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
11d20     08 4E 05 F1 | 	add	fp, #8
11d24     A7 1E 02 FB | 	rdlong	local01, fp
11d28     08 4E 85 F1 | 	sub	fp, #8
11d2c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11d30     14 4E 05 A1 |  if_e	add	fp, #20
11d34     A7 22 02 AB |  if_e	rdlong	local03, fp
11d38     14 4E 85 A1 |  if_e	sub	fp, #20
11d3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11d40     24 00 90 5D |  if_ne	jmp	#LR__1408
11d44     00 1E 06 F6 | 	mov	local01, #0
11d48     A7 20 02 FB | 	rdlong	local02, fp
11d4c     0C 4E 05 F1 | 	add	fp, #12
11d50     A7 22 02 FB | 	rdlong	local03, fp
11d54     0C 4E 85 F1 | 	sub	fp, #12
11d58     11 21 52 F2 | 	cmps	local02, local03 wc
11d5c     01 1E 66 36 |  if_ae	neg	local01, #1
11d60     A7 1E 62 FC | 	wrlong	local01, fp
11d64     58 01 90 FD | 	jmp	#LR__1413
11d68                 | LR__1408
11d68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
11d68     08 4E 05 F1 | 	add	fp, #8
11d6c     A7 1E 02 FB | 	rdlong	local01, fp
11d70     08 4E 85 F1 | 	sub	fp, #8
11d74     1D 1E 0E F2 | 	cmp	local01, #29 wz
11d78     14 4E 05 A1 |  if_e	add	fp, #20
11d7c     A7 22 02 AB |  if_e	rdlong	local03, fp
11d80     14 4E 85 A1 |  if_e	sub	fp, #20
11d84     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11d88     24 00 90 5D |  if_ne	jmp	#LR__1409
11d8c     00 1E 06 F6 | 	mov	local01, #0
11d90     A7 20 02 FB | 	rdlong	local02, fp
11d94     0C 4E 05 F1 | 	add	fp, #12
11d98     A7 22 02 FB | 	rdlong	local03, fp
11d9c     0C 4E 85 F1 | 	sub	fp, #12
11da0     11 21 12 F2 | 	cmp	local02, local03 wc
11da4     01 1E 66 36 |  if_ae	neg	local01, #1
11da8     A7 1E 62 FC | 	wrlong	local01, fp
11dac     10 01 90 FD | 	jmp	#LR__1413
11db0                 | LR__1409
11db0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
11db0     08 4E 05 F1 | 	add	fp, #8
11db4     A7 1E 02 FB | 	rdlong	local01, fp
11db8     08 4E 85 F1 | 	sub	fp, #8
11dbc     2B 1E 0E F2 | 	cmp	local01, #43 wz
11dc0     14 4E 05 A1 |  if_e	add	fp, #20
11dc4     A7 22 02 AB |  if_e	rdlong	local03, fp
11dc8     14 4E 85 A1 |  if_e	sub	fp, #20
11dcc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11dd0     30 00 90 5D |  if_ne	jmp	#LR__1410
11dd4     00 1E 06 F6 | 	mov	local01, #0
11dd8     A7 12 02 FB | 	rdlong	arg01, fp
11ddc     8C C2 BF FD | 	call	#_convertstring
11de0     FD 12 02 F6 | 	mov	arg01, result1
11de4     0C 4E 05 F1 | 	add	fp, #12
11de8     A7 14 02 FB | 	rdlong	arg02, fp
11dec     0C 4E 85 F1 | 	sub	fp, #12
11df0     2C A5 B0 FD | 	call	#__system___string_cmp
11df4     00 FA 55 F2 | 	cmps	result1, #0 wc
11df8     00 1E 26 36 |  if_ae	not	local01, #0
11dfc     A7 1E 62 FC | 	wrlong	local01, fp
11e00     BC 00 90 FD | 	jmp	#LR__1413
11e04                 | LR__1410
11e04                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
11e04     08 4E 05 F1 | 	add	fp, #8
11e08     A7 1E 02 FB | 	rdlong	local01, fp
11e0c     08 4E 85 F1 | 	sub	fp, #8
11e10     1F 1E 0E F2 | 	cmp	local01, #31 wz
11e14     14 4E 05 A1 |  if_e	add	fp, #20
11e18     A7 22 02 AB |  if_e	rdlong	local03, fp
11e1c     14 4E 85 A1 |  if_e	sub	fp, #20
11e20     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11e24     34 00 90 5D |  if_ne	jmp	#LR__1411
11e28     00 1E 06 F6 | 	mov	local01, #0
11e2c     A7 20 02 FB | 	rdlong	local02, fp
11e30     0C 4E 05 F1 | 	add	fp, #12
11e34     A7 12 02 FB | 	rdlong	arg01, fp
11e38     0C 4E 85 F1 | 	sub	fp, #12
11e3c     2C C2 BF FD | 	call	#_convertstring
11e40     FD 14 02 F6 | 	mov	arg02, result1
11e44     10 13 02 F6 | 	mov	arg01, local02
11e48     D4 A4 B0 FD | 	call	#__system___string_cmp
11e4c     00 FA 55 F2 | 	cmps	result1, #0 wc
11e50     00 1E 26 36 |  if_ae	not	local01, #0
11e54     A7 1E 62 FC | 	wrlong	local01, fp
11e58     64 00 90 FD | 	jmp	#LR__1413
11e5c                 | LR__1411
11e5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
11e5c     08 4E 05 F1 | 	add	fp, #8
11e60     A7 1E 02 FB | 	rdlong	local01, fp
11e64     08 4E 85 F1 | 	sub	fp, #8
11e68     2B 1E 0E F2 | 	cmp	local01, #43 wz
11e6c     14 4E 05 A1 |  if_e	add	fp, #20
11e70     A7 22 02 AB |  if_e	rdlong	local03, fp
11e74     14 4E 85 A1 |  if_e	sub	fp, #20
11e78     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11e7c     3C 00 90 5D |  if_ne	jmp	#LR__1412
11e80     00 1E 06 F6 | 	mov	local01, #0
11e84     A7 12 02 FB | 	rdlong	arg01, fp
11e88     E0 C1 BF FD | 	call	#_convertstring
11e8c     FD 20 02 F6 | 	mov	local02, result1
11e90     0C 4E 05 F1 | 	add	fp, #12
11e94     A7 12 02 FB | 	rdlong	arg01, fp
11e98     0C 4E 85 F1 | 	sub	fp, #12
11e9c     CC C1 BF FD | 	call	#_convertstring
11ea0     FD 14 02 F6 | 	mov	arg02, result1
11ea4     10 13 02 F6 | 	mov	arg01, local02
11ea8     74 A4 B0 FD | 	call	#__system___string_cmp
11eac     00 FA 55 F2 | 	cmps	result1, #0 wc
11eb0     00 1E 26 36 |  if_ae	not	local01, #0
11eb4     A7 1E 62 FC | 	wrlong	local01, fp
11eb8     04 00 90 FD | 	jmp	#LR__1413
11ebc                 | LR__1412
11ebc     A7 00 68 FC | 	wrlong	#0, fp
11ec0                 | LR__1413
11ec0     08 4E 05 F1 | 	add	fp, #8
11ec4     A7 38 68 FC | 	wrlong	#28, fp
11ec8     08 4E 85 F1 | 	sub	fp, #8
11ecc     A7 12 02 F6 | 	mov	arg01, fp
11ed0     8C 82 BF FD | 	call	#_push
11ed4     A7 F0 03 F6 | 	mov	ptra, fp
11ed8     B2 00 A0 FD | 	call	#popregs_
11edc                 | _do_ge_ret
11edc     2D 00 64 FD | 	ret
11ee0                 | 
11ee0                 | ' 
11ee0                 | ' sub do_le
11ee0                 | _do_le
11ee0     05 4A 05 F6 | 	mov	COUNT_, #5
11ee4     A8 00 A0 FD | 	call	#pushregs_
11ee8     18 F0 07 F1 | 	add	ptra, #24
11eec     D8 81 BF FD | 	call	#_pop
11ef0     FD 1E 02 F6 | 	mov	local01, result1
11ef4     FE 20 02 F6 | 	mov	local02, result2
11ef8     FF 22 02 F6 | 	mov	local03, result3
11efc     0C 4E 05 F1 | 	add	fp, #12
11f00     A7 1E 62 FC | 	wrlong	local01, fp
11f04     04 4E 05 F1 | 	add	fp, #4
11f08     A7 20 62 FC | 	wrlong	local02, fp
11f0c     04 4E 05 F1 | 	add	fp, #4
11f10     A7 22 62 FC | 	wrlong	local03, fp
11f14     14 4E 85 F1 | 	sub	fp, #20
11f18     AC 81 BF FD | 	call	#_pop
11f1c     FF 22 02 F6 | 	mov	local03, result3
11f20     A7 FA 61 FC | 	wrlong	result1, fp
11f24     04 4E 05 F1 | 	add	fp, #4
11f28     A7 FC 61 FC | 	wrlong	result2, fp
11f2c     04 4E 05 F1 | 	add	fp, #4
11f30     A7 22 62 FC | 	wrlong	local03, fp
11f34                 | ' t2=pop()
11f34                 | ' t1=pop()
11f34                 | ' 
11f34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
11f34     08 4E 85 F1 | 	sub	fp, #8
11f38     1F 22 0E F2 | 	cmp	local03, #31 wz
11f3c     14 4E 05 A1 |  if_e	add	fp, #20
11f40     A7 24 02 AB |  if_e	rdlong	local04, fp
11f44     14 4E 85 A1 |  if_e	sub	fp, #20
11f48     12 23 02 A6 |  if_e	mov	local03, local04
11f4c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11f50     28 00 90 5D |  if_ne	jmp	#LR__1420
11f54     00 1E 06 F6 | 	mov	local01, #0
11f58     A7 12 02 FB | 	rdlong	arg01, fp
11f5c     0C 4E 05 F1 | 	add	fp, #12
11f60     A7 14 02 FB | 	rdlong	arg02, fp
11f64     0C 4E 85 F1 | 	sub	fp, #12
11f68     B4 A3 B0 FD | 	call	#__system___string_cmp
11f6c     01 FA 55 F2 | 	cmps	result1, #1 wc
11f70     00 1E 26 C6 |  if_b	not	local01, #0
11f74     A7 1E 62 FC | 	wrlong	local01, fp
11f78     1C 04 90 FD | 	jmp	#LR__1433
11f7c                 | LR__1420
11f7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
11f7c     08 4E 05 F1 | 	add	fp, #8
11f80     A7 1E 02 FB | 	rdlong	local01, fp
11f84     08 4E 85 F1 | 	sub	fp, #8
11f88     1E 1E 0E F2 | 	cmp	local01, #30 wz
11f8c     14 4E 05 A1 |  if_e	add	fp, #20
11f90     A7 24 02 AB |  if_e	rdlong	local04, fp
11f94     14 4E 85 A1 |  if_e	sub	fp, #20
11f98     12 23 02 A6 |  if_e	mov	local03, local04
11f9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11fa0     2C 00 90 5D |  if_ne	jmp	#LR__1421
11fa4     00 1E 06 F6 | 	mov	local01, #0
11fa8     A7 12 02 FB | 	rdlong	arg01, fp
11fac     0C 4E 05 F1 | 	add	fp, #12
11fb0     A7 14 02 FB | 	rdlong	arg02, fp
11fb4     0C 4E 85 F1 | 	sub	fp, #12
11fb8     01 16 06 F6 | 	mov	arg03, #1
11fbc     E8 D2 B0 FD | 	call	#__system___float_cmp
11fc0     01 FA 55 F2 | 	cmps	result1, #1 wc
11fc4     00 1E 26 C6 |  if_b	not	local01, #0
11fc8     A7 1E 62 FC | 	wrlong	local01, fp
11fcc     C8 03 90 FD | 	jmp	#LR__1433
11fd0                 | LR__1421
11fd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
11fd0     08 4E 05 F1 | 	add	fp, #8
11fd4     A7 1E 02 FB | 	rdlong	local01, fp
11fd8     08 4E 85 F1 | 	sub	fp, #8
11fdc     1E 1E 0E F2 | 	cmp	local01, #30 wz
11fe0     14 4E 05 A1 |  if_e	add	fp, #20
11fe4     A7 24 02 AB |  if_e	rdlong	local04, fp
11fe8     14 4E 85 A1 |  if_e	sub	fp, #20
11fec     12 23 02 A6 |  if_e	mov	local03, local04
11ff0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11ff4     48 00 90 5D |  if_ne	jmp	#LR__1422
11ff8     00 1E 06 F6 | 	mov	local01, #0
11ffc     A7 20 02 FB | 	rdlong	local02, fp
12000     0C 4E 05 F1 | 	add	fp, #12
12004     A7 12 02 FB | 	rdlong	arg01, fp
12008     0C 4E 85 F1 | 	sub	fp, #12
1200c     09 13 52 F6 | 	abs	arg01, arg01 wc
12010     1F 26 C6 C9 |  if_b	decod	local05, #31
12014     00 26 06 36 |  if_ae	mov	local05, #0
12018     54 CA B0 FD | 	call	#__system___float_fromuns
1201c     13 FB 61 F5 | 	xor	result1, local05
12020     FD 14 02 F6 | 	mov	arg02, result1
12024     10 13 02 F6 | 	mov	arg01, local02
12028     01 16 06 F6 | 	mov	arg03, #1
1202c     78 D2 B0 FD | 	call	#__system___float_cmp
12030     01 FA 55 F2 | 	cmps	result1, #1 wc
12034     00 1E 26 C6 |  if_b	not	local01, #0
12038     A7 1E 62 FC | 	wrlong	local01, fp
1203c     58 03 90 FD | 	jmp	#LR__1433
12040                 | LR__1422
12040                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12040     08 4E 05 F1 | 	add	fp, #8
12044     A7 1E 02 FB | 	rdlong	local01, fp
12048     08 4E 85 F1 | 	sub	fp, #8
1204c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12050     14 4E 05 A1 |  if_e	add	fp, #20
12054     A7 24 02 AB |  if_e	rdlong	local04, fp
12058     14 4E 85 A1 |  if_e	sub	fp, #20
1205c     12 23 02 A6 |  if_e	mov	local03, local04
12060     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12064     38 00 90 5D |  if_ne	jmp	#LR__1423
12068     00 1E 06 F6 | 	mov	local01, #0
1206c     A7 20 02 FB | 	rdlong	local02, fp
12070     0C 4E 05 F1 | 	add	fp, #12
12074     A7 12 02 FB | 	rdlong	arg01, fp
12078     0C 4E 85 F1 | 	sub	fp, #12
1207c     F0 C9 B0 FD | 	call	#__system___float_fromuns
12080     FD 14 02 F6 | 	mov	arg02, result1
12084     10 13 02 F6 | 	mov	arg01, local02
12088     01 16 06 F6 | 	mov	arg03, #1
1208c     18 D2 B0 FD | 	call	#__system___float_cmp
12090     01 FA 55 F2 | 	cmps	result1, #1 wc
12094     00 1E 26 C6 |  if_b	not	local01, #0
12098     A7 1E 62 FC | 	wrlong	local01, fp
1209c     F8 02 90 FD | 	jmp	#LR__1433
120a0                 | LR__1423
120a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
120a0     08 4E 05 F1 | 	add	fp, #8
120a4     A7 1E 02 FB | 	rdlong	local01, fp
120a8     08 4E 85 F1 | 	sub	fp, #8
120ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
120b0     14 4E 05 A1 |  if_e	add	fp, #20
120b4     A7 24 02 AB |  if_e	rdlong	local04, fp
120b8     14 4E 85 A1 |  if_e	sub	fp, #20
120bc     12 23 02 A6 |  if_e	mov	local03, local04
120c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
120c4     44 00 90 5D |  if_ne	jmp	#LR__1424
120c8     00 1E 06 F6 | 	mov	local01, #0
120cc     A7 12 02 FB | 	rdlong	arg01, fp
120d0     09 13 52 F6 | 	abs	arg01, arg01 wc
120d4     1F 26 C6 C9 |  if_b	decod	local05, #31
120d8     00 26 06 36 |  if_ae	mov	local05, #0
120dc     90 C9 B0 FD | 	call	#__system___float_fromuns
120e0     13 FB 61 F5 | 	xor	result1, local05
120e4     FD 12 02 F6 | 	mov	arg01, result1
120e8     0C 4E 05 F1 | 	add	fp, #12
120ec     A7 14 02 FB | 	rdlong	arg02, fp
120f0     0C 4E 85 F1 | 	sub	fp, #12
120f4     01 16 06 F6 | 	mov	arg03, #1
120f8     AC D1 B0 FD | 	call	#__system___float_cmp
120fc     01 FA 55 F2 | 	cmps	result1, #1 wc
12100     00 1E 26 C6 |  if_b	not	local01, #0
12104     A7 1E 62 FC | 	wrlong	local01, fp
12108     8C 02 90 FD | 	jmp	#LR__1433
1210c                 | LR__1424
1210c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1210c     08 4E 05 F1 | 	add	fp, #8
12110     A7 1E 02 FB | 	rdlong	local01, fp
12114     08 4E 85 F1 | 	sub	fp, #8
12118     1C 1E 0E F2 | 	cmp	local01, #28 wz
1211c     14 4E 05 A1 |  if_e	add	fp, #20
12120     A7 24 02 AB |  if_e	rdlong	local04, fp
12124     14 4E 85 A1 |  if_e	sub	fp, #20
12128     12 23 02 A6 |  if_e	mov	local03, local04
1212c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12130     24 00 90 5D |  if_ne	jmp	#LR__1425
12134     00 1E 06 F6 | 	mov	local01, #0
12138     A7 20 02 FB | 	rdlong	local02, fp
1213c     0C 4E 05 F1 | 	add	fp, #12
12140     A7 22 02 FB | 	rdlong	local03, fp
12144     0C 4E 85 F1 | 	sub	fp, #12
12148     11 21 5A F2 | 	cmps	local02, local03 wcz
1214c     01 1E 66 E6 |  if_be	neg	local01, #1
12150     A7 1E 62 FC | 	wrlong	local01, fp
12154     40 02 90 FD | 	jmp	#LR__1433
12158                 | LR__1425
12158                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12158     08 4E 05 F1 | 	add	fp, #8
1215c     A7 1E 02 FB | 	rdlong	local01, fp
12160     08 4E 85 F1 | 	sub	fp, #8
12164     1C 1E 0E F2 | 	cmp	local01, #28 wz
12168     14 4E 05 A1 |  if_e	add	fp, #20
1216c     A7 24 02 AB |  if_e	rdlong	local04, fp
12170     14 4E 85 A1 |  if_e	sub	fp, #20
12174     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12178     24 00 90 5D |  if_ne	jmp	#LR__1426
1217c     00 1E 06 F6 | 	mov	local01, #0
12180     A7 20 02 FB | 	rdlong	local02, fp
12184     0C 4E 05 F1 | 	add	fp, #12
12188     A7 22 02 FB | 	rdlong	local03, fp
1218c     0C 4E 85 F1 | 	sub	fp, #12
12190     11 21 5A F2 | 	cmps	local02, local03 wcz
12194     01 1E 66 E6 |  if_be	neg	local01, #1
12198     A7 1E 62 FC | 	wrlong	local01, fp
1219c     F8 01 90 FD | 	jmp	#LR__1433
121a0                 | LR__1426
121a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
121a0     08 4E 05 F1 | 	add	fp, #8
121a4     A7 1E 02 FB | 	rdlong	local01, fp
121a8     08 4E 85 F1 | 	sub	fp, #8
121ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
121b0     14 4E 05 A1 |  if_e	add	fp, #20
121b4     A7 22 02 AB |  if_e	rdlong	local03, fp
121b8     14 4E 85 A1 |  if_e	sub	fp, #20
121bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
121c0     34 00 90 5D |  if_ne	jmp	#LR__1427
121c4     00 1E 06 F6 | 	mov	local01, #0
121c8     A7 12 02 FB | 	rdlong	arg01, fp
121cc     A0 C8 B0 FD | 	call	#__system___float_fromuns
121d0     FD 12 02 F6 | 	mov	arg01, result1
121d4     0C 4E 05 F1 | 	add	fp, #12
121d8     A7 14 02 FB | 	rdlong	arg02, fp
121dc     0C 4E 85 F1 | 	sub	fp, #12
121e0     01 16 06 F6 | 	mov	arg03, #1
121e4     C0 D0 B0 FD | 	call	#__system___float_cmp
121e8     01 FA 55 F2 | 	cmps	result1, #1 wc
121ec     00 1E 26 C6 |  if_b	not	local01, #0
121f0     A7 1E 62 FC | 	wrlong	local01, fp
121f4     A0 01 90 FD | 	jmp	#LR__1433
121f8                 | LR__1427
121f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
121f8     08 4E 05 F1 | 	add	fp, #8
121fc     A7 1E 02 FB | 	rdlong	local01, fp
12200     08 4E 85 F1 | 	sub	fp, #8
12204     1D 1E 0E F2 | 	cmp	local01, #29 wz
12208     14 4E 05 A1 |  if_e	add	fp, #20
1220c     A7 22 02 AB |  if_e	rdlong	local03, fp
12210     14 4E 85 A1 |  if_e	sub	fp, #20
12214     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12218     24 00 90 5D |  if_ne	jmp	#LR__1428
1221c     00 1E 06 F6 | 	mov	local01, #0
12220     A7 20 02 FB | 	rdlong	local02, fp
12224     0C 4E 05 F1 | 	add	fp, #12
12228     A7 22 02 FB | 	rdlong	local03, fp
1222c     0C 4E 85 F1 | 	sub	fp, #12
12230     11 21 5A F2 | 	cmps	local02, local03 wcz
12234     01 1E 66 E6 |  if_be	neg	local01, #1
12238     A7 1E 62 FC | 	wrlong	local01, fp
1223c     58 01 90 FD | 	jmp	#LR__1433
12240                 | LR__1428
12240                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12240     08 4E 05 F1 | 	add	fp, #8
12244     A7 1E 02 FB | 	rdlong	local01, fp
12248     08 4E 85 F1 | 	sub	fp, #8
1224c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12250     14 4E 05 A1 |  if_e	add	fp, #20
12254     A7 22 02 AB |  if_e	rdlong	local03, fp
12258     14 4E 85 A1 |  if_e	sub	fp, #20
1225c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12260     24 00 90 5D |  if_ne	jmp	#LR__1429
12264     00 1E 06 F6 | 	mov	local01, #0
12268     A7 20 02 FB | 	rdlong	local02, fp
1226c     0C 4E 05 F1 | 	add	fp, #12
12270     A7 22 02 FB | 	rdlong	local03, fp
12274     0C 4E 85 F1 | 	sub	fp, #12
12278     11 21 1A F2 | 	cmp	local02, local03 wcz
1227c     01 1E 66 E6 |  if_be	neg	local01, #1
12280     A7 1E 62 FC | 	wrlong	local01, fp
12284     10 01 90 FD | 	jmp	#LR__1433
12288                 | LR__1429
12288                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12288     08 4E 05 F1 | 	add	fp, #8
1228c     A7 1E 02 FB | 	rdlong	local01, fp
12290     08 4E 85 F1 | 	sub	fp, #8
12294     2B 1E 0E F2 | 	cmp	local01, #43 wz
12298     14 4E 05 A1 |  if_e	add	fp, #20
1229c     A7 22 02 AB |  if_e	rdlong	local03, fp
122a0     14 4E 85 A1 |  if_e	sub	fp, #20
122a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
122a8     30 00 90 5D |  if_ne	jmp	#LR__1430
122ac     00 1E 06 F6 | 	mov	local01, #0
122b0     A7 12 02 FB | 	rdlong	arg01, fp
122b4     B4 BD BF FD | 	call	#_convertstring
122b8     FD 12 02 F6 | 	mov	arg01, result1
122bc     0C 4E 05 F1 | 	add	fp, #12
122c0     A7 14 02 FB | 	rdlong	arg02, fp
122c4     0C 4E 85 F1 | 	sub	fp, #12
122c8     54 A0 B0 FD | 	call	#__system___string_cmp
122cc     01 FA 55 F2 | 	cmps	result1, #1 wc
122d0     00 1E 26 C6 |  if_b	not	local01, #0
122d4     A7 1E 62 FC | 	wrlong	local01, fp
122d8     BC 00 90 FD | 	jmp	#LR__1433
122dc                 | LR__1430
122dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
122dc     08 4E 05 F1 | 	add	fp, #8
122e0     A7 1E 02 FB | 	rdlong	local01, fp
122e4     08 4E 85 F1 | 	sub	fp, #8
122e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
122ec     14 4E 05 A1 |  if_e	add	fp, #20
122f0     A7 22 02 AB |  if_e	rdlong	local03, fp
122f4     14 4E 85 A1 |  if_e	sub	fp, #20
122f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
122fc     34 00 90 5D |  if_ne	jmp	#LR__1431
12300     00 1E 06 F6 | 	mov	local01, #0
12304     A7 20 02 FB | 	rdlong	local02, fp
12308     0C 4E 05 F1 | 	add	fp, #12
1230c     A7 12 02 FB | 	rdlong	arg01, fp
12310     0C 4E 85 F1 | 	sub	fp, #12
12314     54 BD BF FD | 	call	#_convertstring
12318     FD 14 02 F6 | 	mov	arg02, result1
1231c     10 13 02 F6 | 	mov	arg01, local02
12320     FC 9F B0 FD | 	call	#__system___string_cmp
12324     01 FA 55 F2 | 	cmps	result1, #1 wc
12328     00 1E 26 C6 |  if_b	not	local01, #0
1232c     A7 1E 62 FC | 	wrlong	local01, fp
12330     64 00 90 FD | 	jmp	#LR__1433
12334                 | LR__1431
12334                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
12334     08 4E 05 F1 | 	add	fp, #8
12338     A7 1E 02 FB | 	rdlong	local01, fp
1233c     08 4E 85 F1 | 	sub	fp, #8
12340     2B 1E 0E F2 | 	cmp	local01, #43 wz
12344     14 4E 05 A1 |  if_e	add	fp, #20
12348     A7 22 02 AB |  if_e	rdlong	local03, fp
1234c     14 4E 85 A1 |  if_e	sub	fp, #20
12350     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12354     3C 00 90 5D |  if_ne	jmp	#LR__1432
12358     00 1E 06 F6 | 	mov	local01, #0
1235c     A7 12 02 FB | 	rdlong	arg01, fp
12360     08 BD BF FD | 	call	#_convertstring
12364     FD 20 02 F6 | 	mov	local02, result1
12368     0C 4E 05 F1 | 	add	fp, #12
1236c     A7 12 02 FB | 	rdlong	arg01, fp
12370     0C 4E 85 F1 | 	sub	fp, #12
12374     F4 BC BF FD | 	call	#_convertstring
12378     FD 14 02 F6 | 	mov	arg02, result1
1237c     10 13 02 F6 | 	mov	arg01, local02
12380     9C 9F B0 FD | 	call	#__system___string_cmp
12384     01 FA 55 F2 | 	cmps	result1, #1 wc
12388     00 1E 26 C6 |  if_b	not	local01, #0
1238c     A7 1E 62 FC | 	wrlong	local01, fp
12390     04 00 90 FD | 	jmp	#LR__1433
12394                 | LR__1432
12394     A7 00 68 FC | 	wrlong	#0, fp
12398                 | LR__1433
12398     08 4E 05 F1 | 	add	fp, #8
1239c     A7 38 68 FC | 	wrlong	#28, fp
123a0     08 4E 85 F1 | 	sub	fp, #8
123a4     A7 12 02 F6 | 	mov	arg01, fp
123a8     B4 7D BF FD | 	call	#_push
123ac     A7 F0 03 F6 | 	mov	ptra, fp
123b0     B2 00 A0 FD | 	call	#popregs_
123b4                 | _do_le_ret
123b4     2D 00 64 FD | 	ret
123b8                 | 
123b8                 | ' 
123b8                 | ' 
123b8                 | ' sub do_ne
123b8                 | _do_ne
123b8     05 4A 05 F6 | 	mov	COUNT_, #5
123bc     A8 00 A0 FD | 	call	#pushregs_
123c0     18 F0 07 F1 | 	add	ptra, #24
123c4     00 7D BF FD | 	call	#_pop
123c8     FD 1E 02 F6 | 	mov	local01, result1
123cc     FE 20 02 F6 | 	mov	local02, result2
123d0     FF 22 02 F6 | 	mov	local03, result3
123d4     0C 4E 05 F1 | 	add	fp, #12
123d8     A7 1E 62 FC | 	wrlong	local01, fp
123dc     04 4E 05 F1 | 	add	fp, #4
123e0     A7 20 62 FC | 	wrlong	local02, fp
123e4     04 4E 05 F1 | 	add	fp, #4
123e8     A7 22 62 FC | 	wrlong	local03, fp
123ec     14 4E 85 F1 | 	sub	fp, #20
123f0     D4 7C BF FD | 	call	#_pop
123f4     FF 22 02 F6 | 	mov	local03, result3
123f8     A7 FA 61 FC | 	wrlong	result1, fp
123fc     04 4E 05 F1 | 	add	fp, #4
12400     A7 FC 61 FC | 	wrlong	result2, fp
12404     04 4E 05 F1 | 	add	fp, #4
12408     A7 22 62 FC | 	wrlong	local03, fp
1240c                 | ' t2=pop()
1240c                 | ' t1=pop()
1240c                 | ' 
1240c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1240c     08 4E 85 F1 | 	sub	fp, #8
12410     1F 22 0E F2 | 	cmp	local03, #31 wz
12414     14 4E 05 A1 |  if_e	add	fp, #20
12418     A7 24 02 AB |  if_e	rdlong	local04, fp
1241c     14 4E 85 A1 |  if_e	sub	fp, #20
12420     12 23 02 A6 |  if_e	mov	local03, local04
12424     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12428     28 00 90 5D |  if_ne	jmp	#LR__1440
1242c     00 1E 06 F6 | 	mov	local01, #0
12430     A7 12 02 FB | 	rdlong	arg01, fp
12434     0C 4E 05 F1 | 	add	fp, #12
12438     A7 14 02 FB | 	rdlong	arg02, fp
1243c     0C 4E 85 F1 | 	sub	fp, #12
12440     DC 9E B0 FD | 	call	#__system___string_cmp
12444     00 FA 0D F2 | 	cmp	result1, #0 wz
12448     00 1E 26 56 |  if_ne	not	local01, #0
1244c     A7 1E 62 FC | 	wrlong	local01, fp
12450     1C 04 90 FD | 	jmp	#LR__1453
12454                 | LR__1440
12454                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
12454     08 4E 05 F1 | 	add	fp, #8
12458     A7 1E 02 FB | 	rdlong	local01, fp
1245c     08 4E 85 F1 | 	sub	fp, #8
12460     1E 1E 0E F2 | 	cmp	local01, #30 wz
12464     14 4E 05 A1 |  if_e	add	fp, #20
12468     A7 24 02 AB |  if_e	rdlong	local04, fp
1246c     14 4E 85 A1 |  if_e	sub	fp, #20
12470     12 23 02 A6 |  if_e	mov	local03, local04
12474     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12478     2C 00 90 5D |  if_ne	jmp	#LR__1441
1247c     00 1E 06 F6 | 	mov	local01, #0
12480     A7 12 02 FB | 	rdlong	arg01, fp
12484     0C 4E 05 F1 | 	add	fp, #12
12488     A7 14 02 FB | 	rdlong	arg02, fp
1248c     0C 4E 85 F1 | 	sub	fp, #12
12490     01 16 06 F6 | 	mov	arg03, #1
12494     10 CE B0 FD | 	call	#__system___float_cmp
12498     00 FA 0D F2 | 	cmp	result1, #0 wz
1249c     00 1E 26 56 |  if_ne	not	local01, #0
124a0     A7 1E 62 FC | 	wrlong	local01, fp
124a4     C8 03 90 FD | 	jmp	#LR__1453
124a8                 | LR__1441
124a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
124a8     08 4E 05 F1 | 	add	fp, #8
124ac     A7 1E 02 FB | 	rdlong	local01, fp
124b0     08 4E 85 F1 | 	sub	fp, #8
124b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
124b8     14 4E 05 A1 |  if_e	add	fp, #20
124bc     A7 24 02 AB |  if_e	rdlong	local04, fp
124c0     14 4E 85 A1 |  if_e	sub	fp, #20
124c4     12 23 02 A6 |  if_e	mov	local03, local04
124c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
124cc     48 00 90 5D |  if_ne	jmp	#LR__1442
124d0     00 1E 06 F6 | 	mov	local01, #0
124d4     A7 20 02 FB | 	rdlong	local02, fp
124d8     0C 4E 05 F1 | 	add	fp, #12
124dc     A7 12 02 FB | 	rdlong	arg01, fp
124e0     0C 4E 85 F1 | 	sub	fp, #12
124e4     09 13 52 F6 | 	abs	arg01, arg01 wc
124e8     1F 26 C6 C9 |  if_b	decod	local05, #31
124ec     00 26 06 36 |  if_ae	mov	local05, #0
124f0     7C C5 B0 FD | 	call	#__system___float_fromuns
124f4     13 FB 61 F5 | 	xor	result1, local05
124f8     FD 14 02 F6 | 	mov	arg02, result1
124fc     10 13 02 F6 | 	mov	arg01, local02
12500     01 16 06 F6 | 	mov	arg03, #1
12504     A0 CD B0 FD | 	call	#__system___float_cmp
12508     00 FA 0D F2 | 	cmp	result1, #0 wz
1250c     00 1E 26 56 |  if_ne	not	local01, #0
12510     A7 1E 62 FC | 	wrlong	local01, fp
12514     58 03 90 FD | 	jmp	#LR__1453
12518                 | LR__1442
12518                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
12518     08 4E 05 F1 | 	add	fp, #8
1251c     A7 1E 02 FB | 	rdlong	local01, fp
12520     08 4E 85 F1 | 	sub	fp, #8
12524     1E 1E 0E F2 | 	cmp	local01, #30 wz
12528     14 4E 05 A1 |  if_e	add	fp, #20
1252c     A7 24 02 AB |  if_e	rdlong	local04, fp
12530     14 4E 85 A1 |  if_e	sub	fp, #20
12534     12 23 02 A6 |  if_e	mov	local03, local04
12538     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1253c     38 00 90 5D |  if_ne	jmp	#LR__1443
12540     00 1E 06 F6 | 	mov	local01, #0
12544     A7 20 02 FB | 	rdlong	local02, fp
12548     0C 4E 05 F1 | 	add	fp, #12
1254c     A7 12 02 FB | 	rdlong	arg01, fp
12550     0C 4E 85 F1 | 	sub	fp, #12
12554     18 C5 B0 FD | 	call	#__system___float_fromuns
12558     FD 14 02 F6 | 	mov	arg02, result1
1255c     10 13 02 F6 | 	mov	arg01, local02
12560     01 16 06 F6 | 	mov	arg03, #1
12564     40 CD B0 FD | 	call	#__system___float_cmp
12568     00 FA 0D F2 | 	cmp	result1, #0 wz
1256c     00 1E 26 56 |  if_ne	not	local01, #0
12570     A7 1E 62 FC | 	wrlong	local01, fp
12574     F8 02 90 FD | 	jmp	#LR__1453
12578                 | LR__1443
12578                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
12578     08 4E 05 F1 | 	add	fp, #8
1257c     A7 1E 02 FB | 	rdlong	local01, fp
12580     08 4E 85 F1 | 	sub	fp, #8
12584     1C 1E 0E F2 | 	cmp	local01, #28 wz
12588     14 4E 05 A1 |  if_e	add	fp, #20
1258c     A7 24 02 AB |  if_e	rdlong	local04, fp
12590     14 4E 85 A1 |  if_e	sub	fp, #20
12594     12 23 02 A6 |  if_e	mov	local03, local04
12598     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1259c     44 00 90 5D |  if_ne	jmp	#LR__1444
125a0     00 1E 06 F6 | 	mov	local01, #0
125a4     A7 12 02 FB | 	rdlong	arg01, fp
125a8     09 13 52 F6 | 	abs	arg01, arg01 wc
125ac     1F 26 C6 C9 |  if_b	decod	local05, #31
125b0     00 26 06 36 |  if_ae	mov	local05, #0
125b4     B8 C4 B0 FD | 	call	#__system___float_fromuns
125b8     13 FB 61 F5 | 	xor	result1, local05
125bc     FD 12 02 F6 | 	mov	arg01, result1
125c0     0C 4E 05 F1 | 	add	fp, #12
125c4     A7 14 02 FB | 	rdlong	arg02, fp
125c8     0C 4E 85 F1 | 	sub	fp, #12
125cc     01 16 06 F6 | 	mov	arg03, #1
125d0     D4 CC B0 FD | 	call	#__system___float_cmp
125d4     00 FA 0D F2 | 	cmp	result1, #0 wz
125d8     00 1E 26 56 |  if_ne	not	local01, #0
125dc     A7 1E 62 FC | 	wrlong	local01, fp
125e0     8C 02 90 FD | 	jmp	#LR__1453
125e4                 | LR__1444
125e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
125e4     08 4E 05 F1 | 	add	fp, #8
125e8     A7 1E 02 FB | 	rdlong	local01, fp
125ec     08 4E 85 F1 | 	sub	fp, #8
125f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
125f4     14 4E 05 A1 |  if_e	add	fp, #20
125f8     A7 24 02 AB |  if_e	rdlong	local04, fp
125fc     14 4E 85 A1 |  if_e	sub	fp, #20
12600     12 23 02 A6 |  if_e	mov	local03, local04
12604     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12608     24 00 90 5D |  if_ne	jmp	#LR__1445
1260c     00 1E 06 F6 | 	mov	local01, #0
12610     A7 20 02 FB | 	rdlong	local02, fp
12614     0C 4E 05 F1 | 	add	fp, #12
12618     A7 22 02 FB | 	rdlong	local03, fp
1261c     0C 4E 85 F1 | 	sub	fp, #12
12620     11 21 0A F2 | 	cmp	local02, local03 wz
12624     01 1E 66 56 |  if_ne	neg	local01, #1
12628     A7 1E 62 FC | 	wrlong	local01, fp
1262c     40 02 90 FD | 	jmp	#LR__1453
12630                 | LR__1445
12630                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
12630     08 4E 05 F1 | 	add	fp, #8
12634     A7 1E 02 FB | 	rdlong	local01, fp
12638     08 4E 85 F1 | 	sub	fp, #8
1263c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12640     14 4E 05 A1 |  if_e	add	fp, #20
12644     A7 24 02 AB |  if_e	rdlong	local04, fp
12648     14 4E 85 A1 |  if_e	sub	fp, #20
1264c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12650     24 00 90 5D |  if_ne	jmp	#LR__1446
12654     00 1E 06 F6 | 	mov	local01, #0
12658     A7 20 02 FB | 	rdlong	local02, fp
1265c     0C 4E 05 F1 | 	add	fp, #12
12660     A7 22 02 FB | 	rdlong	local03, fp
12664     0C 4E 85 F1 | 	sub	fp, #12
12668     11 21 0A F2 | 	cmp	local02, local03 wz
1266c     01 1E 66 56 |  if_ne	neg	local01, #1
12670     A7 1E 62 FC | 	wrlong	local01, fp
12674     F8 01 90 FD | 	jmp	#LR__1453
12678                 | LR__1446
12678                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
12678     08 4E 05 F1 | 	add	fp, #8
1267c     A7 1E 02 FB | 	rdlong	local01, fp
12680     08 4E 85 F1 | 	sub	fp, #8
12684     1D 1E 0E F2 | 	cmp	local01, #29 wz
12688     14 4E 05 A1 |  if_e	add	fp, #20
1268c     A7 22 02 AB |  if_e	rdlong	local03, fp
12690     14 4E 85 A1 |  if_e	sub	fp, #20
12694     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12698     34 00 90 5D |  if_ne	jmp	#LR__1447
1269c     00 1E 06 F6 | 	mov	local01, #0
126a0     A7 12 02 FB | 	rdlong	arg01, fp
126a4     C8 C3 B0 FD | 	call	#__system___float_fromuns
126a8     FD 12 02 F6 | 	mov	arg01, result1
126ac     0C 4E 05 F1 | 	add	fp, #12
126b0     A7 14 02 FB | 	rdlong	arg02, fp
126b4     0C 4E 85 F1 | 	sub	fp, #12
126b8     01 16 06 F6 | 	mov	arg03, #1
126bc     E8 CB B0 FD | 	call	#__system___float_cmp
126c0     00 FA 0D F2 | 	cmp	result1, #0 wz
126c4     00 1E 26 56 |  if_ne	not	local01, #0
126c8     A7 1E 62 FC | 	wrlong	local01, fp
126cc     A0 01 90 FD | 	jmp	#LR__1453
126d0                 | LR__1447
126d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
126d0     08 4E 05 F1 | 	add	fp, #8
126d4     A7 1E 02 FB | 	rdlong	local01, fp
126d8     08 4E 85 F1 | 	sub	fp, #8
126dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
126e0     14 4E 05 A1 |  if_e	add	fp, #20
126e4     A7 22 02 AB |  if_e	rdlong	local03, fp
126e8     14 4E 85 A1 |  if_e	sub	fp, #20
126ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
126f0     24 00 90 5D |  if_ne	jmp	#LR__1448
126f4     00 1E 06 F6 | 	mov	local01, #0
126f8     A7 20 02 FB | 	rdlong	local02, fp
126fc     0C 4E 05 F1 | 	add	fp, #12
12700     A7 22 02 FB | 	rdlong	local03, fp
12704     0C 4E 85 F1 | 	sub	fp, #12
12708     11 21 0A F2 | 	cmp	local02, local03 wz
1270c     01 1E 66 56 |  if_ne	neg	local01, #1
12710     A7 1E 62 FC | 	wrlong	local01, fp
12714     58 01 90 FD | 	jmp	#LR__1453
12718                 | LR__1448
12718                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
12718     08 4E 05 F1 | 	add	fp, #8
1271c     A7 1E 02 FB | 	rdlong	local01, fp
12720     08 4E 85 F1 | 	sub	fp, #8
12724     1D 1E 0E F2 | 	cmp	local01, #29 wz
12728     14 4E 05 A1 |  if_e	add	fp, #20
1272c     A7 22 02 AB |  if_e	rdlong	local03, fp
12730     14 4E 85 A1 |  if_e	sub	fp, #20
12734     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12738     24 00 90 5D |  if_ne	jmp	#LR__1449
1273c     00 1E 06 F6 | 	mov	local01, #0
12740     A7 20 02 FB | 	rdlong	local02, fp
12744     0C 4E 05 F1 | 	add	fp, #12
12748     A7 22 02 FB | 	rdlong	local03, fp
1274c     0C 4E 85 F1 | 	sub	fp, #12
12750     11 21 0A F2 | 	cmp	local02, local03 wz
12754     01 1E 66 56 |  if_ne	neg	local01, #1
12758     A7 1E 62 FC | 	wrlong	local01, fp
1275c     10 01 90 FD | 	jmp	#LR__1453
12760                 | LR__1449
12760                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
12760     08 4E 05 F1 | 	add	fp, #8
12764     A7 1E 02 FB | 	rdlong	local01, fp
12768     08 4E 85 F1 | 	sub	fp, #8
1276c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12770     14 4E 05 A1 |  if_e	add	fp, #20
12774     A7 22 02 AB |  if_e	rdlong	local03, fp
12778     14 4E 85 A1 |  if_e	sub	fp, #20
1277c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12780     30 00 90 5D |  if_ne	jmp	#LR__1450
12784     00 1E 06 F6 | 	mov	local01, #0
12788     A7 12 02 FB | 	rdlong	arg01, fp
1278c     DC B8 BF FD | 	call	#_convertstring
12790     FD 12 02 F6 | 	mov	arg01, result1
12794     0C 4E 05 F1 | 	add	fp, #12
12798     A7 14 02 FB | 	rdlong	arg02, fp
1279c     0C 4E 85 F1 | 	sub	fp, #12
127a0     7C 9B B0 FD | 	call	#__system___string_cmp
127a4     00 FA 0D F2 | 	cmp	result1, #0 wz
127a8     00 1E 26 56 |  if_ne	not	local01, #0
127ac     A7 1E 62 FC | 	wrlong	local01, fp
127b0     BC 00 90 FD | 	jmp	#LR__1453
127b4                 | LR__1450
127b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
127b4     08 4E 05 F1 | 	add	fp, #8
127b8     A7 1E 02 FB | 	rdlong	local01, fp
127bc     08 4E 85 F1 | 	sub	fp, #8
127c0     1F 1E 0E F2 | 	cmp	local01, #31 wz
127c4     14 4E 05 A1 |  if_e	add	fp, #20
127c8     A7 22 02 AB |  if_e	rdlong	local03, fp
127cc     14 4E 85 A1 |  if_e	sub	fp, #20
127d0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
127d4     34 00 90 5D |  if_ne	jmp	#LR__1451
127d8     00 1E 06 F6 | 	mov	local01, #0
127dc     A7 20 02 FB | 	rdlong	local02, fp
127e0     0C 4E 05 F1 | 	add	fp, #12
127e4     A7 12 02 FB | 	rdlong	arg01, fp
127e8     0C 4E 85 F1 | 	sub	fp, #12
127ec     7C B8 BF FD | 	call	#_convertstring
127f0     FD 14 02 F6 | 	mov	arg02, result1
127f4     10 13 02 F6 | 	mov	arg01, local02
127f8     24 9B B0 FD | 	call	#__system___string_cmp
127fc     00 FA 0D F2 | 	cmp	result1, #0 wz
12800     00 1E 26 56 |  if_ne	not	local01, #0
12804     A7 1E 62 FC | 	wrlong	local01, fp
12808     64 00 90 FD | 	jmp	#LR__1453
1280c                 | LR__1451
1280c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1280c     08 4E 05 F1 | 	add	fp, #8
12810     A7 1E 02 FB | 	rdlong	local01, fp
12814     08 4E 85 F1 | 	sub	fp, #8
12818     2B 1E 0E F2 | 	cmp	local01, #43 wz
1281c     14 4E 05 A1 |  if_e	add	fp, #20
12820     A7 22 02 AB |  if_e	rdlong	local03, fp
12824     14 4E 85 A1 |  if_e	sub	fp, #20
12828     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1282c     3C 00 90 5D |  if_ne	jmp	#LR__1452
12830     00 1E 06 F6 | 	mov	local01, #0
12834     A7 12 02 FB | 	rdlong	arg01, fp
12838     30 B8 BF FD | 	call	#_convertstring
1283c     FD 20 02 F6 | 	mov	local02, result1
12840     0C 4E 05 F1 | 	add	fp, #12
12844     A7 12 02 FB | 	rdlong	arg01, fp
12848     0C 4E 85 F1 | 	sub	fp, #12
1284c     1C B8 BF FD | 	call	#_convertstring
12850     FD 14 02 F6 | 	mov	arg02, result1
12854     10 13 02 F6 | 	mov	arg01, local02
12858     C4 9A B0 FD | 	call	#__system___string_cmp
1285c     00 FA 0D F2 | 	cmp	result1, #0 wz
12860     00 1E 26 56 |  if_ne	not	local01, #0
12864     A7 1E 62 FC | 	wrlong	local01, fp
12868     04 00 90 FD | 	jmp	#LR__1453
1286c                 | LR__1452
1286c     A7 00 68 FC | 	wrlong	#0, fp
12870                 | LR__1453
12870     08 4E 05 F1 | 	add	fp, #8
12874     A7 38 68 FC | 	wrlong	#28, fp
12878     08 4E 85 F1 | 	sub	fp, #8
1287c     A7 12 02 F6 | 	mov	arg01, fp
12880     DC 78 BF FD | 	call	#_push
12884     A7 F0 03 F6 | 	mov	ptra, fp
12888     B2 00 A0 FD | 	call	#popregs_
1288c                 | _do_ne_ret
1288c     2D 00 64 FD | 	ret
12890                 | 
12890                 | ' 
12890                 | ' 
12890                 | ' 
12890                 | ' ' -------------------   convert a variable on the top of stack to integer
12890                 | ' 
12890                 | ' sub do_converttoint
12890                 | _do_converttoint
12890     02 4A 05 F6 | 	mov	COUNT_, #2
12894     A8 00 A0 FD | 	call	#pushregs_
12898     18 F0 07 F1 | 	add	ptra, #24
1289c     28 78 BF FD | 	call	#_pop
128a0     FE 1E 02 F6 | 	mov	local01, result2
128a4     FF 20 02 F6 | 	mov	local02, result3
128a8     A7 FA 61 FC | 	wrlong	result1, fp
128ac     04 4E 05 F1 | 	add	fp, #4
128b0     A7 1E 62 FC | 	wrlong	local01, fp
128b4     04 4E 05 F1 | 	add	fp, #4
128b8     A7 20 62 FC | 	wrlong	local02, fp
128bc                 | ' t1=pop() 
128bc                 | ' select case t1.result_type
128bc     08 4E 85 F1 | 	sub	fp, #8
128c0     1C 20 0E F2 | 	cmp	local02, #28 wz
128c4     2C 00 90 AD |  if_e	jmp	#LR__1460
128c8     1D 20 0E F2 | 	cmp	local02, #29 wz
128cc     40 00 90 AD |  if_e	jmp	#LR__1461
128d0     1E 20 0E F2 | 	cmp	local02, #30 wz
128d4     54 00 90 AD |  if_e	jmp	#LR__1462
128d8     1F 20 0E F2 | 	cmp	local02, #31 wz
128dc     70 00 90 AD |  if_e	jmp	#LR__1463
128e0     2B 20 0E F2 | 	cmp	local02, #43 wz
128e4     94 00 90 AD |  if_e	jmp	#LR__1464
128e8     FF 20 0E F2 | 	cmp	local02, #255 wz
128ec     C0 00 90 AD |  if_e	jmp	#LR__1465
128f0     DC 00 90 FD | 	jmp	#LR__1466
128f4                 | LR__1460
128f4     A7 20 02 FB | 	rdlong	local02, fp
128f8     0C 4E 05 F1 | 	add	fp, #12
128fc     A7 20 62 FC | 	wrlong	local02, fp
12900     04 4E 05 F1 | 	add	fp, #4
12904     A7 38 68 FC | 	wrlong	#28, fp
12908     10 4E 85 F1 | 	sub	fp, #16
1290c     D4 00 90 FD | 	jmp	#LR__1467
12910                 | LR__1461
12910     A7 20 02 FB | 	rdlong	local02, fp
12914     0C 4E 05 F1 | 	add	fp, #12
12918     A7 20 62 FC | 	wrlong	local02, fp
1291c     04 4E 05 F1 | 	add	fp, #4
12920     A7 38 68 FC | 	wrlong	#28, fp
12924     10 4E 85 F1 | 	sub	fp, #16
12928     B8 00 90 FD | 	jmp	#LR__1467
1292c                 | LR__1462
1292c     A7 12 02 FB | 	rdlong	arg01, fp
12930     01 14 06 F6 | 	mov	arg02, #1
12934     04 CA B0 FD | 	call	#__system___float_tointeger
12938     0C 4E 05 F1 | 	add	fp, #12
1293c     A7 FA 61 FC | 	wrlong	result1, fp
12940     04 4E 05 F1 | 	add	fp, #4
12944     A7 38 68 FC | 	wrlong	#28, fp
12948     10 4E 85 F1 | 	sub	fp, #16
1294c     94 00 90 FD | 	jmp	#LR__1467
12950                 | LR__1463
12950     A7 12 02 FB | 	rdlong	arg01, fp
12954     04 CD B0 FD | 	call	#__system____builtin_atof
12958     FD 12 02 F6 | 	mov	arg01, result1
1295c     00 14 06 F6 | 	mov	arg02, #0
12960     D8 C9 B0 FD | 	call	#__system___float_tointeger
12964     0C 4E 05 F1 | 	add	fp, #12
12968     A7 FA 61 FC | 	wrlong	result1, fp
1296c     04 4E 05 F1 | 	add	fp, #4
12970     A7 38 68 FC | 	wrlong	#28, fp
12974     10 4E 85 F1 | 	sub	fp, #16
12978     68 00 90 FD | 	jmp	#LR__1467
1297c                 | LR__1464
1297c     A7 12 02 FB | 	rdlong	arg01, fp
12980     E8 B6 BF FD | 	call	#_convertstring
12984     FD 12 02 F6 | 	mov	arg01, result1
12988     D0 CC B0 FD | 	call	#__system____builtin_atof
1298c     FD 12 02 F6 | 	mov	arg01, result1
12990     00 14 06 F6 | 	mov	arg02, #0
12994     A4 C9 B0 FD | 	call	#__system___float_tointeger
12998     0C 4E 05 F1 | 	add	fp, #12
1299c     A7 FA 61 FC | 	wrlong	result1, fp
129a0     04 4E 05 F1 | 	add	fp, #4
129a4     A7 38 68 FC | 	wrlong	#28, fp
129a8     10 4E 85 F1 | 	sub	fp, #16
129ac     34 00 90 FD | 	jmp	#LR__1467
129b0                 | LR__1465
129b0     0C 4E 05 F1 | 	add	fp, #12
129b4     A7 00 68 FC | 	wrlong	#0, fp
129b8     0C 4E 85 F1 | 	sub	fp, #12
129bc     A7 20 02 FB | 	rdlong	local02, fp
129c0     10 4E 05 F1 | 	add	fp, #16
129c4     A7 20 62 FC | 	wrlong	local02, fp
129c8     10 4E 85 F1 | 	sub	fp, #16
129cc     14 00 90 FD | 	jmp	#LR__1467
129d0                 | LR__1466
129d0     0C 4E 05 F1 | 	add	fp, #12
129d4     A7 00 68 FC | 	wrlong	#0, fp
129d8     04 4E 05 F1 | 	add	fp, #4
129dc     A7 02 68 FC | 	wrlong	#1, fp
129e0     10 4E 85 F1 | 	sub	fp, #16
129e4                 | LR__1467
129e4     0C 4E 05 F1 | 	add	fp, #12
129e8     A7 20 02 FB | 	rdlong	local02, fp
129ec     0C 4E 85 F1 | 	sub	fp, #12
129f0     A7 20 62 FC | 	wrlong	local02, fp
129f4     10 4E 05 F1 | 	add	fp, #16
129f8     A7 20 02 FB | 	rdlong	local02, fp
129fc     08 4E 85 F1 | 	sub	fp, #8
12a00     A7 20 62 FC | 	wrlong	local02, fp
12a04     08 4E 85 F1 | 	sub	fp, #8
12a08     A7 12 02 F6 | 	mov	arg01, fp
12a0c     50 77 BF FD | 	call	#_push
12a10     A7 F0 03 F6 | 	mov	ptra, fp
12a14     B2 00 A0 FD | 	call	#popregs_
12a18                 | _do_converttoint_ret
12a18     2D 00 64 FD | 	ret
12a1c                 | 
12a1c                 | ' 
12a1c                 | ' function converttoint (t1 as expr_result) as integer
12a1c                 | _converttoint
12a1c     02 4A 05 F6 | 	mov	COUNT_, #2
12a20     A8 00 A0 FD | 	call	#pushregs_
12a24     09 1F 02 F6 | 	mov	local01, arg01
12a28                 | ' 
12a28                 | ' select case t1.result_type
12a28     08 1E 06 F1 | 	add	local01, #8
12a2c     0F 21 02 FB | 	rdlong	local02, local01
12a30     08 1E 86 F1 | 	sub	local01, #8
12a34     1C 20 0E F2 | 	cmp	local02, #28 wz
12a38     24 00 90 AD |  if_e	jmp	#LR__1470
12a3c     1D 20 0E F2 | 	cmp	local02, #29 wz
12a40     24 00 90 AD |  if_e	jmp	#LR__1471
12a44     1E 20 0E F2 | 	cmp	local02, #30 wz
12a48     24 00 90 AD |  if_e	jmp	#LR__1472
12a4c     1F 20 0E F2 | 	cmp	local02, #31 wz
12a50     2C 00 90 AD |  if_e	jmp	#LR__1473
12a54     2B 20 0E F2 | 	cmp	local02, #43 wz
12a58     3C 00 90 AD |  if_e	jmp	#LR__1474
12a5c     58 00 90 FD | 	jmp	#LR__1475
12a60                 | LR__1470
12a60     0F FB 01 FB | 	rdlong	result1, local01
12a64     54 00 90 FD | 	jmp	#LR__1476
12a68                 | LR__1471
12a68     0F FB 01 FB | 	rdlong	result1, local01
12a6c     4C 00 90 FD | 	jmp	#LR__1476
12a70                 | LR__1472
12a70     0F 13 02 FB | 	rdlong	arg01, local01
12a74     01 14 06 F6 | 	mov	arg02, #1
12a78     C0 C8 B0 FD | 	call	#__system___float_tointeger
12a7c     3C 00 90 FD | 	jmp	#LR__1476
12a80                 | LR__1473
12a80     0F 13 02 FB | 	rdlong	arg01, local01
12a84     D4 CB B0 FD | 	call	#__system____builtin_atof
12a88     FD 12 02 F6 | 	mov	arg01, result1
12a8c     00 14 06 F6 | 	mov	arg02, #0
12a90     A8 C8 B0 FD | 	call	#__system___float_tointeger
12a94     24 00 90 FD | 	jmp	#LR__1476
12a98                 | LR__1474
12a98     0F 13 02 FB | 	rdlong	arg01, local01
12a9c     CC B5 BF FD | 	call	#_convertstring
12aa0     FD 12 02 F6 | 	mov	arg01, result1
12aa4     B4 CB B0 FD | 	call	#__system____builtin_atof
12aa8     FD 12 02 F6 | 	mov	arg01, result1
12aac     00 14 06 F6 | 	mov	arg02, #0
12ab0     88 C8 B0 FD | 	call	#__system___float_tointeger
12ab4     04 00 90 FD | 	jmp	#LR__1476
12ab8                 | LR__1475
12ab8     00 FA 05 F6 | 	mov	result1, #0
12abc                 | LR__1476
12abc     A7 F0 03 F6 | 	mov	ptra, fp
12ac0     B2 00 A0 FD | 	call	#popregs_
12ac4                 | _converttoint_ret
12ac4     2D 00 64 FD | 	ret
12ac8                 | 
12ac8                 | ' 
12ac8                 | ' function converttofloat (t1 as expr_result) as single
12ac8                 | _converttofloat
12ac8     03 4A 05 F6 | 	mov	COUNT_, #3
12acc     A8 00 A0 FD | 	call	#pushregs_
12ad0     09 1F 02 F6 | 	mov	local01, arg01
12ad4                 | ' 
12ad4                 | ' select case t1.result_type
12ad4     08 1E 06 F1 | 	add	local01, #8
12ad8     0F 21 02 FB | 	rdlong	local02, local01
12adc     08 1E 86 F1 | 	sub	local01, #8
12ae0     1C 20 0E F2 | 	cmp	local02, #28 wz
12ae4     24 00 90 AD |  if_e	jmp	#LR__1480
12ae8     1D 20 0E F2 | 	cmp	local02, #29 wz
12aec     38 00 90 AD |  if_e	jmp	#LR__1481
12af0     1E 20 0E F2 | 	cmp	local02, #30 wz
12af4     3C 00 90 AD |  if_e	jmp	#LR__1482
12af8     1F 20 0E F2 | 	cmp	local02, #31 wz
12afc     3C 00 90 AD |  if_e	jmp	#LR__1483
12b00     2B 20 0E F2 | 	cmp	local02, #43 wz
12b04     40 00 90 AD |  if_e	jmp	#LR__1484
12b08     50 00 90 FD | 	jmp	#LR__1485
12b0c                 | LR__1480
12b0c     0F 13 02 FB | 	rdlong	arg01, local01
12b10     09 13 52 F6 | 	abs	arg01, arg01 wc
12b14     1F 22 C6 C9 |  if_b	decod	local03, #31
12b18     00 22 06 36 |  if_ae	mov	local03, #0
12b1c     50 BF B0 FD | 	call	#__system___float_fromuns
12b20     11 FB 61 F5 | 	xor	result1, local03
12b24     38 00 90 FD | 	jmp	#LR__1486
12b28                 | LR__1481
12b28     0F 13 02 FB | 	rdlong	arg01, local01
12b2c     40 BF B0 FD | 	call	#__system___float_fromuns
12b30     2C 00 90 FD | 	jmp	#LR__1486
12b34                 | LR__1482
12b34     0F FB 01 FB | 	rdlong	result1, local01
12b38     24 00 90 FD | 	jmp	#LR__1486
12b3c                 | LR__1483
12b3c     0F 13 02 FB | 	rdlong	arg01, local01
12b40     18 CB B0 FD | 	call	#__system____builtin_atof
12b44     18 00 90 FD | 	jmp	#LR__1486
12b48                 | LR__1484
12b48     0F 13 02 FB | 	rdlong	arg01, local01
12b4c     1C B5 BF FD | 	call	#_convertstring
12b50     FD 12 02 F6 | 	mov	arg01, result1
12b54     04 CB B0 FD | 	call	#__system____builtin_atof
12b58     04 00 90 FD | 	jmp	#LR__1486
12b5c                 | LR__1485
12b5c     00 FA 05 F6 | 	mov	result1, #0
12b60                 | LR__1486
12b60     A7 F0 03 F6 | 	mov	ptra, fp
12b64     B2 00 A0 FD | 	call	#popregs_
12b68                 | _converttofloat_ret
12b68     2D 00 64 FD | 	ret
12b6c                 | 
12b6c                 | ' 
12b6c                 | ' sub do_rnd
12b6c                 | _do_rnd
12b6c     01 4A 05 F6 | 	mov	COUNT_, #1
12b70     A8 00 A0 FD | 	call	#pushregs_
12b74     10 F0 07 F1 | 	add	ptra, #16
12b78     6A 00 00 FF 
12b7c     64 E4 05 F1 | 	add	objptr, ##54372
12b80     F2 1E 02 FB | 	rdlong	local01, objptr
12b84     0F 17 02 F6 | 	mov	arg03, local01
12b88     01 16 66 F0 | 	shl	arg03, #1
12b8c     0F 17 02 F1 | 	add	arg03, local01
12b90     02 16 66 F0 | 	shl	arg03, #2
12b94     03 00 00 FF 
12b98     04 E4 85 F1 | 	sub	objptr, ##1540
12b9c     F2 16 02 F1 | 	add	arg03, objptr
12ba0     0B 17 02 FB | 	rdlong	arg03, arg03
12ba4     0C 4E 05 F1 | 	add	fp, #12
12ba8     A7 16 62 FC | 	wrlong	arg03, fp
12bac                 | ' 
12bac                 | ' numpar=compiledline(lineptr_e).result.uresult
12bac                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
12bac     0C 4E 85 F1 | 	sub	fp, #12
12bb0     02 16 16 F2 | 	cmp	arg03, #2 wc
12bb4     67 00 00 FF 
12bb8     60 E4 85 F1 | 	sub	objptr, ##52832
12bbc     3C 00 90 CD |  if_b	jmp	#LR__1490
12bc0     00 12 06 F6 | 	mov	arg01, #0
12bc4     C0 F0 B0 FD | 	call	#__system___getiolock_0474
12bc8     FD 12 02 F6 | 	mov	arg01, result1
12bcc     28 97 B0 FD | 	call	#__system___lockmem
12bd0     5F 01 00 FF 
12bd4     03 15 06 F6 | 	mov	arg02, ##@LR__4937
12bd8     00 12 06 F6 | 	mov	arg01, #0
12bdc     00 16 06 F6 | 	mov	arg03, #0
12be0     18 A4 B0 FD | 	call	#__system___basic_print_string
12be4     00 12 06 F6 | 	mov	arg01, #0
12be8     9C F0 B0 FD | 	call	#__system___getiolock_0474
12bec     FD 00 68 FC | 	wrlong	#0, result1
12bf0     27 12 06 F6 | 	mov	arg01, #39
12bf4     60 5F B0 FD | 	call	#_printerror
12bf8     2C 01 90 FD | 	jmp	#LR__1497
12bfc                 | LR__1490
12bfc                 | ' if numpar=0 then
12bfc     0C 4E 05 F1 | 	add	fp, #12
12c00     A7 FE 09 FB | 	rdlong	result3, fp wz
12c04     0C 4E 85 F1 | 	sub	fp, #12
12c08     20 00 90 5D |  if_ne	jmp	#LR__1491
12c0c     08 4E 05 F1 | 	add	fp, #8
12c10     A7 3A 68 FC | 	wrlong	#29, fp
12c14     08 4E 85 F1 | 	sub	fp, #8
12c18     1B FA 61 FD | 	getrnd	result1
12c1c     A7 FA 61 FC | 	wrlong	result1, fp
12c20     A7 12 02 F6 | 	mov	arg01, fp
12c24     38 75 BF FD | 	call	#_push
12c28     FC 00 90 FD | 	jmp	#LR__1496
12c2c                 | LR__1491
12c2c     98 74 BF FD | 	call	#_pop
12c30     A7 FA 61 FC | 	wrlong	result1, fp
12c34     04 4E 05 F1 | 	add	fp, #4
12c38     A7 FC 61 FC | 	wrlong	result2, fp
12c3c     04 4E 05 F1 | 	add	fp, #4
12c40     A7 FE 61 FC | 	wrlong	result3, fp
12c44                 | '   t1=pop()
12c44                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
12c44     08 4E 85 F1 | 	sub	fp, #8
12c48     1C FE 0D F2 | 	cmp	result3, #28 wz
12c4c     08 4E 05 51 |  if_ne	add	fp, #8
12c50     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12c54     08 4E 85 51 |  if_ne	sub	fp, #8
12c58     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12c5c     2C 00 90 5D |  if_ne	jmp	#LR__1492
12c60     1B FA 61 FD | 	getrnd	result1
12c64     A7 1E 02 FB | 	rdlong	local01, fp
12c68     0F FB 11 FD | 	qdiv	result1, local01
12c6c     A7 12 02 F6 | 	mov	arg01, fp
12c70     19 1E 62 FD | 	getqy	local01
12c74     A7 1E 62 FC | 	wrlong	local01, fp
12c78     08 4E 05 F1 | 	add	fp, #8
12c7c     A7 3A 68 FC | 	wrlong	#29, fp
12c80     08 4E 85 F1 | 	sub	fp, #8
12c84     D8 74 BF FD | 	call	#_push
12c88     9C 00 90 FD | 	jmp	#LR__1495
12c8c                 | LR__1492
12c8c     08 4E 05 F1 | 	add	fp, #8
12c90     A7 1E 02 FB | 	rdlong	local01, fp
12c94     08 4E 85 F1 | 	sub	fp, #8
12c98     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c9c     48 00 90 5D |  if_ne	jmp	#LR__1493
12ca0     A7 12 02 FB | 	rdlong	arg01, fp
12ca4     00 C0 24 FF 
12ca8     00 14 06 F6 | 	mov	arg02, ##1233125376
12cac     C8 C3 B0 FD | 	call	#__system___float_div
12cb0     FD 1E 02 F6 | 	mov	local01, result1
12cb4     1B 12 62 FD | 	getrnd	arg01
12cb8     74 13 06 F4 | 	bitl	arg01, #372
12cbc     B0 BD B0 FD | 	call	#__system___float_fromuns
12cc0     FD 14 02 F6 | 	mov	arg02, result1
12cc4     0F 13 02 F6 | 	mov	arg01, local01
12cc8     A8 C1 B0 FD | 	call	#__system___float_mul
12ccc     A7 FA 61 FC | 	wrlong	result1, fp
12cd0     08 4E 05 F1 | 	add	fp, #8
12cd4     A7 3C 68 FC | 	wrlong	#30, fp
12cd8     08 4E 85 F1 | 	sub	fp, #8
12cdc     A7 12 02 F6 | 	mov	arg01, fp
12ce0     7C 74 BF FD | 	call	#_push
12ce4     40 00 90 FD | 	jmp	#LR__1494
12ce8                 | LR__1493
12ce8                 | '     print "rnd: "; : printerror(40) 
12ce8     00 12 06 F6 | 	mov	arg01, #0
12cec     98 EF B0 FD | 	call	#__system___getiolock_0474
12cf0     FD 12 02 F6 | 	mov	arg01, result1
12cf4     00 96 B0 FD | 	call	#__system___lockmem
12cf8     5F 01 00 FF 
12cfc     09 15 06 F6 | 	mov	arg02, ##@LR__4938
12d00     00 12 06 F6 | 	mov	arg01, #0
12d04     00 16 06 F6 | 	mov	arg03, #0
12d08     F0 A2 B0 FD | 	call	#__system___basic_print_string
12d0c     00 12 06 F6 | 	mov	arg01, #0
12d10     74 EF B0 FD | 	call	#__system___getiolock_0474
12d14     FD 00 68 FC | 	wrlong	#0, result1
12d18     28 12 06 F6 | 	mov	arg01, #40
12d1c     38 5E B0 FD | 	call	#_printerror
12d20     A7 12 02 F6 | 	mov	arg01, fp
12d24     38 74 BF FD | 	call	#_push
12d28                 | LR__1494
12d28                 | LR__1495
12d28                 | LR__1496
12d28                 | LR__1497
12d28     A7 F0 03 F6 | 	mov	ptra, fp
12d2c     B2 00 A0 FD | 	call	#popregs_
12d30                 | _do_rnd_ret
12d30     2D 00 64 FD | 	ret
12d34                 | 
12d34                 | ' 
12d34                 | ' sub do_getenvsustain
12d34                 | _do_getenvsustain
12d34     01 4A 05 F6 | 	mov	COUNT_, #1
12d38     A8 00 A0 FD | 	call	#pushregs_
12d3c     10 F0 07 F1 | 	add	ptra, #16
12d40     6A 00 00 FF 
12d44     64 E4 05 F1 | 	add	objptr, ##54372
12d48     F2 1E 02 FB | 	rdlong	local01, objptr
12d4c     0F 17 02 F6 | 	mov	arg03, local01
12d50     01 16 66 F0 | 	shl	arg03, #1
12d54     0F 17 02 F1 | 	add	arg03, local01
12d58     02 16 66 F0 | 	shl	arg03, #2
12d5c     03 00 00 FF 
12d60     04 E4 85 F1 | 	sub	objptr, ##1540
12d64     F2 16 02 F1 | 	add	arg03, objptr
12d68     0B 17 02 FB | 	rdlong	arg03, arg03
12d6c     0C 4E 05 F1 | 	add	fp, #12
12d70     A7 16 62 FC | 	wrlong	arg03, fp
12d74                 | ' 
12d74                 | ' numpar=compiledline(lineptr_e).result.uresult
12d74                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12d74     0C 4E 85 F1 | 	sub	fp, #12
12d78     02 16 16 F2 | 	cmp	arg03, #2 wc
12d7c     67 00 00 FF 
12d80     60 E4 85 F1 | 	sub	objptr, ##52832
12d84     0C 4E 05 C1 |  if_b	add	fp, #12
12d88     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12d8c     0C 4E 85 C1 |  if_b	sub	fp, #12
12d90     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12d94     00 12 06 F6 | 	mov	arg01, #0
12d98     EC EE B0 FD | 	call	#__system___getiolock_0474
12d9c     FD 12 02 F6 | 	mov	arg01, result1
12da0     54 95 B0 FD | 	call	#__system___lockmem
12da4     5F 01 00 FF 
12da8     0F 15 06 F6 | 	mov	arg02, ##@LR__4939
12dac     00 12 06 F6 | 	mov	arg01, #0
12db0     00 16 06 F6 | 	mov	arg03, #0
12db4     44 A2 B0 FD | 	call	#__system___basic_print_string
12db8     00 12 06 F6 | 	mov	arg01, #0
12dbc     C8 EE B0 FD | 	call	#__system___getiolock_0474
12dc0     FD 00 68 FC | 	wrlong	#0, result1
12dc4     27 12 06 F6 | 	mov	arg01, #39
12dc8     8C 5D B0 FD | 	call	#_printerror
12dcc     64 00 90 FD | 	jmp	#LR__1501
12dd0                 | LR__1500
12dd0     F4 72 BF FD | 	call	#_pop
12dd4     FD 1E 02 F6 | 	mov	local01, result1
12dd8     FE 16 02 F6 | 	mov	arg03, result2
12ddc     A7 1E 62 FC | 	wrlong	local01, fp
12de0     04 4E 05 F1 | 	add	fp, #4
12de4     A7 16 62 FC | 	wrlong	arg03, fp
12de8     04 4E 05 F1 | 	add	fp, #4
12dec     A7 FE 61 FC | 	wrlong	result3, fp
12df0     08 4E 85 F1 | 	sub	fp, #8
12df4     A7 12 02 F6 | 	mov	arg01, fp
12df8     20 FC BF FD | 	call	#_converttoint
12dfc     FD 1E 02 F6 | 	mov	local01, result1
12e00     01 1E 66 F0 | 	shl	local01, #1
12e04     7B 00 00 FF 
12e08     78 E4 05 F1 | 	add	objptr, ##63096
12e0c     F2 1E 02 F1 | 	add	local01, objptr
12e10     0F 1F E2 FA | 	rdword	local01, local01
12e14     A7 1E 62 FC | 	wrlong	local01, fp
12e18     08 4E 05 F1 | 	add	fp, #8
12e1c     A7 38 68 FC | 	wrlong	#28, fp
12e20     08 4E 85 F1 | 	sub	fp, #8
12e24     A7 12 02 F6 | 	mov	arg01, fp
12e28     7B 00 00 FF 
12e2c     78 E4 85 F1 | 	sub	objptr, ##63096
12e30     2C 73 BF FD | 	call	#_push
12e34                 | LR__1501
12e34     A7 F0 03 F6 | 	mov	ptra, fp
12e38     B2 00 A0 FD | 	call	#popregs_
12e3c                 | _do_getenvsustain_ret
12e3c     2D 00 64 FD | 	ret
12e40                 | 
12e40                 | ' 
12e40                 | ' sub do_sin
12e40                 | _do_sin
12e40     01 4A 05 F6 | 	mov	COUNT_, #1
12e44     A8 00 A0 FD | 	call	#pushregs_
12e48     10 F0 07 F1 | 	add	ptra, #16
12e4c     6A 00 00 FF 
12e50     64 E4 05 F1 | 	add	objptr, ##54372
12e54     F2 1E 02 FB | 	rdlong	local01, objptr
12e58     0F 17 02 F6 | 	mov	arg03, local01
12e5c     01 16 66 F0 | 	shl	arg03, #1
12e60     0F 17 02 F1 | 	add	arg03, local01
12e64     02 16 66 F0 | 	shl	arg03, #2
12e68     03 00 00 FF 
12e6c     04 E4 85 F1 | 	sub	objptr, ##1540
12e70     F2 16 02 F1 | 	add	arg03, objptr
12e74     0B 17 02 FB | 	rdlong	arg03, arg03
12e78     0C 4E 05 F1 | 	add	fp, #12
12e7c     A7 16 62 FC | 	wrlong	arg03, fp
12e80                 | ' 
12e80                 | ' numpar=compiledline(lineptr_e).result.uresult
12e80                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
12e80     0C 4E 85 F1 | 	sub	fp, #12
12e84     02 16 16 F2 | 	cmp	arg03, #2 wc
12e88     67 00 00 FF 
12e8c     60 E4 85 F1 | 	sub	objptr, ##52832
12e90     0C 4E 05 C1 |  if_b	add	fp, #12
12e94     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12e98     0C 4E 85 C1 |  if_b	sub	fp, #12
12e9c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1510
12ea0     00 12 06 F6 | 	mov	arg01, #0
12ea4     E0 ED B0 FD | 	call	#__system___getiolock_0474
12ea8     FD 12 02 F6 | 	mov	arg01, result1
12eac     48 94 B0 FD | 	call	#__system___lockmem
12eb0     5F 01 00 FF 
12eb4     1F 15 06 F6 | 	mov	arg02, ##@LR__4940
12eb8     00 12 06 F6 | 	mov	arg01, #0
12ebc     00 16 06 F6 | 	mov	arg03, #0
12ec0     38 A1 B0 FD | 	call	#__system___basic_print_string
12ec4     00 12 06 F6 | 	mov	arg01, #0
12ec8     BC ED B0 FD | 	call	#__system___getiolock_0474
12ecc     FD 00 68 FC | 	wrlong	#0, result1
12ed0     27 12 06 F6 | 	mov	arg01, #39
12ed4     80 5C B0 FD | 	call	#_printerror
12ed8     64 00 90 FD | 	jmp	#LR__1511
12edc                 | LR__1510
12edc     E8 71 BF FD | 	call	#_pop
12ee0     A7 FA 61 FC | 	wrlong	result1, fp
12ee4     04 4E 05 F1 | 	add	fp, #4
12ee8     A7 FC 61 FC | 	wrlong	result2, fp
12eec     04 4E 05 F1 | 	add	fp, #4
12ef0     A7 FE 61 FC | 	wrlong	result3, fp
12ef4     08 4E 85 F1 | 	sub	fp, #8
12ef8     7B 00 00 FF 
12efc     6C E4 05 F1 | 	add	objptr, ##63084
12f00     F2 1E 02 FB | 	rdlong	local01, objptr
12f04     7B 00 00 FF 
12f08     6C E4 85 F1 | 	sub	objptr, ##63084
12f0c     A7 12 02 F6 | 	mov	arg01, fp
12f10     B4 FB BF FD | 	call	#_converttofloat
12f14     FD 14 02 F6 | 	mov	arg02, result1
12f18     0F 13 02 F6 | 	mov	arg01, local01
12f1c     54 BF B0 FD | 	call	#__system___float_mul
12f20     FD 12 02 F6 | 	mov	arg01, result1
12f24     88 C8 B0 FD | 	call	#__system____builtin_sinf
12f28     A7 FA 61 FC | 	wrlong	result1, fp
12f2c     08 4E 05 F1 | 	add	fp, #8
12f30     A7 3C 68 FC | 	wrlong	#30, fp
12f34     08 4E 85 F1 | 	sub	fp, #8
12f38     A7 12 02 F6 | 	mov	arg01, fp
12f3c     20 72 BF FD | 	call	#_push
12f40                 | LR__1511
12f40     A7 F0 03 F6 | 	mov	ptra, fp
12f44     B2 00 A0 FD | 	call	#popregs_
12f48                 | _do_sin_ret
12f48     2D 00 64 FD | 	ret
12f4c                 | 
12f4c                 | ' 
12f4c                 | ' sub do_cos
12f4c                 | _do_cos
12f4c     01 4A 05 F6 | 	mov	COUNT_, #1
12f50     A8 00 A0 FD | 	call	#pushregs_
12f54     10 F0 07 F1 | 	add	ptra, #16
12f58     6A 00 00 FF 
12f5c     64 E4 05 F1 | 	add	objptr, ##54372
12f60     F2 1E 02 FB | 	rdlong	local01, objptr
12f64     0F 17 02 F6 | 	mov	arg03, local01
12f68     01 16 66 F0 | 	shl	arg03, #1
12f6c     0F 17 02 F1 | 	add	arg03, local01
12f70     02 16 66 F0 | 	shl	arg03, #2
12f74     03 00 00 FF 
12f78     04 E4 85 F1 | 	sub	objptr, ##1540
12f7c     F2 16 02 F1 | 	add	arg03, objptr
12f80     0B 17 02 FB | 	rdlong	arg03, arg03
12f84     0C 4E 05 F1 | 	add	fp, #12
12f88     A7 16 62 FC | 	wrlong	arg03, fp
12f8c                 | ' 
12f8c                 | ' numpar=compiledline(lineptr_e).result.uresult
12f8c                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
12f8c     0C 4E 85 F1 | 	sub	fp, #12
12f90     02 16 16 F2 | 	cmp	arg03, #2 wc
12f94     67 00 00 FF 
12f98     60 E4 85 F1 | 	sub	objptr, ##52832
12f9c     0C 4E 05 C1 |  if_b	add	fp, #12
12fa0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12fa4     0C 4E 85 C1 |  if_b	sub	fp, #12
12fa8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1520
12fac     00 12 06 F6 | 	mov	arg01, #0
12fb0     D4 EC B0 FD | 	call	#__system___getiolock_0474
12fb4     FD 12 02 F6 | 	mov	arg01, result1
12fb8     3C 93 B0 FD | 	call	#__system___lockmem
12fbc     5F 01 00 FF 
12fc0     25 15 06 F6 | 	mov	arg02, ##@LR__4941
12fc4     00 12 06 F6 | 	mov	arg01, #0
12fc8     00 16 06 F6 | 	mov	arg03, #0
12fcc     2C A0 B0 FD | 	call	#__system___basic_print_string
12fd0     00 12 06 F6 | 	mov	arg01, #0
12fd4     B0 EC B0 FD | 	call	#__system___getiolock_0474
12fd8     FD 00 68 FC | 	wrlong	#0, result1
12fdc     27 12 06 F6 | 	mov	arg01, #39
12fe0     74 5B B0 FD | 	call	#_printerror
12fe4     78 00 90 FD | 	jmp	#LR__1521
12fe8                 | LR__1520
12fe8     DC 70 BF FD | 	call	#_pop
12fec     A7 FA 61 FC | 	wrlong	result1, fp
12ff0     04 4E 05 F1 | 	add	fp, #4
12ff4     A7 FC 61 FC | 	wrlong	result2, fp
12ff8     04 4E 05 F1 | 	add	fp, #4
12ffc     A7 FE 61 FC | 	wrlong	result3, fp
13000     08 4E 85 F1 | 	sub	fp, #8
13004     7B 00 00 FF 
13008     6C E4 05 F1 | 	add	objptr, ##63084
1300c     F2 1E 02 FB | 	rdlong	local01, objptr
13010     7B 00 00 FF 
13014     6C E4 85 F1 | 	sub	objptr, ##63084
13018     A7 12 02 F6 | 	mov	arg01, fp
1301c     A8 FA BF FD | 	call	#_converttofloat
13020     FD 14 02 F6 | 	mov	arg02, result1
13024     0F 13 02 F6 | 	mov	arg01, local01
13028     48 BE B0 FD | 	call	#__system___float_mul
1302c     FD 14 02 F6 | 	mov	arg02, result1
13030     87 E4 1F FF 
13034     DB 13 06 F6 | 	mov	arg01, ##1070141403
13038     1F 14 E6 F4 | 	bitnot	arg02, #31
1303c     64 BA B0 FD | 	call	#__system___float_add
13040     FD 12 02 F6 | 	mov	arg01, result1
13044     68 C7 B0 FD | 	call	#__system____builtin_sinf
13048     A7 FA 61 FC | 	wrlong	result1, fp
1304c     08 4E 05 F1 | 	add	fp, #8
13050     A7 3C 68 FC | 	wrlong	#30, fp
13054     08 4E 85 F1 | 	sub	fp, #8
13058     A7 12 02 F6 | 	mov	arg01, fp
1305c     00 71 BF FD | 	call	#_push
13060                 | LR__1521
13060     A7 F0 03 F6 | 	mov	ptra, fp
13064     B2 00 A0 FD | 	call	#popregs_
13068                 | _do_cos_ret
13068     2D 00 64 FD | 	ret
1306c                 | 
1306c                 | ' 
1306c                 | ' sub do_tan
1306c                 | _do_tan
1306c     01 4A 05 F6 | 	mov	COUNT_, #1
13070     A8 00 A0 FD | 	call	#pushregs_
13074     10 F0 07 F1 | 	add	ptra, #16
13078     6A 00 00 FF 
1307c     64 E4 05 F1 | 	add	objptr, ##54372
13080     F2 1E 02 FB | 	rdlong	local01, objptr
13084     0F 17 02 F6 | 	mov	arg03, local01
13088     01 16 66 F0 | 	shl	arg03, #1
1308c     0F 17 02 F1 | 	add	arg03, local01
13090     02 16 66 F0 | 	shl	arg03, #2
13094     03 00 00 FF 
13098     04 E4 85 F1 | 	sub	objptr, ##1540
1309c     F2 16 02 F1 | 	add	arg03, objptr
130a0     0B 17 02 FB | 	rdlong	arg03, arg03
130a4     0C 4E 05 F1 | 	add	fp, #12
130a8     A7 16 62 FC | 	wrlong	arg03, fp
130ac                 | ' 
130ac                 | ' numpar=compiledline(lineptr_e).result.uresult
130ac                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
130ac     0C 4E 85 F1 | 	sub	fp, #12
130b0     02 16 16 F2 | 	cmp	arg03, #2 wc
130b4     67 00 00 FF 
130b8     60 E4 85 F1 | 	sub	objptr, ##52832
130bc     0C 4E 05 C1 |  if_b	add	fp, #12
130c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
130c4     0C 4E 85 C1 |  if_b	sub	fp, #12
130c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1530
130cc     00 12 06 F6 | 	mov	arg01, #0
130d0     B4 EB B0 FD | 	call	#__system___getiolock_0474
130d4     FD 12 02 F6 | 	mov	arg01, result1
130d8     1C 92 B0 FD | 	call	#__system___lockmem
130dc     5F 01 00 FF 
130e0     2B 15 06 F6 | 	mov	arg02, ##@LR__4942
130e4     00 12 06 F6 | 	mov	arg01, #0
130e8     00 16 06 F6 | 	mov	arg03, #0
130ec     0C 9F B0 FD | 	call	#__system___basic_print_string
130f0     00 12 06 F6 | 	mov	arg01, #0
130f4     90 EB B0 FD | 	call	#__system___getiolock_0474
130f8     FD 00 68 FC | 	wrlong	#0, result1
130fc     27 12 06 F6 | 	mov	arg01, #39
13100     54 5A B0 FD | 	call	#_printerror
13104     64 00 90 FD | 	jmp	#LR__1531
13108                 | LR__1530
13108     BC 6F BF FD | 	call	#_pop
1310c     A7 FA 61 FC | 	wrlong	result1, fp
13110     04 4E 05 F1 | 	add	fp, #4
13114     A7 FC 61 FC | 	wrlong	result2, fp
13118     04 4E 05 F1 | 	add	fp, #4
1311c     A7 FE 61 FC | 	wrlong	result3, fp
13120     08 4E 85 F1 | 	sub	fp, #8
13124     7B 00 00 FF 
13128     6C E4 05 F1 | 	add	objptr, ##63084
1312c     F2 1E 02 FB | 	rdlong	local01, objptr
13130     7B 00 00 FF 
13134     6C E4 85 F1 | 	sub	objptr, ##63084
13138     A7 12 02 F6 | 	mov	arg01, fp
1313c     88 F9 BF FD | 	call	#_converttofloat
13140     FD 14 02 F6 | 	mov	arg02, result1
13144     0F 13 02 F6 | 	mov	arg01, local01
13148     28 BD B0 FD | 	call	#__system___float_mul
1314c     FD 12 02 F6 | 	mov	arg01, result1
13150     A8 C7 B0 FD | 	call	#__system____builtin_tanf
13154     A7 FA 61 FC | 	wrlong	result1, fp
13158     08 4E 05 F1 | 	add	fp, #8
1315c     A7 3C 68 FC | 	wrlong	#30, fp
13160     08 4E 85 F1 | 	sub	fp, #8
13164     A7 12 02 F6 | 	mov	arg01, fp
13168     F4 6F BF FD | 	call	#_push
1316c                 | LR__1531
1316c     A7 F0 03 F6 | 	mov	ptra, fp
13170     B2 00 A0 FD | 	call	#popregs_
13174                 | _do_tan_ret
13174     2D 00 64 FD | 	ret
13178                 | 
13178                 | ' 
13178                 | ' sub do_asin
13178                 | _do_asin
13178     01 4A 05 F6 | 	mov	COUNT_, #1
1317c     A8 00 A0 FD | 	call	#pushregs_
13180     10 F0 07 F1 | 	add	ptra, #16
13184     6A 00 00 FF 
13188     64 E4 05 F1 | 	add	objptr, ##54372
1318c     F2 1E 02 FB | 	rdlong	local01, objptr
13190     0F 17 02 F6 | 	mov	arg03, local01
13194     01 16 66 F0 | 	shl	arg03, #1
13198     0F 17 02 F1 | 	add	arg03, local01
1319c     02 16 66 F0 | 	shl	arg03, #2
131a0     03 00 00 FF 
131a4     04 E4 85 F1 | 	sub	objptr, ##1540
131a8     F2 16 02 F1 | 	add	arg03, objptr
131ac     0B 17 02 FB | 	rdlong	arg03, arg03
131b0     0C 4E 05 F1 | 	add	fp, #12
131b4     A7 16 62 FC | 	wrlong	arg03, fp
131b8                 | ' 
131b8                 | ' numpar=compiledline(lineptr_e).result.uresult
131b8                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
131b8     0C 4E 85 F1 | 	sub	fp, #12
131bc     02 16 16 F2 | 	cmp	arg03, #2 wc
131c0     67 00 00 FF 
131c4     60 E4 85 F1 | 	sub	objptr, ##52832
131c8     0C 4E 05 C1 |  if_b	add	fp, #12
131cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
131d0     0C 4E 85 C1 |  if_b	sub	fp, #12
131d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
131d8     00 12 06 F6 | 	mov	arg01, #0
131dc     A8 EA B0 FD | 	call	#__system___getiolock_0474
131e0     FD 12 02 F6 | 	mov	arg01, result1
131e4     10 91 B0 FD | 	call	#__system___lockmem
131e8     5F 01 00 FF 
131ec     31 15 06 F6 | 	mov	arg02, ##@LR__4943
131f0     00 12 06 F6 | 	mov	arg01, #0
131f4     00 16 06 F6 | 	mov	arg03, #0
131f8     00 9E B0 FD | 	call	#__system___basic_print_string
131fc     00 12 06 F6 | 	mov	arg01, #0
13200     84 EA B0 FD | 	call	#__system___getiolock_0474
13204     FD 00 68 FC | 	wrlong	#0, result1
13208     27 12 06 F6 | 	mov	arg01, #39
1320c     48 59 B0 FD | 	call	#_printerror
13210     64 00 90 FD | 	jmp	#LR__1541
13214                 | LR__1540
13214     B0 6E BF FD | 	call	#_pop
13218     FF 1E 02 F6 | 	mov	local01, result3
1321c     A7 FA 61 FC | 	wrlong	result1, fp
13220     04 4E 05 F1 | 	add	fp, #4
13224     A7 FC 61 FC | 	wrlong	result2, fp
13228     04 4E 05 F1 | 	add	fp, #4
1322c     A7 1E 62 FC | 	wrlong	local01, fp
13230     08 4E 85 F1 | 	sub	fp, #8
13234     A7 12 02 F6 | 	mov	arg01, fp
13238     8C F8 BF FD | 	call	#_converttofloat
1323c     FD 12 02 F6 | 	mov	arg01, result1
13240     00 C7 B0 FD | 	call	#__system____builtin_asinf
13244     FD 12 02 F6 | 	mov	arg01, result1
13248     7B 00 00 FF 
1324c     70 E4 05 F1 | 	add	objptr, ##63088
13250     F2 14 02 FB | 	rdlong	arg02, objptr
13254     7B 00 00 FF 
13258     70 E4 85 F1 | 	sub	objptr, ##63088
1325c     14 BC B0 FD | 	call	#__system___float_mul
13260     A7 FA 61 FC | 	wrlong	result1, fp
13264     08 4E 05 F1 | 	add	fp, #8
13268     A7 3C 68 FC | 	wrlong	#30, fp
1326c     08 4E 85 F1 | 	sub	fp, #8
13270     A7 12 02 F6 | 	mov	arg01, fp
13274     E8 6E BF FD | 	call	#_push
13278                 | LR__1541
13278     A7 F0 03 F6 | 	mov	ptra, fp
1327c     B2 00 A0 FD | 	call	#popregs_
13280                 | _do_asin_ret
13280     2D 00 64 FD | 	ret
13284                 | 
13284                 | ' 
13284                 | ' sub do_acos
13284                 | _do_acos
13284     01 4A 05 F6 | 	mov	COUNT_, #1
13288     A8 00 A0 FD | 	call	#pushregs_
1328c     10 F0 07 F1 | 	add	ptra, #16
13290     6A 00 00 FF 
13294     64 E4 05 F1 | 	add	objptr, ##54372
13298     F2 1E 02 FB | 	rdlong	local01, objptr
1329c     0F 17 02 F6 | 	mov	arg03, local01
132a0     01 16 66 F0 | 	shl	arg03, #1
132a4     0F 17 02 F1 | 	add	arg03, local01
132a8     02 16 66 F0 | 	shl	arg03, #2
132ac     03 00 00 FF 
132b0     04 E4 85 F1 | 	sub	objptr, ##1540
132b4     F2 16 02 F1 | 	add	arg03, objptr
132b8     0B 17 02 FB | 	rdlong	arg03, arg03
132bc     0C 4E 05 F1 | 	add	fp, #12
132c0     A7 16 62 FC | 	wrlong	arg03, fp
132c4                 | ' 
132c4                 | ' numpar=compiledline(lineptr_e).result.uresult
132c4                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
132c4     0C 4E 85 F1 | 	sub	fp, #12
132c8     02 16 16 F2 | 	cmp	arg03, #2 wc
132cc     67 00 00 FF 
132d0     60 E4 85 F1 | 	sub	objptr, ##52832
132d4     0C 4E 05 C1 |  if_b	add	fp, #12
132d8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
132dc     0C 4E 85 C1 |  if_b	sub	fp, #12
132e0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1550
132e4     00 12 06 F6 | 	mov	arg01, #0
132e8     9C E9 B0 FD | 	call	#__system___getiolock_0474
132ec     FD 12 02 F6 | 	mov	arg01, result1
132f0     04 90 B0 FD | 	call	#__system___lockmem
132f4     5F 01 00 FF 
132f8     38 15 06 F6 | 	mov	arg02, ##@LR__4944
132fc     00 12 06 F6 | 	mov	arg01, #0
13300     00 16 06 F6 | 	mov	arg03, #0
13304     F4 9C B0 FD | 	call	#__system___basic_print_string
13308     00 12 06 F6 | 	mov	arg01, #0
1330c     78 E9 B0 FD | 	call	#__system___getiolock_0474
13310     FD 00 68 FC | 	wrlong	#0, result1
13314     27 12 06 F6 | 	mov	arg01, #39
13318     3C 58 B0 FD | 	call	#_printerror
1331c     64 00 90 FD | 	jmp	#LR__1551
13320                 | LR__1550
13320     A4 6D BF FD | 	call	#_pop
13324     FF 1E 02 F6 | 	mov	local01, result3
13328     A7 FA 61 FC | 	wrlong	result1, fp
1332c     04 4E 05 F1 | 	add	fp, #4
13330     A7 FC 61 FC | 	wrlong	result2, fp
13334     04 4E 05 F1 | 	add	fp, #4
13338     A7 1E 62 FC | 	wrlong	local01, fp
1333c     08 4E 85 F1 | 	sub	fp, #8
13340     A7 12 02 F6 | 	mov	arg01, fp
13344     80 F7 BF FD | 	call	#_converttofloat
13348     FD 12 02 F6 | 	mov	arg01, result1
1334c     40 C6 B0 FD | 	call	#__system____builtin_acosf
13350     FD 12 02 F6 | 	mov	arg01, result1
13354     7B 00 00 FF 
13358     70 E4 05 F1 | 	add	objptr, ##63088
1335c     F2 14 02 FB | 	rdlong	arg02, objptr
13360     7B 00 00 FF 
13364     70 E4 85 F1 | 	sub	objptr, ##63088
13368     08 BB B0 FD | 	call	#__system___float_mul
1336c     A7 FA 61 FC | 	wrlong	result1, fp
13370     08 4E 05 F1 | 	add	fp, #8
13374     A7 3C 68 FC | 	wrlong	#30, fp
13378     08 4E 85 F1 | 	sub	fp, #8
1337c     A7 12 02 F6 | 	mov	arg01, fp
13380     DC 6D BF FD | 	call	#_push
13384                 | LR__1551
13384     A7 F0 03 F6 | 	mov	ptra, fp
13388     B2 00 A0 FD | 	call	#popregs_
1338c                 | _do_acos_ret
1338c     2D 00 64 FD | 	ret
13390                 | 
13390                 | ' 
13390                 | ' sub do_atn
13390                 | _do_atn
13390     01 4A 05 F6 | 	mov	COUNT_, #1
13394     A8 00 A0 FD | 	call	#pushregs_
13398     10 F0 07 F1 | 	add	ptra, #16
1339c     6A 00 00 FF 
133a0     64 E4 05 F1 | 	add	objptr, ##54372
133a4     F2 1E 02 FB | 	rdlong	local01, objptr
133a8     0F 17 02 F6 | 	mov	arg03, local01
133ac     01 16 66 F0 | 	shl	arg03, #1
133b0     0F 17 02 F1 | 	add	arg03, local01
133b4     02 16 66 F0 | 	shl	arg03, #2
133b8     03 00 00 FF 
133bc     04 E4 85 F1 | 	sub	objptr, ##1540
133c0     F2 16 02 F1 | 	add	arg03, objptr
133c4     0B 17 02 FB | 	rdlong	arg03, arg03
133c8     0C 4E 05 F1 | 	add	fp, #12
133cc     A7 16 62 FC | 	wrlong	arg03, fp
133d0                 | ' 
133d0                 | ' numpar=compiledline(lineptr_e).result.uresult
133d0                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
133d0     0C 4E 85 F1 | 	sub	fp, #12
133d4     02 16 16 F2 | 	cmp	arg03, #2 wc
133d8     67 00 00 FF 
133dc     60 E4 85 F1 | 	sub	objptr, ##52832
133e0     0C 4E 05 C1 |  if_b	add	fp, #12
133e4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
133e8     0C 4E 85 C1 |  if_b	sub	fp, #12
133ec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
133f0     00 12 06 F6 | 	mov	arg01, #0
133f4     90 E8 B0 FD | 	call	#__system___getiolock_0474
133f8     FD 12 02 F6 | 	mov	arg01, result1
133fc     F8 8E B0 FD | 	call	#__system___lockmem
13400     5F 01 00 FF 
13404     3F 15 06 F6 | 	mov	arg02, ##@LR__4945
13408     00 12 06 F6 | 	mov	arg01, #0
1340c     00 16 06 F6 | 	mov	arg03, #0
13410     E8 9B B0 FD | 	call	#__system___basic_print_string
13414     00 12 06 F6 | 	mov	arg01, #0
13418     6C E8 B0 FD | 	call	#__system___getiolock_0474
1341c     FD 00 68 FC | 	wrlong	#0, result1
13420     27 12 06 F6 | 	mov	arg01, #39
13424     30 57 B0 FD | 	call	#_printerror
13428     6C 00 90 FD | 	jmp	#LR__1561
1342c                 | LR__1560
1342c     98 6C BF FD | 	call	#_pop
13430     FF 1E 02 F6 | 	mov	local01, result3
13434     A7 FA 61 FC | 	wrlong	result1, fp
13438     04 4E 05 F1 | 	add	fp, #4
1343c     A7 FC 61 FC | 	wrlong	result2, fp
13440     04 4E 05 F1 | 	add	fp, #4
13444     A7 1E 62 FC | 	wrlong	local01, fp
13448     08 4E 85 F1 | 	sub	fp, #8
1344c     A7 12 02 F6 | 	mov	arg01, fp
13450     74 F6 BF FD | 	call	#_converttofloat
13454     FD 12 02 F6 | 	mov	arg01, result1
13458     00 C0 1F FF 
1345c     00 14 06 F6 | 	mov	arg02, ##1065353216
13460     78 C5 B0 FD | 	call	#__system____builtin_atan2f
13464     FD 12 02 F6 | 	mov	arg01, result1
13468     7B 00 00 FF 
1346c     70 E4 05 F1 | 	add	objptr, ##63088
13470     F2 14 02 FB | 	rdlong	arg02, objptr
13474     7B 00 00 FF 
13478     70 E4 85 F1 | 	sub	objptr, ##63088
1347c     F4 B9 B0 FD | 	call	#__system___float_mul
13480     A7 FA 61 FC | 	wrlong	result1, fp
13484     08 4E 05 F1 | 	add	fp, #8
13488     A7 3C 68 FC | 	wrlong	#30, fp
1348c     08 4E 85 F1 | 	sub	fp, #8
13490     A7 12 02 F6 | 	mov	arg01, fp
13494     C8 6C BF FD | 	call	#_push
13498                 | LR__1561
13498     A7 F0 03 F6 | 	mov	ptra, fp
1349c     B2 00 A0 FD | 	call	#popregs_
134a0                 | _do_atn_ret
134a0     2D 00 64 FD | 	ret
134a4                 | 
134a4                 | ' 
134a4                 | ' sub do_sqr
134a4                 | _do_sqr
134a4     01 4A 05 F6 | 	mov	COUNT_, #1
134a8     A8 00 A0 FD | 	call	#pushregs_
134ac     10 F0 07 F1 | 	add	ptra, #16
134b0     6A 00 00 FF 
134b4     64 E4 05 F1 | 	add	objptr, ##54372
134b8     F2 1E 02 FB | 	rdlong	local01, objptr
134bc     0F 17 02 F6 | 	mov	arg03, local01
134c0     01 16 66 F0 | 	shl	arg03, #1
134c4     0F 17 02 F1 | 	add	arg03, local01
134c8     02 16 66 F0 | 	shl	arg03, #2
134cc     03 00 00 FF 
134d0     04 E4 85 F1 | 	sub	objptr, ##1540
134d4     F2 16 02 F1 | 	add	arg03, objptr
134d8     0B 17 02 FB | 	rdlong	arg03, arg03
134dc     0C 4E 05 F1 | 	add	fp, #12
134e0     A7 16 62 FC | 	wrlong	arg03, fp
134e4                 | ' 
134e4                 | ' numpar=compiledline(lineptr_e).result.uresult
134e4                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
134e4     0C 4E 85 F1 | 	sub	fp, #12
134e8     02 16 16 F2 | 	cmp	arg03, #2 wc
134ec     67 00 00 FF 
134f0     60 E4 85 F1 | 	sub	objptr, ##52832
134f4     0C 4E 05 C1 |  if_b	add	fp, #12
134f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
134fc     0C 4E 85 C1 |  if_b	sub	fp, #12
13500     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
13504     00 12 06 F6 | 	mov	arg01, #0
13508     7C E7 B0 FD | 	call	#__system___getiolock_0474
1350c     FD 12 02 F6 | 	mov	arg01, result1
13510     E4 8D B0 FD | 	call	#__system___lockmem
13514     5F 01 00 FF 
13518     45 15 06 F6 | 	mov	arg02, ##@LR__4946
1351c     00 12 06 F6 | 	mov	arg01, #0
13520     00 16 06 F6 | 	mov	arg03, #0
13524     D4 9A B0 FD | 	call	#__system___basic_print_string
13528     00 12 06 F6 | 	mov	arg01, #0
1352c     58 E7 B0 FD | 	call	#__system___getiolock_0474
13530     FD 00 68 FC | 	wrlong	#0, result1
13534     27 12 06 F6 | 	mov	arg01, #39
13538     1C 56 B0 FD | 	call	#_printerror
1353c     48 00 90 FD | 	jmp	#LR__1571
13540                 | LR__1570
13540     84 6B BF FD | 	call	#_pop
13544     FF 1E 02 F6 | 	mov	local01, result3
13548     A7 FA 61 FC | 	wrlong	result1, fp
1354c     04 4E 05 F1 | 	add	fp, #4
13550     A7 FC 61 FC | 	wrlong	result2, fp
13554     04 4E 05 F1 | 	add	fp, #4
13558     A7 1E 62 FC | 	wrlong	local01, fp
1355c     08 4E 85 F1 | 	sub	fp, #8
13560     A7 12 02 F6 | 	mov	arg01, fp
13564     60 F5 BF FD | 	call	#_converttofloat
13568     FD 12 02 F6 | 	mov	arg01, result1
1356c     2C B8 B0 FD | 	call	#__system___float_sqrt
13570     A7 FA 61 FC | 	wrlong	result1, fp
13574     08 4E 05 F1 | 	add	fp, #8
13578     A7 3C 68 FC | 	wrlong	#30, fp
1357c     08 4E 85 F1 | 	sub	fp, #8
13580     A7 12 02 F6 | 	mov	arg01, fp
13584     D8 6B BF FD | 	call	#_push
13588                 | LR__1571
13588     A7 F0 03 F6 | 	mov	ptra, fp
1358c     B2 00 A0 FD | 	call	#popregs_
13590                 | _do_sqr_ret
13590     2D 00 64 FD | 	ret
13594                 | 
13594                 | ' 
13594                 | ' sub do_stick
13594                 | _do_stick
13594     01 4A 05 F6 | 	mov	COUNT_, #1
13598     A8 00 A0 FD | 	call	#pushregs_
1359c     10 F0 07 F1 | 	add	ptra, #16
135a0     6A 00 00 FF 
135a4     64 E4 05 F1 | 	add	objptr, ##54372
135a8     F2 1E 02 FB | 	rdlong	local01, objptr
135ac     0F 17 02 F6 | 	mov	arg03, local01
135b0     01 16 66 F0 | 	shl	arg03, #1
135b4     0F 17 02 F1 | 	add	arg03, local01
135b8     02 16 66 F0 | 	shl	arg03, #2
135bc     03 00 00 FF 
135c0     04 E4 85 F1 | 	sub	objptr, ##1540
135c4     F2 16 02 F1 | 	add	arg03, objptr
135c8     0B 17 02 FB | 	rdlong	arg03, arg03
135cc     0C 4E 05 F1 | 	add	fp, #12
135d0     A7 16 62 FC | 	wrlong	arg03, fp
135d4                 | ' 
135d4                 | ' numpar=compiledline(lineptr_e).result.uresult
135d4                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
135d4     0C 4E 85 F1 | 	sub	fp, #12
135d8     02 16 16 F2 | 	cmp	arg03, #2 wc
135dc     67 00 00 FF 
135e0     60 E4 85 F1 | 	sub	objptr, ##52832
135e4     3C 00 90 CD |  if_b	jmp	#LR__1580
135e8     00 12 06 F6 | 	mov	arg01, #0
135ec     98 E6 B0 FD | 	call	#__system___getiolock_0474
135f0     FD 12 02 F6 | 	mov	arg01, result1
135f4     00 8D B0 FD | 	call	#__system___lockmem
135f8     5F 01 00 FF 
135fc     4B 15 06 F6 | 	mov	arg02, ##@LR__4947
13600     00 12 06 F6 | 	mov	arg01, #0
13604     00 16 06 F6 | 	mov	arg03, #0
13608     F0 99 B0 FD | 	call	#__system___basic_print_string
1360c     00 12 06 F6 | 	mov	arg01, #0
13610     74 E6 B0 FD | 	call	#__system___getiolock_0474
13614     FD 00 68 FC | 	wrlong	#0, result1
13618     27 12 06 F6 | 	mov	arg01, #39
1361c     38 55 B0 FD | 	call	#_printerror
13620     E8 00 90 FD | 	jmp	#LR__1584
13624                 | LR__1580
13624                 | ' 
13624                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
13624     0C 4E 05 F1 | 	add	fp, #12
13628     A7 FE 09 FB | 	rdlong	result3, fp wz
1362c     0C 4E 85 F1 | 	sub	fp, #12
13630     30 00 90 5D |  if_ne	jmp	#LR__1581
13634     7A 00 00 FF 
13638     E0 E5 05 F1 | 	add	objptr, ##62944
1363c     F2 1E 02 FB | 	rdlong	local01, objptr
13640     7A 00 00 FF 
13644     E0 E5 85 F1 | 	sub	objptr, ##62944
13648     A7 1E 62 FC | 	wrlong	local01, fp
1364c     08 4E 05 F1 | 	add	fp, #8
13650     A7 3A 68 FC | 	wrlong	#29, fp
13654     08 4E 85 F1 | 	sub	fp, #8
13658     A7 12 02 F6 | 	mov	arg01, fp
1365c     00 6B BF FD | 	call	#_push
13660     A8 00 90 FD | 	jmp	#LR__1584
13664                 | LR__1581
13664     60 6A BF FD | 	call	#_pop
13668     A7 FA 61 FC | 	wrlong	result1, fp
1366c     04 4E 05 F1 | 	add	fp, #4
13670     A7 FC 61 FC | 	wrlong	result2, fp
13674     04 4E 05 F1 | 	add	fp, #4
13678     A7 FE 61 FC | 	wrlong	result3, fp
1367c                 | ' 
1367c                 | ' t1=pop()
1367c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1367c     08 4E 85 F1 | 	sub	fp, #8
13680     1C FE 0D F2 | 	cmp	result3, #28 wz
13684     08 4E 05 51 |  if_ne	add	fp, #8
13688     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1368c     08 4E 85 51 |  if_ne	sub	fp, #8
13690     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13694     6C 00 90 5D |  if_ne	jmp	#LR__1583
13698     A7 1E 02 FB | 	rdlong	local01, fp
1369c     7B 00 00 FF 
136a0     C8 E4 05 F1 | 	add	objptr, ##63176
136a4     F2 1E 62 FC | 	wrlong	local01, objptr
136a8                 | '   q=t1.result.uresult
136a8                 | '   if q<7 then 
136a8     7B 00 00 FF 
136ac     C8 E4 85 F1 | 	sub	objptr, ##63176
136b0     07 1E 56 F2 | 	cmps	local01, #7 wc
136b4     40 00 90 3D |  if_ae	jmp	#LR__1582
136b8     7B 00 00 FF 
136bc     C8 E4 05 F1 | 	add	objptr, ##63176
136c0     F2 1E 02 FB | 	rdlong	local01, objptr
136c4     02 1E 66 F0 | 	shl	local01, #2
136c8     E8 E4 85 F1 | 	sub	objptr, #232
136cc     F2 1E 02 F1 | 	add	local01, objptr
136d0     0F 1F 02 FB | 	rdlong	local01, local01
136d4     A7 1E 62 FC | 	wrlong	local01, fp
136d8     08 4E 05 F1 | 	add	fp, #8
136dc     A7 3A 68 FC | 	wrlong	#29, fp
136e0     08 4E 85 F1 | 	sub	fp, #8
136e4     A7 12 02 F6 | 	mov	arg01, fp
136e8     7A 00 00 FF 
136ec     E0 E5 85 F1 | 	sub	objptr, ##62944
136f0     6C 6A BF FD | 	call	#_push
136f4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
136f4     14 00 90 FD | 	jmp	#LR__1584
136f8                 | LR__1582
136f8     29 12 06 F6 | 	mov	arg01, #41
136fc     58 54 B0 FD | 	call	#_printerror
13700                 | '      printerror(41) : return
13700     08 00 90 FD | 	jmp	#LR__1584
13704                 | LR__1583
13704     29 12 06 F6 | 	mov	arg01, #41
13708     4C 54 B0 FD | 	call	#_printerror
1370c                 | LR__1584
1370c     A7 F0 03 F6 | 	mov	ptra, fp
13710     B2 00 A0 FD | 	call	#popregs_
13714                 | _do_stick_ret
13714     2D 00 64 FD | 	ret
13718                 | 
13718                 | ' 
13718                 | ' sub do_strig
13718                 | _do_strig
13718     01 4A 05 F6 | 	mov	COUNT_, #1
1371c     A8 00 A0 FD | 	call	#pushregs_
13720     10 F0 07 F1 | 	add	ptra, #16
13724     6A 00 00 FF 
13728     64 E4 05 F1 | 	add	objptr, ##54372
1372c     F2 1E 02 FB | 	rdlong	local01, objptr
13730     0F 17 02 F6 | 	mov	arg03, local01
13734     01 16 66 F0 | 	shl	arg03, #1
13738     0F 17 02 F1 | 	add	arg03, local01
1373c     02 16 66 F0 | 	shl	arg03, #2
13740     03 00 00 FF 
13744     04 E4 85 F1 | 	sub	objptr, ##1540
13748     F2 16 02 F1 | 	add	arg03, objptr
1374c     0B 17 02 FB | 	rdlong	arg03, arg03
13750     0C 4E 05 F1 | 	add	fp, #12
13754     A7 16 62 FC | 	wrlong	arg03, fp
13758                 | ' 
13758                 | ' numpar=compiledline(lineptr_e).result.uresult
13758                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
13758     0C 4E 85 F1 | 	sub	fp, #12
1375c     02 16 16 F2 | 	cmp	arg03, #2 wc
13760     67 00 00 FF 
13764     60 E4 85 F1 | 	sub	objptr, ##52832
13768     3C 00 90 CD |  if_b	jmp	#LR__1590
1376c     00 12 06 F6 | 	mov	arg01, #0
13770     14 E5 B0 FD | 	call	#__system___getiolock_0474
13774     FD 12 02 F6 | 	mov	arg01, result1
13778     7C 8B B0 FD | 	call	#__system___lockmem
1377c     5F 01 00 FF 
13780     53 15 06 F6 | 	mov	arg02, ##@LR__4948
13784     00 12 06 F6 | 	mov	arg01, #0
13788     00 16 06 F6 | 	mov	arg03, #0
1378c     6C 98 B0 FD | 	call	#__system___basic_print_string
13790     00 12 06 F6 | 	mov	arg01, #0
13794     F0 E4 B0 FD | 	call	#__system___getiolock_0474
13798     FD 00 68 FC | 	wrlong	#0, result1
1379c     27 12 06 F6 | 	mov	arg01, #39
137a0     B4 53 B0 FD | 	call	#_printerror
137a4     E8 00 90 FD | 	jmp	#LR__1594
137a8                 | LR__1590
137a8                 | ' 
137a8                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
137a8     0C 4E 05 F1 | 	add	fp, #12
137ac     A7 FE 09 FB | 	rdlong	result3, fp wz
137b0     0C 4E 85 F1 | 	sub	fp, #12
137b4     30 00 90 5D |  if_ne	jmp	#LR__1591
137b8     7A 00 00 FF 
137bc     FC E5 05 F1 | 	add	objptr, ##62972
137c0     F2 1E 02 FB | 	rdlong	local01, objptr
137c4     7A 00 00 FF 
137c8     FC E5 85 F1 | 	sub	objptr, ##62972
137cc     A7 1E 62 FC | 	wrlong	local01, fp
137d0     08 4E 05 F1 | 	add	fp, #8
137d4     A7 3A 68 FC | 	wrlong	#29, fp
137d8     08 4E 85 F1 | 	sub	fp, #8
137dc     A7 12 02 F6 | 	mov	arg01, fp
137e0     7C 69 BF FD | 	call	#_push
137e4     A8 00 90 FD | 	jmp	#LR__1594
137e8                 | LR__1591
137e8     DC 68 BF FD | 	call	#_pop
137ec     A7 FA 61 FC | 	wrlong	result1, fp
137f0     04 4E 05 F1 | 	add	fp, #4
137f4     A7 FC 61 FC | 	wrlong	result2, fp
137f8     04 4E 05 F1 | 	add	fp, #4
137fc     A7 FE 61 FC | 	wrlong	result3, fp
13800                 | ' 
13800                 | ' t1=pop()
13800                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
13800     08 4E 85 F1 | 	sub	fp, #8
13804     1C FE 0D F2 | 	cmp	result3, #28 wz
13808     08 4E 05 51 |  if_ne	add	fp, #8
1380c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13810     08 4E 85 51 |  if_ne	sub	fp, #8
13814     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13818     6C 00 90 5D |  if_ne	jmp	#LR__1593
1381c     A7 1E 02 FB | 	rdlong	local01, fp
13820     7B 00 00 FF 
13824     C8 E4 05 F1 | 	add	objptr, ##63176
13828     F2 1E 62 FC | 	wrlong	local01, objptr
1382c                 | '   q=t1.result.uresult
1382c                 | '   if q<7 then 
1382c     7B 00 00 FF 
13830     C8 E4 85 F1 | 	sub	objptr, ##63176
13834     07 1E 56 F2 | 	cmps	local01, #7 wc
13838     40 00 90 3D |  if_ae	jmp	#LR__1592
1383c     7B 00 00 FF 
13840     C8 E4 05 F1 | 	add	objptr, ##63176
13844     F2 1E 02 FB | 	rdlong	local01, objptr
13848     02 1E 66 F0 | 	shl	local01, #2
1384c     CC E4 85 F1 | 	sub	objptr, #204
13850     F2 1E 02 F1 | 	add	local01, objptr
13854     0F 1F 02 FB | 	rdlong	local01, local01
13858     A7 1E 62 FC | 	wrlong	local01, fp
1385c     08 4E 05 F1 | 	add	fp, #8
13860     A7 3A 68 FC | 	wrlong	#29, fp
13864     08 4E 85 F1 | 	sub	fp, #8
13868     A7 12 02 F6 | 	mov	arg01, fp
1386c     7A 00 00 FF 
13870     FC E5 85 F1 | 	sub	objptr, ##62972
13874     E8 68 BF FD | 	call	#_push
13878                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
13878     14 00 90 FD | 	jmp	#LR__1594
1387c                 | LR__1592
1387c     29 12 06 F6 | 	mov	arg01, #41
13880     D4 52 B0 FD | 	call	#_printerror
13884                 | '      printerror(41) : return
13884     08 00 90 FD | 	jmp	#LR__1594
13888                 | LR__1593
13888     29 12 06 F6 | 	mov	arg01, #41
1388c     C8 52 B0 FD | 	call	#_printerror
13890                 | LR__1594
13890     A7 F0 03 F6 | 	mov	ptra, fp
13894     B2 00 A0 FD | 	call	#popregs_
13898                 | _do_strig_ret
13898     2D 00 64 FD | 	ret
1389c                 | 
1389c                 | ' 
1389c                 | ' sub do_getpixel
1389c                 | _do_getpixel
1389c     00 4A 05 F6 | 	mov	COUNT_, #0
138a0     A8 00 A0 FD | 	call	#pushregs_
138a4     24 F0 07 F1 | 	add	ptra, #36
138a8     6A 00 00 FF 
138ac     64 E4 05 F1 | 	add	objptr, ##54372
138b0     F2 16 02 FB | 	rdlong	arg03, objptr
138b4     0B 15 02 F6 | 	mov	arg02, arg03
138b8     01 14 66 F0 | 	shl	arg02, #1
138bc     0B 15 02 F1 | 	add	arg02, arg03
138c0     02 14 66 F0 | 	shl	arg02, #2
138c4     03 00 00 FF 
138c8     04 E4 85 F1 | 	sub	objptr, ##1540
138cc     F2 14 02 F1 | 	add	arg02, objptr
138d0     0A 17 02 FB | 	rdlong	arg03, arg02
138d4     18 4E 05 F1 | 	add	fp, #24
138d8     A7 16 62 FC | 	wrlong	arg03, fp
138dc                 | ' 
138dc                 | ' numpar=compiledline(lineptr_e).result.uresult
138dc                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
138dc     18 4E 85 F1 | 	sub	fp, #24
138e0     02 16 0E F2 | 	cmp	arg03, #2 wz
138e4     67 00 00 FF 
138e8     60 E4 85 F1 | 	sub	objptr, ##52832
138ec     3C 00 90 AD |  if_e	jmp	#LR__1600
138f0     00 12 06 F6 | 	mov	arg01, #0
138f4     90 E3 B0 FD | 	call	#__system___getiolock_0474
138f8     FD 12 02 F6 | 	mov	arg01, result1
138fc     F8 89 B0 FD | 	call	#__system___lockmem
13900     5F 01 00 FF 
13904     5B 15 06 F6 | 	mov	arg02, ##@LR__4949
13908     00 12 06 F6 | 	mov	arg01, #0
1390c     00 16 06 F6 | 	mov	arg03, #0
13910     E8 96 B0 FD | 	call	#__system___basic_print_string
13914     00 12 06 F6 | 	mov	arg01, #0
13918     6C E3 B0 FD | 	call	#__system___getiolock_0474
1391c     FD 00 68 FC | 	wrlong	#0, result1
13920     27 12 06 F6 | 	mov	arg01, #39
13924     30 52 B0 FD | 	call	#_printerror
13928     B4 00 90 FD | 	jmp	#LR__1601
1392c                 | LR__1600
1392c     98 67 BF FD | 	call	#_pop
13930     FD 16 02 F6 | 	mov	arg03, result1
13934     FE 14 02 F6 | 	mov	arg02, result2
13938     FF 12 02 F6 | 	mov	arg01, result3
1393c     0C 4E 05 F1 | 	add	fp, #12
13940     A7 16 62 FC | 	wrlong	arg03, fp
13944     04 4E 05 F1 | 	add	fp, #4
13948     A7 14 62 FC | 	wrlong	arg02, fp
1394c     04 4E 05 F1 | 	add	fp, #4
13950     A7 12 62 FC | 	wrlong	arg01, fp
13954     14 4E 85 F1 | 	sub	fp, #20
13958     6C 67 BF FD | 	call	#_pop
1395c     FF 16 02 F6 | 	mov	arg03, result3
13960     A7 FA 61 FC | 	wrlong	result1, fp
13964     04 4E 05 F1 | 	add	fp, #4
13968     A7 FC 61 FC | 	wrlong	result2, fp
1396c     04 4E 05 F1 | 	add	fp, #4
13970     A7 16 62 FC | 	wrlong	arg03, fp
13974     08 4E 85 F1 | 	sub	fp, #8
13978     A7 12 02 F6 | 	mov	arg01, fp
1397c     9C F0 BF FD | 	call	#_converttoint
13980     1C 4E 05 F1 | 	add	fp, #28
13984     A7 FA 61 FC | 	wrlong	result1, fp
13988     10 4E 85 F1 | 	sub	fp, #16
1398c     A7 12 02 F6 | 	mov	arg01, fp
13990     0C 4E 85 F1 | 	sub	fp, #12
13994     84 F0 BF FD | 	call	#_converttoint
13998     FD 16 02 F6 | 	mov	arg03, result1
1399c     20 4E 05 F1 | 	add	fp, #32
139a0     A7 16 62 FC | 	wrlong	arg03, fp
139a4     F2 12 02 FB | 	rdlong	arg01, objptr
139a8     04 4E 85 F1 | 	sub	fp, #4
139ac     A7 FE 01 FB | 	rdlong	result3, fp
139b0     FF 12 02 F1 | 	add	arg01, result3
139b4     1C 4E 85 F1 | 	sub	fp, #28
139b8     0A 16 66 F0 | 	shl	arg03, #10
139bc     0B 13 02 F1 | 	add	arg01, arg03
139c0     D0 53 B0 FD | 	call	#_pspeek
139c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
139c8     A7 FA 61 FC | 	wrlong	result1, fp
139cc     08 4E 05 F1 | 	add	fp, #8
139d0     A7 3A 68 FC | 	wrlong	#29, fp
139d4     08 4E 85 F1 | 	sub	fp, #8
139d8     A7 12 02 F6 | 	mov	arg01, fp
139dc     80 67 BF FD | 	call	#_push
139e0                 | LR__1601
139e0     A7 F0 03 F6 | 	mov	ptra, fp
139e4     B2 00 A0 FD | 	call	#popregs_
139e8                 | _do_getpixel_ret
139e8     2D 00 64 FD | 	ret
139ec                 | 
139ec                 | ' 
139ec                 | ' 
139ec                 | ' 
139ec                 | ' sub do_defsprite
139ec                 | _do_defsprite
139ec     07 4A 05 F6 | 	mov	COUNT_, #7
139f0     A8 00 A0 FD | 	call	#pushregs_
139f4     5C F0 07 F1 | 	add	ptra, #92
139f8     CC 66 BF FD | 	call	#_pop
139fc     FD 16 02 F6 | 	mov	arg03, result1
13a00     FE 14 02 F6 | 	mov	arg02, result2
13a04     FF 12 02 F6 | 	mov	arg01, result3
13a08     30 4E 05 F1 | 	add	fp, #48
13a0c     A7 16 62 FC | 	wrlong	arg03, fp
13a10     04 4E 05 F1 | 	add	fp, #4
13a14     A7 14 62 FC | 	wrlong	arg02, fp
13a18     04 4E 05 F1 | 	add	fp, #4
13a1c     A7 12 62 FC | 	wrlong	arg01, fp
13a20     38 4E 85 F1 | 	sub	fp, #56
13a24     A0 66 BF FD | 	call	#_pop
13a28     FD 16 02 F6 | 	mov	arg03, result1
13a2c     FE 14 02 F6 | 	mov	arg02, result2
13a30     FF 12 02 F6 | 	mov	arg01, result3
13a34     24 4E 05 F1 | 	add	fp, #36
13a38     A7 16 62 FC | 	wrlong	arg03, fp
13a3c     04 4E 05 F1 | 	add	fp, #4
13a40     A7 14 62 FC | 	wrlong	arg02, fp
13a44     04 4E 05 F1 | 	add	fp, #4
13a48     A7 12 62 FC | 	wrlong	arg01, fp
13a4c     2C 4E 85 F1 | 	sub	fp, #44
13a50     74 66 BF FD | 	call	#_pop
13a54     FD 16 02 F6 | 	mov	arg03, result1
13a58     FE 14 02 F6 | 	mov	arg02, result2
13a5c     FF 12 02 F6 | 	mov	arg01, result3
13a60     18 4E 05 F1 | 	add	fp, #24
13a64     A7 16 62 FC | 	wrlong	arg03, fp
13a68     04 4E 05 F1 | 	add	fp, #4
13a6c     A7 14 62 FC | 	wrlong	arg02, fp
13a70     04 4E 05 F1 | 	add	fp, #4
13a74     A7 12 62 FC | 	wrlong	arg01, fp
13a78     20 4E 85 F1 | 	sub	fp, #32
13a7c     48 66 BF FD | 	call	#_pop
13a80     FD 16 02 F6 | 	mov	arg03, result1
13a84     FE 14 02 F6 | 	mov	arg02, result2
13a88     FF 12 02 F6 | 	mov	arg01, result3
13a8c     0C 4E 05 F1 | 	add	fp, #12
13a90     A7 16 62 FC | 	wrlong	arg03, fp
13a94     04 4E 05 F1 | 	add	fp, #4
13a98     A7 14 62 FC | 	wrlong	arg02, fp
13a9c     04 4E 05 F1 | 	add	fp, #4
13aa0     A7 12 62 FC | 	wrlong	arg01, fp
13aa4     14 4E 85 F1 | 	sub	fp, #20
13aa8     1C 66 BF FD | 	call	#_pop
13aac     FF 16 02 F6 | 	mov	arg03, result3
13ab0     A7 FA 61 FC | 	wrlong	result1, fp
13ab4     04 4E 05 F1 | 	add	fp, #4
13ab8     A7 FC 61 FC | 	wrlong	result2, fp
13abc     04 4E 05 F1 | 	add	fp, #4
13ac0     A7 16 62 FC | 	wrlong	arg03, fp
13ac4     08 4E 85 F1 | 	sub	fp, #8
13ac8     A7 12 02 F6 | 	mov	arg01, fp
13acc     4C EF BF FD | 	call	#_converttoint
13ad0     3C 4E 05 F1 | 	add	fp, #60
13ad4     A7 FA 61 FC | 	wrlong	result1, fp
13ad8     30 4E 85 F1 | 	sub	fp, #48
13adc     A7 12 02 F6 | 	mov	arg01, fp
13ae0     0C 4E 85 F1 | 	sub	fp, #12
13ae4     34 EF BF FD | 	call	#_converttoint
13ae8     40 4E 05 F1 | 	add	fp, #64
13aec     A7 FA 61 FC | 	wrlong	result1, fp
13af0     28 4E 85 F1 | 	sub	fp, #40
13af4     A7 12 02 F6 | 	mov	arg01, fp
13af8     18 4E 85 F1 | 	sub	fp, #24
13afc     1C EF BF FD | 	call	#_converttoint
13b00     44 4E 05 F1 | 	add	fp, #68
13b04     A7 FA 61 FC | 	wrlong	result1, fp
13b08     20 4E 85 F1 | 	sub	fp, #32
13b0c     A7 12 02 F6 | 	mov	arg01, fp
13b10     24 4E 85 F1 | 	sub	fp, #36
13b14     04 EF BF FD | 	call	#_converttoint
13b18     48 4E 05 F1 | 	add	fp, #72
13b1c     A7 FA 61 FC | 	wrlong	result1, fp
13b20     18 4E 85 F1 | 	sub	fp, #24
13b24     A7 12 02 F6 | 	mov	arg01, fp
13b28     30 4E 85 F1 | 	sub	fp, #48
13b2c     EC EE BF FD | 	call	#_converttoint
13b30     4C 4E 05 F1 | 	add	fp, #76
13b34     A7 FA 61 FC | 	wrlong	result1, fp
13b38                 | ' 
13b38                 | ' t5=pop()
13b38                 | ' t4=pop()
13b38                 | ' t3=pop()
13b38                 | ' t2=pop()
13b38                 | ' t1=pop()
13b38                 | ' 
13b38                 | ' ' do convert, defsprite is not a racing command
13b38                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
13b38                 | '  
13b38                 | ' ' todo: check parameters for linits
13b38                 | ' if sprite(a1)<> nil then delete(sprite(a1))
13b38     10 4E 85 F1 | 	sub	fp, #16
13b3c     A7 16 02 FB | 	rdlong	arg03, fp
13b40     3C 4E 85 F1 | 	sub	fp, #60
13b44     02 16 66 F0 | 	shl	arg03, #2
13b48     7B 00 00 FF 
13b4c     18 E4 05 F1 | 	add	objptr, ##63000
13b50     F2 16 02 F1 | 	add	arg03, objptr
13b54     0B 17 0A FB | 	rdlong	arg03, arg03 wz
13b58     7B 00 00 FF 
13b5c     18 E4 85 F1 | 	sub	objptr, ##63000
13b60     2C 00 90 AD |  if_e	jmp	#LR__1610
13b64     3C 4E 05 F1 | 	add	fp, #60
13b68     A7 16 02 FB | 	rdlong	arg03, fp
13b6c     3C 4E 85 F1 | 	sub	fp, #60
13b70     02 16 66 F0 | 	shl	arg03, #2
13b74     7B 00 00 FF 
13b78     18 E4 05 F1 | 	add	objptr, ##63000
13b7c     F2 16 02 F1 | 	add	arg03, objptr
13b80     0B 13 02 FB | 	rdlong	arg01, arg03
13b84     7B 00 00 FF 
13b88     18 E4 85 F1 | 	sub	objptr, ##63000
13b8c     EC C6 B0 FD | 	call	#__system___gc_free
13b90                 | LR__1610
13b90     3C 4E 05 F1 | 	add	fp, #60
13b94     A7 1E 02 FB | 	rdlong	local01, fp
13b98     0C 4E 05 F1 | 	add	fp, #12
13b9c     A7 16 02 FB | 	rdlong	arg03, fp
13ba0     04 4E 05 F1 | 	add	fp, #4
13ba4     A7 14 02 FB | 	rdlong	arg02, fp
13ba8     0A 17 02 FD | 	qmul	arg03, arg02
13bac     02 1E 66 F0 | 	shl	local01, #2
13bb0     7B 00 00 FF 
13bb4     18 E4 05 F1 | 	add	objptr, ##63000
13bb8     F2 1E 02 F1 | 	add	local01, objptr
13bbc     4C 4E 85 F1 | 	sub	fp, #76
13bc0     7B 00 00 FF 
13bc4     18 E4 85 F1 | 	sub	objptr, ##63000
13bc8     18 12 62 FD | 	getqx	arg01
13bcc     70 C5 B0 FD | 	call	#__system___gc_alloc_managed
13bd0     0F FB 61 FC | 	wrlong	result1, local01
13bd4                 | ' for y=a3 to a3+a5-1
13bd4     44 4E 05 F1 | 	add	fp, #68
13bd8     A7 20 02 FB | 	rdlong	local02, fp
13bdc     0C 4E 05 F1 | 	add	fp, #12
13be0     A7 20 62 FC | 	wrlong	local02, fp
13be4     0C 4E 85 F1 | 	sub	fp, #12
13be8     A7 22 02 FB | 	rdlong	local03, fp
13bec     08 4E 05 F1 | 	add	fp, #8
13bf0     A7 24 02 FB | 	rdlong	local04, fp
13bf4     4C 4E 85 F1 | 	sub	fp, #76
13bf8     12 23 02 F1 | 	add	local03, local04
13bfc                 | LR__1611
13bfc     50 4E 05 F1 | 	add	fp, #80
13c00     A7 20 02 FB | 	rdlong	local02, fp
13c04     50 4E 85 F1 | 	sub	fp, #80
13c08     11 21 52 F2 | 	cmps	local02, local03 wc
13c0c     10 01 90 3D |  if_ae	jmp	#LR__1614
13c10                 | '   for x=a2 to a4+a2-1
13c10     40 4E 05 F1 | 	add	fp, #64
13c14     A7 1E 02 FB | 	rdlong	local01, fp
13c18     7B 00 00 FF 
13c1c     9C E4 05 F1 | 	add	objptr, ##63132
13c20     F2 1E 62 FC | 	wrlong	local01, objptr
13c24     7B 00 00 FF 
13c28     9C E4 85 F1 | 	sub	objptr, ##63132
13c2c     08 4E 05 F1 | 	add	fp, #8
13c30     A7 26 02 FB | 	rdlong	local05, fp
13c34     08 4E 85 F1 | 	sub	fp, #8
13c38     A7 28 02 FB | 	rdlong	local06, fp
13c3c     40 4E 85 F1 | 	sub	fp, #64
13c40     14 27 02 F1 | 	add	local05, local06
13c44                 | LR__1612
13c44     7B 00 00 FF 
13c48     9C E4 05 F1 | 	add	objptr, ##63132
13c4c     F2 1E 02 FB | 	rdlong	local01, objptr
13c50     7B 00 00 FF 
13c54     9C E4 85 F1 | 	sub	objptr, ##63132
13c58     13 1F 52 F2 | 	cmps	local01, local05 wc
13c5c     A8 00 90 3D |  if_ae	jmp	#LR__1613
13c60     3C 4E 05 F1 | 	add	fp, #60
13c64     A7 28 02 FB | 	rdlong	local06, fp
13c68     04 4E 05 F1 | 	add	fp, #4
13c6c     A7 24 02 FB | 	rdlong	local04, fp
13c70     10 4E 05 F1 | 	add	fp, #16
13c74     A7 20 02 FB | 	rdlong	local02, fp
13c78     10 1F 02 F6 | 	mov	local01, local02
13c7c     0C 4E 85 F1 | 	sub	fp, #12
13c80     A7 16 02 FB | 	rdlong	arg03, fp
13c84     0B 1F 82 F1 | 	sub	local01, arg03
13c88     04 4E 05 F1 | 	add	fp, #4
13c8c     A7 16 02 FB | 	rdlong	arg03, fp
13c90     0B 1F 02 FD | 	qmul	local01, arg03
13c94     02 28 66 F0 | 	shl	local06, #2
13c98     7B 00 00 FF 
13c9c     18 E4 05 F1 | 	add	objptr, ##63000
13ca0     F2 28 02 F1 | 	add	local06, objptr
13ca4     14 29 02 FB | 	rdlong	local06, local06
13ca8     84 E4 05 F1 | 	add	objptr, #132
13cac     F2 1E 02 FB | 	rdlong	local01, objptr
13cb0     7B 00 00 FF 
13cb4     9C E4 85 F1 | 	sub	objptr, ##63132
13cb8     0F 2B 02 F6 | 	mov	local07, local01
13cbc     12 2B 82 F1 | 	sub	local07, local04
13cc0     F2 12 02 FB | 	rdlong	arg01, objptr
13cc4     0F 13 02 F1 | 	add	arg01, local01
13cc8     48 4E 85 F1 | 	sub	fp, #72
13ccc     0A 20 66 F0 | 	shl	local02, #10
13cd0     10 13 02 F1 | 	add	arg01, local02
13cd4     18 24 62 FD | 	getqx	local04
13cd8     12 2B 02 F1 | 	add	local07, local04
13cdc     14 2B 02 F1 | 	add	local07, local06
13ce0     B0 50 B0 FD | 	call	#_pspeek
13ce4     15 FB 41 FC | 	wrbyte	result1, local07
13ce8     7B 00 00 FF 
13cec     9C E4 05 F1 | 	add	objptr, ##63132
13cf0     F2 2A 02 FB | 	rdlong	local07, objptr
13cf4     01 2A 06 F1 | 	add	local07, #1
13cf8     F2 2A 62 FC | 	wrlong	local07, objptr
13cfc     7B 00 00 FF 
13d00     9C E4 85 F1 | 	sub	objptr, ##63132
13d04     3C FF 9F FD | 	jmp	#LR__1612
13d08                 | LR__1613
13d08     50 4E 05 F1 | 	add	fp, #80
13d0c     A7 2A 02 FB | 	rdlong	local07, fp
13d10     01 2A 06 F1 | 	add	local07, #1
13d14     A7 2A 62 FC | 	wrlong	local07, fp
13d18     50 4E 85 F1 | 	sub	fp, #80
13d1c     DC FE 9F FD | 	jmp	#LR__1611
13d20                 | LR__1614
13d20     3C 4E 05 F1 | 	add	fp, #60
13d24     A7 2A 02 FB | 	rdlong	local07, fp
13d28     15 13 02 F6 | 	mov	arg01, local07
13d2c     3C 4E 85 F1 | 	sub	fp, #60
13d30     02 2A 66 F0 | 	shl	local07, #2
13d34     7B 00 00 FF 
13d38     18 E4 05 F1 | 	add	objptr, ##63000
13d3c     F2 2A 02 F1 | 	add	local07, objptr
13d40     15 15 02 FB | 	rdlong	arg02, local07
13d44     7B 00 00 FF 
13d48     18 E4 85 F1 | 	sub	objptr, ##63000
13d4c     68 64 B0 FD | 	call	#_hg010b_spin2_setspriteptr
13d50     3C 4E 05 F1 | 	add	fp, #60
13d54     A7 12 02 FB | 	rdlong	arg01, fp
13d58     0C 4E 05 F1 | 	add	fp, #12
13d5c     A7 14 02 FB | 	rdlong	arg02, fp
13d60     04 4E 05 F1 | 	add	fp, #4
13d64     A7 16 02 FB | 	rdlong	arg03, fp
13d68     4C 4E 85 F1 | 	sub	fp, #76
13d6c     D8 64 B0 FD | 	call	#_hg010b_spin2_setspritesize
13d70     A7 F0 03 F6 | 	mov	ptra, fp
13d74     B2 00 A0 FD | 	call	#popregs_
13d78                 | _do_defsprite_ret
13d78     2D 00 64 FD | 	ret
13d7c                 | 
13d7c                 | ' 
13d7c                 | ' sub do_sprite
13d7c                 | _do_sprite
13d7c     00 4A 05 F6 | 	mov	COUNT_, #0
13d80     A8 00 A0 FD | 	call	#pushregs_
13d84     30 F0 07 F1 | 	add	ptra, #48
13d88     3C 63 BF FD | 	call	#_pop
13d8c     FD 16 02 F6 | 	mov	arg03, result1
13d90     FE 14 02 F6 | 	mov	arg02, result2
13d94     FF 12 02 F6 | 	mov	arg01, result3
13d98     18 4E 05 F1 | 	add	fp, #24
13d9c     A7 16 62 FC | 	wrlong	arg03, fp
13da0     04 4E 05 F1 | 	add	fp, #4
13da4     A7 14 62 FC | 	wrlong	arg02, fp
13da8     04 4E 05 F1 | 	add	fp, #4
13dac     A7 12 62 FC | 	wrlong	arg01, fp
13db0     20 4E 85 F1 | 	sub	fp, #32
13db4     10 63 BF FD | 	call	#_pop
13db8     FD 16 02 F6 | 	mov	arg03, result1
13dbc     FE 14 02 F6 | 	mov	arg02, result2
13dc0     FF 12 02 F6 | 	mov	arg01, result3
13dc4     0C 4E 05 F1 | 	add	fp, #12
13dc8     A7 16 62 FC | 	wrlong	arg03, fp
13dcc     04 4E 05 F1 | 	add	fp, #4
13dd0     A7 14 62 FC | 	wrlong	arg02, fp
13dd4     04 4E 05 F1 | 	add	fp, #4
13dd8     A7 12 62 FC | 	wrlong	arg01, fp
13ddc     14 4E 85 F1 | 	sub	fp, #20
13de0     E4 62 BF FD | 	call	#_pop
13de4     FF 16 02 F6 | 	mov	arg03, result3
13de8     A7 FA 61 FC | 	wrlong	result1, fp
13dec     04 4E 05 F1 | 	add	fp, #4
13df0     A7 FC 61 FC | 	wrlong	result2, fp
13df4     04 4E 05 F1 | 	add	fp, #4
13df8     A7 16 62 FC | 	wrlong	arg03, fp
13dfc     08 4E 85 F1 | 	sub	fp, #8
13e00     A7 12 02 F6 | 	mov	arg01, fp
13e04     14 EC BF FD | 	call	#_converttoint
13e08     24 4E 05 F1 | 	add	fp, #36
13e0c     A7 FA 61 FC | 	wrlong	result1, fp
13e10     18 4E 85 F1 | 	sub	fp, #24
13e14     A7 12 02 F6 | 	mov	arg01, fp
13e18     0C 4E 85 F1 | 	sub	fp, #12
13e1c     FC EB BF FD | 	call	#_converttoint
13e20     28 4E 05 F1 | 	add	fp, #40
13e24     A7 FA 61 FC | 	wrlong	result1, fp
13e28     10 4E 85 F1 | 	sub	fp, #16
13e2c     A7 12 02 F6 | 	mov	arg01, fp
13e30     18 4E 85 F1 | 	sub	fp, #24
13e34     E4 EB BF FD | 	call	#_converttoint
13e38     2C 4E 05 F1 | 	add	fp, #44
13e3c     A7 FA 61 FC | 	wrlong	result1, fp
13e40     08 4E 85 F1 | 	sub	fp, #8
13e44     A7 12 02 FB | 	rdlong	arg01, fp
13e48     04 4E 05 F1 | 	add	fp, #4
13e4c     A7 14 02 FB | 	rdlong	arg02, fp
13e50     FD 16 02 F6 | 	mov	arg03, result1
13e54     28 4E 85 F1 | 	sub	fp, #40
13e58     84 63 B0 FD | 	call	#_hg010b_spin2_setspritepos
13e5c     A7 F0 03 F6 | 	mov	ptra, fp
13e60     B2 00 A0 FD | 	call	#popregs_
13e64                 | _do_sprite_ret
13e64     2D 00 64 FD | 	ret
13e68                 | 
13e68                 | ' 
13e68                 | ' sub do_mousex
13e68                 | _do_mousex
13e68     00 4A 05 F6 | 	mov	COUNT_, #0
13e6c     A8 00 A0 FD | 	call	#pushregs_
13e70     0C F0 07 F1 | 	add	ptra, #12
13e74     08 4E 05 F1 | 	add	fp, #8
13e78     A7 3A 68 FC | 	wrlong	#29, fp
13e7c     08 4E 85 F1 | 	sub	fp, #8
13e80     7A 00 00 FF 
13e84     D0 E5 05 F1 | 	add	objptr, ##62928
13e88     F2 12 02 FB | 	rdlong	arg01, objptr
13e8c     7A 00 00 FF 
13e90     D0 E5 85 F1 | 	sub	objptr, ##62928
13e94     A7 12 62 FC | 	wrlong	arg01, fp
13e98     A7 12 02 F6 | 	mov	arg01, fp
13e9c     C0 62 BF FD | 	call	#_push
13ea0     A7 F0 03 F6 | 	mov	ptra, fp
13ea4     B2 00 A0 FD | 	call	#popregs_
13ea8                 | _do_mousex_ret
13ea8     2D 00 64 FD | 	ret
13eac                 | 
13eac                 | ' 
13eac                 | ' sub do_mousey
13eac                 | _do_mousey
13eac     00 4A 05 F6 | 	mov	COUNT_, #0
13eb0     A8 00 A0 FD | 	call	#pushregs_
13eb4     0C F0 07 F1 | 	add	ptra, #12
13eb8     08 4E 05 F1 | 	add	fp, #8
13ebc     A7 3A 68 FC | 	wrlong	#29, fp
13ec0     08 4E 85 F1 | 	sub	fp, #8
13ec4     7A 00 00 FF 
13ec8     D4 E5 05 F1 | 	add	objptr, ##62932
13ecc     F2 12 02 FB | 	rdlong	arg01, objptr
13ed0     7A 00 00 FF 
13ed4     D4 E5 85 F1 | 	sub	objptr, ##62932
13ed8     A7 12 62 FC | 	wrlong	arg01, fp
13edc     A7 12 02 F6 | 	mov	arg01, fp
13ee0     7C 62 BF FD | 	call	#_push
13ee4     A7 F0 03 F6 | 	mov	ptra, fp
13ee8     B2 00 A0 FD | 	call	#popregs_
13eec                 | _do_mousey_ret
13eec     2D 00 64 FD | 	ret
13ef0                 | 
13ef0                 | ' 
13ef0                 | ' sub do_mousew
13ef0                 | _do_mousew
13ef0     00 4A 05 F6 | 	mov	COUNT_, #0
13ef4     A8 00 A0 FD | 	call	#pushregs_
13ef8     0C F0 07 F1 | 	add	ptra, #12
13efc     08 4E 05 F1 | 	add	fp, #8
13f00     A7 38 68 FC | 	wrlong	#28, fp
13f04     08 4E 85 F1 | 	sub	fp, #8
13f08     7A 00 00 FF 
13f0c     DC E5 05 F1 | 	add	objptr, ##62940
13f10     F2 12 02 FB | 	rdlong	arg01, objptr
13f14     7A 00 00 FF 
13f18     DC E5 85 F1 | 	sub	objptr, ##62940
13f1c     A7 12 62 FC | 	wrlong	arg01, fp
13f20     A7 12 02 F6 | 	mov	arg01, fp
13f24     38 62 BF FD | 	call	#_push
13f28     A7 F0 03 F6 | 	mov	ptra, fp
13f2c     B2 00 A0 FD | 	call	#popregs_
13f30                 | _do_mousew_ret
13f30     2D 00 64 FD | 	ret
13f34                 | 
13f34                 | ' 
13f34                 | ' sub do_mousek
13f34                 | _do_mousek
13f34     00 4A 05 F6 | 	mov	COUNT_, #0
13f38     A8 00 A0 FD | 	call	#pushregs_
13f3c     0C F0 07 F1 | 	add	ptra, #12
13f40     08 4E 05 F1 | 	add	fp, #8
13f44     A7 3A 68 FC | 	wrlong	#29, fp
13f48     08 4E 85 F1 | 	sub	fp, #8
13f4c     7A 00 00 FF 
13f50     D8 E5 05 F1 | 	add	objptr, ##62936
13f54     F2 12 02 FB | 	rdlong	arg01, objptr
13f58     7A 00 00 FF 
13f5c     D8 E5 85 F1 | 	sub	objptr, ##62936
13f60     A7 12 62 FC | 	wrlong	arg01, fp
13f64     A7 12 02 F6 | 	mov	arg01, fp
13f68     F4 61 BF FD | 	call	#_push
13f6c     A7 F0 03 F6 | 	mov	ptra, fp
13f70     B2 00 A0 FD | 	call	#popregs_
13f74                 | _do_mousek_ret
13f74     2D 00 64 FD | 	ret
13f78                 | 
13f78                 | ' 
13f78                 | ' 
13f78                 | ' sub do_rdpin
13f78                 | _do_rdpin
13f78     00 4A 05 F6 | 	mov	COUNT_, #0
13f7c     A8 00 A0 FD | 	call	#pushregs_
13f80     0C F0 07 F1 | 	add	ptra, #12
13f84     40 61 BF FD | 	call	#_pop
13f88     A7 FA 61 FC | 	wrlong	result1, fp
13f8c     04 4E 05 F1 | 	add	fp, #4
13f90     A7 FC 61 FC | 	wrlong	result2, fp
13f94     04 4E 05 F1 | 	add	fp, #4
13f98     A7 FE 61 FC | 	wrlong	result3, fp
13f9c     08 4E 85 F1 | 	sub	fp, #8
13fa0     A7 12 02 F6 | 	mov	arg01, fp
13fa4     74 EA BF FD | 	call	#_converttoint
13fa8     FD FA 89 FA | 	rdpin	result1, result1
13fac     7B 00 00 FF 
13fb0     F4 E4 05 F1 | 	add	objptr, ##63220
13fb4     F2 FA 61 FC | 	wrlong	result1, objptr
13fb8     7B 00 00 FF 
13fbc     F4 E4 85 F1 | 	sub	objptr, ##63220
13fc0     08 4E 05 F1 | 	add	fp, #8
13fc4     A7 3A 68 FC | 	wrlong	#29, fp
13fc8     08 4E 85 F1 | 	sub	fp, #8
13fcc     A7 08 68 FC | 	wrlong	#4, fp
13fd0     A7 12 02 F6 | 	mov	arg01, fp
13fd4     88 61 BF FD | 	call	#_push
13fd8     A7 F0 03 F6 | 	mov	ptra, fp
13fdc     B2 00 A0 FD | 	call	#popregs_
13fe0                 | _do_rdpin_ret
13fe0     2D 00 64 FD | 	ret
13fe4                 | 
13fe4                 | ' 
13fe4                 | ' sub do_rqpin
13fe4                 | _do_rqpin
13fe4     00 4A 05 F6 | 	mov	COUNT_, #0
13fe8     A8 00 A0 FD | 	call	#pushregs_
13fec     0C F0 07 F1 | 	add	ptra, #12
13ff0     D4 60 BF FD | 	call	#_pop
13ff4     A7 FA 61 FC | 	wrlong	result1, fp
13ff8     04 4E 05 F1 | 	add	fp, #4
13ffc     A7 FC 61 FC | 	wrlong	result2, fp
14000     04 4E 05 F1 | 	add	fp, #4
14004     A7 FE 61 FC | 	wrlong	result3, fp
14008     08 4E 85 F1 | 	sub	fp, #8
1400c     A7 12 02 F6 | 	mov	arg01, fp
14010     08 EA BF FD | 	call	#_converttoint
14014     FD 12 02 F6 | 	mov	arg01, result1
14018     00 FA 05 F6 | 	mov	result1, #0
1401c     09 FB 81 FA | 	rqpin	result1, arg01
14020     7B 00 00 FF 
14024     F4 E4 05 F1 | 	add	objptr, ##63220
14028     F2 FA 61 FC | 	wrlong	result1, objptr
1402c     7B 00 00 FF 
14030     F4 E4 85 F1 | 	sub	objptr, ##63220
14034     08 4E 05 F1 | 	add	fp, #8
14038     A7 3A 68 FC | 	wrlong	#29, fp
1403c     08 4E 85 F1 | 	sub	fp, #8
14040     A7 08 68 FC | 	wrlong	#4, fp
14044     A7 12 02 F6 | 	mov	arg01, fp
14048     14 61 BF FD | 	call	#_push
1404c     A7 F0 03 F6 | 	mov	ptra, fp
14050     B2 00 A0 FD | 	call	#popregs_
14054                 | _do_rqpin_ret
14054     2D 00 64 FD | 	ret
14058                 | 
14058                 | ' 
14058                 | ' sub do_pinread
14058                 | _do_pinread
14058     00 4A 05 F6 | 	mov	COUNT_, #0
1405c     A8 00 A0 FD | 	call	#pushregs_
14060     0C F0 07 F1 | 	add	ptra, #12
14064     60 60 BF FD | 	call	#_pop
14068     A7 FA 61 FC | 	wrlong	result1, fp
1406c     04 4E 05 F1 | 	add	fp, #4
14070     A7 FC 61 FC | 	wrlong	result2, fp
14074     04 4E 05 F1 | 	add	fp, #4
14078     A7 FE 61 FC | 	wrlong	result3, fp
1407c     08 4E 85 F1 | 	sub	fp, #8
14080     A7 12 02 F6 | 	mov	arg01, fp
14084     94 E9 BF FD | 	call	#_converttoint
14088     FD 12 02 F6 | 	mov	arg01, result1
1408c     20 12 CE F7 | 	test	arg01, #32 wz
14090     FF FB 01 56 |  if_ne	mov	result1, inb
14094     FE FB 01 A6 |  if_e	mov	result1, ina
14098     09 FB 41 F0 | 	shr	result1, arg01
1409c     06 12 46 F0 | 	shr	arg01, #6
140a0     09 FB 41 F7 | 	zerox	result1, arg01
140a4     7B 00 00 FF 
140a8     F4 E4 05 F1 | 	add	objptr, ##63220
140ac     F2 FA 61 FC | 	wrlong	result1, objptr
140b0     7B 00 00 FF 
140b4     F4 E4 85 F1 | 	sub	objptr, ##63220
140b8     08 4E 05 F1 | 	add	fp, #8
140bc     A7 3A 68 FC | 	wrlong	#29, fp
140c0     08 4E 85 F1 | 	sub	fp, #8
140c4     A7 08 68 FC | 	wrlong	#4, fp
140c8     A7 12 02 F6 | 	mov	arg01, fp
140cc     90 60 BF FD | 	call	#_push
140d0     A7 F0 03 F6 | 	mov	ptra, fp
140d4     B2 00 A0 FD | 	call	#popregs_
140d8                 | _do_pinread_ret
140d8     2D 00 64 FD | 	ret
140dc                 | 
140dc                 | ' 
140dc                 | ' sub do_gettime
140dc                 | _do_gettime
140dc     02 4A 05 F6 | 	mov	COUNT_, #2
140e0     A8 00 A0 FD | 	call	#pushregs_
140e4     14 F0 07 F1 | 	add	ptra, #20
140e8                 | ' 
140e8                 | ' const asm 
140e8     1A 1E 72 FD | 	getct	local01 wc
140ec     1A 20 62 FD | 	getct	local02
140f0                 | ' 
140f0                 | ' return hi1, lo1
140f0     10 FD 01 F6 | 	mov	result2, local02
140f4     A7 1E 62 FC | 	wrlong	local01, fp
140f8     04 4E 05 F1 | 	add	fp, #4
140fc     A7 FC 61 FC | 	wrlong	result2, fp
14100     0C 4E 05 F1 | 	add	fp, #12
14104     A7 3A 68 FC | 	wrlong	#29, fp
14108     0C 4E 85 F1 | 	sub	fp, #12
1410c     A7 12 02 FB | 	rdlong	arg01, fp
14110     04 4E 05 F1 | 	add	fp, #4
14114     A7 12 62 FC | 	wrlong	arg01, fp
14118     08 4E 85 F1 | 	sub	fp, #8
1411c     A7 12 02 FB | 	rdlong	arg01, fp
14120     0C 4E 05 F1 | 	add	fp, #12
14124     A7 12 62 FC | 	wrlong	arg01, fp
14128     04 4E 85 F1 | 	sub	fp, #4
1412c     A7 12 02 F6 | 	mov	arg01, fp
14130     08 4E 85 F1 | 	sub	fp, #8
14134     28 60 BF FD | 	call	#_push
14138     A7 F0 03 F6 | 	mov	ptra, fp
1413c     B2 00 A0 FD | 	call	#popregs_
14140                 | _do_gettime_ret
14140     2D 00 64 FD | 	ret
14144                 | 
14144                 | '    
14144                 | ' 
14144                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
14144                 | ' 
14144                 | ' '' ----------------------------- Clear the screen
14144                 | ' 
14144                 | ' sub do_cls
14144                 | _do_cls
14144     57 00 00 FF 
14148     20 E4 05 F1 | 	add	objptr, ##44576
1414c     F2 12 02 FB | 	rdlong	arg01, objptr
14150     04 E4 85 F1 | 	sub	objptr, #4
14154     F2 14 02 FB | 	rdlong	arg02, objptr
14158     57 00 00 FF 
1415c     1C E4 85 F1 | 	sub	objptr, ##44572
14160     9C 6D B0 FD | 	call	#_hg010b_spin2_cls
14164     57 00 00 FF 
14168     20 E4 05 F1 | 	add	objptr, ##44576
1416c     F2 14 02 FB | 	rdlong	arg02, objptr
14170     14 E4 85 F1 | 	sub	objptr, #20
14174     F2 14 62 FC | 	wrlong	arg02, objptr
14178     57 00 00 FF 
1417c     0C E4 85 F1 | 	sub	objptr, ##44556
14180                 | ' cls(ink,paper): plot_color=ink: print
14180     00 12 06 F6 | 	mov	arg01, #0
14184     00 DB B0 FD | 	call	#__system___getiolock_0474
14188     FD 12 02 F6 | 	mov	arg01, result1
1418c     68 81 B0 FD | 	call	#__system___lockmem
14190     00 12 06 F6 | 	mov	arg01, #0
14194     0A 14 06 F6 | 	mov	arg02, #10
14198     00 16 06 F6 | 	mov	arg03, #0
1419c     04 8E B0 FD | 	call	#__system___basic_print_char
141a0     00 12 06 F6 | 	mov	arg01, #0
141a4     E0 DA B0 FD | 	call	#__system___getiolock_0474
141a8     FD 00 68 FC | 	wrlong	#0, result1
141ac                 | _do_cls_ret
141ac     2D 00 64 FD | 	ret
141b0                 | 
141b0                 | ' 
141b0                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
141b0                 | ' 
141b0                 | ' sub do_color
141b0                 | _do_color
141b0     03 4A 05 F6 | 	mov	COUNT_, #3
141b4     A8 00 A0 FD | 	call	#pushregs_
141b8     0C 5F BF FD | 	call	#_pop
141bc     FD 1E 02 F6 | 	mov	local01, result1
141c0     FE 20 02 F6 | 	mov	local02, result2
141c4     FF 22 02 F6 | 	mov	local03, result3
141c8     57 00 00 FF 
141cc     0C E4 05 F1 | 	add	objptr, ##44556
141d0     F2 1E 62 FC | 	wrlong	local01, objptr
141d4     57 00 00 FF 
141d8     0C E4 85 F1 | 	sub	objptr, ##44556
141dc     A7 F0 03 F6 | 	mov	ptra, fp
141e0     B2 00 A0 FD | 	call	#popregs_
141e4                 | _do_color_ret
141e4     2D 00 64 FD | 	ret
141e8                 | 
141e8                 | ' 
141e8                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
141e8                 | ' 
141e8                 | ' sub do_plot
141e8                 | _do_plot
141e8     00 4A 05 F6 | 	mov	COUNT_, #0
141ec     A8 00 A0 FD | 	call	#pushregs_
141f0     20 F0 07 F1 | 	add	ptra, #32
141f4     D0 5E BF FD | 	call	#_pop
141f8     FD 16 02 F6 | 	mov	arg03, result1
141fc     FE 14 02 F6 | 	mov	arg02, result2
14200     FF 12 02 F6 | 	mov	arg01, result3
14204     0C 4E 05 F1 | 	add	fp, #12
14208     A7 16 62 FC | 	wrlong	arg03, fp
1420c     04 4E 05 F1 | 	add	fp, #4
14210     A7 14 62 FC | 	wrlong	arg02, fp
14214     04 4E 05 F1 | 	add	fp, #4
14218     A7 12 62 FC | 	wrlong	arg01, fp
1421c     14 4E 85 F1 | 	sub	fp, #20
14220     A4 5E BF FD | 	call	#_pop
14224     FF 16 02 F6 | 	mov	arg03, result3
14228     A7 FA 61 FC | 	wrlong	result1, fp
1422c     04 4E 05 F1 | 	add	fp, #4
14230     A7 FC 61 FC | 	wrlong	result2, fp
14234     04 4E 05 F1 | 	add	fp, #4
14238     A7 16 62 FC | 	wrlong	arg03, fp
1423c     08 4E 85 F1 | 	sub	fp, #8
14240     A7 12 02 F6 | 	mov	arg01, fp
14244     D4 E7 BF FD | 	call	#_converttoint
14248     18 4E 05 F1 | 	add	fp, #24
1424c     A7 FA 61 FC | 	wrlong	result1, fp
14250     0C 4E 85 F1 | 	sub	fp, #12
14254     A7 12 02 F6 | 	mov	arg01, fp
14258     0C 4E 85 F1 | 	sub	fp, #12
1425c     BC E7 BF FD | 	call	#_converttoint
14260     1C 4E 05 F1 | 	add	fp, #28
14264     A7 FA 61 FC | 	wrlong	result1, fp
14268     04 4E 85 F1 | 	sub	fp, #4
1426c     A7 16 02 FB | 	rdlong	arg03, fp
14270     57 00 00 FF 
14274     10 E4 05 F1 | 	add	objptr, ##44560
14278     F2 16 62 FC | 	wrlong	arg03, objptr
1427c     04 4E 05 F1 | 	add	fp, #4
14280     A7 14 02 FB | 	rdlong	arg02, fp
14284     1C 4E 85 F1 | 	sub	fp, #28
14288     04 E4 05 F1 | 	add	objptr, #4
1428c     F2 14 62 FC | 	wrlong	arg02, objptr
14290     04 E4 85 F1 | 	sub	objptr, #4
14294     F2 12 02 FB | 	rdlong	arg01, objptr
14298     04 E4 85 F1 | 	sub	objptr, #4
1429c     F2 16 02 FB | 	rdlong	arg03, objptr
142a0     57 00 00 FF 
142a4     0C E4 85 F1 | 	sub	objptr, ##44556
142a8     E8 5F B0 FD | 	call	#_hg010b_spin2_putpixel
142ac     A7 F0 03 F6 | 	mov	ptra, fp
142b0     B2 00 A0 FD | 	call	#popregs_
142b4                 | _do_plot_ret
142b4     2D 00 64 FD | 	ret
142b8                 | 
142b8                 | ' 
142b8                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
142b8                 | ' 
142b8                 | ' sub do_draw
142b8                 | _do_draw
142b8     00 4A 05 F6 | 	mov	COUNT_, #0
142bc     A8 00 A0 FD | 	call	#pushregs_
142c0     20 F0 07 F1 | 	add	ptra, #32
142c4     00 5E BF FD | 	call	#_pop
142c8     FD 1A 02 F6 | 	mov	arg05, result1
142cc     FE 18 02 F6 | 	mov	arg04, result2
142d0     FF 16 02 F6 | 	mov	arg03, result3
142d4     0C 4E 05 F1 | 	add	fp, #12
142d8     A7 1A 62 FC | 	wrlong	arg05, fp
142dc     04 4E 05 F1 | 	add	fp, #4
142e0     A7 18 62 FC | 	wrlong	arg04, fp
142e4     04 4E 05 F1 | 	add	fp, #4
142e8     A7 16 62 FC | 	wrlong	arg03, fp
142ec     14 4E 85 F1 | 	sub	fp, #20
142f0     D4 5D BF FD | 	call	#_pop
142f4     FF 1A 02 F6 | 	mov	arg05, result3
142f8     A7 FA 61 FC | 	wrlong	result1, fp
142fc     04 4E 05 F1 | 	add	fp, #4
14300     A7 FC 61 FC | 	wrlong	result2, fp
14304     04 4E 05 F1 | 	add	fp, #4
14308     A7 1A 62 FC | 	wrlong	arg05, fp
1430c     08 4E 85 F1 | 	sub	fp, #8
14310     A7 12 02 F6 | 	mov	arg01, fp
14314     04 E7 BF FD | 	call	#_converttoint
14318     18 4E 05 F1 | 	add	fp, #24
1431c     A7 FA 61 FC | 	wrlong	result1, fp
14320     0C 4E 85 F1 | 	sub	fp, #12
14324     A7 12 02 F6 | 	mov	arg01, fp
14328     0C 4E 85 F1 | 	sub	fp, #12
1432c     EC E6 BF FD | 	call	#_converttoint
14330     1C 4E 05 F1 | 	add	fp, #28
14334     A7 FA 61 FC | 	wrlong	result1, fp
14338     57 00 00 FF 
1433c     10 E4 05 F1 | 	add	objptr, ##44560
14340     F2 12 02 FB | 	rdlong	arg01, objptr
14344     04 E4 05 F1 | 	add	objptr, #4
14348     F2 14 02 FB | 	rdlong	arg02, objptr
1434c     04 4E 85 F1 | 	sub	fp, #4
14350     A7 16 02 FB | 	rdlong	arg03, fp
14354     FD 18 02 F6 | 	mov	arg04, result1
14358     18 4E 85 F1 | 	sub	fp, #24
1435c     08 E4 85 F1 | 	sub	objptr, #8
14360     F2 1A 02 FB | 	rdlong	arg05, objptr
14364     57 00 00 FF 
14368     0C E4 85 F1 | 	sub	objptr, ##44556
1436c     D4 61 B0 FD | 	call	#_hg010b_spin2_draw
14370     18 4E 05 F1 | 	add	fp, #24
14374     A7 1A 02 FB | 	rdlong	arg05, fp
14378     57 00 00 FF 
1437c     10 E4 05 F1 | 	add	objptr, ##44560
14380     F2 1A 62 FC | 	wrlong	arg05, objptr
14384     04 4E 05 F1 | 	add	fp, #4
14388     A7 1A 02 FB | 	rdlong	arg05, fp
1438c     1C 4E 85 F1 | 	sub	fp, #28
14390     04 E4 05 F1 | 	add	objptr, #4
14394     F2 1A 62 FC | 	wrlong	arg05, objptr
14398     57 00 00 FF 
1439c     14 E4 85 F1 | 	sub	objptr, ##44564
143a0     A7 F0 03 F6 | 	mov	ptra, fp
143a4     B2 00 A0 FD | 	call	#popregs_
143a8                 | _do_draw_ret
143a8     2D 00 64 FD | 	ret
143ac                 | 
143ac                 | ' 
143ac                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
143ac                 | ' 
143ac                 | ' sub do_fcircle
143ac                 | _do_fcircle
143ac     02 4A 05 F6 | 	mov	COUNT_, #2
143b0     A8 00 A0 FD | 	call	#pushregs_
143b4     24 F0 07 F1 | 	add	ptra, #36
143b8     0C 5D BF FD | 	call	#_pop
143bc     FD 18 02 F6 | 	mov	arg04, result1
143c0     FE 16 02 F6 | 	mov	arg03, result2
143c4     FF 14 02 F6 | 	mov	arg02, result3
143c8     18 4E 05 F1 | 	add	fp, #24
143cc     A7 18 62 FC | 	wrlong	arg04, fp
143d0     04 4E 05 F1 | 	add	fp, #4
143d4     A7 16 62 FC | 	wrlong	arg03, fp
143d8     04 4E 05 F1 | 	add	fp, #4
143dc     A7 14 62 FC | 	wrlong	arg02, fp
143e0     20 4E 85 F1 | 	sub	fp, #32
143e4     E0 5C BF FD | 	call	#_pop
143e8     FD 18 02 F6 | 	mov	arg04, result1
143ec     FE 16 02 F6 | 	mov	arg03, result2
143f0     FF 1E 02 F6 | 	mov	local01, result3
143f4     0C 4E 05 F1 | 	add	fp, #12
143f8     A7 18 62 FC | 	wrlong	arg04, fp
143fc     04 4E 05 F1 | 	add	fp, #4
14400     A7 16 62 FC | 	wrlong	arg03, fp
14404     04 4E 05 F1 | 	add	fp, #4
14408     A7 1E 62 FC | 	wrlong	local01, fp
1440c     14 4E 85 F1 | 	sub	fp, #20
14410     B4 5C BF FD | 	call	#_pop
14414     A7 FA 61 FC | 	wrlong	result1, fp
14418     04 4E 05 F1 | 	add	fp, #4
1441c     A7 FC 61 FC | 	wrlong	result2, fp
14420     04 4E 05 F1 | 	add	fp, #4
14424     A7 FE 61 FC | 	wrlong	result3, fp
14428                 | ' 
14428                 | ' t3=pop()
14428                 | ' t2=pop()
14428                 | ' t1=pop()
14428                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
14428     FF 18 02 F6 | 	mov	arg04, result3
1442c     08 4E 85 F1 | 	sub	fp, #8
14430     1C 18 0E F2 | 	cmp	arg04, #28 wz
14434     08 4E 05 51 |  if_ne	add	fp, #8
14438     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1443c     08 4E 85 51 |  if_ne	sub	fp, #8
14440     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14444     7C 00 90 5D |  if_ne	jmp	#LR__1620
14448     14 4E 05 F1 | 	add	fp, #20
1444c     A7 1E 02 FB | 	rdlong	local01, fp
14450     14 4E 85 F1 | 	sub	fp, #20
14454     1C 1E 0E F2 | 	cmp	local01, #28 wz
14458     14 4E 05 51 |  if_ne	add	fp, #20
1445c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14460     14 4E 85 51 |  if_ne	sub	fp, #20
14464     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14468     58 00 90 5D |  if_ne	jmp	#LR__1620
1446c     20 4E 05 F1 | 	add	fp, #32
14470     A7 1E 02 FB | 	rdlong	local01, fp
14474     20 4E 85 F1 | 	sub	fp, #32
14478     1C 1E 0E F2 | 	cmp	local01, #28 wz
1447c     20 4E 05 51 |  if_ne	add	fp, #32
14480     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14484     20 4E 85 51 |  if_ne	sub	fp, #32
14488     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1448c     34 00 90 5D |  if_ne	jmp	#LR__1620
14490     A7 12 02 FB | 	rdlong	arg01, fp
14494     0C 4E 05 F1 | 	add	fp, #12
14498     A7 14 02 FB | 	rdlong	arg02, fp
1449c     0C 4E 05 F1 | 	add	fp, #12
144a0     A7 16 02 FB | 	rdlong	arg03, fp
144a4     18 4E 85 F1 | 	sub	fp, #24
144a8     57 00 00 FF 
144ac     0C E4 05 F1 | 	add	objptr, ##44556
144b0     F2 18 02 FB | 	rdlong	arg04, objptr
144b4     57 00 00 FF 
144b8     0C E4 85 F1 | 	sub	objptr, ##44556
144bc     08 65 B0 FD | 	call	#_hg010b_spin2_fcircle
144c0                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
144c0     54 00 90 FD | 	jmp	#LR__1621
144c4                 | LR__1620
144c4     A7 12 02 F6 | 	mov	arg01, fp
144c8     50 E5 BF FD | 	call	#_converttoint
144cc     FD 1E 02 F6 | 	mov	local01, result1
144d0     0C 4E 05 F1 | 	add	fp, #12
144d4     A7 12 02 F6 | 	mov	arg01, fp
144d8     0C 4E 85 F1 | 	sub	fp, #12
144dc     3C E5 BF FD | 	call	#_converttoint
144e0     FD 20 02 F6 | 	mov	local02, result1
144e4     18 4E 05 F1 | 	add	fp, #24
144e8     A7 12 02 F6 | 	mov	arg01, fp
144ec     18 4E 85 F1 | 	sub	fp, #24
144f0     28 E5 BF FD | 	call	#_converttoint
144f4     FD 16 02 F6 | 	mov	arg03, result1
144f8     57 00 00 FF 
144fc     0C E4 05 F1 | 	add	objptr, ##44556
14500     F2 18 02 FB | 	rdlong	arg04, objptr
14504     57 00 00 FF 
14508     0C E4 85 F1 | 	sub	objptr, ##44556
1450c     0F 13 02 F6 | 	mov	arg01, local01
14510     10 15 02 F6 | 	mov	arg02, local02
14514     B0 64 B0 FD | 	call	#_hg010b_spin2_fcircle
14518                 | LR__1621
14518     A7 F0 03 F6 | 	mov	ptra, fp
1451c     B2 00 A0 FD | 	call	#popregs_
14520                 | _do_fcircle_ret
14520     2D 00 64 FD | 	ret
14524                 | 
14524                 | ' 
14524                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
14524                 | ' 
14524                 | ' sub do_circle
14524                 | _do_circle
14524     02 4A 05 F6 | 	mov	COUNT_, #2
14528     A8 00 A0 FD | 	call	#pushregs_
1452c     24 F0 07 F1 | 	add	ptra, #36
14530     94 5B BF FD | 	call	#_pop
14534     FD 18 02 F6 | 	mov	arg04, result1
14538     FE 16 02 F6 | 	mov	arg03, result2
1453c     FF 14 02 F6 | 	mov	arg02, result3
14540     18 4E 05 F1 | 	add	fp, #24
14544     A7 18 62 FC | 	wrlong	arg04, fp
14548     04 4E 05 F1 | 	add	fp, #4
1454c     A7 16 62 FC | 	wrlong	arg03, fp
14550     04 4E 05 F1 | 	add	fp, #4
14554     A7 14 62 FC | 	wrlong	arg02, fp
14558     20 4E 85 F1 | 	sub	fp, #32
1455c     68 5B BF FD | 	call	#_pop
14560     FD 18 02 F6 | 	mov	arg04, result1
14564     FE 16 02 F6 | 	mov	arg03, result2
14568     FF 1E 02 F6 | 	mov	local01, result3
1456c     0C 4E 05 F1 | 	add	fp, #12
14570     A7 18 62 FC | 	wrlong	arg04, fp
14574     04 4E 05 F1 | 	add	fp, #4
14578     A7 16 62 FC | 	wrlong	arg03, fp
1457c     04 4E 05 F1 | 	add	fp, #4
14580     A7 1E 62 FC | 	wrlong	local01, fp
14584     14 4E 85 F1 | 	sub	fp, #20
14588     3C 5B BF FD | 	call	#_pop
1458c     A7 FA 61 FC | 	wrlong	result1, fp
14590     04 4E 05 F1 | 	add	fp, #4
14594     A7 FC 61 FC | 	wrlong	result2, fp
14598     04 4E 05 F1 | 	add	fp, #4
1459c     A7 FE 61 FC | 	wrlong	result3, fp
145a0                 | ' 
145a0                 | ' t3=pop()
145a0                 | ' t2=pop()
145a0                 | ' t1=pop()
145a0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
145a0     FF 18 02 F6 | 	mov	arg04, result3
145a4     08 4E 85 F1 | 	sub	fp, #8
145a8     1C 18 0E F2 | 	cmp	arg04, #28 wz
145ac     08 4E 05 51 |  if_ne	add	fp, #8
145b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
145b4     08 4E 85 51 |  if_ne	sub	fp, #8
145b8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
145bc     7C 00 90 5D |  if_ne	jmp	#LR__1630
145c0     14 4E 05 F1 | 	add	fp, #20
145c4     A7 1E 02 FB | 	rdlong	local01, fp
145c8     14 4E 85 F1 | 	sub	fp, #20
145cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
145d0     14 4E 05 51 |  if_ne	add	fp, #20
145d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
145d8     14 4E 85 51 |  if_ne	sub	fp, #20
145dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
145e0     58 00 90 5D |  if_ne	jmp	#LR__1630
145e4     20 4E 05 F1 | 	add	fp, #32
145e8     A7 1E 02 FB | 	rdlong	local01, fp
145ec     20 4E 85 F1 | 	sub	fp, #32
145f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
145f4     20 4E 05 51 |  if_ne	add	fp, #32
145f8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
145fc     20 4E 85 51 |  if_ne	sub	fp, #32
14600     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14604     34 00 90 5D |  if_ne	jmp	#LR__1630
14608     A7 12 02 FB | 	rdlong	arg01, fp
1460c     0C 4E 05 F1 | 	add	fp, #12
14610     A7 14 02 FB | 	rdlong	arg02, fp
14614     0C 4E 05 F1 | 	add	fp, #12
14618     A7 16 02 FB | 	rdlong	arg03, fp
1461c     18 4E 85 F1 | 	sub	fp, #24
14620     57 00 00 FF 
14624     0C E4 05 F1 | 	add	objptr, ##44556
14628     F2 18 02 FB | 	rdlong	arg04, objptr
1462c     57 00 00 FF 
14630     0C E4 85 F1 | 	sub	objptr, ##44556
14634     9C 64 B0 FD | 	call	#_hg010b_spin2_circle
14638                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
14638     54 00 90 FD | 	jmp	#LR__1631
1463c                 | LR__1630
1463c     A7 12 02 F6 | 	mov	arg01, fp
14640     D8 E3 BF FD | 	call	#_converttoint
14644     FD 1E 02 F6 | 	mov	local01, result1
14648     0C 4E 05 F1 | 	add	fp, #12
1464c     A7 12 02 F6 | 	mov	arg01, fp
14650     0C 4E 85 F1 | 	sub	fp, #12
14654     C4 E3 BF FD | 	call	#_converttoint
14658     FD 20 02 F6 | 	mov	local02, result1
1465c     18 4E 05 F1 | 	add	fp, #24
14660     A7 12 02 F6 | 	mov	arg01, fp
14664     18 4E 85 F1 | 	sub	fp, #24
14668     B0 E3 BF FD | 	call	#_converttoint
1466c     FD 16 02 F6 | 	mov	arg03, result1
14670     57 00 00 FF 
14674     0C E4 05 F1 | 	add	objptr, ##44556
14678     F2 18 02 FB | 	rdlong	arg04, objptr
1467c     57 00 00 FF 
14680     0C E4 85 F1 | 	sub	objptr, ##44556
14684     0F 13 02 F6 | 	mov	arg01, local01
14688     10 15 02 F6 | 	mov	arg02, local02
1468c     44 64 B0 FD | 	call	#_hg010b_spin2_circle
14690                 | LR__1631
14690     A7 F0 03 F6 | 	mov	ptra, fp
14694     B2 00 A0 FD | 	call	#popregs_
14698                 | _do_circle_ret
14698     2D 00 64 FD | 	ret
1469c                 | 
1469c                 | ' 
1469c                 | ' ' -------------------------- Draw a rectangle
1469c                 | ' 
1469c                 | ' sub do_box
1469c                 | _do_box
1469c     03 4A 05 F6 | 	mov	COUNT_, #3
146a0     A8 00 A0 FD | 	call	#pushregs_
146a4     30 F0 07 F1 | 	add	ptra, #48
146a8     1C 5A BF FD | 	call	#_pop
146ac     FD 1A 02 F6 | 	mov	arg05, result1
146b0     FE 18 02 F6 | 	mov	arg04, result2
146b4     FF 16 02 F6 | 	mov	arg03, result3
146b8     24 4E 05 F1 | 	add	fp, #36
146bc     A7 1A 62 FC | 	wrlong	arg05, fp
146c0     04 4E 05 F1 | 	add	fp, #4
146c4     A7 18 62 FC | 	wrlong	arg04, fp
146c8     04 4E 05 F1 | 	add	fp, #4
146cc     A7 16 62 FC | 	wrlong	arg03, fp
146d0     2C 4E 85 F1 | 	sub	fp, #44
146d4     F0 59 BF FD | 	call	#_pop
146d8     FD 1A 02 F6 | 	mov	arg05, result1
146dc     FE 18 02 F6 | 	mov	arg04, result2
146e0     FF 16 02 F6 | 	mov	arg03, result3
146e4     18 4E 05 F1 | 	add	fp, #24
146e8     A7 1A 62 FC | 	wrlong	arg05, fp
146ec     04 4E 05 F1 | 	add	fp, #4
146f0     A7 18 62 FC | 	wrlong	arg04, fp
146f4     04 4E 05 F1 | 	add	fp, #4
146f8     A7 16 62 FC | 	wrlong	arg03, fp
146fc     20 4E 85 F1 | 	sub	fp, #32
14700     C4 59 BF FD | 	call	#_pop
14704     FD 1A 02 F6 | 	mov	arg05, result1
14708     FE 18 02 F6 | 	mov	arg04, result2
1470c     FF 1E 02 F6 | 	mov	local01, result3
14710     0C 4E 05 F1 | 	add	fp, #12
14714     A7 1A 62 FC | 	wrlong	arg05, fp
14718     04 4E 05 F1 | 	add	fp, #4
1471c     A7 18 62 FC | 	wrlong	arg04, fp
14720     04 4E 05 F1 | 	add	fp, #4
14724     A7 1E 62 FC | 	wrlong	local01, fp
14728     14 4E 85 F1 | 	sub	fp, #20
1472c     98 59 BF FD | 	call	#_pop
14730     A7 FA 61 FC | 	wrlong	result1, fp
14734     04 4E 05 F1 | 	add	fp, #4
14738     A7 FC 61 FC | 	wrlong	result2, fp
1473c     04 4E 05 F1 | 	add	fp, #4
14740     A7 FE 61 FC | 	wrlong	result3, fp
14744                 | ' 
14744                 | ' t4=pop()
14744                 | ' t3=pop()
14744                 | ' t2=pop()
14744                 | ' t1=pop()
14744                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14744     FF 1A 02 F6 | 	mov	arg05, result3
14748     08 4E 85 F1 | 	sub	fp, #8
1474c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14750     08 4E 05 51 |  if_ne	add	fp, #8
14754     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14758     08 4E 85 51 |  if_ne	sub	fp, #8
1475c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14760     A8 00 90 5D |  if_ne	jmp	#LR__1640
14764     14 4E 05 F1 | 	add	fp, #20
14768     A7 1E 02 FB | 	rdlong	local01, fp
1476c     14 4E 85 F1 | 	sub	fp, #20
14770     1C 1E 0E F2 | 	cmp	local01, #28 wz
14774     14 4E 05 51 |  if_ne	add	fp, #20
14778     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1477c     14 4E 85 51 |  if_ne	sub	fp, #20
14780     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14784     84 00 90 5D |  if_ne	jmp	#LR__1640
14788     20 4E 05 F1 | 	add	fp, #32
1478c     A7 1E 02 FB | 	rdlong	local01, fp
14790     20 4E 85 F1 | 	sub	fp, #32
14794     1C 1E 0E F2 | 	cmp	local01, #28 wz
14798     20 4E 05 51 |  if_ne	add	fp, #32
1479c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
147a0     20 4E 85 51 |  if_ne	sub	fp, #32
147a4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
147a8     60 00 90 5D |  if_ne	jmp	#LR__1640
147ac     2C 4E 05 F1 | 	add	fp, #44
147b0     A7 1E 02 FB | 	rdlong	local01, fp
147b4     2C 4E 85 F1 | 	sub	fp, #44
147b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
147bc     2C 4E 05 51 |  if_ne	add	fp, #44
147c0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
147c4     2C 4E 85 51 |  if_ne	sub	fp, #44
147c8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
147cc     3C 00 90 5D |  if_ne	jmp	#LR__1640
147d0     A7 12 02 FB | 	rdlong	arg01, fp
147d4     0C 4E 05 F1 | 	add	fp, #12
147d8     A7 14 02 FB | 	rdlong	arg02, fp
147dc     0C 4E 05 F1 | 	add	fp, #12
147e0     A7 16 02 FB | 	rdlong	arg03, fp
147e4     0C 4E 05 F1 | 	add	fp, #12
147e8     A7 18 02 FB | 	rdlong	arg04, fp
147ec     24 4E 85 F1 | 	sub	fp, #36
147f0     57 00 00 FF 
147f4     0C E4 05 F1 | 	add	objptr, ##44556
147f8     F2 1A 02 FB | 	rdlong	arg05, objptr
147fc     57 00 00 FF 
14800     0C E4 85 F1 | 	sub	objptr, ##44556
14804     98 64 B0 FD | 	call	#_hg010b_spin2_box
14808                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14808     6C 00 90 FD | 	jmp	#LR__1641
1480c                 | LR__1640
1480c     A7 12 02 F6 | 	mov	arg01, fp
14810     08 E2 BF FD | 	call	#_converttoint
14814     FD 20 02 F6 | 	mov	local02, result1
14818     0C 4E 05 F1 | 	add	fp, #12
1481c     A7 12 02 F6 | 	mov	arg01, fp
14820     0C 4E 85 F1 | 	sub	fp, #12
14824     F4 E1 BF FD | 	call	#_converttoint
14828     FD 22 02 F6 | 	mov	local03, result1
1482c     18 4E 05 F1 | 	add	fp, #24
14830     A7 12 02 F6 | 	mov	arg01, fp
14834     18 4E 85 F1 | 	sub	fp, #24
14838     E0 E1 BF FD | 	call	#_converttoint
1483c     FD 1E 02 F6 | 	mov	local01, result1
14840     24 4E 05 F1 | 	add	fp, #36
14844     A7 12 02 F6 | 	mov	arg01, fp
14848     24 4E 85 F1 | 	sub	fp, #36
1484c     CC E1 BF FD | 	call	#_converttoint
14850     FD 18 02 F6 | 	mov	arg04, result1
14854     57 00 00 FF 
14858     0C E4 05 F1 | 	add	objptr, ##44556
1485c     F2 1A 02 FB | 	rdlong	arg05, objptr
14860     57 00 00 FF 
14864     0C E4 85 F1 | 	sub	objptr, ##44556
14868     10 13 02 F6 | 	mov	arg01, local02
1486c     11 15 02 F6 | 	mov	arg02, local03
14870     0F 17 02 F6 | 	mov	arg03, local01
14874     28 64 B0 FD | 	call	#_hg010b_spin2_box
14878                 | LR__1641
14878     A7 F0 03 F6 | 	mov	ptra, fp
1487c     B2 00 A0 FD | 	call	#popregs_
14880                 | _do_box_ret
14880     2D 00 64 FD | 	ret
14884                 | 
14884                 | ' 
14884                 | ' sub do_fill
14884                 | _do_fill
14884     03 4A 05 F6 | 	mov	COUNT_, #3
14888     A8 00 A0 FD | 	call	#pushregs_
1488c     30 F0 07 F1 | 	add	ptra, #48
14890     34 58 BF FD | 	call	#_pop
14894     FD 18 02 F6 | 	mov	arg04, result1
14898     FE 16 02 F6 | 	mov	arg03, result2
1489c     FF 14 02 F6 | 	mov	arg02, result3
148a0     24 4E 05 F1 | 	add	fp, #36
148a4     A7 18 62 FC | 	wrlong	arg04, fp
148a8     04 4E 05 F1 | 	add	fp, #4
148ac     A7 16 62 FC | 	wrlong	arg03, fp
148b0     04 4E 05 F1 | 	add	fp, #4
148b4     A7 14 62 FC | 	wrlong	arg02, fp
148b8     2C 4E 85 F1 | 	sub	fp, #44
148bc     08 58 BF FD | 	call	#_pop
148c0     FD 18 02 F6 | 	mov	arg04, result1
148c4     FE 16 02 F6 | 	mov	arg03, result2
148c8     FF 14 02 F6 | 	mov	arg02, result3
148cc     18 4E 05 F1 | 	add	fp, #24
148d0     A7 18 62 FC | 	wrlong	arg04, fp
148d4     04 4E 05 F1 | 	add	fp, #4
148d8     A7 16 62 FC | 	wrlong	arg03, fp
148dc     04 4E 05 F1 | 	add	fp, #4
148e0     A7 14 62 FC | 	wrlong	arg02, fp
148e4     20 4E 85 F1 | 	sub	fp, #32
148e8     DC 57 BF FD | 	call	#_pop
148ec     FD 18 02 F6 | 	mov	arg04, result1
148f0     FE 16 02 F6 | 	mov	arg03, result2
148f4     FF 1E 02 F6 | 	mov	local01, result3
148f8     0C 4E 05 F1 | 	add	fp, #12
148fc     A7 18 62 FC | 	wrlong	arg04, fp
14900     04 4E 05 F1 | 	add	fp, #4
14904     A7 16 62 FC | 	wrlong	arg03, fp
14908     04 4E 05 F1 | 	add	fp, #4
1490c     A7 1E 62 FC | 	wrlong	local01, fp
14910     14 4E 85 F1 | 	sub	fp, #20
14914     B0 57 BF FD | 	call	#_pop
14918     A7 FA 61 FC | 	wrlong	result1, fp
1491c     04 4E 05 F1 | 	add	fp, #4
14920     A7 FC 61 FC | 	wrlong	result2, fp
14924     04 4E 05 F1 | 	add	fp, #4
14928     A7 FE 61 FC | 	wrlong	result3, fp
1492c                 | ' 
1492c                 | ' t4=pop()
1492c                 | ' t3=pop()
1492c                 | ' t2=pop()
1492c                 | ' t1=pop()
1492c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
1492c     FF 18 02 F6 | 	mov	arg04, result3
14930     08 4E 85 F1 | 	sub	fp, #8
14934     1C 18 0E F2 | 	cmp	arg04, #28 wz
14938     08 4E 05 51 |  if_ne	add	fp, #8
1493c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14940     08 4E 85 51 |  if_ne	sub	fp, #8
14944     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14948     94 00 90 5D |  if_ne	jmp	#LR__1650
1494c     14 4E 05 F1 | 	add	fp, #20
14950     A7 1E 02 FB | 	rdlong	local01, fp
14954     14 4E 85 F1 | 	sub	fp, #20
14958     1C 1E 0E F2 | 	cmp	local01, #28 wz
1495c     14 4E 05 51 |  if_ne	add	fp, #20
14960     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14964     14 4E 85 51 |  if_ne	sub	fp, #20
14968     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1496c     70 00 90 5D |  if_ne	jmp	#LR__1650
14970     20 4E 05 F1 | 	add	fp, #32
14974     A7 1E 02 FB | 	rdlong	local01, fp
14978     20 4E 85 F1 | 	sub	fp, #32
1497c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14980     20 4E 05 51 |  if_ne	add	fp, #32
14984     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14988     20 4E 85 51 |  if_ne	sub	fp, #32
1498c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14990     4C 00 90 5D |  if_ne	jmp	#LR__1650
14994     2C 4E 05 F1 | 	add	fp, #44
14998     A7 1E 02 FB | 	rdlong	local01, fp
1499c     2C 4E 85 F1 | 	sub	fp, #44
149a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
149a4     2C 4E 05 51 |  if_ne	add	fp, #44
149a8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149ac     2C 4E 85 51 |  if_ne	sub	fp, #44
149b0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
149b4     28 00 90 5D |  if_ne	jmp	#LR__1650
149b8     A7 12 02 FB | 	rdlong	arg01, fp
149bc     0C 4E 05 F1 | 	add	fp, #12
149c0     A7 14 02 FB | 	rdlong	arg02, fp
149c4     0C 4E 05 F1 | 	add	fp, #12
149c8     A7 16 02 FB | 	rdlong	arg03, fp
149cc     0C 4E 05 F1 | 	add	fp, #12
149d0     A7 18 02 FB | 	rdlong	arg04, fp
149d4     24 4E 85 F1 | 	sub	fp, #36
149d8     58 5D B0 FD | 	call	#_hg010b_spin2_fill
149dc                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
149dc     58 00 90 FD | 	jmp	#LR__1651
149e0                 | LR__1650
149e0     A7 12 02 F6 | 	mov	arg01, fp
149e4     34 E0 BF FD | 	call	#_converttoint
149e8     FD 20 02 F6 | 	mov	local02, result1
149ec     0C 4E 05 F1 | 	add	fp, #12
149f0     A7 12 02 F6 | 	mov	arg01, fp
149f4     0C 4E 85 F1 | 	sub	fp, #12
149f8     20 E0 BF FD | 	call	#_converttoint
149fc     FD 22 02 F6 | 	mov	local03, result1
14a00     18 4E 05 F1 | 	add	fp, #24
14a04     A7 12 02 F6 | 	mov	arg01, fp
14a08     18 4E 85 F1 | 	sub	fp, #24
14a0c     0C E0 BF FD | 	call	#_converttoint
14a10     FD 1E 02 F6 | 	mov	local01, result1
14a14     24 4E 05 F1 | 	add	fp, #36
14a18     A7 12 02 F6 | 	mov	arg01, fp
14a1c     24 4E 85 F1 | 	sub	fp, #36
14a20     F8 DF BF FD | 	call	#_converttoint
14a24     FD 18 02 F6 | 	mov	arg04, result1
14a28     10 13 02 F6 | 	mov	arg01, local02
14a2c     11 15 02 F6 | 	mov	arg02, local03
14a30     0F 17 02 F6 | 	mov	arg03, local01
14a34     FC 5C B0 FD | 	call	#_hg010b_spin2_fill
14a38                 | LR__1651
14a38     A7 F0 03 F6 | 	mov	ptra, fp
14a3c     B2 00 A0 FD | 	call	#popregs_
14a40                 | _do_fill_ret
14a40     2D 00 64 FD | 	ret
14a44                 | 
14a44                 | ' 
14a44                 | ' ' -------------------------- Draw a frane
14a44                 | ' 
14a44                 | ' sub do_frame
14a44                 | _do_frame
14a44     03 4A 05 F6 | 	mov	COUNT_, #3
14a48     A8 00 A0 FD | 	call	#pushregs_
14a4c     30 F0 07 F1 | 	add	ptra, #48
14a50     74 56 BF FD | 	call	#_pop
14a54     FD 1A 02 F6 | 	mov	arg05, result1
14a58     FE 18 02 F6 | 	mov	arg04, result2
14a5c     FF 16 02 F6 | 	mov	arg03, result3
14a60     24 4E 05 F1 | 	add	fp, #36
14a64     A7 1A 62 FC | 	wrlong	arg05, fp
14a68     04 4E 05 F1 | 	add	fp, #4
14a6c     A7 18 62 FC | 	wrlong	arg04, fp
14a70     04 4E 05 F1 | 	add	fp, #4
14a74     A7 16 62 FC | 	wrlong	arg03, fp
14a78     2C 4E 85 F1 | 	sub	fp, #44
14a7c     48 56 BF FD | 	call	#_pop
14a80     FD 1A 02 F6 | 	mov	arg05, result1
14a84     FE 18 02 F6 | 	mov	arg04, result2
14a88     FF 16 02 F6 | 	mov	arg03, result3
14a8c     18 4E 05 F1 | 	add	fp, #24
14a90     A7 1A 62 FC | 	wrlong	arg05, fp
14a94     04 4E 05 F1 | 	add	fp, #4
14a98     A7 18 62 FC | 	wrlong	arg04, fp
14a9c     04 4E 05 F1 | 	add	fp, #4
14aa0     A7 16 62 FC | 	wrlong	arg03, fp
14aa4     20 4E 85 F1 | 	sub	fp, #32
14aa8     1C 56 BF FD | 	call	#_pop
14aac     FD 1A 02 F6 | 	mov	arg05, result1
14ab0     FE 18 02 F6 | 	mov	arg04, result2
14ab4     FF 1E 02 F6 | 	mov	local01, result3
14ab8     0C 4E 05 F1 | 	add	fp, #12
14abc     A7 1A 62 FC | 	wrlong	arg05, fp
14ac0     04 4E 05 F1 | 	add	fp, #4
14ac4     A7 18 62 FC | 	wrlong	arg04, fp
14ac8     04 4E 05 F1 | 	add	fp, #4
14acc     A7 1E 62 FC | 	wrlong	local01, fp
14ad0     14 4E 85 F1 | 	sub	fp, #20
14ad4     F0 55 BF FD | 	call	#_pop
14ad8     A7 FA 61 FC | 	wrlong	result1, fp
14adc     04 4E 05 F1 | 	add	fp, #4
14ae0     A7 FC 61 FC | 	wrlong	result2, fp
14ae4     04 4E 05 F1 | 	add	fp, #4
14ae8     A7 FE 61 FC | 	wrlong	result3, fp
14aec                 | ' 
14aec                 | ' t4=pop()
14aec                 | ' t3=pop()
14aec                 | ' t2=pop()
14aec                 | ' t1=pop()
14aec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14aec     FF 1A 02 F6 | 	mov	arg05, result3
14af0     08 4E 85 F1 | 	sub	fp, #8
14af4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14af8     08 4E 05 51 |  if_ne	add	fp, #8
14afc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14b00     08 4E 85 51 |  if_ne	sub	fp, #8
14b04     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14b08     A8 00 90 5D |  if_ne	jmp	#LR__1660
14b0c     14 4E 05 F1 | 	add	fp, #20
14b10     A7 1E 02 FB | 	rdlong	local01, fp
14b14     14 4E 85 F1 | 	sub	fp, #20
14b18     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b1c     14 4E 05 51 |  if_ne	add	fp, #20
14b20     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b24     14 4E 85 51 |  if_ne	sub	fp, #20
14b28     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b2c     84 00 90 5D |  if_ne	jmp	#LR__1660
14b30     20 4E 05 F1 | 	add	fp, #32
14b34     A7 1E 02 FB | 	rdlong	local01, fp
14b38     20 4E 85 F1 | 	sub	fp, #32
14b3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b40     20 4E 05 51 |  if_ne	add	fp, #32
14b44     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b48     20 4E 85 51 |  if_ne	sub	fp, #32
14b4c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b50     60 00 90 5D |  if_ne	jmp	#LR__1660
14b54     2C 4E 05 F1 | 	add	fp, #44
14b58     A7 1E 02 FB | 	rdlong	local01, fp
14b5c     2C 4E 85 F1 | 	sub	fp, #44
14b60     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b64     2C 4E 05 51 |  if_ne	add	fp, #44
14b68     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b6c     2C 4E 85 51 |  if_ne	sub	fp, #44
14b70     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b74     3C 00 90 5D |  if_ne	jmp	#LR__1660
14b78     A7 12 02 FB | 	rdlong	arg01, fp
14b7c     0C 4E 05 F1 | 	add	fp, #12
14b80     A7 14 02 FB | 	rdlong	arg02, fp
14b84     0C 4E 05 F1 | 	add	fp, #12
14b88     A7 16 02 FB | 	rdlong	arg03, fp
14b8c     0C 4E 05 F1 | 	add	fp, #12
14b90     A7 18 02 FB | 	rdlong	arg04, fp
14b94     24 4E 85 F1 | 	sub	fp, #36
14b98     57 00 00 FF 
14b9c     0C E4 05 F1 | 	add	objptr, ##44556
14ba0     F2 1A 02 FB | 	rdlong	arg05, objptr
14ba4     57 00 00 FF 
14ba8     0C E4 85 F1 | 	sub	objptr, ##44556
14bac     70 60 B0 FD | 	call	#_hg010b_spin2_frame
14bb0                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14bb0     6C 00 90 FD | 	jmp	#LR__1661
14bb4                 | LR__1660
14bb4     A7 12 02 F6 | 	mov	arg01, fp
14bb8     60 DE BF FD | 	call	#_converttoint
14bbc     FD 20 02 F6 | 	mov	local02, result1
14bc0     0C 4E 05 F1 | 	add	fp, #12
14bc4     A7 12 02 F6 | 	mov	arg01, fp
14bc8     0C 4E 85 F1 | 	sub	fp, #12
14bcc     4C DE BF FD | 	call	#_converttoint
14bd0     FD 22 02 F6 | 	mov	local03, result1
14bd4     18 4E 05 F1 | 	add	fp, #24
14bd8     A7 12 02 F6 | 	mov	arg01, fp
14bdc     18 4E 85 F1 | 	sub	fp, #24
14be0     38 DE BF FD | 	call	#_converttoint
14be4     FD 1E 02 F6 | 	mov	local01, result1
14be8     24 4E 05 F1 | 	add	fp, #36
14bec     A7 12 02 F6 | 	mov	arg01, fp
14bf0     24 4E 85 F1 | 	sub	fp, #36
14bf4     24 DE BF FD | 	call	#_converttoint
14bf8     FD 18 02 F6 | 	mov	arg04, result1
14bfc     57 00 00 FF 
14c00     0C E4 05 F1 | 	add	objptr, ##44556
14c04     F2 1A 02 FB | 	rdlong	arg05, objptr
14c08     57 00 00 FF 
14c0c     0C E4 85 F1 | 	sub	objptr, ##44556
14c10     10 13 02 F6 | 	mov	arg01, local02
14c14     11 15 02 F6 | 	mov	arg02, local03
14c18     0F 17 02 F6 | 	mov	arg03, local01
14c1c     00 60 B0 FD | 	call	#_hg010b_spin2_frame
14c20                 | LR__1661
14c20     A7 F0 03 F6 | 	mov	ptra, fp
14c24     B2 00 A0 FD | 	call	#popregs_
14c28                 | _do_frame_ret
14c28     2D 00 64 FD | 	ret
14c2c                 | 
14c2c                 | ' 
14c2c                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
14c2c                 | ' 
14c2c                 | ' ' ------------------------- Print to the screem
14c2c                 | ' 
14c2c                 | ' sub do_print  
14c2c                 | _do_print
14c2c     0A 4A 05 F6 | 	mov	COUNT_, #10
14c30     A8 00 A0 FD | 	call	#pushregs_
14c34     00 24 06 F6 | 	mov	local04, #0
14c38     8C 54 BF FD | 	call	#_pop
14c3c     FD 26 02 F6 | 	mov	local05, result1
14c40     FE 28 02 F6 | 	mov	local06, result2
14c44     FF 2A 02 F6 | 	mov	local07, result3
14c48     13 1F 02 F6 | 	mov	local01, local05
14c4c     14 21 02 F6 | 	mov	local02, local06
14c50     15 23 02 F6 | 	mov	local03, local07
14c54                 | '  
14c54                 | ' r=0
14c54                 | ' t1=pop() 
14c54                 | ' 'print t1.result_type,t1.result.uresult
14c54                 | ' 
14c54                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
14c54     21 22 0E F2 | 	cmp	local03, #33 wz
14c58     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
14c5c     20 00 90 5D |  if_ne	jmp	#LR__1670
14c60     11 25 02 F6 | 	mov	local04, local03
14c64     60 54 BF FD | 	call	#_pop
14c68     FD 26 02 F6 | 	mov	local05, result1
14c6c     FE 28 02 F6 | 	mov	local06, result2
14c70     FF 2A 02 F6 | 	mov	local07, result3
14c74     13 1F 02 F6 | 	mov	local01, local05
14c78     14 21 02 F6 | 	mov	local02, local06
14c7c     15 23 02 F6 | 	mov	local03, local07
14c80                 | LR__1670
14c80                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14c80     20 22 0E F2 | 	cmp	local03, #32 wz
14c84     11 25 02 A6 |  if_e	mov	local04, local03
14c88                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
14c88     FF 22 0E F2 | 	cmp	local03, #255 wz
14c8c     0C 00 90 5D |  if_ne	jmp	#LR__1671
14c90     0F 13 02 F6 | 	mov	arg01, local01
14c94     C0 3E B0 FD | 	call	#_printerror
14c98     4C 04 90 FD | 	jmp	#LR__1689
14c9c                 | LR__1671
14c9c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
14c9c     2B 22 0E F2 | 	cmp	local03, #43 wz
14ca0     14 00 90 5D |  if_ne	jmp	#LR__1672
14ca4     0F 13 02 F6 | 	mov	arg01, local01
14ca8     C0 93 BF FD | 	call	#_convertstring
14cac     FD 26 02 F6 | 	mov	local05, result1
14cb0     13 1F 02 F6 | 	mov	local01, local05
14cb4     1F 22 06 F6 | 	mov	local03, #31
14cb8                 | LR__1672
14cb8                 | ' 
14cb8                 | ' if r=print_mod_comma  then
14cb8     21 24 0E F2 | 	cmp	local04, #33 wz
14cbc     AC 01 90 5D |  if_ne	jmp	#LR__1677
14cc0                 | '   if t1.result_type=result_int then print t1.result.iresult,
14cc0     1C 22 0E F2 | 	cmp	local03, #28 wz
14cc4     64 00 90 5D |  if_ne	jmp	#LR__1673
14cc8     00 12 06 F6 | 	mov	arg01, #0
14ccc     B8 CF B0 FD | 	call	#__system___getiolock_0474
14cd0     FD 12 02 F6 | 	mov	arg01, result1
14cd4     20 76 B0 FD | 	call	#__system___lockmem
14cd8     00 28 06 F6 | 	mov	local06, #0
14cdc     00 12 06 F6 | 	mov	arg01, #0
14ce0     0F 15 02 F6 | 	mov	arg02, local01
14ce4     00 16 06 F6 | 	mov	arg03, #0
14ce8     0A 18 06 F6 | 	mov	arg04, #10
14cec     50 83 B0 FD | 	call	#__system___basic_print_integer
14cf0     FD 2A 02 F6 | 	mov	local07, result1
14cf4     14 27 02 F6 | 	mov	local05, local06
14cf8     15 27 02 F1 | 	add	local05, local07
14cfc     00 2C 06 F6 | 	mov	local08, #0
14d00     00 12 06 F6 | 	mov	arg01, #0
14d04     09 14 06 F6 | 	mov	arg02, #9
14d08     00 16 06 F6 | 	mov	arg03, #0
14d0c     94 82 B0 FD | 	call	#__system___basic_print_char
14d10     FD 2E 02 F6 | 	mov	local09, result1
14d14     FD 26 02 F1 | 	add	local05, result1
14d18     00 12 06 F6 | 	mov	arg01, #0
14d1c     68 CF B0 FD | 	call	#__system___getiolock_0474
14d20     FD 00 68 FC | 	wrlong	#0, result1
14d24     00 FA 05 F6 | 	mov	result1, #0
14d28     00 30 06 F6 | 	mov	local10, #0
14d2c                 | LR__1673
14d2c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
14d2c     1D 22 0E F2 | 	cmp	local03, #29 wz
14d30     64 00 90 5D |  if_ne	jmp	#LR__1674
14d34     00 12 06 F6 | 	mov	arg01, #0
14d38     4C CF B0 FD | 	call	#__system___getiolock_0474
14d3c     FD 12 02 F6 | 	mov	arg01, result1
14d40     B4 75 B0 FD | 	call	#__system___lockmem
14d44     00 28 06 F6 | 	mov	local06, #0
14d48     00 12 06 F6 | 	mov	arg01, #0
14d4c     0F 15 02 F6 | 	mov	arg02, local01
14d50     00 16 06 F6 | 	mov	arg03, #0
14d54     0A 18 06 F6 | 	mov	arg04, #10
14d58     24 83 B0 FD | 	call	#__system___basic_print_unsigned
14d5c     FD 2A 02 F6 | 	mov	local07, result1
14d60     14 27 02 F6 | 	mov	local05, local06
14d64     15 27 02 F1 | 	add	local05, local07
14d68     00 2C 06 F6 | 	mov	local08, #0
14d6c     00 12 06 F6 | 	mov	arg01, #0
14d70     09 14 06 F6 | 	mov	arg02, #9
14d74     00 16 06 F6 | 	mov	arg03, #0
14d78     28 82 B0 FD | 	call	#__system___basic_print_char
14d7c     FD 2E 02 F6 | 	mov	local09, result1
14d80     FD 26 02 F1 | 	add	local05, result1
14d84     00 12 06 F6 | 	mov	arg01, #0
14d88     FC CE B0 FD | 	call	#__system___getiolock_0474
14d8c     FD 00 68 FC | 	wrlong	#0, result1
14d90     00 FA 05 F6 | 	mov	result1, #0
14d94     00 30 06 F6 | 	mov	local10, #0
14d98                 | LR__1674
14d98                 | '   if t1.result_type=result_float then print t1.result.fresult,
14d98     1E 22 0E F2 | 	cmp	local03, #30 wz
14d9c     64 00 90 5D |  if_ne	jmp	#LR__1675
14da0     00 12 06 F6 | 	mov	arg01, #0
14da4     E0 CE B0 FD | 	call	#__system___getiolock_0474
14da8     FD 12 02 F6 | 	mov	arg01, result1
14dac     48 75 B0 FD | 	call	#__system___lockmem
14db0     00 28 06 F6 | 	mov	local06, #0
14db4     00 12 06 F6 | 	mov	arg01, #0
14db8     0F 15 02 F6 | 	mov	arg02, local01
14dbc     00 16 06 F6 | 	mov	arg03, #0
14dc0     23 18 06 F6 | 	mov	arg04, #35
14dc4     C4 A6 B0 FD | 	call	#__system___basic_print_float
14dc8     FD 2A 02 F6 | 	mov	local07, result1
14dcc     14 27 02 F6 | 	mov	local05, local06
14dd0     15 27 02 F1 | 	add	local05, local07
14dd4     00 2C 06 F6 | 	mov	local08, #0
14dd8     00 12 06 F6 | 	mov	arg01, #0
14ddc     09 14 06 F6 | 	mov	arg02, #9
14de0     00 16 06 F6 | 	mov	arg03, #0
14de4     BC 81 B0 FD | 	call	#__system___basic_print_char
14de8     FD 2E 02 F6 | 	mov	local09, result1
14dec     FD 26 02 F1 | 	add	local05, result1
14df0     00 12 06 F6 | 	mov	arg01, #0
14df4     90 CE B0 FD | 	call	#__system___getiolock_0474
14df8     FD 00 68 FC | 	wrlong	#0, result1
14dfc     00 FA 05 F6 | 	mov	result1, #0
14e00     00 30 06 F6 | 	mov	local10, #0
14e04                 | LR__1675
14e04                 | '   if t1.result_type=result_string then print t1.result.sresult,
14e04     1F 22 0E F2 | 	cmp	local03, #31 wz
14e08     60 00 90 5D |  if_ne	jmp	#LR__1676
14e0c     00 12 06 F6 | 	mov	arg01, #0
14e10     74 CE B0 FD | 	call	#__system___getiolock_0474
14e14     FD 12 02 F6 | 	mov	arg01, result1
14e18     DC 74 B0 FD | 	call	#__system___lockmem
14e1c     00 28 06 F6 | 	mov	local06, #0
14e20     00 12 06 F6 | 	mov	arg01, #0
14e24     0F 15 02 F6 | 	mov	arg02, local01
14e28     00 16 06 F6 | 	mov	arg03, #0
14e2c     CC 81 B0 FD | 	call	#__system___basic_print_string
14e30     FD 2A 02 F6 | 	mov	local07, result1
14e34     14 27 02 F6 | 	mov	local05, local06
14e38     15 27 02 F1 | 	add	local05, local07
14e3c     00 2C 06 F6 | 	mov	local08, #0
14e40     00 12 06 F6 | 	mov	arg01, #0
14e44     09 14 06 F6 | 	mov	arg02, #9
14e48     00 16 06 F6 | 	mov	arg03, #0
14e4c     54 81 B0 FD | 	call	#__system___basic_print_char
14e50     FD 2E 02 F6 | 	mov	local09, result1
14e54     FD 26 02 F1 | 	add	local05, result1
14e58     00 12 06 F6 | 	mov	arg01, #0
14e5c     28 CE B0 FD | 	call	#__system___getiolock_0474
14e60     FD 00 68 FC | 	wrlong	#0, result1
14e64     00 FA 05 F6 | 	mov	result1, #0
14e68     00 30 06 F6 | 	mov	local10, #0
14e6c                 | LR__1676
14e6c                 | LR__1677
14e6c                 | ' if r=print_mod_semicolon then 
14e6c     22 24 0E F2 | 	cmp	local04, #34 wz
14e70     1C 01 90 5D |  if_ne	jmp	#LR__1682
14e74                 | '   if t1.result_type=result_int then print t1.result.iresult;
14e74     1C 22 0E F2 | 	cmp	local03, #28 wz
14e78     50 00 90 5D |  if_ne	jmp	#LR__1678
14e7c     00 12 06 F6 | 	mov	arg01, #0
14e80     04 CE B0 FD | 	call	#__system___getiolock_0474
14e84     FD 12 02 F6 | 	mov	arg01, result1
14e88     6C 74 B0 FD | 	call	#__system___lockmem
14e8c     00 28 06 F6 | 	mov	local06, #0
14e90     00 30 06 F6 | 	mov	local10, #0
14e94     0A 2C 06 F6 | 	mov	local08, #10
14e98     00 12 06 F6 | 	mov	arg01, #0
14e9c     0F 15 02 F6 | 	mov	arg02, local01
14ea0     00 16 06 F6 | 	mov	arg03, #0
14ea4     0A 18 06 F6 | 	mov	arg04, #10
14ea8     94 81 B0 FD | 	call	#__system___basic_print_integer
14eac     FD 2A 02 F6 | 	mov	local07, result1
14eb0     14 27 02 F6 | 	mov	local05, local06
14eb4     15 27 02 F1 | 	add	local05, local07
14eb8     00 12 06 F6 | 	mov	arg01, #0
14ebc     C8 CD B0 FD | 	call	#__system___getiolock_0474
14ec0     FD 00 68 FC | 	wrlong	#0, result1
14ec4     00 FA 05 F6 | 	mov	result1, #0
14ec8     00 2E 06 F6 | 	mov	local09, #0
14ecc                 | LR__1678
14ecc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
14ecc     1D 22 0E F2 | 	cmp	local03, #29 wz
14ed0     50 00 90 5D |  if_ne	jmp	#LR__1679
14ed4     00 12 06 F6 | 	mov	arg01, #0
14ed8     AC CD B0 FD | 	call	#__system___getiolock_0474
14edc     FD 12 02 F6 | 	mov	arg01, result1
14ee0     14 74 B0 FD | 	call	#__system___lockmem
14ee4     00 28 06 F6 | 	mov	local06, #0
14ee8     00 30 06 F6 | 	mov	local10, #0
14eec     0A 2C 06 F6 | 	mov	local08, #10
14ef0     00 12 06 F6 | 	mov	arg01, #0
14ef4     0F 15 02 F6 | 	mov	arg02, local01
14ef8     00 16 06 F6 | 	mov	arg03, #0
14efc     0A 18 06 F6 | 	mov	arg04, #10
14f00     7C 81 B0 FD | 	call	#__system___basic_print_unsigned
14f04     FD 2A 02 F6 | 	mov	local07, result1
14f08     14 27 02 F6 | 	mov	local05, local06
14f0c     15 27 02 F1 | 	add	local05, local07
14f10     00 12 06 F6 | 	mov	arg01, #0
14f14     70 CD B0 FD | 	call	#__system___getiolock_0474
14f18     FD 00 68 FC | 	wrlong	#0, result1
14f1c     00 FA 05 F6 | 	mov	result1, #0
14f20     00 2E 06 F6 | 	mov	local09, #0
14f24                 | LR__1679
14f24                 | '   if t1.result_type=result_float then print t1.result.fresult;
14f24     1E 22 0E F2 | 	cmp	local03, #30 wz
14f28     30 00 90 5D |  if_ne	jmp	#LR__1680
14f2c     00 12 06 F6 | 	mov	arg01, #0
14f30     54 CD B0 FD | 	call	#__system___getiolock_0474
14f34     FD 12 02 F6 | 	mov	arg01, result1
14f38     BC 73 B0 FD | 	call	#__system___lockmem
14f3c     00 12 06 F6 | 	mov	arg01, #0
14f40     0F 15 02 F6 | 	mov	arg02, local01
14f44     00 16 06 F6 | 	mov	arg03, #0
14f48     23 18 06 F6 | 	mov	arg04, #35
14f4c     3C A5 B0 FD | 	call	#__system___basic_print_float
14f50     00 12 06 F6 | 	mov	arg01, #0
14f54     30 CD B0 FD | 	call	#__system___getiolock_0474
14f58     FD 00 68 FC | 	wrlong	#0, result1
14f5c                 | LR__1680
14f5c                 | '   if t1.result_type=result_string then print t1.result.sresult;
14f5c     1F 22 0E F2 | 	cmp	local03, #31 wz
14f60     2C 00 90 5D |  if_ne	jmp	#LR__1681
14f64     00 12 06 F6 | 	mov	arg01, #0
14f68     1C CD B0 FD | 	call	#__system___getiolock_0474
14f6c     FD 12 02 F6 | 	mov	arg01, result1
14f70     84 73 B0 FD | 	call	#__system___lockmem
14f74     00 12 06 F6 | 	mov	arg01, #0
14f78     0F 15 02 F6 | 	mov	arg02, local01
14f7c     00 16 06 F6 | 	mov	arg03, #0
14f80     78 80 B0 FD | 	call	#__system___basic_print_string
14f84     00 12 06 F6 | 	mov	arg01, #0
14f88     FC CC B0 FD | 	call	#__system___getiolock_0474
14f8c     FD 00 68 FC | 	wrlong	#0, result1
14f90                 | LR__1681
14f90                 | LR__1682
14f90                 | ' if r=0 then 
14f90     00 24 0E F2 | 	cmp	local04, #0 wz
14f94     1C 01 90 5D |  if_ne	jmp	#LR__1687
14f98                 | '   if t1.result_type=result_int then print t1.result.iresult
14f98     1C 22 0E F2 | 	cmp	local03, #28 wz
14f9c     40 00 90 5D |  if_ne	jmp	#LR__1683
14fa0     00 12 06 F6 | 	mov	arg01, #0
14fa4     E0 CC B0 FD | 	call	#__system___getiolock_0474
14fa8     FD 12 02 F6 | 	mov	arg01, result1
14fac     48 73 B0 FD | 	call	#__system___lockmem
14fb0     00 12 06 F6 | 	mov	arg01, #0
14fb4     0F 15 02 F6 | 	mov	arg02, local01
14fb8     00 16 06 F6 | 	mov	arg03, #0
14fbc     0A 18 06 F6 | 	mov	arg04, #10
14fc0     7C 80 B0 FD | 	call	#__system___basic_print_integer
14fc4     00 12 06 F6 | 	mov	arg01, #0
14fc8     0A 14 06 F6 | 	mov	arg02, #10
14fcc     00 16 06 F6 | 	mov	arg03, #0
14fd0     D0 7F B0 FD | 	call	#__system___basic_print_char
14fd4     00 12 06 F6 | 	mov	arg01, #0
14fd8     AC CC B0 FD | 	call	#__system___getiolock_0474
14fdc     FD 00 68 FC | 	wrlong	#0, result1
14fe0                 | LR__1683
14fe0                 | '   if t1.result_type=result_uint then print t1.result.uresult
14fe0     1D 22 0E F2 | 	cmp	local03, #29 wz
14fe4     40 00 90 5D |  if_ne	jmp	#LR__1684
14fe8     00 12 06 F6 | 	mov	arg01, #0
14fec     98 CC B0 FD | 	call	#__system___getiolock_0474
14ff0     FD 12 02 F6 | 	mov	arg01, result1
14ff4     00 73 B0 FD | 	call	#__system___lockmem
14ff8     00 12 06 F6 | 	mov	arg01, #0
14ffc     0F 15 02 F6 | 	mov	arg02, local01
15000     00 16 06 F6 | 	mov	arg03, #0
15004     0A 18 06 F6 | 	mov	arg04, #10
15008     74 80 B0 FD | 	call	#__system___basic_print_unsigned
1500c     00 12 06 F6 | 	mov	arg01, #0
15010     0A 14 06 F6 | 	mov	arg02, #10
15014     00 16 06 F6 | 	mov	arg03, #0
15018     88 7F B0 FD | 	call	#__system___basic_print_char
1501c     00 12 06 F6 | 	mov	arg01, #0
15020     64 CC B0 FD | 	call	#__system___getiolock_0474
15024     FD 00 68 FC | 	wrlong	#0, result1
15028                 | LR__1684
15028                 | '   if t1.result_type=result_float then print t1.result.fresult
15028     1E 22 0E F2 | 	cmp	local03, #30 wz
1502c     40 00 90 5D |  if_ne	jmp	#LR__1685
15030     00 12 06 F6 | 	mov	arg01, #0
15034     50 CC B0 FD | 	call	#__system___getiolock_0474
15038     FD 12 02 F6 | 	mov	arg01, result1
1503c     B8 72 B0 FD | 	call	#__system___lockmem
15040     00 12 06 F6 | 	mov	arg01, #0
15044     0F 15 02 F6 | 	mov	arg02, local01
15048     00 16 06 F6 | 	mov	arg03, #0
1504c     23 18 06 F6 | 	mov	arg04, #35
15050     38 A4 B0 FD | 	call	#__system___basic_print_float
15054     00 12 06 F6 | 	mov	arg01, #0
15058     0A 14 06 F6 | 	mov	arg02, #10
1505c     00 16 06 F6 | 	mov	arg03, #0
15060     40 7F B0 FD | 	call	#__system___basic_print_char
15064     00 12 06 F6 | 	mov	arg01, #0
15068     1C CC B0 FD | 	call	#__system___getiolock_0474
1506c     FD 00 68 FC | 	wrlong	#0, result1
15070                 | LR__1685
15070                 | '   if t1.result_type=result_string then print t1.result.sresult
15070     1F 22 0E F2 | 	cmp	local03, #31 wz
15074     3C 00 90 5D |  if_ne	jmp	#LR__1686
15078     00 12 06 F6 | 	mov	arg01, #0
1507c     08 CC B0 FD | 	call	#__system___getiolock_0474
15080     FD 12 02 F6 | 	mov	arg01, result1
15084     70 72 B0 FD | 	call	#__system___lockmem
15088     00 12 06 F6 | 	mov	arg01, #0
1508c     0F 15 02 F6 | 	mov	arg02, local01
15090     00 16 06 F6 | 	mov	arg03, #0
15094     64 7F B0 FD | 	call	#__system___basic_print_string
15098     00 12 06 F6 | 	mov	arg01, #0
1509c     0A 14 06 F6 | 	mov	arg02, #10
150a0     00 16 06 F6 | 	mov	arg03, #0
150a4     FC 7E B0 FD | 	call	#__system___basic_print_char
150a8     00 12 06 F6 | 	mov	arg01, #0
150ac     D8 CB B0 FD | 	call	#__system___getiolock_0474
150b0     FD 00 68 FC | 	wrlong	#0, result1
150b4                 | LR__1686
150b4                 | LR__1687
150b4                 | ' if r=print_mod_empty then print
150b4     20 24 0E F2 | 	cmp	local04, #32 wz
150b8     2C 00 90 5D |  if_ne	jmp	#LR__1688
150bc     00 12 06 F6 | 	mov	arg01, #0
150c0     C4 CB B0 FD | 	call	#__system___getiolock_0474
150c4     FD 12 02 F6 | 	mov	arg01, result1
150c8     2C 72 B0 FD | 	call	#__system___lockmem
150cc     00 12 06 F6 | 	mov	arg01, #0
150d0     0A 14 06 F6 | 	mov	arg02, #10
150d4     00 16 06 F6 | 	mov	arg03, #0
150d8     C8 7E B0 FD | 	call	#__system___basic_print_char
150dc     00 12 06 F6 | 	mov	arg01, #0
150e0     A4 CB B0 FD | 	call	#__system___getiolock_0474
150e4     FD 00 68 FC | 	wrlong	#0, result1
150e8                 | LR__1688
150e8                 | LR__1689
150e8     A7 F0 03 F6 | 	mov	ptra, fp
150ec     B2 00 A0 FD | 	call	#popregs_
150f0                 | _do_print_ret
150f0     2D 00 64 FD | 	ret
150f4                 | 
150f4                 | ' 
150f4                 | ' 
150f4                 | ' sub do_paper
150f4                 | _do_paper
150f4     03 4A 05 F6 | 	mov	COUNT_, #3
150f8     A8 00 A0 FD | 	call	#pushregs_
150fc     C8 4F BF FD | 	call	#_pop
15100     FD 1E 02 F6 | 	mov	local01, result1
15104     FE 20 02 F6 | 	mov	local02, result2
15108     FF 22 02 F6 | 	mov	local03, result3
1510c                 | ' t1=pop() 
1510c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1510c     1E 22 0E F2 | 	cmp	local03, #30 wz
15110     10 00 90 5D |  if_ne	jmp	#LR__1690
15114     0F 13 02 F6 | 	mov	arg01, local01
15118     00 14 06 F6 | 	mov	arg02, #0
1511c     1C A2 B0 FD | 	call	#__system___float_tointeger
15120     FD 1E 02 F6 | 	mov	local01, result1
15124                 | LR__1690
15124                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15124     1F 22 0E F2 | 	cmp	local03, #31 wz
15128     18 00 90 5D |  if_ne	jmp	#LR__1691
1512c     0F 13 02 F6 | 	mov	arg01, local01
15130     28 A5 B0 FD | 	call	#__system____builtin_atof
15134     FD 12 02 F6 | 	mov	arg01, result1
15138     00 14 06 F6 | 	mov	arg02, #0
1513c     FC A1 B0 FD | 	call	#__system___float_tointeger
15140     FD 1E 02 F6 | 	mov	local01, result1
15144                 | LR__1691
15144     57 00 00 FF 
15148     1C E4 05 F1 | 	add	objptr, ##44572
1514c     F2 1E 62 FC | 	wrlong	local01, objptr
15150     04 E4 05 F1 | 	add	objptr, #4
15154     F2 12 02 FB | 	rdlong	arg01, objptr
15158                 | ' 
15158                 | ' write_color:=ff
15158     56 00 00 FF 
1515c     E3 E5 85 F1 | 	sub	objptr, ##44515
15160     F2 12 62 FC | 	wrlong	arg01, objptr
15164                 | ' write_background:=bb
15164     04 E4 05 F1 | 	add	objptr, #4
15168     F2 1E 62 FC | 	wrlong	local01, objptr
1516c     41 E4 85 F1 | 	sub	objptr, #65
15170     A7 F0 03 F6 | 	mov	ptra, fp
15174     B2 00 A0 FD | 	call	#popregs_
15178                 | _do_paper_ret
15178     2D 00 64 FD | 	ret
1517c                 | 
1517c                 | ' 
1517c                 | ' sub do_ink
1517c                 | _do_ink
1517c     03 4A 05 F6 | 	mov	COUNT_, #3
15180     A8 00 A0 FD | 	call	#pushregs_
15184     40 4F BF FD | 	call	#_pop
15188     FD 1E 02 F6 | 	mov	local01, result1
1518c     FE 20 02 F6 | 	mov	local02, result2
15190     FF 22 02 F6 | 	mov	local03, result3
15194                 | ' t1=pop() 
15194                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15194     1E 22 0E F2 | 	cmp	local03, #30 wz
15198     10 00 90 5D |  if_ne	jmp	#LR__1700
1519c     0F 13 02 F6 | 	mov	arg01, local01
151a0     00 14 06 F6 | 	mov	arg02, #0
151a4     94 A1 B0 FD | 	call	#__system___float_tointeger
151a8     FD 1E 02 F6 | 	mov	local01, result1
151ac                 | LR__1700
151ac                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
151ac     1F 22 0E F2 | 	cmp	local03, #31 wz
151b0     18 00 90 5D |  if_ne	jmp	#LR__1701
151b4     0F 13 02 F6 | 	mov	arg01, local01
151b8     A0 A4 B0 FD | 	call	#__system____builtin_atof
151bc     FD 12 02 F6 | 	mov	arg01, result1
151c0     00 14 06 F6 | 	mov	arg02, #0
151c4     74 A1 B0 FD | 	call	#__system___float_tointeger
151c8     FD 1E 02 F6 | 	mov	local01, result1
151cc                 | LR__1701
151cc     57 00 00 FF 
151d0     20 E4 05 F1 | 	add	objptr, ##44576
151d4     F2 1E 62 FC | 	wrlong	local01, objptr
151d8     04 E4 85 F1 | 	sub	objptr, #4
151dc     F2 14 02 FB | 	rdlong	arg02, objptr
151e0                 | ' 
151e0                 | ' write_color:=ff
151e0     56 00 00 FF 
151e4     DF E5 85 F1 | 	sub	objptr, ##44511
151e8     F2 1E 62 FC | 	wrlong	local01, objptr
151ec                 | ' write_background:=bb
151ec     04 E4 05 F1 | 	add	objptr, #4
151f0     F2 14 62 FC | 	wrlong	arg02, objptr
151f4     56 00 00 FF 
151f8     DF E5 05 F1 | 	add	objptr, ##44511
151fc     F2 12 02 FB | 	rdlong	arg01, objptr
15200     57 00 00 FF 
15204     20 E4 85 F1 | 	sub	objptr, ##44576
15208     90 4C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1520c     A7 F0 03 F6 | 	mov	ptra, fp
15210     B2 00 A0 FD | 	call	#popregs_
15214                 | _do_ink_ret
15214     2D 00 64 FD | 	ret
15218                 | 
15218                 | ' 
15218                 | ' 
15218                 | ' sub do_font
15218                 | _do_font
15218     03 4A 05 F6 | 	mov	COUNT_, #3
1521c     A8 00 A0 FD | 	call	#pushregs_
15220     A4 4E BF FD | 	call	#_pop
15224     FD 1E 02 F6 | 	mov	local01, result1
15228     FE 20 02 F6 | 	mov	local02, result2
1522c     FF 22 02 F6 | 	mov	local03, result3
15230                 | ' t1=pop() 
15230                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15230     1E 22 0E F2 | 	cmp	local03, #30 wz
15234     10 00 90 5D |  if_ne	jmp	#LR__1710
15238     0F 13 02 F6 | 	mov	arg01, local01
1523c     00 14 06 F6 | 	mov	arg02, #0
15240     F8 A0 B0 FD | 	call	#__system___float_tointeger
15244     FD 1E 02 F6 | 	mov	local01, result1
15248                 | LR__1710
15248                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15248     1F 22 0E F2 | 	cmp	local03, #31 wz
1524c     18 00 90 5D |  if_ne	jmp	#LR__1711
15250     0F 13 02 F6 | 	mov	arg01, local01
15254     04 A4 B0 FD | 	call	#__system____builtin_atof
15258     FD 12 02 F6 | 	mov	arg01, result1
1525c     00 14 06 F6 | 	mov	arg02, #0
15260     D8 A0 B0 FD | 	call	#__system___float_tointeger
15264     FD 1E 02 F6 | 	mov	local01, result1
15268                 | LR__1711
15268     57 00 00 FF 
1526c     24 E4 05 F1 | 	add	objptr, ##44580
15270     F2 1E 62 FC | 	wrlong	local01, objptr
15274     57 00 00 FF 
15278     24 E4 85 F1 | 	sub	objptr, ##44580
1527c     02 1E 66 F0 | 	shl	local01, #2
15280     0F 13 02 F6 | 	mov	arg01, local01
15284     90 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
15288     A7 F0 03 F6 | 	mov	ptra, fp
1528c     B2 00 A0 FD | 	call	#popregs_
15290                 | _do_font_ret
15290     2D 00 64 FD | 	ret
15294                 | 
15294                 | ' 
15294                 | ' sub do_mode
15294                 | _do_mode
15294     04 4A 05 F6 | 	mov	COUNT_, #4
15298     A8 00 A0 FD | 	call	#pushregs_
1529c     28 4E BF FD | 	call	#_pop
152a0     FD 1E 02 F6 | 	mov	local01, result1
152a4     FE 20 02 F6 | 	mov	local02, result2
152a8     FF 22 02 F6 | 	mov	local03, result3
152ac                 | ' t1=pop() 
152ac                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
152ac     1E 22 0E F2 | 	cmp	local03, #30 wz
152b0     10 00 90 5D |  if_ne	jmp	#LR__1720
152b4     0F 13 02 F6 | 	mov	arg01, local01
152b8     00 14 06 F6 | 	mov	arg02, #0
152bc     7C A0 B0 FD | 	call	#__system___float_tointeger
152c0     FD 1E 02 F6 | 	mov	local01, result1
152c4                 | LR__1720
152c4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
152c4     1F 22 0E F2 | 	cmp	local03, #31 wz
152c8     18 00 90 5D |  if_ne	jmp	#LR__1721
152cc     0F 13 02 F6 | 	mov	arg01, local01
152d0     88 A3 B0 FD | 	call	#__system____builtin_atof
152d4     FD 12 02 F6 | 	mov	arg01, result1
152d8     00 14 06 F6 | 	mov	arg02, #0
152dc     5C A0 B0 FD | 	call	#__system___float_tointeger
152e0     FD 1E 02 F6 | 	mov	local01, result1
152e4                 | LR__1721
152e4                 | ' select case t1.result.iresult
152e4     0F 25 02 F6 | 	mov	local04, local01
152e8     05 24 26 F3 | 	fle	local04, #5
152ec     30 24 62 FD | 	jmprel	local04
152f0                 | LR__1722
152f0     14 00 90 FD | 	jmp	#LR__1723
152f4     A8 00 90 FD | 	jmp	#LR__1724
152f8     10 01 90 FD | 	jmp	#LR__1725
152fc     78 01 90 FD | 	jmp	#LR__1726
15300     E0 01 90 FD | 	jmp	#LR__1727
15304     70 02 90 FD | 	jmp	#LR__1728
15308                 | LR__1723
15308     57 00 00 FF 
1530c     24 E4 05 F1 | 	add	objptr, ##44580
15310     F2 02 68 FC | 	wrlong	#1, objptr
15314     04 E4 85 F1 | 	sub	objptr, #4
15318     F2 34 69 FC | 	wrlong	#154, objptr
1531c     22 00 00 FF 
15320     A4 E5 05 F1 | 	add	objptr, ##17828
15324     F2 02 68 FC | 	wrlong	#1, objptr
15328     22 00 00 FF 
1532c     A8 E5 85 F1 | 	sub	objptr, ##17832
15330     F2 26 69 FC | 	wrlong	#147, objptr
15334     57 00 00 FF 
15338     1C E4 85 F1 | 	sub	objptr, ##44572
1533c     04 12 06 F6 | 	mov	arg01, #4
15340     D4 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
15344     57 00 00 FF 
15348     20 E4 05 F1 | 	add	objptr, ##44576
1534c     F2 12 02 FB | 	rdlong	arg01, objptr
15350     04 E4 85 F1 | 	sub	objptr, #4
15354     F2 14 02 FB | 	rdlong	arg02, objptr
15358                 | ' 
15358                 | ' write_color:=ff
15358     56 00 00 FF 
1535c     DF E5 85 F1 | 	sub	objptr, ##44511
15360     F2 12 62 FC | 	wrlong	arg01, objptr
15364                 | ' write_background:=bb
15364     04 E4 05 F1 | 	add	objptr, #4
15368     F2 14 62 FC | 	wrlong	arg02, objptr
1536c     01 00 00 FF 
15370     00 EA 05 F1 | 	add	ptr__dat__, ##512
15374     7B 00 00 FF 
15378     27 E4 05 F1 | 	add	objptr, ##63015
1537c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15380     04 E4 85 F1 | 	sub	objptr, #4
15384     03 00 80 FF 
15388     F2 30 69 FC | 	wrlong	##1688, objptr
1538c     7B 00 00 FF 
15390     64 E4 85 F1 | 	sub	objptr, ##63076
15394     01 00 00 FF 
15398     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1539c     D8 01 90 FD | 	jmp	#LR__1728
153a0                 | LR__1724
153a0     57 00 00 FF 
153a4     24 E4 05 F1 | 	add	objptr, ##44580
153a8     F2 00 68 FC | 	wrlong	#0, objptr
153ac     04 E4 85 F1 | 	sub	objptr, #4
153b0     F2 2E 68 FC | 	wrlong	#23, objptr
153b4     22 00 00 FF 
153b8     A4 E5 05 F1 | 	add	objptr, ##17828
153bc     F2 00 68 FC | 	wrlong	#0, objptr
153c0     22 00 00 FF 
153c4     A8 E5 85 F1 | 	sub	objptr, ##17832
153c8     F2 00 68 FC | 	wrlong	#0, objptr
153cc     57 00 00 FF 
153d0     1C E4 85 F1 | 	sub	objptr, ##44572
153d4     00 12 06 F6 | 	mov	arg01, #0
153d8     3C 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
153dc     57 00 00 FF 
153e0     20 E4 05 F1 | 	add	objptr, ##44576
153e4     F2 12 02 FB | 	rdlong	arg01, objptr
153e8     04 E4 85 F1 | 	sub	objptr, #4
153ec     F2 14 02 FB | 	rdlong	arg02, objptr
153f0                 | ' 
153f0                 | ' write_color:=ff
153f0     56 00 00 FF 
153f4     DF E5 85 F1 | 	sub	objptr, ##44511
153f8     F2 12 62 FC | 	wrlong	arg01, objptr
153fc                 | ' write_background:=bb
153fc     04 E4 05 F1 | 	add	objptr, #4
15400     F2 14 62 FC | 	wrlong	arg02, objptr
15404     41 E4 85 F1 | 	sub	objptr, #65
15408     6C 01 90 FD | 	jmp	#LR__1728
1540c                 | LR__1725
1540c     57 00 00 FF 
15410     24 E4 05 F1 | 	add	objptr, ##44580
15414     F2 00 68 FC | 	wrlong	#0, objptr
15418     04 E4 85 F1 | 	sub	objptr, #4
1541c     F2 6A 69 FC | 	wrlong	#181, objptr
15420     22 00 00 FF 
15424     A4 E5 05 F1 | 	add	objptr, ##17828
15428     F2 00 68 FC | 	wrlong	#0, objptr
1542c     22 00 00 FF 
15430     A8 E5 85 F1 | 	sub	objptr, ##17832
15434     F2 00 68 FC | 	wrlong	#0, objptr
15438     57 00 00 FF 
1543c     1C E4 85 F1 | 	sub	objptr, ##44572
15440     00 12 06 F6 | 	mov	arg01, #0
15444     D0 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15448     57 00 00 FF 
1544c     20 E4 05 F1 | 	add	objptr, ##44576
15450     F2 12 02 FB | 	rdlong	arg01, objptr
15454     04 E4 85 F1 | 	sub	objptr, #4
15458     F2 14 02 FB | 	rdlong	arg02, objptr
1545c                 | ' 
1545c                 | ' write_color:=ff
1545c     56 00 00 FF 
15460     DF E5 85 F1 | 	sub	objptr, ##44511
15464     F2 12 62 FC | 	wrlong	arg01, objptr
15468                 | ' write_background:=bb
15468     04 E4 05 F1 | 	add	objptr, #4
1546c     F2 14 62 FC | 	wrlong	arg02, objptr
15470     41 E4 85 F1 | 	sub	objptr, #65
15474     00 01 90 FD | 	jmp	#LR__1728
15478                 | LR__1726
15478     57 00 00 FF 
1547c     24 E4 05 F1 | 	add	objptr, ##44580
15480     F2 00 68 FC | 	wrlong	#0, objptr
15484     04 E4 85 F1 | 	sub	objptr, #4
15488     F2 1E 68 FC | 	wrlong	#15, objptr
1548c     22 00 00 FF 
15490     A4 E5 05 F1 | 	add	objptr, ##17828
15494     F2 00 68 FC | 	wrlong	#0, objptr
15498     22 00 00 FF 
1549c     A8 E5 85 F1 | 	sub	objptr, ##17832
154a0     F2 00 68 FC | 	wrlong	#0, objptr
154a4     57 00 00 FF 
154a8     1C E4 85 F1 | 	sub	objptr, ##44572
154ac     00 12 06 F6 | 	mov	arg01, #0
154b0     64 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
154b4     57 00 00 FF 
154b8     20 E4 05 F1 | 	add	objptr, ##44576
154bc     F2 12 02 FB | 	rdlong	arg01, objptr
154c0     04 E4 85 F1 | 	sub	objptr, #4
154c4     F2 14 02 FB | 	rdlong	arg02, objptr
154c8                 | ' 
154c8                 | ' write_color:=ff
154c8     56 00 00 FF 
154cc     DF E5 85 F1 | 	sub	objptr, ##44511
154d0     F2 12 62 FC | 	wrlong	arg01, objptr
154d4                 | ' write_background:=bb
154d4     04 E4 05 F1 | 	add	objptr, #4
154d8     F2 14 62 FC | 	wrlong	arg02, objptr
154dc     41 E4 85 F1 | 	sub	objptr, #65
154e0     94 00 90 FD | 	jmp	#LR__1728
154e4                 | LR__1727
154e4     57 00 00 FF 
154e8     24 E4 05 F1 | 	add	objptr, ##44580
154ec     F2 02 68 FC | 	wrlong	#1, objptr
154f0     04 E4 85 F1 | 	sub	objptr, #4
154f4     F2 02 68 FC | 	wrlong	#1, objptr
154f8     22 00 00 FF 
154fc     A4 E5 05 F1 | 	add	objptr, ##17828
15500     F2 02 68 FC | 	wrlong	#1, objptr
15504     22 00 00 FF 
15508     A8 E5 85 F1 | 	sub	objptr, ##17832
1550c     F2 1C 68 FC | 	wrlong	#14, objptr
15510     57 00 00 FF 
15514     1C E4 85 F1 | 	sub	objptr, ##44572
15518     04 12 06 F6 | 	mov	arg01, #4
1551c     F8 58 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15520     57 00 00 FF 
15524     20 E4 05 F1 | 	add	objptr, ##44576
15528     F2 12 02 FB | 	rdlong	arg01, objptr
1552c     04 E4 85 F1 | 	sub	objptr, #4
15530     F2 14 02 FB | 	rdlong	arg02, objptr
15534                 | ' 
15534                 | ' write_color:=ff
15534     56 00 00 FF 
15538     DF E5 85 F1 | 	sub	objptr, ##44511
1553c     F2 12 62 FC | 	wrlong	arg01, objptr
15540                 | ' write_background:=bb
15540     04 E4 05 F1 | 	add	objptr, #4
15544     F2 14 62 FC | 	wrlong	arg02, objptr
15548     07 00 00 FF 
1554c     8A EB 05 F1 | 	add	ptr__dat__, ##3978
15550     7B 00 00 FF 
15554     27 E4 05 F1 | 	add	objptr, ##63015
15558     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1555c     04 E4 85 F1 | 	sub	objptr, #4
15560     03 00 80 FF 
15564     F2 30 69 FC | 	wrlong	##1688, objptr
15568     7B 00 00 FF 
1556c     64 E4 85 F1 | 	sub	objptr, ##63076
15570     07 00 00 FF 
15574     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
15578                 | LR__1728
15578     7B 00 00 FF 
1557c     60 E4 05 F1 | 	add	objptr, ##63072
15580     F2 1E 62 FC | 	wrlong	local01, objptr
15584     24 00 00 FF 
15588     40 E4 85 F1 | 	sub	objptr, ##18496
1558c     F2 12 02 FB | 	rdlong	arg01, objptr
15590     04 E4 85 F1 | 	sub	objptr, #4
15594     F2 14 02 FB | 	rdlong	arg02, objptr
15598     57 00 00 FF 
1559c     1C E4 85 F1 | 	sub	objptr, ##44572
155a0     5C 59 B0 FD | 	call	#_hg010b_spin2_cls
155a4     5F 01 00 FF 
155a8     66 13 06 F6 | 	mov	arg01, ##@LR__4950
155ac                 | ' 
155ac                 | ' write(text)
155ac     0C 5C B0 FD | 	call	#_hg010b_spin2_write
155b0                 | ' crlf
155b0     68 5D B0 FD | 	call	#_hg010b_spin2_crlf
155b4     18 00 00 FF 
155b8     4C EB 05 F1 | 	add	ptr__dat__, ##12620
155bc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
155c0     18 00 00 FF 
155c4     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
155c8                 | ' 
155c8                 | ' write(text)
155c8     F0 5B B0 FD | 	call	#_hg010b_spin2_write
155cc                 | ' crlf
155cc     4C 5D B0 FD | 	call	#_hg010b_spin2_crlf
155d0     79 00 00 FF 
155d4     C0 E5 05 F1 | 	add	objptr, ##62400
155d8     F2 12 02 FB | 	rdlong	arg01, objptr
155dc     79 00 00 FF 
155e0     C0 E5 85 F1 | 	sub	objptr, ##62400
155e4                 | ' 
155e4                 | ' write(text)
155e4     D4 5B B0 FD | 	call	#_hg010b_spin2_write
155e8                 | ' crlf
155e8     30 5D B0 FD | 	call	#_hg010b_spin2_crlf
155ec     A7 F0 03 F6 | 	mov	ptra, fp
155f0     B2 00 A0 FD | 	call	#popregs_
155f4                 | _do_mode_ret
155f4     2D 00 64 FD | 	ret
155f8                 | 
155f8                 | ' 
155f8                 | ' sub do_setwave
155f8                 | _do_setwave
155f8     02 4A 05 F6 | 	mov	COUNT_, #2
155fc     A8 00 A0 FD | 	call	#pushregs_
15600     18 F0 07 F1 | 	add	ptra, #24
15604     C0 4A BF FD | 	call	#_pop
15608     FD 12 02 F6 | 	mov	arg01, result1
1560c     FE 1E 02 F6 | 	mov	local01, result2
15610     FF 20 02 F6 | 	mov	local02, result3
15614     A7 12 62 FC | 	wrlong	arg01, fp
15618     04 4E 05 F1 | 	add	fp, #4
1561c     A7 1E 62 FC | 	wrlong	local01, fp
15620     04 4E 05 F1 | 	add	fp, #4
15624     A7 20 62 FC | 	wrlong	local02, fp
15628     08 4E 85 F1 | 	sub	fp, #8
1562c     98 4A BF FD | 	call	#_pop
15630     FD 20 02 F6 | 	mov	local02, result1
15634     0C 4E 05 F1 | 	add	fp, #12
15638     A7 20 62 FC | 	wrlong	local02, fp
1563c     04 4E 05 F1 | 	add	fp, #4
15640     A7 FC 61 FC | 	wrlong	result2, fp
15644     04 4E 05 F1 | 	add	fp, #4
15648     A7 FE 61 FC | 	wrlong	result3, fp
1564c     08 4E 85 F1 | 	sub	fp, #8
15650     A7 12 02 F6 | 	mov	arg01, fp
15654     0C 4E 85 F1 | 	sub	fp, #12
15658     C0 D3 BF FD | 	call	#_converttoint
1565c     FD 20 02 F6 | 	mov	local02, result1
15660     10 1F 02 F6 | 	mov	local01, local02
15664     01 1E 66 F0 | 	shl	local01, #1
15668     10 1F 02 F1 | 	add	local01, local02
1566c     03 1E 66 F0 | 	shl	local01, #3
15670     34 00 00 FF 
15674     2C E5 05 F1 | 	add	objptr, ##26924
15678     F2 1E 02 F1 | 	add	local01, objptr
1567c     A7 12 02 F6 | 	mov	arg01, fp
15680     34 00 00 FF 
15684     2C E5 85 F1 | 	sub	objptr, ##26924
15688     90 D3 BF FD | 	call	#_converttoint
1568c     04 1E 06 F1 | 	add	local01, #4
15690     0F FB 41 FC | 	wrbyte	result1, local01
15694     A7 F0 03 F6 | 	mov	ptra, fp
15698     B2 00 A0 FD | 	call	#popregs_
1569c                 | _do_setwave_ret
1569c     2D 00 64 FD | 	ret
156a0                 | 
156a0                 | ' 
156a0                 | ' sub do_setsustain
156a0                 | _do_setsustain
156a0     02 4A 05 F6 | 	mov	COUNT_, #2
156a4     A8 00 A0 FD | 	call	#pushregs_
156a8     18 F0 07 F1 | 	add	ptra, #24
156ac     18 4A BF FD | 	call	#_pop
156b0     FD 12 02 F6 | 	mov	arg01, result1
156b4     FE 1E 02 F6 | 	mov	local01, result2
156b8     FF 20 02 F6 | 	mov	local02, result3
156bc     A7 12 62 FC | 	wrlong	arg01, fp
156c0     04 4E 05 F1 | 	add	fp, #4
156c4     A7 1E 62 FC | 	wrlong	local01, fp
156c8     04 4E 05 F1 | 	add	fp, #4
156cc     A7 20 62 FC | 	wrlong	local02, fp
156d0     08 4E 85 F1 | 	sub	fp, #8
156d4     F0 49 BF FD | 	call	#_pop
156d8     FD 20 02 F6 | 	mov	local02, result1
156dc     0C 4E 05 F1 | 	add	fp, #12
156e0     A7 20 62 FC | 	wrlong	local02, fp
156e4     04 4E 05 F1 | 	add	fp, #4
156e8     A7 FC 61 FC | 	wrlong	result2, fp
156ec     04 4E 05 F1 | 	add	fp, #4
156f0     A7 FE 61 FC | 	wrlong	result3, fp
156f4     08 4E 85 F1 | 	sub	fp, #8
156f8     A7 12 02 F6 | 	mov	arg01, fp
156fc     0C 4E 85 F1 | 	sub	fp, #12
15700     18 D3 BF FD | 	call	#_converttoint
15704     FD 20 02 F6 | 	mov	local02, result1
15708     10 1F 02 F6 | 	mov	local01, local02
1570c     01 1E 66 F0 | 	shl	local01, #1
15710     10 1F 02 F1 | 	add	local01, local02
15714     03 1E 66 F0 | 	shl	local01, #3
15718     34 00 00 FF 
1571c     2C E5 05 F1 | 	add	objptr, ##26924
15720     F2 1E 02 F1 | 	add	local01, objptr
15724     A7 12 02 F6 | 	mov	arg01, fp
15728     34 00 00 FF 
1572c     2C E5 85 F1 | 	sub	objptr, ##26924
15730     E8 D2 BF FD | 	call	#_converttoint
15734     14 1E 06 F1 | 	add	local01, #20
15738     0F FB 51 FC | 	wrword	result1, local01
1573c     A7 F0 03 F6 | 	mov	ptra, fp
15740     B2 00 A0 FD | 	call	#popregs_
15744                 | _do_setsustain_ret
15744     2D 00 64 FD | 	ret
15748                 | 
15748                 | ' 
15748                 | ' sub do_setenv
15748                 | _do_setenv
15748     02 4A 05 F6 | 	mov	COUNT_, #2
1574c     A8 00 A0 FD | 	call	#pushregs_
15750     18 F0 07 F1 | 	add	ptra, #24
15754     70 49 BF FD | 	call	#_pop
15758     FD 12 02 F6 | 	mov	arg01, result1
1575c     FE 1E 02 F6 | 	mov	local01, result2
15760     FF 20 02 F6 | 	mov	local02, result3
15764     A7 12 62 FC | 	wrlong	arg01, fp
15768     04 4E 05 F1 | 	add	fp, #4
1576c     A7 1E 62 FC | 	wrlong	local01, fp
15770     04 4E 05 F1 | 	add	fp, #4
15774     A7 20 62 FC | 	wrlong	local02, fp
15778     08 4E 85 F1 | 	sub	fp, #8
1577c     48 49 BF FD | 	call	#_pop
15780     FD 20 02 F6 | 	mov	local02, result1
15784     0C 4E 05 F1 | 	add	fp, #12
15788     A7 20 62 FC | 	wrlong	local02, fp
1578c     04 4E 05 F1 | 	add	fp, #4
15790     A7 FC 61 FC | 	wrlong	result2, fp
15794     04 4E 05 F1 | 	add	fp, #4
15798     A7 FE 61 FC | 	wrlong	result3, fp
1579c     08 4E 85 F1 | 	sub	fp, #8
157a0     A7 12 02 F6 | 	mov	arg01, fp
157a4     0C 4E 85 F1 | 	sub	fp, #12
157a8     70 D2 BF FD | 	call	#_converttoint
157ac     FD 20 02 F6 | 	mov	local02, result1
157b0     10 1F 02 F6 | 	mov	local01, local02
157b4     01 1E 66 F0 | 	shl	local01, #1
157b8     10 1F 02 F1 | 	add	local01, local02
157bc     03 1E 66 F0 | 	shl	local01, #3
157c0     34 00 00 FF 
157c4     2C E5 05 F1 | 	add	objptr, ##26924
157c8     F2 1E 02 F1 | 	add	local01, objptr
157cc     A7 12 02 F6 | 	mov	arg01, fp
157d0     34 00 00 FF 
157d4     2C E5 85 F1 | 	sub	objptr, ##26924
157d8     40 D2 BF FD | 	call	#_converttoint
157dc     05 1E 06 F1 | 	add	local01, #5
157e0     0F FB 41 FC | 	wrbyte	result1, local01
157e4     A7 F0 03 F6 | 	mov	ptra, fp
157e8     B2 00 A0 FD | 	call	#popregs_
157ec                 | _do_setenv_ret
157ec     2D 00 64 FD | 	ret
157f0                 | 
157f0                 | ' 
157f0                 | ' sub do_setdelay
157f0                 | _do_setdelay
157f0     02 4A 05 F6 | 	mov	COUNT_, #2
157f4     A8 00 A0 FD | 	call	#pushregs_
157f8     18 F0 07 F1 | 	add	ptra, #24
157fc     C8 48 BF FD | 	call	#_pop
15800     FD 12 02 F6 | 	mov	arg01, result1
15804     FE 1E 02 F6 | 	mov	local01, result2
15808     FF 20 02 F6 | 	mov	local02, result3
1580c     A7 12 62 FC | 	wrlong	arg01, fp
15810     04 4E 05 F1 | 	add	fp, #4
15814     A7 1E 62 FC | 	wrlong	local01, fp
15818     04 4E 05 F1 | 	add	fp, #4
1581c     A7 20 62 FC | 	wrlong	local02, fp
15820     08 4E 85 F1 | 	sub	fp, #8
15824     A0 48 BF FD | 	call	#_pop
15828     FD 20 02 F6 | 	mov	local02, result1
1582c     0C 4E 05 F1 | 	add	fp, #12
15830     A7 20 62 FC | 	wrlong	local02, fp
15834     04 4E 05 F1 | 	add	fp, #4
15838     A7 FC 61 FC | 	wrlong	result2, fp
1583c     04 4E 05 F1 | 	add	fp, #4
15840     A7 FE 61 FC | 	wrlong	result3, fp
15844     08 4E 85 F1 | 	sub	fp, #8
15848     A7 12 02 F6 | 	mov	arg01, fp
1584c     0C 4E 85 F1 | 	sub	fp, #12
15850     C8 D1 BF FD | 	call	#_converttoint
15854     FD 20 02 F6 | 	mov	local02, result1
15858     10 1F 02 F6 | 	mov	local01, local02
1585c     01 1E 66 F0 | 	shl	local01, #1
15860     10 1F 02 F1 | 	add	local01, local02
15864     03 1E 66 F0 | 	shl	local01, #3
15868     34 00 00 FF 
1586c     2C E5 05 F1 | 	add	objptr, ##26924
15870     F2 1E 02 F1 | 	add	local01, objptr
15874     A7 12 02 F6 | 	mov	arg01, fp
15878     34 00 00 FF 
1587c     2C E5 85 F1 | 	sub	objptr, ##26924
15880     98 D1 BF FD | 	call	#_converttoint
15884     06 1E 06 F1 | 	add	local01, #6
15888     0F FB 51 FC | 	wrword	result1, local01
1588c     A7 F0 03 F6 | 	mov	ptra, fp
15890     B2 00 A0 FD | 	call	#popregs_
15894                 | _do_setdelay_ret
15894     2D 00 64 FD | 	ret
15898                 | 
15898                 | ' 
15898                 | ' sub do_setlen
15898                 | _do_setlen
15898     02 4A 05 F6 | 	mov	COUNT_, #2
1589c     A8 00 A0 FD | 	call	#pushregs_
158a0     18 F0 07 F1 | 	add	ptra, #24
158a4     20 48 BF FD | 	call	#_pop
158a8     FD 12 02 F6 | 	mov	arg01, result1
158ac     FE 1E 02 F6 | 	mov	local01, result2
158b0     FF 20 02 F6 | 	mov	local02, result3
158b4     A7 12 62 FC | 	wrlong	arg01, fp
158b8     04 4E 05 F1 | 	add	fp, #4
158bc     A7 1E 62 FC | 	wrlong	local01, fp
158c0     04 4E 05 F1 | 	add	fp, #4
158c4     A7 20 62 FC | 	wrlong	local02, fp
158c8     08 4E 85 F1 | 	sub	fp, #8
158cc     F8 47 BF FD | 	call	#_pop
158d0     FD 20 02 F6 | 	mov	local02, result1
158d4     0C 4E 05 F1 | 	add	fp, #12
158d8     A7 20 62 FC | 	wrlong	local02, fp
158dc     04 4E 05 F1 | 	add	fp, #4
158e0     A7 FC 61 FC | 	wrlong	result2, fp
158e4     04 4E 05 F1 | 	add	fp, #4
158e8     A7 FE 61 FC | 	wrlong	result3, fp
158ec     08 4E 85 F1 | 	sub	fp, #8
158f0     A7 12 02 F6 | 	mov	arg01, fp
158f4     0C 4E 85 F1 | 	sub	fp, #12
158f8     20 D1 BF FD | 	call	#_converttoint
158fc     FD 20 02 F6 | 	mov	local02, result1
15900     10 1F 02 F6 | 	mov	local01, local02
15904     01 1E 66 F0 | 	shl	local01, #1
15908     10 1F 02 F1 | 	add	local01, local02
1590c     03 1E 66 F0 | 	shl	local01, #3
15910     34 00 00 FF 
15914     2C E5 05 F1 | 	add	objptr, ##26924
15918     F2 1E 02 F1 | 	add	local01, objptr
1591c     A7 12 02 F6 | 	mov	arg01, fp
15920     34 00 00 FF 
15924     2C E5 85 F1 | 	sub	objptr, ##26924
15928     9C D1 BF FD | 	call	#_converttofloat
1592c     08 1E 06 F1 | 	add	local01, #8
15930     0F FB 61 FC | 	wrlong	result1, local01
15934     A7 F0 03 F6 | 	mov	ptra, fp
15938     B2 00 A0 FD | 	call	#popregs_
1593c                 | _do_setlen_ret
1593c     2D 00 64 FD | 	ret
15940                 | 
15940                 | ' 
15940                 | ' sub do_setvol
15940                 | _do_setvol
15940     02 4A 05 F6 | 	mov	COUNT_, #2
15944     A8 00 A0 FD | 	call	#pushregs_
15948     18 F0 07 F1 | 	add	ptra, #24
1594c     78 47 BF FD | 	call	#_pop
15950     FD 12 02 F6 | 	mov	arg01, result1
15954     FE 1E 02 F6 | 	mov	local01, result2
15958     FF 20 02 F6 | 	mov	local02, result3
1595c     A7 12 62 FC | 	wrlong	arg01, fp
15960     04 4E 05 F1 | 	add	fp, #4
15964     A7 1E 62 FC | 	wrlong	local01, fp
15968     04 4E 05 F1 | 	add	fp, #4
1596c     A7 20 62 FC | 	wrlong	local02, fp
15970     08 4E 85 F1 | 	sub	fp, #8
15974     50 47 BF FD | 	call	#_pop
15978     FD 20 02 F6 | 	mov	local02, result1
1597c     0C 4E 05 F1 | 	add	fp, #12
15980     A7 20 62 FC | 	wrlong	local02, fp
15984     04 4E 05 F1 | 	add	fp, #4
15988     A7 FC 61 FC | 	wrlong	result2, fp
1598c     04 4E 05 F1 | 	add	fp, #4
15990     A7 FE 61 FC | 	wrlong	result3, fp
15994     08 4E 85 F1 | 	sub	fp, #8
15998     A7 12 02 F6 | 	mov	arg01, fp
1599c     0C 4E 85 F1 | 	sub	fp, #12
159a0     78 D0 BF FD | 	call	#_converttoint
159a4     FD 20 02 F6 | 	mov	local02, result1
159a8     10 1F 02 F6 | 	mov	local01, local02
159ac     01 1E 66 F0 | 	shl	local01, #1
159b0     10 1F 02 F1 | 	add	local01, local02
159b4     03 1E 66 F0 | 	shl	local01, #3
159b8     34 00 00 FF 
159bc     2C E5 05 F1 | 	add	objptr, ##26924
159c0     F2 1E 02 F1 | 	add	local01, objptr
159c4     A7 12 02 F6 | 	mov	arg01, fp
159c8     34 00 00 FF 
159cc     2C E5 85 F1 | 	sub	objptr, ##26924
159d0     F4 D0 BF FD | 	call	#_converttofloat
159d4     0C 1E 06 F1 | 	add	local01, #12
159d8     0F FB 61 FC | 	wrlong	result1, local01
159dc     A7 F0 03 F6 | 	mov	ptra, fp
159e0     B2 00 A0 FD | 	call	#popregs_
159e4                 | _do_setvol_ret
159e4     2D 00 64 FD | 	ret
159e8                 | 
159e8                 | ' 
159e8                 | ' sub do_setpan
159e8                 | _do_setpan
159e8     02 4A 05 F6 | 	mov	COUNT_, #2
159ec     A8 00 A0 FD | 	call	#pushregs_
159f0     18 F0 07 F1 | 	add	ptra, #24
159f4     D0 46 BF FD | 	call	#_pop
159f8     FD 12 02 F6 | 	mov	arg01, result1
159fc     FE 1E 02 F6 | 	mov	local01, result2
15a00     FF 20 02 F6 | 	mov	local02, result3
15a04     A7 12 62 FC | 	wrlong	arg01, fp
15a08     04 4E 05 F1 | 	add	fp, #4
15a0c     A7 1E 62 FC | 	wrlong	local01, fp
15a10     04 4E 05 F1 | 	add	fp, #4
15a14     A7 20 62 FC | 	wrlong	local02, fp
15a18     08 4E 85 F1 | 	sub	fp, #8
15a1c     A8 46 BF FD | 	call	#_pop
15a20     FD 20 02 F6 | 	mov	local02, result1
15a24     0C 4E 05 F1 | 	add	fp, #12
15a28     A7 20 62 FC | 	wrlong	local02, fp
15a2c     04 4E 05 F1 | 	add	fp, #4
15a30     A7 FC 61 FC | 	wrlong	result2, fp
15a34     04 4E 05 F1 | 	add	fp, #4
15a38     A7 FE 61 FC | 	wrlong	result3, fp
15a3c     08 4E 85 F1 | 	sub	fp, #8
15a40     A7 12 02 F6 | 	mov	arg01, fp
15a44     0C 4E 85 F1 | 	sub	fp, #12
15a48     D0 CF BF FD | 	call	#_converttoint
15a4c     FD 20 02 F6 | 	mov	local02, result1
15a50     10 1F 02 F6 | 	mov	local01, local02
15a54     01 1E 66 F0 | 	shl	local01, #1
15a58     10 1F 02 F1 | 	add	local01, local02
15a5c     03 1E 66 F0 | 	shl	local01, #3
15a60     34 00 00 FF 
15a64     2C E5 05 F1 | 	add	objptr, ##26924
15a68     F2 1E 02 F1 | 	add	local01, objptr
15a6c     A7 12 02 F6 | 	mov	arg01, fp
15a70     34 00 00 FF 
15a74     2C E5 85 F1 | 	sub	objptr, ##26924
15a78     4C D0 BF FD | 	call	#_converttofloat
15a7c     10 1E 06 F1 | 	add	local01, #16
15a80     0F FB 61 FC | 	wrlong	result1, local01
15a84     A7 F0 03 F6 | 	mov	ptra, fp
15a88     B2 00 A0 FD | 	call	#popregs_
15a8c                 | _do_setpan_ret
15a8c     2D 00 64 FD | 	ret
15a90                 | 
15a90                 | ' 
15a90                 | ' 
15a90                 | ' sub do_pinwrite
15a90                 | _do_pinwrite
15a90     01 4A 05 F6 | 	mov	COUNT_, #1
15a94     A8 00 A0 FD | 	call	#pushregs_
15a98     18 F0 07 F1 | 	add	ptra, #24
15a9c     28 46 BF FD | 	call	#_pop
15aa0     FD 14 02 F6 | 	mov	arg02, result1
15aa4     FE 12 02 F6 | 	mov	arg01, result2
15aa8     FF 1E 02 F6 | 	mov	local01, result3
15aac     A7 14 62 FC | 	wrlong	arg02, fp
15ab0     04 4E 05 F1 | 	add	fp, #4
15ab4     A7 12 62 FC | 	wrlong	arg01, fp
15ab8     04 4E 05 F1 | 	add	fp, #4
15abc     A7 1E 62 FC | 	wrlong	local01, fp
15ac0     08 4E 85 F1 | 	sub	fp, #8
15ac4     00 46 BF FD | 	call	#_pop
15ac8     FF 1E 02 F6 | 	mov	local01, result3
15acc     0C 4E 05 F1 | 	add	fp, #12
15ad0     A7 FA 61 FC | 	wrlong	result1, fp
15ad4     04 4E 05 F1 | 	add	fp, #4
15ad8     A7 FC 61 FC | 	wrlong	result2, fp
15adc     04 4E 05 F1 | 	add	fp, #4
15ae0     A7 1E 62 FC | 	wrlong	local01, fp
15ae4     08 4E 85 F1 | 	sub	fp, #8
15ae8     A7 12 02 F6 | 	mov	arg01, fp
15aec     0C 4E 85 F1 | 	sub	fp, #12
15af0     28 CF BF FD | 	call	#_converttoint
15af4     FD 1E 02 F6 | 	mov	local01, result1
15af8     A7 12 02 F6 | 	mov	arg01, fp
15afc     1C CF BF FD | 	call	#_converttoint
15b00     FD 14 02 F6 | 	mov	arg02, result1
15b04     0F 13 02 F6 | 	mov	arg01, local01
15b08     A0 69 B0 FD | 	call	#__system___pinwrite
15b0c     A7 F0 03 F6 | 	mov	ptra, fp
15b10     B2 00 A0 FD | 	call	#popregs_
15b14                 | _do_pinwrite_ret
15b14     2D 00 64 FD | 	ret
15b18                 | 
15b18                 | ' 
15b18                 | ' sub do_pinfloat
15b18                 | _do_pinfloat
15b18     00 4A 05 F6 | 	mov	COUNT_, #0
15b1c     A8 00 A0 FD | 	call	#pushregs_
15b20     0C F0 07 F1 | 	add	ptra, #12
15b24     A0 45 BF FD | 	call	#_pop
15b28     A7 FA 61 FC | 	wrlong	result1, fp
15b2c     04 4E 05 F1 | 	add	fp, #4
15b30     A7 FC 61 FC | 	wrlong	result2, fp
15b34     04 4E 05 F1 | 	add	fp, #4
15b38     A7 FE 61 FC | 	wrlong	result3, fp
15b3c     08 4E 85 F1 | 	sub	fp, #8
15b40     A7 12 02 F6 | 	mov	arg01, fp
15b44     D4 CE BF FD | 	call	#_converttoint
15b48     50 FA 61 FD | 	fltl	result1
15b4c     A7 F0 03 F6 | 	mov	ptra, fp
15b50     B2 00 A0 FD | 	call	#popregs_
15b54                 | _do_pinfloat_ret
15b54     2D 00 64 FD | 	ret
15b58                 | 
15b58                 | ' 
15b58                 | ' sub do_pinlo
15b58                 | _do_pinlo
15b58     00 4A 05 F6 | 	mov	COUNT_, #0
15b5c     A8 00 A0 FD | 	call	#pushregs_
15b60     0C F0 07 F1 | 	add	ptra, #12
15b64     60 45 BF FD | 	call	#_pop
15b68     A7 FA 61 FC | 	wrlong	result1, fp
15b6c     04 4E 05 F1 | 	add	fp, #4
15b70     A7 FC 61 FC | 	wrlong	result2, fp
15b74     04 4E 05 F1 | 	add	fp, #4
15b78     A7 FE 61 FC | 	wrlong	result3, fp
15b7c     08 4E 85 F1 | 	sub	fp, #8
15b80     A7 12 02 F6 | 	mov	arg01, fp
15b84     94 CE BF FD | 	call	#_converttoint
15b88     58 FA 61 FD | 	drvl	result1
15b8c     A7 F0 03 F6 | 	mov	ptra, fp
15b90     B2 00 A0 FD | 	call	#popregs_
15b94                 | _do_pinlo_ret
15b94     2D 00 64 FD | 	ret
15b98                 | 
15b98                 | ' 
15b98                 | ' sub do_pinhi
15b98                 | _do_pinhi
15b98     00 4A 05 F6 | 	mov	COUNT_, #0
15b9c     A8 00 A0 FD | 	call	#pushregs_
15ba0     0C F0 07 F1 | 	add	ptra, #12
15ba4     20 45 BF FD | 	call	#_pop
15ba8     A7 FA 61 FC | 	wrlong	result1, fp
15bac     04 4E 05 F1 | 	add	fp, #4
15bb0     A7 FC 61 FC | 	wrlong	result2, fp
15bb4     04 4E 05 F1 | 	add	fp, #4
15bb8     A7 FE 61 FC | 	wrlong	result3, fp
15bbc     08 4E 85 F1 | 	sub	fp, #8
15bc0     A7 12 02 F6 | 	mov	arg01, fp
15bc4     54 CE BF FD | 	call	#_converttoint
15bc8     59 FA 61 FD | 	drvh	result1
15bcc     A7 F0 03 F6 | 	mov	ptra, fp
15bd0     B2 00 A0 FD | 	call	#popregs_
15bd4                 | _do_pinhi_ret
15bd4     2D 00 64 FD | 	ret
15bd8                 | 
15bd8                 | ' 
15bd8                 | ' sub do_pintoggle
15bd8                 | _do_pintoggle
15bd8     00 4A 05 F6 | 	mov	COUNT_, #0
15bdc     A8 00 A0 FD | 	call	#pushregs_
15be0     0C F0 07 F1 | 	add	ptra, #12
15be4     E0 44 BF FD | 	call	#_pop
15be8     A7 FA 61 FC | 	wrlong	result1, fp
15bec     04 4E 05 F1 | 	add	fp, #4
15bf0     A7 FC 61 FC | 	wrlong	result2, fp
15bf4     04 4E 05 F1 | 	add	fp, #4
15bf8     A7 FE 61 FC | 	wrlong	result3, fp
15bfc     08 4E 85 F1 | 	sub	fp, #8
15c00     A7 12 02 F6 | 	mov	arg01, fp
15c04     14 CE BF FD | 	call	#_converttoint
15c08     5F FA 61 FD | 	drvnot	result1
15c0c     A7 F0 03 F6 | 	mov	ptra, fp
15c10     B2 00 A0 FD | 	call	#popregs_
15c14                 | _do_pintoggle_ret
15c14     2D 00 64 FD | 	ret
15c18                 | 
15c18                 | ' 
15c18                 | ' 
15c18                 | ' sub do_pinstart
15c18                 | _do_pinstart
15c18     03 4A 05 F6 | 	mov	COUNT_, #3
15c1c     A8 00 A0 FD | 	call	#pushregs_
15c20     30 F0 07 F1 | 	add	ptra, #48
15c24     A0 44 BF FD | 	call	#_pop
15c28     FD 16 02 F6 | 	mov	arg03, result1
15c2c     FE 14 02 F6 | 	mov	arg02, result2
15c30     FF 18 02 F6 | 	mov	arg04, result3
15c34     A7 16 62 FC | 	wrlong	arg03, fp
15c38     04 4E 05 F1 | 	add	fp, #4
15c3c     A7 14 62 FC | 	wrlong	arg02, fp
15c40     04 4E 05 F1 | 	add	fp, #4
15c44     A7 18 62 FC | 	wrlong	arg04, fp
15c48     08 4E 85 F1 | 	sub	fp, #8
15c4c     78 44 BF FD | 	call	#_pop
15c50     FD 16 02 F6 | 	mov	arg03, result1
15c54     FE 14 02 F6 | 	mov	arg02, result2
15c58     FF 18 02 F6 | 	mov	arg04, result3
15c5c     0C 4E 05 F1 | 	add	fp, #12
15c60     A7 16 62 FC | 	wrlong	arg03, fp
15c64     04 4E 05 F1 | 	add	fp, #4
15c68     A7 14 62 FC | 	wrlong	arg02, fp
15c6c     04 4E 05 F1 | 	add	fp, #4
15c70     A7 18 62 FC | 	wrlong	arg04, fp
15c74     14 4E 85 F1 | 	sub	fp, #20
15c78     4C 44 BF FD | 	call	#_pop
15c7c     FD 16 02 F6 | 	mov	arg03, result1
15c80     FE 14 02 F6 | 	mov	arg02, result2
15c84     FF 18 02 F6 | 	mov	arg04, result3
15c88     18 4E 05 F1 | 	add	fp, #24
15c8c     A7 16 62 FC | 	wrlong	arg03, fp
15c90     04 4E 05 F1 | 	add	fp, #4
15c94     A7 14 62 FC | 	wrlong	arg02, fp
15c98     04 4E 05 F1 | 	add	fp, #4
15c9c     A7 18 62 FC | 	wrlong	arg04, fp
15ca0     20 4E 85 F1 | 	sub	fp, #32
15ca4     20 44 BF FD | 	call	#_pop
15ca8     FF 16 02 F6 | 	mov	arg03, result3
15cac     24 4E 05 F1 | 	add	fp, #36
15cb0     A7 FA 61 FC | 	wrlong	result1, fp
15cb4     04 4E 05 F1 | 	add	fp, #4
15cb8     A7 FC 61 FC | 	wrlong	result2, fp
15cbc     04 4E 05 F1 | 	add	fp, #4
15cc0     A7 16 62 FC | 	wrlong	arg03, fp
15cc4     08 4E 85 F1 | 	sub	fp, #8
15cc8     A7 12 02 F6 | 	mov	arg01, fp
15ccc     24 4E 85 F1 | 	sub	fp, #36
15cd0     48 CD BF FD | 	call	#_converttoint
15cd4     FD 1E 02 F6 | 	mov	local01, result1
15cd8     18 4E 05 F1 | 	add	fp, #24
15cdc     A7 12 02 F6 | 	mov	arg01, fp
15ce0     18 4E 85 F1 | 	sub	fp, #24
15ce4     34 CD BF FD | 	call	#_converttoint
15ce8     FD 20 02 F6 | 	mov	local02, result1
15cec     0C 4E 05 F1 | 	add	fp, #12
15cf0     A7 12 02 F6 | 	mov	arg01, fp
15cf4     0C 4E 85 F1 | 	sub	fp, #12
15cf8     20 CD BF FD | 	call	#_converttoint
15cfc     FD 22 02 F6 | 	mov	local03, result1
15d00     A7 12 02 F6 | 	mov	arg01, fp
15d04     14 CD BF FD | 	call	#_converttoint
15d08     40 1E 62 FD | 	dirl	local01
15d0c     0F 21 02 FC | 	wrpin	local02, local01
15d10     0F 23 12 FC | 	wxpin	local03, local01
15d14     0F FB 21 FC | 	wypin	result1, local01
15d18     41 1E 62 FD | 	dirh	local01
15d1c     A7 F0 03 F6 | 	mov	ptra, fp
15d20     B2 00 A0 FD | 	call	#popregs_
15d24                 | _do_pinstart_ret
15d24     2D 00 64 FD | 	ret
15d28                 | 
15d28                 | ' 
15d28                 | ' 
15d28                 | ' sub do_wrpin
15d28                 | _do_wrpin
15d28     01 4A 05 F6 | 	mov	COUNT_, #1
15d2c     A8 00 A0 FD | 	call	#pushregs_
15d30     18 F0 07 F1 | 	add	ptra, #24
15d34     90 43 BF FD | 	call	#_pop
15d38     FD 14 02 F6 | 	mov	arg02, result1
15d3c     FE 12 02 F6 | 	mov	arg01, result2
15d40     FF 1E 02 F6 | 	mov	local01, result3
15d44     A7 14 62 FC | 	wrlong	arg02, fp
15d48     04 4E 05 F1 | 	add	fp, #4
15d4c     A7 12 62 FC | 	wrlong	arg01, fp
15d50     04 4E 05 F1 | 	add	fp, #4
15d54     A7 1E 62 FC | 	wrlong	local01, fp
15d58     08 4E 85 F1 | 	sub	fp, #8
15d5c     68 43 BF FD | 	call	#_pop
15d60     FF 1E 02 F6 | 	mov	local01, result3
15d64     0C 4E 05 F1 | 	add	fp, #12
15d68     A7 FA 61 FC | 	wrlong	result1, fp
15d6c     04 4E 05 F1 | 	add	fp, #4
15d70     A7 FC 61 FC | 	wrlong	result2, fp
15d74     04 4E 05 F1 | 	add	fp, #4
15d78     A7 1E 62 FC | 	wrlong	local01, fp
15d7c     08 4E 85 F1 | 	sub	fp, #8
15d80     A7 12 02 F6 | 	mov	arg01, fp
15d84     0C 4E 85 F1 | 	sub	fp, #12
15d88     90 CC BF FD | 	call	#_converttoint
15d8c     FD 1E 02 F6 | 	mov	local01, result1
15d90     A7 12 02 F6 | 	mov	arg01, fp
15d94     84 CC BF FD | 	call	#_converttoint
15d98     0F FB 01 FC | 	wrpin	result1, local01
15d9c     A7 F0 03 F6 | 	mov	ptra, fp
15da0     B2 00 A0 FD | 	call	#popregs_
15da4                 | _do_wrpin_ret
15da4     2D 00 64 FD | 	ret
15da8                 | 
15da8                 | ' 
15da8                 | ' sub do_wxpin
15da8                 | _do_wxpin
15da8     01 4A 05 F6 | 	mov	COUNT_, #1
15dac     A8 00 A0 FD | 	call	#pushregs_
15db0     18 F0 07 F1 | 	add	ptra, #24
15db4     10 43 BF FD | 	call	#_pop
15db8     FD 14 02 F6 | 	mov	arg02, result1
15dbc     FE 12 02 F6 | 	mov	arg01, result2
15dc0     FF 1E 02 F6 | 	mov	local01, result3
15dc4     A7 14 62 FC | 	wrlong	arg02, fp
15dc8     04 4E 05 F1 | 	add	fp, #4
15dcc     A7 12 62 FC | 	wrlong	arg01, fp
15dd0     04 4E 05 F1 | 	add	fp, #4
15dd4     A7 1E 62 FC | 	wrlong	local01, fp
15dd8     08 4E 85 F1 | 	sub	fp, #8
15ddc     E8 42 BF FD | 	call	#_pop
15de0     FF 1E 02 F6 | 	mov	local01, result3
15de4     0C 4E 05 F1 | 	add	fp, #12
15de8     A7 FA 61 FC | 	wrlong	result1, fp
15dec     04 4E 05 F1 | 	add	fp, #4
15df0     A7 FC 61 FC | 	wrlong	result2, fp
15df4     04 4E 05 F1 | 	add	fp, #4
15df8     A7 1E 62 FC | 	wrlong	local01, fp
15dfc     08 4E 85 F1 | 	sub	fp, #8
15e00     A7 12 02 F6 | 	mov	arg01, fp
15e04     0C 4E 85 F1 | 	sub	fp, #12
15e08     10 CC BF FD | 	call	#_converttoint
15e0c     FD 1E 02 F6 | 	mov	local01, result1
15e10     A7 12 02 F6 | 	mov	arg01, fp
15e14     04 CC BF FD | 	call	#_converttoint
15e18     0F FB 11 FC | 	wxpin	result1, local01
15e1c     A7 F0 03 F6 | 	mov	ptra, fp
15e20     B2 00 A0 FD | 	call	#popregs_
15e24                 | _do_wxpin_ret
15e24     2D 00 64 FD | 	ret
15e28                 | 
15e28                 | ' 
15e28                 | ' sub do_wypin
15e28                 | _do_wypin
15e28     01 4A 05 F6 | 	mov	COUNT_, #1
15e2c     A8 00 A0 FD | 	call	#pushregs_
15e30     18 F0 07 F1 | 	add	ptra, #24
15e34     90 42 BF FD | 	call	#_pop
15e38     FD 14 02 F6 | 	mov	arg02, result1
15e3c     FE 12 02 F6 | 	mov	arg01, result2
15e40     FF 1E 02 F6 | 	mov	local01, result3
15e44     A7 14 62 FC | 	wrlong	arg02, fp
15e48     04 4E 05 F1 | 	add	fp, #4
15e4c     A7 12 62 FC | 	wrlong	arg01, fp
15e50     04 4E 05 F1 | 	add	fp, #4
15e54     A7 1E 62 FC | 	wrlong	local01, fp
15e58     08 4E 85 F1 | 	sub	fp, #8
15e5c     68 42 BF FD | 	call	#_pop
15e60     FF 1E 02 F6 | 	mov	local01, result3
15e64     0C 4E 05 F1 | 	add	fp, #12
15e68     A7 FA 61 FC | 	wrlong	result1, fp
15e6c     04 4E 05 F1 | 	add	fp, #4
15e70     A7 FC 61 FC | 	wrlong	result2, fp
15e74     04 4E 05 F1 | 	add	fp, #4
15e78     A7 1E 62 FC | 	wrlong	local01, fp
15e7c     08 4E 85 F1 | 	sub	fp, #8
15e80     A7 12 02 F6 | 	mov	arg01, fp
15e84     0C 4E 85 F1 | 	sub	fp, #12
15e88     90 CB BF FD | 	call	#_converttoint
15e8c     FD 1E 02 F6 | 	mov	local01, result1
15e90     A7 12 02 F6 | 	mov	arg01, fp
15e94     84 CB BF FD | 	call	#_converttoint
15e98     0F FB 21 FC | 	wypin	result1, local01
15e9c     A7 F0 03 F6 | 	mov	ptra, fp
15ea0     B2 00 A0 FD | 	call	#popregs_
15ea4                 | _do_wypin_ret
15ea4     2D 00 64 FD | 	ret
15ea8                 | 
15ea8                 | ' 
15ea8                 | ' sub do_position
15ea8                 | _do_position
15ea8     01 4A 05 F6 | 	mov	COUNT_, #1
15eac     A8 00 A0 FD | 	call	#pushregs_
15eb0     18 F0 07 F1 | 	add	ptra, #24
15eb4     10 42 BF FD | 	call	#_pop
15eb8     FD 14 02 F6 | 	mov	arg02, result1
15ebc     FE 12 02 F6 | 	mov	arg01, result2
15ec0     FF 1E 02 F6 | 	mov	local01, result3
15ec4     A7 14 62 FC | 	wrlong	arg02, fp
15ec8     04 4E 05 F1 | 	add	fp, #4
15ecc     A7 12 62 FC | 	wrlong	arg01, fp
15ed0     04 4E 05 F1 | 	add	fp, #4
15ed4     A7 1E 62 FC | 	wrlong	local01, fp
15ed8     08 4E 85 F1 | 	sub	fp, #8
15edc     E8 41 BF FD | 	call	#_pop
15ee0     FF 1E 02 F6 | 	mov	local01, result3
15ee4     0C 4E 05 F1 | 	add	fp, #12
15ee8     A7 FA 61 FC | 	wrlong	result1, fp
15eec     04 4E 05 F1 | 	add	fp, #4
15ef0     A7 FC 61 FC | 	wrlong	result2, fp
15ef4     04 4E 05 F1 | 	add	fp, #4
15ef8     A7 1E 62 FC | 	wrlong	local01, fp
15efc     08 4E 85 F1 | 	sub	fp, #8
15f00     A7 12 02 F6 | 	mov	arg01, fp
15f04     0C 4E 85 F1 | 	sub	fp, #12
15f08     10 CB BF FD | 	call	#_converttoint
15f0c     FD 1E 02 F6 | 	mov	local01, result1
15f10     A7 12 02 F6 | 	mov	arg01, fp
15f14     04 CB BF FD | 	call	#_converttoint
15f18     FD 14 02 F6 | 	mov	arg02, result1
15f1c     0F 13 02 F6 | 	mov	arg01, local01
15f20     34 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
15f24     A7 F0 03 F6 | 	mov	ptra, fp
15f28     B2 00 A0 FD | 	call	#popregs_
15f2c                 | _do_position_ret
15f2c     2D 00 64 FD | 	ret
15f30                 | 
15f30                 | ' 
15f30                 | ' sub do_poke
15f30                 | _do_poke
15f30     01 4A 05 F6 | 	mov	COUNT_, #1
15f34     A8 00 A0 FD | 	call	#pushregs_
15f38     20 F0 07 F1 | 	add	ptra, #32
15f3c     88 41 BF FD | 	call	#_pop
15f40     FD 14 02 F6 | 	mov	arg02, result1
15f44     FE 12 02 F6 | 	mov	arg01, result2
15f48     FF 1E 02 F6 | 	mov	local01, result3
15f4c     A7 14 62 FC | 	wrlong	arg02, fp
15f50     04 4E 05 F1 | 	add	fp, #4
15f54     A7 12 62 FC | 	wrlong	arg01, fp
15f58     04 4E 05 F1 | 	add	fp, #4
15f5c     A7 1E 62 FC | 	wrlong	local01, fp
15f60     08 4E 85 F1 | 	sub	fp, #8
15f64     60 41 BF FD | 	call	#_pop
15f68     FF 1E 02 F6 | 	mov	local01, result3
15f6c     0C 4E 05 F1 | 	add	fp, #12
15f70     A7 FA 61 FC | 	wrlong	result1, fp
15f74     04 4E 05 F1 | 	add	fp, #4
15f78     A7 FC 61 FC | 	wrlong	result2, fp
15f7c     04 4E 05 F1 | 	add	fp, #4
15f80     A7 1E 62 FC | 	wrlong	local01, fp
15f84     08 4E 85 F1 | 	sub	fp, #8
15f88     A7 12 02 F6 | 	mov	arg01, fp
15f8c     0C 4E 85 F1 | 	sub	fp, #12
15f90     88 CA BF FD | 	call	#_converttoint
15f94     18 4E 05 F1 | 	add	fp, #24
15f98     A7 FA 61 FC | 	wrlong	result1, fp
15f9c     18 4E 85 F1 | 	sub	fp, #24
15fa0     A7 12 02 F6 | 	mov	arg01, fp
15fa4     74 CA BF FD | 	call	#_converttoint
15fa8     1C 4E 05 F1 | 	add	fp, #28
15fac     A7 FA 61 FC | 	wrlong	result1, fp
15fb0                 | ' t1=pop() 'value
15fb0                 | ' t2=pop() 
15fb0                 | ' a=converttoint(t2) : v=converttoint(t1)
15fb0                 | ' if a<$80000 then poke a,v else pspoke a,v
15fb0     04 4E 85 F1 | 	sub	fp, #4
15fb4     A7 1E 02 FB | 	rdlong	local01, fp
15fb8     18 4E 85 F1 | 	sub	fp, #24
15fbc     00 04 00 FF 
15fc0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
15fc4     1C 00 90 3D |  if_ae	jmp	#LR__1730
15fc8     18 4E 05 F1 | 	add	fp, #24
15fcc     A7 12 02 FB | 	rdlong	arg01, fp
15fd0     04 4E 05 F1 | 	add	fp, #4
15fd4     A7 14 02 FB | 	rdlong	arg02, fp
15fd8     1C 4E 85 F1 | 	sub	fp, #28
15fdc     09 15 42 FC | 	wrbyte	arg02, arg01
15fe0     18 00 90 FD | 	jmp	#LR__1731
15fe4                 | LR__1730
15fe4     18 4E 05 F1 | 	add	fp, #24
15fe8     A7 12 02 FB | 	rdlong	arg01, fp
15fec     04 4E 05 F1 | 	add	fp, #4
15ff0     A7 14 02 FB | 	rdlong	arg02, fp
15ff4     1C 4E 85 F1 | 	sub	fp, #28
15ff8     50 2D B0 FD | 	call	#_pspoke
15ffc                 | LR__1731
15ffc     A7 F0 03 F6 | 	mov	ptra, fp
16000     B2 00 A0 FD | 	call	#popregs_
16004                 | _do_poke_ret
16004     2D 00 64 FD | 	ret
16008                 | 
16008                 | ' 
16008                 | ' sub do_dpoke
16008                 | _do_dpoke
16008     01 4A 05 F6 | 	mov	COUNT_, #1
1600c     A8 00 A0 FD | 	call	#pushregs_
16010     20 F0 07 F1 | 	add	ptra, #32
16014     B0 40 BF FD | 	call	#_pop
16018     FD 14 02 F6 | 	mov	arg02, result1
1601c     FE 12 02 F6 | 	mov	arg01, result2
16020     FF 1E 02 F6 | 	mov	local01, result3
16024     A7 14 62 FC | 	wrlong	arg02, fp
16028     04 4E 05 F1 | 	add	fp, #4
1602c     A7 12 62 FC | 	wrlong	arg01, fp
16030     04 4E 05 F1 | 	add	fp, #4
16034     A7 1E 62 FC | 	wrlong	local01, fp
16038     08 4E 85 F1 | 	sub	fp, #8
1603c     88 40 BF FD | 	call	#_pop
16040     FF 1E 02 F6 | 	mov	local01, result3
16044     0C 4E 05 F1 | 	add	fp, #12
16048     A7 FA 61 FC | 	wrlong	result1, fp
1604c     04 4E 05 F1 | 	add	fp, #4
16050     A7 FC 61 FC | 	wrlong	result2, fp
16054     04 4E 05 F1 | 	add	fp, #4
16058     A7 1E 62 FC | 	wrlong	local01, fp
1605c     08 4E 85 F1 | 	sub	fp, #8
16060     A7 12 02 F6 | 	mov	arg01, fp
16064     0C 4E 85 F1 | 	sub	fp, #12
16068     B0 C9 BF FD | 	call	#_converttoint
1606c     18 4E 05 F1 | 	add	fp, #24
16070     A7 FA 61 FC | 	wrlong	result1, fp
16074     18 4E 85 F1 | 	sub	fp, #24
16078     A7 12 02 F6 | 	mov	arg01, fp
1607c     9C C9 BF FD | 	call	#_converttoint
16080     1C 4E 05 F1 | 	add	fp, #28
16084     A7 FA 61 FC | 	wrlong	result1, fp
16088                 | ' t1=pop() 'value
16088                 | ' t2=pop() 
16088                 | ' a=converttoint(t2) : v=converttoint(t1)
16088                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
16088     04 4E 85 F1 | 	sub	fp, #4
1608c     A7 1E 02 FB | 	rdlong	local01, fp
16090     18 4E 85 F1 | 	sub	fp, #24
16094     00 04 00 FF 
16098     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1609c     1C 00 90 3D |  if_ae	jmp	#LR__1740
160a0     18 4E 05 F1 | 	add	fp, #24
160a4     A7 12 02 FB | 	rdlong	arg01, fp
160a8     04 4E 05 F1 | 	add	fp, #4
160ac     A7 14 02 FB | 	rdlong	arg02, fp
160b0     1C 4E 85 F1 | 	sub	fp, #28
160b4     09 15 52 FC | 	wrword	arg02, arg01
160b8     18 00 90 FD | 	jmp	#LR__1741
160bc                 | LR__1740
160bc     18 4E 05 F1 | 	add	fp, #24
160c0     A7 12 02 FB | 	rdlong	arg01, fp
160c4     04 4E 05 F1 | 	add	fp, #4
160c8     A7 14 02 FB | 	rdlong	arg02, fp
160cc     1C 4E 85 F1 | 	sub	fp, #28
160d0     30 2C B0 FD | 	call	#_psdpoke
160d4                 | LR__1741
160d4     A7 F0 03 F6 | 	mov	ptra, fp
160d8     B2 00 A0 FD | 	call	#popregs_
160dc                 | _do_dpoke_ret
160dc     2D 00 64 FD | 	ret
160e0                 | 
160e0                 | ' 
160e0                 | ' sub do_lpoke
160e0                 | _do_lpoke
160e0     01 4A 05 F6 | 	mov	COUNT_, #1
160e4     A8 00 A0 FD | 	call	#pushregs_
160e8     20 F0 07 F1 | 	add	ptra, #32
160ec     D8 3F BF FD | 	call	#_pop
160f0     FD 14 02 F6 | 	mov	arg02, result1
160f4     FE 12 02 F6 | 	mov	arg01, result2
160f8     FF 1E 02 F6 | 	mov	local01, result3
160fc     A7 14 62 FC | 	wrlong	arg02, fp
16100     04 4E 05 F1 | 	add	fp, #4
16104     A7 12 62 FC | 	wrlong	arg01, fp
16108     04 4E 05 F1 | 	add	fp, #4
1610c     A7 1E 62 FC | 	wrlong	local01, fp
16110     08 4E 85 F1 | 	sub	fp, #8
16114     B0 3F BF FD | 	call	#_pop
16118     FF 1E 02 F6 | 	mov	local01, result3
1611c     0C 4E 05 F1 | 	add	fp, #12
16120     A7 FA 61 FC | 	wrlong	result1, fp
16124     04 4E 05 F1 | 	add	fp, #4
16128     A7 FC 61 FC | 	wrlong	result2, fp
1612c     04 4E 05 F1 | 	add	fp, #4
16130     A7 1E 62 FC | 	wrlong	local01, fp
16134     08 4E 85 F1 | 	sub	fp, #8
16138     A7 12 02 F6 | 	mov	arg01, fp
1613c     0C 4E 85 F1 | 	sub	fp, #12
16140     D8 C8 BF FD | 	call	#_converttoint
16144     18 4E 05 F1 | 	add	fp, #24
16148     A7 FA 61 FC | 	wrlong	result1, fp
1614c     18 4E 85 F1 | 	sub	fp, #24
16150     A7 12 02 F6 | 	mov	arg01, fp
16154     C4 C8 BF FD | 	call	#_converttoint
16158     1C 4E 05 F1 | 	add	fp, #28
1615c     A7 FA 61 FC | 	wrlong	result1, fp
16160                 | ' t1=pop() 'value
16160                 | ' t2=pop() 
16160                 | ' a=converttoint(t2) : v=converttoint(t1)
16160                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
16160     04 4E 85 F1 | 	sub	fp, #4
16164     A7 1E 02 FB | 	rdlong	local01, fp
16168     18 4E 85 F1 | 	sub	fp, #24
1616c     00 04 00 FF 
16170     00 1E 16 F2 | 	cmp	local01, ##524288 wc
16174     1C 00 90 3D |  if_ae	jmp	#LR__1750
16178     18 4E 05 F1 | 	add	fp, #24
1617c     A7 12 02 FB | 	rdlong	arg01, fp
16180     04 4E 05 F1 | 	add	fp, #4
16184     A7 14 02 FB | 	rdlong	arg02, fp
16188     1C 4E 85 F1 | 	sub	fp, #28
1618c     09 15 62 FC | 	wrlong	arg02, arg01
16190     18 00 90 FD | 	jmp	#LR__1751
16194                 | LR__1750
16194     18 4E 05 F1 | 	add	fp, #24
16198     A7 12 02 FB | 	rdlong	arg01, fp
1619c     04 4E 05 F1 | 	add	fp, #4
161a0     A7 14 02 FB | 	rdlong	arg02, fp
161a4     1C 4E 85 F1 | 	sub	fp, #28
161a8     10 2B B0 FD | 	call	#_pslpoke
161ac                 | LR__1751
161ac     A7 F0 03 F6 | 	mov	ptra, fp
161b0     B2 00 A0 FD | 	call	#popregs_
161b4                 | _do_lpoke_ret
161b4     2D 00 64 FD | 	ret
161b8                 | 
161b8                 | ' 
161b8                 | ' sub do_peek
161b8                 | _do_peek
161b8     00 4A 05 F6 | 	mov	COUNT_, #0
161bc     A8 00 A0 FD | 	call	#pushregs_
161c0     14 F0 07 F1 | 	add	ptra, #20
161c4     00 3F BF FD | 	call	#_pop
161c8     A7 FA 61 FC | 	wrlong	result1, fp
161cc     04 4E 05 F1 | 	add	fp, #4
161d0     A7 FC 61 FC | 	wrlong	result2, fp
161d4     04 4E 05 F1 | 	add	fp, #4
161d8     A7 FE 61 FC | 	wrlong	result3, fp
161dc     08 4E 85 F1 | 	sub	fp, #8
161e0     A7 12 02 F6 | 	mov	arg01, fp
161e4     34 C8 BF FD | 	call	#_converttoint
161e8     0C 4E 05 F1 | 	add	fp, #12
161ec     A7 FA 61 FC | 	wrlong	result1, fp
161f0                 | ' t1=pop()
161f0                 | ' a=converttoint(t1)
161f0                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
161f0     0C 4E 85 F1 | 	sub	fp, #12
161f4     00 04 00 FF 
161f8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
161fc     1C 00 90 3D |  if_ae	jmp	#LR__1760
16200     0C 4E 05 F1 | 	add	fp, #12
16204     A7 12 02 FB | 	rdlong	arg01, fp
16208     09 FB C1 FA | 	rdbyte	result1, arg01
1620c     04 4E 05 F1 | 	add	fp, #4
16210     A7 FA 61 FC | 	wrlong	result1, fp
16214     10 4E 85 F1 | 	sub	fp, #16
16218     20 00 90 FD | 	jmp	#LR__1761
1621c                 | LR__1760
1621c     0C 4E 05 F1 | 	add	fp, #12
16220     A7 12 02 FB | 	rdlong	arg01, fp
16224     0C 4E 85 F1 | 	sub	fp, #12
16228     68 2B B0 FD | 	call	#_pspeek
1622c     FD FA E1 F8 | 	getbyte	result1, result1, #0
16230     10 4E 05 F1 | 	add	fp, #16
16234     A7 FA 61 FC | 	wrlong	result1, fp
16238     10 4E 85 F1 | 	sub	fp, #16
1623c                 | LR__1761
1623c     08 4E 05 F1 | 	add	fp, #8
16240     A7 3A 68 FC | 	wrlong	#29, fp
16244     08 4E 05 F1 | 	add	fp, #8
16248     A7 12 02 FB | 	rdlong	arg01, fp
1624c     10 4E 85 F1 | 	sub	fp, #16
16250     A7 12 62 FC | 	wrlong	arg01, fp
16254     A7 12 02 F6 | 	mov	arg01, fp
16258     04 3F BF FD | 	call	#_push
1625c     A7 F0 03 F6 | 	mov	ptra, fp
16260     B2 00 A0 FD | 	call	#popregs_
16264                 | _do_peek_ret
16264     2D 00 64 FD | 	ret
16268                 | 
16268                 | ' 
16268                 | ' sub do_dpeek
16268                 | _do_dpeek
16268     00 4A 05 F6 | 	mov	COUNT_, #0
1626c     A8 00 A0 FD | 	call	#pushregs_
16270     14 F0 07 F1 | 	add	ptra, #20
16274     50 3E BF FD | 	call	#_pop
16278     A7 FA 61 FC | 	wrlong	result1, fp
1627c     04 4E 05 F1 | 	add	fp, #4
16280     A7 FC 61 FC | 	wrlong	result2, fp
16284     04 4E 05 F1 | 	add	fp, #4
16288     A7 FE 61 FC | 	wrlong	result3, fp
1628c     08 4E 85 F1 | 	sub	fp, #8
16290     A7 12 02 F6 | 	mov	arg01, fp
16294     84 C7 BF FD | 	call	#_converttoint
16298     0C 4E 05 F1 | 	add	fp, #12
1629c     A7 FA 61 FC | 	wrlong	result1, fp
162a0                 | ' t1=pop()
162a0                 | ' a=converttoint(t1)
162a0                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
162a0     0C 4E 85 F1 | 	sub	fp, #12
162a4     00 04 00 FF 
162a8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
162ac     1C 00 90 3D |  if_ae	jmp	#LR__1770
162b0     0C 4E 05 F1 | 	add	fp, #12
162b4     A7 12 02 FB | 	rdlong	arg01, fp
162b8     09 FB E1 FA | 	rdword	result1, arg01
162bc     04 4E 05 F1 | 	add	fp, #4
162c0     A7 FA 61 FC | 	wrlong	result1, fp
162c4     10 4E 85 F1 | 	sub	fp, #16
162c8     1C 00 90 FD | 	jmp	#LR__1771
162cc                 | LR__1770
162cc     0C 4E 05 F1 | 	add	fp, #12
162d0     A7 12 02 FB | 	rdlong	arg01, fp
162d4     0C 4E 85 F1 | 	sub	fp, #12
162d8     68 2B B0 FD | 	call	#_psdpeek
162dc     10 4E 05 F1 | 	add	fp, #16
162e0     A7 FA 61 FC | 	wrlong	result1, fp
162e4     10 4E 85 F1 | 	sub	fp, #16
162e8                 | LR__1771
162e8     08 4E 05 F1 | 	add	fp, #8
162ec     A7 3A 68 FC | 	wrlong	#29, fp
162f0     08 4E 05 F1 | 	add	fp, #8
162f4     A7 12 02 FB | 	rdlong	arg01, fp
162f8     10 4E 85 F1 | 	sub	fp, #16
162fc     A7 12 62 FC | 	wrlong	arg01, fp
16300     A7 12 02 F6 | 	mov	arg01, fp
16304     58 3E BF FD | 	call	#_push
16308     A7 F0 03 F6 | 	mov	ptra, fp
1630c     B2 00 A0 FD | 	call	#popregs_
16310                 | _do_dpeek_ret
16310     2D 00 64 FD | 	ret
16314                 | 
16314                 | ' 
16314                 | ' 
16314                 | ' sub do_lpeek
16314                 | _do_lpeek
16314     00 4A 05 F6 | 	mov	COUNT_, #0
16318     A8 00 A0 FD | 	call	#pushregs_
1631c     14 F0 07 F1 | 	add	ptra, #20
16320     A4 3D BF FD | 	call	#_pop
16324     A7 FA 61 FC | 	wrlong	result1, fp
16328     04 4E 05 F1 | 	add	fp, #4
1632c     A7 FC 61 FC | 	wrlong	result2, fp
16330     04 4E 05 F1 | 	add	fp, #4
16334     A7 FE 61 FC | 	wrlong	result3, fp
16338     08 4E 85 F1 | 	sub	fp, #8
1633c     A7 12 02 F6 | 	mov	arg01, fp
16340     D8 C6 BF FD | 	call	#_converttoint
16344     0C 4E 05 F1 | 	add	fp, #12
16348     A7 FA 61 FC | 	wrlong	result1, fp
1634c                 | ' t1=pop()
1634c                 | ' a=converttoint(t1)
1634c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1634c     0C 4E 85 F1 | 	sub	fp, #12
16350     00 04 00 FF 
16354     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16358     1C 00 90 3D |  if_ae	jmp	#LR__1780
1635c     0C 4E 05 F1 | 	add	fp, #12
16360     A7 12 02 FB | 	rdlong	arg01, fp
16364     09 FB 01 FB | 	rdlong	result1, arg01
16368     04 4E 05 F1 | 	add	fp, #4
1636c     A7 FA 61 FC | 	wrlong	result1, fp
16370     10 4E 85 F1 | 	sub	fp, #16
16374     1C 00 90 FD | 	jmp	#LR__1781
16378                 | LR__1780
16378     0C 4E 05 F1 | 	add	fp, #12
1637c     A7 12 02 FB | 	rdlong	arg01, fp
16380     0C 4E 85 F1 | 	sub	fp, #12
16384     64 2A B0 FD | 	call	#_pslpeek
16388     10 4E 05 F1 | 	add	fp, #16
1638c     A7 FA 61 FC | 	wrlong	result1, fp
16390     10 4E 85 F1 | 	sub	fp, #16
16394                 | LR__1781
16394     08 4E 05 F1 | 	add	fp, #8
16398     A7 3A 68 FC | 	wrlong	#29, fp
1639c     08 4E 05 F1 | 	add	fp, #8
163a0     A7 12 02 FB | 	rdlong	arg01, fp
163a4     10 4E 85 F1 | 	sub	fp, #16
163a8     A7 12 62 FC | 	wrlong	arg01, fp
163ac     A7 12 02 F6 | 	mov	arg01, fp
163b0     AC 3D BF FD | 	call	#_push
163b4     A7 F0 03 F6 | 	mov	ptra, fp
163b8     B2 00 A0 FD | 	call	#popregs_
163bc                 | _do_lpeek_ret
163bc     2D 00 64 FD | 	ret
163c0                 | 
163c0                 | ' 
163c0                 | ' sub do_fre
163c0                 | _do_fre
163c0     01 4A 05 F6 | 	mov	COUNT_, #1
163c4     A8 00 A0 FD | 	call	#pushregs_
163c8     0C F0 07 F1 | 	add	ptra, #12
163cc     7B 00 00 FF 
163d0     5C E4 05 F1 | 	add	objptr, ##63068
163d4     F2 12 02 FB | 	rdlong	arg01, objptr
163d8     18 00 00 FF 
163dc     1C E4 85 F1 | 	sub	objptr, ##12316
163e0     F2 1E 02 FB | 	rdlong	local01, objptr
163e4     0F 13 82 F1 | 	sub	arg01, local01
163e8     18 00 00 FF 
163ec     B4 E4 05 F1 | 	add	objptr, ##12468
163f0     F2 12 62 FC | 	wrlong	arg01, objptr
163f4     08 4E 05 F1 | 	add	fp, #8
163f8     A7 3A 68 FC | 	wrlong	#29, fp
163fc     08 4E 85 F1 | 	sub	fp, #8
16400     F2 1E 02 FB | 	rdlong	local01, objptr
16404     7B 00 00 FF 
16408     F4 E4 85 F1 | 	sub	objptr, ##63220
1640c     A7 1E 62 FC | 	wrlong	local01, fp
16410     A7 12 02 F6 | 	mov	arg01, fp
16414     48 3D BF FD | 	call	#_push
16418     A7 F0 03 F6 | 	mov	ptra, fp
1641c     B2 00 A0 FD | 	call	#popregs_
16420                 | _do_fre_ret
16420     2D 00 64 FD | 	ret
16424                 | 
16424                 | ' 
16424                 | ' sub do_adr
16424                 | _do_adr
16424                 | _do_adr_ret
16424     2D 00 64 FD | 	ret
16428                 | 
16428                 | ' 
16428                 | ' sub do_getnotevalue
16428                 | _do_getnotevalue
16428     01 4A 05 F6 | 	mov	COUNT_, #1
1642c     A8 00 A0 FD | 	call	#pushregs_
16430     1C F0 07 F1 | 	add	ptra, #28
16434     90 3C BF FD | 	call	#_pop
16438     FF 14 02 F6 | 	mov	arg02, result3
1643c     10 4E 05 F1 | 	add	fp, #16
16440     A7 FA 61 FC | 	wrlong	result1, fp
16444     04 4E 05 F1 | 	add	fp, #4
16448     A7 FC 61 FC | 	wrlong	result2, fp
1644c     04 4E 05 F1 | 	add	fp, #4
16450     A7 14 62 FC | 	wrlong	arg02, fp
16454     08 4E 85 F1 | 	sub	fp, #8
16458     A7 12 02 F6 | 	mov	arg01, fp
1645c     10 4E 85 F1 | 	sub	fp, #16
16460     B8 C5 BF FD | 	call	#_converttoint
16464     FD 14 52 F6 | 	abs	arg02, result1 wc
16468     0C 14 16 FD | 	qdiv	arg02, #12
1646c     0C 4E 05 F1 | 	add	fp, #12
16470     A7 FA 61 FC | 	wrlong	result1, fp
16474     34 00 00 FF 
16478     CC E4 05 F1 | 	add	objptr, ##26828
1647c     08 4E 85 F1 | 	sub	fp, #8
16480     19 14 62 FD | 	getqy	arg02
16484     0A 15 82 F6 | 	negc	arg02, arg02
16488     02 14 66 F0 | 	shl	arg02, #2
1648c     F2 14 02 F1 | 	add	arg02, objptr
16490     0A 15 02 FB | 	rdlong	arg02, arg02
16494     A7 14 62 FC | 	wrlong	arg02, fp
16498     08 4E 05 F1 | 	add	fp, #8
1649c     A7 14 02 FB | 	rdlong	arg02, fp
164a0     0A 15 52 F6 | 	abs	arg02, arg02 wc
164a4     0C 14 16 FD | 	qdiv	arg02, #12
164a8     0C 4E 85 F1 | 	sub	fp, #12
164ac     34 00 00 FF 
164b0     CC E4 85 F1 | 	sub	objptr, ##26828
164b4     18 14 62 FD | 	getqx	arg02
164b8     0A 13 82 F6 | 	negc	arg01, arg02
164bc     09 13 52 F6 | 	abs	arg01, arg01 wc
164c0     1F 1E C6 C9 |  if_b	decod	local01, #31
164c4     00 1E 06 36 |  if_ae	mov	local01, #0
164c8     A4 85 B0 FD | 	call	#__system___float_fromuns
164cc     0F FB 61 F5 | 	xor	result1, local01
164d0     08 4E 05 F1 | 	add	fp, #8
164d4     A7 FA 61 FC | 	wrlong	result1, fp
164d8     FD 14 02 F6 | 	mov	arg02, result1
164dc     08 4E 85 F1 | 	sub	fp, #8
164e0     1E 12 C6 F9 | 	decod	arg01, #30
164e4     70 98 B0 FD | 	call	#__system____builtin_powf
164e8     FD 12 02 F6 | 	mov	arg01, result1
164ec     04 4E 05 F1 | 	add	fp, #4
164f0     A7 14 02 FB | 	rdlong	arg02, fp
164f4     04 4E 85 F1 | 	sub	fp, #4
164f8     78 89 B0 FD | 	call	#__system___float_mul
164fc     A7 FA 61 FC | 	wrlong	result1, fp
16500     10 4E 05 F1 | 	add	fp, #16
16504     A7 FA 61 FC | 	wrlong	result1, fp
16508     08 4E 05 F1 | 	add	fp, #8
1650c     A7 3C 68 FC | 	wrlong	#30, fp
16510     08 4E 85 F1 | 	sub	fp, #8
16514     A7 12 02 F6 | 	mov	arg01, fp
16518     10 4E 85 F1 | 	sub	fp, #16
1651c     40 3C BF FD | 	call	#_push
16520     A7 F0 03 F6 | 	mov	ptra, fp
16524     B2 00 A0 FD | 	call	#popregs_
16528                 | _do_getnotevalue_ret
16528     2D 00 64 FD | 	ret
1652c                 | 
1652c                 | ' 
1652c                 | ' 
1652c                 | ' sub do_waitms
1652c                 | _do_waitms
1652c     01 4A 05 F6 | 	mov	COUNT_, #1
16530     A8 00 A0 FD | 	call	#pushregs_
16534     18 F0 07 F1 | 	add	ptra, #24
16538     8C 3B BF FD | 	call	#_pop
1653c     A7 FA 61 FC | 	wrlong	result1, fp
16540     04 4E 05 F1 | 	add	fp, #4
16544     A7 FC 61 FC | 	wrlong	result2, fp
16548     04 4E 05 F1 | 	add	fp, #4
1654c     A7 FE 61 FC | 	wrlong	result3, fp
16550                 | ' 
16550                 | ' t1=pop() 'value
16550                 | ' 
16550                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
16550     08 4E 85 F1 | 	sub	fp, #8
16554     1C FE 0D F2 | 	cmp	result3, #28 wz
16558     08 4E 05 51 |  if_ne	add	fp, #8
1655c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
16560     08 4E 85 51 |  if_ne	sub	fp, #8
16564     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
16568     A7 12 02 AB |  if_e	rdlong	arg01, fp
1656c     0C 4E 05 A1 |  if_e	add	fp, #12
16570     A7 12 62 AC |  if_e	wrlong	arg01, fp
16574     0C 4E 85 A1 |  if_e	sub	fp, #12
16578     14 00 90 AD |  if_e	jmp	#LR__1790
1657c     A7 12 02 F6 | 	mov	arg01, fp
16580     98 C4 BF FD | 	call	#_converttoint
16584     0C 4E 05 F1 | 	add	fp, #12
16588     A7 FA 61 FC | 	wrlong	result1, fp
1658c     0C 4E 85 F1 | 	sub	fp, #12
16590                 | LR__1790
16590                 | ' if t<0 then return
16590     0C 4E 05 F1 | 	add	fp, #12
16594     A7 12 02 FB | 	rdlong	arg01, fp
16598     0C 4E 85 F1 | 	sub	fp, #12
1659c     00 12 56 F2 | 	cmps	arg01, #0 wc
165a0     B8 00 90 CD |  if_b	jmp	#LR__1795
165a4                 | ' if t < 5000 then 
165a4     0C 4E 05 F1 | 	add	fp, #12
165a8     A7 12 02 FB | 	rdlong	arg01, fp
165ac     0C 4E 85 F1 | 	sub	fp, #12
165b0     09 00 00 FF 
165b4     88 13 56 F2 | 	cmps	arg01, ##5000 wc
165b8     14 00 90 3D |  if_ae	jmp	#LR__1791
165bc     0C 4E 05 F1 | 	add	fp, #12
165c0     A7 12 02 FB | 	rdlong	arg01, fp
165c4     0C 4E 85 F1 | 	sub	fp, #12
165c8     20 60 B0 FD | 	call	#__system___waitms
165cc     8C 00 90 FD | 	jmp	#LR__1794
165d0                 | LR__1791
165d0     10 4E 05 F1 | 	add	fp, #16
165d4     A7 02 68 FC | 	wrlong	#1, fp
165d8     04 4E 85 F1 | 	sub	fp, #4
165dc     A7 12 02 FB | 	rdlong	arg01, fp
165e0     09 13 52 F6 | 	abs	arg01, arg01 wc
165e4     09 00 00 FF 
165e8     88 13 16 FD | 	qdiv	arg01, ##5000
165ec                 | '   for i=1 to t/5000
165ec     0C 4E 85 F1 | 	sub	fp, #12
165f0     18 1E 62 FD | 	getqx	local01
165f4     0F 1F 82 F6 | 	negc	local01, local01
165f8     01 1E 06 F1 | 	add	local01, #1
165fc                 | LR__1792
165fc     10 4E 05 F1 | 	add	fp, #16
16600     A7 12 02 FB | 	rdlong	arg01, fp
16604     10 4E 85 F1 | 	sub	fp, #16
16608     0F 13 52 F2 | 	cmps	arg01, local01 wc
1660c     28 00 90 3D |  if_ae	jmp	#LR__1793
16610     0C 4E 05 F1 | 	add	fp, #12
16614     A7 12 02 FB | 	rdlong	arg01, fp
16618     0C 4E 85 F1 | 	sub	fp, #12
1661c     CC 5F B0 FD | 	call	#__system___waitms
16620     10 4E 05 F1 | 	add	fp, #16
16624     A7 12 02 FB | 	rdlong	arg01, fp
16628     01 12 06 F1 | 	add	arg01, #1
1662c     A7 12 62 FC | 	wrlong	arg01, fp
16630     10 4E 85 F1 | 	sub	fp, #16
16634     C4 FF 9F FD | 	jmp	#LR__1792
16638                 | LR__1793
16638     0C 4E 05 F1 | 	add	fp, #12
1663c     A7 1E 02 FB | 	rdlong	local01, fp
16640     0F 1F 52 F6 | 	abs	local01, local01 wc
16644     09 00 00 FF 
16648     88 1F 16 FD | 	qdiv	local01, ##5000
1664c     0C 4E 85 F1 | 	sub	fp, #12
16650     19 1E 62 FD | 	getqy	local01
16654     0F 13 82 F6 | 	negc	arg01, local01
16658     90 5F B0 FD | 	call	#__system___waitms
1665c                 | LR__1794
1665c                 | LR__1795
1665c     A7 F0 03 F6 | 	mov	ptra, fp
16660     B2 00 A0 FD | 	call	#popregs_
16664                 | _do_waitms_ret
16664     2D 00 64 FD | 	ret
16668                 | 
16668                 | ' 
16668                 | ' sub do_waitvbl
16668                 | _do_waitvbl
16668     01 12 06 F6 | 	mov	arg01, #1
1666c     20 48 B0 FD | 	call	#_hg010b_spin2_waitvbl
16670                 | _do_waitvbl_ret
16670     2D 00 64 FD | 	ret
16674                 | 
16674                 | ' 
16674                 | ' sub do_waitclock
16674                 | _do_waitclock
16674     7B 00 00 FF 
16678     58 E4 05 F1 | 	add	objptr, ##63064
1667c     F2 00 02 FB | 	rdlong	_var01, objptr
16680                 | ' c=hkcnt
16680                 | ' do: loop until hkcnt<>c
16680                 | LR__1800
16680     F2 02 02 FB | 	rdlong	_var02, objptr
16684     00 03 0A F2 | 	cmp	_var02, _var01 wz
16688     F4 FF 9F AD |  if_e	jmp	#LR__1800
1668c     7B 00 00 FF 
16690     58 E4 85 F1 | 	sub	objptr, ##63064
16694                 | _do_waitclock_ret
16694     2D 00 64 FD | 	ret
16698                 | 
16698                 | ' 
16698                 | ' sub do_dir
16698                 | _do_dir
16698     03 4A 05 F6 | 	mov	COUNT_, #3
1669c     A8 00 A0 FD | 	call	#pushregs_
166a0     5F 01 00 FF 
166a4     67 13 06 F6 | 	mov	arg01, ##@LR__4951
166a8     D8 62 B0 FD | 	call	#__system___chdir
166ac                 | ' chdir("/sd/bas")       ' set working directory
166ac                 | ' print "Working directory: "; currentdir$ 
166ac     00 12 06 F6 | 	mov	arg01, #0
166b0     D4 B5 B0 FD | 	call	#__system___getiolock_0474
166b4     FD 12 02 F6 | 	mov	arg01, result1
166b8     3C 5C B0 FD | 	call	#__system___lockmem
166bc     5F 01 00 FF 
166c0     6F 15 06 F6 | 	mov	arg02, ##@LR__4952
166c4     00 12 06 F6 | 	mov	arg01, #0
166c8     00 16 06 F6 | 	mov	arg03, #0
166cc     2C 69 B0 FD | 	call	#__system___basic_print_string
166d0     72 00 00 FF 
166d4     78 E4 05 F1 | 	add	objptr, ##58488
166d8     F2 14 02 FB | 	rdlong	arg02, objptr
166dc     72 00 00 FF 
166e0     78 E4 85 F1 | 	sub	objptr, ##58488
166e4     00 12 06 F6 | 	mov	arg01, #0
166e8     00 16 06 F6 | 	mov	arg03, #0
166ec     0C 69 B0 FD | 	call	#__system___basic_print_string
166f0     00 12 06 F6 | 	mov	arg01, #0
166f4     0A 14 06 F6 | 	mov	arg02, #10
166f8     00 16 06 F6 | 	mov	arg03, #0
166fc     A4 68 B0 FD | 	call	#__system___basic_print_char
16700     00 12 06 F6 | 	mov	arg01, #0
16704     80 B5 B0 FD | 	call	#__system___getiolock_0474
16708     FD 00 68 FC | 	wrlong	#0, result1
1670c     5F 01 00 FF 
16710     83 13 06 F6 | 	mov	arg01, ##@LR__4953
16714     10 14 06 F6 | 	mov	arg02, #16
16718     A4 B6 B0 FD | 	call	#__system___basic_dir
1671c     FD 1E 02 F6 | 	mov	local01, result1
16720                 | ' 
16720                 | ' filename=dir$("*", fbDirectory)
16720                 | ' while filename <> "" and filename <> nil
16720                 | LR__1810
16720     00 20 06 F6 | 	mov	local02, #0
16724     5F 01 00 FF 
16728     85 15 06 F6 | 	mov	arg02, ##@LR__4954
1672c     0F 13 02 F6 | 	mov	arg01, local01
16730     EC 5B B0 FD | 	call	#__system___string_cmp
16734     00 FA 0D F2 | 	cmp	result1, #0 wz
16738     00 20 26 56 |  if_ne	not	local02, #0
1673c     00 22 06 F6 | 	mov	local03, #0
16740     0F 13 02 F6 | 	mov	arg01, local01
16744     00 14 06 F6 | 	mov	arg02, #0
16748     D4 5B B0 FD | 	call	#__system___string_cmp
1674c     00 FA 0D F2 | 	cmp	result1, #0 wz
16750     00 22 26 56 |  if_ne	not	local03, #0
16754     11 21 CA F7 | 	test	local02, local03 wz
16758     64 00 90 AD |  if_e	jmp	#LR__1811
1675c                 | '   print "[dir] ";filename
1675c     00 12 06 F6 | 	mov	arg01, #0
16760     24 B5 B0 FD | 	call	#__system___getiolock_0474
16764     FD 12 02 F6 | 	mov	arg01, result1
16768     8C 5B B0 FD | 	call	#__system___lockmem
1676c     5F 01 00 FF 
16770     86 15 06 F6 | 	mov	arg02, ##@LR__4955
16774     00 12 06 F6 | 	mov	arg01, #0
16778     00 16 06 F6 | 	mov	arg03, #0
1677c     7C 68 B0 FD | 	call	#__system___basic_print_string
16780     00 12 06 F6 | 	mov	arg01, #0
16784     0F 15 02 F6 | 	mov	arg02, local01
16788     00 16 06 F6 | 	mov	arg03, #0
1678c     6C 68 B0 FD | 	call	#__system___basic_print_string
16790     00 12 06 F6 | 	mov	arg01, #0
16794     0A 14 06 F6 | 	mov	arg02, #10
16798     00 16 06 F6 | 	mov	arg03, #0
1679c     04 68 B0 FD | 	call	#__system___basic_print_char
167a0     00 12 06 F6 | 	mov	arg01, #0
167a4     E0 B4 B0 FD | 	call	#__system___getiolock_0474
167a8     FD 00 68 FC | 	wrlong	#0, result1
167ac     00 12 06 F6 | 	mov	arg01, #0
167b0     00 14 06 F6 | 	mov	arg02, #0
167b4     08 B6 B0 FD | 	call	#__system___basic_dir
167b8     FD 1E 02 F6 | 	mov	local01, result1
167bc     60 FF 9F FD | 	jmp	#LR__1810
167c0                 | LR__1811
167c0     5F 01 00 FF 
167c4     8D 13 06 F6 | 	mov	arg01, ##@LR__4956
167c8     21 14 06 F6 | 	mov	arg02, #33
167cc     F0 B5 B0 FD | 	call	#__system___basic_dir
167d0     FD 1E 02 F6 | 	mov	local01, result1
167d4                 | ' 
167d4                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
167d4                 | ' do while filename <> "" and filename <> nil
167d4                 | LR__1812
167d4     00 20 06 F6 | 	mov	local02, #0
167d8     5F 01 00 FF 
167dc     8F 15 06 F6 | 	mov	arg02, ##@LR__4957
167e0     0F 13 02 F6 | 	mov	arg01, local01
167e4     38 5B B0 FD | 	call	#__system___string_cmp
167e8     00 FA 0D F2 | 	cmp	result1, #0 wz
167ec     00 20 26 56 |  if_ne	not	local02, #0
167f0     00 22 06 F6 | 	mov	local03, #0
167f4     0F 13 02 F6 | 	mov	arg01, local01
167f8     00 14 06 F6 | 	mov	arg02, #0
167fc     20 5B B0 FD | 	call	#__system___string_cmp
16800     00 FA 0D F2 | 	cmp	result1, #0 wz
16804     00 22 26 56 |  if_ne	not	local03, #0
16808     11 21 CA F7 | 	test	local02, local03 wz
1680c     4C 01 90 AD |  if_e	jmp	#LR__1816
16810                 | '   print filename
16810     00 12 06 F6 | 	mov	arg01, #0
16814     70 B4 B0 FD | 	call	#__system___getiolock_0474
16818     FD 12 02 F6 | 	mov	arg01, result1
1681c     D8 5A B0 FD | 	call	#__system___lockmem
16820     00 12 06 F6 | 	mov	arg01, #0
16824     0F 15 02 F6 | 	mov	arg02, local01
16828     00 16 06 F6 | 	mov	arg03, #0
1682c     CC 67 B0 FD | 	call	#__system___basic_print_string
16830     00 12 06 F6 | 	mov	arg01, #0
16834     0A 14 06 F6 | 	mov	arg02, #10
16838     00 16 06 F6 | 	mov	arg03, #0
1683c     64 67 B0 FD | 	call	#__system___basic_print_char
16840     00 12 06 F6 | 	mov	arg01, #0
16844     40 B4 B0 FD | 	call	#__system___getiolock_0474
16848     FD 00 68 FC | 	wrlong	#0, result1
1684c     00 12 06 F6 | 	mov	arg01, #0
16850     00 14 06 F6 | 	mov	arg02, #0
16854     68 B5 B0 FD | 	call	#__system___basic_dir
16858     FD 1E 02 F6 | 	mov	local01, result1
1685c                 | '   filename = dir$()      ' continue scan
1685c                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
1685c                 | ' return cursor_y
1685c     3A E4 05 F1 | 	add	objptr, #58
16860     F2 FA C1 FA | 	rdbyte	result1, objptr
16864     3A E4 85 F1 | 	sub	objptr, #58
16868     22 FA 0D F2 | 	cmp	result1, #34 wz
1686c     64 FF 9F 5D |  if_ne	jmp	#LR__1812
16870                 | '     print "-----more, press any key";
16870     00 12 06 F6 | 	mov	arg01, #0
16874     10 B4 B0 FD | 	call	#__system___getiolock_0474
16878     FD 12 02 F6 | 	mov	arg01, result1
1687c     78 5A B0 FD | 	call	#__system___lockmem
16880     5F 01 00 FF 
16884     90 15 06 F6 | 	mov	arg02, ##@LR__4958
16888     00 12 06 F6 | 	mov	arg01, #0
1688c     00 16 06 F6 | 	mov	arg03, #0
16890     68 67 B0 FD | 	call	#__system___basic_print_string
16894     00 12 06 F6 | 	mov	arg01, #0
16898     EC B3 B0 FD | 	call	#__system___getiolock_0474
1689c     FD 00 68 FC | 	wrlong	#0, result1
168a0                 | '     do 
168a0                 | LR__1813
168a0     7C 52 B0 FD | 	call	#_usbnew_spin2_get_key
168a4     00 FA 0D F2 | 	cmp	result1, #0 wz
168a8     F4 FF 9F 5D |  if_ne	jmp	#LR__1813
168ac                 | '     do
168ac                 | LR__1814
168ac     70 52 B0 FD | 	call	#_usbnew_spin2_get_key
168b0     00 FA 0D F2 | 	cmp	result1, #0 wz
168b4     F4 FF 9F AD |  if_e	jmp	#LR__1814
168b8                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
168b8     79 00 00 FF 
168bc     C4 E5 05 F1 | 	add	objptr, ##62404
168c0     F2 20 02 FB | 	rdlong	local02, objptr
168c4     79 00 00 FF 
168c8     C4 E5 85 F1 | 	sub	objptr, ##62404
168cc     01 20 0E F2 | 	cmp	local02, #1 wz
168d0     3C 00 90 5D |  if_ne	jmp	#LR__1815
168d4     7B 00 00 FF 
168d8     68 E4 05 F1 | 	add	objptr, ##63080
168dc     F2 14 02 FB | 	rdlong	arg02, objptr
168e0     04 E4 85 F1 | 	sub	objptr, #4
168e4     F2 1A 02 FB | 	rdlong	arg05, objptr
168e8     07 12 06 F6 | 	mov	arg01, #7
168ec     56 00 00 FF 
168f0     44 16 06 F6 | 	mov	arg03, ##44100
168f4     0E 18 C6 F9 | 	decod	arg04, #14
168f8     01 1C 66 F6 | 	neg	arg06, #1
168fc     6F 00 00 FF 
16900     A4 E5 85 F1 | 	sub	objptr, ##57252
16904     A0 55 B0 FD | 	call	#_audio096_spin2_play
16908     0B 00 00 FF 
1690c     C0 E4 85 F1 | 	sub	objptr, ##5824
16910                 | LR__1815
16910     00 12 06 F6 | 	mov	arg01, #0
16914     23 14 06 F6 | 	mov	arg02, #35
16918     3C 45 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1691c                 | '     position 0,35: print "                             ";: position 4,35  
1691c     00 12 06 F6 | 	mov	arg01, #0
16920     64 B3 B0 FD | 	call	#__system___getiolock_0474
16924     FD 12 02 F6 | 	mov	arg01, result1
16928     CC 59 B0 FD | 	call	#__system___lockmem
1692c     5F 01 00 FF 
16930     A9 15 06 F6 | 	mov	arg02, ##@LR__4959
16934     00 12 06 F6 | 	mov	arg01, #0
16938     00 16 06 F6 | 	mov	arg03, #0
1693c     BC 66 B0 FD | 	call	#__system___basic_print_string
16940     00 12 06 F6 | 	mov	arg01, #0
16944     40 B3 B0 FD | 	call	#__system___getiolock_0474
16948     FD 00 68 FC | 	wrlong	#0, result1
1694c     04 12 06 F6 | 	mov	arg01, #4
16950     23 14 06 F6 | 	mov	arg02, #35
16954     00 45 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16958     78 FE 9F FD | 	jmp	#LR__1812
1695c                 | LR__1816
1695c     A7 F0 03 F6 | 	mov	ptra, fp
16960     B2 00 A0 FD | 	call	#popregs_
16964                 | _do_dir_ret
16964     2D 00 64 FD | 	ret
16968                 | 
16968                 | ' 
16968                 | ' sub do_if
16968                 | _do_if
16968     05 4A 05 F6 | 	mov	COUNT_, #5
1696c     A8 00 A0 FD | 	call	#pushregs_
16970     54 37 BF FD | 	call	#_pop
16974     FD 1E 0A F6 | 	mov	local01, result1 wz
16978     FE 20 02 F6 | 	mov	local02, result2
1697c     FF 22 02 F6 | 	mov	local03, result3
16980                 | ' t1=pop()
16980                 | ' ' if uresult=0, jump over else
16980                 | ' if t1.result.uresult = 0 then 
16980     BC 00 90 5D |  if_ne	jmp	#LR__1822
16984                 | '   for i=lineptr_e to lineptr-1
16984     6A 00 00 FF 
16988     64 E4 05 F1 | 	add	objptr, ##54372
1698c     F2 24 02 FB | 	rdlong	local04, objptr
16990     04 E4 85 F1 | 	sub	objptr, #4
16994     F2 26 02 FB | 	rdlong	local05, objptr
16998     6A 00 00 FF 
1699c     60 E4 85 F1 | 	sub	objptr, ##54368
169a0                 | LR__1820
169a0     13 25 52 F2 | 	cmps	local04, local05 wc
169a4     78 00 90 3D |  if_ae	jmp	#LR__1821
169a8     12 FF 01 F6 | 	mov	result3, local04
169ac     01 FE 65 F0 | 	shl	result3, #1
169b0     12 FF 01 F1 | 	add	result3, local04
169b4     02 FE 65 F0 | 	shl	result3, #2
169b8     67 00 00 FF 
169bc     60 E4 05 F1 | 	add	objptr, ##52832
169c0     F2 FE 01 F1 | 	add	result3, objptr
169c4     FF 1E 02 FB | 	rdlong	local01, result3
169c8     04 FE 05 F1 | 	add	result3, #4
169cc     FF FC 01 FB | 	rdlong	result2, result3
169d0     12 FF 01 F6 | 	mov	result3, local04
169d4     01 FE 65 F0 | 	shl	result3, #1
169d8     12 FF 01 F1 | 	add	result3, local04
169dc     02 FE 65 F0 | 	shl	result3, #2
169e0     F2 FE 01 F1 | 	add	result3, objptr
169e4     08 FE 05 F1 | 	add	result3, #8
169e8     FF FE 01 FB | 	rdlong	result3, result3
169ec     FE 20 02 F6 | 	mov	local02, result2
169f0     FF 22 02 F6 | 	mov	local03, result3
169f4                 | '     t1=compiledline(i)
169f4                 | '     if t1.result_type=token_else then lineptr_e=i : return
169f4     5A 22 0E F2 | 	cmp	local03, #90 wz
169f8     67 00 00 FF 
169fc     60 E4 85 F1 | 	sub	objptr, ##52832
16a00     6A 00 00 AF 
16a04     64 E4 05 A1 |  if_e	add	objptr, ##54372
16a08     F2 24 62 AC |  if_e	wrlong	local04, objptr
16a0c     6A 00 00 AF 
16a10     64 E4 85 A1 |  if_e	sub	objptr, ##54372
16a14     28 00 90 AD |  if_e	jmp	#LR__1823
16a18     01 24 06 F1 | 	add	local04, #1
16a1c     80 FF 9F FD | 	jmp	#LR__1820
16a20                 | LR__1821
16a20     6A 00 00 FF 
16a24     60 E4 05 F1 | 	add	objptr, ##54368
16a28     F2 26 02 FB | 	rdlong	local05, objptr
16a2c     01 26 86 F1 | 	sub	local05, #1
16a30     04 E4 05 F1 | 	add	objptr, #4
16a34     F2 26 62 FC | 	wrlong	local05, objptr
16a38     6A 00 00 FF 
16a3c     64 E4 85 F1 | 	sub	objptr, ##54372
16a40                 | LR__1822
16a40                 | LR__1823
16a40     A7 F0 03 F6 | 	mov	ptra, fp
16a44     B2 00 A0 FD | 	call	#popregs_
16a48                 | _do_if_ret
16a48     2D 00 64 FD | 	ret
16a4c                 | 
16a4c                 | ' 
16a4c                 | ' sub do_else
16a4c                 | _do_else
16a4c     6A 00 00 FF 
16a50     60 E4 05 F1 | 	add	objptr, ##54368
16a54     F2 00 02 FB | 	rdlong	_var01, objptr
16a58     01 00 86 F1 | 	sub	_var01, #1
16a5c     04 E4 05 F1 | 	add	objptr, #4
16a60     F2 00 62 FC | 	wrlong	_var01, objptr
16a64     6A 00 00 FF 
16a68     64 E4 85 F1 | 	sub	objptr, ##54372
16a6c                 | _do_else_ret
16a6c     2D 00 64 FD | 	ret
16a70                 | 
16a70                 | ' 
16a70                 | ' sub do_rad
16a70                 | _do_rad
16a70     7B 00 00 FF 
16a74     6C E4 05 F1 | 	add	objptr, ##63084
16a78     00 C0 9F FF 
16a7c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16a80     04 E4 05 F1 | 	add	objptr, #4
16a84     00 C0 9F FF 
16a88     F2 00 68 FC | 	wrlong	##1065353216, objptr
16a8c     7B 00 00 FF 
16a90     70 E4 85 F1 | 	sub	objptr, ##63088
16a94                 | _do_rad_ret
16a94     2D 00 64 FD | 	ret
16a98                 | 
16a98                 | ' 
16a98                 | ' sub do_deg
16a98                 | _do_deg
16a98     7B 00 00 FF 
16a9c     6C E4 05 F1 | 	add	objptr, ##63084
16aa0     7D 47 9E FF 
16aa4     F2 6A 68 FC | 	wrlong	##1016003125, objptr
16aa8     04 E4 05 F1 | 	add	objptr, #4
16aac     97 32 A1 FF 
16ab0     F2 C2 69 FC | 	wrlong	##1113927393, objptr
16ab4     7B 00 00 FF 
16ab8     70 E4 85 F1 | 	sub	objptr, ##63088
16abc                 | _do_deg_ret
16abc     2D 00 64 FD | 	ret
16ac0                 | 
16ac0                 | ' 
16ac0                 | ' sub do_int
16ac0                 | _do_int
16ac0     00 4A 05 F6 | 	mov	COUNT_, #0
16ac4     A8 00 A0 FD | 	call	#pushregs_
16ac8     0C F0 07 F1 | 	add	ptra, #12
16acc     F8 35 BF FD | 	call	#_pop
16ad0     A7 FA 61 FC | 	wrlong	result1, fp
16ad4     04 4E 05 F1 | 	add	fp, #4
16ad8     A7 FC 61 FC | 	wrlong	result2, fp
16adc     04 4E 05 F1 | 	add	fp, #4
16ae0     A7 FE 61 FC | 	wrlong	result3, fp
16ae4     08 4E 85 F1 | 	sub	fp, #8
16ae8     A7 12 02 F6 | 	mov	arg01, fp
16aec     2C BF BF FD | 	call	#_converttoint
16af0     A7 FA 61 FC | 	wrlong	result1, fp
16af4     08 4E 05 F1 | 	add	fp, #8
16af8     A7 38 68 FC | 	wrlong	#28, fp
16afc     08 4E 85 F1 | 	sub	fp, #8
16b00     A7 12 02 F6 | 	mov	arg01, fp
16b04     58 36 BF FD | 	call	#_push
16b08     A7 F0 03 F6 | 	mov	ptra, fp
16b0c     B2 00 A0 FD | 	call	#popregs_
16b10                 | _do_int_ret
16b10     2D 00 64 FD | 	ret
16b14                 | 
16b14                 | ' 
16b14                 | ' sub do_nothing
16b14                 | _do_nothing
16b14                 | _do_nothing_ret
16b14     2D 00 64 FD | 	ret
16b18                 | 
16b18                 | ' 
16b18                 | ' sub do_brun
16b18                 | _do_brun
16b18     08 4A 05 F6 | 	mov	COUNT_, #8
16b1c     A8 00 A0 FD | 	call	#pushregs_
16b20     A4 35 BF FD | 	call	#_pop
16b24     FE 1A 02 F6 | 	mov	arg05, result2
16b28     FF 18 02 F6 | 	mov	arg04, result3
16b2c     FD 1E 02 F6 | 	mov	local01, result1
16b30     0D 21 02 F6 | 	mov	local02, arg05
16b34     0C 23 02 F6 | 	mov	local03, arg04
16b38                 | ' 
16b38                 | ' t1=pop() 
16b38                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
16b38     2B 22 0E F2 | 	cmp	local03, #43 wz
16b3c     10 00 90 5D |  if_ne	jmp	#LR__1830
16b40     0F 13 02 F6 | 	mov	arg01, local01
16b44     24 75 BF FD | 	call	#_convertstring
16b48     FD 1E 02 F6 | 	mov	local01, result1
16b4c     1F 22 06 F6 | 	mov	local03, #31
16b50                 | LR__1830
16b50                 | ' if t1.result_type=result_string then
16b50     1F 22 0E F2 | 	cmp	local03, #31 wz
16b54     EC 01 90 5D |  if_ne	jmp	#LR__1834
16b58     0F 25 02 F6 | 	mov	local04, local01
16b5c                 | '   filename=t1.result.sresult
16b5c                 | '   if left$(filename,1)="/" then 
16b5c     12 13 02 F6 | 	mov	arg01, local04
16b60     01 14 06 F6 | 	mov	arg02, #1
16b64     D4 77 B0 FD | 	call	#__system__Left_S
16b68     FD 12 02 F6 | 	mov	arg01, result1
16b6c     5F 01 00 FF 
16b70     C7 15 06 F6 | 	mov	arg02, ##@LR__4960
16b74     A8 57 B0 FD | 	call	#__system___string_cmp
16b78     00 FA 0D F2 | 	cmp	result1, #0 wz
16b7c     12 27 02 A6 |  if_e	mov	local05, local04
16b80     14 00 90 AD |  if_e	jmp	#LR__1831
16b84     5F 01 00 FF 
16b88     C9 13 06 F6 | 	mov	arg01, ##@LR__4961
16b8c     12 15 02 F6 | 	mov	arg02, local04
16b90     C0 57 B0 FD | 	call	#__system___string_concat
16b94     FD 26 02 F6 | 	mov	local05, result1
16b98                 | LR__1831
16b98                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
16b98                 | '   open fullfilename for input as #9
16b98     09 12 06 F6 | 	mov	arg01, #9
16b9c     13 15 02 F6 | 	mov	arg02, local05
16ba0     00 16 06 F6 | 	mov	arg03, #0
16ba4     50 63 B0 FD | 	call	#__system___basic_open_string
16ba8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
16bac     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
16bb0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
16bb4     FD 28 0A F6 | 	mov	local06, result1 wz
16bb8                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
16bb8     8C 00 90 AD |  if_e	jmp	#LR__1832
16bbc     00 12 06 F6 | 	mov	arg01, #0
16bc0     C4 B0 B0 FD | 	call	#__system___getiolock_0474
16bc4     FD 12 02 F6 | 	mov	arg01, result1
16bc8     2C 57 B0 FD | 	call	#__system___lockmem
16bcc     5F 01 00 FF 
16bd0     D2 15 06 F6 | 	mov	arg02, ##@LR__4962
16bd4     00 12 06 F6 | 	mov	arg01, #0
16bd8     00 16 06 F6 | 	mov	arg03, #0
16bdc     1C 64 B0 FD | 	call	#__system___basic_print_string
16be0     00 12 06 F6 | 	mov	arg01, #0
16be4     14 15 02 F6 | 	mov	arg02, local06
16be8     00 16 06 F6 | 	mov	arg03, #0
16bec     0A 18 06 F6 | 	mov	arg04, #10
16bf0     4C 64 B0 FD | 	call	#__system___basic_print_integer
16bf4     5F 01 00 FF 
16bf8     E0 15 06 F6 | 	mov	arg02, ##@LR__4963
16bfc     00 12 06 F6 | 	mov	arg01, #0
16c00     00 16 06 F6 | 	mov	arg03, #0
16c04     F4 63 B0 FD | 	call	#__system___basic_print_string
16c08     14 13 02 F6 | 	mov	arg01, local06
16c0c     78 7D B0 FD | 	call	#__system___strerror
16c10     FD 14 02 F6 | 	mov	arg02, result1
16c14     00 12 06 F6 | 	mov	arg01, #0
16c18     00 16 06 F6 | 	mov	arg03, #0
16c1c     DC 63 B0 FD | 	call	#__system___basic_print_string
16c20     00 12 06 F6 | 	mov	arg01, #0
16c24     0A 14 06 F6 | 	mov	arg02, #10
16c28     00 16 06 F6 | 	mov	arg03, #0
16c2c     74 63 B0 FD | 	call	#__system___basic_print_char
16c30     00 12 06 F6 | 	mov	arg01, #0
16c34     50 B0 B0 FD | 	call	#__system___getiolock_0474
16c38     FD 00 68 FC | 	wrlong	#0, result1
16c3c     09 12 06 F6 | 	mov	arg01, #9
16c40     78 A6 B0 FD | 	call	#__system__close
16c44     FC 00 90 FD | 	jmp	#LR__1835
16c48                 | LR__1832
16c48     01 2A 06 F6 | 	mov	local07, #1
16c4c     00 2C 06 F6 | 	mov	local08, #0
16c50                 | '   do
16c50                 | LR__1833
16c50                 | '     get #9,pos,block(0),1024,r : pos+=r	
16c50     77 00 00 FF 
16c54     90 E5 05 F1 | 	add	objptr, ##61328
16c58     F2 16 02 F6 | 	mov	arg03, objptr
16c5c     77 00 00 FF 
16c60     90 E5 85 F1 | 	sub	objptr, ##61328
16c64     09 12 06 F6 | 	mov	arg01, #9
16c68     15 15 02 F6 | 	mov	arg02, local07
16c6c     0A 18 C6 F9 | 	decod	arg04, #10
16c70     01 1A 06 F6 | 	mov	arg05, #1
16c74     94 64 B0 FD | 	call	#__system___basic_get
16c78     FD 28 02 F6 | 	mov	local06, result1
16c7c     FD 2A 02 F1 | 	add	local07, result1
16c80     77 00 00 FF 
16c84     90 E5 05 F1 | 	add	objptr, ##61328
16c88     F2 12 02 F6 | 	mov	arg01, objptr
16c8c     16 15 02 F6 | 	mov	arg02, local08
16c90     0A 16 C6 F9 | 	decod	arg03, #10
16c94     6C 00 00 FF 
16c98     D0 E4 85 F1 | 	sub	objptr, ##55504
16c9c     F0 4A B0 FD | 	call	#_psram_spin2_write
16ca0     0B 00 00 FF 
16ca4     C0 E4 85 F1 | 	sub	objptr, ##5824
16ca8     14 2D 02 F1 | 	add	local08, local06
16cac     02 00 00 FF 
16cb0     00 28 0E F2 | 	cmp	local06, ##1024 wz
16cb4     E0 03 00 AF 
16cb8     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
16cbc     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1833
16cc0     56 00 00 FF 
16cc4     E0 E5 05 F1 | 	add	objptr, ##44512
16cc8     F2 12 02 FB | 	rdlong	arg01, objptr
16ccc     03 12 62 FD | 	cogstop	arg01
16cd0     04 E4 05 F1 | 	add	objptr, #4
16cd4     F2 12 02 FB | 	rdlong	arg01, objptr
16cd8     03 12 62 FD | 	cogstop	arg01
16cdc     04 E4 05 F1 | 	add	objptr, #4
16ce0     F2 12 02 FB | 	rdlong	arg01, objptr
16ce4     03 12 62 FD | 	cogstop	arg01
16ce8     22 00 00 FF 
16cec     E0 E5 05 F1 | 	add	objptr, ##17888
16cf0     F2 12 02 FB | 	rdlong	arg01, objptr
16cf4     03 12 62 FD | 	cogstop	arg01
16cf8     18 00 00 FF 
16cfc     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
16d00     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16d04     18 00 00 FF 
16d08     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
16d0c     22 00 00 FF 
16d10     D8 E5 85 F1 | 	sub	objptr, ##17880
16d14     1E 2C 06 F6 | 	mov	local08, #30
16d18     28 E4 61 FD | 	setq	objptr
16d1c     0A 2D F2 FC | 	coginit	local08, arg02 wc
16d20     01 2C 66 C6 |  if_b	neg	local08, #1
16d24     24 00 00 FF 
16d28     0C E5 05 F1 | 	add	objptr, ##18700
16d2c     F2 2C 62 FC | 	wrlong	local08, objptr
16d30     7B 00 00 FF 
16d34     FC E4 85 F1 | 	sub	objptr, ##63228
16d38     00 12 06 F6 | 	mov	arg01, #0
16d3c     01 12 62 FD | 	cogid	arg01
16d40     03 12 62 FD | 	cogstop	arg01
16d44                 | LR__1834
16d44                 | LR__1835
16d44     A7 F0 03 F6 | 	mov	ptra, fp
16d48     B2 00 A0 FD | 	call	#popregs_
16d4c                 | _do_brun_ret
16d4c     2D 00 64 FD | 	ret
16d50                 | 
16d50                 | ' 
16d50                 | ' 
16d50                 | ' sub do_mouse
16d50                 | _do_mouse
16d50     74 33 BF FD | 	call	#_pop
16d54     00 FA 4D F2 | 	cmps	result1, #0 wz
16d58                 | ' t1=pop()
16d58                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
16d58     14 00 90 5D |  if_ne	jmp	#LR__1840
16d5c     10 12 06 F6 | 	mov	arg01, #16
16d60     00 14 06 F6 | 	mov	arg02, #0
16d64     00 16 06 F6 | 	mov	arg03, #0
16d68     DC 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16d6c     10 00 90 FD | 	jmp	#LR__1841
16d70                 | LR__1840
16d70     10 12 06 F6 | 	mov	arg01, #16
16d74     20 14 06 F6 | 	mov	arg02, #32
16d78     20 16 06 F6 | 	mov	arg03, #32
16d7c     C8 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16d80                 | LR__1841
16d80                 | _do_mouse_ret
16d80     2D 00 64 FD | 	ret
16d84                 | 
16d84                 | ' 
16d84                 | ' sub do_cursor
16d84                 | _do_cursor
16d84     40 33 BF FD | 	call	#_pop
16d88     00 FA 4D F2 | 	cmps	result1, #0 wz
16d8c                 | ' t1=pop()
16d8c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
16d8c     14 00 90 5D |  if_ne	jmp	#LR__1850
16d90     11 12 06 F6 | 	mov	arg01, #17
16d94     00 14 06 F6 | 	mov	arg02, #0
16d98     00 16 06 F6 | 	mov	arg03, #0
16d9c     A8 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16da0     10 00 90 FD | 	jmp	#LR__1851
16da4                 | LR__1850
16da4     11 12 06 F6 | 	mov	arg01, #17
16da8     08 14 06 F6 | 	mov	arg02, #8
16dac     10 16 06 F6 | 	mov	arg03, #16
16db0     94 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16db4                 | LR__1851
16db4                 | _do_cursor_ret
16db4     2D 00 64 FD | 	ret
16db8                 | 
16db8                 | ' 
16db8                 | ' 
16db8                 | ' sub do_click
16db8                 | _do_click
16db8     0C 33 BF FD | 	call	#_pop
16dbc     00 FA 4D F2 | 	cmps	result1, #0 wz
16dc0                 | ' t1=pop()
16dc0                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
16dc0     79 00 00 AF 
16dc4     C4 E5 05 A1 |  if_e	add	objptr, ##62404
16dc8     F2 00 68 AC |  if_e	wrlong	#0, objptr
16dcc     79 00 00 FF 
16dd0     C4 E5 C5 F3 | 	sumz	objptr, ##62404
16dd4     F2 02 68 5C |  if_ne	wrlong	#1, objptr
16dd8     79 00 00 5F 
16ddc     C4 E5 85 51 |  if_ne	sub	objptr, ##62404
16de0                 | _do_click_ret
16de0     2D 00 64 FD | 	ret
16de4                 | 
16de4                 | ' 
16de4                 | ' 
16de4                 | ' sub do_beep
16de4                 | _do_beep
16de4     02 4A 05 F6 | 	mov	COUNT_, #2
16de8     A8 00 A0 FD | 	call	#pushregs_
16dec     20 F0 07 F1 | 	add	ptra, #32
16df0     D4 32 BF FD | 	call	#_pop
16df4     FD 1E 02 F6 | 	mov	local01, result1
16df8     FE 1C 02 F6 | 	mov	arg06, result2
16dfc     FF 20 02 F6 | 	mov	local02, result3
16e00     0C 4E 05 F1 | 	add	fp, #12
16e04     A7 1E 62 FC | 	wrlong	local01, fp
16e08     04 4E 05 F1 | 	add	fp, #4
16e0c     A7 1C 62 FC | 	wrlong	arg06, fp
16e10     04 4E 05 F1 | 	add	fp, #4
16e14     A7 20 62 FC | 	wrlong	local02, fp
16e18     14 4E 85 F1 | 	sub	fp, #20
16e1c     A8 32 BF FD | 	call	#_pop
16e20     A7 FA 61 FC | 	wrlong	result1, fp
16e24     04 4E 05 F1 | 	add	fp, #4
16e28     A7 FC 61 FC | 	wrlong	result2, fp
16e2c     04 4E 05 F1 | 	add	fp, #4
16e30     A7 FE 61 FC | 	wrlong	result3, fp
16e34                 | ' 
16e34                 | ' t2=pop()
16e34                 | ' t1=pop()
16e34                 | ' 
16e34                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
16e34     08 4E 85 F1 | 	sub	fp, #8
16e38     1C FE 0D F2 | 	cmp	result3, #28 wz
16e3c     08 4E 05 51 |  if_ne	add	fp, #8
16e40     A7 20 02 5B |  if_ne	rdlong	local02, fp
16e44     08 4E 85 51 |  if_ne	sub	fp, #8
16e48     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
16e4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
16e50     18 4E 05 A1 |  if_e	add	fp, #24
16e54     A7 1E 62 AC |  if_e	wrlong	local01, fp
16e58     18 4E 85 A1 |  if_e	sub	fp, #24
16e5c     14 00 90 AD |  if_e	jmp	#LR__1860
16e60     A7 12 02 F6 | 	mov	arg01, fp
16e64     B4 BB BF FD | 	call	#_converttoint
16e68     18 4E 05 F1 | 	add	fp, #24
16e6c     A7 FA 61 FC | 	wrlong	result1, fp
16e70     18 4E 85 F1 | 	sub	fp, #24
16e74                 | LR__1860
16e74     1C 4E 05 F1 | 	add	fp, #28
16e78     A7 FE 48 FC | 	wrbyte	#127, fp
16e7c     01 4E 05 F1 | 	add	fp, #1
16e80     A7 00 49 FC | 	wrbyte	#128, fp
16e84     01 4E 85 F1 | 	sub	fp, #1
16e88     A7 14 02 F6 | 	mov	arg02, fp
16e8c     04 4E 85 F1 | 	sub	fp, #4
16e90     A7 16 02 FB | 	rdlong	arg03, fp
16e94     18 4E 85 F1 | 	sub	fp, #24
16e98     01 16 66 F0 | 	shl	arg03, #1
16e9c     07 12 06 F6 | 	mov	arg01, #7
16ea0     0E 18 C6 F9 | 	decod	arg04, #14
16ea4     02 1A 06 F6 | 	mov	arg05, #2
16ea8     00 1C 06 F6 | 	mov	arg06, #0
16eac     0B 00 00 FF 
16eb0     C0 E4 05 F1 | 	add	objptr, ##5824
16eb4     8C 50 B0 FD | 	call	#_audio096_spin2_play8
16eb8     0B 00 00 FF 
16ebc     C0 E4 85 F1 | 	sub	objptr, ##5824
16ec0     0C 4E 05 F1 | 	add	fp, #12
16ec4     A7 12 02 F6 | 	mov	arg01, fp
16ec8     0C 4E 85 F1 | 	sub	fp, #12
16ecc     90 32 BF FD | 	call	#_push
16ed0     58 F6 BF FD | 	call	#_do_waitms
16ed4     07 12 06 F6 | 	mov	arg01, #7
16ed8     0B 00 00 FF 
16edc     C0 E4 05 F1 | 	add	objptr, ##5824
16ee0     14 51 B0 FD | 	call	#_audio096_spin2_stop
16ee4     0B 00 00 FF 
16ee8     C0 E4 85 F1 | 	sub	objptr, ##5824
16eec     A7 F0 03 F6 | 	mov	ptra, fp
16ef0     B2 00 A0 FD | 	call	#popregs_
16ef4                 | _do_beep_ret
16ef4     2D 00 64 FD | 	ret
16ef8                 | 
16ef8                 | ' 
16ef8                 | ' sub do_no_command
16ef8                 | _do_no_command
16ef8     17 12 06 F6 | 	mov	arg01, #23
16efc     58 1C B0 FD | 	call	#_printerror
16f00                 | _do_no_command_ret
16f00     2D 00 64 FD | 	ret
16f04                 | 
16f04                 | ' 
16f04                 | ' sub do_negative
16f04                 | _do_negative
16f04     02 4A 05 F6 | 	mov	COUNT_, #2
16f08     A8 00 A0 FD | 	call	#pushregs_
16f0c     0C F0 07 F1 | 	add	ptra, #12
16f10     B4 31 BF FD | 	call	#_pop
16f14     FF 1E 02 F6 | 	mov	local01, result3
16f18     A7 FA 61 FC | 	wrlong	result1, fp
16f1c     04 4E 05 F1 | 	add	fp, #4
16f20     A7 FC 61 FC | 	wrlong	result2, fp
16f24     04 4E 05 F1 | 	add	fp, #4
16f28     A7 1E 62 FC | 	wrlong	local01, fp
16f2c                 | ' t1=pop()
16f2c                 | ' if t1.result_type=result_int then 
16f2c     08 4E 85 F1 | 	sub	fp, #8
16f30     1C 1E 0E F2 | 	cmp	local01, #28 wz
16f34     A7 20 02 AB |  if_e	rdlong	local02, fp
16f38     10 1F 62 A6 |  if_e	neg	local01, local02
16f3c     A7 1E 62 AC |  if_e	wrlong	local01, fp
16f40     5C 00 90 AD |  if_e	jmp	#LR__1872
16f44     08 4E 05 F1 | 	add	fp, #8
16f48     A7 1E 02 FB | 	rdlong	local01, fp
16f4c     08 4E 85 F1 | 	sub	fp, #8
16f50     1D 1E 0E F2 | 	cmp	local01, #29 wz
16f54     1C 00 90 5D |  if_ne	jmp	#LR__1870
16f58     A7 20 02 FB | 	rdlong	local02, fp
16f5c     10 1F 62 F6 | 	neg	local01, local02
16f60     A7 1E 62 FC | 	wrlong	local01, fp
16f64     08 4E 05 F1 | 	add	fp, #8
16f68     A7 38 68 FC | 	wrlong	#28, fp
16f6c     08 4E 85 F1 | 	sub	fp, #8
16f70     2C 00 90 FD | 	jmp	#LR__1871
16f74                 | LR__1870
16f74     08 4E 05 F1 | 	add	fp, #8
16f78     A7 1E 02 FB | 	rdlong	local01, fp
16f7c     08 4E 85 F1 | 	sub	fp, #8
16f80     1E 1E 0E F2 | 	cmp	local01, #30 wz
16f84     A7 FA 01 AB |  if_e	rdlong	result1, fp
16f88     1F FA E5 A4 |  if_e	bitnot	result1, #31
16f8c     A7 FA 61 AC |  if_e	wrlong	result1, fp
16f90     08 4E 05 51 |  if_ne	add	fp, #8
16f94     A7 FE 69 5C |  if_ne	wrlong	#255, fp
16f98     08 4E 85 51 |  if_ne	sub	fp, #8
16f9c     A7 50 68 5C |  if_ne	wrlong	#40, fp
16fa0                 | LR__1871
16fa0                 | LR__1872
16fa0     A7 12 02 F6 | 	mov	arg01, fp
16fa4     B8 31 BF FD | 	call	#_push
16fa8     A7 F0 03 F6 | 	mov	ptra, fp
16fac     B2 00 A0 FD | 	call	#popregs_
16fb0                 | _do_negative_ret
16fb0     2D 00 64 FD | 	ret
16fb4                 | 
16fb4                 | ' 
16fb4                 | ' sub do_abs
16fb4                 | _do_abs
16fb4     01 4A 05 F6 | 	mov	COUNT_, #1
16fb8     A8 00 A0 FD | 	call	#pushregs_
16fbc     0C F0 07 F1 | 	add	ptra, #12
16fc0     04 31 BF FD | 	call	#_pop
16fc4     FF 1E 02 F6 | 	mov	local01, result3
16fc8     A7 FA 61 FC | 	wrlong	result1, fp
16fcc     04 4E 05 F1 | 	add	fp, #4
16fd0     A7 FC 61 FC | 	wrlong	result2, fp
16fd4     04 4E 05 F1 | 	add	fp, #4
16fd8     A7 1E 62 FC | 	wrlong	local01, fp
16fdc                 | ' t1=pop()
16fdc                 | ' if t1.result_type=result_int then 
16fdc     08 4E 85 F1 | 	sub	fp, #8
16fe0     1C 1E 0E F2 | 	cmp	local01, #28 wz
16fe4     A7 12 02 AB |  if_e	rdlong	arg01, fp
16fe8     09 1F 42 A6 |  if_e	abs	local01, arg01
16fec     A7 1E 62 AC |  if_e	wrlong	local01, fp
16ff0     2C 00 90 AD |  if_e	jmp	#LR__1880
16ff4     08 4E 05 F1 | 	add	fp, #8
16ff8     A7 1E 02 FB | 	rdlong	local01, fp
16ffc     08 4E 85 F1 | 	sub	fp, #8
17000     1E 1E 0E F2 | 	cmp	local01, #30 wz
17004     A7 FA 01 AB |  if_e	rdlong	result1, fp
17008     1F FA 05 A4 |  if_e	bitl	result1, #31
1700c     A7 FA 61 AC |  if_e	wrlong	result1, fp
17010     08 4E 05 51 |  if_ne	add	fp, #8
17014     A7 FE 69 5C |  if_ne	wrlong	#255, fp
17018     08 4E 85 51 |  if_ne	sub	fp, #8
1701c     A7 50 68 5C |  if_ne	wrlong	#40, fp
17020                 | LR__1880
17020     A7 12 02 F6 | 	mov	arg01, fp
17024     38 31 BF FD | 	call	#_push
17028     A7 F0 03 F6 | 	mov	ptra, fp
1702c     B2 00 A0 FD | 	call	#popregs_
17030                 | _do_abs_ret
17030     2D 00 64 FD | 	ret
17034                 | 
17034                 | ' 
17034                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
17034                 | ' 
17034                 | ' ''----------------------------------------------------------------------------------------------------
17034                 | ' ''------------------ Initialization procedures -------------------------------------------------------
17034                 | ' ''----------------------------------------------------------------------------------------------------
17034                 | ' 
17034                 | ' ''--------------------------- Command function pointers
17034                 | ' 
17034                 | ' sub init_commands
17034                 | _init_commands
17034                 | ' 
17034                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
17034     00 00 06 F6 | 	mov	_var01, #0
17038     97 16 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
1703c                 | LR__1890
1703c     00 FB 01 F6 | 	mov	result1, _var01
17040     02 FA 65 F0 | 	shl	result1, #2
17044     63 00 00 FF 
17048     44 E4 05 F1 | 	add	objptr, ##50756
1704c     F2 FA 01 F1 | 	add	result1, objptr
17050     63 00 00 FF 
17054     44 E4 85 F1 | 	sub	objptr, ##50756
17058     FD E4 61 FC | 	wrlong	objptr, result1
1705c     01 00 06 F1 | 	add	_var01, #1
17060     00 01 56 F2 | 	cmps	_var01, #256 wc
17064     D4 FF 9F CD |  if_b	jmp	#LR__1890
17068                 | LR__1891
17068     F2 FA 01 F6 | 	mov	result1, objptr
1706c     14 FA 25 F4 | 	bith	result1, #20
17070     63 00 00 FF 
17074     48 E4 05 F1 | 	add	objptr, ##50760
17078     F2 FA 61 FC | 	wrlong	result1, objptr
1707c     63 00 00 FF 
17080     48 E4 85 F1 | 	sub	objptr, ##50760
17084     F2 FA 01 F6 | 	mov	result1, objptr
17088     15 FA 25 F4 | 	bith	result1, #21
1708c     63 00 00 FF 
17090     4C E4 05 F1 | 	add	objptr, ##50764
17094     F2 FA 61 FC | 	wrlong	result1, objptr
17098     63 00 00 FF 
1709c     4C E4 85 F1 | 	sub	objptr, ##50764
170a0     F2 FA 01 F6 | 	mov	result1, objptr
170a4     34 FA 25 F4 | 	bith	result1, #52
170a8     63 00 00 FF 
170ac     50 E4 05 F1 | 	add	objptr, ##50768
170b0     F2 FA 61 FC | 	wrlong	result1, objptr
170b4     63 00 00 FF 
170b8     50 E4 85 F1 | 	sub	objptr, ##50768
170bc     F2 FA 01 F6 | 	mov	result1, objptr
170c0     16 FA 25 F4 | 	bith	result1, #22
170c4     63 00 00 FF 
170c8     58 E4 05 F1 | 	add	objptr, ##50776
170cc     F2 FA 61 FC | 	wrlong	result1, objptr
170d0     63 00 00 FF 
170d4     58 E4 85 F1 | 	sub	objptr, ##50776
170d8     F2 FA 01 F6 | 	mov	result1, objptr
170dc     00 28 00 FF 
170e0     00 FA 45 F5 | 	or	result1, ##5242880
170e4     63 00 00 FF 
170e8     5C E4 05 F1 | 	add	objptr, ##50780
170ec     F2 FA 61 FC | 	wrlong	result1, objptr
170f0     63 00 00 FF 
170f4     5C E4 85 F1 | 	sub	objptr, ##50780
170f8     F2 FA 01 F6 | 	mov	result1, objptr
170fc     35 FA 25 F4 | 	bith	result1, #53
17100     63 00 00 FF 
17104     60 E4 05 F1 | 	add	objptr, ##50784
17108     F2 FA 61 FC | 	wrlong	result1, objptr
1710c     63 00 00 FF 
17110     60 E4 85 F1 | 	sub	objptr, ##50784
17114     F2 FA 01 F6 | 	mov	result1, objptr
17118     54 FA 25 F4 | 	bith	result1, #84
1711c     63 00 00 FF 
17120     64 E4 05 F1 | 	add	objptr, ##50788
17124     F2 FA 61 FC | 	wrlong	result1, objptr
17128     63 00 00 FF 
1712c     64 E4 85 F1 | 	sub	objptr, ##50788
17130     F2 FA 01 F6 | 	mov	result1, objptr
17134     17 FA 25 F4 | 	bith	result1, #23
17138     63 00 00 FF 
1713c     68 E4 05 F1 | 	add	objptr, ##50792
17140     F2 FA 61 FC | 	wrlong	result1, objptr
17144     63 00 00 FF 
17148     68 E4 85 F1 | 	sub	objptr, ##50792
1714c     F2 FA 01 F6 | 	mov	result1, objptr
17150     00 48 00 FF 
17154     00 FA 45 F5 | 	or	result1, ##9437184
17158     63 00 00 FF 
1715c     6C E4 05 F1 | 	add	objptr, ##50796
17160     F2 FA 61 FC | 	wrlong	result1, objptr
17164     63 00 00 FF 
17168     6C E4 85 F1 | 	sub	objptr, ##50796
1716c     F2 FA 01 F6 | 	mov	result1, objptr
17170     00 50 00 FF 
17174     00 FA 45 F5 | 	or	result1, ##10485760
17178     63 00 00 FF 
1717c     70 E4 05 F1 | 	add	objptr, ##50800
17180     F2 FA 61 FC | 	wrlong	result1, objptr
17184     63 00 00 FF 
17188     70 E4 85 F1 | 	sub	objptr, ##50800
1718c     F2 FA 01 F6 | 	mov	result1, objptr
17190     00 58 00 FF 
17194     00 FA 45 F5 | 	or	result1, ##11534336
17198     63 00 00 FF 
1719c     74 E4 05 F1 | 	add	objptr, ##50804
171a0     F2 FA 61 FC | 	wrlong	result1, objptr
171a4     63 00 00 FF 
171a8     74 E4 85 F1 | 	sub	objptr, ##50804
171ac     F2 FA 01 F6 | 	mov	result1, objptr
171b0     36 FA 25 F4 | 	bith	result1, #54
171b4     63 00 00 FF 
171b8     88 E4 05 F1 | 	add	objptr, ##50824
171bc     F2 FA 61 FC | 	wrlong	result1, objptr
171c0     63 00 00 FF 
171c4     88 E4 85 F1 | 	sub	objptr, ##50824
171c8     F2 FA 01 F6 | 	mov	result1, objptr
171cc     00 68 00 FF 
171d0     00 FA 45 F5 | 	or	result1, ##13631488
171d4     63 00 00 FF 
171d8     B8 E4 05 F1 | 	add	objptr, ##50872
171dc     F2 FA 61 FC | 	wrlong	result1, objptr
171e0     63 00 00 FF 
171e4     B8 E4 85 F1 | 	sub	objptr, ##50872
171e8     F2 FA 01 F6 | 	mov	result1, objptr
171ec     00 68 00 FF 
171f0     00 FA 45 F5 | 	or	result1, ##13631488
171f4     63 00 00 FF 
171f8     B4 E4 05 F1 | 	add	objptr, ##50868
171fc     F2 FA 61 FC | 	wrlong	result1, objptr
17200     63 00 00 FF 
17204     B4 E4 85 F1 | 	sub	objptr, ##50868
17208     F2 FA 01 F6 | 	mov	result1, objptr
1720c     00 68 00 FF 
17210     00 FA 45 F5 | 	or	result1, ##13631488
17214     63 00 00 FF 
17218     BC E4 05 F1 | 	add	objptr, ##50876
1721c     F2 FA 61 FC | 	wrlong	result1, objptr
17220     63 00 00 FF 
17224     BC E4 85 F1 | 	sub	objptr, ##50876
17228     F2 FA 01 F6 | 	mov	result1, objptr
1722c     00 68 00 FF 
17230     00 FA 45 F5 | 	or	result1, ##13631488
17234     63 00 00 FF 
17238     C0 E4 05 F1 | 	add	objptr, ##50880
1723c     F2 FA 61 FC | 	wrlong	result1, objptr
17240     63 00 00 FF 
17244     C0 E4 85 F1 | 	sub	objptr, ##50880
17248     F2 FA 01 F6 | 	mov	result1, objptr
1724c     00 68 00 FF 
17250     00 FA 45 F5 | 	or	result1, ##13631488
17254     63 00 00 FF 
17258     F0 E4 05 F1 | 	add	objptr, ##50928
1725c     F2 FA 61 FC | 	wrlong	result1, objptr
17260     63 00 00 FF 
17264     F0 E4 85 F1 | 	sub	objptr, ##50928
17268     F2 FA 01 F6 | 	mov	result1, objptr
1726c     55 FA 25 F4 | 	bith	result1, #85
17270     63 00 00 FF 
17274     A0 E4 05 F1 | 	add	objptr, ##50848
17278     F2 FA 61 FC | 	wrlong	result1, objptr
1727c     63 00 00 FF 
17280     A0 E4 85 F1 | 	sub	objptr, ##50848
17284     F2 FA 01 F6 | 	mov	result1, objptr
17288     00 68 00 FF 
1728c     00 FA 45 F5 | 	or	result1, ##13631488
17290     63 00 00 FF 
17294     C4 E4 05 F1 | 	add	objptr, ##50884
17298     F2 FA 61 FC | 	wrlong	result1, objptr
1729c     63 00 00 FF 
172a0     C4 E4 85 F1 | 	sub	objptr, ##50884
172a4     F2 FA 01 F6 | 	mov	result1, objptr
172a8     00 68 00 FF 
172ac     00 FA 45 F5 | 	or	result1, ##13631488
172b0     63 00 00 FF 
172b4     C8 E4 05 F1 | 	add	objptr, ##50888
172b8     F2 FA 61 FC | 	wrlong	result1, objptr
172bc     63 00 00 FF 
172c0     C8 E4 85 F1 | 	sub	objptr, ##50888
172c4     F2 FA 01 F6 | 	mov	result1, objptr
172c8     00 68 00 FF 
172cc     00 FA 45 F5 | 	or	result1, ##13631488
172d0     63 00 00 FF 
172d4     CC E4 05 F1 | 	add	objptr, ##50892
172d8     F2 FA 61 FC | 	wrlong	result1, objptr
172dc     63 00 00 FF 
172e0     CC E4 85 F1 | 	sub	objptr, ##50892
172e4     F2 FA 01 F6 | 	mov	result1, objptr
172e8     74 FA 25 F4 | 	bith	result1, #116
172ec     63 00 00 FF 
172f0     44 E5 05 F1 | 	add	objptr, ##51012
172f4     F2 FA 61 FC | 	wrlong	result1, objptr
172f8     63 00 00 FF 
172fc     44 E5 85 F1 | 	sub	objptr, ##51012
17300     F2 FA 01 F6 | 	mov	result1, objptr
17304     18 FA 25 F4 | 	bith	result1, #24
17308     63 00 00 FF 
1730c     48 E5 05 F1 | 	add	objptr, ##51016
17310     F2 FA 61 FC | 	wrlong	result1, objptr
17314     63 00 00 FF 
17318     48 E5 85 F1 | 	sub	objptr, ##51016
1731c     F2 FA 01 F6 | 	mov	result1, objptr
17320     00 88 00 FF 
17324     00 FA 45 F5 | 	or	result1, ##17825792
17328     63 00 00 FF 
1732c     4C E5 05 F1 | 	add	objptr, ##51020
17330     F2 FA 61 FC | 	wrlong	result1, objptr
17334     63 00 00 FF 
17338     4C E5 85 F1 | 	sub	objptr, ##51020
1733c     F2 FA 01 F6 | 	mov	result1, objptr
17340     00 90 00 FF 
17344     00 FA 45 F5 | 	or	result1, ##18874368
17348     63 00 00 FF 
1734c     50 E5 05 F1 | 	add	objptr, ##51024
17350     F2 FA 61 FC | 	wrlong	result1, objptr
17354     63 00 00 FF 
17358     50 E5 85 F1 | 	sub	objptr, ##51024
1735c     F2 FA 01 F6 | 	mov	result1, objptr
17360     00 98 00 FF 
17364     00 FA 45 F5 | 	or	result1, ##19922944
17368     63 00 00 FF 
1736c     54 E5 05 F1 | 	add	objptr, ##51028
17370     F2 FA 61 FC | 	wrlong	result1, objptr
17374     63 00 00 FF 
17378     54 E5 85 F1 | 	sub	objptr, ##51028
1737c     F2 FA 01 F6 | 	mov	result1, objptr
17380     00 A0 00 FF 
17384     00 FA 45 F5 | 	or	result1, ##20971520
17388     63 00 00 FF 
1738c     58 E5 05 F1 | 	add	objptr, ##51032
17390     F2 FA 61 FC | 	wrlong	result1, objptr
17394     63 00 00 FF 
17398     58 E5 85 F1 | 	sub	objptr, ##51032
1739c     F2 FA 01 F6 | 	mov	result1, objptr
173a0     00 A8 00 FF 
173a4     00 FA 45 F5 | 	or	result1, ##22020096
173a8     63 00 00 FF 
173ac     5C E5 05 F1 | 	add	objptr, ##51036
173b0     F2 FA 61 FC | 	wrlong	result1, objptr
173b4     63 00 00 FF 
173b8     5C E5 85 F1 | 	sub	objptr, ##51036
173bc     F2 FA 01 F6 | 	mov	result1, objptr
173c0     00 B0 00 FF 
173c4     00 FA 45 F5 | 	or	result1, ##23068672
173c8     63 00 00 FF 
173cc     60 E5 05 F1 | 	add	objptr, ##51040
173d0     F2 FA 61 FC | 	wrlong	result1, objptr
173d4     63 00 00 FF 
173d8     60 E5 85 F1 | 	sub	objptr, ##51040
173dc     F2 FA 01 F6 | 	mov	result1, objptr
173e0     00 B8 00 FF 
173e4     00 FA 45 F5 | 	or	result1, ##24117248
173e8     63 00 00 FF 
173ec     64 E5 05 F1 | 	add	objptr, ##51044
173f0     F2 FA 61 FC | 	wrlong	result1, objptr
173f4     63 00 00 FF 
173f8     64 E5 85 F1 | 	sub	objptr, ##51044
173fc     F2 FA 01 F6 | 	mov	result1, objptr
17400     37 FA 25 F4 | 	bith	result1, #55
17404     63 00 00 FF 
17408     68 E5 05 F1 | 	add	objptr, ##51048
1740c     F2 FA 61 FC | 	wrlong	result1, objptr
17410     63 00 00 FF 
17414     68 E5 85 F1 | 	sub	objptr, ##51048
17418     F2 FA 01 F6 | 	mov	result1, objptr
1741c     00 C8 00 FF 
17420     00 FA 45 F5 | 	or	result1, ##26214400
17424     63 00 00 FF 
17428     6C E5 05 F1 | 	add	objptr, ##51052
1742c     F2 FA 61 FC | 	wrlong	result1, objptr
17430     63 00 00 FF 
17434     6C E5 85 F1 | 	sub	objptr, ##51052
17438     F2 FA 01 F6 | 	mov	result1, objptr
1743c     00 D0 00 FF 
17440     00 FA 45 F5 | 	or	result1, ##27262976
17444     63 00 00 FF 
17448     70 E5 05 F1 | 	add	objptr, ##51056
1744c     F2 FA 61 FC | 	wrlong	result1, objptr
17450     63 00 00 FF 
17454     70 E5 85 F1 | 	sub	objptr, ##51056
17458     F2 FA 01 F6 | 	mov	result1, objptr
1745c     00 D8 00 FF 
17460     00 FA 45 F5 | 	or	result1, ##28311552
17464     63 00 00 FF 
17468     74 E5 05 F1 | 	add	objptr, ##51060
1746c     F2 FA 61 FC | 	wrlong	result1, objptr
17470     63 00 00 FF 
17474     74 E5 85 F1 | 	sub	objptr, ##51060
17478     F2 FA 01 F6 | 	mov	result1, objptr
1747c     56 FA 25 F4 | 	bith	result1, #86
17480     63 00 00 FF 
17484     78 E5 05 F1 | 	add	objptr, ##51064
17488     F2 FA 61 FC | 	wrlong	result1, objptr
1748c     63 00 00 FF 
17490     78 E5 85 F1 | 	sub	objptr, ##51064
17494     F2 FA 01 F6 | 	mov	result1, objptr
17498     00 E8 00 FF 
1749c     00 FA 45 F5 | 	or	result1, ##30408704
174a0     65 00 00 FF 
174a4     40 E4 05 F1 | 	add	objptr, ##51776
174a8     F2 FA 61 FC | 	wrlong	result1, objptr
174ac     65 00 00 FF 
174b0     40 E4 85 F1 | 	sub	objptr, ##51776
174b4     F2 FA 01 F6 | 	mov	result1, objptr
174b8     75 FA 25 F4 | 	bith	result1, #117
174bc     63 00 00 FF 
174c0     7C E5 05 F1 | 	add	objptr, ##51068
174c4     F2 FA 61 FC | 	wrlong	result1, objptr
174c8     63 00 00 FF 
174cc     7C E5 85 F1 | 	sub	objptr, ##51068
174d0     F2 FA 01 F6 | 	mov	result1, objptr
174d4     94 FA 25 F4 | 	bith	result1, #148
174d8     63 00 00 FF 
174dc     90 E5 05 F1 | 	add	objptr, ##51088
174e0     F2 FA 61 FC | 	wrlong	result1, objptr
174e4     63 00 00 FF 
174e8     90 E5 85 F1 | 	sub	objptr, ##51088
174ec     F2 FA 01 F6 | 	mov	result1, objptr
174f0     19 FA 25 F4 | 	bith	result1, #25
174f4     63 00 00 FF 
174f8     80 E5 05 F1 | 	add	objptr, ##51072
174fc     F2 FA 61 FC | 	wrlong	result1, objptr
17500     63 00 00 FF 
17504     80 E5 85 F1 | 	sub	objptr, ##51072
17508     F2 FA 01 F6 | 	mov	result1, objptr
1750c     00 08 01 FF 
17510     00 FA 45 F5 | 	or	result1, ##34603008
17514     63 00 00 FF 
17518     9C E4 05 F1 | 	add	objptr, ##50844
1751c     F2 FA 61 FC | 	wrlong	result1, objptr
17520     63 00 00 FF 
17524     9C E4 85 F1 | 	sub	objptr, ##50844
17528     F2 FA 01 F6 | 	mov	result1, objptr
1752c     00 10 01 FF 
17530     00 FA 45 F5 | 	or	result1, ##35651584
17534     63 00 00 FF 
17538     84 E5 05 F1 | 	add	objptr, ##51076
1753c     F2 FA 61 FC | 	wrlong	result1, objptr
17540     63 00 00 FF 
17544     84 E5 85 F1 | 	sub	objptr, ##51076
17548     F2 FA 01 F6 | 	mov	result1, objptr
1754c     00 18 01 FF 
17550     00 FA 45 F5 | 	or	result1, ##36700160
17554     63 00 00 FF 
17558     88 E5 05 F1 | 	add	objptr, ##51080
1755c     F2 FA 61 FC | 	wrlong	result1, objptr
17560     63 00 00 FF 
17564     88 E5 85 F1 | 	sub	objptr, ##51080
17568     F2 FA 01 F6 | 	mov	result1, objptr
1756c     00 20 01 FF 
17570     00 FA 45 F5 | 	or	result1, ##37748736
17574     63 00 00 FF 
17578     8C E5 05 F1 | 	add	objptr, ##51084
1757c     F2 FA 61 FC | 	wrlong	result1, objptr
17580     63 00 00 FF 
17584     8C E5 85 F1 | 	sub	objptr, ##51084
17588     F2 FA 01 F6 | 	mov	result1, objptr
1758c     00 28 01 FF 
17590     00 FA 45 F5 | 	or	result1, ##38797312
17594     63 00 00 FF 
17598     98 E5 05 F1 | 	add	objptr, ##51096
1759c     F2 FA 61 FC | 	wrlong	result1, objptr
175a0     63 00 00 FF 
175a4     98 E5 85 F1 | 	sub	objptr, ##51096
175a8     F2 FA 01 F6 | 	mov	result1, objptr
175ac     00 30 01 FF 
175b0     00 FA 45 F5 | 	or	result1, ##39845888
175b4     63 00 00 FF 
175b8     9C E5 05 F1 | 	add	objptr, ##51100
175bc     F2 FA 61 FC | 	wrlong	result1, objptr
175c0     63 00 00 FF 
175c4     9C E5 85 F1 | 	sub	objptr, ##51100
175c8     F2 FA 01 F6 | 	mov	result1, objptr
175cc     00 38 01 FF 
175d0     00 FA 45 F5 | 	or	result1, ##40894464
175d4     63 00 00 FF 
175d8     A0 E5 05 F1 | 	add	objptr, ##51104
175dc     F2 FA 61 FC | 	wrlong	result1, objptr
175e0     63 00 00 FF 
175e4     A0 E5 85 F1 | 	sub	objptr, ##51104
175e8     F2 FA 01 F6 | 	mov	result1, objptr
175ec     00 40 01 FF 
175f0     00 FA 45 F5 | 	or	result1, ##41943040
175f4     63 00 00 FF 
175f8     A4 E5 05 F1 | 	add	objptr, ##51108
175fc     F2 FA 61 FC | 	wrlong	result1, objptr
17600     63 00 00 FF 
17604     A4 E5 85 F1 | 	sub	objptr, ##51108
17608     F2 FA 01 F6 | 	mov	result1, objptr
1760c     00 48 01 FF 
17610     00 FA 45 F5 | 	or	result1, ##42991616
17614     63 00 00 FF 
17618     AC E5 05 F1 | 	add	objptr, ##51116
1761c     F2 FA 61 FC | 	wrlong	result1, objptr
17620     63 00 00 FF 
17624     AC E5 85 F1 | 	sub	objptr, ##51116
17628     F2 FA 01 F6 | 	mov	result1, objptr
1762c     00 50 01 FF 
17630     00 FA 45 F5 | 	or	result1, ##44040192
17634     63 00 00 FF 
17638     B0 E5 05 F1 | 	add	objptr, ##51120
1763c     F2 FA 61 FC | 	wrlong	result1, objptr
17640     63 00 00 FF 
17644     B0 E5 85 F1 | 	sub	objptr, ##51120
17648     F2 FA 01 F6 | 	mov	result1, objptr
1764c     00 58 01 FF 
17650     00 FA 45 F5 | 	or	result1, ##45088768
17654     63 00 00 FF 
17658     B0 E4 05 F1 | 	add	objptr, ##50864
1765c     F2 FA 61 FC | 	wrlong	result1, objptr
17660     63 00 00 FF 
17664     B0 E4 85 F1 | 	sub	objptr, ##50864
17668     F2 FA 01 F6 | 	mov	result1, objptr
1766c     00 60 01 FF 
17670     00 FA 45 F5 | 	or	result1, ##46137344
17674     63 00 00 FF 
17678     E0 E4 05 F1 | 	add	objptr, ##50912
1767c     F2 FA 61 FC | 	wrlong	result1, objptr
17680     63 00 00 FF 
17684     E0 E4 85 F1 | 	sub	objptr, ##50912
17688     F2 FA 01 F6 | 	mov	result1, objptr
1768c     00 68 01 FF 
17690     00 FA 45 F5 | 	or	result1, ##47185920
17694     63 00 00 FF 
17698     DC E4 05 F1 | 	add	objptr, ##50908
1769c     F2 FA 61 FC | 	wrlong	result1, objptr
176a0     63 00 00 FF 
176a4     DC E4 85 F1 | 	sub	objptr, ##50908
176a8     F2 FA 01 F6 | 	mov	result1, objptr
176ac     00 70 01 FF 
176b0     00 FA 45 F5 | 	or	result1, ##48234496
176b4     63 00 00 FF 
176b8     80 E4 05 F1 | 	add	objptr, ##50816
176bc     F2 FA 61 FC | 	wrlong	result1, objptr
176c0     63 00 00 FF 
176c4     80 E4 85 F1 | 	sub	objptr, ##50816
176c8     F2 FA 01 F6 | 	mov	result1, objptr
176cc     00 78 01 FF 
176d0     00 FA 45 F5 | 	or	result1, ##49283072
176d4     63 00 00 FF 
176d8     84 E4 05 F1 | 	add	objptr, ##50820
176dc     F2 FA 61 FC | 	wrlong	result1, objptr
176e0     63 00 00 FF 
176e4     84 E4 85 F1 | 	sub	objptr, ##50820
176e8     F2 FA 01 F6 | 	mov	result1, objptr
176ec     38 FA 25 F4 | 	bith	result1, #56
176f0     63 00 00 FF 
176f4     EC E4 05 F1 | 	add	objptr, ##50924
176f8     F2 FA 61 FC | 	wrlong	result1, objptr
176fc     63 00 00 FF 
17700     EC E4 85 F1 | 	sub	objptr, ##50924
17704     F2 FA 01 F6 | 	mov	result1, objptr
17708     00 88 01 FF 
1770c     00 FA 45 F5 | 	or	result1, ##51380224
17710     63 00 00 FF 
17714     94 E5 05 F1 | 	add	objptr, ##51092
17718     F2 FA 61 FC | 	wrlong	result1, objptr
1771c     63 00 00 FF 
17720     94 E5 85 F1 | 	sub	objptr, ##51092
17724     F2 FA 01 F6 | 	mov	result1, objptr
17728     00 90 01 FF 
1772c     00 FA 45 F5 | 	or	result1, ##52428800
17730     63 00 00 FF 
17734     A8 E5 05 F1 | 	add	objptr, ##51112
17738     F2 FA 61 FC | 	wrlong	result1, objptr
1773c     63 00 00 FF 
17740     A8 E5 85 F1 | 	sub	objptr, ##51112
17744     F2 FA 01 F6 | 	mov	result1, objptr
17748     00 98 01 FF 
1774c     00 FA 45 F5 | 	or	result1, ##53477376
17750     63 00 00 FF 
17754     B4 E5 05 F1 | 	add	objptr, ##51124
17758     F2 FA 61 FC | 	wrlong	result1, objptr
1775c     63 00 00 FF 
17760     B4 E5 85 F1 | 	sub	objptr, ##51124
17764     F2 FA 01 F6 | 	mov	result1, objptr
17768     00 A0 01 FF 
1776c     00 FA 45 F5 | 	or	result1, ##54525952
17770     63 00 00 FF 
17774     B8 E5 05 F1 | 	add	objptr, ##51128
17778     F2 FA 61 FC | 	wrlong	result1, objptr
1777c     63 00 00 FF 
17780     B8 E5 85 F1 | 	sub	objptr, ##51128
17784     F2 FA 01 F6 | 	mov	result1, objptr
17788     00 A8 01 FF 
1778c     00 FA 45 F5 | 	or	result1, ##55574528
17790     63 00 00 FF 
17794     BC E5 05 F1 | 	add	objptr, ##51132
17798     F2 FA 61 FC | 	wrlong	result1, objptr
1779c     63 00 00 FF 
177a0     BC E5 85 F1 | 	sub	objptr, ##51132
177a4     F2 FA 01 F6 | 	mov	result1, objptr
177a8     00 B0 01 FF 
177ac     00 FA 45 F5 | 	or	result1, ##56623104
177b0     63 00 00 FF 
177b4     C0 E5 05 F1 | 	add	objptr, ##51136
177b8     F2 FA 61 FC | 	wrlong	result1, objptr
177bc     63 00 00 FF 
177c0     C0 E5 85 F1 | 	sub	objptr, ##51136
177c4     F2 FA 01 F6 | 	mov	result1, objptr
177c8     00 B8 01 FF 
177cc     00 FA 45 F5 | 	or	result1, ##57671680
177d0     63 00 00 FF 
177d4     C4 E5 05 F1 | 	add	objptr, ##51140
177d8     F2 FA 61 FC | 	wrlong	result1, objptr
177dc     63 00 00 FF 
177e0     C4 E5 85 F1 | 	sub	objptr, ##51140
177e4     F2 FA 01 F6 | 	mov	result1, objptr
177e8     57 FA 25 F4 | 	bith	result1, #87
177ec     63 00 00 FF 
177f0     C8 E5 05 F1 | 	add	objptr, ##51144
177f4     F2 FA 61 FC | 	wrlong	result1, objptr
177f8     63 00 00 FF 
177fc     C8 E5 85 F1 | 	sub	objptr, ##51144
17800     F2 FA 01 F6 | 	mov	result1, objptr
17804     94 FA 25 F4 | 	bith	result1, #148
17808     63 00 00 FF 
1780c     90 E5 05 F1 | 	add	objptr, ##51088
17810     F2 FA 61 FC | 	wrlong	result1, objptr
17814     63 00 00 FF 
17818     90 E5 85 F1 | 	sub	objptr, ##51088
1781c     F2 FA 01 F6 | 	mov	result1, objptr
17820     00 C8 01 FF 
17824     00 FA 45 F5 | 	or	result1, ##59768832
17828     63 00 00 FF 
1782c     D0 E5 05 F1 | 	add	objptr, ##51152
17830     F2 FA 61 FC | 	wrlong	result1, objptr
17834     63 00 00 FF 
17838     D0 E5 85 F1 | 	sub	objptr, ##51152
1783c     F2 FA 01 F6 | 	mov	result1, objptr
17840     00 D0 01 FF 
17844     00 FA 45 F5 | 	or	result1, ##60817408
17848     63 00 00 FF 
1784c     CC E5 05 F1 | 	add	objptr, ##51148
17850     F2 FA 61 FC | 	wrlong	result1, objptr
17854     63 00 00 FF 
17858     CC E5 85 F1 | 	sub	objptr, ##51148
1785c     F2 FA 01 F6 | 	mov	result1, objptr
17860     00 D8 01 FF 
17864     00 FA 45 F5 | 	or	result1, ##61865984
17868     63 00 00 FF 
1786c     E4 E5 05 F1 | 	add	objptr, ##51172
17870     F2 FA 61 FC | 	wrlong	result1, objptr
17874     63 00 00 FF 
17878     E4 E5 85 F1 | 	sub	objptr, ##51172
1787c     F2 FA 01 F6 | 	mov	result1, objptr
17880     76 FA 25 F4 | 	bith	result1, #118
17884     63 00 00 FF 
17888     E8 E5 05 F1 | 	add	objptr, ##51176
1788c     F2 FA 61 FC | 	wrlong	result1, objptr
17890     63 00 00 FF 
17894     E8 E5 85 F1 | 	sub	objptr, ##51176
17898     F2 FA 01 F6 | 	mov	result1, objptr
1789c     00 E8 01 FF 
178a0     00 FA 45 F5 | 	or	result1, ##63963136
178a4     63 00 00 FF 
178a8     D4 E5 05 F1 | 	add	objptr, ##51156
178ac     F2 FA 61 FC | 	wrlong	result1, objptr
178b0     63 00 00 FF 
178b4     D4 E5 85 F1 | 	sub	objptr, ##51156
178b8     F2 FA 01 F6 | 	mov	result1, objptr
178bc     95 FA 25 F4 | 	bith	result1, #149
178c0     63 00 00 FF 
178c4     D8 E5 05 F1 | 	add	objptr, ##51160
178c8     F2 FA 61 FC | 	wrlong	result1, objptr
178cc     63 00 00 FF 
178d0     D8 E5 85 F1 | 	sub	objptr, ##51160
178d4     F2 FA 01 F6 | 	mov	result1, objptr
178d8     B4 FA 25 F4 | 	bith	result1, #180
178dc     63 00 00 FF 
178e0     DC E5 05 F1 | 	add	objptr, ##51164
178e4     F2 FA 61 FC | 	wrlong	result1, objptr
178e8     63 00 00 FF 
178ec     DC E5 85 F1 | 	sub	objptr, ##51164
178f0     F2 FA 01 F6 | 	mov	result1, objptr
178f4     1A FA 25 F4 | 	bith	result1, #26
178f8     63 00 00 FF 
178fc     E0 E5 05 F1 | 	add	objptr, ##51168
17900     F2 FA 61 FC | 	wrlong	result1, objptr
17904     63 00 00 FF 
17908     E0 E5 85 F1 | 	sub	objptr, ##51168
1790c     F2 FA 01 F6 | 	mov	result1, objptr
17910     00 08 02 FF 
17914     00 FA 45 F5 | 	or	result1, ##68157440
17918     63 00 00 FF 
1791c     F0 E5 05 F1 | 	add	objptr, ##51184
17920     F2 FA 61 FC | 	wrlong	result1, objptr
17924     63 00 00 FF 
17928     F0 E5 85 F1 | 	sub	objptr, ##51184
1792c     F2 FA 01 F6 | 	mov	result1, objptr
17930     00 10 02 FF 
17934     00 FA 45 F5 | 	or	result1, ##69206016
17938     63 00 00 FF 
1793c     EC E5 05 F1 | 	add	objptr, ##51180
17940     F2 FA 61 FC | 	wrlong	result1, objptr
17944     63 00 00 FF 
17948     EC E5 85 F1 | 	sub	objptr, ##51180
1794c     F2 FA 01 F6 | 	mov	result1, objptr
17950     00 18 02 FF 
17954     00 FA 45 F5 | 	or	result1, ##70254592
17958     63 00 00 FF 
1795c     FC E5 05 F1 | 	add	objptr, ##51196
17960     F2 FA 61 FC | 	wrlong	result1, objptr
17964     63 00 00 FF 
17968     FC E5 85 F1 | 	sub	objptr, ##51196
1796c     F2 FA 01 F6 | 	mov	result1, objptr
17970     00 20 02 FF 
17974     00 FA 45 F5 | 	or	result1, ##71303168
17978     63 00 00 FF 
1797c     F8 E5 05 F1 | 	add	objptr, ##51192
17980     F2 FA 61 FC | 	wrlong	result1, objptr
17984     63 00 00 FF 
17988     F8 E5 85 F1 | 	sub	objptr, ##51192
1798c     F2 FA 01 F6 | 	mov	result1, objptr
17990     00 28 02 FF 
17994     00 FA 45 F5 | 	or	result1, ##72351744
17998     63 00 00 FF 
1799c     F4 E5 05 F1 | 	add	objptr, ##51188
179a0     F2 FA 61 FC | 	wrlong	result1, objptr
179a4     63 00 00 FF 
179a8     F4 E5 85 F1 | 	sub	objptr, ##51188
179ac     F2 FA 01 F6 | 	mov	result1, objptr
179b0     00 30 02 FF 
179b4     00 FA 45 F5 | 	or	result1, ##73400320
179b8     64 00 00 FF 
179bc     00 E4 05 F1 | 	add	objptr, ##51200
179c0     F2 FA 61 FC | 	wrlong	result1, objptr
179c4     64 00 00 FF 
179c8     00 E4 85 F1 | 	sub	objptr, ##51200
179cc     F2 FA 01 F6 | 	mov	result1, objptr
179d0     00 38 02 FF 
179d4     00 FA 45 F5 | 	or	result1, ##74448896
179d8     64 00 00 FF 
179dc     04 E4 05 F1 | 	add	objptr, ##51204
179e0     F2 FA 61 FC | 	wrlong	result1, objptr
179e4     64 00 00 FF 
179e8     04 E4 85 F1 | 	sub	objptr, ##51204
179ec     F2 FA 01 F6 | 	mov	result1, objptr
179f0     00 40 02 FF 
179f4     00 FA 45 F5 | 	or	result1, ##75497472
179f8     63 00 00 FF 
179fc     98 E4 05 F1 | 	add	objptr, ##50840
17a00     F2 FA 61 FC | 	wrlong	result1, objptr
17a04     63 00 00 FF 
17a08     98 E4 85 F1 | 	sub	objptr, ##50840
17a0c     F2 FA 01 F6 | 	mov	result1, objptr
17a10     00 48 02 FF 
17a14     00 FA 45 F5 | 	or	result1, ##76546048
17a18     64 00 00 FF 
17a1c     1C E4 05 F1 | 	add	objptr, ##51228
17a20     F2 FA 61 FC | 	wrlong	result1, objptr
17a24     64 00 00 FF 
17a28     1C E4 85 F1 | 	sub	objptr, ##51228
17a2c     F2 FA 01 F6 | 	mov	result1, objptr
17a30     00 50 02 FF 
17a34     00 FA 45 F5 | 	or	result1, ##77594624
17a38     64 00 00 FF 
17a3c     2C E4 05 F1 | 	add	objptr, ##51244
17a40     F2 FA 61 FC | 	wrlong	result1, objptr
17a44     64 00 00 FF 
17a48     2C E4 85 F1 | 	sub	objptr, ##51244
17a4c     F2 FA 01 F6 | 	mov	result1, objptr
17a50     00 58 02 FF 
17a54     00 FA 45 F5 | 	or	result1, ##78643200
17a58     64 00 00 FF 
17a5c     30 E4 05 F1 | 	add	objptr, ##51248
17a60     F2 FA 61 FC | 	wrlong	result1, objptr
17a64     64 00 00 FF 
17a68     30 E4 85 F1 | 	sub	objptr, ##51248
17a6c     F2 FA 01 F6 | 	mov	result1, objptr
17a70     00 60 02 FF 
17a74     00 FA 45 F5 | 	or	result1, ##79691776
17a78     64 00 00 FF 
17a7c     28 E4 05 F1 | 	add	objptr, ##51240
17a80     F2 FA 61 FC | 	wrlong	result1, objptr
17a84     64 00 00 FF 
17a88     28 E4 85 F1 | 	sub	objptr, ##51240
17a8c     F2 FA 01 F6 | 	mov	result1, objptr
17a90     00 68 02 FF 
17a94     00 FA 45 F5 | 	or	result1, ##80740352
17a98     64 00 00 FF 
17a9c     20 E4 05 F1 | 	add	objptr, ##51232
17aa0     F2 FA 61 FC | 	wrlong	result1, objptr
17aa4     64 00 00 FF 
17aa8     20 E4 85 F1 | 	sub	objptr, ##51232
17aac     F2 FA 01 F6 | 	mov	result1, objptr
17ab0     00 70 02 FF 
17ab4     00 FA 45 F5 | 	or	result1, ##81788928
17ab8     64 00 00 FF 
17abc     24 E4 05 F1 | 	add	objptr, ##51236
17ac0     F2 FA 61 FC | 	wrlong	result1, objptr
17ac4     64 00 00 FF 
17ac8     24 E4 85 F1 | 	sub	objptr, ##51236
17acc     F2 FA 01 F6 | 	mov	result1, objptr
17ad0     00 78 02 FF 
17ad4     00 FA 45 F5 | 	or	result1, ##82837504
17ad8     64 00 00 FF 
17adc     34 E4 05 F1 | 	add	objptr, ##51252
17ae0     F2 FA 61 FC | 	wrlong	result1, objptr
17ae4     64 00 00 FF 
17ae8     34 E4 85 F1 | 	sub	objptr, ##51252
17aec     F2 FA 01 F6 | 	mov	result1, objptr
17af0     00 80 02 FF 
17af4     00 FA 45 F5 | 	or	result1, ##83886080
17af8     64 00 00 FF 
17afc     38 E4 05 F1 | 	add	objptr, ##51256
17b00     F2 FA 61 FC | 	wrlong	result1, objptr
17b04     64 00 00 FF 
17b08     38 E4 85 F1 | 	sub	objptr, ##51256
17b0c     F2 FA 01 F6 | 	mov	result1, objptr
17b10     00 88 02 FF 
17b14     00 FA 45 F5 | 	or	result1, ##84934656
17b18     64 00 00 FF 
17b1c     3C E4 05 F1 | 	add	objptr, ##51260
17b20     F2 FA 61 FC | 	wrlong	result1, objptr
17b24     64 00 00 FF 
17b28     3C E4 85 F1 | 	sub	objptr, ##51260
17b2c     F2 FA 01 F6 | 	mov	result1, objptr
17b30     00 90 02 FF 
17b34     00 FA 45 F5 | 	or	result1, ##85983232
17b38     64 00 00 FF 
17b3c     40 E4 05 F1 | 	add	objptr, ##51264
17b40     F2 FA 61 FC | 	wrlong	result1, objptr
17b44     64 00 00 FF 
17b48     40 E4 85 F1 | 	sub	objptr, ##51264
17b4c     F2 FA 01 F6 | 	mov	result1, objptr
17b50     00 98 02 FF 
17b54     00 FA 45 F5 | 	or	result1, ##87031808
17b58     64 00 00 FF 
17b5c     44 E4 05 F1 | 	add	objptr, ##51268
17b60     F2 FA 61 FC | 	wrlong	result1, objptr
17b64     64 00 00 FF 
17b68     44 E4 85 F1 | 	sub	objptr, ##51268
17b6c     F2 FA 01 F6 | 	mov	result1, objptr
17b70     00 A0 02 FF 
17b74     00 FA 45 F5 | 	or	result1, ##88080384
17b78     64 00 00 FF 
17b7c     48 E4 05 F1 | 	add	objptr, ##51272
17b80     F2 FA 61 FC | 	wrlong	result1, objptr
17b84     64 00 00 FF 
17b88     48 E4 85 F1 | 	sub	objptr, ##51272
17b8c     F2 FA 01 F6 | 	mov	result1, objptr
17b90     00 A8 02 FF 
17b94     00 FA 45 F5 | 	or	result1, ##89128960
17b98     64 00 00 FF 
17b9c     4C E4 05 F1 | 	add	objptr, ##51276
17ba0     F2 FA 61 FC | 	wrlong	result1, objptr
17ba4     64 00 00 FF 
17ba8     4C E4 85 F1 | 	sub	objptr, ##51276
17bac     F2 FA 01 F6 | 	mov	result1, objptr
17bb0     00 B0 02 FF 
17bb4     00 FA 45 F5 | 	or	result1, ##90177536
17bb8     64 00 00 FF 
17bbc     50 E4 05 F1 | 	add	objptr, ##51280
17bc0     F2 FA 61 FC | 	wrlong	result1, objptr
17bc4     64 00 00 FF 
17bc8     50 E4 85 F1 | 	sub	objptr, ##51280
17bcc     F2 FA 01 F6 | 	mov	result1, objptr
17bd0     00 B8 02 FF 
17bd4     00 FA 45 F5 | 	or	result1, ##91226112
17bd8     64 00 00 FF 
17bdc     5C E4 05 F1 | 	add	objptr, ##51292
17be0     F2 FA 61 FC | 	wrlong	result1, objptr
17be4     64 00 00 FF 
17be8     5C E4 85 F1 | 	sub	objptr, ##51292
17bec     F2 FA 01 F6 | 	mov	result1, objptr
17bf0     00 C0 02 FF 
17bf4     00 FA 45 F5 | 	or	result1, ##92274688
17bf8     64 00 00 FF 
17bfc     54 E4 05 F1 | 	add	objptr, ##51284
17c00     F2 FA 61 FC | 	wrlong	result1, objptr
17c04     64 00 00 FF 
17c08     54 E4 85 F1 | 	sub	objptr, ##51284
17c0c     F2 FA 01 F6 | 	mov	result1, objptr
17c10     00 C8 02 FF 
17c14     00 FA 45 F5 | 	or	result1, ##93323264
17c18     64 00 00 FF 
17c1c     58 E4 05 F1 | 	add	objptr, ##51288
17c20     F2 FA 61 FC | 	wrlong	result1, objptr
17c24     64 00 00 FF 
17c28     58 E4 85 F1 | 	sub	objptr, ##51288
17c2c     F2 FA 01 F6 | 	mov	result1, objptr
17c30     00 D0 02 FF 
17c34     00 FA 45 F5 | 	or	result1, ##94371840
17c38     64 00 00 FF 
17c3c     60 E4 05 F1 | 	add	objptr, ##51296
17c40     F2 FA 61 FC | 	wrlong	result1, objptr
17c44     64 00 00 FF 
17c48     60 E4 85 F1 | 	sub	objptr, ##51296
17c4c     F2 FA 01 F6 | 	mov	result1, objptr
17c50     00 D8 02 FF 
17c54     00 FA 45 F5 | 	or	result1, ##95420416
17c58     64 00 00 FF 
17c5c     08 E4 05 F1 | 	add	objptr, ##51208
17c60     F2 FA 61 FC | 	wrlong	result1, objptr
17c64     64 00 00 FF 
17c68     08 E4 85 F1 | 	sub	objptr, ##51208
17c6c     F2 FA 01 F6 | 	mov	result1, objptr
17c70     00 E0 02 FF 
17c74     00 FA 45 F5 | 	or	result1, ##96468992
17c78     64 00 00 FF 
17c7c     10 E4 05 F1 | 	add	objptr, ##51216
17c80     F2 FA 61 FC | 	wrlong	result1, objptr
17c84     64 00 00 FF 
17c88     10 E4 85 F1 | 	sub	objptr, ##51216
17c8c     F2 FA 01 F6 | 	mov	result1, objptr
17c90     00 E8 02 FF 
17c94     00 FA 45 F5 | 	or	result1, ##97517568
17c98     64 00 00 FF 
17c9c     14 E4 05 F1 | 	add	objptr, ##51220
17ca0     F2 FA 61 FC | 	wrlong	result1, objptr
17ca4     64 00 00 FF 
17ca8     14 E4 85 F1 | 	sub	objptr, ##51220
17cac     F2 FA 01 F6 | 	mov	result1, objptr
17cb0     00 F0 02 FF 
17cb4     00 FA 45 F5 | 	or	result1, ##98566144
17cb8     64 00 00 FF 
17cbc     64 E4 05 F1 | 	add	objptr, ##51300
17cc0     F2 FA 61 FC | 	wrlong	result1, objptr
17cc4     64 00 00 FF 
17cc8     64 E4 85 F1 | 	sub	objptr, ##51300
17ccc     F2 FA 01 F6 | 	mov	result1, objptr
17cd0     00 F8 02 FF 
17cd4     00 FA 45 F5 | 	or	result1, ##99614720
17cd8     64 00 00 FF 
17cdc     68 E4 05 F1 | 	add	objptr, ##51304
17ce0     F2 FA 61 FC | 	wrlong	result1, objptr
17ce4     64 00 00 FF 
17ce8     68 E4 85 F1 | 	sub	objptr, ##51304
17cec     F2 FA 01 F6 | 	mov	result1, objptr
17cf0     39 FA 25 F4 | 	bith	result1, #57
17cf4     64 00 00 FF 
17cf8     6C E4 05 F1 | 	add	objptr, ##51308
17cfc     F2 FA 61 FC | 	wrlong	result1, objptr
17d00     64 00 00 FF 
17d04     6C E4 85 F1 | 	sub	objptr, ##51308
17d08     F2 FA 01 F6 | 	mov	result1, objptr
17d0c     00 08 03 FF 
17d10     00 FA 45 F5 | 	or	result1, ##101711872
17d14     64 00 00 FF 
17d18     18 E4 05 F1 | 	add	objptr, ##51224
17d1c     F2 FA 61 FC | 	wrlong	result1, objptr
17d20     64 00 00 FF 
17d24     18 E4 85 F1 | 	sub	objptr, ##51224
17d28     F2 FA 01 F6 | 	mov	result1, objptr
17d2c     00 10 03 FF 
17d30     00 FA 45 F5 | 	or	result1, ##102760448
17d34     64 00 00 FF 
17d38     7C E4 05 F1 | 	add	objptr, ##51324
17d3c     F2 FA 61 FC | 	wrlong	result1, objptr
17d40     64 00 00 FF 
17d44     7C E4 85 F1 | 	sub	objptr, ##51324
17d48     F2 FA 01 F6 | 	mov	result1, objptr
17d4c     00 18 03 FF 
17d50     00 FA 45 F5 | 	or	result1, ##103809024
17d54     64 00 00 FF 
17d58     84 E4 05 F1 | 	add	objptr, ##51332
17d5c     F2 FA 61 FC | 	wrlong	result1, objptr
17d60     64 00 00 FF 
17d64     84 E4 85 F1 | 	sub	objptr, ##51332
17d68     F2 FA 01 F6 | 	mov	result1, objptr
17d6c     00 20 03 FF 
17d70     00 FA 45 F5 | 	or	result1, ##104857600
17d74     64 00 00 FF 
17d78     78 E4 05 F1 | 	add	objptr, ##51320
17d7c     F2 FA 61 FC | 	wrlong	result1, objptr
17d80     64 00 00 FF 
17d84     78 E4 85 F1 | 	sub	objptr, ##51320
17d88     F2 FA 01 F6 | 	mov	result1, objptr
17d8c     00 28 03 FF 
17d90     00 FA 45 F5 | 	or	result1, ##105906176
17d94     64 00 00 FF 
17d98     74 E4 05 F1 | 	add	objptr, ##51316
17d9c     F2 FA 61 FC | 	wrlong	result1, objptr
17da0     64 00 00 FF 
17da4     74 E4 85 F1 | 	sub	objptr, ##51316
17da8     F2 FA 01 F6 | 	mov	result1, objptr
17dac     00 30 03 FF 
17db0     00 FA 45 F5 | 	or	result1, ##106954752
17db4     64 00 00 FF 
17db8     70 E4 05 F1 | 	add	objptr, ##51312
17dbc     F2 FA 61 FC | 	wrlong	result1, objptr
17dc0     64 00 00 FF 
17dc4     70 E4 85 F1 | 	sub	objptr, ##51312
17dc8     F2 FA 01 F6 | 	mov	result1, objptr
17dcc     00 38 03 FF 
17dd0     00 FA 45 F5 | 	or	result1, ##108003328
17dd4     64 00 00 FF 
17dd8     80 E4 05 F1 | 	add	objptr, ##51328
17ddc     F2 FA 61 FC | 	wrlong	result1, objptr
17de0     64 00 00 FF 
17de4     80 E4 85 F1 | 	sub	objptr, ##51328
17de8     F2 FA 01 F6 | 	mov	result1, objptr
17dec     00 40 03 FF 
17df0     00 FA 45 F5 | 	or	result1, ##109051904
17df4     64 00 00 FF 
17df8     88 E4 05 F1 | 	add	objptr, ##51336
17dfc     F2 FA 61 FC | 	wrlong	result1, objptr
17e00     64 00 00 FF 
17e04     88 E4 85 F1 | 	sub	objptr, ##51336
17e08     F2 FA 01 F6 | 	mov	result1, objptr
17e0c     00 48 03 FF 
17e10     00 FA 45 F5 | 	or	result1, ##110100480
17e14     64 00 00 FF 
17e18     8C E4 05 F1 | 	add	objptr, ##51340
17e1c     F2 FA 61 FC | 	wrlong	result1, objptr
17e20     64 00 00 FF 
17e24     8C E4 85 F1 | 	sub	objptr, ##51340
17e28     F2 FA 01 F6 | 	mov	result1, objptr
17e2c     00 50 03 FF 
17e30     00 FA 45 F5 | 	or	result1, ##111149056
17e34     64 00 00 FF 
17e38     90 E4 05 F1 | 	add	objptr, ##51344
17e3c     F2 FA 61 FC | 	wrlong	result1, objptr
17e40     64 00 00 FF 
17e44     90 E4 85 F1 | 	sub	objptr, ##51344
17e48     F2 FA 01 F6 | 	mov	result1, objptr
17e4c     00 58 03 FF 
17e50     00 FA 45 F5 | 	or	result1, ##112197632
17e54     64 00 00 FF 
17e58     98 E4 05 F1 | 	add	objptr, ##51352
17e5c     F2 FA 61 FC | 	wrlong	result1, objptr
17e60     64 00 00 FF 
17e64     98 E4 85 F1 | 	sub	objptr, ##51352
17e68     F2 FA 01 F6 | 	mov	result1, objptr
17e6c     00 60 03 FF 
17e70     00 FA 45 F5 | 	or	result1, ##113246208
17e74     64 00 00 FF 
17e78     9C E4 05 F1 | 	add	objptr, ##51356
17e7c     F2 FA 61 FC | 	wrlong	result1, objptr
17e80     64 00 00 FF 
17e84     9C E4 85 F1 | 	sub	objptr, ##51356
17e88     F2 FA 01 F6 | 	mov	result1, objptr
17e8c     00 68 03 FF 
17e90     00 FA 45 F5 | 	or	result1, ##114294784
17e94     64 00 00 FF 
17e98     A0 E4 05 F1 | 	add	objptr, ##51360
17e9c     F2 FA 61 FC | 	wrlong	result1, objptr
17ea0     64 00 00 FF 
17ea4     A0 E4 85 F1 | 	sub	objptr, ##51360
17ea8     F2 FA 01 F6 | 	mov	result1, objptr
17eac     00 70 03 FF 
17eb0     00 FA 45 F5 | 	or	result1, ##115343360
17eb4     64 00 00 FF 
17eb8     A4 E4 05 F1 | 	add	objptr, ##51364
17ebc     F2 FA 61 FC | 	wrlong	result1, objptr
17ec0     64 00 00 FF 
17ec4     A4 E4 85 F1 | 	sub	objptr, ##51364
17ec8     F2 FA 01 F6 | 	mov	result1, objptr
17ecc     00 78 03 FF 
17ed0     00 FA 45 F5 | 	or	result1, ##116391936
17ed4     64 00 00 FF 
17ed8     A8 E4 05 F1 | 	add	objptr, ##51368
17edc     F2 FA 61 FC | 	wrlong	result1, objptr
17ee0     64 00 00 FF 
17ee4     A8 E4 85 F1 | 	sub	objptr, ##51368
17ee8     F2 FA 01 F6 | 	mov	result1, objptr
17eec     58 FA 25 F4 | 	bith	result1, #88
17ef0     64 00 00 FF 
17ef4     AC E4 05 F1 | 	add	objptr, ##51372
17ef8     F2 FA 61 FC | 	wrlong	result1, objptr
17efc     64 00 00 FF 
17f00     AC E4 85 F1 | 	sub	objptr, ##51372
17f04     F2 FA 01 F6 | 	mov	result1, objptr
17f08     00 88 03 FF 
17f0c     00 FA 45 F5 | 	or	result1, ##118489088
17f10     64 00 00 FF 
17f14     B0 E4 05 F1 | 	add	objptr, ##51376
17f18     F2 FA 61 FC | 	wrlong	result1, objptr
17f1c     64 00 00 FF 
17f20     B0 E4 85 F1 | 	sub	objptr, ##51376
17f24     F2 FA 01 F6 | 	mov	result1, objptr
17f28     00 90 03 FF 
17f2c     00 FA 45 F5 | 	or	result1, ##119537664
17f30     64 00 00 FF 
17f34     B4 E4 05 F1 | 	add	objptr, ##51380
17f38     F2 FA 61 FC | 	wrlong	result1, objptr
17f3c     64 00 00 FF 
17f40     B4 E4 85 F1 | 	sub	objptr, ##51380
17f44     F2 FA 01 F6 | 	mov	result1, objptr
17f48     00 98 03 FF 
17f4c     00 FA 45 F5 | 	or	result1, ##120586240
17f50     64 00 00 FF 
17f54     94 E4 05 F1 | 	add	objptr, ##51348
17f58     F2 FA 61 FC | 	wrlong	result1, objptr
17f5c     64 00 00 FF 
17f60     94 E4 85 F1 | 	sub	objptr, ##51348
17f64     F2 FA 01 F6 | 	mov	result1, objptr
17f68     00 A0 03 FF 
17f6c     00 FA 45 F5 | 	or	result1, ##121634816
17f70     63 00 00 FF 
17f74     8C E4 05 F1 | 	add	objptr, ##50828
17f78     F2 FA 61 FC | 	wrlong	result1, objptr
17f7c     63 00 00 FF 
17f80     8C E4 85 F1 | 	sub	objptr, ##50828
17f84     F2 FA 01 F6 | 	mov	result1, objptr
17f88     00 A8 03 FF 
17f8c     00 FA 45 F5 | 	or	result1, ##122683392
17f90     64 00 00 FF 
17f94     B8 E4 05 F1 | 	add	objptr, ##51384
17f98     F2 FA 61 FC | 	wrlong	result1, objptr
17f9c     64 00 00 FF 
17fa0     B8 E4 85 F1 | 	sub	objptr, ##51384
17fa4     F2 FA 01 F6 | 	mov	result1, objptr
17fa8     00 B0 03 FF 
17fac     00 FA 45 F5 | 	or	result1, ##123731968
17fb0     64 00 00 FF 
17fb4     BC E4 05 F1 | 	add	objptr, ##51388
17fb8     F2 FA 61 FC | 	wrlong	result1, objptr
17fbc     64 00 00 FF 
17fc0     BC E4 85 F1 | 	sub	objptr, ##51388
17fc4                 | _init_commands_ret
17fc4     2D 00 64 FD | 	ret
17fc8                 | 
17fc8                 | ' 
17fc8                 | ' ''--------------------------------Error strings -------------------------------------
17fc8                 | ' sub init_audio
17fc8                 | _init_audio
17fc8     05 4A 05 F6 | 	mov	COUNT_, #5
17fcc     A8 00 A0 FD | 	call	#pushregs_
17fd0     00 C0 1F FF 
17fd4     00 1E 06 F6 | 	mov	local01, ##1065353216
17fd8                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
17fd8     00 20 06 F6 | 	mov	local02, #0
17fdc                 | LR__1900
17fdc     10 23 02 F6 | 	mov	local03, local02
17fe0     01 22 66 F0 | 	shl	local03, #1
17fe4     0C 00 00 FF 
17fe8     CC E4 05 F1 | 	add	objptr, ##6348
17fec     F2 22 02 F1 | 	add	local03, objptr
17ff0     58 7F 23 FF 
17ff4     00 24 06 F6 | 	mov	local04, ##1191096320
17ff8     0C 00 00 FF 
17ffc     CC E4 85 F1 | 	sub	objptr, ##6348
18000     10 13 52 F6 | 	abs	arg01, local02 wc
18004     1F 26 C6 C9 |  if_b	decod	local05, #31
18008     00 26 06 36 |  if_ae	mov	local05, #0
1800c     60 6A B0 FD | 	call	#__system___float_fromuns
18010     13 FB 61 F5 | 	xor	result1, local05
18014     FD 12 02 F6 | 	mov	arg01, result1
18018     87 24 20 FF 
1801c     DB 15 06 F6 | 	mov	arg02, ##1078530011
18020     50 6E B0 FD | 	call	#__system___float_mul
18024     FD 12 02 F6 | 	mov	arg01, result1
18028     00 00 22 FF 
1802c     00 14 06 F6 | 	mov	arg02, ##1140850688
18030     44 70 B0 FD | 	call	#__system___float_div
18034     FD 12 02 F6 | 	mov	arg01, result1
18038     74 77 B0 FD | 	call	#__system____builtin_sinf
1803c     FD 14 02 F6 | 	mov	arg02, result1
18040     12 13 02 F6 | 	mov	arg01, local04
18044     2C 6E B0 FD | 	call	#__system___float_mul
18048     FD 12 02 F6 | 	mov	arg01, result1
1804c     01 14 06 F6 | 	mov	arg02, #1
18050     E8 72 B0 FD | 	call	#__system___float_tointeger
18054     11 FB 51 FC | 	wrword	result1, local03
18058     01 20 06 F1 | 	add	local02, #1
1805c     02 00 00 FF 
18060     00 20 56 F2 | 	cmps	local02, ##1024 wc
18064     74 FF 9F CD |  if_b	jmp	#LR__1900
18068                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
18068     00 20 06 F6 | 	mov	local02, #0
1806c     10 00 00 FF 
18070     CC E4 05 F1 | 	add	objptr, ##8396
18074     97 6A 48 FB | 	callpa	#(@LR__1904-@LR__1901)>>2,fcache_load_ptr_
18078                 | LR__1901
18078     10 23 02 F6 | 	mov	local03, local02
1807c     01 22 66 F0 | 	shl	local03, #1
18080     F2 22 02 F1 | 	add	local03, objptr
18084     10 27 02 F6 | 	mov	local05, local02
18088     07 26 66 F0 | 	shl	local05, #7
1808c     10 27 82 F1 | 	sub	local05, local02
18090     C0 FF 7F FF 
18094     00 25 06 F6 | 	mov	local04, ##-32512
18098     13 25 02 F1 | 	add	local04, local05
1809c     11 25 52 FC | 	wrword	local04, local03
180a0     09 22 C6 F9 | 	decod	local03, #9
180a4     10 23 02 F1 | 	add	local03, local02
180a8     01 22 66 F0 | 	shl	local03, #1
180ac     F2 22 02 F1 | 	add	local03, objptr
180b0     10 25 02 F6 | 	mov	local04, local02
180b4     01 24 66 F0 | 	shl	local04, #1
180b8     F2 24 02 F1 | 	add	local04, objptr
180bc     12 25 E2 FA | 	rdword	local04, local04
180c0     0F 24 66 F7 | 	signx	local04, #15
180c4     12 25 62 F6 | 	neg	local04, local04
180c8     11 25 52 FC | 	wrword	local04, local03
180cc     01 20 06 F1 | 	add	local02, #1
180d0     01 00 00 FF 
180d4     00 20 56 F2 | 	cmps	local02, ##512 wc
180d8     9C FF 9F CD |  if_b	jmp	#LR__1901
180dc                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
180dc     00 20 06 F6 | 	mov	local02, #0
180e0     04 00 00 FF 
180e4     00 E4 05 F1 | 	add	objptr, ##2048
180e8                 | LR__1902
180e8     10 23 02 F6 | 	mov	local03, local02
180ec     01 22 66 F0 | 	shl	local03, #1
180f0     F2 22 02 F1 | 	add	local03, objptr
180f4     10 27 02 F6 | 	mov	local05, local02
180f8     06 26 66 F0 | 	shl	local05, #6
180fc     10 27 82 F1 | 	sub	local05, local02
18100     C1 FF 7F FF 
18104     00 24 06 F6 | 	mov	local04, ##-32256
18108     13 25 02 F1 | 	add	local04, local05
1810c     11 25 52 FC | 	wrword	local04, local03
18110     01 20 06 F1 | 	add	local02, #1
18114     02 00 00 FF 
18118     00 20 56 F2 | 	cmps	local02, ##1024 wc
1811c     C8 FF 9F CD |  if_b	jmp	#LR__1902
18120                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
18120     00 20 06 F6 | 	mov	local02, #0
18124     04 00 00 FF 
18128     00 E4 05 F1 | 	add	objptr, ##2048
1812c                 | LR__1903
1812c     10 23 02 F6 | 	mov	local03, local02
18130     01 22 66 F0 | 	shl	local03, #1
18134     F2 22 02 F1 | 	add	local03, objptr
18138     40 00 80 FF 
1813c     11 51 59 FC | 	wrword	##32936, local03
18140     01 20 06 F1 | 	add	local02, #1
18144     80 20 56 F2 | 	cmps	local02, #128 wc
18148     E0 FF 9F CD |  if_b	jmp	#LR__1903
1814c                 | LR__1904
1814c     80 20 06 F6 | 	mov	local02, #128
18150     97 68 48 FB | 	callpa	#(@LR__1910-@LR__1905)>>2,fcache_load_ptr_
18154                 | LR__1905
18154     10 23 02 F6 | 	mov	local03, local02
18158     01 22 66 F0 | 	shl	local03, #1
1815c     F2 22 02 F1 | 	add	local03, objptr
18160     3F 00 80 FF 
18164     11 B1 5A FC | 	wrword	##32600, local03
18168     01 20 06 F1 | 	add	local02, #1
1816c     02 00 00 FF 
18170     00 20 16 F2 | 	cmp	local02, ##1024 wc
18174     DC FF 9F CD |  if_b	jmp	#LR__1905
18178                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
18178     00 20 06 F6 | 	mov	local02, #0
1817c     04 00 00 FF 
18180     00 E4 05 F1 | 	add	objptr, ##2048
18184                 | LR__1906
18184     10 23 02 F6 | 	mov	local03, local02
18188     01 22 66 F0 | 	shl	local03, #1
1818c     F2 22 02 F1 | 	add	local03, objptr
18190     40 00 80 FF 
18194     11 51 59 FC | 	wrword	##32936, local03
18198     01 20 06 F1 | 	add	local02, #1
1819c     01 00 00 FF 
181a0     00 20 56 F2 | 	cmps	local02, ##512 wc
181a4     DC FF 9F CD |  if_b	jmp	#LR__1906
181a8     09 20 C6 F9 | 	decod	local02, #9
181ac                 | LR__1907
181ac     10 23 02 F6 | 	mov	local03, local02
181b0     01 22 66 F0 | 	shl	local03, #1
181b4     F2 22 02 F1 | 	add	local03, objptr
181b8     3F 00 80 FF 
181bc     11 B1 5A FC | 	wrword	##32600, local03
181c0     01 20 06 F1 | 	add	local02, #1
181c4     02 00 00 FF 
181c8     00 20 16 F2 | 	cmp	local02, ##1024 wc
181cc     DC FF 9F CD |  if_b	jmp	#LR__1907
181d0                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
181d0     00 20 06 F6 | 	mov	local02, #0
181d4     04 00 00 FF 
181d8     00 E4 05 F1 | 	add	objptr, ##2048
181dc                 | LR__1908
181dc     10 23 02 F6 | 	mov	local03, local02
181e0     01 22 66 F0 | 	shl	local03, #1
181e4     F2 22 02 F1 | 	add	local03, objptr
181e8     40 00 80 FF 
181ec     11 51 59 FC | 	wrword	##32936, local03
181f0     01 20 06 F1 | 	add	local02, #1
181f4     00 21 56 F2 | 	cmps	local02, #256 wc
181f8     E0 FF 9F CD |  if_b	jmp	#LR__1908
181fc     00 21 06 F6 | 	mov	local02, #256
18200                 | LR__1909
18200     10 23 02 F6 | 	mov	local03, local02
18204     01 22 66 F0 | 	shl	local03, #1
18208     F2 22 02 F1 | 	add	local03, objptr
1820c     3F 00 80 FF 
18210     11 B1 5A FC | 	wrword	##32600, local03
18214     01 20 06 F1 | 	add	local02, #1
18218     02 00 00 FF 
1821c     00 20 16 F2 | 	cmp	local02, ##1024 wc
18220     DC FF 9F CD |  if_b	jmp	#LR__1909
18224                 | LR__1910
18224                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
18224     00 20 06 F6 | 	mov	local02, #0
18228     04 00 00 FF 
1822c     00 E4 05 F1 | 	add	objptr, ##2048
18230     14 00 00 FF 
18234     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
18238     97 1C 48 FB | 	callpa	#(@LR__1912-@LR__1911)>>2,fcache_load_ptr_
1823c                 | LR__1911
1823c     10 23 02 F6 | 	mov	local03, local02
18240     01 22 66 F0 | 	shl	local03, #1
18244     F2 22 02 F1 | 	add	local03, objptr
18248     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1824c     10 12 06 F1 | 	add	arg01, #16
18250     10 FB 01 F6 | 	mov	result1, local02
18254     01 FA 65 F0 | 	shl	result1, #1
18258     FD 12 02 F1 | 	add	arg01, result1
1825c     09 FB E1 FA | 	rdword	result1, arg01
18260     11 FB 51 FC | 	wrword	result1, local03
18264     01 20 06 F1 | 	add	local02, #1
18268     02 00 00 FF 
1826c     00 20 56 F2 | 	cmps	local02, ##1024 wc
18270     C8 FF 9F CD |  if_b	jmp	#LR__1911
18274                 | LR__1912
18274                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
18274     00 20 06 F6 | 	mov	local02, #0
18278     04 00 00 FF 
1827c     00 E4 05 F1 | 	add	objptr, ##2048
18280     04 00 00 FF 
18284     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
18288     97 1C 48 FB | 	callpa	#(@LR__1914-@LR__1913)>>2,fcache_load_ptr_
1828c                 | LR__1913
1828c     10 23 02 F6 | 	mov	local03, local02
18290     01 22 66 F0 | 	shl	local03, #1
18294     F2 22 02 F1 | 	add	local03, objptr
18298     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1829c     10 12 06 F1 | 	add	arg01, #16
182a0     10 FB 01 F6 | 	mov	result1, local02
182a4     01 FA 65 F0 | 	shl	result1, #1
182a8     FD 12 02 F1 | 	add	arg01, result1
182ac     09 FB E1 FA | 	rdword	result1, arg01
182b0     11 FB 51 FC | 	wrword	result1, local03
182b4     01 20 06 F1 | 	add	local02, #1
182b8     02 00 00 FF 
182bc     00 20 56 F2 | 	cmps	local02, ##1024 wc
182c0     C8 FF 9F CD |  if_b	jmp	#LR__1913
182c4                 | LR__1914
182c4     10 00 00 FF 
182c8     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
182cc                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
182cc     00 20 06 F6 | 	mov	local02, #0
182d0     04 00 00 FF 
182d4     00 E4 05 F1 | 	add	objptr, ##2048
182d8     97 18 48 FB | 	callpa	#(@LR__1916-@LR__1915)>>2,fcache_load_ptr_
182dc                 | LR__1915
182dc     10 23 02 F6 | 	mov	local03, local02
182e0     01 22 66 F0 | 	shl	local03, #1
182e4     F2 22 02 F1 | 	add	local03, objptr
182e8     10 27 02 F6 | 	mov	local05, local02
182ec     08 26 66 F0 | 	shl	local05, #8
182f0     7F 00 00 FF 
182f4     00 25 06 F6 | 	mov	local04, ##65280
182f8     13 25 82 F1 | 	sub	local04, local05
182fc     11 25 52 FC | 	wrword	local04, local03
18300     01 20 06 F1 | 	add	local02, #1
18304     00 21 56 F2 | 	cmps	local02, #256 wc
18308     D0 FF 9F CD |  if_b	jmp	#LR__1915
1830c                 | LR__1916
1830c     2C 00 00 FF 
18310     CC E4 85 F1 | 	sub	objptr, ##22732
18314                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
18314     00 20 06 F6 | 	mov	local02, #0
18318                 | LR__1917
18318     10 23 02 F6 | 	mov	local03, local02
1831c     01 22 66 F0 | 	shl	local03, #1
18320     2D 00 00 FF 
18324     CC E4 05 F1 | 	add	objptr, ##23244
18328     F2 22 02 F1 | 	add	local03, objptr
1832c     80 BF 23 FF 
18330     00 12 06 F6 | 	mov	arg01, ##1199505408
18334     0F 15 02 F6 | 	mov	arg02, local01
18338     2D 00 00 FF 
1833c     CC E4 85 F1 | 	sub	objptr, ##23244
18340     30 6B B0 FD | 	call	#__system___float_mul
18344     FD 12 02 F6 | 	mov	arg01, result1
18348     01 14 06 F6 | 	mov	arg02, #1
1834c     EC 6F B0 FD | 	call	#__system___float_tointeger
18350     11 FB 51 FC | 	wrword	result1, local03
18354     0F 13 02 F6 | 	mov	arg01, local01
18358     CC BC 1F FF 
1835c     9A 15 06 F6 | 	mov	arg02, ##1064933786
18360     10 6B B0 FD | 	call	#__system___float_mul
18364     FD 1E 02 F6 | 	mov	local01, result1
18368     01 20 06 F1 | 	add	local02, #1
1836c     00 21 56 F2 | 	cmps	local02, #256 wc
18370     A4 FF 9F CD |  if_b	jmp	#LR__1917
18374     2E 00 00 FF 
18378     CA E4 05 F1 | 	add	objptr, ##23754
1837c     F2 00 58 FC | 	wrword	#0, objptr
18380                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
18380     00 20 06 F6 | 	mov	local02, #0
18384     02 E4 05 F1 | 	add	objptr, #2
18388     97 10 48 FB | 	callpa	#(@LR__1919-@LR__1918)>>2,fcache_load_ptr_
1838c                 | LR__1918
1838c     10 23 02 F6 | 	mov	local03, local02
18390     01 22 66 F0 | 	shl	local03, #1
18394     F2 22 02 F1 | 	add	local03, objptr
18398     7F 00 80 FF 
1839c     11 01 5A FC | 	wrword	##65280, local03
183a0     01 20 06 F1 | 	add	local02, #1
183a4     FF 20 56 F2 | 	cmps	local02, #255 wc
183a8     E0 FF 9F CD |  if_b	jmp	#LR__1918
183ac                 | LR__1919
183ac     FE E5 05 F1 | 	add	objptr, #510
183b0     F2 00 58 FC | 	wrword	#0, objptr
183b4                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
183b4     00 20 06 F6 | 	mov	local02, #0
183b8     02 E4 05 F1 | 	add	objptr, #2
183bc     97 52 48 FB | 	callpa	#(@LR__1924-@LR__1920)>>2,fcache_load_ptr_
183c0                 | LR__1920
183c0     10 23 02 F6 | 	mov	local03, local02
183c4     01 22 66 F0 | 	shl	local03, #1
183c8     F2 22 02 F1 | 	add	local03, objptr
183cc     10 25 02 F6 | 	mov	local04, local02
183d0     0C 24 66 F0 | 	shl	local04, #12
183d4     11 25 52 FC | 	wrword	local04, local03
183d8     01 20 06 F1 | 	add	local02, #1
183dc     10 20 56 F2 | 	cmps	local02, #16 wc
183e0     DC FF 9F CD |  if_b	jmp	#LR__1920
183e4                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
183e4     10 20 06 F6 | 	mov	local02, #16
183e8                 | LR__1921
183e8     10 23 02 F6 | 	mov	local03, local02
183ec     01 22 66 F0 | 	shl	local03, #1
183f0     F2 22 02 F1 | 	add	local03, objptr
183f4     7F 00 80 FF 
183f8     11 01 5A FC | 	wrword	##65280, local03
183fc     01 20 06 F1 | 	add	local02, #1
18400     F0 20 16 F2 | 	cmp	local02, #240 wc
18404     E0 FF 9F CD |  if_b	jmp	#LR__1921
18408                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
18408     F0 20 06 F6 | 	mov	local02, #240
1840c                 | LR__1922
1840c     10 23 02 F6 | 	mov	local03, local02
18410     01 22 66 F0 | 	shl	local03, #1
18414     F2 22 02 F1 | 	add	local03, objptr
18418     FF 26 06 F6 | 	mov	local05, #255
1841c     10 27 82 F1 | 	sub	local05, local02
18420     0C 26 66 F0 | 	shl	local05, #12
18424     11 27 52 FC | 	wrword	local05, local03
18428     01 20 06 F1 | 	add	local02, #1
1842c     00 21 16 F2 | 	cmp	local02, #256 wc
18430     D8 FF 9F CD |  if_b	jmp	#LR__1922
18434                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
18434     00 20 06 F6 | 	mov	local02, #0
18438     01 00 00 FF 
1843c     00 E4 05 F1 | 	add	objptr, ##512
18440                 | LR__1923
18440     10 23 02 F6 | 	mov	local03, local02
18444     01 22 66 F0 | 	shl	local03, #1
18448     F2 22 02 F1 | 	add	local03, objptr
1844c     10 25 02 F6 | 	mov	local04, local02
18450     08 24 66 F0 | 	shl	local04, #8
18454     11 25 52 FC | 	wrword	local04, local03
18458     01 20 06 F1 | 	add	local02, #1
1845c     00 21 56 F2 | 	cmps	local02, #256 wc
18460     DC FF 9F CD |  if_b	jmp	#LR__1923
18464                 | LR__1924
18464     FE E5 05 F1 | 	add	objptr, #510
18468     F2 00 58 FC | 	wrword	#0, objptr
1846c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1846c     00 20 06 F6 | 	mov	local02, #0
18470     02 E4 05 F1 | 	add	objptr, #2
18474     97 6A 48 FB | 	callpa	#(@LR__1929-@LR__1925)>>2,fcache_load_ptr_
18478                 | LR__1925
18478     10 23 02 F6 | 	mov	local03, local02
1847c     01 22 66 F0 | 	shl	local03, #1
18480     F2 22 02 F1 | 	add	local03, objptr
18484     10 25 02 F6 | 	mov	local04, local02
18488     04 24 66 F0 | 	shl	local04, #4
1848c     10 25 02 F1 | 	add	local04, local02
18490     04 24 66 F0 | 	shl	local04, #4
18494     11 25 52 FC | 	wrword	local04, local03
18498     01 20 06 F1 | 	add	local02, #1
1849c     F0 20 56 F2 | 	cmps	local02, #240 wc
184a0     D4 FF 9F CD |  if_b	jmp	#LR__1925
184a4     F0 20 06 F6 | 	mov	local02, #240
184a8                 | LR__1926
184a8     10 23 02 F6 | 	mov	local03, local02
184ac     01 22 66 F0 | 	shl	local03, #1
184b0     F2 22 02 F1 | 	add	local03, objptr
184b4     FF 26 06 F6 | 	mov	local05, #255
184b8     10 27 82 F1 | 	sub	local05, local02
184bc     0C 26 66 F0 | 	shl	local05, #12
184c0     11 27 52 FC | 	wrword	local05, local03
184c4     01 20 06 F1 | 	add	local02, #1
184c8     00 21 16 F2 | 	cmp	local02, #256 wc
184cc     D8 FF 9F CD |  if_b	jmp	#LR__1926
184d0                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
184d0     00 20 06 F6 | 	mov	local02, #0
184d4     01 00 00 FF 
184d8     00 E4 05 F1 | 	add	objptr, ##512
184dc                 | LR__1927
184dc     10 23 02 F6 | 	mov	local03, local02
184e0     01 22 66 F0 | 	shl	local03, #1
184e4     F2 22 02 F1 | 	add	local03, objptr
184e8     10 25 02 F6 | 	mov	local04, local02
184ec     09 24 66 F0 | 	shl	local04, #9
184f0     11 25 52 FC | 	wrword	local04, local03
184f4     FF 22 06 F6 | 	mov	local03, #255
184f8     10 23 82 F1 | 	sub	local03, local02
184fc     01 22 66 F0 | 	shl	local03, #1
18500     F2 22 02 F1 | 	add	local03, objptr
18504     10 25 02 F6 | 	mov	local04, local02
18508     09 24 66 F0 | 	shl	local04, #9
1850c     11 25 52 FC | 	wrword	local04, local03
18510     01 20 06 F1 | 	add	local02, #1
18514     80 20 56 F2 | 	cmps	local02, #128 wc
18518     C0 FF 9F CD |  if_b	jmp	#LR__1927
1851c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1851c     00 20 06 F6 | 	mov	local02, #0
18520     01 00 00 FF 
18524     00 E4 05 F1 | 	add	objptr, ##512
18528                 | LR__1928
18528     10 23 02 F6 | 	mov	local03, local02
1852c     01 22 66 F0 | 	shl	local03, #1
18530     F2 22 02 F1 | 	add	local03, objptr
18534     10 25 02 F6 | 	mov	local04, local02
18538     0D 24 66 F0 | 	shl	local04, #13
1853c     11 25 52 FC | 	wrword	local04, local03
18540     01 20 06 F1 | 	add	local02, #1
18544     08 20 56 F2 | 	cmps	local02, #8 wc
18548     DC FF 9F CD |  if_b	jmp	#LR__1928
1854c                 | LR__1929
1854c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1854c     08 20 06 F6 | 	mov	local02, #8
18550     97 42 48 FB | 	callpa	#(@LR__1933-@LR__1930)>>2,fcache_load_ptr_
18554                 | LR__1930
18554     10 23 02 F6 | 	mov	local03, local02
18558     01 22 66 F0 | 	shl	local03, #1
1855c     F2 22 02 F1 | 	add	local03, objptr
18560     10 1F 02 F6 | 	mov	local01, local02
18564     08 1E 86 F1 | 	sub	local01, #8
18568     0B 1E 66 F0 | 	shl	local01, #11
1856c     7F 00 00 FF 
18570     00 25 06 F6 | 	mov	local04, ##65280
18574     0F 25 82 F1 | 	sub	local04, local01
18578     11 25 52 FC | 	wrword	local04, local03
1857c     01 20 06 F1 | 	add	local02, #1
18580     18 20 16 F2 | 	cmp	local02, #24 wc
18584     CC FF 9F CD |  if_b	jmp	#LR__1930
18588                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
18588     18 20 06 F6 | 	mov	local02, #24
1858c                 | LR__1931
1858c     10 23 02 F6 | 	mov	local03, local02
18590     01 22 66 F0 | 	shl	local03, #1
18594     F2 22 02 F1 | 	add	local03, objptr
18598     40 00 80 FF 
1859c     11 01 58 FC | 	wrword	##32768, local03
185a0     01 20 06 F1 | 	add	local02, #1
185a4     81 20 16 F2 | 	cmp	local02, #129 wc
185a8     E0 FF 9F CD |  if_b	jmp	#LR__1931
185ac                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
185ac     81 20 06 F6 | 	mov	local02, #129
185b0                 | LR__1932
185b0     10 23 02 F6 | 	mov	local03, local02
185b4     01 22 66 F0 | 	shl	local03, #1
185b8     F2 22 02 F1 | 	add	local03, objptr
185bc     FF 26 06 F6 | 	mov	local05, #255
185c0     10 27 82 F1 | 	sub	local05, local02
185c4     08 26 66 F0 | 	shl	local05, #8
185c8     11 27 52 FC | 	wrword	local05, local03
185cc     01 20 06 F1 | 	add	local02, #1
185d0     00 21 16 F2 | 	cmp	local02, #256 wc
185d4     D8 FF 9F CD |  if_b	jmp	#LR__1932
185d8                 | LR__1933
185d8     47 00 00 FF 
185dc     BA E5 05 F1 | 	add	objptr, ##36794
185e0     F2 00 59 FC | 	wrword	#128, objptr
185e4     7B 00 00 FF 
185e8     86 E4 85 F1 | 	sub	objptr, ##63110
185ec                 | ' for i=0 to 7
185ec     00 20 06 F6 | 	mov	local02, #0
185f0     97 8E 48 FB | 	callpa	#(@LR__1935-@LR__1934)>>2,fcache_load_ptr_
185f4                 | LR__1934
185f4     10 23 02 F6 | 	mov	local03, local02
185f8     01 22 66 F0 | 	shl	local03, #1
185fc     10 23 02 F1 | 	add	local03, local02
18600     03 22 66 F0 | 	shl	local03, #3
18604     34 00 00 FF 
18608     2C E5 05 F1 | 	add	objptr, ##26924
1860c     F2 22 02 F1 | 	add	local03, objptr
18610     00 EE A1 FF 
18614     11 01 68 FC | 	wrlong	##1138491392, local03
18618     10 23 02 F6 | 	mov	local03, local02
1861c     01 22 66 F0 | 	shl	local03, #1
18620     10 23 02 F1 | 	add	local03, local02
18624     03 22 66 F0 | 	shl	local03, #3
18628     F2 22 02 F1 | 	add	local03, objptr
1862c     04 22 06 F1 | 	add	local03, #4
18630     11 21 42 FC | 	wrbyte	local02, local03
18634     10 23 02 F6 | 	mov	local03, local02
18638     01 22 66 F0 | 	shl	local03, #1
1863c     10 23 02 F1 | 	add	local03, local02
18640     03 22 66 F0 | 	shl	local03, #3
18644     F2 22 02 F1 | 	add	local03, objptr
18648     05 22 06 F1 | 	add	local03, #5
1864c     11 21 42 FC | 	wrbyte	local02, local03
18650     10 23 02 F6 | 	mov	local03, local02
18654     01 22 66 F0 | 	shl	local03, #1
18658     10 23 02 F1 | 	add	local03, local02
1865c     03 22 66 F0 | 	shl	local03, #3
18660     F2 22 02 F1 | 	add	local03, objptr
18664     06 22 06 F1 | 	add	local03, #6
18668     11 01 58 FC | 	wrword	#0, local03
1866c     10 23 02 F6 | 	mov	local03, local02
18670     01 22 66 F0 | 	shl	local03, #1
18674     10 23 02 F1 | 	add	local03, local02
18678     03 22 66 F0 | 	shl	local03, #3
1867c     F2 22 02 F1 | 	add	local03, objptr
18680     08 22 06 F1 | 	add	local03, #8
18684     00 C0 9F FF 
18688     11 01 68 FC | 	wrlong	##1065353216, local03
1868c     10 23 02 F6 | 	mov	local03, local02
18690     01 22 66 F0 | 	shl	local03, #1
18694     10 23 02 F1 | 	add	local03, local02
18698     03 22 66 F0 | 	shl	local03, #3
1869c     F2 22 02 F1 | 	add	local03, objptr
186a0     0C 22 06 F1 | 	add	local03, #12
186a4     00 40 A0 FF 
186a8     11 01 68 FC | 	wrlong	##1082130432, local03
186ac     10 23 02 F6 | 	mov	local03, local02
186b0     01 22 66 F0 | 	shl	local03, #1
186b4     10 23 02 F1 | 	add	local03, local02
186b8     03 22 66 F0 | 	shl	local03, #3
186bc     F2 22 02 F1 | 	add	local03, objptr
186c0     10 22 06 F1 | 	add	local03, #16
186c4     11 01 68 FC | 	wrlong	#0, local03
186c8     10 23 02 F6 | 	mov	local03, local02
186cc     01 22 66 F0 | 	shl	local03, #1
186d0     10 23 02 F1 | 	add	local03, local02
186d4     03 22 66 F0 | 	shl	local03, #3
186d8     F2 22 02 F1 | 	add	local03, objptr
186dc     14 22 06 F1 | 	add	local03, #20
186e0     11 FF 59 FC | 	wrword	#255, local03
186e4     10 23 02 F6 | 	mov	local03, local02
186e8     01 22 66 F0 | 	shl	local03, #1
186ec     46 00 00 FF 
186f0     4C E5 05 F1 | 	add	objptr, ##36172
186f4     F2 22 02 F1 | 	add	local03, objptr
186f8     11 FF 59 FC | 	wrword	#255, local03
186fc     01 20 06 F1 | 	add	local02, #1
18700     08 20 56 F2 | 	cmps	local02, #8 wc
18704     7B 00 00 FF 
18708     78 E4 85 F1 | 	sub	objptr, ##63096
1870c     E4 FE 9F CD |  if_b	jmp	#LR__1934
18710                 | LR__1935
18710     00 6E 20 FF 
18714     00 1E 06 F6 | 	mov	local01, ##1088159744
18718                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
18718     03 26 06 F6 | 	mov	local05, #3
1871c                 | LR__1936
1871c     0F 13 02 F6 | 	mov	arg01, local01
18720     CE C3 1F FF 
18724     7D 14 06 F6 | 	mov	arg02, ##1065852029
18728     48 67 B0 FD | 	call	#__system___float_mul
1872c     FD 1E 02 F6 | 	mov	local01, result1
18730     FA 27 6E FB | 	djnz	local05, #LR__1936
18734     00 20 06 F6 | 	mov	local02, #0
18738                 | LR__1937
18738     10 27 02 F6 | 	mov	local05, local02
1873c     02 26 66 F0 | 	shl	local05, #2
18740     34 00 00 FF 
18744     CC E4 05 F1 | 	add	objptr, ##26828
18748     F2 26 02 F1 | 	add	local05, objptr
1874c     13 1F 62 FC | 	wrlong	local01, local05
18750     0F 13 02 F6 | 	mov	arg01, local01
18754     CE C3 1F FF 
18758     7D 14 06 F6 | 	mov	arg02, ##1065852029
1875c     34 00 00 FF 
18760     CC E4 85 F1 | 	sub	objptr, ##26828
18764     0C 67 B0 FD | 	call	#__system___float_mul
18768     FD 1E 02 F6 | 	mov	local01, result1
1876c     01 20 06 F1 | 	add	local02, #1
18770     0C 20 56 F2 | 	cmps	local02, #12 wc
18774     C0 FF 9F CD |  if_b	jmp	#LR__1937
18778     7B 00 00 FF 
1877c     86 E4 05 F1 | 	add	objptr, ##63110
18780     F2 00 59 FC | 	wrword	#128, objptr
18784     02 E4 85 F1 | 	sub	objptr, #2
18788     F2 00 59 FC | 	wrword	#128, objptr
1878c     7B 00 00 FF 
18790     84 E4 85 F1 | 	sub	objptr, ##63108
18794     A7 F0 03 F6 | 	mov	ptra, fp
18798     B2 00 A0 FD | 	call	#popregs_
1879c                 | _init_audio_ret
1879c     2D 00 64 FD | 	ret
187a0                 | 
187a0                 | ' 
187a0                 | ' 
187a0                 | ' function getnoteval(token) as single
187a0                 | _getnoteval
187a0     02 4A 05 F6 | 	mov	COUNT_, #2
187a4     A8 00 A0 FD | 	call	#pushregs_
187a8     01 00 00 FF 
187ac     00 13 86 F1 | 	sub	arg01, ##768
187b0     09 15 52 F6 | 	abs	arg02, arg01 wc
187b4     0C 14 16 FD | 	qdiv	arg02, #12
187b8     34 00 00 FF 
187bc     CC E4 05 F1 | 	add	objptr, ##26828
187c0     19 14 62 FD | 	getqy	arg02
187c4     0A 15 82 F6 | 	negc	arg02, arg02
187c8     02 14 66 F0 | 	shl	arg02, #2
187cc     F2 14 02 F1 | 	add	arg02, objptr
187d0     0A 1F 02 FB | 	rdlong	local01, arg02
187d4     09 15 52 F6 | 	abs	arg02, arg01 wc
187d8     0C 14 16 FD | 	qdiv	arg02, #12
187dc     34 00 00 FF 
187e0     CC E4 85 F1 | 	sub	objptr, ##26828
187e4     01 12 06 F6 | 	mov	arg01, #1
187e8                 | ' noteexp=1+(note/12) 
187e8                 | ' return (2.0^noteexp)*notebase
187e8     18 14 62 FD | 	getqx	arg02
187ec     0A 13 82 F3 | 	sumc	arg01, arg02
187f0     09 13 52 F6 | 	abs	arg01, arg01 wc
187f4     1F 20 C6 C9 |  if_b	decod	local02, #31
187f8     00 20 06 36 |  if_ae	mov	local02, #0
187fc     70 62 B0 FD | 	call	#__system___float_fromuns
18800     10 FB 61 F5 | 	xor	result1, local02
18804     FD 14 02 F6 | 	mov	arg02, result1
18808     1E 12 C6 F9 | 	decod	arg01, #30
1880c     48 75 B0 FD | 	call	#__system____builtin_powf
18810     FD 12 02 F6 | 	mov	arg01, result1
18814     0F 15 02 F6 | 	mov	arg02, local01
18818     58 66 B0 FD | 	call	#__system___float_mul
1881c     A7 F0 03 F6 | 	mov	ptra, fp
18820     B2 00 A0 FD | 	call	#popregs_
18824                 | _getnoteval_ret
18824     2D 00 64 FD | 	ret
18828                 | 
18828                 | ' 
18828                 | ' 
18828                 | ' 
18828                 | ' sub init_error_strings
18828                 | _init_error_strings
18828     5F 01 00 FF 
1882c     E3 01 06 F6 | 	mov	_var01, ##@LR__4964
18830     65 00 00 FF 
18834     60 E4 05 F1 | 	add	objptr, ##51808
18838     F2 00 62 FC | 	wrlong	_var01, objptr
1883c     5F 01 00 FF 
18840     E4 01 06 F6 | 	mov	_var01, ##@LR__4965
18844     04 E4 05 F1 | 	add	objptr, #4
18848     F2 00 62 FC | 	wrlong	_var01, objptr
1884c     60 01 00 FF 
18850     09 00 06 F6 | 	mov	_var01, ##@LR__4966
18854     04 E4 05 F1 | 	add	objptr, #4
18858     F2 00 62 FC | 	wrlong	_var01, objptr
1885c     60 01 00 FF 
18860     2A 00 06 F6 | 	mov	_var01, ##@LR__4967
18864     04 E4 05 F1 | 	add	objptr, #4
18868     F2 00 62 FC | 	wrlong	_var01, objptr
1886c     60 01 00 FF 
18870     44 00 06 F6 | 	mov	_var01, ##@LR__4968
18874     04 E4 05 F1 | 	add	objptr, #4
18878     F2 00 62 FC | 	wrlong	_var01, objptr
1887c     60 01 00 FF 
18880     60 00 06 F6 | 	mov	_var01, ##@LR__4969
18884     04 E4 05 F1 | 	add	objptr, #4
18888     F2 00 62 FC | 	wrlong	_var01, objptr
1888c     60 01 00 FF 
18890     82 00 06 F6 | 	mov	_var01, ##@LR__4970
18894     04 E4 05 F1 | 	add	objptr, #4
18898     F2 00 62 FC | 	wrlong	_var01, objptr
1889c     60 01 00 FF 
188a0     B0 00 06 F6 | 	mov	_var01, ##@LR__4971
188a4     04 E4 05 F1 | 	add	objptr, #4
188a8     F2 00 62 FC | 	wrlong	_var01, objptr
188ac     60 01 00 FF 
188b0     DB 00 06 F6 | 	mov	_var01, ##@LR__4972
188b4     04 E4 05 F1 | 	add	objptr, #4
188b8     F2 00 62 FC | 	wrlong	_var01, objptr
188bc     60 01 00 FF 
188c0     F4 00 06 F6 | 	mov	_var01, ##@LR__4973
188c4     04 E4 05 F1 | 	add	objptr, #4
188c8     F2 00 62 FC | 	wrlong	_var01, objptr
188cc     60 01 00 FF 
188d0     15 01 06 F6 | 	mov	_var01, ##@LR__4974
188d4     04 E4 05 F1 | 	add	objptr, #4
188d8     F2 00 62 FC | 	wrlong	_var01, objptr
188dc     60 01 00 FF 
188e0     2C 01 06 F6 | 	mov	_var01, ##@LR__4975
188e4     04 E4 05 F1 | 	add	objptr, #4
188e8     F2 00 62 FC | 	wrlong	_var01, objptr
188ec     60 01 00 FF 
188f0     4A 01 06 F6 | 	mov	_var01, ##@LR__4976
188f4     04 E4 05 F1 | 	add	objptr, #4
188f8     F2 00 62 FC | 	wrlong	_var01, objptr
188fc     60 01 00 FF 
18900     6E 01 06 F6 | 	mov	_var01, ##@LR__4977
18904     04 E4 05 F1 | 	add	objptr, #4
18908     F2 00 62 FC | 	wrlong	_var01, objptr
1890c     60 01 00 FF 
18910     95 01 06 F6 | 	mov	_var01, ##@LR__4978
18914     04 E4 05 F1 | 	add	objptr, #4
18918     F2 00 62 FC | 	wrlong	_var01, objptr
1891c     60 01 00 FF 
18920     B1 01 06 F6 | 	mov	_var01, ##@LR__4979
18924     04 E4 05 F1 | 	add	objptr, #4
18928     F2 00 62 FC | 	wrlong	_var01, objptr
1892c     60 01 00 FF 
18930     C2 01 06 F6 | 	mov	_var01, ##@LR__4980
18934     04 E4 05 F1 | 	add	objptr, #4
18938     F2 00 62 FC | 	wrlong	_var01, objptr
1893c     60 01 00 FF 
18940     D2 01 06 F6 | 	mov	_var01, ##@LR__4981
18944     04 E4 05 F1 | 	add	objptr, #4
18948     F2 00 62 FC | 	wrlong	_var01, objptr
1894c     60 01 00 FF 
18950     ED 01 06 F6 | 	mov	_var01, ##@LR__4982
18954     04 E4 05 F1 | 	add	objptr, #4
18958     F2 00 62 FC | 	wrlong	_var01, objptr
1895c     60 01 00 FF 
18960     FF 01 06 F6 | 	mov	_var01, ##@LR__4983
18964     04 E4 05 F1 | 	add	objptr, #4
18968     F2 00 62 FC | 	wrlong	_var01, objptr
1896c     61 01 00 FF 
18970     17 00 06 F6 | 	mov	_var01, ##@LR__4984
18974     04 E4 05 F1 | 	add	objptr, #4
18978     F2 00 62 FC | 	wrlong	_var01, objptr
1897c     61 01 00 FF 
18980     2B 00 06 F6 | 	mov	_var01, ##@LR__4985
18984     04 E4 05 F1 | 	add	objptr, #4
18988     F2 00 62 FC | 	wrlong	_var01, objptr
1898c     61 01 00 FF 
18990     3B 00 06 F6 | 	mov	_var01, ##@LR__4986
18994     04 E4 05 F1 | 	add	objptr, #4
18998     F2 00 62 FC | 	wrlong	_var01, objptr
1899c     61 01 00 FF 
189a0     58 00 06 F6 | 	mov	_var01, ##@LR__4987
189a4     04 E4 05 F1 | 	add	objptr, #4
189a8     F2 00 62 FC | 	wrlong	_var01, objptr
189ac     61 01 00 FF 
189b0     69 00 06 F6 | 	mov	_var01, ##@LR__4988
189b4     04 E4 05 F1 | 	add	objptr, #4
189b8     F2 00 62 FC | 	wrlong	_var01, objptr
189bc     61 01 00 FF 
189c0     7A 00 06 F6 | 	mov	_var01, ##@LR__4989
189c4     04 E4 05 F1 | 	add	objptr, #4
189c8     F2 00 62 FC | 	wrlong	_var01, objptr
189cc     61 01 00 FF 
189d0     A5 00 06 F6 | 	mov	_var01, ##@LR__4990
189d4     04 E4 05 F1 | 	add	objptr, #4
189d8     F2 00 62 FC | 	wrlong	_var01, objptr
189dc     61 01 00 FF 
189e0     C1 00 06 F6 | 	mov	_var01, ##@LR__4991
189e4     04 E4 05 F1 | 	add	objptr, #4
189e8     F2 00 62 FC | 	wrlong	_var01, objptr
189ec     61 01 00 FF 
189f0     D7 00 06 F6 | 	mov	_var01, ##@LR__4992
189f4     04 E4 05 F1 | 	add	objptr, #4
189f8     F2 00 62 FC | 	wrlong	_var01, objptr
189fc     61 01 00 FF 
18a00     E4 00 06 F6 | 	mov	_var01, ##@LR__4993
18a04     04 E4 05 F1 | 	add	objptr, #4
18a08     F2 00 62 FC | 	wrlong	_var01, objptr
18a0c     61 01 00 FF 
18a10     F6 00 06 F6 | 	mov	_var01, ##@LR__4994
18a14     04 E4 05 F1 | 	add	objptr, #4
18a18     F2 00 62 FC | 	wrlong	_var01, objptr
18a1c     61 01 00 FF 
18a20     07 01 06 F6 | 	mov	_var01, ##@LR__4995
18a24     04 E4 05 F1 | 	add	objptr, #4
18a28     F2 00 62 FC | 	wrlong	_var01, objptr
18a2c     61 01 00 FF 
18a30     23 01 06 F6 | 	mov	_var01, ##@LR__4996
18a34     04 E4 05 F1 | 	add	objptr, #4
18a38     F2 00 62 FC | 	wrlong	_var01, objptr
18a3c     61 01 00 FF 
18a40     34 01 06 F6 | 	mov	_var01, ##@LR__4997
18a44     04 E4 05 F1 | 	add	objptr, #4
18a48     F2 00 62 FC | 	wrlong	_var01, objptr
18a4c     61 01 00 FF 
18a50     43 01 06 F6 | 	mov	_var01, ##@LR__4998
18a54     04 E4 05 F1 | 	add	objptr, #4
18a58     F2 00 62 FC | 	wrlong	_var01, objptr
18a5c     61 01 00 FF 
18a60     5E 01 06 F6 | 	mov	_var01, ##@LR__4999
18a64     04 E4 05 F1 | 	add	objptr, #4
18a68     F2 00 62 FC | 	wrlong	_var01, objptr
18a6c     61 01 00 FF 
18a70     92 01 06 F6 | 	mov	_var01, ##@LR__5000
18a74     04 E4 05 F1 | 	add	objptr, #4
18a78     F2 00 62 FC | 	wrlong	_var01, objptr
18a7c     61 01 00 FF 
18a80     AB 01 06 F6 | 	mov	_var01, ##@LR__5001
18a84     04 E4 05 F1 | 	add	objptr, #4
18a88     F2 00 62 FC | 	wrlong	_var01, objptr
18a8c     61 01 00 FF 
18a90     C7 01 06 F6 | 	mov	_var01, ##@LR__5002
18a94     04 E4 05 F1 | 	add	objptr, #4
18a98     F2 00 62 FC | 	wrlong	_var01, objptr
18a9c     61 01 00 FF 
18aa0     E5 01 06 F6 | 	mov	_var01, ##@LR__5003
18aa4     04 E4 05 F1 | 	add	objptr, #4
18aa8     F2 00 62 FC | 	wrlong	_var01, objptr
18aac     61 01 00 FF 
18ab0     FE 01 06 F6 | 	mov	_var01, ##@LR__5004
18ab4     04 E4 05 F1 | 	add	objptr, #4
18ab8     F2 00 62 FC | 	wrlong	_var01, objptr
18abc     62 01 00 FF 
18ac0     1D 00 06 F6 | 	mov	_var01, ##@LR__5005
18ac4     04 E4 05 F1 | 	add	objptr, #4
18ac8     F2 00 62 FC | 	wrlong	_var01, objptr
18acc     62 01 00 FF 
18ad0     2C 00 06 F6 | 	mov	_var01, ##@LR__5006
18ad4     04 E4 05 F1 | 	add	objptr, #4
18ad8     F2 00 62 FC | 	wrlong	_var01, objptr
18adc     62 01 00 FF 
18ae0     5A 00 06 F6 | 	mov	_var01, ##@LR__5007
18ae4     04 E4 05 F1 | 	add	objptr, #4
18ae8     F2 00 62 FC | 	wrlong	_var01, objptr
18aec     62 01 00 FF 
18af0     68 00 06 F6 | 	mov	_var01, ##@LR__5008
18af4     04 E4 05 F1 | 	add	objptr, #4
18af8     F2 00 62 FC | 	wrlong	_var01, objptr
18afc     62 01 00 FF 
18b00     7D 00 06 F6 | 	mov	_var01, ##@LR__5009
18b04     04 E4 05 F1 | 	add	objptr, #4
18b08     F2 00 62 FC | 	wrlong	_var01, objptr
18b0c     62 01 00 FF 
18b10     A1 00 06 F6 | 	mov	_var01, ##@LR__5010
18b14     04 E4 05 F1 | 	add	objptr, #4
18b18     F2 00 62 FC | 	wrlong	_var01, objptr
18b1c     62 01 00 FF 
18b20     B8 00 06 F6 | 	mov	_var01, ##@LR__5011
18b24     04 E4 05 F1 | 	add	objptr, #4
18b28     F2 00 62 FC | 	wrlong	_var01, objptr
18b2c     62 01 00 FF 
18b30     CB 00 06 F6 | 	mov	_var01, ##@LR__5012
18b34     04 E4 05 F1 | 	add	objptr, #4
18b38     F2 00 62 FC | 	wrlong	_var01, objptr
18b3c     62 01 00 FF 
18b40     E2 00 06 F6 | 	mov	_var01, ##@LR__5013
18b44     04 E4 05 F1 | 	add	objptr, #4
18b48     F2 00 62 FC | 	wrlong	_var01, objptr
18b4c     65 00 00 FF 
18b50     24 E5 85 F1 | 	sub	objptr, ##52004
18b54                 | _init_error_strings_ret
18b54     2D 00 64 FD | 	ret
18b58                 | 
18b58                 | '         
18b58                 | ' sub printerror(err as integer)
18b58                 | _printerror
18b58     01 4A 05 F6 | 	mov	COUNT_, #1
18b5c     A8 00 A0 FD | 	call	#pushregs_
18b60     09 1F 02 F6 | 	mov	local01, arg01
18b64     62 01 00 FF 
18b68     FB 12 06 F6 | 	mov	arg01, ##@LR__5014
18b6c     4C 26 B0 FD | 	call	#_hg010b_spin2_write
18b70     0F 13 02 F6 | 	mov	arg01, local01
18b74     44 28 B0 FD | 	call	#_hg010b_spin2_inttostr
18b78     FD 12 02 F6 | 	mov	arg01, result1
18b7c     3C 26 B0 FD | 	call	#_hg010b_spin2_write
18b80     62 01 00 FF 
18b84     02 13 06 F6 | 	mov	arg01, ##@LR__5015
18b88     30 26 B0 FD | 	call	#_hg010b_spin2_write
18b8c     02 1E 66 F0 | 	shl	local01, #2
18b90     65 00 00 FF 
18b94     60 E4 05 F1 | 	add	objptr, ##51808
18b98     F2 1E 02 F1 | 	add	local01, objptr
18b9c     0F 13 02 FB | 	rdlong	arg01, local01
18ba0     65 00 00 FF 
18ba4     60 E4 85 F1 | 	sub	objptr, ##51808
18ba8                 | ' 
18ba8                 | ' write(text)
18ba8     10 26 B0 FD | 	call	#_hg010b_spin2_write
18bac                 | ' crlf
18bac     6C 27 B0 FD | 	call	#_hg010b_spin2_crlf
18bb0     A7 F0 03 F6 | 	mov	ptra, fp
18bb4     B2 00 A0 FD | 	call	#popregs_
18bb8                 | _printerror_ret
18bb8     2D 00 64 FD | 	ret
18bbc                 | 
18bbc                 | ' 
18bbc                 | ' '' ------------------------------- Hardware start/stop/initialization 
18bbc                 | ' 
18bbc                 | ' sub startpsram
18bbc                 | _startpsram
18bbc     00 12 06 F6 | 	mov	arg01, #0
18bc0     0A 14 C6 F9 | 	decod	arg02, #10
18bc4     0B 16 06 F6 | 	mov	arg03, #11
18bc8     07 18 06 F6 | 	mov	arg04, #7
18bcc     0B 00 00 FF 
18bd0     C0 E4 05 F1 | 	add	objptr, ##5824
18bd4     F0 28 B0 FD | 	call	#_psram_spin2_startx
18bd8     4B 00 00 FF 
18bdc     2C E5 05 F1 | 	add	objptr, ##38700
18be0     F2 FA 61 FC | 	wrlong	result1, objptr
18be4                 | '     return $7FF00 + cog*12
18be4     0C E4 05 F1 | 	add	objptr, #12
18be8     FF 03 80 FF 
18bec     F2 00 6A FC | 	wrlong	##524032, objptr
18bf0     56 00 00 FF 
18bf4     F8 E5 85 F1 | 	sub	objptr, ##44536
18bf8                 | _startpsram_ret
18bf8     2D 00 64 FD | 	ret
18bfc                 | 
18bfc                 | ' 
18bfc                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
18bfc                 | _startvideo
18bfc     01 4A 05 F6 | 	mov	COUNT_, #1
18c00     A8 00 A0 FD | 	call	#pushregs_
18c04     56 00 00 FF 
18c08     F8 E5 05 F1 | 	add	objptr, ##44536
18c0c     F2 18 02 FB | 	rdlong	arg04, objptr
18c10     56 00 00 FF 
18c14     F8 E5 85 F1 | 	sub	objptr, ##44536
18c18     0A 13 02 F6 | 	mov	arg01, arg02
18c1c     0C 15 02 F6 | 	mov	arg02, arg04
18c20     9C 10 B0 FD | 	call	#_hg010b_spin2_start
18c24     56 00 00 FF 
18c28     E4 E5 05 F1 | 	add	objptr, ##44516
18c2c     F2 FA 61 FC | 	wrlong	result1, objptr
18c30                 | ' 
18c30                 | ' videocog=v.start(pin,mbox)
18c30                 | ' 
18c30                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
18c30     00 1E 06 F6 | 	mov	local01, #0
18c34     4B 00 00 FF 
18c38     24 E5 85 F1 | 	sub	objptr, ##38692
18c3c                 | LR__1940
18c3c     0F 13 02 F6 | 	mov	arg01, local01
18c40     00 28 00 FF 
18c44     00 14 06 F6 | 	mov	arg02, ##5242880
18c48     D4 2C B0 FD | 	call	#_psram_spin2_setQos
18c4c     01 1E 06 F1 | 	add	local01, #1
18c50     08 1E 56 F2 | 	cmps	local01, #8 wc
18c54     E4 FF 9F CD |  if_b	jmp	#LR__1940
18c58     4B 00 00 FF 
18c5c     24 E5 05 F1 | 	add	objptr, ##38692
18c60     F2 12 02 FB | 	rdlong	arg01, objptr
18c64     7A 00 02 FF 
18c68     00 14 06 F6 | 	mov	arg02, ##67171328
18c6c     4B 00 00 FF 
18c70     24 E5 85 F1 | 	sub	objptr, ##38692
18c74     A8 2C B0 FD | 	call	#_psram_spin2_setQos
18c78     0B 00 00 FF 
18c7c     C0 E4 85 F1 | 	sub	objptr, ##5824
18c80                 | ' psram.setQoS(videocog, $0400f400) 
18c80                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
18c80     F2 14 02 F6 | 	mov	arg02, objptr
18c84     00 B8 03 FF 
18c88     00 14 46 F5 | 	or	arg02, ##124780544
18c8c     00 16 06 F6 | 	mov	arg03, #0
18c90     00 18 06 F6 | 	mov	arg04, #0
18c94     00 12 06 F6 | 	mov	arg01, #0
18c98     04 41 B0 FD | 	call	#__system___basic_open
18c9c                 | ' return videocog
18c9c     56 00 00 FF 
18ca0     E4 E5 05 F1 | 	add	objptr, ##44516
18ca4     F2 FA 01 FB | 	rdlong	result1, objptr
18ca8     56 00 00 FF 
18cac     E4 E5 85 F1 | 	sub	objptr, ##44516
18cb0     A7 F0 03 F6 | 	mov	ptra, fp
18cb4     B2 00 A0 FD | 	call	#popregs_
18cb8                 | _startvideo_ret
18cb8     2D 00 64 FD | 	ret
18cbc                 | 
18cbc                 | ' 
18cbc                 | ' 
18cbc                 | ' 
18cbc                 | ' 
18cbc                 | ' '' ------------------------------- Convenient psram peek/poke
18cbc                 | ' 
18cbc                 | ' sub pslpoke(addr as ulong,value as ulong)
18cbc                 | _pslpoke
18cbc     00 4A 05 F6 | 	mov	COUNT_, #0
18cc0     A8 00 A0 FD | 	call	#pushregs_
18cc4     08 F0 07 F1 | 	add	ptra, #8
18cc8     A7 12 62 FC | 	wrlong	arg01, fp
18ccc     04 4E 05 F1 | 	add	fp, #4
18cd0     A7 14 62 FC | 	wrlong	arg02, fp
18cd4     A7 12 02 F6 | 	mov	arg01, fp
18cd8     04 4E 85 F1 | 	sub	fp, #4
18cdc     A7 14 02 FB | 	rdlong	arg02, fp
18ce0     04 16 06 F6 | 	mov	arg03, #4
18ce4     0B 00 00 FF 
18ce8     C0 E4 05 F1 | 	add	objptr, ##5824
18cec     A0 2A B0 FD | 	call	#_psram_spin2_write
18cf0     0B 00 00 FF 
18cf4     C0 E4 85 F1 | 	sub	objptr, ##5824
18cf8     A7 F0 03 F6 | 	mov	ptra, fp
18cfc     B2 00 A0 FD | 	call	#popregs_
18d00                 | _pslpoke_ret
18d00     2D 00 64 FD | 	ret
18d04                 | 
18d04                 | ' 
18d04                 | ' sub psdpoke(addr as ulong,value as ulong)
18d04                 | _psdpoke
18d04     00 4A 05 F6 | 	mov	COUNT_, #0
18d08     A8 00 A0 FD | 	call	#pushregs_
18d0c     08 F0 07 F1 | 	add	ptra, #8
18d10     A7 12 62 FC | 	wrlong	arg01, fp
18d14     04 4E 05 F1 | 	add	fp, #4
18d18     A7 14 62 FC | 	wrlong	arg02, fp
18d1c     A7 12 02 F6 | 	mov	arg01, fp
18d20     04 4E 85 F1 | 	sub	fp, #4
18d24     A7 14 02 FB | 	rdlong	arg02, fp
18d28     02 16 06 F6 | 	mov	arg03, #2
18d2c     0B 00 00 FF 
18d30     C0 E4 05 F1 | 	add	objptr, ##5824
18d34     58 2A B0 FD | 	call	#_psram_spin2_write
18d38     0B 00 00 FF 
18d3c     C0 E4 85 F1 | 	sub	objptr, ##5824
18d40     A7 F0 03 F6 | 	mov	ptra, fp
18d44     B2 00 A0 FD | 	call	#popregs_
18d48                 | _psdpoke_ret
18d48     2D 00 64 FD | 	ret
18d4c                 | 
18d4c                 | ' 
18d4c                 | ' sub pspoke(addr as ulong,value as ulong)
18d4c                 | _pspoke
18d4c     00 4A 05 F6 | 	mov	COUNT_, #0
18d50     A8 00 A0 FD | 	call	#pushregs_
18d54     08 F0 07 F1 | 	add	ptra, #8
18d58     A7 12 62 FC | 	wrlong	arg01, fp
18d5c     04 4E 05 F1 | 	add	fp, #4
18d60     A7 14 62 FC | 	wrlong	arg02, fp
18d64     A7 12 02 F6 | 	mov	arg01, fp
18d68     04 4E 85 F1 | 	sub	fp, #4
18d6c     A7 14 02 FB | 	rdlong	arg02, fp
18d70     01 16 06 F6 | 	mov	arg03, #1
18d74     0B 00 00 FF 
18d78     C0 E4 05 F1 | 	add	objptr, ##5824
18d7c     10 2A B0 FD | 	call	#_psram_spin2_write
18d80     0B 00 00 FF 
18d84     C0 E4 85 F1 | 	sub	objptr, ##5824
18d88     A7 F0 03 F6 | 	mov	ptra, fp
18d8c     B2 00 A0 FD | 	call	#popregs_
18d90                 | _pspoke_ret
18d90     2D 00 64 FD | 	ret
18d94                 | 
18d94                 | ' 
18d94                 | ' function pspeek(adr as ulong) as ubyte
18d94                 | _pspeek
18d94     00 4A 05 F6 | 	mov	COUNT_, #0
18d98     A8 00 A0 FD | 	call	#pushregs_
18d9c     0C F0 07 F1 | 	add	ptra, #12
18da0     04 4E 05 F1 | 	add	fp, #4
18da4     A7 12 62 FC | 	wrlong	arg01, fp
18da8     04 4E 05 F1 | 	add	fp, #4
18dac     A7 12 02 F6 | 	mov	arg01, fp
18db0     04 4E 85 F1 | 	sub	fp, #4
18db4     A7 14 02 FB | 	rdlong	arg02, fp
18db8     04 4E 85 F1 | 	sub	fp, #4
18dbc     01 16 06 F6 | 	mov	arg03, #1
18dc0     0B 00 00 FF 
18dc4     C0 E4 05 F1 | 	add	objptr, ##5824
18dc8     28 29 B0 FD | 	call	#_psram_spin2_read1
18dcc     0B 00 00 FF 
18dd0     C0 E4 85 F1 | 	sub	objptr, ##5824
18dd4                 | ' psram.read1(varptr(res),adr,1)
18dd4                 | ' return res
18dd4     08 4E 05 F1 | 	add	fp, #8
18dd8     A7 FA C1 FA | 	rdbyte	result1, fp
18ddc     08 4E 85 F1 | 	sub	fp, #8
18de0     A7 F0 03 F6 | 	mov	ptra, fp
18de4     B2 00 A0 FD | 	call	#popregs_
18de8                 | _pspeek_ret
18de8     2D 00 64 FD | 	ret
18dec                 | 
18dec                 | ' 
18dec                 | ' function pslpeek(adr as ulong) as ulong
18dec                 | _pslpeek
18dec     00 4A 05 F6 | 	mov	COUNT_, #0
18df0     A8 00 A0 FD | 	call	#pushregs_
18df4     0C F0 07 F1 | 	add	ptra, #12
18df8     04 4E 05 F1 | 	add	fp, #4
18dfc     A7 12 62 FC | 	wrlong	arg01, fp
18e00     04 4E 05 F1 | 	add	fp, #4
18e04     A7 12 02 F6 | 	mov	arg01, fp
18e08     04 4E 85 F1 | 	sub	fp, #4
18e0c     A7 14 02 FB | 	rdlong	arg02, fp
18e10     04 4E 85 F1 | 	sub	fp, #4
18e14     04 16 06 F6 | 	mov	arg03, #4
18e18     0B 00 00 FF 
18e1c     C0 E4 05 F1 | 	add	objptr, ##5824
18e20     D0 28 B0 FD | 	call	#_psram_spin2_read1
18e24     0B 00 00 FF 
18e28     C0 E4 85 F1 | 	sub	objptr, ##5824
18e2c                 | ' psram.read1(varptr(res),adr,4)
18e2c                 | ' return res
18e2c     08 4E 05 F1 | 	add	fp, #8
18e30     A7 FA 01 FB | 	rdlong	result1, fp
18e34     08 4E 85 F1 | 	sub	fp, #8
18e38     A7 F0 03 F6 | 	mov	ptra, fp
18e3c     B2 00 A0 FD | 	call	#popregs_
18e40                 | _pslpeek_ret
18e40     2D 00 64 FD | 	ret
18e44                 | 
18e44                 | ' 
18e44                 | ' function psdpeek(adr as ulong) as ulong
18e44                 | _psdpeek
18e44     00 4A 05 F6 | 	mov	COUNT_, #0
18e48     A8 00 A0 FD | 	call	#pushregs_
18e4c     0C F0 07 F1 | 	add	ptra, #12
18e50     04 4E 05 F1 | 	add	fp, #4
18e54     A7 12 62 FC | 	wrlong	arg01, fp
18e58     04 4E 05 F1 | 	add	fp, #4
18e5c     A7 12 02 F6 | 	mov	arg01, fp
18e60     04 4E 85 F1 | 	sub	fp, #4
18e64     A7 14 02 FB | 	rdlong	arg02, fp
18e68     04 4E 85 F1 | 	sub	fp, #4
18e6c     02 16 06 F6 | 	mov	arg03, #2
18e70     0B 00 00 FF 
18e74     C0 E4 05 F1 | 	add	objptr, ##5824
18e78     78 28 B0 FD | 	call	#_psram_spin2_read1
18e7c     0B 00 00 FF 
18e80     C0 E4 85 F1 | 	sub	objptr, ##5824
18e84                 | ' psram.read1(varptr(res),adr,2)
18e84                 | ' return res
18e84     08 4E 05 F1 | 	add	fp, #8
18e88     A7 FA E1 FA | 	rdword	result1, fp
18e8c     08 4E 85 F1 | 	sub	fp, #8
18e90     A7 F0 03 F6 | 	mov	ptra, fp
18e94     B2 00 A0 FD | 	call	#popregs_
18e98                 | _psdpeek_ret
18e98     2D 00 64 FD | 	ret
18e9c                 | 
18e9c                 | ' 
18e9c                 | ' '' ------------------------------- USB keyboard scan to char translator
18e9c                 | ' 
18e9c                 | ' function scantochar(key)
18e9c                 | _scantochar
18e9c                 | ' 
18e9c                 | ' select case (key shr 8) and 255
18e9c     09 01 02 F6 | 	mov	_var01, arg01
18ea0     08 00 C6 F0 | 	sar	_var01, #8
18ea4     FF 00 0E F5 | 	and	_var01, #255 wz
18ea8     24 00 90 AD |  if_e	jmp	#LR__1950
18eac     02 00 0E F2 | 	cmp	_var01, #2 wz
18eb0     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
18eb4     30 00 90 AD |  if_e	jmp	#LR__1951
18eb8     40 00 0E F2 | 	cmp	_var01, #64 wz
18ebc     44 00 90 AD |  if_e	jmp	#LR__1952
18ec0     42 00 0E F2 | 	cmp	_var01, #66 wz
18ec4     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
18ec8     70 00 90 5D |  if_ne	jmp	#LR__1954
18ecc     50 00 90 FD | 	jmp	#LR__1953
18ed0                 | LR__1950
18ed0     09 FB 01 F6 | 	mov	result1, arg01
18ed4     7F FA 05 F5 | 	and	result1, #127
18ed8     02 FA 65 F0 | 	shl	result1, #2
18edc     F5 FA 01 F1 | 	add	result1, ptr__dat__
18ee0     FD FA C1 FA | 	rdbyte	result1, result1
18ee4     54 00 90 FD | 	jmp	#_scantochar_ret
18ee8                 | LR__1951
18ee8     09 FB 01 F6 | 	mov	result1, arg01
18eec     7F FA 05 F5 | 	and	result1, #127
18ef0     02 FA 65 F0 | 	shl	result1, #2
18ef4     01 FA 05 F1 | 	add	result1, #1
18ef8     F5 FA 01 F1 | 	add	result1, ptr__dat__
18efc     FD FA C1 FA | 	rdbyte	result1, result1
18f00     38 00 90 FD | 	jmp	#_scantochar_ret
18f04                 | LR__1952
18f04     09 FB 01 F6 | 	mov	result1, arg01
18f08     7F FA 05 F5 | 	and	result1, #127
18f0c     02 FA 65 F0 | 	shl	result1, #2
18f10     02 FA 05 F1 | 	add	result1, #2
18f14     F5 FA 01 F1 | 	add	result1, ptr__dat__
18f18     FD FA C1 FA | 	rdbyte	result1, result1
18f1c     1C 00 90 FD | 	jmp	#_scantochar_ret
18f20                 | LR__1953
18f20     09 FB 01 F6 | 	mov	result1, arg01
18f24     7F FA 05 F5 | 	and	result1, #127
18f28     02 FA 65 F0 | 	shl	result1, #2
18f2c     03 FA 05 F1 | 	add	result1, #3
18f30     F5 FA 01 F1 | 	add	result1, ptr__dat__
18f34     FD FA C1 FA | 	rdbyte	result1, result1
18f38     00 00 90 FD | 	jmp	#_scantochar_ret
18f3c                 | LR__1954
18f3c                 | _scantochar_ret
18f3c     2D 00 64 FD | 	ret
18f40                 | 
18f40                 | _program
18f40     0B 4A 05 F6 | 	mov	COUNT_, #11
18f44     A8 00 A0 FD | 	call	#pushregs_
18f48     70 FC BF FD | 	call	#_startpsram
18f4c     40 12 06 F6 | 	mov	arg01, #64
18f50     00 14 06 F6 | 	mov	arg02, #0
18f54     00 16 06 F6 | 	mov	arg03, #0
18f58     A0 FC BF FD | 	call	#_startvideo
18f5c     00 12 06 F6 | 	mov	arg01, #0
18f60     00 14 06 F6 | 	mov	arg02, #0
18f64     00 16 06 F6 | 	mov	arg03, #0
18f68     0B 00 00 FF 
18f6c     C0 E4 05 F1 | 	add	objptr, ##5824
18f70     5C 2D B0 FD | 	call	#_audio096_spin2_start
18f74     FE 1C 02 F6 | 	mov	arg06, result2
18f78     4B 00 00 FF 
18f7c     20 E5 05 F1 | 	add	objptr, ##38688
18f80     F2 FA 61 FC | 	wrlong	result1, objptr
18f84     14 E4 05 F1 | 	add	objptr, #20
18f88     F2 1C 62 FC | 	wrlong	arg06, objptr
18f8c     56 00 00 FF 
18f90     F4 E5 85 F1 | 	sub	objptr, ##44532
18f94     32 12 06 F6 | 	mov	arg01, #50
18f98     50 36 B0 FD | 	call	#__system___waitms
18f9c     56 00 00 FF 
18fa0     F4 E5 05 F1 | 	add	objptr, ##44532
18fa4     F2 12 02 FB | 	rdlong	arg01, objptr
18fa8     56 00 00 FF 
18fac     F4 E5 85 F1 | 	sub	objptr, ##44532
18fb0     14 12 06 F1 | 	add	arg01, #20
18fb4     20 00 80 FF 
18fb8     09 01 58 FC | 	wrword	##16384, arg01
18fbc     68 2A B0 FD | 	call	#_usbnew_spin2_start
18fc0     56 00 00 FF 
18fc4     E8 E5 05 F1 | 	add	objptr, ##44520
18fc8     F2 FA 61 FC | 	wrlong	result1, objptr
18fcc                 | '   mouse_limits[0] := xlim
18fcc     0F 00 00 FF 
18fd0     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
18fd4     01 00 80 FF 
18fd8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
18fdc                 | '   mouse_limits[1] := ylim
18fdc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
18fe0     01 00 80 FF 
18fe4     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
18fe8     56 00 00 FF 
18fec     DB E4 85 F1 | 	sub	objptr, ##44251
18ff0     F2 12 02 F6 | 	mov	arg01, objptr
18ff4     0D E5 85 F1 | 	sub	objptr, #269
18ff8     C4 12 06 F1 | 	add	arg01, #196
18ffc                 | '   mouse_outptr := ptr
18ffc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
19000     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
19004     0F 00 00 FF 
19008     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1900c     0E 00 00 FF 
19010     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
19014     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19018     0E 00 00 FF 
1901c     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
19020     10 12 06 F6 | 	mov	arg01, #16
19024     90 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
19028     10 12 06 F6 | 	mov	arg01, #16
1902c     20 14 06 F6 | 	mov	arg02, #32
19030     20 16 06 F6 | 	mov	arg03, #32
19034     10 12 B0 FD | 	call	#_hg010b_spin2_setspritesize
19038     09 12 C6 F9 | 	decod	arg01, #9
1903c     20 15 06 F6 | 	mov	arg02, #288
19040     3C 2B B0 FD | 	call	#_usbnew_spin2_mouse_move
19044     F2 1C 02 F6 | 	mov	arg06, objptr
19048     79 00 00 FF 
1904c     CC E5 05 F1 | 	add	objptr, ##62412
19050     F2 1A 02 F6 | 	mov	arg05, objptr
19054     0D 1D 62 FC | 	wrlong	arg06, arg05
19058     04 1A 06 F1 | 	add	arg05, #4
1905c     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
19060     EF 14 02 F6 | 	mov	arg02, entryptr__
19064     F2 1E 02 F6 | 	mov	local01, objptr
19068     1E FA 05 F6 | 	mov	result1, #30
1906c     28 1E 62 FD | 	setq	local01
19070     0A FB F1 FC | 	coginit	result1, arg02 wc
19074     01 FA 65 C6 |  if_b	neg	result1, #1
19078     04 E4 85 F1 | 	sub	objptr, #4
1907c     F2 FA 61 FC | 	wrlong	result1, objptr
19080     01 00 00 FF 
19084     90 E4 05 F1 | 	add	objptr, ##656
19088     F2 00 68 FC | 	wrlong	#0, objptr
1908c     24 00 00 FF 
19090     40 E4 85 F1 | 	sub	objptr, ##18496
19094     F2 04 68 FC | 	wrlong	#2, objptr
19098     04 E4 05 F1 | 	add	objptr, #4
1909c     F2 26 69 FC | 	wrlong	#147, objptr
190a0     04 E4 05 F1 | 	add	objptr, #4
190a4     F2 34 69 FC | 	wrlong	#154, objptr
190a8     04 E4 05 F1 | 	add	objptr, #4
190ac     F2 08 68 FC | 	wrlong	#4, objptr
190b0     04 E4 85 F1 | 	sub	objptr, #4
190b4     F2 1C 02 FB | 	rdlong	arg06, objptr
190b8     14 E4 85 F1 | 	sub	objptr, #20
190bc     F2 1C 62 FC | 	wrlong	arg06, objptr
190c0     04 E4 05 F1 | 	add	objptr, #4
190c4     F2 00 68 FC | 	wrlong	#0, objptr
190c8     04 E4 05 F1 | 	add	objptr, #4
190cc     F2 00 68 FC | 	wrlong	#0, objptr
190d0     22 00 00 FF 
190d4     B0 E5 05 F1 | 	add	objptr, ##17840
190d8     F2 02 68 FC | 	wrlong	#1, objptr
190dc     01 00 00 FF 
190e0     9C E4 05 F1 | 	add	objptr, ##668
190e4     F2 00 68 FC | 	wrlong	#0, objptr
190e8     01 00 00 FF 
190ec     00 EA 05 F1 | 	add	ptr__dat__, ##512
190f0     08 E4 05 F1 | 	add	objptr, #8
190f4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
190f8     04 E4 85 F1 | 	sub	objptr, #4
190fc     03 00 80 FF 
19100     F2 3C 69 FC | 	wrlong	##1694, objptr
19104     16 00 00 FF 
19108     1C E4 85 F1 | 	sub	objptr, ##11292
1910c     F2 18 68 FC | 	wrlong	#12, objptr
19110     65 00 00 FF 
19114     48 E4 85 F1 | 	sub	objptr, ##51784
19118     01 00 00 FF 
1911c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
19120     10 DF BF FD | 	call	#_init_commands
19124     00 F7 BF FD | 	call	#_init_error_strings
19128     9C EE BF FD | 	call	#_init_audio
1912c     B4 49 BF FD | 	call	#_do_new
19130     57 00 00 FF 
19134     20 E4 05 F1 | 	add	objptr, ##44576
19138     F2 12 02 FB | 	rdlong	arg01, objptr
1913c     04 E4 85 F1 | 	sub	objptr, #4
19140     F2 14 02 FB | 	rdlong	arg02, objptr
19144     57 00 00 FF 
19148     1C E4 85 F1 | 	sub	objptr, ##44572
1914c     B0 1D B0 FD | 	call	#_hg010b_spin2_cls
19150     57 00 00 FF 
19154     24 E4 05 F1 | 	add	objptr, ##44580
19158     F2 12 02 FB | 	rdlong	arg01, objptr
1915c     57 00 00 FF 
19160     24 E4 85 F1 | 	sub	objptr, ##44580
19164     B0 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
19168                 | ' 
19168                 | ' leading_spaces:=amount
19168     01 00 00 FF 
1916c     B2 E4 05 F1 | 	add	objptr, ##690
19170     F2 04 68 FC | 	wrlong	#2, objptr
19174     01 00 00 FF 
19178     B2 E4 85 F1 | 	sub	objptr, ##690
1917c     62 01 00 FF 
19180     05 21 06 F6 | 	mov	local02, ##@LR__5016
19184     3D 12 06 F6 | 	mov	arg01, #61
19188     3C 14 06 F6 | 	mov	arg02, #60
1918c     3B 16 06 F6 | 	mov	arg03, #59
19190     3A 18 06 F6 | 	mov	arg04, #58
19194     8C 7B B0 FD | 	call	#__system___vfs_open_sdcardx
19198     FD 14 02 F6 | 	mov	arg02, result1
1919c     10 13 02 F6 | 	mov	arg01, local02
191a0     20 35 B0 FD | 	call	#__system___mount
191a4     62 01 00 FF 
191a8     09 13 06 F6 | 	mov	arg01, ##@LR__5017
191ac     D4 37 B0 FD | 	call	#__system___chdir
191b0     62 01 00 FF 
191b4     11 21 06 F6 | 	mov	local02, ##@LR__5018
191b8     72 00 00 FF 
191bc     78 E4 05 F1 | 	add	objptr, ##58488
191c0     F2 20 62 FC | 	wrlong	local02, objptr
191c4     1B 00 00 FF 
191c8     60 E4 85 F1 | 	sub	objptr, ##13920
191cc     F2 12 02 FB | 	rdlong	arg01, objptr
191d0     57 00 00 FF 
191d4     18 E4 85 F1 | 	sub	objptr, ##44568
191d8     01 12 66 F0 | 	shl	arg01, #1
191dc     01 14 06 F6 | 	mov	arg02, #1
191e0     74 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
191e4                 | ' 
191e4                 | ' init_commands
191e4                 | ' init_error_strings
191e4                 | ' init_audio
191e4                 | ' do_new
191e4                 | ' 
191e4                 | ' 
191e4                 | ' cls(ink, paper)
191e4                 | ' v.setfontfamily(font) 				' use ST Mono font
191e4                 | ' v.setleadingspaces(2)
191e4                 | ' mount "/sd", _vfs_open_sdcard()
191e4                 | ' chdir "/sd/bas"
191e4                 | ' 
191e4                 | ' currentdir$="/sd/bas"
191e4                 | ' 
191e4                 | ' position 2*editor_spaces,1 : print ver$
191e4     00 12 06 F6 | 	mov	arg01, #0
191e8     9C 8A B0 FD | 	call	#__system___getiolock_0474
191ec     FD 12 02 F6 | 	mov	arg01, result1
191f0     04 31 B0 FD | 	call	#__system___lockmem
191f4     18 00 00 FF 
191f8     4C EB 05 F1 | 	add	ptr__dat__, ##12620
191fc     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
19200     18 00 00 FF 
19204     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
19208     00 12 06 F6 | 	mov	arg01, #0
1920c     00 16 06 F6 | 	mov	arg03, #0
19210     E8 3D B0 FD | 	call	#__system___basic_print_string
19214     00 12 06 F6 | 	mov	arg01, #0
19218     0A 14 06 F6 | 	mov	arg02, #10
1921c     00 16 06 F6 | 	mov	arg03, #0
19220     80 3D B0 FD | 	call	#__system___basic_print_char
19224     00 12 06 F6 | 	mov	arg01, #0
19228     5C 8A B0 FD | 	call	#__system___getiolock_0474
1922c     FD 00 68 FC | 	wrlong	#0, result1
19230     F2 12 02 FB | 	rdlong	arg01, objptr
19234     00 14 06 F6 | 	mov	arg02, #0
19238     0A 16 06 F6 | 	mov	arg03, #10
1923c     50 53 B0 FD | 	call	#__system__Number_S
19240     FD 12 02 F6 | 	mov	arg01, result1
19244     62 01 00 FF 
19248     19 15 06 F6 | 	mov	arg02, ##@LR__5019
1924c     04 31 B0 FD | 	call	#__system___string_concat
19250     FD 20 02 F6 | 	mov	local02, result1
19254     79 00 00 FF 
19258     C0 E5 05 F1 | 	add	objptr, ##62400
1925c     F2 20 62 FC | 	wrlong	local02, objptr
19260     79 00 00 FF 
19264     C0 E5 85 F1 | 	sub	objptr, ##62400
19268                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
19268     00 12 06 F6 | 	mov	arg01, #0
1926c     18 8A B0 FD | 	call	#__system___getiolock_0474
19270     FD 12 02 F6 | 	mov	arg01, result1
19274     80 30 B0 FD | 	call	#__system___lockmem
19278     79 00 00 FF 
1927c     C0 E5 05 F1 | 	add	objptr, ##62400
19280     F2 14 02 FB | 	rdlong	arg02, objptr
19284     79 00 00 FF 
19288     C0 E5 85 F1 | 	sub	objptr, ##62400
1928c     00 12 06 F6 | 	mov	arg01, #0
19290     00 16 06 F6 | 	mov	arg03, #0
19294     64 3D B0 FD | 	call	#__system___basic_print_string
19298     00 12 06 F6 | 	mov	arg01, #0
1929c     0A 14 06 F6 | 	mov	arg02, #10
192a0     00 16 06 F6 | 	mov	arg03, #0
192a4     FC 3C B0 FD | 	call	#__system___basic_print_char
192a8     00 12 06 F6 | 	mov	arg01, #0
192ac     D8 89 B0 FD | 	call	#__system___getiolock_0474
192b0     FD 00 68 FC | 	wrlong	#0, result1
192b4     57 00 00 FF 
192b8     18 E4 05 F1 | 	add	objptr, ##44568
192bc     F2 12 02 FB | 	rdlong	arg01, objptr
192c0     57 00 00 FF 
192c4     18 E4 85 F1 | 	sub	objptr, ##44568
192c8     01 12 66 F0 | 	shl	arg01, #1
192cc     04 14 06 F6 | 	mov	arg02, #4
192d0     84 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
192d4                 | ' position 2*editor_spaces,4 : print "Ready"
192d4     00 12 06 F6 | 	mov	arg01, #0
192d8     AC 89 B0 FD | 	call	#__system___getiolock_0474
192dc     FD 12 02 F6 | 	mov	arg01, result1
192e0     14 30 B0 FD | 	call	#__system___lockmem
192e4     62 01 00 FF 
192e8     2B 15 06 F6 | 	mov	arg02, ##@LR__5020
192ec     00 12 06 F6 | 	mov	arg01, #0
192f0     00 16 06 F6 | 	mov	arg03, #0
192f4     04 3D B0 FD | 	call	#__system___basic_print_string
192f8     FD 22 02 F6 | 	mov	local03, result1
192fc     00 12 06 F6 | 	mov	arg01, #0
19300     0A 14 06 F6 | 	mov	arg02, #10
19304     00 16 06 F6 | 	mov	arg03, #0
19308     98 3C B0 FD | 	call	#__system___basic_print_char
1930c     01 24 06 F6 | 	mov	local04, #1
19310     00 12 06 F6 | 	mov	arg01, #0
19314     70 89 B0 FD | 	call	#__system___getiolock_0474
19318     FD 00 68 FC | 	wrlong	#0, result1
1931c     00 26 06 F6 | 	mov	local05, #0
19320     00 14 06 F6 | 	mov	arg02, #0
19324     01 14 D6 F7 | 	test	arg02, #1 wc
19328     5A 4C 64 FD | 	drvc	#38
1932c     01 14 D6 F7 | 	test	arg02, #1 wc
19330     5A 4E 64 FD | 	drvc	#39
19334                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
19334                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
19334                 | ' 
19334                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
19334                 | ' 
19334                 | ' 'base2:=@channel1[0]+64*channel
19334                 | ' 'long[base2+8]:=sample+$C0000000 
19334                 | ' 'long[base2+12]:= len
19334                 | ' 'if loop >=0 
19334                 | ' '  long[base2+16]:= loop
19334                 | ' 'else
19334                 | ' '  long[base2+16]:= len+2
19334                 | ' 'word[base2+20]:=vol
19334                 | ' 'word[base2+24]:= 3546911/splfreq 
19334                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
19334                 | ' 'long[base2+28]:=$40000000
19334                 | ' 
19334                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
19334                 | ' 'lpoke base+16,2048
19334                 | ' 'lpoke base+12,0
19334                 | ' 'dpoke base+20,16383
19334                 | ' 'dpoke base+22,8192
19334                 | ' 'dpoke base+24,60
19334                 | ' 'dpoke base+26,256 ' todo: use skip to make accurate sample rate
19334                 | ' 'dpoke base+28,$4000_0000
19334                 | ' 'lpoke base+32,0 
19334                 | ' 'lpoke base+36, 0
19334                 | ' 'lpoke base+40,25600' speed
19334                 | ' 'lpoke base+44,1023 'len
19334                 | ' 
19334                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
19334                 | ' 
19334                 | ' '-------------------------------------------------------------------------------------------------------- 
19334                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
19334                 | ' '--------------------------------------------------------------------------------------------------------
19334                 | ' 
19334                 | ' do
19334                 | LR__1960
19334     01 12 06 F6 | 	mov	arg01, #1
19338     54 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
1933c     06 12 06 F6 | 	mov	arg01, #6
19340     0B 00 00 FF 
19344     C0 E4 05 F1 | 	add	objptr, ##5824
19348     AC 2C B0 FD | 	call	#_audio096_spin2_stop
1934c     0B 00 00 FF 
19350     C0 E4 85 F1 | 	sub	objptr, ##5824
19354     C8 27 B0 FD | 	call	#_usbnew_spin2_get_key
19358     65 00 00 FF 
1935c     58 E4 05 F1 | 	add	objptr, ##51800
19360     F2 FA 61 FC | 	wrlong	result1, objptr
19364                 | '   return hkbd_led_rep
19364     13 00 00 FF 
19368     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1936c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
19370     13 00 00 FF 
19374     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
19378     16 00 00 FF 
1937c     30 E4 05 F1 | 	add	objptr, ##11312
19380     F2 FA 61 FC | 	wrlong	result1, objptr
19384                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
19384     16 00 00 FF 
19388     30 E4 85 F1 | 	sub	objptr, ##11312
1938c     F2 20 02 FB | 	rdlong	local02, objptr
19390     65 00 00 FF 
19394     58 E4 85 F1 | 	sub	objptr, ##51800
19398     01 20 16 F2 | 	cmp	local02, #1 wc
1939c     BC 00 90 CD |  if_b	jmp	#LR__1961
193a0     65 00 00 FF 
193a4     58 E4 05 F1 | 	add	objptr, ##51800
193a8     F2 24 02 FB | 	rdlong	local04, objptr
193ac     65 00 00 FF 
193b0     58 E4 85 F1 | 	sub	objptr, ##51800
193b4     12 23 02 F6 | 	mov	local03, local04
193b8     04 22 16 F2 | 	cmp	local03, #4 wc
193bc     9C 00 90 3D |  if_ae	jmp	#LR__1961
193c0     79 00 00 FF 
193c4     C4 E5 05 F1 | 	add	objptr, ##62404
193c8     F2 1E 02 FB | 	rdlong	local01, objptr
193cc     79 00 00 FF 
193d0     C4 E5 85 F1 | 	sub	objptr, ##62404
193d4     0F 27 02 F6 | 	mov	local05, local01
193d8     01 26 0E F2 | 	cmp	local05, #1 wz
193dc     7C 00 90 5D |  if_ne	jmp	#LR__1961
193e0     04 00 00 FF 
193e4     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
193e8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
193ec     04 00 00 FF 
193f0     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
193f4     56 00 00 FF 
193f8     44 22 06 F6 | 	mov	local03, ##44100
193fc     0C 24 C6 F9 | 	decod	local04, #12
19400     00 26 06 F6 | 	mov	local05, #0
19404     03 00 00 FF 
19408     DE 1E 06 F6 | 	mov	local01, ##1758
1940c     07 12 06 F6 | 	mov	arg01, #7
19410     56 00 00 FF 
19414     44 16 06 F6 | 	mov	arg03, ##44100
19418     0C 18 C6 F9 | 	decod	arg04, #12
1941c     00 1A 06 F6 | 	mov	arg05, #0
19420     03 00 00 FF 
19424     DE 1C 06 F6 | 	mov	arg06, ##1758
19428     0B 00 00 FF 
1942c     C0 E4 05 F1 | 	add	objptr, ##5824
19430     74 2A B0 FD | 	call	#_audio096_spin2_play
19434     0B 00 00 FF 
19438     C0 E4 85 F1 | 	sub	objptr, ##5824
1943c     0A 12 06 F6 | 	mov	arg01, #10
19440     A8 31 B0 FD | 	call	#__system___waitms
19444     07 12 06 F6 | 	mov	arg01, #7
19448     0B 00 00 FF 
1944c     C0 E4 05 F1 | 	add	objptr, ##5824
19450     A4 2B B0 FD | 	call	#_audio096_spin2_stop
19454     0B 00 00 FF 
19458     C0 E4 85 F1 | 	sub	objptr, ##5824
1945c                 | LR__1961
1945c                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1945c     65 00 00 FF 
19460     58 E4 05 F1 | 	add	objptr, ##51800
19464     F2 20 02 FB | 	rdlong	local02, objptr
19468     65 00 00 FF 
1946c     58 E4 85 F1 | 	sub	objptr, ##51800
19470     04 20 16 F2 | 	cmp	local02, #4 wc
19474     80 00 90 CD |  if_b	jmp	#LR__1962
19478     65 00 00 FF 
1947c     58 E4 05 F1 | 	add	objptr, ##51800
19480     F2 24 02 FB | 	rdlong	local04, objptr
19484     65 00 00 FF 
19488     58 E4 85 F1 | 	sub	objptr, ##51800
1948c     12 23 02 F6 | 	mov	local03, local04
19490     00 00 40 FF 
19494     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
19498     65 00 00 CF 
1949c     58 E4 05 C1 |  if_b	add	objptr, ##51800
194a0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
194a4     65 00 00 CF 
194a8     58 E4 85 C1 |  if_b	sub	objptr, ##51800
194ac     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
194b0     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
194b4     40 00 90 3D |  if_ae	jmp	#LR__1962
194b8     65 00 00 FF 
194bc     58 E4 05 F1 | 	add	objptr, ##51800
194c0     F2 20 02 FB | 	rdlong	local02, objptr
194c4     04 E4 05 F1 | 	add	objptr, #4
194c8     F2 20 62 FC | 	wrlong	local02, objptr
194cc     16 00 00 FF 
194d0     30 E4 05 F1 | 	add	objptr, ##11312
194d4     F2 02 68 FC | 	wrlong	#1, objptr
194d8     16 00 00 FF 
194dc     30 E4 85 F1 | 	sub	objptr, ##11312
194e0     F2 20 02 FB | 	rdlong	local02, objptr
194e4     16 00 00 FF 
194e8     34 E4 05 F1 | 	add	objptr, ##11316
194ec     F2 20 62 FC | 	wrlong	local02, objptr
194f0     7B 00 00 FF 
194f4     90 E4 85 F1 | 	sub	objptr, ##63120
194f8                 | LR__1962
194f8                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
194f8     65 00 00 FF 
194fc     58 E4 05 F1 | 	add	objptr, ##51800
19500     F2 20 02 FB | 	rdlong	local02, objptr
19504     65 00 00 FF 
19508     58 E4 85 F1 | 	sub	objptr, ##51800
1950c     00 00 40 FF 
19510     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
19514     7B 00 00 3F 
19518     94 E4 05 31 |  if_ae	add	objptr, ##63124
1951c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19520     08 E4 85 31 |  if_ae	sub	objptr, #8
19524     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19528     7B 00 00 3F 
1952c     8C E4 85 31 |  if_ae	sub	objptr, ##63116
19530                 | ' if key=0 andalso rpt=1 then rptcnt+=1
19530     65 00 00 FF 
19534     58 E4 05 F1 | 	add	objptr, ##51800
19538     F2 20 0A FB | 	rdlong	local02, objptr wz
1953c     65 00 00 FF 
19540     58 E4 85 F1 | 	sub	objptr, ##51800
19544     7B 00 00 AF 
19548     8C E4 05 A1 |  if_e	add	objptr, ##63116
1954c     F2 24 02 AB |  if_e	rdlong	local04, objptr
19550     7B 00 00 AF 
19554     8C E4 85 A1 |  if_e	sub	objptr, ##63116
19558     12 23 02 A6 |  if_e	mov	local03, local04
1955c     01 22 0E A2 |  if_e	cmp	local03, #1 wz
19560     7B 00 00 AF 
19564     94 E4 05 A1 |  if_e	add	objptr, ##63124
19568     F2 20 02 AB |  if_e	rdlong	local02, objptr
1956c     01 20 06 A1 |  if_e	add	local02, #1
19570     F2 20 62 AC |  if_e	wrlong	local02, objptr
19574     7B 00 00 AF 
19578     94 E4 85 A1 |  if_e	sub	objptr, ##63124
1957c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1957c     65 00 00 FF 
19580     58 E4 05 F1 | 	add	objptr, ##51800
19584     F2 20 02 FB | 	rdlong	local02, objptr
19588     65 00 00 FF 
1958c     58 E4 85 F1 | 	sub	objptr, ##51800
19590     00 00 40 FF 
19594     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
19598     44 00 90 3D |  if_ae	jmp	#LR__1964
1959c     7B 00 00 FF 
195a0     94 E4 05 F1 | 	add	objptr, ##63124
195a4     F2 20 02 FB | 	rdlong	local02, objptr
195a8     7B 00 00 FF 
195ac     94 E4 85 F1 | 	sub	objptr, ##63124
195b0     19 20 0E F2 | 	cmp	local02, #25 wz
195b4     28 00 90 5D |  if_ne	jmp	#LR__1963
195b8     65 00 00 FF 
195bc     5C E4 05 F1 | 	add	objptr, ##51804
195c0     F2 20 02 FB | 	rdlong	local02, objptr
195c4     16 00 00 FF 
195c8     34 E4 05 F1 | 	add	objptr, ##11316
195cc     F2 20 62 FC | 	wrlong	local02, objptr
195d0     04 E4 05 F1 | 	add	objptr, #4
195d4     F2 2A 68 FC | 	wrlong	#21, objptr
195d8     7B 00 00 FF 
195dc     94 E4 85 F1 | 	sub	objptr, ##63124
195e0                 | LR__1963
195e0                 | LR__1964
195e0                 | ' 
195e0                 | ' 
195e0                 | ' if key3<>0 then
195e0     7B 00 00 FF 
195e4     90 E4 05 F1 | 	add	objptr, ##63120
195e8     F2 28 0A FB | 	rdlong	local06, objptr wz
195ec     7B 00 00 FF 
195f0     90 E4 85 F1 | 	sub	objptr, ##63120
195f4     3C FD 9F AD |  if_e	jmp	#LR__1960
195f8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
195f8     79 00 00 FF 
195fc     C4 E5 05 F1 | 	add	objptr, ##62404
19600     F2 20 02 FB | 	rdlong	local02, objptr
19604     79 00 00 FF 
19608     C4 E5 85 F1 | 	sub	objptr, ##62404
1960c     01 20 0E F2 | 	cmp	local02, #1 wz
19610     50 00 90 5D |  if_ne	jmp	#LR__1965
19614     7B 00 00 FF 
19618     68 E4 05 F1 | 	add	objptr, ##63080
1961c     F2 14 02 FB | 	rdlong	arg02, objptr
19620     56 00 00 FF 
19624     44 22 06 F6 | 	mov	local03, ##44100
19628     0C 24 C6 F9 | 	decod	local04, #12
1962c     04 E4 85 F1 | 	sub	objptr, #4
19630     F2 26 02 FB | 	rdlong	local05, objptr
19634     01 1E 66 F6 | 	neg	local01, #1
19638     07 12 06 F6 | 	mov	arg01, #7
1963c     56 00 00 FF 
19640     44 16 06 F6 | 	mov	arg03, ##44100
19644     0C 18 C6 F9 | 	decod	arg04, #12
19648     13 1B 02 F6 | 	mov	arg05, local05
1964c     01 1C 66 F6 | 	neg	arg06, #1
19650     6F 00 00 FF 
19654     A4 E5 85 F1 | 	sub	objptr, ##57252
19658     4C 28 B0 FD | 	call	#_audio096_spin2_play
1965c     0B 00 00 FF 
19660     C0 E4 85 F1 | 	sub	objptr, ##5824
19664                 | LR__1965
19664     7B 00 00 FF 
19668     90 E4 05 F1 | 	add	objptr, ##63120
1966c     F2 12 02 FB | 	rdlong	arg01, objptr
19670     7B 00 00 FF 
19674     90 E4 85 F1 | 	sub	objptr, ##63120
19678     20 F8 BF FD | 	call	#_scantochar
1967c     7B 00 00 FF 
19680     98 E4 05 F1 | 	add	objptr, ##63128
19684     F2 FA 61 FC | 	wrlong	result1, objptr
19688                 | '   if leds and 2 = 2 then 
19688     10 E4 85 F1 | 	sub	objptr, #16
1968c     F2 20 0A FB | 	rdlong	local02, objptr wz
19690     7B 00 00 FF 
19694     88 E4 85 F1 | 	sub	objptr, ##63112
19698     68 01 90 AD |  if_e	jmp	#LR__1973
1969c                 | '     if key4>96 andalso key4<123 then
1969c     7B 00 00 FF 
196a0     98 E4 05 F1 | 	add	objptr, ##63128
196a4     F2 20 02 FB | 	rdlong	local02, objptr
196a8     7B 00 00 FF 
196ac     98 E4 85 F1 | 	sub	objptr, ##63128
196b0     61 20 56 F2 | 	cmps	local02, #97 wc
196b4     40 00 90 CD |  if_b	jmp	#LR__1966
196b8     7B 00 00 FF 
196bc     98 E4 05 F1 | 	add	objptr, ##63128
196c0     F2 24 02 FB | 	rdlong	local04, objptr
196c4     7B 00 00 FF 
196c8     98 E4 85 F1 | 	sub	objptr, ##63128
196cc     12 23 02 F6 | 	mov	local03, local04
196d0     7B 22 56 F2 | 	cmps	local03, #123 wc
196d4     20 00 90 3D |  if_ae	jmp	#LR__1966
196d8     7B 00 00 FF 
196dc     98 E4 05 F1 | 	add	objptr, ##63128
196e0     F2 20 02 FB | 	rdlong	local02, objptr
196e4     20 20 86 F1 | 	sub	local02, #32
196e8     F2 20 62 FC | 	wrlong	local02, objptr
196ec     7B 00 00 FF 
196f0     98 E4 85 F1 | 	sub	objptr, ##63128
196f4     0C 01 90 FD | 	jmp	#LR__1972
196f8                 | LR__1966
196f8     7B 00 00 FF 
196fc     98 E4 05 F1 | 	add	objptr, ##63128
19700     F2 20 02 FB | 	rdlong	local02, objptr
19704     7B 00 00 FF 
19708     98 E4 85 F1 | 	sub	objptr, ##63128
1970c     41 20 56 F2 | 	cmps	local02, #65 wc
19710     40 00 90 CD |  if_b	jmp	#LR__1967
19714     7B 00 00 FF 
19718     98 E4 05 F1 | 	add	objptr, ##63128
1971c     F2 24 02 FB | 	rdlong	local04, objptr
19720     7B 00 00 FF 
19724     98 E4 85 F1 | 	sub	objptr, ##63128
19728     12 23 02 F6 | 	mov	local03, local04
1972c     5B 22 56 F2 | 	cmps	local03, #91 wc
19730     20 00 90 3D |  if_ae	jmp	#LR__1967
19734     7B 00 00 FF 
19738     98 E4 05 F1 | 	add	objptr, ##63128
1973c     F2 20 02 FB | 	rdlong	local02, objptr
19740     20 20 06 F1 | 	add	local02, #32
19744     F2 20 62 FC | 	wrlong	local02, objptr
19748     7B 00 00 FF 
1974c     98 E4 85 F1 | 	sub	objptr, ##63128
19750     B0 00 90 FD | 	jmp	#LR__1971
19754                 | LR__1967
19754     7B 00 00 FF 
19758     98 E4 05 F1 | 	add	objptr, ##63128
1975c     F2 20 02 FB | 	rdlong	local02, objptr
19760     7B 00 00 FF 
19764     98 E4 85 F1 | 	sub	objptr, ##63128
19768     17 20 56 F2 | 	cmps	local02, #23 wc
1976c     40 00 90 CD |  if_b	jmp	#LR__1968
19770     7B 00 00 FF 
19774     98 E4 05 F1 | 	add	objptr, ##63128
19778     F2 24 02 FB | 	rdlong	local04, objptr
1977c     7B 00 00 FF 
19780     98 E4 85 F1 | 	sub	objptr, ##63128
19784     12 23 02 F6 | 	mov	local03, local04
19788     20 22 56 F2 | 	cmps	local03, #32 wc
1978c     20 00 90 3D |  if_ae	jmp	#LR__1968
19790     7B 00 00 FF 
19794     98 E4 05 F1 | 	add	objptr, ##63128
19798     F2 20 02 FB | 	rdlong	local02, objptr
1979c     09 20 86 F1 | 	sub	local02, #9
197a0     F2 20 62 FC | 	wrlong	local02, objptr
197a4     7B 00 00 FF 
197a8     98 E4 85 F1 | 	sub	objptr, ##63128
197ac     54 00 90 FD | 	jmp	#LR__1970
197b0                 | LR__1968
197b0     7B 00 00 FF 
197b4     98 E4 05 F1 | 	add	objptr, ##63128
197b8     F2 20 02 FB | 	rdlong	local02, objptr
197bc     7B 00 00 FF 
197c0     98 E4 85 F1 | 	sub	objptr, ##63128
197c4     0E 20 56 F2 | 	cmps	local02, #14 wc
197c8     38 00 90 CD |  if_b	jmp	#LR__1969
197cc     7B 00 00 FF 
197d0     98 E4 05 F1 | 	add	objptr, ##63128
197d4     F2 24 02 FB | 	rdlong	local04, objptr
197d8     7B 00 00 FF 
197dc     98 E4 85 F1 | 	sub	objptr, ##63128
197e0     12 23 02 F6 | 	mov	local03, local04
197e4     17 22 56 F2 | 	cmps	local03, #23 wc
197e8     7B 00 00 CF 
197ec     98 E4 05 C1 |  if_b	add	objptr, ##63128
197f0     F2 20 02 CB |  if_b	rdlong	local02, objptr
197f4     27 20 06 C1 |  if_b	add	local02, #39
197f8     F2 20 62 CC |  if_b	wrlong	local02, objptr
197fc     7B 00 00 CF 
19800     98 E4 85 C1 |  if_b	sub	objptr, ##63128
19804                 | LR__1969
19804                 | LR__1970
19804                 | LR__1971
19804                 | LR__1972
19804                 | LR__1973
19804                 | '  
19804                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
19804     7B 00 00 FF 
19808     98 E4 05 F1 | 	add	objptr, ##63128
1980c     F2 20 02 FB | 	rdlong	local02, objptr
19810     7B 00 00 FF 
19814     98 E4 85 F1 | 	sub	objptr, ##63128
19818     01 20 56 F2 | 	cmps	local02, #1 wc
1981c     90 00 90 CD |  if_b	jmp	#LR__1974
19820     7B 00 00 FF 
19824     98 E4 05 F1 | 	add	objptr, ##63128
19828     F2 24 02 FB | 	rdlong	local04, objptr
1982c     7B 00 00 FF 
19830     98 E4 85 F1 | 	sub	objptr, ##63128
19834     12 23 02 F6 | 	mov	local03, local04
19838     7F 22 56 F2 | 	cmps	local03, #127 wc
1983c     38 E4 05 C1 |  if_b	add	objptr, #56
19840     F2 1E E2 CA |  if_b	rdword	local01, objptr
19844     38 E4 85 C1 |  if_b	sub	objptr, #56
19848     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1984c     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
19850     5C 00 90 3D |  if_ae	jmp	#LR__1974
19854     7B 00 00 FF 
19858     98 E4 05 F1 | 	add	objptr, ##63128
1985c     F2 12 02 FB | 	rdlong	arg01, objptr
19860     7B 00 00 FF 
19864     98 E4 85 F1 | 	sub	objptr, ##63128
19868     94 4C B0 FD | 	call	#__system__Chr_S
1986c     FD 2A 02 F6 | 	mov	local07, result1
19870     57 00 00 FF 
19874     00 E4 05 F1 | 	add	objptr, ##44544
19878     F2 12 02 FB | 	rdlong	arg01, objptr
1987c     57 00 00 FF 
19880     00 E4 85 F1 | 	sub	objptr, ##44544
19884     15 15 02 F6 | 	mov	arg02, local07
19888     C8 2A B0 FD | 	call	#__system___string_concat
1988c     57 00 00 FF 
19890     00 E4 05 F1 | 	add	objptr, ##44544
19894     F2 FA 61 FC | 	wrlong	result1, objptr
19898     24 00 00 FF 
1989c     98 E4 05 F1 | 	add	objptr, ##18584
198a0     F2 12 02 FB | 	rdlong	arg01, objptr
198a4     7B 00 00 FF 
198a8     98 E4 85 F1 | 	sub	objptr, ##63128
198ac     F0 16 B0 FD | 	call	#_hg010b_spin2_putchar
198b0                 | LR__1974
198b0                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
198b0     7B 00 00 FF 
198b4     98 E4 05 F1 | 	add	objptr, ##63128
198b8     F2 20 02 FB | 	rdlong	local02, objptr
198bc     7B 00 00 FF 
198c0     98 E4 85 F1 | 	sub	objptr, ##63128
198c4     01 20 56 F2 | 	cmps	local02, #1 wc
198c8     D0 00 90 CD |  if_b	jmp	#LR__1975
198cc     7B 00 00 FF 
198d0     98 E4 05 F1 | 	add	objptr, ##63128
198d4     F2 24 02 FB | 	rdlong	local04, objptr
198d8     7B 00 00 FF 
198dc     98 E4 85 F1 | 	sub	objptr, ##63128
198e0     12 23 02 F6 | 	mov	local03, local04
198e4     7F 22 56 F2 | 	cmps	local03, #127 wc
198e8     B0 00 90 3D |  if_ae	jmp	#LR__1975
198ec     38 E4 05 F1 | 	add	objptr, #56
198f0     F2 1E E2 FA | 	rdword	local01, objptr
198f4     38 E4 85 F1 | 	sub	objptr, #56
198f8     0F 27 32 F9 | 	getword	local05, local01, #0
198fc     FE 26 0E F2 | 	cmp	local05, #254 wz
19900     79 00 00 AF 
19904     C4 E5 05 A1 |  if_e	add	objptr, ##62404
19908     F2 2C 02 AB |  if_e	rdlong	local08, objptr
1990c     79 00 00 AF 
19910     C4 E5 85 A1 |  if_e	sub	objptr, ##62404
19914     16 2F 02 A6 |  if_e	mov	local09, local08
19918     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1991c     7C 00 90 5D |  if_ne	jmp	#LR__1975
19920     04 00 00 FF 
19924     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19928     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1992c     04 00 00 FF 
19930     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19934     56 00 00 FF 
19938     44 22 06 F6 | 	mov	local03, ##44100
1993c     0C 24 C6 F9 | 	decod	local04, #12
19940     00 26 06 F6 | 	mov	local05, #0
19944     03 00 00 FF 
19948     DE 1E 06 F6 | 	mov	local01, ##1758
1994c     07 12 06 F6 | 	mov	arg01, #7
19950     56 00 00 FF 
19954     44 16 06 F6 | 	mov	arg03, ##44100
19958     0C 18 C6 F9 | 	decod	arg04, #12
1995c     00 1A 06 F6 | 	mov	arg05, #0
19960     03 00 00 FF 
19964     DE 1C 06 F6 | 	mov	arg06, ##1758
19968     0B 00 00 FF 
1996c     C0 E4 05 F1 | 	add	objptr, ##5824
19970     34 25 B0 FD | 	call	#_audio096_spin2_play
19974     0B 00 00 FF 
19978     C0 E4 85 F1 | 	sub	objptr, ##5824
1997c     2C 13 06 F6 | 	mov	arg01, #300
19980     68 2C B0 FD | 	call	#__system___waitms
19984     07 12 06 F6 | 	mov	arg01, #7
19988     0B 00 00 FF 
1998c     C0 E4 05 F1 | 	add	objptr, ##5824
19990     64 26 B0 FD | 	call	#_audio096_spin2_stop
19994     0B 00 00 FF 
19998     C0 E4 85 F1 | 	sub	objptr, ##5824
1999c                 | LR__1975
1999c                 | '  
1999c                 | '   'tab
1999c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1999c     7B 00 00 FF 
199a0     90 E4 05 F1 | 	add	objptr, ##63120
199a4     F2 20 02 FB | 	rdlong	local02, objptr
199a8     7B 00 00 FF 
199ac     90 E4 85 F1 | 	sub	objptr, ##63120
199b0     10 21 E2 F8 | 	getbyte	local02, local02, #0
199b4     2B 20 0E F2 | 	cmp	local02, #43 wz
199b8     B4 00 90 5D |  if_ne	jmp	#LR__1976
199bc     38 E4 05 F1 | 	add	objptr, #56
199c0     F2 24 E2 FA | 	rdword	local04, objptr
199c4     38 E4 85 F1 | 	sub	objptr, #56
199c8     12 23 32 F9 | 	getword	local03, local04, #0
199cc     F0 22 16 F2 | 	cmp	local03, #240 wc
199d0     9C 00 90 CD |  if_b	jmp	#LR__1976
199d4     79 00 00 FF 
199d8     C4 E5 05 F1 | 	add	objptr, ##62404
199dc     F2 1E 02 FB | 	rdlong	local01, objptr
199e0     79 00 00 FF 
199e4     C4 E5 85 F1 | 	sub	objptr, ##62404
199e8     0F 27 02 F6 | 	mov	local05, local01
199ec     01 26 0E F2 | 	cmp	local05, #1 wz
199f0     7C 00 90 5D |  if_ne	jmp	#LR__1976
199f4     04 00 00 FF 
199f8     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
199fc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19a00     04 00 00 FF 
19a04     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19a08     56 00 00 FF 
19a0c     44 22 06 F6 | 	mov	local03, ##44100
19a10     0E 24 C6 F9 | 	decod	local04, #14
19a14     00 26 06 F6 | 	mov	local05, #0
19a18     03 00 00 FF 
19a1c     DE 1E 06 F6 | 	mov	local01, ##1758
19a20     00 12 06 F6 | 	mov	arg01, #0
19a24     56 00 00 FF 
19a28     44 16 06 F6 | 	mov	arg03, ##44100
19a2c     0E 18 C6 F9 | 	decod	arg04, #14
19a30     00 1A 06 F6 | 	mov	arg05, #0
19a34     03 00 00 FF 
19a38     DE 1C 06 F6 | 	mov	arg06, ##1758
19a3c     0B 00 00 FF 
19a40     C0 E4 05 F1 | 	add	objptr, ##5824
19a44     60 24 B0 FD | 	call	#_audio096_spin2_play
19a48     0B 00 00 FF 
19a4c     C0 E4 85 F1 | 	sub	objptr, ##5824
19a50     2C 13 06 F6 | 	mov	arg01, #300
19a54     94 2B B0 FD | 	call	#__system___waitms
19a58     00 12 06 F6 | 	mov	arg01, #0
19a5c     0B 00 00 FF 
19a60     C0 E4 05 F1 | 	add	objptr, ##5824
19a64     90 25 B0 FD | 	call	#_audio096_spin2_stop
19a68     0B 00 00 FF 
19a6c     C0 E4 85 F1 | 	sub	objptr, ##5824
19a70                 | LR__1976
19a70                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
19a70     7B 00 00 FF 
19a74     90 E4 05 F1 | 	add	objptr, ##63120
19a78     F2 20 02 FB | 	rdlong	local02, objptr
19a7c     7B 00 00 FF 
19a80     90 E4 85 F1 | 	sub	objptr, ##63120
19a84     10 21 E2 F8 | 	getbyte	local02, local02, #0
19a88     2B 20 0E F2 | 	cmp	local02, #43 wz
19a8c     AC 00 90 5D |  if_ne	jmp	#LR__1979
19a90     38 E4 05 F1 | 	add	objptr, #56
19a94     F2 24 E2 FA | 	rdword	local04, objptr
19a98     38 E4 85 F1 | 	sub	objptr, #56
19a9c     12 23 32 F9 | 	getword	local03, local04, #0
19aa0     F0 22 16 F2 | 	cmp	local03, #240 wc
19aa4     94 00 90 3D |  if_ae	jmp	#LR__1979
19aa8     38 E4 05 F1 | 	add	objptr, #56
19aac     F2 20 E2 FA | 	rdword	local02, objptr
19ab0     10 23 52 F6 | 	abs	local03, local02 wc
19ab4     11 23 42 F8 | 	getnib	local03, local03, #0
19ab8     11 23 82 F6 | 	negc	local03, local03
19abc     11 25 52 F6 | 	abs	local04, local03 wc
19ac0     01 24 46 F0 | 	shr	local04, #1
19ac4     12 25 82 F6 | 	negc	local04, local04
19ac8     7B 00 00 FF 
19acc     64 E4 05 F1 | 	add	objptr, ##63076
19ad0     F2 24 62 FC | 	wrlong	local04, objptr
19ad4     12 31 02 F6 | 	mov	local10, local04
19ad8     7B 00 00 FF 
19adc     9C E4 85 F1 | 	sub	objptr, ##63132
19ae0                 | LR__1977
19ae0     08 30 56 F2 | 	cmps	local10, #8 wc
19ae4     54 00 90 3D |  if_ae	jmp	#LR__1978
19ae8     57 00 00 FF 
19aec     00 E4 05 F1 | 	add	objptr, ##44544
19af0     F2 12 02 FB | 	rdlong	arg01, objptr
19af4     57 00 00 FF 
19af8     00 E4 85 F1 | 	sub	objptr, ##44544
19afc     62 01 00 FF 
19b00     31 25 06 F6 | 	mov	local04, ##@LR__5021
19b04     12 15 02 F6 | 	mov	arg02, local04
19b08     48 28 B0 FD | 	call	#__system___string_concat
19b0c     57 00 00 FF 
19b10     00 E4 05 F1 | 	add	objptr, ##44544
19b14     F2 FA 61 FC | 	wrlong	result1, objptr
19b18     57 00 00 FF 
19b1c     00 E4 85 F1 | 	sub	objptr, ##44544
19b20     62 01 00 FF 
19b24     33 13 06 F6 | 	mov	arg01, ##@LR__5022
19b28     90 16 B0 FD | 	call	#_hg010b_spin2_write
19b2c     18 23 02 F6 | 	mov	local03, local10
19b30     01 22 06 F1 | 	add	local03, #1
19b34     11 31 02 F6 | 	mov	local10, local03
19b38     A4 FF 9F FD | 	jmp	#LR__1977
19b3c                 | LR__1978
19b3c                 | LR__1979
19b3c                 | '  
19b3c                 | '   'backspace
19b3c                 | '   if (key3 and 255) = 42 then 
19b3c     7B 00 00 FF 
19b40     90 E4 05 F1 | 	add	objptr, ##63120
19b44     F2 20 02 FB | 	rdlong	local02, objptr
19b48     7B 00 00 FF 
19b4c     90 E4 85 F1 | 	sub	objptr, ##63120
19b50     10 21 E2 F8 | 	getbyte	local02, local02, #0
19b54     2A 20 0E F2 | 	cmp	local02, #42 wz
19b58     D4 00 90 5D |  if_ne	jmp	#LR__1984
19b5c                 | '       if v.cursor_x>4 then 
19b5c     38 E4 05 F1 | 	add	objptr, #56
19b60     F2 20 E2 FA | 	rdword	local02, objptr
19b64     38 E4 85 F1 | 	sub	objptr, #56
19b68     05 20 16 F2 | 	cmp	local02, #5 wc
19b6c     9C 00 90 CD |  if_b	jmp	#LR__1982
19b70     57 00 00 FF 
19b74     00 E4 05 F1 | 	add	objptr, ##44544
19b78     F2 26 02 FB | 	rdlong	local05, objptr
19b7c     57 00 00 FF 
19b80     00 E4 85 F1 | 	sub	objptr, ##44544
19b84     13 13 02 F6 | 	mov	arg01, local05
19b88     09 33 02 F6 | 	mov	local11, arg01
19b8c     97 06 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
19b90                 | LR__1980
19b90     19 FB C9 FA | 	rdbyte	result1, local11 wz
19b94     01 32 06 51 |  if_ne	add	local11, #1
19b98     F4 FF 9F 5D |  if_ne	jmp	#LR__1980
19b9c                 | LR__1981
19b9c     09 33 82 F1 | 	sub	local11, arg01
19ba0     19 15 02 F6 | 	mov	arg02, local11
19ba4     01 14 86 F1 | 	sub	arg02, #1
19ba8     13 13 02 F6 | 	mov	arg01, local05
19bac     8C 47 B0 FD | 	call	#__system__Left_S
19bb0     57 00 00 FF 
19bb4     00 E4 05 F1 | 	add	objptr, ##44544
19bb8     F2 FA 61 FC | 	wrlong	result1, objptr
19bbc     56 00 00 FF 
19bc0     C8 E5 85 F1 | 	sub	objptr, ##44488
19bc4     F2 12 E2 FA | 	rdword	arg01, objptr
19bc8     02 12 86 F1 | 	sub	arg01, #2
19bcc     02 E4 05 F1 | 	add	objptr, #2
19bd0     F2 14 C2 FA | 	rdbyte	arg02, objptr
19bd4     3A E4 85 F1 | 	sub	objptr, #58
19bd8     7C 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19bdc     20 12 06 F6 | 	mov	arg01, #32
19be0     BC 13 B0 FD | 	call	#_hg010b_spin2_putchar
19be4     38 E4 05 F1 | 	add	objptr, #56
19be8     F2 12 E2 FA | 	rdword	arg01, objptr
19bec     02 12 86 F1 | 	sub	arg01, #2
19bf0     02 E4 05 F1 | 	add	objptr, #2
19bf4     F2 24 C2 FA | 	rdbyte	local04, objptr
19bf8     3A E4 85 F1 | 	sub	objptr, #58
19bfc     12 23 E2 F8 | 	getbyte	local03, local04, #0
19c00     11 15 02 F6 | 	mov	arg02, local03
19c04     50 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19c08     24 00 90 FD | 	jmp	#LR__1983
19c0c                 | LR__1982
19c0c     62 01 00 FF 
19c10     35 21 06 F6 | 	mov	local02, ##@LR__5023
19c14     57 00 00 FF 
19c18     00 E4 05 F1 | 	add	objptr, ##44544
19c1c     F2 20 62 FC | 	wrlong	local02, objptr
19c20     56 00 00 FF 
19c24     C8 E5 85 F1 | 	sub	objptr, ##44488
19c28     F2 08 58 FC | 	wrword	#4, objptr
19c2c     38 E4 85 F1 | 	sub	objptr, #56
19c30                 | LR__1983
19c30                 | LR__1984
19c30                 | '    
19c30                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
19c30                 | '  
19c30                 | '   if key4=key_enter then 
19c30     7B 00 00 FF 
19c34     98 E4 05 F1 | 	add	objptr, ##63128
19c38     F2 28 02 FB | 	rdlong	local06, objptr
19c3c     7B 00 00 FF 
19c40     98 E4 85 F1 | 	sub	objptr, ##63128
19c44     8D 28 0E F2 | 	cmp	local06, #141 wz
19c48     50 00 90 5D |  if_ne	jmp	#LR__1985
19c4c     CC 16 B0 FD | 	call	#_hg010b_spin2_crlf
19c50     C8 6D BE FD | 	call	#_interpret
19c54     62 01 00 FF 
19c58     36 21 06 F6 | 	mov	local02, ##@LR__5024
19c5c     57 00 00 FF 
19c60     00 E4 05 F1 | 	add	objptr, ##44544
19c64     F2 20 62 FC | 	wrlong	local02, objptr
19c68     1A FA 61 FD | 	getct	result1
19c6c     24 00 00 FF 
19c70     A0 E4 05 F1 | 	add	objptr, ##18592
19c74     F2 24 02 FB | 	rdlong	local04, objptr
19c78     12 23 02 F6 | 	mov	local03, local04
19c7c     11 FB 81 F1 | 	sub	result1, local03
19c80     F2 FA 61 FC | 	wrlong	result1, objptr
19c84     14 E4 85 F1 | 	sub	objptr, #20
19c88     F2 00 68 FC | 	wrlong	#0, objptr
19c8c     08 E4 05 F1 | 	add	objptr, #8
19c90     F2 00 68 FC | 	wrlong	#0, objptr
19c94     7B 00 00 FF 
19c98     94 E4 85 F1 | 	sub	objptr, ##63124
19c9c                 | LR__1985
19c9c     7B 00 00 FF 
19ca0     90 E4 05 F1 | 	add	objptr, ##63120
19ca4     F2 00 68 FC | 	wrlong	#0, objptr
19ca8     7B 00 00 FF 
19cac     90 E4 85 F1 | 	sub	objptr, ##63120
19cb0     80 F6 9F FD | 	jmp	#LR__1960
19cb4     A7 F0 03 F6 | 	mov	ptra, fp
19cb8     B2 00 A0 FD | 	call	#popregs_
19cbc                 | _program_ret
19cbc     2D 00 64 FD | 	ret
19cc0                 | 
19cc0                 | ' '' this is not a main program.
19cc0                 | ' 
19cc0                 | ' '****************************************************************************************************************
19cc0                 | ' '                                                                                                             	*
19cc0                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
19cc0                 | ' '                                                                                                            	*
19cc0                 | ' ' mode - mode #, see below											*
19cc0                 | ' ' base - HDMI base pin												*
19cc0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
19cc0                 | ' '														*
19cc0                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
19cc0                 | ' '' set bit #15 for custom timings														*
19cc0                 | ' '' p - 1 - psram, 0 - hub											*
19cc0                 | ' '' t - 1 - graphics, 0 - text											*
19cc0                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
19cc0                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
19cc0                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
19cc0                 | ' '														*
19cc0                 | ' '****************************************************************************************************************
19cc0                 | ' 
19cc0                 | ' pub start(base,mb):result |i
19cc0                 | _hg010b_spin2_start
19cc0                 | ' 
19cc0                 | ' '--------------------------- initialize pointers and variables
19cc0                 | ' 
19cc0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
19cc0     30 E4 05 F1 | 	add	objptr, #48
19cc4     F2 FA 01 F6 | 	mov	result1, objptr
19cc8     28 E4 85 F1 | 	sub	objptr, #40
19ccc     F2 FA 61 FC | 	wrlong	result1, objptr
19cd0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
19cd0                 | ' hdmibase:=base							' HDMI base pin, 8*n
19cd0     18 E4 05 F1 | 	add	objptr, #24
19cd4     F2 12 62 FC | 	wrlong	arg01, objptr
19cd8                 | ' mailbox_ptr:=mb		
19cd8     04 E4 05 F1 | 	add	objptr, #4
19cdc     F2 14 62 FC | 	wrlong	arg02, objptr
19ce0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
19ce0     C1 E5 05 F1 | 	add	objptr, #449
19ce4     F2 14 62 FC | 	wrlong	arg02, objptr
19ce8                 | ' sprite_ptr:=@spr1ptr
19ce8     D8 E4 85 F1 | 	sub	objptr, #216
19cec     F2 FA 01 F6 | 	mov	result1, objptr
19cf0     E5 E4 85 F1 | 	sub	objptr, #229
19cf4     F2 FA 61 FC | 	wrlong	result1, objptr
19cf8                 | ' 
19cf8                 | ' 		'
19cf8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
19cf8     E5 E4 05 F1 | 	add	objptr, #229
19cfc     F2 FA 01 FB | 	rdlong	result1, objptr
19d00     D0 FA 05 F1 | 	add	result1, #208
19d04     FD 10 58 FC | 	wrword	#8, result1
19d08                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
19d08     F2 16 02 FB | 	rdlong	arg03, objptr
19d0c     D2 16 06 F1 | 	add	arg03, #210
19d10     0B 21 58 FC | 	wrword	#16, arg03
19d14                 | ' leading_spaces:=0				'
19d14     A5 E5 05 F1 | 	add	objptr, #421
19d18     F2 00 68 FC | 	wrlong	#0, objptr
19d1c                 | ' 
19d1c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
19d1c     99 E4 85 F1 | 	sub	objptr, #153
19d20     00 00 A0 FF 
19d24     F2 0E 68 FC | 	wrlong	##1073741831, objptr
19d28                 | ' emptydl[1]:=0
19d28     04 E4 05 F1 | 	add	objptr, #4
19d2c     F2 00 68 FC | 	wrlong	#0, objptr
19d30                 | ' 
19d30                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
19d30                 | ' 
19d30                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
19d30     28 E5 85 F1 | 	sub	objptr, #296
19d34     F2 02 68 FC | 	wrlong	#1, objptr
19d38                 | ' if s_debug<>0
19d38                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
19d38     20 00 80 FF 
19d3c     F2 00 68 FC | 	wrlong	##16384, objptr
19d40     F5 E4 85 F1 | 	sub	objptr, #245
19d44                 | ' setmode()							' set the mode, see below
19d44     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
19d48                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
19d48     45 E4 05 F1 | 	add	objptr, #69
19d4c     F2 FA 01 F6 | 	mov	result1, objptr
19d50     35 E4 85 F1 | 	sub	objptr, #53
19d54     F2 FA 61 FC | 	wrlong	result1, objptr
19d58                 | ' cursor_ptr:=@cursor_x						
19d58     28 E4 05 F1 | 	add	objptr, #40
19d5c     F2 16 02 F6 | 	mov	arg03, objptr
19d60     2C E4 85 F1 | 	sub	objptr, #44
19d64     F2 16 62 FC | 	wrlong	arg03, objptr
19d68                 | ' fontnum:=0  							' start with a PC type font 
19d68     55 E4 05 F1 | 	add	objptr, #85
19d6c     F2 00 68 FC | 	wrlong	#0, objptr
19d70                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
19d70     1C E4 05 F1 | 	add	objptr, #28
19d74     F2 12 02 F6 | 	mov	arg01, objptr
19d78     7D E4 85 F1 | 	sub	objptr, #125
19d7c     10 00 00 FF 
19d80     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
19d84     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
19d88     10 00 00 FF 
19d8c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
19d90     10 16 06 F6 | 	mov	arg03, #16
19d94     80 24 B0 FD | 	call	#__system____builtin_memmove
19d98                 | ' leading_spaces:=0
19d98     01 00 00 FF 
19d9c     B2 E4 05 F1 | 	add	objptr, ##690
19da0     F2 00 68 FC | 	wrlong	#0, objptr
19da4     01 00 00 FF 
19da8     B2 E4 85 F1 | 	sub	objptr, ##690
19dac                 | ' '---------------------------- initialize a cursor (MSDOS type)
19dac                 | ' 
19dac                 | ' initcursor(154)
19dac     9A 12 06 F6 | 	mov	arg01, #154
19db0     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
19db4                 | ' 
19db4                 | ' '---------------------------- start the cog
19db4                 | ' 
19db4                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
19db4     10 00 00 FF 
19db8     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
19dbc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
19dc0     10 00 00 FF 
19dc4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
19dc8     10 E4 05 F1 | 	add	objptr, #16
19dcc     10 FA 05 F6 | 	mov	result1, #16
19dd0     28 E4 61 FD | 	setq	objptr
19dd4     0A FB F1 FC | 	coginit	result1, arg02 wc
19dd8     01 FA 65 C6 |  if_b	neg	result1, #1
19ddc     1C E4 05 F1 | 	add	objptr, #28
19de0     F2 FA 61 FC | 	wrlong	result1, objptr
19de4     2C E4 85 F1 | 	sub	objptr, #44
19de8                 | ' waitms(40)							' wait for stabilize
19de8     28 12 06 F6 | 	mov	arg01, #40
19dec     FC 27 B0 FD | 	call	#__system___waitms
19df0                 | ' return cog							' return the driver's cog #
19df0     2C E4 05 F1 | 	add	objptr, #44
19df4     F2 FA 01 FB | 	rdlong	result1, objptr
19df8     2C E4 85 F1 | 	sub	objptr, #44
19dfc                 | _hg010b_spin2_start_ret
19dfc     2D 00 64 FD | 	ret
19e00                 | 
19e00                 | ' 
19e00                 | ' 
19e00                 | ' '**************************************************************************************************************** 
19e00                 | ' '                                                                                                             	*
19e00                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
19e00                 | ' '  Mode number - see start() above or bits below								*
19e00                 | ' '                                                                                                             	*
19e00                 | ' '****************************************************************************************************************
19e00                 | ' 
19e00                 | ' '---------------------------- initialize a cursor (MSDOS type)
19e00                 | ' pub initcursor(color) |i
19e00                 | _hg010b_spin2_initcursor
19e00     03 4A 05 F6 | 	mov	COUNT_, #3
19e04     A8 00 A0 FD | 	call	#pushregs_
19e08     09 1F 02 F6 | 	mov	local01, arg01
19e0c                 | ' 
19e0c                 | ' cursor_x:=0							' place the cursor at 0:0
19e0c     38 E4 05 F1 | 	add	objptr, #56
19e10     F2 00 58 FC | 	wrword	#0, objptr
19e14                 | ' cursor_y:=0
19e14     02 E4 05 F1 | 	add	objptr, #2
19e18     F2 00 48 FC | 	wrbyte	#0, objptr
19e1c                 | ' repeat i from 0 to 111
19e1c     00 20 06 F6 | 	mov	local02, #0
19e20     F8 E5 05 F1 | 	add	objptr, #504
19e24     97 1A 48 FB | 	callpa	#(@LR__1992-@LR__1990)>>2,fcache_load_ptr_
19e28                 | LR__1990
19e28                 | '   cursor[i]:=0
19e28     10 23 02 F6 | 	mov	local03, local02
19e2c     F2 22 02 F1 | 	add	local03, objptr
19e30     11 01 48 FC | 	wrbyte	#0, local03
19e34     01 20 06 F1 | 	add	local02, #1
19e38     70 20 56 F2 | 	cmps	local02, #112 wc
19e3c     E8 FF 9F CD |  if_b	jmp	#LR__1990
19e40                 | ' repeat i from 112 to 127
19e40     70 20 06 F6 | 	mov	local02, #112
19e44                 | LR__1991
19e44                 | '   cursor[i]:=color  
19e44     10 23 02 F6 | 	mov	local03, local02
19e48     F2 22 02 F1 | 	add	local03, objptr
19e4c     11 1F 42 FC | 	wrbyte	local01, local03
19e50     01 20 06 F1 | 	add	local02, #1
19e54     80 20 16 F2 | 	cmp	local02, #128 wc
19e58     E8 FF 9F CD |  if_b	jmp	#LR__1991
19e5c                 | LR__1992
19e5c                 | ' 'repeat i from 0 to 127
19e5c                 | ' '  if ((i/8)//2)
19e5c                 | ' '    cursor[i]:=15
19e5c                 | ' '  else
19e5c                 | ' '    cursor[i]:=0
19e5c                 | ' '  if i>=120    
19e5c                 | ' '    cursor[i]:=40
19e5c                 | ' setspriteptr(17,@cursor)
19e5c     F2 14 02 F6 | 	mov	arg02, objptr
19e60     01 00 00 FF 
19e64     32 E4 85 F1 | 	sub	objptr, ##562
19e68     11 12 06 F6 | 	mov	arg01, #17
19e6c     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
19e70                 | ' setspritesize(17,8,16)
19e70     11 12 06 F6 | 	mov	arg01, #17
19e74     08 14 06 F6 | 	mov	arg02, #8
19e78     10 16 06 F6 | 	mov	arg03, #16
19e7c     C8 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
19e80                 | ' setspritepos(17,0,0)
19e80     11 12 06 F6 | 	mov	arg01, #17
19e84     00 14 06 F6 | 	mov	arg02, #0
19e88     00 16 06 F6 | 	mov	arg03, #0
19e8c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
19e90     A7 F0 03 F6 | 	mov	ptra, fp
19e94     B2 00 A0 FD | 	call	#popregs_
19e98                 | _hg010b_spin2_initcursor_ret
19e98     2D 00 64 FD | 	ret
19e9c                 | 
19e9c                 | ' 
19e9c                 | '  
19e9c                 | ' pub setcursorcolor(color) |i
19e9c                 | _hg010b_spin2_setcursorcolor
19e9c                 | ' 
19e9c                 | ' 
19e9c                 | ' repeat i from 0 to 111
19e9c     00 00 06 F6 | 	mov	_var01, #0
19ea0     01 00 00 FF 
19ea4     32 E4 05 F1 | 	add	objptr, ##562
19ea8     97 1A 48 FB | 	callpa	#(@LR__2002-@LR__2000)>>2,fcache_load_ptr_
19eac                 | LR__2000
19eac                 | '   cursor[i]:=0
19eac     00 03 02 F6 | 	mov	_var02, _var01
19eb0     F2 02 02 F1 | 	add	_var02, objptr
19eb4     01 01 48 FC | 	wrbyte	#0, _var02
19eb8     01 00 06 F1 | 	add	_var01, #1
19ebc     70 00 56 F2 | 	cmps	_var01, #112 wc
19ec0     E8 FF 9F CD |  if_b	jmp	#LR__2000
19ec4                 | ' repeat i from 112 to 127
19ec4     70 00 06 F6 | 	mov	_var01, #112
19ec8                 | LR__2001
19ec8                 | '   cursor[i]:=color  
19ec8     00 03 02 F6 | 	mov	_var02, _var01
19ecc     F2 02 02 F1 | 	add	_var02, objptr
19ed0     01 13 42 FC | 	wrbyte	arg01, _var02
19ed4     01 00 06 F1 | 	add	_var01, #1
19ed8     80 00 16 F2 | 	cmp	_var01, #128 wc
19edc     E8 FF 9F CD |  if_b	jmp	#LR__2001
19ee0                 | LR__2002
19ee0     01 00 00 FF 
19ee4     32 E4 85 F1 | 	sub	objptr, ##562
19ee8                 | _hg010b_spin2_setcursorcolor_ret
19ee8     2D 00 64 FD | 	ret
19eec                 | 
19eec                 | '  
19eec                 | ' 
19eec                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
19eec                 | _hg010b_spin2_setmode
19eec     02 4A 05 F6 | 	mov	COUNT_, #2
19ef0     A8 00 A0 FD | 	call	#pushregs_
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' dl_ptr:=@emptydl[0]
19ef4     01 00 00 FF 
19ef8     19 E4 05 F1 | 	add	objptr, ##537
19efc     F2 66 02 F6 | 	mov	muldivb_, objptr
19f00     FD E5 85 F1 | 	sub	objptr, #509
19f04     F2 66 62 FC | 	wrlong	muldivb_, objptr
19f08                 | ' 
19f08                 | ' if cog>0 
19f08     10 E4 05 F1 | 	add	objptr, #16
19f0c     F2 66 02 FB | 	rdlong	muldivb_, objptr
19f10     2C E4 85 F1 | 	sub	objptr, #44
19f14     01 66 56 F2 | 	cmps	muldivb_, #1 wc
19f18                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
19f18     01 12 06 36 |  if_ae	mov	arg01, #1
19f1c     70 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
19f20                 | ' xres:=1024
19f20     01 00 00 FF 
19f24     22 E4 05 F1 | 	add	objptr, ##546
19f28     02 00 80 FF 
19f2c     F2 00 68 FC | 	wrlong	##1024, objptr
19f30                 | ' yres:=576  
19f30     04 E4 05 F1 | 	add	objptr, #4
19f34     01 00 80 FF 
19f38     F2 80 68 FC | 	wrlong	##576, objptr
19f3c                 | ' ppl:=(timings[3])
19f3c     10 00 00 FF 
19f40     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
19f44     F7 66 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
19f48     51 E5 85 F1 | 	sub	objptr, #337
19f4c     F2 66 62 FC | 	wrlong	muldivb_, objptr
19f50                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
19f50     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
19f54     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
19f58     01 1E 66 F0 | 	shl	local01, #1
19f5c     80 E4 85 F1 | 	sub	objptr, #128
19f60     F2 1E 62 FC | 	wrlong	local01, objptr
19f64                 | ' cpl1:=cpl '' todo remove
19f64     04 E4 05 F1 | 	add	objptr, #4
19f68     F2 1E 62 FC | 	wrlong	local01, objptr
19f6c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
19f6c     02 00 00 FF 
19f70     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
19f74     41 E4 85 F1 | 	sub	objptr, #65
19f78     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
19f7c                 | ' repeat i from 0 to 3
19f7c     00 20 06 F6 | 	mov	local02, #0
19f80     02 00 00 FF 
19f84     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
19f88     08 E4 05 F1 | 	add	objptr, #8
19f8c     97 20 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
19f90                 | LR__2010
19f90                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
19f90     10 1F 02 F6 | 	mov	local01, local02
19f94     02 1E 66 F0 | 	shl	local01, #2
19f98     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
19f9c     F2 66 02 FB | 	rdlong	muldivb_, objptr
19fa0     11 66 66 F0 | 	shl	muldivb_, #17
19fa4     0F 1F 02 FB | 	rdlong	local01, local01
19fa8     33 1F 02 F1 | 	add	local01, muldivb_
19fac     80 40 38 FF 
19fb0     00 1E 06 F1 | 	add	local01, ##1887502336
19fb4     10 67 02 F6 | 	mov	muldivb_, local02
19fb8     02 66 66 F0 | 	shl	muldivb_, #2
19fbc     F7 66 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
19fc0     33 1F 62 FC | 	wrlong	local01, muldivb_
19fc4     01 20 06 F1 | 	add	local02, #1
19fc8     04 20 56 F2 | 	cmps	local02, #4 wc
19fcc     C0 FF 9F CD |  if_b	jmp	#LR__2010
19fd0                 | LR__2011
19fd0     20 E4 85 F1 | 	sub	objptr, #32
19fd4                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
19fd4     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
19fd8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
19fdc     14 1E 66 FC | 	wrlong	local01, #20
19fe0                 | ' hubset(timings[10])
19fe0     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
19fe4     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
19fe8     10 00 00 FF 
19fec     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
19ff0     00 12 62 FD | 	hubset	arg01
19ff4                 | ' waitms(1)                                                   	' wait for stabilization
19ff4     01 12 06 F6 | 	mov	arg01, #1
19ff8     F0 25 B0 FD | 	call	#__system___waitms
19ffc     10 00 00 FF 
1a000     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1a004     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1a008     5D E4 05 F1 | 	add	objptr, #93
1a00c     F2 20 62 FC | 	wrlong	local02, objptr
1a010     10 1F 52 F6 | 	abs	local01, local02 wc
1a014     04 1E 46 F0 | 	shr	local01, #4
1a018     0F 1F 82 F6 | 	negc	local01, local01
1a01c     9C E4 05 F1 | 	add	objptr, #156
1a020     F2 1E 62 FC | 	wrlong	local01, objptr
1a024     A4 E4 85 F1 | 	sub	objptr, #164
1a028     F2 20 02 FB | 	rdlong	local02, objptr
1a02c     08 E4 05 F1 | 	add	objptr, #8
1a030     F2 1E 02 FB | 	rdlong	local01, objptr
1a034     0F 21 02 FD | 	qmul	local02, local01
1a038                 | ' lines:=timings[11]
1a038                 | ' t_lines:=lines/16
1a038                 | ' buflen:=cpl*lines						' framebuffer length in longs
1a038     29 E4 85 F1 | 	sub	objptr, #41
1a03c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1a03c     19 1E C6 F9 | 	decod	local01, #25
1a040                 | ' mode_ptr:=@timings						' set pointers to timings
1a040     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
1a044                 | ' graphmode:=1024+512+192+48							' det global variable
1a044                 | ' makedl(graphmode)							' make a DL for the mode
1a044     03 00 00 FF 
1a048     F0 12 06 F6 | 	mov	arg01, ##1776
1a04c     18 20 62 FD | 	getqx	local02
1a050     F2 20 62 FC | 	wrlong	local02, objptr
1a054     34 E4 85 F1 | 	sub	objptr, #52
1a058     02 20 66 F0 | 	shl	local02, #2
1a05c     10 1F 82 F1 | 	sub	local01, local02
1a060     F2 1E 62 FC | 	wrlong	local01, objptr
1a064     14 E4 05 F1 | 	add	objptr, #20
1a068     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1a06c     79 E4 05 F1 | 	add	objptr, #121
1a070     03 00 80 FF 
1a074     F2 E0 69 FC | 	wrlong	##1776, objptr
1a078     8D E4 85 F1 | 	sub	objptr, #141
1a07c     10 00 00 FF 
1a080     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1a084     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
1a088                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1a088     F2 1E 02 FB | 	rdlong	local01, objptr
1a08c     D9 E4 05 F1 | 	add	objptr, #217
1a090     F2 1E 62 FC | 	wrlong	local01, objptr
1a094                 | ' s_font_ptr:=font_ptr
1a094     D5 E4 85 F1 | 	sub	objptr, #213
1a098     F2 1E 02 FB | 	rdlong	local01, objptr
1a09c     D9 E4 05 F1 | 	add	objptr, #217
1a0a0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0a4                 | ' s_lines:=lines
1a0a4     80 E4 85 F1 | 	sub	objptr, #128
1a0a8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0ac     84 E4 05 F1 | 	add	objptr, #132
1a0b0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0b4                 | ' s_buflen:=buflen
1a0b4     AD E4 85 F1 | 	sub	objptr, #173
1a0b8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0bc     B5 E4 05 F1 | 	add	objptr, #181
1a0c0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0c4                 | ' s_cpl:=cpl
1a0c4     94 E4 85 F1 | 	sub	objptr, #148
1a0c8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0cc     90 E4 05 F1 | 	add	objptr, #144
1a0d0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0d4                 | ' s_cpl1:=cpl
1a0d4     90 E4 85 F1 | 	sub	objptr, #144
1a0d8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0dc     98 E4 05 F1 | 	add	objptr, #152
1a0e0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0e4                 | ' st_lines:=t_lines
1a0e4     0C E4 05 F1 | 	add	objptr, #12
1a0e8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0ec     04 E4 05 F1 | 	add	objptr, #4
1a0f0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0f4                 | ' ppl:=ppl/xzoom  
1a0f4     28 E4 85 F1 | 	sub	objptr, #40
1a0f8     F2 64 02 FB | 	rdlong	muldiva_, objptr
1a0fc     2C E4 05 F1 | 	add	objptr, #44
1a100     F2 66 02 FB | 	rdlong	muldivb_, objptr
1a104     01 E5 85 F1 | 	sub	objptr, #257
1a108     BA 00 A0 FD | 	call	#divide_
1a10c     D5 E4 05 F1 | 	add	objptr, #213
1a110     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a114                 | ' s_ppl:=ppl
1a114     1C E4 05 F1 | 	add	objptr, #28
1a118     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a11c     F1 E4 85 F1 | 	sub	objptr, #241
1a120                 | ' waitms(20)							' wait 
1a120     14 12 06 F6 | 	mov	arg01, #20
1a124     C4 24 B0 FD | 	call	#__system___waitms
1a128     A7 F0 03 F6 | 	mov	ptra, fp
1a12c     B2 00 A0 FD | 	call	#popregs_
1a130                 | _hg010b_spin2_setmode_ret
1a130     2D 00 64 FD | 	ret
1a134                 | 
1a134                 | ' 
1a134                 | ' 
1a134                 | ' '****************************************************************************************************************
1a134                 | ' '                                                                                                             	*
1a134                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1a134                 | ' '                                                                                                             	*
1a134                 | ' '****************************************************************************************************************
1a134                 | ' 
1a134                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1a134                 | _hg010b_spin2_makedl
1a134                 | ' 
1a134                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1a134                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1a134                 | ' repeat i from 0 to 11                                                           ' clear DL
1a134     00 00 06 F6 | 	mov	_var01, #0
1a138     E9 E5 05 F1 | 	add	objptr, #489
1a13c     97 0E 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
1a140                 | LR__2020
1a140                 | '   displaylist[i]:=0 
1a140     00 03 02 F6 | 	mov	_var02, _var01
1a144     02 02 66 F0 | 	shl	_var02, #2
1a148     F2 02 02 F1 | 	add	_var02, objptr
1a14c     01 01 68 FC | 	wrlong	#0, _var02
1a150     01 00 06 F1 | 	add	_var01, #1
1a154     0C 00 56 F2 | 	cmps	_var01, #12 wc
1a158     E4 FF 9F CD |  if_b	jmp	#LR__2020
1a15c                 | LR__2021
1a15c                 | '                         ' 
1a15c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1a15c     8C E5 85 F1 | 	sub	objptr, #396
1a160     F2 02 02 FB | 	rdlong	_var02, objptr
1a164     14 02 66 F0 | 	shl	_var02, #20
1a168     01 02 06 F1 | 	add	_var02, #1
1a16c     04 E4 85 F1 | 	sub	objptr, #4
1a170     F2 00 02 FB | 	rdlong	_var01, objptr
1a174     02 00 66 F0 | 	shl	_var01, #2
1a178     04 00 66 F0 | 	shl	_var01, #4
1a17c     00 03 02 F1 | 	add	_var02, _var01
1a180     90 E5 05 F1 | 	add	objptr, #400
1a184     F2 02 62 FC | 	wrlong	_var02, objptr
1a188     E9 E5 85 F1 | 	sub	objptr, #489
1a18c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1a18c     F2 02 02 FB | 	rdlong	_var02, objptr
1a190     04 02 66 F0 | 	shl	_var02, #4
1a194     02 02 06 F1 | 	add	_var02, #2
1a198     ED E5 05 F1 | 	add	objptr, #493
1a19c     F2 02 62 FC | 	wrlong	_var02, objptr
1a1a0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1a1a0     04 E4 85 F1 | 	sub	objptr, #4
1a1a4     F2 02 02 F6 | 	mov	_var02, objptr
1a1a8     CD E5 85 F1 | 	sub	objptr, #461
1a1ac     F2 02 62 FC | 	wrlong	_var02, objptr
1a1b0     1C E4 85 F1 | 	sub	objptr, #28
1a1b4                 | _hg010b_spin2_makedl_ret
1a1b4     2D 00 64 FD | 	ret
1a1b8                 | 
1a1b8                 | ' 
1a1b8                 | ' 
1a1b8                 | ' '****************************************************************************************************************
1a1b8                 | ' '                                                                        					*
1a1b8                 | ' '  Graphic primitives                                                    					*
1a1b8                 | ' '                                                                        					*
1a1b8                 | ' '****************************************************************************************************************
1a1b8                 | ' 
1a1b8                 | ' pub setspriteptr(num,ptr)
1a1b8                 | _hg010b_spin2_setspriteptr
1a1b8                 | ' long[@spr1ptr+12*num]:=ptr
1a1b8     0D E5 05 F1 | 	add	objptr, #269
1a1bc     F2 00 02 F6 | 	mov	_var01, objptr
1a1c0     09 03 02 F6 | 	mov	_var02, arg01
1a1c4     01 02 66 F0 | 	shl	_var02, #1
1a1c8     09 03 02 F1 | 	add	_var02, arg01
1a1cc     02 02 66 F0 | 	shl	_var02, #2
1a1d0     01 01 02 F1 | 	add	_var01, _var02
1a1d4     00 15 62 FC | 	wrlong	arg02, _var01
1a1d8     0D E5 85 F1 | 	sub	objptr, #269
1a1dc                 | _hg010b_spin2_setspriteptr_ret
1a1dc     2D 00 64 FD | 	ret
1a1e0                 | 
1a1e0                 | ' 
1a1e0                 | ' pub setspritepos(num,x,y)
1a1e0                 | _hg010b_spin2_setspritepos
1a1e0                 | ' if y>601
1a1e0     01 00 00 FF 
1a1e4     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1a1e8                 | '   y:=601
1a1e8     01 00 00 3F 
1a1ec     59 16 06 36 |  if_ae	mov	arg03, ##601
1a1f0                 | ' if x>1024
1a1f0     02 00 00 FF 
1a1f4     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1a1f8                 | '   x:=1024
1a1f8     0A 14 C6 39 |  if_ae	decod	arg02, #10
1a1fc                 | ' word[@spr1ptr+12*num+4]:=x
1a1fc     0D E5 05 F1 | 	add	objptr, #269
1a200     F2 00 02 F6 | 	mov	_var01, objptr
1a204     09 03 02 F6 | 	mov	_var02, arg01
1a208     01 02 66 F0 | 	shl	_var02, #1
1a20c     09 03 02 F1 | 	add	_var02, arg01
1a210     02 02 66 F0 | 	shl	_var02, #2
1a214     01 01 02 F1 | 	add	_var01, _var02
1a218     04 00 06 F1 | 	add	_var01, #4
1a21c     00 15 52 FC | 	wrword	arg02, _var01
1a220                 | ' word[@spr1ptr+12*num+6]:=y
1a220     F2 00 02 F6 | 	mov	_var01, objptr
1a224     09 03 02 F6 | 	mov	_var02, arg01
1a228     01 02 66 F0 | 	shl	_var02, #1
1a22c     09 03 02 F1 | 	add	_var02, arg01
1a230     02 02 66 F0 | 	shl	_var02, #2
1a234     01 01 02 F1 | 	add	_var01, _var02
1a238     06 00 06 F1 | 	add	_var01, #6
1a23c     00 17 52 FC | 	wrword	arg03, _var01
1a240     0D E5 85 F1 | 	sub	objptr, #269
1a244                 | _hg010b_spin2_setspritepos_ret
1a244     2D 00 64 FD | 	ret
1a248                 | 
1a248                 | ' 
1a248                 | ' pub setspritesize(num,w,h)
1a248                 | _hg010b_spin2_setspritesize
1a248                 | ' word[@spr1ptr+12*num+8]:=w
1a248     0D E5 05 F1 | 	add	objptr, #269
1a24c     F2 00 02 F6 | 	mov	_var01, objptr
1a250     09 03 02 F6 | 	mov	_var02, arg01
1a254     01 02 66 F0 | 	shl	_var02, #1
1a258     09 03 02 F1 | 	add	_var02, arg01
1a25c     02 02 66 F0 | 	shl	_var02, #2
1a260     01 01 02 F1 | 	add	_var01, _var02
1a264     08 00 06 F1 | 	add	_var01, #8
1a268     00 15 52 FC | 	wrword	arg02, _var01
1a26c                 | ' word[@spr1ptr+12*num+10]:=h
1a26c     F2 00 02 F6 | 	mov	_var01, objptr
1a270     09 03 02 F6 | 	mov	_var02, arg01
1a274     01 02 66 F0 | 	shl	_var02, #1
1a278     09 03 02 F1 | 	add	_var02, arg01
1a27c     02 02 66 F0 | 	shl	_var02, #2
1a280     01 01 02 F1 | 	add	_var01, _var02
1a284     0A 00 06 F1 | 	add	_var01, #10
1a288     00 17 52 FC | 	wrword	arg03, _var01
1a28c     0D E5 85 F1 | 	sub	objptr, #269
1a290                 | _hg010b_spin2_setspritesize_ret
1a290     2D 00 64 FD | 	ret
1a294                 | 
1a294                 | ' 
1a294                 | ' 
1a294                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1a294                 | ' 
1a294                 | ' 
1a294                 | ' pub putpixel(x,y,c)
1a294                 | _hg010b_spin2_putpixel
1a294     04 4A 05 F6 | 	mov	COUNT_, #4
1a298     A8 00 A0 FD | 	call	#pushregs_
1a29c     09 1F 02 F6 | 	mov	local01, arg01
1a2a0                 | ' 
1a2a0                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1a2a0     00 20 06 F6 | 	mov	local02, #0
1a2a4     00 1E 56 F2 | 	cmps	local01, #0 wc
1a2a8     01 20 66 36 |  if_ae	neg	local02, #1
1a2ac     E5 E4 05 F1 | 	add	objptr, #229
1a2b0     F2 1A 02 FB | 	rdlong	arg05, objptr
1a2b4     02 1A 66 F0 | 	shl	arg05, #2
1a2b8     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1a2bc     11 23 A2 F1 | 	subx	local03, local03
1a2c0     11 21 02 F5 | 	and	local02, local03
1a2c4     00 22 06 F6 | 	mov	local03, #0
1a2c8     00 14 56 F2 | 	cmps	arg02, #0 wc
1a2cc     01 22 66 36 |  if_ae	neg	local03, #1
1a2d0     11 21 02 F5 | 	and	local02, local03
1a2d4     04 E4 85 F1 | 	sub	objptr, #4
1a2d8     F2 22 02 FB | 	rdlong	local03, objptr
1a2dc     E1 E4 85 F1 | 	sub	objptr, #225
1a2e0     11 15 52 F2 | 	cmps	arg02, local03 wc
1a2e4     12 25 A2 F1 | 	subx	local04, local04
1a2e8     12 21 CA F7 | 	test	local02, local04 wz
1a2ec     48 00 90 AD |  if_e	jmp	#LR__2030
1a2f0     D9 E4 05 F1 | 	add	objptr, #217
1a2f4     F2 12 02 FB | 	rdlong	arg01, objptr
1a2f8     14 E4 05 F1 | 	add	objptr, #20
1a2fc     F2 24 02 FB | 	rdlong	local04, objptr
1a300     02 24 66 F0 | 	shl	local04, #2
1a304     0A 25 02 FD | 	qmul	local04, arg02
1a308                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1a308     0B 15 02 F6 | 	mov	arg02, arg03
1a30c     01 16 06 F6 | 	mov	arg03, #1
1a310     00 18 06 F6 | 	mov	arg04, #0
1a314     01 1A 06 F6 | 	mov	arg05, #1
1a318     0A 00 00 FF 
1a31c     D3 E5 05 F1 | 	add	objptr, ##5587
1a320     18 24 62 FD | 	getqx	local04
1a324     0F 25 02 F1 | 	add	local04, local01
1a328     12 13 02 F1 | 	add	arg01, local04
1a32c     FC 14 B0 FD | 	call	#_psram_spin2_fill
1a330     0B 00 00 FF 
1a334     C0 E4 85 F1 | 	sub	objptr, ##5824
1a338                 | LR__2030
1a338     A7 F0 03 F6 | 	mov	ptra, fp
1a33c     B2 00 A0 FD | 	call	#popregs_
1a340                 | _hg010b_spin2_putpixel_ret
1a340     2D 00 64 FD | 	ret
1a344                 | 
1a344                 | ' 
1a344                 | ' pub putpixel2(x,y,c)
1a344                 | _hg010b_spin2_putpixel2
1a344     02 4A 05 F6 | 	mov	COUNT_, #2
1a348     A8 00 A0 FD | 	call	#pushregs_
1a34c     D9 E4 05 F1 | 	add	objptr, #217
1a350     F2 1E 02 FB | 	rdlong	local01, objptr
1a354     14 E4 05 F1 | 	add	objptr, #20
1a358     F2 1A 02 FB | 	rdlong	arg05, objptr
1a35c     02 1A 66 F0 | 	shl	arg05, #2
1a360     0A 1B 02 FD | 	qmul	arg05, arg02
1a364                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1a364     0B 15 02 F6 | 	mov	arg02, arg03
1a368     01 16 06 F6 | 	mov	arg03, #1
1a36c     00 18 06 F6 | 	mov	arg04, #0
1a370     01 1A 06 F6 | 	mov	arg05, #1
1a374     0A 00 00 FF 
1a378     D3 E5 05 F1 | 	add	objptr, ##5587
1a37c     18 20 62 FD | 	getqx	local02
1a380     09 21 02 F1 | 	add	local02, arg01
1a384     10 1F 02 F1 | 	add	local01, local02
1a388     0F 13 02 F6 | 	mov	arg01, local01
1a38c     9C 14 B0 FD | 	call	#_psram_spin2_fill
1a390     0B 00 00 FF 
1a394     C0 E4 85 F1 | 	sub	objptr, ##5824
1a398     A7 F0 03 F6 | 	mov	ptra, fp
1a39c     B2 00 A0 FD | 	call	#popregs_
1a3a0                 | _hg010b_spin2_putpixel2_ret
1a3a0     2D 00 64 FD | 	ret
1a3a4                 | 
1a3a4                 | ' 
1a3a4                 | ' pub getpixel2(x,y): c 
1a3a4                 | _hg010b_spin2_getpixel2
1a3a4     02 4A 05 F6 | 	mov	COUNT_, #2
1a3a8     A8 00 A0 FD | 	call	#pushregs_
1a3ac     0C F0 07 F1 | 	add	ptra, #12
1a3b0     04 4E 05 F1 | 	add	fp, #4
1a3b4     A7 12 62 FC | 	wrlong	arg01, fp
1a3b8     04 4E 05 F1 | 	add	fp, #4
1a3bc     A7 14 62 FC | 	wrlong	arg02, fp
1a3c0     08 4E 85 F1 | 	sub	fp, #8
1a3c4     A7 00 68 FC | 	wrlong	#0, fp
1a3c8     A7 12 02 F6 | 	mov	arg01, fp
1a3cc     D9 E4 05 F1 | 	add	objptr, #217
1a3d0     F2 14 02 FB | 	rdlong	arg02, objptr
1a3d4     14 E4 05 F1 | 	add	objptr, #20
1a3d8     F2 16 02 FB | 	rdlong	arg03, objptr
1a3dc     02 16 66 F0 | 	shl	arg03, #2
1a3e0     08 4E 05 F1 | 	add	fp, #8
1a3e4     A7 FA 01 FB | 	rdlong	result1, fp
1a3e8     FD 16 02 FD | 	qmul	arg03, result1
1a3ec                 | ' 
1a3ec                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1a3ec     04 4E 85 F1 | 	sub	fp, #4
1a3f0     A7 1E 02 FB | 	rdlong	local01, fp
1a3f4     04 4E 85 F1 | 	sub	fp, #4
1a3f8     01 16 06 F6 | 	mov	arg03, #1
1a3fc     0A 00 00 FF 
1a400     D3 E5 05 F1 | 	add	objptr, ##5587
1a404     18 20 62 FD | 	getqx	local02
1a408     0F 21 02 F1 | 	add	local02, local01
1a40c     10 15 02 F1 | 	add	arg02, local02
1a410     E0 12 B0 FD | 	call	#_psram_spin2_read1
1a414     0B 00 00 FF 
1a418     C0 E4 85 F1 | 	sub	objptr, ##5824
1a41c                 | ' return c
1a41c     A7 FA 01 FB | 	rdlong	result1, fp
1a420     A7 F0 03 F6 | 	mov	ptra, fp
1a424     B2 00 A0 FD | 	call	#popregs_
1a428                 | _hg010b_spin2_getpixel2_ret
1a428     2D 00 64 FD | 	ret
1a42c                 | 
1a42c                 | '   
1a42c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1a42c                 | ' 
1a42c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1a42c                 | _hg010b_spin2_fastline
1a42c     02 4A 05 F6 | 	mov	COUNT_, #2
1a430     A8 00 A0 FD | 	call	#pushregs_
1a434     09 1F 02 F6 | 	mov	local01, arg01
1a438     0A 21 02 F6 | 	mov	local02, arg02
1a43c                 | ' 
1a43c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1a43c     00 16 56 F2 | 	cmps	arg03, #0 wc
1a440     F4 00 90 CD |  if_b	jmp	#LR__2040
1a444     01 00 00 FF 
1a448     26 E4 05 F1 | 	add	objptr, ##550
1a44c     F2 1A 02 FB | 	rdlong	arg05, objptr
1a450     01 00 00 FF 
1a454     26 E4 85 F1 | 	sub	objptr, ##550
1a458     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1a45c     D8 00 90 3D |  if_ae	jmp	#LR__2040
1a460     00 1E 56 F2 | 	cmps	local01, #0 wc
1a464     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1a468     CC 00 90 CD |  if_b	jmp	#LR__2040
1a46c     01 00 00 FF 
1a470     22 E4 05 F1 | 	add	objptr, ##546
1a474     F2 1A 02 FB | 	rdlong	arg05, objptr
1a478     01 00 00 FF 
1a47c     22 E4 85 F1 | 	sub	objptr, ##546
1a480     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1a484     01 00 00 1F 
1a488     22 E4 05 11 |  if_a	add	objptr, ##546
1a48c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1a490     01 00 00 1F 
1a494     22 E4 85 11 |  if_a	sub	objptr, ##546
1a498     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1a49c                 | '   return
1a49c     98 00 90 1D |  if_a	jmp	#LR__2040
1a4a0     10 1F 5A F2 | 	cmps	local01, local02 wcz
1a4a4     0F 1B 02 16 |  if_a	mov	arg05, local01
1a4a8     10 1F 02 16 |  if_a	mov	local01, local02
1a4ac     0D 21 02 16 |  if_a	mov	local02, arg05
1a4b0     00 1E 56 F2 | 	cmps	local01, #0 wc
1a4b4     00 1E 06 C6 |  if_b	mov	local01, #0
1a4b8     01 00 00 FF 
1a4bc     22 E4 05 F1 | 	add	objptr, ##546
1a4c0     F2 1A 02 FB | 	rdlong	arg05, objptr
1a4c4     01 00 00 FF 
1a4c8     22 E4 85 F1 | 	sub	objptr, ##546
1a4cc     0D 21 52 F2 | 	cmps	local02, arg05 wc
1a4d0     01 00 00 3F 
1a4d4     22 E4 05 31 |  if_ae	add	objptr, ##546
1a4d8     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1a4dc     01 00 00 3F 
1a4e0     22 E4 85 31 |  if_ae	sub	objptr, ##546
1a4e4     D9 E4 05 F1 | 	add	objptr, #217
1a4e8     F2 12 02 FB | 	rdlong	arg01, objptr
1a4ec     14 E4 05 F1 | 	add	objptr, #20
1a4f0     F2 1A 02 FB | 	rdlong	arg05, objptr
1a4f4     02 1A 66 F0 | 	shl	arg05, #2
1a4f8     0B 1B 02 FD | 	qmul	arg05, arg03
1a4fc                 | ' if x1>x2
1a4fc                 | '   x1,x2:=x2,x1
1a4fc                 | ' if x1<0 
1a4fc                 | '   x1:=0
1a4fc                 | ' if x2>=xres
1a4fc                 | '   x2:=xres-1  
1a4fc     01 20 86 31 |  if_ae	sub	local02, #1
1a500                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1a500     01 16 06 F6 | 	mov	arg03, #1
1a504     10 17 02 F1 | 	add	arg03, local02
1a508     0F 17 82 F1 | 	sub	arg03, local01
1a50c     0C 15 02 F6 | 	mov	arg02, arg04
1a510     00 18 06 F6 | 	mov	arg04, #0
1a514     01 1A 06 F6 | 	mov	arg05, #1
1a518     0A 00 00 FF 
1a51c     D3 E5 05 F1 | 	add	objptr, ##5587
1a520     18 20 62 FD | 	getqx	local02
1a524     0F 21 02 F1 | 	add	local02, local01
1a528     10 13 02 F1 | 	add	arg01, local02
1a52c     FC 12 B0 FD | 	call	#_psram_spin2_fill
1a530     0B 00 00 FF 
1a534     C0 E4 85 F1 | 	sub	objptr, ##5824
1a538                 | LR__2040
1a538     A7 F0 03 F6 | 	mov	ptra, fp
1a53c     B2 00 A0 FD | 	call	#popregs_
1a540                 | _hg010b_spin2_fastline_ret
1a540     2D 00 64 FD | 	ret
1a544                 | 
1a544                 | ' 
1a544                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1a544                 | _hg010b_spin2_draw
1a544     0E 4A 05 F6 | 	mov	COUNT_, #14
1a548     A8 00 A0 FD | 	call	#pushregs_
1a54c     09 1F 02 F6 | 	mov	local01, arg01
1a550     0A 21 02 F6 | 	mov	local02, arg02
1a554     0B 23 02 F6 | 	mov	local03, arg03
1a558     0C 25 02 F6 | 	mov	local04, arg04
1a55c     0D 27 02 F6 | 	mov	local05, arg05
1a560                 | ' 
1a560                 | ' if (y1==y2)
1a560     12 21 0A F2 | 	cmp	local02, local04 wz
1a564     18 00 90 5D |  if_ne	jmp	#LR__2050
1a568                 | '   fastline(x1,x2,y1,c)
1a568     0F 13 02 F6 | 	mov	arg01, local01
1a56c     11 15 02 F6 | 	mov	arg02, local03
1a570     10 17 02 F6 | 	mov	arg03, local02
1a574     13 19 02 F6 | 	mov	arg04, local05
1a578     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1a57c     F8 00 90 FD | 	jmp	#LR__2056
1a580                 | LR__2050
1a580                 | ' else  
1a580                 | '   x:=x1
1a580     0F 29 02 F6 | 	mov	local06, local01
1a584                 | '   y:=y1
1a584     10 2B 02 F6 | 	mov	local07, local02
1a588                 | ' 
1a588                 | '   if (x1<x2) 
1a588     11 1F 52 F2 | 	cmps	local01, local03 wc
1a58c                 | '     xi:=1
1a58c     01 2C 06 C6 |  if_b	mov	local08, #1
1a590                 | '     dx:=x2-x1
1a590     11 2F 02 C6 |  if_b	mov	local09, local03
1a594     0F 2F 82 C1 |  if_b	sub	local09, local01
1a598                 | '   else
1a598                 | '     xi:=-1
1a598     01 2C 66 36 |  if_ae	neg	local08, #1
1a59c                 | '     dx:=x1-x2
1a59c     11 1F 82 31 |  if_ae	sub	local01, local03
1a5a0     0F 2F 02 36 |  if_ae	mov	local09, local01
1a5a4                 | '   
1a5a4                 | '   if (y1<y2) 
1a5a4     12 21 52 F2 | 	cmps	local02, local04 wc
1a5a8                 | '     yi:=1
1a5a8     01 30 06 C6 |  if_b	mov	local10, #1
1a5ac                 | '     dy:=y2-y1
1a5ac     12 33 02 C6 |  if_b	mov	local11, local04
1a5b0     10 33 82 C1 |  if_b	sub	local11, local02
1a5b4                 | '   else
1a5b4                 | '     yi:=-1
1a5b4     01 30 66 36 |  if_ae	neg	local10, #1
1a5b8                 | '     dy:=y1-y2
1a5b8     12 21 82 31 |  if_ae	sub	local02, local04
1a5bc     10 33 02 36 |  if_ae	mov	local11, local02
1a5c0                 | ' 
1a5c0                 | '   putpixel(x,y,c)
1a5c0     13 17 02 F6 | 	mov	arg03, local05
1a5c4     14 13 02 F6 | 	mov	arg01, local06
1a5c8     15 15 02 F6 | 	mov	arg02, local07
1a5cc     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a5d0                 | ' 
1a5d0                 | '   if (dx>dy)
1a5d0     19 2F 5A F2 | 	cmps	local09, local11 wcz
1a5d4     50 00 90 ED |  if_be	jmp	#LR__2052
1a5d8                 | '     ai:=(dy-dx)*2
1a5d8     19 35 02 F6 | 	mov	local12, local11
1a5dc     17 35 82 F1 | 	sub	local12, local09
1a5e0     01 34 66 F0 | 	shl	local12, #1
1a5e4                 | '     bi:=dy*2
1a5e4     01 32 66 F0 | 	shl	local11, #1
1a5e8     19 37 02 F6 | 	mov	local13, local11
1a5ec                 | '     d:= bi-dx
1a5ec     1B 39 02 F6 | 	mov	local14, local13
1a5f0     17 39 82 F1 | 	sub	local14, local09
1a5f4                 | '     repeat while (x<>x2) 
1a5f4                 | LR__2051
1a5f4     11 29 0A F2 | 	cmp	local06, local03 wz
1a5f8     7C 00 90 AD |  if_e	jmp	#LR__2055
1a5fc                 | '       if (d>=0) 
1a5fc     00 38 56 F2 | 	cmps	local14, #0 wc
1a600                 | '         x+=xi
1a600     16 29 02 31 |  if_ae	add	local06, local08
1a604                 | '         y+=yi
1a604     18 2B 02 31 |  if_ae	add	local07, local10
1a608                 | '         d+=ai
1a608     1A 39 02 31 |  if_ae	add	local14, local12
1a60c                 | '       else
1a60c                 | '         d+=bi
1a60c     1B 39 02 C1 |  if_b	add	local14, local13
1a610                 | '         x+=xi
1a610     16 29 02 C1 |  if_b	add	local06, local08
1a614                 | '       putpixel(x,y,c)
1a614     14 13 02 F6 | 	mov	arg01, local06
1a618     15 15 02 F6 | 	mov	arg02, local07
1a61c     13 17 02 F6 | 	mov	arg03, local05
1a620     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a624     CC FF 9F FD | 	jmp	#LR__2051
1a628                 | LR__2052
1a628                 | '   else
1a628                 | '     ai:=(dx-dy)*2
1a628     17 35 02 F6 | 	mov	local12, local09
1a62c     19 35 82 F1 | 	sub	local12, local11
1a630     01 34 66 F0 | 	shl	local12, #1
1a634                 | '     bi:=dx*2
1a634     01 2E 66 F0 | 	shl	local09, #1
1a638     17 37 02 F6 | 	mov	local13, local09
1a63c                 | '     d:=bi-dy
1a63c     1B 39 02 F6 | 	mov	local14, local13
1a640     19 39 82 F1 | 	sub	local14, local11
1a644                 | '     repeat while (y<>y2)
1a644                 | LR__2053
1a644     12 2B 0A F2 | 	cmp	local07, local04 wz
1a648     2C 00 90 AD |  if_e	jmp	#LR__2054
1a64c                 | '       if (d>=0)
1a64c     00 38 56 F2 | 	cmps	local14, #0 wc
1a650                 | '         x+=xi
1a650     16 29 02 31 |  if_ae	add	local06, local08
1a654                 | '         y+=yi
1a654     18 2B 02 31 |  if_ae	add	local07, local10
1a658                 | '         d+=ai
1a658     1A 39 02 31 |  if_ae	add	local14, local12
1a65c                 | '       else
1a65c                 | '         d+=bi
1a65c     1B 39 02 C1 |  if_b	add	local14, local13
1a660                 | '         y+=yi
1a660     18 2B 02 C1 |  if_b	add	local07, local10
1a664                 | '       putpixel(x, y,c)
1a664     14 13 02 F6 | 	mov	arg01, local06
1a668     15 15 02 F6 | 	mov	arg02, local07
1a66c     13 17 02 F6 | 	mov	arg03, local05
1a670     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a674     CC FF 9F FD | 	jmp	#LR__2053
1a678                 | LR__2054
1a678                 | LR__2055
1a678                 | LR__2056
1a678     A7 F0 03 F6 | 	mov	ptra, fp
1a67c     B2 00 A0 FD | 	call	#popregs_
1a680                 | _hg010b_spin2_draw_ret
1a680     2D 00 64 FD | 	ret
1a684                 | 
1a684                 | '  
1a684                 | ' pub fillpush(val) 
1a684                 | _hg010b_spin2_fillpush
1a684                 | ' fillstack[fillptr]:=val
1a684     0B 00 00 FF 
1a688     B6 E4 05 F1 | 	add	objptr, ##5814
1a68c     F2 00 02 FB | 	rdlong	_var01, objptr
1a690     02 00 66 F0 | 	shl	_var01, #2
1a694     0A 00 00 FF 
1a698     00 E4 85 F1 | 	sub	objptr, ##5120
1a69c     F2 00 02 F1 | 	add	_var01, objptr
1a6a0     00 13 62 FC | 	wrlong	arg01, _var01
1a6a4                 | ' fillptr+=1   
1a6a4     0A 00 00 FF 
1a6a8     00 E4 05 F1 | 	add	objptr, ##5120
1a6ac     F2 00 02 FB | 	rdlong	_var01, objptr
1a6b0     01 00 06 F1 | 	add	_var01, #1
1a6b4     F2 00 62 FC | 	wrlong	_var01, objptr
1a6b8     0B 00 00 FF 
1a6bc     B6 E4 85 F1 | 	sub	objptr, ##5814
1a6c0                 | _hg010b_spin2_fillpush_ret
1a6c0     2D 00 64 FD | 	ret
1a6c4                 | 
1a6c4                 | ' 
1a6c4                 | '     
1a6c4                 | ' pub fillpop() : val
1a6c4                 | _hg010b_spin2_fillpop
1a6c4                 | ' 
1a6c4                 | ' fillptr-=1
1a6c4     0B 00 00 FF 
1a6c8     B6 E4 05 F1 | 	add	objptr, ##5814
1a6cc     F2 FA 01 FB | 	rdlong	result1, objptr
1a6d0     01 FA 85 F1 | 	sub	result1, #1
1a6d4     F2 FA 61 FC | 	wrlong	result1, objptr
1a6d8                 | ' if fillptr<0
1a6d8     0B 00 00 FF 
1a6dc     B6 E4 85 F1 | 	sub	objptr, ##5814
1a6e0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a6e4                 | '   fillptr:=0
1a6e4     0B 00 00 CF 
1a6e8     B6 E4 05 C1 |  if_b	add	objptr, ##5814
1a6ec     F2 00 68 CC |  if_b	wrlong	#0, objptr
1a6f0     0B 00 00 CF 
1a6f4     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
1a6f8                 | '   val:=-12345
1a6f8     E7 FF 7F CF 
1a6fc     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1a700     28 00 90 CD |  if_b	jmp	#LR__2060
1a704                 | ' else 
1a704                 | '   val:=fillstack[fillptr]
1a704     0B 00 00 FF 
1a708     B6 E4 05 F1 | 	add	objptr, ##5814
1a70c     F2 00 02 FB | 	rdlong	_var01, objptr
1a710     02 00 66 F0 | 	shl	_var01, #2
1a714     0A 00 00 FF 
1a718     00 E4 85 F1 | 	sub	objptr, ##5120
1a71c     F2 00 02 F1 | 	add	_var01, objptr
1a720     00 01 02 FB | 	rdlong	_var01, _var01
1a724     01 00 00 FF 
1a728     B6 E4 85 F1 | 	sub	objptr, ##694
1a72c                 | LR__2060
1a72c                 | ' return val
1a72c     00 FB 01 F6 | 	mov	result1, _var01
1a730                 | _hg010b_spin2_fillpop_ret
1a730     2D 00 64 FD | 	ret
1a734                 | 
1a734                 | ' 
1a734                 | '       
1a734                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1a734                 | _hg010b_spin2_fill
1a734     0B 4A 05 F6 | 	mov	COUNT_, #11
1a738     A8 00 A0 FD | 	call	#pushregs_
1a73c                 | ' 
1a73c                 | ' newcolor:=newcolor & 255
1a73c     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1a740                 | ' oldcolor:=oldcolor & 255
1a740     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1a744                 | ' 
1a744                 | ' if (oldcolor == newcolor) 
1a744     0F 21 0A F2 | 	cmp	local02, local01 wz
1a748                 | '   return
1a748     70 02 90 AD |  if_e	jmp	#LR__2079
1a74c                 | ' 
1a74c                 | ' fillptr:=0
1a74c     0B 00 00 FF 
1a750     B6 E4 05 F1 | 	add	objptr, ##5814
1a754     F2 00 68 FC | 	wrlong	#0, objptr
1a758                 | ' fillmax:=0
1a758     04 E4 05 F1 | 	add	objptr, #4
1a75c     F2 00 68 FC | 	wrlong	#0, objptr
1a760     0B 00 00 FF 
1a764     BA E4 85 F1 | 	sub	objptr, ##5818
1a768                 | ' fillpush(x)
1a768     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1a76c                 | ' fillpush(y)
1a76c     0A 13 02 F6 | 	mov	arg01, arg02
1a770     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1a774                 | ' y:=fillpop()
1a774     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1a778     FD 22 02 F6 | 	mov	local03, result1
1a77c                 | ' x:=fillpop()
1a77c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1a780     FD 24 02 F6 | 	mov	local04, result1
1a784                 | ' 'pinhigh(38)
1a784                 | ' repeat while (x>-1)       
1a784                 | LR__2070
1a784     00 24 56 F2 | 	cmps	local04, #0 wc
1a788     30 02 90 CD |  if_b	jmp	#LR__2078
1a78c                 | '  ' pintoggle(39)
1a78c                 | '   x1 := x
1a78c     12 27 02 F6 | 	mov	local05, local04
1a790                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1a790                 | LR__2071
1a790     00 28 06 F6 | 	mov	local06, #0
1a794     00 2A 06 F6 | 	mov	local07, #0
1a798     00 26 56 F2 | 	cmps	local05, #0 wc
1a79c     01 2A 66 36 |  if_ae	neg	local07, #1
1a7a0     00 2A 0E F2 | 	cmp	local07, #0 wz
1a7a4     00 28 26 56 |  if_ne	not	local06, #0
1a7a8     00 2C 06 F6 | 	mov	local08, #0
1a7ac     00 2E 06 F6 | 	mov	local09, #0
1a7b0     11 15 02 F6 | 	mov	arg02, local03
1a7b4     13 13 02 F6 | 	mov	arg01, local05
1a7b8     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a7bc     10 FB 09 F2 | 	cmp	result1, local02 wz
1a7c0     00 2E 26 A6 |  if_e	not	local09, #0
1a7c4     00 2E 0E F2 | 	cmp	local09, #0 wz
1a7c8     00 2C 26 56 |  if_ne	not	local08, #0
1a7cc     16 29 CA F7 | 	test	local06, local08 wz
1a7d0                 | '     x1--
1a7d0     01 26 86 51 |  if_ne	sub	local05, #1
1a7d4     B8 FF 9F 5D |  if_ne	jmp	#LR__2071
1a7d8                 | '   x1++
1a7d8     01 26 06 F1 | 	add	local05, #1
1a7dc                 | '   spanabove := 0
1a7dc     00 30 06 F6 | 	mov	local10, #0
1a7e0                 | '   spanbelow := 0
1a7e0     00 32 06 F6 | 	mov	local11, #0
1a7e4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1a7e4                 | LR__2072
1a7e4     00 28 06 F6 | 	mov	local06, #0
1a7e8     02 00 00 FF 
1a7ec     00 26 56 F2 | 	cmps	local05, ##1024 wc
1a7f0     00 28 26 C6 |  if_b	not	local06, #0
1a7f4     00 2C 06 F6 | 	mov	local08, #0
1a7f8     00 2E 06 F6 | 	mov	local09, #0
1a7fc     11 15 02 F6 | 	mov	arg02, local03
1a800     13 13 02 F6 | 	mov	arg01, local05
1a804     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a808     10 FB 09 F2 | 	cmp	result1, local02 wz
1a80c     00 2E 26 A6 |  if_e	not	local09, #0
1a810     00 2E 0E F2 | 	cmp	local09, #0 wz
1a814     00 2C 26 56 |  if_ne	not	local08, #0
1a818     16 29 CA F7 | 	test	local06, local08 wz
1a81c     88 01 90 AD |  if_e	jmp	#LR__2077
1a820                 | '     putpixel2 (x1,y, newcolor & 255)
1a820     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1a824     13 13 02 F6 | 	mov	arg01, local05
1a828     11 15 02 F6 | 	mov	arg02, local03
1a82c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1a830                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1a830     00 28 06 F6 | 	mov	local06, #0
1a834     00 2A 06 F6 | 	mov	local07, #0
1a838     00 30 0E F2 | 	cmp	local10, #0 wz
1a83c     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1a840     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1a844     00 2A 0E F2 | 	cmp	local07, #0 wz
1a848     00 28 26 56 |  if_ne	not	local06, #0
1a84c     00 2C 06 F6 | 	mov	local08, #0
1a850     00 2E 06 F6 | 	mov	local09, #0
1a854     11 15 02 F6 | 	mov	arg02, local03
1a858     01 14 86 F1 | 	sub	arg02, #1
1a85c     13 13 02 F6 | 	mov	arg01, local05
1a860     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a864     10 FB 09 F2 | 	cmp	result1, local02 wz
1a868     00 2E 26 A6 |  if_e	not	local09, #0
1a86c     00 2E 0E F2 | 	cmp	local09, #0 wz
1a870     00 2C 26 56 |  if_ne	not	local08, #0
1a874     16 29 CA F7 | 	test	local06, local08 wz
1a878     1C 00 90 AD |  if_e	jmp	#LR__2073
1a87c                 | '       fillpush(x1)
1a87c     13 13 02 F6 | 	mov	arg01, local05
1a880     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1a884                 | '       fillpush(y-1)
1a884     11 13 02 F6 | 	mov	arg01, local03
1a888     01 12 86 F1 | 	sub	arg01, #1
1a88c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1a890                 | '       spanabove := 1 
1a890     01 30 06 F6 | 	mov	local10, #1
1a894     4C 00 90 FD | 	jmp	#LR__2074
1a898                 | LR__2073
1a898                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1a898     00 28 06 F6 | 	mov	local06, #0
1a89c     00 2A 06 F6 | 	mov	local07, #0
1a8a0     00 30 0E F2 | 	cmp	local10, #0 wz
1a8a4     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1a8a8     01 2A 66 16 |  if_a	neg	local07, #1
1a8ac     00 2A 0E F2 | 	cmp	local07, #0 wz
1a8b0     00 28 26 56 |  if_ne	not	local06, #0
1a8b4     00 2C 06 F6 | 	mov	local08, #0
1a8b8     00 2E 06 F6 | 	mov	local09, #0
1a8bc     11 15 02 F6 | 	mov	arg02, local03
1a8c0     01 14 86 F1 | 	sub	arg02, #1
1a8c4     13 13 02 F6 | 	mov	arg01, local05
1a8c8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a8cc     10 FB 09 F2 | 	cmp	result1, local02 wz
1a8d0     00 2E 26 56 |  if_ne	not	local09, #0
1a8d4     00 2E 0E F2 | 	cmp	local09, #0 wz
1a8d8     00 2C 26 56 |  if_ne	not	local08, #0
1a8dc     16 29 CA F7 | 	test	local06, local08 wz
1a8e0                 | '       spanabove := 0 
1a8e0     00 30 06 56 |  if_ne	mov	local10, #0
1a8e4                 | LR__2074
1a8e4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1a8e4     00 28 06 F6 | 	mov	local06, #0
1a8e8     00 2A 06 F6 | 	mov	local07, #0
1a8ec     00 32 0E F2 | 	cmp	local11, #0 wz
1a8f0     01 00 00 AF 
1a8f4     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1a8f8     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1a8fc     00 2A 0E F2 | 	cmp	local07, #0 wz
1a900     00 28 26 56 |  if_ne	not	local06, #0
1a904     00 2C 06 F6 | 	mov	local08, #0
1a908     00 2E 06 F6 | 	mov	local09, #0
1a90c     11 15 02 F6 | 	mov	arg02, local03
1a910     01 14 06 F1 | 	add	arg02, #1
1a914     13 13 02 F6 | 	mov	arg01, local05
1a918     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a91c     10 FB 09 F2 | 	cmp	result1, local02 wz
1a920     00 2E 26 A6 |  if_e	not	local09, #0
1a924     00 2E 0E F2 | 	cmp	local09, #0 wz
1a928     00 2C 26 56 |  if_ne	not	local08, #0
1a92c     16 29 CA F7 | 	test	local06, local08 wz
1a930     1C 00 90 AD |  if_e	jmp	#LR__2075
1a934                 | '       fillpush(x1)
1a934     13 13 02 F6 | 	mov	arg01, local05
1a938     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1a93c                 | '       fillpush(y + 1)
1a93c     11 13 02 F6 | 	mov	arg01, local03
1a940     01 12 06 F1 | 	add	arg01, #1
1a944     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1a948                 | '       spanBelow := 1
1a948     01 32 06 F6 | 	mov	local11, #1
1a94c     50 00 90 FD | 	jmp	#LR__2076
1a950                 | LR__2075
1a950                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1a950     00 28 06 F6 | 	mov	local06, #0
1a954     00 2A 06 F6 | 	mov	local07, #0
1a958     00 32 0E F2 | 	cmp	local11, #0 wz
1a95c     01 00 00 5F 
1a960     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1a964     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1a968     00 2A 0E F2 | 	cmp	local07, #0 wz
1a96c     00 28 26 56 |  if_ne	not	local06, #0
1a970     00 2C 06 F6 | 	mov	local08, #0
1a974     00 2E 06 F6 | 	mov	local09, #0
1a978     11 15 02 F6 | 	mov	arg02, local03
1a97c     01 14 06 F1 | 	add	arg02, #1
1a980     13 13 02 F6 | 	mov	arg01, local05
1a984     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a988     10 FB 09 F2 | 	cmp	result1, local02 wz
1a98c     00 2E 26 56 |  if_ne	not	local09, #0
1a990     00 2E 0E F2 | 	cmp	local09, #0 wz
1a994     00 2C 26 56 |  if_ne	not	local08, #0
1a998     16 29 CA F7 | 	test	local06, local08 wz
1a99c                 | '       spanbelow := 0
1a99c     00 32 06 56 |  if_ne	mov	local11, #0
1a9a0                 | LR__2076
1a9a0                 | '     x1++
1a9a0     01 26 06 F1 | 	add	local05, #1
1a9a4     3C FE 9F FD | 	jmp	#LR__2072
1a9a8                 | LR__2077
1a9a8                 | '   y:=fillpop()
1a9a8     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1a9ac     FD 22 02 F6 | 	mov	local03, result1
1a9b0                 | '   x:=fillpop()
1a9b0     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1a9b4     FD 24 02 F6 | 	mov	local04, result1
1a9b8     C8 FD 9F FD | 	jmp	#LR__2070
1a9bc                 | LR__2078
1a9bc                 | LR__2079
1a9bc     A7 F0 03 F6 | 	mov	ptra, fp
1a9c0     B2 00 A0 FD | 	call	#popregs_
1a9c4                 | _hg010b_spin2_fill_ret
1a9c4     2D 00 64 FD | 	ret
1a9c8                 | 
1a9c8                 | ' 'pinlow(38)    
1a9c8                 | ' 
1a9c8                 | ' '-- A filled circle -----------------------------------------------------
1a9c8                 | ' 
1a9c8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1a9c8                 | _hg010b_spin2_fcircle
1a9c8     08 4A 05 F6 | 	mov	COUNT_, #8
1a9cc     A8 00 A0 FD | 	call	#pushregs_
1a9d0     0B 1F 02 F6 | 	mov	local01, arg03
1a9d4     FF FF 7F FF 
1a9d8     FE 1F 06 FD | 	qmul	local01, ##-2
1a9dc     09 21 02 F6 | 	mov	local02, arg01
1a9e0     0A 23 02 F6 | 	mov	local03, arg02
1a9e4     0C 25 02 F6 | 	mov	local04, arg04
1a9e8                 | ' 
1a9e8                 | ' d:=5-4*r
1a9e8     0F 19 02 F6 | 	mov	arg04, local01
1a9ec     02 18 66 F0 | 	shl	arg04, #2
1a9f0     05 26 06 F6 | 	mov	local05, #5
1a9f4     0C 27 82 F1 | 	sub	local05, arg04
1a9f8                 | ' x:=0
1a9f8     00 28 06 F6 | 	mov	local06, #0
1a9fc                 | ' y:=r
1a9fc                 | ' da:=(-2*r+5)*4
1a9fc                 | ' db:=3*4
1a9fc     0C 2A 06 F6 | 	mov	local07, #12
1aa00                 | ' repeat while (x<=y) 
1aa00     18 2C 62 FD | 	getqx	local08
1aa04     05 2C 06 F1 | 	add	local08, #5
1aa08     02 2C 66 F0 | 	shl	local08, #2
1aa0c                 | LR__2080
1aa0c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1aa10     B4 00 90 1D |  if_a	jmp	#LR__2082
1aa14                 | '   fastline(x0-x,x0+x,y0-y,c)
1aa14     10 13 02 F6 | 	mov	arg01, local02
1aa18     14 13 82 F1 | 	sub	arg01, local06
1aa1c     10 15 02 F6 | 	mov	arg02, local02
1aa20     14 15 02 F1 | 	add	arg02, local06
1aa24     11 17 02 F6 | 	mov	arg03, local03
1aa28     0F 17 82 F1 | 	sub	arg03, local01
1aa2c     12 19 02 F6 | 	mov	arg04, local04
1aa30     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1aa34                 | '   fastline(x0-x,x0+x,y0+y,c)
1aa34     10 13 02 F6 | 	mov	arg01, local02
1aa38     14 13 82 F1 | 	sub	arg01, local06
1aa3c     10 15 02 F6 | 	mov	arg02, local02
1aa40     14 15 02 F1 | 	add	arg02, local06
1aa44     11 17 02 F6 | 	mov	arg03, local03
1aa48     0F 17 02 F1 | 	add	arg03, local01
1aa4c     12 19 02 F6 | 	mov	arg04, local04
1aa50     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1aa54                 | '   fastline(x0-y,x0+y,y0-x,c)
1aa54     10 13 02 F6 | 	mov	arg01, local02
1aa58     0F 13 82 F1 | 	sub	arg01, local01
1aa5c     10 15 02 F6 | 	mov	arg02, local02
1aa60     0F 15 02 F1 | 	add	arg02, local01
1aa64     11 17 02 F6 | 	mov	arg03, local03
1aa68     14 17 82 F1 | 	sub	arg03, local06
1aa6c     12 19 02 F6 | 	mov	arg04, local04
1aa70     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1aa74                 | '   fastline(x0-y,x0+y,y0+x,c)
1aa74     10 13 02 F6 | 	mov	arg01, local02
1aa78     0F 13 82 F1 | 	sub	arg01, local01
1aa7c     10 15 02 F6 | 	mov	arg02, local02
1aa80     0F 15 02 F1 | 	add	arg02, local01
1aa84     11 17 02 F6 | 	mov	arg03, local03
1aa88     14 17 02 F1 | 	add	arg03, local06
1aa8c     12 19 02 F6 | 	mov	arg04, local04
1aa90     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1aa94                 | '   if d>0 
1aa94     01 26 56 F2 | 	cmps	local05, #1 wc
1aa98     18 00 90 CD |  if_b	jmp	#LR__2081
1aa9c                 | '     d+=da
1aa9c     16 27 02 F1 | 	add	local05, local08
1aaa0                 | '     y-=1
1aaa0     01 1E 86 F1 | 	sub	local01, #1
1aaa4                 | '     x+=1
1aaa4     01 28 06 F1 | 	add	local06, #1
1aaa8                 | '     da+=4*4
1aaa8     10 2C 06 F1 | 	add	local08, #16
1aaac                 | '     db+=2*4
1aaac     08 2A 06 F1 | 	add	local07, #8
1aab0     58 FF 9F FD | 	jmp	#LR__2080
1aab4                 | LR__2081
1aab4                 | '   else
1aab4                 | '     d+=db
1aab4     15 27 02 F1 | 	add	local05, local07
1aab8                 | '     x+=1
1aab8     01 28 06 F1 | 	add	local06, #1
1aabc                 | '     da+=2*4
1aabc     08 2C 06 F1 | 	add	local08, #8
1aac0                 | '     db+=2*4
1aac0     08 2A 06 F1 | 	add	local07, #8
1aac4     44 FF 9F FD | 	jmp	#LR__2080
1aac8                 | LR__2082
1aac8     A7 F0 03 F6 | 	mov	ptra, fp
1aacc     B2 00 A0 FD | 	call	#popregs_
1aad0                 | _hg010b_spin2_fcircle_ret
1aad0     2D 00 64 FD | 	ret
1aad4                 | 
1aad4                 | '  
1aad4                 | ' '-- A circle ------------------------------------------------------------ 
1aad4                 | '  
1aad4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1aad4                 | _hg010b_spin2_circle
1aad4     08 4A 05 F6 | 	mov	COUNT_, #8
1aad8     A8 00 A0 FD | 	call	#pushregs_
1aadc     0B 1F 02 F6 | 	mov	local01, arg03
1aae0     FF FF 7F FF 
1aae4     FE 1F 06 FD | 	qmul	local01, ##-2
1aae8     09 21 02 F6 | 	mov	local02, arg01
1aaec     0A 23 02 F6 | 	mov	local03, arg02
1aaf0     0C 25 02 F6 | 	mov	local04, arg04
1aaf4                 | ' 
1aaf4                 | '  
1aaf4                 | ' d:=5-4*r
1aaf4     0F 19 02 F6 | 	mov	arg04, local01
1aaf8     02 18 66 F0 | 	shl	arg04, #2
1aafc     05 26 06 F6 | 	mov	local05, #5
1ab00     0C 27 82 F1 | 	sub	local05, arg04
1ab04                 | ' x:=0
1ab04     00 28 06 F6 | 	mov	local06, #0
1ab08                 | ' y:=r
1ab08                 | ' da:=(-2*r+5)*4
1ab08                 | ' db:=3*4
1ab08     0C 2A 06 F6 | 	mov	local07, #12
1ab0c                 | ' repeat while (x<=y) 
1ab0c     18 2C 62 FD | 	getqx	local08
1ab10     05 2C 06 F1 | 	add	local08, #5
1ab14     02 2C 66 F0 | 	shl	local08, #2
1ab18                 | LR__2090
1ab18     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ab1c     F4 00 90 1D |  if_a	jmp	#LR__2092
1ab20                 | '   putpixel(x0-x,y0-y,c)
1ab20     10 13 02 F6 | 	mov	arg01, local02
1ab24     14 13 82 F1 | 	sub	arg01, local06
1ab28     11 15 02 F6 | 	mov	arg02, local03
1ab2c     0F 15 82 F1 | 	sub	arg02, local01
1ab30     12 17 02 F6 | 	mov	arg03, local04
1ab34     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ab38                 | '   putpixel(x0-x,y0+y,c)
1ab38     10 13 02 F6 | 	mov	arg01, local02
1ab3c     14 13 82 F1 | 	sub	arg01, local06
1ab40     11 15 02 F6 | 	mov	arg02, local03
1ab44     0F 15 02 F1 | 	add	arg02, local01
1ab48     12 17 02 F6 | 	mov	arg03, local04
1ab4c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ab50                 | '   putpixel(x0+x,y0-y,c)
1ab50     10 13 02 F6 | 	mov	arg01, local02
1ab54     14 13 02 F1 | 	add	arg01, local06
1ab58     11 15 02 F6 | 	mov	arg02, local03
1ab5c     0F 15 82 F1 | 	sub	arg02, local01
1ab60     12 17 02 F6 | 	mov	arg03, local04
1ab64     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ab68                 | '   putpixel(x0+x,y0+y,c)
1ab68     10 13 02 F6 | 	mov	arg01, local02
1ab6c     14 13 02 F1 | 	add	arg01, local06
1ab70     11 15 02 F6 | 	mov	arg02, local03
1ab74     0F 15 02 F1 | 	add	arg02, local01
1ab78     12 17 02 F6 | 	mov	arg03, local04
1ab7c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ab80                 | '   putpixel(x0-y,y0-x,c)
1ab80     10 13 02 F6 | 	mov	arg01, local02
1ab84     0F 13 82 F1 | 	sub	arg01, local01
1ab88     11 15 02 F6 | 	mov	arg02, local03
1ab8c     14 15 82 F1 | 	sub	arg02, local06
1ab90     12 17 02 F6 | 	mov	arg03, local04
1ab94     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ab98                 | '   putpixel(x0-y,y0+x,c)
1ab98     10 13 02 F6 | 	mov	arg01, local02
1ab9c     0F 13 82 F1 | 	sub	arg01, local01
1aba0     11 15 02 F6 | 	mov	arg02, local03
1aba4     14 15 02 F1 | 	add	arg02, local06
1aba8     12 17 02 F6 | 	mov	arg03, local04
1abac     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1abb0                 | '   putpixel(x0+y,y0-x,c)
1abb0     10 13 02 F6 | 	mov	arg01, local02
1abb4     0F 13 02 F1 | 	add	arg01, local01
1abb8     11 15 02 F6 | 	mov	arg02, local03
1abbc     14 15 82 F1 | 	sub	arg02, local06
1abc0     12 17 02 F6 | 	mov	arg03, local04
1abc4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1abc8                 | '   putpixel(x0+y,y0+x,c)
1abc8     10 13 02 F6 | 	mov	arg01, local02
1abcc     0F 13 02 F1 | 	add	arg01, local01
1abd0     11 15 02 F6 | 	mov	arg02, local03
1abd4     14 15 02 F1 | 	add	arg02, local06
1abd8     12 17 02 F6 | 	mov	arg03, local04
1abdc     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1abe0                 | '   if d>0 
1abe0     01 26 56 F2 | 	cmps	local05, #1 wc
1abe4     18 00 90 CD |  if_b	jmp	#LR__2091
1abe8                 | '     d+=da
1abe8     16 27 02 F1 | 	add	local05, local08
1abec                 | '     y-=1
1abec     01 1E 86 F1 | 	sub	local01, #1
1abf0                 | '     x+=1
1abf0     01 28 06 F1 | 	add	local06, #1
1abf4                 | '     da+=4*4
1abf4     10 2C 06 F1 | 	add	local08, #16
1abf8                 | '     db+=2*4
1abf8     08 2A 06 F1 | 	add	local07, #8
1abfc     18 FF 9F FD | 	jmp	#LR__2090
1ac00                 | LR__2091
1ac00                 | '   else
1ac00                 | '     d+=db
1ac00     15 27 02 F1 | 	add	local05, local07
1ac04                 | '     x+=1
1ac04     01 28 06 F1 | 	add	local06, #1
1ac08                 | '     da+=2*4
1ac08     08 2C 06 F1 | 	add	local08, #8
1ac0c                 | '     db+=2*4
1ac0c     08 2A 06 F1 | 	add	local07, #8
1ac10     04 FF 9F FD | 	jmp	#LR__2090
1ac14                 | LR__2092
1ac14     A7 F0 03 F6 | 	mov	ptra, fp
1ac18     B2 00 A0 FD | 	call	#popregs_
1ac1c                 | _hg010b_spin2_circle_ret
1ac1c     2D 00 64 FD | 	ret
1ac20                 | 
1ac20                 | '     
1ac20                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ac20                 | ' 
1ac20                 | ' pub frame(x1,y1,x2,y2,c)
1ac20                 | _hg010b_spin2_frame
1ac20     05 4A 05 F6 | 	mov	COUNT_, #5
1ac24     A8 00 A0 FD | 	call	#pushregs_
1ac28     09 1F 02 F6 | 	mov	local01, arg01
1ac2c     0A 21 02 F6 | 	mov	local02, arg02
1ac30     0B 23 02 F6 | 	mov	local03, arg03
1ac34     0C 25 02 F6 | 	mov	local04, arg04
1ac38     0D 27 02 F6 | 	mov	local05, arg05
1ac3c                 | ' 
1ac3c                 | ' fastline(x1,x2,y1,c)
1ac3c     0F 13 02 F6 | 	mov	arg01, local01
1ac40     11 15 02 F6 | 	mov	arg02, local03
1ac44     10 17 02 F6 | 	mov	arg03, local02
1ac48     13 19 02 F6 | 	mov	arg04, local05
1ac4c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ac50                 | ' fastline(x1,x2,y2,c)
1ac50     0F 13 02 F6 | 	mov	arg01, local01
1ac54     11 15 02 F6 | 	mov	arg02, local03
1ac58     12 17 02 F6 | 	mov	arg03, local04
1ac5c     13 19 02 F6 | 	mov	arg04, local05
1ac60     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ac64                 | ' line(x1,y1,x1,y2,c)
1ac64     0F 13 02 F6 | 	mov	arg01, local01
1ac68     10 15 02 F6 | 	mov	arg02, local02
1ac6c     0F 17 02 F6 | 	mov	arg03, local01
1ac70     12 19 02 F6 | 	mov	arg04, local04
1ac74     13 1B 02 F6 | 	mov	arg05, local05
1ac78                 | ' draw(x1,y1,x2,y2,c)
1ac78     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ac7c                 | ' line(x2,y1,x2,y2,c)
1ac7c     11 13 02 F6 | 	mov	arg01, local03
1ac80     10 15 02 F6 | 	mov	arg02, local02
1ac84     11 17 02 F6 | 	mov	arg03, local03
1ac88     12 19 02 F6 | 	mov	arg04, local04
1ac8c     13 1B 02 F6 | 	mov	arg05, local05
1ac90                 | ' draw(x1,y1,x2,y2,c)
1ac90     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1ac94     A7 F0 03 F6 | 	mov	ptra, fp
1ac98     B2 00 A0 FD | 	call	#popregs_
1ac9c                 | _hg010b_spin2_frame_ret
1ac9c     2D 00 64 FD | 	ret
1aca0                 | 
1aca0                 | ' 
1aca0                 | ' '-- A box (a filled rectangle) ----------------------------------------
1aca0                 | ' 
1aca0                 | ' pub box(x1,y1,x2,y2,c) |yy
1aca0                 | _hg010b_spin2_box
1aca0     06 4A 05 F6 | 	mov	COUNT_, #6
1aca4     A8 00 A0 FD | 	call	#pushregs_
1aca8     09 1F 02 F6 | 	mov	local01, arg01
1acac     0A 21 02 F6 | 	mov	local02, arg02
1acb0     0B 23 02 F6 | 	mov	local03, arg03
1acb4     0C 25 02 F6 | 	mov	local04, arg04
1acb8     0D 27 02 F6 | 	mov	local05, arg05
1acbc                 | ' 
1acbc                 | ' repeat yy from y1 to y2
1acbc     10 25 52 F2 | 	cmps	local04, local02 wc
1acc0     01 28 86 F6 | 	negc	local06, #1
1acc4     14 25 02 F1 | 	add	local04, local06
1acc8                 | LR__2100
1acc8                 | '   fastline(x1,x2,yy,c)
1acc8     0F 13 02 F6 | 	mov	arg01, local01
1accc     11 15 02 F6 | 	mov	arg02, local03
1acd0     13 19 02 F6 | 	mov	arg04, local05
1acd4     10 17 02 F6 | 	mov	arg03, local02
1acd8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1acdc     14 21 02 F1 | 	add	local02, local06
1ace0     12 21 0A F2 | 	cmp	local02, local04 wz
1ace4     E0 FF 9F 5D |  if_ne	jmp	#LR__2100
1ace8     A7 F0 03 F6 | 	mov	ptra, fp
1acec     B2 00 A0 FD | 	call	#popregs_
1acf0                 | _hg010b_spin2_box_ret
1acf0     2D 00 64 FD | 	ret
1acf4                 | 
1acf4                 | '       
1acf4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1acf4                 | _hg010b_spin2_putcharxycgf
1acf4                 | ' 
1acf4                 | '  
1acf4                 | ' repeat yy from 0 to 15
1acf4     00 00 06 F6 | 	mov	_var01, #0
1acf8     97 8C 48 FB | 	callpa	#(@LR__2112-@LR__2110)>>2,fcache_load_ptr_
1acfc                 | LR__2110
1acfc                 | ' 
1acfc                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1acfc     91 E4 05 F1 | 	add	objptr, #145
1ad00     F2 02 02 FB | 	rdlong	_var02, objptr
1ad04     0A 02 66 F0 | 	shl	_var02, #10
1ad08     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1ad0c     01 05 02 F1 | 	add	_var03, _var02
1ad10     0B 03 02 F6 | 	mov	_var02, arg03
1ad14     04 02 66 F0 | 	shl	_var02, #4
1ad18     01 05 02 F1 | 	add	_var03, _var02
1ad1c     00 05 02 F1 | 	add	_var03, _var01
1ad20     02 05 C2 FA | 	rdbyte	_var03, _var03
1ad24                 | '   asm
1ad24     00 04 0E F4 | 	testb	_var03, #0 wz
1ad28     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ad2c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ad30     01 04 0E F4 | 	testb	_var03, #1 wz
1ad34     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ad38     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ad3c     02 04 0E F4 | 	testb	_var03, #2 wz
1ad40     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ad44     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ad48     03 04 0E F4 | 	testb	_var03, #3 wz
1ad4c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ad50     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ad54     04 04 0E F4 | 	testb	_var03, #4 wz
1ad58     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ad5c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ad60     05 04 0E F4 | 	testb	_var03, #5 wz
1ad64     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ad68     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ad6c     06 04 0E F4 | 	testb	_var03, #6 wz
1ad70     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ad74     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ad78     07 04 0E F4 | 	testb	_var03, #7 wz
1ad7c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1ad80     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1ad84                 | '   
1ad84                 | '   ccc[0]:=c1
1ad84     99 E5 05 F1 | 	add	objptr, #409
1ad88     F2 06 62 FC | 	wrlong	_var04, objptr
1ad8c                 | '   ccc[1]:=c2 
1ad8c     04 E4 05 F1 | 	add	objptr, #4
1ad90     F2 08 62 FC | 	wrlong	_var05, objptr
1ad94                 | '   long[mailbox0][2]:=8
1ad94     49 E4 85 F1 | 	sub	objptr, #73
1ad98     F2 04 02 FB | 	rdlong	_var03, objptr
1ad9c     08 04 06 F1 | 	add	_var03, #8
1ada0     02 11 68 FC | 	wrlong	#8, _var03
1ada4                 | '   long[mailbox0][1]:=@ccc
1ada4     45 E4 05 F1 | 	add	objptr, #69
1ada8     F2 04 02 F6 | 	mov	_var03, objptr
1adac     45 E4 85 F1 | 	sub	objptr, #69
1adb0     F2 02 02 FB | 	rdlong	_var02, objptr
1adb4     04 02 06 F1 | 	add	_var02, #4
1adb8     01 05 62 FC | 	wrlong	_var03, _var02
1adbc                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1adbc     0C E5 85 F1 | 	sub	objptr, #268
1adc0     F2 04 02 FB | 	rdlong	_var03, objptr
1adc4     0A 03 02 F6 | 	mov	_var02, arg02
1adc8     00 03 02 F1 | 	add	_var02, _var01
1adcc     0A 02 66 F0 | 	shl	_var02, #10
1add0     09 0B 02 F6 | 	mov	_var06, arg01
1add4     02 0A 66 F0 | 	shl	_var06, #2
1add8     05 03 02 F1 | 	add	_var02, _var06
1addc     01 05 02 F1 | 	add	_var03, _var02
1ade0     00 00 78 FF 
1ade4     00 04 06 F1 | 	add	_var03, ##-268435456
1ade8     0C E5 05 F1 | 	add	objptr, #268
1adec     F2 0A 02 FB | 	rdlong	_var06, objptr
1adf0     05 05 62 FC | 	wrlong	_var03, _var06
1adf4                 | '   repeat
1adf4                 | LR__2111
1adf4     F2 04 02 FB | 	rdlong	_var03, objptr
1adf8     02 03 02 FB | 	rdlong	_var02, _var03
1adfc     00 02 56 F2 | 	cmps	_var02, #0 wc
1ae00     F0 FF 9F CD |  if_b	jmp	#LR__2111
1ae04     E5 E5 85 F1 | 	sub	objptr, #485
1ae08     01 00 06 F1 | 	add	_var01, #1
1ae0c     10 00 56 F2 | 	cmps	_var01, #16 wc
1ae10     E8 FE 9F CD |  if_b	jmp	#LR__2110
1ae14                 | LR__2112
1ae14                 | _hg010b_spin2_putcharxycgf_ret
1ae14     2D 00 64 FD | 	ret
1ae18                 | 
1ae18                 | ' 
1ae18                 | ' 
1ae18                 | ' '**********************************************************************r***
1ae18                 | ' '                                                                        *
1ae18                 | ' ' Font related functions                                                 *
1ae18                 | ' '                                                                        *
1ae18                 | ' '*************************************************************************
1ae18                 | ' 
1ae18                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1ae18                 | ' 
1ae18                 | ' pub setfontfamily(afontnum)
1ae18                 | _hg010b_spin2_setfontfamily
1ae18                 | ' 
1ae18                 | ' font_family:=afontnum
1ae18     91 E4 05 F1 | 	add	objptr, #145
1ae1c     F2 12 62 FC | 	wrlong	arg01, objptr
1ae20     91 E4 85 F1 | 	sub	objptr, #145
1ae24                 | ' 'if afontnum==8
1ae24                 | ' '  font_ptr:=@amiga_font
1ae24                 | ' 
1ae24                 | ' if afontnum==4
1ae24     04 12 0E F2 | 	cmp	arg01, #4 wz
1ae28                 | '   font_ptr:=@st_font
1ae28     08 00 00 AF 
1ae2c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1ae30     04 E4 05 A1 |  if_e	add	objptr, #4
1ae34     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ae38     04 E4 85 A1 |  if_e	sub	objptr, #4
1ae3c     08 00 00 AF 
1ae40     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1ae44                 | ' if afontnum==0
1ae44     00 12 0E F2 | 	cmp	arg01, #0 wz
1ae48                 | '   font_ptr:=@vga_font
1ae48     04 E4 05 A1 |  if_e	add	objptr, #4
1ae4c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ae50     04 E4 85 A1 |  if_e	sub	objptr, #4
1ae54                 | _hg010b_spin2_setfontfamily_ret
1ae54     2D 00 64 FD | 	ret
1ae58                 | 
1ae58                 | ' 
1ae58                 | ' '*************************************************************************
1ae58                 | ' '                                                                        *
1ae58                 | ' '  Cursor functions                                                      *
1ae58                 | ' '                                                                        *
1ae58                 | ' '*************************************************************************
1ae58                 | ' 
1ae58                 | ' 
1ae58                 | ' pub setcursorpos(x,y)
1ae58                 | _hg010b_spin2_setcursorpos
1ae58                 | ' 
1ae58                 | ' ''---------- Set the (x,y) position of cursor
1ae58                 | ' 
1ae58                 | ' cursor_x:=x
1ae58     38 E4 05 F1 | 	add	objptr, #56
1ae5c     F2 12 52 FC | 	wrword	arg01, objptr
1ae60                 | ' cursor_y:=y
1ae60     02 E4 05 F1 | 	add	objptr, #2
1ae64     F2 14 42 FC | 	wrbyte	arg02, objptr
1ae68                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1ae68     02 E4 85 F1 | 	sub	objptr, #2
1ae6c     F2 14 E2 FA | 	rdword	arg02, objptr
1ae70     02 14 66 F0 | 	shl	arg02, #2
1ae74     02 E4 05 F1 | 	add	objptr, #2
1ae78     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ae7c     3A E4 85 F1 | 	sub	objptr, #58
1ae80     04 16 66 F0 | 	shl	arg03, #4
1ae84     11 12 06 F6 | 	mov	arg01, #17
1ae88     54 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ae8c                 | _hg010b_spin2_setcursorpos_ret
1ae8c     2D 00 64 FD | 	ret
1ae90                 | 
1ae90                 | ' 
1ae90                 | ' '*************************************************************************
1ae90                 | ' '                                                                        *
1ae90                 | ' '  VBlank functions                                                      *
1ae90                 | ' '                                                                        *
1ae90                 | ' '*************************************************************************
1ae90                 | ' 
1ae90                 | ' pub waitvbl(amount) | i
1ae90                 | _hg010b_spin2_waitvbl
1ae90     03 4A 05 F6 | 	mov	COUNT_, #3
1ae94     A8 00 A0 FD | 	call	#pushregs_
1ae98     09 1F 02 F6 | 	mov	local01, arg01
1ae9c                 | ' 
1ae9c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1ae9c                 | ' 
1ae9c                 | ' repeat i from 1 to amount
1ae9c     01 20 06 F6 | 	mov	local02, #1
1aea0     01 1E 56 F2 | 	cmps	local01, #1 wc
1aea4     01 22 86 F6 | 	negc	local03, #1
1aea8     11 1F 02 F1 | 	add	local01, local03
1aeac                 | LR__2120
1aeac                 | '   repeat until vblank==0
1aeac                 | LR__2121
1aeac     45 E4 05 F1 | 	add	objptr, #69
1aeb0     F2 12 0A FB | 	rdlong	arg01, objptr wz
1aeb4     45 E4 85 F1 | 	sub	objptr, #69
1aeb8     0C 00 90 AD |  if_e	jmp	#LR__2122
1aebc                 | '     waitus(100)
1aebc     64 12 06 F6 | 	mov	arg01, #100
1aec0     94 17 B0 FD | 	call	#__system___waitus
1aec4     E4 FF 9F FD | 	jmp	#LR__2121
1aec8                 | LR__2122
1aec8                 | '   repeat until vblank==1
1aec8                 | LR__2123
1aec8     45 E4 05 F1 | 	add	objptr, #69
1aecc     F2 12 02 FB | 	rdlong	arg01, objptr
1aed0     45 E4 85 F1 | 	sub	objptr, #69
1aed4     01 12 0E F2 | 	cmp	arg01, #1 wz
1aed8     0C 00 90 AD |  if_e	jmp	#LR__2124
1aedc                 | '     waitus(100)
1aedc     64 12 06 F6 | 	mov	arg01, #100
1aee0     74 17 B0 FD | 	call	#__system___waitus
1aee4     E0 FF 9F FD | 	jmp	#LR__2123
1aee8                 | LR__2124
1aee8     11 21 02 F1 | 	add	local02, local03
1aeec     0F 21 0A F2 | 	cmp	local02, local01 wz
1aef0     B8 FF 9F 5D |  if_ne	jmp	#LR__2120
1aef4     A7 F0 03 F6 | 	mov	ptra, fp
1aef8     B2 00 A0 FD | 	call	#popregs_
1aefc                 | _hg010b_spin2_waitvbl_ret
1aefc     2D 00 64 FD | 	ret
1af00                 | 
1af00                 | ' 
1af00                 | ' 
1af00                 | ' pub cls(fc,bc)   :c,i
1af00                 | _hg010b_spin2_cls
1af00     02 4A 05 F6 | 	mov	COUNT_, #2
1af04     A8 00 A0 FD | 	call	#pushregs_
1af08     09 1F 02 F6 | 	mov	local01, arg01
1af0c     0A 21 02 F6 | 	mov	local02, arg02
1af10                 | ' 
1af10                 | ' c:=bc
1af10                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1af10     D9 E4 05 F1 | 	add	objptr, #217
1af14     F2 12 02 FB | 	rdlong	arg01, objptr
1af18     A5 E4 85 F1 | 	sub	objptr, #165
1af1c     F2 16 02 FB | 	rdlong	arg03, objptr
1af20     02 16 66 F0 | 	shl	arg03, #2
1af24     10 15 02 F6 | 	mov	arg02, local02
1af28     00 18 06 F6 | 	mov	arg04, #0
1af2c     01 1A 06 F6 | 	mov	arg05, #1
1af30     0B 00 00 FF 
1af34     8C E4 05 F1 | 	add	objptr, ##5772
1af38     F0 08 B0 FD | 	call	#_psram_spin2_fill
1af3c                 | ' setwritecolors(fc,bc)
1af3c                 | ' 
1af3c                 | ' write_color:=ff
1af3c     0B 00 00 FF 
1af40     83 E4 85 F1 | 	sub	objptr, ##5763
1af44     F2 1E 62 FC | 	wrlong	local01, objptr
1af48                 | ' write_background:=bb
1af48     04 E4 05 F1 | 	add	objptr, #4
1af4c     F2 20 62 FC | 	wrlong	local02, objptr
1af50                 | ' cursor_x:=0
1af50     09 E4 85 F1 | 	sub	objptr, #9
1af54     F2 00 58 FC | 	wrword	#0, objptr
1af58                 | ' cursor_y:=0
1af58     02 E4 05 F1 | 	add	objptr, #2
1af5c     F2 00 48 FC | 	wrbyte	#0, objptr
1af60                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1af60     02 E4 85 F1 | 	sub	objptr, #2
1af64     F2 14 E2 FA | 	rdword	arg02, objptr
1af68     02 14 66 F0 | 	shl	arg02, #2
1af6c     02 E4 05 F1 | 	add	objptr, #2
1af70     F2 16 C2 FA | 	rdbyte	arg03, objptr
1af74     3A E4 85 F1 | 	sub	objptr, #58
1af78     04 16 66 F0 | 	shl	arg03, #4
1af7c     11 12 06 F6 | 	mov	arg01, #17
1af80     5C F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1af84                 | ' setcursorcolor(fc)
1af84     0F 13 02 F6 | 	mov	arg01, local01
1af88     10 EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
1af8c     10 FB 01 F6 | 	mov	result1, local02
1af90     00 FC 05 F6 | 	mov	result2, #0
1af94     A7 F0 03 F6 | 	mov	ptra, fp
1af98     B2 00 A0 FD | 	call	#popregs_
1af9c                 | _hg010b_spin2_cls_ret
1af9c     2D 00 64 FD | 	ret
1afa0                 | 
1afa0                 | ' 
1afa0                 | ' ''---------- Output a char at the cursor position, move the cursor 
1afa0                 | ' 
1afa0                 | ' pub putchar(achar) | c,x,y,l,newcpl
1afa0                 | _hg010b_spin2_putchar
1afa0     01 4A 05 F6 | 	mov	COUNT_, #1
1afa4     A8 00 A0 FD | 	call	#pushregs_
1afa8     09 1F 02 F6 | 	mov	local01, arg01
1afac                 | ' 
1afac                 | ' if achar==10
1afac     0A 1E 0E F2 | 	cmp	local01, #10 wz
1afb0                 | '   crlf()
1afb0     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1afb4                 | ' if achar==9
1afb4     09 1E 0E F2 | 	cmp	local01, #9 wz
1afb8     18 00 90 5D |  if_ne	jmp	#LR__2130
1afbc                 | '   cursor_x:=(cursor_x& %11110000)+16
1afbc     38 E4 05 F1 | 	add	objptr, #56
1afc0     F2 16 E2 FA | 	rdword	arg03, objptr
1afc4     F0 16 06 F5 | 	and	arg03, #240
1afc8     10 16 06 F1 | 	add	arg03, #16
1afcc     F2 16 52 FC | 	wrword	arg03, objptr
1afd0     38 E4 85 F1 | 	sub	objptr, #56
1afd4                 | LR__2130
1afd4                 | '   
1afd4                 | ' if (achar<>9) && (achar<>10) 
1afd4     09 1E 0E F2 | 	cmp	local01, #9 wz
1afd8     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1afdc     44 00 90 AD |  if_e	jmp	#LR__2131
1afe0                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1afe0     38 E4 05 F1 | 	add	objptr, #56
1afe4     F2 12 E2 FA | 	rdword	arg01, objptr
1afe8     02 E4 05 F1 | 	add	objptr, #2
1afec     F2 14 C2 FA | 	rdbyte	arg02, objptr
1aff0     04 14 66 F0 | 	shl	arg02, #4
1aff4     03 E4 05 F1 | 	add	objptr, #3
1aff8     F2 18 02 FB | 	rdlong	arg04, objptr
1affc     04 E4 05 F1 | 	add	objptr, #4
1b000     F2 1A 02 FB | 	rdlong	arg05, objptr
1b004     41 E4 85 F1 | 	sub	objptr, #65
1b008     0F 17 02 F6 | 	mov	arg03, local01
1b00c     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1b010                 | '   cursor_x+=2
1b010     38 E4 05 F1 | 	add	objptr, #56
1b014     F2 1E E2 FA | 	rdword	local01, objptr
1b018     02 1E 06 F1 | 	add	local01, #2
1b01c     F2 1E 52 FC | 	wrword	local01, objptr
1b020     38 E4 85 F1 | 	sub	objptr, #56
1b024                 | LR__2131
1b024                 | ' 
1b024                 | ' if cursor_x>=256
1b024     38 E4 05 F1 | 	add	objptr, #56
1b028     F2 1E E2 FA | 	rdword	local01, objptr
1b02c     38 E4 85 F1 | 	sub	objptr, #56
1b030     00 1F 56 F2 | 	cmps	local01, #256 wc
1b034     64 00 90 CD |  if_b	jmp	#LR__2133
1b038                 | '   cursor_x:=0
1b038     38 E4 05 F1 | 	add	objptr, #56
1b03c     F2 00 58 FC | 	wrword	#0, objptr
1b040                 | '   cursor_y+=1
1b040     02 E4 05 F1 | 	add	objptr, #2
1b044     F2 1E C2 FA | 	rdbyte	local01, objptr
1b048     01 1E 06 F1 | 	add	local01, #1
1b04c     F2 1E 42 FC | 	wrbyte	local01, objptr
1b050                 | '   if cursor_y>st_lines-1
1b050     C3 E4 05 F1 | 	add	objptr, #195
1b054     F2 1E 02 FB | 	rdlong	local01, objptr
1b058     01 1E 86 F1 | 	sub	local01, #1
1b05c     C3 E4 85 F1 | 	sub	objptr, #195
1b060     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b064     3A E4 85 F1 | 	sub	objptr, #58
1b068     0F 17 5A F2 | 	cmps	arg03, local01 wcz
1b06c     2C 00 90 ED |  if_be	jmp	#LR__2132
1b070                 | '     scrollup()
1b070     00 12 06 F6 | 	mov	arg01, #0
1b074     01 00 00 FF 
1b078     40 14 06 F6 | 	mov	arg02, ##576
1b07c     10 16 06 F6 | 	mov	arg03, #16
1b080     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
1b084                 | '     cursor_y:=st_lines-1
1b084     FD E4 05 F1 | 	add	objptr, #253
1b088     F2 1E 02 FB | 	rdlong	local01, objptr
1b08c     01 1E 86 F1 | 	sub	local01, #1
1b090     C3 E4 85 F1 | 	sub	objptr, #195
1b094     F2 1E 42 FC | 	wrbyte	local01, objptr
1b098     3A E4 85 F1 | 	sub	objptr, #58
1b09c                 | LR__2132
1b09c                 | LR__2133
1b09c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1b09c     38 E4 05 F1 | 	add	objptr, #56
1b0a0     F2 14 E2 FA | 	rdword	arg02, objptr
1b0a4     02 14 66 F0 | 	shl	arg02, #2
1b0a8     02 E4 05 F1 | 	add	objptr, #2
1b0ac     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b0b0     3A E4 85 F1 | 	sub	objptr, #58
1b0b4     04 16 66 F0 | 	shl	arg03, #4
1b0b8     11 12 06 F6 | 	mov	arg01, #17
1b0bc     20 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1b0c0     A7 F0 03 F6 | 	mov	ptra, fp
1b0c4     B2 00 A0 FD | 	call	#popregs_
1b0c8                 | _hg010b_spin2_putchar_ret
1b0c8     2D 00 64 FD | 	ret
1b0cc                 | 
1b0cc                 | '     
1b0cc                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1b0cc                 | ' 
1b0cc                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1b0cc                 | _hg010b_spin2_putchar2
1b0cc     01 4A 05 F6 | 	mov	COUNT_, #1
1b0d0     A8 00 A0 FD | 	call	#pushregs_
1b0d4                 | ' 
1b0d4                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1b0d4     38 E4 05 F1 | 	add	objptr, #56
1b0d8     F2 1E E2 FA | 	rdword	local01, objptr
1b0dc     02 E4 05 F1 | 	add	objptr, #2
1b0e0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b0e4     04 14 66 F0 | 	shl	arg02, #4
1b0e8     09 17 02 F6 | 	mov	arg03, arg01
1b0ec     03 E4 05 F1 | 	add	objptr, #3
1b0f0     F2 18 02 FB | 	rdlong	arg04, objptr
1b0f4     04 E4 05 F1 | 	add	objptr, #4
1b0f8     F2 1A 02 FB | 	rdlong	arg05, objptr
1b0fc     41 E4 85 F1 | 	sub	objptr, #65
1b100     0F 13 02 F6 | 	mov	arg01, local01
1b104     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
1b108                 | ' cursor_x+=2
1b108     38 E4 05 F1 | 	add	objptr, #56
1b10c     F2 1E E2 FA | 	rdword	local01, objptr
1b110     02 1E 06 F1 | 	add	local01, #2
1b114     F2 1E 52 FC | 	wrword	local01, objptr
1b118                 | ' if cursor_x>=256
1b118     F2 1E E2 FA | 	rdword	local01, objptr
1b11c     38 E4 85 F1 | 	sub	objptr, #56
1b120     00 1F 56 F2 | 	cmps	local01, #256 wc
1b124     64 00 90 CD |  if_b	jmp	#LR__2141
1b128                 | '   cursor_x:=0
1b128     38 E4 05 F1 | 	add	objptr, #56
1b12c     F2 00 58 FC | 	wrword	#0, objptr
1b130                 | '   cursor_y+=1
1b130     02 E4 05 F1 | 	add	objptr, #2
1b134     F2 1E C2 FA | 	rdbyte	local01, objptr
1b138     01 1E 06 F1 | 	add	local01, #1
1b13c     F2 1E 42 FC | 	wrbyte	local01, objptr
1b140                 | '   if cursor_y>st_lines-1
1b140     C3 E4 05 F1 | 	add	objptr, #195
1b144     F2 1E 02 FB | 	rdlong	local01, objptr
1b148     01 1E 86 F1 | 	sub	local01, #1
1b14c     C3 E4 85 F1 | 	sub	objptr, #195
1b150     F2 1A C2 FA | 	rdbyte	arg05, objptr
1b154     3A E4 85 F1 | 	sub	objptr, #58
1b158     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
1b15c     2C 00 90 ED |  if_be	jmp	#LR__2140
1b160                 | '     scrollup()
1b160     00 12 06 F6 | 	mov	arg01, #0
1b164     01 00 00 FF 
1b168     40 14 06 F6 | 	mov	arg02, ##576
1b16c     10 16 06 F6 | 	mov	arg03, #16
1b170     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
1b174                 | '     cursor_y:=st_lines-1
1b174     FD E4 05 F1 | 	add	objptr, #253
1b178     F2 1E 02 FB | 	rdlong	local01, objptr
1b17c     01 1E 86 F1 | 	sub	local01, #1
1b180     C3 E4 85 F1 | 	sub	objptr, #195
1b184     F2 1E 42 FC | 	wrbyte	local01, objptr
1b188     3A E4 85 F1 | 	sub	objptr, #58
1b18c                 | LR__2140
1b18c                 | LR__2141
1b18c                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
1b18c     38 E4 05 F1 | 	add	objptr, #56
1b190     F2 14 E2 FA | 	rdword	arg02, objptr
1b194     02 14 66 F0 | 	shl	arg02, #2
1b198     02 E4 05 F1 | 	add	objptr, #2
1b19c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b1a0     3A E4 85 F1 | 	sub	objptr, #58
1b1a4     04 16 66 F0 | 	shl	arg03, #4
1b1a8     11 12 06 F6 | 	mov	arg01, #17
1b1ac     30 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1b1b0     A7 F0 03 F6 | 	mov	ptra, fp
1b1b4     B2 00 A0 FD | 	call	#popregs_
1b1b8                 | _hg010b_spin2_putchar2_ret
1b1b8     2D 00 64 FD | 	ret
1b1bc                 | 
1b1bc                 | ' ''--------- Output a string at the cursor position, move the cursor  
1b1bc                 | ' 
1b1bc                 | ' pub write(text) | iii,c,ncx,ncy
1b1bc                 | _hg010b_spin2_write
1b1bc     04 4A 05 F6 | 	mov	COUNT_, #4
1b1c0     A8 00 A0 FD | 	call	#pushregs_
1b1c4     09 1F 02 F6 | 	mov	local01, arg01
1b1c8                 | ' 
1b1c8                 | ' repeat iii from 0 to strsize(text)-1
1b1c8     00 20 06 F6 | 	mov	local02, #0
1b1cc     0F 13 02 F6 | 	mov	arg01, local01
1b1d0     09 23 02 F6 | 	mov	local03, arg01
1b1d4     97 06 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
1b1d8                 | LR__2150
1b1d8     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b1dc     01 22 06 51 |  if_ne	add	local03, #1
1b1e0     F4 FF 9F 5D |  if_ne	jmp	#LR__2150
1b1e4                 | LR__2151
1b1e4     09 23 82 F1 | 	sub	local03, arg01
1b1e8     01 22 86 F1 | 	sub	local03, #1
1b1ec     00 22 56 F2 | 	cmps	local03, #0 wc
1b1f0     01 24 86 F6 | 	negc	local04, #1
1b1f4     12 23 02 F1 | 	add	local03, local04
1b1f8                 | LR__2152
1b1f8                 | '   putchar2(byte[text+iii])
1b1f8     0F 13 02 F6 | 	mov	arg01, local01
1b1fc     10 13 02 F1 | 	add	arg01, local02
1b200     09 13 C2 FA | 	rdbyte	arg01, arg01
1b204     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
1b208     12 21 02 F1 | 	add	local02, local04
1b20c     11 21 0A F2 | 	cmp	local02, local03 wz
1b210     E4 FF 9F 5D |  if_ne	jmp	#LR__2152
1b214     A7 F0 03 F6 | 	mov	ptra, fp
1b218     B2 00 A0 FD | 	call	#popregs_
1b21c                 | _hg010b_spin2_write_ret
1b21c     2D 00 64 FD | 	ret
1b220                 | 
1b220                 | ' 
1b220                 | ' ''-----------  Scroll the screen one line up
1b220                 | ' 
1b220                 | ' pub scrollup(start=0, end=576 , amount=16) | i
1b220                 | _hg010b_spin2_scrollup
1b220     01 4A 05 F6 | 	mov	COUNT_, #1
1b224     A8 00 A0 FD | 	call	#pushregs_
1b228                 | ' 	
1b228                 | ' repeat i from 0 to 559 
1b228     00 1E 06 F6 | 	mov	local01, #0
1b22c                 | LR__2160
1b22c     F5 E4 05 F1 | 	add	objptr, #245
1b230     F2 18 02 FB | 	rdlong	arg04, objptr
1b234     1C E4 85 F1 | 	sub	objptr, #28
1b238     F2 14 02 FB | 	rdlong	arg02, objptr
1b23c     0F 13 02 F6 | 	mov	arg01, local01
1b240     10 12 06 F1 | 	add	arg01, #16
1b244     02 12 66 F0 | 	shl	arg01, #2
1b248     14 E4 05 F1 | 	add	objptr, #20
1b24c     F2 16 02 FB | 	rdlong	arg03, objptr
1b250     0B 13 02 FD | 	qmul	arg01, arg03
1b254                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1b254     F6 03 00 FF 
1b258     00 12 06 F6 | 	mov	arg01, ##519168
1b25c     0C 13 82 F1 | 	sub	arg01, arg04
1b260     02 16 66 F0 | 	shl	arg03, #2
1b264     0A 00 00 FF 
1b268     D3 E5 05 F1 | 	add	objptr, ##5587
1b26c     18 18 62 FD | 	getqx	arg04
1b270     0C 15 02 F1 | 	add	arg02, arg04
1b274     7C 04 B0 FD | 	call	#_psram_spin2_read1
1b278     0A 00 00 FF 
1b27c     CB E5 85 F1 | 	sub	objptr, ##5579
1b280     F2 18 02 FB | 	rdlong	arg04, objptr
1b284     1C E4 85 F1 | 	sub	objptr, #28
1b288     F2 14 02 FB | 	rdlong	arg02, objptr
1b28c     0F 13 02 F6 | 	mov	arg01, local01
1b290     02 12 66 F0 | 	shl	arg01, #2
1b294     14 E4 05 F1 | 	add	objptr, #20
1b298     F2 16 02 FB | 	rdlong	arg03, objptr
1b29c     0B 13 02 FD | 	qmul	arg01, arg03
1b2a0                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1b2a0     F6 03 00 FF 
1b2a4     00 12 06 F6 | 	mov	arg01, ##519168
1b2a8     0C 13 82 F1 | 	sub	arg01, arg04
1b2ac     02 16 66 F0 | 	shl	arg03, #2
1b2b0     0A 00 00 FF 
1b2b4     D3 E5 05 F1 | 	add	objptr, ##5587
1b2b8     18 18 62 FD | 	getqx	arg04
1b2bc     0C 15 02 F1 | 	add	arg02, arg04
1b2c0     CC 04 B0 FD | 	call	#_psram_spin2_write
1b2c4     0B 00 00 FF 
1b2c8     C0 E4 85 F1 | 	sub	objptr, ##5824
1b2cc     01 1E 06 F1 | 	add	local01, #1
1b2d0     01 00 00 FF 
1b2d4     30 1E 56 F2 | 	cmps	local01, ##560 wc
1b2d8     50 FF 9F CD |  if_b	jmp	#LR__2160
1b2dc                 | ' 
1b2dc                 | ' repeat i from 560 to 575
1b2dc     01 00 00 FF 
1b2e0     30 1E 06 F6 | 	mov	local01, ##560
1b2e4                 | LR__2161
1b2e4                 | '    fastline(0,1023,i,write_background)   
1b2e4     41 E4 05 F1 | 	add	objptr, #65
1b2e8     F2 18 02 FB | 	rdlong	arg04, objptr
1b2ec     41 E4 85 F1 | 	sub	objptr, #65
1b2f0     00 12 06 F6 | 	mov	arg01, #0
1b2f4     09 14 CE F9 | 	bmask	arg02, #9
1b2f8     0F 17 02 F6 | 	mov	arg03, local01
1b2fc     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
1b300     01 1E 06 F1 | 	add	local01, #1
1b304     01 00 00 FF 
1b308     40 1E 16 F2 | 	cmp	local01, ##576 wc
1b30c     D4 FF 9F CD |  if_b	jmp	#LR__2161
1b310     A7 F0 03 F6 | 	mov	ptra, fp
1b314     B2 00 A0 FD | 	call	#popregs_
1b318                 | _hg010b_spin2_scrollup_ret
1b318     2D 00 64 FD | 	ret
1b31c                 | 
1b31c                 | ' 
1b31c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1b31c                 | ' 
1b31c                 | ' pub crlf()
1b31c                 | _hg010b_spin2_crlf
1b31c                 | ' 
1b31c                 | ' cursor_x:=leading_spaces*2
1b31c     01 00 00 FF 
1b320     B2 E4 05 F1 | 	add	objptr, ##690
1b324     F2 16 02 FB | 	rdlong	arg03, objptr
1b328     01 16 66 F0 | 	shl	arg03, #1
1b32c     01 00 00 FF 
1b330     7A E4 85 F1 | 	sub	objptr, ##634
1b334     F2 16 52 FC | 	wrword	arg03, objptr
1b338                 | ' cursor_y+=1
1b338     02 E4 05 F1 | 	add	objptr, #2
1b33c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b340     01 16 06 F1 | 	add	arg03, #1
1b344     F2 16 42 FC | 	wrbyte	arg03, objptr
1b348                 | ' if cursor_y>st_lines-1
1b348     C3 E4 05 F1 | 	add	objptr, #195
1b34c     F2 16 02 FB | 	rdlong	arg03, objptr
1b350     01 16 86 F1 | 	sub	arg03, #1
1b354     C3 E4 85 F1 | 	sub	objptr, #195
1b358     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b35c     3A E4 85 F1 | 	sub	objptr, #58
1b360     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1b364     2C 00 90 ED |  if_be	jmp	#LR__2170
1b368                 | '   scrollup()
1b368     00 12 06 F6 | 	mov	arg01, #0
1b36c     01 00 00 FF 
1b370     40 14 06 F6 | 	mov	arg02, ##576
1b374     10 16 06 F6 | 	mov	arg03, #16
1b378     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
1b37c                 | '   cursor_y:=st_lines-1
1b37c     FD E4 05 F1 | 	add	objptr, #253
1b380     F2 16 02 FB | 	rdlong	arg03, objptr
1b384     01 16 86 F1 | 	sub	arg03, #1
1b388     C3 E4 85 F1 | 	sub	objptr, #195
1b38c     F2 16 42 FC | 	wrbyte	arg03, objptr
1b390     3A E4 85 F1 | 	sub	objptr, #58
1b394                 | LR__2170
1b394                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
1b394     38 E4 05 F1 | 	add	objptr, #56
1b398     F2 14 E2 FA | 	rdword	arg02, objptr
1b39c     02 14 66 F0 | 	shl	arg02, #2
1b3a0     02 E4 05 F1 | 	add	objptr, #2
1b3a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b3a8     3A E4 85 F1 | 	sub	objptr, #58
1b3ac     04 16 66 F0 | 	shl	arg03, #4
1b3b0     11 12 06 F6 | 	mov	arg01, #17
1b3b4     28 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1b3b8                 | _hg010b_spin2_crlf_ret
1b3b8     2D 00 64 FD | 	ret
1b3bc                 | 
1b3bc                 | ' 
1b3bc                 | ' 
1b3bc                 | ' '*************************************************************************
1b3bc                 | ' '                                                                        *
1b3bc                 | ' '  Conversions                                                           *
1b3bc                 | ' '                                                                        *
1b3bc                 | ' '*************************************************************************
1b3bc                 | ' 
1b3bc                 | ' ''---------- Convert a integer to dec string, return a pointer
1b3bc                 | ' 
1b3bc                 | ' pub inttostr(i):result |q,pos,k,j
1b3bc                 | _hg010b_spin2_inttostr
1b3bc     03 4A 05 F6 | 	mov	COUNT_, #3
1b3c0     A8 00 A0 FD | 	call	#pushregs_
1b3c4     09 1F 0A F6 | 	mov	local01, arg01 wz
1b3c8                 | ' 
1b3c8                 | ' j:=i
1b3c8                 | ' pos:=10
1b3c8     0A 20 06 F6 | 	mov	local02, #10
1b3cc                 | ' k:=0
1b3cc     00 22 06 F6 | 	mov	local03, #0
1b3d0                 | ' 
1b3d0                 | ' if (j==0)
1b3d0     18 00 90 5D |  if_ne	jmp	#LR__2180
1b3d4                 | '   n_string[0]:=48
1b3d4     49 E4 05 F1 | 	add	objptr, #73
1b3d8     F2 60 48 FC | 	wrbyte	#48, objptr
1b3dc                 | '   n_string[1]:=0
1b3dc     01 E4 05 F1 | 	add	objptr, #1
1b3e0     F2 00 48 FC | 	wrbyte	#0, objptr
1b3e4     4A E4 85 F1 | 	sub	objptr, #74
1b3e8     C4 00 90 FD | 	jmp	#LR__2187
1b3ec                 | LR__2180
1b3ec                 | ' 
1b3ec                 | ' else
1b3ec                 | '   if (j<0)
1b3ec     0F 1F 52 F6 | 	abs	local01, local01 wc
1b3f0                 | '     j:=0-j
1b3f0                 | '     k:=45
1b3f0     2D 22 06 C6 |  if_b	mov	local03, #45
1b3f4                 | ' 
1b3f4                 | '   n_string[11]:=0
1b3f4     54 E4 05 F1 | 	add	objptr, #84
1b3f8     F2 00 48 FC | 	wrbyte	#0, objptr
1b3fc     54 E4 85 F1 | 	sub	objptr, #84
1b400     97 24 48 FB | 	callpa	#(@LR__2182-@LR__2181)>>2,fcache_load_ptr_
1b404                 | '   repeat while (pos>-1)
1b404                 | LR__2181
1b404     00 20 56 F2 | 	cmps	local02, #0 wc
1b408     40 00 90 CD |  if_b	jmp	#LR__2183
1b40c     0F FB 51 F6 | 	abs	result1, local01 wc
1b410     0A FA 15 FD | 	qdiv	result1, #10
1b414                 | '     q:=j//10
1b414     19 FA 61 FD | 	getqy	result1
1b418     FD FA 81 F6 | 	negc	result1, result1
1b41c     0F 1F 52 F6 | 	abs	local01, local01 wc
1b420     0A 1E 16 FD | 	qdiv	local01, #10
1b424                 | '     q:=48+q
1b424     30 FA 05 F1 | 	add	result1, #48
1b428                 | '     n_string[pos]:=q
1b428     10 1F 02 F6 | 	mov	local01, local02
1b42c     49 E4 05 F1 | 	add	objptr, #73
1b430     F2 1E 02 F1 | 	add	local01, objptr
1b434     0F FB 41 FC | 	wrbyte	result1, local01
1b438                 | '     j:=j/10
1b438     49 E4 85 F1 | 	sub	objptr, #73
1b43c                 | '     pos-=1
1b43c     01 20 86 F1 | 	sub	local02, #1
1b440     18 1E 62 FD | 	getqx	local01
1b444     0F 1F 82 F6 | 	negc	local01, local01
1b448     B8 FF 9F FD | 	jmp	#LR__2181
1b44c                 | LR__2182
1b44c                 | LR__2183
1b44c                 | '   repeat while n_string[0]==48
1b44c                 | LR__2184
1b44c     49 E4 05 F1 | 	add	objptr, #73
1b450     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b454     49 E4 85 F1 | 	sub	objptr, #73
1b458     30 16 0E F2 | 	cmp	arg03, #48 wz
1b45c     20 00 90 5D |  if_ne	jmp	#LR__2185
1b460                 | '     bytemove(@n_string,@n_string+1,12)
1b460     49 E4 05 F1 | 	add	objptr, #73
1b464     F2 12 02 F6 | 	mov	arg01, objptr
1b468     F2 14 02 F6 | 	mov	arg02, objptr
1b46c     49 E4 85 F1 | 	sub	objptr, #73
1b470     01 14 06 F1 | 	add	arg02, #1
1b474     0C 16 06 F6 | 	mov	arg03, #12
1b478     9C 0D B0 FD | 	call	#__system____builtin_memmove
1b47c     CC FF 9F FD | 	jmp	#LR__2184
1b480                 | LR__2185
1b480                 | ' 
1b480                 | '   if k==45
1b480     2D 22 0E F2 | 	cmp	local03, #45 wz
1b484     28 00 90 5D |  if_ne	jmp	#LR__2186
1b488                 | '      bytemove(@n_string+1,@n_string,12)
1b488     49 E4 05 F1 | 	add	objptr, #73
1b48c     F2 12 02 F6 | 	mov	arg01, objptr
1b490     01 12 06 F1 | 	add	arg01, #1
1b494     F2 14 02 F6 | 	mov	arg02, objptr
1b498     49 E4 85 F1 | 	sub	objptr, #73
1b49c     0C 16 06 F6 | 	mov	arg03, #12
1b4a0     74 0D B0 FD | 	call	#__system____builtin_memmove
1b4a4                 | '      n_string[0]:=k
1b4a4     49 E4 05 F1 | 	add	objptr, #73
1b4a8     F2 22 42 FC | 	wrbyte	local03, objptr
1b4ac     49 E4 85 F1 | 	sub	objptr, #73
1b4b0                 | LR__2186
1b4b0                 | LR__2187
1b4b0                 | ' 
1b4b0                 | ' q:=@n_string
1b4b0     49 E4 05 F1 | 	add	objptr, #73
1b4b4     F2 FA 01 F6 | 	mov	result1, objptr
1b4b8     49 E4 85 F1 | 	sub	objptr, #73
1b4bc                 | ' return q
1b4bc     A7 F0 03 F6 | 	mov	ptra, fp
1b4c0     B2 00 A0 FD | 	call	#popregs_
1b4c4                 | _hg010b_spin2_inttostr_ret
1b4c4     2D 00 64 FD | 	ret
1b4c8                 | 
1b4c8                 | ' 
1b4c8                 | ' '..............................................................................
1b4c8                 | ' 
1b4c8                 | ' {{
1b4c8                 | ' }}
1b4c8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1b4c8                 | _psram_spin2_startx
1b4c8     04 4A 05 F6 | 	mov	COUNT_, #4
1b4cc     A8 00 A0 FD | 	call	#pushregs_
1b4d0     09 1F 02 F6 | 	mov	local01, arg01
1b4d4     0B 21 02 F6 | 	mov	local02, arg03
1b4d8     0C 23 02 F6 | 	mov	local03, arg04
1b4dc                 | '     stop() ' restart driver if required
1b4dc     54 01 B0 FD | 	call	#_psram_spin2_stop
1b4e0     00 1E 0E F2 | 	cmp	local01, #0 wz
1b4e4     14 1E 06 AB |  if_e	rdlong	local01, #20
1b4e8     0F 15 52 F6 | 	abs	arg02, local01 wc
1b4ec     A1 07 00 FF 
1b4f0     40 14 16 FD | 	qdiv	arg02, ##1000000
1b4f4                 | ' 
1b4f4                 | '     ' use current frequency if none specified
1b4f4                 | ' 
1b4f4                 | '     if freq == 0 
1b4f4                 | '         freq := clkfreq 
1b4f4                 | ' 
1b4f4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1b4f4                 | ' 
1b4f4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1b4f4                 | '     if burst < 0
1b4f4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1b4f4     18 14 62 FD | 	getqx	arg02
1b4f8     0A 19 82 F6 | 	negc	arg04, arg02
1b4fc     03 18 66 F0 | 	shl	arg04, #3
1b500     84 18 86 F1 | 	sub	arg04, #132
1b504     04 18 46 F0 | 	shr	arg04, #4
1b508     04 18 66 F0 | 	shl	arg04, #4
1b50c     00 18 56 F2 | 	cmps	arg04, #0 wc
1b510     0E FA 65 C6 |  if_b	neg	result1, #14
1b514     10 01 90 CD |  if_b	jmp	#LR__2193
1b518                 | ' 
1b518                 | '     ' compute the input delay
1b518                 | ' 
1b518                 | '     if delay <= 0
1b518     01 20 56 F2 | 	cmps	local02, #1 wc
1b51c     10 00 90 3D |  if_ae	jmp	#LR__2190
1b520                 | '         delay := lookupDelay(freq)
1b520     0F 13 02 F6 | 	mov	arg01, local01
1b524     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1b528     FD 20 02 F6 | 	mov	local02, result1
1b52c     04 00 90 FD | 	jmp	#LR__2191
1b530                 | LR__2190
1b530                 | '     else
1b530                 | '         delay <#= $f ' limit to 15
1b530     0F 20 66 F3 | 	fles	local02, #15
1b534                 | LR__2191
1b534                 | ' 
1b534                 | '     ' create our lock
1b534                 | ' 
1b534                 | '     driverlock := LOCKNEW()  
1b534     00 FA 05 F6 | 	mov	result1, #0
1b538     04 FA 61 FD | 	locknew	result1
1b53c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b540     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1b544                 | '     if driverlock == -1
1b544     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b548     FF FF 7F FF 
1b54c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b550                 | '         return ERR_NO_LOCK
1b550     1A FA 65 A6 |  if_e	neg	result1, #26
1b554     D0 00 90 AD |  if_e	jmp	#LR__2193
1b558                 | ' 
1b558                 | '     ' patch in the proper data and HUB addresses to the startup structure
1b558                 | ' 
1b558                 | '     long[@startupData][0]:=clkfreq
1b558     14 1E 06 FB | 	rdlong	local01, #20
1b55c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1b560     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1b564                 | ' '    long[@startupData][1]:=$1000_0000
1b564                 | '     long[@startupData][5]:=@deviceData
1b564     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1b568     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b56c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1b570     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1b574     14 14 06 F1 | 	add	arg02, #20
1b578     0A 1F 62 FC | 	wrlong	local01, arg02
1b57c                 | '     long[@startupData][6]:=@qosData
1b57c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1b580     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b584     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1b588     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1b58c     18 14 06 F1 | 	add	arg02, #24
1b590     0A 1F 62 FC | 	wrlong	local01, arg02
1b594                 | '     long[@startupData][7]:=$7FF00
1b594     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b598     1C 1E 06 F1 | 	add	local01, #28
1b59c     FF 03 80 FF 
1b5a0     0F 01 6A FC | 	wrlong	##524032, local01
1b5a4                 | ' 
1b5a4                 | '     ' setup some default bank and QoS parameter values
1b5a4                 | ' 
1b5a4                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1b5a4     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1b5a8     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1b5ac     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1b5b0     10 18 66 F0 | 	shl	arg04, #16
1b5b4     0C 20 66 F0 | 	shl	local02, #12
1b5b8     10 19 42 F5 | 	or	arg04, local02
1b5bc     18 18 46 F5 | 	or	arg04, #24
1b5c0     0C 15 02 F6 | 	mov	arg02, arg04
1b5c4     02 16 06 F6 | 	mov	arg03, #2
1b5c8     A0 00 A0 FD | 	call	#\builtin_longfill_
1b5cc                 | '     longfill(@qosData, $FFFF0000, 8)
1b5cc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1b5d0     07 16 06 F6 | 	mov	arg03, #7
1b5d4     28 16 62 FD | 	setq	arg03
1b5d8     80 FF FF FF 
1b5dc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1b5e0                 | ' 
1b5e0                 | '     ' get the address of the PSRAM memory driver so we can start it
1b5e0                 | ' 
1b5e0                 | '     driverAddr:= driver.getDriverAddr()
1b5e0                 | '     return @driver_start
1b5e0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1b5e4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1b5e8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1b5ec                 | ' 
1b5ec                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1b5ec                 | ' 
1b5ec                 | '     if desiredcog < 0
1b5ec     00 22 56 F2 | 	cmps	local03, #0 wc
1b5f0                 | '         desiredcog := NEWCOG
1b5f0     10 22 06 C6 |  if_b	mov	local03, #16
1b5f4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1b5f4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1b5f8     11 25 02 F6 | 	mov	local04, local03
1b5fc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1b600     0A 25 F2 FC | 	coginit	local04, arg02 wc
1b604     01 24 66 C6 |  if_b	neg	local04, #1
1b608     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1b60c     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1b610                 | '     repeat until long[@startupData] == 0 
1b610     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1b614                 | LR__2192
1b614     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1b618     F8 FF 9F 5D |  if_ne	jmp	#LR__2192
1b61c                 | ' 
1b61c                 | '     return drivercog
1b61c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1b620     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1b624     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b628                 | LR__2193
1b628     A7 F0 03 F6 | 	mov	ptra, fp
1b62c     B2 00 A0 FD | 	call	#popregs_
1b630                 | _psram_spin2_startx_ret
1b630     2D 00 64 FD | 	ret
1b634                 | 
1b634                 | ' 
1b634                 | ' '..............................................................................
1b634                 | ' 
1b634                 | ' {{
1b634                 | ' }}
1b634                 | ' PUB stop() : i
1b634                 | _psram_spin2_stop
1b634     00 00 06 F6 | 	mov	_var01, #0
1b638                 | '     if drivercog <> -1
1b638     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b63c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b640     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b644     FF FF 7F FF 
1b648     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1b64c     70 00 90 AD |  if_e	jmp	#LR__2203
1b650                 | '         cogstop(drivercog) ' a rather brutal stop
1b650     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b654     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b658     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b65c     03 12 62 FD | 	cogstop	arg01
1b660     97 26 48 FB | 	callpa	#(@LR__2202-@LR__2200)>>2,fcache_load_ptr_
1b664                 | '         repeat i from 0 to 7
1b664                 | LR__2200
1b664                 | '             if long[$7FF00][i*3] < 0
1b664     00 FB 01 F6 | 	mov	result1, _var01
1b668     01 FA 65 F0 | 	shl	result1, #1
1b66c     00 FB 01 F1 | 	add	result1, _var01
1b670     02 FA 65 F0 | 	shl	result1, #2
1b674     FF 03 00 FF 
1b678     00 FB 05 F1 | 	add	result1, ##524032
1b67c     FD FA 01 FB | 	rdlong	result1, result1
1b680     00 FA 55 F2 | 	cmps	result1, #0 wc
1b684     1C 00 90 3D |  if_ae	jmp	#LR__2201
1b688                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1b688     00 FB 01 F6 | 	mov	result1, _var01
1b68c     01 FA 65 F0 | 	shl	result1, #1
1b690     00 FB 01 F1 | 	add	result1, _var01
1b694     02 FA 65 F0 | 	shl	result1, #2
1b698     FF 03 00 FF 
1b69c     00 FB 05 F1 | 	add	result1, ##524032
1b6a0     FD 20 68 FC | 	wrlong	#16, result1
1b6a4                 | LR__2201
1b6a4     01 00 06 F1 | 	add	_var01, #1
1b6a8     08 00 56 F2 | 	cmps	_var01, #8 wc
1b6ac     B4 FF 9F CD |  if_b	jmp	#LR__2200
1b6b0                 | LR__2202
1b6b0                 | '         drivercog := -1
1b6b0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b6b4     FF FF FF FF 
1b6b8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1b6bc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b6c0                 | LR__2203
1b6c0                 | '     if driverlock <> -1
1b6c0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b6c4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1b6c8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b6cc     FF FF 7F FF 
1b6d0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1b6d4                 | '         LOCKRET(driverlock)
1b6d4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1b6d8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1b6dc     05 12 62 5D |  if_ne	lockret	arg01
1b6e0                 | '         driverlock := -1
1b6e0     FF FF FF 5F 
1b6e4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1b6e8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1b6ec     00 FB 01 F6 | 	mov	result1, _var01
1b6f0                 | _psram_spin2_stop_ret
1b6f0     2D 00 64 FD | 	ret
1b6f4                 | 
1b6f4                 | ' 
1b6f4                 | ' '..............................................................................
1b6f4                 | ' 
1b6f4                 | ' {{
1b6f4                 | ' }}
1b6f4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1b6f4                 | _psram_spin2_read1
1b6f4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1b6f4                 | '     if drivercog == -1 ' driver must be running
1b6f4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b6f8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1b6fc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b700     FF FF 7F FF 
1b704     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1b708                 | '         return ERR_INACTIVE
1b708     0F FA 65 A6 |  if_e	neg	result1, #15
1b70c     7C 00 90 AD |  if_e	jmp	#LR__2211
1b710                 | '     if count == 0 ' don't even bother reading
1b710     00 16 0E F2 | 	cmp	arg03, #0 wz
1b714                 | '         return 0
1b714     00 FA 05 A6 |  if_e	mov	result1, #0
1b718     70 00 90 AD |  if_e	jmp	#LR__2211
1b71c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1b71c     00 FA 05 F6 | 	mov	result1, #0
1b720     01 FA 61 FD | 	cogid	result1
1b724     FD 00 02 F6 | 	mov	_var01, result1
1b728     01 00 66 F0 | 	shl	_var01, #1
1b72c     FD 00 02 F1 | 	add	_var01, result1
1b730     02 00 66 F0 | 	shl	_var01, #2
1b734     FF 03 00 FF 
1b738     00 03 06 F6 | 	mov	_var02, ##524032
1b73c     00 03 02 F1 | 	add	_var02, _var01
1b740                 | '     if long[mailbox] < 0
1b740     01 01 02 FB | 	rdlong	_var01, _var02
1b744     00 00 56 F2 | 	cmps	_var01, #0 wc
1b748                 | '         return ERR_MAILBOX_BUSY
1b748     1C FA 65 C6 |  if_b	neg	result1, #28
1b74c     3C 00 90 CD |  if_b	jmp	#LR__2211
1b750                 | '     long[mailbox][2] := count
1b750     08 02 06 F1 | 	add	_var02, #8
1b754     01 17 62 FC | 	wrlong	arg03, _var02
1b758                 | '     long[mailbox][1] := dstHubAddr
1b758     04 02 86 F1 | 	sub	_var02, #4
1b75c     01 13 62 FC | 	wrlong	arg01, _var02
1b760     04 02 86 F1 | 	sub	_var02, #4
1b764                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1b764     0A 05 02 F6 | 	mov	_var03, arg02
1b768     D9 04 06 F4 | 	bitl	_var03, #217
1b76c     00 00 58 FF 
1b770     00 00 06 F6 | 	mov	_var01, ##-1342177280
1b774     02 01 02 F1 | 	add	_var01, _var03
1b778     01 01 62 FC | 	wrlong	_var01, _var02
1b77c                 | '     repeat
1b77c                 | LR__2210
1b77c                 | '         result := long[mailbox]    
1b77c     01 05 02 FB | 	rdlong	_var03, _var02
1b780     00 04 56 F2 | 	cmps	_var03, #0 wc
1b784     F4 FF 9F CD |  if_b	jmp	#LR__2210
1b788                 | '     while result < 0   
1b788                 | '     return -result                       'return success or error
1b788     02 FB 61 F6 | 	neg	result1, _var03
1b78c                 | LR__2211
1b78c                 | _psram_spin2_read1_ret
1b78c     2D 00 64 FD | 	ret
1b790                 | 
1b790                 | ' 
1b790                 | ' '..............................................................................
1b790                 | ' 
1b790                 | ' {{
1b790                 | ' }}
1b790                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1b790                 | _psram_spin2_write
1b790                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1b790                 | '     if drivercog == -1 ' driver must be running
1b790     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b794     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1b798     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b79c     FF FF 7F FF 
1b7a0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1b7a4                 | '         return ERR_INACTIVE
1b7a4     0F FA 65 A6 |  if_e	neg	result1, #15
1b7a8     7C 00 90 AD |  if_e	jmp	#LR__2221
1b7ac                 | '     if count == 0 ' don't even bother writing
1b7ac     00 16 0E F2 | 	cmp	arg03, #0 wz
1b7b0                 | '         return 0
1b7b0     00 FA 05 A6 |  if_e	mov	result1, #0
1b7b4     70 00 90 AD |  if_e	jmp	#LR__2221
1b7b8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1b7b8     00 FA 05 F6 | 	mov	result1, #0
1b7bc     01 FA 61 FD | 	cogid	result1
1b7c0     FD 00 02 F6 | 	mov	_var01, result1
1b7c4     01 00 66 F0 | 	shl	_var01, #1
1b7c8     FD 00 02 F1 | 	add	_var01, result1
1b7cc     02 00 66 F0 | 	shl	_var01, #2
1b7d0     FF 03 00 FF 
1b7d4     00 03 06 F6 | 	mov	_var02, ##524032
1b7d8     00 03 02 F1 | 	add	_var02, _var01
1b7dc                 | '     if long[mailbox] < 0
1b7dc     01 01 02 FB | 	rdlong	_var01, _var02
1b7e0     00 00 56 F2 | 	cmps	_var01, #0 wc
1b7e4                 | '         return ERR_MAILBOX_BUSY
1b7e4     1C FA 65 C6 |  if_b	neg	result1, #28
1b7e8     3C 00 90 CD |  if_b	jmp	#LR__2221
1b7ec                 | '     long[mailbox][2] := count
1b7ec     08 02 06 F1 | 	add	_var02, #8
1b7f0     01 17 62 FC | 	wrlong	arg03, _var02
1b7f4                 | '     long[mailbox][1] := srcHubAddr
1b7f4     04 02 86 F1 | 	sub	_var02, #4
1b7f8     01 13 62 FC | 	wrlong	arg01, _var02
1b7fc     04 02 86 F1 | 	sub	_var02, #4
1b800                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1b800     0A 05 02 F6 | 	mov	_var03, arg02
1b804     D9 04 06 F4 | 	bitl	_var03, #217
1b808     00 00 78 FF 
1b80c     00 00 06 F6 | 	mov	_var01, ##-268435456
1b810     02 01 02 F1 | 	add	_var01, _var03
1b814     01 01 62 FC | 	wrlong	_var01, _var02
1b818                 | '     repeat
1b818                 | LR__2220
1b818                 | '         result := long[mailbox]    
1b818     01 05 02 FB | 	rdlong	_var03, _var02
1b81c     00 04 56 F2 | 	cmps	_var03, #0 wc
1b820     F4 FF 9F CD |  if_b	jmp	#LR__2220
1b824                 | '     while result < 0   
1b824                 | '     return -result                       'return success or error
1b824     02 FB 61 F6 | 	neg	result1, _var03
1b828                 | LR__2221
1b828                 | _psram_spin2_write_ret
1b828     2D 00 64 FD | 	ret
1b82c                 | 
1b82c                 | ' 
1b82c                 | ' ' generalized fill
1b82c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1b82c                 | _psram_spin2_fill
1b82c     09 01 02 F6 | 	mov	_var01, arg01
1b830     0A 03 02 F6 | 	mov	_var02, arg02
1b834     0B 05 02 F6 | 	mov	_var03, arg03
1b838     0D 07 02 F6 | 	mov	_var04, arg05
1b83c                 | '     case datasize 
1b83c     01 06 86 F1 | 	sub	_var04, #1
1b840     04 06 26 F3 | 	fle	_var04, #4
1b844     30 06 62 FD | 	jmprel	_var04
1b848                 | LR__2230
1b848     10 00 90 FD | 	jmp	#LR__2231
1b84c     18 00 90 FD | 	jmp	#LR__2232
1b850     2C 00 90 FD | 	jmp	#LR__2234
1b854     1C 00 90 FD | 	jmp	#LR__2233
1b858     24 00 90 FD | 	jmp	#LR__2234
1b85c                 | LR__2231
1b85c                 | '         1: req := driver.R_WRITEBYTE
1b85c     00 00 60 FF 
1b860     00 08 06 F6 | 	mov	_var05, ##-1073741824
1b864     20 00 90 FD | 	jmp	#LR__2235
1b868                 | LR__2232
1b868                 | '         2: req := driver.R_WRITEWORD
1b868     00 00 68 FF 
1b86c     00 08 06 F6 | 	mov	_var05, ##-805306368
1b870     14 00 90 FD | 	jmp	#LR__2235
1b874                 | LR__2233
1b874                 | '         4: req := driver.R_WRITELONG
1b874     00 00 70 FF 
1b878     00 08 06 F6 | 	mov	_var05, ##-536870912
1b87c     08 00 90 FD | 	jmp	#LR__2235
1b880                 | LR__2234
1b880                 | '         other : return ERR_INVALID
1b880     06 FA 65 F6 | 	neg	result1, #6
1b884     94 00 90 FD | 	jmp	#LR__2237
1b888                 | LR__2235
1b888                 | '     if count == 0   ' nothing to do
1b888     00 04 0E F2 | 	cmp	_var03, #0 wz
1b88c                 | '         return 0
1b88c     00 FA 05 A6 |  if_e	mov	result1, #0
1b890     88 00 90 AD |  if_e	jmp	#LR__2237
1b894                 | '     if drivercog == -1
1b894     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b898     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1b89c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b8a0     FF FF 7F FF 
1b8a4     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1b8a8                 | '         return ERR_INACTIVE
1b8a8     0F FA 65 A6 |  if_e	neg	result1, #15
1b8ac     6C 00 90 AD |  if_e	jmp	#LR__2237
1b8b0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1b8b0     00 FA 05 F6 | 	mov	result1, #0
1b8b4     01 FA 61 FD | 	cogid	result1
1b8b8     FD 06 02 F6 | 	mov	_var04, result1
1b8bc     01 06 66 F0 | 	shl	_var04, #1
1b8c0     FD 06 02 F1 | 	add	_var04, result1
1b8c4     02 06 66 F0 | 	shl	_var04, #2
1b8c8     FF 03 00 FF 
1b8cc     00 0B 06 F6 | 	mov	_var06, ##524032
1b8d0     03 0B 02 F1 | 	add	_var06, _var04
1b8d4                 | '     if long[mailbox] < 0
1b8d4     05 07 02 FB | 	rdlong	_var04, _var06
1b8d8     00 06 56 F2 | 	cmps	_var04, #0 wc
1b8dc                 | '         return ERR_MAILBOX_BUSY
1b8dc     1C FA 65 C6 |  if_b	neg	result1, #28
1b8e0     38 00 90 CD |  if_b	jmp	#LR__2237
1b8e4                 | '     long[mailbox][2] := count
1b8e4     08 0A 06 F1 | 	add	_var06, #8
1b8e8     05 05 62 FC | 	wrlong	_var03, _var06
1b8ec                 | '     long[mailbox][1] := pattern
1b8ec     04 0A 86 F1 | 	sub	_var06, #4
1b8f0     05 03 62 FC | 	wrlong	_var02, _var06
1b8f4     04 0A 86 F1 | 	sub	_var06, #4
1b8f8                 | '     long[mailbox] := req + (addr & $1ffffff)
1b8f8     04 0D 02 F6 | 	mov	_var07, _var05
1b8fc     00 0F 02 F6 | 	mov	_var08, _var01
1b900     D9 0E 06 F4 | 	bitl	_var08, #217
1b904     07 0D 02 F1 | 	add	_var07, _var08
1b908     05 0D 62 FC | 	wrlong	_var07, _var06
1b90c                 | '     repeat
1b90c                 | LR__2236
1b90c                 | '         r := long[mailbox]
1b90c     05 0F 02 FB | 	rdlong	_var08, _var06
1b910     00 0E 56 F2 | 	cmps	_var08, #0 wc
1b914     F4 FF 9F CD |  if_b	jmp	#LR__2236
1b918                 | '     while r < 0
1b918                 | '     return -r                  ' return 0 for success or negated error code
1b918     07 FB 61 F6 | 	neg	result1, _var08
1b91c                 | LR__2237
1b91c                 | _psram_spin2_fill_ret
1b91c     2D 00 64 FD | 	ret
1b920                 | 
1b920                 | ' 
1b920                 | ' '..............................................................................
1b920                 | ' 
1b920                 | ' {{
1b920                 | ' }}
1b920                 | ' PUB setQos(cog, qos) : result | mailbox
1b920                 | _psram_spin2_setQos
1b920     09 01 02 F6 | 	mov	_var01, arg01
1b924                 | '     if drivercog == -1 ' driver must be running
1b924     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b928     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1b92c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b930     FF FF 7F FF 
1b934     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1b938                 | '         return ERR_INACTIVE
1b938     0F FA 65 A6 |  if_e	neg	result1, #15
1b93c     9C 00 90 AD |  if_e	jmp	#LR__2244
1b940                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1b940     00 00 56 F2 | 	cmps	_var01, #0 wc
1b944     08 00 90 CD |  if_b	jmp	#LR__2240
1b948     08 00 56 F2 | 	cmps	_var01, #8 wc
1b94c     08 00 90 CD |  if_b	jmp	#LR__2241
1b950                 | LR__2240
1b950                 | '         return ERR_INVALID
1b950     06 FA 65 F6 | 	neg	result1, #6
1b954     84 00 90 FD | 	jmp	#LR__2244
1b958                 | LR__2241
1b958                 | '     long[@qosData][cog] := qos & !$1ff
1b958     FF 15 26 F5 | 	andn	arg02, #511
1b95c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1b960     02 00 66 F0 | 	shl	_var01, #2
1b964     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1b968     00 15 62 FC | 	wrlong	arg02, _var01
1b96c                 | '     mailbox := $7FF00 + drivercog*12
1b96c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1b970     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1b974     02 07 02 F6 | 	mov	_var04, _var03
1b978     01 06 66 F0 | 	shl	_var04, #1
1b97c     02 07 02 F1 | 	add	_var04, _var03
1b980     02 06 66 F0 | 	shl	_var04, #2
1b984     FF 03 00 FF 
1b988     00 09 06 F6 | 	mov	_var05, ##524032
1b98c     03 09 02 F1 | 	add	_var05, _var04
1b990                 | '     repeat until LOCKTRY(driverlock)
1b990     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1b994                 | LR__2242
1b994     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b998     06 12 72 FD | 	locktry	arg01 wc
1b99c     F4 FF 9F 3D |  if_ae	jmp	#LR__2242
1b9a0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b9a4                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1b9a4     00 06 06 F6 | 	mov	_var04, #0
1b9a8     01 06 62 FD | 	cogid	_var04
1b9ac     00 00 78 FF 
1b9b0     00 02 06 F6 | 	mov	_var02, ##-268435456
1b9b4     03 03 02 F1 | 	add	_var02, _var04
1b9b8     04 03 62 FC | 	wrlong	_var02, _var05
1b9bc                 | '     repeat while long[mailbox] < 0
1b9bc                 | LR__2243
1b9bc     04 03 02 FB | 	rdlong	_var02, _var05
1b9c0     00 02 56 F2 | 	cmps	_var02, #0 wc
1b9c4     F4 FF 9F CD |  if_b	jmp	#LR__2243
1b9c8                 | '     LOCKREL(driverlock)
1b9c8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b9cc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b9d0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b9d4     07 12 72 FD | 	lockrel	arg01 wc
1b9d8     00 FA 05 F6 | 	mov	result1, #0
1b9dc                 | LR__2244
1b9dc                 | _psram_spin2_setQos_ret
1b9dc     2D 00 64 FD | 	ret
1b9e0                 | 
1b9e0                 | ' 
1b9e0                 | ' '..............................................................................
1b9e0                 | ' 
1b9e0                 | ' {{
1b9e0                 | ' }}
1b9e0                 | ' PRI lookupDelay(freq) : delay | profile
1b9e0                 | _psram_spin2_lookupDelay
1b9e0                 | '     profile := @delayTable
1b9e0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1b9e4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1b9e8                 | '     delay := long[profile][0]
1b9e8     00 03 02 FB | 	rdlong	_var02, _var01
1b9ec                 | '     repeat while long[profile][1] 
1b9ec     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1b9f0     97 16 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
1b9f4                 | LR__2250
1b9f4     04 00 06 F1 | 	add	_var01, #4
1b9f8     00 FB 09 FB | 	rdlong	result1, _var01 wz
1b9fc     04 00 86 F1 | 	sub	_var01, #4
1ba00     1C 00 90 AD |  if_e	jmp	#LR__2252
1ba04                 | '         if freq +< long[profile][1] 
1ba04     04 00 06 F1 | 	add	_var01, #4
1ba08     00 FB 01 FB | 	rdlong	result1, _var01
1ba0c     04 00 86 F1 | 	sub	_var01, #4
1ba10     FD 12 12 F2 | 	cmp	arg01, result1 wc
1ba14                 | '             quit
1ba14                 | '         profile += 4
1ba14     04 00 06 31 |  if_ae	add	_var01, #4
1ba18                 | '         delay++
1ba18     01 02 06 31 |  if_ae	add	_var02, #1
1ba1c     D4 FF 9F 3D |  if_ae	jmp	#LR__2250
1ba20                 | LR__2251
1ba20                 | LR__2252
1ba20     01 FB 01 F6 | 	mov	result1, _var02
1ba24                 | _psram_spin2_lookupDelay_ret
1ba24     2D 00 64 FD | 	ret
1ba28                 | 
1ba28                 | ' 
1ba28                 | ' PUB start() : r
1ba28                 | _usbnew_spin2_start
1ba28     00 00 06 F6 | 	mov	_var01, #0
1ba2c                 | '   ifnot driver_cog
1ba2c     15 00 00 FF 
1ba30     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1ba34     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1ba38     15 00 00 FF 
1ba3c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1ba40     38 00 90 5D |  if_ne	jmp	#LR__2260
1ba44                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1ba44     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1ba48     10 00 06 F6 | 	mov	_var01, #16
1ba4c     00 16 06 F6 | 	mov	arg03, #0
1ba50     28 16 62 FD | 	setq	arg03
1ba54     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1ba58     01 00 66 C6 |  if_b	neg	_var01, #1
1ba5c                 | '     if r >= 0
1ba5c     00 00 56 F2 | 	cmps	_var01, #0 wc
1ba60                 | '       driver_cog := r+1
1ba60     00 03 02 36 |  if_ae	mov	_var02, _var01
1ba64     01 02 06 31 |  if_ae	add	_var02, #1
1ba68     15 00 00 3F 
1ba6c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1ba70     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1ba74     15 00 00 3F 
1ba78     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1ba7c                 | LR__2260
1ba7c     00 FB 01 F6 | 	mov	result1, _var01
1ba80                 | _usbnew_spin2_start_ret
1ba80     2D 00 64 FD | 	ret
1ba84                 | 
1ba84                 | '     '' (Always enabled)
1ba84                 | ' 
1ba84                 | ' '' Get current pressed state of a keyboard key
1ba84                 | ' PUB keystate(key) : r | buf[2],tmp
1ba84                 | _usbnew_spin2_keystate
1ba84     00 04 06 F6 | 	mov	_var03, #0
1ba88                 | '   if key >= $E0 && key < $E8
1ba88     E0 12 56 F2 | 	cmps	arg01, #224 wc
1ba8c     34 00 90 CD |  if_b	jmp	#LR__2270
1ba90     E8 12 56 F2 | 	cmps	arg01, #232 wc
1ba94     2C 00 90 3D |  if_ae	jmp	#LR__2270
1ba98                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1ba98     00 FA 05 F6 | 	mov	result1, #0
1ba9c     13 00 00 FF 
1baa0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1baa4     09 07 02 F6 | 	mov	_var04, arg01
1baa8     E0 06 86 F1 | 	sub	_var04, #224
1baac     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1bab0     03 09 4A F0 | 	shr	_var05, _var04 wz
1bab4     13 00 00 FF 
1bab8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1babc     01 FA 65 56 |  if_ne	neg	result1, #1
1bac0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1bac4                 | LR__2270
1bac4                 | '   else
1bac4                 | '     '' Do this in inline ASM to ensure atomicity
1bac4                 | '     tmp := @hkbd_report
1bac4     13 00 00 FF 
1bac8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1bacc     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1bad0                 | '     org
1bad0     13 00 00 FF 
1bad4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1bad8     97 1E 48 FB | 	callpa	#(@LR__2272-@LR__2271)>>2,fcache_load_ptr_
1badc                 | LR__2271
1badc 000             | 	org	0
1badc 000 28 02 64 FD | 	setq	#1
1bae0 001 04 01 02 FB | 	rdlong	_var01, _var05
1bae4 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1bae8 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1baec 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1baf0 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1baf4 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1baf8 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bafc 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1bb00 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bb04 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1bb08 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bb0c 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1bb10 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bb14 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1bb18 00f             | LR__2272
1bb18                 | 	orgh
1bb18     02 FB 01 F6 | 	mov	result1, _var03
1bb1c                 | _usbnew_spin2_keystate_ret
1bb1c     2D 00 64 FD | 	ret
1bb20                 | 
1bb20                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1bb20                 | ' 
1bb20                 | ' '' Return key event from buffer if there is one
1bb20                 | ' PUB get_key() : r | tail
1bb20                 | _usbnew_spin2_get_key
1bb20                 | '   tail := keyq_tail
1bb20     0F 00 00 FF 
1bb24     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1bb28     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1bb2c                 | '   if keyq_head == tail
1bb2c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1bb30     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1bb34     0F 00 00 FF 
1bb38     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1bb3c     00 03 0A F2 | 	cmp	_var02, _var01 wz
1bb40                 | '     return 0 ' No event
1bb40     00 FA 05 A6 |  if_e	mov	result1, #0
1bb44     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1bb48                 | '   r := keyq_data[tail]
1bb48     00 03 02 F6 | 	mov	_var02, _var01
1bb4c     02 02 66 F0 | 	shl	_var02, #2
1bb50     0F 00 00 FF 
1bb54     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1bb58     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1bb5c     01 FB 01 FB | 	rdlong	result1, _var02
1bb60                 | '   if ++tail == KEYQUEUE_SIZE
1bb60     01 00 06 F1 | 	add	_var01, #1
1bb64     80 00 0E F2 | 	cmp	_var01, #128 wz
1bb68                 | '     tail := 0
1bb68     00 00 06 A6 |  if_e	mov	_var01, #0
1bb6c                 | '   keyq_tail := tail
1bb6c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1bb70     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1bb74     0F 00 00 FF 
1bb78     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1bb7c                 | _usbnew_spin2_get_key_ret
1bb7c     2D 00 64 FD | 	ret
1bb80                 | 
1bb80                 | ' 
1bb80                 | ' '' Emulate mouse movement
1bb80                 | ' PUB mouse_move(x,y)
1bb80                 | _usbnew_spin2_mouse_move
1bb80     02 4A 05 F6 | 	mov	COUNT_, #2
1bb84     A8 00 A0 FD | 	call	#pushregs_
1bb88     09 1F 02 F6 | 	mov	local01, arg01
1bb8c     0A 21 02 F6 | 	mov	local02, arg02
1bb90                 | '   mouse_lock := 1
1bb90     14 00 00 FF 
1bb94     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1bb98     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1bb9c     14 00 00 FF 
1bba0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1bba4                 | '   waitus(2) ' hope driver is now done
1bba4     02 12 06 F6 | 	mov	arg01, #2
1bba8     AC 0A B0 FD | 	call	#__system___waitus
1bbac                 | '   mouse_xacc := x
1bbac     14 00 00 FF 
1bbb0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1bbb4     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1bbb8                 | '   mouse_yacc := y
1bbb8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1bbbc     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1bbc0                 | '   if mouse_outptr
1bbc0     04 00 00 FF 
1bbc4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1bbc8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1bbcc     0F 00 00 FF 
1bbd0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1bbd4     24 00 90 AD |  if_e	jmp	#LR__2280
1bbd8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1bbd8     10 20 66 F0 | 	shl	local02, #16
1bbdc     0F 1F 32 F9 | 	getword	local01, local01, #0
1bbe0     0F 21 42 F5 | 	or	local02, local01
1bbe4     0F 00 00 FF 
1bbe8     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1bbec     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1bbf0     0F 00 00 FF 
1bbf4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1bbf8     0F 21 62 FC | 	wrlong	local02, local01
1bbfc                 | LR__2280
1bbfc                 | '   mouse_lock := 0
1bbfc     14 00 00 FF 
1bc00     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1bc04     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1bc08     14 00 00 FF 
1bc0c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1bc10     A7 F0 03 F6 | 	mov	ptra, fp
1bc14     B2 00 A0 FD | 	call	#popregs_
1bc18                 | _usbnew_spin2_mouse_move_ret
1bc18     2D 00 64 FD | 	ret
1bc1c                 | 
1bc1c                 | '     '' Set HAVE_HIDPAD to enable.
1bc1c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1bc1c                 | ' 
1bc1c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1bc1c                 | ' PUB hidpad_id(dev) : r
1bc1c                 | _usbnew_spin2_hidpad_id
1bc1c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1bc1c     13 00 00 FF 
1bc20     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1bc24     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1bc28     09 01 02 F6 | 	mov	_var01, arg01
1bc2c     03 00 66 F0 | 	shl	_var01, #3
1bc30     09 01 82 F1 | 	sub	_var01, arg01
1bc34     02 00 66 F0 | 	shl	_var01, #2
1bc38     00 FB 01 F1 | 	add	result1, _var01
1bc3c     FD FA 01 FB | 	rdlong	result1, result1
1bc40     13 00 00 FF 
1bc44     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1bc48                 | _usbnew_spin2_hidpad_id_ret
1bc48     2D 00 64 FD | 	ret
1bc4c                 | 
1bc4c                 | ' 
1bc4c                 | ' '' Get all button states for a device
1bc4c                 | ' PUB hidpad_buttons(dev) : r 
1bc4c                 | _usbnew_spin2_hidpad_buttons
1bc4c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1bc4c     13 00 00 FF 
1bc50     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1bc54     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1bc58     09 01 02 F6 | 	mov	_var01, arg01
1bc5c     03 00 66 F0 | 	shl	_var01, #3
1bc60     09 01 82 F1 | 	sub	_var01, arg01
1bc64     02 00 66 F0 | 	shl	_var01, #2
1bc68     00 FB 01 F1 | 	add	result1, _var01
1bc6c     14 FA 05 F1 | 	add	result1, #20
1bc70     FD FA 01 FB | 	rdlong	result1, result1
1bc74     13 00 00 FF 
1bc78     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1bc7c                 | _usbnew_spin2_hidpad_buttons_ret
1bc7c     2D 00 64 FD | 	ret
1bc80                 | 
1bc80                 | ' 
1bc80                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1bc80                 | ' PUB hidpad_axis(dev,axnum) : r
1bc80                 | _usbnew_spin2_hidpad_axis
1bc80                 | '   if axnum +>= 6
1bc80     06 14 16 F2 | 	cmp	arg02, #6 wc
1bc84                 | '     return 0
1bc84     00 FA 05 36 |  if_ae	mov	result1, #0
1bc88     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1bc8c                 | '   else 
1bc8c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1bc8c     13 00 00 FF 
1bc90     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1bc94     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1bc98     09 01 02 F6 | 	mov	_var01, arg01
1bc9c     03 00 66 F0 | 	shl	_var01, #3
1bca0     09 01 82 F1 | 	sub	_var01, arg01
1bca4     02 00 66 F0 | 	shl	_var01, #2
1bca8     00 FB 01 F1 | 	add	result1, _var01
1bcac     04 00 06 F6 | 	mov	_var01, #4
1bcb0     0A 01 02 F1 | 	add	_var01, arg02
1bcb4     01 00 66 F0 | 	shl	_var01, #1
1bcb8     FD 00 02 F1 | 	add	_var01, result1
1bcbc     00 FB E1 FA | 	rdword	result1, _var01
1bcc0     0F FA 65 F7 | 	signx	result1, #15
1bcc4     13 00 00 FF 
1bcc8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1bccc                 | _usbnew_spin2_hidpad_axis_ret
1bccc     2D 00 64 FD | 	ret
1bcd0                 | 
1bcd0                 | ' 
1bcd0                 | ' 
1bcd0                 | ' '--------------------------------------------------------------
1bcd0                 | ' '---------- Init the variables, start the cog. ----------------
1bcd0                 | ' '--------------------------------------------------------------
1bcd0                 | ' 
1bcd0                 | ' pub start(mbox,scope,cache) :cog,base | iii
1bcd0                 | _audio096_spin2_start
1bcd0     04 4A 05 F6 | 	mov	COUNT_, #4
1bcd4     A8 00 A0 FD | 	call	#pushregs_
1bcd8     09 1F 02 F6 | 	mov	local01, arg01
1bcdc                 | ' 
1bcdc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1bcdc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1bcdc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1bcdc                 | ' 
1bcdc                 | ' mailboxaddr:=mbox 
1bcdc     F2 1E 62 FC | 	wrlong	local01, objptr
1bce0                 | ' scope_ptr:=scope
1bce0     04 E4 05 F1 | 	add	objptr, #4
1bce4     F2 14 62 FC | 	wrlong	arg02, objptr
1bce8                 | ' cache_ptr:=cache
1bce8     04 E4 05 F1 | 	add	objptr, #4
1bcec     F2 16 62 FC | 	wrlong	arg03, objptr
1bcf0                 | ' base:=@channel1[0]
1bcf0     04 E4 05 F1 | 	add	objptr, #4
1bcf4     F2 20 02 F6 | 	mov	local02, objptr
1bcf8                 | ' 
1bcf8                 | ' repeat iii from 0 to 7
1bcf8     00 22 06 F6 | 	mov	local03, #0
1bcfc     02 00 00 FF 
1bd00     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1bd04     0C E4 85 F1 | 	sub	objptr, #12
1bd08     97 B0 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
1bd0c                 | LR__2290
1bd0c                 | '   long[base+64*iii]:=0
1bd0c     10 1F 02 F6 | 	mov	local01, local02
1bd10     11 FD 01 F6 | 	mov	result2, local03
1bd14     06 FC 65 F0 | 	shl	result2, #6
1bd18     FE 1E 02 F1 | 	add	local01, result2
1bd1c     0F 01 68 FC | 	wrlong	#0, local01
1bd20                 | '   long[base+64*iii+4]:=0
1bd20     10 1F 02 F6 | 	mov	local01, local02
1bd24     11 FD 01 F6 | 	mov	result2, local03
1bd28     06 FC 65 F0 | 	shl	result2, #6
1bd2c     FE 1E 02 F1 | 	add	local01, result2
1bd30     04 1E 06 F1 | 	add	local01, #4
1bd34     0F 01 68 FC | 	wrlong	#0, local01
1bd38                 | '   long[base+64*iii+12]:=0
1bd38     10 25 02 F6 | 	mov	local04, local02
1bd3c     11 1F 02 F6 | 	mov	local01, local03
1bd40     06 1E 66 F0 | 	shl	local01, #6
1bd44     0F 25 02 F1 | 	add	local04, local01
1bd48     0C 24 06 F1 | 	add	local04, #12
1bd4c     12 01 68 FC | 	wrlong	#0, local04
1bd50                 | '   long[base+64*iii+16]:=2 
1bd50     10 25 02 F6 | 	mov	local04, local02
1bd54     11 1F 02 F6 | 	mov	local01, local03
1bd58     06 1E 66 F0 | 	shl	local01, #6
1bd5c     0F 25 02 F1 | 	add	local04, local01
1bd60     10 24 06 F1 | 	add	local04, #16
1bd64     12 05 68 FC | 	wrlong	#2, local04
1bd68                 | '   word[base+64*iii+20]:=0
1bd68     10 25 02 F6 | 	mov	local04, local02
1bd6c     11 1F 02 F6 | 	mov	local01, local03
1bd70     06 1E 66 F0 | 	shl	local01, #6
1bd74     0F 25 02 F1 | 	add	local04, local01
1bd78     14 24 06 F1 | 	add	local04, #20
1bd7c     12 01 58 FC | 	wrword	#0, local04
1bd80                 | '   word[base+64*iii+22]:=8192
1bd80     10 25 02 F6 | 	mov	local04, local02
1bd84     11 1F 02 F6 | 	mov	local01, local03
1bd88     06 1E 66 F0 | 	shl	local01, #6
1bd8c     0F 25 02 F1 | 	add	local04, local01
1bd90     16 24 06 F1 | 	add	local04, #22
1bd94     10 00 80 FF 
1bd98     12 01 58 FC | 	wrword	##8192, local04
1bd9c                 | '   word[base+64*iii+24]:=4000+2*iii
1bd9c     11 25 02 F6 | 	mov	local04, local03
1bda0     01 24 66 F0 | 	shl	local04, #1
1bda4     07 00 00 FF 
1bda8     A0 1F 06 F6 | 	mov	local01, ##4000
1bdac     12 1F 02 F1 | 	add	local01, local04
1bdb0     10 25 02 F6 | 	mov	local04, local02
1bdb4     11 FD 01 F6 | 	mov	result2, local03
1bdb8     06 FC 65 F0 | 	shl	result2, #6
1bdbc     FE 24 02 F1 | 	add	local04, result2
1bdc0     18 24 06 F1 | 	add	local04, #24
1bdc4     12 1F 52 FC | 	wrword	local01, local04
1bdc8                 | '   word[base+64*iii+26]:=2
1bdc8     10 25 02 F6 | 	mov	local04, local02
1bdcc     11 1F 02 F6 | 	mov	local01, local03
1bdd0     06 1E 66 F0 | 	shl	local01, #6
1bdd4     0F 25 02 F1 | 	add	local04, local01
1bdd8     1A 24 06 F1 | 	add	local04, #26
1bddc     12 05 58 FC | 	wrword	#2, local04
1bde0                 | '   long [base+64*iii+8]:=@null | $C0000000
1bde0     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1bde4     3E 1E 26 F4 | 	bith	local01, #62
1bde8     10 25 02 F6 | 	mov	local04, local02
1bdec     11 17 02 F6 | 	mov	arg03, local03
1bdf0     06 16 66 F0 | 	shl	arg03, #6
1bdf4     0B 25 02 F1 | 	add	local04, arg03
1bdf8     08 24 06 F1 | 	add	local04, #8
1bdfc     12 1F 62 FC | 	wrlong	local01, local04
1be00                 | '   long[base+64*iii+32]:=0
1be00     10 25 02 F6 | 	mov	local04, local02
1be04     11 1F 02 F6 | 	mov	local01, local03
1be08     06 1E 66 F0 | 	shl	local01, #6
1be0c     0F 25 02 F1 | 	add	local04, local01
1be10     20 24 06 F1 | 	add	local04, #32
1be14     12 01 68 FC | 	wrlong	#0, local04
1be18                 | '   long[base+64*iii+36]:=0
1be18     10 25 02 F6 | 	mov	local04, local02
1be1c     11 1F 02 F6 | 	mov	local01, local03
1be20     06 1E 66 F0 | 	shl	local01, #6
1be24     0F 25 02 F1 | 	add	local04, local01
1be28     24 24 06 F1 | 	add	local04, #36
1be2c     12 01 68 FC | 	wrlong	#0, local04
1be30                 | '   long[base+64*iii+40]:=0
1be30     10 25 02 F6 | 	mov	local04, local02
1be34     11 1F 02 F6 | 	mov	local01, local03
1be38     06 1E 66 F0 | 	shl	local01, #6
1be3c     0F 25 02 F1 | 	add	local04, local01
1be40     28 24 06 F1 | 	add	local04, #40
1be44     12 01 68 FC | 	wrlong	#0, local04
1be48                 | '   long[base+64*iii+44]:=0
1be48     10 25 02 F6 | 	mov	local04, local02
1be4c     11 1F 02 F6 | 	mov	local01, local03
1be50     06 1E 66 F0 | 	shl	local01, #6
1be54     0F 25 02 F1 | 	add	local04, local01
1be58     2C 24 06 F1 | 	add	local04, #44
1be5c     12 01 68 FC | 	wrlong	#0, local04
1be60     01 22 06 F1 | 	add	local03, #1
1be64     08 22 56 F2 | 	cmps	local03, #8 wc
1be68     A0 FE 9F CD |  if_b	jmp	#LR__2290
1be6c                 | LR__2291
1be6c     02 00 00 FF 
1be70     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1be74                 | '   
1be74                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1be74     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1be78     F2 16 02 F6 | 	mov	arg03, objptr
1be7c     10 24 06 F6 | 	mov	local04, #16
1be80     28 16 62 FD | 	setq	arg03
1be84     0A 25 F2 FC | 	coginit	local04, arg02 wc
1be88     01 24 66 C6 |  if_b	neg	local04, #1
1be8c                 | ' waitms(100)
1be8c     64 12 06 F6 | 	mov	arg01, #100
1be90     58 07 B0 FD | 	call	#__system___waitms
1be94                 | ' return cog,base
1be94     10 FD 01 F6 | 	mov	result2, local02
1be98     12 FB 01 F6 | 	mov	result1, local04
1be9c     A7 F0 03 F6 | 	mov	ptra, fp
1bea0     B2 00 A0 FD | 	call	#popregs_
1bea4                 | _audio096_spin2_start_ret
1bea4     2D 00 64 FD | 	ret
1bea8                 | 
1bea8                 | ' 
1bea8                 | ' ' a simple play procedure to not poke everything. 
1bea8                 | ' 
1bea8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1bea8                 | _audio096_spin2_play
1bea8     0C E4 05 F1 | 	add	objptr, #12
1beac     F2 00 02 F6 | 	mov	_var01, objptr
1beb0     06 12 66 F0 | 	shl	arg01, #6
1beb4     09 01 02 F1 | 	add	_var01, arg01
1beb8     00 13 02 F6 | 	mov	arg01, _var01
1bebc     0C 12 06 F1 | 	add	arg01, #12
1bec0     09 1B 62 FC | 	wrlong	arg05, arg01
1bec4     00 1C 56 F2 | 	cmps	arg06, #0 wc
1bec8     00 13 02 36 |  if_ae	mov	arg01, _var01
1becc     10 12 06 31 |  if_ae	add	arg01, #16
1bed0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1bed4     02 1A 06 C1 |  if_b	add	arg05, #2
1bed8     00 13 02 C6 |  if_b	mov	arg01, _var01
1bedc     10 12 06 C1 |  if_b	add	arg01, #16
1bee0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1bee4     0B 13 52 F6 | 	abs	arg01, arg03 wc
1bee8     0B 0A 80 FF 
1beec     09 6D 18 FD | 	qdiv	##1316406, arg01
1bef0                 | ' 
1bef0                 | ' base2:=@channel1[0]+64*channel
1bef0                 | ' 
1bef0                 | ' 
1bef0                 | ' long[base2+12]:= len
1bef0                 | ' if loop >=0 
1bef0                 | '   long[base2+16]:= loop
1bef0     0C E4 85 F1 | 	sub	objptr, #12
1bef4                 | ' else
1bef4                 | '   long[base2+16]:= len+2
1bef4                 | ' word[base2+20]:=vol
1bef4     00 13 02 F6 | 	mov	arg01, _var01
1bef8     14 12 06 F1 | 	add	arg01, #20
1befc     09 19 52 FC | 	wrword	arg04, arg01
1bf00                 | ' word[base2+24]:= 1316406/splfreq 
1bf00     00 19 02 F6 | 	mov	arg04, _var01
1bf04     18 18 06 F1 | 	add	arg04, #24
1bf08                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1bf08                 | ' long[base2+28]:=$40000000
1bf08                 | ' long[base2+8]:=sample+$C0000000 
1bf08     00 00 60 FF 
1bf0c     00 14 06 F1 | 	add	arg02, ##-1073741824
1bf10     18 12 62 FD | 	getqx	arg01
1bf14     09 13 82 F6 | 	negc	arg01, arg01
1bf18     0C 13 52 FC | 	wrword	arg01, arg04
1bf1c     00 13 02 F6 | 	mov	arg01, _var01
1bf20     1A 12 06 F1 | 	add	arg01, #26
1bf24     09 01 5A FC | 	wrword	#256, arg01
1bf28     00 13 02 F6 | 	mov	arg01, _var01
1bf2c     1C 12 06 F1 | 	add	arg01, #28
1bf30     00 00 A0 FF 
1bf34     09 01 68 FC | 	wrlong	##1073741824, arg01
1bf38     08 00 06 F1 | 	add	_var01, #8
1bf3c     00 15 62 FC | 	wrlong	arg02, _var01
1bf40                 | _audio096_spin2_play_ret
1bf40     2D 00 64 FD | 	ret
1bf44                 | 
1bf44                 | ' 
1bf44                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1bf44                 | _audio096_spin2_play8
1bf44                 | ' 
1bf44                 | ' base2:=@channel1[0]+64*channel
1bf44     0C E4 05 F1 | 	add	objptr, #12
1bf48     F2 00 02 F6 | 	mov	_var01, objptr
1bf4c     06 12 66 F0 | 	shl	arg01, #6
1bf50     09 01 02 F1 | 	add	_var01, arg01
1bf54                 | ' long[base2]:=0
1bf54     00 01 68 FC | 	wrlong	#0, _var01
1bf58                 | ' long[base2+8]:=sample+$40000000 
1bf58     00 00 20 FF 
1bf5c     00 14 06 F1 | 	add	arg02, ##1073741824
1bf60     00 13 02 F6 | 	mov	arg01, _var01
1bf64     08 12 06 F1 | 	add	arg01, #8
1bf68     09 15 62 FC | 	wrlong	arg02, arg01
1bf6c                 | ' if loop>=0
1bf6c     00 1C 56 F2 | 	cmps	arg06, #0 wc
1bf70     0C E4 85 F1 | 	sub	objptr, #12
1bf74     1C 00 90 CD |  if_b	jmp	#LR__2300
1bf78                 | '   long[base2+12]:=loop
1bf78     00 15 02 F6 | 	mov	arg02, _var01
1bf7c     0C 14 06 F1 | 	add	arg02, #12
1bf80     0A 1D 62 FC | 	wrlong	arg06, arg02
1bf84                 | '   long[base2+16]:= len
1bf84     00 1D 02 F6 | 	mov	arg06, _var01
1bf88     10 1C 06 F1 | 	add	arg06, #16
1bf8c     0E 1B 62 FC | 	wrlong	arg05, arg06
1bf90     1C 00 90 FD | 	jmp	#LR__2301
1bf94                 | LR__2300
1bf94                 | ' else
1bf94                 | '   long[base2+12]:= len
1bf94     00 1D 02 F6 | 	mov	arg06, _var01
1bf98     0C 1C 06 F1 | 	add	arg06, #12
1bf9c     0E 1B 62 FC | 	wrlong	arg05, arg06
1bfa0                 | '   long[base2+16]:= len+1
1bfa0     01 1A 06 F1 | 	add	arg05, #1
1bfa4     00 13 02 F6 | 	mov	arg01, _var01
1bfa8     10 12 06 F1 | 	add	arg01, #16
1bfac     09 1B 62 FC | 	wrlong	arg05, arg01
1bfb0                 | LR__2301
1bfb0     0B 17 52 F6 | 	abs	arg03, arg03 wc
1bfb4     0B 0A 80 FF 
1bfb8     0B 6D 18 FD | 	qdiv	##1316406, arg03
1bfbc                 | ' word[base2+20]:=vol
1bfbc     00 17 02 F6 | 	mov	arg03, _var01
1bfc0     14 16 06 F1 | 	add	arg03, #20
1bfc4     0B 19 52 FC | 	wrword	arg04, arg03
1bfc8                 | ' word[base2+24]:= 1316406 /splfreq 
1bfc8     00 13 02 F6 | 	mov	arg01, _var01
1bfcc     18 12 06 F1 | 	add	arg01, #24
1bfd0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1bfd0                 | ' long[base2+28]:=$40000000
1bfd0     18 18 62 FD | 	getqx	arg04
1bfd4     0C 19 82 F6 | 	negc	arg04, arg04
1bfd8     09 19 52 FC | 	wrword	arg04, arg01
1bfdc     00 19 02 F6 | 	mov	arg04, _var01
1bfe0     1A 18 06 F1 | 	add	arg04, #26
1bfe4     0C 01 5A FC | 	wrword	#256, arg04
1bfe8     1C 00 06 F1 | 	add	_var01, #28
1bfec     00 00 A0 FF 
1bff0     00 01 68 FC | 	wrlong	##1073741824, _var01
1bff4                 | _audio096_spin2_play8_ret
1bff4     2D 00 64 FD | 	ret
1bff8                 | 
1bff8                 | ' 
1bff8                 | '     
1bff8                 | ' pub stop(channel) 'silence it
1bff8                 | _audio096_spin2_stop
1bff8                 | ' 
1bff8                 | ' word[@channel1[0]+64*channel+20]:=0
1bff8     0C E4 05 F1 | 	add	objptr, #12
1bffc     F2 00 02 F6 | 	mov	_var01, objptr
1c000     09 03 02 F6 | 	mov	_var02, arg01
1c004     06 02 66 F0 | 	shl	_var02, #6
1c008     01 01 02 F1 | 	add	_var01, _var02
1c00c     14 00 06 F1 | 	add	_var01, #20
1c010     00 01 58 FC | 	wrword	#0, _var01
1c014                 | ' word[@channel1[0]+64*channel+20]:=0
1c014     F2 00 02 F6 | 	mov	_var01, objptr
1c018     06 12 66 F0 | 	shl	arg01, #6
1c01c     09 01 02 F1 | 	add	_var01, arg01
1c020     14 00 06 F1 | 	add	_var01, #20
1c024     00 01 58 FC | 	wrword	#0, _var01
1c028     0C E4 85 F1 | 	sub	objptr, #12
1c02c                 | _audio096_spin2_stop_ret
1c02c     2D 00 64 FD | 	ret
1c030                 | hubexit
1c030     81 00 80 FD | 	jmp	#cogexit
1c034                 | 
1c034                 | __system___setbaud
1c034     14 64 06 FB | 	rdlong	muldiva_, #20
1c038     09 67 02 F6 | 	mov	muldivb_, arg01
1c03c     BA 00 A0 FD | 	call	#divide_
1c040     97 06 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1c044                 | LR__2310
1c044     3E FA 9D FA | 	rdpin	result1, #62 wc
1c048     FE FC A1 F1 | 	subx	result2, result2
1c04c     F4 FF 9F CD |  if_b	jmp	#LR__2310
1c050                 | LR__2311
1c050     40 7C 64 FD | 	dirl	#62
1c054     40 7E 64 FD | 	dirl	#63
1c058     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1c05c     10 66 66 F0 | 	shl	muldivb_, #16
1c060     07 14 06 F6 | 	mov	arg02, #7
1c064     33 15 02 F1 | 	add	arg02, muldivb_
1c068     3E F8 0C FC | 	wrpin	#124, #62
1c06c     3E 14 16 FC | 	wxpin	arg02, #62
1c070     3F 7C 0C FC | 	wrpin	#62, #63
1c074     14 14 06 F1 | 	add	arg02, #20
1c078     3F 14 16 FC | 	wxpin	arg02, #63
1c07c     41 7C 64 FD | 	dirh	#62
1c080     41 7E 64 FD | 	dirh	#63
1c084                 | __system___setbaud_ret
1c084     2D 00 64 FD | 	ret
1c088                 | 
1c088                 | __system___txraw
1c088     01 4A 05 F6 | 	mov	COUNT_, #1
1c08c     A8 00 A0 FD | 	call	#pushregs_
1c090     09 1F 02 F6 | 	mov	local01, arg01
1c094     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1c098                 | LR__2320
1c098     3E FA 9D FA | 	rdpin	result1, #62 wc
1c09c     FE FC A1 F1 | 	subx	result2, result2
1c0a0     F4 FF 9F CD |  if_b	jmp	#LR__2320
1c0a4                 | LR__2321
1c0a4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1c0a8     C2 01 00 AF 
1c0ac     00 12 06 A6 |  if_e	mov	arg01, ##230400
1c0b0     80 FF BF AD |  if_e	call	#__system___setbaud
1c0b4     58 7C 64 FD | 	drvl	#62
1c0b8     3E 1E 26 FC | 	wypin	local01, #62
1c0bc     01 FA 05 F6 | 	mov	result1, #1
1c0c0     A7 F0 03 F6 | 	mov	ptra, fp
1c0c4     B2 00 A0 FD | 	call	#popregs_
1c0c8                 | __system___txraw_ret
1c0c8     2D 00 64 FD | 	ret
1c0cc                 | 
1c0cc                 | __system___rxraw
1c0cc     0D 4A 05 F6 | 	mov	COUNT_, #13
1c0d0     A8 00 A0 FD | 	call	#pushregs_
1c0d4     09 1F 02 F6 | 	mov	local01, arg01
1c0d8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1c0dc     C2 01 00 AF 
1c0e0     00 12 06 A6 |  if_e	mov	arg01, ##230400
1c0e4     4C FF BF AD |  if_e	call	#__system___setbaud
1c0e8     00 1E 0E F2 | 	cmp	local01, #0 wz
1c0ec     20 00 90 AD |  if_e	jmp	#LR__2330
1c0f0     14 22 06 FB | 	rdlong	local03, #20
1c0f4     0A 22 46 F0 | 	shr	local03, #10
1c0f8     11 1F 02 FD | 	qmul	local01, local03
1c0fc     1A FA 61 FD | 	getct	result1
1c100     18 24 62 FD | 	getqx	local04
1c104     12 FB 01 F1 | 	add	result1, local04
1c108     FD 26 02 F6 | 	mov	local05, result1
1c10c     04 00 90 FD | 	jmp	#LR__2331
1c110                 | LR__2330
1c110     00 26 06 F6 | 	mov	local05, #0
1c114                 | LR__2331
1c114     01 28 66 F6 | 	neg	local06, #1
1c118     3F 2A 06 F6 | 	mov	local07, #63
1c11c     00 2C 06 F6 | 	mov	local08, #0
1c120     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1c124     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1c128     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1c12c                 | LR__2332
1c12c     08 2E 16 F4 | 	testb	local09, #8 wc
1c130     09 2E 76 F4 | 	testbn	local09, #9 andc
1c134     0A 2E 46 F0 | 	shr	local09, #10
1c138     01 2C 06 C6 |  if_b	mov	local08, #1
1c13c     40 7E 6C 3D |  if_ae	testp	#63 wz
1c140     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1c144     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1c148     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1c14c                 | LR__2333
1c14c     00 20 06 F6 | 	mov	local02, #0
1c150     00 2C 0E F2 | 	cmp	local08, #0 wz
1c154     01 20 66 56 |  if_ne	neg	local02, #1
1c158     00 30 06 F6 | 	mov	local10, #0
1c15c     00 22 06 F6 | 	mov	local03, #0
1c160     00 1E 0E F2 | 	cmp	local01, #0 wz
1c164     01 22 66 56 |  if_ne	neg	local03, #1
1c168     00 24 06 F6 | 	mov	local04, #0
1c16c     00 32 06 F6 | 	mov	local11, #0
1c170     1A FA 61 FD | 	getct	result1
1c174     FD 34 02 F6 | 	mov	local12, result1
1c178     1A 37 02 F6 | 	mov	local13, local12
1c17c     13 37 82 F1 | 	sub	local13, local05
1c180     00 36 56 F2 | 	cmps	local13, #0 wc
1c184     00 32 26 C6 |  if_b	not	local11, #0
1c188     00 32 0E F2 | 	cmp	local11, #0 wz
1c18c     00 24 26 56 |  if_ne	not	local04, #0
1c190     12 23 CA F7 | 	test	local03, local04 wz
1c194     00 30 26 56 |  if_ne	not	local10, #0
1c198     18 21 4A F5 | 	or	local02, local10 wz
1c19c     8C FF 9F AD |  if_e	jmp	#LR__2332
1c1a0     00 2C 0E F2 | 	cmp	local08, #0 wz
1c1a4     17 29 02 56 |  if_ne	mov	local06, local09
1c1a8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1c1ac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1c1b0     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1c1b4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1c1b8     14 FB 01 F6 | 	mov	result1, local06
1c1bc     A7 F0 03 F6 | 	mov	ptra, fp
1c1c0     B2 00 A0 FD | 	call	#popregs_
1c1c4                 | __system___rxraw_ret
1c1c4     2D 00 64 FD | 	ret
1c1c8                 | 
1c1c8                 | __system___getus
1c1c8     1A FC 71 FD | 	getct	result2 wc
1c1cc     1A 00 62 FD | 	getct	_var01
1c1d0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1c1d4     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1c1d8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c1dc     20 00 90 5D |  if_ne	jmp	#LR__2340
1c1e0     14 02 06 FB | 	rdlong	_var02, #20
1c1e4     A1 07 00 FF 
1c1e8     40 02 16 FD | 	qdiv	_var02, ##1000000
1c1ec     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1c1f0     18 FA 61 FD | 	getqx	result1
1c1f4     FD 02 02 F6 | 	mov	_var02, result1
1c1f8     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1c1fc     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c200                 | LR__2340
1c200     01 FD 11 FD | 	qdiv	result2, _var02
1c204     19 FC 61 FD | 	getqy	result2
1c208     28 FC 61 FD | 	setq	result2
1c20c     01 01 12 FD | 	qdiv	_var01, _var02
1c210     18 FA 61 FD | 	getqx	result1
1c214                 | __system___getus_ret
1c214     2D 00 64 FD | 	ret
1c218                 | 
1c218                 | __system____builtin_memmove
1c218     09 01 02 F6 | 	mov	_var01, arg01
1c21c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1c220     10 00 90 CD |  if_b	jmp	#LR__2350
1c224     0A 03 02 F6 | 	mov	_var02, arg02
1c228     0B 03 02 F1 | 	add	_var02, arg03
1c22c     01 13 52 F2 | 	cmps	arg01, _var02 wc
1c230     48 00 90 CD |  if_b	jmp	#LR__2356
1c234                 | LR__2350
1c234     0B 05 02 F6 | 	mov	_var03, arg03
1c238     02 04 4E F0 | 	shr	_var03, #2 wz
1c23c     18 00 90 AD |  if_e	jmp	#LR__2355
1c240     97 0A 48 FB | 	callpa	#(@LR__2353-@LR__2351)>>2,fcache_load_ptr_
1c244                 | LR__2351
1c244     02 09 D8 FC | 	rep	@LR__2354, _var03
1c248                 | LR__2352
1c248     0A 05 02 FB | 	rdlong	_var03, arg02
1c24c     09 05 62 FC | 	wrlong	_var03, arg01
1c250     04 12 06 F1 | 	add	arg01, #4
1c254     04 14 06 F1 | 	add	arg02, #4
1c258                 | LR__2353
1c258                 | LR__2354
1c258                 | LR__2355
1c258     02 16 CE F7 | 	test	arg03, #2 wz
1c25c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1c260     09 03 52 5C |  if_ne	wrword	_var02, arg01
1c264     02 12 06 51 |  if_ne	add	arg01, #2
1c268     02 14 06 51 |  if_ne	add	arg02, #2
1c26c     01 16 CE F7 | 	test	arg03, #1 wz
1c270     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1c274     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1c278     28 00 90 FD | 	jmp	#LR__2362
1c27c                 | LR__2356
1c27c     0B 13 02 F1 | 	add	arg01, arg03
1c280     0B 15 02 F1 | 	add	arg02, arg03
1c284     0B 07 0A F6 | 	mov	_var04, arg03 wz
1c288     18 00 90 AD |  if_e	jmp	#LR__2361
1c28c     97 0A 48 FB | 	callpa	#(@LR__2359-@LR__2357)>>2,fcache_load_ptr_
1c290                 | LR__2357
1c290     03 09 D8 FC | 	rep	@LR__2360, _var04
1c294                 | LR__2358
1c294     01 12 86 F1 | 	sub	arg01, #1
1c298     01 14 86 F1 | 	sub	arg02, #1
1c29c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1c2a0     09 03 42 FC | 	wrbyte	_var02, arg01
1c2a4                 | LR__2359
1c2a4                 | LR__2360
1c2a4                 | LR__2361
1c2a4                 | LR__2362
1c2a4     00 FB 01 F6 | 	mov	result1, _var01
1c2a8                 | __system____builtin_memmove_ret
1c2a8     2D 00 64 FD | 	ret
1c2ac                 | 
1c2ac                 | __system____builtin_strcpy
1c2ac     09 01 02 F6 | 	mov	_var01, arg01
1c2b0     97 0A 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
1c2b4                 | LR__2370
1c2b4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1c2b8     09 FB 41 FC | 	wrbyte	result1, arg01
1c2bc     01 14 06 F1 | 	add	arg02, #1
1c2c0     01 12 06 F1 | 	add	arg01, #1
1c2c4     EC FF 9F 5D |  if_ne	jmp	#LR__2370
1c2c8                 | LR__2371
1c2c8     00 FB 01 F6 | 	mov	result1, _var01
1c2cc                 | __system____builtin_strcpy_ret
1c2cc     2D 00 64 FD | 	ret
1c2d0                 | 
1c2d0                 | __system____topofstack
1c2d0     00 4A 05 F6 | 	mov	COUNT_, #0
1c2d4     A8 00 A0 FD | 	call	#pushregs_
1c2d8     08 F0 07 F1 | 	add	ptra, #8
1c2dc     04 4E 05 F1 | 	add	fp, #4
1c2e0     A7 12 62 FC | 	wrlong	arg01, fp
1c2e4     A7 FA 01 F6 | 	mov	result1, fp
1c2e8     04 4E 85 F1 | 	sub	fp, #4
1c2ec     A7 F0 03 F6 | 	mov	ptra, fp
1c2f0     B2 00 A0 FD | 	call	#popregs_
1c2f4                 | __system____topofstack_ret
1c2f4     2D 00 64 FD | 	ret
1c2f8                 | 
1c2f8                 | __system___lockmem
1c2f8     00 FA 05 F6 | 	mov	result1, #0
1c2fc     01 FA 61 FD | 	cogid	result1
1c300     00 FB 05 F1 | 	add	result1, #256
1c304                 | LR__2380
1c304     09 01 0A FB | 	rdlong	_var01, arg01 wz
1c308     09 FB 61 AC |  if_e	wrlong	result1, arg01
1c30c     09 01 02 AB |  if_e	rdlong	_var01, arg01
1c310     09 01 02 AB |  if_e	rdlong	_var01, arg01
1c314     FD 00 0A F2 | 	cmp	_var01, result1 wz
1c318     E8 FF 9F 5D |  if_ne	jmp	#LR__2380
1c31c                 | __system___lockmem_ret
1c31c     2D 00 64 FD | 	ret
1c320                 | 
1c320                 | __system___string_cmp
1c320     97 14 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1c324                 | LR__2390
1c324     09 01 C2 FA | 	rdbyte	_var01, arg01
1c328     0A 03 C2 FA | 	rdbyte	_var02, arg02
1c32c     00 05 02 F6 | 	mov	_var03, _var01
1c330     01 05 8A F1 | 	sub	_var03, _var02 wz
1c334     01 12 06 F1 | 	add	arg01, #1
1c338     01 14 06 F1 | 	add	arg02, #1
1c33c     0C 00 90 5D |  if_ne	jmp	#LR__2392
1c340     00 00 0E F2 | 	cmp	_var01, #0 wz
1c344     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1c348     D8 FF 9F 5D |  if_ne	jmp	#LR__2390
1c34c                 | LR__2391
1c34c                 | LR__2392
1c34c     02 FB 01 F6 | 	mov	result1, _var03
1c350                 | __system___string_cmp_ret
1c350     2D 00 64 FD | 	ret
1c354                 | 
1c354                 | __system___string_concat
1c354     05 4A 05 F6 | 	mov	COUNT_, #5
1c358     A8 00 A0 FD | 	call	#pushregs_
1c35c     09 1F 02 F6 | 	mov	local01, arg01
1c360     0A 21 02 F6 | 	mov	local02, arg02
1c364     0F 13 02 F6 | 	mov	arg01, local01
1c368     09 23 02 F6 | 	mov	local03, arg01
1c36c     97 06 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1c370                 | LR__2400
1c370     11 FB C9 FA | 	rdbyte	result1, local03 wz
1c374     01 22 06 51 |  if_ne	add	local03, #1
1c378     F4 FF 9F 5D |  if_ne	jmp	#LR__2400
1c37c                 | LR__2401
1c37c     09 23 82 F1 | 	sub	local03, arg01
1c380     11 25 02 F6 | 	mov	local04, local03
1c384     10 13 02 F6 | 	mov	arg01, local02
1c388     09 23 02 F6 | 	mov	local03, arg01
1c38c     97 06 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1c390                 | LR__2402
1c390     11 FB C9 FA | 	rdbyte	result1, local03 wz
1c394     01 22 06 51 |  if_ne	add	local03, #1
1c398     F4 FF 9F 5D |  if_ne	jmp	#LR__2402
1c39c                 | LR__2403
1c39c     09 23 82 F1 | 	sub	local03, arg01
1c3a0     12 13 02 F6 | 	mov	arg01, local04
1c3a4     11 13 02 F1 | 	add	arg01, local03
1c3a8     01 12 06 F1 | 	add	arg01, #1
1c3ac     90 3D B0 FD | 	call	#__system___gc_alloc_managed
1c3b0     FD 26 0A F6 | 	mov	local05, result1 wz
1c3b4     28 00 90 AD |  if_e	jmp	#LR__2404
1c3b8     13 13 02 F6 | 	mov	arg01, local05
1c3bc     0F 15 02 F6 | 	mov	arg02, local01
1c3c0     12 17 02 F6 | 	mov	arg03, local04
1c3c4     50 FE BF FD | 	call	#__system____builtin_memmove
1c3c8     13 13 02 F6 | 	mov	arg01, local05
1c3cc     12 13 02 F1 | 	add	arg01, local04
1c3d0     01 22 06 F1 | 	add	local03, #1
1c3d4     10 15 02 F6 | 	mov	arg02, local02
1c3d8     11 17 02 F6 | 	mov	arg03, local03
1c3dc     38 FE BF FD | 	call	#__system____builtin_memmove
1c3e0                 | LR__2404
1c3e0     13 FB 01 F6 | 	mov	result1, local05
1c3e4     A7 F0 03 F6 | 	mov	ptra, fp
1c3e8     B2 00 A0 FD | 	call	#popregs_
1c3ec                 | __system___string_concat_ret
1c3ec     2D 00 64 FD | 	ret
1c3f0                 | 
1c3f0                 | __system___tx
1c3f0     02 4A 05 F6 | 	mov	COUNT_, #2
1c3f4     A8 00 A0 FD | 	call	#pushregs_
1c3f8     09 1F 02 F6 | 	mov	local01, arg01
1c3fc     0A 1E 0E F2 | 	cmp	local01, #10 wz
1c400     18 00 90 5D |  if_ne	jmp	#LR__2410
1c404     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c408     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1c40c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c410     02 20 CE F7 | 	test	local02, #2 wz
1c414     0D 12 06 56 |  if_ne	mov	arg01, #13
1c418     6C FC BF 5D |  if_ne	call	#__system___txraw
1c41c                 | LR__2410
1c41c     0F 13 02 F6 | 	mov	arg01, local01
1c420     64 FC BF FD | 	call	#__system___txraw
1c424     A7 F0 03 F6 | 	mov	ptra, fp
1c428     B2 00 A0 FD | 	call	#popregs_
1c42c                 | __system___tx_ret
1c42c     2D 00 64 FD | 	ret
1c430                 | 
1c430                 | __system___rx
1c430     01 4A 05 F6 | 	mov	COUNT_, #1
1c434     A8 00 A0 FD | 	call	#pushregs_
1c438                 | LR__2420
1c438     00 12 06 F6 | 	mov	arg01, #0
1c43c     8C FC BF FD | 	call	#__system___rxraw
1c440     FD 1E 02 F6 | 	mov	local01, result1
1c444     FF FF 7F FF 
1c448     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1c44c     E8 FF 9F AD |  if_e	jmp	#LR__2420
1c450     0D 1E 0E F2 | 	cmp	local01, #13 wz
1c454     14 00 90 5D |  if_ne	jmp	#LR__2421
1c458     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c45c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1c460     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c464     02 FA CD F7 | 	test	result1, #2 wz
1c468     0A 1E 06 56 |  if_ne	mov	local01, #10
1c46c                 | LR__2421
1c46c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c470     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1c474     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c478     01 12 CE F7 | 	test	arg01, #1 wz
1c47c     1C 00 90 AD |  if_e	jmp	#LR__2424
1c480     7F 1E 0E F2 | 	cmp	local01, #127 wz
1c484     0C 00 90 5D |  if_ne	jmp	#LR__2422
1c488     08 12 06 F6 | 	mov	arg01, #8
1c48c     60 FF BF FD | 	call	#__system___tx
1c490     08 00 90 FD | 	jmp	#LR__2423
1c494                 | LR__2422
1c494     0F 13 02 F6 | 	mov	arg01, local01
1c498     54 FF BF FD | 	call	#__system___tx
1c49c                 | LR__2423
1c49c                 | LR__2424
1c49c     0F FB 01 F6 | 	mov	result1, local01
1c4a0     A7 F0 03 F6 | 	mov	ptra, fp
1c4a4     B2 00 A0 FD | 	call	#popregs_
1c4a8                 | __system___rx_ret
1c4a8     2D 00 64 FD | 	ret
1c4ac                 | 
1c4ac                 | __system___pinwrite
1c4ac     09 01 02 F6 | 	mov	_var01, arg01
1c4b0     1F 00 06 F5 | 	and	_var01, #31
1c4b4     20 12 CE F7 | 	test	arg01, #32 wz
1c4b8     06 12 46 F0 | 	shr	arg01, #6
1c4bc     09 13 CA F9 | 	bmask	arg01, arg01
1c4c0     00 13 62 F0 | 	shl	arg01, _var01
1c4c4     00 15 62 F0 | 	shl	arg02, _var01
1c4c8     1C 00 90 AD |  if_e	jmp	#LR__2430
1c4cc     09 F7 43 F5 | 	or	dirb, arg01
1c4d0     FD 01 02 F6 | 	mov	_var01, outb
1c4d4     09 01 22 F5 | 	andn	_var01, arg01
1c4d8     09 15 02 F5 | 	and	arg02, arg01
1c4dc     0A 01 42 F5 | 	or	_var01, arg02
1c4e0     00 FB 03 F6 | 	mov	outb, _var01
1c4e4     18 00 90 FD | 	jmp	#LR__2431
1c4e8                 | LR__2430
1c4e8     09 F5 43 F5 | 	or	dira, arg01
1c4ec     FC 01 02 F6 | 	mov	_var01, outa
1c4f0     09 01 22 F5 | 	andn	_var01, arg01
1c4f4     09 15 02 F5 | 	and	arg02, arg01
1c4f8     0A 01 42 F5 | 	or	_var01, arg02
1c4fc     00 F9 03 F6 | 	mov	outa, _var01
1c500                 | LR__2431
1c500                 | __system___pinwrite_ret
1c500     2D 00 64 FD | 	ret
1c504                 | 
1c504                 | __system___basic_read_line
1c504     06 4A 05 F6 | 	mov	COUNT_, #6
1c508     A8 00 A0 FD | 	call	#pushregs_
1c50c     09 1F 02 F6 | 	mov	local01, arg01
1c510     00 20 06 F6 | 	mov	local02, #0
1c514     18 22 06 F6 | 	mov	local03, #24
1c518     00 24 06 F6 | 	mov	local04, #0
1c51c     18 12 06 F6 | 	mov	arg01, #24
1c520     1C 3C B0 FD | 	call	#__system___gc_alloc_managed
1c524     FD 26 0A F6 | 	mov	local05, result1 wz
1c528     13 FB 01 A6 |  if_e	mov	result1, local05
1c52c     B0 00 90 AD |  if_e	jmp	#LR__2443
1c530                 | LR__2440
1c530     0F 13 02 F6 | 	mov	arg01, local01
1c534     88 0B B0 FD | 	call	#__system___basic_get_char
1c538     FD 28 02 F6 | 	mov	local06, result1
1c53c     01 28 56 F2 | 	cmps	local06, #1 wc
1c540     8C 00 90 CD |  if_b	jmp	#LR__2442
1c544     0A 28 0E F2 | 	cmp	local06, #10 wz
1c548     10 00 90 5D |  if_ne	jmp	#LR__2441
1c54c     00 24 0E F2 | 	cmp	local04, #0 wz
1c550     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1c554     01 20 86 11 |  if_a	sub	local02, #1
1c558     74 00 90 FD | 	jmp	#LR__2442
1c55c                 | LR__2441
1c55c     0D 28 0E F2 | 	cmp	local06, #13 wz
1c560     01 24 06 A6 |  if_e	mov	local04, #1
1c564     00 24 06 56 |  if_ne	mov	local04, #0
1c568     08 28 0E F2 | 	cmp	local06, #8 wz
1c56c     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1c570     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1c574     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1c578     B4 FF 9F AD |  if_e	jmp	#LR__2440
1c57c     13 17 02 F6 | 	mov	arg03, local05
1c580     10 17 02 F1 | 	add	arg03, local02
1c584     0B 29 42 FC | 	wrbyte	local06, arg03
1c588     01 20 06 F1 | 	add	local02, #1
1c58c     11 21 0A F2 | 	cmp	local02, local03 wz
1c590     9C FF 9F 5D |  if_ne	jmp	#LR__2440
1c594     11 13 02 F6 | 	mov	arg01, local03
1c598     20 12 06 F1 | 	add	arg01, #32
1c59c     A0 3B B0 FD | 	call	#__system___gc_alloc_managed
1c5a0     FD 28 0A F6 | 	mov	local06, result1 wz
1c5a4     14 FB 01 A6 |  if_e	mov	result1, local06
1c5a8     34 00 90 AD |  if_e	jmp	#LR__2443
1c5ac     14 13 02 F6 | 	mov	arg01, local06
1c5b0     13 15 02 F6 | 	mov	arg02, local05
1c5b4     11 17 02 F6 | 	mov	arg03, local03
1c5b8     5C FC BF FD | 	call	#__system____builtin_memmove
1c5bc     20 22 06 F1 | 	add	local03, #32
1c5c0     13 13 02 F6 | 	mov	arg01, local05
1c5c4     B4 3C B0 FD | 	call	#__system___gc_free
1c5c8     14 27 02 F6 | 	mov	local05, local06
1c5cc     60 FF 9F FD | 	jmp	#LR__2440
1c5d0                 | LR__2442
1c5d0     13 29 02 F6 | 	mov	local06, local05
1c5d4     10 29 02 F1 | 	add	local06, local02
1c5d8     14 01 48 FC | 	wrbyte	#0, local06
1c5dc     13 FB 01 F6 | 	mov	result1, local05
1c5e0                 | LR__2443
1c5e0     A7 F0 03 F6 | 	mov	ptra, fp
1c5e4     B2 00 A0 FD | 	call	#popregs_
1c5e8                 | __system___basic_read_line_ret
1c5e8     2D 00 64 FD | 	ret
1c5ec                 | 
1c5ec                 | __system___waitms
1c5ec     09 01 02 F6 | 	mov	_var01, arg01
1c5f0     1A 02 62 FD | 	getct	_var02
1c5f4     14 04 06 FB | 	rdlong	_var03, #20
1c5f8     97 14 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1c5fc                 | LR__2450
1c5fc     01 00 00 FF 
1c600     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1c604     1C 00 90 CD |  if_b	jmp	#LR__2452
1c608     02 03 02 F1 | 	add	_var02, _var03
1c60c     01 13 02 F6 | 	mov	arg01, _var02
1c610     00 12 66 FA | 	addct1	arg01, #0
1c614     24 22 60 FD | 	waitct1
1c618     01 00 00 FF 
1c61c     E8 01 86 F1 | 	sub	_var01, ##1000
1c620     D8 FF 9F FD | 	jmp	#LR__2450
1c624                 | LR__2451
1c624                 | LR__2452
1c624     01 00 56 F2 | 	cmps	_var01, #1 wc
1c628     28 00 90 CD |  if_b	jmp	#LR__2453
1c62c     02 01 02 FD | 	qmul	_var01, _var03
1c630     01 00 00 FF 
1c634     E8 17 06 F6 | 	mov	arg03, ##1000
1c638     19 FA 61 FD | 	getqy	result1
1c63c     18 12 62 FD | 	getqx	arg01
1c640     28 FA 61 FD | 	setq	result1
1c644     0B 13 12 FD | 	qdiv	arg01, arg03
1c648     18 12 62 FD | 	getqx	arg01
1c64c     01 13 62 FA | 	addct1	arg01, _var02
1c650     24 22 60 FD | 	waitct1
1c654                 | LR__2453
1c654                 | __system___waitms_ret
1c654     2D 00 64 FD | 	ret
1c658                 | 
1c658                 | __system___waitus
1c658     09 01 02 F6 | 	mov	_var01, arg01
1c65c     1A 02 62 FD | 	getct	_var02
1c660     14 04 06 FB | 	rdlong	_var03, #20
1c664     97 14 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1c668                 | LR__2460
1c668     A1 07 00 FF 
1c66c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1c670     1C 00 90 CD |  if_b	jmp	#LR__2462
1c674     02 03 02 F1 | 	add	_var02, _var03
1c678     01 13 02 F6 | 	mov	arg01, _var02
1c67c     00 12 66 FA | 	addct1	arg01, #0
1c680     24 22 60 FD | 	waitct1
1c684     A1 07 00 FF 
1c688     40 00 86 F1 | 	sub	_var01, ##1000000
1c68c     D8 FF 9F FD | 	jmp	#LR__2460
1c690                 | LR__2461
1c690                 | LR__2462
1c690     01 00 56 F2 | 	cmps	_var01, #1 wc
1c694     28 00 90 CD |  if_b	jmp	#LR__2463
1c698     02 01 02 FD | 	qmul	_var01, _var03
1c69c     A1 07 00 FF 
1c6a0     40 16 06 F6 | 	mov	arg03, ##1000000
1c6a4     19 FA 61 FD | 	getqy	result1
1c6a8     18 12 62 FD | 	getqx	arg01
1c6ac     28 FA 61 FD | 	setq	result1
1c6b0     0B 13 12 FD | 	qdiv	arg01, arg03
1c6b4     18 FA 61 FD | 	getqx	result1
1c6b8     FD 02 62 FA | 	addct1	_var02, result1
1c6bc     24 22 60 FD | 	waitct1
1c6c0                 | LR__2463
1c6c0                 | __system___waitus_ret
1c6c0     2D 00 64 FD | 	ret
1c6c4                 | 
1c6c4                 | __system___mount
1c6c4     0B 4A 05 F6 | 	mov	COUNT_, #11
1c6c8     A8 00 A0 FD | 	call	#pushregs_
1c6cc     09 1F 02 F6 | 	mov	local01, arg01
1c6d0     0A 21 0A F6 | 	mov	local02, arg02 wz
1c6d4     01 22 66 F6 | 	neg	local03, #1
1c6d8     01 FA 65 A6 |  if_e	neg	result1, #1
1c6dc     98 02 90 AD |  if_e	jmp	#LR__2485
1c6e0     0F FB C1 FA | 	rdbyte	result1, local01
1c6e4     2F FA 0D F2 | 	cmp	result1, #47 wz
1c6e8     28 00 90 5D |  if_ne	jmp	#LR__2472
1c6ec     0F 13 02 F6 | 	mov	arg01, local01
1c6f0     09 25 02 F6 | 	mov	local04, arg01
1c6f4     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1c6f8                 | LR__2470
1c6f8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1c6fc     01 24 06 51 |  if_ne	add	local04, #1
1c700     F4 FF 9F 5D |  if_ne	jmp	#LR__2470
1c704                 | LR__2471
1c704     09 25 82 F1 | 	sub	local04, arg01
1c708     12 FB 01 F6 | 	mov	result1, local04
1c70c     10 FA 55 F2 | 	cmps	result1, #16 wc
1c710     14 00 90 CD |  if_b	jmp	#LR__2473
1c714                 | LR__2472
1c714     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1c718     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1c71c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1c720     01 FA 65 F6 | 	neg	result1, #1
1c724     50 02 90 FD | 	jmp	#LR__2485
1c728                 | LR__2473
1c728     00 26 06 F6 | 	mov	local05, #0
1c72c                 | LR__2474
1c72c     04 26 56 F2 | 	cmps	local05, #4 wc
1c730     B0 00 90 3D |  if_ae	jmp	#LR__2479
1c734     13 13 02 F6 | 	mov	arg01, local05
1c738     02 12 66 F0 | 	shl	arg01, #2
1c73c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c740     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1c744     09 FB 09 FB | 	rdlong	result1, arg01 wz
1c748     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c74c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1c750     13 23 02 86 |  if_c_and_z	mov	local03, local05
1c754     84 00 90 8D |  if_c_and_z	jmp	#LR__2478
1c758     13 13 02 F6 | 	mov	arg01, local05
1c75c     02 12 66 F0 | 	shl	arg01, #2
1c760     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c764     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1c768     09 13 02 FB | 	rdlong	arg01, arg01
1c76c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c770     09 25 02 F6 | 	mov	local04, arg01
1c774     97 06 48 FB | 	callpa	#(@LR__2476-@LR__2475)>>2,fcache_load_ptr_
1c778                 | LR__2475
1c778     12 FB C9 FA | 	rdbyte	result1, local04 wz
1c77c     01 24 06 51 |  if_ne	add	local04, #1
1c780     F4 FF 9F 5D |  if_ne	jmp	#LR__2475
1c784                 | LR__2476
1c784     09 25 82 F1 | 	sub	local04, arg01
1c788     12 29 02 F6 | 	mov	local06, local04
1c78c     14 13 02 F6 | 	mov	arg01, local06
1c790     0F 13 02 F1 | 	add	arg01, local01
1c794     09 FB C1 FA | 	rdbyte	result1, arg01
1c798     2F FA 0D F2 | 	cmp	result1, #47 wz
1c79c     14 2B 02 56 |  if_ne	mov	local07, local06
1c7a0     0F 2B 02 51 |  if_ne	add	local07, local01
1c7a4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1c7a8     30 00 90 5D |  if_ne	jmp	#LR__2477
1c7ac     13 17 02 F6 | 	mov	arg03, local05
1c7b0     02 16 66 F0 | 	shl	arg03, #2
1c7b4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c7b8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1c7bc     0B 15 02 FB | 	rdlong	arg02, arg03
1c7c0     0F 13 02 F6 | 	mov	arg01, local01
1c7c4     14 17 02 F6 | 	mov	arg03, local06
1c7c8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c7cc     B4 4D B0 FD | 	call	#__system__strncmp
1c7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7d4     13 23 02 A6 |  if_e	mov	local03, local05
1c7d8     08 00 90 AD |  if_e	jmp	#LR__2479
1c7dc                 | LR__2477
1c7dc                 | LR__2478
1c7dc     01 26 06 F1 | 	add	local05, #1
1c7e0     48 FF 9F FD | 	jmp	#LR__2474
1c7e4                 | LR__2479
1c7e4     FF FF 7F FF 
1c7e8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1c7ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1c7f0     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1c7f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1c7f8     01 FA 65 A6 |  if_e	neg	result1, #1
1c7fc     78 01 90 AD |  if_e	jmp	#LR__2485
1c800     11 27 02 F6 | 	mov	local05, local03
1c804     13 2B 02 F6 | 	mov	local07, local05
1c808     02 2A 66 F0 | 	shl	local07, #2
1c80c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c810     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1c814     15 29 0A FB | 	rdlong	local06, local07 wz
1c818     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1c81c     58 00 90 AD |  if_e	jmp	#LR__2480
1c820     4C 28 06 F1 | 	add	local06, #76
1c824     14 2B 0A FB | 	rdlong	local07, local06 wz
1c828     4C 28 86 F1 | 	sub	local06, #76
1c82c     48 00 90 AD |  if_e	jmp	#LR__2480
1c830     4C 28 06 F1 | 	add	local06, #76
1c834     14 2B 02 FB | 	rdlong	local07, local06
1c838     15 23 02 F6 | 	mov	local03, local07
1c83c     13 2A 46 F7 | 	zerox	local07, #19
1c840     14 22 46 F0 | 	shr	local03, #20
1c844     02 22 66 F0 | 	shl	local03, #2
1c848     ED 22 02 F1 | 	add	local03, __methods__
1c84c     11 23 02 FB | 	rdlong	local03, local03
1c850     13 29 02 F6 | 	mov	local06, local05
1c854     02 28 66 F0 | 	shl	local06, #2
1c858     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c85c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1c860     14 13 02 FB | 	rdlong	arg01, local06
1c864     F2 28 02 F6 | 	mov	local06, objptr
1c868     15 E5 01 F6 | 	mov	objptr, local07
1c86c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c870     2D 22 62 FD | 	call	local03
1c874     14 E5 01 F6 | 	mov	objptr, local06
1c878                 | LR__2480
1c878     13 2D 02 F6 | 	mov	local08, local05
1c87c     02 2C 66 F0 | 	shl	local08, #2
1c880     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c884     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1c888     16 21 62 FC | 	wrlong	local02, local08
1c88c     00 20 0E F2 | 	cmp	local02, #0 wz
1c890     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1c894     18 00 90 5D |  if_ne	jmp	#LR__2481
1c898     02 26 66 F0 | 	shl	local05, #2
1c89c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c8a0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c8a4     13 01 68 FC | 	wrlong	#0, local05
1c8a8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c8ac     C4 00 90 FD | 	jmp	#LR__2484
1c8b0                 | LR__2481
1c8b0     13 2F 02 F6 | 	mov	local09, local05
1c8b4     04 2E 66 F0 | 	shl	local09, #4
1c8b8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1c8bc     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1c8c0     17 13 02 F6 | 	mov	arg01, local09
1c8c4     0F 15 02 F6 | 	mov	arg02, local01
1c8c8     10 16 06 F6 | 	mov	arg03, #16
1c8cc     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1c8d0     04 4C B0 FD | 	call	#__system__strncpy
1c8d4     48 20 06 F1 | 	add	local02, #72
1c8d8     10 2D 0A FB | 	rdlong	local08, local02 wz
1c8dc     48 20 86 F1 | 	sub	local02, #72
1c8e0     7C 00 90 AD |  if_e	jmp	#LR__2483
1c8e4     48 20 06 F1 | 	add	local02, #72
1c8e8     10 2D 02 FB | 	rdlong	local08, local02
1c8ec     16 31 02 F6 | 	mov	local10, local08
1c8f0     13 2C 46 F7 | 	zerox	local08, #19
1c8f4     14 30 46 F0 | 	shr	local10, #20
1c8f8     02 30 66 F0 | 	shl	local10, #2
1c8fc     ED 30 02 F1 | 	add	local10, __methods__
1c900     18 31 02 FB | 	rdlong	local10, local10
1c904     17 13 02 F6 | 	mov	arg01, local09
1c908     F2 32 02 F6 | 	mov	local11, objptr
1c90c     16 E5 01 F6 | 	mov	objptr, local08
1c910     2D 30 62 FD | 	call	local10
1c914     19 E5 01 F6 | 	mov	objptr, local11
1c918     FD 12 0A F6 | 	mov	arg01, result1 wz
1c91c     40 00 90 AD |  if_e	jmp	#LR__2482
1c920     13 2D 02 F6 | 	mov	local08, local05
1c924     02 2C 66 F0 | 	shl	local08, #2
1c928     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c92c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1c930     16 01 68 FC | 	wrlong	#0, local08
1c934     02 26 66 F0 | 	shl	local05, #2
1c938     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c93c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c940     13 01 68 FC | 	wrlong	#0, local05
1c944     09 13 6A F6 | 	neg	arg01, arg01 wz
1c948     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1c94c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1c950     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1c954     01 FA 65 56 |  if_ne	neg	result1, #1
1c958     00 FA 05 A6 |  if_e	mov	result1, #0
1c95c     18 00 90 FD | 	jmp	#LR__2485
1c960                 | LR__2482
1c960                 | LR__2483
1c960     02 26 66 F0 | 	shl	local05, #2
1c964     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c968     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c96c     13 2F 62 FC | 	wrlong	local09, local05
1c970     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c974                 | LR__2484
1c974     00 FA 05 F6 | 	mov	result1, #0
1c978                 | LR__2485
1c978     A7 F0 03 F6 | 	mov	ptra, fp
1c97c     B2 00 A0 FD | 	call	#popregs_
1c980                 | __system___mount_ret
1c980     2D 00 64 FD | 	ret
1c984                 | 
1c984                 | __system___chdir
1c984     00 4A 05 F6 | 	mov	COUNT_, #0
1c988     A8 00 A0 FD | 	call	#pushregs_
1c98c     40 F0 07 F1 | 	add	ptra, #64
1c990     04 4E 05 F1 | 	add	fp, #4
1c994     A7 12 62 FC | 	wrlong	arg01, fp
1c998     04 4E 05 F1 | 	add	fp, #4
1c99c     A7 14 02 F6 | 	mov	arg02, fp
1c9a0     08 4E 85 F1 | 	sub	fp, #8
1c9a4     10 48 B0 FD | 	call	#__system__stat
1c9a8     3C 4E 05 F1 | 	add	fp, #60
1c9ac     A7 FA 61 FC | 	wrlong	result1, fp
1c9b0     3C 4E 85 F1 | 	sub	fp, #60
1c9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c9b8     3C 4E 05 51 |  if_ne	add	fp, #60
1c9bc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1c9c0     3C 4E 85 51 |  if_ne	sub	fp, #60
1c9c4     BC 00 90 5D |  if_ne	jmp	#LR__2492
1c9c8     10 4E 05 F1 | 	add	fp, #16
1c9cc     A7 12 02 FB | 	rdlong	arg01, fp
1c9d0     10 4E 85 F1 | 	sub	fp, #16
1c9d4     78 00 00 FF 
1c9d8     00 12 06 F5 | 	and	arg01, ##61440
1c9dc     08 00 00 FF 
1c9e0     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1c9e4     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1c9e8     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1c9ec     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1c9f0     01 FA 65 56 |  if_ne	neg	result1, #1
1c9f4     8C 00 90 5D |  if_ne	jmp	#LR__2492
1c9f8     04 4E 05 F1 | 	add	fp, #4
1c9fc     A7 16 02 FB | 	rdlong	arg03, fp
1ca00     04 4E 85 F1 | 	sub	fp, #4
1ca04     0B 17 C2 FA | 	rdbyte	arg03, arg03
1ca08     2F 16 0E F2 | 	cmp	arg03, #47 wz
1ca0c     24 00 90 5D |  if_ne	jmp	#LR__2490
1ca10     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1ca14     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ca18     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ca1c     04 4E 05 F1 | 	add	fp, #4
1ca20     A7 14 02 FB | 	rdlong	arg02, fp
1ca24     04 4E 85 F1 | 	sub	fp, #4
1ca28     00 17 06 F6 | 	mov	arg03, #256
1ca2c     A8 4A B0 FD | 	call	#__system__strncpy
1ca30     4C 00 90 FD | 	jmp	#LR__2491
1ca34                 | LR__2490
1ca34     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1ca38     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ca3c     38 4E 05 F1 | 	add	fp, #56
1ca40     A7 12 62 FC | 	wrlong	arg01, fp
1ca44     38 4E 85 F1 | 	sub	fp, #56
1ca48     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1ca4c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1ca50     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ca54     00 17 06 F6 | 	mov	arg03, #256
1ca58     7C 4A B0 FD | 	call	#__system__strncpy
1ca5c     38 4E 05 F1 | 	add	fp, #56
1ca60     A7 12 02 FB | 	rdlong	arg01, fp
1ca64     34 4E 85 F1 | 	sub	fp, #52
1ca68     A7 14 02 FB | 	rdlong	arg02, fp
1ca6c     04 4E 85 F1 | 	sub	fp, #4
1ca70     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1ca74     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1ca78     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ca7c     10 00 B0 FD | 	call	#__system____getvfsforfile
1ca80                 | LR__2491
1ca80     00 FA 05 F6 | 	mov	result1, #0
1ca84                 | LR__2492
1ca84     A7 F0 03 F6 | 	mov	ptra, fp
1ca88     B2 00 A0 FD | 	call	#popregs_
1ca8c                 | __system___chdir_ret
1ca8c     2D 00 64 FD | 	ret
1ca90                 | 
1ca90                 | __system____getvfsforfile
1ca90     0E 4A 05 F6 | 	mov	COUNT_, #14
1ca94     A8 00 A0 FD | 	call	#pushregs_
1ca98     09 1F 02 F6 | 	mov	local01, arg01
1ca9c     0A 21 02 F6 | 	mov	local02, arg02
1caa0     0B 23 02 F6 | 	mov	local03, arg03
1caa4     97 10 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1caa8                 | LR__2500
1caa8     10 FB C1 FA | 	rdbyte	result1, local02
1caac     2F FA 0D F2 | 	cmp	result1, #47 wz
1cab0     01 20 06 A1 |  if_e	add	local02, #1
1cab4     10 25 C2 AA |  if_e	rdbyte	local04, local02
1cab8     01 20 86 A1 |  if_e	sub	local02, #1
1cabc     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1cac0     01 20 06 A1 |  if_e	add	local02, #1
1cac4     E0 FF 9F AD |  if_e	jmp	#LR__2500
1cac8                 | LR__2501
1cac8     10 25 C2 FA | 	rdbyte	local04, local02
1cacc     2F 24 0E F2 | 	cmp	local04, #47 wz
1cad0     14 00 90 5D |  if_ne	jmp	#LR__2502
1cad4     0F 13 02 F6 | 	mov	arg01, local01
1cad8     10 15 02 F6 | 	mov	arg02, local02
1cadc     00 17 06 F6 | 	mov	arg03, #256
1cae0     F4 49 B0 FD | 	call	#__system__strncpy
1cae4     7C 00 90 FD | 	jmp	#LR__2504
1cae8                 | LR__2502
1cae8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1caec     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1caf0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1caf4     0F 13 02 F6 | 	mov	arg01, local01
1caf8     00 17 06 F6 | 	mov	arg03, #256
1cafc     D8 49 B0 FD | 	call	#__system__strncpy
1cb00     10 25 CA FA | 	rdbyte	local04, local02 wz
1cb04     5C 00 90 AD |  if_e	jmp	#LR__2503
1cb08     10 25 C2 FA | 	rdbyte	local04, local02
1cb0c     2E 24 0E F2 | 	cmp	local04, #46 wz
1cb10     01 20 06 A1 |  if_e	add	local02, #1
1cb14     10 27 C2 AA |  if_e	rdbyte	local05, local02
1cb18     01 20 86 A1 |  if_e	sub	local02, #1
1cb1c     13 29 02 A6 |  if_e	mov	local06, local05
1cb20     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1cb24     3C 00 90 AD |  if_e	jmp	#LR__2503
1cb28     0F 27 C2 FA | 	rdbyte	local05, local01
1cb2c     2F 26 0E F2 | 	cmp	local05, #47 wz
1cb30     01 1E 06 A1 |  if_e	add	local01, #1
1cb34     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1cb38     01 1E 86 A1 |  if_e	sub	local01, #1
1cb3c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1cb40     5C 01 00 5F 
1cb44     A4 14 06 56 |  if_ne	mov	arg02, ##@LR__4560
1cb48     0F 13 02 56 |  if_ne	mov	arg01, local01
1cb4c     00 17 06 56 |  if_ne	mov	arg03, #256
1cb50     D0 49 B0 5D |  if_ne	call	#__system__strncat
1cb54     0F 13 02 F6 | 	mov	arg01, local01
1cb58     10 15 02 F6 | 	mov	arg02, local02
1cb5c     00 17 06 F6 | 	mov	arg03, #256
1cb60     C0 49 B0 FD | 	call	#__system__strncat
1cb64                 | LR__2503
1cb64                 | LR__2504
1cb64     0F 13 02 F6 | 	mov	arg01, local01
1cb68     78 4B B0 FD | 	call	#__system___normalizeName
1cb6c     0F 25 CA FA | 	rdbyte	local04, local01 wz
1cb70     1C 00 90 AD |  if_e	jmp	#LR__2505
1cb74     0F 25 C2 FA | 	rdbyte	local04, local01
1cb78     2F 24 0E F2 | 	cmp	local04, #47 wz
1cb7c     01 1E 06 A1 |  if_e	add	local01, #1
1cb80     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1cb84     01 1E 86 A1 |  if_e	sub	local01, #1
1cb88     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1cb8c     18 00 90 5D |  if_ne	jmp	#LR__2506
1cb90                 | LR__2505
1cb90     01 00 00 FF 
1cb94     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1cb98     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1cb9c     01 00 00 FF 
1cba0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1cba4     EC 01 90 FD | 	jmp	#LR__2520
1cba8                 | LR__2506
1cba8     00 2A 06 F6 | 	mov	local07, #0
1cbac                 | LR__2507
1cbac     04 2A 56 F2 | 	cmps	local07, #4 wc
1cbb0     CC 01 90 3D |  if_ae	jmp	#LR__2519
1cbb4     15 29 02 F6 | 	mov	local06, local07
1cbb8     02 28 66 F0 | 	shl	local06, #2
1cbbc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cbc0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1cbc4     14 29 0A FB | 	rdlong	local06, local06 wz
1cbc8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cbcc     A8 01 90 AD |  if_e	jmp	#LR__2518
1cbd0     15 25 02 F6 | 	mov	local04, local07
1cbd4     02 24 66 F0 | 	shl	local04, #2
1cbd8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cbdc     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1cbe0     12 13 02 FB | 	rdlong	arg01, local04
1cbe4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cbe8     09 2D 02 F6 | 	mov	local08, arg01
1cbec     97 06 48 FB | 	callpa	#(@LR__2509-@LR__2508)>>2,fcache_load_ptr_
1cbf0                 | LR__2508
1cbf0     16 FB C9 FA | 	rdbyte	result1, local08 wz
1cbf4     01 2C 06 51 |  if_ne	add	local08, #1
1cbf8     F4 FF 9F 5D |  if_ne	jmp	#LR__2508
1cbfc                 | LR__2509
1cbfc     09 2D 82 F1 | 	sub	local08, arg01
1cc00     16 2F 02 F6 | 	mov	local09, local08
1cc04     17 25 02 F6 | 	mov	local04, local09
1cc08     0F 25 02 F1 | 	add	local04, local01
1cc0c     12 29 C2 FA | 	rdbyte	local06, local04
1cc10     2F 28 0E F2 | 	cmp	local06, #47 wz
1cc14     17 31 02 56 |  if_ne	mov	local10, local09
1cc18     0F 31 02 51 |  if_ne	add	local10, local01
1cc1c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1cc20     54 01 90 5D |  if_ne	jmp	#LR__2517
1cc24     15 17 02 F6 | 	mov	arg03, local07
1cc28     02 16 66 F0 | 	shl	arg03, #2
1cc2c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cc30     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1cc34     0B 15 02 FB | 	rdlong	arg02, arg03
1cc38     17 17 02 F6 | 	mov	arg03, local09
1cc3c     0F 13 02 F6 | 	mov	arg01, local01
1cc40     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cc44     3C 49 B0 FD | 	call	#__system__strncmp
1cc48     00 FA 4D F2 | 	cmps	result1, #0 wz
1cc4c     28 01 90 5D |  if_ne	jmp	#LR__2517
1cc50     15 33 02 F6 | 	mov	local11, local07
1cc54     02 32 66 F0 | 	shl	local11, #2
1cc58     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1cc5c     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1cc60     19 35 02 FB | 	rdlong	local12, local11
1cc64     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1cc68     97 22 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1cc6c                 | LR__2510
1cc6c     17 29 02 F6 | 	mov	local06, local09
1cc70     01 28 06 F1 | 	add	local06, #1
1cc74     0F 29 02 F1 | 	add	local06, local01
1cc78     14 33 C2 FA | 	rdbyte	local11, local06
1cc7c     2E 32 0E F2 | 	cmp	local11, #46 wz
1cc80     2C 00 90 5D |  if_ne	jmp	#LR__2512
1cc84     17 33 02 F6 | 	mov	local11, local09
1cc88     02 32 06 F1 | 	add	local11, #2
1cc8c     0F 33 02 F1 | 	add	local11, local01
1cc90     19 31 C2 FA | 	rdbyte	local10, local11
1cc94     2F 30 0E F2 | 	cmp	local10, #47 wz
1cc98     17 37 02 56 |  if_ne	mov	local13, local09
1cc9c     02 36 06 51 |  if_ne	add	local13, #2
1cca0     0F 37 02 51 |  if_ne	add	local13, local01
1cca4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1cca8     01 2E 06 A1 |  if_e	add	local09, #1
1ccac     BC FF 9F AD |  if_e	jmp	#LR__2510
1ccb0                 | LR__2511
1ccb0                 | LR__2512
1ccb0     00 22 0E F2 | 	cmp	local03, #0 wz
1ccb4     11 13 02 56 |  if_ne	mov	arg01, local03
1ccb8     0F 15 02 56 |  if_ne	mov	arg02, local01
1ccbc     00 17 06 56 |  if_ne	mov	arg03, #256
1ccc0     14 48 B0 5D |  if_ne	call	#__system__strncpy
1ccc4     0F 15 02 F6 | 	mov	arg02, local01
1ccc8     17 15 02 F1 | 	add	arg02, local09
1cccc     01 14 06 F1 | 	add	arg02, #1
1ccd0     0F 13 02 F6 | 	mov	arg01, local01
1ccd4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1ccd8     0F 13 02 F6 | 	mov	arg01, local01
1ccdc     09 2D 02 F6 | 	mov	local08, arg01
1cce0     97 06 48 FB | 	callpa	#(@LR__2514-@LR__2513)>>2,fcache_load_ptr_
1cce4                 | LR__2513
1cce4     16 FB C9 FA | 	rdbyte	result1, local08 wz
1cce8     01 2C 06 51 |  if_ne	add	local08, #1
1ccec     F4 FF 9F 5D |  if_ne	jmp	#LR__2513
1ccf0                 | LR__2514
1ccf0     09 2D 82 F1 | 	sub	local08, arg01
1ccf4     16 2F 02 F6 | 	mov	local09, local08
1ccf8                 | LR__2515
1ccf8     01 2E 56 F2 | 	cmps	local09, #1 wc
1ccfc     70 00 90 CD |  if_b	jmp	#LR__2516
1cd00     17 25 02 F6 | 	mov	local04, local09
1cd04     0F 25 02 F1 | 	add	local04, local01
1cd08     12 33 C2 FA | 	rdbyte	local11, local04
1cd0c     2F 32 0E F2 | 	cmp	local11, #47 wz
1cd10     17 33 02 A6 |  if_e	mov	local11, local09
1cd14     0F 33 02 A1 |  if_e	add	local11, local01
1cd18     19 01 48 AC |  if_e	wrbyte	#0, local11
1cd1c     01 2E 86 A1 |  if_e	sub	local09, #1
1cd20     D4 FF 9F AD |  if_e	jmp	#LR__2515
1cd24     17 25 02 F6 | 	mov	local04, local09
1cd28     0F 25 02 F1 | 	add	local04, local01
1cd2c     12 33 C2 FA | 	rdbyte	local11, local04
1cd30     2E 32 0E F2 | 	cmp	local11, #46 wz
1cd34     38 00 90 5D |  if_ne	jmp	#LR__2516
1cd38     02 2E 56 F2 | 	cmps	local09, #2 wc
1cd3c     30 00 90 CD |  if_b	jmp	#LR__2516
1cd40     17 39 02 F6 | 	mov	local14, local09
1cd44     01 38 86 F1 | 	sub	local14, #1
1cd48     0F 39 02 F1 | 	add	local14, local01
1cd4c     1C 27 C2 FA | 	rdbyte	local05, local14
1cd50     2F 26 0E F2 | 	cmp	local05, #47 wz
1cd54     18 00 90 5D |  if_ne	jmp	#LR__2516
1cd58     17 25 02 F6 | 	mov	local04, local09
1cd5c     01 24 86 F1 | 	sub	local04, #1
1cd60     0F 25 02 F1 | 	add	local04, local01
1cd64     12 01 48 FC | 	wrbyte	#0, local04
1cd68     02 2E 86 F1 | 	sub	local09, #2
1cd6c     88 FF 9F FD | 	jmp	#LR__2515
1cd70                 | LR__2516
1cd70     1A FB 01 F6 | 	mov	result1, local12
1cd74     1C 00 90 FD | 	jmp	#LR__2520
1cd78                 | LR__2517
1cd78                 | LR__2518
1cd78     01 2A 06 F1 | 	add	local07, #1
1cd7c     2C FE 9F FD | 	jmp	#LR__2507
1cd80                 | LR__2519
1cd80     03 00 00 FF 
1cd84     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1cd88     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1cd8c     03 00 00 FF 
1cd90     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1cd94                 | LR__2520
1cd94     A7 F0 03 F6 | 	mov	ptra, fp
1cd98     B2 00 A0 FD | 	call	#popregs_
1cd9c                 | __system____getvfsforfile_ret
1cd9c     2D 00 64 FD | 	ret
1cda0                 | 
1cda0                 | __system___basic_open
1cda0     05 4A 05 F6 | 	mov	COUNT_, #5
1cda4     A8 00 A0 FD | 	call	#pushregs_
1cda8     0A 1F 02 F6 | 	mov	local01, arg02
1cdac     0B 21 02 F6 | 	mov	local02, arg03
1cdb0     0C 23 02 F6 | 	mov	local03, arg04
1cdb4     00 24 06 F6 | 	mov	local04, #0
1cdb8     F4 46 B0 FD | 	call	#__system____getftab
1cdbc     FD 26 0A F6 | 	mov	local05, result1 wz
1cdc0     18 00 90 5D |  if_ne	jmp	#LR__2530
1cdc4     EE 12 02 F6 | 	mov	arg01, abortchain
1cdc8     0C 14 06 F6 | 	mov	arg02, #12
1cdcc     01 16 06 F6 | 	mov	arg03, #1
1cdd0     DA 00 A0 FD | 	call	#__longjmp
1cdd4     01 FA 65 F6 | 	neg	result1, #1
1cdd8     10 01 90 FD | 	jmp	#LR__2539
1cddc                 | LR__2530
1cddc     08 26 06 F1 | 	add	local05, #8
1cde0     13 FB 09 FB | 	rdlong	result1, local05 wz
1cde4     08 26 86 F1 | 	sub	local05, #8
1cde8     13 13 02 56 |  if_ne	mov	arg01, local05
1cdec     50 3E B0 5D |  if_ne	call	#__system___closeraw
1cdf0     00 1E 0E F2 | 	cmp	local01, #0 wz
1cdf4     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1cdf8     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1cdfc     3C 00 90 AD |  if_e	jmp	#LR__2532
1ce00     0C 12 06 F6 | 	mov	arg01, #12
1ce04     38 33 B0 FD | 	call	#__system___gc_alloc_managed
1ce08     FD 24 0A F6 | 	mov	local04, result1 wz
1ce0c     18 00 90 5D |  if_ne	jmp	#LR__2531
1ce10     EE 12 02 F6 | 	mov	arg01, abortchain
1ce14     07 14 06 F6 | 	mov	arg02, #7
1ce18     01 16 06 F6 | 	mov	arg03, #1
1ce1c     DA 00 A0 FD | 	call	#__longjmp
1ce20     01 FA 65 F6 | 	neg	result1, #1
1ce24     C4 00 90 FD | 	jmp	#LR__2539
1ce28                 | LR__2531
1ce28     12 01 68 FC | 	wrlong	#0, local04
1ce2c     04 24 06 F1 | 	add	local04, #4
1ce30     12 01 68 FC | 	wrlong	#0, local04
1ce34     04 24 86 F1 | 	sub	local04, #4
1ce38     13 25 62 FC | 	wrlong	local04, local05
1ce3c                 | LR__2532
1ce3c     00 1E 0E F2 | 	cmp	local01, #0 wz
1ce40     1C 00 90 AD |  if_e	jmp	#LR__2533
1ce44     12 1F 62 FC | 	wrlong	local01, local04
1ce48     12 FB 01 F6 | 	mov	result1, local04
1ce4c     77 FA 25 F4 | 	bith	result1, #119
1ce50     1C 26 06 F1 | 	add	local05, #28
1ce54     13 FB 61 FC | 	wrlong	result1, local05
1ce58     1C 26 86 F1 | 	sub	local05, #28
1ce5c     0C 00 90 FD | 	jmp	#LR__2534
1ce60                 | LR__2533
1ce60     1C 26 06 F1 | 	add	local05, #28
1ce64     13 01 68 FC | 	wrlong	#0, local05
1ce68     1C 26 86 F1 | 	sub	local05, #28
1ce6c                 | LR__2534
1ce6c     00 20 0E F2 | 	cmp	local02, #0 wz
1ce70     28 00 90 AD |  if_e	jmp	#LR__2535
1ce74     04 24 06 F1 | 	add	local04, #4
1ce78     12 21 62 FC | 	wrlong	local02, local04
1ce7c     04 24 86 F1 | 	sub	local04, #4
1ce80     12 FB 01 F6 | 	mov	result1, local04
1ce84     00 C8 03 FF 
1ce88     00 FA 45 F5 | 	or	result1, ##126877696
1ce8c     20 26 06 F1 | 	add	local05, #32
1ce90     13 FB 61 FC | 	wrlong	result1, local05
1ce94     20 26 86 F1 | 	sub	local05, #32
1ce98     0C 00 90 FD | 	jmp	#LR__2536
1ce9c                 | LR__2535
1ce9c     20 26 06 F1 | 	add	local05, #32
1cea0     13 01 68 FC | 	wrlong	#0, local05
1cea4     20 26 86 F1 | 	sub	local05, #32
1cea8                 | LR__2536
1cea8     00 22 0E F2 | 	cmp	local03, #0 wz
1ceac     24 00 90 AD |  if_e	jmp	#LR__2537
1ceb0     08 24 06 F1 | 	add	local04, #8
1ceb4     12 23 62 FC | 	wrlong	local03, local04
1ceb8     08 24 86 F1 | 	sub	local04, #8
1cebc     00 D0 03 FF 
1cec0     00 24 46 F5 | 	or	local04, ##127926272
1cec4     24 26 06 F1 | 	add	local05, #36
1cec8     13 25 62 FC | 	wrlong	local04, local05
1cecc     24 26 86 F1 | 	sub	local05, #36
1ced0     0C 00 90 FD | 	jmp	#LR__2538
1ced4                 | LR__2537
1ced4     24 26 06 F1 | 	add	local05, #36
1ced8     13 01 68 FC | 	wrlong	#0, local05
1cedc     24 26 86 F1 | 	sub	local05, #36
1cee0                 | LR__2538
1cee0     08 26 06 F1 | 	add	local05, #8
1cee4     13 0F 68 FC | 	wrlong	#7, local05
1cee8     00 FA 05 F6 | 	mov	result1, #0
1ceec                 | LR__2539
1ceec     A7 F0 03 F6 | 	mov	ptra, fp
1cef0     B2 00 A0 FD | 	call	#popregs_
1cef4                 | __system___basic_open_ret
1cef4     2D 00 64 FD | 	ret
1cef8                 | 
1cef8                 | __system___basic_open_string
1cef8     04 4A 05 F6 | 	mov	COUNT_, #4
1cefc     A8 00 A0 FD | 	call	#pushregs_
1cf00     0A 1F 02 F6 | 	mov	local01, arg02
1cf04     0B 21 02 F6 | 	mov	local02, arg03
1cf08     A4 45 B0 FD | 	call	#__system____getftab
1cf0c     FD 22 0A F6 | 	mov	local03, result1 wz
1cf10     18 00 90 5D |  if_ne	jmp	#LR__2540
1cf14     EE 12 02 F6 | 	mov	arg01, abortchain
1cf18     0C 14 06 F6 | 	mov	arg02, #12
1cf1c     01 16 06 F6 | 	mov	arg03, #1
1cf20     DA 00 A0 FD | 	call	#__longjmp
1cf24     01 FA 65 F6 | 	neg	result1, #1
1cf28     58 00 90 FD | 	jmp	#LR__2542
1cf2c                 | LR__2540
1cf2c     08 22 06 F1 | 	add	local03, #8
1cf30     11 19 0A FB | 	rdlong	arg04, local03 wz
1cf34     08 22 86 F1 | 	sub	local03, #8
1cf38     11 13 02 56 |  if_ne	mov	arg01, local03
1cf3c     00 3D B0 5D |  if_ne	call	#__system___closeraw
1cf40     0F 15 02 F6 | 	mov	arg02, local01
1cf44     10 17 02 F6 | 	mov	arg03, local02
1cf48     11 13 02 F6 | 	mov	arg01, local03
1cf4c     B6 19 06 F6 | 	mov	arg04, #438
1cf50     E8 39 B0 FD | 	call	#__system___openraw
1cf54     FD 24 02 F6 | 	mov	local04, result1
1cf58     00 24 56 F2 | 	cmps	local04, #0 wc
1cf5c     20 00 90 3D |  if_ae	jmp	#LR__2541
1cf60     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1cf64     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1cf68     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1cf6c     EE 12 02 F6 | 	mov	arg01, abortchain
1cf70     01 16 06 F6 | 	mov	arg03, #1
1cf74     DA 00 A0 FD | 	call	#__longjmp
1cf78     01 FA 65 F6 | 	neg	result1, #1
1cf7c     04 00 90 FD | 	jmp	#LR__2542
1cf80                 | LR__2541
1cf80     12 FB 01 F6 | 	mov	result1, local04
1cf84                 | LR__2542
1cf84     A7 F0 03 F6 | 	mov	ptra, fp
1cf88     B2 00 A0 FD | 	call	#popregs_
1cf8c                 | __system___basic_open_string_ret
1cf8c     2D 00 64 FD | 	ret
1cf90                 | 
1cf90                 | __system___basic_print_nl
1cf90     0A 14 06 F6 | 	mov	arg02, #10
1cf94     00 16 06 F6 | 	mov	arg03, #0
1cf98     08 00 B0 FD | 	call	#__system___basic_print_char
1cf9c     01 FA 05 F6 | 	mov	result1, #1
1cfa0                 | __system___basic_print_nl_ret
1cfa0     2D 00 64 FD | 	ret
1cfa4                 | 
1cfa4                 | __system___basic_print_char
1cfa4     03 4A 05 F6 | 	mov	COUNT_, #3
1cfa8     A8 00 A0 FD | 	call	#pushregs_
1cfac     0A 1F 02 F6 | 	mov	local01, arg02
1cfb0     50 4C B0 FD | 	call	#__system___gettxfunc
1cfb4     FD 20 0A F6 | 	mov	local02, result1 wz
1cfb8     00 FA 05 A6 |  if_e	mov	result1, #0
1cfbc     30 00 90 AD |  if_e	jmp	#LR__2550
1cfc0     10 23 02 F6 | 	mov	local03, local02
1cfc4     13 20 46 F7 | 	zerox	local02, #19
1cfc8     14 22 46 F0 | 	shr	local03, #20
1cfcc     02 22 66 F0 | 	shl	local03, #2
1cfd0     ED 22 02 F1 | 	add	local03, __methods__
1cfd4     11 23 02 FB | 	rdlong	local03, local03
1cfd8     0F 13 02 F6 | 	mov	arg01, local01
1cfdc     F2 1E 02 F6 | 	mov	local01, objptr
1cfe0     10 E5 01 F6 | 	mov	objptr, local02
1cfe4     2D 22 62 FD | 	call	local03
1cfe8     0F E5 01 F6 | 	mov	objptr, local01
1cfec     01 FA 05 F6 | 	mov	result1, #1
1cff0                 | LR__2550
1cff0     A7 F0 03 F6 | 	mov	ptra, fp
1cff4     B2 00 A0 FD | 	call	#popregs_
1cff8                 | __system___basic_print_char_ret
1cff8     2D 00 64 FD | 	ret
1cffc                 | 
1cffc                 | __system___basic_print_string
1cffc     03 4A 05 F6 | 	mov	COUNT_, #3
1d000     A8 00 A0 FD | 	call	#pushregs_
1d004     0A 1F 02 F6 | 	mov	local01, arg02
1d008     0B 21 02 F6 | 	mov	local02, arg03
1d00c     F4 4B B0 FD | 	call	#__system___gettxfunc
1d010     FD 22 0A F6 | 	mov	local03, result1 wz
1d014     00 FA 05 A6 |  if_e	mov	result1, #0
1d018     18 00 90 AD |  if_e	jmp	#LR__2560
1d01c     00 1E 0E F2 | 	cmp	local01, #0 wz
1d020     00 FA 05 A6 |  if_e	mov	result1, #0
1d024     11 13 02 56 |  if_ne	mov	arg01, local03
1d028     10 15 02 56 |  if_ne	mov	arg02, local02
1d02c     0F 17 02 56 |  if_ne	mov	arg03, local01
1d030     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1d034                 | LR__2560
1d034     A7 F0 03 F6 | 	mov	ptra, fp
1d038     B2 00 A0 FD | 	call	#popregs_
1d03c                 | __system___basic_print_string_ret
1d03c     2D 00 64 FD | 	ret
1d040                 | 
1d040                 | __system___basic_print_integer
1d040     04 4A 05 F6 | 	mov	COUNT_, #4
1d044     A8 00 A0 FD | 	call	#pushregs_
1d048     0A 1F 02 F6 | 	mov	local01, arg02
1d04c     0B 21 02 F6 | 	mov	local02, arg03
1d050     0C 23 02 F6 | 	mov	local03, arg04
1d054     AC 4B B0 FD | 	call	#__system___gettxfunc
1d058     FD 24 0A F6 | 	mov	local04, result1 wz
1d05c     00 FA 05 A6 |  if_e	mov	result1, #0
1d060     12 13 02 56 |  if_ne	mov	arg01, local04
1d064     10 15 02 56 |  if_ne	mov	arg02, local02
1d068     0F 17 02 56 |  if_ne	mov	arg03, local01
1d06c     11 19 02 56 |  if_ne	mov	arg04, local03
1d070     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1d074     A7 F0 03 F6 | 	mov	ptra, fp
1d078     B2 00 A0 FD | 	call	#popregs_
1d07c                 | __system___basic_print_integer_ret
1d07c     2D 00 64 FD | 	ret
1d080                 | 
1d080                 | __system___basic_print_unsigned
1d080     03 4A 05 F6 | 	mov	COUNT_, #3
1d084     A8 00 A0 FD | 	call	#pushregs_
1d088     0A 1F 02 F6 | 	mov	local01, arg02
1d08c     0B 21 02 F6 | 	mov	local02, arg03
1d090     0C 23 02 F6 | 	mov	local03, arg04
1d094     6C 4B B0 FD | 	call	#__system___gettxfunc
1d098     FD 12 0A F6 | 	mov	arg01, result1 wz
1d09c     00 FA 05 A6 |  if_e	mov	result1, #0
1d0a0     3A 20 26 54 |  if_ne	bith	local02, #58
1d0a4     10 15 02 56 |  if_ne	mov	arg02, local02
1d0a8     0F 17 02 56 |  if_ne	mov	arg03, local01
1d0ac     11 19 02 56 |  if_ne	mov	arg04, local03
1d0b0     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1d0b4     A7 F0 03 F6 | 	mov	ptra, fp
1d0b8     B2 00 A0 FD | 	call	#popregs_
1d0bc                 | __system___basic_print_unsigned_ret
1d0bc     2D 00 64 FD | 	ret
1d0c0                 | 
1d0c0                 | __system___basic_get_char
1d0c0     03 4A 05 F6 | 	mov	COUNT_, #3
1d0c4     A8 00 A0 FD | 	call	#pushregs_
1d0c8     7C 4B B0 FD | 	call	#__system___getrxfunc
1d0cc     FD 1E 0A F6 | 	mov	local01, result1 wz
1d0d0     01 FA 65 A6 |  if_e	neg	result1, #1
1d0d4     28 00 90 AD |  if_e	jmp	#LR__2570
1d0d8     0F 21 02 F6 | 	mov	local02, local01
1d0dc     13 1E 46 F7 | 	zerox	local01, #19
1d0e0     14 20 46 F0 | 	shr	local02, #20
1d0e4     02 20 66 F0 | 	shl	local02, #2
1d0e8     ED 20 02 F1 | 	add	local02, __methods__
1d0ec     10 21 02 FB | 	rdlong	local02, local02
1d0f0     F2 22 02 F6 | 	mov	local03, objptr
1d0f4     0F E5 01 F6 | 	mov	objptr, local01
1d0f8     2D 20 62 FD | 	call	local02
1d0fc     11 E5 01 F6 | 	mov	objptr, local03
1d100                 | LR__2570
1d100     A7 F0 03 F6 | 	mov	ptra, fp
1d104     B2 00 A0 FD | 	call	#popregs_
1d108                 | __system___basic_get_char_ret
1d108     2D 00 64 FD | 	ret
1d10c                 | 
1d10c                 | __system___basic_get
1d10c     04 4A 05 F6 | 	mov	COUNT_, #4
1d110     A8 00 A0 FD | 	call	#pushregs_
1d114     0D 1F 02 F6 | 	mov	local01, arg05
1d118     0F 19 02 FD | 	qmul	arg04, local01
1d11c     09 21 02 F6 | 	mov	local02, arg01
1d120     0B 23 02 F6 | 	mov	local03, arg03
1d124     00 14 0E F2 | 	cmp	arg02, #0 wz
1d128     01 14 86 51 |  if_ne	sub	arg02, #1
1d12c     10 13 02 56 |  if_ne	mov	arg01, local02
1d130     00 16 06 56 |  if_ne	mov	arg03, #0
1d134     18 24 62 FD | 	getqx	local04
1d138     BC 41 B0 5D |  if_ne	call	#__system__lseek
1d13c     11 15 02 F6 | 	mov	arg02, local03
1d140     12 17 02 F6 | 	mov	arg03, local04
1d144     10 13 02 F6 | 	mov	arg01, local02
1d148     34 41 B0 FD | 	call	#__system__read
1d14c     FD 24 02 F6 | 	mov	local04, result1
1d150     01 24 56 F2 | 	cmps	local04, #1 wc
1d154     10 00 90 CD |  if_b	jmp	#LR__2580
1d158     12 65 02 F6 | 	mov	muldiva_, local04
1d15c     0F 67 02 F6 | 	mov	muldivb_, local01
1d160     BA 00 A0 FD | 	call	#divide_
1d164     33 25 02 F6 | 	mov	local04, muldivb_
1d168                 | LR__2580
1d168     12 FB 01 F6 | 	mov	result1, local04
1d16c     A7 F0 03 F6 | 	mov	ptra, fp
1d170     B2 00 A0 FD | 	call	#popregs_
1d174                 | __system___basic_get_ret
1d174     2D 00 64 FD | 	ret
1d178                 | 
1d178                 | __system____lockio
1d178     0C 4B B0 FD | 	call	#__system___getiolock_0474
1d17c     FD 12 02 F6 | 	mov	arg01, result1
1d180     74 F1 BF FD | 	call	#__system___lockmem
1d184     00 FA 05 F6 | 	mov	result1, #0
1d188                 | __system____lockio_ret
1d188     2D 00 64 FD | 	ret
1d18c                 | 
1d18c                 | __system____unlockio
1d18c     F8 4A B0 FD | 	call	#__system___getiolock_0474
1d190     FD 00 68 FC | 	wrlong	#0, result1
1d194     00 FA 05 F6 | 	mov	result1, #0
1d198                 | __system____unlockio_ret
1d198     2D 00 64 FD | 	ret
1d19c                 | 
1d19c                 | __system___fmtchar
1d19c     00 4A 05 F6 | 	mov	COUNT_, #0
1d1a0     A8 00 A0 FD | 	call	#pushregs_
1d1a4     10 F0 07 F1 | 	add	ptra, #16
1d1a8     04 4E 05 F1 | 	add	fp, #4
1d1ac     A7 12 62 FC | 	wrlong	arg01, fp
1d1b0     04 4E 05 F1 | 	add	fp, #4
1d1b4     A7 14 62 FC | 	wrlong	arg02, fp
1d1b8     04 4E 05 F1 | 	add	fp, #4
1d1bc     A7 16 62 FC | 	wrlong	arg03, fp
1d1c0     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1d1c4     A7 16 62 FC | 	wrlong	arg03, fp
1d1c8     08 4E 85 F1 | 	sub	fp, #8
1d1cc     A7 12 02 FB | 	rdlong	arg01, fp
1d1d0     04 4E 05 F1 | 	add	fp, #4
1d1d4     A7 14 02 FB | 	rdlong	arg02, fp
1d1d8     04 4E 05 F1 | 	add	fp, #4
1d1dc     A7 16 02 F6 | 	mov	arg03, fp
1d1e0     0C 4E 85 F1 | 	sub	fp, #12
1d1e4     0C 00 B0 FD | 	call	#__system___fmtstr
1d1e8     A7 F0 03 F6 | 	mov	ptra, fp
1d1ec     B2 00 A0 FD | 	call	#popregs_
1d1f0                 | __system___fmtchar_ret
1d1f0     2D 00 64 FD | 	ret
1d1f4                 | 
1d1f4                 | __system___fmtstr
1d1f4     09 4A 05 F6 | 	mov	COUNT_, #9
1d1f8     A8 00 A0 FD | 	call	#pushregs_
1d1fc     09 1F 02 F6 | 	mov	local01, arg01
1d200     0A 21 02 F6 | 	mov	local02, arg02
1d204     0B 23 02 F6 | 	mov	local03, arg03
1d208     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1d20c     11 13 02 F6 | 	mov	arg01, local03
1d210     09 25 02 F6 | 	mov	local04, arg01
1d214     97 06 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1d218                 | LR__2590
1d218     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d21c     01 24 06 51 |  if_ne	add	local04, #1
1d220     F4 FF 9F 5D |  if_ne	jmp	#LR__2590
1d224                 | LR__2591
1d224     09 25 82 F1 | 	sub	local04, arg01
1d228     00 18 0E F2 | 	cmp	arg04, #0 wz
1d22c     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1d230     10 15 02 F6 | 	mov	arg02, local02
1d234     12 17 02 F6 | 	mov	arg03, local04
1d238     0F 13 02 F6 | 	mov	arg01, local01
1d23c     02 18 06 F6 | 	mov	arg04, #2
1d240     60 46 B0 FD | 	call	#__system___fmtpad
1d244     FD 26 02 F6 | 	mov	local05, result1
1d248     00 26 56 F2 | 	cmps	local05, #0 wc
1d24c     13 FB 01 C6 |  if_b	mov	result1, local05
1d250     80 00 90 CD |  if_b	jmp	#LR__2594
1d254     01 24 56 F2 | 	cmps	local04, #1 wc
1d258     50 00 90 CD |  if_b	jmp	#LR__2593
1d25c     12 29 02 F6 | 	mov	local06, local04
1d260                 | LR__2592
1d260     0F 2B 02 F6 | 	mov	local07, local01
1d264     0F 2D 02 F6 | 	mov	local08, local01
1d268     13 2A 46 F7 | 	zerox	local07, #19
1d26c     14 2C 46 F0 | 	shr	local08, #20
1d270     02 2C 66 F0 | 	shl	local08, #2
1d274     ED 2C 02 F1 | 	add	local08, __methods__
1d278     16 2D 02 FB | 	rdlong	local08, local08
1d27c     11 13 C2 FA | 	rdbyte	arg01, local03
1d280     F2 2E 02 F6 | 	mov	local09, objptr
1d284     15 E5 01 F6 | 	mov	objptr, local07
1d288     01 22 06 F1 | 	add	local03, #1
1d28c     2D 2C 62 FD | 	call	local08
1d290     17 E5 01 F6 | 	mov	objptr, local09
1d294     FD 2E 02 F6 | 	mov	local09, result1
1d298     00 2E 56 F2 | 	cmps	local09, #0 wc
1d29c     17 FB 01 C6 |  if_b	mov	result1, local09
1d2a0     30 00 90 CD |  if_b	jmp	#LR__2594
1d2a4     17 27 02 F1 | 	add	local05, local09
1d2a8     ED 29 6E FB | 	djnz	local06, #LR__2592
1d2ac                 | LR__2593
1d2ac     10 15 02 F6 | 	mov	arg02, local02
1d2b0     12 17 02 F6 | 	mov	arg03, local04
1d2b4     0F 13 02 F6 | 	mov	arg01, local01
1d2b8     01 18 06 F6 | 	mov	arg04, #1
1d2bc     E4 45 B0 FD | 	call	#__system___fmtpad
1d2c0     FD 2E 02 F6 | 	mov	local09, result1
1d2c4     00 2E 56 F2 | 	cmps	local09, #0 wc
1d2c8     17 FB 01 C6 |  if_b	mov	result1, local09
1d2cc     17 27 02 31 |  if_ae	add	local05, local09
1d2d0     13 FB 01 36 |  if_ae	mov	result1, local05
1d2d4                 | LR__2594
1d2d4     A7 F0 03 F6 | 	mov	ptra, fp
1d2d8     B2 00 A0 FD | 	call	#popregs_
1d2dc                 | __system___fmtstr_ret
1d2dc     2D 00 64 FD | 	ret
1d2e0                 | 
1d2e0                 | __system___fmtnum
1d2e0     0B 4A 05 F6 | 	mov	COUNT_, #11
1d2e4     A8 00 A0 FD | 	call	#pushregs_
1d2e8     09 1F 02 F6 | 	mov	local01, arg01
1d2ec     0A 21 02 F6 | 	mov	local02, arg02
1d2f0     0B 23 02 F6 | 	mov	local03, arg03
1d2f4     0C 25 02 F6 | 	mov	local04, arg04
1d2f8     F8 27 02 F6 | 	mov	local05, ptra
1d2fc     13 29 02 F6 | 	mov	local06, local05
1d300     00 2A 06 F6 | 	mov	local07, #0
1d304     10 2D 02 F6 | 	mov	local08, local02
1d308     10 2C 46 F0 | 	shr	local08, #16
1d30c     3F 2C 06 F5 | 	and	local08, #63
1d310     10 2F E2 F8 | 	getbyte	local09, local02, #0
1d314     10 31 02 F6 | 	mov	local10, local02
1d318     1A 30 46 F0 | 	shr	local10, #26
1d31c     03 30 06 F5 | 	and	local10, #3
1d320     18 33 02 F6 | 	mov	local11, local10
1d324     01 2C 56 F2 | 	cmps	local08, #1 wc
1d328     44 F0 07 F1 | 	add	ptra, #68
1d32c     01 2C 86 31 |  if_ae	sub	local08, #1
1d330     41 2E 56 F2 | 	cmps	local09, #65 wc
1d334     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1d338     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1d33c     03 32 0E F2 | 	cmp	local11, #3 wz
1d340     00 32 06 A6 |  if_e	mov	local11, #0
1d344     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1d348     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1d34c     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1d350     00 32 0E F2 | 	cmp	local11, #0 wz
1d354     4C 00 90 AD |  if_e	jmp	#LR__2603
1d358     01 2A 06 F6 | 	mov	local07, #1
1d35c     17 2D 0A F2 | 	cmp	local08, local09 wz
1d360     18 00 90 5D |  if_ne	jmp	#LR__2601
1d364     05 2C 6E FB | 	djnz	local08, #LR__2600
1d368     0F 13 02 F6 | 	mov	arg01, local01
1d36c     10 15 02 F6 | 	mov	arg02, local02
1d370     23 16 06 F6 | 	mov	arg03, #35
1d374     24 FE BF FD | 	call	#__system___fmtchar
1d378     88 00 90 FD | 	jmp	#LR__2607
1d37c                 | LR__2600
1d37c                 | LR__2601
1d37c     02 32 0E F2 | 	cmp	local11, #2 wz
1d380     14 31 02 A6 |  if_e	mov	local10, local06
1d384     01 28 06 A1 |  if_e	add	local06, #1
1d388     18 41 48 AC |  if_e	wrbyte	#32, local10
1d38c     14 00 90 AD |  if_e	jmp	#LR__2602
1d390     04 32 0E F2 | 	cmp	local11, #4 wz
1d394     14 5B 48 AC |  if_e	wrbyte	#45, local06
1d398     01 28 06 A1 |  if_e	add	local06, #1
1d39c     14 57 48 5C |  if_ne	wrbyte	#43, local06
1d3a0     01 28 06 51 |  if_ne	add	local06, #1
1d3a4                 | LR__2602
1d3a4                 | LR__2603
1d3a4     14 13 02 F6 | 	mov	arg01, local06
1d3a8     11 15 02 F6 | 	mov	arg02, local03
1d3ac     12 17 02 F6 | 	mov	arg03, local04
1d3b0     16 19 02 F6 | 	mov	arg04, local08
1d3b4     00 1A 06 F6 | 	mov	arg05, #0
1d3b8     1D 20 2E F4 | 	testbn	local02, #29 wz
1d3bc     01 1A 06 56 |  if_ne	mov	arg05, #1
1d3c0     A8 45 B0 FD | 	call	#__system___uitoa
1d3c4     FD 2A 02 F1 | 	add	local07, result1
1d3c8     17 2B 5A F2 | 	cmps	local07, local09 wcz
1d3cc     24 00 90 ED |  if_be	jmp	#LR__2606
1d3d0     97 0E 48 FB | 	callpa	#(@LR__2605-@LR__2604)>>2,fcache_load_ptr_
1d3d4                 | LR__2604
1d3d4     17 31 02 F6 | 	mov	local10, local09
1d3d8     01 30 56 F2 | 	cmps	local10, #1 wc
1d3dc     01 2E 86 F1 | 	sub	local09, #1
1d3e0     14 31 02 36 |  if_ae	mov	local10, local06
1d3e4     01 28 06 31 |  if_ae	add	local06, #1
1d3e8     18 47 48 3C |  if_ae	wrbyte	#35, local10
1d3ec     E4 FF 9F 3D |  if_ae	jmp	#LR__2604
1d3f0                 | LR__2605
1d3f0     14 01 48 FC | 	wrbyte	#0, local06
1d3f4                 | LR__2606
1d3f4     0F 13 02 F6 | 	mov	arg01, local01
1d3f8     10 15 02 F6 | 	mov	arg02, local02
1d3fc     13 17 02 F6 | 	mov	arg03, local05
1d400     F0 FD BF FD | 	call	#__system___fmtstr
1d404                 | LR__2607
1d404     A7 F0 03 F6 | 	mov	ptra, fp
1d408     B2 00 A0 FD | 	call	#popregs_
1d40c                 | __system___fmtnum_ret
1d40c     2D 00 64 FD | 	ret
1d410                 | 
1d410                 | __system___fmtfloat
1d410     10 4A 05 F6 | 	mov	COUNT_, #16
1d414     A8 00 A0 FD | 	call	#pushregs_
1d418     24 F1 07 F1 | 	add	ptra, #292
1d41c     04 4E 05 F1 | 	add	fp, #4
1d420     A7 12 62 FC | 	wrlong	arg01, fp
1d424     04 4E 05 F1 | 	add	fp, #4
1d428     A7 14 62 FC | 	wrlong	arg02, fp
1d42c     04 4E 05 F1 | 	add	fp, #4
1d430     A7 16 62 FC | 	wrlong	arg03, fp
1d434     04 4E 05 F1 | 	add	fp, #4
1d438     A7 18 62 FC | 	wrlong	arg04, fp
1d43c     0C 4E 05 F1 | 	add	fp, #12
1d440     A7 14 68 FC | 	wrlong	#10, fp
1d444     08 4E 05 F1 | 	add	fp, #8
1d448     A7 00 68 FC | 	wrlong	#0, fp
1d44c     08 4E 05 F1 | 	add	fp, #8
1d450     A7 00 68 FC | 	wrlong	#0, fp
1d454     08 4E 05 F1 | 	add	fp, #8
1d458     A7 00 68 FC | 	wrlong	#0, fp
1d45c     04 4E 05 F1 | 	add	fp, #4
1d460     A7 04 68 FC | 	wrlong	#2, fp
1d464     04 4E 05 F1 | 	add	fp, #4
1d468     A7 00 68 FC | 	wrlong	#0, fp
1d46c     04 4E 05 F1 | 	add	fp, #4
1d470     A7 00 68 FC | 	wrlong	#0, fp
1d474     04 4E 05 F1 | 	add	fp, #4
1d478     A7 00 68 FC | 	wrlong	#0, fp
1d47c     04 4E 05 F1 | 	add	fp, #4
1d480     A7 00 68 FC | 	wrlong	#0, fp
1d484     18 4E 05 F1 | 	add	fp, #24
1d488     A7 00 68 FC | 	wrlong	#0, fp
1d48c     68 4E 05 F1 | 	add	fp, #104
1d490     A7 1E 02 F6 | 	mov	local01, fp
1d494     08 4E 85 F1 | 	sub	fp, #8
1d498     A7 1E 62 FC | 	wrlong	local01, fp
1d49c     04 4E 05 F1 | 	add	fp, #4
1d4a0     A7 1E 62 FC | 	wrlong	local01, fp
1d4a4     BC 4E 85 F1 | 	sub	fp, #188
1d4a8     A7 1E 02 FB | 	rdlong	local01, fp
1d4ac     10 1E 46 F0 | 	shr	local01, #16
1d4b0     3F 1E 06 F5 | 	and	local01, #63
1d4b4     B0 4E 05 F1 | 	add	fp, #176
1d4b8     A7 1E 62 FC | 	wrlong	local01, fp
1d4bc     B0 4E 85 F1 | 	sub	fp, #176
1d4c0     A7 1E 02 FB | 	rdlong	local01, fp
1d4c4     1C 1E 46 F0 | 	shr	local01, #28
1d4c8     01 1E 06 F5 | 	and	local01, #1
1d4cc     08 4F 05 F1 | 	add	fp, #264
1d4d0     A7 1E 62 FC | 	wrlong	local01, fp
1d4d4     58 4E 85 F1 | 	sub	fp, #88
1d4d8     A7 1E 0A FB | 	rdlong	local01, fp wz
1d4dc     B8 4E 85 F1 | 	sub	fp, #184
1d4e0     3C 00 90 5D |  if_ne	jmp	#LR__2611
1d4e4     10 4E 05 F1 | 	add	fp, #16
1d4e8     A7 1E 02 FB | 	rdlong	local01, fp
1d4ec     10 4E 85 F1 | 	sub	fp, #16
1d4f0     61 1E 0E F2 | 	cmp	local01, #97 wz
1d4f4     18 00 90 5D |  if_ne	jmp	#LR__2610
1d4f8     B8 4E 05 F1 | 	add	fp, #184
1d4fc     A7 1A 68 FC | 	wrlong	#13, fp
1d500     84 4E 85 F1 | 	sub	fp, #132
1d504     A7 02 68 FC | 	wrlong	#1, fp
1d508     34 4E 85 F1 | 	sub	fp, #52
1d50c     24 00 90 FD | 	jmp	#LR__2612
1d510                 | LR__2610
1d510     B8 4E 05 F1 | 	add	fp, #184
1d514     A7 0C 68 FC | 	wrlong	#6, fp
1d518     B8 4E 85 F1 | 	sub	fp, #184
1d51c     14 00 90 FD | 	jmp	#LR__2612
1d520                 | LR__2611
1d520     B8 4E 05 F1 | 	add	fp, #184
1d524     A7 1E 02 FB | 	rdlong	local01, fp
1d528     01 1E 86 F1 | 	sub	local01, #1
1d52c     A7 1E 62 FC | 	wrlong	local01, fp
1d530     B8 4E 85 F1 | 	sub	fp, #184
1d534                 | LR__2612
1d534     08 4E 05 F1 | 	add	fp, #8
1d538     A7 1E 02 FB | 	rdlong	local01, fp
1d53c     16 1E 46 F0 | 	shr	local01, #22
1d540     03 1E 06 F5 | 	and	local01, #3
1d544     04 4F 05 F1 | 	add	fp, #260
1d548     A7 1E 62 FC | 	wrlong	local01, fp
1d54c     04 4F 85 F1 | 	sub	fp, #260
1d550     A7 1E 02 FB | 	rdlong	local01, fp
1d554     1D 1E 46 F0 | 	shr	local01, #29
1d558     01 1E 06 F5 | 	and	local01, #1
1d55c     B4 4E 05 F1 | 	add	fp, #180
1d560     A7 1E 62 FC | 	wrlong	local01, fp
1d564     B4 4E 85 F1 | 	sub	fp, #180
1d568     A7 1E 02 FB | 	rdlong	local01, fp
1d56c     0F 1F EA F8 | 	getbyte	local01, local01, #1
1d570     60 4E 05 F1 | 	add	fp, #96
1d574     A7 1E 62 FC | 	wrlong	local01, fp
1d578     60 4E 85 F1 | 	sub	fp, #96
1d57c     A7 1E 02 FB | 	rdlong	local01, fp
1d580     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d584     64 4E 05 F1 | 	add	fp, #100
1d588     A7 1E 62 FC | 	wrlong	local01, fp
1d58c     00 1E 06 F6 | 	mov	local01, #0
1d590     5C 4E 85 F1 | 	sub	fp, #92
1d594     A7 1A 02 FB | 	rdlong	arg05, fp
1d598     65 1A 0E F2 | 	cmp	arg05, #101 wz
1d59c     01 1E 06 A6 |  if_e	mov	local01, #1
1d5a0     14 4E 05 F1 | 	add	fp, #20
1d5a4     A7 1E 62 FC | 	wrlong	local01, fp
1d5a8     98 4E 05 F1 | 	add	fp, #152
1d5ac     A7 20 0A FB | 	rdlong	local02, fp wz
1d5b0     45 1E 06 56 |  if_ne	mov	local01, #69
1d5b4     65 1E 06 A6 |  if_e	mov	local01, #101
1d5b8     8C 4E 85 F1 | 	sub	fp, #140
1d5bc     A7 1E 62 FC | 	wrlong	local01, fp
1d5c0     20 4E 85 F1 | 	sub	fp, #32
1d5c4     A7 1E 02 FB | 	rdlong	local01, fp
1d5c8     10 4E 85 F1 | 	sub	fp, #16
1d5cc     61 1E 0E F2 | 	cmp	local01, #97 wz
1d5d0     4C 00 90 5D |  if_ne	jmp	#LR__2613
1d5d4     24 4E 05 F1 | 	add	fp, #36
1d5d8     A7 02 68 FC | 	wrlong	#1, fp
1d5dc     98 4E 05 F1 | 	add	fp, #152
1d5e0     A7 20 0A FB | 	rdlong	local02, fp wz
1d5e4     50 1E 06 56 |  if_ne	mov	local01, #80
1d5e8     70 1E 06 A6 |  if_e	mov	local01, #112
1d5ec     8C 4E 85 F1 | 	sub	fp, #140
1d5f0     A7 1E 62 FC | 	wrlong	local01, fp
1d5f4     14 4E 85 F1 | 	sub	fp, #20
1d5f8     A7 04 68 FC | 	wrlong	#2, fp
1d5fc     1C 4E 05 F1 | 	add	fp, #28
1d600     A7 02 68 FC | 	wrlong	#1, fp
1d604     84 4E 05 F1 | 	add	fp, #132
1d608     A7 20 0A FB | 	rdlong	local02, fp wz
1d60c     58 1E 06 56 |  if_ne	mov	local01, #88
1d610     78 1E 06 A6 |  if_e	mov	local01, #120
1d614     7C 4E 85 F1 | 	sub	fp, #124
1d618     A7 1E 62 FC | 	wrlong	local01, fp
1d61c     40 4E 85 F1 | 	sub	fp, #64
1d620                 | LR__2613
1d620     10 4E 05 F1 | 	add	fp, #16
1d624     A7 1E 02 FB | 	rdlong	local01, fp
1d628     10 4E 85 F1 | 	sub	fp, #16
1d62c     23 1E 0E F2 | 	cmp	local01, #35 wz
1d630     3C 00 90 5D |  if_ne	jmp	#LR__2616
1d634     48 4E 05 F1 | 	add	fp, #72
1d638     A7 02 68 FC | 	wrlong	#1, fp
1d63c     C8 4E 05 F1 | 	add	fp, #200
1d640     A7 1E 0A FB | 	rdlong	local01, fp wz
1d644     10 4F 85 F1 | 	sub	fp, #272
1d648     18 00 90 AD |  if_e	jmp	#LR__2614
1d64c     10 4E 05 F1 | 	add	fp, #16
1d650     A7 CC 68 FC | 	wrlong	#102, fp
1d654     00 4F 05 F1 | 	add	fp, #256
1d658     A7 00 68 FC | 	wrlong	#0, fp
1d65c     10 4F 85 F1 | 	sub	fp, #272
1d660     0C 00 90 FD | 	jmp	#LR__2615
1d664                 | LR__2614
1d664     10 4F 05 F1 | 	add	fp, #272
1d668     A7 02 68 FC | 	wrlong	#1, fp
1d66c     10 4F 85 F1 | 	sub	fp, #272
1d670                 | LR__2615
1d670                 | LR__2616
1d670     08 4E 05 F1 | 	add	fp, #8
1d674     A7 1E 02 FB | 	rdlong	local01, fp
1d678     1A 1E 46 F0 | 	shr	local01, #26
1d67c     03 1E 06 F5 | 	and	local01, #3
1d680     5C 4E 05 F1 | 	add	fp, #92
1d684     A7 1E 62 FC | 	wrlong	local01, fp
1d688     58 4E 85 F1 | 	sub	fp, #88
1d68c     A7 FA 01 FB | 	rdlong	result1, fp
1d690     0C 4E 85 F1 | 	sub	fp, #12
1d694     1F FA 4D F0 | 	shr	result1, #31 wz
1d698     20 00 90 AD |  if_e	jmp	#LR__2617
1d69c     2C 4E 05 F1 | 	add	fp, #44
1d6a0     A7 5A 68 FC | 	wrlong	#45, fp
1d6a4     20 4E 85 F1 | 	sub	fp, #32
1d6a8     A7 FA 01 FB | 	rdlong	result1, fp
1d6ac     1F FA E5 F4 | 	bitnot	result1, #31
1d6b0     A7 FA 61 FC | 	wrlong	result1, fp
1d6b4     0C 4E 85 F1 | 	sub	fp, #12
1d6b8     3C 00 90 FD | 	jmp	#LR__2619
1d6bc                 | LR__2617
1d6bc     64 4E 05 F1 | 	add	fp, #100
1d6c0     A7 1E 02 FB | 	rdlong	local01, fp
1d6c4     64 4E 85 F1 | 	sub	fp, #100
1d6c8     01 1E 0E F2 | 	cmp	local01, #1 wz
1d6cc     2C 4E 05 A1 |  if_e	add	fp, #44
1d6d0     A7 56 68 AC |  if_e	wrlong	#43, fp
1d6d4     2C 4E 85 A1 |  if_e	sub	fp, #44
1d6d8     1C 00 90 AD |  if_e	jmp	#LR__2618
1d6dc     64 4E 05 F1 | 	add	fp, #100
1d6e0     A7 1E 02 FB | 	rdlong	local01, fp
1d6e4     64 4E 85 F1 | 	sub	fp, #100
1d6e8     02 1E 0E F2 | 	cmp	local01, #2 wz
1d6ec     2C 4E 05 A1 |  if_e	add	fp, #44
1d6f0     A7 40 68 AC |  if_e	wrlong	#32, fp
1d6f4     2C 4E 85 A1 |  if_e	sub	fp, #44
1d6f8                 | LR__2618
1d6f8                 | LR__2619
1d6f8     08 4E 05 F1 | 	add	fp, #8
1d6fc     A7 1E 02 FB | 	rdlong	local01, fp
1d700     18 1E 46 F0 | 	shr	local01, #24
1d704     03 1E 06 F5 | 	and	local01, #3
1d708     3C 4E 05 F1 | 	add	fp, #60
1d70c     A7 1E 62 FC | 	wrlong	local01, fp
1d710     00 1E 06 F6 | 	mov	local01, #0
1d714     18 4E 85 F1 | 	sub	fp, #24
1d718     A7 22 0A FB | 	rdlong	local03, fp wz
1d71c     2C 4E 85 F1 | 	sub	fp, #44
1d720     18 00 90 5D |  if_ne	jmp	#LR__2620
1d724     1C 4E 05 F1 | 	add	fp, #28
1d728     A7 24 02 FB | 	rdlong	local04, fp
1d72c     1C 4E 85 F1 | 	sub	fp, #28
1d730     12 27 02 F6 | 	mov	local05, local04
1d734     0A 26 0E F2 | 	cmp	local05, #10 wz
1d738     04 00 90 AD |  if_e	jmp	#LR__2621
1d73c                 | LR__2620
1d73c     01 1E 66 F5 | 	xor	local01, #1
1d740                 | LR__2621
1d740     3C 4E 05 F1 | 	add	fp, #60
1d744     A7 1E 62 FC | 	wrlong	local01, fp
1d748     3C 4E 85 F1 | 	sub	fp, #60
1d74c     00 1E 0E F2 | 	cmp	local01, #0 wz
1d750     0C 01 90 AD |  if_e	jmp	#LR__2623
1d754     44 4E 05 F1 | 	add	fp, #68
1d758     A7 26 02 FB | 	rdlong	local05, fp
1d75c     44 4E 85 F1 | 	sub	fp, #68
1d760     13 23 02 F6 | 	mov	local03, local05
1d764     02 22 0E F2 | 	cmp	local03, #2 wz
1d768     F4 00 90 5D |  if_ne	jmp	#LR__2623
1d76c     0C 4F 05 F1 | 	add	fp, #268
1d770     A7 28 02 FB | 	rdlong	local06, fp
1d774     0C 4F 85 F1 | 	sub	fp, #268
1d778     14 25 02 F6 | 	mov	local04, local06
1d77c     02 24 0E F2 | 	cmp	local04, #2 wz
1d780     DC 00 90 AD |  if_e	jmp	#LR__2623
1d784     C0 4E 05 F1 | 	add	fp, #192
1d788     A7 12 02 FB | 	rdlong	arg01, fp
1d78c     94 4E 85 F1 | 	sub	fp, #148
1d790     A7 14 02 FB | 	rdlong	arg02, fp
1d794     14 4E 05 F1 | 	add	fp, #20
1d798     A7 16 02 FB | 	rdlong	arg03, fp
1d79c     40 4E 85 F1 | 	sub	fp, #64
1d7a0     30 44 B0 FD | 	call	#__system__emitsign_0434
1d7a4     14 4F 05 F1 | 	add	fp, #276
1d7a8     A7 FA 61 FC | 	wrlong	result1, fp
1d7ac     14 4F 85 F1 | 	sub	fp, #276
1d7b0     00 FA 55 F2 | 	cmps	result1, #0 wc
1d7b4     14 4F 05 C1 |  if_b	add	fp, #276
1d7b8     A7 FA 01 CB |  if_b	rdlong	result1, fp
1d7bc     14 4F 85 C1 |  if_b	sub	fp, #276
1d7c0     6C 0B 90 CD |  if_b	jmp	#LR__2673
1d7c4     C0 4E 05 F1 | 	add	fp, #192
1d7c8     A7 1E 02 FB | 	rdlong	local01, fp
1d7cc     54 4E 05 F1 | 	add	fp, #84
1d7d0     A7 26 02 FB | 	rdlong	local05, fp
1d7d4     13 23 02 F6 | 	mov	local03, local05
1d7d8     13 1F 02 F1 | 	add	local01, local05
1d7dc     54 4E 85 F1 | 	sub	fp, #84
1d7e0     A7 1E 62 FC | 	wrlong	local01, fp
1d7e4     58 4E 85 F1 | 	sub	fp, #88
1d7e8     A7 1E 0A FB | 	rdlong	local01, fp wz
1d7ec     68 4E 85 F1 | 	sub	fp, #104
1d7f0     60 00 90 AD |  if_e	jmp	#LR__2622
1d7f4     68 4E 05 F1 | 	add	fp, #104
1d7f8     A7 1E 02 FB | 	rdlong	local01, fp
1d7fc     AC 4E 05 F1 | 	add	fp, #172
1d800     A7 22 02 FB | 	rdlong	local03, fp
1d804     11 1F 82 F1 | 	sub	local01, local03
1d808     AC 4E 85 F1 | 	sub	fp, #172
1d80c     A7 1E 62 FC | 	wrlong	local01, fp
1d810     68 4E 85 F1 | 	sub	fp, #104
1d814     00 1E 56 F2 | 	cmps	local01, #0 wc
1d818     68 4E 05 C1 |  if_b	add	fp, #104
1d81c     A7 00 68 CC |  if_b	wrlong	#0, fp
1d820     68 4E 85 C1 |  if_b	sub	fp, #104
1d824     08 4E 05 F1 | 	add	fp, #8
1d828     A7 1E 02 FB | 	rdlong	local01, fp
1d82c     E8 1E 06 F4 | 	bitl	local01, #232
1d830     A7 1E 62 FC | 	wrlong	local01, fp
1d834     60 4E 05 F1 | 	add	fp, #96
1d838     A7 26 02 FB | 	rdlong	local05, fp
1d83c     13 23 02 F6 | 	mov	local03, local05
1d840     08 22 66 F0 | 	shl	local03, #8
1d844     11 1F 42 F5 | 	or	local01, local03
1d848     60 4E 85 F1 | 	sub	fp, #96
1d84c     A7 1E 62 FC | 	wrlong	local01, fp
1d850     08 4E 85 F1 | 	sub	fp, #8
1d854                 | LR__2622
1d854     3C 4E 05 F1 | 	add	fp, #60
1d858     A7 00 68 FC | 	wrlong	#0, fp
1d85c     3C 4E 85 F1 | 	sub	fp, #60
1d860                 | LR__2623
1d860     0C 4E 05 F1 | 	add	fp, #12
1d864     A7 12 02 FB | 	rdlong	arg01, fp
1d868     0C 4E 85 F1 | 	sub	fp, #12
1d86c     04 1F B0 FD | 	call	#__system____builtin_ilogb
1d870     FF FF 3F FF 
1d874     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1d878     50 00 90 5D |  if_ne	jmp	#LR__2625
1d87c     2C 4E 05 F1 | 	add	fp, #44
1d880     A7 1E 0A FB | 	rdlong	local01, fp wz
1d884     2C 4E 85 F1 | 	sub	fp, #44
1d888     24 00 90 AD |  if_e	jmp	#LR__2624
1d88c     C0 4E 05 F1 | 	add	fp, #192
1d890     A7 20 02 FB | 	rdlong	local02, fp
1d894     10 23 02 F6 | 	mov	local03, local02
1d898     01 22 06 F1 | 	add	local03, #1
1d89c     A7 22 62 FC | 	wrlong	local03, fp
1d8a0     94 4E 85 F1 | 	sub	fp, #148
1d8a4     A7 24 02 FB | 	rdlong	local04, fp
1d8a8     2C 4E 85 F1 | 	sub	fp, #44
1d8ac     10 25 42 FC | 	wrbyte	local04, local02
1d8b0                 | LR__2624
1d8b0     C0 4E 05 F1 | 	add	fp, #192
1d8b4     A7 12 02 FB | 	rdlong	arg01, fp
1d8b8     C0 4E 85 F1 | 	sub	fp, #192
1d8bc     5C 01 00 FF 
1d8c0     A6 14 06 F6 | 	mov	arg02, ##@LR__4561
1d8c4     E4 E9 BF FD | 	call	#__system____builtin_strcpy
1d8c8     A4 08 90 FD | 	jmp	#LR__2661
1d8cc                 | LR__2625
1d8cc     0C 4E 05 F1 | 	add	fp, #12
1d8d0     A7 20 02 FB | 	rdlong	local02, fp
1d8d4     0C 4E 85 F1 | 	sub	fp, #12
1d8d8     10 13 02 F6 | 	mov	arg01, local02
1d8dc     94 1E B0 FD | 	call	#__system____builtin_ilogb
1d8e0     00 00 40 FF 
1d8e4     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1d8e8     50 00 90 5D |  if_ne	jmp	#LR__2627
1d8ec     2C 4E 05 F1 | 	add	fp, #44
1d8f0     A7 1E 0A FB | 	rdlong	local01, fp wz
1d8f4     2C 4E 85 F1 | 	sub	fp, #44
1d8f8     24 00 90 AD |  if_e	jmp	#LR__2626
1d8fc     C0 4E 05 F1 | 	add	fp, #192
1d900     A7 20 02 FB | 	rdlong	local02, fp
1d904     10 23 02 F6 | 	mov	local03, local02
1d908     01 22 06 F1 | 	add	local03, #1
1d90c     A7 22 62 FC | 	wrlong	local03, fp
1d910     94 4E 85 F1 | 	sub	fp, #148
1d914     A7 24 02 FB | 	rdlong	local04, fp
1d918     2C 4E 85 F1 | 	sub	fp, #44
1d91c     10 25 42 FC | 	wrbyte	local04, local02
1d920                 | LR__2626
1d920     C0 4E 05 F1 | 	add	fp, #192
1d924     A7 12 02 FB | 	rdlong	arg01, fp
1d928     C0 4E 85 F1 | 	sub	fp, #192
1d92c     5C 01 00 FF 
1d930     AA 14 06 F6 | 	mov	arg02, ##@LR__4562
1d934     74 E9 BF FD | 	call	#__system____builtin_strcpy
1d938     34 08 90 FD | 	jmp	#LR__2661
1d93c                 | LR__2627
1d93c     10 4E 05 F1 | 	add	fp, #16
1d940     A7 1E 02 FB | 	rdlong	local01, fp
1d944     10 4E 85 F1 | 	sub	fp, #16
1d948     67 1E 0E F2 | 	cmp	local01, #103 wz
1d94c     10 4E 05 51 |  if_ne	add	fp, #16
1d950     A7 22 02 5B |  if_ne	rdlong	local03, fp
1d954     10 4E 85 51 |  if_ne	sub	fp, #16
1d958     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1d95c     94 01 90 5D |  if_ne	jmp	#LR__2632
1d960     0C 4E 05 F1 | 	add	fp, #12
1d964     A7 12 02 FB | 	rdlong	arg01, fp
1d968     08 4E 05 F1 | 	add	fp, #8
1d96c     A7 14 02 F6 | 	mov	arg02, fp
1d970     0C 4E 05 F1 | 	add	fp, #12
1d974     A7 16 02 F6 | 	mov	arg03, fp
1d978     98 4E 05 F1 | 	add	fp, #152
1d97c     A7 18 02 FB | 	rdlong	arg04, fp
1d980     9C 4E 85 F1 | 	sub	fp, #156
1d984     A7 1A 02 FB | 	rdlong	arg05, fp
1d988     1C 4E 85 F1 | 	sub	fp, #28
1d98c     50 40 B0 FD | 	call	#__system__disassemble_0432
1d990     10 4E 05 F1 | 	add	fp, #16
1d994     A7 1E 02 FB | 	rdlong	local01, fp
1d998     10 4E 85 F1 | 	sub	fp, #16
1d99c     23 1E 0E F2 | 	cmp	local01, #35 wz
1d9a0     A0 00 90 5D |  if_ne	jmp	#LR__2629
1d9a4     20 4E 05 F1 | 	add	fp, #32
1d9a8     A7 1E 02 FB | 	rdlong	local01, fp
1d9ac     98 4E 05 F1 | 	add	fp, #152
1d9b0     A7 22 02 FB | 	rdlong	local03, fp
1d9b4     B8 4E 85 F1 | 	sub	fp, #184
1d9b8     11 1F 5A F2 | 	cmps	local01, local03 wcz
1d9bc     24 4E 05 11 |  if_a	add	fp, #36
1d9c0     A7 02 68 1C |  if_a	wrlong	#1, fp
1d9c4     24 4E 85 11 |  if_a	sub	fp, #36
1d9c8     A4 01 90 1D |  if_a	jmp	#LR__2635
1d9cc     20 4E 05 F1 | 	add	fp, #32
1d9d0     A7 1E 02 FB | 	rdlong	local01, fp
1d9d4     20 4E 85 F1 | 	sub	fp, #32
1d9d8     00 1E 56 F2 | 	cmps	local01, #0 wc
1d9dc     2C 00 90 3D |  if_ae	jmp	#LR__2628
1d9e0     B8 4E 05 F1 | 	add	fp, #184
1d9e4     A7 1E 02 FB | 	rdlong	local01, fp
1d9e8     0F 1F 62 F6 | 	neg	local01, local01
1d9ec     98 4E 85 F1 | 	sub	fp, #152
1d9f0     A7 22 02 FB | 	rdlong	local03, fp
1d9f4     20 4E 85 F1 | 	sub	fp, #32
1d9f8     0F 23 5A F2 | 	cmps	local03, local01 wcz
1d9fc     24 4E 05 E1 |  if_be	add	fp, #36
1da00     A7 02 68 EC |  if_be	wrlong	#1, fp
1da04     24 4E 85 E1 |  if_be	sub	fp, #36
1da08     64 01 90 FD | 	jmp	#LR__2635
1da0c                 | LR__2628
1da0c     20 4E 05 F1 | 	add	fp, #32
1da10     A7 1E 02 FB | 	rdlong	local01, fp
1da14     20 4E 85 F1 | 	sub	fp, #32
1da18     01 1E 56 F2 | 	cmps	local01, #1 wc
1da1c     50 01 90 CD |  if_b	jmp	#LR__2635
1da20     B8 4E 05 F1 | 	add	fp, #184
1da24     A7 1E 02 FB | 	rdlong	local01, fp
1da28     98 4E 85 F1 | 	sub	fp, #152
1da2c     A7 22 02 FB | 	rdlong	local03, fp
1da30     11 1F 82 F1 | 	sub	local01, local03
1da34     98 4E 05 F1 | 	add	fp, #152
1da38     A7 1E 62 FC | 	wrlong	local01, fp
1da3c     B8 4E 85 F1 | 	sub	fp, #184
1da40     2C 01 90 FD | 	jmp	#LR__2635
1da44                 | LR__2629
1da44     00 1E 06 F6 | 	mov	local01, #0
1da48     08 4E 05 F1 | 	add	fp, #8
1da4c     A7 20 02 FB | 	rdlong	local02, fp
1da50     1C 20 46 F0 | 	shr	local02, #28
1da54     01 20 0E F5 | 	and	local02, #1 wz
1da58     01 1E 06 A6 |  if_e	mov	local01, #1
1da5c     2C 4E 05 F1 | 	add	fp, #44
1da60     A7 1E 62 FC | 	wrlong	local01, fp
1da64     14 4E 85 F1 | 	sub	fp, #20
1da68     A7 1E 02 FB | 	rdlong	local01, fp
1da6c     98 4E 05 F1 | 	add	fp, #152
1da70     A7 22 02 FB | 	rdlong	local03, fp
1da74     B8 4E 85 F1 | 	sub	fp, #184
1da78     11 1F 52 F2 | 	cmps	local01, local03 wc
1da7c     18 00 90 3D |  if_ae	jmp	#LR__2630
1da80     20 4E 05 F1 | 	add	fp, #32
1da84     A7 24 02 FB | 	rdlong	local04, fp
1da88     20 4E 85 F1 | 	sub	fp, #32
1da8c     FF FF 7F FF 
1da90     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1da94     10 00 90 3D |  if_ae	jmp	#LR__2631
1da98                 | LR__2630
1da98     24 4E 05 F1 | 	add	fp, #36
1da9c     A7 02 68 FC | 	wrlong	#1, fp
1daa0     24 4E 85 F1 | 	sub	fp, #36
1daa4     C8 00 90 FD | 	jmp	#LR__2635
1daa8                 | LR__2631
1daa8     B8 4E 05 F1 | 	add	fp, #184
1daac     A7 24 02 FB | 	rdlong	local04, fp
1dab0     98 4E 85 F1 | 	sub	fp, #152
1dab4     A7 22 02 FB | 	rdlong	local03, fp
1dab8     11 25 82 F1 | 	sub	local04, local03
1dabc     98 4E 05 F1 | 	add	fp, #152
1dac0     A7 24 62 FC | 	wrlong	local04, fp
1dac4     AC 4E 85 F1 | 	sub	fp, #172
1dac8     A7 12 02 FB | 	rdlong	arg01, fp
1dacc     08 4E 05 F1 | 	add	fp, #8
1dad0     A7 14 02 F6 | 	mov	arg02, fp
1dad4     0C 4E 05 F1 | 	add	fp, #12
1dad8     A7 16 02 F6 | 	mov	arg03, fp
1dadc     12 19 62 F6 | 	neg	arg04, local04
1dae0     04 4E 85 F1 | 	sub	fp, #4
1dae4     A7 1A 02 FB | 	rdlong	arg05, fp
1dae8     1C 4E 85 F1 | 	sub	fp, #28
1daec     F0 3E B0 FD | 	call	#__system__disassemble_0432
1daf0     7C 00 90 FD | 	jmp	#LR__2635
1daf4                 | LR__2632
1daf4     24 4E 05 F1 | 	add	fp, #36
1daf8     A7 1E 0A FB | 	rdlong	local01, fp wz
1dafc     24 4E 85 F1 | 	sub	fp, #36
1db00     34 00 90 AD |  if_e	jmp	#LR__2633
1db04     0C 4E 05 F1 | 	add	fp, #12
1db08     A7 12 02 FB | 	rdlong	arg01, fp
1db0c     08 4E 05 F1 | 	add	fp, #8
1db10     A7 14 02 F6 | 	mov	arg02, fp
1db14     0C 4E 05 F1 | 	add	fp, #12
1db18     A7 16 02 F6 | 	mov	arg03, fp
1db1c     98 4E 05 F1 | 	add	fp, #152
1db20     A7 18 02 FB | 	rdlong	arg04, fp
1db24     9C 4E 85 F1 | 	sub	fp, #156
1db28     A7 1A 02 FB | 	rdlong	arg05, fp
1db2c     1C 4E 85 F1 | 	sub	fp, #28
1db30     AC 3E B0 FD | 	call	#__system__disassemble_0432
1db34     38 00 90 FD | 	jmp	#LR__2634
1db38                 | LR__2633
1db38     0C 4E 05 F1 | 	add	fp, #12
1db3c     A7 12 02 FB | 	rdlong	arg01, fp
1db40     08 4E 05 F1 | 	add	fp, #8
1db44     A7 14 02 F6 | 	mov	arg02, fp
1db48     0C 4E 05 F1 | 	add	fp, #12
1db4c     A7 16 02 F6 | 	mov	arg03, fp
1db50     98 4E 05 F1 | 	add	fp, #152
1db54     A7 24 02 FB | 	rdlong	local04, fp
1db58     01 24 06 F1 | 	add	local04, #1
1db5c     12 19 62 F6 | 	neg	arg04, local04
1db60     9C 4E 85 F1 | 	sub	fp, #156
1db64     A7 1A 02 FB | 	rdlong	arg05, fp
1db68     1C 4E 85 F1 | 	sub	fp, #28
1db6c     70 3E B0 FD | 	call	#__system__disassemble_0432
1db70                 | LR__2634
1db70                 | LR__2635
1db70     1C 4E 05 F1 | 	add	fp, #28
1db74     A7 1E 02 FB | 	rdlong	local01, fp
1db78     1C 4E 85 F1 | 	sub	fp, #28
1db7c     02 1E 0E F2 | 	cmp	local01, #2 wz
1db80     4C 00 90 5D |  if_ne	jmp	#LR__2638
1db84     1C 4E 05 F1 | 	add	fp, #28
1db88     A7 20 68 FC | 	wrlong	#16, fp
1db8c     1C 4E 85 F1 | 	sub	fp, #28
1db90                 | LR__2636
1db90     14 4E 05 F1 | 	add	fp, #20
1db94     A7 1E 0A FB | 	rdlong	local01, fp wz
1db98     14 4E 85 F1 | 	sub	fp, #20
1db9c     30 00 90 AD |  if_e	jmp	#LR__2637
1dba0     14 4E 05 F1 | 	add	fp, #20
1dba4     A7 22 02 FB | 	rdlong	local03, fp
1dba8     14 4E 85 F1 | 	sub	fp, #20
1dbac     00 80 00 FF 
1dbb0     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1dbb4     18 00 90 3D |  if_ae	jmp	#LR__2637
1dbb8     14 4E 05 F1 | 	add	fp, #20
1dbbc     A7 1E 02 FB | 	rdlong	local01, fp
1dbc0     01 1E 66 F0 | 	shl	local01, #1
1dbc4     A7 1E 62 FC | 	wrlong	local01, fp
1dbc8     14 4E 85 F1 | 	sub	fp, #20
1dbcc     C0 FF 9F FD | 	jmp	#LR__2636
1dbd0                 | LR__2637
1dbd0                 | LR__2638
1dbd0     70 4E 05 F1 | 	add	fp, #112
1dbd4     A7 12 02 F6 | 	mov	arg01, fp
1dbd8     5C 4E 85 F1 | 	sub	fp, #92
1dbdc     A7 14 02 FB | 	rdlong	arg02, fp
1dbe0     08 4E 05 F1 | 	add	fp, #8
1dbe4     A7 16 02 FB | 	rdlong	arg03, fp
1dbe8     A0 4E 05 F1 | 	add	fp, #160
1dbec     A7 1A 02 FB | 	rdlong	arg05, fp
1dbf0     BC 4E 85 F1 | 	sub	fp, #188
1dbf4     01 18 06 F6 | 	mov	arg04, #1
1dbf8     70 3D B0 FD | 	call	#__system___uitoa
1dbfc     58 4E 05 F1 | 	add	fp, #88
1dc00     A7 FA 61 FC | 	wrlong	result1, fp
1dc04     38 4E 85 F1 | 	sub	fp, #56
1dc08     A7 1E 02 FB | 	rdlong	local01, fp
1dc0c     20 4E 85 F1 | 	sub	fp, #32
1dc10     00 1E 56 F2 | 	cmps	local01, #0 wc
1dc14     50 00 90 3D |  if_ae	jmp	#LR__2639
1dc18     60 4E 05 F1 | 	add	fp, #96
1dc1c     A7 5A 68 FC | 	wrlong	#45, fp
1dc20     50 4E 05 F1 | 	add	fp, #80
1dc24     A7 12 02 F6 | 	mov	arg01, fp
1dc28     90 4E 85 F1 | 	sub	fp, #144
1dc2c     A7 22 02 FB | 	rdlong	local03, fp
1dc30     11 15 62 F6 | 	neg	arg02, local03
1dc34     18 4E 05 F1 | 	add	fp, #24
1dc38     A7 18 02 FB | 	rdlong	arg04, fp
1dc3c     84 4E 05 F1 | 	add	fp, #132
1dc40     A7 28 02 FB | 	rdlong	local06, fp
1dc44     BC 4E 85 F1 | 	sub	fp, #188
1dc48     14 25 02 F6 | 	mov	local04, local06
1dc4c     0A 16 06 F6 | 	mov	arg03, #10
1dc50     12 1B 02 F6 | 	mov	arg05, local04
1dc54     14 3D B0 FD | 	call	#__system___uitoa
1dc58     5C 4E 05 F1 | 	add	fp, #92
1dc5c     A7 FA 61 FC | 	wrlong	result1, fp
1dc60     5C 4E 85 F1 | 	sub	fp, #92
1dc64     48 00 90 FD | 	jmp	#LR__2640
1dc68                 | LR__2639
1dc68     60 4E 05 F1 | 	add	fp, #96
1dc6c     A7 56 68 FC | 	wrlong	#43, fp
1dc70     50 4E 05 F1 | 	add	fp, #80
1dc74     A7 12 02 F6 | 	mov	arg01, fp
1dc78     90 4E 85 F1 | 	sub	fp, #144
1dc7c     A7 14 02 FB | 	rdlong	arg02, fp
1dc80     18 4E 05 F1 | 	add	fp, #24
1dc84     A7 18 02 FB | 	rdlong	arg04, fp
1dc88     84 4E 05 F1 | 	add	fp, #132
1dc8c     A7 28 02 FB | 	rdlong	local06, fp
1dc90     BC 4E 85 F1 | 	sub	fp, #188
1dc94     14 25 02 F6 | 	mov	local04, local06
1dc98     0A 16 06 F6 | 	mov	arg03, #10
1dc9c     12 1B 02 F6 | 	mov	arg05, local04
1dca0     C8 3C B0 FD | 	call	#__system___uitoa
1dca4     5C 4E 05 F1 | 	add	fp, #92
1dca8     A7 FA 61 FC | 	wrlong	result1, fp
1dcac     5C 4E 85 F1 | 	sub	fp, #92
1dcb0                 | LR__2640
1dcb0     24 4E 05 F1 | 	add	fp, #36
1dcb4     A7 1E 0A FB | 	rdlong	local01, fp wz
1dcb8     24 4E 85 F1 | 	sub	fp, #36
1dcbc     2C 00 90 AD |  if_e	jmp	#LR__2641
1dcc0     50 4E 05 F1 | 	add	fp, #80
1dcc4     A7 00 68 FC | 	wrlong	#0, fp
1dcc8     04 4E 85 F1 | 	sub	fp, #4
1dccc     A7 00 68 FC | 	wrlong	#0, fp
1dcd0     6C 4E 05 F1 | 	add	fp, #108
1dcd4     A7 1E 02 FB | 	rdlong	local01, fp
1dcd8     01 1E 06 F1 | 	add	local01, #1
1dcdc     64 4E 85 F1 | 	sub	fp, #100
1dce0     A7 1E 62 FC | 	wrlong	local01, fp
1dce4     54 4E 85 F1 | 	sub	fp, #84
1dce8     88 00 90 FD | 	jmp	#LR__2644
1dcec                 | LR__2641
1dcec     20 4E 05 F1 | 	add	fp, #32
1dcf0     A7 1E 02 FB | 	rdlong	local01, fp
1dcf4     20 4E 85 F1 | 	sub	fp, #32
1dcf8     00 1E 56 F2 | 	cmps	local01, #0 wc
1dcfc     40 00 90 3D |  if_ae	jmp	#LR__2642
1dd00     20 4E 05 F1 | 	add	fp, #32
1dd04     A7 20 02 FB | 	rdlong	local02, fp
1dd08     30 4E 05 F1 | 	add	fp, #48
1dd0c     A7 20 62 FC | 	wrlong	local02, fp
1dd10     04 4E 85 F1 | 	sub	fp, #4
1dd14     A7 20 62 FC | 	wrlong	local02, fp
1dd18     2C 4E 85 F1 | 	sub	fp, #44
1dd1c     A7 1E 02 FB | 	rdlong	local01, fp
1dd20     98 4E 05 F1 | 	add	fp, #152
1dd24     A7 22 02 FB | 	rdlong	local03, fp
1dd28     11 1F 02 F1 | 	add	local01, local03
1dd2c     01 1E 06 F1 | 	add	local01, #1
1dd30     64 4E 85 F1 | 	sub	fp, #100
1dd34     A7 1E 62 FC | 	wrlong	local01, fp
1dd38     54 4E 85 F1 | 	sub	fp, #84
1dd3c     34 00 90 FD | 	jmp	#LR__2643
1dd40                 | LR__2642
1dd40     4C 4E 05 F1 | 	add	fp, #76
1dd44     A7 00 68 FC | 	wrlong	#0, fp
1dd48     2C 4E 85 F1 | 	sub	fp, #44
1dd4c     A7 1E 02 FB | 	rdlong	local01, fp
1dd50     30 4E 05 F1 | 	add	fp, #48
1dd54     A7 1E 62 FC | 	wrlong	local01, fp
1dd58     68 4E 05 F1 | 	add	fp, #104
1dd5c     A7 22 02 FB | 	rdlong	local03, fp
1dd60     11 1F 02 F1 | 	add	local01, local03
1dd64     01 1E 06 F1 | 	add	local01, #1
1dd68     64 4E 85 F1 | 	sub	fp, #100
1dd6c     A7 1E 62 FC | 	wrlong	local01, fp
1dd70     54 4E 85 F1 | 	sub	fp, #84
1dd74                 | LR__2643
1dd74                 | LR__2644
1dd74     54 4E 05 F1 | 	add	fp, #84
1dd78     A7 1E 02 FB | 	rdlong	local01, fp
1dd7c     08 4E 85 F1 | 	sub	fp, #8
1dd80     A7 22 02 FB | 	rdlong	local03, fp
1dd84     11 1F 82 F1 | 	sub	local01, local03
1dd88     01 1E 06 F1 | 	add	local01, #1
1dd8c     24 4E 85 F1 | 	sub	fp, #36
1dd90     A7 1E 62 FC | 	wrlong	local01, fp
1dd94     04 4E 05 F1 | 	add	fp, #4
1dd98     A7 1E 0A FB | 	rdlong	local01, fp wz
1dd9c     2C 4E 85 F1 | 	sub	fp, #44
1dda0     28 4E 05 51 |  if_ne	add	fp, #40
1dda4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1dda8     01 22 06 51 |  if_ne	add	local03, #1
1ddac     A7 22 62 5C |  if_ne	wrlong	local03, fp
1ddb0     28 4E 85 51 |  if_ne	sub	fp, #40
1ddb4     1C 4E 05 F1 | 	add	fp, #28
1ddb8     A7 1E 02 FB | 	rdlong	local01, fp
1ddbc     1C 4E 85 F1 | 	sub	fp, #28
1ddc0     10 1E 0E F2 | 	cmp	local01, #16 wz
1ddc4     28 4E 05 A1 |  if_e	add	fp, #40
1ddc8     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ddcc     02 1E 06 A1 |  if_e	add	local01, #2
1ddd0     A7 1E 62 AC |  if_e	wrlong	local01, fp
1ddd4     28 4E 85 A1 |  if_e	sub	fp, #40
1ddd8     24 4E 05 F1 | 	add	fp, #36
1dddc     A7 1E 0A FB | 	rdlong	local01, fp wz
1dde0     24 4E 85 F1 | 	sub	fp, #36
1dde4     28 00 90 AD |  if_e	jmp	#LR__2645
1dde8     28 4E 05 F1 | 	add	fp, #40
1ddec     A7 1E 02 FB | 	rdlong	local01, fp
1ddf0     02 22 06 F6 | 	mov	local03, #2
1ddf4     34 4E 05 F1 | 	add	fp, #52
1ddf8     A7 26 02 FB | 	rdlong	local05, fp
1ddfc     13 23 02 F1 | 	add	local03, local05
1de00     11 1F 02 F1 | 	add	local01, local03
1de04     34 4E 85 F1 | 	sub	fp, #52
1de08     A7 1E 62 FC | 	wrlong	local01, fp
1de0c     28 4E 85 F1 | 	sub	fp, #40
1de10                 | LR__2645
1de10     28 4E 05 F1 | 	add	fp, #40
1de14     A7 1E 02 FB | 	rdlong	local01, fp
1de18     28 4E 85 F1 | 	sub	fp, #40
1de1c     41 1E 56 F2 | 	cmps	local01, #65 wc
1de20     01 FA 65 36 |  if_ae	neg	result1, #1
1de24     08 05 90 3D |  if_ae	jmp	#LR__2673
1de28     3C 4E 05 F1 | 	add	fp, #60
1de2c     A7 1E 0A FB | 	rdlong	local01, fp wz
1de30     3C 4E 85 F1 | 	sub	fp, #60
1de34     60 00 90 AD |  if_e	jmp	#LR__2646
1de38     C0 4E 05 F1 | 	add	fp, #192
1de3c     A7 12 02 FB | 	rdlong	arg01, fp
1de40     94 4E 85 F1 | 	sub	fp, #148
1de44     A7 14 02 FB | 	rdlong	arg02, fp
1de48     14 4E 05 F1 | 	add	fp, #20
1de4c     A7 16 02 FB | 	rdlong	arg03, fp
1de50     40 4E 85 F1 | 	sub	fp, #64
1de54     7C 3D B0 FD | 	call	#__system__emitsign_0434
1de58     18 4F 05 F1 | 	add	fp, #280
1de5c     A7 FA 61 FC | 	wrlong	result1, fp
1de60     18 4F 85 F1 | 	sub	fp, #280
1de64     00 FA 55 F2 | 	cmps	result1, #0 wc
1de68     18 4F 05 C1 |  if_b	add	fp, #280
1de6c     A7 FA 01 CB |  if_b	rdlong	result1, fp
1de70     18 4F 85 C1 |  if_b	sub	fp, #280
1de74     B8 04 90 CD |  if_b	jmp	#LR__2673
1de78     C0 4E 05 F1 | 	add	fp, #192
1de7c     A7 1E 02 FB | 	rdlong	local01, fp
1de80     58 4E 05 F1 | 	add	fp, #88
1de84     A7 22 02 FB | 	rdlong	local03, fp
1de88     11 1F 02 F1 | 	add	local01, local03
1de8c     58 4E 85 F1 | 	sub	fp, #88
1de90     A7 1E 62 FC | 	wrlong	local01, fp
1de94     C0 4E 85 F1 | 	sub	fp, #192
1de98                 | LR__2646
1de98     4C 4E 05 F1 | 	add	fp, #76
1de9c     A7 1E 02 FB | 	rdlong	local01, fp
1dea0     34 4E 85 F1 | 	sub	fp, #52
1dea4     A7 1E 62 FC | 	wrlong	local01, fp
1dea8     18 4E 85 F1 | 	sub	fp, #24
1deac     97 9E 48 FB | 	callpa	#(@LR__2652-@LR__2647)>>2,fcache_load_ptr_
1deb0                 | LR__2647
1deb0     18 4E 05 F1 | 	add	fp, #24
1deb4     A7 20 02 FB | 	rdlong	local02, fp
1deb8     3C 4E 05 F1 | 	add	fp, #60
1debc     A7 26 02 FB | 	rdlong	local05, fp
1dec0     54 4E 85 F1 | 	sub	fp, #84
1dec4     13 21 52 F2 | 	cmps	local02, local05 wc
1dec8     20 01 90 3D |  if_ae	jmp	#LR__2653
1decc     18 4E 05 F1 | 	add	fp, #24
1ded0     A7 28 02 FB | 	rdlong	local06, fp
1ded4     18 4E 85 F1 | 	sub	fp, #24
1ded8     00 28 56 F2 | 	cmps	local06, #0 wc
1dedc     58 00 90 CD |  if_b	jmp	#LR__2648
1dee0     18 4E 05 F1 | 	add	fp, #24
1dee4     A7 28 02 FB | 	rdlong	local06, fp
1dee8     40 4E 05 F1 | 	add	fp, #64
1deec     A7 2A 02 FB | 	rdlong	local07, fp
1def0     58 4E 85 F1 | 	sub	fp, #88
1def4     15 29 52 F2 | 	cmps	local06, local07 wc
1def8     3C 00 90 3D |  if_ae	jmp	#LR__2648
1defc     C0 4E 05 F1 | 	add	fp, #192
1df00     A7 2C 02 FB | 	rdlong	local08, fp
1df04     16 2B 02 F6 | 	mov	local07, local08
1df08     01 2A 06 F1 | 	add	local07, #1
1df0c     A7 2A 62 FC | 	wrlong	local07, fp
1df10     A8 4E 85 F1 | 	sub	fp, #168
1df14     A7 2A 02 FB | 	rdlong	local07, fp
1df18     15 2F 02 F6 | 	mov	local09, local07
1df1c     58 4E 05 F1 | 	add	fp, #88
1df20     A7 30 02 F6 | 	mov	local10, fp
1df24     A7 2E 02 F1 | 	add	local09, fp
1df28     17 33 C2 FA | 	rdbyte	local11, local09
1df2c     16 33 42 FC | 	wrbyte	local11, local08
1df30     70 4E 85 F1 | 	sub	fp, #112
1df34     20 00 90 FD | 	jmp	#LR__2649
1df38                 | LR__2648
1df38     C0 4E 05 F1 | 	add	fp, #192
1df3c     A7 2C 02 FB | 	rdlong	local08, fp
1df40     16 2F 02 F6 | 	mov	local09, local08
1df44     01 2E 06 F1 | 	add	local09, #1
1df48     A7 2E 62 FC | 	wrlong	local09, fp
1df4c     C0 4E 85 F1 | 	sub	fp, #192
1df50     30 2E 06 F6 | 	mov	local09, #48
1df54     16 61 48 FC | 	wrbyte	#48, local08
1df58                 | LR__2649
1df58     18 4E 05 F1 | 	add	fp, #24
1df5c     A7 28 02 FB | 	rdlong	local06, fp
1df60     38 4E 05 F1 | 	add	fp, #56
1df64     A7 34 02 FB | 	rdlong	local12, fp
1df68     50 4E 85 F1 | 	sub	fp, #80
1df6c     1A 29 0A F2 | 	cmp	local06, local12 wz
1df70     5C 00 90 5D |  if_ne	jmp	#LR__2651
1df74     10 4F 05 F1 | 	add	fp, #272
1df78     A7 2A 02 FB | 	rdlong	local07, fp
1df7c     10 4F 85 F1 | 	sub	fp, #272
1df80     15 2F 0A F6 | 	mov	local09, local07 wz
1df84     28 00 90 5D |  if_ne	jmp	#LR__2650
1df88     54 4E 05 F1 | 	add	fp, #84
1df8c     A7 32 02 FB | 	rdlong	local11, fp
1df90     19 31 02 F6 | 	mov	local10, local11
1df94     01 30 86 F1 | 	sub	local10, #1
1df98     3C 4E 85 F1 | 	sub	fp, #60
1df9c     A7 36 02 FB | 	rdlong	local13, fp
1dfa0     18 4E 85 F1 | 	sub	fp, #24
1dfa4     1B 39 02 F6 | 	mov	local14, local13
1dfa8     18 39 52 F2 | 	cmps	local14, local10 wc
1dfac     20 00 90 3D |  if_ae	jmp	#LR__2651
1dfb0                 | LR__2650
1dfb0     C0 4E 05 F1 | 	add	fp, #192
1dfb4     A7 2C 02 FB | 	rdlong	local08, fp
1dfb8     16 35 02 F6 | 	mov	local12, local08
1dfbc     01 34 06 F1 | 	add	local12, #1
1dfc0     A7 34 62 FC | 	wrlong	local12, fp
1dfc4     C0 4E 85 F1 | 	sub	fp, #192
1dfc8     2E 2E 06 F6 | 	mov	local09, #46
1dfcc     16 5D 48 FC | 	wrbyte	#46, local08
1dfd0                 | LR__2651
1dfd0     18 4E 05 F1 | 	add	fp, #24
1dfd4     A7 3A 02 FB | 	rdlong	local15, fp
1dfd8     1D 35 02 F6 | 	mov	local12, local15
1dfdc     01 34 06 F1 | 	add	local12, #1
1dfe0     A7 34 62 FC | 	wrlong	local12, fp
1dfe4     18 4E 85 F1 | 	sub	fp, #24
1dfe8     C4 FE 9F FD | 	jmp	#LR__2647
1dfec                 | LR__2652
1dfec                 | LR__2653
1dfec     34 4E 05 F1 | 	add	fp, #52
1dff0     A7 1E 0A FB | 	rdlong	local01, fp wz
1dff4     34 4E 85 F1 | 	sub	fp, #52
1dff8     A0 00 90 AD |  if_e	jmp	#LR__2657
1dffc     C0 4E 05 F1 | 	add	fp, #192
1e000     A7 1E 02 FB | 	rdlong	local01, fp
1e004     01 1E 86 F1 | 	sub	local01, #1
1e008     A7 1E 62 FC | 	wrlong	local01, fp
1e00c     C0 4E 85 F1 | 	sub	fp, #192
1e010     97 26 48 FB | 	callpa	#(@LR__2655-@LR__2654)>>2,fcache_load_ptr_
1e014                 | LR__2654
1e014     C0 4E 05 F1 | 	add	fp, #192
1e018     A7 1E 02 FB | 	rdlong	local01, fp
1e01c     04 4E 05 F1 | 	add	fp, #4
1e020     A7 22 02 FB | 	rdlong	local03, fp
1e024     C4 4E 85 F1 | 	sub	fp, #196
1e028     11 1F 5A F2 | 	cmps	local01, local03 wcz
1e02c     30 00 90 ED |  if_be	jmp	#LR__2656
1e030     C0 4E 05 F1 | 	add	fp, #192
1e034     A7 28 02 FB | 	rdlong	local06, fp
1e038     C0 4E 85 F1 | 	sub	fp, #192
1e03c     14 25 C2 FA | 	rdbyte	local04, local06
1e040     30 24 0E F2 | 	cmp	local04, #48 wz
1e044     18 00 90 5D |  if_ne	jmp	#LR__2656
1e048     C0 4E 05 F1 | 	add	fp, #192
1e04c     A7 1E 02 FB | 	rdlong	local01, fp
1e050     01 1E 86 F1 | 	sub	local01, #1
1e054     A7 1E 62 FC | 	wrlong	local01, fp
1e058     C0 4E 85 F1 | 	sub	fp, #192
1e05c     B4 FF 9F FD | 	jmp	#LR__2654
1e060                 | LR__2655
1e060                 | LR__2656
1e060     C0 4E 05 F1 | 	add	fp, #192
1e064     A7 20 02 FB | 	rdlong	local02, fp
1e068     C0 4E 85 F1 | 	sub	fp, #192
1e06c     10 1F C2 FA | 	rdbyte	local01, local02
1e070     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e074     C0 4E 05 A1 |  if_e	add	fp, #192
1e078     A7 1E 02 AB |  if_e	rdlong	local01, fp
1e07c     01 1E 86 A1 |  if_e	sub	local01, #1
1e080     A7 1E 62 AC |  if_e	wrlong	local01, fp
1e084     C0 4E 85 A1 |  if_e	sub	fp, #192
1e088     C0 4E 05 F1 | 	add	fp, #192
1e08c     A7 22 02 FB | 	rdlong	local03, fp
1e090     01 22 06 F1 | 	add	local03, #1
1e094     A7 22 62 FC | 	wrlong	local03, fp
1e098     C0 4E 85 F1 | 	sub	fp, #192
1e09c                 | LR__2657
1e09c     24 4E 05 F1 | 	add	fp, #36
1e0a0     A7 1E 0A FB | 	rdlong	local01, fp wz
1e0a4     24 4E 85 F1 | 	sub	fp, #36
1e0a8     B4 00 90 AD |  if_e	jmp	#LR__2660
1e0ac     C0 4E 05 F1 | 	add	fp, #192
1e0b0     A7 20 02 FB | 	rdlong	local02, fp
1e0b4     10 23 02 F6 | 	mov	local03, local02
1e0b8     01 22 06 F1 | 	add	local03, #1
1e0bc     A7 22 62 FC | 	wrlong	local03, fp
1e0c0     90 4E 85 F1 | 	sub	fp, #144
1e0c4     A7 24 02 FB | 	rdlong	local04, fp
1e0c8     10 25 42 FC | 	wrbyte	local04, local02
1e0cc     90 4E 05 F1 | 	add	fp, #144
1e0d0     A7 20 02 FB | 	rdlong	local02, fp
1e0d4     10 23 02 F6 | 	mov	local03, local02
1e0d8     01 22 06 F1 | 	add	local03, #1
1e0dc     A7 22 62 FC | 	wrlong	local03, fp
1e0e0     60 4E 85 F1 | 	sub	fp, #96
1e0e4     A7 24 02 FB | 	rdlong	local04, fp
1e0e8     10 25 42 FC | 	wrbyte	local04, local02
1e0ec     48 4E 85 F1 | 	sub	fp, #72
1e0f0     A7 00 68 FC | 	wrlong	#0, fp
1e0f4     18 4E 85 F1 | 	sub	fp, #24
1e0f8                 | LR__2658
1e0f8     18 4E 05 F1 | 	add	fp, #24
1e0fc     A7 20 02 FB | 	rdlong	local02, fp
1e100     44 4E 05 F1 | 	add	fp, #68
1e104     A7 26 02 FB | 	rdlong	local05, fp
1e108     5C 4E 85 F1 | 	sub	fp, #92
1e10c     13 21 52 F2 | 	cmps	local02, local05 wc
1e110     4C 00 90 3D |  if_ae	jmp	#LR__2659
1e114     C0 4E 05 F1 | 	add	fp, #192
1e118     A7 2C 02 FB | 	rdlong	local08, fp
1e11c     16 35 02 F6 | 	mov	local12, local08
1e120     01 34 06 F1 | 	add	local12, #1
1e124     A7 34 62 FC | 	wrlong	local12, fp
1e128     A8 4E 85 F1 | 	sub	fp, #168
1e12c     A7 2A 02 FB | 	rdlong	local07, fp
1e130     15 2F 02 F6 | 	mov	local09, local07
1e134     98 4E 05 F1 | 	add	fp, #152
1e138     A7 30 02 F6 | 	mov	local10, fp
1e13c     A7 2E 02 F1 | 	add	local09, fp
1e140     17 33 C2 FA | 	rdbyte	local11, local09
1e144     16 33 42 FC | 	wrbyte	local11, local08
1e148     98 4E 85 F1 | 	sub	fp, #152
1e14c     A7 34 02 FB | 	rdlong	local12, fp
1e150     01 34 06 F1 | 	add	local12, #1
1e154     A7 34 62 FC | 	wrlong	local12, fp
1e158     18 4E 85 F1 | 	sub	fp, #24
1e15c     98 FF 9F FD | 	jmp	#LR__2658
1e160                 | LR__2659
1e160                 | LR__2660
1e160     C0 4E 05 F1 | 	add	fp, #192
1e164     A7 1E 02 FB | 	rdlong	local01, fp
1e168     C0 4E 85 F1 | 	sub	fp, #192
1e16c     0F 01 48 FC | 	wrbyte	#0, local01
1e170                 | LR__2661
1e170     6C 4E 05 F1 | 	add	fp, #108
1e174     A7 1E 0A FB | 	rdlong	local01, fp wz
1e178     6C 4E 85 F1 | 	sub	fp, #108
1e17c     90 01 90 AD |  if_e	jmp	#LR__2672
1e180     48 4E 05 F1 | 	add	fp, #72
1e184     A7 22 0A FB | 	rdlong	local03, fp wz
1e188     48 4E 85 F1 | 	sub	fp, #72
1e18c     80 01 90 AD |  if_e	jmp	#LR__2672
1e190     C4 4E 05 F1 | 	add	fp, #196
1e194     A7 12 02 FB | 	rdlong	arg01, fp
1e198     C4 4E 85 F1 | 	sub	fp, #196
1e19c     09 3D 02 F6 | 	mov	local16, arg01
1e1a0     97 06 48 FB | 	callpa	#(@LR__2663-@LR__2662)>>2,fcache_load_ptr_
1e1a4                 | LR__2662
1e1a4     1E FB C9 FA | 	rdbyte	result1, local16 wz
1e1a8     01 3C 06 51 |  if_ne	add	local16, #1
1e1ac     F4 FF 9F 5D |  if_ne	jmp	#LR__2662
1e1b0                 | LR__2663
1e1b0     09 3D 82 F1 | 	sub	local16, arg01
1e1b4     1E 25 02 F6 | 	mov	local04, local16
1e1b8     6C 4E 05 F1 | 	add	fp, #108
1e1bc     A7 28 02 FB | 	rdlong	local06, fp
1e1c0     6C 4E 85 F1 | 	sub	fp, #108
1e1c4     14 25 5A F2 | 	cmps	local04, local06 wcz
1e1c8     44 01 90 ED |  if_be	jmp	#LR__2672
1e1cc     C4 4E 05 F1 | 	add	fp, #196
1e1d0     A7 1E 02 FB | 	rdlong	local01, fp
1e1d4     5C 4E 05 F1 | 	add	fp, #92
1e1d8     A7 1E 62 FC | 	wrlong	local01, fp
1e1dc     FC 4E 85 F1 | 	sub	fp, #252
1e1e0     A7 1E 0A FB | 	rdlong	local01, fp wz
1e1e4     24 4E 85 F1 | 	sub	fp, #36
1e1e8     20 00 90 AD |  if_e	jmp	#LR__2664
1e1ec     B8 4E 05 F1 | 	add	fp, #184
1e1f0     A7 00 68 FC | 	wrlong	#0, fp
1e1f4     4C 4E 85 F1 | 	sub	fp, #76
1e1f8     A7 1E 02 FB | 	rdlong	local01, fp
1e1fc     B0 4E 05 F1 | 	add	fp, #176
1e200     A7 1E 62 FC | 	wrlong	local01, fp
1e204     1C 4F 85 F1 | 	sub	fp, #284
1e208     24 00 90 FD | 	jmp	#LR__2665
1e20c                 | LR__2664
1e20c     6C 4E 05 F1 | 	add	fp, #108
1e210     A7 1E 02 FB | 	rdlong	local01, fp
1e214     01 1E 86 F1 | 	sub	local01, #1
1e218     4C 4E 05 F1 | 	add	fp, #76
1e21c     A7 22 02 FB | 	rdlong	local03, fp
1e220     11 1F 82 F1 | 	sub	local01, local03
1e224     64 4E 05 F1 | 	add	fp, #100
1e228     A7 1E 62 FC | 	wrlong	local01, fp
1e22c     1C 4F 85 F1 | 	sub	fp, #284
1e230                 | LR__2665
1e230     97 20 48 FB | 	callpa	#(@LR__2667-@LR__2666)>>2,fcache_load_ptr_
1e234                 | LR__2666
1e234     1C 4F 05 F1 | 	add	fp, #284
1e238     A7 1E 0A FB | 	rdlong	local01, fp wz
1e23c     1C 4F 85 F1 | 	sub	fp, #284
1e240     30 00 90 AD |  if_e	jmp	#LR__2668
1e244     20 4F 05 F1 | 	add	fp, #288
1e248     A7 20 02 FB | 	rdlong	local02, fp
1e24c     10 23 02 F6 | 	mov	local03, local02
1e250     01 22 06 F1 | 	add	local03, #1
1e254     A7 22 62 FC | 	wrlong	local03, fp
1e258     10 55 48 FC | 	wrbyte	#42, local02
1e25c     04 4E 85 F1 | 	sub	fp, #4
1e260     A7 1E 02 FB | 	rdlong	local01, fp
1e264     01 1E 86 F1 | 	sub	local01, #1
1e268     A7 1E 62 FC | 	wrlong	local01, fp
1e26c     1C 4F 85 F1 | 	sub	fp, #284
1e270     C0 FF 9F FD | 	jmp	#LR__2666
1e274                 | LR__2667
1e274                 | LR__2668
1e274     B8 4E 05 F1 | 	add	fp, #184
1e278     A7 1E 0A FB | 	rdlong	local01, fp wz
1e27c     B8 4E 85 F1 | 	sub	fp, #184
1e280     70 00 90 AD |  if_e	jmp	#LR__2671
1e284     20 4F 05 F1 | 	add	fp, #288
1e288     A7 20 02 FB | 	rdlong	local02, fp
1e28c     10 23 02 F6 | 	mov	local03, local02
1e290     01 22 06 F1 | 	add	local03, #1
1e294     A7 22 62 FC | 	wrlong	local03, fp
1e298     10 5D 48 FC | 	wrbyte	#46, local02
1e29c     04 4E 85 F1 | 	sub	fp, #4
1e2a0     A7 00 68 FC | 	wrlong	#0, fp
1e2a4     1C 4F 85 F1 | 	sub	fp, #284
1e2a8                 | LR__2669
1e2a8     1C 4F 05 F1 | 	add	fp, #284
1e2ac     A7 20 02 FB | 	rdlong	local02, fp
1e2b0     64 4E 85 F1 | 	sub	fp, #100
1e2b4     A7 26 02 FB | 	rdlong	local05, fp
1e2b8     B8 4E 85 F1 | 	sub	fp, #184
1e2bc     13 21 52 F2 | 	cmps	local02, local05 wc
1e2c0     30 00 90 3D |  if_ae	jmp	#LR__2670
1e2c4     20 4F 05 F1 | 	add	fp, #288
1e2c8     A7 2C 02 FB | 	rdlong	local08, fp
1e2cc     16 35 02 F6 | 	mov	local12, local08
1e2d0     01 34 06 F1 | 	add	local12, #1
1e2d4     A7 34 62 FC | 	wrlong	local12, fp
1e2d8     16 55 48 FC | 	wrbyte	#42, local08
1e2dc     04 4E 85 F1 | 	sub	fp, #4
1e2e0     A7 34 02 FB | 	rdlong	local12, fp
1e2e4     01 34 06 F1 | 	add	local12, #1
1e2e8     A7 34 62 FC | 	wrlong	local12, fp
1e2ec     1C 4F 85 F1 | 	sub	fp, #284
1e2f0     B4 FF 9F FD | 	jmp	#LR__2669
1e2f4                 | LR__2670
1e2f4                 | LR__2671
1e2f4     20 4F 05 F1 | 	add	fp, #288
1e2f8     A7 20 02 FB | 	rdlong	local02, fp
1e2fc     10 23 02 F6 | 	mov	local03, local02
1e300     01 22 06 F1 | 	add	local03, #1
1e304     A7 22 62 FC | 	wrlong	local03, fp
1e308     20 4F 85 F1 | 	sub	fp, #288
1e30c     10 01 48 FC | 	wrbyte	#0, local02
1e310                 | LR__2672
1e310     04 4E 05 F1 | 	add	fp, #4
1e314     A7 12 02 FB | 	rdlong	arg01, fp
1e318     04 4E 05 F1 | 	add	fp, #4
1e31c     A7 14 02 FB | 	rdlong	arg02, fp
1e320     BC 4E 05 F1 | 	add	fp, #188
1e324     A7 16 02 FB | 	rdlong	arg03, fp
1e328     C4 4E 85 F1 | 	sub	fp, #196
1e32c     C4 EE BF FD | 	call	#__system___fmtstr
1e330                 | LR__2673
1e330     A7 F0 03 F6 | 	mov	ptra, fp
1e334     B2 00 A0 FD | 	call	#popregs_
1e338                 | __system___fmtfloat_ret
1e338     2D 00 64 FD | 	ret
1e33c                 | 
1e33c                 | __system__Left_S
1e33c     04 4A 05 F6 | 	mov	COUNT_, #4
1e340     A8 00 A0 FD | 	call	#pushregs_
1e344     09 1F 02 F6 | 	mov	local01, arg01
1e348     0A 21 02 F6 | 	mov	local02, arg02
1e34c     01 20 56 F2 | 	cmps	local02, #1 wc
1e350     5C 01 00 CF 
1e354     AE FA 05 C6 |  if_b	mov	result1, ##@LR__4563
1e358     5C 00 90 CD |  if_b	jmp	#LR__2683
1e35c     0F 13 02 F6 | 	mov	arg01, local01
1e360     09 23 02 F6 | 	mov	local03, arg01
1e364     97 06 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
1e368                 | LR__2680
1e368     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e36c     01 22 06 51 |  if_ne	add	local03, #1
1e370     F4 FF 9F 5D |  if_ne	jmp	#LR__2680
1e374                 | LR__2681
1e374     09 23 82 F1 | 	sub	local03, arg01
1e378     11 FB 01 F6 | 	mov	result1, local03
1e37c     10 FB 59 F2 | 	cmps	result1, local02 wcz
1e380     0F FB 01 E6 |  if_be	mov	result1, local01
1e384     30 00 90 ED |  if_be	jmp	#LR__2683
1e388     10 13 02 F6 | 	mov	arg01, local02
1e38c     02 12 06 F1 | 	add	arg01, #2
1e390     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
1e394     FD 24 0A F6 | 	mov	local04, result1 wz
1e398     18 00 90 AD |  if_e	jmp	#LR__2682
1e39c     12 13 02 F6 | 	mov	arg01, local04
1e3a0     0F 15 02 F6 | 	mov	arg02, local01
1e3a4     10 17 02 F6 | 	mov	arg03, local02
1e3a8     6C DE BF FD | 	call	#__system____builtin_memmove
1e3ac     12 21 02 F1 | 	add	local02, local04
1e3b0     10 01 48 FC | 	wrbyte	#0, local02
1e3b4                 | LR__2682
1e3b4     12 FB 01 F6 | 	mov	result1, local04
1e3b8                 | LR__2683
1e3b8     A7 F0 03 F6 | 	mov	ptra, fp
1e3bc     B2 00 A0 FD | 	call	#popregs_
1e3c0                 | __system__Left_S_ret
1e3c0     2D 00 64 FD | 	ret
1e3c4                 | 
1e3c4                 | __system__Right_S
1e3c4     05 4A 05 F6 | 	mov	COUNT_, #5
1e3c8     A8 00 A0 FD | 	call	#pushregs_
1e3cc     09 1F 02 F6 | 	mov	local01, arg01
1e3d0     0A 21 02 F6 | 	mov	local02, arg02
1e3d4     01 20 56 F2 | 	cmps	local02, #1 wc
1e3d8     5C 01 00 CF 
1e3dc     AF FA 05 C6 |  if_b	mov	result1, ##@LR__4564
1e3e0     64 00 90 CD |  if_b	jmp	#LR__2693
1e3e4     0F 13 02 F6 | 	mov	arg01, local01
1e3e8     09 23 02 F6 | 	mov	local03, arg01
1e3ec     97 06 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1e3f0                 | LR__2690
1e3f0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e3f4     01 22 06 51 |  if_ne	add	local03, #1
1e3f8     F4 FF 9F 5D |  if_ne	jmp	#LR__2690
1e3fc                 | LR__2691
1e3fc     09 23 82 F1 | 	sub	local03, arg01
1e400     11 FB 01 F6 | 	mov	result1, local03
1e404     FD 24 02 F6 | 	mov	local04, result1
1e408     10 25 5A F2 | 	cmps	local04, local02 wcz
1e40c     0F FB 01 E6 |  if_be	mov	result1, local01
1e410     34 00 90 ED |  if_be	jmp	#LR__2693
1e414     10 13 02 F6 | 	mov	arg01, local02
1e418     02 12 06 F1 | 	add	arg01, #2
1e41c     20 1D B0 FD | 	call	#__system___gc_alloc_managed
1e420     FD 26 0A F6 | 	mov	local05, result1 wz
1e424     1C 00 90 AD |  if_e	jmp	#LR__2692
1e428     10 25 82 F1 | 	sub	local04, local02
1e42c     0F 25 02 F1 | 	add	local04, local01
1e430     01 20 06 F1 | 	add	local02, #1
1e434     13 13 02 F6 | 	mov	arg01, local05
1e438     12 15 02 F6 | 	mov	arg02, local04
1e43c     10 17 02 F6 | 	mov	arg03, local02
1e440     D4 DD BF FD | 	call	#__system____builtin_memmove
1e444                 | LR__2692
1e444     13 FB 01 F6 | 	mov	result1, local05
1e448                 | LR__2693
1e448     A7 F0 03 F6 | 	mov	ptra, fp
1e44c     B2 00 A0 FD | 	call	#popregs_
1e450                 | __system__Right_S_ret
1e450     2D 00 64 FD | 	ret
1e454                 | 
1e454                 | __system__Mid_S
1e454     05 4A 05 F6 | 	mov	COUNT_, #5
1e458     A8 00 A0 FD | 	call	#pushregs_
1e45c     09 1F 02 F6 | 	mov	local01, arg01
1e460     0A 21 02 F6 | 	mov	local02, arg02
1e464     01 16 56 F2 | 	cmps	arg03, #1 wc
1e468     5C 01 00 CF 
1e46c     B0 FA 05 C6 |  if_b	mov	result1, ##@LR__4565
1e470     80 00 90 CD |  if_b	jmp	#LR__2703
1e474     01 20 86 F1 | 	sub	local02, #1
1e478     00 20 56 F3 | 	fges	local02, #0 wc
1e47c     0F 13 02 F6 | 	mov	arg01, local01
1e480     09 23 02 F6 | 	mov	local03, arg01
1e484     97 06 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1e488                 | LR__2700
1e488     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e48c     01 22 06 51 |  if_ne	add	local03, #1
1e490     F4 FF 9F 5D |  if_ne	jmp	#LR__2700
1e494                 | LR__2701
1e494     09 23 82 F1 | 	sub	local03, arg01
1e498     11 FB 01 F6 | 	mov	result1, local03
1e49c     FD 14 02 F6 | 	mov	arg02, result1
1e4a0     10 15 52 F2 | 	cmps	arg02, local02 wc
1e4a4     5C 01 00 CF 
1e4a8     B1 FA 05 C6 |  if_b	mov	result1, ##@LR__4566
1e4ac     44 00 90 CD |  if_b	jmp	#LR__2703
1e4b0     0A 25 02 F6 | 	mov	local04, arg02
1e4b4     10 25 82 F1 | 	sub	local04, local02
1e4b8     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1e4bc     0B 25 02 16 |  if_a	mov	local04, arg03
1e4c0     12 13 02 F6 | 	mov	arg01, local04
1e4c4     02 12 06 F1 | 	add	arg01, #2
1e4c8     74 1C B0 FD | 	call	#__system___gc_alloc_managed
1e4cc     FD 26 0A F6 | 	mov	local05, result1 wz
1e4d0     1C 00 90 AD |  if_e	jmp	#LR__2702
1e4d4     0F 21 02 F1 | 	add	local02, local01
1e4d8     13 13 02 F6 | 	mov	arg01, local05
1e4dc     10 15 02 F6 | 	mov	arg02, local02
1e4e0     12 17 02 F6 | 	mov	arg03, local04
1e4e4     30 DD BF FD | 	call	#__system____builtin_memmove
1e4e8     13 25 02 F1 | 	add	local04, local05
1e4ec     12 01 48 FC | 	wrbyte	#0, local04
1e4f0                 | LR__2702
1e4f0     13 FB 01 F6 | 	mov	result1, local05
1e4f4                 | LR__2703
1e4f4     A7 F0 03 F6 | 	mov	ptra, fp
1e4f8     B2 00 A0 FD | 	call	#popregs_
1e4fc                 | __system__Mid_S_ret
1e4fc     2D 00 64 FD | 	ret
1e500                 | 
1e500                 | __system__Chr_S
1e500     01 4A 05 F6 | 	mov	COUNT_, #1
1e504     A8 00 A0 FD | 	call	#pushregs_
1e508     09 1F 02 F6 | 	mov	local01, arg01
1e50c     03 12 06 F6 | 	mov	arg01, #3
1e510     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
1e514     00 FA 4D F2 | 	cmps	result1, #0 wz
1e518     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1e51c     01 FA 05 51 |  if_ne	add	result1, #1
1e520     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1e524     01 FA 85 51 |  if_ne	sub	result1, #1
1e528     A7 F0 03 F6 | 	mov	ptra, fp
1e52c     B2 00 A0 FD | 	call	#popregs_
1e530                 | __system__Chr_S_ret
1e530     2D 00 64 FD | 	ret
1e534                 | 
1e534                 | __system__str_S
1e534     02 4A 05 F6 | 	mov	COUNT_, #2
1e538     A8 00 A0 FD | 	call	#pushregs_
1e53c     09 1F 02 F6 | 	mov	local01, arg01
1e540     10 12 06 F6 | 	mov	arg01, #16
1e544     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
1e548     FD 20 0A F6 | 	mov	local02, result1 wz
1e54c     30 00 90 AD |  if_e	jmp	#LR__2710
1e550     F8 13 02 F6 | 	mov	arg01, ptra
1e554     08 F0 07 F1 | 	add	ptra, #8
1e558     09 21 62 FC | 	wrlong	local02, arg01
1e55c     04 12 06 F1 | 	add	arg01, #4
1e560     09 01 68 FC | 	wrlong	#0, arg01
1e564     04 12 86 F1 | 	sub	arg01, #4
1e568     00 E8 03 FF 
1e56c     00 12 46 F5 | 	or	arg01, ##131072000
1e570     00 14 06 F6 | 	mov	arg02, #0
1e574     0F 17 02 F6 | 	mov	arg03, local01
1e578     67 18 06 F6 | 	mov	arg04, #103
1e57c     90 EE BF FD | 	call	#__system___fmtfloat
1e580                 | LR__2710
1e580     10 FB 01 F6 | 	mov	result1, local02
1e584     A7 F0 03 F6 | 	mov	ptra, fp
1e588     B2 00 A0 FD | 	call	#popregs_
1e58c                 | __system__str_S_ret
1e58c     2D 00 64 FD | 	ret
1e590                 | 
1e590                 | __system__Number_S
1e590     08 4A 05 F6 | 	mov	COUNT_, #8
1e594     A8 00 A0 FD | 	call	#pushregs_
1e598     09 1F 02 F6 | 	mov	local01, arg01
1e59c     0A 21 0A F6 | 	mov	local02, arg02 wz
1e5a0     0B 23 02 F6 | 	mov	local03, arg03
1e5a4     3C 00 90 5D |  if_ne	jmp	#LR__2722
1e5a8     01 20 06 F6 | 	mov	local02, #1
1e5ac     11 25 02 F6 | 	mov	local04, local03
1e5b0     01 26 06 F6 | 	mov	local05, #1
1e5b4     97 16 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
1e5b8                 | LR__2720
1e5b8     00 28 06 F6 | 	mov	local06, #0
1e5bc     0F 25 1A F2 | 	cmp	local04, local01 wcz
1e5c0     01 28 66 E6 |  if_be	neg	local06, #1
1e5c4     12 27 12 F2 | 	cmp	local05, local04 wc
1e5c8     15 2B A2 F1 | 	subx	local07, local07
1e5cc     15 29 CA F7 | 	test	local06, local07 wz
1e5d0     11 25 02 5D |  if_ne	qmul	local04, local03
1e5d4     12 27 02 56 |  if_ne	mov	local05, local04
1e5d8     01 20 06 51 |  if_ne	add	local02, #1
1e5dc     18 24 62 5D |  if_ne	getqx	local04
1e5e0     D4 FF 9F 5D |  if_ne	jmp	#LR__2720
1e5e4                 | LR__2721
1e5e4                 | LR__2722
1e5e4     20 20 36 F3 | 	fle	local02, #32 wc
1e5e8     10 13 02 F6 | 	mov	arg01, local02
1e5ec     02 12 06 F1 | 	add	arg01, #2
1e5f0     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1e5f4     FD 28 02 F6 | 	mov	local06, result1
1e5f8     10 2B 02 F6 | 	mov	local07, local02
1e5fc     14 2B 02 F1 | 	add	local07, local06
1e600     15 01 48 FC | 	wrbyte	#0, local07
1e604     97 1A 48 FB | 	callpa	#(@LR__2724-@LR__2723)>>2,fcache_load_ptr_
1e608                 | LR__2723
1e608     01 20 16 F2 | 	cmp	local02, #1 wc
1e60c     2C 00 90 CD |  if_b	jmp	#LR__2725
1e610     11 1F 12 FD | 	qdiv	local01, local03
1e614     01 20 86 F1 | 	sub	local02, #1
1e618     10 2B 02 F6 | 	mov	local07, local02
1e61c     14 2B 02 F1 | 	add	local07, local06
1e620     19 2C 62 FD | 	getqy	local08
1e624     0A 2C 16 F2 | 	cmp	local08, #10 wc
1e628     30 2C 06 C1 |  if_b	add	local08, #48
1e62c     37 2C 06 31 |  if_ae	add	local08, #55
1e630     15 2D 42 FC | 	wrbyte	local08, local07
1e634     18 1E 62 FD | 	getqx	local01
1e638     CC FF 9F FD | 	jmp	#LR__2723
1e63c                 | LR__2724
1e63c                 | LR__2725
1e63c     14 FB 01 F6 | 	mov	result1, local06
1e640     A7 F0 03 F6 | 	mov	ptra, fp
1e644     B2 00 A0 FD | 	call	#popregs_
1e648                 | __system__Number_S_ret
1e648     2D 00 64 FD | 	ret
1e64c                 | 
1e64c                 | __system__LCase_S
1e64c     07 4A 05 F6 | 	mov	COUNT_, #7
1e650     A8 00 A0 FD | 	call	#pushregs_
1e654     09 1F 02 F6 | 	mov	local01, arg01
1e658     09 21 02 F6 | 	mov	local02, arg01
1e65c     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
1e660                 | LR__2730
1e660     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e664     01 20 06 51 |  if_ne	add	local02, #1
1e668     F4 FF 9F 5D |  if_ne	jmp	#LR__2730
1e66c                 | LR__2731
1e66c     09 21 82 F1 | 	sub	local02, arg01
1e670     10 FB 01 F6 | 	mov	result1, local02
1e674     FD 20 0A F6 | 	mov	local02, result1 wz
1e678     5C 01 00 AF 
1e67c     B2 FA 05 A6 |  if_e	mov	result1, ##@LR__4567
1e680     7C 00 90 AD |  if_e	jmp	#LR__2737
1e684     10 13 02 F6 | 	mov	arg01, local02
1e688     02 12 06 F1 | 	add	arg01, #2
1e68c     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1e690     FD 22 0A F6 | 	mov	local03, result1 wz
1e694     64 00 90 AD |  if_e	jmp	#LR__2736
1e698     01 24 66 F6 | 	neg	local04, #1
1e69c     97 26 48 FB | 	callpa	#(@LR__2735-@LR__2732)>>2,fcache_load_ptr_
1e6a0                 | LR__2732
1e6a0     01 24 06 F1 | 	add	local04, #1
1e6a4     12 27 02 F6 | 	mov	local05, local04
1e6a8     0F 27 02 F1 | 	add	local05, local01
1e6ac     13 29 C2 FA | 	rdbyte	local06, local05
1e6b0     41 28 56 F2 | 	cmps	local06, #65 wc
1e6b4     18 00 90 CD |  if_b	jmp	#LR__2733
1e6b8     5B 28 56 F2 | 	cmps	local06, #91 wc
1e6bc     12 2B 02 C6 |  if_b	mov	local07, local04
1e6c0     11 2B 02 C1 |  if_b	add	local07, local03
1e6c4     20 28 06 C1 |  if_b	add	local06, #32
1e6c8     15 29 42 CC |  if_b	wrbyte	local06, local07
1e6cc     0C 00 90 CD |  if_b	jmp	#LR__2734
1e6d0                 | LR__2733
1e6d0     12 2B 02 F6 | 	mov	local07, local04
1e6d4     11 2B 02 F1 | 	add	local07, local03
1e6d8     15 29 42 FC | 	wrbyte	local06, local07
1e6dc                 | LR__2734
1e6dc     10 29 02 F6 | 	mov	local06, local02
1e6e0     01 28 86 F1 | 	sub	local06, #1
1e6e4     14 25 0A F2 | 	cmp	local04, local06 wz
1e6e8     B4 FF 9F 5D |  if_ne	jmp	#LR__2732
1e6ec                 | LR__2735
1e6ec     11 21 02 F1 | 	add	local02, local03
1e6f0     10 01 48 FC | 	wrbyte	#0, local02
1e6f4     11 FB 01 F6 | 	mov	result1, local03
1e6f8     04 00 90 FD | 	jmp	#LR__2737
1e6fc                 | LR__2736
1e6fc     11 FB 01 F6 | 	mov	result1, local03
1e700                 | LR__2737
1e700     A7 F0 03 F6 | 	mov	ptra, fp
1e704     B2 00 A0 FD | 	call	#popregs_
1e708                 | __system__LCase_S_ret
1e708     2D 00 64 FD | 	ret
1e70c                 | 
1e70c                 | __system__LTrim_S
1e70c     05 4A 05 F6 | 	mov	COUNT_, #5
1e710     A8 00 A0 FD | 	call	#pushregs_
1e714     09 1F 02 F6 | 	mov	local01, arg01
1e718     09 21 02 F6 | 	mov	local02, arg01
1e71c     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1e720                 | LR__2740
1e720     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e724     01 20 06 51 |  if_ne	add	local02, #1
1e728     F4 FF 9F 5D |  if_ne	jmp	#LR__2740
1e72c                 | LR__2741
1e72c     09 21 82 F1 | 	sub	local02, arg01
1e730     10 FB 01 F6 | 	mov	result1, local02
1e734     FD 20 0A F6 | 	mov	local02, result1 wz
1e738     5C 01 00 AF 
1e73c     B3 FA 05 A6 |  if_e	mov	result1, ##@LR__4568
1e740     7C 00 90 AD |  if_e	jmp	#LR__2746
1e744     00 22 06 F6 | 	mov	local03, #0
1e748     10 25 02 F6 | 	mov	local04, local02
1e74c                 | LR__2742
1e74c     12 23 52 F2 | 	cmps	local03, local04 wc
1e750     68 00 90 3D |  if_ae	jmp	#LR__2745
1e754     11 17 02 F6 | 	mov	arg03, local03
1e758     0F 17 02 F1 | 	add	arg03, local01
1e75c     0B 17 C2 FA | 	rdbyte	arg03, arg03
1e760     20 16 0E F2 | 	cmp	arg03, #32 wz
1e764     4C 00 90 AD |  if_e	jmp	#LR__2744
1e768     10 13 02 F6 | 	mov	arg01, local02
1e76c     11 13 82 F1 | 	sub	arg01, local03
1e770     02 12 06 F1 | 	add	arg01, #2
1e774     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1e778     FD 26 0A F6 | 	mov	local05, result1 wz
1e77c     2C 00 90 AD |  if_e	jmp	#LR__2743
1e780     11 15 02 F6 | 	mov	arg02, local03
1e784     0F 15 02 F1 | 	add	arg02, local01
1e788     10 17 02 F6 | 	mov	arg03, local02
1e78c     11 17 82 F1 | 	sub	arg03, local03
1e790     13 13 02 F6 | 	mov	arg01, local05
1e794     80 DA BF FD | 	call	#__system____builtin_memmove
1e798     11 21 82 F1 | 	sub	local02, local03
1e79c     13 21 02 F1 | 	add	local02, local05
1e7a0     10 01 48 FC | 	wrbyte	#0, local02
1e7a4     13 FB 01 F6 | 	mov	result1, local05
1e7a8     14 00 90 FD | 	jmp	#LR__2746
1e7ac                 | LR__2743
1e7ac     13 FB 01 F6 | 	mov	result1, local05
1e7b0     0C 00 90 FD | 	jmp	#LR__2746
1e7b4                 | LR__2744
1e7b4     01 22 06 F1 | 	add	local03, #1
1e7b8     90 FF 9F FD | 	jmp	#LR__2742
1e7bc                 | LR__2745
1e7bc     0F FB 01 F6 | 	mov	result1, local01
1e7c0                 | LR__2746
1e7c0     A7 F0 03 F6 | 	mov	ptra, fp
1e7c4     B2 00 A0 FD | 	call	#popregs_
1e7c8                 | __system__LTrim_S_ret
1e7c8     2D 00 64 FD | 	ret
1e7cc                 | 
1e7cc                 | __system__RTrim_S
1e7cc     04 4A 05 F6 | 	mov	COUNT_, #4
1e7d0     A8 00 A0 FD | 	call	#pushregs_
1e7d4     09 1F 02 F6 | 	mov	local01, arg01
1e7d8     09 21 02 F6 | 	mov	local02, arg01
1e7dc     97 06 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
1e7e0                 | LR__2750
1e7e0     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e7e4     01 20 06 51 |  if_ne	add	local02, #1
1e7e8     F4 FF 9F 5D |  if_ne	jmp	#LR__2750
1e7ec                 | LR__2751
1e7ec     09 21 82 F1 | 	sub	local02, arg01
1e7f0     10 FB 01 F6 | 	mov	result1, local02
1e7f4     FD 20 0A F6 | 	mov	local02, result1 wz
1e7f8     5C 01 00 AF 
1e7fc     B4 FA 05 A6 |  if_e	mov	result1, ##@LR__4569
1e800     74 00 90 AD |  if_e	jmp	#LR__2755
1e804     10 23 02 F6 | 	mov	local03, local02
1e808     01 22 86 F1 | 	sub	local03, #1
1e80c                 | LR__2752
1e80c     11 15 02 F6 | 	mov	arg02, local03
1e810     0F 15 02 F1 | 	add	arg02, local01
1e814     0A 21 C2 FA | 	rdbyte	local02, arg02
1e818     20 20 0E F2 | 	cmp	local02, #32 wz
1e81c     44 00 90 AD |  if_e	jmp	#LR__2754
1e820     11 13 02 F6 | 	mov	arg01, local03
1e824     02 12 06 F1 | 	add	arg01, #2
1e828     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1e82c     FD 24 0A F6 | 	mov	local04, result1 wz
1e830     28 00 90 AD |  if_e	jmp	#LR__2753
1e834     11 17 02 F6 | 	mov	arg03, local03
1e838     01 16 06 F1 | 	add	arg03, #1
1e83c     12 13 02 F6 | 	mov	arg01, local04
1e840     0F 15 02 F6 | 	mov	arg02, local01
1e844     D0 D9 BF FD | 	call	#__system____builtin_memmove
1e848     01 22 06 F1 | 	add	local03, #1
1e84c     12 23 02 F1 | 	add	local03, local04
1e850     11 01 48 FC | 	wrbyte	#0, local03
1e854     12 FB 01 F6 | 	mov	result1, local04
1e858     1C 00 90 FD | 	jmp	#LR__2755
1e85c                 | LR__2753
1e85c     12 FB 01 F6 | 	mov	result1, local04
1e860     14 00 90 FD | 	jmp	#LR__2755
1e864                 | LR__2754
1e864     01 22 86 F1 | 	sub	local03, #1
1e868     00 22 56 F2 | 	cmps	local03, #0 wc
1e86c     9C FF 9F 3D |  if_ae	jmp	#LR__2752
1e870     5C 01 00 FF 
1e874     B5 FA 05 F6 | 	mov	result1, ##@LR__4570
1e878                 | LR__2755
1e878     A7 F0 03 F6 | 	mov	ptra, fp
1e87c     B2 00 A0 FD | 	call	#popregs_
1e880                 | __system__RTrim_S_ret
1e880     2D 00 64 FD | 	ret
1e884                 | 
1e884                 | __system__Instr
1e884     07 4A 05 F6 | 	mov	COUNT_, #7
1e888     A8 00 A0 FD | 	call	#pushregs_
1e88c     09 1F 02 F6 | 	mov	local01, arg01
1e890     0A 21 02 F6 | 	mov	local02, arg02
1e894     0B 23 02 F6 | 	mov	local03, arg03
1e898     11 13 02 F6 | 	mov	arg01, local03
1e89c     09 25 02 F6 | 	mov	local04, arg01
1e8a0     97 06 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1e8a4                 | LR__2760
1e8a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e8a8     01 24 06 51 |  if_ne	add	local04, #1
1e8ac     F4 FF 9F 5D |  if_ne	jmp	#LR__2760
1e8b0                 | LR__2761
1e8b0     09 25 82 F1 | 	sub	local04, arg01
1e8b4     12 27 02 F6 | 	mov	local05, local04
1e8b8     10 13 02 F6 | 	mov	arg01, local02
1e8bc     09 25 02 F6 | 	mov	local04, arg01
1e8c0     97 06 48 FB | 	callpa	#(@LR__2763-@LR__2762)>>2,fcache_load_ptr_
1e8c4                 | LR__2762
1e8c4     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e8c8     01 24 06 51 |  if_ne	add	local04, #1
1e8cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2762
1e8d0                 | LR__2763
1e8d0     09 25 82 F1 | 	sub	local04, arg01
1e8d4     12 FB 01 F6 | 	mov	result1, local04
1e8d8     FD 18 0A F6 | 	mov	arg04, result1 wz
1e8dc     00 FA 05 A6 |  if_e	mov	result1, #0
1e8e0     98 00 90 AD |  if_e	jmp	#LR__2767
1e8e4     00 26 0E F2 | 	cmp	local05, #0 wz
1e8e8     00 FA 05 A6 |  if_e	mov	result1, #0
1e8ec     8C 00 90 AD |  if_e	jmp	#LR__2767
1e8f0     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1e8f4     00 FA 05 16 |  if_a	mov	result1, #0
1e8f8     80 00 90 1D |  if_a	jmp	#LR__2767
1e8fc     01 1E 56 F2 | 	cmps	local01, #1 wc
1e900     01 1E 06 C6 |  if_b	mov	local01, #1
1e904     11 29 C2 FA | 	rdbyte	local06, local03
1e908     01 26 0E F2 | 	cmp	local05, #1 wz
1e90c     18 00 90 5D |  if_ne	jmp	#LR__2764
1e910     10 13 02 F6 | 	mov	arg01, local02
1e914     14 15 02 F6 | 	mov	arg02, local06
1e918     0F 17 02 F6 | 	mov	arg03, local01
1e91c     00 18 06 F6 | 	mov	arg04, #0
1e920     B4 33 B0 FD | 	call	#__system____ScanForChar
1e924     54 00 90 FD | 	jmp	#LR__2767
1e928                 | LR__2764
1e928     0F 2B 02 F6 | 	mov	local07, local01
1e92c                 | LR__2765
1e92c     10 13 02 F6 | 	mov	arg01, local02
1e930     14 15 02 F6 | 	mov	arg02, local06
1e934     15 17 02 F6 | 	mov	arg03, local07
1e938     00 18 06 F6 | 	mov	arg04, #0
1e93c     98 33 B0 FD | 	call	#__system____ScanForChar
1e940     FD 2A 0A F6 | 	mov	local07, result1 wz
1e944     30 00 90 AD |  if_e	jmp	#LR__2766
1e948     13 17 02 F6 | 	mov	arg03, local05
1e94c     10 13 02 F6 | 	mov	arg01, local02
1e950     15 15 02 F6 | 	mov	arg02, local07
1e954     FC FA BF FD | 	call	#__system__Mid_S
1e958     FD 12 02 F6 | 	mov	arg01, result1
1e95c     11 15 02 F6 | 	mov	arg02, local03
1e960     BC D9 BF FD | 	call	#__system___string_cmp
1e964     00 FA 0D F2 | 	cmp	result1, #0 wz
1e968     15 FB 01 A6 |  if_e	mov	result1, local07
1e96c     0C 00 90 AD |  if_e	jmp	#LR__2767
1e970     13 2B 02 F1 | 	add	local07, local05
1e974     B4 FF 9F FD | 	jmp	#LR__2765
1e978                 | LR__2766
1e978     00 FA 05 F6 | 	mov	result1, #0
1e97c                 | LR__2767
1e97c     A7 F0 03 F6 | 	mov	ptra, fp
1e980     B2 00 A0 FD | 	call	#popregs_
1e984                 | __system__Instr_ret
1e984     2D 00 64 FD | 	ret
1e988                 | 
1e988                 | __system___strerror
1e988     00 12 56 F2 | 	cmps	arg01, #0 wc
1e98c     08 00 90 CD |  if_b	jmp	#LR__2770
1e990     1A 12 56 F2 | 	cmps	arg01, #26 wc
1e994     04 00 90 CD |  if_b	jmp	#LR__2771
1e998                 | LR__2770
1e998     19 12 06 F6 | 	mov	arg01, #25
1e99c                 | LR__2771
1e99c     02 12 66 F0 | 	shl	arg01, #2
1e9a0     01 00 00 FF 
1e9a4     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
1e9a8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1e9ac     09 FB 01 FB | 	rdlong	result1, arg01
1e9b0     01 00 00 FF 
1e9b4     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
1e9b8                 | __system___strerror_ret
1e9b8     2D 00 64 FD | 	ret
1e9bc                 | 
1e9bc                 | __system___int64_shl
1e9bc     20 16 CE F7 | 	test	arg03, #32 wz
1e9c0     09 15 02 56 |  if_ne	mov	arg02, arg01
1e9c4     00 12 06 56 |  if_ne	mov	arg01, #0
1e9c8     1F 16 CE F7 | 	test	arg03, #31 wz
1e9cc     18 00 90 AD |  if_e	jmp	#LR__2780
1e9d0     0B 15 62 F0 | 	shl	arg02, arg03
1e9d4     09 FB 01 F6 | 	mov	result1, arg01
1e9d8     0B FD 61 F6 | 	neg	result2, arg03
1e9dc     FE FA 41 F0 | 	shr	result1, result2
1e9e0     FD 14 42 F5 | 	or	arg02, result1
1e9e4     0B 13 62 F0 | 	shl	arg01, arg03
1e9e8                 | LR__2780
1e9e8     0A FD 01 F6 | 	mov	result2, arg02
1e9ec     09 FB 01 F6 | 	mov	result1, arg01
1e9f0                 | __system___int64_shl_ret
1e9f0     2D 00 64 FD | 	ret
1e9f4                 | 
1e9f4                 | __system___usepins
1e9f4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1e9f8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1e9fc     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
1ea00     00 13 CA F7 | 	test	arg01, _var01 wz
1ea04     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
1ea08     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1ea0c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
1ea10     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1ea14     00 FA 05 56 |  if_ne	mov	result1, #0
1ea18     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1ea1c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1ea20     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1ea24     09 03 42 F5 | 	or	_var02, arg01
1ea28     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1ea2c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ea30     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1ea34     0A 03 42 F5 | 	or	_var02, arg02
1ea38     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1ea3c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1ea40     01 FA 65 F6 | 	neg	result1, #1
1ea44                 | __system___usepins_ret
1ea44     2D 00 64 FD | 	ret
1ea48                 | 
1ea48                 | __system___freepins
1ea48     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1ea4c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ea50     09 01 22 F5 | 	andn	_var01, arg01
1ea54     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ea58     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ea5c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ea60     0A 01 22 F5 | 	andn	_var01, arg02
1ea64     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ea68     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1ea6c                 | __system___freepins_ret
1ea6c     2D 00 64 FD | 	ret
1ea70                 | 
1ea70                 | __system___float_fromuns
1ea70     09 17 0A F6 | 	mov	arg03, arg01 wz
1ea74     0B FB 01 A6 |  if_e	mov	result1, arg03
1ea78     24 00 90 AD |  if_e	jmp	#LR__2790
1ea7c     0B 15 92 F7 | 	encod	arg02, arg03 wc
1ea80     01 14 06 C1 |  if_b	add	arg02, #1
1ea84     01 14 86 F1 | 	sub	arg02, #1
1ea88     1F 12 06 F6 | 	mov	arg01, #31
1ea8c     0A 13 82 F1 | 	sub	arg01, arg02
1ea90     09 17 62 F0 | 	shl	arg03, arg01
1ea94     02 16 46 F0 | 	shr	arg03, #2
1ea98     00 12 06 F6 | 	mov	arg01, #0
1ea9c     4C 09 B0 FD | 	call	#__system___float_Pack
1eaa0                 | LR__2790
1eaa0                 | __system___float_fromuns_ret
1eaa0     2D 00 64 FD | 	ret
1eaa4                 | 
1eaa4                 | __system___float_add
1eaa4     0F 4A 05 F6 | 	mov	COUNT_, #15
1eaa8     A8 00 A0 FD | 	call	#pushregs_
1eaac     09 1F 02 F6 | 	mov	local01, arg01
1eab0     0A 21 02 F6 | 	mov	local02, arg02
1eab4     00 22 06 F6 | 	mov	local03, #0
1eab8     0F 25 02 F6 | 	mov	local04, local01
1eabc     12 27 02 F6 | 	mov	local05, local04
1eac0     16 26 46 F7 | 	zerox	local05, #22
1eac4     12 29 02 F6 | 	mov	local06, local04
1eac8     01 28 66 F0 | 	shl	local06, #1
1eacc     18 28 46 F0 | 	shr	local06, #24
1ead0     1F 24 46 F0 | 	shr	local04, #31
1ead4     10 13 02 F6 | 	mov	arg01, local02
1ead8     09 FB 01 F6 | 	mov	result1, arg01
1eadc     FD 2A 02 F6 | 	mov	local07, result1
1eae0     15 2D 02 F6 | 	mov	local08, local07
1eae4     16 2C 46 F7 | 	zerox	local08, #22
1eae8     15 2F 02 F6 | 	mov	local09, local07
1eaec     01 2E 66 F0 | 	shl	local09, #1
1eaf0     18 2E 46 F0 | 	shr	local09, #24
1eaf4     17 31 02 F6 | 	mov	local10, local09
1eaf8     1F 2A 46 F0 | 	shr	local07, #31
1eafc     00 32 06 F6 | 	mov	local11, #0
1eb00     00 34 06 F6 | 	mov	local12, #0
1eb04     18 29 12 F2 | 	cmp	local06, local10 wc
1eb08     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1eb0c     2C 00 90 1D |  if_a	jmp	#LR__2800
1eb10     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1eb14     24 00 90 3D |  if_ae	jmp	#LR__2800
1eb18     13 37 02 F6 | 	mov	local13, local05
1eb1c     16 27 02 F6 | 	mov	local05, local08
1eb20     1B 2D 02 F6 | 	mov	local08, local13
1eb24     14 37 02 F6 | 	mov	local13, local06
1eb28     18 29 02 F6 | 	mov	local06, local10
1eb2c     1B 31 02 F6 | 	mov	local10, local13
1eb30     12 37 02 F6 | 	mov	local13, local04
1eb34     15 25 02 F6 | 	mov	local04, local07
1eb38     1B 2B 02 F6 | 	mov	local07, local13
1eb3c                 | LR__2800
1eb3c     FF 28 0E F2 | 	cmp	local06, #255 wz
1eb40     70 01 90 AD |  if_e	jmp	#LR__2815
1eb44     00 28 0E F2 | 	cmp	local06, #0 wz
1eb48     AC 01 90 AD |  if_e	jmp	#LR__2817
1eb4c     17 26 26 F4 | 	bith	local05, #23
1eb50                 | LR__2801
1eb50     00 30 0E F2 | 	cmp	local10, #0 wz
1eb54     F0 01 90 AD |  if_e	jmp	#LR__2821
1eb58     17 2C 26 F4 | 	bith	local08, #23
1eb5c                 | LR__2802
1eb5c     7F 28 86 F1 | 	sub	local06, #127
1eb60     7F 30 86 F1 | 	sub	local10, #127
1eb64     14 39 02 F6 | 	mov	local14, local06
1eb68     18 39 82 F1 | 	sub	local14, local10
1eb6c     97 14 48 FB | 	callpa	#(@LR__2804-@LR__2803)>>2,fcache_load_ptr_
1eb70                 | LR__2803
1eb70     20 38 56 F2 | 	cmps	local14, #32 wc
1eb74     20 00 90 CD |  if_b	jmp	#LR__2805
1eb78     16 2F 02 F6 | 	mov	local09, local08
1eb7c     00 32 0E F2 | 	cmp	local11, #0 wz
1eb80     6F 32 62 FD | 	wrnz	local11
1eb84     19 2F 42 F5 | 	or	local09, local11
1eb88     17 33 02 F6 | 	mov	local11, local09
1eb8c     00 2C 06 F6 | 	mov	local08, #0
1eb90     20 38 86 F1 | 	sub	local14, #32
1eb94     D8 FF 9F FD | 	jmp	#LR__2803
1eb98                 | LR__2804
1eb98                 | LR__2805
1eb98     00 38 0E F2 | 	cmp	local14, #0 wz
1eb9c     38 00 90 AD |  if_e	jmp	#LR__2806
1eba0     16 37 02 F6 | 	mov	local13, local08
1eba4     20 30 06 F6 | 	mov	local10, #32
1eba8     1C 31 82 F1 | 	sub	local10, local14
1ebac     18 37 62 F0 | 	shl	local13, local10
1ebb0     19 31 02 F6 | 	mov	local10, local11
1ebb4     20 2E 06 F6 | 	mov	local09, #32
1ebb8     1C 2F 82 F1 | 	sub	local09, local14
1ebbc     17 31 6A F0 | 	shl	local10, local09 wz
1ebc0     1C 33 42 F0 | 	shr	local11, local14
1ebc4     1C 2D 42 F0 | 	shr	local08, local14
1ebc8     1B 33 42 F5 | 	or	local11, local13
1ebcc     00 3A 06 F6 | 	mov	local15, #0
1ebd0     01 3A 06 56 |  if_ne	mov	local15, #1
1ebd4     1D 33 42 F5 | 	or	local11, local15
1ebd8                 | LR__2806
1ebd8     12 3B 02 F6 | 	mov	local15, local04
1ebdc     15 3B 62 F5 | 	xor	local15, local07
1ebe0     01 3A CE F7 | 	test	local15, #1 wz
1ebe4     18 00 90 AD |  if_e	jmp	#LR__2807
1ebe8     16 2D 22 F6 | 	not	local08, local08
1ebec     19 33 22 F6 | 	not	local11, local11
1ebf0     01 32 0E F1 | 	add	local11, #1 wz
1ebf4     00 3A 06 F6 | 	mov	local15, #0
1ebf8     01 3A 06 A6 |  if_e	mov	local15, #1
1ebfc     1D 2D 02 F1 | 	add	local08, local15
1ec00                 | LR__2807
1ec00     19 35 12 F1 | 	add	local12, local11 wc
1ec04     16 27 22 F1 | 	addx	local05, local08
1ec08     00 26 56 F2 | 	cmps	local05, #0 wc
1ec0c     1C 00 90 3D |  if_ae	jmp	#LR__2808
1ec10     01 24 66 F5 | 	xor	local04, #1
1ec14     13 27 22 F6 | 	not	local05, local05
1ec18     1A 35 22 F6 | 	not	local12, local12
1ec1c     01 34 0E F1 | 	add	local12, #1 wz
1ec20     00 3A 06 F6 | 	mov	local15, #0
1ec24     01 3A 06 A6 |  if_e	mov	local15, #1
1ec28     1D 27 02 F1 | 	add	local05, local15
1ec2c                 | LR__2808
1ec2c     00 80 00 FF 
1ec30     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1ec34     28 00 90 CD |  if_b	jmp	#LR__2809
1ec38     01 28 06 F1 | 	add	local06, #1
1ec3c     1A 39 02 F6 | 	mov	local14, local12
1ec40     01 38 06 F5 | 	and	local14, #1
1ec44     01 34 46 F0 | 	shr	local12, #1
1ec48     13 3B 02 F6 | 	mov	local15, local05
1ec4c     1F 3A 66 F0 | 	shl	local15, #31
1ec50     1D 35 42 F5 | 	or	local12, local15
1ec54     1C 35 42 F5 | 	or	local12, local14
1ec58     01 26 46 F0 | 	shr	local05, #1
1ec5c     3C 00 90 FD | 	jmp	#LR__2814
1ec60                 | LR__2809
1ec60     00 40 00 FF 
1ec64     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ec68     30 00 90 3D |  if_ae	jmp	#LR__2813
1ec6c     00 26 0E F2 | 	cmp	local05, #0 wz
1ec70     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1ec74     08 24 46 A5 |  if_e	or	local04, #8
1ec78     01 24 26 A5 |  if_e	andn	local04, #1
1ec7c     1C 00 90 AD |  if_e	jmp	#LR__2812
1ec80                 | LR__2810
1ec80     00 40 00 FF 
1ec84     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ec88     10 00 90 3D |  if_ae	jmp	#LR__2811
1ec8c     1A 35 12 F1 | 	add	local12, local12 wc
1ec90     13 27 22 F1 | 	addx	local05, local05
1ec94     01 28 86 F1 | 	sub	local06, #1
1ec98     E4 FF 9F FD | 	jmp	#LR__2810
1ec9c                 | LR__2811
1ec9c                 | LR__2812
1ec9c                 | LR__2813
1ec9c                 | LR__2814
1ec9c     13 13 02 F6 | 	mov	arg01, local05
1eca0     1A 15 02 F6 | 	mov	arg02, local12
1eca4     14 17 02 F6 | 	mov	arg03, local06
1eca8     12 19 02 F6 | 	mov	arg04, local04
1ecac     6C 34 B0 FD | 	call	#__system__pack_0540
1ecb0     DC 00 90 FD | 	jmp	#LR__2825
1ecb4                 | LR__2815
1ecb4     FF 30 0E F2 | 	cmp	local10, #255 wz
1ecb8     10 00 90 5D |  if_ne	jmp	#LR__2816
1ecbc     12 2B 0A F2 | 	cmp	local07, local04 wz
1ecc0     00 F8 3F 5F 
1ecc4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ecc8     C4 00 90 5D |  if_ne	jmp	#LR__2825
1eccc                 | LR__2816
1eccc     00 26 0E F2 | 	cmp	local05, #0 wz
1ecd0     00 F8 3F 5F 
1ecd4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ecd8     B4 00 90 5D |  if_ne	jmp	#LR__2825
1ecdc     1A 15 02 F6 | 	mov	arg02, local12
1ece0     14 17 02 F6 | 	mov	arg03, local06
1ece4     12 19 02 F6 | 	mov	arg04, local04
1ece8     02 18 46 F5 | 	or	arg04, #2
1ecec     13 13 02 F6 | 	mov	arg01, local05
1ecf0     28 34 B0 FD | 	call	#__system__pack_0540
1ecf4     98 00 90 FD | 	jmp	#LR__2825
1ecf8                 | LR__2817
1ecf8     00 26 0E F2 | 	cmp	local05, #0 wz
1ecfc     28 00 90 AD |  if_e	jmp	#LR__2820
1ed00     01 26 66 F0 | 	shl	local05, #1
1ed04     97 0E 48 FB | 	callpa	#(@LR__2819-@LR__2818)>>2,fcache_load_ptr_
1ed08                 | LR__2818
1ed08     00 40 00 FF 
1ed0c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ed10     14 3B 02 C6 |  if_b	mov	local15, local06
1ed14     01 3A 86 C1 |  if_b	sub	local15, #1
1ed18     1D 29 02 C6 |  if_b	mov	local06, local15
1ed1c     01 26 66 C0 |  if_b	shl	local05, #1
1ed20     E4 FF 9F CD |  if_b	jmp	#LR__2818
1ed24                 | LR__2819
1ed24     28 FE 9F FD | 	jmp	#LR__2801
1ed28                 | LR__2820
1ed28     15 25 02 F5 | 	and	local04, local07
1ed2c     12 19 02 F6 | 	mov	arg04, local04
1ed30     08 18 46 F5 | 	or	arg04, #8
1ed34     00 12 06 F6 | 	mov	arg01, #0
1ed38     00 14 06 F6 | 	mov	arg02, #0
1ed3c     00 16 06 F6 | 	mov	arg03, #0
1ed40     D8 33 B0 FD | 	call	#__system__pack_0540
1ed44     48 00 90 FD | 	jmp	#LR__2825
1ed48                 | LR__2821
1ed48     00 2C 0E F2 | 	cmp	local08, #0 wz
1ed4c     28 00 90 AD |  if_e	jmp	#LR__2824
1ed50     01 2C 66 F0 | 	shl	local08, #1
1ed54     97 0E 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
1ed58                 | LR__2822
1ed58     00 40 00 FF 
1ed5c     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1ed60     18 3B 02 C6 |  if_b	mov	local15, local10
1ed64     01 3A 86 C1 |  if_b	sub	local15, #1
1ed68     1D 31 02 C6 |  if_b	mov	local10, local15
1ed6c     01 2C 66 C0 |  if_b	shl	local08, #1
1ed70     E4 FF 9F CD |  if_b	jmp	#LR__2822
1ed74                 | LR__2823
1ed74     E4 FD 9F FD | 	jmp	#LR__2802
1ed78                 | LR__2824
1ed78     7F 28 86 F1 | 	sub	local06, #127
1ed7c     13 13 02 F6 | 	mov	arg01, local05
1ed80     1A 15 02 F6 | 	mov	arg02, local12
1ed84     14 17 02 F6 | 	mov	arg03, local06
1ed88     12 19 02 F6 | 	mov	arg04, local04
1ed8c     8C 33 B0 FD | 	call	#__system__pack_0540
1ed90                 | LR__2825
1ed90     A7 F0 03 F6 | 	mov	ptra, fp
1ed94     B2 00 A0 FD | 	call	#popregs_
1ed98                 | __system___float_add_ret
1ed98     2D 00 64 FD | 	ret
1ed9c                 | 
1ed9c                 | __system___float_sqrt
1ed9c     04 4A 05 F6 | 	mov	COUNT_, #4
1eda0     A8 00 A0 FD | 	call	#pushregs_
1eda4     09 1F 02 F6 | 	mov	local01, arg01
1eda8     09 FB 01 F6 | 	mov	result1, arg01
1edac     FD 20 02 F6 | 	mov	local02, result1
1edb0     10 23 02 F6 | 	mov	local03, local02
1edb4     16 22 46 F7 | 	zerox	local03, #22
1edb8     10 25 02 F6 | 	mov	local04, local02
1edbc     01 24 66 F0 | 	shl	local04, #1
1edc0     18 24 4E F0 | 	shr	local04, #24 wz
1edc4     1F 20 46 F0 | 	shr	local02, #31
1edc8     70 00 90 AD |  if_e	jmp	#LR__2831
1edcc     17 22 26 F4 | 	bith	local03, #23
1edd0                 | LR__2830
1edd0     00 20 0E F2 | 	cmp	local02, #0 wz
1edd4     00 F8 3F 5F 
1edd8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1eddc     88 00 90 5D |  if_ne	jmp	#LR__2834
1ede0     FF 24 0E F2 | 	cmp	local04, #255 wz
1ede4     0F FB 01 A6 |  if_e	mov	result1, local01
1ede8     7C 00 90 AD |  if_e	jmp	#LR__2834
1edec     7F 24 86 F1 | 	sub	local04, #127
1edf0     01 24 CE F7 | 	test	local04, #1 wz
1edf4     01 22 66 50 |  if_ne	shl	local03, #1
1edf8     05 22 66 F0 | 	shl	local03, #5
1edfc     11 01 38 FD | 	qsqrt	#0, local03
1ee00     01 24 86 51 |  if_ne	sub	local04, #1
1ee04     12 25 52 F6 | 	abs	local04, local04 wc
1ee08     01 24 46 F0 | 	shr	local04, #1
1ee0c     12 17 82 F6 | 	negc	arg03, local04
1ee10     10 19 02 F6 | 	mov	arg04, local02
1ee14     18 12 62 FD | 	getqx	arg01
1ee18     09 15 02 F6 | 	mov	arg02, arg01
1ee1c     19 14 66 F0 | 	shl	arg02, #25
1ee20     07 12 46 F0 | 	shr	arg01, #7
1ee24     00 80 00 FF 
1ee28     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1ee2c     01 16 06 31 |  if_ae	add	arg03, #1
1ee30     01 12 46 30 |  if_ae	shr	arg01, #1
1ee34     E4 32 B0 FD | 	call	#__system__pack_0540
1ee38     2C 00 90 FD | 	jmp	#LR__2834
1ee3c                 | LR__2831
1ee3c     00 22 0E F2 | 	cmp	local03, #0 wz
1ee40     0F FB 01 A6 |  if_e	mov	result1, local01
1ee44     20 00 90 AD |  if_e	jmp	#LR__2834
1ee48     01 22 66 F0 | 	shl	local03, #1
1ee4c     97 0A 48 FB | 	callpa	#(@LR__2833-@LR__2832)>>2,fcache_load_ptr_
1ee50                 | LR__2832
1ee50     00 40 00 FF 
1ee54     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1ee58     01 24 86 C1 |  if_b	sub	local04, #1
1ee5c     01 22 66 C0 |  if_b	shl	local03, #1
1ee60     EC FF 9F CD |  if_b	jmp	#LR__2832
1ee64                 | LR__2833
1ee64     68 FF 9F FD | 	jmp	#LR__2830
1ee68                 | LR__2834
1ee68     A7 F0 03 F6 | 	mov	ptra, fp
1ee6c     B2 00 A0 FD | 	call	#popregs_
1ee70                 | __system___float_sqrt_ret
1ee70     2D 00 64 FD | 	ret
1ee74                 | 
1ee74                 | __system___float_mul
1ee74     0B 4A 05 F6 | 	mov	COUNT_, #11
1ee78     A8 00 A0 FD | 	call	#pushregs_
1ee7c     09 1F 02 F6 | 	mov	local01, arg01
1ee80     0A 21 02 F6 | 	mov	local02, arg02
1ee84     0F 23 02 F6 | 	mov	local03, local01
1ee88     11 25 02 F6 | 	mov	local04, local03
1ee8c     16 24 46 F7 | 	zerox	local04, #22
1ee90     11 27 02 F6 | 	mov	local05, local03
1ee94     01 26 66 F0 | 	shl	local05, #1
1ee98     18 26 46 F0 | 	shr	local05, #24
1ee9c     1F 22 46 F0 | 	shr	local03, #31
1eea0     10 FB 01 F6 | 	mov	result1, local02
1eea4     FD 28 02 F6 | 	mov	local06, result1
1eea8     14 2B 02 F6 | 	mov	local07, local06
1eeac     16 2A 46 F7 | 	zerox	local07, #22
1eeb0     14 2D 02 F6 | 	mov	local08, local06
1eeb4     01 2C 66 F0 | 	shl	local08, #1
1eeb8     18 2C 46 F0 | 	shr	local08, #24
1eebc     1F 28 46 F0 | 	shr	local06, #31
1eec0     14 23 62 F5 | 	xor	local03, local06
1eec4     FF 26 0E F2 | 	cmp	local05, #255 wz
1eec8     90 00 90 AD |  if_e	jmp	#LR__2843
1eecc     FF 2C 0E F2 | 	cmp	local08, #255 wz
1eed0     D8 00 90 AD |  if_e	jmp	#LR__2845
1eed4     00 26 0E F2 | 	cmp	local05, #0 wz
1eed8     0C 01 90 AD |  if_e	jmp	#LR__2846
1eedc     17 24 26 F4 | 	bith	local04, #23
1eee0                 | LR__2840
1eee0     00 2C 0E F2 | 	cmp	local08, #0 wz
1eee4     44 01 90 AD |  if_e	jmp	#LR__2850
1eee8     17 2A 26 F4 | 	bith	local07, #23
1eeec                 | LR__2841
1eeec     12 21 02 F6 | 	mov	local02, local04
1eef0     04 20 66 F0 | 	shl	local02, #4
1eef4     15 29 02 F6 | 	mov	local06, local07
1eef8     05 28 66 F0 | 	shl	local06, #5
1eefc     14 21 02 FD | 	qmul	local02, local06
1ef00     16 27 02 F1 | 	add	local05, local08
1ef04     FE 26 86 F1 | 	sub	local05, #254
1ef08     13 2F 02 F6 | 	mov	local09, local05
1ef0c     04 24 66 F0 | 	shl	local04, #4
1ef10     05 2A 66 F0 | 	shl	local07, #5
1ef14     18 30 62 FD | 	getqx	local10
1ef18     15 25 02 FD | 	qmul	local04, local07
1ef1c     19 32 62 FD | 	getqy	local11
1ef20     00 80 00 FF 
1ef24     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1ef28     18 00 90 CD |  if_b	jmp	#LR__2842
1ef2c     01 2E 06 F1 | 	add	local09, #1
1ef30     01 30 46 F0 | 	shr	local10, #1
1ef34     19 2D 02 F6 | 	mov	local08, local11
1ef38     1F 2C 66 F0 | 	shl	local08, #31
1ef3c     16 31 42 F5 | 	or	local10, local08
1ef40     01 32 46 F0 | 	shr	local11, #1
1ef44                 | LR__2842
1ef44     19 13 02 F6 | 	mov	arg01, local11
1ef48     18 15 02 F6 | 	mov	arg02, local10
1ef4c     17 17 02 F6 | 	mov	arg03, local09
1ef50     11 19 02 F6 | 	mov	arg04, local03
1ef54     C4 31 B0 FD | 	call	#__system__pack_0540
1ef58     10 01 90 FD | 	jmp	#LR__2854
1ef5c                 | LR__2843
1ef5c     00 24 0E F2 | 	cmp	local04, #0 wz
1ef60     0F FB 01 56 |  if_ne	mov	result1, local01
1ef64     04 01 90 5D |  if_ne	jmp	#LR__2854
1ef68     FF 2C 56 F2 | 	cmps	local08, #255 wc
1ef6c     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1ef70     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1ef74     18 00 90 4D |  if_c_and_nz	jmp	#LR__2844
1ef78     00 F8 3F CF 
1ef7c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1ef80     E8 00 90 CD |  if_b	jmp	#LR__2854
1ef84     00 2A 0E F2 | 	cmp	local07, #0 wz
1ef88     10 FB 01 56 |  if_ne	mov	result1, local02
1ef8c     DC 00 90 5D |  if_ne	jmp	#LR__2854
1ef90                 | LR__2844
1ef90     02 22 46 F5 | 	or	local03, #2
1ef94     00 12 06 F6 | 	mov	arg01, #0
1ef98     00 14 06 F6 | 	mov	arg02, #0
1ef9c     13 17 02 F6 | 	mov	arg03, local05
1efa0     11 19 02 F6 | 	mov	arg04, local03
1efa4     74 31 B0 FD | 	call	#__system__pack_0540
1efa8     C0 00 90 FD | 	jmp	#LR__2854
1efac                 | LR__2845
1efac     00 26 0E F2 | 	cmp	local05, #0 wz
1efb0     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1efb4     00 F8 3F AF 
1efb8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1efbc     AC 00 90 AD |  if_e	jmp	#LR__2854
1efc0     00 2A 0E F2 | 	cmp	local07, #0 wz
1efc4     10 FB 01 56 |  if_ne	mov	result1, local02
1efc8     A0 00 90 5D |  if_ne	jmp	#LR__2854
1efcc     16 17 02 F6 | 	mov	arg03, local08
1efd0     11 19 02 F6 | 	mov	arg04, local03
1efd4     02 18 46 F5 | 	or	arg04, #2
1efd8     00 12 06 F6 | 	mov	arg01, #0
1efdc     00 14 06 F6 | 	mov	arg02, #0
1efe0     38 31 B0 FD | 	call	#__system__pack_0540
1efe4     84 00 90 FD | 	jmp	#LR__2854
1efe8                 | LR__2846
1efe8     00 24 0E F2 | 	cmp	local04, #0 wz
1efec     20 00 90 AD |  if_e	jmp	#LR__2849
1eff0     01 24 66 F0 | 	shl	local04, #1
1eff4     97 0A 48 FB | 	callpa	#(@LR__2848-@LR__2847)>>2,fcache_load_ptr_
1eff8                 | LR__2847
1eff8     00 40 00 FF 
1effc     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1f000     01 26 86 C1 |  if_b	sub	local05, #1
1f004     01 24 66 C0 |  if_b	shl	local04, #1
1f008     EC FF 9F CD |  if_b	jmp	#LR__2847
1f00c                 | LR__2848
1f00c     D0 FE 9F FD | 	jmp	#LR__2840
1f010                 | LR__2849
1f010     08 22 46 F5 | 	or	local03, #8
1f014     00 12 06 F6 | 	mov	arg01, #0
1f018     00 14 06 F6 | 	mov	arg02, #0
1f01c     00 16 06 F6 | 	mov	arg03, #0
1f020     11 19 02 F6 | 	mov	arg04, local03
1f024     F4 30 B0 FD | 	call	#__system__pack_0540
1f028     40 00 90 FD | 	jmp	#LR__2854
1f02c                 | LR__2850
1f02c     00 2A 0E F2 | 	cmp	local07, #0 wz
1f030     20 00 90 AD |  if_e	jmp	#LR__2853
1f034     01 2A 66 F0 | 	shl	local07, #1
1f038     97 0A 48 FB | 	callpa	#(@LR__2852-@LR__2851)>>2,fcache_load_ptr_
1f03c                 | LR__2851
1f03c     00 40 00 FF 
1f040     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1f044     01 2C 86 C1 |  if_b	sub	local08, #1
1f048     01 2A 66 C0 |  if_b	shl	local07, #1
1f04c     EC FF 9F CD |  if_b	jmp	#LR__2851
1f050                 | LR__2852
1f050     98 FE 9F FD | 	jmp	#LR__2841
1f054                 | LR__2853
1f054     08 22 46 F5 | 	or	local03, #8
1f058     00 12 06 F6 | 	mov	arg01, #0
1f05c     00 14 06 F6 | 	mov	arg02, #0
1f060     00 16 06 F6 | 	mov	arg03, #0
1f064     11 19 02 F6 | 	mov	arg04, local03
1f068     B0 30 B0 FD | 	call	#__system__pack_0540
1f06c                 | LR__2854
1f06c     A7 F0 03 F6 | 	mov	ptra, fp
1f070     B2 00 A0 FD | 	call	#popregs_
1f074                 | __system___float_mul_ret
1f074     2D 00 64 FD | 	ret
1f078                 | 
1f078                 | __system___float_div
1f078     0E 4A 05 F6 | 	mov	COUNT_, #14
1f07c     A8 00 A0 FD | 	call	#pushregs_
1f080     09 23 02 F6 | 	mov	local03, arg01
1f084     0A 25 02 F6 | 	mov	local04, arg02
1f088     11 27 02 F6 | 	mov	local05, local03
1f08c     13 29 02 F6 | 	mov	local06, local05
1f090     16 28 46 F7 | 	zerox	local06, #22
1f094     13 2B 02 F6 | 	mov	local07, local05
1f098     01 2A 66 F0 | 	shl	local07, #1
1f09c     18 2A 46 F0 | 	shr	local07, #24
1f0a0     1F 26 46 F0 | 	shr	local05, #31
1f0a4     12 FB 01 F6 | 	mov	result1, local04
1f0a8     FD 2C 02 F6 | 	mov	local08, result1
1f0ac     16 2F 02 F6 | 	mov	local09, local08
1f0b0     16 2E 46 F7 | 	zerox	local09, #22
1f0b4     16 31 02 F6 | 	mov	local10, local08
1f0b8     01 30 66 F0 | 	shl	local10, #1
1f0bc     18 30 46 F0 | 	shr	local10, #24
1f0c0     1F 2C 46 F0 | 	shr	local08, #31
1f0c4     16 27 62 F5 | 	xor	local05, local08
1f0c8     FF 2A 0E F2 | 	cmp	local07, #255 wz
1f0cc     D4 00 90 AD |  if_e	jmp	#LR__2865
1f0d0     FF 30 0E F2 | 	cmp	local10, #255 wz
1f0d4     04 01 90 AD |  if_e	jmp	#LR__2866
1f0d8     00 2A 0E F2 | 	cmp	local07, #0 wz
1f0dc     24 01 90 AD |  if_e	jmp	#LR__2867
1f0e0     17 28 26 F4 | 	bith	local06, #23
1f0e4                 | LR__2860
1f0e4     00 30 0E F2 | 	cmp	local10, #0 wz
1f0e8     70 01 90 AD |  if_e	jmp	#LR__2871
1f0ec     17 2E 26 F4 | 	bith	local09, #23
1f0f0                 | LR__2861
1f0f0     18 2B 82 F1 | 	sub	local07, local10
1f0f4     15 33 02 F6 | 	mov	local11, local07
1f0f8     14 13 02 F6 | 	mov	arg01, local06
1f0fc     02 12 46 F0 | 	shr	arg01, #2
1f100     1E 28 66 F0 | 	shl	local06, #30
1f104     14 15 02 F6 | 	mov	arg02, local06
1f108     17 17 02 F6 | 	mov	arg03, local09
1f10c     28 12 62 FD | 	setq	arg01
1f110     0B 15 12 FD | 	qdiv	arg02, arg03
1f114     00 34 06 F6 | 	mov	local12, #0
1f118     18 1E 62 FD | 	getqx	local01
1f11c     19 FC 61 FD | 	getqy	result2
1f120     FE 20 02 F6 | 	mov	local02, result2
1f124     0F 37 02 F6 | 	mov	local13, local01
1f128     00 20 4E F2 | 	cmps	local02, #0 wz
1f12c     1B 39 02 F6 | 	mov	local14, local13
1f130     19 38 66 F0 | 	shl	local14, #25
1f134     01 34 06 56 |  if_ne	mov	local12, #1
1f138     1A 39 42 F5 | 	or	local14, local12
1f13c     07 36 46 F0 | 	shr	local13, #7
1f140     00 80 00 FF 
1f144     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1f148     1C 00 90 CD |  if_b	jmp	#LR__2862
1f14c     01 32 06 F1 | 	add	local11, #1
1f150     01 38 46 F0 | 	shr	local14, #1
1f154     1B 35 02 F6 | 	mov	local12, local13
1f158     1F 34 66 F0 | 	shl	local12, #31
1f15c     1A 39 42 F5 | 	or	local14, local12
1f160     01 36 46 F0 | 	shr	local13, #1
1f164     24 00 90 FD | 	jmp	#LR__2864
1f168                 | LR__2862
1f168     00 40 00 FF 
1f16c     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1f170     18 00 90 3D |  if_ae	jmp	#LR__2863
1f174     01 32 86 F1 | 	sub	local11, #1
1f178     01 36 66 F0 | 	shl	local13, #1
1f17c     1C 35 02 F6 | 	mov	local12, local14
1f180     1F 34 46 F0 | 	shr	local12, #31
1f184     1A 37 42 F5 | 	or	local13, local12
1f188     01 38 66 F0 | 	shl	local14, #1
1f18c                 | LR__2863
1f18c                 | LR__2864
1f18c     1B 13 02 F6 | 	mov	arg01, local13
1f190     1C 15 02 F6 | 	mov	arg02, local14
1f194     19 17 02 F6 | 	mov	arg03, local11
1f198     13 19 02 F6 | 	mov	arg04, local05
1f19c     7C 2F B0 FD | 	call	#__system__pack_0540
1f1a0     F8 00 90 FD | 	jmp	#LR__2875
1f1a4                 | LR__2865
1f1a4     00 28 0E F2 | 	cmp	local06, #0 wz
1f1a8     11 FB 01 56 |  if_ne	mov	result1, local03
1f1ac     EC 00 90 5D |  if_ne	jmp	#LR__2875
1f1b0     FF 30 0E F2 | 	cmp	local10, #255 wz
1f1b4     00 F8 3F AF 
1f1b8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f1bc     DC 00 90 AD |  if_e	jmp	#LR__2875
1f1c0     02 26 46 F5 | 	or	local05, #2
1f1c4     00 12 06 F6 | 	mov	arg01, #0
1f1c8     00 14 06 F6 | 	mov	arg02, #0
1f1cc     15 17 02 F6 | 	mov	arg03, local07
1f1d0     13 19 02 F6 | 	mov	arg04, local05
1f1d4     44 2F B0 FD | 	call	#__system__pack_0540
1f1d8     C0 00 90 FD | 	jmp	#LR__2875
1f1dc                 | LR__2866
1f1dc     00 2E 0E F2 | 	cmp	local09, #0 wz
1f1e0     12 FB 01 56 |  if_ne	mov	result1, local04
1f1e4     B4 00 90 5D |  if_ne	jmp	#LR__2875
1f1e8     13 19 02 F6 | 	mov	arg04, local05
1f1ec     08 18 46 F5 | 	or	arg04, #8
1f1f0     00 12 06 F6 | 	mov	arg01, #0
1f1f4     00 14 06 F6 | 	mov	arg02, #0
1f1f8     00 16 06 F6 | 	mov	arg03, #0
1f1fc     1C 2F B0 FD | 	call	#__system__pack_0540
1f200     98 00 90 FD | 	jmp	#LR__2875
1f204                 | LR__2867
1f204     00 28 0E F2 | 	cmp	local06, #0 wz
1f208     20 00 90 AD |  if_e	jmp	#LR__2870
1f20c     01 28 66 F0 | 	shl	local06, #1
1f210     97 0A 48 FB | 	callpa	#(@LR__2869-@LR__2868)>>2,fcache_load_ptr_
1f214                 | LR__2868
1f214     00 40 00 FF 
1f218     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1f21c     01 2A 86 C1 |  if_b	sub	local07, #1
1f220     01 28 66 C0 |  if_b	shl	local06, #1
1f224     EC FF 9F CD |  if_b	jmp	#LR__2868
1f228                 | LR__2869
1f228     B8 FE 9F FD | 	jmp	#LR__2860
1f22c                 | LR__2870
1f22c     00 30 0E F2 | 	cmp	local10, #0 wz
1f230     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1f234     00 F8 3F AF 
1f238     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f23c     5C 00 90 AD |  if_e	jmp	#LR__2875
1f240     13 19 02 F6 | 	mov	arg04, local05
1f244     08 18 46 F5 | 	or	arg04, #8
1f248     00 12 06 F6 | 	mov	arg01, #0
1f24c     00 14 06 F6 | 	mov	arg02, #0
1f250     00 16 06 F6 | 	mov	arg03, #0
1f254     C4 2E B0 FD | 	call	#__system__pack_0540
1f258     40 00 90 FD | 	jmp	#LR__2875
1f25c                 | LR__2871
1f25c     00 2E 0E F2 | 	cmp	local09, #0 wz
1f260     20 00 90 AD |  if_e	jmp	#LR__2874
1f264     01 2E 66 F0 | 	shl	local09, #1
1f268     97 0A 48 FB | 	callpa	#(@LR__2873-@LR__2872)>>2,fcache_load_ptr_
1f26c                 | LR__2872
1f26c     00 40 00 FF 
1f270     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1f274     01 30 86 C1 |  if_b	sub	local10, #1
1f278     01 2E 66 C0 |  if_b	shl	local09, #1
1f27c     EC FF 9F CD |  if_b	jmp	#LR__2872
1f280                 | LR__2873
1f280     6C FE 9F FD | 	jmp	#LR__2861
1f284                 | LR__2874
1f284     02 26 46 F5 | 	or	local05, #2
1f288     00 12 06 F6 | 	mov	arg01, #0
1f28c     00 14 06 F6 | 	mov	arg02, #0
1f290     00 16 06 F6 | 	mov	arg03, #0
1f294     13 19 02 F6 | 	mov	arg04, local05
1f298     80 2E B0 FD | 	call	#__system__pack_0540
1f29c                 | LR__2875
1f29c     A7 F0 03 F6 | 	mov	ptra, fp
1f2a0     B2 00 A0 FD | 	call	#popregs_
1f2a4                 | __system___float_div_ret
1f2a4     2D 00 64 FD | 	ret
1f2a8                 | 
1f2a8                 | __system___float_cmp
1f2a8     00 C0 3F FF 
1f2ac     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1f2b0     00 C0 3F CF 
1f2b4     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1f2b8     0B FB 01 36 |  if_ae	mov	result1, arg03
1f2bc     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1f2c0     00 C0 7F FF 
1f2c4     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1f2c8     00 C0 7F CF 
1f2cc     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1f2d0     0B FB 01 36 |  if_ae	mov	result1, arg03
1f2d4     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1f2d8     00 12 56 F2 | 	cmps	arg01, #0 wc
1f2dc     2C 00 90 3D |  if_ae	jmp	#LR__2880
1f2e0     00 14 56 F2 | 	cmps	arg02, #0 wc
1f2e4     0A FB 01 C6 |  if_b	mov	result1, arg02
1f2e8     09 FB 81 C1 |  if_b	sub	result1, arg01
1f2ec     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1f2f0     00 14 0E F2 | 	cmp	arg02, #0 wz
1f2f4     00 00 40 AF 
1f2f8     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1f2fc     00 FA 05 A6 |  if_e	mov	result1, #0
1f300     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1f304     01 FA 65 F6 | 	neg	result1, #1
1f308     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1f30c                 | LR__2880
1f30c     00 14 56 F2 | 	cmps	arg02, #0 wc
1f310     1C 00 90 3D |  if_ae	jmp	#LR__2881
1f314     00 12 0E F2 | 	cmp	arg01, #0 wz
1f318     00 00 40 AF 
1f31c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1f320     00 FA 05 A6 |  if_e	mov	result1, #0
1f324     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1f328     01 FA 05 F6 | 	mov	result1, #1
1f32c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1f330                 | LR__2881
1f330     0A 13 82 F1 | 	sub	arg01, arg02
1f334     09 FB 01 F6 | 	mov	result1, arg01
1f338                 | __system___float_cmp_ret
1f338     2D 00 64 FD | 	ret
1f33c                 | 
1f33c                 | __system___float_tointeger
1f33c     02 4A 05 F6 | 	mov	COUNT_, #2
1f340     A8 00 A0 FD | 	call	#pushregs_
1f344     50 00 B0 FD | 	call	#__system___float_Unpack
1f348     FF FF 7F FF 
1f34c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1f350     34 00 90 CD |  if_b	jmp	#LR__2890
1f354     1F FC 55 F2 | 	cmps	result2, #31 wc
1f358     2C 00 90 3D |  if_ae	jmp	#LR__2890
1f35c     02 FE 65 F0 | 	shl	result3, #2
1f360     1E 1E 06 F6 | 	mov	local01, #30
1f364     FE 1E 82 F1 | 	sub	local01, result2
1f368     0F FF 41 F0 | 	shr	result3, local01
1f36c     FF 20 02 F6 | 	mov	local02, result3
1f370     0A 21 02 F1 | 	add	local02, arg02
1f374     01 20 46 F0 | 	shr	local02, #1
1f378     00 FA 0D F2 | 	cmp	result1, #0 wz
1f37c     10 21 62 56 |  if_ne	neg	local02, local02
1f380     10 FB 01 F6 | 	mov	result1, local02
1f384     04 00 90 FD | 	jmp	#LR__2891
1f388                 | LR__2890
1f388     00 FA 05 F6 | 	mov	result1, #0
1f38c                 | LR__2891
1f38c     A7 F0 03 F6 | 	mov	ptra, fp
1f390     B2 00 A0 FD | 	call	#popregs_
1f394                 | __system___float_tointeger_ret
1f394     2D 00 64 FD | 	ret
1f398                 | 
1f398                 | __system___float_Unpack
1f398     09 01 02 F6 | 	mov	_var01, arg01
1f39c     1F 00 46 F0 | 	shr	_var01, #31
1f3a0     09 03 02 F6 | 	mov	_var02, arg01
1f3a4     01 02 66 F0 | 	shl	_var02, #1
1f3a8     18 02 4E F0 | 	shr	_var02, #24 wz
1f3ac     17 13 06 F4 | 	bitl	arg01, #279
1f3b0     06 12 66 50 |  if_ne	shl	arg01, #6
1f3b4     1D 12 26 54 |  if_ne	bith	arg01, #29
1f3b8     1C 00 90 5D |  if_ne	jmp	#LR__2900
1f3bc     09 05 92 F7 | 	encod	_var03, arg01 wc
1f3c0     01 04 06 C1 |  if_b	add	_var03, #1
1f3c4     17 04 86 F1 | 	sub	_var03, #23
1f3c8     02 03 02 F6 | 	mov	_var02, _var03
1f3cc     07 FC 05 F6 | 	mov	result2, #7
1f3d0     02 FD 81 F1 | 	sub	result2, _var03
1f3d4     FE 12 62 F0 | 	shl	arg01, result2
1f3d8                 | LR__2900
1f3d8     7F 02 86 F1 | 	sub	_var02, #127
1f3dc     09 FF 01 F6 | 	mov	result3, arg01
1f3e0     00 FB 01 F6 | 	mov	result1, _var01
1f3e4     01 FD 01 F6 | 	mov	result2, _var02
1f3e8                 | __system___float_Unpack_ret
1f3e8     2D 00 64 FD | 	ret
1f3ec                 | 
1f3ec                 | __system___float_Pack
1f3ec     00 00 06 F6 | 	mov	_var01, #0
1f3f0     00 16 0E F2 | 	cmp	arg03, #0 wz
1f3f4     8C 00 90 AD |  if_e	jmp	#LR__2911
1f3f8     0B 03 92 F7 | 	encod	_var02, arg03 wc
1f3fc     01 02 06 C1 |  if_b	add	_var02, #1
1f400     21 00 06 F6 | 	mov	_var01, #33
1f404     01 01 82 F1 | 	sub	_var01, _var02
1f408     00 17 62 F0 | 	shl	arg03, _var01
1f40c     03 02 06 F6 | 	mov	_var02, #3
1f410     00 03 82 F1 | 	sub	_var02, _var01
1f414     01 15 02 F1 | 	add	arg02, _var02
1f418     0A 05 02 F6 | 	mov	_var03, arg02
1f41c     00 17 06 F1 | 	add	arg03, #256
1f420     0B 03 02 F6 | 	mov	_var02, arg03
1f424     FF 02 2E F5 | 	andn	_var02, #255 wz
1f428     01 04 06 A1 |  if_e	add	_var03, #1
1f42c     7F 04 06 F1 | 	add	_var03, #127
1f430     FF FF 7F FF 
1f434     E9 05 46 F3 | 	fges	_var03, ##-23
1f438     FF 04 66 F3 | 	fles	_var03, #255
1f43c     01 04 56 F2 | 	cmps	_var03, #1 wc
1f440     1C 00 90 3D |  if_ae	jmp	#LR__2910
1f444     01 16 46 F0 | 	shr	arg03, #1
1f448     1F 02 C6 F9 | 	decod	_var02, #31
1f44c     0B 03 02 F1 | 	add	_var02, arg03
1f450     02 05 62 F6 | 	neg	_var03, _var03
1f454     02 03 42 F0 | 	shr	_var02, _var03
1f458     01 17 02 F6 | 	mov	arg03, _var02
1f45c     00 04 06 F6 | 	mov	_var03, #0
1f460                 | LR__2910
1f460     09 FB 01 F6 | 	mov	result1, arg01
1f464     1F FA 65 F0 | 	shl	result1, #31
1f468     02 03 02 F6 | 	mov	_var02, _var03
1f46c     17 02 66 F0 | 	shl	_var02, #23
1f470     01 FB 41 F5 | 	or	result1, _var02
1f474     0B 07 02 F6 | 	mov	_var04, arg03
1f478     09 06 46 F0 | 	shr	_var04, #9
1f47c     03 FB 41 F5 | 	or	result1, _var04
1f480     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1f484                 | LR__2911
1f484     00 FB 01 F6 | 	mov	result1, _var01
1f488                 | __system___float_Pack_ret
1f488     2D 00 64 FD | 	ret
1f48c                 | 
1f48c                 | __system___basic_print_float
1f48c     05 4A 05 F6 | 	mov	COUNT_, #5
1f490     A8 00 A0 FD | 	call	#pushregs_
1f494     09 1F 02 F6 | 	mov	local01, arg01
1f498     0A 21 02 F6 | 	mov	local02, arg02
1f49c     0B 23 0A F6 | 	mov	local03, arg03 wz
1f4a0     0C 25 02 F6 | 	mov	local04, arg04
1f4a4     14 00 90 5D |  if_ne	jmp	#LR__2920
1f4a8     23 24 0E F2 | 	cmp	local04, #35 wz
1f4ac     80 02 10 AF 
1f4b0     00 26 06 A6 |  if_e	mov	local05, ##537198592
1f4b4     1D 26 C6 59 |  if_ne	decod	local05, #29
1f4b8     13 23 02 F6 | 	mov	local03, local05
1f4bc                 | LR__2920
1f4bc     0F 13 02 F6 | 	mov	arg01, local01
1f4c0     40 27 B0 FD | 	call	#__system___gettxfunc
1f4c4     FD 26 0A F6 | 	mov	local05, result1 wz
1f4c8     00 FA 05 A6 |  if_e	mov	result1, #0
1f4cc     13 13 02 56 |  if_ne	mov	arg01, local05
1f4d0     11 15 02 56 |  if_ne	mov	arg02, local03
1f4d4     10 17 02 56 |  if_ne	mov	arg03, local02
1f4d8     12 19 02 56 |  if_ne	mov	arg04, local04
1f4dc     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
1f4e0     A7 F0 03 F6 | 	mov	ptra, fp
1f4e4     B2 00 A0 FD | 	call	#popregs_
1f4e8                 | __system___basic_print_float_ret
1f4e8     2D 00 64 FD | 	ret
1f4ec                 | 
1f4ec                 | __system____builtin_atoi
1f4ec     07 4A 05 F6 | 	mov	COUNT_, #7
1f4f0     A8 00 A0 FD | 	call	#pushregs_
1f4f4                 | __system____builtin_atoi_enter
1f4f4     09 1F 02 F6 | 	mov	local01, arg01
1f4f8     0A 21 02 F6 | 	mov	local02, arg02
1f4fc     00 22 06 F6 | 	mov	local03, #0
1f500     00 24 06 F6 | 	mov	local04, #0
1f504     00 26 06 F6 | 	mov	local05, #0
1f508     97 08 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
1f50c                 | LR__2930
1f50c     0F 29 C2 FA | 	rdbyte	local06, local01
1f510     20 28 0E F2 | 	cmp	local06, #32 wz
1f514     01 1E 06 A1 |  if_e	add	local01, #1
1f518     F0 FF 9F AD |  if_e	jmp	#LR__2930
1f51c                 | LR__2931
1f51c     0F 2B C2 FA | 	rdbyte	local07, local01
1f520                 | LR__2932
1f520     2D 2A 0E F2 | 	cmp	local07, #45 wz
1f524     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1f528     18 00 90 5D |  if_ne	jmp	#LR__2933
1f52c     01 1E 06 F1 | 	add	local01, #1
1f530     2D 2A 0E F2 | 	cmp	local07, #45 wz
1f534     01 28 06 A6 |  if_e	mov	local06, #1
1f538     14 27 C2 A2 |  if_e	subr	local05, local06
1f53c     0F 2B C2 FA | 	rdbyte	local07, local01
1f540     DC FF 9F FD | 	jmp	#LR__2932
1f544                 | LR__2933
1f544     97 48 48 FB | 	callpa	#(@LR__2941-@LR__2934)>>2,fcache_load_ptr_
1f548                 | LR__2934
1f548                 | LR__2935
1f548     0F 2B C2 FA | 	rdbyte	local07, local01
1f54c     5F 2A 0E F2 | 	cmp	local07, #95 wz
1f550     01 1E 06 F1 | 	add	local01, #1
1f554     F0 FF 9F AD |  if_e	jmp	#LR__2935
1f558     30 2A 0E F2 | 	cmp	local07, #48 wz
1f55c     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1f560     00 24 06 A6 |  if_e	mov	local04, #0
1f564     60 00 90 AD |  if_e	jmp	#LR__2940
1f568     31 2A 56 F2 | 	cmps	local07, #49 wc
1f56c     18 00 90 CD |  if_b	jmp	#LR__2936
1f570     3A 2A 56 F2 | 	cmps	local07, #58 wc
1f574     15 25 02 C6 |  if_b	mov	local04, local07
1f578     30 24 86 C1 |  if_b	sub	local04, #48
1f57c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1f580     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1f584     40 00 90 CD |  if_b	jmp	#LR__2939
1f588                 | LR__2936
1f588     0B 20 56 F2 | 	cmps	local02, #11 wc
1f58c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1f590     14 00 90 CD |  if_b	jmp	#LR__2937
1f594     67 2A 56 F2 | 	cmps	local07, #103 wc
1f598     61 2A 86 C1 |  if_b	sub	local07, #97
1f59c     0A 24 06 C6 |  if_b	mov	local04, #10
1f5a0     15 25 02 C1 |  if_b	add	local04, local07
1f5a4     20 00 90 CD |  if_b	jmp	#LR__2938
1f5a8                 | LR__2937
1f5a8     0B 20 56 F2 | 	cmps	local02, #11 wc
1f5ac     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1f5b0     24 00 90 CD |  if_b	jmp	#LR__2942
1f5b4     47 2A 56 F2 | 	cmps	local07, #71 wc
1f5b8     41 2A 86 C1 |  if_b	sub	local07, #65
1f5bc     0A 24 06 C6 |  if_b	mov	local04, #10
1f5c0     15 25 02 C1 |  if_b	add	local04, local07
1f5c4     10 00 90 3D |  if_ae	jmp	#LR__2942
1f5c8                 | LR__2938
1f5c8                 | LR__2939
1f5c8                 | LR__2940
1f5c8     11 21 02 FD | 	qmul	local02, local03
1f5cc     18 22 62 FD | 	getqx	local03
1f5d0     12 23 02 F1 | 	add	local03, local04
1f5d4     70 FF 9F FD | 	jmp	#LR__2934
1f5d8                 | LR__2941
1f5d8                 | LR__2942
1f5d8     00 20 0E F2 | 	cmp	local02, #0 wz
1f5dc     64 00 90 5D |  if_ne	jmp	#LR__2948
1f5e0     78 2A 0E F2 | 	cmp	local07, #120 wz
1f5e4     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1f5e8     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1f5ec     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1f5f0     14 00 90 5D |  if_ne	jmp	#LR__2943
1f5f4     0F 13 02 F6 | 	mov	arg01, local01
1f5f8     10 14 06 F6 | 	mov	arg02, #16
1f5fc     EC FE BF FD | 	call	#__system____builtin_atoi
1f600     FD 22 02 F6 | 	mov	local03, result1
1f604     3C 00 90 FD | 	jmp	#LR__2947
1f608                 | LR__2943
1f608     62 2A 0E F2 | 	cmp	local07, #98 wz
1f60c     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1f610     14 00 90 5D |  if_ne	jmp	#LR__2944
1f614     0F 13 02 F6 | 	mov	arg01, local01
1f618     02 14 06 F6 | 	mov	arg02, #2
1f61c     CC FE BF FD | 	call	#__system____builtin_atoi
1f620     FD 22 02 F6 | 	mov	local03, result1
1f624     1C 00 90 FD | 	jmp	#LR__2946
1f628                 | LR__2944
1f628     6F 2A 0E F2 | 	cmp	local07, #111 wz
1f62c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1f630     10 00 90 5D |  if_ne	jmp	#LR__2945
1f634     0F 13 02 F6 | 	mov	arg01, local01
1f638     08 14 06 F6 | 	mov	arg02, #8
1f63c     AC FE BF FD | 	call	#__system____builtin_atoi
1f640     FD 22 02 F6 | 	mov	local03, result1
1f644                 | LR__2945
1f644                 | LR__2946
1f644                 | LR__2947
1f644                 | LR__2948
1f644     00 26 0E F2 | 	cmp	local05, #0 wz
1f648     11 23 62 56 |  if_ne	neg	local03, local03
1f64c     11 FB 01 F6 | 	mov	result1, local03
1f650     A7 F0 03 F6 | 	mov	ptra, fp
1f654     B2 00 A0 FD | 	call	#popregs_
1f658                 | __system____builtin_atoi_ret
1f658     2D 00 64 FD | 	ret
1f65c                 | 
1f65c                 | __system____builtin_atof
1f65c     07 4A 05 F6 | 	mov	COUNT_, #7
1f660     A8 00 A0 FD | 	call	#pushregs_
1f664     09 1F 02 F6 | 	mov	local01, arg01
1f668     00 20 06 F6 | 	mov	local02, #0
1f66c     00 22 06 F6 | 	mov	local03, #0
1f670     00 24 06 F6 | 	mov	local04, #0
1f674     00 26 06 F6 | 	mov	local05, #0
1f678     97 08 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
1f67c                 | LR__2950
1f67c     0F 17 C2 FA | 	rdbyte	arg03, local01
1f680     20 16 0E F2 | 	cmp	arg03, #32 wz
1f684     01 1E 06 A1 |  if_e	add	local01, #1
1f688     F0 FF 9F AD |  if_e	jmp	#LR__2950
1f68c                 | LR__2951
1f68c     0F 29 C2 FA | 	rdbyte	local06, local01
1f690                 | LR__2952
1f690     2B 28 0E F2 | 	cmp	local06, #43 wz
1f694     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1f698     14 00 90 5D |  if_ne	jmp	#LR__2953
1f69c     2D 28 0E F2 | 	cmp	local06, #45 wz
1f6a0     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1f6a4     01 1E 06 F1 | 	add	local01, #1
1f6a8     0F 29 C2 FA | 	rdbyte	local06, local01
1f6ac     E0 FF 9F FD | 	jmp	#LR__2952
1f6b0                 | LR__2953
1f6b0                 | LR__2954
1f6b0     97 08 48 FB | 	callpa	#(@LR__2956-@LR__2955)>>2,fcache_load_ptr_
1f6b4                 | LR__2955
1f6b4     0F 29 C2 FA | 	rdbyte	local06, local01
1f6b8     5F 28 0E F2 | 	cmp	local06, #95 wz
1f6bc     01 1E 06 F1 | 	add	local01, #1
1f6c0     F0 FF 9F AD |  if_e	jmp	#LR__2955
1f6c4                 | LR__2956
1f6c4     00 28 0E F2 | 	cmp	local06, #0 wz
1f6c8     5C 00 90 AD |  if_e	jmp	#LR__2958
1f6cc     30 28 56 F2 | 	cmps	local06, #48 wc
1f6d0     44 00 90 CD |  if_b	jmp	#LR__2957
1f6d4     3A 28 56 F2 | 	cmps	local06, #58 wc
1f6d8     3C 00 90 3D |  if_ae	jmp	#LR__2957
1f6dc     10 13 02 F6 | 	mov	arg01, local02
1f6e0     00 90 20 FF 
1f6e4     00 14 06 F6 | 	mov	arg02, ##1092616192
1f6e8     88 F7 BF FD | 	call	#__system___float_mul
1f6ec     FD 20 02 F6 | 	mov	local02, result1
1f6f0     30 28 86 F1 | 	sub	local06, #48
1f6f4     14 13 02 F6 | 	mov	arg01, local06
1f6f8     74 F3 BF FD | 	call	#__system___float_fromuns
1f6fc     FD 14 02 F6 | 	mov	arg02, result1
1f700     10 13 02 F6 | 	mov	arg01, local02
1f704     9C F3 BF FD | 	call	#__system___float_add
1f708     FD 20 02 F6 | 	mov	local02, result1
1f70c     00 26 0E F2 | 	cmp	local05, #0 wz
1f710     01 22 86 51 |  if_ne	sub	local03, #1
1f714     98 FF 9F FD | 	jmp	#LR__2954
1f718                 | LR__2957
1f718     2E 28 0E F2 | 	cmp	local06, #46 wz
1f71c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1f720     01 26 06 A6 |  if_e	mov	local05, #1
1f724     88 FF 9F AD |  if_e	jmp	#LR__2954
1f728                 | LR__2958
1f728     45 28 0E F2 | 	cmp	local06, #69 wz
1f72c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1f730     18 00 90 5D |  if_ne	jmp	#LR__2959
1f734     0F 13 02 F6 | 	mov	arg01, local01
1f738     00 14 06 F6 | 	mov	arg02, #0
1f73c     AC FD BF FD | 	call	#__system____builtin_atoi
1f740     11 FB 01 F1 | 	add	result1, local03
1f744     FD 2A 02 F6 | 	mov	local07, result1
1f748     04 00 90 FD | 	jmp	#LR__2960
1f74c                 | LR__2959
1f74c     11 2B 02 F6 | 	mov	local07, local03
1f750                 | LR__2960
1f750     15 17 02 F6 | 	mov	arg03, local07
1f754     10 13 02 F6 | 	mov	arg01, local02
1f758     00 90 20 FF 
1f75c     00 14 06 F6 | 	mov	arg02, ##1092616192
1f760     BC 06 B0 FD | 	call	#__system___float_pow_n
1f764     12 FB 61 F5 | 	xor	result1, local04
1f768     A7 F0 03 F6 | 	mov	ptra, fp
1f76c     B2 00 A0 FD | 	call	#popregs_
1f770                 | __system____builtin_atof_ret
1f770     2D 00 64 FD | 	ret
1f774                 | 
1f774                 | __system____builtin_ilogb
1f774     20 FC BF FD | 	call	#__system___float_Unpack
1f778     00 FE 0D F2 | 	cmp	result3, #0 wz
1f77c     00 00 40 AF 
1f780     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1f784     24 00 90 AD |  if_e	jmp	#LR__2971
1f788     80 FC 0D F2 | 	cmp	result2, #128 wz
1f78c     18 00 90 5D |  if_ne	jmp	#LR__2970
1f790     00 00 10 FF 
1f794     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1f798     1E FA CD A9 |  if_e	bmask	result1, #30
1f79c     0C 00 90 AD |  if_e	jmp	#LR__2971
1f7a0     1F FA C5 F9 | 	decod	result1, #31
1f7a4     04 00 90 FD | 	jmp	#LR__2971
1f7a8                 | LR__2970
1f7a8     FE FA 01 F6 | 	mov	result1, result2
1f7ac                 | LR__2971
1f7ac                 | __system____builtin_ilogb_ret
1f7ac     2D 00 64 FD | 	ret
1f7b0                 | 
1f7b0                 | __system____builtin_sinf
1f7b0     03 4A 05 F6 | 	mov	COUNT_, #3
1f7b4     A8 00 A0 FD | 	call	#pushregs_
1f7b8     09 1F 02 F6 | 	mov	local01, arg01
1f7bc     87 64 20 FF 
1f7c0     DB 15 06 F6 | 	mov	arg02, ##1086918619
1f7c4     B0 F8 BF FD | 	call	#__system___float_div
1f7c8     FD 12 02 F6 | 	mov	arg01, result1
1f7cc     00 14 06 F6 | 	mov	arg02, #0
1f7d0     68 FB BF FD | 	call	#__system___float_tointeger
1f7d4     FD 16 0A F6 | 	mov	arg03, result1 wz
1f7d8     44 00 90 AD |  if_e	jmp	#LR__2980
1f7dc     0B 13 52 F6 | 	abs	arg01, arg03 wc
1f7e0     1F 20 C6 C9 |  if_b	decod	local02, #31
1f7e4     00 20 06 36 |  if_ae	mov	local02, #0
1f7e8     84 F2 BF FD | 	call	#__system___float_fromuns
1f7ec     10 FB 61 F5 | 	xor	result1, local02
1f7f0     FD 12 02 F6 | 	mov	arg01, result1
1f7f4     1E 14 C6 F9 | 	decod	arg02, #30
1f7f8     78 F6 BF FD | 	call	#__system___float_mul
1f7fc     FD 12 02 F6 | 	mov	arg01, result1
1f800     87 24 20 FF 
1f804     DB 15 06 F6 | 	mov	arg02, ##1078530011
1f808     68 F6 BF FD | 	call	#__system___float_mul
1f80c     FD 14 02 F6 | 	mov	arg02, result1
1f810     0F 13 02 F6 | 	mov	arg01, local01
1f814     1F 14 E6 F4 | 	bitnot	arg02, #31
1f818     88 F2 BF FD | 	call	#__system___float_add
1f81c     FD 1E 02 F6 | 	mov	local01, result1
1f820                 | LR__2980
1f820     0F 13 02 F6 | 	mov	arg01, local01
1f824     66 E6 1E FF 
1f828     CD 14 06 F6 | 	mov	arg02, ##1036831949
1f82c     01 16 06 F6 | 	mov	arg03, #1
1f830     74 FA BF FD | 	call	#__system___float_cmp
1f834     00 FA 55 F2 | 	cmps	result1, #0 wc
1f838     5C 00 90 3D |  if_ae	jmp	#LR__2981
1f83c     0F 13 02 F6 | 	mov	arg01, local01
1f840     66 E6 5E FF 
1f844     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1f848     01 16 66 F6 | 	neg	arg03, #1
1f84c     58 FA BF FD | 	call	#__system___float_cmp
1f850     01 FA 55 F2 | 	cmps	result1, #1 wc
1f854     40 00 90 CD |  if_b	jmp	#LR__2981
1f858     0F 13 02 F6 | 	mov	arg01, local01
1f85c     0F 15 02 F6 | 	mov	arg02, local01
1f860     10 F6 BF FD | 	call	#__system___float_mul
1f864     FD 12 02 F6 | 	mov	arg01, result1
1f868     0F 15 02 F6 | 	mov	arg02, local01
1f86c     04 F6 BF FD | 	call	#__system___float_mul
1f870     FD 12 02 F6 | 	mov	arg01, result1
1f874     00 60 20 FF 
1f878     00 14 06 F6 | 	mov	arg02, ##1086324736
1f87c     F8 F7 BF FD | 	call	#__system___float_div
1f880     FD 14 02 F6 | 	mov	arg02, result1
1f884     0F 13 02 F6 | 	mov	arg01, local01
1f888     1F 14 E6 F4 | 	bitnot	arg02, #31
1f88c     14 F2 BF FD | 	call	#__system___float_add
1f890     FD 22 02 F6 | 	mov	local03, result1
1f894     54 00 90 FD | 	jmp	#LR__2982
1f898                 | LR__2981
1f898     0F 13 02 F6 | 	mov	arg01, local01
1f89c     7C 91 26 FF 
1f8a0     83 15 06 F6 | 	mov	arg02, ##1294137731
1f8a4     CC F5 BF FD | 	call	#__system___float_mul
1f8a8     FD 12 02 F6 | 	mov	arg01, result1
1f8ac     00 14 06 F6 | 	mov	arg02, #0
1f8b0     88 FA BF FD | 	call	#__system___float_tointeger
1f8b4     02 FA 65 F0 | 	shl	result1, #2
1f8b8     00 00 A0 FF 
1f8bc     FD 00 48 FD | 	qrotate	##1073741824, result1
1f8c0     19 12 62 FD | 	getqy	arg01
1f8c4     09 13 52 F6 | 	abs	arg01, arg01 wc
1f8c8     1F 20 C6 C9 |  if_b	decod	local02, #31
1f8cc     00 20 06 36 |  if_ae	mov	local02, #0
1f8d0     9C F1 BF FD | 	call	#__system___float_fromuns
1f8d4     10 FB 61 F5 | 	xor	result1, local02
1f8d8     FD 12 02 F6 | 	mov	arg01, result1
1f8dc     00 40 27 FF 
1f8e0     00 14 06 F6 | 	mov	arg02, ##1317011456
1f8e4     90 F7 BF FD | 	call	#__system___float_div
1f8e8     FD 22 02 F6 | 	mov	local03, result1
1f8ec                 | LR__2982
1f8ec     11 FB 01 F6 | 	mov	result1, local03
1f8f0     A7 F0 03 F6 | 	mov	ptra, fp
1f8f4     B2 00 A0 FD | 	call	#popregs_
1f8f8                 | __system____builtin_sinf_ret
1f8f8     2D 00 64 FD | 	ret
1f8fc                 | 
1f8fc                 | __system____builtin_tanf
1f8fc     02 4A 05 F6 | 	mov	COUNT_, #2
1f900     A8 00 A0 FD | 	call	#pushregs_
1f904     09 1F 02 F6 | 	mov	local01, arg01
1f908     A4 FE BF FD | 	call	#__system____builtin_sinf
1f90c     FD 20 02 F6 | 	mov	local02, result1
1f910     0F 15 02 F6 | 	mov	arg02, local01
1f914     87 E4 1F FF 
1f918     DB 13 06 F6 | 	mov	arg01, ##1070141403
1f91c     1F 14 E6 F4 | 	bitnot	arg02, #31
1f920     80 F1 BF FD | 	call	#__system___float_add
1f924     FD 12 02 F6 | 	mov	arg01, result1
1f928     84 FE BF FD | 	call	#__system____builtin_sinf
1f92c     FD 14 02 F6 | 	mov	arg02, result1
1f930     10 13 02 F6 | 	mov	arg01, local02
1f934     40 F7 BF FD | 	call	#__system___float_div
1f938     A7 F0 03 F6 | 	mov	ptra, fp
1f93c     B2 00 A0 FD | 	call	#popregs_
1f940                 | __system____builtin_tanf_ret
1f940     2D 00 64 FD | 	ret
1f944                 | 
1f944                 | __system____builtin_asinf
1f944     01 4A 05 F6 | 	mov	COUNT_, #1
1f948     A8 00 A0 FD | 	call	#pushregs_
1f94c     09 1F 02 F6 | 	mov	local01, arg01
1f950     0F 15 02 F6 | 	mov	arg02, local01
1f954     0F 13 02 F6 | 	mov	arg01, local01
1f958     18 F5 BF FD | 	call	#__system___float_mul
1f95c     FD 14 02 F6 | 	mov	arg02, result1
1f960     00 C0 1F FF 
1f964     00 12 06 F6 | 	mov	arg01, ##1065353216
1f968     1F 14 E6 F4 | 	bitnot	arg02, #31
1f96c     34 F1 BF FD | 	call	#__system___float_add
1f970     FD 12 02 F6 | 	mov	arg01, result1
1f974     24 F4 BF FD | 	call	#__system___float_sqrt
1f978     FD 14 02 F6 | 	mov	arg02, result1
1f97c     0F 13 02 F6 | 	mov	arg01, local01
1f980     58 00 B0 FD | 	call	#__system____builtin_atan2f
1f984     A7 F0 03 F6 | 	mov	ptra, fp
1f988     B2 00 A0 FD | 	call	#popregs_
1f98c                 | __system____builtin_asinf_ret
1f98c     2D 00 64 FD | 	ret
1f990                 | 
1f990                 | __system____builtin_acosf
1f990     01 4A 05 F6 | 	mov	COUNT_, #1
1f994     A8 00 A0 FD | 	call	#pushregs_
1f998     09 1F 02 F6 | 	mov	local01, arg01
1f99c     0F 15 02 F6 | 	mov	arg02, local01
1f9a0     0F 13 02 F6 | 	mov	arg01, local01
1f9a4     CC F4 BF FD | 	call	#__system___float_mul
1f9a8     FD 14 02 F6 | 	mov	arg02, result1
1f9ac     00 C0 1F FF 
1f9b0     00 12 06 F6 | 	mov	arg01, ##1065353216
1f9b4     1F 14 E6 F4 | 	bitnot	arg02, #31
1f9b8     E8 F0 BF FD | 	call	#__system___float_add
1f9bc     FD 12 02 F6 | 	mov	arg01, result1
1f9c0     D8 F3 BF FD | 	call	#__system___float_sqrt
1f9c4     FD 12 02 F6 | 	mov	arg01, result1
1f9c8     0F 15 02 F6 | 	mov	arg02, local01
1f9cc     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1f9d0     A7 F0 03 F6 | 	mov	ptra, fp
1f9d4     B2 00 A0 FD | 	call	#popregs_
1f9d8                 | __system____builtin_acosf_ret
1f9d8     2D 00 64 FD | 	ret
1f9dc                 | 
1f9dc                 | __system____builtin_atan2f
1f9dc     04 4A 05 F6 | 	mov	COUNT_, #4
1f9e0     A8 00 A0 FD | 	call	#pushregs_
1f9e4     09 1F 02 F6 | 	mov	local01, arg01
1f9e8     0A 21 02 F6 | 	mov	local02, arg02
1f9ec     0F 13 02 F6 | 	mov	arg01, local01
1f9f0     00 14 06 F6 | 	mov	arg02, #0
1f9f4     01 16 06 F6 | 	mov	arg03, #1
1f9f8     AC F8 BF FD | 	call	#__system___float_cmp
1f9fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa00     28 00 90 5D |  if_ne	jmp	#LR__2990
1fa04     10 13 02 F6 | 	mov	arg01, local02
1fa08     00 14 06 F6 | 	mov	arg02, #0
1fa0c     01 16 06 F6 | 	mov	arg03, #1
1fa10     94 F8 BF FD | 	call	#__system___float_cmp
1fa14     00 FA 55 F2 | 	cmps	result1, #0 wc
1fa18     87 24 60 CF 
1fa1c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1fa20     DC 00 90 CD |  if_b	jmp	#LR__2991
1fa24     00 FA 05 F6 | 	mov	result1, #0
1fa28     D4 00 90 FD | 	jmp	#LR__2991
1fa2c                 | LR__2990
1fa2c     10 13 02 F6 | 	mov	arg01, local02
1fa30     10 15 02 F6 | 	mov	arg02, local02
1fa34     3C F4 BF FD | 	call	#__system___float_mul
1fa38     FD 22 02 F6 | 	mov	local03, result1
1fa3c     0F 13 02 F6 | 	mov	arg01, local01
1fa40     0F 15 02 F6 | 	mov	arg02, local01
1fa44     2C F4 BF FD | 	call	#__system___float_mul
1fa48     FD 14 02 F6 | 	mov	arg02, result1
1fa4c     11 13 02 F6 | 	mov	arg01, local03
1fa50     50 F0 BF FD | 	call	#__system___float_add
1fa54     FD 12 02 F6 | 	mov	arg01, result1
1fa58     40 F3 BF FD | 	call	#__system___float_sqrt
1fa5c     FD 22 02 F6 | 	mov	local03, result1
1fa60     10 13 02 F6 | 	mov	arg01, local02
1fa64     11 15 02 F6 | 	mov	arg02, local03
1fa68     0C F6 BF FD | 	call	#__system___float_div
1fa6c     FD 20 02 F6 | 	mov	local02, result1
1fa70     0F 13 02 F6 | 	mov	arg01, local01
1fa74     11 15 02 F6 | 	mov	arg02, local03
1fa78     FC F5 BF FD | 	call	#__system___float_div
1fa7c     FD 1E 02 F6 | 	mov	local01, result1
1fa80     00 40 27 FF 
1fa84     00 12 06 F6 | 	mov	arg01, ##1317011456
1fa88     10 15 02 F6 | 	mov	arg02, local02
1fa8c     E4 F3 BF FD | 	call	#__system___float_mul
1fa90     FD 12 02 F6 | 	mov	arg01, result1
1fa94     00 14 06 F6 | 	mov	arg02, #0
1fa98     A0 F8 BF FD | 	call	#__system___float_tointeger
1fa9c     FD 22 02 F6 | 	mov	local03, result1
1faa0     00 40 27 FF 
1faa4     00 12 06 F6 | 	mov	arg01, ##1317011456
1faa8     0F 15 02 F6 | 	mov	arg02, local01
1faac     C4 F3 BF FD | 	call	#__system___float_mul
1fab0     FD 12 02 F6 | 	mov	arg01, result1
1fab4     00 14 06 F6 | 	mov	arg02, #0
1fab8     80 F8 BF FD | 	call	#__system___float_tointeger
1fabc     FD 22 52 FD | 	qvector	local03, result1
1fac0     87 24 20 FF 
1fac4     DB 23 06 F6 | 	mov	local03, ##1078530011
1fac8     19 12 62 FD | 	getqy	arg01
1facc     01 12 C6 F0 | 	sar	arg01, #1
1fad0     09 13 52 F6 | 	abs	arg01, arg01 wc
1fad4     1F 24 C6 C9 |  if_b	decod	local04, #31
1fad8     00 24 06 36 |  if_ae	mov	local04, #0
1fadc     90 EF BF FD | 	call	#__system___float_fromuns
1fae0     12 FB 61 F5 | 	xor	result1, local04
1fae4     FD 12 02 F6 | 	mov	arg01, result1
1fae8     00 40 27 FF 
1faec     00 14 06 F6 | 	mov	arg02, ##1317011456
1faf0     84 F5 BF FD | 	call	#__system___float_div
1faf4     FD 14 02 F6 | 	mov	arg02, result1
1faf8     11 13 02 F6 | 	mov	arg01, local03
1fafc     74 F3 BF FD | 	call	#__system___float_mul
1fb00                 | LR__2991
1fb00     A7 F0 03 F6 | 	mov	ptra, fp
1fb04     B2 00 A0 FD | 	call	#popregs_
1fb08                 | __system____builtin_atan2f_ret
1fb08     2D 00 64 FD | 	ret
1fb0c                 | 
1fb0c                 | __system____builtin_exp2f
1fb0c     04 4A 05 F6 | 	mov	COUNT_, #4
1fb10     A8 00 A0 FD | 	call	#pushregs_
1fb14     09 1F 02 F6 | 	mov	local01, arg01
1fb18     00 7F 21 FF 
1fb1c     00 14 06 F6 | 	mov	arg02, ##1123942400
1fb20     01 16 66 F6 | 	neg	arg03, #1
1fb24     80 F7 BF FD | 	call	#__system___float_cmp
1fb28     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb2c     00 C0 3F 3F 
1fb30     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1fb34     DC 00 90 3D |  if_ae	jmp	#LR__3001
1fb38     0F 13 02 F6 | 	mov	arg01, local01
1fb3c     00 7F 61 FF 
1fb40     00 14 06 F6 | 	mov	arg02, ##-1023541248
1fb44     01 16 06 F6 | 	mov	arg03, #1
1fb48     5C F7 BF FD | 	call	#__system___float_cmp
1fb4c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb50     00 FA 05 C6 |  if_b	mov	result1, #0
1fb54     BC 00 90 CD |  if_b	jmp	#LR__3001
1fb58     0F 13 02 F6 | 	mov	arg01, local01
1fb5c     00 14 06 F6 | 	mov	arg02, #0
1fb60     D8 F7 BF FD | 	call	#__system___float_tointeger
1fb64     FD 20 02 F6 | 	mov	local02, result1
1fb68     10 13 52 F6 | 	abs	arg01, local02 wc
1fb6c     1F 22 C6 C9 |  if_b	decod	local03, #31
1fb70     00 22 06 36 |  if_ae	mov	local03, #0
1fb74     F8 EE BF FD | 	call	#__system___float_fromuns
1fb78     11 FB 61 F5 | 	xor	result1, local03
1fb7c     FD 14 02 F6 | 	mov	arg02, result1
1fb80     0F 13 02 F6 | 	mov	arg01, local01
1fb84     1F 14 E6 F4 | 	bitnot	arg02, #31
1fb88     18 EF BF FD | 	call	#__system___float_add
1fb8c     FD 24 02 F6 | 	mov	local04, result1
1fb90     12 13 02 F6 | 	mov	arg01, local04
1fb94     00 14 06 F6 | 	mov	arg02, #0
1fb98     01 16 06 F6 | 	mov	arg03, #1
1fb9c     08 F7 BF FD | 	call	#__system___float_cmp
1fba0     00 FA 55 F2 | 	cmps	result1, #0 wc
1fba4     18 00 90 3D |  if_ae	jmp	#LR__3000
1fba8     12 13 02 F6 | 	mov	arg01, local04
1fbac     00 C0 1F FF 
1fbb0     00 14 06 F6 | 	mov	arg02, ##1065353216
1fbb4     EC EE BF FD | 	call	#__system___float_add
1fbb8     FD 24 02 F6 | 	mov	local04, result1
1fbbc     01 20 86 F1 | 	sub	local02, #1
1fbc0                 | LR__3000
1fbc0     7F 20 06 F1 | 	add	local02, #127
1fbc4     17 20 66 F0 | 	shl	local02, #23
1fbc8     12 13 02 F6 | 	mov	arg01, local04
1fbcc     00 80 26 FF 
1fbd0     00 14 06 F6 | 	mov	arg02, ##1291845632
1fbd4     9C F2 BF FD | 	call	#__system___float_mul
1fbd8     FD 12 02 F6 | 	mov	arg01, result1
1fbdc     00 14 06 F6 | 	mov	arg02, #0
1fbe0     58 F7 BF FD | 	call	#__system___float_tointeger
1fbe4     FD 24 0A F6 | 	mov	local04, result1 wz
1fbe8     10 FB 01 A6 |  if_e	mov	result1, local02
1fbec     24 00 90 AD |  if_e	jmp	#LR__3001
1fbf0     3E 24 26 F4 | 	bith	local04, #62
1fbf4     0F 24 62 FD | 	qexp	local04
1fbf8     10 13 02 F6 | 	mov	arg01, local02
1fbfc     18 14 62 FD | 	getqx	arg02
1fc00     01 14 06 F1 | 	add	arg02, #1
1fc04     01 14 46 F0 | 	shr	arg02, #1
1fc08     00 80 1F FF 
1fc0c     00 14 06 F1 | 	add	arg02, ##1056964608
1fc10     60 F2 BF FD | 	call	#__system___float_mul
1fc14                 | LR__3001
1fc14     A7 F0 03 F6 | 	mov	ptra, fp
1fc18     B2 00 A0 FD | 	call	#popregs_
1fc1c                 | __system____builtin_exp2f_ret
1fc1c     2D 00 64 FD | 	ret
1fc20                 | 
1fc20                 | __system____builtin_log2f
1fc20     06 4A 05 F6 | 	mov	COUNT_, #6
1fc24     A8 00 A0 FD | 	call	#pushregs_
1fc28     09 1F 02 F6 | 	mov	local01, arg01
1fc2c     09 21 0A F6 | 	mov	local02, arg01 wz
1fc30     00 00 40 5F 
1fc34     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1fc38     00 40 00 AF 
1fc3c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1fc40     08 01 90 AD |  if_e	jmp	#LR__3014
1fc44     00 20 56 F2 | 	cmps	local02, #0 wc
1fc48     00 E0 3F CF 
1fc4c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1fc50     F8 00 90 CD |  if_b	jmp	#LR__3014
1fc54     0F 13 02 F6 | 	mov	arg01, local01
1fc58     00 90 20 FF 
1fc5c     00 14 06 F6 | 	mov	arg02, ##1092616192
1fc60     01 16 06 F6 | 	mov	arg03, #1
1fc64     40 F6 BF FD | 	call	#__system___float_cmp
1fc68     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc6c     4D 2A 20 AF 
1fc70     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1fc74     D4 00 90 AD |  if_e	jmp	#LR__3014
1fc78     0F 13 02 F6 | 	mov	arg01, local01
1fc7c     FC 16 20 FF 
1fc80     54 14 06 F6 | 	mov	arg02, ##1076754516
1fc84     01 16 06 F6 | 	mov	arg03, #1
1fc88     1C F6 BF FD | 	call	#__system___float_cmp
1fc8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc90     55 DC 1F AF 
1fc94     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1fc98     B0 00 90 AD |  if_e	jmp	#LR__3014
1fc9c     10 23 02 F6 | 	mov	local03, local02
1fca0     17 22 46 F0 | 	shr	local03, #23
1fca4     11 23 E2 F8 | 	getbyte	local03, local03, #0
1fca8     17 21 06 F4 | 	bitl	local02, #279
1fcac     10 25 02 F6 | 	mov	local04, local02
1fcb0     FF 22 0E F2 | 	cmp	local03, #255 wz
1fcb4     1C 00 90 5D |  if_ne	jmp	#LR__3010
1fcb8     00 24 0E F2 | 	cmp	local04, #0 wz
1fcbc     00 C0 3F 5F 
1fcc0     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1fcc4     00 E0 3F AF 
1fcc8     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1fccc     13 FB 01 F6 | 	mov	result1, local05
1fcd0     78 00 90 FD | 	jmp	#LR__3014
1fcd4                 | LR__3010
1fcd4     00 22 0E F2 | 	cmp	local03, #0 wz
1fcd8     17 24 26 54 |  if_ne	bith	local04, #23
1fcdc     7F 22 86 51 |  if_ne	sub	local03, #127
1fce0     28 00 90 5D |  if_ne	jmp	#LR__3013
1fce4     00 24 0E F2 | 	cmp	local04, #0 wz
1fce8     00 40 00 AF 
1fcec     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1fcf0     58 00 90 AD |  if_e	jmp	#LR__3014
1fcf4     7E 22 66 F6 | 	neg	local03, #126
1fcf8     97 08 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
1fcfc                 | LR__3011
1fcfc     17 24 2E F4 | 	testbn	local04, #23 wz
1fd00     01 24 66 A0 |  if_e	shl	local04, #1
1fd04     01 22 06 A1 |  if_e	add	local03, #1
1fd08     F0 FF 9F AD |  if_e	jmp	#LR__3011
1fd0c                 | LR__3012
1fd0c                 | LR__3013
1fd0c     0E 24 62 FD | 	qlog	local04
1fd10     01 22 86 F1 | 	sub	local03, #1
1fd14     11 13 52 F6 | 	abs	arg01, local03 wc
1fd18     1F 28 C6 C9 |  if_b	decod	local06, #31
1fd1c     00 28 06 36 |  if_ae	mov	local06, #0
1fd20     18 26 62 FD | 	getqx	local05
1fd24     9B 26 06 F4 | 	bitl	local05, #155
1fd28     08 26 06 F1 | 	add	local05, #8
1fd2c     04 26 46 F0 | 	shr	local05, #4
1fd30     00 C0 1F FF 
1fd34     00 26 06 F1 | 	add	local05, ##1065353216
1fd38     34 ED BF FD | 	call	#__system___float_fromuns
1fd3c     14 FB 61 F5 | 	xor	result1, local06
1fd40     FD 14 02 F6 | 	mov	arg02, result1
1fd44     13 13 02 F6 | 	mov	arg01, local05
1fd48     58 ED BF FD | 	call	#__system___float_add
1fd4c                 | LR__3014
1fd4c     A7 F0 03 F6 | 	mov	ptra, fp
1fd50     B2 00 A0 FD | 	call	#popregs_
1fd54                 | __system____builtin_log2f_ret
1fd54     2D 00 64 FD | 	ret
1fd58                 | 
1fd58                 | __system____builtin_powf
1fd58     04 4A 05 F6 | 	mov	COUNT_, #4
1fd5c     A8 00 A0 FD | 	call	#pushregs_
1fd60     09 1F 02 F6 | 	mov	local01, arg01
1fd64     0A 21 02 F6 | 	mov	local02, arg02
1fd68     10 13 02 F6 | 	mov	arg01, local02
1fd6c     00 14 06 F6 | 	mov	arg02, #0
1fd70     C8 F5 BF FD | 	call	#__system___float_tointeger
1fd74     FD 22 02 F6 | 	mov	local03, result1
1fd78     11 13 52 F6 | 	abs	arg01, local03 wc
1fd7c     1F 24 C6 C9 |  if_b	decod	local04, #31
1fd80     00 24 06 36 |  if_ae	mov	local04, #0
1fd84     E8 EC BF FD | 	call	#__system___float_fromuns
1fd88     12 FB 61 F5 | 	xor	result1, local04
1fd8c     FD 12 02 F6 | 	mov	arg01, result1
1fd90     10 15 02 F6 | 	mov	arg02, local02
1fd94     01 16 06 F6 | 	mov	arg03, #1
1fd98     0C F5 BF FD | 	call	#__system___float_cmp
1fd9c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fda0     18 00 90 5D |  if_ne	jmp	#LR__3020
1fda4     00 C0 1F FF 
1fda8     00 12 06 F6 | 	mov	arg01, ##1065353216
1fdac     0F 15 02 F6 | 	mov	arg02, local01
1fdb0     11 17 02 F6 | 	mov	arg03, local03
1fdb4     68 00 B0 FD | 	call	#__system___float_pow_n
1fdb8     58 00 90 FD | 	jmp	#LR__3021
1fdbc                 | LR__3020
1fdbc     0F 13 02 F6 | 	mov	arg01, local01
1fdc0     00 14 06 F6 | 	mov	arg02, #0
1fdc4     01 16 06 F6 | 	mov	arg03, #1
1fdc8     DC F4 BF FD | 	call	#__system___float_cmp
1fdcc     00 FA 55 F2 | 	cmps	result1, #0 wc
1fdd0     00 E0 3F CF 
1fdd4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1fdd8     38 00 90 CD |  if_b	jmp	#LR__3021
1fddc     0F 13 02 F6 | 	mov	arg01, local01
1fde0     00 14 06 F6 | 	mov	arg02, #0
1fde4     01 16 06 F6 | 	mov	arg03, #1
1fde8     BC F4 BF FD | 	call	#__system___float_cmp
1fdec     00 FA 0D F2 | 	cmp	result1, #0 wz
1fdf0     00 FA 05 A6 |  if_e	mov	result1, #0
1fdf4     1C 00 90 AD |  if_e	jmp	#LR__3021
1fdf8     0F 13 02 F6 | 	mov	arg01, local01
1fdfc     20 FE BF FD | 	call	#__system____builtin_log2f
1fe00     FD 12 02 F6 | 	mov	arg01, result1
1fe04     10 15 02 F6 | 	mov	arg02, local02
1fe08     68 F0 BF FD | 	call	#__system___float_mul
1fe0c     FD 12 02 F6 | 	mov	arg01, result1
1fe10     F8 FC BF FD | 	call	#__system____builtin_exp2f
1fe14                 | LR__3021
1fe14     A7 F0 03 F6 | 	mov	ptra, fp
1fe18     B2 00 A0 FD | 	call	#popregs_
1fe1c                 | __system____builtin_powf_ret
1fe1c     2D 00 64 FD | 	ret
1fe20                 | 
1fe20                 | __system___float_pow_n
1fe20     05 4A 05 F6 | 	mov	COUNT_, #5
1fe24     A8 00 A0 FD | 	call	#pushregs_
1fe28     09 1F 02 F6 | 	mov	local01, arg01
1fe2c     0A 21 02 F6 | 	mov	local02, arg02
1fe30     0B 23 02 F6 | 	mov	local03, arg03
1fe34     00 22 56 F2 | 	cmps	local03, #0 wc
1fe38     18 00 90 3D |  if_ae	jmp	#LR__3030
1fe3c     01 24 06 F6 | 	mov	local04, #1
1fe40     11 23 62 F6 | 	neg	local03, local03
1fe44     00 22 56 F2 | 	cmps	local03, #0 wc
1fe48     00 FA 05 C6 |  if_b	mov	result1, #0
1fe4c     94 00 90 CD |  if_b	jmp	#LR__3038
1fe50     04 00 90 FD | 	jmp	#LR__3031
1fe54                 | LR__3030
1fe54     00 24 06 F6 | 	mov	local04, #0
1fe58                 | LR__3031
1fe58     00 C0 1F FF 
1fe5c     00 26 06 F6 | 	mov	local05, ##1065353216
1fe60                 | LR__3032
1fe60     01 22 56 F2 | 	cmps	local03, #1 wc
1fe64     30 00 90 CD |  if_b	jmp	#LR__3034
1fe68     01 22 CE F7 | 	test	local03, #1 wz
1fe6c     10 00 90 AD |  if_e	jmp	#LR__3033
1fe70     13 13 02 F6 | 	mov	arg01, local05
1fe74     10 15 02 F6 | 	mov	arg02, local02
1fe78     F8 EF BF FD | 	call	#__system___float_mul
1fe7c     FD 26 02 F6 | 	mov	local05, result1
1fe80                 | LR__3033
1fe80     01 22 C6 F0 | 	sar	local03, #1
1fe84     10 13 02 F6 | 	mov	arg01, local02
1fe88     10 15 02 F6 | 	mov	arg02, local02
1fe8c     E4 EF BF FD | 	call	#__system___float_mul
1fe90     FD 20 02 F6 | 	mov	local02, result1
1fe94     C8 FF 9F FD | 	jmp	#LR__3032
1fe98                 | LR__3034
1fe98     00 24 0E F2 | 	cmp	local04, #0 wz
1fe9c     14 00 90 AD |  if_e	jmp	#LR__3035
1fea0     0F 13 02 F6 | 	mov	arg01, local01
1fea4     13 15 02 F6 | 	mov	arg02, local05
1fea8     CC F1 BF FD | 	call	#__system___float_div
1feac     FD 26 02 F6 | 	mov	local05, result1
1feb0     2C 00 90 FD | 	jmp	#LR__3037
1feb4                 | LR__3035
1feb4     0F 13 02 F6 | 	mov	arg01, local01
1feb8     00 C0 1F FF 
1febc     00 14 06 F6 | 	mov	arg02, ##1065353216
1fec0     01 16 06 F6 | 	mov	arg03, #1
1fec4     E0 F3 BF FD | 	call	#__system___float_cmp
1fec8     00 FA 0D F2 | 	cmp	result1, #0 wz
1fecc     10 00 90 AD |  if_e	jmp	#LR__3036
1fed0     0F 13 02 F6 | 	mov	arg01, local01
1fed4     13 15 02 F6 | 	mov	arg02, local05
1fed8     98 EF BF FD | 	call	#__system___float_mul
1fedc     FD 26 02 F6 | 	mov	local05, result1
1fee0                 | LR__3036
1fee0                 | LR__3037
1fee0     13 FB 01 F6 | 	mov	result1, local05
1fee4                 | LR__3038
1fee4     A7 F0 03 F6 | 	mov	ptra, fp
1fee8     B2 00 A0 FD | 	call	#popregs_
1feec                 | __system___float_pow_n_ret
1feec     2D 00 64 FD | 	ret
1fef0                 | 
1fef0                 | __system___gc_ptrs
1fef0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1fef4     00 03 02 F6 | 	mov	_var02, _var01
1fef8     76 01 00 FF 
1fefc     F8 03 06 F1 | 	add	_var02, ##191992
1ff00     00 FD 09 FB | 	rdlong	result2, _var01 wz
1ff04     74 00 90 5D |  if_ne	jmp	#LR__3040
1ff08     01 FD 01 F6 | 	mov	result2, _var02
1ff0c     00 FD 81 F1 | 	sub	result2, _var01
1ff10     00 03 58 FC | 	wrword	#1, _var01
1ff14     00 FB 01 F6 | 	mov	result1, _var01
1ff18     02 FA 05 F1 | 	add	result1, #2
1ff1c     36 00 80 FF 
1ff20     FD 20 59 FC | 	wrword	##27792, result1
1ff24     00 FB 01 F6 | 	mov	result1, _var01
1ff28     04 FA 05 F1 | 	add	result1, #4
1ff2c     FD 00 58 FC | 	wrword	#0, result1
1ff30     00 FB 01 F6 | 	mov	result1, _var01
1ff34     06 FA 05 F1 | 	add	result1, #6
1ff38     FD 02 58 FC | 	wrword	#1, result1
1ff3c     10 00 06 F1 | 	add	_var01, #16
1ff40     FE FC 51 F6 | 	abs	result2, result2 wc
1ff44     04 FC 45 F0 | 	shr	result2, #4
1ff48     FE FC 81 F6 | 	negc	result2, result2
1ff4c     00 FD 51 FC | 	wrword	result2, _var01
1ff50     00 FD 01 F6 | 	mov	result2, _var01
1ff54     02 FC 05 F1 | 	add	result2, #2
1ff58     36 00 80 FF 
1ff5c     FE 1E 59 FC | 	wrword	##27791, result2
1ff60     00 FD 01 F6 | 	mov	result2, _var01
1ff64     04 FC 05 F1 | 	add	result2, #4
1ff68     FE 00 58 FC | 	wrword	#0, result2
1ff6c     00 FD 01 F6 | 	mov	result2, _var01
1ff70     06 FC 05 F1 | 	add	result2, #6
1ff74     FE 00 58 FC | 	wrword	#0, result2
1ff78     10 00 86 F1 | 	sub	_var01, #16
1ff7c                 | LR__3040
1ff7c     00 FB 01 F6 | 	mov	result1, _var01
1ff80     01 FD 01 F6 | 	mov	result2, _var02
1ff84                 | __system___gc_ptrs_ret
1ff84     2D 00 64 FD | 	ret
1ff88                 | 
1ff88                 | __system___gc_tryalloc
1ff88     0B 4A 05 F6 | 	mov	COUNT_, #11
1ff8c     A8 00 A0 FD | 	call	#pushregs_
1ff90     09 1F 02 F6 | 	mov	local01, arg01
1ff94     0A 21 02 F6 | 	mov	local02, arg02
1ff98     54 FF BF FD | 	call	#__system___gc_ptrs
1ff9c     FD 22 02 F6 | 	mov	local03, result1
1ffa0     FE 24 02 F6 | 	mov	local04, result2
1ffa4     11 27 02 F6 | 	mov	local05, local03
1ffa8     00 28 06 F6 | 	mov	local06, #0
1ffac     97 1E 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
1ffb0                 | LR__3050
1ffb0     13 2B 02 F6 | 	mov	local07, local05
1ffb4     06 26 06 F1 | 	add	local05, #6
1ffb8     13 15 EA FA | 	rdword	arg02, local05 wz
1ffbc     11 13 02 F6 | 	mov	arg01, local03
1ffc0     00 FA 05 A6 |  if_e	mov	result1, #0
1ffc4     04 14 66 50 |  if_ne	shl	arg02, #4
1ffc8     0A 13 02 51 |  if_ne	add	arg01, arg02
1ffcc     09 FB 01 56 |  if_ne	mov	result1, arg01
1ffd0     FD 26 0A F6 | 	mov	local05, result1 wz
1ffd4     13 29 E2 5A |  if_ne	rdword	local06, local05
1ffd8     00 26 0E F2 | 	cmp	local05, #0 wz
1ffdc     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1ffe0     08 00 90 1D |  if_a	jmp	#LR__3052
1ffe4     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1ffe8     C4 FF 9F 1D |  if_a	jmp	#LR__3050
1ffec                 | LR__3051
1ffec                 | LR__3052
1ffec     00 26 0E F2 | 	cmp	local05, #0 wz
1fff0     13 FB 01 A6 |  if_e	mov	result1, local05
1fff4     3C 01 90 AD |  if_e	jmp	#LR__3055
1fff8     13 FD 01 F6 | 	mov	result2, local05
1fffc     06 FC 05 F1 | 	add	result2, #6
20000     FE 2C E2 FA | 	rdword	local08, result2
20004     14 1F 52 F2 | 	cmps	local01, local06 wc
20008     C0 00 90 3D |  if_ae	jmp	#LR__3054
2000c     13 1F 52 FC | 	wrword	local01, local05
20010     13 13 02 F6 | 	mov	arg01, local05
20014     0F 2D 02 F6 | 	mov	local08, local01
20018     04 2C 66 F0 | 	shl	local08, #4
2001c     16 13 02 F1 | 	add	arg01, local08
20020     0F 29 82 F1 | 	sub	local06, local01
20024     09 29 52 FC | 	wrword	local06, arg01
20028     09 2D 02 F6 | 	mov	local08, arg01
2002c     02 2C 06 F1 | 	add	local08, #2
20030     36 00 80 FF 
20034     16 1F 59 FC | 	wrword	##27791, local08
20038     13 15 0A F6 | 	mov	arg02, local05 wz
2003c     00 FA 05 A6 |  if_e	mov	result1, #0
20040     11 15 82 51 |  if_ne	sub	arg02, local03
20044     04 14 46 50 |  if_ne	shr	arg02, #4
20048     0A FB 01 56 |  if_ne	mov	result1, arg02
2004c     09 2D 02 F6 | 	mov	local08, arg01
20050     04 2C 06 F1 | 	add	local08, #4
20054     16 FB 51 FC | 	wrword	result1, local08
20058     13 2D 02 F6 | 	mov	local08, local05
2005c     06 2C 06 F1 | 	add	local08, #6
20060     09 15 02 F6 | 	mov	arg02, arg01
20064     16 2D E2 FA | 	rdword	local08, local08
20068     06 14 06 F1 | 	add	arg02, #6
2006c     0A 2D 52 FC | 	wrword	local08, arg02
20070     09 2F 02 F6 | 	mov	local09, arg01
20074     17 15 0A F6 | 	mov	arg02, local09 wz
20078     00 FA 05 A6 |  if_e	mov	result1, #0
2007c     11 15 82 51 |  if_ne	sub	arg02, local03
20080     04 14 46 50 |  if_ne	shr	arg02, #4
20084     0A FB 01 56 |  if_ne	mov	result1, arg02
20088     FD 2C 02 F6 | 	mov	local08, result1
2008c     09 31 EA FA | 	rdword	local10, arg01 wz
20090     00 FA 05 A6 |  if_e	mov	result1, #0
20094     04 30 66 50 |  if_ne	shl	local10, #4
20098     18 13 02 51 |  if_ne	add	arg01, local10
2009c     09 FB 01 56 |  if_ne	mov	result1, arg01
200a0     FD 32 0A F6 | 	mov	local11, result1 wz
200a4     24 00 90 AD |  if_e	jmp	#LR__3053
200a8     12 33 52 F2 | 	cmps	local11, local04 wc
200ac     1C 00 90 3D |  if_ae	jmp	#LR__3053
200b0     17 15 0A F6 | 	mov	arg02, local09 wz
200b4     00 FA 05 A6 |  if_e	mov	result1, #0
200b8     11 15 82 51 |  if_ne	sub	arg02, local03
200bc     04 14 46 50 |  if_ne	shr	arg02, #4
200c0     0A FB 01 56 |  if_ne	mov	result1, arg02
200c4     04 32 06 F1 | 	add	local11, #4
200c8     19 FB 51 FC | 	wrword	result1, local11
200cc                 | LR__3053
200cc                 | LR__3054
200cc     06 2A 06 F1 | 	add	local07, #6
200d0     15 2D 52 FC | 	wrword	local08, local07
200d4     36 00 00 FF 
200d8     80 2E 06 F6 | 	mov	local09, ##27776
200dc     10 2F 42 F5 | 	or	local09, local02
200e0     00 FA 05 F6 | 	mov	result1, #0
200e4     01 FA 61 FD | 	cogid	result1
200e8     FD 2E 42 F5 | 	or	local09, result1
200ec     13 33 02 F6 | 	mov	local11, local05
200f0     02 32 06 F1 | 	add	local11, #2
200f4     19 2F 52 FC | 	wrword	local09, local11
200f8     11 2F 02 F6 | 	mov	local09, local03
200fc     08 2E 06 F1 | 	add	local09, #8
20100     13 33 02 F6 | 	mov	local11, local05
20104     17 2F E2 FA | 	rdword	local09, local09
20108     06 32 06 F1 | 	add	local11, #6
2010c     19 2F 52 FC | 	wrword	local09, local11
20110     13 15 0A F6 | 	mov	arg02, local05 wz
20114     00 FA 05 A6 |  if_e	mov	result1, #0
20118     11 15 82 51 |  if_ne	sub	arg02, local03
2011c     04 14 46 50 |  if_ne	shr	arg02, #4
20120     0A FB 01 56 |  if_ne	mov	result1, arg02
20124     08 22 06 F1 | 	add	local03, #8
20128     11 FB 51 FC | 	wrword	result1, local03
2012c     08 26 06 F1 | 	add	local05, #8
20130     13 FB 01 F6 | 	mov	result1, local05
20134                 | LR__3055
20134     A7 F0 03 F6 | 	mov	ptra, fp
20138     B2 00 A0 FD | 	call	#popregs_
2013c                 | __system___gc_tryalloc_ret
2013c     2D 00 64 FD | 	ret
20140                 | 
20140                 | __system___gc_alloc_managed
20140     01 4A 05 F6 | 	mov	COUNT_, #1
20144     A8 00 A0 FD | 	call	#pushregs_
20148     09 1F 02 F6 | 	mov	local01, arg01
2014c     00 14 06 F6 | 	mov	arg02, #0
20150     1C 00 B0 FD | 	call	#__system___gc_doalloc
20154     FD 14 0A F6 | 	mov	arg02, result1 wz
20158     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
2015c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
20160     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
20164     A7 F0 03 F6 | 	mov	ptra, fp
20168     B2 00 A0 FD | 	call	#popregs_
2016c                 | __system___gc_alloc_managed_ret
2016c     2D 00 64 FD | 	ret
20170                 | 
20170                 | __system___gc_doalloc
20170     06 4A 05 F6 | 	mov	COUNT_, #6
20174     A8 00 A0 FD | 	call	#pushregs_
20178     09 1F 0A F6 | 	mov	local01, arg01 wz
2017c     0A 21 02 F6 | 	mov	local02, arg02
20180     00 FA 05 A6 |  if_e	mov	result1, #0
20184     8C 00 90 AD |  if_e	jmp	#LR__3067
20188     17 1E 06 F1 | 	add	local01, #23
2018c     0F 1E 26 F5 | 	andn	local01, #15
20190     04 1E 46 F0 | 	shr	local01, #4
20194     1C E6 05 F1 | 	add	ptr___system__dat__, #28
20198     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2019c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
201a0     54 C1 BF FD | 	call	#__system___lockmem
201a4     0F 13 02 F6 | 	mov	arg01, local01
201a8     10 15 02 F6 | 	mov	arg02, local02
201ac     D8 FD BF FD | 	call	#__system___gc_tryalloc
201b0     FD 22 0A F6 | 	mov	local03, result1 wz
201b4     14 00 90 5D |  if_ne	jmp	#LR__3060
201b8     70 03 B0 FD | 	call	#__system___gc_docollect
201bc     0F 13 02 F6 | 	mov	arg01, local01
201c0     10 15 02 F6 | 	mov	arg02, local02
201c4     C0 FD BF FD | 	call	#__system___gc_tryalloc
201c8     FD 22 02 F6 | 	mov	local03, result1
201cc                 | LR__3060
201cc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
201d0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
201d4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
201d8     09 01 68 FC | 	wrlong	#0, arg01
201dc     00 22 0E F2 | 	cmp	local03, #0 wz
201e0     2C 00 90 AD |  if_e	jmp	#LR__3066
201e4     04 1E 66 F0 | 	shl	local01, #4
201e8     08 1E 86 F1 | 	sub	local01, #8
201ec     0F 25 52 F6 | 	abs	local04, local01 wc
201f0     02 24 46 F0 | 	shr	local04, #2
201f4     12 27 8A F6 | 	negc	local05, local04 wz
201f8     11 29 02 F6 | 	mov	local06, local03
201fc     10 00 90 AD |  if_e	jmp	#LR__3065
20200     97 06 48 FB | 	callpa	#(@LR__3063-@LR__3061)>>2,fcache_load_ptr_
20204                 | LR__3061
20204     13 05 D8 FC | 	rep	@LR__3064, local05
20208                 | LR__3062
20208     14 01 68 FC | 	wrlong	#0, local06
2020c     04 28 06 F1 | 	add	local06, #4
20210                 | LR__3063
20210                 | LR__3064
20210                 | LR__3065
20210                 | LR__3066
20210     11 FB 01 F6 | 	mov	result1, local03
20214                 | LR__3067
20214     A7 F0 03 F6 | 	mov	ptra, fp
20218     B2 00 A0 FD | 	call	#popregs_
2021c                 | __system___gc_doalloc_ret
2021c     2D 00 64 FD | 	ret
20220                 | 
20220                 | __system___gc_isvalidptr
20220     F8 16 06 F4 | 	bitl	arg03, #248
20224     08 16 86 F1 | 	sub	arg03, #8
20228     09 17 52 F2 | 	cmps	arg03, arg01 wc
2022c     08 00 90 CD |  if_b	jmp	#LR__3070
20230     0A 17 52 F2 | 	cmps	arg03, arg02 wc
20234     08 00 90 CD |  if_b	jmp	#LR__3071
20238                 | LR__3070
20238     00 FA 05 F6 | 	mov	result1, #0
2023c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
20240                 | LR__3071
20240     0B 01 02 F6 | 	mov	_var01, arg03
20244     09 01 62 F5 | 	xor	_var01, arg01
20248     0F 00 CE F7 | 	test	_var01, #15 wz
2024c     00 FA 05 56 |  if_ne	mov	result1, #0
20250     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
20254     0B 01 02 F6 | 	mov	_var01, arg03
20258     02 00 06 F1 | 	add	_var01, #2
2025c     00 01 E2 FA | 	rdword	_var01, _var01
20260     7F 00 00 FF 
20264     C0 01 06 F5 | 	and	_var01, ##65472
20268     36 00 00 FF 
2026c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
20270     00 FA 05 56 |  if_ne	mov	result1, #0
20274     0B FB 01 A6 |  if_e	mov	result1, arg03
20278                 | __system___gc_isvalidptr_ret
20278     2D 00 64 FD | 	ret
2027c                 | 
2027c                 | __system___gc_free
2027c     09 17 02 F6 | 	mov	arg03, arg01
20280     6C FC BF FD | 	call	#__system___gc_ptrs
20284     FD 12 02 F6 | 	mov	arg01, result1
20288     FE 14 02 F6 | 	mov	arg02, result2
2028c     90 FF BF FD | 	call	#__system___gc_isvalidptr
20290     FD 14 0A F6 | 	mov	arg02, result1 wz
20294     28 00 90 AD |  if_e	jmp	#LR__3080
20298     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2029c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
202a0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
202a4     50 C0 BF FD | 	call	#__system___lockmem
202a8     0A 13 02 F6 | 	mov	arg01, arg02
202ac     14 00 B0 FD | 	call	#__system___gc_dofree
202b0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
202b4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
202b8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
202bc     09 01 68 FC | 	wrlong	#0, arg01
202c0                 | LR__3080
202c0                 | __system___gc_free_ret
202c0     2D 00 64 FD | 	ret
202c4                 | 
202c4                 | __system___gc_dofree
202c4     06 4A 05 F6 | 	mov	COUNT_, #6
202c8     A8 00 A0 FD | 	call	#pushregs_
202cc     09 1F 02 F6 | 	mov	local01, arg01
202d0     1C FC BF FD | 	call	#__system___gc_ptrs
202d4     FD 20 02 F6 | 	mov	local02, result1
202d8     FE 22 02 F6 | 	mov	local03, result2
202dc     0F 15 02 F6 | 	mov	arg02, local01
202e0     02 14 06 F1 | 	add	arg02, #2
202e4     36 00 80 FF 
202e8     0A 1F 59 FC | 	wrword	##27791, arg02
202ec     0F 25 02 F6 | 	mov	local04, local01
202f0     0F 13 02 F6 | 	mov	arg01, local01
202f4     09 27 EA FA | 	rdword	local05, arg01 wz
202f8     00 FA 05 A6 |  if_e	mov	result1, #0
202fc     04 26 66 50 |  if_ne	shl	local05, #4
20300     13 13 02 51 |  if_ne	add	arg01, local05
20304     09 FB 01 56 |  if_ne	mov	result1, arg01
20308     FD 28 02 F6 | 	mov	local06, result1
2030c     97 24 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
20310                 | LR__3090
20310     04 24 06 F1 | 	add	local04, #4
20314     12 15 EA FA | 	rdword	arg02, local04 wz
20318     10 13 02 F6 | 	mov	arg01, local02
2031c     00 FA 05 A6 |  if_e	mov	result1, #0
20320     04 14 66 50 |  if_ne	shl	arg02, #4
20324     0A 13 02 51 |  if_ne	add	arg01, arg02
20328     09 FB 01 56 |  if_ne	mov	result1, arg01
2032c     FD 24 0A F6 | 	mov	local04, result1 wz
20330     24 00 90 AD |  if_e	jmp	#LR__3092
20334     12 13 02 F6 | 	mov	arg01, local04
20338     00 FA 05 F6 | 	mov	result1, #0
2033c     02 12 06 F1 | 	add	arg01, #2
20340     09 13 E2 FA | 	rdword	arg01, arg01
20344     36 00 00 FF 
20348     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2034c     01 FA 65 A6 |  if_e	neg	result1, #1
20350     00 FA 0D F2 | 	cmp	result1, #0 wz
20354     B8 FF 9F AD |  if_e	jmp	#LR__3090
20358                 | LR__3091
20358                 | LR__3092
20358     00 24 0E F2 | 	cmp	local04, #0 wz
2035c     10 25 02 A6 |  if_e	mov	local04, local02
20360     12 15 02 F6 | 	mov	arg02, local04
20364     06 14 06 F1 | 	add	arg02, #6
20368     0F 13 02 F6 | 	mov	arg01, local01
2036c     0A 15 E2 FA | 	rdword	arg02, arg02
20370     06 12 06 F1 | 	add	arg01, #6
20374     09 15 52 FC | 	wrword	arg02, arg01
20378     0F 15 0A F6 | 	mov	arg02, local01 wz
2037c     00 FA 05 A6 |  if_e	mov	result1, #0
20380     10 15 82 51 |  if_ne	sub	arg02, local02
20384     04 14 46 50 |  if_ne	shr	arg02, #4
20388     0A FB 01 56 |  if_ne	mov	result1, arg02
2038c     12 15 02 F6 | 	mov	arg02, local04
20390     06 14 06 F1 | 	add	arg02, #6
20394     0A FB 51 FC | 	wrword	result1, arg02
20398     10 25 0A F2 | 	cmp	local04, local02 wz
2039c     A4 00 90 AD |  if_e	jmp	#LR__3095
203a0     12 13 02 F6 | 	mov	arg01, local04
203a4     09 27 EA FA | 	rdword	local05, arg01 wz
203a8     00 FA 05 A6 |  if_e	mov	result1, #0
203ac     04 26 66 50 |  if_ne	shl	local05, #4
203b0     13 13 02 51 |  if_ne	add	arg01, local05
203b4     09 FB 01 56 |  if_ne	mov	result1, arg01
203b8     0F FB 09 F2 | 	cmp	result1, local01 wz
203bc     84 00 90 5D |  if_ne	jmp	#LR__3094
203c0     12 29 E2 FA | 	rdword	local06, local04
203c4     0F 15 E2 FA | 	rdword	arg02, local01
203c8     0A 29 02 F1 | 	add	local06, arg02
203cc     12 29 52 FC | 	wrword	local06, local04
203d0     0F 29 02 F6 | 	mov	local06, local01
203d4     02 28 06 F1 | 	add	local06, #2
203d8     14 01 58 FC | 	wrword	#0, local06
203dc     0F 13 02 F6 | 	mov	arg01, local01
203e0     09 27 EA FA | 	rdword	local05, arg01 wz
203e4     00 FA 05 A6 |  if_e	mov	result1, #0
203e8     04 26 66 50 |  if_ne	shl	local05, #4
203ec     13 13 02 51 |  if_ne	add	arg01, local05
203f0     09 FB 01 56 |  if_ne	mov	result1, arg01
203f4     FD 28 02 F6 | 	mov	local06, result1
203f8     11 29 52 F2 | 	cmps	local06, local03 wc
203fc     20 00 90 3D |  if_ae	jmp	#LR__3093
20400     12 15 0A F6 | 	mov	arg02, local04 wz
20404     00 FA 05 A6 |  if_e	mov	result1, #0
20408     10 15 82 51 |  if_ne	sub	arg02, local02
2040c     04 14 46 50 |  if_ne	shr	arg02, #4
20410     0A FB 01 56 |  if_ne	mov	result1, arg02
20414     14 15 02 F6 | 	mov	arg02, local06
20418     04 14 06 F1 | 	add	arg02, #4
2041c     0A FB 51 FC | 	wrword	result1, arg02
20420                 | LR__3093
20420     0F 15 02 F6 | 	mov	arg02, local01
20424     06 14 06 F1 | 	add	arg02, #6
20428     12 FD 01 F6 | 	mov	result2, local04
2042c     0A 15 E2 FA | 	rdword	arg02, arg02
20430     06 FC 05 F1 | 	add	result2, #6
20434     FE 14 52 FC | 	wrword	arg02, result2
20438     06 1E 06 F1 | 	add	local01, #6
2043c     0F 01 58 FC | 	wrword	#0, local01
20440     12 1F 02 F6 | 	mov	local01, local04
20444                 | LR__3094
20444                 | LR__3095
20444     0F 13 02 F6 | 	mov	arg01, local01
20448     09 27 EA FA | 	rdword	local05, arg01 wz
2044c     00 FA 05 A6 |  if_e	mov	result1, #0
20450     04 26 66 50 |  if_ne	shl	local05, #4
20454     13 13 02 51 |  if_ne	add	arg01, local05
20458     09 FB 01 56 |  if_ne	mov	result1, arg01
2045c     FD 14 0A F6 | 	mov	arg02, result1 wz
20460     B8 00 90 AD |  if_e	jmp	#LR__3097
20464     11 15 52 F2 | 	cmps	arg02, local03 wc
20468     B0 00 90 3D |  if_ae	jmp	#LR__3097
2046c     0A 13 02 F6 | 	mov	arg01, arg02
20470     00 FA 05 F6 | 	mov	result1, #0
20474     02 12 06 F1 | 	add	arg01, #2
20478     09 13 E2 FA | 	rdword	arg01, arg01
2047c     36 00 00 FF 
20480     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
20484     01 FA 65 A6 |  if_e	neg	result1, #1
20488     00 FA 0D F2 | 	cmp	result1, #0 wz
2048c     8C 00 90 AD |  if_e	jmp	#LR__3097
20490     0F 25 02 F6 | 	mov	local04, local01
20494     12 29 E2 FA | 	rdword	local06, local04
20498     0A 13 02 F6 | 	mov	arg01, arg02
2049c     09 1F E2 FA | 	rdword	local01, arg01
204a0     0F 29 02 F1 | 	add	local06, local01
204a4     12 29 52 FC | 	wrword	local06, local04
204a8     09 29 02 F6 | 	mov	local06, arg01
204ac     06 28 06 F1 | 	add	local06, #6
204b0     12 1F 02 F6 | 	mov	local01, local04
204b4     14 29 E2 FA | 	rdword	local06, local06
204b8     06 1E 06 F1 | 	add	local01, #6
204bc     0F 29 52 FC | 	wrword	local06, local01
204c0     09 29 02 F6 | 	mov	local06, arg01
204c4     02 28 06 F1 | 	add	local06, #2
204c8     14 55 59 FC | 	wrword	#170, local06
204cc     09 29 02 F6 | 	mov	local06, arg01
204d0     06 28 06 F1 | 	add	local06, #6
204d4     14 01 58 FC | 	wrword	#0, local06
204d8     09 27 EA FA | 	rdword	local05, arg01 wz
204dc     00 FA 05 A6 |  if_e	mov	result1, #0
204e0     04 26 66 50 |  if_ne	shl	local05, #4
204e4     13 13 02 51 |  if_ne	add	arg01, local05
204e8     09 FB 01 56 |  if_ne	mov	result1, arg01
204ec     FD 28 0A F6 | 	mov	local06, result1 wz
204f0     28 00 90 AD |  if_e	jmp	#LR__3096
204f4     11 29 52 F2 | 	cmps	local06, local03 wc
204f8     20 00 90 3D |  if_ae	jmp	#LR__3096
204fc     12 15 0A F6 | 	mov	arg02, local04 wz
20500     00 FA 05 A6 |  if_e	mov	result1, #0
20504     10 15 82 51 |  if_ne	sub	arg02, local02
20508     04 14 46 50 |  if_ne	shr	arg02, #4
2050c     0A FB 01 56 |  if_ne	mov	result1, arg02
20510     14 25 02 F6 | 	mov	local04, local06
20514     04 24 06 F1 | 	add	local04, #4
20518     12 FB 51 FC | 	wrword	result1, local04
2051c                 | LR__3096
2051c                 | LR__3097
2051c     14 FB 01 F6 | 	mov	result1, local06
20520     A7 F0 03 F6 | 	mov	ptra, fp
20524     B2 00 A0 FD | 	call	#popregs_
20528                 | __system___gc_dofree_ret
20528     2D 00 64 FD | 	ret
2052c                 | 
2052c                 | __system___gc_docollect
2052c     05 4A 05 F6 | 	mov	COUNT_, #5
20530     A8 00 A0 FD | 	call	#pushregs_
20534     B8 F9 BF FD | 	call	#__system___gc_ptrs
20538     FE 1E 02 F6 | 	mov	local01, result2
2053c     FD 20 02 F6 | 	mov	local02, result1
20540     10 13 02 F6 | 	mov	arg01, local02
20544     09 23 EA FA | 	rdword	local03, arg01 wz
20548     00 FA 05 A6 |  if_e	mov	result1, #0
2054c     04 22 66 50 |  if_ne	shl	local03, #4
20550     11 13 02 51 |  if_ne	add	arg01, local03
20554     09 FB 01 56 |  if_ne	mov	result1, arg01
20558     FD 24 0A F6 | 	mov	local04, result1 wz
2055c     00 FA 05 F6 | 	mov	result1, #0
20560     01 FA 61 FD | 	cogid	result1
20564     FD 26 02 F6 | 	mov	local05, result1
20568     48 00 90 AD |  if_e	jmp	#LR__3102
2056c     97 22 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
20570                 | LR__3100
20570     0F 25 52 F2 | 	cmps	local04, local01 wc
20574     3C 00 90 3D |  if_ae	jmp	#LR__3102
20578     12 15 02 F6 | 	mov	arg02, local04
2057c     02 14 06 F1 | 	add	arg02, #2
20580     0A 15 E2 FA | 	rdword	arg02, arg02
20584     20 14 26 F5 | 	andn	arg02, #32
20588     12 13 02 F6 | 	mov	arg01, local04
2058c     02 12 06 F1 | 	add	arg01, #2
20590     09 15 52 FC | 	wrword	arg02, arg01
20594     12 13 02 F6 | 	mov	arg01, local04
20598     09 23 EA FA | 	rdword	local03, arg01 wz
2059c     00 FA 05 A6 |  if_e	mov	result1, #0
205a0     04 22 66 50 |  if_ne	shl	local03, #4
205a4     11 13 02 51 |  if_ne	add	arg01, local03
205a8     09 FB 01 56 |  if_ne	mov	result1, arg01
205ac     FD 24 0A F6 | 	mov	local04, result1 wz
205b0     BC FF 9F 5D |  if_ne	jmp	#LR__3100
205b4                 | LR__3101
205b4                 | LR__3102
205b4     00 22 06 F6 | 	mov	local03, #0
205b8     00 12 06 F6 | 	mov	arg01, #0
205bc     10 BD BF FD | 	call	#__system____topofstack
205c0     FD 14 02 F6 | 	mov	arg02, result1
205c4     11 13 02 F6 | 	mov	arg01, local03
205c8     90 00 B0 FD | 	call	#__system___gc_markhub
205cc     1C 01 B0 FD | 	call	#__system___gc_markcog
205d0     10 13 02 F6 | 	mov	arg01, local02
205d4     09 23 EA FA | 	rdword	local03, arg01 wz
205d8     00 FA 05 A6 |  if_e	mov	result1, #0
205dc     04 22 66 50 |  if_ne	shl	local03, #4
205e0     11 13 02 51 |  if_ne	add	arg01, local03
205e4     09 FB 01 56 |  if_ne	mov	result1, arg01
205e8     FD 20 0A F6 | 	mov	local02, result1 wz
205ec     60 00 90 AD |  if_e	jmp	#LR__3106
205f0                 | LR__3103
205f0     10 25 02 F6 | 	mov	local04, local02
205f4     12 13 02 F6 | 	mov	arg01, local04
205f8     09 23 EA FA | 	rdword	local03, arg01 wz
205fc     00 FA 05 A6 |  if_e	mov	result1, #0
20600     04 22 66 50 |  if_ne	shl	local03, #4
20604     11 13 02 51 |  if_ne	add	arg01, local03
20608     09 FB 01 56 |  if_ne	mov	result1, arg01
2060c     FD 20 02 F6 | 	mov	local02, result1
20610     12 15 02 F6 | 	mov	arg02, local04
20614     02 14 06 F1 | 	add	arg02, #2
20618     0A 15 E2 FA | 	rdword	arg02, arg02
2061c     20 14 CE F7 | 	test	arg02, #32 wz
20620     10 14 CE A7 |  if_e	test	arg02, #16 wz
20624     1C 00 90 5D |  if_ne	jmp	#LR__3105
20628     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2062c     13 15 0A F2 | 	cmp	arg02, local05 wz
20630     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
20634     0C 00 90 5D |  if_ne	jmp	#LR__3104
20638     12 13 02 F6 | 	mov	arg01, local04
2063c     84 FC BF FD | 	call	#__system___gc_dofree
20640     FD 20 02 F6 | 	mov	local02, result1
20644                 | LR__3104
20644                 | LR__3105
20644     00 20 0E F2 | 	cmp	local02, #0 wz
20648     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
2064c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3103
20650                 | LR__3106
20650     A7 F0 03 F6 | 	mov	ptra, fp
20654     B2 00 A0 FD | 	call	#popregs_
20658                 | __system___gc_docollect_ret
20658     2D 00 64 FD | 	ret
2065c                 | 
2065c                 | __system___gc_markhub
2065c     04 4A 05 F6 | 	mov	COUNT_, #4
20660     A8 00 A0 FD | 	call	#pushregs_
20664     09 1F 02 F6 | 	mov	local01, arg01
20668     0A 21 02 F6 | 	mov	local02, arg02
2066c     80 F8 BF FD | 	call	#__system___gc_ptrs
20670     FD 22 02 F6 | 	mov	local03, result1
20674     FE 24 02 F6 | 	mov	local04, result2
20678                 | LR__3110
20678     10 1F 52 F2 | 	cmps	local01, local02 wc
2067c     60 00 90 3D |  if_ae	jmp	#LR__3111
20680     0F 17 02 FB | 	rdlong	arg03, local01
20684     04 1E 06 F1 | 	add	local01, #4
20688     12 15 02 F6 | 	mov	arg02, local04
2068c     11 13 02 F6 | 	mov	arg01, local03
20690     8C FB BF FD | 	call	#__system___gc_isvalidptr
20694     FD 16 0A F6 | 	mov	arg03, result1 wz
20698     DC FF 9F AD |  if_e	jmp	#LR__3110
2069c     0B 13 02 F6 | 	mov	arg01, arg03
206a0     00 FA 05 F6 | 	mov	result1, #0
206a4     02 12 06 F1 | 	add	arg01, #2
206a8     09 13 E2 FA | 	rdword	arg01, arg01
206ac     36 00 00 FF 
206b0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
206b4     01 FA 65 A6 |  if_e	neg	result1, #1
206b8     00 FA 0D F2 | 	cmp	result1, #0 wz
206bc     B8 FF 9F 5D |  if_ne	jmp	#LR__3110
206c0     0B FD 01 F6 | 	mov	result2, arg03
206c4     02 FC 05 F1 | 	add	result2, #2
206c8     FE FC E1 FA | 	rdword	result2, result2
206cc     0F FC 25 F5 | 	andn	result2, #15
206d0     2E FC 45 F5 | 	or	result2, #46
206d4     02 16 06 F1 | 	add	arg03, #2
206d8     0B FD 51 FC | 	wrword	result2, arg03
206dc     98 FF 9F FD | 	jmp	#LR__3110
206e0                 | LR__3111
206e0     A7 F0 03 F6 | 	mov	ptra, fp
206e4     B2 00 A0 FD | 	call	#popregs_
206e8                 | __system___gc_markhub_ret
206e8     2D 00 64 FD | 	ret
206ec                 | 
206ec                 | __system___gc_markcog
206ec     04 4A 05 F6 | 	mov	COUNT_, #4
206f0     A8 00 A0 FD | 	call	#pushregs_
206f4     F8 F7 BF FD | 	call	#__system___gc_ptrs
206f8     FD 1E 02 F6 | 	mov	local01, result1
206fc     FE 20 02 F6 | 	mov	local02, result2
20700     EF 23 06 F6 | 	mov	local03, #495
20704                 | LR__3120
20704                 | 	'.live	local03
20704     00 22 96 F9 | 	alts	local03, #0
20708     11 25 02 F6 | 	mov	local04, local03
2070c     0F 13 02 F6 | 	mov	arg01, local01
20710     10 15 02 F6 | 	mov	arg02, local02
20714     12 17 02 F6 | 	mov	arg03, local04
20718     04 FB BF FD | 	call	#__system___gc_isvalidptr
2071c     00 FA 0D F2 | 	cmp	result1, #0 wz
20720     18 00 90 AD |  if_e	jmp	#LR__3121
20724     FD 24 02 F6 | 	mov	local04, result1
20728     02 24 06 F1 | 	add	local04, #2
2072c     12 25 E2 FA | 	rdword	local04, local04
20730     20 24 46 F5 | 	or	local04, #32
20734     02 FA 05 F1 | 	add	result1, #2
20738     FD 24 52 FC | 	wrword	local04, result1
2073c                 | LR__3121
2073c     01 22 86 F1 | 	sub	local03, #1
20740     00 22 56 F2 | 	cmps	local03, #0 wc
20744     BC FF 9F 3D |  if_ae	jmp	#LR__3120
20748     A7 F0 03 F6 | 	mov	ptra, fp
2074c     B2 00 A0 FD | 	call	#popregs_
20750                 | __system___gc_markcog_ret
20750     2D 00 64 FD | 	ret
20754                 | 
20754                 | __system__opendir
20754     06 4A 05 F6 | 	mov	COUNT_, #6
20758     A8 00 A0 FD | 	call	#pushregs_
2075c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20760     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
20764     09 15 02 F6 | 	mov	arg02, arg01
20768     0F 13 02 F6 | 	mov	arg01, local01
2076c     00 16 06 F6 | 	mov	arg03, #0
20770     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
20774     18 C3 BF FD | 	call	#__system____getvfsforfile
20778     FD 20 0A F6 | 	mov	local02, result1 wz
2077c     10 00 90 AD |  if_e	jmp	#LR__3130
20780     28 20 06 F1 | 	add	local02, #40
20784     10 17 0A FB | 	rdlong	arg03, local02 wz
20788     28 20 86 F1 | 	sub	local02, #40
2078c     14 00 90 5D |  if_ne	jmp	#LR__3131
20790                 | LR__3130
20790     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20794     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
20798     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2079c     00 FA 05 F6 | 	mov	result1, #0
207a0     90 00 90 FD | 	jmp	#LR__3133
207a4                 | LR__3131
207a4     5C 12 06 F6 | 	mov	arg01, #92
207a8     10 14 06 F6 | 	mov	arg02, #16
207ac     C0 F9 BF FD | 	call	#__system___gc_doalloc
207b0     FD 22 0A F6 | 	mov	local03, result1 wz
207b4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
207b8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
207bc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
207c0     00 FA 05 A6 |  if_e	mov	result1, #0
207c4     6C 00 90 AD |  if_e	jmp	#LR__3133
207c8     28 20 06 F1 | 	add	local02, #40
207cc     10 25 02 FB | 	rdlong	local04, local02
207d0     12 27 02 F6 | 	mov	local05, local04
207d4     28 20 86 F1 | 	sub	local02, #40
207d8     13 26 46 F7 | 	zerox	local05, #19
207dc     14 24 46 F0 | 	shr	local04, #20
207e0     02 24 66 F0 | 	shl	local04, #2
207e4     ED 24 02 F1 | 	add	local04, __methods__
207e8     12 25 02 FB | 	rdlong	local04, local04
207ec     11 13 02 F6 | 	mov	arg01, local03
207f0     0F 15 02 F6 | 	mov	arg02, local01
207f4     F2 28 02 F6 | 	mov	local06, objptr
207f8     13 E5 01 F6 | 	mov	objptr, local05
207fc     2D 24 62 FD | 	call	local04
20800     14 E5 01 F6 | 	mov	objptr, local06
20804     FD 16 0A F6 | 	mov	arg03, result1 wz
20808     20 00 90 AD |  if_e	jmp	#LR__3132
2080c     00 16 4E F2 | 	cmps	arg03, #0 wz
20810     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20814     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
20818     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2081c     11 13 02 F6 | 	mov	arg01, local03
20820     58 FA BF FD | 	call	#__system___gc_free
20824     00 FA 05 F6 | 	mov	result1, #0
20828     08 00 90 FD | 	jmp	#LR__3133
2082c                 | LR__3132
2082c     11 21 62 FC | 	wrlong	local02, local03
20830     11 FB 01 F6 | 	mov	result1, local03
20834                 | LR__3133
20834     A7 F0 03 F6 | 	mov	ptra, fp
20838     B2 00 A0 FD | 	call	#popregs_
2083c                 | __system__opendir_ret
2083c     2D 00 64 FD | 	ret
20840                 | 
20840                 | __system__closedir
20840     04 4A 05 F6 | 	mov	COUNT_, #4
20844     A8 00 A0 FD | 	call	#pushregs_
20848     09 1F 02 F6 | 	mov	local01, arg01
2084c     0F 13 02 FB | 	rdlong	arg01, local01
20850     2C 12 06 F1 | 	add	arg01, #44
20854     09 21 02 FB | 	rdlong	local02, arg01
20858     10 23 02 F6 | 	mov	local03, local02
2085c     13 22 46 F7 | 	zerox	local03, #19
20860     14 20 46 F0 | 	shr	local02, #20
20864     02 20 66 F0 | 	shl	local02, #2
20868     ED 20 02 F1 | 	add	local02, __methods__
2086c     10 21 02 FB | 	rdlong	local02, local02
20870     0F 13 02 F6 | 	mov	arg01, local01
20874     F2 24 02 F6 | 	mov	local04, objptr
20878     11 E5 01 F6 | 	mov	objptr, local03
2087c     2D 20 62 FD | 	call	local02
20880     12 E5 01 F6 | 	mov	objptr, local04
20884     FD 24 02 F6 | 	mov	local04, result1
20888     0F 13 02 F6 | 	mov	arg01, local01
2088c     EC F9 BF FD | 	call	#__system___gc_free
20890     00 24 4E F2 | 	cmps	local04, #0 wz
20894     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20898     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
2089c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
208a0     01 FA 65 56 |  if_ne	neg	result1, #1
208a4     00 FA 05 A6 |  if_e	mov	result1, #0
208a8     A7 F0 03 F6 | 	mov	ptra, fp
208ac     B2 00 A0 FD | 	call	#popregs_
208b0                 | __system__closedir_ret
208b0     2D 00 64 FD | 	ret
208b4                 | 
208b4                 | __system__readdir
208b4     04 4A 05 F6 | 	mov	COUNT_, #4
208b8     A8 00 A0 FD | 	call	#pushregs_
208bc     09 15 0A FB | 	rdlong	arg02, arg01 wz
208c0     08 12 06 F1 | 	add	arg01, #8
208c4     09 1F 02 F6 | 	mov	local01, arg01
208c8     08 12 86 F1 | 	sub	arg01, #8
208cc     00 FA 05 A6 |  if_e	mov	result1, #0
208d0     5C 00 90 AD |  if_e	jmp	#LR__3141
208d4     30 14 06 F1 | 	add	arg02, #48
208d8     0A 21 02 FB | 	rdlong	local02, arg02
208dc     10 23 02 F6 | 	mov	local03, local02
208e0     13 22 46 F7 | 	zerox	local03, #19
208e4     14 20 46 F0 | 	shr	local02, #20
208e8     02 20 66 F0 | 	shl	local02, #2
208ec     ED 20 02 F1 | 	add	local02, __methods__
208f0     10 21 02 FB | 	rdlong	local02, local02
208f4     0F 15 02 F6 | 	mov	arg02, local01
208f8     F2 24 02 F6 | 	mov	local04, objptr
208fc     11 E5 01 F6 | 	mov	objptr, local03
20900     2D 20 62 FD | 	call	local02
20904     12 E5 01 F6 | 	mov	objptr, local04
20908     00 FA 4D F2 | 	cmps	result1, #0 wz
2090c     1C 00 90 AD |  if_e	jmp	#LR__3140
20910     01 FA 55 F2 | 	cmps	result1, #1 wc
20914     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
20918     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2091c     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
20920     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
20924     00 FA 05 F6 | 	mov	result1, #0
20928     04 00 90 FD | 	jmp	#LR__3141
2092c                 | LR__3140
2092c     0F FB 01 F6 | 	mov	result1, local01
20930                 | LR__3141
20930     A7 F0 03 F6 | 	mov	ptra, fp
20934     B2 00 A0 FD | 	call	#popregs_
20938                 | __system__readdir_ret
20938     2D 00 64 FD | 	ret
2093c                 | 
2093c                 | __system___openraw
2093c     15 4A 05 F6 | 	mov	COUNT_, #21
20940     A8 00 A0 FD | 	call	#pushregs_
20944     09 1F 02 F6 | 	mov	local01, arg01
20948     0A 21 02 F6 | 	mov	local02, arg02
2094c     0B 23 02 F6 | 	mov	local03, arg03
20950     0C 25 02 F6 | 	mov	local04, arg04
20954     04 26 06 F6 | 	mov	local05, #4
20958     0F 29 02 F6 | 	mov	local06, local01
2095c     00 2A 06 F6 | 	mov	local07, #0
20960     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20964     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
20968     16 13 02 F6 | 	mov	arg01, local08
2096c     10 15 02 F6 | 	mov	arg02, local02
20970     00 16 06 F6 | 	mov	arg03, #0
20974     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
20978     14 C1 BF FD | 	call	#__system____getvfsforfile
2097c     FD 2E 0A F6 | 	mov	local09, result1 wz
20980     10 00 90 AD |  if_e	jmp	#LR__3150
20984     20 2E 06 F1 | 	add	local09, #32
20988     17 FB 09 FB | 	rdlong	result1, local09 wz
2098c     20 2E 86 F1 | 	sub	local09, #32
20990     14 00 90 5D |  if_ne	jmp	#LR__3151
20994                 | LR__3150
20994     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20998     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2099c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
209a0     01 FA 65 F6 | 	neg	result1, #1
209a4     8C 02 90 FD | 	jmp	#LR__3164
209a8                 | LR__3151
209a8     14 13 02 F6 | 	mov	arg01, local06
209ac     00 14 06 F6 | 	mov	arg02, #0
209b0     34 16 06 F6 | 	mov	arg03, #52
209b4     09 31 02 F6 | 	mov	local10, arg01
209b8     98 00 A0 FD | 	call	#\builtin_bytefill_
209bc     20 2E 06 F1 | 	add	local09, #32
209c0     17 33 02 FB | 	rdlong	local11, local09
209c4     19 35 02 F6 | 	mov	local12, local11
209c8     19 37 02 F6 | 	mov	local13, local11
209cc     20 2E 86 F1 | 	sub	local09, #32
209d0     1B 39 02 F6 | 	mov	local14, local13
209d4     13 34 46 F7 | 	zerox	local12, #19
209d8     14 38 46 F0 | 	shr	local14, #20
209dc     02 38 66 F0 | 	shl	local14, #2
209e0     ED 38 02 F1 | 	add	local14, __methods__
209e4     1C 39 02 FB | 	rdlong	local14, local14
209e8     14 3B 02 F6 | 	mov	local15, local06
209ec     16 3D 02 F6 | 	mov	local16, local08
209f0     11 3F 02 F6 | 	mov	local17, local03
209f4     1D 13 02 F6 | 	mov	arg01, local15
209f8     1E 15 02 F6 | 	mov	arg02, local16
209fc     1F 17 02 F6 | 	mov	arg03, local17
20a00     F2 40 02 F6 | 	mov	local18, objptr
20a04     1A E5 01 F6 | 	mov	objptr, local12
20a08     2D 38 62 FD | 	call	local14
20a0c     20 E5 01 F6 | 	mov	objptr, local18
20a10     FD 42 0A F6 | 	mov	local19, result1 wz
20a14     04 22 CE 57 |  if_ne	test	local03, #4 wz
20a18     58 00 90 AD |  if_e	jmp	#LR__3152
20a1c     24 2E 06 F1 | 	add	local09, #36
20a20     17 33 02 FB | 	rdlong	local11, local09
20a24     19 35 02 F6 | 	mov	local12, local11
20a28     19 37 02 F6 | 	mov	local13, local11
20a2c     24 2E 86 F1 | 	sub	local09, #36
20a30     1B 39 02 F6 | 	mov	local14, local13
20a34     13 34 46 F7 | 	zerox	local12, #19
20a38     14 38 46 F0 | 	shr	local14, #20
20a3c     02 38 66 F0 | 	shl	local14, #2
20a40     ED 38 02 F1 | 	add	local14, __methods__
20a44     1C 39 02 FB | 	rdlong	local14, local14
20a48     14 3B 02 F6 | 	mov	local15, local06
20a4c     16 3D 02 F6 | 	mov	local16, local08
20a50     12 3F 02 F6 | 	mov	local17, local04
20a54     1D 13 02 F6 | 	mov	arg01, local15
20a58     1E 15 02 F6 | 	mov	arg02, local16
20a5c     1F 17 02 F6 | 	mov	arg03, local17
20a60     F2 40 02 F6 | 	mov	local18, objptr
20a64     1A E5 01 F6 | 	mov	objptr, local12
20a68     2D 38 62 FD | 	call	local14
20a6c     20 E5 01 F6 | 	mov	objptr, local18
20a70     FD 42 02 F6 | 	mov	local19, result1
20a74                 | LR__3152
20a74     00 42 0E F2 | 	cmp	local19, #0 wz
20a78     8C 01 90 5D |  if_ne	jmp	#LR__3162
20a7c     11 45 02 F6 | 	mov	local20, local03
20a80     03 44 0E F5 | 	and	local20, #3 wz
20a84     02 26 46 55 |  if_ne	or	local05, #2
20a88     01 44 0E F2 | 	cmp	local20, #1 wz
20a8c     01 26 46 55 |  if_ne	or	local05, #1
20a90     20 22 CE F7 | 	test	local03, #32 wz
20a94     C0 26 46 55 |  if_ne	or	local05, #192
20a98     08 28 06 F1 | 	add	local06, #8
20a9c     14 27 62 FC | 	wrlong	local05, local06
20aa0     0C 28 06 F1 | 	add	local06, #12
20aa4     14 47 0A FB | 	rdlong	local21, local06 wz
20aa8     14 28 86 F1 | 	sub	local06, #20
20aac     18 00 90 5D |  if_ne	jmp	#LR__3153
20ab0     04 2E 06 F1 | 	add	local09, #4
20ab4     17 47 02 FB | 	rdlong	local21, local09
20ab8     04 2E 86 F1 | 	sub	local09, #4
20abc     14 28 06 F1 | 	add	local06, #20
20ac0     14 47 62 FC | 	wrlong	local21, local06
20ac4     14 28 86 F1 | 	sub	local06, #20
20ac8                 | LR__3153
20ac8     18 28 06 F1 | 	add	local06, #24
20acc     14 47 0A FB | 	rdlong	local21, local06 wz
20ad0     18 28 86 F1 | 	sub	local06, #24
20ad4     18 00 90 5D |  if_ne	jmp	#LR__3154
20ad8     08 2E 06 F1 | 	add	local09, #8
20adc     17 47 02 FB | 	rdlong	local21, local09
20ae0     08 2E 86 F1 | 	sub	local09, #8
20ae4     18 28 06 F1 | 	add	local06, #24
20ae8     14 47 62 FC | 	wrlong	local21, local06
20aec     18 28 86 F1 | 	sub	local06, #24
20af0                 | LR__3154
20af0     24 28 06 F1 | 	add	local06, #36
20af4     14 47 0A FB | 	rdlong	local21, local06 wz
20af8     24 28 86 F1 | 	sub	local06, #36
20afc     17 47 02 AB |  if_e	rdlong	local21, local09
20b00     24 28 06 A1 |  if_e	add	local06, #36
20b04     14 47 62 AC |  if_e	wrlong	local21, local06
20b08     24 28 86 A1 |  if_e	sub	local06, #36
20b0c     28 28 06 F1 | 	add	local06, #40
20b10     14 47 0A FB | 	rdlong	local21, local06 wz
20b14     28 28 86 F1 | 	sub	local06, #40
20b18     18 00 90 5D |  if_ne	jmp	#LR__3155
20b1c     10 2E 06 F1 | 	add	local09, #16
20b20     17 47 02 FB | 	rdlong	local21, local09
20b24     10 2E 86 F1 | 	sub	local09, #16
20b28     28 28 06 F1 | 	add	local06, #40
20b2c     14 47 62 FC | 	wrlong	local21, local06
20b30     28 28 86 F1 | 	sub	local06, #40
20b34                 | LR__3155
20b34     30 28 06 F1 | 	add	local06, #48
20b38     14 47 0A FB | 	rdlong	local21, local06 wz
20b3c     30 28 86 F1 | 	sub	local06, #48
20b40     18 00 90 5D |  if_ne	jmp	#LR__3156
20b44     0C 2E 06 F1 | 	add	local09, #12
20b48     17 47 02 FB | 	rdlong	local21, local09
20b4c     0C 2E 86 F1 | 	sub	local09, #12
20b50     30 28 06 F1 | 	add	local06, #48
20b54     14 47 62 FC | 	wrlong	local21, local06
20b58     30 28 86 F1 | 	sub	local06, #48
20b5c                 | LR__3156
20b5c     1C 28 06 F1 | 	add	local06, #28
20b60     14 47 0A FB | 	rdlong	local21, local06 wz
20b64     1C 28 86 F1 | 	sub	local06, #28
20b68     1C 00 90 5D |  if_ne	jmp	#LR__3157
20b6c     01 2A 06 F6 | 	mov	local07, #1
20b70     F2 12 02 F6 | 	mov	arg01, objptr
20b74     00 10 04 FF 
20b78     00 12 46 F5 | 	or	arg01, ##136314880
20b7c     1C 28 06 F1 | 	add	local06, #28
20b80     14 13 62 FC | 	wrlong	arg01, local06
20b84     1C 28 86 F1 | 	sub	local06, #28
20b88                 | LR__3157
20b88     20 28 06 F1 | 	add	local06, #32
20b8c     14 47 0A FB | 	rdlong	local21, local06 wz
20b90     20 28 86 F1 | 	sub	local06, #32
20b94     1C 00 90 5D |  if_ne	jmp	#LR__3158
20b98     01 2A 06 F6 | 	mov	local07, #1
20b9c     F2 12 02 F6 | 	mov	arg01, objptr
20ba0     00 18 04 FF 
20ba4     00 12 46 F5 | 	or	arg01, ##137363456
20ba8     20 28 06 F1 | 	add	local06, #32
20bac     14 13 62 FC | 	wrlong	arg01, local06
20bb0     20 28 86 F1 | 	sub	local06, #32
20bb4                 | LR__3158
20bb4     2C 28 06 F1 | 	add	local06, #44
20bb8     14 47 0A FB | 	rdlong	local21, local06 wz
20bbc     2C 28 86 F1 | 	sub	local06, #44
20bc0     44 00 90 5D |  if_ne	jmp	#LR__3161
20bc4     14 2E 06 F1 | 	add	local09, #20
20bc8     17 47 0A FB | 	rdlong	local21, local09 wz
20bcc     14 2E 86 F1 | 	sub	local09, #20
20bd0     18 00 90 AD |  if_e	jmp	#LR__3159
20bd4     14 2E 06 F1 | 	add	local09, #20
20bd8     17 47 02 FB | 	rdlong	local21, local09
20bdc     2C 28 06 F1 | 	add	local06, #44
20be0     14 47 62 FC | 	wrlong	local21, local06
20be4     2C 28 86 F1 | 	sub	local06, #44
20be8     1C 00 90 FD | 	jmp	#LR__3160
20bec                 | LR__3159
20bec     01 2A 06 F6 | 	mov	local07, #1
20bf0     F2 12 02 F6 | 	mov	arg01, objptr
20bf4     00 20 04 FF 
20bf8     00 12 46 F5 | 	or	arg01, ##138412032
20bfc     2C 28 06 F1 | 	add	local06, #44
20c00     14 13 62 FC | 	wrlong	arg01, local06
20c04     2C 28 86 F1 | 	sub	local06, #44
20c08                 | LR__3160
20c08                 | LR__3161
20c08                 | LR__3162
20c08     00 2A 0E F2 | 	cmp	local07, #0 wz
20c0c     14 13 02 56 |  if_ne	mov	arg01, local06
20c10     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
20c14     00 42 0E F2 | 	cmp	local19, #0 wz
20c18     00 12 06 A6 |  if_e	mov	arg01, #0
20c1c     10 00 90 5D |  if_ne	jmp	#LR__3163
20c20     00 12 4E F2 | 	cmps	arg01, #0 wz
20c24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20c28     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20c2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20c30                 | LR__3163
20c30     21 FB 01 F6 | 	mov	result1, local19
20c34                 | LR__3164
20c34     A7 F0 03 F6 | 	mov	ptra, fp
20c38     B2 00 A0 FD | 	call	#popregs_
20c3c                 | __system___openraw_ret
20c3c     2D 00 64 FD | 	ret
20c40                 | 
20c40                 | __system___closeraw
20c40     05 4A 05 F6 | 	mov	COUNT_, #5
20c44     A8 00 A0 FD | 	call	#pushregs_
20c48     09 1F 02 F6 | 	mov	local01, arg01
20c4c     00 20 06 F6 | 	mov	local02, #0
20c50     08 1E 06 F1 | 	add	local01, #8
20c54     0F FB 09 FB | 	rdlong	result1, local01 wz
20c58     08 1E 86 F1 | 	sub	local01, #8
20c5c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20c60     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
20c64     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20c68     01 FA 65 A6 |  if_e	neg	result1, #1
20c6c     A8 00 90 AD |  if_e	jmp	#LR__3172
20c70     2C 1E 06 F1 | 	add	local01, #44
20c74     0F FB 09 FB | 	rdlong	result1, local01 wz
20c78     2C 1E 86 F1 | 	sub	local01, #44
20c7c     38 00 90 AD |  if_e	jmp	#LR__3170
20c80     2C 1E 06 F1 | 	add	local01, #44
20c84     0F 23 02 FB | 	rdlong	local03, local01
20c88     11 25 02 F6 | 	mov	local04, local03
20c8c     2C 1E 86 F1 | 	sub	local01, #44
20c90     13 24 46 F7 | 	zerox	local04, #19
20c94     14 22 46 F0 | 	shr	local03, #20
20c98     02 22 66 F0 | 	shl	local03, #2
20c9c     ED 22 02 F1 | 	add	local03, __methods__
20ca0     11 23 02 FB | 	rdlong	local03, local03
20ca4     0F 13 02 F6 | 	mov	arg01, local01
20ca8     F2 26 02 F6 | 	mov	local05, objptr
20cac     12 E5 01 F6 | 	mov	objptr, local04
20cb0     2D 22 62 FD | 	call	local03
20cb4     13 E5 01 F6 | 	mov	objptr, local05
20cb8                 | LR__3170
20cb8     24 1E 06 F1 | 	add	local01, #36
20cbc     0F 27 0A FB | 	rdlong	local05, local01 wz
20cc0     24 1E 86 F1 | 	sub	local01, #36
20cc4     3C 00 90 AD |  if_e	jmp	#LR__3171
20cc8     24 1E 06 F1 | 	add	local01, #36
20ccc     0F 23 02 FB | 	rdlong	local03, local01
20cd0     11 25 02 F6 | 	mov	local04, local03
20cd4     24 1E 86 F1 | 	sub	local01, #36
20cd8     13 24 46 F7 | 	zerox	local04, #19
20cdc     14 22 46 F0 | 	shr	local03, #20
20ce0     02 22 66 F0 | 	shl	local03, #2
20ce4     ED 22 02 F1 | 	add	local03, __methods__
20ce8     11 23 02 FB | 	rdlong	local03, local03
20cec     0F 13 02 F6 | 	mov	arg01, local01
20cf0     F2 26 02 F6 | 	mov	local05, objptr
20cf4     12 E5 01 F6 | 	mov	objptr, local04
20cf8     2D 22 62 FD | 	call	local03
20cfc     13 E5 01 F6 | 	mov	objptr, local05
20d00     FD 20 02 F6 | 	mov	local02, result1
20d04                 | LR__3171
20d04     0F 13 02 F6 | 	mov	arg01, local01
20d08     00 14 06 F6 | 	mov	arg02, #0
20d0c     34 16 06 F6 | 	mov	arg03, #52
20d10     98 00 A0 FD | 	call	#\builtin_bytefill_
20d14     10 FB 01 F6 | 	mov	result1, local02
20d18                 | LR__3172
20d18     A7 F0 03 F6 | 	mov	ptra, fp
20d1c     B2 00 A0 FD | 	call	#popregs_
20d20                 | __system___closeraw_ret
20d20     2D 00 64 FD | 	ret
20d24                 | 
20d24                 | __system___vfs_open_sdcardx
20d24     0B 4A 05 F6 | 	mov	COUNT_, #11
20d28     A8 00 A0 FD | 	call	#pushregs_
20d2c     09 23 02 F6 | 	mov	local03, arg01
20d30     0A 25 02 F6 | 	mov	local04, arg02
20d34     0B 27 02 F6 | 	mov	local05, arg03
20d38     0C 29 02 F6 | 	mov	local06, arg04
20d3c     01 00 00 FF 
20d40     24 12 06 F6 | 	mov	arg01, ##548
20d44     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
20d48     FD 2A 02 F6 | 	mov	local07, result1
20d4c     01 00 00 FF 
20d50     34 12 06 F6 | 	mov	arg01, ##564
20d54     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
20d58     FD 2C 02 F6 | 	mov	local08, result1
20d5c     11 19 02 F6 | 	mov	arg04, local03
20d60     1F 18 C6 F0 | 	sar	arg04, #31
20d64     11 17 02 F6 | 	mov	arg03, local03
20d68     01 12 06 F6 | 	mov	arg01, #1
20d6c     00 14 06 F6 | 	mov	arg02, #0
20d70     48 DC BF FD | 	call	#__system___int64_shl
20d74     FD 1E 02 F6 | 	mov	local01, result1
20d78     FE 2E 02 F6 | 	mov	local09, result2
20d7c     12 19 02 F6 | 	mov	arg04, local04
20d80     1F 18 C6 F0 | 	sar	arg04, #31
20d84     12 17 02 F6 | 	mov	arg03, local04
20d88     01 12 06 F6 | 	mov	arg01, #1
20d8c     00 14 06 F6 | 	mov	arg02, #0
20d90     28 DC BF FD | 	call	#__system___int64_shl
20d94     FD 1E 42 F5 | 	or	local01, result1
20d98     FE 2E 42 F5 | 	or	local09, result2
20d9c     13 19 02 F6 | 	mov	arg04, local05
20da0     1F 18 C6 F0 | 	sar	arg04, #31
20da4     13 17 02 F6 | 	mov	arg03, local05
20da8     01 12 06 F6 | 	mov	arg01, #1
20dac     00 14 06 F6 | 	mov	arg02, #0
20db0     08 DC BF FD | 	call	#__system___int64_shl
20db4     FD 1E 42 F5 | 	or	local01, result1
20db8     FE 2E 42 F5 | 	or	local09, result2
20dbc     14 19 02 F6 | 	mov	arg04, local06
20dc0     1F 18 C6 F0 | 	sar	arg04, #31
20dc4     14 17 02 F6 | 	mov	arg03, local06
20dc8     01 12 06 F6 | 	mov	arg01, #1
20dcc     00 14 06 F6 | 	mov	arg02, #0
20dd0     E8 DB BF FD | 	call	#__system___int64_shl
20dd4     17 15 02 F6 | 	mov	arg02, local09
20dd8     FD 1E 42 F5 | 	or	local01, result1
20ddc     0A FD 41 F5 | 	or	result2, arg02
20de0     FE 20 02 F6 | 	mov	local02, result2
20de4     0F 13 02 F6 | 	mov	arg01, local01
20de8     10 15 02 F6 | 	mov	arg02, local02
20dec     04 DC BF FD | 	call	#__system___usepins
20df0     00 FA 0D F2 | 	cmp	result1, #0 wz
20df4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20df8     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
20dfc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20e00     00 FA 05 A6 |  if_e	mov	result1, #0
20e04     B4 00 90 AD |  if_e	jmp	#LR__3182
20e08     0F 31 02 F6 | 	mov	local10, local01
20e0c     10 2F 02 F6 | 	mov	local09, local02
20e10     01 00 00 FF 
20e14     08 2A 06 F1 | 	add	local07, ##520
20e18     15 31 62 FC | 	wrlong	local10, local07
20e1c     04 2A 06 F1 | 	add	local07, #4
20e20     15 2F 62 FC | 	wrlong	local09, local07
20e24     01 00 00 FF 
20e28     0C 2A 86 F1 | 	sub	local07, ##524
20e2c     14 1B 02 F6 | 	mov	arg05, local06
20e30     00 12 06 F6 | 	mov	arg01, #0
20e34     11 15 02 F6 | 	mov	arg02, local03
20e38     12 17 02 F6 | 	mov	arg03, local04
20e3c     13 19 02 F6 | 	mov	arg04, local05
20e40     F2 30 02 F6 | 	mov	local10, objptr
20e44     15 E5 01 F6 | 	mov	objptr, local07
20e48     78 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
20e4c     18 E5 01 F6 | 	mov	objptr, local10
20e50     FD 32 0A F6 | 	mov	local11, result1 wz
20e54     24 00 90 5D |  if_ne	jmp	#LR__3180
20e58     5C 01 00 FF 
20e5c     0E 15 06 F6 | 	mov	arg02, ##@LR__4577
20e60     16 13 02 F6 | 	mov	arg01, local08
20e64     00 16 06 F6 | 	mov	arg03, #0
20e68     F2 32 02 F6 | 	mov	local11, objptr
20e6c     15 E5 01 F6 | 	mov	objptr, local07
20e70     A8 5E B0 FD | 	call	#_fatfs_cc_f_mount
20e74     19 E5 01 F6 | 	mov	objptr, local11
20e78     FD 32 02 F6 | 	mov	local11, result1
20e7c                 | LR__3180
20e7c     00 32 0E F2 | 	cmp	local11, #0 wz
20e80     24 00 90 AD |  if_e	jmp	#LR__3181
20e84     0F 13 02 F6 | 	mov	arg01, local01
20e88     10 15 02 F6 | 	mov	arg02, local02
20e8c     B8 DB BF FD | 	call	#__system___freepins
20e90     19 13 6A F6 | 	neg	arg01, local11 wz
20e94     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20e98     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20e9c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20ea0     00 FA 05 F6 | 	mov	result1, #0
20ea4     14 00 90 FD | 	jmp	#LR__3182
20ea8                 | LR__3181
20ea8     15 13 02 F6 | 	mov	arg01, local07
20eac     F2 32 02 F6 | 	mov	local11, objptr
20eb0     15 E5 01 F6 | 	mov	objptr, local07
20eb4     44 9B B0 FD | 	call	#_fatfs_cc_get_vfs
20eb8     19 E5 01 F6 | 	mov	objptr, local11
20ebc                 | LR__3182
20ebc     A7 F0 03 F6 | 	mov	ptra, fp
20ec0     B2 00 A0 FD | 	call	#popregs_
20ec4                 | __system___vfs_open_sdcardx_ret
20ec4     2D 00 64 FD | 	ret
20ec8                 | 
20ec8                 | __system____default_getc
20ec8     03 4A 05 F6 | 	mov	COUNT_, #3
20ecc     A8 00 A0 FD | 	call	#pushregs_
20ed0     09 1F 02 F6 | 	mov	local01, arg01
20ed4     0F 21 02 FB | 	rdlong	local02, local01
20ed8     08 20 06 F1 | 	add	local02, #8
20edc     10 23 02 FB | 	rdlong	local03, local02
20ee0     02 22 CE F7 | 	test	local03, #2 wz
20ee4     0F 13 02 56 |  if_ne	mov	arg01, local01
20ee8     00 01 B0 5D |  if_ne	call	#__system____default_flush
20eec     10 23 02 FB | 	rdlong	local03, local02
20ef0     01 22 46 F5 | 	or	local03, #1
20ef4     10 23 62 FC | 	wrlong	local03, local02
20ef8     08 20 86 F1 | 	sub	local02, #8
20efc     10 23 0A FB | 	rdlong	local03, local02 wz
20f00     0C 00 90 5D |  if_ne	jmp	#LR__3190
20f04     0F 13 02 F6 | 	mov	arg01, local01
20f08     60 16 B0 FD | 	call	#__system____default_filbuf
20f0c     FD 22 02 F6 | 	mov	local03, result1
20f10                 | LR__3190
20f10     01 22 56 F2 | 	cmps	local03, #1 wc
20f14     01 FA 65 C6 |  if_b	neg	result1, #1
20f18     1C 00 90 CD |  if_b	jmp	#LR__3191
20f1c     01 22 86 F1 | 	sub	local03, #1
20f20     10 23 62 FC | 	wrlong	local03, local02
20f24     04 20 06 F1 | 	add	local02, #4
20f28     10 23 02 FB | 	rdlong	local03, local02
20f2c     11 FB C1 FA | 	rdbyte	result1, local03
20f30     01 22 06 F1 | 	add	local03, #1
20f34     10 23 62 FC | 	wrlong	local03, local02
20f38                 | LR__3191
20f38     A7 F0 03 F6 | 	mov	ptra, fp
20f3c     B2 00 A0 FD | 	call	#popregs_
20f40                 | __system____default_getc_ret
20f40     2D 00 64 FD | 	ret
20f44                 | 
20f44                 | __system____default_putc
20f44     06 4A 05 F6 | 	mov	COUNT_, #6
20f48     A8 00 A0 FD | 	call	#pushregs_
20f4c     09 1F 02 F6 | 	mov	local01, arg01
20f50     0A 21 02 F6 | 	mov	local02, arg02
20f54     10 23 02 FB | 	rdlong	local03, local02
20f58     08 22 06 F1 | 	add	local03, #8
20f5c     11 FB 01 FB | 	rdlong	result1, local03
20f60     01 FA CD F7 | 	test	result1, #1 wz
20f64     10 13 02 56 |  if_ne	mov	arg01, local02
20f68     80 00 B0 5D |  if_ne	call	#__system____default_flush
20f6c     11 25 02 FB | 	rdlong	local04, local03
20f70     02 24 46 F5 | 	or	local04, #2
20f74     11 25 62 FC | 	wrlong	local04, local03
20f78     08 22 86 F1 | 	sub	local03, #8
20f7c     11 27 02 FB | 	rdlong	local05, local03
20f80     10 22 06 F1 | 	add	local03, #16
20f84     11 15 02 FB | 	rdlong	arg02, local03
20f88     10 22 86 F1 | 	sub	local03, #16
20f8c     13 FB 01 F6 | 	mov	result1, local05
20f90     0A FB 01 F1 | 	add	result1, arg02
20f94     FD 1E 42 FC | 	wrbyte	local01, result1
20f98     0F 1F E2 F8 | 	getbyte	local01, local01, #0
20f9c     01 26 06 F1 | 	add	local05, #1
20fa0     11 27 62 FC | 	wrlong	local05, local03
20fa4     06 20 06 F1 | 	add	local02, #6
20fa8     10 29 EA FA | 	rdword	local06, local02 wz
20fac     06 20 86 F1 | 	sub	local02, #6
20fb0     0C 22 06 51 |  if_ne	add	local03, #12
20fb4     11 25 02 5B |  if_ne	rdlong	local04, local03
20fb8     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
20fbc     0C 00 90 AD |  if_e	jmp	#LR__3200
20fc0     0A 1E 0E F2 | 	cmp	local01, #10 wz
20fc4     01 28 0E A2 |  if_e	cmp	local06, #1 wz
20fc8     10 00 90 5D |  if_ne	jmp	#LR__3201
20fcc                 | LR__3200
20fcc     10 13 02 F6 | 	mov	arg01, local02
20fd0     18 00 B0 FD | 	call	#__system____default_flush
20fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
20fd8     01 1E 66 56 |  if_ne	neg	local01, #1
20fdc                 | LR__3201
20fdc     0F FB 01 F6 | 	mov	result1, local01
20fe0     A7 F0 03 F6 | 	mov	ptra, fp
20fe4     B2 00 A0 FD | 	call	#popregs_
20fe8                 | __system____default_putc_ret
20fe8     2D 00 64 FD | 	ret
20fec                 | 
20fec                 | __system____default_flush
20fec     06 4A 05 F6 | 	mov	COUNT_, #6
20ff0     A8 00 A0 FD | 	call	#pushregs_
20ff4     09 1F 02 F6 | 	mov	local01, arg01
20ff8     0F 21 02 FB | 	rdlong	local02, local01
20ffc     10 23 02 FB | 	rdlong	local03, local02
21000     08 20 06 F1 | 	add	local02, #8
21004     10 FB 01 FB | 	rdlong	result1, local02
21008     08 20 86 F1 | 	sub	local02, #8
2100c     02 FA CD F7 | 	test	result1, #2 wz
21010     D0 00 90 AD |  if_e	jmp	#LR__3212
21014     01 22 56 F2 | 	cmps	local03, #1 wc
21018     20 01 90 CD |  if_b	jmp	#LR__3214
2101c     08 1E 06 F1 | 	add	local01, #8
21020     0F FB 01 FB | 	rdlong	result1, local01
21024     08 1E 86 F1 | 	sub	local01, #8
21028     40 FA CD F7 | 	test	result1, #64 wz
2102c     68 00 90 AD |  if_e	jmp	#LR__3211
21030     08 1E 06 F1 | 	add	local01, #8
21034     0F 17 02 FB | 	rdlong	arg03, local01
21038     08 1E 86 F1 | 	sub	local01, #8
2103c     80 16 CE F7 | 	test	arg03, #128 wz
21040     54 00 90 AD |  if_e	jmp	#LR__3210
21044     30 1E 06 F1 | 	add	local01, #48
21048     0F 25 02 FB | 	rdlong	local04, local01
2104c     12 27 02 F6 | 	mov	local05, local04
21050     30 1E 86 F1 | 	sub	local01, #48
21054     13 26 46 F7 | 	zerox	local05, #19
21058     14 24 46 F0 | 	shr	local04, #20
2105c     02 24 66 F0 | 	shl	local04, #2
21060     ED 24 02 F1 | 	add	local04, __methods__
21064     12 25 02 FB | 	rdlong	local04, local04
21068     0F 13 02 F6 | 	mov	arg01, local01
2106c     00 14 06 F6 | 	mov	arg02, #0
21070     02 16 06 F6 | 	mov	arg03, #2
21074     F2 28 02 F6 | 	mov	local06, objptr
21078     13 E5 01 F6 | 	mov	objptr, local05
2107c     2D 24 62 FD | 	call	local04
21080     14 E5 01 F6 | 	mov	objptr, local06
21084     08 1E 06 F1 | 	add	local01, #8
21088     0F 29 02 FB | 	rdlong	local06, local01
2108c     80 28 26 F5 | 	andn	local06, #128
21090     0F 29 62 FC | 	wrlong	local06, local01
21094     08 1E 86 F1 | 	sub	local01, #8
21098                 | LR__3210
21098                 | LR__3211
21098     18 1E 06 F1 | 	add	local01, #24
2109c     0F 25 02 FB | 	rdlong	local04, local01
210a0     12 27 02 F6 | 	mov	local05, local04
210a4     18 1E 86 F1 | 	sub	local01, #24
210a8     13 26 46 F7 | 	zerox	local05, #19
210ac     14 24 46 F0 | 	shr	local04, #20
210b0     02 24 66 F0 | 	shl	local04, #2
210b4     ED 24 02 F1 | 	add	local04, __methods__
210b8     12 25 02 FB | 	rdlong	local04, local04
210bc     10 20 06 F1 | 	add	local02, #16
210c0     10 15 02 FB | 	rdlong	arg02, local02
210c4     10 20 86 F1 | 	sub	local02, #16
210c8     0F 13 02 F6 | 	mov	arg01, local01
210cc     11 17 02 F6 | 	mov	arg03, local03
210d0     F2 28 02 F6 | 	mov	local06, objptr
210d4     13 E5 01 F6 | 	mov	objptr, local05
210d8     2D 24 62 FD | 	call	local04
210dc     14 E5 01 F6 | 	mov	objptr, local06
210e0     58 00 90 FD | 	jmp	#LR__3214
210e4                 | LR__3212
210e4     08 20 06 F1 | 	add	local02, #8
210e8     10 29 02 FB | 	rdlong	local06, local02
210ec     08 20 86 F1 | 	sub	local02, #8
210f0     01 28 CE F7 | 	test	local06, #1 wz
210f4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
210f8     40 00 90 AD |  if_e	jmp	#LR__3213
210fc     30 1E 06 F1 | 	add	local01, #48
21100     0F 25 02 FB | 	rdlong	local04, local01
21104     12 27 02 F6 | 	mov	local05, local04
21108     30 1E 86 F1 | 	sub	local01, #48
2110c     13 26 46 F7 | 	zerox	local05, #19
21110     14 24 46 F0 | 	shr	local04, #20
21114     02 24 66 F0 | 	shl	local04, #2
21118     ED 24 02 F1 | 	add	local04, __methods__
2111c     12 25 02 FB | 	rdlong	local04, local04
21120     0F 13 02 F6 | 	mov	arg01, local01
21124     11 15 62 F6 | 	neg	arg02, local03
21128     01 16 06 F6 | 	mov	arg03, #1
2112c     F2 28 02 F6 | 	mov	local06, objptr
21130     13 E5 01 F6 | 	mov	objptr, local05
21134     2D 24 62 FD | 	call	local04
21138     14 E5 01 F6 | 	mov	objptr, local06
2113c                 | LR__3213
2113c                 | LR__3214
2113c     10 01 68 FC | 	wrlong	#0, local02
21140     04 20 06 F1 | 	add	local02, #4
21144     10 01 68 FC | 	wrlong	#0, local02
21148     04 20 06 F1 | 	add	local02, #4
2114c     10 01 68 FC | 	wrlong	#0, local02
21150     00 FA 05 F6 | 	mov	result1, #0
21154     A7 F0 03 F6 | 	mov	ptra, fp
21158     B2 00 A0 FD | 	call	#popregs_
2115c                 | __system____default_flush_ret
2115c     2D 00 64 FD | 	ret
21160                 | 
21160                 | __system____default_buffer_init
21160     02 4A 05 F6 | 	mov	COUNT_, #2
21164     A8 00 A0 FD | 	call	#pushregs_
21168     09 1F 02 F6 | 	mov	local01, arg01
2116c     0F 21 02 FB | 	rdlong	local02, local01
21170     0F 13 02 F6 | 	mov	arg01, local01
21174     F8 02 B0 FD | 	call	#__system___isatty
21178     00 FA 0D F2 | 	cmp	result1, #0 wz
2117c     06 1E 06 51 |  if_ne	add	local01, #6
21180     0F 0B 58 5C |  if_ne	wrword	#5, local01
21184     06 1E 06 A1 |  if_e	add	local01, #6
21188     0F 0D 58 AC |  if_e	wrword	#6, local01
2118c     14 20 06 F1 | 	add	local02, #20
21190     10 1F 02 F6 | 	mov	local01, local02
21194     04 20 86 F1 | 	sub	local02, #4
21198     10 1F 62 FC | 	wrlong	local01, local02
2119c     04 20 86 F1 | 	sub	local02, #4
211a0     02 00 80 FF 
211a4     10 01 68 FC | 	wrlong	##1024, local02
211a8     00 FA 05 F6 | 	mov	result1, #0
211ac     A7 F0 03 F6 | 	mov	ptra, fp
211b0     B2 00 A0 FD | 	call	#popregs_
211b4                 | __system____default_buffer_init_ret
211b4     2D 00 64 FD | 	ret
211b8                 | 
211b8                 | __system__stat
211b8     04 4A 05 F6 | 	mov	COUNT_, #4
211bc     A8 00 A0 FD | 	call	#pushregs_
211c0     0A 1F 02 F6 | 	mov	local01, arg02
211c4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
211c8     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
211cc     09 15 02 F6 | 	mov	arg02, arg01
211d0     10 13 02 F6 | 	mov	arg01, local02
211d4     00 16 06 F6 | 	mov	arg03, #0
211d8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
211dc     B0 B8 BF FD | 	call	#__system____getvfsforfile
211e0     FD 22 0A F6 | 	mov	local03, result1 wz
211e4     10 00 90 AD |  if_e	jmp	#LR__3220
211e8     34 22 06 F1 | 	add	local03, #52
211ec     11 17 0A FB | 	rdlong	arg03, local03 wz
211f0     34 22 86 F1 | 	sub	local03, #52
211f4     14 00 90 5D |  if_ne	jmp	#LR__3221
211f8                 | LR__3220
211f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
211fc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
21200     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21204     01 FA 65 F6 | 	neg	result1, #1
21208     68 00 90 FD | 	jmp	#LR__3222
2120c                 | LR__3221
2120c     0F 13 02 F6 | 	mov	arg01, local01
21210     00 14 06 F6 | 	mov	arg02, #0
21214     30 16 06 F6 | 	mov	arg03, #48
21218     09 25 02 F6 | 	mov	local04, arg01
2121c     98 00 A0 FD | 	call	#\builtin_bytefill_
21220     12 FB 01 F6 | 	mov	result1, local04
21224     10 13 CA FA | 	rdbyte	arg01, local02 wz
21228     08 1E 06 A1 |  if_e	add	local01, #8
2122c     08 00 80 AF 
21230     0F FF 6B AC |  if_e	wrlong	##4607, local01
21234     00 FA 05 A6 |  if_e	mov	result1, #0
21238     38 00 90 AD |  if_e	jmp	#LR__3222
2123c     34 22 06 F1 | 	add	local03, #52
21240     11 23 02 FB | 	rdlong	local03, local03
21244     11 25 02 F6 | 	mov	local04, local03
21248     13 22 46 F7 | 	zerox	local03, #19
2124c     14 24 46 F0 | 	shr	local04, #20
21250     02 24 66 F0 | 	shl	local04, #2
21254     ED 24 02 F1 | 	add	local04, __methods__
21258     12 25 02 FB | 	rdlong	local04, local04
2125c     10 13 02 F6 | 	mov	arg01, local02
21260     0F 15 02 F6 | 	mov	arg02, local01
21264     F2 20 02 F6 | 	mov	local02, objptr
21268     11 E5 01 F6 | 	mov	objptr, local03
2126c     2D 24 62 FD | 	call	local04
21270     10 E5 01 F6 | 	mov	objptr, local02
21274                 | LR__3222
21274     A7 F0 03 F6 | 	mov	ptra, fp
21278     B2 00 A0 FD | 	call	#popregs_
2127c                 | __system__stat_ret
2127c     2D 00 64 FD | 	ret
21280                 | 
21280                 | __system__read
21280     0A 12 16 F2 | 	cmp	arg01, #10 wc
21284     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
21288     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2128c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
21290     01 FA 65 36 |  if_ae	neg	result1, #1
21294     20 00 90 3D |  if_ae	jmp	#LR__3230
21298     34 12 06 FD | 	qmul	arg01, #52
2129c     02 00 00 FF 
212a0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
212a4     18 12 62 FD | 	getqx	arg01
212a8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
212ac     02 00 00 FF 
212b0     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
212b4     CC 0F B0 FD | 	call	#__system___vfsread
212b8                 | LR__3230
212b8                 | __system__read_ret
212b8     2D 00 64 FD | 	ret
212bc                 | 
212bc                 | __system__close
212bc     0A 12 16 F2 | 	cmp	arg01, #10 wc
212c0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
212c4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
212c8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
212cc     01 FA 65 36 |  if_ae	neg	result1, #1
212d0     20 00 90 3D |  if_ae	jmp	#LR__3240
212d4     34 12 06 FD | 	qmul	arg01, #52
212d8     02 00 00 FF 
212dc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
212e0     18 12 62 FD | 	getqx	arg01
212e4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
212e8     02 00 00 FF 
212ec     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
212f0     4C F9 BF FD | 	call	#__system___closeraw
212f4                 | LR__3240
212f4                 | __system__close_ret
212f4     2D 00 64 FD | 	ret
212f8                 | 
212f8                 | __system__lseek
212f8     06 4A 05 F6 | 	mov	COUNT_, #6
212fc     A8 00 A0 FD | 	call	#pushregs_
21300     0A 12 16 F2 | 	cmp	arg01, #10 wc
21304     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
21308     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2130c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
21310     01 FA 65 36 |  if_ae	neg	result1, #1
21314     C4 00 90 3D |  if_ae	jmp	#LR__3251
21318     34 12 06 FD | 	qmul	arg01, #52
2131c     02 00 00 FF 
21320     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
21324     18 1E 62 FD | 	getqx	local01
21328     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
2132c     30 1E 06 F1 | 	add	local01, #48
21330     0F 13 0A FB | 	rdlong	arg01, local01 wz
21334     30 1E 86 F1 | 	sub	local01, #48
21338     02 00 00 FF 
2133c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
21340     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21344     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
21348     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2134c     01 FA 65 A6 |  if_e	neg	result1, #1
21350     88 00 90 AD |  if_e	jmp	#LR__3251
21354     08 1E 06 F1 | 	add	local01, #8
21358     0F 21 02 FB | 	rdlong	local02, local01
2135c     08 1E 86 F1 | 	sub	local01, #8
21360     40 20 CE F7 | 	test	local02, #64 wz
21364     08 1E 06 51 |  if_ne	add	local01, #8
21368     0F 21 02 5B |  if_ne	rdlong	local02, local01
2136c     80 20 46 55 |  if_ne	or	local02, #128
21370     0F 21 62 5C |  if_ne	wrlong	local02, local01
21374     08 1E 86 51 |  if_ne	sub	local01, #8
21378     30 1E 06 F1 | 	add	local01, #48
2137c     0F 23 02 FB | 	rdlong	local03, local01
21380     11 25 02 F6 | 	mov	local04, local03
21384     30 1E 86 F1 | 	sub	local01, #48
21388     13 24 46 F7 | 	zerox	local04, #19
2138c     14 22 46 F0 | 	shr	local03, #20
21390     02 22 66 F0 | 	shl	local03, #2
21394     ED 22 02 F1 | 	add	local03, __methods__
21398     11 23 02 FB | 	rdlong	local03, local03
2139c     0F 13 02 F6 | 	mov	arg01, local01
213a0     F2 26 02 F6 | 	mov	local05, objptr
213a4     12 E5 01 F6 | 	mov	objptr, local04
213a8     2D 22 62 FD | 	call	local03
213ac     13 E5 01 F6 | 	mov	objptr, local05
213b0     FD 28 02 F6 | 	mov	local06, result1
213b4     00 28 56 F2 | 	cmps	local06, #0 wc
213b8     1C 00 90 3D |  if_ae	jmp	#LR__3250
213bc     14 13 6A F6 | 	neg	arg01, local06 wz
213c0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
213c4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
213c8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
213cc     01 FA 65 56 |  if_ne	neg	result1, #1
213d0     00 FA 05 A6 |  if_e	mov	result1, #0
213d4     04 00 90 FD | 	jmp	#LR__3251
213d8                 | LR__3250
213d8     14 FB 01 F6 | 	mov	result1, local06
213dc                 | LR__3251
213dc     A7 F0 03 F6 | 	mov	ptra, fp
213e0     B2 00 A0 FD | 	call	#popregs_
213e4                 | __system__lseek_ret
213e4     2D 00 64 FD | 	ret
213e8                 | 
213e8                 | __system___ioctl
213e8     03 4A 05 F6 | 	mov	COUNT_, #3
213ec     A8 00 A0 FD | 	call	#pushregs_
213f0     00 12 4E F2 | 	cmps	arg01, #0 wz
213f4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
213f8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
213fc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21400     01 FA 65 A6 |  if_e	neg	result1, #1
21404     5C 00 90 AD |  if_e	jmp	#LR__3261
21408     28 12 06 F1 | 	add	arg01, #40
2140c     09 1F 02 FB | 	rdlong	local01, arg01
21410     0F 21 02 F6 | 	mov	local02, local01
21414     28 12 86 F1 | 	sub	arg01, #40
21418     13 20 46 F7 | 	zerox	local02, #19
2141c     14 1E 46 F0 | 	shr	local01, #20
21420     02 1E 66 F0 | 	shl	local01, #2
21424     ED 1E 02 F1 | 	add	local01, __methods__
21428     0F 1F 02 FB | 	rdlong	local01, local01
2142c     F2 22 02 F6 | 	mov	local03, objptr
21430     10 E5 01 F6 | 	mov	objptr, local02
21434     2D 1E 62 FD | 	call	local01
21438     11 E5 01 F6 | 	mov	objptr, local03
2143c     FD 12 0A F6 | 	mov	arg01, result1 wz
21440     1C 00 90 AD |  if_e	jmp	#LR__3260
21444     00 12 4E F2 | 	cmps	arg01, #0 wz
21448     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2144c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21450     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21454     01 FA 65 56 |  if_ne	neg	result1, #1
21458     00 FA 05 A6 |  if_e	mov	result1, #0
2145c     04 00 90 FD | 	jmp	#LR__3261
21460                 | LR__3260
21460     00 FA 05 F6 | 	mov	result1, #0
21464                 | LR__3261
21464     A7 F0 03 F6 | 	mov	ptra, fp
21468     B2 00 A0 FD | 	call	#popregs_
2146c                 | __system___ioctl_ret
2146c     2D 00 64 FD | 	ret
21470                 | 
21470                 | __system___isatty
21470     00 4A 05 F6 | 	mov	COUNT_, #0
21474     A8 00 A0 FD | 	call	#pushregs_
21478     0C F0 07 F1 | 	add	ptra, #12
2147c     04 4E 05 F1 | 	add	fp, #4
21480     A7 12 62 FC | 	wrlong	arg01, fp
21484     04 4E 05 F1 | 	add	fp, #4
21488     A7 16 02 F6 | 	mov	arg03, fp
2148c     08 4E 85 F1 | 	sub	fp, #8
21490     00 15 06 F6 | 	mov	arg02, #256
21494     50 FF BF FD | 	call	#__system___ioctl
21498     00 FA 0D F2 | 	cmp	result1, #0 wz
2149c     01 FA 05 A6 |  if_e	mov	result1, #1
214a0     00 FA 05 56 |  if_ne	mov	result1, #0
214a4     A7 F0 03 F6 | 	mov	ptra, fp
214a8     B2 00 A0 FD | 	call	#popregs_
214ac                 | __system___isatty_ret
214ac     2D 00 64 FD | 	ret
214b0                 | 
214b0                 | __system____getftab
214b0     0A 12 16 F2 | 	cmp	arg01, #10 wc
214b4     34 12 06 CD |  if_b	qmul	arg01, #52
214b8     00 FA 05 36 |  if_ae	mov	result1, #0
214bc     02 00 00 CF 
214c0     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
214c4     18 FA 61 CD |  if_b	getqx	result1
214c8     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
214cc     02 00 00 CF 
214d0     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
214d4                 | __system____getftab_ret
214d4     2D 00 64 FD | 	ret
214d8                 | 
214d8                 | __system__strncpy
214d8     09 01 02 F6 | 	mov	_var01, arg01
214dc                 | LR__3270
214dc     01 16 86 F1 | 	sub	arg03, #1
214e0     00 16 56 F2 | 	cmps	arg03, #0 wc
214e4     18 00 90 CD |  if_b	jmp	#LR__3271
214e8     0A FB C1 FA | 	rdbyte	result1, arg02
214ec     00 FB 41 FC | 	wrbyte	result1, _var01
214f0     01 14 06 F1 | 	add	arg02, #1
214f4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
214f8     01 00 06 F1 | 	add	_var01, #1
214fc     DC FF 9F 5D |  if_ne	jmp	#LR__3270
21500                 | LR__3271
21500     97 0C 48 FB | 	callpa	#(@LR__3273-@LR__3272)>>2,fcache_load_ptr_
21504                 | LR__3272
21504     01 16 86 F1 | 	sub	arg03, #1
21508     00 16 56 F2 | 	cmps	arg03, #0 wc
2150c     00 03 02 36 |  if_ae	mov	_var02, _var01
21510     01 00 06 31 |  if_ae	add	_var01, #1
21514     01 01 48 3C |  if_ae	wrbyte	#0, _var02
21518     E8 FF 9F 3D |  if_ae	jmp	#LR__3272
2151c                 | LR__3273
2151c     09 FB 01 F6 | 	mov	result1, arg01
21520                 | __system__strncpy_ret
21520     2D 00 64 FD | 	ret
21524                 | 
21524                 | __system__strncat
21524     00 14 4E F2 | 	cmps	arg02, #0 wz
21528     50 00 90 AD |  if_e	jmp	#LR__3284
2152c     01 16 16 F2 | 	cmp	arg03, #1 wc
21530     48 00 90 CD |  if_b	jmp	#LR__3284
21534     09 01 02 F6 | 	mov	_var01, arg01
21538     97 1E 48 FB | 	callpa	#(@LR__3282-@LR__3280)>>2,fcache_load_ptr_
2153c                 | LR__3280
2153c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
21540     01 00 06 51 |  if_ne	add	_var01, #1
21544     F4 FF 9F 5D |  if_ne	jmp	#LR__3280
21548     0B 03 02 F6 | 	mov	_var02, arg03
2154c                 | LR__3281
2154c     0A 05 C2 FA | 	rdbyte	_var03, arg02
21550     02 07 02 F6 | 	mov	_var04, _var03
21554     07 06 4E F7 | 	zerox	_var04, #7 wz
21558     01 14 06 F1 | 	add	arg02, #1
2155c     18 00 90 AD |  if_e	jmp	#LR__3283
21560     01 02 86 F1 | 	sub	_var02, #1
21564     00 02 56 F2 | 	cmps	_var02, #0 wc
21568     00 07 02 36 |  if_ae	mov	_var04, _var01
2156c     01 00 06 31 |  if_ae	add	_var01, #1
21570     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
21574     D4 FF 9F 3D |  if_ae	jmp	#LR__3281
21578                 | LR__3282
21578                 | LR__3283
21578     00 01 48 FC | 	wrbyte	#0, _var01
2157c                 | LR__3284
2157c     09 FB 01 F6 | 	mov	result1, arg01
21580                 | __system__strncat_ret
21580     2D 00 64 FD | 	ret
21584                 | 
21584                 | __system__strncmp
21584     09 01 0A F6 | 	mov	_var01, arg01 wz
21588     14 00 90 5D |  if_ne	jmp	#LR__3290
2158c     00 14 0E F2 | 	cmp	arg02, #0 wz
21590     01 02 66 56 |  if_ne	neg	_var02, #1
21594     00 02 06 A6 |  if_e	mov	_var02, #0
21598     01 FB 01 F6 | 	mov	result1, _var02
2159c     74 00 90 FD | 	jmp	#__system__strncmp_ret
215a0                 | LR__3290
215a0     00 14 0E F2 | 	cmp	arg02, #0 wz
215a4     01 FA 05 A6 |  if_e	mov	result1, #1
215a8     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
215ac     0B 05 02 F6 | 	mov	_var03, arg03
215b0     97 16 48 FB | 	callpa	#(@LR__3292-@LR__3291)>>2,fcache_load_ptr_
215b4                 | LR__3291
215b4     00 07 C2 FA | 	rdbyte	_var04, _var01
215b8     0A 09 02 F6 | 	mov	_var05, arg02
215bc     04 0B C2 FA | 	rdbyte	_var06, _var05
215c0     01 04 86 F1 | 	sub	_var03, #1
215c4     00 04 56 F2 | 	cmps	_var03, #0 wc
215c8     01 00 06 F1 | 	add	_var01, #1
215cc     01 14 06 F1 | 	add	arg02, #1
215d0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
215d4     08 00 90 2D |  if_nc_and_z	jmp	#LR__3293
215d8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
215dc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3291
215e0                 | LR__3292
215e0                 | LR__3293
215e0     00 04 56 F2 | 	cmps	_var03, #0 wc
215e4     00 FA 05 C6 |  if_b	mov	result1, #0
215e8     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
215ec     05 07 0A F2 | 	cmp	_var04, _var06 wz
215f0     00 FA 05 A6 |  if_e	mov	result1, #0
215f4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
215f8     00 06 0E F2 | 	cmp	_var04, #0 wz
215fc     01 FA 65 A6 |  if_e	neg	result1, #1
21600     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
21604     00 0A 0E F2 | 	cmp	_var06, #0 wz
21608     01 FA 05 A6 |  if_e	mov	result1, #1
2160c     03 FB 01 56 |  if_ne	mov	result1, _var04
21610     05 FB 81 51 |  if_ne	sub	result1, _var06
21614                 | __system__strncmp_ret
21614     2D 00 64 FD | 	ret
21618                 | 
21618                 | __system____root_opendir
21618     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2161c     04 12 06 F1 | 	add	arg01, #4
21620     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
21624     00 FA 05 F6 | 	mov	result1, #0
21628     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2162c                 | __system____root_opendir_ret
2162c     2D 00 64 FD | 	ret
21630                 | 
21630                 | __system____root_readdir
21630     03 4A 05 F6 | 	mov	COUNT_, #3
21634     A8 00 A0 FD | 	call	#pushregs_
21638     09 1F 02 F6 | 	mov	local01, arg01
2163c     0A 21 02 F6 | 	mov	local02, arg02
21640     04 1E 06 F1 | 	add	local01, #4
21644     0F 23 02 FB | 	rdlong	local03, local01
21648     04 1E 86 F1 | 	sub	local01, #4
2164c                 | LR__3300
2164c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21650     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
21654     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21658     01 FA 65 A6 |  if_e	neg	result1, #1
2165c     48 00 90 AD |  if_e	jmp	#LR__3301
21660     11 17 0A FB | 	rdlong	arg03, local03 wz
21664     04 22 06 A1 |  if_e	add	local03, #4
21668     E0 FF 9F AD |  if_e	jmp	#LR__3300
2166c     11 15 02 FB | 	rdlong	arg02, local03
21670     01 14 06 F1 | 	add	arg02, #1
21674     10 13 02 F6 | 	mov	arg01, local02
21678     40 16 06 F6 | 	mov	arg03, #64
2167c     58 FE BF FD | 	call	#__system__strncpy
21680     50 20 06 F1 | 	add	local02, #80
21684     10 03 48 FC | 	wrbyte	#1, local02
21688     08 20 86 F1 | 	sub	local02, #8
2168c     10 01 68 FC | 	wrlong	#0, local02
21690     04 20 06 F1 | 	add	local02, #4
21694     10 01 68 FC | 	wrlong	#0, local02
21698     04 22 06 F1 | 	add	local03, #4
2169c     04 1E 06 F1 | 	add	local01, #4
216a0     0F 23 62 FC | 	wrlong	local03, local01
216a4     00 FA 05 F6 | 	mov	result1, #0
216a8                 | LR__3301
216a8     A7 F0 03 F6 | 	mov	ptra, fp
216ac     B2 00 A0 FD | 	call	#popregs_
216b0                 | __system____root_readdir_ret
216b0     2D 00 64 FD | 	ret
216b4                 | 
216b4                 | __system____root_closedir
216b4     00 FA 05 F6 | 	mov	result1, #0
216b8                 | __system____root_closedir_ret
216b8     2D 00 64 FD | 	ret
216bc                 | 
216bc                 | __system____root_stat
216bc     0A 01 02 F6 | 	mov	_var01, arg02
216c0     00 13 02 F6 | 	mov	arg01, _var01
216c4     00 14 06 F6 | 	mov	arg02, #0
216c8     30 16 06 F6 | 	mov	arg03, #48
216cc     98 00 A0 FD | 	call	#\builtin_bytefill_
216d0     08 00 06 F1 | 	add	_var01, #8
216d4     08 00 80 FF 
216d8     00 FF 6B FC | 	wrlong	##4607, _var01
216dc     00 FA 05 F6 | 	mov	result1, #0
216e0                 | __system____root_stat_ret
216e0     2D 00 64 FD | 	ret
216e4                 | 
216e4                 | __system___normalizeName
216e4     00 00 06 F6 | 	mov	_var01, #0
216e8     09 03 02 F6 | 	mov	_var02, arg01
216ec     01 05 02 F6 | 	mov	_var03, _var02
216f0                 | LR__3310
216f0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
216f4     5C 01 90 AD |  if_e	jmp	#LR__3329
216f8     00 00 0E F2 | 	cmp	_var01, #0 wz
216fc     02 07 02 56 |  if_ne	mov	_var04, _var03
21700     01 04 06 51 |  if_ne	add	_var03, #1
21704     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
21708     00 00 06 56 |  if_ne	mov	_var01, #0
2170c     01 07 C2 FA | 	rdbyte	_var04, _var02
21710     2E 06 0E F2 | 	cmp	_var04, #46 wz
21714     D8 00 90 5D |  if_ne	jmp	#LR__3322
21718     01 02 06 F1 | 	add	_var02, #1
2171c     01 07 C2 FA | 	rdbyte	_var04, _var02
21720     01 02 86 F1 | 	sub	_var02, #1
21724     2F 06 0E F2 | 	cmp	_var04, #47 wz
21728     18 00 90 AD |  if_e	jmp	#LR__3311
2172c     01 02 06 F1 | 	add	_var02, #1
21730     01 09 C2 FA | 	rdbyte	_var05, _var02
21734     01 02 86 F1 | 	sub	_var02, #1
21738     04 0B 02 F6 | 	mov	_var06, _var05
2173c     07 0A 4E F7 | 	zerox	_var06, #7 wz
21740     10 00 90 5D |  if_ne	jmp	#LR__3312
21744                 | LR__3311
21744     01 0D 02 F6 | 	mov	_var07, _var02
21748     01 0C 06 F1 | 	add	_var07, #1
2174c     06 03 02 F6 | 	mov	_var02, _var07
21750     E0 00 90 FD | 	jmp	#LR__3326
21754                 | LR__3312
21754     01 02 06 F1 | 	add	_var02, #1
21758     01 0D C2 FA | 	rdbyte	_var07, _var02
2175c     01 02 86 F1 | 	sub	_var02, #1
21760     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
21764     2E 06 0E F2 | 	cmp	_var04, #46 wz
21768     84 00 90 5D |  if_ne	jmp	#LR__3321
2176c     02 02 06 F1 | 	add	_var02, #2
21770     01 0D C2 FA | 	rdbyte	_var07, _var02
21774     02 02 86 F1 | 	sub	_var02, #2
21778     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2177c     2F 06 0E F2 | 	cmp	_var04, #47 wz
21780     18 00 90 AD |  if_e	jmp	#LR__3313
21784     02 02 06 F1 | 	add	_var02, #2
21788     01 09 C2 FA | 	rdbyte	_var05, _var02
2178c     02 02 86 F1 | 	sub	_var02, #2
21790     04 0B 02 F6 | 	mov	_var06, _var05
21794     07 0A 4E F7 | 	zerox	_var06, #7 wz
21798     54 00 90 5D |  if_ne	jmp	#LR__3320
2179c                 | LR__3313
2179c     02 02 06 F1 | 	add	_var02, #2
217a0     09 05 5A F2 | 	cmps	_var03, arg01 wcz
217a4     40 00 90 ED |  if_be	jmp	#LR__3319
217a8     02 0F 02 F6 | 	mov	_var08, _var03
217ac     01 0E 86 F1 | 	sub	_var08, #1
217b0                 | LR__3314
217b0     07 07 C2 FA | 	rdbyte	_var04, _var08
217b4     2F 06 0E F2 | 	cmp	_var04, #47 wz
217b8     0C 00 90 5D |  if_ne	jmp	#LR__3315
217bc     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
217c0     01 0E 86 11 |  if_a	sub	_var08, #1
217c4     E8 FF 9F 1D |  if_a	jmp	#LR__3314
217c8                 | LR__3315
217c8     97 0C 48 FB | 	callpa	#(@LR__3317-@LR__3316)>>2,fcache_load_ptr_
217cc                 | LR__3316
217cc     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
217d0     10 00 90 ED |  if_be	jmp	#LR__3318
217d4     07 07 C2 FA | 	rdbyte	_var04, _var08
217d8     2F 06 0E F2 | 	cmp	_var04, #47 wz
217dc     01 0E 86 51 |  if_ne	sub	_var08, #1
217e0     E8 FF 9F 5D |  if_ne	jmp	#LR__3316
217e4                 | LR__3317
217e4                 | LR__3318
217e4     07 05 02 F6 | 	mov	_var03, _var08
217e8                 | LR__3319
217e8     01 00 06 F6 | 	mov	_var01, #1
217ec     44 00 90 FD | 	jmp	#LR__3326
217f0                 | LR__3320
217f0                 | LR__3321
217f0                 | LR__3322
217f0     97 18 48 FB | 	callpa	#(@LR__3324-@LR__3323)>>2,fcache_load_ptr_
217f4                 | LR__3323
217f4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
217f8     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
217fc     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
21800     20 00 90 AD |  if_e	jmp	#LR__3325
21804     01 0B 02 F6 | 	mov	_var06, _var02
21808     01 09 02 F6 | 	mov	_var05, _var02
2180c     01 08 06 F1 | 	add	_var05, #1
21810     05 11 C2 FA | 	rdbyte	_var09, _var06
21814     04 03 02 F6 | 	mov	_var02, _var05
21818     02 11 42 FC | 	wrbyte	_var09, _var03
2181c     01 04 06 F1 | 	add	_var03, #1
21820     D0 FF 9F FD | 	jmp	#LR__3323
21824                 | LR__3324
21824                 | LR__3325
21824     01 07 C2 FA | 	rdbyte	_var04, _var02
21828     2F 06 0E F2 | 	cmp	_var04, #47 wz
2182c     C0 FE 9F 5D |  if_ne	jmp	#LR__3310
21830     01 00 06 F6 | 	mov	_var01, #1
21834                 | LR__3326
21834     97 0C 48 FB | 	callpa	#(@LR__3328-@LR__3327)>>2,fcache_load_ptr_
21838                 | LR__3327
21838     01 07 C2 FA | 	rdbyte	_var04, _var02
2183c     2F 06 0E F2 | 	cmp	_var04, #47 wz
21840     01 0D 02 A6 |  if_e	mov	_var07, _var02
21844     01 0C 06 A1 |  if_e	add	_var07, #1
21848     06 03 02 A6 |  if_e	mov	_var02, _var07
2184c     E8 FF 9F AD |  if_e	jmp	#LR__3327
21850                 | LR__3328
21850     9C FE 9F FD | 	jmp	#LR__3310
21854                 | LR__3329
21854     02 01 48 FC | 	wrbyte	#0, _var03
21858                 | __system___normalizeName_ret
21858     2D 00 64 FD | 	ret
2185c                 | 
2185c                 | __system___strrev
2185c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
21860     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
21864     09 03 02 F6 | 	mov	_var02, arg01
21868     97 1A 48 FB | 	callpa	#(@LR__3332-@LR__3330)>>2,fcache_load_ptr_
2186c                 | LR__3330
2186c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
21870     01 02 06 51 |  if_ne	add	_var02, #1
21874     F4 FF 9F 5D |  if_ne	jmp	#LR__3330
21878     01 02 86 F1 | 	sub	_var02, #1
2187c                 | LR__3331
2187c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
21880     1C 00 90 ED |  if_be	jmp	#LR__3333
21884     09 01 C2 FA | 	rdbyte	_var01, arg01
21888     01 05 C2 FA | 	rdbyte	_var03, _var02
2188c     09 05 42 FC | 	wrbyte	_var03, arg01
21890     01 01 42 FC | 	wrbyte	_var01, _var02
21894     01 12 06 F1 | 	add	arg01, #1
21898     01 02 86 F1 | 	sub	_var02, #1
2189c     DC FF 9F FD | 	jmp	#LR__3331
218a0                 | LR__3332
218a0                 | LR__3333
218a0                 | __system___strrev_ret
218a0     2D 00 64 FD | 	ret
218a4                 | 
218a4                 | __system___fmtpad
218a4     06 4A 05 F6 | 	mov	COUNT_, #6
218a8     A8 00 A0 FD | 	call	#pushregs_
218ac     09 1F 02 F6 | 	mov	local01, arg01
218b0     0A 21 02 F6 | 	mov	local02, arg02
218b4     0B 23 02 F6 | 	mov	local03, arg03
218b8     10 13 EA F8 | 	getbyte	arg01, local02, #1
218bc     16 20 46 F0 | 	shr	local02, #22
218c0     03 20 0E F5 | 	and	local02, #3 wz
218c4     00 24 06 F6 | 	mov	local04, #0
218c8     01 20 06 A6 |  if_e	mov	local02, #1
218cc     0C 21 CA F7 | 	test	local02, arg04 wz
218d0     00 FA 05 A6 |  if_e	mov	result1, #0
218d4     88 00 90 AD |  if_e	jmp	#LR__3343
218d8     09 23 C2 F2 | 	subr	local03, arg01
218dc     01 22 56 F2 | 	cmps	local03, #1 wc
218e0     00 FA 05 C6 |  if_b	mov	result1, #0
218e4     78 00 90 CD |  if_b	jmp	#LR__3343
218e8     03 20 0E F2 | 	cmp	local02, #3 wz
218ec     18 00 90 5D |  if_ne	jmp	#LR__3340
218f0     01 18 0E F2 | 	cmp	arg04, #1 wz
218f4     6E 20 62 FD | 	wrz	local02
218f8     10 23 02 F1 | 	add	local03, local02
218fc     11 23 52 F6 | 	abs	local03, local03 wc
21900     01 22 46 F0 | 	shr	local03, #1
21904     11 23 82 F6 | 	negc	local03, local03
21908                 | LR__3340
21908     01 22 56 F2 | 	cmps	local03, #1 wc
2190c     4C 00 90 CD |  if_b	jmp	#LR__3342
21910     11 27 02 F6 | 	mov	local05, local03
21914                 | LR__3341
21914     0F 21 02 F6 | 	mov	local02, local01
21918     0F 29 02 F6 | 	mov	local06, local01
2191c     13 20 46 F7 | 	zerox	local02, #19
21920     14 28 46 F0 | 	shr	local06, #20
21924     02 28 66 F0 | 	shl	local06, #2
21928     ED 28 02 F1 | 	add	local06, __methods__
2192c     14 29 02 FB | 	rdlong	local06, local06
21930     20 12 06 F6 | 	mov	arg01, #32
21934     F2 22 02 F6 | 	mov	local03, objptr
21938     10 E5 01 F6 | 	mov	objptr, local02
2193c     2D 28 62 FD | 	call	local06
21940     11 E5 01 F6 | 	mov	objptr, local03
21944     FD 28 02 F6 | 	mov	local06, result1
21948     00 28 56 F2 | 	cmps	local06, #0 wc
2194c     14 FB 01 C6 |  if_b	mov	result1, local06
21950     0C 00 90 CD |  if_b	jmp	#LR__3343
21954     14 25 02 F1 | 	add	local04, local06
21958     EE 27 6E FB | 	djnz	local05, #LR__3341
2195c                 | LR__3342
2195c     12 FB 01 F6 | 	mov	result1, local04
21960                 | LR__3343
21960     A7 F0 03 F6 | 	mov	ptra, fp
21964     B2 00 A0 FD | 	call	#popregs_
21968                 | __system___fmtpad_ret
21968     2D 00 64 FD | 	ret
2196c                 | 
2196c                 | __system___uitoa
2196c     04 4A 05 F6 | 	mov	COUNT_, #4
21970     A8 00 A0 FD | 	call	#pushregs_
21974     09 1F 02 F6 | 	mov	local01, arg01
21978     00 1A 4E F2 | 	cmps	arg05, #0 wz
2197c     0F 1B 02 F6 | 	mov	arg05, local01
21980     00 20 06 F6 | 	mov	local02, #0
21984     37 22 06 56 |  if_ne	mov	local03, #55
21988     57 22 06 A6 |  if_e	mov	local03, #87
2198c                 | LR__3350
2198c     0B 15 12 FD | 	qdiv	arg02, arg03
21990     19 24 62 FD | 	getqy	local04
21994     0B 15 12 FD | 	qdiv	arg02, arg03
21998     0A 24 16 F2 | 	cmp	local04, #10 wc
2199c     30 24 06 C1 |  if_b	add	local04, #48
219a0     11 25 02 31 |  if_ae	add	local04, local03
219a4     0D 25 42 FC | 	wrbyte	local04, arg05
219a8     01 1A 06 F1 | 	add	arg05, #1
219ac     01 20 06 F1 | 	add	local02, #1
219b0     18 14 62 FD | 	getqx	arg02
219b4     00 14 0E F2 | 	cmp	arg02, #0 wz
219b8     D0 FF 9F 5D |  if_ne	jmp	#LR__3350
219bc     0C 21 12 F2 | 	cmp	local02, arg04 wc
219c0     C8 FF 9F CD |  if_b	jmp	#LR__3350
219c4     0D 01 48 FC | 	wrbyte	#0, arg05
219c8     0F 13 02 F6 | 	mov	arg01, local01
219cc     8C FE BF FD | 	call	#__system___strrev
219d0     10 FB 01 F6 | 	mov	result1, local02
219d4     A7 F0 03 F6 | 	mov	ptra, fp
219d8     B2 00 A0 FD | 	call	#popregs_
219dc                 | __system___uitoa_ret
219dc     2D 00 64 FD | 	ret
219e0                 | 
219e0                 | __system__disassemble_0432
219e0     10 4A 05 F6 | 	mov	COUNT_, #16
219e4     A8 00 A0 FD | 	call	#pushregs_
219e8     09 1F 02 F6 | 	mov	local01, arg01
219ec     0A 21 02 F6 | 	mov	local02, arg02
219f0     0B 23 02 F6 | 	mov	local03, arg03
219f4     0C 25 02 F6 | 	mov	local04, arg04
219f8     0D 27 02 F6 | 	mov	local05, arg05
219fc     13 13 52 F6 | 	abs	arg01, local05 wc
21a00     1F 28 C6 C9 |  if_b	decod	local06, #31
21a04     00 28 06 36 |  if_ae	mov	local06, #0
21a08     64 D0 BF FD | 	call	#__system___float_fromuns
21a0c     14 FB 61 F5 | 	xor	result1, local06
21a10     FD 2A 02 F6 | 	mov	local07, result1
21a14     00 2C 06 F6 | 	mov	local08, #0
21a18     0F 13 02 F6 | 	mov	arg01, local01
21a1c     00 14 06 F6 | 	mov	arg02, #0
21a20     01 16 06 F6 | 	mov	arg03, #1
21a24     80 D8 BF FD | 	call	#__system___float_cmp
21a28     00 FA 0D F2 | 	cmp	result1, #0 wz
21a2c     00 2E 06 A6 |  if_e	mov	local09, #0
21a30     10 01 68 AC |  if_e	wrlong	#0, local02
21a34     11 2F 62 AC |  if_e	wrlong	local09, local03
21a38     8C 01 90 AD |  if_e	jmp	#LR__3372
21a3c     0F 13 02 F6 | 	mov	arg01, local01
21a40     30 DD BF FD | 	call	#__system____builtin_ilogb
21a44     FD 30 02 F6 | 	mov	local10, result1
21a48     0A 26 0E F2 | 	cmp	local05, #10 wz
21a4c     24 00 90 5D |  if_ne	jmp	#LR__3360
21a50     18 2F 02 F6 | 	mov	local09, local10
21a54     01 2E 66 F0 | 	shl	local09, #1
21a58     18 2F 02 F1 | 	add	local09, local10
21a5c     17 31 52 F6 | 	abs	local10, local09 wc
21a60     0A 30 16 FD | 	qdiv	local10, #10
21a64     09 32 06 F6 | 	mov	local11, #9
21a68     18 30 62 FD | 	getqx	local10
21a6c     18 31 82 F6 | 	negc	local10, local10
21a70     04 00 90 FD | 	jmp	#LR__3361
21a74                 | LR__3360
21a74     18 32 06 F6 | 	mov	local11, #24
21a78                 | LR__3361
21a78                 | LR__3362
21a78     08 2C 56 F2 | 	cmps	local08, #8 wc
21a7c     01 2C 06 F1 | 	add	local08, #1
21a80     60 00 90 3D |  if_ae	jmp	#LR__3363
21a84     00 C0 1F FF 
21a88     00 12 06 F6 | 	mov	arg01, ##1065353216
21a8c     15 15 02 F6 | 	mov	arg02, local07
21a90     18 17 02 F6 | 	mov	arg03, local10
21a94     88 E3 BF FD | 	call	#__system___float_pow_n
21a98     FD 14 02 F6 | 	mov	arg02, result1
21a9c     0F 13 02 F6 | 	mov	arg01, local01
21aa0     D4 D5 BF FD | 	call	#__system___float_div
21aa4     FD 34 02 F6 | 	mov	local12, result1
21aa8     1A 13 02 F6 | 	mov	arg01, local12
21aac     00 C0 1F FF 
21ab0     00 14 06 F6 | 	mov	arg02, ##1065353216
21ab4     01 16 06 F6 | 	mov	arg03, #1
21ab8     EC D7 BF FD | 	call	#__system___float_cmp
21abc     00 FA 55 F2 | 	cmps	result1, #0 wc
21ac0     01 30 86 C1 |  if_b	sub	local10, #1
21ac4     B0 FF 9F CD |  if_b	jmp	#LR__3362
21ac8     15 15 02 F6 | 	mov	arg02, local07
21acc     1A 13 02 F6 | 	mov	arg01, local12
21ad0     01 16 66 F6 | 	neg	arg03, #1
21ad4     D0 D7 BF FD | 	call	#__system___float_cmp
21ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
21adc     01 30 06 31 |  if_ae	add	local10, #1
21ae0     94 FF 9F 3D |  if_ae	jmp	#LR__3362
21ae4                 | LR__3363
21ae4     1A 13 02 F6 | 	mov	arg01, local12
21ae8     88 DC BF FD | 	call	#__system____builtin_ilogb
21aec     FD 36 02 F6 | 	mov	local13, result1
21af0     1A 39 02 F6 | 	mov	local14, local12
21af4     17 39 06 F4 | 	bitl	local14, #279
21af8     17 38 26 F4 | 	bith	local14, #23
21afc     1B 39 62 F0 | 	shl	local14, local13
21b00     02 26 0E F2 | 	cmp	local05, #2 wz
21b04     02 24 66 A0 |  if_e	shl	local04, #2
21b08     00 3A 06 F6 | 	mov	local15, #0
21b0c     00 24 56 F2 | 	cmps	local04, #0 wc
21b10     10 00 90 3D |  if_ae	jmp	#LR__3364
21b14     18 25 C2 F2 | 	subr	local04, local10
21b18     00 24 56 F2 | 	cmps	local04, #0 wc
21b1c     A0 00 90 CD |  if_b	jmp	#LR__3371
21b20     04 00 90 FD | 	jmp	#LR__3365
21b24                 | LR__3364
21b24     01 24 06 F1 | 	add	local04, #1
21b28                 | LR__3365
21b28     19 25 7A F3 | 	fles	local04, local11 wcz
21b2c     01 3C 06 F6 | 	mov	local16, #1
21b30     97 22 48 FB | 	callpa	#(@LR__3367-@LR__3366)>>2,fcache_load_ptr_
21b34                 | LR__3366
21b34     00 40 00 FF 
21b38     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
21b3c     38 00 90 3D |  if_ae	jmp	#LR__3368
21b40     01 24 56 F2 | 	cmps	local04, #1 wc
21b44     01 24 86 F1 | 	sub	local04, #1
21b48     2C 00 90 CD |  if_b	jmp	#LR__3368
21b4c     13 3B 02 FD | 	qmul	local15, local05
21b50     1C 37 02 F6 | 	mov	local13, local14
21b54     17 36 46 F0 | 	shr	local13, #23
21b58     17 39 06 F4 | 	bitl	local14, #279
21b5c     18 3A 62 FD | 	getqx	local15
21b60     13 3D 02 FD | 	qmul	local16, local05
21b64     18 3C 62 FD | 	getqx	local16
21b68     13 39 02 FD | 	qmul	local14, local05
21b6c     1B 3B 02 F1 | 	add	local15, local13
21b70     18 38 62 FD | 	getqx	local14
21b74     BC FF 9F FD | 	jmp	#LR__3366
21b78                 | LR__3367
21b78                 | LR__3368
21b78     13 2F 02 F6 | 	mov	local09, local05
21b7c     17 2E 66 F0 | 	shl	local09, #23
21b80     17 37 52 F6 | 	abs	local13, local09 wc
21b84     01 36 46 F0 | 	shr	local13, #1
21b88     1B 37 82 F6 | 	negc	local13, local13
21b8c     1B 39 1A F2 | 	cmp	local14, local13 wcz
21b90     20 00 90 1D |  if_a	jmp	#LR__3369
21b94     17 26 66 F0 | 	shl	local05, #23
21b98     13 37 52 F6 | 	abs	local13, local05 wc
21b9c     01 36 46 F0 | 	shr	local13, #1
21ba0     1B 37 82 F6 | 	negc	local13, local13
21ba4     1B 39 0A F2 | 	cmp	local14, local13 wz
21ba8     14 00 90 5D |  if_ne	jmp	#LR__3370
21bac     01 3A CE F7 | 	test	local15, #1 wz
21bb0     0C 00 90 AD |  if_e	jmp	#LR__3370
21bb4                 | LR__3369
21bb4     01 3A 06 F1 | 	add	local15, #1
21bb8     1E 3B 0A F2 | 	cmp	local15, local16 wz
21bbc     01 30 06 A1 |  if_e	add	local10, #1
21bc0                 | LR__3370
21bc0                 | LR__3371
21bc0     10 3B 62 FC | 	wrlong	local15, local02
21bc4     11 31 62 FC | 	wrlong	local10, local03
21bc8                 | LR__3372
21bc8     A7 F0 03 F6 | 	mov	ptra, fp
21bcc     B2 00 A0 FD | 	call	#popregs_
21bd0                 | __system__disassemble_0432_ret
21bd0     2D 00 64 FD | 	ret
21bd4                 | 
21bd4                 | __system__emitsign_0434
21bd4     00 FA 05 F6 | 	mov	result1, #0
21bd8     00 14 0E F2 | 	cmp	arg02, #0 wz
21bdc     09 01 02 56 |  if_ne	mov	_var01, arg01
21be0     01 12 06 51 |  if_ne	add	arg01, #1
21be4     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
21be8     01 FA 05 56 |  if_ne	mov	result1, #1
21bec     00 16 0E F2 | 	cmp	arg03, #0 wz
21bf0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
21bf4     01 12 06 51 |  if_ne	add	arg01, #1
21bf8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
21bfc     02 FA 05 51 |  if_ne	add	result1, #2
21c00                 | __system__emitsign_0434_ret
21c00     2D 00 64 FD | 	ret
21c04                 | 
21c04                 | __system___gettxfunc
21c04     01 4A 05 F6 | 	mov	COUNT_, #1
21c08     A8 00 A0 FD | 	call	#pushregs_
21c0c     A0 F8 BF FD | 	call	#__system____getftab
21c10     FD 1E 0A F6 | 	mov	local01, result1 wz
21c14     10 00 90 AD |  if_e	jmp	#LR__3380
21c18     08 1E 06 F1 | 	add	local01, #8
21c1c     0F 15 0A FB | 	rdlong	arg02, local01 wz
21c20     08 1E 86 F1 | 	sub	local01, #8
21c24     08 00 90 5D |  if_ne	jmp	#LR__3381
21c28                 | LR__3380
21c28     00 FA 05 F6 | 	mov	result1, #0
21c2c     0C 00 90 FD | 	jmp	#LR__3382
21c30                 | LR__3381
21c30     00 D8 03 FF 
21c34     00 1E 46 F5 | 	or	local01, ##128974848
21c38     0F FB 01 F6 | 	mov	result1, local01
21c3c                 | LR__3382
21c3c     A7 F0 03 F6 | 	mov	ptra, fp
21c40     B2 00 A0 FD | 	call	#popregs_
21c44                 | __system___gettxfunc_ret
21c44     2D 00 64 FD | 	ret
21c48                 | 
21c48                 | __system___getrxfunc
21c48     01 4A 05 F6 | 	mov	COUNT_, #1
21c4c     A8 00 A0 FD | 	call	#pushregs_
21c50     5C F8 BF FD | 	call	#__system____getftab
21c54     FD 1E 0A F6 | 	mov	local01, result1 wz
21c58     10 00 90 AD |  if_e	jmp	#LR__3390
21c5c     08 1E 06 F1 | 	add	local01, #8
21c60     0F 15 0A FB | 	rdlong	arg02, local01 wz
21c64     08 1E 86 F1 | 	sub	local01, #8
21c68     08 00 90 5D |  if_ne	jmp	#LR__3391
21c6c                 | LR__3390
21c6c     00 FA 05 F6 | 	mov	result1, #0
21c70     08 00 90 FD | 	jmp	#LR__3392
21c74                 | LR__3391
21c74     96 1E 26 F4 | 	bith	local01, #150
21c78     0F FB 01 F6 | 	mov	result1, local01
21c7c                 | LR__3392
21c7c     A7 F0 03 F6 | 	mov	ptra, fp
21c80     B2 00 A0 FD | 	call	#popregs_
21c84                 | __system___getrxfunc_ret
21c84     2D 00 64 FD | 	ret
21c88                 | 
21c88                 | __system___getiolock_0474
21c88     01 4A 05 F6 | 	mov	COUNT_, #1
21c8c     A8 00 A0 FD | 	call	#pushregs_
21c90     1C F8 BF FD | 	call	#__system____getftab
21c94     FD 1E 0A F6 | 	mov	local01, result1 wz
21c98     10 00 90 AD |  if_e	jmp	#LR__3400
21c9c     08 1E 06 F1 | 	add	local01, #8
21ca0     0F FB 09 FB | 	rdlong	result1, local01 wz
21ca4     08 1E 86 F1 | 	sub	local01, #8
21ca8     18 00 90 5D |  if_ne	jmp	#LR__3401
21cac                 | LR__3400
21cac     01 00 00 FF 
21cb0     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
21cb4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
21cb8     01 00 00 FF 
21cbc     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
21cc0     08 00 90 FD | 	jmp	#LR__3402
21cc4                 | LR__3401
21cc4     0C 1E 06 F1 | 	add	local01, #12
21cc8     0F FB 01 F6 | 	mov	result1, local01
21ccc                 | LR__3402
21ccc     A7 F0 03 F6 | 	mov	ptra, fp
21cd0     B2 00 A0 FD | 	call	#popregs_
21cd4                 | __system___getiolock_0474_ret
21cd4     2D 00 64 FD | 	ret
21cd8                 | 
21cd8                 | __system____ScanForChar
21cd8     09 01 02 F6 | 	mov	_var01, arg01
21cdc     09 03 02 F6 | 	mov	_var02, arg01
21ce0     97 06 48 FB | 	callpa	#(@LR__3411-@LR__3410)>>2,fcache_load_ptr_
21ce4                 | LR__3410
21ce4     01 FB C9 FA | 	rdbyte	result1, _var02 wz
21ce8     01 02 06 51 |  if_ne	add	_var02, #1
21cec     F4 FF 9F 5D |  if_ne	jmp	#LR__3410
21cf0                 | LR__3411
21cf0     09 03 82 F1 | 	sub	_var02, arg01
21cf4     01 FB 01 F6 | 	mov	result1, _var02
21cf8     FD 12 0A F6 | 	mov	arg01, result1 wz
21cfc     00 FA 05 A6 |  if_e	mov	result1, #0
21d00     B8 00 90 AD |  if_e	jmp	#LR__3418
21d04     0A 05 02 F6 | 	mov	_var03, arg02
21d08     07 04 4E F7 | 	zerox	_var03, #7 wz
21d0c     00 FA 05 A6 |  if_e	mov	result1, #0
21d10     A8 00 90 AD |  if_e	jmp	#LR__3418
21d14     01 16 16 F2 | 	cmp	arg03, #1 wc
21d18     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
21d1c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
21d20     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
21d24     94 00 90 4D |  if_c_and_nz	jmp	#LR__3418
21d28     09 17 1A F2 | 	cmp	arg03, arg01 wcz
21d2c     10 00 90 ED |  if_be	jmp	#LR__3412
21d30     00 18 0E F2 | 	cmp	arg04, #0 wz
21d34     00 FA 05 A6 |  if_e	mov	result1, #0
21d38     80 00 90 AD |  if_e	jmp	#LR__3418
21d3c     09 17 02 F6 | 	mov	arg03, arg01
21d40                 | LR__3412
21d40     01 16 86 F1 | 	sub	arg03, #1
21d44     00 18 0E F2 | 	cmp	arg04, #0 wz
21d48     38 00 90 5D |  if_ne	jmp	#LR__3414
21d4c     0B 07 02 F6 | 	mov	_var04, arg03
21d50     09 09 02 F6 | 	mov	_var05, arg01
21d54                 | LR__3413
21d54     04 07 12 F2 | 	cmp	_var04, _var05 wc
21d58     5C 00 90 3D |  if_ae	jmp	#LR__3417
21d5c     03 05 02 F6 | 	mov	_var03, _var04
21d60     00 05 02 F1 | 	add	_var03, _var01
21d64     02 05 C2 FA | 	rdbyte	_var03, _var03
21d68     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
21d6c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
21d70     01 06 06 A1 |  if_e	add	_var04, #1
21d74     03 FB 01 A6 |  if_e	mov	result1, _var04
21d78     40 00 90 AD |  if_e	jmp	#LR__3418
21d7c     01 06 06 F1 | 	add	_var04, #1
21d80     D0 FF 9F FD | 	jmp	#LR__3413
21d84                 | LR__3414
21d84     0B 07 02 F6 | 	mov	_var04, arg03
21d88                 | LR__3415
21d88     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
21d8c     28 00 90 1D |  if_a	jmp	#LR__3416
21d90     03 09 02 F6 | 	mov	_var05, _var04
21d94     00 09 02 F1 | 	add	_var05, _var01
21d98     04 05 C2 FA | 	rdbyte	_var03, _var05
21d9c     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
21da0     04 05 0A F2 | 	cmp	_var03, _var05 wz
21da4     01 06 06 A1 |  if_e	add	_var04, #1
21da8     03 FB 01 A6 |  if_e	mov	result1, _var04
21dac     0C 00 90 AD |  if_e	jmp	#LR__3418
21db0     01 06 86 F1 | 	sub	_var04, #1
21db4     D0 FF 9F FD | 	jmp	#LR__3415
21db8                 | LR__3416
21db8                 | LR__3417
21db8     00 FA 05 F6 | 	mov	result1, #0
21dbc                 | LR__3418
21dbc                 | __system____ScanForChar_ret
21dbc     2D 00 64 FD | 	ret
21dc0                 | 
21dc0                 | __system___basic_dir
21dc0     05 4A 05 F6 | 	mov	COUNT_, #5
21dc4     A8 00 A0 FD | 	call	#pushregs_
21dc8     4C F0 07 F1 | 	add	ptra, #76
21dcc     04 4E 05 F1 | 	add	fp, #4
21dd0     A7 12 62 FC | 	wrlong	arg01, fp
21dd4     04 4E 05 F1 | 	add	fp, #4
21dd8     A7 14 62 FC | 	wrlong	arg02, fp
21ddc     04 4E 85 F1 | 	sub	fp, #4
21de0     A7 14 0A FB | 	rdlong	arg02, fp wz
21de4     04 4E 85 F1 | 	sub	fp, #4
21de8     04 4E 05 51 |  if_ne	add	fp, #4
21dec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21df0     04 4E 85 51 |  if_ne	sub	fp, #4
21df4     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
21df8     70 00 90 AD |  if_e	jmp	#LR__3420
21dfc     03 00 00 FF 
21e00     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21e04     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21e08     03 00 00 FF 
21e0c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21e10     03 00 00 5F 
21e14     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
21e18     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
21e1c     03 00 00 5F 
21e20     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
21e24     18 EA BF 5D |  if_ne	call	#__system__closedir
21e28     5C 01 00 FF 
21e2c     10 13 06 F6 | 	mov	arg01, ##@LR__4578
21e30     20 E9 BF FD | 	call	#__system__opendir
21e34     03 00 00 FF 
21e38     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21e3c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
21e40     08 4E 05 F1 | 	add	fp, #8
21e44     A7 20 02 FB | 	rdlong	local02, fp
21e48     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21e4c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
21e50     04 4E 85 F1 | 	sub	fp, #4
21e54     A7 20 02 FB | 	rdlong	local02, fp
21e58     04 4E 85 F1 | 	sub	fp, #4
21e5c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21e60     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
21e64     03 00 00 FF 
21e68     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
21e6c                 | LR__3420
21e6c     03 00 00 FF 
21e70     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21e74     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21e78     03 00 00 FF 
21e7c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21e80     5C 01 00 AF 
21e84     12 FB 05 A6 |  if_e	mov	result1, ##@LR__4579
21e88     84 02 90 AD |  if_e	jmp	#LR__3433
21e8c                 | LR__3421
21e8c     03 00 00 FF 
21e90     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21e94     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21e98     03 00 00 FF 
21e9c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21ea0     10 EA BF FD | 	call	#__system__readdir
21ea4     0C 4E 05 F1 | 	add	fp, #12
21ea8     A7 FA 61 FC | 	wrlong	result1, fp
21eac     0C 4E 85 F1 | 	sub	fp, #12
21eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
21eb4     38 00 90 5D |  if_ne	jmp	#LR__3422
21eb8     03 00 00 FF 
21ebc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21ec0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21ec4     03 00 00 FF 
21ec8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21ecc     70 E9 BF FD | 	call	#__system__closedir
21ed0     03 00 00 FF 
21ed4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21ed8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
21edc     03 00 00 FF 
21ee0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21ee4     5C 01 00 FF 
21ee8     14 FB 05 F6 | 	mov	result1, ##@LR__4580
21eec     20 02 90 FD | 	jmp	#LR__3433
21ef0                 | LR__3422
21ef0     0C 4E 05 F1 | 	add	fp, #12
21ef4     A7 12 02 FB | 	rdlong	arg01, fp
21ef8     0C 4E 85 F1 | 	sub	fp, #12
21efc     03 00 00 FF 
21f00     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
21f04     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
21f08     03 00 00 FF 
21f0c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
21f10     48 07 B0 FD | 	call	#__system___pat_match
21f14     00 FA 0D F2 | 	cmp	result1, #0 wz
21f18     70 FF 9F AD |  if_e	jmp	#LR__3421
21f1c     03 00 00 FF 
21f20     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
21f24     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21f28     03 00 00 FF 
21f2c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
21f30     78 01 90 AD |  if_e	jmp	#LR__3429
21f34     0C 4E 05 F1 | 	add	fp, #12
21f38     A7 12 02 FB | 	rdlong	arg01, fp
21f3c     04 4E 05 F1 | 	add	fp, #4
21f40     A7 14 02 F6 | 	mov	arg02, fp
21f44     10 4E 85 F1 | 	sub	fp, #16
21f48     6C F2 BF FD | 	call	#__system__stat
21f4c     40 4E 05 F1 | 	add	fp, #64
21f50     A7 FA 61 FC | 	wrlong	result1, fp
21f54     40 4E 85 F1 | 	sub	fp, #64
21f58     00 FA 0D F2 | 	cmp	result1, #0 wz
21f5c     5C 01 00 5F 
21f60     16 FB 05 56 |  if_ne	mov	result1, ##@LR__4581
21f64     A8 01 90 5D |  if_ne	jmp	#LR__3433
21f68     18 4E 05 F1 | 	add	fp, #24
21f6c     A7 20 02 FB | 	rdlong	local02, fp
21f70     78 00 00 FF 
21f74     00 20 06 F5 | 	and	local02, ##61440
21f78     2C 4E 05 F1 | 	add	fp, #44
21f7c     A7 20 62 FC | 	wrlong	local02, fp
21f80     38 4E 85 F1 | 	sub	fp, #56
21f84     A7 20 02 FB | 	rdlong	local02, fp
21f88     0C 4E 85 F1 | 	sub	fp, #12
21f8c     10 21 C2 FA | 	rdbyte	local02, local02
21f90     2E 20 0E F2 | 	cmp	local02, #46 wz
21f94     08 4E 05 A1 |  if_e	add	fp, #8
21f98     A7 04 68 AC |  if_e	wrlong	#2, fp
21f9c     08 4E C5 F3 | 	sumz	fp, #8
21fa0     A7 00 68 5C |  if_ne	wrlong	#0, fp
21fa4     08 4E 85 51 |  if_ne	sub	fp, #8
21fa8     44 4E 05 F1 | 	add	fp, #68
21fac     A7 20 02 FB | 	rdlong	local02, fp
21fb0     44 4E 85 F1 | 	sub	fp, #68
21fb4     08 00 00 FF 
21fb8     00 20 0E F2 | 	cmp	local02, ##4096 wz
21fbc     18 00 90 5D |  if_ne	jmp	#LR__3423
21fc0     08 4E 05 F1 | 	add	fp, #8
21fc4     A7 20 02 FB | 	rdlong	local02, fp
21fc8     10 20 46 F5 | 	or	local02, #16
21fcc     A7 20 62 FC | 	wrlong	local02, fp
21fd0     08 4E 85 F1 | 	sub	fp, #8
21fd4     AC 00 90 FD | 	jmp	#LR__3428
21fd8                 | LR__3423
21fd8     44 4E 05 F1 | 	add	fp, #68
21fdc     A7 20 02 FB | 	rdlong	local02, fp
21fe0     44 4E 85 F1 | 	sub	fp, #68
21fe4     10 00 00 FF 
21fe8     00 20 0E F2 | 	cmp	local02, ##8192 wz
21fec     44 4E 05 51 |  if_ne	add	fp, #68
21ff0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21ff4     44 4E 85 51 |  if_ne	sub	fp, #68
21ff8     18 00 00 5F 
21ffc     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
22000     44 4E 05 51 |  if_ne	add	fp, #68
22004     0F 23 02 56 |  if_ne	mov	local03, local01
22008     44 4E 85 51 |  if_ne	sub	fp, #68
2200c     20 00 00 5F 
22010     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
22014     18 00 90 5D |  if_ne	jmp	#LR__3424
22018     08 4E 05 F1 | 	add	fp, #8
2201c     A7 20 02 FB | 	rdlong	local02, fp
22020     04 20 46 F5 | 	or	local02, #4
22024     A7 20 62 FC | 	wrlong	local02, fp
22028     08 4E 85 F1 | 	sub	fp, #8
2202c     54 00 90 FD | 	jmp	#LR__3427
22030                 | LR__3424
22030     18 4E 05 F1 | 	add	fp, #24
22034     A7 20 02 FB | 	rdlong	local02, fp
22038     18 4E 85 F1 | 	sub	fp, #24
2203c     92 20 CE F7 | 	test	local02, #146 wz
22040     18 00 90 5D |  if_ne	jmp	#LR__3425
22044     08 4E 05 F1 | 	add	fp, #8
22048     A7 20 02 FB | 	rdlong	local02, fp
2204c     01 20 46 F5 | 	or	local02, #1
22050     A7 20 62 FC | 	wrlong	local02, fp
22054     08 4E 85 F1 | 	sub	fp, #8
22058     28 00 90 FD | 	jmp	#LR__3426
2205c                 | LR__3425
2205c     44 4E 05 F1 | 	add	fp, #68
22060     A7 24 02 FB | 	rdlong	local04, fp
22064     44 4E 85 F1 | 	sub	fp, #68
22068     08 00 00 FF 
2206c     00 24 0E F2 | 	cmp	local04, ##4096 wz
22070     08 4E 05 51 |  if_ne	add	fp, #8
22074     A7 24 02 5B |  if_ne	rdlong	local04, fp
22078     20 24 46 55 |  if_ne	or	local04, #32
2207c     A7 24 62 5C |  if_ne	wrlong	local04, fp
22080     08 4E 85 51 |  if_ne	sub	fp, #8
22084                 | LR__3426
22084                 | LR__3427
22084                 | LR__3428
22084     08 4E 05 F1 | 	add	fp, #8
22088     A7 24 02 FB | 	rdlong	local04, fp
2208c     08 4E 85 F1 | 	sub	fp, #8
22090     03 00 00 FF 
22094     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
22098     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
2209c     03 00 00 FF 
220a0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
220a4     0F 25 CA F7 | 	test	local04, local01 wz
220a8     E0 FD 9F AD |  if_e	jmp	#LR__3421
220ac                 | LR__3429
220ac     0C 4E 05 F1 | 	add	fp, #12
220b0     A7 12 02 FB | 	rdlong	arg01, fp
220b4     0C 4E 85 F1 | 	sub	fp, #12
220b8     09 27 02 F6 | 	mov	local05, arg01
220bc     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
220c0                 | LR__3430
220c0     13 FB C9 FA | 	rdbyte	result1, local05 wz
220c4     01 26 06 51 |  if_ne	add	local05, #1
220c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
220cc                 | LR__3431
220cc     13 13 C2 F2 | 	subr	arg01, local05
220d0     01 12 06 F1 | 	add	arg01, #1
220d4     68 E0 BF FD | 	call	#__system___gc_alloc_managed
220d8     48 4E 05 F1 | 	add	fp, #72
220dc     A7 FA 61 FC | 	wrlong	result1, fp
220e0     48 4E 85 F1 | 	sub	fp, #72
220e4     00 FA 0D F2 | 	cmp	result1, #0 wz
220e8     18 00 90 AD |  if_e	jmp	#LR__3432
220ec     48 4E 05 F1 | 	add	fp, #72
220f0     A7 12 02 FB | 	rdlong	arg01, fp
220f4     3C 4E 85 F1 | 	sub	fp, #60
220f8     A7 14 02 FB | 	rdlong	arg02, fp
220fc     0C 4E 85 F1 | 	sub	fp, #12
22100     A8 A1 BF FD | 	call	#__system____builtin_strcpy
22104                 | LR__3432
22104     48 4E 05 F1 | 	add	fp, #72
22108     A7 FA 01 FB | 	rdlong	result1, fp
2210c     48 4E 85 F1 | 	sub	fp, #72
22110                 | LR__3433
22110     A7 F0 03 F6 | 	mov	ptra, fp
22114     B2 00 A0 FD | 	call	#popregs_
22118                 | __system___basic_dir_ret
22118     2D 00 64 FD | 	ret
2211c                 | 
2211c                 | __system__pack_0540
2211c     09 01 02 F6 | 	mov	_var01, arg01
22120     7F 16 06 F1 | 	add	arg03, #127
22124     04 18 CE F7 | 	test	arg04, #4 wz
22128     10 00 90 AD |  if_e	jmp	#LR__3440
2212c     00 00 0E F2 | 	cmp	_var01, #0 wz
22130     16 00 C6 A9 |  if_e	decod	_var01, #22
22134     F7 00 26 F4 | 	bith	_var01, #247
22138     B4 00 90 FD | 	jmp	#LR__3449
2213c                 | LR__3440
2213c     02 18 CE F7 | 	test	arg04, #2 wz
22140     00 C0 3F 5F 
22144     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
22148     00 14 06 56 |  if_ne	mov	arg02, #0
2214c     A0 00 90 5D |  if_ne	jmp	#LR__3448
22150     08 18 CE F7 | 	test	arg04, #8 wz
22154     00 00 06 56 |  if_ne	mov	_var01, #0
22158     94 00 90 5D |  if_ne	jmp	#LR__3447
2215c     FF 16 56 F2 | 	cmps	arg03, #255 wc
22160     00 C0 3F 3F 
22164     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
22168     00 14 06 36 |  if_ae	mov	arg02, #0
2216c     80 00 90 3D |  if_ae	jmp	#LR__3446
22170     01 16 56 F2 | 	cmps	arg03, #1 wc
22174     6C 00 90 3D |  if_ae	jmp	#LR__3444
22178     01 14 46 F0 | 	shr	arg02, #1
2217c     00 03 02 F6 | 	mov	_var02, _var01
22180     01 02 06 F5 | 	and	_var02, #1
22184     1F 02 66 F0 | 	shl	_var02, #31
22188     01 15 42 F5 | 	or	arg02, _var02
2218c     01 00 46 F0 | 	shr	_var01, #1
22190     97 1E 48 FB | 	callpa	#(@LR__3442-@LR__3441)>>2,fcache_load_ptr_
22194                 | LR__3441
22194     00 16 56 F2 | 	cmps	arg03, #0 wc
22198     34 00 90 3D |  if_ae	jmp	#LR__3443
2219c     00 00 0E F2 | 	cmp	_var01, #0 wz
221a0     2C 00 90 AD |  if_e	jmp	#LR__3443
221a4     0A 13 02 F6 | 	mov	arg01, arg02
221a8     01 12 06 F5 | 	and	arg01, #1
221ac     01 16 06 F1 | 	add	arg03, #1
221b0     01 14 46 F0 | 	shr	arg02, #1
221b4     00 03 02 F6 | 	mov	_var02, _var01
221b8     01 02 06 F5 | 	and	_var02, #1
221bc     1F 02 66 F0 | 	shl	_var02, #31
221c0     01 15 42 F5 | 	or	arg02, _var02
221c4     09 15 42 F5 | 	or	arg02, arg01
221c8     01 00 46 F0 | 	shr	_var01, #1
221cc     C4 FF 9F FD | 	jmp	#LR__3441
221d0                 | LR__3442
221d0                 | LR__3443
221d0     00 16 56 F2 | 	cmps	arg03, #0 wc
221d4     18 00 90 3D |  if_ae	jmp	#LR__3445
221d8     00 14 0E F2 | 	cmp	arg02, #0 wz
221dc     6F 14 62 FD | 	wrnz	arg02
221e0     0C 00 90 FD | 	jmp	#LR__3445
221e4                 | LR__3444
221e4     17 01 06 F4 | 	bitl	_var01, #279
221e8     17 16 66 F0 | 	shl	arg03, #23
221ec     0B 01 42 F5 | 	or	_var01, arg03
221f0                 | LR__3445
221f0                 | LR__3446
221f0                 | LR__3447
221f0                 | LR__3448
221f0                 | LR__3449
221f0     01 00 CE F7 | 	test	_var01, #1 wz
221f4     01 14 46 55 |  if_ne	or	arg02, #1
221f8     0A 17 02 F6 | 	mov	arg03, arg02
221fc     00 02 06 F6 | 	mov	_var02, #0
22200     FF FF 3F FF 
22204     FF 15 06 F1 | 	add	arg02, ##2147483647
22208     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2220c     01 02 06 C6 |  if_b	mov	_var02, #1
22210     01 01 02 F1 | 	add	_var01, _var02
22214     01 18 CE F7 | 	test	arg04, #1 wz
22218     1F 00 26 54 |  if_ne	bith	_var01, #31
2221c     00 FB 01 F6 | 	mov	result1, _var01
22220                 | __system__pack_0540_ret
22220     2D 00 64 FD | 	ret
22224                 | 
22224                 | __system___rxtxioctl_0630
22224     00 15 0E F2 | 	cmp	arg02, #256 wz
22228     0C 00 90 AD |  if_e	jmp	#LR__3450
2222c     01 15 0E F2 | 	cmp	arg02, #257 wz
22230     1C 00 90 AD |  if_e	jmp	#LR__3451
22234     30 00 90 FD | 	jmp	#LR__3452
22238                 | LR__3450
22238     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2223c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22240     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22244     0B FB 61 FC | 	wrlong	result1, arg03
22248     00 FA 05 F6 | 	mov	result1, #0
2224c     28 00 90 FD | 	jmp	#LR__3453
22250                 | LR__3451
22250     0B 13 02 FB | 	rdlong	arg01, arg03
22254     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22258     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2225c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22260     00 FA 05 F6 | 	mov	result1, #0
22264     10 00 90 FD | 	jmp	#LR__3453
22268                 | LR__3452
22268     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2226c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
22270     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22274     01 FA 65 F6 | 	neg	result1, #1
22278                 | LR__3453
22278                 | __system___rxtxioctl_0630_ret
22278     2D 00 64 FD | 	ret
2227c                 | 
2227c                 | __system____dummy_flush_0631
2227c     00 FA 05 F6 | 	mov	result1, #0
22280                 | __system____dummy_flush_0631_ret
22280     2D 00 64 FD | 	ret
22284                 | 
22284                 | __system___vfsread
22284     03 4A 05 F6 | 	mov	COUNT_, #3
22288     A8 00 A0 FD | 	call	#pushregs_
2228c     28 F0 07 F1 | 	add	ptra, #40
22290     04 4E 05 F1 | 	add	fp, #4
22294     A7 12 62 FC | 	wrlong	arg01, fp
22298     04 4E 05 F1 | 	add	fp, #4
2229c     A7 14 62 FC | 	wrlong	arg02, fp
222a0     04 4E 05 F1 | 	add	fp, #4
222a4     A7 16 62 FC | 	wrlong	arg03, fp
222a8     04 4E 85 F1 | 	sub	fp, #4
222ac     A7 FA 01 FB | 	rdlong	result1, fp
222b0     14 4E 05 F1 | 	add	fp, #20
222b4     A7 FA 61 FC | 	wrlong	result1, fp
222b8     04 4E 05 F1 | 	add	fp, #4
222bc     A7 00 68 FC | 	wrlong	#0, fp
222c0     1C 4E 85 F1 | 	sub	fp, #28
222c4     A7 12 02 FB | 	rdlong	arg01, fp
222c8     04 4E 85 F1 | 	sub	fp, #4
222cc     08 12 06 F1 | 	add	arg01, #8
222d0     09 FB 01 FB | 	rdlong	result1, arg01
222d4     01 FA CD F7 | 	test	result1, #1 wz
222d8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
222dc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
222e0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
222e4     01 FA 65 A6 |  if_e	neg	result1, #1
222e8     74 02 90 AD |  if_e	jmp	#LR__3466
222ec     04 4E 05 F1 | 	add	fp, #4
222f0     A7 12 02 FB | 	rdlong	arg01, fp
222f4     04 4E 85 F1 | 	sub	fp, #4
222f8     14 12 06 F1 | 	add	arg01, #20
222fc     09 FB 09 FB | 	rdlong	result1, arg01 wz
22300     B8 00 90 AD |  if_e	jmp	#LR__3461
22304     04 4E 05 F1 | 	add	fp, #4
22308     A7 12 02 FB | 	rdlong	arg01, fp
2230c     09 17 02 F6 | 	mov	arg03, arg01
22310     14 16 06 F1 | 	add	arg03, #20
22314     0B 1F 02 FB | 	rdlong	local01, arg03
22318     0F 21 02 F6 | 	mov	local02, local01
2231c     13 1E 46 F7 | 	zerox	local01, #19
22320     14 20 46 F0 | 	shr	local02, #20
22324     02 20 66 F0 | 	shl	local02, #2
22328     ED 20 02 F1 | 	add	local02, __methods__
2232c     10 21 02 FB | 	rdlong	local02, local02
22330     04 4E 05 F1 | 	add	fp, #4
22334     A7 14 02 FB | 	rdlong	arg02, fp
22338     04 4E 05 F1 | 	add	fp, #4
2233c     A7 16 02 FB | 	rdlong	arg03, fp
22340     0C 4E 85 F1 | 	sub	fp, #12
22344     F2 22 02 F6 | 	mov	local03, objptr
22348     0F E5 01 F6 | 	mov	objptr, local01
2234c     2D 20 62 FD | 	call	local02
22350     11 E5 01 F6 | 	mov	objptr, local03
22354     10 4E 05 F1 | 	add	fp, #16
22358     A7 FA 61 FC | 	wrlong	result1, fp
2235c     10 4E 85 F1 | 	sub	fp, #16
22360     00 FA 55 F2 | 	cmps	result1, #0 wc
22364     44 00 90 3D |  if_ae	jmp	#LR__3460
22368     04 4E 05 F1 | 	add	fp, #4
2236c     A7 22 02 FB | 	rdlong	local03, fp
22370     11 1F 02 F6 | 	mov	local01, local03
22374     08 22 06 F1 | 	add	local03, #8
22378     11 21 02 FB | 	rdlong	local02, local03
2237c     20 20 46 F5 | 	or	local02, #32
22380     08 1E 06 F1 | 	add	local01, #8
22384     0F 21 62 FC | 	wrlong	local02, local01
22388     0C 4E 05 F1 | 	add	fp, #12
2238c     A7 12 0A FB | 	rdlong	arg01, fp wz
22390     10 4E 85 F1 | 	sub	fp, #16
22394     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22398     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2239c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
223a0     01 FA 65 56 |  if_ne	neg	result1, #1
223a4     00 FA 05 A6 |  if_e	mov	result1, #0
223a8     B4 01 90 FD | 	jmp	#LR__3466
223ac                 | LR__3460
223ac     10 4E 05 F1 | 	add	fp, #16
223b0     A7 FA 01 FB | 	rdlong	result1, fp
223b4     10 4E 85 F1 | 	sub	fp, #16
223b8     A4 01 90 FD | 	jmp	#LR__3466
223bc                 | LR__3461
223bc     04 4E 05 F1 | 	add	fp, #4
223c0     A7 12 02 FB | 	rdlong	arg01, fp
223c4     20 12 06 F1 | 	add	arg01, #32
223c8     09 13 0A FB | 	rdlong	arg01, arg01 wz
223cc     14 4E 05 F1 | 	add	fp, #20
223d0     A7 12 62 FC | 	wrlong	arg01, fp
223d4     18 4E 85 F1 | 	sub	fp, #24
223d8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
223dc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
223e0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
223e4     01 FA 65 A6 |  if_e	neg	result1, #1
223e8     74 01 90 AD |  if_e	jmp	#LR__3466
223ec     04 4E 05 F1 | 	add	fp, #4
223f0     A7 22 02 FB | 	rdlong	local03, fp
223f4     04 4E 85 F1 | 	sub	fp, #4
223f8     28 22 06 F1 | 	add	local03, #40
223fc     11 21 0A FB | 	rdlong	local02, local03 wz
22400     7C 00 90 AD |  if_e	jmp	#LR__3463
22404     04 4E 05 F1 | 	add	fp, #4
22408     A7 12 02 FB | 	rdlong	arg01, fp
2240c     09 23 02 F6 | 	mov	local03, arg01
22410     28 22 06 F1 | 	add	local03, #40
22414     11 1F 02 FB | 	rdlong	local01, local03
22418     0F 21 02 F6 | 	mov	local02, local01
2241c     13 1E 46 F7 | 	zerox	local01, #19
22420     14 20 46 F0 | 	shr	local02, #20
22424     02 20 66 F0 | 	shl	local02, #2
22428     ED 20 02 F1 | 	add	local02, __methods__
2242c     10 21 02 FB | 	rdlong	local02, local02
22430     20 4E 05 F1 | 	add	fp, #32
22434     A7 16 02 F6 | 	mov	arg03, fp
22438     24 4E 85 F1 | 	sub	fp, #36
2243c     00 15 06 F6 | 	mov	arg02, #256
22440     F2 22 02 F6 | 	mov	local03, objptr
22444     0F E5 01 F6 | 	mov	objptr, local01
22448     2D 20 62 FD | 	call	local02
2244c     11 E5 01 F6 | 	mov	objptr, local03
22450     10 4E 05 F1 | 	add	fp, #16
22454     A7 FA 61 FC | 	wrlong	result1, fp
22458     00 FA 4D F2 | 	cmps	result1, #0 wz
2245c     10 4E 85 F1 | 	sub	fp, #16
22460     1C 00 90 5D |  if_ne	jmp	#LR__3462
22464     24 4E 05 F1 | 	add	fp, #36
22468     A7 20 02 FB | 	rdlong	local02, fp
2246c     24 4E 85 F1 | 	sub	fp, #36
22470     02 20 CE F7 | 	test	local02, #2 wz
22474     20 4E 05 51 |  if_ne	add	fp, #32
22478     A7 02 68 5C |  if_ne	wrlong	#1, fp
2247c     20 4E 85 51 |  if_ne	sub	fp, #32
22480                 | LR__3462
22480                 | LR__3463
22480     10 4E 05 F1 | 	add	fp, #16
22484     A7 00 68 FC | 	wrlong	#0, fp
22488     10 4E 85 F1 | 	sub	fp, #16
2248c                 | LR__3464
2248c     0C 4E 05 F1 | 	add	fp, #12
22490     A7 22 02 FB | 	rdlong	local03, fp
22494     0C 4E 85 F1 | 	sub	fp, #12
22498     01 22 16 F2 | 	cmp	local03, #1 wc
2249c     B4 00 90 CD |  if_b	jmp	#LR__3465
224a0     18 4E 05 F1 | 	add	fp, #24
224a4     A7 20 02 FB | 	rdlong	local02, fp
224a8     10 23 02 F6 | 	mov	local03, local02
224ac     13 22 46 F7 | 	zerox	local03, #19
224b0     14 20 46 F0 | 	shr	local02, #20
224b4     02 20 66 F0 | 	shl	local02, #2
224b8     ED 20 02 F1 | 	add	local02, __methods__
224bc     10 21 02 FB | 	rdlong	local02, local02
224c0     14 4E 85 F1 | 	sub	fp, #20
224c4     A7 12 02 FB | 	rdlong	arg01, fp
224c8     04 4E 85 F1 | 	sub	fp, #4
224cc     F2 1E 02 F6 | 	mov	local01, objptr
224d0     11 E5 01 F6 | 	mov	objptr, local03
224d4     2D 20 62 FD | 	call	local02
224d8     0F E5 01 F6 | 	mov	objptr, local01
224dc     14 4E 05 F1 | 	add	fp, #20
224e0     A7 FA 61 FC | 	wrlong	result1, fp
224e4     14 4E 85 F1 | 	sub	fp, #20
224e8     00 FA 55 F2 | 	cmps	result1, #0 wc
224ec     64 00 90 CD |  if_b	jmp	#LR__3465
224f0     1C 4E 05 F1 | 	add	fp, #28
224f4     A7 22 02 FB | 	rdlong	local03, fp
224f8     11 21 02 F6 | 	mov	local02, local03
224fc     01 20 06 F1 | 	add	local02, #1
22500     A7 20 62 FC | 	wrlong	local02, fp
22504     08 4E 85 F1 | 	sub	fp, #8
22508     A7 20 02 FB | 	rdlong	local02, fp
2250c     11 21 42 FC | 	wrbyte	local02, local03
22510     04 4E 85 F1 | 	sub	fp, #4
22514     A7 22 02 FB | 	rdlong	local03, fp
22518     01 22 06 F1 | 	add	local03, #1
2251c     A7 22 62 FC | 	wrlong	local03, fp
22520     04 4E 85 F1 | 	sub	fp, #4
22524     A7 22 02 FB | 	rdlong	local03, fp
22528     01 22 86 F1 | 	sub	local03, #1
2252c     A7 22 62 FC | 	wrlong	local03, fp
22530     14 4E 05 F1 | 	add	fp, #20
22534     A7 22 0A FB | 	rdlong	local03, fp wz
22538     20 4E 85 F1 | 	sub	fp, #32
2253c     4C FF 9F AD |  if_e	jmp	#LR__3464
22540     14 4E 05 F1 | 	add	fp, #20
22544     A7 20 02 FB | 	rdlong	local02, fp
22548     14 4E 85 F1 | 	sub	fp, #20
2254c     0A 20 0E F2 | 	cmp	local02, #10 wz
22550     38 FF 9F 5D |  if_ne	jmp	#LR__3464
22554                 | LR__3465
22554     10 4E 05 F1 | 	add	fp, #16
22558     A7 FA 01 FB | 	rdlong	result1, fp
2255c     10 4E 85 F1 | 	sub	fp, #16
22560                 | LR__3466
22560     A7 F0 03 F6 | 	mov	ptra, fp
22564     B2 00 A0 FD | 	call	#popregs_
22568                 | __system___vfsread_ret
22568     2D 00 64 FD | 	ret
2256c                 | 
2256c                 | __system____default_filbuf
2256c     04 4A 05 F6 | 	mov	COUNT_, #4
22570     A8 00 A0 FD | 	call	#pushregs_
22574     09 1F 02 F6 | 	mov	local01, arg01
22578     0F 21 02 FB | 	rdlong	local02, local01
2257c     0C 20 06 F1 | 	add	local02, #12
22580     10 FB 09 FB | 	rdlong	result1, local02 wz
22584     0C 20 86 F1 | 	sub	local02, #12
22588     20 00 90 5D |  if_ne	jmp	#LR__3470
2258c     14 20 06 F1 | 	add	local02, #20
22590     10 FB 01 F6 | 	mov	result1, local02
22594     04 20 86 F1 | 	sub	local02, #4
22598     10 FB 61 FC | 	wrlong	result1, local02
2259c     04 20 86 F1 | 	sub	local02, #4
225a0     02 00 80 FF 
225a4     10 01 68 FC | 	wrlong	##1024, local02
225a8     0C 20 86 F1 | 	sub	local02, #12
225ac                 | LR__3470
225ac     14 1E 06 F1 | 	add	local01, #20
225b0     0F 23 02 FB | 	rdlong	local03, local01
225b4     11 25 02 F6 | 	mov	local04, local03
225b8     14 1E 86 F1 | 	sub	local01, #20
225bc     13 24 46 F7 | 	zerox	local04, #19
225c0     14 22 46 F0 | 	shr	local03, #20
225c4     02 22 66 F0 | 	shl	local03, #2
225c8     ED 22 02 F1 | 	add	local03, __methods__
225cc     11 23 02 FB | 	rdlong	local03, local03
225d0     10 20 06 F1 | 	add	local02, #16
225d4     10 15 02 FB | 	rdlong	arg02, local02
225d8     04 20 86 F1 | 	sub	local02, #4
225dc     10 17 02 FB | 	rdlong	arg03, local02
225e0     0C 20 86 F1 | 	sub	local02, #12
225e4     0F 13 02 F6 | 	mov	arg01, local01
225e8     F2 1E 02 F6 | 	mov	local01, objptr
225ec     12 E5 01 F6 | 	mov	objptr, local04
225f0     2D 22 62 FD | 	call	local03
225f4     0F E5 01 F6 | 	mov	objptr, local01
225f8     FD 24 02 F6 | 	mov	local04, result1
225fc     00 24 56 F2 | 	cmps	local04, #0 wc
22600     01 FA 65 C6 |  if_b	neg	result1, #1
22604     28 00 90 CD |  if_b	jmp	#LR__3471
22608     10 25 62 FC | 	wrlong	local04, local02
2260c     10 20 06 F1 | 	add	local02, #16
22610     10 23 02 FB | 	rdlong	local03, local02
22614     0C 20 86 F1 | 	sub	local02, #12
22618     10 23 62 FC | 	wrlong	local03, local02
2261c     04 20 06 F1 | 	add	local02, #4
22620     10 23 02 FB | 	rdlong	local03, local02
22624     01 22 46 F5 | 	or	local03, #1
22628     10 23 62 FC | 	wrlong	local03, local02
2262c     12 FB 01 F6 | 	mov	result1, local04
22630                 | LR__3471
22630     A7 F0 03 F6 | 	mov	ptra, fp
22634     B2 00 A0 FD | 	call	#popregs_
22638                 | __system____default_filbuf_ret
22638     2D 00 64 FD | 	ret
2263c                 | 
2263c                 | __system__getlower_1016
2263c     41 12 56 F2 | 	cmps	arg01, #65 wc
22640     10 00 90 CD |  if_b	jmp	#LR__3480
22644     5B 12 56 F2 | 	cmps	arg01, #91 wc
22648     09 FB 01 C6 |  if_b	mov	result1, arg01
2264c     20 FA 05 C1 |  if_b	add	result1, #32
22650     04 00 90 CD |  if_b	jmp	#__system__getlower_1016_ret
22654                 | LR__3480
22654     09 FB 01 F6 | 	mov	result1, arg01
22658                 | __system__getlower_1016_ret
22658     2D 00 64 FD | 	ret
2265c                 | 
2265c                 | __system___pat_match
2265c     08 4A 05 F6 | 	mov	COUNT_, #8
22660     A8 00 A0 FD | 	call	#pushregs_
22664     09 1F 02 F6 | 	mov	local01, arg01
22668                 | LR__3490
22668     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2266c     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
22670     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
22674     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
22678     2C 00 90 AD |  if_e	jmp	#LR__3491
2267c     0A 13 C2 FA | 	rdbyte	arg01, arg02
22680     B8 FF BF FD | 	call	#__system__getlower_1016
22684     FD 22 02 F6 | 	mov	local03, result1
22688     0F 13 C2 FA | 	rdbyte	arg01, local01
2268c     AC FF BF FD | 	call	#__system__getlower_1016
22690     11 FB 09 F2 | 	cmp	result1, local03 wz
22694     00 FA 05 56 |  if_ne	mov	result1, #0
22698     FC 00 90 5D |  if_ne	jmp	#LR__3499
2269c     01 1E 06 F1 | 	add	local01, #1
226a0     01 14 06 F1 | 	add	arg02, #1
226a4     C0 FF 9F FD | 	jmp	#LR__3490
226a8                 | LR__3491
226a8     0A 23 C2 FA | 	rdbyte	local03, arg02
226ac     2A 22 0E F2 | 	cmp	local03, #42 wz
226b0     D4 00 90 5D |  if_ne	jmp	#LR__3498
226b4     01 14 06 F1 | 	add	arg02, #1
226b8     0A 21 C2 FA | 	rdbyte	local02, arg02
226bc     01 14 86 F1 | 	sub	arg02, #1
226c0     2E 20 0E F2 | 	cmp	local02, #46 wz
226c4     28 00 90 5D |  if_ne	jmp	#LR__3492
226c8     02 14 06 F1 | 	add	arg02, #2
226cc     0A 21 C2 FA | 	rdbyte	local02, arg02
226d0     02 14 86 F1 | 	sub	arg02, #2
226d4     2A 20 0E F2 | 	cmp	local02, #42 wz
226d8     03 14 06 A1 |  if_e	add	arg02, #3
226dc     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
226e0     03 14 86 A1 |  if_e	sub	arg02, #3
226e4     12 27 0A A6 |  if_e	mov	local05, local04 wz
226e8     01 FA 05 A6 |  if_e	mov	result1, #1
226ec     A8 00 90 AD |  if_e	jmp	#LR__3499
226f0                 | LR__3492
226f0     01 14 06 F1 | 	add	arg02, #1
226f4     00 28 06 F6 | 	mov	local06, #0
226f8     97 1E 48 FB | 	callpa	#(@LR__3495-@LR__3493)>>2,fcache_load_ptr_
226fc                 | LR__3493
226fc     14 2B 02 F6 | 	mov	local07, local06
22700     0A 2B 02 F1 | 	add	local07, arg02
22704     15 2B CA FA | 	rdbyte	local07, local07 wz
22708     14 27 02 56 |  if_ne	mov	local05, local06
2270c     01 26 06 51 |  if_ne	add	local05, #1
22710     13 29 02 56 |  if_ne	mov	local06, local05
22714     E4 FF 9F 5D |  if_ne	jmp	#LR__3493
22718     00 2C 06 F6 | 	mov	local08, #0
2271c                 | LR__3494
2271c     16 2B 02 F6 | 	mov	local07, local08
22720     0F 2B 02 F1 | 	add	local07, local01
22724     15 2B CA FA | 	rdbyte	local07, local07 wz
22728     16 27 02 56 |  if_ne	mov	local05, local08
2272c     01 26 06 51 |  if_ne	add	local05, #1
22730     13 2D 02 56 |  if_ne	mov	local08, local05
22734     E4 FF 9F 5D |  if_ne	jmp	#LR__3494
22738                 | LR__3495
22738     14 2D 52 F2 | 	cmps	local08, local06 wc
2273c     00 FA 05 C6 |  if_b	mov	result1, #0
22740     54 00 90 CD |  if_b	jmp	#LR__3499
22744     16 21 02 F6 | 	mov	local02, local08
22748     14 21 82 F1 | 	sub	local02, local06
2274c     10 1F 02 F1 | 	add	local01, local02
22750                 | LR__3496
22750     01 28 56 F2 | 	cmps	local06, #1 wc
22754     30 00 90 CD |  if_b	jmp	#LR__3497
22758     0F 13 C2 FA | 	rdbyte	arg01, local01
2275c     DC FE BF FD | 	call	#__system__getlower_1016
22760     FD 2C 02 F6 | 	mov	local08, result1
22764     0A 13 C2 FA | 	rdbyte	arg01, arg02
22768     D0 FE BF FD | 	call	#__system__getlower_1016
2276c     FD 2C 0A F2 | 	cmp	local08, result1 wz
22770     00 FA 05 56 |  if_ne	mov	result1, #0
22774     20 00 90 5D |  if_ne	jmp	#LR__3499
22778     01 1E 06 F1 | 	add	local01, #1
2277c     01 14 06 F1 | 	add	arg02, #1
22780     01 28 86 F1 | 	sub	local06, #1
22784     C8 FF 9F FD | 	jmp	#LR__3496
22788                 | LR__3497
22788                 | LR__3498
22788     0A 2D CA FA | 	rdbyte	local08, arg02 wz
2278c     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
22790     01 FA 05 A6 |  if_e	mov	result1, #1
22794     00 FA 05 56 |  if_ne	mov	result1, #0
22798                 | LR__3499
22798     A7 F0 03 F6 | 	mov	ptra, fp
2279c     B2 00 A0 FD | 	call	#popregs_
227a0                 | __system___pat_match_ret
227a0     2D 00 64 FD | 	ret
227a4                 | 
227a4                 | _fatfs_cc_ff_uni2oem
227a4     00 00 06 F6 | 	mov	_var01, #0
227a8     80 12 16 F2 | 	cmp	arg01, #128 wc
227ac     09 01 02 C6 |  if_b	mov	_var01, arg01
227b0     58 00 90 CD |  if_b	jmp	#LR__3504
227b4     80 00 00 FF 
227b8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
227bc     4C 00 90 3D |  if_ae	jmp	#LR__3503
227c0     0A FB 31 F9 | 	getword	result1, arg02, #0
227c4     01 00 00 FF 
227c8     52 FB 0D F2 | 	cmp	result1, ##850 wz
227cc     3C 00 90 5D |  if_ne	jmp	#LR__3503
227d0                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
227d0     00 00 06 F6 | 	mov	_var01, #0
227d4     97 14 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
227d8                 | LR__3500
227d8     00 FB 31 F9 | 	getword	result1, _var01, #0
227dc     80 FA 15 F2 | 	cmp	result1, #128 wc
227e0     1C 00 90 3D |  if_ae	jmp	#LR__3502
227e4     00 FB 31 F9 | 	getword	result1, _var01, #0
227e8     01 FA 65 F0 | 	shl	result1, #1
227ec     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
227f0     FD FA E1 FA | 	rdword	result1, result1
227f4     FD 12 0A F2 | 	cmp	arg01, result1 wz
227f8     01 00 06 51 |  if_ne	add	_var01, #1
227fc     D8 FF 9F 5D |  if_ne	jmp	#LR__3500
22800                 | LR__3501
22800                 | LR__3502
22800     00 01 32 F9 | 	getword	_var01, _var01, #0
22804     80 00 06 F1 | 	add	_var01, #128
22808     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2280c                 | LR__3503
2280c                 | LR__3504
2280c                 | ' 			c = (c + 0x80) & 0xFF;
2280c                 | ' 		}
2280c                 | ' 	}
2280c                 | ' 
2280c                 | ' 	return c;
2280c     00 FB 01 F6 | 	mov	result1, _var01
22810                 | _fatfs_cc_ff_uni2oem_ret
22810     2D 00 64 FD | 	ret
22814                 | 
22814                 | _fatfs_cc_ff_oem2uni
22814     00 00 06 F6 | 	mov	_var01, #0
22818     09 FB 31 F9 | 	getword	result1, arg01, #0
2281c     80 FA 15 F2 | 	cmp	result1, #128 wc
22820     09 01 02 C6 |  if_b	mov	_var01, arg01
22824     2C 00 90 CD |  if_b	jmp	#LR__3511
22828     0A 15 32 F9 | 	getword	arg02, arg02, #0
2282c     01 00 00 FF 
22830     52 15 0E F2 | 	cmp	arg02, ##850 wz
22834     1C 00 90 5D |  if_ne	jmp	#LR__3510
22838     09 FB 31 F9 | 	getword	result1, arg01, #0
2283c     00 FB 15 F2 | 	cmp	result1, #256 wc
22840     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
22844     80 12 86 C1 |  if_b	sub	arg01, #128
22848     01 12 66 C0 |  if_b	shl	arg01, #1
2284c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
22850     09 01 E2 CA |  if_b	rdword	_var01, arg01
22854                 | LR__3510
22854                 | LR__3511
22854                 | ' 		}
22854                 | ' 	}
22854                 | ' 
22854                 | ' 	return c;
22854     00 FB 01 F6 | 	mov	result1, _var01
22858                 | _fatfs_cc_ff_oem2uni_ret
22858     2D 00 64 FD | 	ret
2285c                 | 
2285c                 | _fatfs_cc_ff_wtoupper
2285c     09 01 02 F6 | 	mov	_var01, arg01
22860     80 00 00 FF 
22864     00 00 16 F2 | 	cmp	_var01, ##65536 wc
22868     60 01 90 3D |  if_ae	jmp	#LR__3533
2286c     00 03 02 F6 | 	mov	_var02, _var01
22870     01 01 32 F9 | 	getword	_var01, _var02, #0
22874     08 00 00 FF 
22878     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2287c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
22880     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
22884     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
22888     01 00 00 3F 
2288c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
22890     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
22894     01 00 00 3F 
22898     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2289c     02 07 02 F6 | 	mov	_var04, _var03
228a0                 | ' 		uc = (WORD)uni;
228a0                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
228a0                 | ' 		for (;;) {
228a0                 | LR__3520
228a0     03 09 E2 FA | 	rdword	_var05, _var04
228a4     04 05 02 F6 | 	mov	_var03, _var05
228a8     0F 04 4E F7 | 	zerox	_var03, #15 wz
228ac     02 06 06 F1 | 	add	_var04, #2
228b0     14 01 90 AD |  if_e	jmp	#LR__3532
228b4     01 05 32 F9 | 	getword	_var03, _var02, #0
228b8     04 01 32 F9 | 	getword	_var01, _var05, #0
228bc     00 05 12 F2 | 	cmp	_var03, _var01 wc
228c0     04 01 90 CD |  if_b	jmp	#LR__3532
228c4     03 0B E2 FA | 	rdword	_var06, _var04
228c8     05 0D 32 F9 | 	getword	_var07, _var06, #0
228cc     08 0C 46 F0 | 	shr	_var07, #8
228d0     05 0B 32 F9 | 	getword	_var06, _var06, #0
228d4     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
228d8     01 05 32 F9 | 	getword	_var03, _var02, #0
228dc     04 0F 32 F9 | 	getword	_var08, _var05, #0
228e0     05 01 32 F9 | 	getword	_var01, _var06, #0
228e4     00 0F 02 F1 | 	add	_var08, _var01
228e8     07 05 52 F2 | 	cmps	_var03, _var08 wc
228ec     02 06 06 F1 | 	add	_var04, #2
228f0     C4 00 90 3D |  if_ae	jmp	#LR__3531
228f4                 | ' 				switch (cmd) {
228f4     06 11 32 F9 | 	getword	_var09, _var07, #0
228f8     09 10 26 F3 | 	fle	_var09, #9
228fc     30 10 62 FD | 	jmprel	_var09
22900                 | LR__3521
22900     24 00 90 FD | 	jmp	#LR__3522
22904     3C 00 90 FD | 	jmp	#LR__3523
22908     54 00 90 FD | 	jmp	#LR__3524
2290c     5C 00 90 FD | 	jmp	#LR__3525
22910     64 00 90 FD | 	jmp	#LR__3526
22914     6C 00 90 FD | 	jmp	#LR__3527
22918     74 00 90 FD | 	jmp	#LR__3528
2291c     7C 00 90 FD | 	jmp	#LR__3529
22920     84 00 90 FD | 	jmp	#LR__3530
22924     A0 00 90 FD | 	jmp	#LR__3532
22928                 | LR__3522
22928     01 03 32 F9 | 	getword	_var02, _var02, #0
2292c     04 09 32 F9 | 	getword	_var05, _var05, #0
22930     04 03 82 F1 | 	sub	_var02, _var05
22934     01 02 66 F0 | 	shl	_var02, #1
22938     03 03 02 F1 | 	add	_var02, _var04
2293c     01 03 E2 FA | 	rdword	_var02, _var02
22940     84 00 90 FD | 	jmp	#LR__3532
22944                 | LR__3523
22944     01 05 32 F9 | 	getword	_var03, _var02, #0
22948     01 03 32 F9 | 	getword	_var02, _var02, #0
2294c     04 09 32 F9 | 	getword	_var05, _var05, #0
22950     04 03 82 F1 | 	sub	_var02, _var05
22954     01 02 06 F5 | 	and	_var02, #1
22958     02 03 C2 F2 | 	subr	_var02, _var03
2295c     68 00 90 FD | 	jmp	#LR__3532
22960                 | LR__3524
22960     01 03 32 F9 | 	getword	_var02, _var02, #0
22964     10 02 86 F1 | 	sub	_var02, #16
22968     5C 00 90 FD | 	jmp	#LR__3532
2296c                 | LR__3525
2296c     01 03 32 F9 | 	getword	_var02, _var02, #0
22970     20 02 86 F1 | 	sub	_var02, #32
22974     50 00 90 FD | 	jmp	#LR__3532
22978                 | LR__3526
22978     01 03 32 F9 | 	getword	_var02, _var02, #0
2297c     30 02 86 F1 | 	sub	_var02, #48
22980     44 00 90 FD | 	jmp	#LR__3532
22984                 | LR__3527
22984     01 03 32 F9 | 	getword	_var02, _var02, #0
22988     1A 02 86 F1 | 	sub	_var02, #26
2298c     38 00 90 FD | 	jmp	#LR__3532
22990                 | LR__3528
22990     01 03 32 F9 | 	getword	_var02, _var02, #0
22994     08 02 06 F1 | 	add	_var02, #8
22998     2C 00 90 FD | 	jmp	#LR__3532
2299c                 | LR__3529
2299c     01 03 32 F9 | 	getword	_var02, _var02, #0
229a0     50 02 86 F1 | 	sub	_var02, #80
229a4     20 00 90 FD | 	jmp	#LR__3532
229a8                 | LR__3530
229a8     01 03 32 F9 | 	getword	_var02, _var02, #0
229ac     0E 00 00 FF 
229b0     60 02 86 F1 | 	sub	_var02, ##7264
229b4                 | ' 				}
229b4                 | ' 				break;
229b4     10 00 90 FD | 	jmp	#LR__3532
229b8                 | LR__3531
229b8     0F 0C 4E F7 | 	zerox	_var07, #15 wz
229bc     02 0A 06 AA |  if_e	mul	_var06, #2
229c0     05 07 02 A1 |  if_e	add	_var04, _var06
229c4     D8 FE 9F FD | 	jmp	#LR__3520
229c8                 | LR__3532
229c8     01 01 32 F9 | 	getword	_var01, _var02, #0
229cc                 | LR__3533
229cc                 | ' 		}
229cc                 | ' 		uni = uc;
229cc                 | ' 	}
229cc                 | ' 
229cc                 | ' 	return uni;
229cc     00 FB 01 F6 | 	mov	result1, _var01
229d0                 | _fatfs_cc_ff_wtoupper_ret
229d0     2D 00 64 FD | 	ret
229d4                 | 
229d4                 | _fatfs_cc_strncpy
229d4     09 01 02 F6 | 	mov	_var01, arg01
229d8     97 12 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
229dc                 | ' 
229dc                 | ' 	dscan = dst;
229dc                 | ' 	sscan = src;
229dc                 | ' 	count = n;
229dc                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
229dc                 | LR__3540
229dc     01 16 86 F1 | 	sub	arg03, #1
229e0     00 16 56 F2 | 	cmps	arg03, #0 wc
229e4     18 00 90 CD |  if_b	jmp	#LR__3542
229e8     0A FB C1 FA | 	rdbyte	result1, arg02
229ec     00 FB 41 FC | 	wrbyte	result1, _var01
229f0     01 14 06 F1 | 	add	arg02, #1
229f4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
229f8                 | ' 		continue;
229f8     01 00 06 F1 | 	add	_var01, #1
229fc     DC FF 9F 5D |  if_ne	jmp	#LR__3540
22a00                 | LR__3541
22a00                 | LR__3542
22a00     97 0C 48 FB | 	callpa	#(@LR__3544-@LR__3543)>>2,fcache_load_ptr_
22a04                 | ' 	while (--count >= 0)
22a04                 | LR__3543
22a04     01 16 86 F1 | 	sub	arg03, #1
22a08     00 16 56 F2 | 	cmps	arg03, #0 wc
22a0c     00 03 02 36 |  if_ae	mov	_var02, _var01
22a10     01 00 06 31 |  if_ae	add	_var01, #1
22a14     01 01 48 3C |  if_ae	wrbyte	#0, _var02
22a18     E8 FF 9F 3D |  if_ae	jmp	#LR__3543
22a1c                 | LR__3544
22a1c                 | ' 		*dscan++ = '\0';
22a1c                 | ' 	return(dst);
22a1c     09 FB 01 F6 | 	mov	result1, arg01
22a20                 | _fatfs_cc_strncpy_ret
22a20     2D 00 64 FD | 	ret
22a24                 | 
22a24                 | _fatfs_cc_memcmp
22a24                 | ' 	for (n = size; n > 0; n--)
22a24     00 16 0E F2 | 	cmp	arg03, #0 wz
22a28     28 00 90 AD |  if_e	jmp	#LR__3551
22a2c                 | LR__3550
22a2c     09 01 C2 FA | 	rdbyte	_var01, arg01
22a30     0A 03 C2 FA | 	rdbyte	_var02, arg02
22a34     01 01 0A F2 | 	cmp	_var01, _var02 wz
22a38     01 12 06 A1 |  if_e	add	arg01, #1
22a3c     01 14 06 A1 |  if_e	add	arg02, #1
22a40                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
22a40     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
22a44     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
22a48     01 FB 81 51 |  if_ne	sub	result1, _var02
22a4c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
22a50     F6 17 6E FB | 	djnz	arg03, #LR__3550
22a54                 | LR__3551
22a54                 | ' 
22a54                 | ' 	return(0);
22a54     00 FA 05 F6 | 	mov	result1, #0
22a58                 | _fatfs_cc_memcmp_ret
22a58     2D 00 64 FD | 	ret
22a5c                 | 
22a5c                 | _fatfs_cc_strncmp
22a5c     09 01 0A F6 | 	mov	_var01, arg01 wz
22a60     14 00 90 5D |  if_ne	jmp	#LR__3560
22a64                 | ' 		return scan2 ? -1 : 0;
22a64     00 14 0E F2 | 	cmp	arg02, #0 wz
22a68     01 02 66 56 |  if_ne	neg	_var02, #1
22a6c     00 02 06 A6 |  if_e	mov	_var02, #0
22a70     01 FB 01 F6 | 	mov	result1, _var02
22a74     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
22a78                 | LR__3560
22a78     00 14 0E F2 | 	cmp	arg02, #0 wz
22a7c     01 FA 05 A6 |  if_e	mov	result1, #1
22a80     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22a84     0B 05 02 F6 | 	mov	_var03, arg03
22a88     97 16 48 FB | 	callpa	#(@LR__3562-@LR__3561)>>2,fcache_load_ptr_
22a8c                 | ' 	count = n;
22a8c                 | ' 	do {
22a8c                 | LR__3561
22a8c     00 07 C2 FA | 	rdbyte	_var04, _var01
22a90     0A 09 02 F6 | 	mov	_var05, arg02
22a94     04 0B C2 FA | 	rdbyte	_var06, _var05
22a98     01 04 86 F1 | 	sub	_var03, #1
22a9c     00 04 56 F2 | 	cmps	_var03, #0 wc
22aa0     01 00 06 F1 | 	add	_var01, #1
22aa4     01 14 06 F1 | 	add	arg02, #1
22aa8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
22aac     08 00 90 2D |  if_nc_and_z	jmp	#LR__3563
22ab0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
22ab4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3561
22ab8                 | LR__3562
22ab8                 | LR__3563
22ab8     00 04 56 F2 | 	cmps	_var03, #0 wc
22abc                 | ' 		return(0);
22abc     00 FA 05 C6 |  if_b	mov	result1, #0
22ac0     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
22ac4     05 07 0A F2 | 	cmp	_var04, _var06 wz
22ac8                 | ' 		return(0);
22ac8     00 FA 05 A6 |  if_e	mov	result1, #0
22acc     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22ad0     00 06 0E F2 | 	cmp	_var04, #0 wz
22ad4                 | ' 		return(-1);
22ad4     01 FA 65 A6 |  if_e	neg	result1, #1
22ad8     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22adc     00 0A 0E F2 | 	cmp	_var06, #0 wz
22ae0                 | ' 		return(1);
22ae0     01 FA 05 A6 |  if_e	mov	result1, #1
22ae4                 | ' 		return(c1 - c2);
22ae4     03 FB 01 56 |  if_ne	mov	result1, _var04
22ae8     05 FB 81 51 |  if_ne	sub	result1, _var06
22aec                 | _fatfs_cc_strncmp_ret
22aec     2D 00 64 FD | 	ret
22af0                 | 
22af0                 | _fatfs_cc_strchr
22af0                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
22af0                 | ' 	while ((c = *s++) != (char) charwanted)
22af0                 | LR__3570
22af0     09 01 02 F6 | 	mov	_var01, arg01
22af4     00 03 C2 FA | 	rdbyte	_var02, _var01
22af8     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
22afc     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
22b00     03 05 0A F2 | 	cmp	_var03, _var04 wz
22b04     01 12 06 F1 | 	add	arg01, #1
22b08     14 00 90 AD |  if_e	jmp	#LR__3571
22b0c     01 05 02 F6 | 	mov	_var03, _var02
22b10     07 04 4E F7 | 	zerox	_var03, #7 wz
22b14     00 FA 05 A6 |  if_e	mov	result1, #0
22b18     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
22b1c     D0 FF 9F FD | 	jmp	#LR__3570
22b20                 | LR__3571
22b20                 | ' 	return((char *)--s);
22b20     01 12 86 F1 | 	sub	arg01, #1
22b24     09 FB 01 F6 | 	mov	result1, arg01
22b28                 | _fatfs_cc_strchr_ret
22b28     2D 00 64 FD | 	ret
22b2c                 | 
22b2c                 | _fatfs_cc_disk_initialize
22b2c     04 4A 05 F6 | 	mov	COUNT_, #4
22b30     A8 00 A0 FD | 	call	#pushregs_
22b34     40 F0 07 F1 | 	add	ptra, #64
22b38     04 4E 05 F1 | 	add	fp, #4
22b3c     A7 12 42 FC | 	wrbyte	arg01, fp
22b40     01 00 00 FF 
22b44     14 E4 05 F1 | 	add	objptr, ##532
22b48     F2 18 02 FB | 	rdlong	arg04, objptr
22b4c     2C 4E 05 F1 | 	add	fp, #44
22b50     A7 18 62 FC | 	wrlong	arg04, fp
22b54     04 E4 85 F1 | 	sub	objptr, #4
22b58     F2 18 02 FB | 	rdlong	arg04, objptr
22b5c     04 4E 05 F1 | 	add	fp, #4
22b60     A7 18 62 FC | 	wrlong	arg04, fp
22b64     08 E4 05 F1 | 	add	objptr, #8
22b68     F2 18 02 FB | 	rdlong	arg04, objptr
22b6c     04 4E 05 F1 | 	add	fp, #4
22b70     A7 18 62 FC | 	wrlong	arg04, fp
22b74     04 E4 05 F1 | 	add	objptr, #4
22b78     F2 18 02 FB | 	rdlong	arg04, objptr
22b7c     04 4E 05 F1 | 	add	fp, #4
22b80     A7 18 62 FC | 	wrlong	arg04, fp
22b84     04 E4 05 F1 | 	add	objptr, #4
22b88     F2 02 48 FC | 	wrbyte	#1, objptr
22b8c     01 00 00 FF 
22b90     20 E4 85 F1 | 	sub	objptr, ##544
22b94     38 4E 85 F1 | 	sub	fp, #56
22b98     A7 18 CA FA | 	rdbyte	arg04, fp wz
22b9c     04 4E 85 F1 | 	sub	fp, #4
22ba0                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
22ba0                 | '             return RES_NOTRDY;
22ba0     03 FA 05 56 |  if_ne	mov	result1, #3
22ba4     D8 05 90 5D |  if_ne	jmp	#LR__3598
22ba8     13 00 00 FF 
22bac     10 13 06 F6 | 	mov	arg01, ##10000
22bb0     A4 9A BF FD | 	call	#__system___waitus
22bb4     30 4E 05 F1 | 	add	fp, #48
22bb8     A7 12 02 FB | 	rdlong	arg01, fp
22bbc     09 01 08 FC | 	wrpin	#0, arg01
22bc0     04 4E 05 F1 | 	add	fp, #4
22bc4     A7 12 02 FB | 	rdlong	arg01, fp
22bc8     09 01 08 FC | 	wrpin	#0, arg01
22bcc     04 4E 05 F1 | 	add	fp, #4
22bd0     A7 12 02 FB | 	rdlong	arg01, fp
22bd4     09 01 08 FC | 	wrpin	#0, arg01
22bd8     04 4E 05 F1 | 	add	fp, #4
22bdc     A7 12 02 FB | 	rdlong	arg01, fp
22be0     09 00 80 FF 
22be4     09 01 08 FC | 	wrpin	##4608, arg01
22be8     0C 4E 85 F1 | 	sub	fp, #12
22bec     A7 12 02 FB | 	rdlong	arg01, fp
22bf0     59 12 62 FD | 	drvh	arg01
22bf4     04 4E 05 F1 | 	add	fp, #4
22bf8     A7 12 02 FB | 	rdlong	arg01, fp
22bfc     59 12 62 FD | 	drvh	arg01
22c00     04 4E 05 F1 | 	add	fp, #4
22c04     A7 12 02 FB | 	rdlong	arg01, fp
22c08     59 12 62 FD | 	drvh	arg01
22c0c     04 4E 05 F1 | 	add	fp, #4
22c10     A7 12 02 FB | 	rdlong	arg01, fp
22c14     59 12 62 FD | 	drvh	arg01
22c18     20 4E 85 F1 | 	sub	fp, #32
22c1c     00 04 80 FF 
22c20     A7 20 68 FC | 	wrlong	##524304, fp
22c24     04 4E 05 F1 | 	add	fp, #4
22c28     20 03 80 FF 
22c2c     A7 90 68 FC | 	wrlong	##409672, fp
22c30     14 4E 05 F1 | 	add	fp, #20
22c34     A7 1E 02 FB | 	rdlong	local01, fp
22c38     18 4E 85 F1 | 	sub	fp, #24
22c3c     A7 16 02 FB | 	rdlong	arg03, fp
22c40     40 1E 62 FD | 	dirl	local01
22c44     A0 03 80 FF 
22c48     0F 91 08 FC | 	wrpin	##475208, local01
22c4c     0F 17 12 FC | 	wxpin	arg03, local01
22c50     0F 01 28 FC | 	wypin	#0, local01
22c54     41 1E 62 FD | 	dirh	local01
22c58     1C 4E 05 F1 | 	add	fp, #28
22c5c     A7 20 02 FB | 	rdlong	local02, fp
22c60     10 1F 82 F1 | 	sub	local01, local02
22c64     07 1E 06 F5 | 	and	local01, #7
22c68     18 1E 66 F0 | 	shl	local01, #24
22c6c     78 14 06 F6 | 	mov	arg02, #120
22c70     0F 15 42 F5 | 	or	arg02, local01
22c74     14 4E 85 F1 | 	sub	fp, #20
22c78     A7 14 62 FC | 	wrlong	arg02, fp
22c7c     14 4E 05 F1 | 	add	fp, #20
22c80     A7 12 02 FB | 	rdlong	arg01, fp
22c84     10 14 26 F4 | 	bith	arg02, #16
22c88     40 12 62 FD | 	dirl	arg01
22c8c     09 15 02 FC | 	wrpin	arg02, arg01
22c90     09 3F 18 FC | 	wxpin	#31, arg01
22c94     FF FF FF FF 
22c98     09 FF 2B FC | 	wypin	##-1, arg01
22c9c     41 12 62 FD | 	dirh	arg01
22ca0     04 4E 85 F1 | 	sub	fp, #4
22ca4     A7 14 02 FB | 	rdlong	arg02, fp
22ca8     08 4E 05 F1 | 	add	fp, #8
22cac     A7 22 02 FB | 	rdlong	local03, fp
22cb0     11 15 82 F1 | 	sub	arg02, local03
22cb4     07 14 06 F5 | 	and	arg02, #7
22cb8     18 14 66 F0 | 	shl	arg02, #24
22cbc     14 4E 85 F1 | 	sub	fp, #20
22cc0     A7 14 62 FC | 	wrlong	arg02, fp
22cc4     29 00 00 FF 
22cc8     7A 14 46 F5 | 	or	arg02, ##21114
22ccc     A7 14 62 FC | 	wrlong	arg02, fp
22cd0     14 4E 05 F1 | 	add	fp, #20
22cd4     A7 12 02 FB | 	rdlong	arg01, fp
22cd8     40 12 62 FD | 	dirl	arg01
22cdc     09 15 02 FC | 	wrpin	arg02, arg01
22ce0     09 4F 18 FC | 	wxpin	#39, arg01
22ce4     09 01 28 FC | 	wypin	#0, arg01
22ce8     41 12 62 FD | 	dirh	arg01
22cec     28 4E 85 F1 | 	sub	fp, #40
22cf0     A7 12 02 F6 | 	mov	arg01, fp
22cf4     14 4E 85 F1 | 	sub	fp, #20
22cf8     0A 14 06 F6 | 	mov	arg02, #10
22cfc     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22d00     00 12 06 F6 | 	mov	arg01, #0
22d04     00 14 06 F6 | 	mov	arg02, #0
22d08     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22d0c     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1060
22d10     64 12 06 F6 | 	mov	arg01, #100
22d14     40 99 BF FD | 	call	#__system___waitus
22d18     14 4E 05 F1 | 	add	fp, #20
22d1c     A7 12 02 F6 | 	mov	arg01, fp
22d20     14 4E 85 F1 | 	sub	fp, #20
22d24     0A 14 06 F6 | 	mov	arg02, #10
22d28     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22d2c     0C 4E 05 F1 | 	add	fp, #12
22d30     A7 00 48 FC | 	wrbyte	#0, fp
22d34     0C 4E 85 F1 | 	sub	fp, #12
22d38     00 12 06 F6 | 	mov	arg01, #0
22d3c     00 14 06 F6 | 	mov	arg02, #0
22d40     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22d44     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
22d48     01 18 0E F2 | 	cmp	arg04, #1 wz
22d4c     B8 03 90 5D |  if_ne	jmp	#LR__3597
22d50     08 12 06 F6 | 	mov	arg01, #8
22d54     AA 15 06 F6 | 	mov	arg02, #426
22d58     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22d5c     FD FA E1 F8 | 	getbyte	result1, result1, #0
22d60     01 FA 0D F2 | 	cmp	result1, #1 wz
22d64     98 01 90 5D |  if_ne	jmp	#LR__3583
22d68     14 4E 05 F1 | 	add	fp, #20
22d6c     A7 12 02 F6 | 	mov	arg01, fp
22d70     14 4E 85 F1 | 	sub	fp, #20
22d74     04 14 06 F6 | 	mov	arg02, #4
22d78     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22d7c     16 4E 05 F1 | 	add	fp, #22
22d80     A7 24 C2 FA | 	rdbyte	local04, fp
22d84     16 4E 85 F1 | 	sub	fp, #22
22d88     01 24 0E F2 | 	cmp	local04, #1 wz
22d8c     17 4E 05 A1 |  if_e	add	fp, #23
22d90     A7 22 C2 AA |  if_e	rdbyte	local03, fp
22d94     17 4E 85 A1 |  if_e	sub	fp, #23
22d98     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
22d9c     68 03 90 5D |  if_ne	jmp	#LR__3596
22da0                 | ' 				for (tmr = 1000; tmr; tmr--) {
22da0     18 4E 05 F1 | 	add	fp, #24
22da4     01 00 80 FF 
22da8     A7 D0 6B FC | 	wrlong	##1000, fp
22dac     18 4E 85 F1 | 	sub	fp, #24
22db0                 | LR__3580
22db0     18 4E 05 F1 | 	add	fp, #24
22db4     A7 1E 0A FB | 	rdlong	local01, fp wz
22db8     18 4E 85 F1 | 	sub	fp, #24
22dbc     3C 00 90 AD |  if_e	jmp	#LR__3581
22dc0     A9 12 06 F6 | 	mov	arg01, #169
22dc4     1E 14 C6 F9 | 	decod	arg02, #30
22dc8     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22dcc     FD 24 02 F6 | 	mov	local04, result1
22dd0     07 24 4E F7 | 	zerox	local04, #7 wz
22dd4     24 00 90 AD |  if_e	jmp	#LR__3581
22dd8     01 00 00 FF 
22ddc     E8 13 06 F6 | 	mov	arg01, ##1000
22de0     74 98 BF FD | 	call	#__system___waitus
22de4     18 4E 05 F1 | 	add	fp, #24
22de8     A7 24 02 FB | 	rdlong	local04, fp
22dec     01 24 86 F1 | 	sub	local04, #1
22df0     A7 24 62 FC | 	wrlong	local04, fp
22df4     18 4E 85 F1 | 	sub	fp, #24
22df8     B4 FF 9F FD | 	jmp	#LR__3580
22dfc                 | LR__3581
22dfc     18 4E 05 F1 | 	add	fp, #24
22e00     A7 24 0A FB | 	rdlong	local04, fp wz
22e04     18 4E 85 F1 | 	sub	fp, #24
22e08     4C 00 90 AD |  if_e	jmp	#LR__3582
22e0c     3A 12 06 F6 | 	mov	arg01, #58
22e10     00 14 06 F6 | 	mov	arg02, #0
22e14     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22e18     FD 22 02 F6 | 	mov	local03, result1
22e1c     07 22 4E F7 | 	zerox	local03, #7 wz
22e20     34 00 90 5D |  if_ne	jmp	#LR__3582
22e24     14 4E 05 F1 | 	add	fp, #20
22e28     A7 12 02 F6 | 	mov	arg01, fp
22e2c     14 4E 85 F1 | 	sub	fp, #20
22e30     04 14 06 F6 | 	mov	arg02, #4
22e34     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22e38     14 4E 05 F1 | 	add	fp, #20
22e3c     A7 1E C2 FA | 	rdbyte	local01, fp
22e40     40 1E CE F7 | 	test	local01, #64 wz
22e44     0C 24 06 56 |  if_ne	mov	local04, #12
22e48     04 24 06 A6 |  if_e	mov	local04, #4
22e4c     08 4E 85 F1 | 	sub	fp, #8
22e50     A7 24 42 FC | 	wrbyte	local04, fp
22e54     0C 4E 85 F1 | 	sub	fp, #12
22e58                 | LR__3582
22e58     14 24 06 FB | 	rdlong	local04, #20
22e5c     18 4E 05 F1 | 	add	fp, #24
22e60     A7 24 62 FC | 	wrlong	local04, fp
22e64     0C 4E 05 F1 | 	add	fp, #12
22e68     A7 24 02 FB | 	rdlong	local04, fp
22e6c     1B 24 26 F4 | 	bith	local04, #27
22e70     A7 24 62 FC | 	wrlong	local04, fp
22e74     0C 4E 85 F1 | 	sub	fp, #12
22e78     A7 24 02 FB | 	rdlong	local04, fp
22e7c     18 4E 85 F1 | 	sub	fp, #24
22e80     68 78 04 FF 
22e84     81 25 16 F2 | 	cmp	local04, ##150000001 wc
22e88     1C 4E 05 C1 |  if_b	add	fp, #28
22e8c     00 01 80 CF 
22e90     A7 08 68 CC |  if_b	wrlong	##131076, fp
22e94     1C 4E 85 C1 |  if_b	sub	fp, #28
22e98     6C 02 90 CD |  if_b	jmp	#LR__3596
22e9c     18 4E 05 F1 | 	add	fp, #24
22ea0     A7 24 02 FB | 	rdlong	local04, fp
22ea4     18 4E 85 F1 | 	sub	fp, #24
22ea8     E1 F5 05 FF 
22eac     01 24 16 F2 | 	cmp	local04, ##200000001 wc
22eb0     1C 4E 05 C1 |  if_b	add	fp, #28
22eb4     00 01 80 CF 
22eb8     A7 0A 68 CC |  if_b	wrlong	##131077, fp
22ebc     1C 4E 85 C1 |  if_b	sub	fp, #28
22ec0     44 02 90 CD |  if_b	jmp	#LR__3596
22ec4     18 4E 05 F1 | 	add	fp, #24
22ec8     A7 24 02 FB | 	rdlong	local04, fp
22ecc     18 4E 85 F1 | 	sub	fp, #24
22ed0     3B 58 08 FF 
22ed4     01 24 16 F2 | 	cmp	local04, ##280000001 wc
22ed8     1C 4E 05 C1 |  if_b	add	fp, #28
22edc     00 01 80 CF 
22ee0     A7 0C 68 CC |  if_b	wrlong	##131078, fp
22ee4     1C 4E 85 C1 |  if_b	sub	fp, #28
22ee8     1C 02 90 CD |  if_b	jmp	#LR__3596
22eec     1C 4E 05 F1 | 	add	fp, #28
22ef0     80 01 80 FF 
22ef4     A7 10 68 FC | 	wrlong	##196616, fp
22ef8     1C 4E 85 F1 | 	sub	fp, #28
22efc     08 02 90 FD | 	jmp	#LR__3596
22f00                 | LR__3583
22f00     A9 12 06 F6 | 	mov	arg01, #169
22f04     00 14 06 F6 | 	mov	arg02, #0
22f08     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22f0c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
22f10     02 24 16 F2 | 	cmp	local04, #2 wc
22f14     18 00 90 3D |  if_ae	jmp	#LR__3584
22f18     0C 4E 05 F1 | 	add	fp, #12
22f1c     A7 04 48 FC | 	wrbyte	#2, fp
22f20     04 4E 05 F1 | 	add	fp, #4
22f24     A7 52 49 FC | 	wrbyte	#169, fp
22f28     10 4E 85 F1 | 	sub	fp, #16
22f2c     14 00 90 FD | 	jmp	#LR__3585
22f30                 | LR__3584
22f30     0C 4E 05 F1 | 	add	fp, #12
22f34     A7 02 48 FC | 	wrbyte	#1, fp
22f38     04 4E 05 F1 | 	add	fp, #4
22f3c     A7 02 48 FC | 	wrbyte	#1, fp
22f40     10 4E 85 F1 | 	sub	fp, #16
22f44                 | LR__3585
22f44                 | ' 				ty =  0x01 ; cmd =  (1) ;
22f44                 | ' 			}
22f44                 | ' 			for (tmr = 1000; tmr; tmr--) {
22f44     18 4E 05 F1 | 	add	fp, #24
22f48     01 00 80 FF 
22f4c     A7 D0 6B FC | 	wrlong	##1000, fp
22f50     18 4E 85 F1 | 	sub	fp, #24
22f54                 | LR__3586
22f54     18 4E 05 F1 | 	add	fp, #24
22f58     A7 22 0A FB | 	rdlong	local03, fp wz
22f5c     18 4E 85 F1 | 	sub	fp, #24
22f60     44 00 90 AD |  if_e	jmp	#LR__3587
22f64     10 4E 05 F1 | 	add	fp, #16
22f68     A7 12 C2 FA | 	rdbyte	arg01, fp
22f6c     10 4E 85 F1 | 	sub	fp, #16
22f70     00 14 06 F6 | 	mov	arg02, #0
22f74     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22f78     FD 24 02 F6 | 	mov	local04, result1
22f7c     07 24 4E F7 | 	zerox	local04, #7 wz
22f80     24 00 90 AD |  if_e	jmp	#LR__3587
22f84     01 00 00 FF 
22f88     E8 13 06 F6 | 	mov	arg01, ##1000
22f8c     C8 96 BF FD | 	call	#__system___waitus
22f90     18 4E 05 F1 | 	add	fp, #24
22f94     A7 24 02 FB | 	rdlong	local04, fp
22f98     01 24 86 F1 | 	sub	local04, #1
22f9c     A7 24 62 FC | 	wrlong	local04, fp
22fa0     18 4E 85 F1 | 	sub	fp, #24
22fa4     AC FF 9F FD | 	jmp	#LR__3586
22fa8                 | LR__3587
22fa8     18 4E 05 F1 | 	add	fp, #24
22fac     A7 24 0A FB | 	rdlong	local04, fp wz
22fb0     18 4E 85 F1 | 	sub	fp, #24
22fb4     14 00 90 AD |  if_e	jmp	#LR__3588
22fb8     10 12 06 F6 | 	mov	arg01, #16
22fbc     09 14 C6 F9 | 	decod	arg02, #9
22fc0     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22fc4     07 FA 4D F7 | 	zerox	result1, #7 wz
22fc8     0C 00 90 AD |  if_e	jmp	#LR__3589
22fcc                 | LR__3588
22fcc     0C 4E 05 F1 | 	add	fp, #12
22fd0     A7 00 48 FC | 	wrbyte	#0, fp
22fd4     0C 4E 85 F1 | 	sub	fp, #12
22fd8                 | LR__3589
22fd8     14 24 06 FB | 	rdlong	local04, #20
22fdc     18 4E 05 F1 | 	add	fp, #24
22fe0     A7 24 62 FC | 	wrlong	local04, fp
22fe4     18 4E 85 F1 | 	sub	fp, #24
22fe8     F0 FA 02 FF 
22fec     01 25 16 F2 | 	cmp	local04, ##100000001 wc
22ff0     18 00 90 3D |  if_ae	jmp	#LR__3590
22ff4     24 4E 05 F1 | 	add	fp, #36
22ff8     A7 24 02 FB | 	rdlong	local04, fp
22ffc     1B 24 26 F4 | 	bith	local04, #27
23000     A7 24 62 FC | 	wrlong	local04, fp
23004     24 4E 85 F1 | 	sub	fp, #36
23008     2C 00 90 FD | 	jmp	#LR__3591
2300c                 | LR__3590
2300c     18 4E 05 F1 | 	add	fp, #24
23010     A7 24 02 FB | 	rdlong	local04, fp
23014     18 4E 85 F1 | 	sub	fp, #24
23018     E1 F5 05 FF 
2301c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23020     24 4E 05 C1 |  if_b	add	fp, #36
23024     A7 24 02 CB |  if_b	rdlong	local04, fp
23028     80 00 04 CF 
2302c     00 24 46 C5 |  if_b	or	local04, ##134283264
23030     A7 24 62 CC |  if_b	wrlong	local04, fp
23034     24 4E 85 C1 |  if_b	sub	fp, #36
23038                 | LR__3591
23038     18 4E 05 F1 | 	add	fp, #24
2303c     A7 24 02 FB | 	rdlong	local04, fp
23040     18 4E 85 F1 | 	sub	fp, #24
23044     F0 FA 02 FF 
23048     01 25 16 F2 | 	cmp	local04, ##100000001 wc
2304c     1C 4E 05 C1 |  if_b	add	fp, #28
23050     00 01 80 CF 
23054     A7 08 68 CC |  if_b	wrlong	##131076, fp
23058     1C 4E 85 C1 |  if_b	sub	fp, #28
2305c     A8 00 90 CD |  if_b	jmp	#LR__3595
23060     18 4E 05 F1 | 	add	fp, #24
23064     A7 24 02 FB | 	rdlong	local04, fp
23068     18 4E 85 F1 | 	sub	fp, #24
2306c     68 78 04 FF 
23070     81 25 16 F2 | 	cmp	local04, ##150000001 wc
23074     1C 4E 05 C1 |  if_b	add	fp, #28
23078     80 01 80 CF 
2307c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
23080     1C 4E 85 C1 |  if_b	sub	fp, #28
23084     80 00 90 CD |  if_b	jmp	#LR__3594
23088     18 4E 05 F1 | 	add	fp, #24
2308c     A7 24 02 FB | 	rdlong	local04, fp
23090     18 4E 85 F1 | 	sub	fp, #24
23094     E1 F5 05 FF 
23098     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2309c     1C 4E 05 C1 |  if_b	add	fp, #28
230a0     00 02 80 CF 
230a4     A7 10 68 CC |  if_b	wrlong	##262152, fp
230a8     1C 4E 85 C1 |  if_b	sub	fp, #28
230ac     58 00 90 CD |  if_b	jmp	#LR__3593
230b0     18 4E 05 F1 | 	add	fp, #24
230b4     A7 24 02 FB | 	rdlong	local04, fp
230b8     18 4E 85 F1 | 	sub	fp, #24
230bc     59 73 07 FF 
230c0     81 24 16 F2 | 	cmp	local04, ##250000001 wc
230c4     1C 4E 05 C1 |  if_b	add	fp, #28
230c8     80 02 80 CF 
230cc     A7 14 68 CC |  if_b	wrlong	##327690, fp
230d0     1C 4E 85 C1 |  if_b	sub	fp, #28
230d4     30 00 90 CD |  if_b	jmp	#LR__3592
230d8     18 4E 05 F1 | 	add	fp, #24
230dc     A7 24 02 FB | 	rdlong	local04, fp
230e0     18 4E 85 F1 | 	sub	fp, #24
230e4     D1 F0 08 FF 
230e8     01 25 16 F2 | 	cmp	local04, ##300000001 wc
230ec     1C 4E 05 C1 |  if_b	add	fp, #28
230f0     00 03 80 CF 
230f4     A7 18 68 CC |  if_b	wrlong	##393228, fp
230f8     1C 4E 85 F3 | 	sumc	fp, #28
230fc     80 03 80 3F 
23100     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
23104     1C 4E 85 31 |  if_ae	sub	fp, #28
23108                 | LR__3592
23108                 | LR__3593
23108                 | LR__3594
23108                 | LR__3595
23108                 | LR__3596
23108                 | LR__3597
23108     0C 4E 05 F1 | 	add	fp, #12
2310c     A7 24 C2 FA | 	rdbyte	local04, fp
23110     01 00 00 FF 
23114     21 E4 05 F1 | 	add	objptr, ##545
23118     F2 24 42 FC | 	wrbyte	local04, objptr
2311c     A7 1E CA FA | 	rdbyte	local01, fp wz
23120     00 24 06 56 |  if_ne	mov	local04, #0
23124     01 24 06 A6 |  if_e	mov	local04, #1
23128     20 4E 05 F1 | 	add	fp, #32
2312c     A7 24 42 FC | 	wrbyte	local04, fp
23130     A7 24 C2 FA | 	rdbyte	local04, fp
23134     2C 4E 85 F1 | 	sub	fp, #44
23138     01 E4 85 F1 | 	sub	objptr, #1
2313c     F2 24 42 FC | 	wrbyte	local04, objptr
23140     01 00 00 FF 
23144     20 E4 85 F1 | 	sub	objptr, ##544
23148     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1060
2314c     34 4E 05 F1 | 	add	fp, #52
23150     A7 12 02 FB | 	rdlong	arg01, fp
23154     18 4E 85 F1 | 	sub	fp, #24
23158     A7 14 02 FB | 	rdlong	arg02, fp
2315c     09 15 12 FC | 	wxpin	arg02, arg01
23160     1C 4E 05 F1 | 	add	fp, #28
23164     A7 12 02 FB | 	rdlong	arg01, fp
23168     14 4E 85 F1 | 	sub	fp, #20
2316c     A7 14 02 FB | 	rdlong	arg02, fp
23170     09 15 02 FC | 	wrpin	arg02, arg01
23174                 | ' 
23174                 | ' 		}
23174                 | ' 	}
23174                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
23174                 | ' 	CardType = ty;
23174                 | ' 	s = ty ? 0 :  0x01 ;
23174                 | ' 	Stat = s;
23174                 | ' 
23174                 | ' 	deselect();
23174                 | ' 
23174                 | ' 
23174                 | ' 	_wxpin( PIN_CLK, ck_div );
23174                 | ' 	_wrpin( PIN_DI, spm_tx );
23174                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
23174                 | ' 	return s;
23174     08 4E 05 F1 | 	add	fp, #8
23178     A7 FA C1 FA | 	rdbyte	result1, fp
2317c     2C 4E 85 F1 | 	sub	fp, #44
23180                 | LR__3598
23180     A7 F0 03 F6 | 	mov	ptra, fp
23184     B2 00 A0 FD | 	call	#popregs_
23188                 | _fatfs_cc_disk_initialize_ret
23188     2D 00 64 FD | 	ret
2318c                 | 
2318c                 | _fatfs_cc_disk_read
2318c     05 4A 05 F6 | 	mov	COUNT_, #5
23190     A8 00 A0 FD | 	call	#pushregs_
23194     0A 1F 02 F6 | 	mov	local01, arg02
23198     0B 21 02 F6 | 	mov	local02, arg03
2319c     0C 23 02 F6 | 	mov	local03, arg04
231a0     00 12 0E F2 | 	cmp	arg01, #0 wz
231a4     01 FA 05 56 |  if_ne	mov	result1, #1
231a8                 | ' 
231a8                 | ' 	return Stat;
231a8     01 00 00 AF 
231ac     20 E4 05 A1 |  if_e	add	objptr, ##544
231b0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
231b4     01 00 00 AF 
231b8     20 E4 85 A1 |  if_e	sub	objptr, ##544
231bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
231c0     01 FA CD F7 | 	test	result1, #1 wz
231c4     03 FA 05 56 |  if_ne	mov	result1, #3
231c8     84 00 90 5D |  if_ne	jmp	#LR__3602
231cc     01 00 00 FF 
231d0     21 E4 05 F1 | 	add	objptr, ##545
231d4     F2 24 C2 FA | 	rdbyte	local04, objptr
231d8     01 00 00 FF 
231dc     21 E4 85 F1 | 	sub	objptr, ##545
231e0     08 24 CE F7 | 	test	local04, #8 wz
231e4     09 20 66 A0 |  if_e	shl	local02, #9
231e8     02 22 16 F2 | 	cmp	local03, #2 wc
231ec     12 24 06 36 |  if_ae	mov	local04, #18
231f0     11 24 06 C6 |  if_b	mov	local04, #17
231f4     10 15 02 F6 | 	mov	arg02, local02
231f8     12 13 02 F6 | 	mov	arg01, local04
231fc     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23200     FD 26 02 F6 | 	mov	local05, result1
23204     07 26 4E F7 | 	zerox	local05, #7 wz
23208     30 00 90 5D |  if_ne	jmp	#LR__3601
2320c                 | ' 		do {
2320c                 | LR__3600
2320c     0F 13 02 F6 | 	mov	arg01, local01
23210     09 14 C6 F9 | 	decod	arg02, #9
23214     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
23218     00 FA 0D F2 | 	cmp	result1, #0 wz
2321c     01 00 00 5F 
23220     00 1E 06 51 |  if_ne	add	local01, ##512
23224     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3600
23228     12 25 E2 F8 | 	getbyte	local04, local04, #0
2322c     12 24 0E F2 | 	cmp	local04, #18 wz
23230     0C 12 06 A6 |  if_e	mov	arg01, #12
23234     00 14 06 A6 |  if_e	mov	arg02, #0
23238     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1074
2323c                 | LR__3601
2323c     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1060
23240                 | ' 	}
23240                 | ' 	deselect();
23240                 | ' 
23240                 | ' 	return count ? RES_ERROR : RES_OK;
23240     00 22 0E F2 | 	cmp	local03, #0 wz
23244     01 26 06 56 |  if_ne	mov	local05, #1
23248     00 26 06 A6 |  if_e	mov	local05, #0
2324c     13 FB 01 F6 | 	mov	result1, local05
23250                 | LR__3602
23250     A7 F0 03 F6 | 	mov	ptra, fp
23254     B2 00 A0 FD | 	call	#popregs_
23258                 | _fatfs_cc_disk_read_ret
23258     2D 00 64 FD | 	ret
2325c                 | 
2325c                 | _fatfs_cc_disk_write
2325c     04 4A 05 F6 | 	mov	COUNT_, #4
23260     A8 00 A0 FD | 	call	#pushregs_
23264     0A 1F 02 F6 | 	mov	local01, arg02
23268     0C 21 02 F6 | 	mov	local02, arg04
2326c     0B 23 02 F6 | 	mov	local03, arg03
23270     00 12 0E F2 | 	cmp	arg01, #0 wz
23274     01 FA 05 56 |  if_ne	mov	result1, #1
23278                 | ' 
23278                 | ' 	return Stat;
23278     01 00 00 AF 
2327c     20 E4 05 A1 |  if_e	add	objptr, ##544
23280     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23284     01 00 00 AF 
23288     20 E4 85 A1 |  if_e	sub	objptr, ##544
2328c     FD FA E1 F8 | 	getbyte	result1, result1, #0
23290     01 FA CD F7 | 	test	result1, #1 wz
23294     03 FA 05 56 |  if_ne	mov	result1, #3
23298     D4 00 90 5D |  if_ne	jmp	#LR__3614
2329c     01 00 00 FF 
232a0     21 E4 05 F1 | 	add	objptr, ##545
232a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
232a8     01 00 00 FF 
232ac     21 E4 85 F1 | 	sub	objptr, ##545
232b0     08 16 CE F7 | 	test	arg03, #8 wz
232b4     09 22 66 A0 |  if_e	shl	local03, #9
232b8     01 20 0E F2 | 	cmp	local02, #1 wz
232bc     30 00 90 5D |  if_ne	jmp	#LR__3610
232c0     18 12 06 F6 | 	mov	arg01, #24
232c4     11 15 02 F6 | 	mov	arg02, local03
232c8     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
232cc     FD 24 02 F6 | 	mov	local04, result1
232d0     07 24 4E F7 | 	zerox	local04, #7 wz
232d4     84 00 90 5D |  if_ne	jmp	#LR__3613
232d8     0F 13 02 F6 | 	mov	arg01, local01
232dc     FE 14 06 F6 | 	mov	arg02, #254
232e0     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
232e4     00 FA 0D F2 | 	cmp	result1, #0 wz
232e8     00 20 06 56 |  if_ne	mov	local02, #0
232ec     6C 00 90 FD | 	jmp	#LR__3613
232f0                 | LR__3610
232f0     01 00 00 FF 
232f4     21 E4 05 F1 | 	add	objptr, ##545
232f8     F2 24 C2 FA | 	rdbyte	local04, objptr
232fc     01 00 00 FF 
23300     21 E4 85 F1 | 	sub	objptr, ##545
23304     06 24 CE F7 | 	test	local04, #6 wz
23308     97 12 06 56 |  if_ne	mov	arg01, #151
2330c     10 15 02 56 |  if_ne	mov	arg02, local02
23310     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1074
23314     11 15 02 F6 | 	mov	arg02, local03
23318     19 12 06 F6 | 	mov	arg01, #25
2331c     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23320     FD 24 02 F6 | 	mov	local04, result1
23324     07 24 4E F7 | 	zerox	local04, #7 wz
23328     30 00 90 5D |  if_ne	jmp	#LR__3612
2332c                 | ' 			do {
2332c                 | LR__3611
2332c     0F 13 02 F6 | 	mov	arg01, local01
23330     FC 14 06 F6 | 	mov	arg02, #252
23334     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
23338     00 FA 0D F2 | 	cmp	result1, #0 wz
2333c     01 00 00 5F 
23340     00 1E 06 51 |  if_ne	add	local01, ##512
23344     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3611
23348     00 12 06 F6 | 	mov	arg01, #0
2334c     FD 14 06 F6 | 	mov	arg02, #253
23350     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
23354     00 FA 0D F2 | 	cmp	result1, #0 wz
23358     01 20 06 A6 |  if_e	mov	local02, #1
2335c                 | LR__3612
2335c                 | LR__3613
2335c     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1060
23360                 | ' 				count = 1;
23360                 | ' 		}
23360                 | ' 	}
23360                 | ' 	deselect();
23360                 | ' 
23360                 | ' 	return count ? RES_ERROR : RES_OK;
23360     00 20 0E F2 | 	cmp	local02, #0 wz
23364     01 24 06 56 |  if_ne	mov	local04, #1
23368     00 24 06 A6 |  if_e	mov	local04, #0
2336c     12 FB 01 F6 | 	mov	result1, local04
23370                 | LR__3614
23370     A7 F0 03 F6 | 	mov	ptra, fp
23374     B2 00 A0 FD | 	call	#popregs_
23378                 | _fatfs_cc_disk_write_ret
23378     2D 00 64 FD | 	ret
2337c                 | 
2337c                 | _fatfs_cc_disk_ioctl
2337c     01 4A 05 F6 | 	mov	COUNT_, #1
23380     A8 00 A0 FD | 	call	#pushregs_
23384     30 F0 07 F1 | 	add	ptra, #48
23388     04 4E 05 F1 | 	add	fp, #4
2338c     A7 12 42 FC | 	wrbyte	arg01, fp
23390     04 4E 05 F1 | 	add	fp, #4
23394     A7 14 42 FC | 	wrbyte	arg02, fp
23398     04 4E 05 F1 | 	add	fp, #4
2339c     A7 16 62 FC | 	wrlong	arg03, fp
233a0     08 4E 85 F1 | 	sub	fp, #8
233a4     A7 12 CA FA | 	rdbyte	arg01, fp wz
233a8     04 4E 85 F1 | 	sub	fp, #4
233ac     01 FA 05 56 |  if_ne	mov	result1, #1
233b0                 | ' 
233b0                 | ' 	return Stat;
233b0     01 00 00 AF 
233b4     20 E4 05 A1 |  if_e	add	objptr, ##544
233b8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
233bc     01 00 00 AF 
233c0     20 E4 85 A1 |  if_e	sub	objptr, ##544
233c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
233c8     01 FA CD F7 | 	test	result1, #1 wz
233cc     03 FA 05 56 |  if_ne	mov	result1, #3
233d0     E4 01 90 5D |  if_ne	jmp	#LR__3628
233d4     10 4E 05 F1 | 	add	fp, #16
233d8     A7 02 68 FC | 	wrlong	#1, fp
233dc                 | ' 
233dc                 | ' 	res = RES_ERROR;
233dc                 | ' 	switch (ctrl) {
233dc     08 4E 85 F1 | 	sub	fp, #8
233e0     A7 1E C2 FA | 	rdbyte	local01, fp
233e4     08 4E 85 F1 | 	sub	fp, #8
233e8     04 1E 26 F3 | 	fle	local01, #4
233ec     30 1E 62 FD | 	jmprel	local01
233f0                 | LR__3620
233f0     10 00 90 FD | 	jmp	#LR__3621
233f4     24 00 90 FD | 	jmp	#LR__3622
233f8     A0 01 90 FD | 	jmp	#LR__3626
233fc     80 01 90 FD | 	jmp	#LR__3625
23400     98 01 90 FD | 	jmp	#LR__3626
23404                 | LR__3621
23404     B4 79 B0 FD | 	call	#_fatfs_cc_select_1064
23408     00 FA 0D F2 | 	cmp	result1, #0 wz
2340c     10 4E 05 51 |  if_ne	add	fp, #16
23410     A7 00 68 5C |  if_ne	wrlong	#0, fp
23414     10 4E 85 51 |  if_ne	sub	fp, #16
23418                 | ' 			break;
23418     8C 01 90 FD | 	jmp	#LR__3627
2341c                 | LR__3622
2341c     09 12 06 F6 | 	mov	arg01, #9
23420     00 14 06 F6 | 	mov	arg02, #0
23424     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23428     FD 1E 02 F6 | 	mov	local01, result1
2342c     07 1E 4E F7 | 	zerox	local01, #7 wz
23430     74 01 90 5D |  if_ne	jmp	#LR__3627
23434     18 4E 05 F1 | 	add	fp, #24
23438     A7 12 02 F6 | 	mov	arg01, fp
2343c     18 4E 85 F1 | 	sub	fp, #24
23440     10 14 06 F6 | 	mov	arg02, #16
23444     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
23448     00 FA 0D F2 | 	cmp	result1, #0 wz
2344c     58 01 90 AD |  if_e	jmp	#LR__3627
23450     18 4E 05 F1 | 	add	fp, #24
23454     A7 1E C2 FA | 	rdbyte	local01, fp
23458     18 4E 85 F1 | 	sub	fp, #24
2345c     06 1E 46 F0 | 	shr	local01, #6
23460     01 1E 0E F2 | 	cmp	local01, #1 wz
23464     5C 00 90 5D |  if_ne	jmp	#LR__3623
23468     21 4E 05 F1 | 	add	fp, #33
2346c     A7 1E C2 FA | 	rdbyte	local01, fp
23470     01 4E 85 F1 | 	sub	fp, #1
23474     A7 FA C1 FA | 	rdbyte	result1, fp
23478     FD FA 31 F9 | 	getword	result1, result1, #0
2347c     08 FA 65 F0 | 	shl	result1, #8
23480     FD 1E 02 F1 | 	add	local01, result1
23484     01 4E 85 F1 | 	sub	fp, #1
23488     A7 FA C1 FA | 	rdbyte	result1, fp
2348c     3F FA 05 F5 | 	and	result1, #63
23490     10 FA 65 F0 | 	shl	result1, #16
23494     FD 1E 02 F1 | 	add	local01, result1
23498     01 1E 06 F1 | 	add	local01, #1
2349c     09 4E 05 F1 | 	add	fp, #9
234a0     A7 1E 62 FC | 	wrlong	local01, fp
234a4     1C 4E 85 F1 | 	sub	fp, #28
234a8     A7 1E 02 FB | 	rdlong	local01, fp
234ac     1C 4E 05 F1 | 	add	fp, #28
234b0     A7 FA 01 FB | 	rdlong	result1, fp
234b4     28 4E 85 F1 | 	sub	fp, #40
234b8     0A FA 65 F0 | 	shl	result1, #10
234bc     0F FB 61 FC | 	wrlong	result1, local01
234c0     AC 00 90 FD | 	jmp	#LR__3624
234c4                 | LR__3623
234c4     1D 4E 05 F1 | 	add	fp, #29
234c8     A7 1E C2 FA | 	rdbyte	local01, fp
234cc     0F 1F 42 F8 | 	getnib	local01, local01, #0
234d0     05 4E 05 F1 | 	add	fp, #5
234d4     A7 FA C1 FA | 	rdbyte	result1, fp
234d8     80 FA 05 F5 | 	and	result1, #128
234dc     07 FA C5 F0 | 	sar	result1, #7
234e0     FD 1E 02 F1 | 	add	local01, result1
234e4     01 4E 85 F1 | 	sub	fp, #1
234e8     A7 FA C1 FA | 	rdbyte	result1, fp
234ec     03 FA 05 F5 | 	and	result1, #3
234f0     01 FA 65 F0 | 	shl	result1, #1
234f4     FD 1E 02 F1 | 	add	local01, result1
234f8     02 1E 06 F1 | 	add	local01, #2
234fc     0D 4E 85 F1 | 	sub	fp, #13
23500     A7 1E 42 FC | 	wrbyte	local01, fp
23504     0C 4E 05 F1 | 	add	fp, #12
23508     A7 1E C2 FA | 	rdbyte	local01, fp
2350c     06 1E 46 F0 | 	shr	local01, #6
23510     01 4E 85 F1 | 	sub	fp, #1
23514     A7 FA C1 FA | 	rdbyte	result1, fp
23518     FD FA 31 F9 | 	getword	result1, result1, #0
2351c     02 FA 65 F0 | 	shl	result1, #2
23520     FD 1E 02 F1 | 	add	local01, result1
23524     01 4E 85 F1 | 	sub	fp, #1
23528     A7 FA C1 FA | 	rdbyte	result1, fp
2352c     03 FA 05 F5 | 	and	result1, #3
23530     FD FA 31 F9 | 	getword	result1, result1, #0
23534     0A FA 65 F0 | 	shl	result1, #10
23538     FD 1E 02 F1 | 	add	local01, result1
2353c     01 1E 06 F1 | 	add	local01, #1
23540     0A 4E 05 F1 | 	add	fp, #10
23544     A7 1E 62 FC | 	wrlong	local01, fp
23548     1C 4E 85 F1 | 	sub	fp, #28
2354c     A7 1E 02 FB | 	rdlong	local01, fp
23550     1C 4E 05 F1 | 	add	fp, #28
23554     A7 FA 01 FB | 	rdlong	result1, fp
23558     14 4E 85 F1 | 	sub	fp, #20
2355c     A7 16 C2 FA | 	rdbyte	arg03, fp
23560     14 4E 85 F1 | 	sub	fp, #20
23564     09 16 86 F1 | 	sub	arg03, #9
23568     0B FB 61 F0 | 	shl	result1, arg03
2356c     0F FB 61 FC | 	wrlong	result1, local01
23570                 | LR__3624
23570     10 4E 05 F1 | 	add	fp, #16
23574     A7 00 68 FC | 	wrlong	#0, fp
23578     10 4E 85 F1 | 	sub	fp, #16
2357c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2357c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2357c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2357c                 | ' 				}
2357c                 | ' 				res = RES_OK;
2357c                 | ' 			}
2357c                 | ' 			break;
2357c     28 00 90 FD | 	jmp	#LR__3627
23580                 | LR__3625
23580     0C 4E 05 F1 | 	add	fp, #12
23584     A7 1E 02 FB | 	rdlong	local01, fp
23588     0F 01 69 FC | 	wrlong	#128, local01
2358c     04 4E 05 F1 | 	add	fp, #4
23590     A7 00 68 FC | 	wrlong	#0, fp
23594     10 4E 85 F1 | 	sub	fp, #16
23598                 | ' 			*(DWORD*)buff = 128;
23598                 | ' 			res = RES_OK;
23598                 | ' 			break;
23598     0C 00 90 FD | 	jmp	#LR__3627
2359c                 | LR__3626
2359c     10 4E 05 F1 | 	add	fp, #16
235a0     A7 08 68 FC | 	wrlong	#4, fp
235a4     10 4E 85 F1 | 	sub	fp, #16
235a8                 | LR__3627
235a8     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1060
235ac                 | ' 			res = RES_PARERR;
235ac                 | ' 	}
235ac                 | ' 
235ac                 | ' 	deselect();
235ac                 | ' 
235ac                 | ' 	return res;
235ac     10 4E 05 F1 | 	add	fp, #16
235b0     A7 FA 01 FB | 	rdlong	result1, fp
235b4     10 4E 85 F1 | 	sub	fp, #16
235b8                 | LR__3628
235b8     A7 F0 03 F6 | 	mov	ptra, fp
235bc     B2 00 A0 FD | 	call	#popregs_
235c0                 | _fatfs_cc_disk_ioctl_ret
235c0     2D 00 64 FD | 	ret
235c4                 | 
235c4                 | _fatfs_cc_disk_setpins
235c4     00 12 0E F2 | 	cmp	arg01, #0 wz
235c8     01 FA 65 56 |  if_ne	neg	result1, #1
235cc     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
235d0     01 00 00 FF 
235d4     10 E4 05 F1 | 	add	objptr, ##528
235d8     F2 14 62 FC | 	wrlong	arg02, objptr
235dc     04 E4 05 F1 | 	add	objptr, #4
235e0     F2 16 62 FC | 	wrlong	arg03, objptr
235e4     04 E4 05 F1 | 	add	objptr, #4
235e8     F2 18 62 FC | 	wrlong	arg04, objptr
235ec     04 E4 05 F1 | 	add	objptr, #4
235f0     F2 1A 62 FC | 	wrlong	arg05, objptr
235f4     01 00 00 FF 
235f8     1C E4 85 F1 | 	sub	objptr, ##540
235fc     00 FA 05 F6 | 	mov	result1, #0
23600                 | _fatfs_cc_disk_setpins_ret
23600     2D 00 64 FD | 	ret
23604                 | 
23604                 | _fatfs_cc_tchar2uni
23604     09 01 02 FB | 	rdlong	_var01, arg01
23608     00 03 02 F6 | 	mov	_var02, _var01
2360c     01 00 06 F1 | 	add	_var01, #1
23610     00 05 02 F6 | 	mov	_var03, _var01
23614     01 07 C2 FA | 	rdbyte	_var04, _var02
23618     80 06 CE F7 | 	test	_var04, #128 wz
2361c     E8 00 90 AD |  if_e	jmp	#LR__3637
23620     03 09 02 F6 | 	mov	_var05, _var04
23624     E0 08 06 F5 | 	and	_var05, #224
23628     C0 08 0E F2 | 	cmp	_var05, #192 wz
2362c     1F 06 06 A5 |  if_e	and	_var04, #31
23630     01 0A 06 A6 |  if_e	mov	_var06, #1
23634     34 00 90 AD |  if_e	jmp	#LR__3631
23638     03 09 02 F6 | 	mov	_var05, _var04
2363c     F0 08 06 F5 | 	and	_var05, #240
23640     E0 08 0E F2 | 	cmp	_var05, #224 wz
23644     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
23648     02 0A 06 A6 |  if_e	mov	_var06, #2
2364c     1C 00 90 AD |  if_e	jmp	#LR__3630
23650     03 09 02 F6 | 	mov	_var05, _var04
23654     F8 08 06 F5 | 	and	_var05, #248
23658     F0 08 0E F2 | 	cmp	_var05, #240 wz
2365c     07 06 06 A5 |  if_e	and	_var04, #7
23660     03 0A 06 A6 |  if_e	mov	_var06, #3
23664                 | ' 			return 0xFFFFFFFF;
23664     01 FA 65 56 |  if_ne	neg	result1, #1
23668     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2366c                 | LR__3630
2366c                 | LR__3631
2366c                 | ' 		}
2366c                 | ' 		do {
2366c                 | LR__3632
2366c     02 0D C2 FA | 	rdbyte	_var07, _var03
23670     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
23674     C0 08 06 F5 | 	and	_var05, #192
23678     80 08 0E F2 | 	cmp	_var05, #128 wz
2367c     01 04 06 F1 | 	add	_var03, #1
23680     01 FA 65 56 |  if_ne	neg	result1, #1
23684     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
23688     06 06 66 F0 | 	shl	_var04, #6
2368c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
23690     3F 02 06 F5 | 	and	_var02, #63
23694     01 07 42 F5 | 	or	_var04, _var02
23698     F4 0B 6E FB | 	djnz	_var06, #LR__3632
2369c     80 06 16 F2 | 	cmp	_var04, #128 wc
236a0     24 00 90 CD |  if_b	jmp	#LR__3634
236a4     6C 00 00 FF 
236a8     00 06 16 F2 | 	cmp	_var04, ##55296 wc
236ac     0C 00 90 CD |  if_b	jmp	#LR__3633
236b0     70 00 00 FF 
236b4     00 06 16 F2 | 	cmp	_var04, ##57344 wc
236b8     0C 00 90 CD |  if_b	jmp	#LR__3634
236bc                 | LR__3633
236bc     80 08 00 FF 
236c0     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
236c4     08 00 90 CD |  if_b	jmp	#LR__3635
236c8                 | LR__3634
236c8     01 FA 65 F6 | 	neg	result1, #1
236cc     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
236d0                 | LR__3635
236d0     80 00 00 FF 
236d4     00 06 16 F2 | 	cmp	_var04, ##65536 wc
236d8     2C 00 90 CD |  if_b	jmp	#LR__3636
236dc     03 03 02 F6 | 	mov	_var02, _var04
236e0     80 00 00 FF 
236e4     00 02 86 F1 | 	sub	_var02, ##65536
236e8     06 02 66 F0 | 	shl	_var02, #6
236ec     80 FF 01 FF 
236f0     00 02 06 F5 | 	and	_var02, ##67043328
236f4     6E 00 6C FF 
236f8     00 08 06 F6 | 	mov	_var05, ##-671032320
236fc     01 09 42 F5 | 	or	_var05, _var02
23700     09 06 46 F7 | 	zerox	_var04, #9
23704     04 07 42 F5 | 	or	_var04, _var05
23708                 | LR__3636
23708                 | LR__3637
23708     09 05 62 FC | 	wrlong	_var03, arg01
2370c                 | ' 	}
2370c                 | ' #line 811 "ff.c"
2370c                 | ' 	*str = p;
2370c                 | ' 	return uc;
2370c     03 FB 01 F6 | 	mov	result1, _var04
23710                 | _fatfs_cc_tchar2uni_ret
23710     2D 00 64 FD | 	ret
23714                 | 
23714                 | _fatfs_cc_put_utf
23714     80 12 16 F2 | 	cmp	arg01, #128 wc
23718     18 00 90 3D |  if_ae	jmp	#LR__3640
2371c     01 16 16 F2 | 	cmp	arg03, #1 wc
23720     00 FA 05 C6 |  if_b	mov	result1, #0
23724     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
23728     0A 13 42 FC | 	wrbyte	arg01, arg02
2372c                 | ' 		*buf = (TCHAR)chr;
2372c                 | ' 		return 1;
2372c     01 FA 05 F6 | 	mov	result1, #1
23730     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23734                 | LR__3640
23734     04 00 00 FF 
23738     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2373c     40 00 90 3D |  if_ae	jmp	#LR__3641
23740     02 16 16 F2 | 	cmp	arg03, #2 wc
23744     00 FA 05 C6 |  if_b	mov	result1, #0
23748     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2374c     09 FB 01 F6 | 	mov	result1, arg01
23750     06 FA 45 F0 | 	shr	result1, #6
23754     1F FA 05 F5 | 	and	result1, #31
23758     C0 16 06 F6 | 	mov	arg03, #192
2375c     FD 16 42 F5 | 	or	arg03, result1
23760     0A 17 42 FC | 	wrbyte	arg03, arg02
23764     01 14 06 F1 | 	add	arg02, #1
23768     3F 12 06 F5 | 	and	arg01, #63
2376c     80 FA 05 F6 | 	mov	result1, #128
23770     09 FB 41 F5 | 	or	result1, arg01
23774     0A FB 41 FC | 	wrbyte	result1, arg02
23778                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
23778                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
23778                 | ' 		return 2;
23778     02 FA 05 F6 | 	mov	result1, #2
2377c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23780                 | LR__3641
23780     80 00 00 FF 
23784     00 12 16 F2 | 	cmp	arg01, ##65536 wc
23788     70 00 90 3D |  if_ae	jmp	#LR__3644
2378c     03 16 16 F2 | 	cmp	arg03, #3 wc
23790     18 00 90 CD |  if_b	jmp	#LR__3642
23794     6C 00 00 FF 
23798     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2379c     14 00 90 CD |  if_b	jmp	#LR__3643
237a0     70 00 00 FF 
237a4     00 12 16 F2 | 	cmp	arg01, ##57344 wc
237a8     08 00 90 3D |  if_ae	jmp	#LR__3643
237ac                 | LR__3642
237ac     00 FA 05 F6 | 	mov	result1, #0
237b0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
237b4                 | LR__3643
237b4     09 FB 59 F8 | 	getnib	result1, arg01, #3
237b8     E0 16 06 F6 | 	mov	arg03, #224
237bc     FD 16 42 F5 | 	or	arg03, result1
237c0     0A 17 42 FC | 	wrbyte	arg03, arg02
237c4     01 14 06 F1 | 	add	arg02, #1
237c8     09 FB 01 F6 | 	mov	result1, arg01
237cc     06 FA 45 F0 | 	shr	result1, #6
237d0     3F FA 05 F5 | 	and	result1, #63
237d4     80 16 06 F6 | 	mov	arg03, #128
237d8     FD 16 42 F5 | 	or	arg03, result1
237dc     0A 17 42 FC | 	wrbyte	arg03, arg02
237e0     01 14 06 F1 | 	add	arg02, #1
237e4     3F 12 06 F5 | 	and	arg01, #63
237e8     80 FA 05 F6 | 	mov	result1, #128
237ec     09 FB 41 F5 | 	or	result1, arg01
237f0     0A FB 41 FC | 	wrbyte	result1, arg02
237f4                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
237f4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
237f4                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
237f4                 | ' 		return 3;
237f4     03 FA 05 F6 | 	mov	result1, #3
237f8     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
237fc                 | LR__3644
237fc     04 16 16 F2 | 	cmp	arg03, #4 wc
23800     00 FA 05 C6 |  if_b	mov	result1, #0
23804     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
23808     09 01 02 F6 | 	mov	_var01, arg01
2380c     E0 01 06 F4 | 	bitl	_var01, #480
23810     00 00 6C FF 
23814     00 00 86 F1 | 	sub	_var01, ##-671088640
23818     06 00 46 F0 | 	shr	_var01, #6
2381c     09 13 32 F9 | 	getword	arg01, arg01, #0
23820     6E 00 00 FF 
23824     00 12 86 F1 | 	sub	arg01, ##56320
23828     00 08 00 FF 
2382c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
23830     02 00 00 CF 
23834     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
23838     00 FA 05 36 |  if_ae	mov	result1, #0
2383c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
23840     09 01 42 F5 | 	or	_var01, arg01
23844     80 00 00 FF 
23848     00 00 06 F1 | 	add	_var01, ##65536
2384c     00 FB 01 F6 | 	mov	result1, _var01
23850     12 FA 45 F0 | 	shr	result1, #18
23854     07 FA 05 F5 | 	and	result1, #7
23858     F0 16 06 F6 | 	mov	arg03, #240
2385c     FD 16 42 F5 | 	or	arg03, result1
23860     0A 17 42 FC | 	wrbyte	arg03, arg02
23864     01 14 06 F1 | 	add	arg02, #1
23868     00 FB 01 F6 | 	mov	result1, _var01
2386c     0C FA 45 F0 | 	shr	result1, #12
23870     3F FA 05 F5 | 	and	result1, #63
23874     80 16 06 F6 | 	mov	arg03, #128
23878     FD 16 42 F5 | 	or	arg03, result1
2387c     0A 17 42 FC | 	wrbyte	arg03, arg02
23880     01 14 06 F1 | 	add	arg02, #1
23884     00 FB 01 F6 | 	mov	result1, _var01
23888     06 FA 45 F0 | 	shr	result1, #6
2388c     3F FA 05 F5 | 	and	result1, #63
23890     80 16 06 F6 | 	mov	arg03, #128
23894     FD 16 42 F5 | 	or	arg03, result1
23898     0A 17 42 FC | 	wrbyte	arg03, arg02
2389c     01 14 06 F1 | 	add	arg02, #1
238a0     3F 00 06 F5 | 	and	_var01, #63
238a4     80 FA 05 F6 | 	mov	result1, #128
238a8     00 FB 41 F5 | 	or	result1, _var01
238ac     0A FB 41 FC | 	wrbyte	result1, arg02
238b0                 | ' 	chr = (hc | chr) + 0x10000;
238b0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
238b0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
238b0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
238b0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
238b0                 | ' 	return 4;
238b0     04 FA 05 F6 | 	mov	result1, #4
238b4                 | _fatfs_cc_put_utf_ret
238b4     2D 00 64 FD | 	ret
238b8                 | 
238b8                 | _fatfs_cc_sync_window
238b8     02 4A 05 F6 | 	mov	COUNT_, #2
238bc     A8 00 A0 FD | 	call	#pushregs_
238c0     09 1F 02 F6 | 	mov	local01, arg01
238c4     00 20 06 F6 | 	mov	local02, #0
238c8     03 1E 06 F1 | 	add	local01, #3
238cc     0F FB C9 FA | 	rdbyte	result1, local01 wz
238d0     03 1E 86 F1 | 	sub	local01, #3
238d4     A4 00 90 AD |  if_e	jmp	#LR__3652
238d8     01 1E 06 F1 | 	add	local01, #1
238dc     0F 13 C2 FA | 	rdbyte	arg01, local01
238e0     33 1E 06 F1 | 	add	local01, #51
238e4     0F 15 02 F6 | 	mov	arg02, local01
238e8     04 1E 86 F1 | 	sub	local01, #4
238ec     0F 17 02 FB | 	rdlong	arg03, local01
238f0     30 1E 86 F1 | 	sub	local01, #48
238f4     01 18 06 F6 | 	mov	arg04, #1
238f8     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
238fc     00 FA 0D F2 | 	cmp	result1, #0 wz
23900     74 00 90 5D |  if_ne	jmp	#LR__3650
23904     03 1E 06 F1 | 	add	local01, #3
23908     0F 01 48 FC | 	wrbyte	#0, local01
2390c     2D 1E 06 F1 | 	add	local01, #45
23910     0F FB 01 FB | 	rdlong	result1, local01
23914     0C 1E 86 F1 | 	sub	local01, #12
23918     0F 19 02 FB | 	rdlong	arg04, local01
2391c     0C FB 81 F1 | 	sub	result1, arg04
23920     08 1E 86 F1 | 	sub	local01, #8
23924     0F 19 02 FB | 	rdlong	arg04, local01
23928     1C 1E 86 F1 | 	sub	local01, #28
2392c     0C FB 11 F2 | 	cmp	result1, arg04 wc
23930     48 00 90 3D |  if_ae	jmp	#LR__3651
23934     02 1E 06 F1 | 	add	local01, #2
23938     0F 19 C2 FA | 	rdbyte	arg04, local01
2393c     02 1E 86 F1 | 	sub	local01, #2
23940     02 18 0E F2 | 	cmp	arg04, #2 wz
23944     34 00 90 5D |  if_ne	jmp	#LR__3651
23948     01 1E 06 F1 | 	add	local01, #1
2394c     0F 13 C2 FA | 	rdbyte	arg01, local01
23950     33 1E 06 F1 | 	add	local01, #51
23954     0F 15 02 F6 | 	mov	arg02, local01
23958     04 1E 86 F1 | 	sub	local01, #4
2395c     0F 17 02 FB | 	rdlong	arg03, local01
23960     14 1E 86 F1 | 	sub	local01, #20
23964     0F 1F 02 FB | 	rdlong	local01, local01
23968     0F 17 02 F1 | 	add	arg03, local01
2396c     01 18 06 F6 | 	mov	arg04, #1
23970     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
23974     04 00 90 FD | 	jmp	#LR__3651
23978                 | LR__3650
23978     01 20 06 F6 | 	mov	local02, #1
2397c                 | LR__3651
2397c                 | LR__3652
2397c                 | ' 			res = FR_DISK_ERR;
2397c                 | ' 		}
2397c                 | ' 	}
2397c                 | ' 	return res;
2397c     10 FB 01 F6 | 	mov	result1, local02
23980     A7 F0 03 F6 | 	mov	ptra, fp
23984     B2 00 A0 FD | 	call	#popregs_
23988                 | _fatfs_cc_sync_window_ret
23988     2D 00 64 FD | 	ret
2398c                 | 
2398c                 | _fatfs_cc_move_window
2398c     03 4A 05 F6 | 	mov	COUNT_, #3
23990     A8 00 A0 FD | 	call	#pushregs_
23994     09 1F 02 F6 | 	mov	local01, arg01
23998     0A 21 02 F6 | 	mov	local02, arg02
2399c     00 22 06 F6 | 	mov	local03, #0
239a0     30 1E 06 F1 | 	add	local01, #48
239a4     0F 19 02 FB | 	rdlong	arg04, local01
239a8     30 1E 86 F1 | 	sub	local01, #48
239ac     0C 21 0A F2 | 	cmp	local02, arg04 wz
239b0     40 00 90 AD |  if_e	jmp	#LR__3661
239b4     0F 13 02 F6 | 	mov	arg01, local01
239b8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
239bc     FD 22 0A F6 | 	mov	local03, result1 wz
239c0     30 00 90 5D |  if_ne	jmp	#LR__3660
239c4     01 1E 06 F1 | 	add	local01, #1
239c8     0F 13 C2 FA | 	rdbyte	arg01, local01
239cc     33 1E 06 F1 | 	add	local01, #51
239d0     0F 15 02 F6 | 	mov	arg02, local01
239d4     10 17 02 F6 | 	mov	arg03, local02
239d8     01 18 06 F6 | 	mov	arg04, #1
239dc     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
239e0     00 FA 0D F2 | 	cmp	result1, #0 wz
239e4     01 20 66 56 |  if_ne	neg	local02, #1
239e8     01 22 06 56 |  if_ne	mov	local03, #1
239ec     04 1E 86 F1 | 	sub	local01, #4
239f0     0F 21 62 FC | 	wrlong	local02, local01
239f4                 | LR__3660
239f4                 | LR__3661
239f4                 | ' 				sect = (LBA_t)0 - 1;
239f4                 | ' 				res = FR_DISK_ERR;
239f4                 | ' 			}
239f4                 | ' 			fs->winsect = sect;
239f4                 | ' 		}
239f4                 | ' 	}
239f4                 | ' 	return res;
239f4     11 FB 01 F6 | 	mov	result1, local03
239f8     A7 F0 03 F6 | 	mov	ptra, fp
239fc     B2 00 A0 FD | 	call	#popregs_
23a00                 | _fatfs_cc_move_window_ret
23a00     2D 00 64 FD | 	ret
23a04                 | 
23a04                 | _fatfs_cc_sync_fs
23a04     02 4A 05 F6 | 	mov	COUNT_, #2
23a08     A8 00 A0 FD | 	call	#pushregs_
23a0c     09 1F 02 F6 | 	mov	local01, arg01
23a10     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
23a14     FD 20 0A F6 | 	mov	local02, result1 wz
23a18     D8 00 90 5D |  if_ne	jmp	#LR__3671
23a1c     0F 19 C2 FA | 	rdbyte	arg04, local01
23a20     03 18 0E F2 | 	cmp	arg04, #3 wz
23a24     04 1E 06 A1 |  if_e	add	local01, #4
23a28     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
23a2c     04 1E 86 A1 |  if_e	sub	local01, #4
23a30     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
23a34     A0 00 90 5D |  if_ne	jmp	#LR__3670
23a38     34 1E 06 F1 | 	add	local01, #52
23a3c     0F 13 02 F6 | 	mov	arg01, local01
23a40     00 14 06 F6 | 	mov	arg02, #0
23a44     09 16 C6 F9 | 	decod	arg03, #9
23a48     98 00 A0 FD | 	call	#\builtin_bytefill_
23a4c     0F 13 02 F6 | 	mov	arg01, local01
23a50     FE 13 06 F1 | 	add	arg01, #510
23a54     55 00 80 FF 
23a58     09 AB 58 FC | 	wrword	##43605, arg01
23a5c     A9 B0 A0 FF 
23a60     0F A5 68 FC | 	wrlong	##1096897106, local01
23a64     0F 13 02 F6 | 	mov	arg01, local01
23a68     E4 13 06 F1 | 	add	arg01, #484
23a6c     B9 A0 B0 FF 
23a70     09 E5 68 FC | 	wrlong	##1631679090, arg01
23a74     0F 13 02 F6 | 	mov	arg01, local01
23a78     E8 13 06 F1 | 	add	arg01, #488
23a7c     20 1E 86 F1 | 	sub	local01, #32
23a80     0F 15 02 FB | 	rdlong	arg02, local01
23a84     09 15 62 FC | 	wrlong	arg02, arg01
23a88     20 1E 06 F1 | 	add	local01, #32
23a8c     0F 13 02 F6 | 	mov	arg01, local01
23a90     EC 13 06 F1 | 	add	arg01, #492
23a94     24 1E 86 F1 | 	sub	local01, #36
23a98     0F 15 02 FB | 	rdlong	arg02, local01
23a9c     09 15 62 FC | 	wrlong	arg02, arg01
23aa0     10 1E 06 F1 | 	add	local01, #16
23aa4     0F 17 02 FB | 	rdlong	arg03, local01
23aa8     01 16 06 F1 | 	add	arg03, #1
23aac     10 1E 06 F1 | 	add	local01, #16
23ab0     0F 17 62 FC | 	wrlong	arg03, local01
23ab4     2F 1E 86 F1 | 	sub	local01, #47
23ab8     0F 13 C2 FA | 	rdbyte	arg01, local01
23abc     33 1E 06 F1 | 	add	local01, #51
23ac0     0F 15 02 F6 | 	mov	arg02, local01
23ac4     01 18 06 F6 | 	mov	arg04, #1
23ac8     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
23acc     30 1E 86 F1 | 	sub	local01, #48
23ad0     0F 01 48 FC | 	wrbyte	#0, local01
23ad4     04 1E 86 F1 | 	sub	local01, #4
23ad8                 | LR__3670
23ad8     01 1E 06 F1 | 	add	local01, #1
23adc     0F 13 C2 FA | 	rdbyte	arg01, local01
23ae0     00 14 06 F6 | 	mov	arg02, #0
23ae4     00 16 06 F6 | 	mov	arg03, #0
23ae8     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
23aec     00 FA 0D F2 | 	cmp	result1, #0 wz
23af0     01 20 06 56 |  if_ne	mov	local02, #1
23af4                 | LR__3671
23af4                 | ' 	}
23af4                 | ' 
23af4                 | ' 	return res;
23af4     10 FB 01 F6 | 	mov	result1, local02
23af8     A7 F0 03 F6 | 	mov	ptra, fp
23afc     B2 00 A0 FD | 	call	#popregs_
23b00                 | _fatfs_cc_sync_fs_ret
23b00     2D 00 64 FD | 	ret
23b04                 | 
23b04                 | _fatfs_cc_clst2sect
23b04     02 14 86 F1 | 	sub	arg02, #2
23b08     18 12 06 F1 | 	add	arg01, #24
23b0c     09 01 02 FB | 	rdlong	_var01, arg01
23b10     18 12 86 F1 | 	sub	arg01, #24
23b14     02 00 86 F1 | 	sub	_var01, #2
23b18     00 15 12 F2 | 	cmp	arg02, _var01 wc
23b1c     00 FA 05 36 |  if_ae	mov	result1, #0
23b20     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
23b24     0A 12 06 F1 | 	add	arg01, #10
23b28     09 01 E2 FA | 	rdword	_var01, arg01
23b2c     0A 01 02 FD | 	qmul	_var01, arg02
23b30                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
23b30     22 12 06 F1 | 	add	arg01, #34
23b34     09 FB 01 FB | 	rdlong	result1, arg01
23b38     18 00 62 FD | 	getqx	_var01
23b3c     00 FB 01 F1 | 	add	result1, _var01
23b40                 | _fatfs_cc_clst2sect_ret
23b40     2D 00 64 FD | 	ret
23b44                 | 
23b44                 | _fatfs_cc_get_fat
23b44     07 4A 05 F6 | 	mov	COUNT_, #7
23b48     A8 00 A0 FD | 	call	#pushregs_
23b4c     0A 1F 02 F6 | 	mov	local01, arg02
23b50     09 21 02 FB | 	rdlong	local02, arg01
23b54     02 1E 16 F2 | 	cmp	local01, #2 wc
23b58     14 00 90 CD |  if_b	jmp	#LR__3680
23b5c     18 20 06 F1 | 	add	local02, #24
23b60     10 23 02 FB | 	rdlong	local03, local02
23b64     18 20 86 F1 | 	sub	local02, #24
23b68     11 1F 12 F2 | 	cmp	local01, local03 wc
23b6c     08 00 90 CD |  if_b	jmp	#LR__3681
23b70                 | LR__3680
23b70     01 24 06 F6 | 	mov	local04, #1
23b74     60 01 90 FD | 	jmp	#LR__3688
23b78                 | LR__3681
23b78     01 24 66 F6 | 	neg	local04, #1
23b7c                 | ' 		val = 0xFFFFFFFF;
23b7c                 | ' 
23b7c                 | ' 		switch (fs->fs_type) {
23b7c     10 27 C2 FA | 	rdbyte	local05, local02
23b80     01 26 86 F1 | 	sub	local05, #1
23b84     03 26 26 F3 | 	fle	local05, #3
23b88     30 26 62 FD | 	jmprel	local05
23b8c                 | LR__3682
23b8c     0C 00 90 FD | 	jmp	#LR__3683
23b90     B8 00 90 FD | 	jmp	#LR__3684
23b94     F8 00 90 FD | 	jmp	#LR__3685
23b98     38 01 90 FD | 	jmp	#LR__3686
23b9c                 | LR__3683
23b9c     0F 27 02 F6 | 	mov	local05, local01
23ba0     0F 13 02 F6 | 	mov	arg01, local01
23ba4     01 12 46 F0 | 	shr	arg01, #1
23ba8     09 27 02 F1 | 	add	local05, arg01
23bac     10 13 02 F6 | 	mov	arg01, local02
23bb0     13 29 02 F6 | 	mov	local06, local05
23bb4     09 28 46 F0 | 	shr	local06, #9
23bb8     24 20 06 F1 | 	add	local02, #36
23bbc     10 15 02 FB | 	rdlong	arg02, local02
23bc0     24 20 86 F1 | 	sub	local02, #36
23bc4     14 15 02 F1 | 	add	arg02, local06
23bc8     C0 FD BF FD | 	call	#_fatfs_cc_move_window
23bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
23bd0     04 01 90 5D |  if_ne	jmp	#LR__3687
23bd4     13 29 02 F6 | 	mov	local06, local05
23bd8     FF 29 06 F5 | 	and	local06, #511
23bdc     34 20 06 F1 | 	add	local02, #52
23be0     10 29 02 F1 | 	add	local06, local02
23be4     14 2B C2 FA | 	rdbyte	local07, local06
23be8     34 20 86 F1 | 	sub	local02, #52
23bec     10 13 02 F6 | 	mov	arg01, local02
23bf0     01 26 06 F1 | 	add	local05, #1
23bf4     13 29 02 F6 | 	mov	local06, local05
23bf8     09 28 46 F0 | 	shr	local06, #9
23bfc     24 20 06 F1 | 	add	local02, #36
23c00     10 15 02 FB | 	rdlong	arg02, local02
23c04     24 20 86 F1 | 	sub	local02, #36
23c08     14 15 02 F1 | 	add	arg02, local06
23c0c     7C FD BF FD | 	call	#_fatfs_cc_move_window
23c10     00 FA 0D F2 | 	cmp	result1, #0 wz
23c14     C0 00 90 5D |  if_ne	jmp	#LR__3687
23c18     FF 27 06 F5 | 	and	local05, #511
23c1c     34 20 06 F1 | 	add	local02, #52
23c20     10 27 02 F1 | 	add	local05, local02
23c24     13 29 C2 FA | 	rdbyte	local06, local05
23c28     08 28 66 F0 | 	shl	local06, #8
23c2c     14 2B 42 F5 | 	or	local07, local06
23c30     01 1E CE F7 | 	test	local01, #1 wz
23c34     04 2A 46 50 |  if_ne	shr	local07, #4
23c38     15 23 02 56 |  if_ne	mov	local03, local07
23c3c     0B 2A 46 A7 |  if_e	zerox	local07, #11
23c40     15 23 02 A6 |  if_e	mov	local03, local07
23c44     11 25 02 F6 | 	mov	local04, local03
23c48                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
23c48                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
23c48                 | ' 			break;
23c48     8C 00 90 FD | 	jmp	#LR__3687
23c4c                 | LR__3684
23c4c     10 13 02 F6 | 	mov	arg01, local02
23c50     0F 29 02 F6 | 	mov	local06, local01
23c54     08 28 46 F0 | 	shr	local06, #8
23c58     24 20 06 F1 | 	add	local02, #36
23c5c     10 15 02 FB | 	rdlong	arg02, local02
23c60     24 20 86 F1 | 	sub	local02, #36
23c64     14 15 02 F1 | 	add	arg02, local06
23c68     20 FD BF FD | 	call	#_fatfs_cc_move_window
23c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
23c70     64 00 90 5D |  if_ne	jmp	#LR__3687
23c74     34 20 06 F1 | 	add	local02, #52
23c78     01 1E 66 F0 | 	shl	local01, #1
23c7c     FF 1F 06 F5 | 	and	local01, #511
23c80     0F 21 02 F1 | 	add	local02, local01
23c84                 | ' {
23c84                 | ' 
23c84                 | ' 	return *((WORD*)ptr);
23c84     10 FB E1 FA | 	rdword	result1, local02
23c88     FD 24 32 F9 | 	getword	local04, result1, #0
23c8c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
23c8c                 | ' 			break;
23c8c     48 00 90 FD | 	jmp	#LR__3687
23c90                 | LR__3685
23c90     10 13 02 F6 | 	mov	arg01, local02
23c94     0F 29 02 F6 | 	mov	local06, local01
23c98     07 28 46 F0 | 	shr	local06, #7
23c9c     24 20 06 F1 | 	add	local02, #36
23ca0     10 15 02 FB | 	rdlong	arg02, local02
23ca4     24 20 86 F1 | 	sub	local02, #36
23ca8     14 15 02 F1 | 	add	arg02, local06
23cac     DC FC BF FD | 	call	#_fatfs_cc_move_window
23cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
23cb4     20 00 90 5D |  if_ne	jmp	#LR__3687
23cb8     34 20 06 F1 | 	add	local02, #52
23cbc     02 1E 66 F0 | 	shl	local01, #2
23cc0     FF 1F 06 F5 | 	and	local01, #511
23cc4     0F 21 02 F1 | 	add	local02, local01
23cc8                 | ' {
23cc8                 | ' 
23cc8                 | ' 	return *((DWORD*)ptr);
23cc8     10 25 02 FB | 	rdlong	local04, local02
23ccc     7C 24 06 F4 | 	bitl	local04, #124
23cd0                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
23cd0                 | ' 			break;
23cd0     04 00 90 FD | 	jmp	#LR__3687
23cd4                 | LR__3686
23cd4     01 24 06 F6 | 	mov	local04, #1
23cd8                 | LR__3687
23cd8                 | LR__3688
23cd8                 | ' 			val = 1;
23cd8                 | ' 		}
23cd8                 | ' 	}
23cd8                 | ' 
23cd8                 | ' 	return val;
23cd8     12 FB 01 F6 | 	mov	result1, local04
23cdc     A7 F0 03 F6 | 	mov	ptra, fp
23ce0     B2 00 A0 FD | 	call	#popregs_
23ce4                 | _fatfs_cc_get_fat_ret
23ce4     2D 00 64 FD | 	ret
23ce8                 | 
23ce8                 | _fatfs_cc_put_fat
23ce8     08 4A 05 F6 | 	mov	COUNT_, #8
23cec     A8 00 A0 FD | 	call	#pushregs_
23cf0     09 1F 02 F6 | 	mov	local01, arg01
23cf4     0A 21 02 F6 | 	mov	local02, arg02
23cf8     0B 23 02 F6 | 	mov	local03, arg03
23cfc     02 24 06 F6 | 	mov	local04, #2
23d00     02 20 16 F2 | 	cmp	local02, #2 wc
23d04     E0 01 90 CD |  if_b	jmp	#LR__3697
23d08     18 1E 06 F1 | 	add	local01, #24
23d0c     0F 27 02 FB | 	rdlong	local05, local01
23d10     18 1E 86 F1 | 	sub	local01, #24
23d14     13 21 12 F2 | 	cmp	local02, local05 wc
23d18     CC 01 90 3D |  if_ae	jmp	#LR__3697
23d1c                 | ' 		switch (fs->fs_type) {
23d1c     0F 29 C2 FA | 	rdbyte	local06, local01
23d20     01 28 86 F1 | 	sub	local06, #1
23d24     03 28 26 F3 | 	fle	local06, #3
23d28     30 28 62 FD | 	jmprel	local06
23d2c                 | LR__3690
23d2c     0C 00 90 FD | 	jmp	#LR__3691
23d30     F8 00 90 FD | 	jmp	#LR__3694
23d34     40 01 90 FD | 	jmp	#LR__3695
23d38     AC 01 90 FD | 	jmp	#LR__3696
23d3c                 | LR__3691
23d3c     10 2B 02 F6 | 	mov	local07, local02
23d40     10 27 02 F6 | 	mov	local05, local02
23d44     01 26 46 F0 | 	shr	local05, #1
23d48     13 2B 02 F1 | 	add	local07, local05
23d4c     0F 13 02 F6 | 	mov	arg01, local01
23d50     15 29 02 F6 | 	mov	local06, local07
23d54     09 28 46 F0 | 	shr	local06, #9
23d58     24 1E 06 F1 | 	add	local01, #36
23d5c     0F 15 02 FB | 	rdlong	arg02, local01
23d60     24 1E 86 F1 | 	sub	local01, #36
23d64     14 15 02 F1 | 	add	arg02, local06
23d68     20 FC BF FD | 	call	#_fatfs_cc_move_window
23d6c     FD 24 0A F6 | 	mov	local04, result1 wz
23d70     74 01 90 5D |  if_ne	jmp	#LR__3696
23d74     34 1E 06 F1 | 	add	local01, #52
23d78     0F 2D 02 F6 | 	mov	local08, local01
23d7c     15 27 02 F6 | 	mov	local05, local07
23d80     FF 27 06 F5 | 	and	local05, #511
23d84     13 2D 02 F1 | 	add	local08, local05
23d88     01 20 CE F7 | 	test	local02, #1 wz
23d8c     34 1E 86 F1 | 	sub	local01, #52
23d90     01 2A 06 F1 | 	add	local07, #1
23d94     18 00 90 AD |  if_e	jmp	#LR__3692
23d98     16 27 C2 FA | 	rdbyte	local05, local08
23d9c     13 27 42 F8 | 	getnib	local05, local05, #0
23da0     11 29 E2 F8 | 	getbyte	local06, local03, #0
23da4     04 28 66 F0 | 	shl	local06, #4
23da8     14 27 42 F5 | 	or	local05, local06
23dac     04 00 90 FD | 	jmp	#LR__3693
23db0                 | LR__3692
23db0     11 27 02 F6 | 	mov	local05, local03
23db4                 | LR__3693
23db4     16 27 42 FC | 	wrbyte	local05, local08
23db8     03 1E 06 F1 | 	add	local01, #3
23dbc     0F 03 48 FC | 	wrbyte	#1, local01
23dc0     03 1E 86 F1 | 	sub	local01, #3
23dc4     0F 13 02 F6 | 	mov	arg01, local01
23dc8     15 2D 02 F6 | 	mov	local08, local07
23dcc     09 2C 46 F0 | 	shr	local08, #9
23dd0     24 1E 06 F1 | 	add	local01, #36
23dd4     0F 15 02 FB | 	rdlong	arg02, local01
23dd8     24 1E 86 F1 | 	sub	local01, #36
23ddc     16 15 02 F1 | 	add	arg02, local08
23de0     A8 FB BF FD | 	call	#_fatfs_cc_move_window
23de4     FD 24 0A F6 | 	mov	local04, result1 wz
23de8     FC 00 90 5D |  if_ne	jmp	#LR__3696
23dec     34 1E 06 F1 | 	add	local01, #52
23df0     0F 2D 02 F6 | 	mov	local08, local01
23df4     FF 2B 06 F5 | 	and	local07, #511
23df8     15 2D 02 F1 | 	add	local08, local07
23dfc     01 20 CE F7 | 	test	local02, #1 wz
23e00     04 22 46 50 |  if_ne	shr	local03, #4
23e04     11 27 02 56 |  if_ne	mov	local05, local03
23e08     16 27 C2 AA |  if_e	rdbyte	local05, local08
23e0c     F0 26 06 A5 |  if_e	and	local05, #240
23e10     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
23e14     11 23 42 A8 |  if_e	getnib	local03, local03, #0
23e18     11 27 42 A5 |  if_e	or	local05, local03
23e1c     16 27 42 FC | 	wrbyte	local05, local08
23e20     31 1E 86 F1 | 	sub	local01, #49
23e24     0F 03 48 FC | 	wrbyte	#1, local01
23e28                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
23e28                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
23e28                 | ' 			fs->wflag = 1;
23e28                 | ' 			break;
23e28     BC 00 90 FD | 	jmp	#LR__3696
23e2c                 | LR__3694
23e2c     0F 13 02 F6 | 	mov	arg01, local01
23e30     10 2D 02 F6 | 	mov	local08, local02
23e34     08 2C 46 F0 | 	shr	local08, #8
23e38     24 1E 06 F1 | 	add	local01, #36
23e3c     0F 15 02 FB | 	rdlong	arg02, local01
23e40     24 1E 86 F1 | 	sub	local01, #36
23e44     16 15 02 F1 | 	add	arg02, local08
23e48     40 FB BF FD | 	call	#_fatfs_cc_move_window
23e4c     FD 24 0A F6 | 	mov	local04, result1 wz
23e50     94 00 90 5D |  if_ne	jmp	#LR__3696
23e54     34 1E 06 F1 | 	add	local01, #52
23e58     0F 13 02 F6 | 	mov	arg01, local01
23e5c     01 20 66 F0 | 	shl	local02, #1
23e60     FF 21 06 F5 | 	and	local02, #511
23e64     10 13 02 F1 | 	add	arg01, local02
23e68     09 23 52 FC | 	wrword	local03, arg01
23e6c     31 1E 86 F1 | 	sub	local01, #49
23e70     0F 03 48 FC | 	wrbyte	#1, local01
23e74                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
23e74                 | ' 			fs->wflag = 1;
23e74                 | ' 			break;
23e74     70 00 90 FD | 	jmp	#LR__3696
23e78                 | LR__3695
23e78     0F 13 02 F6 | 	mov	arg01, local01
23e7c     10 2D 02 F6 | 	mov	local08, local02
23e80     07 2C 46 F0 | 	shr	local08, #7
23e84     24 1E 06 F1 | 	add	local01, #36
23e88     0F 15 02 FB | 	rdlong	arg02, local01
23e8c     24 1E 86 F1 | 	sub	local01, #36
23e90     16 15 02 F1 | 	add	arg02, local08
23e94     F4 FA BF FD | 	call	#_fatfs_cc_move_window
23e98     FD 24 0A F6 | 	mov	local04, result1 wz
23e9c     48 00 90 5D |  if_ne	jmp	#LR__3696
23ea0     7C 22 06 F4 | 	bitl	local03, #124
23ea4     34 1E 06 F1 | 	add	local01, #52
23ea8     10 2D 02 F6 | 	mov	local08, local02
23eac     02 2C 66 F0 | 	shl	local08, #2
23eb0     FF 2D 06 F5 | 	and	local08, #511
23eb4     0F 13 02 F6 | 	mov	arg01, local01
23eb8     16 13 02 F1 | 	add	arg01, local08
23ebc                 | ' {
23ebc                 | ' 
23ebc                 | ' 	return *((DWORD*)ptr);
23ebc     09 2D 02 FB | 	rdlong	local08, arg01
23ec0     00 00 78 FF 
23ec4     00 2C 06 F5 | 	and	local08, ##-268435456
23ec8     16 23 42 F5 | 	or	local03, local08
23ecc     0F 13 02 F6 | 	mov	arg01, local01
23ed0     02 20 66 F0 | 	shl	local02, #2
23ed4     FF 21 06 F5 | 	and	local02, #511
23ed8     10 13 02 F1 | 	add	arg01, local02
23edc     09 23 62 FC | 	wrlong	local03, arg01
23ee0     31 1E 86 F1 | 	sub	local01, #49
23ee4     0F 03 48 FC | 	wrbyte	#1, local01
23ee8                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
23ee8                 | ' 			}
23ee8                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
23ee8                 | ' 			fs->wflag = 1;
23ee8                 | ' 			break;
23ee8                 | LR__3696
23ee8                 | LR__3697
23ee8                 | ' 		}
23ee8                 | ' 	}
23ee8                 | ' 	return res;
23ee8     12 FB 01 F6 | 	mov	result1, local04
23eec     A7 F0 03 F6 | 	mov	ptra, fp
23ef0     B2 00 A0 FD | 	call	#popregs_
23ef4                 | _fatfs_cc_put_fat_ret
23ef4     2D 00 64 FD | 	ret
23ef8                 | 
23ef8                 | _fatfs_cc_remove_chain
23ef8     05 4A 05 F6 | 	mov	COUNT_, #5
23efc     A8 00 A0 FD | 	call	#pushregs_
23f00     09 1F 02 F6 | 	mov	local01, arg01
23f04     0A 21 02 F6 | 	mov	local02, arg02
23f08     0B 23 02 F6 | 	mov	local03, arg03
23f0c     0F 25 02 FB | 	rdlong	local04, local01
23f10     02 20 16 F2 | 	cmp	local02, #2 wc
23f14     14 00 90 CD |  if_b	jmp	#LR__3700
23f18     18 24 06 F1 | 	add	local04, #24
23f1c     12 FB 01 FB | 	rdlong	result1, local04
23f20     18 24 86 F1 | 	sub	local04, #24
23f24     FD 20 12 F2 | 	cmp	local02, result1 wc
23f28     08 00 90 CD |  if_b	jmp	#LR__3701
23f2c                 | LR__3700
23f2c     02 FA 05 F6 | 	mov	result1, #2
23f30     CC 00 90 FD | 	jmp	#LR__3706
23f34                 | LR__3701
23f34     00 22 0E F2 | 	cmp	local03, #0 wz
23f38     18 00 90 AD |  if_e	jmp	#LR__3702
23f3c     11 15 02 F6 | 	mov	arg02, local03
23f40     12 13 02 F6 | 	mov	arg01, local04
23f44     01 16 66 F6 | 	neg	arg03, #1
23f48     9C FD BF FD | 	call	#_fatfs_cc_put_fat
23f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
23f50     AC 00 90 5D |  if_ne	jmp	#LR__3706
23f54                 | LR__3702
23f54                 | ' 	}
23f54                 | ' 
23f54                 | ' 
23f54                 | ' 	do {
23f54                 | LR__3703
23f54     10 15 02 F6 | 	mov	arg02, local02
23f58     0F 13 02 F6 | 	mov	arg01, local01
23f5c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
23f60     FD 26 0A F6 | 	mov	local05, result1 wz
23f64     94 00 90 AD |  if_e	jmp	#LR__3705
23f68     01 26 0E F2 | 	cmp	local05, #1 wz
23f6c     02 FA 05 A6 |  if_e	mov	result1, #2
23f70     8C 00 90 AD |  if_e	jmp	#LR__3706
23f74     FF FF 7F FF 
23f78     FF 27 0E F2 | 	cmp	local05, ##-1 wz
23f7c     01 FA 05 A6 |  if_e	mov	result1, #1
23f80     7C 00 90 AD |  if_e	jmp	#LR__3706
23f84     10 15 02 F6 | 	mov	arg02, local02
23f88     12 13 02 F6 | 	mov	arg01, local04
23f8c     00 16 06 F6 | 	mov	arg03, #0
23f90     54 FD BF FD | 	call	#_fatfs_cc_put_fat
23f94     FD 22 0A F6 | 	mov	local03, result1 wz
23f98     11 FB 01 56 |  if_ne	mov	result1, local03
23f9c     60 00 90 5D |  if_ne	jmp	#LR__3706
23fa0     18 24 06 F1 | 	add	local04, #24
23fa4     12 23 02 FB | 	rdlong	local03, local04
23fa8     02 22 86 F1 | 	sub	local03, #2
23fac     04 24 86 F1 | 	sub	local04, #4
23fb0     12 21 02 FB | 	rdlong	local02, local04
23fb4     14 24 86 F1 | 	sub	local04, #20
23fb8     11 21 12 F2 | 	cmp	local02, local03 wc
23fbc     24 00 90 3D |  if_ae	jmp	#LR__3704
23fc0     14 24 06 F1 | 	add	local04, #20
23fc4     12 23 02 FB | 	rdlong	local03, local04
23fc8     01 22 06 F1 | 	add	local03, #1
23fcc     12 23 62 FC | 	wrlong	local03, local04
23fd0     10 24 86 F1 | 	sub	local04, #16
23fd4     12 23 C2 FA | 	rdbyte	local03, local04
23fd8     01 22 46 F5 | 	or	local03, #1
23fdc     12 23 42 FC | 	wrbyte	local03, local04
23fe0     04 24 86 F1 | 	sub	local04, #4
23fe4                 | LR__3704
23fe4     13 21 02 F6 | 	mov	local02, local05
23fe8     18 24 06 F1 | 	add	local04, #24
23fec     12 27 02 FB | 	rdlong	local05, local04
23ff0     18 24 86 F1 | 	sub	local04, #24
23ff4     13 21 12 F2 | 	cmp	local02, local05 wc
23ff8     58 FF 9F CD |  if_b	jmp	#LR__3703
23ffc                 | LR__3705
23ffc                 | ' #line 1500 "ff.c"
23ffc                 | ' 	return FR_OK;
23ffc     00 FA 05 F6 | 	mov	result1, #0
24000                 | LR__3706
24000     A7 F0 03 F6 | 	mov	ptra, fp
24004     B2 00 A0 FD | 	call	#popregs_
24008                 | _fatfs_cc_remove_chain_ret
24008     2D 00 64 FD | 	ret
2400c                 | 
2400c                 | _fatfs_cc_create_chain
2400c     09 4A 05 F6 | 	mov	COUNT_, #9
24010     A8 00 A0 FD | 	call	#pushregs_
24014     09 1F 02 F6 | 	mov	local01, arg01
24018     0A 21 0A F6 | 	mov	local02, arg02 wz
2401c     0F 23 02 FB | 	rdlong	local03, local01
24020     28 00 90 5D |  if_ne	jmp	#LR__3710
24024     10 22 06 F1 | 	add	local03, #16
24028     11 25 0A FB | 	rdlong	local04, local03 wz
2402c     10 22 86 F1 | 	sub	local03, #16
24030     18 22 06 51 |  if_ne	add	local03, #24
24034     11 27 02 5B |  if_ne	rdlong	local05, local03
24038     18 22 86 51 |  if_ne	sub	local03, #24
2403c     13 25 12 52 |  if_ne	cmp	local04, local05 wc
24040     50 00 90 4D |  if_c_and_nz	jmp	#LR__3711
24044     01 24 06 F6 | 	mov	local04, #1
24048     48 00 90 FD | 	jmp	#LR__3711
2404c                 | LR__3710
2404c     10 15 02 F6 | 	mov	arg02, local02
24050     0F 13 02 F6 | 	mov	arg01, local01
24054     EC FA BF FD | 	call	#_fatfs_cc_get_fat
24058     FD 24 02 F6 | 	mov	local04, result1
2405c     02 24 16 F2 | 	cmp	local04, #2 wc
24060     01 FA 05 C6 |  if_b	mov	result1, #1
24064     BC 01 90 CD |  if_b	jmp	#LR__3721
24068     FF FF 7F FF 
2406c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
24070     12 FB 01 A6 |  if_e	mov	result1, local04
24074     AC 01 90 AD |  if_e	jmp	#LR__3721
24078     18 22 06 F1 | 	add	local03, #24
2407c     11 27 02 FB | 	rdlong	local05, local03
24080     18 22 86 F1 | 	sub	local03, #24
24084     13 25 12 F2 | 	cmp	local04, local05 wc
24088     12 FB 01 C6 |  if_b	mov	result1, local04
2408c     94 01 90 CD |  if_b	jmp	#LR__3721
24090     10 25 02 F6 | 	mov	local04, local02
24094                 | LR__3711
24094     14 22 06 F1 | 	add	local03, #20
24098     11 27 0A FB | 	rdlong	local05, local03 wz
2409c     14 22 86 F1 | 	sub	local03, #20
240a0     00 FA 05 A6 |  if_e	mov	result1, #0
240a4     7C 01 90 AD |  if_e	jmp	#LR__3721
240a8     00 28 06 F6 | 	mov	local06, #0
240ac     10 25 0A F2 | 	cmp	local04, local02 wz
240b0     74 00 90 5D |  if_ne	jmp	#LR__3714
240b4     12 29 02 F6 | 	mov	local06, local04
240b8     01 28 06 F1 | 	add	local06, #1
240bc     18 22 06 F1 | 	add	local03, #24
240c0     11 27 02 FB | 	rdlong	local05, local03
240c4     18 22 86 F1 | 	sub	local03, #24
240c8     13 29 12 F2 | 	cmp	local06, local05 wc
240cc     02 28 06 36 |  if_ae	mov	local06, #2
240d0     14 15 02 F6 | 	mov	arg02, local06
240d4     0F 13 02 F6 | 	mov	arg01, local01
240d8     68 FA BF FD | 	call	#_fatfs_cc_get_fat
240dc     FD 26 02 F6 | 	mov	local05, result1
240e0     01 26 0E F2 | 	cmp	local05, #1 wz
240e4     FF FF 7F 5F 
240e8     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
240ec     13 FB 01 A6 |  if_e	mov	result1, local05
240f0     30 01 90 AD |  if_e	jmp	#LR__3721
240f4     00 26 0E F2 | 	cmp	local05, #0 wz
240f8     2C 00 90 AD |  if_e	jmp	#LR__3713
240fc     10 22 06 F1 | 	add	local03, #16
24100     11 2B 02 FB | 	rdlong	local07, local03
24104     10 22 86 F1 | 	sub	local03, #16
24108     02 2A 16 F2 | 	cmp	local07, #2 wc
2410c     14 00 90 CD |  if_b	jmp	#LR__3712
24110     18 22 06 F1 | 	add	local03, #24
24114     11 27 02 FB | 	rdlong	local05, local03
24118     18 22 86 F1 | 	sub	local03, #24
2411c     13 2B 12 F2 | 	cmp	local07, local05 wc
24120     15 25 02 C6 |  if_b	mov	local04, local07
24124                 | LR__3712
24124     00 28 06 F6 | 	mov	local06, #0
24128                 | LR__3713
24128                 | LR__3714
24128     00 28 0E F2 | 	cmp	local06, #0 wz
2412c     60 00 90 5D |  if_ne	jmp	#LR__3717
24130     12 29 02 F6 | 	mov	local06, local04
24134                 | ' 			ncl = scl;
24134                 | ' 			for (;;) {
24134                 | LR__3715
24134     01 28 06 F1 | 	add	local06, #1
24138     18 22 06 F1 | 	add	local03, #24
2413c     11 27 02 FB | 	rdlong	local05, local03
24140     18 22 86 F1 | 	sub	local03, #24
24144     13 29 12 F2 | 	cmp	local06, local05 wc
24148     02 28 06 36 |  if_ae	mov	local06, #2
2414c     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
24150     00 FA 05 16 |  if_a	mov	result1, #0
24154     CC 00 90 1D |  if_a	jmp	#LR__3721
24158     14 15 02 F6 | 	mov	arg02, local06
2415c     0F 13 02 F6 | 	mov	arg01, local01
24160     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
24164     FD 2A 0A F6 | 	mov	local07, result1 wz
24168     24 00 90 AD |  if_e	jmp	#LR__3716
2416c     01 2A 0E F2 | 	cmp	local07, #1 wz
24170     FF FF 7F 5F 
24174     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
24178     15 FB 01 A6 |  if_e	mov	result1, local07
2417c     A4 00 90 AD |  if_e	jmp	#LR__3721
24180     12 29 0A F2 | 	cmp	local06, local04 wz
24184     00 FA 05 A6 |  if_e	mov	result1, #0
24188     98 00 90 AD |  if_e	jmp	#LR__3721
2418c     A4 FF 9F FD | 	jmp	#LR__3715
24190                 | LR__3716
24190                 | LR__3717
24190     11 13 02 F6 | 	mov	arg01, local03
24194     14 15 02 F6 | 	mov	arg02, local06
24198     01 16 66 F6 | 	neg	arg03, #1
2419c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
241a0     FD 2C 0A F6 | 	mov	local08, result1 wz
241a4     1C 00 90 5D |  if_ne	jmp	#LR__3718
241a8     00 20 0E F2 | 	cmp	local02, #0 wz
241ac     14 00 90 AD |  if_e	jmp	#LR__3718
241b0     11 13 02 F6 | 	mov	arg01, local03
241b4     10 15 02 F6 | 	mov	arg02, local02
241b8     14 17 02 F6 | 	mov	arg03, local06
241bc     28 FB BF FD | 	call	#_fatfs_cc_put_fat
241c0     FD 2C 02 F6 | 	mov	local08, result1
241c4                 | LR__3718
241c4     00 2C 0E F2 | 	cmp	local08, #0 wz
241c8     4C 00 90 5D |  if_ne	jmp	#LR__3719
241cc     10 22 06 F1 | 	add	local03, #16
241d0     11 29 62 FC | 	wrlong	local06, local03
241d4     08 22 06 F1 | 	add	local03, #8
241d8     11 27 02 FB | 	rdlong	local05, local03
241dc     02 26 86 F1 | 	sub	local05, #2
241e0     04 22 86 F1 | 	sub	local03, #4
241e4     11 2F 02 FB | 	rdlong	local09, local03
241e8     14 22 86 F1 | 	sub	local03, #20
241ec     13 2F 1A F2 | 	cmp	local09, local05 wcz
241f0     14 22 06 E1 |  if_be	add	local03, #20
241f4     11 2F 02 EB |  if_be	rdlong	local09, local03
241f8     01 2E 86 E1 |  if_be	sub	local09, #1
241fc     11 2F 62 EC |  if_be	wrlong	local09, local03
24200     14 22 86 E1 |  if_be	sub	local03, #20
24204     04 22 06 F1 | 	add	local03, #4
24208     11 27 C2 FA | 	rdbyte	local05, local03
2420c     01 26 46 F5 | 	or	local05, #1
24210     11 27 42 FC | 	wrbyte	local05, local03
24214     08 00 90 FD | 	jmp	#LR__3720
24218                 | LR__3719
24218     01 2C 0E F2 | 	cmp	local08, #1 wz
2421c     01 28 C6 F6 | 	negz	local06, #1
24220                 | LR__3720
24220                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
24220                 | ' 	}
24220                 | ' 
24220                 | ' 	return ncl;
24220     14 FB 01 F6 | 	mov	result1, local06
24224                 | LR__3721
24224     A7 F0 03 F6 | 	mov	ptra, fp
24228     B2 00 A0 FD | 	call	#popregs_
2422c                 | _fatfs_cc_create_chain_ret
2422c     2D 00 64 FD | 	ret
24230                 | 
24230                 | _fatfs_cc_dir_clear
24230     06 4A 05 F6 | 	mov	COUNT_, #6
24234     A8 00 A0 FD | 	call	#pushregs_
24238     09 1F 02 F6 | 	mov	local01, arg01
2423c     0A 21 02 F6 | 	mov	local02, arg02
24240     0F 13 02 F6 | 	mov	arg01, local01
24244     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
24248     00 FA 0D F2 | 	cmp	result1, #0 wz
2424c     01 FA 05 56 |  if_ne	mov	result1, #1
24250     90 00 90 5D |  if_ne	jmp	#LR__3732
24254     0F 13 02 F6 | 	mov	arg01, local01
24258     10 15 02 F6 | 	mov	arg02, local02
2425c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
24260     FD 22 02 F6 | 	mov	local03, result1
24264     30 1E 06 F1 | 	add	local01, #48
24268     0F 23 62 FC | 	wrlong	local03, local01
2426c     04 1E 06 F1 | 	add	local01, #4
24270     0F 13 02 F6 | 	mov	arg01, local01
24274     00 14 06 F6 | 	mov	arg02, #0
24278     09 16 C6 F9 | 	decod	arg03, #9
2427c     98 00 A0 FD | 	call	#\builtin_bytefill_
24280     0F 25 02 F6 | 	mov	local04, local01
24284                 | ' #line 1667 "ff.c"
24284                 | ' 	{
24284                 | ' 		ibuf = fs->win; szb = 1;
24284                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
24284     00 26 06 F6 | 	mov	local05, #0
24288     34 1E 86 F1 | 	sub	local01, #52
2428c                 | LR__3730
2428c     0A 1E 06 F1 | 	add	local01, #10
24290     0F 29 E2 FA | 	rdword	local06, local01
24294     0A 1E 86 F1 | 	sub	local01, #10
24298     14 27 12 F2 | 	cmp	local05, local06 wc
2429c     2C 00 90 3D |  if_ae	jmp	#LR__3731
242a0     01 1E 06 F1 | 	add	local01, #1
242a4     0F 13 C2 FA | 	rdbyte	arg01, local01
242a8     01 1E 86 F1 | 	sub	local01, #1
242ac     12 15 02 F6 | 	mov	arg02, local04
242b0     11 17 02 F6 | 	mov	arg03, local03
242b4     13 17 02 F1 | 	add	arg03, local05
242b8     01 18 06 F6 | 	mov	arg04, #1
242bc     9C EF BF FD | 	call	#_fatfs_cc_disk_write
242c0     00 FA 0D F2 | 	cmp	result1, #0 wz
242c4     01 26 06 A1 |  if_e	add	local05, #1
242c8     C0 FF 9F AD |  if_e	jmp	#LR__3730
242cc                 | LR__3731
242cc                 | ' 	}
242cc                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
242cc     0A 1E 06 F1 | 	add	local01, #10
242d0     0F 25 E2 FA | 	rdword	local04, local01
242d4     12 27 0A F2 | 	cmp	local05, local04 wz
242d8     00 28 06 A6 |  if_e	mov	local06, #0
242dc     01 28 06 56 |  if_ne	mov	local06, #1
242e0     14 FB 01 F6 | 	mov	result1, local06
242e4                 | LR__3732
242e4     A7 F0 03 F6 | 	mov	ptra, fp
242e8     B2 00 A0 FD | 	call	#popregs_
242ec                 | _fatfs_cc_dir_clear_ret
242ec     2D 00 64 FD | 	ret
242f0                 | 
242f0                 | _fatfs_cc_dir_sdi
242f0     06 4A 05 F6 | 	mov	COUNT_, #6
242f4     A8 00 A0 FD | 	call	#pushregs_
242f8     09 1F 02 F6 | 	mov	local01, arg01
242fc     0A 21 02 F6 | 	mov	local02, arg02
24300     0F 23 02 FB | 	rdlong	local03, local01
24304     00 10 00 FF 
24308     00 20 16 F2 | 	cmp	local02, ##2097152 wc
2430c     1F 20 CE C7 |  if_b	test	local02, #31 wz
24310                 | ' 		return FR_INT_ERR;
24310     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
24314     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3746
24318     10 1E 06 F1 | 	add	local01, #16
2431c     0F 21 62 FC | 	wrlong	local02, local01
24320     08 1E 86 F1 | 	sub	local01, #8
24324     0F 25 0A FB | 	rdlong	local04, local01 wz
24328     08 1E 86 F1 | 	sub	local01, #8
2432c     11 27 C2 AA |  if_e	rdbyte	local05, local03
24330     03 26 16 A2 |  if_e	cmp	local05, #3 wc
24334     28 22 06 21 |  if_nc_and_z	add	local03, #40
24338     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
2433c     28 22 86 21 |  if_nc_and_z	sub	local03, #40
24340     00 24 0E F2 | 	cmp	local04, #0 wz
24344     3C 00 90 5D |  if_ne	jmp	#LR__3740
24348     10 27 02 F6 | 	mov	local05, local02
2434c     05 26 46 F0 | 	shr	local05, #5
24350     08 22 06 F1 | 	add	local03, #8
24354     11 15 E2 FA | 	rdword	arg02, local03
24358     08 22 86 F1 | 	sub	local03, #8
2435c     0A 27 12 F2 | 	cmp	local05, arg02 wc
24360     02 FA 05 36 |  if_ae	mov	result1, #2
24364     E4 00 90 3D |  if_ae	jmp	#LR__3746
24368     28 22 06 F1 | 	add	local03, #40
2436c     11 27 02 FB | 	rdlong	local05, local03
24370     28 22 86 F1 | 	sub	local03, #40
24374     18 1E 06 F1 | 	add	local01, #24
24378     0F 27 62 FC | 	wrlong	local05, local01
2437c     18 1E 86 F1 | 	sub	local01, #24
24380     7C 00 90 FD | 	jmp	#LR__3745
24384                 | LR__3740
24384     0A 22 06 F1 | 	add	local03, #10
24388     11 29 E2 FA | 	rdword	local06, local03
2438c     0A 22 86 F1 | 	sub	local03, #10
24390     09 28 66 F0 | 	shl	local06, #9
24394                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
24394                 | ' 		while (ofs >= csz) {
24394                 | LR__3741
24394     14 21 12 F2 | 	cmp	local02, local06 wc
24398     4C 00 90 CD |  if_b	jmp	#LR__3744
2439c     0F 13 02 F6 | 	mov	arg01, local01
243a0     12 15 02 F6 | 	mov	arg02, local04
243a4     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
243a8     FD 24 02 F6 | 	mov	local04, result1
243ac     FF FF 7F FF 
243b0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
243b4     01 FA 05 A6 |  if_e	mov	result1, #1
243b8     90 00 90 AD |  if_e	jmp	#LR__3746
243bc     02 24 16 F2 | 	cmp	local04, #2 wc
243c0     14 00 90 CD |  if_b	jmp	#LR__3742
243c4     18 22 06 F1 | 	add	local03, #24
243c8     11 27 02 FB | 	rdlong	local05, local03
243cc     18 22 86 F1 | 	sub	local03, #24
243d0     13 25 12 F2 | 	cmp	local04, local05 wc
243d4     08 00 90 CD |  if_b	jmp	#LR__3743
243d8                 | LR__3742
243d8     02 FA 05 F6 | 	mov	result1, #2
243dc     6C 00 90 FD | 	jmp	#LR__3746
243e0                 | LR__3743
243e0     14 21 82 F1 | 	sub	local02, local06
243e4     AC FF 9F FD | 	jmp	#LR__3741
243e8                 | LR__3744
243e8     11 13 02 F6 | 	mov	arg01, local03
243ec     12 15 02 F6 | 	mov	arg02, local04
243f0     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
243f4     18 1E 06 F1 | 	add	local01, #24
243f8     0F FB 61 FC | 	wrlong	result1, local01
243fc     18 1E 86 F1 | 	sub	local01, #24
24400                 | LR__3745
24400     14 1E 06 F1 | 	add	local01, #20
24404     0F 25 62 FC | 	wrlong	local04, local01
24408     04 1E 06 F1 | 	add	local01, #4
2440c     0F 27 0A FB | 	rdlong	local05, local01 wz
24410     18 1E 86 F1 | 	sub	local01, #24
24414     02 FA 05 A6 |  if_e	mov	result1, #2
24418     30 00 90 AD |  if_e	jmp	#LR__3746
2441c     10 29 02 F6 | 	mov	local06, local02
24420     09 28 46 F0 | 	shr	local06, #9
24424     18 1E 06 F1 | 	add	local01, #24
24428     0F 27 02 FB | 	rdlong	local05, local01
2442c     14 27 02 F1 | 	add	local05, local06
24430     0F 27 62 FC | 	wrlong	local05, local01
24434     34 22 06 F1 | 	add	local03, #52
24438     FF 21 06 F5 | 	and	local02, #511
2443c     10 23 02 F1 | 	add	local03, local02
24440     04 1E 06 F1 | 	add	local01, #4
24444     0F 23 62 FC | 	wrlong	local03, local01
24448                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
24448                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
24448                 | ' 
24448                 | ' 	return FR_OK;
24448     00 FA 05 F6 | 	mov	result1, #0
2444c                 | LR__3746
2444c     A7 F0 03 F6 | 	mov	ptra, fp
24450     B2 00 A0 FD | 	call	#popregs_
24454                 | _fatfs_cc_dir_sdi_ret
24454     2D 00 64 FD | 	ret
24458                 | 
24458                 | _fatfs_cc_dir_next
24458     05 4A 05 F6 | 	mov	COUNT_, #5
2445c     A8 00 A0 FD | 	call	#pushregs_
24460     09 1F 02 F6 | 	mov	local01, arg01
24464     0A 21 02 F6 | 	mov	local02, arg02
24468     0F 23 02 FB | 	rdlong	local03, local01
2446c     10 1E 06 F1 | 	add	local01, #16
24470     0F 25 02 FB | 	rdlong	local04, local01
24474     10 1E 86 F1 | 	sub	local01, #16
24478     20 24 06 F1 | 	add	local04, #32
2447c     00 10 00 FF 
24480     00 24 16 F2 | 	cmp	local04, ##2097152 wc
24484     18 1E 06 31 |  if_ae	add	local01, #24
24488     0F 01 68 3C |  if_ae	wrlong	#0, local01
2448c     18 1E 86 31 |  if_ae	sub	local01, #24
24490     18 1E 06 F1 | 	add	local01, #24
24494     0F 15 0A FB | 	rdlong	arg02, local01 wz
24498     18 1E 86 F1 | 	sub	local01, #24
2449c     04 FA 05 A6 |  if_e	mov	result1, #4
244a0     64 01 90 AD |  if_e	jmp	#LR__3755
244a4     FF 25 CE F7 | 	test	local04, #511 wz
244a8     3C 01 90 5D |  if_ne	jmp	#LR__3754
244ac     18 1E 06 F1 | 	add	local01, #24
244b0     0F 15 02 FB | 	rdlong	arg02, local01
244b4     01 14 06 F1 | 	add	arg02, #1
244b8     0F 15 62 FC | 	wrlong	arg02, local01
244bc     04 1E 86 F1 | 	sub	local01, #4
244c0     0F 15 0A FB | 	rdlong	arg02, local01 wz
244c4     14 1E 86 F1 | 	sub	local01, #20
244c8     2C 00 90 5D |  if_ne	jmp	#LR__3750
244cc     12 15 02 F6 | 	mov	arg02, local04
244d0     05 14 46 F0 | 	shr	arg02, #5
244d4     08 22 06 F1 | 	add	local03, #8
244d8     11 21 E2 FA | 	rdword	local02, local03
244dc     08 22 86 F1 | 	sub	local03, #8
244e0     10 15 12 F2 | 	cmp	arg02, local02 wc
244e4     18 1E 06 31 |  if_ae	add	local01, #24
244e8     0F 01 68 3C |  if_ae	wrlong	#0, local01
244ec                 | ' 				dp->sect = 0; return FR_NO_FILE;
244ec     04 FA 05 36 |  if_ae	mov	result1, #4
244f0     14 01 90 3D |  if_ae	jmp	#LR__3755
244f4     F0 00 90 FD | 	jmp	#LR__3753
244f8                 | LR__3750
244f8     12 13 02 F6 | 	mov	arg01, local04
244fc     09 12 46 F0 | 	shr	arg01, #9
24500     0A 22 06 F1 | 	add	local03, #10
24504     11 15 E2 FA | 	rdword	arg02, local03
24508     0A 22 86 F1 | 	sub	local03, #10
2450c     01 14 86 F1 | 	sub	arg02, #1
24510     0A 13 CA F7 | 	test	arg01, arg02 wz
24514     D0 00 90 5D |  if_ne	jmp	#LR__3752
24518     0F 13 02 F6 | 	mov	arg01, local01
2451c     14 1E 06 F1 | 	add	local01, #20
24520     0F 15 02 FB | 	rdlong	arg02, local01
24524     14 1E 86 F1 | 	sub	local01, #20
24528     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2452c     FD 26 02 F6 | 	mov	local05, result1
24530     02 26 16 F2 | 	cmp	local05, #2 wc
24534     02 FA 05 C6 |  if_b	mov	result1, #2
24538     CC 00 90 CD |  if_b	jmp	#LR__3755
2453c     FF FF 7F FF 
24540     FF 27 0E F2 | 	cmp	local05, ##-1 wz
24544     01 FA 05 A6 |  if_e	mov	result1, #1
24548     BC 00 90 AD |  if_e	jmp	#LR__3755
2454c     18 22 06 F1 | 	add	local03, #24
24550     11 15 02 FB | 	rdlong	arg02, local03
24554     18 22 86 F1 | 	sub	local03, #24
24558     0A 27 12 F2 | 	cmp	local05, arg02 wc
2455c     68 00 90 CD |  if_b	jmp	#LR__3751
24560     00 20 0E F2 | 	cmp	local02, #0 wz
24564     18 1E 06 A1 |  if_e	add	local01, #24
24568     0F 01 68 AC |  if_e	wrlong	#0, local01
2456c                 | ' 						dp->sect = 0; return FR_NO_FILE;
2456c     04 FA 05 A6 |  if_e	mov	result1, #4
24570     94 00 90 AD |  if_e	jmp	#LR__3755
24574     0F 13 02 F6 | 	mov	arg01, local01
24578     14 1E 06 F1 | 	add	local01, #20
2457c     0F 15 02 FB | 	rdlong	arg02, local01
24580     14 1E 86 F1 | 	sub	local01, #20
24584     84 FA BF FD | 	call	#_fatfs_cc_create_chain
24588     FD 26 0A F6 | 	mov	local05, result1 wz
2458c     07 FA 05 A6 |  if_e	mov	result1, #7
24590     74 00 90 AD |  if_e	jmp	#LR__3755
24594     01 26 0E F2 | 	cmp	local05, #1 wz
24598     02 FA 05 A6 |  if_e	mov	result1, #2
2459c     68 00 90 AD |  if_e	jmp	#LR__3755
245a0     FF FF 7F FF 
245a4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
245a8     01 FA 05 A6 |  if_e	mov	result1, #1
245ac     58 00 90 AD |  if_e	jmp	#LR__3755
245b0     13 15 02 F6 | 	mov	arg02, local05
245b4     11 13 02 F6 | 	mov	arg01, local03
245b8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
245bc     00 FA 0D F2 | 	cmp	result1, #0 wz
245c0     01 FA 05 56 |  if_ne	mov	result1, #1
245c4     40 00 90 5D |  if_ne	jmp	#LR__3755
245c8                 | LR__3751
245c8     14 1E 06 F1 | 	add	local01, #20
245cc     0F 27 62 FC | 	wrlong	local05, local01
245d0     11 13 02 F6 | 	mov	arg01, local03
245d4     13 15 02 F6 | 	mov	arg02, local05
245d8     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
245dc     04 1E 06 F1 | 	add	local01, #4
245e0     0F FB 61 FC | 	wrlong	result1, local01
245e4     18 1E 86 F1 | 	sub	local01, #24
245e8                 | LR__3752
245e8                 | LR__3753
245e8                 | LR__3754
245e8     10 1E 06 F1 | 	add	local01, #16
245ec     0F 25 62 FC | 	wrlong	local04, local01
245f0     34 22 06 F1 | 	add	local03, #52
245f4     FF 25 06 F5 | 	and	local04, #511
245f8     12 23 02 F1 | 	add	local03, local04
245fc     0C 1E 06 F1 | 	add	local01, #12
24600     0F 23 62 FC | 	wrlong	local03, local01
24604                 | ' #line 1771 "ff.c"
24604                 | ' 				}
24604                 | ' 				dp->clust = clst;
24604                 | ' 				dp->sect = clst2sect(fs, clst);
24604                 | ' 			}
24604                 | ' 		}
24604                 | ' 	}
24604                 | ' 	dp->dptr = ofs;
24604                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
24604                 | ' 
24604                 | ' 	return FR_OK;
24604     00 FA 05 F6 | 	mov	result1, #0
24608                 | LR__3755
24608     A7 F0 03 F6 | 	mov	ptra, fp
2460c     B2 00 A0 FD | 	call	#popregs_
24610                 | _fatfs_cc_dir_next_ret
24610     2D 00 64 FD | 	ret
24614                 | 
24614                 | _fatfs_cc_dir_alloc
24614     08 4A 05 F6 | 	mov	COUNT_, #8
24618     A8 00 A0 FD | 	call	#pushregs_
2461c     09 1F 02 F6 | 	mov	local01, arg01
24620     0A 21 02 F6 | 	mov	local02, arg02
24624     0F 23 02 FB | 	rdlong	local03, local01
24628     0F 13 02 F6 | 	mov	arg01, local01
2462c     00 14 06 F6 | 	mov	arg02, #0
24630     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
24634     FD 24 0A F6 | 	mov	local04, result1 wz
24638     70 00 90 5D |  if_ne	jmp	#LR__3764
2463c     00 26 06 F6 | 	mov	local05, #0
24640                 | ' 		n = 0;
24640                 | ' 		do {
24640                 | LR__3760
24640     18 1E 06 F1 | 	add	local01, #24
24644     0F 15 02 FB | 	rdlong	arg02, local01
24648     18 1E 86 F1 | 	sub	local01, #24
2464c     11 13 02 F6 | 	mov	arg01, local03
24650     38 F3 BF FD | 	call	#_fatfs_cc_move_window
24654     FD 24 0A F6 | 	mov	local04, result1 wz
24658     50 00 90 5D |  if_ne	jmp	#LR__3763
2465c     1C 1E 06 F1 | 	add	local01, #28
24660     0F 29 02 FB | 	rdlong	local06, local01
24664     1C 1E 86 F1 | 	sub	local01, #28
24668     14 29 C2 FA | 	rdbyte	local06, local06
2466c     E5 28 0E F2 | 	cmp	local06, #229 wz
24670     1C 1E 06 51 |  if_ne	add	local01, #28
24674     0F 2B 02 5B |  if_ne	rdlong	local07, local01
24678     1C 1E 86 51 |  if_ne	sub	local01, #28
2467c     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
24680     10 00 90 5D |  if_ne	jmp	#LR__3761
24684     01 26 06 F1 | 	add	local05, #1
24688     10 27 0A F2 | 	cmp	local05, local02 wz
2468c     1C 00 90 AD |  if_e	jmp	#LR__3763
24690     04 00 90 FD | 	jmp	#LR__3762
24694                 | LR__3761
24694     00 26 06 F6 | 	mov	local05, #0
24698                 | LR__3762
24698     0F 13 02 F6 | 	mov	arg01, local01
2469c     01 14 06 F6 | 	mov	arg02, #1
246a0     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
246a4     FD 24 0A F6 | 	mov	local04, result1 wz
246a8     94 FF 9F AD |  if_e	jmp	#LR__3760
246ac                 | LR__3763
246ac                 | LR__3764
246ac     04 24 0E F2 | 	cmp	local04, #4 wz
246b0     07 24 06 A6 |  if_e	mov	local04, #7
246b4                 | ' 	return res;
246b4     12 FB 01 F6 | 	mov	result1, local04
246b8     A7 F0 03 F6 | 	mov	ptra, fp
246bc     B2 00 A0 FD | 	call	#popregs_
246c0                 | _fatfs_cc_dir_alloc_ret
246c0     2D 00 64 FD | 	ret
246c4                 | 
246c4                 | _fatfs_cc_ld_clust
246c4     09 01 02 F6 | 	mov	_var01, arg01
246c8     0A 13 02 F6 | 	mov	arg01, arg02
246cc     1A 12 06 F1 | 	add	arg01, #26
246d0                 | ' {
246d0                 | ' 
246d0                 | ' 	return *((WORD*)ptr);
246d0     09 FB E1 FA | 	rdword	result1, arg01
246d4     FD 12 32 F9 | 	getword	arg01, result1, #0
246d8     00 01 C2 FA | 	rdbyte	_var01, _var01
246dc     03 00 0E F2 | 	cmp	_var01, #3 wz
246e0     14 14 06 A1 |  if_e	add	arg02, #20
246e4                 | ' {
246e4                 | ' 
246e4                 | ' 	return *((WORD*)ptr);
246e4     0A FB E1 AA |  if_e	rdword	result1, arg02
246e8     10 FA 65 A0 |  if_e	shl	result1, #16
246ec     FD 12 42 A5 |  if_e	or	arg01, result1
246f0                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
246f0                 | ' 	}
246f0                 | ' 
246f0                 | ' 	return cl;
246f0     09 FB 01 F6 | 	mov	result1, arg01
246f4                 | _fatfs_cc_ld_clust_ret
246f4     2D 00 64 FD | 	ret
246f8                 | 
246f8                 | _fatfs_cc_st_clust
246f8     09 01 02 F6 | 	mov	_var01, arg01
246fc     0A 13 02 F6 | 	mov	arg01, arg02
24700     1A 12 06 F1 | 	add	arg01, #26
24704     09 17 52 FC | 	wrword	arg03, arg01
24708     00 01 C2 FA | 	rdbyte	_var01, _var01
2470c     03 00 0E F2 | 	cmp	_var01, #3 wz
24710     14 14 06 A1 |  if_e	add	arg02, #20
24714     10 16 46 A0 |  if_e	shr	arg03, #16
24718     0A 17 52 AC |  if_e	wrword	arg03, arg02
2471c                 | _fatfs_cc_st_clust_ret
2471c     2D 00 64 FD | 	ret
24720                 | 
24720                 | _fatfs_cc_cmp_lfn
24720     07 4A 05 F6 | 	mov	COUNT_, #7
24724     A8 00 A0 FD | 	call	#pushregs_
24728     09 1F 02 F6 | 	mov	local01, arg01
2472c     0A 13 02 F6 | 	mov	arg01, arg02
24730     1A 12 06 F1 | 	add	arg01, #26
24734                 | ' {
24734                 | ' 
24734                 | ' 	return *((WORD*)ptr);
24734     09 FB E9 FA | 	rdword	result1, arg01 wz
24738     00 FA 05 56 |  if_ne	mov	result1, #0
2473c     E0 00 90 5D |  if_ne	jmp	#LR__3776
24740     0A 21 C2 FA | 	rdbyte	local02, arg02
24744     3F 20 06 F5 | 	and	local02, #63
24748     01 20 86 F1 | 	sub	local02, #1
2474c     0D 20 06 FD | 	qmul	local02, #13
24750                 | ' 
24750                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
24750                 | ' 
24750                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
24750     01 22 06 F6 | 	mov	local03, #1
24754     00 24 06 F6 | 	mov	local04, #0
24758     18 26 62 FD | 	getqx	local05
2475c                 | LR__3770
2475c     0D 24 16 F2 | 	cmp	local04, #13 wc
24760     9C 00 90 3D |  if_ae	jmp	#LR__3775
24764     0A 13 02 F6 | 	mov	arg01, arg02
24768     12 21 02 F6 | 	mov	local02, local04
2476c     01 00 00 FF 
24770     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
24774     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
24778     10 21 C2 FA | 	rdbyte	local02, local02
2477c     01 20 06 FA | 	mul	local02, #1
24780     10 13 02 F1 | 	add	arg01, local02
24784     01 00 00 FF 
24788     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2478c                 | ' {
2478c                 | ' 
2478c                 | ' 	return *((WORD*)ptr);
2478c     09 FB E1 FA | 	rdword	result1, arg01
24790     FD 28 02 F6 | 	mov	local06, result1
24794     11 21 02 F6 | 	mov	local02, local03
24798     0F 20 4E F7 | 	zerox	local02, #15 wz
2479c     44 00 90 AD |  if_e	jmp	#LR__3773
247a0     00 27 16 F2 | 	cmp	local05, #256 wc
247a4     2C 00 90 3D |  if_ae	jmp	#LR__3771
247a8     14 13 32 F9 | 	getword	arg01, local06, #0
247ac     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
247b0     FD 20 02 F6 | 	mov	local02, result1
247b4     13 23 02 F6 | 	mov	local03, local05
247b8     01 22 66 F0 | 	shl	local03, #1
247bc     0F 23 02 F1 | 	add	local03, local01
247c0     11 13 E2 FA | 	rdword	arg01, local03
247c4     01 26 06 F1 | 	add	local05, #1
247c8     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
247cc     FD 20 0A F2 | 	cmp	local02, result1 wz
247d0     08 00 90 AD |  if_e	jmp	#LR__3772
247d4                 | LR__3771
247d4                 | ' 				return 0;
247d4     00 FA 05 F6 | 	mov	result1, #0
247d8     44 00 90 FD | 	jmp	#LR__3776
247dc                 | LR__3772
247dc     14 23 02 F6 | 	mov	local03, local06
247e0     14 00 90 FD | 	jmp	#LR__3774
247e4                 | LR__3773
247e4     14 29 32 F9 | 	getword	local06, local06, #0
247e8     7F 00 00 FF 
247ec     FF 29 0E F2 | 	cmp	local06, ##65535 wz
247f0     00 FA 05 56 |  if_ne	mov	result1, #0
247f4     28 00 90 5D |  if_ne	jmp	#LR__3776
247f8                 | LR__3774
247f8     01 24 06 F1 | 	add	local04, #1
247fc     5C FF 9F FD | 	jmp	#LR__3770
24800                 | LR__3775
24800     0A 21 C2 FA | 	rdbyte	local02, arg02
24804     40 20 CE F7 | 	test	local02, #64 wz
24808     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2480c     01 26 66 50 |  if_ne	shl	local05, #1
24810     0F 27 02 51 |  if_ne	add	local05, local01
24814     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
24818     00 FA 05 56 |  if_ne	mov	result1, #0
2481c                 | ' 
2481c                 | ' 	return 1;
2481c     01 FA 05 A6 |  if_e	mov	result1, #1
24820                 | LR__3776
24820     A7 F0 03 F6 | 	mov	ptra, fp
24824     B2 00 A0 FD | 	call	#popregs_
24828                 | _fatfs_cc_cmp_lfn_ret
24828     2D 00 64 FD | 	ret
2482c                 | 
2482c                 | _fatfs_cc_pick_lfn
2482c     09 01 02 F6 | 	mov	_var01, arg01
24830     0A 13 02 F6 | 	mov	arg01, arg02
24834     1A 12 06 F1 | 	add	arg01, #26
24838                 | ' {
24838                 | ' 
24838                 | ' 	return *((WORD*)ptr);
24838     09 FB E9 FA | 	rdword	result1, arg01 wz
2483c     00 FA 05 56 |  if_ne	mov	result1, #0
24840     D4 00 90 5D |  if_ne	jmp	#LR__3785
24844     0A 03 C2 FA | 	rdbyte	_var02, arg02
24848     40 02 26 F5 | 	andn	_var02, #64
2484c     01 02 86 F1 | 	sub	_var02, #1
24850     0D 02 06 FD | 	qmul	_var02, #13
24854                 | ' 
24854                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
24854                 | ' 
24854                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
24854     01 04 06 F6 | 	mov	_var03, #1
24858     00 06 06 F6 | 	mov	_var04, #0
2485c     18 08 62 FD | 	getqx	_var05
24860                 | LR__3780
24860     0D 06 16 F2 | 	cmp	_var04, #13 wc
24864     80 00 90 3D |  if_ae	jmp	#LR__3783
24868     0A 13 02 F6 | 	mov	arg01, arg02
2486c     03 03 02 F6 | 	mov	_var02, _var04
24870     01 00 00 FF 
24874     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
24878     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2487c     01 03 C2 FA | 	rdbyte	_var02, _var02
24880     01 02 06 FA | 	mul	_var02, #1
24884     01 13 02 F1 | 	add	arg01, _var02
24888     01 00 00 FF 
2488c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
24890                 | ' {
24890                 | ' 
24890                 | ' 	return *((WORD*)ptr);
24890     09 FB E1 FA | 	rdword	result1, arg01
24894     FD 0A 02 F6 | 	mov	_var06, result1
24898     02 03 02 F6 | 	mov	_var02, _var03
2489c     0F 02 4E F7 | 	zerox	_var02, #15 wz
248a0     28 00 90 AD |  if_e	jmp	#LR__3781
248a4     00 09 16 F2 | 	cmp	_var05, #256 wc
248a8     00 FA 05 36 |  if_ae	mov	result1, #0
248ac     68 00 90 3D |  if_ae	jmp	#LR__3785
248b0     04 03 02 F6 | 	mov	_var02, _var05
248b4     01 02 66 F0 | 	shl	_var02, #1
248b8     00 03 02 F1 | 	add	_var02, _var01
248bc     05 05 02 F6 | 	mov	_var03, _var06
248c0     01 05 52 FC | 	wrword	_var03, _var02
248c4     01 08 06 F1 | 	add	_var05, #1
248c8     14 00 90 FD | 	jmp	#LR__3782
248cc                 | LR__3781
248cc     05 0B 32 F9 | 	getword	_var06, _var06, #0
248d0     7F 00 00 FF 
248d4     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
248d8     00 FA 05 56 |  if_ne	mov	result1, #0
248dc     38 00 90 5D |  if_ne	jmp	#LR__3785
248e0                 | LR__3782
248e0     01 06 06 F1 | 	add	_var04, #1
248e4     78 FF 9F FD | 	jmp	#LR__3780
248e8                 | LR__3783
248e8     0A 03 C2 FA | 	rdbyte	_var02, arg02
248ec     40 02 CE F7 | 	test	_var02, #64 wz
248f0     02 0D 02 56 |  if_ne	mov	_var07, _var03
248f4     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
248f8     18 00 90 AD |  if_e	jmp	#LR__3784
248fc     00 09 16 F2 | 	cmp	_var05, #256 wc
24900     00 FA 05 36 |  if_ae	mov	result1, #0
24904     10 00 90 3D |  if_ae	jmp	#LR__3785
24908     01 08 66 F0 | 	shl	_var05, #1
2490c     00 09 02 F1 | 	add	_var05, _var01
24910     04 01 58 FC | 	wrword	#0, _var05
24914                 | LR__3784
24914                 | ' 		lfnbuf[i] = 0;
24914                 | ' 	}
24914                 | ' 
24914                 | ' 	return 1;
24914     01 FA 05 F6 | 	mov	result1, #1
24918                 | LR__3785
24918                 | _fatfs_cc_pick_lfn_ret
24918     2D 00 64 FD | 	ret
2491c                 | 
2491c                 | _fatfs_cc_put_lfn
2491c     0D 14 06 F1 | 	add	arg02, #13
24920     0A 19 42 FC | 	wrbyte	arg04, arg02
24924     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
24928     01 18 86 F1 | 	sub	arg04, #1
2492c     0D 18 06 FD | 	qmul	arg04, #13
24930     09 01 02 F6 | 	mov	_var01, arg01
24934     02 14 86 F1 | 	sub	arg02, #2
24938     0A 1F 48 FC | 	wrbyte	#15, arg02
2493c     01 14 06 F1 | 	add	arg02, #1
24940     0A 01 48 FC | 	wrbyte	#0, arg02
24944     0C 14 86 F1 | 	sub	arg02, #12
24948     0A 13 02 F6 | 	mov	arg01, arg02
2494c     1A 12 06 F1 | 	add	arg01, #26
24950     09 01 58 FC | 	wrword	#0, arg01
24954     00 02 06 F6 | 	mov	_var02, #0
24958     00 04 06 F6 | 	mov	_var03, #0
2495c                 | ' 	BYTE* dir,
2495c                 | ' 	BYTE ord,
2495c                 | ' 	BYTE sum
2495c                 | ' )
2495c                 | ' {
2495c                 | ' 	UINT i, s;
2495c                 | ' 	WCHAR wc;
2495c                 | ' 
2495c                 | ' 
2495c                 | ' 	dir[ 13 ] = sum;
2495c                 | ' 	dir[ 11 ] =  0x0F ;
2495c                 | ' 	dir[ 12 ] = 0;
2495c                 | ' 	st_word(dir +  26 , 0);
2495c                 | ' 
2495c                 | ' 	i = (ord - 1) * 13;
2495c                 | ' 	s = wc = 0;
2495c                 | ' 	do {
2495c     01 00 00 FF 
24960     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
24964     18 06 62 FD | 	getqx	_var04
24968     97 2A 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
2496c                 | LR__3790
2496c     01 19 32 F9 | 	getword	arg04, _var02, #0
24970     7F 00 00 FF 
24974     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
24978     03 13 02 56 |  if_ne	mov	arg01, _var04
2497c     01 06 06 51 |  if_ne	add	_var04, #1
24980     01 12 66 50 |  if_ne	shl	arg01, #1
24984     00 13 02 51 |  if_ne	add	arg01, _var01
24988     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2498c     0A 13 02 F6 | 	mov	arg01, arg02
24990     02 19 02 F6 | 	mov	arg04, _var03
24994     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
24998     0C 19 C2 FA | 	rdbyte	arg04, arg04
2499c     01 18 06 FA | 	mul	arg04, #1
249a0     0C 13 02 F1 | 	add	arg01, arg04
249a4     09 03 52 FC | 	wrword	_var02, arg01
249a8     01 19 02 F6 | 	mov	arg04, _var02
249ac     0F 18 4E F7 | 	zerox	arg04, #15 wz
249b0     0F 02 CE A9 |  if_e	bmask	_var02, #15
249b4     01 04 06 F1 | 	add	_var03, #1
249b8     0D 04 16 F2 | 	cmp	_var03, #13 wc
249bc     AC FF 9F CD |  if_b	jmp	#LR__3790
249c0                 | LR__3791
249c0     01 00 00 FF 
249c4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
249c8     01 03 32 F9 | 	getword	_var02, _var02, #0
249cc     7F 00 00 FF 
249d0     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
249d4     01 06 66 50 |  if_ne	shl	_var04, #1
249d8     00 07 02 51 |  if_ne	add	_var04, _var01
249dc     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
249e0     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
249e4     40 16 46 A5 |  if_e	or	arg03, #64
249e8     0A 17 42 FC | 	wrbyte	arg03, arg02
249ec                 | _fatfs_cc_put_lfn_ret
249ec     2D 00 64 FD | 	ret
249f0                 | 
249f0                 | _fatfs_cc_gen_numname
249f0     08 4A 05 F6 | 	mov	COUNT_, #8
249f4     A8 00 A0 FD | 	call	#pushregs_
249f8     2C F0 07 F1 | 	add	ptra, #44
249fc     09 1F 02 F6 | 	mov	local01, arg01
24a00     0A 21 02 F6 | 	mov	local02, arg02
24a04     0B 23 02 F6 | 	mov	local03, arg03
24a08     0C 25 02 F6 | 	mov	local04, arg04
24a0c     0F 13 02 F6 | 	mov	arg01, local01
24a10     10 15 02 F6 | 	mov	arg02, local02
24a14     0B 16 06 F6 | 	mov	arg03, #11
24a18     FC 77 BF FD | 	call	#__system____builtin_memmove
24a1c     06 24 16 F2 | 	cmp	local04, #6 wc
24a20     48 00 90 CD |  if_b	jmp	#LR__3805
24a24     12 27 02 F6 | 	mov	local05, local04
24a28     97 1E 48 FB | 	callpa	#(@LR__3803-@LR__3800)>>2,fcache_load_ptr_
24a2c                 | ' 		sreg = seq;
24a2c                 | ' 		while (*lfn) {
24a2c                 | LR__3800
24a2c     11 29 EA FA | 	rdword	local06, local03 wz
24a30     34 00 90 AD |  if_e	jmp	#LR__3804
24a34     11 2B E2 FA | 	rdword	local07, local03
24a38                 | ' 			wc = *lfn++;
24a38                 | ' 			for (i = 0; i < 16; i++) {
24a38     02 22 06 F1 | 	add	local03, #2
24a3c     10 12 DC FC | 	rep	@LR__3802, #16
24a40                 | LR__3801
24a40     01 26 66 F0 | 	shl	local05, #1
24a44     15 29 32 F9 | 	getword	local06, local07, #0
24a48     01 28 06 F5 | 	and	local06, #1
24a4c     14 27 02 F1 | 	add	local05, local06
24a50     15 2B 32 F9 | 	getword	local07, local07, #0
24a54     01 2A 46 F0 | 	shr	local07, #1
24a58     10 26 2E F4 | 	testbn	local05, #16 wz
24a5c     88 00 00 5F 
24a60     21 26 66 55 |  if_ne	xor	local05, ##69665
24a64                 | LR__3802
24a64     C4 FF 9F FD | 	jmp	#LR__3800
24a68                 | LR__3803
24a68                 | LR__3804
24a68     13 25 02 F6 | 	mov	local04, local05
24a6c                 | LR__3805
24a6c     07 2A 06 F6 | 	mov	local07, #7
24a70                 | ' 			}
24a70                 | ' 		}
24a70                 | ' 		seq = (UINT)sreg;
24a70                 | ' 	}
24a70                 | ' 
24a70                 | ' 
24a70                 | ' 	i = 7;
24a70                 | ' 	do {
24a70     10 4E 05 F1 | 	add	fp, #16
24a74     97 1A 48 FB | 	callpa	#(@LR__3807-@LR__3806)>>2,fcache_load_ptr_
24a78                 | LR__3806
24a78     12 27 42 F8 | 	getnib	local05, local04, #0
24a7c     30 26 06 F1 | 	add	local05, #48
24a80     04 24 46 F0 | 	shr	local04, #4
24a84     13 29 E2 F8 | 	getbyte	local06, local05, #0
24a88     3A 28 16 F2 | 	cmp	local06, #58 wc
24a8c     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
24a90     07 26 06 31 |  if_ae	add	local05, #7
24a94     15 29 02 F6 | 	mov	local06, local07
24a98     01 2A 8E F1 | 	sub	local07, #1 wz
24a9c     A7 28 02 F1 | 	add	local06, fp
24aa0     14 27 42 FC | 	wrbyte	local05, local06
24aa4     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
24aa8     CC FF 9F 5D |  if_ne	jmp	#LR__3806
24aac                 | LR__3807
24aac     15 29 02 F6 | 	mov	local06, local07
24ab0     A7 28 02 F1 | 	add	local06, fp
24ab4     14 FD 48 FC | 	wrbyte	#126, local06
24ab8                 | ' 	ns[i] = '~';
24ab8                 | ' 
24ab8                 | ' 
24ab8                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
24ab8     00 26 06 F6 | 	mov	local05, #0
24abc     10 4E 85 F1 | 	sub	fp, #16
24ac0     97 2A 48 FB | 	callpa	#(@LR__3810-@LR__3808)>>2,fcache_load_ptr_
24ac4                 | LR__3808
24ac4     15 27 12 F2 | 	cmp	local05, local07 wc
24ac8     4C 00 90 3D |  if_ae	jmp	#LR__3811
24acc     13 29 02 F6 | 	mov	local06, local05
24ad0     0F 29 02 F1 | 	add	local06, local01
24ad4     14 29 C2 FA | 	rdbyte	local06, local06
24ad8     20 28 0E F2 | 	cmp	local06, #32 wz
24adc     38 00 90 AD |  if_e	jmp	#LR__3811
24ae0     13 13 02 F6 | 	mov	arg01, local05
24ae4     0F 13 02 F1 | 	add	arg01, local01
24ae8     09 13 CA FA | 	rdbyte	arg01, arg01 wz
24aec     00 FA 05 56 |  if_ne	mov	result1, #0
24af0                 | ' 
24af0                 | ' 	return 0;
24af0     00 FA 05 A6 |  if_e	mov	result1, #0
24af4     00 FA 0D F2 | 	cmp	result1, #0 wz
24af8     14 00 90 AD |  if_e	jmp	#LR__3809
24afc     15 29 02 F6 | 	mov	local06, local07
24b00     01 28 86 F1 | 	sub	local06, #1
24b04     14 27 0A F2 | 	cmp	local05, local06 wz
24b08     0C 00 90 AD |  if_e	jmp	#LR__3811
24b0c     01 26 06 F1 | 	add	local05, #1
24b10                 | LR__3809
24b10     01 26 06 F1 | 	add	local05, #1
24b14     AC FF 9F FD | 	jmp	#LR__3808
24b18                 | LR__3810
24b18                 | LR__3811
24b18     97 20 48 FB | 	callpa	#(@LR__3815-@LR__3812)>>2,fcache_load_ptr_
24b1c                 | ' 			j++;
24b1c                 | ' 		}
24b1c                 | ' 	}
24b1c                 | ' 	do {
24b1c                 | LR__3812
24b1c     13 29 02 F6 | 	mov	local06, local05
24b20     0F 29 02 F1 | 	add	local06, local01
24b24     08 2A 16 F2 | 	cmp	local07, #8 wc
24b28     01 26 06 F1 | 	add	local05, #1
24b2c     1C 00 90 3D |  if_ae	jmp	#LR__3813
24b30     15 25 02 F6 | 	mov	local04, local07
24b34     10 4E 05 F1 | 	add	fp, #16
24b38     A7 24 02 F1 | 	add	local04, fp
24b3c     12 2D C2 FA | 	rdbyte	local08, local04
24b40     01 2A 06 F1 | 	add	local07, #1
24b44     10 4E 85 F1 | 	sub	fp, #16
24b48     04 00 90 FD | 	jmp	#LR__3814
24b4c                 | LR__3813
24b4c     20 2C 06 F6 | 	mov	local08, #32
24b50                 | LR__3814
24b50     14 2D 42 FC | 	wrbyte	local08, local06
24b54     08 26 16 F2 | 	cmp	local05, #8 wc
24b58     C0 FF 9F CD |  if_b	jmp	#LR__3812
24b5c                 | LR__3815
24b5c     A7 F0 03 F6 | 	mov	ptra, fp
24b60     B2 00 A0 FD | 	call	#popregs_
24b64                 | _fatfs_cc_gen_numname_ret
24b64     2D 00 64 FD | 	ret
24b68                 | 
24b68                 | _fatfs_cc_sum_sfn
24b68     00 00 06 F6 | 	mov	_var01, #0
24b6c                 | ' )
24b6c                 | ' {
24b6c                 | ' 	BYTE sum = 0;
24b6c                 | ' 	UINT n = 11;
24b6c                 | ' 
24b6c                 | ' 	do {
24b6c     97 12 48 FB | 	callpa	#(@LR__3822-@LR__3820)>>2,fcache_load_ptr_
24b70                 | LR__3820
24b70     0B 10 DC FC | 	rep	@LR__3823, #11
24b74                 | LR__3821
24b74     00 FB E1 F8 | 	getbyte	result1, _var01, #0
24b78     01 FA 45 F0 | 	shr	result1, #1
24b7c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
24b80     07 00 66 F0 | 	shl	_var01, #7
24b84     00 FB 01 F1 | 	add	result1, _var01
24b88     09 01 C2 FA | 	rdbyte	_var01, arg01
24b8c     FD 00 02 F1 | 	add	_var01, result1
24b90     01 12 06 F1 | 	add	arg01, #1
24b94                 | LR__3822
24b94                 | LR__3823
24b94                 | ' 	return sum;
24b94     00 FB 01 F6 | 	mov	result1, _var01
24b98                 | _fatfs_cc_sum_sfn_ret
24b98     2D 00 64 FD | 	ret
24b9c                 | 
24b9c                 | _fatfs_cc_dir_read
24b9c     0C 4A 05 F6 | 	mov	COUNT_, #12
24ba0     A8 00 A0 FD | 	call	#pushregs_
24ba4     09 1F 02 F6 | 	mov	local01, arg01
24ba8     0A 21 02 F6 | 	mov	local02, arg02
24bac     04 22 06 F6 | 	mov	local03, #4
24bb0     0F 25 02 FB | 	rdlong	local04, local01
24bb4     FF 26 06 F6 | 	mov	local05, #255
24bb8     FF 28 06 F6 | 	mov	local06, #255
24bbc                 | ' )
24bbc                 | ' {
24bbc                 | ' 	FRESULT res = FR_NO_FILE;
24bbc                 | ' 	FATFS *fs = dp->obj.fs;
24bbc                 | ' 	BYTE attr, b;
24bbc                 | ' 
24bbc                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
24bbc                 | ' 
24bbc                 | ' 
24bbc                 | ' 	while (dp->sect) {
24bbc                 | LR__3830
24bbc     18 1E 06 F1 | 	add	local01, #24
24bc0     0F FB 09 FB | 	rdlong	result1, local01 wz
24bc4     18 1E 86 F1 | 	sub	local01, #24
24bc8     AC 01 90 AD |  if_e	jmp	#LR__3840
24bcc     18 1E 06 F1 | 	add	local01, #24
24bd0     0F 15 02 FB | 	rdlong	arg02, local01
24bd4     18 1E 86 F1 | 	sub	local01, #24
24bd8     12 13 02 F6 | 	mov	arg01, local04
24bdc     AC ED BF FD | 	call	#_fatfs_cc_move_window
24be0     FD 22 0A F6 | 	mov	local03, result1 wz
24be4     90 01 90 5D |  if_ne	jmp	#LR__3840
24be8     1C 1E 06 F1 | 	add	local01, #28
24bec     0F FB 01 FB | 	rdlong	result1, local01
24bf0     1C 1E 86 F1 | 	sub	local01, #28
24bf4     FD 2A C2 FA | 	rdbyte	local07, result1
24bf8     15 FB 01 F6 | 	mov	result1, local07
24bfc     07 FA 4D F7 | 	zerox	result1, #7 wz
24c00     04 22 06 A6 |  if_e	mov	local03, #4
24c04                 | ' 			res = FR_NO_FILE; break;
24c04     70 01 90 AD |  if_e	jmp	#LR__3840
24c08     1C 1E 06 F1 | 	add	local01, #28
24c0c     0F 2D 02 FB | 	rdlong	local08, local01
24c10     0B 2C 06 F1 | 	add	local08, #11
24c14     16 2F C2 FA | 	rdbyte	local09, local08
24c18     3F 2E 06 F5 | 	and	local09, #63
24c1c     16 1E 86 F1 | 	sub	local01, #22
24c20     0F 2F 42 FC | 	wrbyte	local09, local01
24c24     06 1E 86 F1 | 	sub	local01, #6
24c28     15 FB E1 F8 | 	getbyte	result1, local07, #0
24c2c     E5 FA 0D F2 | 	cmp	result1, #229 wz
24c30     15 2D 02 56 |  if_ne	mov	local08, local07
24c34     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
24c38     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
24c3c     1C 00 90 AD |  if_e	jmp	#LR__3831
24c40     00 30 06 F6 | 	mov	local10, #0
24c44     17 2D E2 F8 | 	getbyte	local08, local09, #0
24c48     20 2C 26 F5 | 	andn	local08, #32
24c4c     08 2C 0E F2 | 	cmp	local08, #8 wz
24c50     01 30 06 A6 |  if_e	mov	local10, #1
24c54     10 31 0A F2 | 	cmp	local10, local02 wz
24c58     08 00 90 AD |  if_e	jmp	#LR__3832
24c5c                 | LR__3831
24c5c     FF 26 06 F6 | 	mov	local05, #255
24c60     00 01 90 FD | 	jmp	#LR__3839
24c64                 | LR__3832
24c64     17 2F E2 F8 | 	getbyte	local09, local09, #0
24c68     0F 2E 0E F2 | 	cmp	local09, #15 wz
24c6c     B4 00 90 5D |  if_ne	jmp	#LR__3836
24c70     15 33 E2 F8 | 	getbyte	local11, local07, #0
24c74     40 32 CE F7 | 	test	local11, #64 wz
24c78     30 00 90 AD |  if_e	jmp	#LR__3833
24c7c     1C 1E 06 F1 | 	add	local01, #28
24c80     0F 33 02 FB | 	rdlong	local11, local01
24c84     0D 32 06 F1 | 	add	local11, #13
24c88     19 29 C2 FA | 	rdbyte	local06, local11
24c8c     15 2B E2 F8 | 	getbyte	local07, local07, #0
24c90     BF 2A 06 F5 | 	and	local07, #191
24c94     15 27 02 F6 | 	mov	local05, local07
24c98     0C 1E 86 F1 | 	sub	local01, #12
24c9c     0F 33 02 FB | 	rdlong	local11, local01
24ca0     1C 1E 06 F1 | 	add	local01, #28
24ca4     0F 33 62 FC | 	wrlong	local11, local01
24ca8     2C 1E 86 F1 | 	sub	local01, #44
24cac                 | LR__3833
24cac     15 2D E2 F8 | 	getbyte	local08, local07, #0
24cb0     13 31 E2 F8 | 	getbyte	local10, local05, #0
24cb4     18 2D 0A F2 | 	cmp	local08, local10 wz
24cb8     5C 00 90 5D |  if_ne	jmp	#LR__3834
24cbc     14 31 E2 F8 | 	getbyte	local10, local06, #0
24cc0     1C 1E 06 F1 | 	add	local01, #28
24cc4     0F 2F 02 FB | 	rdlong	local09, local01
24cc8     1C 1E 86 F1 | 	sub	local01, #28
24ccc     0D 2E 06 F1 | 	add	local09, #13
24cd0     17 2D C2 FA | 	rdbyte	local08, local09
24cd4     16 2F E2 F8 | 	getbyte	local09, local08, #0
24cd8     17 31 0A F2 | 	cmp	local10, local09 wz
24cdc     38 00 90 5D |  if_ne	jmp	#LR__3834
24ce0     0C 24 06 F1 | 	add	local04, #12
24ce4     12 13 02 FB | 	rdlong	arg01, local04
24ce8     0C 24 86 F1 | 	sub	local04, #12
24cec     1C 1E 06 F1 | 	add	local01, #28
24cf0     0F 35 02 FB | 	rdlong	local12, local01
24cf4     1C 1E 86 F1 | 	sub	local01, #28
24cf8     1A 15 02 F6 | 	mov	arg02, local12
24cfc     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
24d00     00 FA 4D F2 | 	cmps	result1, #0 wz
24d04     13 35 02 56 |  if_ne	mov	local12, local05
24d08     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
24d0c     01 34 86 51 |  if_ne	sub	local12, #1
24d10     1A 33 02 56 |  if_ne	mov	local11, local12
24d14     04 00 90 5D |  if_ne	jmp	#LR__3835
24d18                 | LR__3834
24d18     FF 32 06 F6 | 	mov	local11, #255
24d1c                 | LR__3835
24d1c     19 27 02 F6 | 	mov	local05, local11
24d20     40 00 90 FD | 	jmp	#LR__3838
24d24                 | LR__3836
24d24     13 33 02 F6 | 	mov	local11, local05
24d28     07 32 4E F7 | 	zerox	local11, #7 wz
24d2c     20 00 90 5D |  if_ne	jmp	#LR__3837
24d30     14 29 E2 F8 | 	getbyte	local06, local06, #0
24d34     1C 1E 06 F1 | 	add	local01, #28
24d38     0F 13 02 FB | 	rdlong	arg01, local01
24d3c     1C 1E 86 F1 | 	sub	local01, #28
24d40     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
24d44     FD FA E1 F8 | 	getbyte	result1, result1, #0
24d48     FD 28 0A F2 | 	cmp	local06, result1 wz
24d4c     28 00 90 AD |  if_e	jmp	#LR__3840
24d50                 | LR__3837
24d50     2C 1E 06 F1 | 	add	local01, #44
24d54     FF FF FF FF 
24d58     0F FF 6B FC | 	wrlong	##-1, local01
24d5c     2C 1E 86 F1 | 	sub	local01, #44
24d60                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
24d60                 | ' 					}
24d60                 | ' 					break;
24d60     14 00 90 FD | 	jmp	#LR__3840
24d64                 | LR__3838
24d64                 | LR__3839
24d64     0F 13 02 F6 | 	mov	arg01, local01
24d68     00 14 06 F6 | 	mov	arg02, #0
24d6c     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
24d70     FD 22 0A F6 | 	mov	local03, result1 wz
24d74     44 FE 9F AD |  if_e	jmp	#LR__3830
24d78                 | LR__3840
24d78     00 22 0E F2 | 	cmp	local03, #0 wz
24d7c     18 1E 06 51 |  if_ne	add	local01, #24
24d80     0F 01 68 5C |  if_ne	wrlong	#0, local01
24d84                 | ' 	return res;
24d84     11 FB 01 F6 | 	mov	result1, local03
24d88     A7 F0 03 F6 | 	mov	ptra, fp
24d8c     B2 00 A0 FD | 	call	#popregs_
24d90                 | _fatfs_cc_dir_read_ret
24d90     2D 00 64 FD | 	ret
24d94                 | 
24d94                 | _fatfs_cc_dir_find
24d94     0B 4A 05 F6 | 	mov	COUNT_, #11
24d98     A8 00 A0 FD | 	call	#pushregs_
24d9c     09 1F 02 F6 | 	mov	local01, arg01
24da0     0F 21 02 FB | 	rdlong	local02, local01
24da4     0F 13 02 F6 | 	mov	arg01, local01
24da8     00 14 06 F6 | 	mov	arg02, #0
24dac     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
24db0     00 FA 0D F2 | 	cmp	result1, #0 wz
24db4     18 02 90 5D |  if_ne	jmp	#LR__3862
24db8     FF 22 06 F6 | 	mov	local03, #255
24dbc     FF 24 06 F6 | 	mov	local04, #255
24dc0     2C 1E 06 F1 | 	add	local01, #44
24dc4     FF FF FF FF 
24dc8     0F FF 6B FC | 	wrlong	##-1, local01
24dcc     2C 1E 86 F1 | 	sub	local01, #44
24dd0                 | ' #line 2404 "ff.c"
24dd0                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
24dd0                 | ' 
24dd0                 | ' 	do {
24dd0                 | LR__3850
24dd0     18 1E 06 F1 | 	add	local01, #24
24dd4     0F 15 02 FB | 	rdlong	arg02, local01
24dd8     18 1E 86 F1 | 	sub	local01, #24
24ddc     10 13 02 F6 | 	mov	arg01, local02
24de0     A8 EB BF FD | 	call	#_fatfs_cc_move_window
24de4     FD 26 0A F6 | 	mov	local05, result1 wz
24de8     E0 01 90 5D |  if_ne	jmp	#LR__3861
24dec     1C 1E 06 F1 | 	add	local01, #28
24df0     0F 17 02 FB | 	rdlong	arg03, local01
24df4     1C 1E 86 F1 | 	sub	local01, #28
24df8     0B 29 C2 FA | 	rdbyte	local06, arg03
24dfc     14 17 02 F6 | 	mov	arg03, local06
24e00     07 16 4E F7 | 	zerox	arg03, #7 wz
24e04     04 26 06 A6 |  if_e	mov	local05, #4
24e08     C0 01 90 AD |  if_e	jmp	#LR__3861
24e0c     1C 1E 06 F1 | 	add	local01, #28
24e10     0F 2B 02 FB | 	rdlong	local07, local01
24e14     15 17 02 F6 | 	mov	arg03, local07
24e18     0B 16 06 F1 | 	add	arg03, #11
24e1c     0B 2D C2 FA | 	rdbyte	local08, arg03
24e20     3F 2C 06 F5 | 	and	local08, #63
24e24     16 1E 86 F1 | 	sub	local01, #22
24e28     0F 2D 42 FC | 	wrbyte	local08, local01
24e2c     06 1E 86 F1 | 	sub	local01, #6
24e30     14 17 E2 F8 | 	getbyte	arg03, local06, #0
24e34     E5 16 0E F2 | 	cmp	arg03, #229 wz
24e38     18 00 90 AD |  if_e	jmp	#LR__3851
24e3c     16 17 E2 F8 | 	getbyte	arg03, local08, #0
24e40     08 16 CE F7 | 	test	arg03, #8 wz
24e44     16 2B 02 56 |  if_ne	mov	local07, local08
24e48     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
24e4c     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
24e50     18 00 90 AD |  if_e	jmp	#LR__3852
24e54                 | LR__3851
24e54     FF 24 06 F6 | 	mov	local04, #255
24e58     2C 1E 06 F1 | 	add	local01, #44
24e5c     FF FF FF FF 
24e60     0F FF 6B FC | 	wrlong	##-1, local01
24e64     2C 1E 86 F1 | 	sub	local01, #44
24e68     4C 01 90 FD | 	jmp	#LR__3860
24e6c                 | LR__3852
24e6c     16 2D E2 F8 | 	getbyte	local08, local08, #0
24e70     0F 2C 0E F2 | 	cmp	local08, #15 wz
24e74     C8 00 90 5D |  if_ne	jmp	#LR__3856
24e78     2B 1E 06 F1 | 	add	local01, #43
24e7c     0F 2D C2 FA | 	rdbyte	local08, local01
24e80     2B 1E 86 F1 | 	sub	local01, #43
24e84     40 2C CE F7 | 	test	local08, #64 wz
24e88     2C 01 90 5D |  if_ne	jmp	#LR__3859
24e8c     14 2F E2 F8 | 	getbyte	local09, local06, #0
24e90     40 2E CE F7 | 	test	local09, #64 wz
24e94     30 00 90 AD |  if_e	jmp	#LR__3853
24e98     1C 1E 06 F1 | 	add	local01, #28
24e9c     0F 2F 02 FB | 	rdlong	local09, local01
24ea0     0D 2E 06 F1 | 	add	local09, #13
24ea4     17 23 C2 FA | 	rdbyte	local03, local09
24ea8     14 29 E2 F8 | 	getbyte	local06, local06, #0
24eac     BF 28 06 F5 | 	and	local06, #191
24eb0     14 25 02 F6 | 	mov	local04, local06
24eb4     0C 1E 86 F1 | 	sub	local01, #12
24eb8     0F 2F 02 FB | 	rdlong	local09, local01
24ebc     1C 1E 06 F1 | 	add	local01, #28
24ec0     0F 2F 62 FC | 	wrlong	local09, local01
24ec4     2C 1E 86 F1 | 	sub	local01, #44
24ec8                 | LR__3853
24ec8     14 31 E2 F8 | 	getbyte	local10, local06, #0
24ecc     12 2B E2 F8 | 	getbyte	local07, local04, #0
24ed0     15 31 0A F2 | 	cmp	local10, local07 wz
24ed4     5C 00 90 5D |  if_ne	jmp	#LR__3854
24ed8     11 2D E2 F8 | 	getbyte	local08, local03, #0
24edc     1C 1E 06 F1 | 	add	local01, #28
24ee0     0F 2B 02 FB | 	rdlong	local07, local01
24ee4     1C 1E 86 F1 | 	sub	local01, #28
24ee8     0D 2A 06 F1 | 	add	local07, #13
24eec     15 29 C2 FA | 	rdbyte	local06, local07
24ef0     14 2B E2 F8 | 	getbyte	local07, local06, #0
24ef4     15 2D 0A F2 | 	cmp	local08, local07 wz
24ef8     38 00 90 5D |  if_ne	jmp	#LR__3854
24efc     0C 20 06 F1 | 	add	local02, #12
24f00     10 13 02 FB | 	rdlong	arg01, local02
24f04     0C 20 86 F1 | 	sub	local02, #12
24f08     1C 1E 06 F1 | 	add	local01, #28
24f0c     0F 33 02 FB | 	rdlong	local11, local01
24f10     1C 1E 86 F1 | 	sub	local01, #28
24f14     19 15 02 F6 | 	mov	arg02, local11
24f18     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
24f1c     00 FA 4D F2 | 	cmps	result1, #0 wz
24f20     12 33 02 56 |  if_ne	mov	local11, local04
24f24     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
24f28     01 32 86 51 |  if_ne	sub	local11, #1
24f2c     19 2F 02 56 |  if_ne	mov	local09, local11
24f30     04 00 90 5D |  if_ne	jmp	#LR__3855
24f34                 | LR__3854
24f34     FF 2E 06 F6 | 	mov	local09, #255
24f38                 | LR__3855
24f38     17 25 02 F6 | 	mov	local04, local09
24f3c     78 00 90 FD | 	jmp	#LR__3859
24f40                 | LR__3856
24f40     12 2F 02 F6 | 	mov	local09, local04
24f44     07 2E 4E F7 | 	zerox	local09, #7 wz
24f48     20 00 90 5D |  if_ne	jmp	#LR__3857
24f4c     11 31 E2 F8 | 	getbyte	local10, local03, #0
24f50     1C 1E 06 F1 | 	add	local01, #28
24f54     0F 13 02 FB | 	rdlong	arg01, local01
24f58     1C 1E 86 F1 | 	sub	local01, #28
24f5c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
24f60     FD FA E1 F8 | 	getbyte	result1, result1, #0
24f64     FD 30 0A F2 | 	cmp	local10, result1 wz
24f68     60 00 90 AD |  if_e	jmp	#LR__3861
24f6c                 | LR__3857
24f6c     2B 1E 06 F1 | 	add	local01, #43
24f70     0F 2F C2 FA | 	rdbyte	local09, local01
24f74     2B 1E 86 F1 | 	sub	local01, #43
24f78     01 2E CE F7 | 	test	local09, #1 wz
24f7c     24 00 90 5D |  if_ne	jmp	#LR__3858
24f80     1C 1E 06 F1 | 	add	local01, #28
24f84     0F 13 02 FB | 	rdlong	arg01, local01
24f88     04 1E 06 F1 | 	add	local01, #4
24f8c     0F 15 02 F6 | 	mov	arg02, local01
24f90     20 1E 86 F1 | 	sub	local01, #32
24f94     0B 16 06 F6 | 	mov	arg03, #11
24f98     88 DA BF FD | 	call	#_fatfs_cc_memcmp
24f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
24fa0     28 00 90 AD |  if_e	jmp	#LR__3861
24fa4                 | LR__3858
24fa4     FF 24 06 F6 | 	mov	local04, #255
24fa8     2C 1E 06 F1 | 	add	local01, #44
24fac     FF FF FF FF 
24fb0     0F FF 6B FC | 	wrlong	##-1, local01
24fb4     2C 1E 86 F1 | 	sub	local01, #44
24fb8                 | LR__3859
24fb8                 | LR__3860
24fb8     0F 13 02 F6 | 	mov	arg01, local01
24fbc     00 14 06 F6 | 	mov	arg02, #0
24fc0     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
24fc4     FD 26 0A F6 | 	mov	local05, result1 wz
24fc8     04 FE 9F AD |  if_e	jmp	#LR__3850
24fcc                 | LR__3861
24fcc                 | ' 
24fcc                 | ' 	return res;
24fcc     13 FB 01 F6 | 	mov	result1, local05
24fd0                 | LR__3862
24fd0     A7 F0 03 F6 | 	mov	ptra, fp
24fd4     B2 00 A0 FD | 	call	#popregs_
24fd8                 | _fatfs_cc_dir_find_ret
24fd8     2D 00 64 FD | 	ret
24fdc                 | 
24fdc                 | _fatfs_cc_dir_register
24fdc     0A 4A 05 F6 | 	mov	COUNT_, #10
24fe0     A8 00 A0 FD | 	call	#pushregs_
24fe4     2C F0 07 F1 | 	add	ptra, #44
24fe8     04 4E 05 F1 | 	add	fp, #4
24fec     A7 12 62 FC | 	wrlong	arg01, fp
24ff0     09 1F 02 FB | 	rdlong	local01, arg01
24ff4     08 4E 05 F1 | 	add	fp, #8
24ff8     A7 1E 62 FC | 	wrlong	local01, fp
24ffc     08 4E 85 F1 | 	sub	fp, #8
25000     A7 20 02 FB | 	rdlong	local02, fp
25004     04 4E 85 F1 | 	sub	fp, #4
25008     2B 20 06 F1 | 	add	local02, #43
2500c     10 21 C2 FA | 	rdbyte	local02, local02
25010     A0 20 CE F7 | 	test	local02, #160 wz
25014     06 FA 05 56 |  if_ne	mov	result1, #6
25018     F8 03 90 5D |  if_ne	jmp	#LR__3885
2501c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2501c     14 4E 05 F1 | 	add	fp, #20
25020     A7 00 68 FC | 	wrlong	#0, fp
25024     14 4E 85 F1 | 	sub	fp, #20
25028     97 28 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
2502c                 | LR__3870
2502c     0C 4E 05 F1 | 	add	fp, #12
25030     A7 20 02 FB | 	rdlong	local02, fp
25034     0C 20 06 F1 | 	add	local02, #12
25038     10 23 02 FB | 	rdlong	local03, local02
2503c     08 4E 05 F1 | 	add	fp, #8
25040     A7 24 02 FB | 	rdlong	local04, fp
25044     14 4E 85 F1 | 	sub	fp, #20
25048     01 24 66 F0 | 	shl	local04, #1
2504c     11 25 02 F1 | 	add	local04, local03
25050     12 21 EA FA | 	rdword	local02, local04 wz
25054     24 00 90 AD |  if_e	jmp	#LR__3872
25058     14 4E 05 F1 | 	add	fp, #20
2505c     A7 26 02 FB | 	rdlong	local05, fp
25060     13 29 02 F6 | 	mov	local06, local05
25064     13 2B 02 F6 | 	mov	local07, local05
25068     15 2D 02 F6 | 	mov	local08, local07
2506c     01 2C 06 F1 | 	add	local08, #1
25070     A7 2C 62 FC | 	wrlong	local08, fp
25074     14 4E 85 F1 | 	sub	fp, #20
25078     B0 FF 9F FD | 	jmp	#LR__3870
2507c                 | LR__3871
2507c                 | LR__3872
2507c     1C 4E 05 F1 | 	add	fp, #28
25080     A7 12 02 F6 | 	mov	arg01, fp
25084     18 4E 85 F1 | 	sub	fp, #24
25088     A7 14 02 FB | 	rdlong	arg02, fp
2508c     04 4E 85 F1 | 	sub	fp, #4
25090     20 14 06 F1 | 	add	arg02, #32
25094     0C 16 06 F6 | 	mov	arg03, #12
25098     7C 71 BF FD | 	call	#__system____builtin_memmove
2509c     27 4E 05 F1 | 	add	fp, #39
250a0     A7 2E C2 FA | 	rdbyte	local09, fp
250a4     27 4E 85 F1 | 	sub	fp, #39
250a8     01 2E CE F7 | 	test	local09, #1 wz
250ac     F4 00 90 AD |  if_e	jmp	#LR__3875
250b0     04 4E 05 F1 | 	add	fp, #4
250b4     A7 30 02 FB | 	rdlong	local10, fp
250b8     2B 30 06 F1 | 	add	local10, #43
250bc     18 81 48 FC | 	wrbyte	#64, local10
250c0                 | ' 		dp->fn[ 11 ] =  0x40 ;
250c0                 | ' 		for (n = 1; n < 100; n++) {
250c0     0C 4E 05 F1 | 	add	fp, #12
250c4     A7 02 68 FC | 	wrlong	#1, fp
250c8     10 4E 85 F1 | 	sub	fp, #16
250cc                 | LR__3873
250cc     10 4E 05 F1 | 	add	fp, #16
250d0     A7 20 02 FB | 	rdlong	local02, fp
250d4     10 4E 85 F1 | 	sub	fp, #16
250d8     64 20 16 F2 | 	cmp	local02, #100 wc
250dc     70 00 90 3D |  if_ae	jmp	#LR__3874
250e0     04 4E 05 F1 | 	add	fp, #4
250e4     A7 12 02 FB | 	rdlong	arg01, fp
250e8     20 12 06 F1 | 	add	arg01, #32
250ec     18 4E 05 F1 | 	add	fp, #24
250f0     A7 14 02 F6 | 	mov	arg02, fp
250f4     10 4E 85 F1 | 	sub	fp, #16
250f8     A7 30 02 FB | 	rdlong	local10, fp
250fc     0C 30 06 F1 | 	add	local10, #12
25100     18 17 02 FB | 	rdlong	arg03, local10
25104     04 4E 05 F1 | 	add	fp, #4
25108     A7 18 02 FB | 	rdlong	arg04, fp
2510c     10 4E 85 F1 | 	sub	fp, #16
25110     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
25114     04 4E 05 F1 | 	add	fp, #4
25118     A7 12 02 FB | 	rdlong	arg01, fp
2511c     04 4E 85 F1 | 	sub	fp, #4
25120     70 FC BF FD | 	call	#_fatfs_cc_dir_find
25124     08 4E 05 F1 | 	add	fp, #8
25128     A7 FA 61 FC | 	wrlong	result1, fp
2512c     00 FA 4D F2 | 	cmps	result1, #0 wz
25130     08 4E 85 F1 | 	sub	fp, #8
25134     18 00 90 5D |  if_ne	jmp	#LR__3874
25138     10 4E 05 F1 | 	add	fp, #16
2513c     A7 30 02 FB | 	rdlong	local10, fp
25140     01 30 06 F1 | 	add	local10, #1
25144     A7 30 62 FC | 	wrlong	local10, fp
25148     10 4E 85 F1 | 	sub	fp, #16
2514c     7C FF 9F FD | 	jmp	#LR__3873
25150                 | LR__3874
25150     10 4E 05 F1 | 	add	fp, #16
25154     A7 30 02 FB | 	rdlong	local10, fp
25158     10 4E 85 F1 | 	sub	fp, #16
2515c     64 30 0E F2 | 	cmp	local10, #100 wz
25160     07 FA 05 A6 |  if_e	mov	result1, #7
25164     AC 02 90 AD |  if_e	jmp	#LR__3885
25168     08 4E 05 F1 | 	add	fp, #8
2516c     A7 30 02 FB | 	rdlong	local10, fp
25170     08 4E 85 F1 | 	sub	fp, #8
25174     04 30 0E F2 | 	cmp	local10, #4 wz
25178     08 4E 05 51 |  if_ne	add	fp, #8
2517c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
25180     08 4E 85 51 |  if_ne	sub	fp, #8
25184     8C 02 90 5D |  if_ne	jmp	#LR__3885
25188     04 4E 05 F1 | 	add	fp, #4
2518c     A7 30 02 FB | 	rdlong	local10, fp
25190     23 4E 05 F1 | 	add	fp, #35
25194     A7 1E C2 FA | 	rdbyte	local01, fp
25198     27 4E 85 F1 | 	sub	fp, #39
2519c     2B 30 06 F1 | 	add	local10, #43
251a0     18 1F 42 FC | 	wrbyte	local01, local10
251a4                 | LR__3875
251a4     27 4E 05 F1 | 	add	fp, #39
251a8     A7 20 C2 FA | 	rdbyte	local02, fp
251ac     27 4E 85 F1 | 	sub	fp, #39
251b0     02 20 CE F7 | 	test	local02, #2 wz
251b4     20 00 90 AD |  if_e	jmp	#LR__3876
251b8     14 4E 05 F1 | 	add	fp, #20
251bc     A7 30 02 FB | 	rdlong	local10, fp
251c0     0C 30 06 F1 | 	add	local10, #12
251c4     0D 30 16 FD | 	qdiv	local10, #13
251c8     14 4E 85 F1 | 	sub	fp, #20
251cc     18 30 62 FD | 	getqx	local10
251d0     01 30 06 F1 | 	add	local10, #1
251d4     04 00 90 FD | 	jmp	#LR__3877
251d8                 | LR__3876
251d8     01 30 06 F6 | 	mov	local10, #1
251dc                 | LR__3877
251dc     18 4E 05 F1 | 	add	fp, #24
251e0     A7 30 62 FC | 	wrlong	local10, fp
251e4     14 4E 85 F1 | 	sub	fp, #20
251e8     A7 12 02 FB | 	rdlong	arg01, fp
251ec     18 15 02 F6 | 	mov	arg02, local10
251f0     04 4E 85 F1 | 	sub	fp, #4
251f4     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
251f8     08 4E 05 F1 | 	add	fp, #8
251fc     A7 FA 61 FC | 	wrlong	result1, fp
25200     08 4E 85 F1 | 	sub	fp, #8
25204     00 FA 0D F2 | 	cmp	result1, #0 wz
25208     38 01 90 5D |  if_ne	jmp	#LR__3882
2520c     18 4E 05 F1 | 	add	fp, #24
25210     A7 30 02 FB | 	rdlong	local10, fp
25214     01 30 8E F1 | 	sub	local10, #1 wz
25218     A7 30 62 FC | 	wrlong	local10, fp
2521c     18 4E 85 F1 | 	sub	fp, #24
25220     20 01 90 AD |  if_e	jmp	#LR__3882
25224     04 4E 05 F1 | 	add	fp, #4
25228     A7 30 02 FB | 	rdlong	local10, fp
2522c     18 13 02 F6 | 	mov	arg01, local10
25230     14 4E 05 F1 | 	add	fp, #20
25234     A7 18 02 FB | 	rdlong	arg04, fp
25238     18 4E 85 F1 | 	sub	fp, #24
2523c     05 18 66 F0 | 	shl	arg04, #5
25240     10 30 06 F1 | 	add	local10, #16
25244     18 15 02 FB | 	rdlong	arg02, local10
25248     0C 15 82 F1 | 	sub	arg02, arg04
2524c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
25250     08 4E 05 F1 | 	add	fp, #8
25254     A7 FA 61 FC | 	wrlong	result1, fp
25258     08 4E 85 F1 | 	sub	fp, #8
2525c     00 FA 0D F2 | 	cmp	result1, #0 wz
25260     E0 00 90 5D |  if_ne	jmp	#LR__3881
25264     04 4E 05 F1 | 	add	fp, #4
25268     A7 12 02 FB | 	rdlong	arg01, fp
2526c     04 4E 85 F1 | 	sub	fp, #4
25270     20 12 06 F1 | 	add	arg01, #32
25274     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
25278     FD 30 02 F6 | 	mov	local10, result1
2527c     28 4E 05 F1 | 	add	fp, #40
25280     A7 30 42 FC | 	wrbyte	local10, fp
25284     28 4E 85 F1 | 	sub	fp, #40
25288                 | ' 			sum = sum_sfn(dp->fn);
25288                 | ' 			do {
25288                 | LR__3878
25288     0C 4E 05 F1 | 	add	fp, #12
2528c     A7 12 02 FB | 	rdlong	arg01, fp
25290     08 4E 85 F1 | 	sub	fp, #8
25294     A7 1E 02 FB | 	rdlong	local01, fp
25298     04 4E 85 F1 | 	sub	fp, #4
2529c     18 1E 06 F1 | 	add	local01, #24
252a0     0F 15 02 FB | 	rdlong	arg02, local01
252a4     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
252a8     08 4E 05 F1 | 	add	fp, #8
252ac     A7 FA 61 FC | 	wrlong	result1, fp
252b0     00 FA 4D F2 | 	cmps	result1, #0 wz
252b4     08 4E 85 F1 | 	sub	fp, #8
252b8     88 00 90 5D |  if_ne	jmp	#LR__3880
252bc     0C 4E 05 F1 | 	add	fp, #12
252c0     A7 20 02 FB | 	rdlong	local02, fp
252c4     0C 20 06 F1 | 	add	local02, #12
252c8     10 13 02 FB | 	rdlong	arg01, local02
252cc     08 4E 85 F1 | 	sub	fp, #8
252d0     A7 1E 02 FB | 	rdlong	local01, fp
252d4     1C 1E 06 F1 | 	add	local01, #28
252d8     0F 15 02 FB | 	rdlong	arg02, local01
252dc     14 4E 05 F1 | 	add	fp, #20
252e0     A7 16 02 FB | 	rdlong	arg03, fp
252e4     10 4E 05 F1 | 	add	fp, #16
252e8     A7 18 C2 FA | 	rdbyte	arg04, fp
252ec     28 4E 85 F1 | 	sub	fp, #40
252f0     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
252f4     0C 4E 05 F1 | 	add	fp, #12
252f8     A7 30 02 FB | 	rdlong	local10, fp
252fc     03 30 06 F1 | 	add	local10, #3
25300     18 03 48 FC | 	wrbyte	#1, local10
25304     08 4E 85 F1 | 	sub	fp, #8
25308     A7 12 02 FB | 	rdlong	arg01, fp
2530c     04 4E 85 F1 | 	sub	fp, #4
25310     00 14 06 F6 | 	mov	arg02, #0
25314     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
25318     08 4E 05 F1 | 	add	fp, #8
2531c     A7 FA 61 FC | 	wrlong	result1, fp
25320     00 FA 4D F2 | 	cmps	result1, #0 wz
25324     08 4E 85 F1 | 	sub	fp, #8
25328     18 00 90 5D |  if_ne	jmp	#LR__3879
2532c     18 4E 05 F1 | 	add	fp, #24
25330     A7 30 02 FB | 	rdlong	local10, fp
25334     01 30 8E F1 | 	sub	local10, #1 wz
25338     A7 30 62 FC | 	wrlong	local10, fp
2533c     18 4E 85 F1 | 	sub	fp, #24
25340     44 FF 9F 5D |  if_ne	jmp	#LR__3878
25344                 | LR__3879
25344                 | LR__3880
25344                 | LR__3881
25344                 | LR__3882
25344     08 4E 05 F1 | 	add	fp, #8
25348     A7 30 0A FB | 	rdlong	local10, fp wz
2534c     08 4E 85 F1 | 	sub	fp, #8
25350     B4 00 90 5D |  if_ne	jmp	#LR__3884
25354     0C 4E 05 F1 | 	add	fp, #12
25358     A7 12 02 FB | 	rdlong	arg01, fp
2535c     08 4E 85 F1 | 	sub	fp, #8
25360     A7 1E 02 FB | 	rdlong	local01, fp
25364     04 4E 85 F1 | 	sub	fp, #4
25368     18 1E 06 F1 | 	add	local01, #24
2536c     0F 15 02 FB | 	rdlong	arg02, local01
25370     18 E6 BF FD | 	call	#_fatfs_cc_move_window
25374     08 4E 05 F1 | 	add	fp, #8
25378     A7 FA 61 FC | 	wrlong	result1, fp
2537c     08 4E 85 F1 | 	sub	fp, #8
25380     00 FA 0D F2 | 	cmp	result1, #0 wz
25384     80 00 90 5D |  if_ne	jmp	#LR__3883
25388     04 4E 05 F1 | 	add	fp, #4
2538c     A7 20 02 FB | 	rdlong	local02, fp
25390     04 4E 85 F1 | 	sub	fp, #4
25394     1C 20 06 F1 | 	add	local02, #28
25398     10 13 02 FB | 	rdlong	arg01, local02
2539c     00 14 06 F6 | 	mov	arg02, #0
253a0     20 16 06 F6 | 	mov	arg03, #32
253a4     98 00 A0 FD | 	call	#\builtin_bytefill_
253a8     04 4E 05 F1 | 	add	fp, #4
253ac     A7 14 02 FB | 	rdlong	arg02, fp
253b0     0A 1F 02 F6 | 	mov	local01, arg02
253b4     1C 1E 06 F1 | 	add	local01, #28
253b8     0F 13 02 FB | 	rdlong	arg01, local01
253bc     04 4E 85 F1 | 	sub	fp, #4
253c0     20 14 06 F1 | 	add	arg02, #32
253c4     0B 16 06 F6 | 	mov	arg03, #11
253c8     4C 6E BF FD | 	call	#__system____builtin_memmove
253cc     04 4E 05 F1 | 	add	fp, #4
253d0     A7 2E 02 FB | 	rdlong	local09, fp
253d4     17 31 02 F6 | 	mov	local10, local09
253d8     1C 30 06 F1 | 	add	local10, #28
253dc     18 1F 02 FB | 	rdlong	local01, local10
253e0     2B 2E 06 F1 | 	add	local09, #43
253e4     17 31 C2 FA | 	rdbyte	local10, local09
253e8     18 30 06 F5 | 	and	local10, #24
253ec     0C 1E 06 F1 | 	add	local01, #12
253f0     0F 31 42 FC | 	wrbyte	local10, local01
253f4     08 4E 05 F1 | 	add	fp, #8
253f8     A7 30 02 FB | 	rdlong	local10, fp
253fc     0C 4E 85 F1 | 	sub	fp, #12
25400     03 30 06 F1 | 	add	local10, #3
25404     18 03 48 FC | 	wrbyte	#1, local10
25408                 | LR__3883
25408                 | LR__3884
25408                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
25408                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
25408                 | ' 
25408                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
25408                 | ' 
25408                 | ' 			fs->wflag = 1;
25408                 | ' 		}
25408                 | ' 	}
25408                 | ' 
25408                 | ' 	return res;
25408     08 4E 05 F1 | 	add	fp, #8
2540c     A7 FA 01 FB | 	rdlong	result1, fp
25410     08 4E 85 F1 | 	sub	fp, #8
25414                 | LR__3885
25414     A7 F0 03 F6 | 	mov	ptra, fp
25418     B2 00 A0 FD | 	call	#popregs_
2541c                 | _fatfs_cc_dir_register_ret
2541c     2D 00 64 FD | 	ret
25420                 | 
25420                 | _fatfs_cc_dir_remove
25420     05 4A 05 F6 | 	mov	COUNT_, #5
25424     A8 00 A0 FD | 	call	#pushregs_
25428     09 1F 02 F6 | 	mov	local01, arg01
2542c     0F 21 02 FB | 	rdlong	local02, local01
25430     10 1E 06 F1 | 	add	local01, #16
25434     0F 23 02 FB | 	rdlong	local03, local01
25438     1C 1E 06 F1 | 	add	local01, #28
2543c     0F 15 02 FB | 	rdlong	arg02, local01
25440     2C 1E 86 F1 | 	sub	local01, #44
25444     FF FF 7F FF 
25448     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2544c     00 24 06 A6 |  if_e	mov	local04, #0
25450     18 00 90 AD |  if_e	jmp	#LR__3890
25454     0F 13 02 F6 | 	mov	arg01, local01
25458     2C 1E 06 F1 | 	add	local01, #44
2545c     0F 15 02 FB | 	rdlong	arg02, local01
25460     2C 1E 86 F1 | 	sub	local01, #44
25464     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
25468     FD 24 02 F6 | 	mov	local04, result1
2546c                 | LR__3890
2546c     12 27 0A F6 | 	mov	local05, local04 wz
25470     64 00 90 5D |  if_ne	jmp	#LR__3893
25474                 | ' 		do {
25474                 | LR__3891
25474     18 1E 06 F1 | 	add	local01, #24
25478     0F 15 02 FB | 	rdlong	arg02, local01
2547c     18 1E 86 F1 | 	sub	local01, #24
25480     10 13 02 F6 | 	mov	arg01, local02
25484     04 E5 BF FD | 	call	#_fatfs_cc_move_window
25488     FD 26 0A F6 | 	mov	local05, result1 wz
2548c     40 00 90 5D |  if_ne	jmp	#LR__3892
25490     1C 1E 06 F1 | 	add	local01, #28
25494     0F 25 02 FB | 	rdlong	local04, local01
25498     12 CB 49 FC | 	wrbyte	#229, local04
2549c     03 20 06 F1 | 	add	local02, #3
254a0     10 03 48 FC | 	wrbyte	#1, local02
254a4     03 20 86 F1 | 	sub	local02, #3
254a8     0C 1E 86 F1 | 	sub	local01, #12
254ac     0F 25 02 FB | 	rdlong	local04, local01
254b0     10 1E 86 F1 | 	sub	local01, #16
254b4     11 25 12 F2 | 	cmp	local04, local03 wc
254b8     14 00 90 3D |  if_ae	jmp	#LR__3892
254bc     0F 13 02 F6 | 	mov	arg01, local01
254c0     00 14 06 F6 | 	mov	arg02, #0
254c4     90 EF BF FD | 	call	#_fatfs_cc_dir_next
254c8     FD 26 0A F6 | 	mov	local05, result1 wz
254cc     A4 FF 9F AD |  if_e	jmp	#LR__3891
254d0                 | LR__3892
254d0     04 26 0E F2 | 	cmp	local05, #4 wz
254d4     02 26 06 A6 |  if_e	mov	local05, #2
254d8                 | LR__3893
254d8                 | ' 	}
254d8                 | ' #line 2590 "ff.c"
254d8                 | ' 	return res;
254d8     13 FB 01 F6 | 	mov	result1, local05
254dc     A7 F0 03 F6 | 	mov	ptra, fp
254e0     B2 00 A0 FD | 	call	#popregs_
254e4                 | _fatfs_cc_dir_remove_ret
254e4     2D 00 64 FD | 	ret
254e8                 | 
254e8                 | _fatfs_cc_get_fileinfo
254e8     0F 4A 05 F6 | 	mov	COUNT_, #15
254ec     A8 00 A0 FD | 	call	#pushregs_
254f0     09 1F 02 F6 | 	mov	local01, arg01
254f4     0A 21 02 F6 | 	mov	local02, arg02
254f8     0F 23 02 FB | 	rdlong	local03, local01
254fc     1C 20 06 F1 | 	add	local02, #28
25500     10 01 48 FC | 	wrbyte	#0, local02
25504     1C 20 86 F1 | 	sub	local02, #28
25508     18 1E 06 F1 | 	add	local01, #24
2550c     0F 25 0A FB | 	rdlong	local04, local01 wz
25510     18 1E 86 F1 | 	sub	local01, #24
25514     90 03 90 AD |  if_e	jmp	#LR__3914
25518     2C 1E 06 F1 | 	add	local01, #44
2551c     0F 25 02 FB | 	rdlong	local04, local01
25520     2C 1E 86 F1 | 	sub	local01, #44
25524     FF FF 7F FF 
25528     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2552c     D8 00 90 AD |  if_e	jmp	#LR__3903
25530     00 26 06 F6 | 	mov	local05, #0
25534     00 28 06 F6 | 	mov	local06, #0
25538     00 2A 06 F6 | 	mov	local07, #0
2553c                 | ' 			si = di = 0;
2553c                 | ' 			hs = 0;
2553c                 | ' 			while (fs->lfnbuf[si] != 0) {
2553c                 | LR__3900
2553c     0C 22 06 F1 | 	add	local03, #12
25540     11 25 02 FB | 	rdlong	local04, local03
25544     0C 22 86 F1 | 	sub	local03, #12
25548     14 2D 02 F6 | 	mov	local08, local06
2554c     01 2C 66 F0 | 	shl	local08, #1
25550     12 2D 02 F1 | 	add	local08, local04
25554     16 25 EA FA | 	rdword	local04, local08 wz
25558     90 00 90 AD |  if_e	jmp	#LR__3902
2555c     0C 22 06 F1 | 	add	local03, #12
25560     11 2F 02 FB | 	rdlong	local09, local03
25564     0C 22 86 F1 | 	sub	local03, #12
25568     14 31 02 F6 | 	mov	local10, local06
2556c     01 30 66 F0 | 	shl	local10, #1
25570     17 31 02 F1 | 	add	local10, local09
25574     18 33 E2 FA | 	rdword	local11, local10
25578     15 25 02 F6 | 	mov	local04, local07
2557c     0F 24 4E F7 | 	zerox	local04, #15 wz
25580     01 28 06 F1 | 	add	local06, #1
25584     24 00 90 5D |  if_ne	jmp	#LR__3901
25588     19 35 32 F9 | 	getword	local12, local11, #0
2558c     6C 00 00 FF 
25590     00 34 16 F2 | 	cmp	local12, ##55296 wc
25594     14 00 90 CD |  if_b	jmp	#LR__3901
25598     19 37 32 F9 | 	getword	local13, local11, #0
2559c     70 00 00 FF 
255a0     00 36 16 F2 | 	cmp	local13, ##57344 wc
255a4     19 2B 02 C6 |  if_b	mov	local07, local11
255a8                 | ' 					hs = wc; continue;
255a8     90 FF 9F CD |  if_b	jmp	#LR__3900
255ac                 | LR__3901
255ac     15 13 32 F9 | 	getword	arg01, local07, #0
255b0     10 12 66 F0 | 	shl	arg01, #16
255b4     19 33 32 F9 | 	getword	local11, local11, #0
255b8     19 13 42 F5 | 	or	arg01, local11
255bc     13 15 02 F6 | 	mov	arg02, local05
255c0     1C 20 06 F1 | 	add	local02, #28
255c4     10 15 02 F1 | 	add	arg02, local02
255c8     FF 16 06 F6 | 	mov	arg03, #255
255cc     13 17 82 F1 | 	sub	arg03, local05
255d0     1C 20 86 F1 | 	sub	local02, #28
255d4     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
255d8     FD 38 0A F6 | 	mov	local14, result1 wz
255dc     00 26 06 A6 |  if_e	mov	local05, #0
255e0     1C 27 02 51 |  if_ne	add	local05, local14
255e4     00 2A 06 56 |  if_ne	mov	local07, #0
255e8     50 FF 9F 5D |  if_ne	jmp	#LR__3900
255ec                 | LR__3902
255ec     15 25 02 F6 | 	mov	local04, local07
255f0     0F 24 4E F7 | 	zerox	local04, #15 wz
255f4     00 26 06 56 |  if_ne	mov	local05, #0
255f8     1C 20 06 F1 | 	add	local02, #28
255fc     10 27 02 F1 | 	add	local05, local02
25600     13 01 48 FC | 	wrbyte	#0, local05
25604     1C 20 86 F1 | 	sub	local02, #28
25608                 | LR__3903
25608     00 26 06 F6 | 	mov	local05, #0
2560c     00 28 06 F6 | 	mov	local06, #0
25610                 | ' 			fno->fname[di] = 0;
25610                 | ' 		}
25610                 | ' 	}
25610                 | ' 
25610                 | ' 	si = di = 0;
25610                 | ' 	while (si < 11) {
25610                 | LR__3904
25610     0B 28 16 F2 | 	cmp	local06, #11 wc
25614     20 01 90 3D |  if_ae	jmp	#LR__3907
25618     1C 1E 06 F1 | 	add	local01, #28
2561c     0F 2F 02 FB | 	rdlong	local09, local01
25620     1C 1E 86 F1 | 	sub	local01, #28
25624     14 31 02 F6 | 	mov	local10, local06
25628     17 31 02 F1 | 	add	local10, local09
2562c     18 33 C2 FA | 	rdbyte	local11, local10
25630     19 25 32 F9 | 	getword	local04, local11, #0
25634     20 24 0E F2 | 	cmp	local04, #32 wz
25638     01 28 06 F1 | 	add	local06, #1
2563c     D0 FF 9F AD |  if_e	jmp	#LR__3904
25640     19 25 32 F9 | 	getword	local04, local11, #0
25644     05 24 0E F2 | 	cmp	local04, #5 wz
25648     E5 32 06 A6 |  if_e	mov	local11, #229
2564c     09 28 0E F2 | 	cmp	local06, #9 wz
25650     20 00 90 5D |  if_ne	jmp	#LR__3905
25654     0C 26 16 F2 | 	cmp	local05, #12 wc
25658     18 00 90 3D |  if_ae	jmp	#LR__3905
2565c     13 37 02 F6 | 	mov	local13, local05
25660     0C 20 06 F1 | 	add	local02, #12
25664     10 37 02 F1 | 	add	local13, local02
25668     1B 5D 48 FC | 	wrbyte	#46, local13
2566c     01 26 06 F1 | 	add	local05, #1
25670     0C 20 86 F1 | 	sub	local02, #12
25674                 | LR__3905
25674     19 13 32 F9 | 	getword	arg01, local11, #0
25678     07 12 4E F7 | 	zerox	arg01, #7 wz
2567c     00 FA 05 56 |  if_ne	mov	result1, #0
25680                 | ' 
25680                 | ' 	return 0;
25680     00 FA 05 A6 |  if_e	mov	result1, #0
25684     00 FA 0D F2 | 	cmp	result1, #0 wz
25688     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2568c     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
25690     50 00 90 AD |  if_e	jmp	#LR__3906
25694     1C 1E 06 F1 | 	add	local01, #28
25698     0F 31 02 FB | 	rdlong	local10, local01
2569c     1C 1E 86 F1 | 	sub	local01, #28
256a0     14 2D 02 F6 | 	mov	local08, local06
256a4     18 2D 02 F1 | 	add	local08, local10
256a8     16 13 CA FA | 	rdbyte	arg01, local08 wz
256ac     00 FA 05 56 |  if_ne	mov	result1, #0
256b0                 | ' 
256b0                 | ' 	return 0;
256b0     00 FA 05 A6 |  if_e	mov	result1, #0
256b4     00 FA 0D F2 | 	cmp	result1, #0 wz
256b8     28 00 90 AD |  if_e	jmp	#LR__3906
256bc     19 33 32 F9 | 	getword	local11, local11, #0
256c0     08 32 66 F0 | 	shl	local11, #8
256c4     1C 1E 06 F1 | 	add	local01, #28
256c8     0F 39 02 FB | 	rdlong	local14, local01
256cc     1C 1E 86 F1 | 	sub	local01, #28
256d0     14 2F 02 F6 | 	mov	local09, local06
256d4     1C 2F 02 F1 | 	add	local09, local14
256d8     17 35 C2 FA | 	rdbyte	local12, local09
256dc     1A 33 42 F5 | 	or	local11, local12
256e0     01 28 06 F1 | 	add	local06, #1
256e4                 | LR__3906
256e4     19 13 02 F6 | 	mov	arg01, local11
256e8     01 00 00 FF 
256ec     52 15 06 F6 | 	mov	arg02, ##850
256f0     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
256f4     FD 32 02 F6 | 	mov	local11, result1
256f8     19 25 02 F6 | 	mov	local04, local11
256fc     0F 24 4E F7 | 	zerox	local04, #15 wz
25700     00 26 06 A6 |  if_e	mov	local05, #0
25704     30 00 90 AD |  if_e	jmp	#LR__3907
25708     19 13 32 F9 | 	getword	arg01, local11, #0
2570c     13 15 02 F6 | 	mov	arg02, local05
25710     0C 20 06 F1 | 	add	local02, #12
25714     10 15 02 F1 | 	add	arg02, local02
25718     0C 16 06 F6 | 	mov	arg03, #12
2571c     13 17 82 F1 | 	sub	arg03, local05
25720     0C 20 86 F1 | 	sub	local02, #12
25724     EC DF BF FD | 	call	#_fatfs_cc_put_utf
25728     FD 38 0A F6 | 	mov	local14, result1 wz
2572c     00 26 06 A6 |  if_e	mov	local05, #0
25730     1C 27 02 51 |  if_ne	add	local05, local14
25734     D8 FE 9F 5D |  if_ne	jmp	#LR__3904
25738                 | LR__3907
25738     13 25 02 F6 | 	mov	local04, local05
2573c     0C 20 06 F1 | 	add	local02, #12
25740     10 25 02 F1 | 	add	local04, local02
25744     12 01 48 FC | 	wrbyte	#0, local04
25748     10 20 06 F1 | 	add	local02, #16
2574c     10 25 CA FA | 	rdbyte	local04, local02 wz
25750     1C 20 86 F1 | 	sub	local02, #28
25754     F8 00 90 5D |  if_ne	jmp	#LR__3913
25758     00 26 0E F2 | 	cmp	local05, #0 wz
2575c     1C 00 90 5D |  if_ne	jmp	#LR__3908
25760     13 37 02 F6 | 	mov	local13, local05
25764     1C 20 06 F1 | 	add	local02, #28
25768     10 37 02 F1 | 	add	local13, local02
2576c     1B 7F 48 FC | 	wrbyte	#63, local13
25770     01 26 06 F1 | 	add	local05, #1
25774     1C 20 86 F1 | 	sub	local02, #28
25778     A4 00 90 FD | 	jmp	#LR__3912
2577c                 | LR__3908
2577c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2577c     00 26 06 F6 | 	mov	local05, #0
25780     00 28 06 F6 | 	mov	local06, #0
25784     08 3A 06 F6 | 	mov	local15, #8
25788                 | LR__3909
25788     14 25 02 F6 | 	mov	local04, local06
2578c     0C 20 06 F1 | 	add	local02, #12
25790     10 25 02 F1 | 	add	local04, local02
25794     12 37 CA FA | 	rdbyte	local13, local04 wz
25798     0C 20 86 F1 | 	sub	local02, #12
2579c     80 00 90 AD |  if_e	jmp	#LR__3911
257a0     14 2D 02 F6 | 	mov	local08, local06
257a4     0C 20 06 F1 | 	add	local02, #12
257a8     10 2D 02 F1 | 	add	local08, local02
257ac     16 33 C2 FA | 	rdbyte	local11, local08
257b0     19 39 32 F9 | 	getword	local14, local11, #0
257b4     2E 38 0E F2 | 	cmp	local14, #46 wz
257b8     0C 20 86 F1 | 	sub	local02, #12
257bc     10 3A 06 A6 |  if_e	mov	local15, #16
257c0     19 39 32 F9 | 	getword	local14, local11, #0
257c4     41 38 16 F2 | 	cmp	local14, #65 wc
257c8     30 00 90 CD |  if_b	jmp	#LR__3910
257cc     19 2D 32 F9 | 	getword	local08, local11, #0
257d0     5B 2C 16 F2 | 	cmp	local08, #91 wc
257d4     24 00 90 3D |  if_ae	jmp	#LR__3910
257d8     1C 1E 06 F1 | 	add	local01, #28
257dc     0F 2F 02 FB | 	rdlong	local09, local01
257e0     1C 1E 86 F1 | 	sub	local01, #28
257e4     0C 2E 06 F1 | 	add	local09, #12
257e8     17 31 C2 FA | 	rdbyte	local10, local09
257ec     1D 39 E2 F8 | 	getbyte	local14, local15, #0
257f0     1C 31 CA F7 | 	test	local10, local14 wz
257f4     19 33 32 59 |  if_ne	getword	local11, local11, #0
257f8     20 32 06 51 |  if_ne	add	local11, #32
257fc                 | LR__3910
257fc     13 39 02 F6 | 	mov	local14, local05
25800     1C 20 06 F1 | 	add	local02, #28
25804     10 39 02 F1 | 	add	local14, local02
25808     19 33 32 F9 | 	getword	local11, local11, #0
2580c     1C 33 42 FC | 	wrbyte	local11, local14
25810     01 28 06 F1 | 	add	local06, #1
25814     01 26 06 F1 | 	add	local05, #1
25818     1C 20 86 F1 | 	sub	local02, #28
2581c     68 FF 9F FD | 	jmp	#LR__3909
25820                 | LR__3911
25820                 | LR__3912
25820     1C 20 06 F1 | 	add	local02, #28
25824     10 27 02 F1 | 	add	local05, local02
25828     13 01 48 FC | 	wrbyte	#0, local05
2582c     1C 1E 06 F1 | 	add	local01, #28
25830     0F 25 02 FB | 	rdlong	local04, local01
25834     1C 1E 86 F1 | 	sub	local01, #28
25838     0C 24 06 F1 | 	add	local04, #12
2583c     12 37 CA FA | 	rdbyte	local13, local04 wz
25840     1C 20 86 F1 | 	sub	local02, #28
25844     0C 20 06 A1 |  if_e	add	local02, #12
25848     10 01 48 AC |  if_e	wrbyte	#0, local02
2584c     0C 20 86 A1 |  if_e	sub	local02, #12
25850                 | LR__3913
25850     1C 1E 06 F1 | 	add	local01, #28
25854     0F 35 02 FB | 	rdlong	local12, local01
25858     0B 34 06 F1 | 	add	local12, #11
2585c     1A 25 C2 FA | 	rdbyte	local04, local12
25860     3F 24 06 F5 | 	and	local04, #63
25864     08 20 06 F1 | 	add	local02, #8
25868     10 25 42 FC | 	wrbyte	local04, local02
2586c     08 20 86 F1 | 	sub	local02, #8
25870     0F 13 02 FB | 	rdlong	arg01, local01
25874     1C 12 06 F1 | 	add	arg01, #28
25878                 | ' {
25878                 | ' 
25878                 | ' 	return *((DWORD*)ptr);
25878     09 FB 01 FB | 	rdlong	result1, arg01
2587c     10 FB 61 FC | 	wrlong	result1, local02
25880     0F 13 02 FB | 	rdlong	arg01, local01
25884     16 12 06 F1 | 	add	arg01, #22
25888                 | ' {
25888                 | ' 
25888                 | ' 	return *((WORD*)ptr);
25888     09 FB E1 FA | 	rdword	result1, arg01
2588c     06 20 06 F1 | 	add	local02, #6
25890     10 FB 51 FC | 	wrword	result1, local02
25894     0F 13 02 FB | 	rdlong	arg01, local01
25898     18 12 06 F1 | 	add	arg01, #24
2589c                 | ' {
2589c                 | ' 
2589c                 | ' 	return *((WORD*)ptr);
2589c     09 FB E1 FA | 	rdword	result1, arg01
258a0     02 20 86 F1 | 	sub	local02, #2
258a4     10 FB 51 FC | 	wrword	result1, local02
258a8                 | LR__3914
258a8     A7 F0 03 F6 | 	mov	ptra, fp
258ac     B2 00 A0 FD | 	call	#popregs_
258b0                 | _fatfs_cc_get_fileinfo_ret
258b0     2D 00 64 FD | 	ret
258b4                 | 
258b4                 | _fatfs_cc_create_name
258b4     0D 4A 05 F6 | 	mov	COUNT_, #13
258b8     A8 00 A0 FD | 	call	#pushregs_
258bc     34 F0 07 F1 | 	add	ptra, #52
258c0     04 4E 05 F1 | 	add	fp, #4
258c4     A7 12 62 FC | 	wrlong	arg01, fp
258c8     04 4E 05 F1 | 	add	fp, #4
258cc     A7 14 62 FC | 	wrlong	arg02, fp
258d0     0A FB 01 FB | 	rdlong	result1, arg02
258d4     28 4E 05 F1 | 	add	fp, #40
258d8     A7 FA 61 FC | 	wrlong	result1, fp
258dc     2C 4E 85 F1 | 	sub	fp, #44
258e0     A7 FA 01 FB | 	rdlong	result1, fp
258e4     FD 1E 02 FB | 	rdlong	local01, result1
258e8     0C 1E 06 F1 | 	add	local01, #12
258ec     0F 21 02 FB | 	rdlong	local02, local01
258f0     14 4E 05 F1 | 	add	fp, #20
258f4     A7 20 62 FC | 	wrlong	local02, fp
258f8     14 4E 05 F1 | 	add	fp, #20
258fc     A7 00 68 FC | 	wrlong	#0, fp
25900     2C 4E 85 F1 | 	sub	fp, #44
25904                 | ' 
25904                 | ' 
25904                 | ' 
25904                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
25904                 | ' 	for (;;) {
25904                 | LR__3920
25904     30 4E 05 F1 | 	add	fp, #48
25908     A7 12 02 F6 | 	mov	arg01, fp
2590c     30 4E 85 F1 | 	sub	fp, #48
25910     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
25914     1C 4E 05 F1 | 	add	fp, #28
25918     A7 FA 61 FC | 	wrlong	result1, fp
2591c     1C 4E 85 F1 | 	sub	fp, #28
25920     FF FF 7F FF 
25924     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25928     06 FA 05 A6 |  if_e	mov	result1, #6
2592c     74 08 90 AD |  if_e	jmp	#LR__3960
25930     1C 4E 05 F1 | 	add	fp, #28
25934     A7 1E 02 FB | 	rdlong	local01, fp
25938     1C 4E 85 F1 | 	sub	fp, #28
2593c     80 00 00 FF 
25940     00 1E 16 F2 | 	cmp	local01, ##65536 wc
25944     3C 00 90 CD |  if_b	jmp	#LR__3921
25948     18 4E 05 F1 | 	add	fp, #24
2594c     A7 22 02 FB | 	rdlong	local03, fp
25950     14 4E 05 F1 | 	add	fp, #20
25954     A7 1E 02 FB | 	rdlong	local01, fp
25958     0F 25 02 F6 | 	mov	local04, local01
2595c     01 24 06 F1 | 	add	local04, #1
25960     A7 24 62 FC | 	wrlong	local04, fp
25964     01 1E 66 F0 | 	shl	local01, #1
25968     11 1F 02 F1 | 	add	local01, local03
2596c     10 4E 85 F1 | 	sub	fp, #16
25970     A7 26 02 FB | 	rdlong	local05, fp
25974     1C 4E 85 F1 | 	sub	fp, #28
25978     13 29 02 F6 | 	mov	local06, local05
2597c     10 28 46 F0 | 	shr	local06, #16
25980     0F 29 52 FC | 	wrword	local06, local01
25984                 | LR__3921
25984     1C 4E 05 F1 | 	add	fp, #28
25988     A7 1E 02 FB | 	rdlong	local01, fp
2598c     08 4E 85 F1 | 	sub	fp, #8
25990     A7 1E 52 FC | 	wrword	local01, fp
25994     A7 1E E2 FA | 	rdword	local01, fp
25998     14 4E 85 F1 | 	sub	fp, #20
2599c     20 1E 16 F2 | 	cmp	local01, #32 wc
259a0     B0 00 90 CD |  if_b	jmp	#LR__3923
259a4     14 4E 05 F1 | 	add	fp, #20
259a8     A7 1E E2 FA | 	rdword	local01, fp
259ac     14 4E 85 F1 | 	sub	fp, #20
259b0     2F 1E 0E F2 | 	cmp	local01, #47 wz
259b4     14 4E 05 51 |  if_ne	add	fp, #20
259b8     A7 24 E2 5A |  if_ne	rdword	local04, fp
259bc     14 4E 85 51 |  if_ne	sub	fp, #20
259c0     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
259c4     8C 00 90 AD |  if_e	jmp	#LR__3923
259c8     14 4E 05 F1 | 	add	fp, #20
259cc     A7 12 E2 FA | 	rdword	arg01, fp
259d0     14 4E 85 F1 | 	sub	fp, #20
259d4     80 12 16 F2 | 	cmp	arg01, #128 wc
259d8     24 00 90 3D |  if_ae	jmp	#LR__3922
259dc     5C 01 00 FF 
259e0     18 13 06 F6 | 	mov	arg01, ##@LR__4582
259e4     14 4E 05 F1 | 	add	fp, #20
259e8     A7 14 E2 FA | 	rdword	arg02, fp
259ec     14 4E 85 F1 | 	sub	fp, #20
259f0     FC D0 BF FD | 	call	#_fatfs_cc_strchr
259f4     00 FA 0D F2 | 	cmp	result1, #0 wz
259f8     06 FA 05 56 |  if_ne	mov	result1, #6
259fc     A4 07 90 5D |  if_ne	jmp	#LR__3960
25a00                 | LR__3922
25a00     2C 4E 05 F1 | 	add	fp, #44
25a04     A7 28 02 FB | 	rdlong	local06, fp
25a08     2C 4E 85 F1 | 	sub	fp, #44
25a0c     FF 28 16 F2 | 	cmp	local06, #255 wc
25a10     06 FA 05 36 |  if_ae	mov	result1, #6
25a14     8C 07 90 3D |  if_ae	jmp	#LR__3960
25a18     18 4E 05 F1 | 	add	fp, #24
25a1c     A7 22 02 FB | 	rdlong	local03, fp
25a20     14 4E 05 F1 | 	add	fp, #20
25a24     A7 20 02 FB | 	rdlong	local02, fp
25a28     10 25 02 F6 | 	mov	local04, local02
25a2c     01 24 06 F1 | 	add	local04, #1
25a30     A7 24 62 FC | 	wrlong	local04, fp
25a34     10 1F 02 F6 | 	mov	local01, local02
25a38     01 1E 66 F0 | 	shl	local01, #1
25a3c     11 1F 02 F1 | 	add	local01, local03
25a40     18 4E 85 F1 | 	sub	fp, #24
25a44     A7 28 E2 FA | 	rdword	local06, fp
25a48     14 4E 85 F1 | 	sub	fp, #20
25a4c     0F 29 52 FC | 	wrword	local06, local01
25a50     B0 FE 9F FD | 	jmp	#LR__3920
25a54                 | LR__3923
25a54     14 4E 05 F1 | 	add	fp, #20
25a58     A7 2A E2 FA | 	rdword	local07, fp
25a5c     14 4E 85 F1 | 	sub	fp, #20
25a60     20 2A 16 F2 | 	cmp	local07, #32 wc
25a64     10 4E 05 C1 |  if_b	add	fp, #16
25a68     A7 08 48 CC |  if_b	wrbyte	#4, fp
25a6c     10 4E 85 C1 |  if_b	sub	fp, #16
25a70     74 00 90 CD |  if_b	jmp	#LR__3928
25a74     97 24 48 FB | 	callpa	#(@LR__3926-@LR__3924)>>2,fcache_load_ptr_
25a78                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
25a78                 | LR__3924
25a78     30 4E 05 F1 | 	add	fp, #48
25a7c     A7 24 02 FB | 	rdlong	local04, fp
25a80     30 4E 85 F1 | 	sub	fp, #48
25a84     12 2B C2 FA | 	rdbyte	local07, local04
25a88     2F 2A 0E F2 | 	cmp	local07, #47 wz
25a8c     18 00 90 AD |  if_e	jmp	#LR__3925
25a90     30 4E 05 F1 | 	add	fp, #48
25a94     A7 24 02 FB | 	rdlong	local04, fp
25a98     30 4E 85 F1 | 	sub	fp, #48
25a9c     12 21 C2 FA | 	rdbyte	local02, local04
25aa0     5C 20 0E F2 | 	cmp	local02, #92 wz
25aa4     18 00 90 5D |  if_ne	jmp	#LR__3927
25aa8                 | LR__3925
25aa8     30 4E 05 F1 | 	add	fp, #48
25aac     A7 1E 02 FB | 	rdlong	local01, fp
25ab0     01 1E 06 F1 | 	add	local01, #1
25ab4     A7 1E 62 FC | 	wrlong	local01, fp
25ab8     30 4E 85 F1 | 	sub	fp, #48
25abc     B8 FF 9F FD | 	jmp	#LR__3924
25ac0                 | LR__3926
25ac0                 | LR__3927
25ac0     10 4E 05 F1 | 	add	fp, #16
25ac4     A7 00 48 FC | 	wrbyte	#0, fp
25ac8     20 4E 05 F1 | 	add	fp, #32
25acc     A7 28 02 FB | 	rdlong	local06, fp
25ad0     30 4E 85 F1 | 	sub	fp, #48
25ad4     14 2B C2 FA | 	rdbyte	local07, local06
25ad8     20 2A 16 F2 | 	cmp	local07, #32 wc
25adc     10 4E 05 C1 |  if_b	add	fp, #16
25ae0     A7 08 48 CC |  if_b	wrbyte	#4, fp
25ae4     10 4E 85 C1 |  if_b	sub	fp, #16
25ae8                 | LR__3928
25ae8     08 4E 05 F1 | 	add	fp, #8
25aec     A7 2A 02 FB | 	rdlong	local07, fp
25af0     28 4E 05 F1 | 	add	fp, #40
25af4     A7 1E 02 FB | 	rdlong	local01, fp
25af8     30 4E 85 F1 | 	sub	fp, #48
25afc     15 1F 62 FC | 	wrlong	local01, local07
25b00     97 38 48 FB | 	callpa	#(@LR__3930-@LR__3929)>>2,fcache_load_ptr_
25b04                 | ' 	}
25b04                 | ' 	*path = p;
25b04                 | ' #line 2862 "ff.c"
25b04                 | ' 	while (di) {
25b04                 | LR__3929
25b04     2C 4E 05 F1 | 	add	fp, #44
25b08     A7 2A 0A FB | 	rdlong	local07, fp wz
25b0c     2C 4E 85 F1 | 	sub	fp, #44
25b10     60 00 90 AD |  if_e	jmp	#LR__3931
25b14     18 4E 05 F1 | 	add	fp, #24
25b18     A7 28 02 FB | 	rdlong	local06, fp
25b1c     14 4E 05 F1 | 	add	fp, #20
25b20     A7 24 02 FB | 	rdlong	local04, fp
25b24     01 24 86 F1 | 	sub	local04, #1
25b28     01 24 66 F0 | 	shl	local04, #1
25b2c     14 25 02 F1 | 	add	local04, local06
25b30     12 29 E2 FA | 	rdword	local06, local04
25b34     18 4E 85 F1 | 	sub	fp, #24
25b38     A7 28 52 FC | 	wrword	local06, fp
25b3c     A7 2A E2 FA | 	rdword	local07, fp
25b40     14 4E 85 F1 | 	sub	fp, #20
25b44     20 2A 0E F2 | 	cmp	local07, #32 wz
25b48     14 4E 05 51 |  if_ne	add	fp, #20
25b4c     A7 1E E2 5A |  if_ne	rdword	local01, fp
25b50     14 4E 85 51 |  if_ne	sub	fp, #20
25b54     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
25b58     18 00 90 5D |  if_ne	jmp	#LR__3931
25b5c     2C 4E 05 F1 | 	add	fp, #44
25b60     A7 1E 02 FB | 	rdlong	local01, fp
25b64     01 1E 86 F1 | 	sub	local01, #1
25b68     A7 1E 62 FC | 	wrlong	local01, fp
25b6c     2C 4E 85 F1 | 	sub	fp, #44
25b70     90 FF 9F FD | 	jmp	#LR__3929
25b74                 | LR__3930
25b74                 | LR__3931
25b74     18 4E 05 F1 | 	add	fp, #24
25b78     A7 2C 02 FB | 	rdlong	local08, fp
25b7c     14 4E 05 F1 | 	add	fp, #20
25b80     A7 24 02 FB | 	rdlong	local04, fp
25b84     01 24 66 F0 | 	shl	local04, #1
25b88     16 25 02 F1 | 	add	local04, local08
25b8c     12 01 58 FC | 	wrword	#0, local04
25b90     A7 2A 0A FB | 	rdlong	local07, fp wz
25b94     2C 4E 85 F1 | 	sub	fp, #44
25b98     06 FA 05 A6 |  if_e	mov	result1, #6
25b9c     04 06 90 AD |  if_e	jmp	#LR__3960
25ba0                 | ' 
25ba0                 | ' 
25ba0                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
25ba0     28 4E 05 F1 | 	add	fp, #40
25ba4     A7 00 68 FC | 	wrlong	#0, fp
25ba8     28 4E 85 F1 | 	sub	fp, #40
25bac     97 22 48 FB | 	callpa	#(@LR__3933-@LR__3932)>>2,fcache_load_ptr_
25bb0                 | LR__3932
25bb0     18 4E 05 F1 | 	add	fp, #24
25bb4     A7 2E 02 FB | 	rdlong	local09, fp
25bb8     10 4E 05 F1 | 	add	fp, #16
25bbc     A7 30 02 FB | 	rdlong	local10, fp
25bc0     28 4E 85 F1 | 	sub	fp, #40
25bc4     01 30 66 F0 | 	shl	local10, #1
25bc8     17 31 02 F1 | 	add	local10, local09
25bcc     18 33 E2 FA | 	rdword	local11, local10
25bd0     20 32 0E F2 | 	cmp	local11, #32 wz
25bd4     1C 00 90 5D |  if_ne	jmp	#LR__3934
25bd8     28 4E 05 F1 | 	add	fp, #40
25bdc     A7 34 02 FB | 	rdlong	local12, fp
25be0     1A 27 02 F6 | 	mov	local05, local12
25be4     01 26 06 F1 | 	add	local05, #1
25be8     A7 26 62 FC | 	wrlong	local05, fp
25bec     28 4E 85 F1 | 	sub	fp, #40
25bf0     BC FF 9F FD | 	jmp	#LR__3932
25bf4                 | LR__3933
25bf4                 | LR__3934
25bf4     28 4E 05 F1 | 	add	fp, #40
25bf8     A7 2A 02 FB | 	rdlong	local07, fp
25bfc     28 4E 85 F1 | 	sub	fp, #40
25c00     01 2A 16 F2 | 	cmp	local07, #1 wc
25c04     28 00 90 3D |  if_ae	jmp	#LR__3935
25c08     18 4E 05 F1 | 	add	fp, #24
25c0c     A7 22 02 FB | 	rdlong	local03, fp
25c10     10 4E 05 F1 | 	add	fp, #16
25c14     A7 2E 02 FB | 	rdlong	local09, fp
25c18     28 4E 85 F1 | 	sub	fp, #40
25c1c     01 2E 66 F0 | 	shl	local09, #1
25c20     11 2F 02 F1 | 	add	local09, local03
25c24     17 1F E2 FA | 	rdword	local01, local09
25c28     2E 1E 0E F2 | 	cmp	local01, #46 wz
25c2c     14 00 90 5D |  if_ne	jmp	#LR__3936
25c30                 | LR__3935
25c30     10 4E 05 F1 | 	add	fp, #16
25c34     A7 2A C2 FA | 	rdbyte	local07, fp
25c38     03 2A 46 F5 | 	or	local07, #3
25c3c     A7 2A 42 FC | 	wrbyte	local07, fp
25c40     10 4E 85 F1 | 	sub	fp, #16
25c44                 | LR__3936
25c44     97 2C 48 FB | 	callpa	#(@LR__3938-@LR__3937)>>2,fcache_load_ptr_
25c48                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
25c48                 | LR__3937
25c48     2C 4E 05 F1 | 	add	fp, #44
25c4c     A7 2A 02 FB | 	rdlong	local07, fp
25c50     2C 4E 85 F1 | 	sub	fp, #44
25c54     01 2A 16 F2 | 	cmp	local07, #1 wc
25c58     44 00 90 CD |  if_b	jmp	#LR__3939
25c5c     18 4E 05 F1 | 	add	fp, #24
25c60     A7 28 02 FB | 	rdlong	local06, fp
25c64     14 4E 05 F1 | 	add	fp, #20
25c68     A7 22 02 FB | 	rdlong	local03, fp
25c6c     2C 4E 85 F1 | 	sub	fp, #44
25c70     01 22 86 F1 | 	sub	local03, #1
25c74     01 22 66 F0 | 	shl	local03, #1
25c78     14 23 02 F1 | 	add	local03, local06
25c7c     11 1F E2 FA | 	rdword	local01, local03
25c80     2E 1E 0E F2 | 	cmp	local01, #46 wz
25c84     18 00 90 AD |  if_e	jmp	#LR__3939
25c88     2C 4E 05 F1 | 	add	fp, #44
25c8c     A7 1E 02 FB | 	rdlong	local01, fp
25c90     01 1E 86 F1 | 	sub	local01, #1
25c94     A7 1E 62 FC | 	wrlong	local01, fp
25c98     2C 4E 85 F1 | 	sub	fp, #44
25c9c     A8 FF 9F FD | 	jmp	#LR__3937
25ca0                 | LR__3938
25ca0                 | LR__3939
25ca0     04 4E 05 F1 | 	add	fp, #4
25ca4     A7 12 02 FB | 	rdlong	arg01, fp
25ca8     04 4E 85 F1 | 	sub	fp, #4
25cac     20 12 06 F1 | 	add	arg01, #32
25cb0     20 14 06 F6 | 	mov	arg02, #32
25cb4     0B 16 06 F6 | 	mov	arg03, #11
25cb8     09 37 02 F6 | 	mov	local13, arg01
25cbc     98 00 A0 FD | 	call	#\builtin_bytefill_
25cc0     1B FB 01 F6 | 	mov	result1, local13
25cc4     0C 4E 05 F1 | 	add	fp, #12
25cc8     A7 00 48 FC | 	wrbyte	#0, fp
25ccc     A7 2A C2 FA | 	rdbyte	local07, fp
25cd0     14 4E 05 F1 | 	add	fp, #20
25cd4     A7 2A 62 FC | 	wrlong	local07, fp
25cd8     04 4E 05 F1 | 	add	fp, #4
25cdc     A7 10 68 FC | 	wrlong	#8, fp
25ce0     24 4E 85 F1 | 	sub	fp, #36
25ce4                 | ' 
25ce4                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
25ce4                 | ' 	i = b = 0; ni = 8;
25ce4                 | ' 	for (;;) {
25ce4                 | LR__3940
25ce4     18 4E 05 F1 | 	add	fp, #24
25ce8     A7 22 02 FB | 	rdlong	local03, fp
25cec     10 4E 05 F1 | 	add	fp, #16
25cf0     A7 2E 02 FB | 	rdlong	local09, fp
25cf4     17 25 02 F6 | 	mov	local04, local09
25cf8     01 24 06 F1 | 	add	local04, #1
25cfc     A7 24 62 FC | 	wrlong	local04, fp
25d00     01 2E 66 F0 | 	shl	local09, #1
25d04     11 2F 02 F1 | 	add	local09, local03
25d08     17 29 E2 FA | 	rdword	local06, local09
25d0c     14 4E 85 F1 | 	sub	fp, #20
25d10     A7 28 52 FC | 	wrword	local06, fp
25d14     A7 2A EA FA | 	rdword	local07, fp wz
25d18     14 4E 85 F1 | 	sub	fp, #20
25d1c     74 03 90 AD |  if_e	jmp	#LR__3956
25d20     14 4E 05 F1 | 	add	fp, #20
25d24     A7 2A E2 FA | 	rdword	local07, fp
25d28     14 4E 85 F1 | 	sub	fp, #20
25d2c     20 2A 0E F2 | 	cmp	local07, #32 wz
25d30     30 00 90 AD |  if_e	jmp	#LR__3941
25d34     14 4E 05 F1 | 	add	fp, #20
25d38     A7 1E E2 FA | 	rdword	local01, fp
25d3c     14 4E 85 F1 | 	sub	fp, #20
25d40     2E 1E 0E F2 | 	cmp	local01, #46 wz
25d44     34 00 90 5D |  if_ne	jmp	#LR__3942
25d48     28 4E 05 F1 | 	add	fp, #40
25d4c     A7 24 02 FB | 	rdlong	local04, fp
25d50     04 4E 05 F1 | 	add	fp, #4
25d54     A7 30 02 FB | 	rdlong	local10, fp
25d58     2C 4E 85 F1 | 	sub	fp, #44
25d5c     18 25 0A F2 | 	cmp	local04, local10 wz
25d60     18 00 90 AD |  if_e	jmp	#LR__3942
25d64                 | LR__3941
25d64     10 4E 05 F1 | 	add	fp, #16
25d68     A7 2A C2 FA | 	rdbyte	local07, fp
25d6c     03 2A 46 F5 | 	or	local07, #3
25d70     A7 2A 42 FC | 	wrbyte	local07, fp
25d74     10 4E 85 F1 | 	sub	fp, #16
25d78                 | ' 			cf |=  0x01  |  0x02 ;
25d78                 | ' 			continue;
25d78     68 FF 9F FD | 	jmp	#LR__3940
25d7c                 | LR__3942
25d7c     20 4E 05 F1 | 	add	fp, #32
25d80     A7 2A 02 FB | 	rdlong	local07, fp
25d84     04 4E 05 F1 | 	add	fp, #4
25d88     A7 1E 02 FB | 	rdlong	local01, fp
25d8c     24 4E 85 F1 | 	sub	fp, #36
25d90     0F 2B 12 F2 | 	cmp	local07, local01 wc
25d94     1C 00 90 3D |  if_ae	jmp	#LR__3943
25d98     28 4E 05 F1 | 	add	fp, #40
25d9c     A7 2C 02 FB | 	rdlong	local08, fp
25da0     04 4E 05 F1 | 	add	fp, #4
25da4     A7 30 02 FB | 	rdlong	local10, fp
25da8     2C 4E 85 F1 | 	sub	fp, #44
25dac     18 2D 0A F2 | 	cmp	local08, local10 wz
25db0     B0 00 90 5D |  if_ne	jmp	#LR__3945
25db4                 | LR__3943
25db4     24 4E 05 F1 | 	add	fp, #36
25db8     A7 2A 02 FB | 	rdlong	local07, fp
25dbc     24 4E 85 F1 | 	sub	fp, #36
25dc0     0B 2A 0E F2 | 	cmp	local07, #11 wz
25dc4     18 00 90 5D |  if_ne	jmp	#LR__3944
25dc8     10 4E 05 F1 | 	add	fp, #16
25dcc     A7 2A C2 FA | 	rdbyte	local07, fp
25dd0     03 2A 46 F5 | 	or	local07, #3
25dd4     A7 2A 42 FC | 	wrbyte	local07, fp
25dd8     10 4E 85 F1 | 	sub	fp, #16
25ddc                 | ' 				cf |=  0x01  |  0x02 ;
25ddc                 | ' 				break;
25ddc     B4 02 90 FD | 	jmp	#LR__3956
25de0                 | LR__3944
25de0     28 4E 05 F1 | 	add	fp, #40
25de4     A7 2A 02 FB | 	rdlong	local07, fp
25de8     04 4E 05 F1 | 	add	fp, #4
25dec     A7 1E 02 FB | 	rdlong	local01, fp
25df0     2C 4E 85 F1 | 	sub	fp, #44
25df4     0F 2B 0A F2 | 	cmp	local07, local01 wz
25df8     10 4E 05 51 |  if_ne	add	fp, #16
25dfc     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
25e00     03 2A 46 55 |  if_ne	or	local07, #3
25e04     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
25e08     10 4E 85 51 |  if_ne	sub	fp, #16
25e0c     28 4E 05 F1 | 	add	fp, #40
25e10     A7 2A 02 FB | 	rdlong	local07, fp
25e14     04 4E 05 F1 | 	add	fp, #4
25e18     A7 20 02 FB | 	rdlong	local02, fp
25e1c     2C 4E 85 F1 | 	sub	fp, #44
25e20     10 2B 1A F2 | 	cmp	local07, local02 wcz
25e24     6C 02 90 1D |  if_a	jmp	#LR__3956
25e28     2C 4E 05 F1 | 	add	fp, #44
25e2c     A7 2A 02 FB | 	rdlong	local07, fp
25e30     04 4E 85 F1 | 	sub	fp, #4
25e34     A7 2A 62 FC | 	wrlong	local07, fp
25e38     08 4E 85 F1 | 	sub	fp, #8
25e3c     A7 10 68 FC | 	wrlong	#8, fp
25e40     04 4E 05 F1 | 	add	fp, #4
25e44     A7 16 68 FC | 	wrlong	#11, fp
25e48     18 4E 85 F1 | 	sub	fp, #24
25e4c     A7 32 C2 FA | 	rdbyte	local11, fp
25e50     19 2B E2 F8 | 	getbyte	local07, local11, #0
25e54     02 2A 66 F0 | 	shl	local07, #2
25e58     A7 2A 42 FC | 	wrbyte	local07, fp
25e5c     0C 4E 85 F1 | 	sub	fp, #12
25e60                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
25e60                 | ' 			continue;
25e60     80 FE 9F FD | 	jmp	#LR__3940
25e64                 | LR__3945
25e64     14 4E 05 F1 | 	add	fp, #20
25e68     A7 2A E2 FA | 	rdword	local07, fp
25e6c     14 4E 85 F1 | 	sub	fp, #20
25e70     80 2A 16 F2 | 	cmp	local07, #128 wc
25e74     6C 00 90 CD |  if_b	jmp	#LR__3947
25e78     10 4E 05 F1 | 	add	fp, #16
25e7c     A7 2A C2 FA | 	rdbyte	local07, fp
25e80     02 2A 46 F5 | 	or	local07, #2
25e84     A7 2A 42 FC | 	wrbyte	local07, fp
25e88     04 4E 05 F1 | 	add	fp, #4
25e8c     A7 12 E2 FA | 	rdword	arg01, fp
25e90     14 4E 85 F1 | 	sub	fp, #20
25e94     01 00 00 FF 
25e98     52 15 06 F6 | 	mov	arg02, ##850
25e9c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
25ea0     14 4E 05 F1 | 	add	fp, #20
25ea4     A7 FA 51 FC | 	wrword	result1, fp
25ea8     A7 2A E2 FA | 	rdword	local07, fp
25eac     14 4E 85 F1 | 	sub	fp, #20
25eb0     80 2A CE F7 | 	test	local07, #128 wz
25eb4     2C 00 90 AD |  if_e	jmp	#LR__3946
25eb8     14 4E 05 F1 | 	add	fp, #20
25ebc     A7 20 E2 FA | 	rdword	local02, fp
25ec0     7F 20 06 F5 | 	and	local02, #127
25ec4     01 00 00 FF 
25ec8     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
25ecc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
25ed0     10 2B C2 FA | 	rdbyte	local07, local02
25ed4     A7 2A 52 FC | 	wrword	local07, fp
25ed8     14 4E 85 F1 | 	sub	fp, #20
25edc     01 00 00 FF 
25ee0     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
25ee4                 | LR__3946
25ee4                 | LR__3947
25ee4     14 4E 05 F1 | 	add	fp, #20
25ee8     A7 2A E2 FA | 	rdword	local07, fp
25eec     14 4E 85 F1 | 	sub	fp, #20
25ef0     00 2B 16 F2 | 	cmp	local07, #256 wc
25ef4     88 00 90 CD |  if_b	jmp	#LR__3949
25ef8     24 4E 05 F1 | 	add	fp, #36
25efc     A7 2A 02 FB | 	rdlong	local07, fp
25f00     01 2A 86 F1 | 	sub	local07, #1
25f04     04 4E 85 F1 | 	sub	fp, #4
25f08     A7 20 02 FB | 	rdlong	local02, fp
25f0c     20 4E 85 F1 | 	sub	fp, #32
25f10     15 21 12 F2 | 	cmp	local02, local07 wc
25f14     2C 00 90 CD |  if_b	jmp	#LR__3948
25f18     10 4E 05 F1 | 	add	fp, #16
25f1c     A7 32 C2 FA | 	rdbyte	local11, fp
25f20     19 2B E2 F8 | 	getbyte	local07, local11, #0
25f24     03 2A 46 F5 | 	or	local07, #3
25f28     A7 2A 42 FC | 	wrbyte	local07, fp
25f2c     14 4E 05 F1 | 	add	fp, #20
25f30     A7 2A 02 FB | 	rdlong	local07, fp
25f34     04 4E 85 F1 | 	sub	fp, #4
25f38     A7 2A 62 FC | 	wrlong	local07, fp
25f3c     20 4E 85 F1 | 	sub	fp, #32
25f40                 | ' 				cf |=  0x01  |  0x02 ;
25f40                 | ' 				i = ni; continue;
25f40     A0 FD 9F FD | 	jmp	#LR__3940
25f44                 | LR__3948
25f44     04 4E 05 F1 | 	add	fp, #4
25f48     A7 2E 02 FB | 	rdlong	local09, fp
25f4c     1C 4E 05 F1 | 	add	fp, #28
25f50     A7 30 02 FB | 	rdlong	local10, fp
25f54     18 25 02 F6 | 	mov	local04, local10
25f58     01 24 06 F1 | 	add	local04, #1
25f5c     A7 24 62 FC | 	wrlong	local04, fp
25f60     20 2E 06 F1 | 	add	local09, #32
25f64     17 31 02 F1 | 	add	local10, local09
25f68     0C 4E 85 F1 | 	sub	fp, #12
25f6c     A7 22 E2 FA | 	rdword	local03, fp
25f70     14 4E 85 F1 | 	sub	fp, #20
25f74     08 22 46 F0 | 	shr	local03, #8
25f78     18 23 42 FC | 	wrbyte	local03, local10
25f7c     D4 00 90 FD | 	jmp	#LR__3955
25f80                 | LR__3949
25f80     14 4E 05 F1 | 	add	fp, #20
25f84     A7 2A EA FA | 	rdword	local07, fp wz
25f88     14 4E 85 F1 | 	sub	fp, #20
25f8c     20 00 90 AD |  if_e	jmp	#LR__3950
25f90     5C 01 00 FF 
25f94     21 13 06 F6 | 	mov	arg01, ##@LR__4583
25f98     14 4E 05 F1 | 	add	fp, #20
25f9c     A7 14 E2 FA | 	rdword	arg02, fp
25fa0     14 4E 85 F1 | 	sub	fp, #20
25fa4     48 CB BF FD | 	call	#_fatfs_cc_strchr
25fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
25fac     20 00 90 AD |  if_e	jmp	#LR__3951
25fb0                 | LR__3950
25fb0     14 4E 05 F1 | 	add	fp, #20
25fb4     A7 BE 58 FC | 	wrword	#95, fp
25fb8     04 4E 85 F1 | 	sub	fp, #4
25fbc     A7 2A C2 FA | 	rdbyte	local07, fp
25fc0     03 2A 46 F5 | 	or	local07, #3
25fc4     A7 2A 42 FC | 	wrbyte	local07, fp
25fc8     10 4E 85 F1 | 	sub	fp, #16
25fcc     84 00 90 FD | 	jmp	#LR__3954
25fd0                 | LR__3951
25fd0     14 4E 05 F1 | 	add	fp, #20
25fd4     A7 2A E2 FA | 	rdword	local07, fp
25fd8     14 4E 85 F1 | 	sub	fp, #20
25fdc     41 2A 16 F2 | 	cmp	local07, #65 wc
25fe0     24 00 90 CD |  if_b	jmp	#LR__3952
25fe4     14 4E 05 F1 | 	add	fp, #20
25fe8     A7 1E E2 FA | 	rdword	local01, fp
25fec     14 4E 85 F1 | 	sub	fp, #20
25ff0     5B 1E 16 F2 | 	cmp	local01, #91 wc
25ff4     0C 4E 05 C1 |  if_b	add	fp, #12
25ff8     A7 2A C2 CA |  if_b	rdbyte	local07, fp
25ffc     02 2A 46 C5 |  if_b	or	local07, #2
26000     A7 2A 42 CC |  if_b	wrbyte	local07, fp
26004     0C 4E 85 C1 |  if_b	sub	fp, #12
26008                 | LR__3952
26008     14 4E 05 F1 | 	add	fp, #20
2600c     A7 2A E2 FA | 	rdword	local07, fp
26010     14 4E 85 F1 | 	sub	fp, #20
26014     61 2A 16 F2 | 	cmp	local07, #97 wc
26018     38 00 90 CD |  if_b	jmp	#LR__3953
2601c     14 4E 05 F1 | 	add	fp, #20
26020     A7 1E E2 FA | 	rdword	local01, fp
26024     14 4E 85 F1 | 	sub	fp, #20
26028     7B 1E 16 F2 | 	cmp	local01, #123 wc
2602c     24 00 90 3D |  if_ae	jmp	#LR__3953
26030     0C 4E 05 F1 | 	add	fp, #12
26034     A7 2A C2 FA | 	rdbyte	local07, fp
26038     01 2A 46 F5 | 	or	local07, #1
2603c     A7 2A 42 FC | 	wrbyte	local07, fp
26040     08 4E 05 F1 | 	add	fp, #8
26044     A7 2A E2 FA | 	rdword	local07, fp
26048     20 2A 86 F1 | 	sub	local07, #32
2604c     A7 2A 52 FC | 	wrword	local07, fp
26050     14 4E 85 F1 | 	sub	fp, #20
26054                 | LR__3953
26054                 | LR__3954
26054                 | LR__3955
26054     04 4E 05 F1 | 	add	fp, #4
26058     A7 32 02 FB | 	rdlong	local11, fp
2605c     19 2F 02 F6 | 	mov	local09, local11
26060     1C 4E 05 F1 | 	add	fp, #28
26064     A7 20 02 FB | 	rdlong	local02, fp
26068     10 25 02 F6 | 	mov	local04, local02
2606c     01 24 06 F1 | 	add	local04, #1
26070     A7 24 62 FC | 	wrlong	local04, fp
26074     10 31 02 F6 | 	mov	local10, local02
26078     20 2E 06 F1 | 	add	local09, #32
2607c     17 31 02 F1 | 	add	local10, local09
26080     0C 4E 85 F1 | 	sub	fp, #12
26084     A7 22 E2 FA | 	rdword	local03, fp
26088     14 4E 85 F1 | 	sub	fp, #20
2608c     18 23 42 FC | 	wrbyte	local03, local10
26090     50 FC 9F FD | 	jmp	#LR__3940
26094                 | LR__3956
26094     04 4E 05 F1 | 	add	fp, #4
26098     A7 32 02 FB | 	rdlong	local11, fp
2609c     04 4E 85 F1 | 	sub	fp, #4
260a0     20 32 06 F1 | 	add	local11, #32
260a4     19 2B C2 FA | 	rdbyte	local07, local11
260a8     E5 2A 0E F2 | 	cmp	local07, #229 wz
260ac     04 4E 05 A1 |  if_e	add	fp, #4
260b0     A7 2A 02 AB |  if_e	rdlong	local07, fp
260b4     04 4E 85 A1 |  if_e	sub	fp, #4
260b8     20 2A 06 A1 |  if_e	add	local07, #32
260bc     15 0B 48 AC |  if_e	wrbyte	#5, local07
260c0     24 4E 05 F1 | 	add	fp, #36
260c4     A7 2A 02 FB | 	rdlong	local07, fp
260c8     24 4E 85 F1 | 	sub	fp, #36
260cc     08 2A 0E F2 | 	cmp	local07, #8 wz
260d0     0C 4E 05 A1 |  if_e	add	fp, #12
260d4     A7 2A C2 AA |  if_e	rdbyte	local07, fp
260d8     02 2A 66 A0 |  if_e	shl	local07, #2
260dc     A7 2A 42 AC |  if_e	wrbyte	local07, fp
260e0     0C 4E 85 A1 |  if_e	sub	fp, #12
260e4     0C 4E 05 F1 | 	add	fp, #12
260e8     A7 2A C2 FA | 	rdbyte	local07, fp
260ec     0C 4E 85 F1 | 	sub	fp, #12
260f0     0C 2A 06 F5 | 	and	local07, #12
260f4     0C 2A 0E F2 | 	cmp	local07, #12 wz
260f8     18 00 90 AD |  if_e	jmp	#LR__3957
260fc     0C 4E 05 F1 | 	add	fp, #12
26100     A7 1E C2 FA | 	rdbyte	local01, fp
26104     0C 4E 85 F1 | 	sub	fp, #12
26108     03 1E 06 F5 | 	and	local01, #3
2610c     03 1E 0E F2 | 	cmp	local01, #3 wz
26110     14 00 90 5D |  if_ne	jmp	#LR__3958
26114                 | LR__3957
26114     10 4E 05 F1 | 	add	fp, #16
26118     A7 2A C2 FA | 	rdbyte	local07, fp
2611c     02 2A 46 F5 | 	or	local07, #2
26120     A7 2A 42 FC | 	wrbyte	local07, fp
26124     10 4E 85 F1 | 	sub	fp, #16
26128                 | LR__3958
26128     10 4E 05 F1 | 	add	fp, #16
2612c     A7 2A C2 FA | 	rdbyte	local07, fp
26130     10 4E 85 F1 | 	sub	fp, #16
26134     02 2A CE F7 | 	test	local07, #2 wz
26138     48 00 90 5D |  if_ne	jmp	#LR__3959
2613c     0C 4E 05 F1 | 	add	fp, #12
26140     A7 2A C2 FA | 	rdbyte	local07, fp
26144     0C 4E 85 F1 | 	sub	fp, #12
26148     01 2A CE F7 | 	test	local07, #1 wz
2614c     10 4E 05 51 |  if_ne	add	fp, #16
26150     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
26154     10 2A 46 55 |  if_ne	or	local07, #16
26158     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2615c     10 4E 85 51 |  if_ne	sub	fp, #16
26160     0C 4E 05 F1 | 	add	fp, #12
26164     A7 2A C2 FA | 	rdbyte	local07, fp
26168     0C 4E 85 F1 | 	sub	fp, #12
2616c     04 2A CE F7 | 	test	local07, #4 wz
26170     10 4E 05 51 |  if_ne	add	fp, #16
26174     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
26178     08 2A 46 55 |  if_ne	or	local07, #8
2617c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
26180     10 4E 85 51 |  if_ne	sub	fp, #16
26184                 | LR__3959
26184     04 4E 05 F1 | 	add	fp, #4
26188     A7 2A 02 FB | 	rdlong	local07, fp
2618c     0C 4E 05 F1 | 	add	fp, #12
26190     A7 1E C2 FA | 	rdbyte	local01, fp
26194     10 4E 85 F1 | 	sub	fp, #16
26198     2B 2A 06 F1 | 	add	local07, #43
2619c     15 1F 42 FC | 	wrbyte	local01, local07
261a0                 | ' 	}
261a0                 | ' 
261a0                 | ' 	dp->fn[ 11 ] = cf;
261a0                 | ' 
261a0                 | ' 	return FR_OK;
261a0     00 FA 05 F6 | 	mov	result1, #0
261a4                 | LR__3960
261a4     A7 F0 03 F6 | 	mov	ptra, fp
261a8     B2 00 A0 FD | 	call	#popregs_
261ac                 | _fatfs_cc_create_name_ret
261ac     2D 00 64 FD | 	ret
261b0                 | 
261b0                 | _fatfs_cc_follow_path
261b0     02 4A 05 F6 | 	mov	COUNT_, #2
261b4     A8 00 A0 FD | 	call	#pushregs_
261b8     18 F0 07 F1 | 	add	ptra, #24
261bc     04 4E 05 F1 | 	add	fp, #4
261c0     A7 12 62 FC | 	wrlong	arg01, fp
261c4     04 4E 05 F1 | 	add	fp, #4
261c8     A7 14 62 FC | 	wrlong	arg02, fp
261cc     04 4E 85 F1 | 	sub	fp, #4
261d0     A7 FA 01 FB | 	rdlong	result1, fp
261d4     FD 1E 02 FB | 	rdlong	local01, result1
261d8     10 4E 05 F1 | 	add	fp, #16
261dc     A7 1E 62 FC | 	wrlong	local01, fp
261e0     14 4E 85 F1 | 	sub	fp, #20
261e4     97 24 48 FB | 	callpa	#(@LR__3972-@LR__3970)>>2,fcache_load_ptr_
261e8                 | ' )
261e8                 | ' {
261e8                 | ' 	FRESULT res;
261e8                 | ' 	BYTE ns;
261e8                 | ' 	FATFS *fs = dp->obj.fs;
261e8                 | ' #line 3034 "ff.c"
261e8                 | ' 	{
261e8                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
261e8                 | LR__3970
261e8     08 4E 05 F1 | 	add	fp, #8
261ec     A7 1E 02 FB | 	rdlong	local01, fp
261f0     08 4E 85 F1 | 	sub	fp, #8
261f4     0F 1F C2 FA | 	rdbyte	local01, local01
261f8     2F 1E 0E F2 | 	cmp	local01, #47 wz
261fc     18 00 90 AD |  if_e	jmp	#LR__3971
26200     08 4E 05 F1 | 	add	fp, #8
26204     A7 1E 02 FB | 	rdlong	local01, fp
26208     08 4E 85 F1 | 	sub	fp, #8
2620c     0F 1F C2 FA | 	rdbyte	local01, local01
26210     5C 1E 0E F2 | 	cmp	local01, #92 wz
26214     18 00 90 5D |  if_ne	jmp	#LR__3973
26218                 | LR__3971
26218     08 4E 05 F1 | 	add	fp, #8
2621c     A7 1E 02 FB | 	rdlong	local01, fp
26220     01 1E 06 F1 | 	add	local01, #1
26224     A7 1E 62 FC | 	wrlong	local01, fp
26228     08 4E 85 F1 | 	sub	fp, #8
2622c     B8 FF 9F FD | 	jmp	#LR__3970
26230                 | LR__3972
26230                 | LR__3973
26230     04 4E 05 F1 | 	add	fp, #4
26234     A7 1E 02 FB | 	rdlong	local01, fp
26238     08 1E 06 F1 | 	add	local01, #8
2623c     0F 01 68 FC | 	wrlong	#0, local01
26240     04 4E 05 F1 | 	add	fp, #4
26244     A7 1E 02 FB | 	rdlong	local01, fp
26248     08 4E 85 F1 | 	sub	fp, #8
2624c     0F 1F C2 FA | 	rdbyte	local01, local01
26250     20 1E 16 F2 | 	cmp	local01, #32 wc
26254     30 00 90 3D |  if_ae	jmp	#LR__3974
26258     04 4E 05 F1 | 	add	fp, #4
2625c     A7 1E 02 FB | 	rdlong	local01, fp
26260     2B 1E 06 F1 | 	add	local01, #43
26264     0F 01 49 FC | 	wrbyte	#128, local01
26268     A7 12 02 FB | 	rdlong	arg01, fp
2626c     04 4E 85 F1 | 	sub	fp, #4
26270     00 14 06 F6 | 	mov	arg02, #0
26274     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
26278     0C 4E 05 F1 | 	add	fp, #12
2627c     A7 FA 61 FC | 	wrlong	result1, fp
26280     0C 4E 85 F1 | 	sub	fp, #12
26284     1C 01 90 FD | 	jmp	#LR__3978
26288                 | LR__3974
26288                 | ' 		for (;;) {
26288                 | LR__3975
26288     04 4E 05 F1 | 	add	fp, #4
2628c     A7 12 02 FB | 	rdlong	arg01, fp
26290     04 4E 05 F1 | 	add	fp, #4
26294     A7 14 02 F6 | 	mov	arg02, fp
26298     08 4E 85 F1 | 	sub	fp, #8
2629c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
262a0     0C 4E 05 F1 | 	add	fp, #12
262a4     A7 FA 61 FC | 	wrlong	result1, fp
262a8     00 FA 4D F2 | 	cmps	result1, #0 wz
262ac     0C 4E 85 F1 | 	sub	fp, #12
262b0     F0 00 90 5D |  if_ne	jmp	#LR__3977
262b4     04 4E 05 F1 | 	add	fp, #4
262b8     A7 12 02 FB | 	rdlong	arg01, fp
262bc     04 4E 85 F1 | 	sub	fp, #4
262c0     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
262c4     0C 4E 05 F1 | 	add	fp, #12
262c8     A7 FA 61 FC | 	wrlong	result1, fp
262cc     08 4E 85 F1 | 	sub	fp, #8
262d0     A7 1E 02 FB | 	rdlong	local01, fp
262d4     2B 1E 06 F1 | 	add	local01, #43
262d8     0F 1F C2 FA | 	rdbyte	local01, local01
262dc     0C 4E 05 F1 | 	add	fp, #12
262e0     A7 1E 42 FC | 	wrbyte	local01, fp
262e4     04 4E 85 F1 | 	sub	fp, #4
262e8     A7 1E 0A FB | 	rdlong	local01, fp wz
262ec     0C 4E 85 F1 | 	sub	fp, #12
262f0     34 00 90 AD |  if_e	jmp	#LR__3976
262f4     0C 4E 05 F1 | 	add	fp, #12
262f8     A7 1E 02 FB | 	rdlong	local01, fp
262fc     0C 4E 85 F1 | 	sub	fp, #12
26300     04 1E 0E F2 | 	cmp	local01, #4 wz
26304     9C 00 90 5D |  if_ne	jmp	#LR__3977
26308     10 4E 05 F1 | 	add	fp, #16
2630c     A7 1E C2 FA | 	rdbyte	local01, fp
26310     10 4E 85 F1 | 	sub	fp, #16
26314     04 1E CE F7 | 	test	local01, #4 wz
26318     0C 4E 05 A1 |  if_e	add	fp, #12
2631c     A7 0A 68 AC |  if_e	wrlong	#5, fp
26320     0C 4E 85 A1 |  if_e	sub	fp, #12
26324                 | ' 					}
26324                 | ' 				}
26324                 | ' 				break;
26324     7C 00 90 FD | 	jmp	#LR__3977
26328                 | LR__3976
26328     10 4E 05 F1 | 	add	fp, #16
2632c     A7 1E C2 FA | 	rdbyte	local01, fp
26330     10 4E 85 F1 | 	sub	fp, #16
26334     04 1E CE F7 | 	test	local01, #4 wz
26338     68 00 90 5D |  if_ne	jmp	#LR__3977
2633c     04 4E 05 F1 | 	add	fp, #4
26340     A7 1E 02 FB | 	rdlong	local01, fp
26344     04 4E 85 F1 | 	sub	fp, #4
26348     06 1E 06 F1 | 	add	local01, #6
2634c     0F 1F C2 FA | 	rdbyte	local01, local01
26350     10 1E CE F7 | 	test	local01, #16 wz
26354     0C 4E 05 A1 |  if_e	add	fp, #12
26358     A7 0A 68 AC |  if_e	wrlong	#5, fp
2635c     0C 4E 85 A1 |  if_e	sub	fp, #12
26360                 | ' 				res = FR_NO_PATH; break;
26360     40 00 90 AD |  if_e	jmp	#LR__3977
26364     04 4E 05 F1 | 	add	fp, #4
26368     A7 20 02 FB | 	rdlong	local02, fp
2636c     10 1F 02 F6 | 	mov	local01, local02
26370     10 4E 05 F1 | 	add	fp, #16
26374     A7 14 02 FB | 	rdlong	arg02, fp
26378     0A 13 02 F6 | 	mov	arg01, arg02
2637c     34 14 06 F1 | 	add	arg02, #52
26380     14 4E 85 F1 | 	sub	fp, #20
26384     10 20 06 F1 | 	add	local02, #16
26388     10 21 02 FB | 	rdlong	local02, local02
2638c     FF 21 06 F5 | 	and	local02, #511
26390     10 15 02 F1 | 	add	arg02, local02
26394     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
26398     08 1E 06 F1 | 	add	local01, #8
2639c     0F FB 61 FC | 	wrlong	result1, local01
263a0     E4 FE 9F FD | 	jmp	#LR__3975
263a4                 | LR__3977
263a4                 | LR__3978
263a4                 | ' 			}
263a4                 | ' #line 3090 "ff.c"
263a4                 | ' 			{
263a4                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
263a4                 | ' 			}
263a4                 | ' 		}
263a4                 | ' 	}
263a4                 | ' 
263a4                 | ' 	return res;
263a4     0C 4E 05 F1 | 	add	fp, #12
263a8     A7 FA 01 FB | 	rdlong	result1, fp
263ac     0C 4E 85 F1 | 	sub	fp, #12
263b0     A7 F0 03 F6 | 	mov	ptra, fp
263b4     B2 00 A0 FD | 	call	#popregs_
263b8                 | _fatfs_cc_follow_path_ret
263b8     2D 00 64 FD | 	ret
263bc                 | 
263bc                 | _fatfs_cc_get_ldnumber
263bc     01 00 66 F6 | 	neg	_var01, #1
263c0     09 03 0A FB | 	rdlong	_var02, arg01 wz
263c4     01 05 02 F6 | 	mov	_var03, _var02
263c8     01 FA 65 A6 |  if_e	neg	result1, #1
263cc     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
263d0     97 10 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
263d4                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
263d4                 | LR__3980
263d4     02 07 C2 FA | 	rdbyte	_var04, _var03
263d8     03 FB E1 F8 | 	getbyte	result1, _var04, #0
263dc     20 FA 15 F2 | 	cmp	result1, #32 wc
263e0     01 04 06 F1 | 	add	_var03, #1
263e4     03 09 02 36 |  if_ae	mov	_var05, _var04
263e8     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
263ec     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
263f0     E0 FF 9F 1D |  if_a	jmp	#LR__3980
263f4                 | LR__3981
263f4     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
263f8     3A 06 0E F2 | 	cmp	_var04, #58 wz
263fc     40 00 90 5D |  if_ne	jmp	#LR__3983
26400     01 0A 06 F6 | 	mov	_var06, #1
26404     01 09 C2 FA | 	rdbyte	_var05, _var02
26408     30 08 16 F2 | 	cmp	_var05, #48 wc
2640c     1C 00 90 CD |  if_b	jmp	#LR__3982
26410     01 09 C2 FA | 	rdbyte	_var05, _var02
26414     3A 08 16 F2 | 	cmp	_var05, #58 wc
26418     01 0D 02 C6 |  if_b	mov	_var07, _var02
2641c     02 0C 06 C1 |  if_b	add	_var07, #2
26420     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
26424     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
26428     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2642c                 | LR__3982
2642c     01 0A 56 F2 | 	cmps	_var06, #1 wc
26430     05 01 02 C6 |  if_b	mov	_var01, _var06
26434     09 05 62 CC |  if_b	wrlong	_var03, arg01
26438                 | ' 			vol = i;
26438                 | ' 			*path = tt;
26438                 | ' 		}
26438                 | ' 		return vol;
26438     00 FB 01 F6 | 	mov	result1, _var01
2643c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
26440                 | LR__3983
26440                 | ' 	}
26440                 | ' #line 3170 "ff.c"
26440                 | ' 	vol = 0;
26440                 | ' 
26440                 | ' 	return vol;
26440     00 FA 05 F6 | 	mov	result1, #0
26444                 | _fatfs_cc_get_ldnumber_ret
26444     2D 00 64 FD | 	ret
26448                 | 
26448                 | _fatfs_cc_check_fs
26448     04 4A 05 F6 | 	mov	COUNT_, #4
2644c     A8 00 A0 FD | 	call	#pushregs_
26450     09 1F 02 F6 | 	mov	local01, arg01
26454     03 1E 06 F1 | 	add	local01, #3
26458     0F 01 48 FC | 	wrbyte	#0, local01
2645c     2D 1E 06 F1 | 	add	local01, #45
26460     FF FF FF FF 
26464     0F FF 6B FC | 	wrlong	##-1, local01
26468     30 1E 86 F1 | 	sub	local01, #48
2646c     0F 13 02 F6 | 	mov	arg01, local01
26470     18 D5 BF FD | 	call	#_fatfs_cc_move_window
26474     00 FA 0D F2 | 	cmp	result1, #0 wz
26478     04 FA 05 56 |  if_ne	mov	result1, #4
2647c     94 01 90 5D |  if_ne	jmp	#LR__3994
26480     34 1E 06 F1 | 	add	local01, #52
26484     0F 13 02 F6 | 	mov	arg01, local01
26488     FE 13 06 F1 | 	add	arg01, #510
2648c                 | ' {
2648c                 | ' 
2648c                 | ' 	return *((WORD*)ptr);
2648c     09 21 E2 FA | 	rdword	local02, arg01
26490     0F 23 C2 FA | 	rdbyte	local03, local01
26494     34 1E 86 F1 | 	sub	local01, #52
26498     11 25 E2 F8 | 	getbyte	local04, local03, #0
2649c     EB 24 0E F2 | 	cmp	local04, #235 wz
264a0     11 17 02 56 |  if_ne	mov	arg03, local03
264a4     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
264a8     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
264ac     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
264b0     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
264b4     44 01 90 5D |  if_ne	jmp	#LR__3993
264b8     10 25 32 F9 | 	getword	local04, local02, #0
264bc     55 00 00 FF 
264c0     55 24 0E F2 | 	cmp	local04, ##43605 wz
264c4     2C 00 90 5D |  if_ne	jmp	#LR__3990
264c8     34 1E 06 F1 | 	add	local01, #52
264cc     0F 13 02 F6 | 	mov	arg01, local01
264d0     34 1E 86 F1 | 	sub	local01, #52
264d4     52 12 06 F1 | 	add	arg01, #82
264d8     5C 01 00 FF 
264dc     28 15 06 F6 | 	mov	arg02, ##@LR__4584
264e0     08 16 06 F6 | 	mov	arg03, #8
264e4     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
264e8     00 FA 0D F2 | 	cmp	result1, #0 wz
264ec                 | ' 			return 0;
264ec     00 FA 05 A6 |  if_e	mov	result1, #0
264f0     20 01 90 AD |  if_e	jmp	#LR__3994
264f4                 | LR__3990
264f4     34 1E 06 F1 | 	add	local01, #52
264f8     0F 13 02 F6 | 	mov	arg01, local01
264fc     0B 12 06 F1 | 	add	arg01, #11
26500                 | ' {
26500                 | ' 
26500                 | ' 	return *((WORD*)ptr);
26500     09 FB E1 FA | 	rdword	result1, arg01
26504     0D 1E 06 F1 | 	add	local01, #13
26508     0F 23 C2 FA | 	rdbyte	local03, local01
2650c     41 1E 86 F1 | 	sub	local01, #65
26510     FD 24 32 F9 | 	getword	local04, result1, #0
26514     FD 14 32 F9 | 	getword	arg02, result1, #0
26518     01 14 86 F1 | 	sub	arg02, #1
2651c     0A 25 CA F7 | 	test	local04, arg02 wz
26520     D8 00 90 5D |  if_ne	jmp	#LR__3992
26524     FD 14 32 F9 | 	getword	arg02, result1, #0
26528     01 00 00 FF 
2652c     00 14 16 F2 | 	cmp	arg02, ##512 wc
26530     C8 00 90 CD |  if_b	jmp	#LR__3992
26534     FD 14 32 F9 | 	getword	arg02, result1, #0
26538     01 00 00 FF 
2653c     01 14 16 F2 | 	cmp	arg02, ##513 wc
26540     B8 00 90 3D |  if_ae	jmp	#LR__3992
26544     11 13 02 F6 | 	mov	arg01, local03
26548     07 12 4E F7 | 	zerox	arg01, #7 wz
2654c     AC 00 90 AD |  if_e	jmp	#LR__3992
26550     11 13 E2 F8 | 	getbyte	arg01, local03, #0
26554     11 23 E2 F8 | 	getbyte	local03, local03, #0
26558     01 22 86 F1 | 	sub	local03, #1
2655c     11 13 CA F7 | 	test	arg01, local03 wz
26560     98 00 90 5D |  if_ne	jmp	#LR__3992
26564     34 1E 06 F1 | 	add	local01, #52
26568     0F 13 02 F6 | 	mov	arg01, local01
2656c     34 1E 86 F1 | 	sub	local01, #52
26570     0E 12 06 F1 | 	add	arg01, #14
26574                 | ' {
26574                 | ' 
26574                 | ' 	return *((WORD*)ptr);
26574     09 FB E9 FA | 	rdword	result1, arg01 wz
26578     80 00 90 AD |  if_e	jmp	#LR__3992
2657c     44 1E 06 F1 | 	add	local01, #68
26580     0F 13 C2 FA | 	rdbyte	arg01, local01
26584     44 1E 86 F1 | 	sub	local01, #68
26588     01 12 86 F1 | 	sub	arg01, #1
2658c     02 12 16 F2 | 	cmp	arg01, #2 wc
26590     68 00 90 3D |  if_ae	jmp	#LR__3992
26594     34 1E 06 F1 | 	add	local01, #52
26598     0F 13 02 F6 | 	mov	arg01, local01
2659c     34 1E 86 F1 | 	sub	local01, #52
265a0     11 12 06 F1 | 	add	arg01, #17
265a4                 | ' {
265a4                 | ' 
265a4                 | ' 	return *((WORD*)ptr);
265a4     09 FB E9 FA | 	rdword	result1, arg01 wz
265a8     50 00 90 AD |  if_e	jmp	#LR__3992
265ac     34 1E 06 F1 | 	add	local01, #52
265b0     0F 13 02 F6 | 	mov	arg01, local01
265b4     34 1E 86 F1 | 	sub	local01, #52
265b8     13 12 06 F1 | 	add	arg01, #19
265bc                 | ' {
265bc                 | ' 
265bc                 | ' 	return *((WORD*)ptr);
265bc     09 FB E1 FA | 	rdword	result1, arg01
265c0     FD 22 32 F9 | 	getword	local03, result1, #0
265c4     80 22 16 F2 | 	cmp	local03, #128 wc
265c8     20 00 90 3D |  if_ae	jmp	#LR__3991
265cc     34 1E 06 F1 | 	add	local01, #52
265d0     0F 13 02 F6 | 	mov	arg01, local01
265d4     34 1E 86 F1 | 	sub	local01, #52
265d8     20 12 06 F1 | 	add	arg01, #32
265dc                 | ' {
265dc                 | ' 
265dc                 | ' 	return *((DWORD*)ptr);
265dc     09 FB 01 FB | 	rdlong	result1, arg01
265e0     80 00 00 FF 
265e4     00 FA 15 F2 | 	cmp	result1, ##65536 wc
265e8     10 00 90 CD |  if_b	jmp	#LR__3992
265ec                 | LR__3991
265ec     4A 1E 06 F1 | 	add	local01, #74
265f0                 | ' {
265f0                 | ' 
265f0                 | ' 	return *((WORD*)ptr);
265f0     0F FB E9 FA | 	rdword	result1, local01 wz
265f4                 | ' 			&& b != 0 && (b & (b - 1)) == 0
265f4                 | ' 			&& ld_word(fs->win +  14 ) != 0
265f4                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
265f4                 | ' 			&& ld_word(fs->win +  17 ) != 0
265f4                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
265f4                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
265f4                 | ' 				return 0;
265f4     00 FA 05 56 |  if_ne	mov	result1, #0
265f8     18 00 90 5D |  if_ne	jmp	#LR__3994
265fc                 | LR__3992
265fc                 | LR__3993
265fc                 | ' 		}
265fc                 | ' 	}
265fc                 | ' 	return sign == 0xAA55 ? 2 : 3;
265fc     10 23 32 F9 | 	getword	local03, local02, #0
26600     55 00 00 FF 
26604     55 22 0E F2 | 	cmp	local03, ##43605 wz
26608     02 24 06 A6 |  if_e	mov	local04, #2
2660c     03 24 06 56 |  if_ne	mov	local04, #3
26610     12 FB 01 F6 | 	mov	result1, local04
26614                 | LR__3994
26614     A7 F0 03 F6 | 	mov	ptra, fp
26618     B2 00 A0 FD | 	call	#popregs_
2661c                 | _fatfs_cc_check_fs_ret
2661c     2D 00 64 FD | 	ret
26620                 | 
26620                 | _fatfs_cc_find_volume
26620     05 4A 05 F6 | 	mov	COUNT_, #5
26624     A8 00 A0 FD | 	call	#pushregs_
26628     24 F0 07 F1 | 	add	ptra, #36
2662c     09 1F 02 F6 | 	mov	local01, arg01
26630     0A 21 02 F6 | 	mov	local02, arg02
26634     0F 13 02 F6 | 	mov	arg01, local01
26638     00 14 06 F6 | 	mov	arg02, #0
2663c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
26640     02 FA 0D F2 | 	cmp	result1, #2 wz
26644     0C 00 90 AD |  if_e	jmp	#LR__4000
26648     03 FA 15 F2 | 	cmp	result1, #3 wc
2664c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
26650     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4008
26654                 | LR__4000
26654                 | ' 	for (i = 0; i < 4; i++) {
26654     00 22 06 F6 | 	mov	local03, #0
26658     97 26 48 FB | 	callpa	#(@LR__4002-@LR__4001)>>2,fcache_load_ptr_
2665c                 | LR__4001
2665c     04 22 16 F2 | 	cmp	local03, #4 wc
26660     44 00 90 3D |  if_ae	jmp	#LR__4003
26664     11 25 02 F6 | 	mov	local04, local03
26668     02 24 66 F0 | 	shl	local04, #2
2666c     14 4E 05 F1 | 	add	fp, #20
26670     A7 24 02 F1 | 	add	local04, fp
26674     34 1E 06 F1 | 	add	local01, #52
26678     0F 13 02 F6 | 	mov	arg01, local01
2667c     34 1E 86 F1 | 	sub	local01, #52
26680     BE 13 06 F1 | 	add	arg01, #446
26684     11 15 02 F6 | 	mov	arg02, local03
26688     04 14 66 F0 | 	shl	arg02, #4
2668c     0A 13 02 F1 | 	add	arg01, arg02
26690     08 12 06 F1 | 	add	arg01, #8
26694                 | ' {
26694                 | ' 
26694                 | ' 	return *((DWORD*)ptr);
26694     09 FB 01 FB | 	rdlong	result1, arg01
26698     14 4E 85 F1 | 	sub	fp, #20
2669c     12 FB 61 FC | 	wrlong	result1, local04
266a0     01 22 06 F1 | 	add	local03, #1
266a4     B4 FF 9F FD | 	jmp	#LR__4001
266a8                 | LR__4002
266a8                 | LR__4003
266a8     00 20 0E F2 | 	cmp	local02, #0 wz
266ac     10 25 02 56 |  if_ne	mov	local04, local02
266b0     01 24 86 51 |  if_ne	sub	local04, #1
266b4     00 24 06 A6 |  if_e	mov	local04, #0
266b8     12 23 02 F6 | 	mov	local03, local04
266bc                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
266bc                 | ' 	}
266bc                 | ' 	i = part ? part - 1 : 0;
266bc                 | ' 	do {
266bc                 | LR__4004
266bc     11 25 02 F6 | 	mov	local04, local03
266c0     02 24 66 F0 | 	shl	local04, #2
266c4     14 4E 05 F1 | 	add	fp, #20
266c8     A7 24 02 F1 | 	add	local04, fp
266cc     12 25 0A FB | 	rdlong	local04, local04 wz
266d0     14 4E 85 F1 | 	sub	fp, #20
266d4     28 00 90 AD |  if_e	jmp	#LR__4005
266d8     11 25 02 F6 | 	mov	local04, local03
266dc     02 24 66 F0 | 	shl	local04, #2
266e0     14 4E 05 F1 | 	add	fp, #20
266e4     A7 24 02 F1 | 	add	local04, fp
266e8     12 15 02 FB | 	rdlong	arg02, local04
266ec     0F 13 02 F6 | 	mov	arg01, local01
266f0     14 4E 85 F1 | 	sub	fp, #20
266f4     50 FD BF FD | 	call	#_fatfs_cc_check_fs
266f8     FD 24 02 F6 | 	mov	local04, result1
266fc     04 00 90 FD | 	jmp	#LR__4006
26700                 | LR__4005
26700     03 24 06 F6 | 	mov	local04, #3
26704                 | LR__4006
26704     12 27 02 F6 | 	mov	local05, local04
26708     00 20 0E F2 | 	cmp	local02, #0 wz
2670c     02 26 16 A2 |  if_e	cmp	local05, #2 wc
26710     0C 00 90 8D |  if_c_and_z	jmp	#LR__4007
26714     01 22 06 A1 |  if_e	add	local03, #1
26718     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2671c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4004
26720                 | LR__4007
26720                 | ' 	return fmt;
26720     13 FB 01 F6 | 	mov	result1, local05
26724                 | LR__4008
26724     A7 F0 03 F6 | 	mov	ptra, fp
26728     B2 00 A0 FD | 	call	#popregs_
2672c                 | _fatfs_cc_find_volume_ret
2672c     2D 00 64 FD | 	ret
26730                 | 
26730                 | _fatfs_cc_mount_volume
26730     0B 4A 05 F6 | 	mov	COUNT_, #11
26734     A8 00 A0 FD | 	call	#pushregs_
26738     0A 1F 02 F6 | 	mov	local01, arg02
2673c     0B 21 02 F6 | 	mov	local02, arg03
26740     0F 01 68 FC | 	wrlong	#0, local01
26744     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
26748     FD 22 02 F6 | 	mov	local03, result1
2674c     00 22 56 F2 | 	cmps	local03, #0 wc
26750     0B FA 05 C6 |  if_b	mov	result1, #11
26754     3C 05 90 CD |  if_b	jmp	#LR__4020
26758     11 17 02 F6 | 	mov	arg03, local03
2675c     02 16 66 F0 | 	shl	arg03, #2
26760     F2 16 02 F1 | 	add	arg03, objptr
26764     0B 25 0A FB | 	rdlong	local04, arg03 wz
26768     0C FA 05 A6 |  if_e	mov	result1, #12
2676c     24 05 90 AD |  if_e	jmp	#LR__4020
26770     0F 25 62 FC | 	wrlong	local04, local01
26774     10 21 E2 F8 | 	getbyte	local02, local02, #0
26778     FE 20 06 F5 | 	and	local02, #254
2677c     12 17 CA FA | 	rdbyte	arg03, local04 wz
26780     4C 00 90 AD |  if_e	jmp	#LR__4011
26784     01 24 06 F1 | 	add	local04, #1
26788     12 13 CA FA | 	rdbyte	arg01, local04 wz
2678c     01 24 86 F1 | 	sub	local04, #1
26790     01 FA 05 56 |  if_ne	mov	result1, #1
26794                 | ' 
26794                 | ' 	return Stat;
26794     01 00 00 AF 
26798     20 E4 05 A1 |  if_e	add	objptr, ##544
2679c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
267a0     01 00 00 AF 
267a4     20 E4 85 A1 |  if_e	sub	objptr, ##544
267a8     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
267ac     01 16 CE F7 | 	test	arg03, #1 wz
267b0     1C 00 90 5D |  if_ne	jmp	#LR__4010
267b4     00 20 0E F2 | 	cmp	local02, #0 wz
267b8     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
267bc     04 FA CD 57 |  if_ne	test	result1, #4 wz
267c0                 | ' 				return FR_WRITE_PROTECTED;
267c0     0A FA 05 56 |  if_ne	mov	result1, #10
267c4     CC 04 90 5D |  if_ne	jmp	#LR__4020
267c8                 | ' 			}
267c8                 | ' 			return FR_OK;
267c8     00 FA 05 F6 | 	mov	result1, #0
267cc     C4 04 90 FD | 	jmp	#LR__4020
267d0                 | LR__4010
267d0                 | LR__4011
267d0     12 01 48 FC | 	wrbyte	#0, local04
267d4     01 24 06 F1 | 	add	local04, #1
267d8     12 23 42 FC | 	wrbyte	local03, local04
267dc     12 13 C2 FA | 	rdbyte	arg01, local04
267e0     01 24 86 F1 | 	sub	local04, #1
267e4     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
267e8     FD 16 02 F6 | 	mov	arg03, result1
267ec     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
267f0     01 26 CE F7 | 	test	local05, #1 wz
267f4                 | ' 		return FR_NOT_READY;
267f4     03 FA 05 56 |  if_ne	mov	result1, #3
267f8     98 04 90 5D |  if_ne	jmp	#LR__4020
267fc     00 20 0E F2 | 	cmp	local02, #0 wz
26800     0B 27 02 56 |  if_ne	mov	local05, arg03
26804     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
26808     04 26 CE 57 |  if_ne	test	local05, #4 wz
2680c                 | ' 		return FR_WRITE_PROTECTED;
2680c     0A FA 05 56 |  if_ne	mov	result1, #10
26810     80 04 90 5D |  if_ne	jmp	#LR__4020
26814     12 13 02 F6 | 	mov	arg01, local04
26818     00 14 06 F6 | 	mov	arg02, #0
2681c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
26820     FD 12 02 F6 | 	mov	arg01, result1
26824     04 12 0E F2 | 	cmp	arg01, #4 wz
26828     01 FA 05 A6 |  if_e	mov	result1, #1
2682c     64 04 90 AD |  if_e	jmp	#LR__4020
26830     02 12 16 F2 | 	cmp	arg01, #2 wc
26834     0D FA 05 36 |  if_ae	mov	result1, #13
26838     58 04 90 3D |  if_ae	jmp	#LR__4020
2683c     30 24 06 F1 | 	add	local04, #48
26840     12 29 02 FB | 	rdlong	local06, local04
26844     04 24 06 F1 | 	add	local04, #4
26848     12 13 02 F6 | 	mov	arg01, local04
2684c     34 24 86 F1 | 	sub	local04, #52
26850     0B 12 06 F1 | 	add	arg01, #11
26854                 | ' {
26854                 | ' 
26854                 | ' 	return *((WORD*)ptr);
26854     09 FB E1 FA | 	rdword	result1, arg01
26858     01 00 00 FF 
2685c     00 FA 0D F2 | 	cmp	result1, ##512 wz
26860     0D FA 05 56 |  if_ne	mov	result1, #13
26864     2C 04 90 5D |  if_ne	jmp	#LR__4020
26868     34 24 06 F1 | 	add	local04, #52
2686c     12 13 02 F6 | 	mov	arg01, local04
26870     34 24 86 F1 | 	sub	local04, #52
26874     16 12 06 F1 | 	add	arg01, #22
26878                 | ' {
26878                 | ' 
26878                 | ' 	return *((WORD*)ptr);
26878     09 FB E1 FA | 	rdword	result1, arg01
2687c     FD 2A 0A F6 | 	mov	local07, result1 wz
26880     18 00 90 5D |  if_ne	jmp	#LR__4012
26884     34 24 06 F1 | 	add	local04, #52
26888     12 13 02 F6 | 	mov	arg01, local04
2688c     34 24 86 F1 | 	sub	local04, #52
26890     24 12 06 F1 | 	add	arg01, #36
26894                 | ' {
26894                 | ' 
26894                 | ' 	return *((DWORD*)ptr);
26894     09 FB 01 FB | 	rdlong	result1, arg01
26898     FD 2A 02 F6 | 	mov	local07, result1
2689c                 | LR__4012
2689c     1C 24 06 F1 | 	add	local04, #28
268a0     12 2B 62 FC | 	wrlong	local07, local04
268a4     28 24 06 F1 | 	add	local04, #40
268a8     12 27 C2 FA | 	rdbyte	local05, local04
268ac     42 24 86 F1 | 	sub	local04, #66
268b0     12 27 42 FC | 	wrbyte	local05, local04
268b4     12 27 C2 FA | 	rdbyte	local05, local04
268b8     02 24 86 F1 | 	sub	local04, #2
268bc     01 26 0E F2 | 	cmp	local05, #1 wz
268c0     02 24 06 51 |  if_ne	add	local04, #2
268c4     12 27 C2 5A |  if_ne	rdbyte	local05, local04
268c8     02 24 86 51 |  if_ne	sub	local04, #2
268cc     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
268d0     0D FA 05 56 |  if_ne	mov	result1, #13
268d4     BC 03 90 5D |  if_ne	jmp	#LR__4020
268d8     02 24 06 F1 | 	add	local04, #2
268dc     12 27 C2 FA | 	rdbyte	local05, local04
268e0     13 2B 02 FD | 	qmul	local07, local05
268e4     3F 24 06 F1 | 	add	local04, #63
268e8     12 27 C2 FA | 	rdbyte	local05, local04
268ec     37 24 86 F1 | 	sub	local04, #55
268f0     12 27 52 FC | 	wrword	local05, local04
268f4     12 27 EA FA | 	rdword	local05, local04 wz
268f8     0A 24 86 F1 | 	sub	local04, #10
268fc     18 2A 62 FD | 	getqx	local07
26900     20 00 90 AD |  if_e	jmp	#LR__4013
26904     0A 24 06 F1 | 	add	local04, #10
26908     12 27 E2 FA | 	rdword	local05, local04
2690c     13 23 32 F9 | 	getword	local03, local05, #0
26910     0A 24 86 F1 | 	sub	local04, #10
26914     13 27 32 F9 | 	getword	local05, local05, #0
26918     01 26 86 F1 | 	sub	local05, #1
2691c     13 23 CA F7 | 	test	local03, local05 wz
26920     08 00 90 AD |  if_e	jmp	#LR__4014
26924                 | LR__4013
26924     0D FA 05 F6 | 	mov	result1, #13
26928     68 03 90 FD | 	jmp	#LR__4020
2692c                 | LR__4014
2692c     34 24 06 F1 | 	add	local04, #52
26930     12 13 02 F6 | 	mov	arg01, local04
26934     11 12 06 F1 | 	add	arg01, #17
26938                 | ' {
26938                 | ' 
26938                 | ' 	return *((WORD*)ptr);
26938     09 FB E1 FA | 	rdword	result1, arg01
2693c     2C 24 86 F1 | 	sub	local04, #44
26940     12 FB 51 FC | 	wrword	result1, local04
26944     12 27 E2 FA | 	rdword	local05, local04
26948     08 24 86 F1 | 	sub	local04, #8
2694c     13 13 52 F6 | 	abs	arg01, local05 wc
26950     09 13 42 F8 | 	getnib	arg01, arg01, #0
26954     09 13 8A F6 | 	negc	arg01, arg01 wz
26958     0D FA 05 56 |  if_ne	mov	result1, #13
2695c     34 03 90 5D |  if_ne	jmp	#LR__4020
26960     34 24 06 F1 | 	add	local04, #52
26964     12 13 02 F6 | 	mov	arg01, local04
26968     34 24 86 F1 | 	sub	local04, #52
2696c     13 12 06 F1 | 	add	arg01, #19
26970                 | ' {
26970                 | ' 
26970                 | ' 	return *((WORD*)ptr);
26970     09 FB E1 FA | 	rdword	result1, arg01
26974     FD 2C 0A F6 | 	mov	local08, result1 wz
26978     34 24 06 A1 |  if_e	add	local04, #52
2697c     12 13 02 A6 |  if_e	mov	arg01, local04
26980     34 24 86 A1 |  if_e	sub	local04, #52
26984     20 12 06 A1 |  if_e	add	arg01, #32
26988                 | ' {
26988                 | ' 
26988                 | ' 	return *((DWORD*)ptr);
26988     09 2D 02 AB |  if_e	rdlong	local08, arg01
2698c     34 24 06 F1 | 	add	local04, #52
26990     12 13 02 F6 | 	mov	arg01, local04
26994     34 24 86 F1 | 	sub	local04, #52
26998     0E 12 06 F1 | 	add	arg01, #14
2699c                 | ' {
2699c                 | ' 
2699c                 | ' 	return *((WORD*)ptr);
2699c     09 FB E1 FA | 	rdword	result1, arg01
269a0     FD 12 02 F6 | 	mov	arg01, result1
269a4     09 27 02 F6 | 	mov	local05, arg01
269a8     0F 26 4E F7 | 	zerox	local05, #15 wz
269ac     0D FA 05 A6 |  if_e	mov	result1, #13
269b0     E0 02 90 AD |  if_e	jmp	#LR__4020
269b4     09 2F 32 F9 | 	getword	local09, arg01, #0
269b8     15 2F 02 F1 | 	add	local09, local07
269bc     08 24 06 F1 | 	add	local04, #8
269c0     12 27 E2 FA | 	rdword	local05, local04
269c4     08 24 86 F1 | 	sub	local04, #8
269c8     13 27 52 F6 | 	abs	local05, local05 wc
269cc     04 26 46 F0 | 	shr	local05, #4
269d0     13 2F 82 F3 | 	sumc	local09, local05
269d4     17 2D 12 F2 | 	cmp	local08, local09 wc
269d8     0D FA 05 C6 |  if_b	mov	result1, #13
269dc     B4 02 90 CD |  if_b	jmp	#LR__4020
269e0     17 2D 82 F1 | 	sub	local08, local09
269e4     0A 24 06 F1 | 	add	local04, #10
269e8     12 27 E2 FA | 	rdword	local05, local04
269ec     13 2D 12 FD | 	qdiv	local08, local05
269f0     0A 24 86 F1 | 	sub	local04, #10
269f4     18 26 62 FD | 	getqx	local05
269f8     00 26 0E F2 | 	cmp	local05, #0 wz
269fc     0D FA 05 A6 |  if_e	mov	result1, #13
26a00     90 02 90 AD |  if_e	jmp	#LR__4020
26a04     00 30 06 F6 | 	mov	local10, #0
26a08     FF FF 07 FF 
26a0c     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
26a10     03 30 06 C6 |  if_b	mov	local10, #3
26a14     7F 00 00 FF 
26a18     F6 27 16 F2 | 	cmp	local05, ##65526 wc
26a1c     02 30 06 C6 |  if_b	mov	local10, #2
26a20     07 00 00 FF 
26a24     F6 27 16 F2 | 	cmp	local05, ##4086 wc
26a28     01 30 06 C6 |  if_b	mov	local10, #1
26a2c     00 30 0E F2 | 	cmp	local10, #0 wz
26a30     0D FA 05 A6 |  if_e	mov	result1, #13
26a34     5C 02 90 AD |  if_e	jmp	#LR__4020
26a38     02 26 06 F1 | 	add	local05, #2
26a3c     18 24 06 F1 | 	add	local04, #24
26a40     12 27 62 FC | 	wrlong	local05, local04
26a44     08 24 06 F1 | 	add	local04, #8
26a48     12 29 62 FC | 	wrlong	local06, local04
26a4c     14 27 02 F6 | 	mov	local05, local06
26a50     09 13 32 F9 | 	getword	arg01, arg01, #0
26a54     09 27 02 F1 | 	add	local05, arg01
26a58     04 24 06 F1 | 	add	local04, #4
26a5c     12 27 62 FC | 	wrlong	local05, local04
26a60     14 27 02 F6 | 	mov	local05, local06
26a64     17 27 02 F1 | 	add	local05, local09
26a68     08 24 06 F1 | 	add	local04, #8
26a6c     12 27 62 FC | 	wrlong	local05, local04
26a70     2C 24 86 F1 | 	sub	local04, #44
26a74     03 30 0E F2 | 	cmp	local10, #3 wz
26a78     5C 00 90 5D |  if_ne	jmp	#LR__4015
26a7c     34 24 06 F1 | 	add	local04, #52
26a80     12 13 02 F6 | 	mov	arg01, local04
26a84     34 24 86 F1 | 	sub	local04, #52
26a88     2A 12 06 F1 | 	add	arg01, #42
26a8c                 | ' {
26a8c                 | ' 
26a8c                 | ' 	return *((WORD*)ptr);
26a8c     09 FB E9 FA | 	rdword	result1, arg01 wz
26a90     0D FA 05 56 |  if_ne	mov	result1, #13
26a94     FC 01 90 5D |  if_ne	jmp	#LR__4020
26a98     08 24 06 F1 | 	add	local04, #8
26a9c     12 27 EA FA | 	rdword	local05, local04 wz
26aa0     08 24 86 F1 | 	sub	local04, #8
26aa4     0D FA 05 56 |  if_ne	mov	result1, #13
26aa8     E8 01 90 5D |  if_ne	jmp	#LR__4020
26aac     34 24 06 F1 | 	add	local04, #52
26ab0     12 13 02 F6 | 	mov	arg01, local04
26ab4     2C 12 06 F1 | 	add	arg01, #44
26ab8                 | ' {
26ab8                 | ' 
26ab8                 | ' 	return *((DWORD*)ptr);
26ab8     09 FB 01 FB | 	rdlong	result1, arg01
26abc     0C 24 86 F1 | 	sub	local04, #12
26ac0     12 FB 61 FC | 	wrlong	result1, local04
26ac4     10 24 86 F1 | 	sub	local04, #16
26ac8     12 33 02 FB | 	rdlong	local11, local04
26acc     18 24 86 F1 | 	sub	local04, #24
26ad0     02 32 66 F0 | 	shl	local11, #2
26ad4     6C 00 90 FD | 	jmp	#LR__4017
26ad8                 | LR__4015
26ad8     08 24 06 F1 | 	add	local04, #8
26adc     12 27 EA FA | 	rdword	local05, local04 wz
26ae0     08 24 86 F1 | 	sub	local04, #8
26ae4     0D FA 05 A6 |  if_e	mov	result1, #13
26ae8     A8 01 90 AD |  if_e	jmp	#LR__4020
26aec     24 24 06 F1 | 	add	local04, #36
26af0     12 27 02 FB | 	rdlong	local05, local04
26af4     15 27 02 F1 | 	add	local05, local07
26af8     04 24 06 F1 | 	add	local04, #4
26afc     12 27 62 FC | 	wrlong	local05, local04
26b00     28 24 86 F1 | 	sub	local04, #40
26b04     02 30 0E F2 | 	cmp	local10, #2 wz
26b08     18 24 06 A1 |  if_e	add	local04, #24
26b0c     12 27 02 AB |  if_e	rdlong	local05, local04
26b10     18 24 86 A1 |  if_e	sub	local04, #24
26b14     01 26 66 A0 |  if_e	shl	local05, #1
26b18     24 00 90 AD |  if_e	jmp	#LR__4016
26b1c     18 24 06 F1 | 	add	local04, #24
26b20     12 33 02 FB | 	rdlong	local11, local04
26b24     19 27 02 F6 | 	mov	local05, local11
26b28     01 26 66 F0 | 	shl	local05, #1
26b2c     19 27 02 F1 | 	add	local05, local11
26b30     01 26 46 F0 | 	shr	local05, #1
26b34     18 24 86 F1 | 	sub	local04, #24
26b38     01 32 06 F5 | 	and	local11, #1
26b3c     19 27 02 F1 | 	add	local05, local11
26b40                 | LR__4016
26b40     13 33 02 F6 | 	mov	local11, local05
26b44                 | LR__4017
26b44     FF 33 06 F1 | 	add	local11, #511
26b48     09 32 46 F0 | 	shr	local11, #9
26b4c     1C 24 06 F1 | 	add	local04, #28
26b50     12 17 02 FB | 	rdlong	arg03, local04
26b54     1C 24 86 F1 | 	sub	local04, #28
26b58     19 17 12 F2 | 	cmp	arg03, local11 wc
26b5c     0D FA 05 C6 |  if_b	mov	result1, #13
26b60     30 01 90 CD |  if_b	jmp	#LR__4020
26b64     14 24 06 F1 | 	add	local04, #20
26b68     FF FF FF FF 
26b6c     12 FF 6B FC | 	wrlong	##-1, local04
26b70     04 24 86 F1 | 	sub	local04, #4
26b74     FF FF FF FF 
26b78     12 FF 6B FC | 	wrlong	##-1, local04
26b7c     0C 24 86 F1 | 	sub	local04, #12
26b80     12 01 49 FC | 	wrbyte	#128, local04
26b84     04 24 86 F1 | 	sub	local04, #4
26b88     03 30 0E F2 | 	cmp	local10, #3 wz
26b8c     D0 00 90 5D |  if_ne	jmp	#LR__4019
26b90     34 24 06 F1 | 	add	local04, #52
26b94     12 13 02 F6 | 	mov	arg01, local04
26b98     34 24 86 F1 | 	sub	local04, #52
26b9c     30 12 06 F1 | 	add	arg01, #48
26ba0                 | ' {
26ba0                 | ' 
26ba0                 | ' 	return *((WORD*)ptr);
26ba0     09 FB E1 FA | 	rdword	result1, arg01
26ba4     FD 26 32 F9 | 	getword	local05, result1, #0
26ba8     01 26 0E F2 | 	cmp	local05, #1 wz
26bac     B0 00 90 5D |  if_ne	jmp	#LR__4019
26bb0     01 28 06 F1 | 	add	local06, #1
26bb4     12 13 02 F6 | 	mov	arg01, local04
26bb8     14 15 02 F6 | 	mov	arg02, local06
26bbc     CC CD BF FD | 	call	#_fatfs_cc_move_window
26bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
26bc4     98 00 90 5D |  if_ne	jmp	#LR__4019
26bc8     04 24 06 F1 | 	add	local04, #4
26bcc     12 01 48 FC | 	wrbyte	#0, local04
26bd0     30 24 06 F1 | 	add	local04, #48
26bd4     12 13 02 F6 | 	mov	arg01, local04
26bd8     34 24 86 F1 | 	sub	local04, #52
26bdc     FE 13 06 F1 | 	add	arg01, #510
26be0                 | ' {
26be0                 | ' 
26be0                 | ' 	return *((WORD*)ptr);
26be0     09 FB E1 FA | 	rdword	result1, arg01
26be4     FD 26 32 F9 | 	getword	local05, result1, #0
26be8     55 00 00 FF 
26bec     55 26 0E F2 | 	cmp	local05, ##43605 wz
26bf0     34 24 06 A1 |  if_e	add	local04, #52
26bf4     12 13 02 A6 |  if_e	mov	arg01, local04
26bf8     34 24 86 A1 |  if_e	sub	local04, #52
26bfc                 | ' {
26bfc                 | ' 
26bfc                 | ' 	return *((DWORD*)ptr);
26bfc     09 FB 01 AB |  if_e	rdlong	result1, arg01
26c00     A9 B0 20 AF 
26c04     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
26c08     54 00 90 5D |  if_ne	jmp	#LR__4018
26c0c     34 24 06 F1 | 	add	local04, #52
26c10     12 13 02 F6 | 	mov	arg01, local04
26c14     34 24 86 F1 | 	sub	local04, #52
26c18     E4 13 06 F1 | 	add	arg01, #484
26c1c                 | ' {
26c1c                 | ' 
26c1c                 | ' 	return *((DWORD*)ptr);
26c1c     09 FB 01 FB | 	rdlong	result1, arg01
26c20     B9 A0 30 FF 
26c24     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
26c28     34 00 90 5D |  if_ne	jmp	#LR__4018
26c2c     34 24 06 F1 | 	add	local04, #52
26c30     12 13 02 F6 | 	mov	arg01, local04
26c34     E8 13 06 F1 | 	add	arg01, #488
26c38                 | ' {
26c38                 | ' 
26c38                 | ' 	return *((DWORD*)ptr);
26c38     09 FB 01 FB | 	rdlong	result1, arg01
26c3c     20 24 86 F1 | 	sub	local04, #32
26c40     12 FB 61 FC | 	wrlong	result1, local04
26c44     20 24 06 F1 | 	add	local04, #32
26c48     12 13 02 F6 | 	mov	arg01, local04
26c4c     EC 13 06 F1 | 	add	arg01, #492
26c50                 | ' {
26c50                 | ' 
26c50                 | ' 	return *((DWORD*)ptr);
26c50     09 FB 01 FB | 	rdlong	result1, arg01
26c54     24 24 86 F1 | 	sub	local04, #36
26c58     12 FB 61 FC | 	wrlong	result1, local04
26c5c     10 24 86 F1 | 	sub	local04, #16
26c60                 | LR__4018
26c60                 | LR__4019
26c60     12 31 42 FC | 	wrbyte	local10, local04
26c64     04 E4 05 F1 | 	add	objptr, #4
26c68     F2 26 E2 FA | 	rdword	local05, objptr
26c6c     01 26 06 F1 | 	add	local05, #1
26c70     F2 26 52 FC | 	wrword	local05, objptr
26c74     F2 32 E2 FA | 	rdword	local11, objptr
26c78     06 24 06 F1 | 	add	local04, #6
26c7c     12 33 52 FC | 	wrword	local11, local04
26c80     04 E4 05 F1 | 	add	objptr, #4
26c84     06 24 06 F1 | 	add	local04, #6
26c88     12 E5 61 FC | 	wrlong	objptr, local04
26c8c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
26c8c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
26c8c                 | ' 			{
26c8c                 | ' 
26c8c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
26c8c                 | ' 
26c8c                 | ' 
26c8c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
26c8c                 | ' 
26c8c                 | ' 			}
26c8c                 | ' 		}
26c8c                 | ' 
26c8c                 | ' 
26c8c                 | ' 	}
26c8c                 | ' 
26c8c                 | ' 	fs->fs_type = (BYTE)fmt;
26c8c                 | ' 	fs->id = ++Fsid;
26c8c                 | ' 
26c8c                 | ' 	fs->lfnbuf = LfnBuf;
26c8c                 | ' #line 3567 "ff.c"
26c8c                 | ' 	return FR_OK;
26c8c     00 FA 05 F6 | 	mov	result1, #0
26c90     08 E4 85 F1 | 	sub	objptr, #8
26c94                 | LR__4020
26c94     A7 F0 03 F6 | 	mov	ptra, fp
26c98     B2 00 A0 FD | 	call	#popregs_
26c9c                 | _fatfs_cc_mount_volume_ret
26c9c     2D 00 64 FD | 	ret
26ca0                 | 
26ca0                 | _fatfs_cc_validate
26ca0     09 01 0A F6 | 	mov	_var01, arg01 wz
26ca4     09 02 06 F6 | 	mov	_var02, #9
26ca8     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
26cac     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
26cb0     50 00 90 AD |  if_e	jmp	#LR__4030
26cb4     04 00 06 F1 | 	add	_var01, #4
26cb8     00 07 E2 FA | 	rdword	_var04, _var01
26cbc     04 00 86 F1 | 	sub	_var01, #4
26cc0     00 13 02 FB | 	rdlong	arg01, _var01
26cc4     06 12 06 F1 | 	add	arg01, #6
26cc8     09 FB E1 FA | 	rdword	result1, arg01
26ccc     FD 06 0A F2 | 	cmp	_var04, result1 wz
26cd0     30 00 90 5D |  if_ne	jmp	#LR__4030
26cd4     00 07 02 FB | 	rdlong	_var04, _var01
26cd8     01 06 06 F1 | 	add	_var04, #1
26cdc     03 13 CA FA | 	rdbyte	arg01, _var04 wz
26ce0     01 FA 05 56 |  if_ne	mov	result1, #1
26ce4                 | ' 
26ce4                 | ' 	return Stat;
26ce4     01 00 00 AF 
26ce8     20 E4 05 A1 |  if_e	add	objptr, ##544
26cec     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
26cf0     01 00 00 AF 
26cf4     20 E4 85 A1 |  if_e	sub	objptr, ##544
26cf8     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
26cfc     01 04 CE F7 | 	test	_var03, #1 wz
26d00     00 02 06 A6 |  if_e	mov	_var02, #0
26d04                 | LR__4030
26d04     00 02 0E F2 | 	cmp	_var02, #0 wz
26d08     00 05 02 AB |  if_e	rdlong	_var03, _var01
26d0c     00 04 06 56 |  if_ne	mov	_var03, #0
26d10     0A 05 62 FC | 	wrlong	_var03, arg02
26d14                 | ' 			res = FR_OK;
26d14                 | ' 		}
26d14                 | ' 
26d14                 | ' 	}
26d14                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
26d14                 | ' 	return res;
26d14     01 FB 01 F6 | 	mov	result1, _var02
26d18                 | _fatfs_cc_validate_ret
26d18     2D 00 64 FD | 	ret
26d1c                 | 
26d1c                 | _fatfs_cc_f_mount
26d1c     01 4A 05 F6 | 	mov	COUNT_, #1
26d20     A8 00 A0 FD | 	call	#pushregs_
26d24     20 F0 07 F1 | 	add	ptra, #32
26d28     04 4E 05 F1 | 	add	fp, #4
26d2c     A7 12 62 FC | 	wrlong	arg01, fp
26d30     04 4E 05 F1 | 	add	fp, #4
26d34     A7 14 62 FC | 	wrlong	arg02, fp
26d38     04 4E 05 F1 | 	add	fp, #4
26d3c     A7 16 42 FC | 	wrbyte	arg03, fp
26d40     04 4E 85 F1 | 	sub	fp, #4
26d44     A7 16 02 FB | 	rdlong	arg03, fp
26d48     14 4E 05 F1 | 	add	fp, #20
26d4c     A7 16 62 FC | 	wrlong	arg03, fp
26d50     A7 12 02 F6 | 	mov	arg01, fp
26d54     1C 4E 85 F1 | 	sub	fp, #28
26d58     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
26d5c     14 4E 05 F1 | 	add	fp, #20
26d60     A7 FA 61 FC | 	wrlong	result1, fp
26d64     14 4E 85 F1 | 	sub	fp, #20
26d68     00 FA 55 F2 | 	cmps	result1, #0 wc
26d6c     0B FA 05 C6 |  if_b	mov	result1, #11
26d70     C0 00 90 CD |  if_b	jmp	#LR__4041
26d74     14 4E 05 F1 | 	add	fp, #20
26d78     A7 16 02 FB | 	rdlong	arg03, fp
26d7c     02 16 66 F0 | 	shl	arg03, #2
26d80     F2 16 02 F1 | 	add	arg03, objptr
26d84     0B 17 0A FB | 	rdlong	arg03, arg03 wz
26d88     04 4E 85 F1 | 	sub	fp, #4
26d8c     A7 16 62 FC | 	wrlong	arg03, fp
26d90     10 4E 85 F1 | 	sub	fp, #16
26d94     28 00 90 AD |  if_e	jmp	#LR__4040
26d98     10 4E 05 F1 | 	add	fp, #16
26d9c     A7 16 02 FB | 	rdlong	arg03, fp
26da0     10 4E 85 F1 | 	sub	fp, #16
26da4     01 16 06 F1 | 	add	arg03, #1
26da8     0B 13 C2 FA | 	rdbyte	arg01, arg03
26dac     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
26db0     10 4E 05 F1 | 	add	fp, #16
26db4     A7 16 02 FB | 	rdlong	arg03, fp
26db8     10 4E 85 F1 | 	sub	fp, #16
26dbc     0B 01 48 FC | 	wrbyte	#0, arg03
26dc0                 | LR__4040
26dc0     04 4E 05 F1 | 	add	fp, #4
26dc4     A7 1E 0A FB | 	rdlong	local01, fp wz
26dc8     04 4E 85 F1 | 	sub	fp, #4
26dcc     04 4E 05 51 |  if_ne	add	fp, #4
26dd0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26dd4     04 4E 85 51 |  if_ne	sub	fp, #4
26dd8     0F 01 48 5C |  if_ne	wrbyte	#0, local01
26ddc     14 4E 05 F1 | 	add	fp, #20
26de0     A7 1E 02 FB | 	rdlong	local01, fp
26de4     02 1E 66 F0 | 	shl	local01, #2
26de8     F2 1E 02 F1 | 	add	local01, objptr
26dec     10 4E 85 F1 | 	sub	fp, #16
26df0     A7 16 02 FB | 	rdlong	arg03, fp
26df4     0F 17 62 FC | 	wrlong	arg03, local01
26df8     08 4E 05 F1 | 	add	fp, #8
26dfc     A7 1E CA FA | 	rdbyte	local01, fp wz
26e00     0C 4E 85 F1 | 	sub	fp, #12
26e04     00 FA 05 A6 |  if_e	mov	result1, #0
26e08     28 00 90 AD |  if_e	jmp	#LR__4041
26e0c     08 4E 05 F1 | 	add	fp, #8
26e10     A7 12 02 F6 | 	mov	arg01, fp
26e14     04 4E 85 F1 | 	sub	fp, #4
26e18     A7 14 02 F6 | 	mov	arg02, fp
26e1c     04 4E 85 F1 | 	sub	fp, #4
26e20     00 16 06 F6 | 	mov	arg03, #0
26e24     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
26e28     18 4E 05 F1 | 	add	fp, #24
26e2c     A7 FA 61 FC | 	wrlong	result1, fp
26e30                 | ' 
26e30                 | ' 	res = mount_volume(&path, &fs, 0);
26e30                 | ' 	return res ;
26e30     18 4E 85 F1 | 	sub	fp, #24
26e34                 | LR__4041
26e34     A7 F0 03 F6 | 	mov	ptra, fp
26e38     B2 00 A0 FD | 	call	#popregs_
26e3c                 | _fatfs_cc_f_mount_ret
26e3c     2D 00 64 FD | 	ret
26e40                 | 
26e40                 | _fatfs_cc_f_open
26e40     02 4A 05 F6 | 	mov	COUNT_, #2
26e44     A8 00 A0 FD | 	call	#pushregs_
26e48     60 F0 07 F1 | 	add	ptra, #96
26e4c     04 4E 05 F1 | 	add	fp, #4
26e50     A7 12 62 FC | 	wrlong	arg01, fp
26e54     04 4E 05 F1 | 	add	fp, #4
26e58     A7 14 62 FC | 	wrlong	arg02, fp
26e5c     04 4E 05 F1 | 	add	fp, #4
26e60     A7 16 42 FC | 	wrbyte	arg03, fp
26e64     08 4E 85 F1 | 	sub	fp, #8
26e68     A7 18 0A FB | 	rdlong	arg04, fp wz
26e6c     04 4E 85 F1 | 	sub	fp, #4
26e70     09 FA 05 A6 |  if_e	mov	result1, #9
26e74     98 06 90 AD |  if_e	jmp	#LR__4067
26e78     0C 4E 05 F1 | 	add	fp, #12
26e7c     A7 18 C2 FA | 	rdbyte	arg04, fp
26e80     3F 18 06 F5 | 	and	arg04, #63
26e84     A7 18 42 FC | 	wrbyte	arg04, fp
26e88     04 4E 85 F1 | 	sub	fp, #4
26e8c     A7 12 02 F6 | 	mov	arg01, fp
26e90     3C 4E 05 F1 | 	add	fp, #60
26e94     A7 14 02 F6 | 	mov	arg02, fp
26e98     38 4E 85 F1 | 	sub	fp, #56
26e9c     A7 16 C2 FA | 	rdbyte	arg03, fp
26ea0     0C 4E 85 F1 | 	sub	fp, #12
26ea4     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
26ea8     10 4E 05 F1 | 	add	fp, #16
26eac     A7 FA 61 FC | 	wrlong	result1, fp
26eb0     10 4E 85 F1 | 	sub	fp, #16
26eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
26eb8     2C 06 90 5D |  if_ne	jmp	#LR__4066
26ebc     44 4E 05 F1 | 	add	fp, #68
26ec0     A7 18 02 FB | 	rdlong	arg04, fp
26ec4     30 4E 85 F1 | 	sub	fp, #48
26ec8     A7 18 62 FC | 	wrlong	arg04, fp
26ecc     A7 12 02 F6 | 	mov	arg01, fp
26ed0     0C 4E 85 F1 | 	sub	fp, #12
26ed4     A7 1E 02 FB | 	rdlong	local01, fp
26ed8     08 4E 85 F1 | 	sub	fp, #8
26edc     0F 15 02 F6 | 	mov	arg02, local01
26ee0     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
26ee4     10 4E 05 F1 | 	add	fp, #16
26ee8     A7 FA 61 FC | 	wrlong	result1, fp
26eec     10 4E 85 F1 | 	sub	fp, #16
26ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
26ef4     1C 00 90 5D |  if_ne	jmp	#LR__4050
26ef8     3F 4E 05 F1 | 	add	fp, #63
26efc     A7 18 C2 FA | 	rdbyte	arg04, fp
26f00     3F 4E 85 F1 | 	sub	fp, #63
26f04     80 18 CE F7 | 	test	arg04, #128 wz
26f08     10 4E 05 51 |  if_ne	add	fp, #16
26f0c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
26f10     10 4E 85 51 |  if_ne	sub	fp, #16
26f14                 | LR__4050
26f14     0C 4E 05 F1 | 	add	fp, #12
26f18     A7 18 C2 FA | 	rdbyte	arg04, fp
26f1c     0C 4E 85 F1 | 	sub	fp, #12
26f20     1C 18 CE F7 | 	test	arg04, #28 wz
26f24     F0 01 90 AD |  if_e	jmp	#LR__4055
26f28     10 4E 05 F1 | 	add	fp, #16
26f2c     A7 1E 0A FB | 	rdlong	local01, fp wz
26f30     10 4E 85 F1 | 	sub	fp, #16
26f34     48 00 90 AD |  if_e	jmp	#LR__4052
26f38     10 4E 05 F1 | 	add	fp, #16
26f3c     A7 18 02 FB | 	rdlong	arg04, fp
26f40     10 4E 85 F1 | 	sub	fp, #16
26f44     04 18 0E F2 | 	cmp	arg04, #4 wz
26f48     1C 00 90 5D |  if_ne	jmp	#LR__4051
26f4c     14 4E 05 F1 | 	add	fp, #20
26f50     A7 12 02 F6 | 	mov	arg01, fp
26f54     14 4E 85 F1 | 	sub	fp, #20
26f58     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
26f5c     10 4E 05 F1 | 	add	fp, #16
26f60     A7 FA 61 FC | 	wrlong	result1, fp
26f64     10 4E 85 F1 | 	sub	fp, #16
26f68                 | LR__4051
26f68     0C 4E 05 F1 | 	add	fp, #12
26f6c     A7 1E C2 FA | 	rdbyte	local01, fp
26f70     08 1E 46 F5 | 	or	local01, #8
26f74     A7 1E 42 FC | 	wrbyte	local01, fp
26f78     0C 4E 85 F1 | 	sub	fp, #12
26f7c     3C 00 90 FD | 	jmp	#LR__4054
26f80                 | LR__4052
26f80     1A 4E 05 F1 | 	add	fp, #26
26f84     A7 1E C2 FA | 	rdbyte	local01, fp
26f88     1A 4E 85 F1 | 	sub	fp, #26
26f8c     11 1E CE F7 | 	test	local01, #17 wz
26f90     10 4E 05 51 |  if_ne	add	fp, #16
26f94     A7 0E 68 5C |  if_ne	wrlong	#7, fp
26f98     10 4E 85 51 |  if_ne	sub	fp, #16
26f9c     1C 00 90 5D |  if_ne	jmp	#LR__4053
26fa0     0C 4E 05 F1 | 	add	fp, #12
26fa4     A7 1E C2 FA | 	rdbyte	local01, fp
26fa8     0C 4E 85 F1 | 	sub	fp, #12
26fac     04 1E CE F7 | 	test	local01, #4 wz
26fb0     10 4E 05 51 |  if_ne	add	fp, #16
26fb4     A7 10 68 5C |  if_ne	wrlong	#8, fp
26fb8     10 4E 85 51 |  if_ne	sub	fp, #16
26fbc                 | LR__4053
26fbc                 | LR__4054
26fbc     10 4E 05 F1 | 	add	fp, #16
26fc0     A7 1E 0A FB | 	rdlong	local01, fp wz
26fc4     10 4E 85 F1 | 	sub	fp, #16
26fc8     A8 01 90 5D |  if_ne	jmp	#LR__4058
26fcc     0C 4E 05 F1 | 	add	fp, #12
26fd0     A7 1E C2 FA | 	rdbyte	local01, fp
26fd4     0C 4E 85 F1 | 	sub	fp, #12
26fd8     08 1E CE F7 | 	test	local01, #8 wz
26fdc     94 01 90 AD |  if_e	jmp	#LR__4058
26fe0     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
26fe4     54 4E 05 F1 | 	add	fp, #84
26fe8     A7 FA 61 FC | 	wrlong	result1, fp
26fec     24 4E 85 F1 | 	sub	fp, #36
26ff0     A7 12 02 FB | 	rdlong	arg01, fp
26ff4     0E 12 06 F1 | 	add	arg01, #14
26ff8     09 FB 61 FC | 	wrlong	result1, arg01
26ffc     A7 12 02 FB | 	rdlong	arg01, fp
27000     16 12 06 F1 | 	add	arg01, #22
27004     24 4E 05 F1 | 	add	fp, #36
27008     A7 14 02 FB | 	rdlong	arg02, fp
2700c     09 15 62 FC | 	wrlong	arg02, arg01
27010     10 4E 85 F1 | 	sub	fp, #16
27014     A7 12 02 FB | 	rdlong	arg01, fp
27018     14 4E 85 F1 | 	sub	fp, #20
2701c     A7 14 02 FB | 	rdlong	arg02, fp
27020     30 4E 85 F1 | 	sub	fp, #48
27024     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
27028     48 4E 05 F1 | 	add	fp, #72
2702c     A7 FA 61 FC | 	wrlong	result1, fp
27030     18 4E 85 F1 | 	sub	fp, #24
27034     A7 1E 02 FB | 	rdlong	local01, fp
27038     0B 1E 06 F1 | 	add	local01, #11
2703c     0F 41 48 FC | 	wrbyte	#32, local01
27040     14 4E 05 F1 | 	add	fp, #20
27044     A7 12 02 FB | 	rdlong	arg01, fp
27048     14 4E 85 F1 | 	sub	fp, #20
2704c     A7 14 02 FB | 	rdlong	arg02, fp
27050     30 4E 85 F1 | 	sub	fp, #48
27054     00 16 06 F6 | 	mov	arg03, #0
27058     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2705c     30 4E 05 F1 | 	add	fp, #48
27060     A7 12 02 FB | 	rdlong	arg01, fp
27064     1C 12 06 F1 | 	add	arg01, #28
27068     09 01 68 FC | 	wrlong	#0, arg01
2706c     14 4E 05 F1 | 	add	fp, #20
27070     A7 1E 02 FB | 	rdlong	local01, fp
27074     03 1E 06 F1 | 	add	local01, #3
27078     0F 03 48 FC | 	wrbyte	#1, local01
2707c     04 4E 05 F1 | 	add	fp, #4
27080     A7 1E 0A FB | 	rdlong	local01, fp wz
27084     48 4E 85 F1 | 	sub	fp, #72
27088     E8 00 90 AD |  if_e	jmp	#LR__4058
2708c     44 4E 05 F1 | 	add	fp, #68
27090     A7 1E 02 FB | 	rdlong	local01, fp
27094     30 1E 06 F1 | 	add	local01, #48
27098     0F 1F 02 FB | 	rdlong	local01, local01
2709c     14 4E 05 F1 | 	add	fp, #20
270a0     A7 1E 62 FC | 	wrlong	local01, fp
270a4     44 4E 85 F1 | 	sub	fp, #68
270a8     A7 12 02 F6 | 	mov	arg01, fp
270ac     34 4E 05 F1 | 	add	fp, #52
270b0     A7 14 02 FB | 	rdlong	arg02, fp
270b4     48 4E 85 F1 | 	sub	fp, #72
270b8     00 16 06 F6 | 	mov	arg03, #0
270bc     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
270c0     10 4E 05 F1 | 	add	fp, #16
270c4     A7 FA 61 FC | 	wrlong	result1, fp
270c8     10 4E 85 F1 | 	sub	fp, #16
270cc     00 FA 0D F2 | 	cmp	result1, #0 wz
270d0     A0 00 90 5D |  if_ne	jmp	#LR__4058
270d4     44 4E 05 F1 | 	add	fp, #68
270d8     A7 12 02 FB | 	rdlong	arg01, fp
270dc     14 4E 05 F1 | 	add	fp, #20
270e0     A7 14 02 FB | 	rdlong	arg02, fp
270e4     58 4E 85 F1 | 	sub	fp, #88
270e8     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
270ec     10 4E 05 F1 | 	add	fp, #16
270f0     A7 FA 61 FC | 	wrlong	result1, fp
270f4     34 4E 05 F1 | 	add	fp, #52
270f8     A7 18 02 FB | 	rdlong	arg04, fp
270fc     04 4E 05 F1 | 	add	fp, #4
27100     A7 1E 02 FB | 	rdlong	local01, fp
27104     48 4E 85 F1 | 	sub	fp, #72
27108     01 1E 86 F1 | 	sub	local01, #1
2710c     10 18 06 F1 | 	add	arg04, #16
27110     0C 1F 62 FC | 	wrlong	local01, arg04
27114     5C 00 90 FD | 	jmp	#LR__4058
27118                 | LR__4055
27118     10 4E 05 F1 | 	add	fp, #16
2711c     A7 18 0A FB | 	rdlong	arg04, fp wz
27120     10 4E 85 F1 | 	sub	fp, #16
27124     4C 00 90 5D |  if_ne	jmp	#LR__4057
27128     1A 4E 05 F1 | 	add	fp, #26
2712c     A7 18 C2 FA | 	rdbyte	arg04, fp
27130     1A 4E 85 F1 | 	sub	fp, #26
27134     10 18 CE F7 | 	test	arg04, #16 wz
27138     10 4E 05 51 |  if_ne	add	fp, #16
2713c     A7 08 68 5C |  if_ne	wrlong	#4, fp
27140     10 4E 85 51 |  if_ne	sub	fp, #16
27144     2C 00 90 5D |  if_ne	jmp	#LR__4056
27148     0C 4E 05 F1 | 	add	fp, #12
2714c     A7 18 C2 FA | 	rdbyte	arg04, fp
27150     0C 4E 85 F1 | 	sub	fp, #12
27154     02 18 CE F7 | 	test	arg04, #2 wz
27158     1A 4E 05 51 |  if_ne	add	fp, #26
2715c     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
27160     1A 4E 85 51 |  if_ne	sub	fp, #26
27164     01 1E CE 57 |  if_ne	test	local01, #1 wz
27168     10 4E 05 51 |  if_ne	add	fp, #16
2716c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
27170     10 4E 85 51 |  if_ne	sub	fp, #16
27174                 | LR__4056
27174                 | LR__4057
27174                 | LR__4058
27174     10 4E 05 F1 | 	add	fp, #16
27178     A7 1E 0A FB | 	rdlong	local01, fp wz
2717c     10 4E 85 F1 | 	sub	fp, #16
27180     60 00 90 5D |  if_ne	jmp	#LR__4059
27184     0C 4E 05 F1 | 	add	fp, #12
27188     A7 20 C2 FA | 	rdbyte	local02, fp
2718c     0C 4E 85 F1 | 	sub	fp, #12
27190     08 20 CE F7 | 	test	local02, #8 wz
27194     0C 4E 05 51 |  if_ne	add	fp, #12
27198     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2719c     40 20 46 55 |  if_ne	or	local02, #64
271a0     A7 20 42 5C |  if_ne	wrbyte	local02, fp
271a4     0C 4E 85 51 |  if_ne	sub	fp, #12
271a8     04 4E 05 F1 | 	add	fp, #4
271ac     A7 20 02 FB | 	rdlong	local02, fp
271b0     40 4E 05 F1 | 	add	fp, #64
271b4     A7 1E 02 FB | 	rdlong	local01, fp
271b8     30 1E 06 F1 | 	add	local01, #48
271bc     0F 1F 02 FB | 	rdlong	local01, local01
271c0     20 20 06 F1 | 	add	local02, #32
271c4     10 1F 62 FC | 	wrlong	local01, local02
271c8     40 4E 85 F1 | 	sub	fp, #64
271cc     A7 20 02 FB | 	rdlong	local02, fp
271d0     2C 4E 05 F1 | 	add	fp, #44
271d4     A7 1E 02 FB | 	rdlong	local01, fp
271d8     30 4E 85 F1 | 	sub	fp, #48
271dc     24 20 06 F1 | 	add	local02, #36
271e0     10 1F 62 FC | 	wrlong	local01, local02
271e4                 | LR__4059
271e4     10 4E 05 F1 | 	add	fp, #16
271e8     A7 20 0A FB | 	rdlong	local02, fp wz
271ec     10 4E 85 F1 | 	sub	fp, #16
271f0     F4 02 90 5D |  if_ne	jmp	#LR__4065
271f4     04 4E 05 F1 | 	add	fp, #4
271f8     A7 20 02 FB | 	rdlong	local02, fp
271fc     40 4E 05 F1 | 	add	fp, #64
27200     A7 12 02 FB | 	rdlong	arg01, fp
27204     14 4E 85 F1 | 	sub	fp, #20
27208     A7 14 02 FB | 	rdlong	arg02, fp
2720c     30 4E 85 F1 | 	sub	fp, #48
27210     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
27214     08 20 06 F1 | 	add	local02, #8
27218     10 FB 61 FC | 	wrlong	result1, local02
2721c     04 4E 05 F1 | 	add	fp, #4
27220     A7 20 02 FB | 	rdlong	local02, fp
27224     2C 4E 05 F1 | 	add	fp, #44
27228     A7 12 02 FB | 	rdlong	arg01, fp
2722c     1C 12 06 F1 | 	add	arg01, #28
27230                 | ' {
27230                 | ' 
27230                 | ' 	return *((DWORD*)ptr);
27230     09 FB 01 FB | 	rdlong	result1, arg01
27234     0C 20 06 F1 | 	add	local02, #12
27238     10 FB 61 FC | 	wrlong	result1, local02
2723c     2C 4E 85 F1 | 	sub	fp, #44
27240     A7 20 02 FB | 	rdlong	local02, fp
27244     40 4E 05 F1 | 	add	fp, #64
27248     A7 1E 02 FB | 	rdlong	local01, fp
2724c     10 1F 62 FC | 	wrlong	local01, local02
27250     40 4E 85 F1 | 	sub	fp, #64
27254     A7 20 02 FB | 	rdlong	local02, fp
27258     40 4E 05 F1 | 	add	fp, #64
2725c     A7 1E 02 FB | 	rdlong	local01, fp
27260     06 1E 06 F1 | 	add	local01, #6
27264     0F 1F E2 FA | 	rdword	local01, local01
27268     04 20 06 F1 | 	add	local02, #4
2726c     10 1F 52 FC | 	wrword	local01, local02
27270     40 4E 85 F1 | 	sub	fp, #64
27274     A7 20 02 FB | 	rdlong	local02, fp
27278     08 4E 05 F1 | 	add	fp, #8
2727c     A7 1E C2 FA | 	rdbyte	local01, fp
27280     10 20 06 F1 | 	add	local02, #16
27284     10 1F 42 FC | 	wrbyte	local01, local02
27288     08 4E 85 F1 | 	sub	fp, #8
2728c     A7 20 02 FB | 	rdlong	local02, fp
27290     11 20 06 F1 | 	add	local02, #17
27294     10 01 48 FC | 	wrbyte	#0, local02
27298     A7 20 02 FB | 	rdlong	local02, fp
2729c     1C 20 06 F1 | 	add	local02, #28
272a0     10 01 68 FC | 	wrlong	#0, local02
272a4     A7 20 02 FB | 	rdlong	local02, fp
272a8     14 20 06 F1 | 	add	local02, #20
272ac     10 01 68 FC | 	wrlong	#0, local02
272b0     A7 12 02 FB | 	rdlong	arg01, fp
272b4     04 4E 85 F1 | 	sub	fp, #4
272b8     28 12 06 F1 | 	add	arg01, #40
272bc     00 14 06 F6 | 	mov	arg02, #0
272c0     09 16 C6 F9 | 	decod	arg03, #9
272c4     98 00 A0 FD | 	call	#\builtin_bytefill_
272c8     0C 4E 05 F1 | 	add	fp, #12
272cc     A7 20 C2 FA | 	rdbyte	local02, fp
272d0     0C 4E 85 F1 | 	sub	fp, #12
272d4     20 20 CE F7 | 	test	local02, #32 wz
272d8     0C 02 90 AD |  if_e	jmp	#LR__4064
272dc     04 4E 05 F1 | 	add	fp, #4
272e0     A7 1E 02 FB | 	rdlong	local01, fp
272e4     04 4E 85 F1 | 	sub	fp, #4
272e8     0C 1E 06 F1 | 	add	local01, #12
272ec     0F 21 02 FB | 	rdlong	local02, local01
272f0     01 20 16 F2 | 	cmp	local02, #1 wc
272f4     F0 01 90 CD |  if_b	jmp	#LR__4064
272f8     04 4E 05 F1 | 	add	fp, #4
272fc     A7 1E 02 FB | 	rdlong	local01, fp
27300     0F 21 02 F6 | 	mov	local02, local01
27304     0C 1E 06 F1 | 	add	local01, #12
27308     0F 1F 02 FB | 	rdlong	local01, local01
2730c     14 20 06 F1 | 	add	local02, #20
27310     10 1F 62 FC | 	wrlong	local01, local02
27314     40 4E 05 F1 | 	add	fp, #64
27318     A7 20 02 FB | 	rdlong	local02, fp
2731c     0A 20 06 F1 | 	add	local02, #10
27320     10 21 E2 FA | 	rdword	local02, local02
27324     09 20 66 F0 | 	shl	local02, #9
27328     08 4E 05 F1 | 	add	fp, #8
2732c     A7 20 62 FC | 	wrlong	local02, fp
27330     48 4E 85 F1 | 	sub	fp, #72
27334     A7 20 02 FB | 	rdlong	local02, fp
27338     08 20 06 F1 | 	add	local02, #8
2733c     10 1F 02 FB | 	rdlong	local01, local02
27340     4C 4E 05 F1 | 	add	fp, #76
27344     A7 1E 62 FC | 	wrlong	local01, fp
27348                 | ' 				fp->fptr = fp->obj.objsize;
27348                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
27348                 | ' 				clst = fp->obj.sclust;
27348                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
27348     4C 4E 85 F1 | 	sub	fp, #76
2734c     A7 20 02 FB | 	rdlong	local02, fp
27350     0C 20 06 F1 | 	add	local02, #12
27354     10 1F 02 FB | 	rdlong	local01, local02
27358     58 4E 05 F1 | 	add	fp, #88
2735c     A7 1E 62 FC | 	wrlong	local01, fp
27360     5C 4E 85 F1 | 	sub	fp, #92
27364                 | LR__4060
27364     10 4E 05 F1 | 	add	fp, #16
27368     A7 20 0A FB | 	rdlong	local02, fp wz
2736c     10 4E 85 F1 | 	sub	fp, #16
27370     94 00 90 5D |  if_ne	jmp	#LR__4061
27374     5C 4E 05 F1 | 	add	fp, #92
27378     A7 20 02 FB | 	rdlong	local02, fp
2737c     10 4E 85 F1 | 	sub	fp, #16
27380     A7 1E 02 FB | 	rdlong	local01, fp
27384     4C 4E 85 F1 | 	sub	fp, #76
27388     0F 21 1A F2 | 	cmp	local02, local01 wcz
2738c     78 00 90 ED |  if_be	jmp	#LR__4061
27390     04 4E 05 F1 | 	add	fp, #4
27394     A7 12 02 FB | 	rdlong	arg01, fp
27398     4C 4E 05 F1 | 	add	fp, #76
2739c     A7 14 02 FB | 	rdlong	arg02, fp
273a0     50 4E 85 F1 | 	sub	fp, #80
273a4     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
273a8     50 4E 05 F1 | 	add	fp, #80
273ac     A7 FA 61 FC | 	wrlong	result1, fp
273b0     50 4E 85 F1 | 	sub	fp, #80
273b4     02 FA 15 F2 | 	cmp	result1, #2 wc
273b8     10 4E 05 C1 |  if_b	add	fp, #16
273bc     A7 04 68 CC |  if_b	wrlong	#2, fp
273c0     10 4E 85 C1 |  if_b	sub	fp, #16
273c4     50 4E 05 F1 | 	add	fp, #80
273c8     A7 20 02 FB | 	rdlong	local02, fp
273cc     50 4E 85 F1 | 	sub	fp, #80
273d0     FF FF 7F FF 
273d4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
273d8     10 4E 05 A1 |  if_e	add	fp, #16
273dc     A7 02 68 AC |  if_e	wrlong	#1, fp
273e0     10 4E 85 A1 |  if_e	sub	fp, #16
273e4     5C 4E 05 F1 | 	add	fp, #92
273e8     A7 20 02 FB | 	rdlong	local02, fp
273ec     10 4E 85 F1 | 	sub	fp, #16
273f0     A7 1E 02 FB | 	rdlong	local01, fp
273f4     0F 21 82 F1 | 	sub	local02, local01
273f8     10 4E 05 F1 | 	add	fp, #16
273fc     A7 20 62 FC | 	wrlong	local02, fp
27400     5C 4E 85 F1 | 	sub	fp, #92
27404     5C FF 9F FD | 	jmp	#LR__4060
27408                 | LR__4061
27408     04 4E 05 F1 | 	add	fp, #4
2740c     A7 20 02 FB | 	rdlong	local02, fp
27410     4C 4E 05 F1 | 	add	fp, #76
27414     A7 1E 02 FB | 	rdlong	local01, fp
27418     18 20 06 F1 | 	add	local02, #24
2741c     10 1F 62 FC | 	wrlong	local01, local02
27420     40 4E 85 F1 | 	sub	fp, #64
27424     A7 20 0A FB | 	rdlong	local02, fp wz
27428     10 4E 85 F1 | 	sub	fp, #16
2742c     B8 00 90 5D |  if_ne	jmp	#LR__4063
27430     5C 4E 05 F1 | 	add	fp, #92
27434     A7 1E 02 FB | 	rdlong	local01, fp
27438     5C 4E 85 F1 | 	sub	fp, #92
2743c     FF 1F CE F7 | 	test	local01, #511 wz
27440     A4 00 90 AD |  if_e	jmp	#LR__4063
27444     44 4E 05 F1 | 	add	fp, #68
27448     A7 12 02 FB | 	rdlong	arg01, fp
2744c     0C 4E 05 F1 | 	add	fp, #12
27450     A7 14 02 FB | 	rdlong	arg02, fp
27454     50 4E 85 F1 | 	sub	fp, #80
27458     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2745c     58 4E 05 F1 | 	add	fp, #88
27460     A7 FA 61 FC | 	wrlong	result1, fp
27464     00 FA 4D F2 | 	cmps	result1, #0 wz
27468     58 4E 85 F1 | 	sub	fp, #88
2746c     10 4E 05 A1 |  if_e	add	fp, #16
27470     A7 04 68 AC |  if_e	wrlong	#2, fp
27474     10 4E 85 A1 |  if_e	sub	fp, #16
27478     6C 00 90 AD |  if_e	jmp	#LR__4062
2747c     04 4E 05 F1 | 	add	fp, #4
27480     A7 20 02 FB | 	rdlong	local02, fp
27484     54 4E 05 F1 | 	add	fp, #84
27488     A7 1E 02 FB | 	rdlong	local01, fp
2748c     04 4E 05 F1 | 	add	fp, #4
27490     A7 18 02 FB | 	rdlong	arg04, fp
27494     09 18 46 F0 | 	shr	arg04, #9
27498     0C 1F 02 F1 | 	add	local01, arg04
2749c     1C 20 06 F1 | 	add	local02, #28
274a0     10 1F 62 FC | 	wrlong	local01, local02
274a4     18 4E 85 F1 | 	sub	fp, #24
274a8     A7 20 02 FB | 	rdlong	local02, fp
274ac     01 20 06 F1 | 	add	local02, #1
274b0     10 13 C2 FA | 	rdbyte	arg01, local02
274b4     40 4E 85 F1 | 	sub	fp, #64
274b8     A7 20 02 FB | 	rdlong	local02, fp
274bc     10 15 02 F6 | 	mov	arg02, local02
274c0     28 14 06 F1 | 	add	arg02, #40
274c4     04 4E 85 F1 | 	sub	fp, #4
274c8     1C 20 06 F1 | 	add	local02, #28
274cc     10 17 02 FB | 	rdlong	arg03, local02
274d0     01 18 06 F6 | 	mov	arg04, #1
274d4     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
274d8     00 FA 0D F2 | 	cmp	result1, #0 wz
274dc     10 4E 05 51 |  if_ne	add	fp, #16
274e0     A7 02 68 5C |  if_ne	wrlong	#1, fp
274e4     10 4E 85 51 |  if_ne	sub	fp, #16
274e8                 | LR__4062
274e8                 | LR__4063
274e8                 | LR__4064
274e8                 | LR__4065
274e8                 | LR__4066
274e8     10 4E 05 F1 | 	add	fp, #16
274ec     A7 20 0A FB | 	rdlong	local02, fp wz
274f0     10 4E 85 F1 | 	sub	fp, #16
274f4     04 4E 05 51 |  if_ne	add	fp, #4
274f8     A7 20 02 5B |  if_ne	rdlong	local02, fp
274fc     04 4E 85 51 |  if_ne	sub	fp, #4
27500     10 01 68 5C |  if_ne	wrlong	#0, local02
27504                 | ' 
27504                 | ' 	return res ;
27504     10 4E 05 F1 | 	add	fp, #16
27508     A7 FA 01 FB | 	rdlong	result1, fp
2750c     10 4E 85 F1 | 	sub	fp, #16
27510                 | LR__4067
27510     A7 F0 03 F6 | 	mov	ptra, fp
27514     B2 00 A0 FD | 	call	#popregs_
27518                 | _fatfs_cc_f_open_ret
27518     2D 00 64 FD | 	ret
2751c                 | 
2751c                 | _fatfs_cc_f_read
2751c     0E 4A 05 F6 | 	mov	COUNT_, #14
27520     A8 00 A0 FD | 	call	#pushregs_
27524     38 F0 07 F1 | 	add	ptra, #56
27528     04 4E 05 F1 | 	add	fp, #4
2752c     A7 12 62 FC | 	wrlong	arg01, fp
27530     04 4E 05 F1 | 	add	fp, #4
27534     A7 14 62 FC | 	wrlong	arg02, fp
27538     04 4E 05 F1 | 	add	fp, #4
2753c     A7 16 62 FC | 	wrlong	arg03, fp
27540     04 4E 05 F1 | 	add	fp, #4
27544     A7 18 62 FC | 	wrlong	arg04, fp
27548     08 4E 85 F1 | 	sub	fp, #8
2754c     A7 FA 01 FB | 	rdlong	result1, fp
27550     2C 4E 05 F1 | 	add	fp, #44
27554     A7 FA 61 FC | 	wrlong	result1, fp
27558     24 4E 85 F1 | 	sub	fp, #36
2755c     A7 FA 01 FB | 	rdlong	result1, fp
27560     FD 00 68 FC | 	wrlong	#0, result1
27564     0C 4E 85 F1 | 	sub	fp, #12
27568     A7 12 02 FB | 	rdlong	arg01, fp
2756c     14 4E 05 F1 | 	add	fp, #20
27570     A7 14 02 F6 | 	mov	arg02, fp
27574     18 4E 85 F1 | 	sub	fp, #24
27578     24 F7 BF FD | 	call	#_fatfs_cc_validate
2757c     14 4E 05 F1 | 	add	fp, #20
27580     A7 FA 61 FC | 	wrlong	result1, fp
27584     00 FA 4D F2 | 	cmps	result1, #0 wz
27588     14 4E 85 F1 | 	sub	fp, #20
2758c     20 00 90 5D |  if_ne	jmp	#LR__4070
27590     04 4E 05 F1 | 	add	fp, #4
27594     A7 14 02 FB | 	rdlong	arg02, fp
27598     11 14 06 F1 | 	add	arg02, #17
2759c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
275a0     10 4E 05 F1 | 	add	fp, #16
275a4     A7 14 62 FC | 	wrlong	arg02, fp
275a8     14 4E 85 F1 | 	sub	fp, #20
275ac     10 00 90 AD |  if_e	jmp	#LR__4071
275b0                 | LR__4070
275b0     14 4E 05 F1 | 	add	fp, #20
275b4     A7 FA 01 FB | 	rdlong	result1, fp
275b8     14 4E 85 F1 | 	sub	fp, #20
275bc     EC 05 90 FD | 	jmp	#LR__4090
275c0                 | LR__4071
275c0     04 4E 05 F1 | 	add	fp, #4
275c4     A7 18 02 FB | 	rdlong	arg04, fp
275c8     04 4E 85 F1 | 	sub	fp, #4
275cc     10 18 06 F1 | 	add	arg04, #16
275d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
275d4     01 18 CE F7 | 	test	arg04, #1 wz
275d8     07 FA 05 A6 |  if_e	mov	result1, #7
275dc     CC 05 90 AD |  if_e	jmp	#LR__4090
275e0     04 4E 05 F1 | 	add	fp, #4
275e4     A7 1E 02 FB | 	rdlong	local01, fp
275e8     0F 21 02 F6 | 	mov	local02, local01
275ec     0C 20 06 F1 | 	add	local02, #12
275f0     10 23 02 FB | 	rdlong	local03, local02
275f4     14 1E 06 F1 | 	add	local01, #20
275f8     0F 1F 02 FB | 	rdlong	local01, local01
275fc     0F 23 82 F1 | 	sub	local03, local01
27600     20 4E 05 F1 | 	add	fp, #32
27604     A7 22 62 FC | 	wrlong	local03, fp
27608     18 4E 85 F1 | 	sub	fp, #24
2760c     A7 24 02 FB | 	rdlong	local04, fp
27610     0C 4E 85 F1 | 	sub	fp, #12
27614     11 25 1A F2 | 	cmp	local04, local03 wcz
27618     24 4E 05 11 |  if_a	add	fp, #36
2761c     A7 24 02 1B |  if_a	rdlong	local04, fp
27620     18 4E 85 11 |  if_a	sub	fp, #24
27624     A7 24 62 1C |  if_a	wrlong	local04, fp
27628     0C 4E 85 11 |  if_a	sub	fp, #12
2762c                 | ' 
2762c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2762c                 | LR__4072
2762c     0C 4E 05 F1 | 	add	fp, #12
27630     A7 20 02 FB | 	rdlong	local02, fp
27634     0C 4E 85 F1 | 	sub	fp, #12
27638     10 25 02 F6 | 	mov	local04, local02
2763c     01 24 16 F2 | 	cmp	local04, #1 wc
27640     64 05 90 CD |  if_b	jmp	#LR__4089
27644     04 4E 05 F1 | 	add	fp, #4
27648     A7 22 02 FB | 	rdlong	local03, fp
2764c     04 4E 85 F1 | 	sub	fp, #4
27650     14 22 06 F1 | 	add	local03, #20
27654     11 23 02 FB | 	rdlong	local03, local03
27658     FF 23 CE F7 | 	test	local03, #511 wz
2765c     3C 04 90 5D |  if_ne	jmp	#LR__4087
27660     04 4E 05 F1 | 	add	fp, #4
27664     A7 1E 02 FB | 	rdlong	local01, fp
27668     14 1E 06 F1 | 	add	local01, #20
2766c     0F 23 02 FB | 	rdlong	local03, local01
27670     09 22 46 F0 | 	shr	local03, #9
27674     14 4E 05 F1 | 	add	fp, #20
27678     A7 26 02 FB | 	rdlong	local05, fp
2767c     13 29 02 F6 | 	mov	local06, local05
27680     0A 28 06 F1 | 	add	local06, #10
27684     14 2B E2 FA | 	rdword	local07, local06
27688     0A 28 86 F1 | 	sub	local06, #10
2768c     15 2D 32 F9 | 	getword	local08, local07, #0
27690     01 2C 86 F1 | 	sub	local08, #1
27694     16 23 0A F5 | 	and	local03, local08 wz
27698     18 4E 05 F1 | 	add	fp, #24
2769c     A7 22 62 FC | 	wrlong	local03, fp
276a0     30 4E 85 F1 | 	sub	fp, #48
276a4     E0 00 90 5D |  if_ne	jmp	#LR__4077
276a8     04 4E 05 F1 | 	add	fp, #4
276ac     A7 22 02 FB | 	rdlong	local03, fp
276b0     04 4E 85 F1 | 	sub	fp, #4
276b4     14 22 06 F1 | 	add	local03, #20
276b8     11 23 0A FB | 	rdlong	local03, local03 wz
276bc     20 00 90 5D |  if_ne	jmp	#LR__4073
276c0     04 4E 05 F1 | 	add	fp, #4
276c4     A7 22 02 FB | 	rdlong	local03, fp
276c8     08 22 06 F1 | 	add	local03, #8
276cc     11 23 02 FB | 	rdlong	local03, local03
276d0     18 4E 05 F1 | 	add	fp, #24
276d4     A7 22 62 FC | 	wrlong	local03, fp
276d8     1C 4E 85 F1 | 	sub	fp, #28
276dc     28 00 90 FD | 	jmp	#LR__4074
276e0                 | LR__4073
276e0     04 4E 05 F1 | 	add	fp, #4
276e4     A7 2C 02 FB | 	rdlong	local08, fp
276e8     16 13 02 F6 | 	mov	arg01, local08
276ec     04 4E 85 F1 | 	sub	fp, #4
276f0     18 2C 06 F1 | 	add	local08, #24
276f4     16 15 02 FB | 	rdlong	arg02, local08
276f8     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
276fc     1C 4E 05 F1 | 	add	fp, #28
27700     A7 FA 61 FC | 	wrlong	result1, fp
27704     1C 4E 85 F1 | 	sub	fp, #28
27708                 | LR__4074
27708     1C 4E 05 F1 | 	add	fp, #28
2770c     A7 22 02 FB | 	rdlong	local03, fp
27710     1C 4E 85 F1 | 	sub	fp, #28
27714     02 22 16 F2 | 	cmp	local03, #2 wc
27718     1C 00 90 3D |  if_ae	jmp	#LR__4075
2771c     04 4E 05 F1 | 	add	fp, #4
27720     A7 22 02 FB | 	rdlong	local03, fp
27724     04 4E 85 F1 | 	sub	fp, #4
27728     11 22 06 F1 | 	add	local03, #17
2772c     11 05 48 FC | 	wrbyte	#2, local03
27730     02 FA 05 F6 | 	mov	result1, #2
27734     74 04 90 FD | 	jmp	#LR__4090
27738                 | LR__4075
27738     1C 4E 05 F1 | 	add	fp, #28
2773c     A7 22 02 FB | 	rdlong	local03, fp
27740     1C 4E 85 F1 | 	sub	fp, #28
27744     FF FF 7F FF 
27748     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2774c     1C 00 90 5D |  if_ne	jmp	#LR__4076
27750     04 4E 05 F1 | 	add	fp, #4
27754     A7 22 02 FB | 	rdlong	local03, fp
27758     04 4E 85 F1 | 	sub	fp, #4
2775c     11 22 06 F1 | 	add	local03, #17
27760     11 03 48 FC | 	wrbyte	#1, local03
27764     01 FA 05 F6 | 	mov	result1, #1
27768     40 04 90 FD | 	jmp	#LR__4090
2776c                 | LR__4076
2776c     04 4E 05 F1 | 	add	fp, #4
27770     A7 22 02 FB | 	rdlong	local03, fp
27774     18 4E 05 F1 | 	add	fp, #24
27778     A7 2C 02 FB | 	rdlong	local08, fp
2777c     1C 4E 85 F1 | 	sub	fp, #28
27780     18 22 06 F1 | 	add	local03, #24
27784     11 2D 62 FC | 	wrlong	local08, local03
27788                 | LR__4077
27788     18 4E 05 F1 | 	add	fp, #24
2778c     A7 12 02 FB | 	rdlong	arg01, fp
27790     14 4E 85 F1 | 	sub	fp, #20
27794     A7 22 02 FB | 	rdlong	local03, fp
27798     04 4E 85 F1 | 	sub	fp, #4
2779c     18 22 06 F1 | 	add	local03, #24
277a0     11 15 02 FB | 	rdlong	arg02, local03
277a4     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
277a8     20 4E 05 F1 | 	add	fp, #32
277ac     A7 FA 61 FC | 	wrlong	result1, fp
277b0     20 4E 85 F1 | 	sub	fp, #32
277b4     00 FA 0D F2 | 	cmp	result1, #0 wz
277b8     1C 00 90 5D |  if_ne	jmp	#LR__4078
277bc     04 4E 05 F1 | 	add	fp, #4
277c0     A7 22 02 FB | 	rdlong	local03, fp
277c4     04 4E 85 F1 | 	sub	fp, #4
277c8     11 22 06 F1 | 	add	local03, #17
277cc     11 05 48 FC | 	wrbyte	#2, local03
277d0     02 FA 05 F6 | 	mov	result1, #2
277d4     D4 03 90 FD | 	jmp	#LR__4090
277d8                 | LR__4078
277d8     20 4E 05 F1 | 	add	fp, #32
277dc     A7 22 02 FB | 	rdlong	local03, fp
277e0     10 4E 05 F1 | 	add	fp, #16
277e4     A7 2C 02 FB | 	rdlong	local08, fp
277e8     16 23 02 F1 | 	add	local03, local08
277ec     10 4E 85 F1 | 	sub	fp, #16
277f0     A7 22 62 FC | 	wrlong	local03, fp
277f4     14 4E 85 F1 | 	sub	fp, #20
277f8     A7 22 02 FB | 	rdlong	local03, fp
277fc     09 22 46 F0 | 	shr	local03, #9
27800     20 4E 05 F1 | 	add	fp, #32
27804     A7 22 62 FC | 	wrlong	local03, fp
27808     2C 4E 85 F1 | 	sub	fp, #44
2780c     01 22 16 F2 | 	cmp	local03, #1 wc
27810     5C 01 90 CD |  if_b	jmp	#LR__4082
27814     30 4E 05 F1 | 	add	fp, #48
27818     A7 22 02 FB | 	rdlong	local03, fp
2781c     04 4E 85 F1 | 	sub	fp, #4
27820     A7 2C 02 FB | 	rdlong	local08, fp
27824     16 23 02 F1 | 	add	local03, local08
27828     14 4E 85 F1 | 	sub	fp, #20
2782c     A7 2C 02 FB | 	rdlong	local08, fp
27830     18 4E 85 F1 | 	sub	fp, #24
27834     0A 2C 06 F1 | 	add	local08, #10
27838     16 2D E2 FA | 	rdword	local08, local08
2783c     16 23 1A F2 | 	cmp	local03, local08 wcz
27840     28 00 90 ED |  if_be	jmp	#LR__4079
27844     18 4E 05 F1 | 	add	fp, #24
27848     A7 1E 02 FB | 	rdlong	local01, fp
2784c     0A 1E 06 F1 | 	add	local01, #10
27850     0F 23 E2 FA | 	rdword	local03, local01
27854     18 4E 05 F1 | 	add	fp, #24
27858     A7 2C 02 FB | 	rdlong	local08, fp
2785c     16 23 82 F1 | 	sub	local03, local08
27860     04 4E 85 F1 | 	sub	fp, #4
27864     A7 22 62 FC | 	wrlong	local03, fp
27868     2C 4E 85 F1 | 	sub	fp, #44
2786c                 | LR__4079
2786c     18 4E 05 F1 | 	add	fp, #24
27870     A7 1E 02 FB | 	rdlong	local01, fp
27874     01 1E 06 F1 | 	add	local01, #1
27878     0F 13 C2 FA | 	rdbyte	arg01, local01
2787c     1C 4E 05 F1 | 	add	fp, #28
27880     A7 14 02 FB | 	rdlong	arg02, fp
27884     14 4E 85 F1 | 	sub	fp, #20
27888     A7 16 02 FB | 	rdlong	arg03, fp
2788c     0C 4E 05 F1 | 	add	fp, #12
27890     A7 18 02 FB | 	rdlong	arg04, fp
27894     2C 4E 85 F1 | 	sub	fp, #44
27898     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2789c     00 FA 0D F2 | 	cmp	result1, #0 wz
278a0     1C 00 90 AD |  if_e	jmp	#LR__4080
278a4     04 4E 05 F1 | 	add	fp, #4
278a8     A7 22 02 FB | 	rdlong	local03, fp
278ac     04 4E 85 F1 | 	sub	fp, #4
278b0     11 22 06 F1 | 	add	local03, #17
278b4     11 03 48 FC | 	wrbyte	#1, local03
278b8     01 FA 05 F6 | 	mov	result1, #1
278bc     EC 02 90 FD | 	jmp	#LR__4090
278c0                 | LR__4080
278c0     04 4E 05 F1 | 	add	fp, #4
278c4     A7 1E 02 FB | 	rdlong	local01, fp
278c8     04 4E 85 F1 | 	sub	fp, #4
278cc     10 1E 06 F1 | 	add	local01, #16
278d0     0F 23 C2 FA | 	rdbyte	local03, local01
278d4     80 22 CE F7 | 	test	local03, #128 wz
278d8     78 00 90 AD |  if_e	jmp	#LR__4081
278dc     04 4E 05 F1 | 	add	fp, #4
278e0     A7 2C 02 FB | 	rdlong	local08, fp
278e4     1C 2C 06 F1 | 	add	local08, #28
278e8     16 2D 02 FB | 	rdlong	local08, local08
278ec     1C 4E 05 F1 | 	add	fp, #28
278f0     A7 2E 02 FB | 	rdlong	local09, fp
278f4     17 2D 82 F1 | 	sub	local08, local09
278f8     0C 4E 05 F1 | 	add	fp, #12
278fc     A7 30 02 FB | 	rdlong	local10, fp
27900     2C 4E 85 F1 | 	sub	fp, #44
27904     18 33 02 F6 | 	mov	local11, local10
27908     19 2D 12 F2 | 	cmp	local08, local11 wc
2790c     44 00 90 3D |  if_ae	jmp	#LR__4081
27910     34 4E 05 F1 | 	add	fp, #52
27914     A7 12 02 FB | 	rdlong	arg01, fp
27918     30 4E 85 F1 | 	sub	fp, #48
2791c     A7 14 02 FB | 	rdlong	arg02, fp
27920     0A 33 02 F6 | 	mov	local11, arg02
27924     1C 32 06 F1 | 	add	local11, #28
27928     19 2F 02 FB | 	rdlong	local09, local11
2792c     1C 4E 05 F1 | 	add	fp, #28
27930     A7 26 02 FB | 	rdlong	local05, fp
27934     13 2F 82 F1 | 	sub	local09, local05
27938     09 2E 66 F0 | 	shl	local09, #9
2793c     17 33 02 F6 | 	mov	local11, local09
27940     17 13 02 F1 | 	add	arg01, local09
27944     20 4E 85 F1 | 	sub	fp, #32
27948     28 14 06 F1 | 	add	arg02, #40
2794c     09 16 C6 F9 | 	decod	arg03, #9
27950     C4 48 BF FD | 	call	#__system____builtin_memmove
27954                 | LR__4081
27954     2C 4E 05 F1 | 	add	fp, #44
27958     A7 22 02 FB | 	rdlong	local03, fp
2795c     09 22 66 F0 | 	shl	local03, #9
27960     04 4E 85 F1 | 	sub	fp, #4
27964     A7 22 62 FC | 	wrlong	local03, fp
27968     28 4E 85 F1 | 	sub	fp, #40
2796c                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2796c                 | ' 				}
2796c                 | ' 
2796c                 | ' 
2796c                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2796c                 | ' 				continue;
2796c     B4 01 90 FD | 	jmp	#LR__4088
27970                 | LR__4082
27970     04 4E 05 F1 | 	add	fp, #4
27974     A7 22 02 FB | 	rdlong	local03, fp
27978     1C 22 06 F1 | 	add	local03, #28
2797c     11 23 02 FB | 	rdlong	local03, local03
27980     1C 4E 05 F1 | 	add	fp, #28
27984     A7 1E 02 FB | 	rdlong	local01, fp
27988     20 4E 85 F1 | 	sub	fp, #32
2798c     0F 23 0A F2 | 	cmp	local03, local01 wz
27990     EC 00 90 AD |  if_e	jmp	#LR__4086
27994     04 4E 05 F1 | 	add	fp, #4
27998     A7 1E 02 FB | 	rdlong	local01, fp
2799c     04 4E 85 F1 | 	sub	fp, #4
279a0     10 1E 06 F1 | 	add	local01, #16
279a4     0F 23 C2 FA | 	rdbyte	local03, local01
279a8     80 22 CE F7 | 	test	local03, #128 wz
279ac     7C 00 90 AD |  if_e	jmp	#LR__4084
279b0     18 4E 05 F1 | 	add	fp, #24
279b4     A7 1E 02 FB | 	rdlong	local01, fp
279b8     01 1E 06 F1 | 	add	local01, #1
279bc     0F 13 C2 FA | 	rdbyte	arg01, local01
279c0     14 4E 85 F1 | 	sub	fp, #20
279c4     A7 22 02 FB | 	rdlong	local03, fp
279c8     11 15 02 F6 | 	mov	arg02, local03
279cc     28 14 06 F1 | 	add	arg02, #40
279d0     04 4E 85 F1 | 	sub	fp, #4
279d4     1C 22 06 F1 | 	add	local03, #28
279d8     11 17 02 FB | 	rdlong	arg03, local03
279dc     01 18 06 F6 | 	mov	arg04, #1
279e0     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
279e4     00 FA 0D F2 | 	cmp	result1, #0 wz
279e8     1C 00 90 AD |  if_e	jmp	#LR__4083
279ec     04 4E 05 F1 | 	add	fp, #4
279f0     A7 22 02 FB | 	rdlong	local03, fp
279f4     04 4E 85 F1 | 	sub	fp, #4
279f8     11 22 06 F1 | 	add	local03, #17
279fc     11 03 48 FC | 	wrbyte	#1, local03
27a00     01 FA 05 F6 | 	mov	result1, #1
27a04     A4 01 90 FD | 	jmp	#LR__4090
27a08                 | LR__4083
27a08     04 4E 05 F1 | 	add	fp, #4
27a0c     A7 32 02 FB | 	rdlong	local11, fp
27a10     19 23 02 F6 | 	mov	local03, local11
27a14     04 4E 85 F1 | 	sub	fp, #4
27a18     10 32 06 F1 | 	add	local11, #16
27a1c     19 33 C2 FA | 	rdbyte	local11, local11
27a20     7F 32 06 F5 | 	and	local11, #127
27a24     10 22 06 F1 | 	add	local03, #16
27a28     11 33 42 FC | 	wrbyte	local11, local03
27a2c                 | LR__4084
27a2c     18 4E 05 F1 | 	add	fp, #24
27a30     A7 1E 02 FB | 	rdlong	local01, fp
27a34     01 1E 06 F1 | 	add	local01, #1
27a38     0F 13 C2 FA | 	rdbyte	arg01, local01
27a3c     14 4E 85 F1 | 	sub	fp, #20
27a40     A7 14 02 FB | 	rdlong	arg02, fp
27a44     28 14 06 F1 | 	add	arg02, #40
27a48     1C 4E 05 F1 | 	add	fp, #28
27a4c     A7 16 02 FB | 	rdlong	arg03, fp
27a50     20 4E 85 F1 | 	sub	fp, #32
27a54     01 18 06 F6 | 	mov	arg04, #1
27a58     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
27a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
27a60     1C 00 90 AD |  if_e	jmp	#LR__4085
27a64     04 4E 05 F1 | 	add	fp, #4
27a68     A7 22 02 FB | 	rdlong	local03, fp
27a6c     04 4E 85 F1 | 	sub	fp, #4
27a70     11 22 06 F1 | 	add	local03, #17
27a74     11 03 48 FC | 	wrbyte	#1, local03
27a78     01 FA 05 F6 | 	mov	result1, #1
27a7c     2C 01 90 FD | 	jmp	#LR__4090
27a80                 | LR__4085
27a80                 | LR__4086
27a80     04 4E 05 F1 | 	add	fp, #4
27a84     A7 22 02 FB | 	rdlong	local03, fp
27a88     1C 4E 05 F1 | 	add	fp, #28
27a8c     A7 32 02 FB | 	rdlong	local11, fp
27a90     20 4E 85 F1 | 	sub	fp, #32
27a94     1C 22 06 F1 | 	add	local03, #28
27a98     11 33 62 FC | 	wrlong	local11, local03
27a9c                 | LR__4087
27a9c     04 4E 05 F1 | 	add	fp, #4
27aa0     A7 1E 02 FB | 	rdlong	local01, fp
27aa4     14 1E 06 F1 | 	add	local01, #20
27aa8     0F 33 02 FB | 	rdlong	local11, local01
27aac     FF 33 06 F5 | 	and	local11, #511
27ab0     09 22 C6 F9 | 	decod	local03, #9
27ab4     19 23 82 F1 | 	sub	local03, local11
27ab8     24 4E 05 F1 | 	add	fp, #36
27abc     A7 22 62 FC | 	wrlong	local03, fp
27ac0     1C 4E 85 F1 | 	sub	fp, #28
27ac4     A7 32 02 FB | 	rdlong	local11, fp
27ac8     0C 4E 85 F1 | 	sub	fp, #12
27acc     19 23 1A F2 | 	cmp	local03, local11 wcz
27ad0     0C 4E 05 11 |  if_a	add	fp, #12
27ad4     A7 22 02 1B |  if_a	rdlong	local03, fp
27ad8     1C 4E 05 11 |  if_a	add	fp, #28
27adc     A7 22 62 1C |  if_a	wrlong	local03, fp
27ae0     28 4E 85 11 |  if_a	sub	fp, #40
27ae4     34 4E 05 F1 | 	add	fp, #52
27ae8     A7 12 02 FB | 	rdlong	arg01, fp
27aec     30 4E 85 F1 | 	sub	fp, #48
27af0     A7 28 02 FB | 	rdlong	local06, fp
27af4     14 15 02 F6 | 	mov	arg02, local06
27af8     28 14 06 F1 | 	add	arg02, #40
27afc     14 28 06 F1 | 	add	local06, #20
27b00     14 33 02 FB | 	rdlong	local11, local06
27b04     19 2F 02 F6 | 	mov	local09, local11
27b08     17 31 02 F6 | 	mov	local10, local09
27b0c     FF 31 06 F5 | 	and	local10, #511
27b10     18 15 02 F1 | 	add	arg02, local10
27b14     24 4E 05 F1 | 	add	fp, #36
27b18     A7 16 02 FB | 	rdlong	arg03, fp
27b1c     28 4E 85 F1 | 	sub	fp, #40
27b20     F4 46 BF FD | 	call	#__system____builtin_memmove
27b24                 | LR__4088
27b24     0C 4E 05 F1 | 	add	fp, #12
27b28     A7 22 02 FB | 	rdlong	local03, fp
27b2c     1C 4E 05 F1 | 	add	fp, #28
27b30     A7 2C 02 FB | 	rdlong	local08, fp
27b34     16 23 82 F1 | 	sub	local03, local08
27b38     1C 4E 85 F1 | 	sub	fp, #28
27b3c     A7 22 62 FC | 	wrlong	local03, fp
27b40     04 4E 05 F1 | 	add	fp, #4
27b44     A7 1E 02 FB | 	rdlong	local01, fp
27b48     0F 2B 02 FB | 	rdlong	local07, local01
27b4c     18 4E 05 F1 | 	add	fp, #24
27b50     A7 2C 02 FB | 	rdlong	local08, fp
27b54     16 2B 02 F1 | 	add	local07, local08
27b58     0F 2B 62 FC | 	wrlong	local07, local01
27b5c     0C 4E 05 F1 | 	add	fp, #12
27b60     A7 22 02 FB | 	rdlong	local03, fp
27b64     0C 4E 85 F1 | 	sub	fp, #12
27b68     A7 34 02 FB | 	rdlong	local12, fp
27b6c     1A 23 02 F1 | 	add	local03, local12
27b70     0C 4E 05 F1 | 	add	fp, #12
27b74     A7 22 62 FC | 	wrlong	local03, fp
27b78     30 4E 85 F1 | 	sub	fp, #48
27b7c     A7 36 02 FB | 	rdlong	local13, fp
27b80     1B 23 02 F6 | 	mov	local03, local13
27b84     14 36 06 F1 | 	add	local13, #20
27b88     1B 39 02 FB | 	rdlong	local14, local13
27b8c     24 4E 05 F1 | 	add	fp, #36
27b90     A7 28 02 FB | 	rdlong	local06, fp
27b94     28 4E 85 F1 | 	sub	fp, #40
27b98     14 39 02 F1 | 	add	local14, local06
27b9c     14 22 06 F1 | 	add	local03, #20
27ba0     11 39 62 FC | 	wrlong	local14, local03
27ba4     84 FA 9F FD | 	jmp	#LR__4072
27ba8                 | LR__4089
27ba8                 | ' 
27ba8                 | ' 
27ba8                 | ' 
27ba8                 | ' 
27ba8                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
27ba8                 | ' 
27ba8                 | ' 	}
27ba8                 | ' 
27ba8                 | ' 	return FR_OK ;
27ba8     00 FA 05 F6 | 	mov	result1, #0
27bac                 | LR__4090
27bac     A7 F0 03 F6 | 	mov	ptra, fp
27bb0     B2 00 A0 FD | 	call	#popregs_
27bb4                 | _fatfs_cc_f_read_ret
27bb4     2D 00 64 FD | 	ret
27bb8                 | 
27bb8                 | _fatfs_cc_f_write
27bb8     15 4A 05 F6 | 	mov	COUNT_, #21
27bbc     A8 00 A0 FD | 	call	#pushregs_
27bc0     34 F0 07 F1 | 	add	ptra, #52
27bc4     04 4E 05 F1 | 	add	fp, #4
27bc8     A7 12 62 FC | 	wrlong	arg01, fp
27bcc     04 4E 05 F1 | 	add	fp, #4
27bd0     A7 14 62 FC | 	wrlong	arg02, fp
27bd4     04 4E 05 F1 | 	add	fp, #4
27bd8     A7 16 62 FC | 	wrlong	arg03, fp
27bdc     04 4E 05 F1 | 	add	fp, #4
27be0     A7 18 62 FC | 	wrlong	arg04, fp
27be4     08 4E 85 F1 | 	sub	fp, #8
27be8     A7 FA 01 FB | 	rdlong	result1, fp
27bec     28 4E 05 F1 | 	add	fp, #40
27bf0     A7 FA 61 FC | 	wrlong	result1, fp
27bf4     20 4E 85 F1 | 	sub	fp, #32
27bf8     A7 FA 01 FB | 	rdlong	result1, fp
27bfc     FD 00 68 FC | 	wrlong	#0, result1
27c00     0C 4E 85 F1 | 	sub	fp, #12
27c04     A7 12 02 FB | 	rdlong	arg01, fp
27c08     14 4E 05 F1 | 	add	fp, #20
27c0c     A7 14 02 F6 | 	mov	arg02, fp
27c10     18 4E 85 F1 | 	sub	fp, #24
27c14     88 F0 BF FD | 	call	#_fatfs_cc_validate
27c18     14 4E 05 F1 | 	add	fp, #20
27c1c     A7 FA 61 FC | 	wrlong	result1, fp
27c20     00 FA 4D F2 | 	cmps	result1, #0 wz
27c24     14 4E 85 F1 | 	sub	fp, #20
27c28     20 00 90 5D |  if_ne	jmp	#LR__4100
27c2c     04 4E 05 F1 | 	add	fp, #4
27c30     A7 14 02 FB | 	rdlong	arg02, fp
27c34     11 14 06 F1 | 	add	arg02, #17
27c38     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
27c3c     10 4E 05 F1 | 	add	fp, #16
27c40     A7 14 62 FC | 	wrlong	arg02, fp
27c44     14 4E 85 F1 | 	sub	fp, #20
27c48     10 00 90 AD |  if_e	jmp	#LR__4101
27c4c                 | LR__4100
27c4c     14 4E 05 F1 | 	add	fp, #20
27c50     A7 FA 01 FB | 	rdlong	result1, fp
27c54     14 4E 85 F1 | 	sub	fp, #20
27c58     44 07 90 FD | 	jmp	#LR__4123
27c5c                 | LR__4101
27c5c     04 4E 05 F1 | 	add	fp, #4
27c60     A7 14 02 FB | 	rdlong	arg02, fp
27c64     04 4E 85 F1 | 	sub	fp, #4
27c68     10 14 06 F1 | 	add	arg02, #16
27c6c     0A 15 C2 FA | 	rdbyte	arg02, arg02
27c70     02 14 CE F7 | 	test	arg02, #2 wz
27c74     07 FA 05 A6 |  if_e	mov	result1, #7
27c78     24 07 90 AD |  if_e	jmp	#LR__4123
27c7c     04 4E 05 F1 | 	add	fp, #4
27c80     A7 14 02 FB | 	rdlong	arg02, fp
27c84     0A 13 02 F6 | 	mov	arg01, arg02
27c88     14 12 06 F1 | 	add	arg01, #20
27c8c     09 13 02 FB | 	rdlong	arg01, arg01
27c90     08 4E 05 F1 | 	add	fp, #8
27c94     A7 FA 01 FB | 	rdlong	result1, fp
27c98     FD 12 02 F1 | 	add	arg01, result1
27c9c     0C 4E 85 F1 | 	sub	fp, #12
27ca0     14 14 06 F1 | 	add	arg02, #20
27ca4     0A FB 01 FB | 	rdlong	result1, arg02
27ca8     FD 12 12 F2 | 	cmp	arg01, result1 wc
27cac     24 00 90 3D |  if_ae	jmp	#LR__4102
27cb0     04 4E 05 F1 | 	add	fp, #4
27cb4     A7 14 02 FB | 	rdlong	arg02, fp
27cb8     01 FA 65 F6 | 	neg	result1, #1
27cbc     14 14 06 F1 | 	add	arg02, #20
27cc0     0A 15 02 FB | 	rdlong	arg02, arg02
27cc4     0A FB 81 F1 | 	sub	result1, arg02
27cc8     08 4E 05 F1 | 	add	fp, #8
27ccc     A7 FA 61 FC | 	wrlong	result1, fp
27cd0     0C 4E 85 F1 | 	sub	fp, #12
27cd4                 | LR__4102
27cd4                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
27cd4                 | ' 	}
27cd4                 | ' 
27cd4                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
27cd4                 | LR__4103
27cd4     0C 4E 05 F1 | 	add	fp, #12
27cd8     A7 FA 01 FB | 	rdlong	result1, fp
27cdc     0C 4E 85 F1 | 	sub	fp, #12
27ce0     01 FA 15 F2 | 	cmp	result1, #1 wc
27ce4     90 06 90 CD |  if_b	jmp	#LR__4122
27ce8     04 4E 05 F1 | 	add	fp, #4
27cec     A7 FA 01 FB | 	rdlong	result1, fp
27cf0     04 4E 85 F1 | 	sub	fp, #4
27cf4     14 FA 05 F1 | 	add	result1, #20
27cf8     FD FA 01 FB | 	rdlong	result1, result1
27cfc     FF FB CD F7 | 	test	result1, #511 wz
27d00     D8 04 90 5D |  if_ne	jmp	#LR__4118
27d04     04 4E 05 F1 | 	add	fp, #4
27d08     A7 FA 01 FB | 	rdlong	result1, fp
27d0c     14 FA 05 F1 | 	add	result1, #20
27d10     FD FA 01 FB | 	rdlong	result1, result1
27d14     09 FA 45 F0 | 	shr	result1, #9
27d18     14 4E 05 F1 | 	add	fp, #20
27d1c     A7 14 02 FB | 	rdlong	arg02, fp
27d20     0A 14 06 F1 | 	add	arg02, #10
27d24     0A 19 E2 FA | 	rdword	arg04, arg02
27d28     0C 15 32 F9 | 	getword	arg02, arg04, #0
27d2c     01 14 86 F1 | 	sub	arg02, #1
27d30     0A FB 09 F5 | 	and	result1, arg02 wz
27d34     14 4E 05 F1 | 	add	fp, #20
27d38     A7 FA 61 FC | 	wrlong	result1, fp
27d3c     2C 4E 85 F1 | 	sub	fp, #44
27d40     44 01 90 5D |  if_ne	jmp	#LR__4109
27d44     04 4E 05 F1 | 	add	fp, #4
27d48     A7 FA 01 FB | 	rdlong	result1, fp
27d4c     04 4E 85 F1 | 	sub	fp, #4
27d50     14 FA 05 F1 | 	add	result1, #20
27d54     FD 14 0A FB | 	rdlong	arg02, result1 wz
27d58     44 00 90 5D |  if_ne	jmp	#LR__4104
27d5c     04 4E 05 F1 | 	add	fp, #4
27d60     A7 14 02 FB | 	rdlong	arg02, fp
27d64     08 14 06 F1 | 	add	arg02, #8
27d68     0A 15 0A FB | 	rdlong	arg02, arg02 wz
27d6c     18 4E 05 F1 | 	add	fp, #24
27d70     A7 14 62 FC | 	wrlong	arg02, fp
27d74     1C 4E 85 F1 | 	sub	fp, #28
27d78     4C 00 90 5D |  if_ne	jmp	#LR__4105
27d7c     04 4E 05 F1 | 	add	fp, #4
27d80     A7 12 02 FB | 	rdlong	arg01, fp
27d84     04 4E 85 F1 | 	sub	fp, #4
27d88     00 14 06 F6 | 	mov	arg02, #0
27d8c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
27d90     1C 4E 05 F1 | 	add	fp, #28
27d94     A7 FA 61 FC | 	wrlong	result1, fp
27d98     1C 4E 85 F1 | 	sub	fp, #28
27d9c     28 00 90 FD | 	jmp	#LR__4105
27da0                 | LR__4104
27da0     04 4E 05 F1 | 	add	fp, #4
27da4     A7 18 02 FB | 	rdlong	arg04, fp
27da8     0C 13 02 F6 | 	mov	arg01, arg04
27dac     04 4E 85 F1 | 	sub	fp, #4
27db0     18 18 06 F1 | 	add	arg04, #24
27db4     0C 15 02 FB | 	rdlong	arg02, arg04
27db8     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
27dbc     1C 4E 05 F1 | 	add	fp, #28
27dc0     A7 FA 61 FC | 	wrlong	result1, fp
27dc4     1C 4E 85 F1 | 	sub	fp, #28
27dc8                 | LR__4105
27dc8     1C 4E 05 F1 | 	add	fp, #28
27dcc     A7 FA 09 FB | 	rdlong	result1, fp wz
27dd0     1C 4E 85 F1 | 	sub	fp, #28
27dd4     A0 05 90 AD |  if_e	jmp	#LR__4122
27dd8     1C 4E 05 F1 | 	add	fp, #28
27ddc     A7 FA 01 FB | 	rdlong	result1, fp
27de0     1C 4E 85 F1 | 	sub	fp, #28
27de4     01 FA 0D F2 | 	cmp	result1, #1 wz
27de8     1C 00 90 5D |  if_ne	jmp	#LR__4106
27dec     04 4E 05 F1 | 	add	fp, #4
27df0     A7 FA 01 FB | 	rdlong	result1, fp
27df4     04 4E 85 F1 | 	sub	fp, #4
27df8     11 FA 05 F1 | 	add	result1, #17
27dfc     FD 04 48 FC | 	wrbyte	#2, result1
27e00     02 FA 05 F6 | 	mov	result1, #2
27e04     98 05 90 FD | 	jmp	#LR__4123
27e08                 | LR__4106
27e08     1C 4E 05 F1 | 	add	fp, #28
27e0c     A7 FA 01 FB | 	rdlong	result1, fp
27e10     1C 4E 85 F1 | 	sub	fp, #28
27e14     FF FF 7F FF 
27e18     FF FB 0D F2 | 	cmp	result1, ##-1 wz
27e1c     1C 00 90 5D |  if_ne	jmp	#LR__4107
27e20     04 4E 05 F1 | 	add	fp, #4
27e24     A7 FA 01 FB | 	rdlong	result1, fp
27e28     04 4E 85 F1 | 	sub	fp, #4
27e2c     11 FA 05 F1 | 	add	result1, #17
27e30     FD 02 48 FC | 	wrbyte	#1, result1
27e34     01 FA 05 F6 | 	mov	result1, #1
27e38     64 05 90 FD | 	jmp	#LR__4123
27e3c                 | LR__4107
27e3c     04 4E 05 F1 | 	add	fp, #4
27e40     A7 FA 01 FB | 	rdlong	result1, fp
27e44     18 4E 05 F1 | 	add	fp, #24
27e48     A7 18 02 FB | 	rdlong	arg04, fp
27e4c     18 FA 05 F1 | 	add	result1, #24
27e50     FD 18 62 FC | 	wrlong	arg04, result1
27e54     18 4E 85 F1 | 	sub	fp, #24
27e58     A7 FA 01 FB | 	rdlong	result1, fp
27e5c     04 4E 85 F1 | 	sub	fp, #4
27e60     08 FA 05 F1 | 	add	result1, #8
27e64     FD FA 09 FB | 	rdlong	result1, result1 wz
27e68     1C 00 90 5D |  if_ne	jmp	#LR__4108
27e6c     04 4E 05 F1 | 	add	fp, #4
27e70     A7 18 02 FB | 	rdlong	arg04, fp
27e74     18 4E 05 F1 | 	add	fp, #24
27e78     A7 FA 01 FB | 	rdlong	result1, fp
27e7c     1C 4E 85 F1 | 	sub	fp, #28
27e80     08 18 06 F1 | 	add	arg04, #8
27e84     0C FB 61 FC | 	wrlong	result1, arg04
27e88                 | LR__4108
27e88                 | LR__4109
27e88     04 4E 05 F1 | 	add	fp, #4
27e8c     A7 18 02 FB | 	rdlong	arg04, fp
27e90     04 4E 85 F1 | 	sub	fp, #4
27e94     10 18 06 F1 | 	add	arg04, #16
27e98     0C 19 C2 FA | 	rdbyte	arg04, arg04
27e9c     80 18 CE F7 | 	test	arg04, #128 wz
27ea0     7C 00 90 AD |  if_e	jmp	#LR__4111
27ea4     18 4E 05 F1 | 	add	fp, #24
27ea8     A7 18 02 FB | 	rdlong	arg04, fp
27eac     01 18 06 F1 | 	add	arg04, #1
27eb0     0C 13 C2 FA | 	rdbyte	arg01, arg04
27eb4     14 4E 85 F1 | 	sub	fp, #20
27eb8     A7 18 02 FB | 	rdlong	arg04, fp
27ebc     0C 15 02 F6 | 	mov	arg02, arg04
27ec0     28 14 06 F1 | 	add	arg02, #40
27ec4     04 4E 85 F1 | 	sub	fp, #4
27ec8     1C 18 06 F1 | 	add	arg04, #28
27ecc     0C 17 02 FB | 	rdlong	arg03, arg04
27ed0     01 18 06 F6 | 	mov	arg04, #1
27ed4     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
27ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
27edc     1C 00 90 AD |  if_e	jmp	#LR__4110
27ee0     04 4E 05 F1 | 	add	fp, #4
27ee4     A7 FA 01 FB | 	rdlong	result1, fp
27ee8     04 4E 85 F1 | 	sub	fp, #4
27eec     11 FA 05 F1 | 	add	result1, #17
27ef0     FD 02 48 FC | 	wrbyte	#1, result1
27ef4     01 FA 05 F6 | 	mov	result1, #1
27ef8     A4 04 90 FD | 	jmp	#LR__4123
27efc                 | LR__4110
27efc     04 4E 05 F1 | 	add	fp, #4
27f00     A7 18 02 FB | 	rdlong	arg04, fp
27f04     0C FB 01 F6 | 	mov	result1, arg04
27f08     04 4E 85 F1 | 	sub	fp, #4
27f0c     10 18 06 F1 | 	add	arg04, #16
27f10     0C 19 C2 FA | 	rdbyte	arg04, arg04
27f14     7F 18 06 F5 | 	and	arg04, #127
27f18     10 FA 05 F1 | 	add	result1, #16
27f1c     FD 18 42 FC | 	wrbyte	arg04, result1
27f20                 | LR__4111
27f20     18 4E 05 F1 | 	add	fp, #24
27f24     A7 12 02 FB | 	rdlong	arg01, fp
27f28     14 4E 85 F1 | 	sub	fp, #20
27f2c     A7 14 02 FB | 	rdlong	arg02, fp
27f30     04 4E 85 F1 | 	sub	fp, #4
27f34     18 14 06 F1 | 	add	arg02, #24
27f38     0A 15 02 FB | 	rdlong	arg02, arg02
27f3c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
27f40     20 4E 05 F1 | 	add	fp, #32
27f44     A7 FA 61 FC | 	wrlong	result1, fp
27f48     20 4E 85 F1 | 	sub	fp, #32
27f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
27f50     1C 00 90 5D |  if_ne	jmp	#LR__4112
27f54     04 4E 05 F1 | 	add	fp, #4
27f58     A7 FA 01 FB | 	rdlong	result1, fp
27f5c     04 4E 85 F1 | 	sub	fp, #4
27f60     11 FA 05 F1 | 	add	result1, #17
27f64     FD 04 48 FC | 	wrbyte	#2, result1
27f68     02 FA 05 F6 | 	mov	result1, #2
27f6c     30 04 90 FD | 	jmp	#LR__4123
27f70                 | LR__4112
27f70     20 4E 05 F1 | 	add	fp, #32
27f74     A7 FA 01 FB | 	rdlong	result1, fp
27f78     0C 4E 05 F1 | 	add	fp, #12
27f7c     A7 1E 02 FB | 	rdlong	local01, fp
27f80     0F FB 01 F1 | 	add	result1, local01
27f84     0C 4E 85 F1 | 	sub	fp, #12
27f88     A7 FA 61 FC | 	wrlong	result1, fp
27f8c     14 4E 85 F1 | 	sub	fp, #20
27f90     A7 FA 01 FB | 	rdlong	result1, fp
27f94     09 FA 45 F0 | 	shr	result1, #9
27f98     1C 4E 05 F1 | 	add	fp, #28
27f9c     A7 FA 61 FC | 	wrlong	result1, fp
27fa0     28 4E 85 F1 | 	sub	fp, #40
27fa4     01 FA 15 F2 | 	cmp	result1, #1 wc
27fa8     60 01 90 CD |  if_b	jmp	#LR__4116
27fac     2C 4E 05 F1 | 	add	fp, #44
27fb0     A7 FA 01 FB | 	rdlong	result1, fp
27fb4     04 4E 85 F1 | 	sub	fp, #4
27fb8     A7 18 02 FB | 	rdlong	arg04, fp
27fbc     0C FB 01 F1 | 	add	result1, arg04
27fc0     10 4E 85 F1 | 	sub	fp, #16
27fc4     A7 18 02 FB | 	rdlong	arg04, fp
27fc8     18 4E 85 F1 | 	sub	fp, #24
27fcc     0A 18 06 F1 | 	add	arg04, #10
27fd0     0C 19 E2 FA | 	rdword	arg04, arg04
27fd4     0C FB 19 F2 | 	cmp	result1, arg04 wcz
27fd8     28 00 90 ED |  if_be	jmp	#LR__4113
27fdc     18 4E 05 F1 | 	add	fp, #24
27fe0     A7 FA 01 FB | 	rdlong	result1, fp
27fe4     0A FA 05 F1 | 	add	result1, #10
27fe8     FD FA E1 FA | 	rdword	result1, result1
27fec     14 4E 05 F1 | 	add	fp, #20
27ff0     A7 18 02 FB | 	rdlong	arg04, fp
27ff4     0C FB 81 F1 | 	sub	result1, arg04
27ff8     04 4E 85 F1 | 	sub	fp, #4
27ffc     A7 FA 61 FC | 	wrlong	result1, fp
28000     28 4E 85 F1 | 	sub	fp, #40
28004                 | LR__4113
28004     18 4E 05 F1 | 	add	fp, #24
28008     A7 18 02 FB | 	rdlong	arg04, fp
2800c     01 18 06 F1 | 	add	arg04, #1
28010     0C 13 C2 FA | 	rdbyte	arg01, arg04
28014     18 4E 05 F1 | 	add	fp, #24
28018     A7 14 02 FB | 	rdlong	arg02, fp
2801c     10 4E 85 F1 | 	sub	fp, #16
28020     A7 16 02 FB | 	rdlong	arg03, fp
28024     08 4E 05 F1 | 	add	fp, #8
28028     A7 18 02 FB | 	rdlong	arg04, fp
2802c     28 4E 85 F1 | 	sub	fp, #40
28030     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
28034     00 FA 0D F2 | 	cmp	result1, #0 wz
28038     1C 00 90 AD |  if_e	jmp	#LR__4114
2803c     04 4E 05 F1 | 	add	fp, #4
28040     A7 1E 02 FB | 	rdlong	local01, fp
28044     04 4E 85 F1 | 	sub	fp, #4
28048     11 1E 06 F1 | 	add	local01, #17
2804c     0F 03 48 FC | 	wrbyte	#1, local01
28050     01 FA 05 F6 | 	mov	result1, #1
28054     48 03 90 FD | 	jmp	#LR__4123
28058                 | LR__4114
28058     04 4E 05 F1 | 	add	fp, #4
2805c     A7 FA 01 FB | 	rdlong	result1, fp
28060     1C FA 05 F1 | 	add	result1, #28
28064     FD FA 01 FB | 	rdlong	result1, result1
28068     1C 4E 05 F1 | 	add	fp, #28
2806c     A7 20 02 FB | 	rdlong	local02, fp
28070     10 FB 81 F1 | 	sub	result1, local02
28074     08 4E 05 F1 | 	add	fp, #8
28078     A7 18 02 FB | 	rdlong	arg04, fp
2807c     28 4E 85 F1 | 	sub	fp, #40
28080     0C FB 11 F2 | 	cmp	result1, arg04 wc
28084     68 00 90 3D |  if_ae	jmp	#LR__4115
28088     04 4E 05 F1 | 	add	fp, #4
2808c     A7 12 02 FB | 	rdlong	arg01, fp
28090     28 12 06 F1 | 	add	arg01, #40
28094     2C 4E 05 F1 | 	add	fp, #44
28098     A7 14 02 FB | 	rdlong	arg02, fp
2809c     2C 4E 85 F1 | 	sub	fp, #44
280a0     A7 FA 01 FB | 	rdlong	result1, fp
280a4     1C FA 05 F1 | 	add	result1, #28
280a8     FD 22 02 FB | 	rdlong	local03, result1
280ac     1C 4E 05 F1 | 	add	fp, #28
280b0     A7 18 02 FB | 	rdlong	arg04, fp
280b4     20 4E 85 F1 | 	sub	fp, #32
280b8     0C 23 82 F1 | 	sub	local03, arg04
280bc     09 22 66 F0 | 	shl	local03, #9
280c0     11 15 02 F1 | 	add	arg02, local03
280c4     09 16 C6 F9 | 	decod	arg03, #9
280c8     4C 41 BF FD | 	call	#__system____builtin_memmove
280cc     04 4E 05 F1 | 	add	fp, #4
280d0     A7 18 02 FB | 	rdlong	arg04, fp
280d4     0C FB 01 F6 | 	mov	result1, arg04
280d8     04 4E 85 F1 | 	sub	fp, #4
280dc     10 18 06 F1 | 	add	arg04, #16
280e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
280e4     7F 18 06 F5 | 	and	arg04, #127
280e8     10 FA 05 F1 | 	add	result1, #16
280ec     FD 18 42 FC | 	wrbyte	arg04, result1
280f0                 | LR__4115
280f0     28 4E 05 F1 | 	add	fp, #40
280f4     A7 FA 01 FB | 	rdlong	result1, fp
280f8     09 FA 65 F0 | 	shl	result1, #9
280fc     04 4E 85 F1 | 	sub	fp, #4
28100     A7 FA 61 FC | 	wrlong	result1, fp
28104     24 4E 85 F1 | 	sub	fp, #36
28108                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
28108                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
28108                 | ' 				}
28108                 | ' 
28108                 | ' 
28108                 | ' 				wcnt =  ((UINT) 512 )  * cc;
28108                 | ' 				continue;
28108     74 01 90 FD | 	jmp	#LR__4119
2810c                 | LR__4116
2810c     04 4E 05 F1 | 	add	fp, #4
28110     A7 20 02 FB | 	rdlong	local02, fp
28114     1C 20 06 F1 | 	add	local02, #28
28118     10 FB 01 FB | 	rdlong	result1, local02
2811c     1C 4E 05 F1 | 	add	fp, #28
28120     A7 20 02 FB | 	rdlong	local02, fp
28124     20 4E 85 F1 | 	sub	fp, #32
28128     10 FB 09 F2 | 	cmp	result1, local02 wz
2812c     90 00 90 AD |  if_e	jmp	#LR__4117
28130     04 4E 05 F1 | 	add	fp, #4
28134     A7 FA 01 FB | 	rdlong	result1, fp
28138     FD 22 02 F6 | 	mov	local03, result1
2813c     04 4E 85 F1 | 	sub	fp, #4
28140     14 22 06 F1 | 	add	local03, #20
28144     11 23 02 FB | 	rdlong	local03, local03
28148     0C FA 05 F1 | 	add	result1, #12
2814c     FD 24 02 FB | 	rdlong	local04, result1
28150     12 27 02 F6 | 	mov	local05, local04
28154     13 23 12 F2 | 	cmp	local03, local05 wc
28158     64 00 90 3D |  if_ae	jmp	#LR__4117
2815c     18 4E 05 F1 | 	add	fp, #24
28160     A7 18 02 FB | 	rdlong	arg04, fp
28164     01 18 06 F1 | 	add	arg04, #1
28168     0C 13 C2 FA | 	rdbyte	arg01, arg04
2816c     14 4E 85 F1 | 	sub	fp, #20
28170     A7 28 02 FB | 	rdlong	local06, fp
28174     28 28 06 F1 | 	add	local06, #40
28178     14 2B 02 F6 | 	mov	local07, local06
2817c     1C 4E 05 F1 | 	add	fp, #28
28180     A7 2C 02 FB | 	rdlong	local08, fp
28184     20 4E 85 F1 | 	sub	fp, #32
28188     01 2E 06 F6 | 	mov	local09, #1
2818c     15 15 02 F6 | 	mov	arg02, local07
28190     16 17 02 F6 | 	mov	arg03, local08
28194     01 18 06 F6 | 	mov	arg04, #1
28198     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2819c     FD 30 0A F6 | 	mov	local10, result1 wz
281a0     1C 00 90 AD |  if_e	jmp	#LR__4117
281a4     04 4E 05 F1 | 	add	fp, #4
281a8     A7 30 02 FB | 	rdlong	local10, fp
281ac     04 4E 85 F1 | 	sub	fp, #4
281b0     11 30 06 F1 | 	add	local10, #17
281b4     18 03 48 FC | 	wrbyte	#1, local10
281b8                 | ' 				fp->fptr < fp->obj.objsize &&
281b8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
281b8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
281b8     01 FA 05 F6 | 	mov	result1, #1
281bc     E0 01 90 FD | 	jmp	#LR__4123
281c0                 | LR__4117
281c0     04 4E 05 F1 | 	add	fp, #4
281c4     A7 18 02 FB | 	rdlong	arg04, fp
281c8     1C 4E 05 F1 | 	add	fp, #28
281cc     A7 FA 01 FB | 	rdlong	result1, fp
281d0     20 4E 85 F1 | 	sub	fp, #32
281d4     1C 18 06 F1 | 	add	arg04, #28
281d8     0C FB 61 FC | 	wrlong	result1, arg04
281dc                 | LR__4118
281dc     04 4E 05 F1 | 	add	fp, #4
281e0     A7 FA 01 FB | 	rdlong	result1, fp
281e4     14 FA 05 F1 | 	add	result1, #20
281e8     FD FA 01 FB | 	rdlong	result1, result1
281ec     FF FB 05 F5 | 	and	result1, #511
281f0     09 32 C6 F9 | 	decod	local11, #9
281f4     FD 32 82 F1 | 	sub	local11, result1
281f8     20 4E 05 F1 | 	add	fp, #32
281fc     A7 32 62 FC | 	wrlong	local11, fp
28200     18 4E 85 F1 | 	sub	fp, #24
28204     A7 FA 01 FB | 	rdlong	result1, fp
28208     0C 4E 85 F1 | 	sub	fp, #12
2820c     FD 32 1A F2 | 	cmp	local11, result1 wcz
28210     0C 4E 05 11 |  if_a	add	fp, #12
28214     A7 32 02 1B |  if_a	rdlong	local11, fp
28218     18 4E 05 11 |  if_a	add	fp, #24
2821c     A7 32 62 1C |  if_a	wrlong	local11, fp
28220     24 4E 85 11 |  if_a	sub	fp, #36
28224     04 4E 05 F1 | 	add	fp, #4
28228     A7 32 02 FB | 	rdlong	local11, fp
2822c     19 13 02 F6 | 	mov	arg01, local11
28230     28 12 06 F1 | 	add	arg01, #40
28234     14 32 06 F1 | 	add	local11, #20
28238     19 33 02 FB | 	rdlong	local11, local11
2823c     FF 33 06 F5 | 	and	local11, #511
28240     19 13 02 F1 | 	add	arg01, local11
28244     2C 4E 05 F1 | 	add	fp, #44
28248     A7 14 02 FB | 	rdlong	arg02, fp
2824c     0C 4E 85 F1 | 	sub	fp, #12
28250     A7 16 02 FB | 	rdlong	arg03, fp
28254     24 4E 85 F1 | 	sub	fp, #36
28258     BC 3F BF FD | 	call	#__system____builtin_memmove
2825c     04 4E 05 F1 | 	add	fp, #4
28260     A7 FA 01 FB | 	rdlong	result1, fp
28264     FD 32 02 F6 | 	mov	local11, result1
28268     04 4E 85 F1 | 	sub	fp, #4
2826c     10 FA 05 F1 | 	add	result1, #16
28270     FD FA C1 FA | 	rdbyte	result1, result1
28274     80 FA 45 F5 | 	or	result1, #128
28278     10 32 06 F1 | 	add	local11, #16
2827c     19 FB 41 FC | 	wrbyte	result1, local11
28280                 | LR__4119
28280     0C 4E 05 F1 | 	add	fp, #12
28284     A7 32 02 FB | 	rdlong	local11, fp
28288     18 4E 05 F1 | 	add	fp, #24
2828c     A7 FA 01 FB | 	rdlong	result1, fp
28290     FD 32 82 F1 | 	sub	local11, result1
28294     18 4E 85 F1 | 	sub	fp, #24
28298     A7 32 62 FC | 	wrlong	local11, fp
2829c     04 4E 05 F1 | 	add	fp, #4
282a0     A7 34 02 FB | 	rdlong	local12, fp
282a4     1A 33 02 FB | 	rdlong	local11, local12
282a8     14 4E 05 F1 | 	add	fp, #20
282ac     A7 36 02 FB | 	rdlong	local13, fp
282b0     1B 33 02 F1 | 	add	local11, local13
282b4     1A 33 62 FC | 	wrlong	local11, local12
282b8     0C 4E 05 F1 | 	add	fp, #12
282bc     A7 32 02 FB | 	rdlong	local11, fp
282c0     0C 4E 85 F1 | 	sub	fp, #12
282c4     A7 38 02 FB | 	rdlong	local14, fp
282c8     1C 33 02 F1 | 	add	local11, local14
282cc     0C 4E 05 F1 | 	add	fp, #12
282d0     A7 32 62 FC | 	wrlong	local11, fp
282d4     2C 4E 85 F1 | 	sub	fp, #44
282d8     A7 3A 02 FB | 	rdlong	local15, fp
282dc     1D 33 02 F6 | 	mov	local11, local15
282e0     14 3A 06 F1 | 	add	local15, #20
282e4     1D 3B 02 FB | 	rdlong	local15, local15
282e8     20 4E 05 F1 | 	add	fp, #32
282ec     A7 3C 02 FB | 	rdlong	local16, fp
282f0     1E 3B 02 F1 | 	add	local15, local16
282f4     14 32 06 F1 | 	add	local11, #20
282f8     19 3B 62 FC | 	wrlong	local15, local11
282fc     20 4E 85 F1 | 	sub	fp, #32
28300     A7 3E 02 FB | 	rdlong	local17, fp
28304     1F 33 02 F6 | 	mov	local11, local17
28308     1F 41 02 F6 | 	mov	local18, local17
2830c     04 4E 85 F1 | 	sub	fp, #4
28310     14 3E 06 F1 | 	add	local17, #20
28314     1F 43 02 FB | 	rdlong	local19, local17
28318     0C 40 06 F1 | 	add	local18, #12
2831c     20 45 02 FB | 	rdlong	local20, local18
28320     22 43 1A F2 | 	cmp	local19, local20 wcz
28324     24 00 90 ED |  if_be	jmp	#LR__4120
28328     04 4E 05 F1 | 	add	fp, #4
2832c     A7 26 02 FB | 	rdlong	local05, fp
28330     04 4E 85 F1 | 	sub	fp, #4
28334     13 23 02 F6 | 	mov	local03, local05
28338     14 22 06 F1 | 	add	local03, #20
2833c     11 25 02 FB | 	rdlong	local04, local03
28340     14 22 86 F1 | 	sub	local03, #20
28344     12 47 02 F6 | 	mov	local21, local04
28348     20 00 90 FD | 	jmp	#LR__4121
2834c                 | LR__4120
2834c     04 4E 05 F1 | 	add	fp, #4
28350     A7 2A 02 FB | 	rdlong	local07, fp
28354     04 4E 85 F1 | 	sub	fp, #4
28358     15 31 02 F6 | 	mov	local10, local07
2835c     0C 30 06 F1 | 	add	local10, #12
28360     18 2D 02 FB | 	rdlong	local08, local10
28364     0C 30 86 F1 | 	sub	local10, #12
28368     16 47 02 F6 | 	mov	local21, local08
2836c                 | LR__4121
2836c     0C 32 06 F1 | 	add	local11, #12
28370     19 47 62 FC | 	wrlong	local21, local11
28374     5C F9 9F FD | 	jmp	#LR__4103
28378                 | LR__4122
28378     04 4E 05 F1 | 	add	fp, #4
2837c     A7 34 02 FB | 	rdlong	local12, fp
28380     1A 1F 02 F6 | 	mov	local01, local12
28384     04 4E 85 F1 | 	sub	fp, #4
28388     10 34 06 F1 | 	add	local12, #16
2838c     1A 33 C2 FA | 	rdbyte	local11, local12
28390     40 32 46 F5 | 	or	local11, #64
28394     10 1E 06 F1 | 	add	local01, #16
28398     0F 33 42 FC | 	wrbyte	local11, local01
2839c                 | ' 
2839c                 | ' 
2839c                 | ' 
2839c                 | ' 
2839c                 | ' 
2839c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2839c                 | ' 		fp->flag |=  0x80 ;
2839c                 | ' 
2839c                 | ' 	}
2839c                 | ' 
2839c                 | ' 	fp->flag |=  0x40 ;
2839c                 | ' 
2839c                 | ' 	return FR_OK ;
2839c     00 FA 05 F6 | 	mov	result1, #0
283a0                 | LR__4123
283a0     A7 F0 03 F6 | 	mov	ptra, fp
283a4     B2 00 A0 FD | 	call	#popregs_
283a8                 | _fatfs_cc_f_write_ret
283a8     2D 00 64 FD | 	ret
283ac                 | 
283ac                 | _fatfs_cc_f_sync
283ac     00 4A 05 F6 | 	mov	COUNT_, #0
283b0     A8 00 A0 FD | 	call	#pushregs_
283b4     18 F0 07 F1 | 	add	ptra, #24
283b8     04 4E 05 F1 | 	add	fp, #4
283bc     A7 12 62 FC | 	wrlong	arg01, fp
283c0     08 4E 05 F1 | 	add	fp, #8
283c4     A7 14 02 F6 | 	mov	arg02, fp
283c8     0C 4E 85 F1 | 	sub	fp, #12
283cc     D0 E8 BF FD | 	call	#_fatfs_cc_validate
283d0     08 4E 05 F1 | 	add	fp, #8
283d4     A7 FA 61 FC | 	wrlong	result1, fp
283d8     08 4E 85 F1 | 	sub	fp, #8
283dc     00 FA 0D F2 | 	cmp	result1, #0 wz
283e0     C0 01 90 5D |  if_ne	jmp	#LR__4133
283e4     04 4E 05 F1 | 	add	fp, #4
283e8     A7 18 02 FB | 	rdlong	arg04, fp
283ec     04 4E 85 F1 | 	sub	fp, #4
283f0     10 18 06 F1 | 	add	arg04, #16
283f4     0C 19 C2 FA | 	rdbyte	arg04, arg04
283f8     40 18 CE F7 | 	test	arg04, #64 wz
283fc     A4 01 90 AD |  if_e	jmp	#LR__4132
28400     04 4E 05 F1 | 	add	fp, #4
28404     A7 18 02 FB | 	rdlong	arg04, fp
28408     04 4E 85 F1 | 	sub	fp, #4
2840c     10 18 06 F1 | 	add	arg04, #16
28410     0C 19 C2 FA | 	rdbyte	arg04, arg04
28414     80 18 CE F7 | 	test	arg04, #128 wz
28418     64 00 90 AD |  if_e	jmp	#LR__4130
2841c     0C 4E 05 F1 | 	add	fp, #12
28420     A7 18 02 FB | 	rdlong	arg04, fp
28424     01 18 06 F1 | 	add	arg04, #1
28428     0C 13 C2 FA | 	rdbyte	arg01, arg04
2842c     08 4E 85 F1 | 	sub	fp, #8
28430     A7 18 02 FB | 	rdlong	arg04, fp
28434     0C 15 02 F6 | 	mov	arg02, arg04
28438     28 14 06 F1 | 	add	arg02, #40
2843c     04 4E 85 F1 | 	sub	fp, #4
28440     1C 18 06 F1 | 	add	arg04, #28
28444     0C 17 02 FB | 	rdlong	arg03, arg04
28448     01 18 06 F6 | 	mov	arg04, #1
2844c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
28450     00 FA 0D F2 | 	cmp	result1, #0 wz
28454     01 FA 05 56 |  if_ne	mov	result1, #1
28458     54 01 90 5D |  if_ne	jmp	#LR__4134
2845c     04 4E 05 F1 | 	add	fp, #4
28460     A7 18 02 FB | 	rdlong	arg04, fp
28464     0C 17 02 F6 | 	mov	arg03, arg04
28468     04 4E 85 F1 | 	sub	fp, #4
2846c     10 18 06 F1 | 	add	arg04, #16
28470     0C 19 C2 FA | 	rdbyte	arg04, arg04
28474     7F 18 06 F5 | 	and	arg04, #127
28478     10 16 06 F1 | 	add	arg03, #16
2847c     0B 19 42 FC | 	wrbyte	arg04, arg03
28480                 | LR__4130
28480     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
28484     10 4E 05 F1 | 	add	fp, #16
28488     A7 FA 61 FC | 	wrlong	result1, fp
2848c     04 4E 85 F1 | 	sub	fp, #4
28490     A7 12 02 FB | 	rdlong	arg01, fp
28494     08 4E 85 F1 | 	sub	fp, #8
28498     A7 18 02 FB | 	rdlong	arg04, fp
2849c     04 4E 85 F1 | 	sub	fp, #4
284a0     20 18 06 F1 | 	add	arg04, #32
284a4     0C 15 02 FB | 	rdlong	arg02, arg04
284a8     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
284ac     08 4E 05 F1 | 	add	fp, #8
284b0     A7 FA 61 FC | 	wrlong	result1, fp
284b4     08 4E 85 F1 | 	sub	fp, #8
284b8     00 FA 0D F2 | 	cmp	result1, #0 wz
284bc     E4 00 90 5D |  if_ne	jmp	#LR__4131
284c0     04 4E 05 F1 | 	add	fp, #4
284c4     A7 18 02 FB | 	rdlong	arg04, fp
284c8     24 18 06 F1 | 	add	arg04, #36
284cc     0C 19 02 FB | 	rdlong	arg04, arg04
284d0     10 4E 05 F1 | 	add	fp, #16
284d4     A7 18 62 FC | 	wrlong	arg04, fp
284d8     0C 17 02 F6 | 	mov	arg03, arg04
284dc     0B 16 06 F1 | 	add	arg03, #11
284e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
284e4     20 16 46 F5 | 	or	arg03, #32
284e8     0B 18 06 F1 | 	add	arg04, #11
284ec     0C 17 42 FC | 	wrbyte	arg03, arg04
284f0     10 4E 85 F1 | 	sub	fp, #16
284f4     A7 18 02 FB | 	rdlong	arg04, fp
284f8     0C 13 02 FB | 	rdlong	arg01, arg04
284fc     10 4E 05 F1 | 	add	fp, #16
28500     A7 14 02 FB | 	rdlong	arg02, fp
28504     14 4E 85 F1 | 	sub	fp, #20
28508     08 18 06 F1 | 	add	arg04, #8
2850c     0C 17 02 FB | 	rdlong	arg03, arg04
28510     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
28514     14 4E 05 F1 | 	add	fp, #20
28518     A7 12 02 FB | 	rdlong	arg01, fp
2851c     1C 12 06 F1 | 	add	arg01, #28
28520     10 4E 85 F1 | 	sub	fp, #16
28524     A7 18 02 FB | 	rdlong	arg04, fp
28528     0C 18 06 F1 | 	add	arg04, #12
2852c     0C 15 02 FB | 	rdlong	arg02, arg04
28530     09 15 62 FC | 	wrlong	arg02, arg01
28534     10 4E 05 F1 | 	add	fp, #16
28538     A7 12 02 FB | 	rdlong	arg01, fp
2853c     16 12 06 F1 | 	add	arg01, #22
28540     04 4E 85 F1 | 	sub	fp, #4
28544     A7 14 02 FB | 	rdlong	arg02, fp
28548     09 15 62 FC | 	wrlong	arg02, arg01
2854c     04 4E 05 F1 | 	add	fp, #4
28550     A7 12 02 FB | 	rdlong	arg01, fp
28554     12 12 06 F1 | 	add	arg01, #18
28558     09 01 58 FC | 	wrword	#0, arg01
2855c     08 4E 85 F1 | 	sub	fp, #8
28560     A7 18 02 FB | 	rdlong	arg04, fp
28564     03 18 06 F1 | 	add	arg04, #3
28568     0C 03 48 FC | 	wrbyte	#1, arg04
2856c     A7 12 02 FB | 	rdlong	arg01, fp
28570     0C 4E 85 F1 | 	sub	fp, #12
28574     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
28578     08 4E 05 F1 | 	add	fp, #8
2857c     A7 FA 61 FC | 	wrlong	result1, fp
28580     04 4E 85 F1 | 	sub	fp, #4
28584     A7 18 02 FB | 	rdlong	arg04, fp
28588     0C 17 02 F6 | 	mov	arg03, arg04
2858c     04 4E 85 F1 | 	sub	fp, #4
28590     10 18 06 F1 | 	add	arg04, #16
28594     0C 19 C2 FA | 	rdbyte	arg04, arg04
28598     BF 18 06 F5 | 	and	arg04, #191
2859c     10 16 06 F1 | 	add	arg03, #16
285a0     0B 19 42 FC | 	wrbyte	arg04, arg03
285a4                 | LR__4131
285a4                 | LR__4132
285a4                 | LR__4133
285a4                 | ' 					dir = fp->dir_ptr;
285a4                 | ' 					dir[ 11 ] |=  0x20 ;
285a4                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
285a4                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
285a4                 | ' 					st_dword(dir +  22 , tm);
285a4                 | ' 					st_word(dir +  18 , 0);
285a4                 | ' 					fs->wflag = 1;
285a4                 | ' 					res = sync_fs(fs);
285a4                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
285a4                 | ' 				}
285a4                 | ' 			}
285a4                 | ' 		}
285a4                 | ' 	}
285a4                 | ' 
285a4                 | ' 	return res ;
285a4     08 4E 05 F1 | 	add	fp, #8
285a8     A7 FA 01 FB | 	rdlong	result1, fp
285ac     08 4E 85 F1 | 	sub	fp, #8
285b0                 | LR__4134
285b0     A7 F0 03 F6 | 	mov	ptra, fp
285b4     B2 00 A0 FD | 	call	#popregs_
285b8                 | _fatfs_cc_f_sync_ret
285b8     2D 00 64 FD | 	ret
285bc                 | 
285bc                 | _fatfs_cc_f_close
285bc     01 4A 05 F6 | 	mov	COUNT_, #1
285c0     A8 00 A0 FD | 	call	#pushregs_
285c4     10 F0 07 F1 | 	add	ptra, #16
285c8     04 4E 05 F1 | 	add	fp, #4
285cc     A7 12 62 FC | 	wrlong	arg01, fp
285d0     04 4E 85 F1 | 	sub	fp, #4
285d4     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
285d8     08 4E 05 F1 | 	add	fp, #8
285dc     A7 FA 61 FC | 	wrlong	result1, fp
285e0     08 4E 85 F1 | 	sub	fp, #8
285e4     00 FA 0D F2 | 	cmp	result1, #0 wz
285e8     38 00 90 5D |  if_ne	jmp	#LR__4140
285ec     04 4E 05 F1 | 	add	fp, #4
285f0     A7 12 02 FB | 	rdlong	arg01, fp
285f4     08 4E 05 F1 | 	add	fp, #8
285f8     A7 14 02 F6 | 	mov	arg02, fp
285fc     0C 4E 85 F1 | 	sub	fp, #12
28600     9C E6 BF FD | 	call	#_fatfs_cc_validate
28604     08 4E 05 F1 | 	add	fp, #8
28608     A7 FA 61 FC | 	wrlong	result1, fp
2860c     08 4E 85 F1 | 	sub	fp, #8
28610     00 FA 0D F2 | 	cmp	result1, #0 wz
28614     04 4E 05 A1 |  if_e	add	fp, #4
28618     A7 1E 02 AB |  if_e	rdlong	local01, fp
2861c     04 4E 85 A1 |  if_e	sub	fp, #4
28620     0F 01 68 AC |  if_e	wrlong	#0, local01
28624                 | LR__4140
28624                 | ' 
28624                 | ' 
28624                 | ' 
28624                 | ' 
28624                 | ' 			fp->obj.fs = 0;
28624                 | ' #line 4192 "ff.c"
28624                 | ' 		}
28624                 | ' 	}
28624                 | ' 	return res;
28624     08 4E 05 F1 | 	add	fp, #8
28628     A7 FA 01 FB | 	rdlong	result1, fp
2862c     08 4E 85 F1 | 	sub	fp, #8
28630     A7 F0 03 F6 | 	mov	ptra, fp
28634     B2 00 A0 FD | 	call	#popregs_
28638                 | _fatfs_cc_f_close_ret
28638     2D 00 64 FD | 	ret
2863c                 | 
2863c                 | _fatfs_cc_f_lseek
2863c     00 4A 05 F6 | 	mov	COUNT_, #0
28640     A8 00 A0 FD | 	call	#pushregs_
28644     24 F0 07 F1 | 	add	ptra, #36
28648     04 4E 05 F1 | 	add	fp, #4
2864c     A7 12 62 FC | 	wrlong	arg01, fp
28650     04 4E 05 F1 | 	add	fp, #4
28654     A7 14 62 FC | 	wrlong	arg02, fp
28658     04 4E 85 F1 | 	sub	fp, #4
2865c     A7 12 02 FB | 	rdlong	arg01, fp
28660     0C 4E 05 F1 | 	add	fp, #12
28664     A7 14 02 F6 | 	mov	arg02, fp
28668     10 4E 85 F1 | 	sub	fp, #16
2866c     30 E6 BF FD | 	call	#_fatfs_cc_validate
28670     0C 4E 05 F1 | 	add	fp, #12
28674     A7 FA 61 FC | 	wrlong	result1, fp
28678     0C 4E 85 F1 | 	sub	fp, #12
2867c     00 FA 0D F2 | 	cmp	result1, #0 wz
28680     1C 00 90 5D |  if_ne	jmp	#LR__4150
28684     04 4E 05 F1 | 	add	fp, #4
28688     A7 18 02 FB | 	rdlong	arg04, fp
2868c     11 18 06 F1 | 	add	arg04, #17
28690     0C 19 C2 FA | 	rdbyte	arg04, arg04
28694     08 4E 05 F1 | 	add	fp, #8
28698     A7 18 62 FC | 	wrlong	arg04, fp
2869c     0C 4E 85 F1 | 	sub	fp, #12
286a0                 | LR__4150
286a0     0C 4E 05 F1 | 	add	fp, #12
286a4     A7 18 0A FB | 	rdlong	arg04, fp wz
286a8     0C 4E 85 F1 | 	sub	fp, #12
286ac     0C 4E 05 51 |  if_ne	add	fp, #12
286b0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
286b4     0C 4E 85 51 |  if_ne	sub	fp, #12
286b8     40 06 90 5D |  if_ne	jmp	#LR__4173
286bc     04 4E 05 F1 | 	add	fp, #4
286c0     A7 18 02 FB | 	rdlong	arg04, fp
286c4     04 4E 05 F1 | 	add	fp, #4
286c8     A7 16 02 FB | 	rdlong	arg03, fp
286cc     08 4E 85 F1 | 	sub	fp, #8
286d0     0C 18 06 F1 | 	add	arg04, #12
286d4     0C 19 02 FB | 	rdlong	arg04, arg04
286d8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
286dc     3C 00 90 ED |  if_be	jmp	#LR__4151
286e0     04 4E 05 F1 | 	add	fp, #4
286e4     A7 16 02 FB | 	rdlong	arg03, fp
286e8     04 4E 85 F1 | 	sub	fp, #4
286ec     10 16 06 F1 | 	add	arg03, #16
286f0     0B 17 C2 FA | 	rdbyte	arg03, arg03
286f4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
286f8     02 16 CE F7 | 	test	arg03, #2 wz
286fc     1C 00 90 5D |  if_ne	jmp	#LR__4151
28700     04 4E 05 F1 | 	add	fp, #4
28704     A7 16 02 FB | 	rdlong	arg03, fp
28708     0C 16 06 F1 | 	add	arg03, #12
2870c     0B 17 02 FB | 	rdlong	arg03, arg03
28710     04 4E 05 F1 | 	add	fp, #4
28714     A7 16 62 FC | 	wrlong	arg03, fp
28718     08 4E 85 F1 | 	sub	fp, #8
2871c                 | LR__4151
2871c     04 4E 05 F1 | 	add	fp, #4
28720     A7 16 02 FB | 	rdlong	arg03, fp
28724     14 16 06 F1 | 	add	arg03, #20
28728     0B 17 02 FB | 	rdlong	arg03, arg03
2872c     1C 4E 05 F1 | 	add	fp, #28
28730     A7 16 62 FC | 	wrlong	arg03, fp
28734     1C 4E 85 F1 | 	sub	fp, #28
28738     A7 16 02 FB | 	rdlong	arg03, fp
2873c     18 4E 05 F1 | 	add	fp, #24
28740     A7 00 68 FC | 	wrlong	#0, fp
28744     14 16 06 F1 | 	add	arg03, #20
28748     0B 01 68 FC | 	wrlong	#0, arg03
2874c     14 4E 85 F1 | 	sub	fp, #20
28750     A7 16 02 FB | 	rdlong	arg03, fp
28754     08 4E 85 F1 | 	sub	fp, #8
28758     01 16 16 F2 | 	cmp	arg03, #1 wc
2875c     E4 03 90 CD |  if_b	jmp	#LR__4167
28760     10 4E 05 F1 | 	add	fp, #16
28764     A7 16 02 FB | 	rdlong	arg03, fp
28768     0A 16 06 F1 | 	add	arg03, #10
2876c     0B 19 E2 FA | 	rdword	arg04, arg03
28770     09 18 66 F0 | 	shl	arg04, #9
28774     08 4E 05 F1 | 	add	fp, #8
28778     A7 18 62 FC | 	wrlong	arg04, fp
2877c     08 4E 05 F1 | 	add	fp, #8
28780     A7 18 02 FB | 	rdlong	arg04, fp
28784     20 4E 85 F1 | 	sub	fp, #32
28788     01 18 16 F2 | 	cmp	arg04, #1 wc
2878c     AC 00 90 CD |  if_b	jmp	#LR__4152
28790     08 4E 05 F1 | 	add	fp, #8
28794     A7 18 02 FB | 	rdlong	arg04, fp
28798     01 18 86 F1 | 	sub	arg04, #1
2879c     10 4E 05 F1 | 	add	fp, #16
287a0     A7 16 02 FB | 	rdlong	arg03, fp
287a4     0B 19 12 FD | 	qdiv	arg04, arg03
287a8     08 4E 05 F1 | 	add	fp, #8
287ac     A7 FA 01 FB | 	rdlong	result1, fp
287b0     01 FA 85 F1 | 	sub	result1, #1
287b4     18 18 62 FD | 	getqx	arg04
287b8     0B FB 11 FD | 	qdiv	result1, arg03
287bc     20 4E 85 F1 | 	sub	fp, #32
287c0     18 16 62 FD | 	getqx	arg03
287c4     0B 19 12 F2 | 	cmp	arg04, arg03 wc
287c8     70 00 90 CD |  if_b	jmp	#LR__4152
287cc     04 4E 05 F1 | 	add	fp, #4
287d0     A7 16 02 FB | 	rdlong	arg03, fp
287d4     1C 4E 05 F1 | 	add	fp, #28
287d8     A7 FA 01 FB | 	rdlong	result1, fp
287dc     01 FA 85 F1 | 	sub	result1, #1
287e0     08 4E 85 F1 | 	sub	fp, #8
287e4     A7 18 02 FB | 	rdlong	arg04, fp
287e8     01 18 86 F1 | 	sub	arg04, #1
287ec     0C FB 21 F5 | 	andn	result1, arg04
287f0     14 16 06 F1 | 	add	arg03, #20
287f4     0B FB 61 FC | 	wrlong	result1, arg03
287f8     10 4E 85 F1 | 	sub	fp, #16
287fc     A7 16 02 FB | 	rdlong	arg03, fp
28800     04 4E 85 F1 | 	sub	fp, #4
28804     A7 18 02 FB | 	rdlong	arg04, fp
28808     14 18 06 F1 | 	add	arg04, #20
2880c     0C 19 02 FB | 	rdlong	arg04, arg04
28810     0C 17 82 F1 | 	sub	arg03, arg04
28814     04 4E 05 F1 | 	add	fp, #4
28818     A7 16 62 FC | 	wrlong	arg03, fp
2881c     04 4E 85 F1 | 	sub	fp, #4
28820     A7 16 02 FB | 	rdlong	arg03, fp
28824     18 16 06 F1 | 	add	arg03, #24
28828     0B 17 02 FB | 	rdlong	arg03, arg03
2882c     10 4E 05 F1 | 	add	fp, #16
28830     A7 16 62 FC | 	wrlong	arg03, fp
28834     14 4E 85 F1 | 	sub	fp, #20
28838     D0 00 90 FD | 	jmp	#LR__4156
2883c                 | LR__4152
2883c     04 4E 05 F1 | 	add	fp, #4
28840     A7 16 02 FB | 	rdlong	arg03, fp
28844     08 16 06 F1 | 	add	arg03, #8
28848     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2884c     10 4E 05 F1 | 	add	fp, #16
28850     A7 16 62 FC | 	wrlong	arg03, fp
28854     14 4E 85 F1 | 	sub	fp, #20
28858     94 00 90 5D |  if_ne	jmp	#LR__4155
2885c     04 4E 05 F1 | 	add	fp, #4
28860     A7 12 02 FB | 	rdlong	arg01, fp
28864     04 4E 85 F1 | 	sub	fp, #4
28868     00 14 06 F6 | 	mov	arg02, #0
2886c     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
28870     14 4E 05 F1 | 	add	fp, #20
28874     A7 FA 61 FC | 	wrlong	result1, fp
28878     14 4E 85 F1 | 	sub	fp, #20
2887c     01 FA 0D F2 | 	cmp	result1, #1 wz
28880     1C 00 90 5D |  if_ne	jmp	#LR__4153
28884     04 4E 05 F1 | 	add	fp, #4
28888     A7 16 02 FB | 	rdlong	arg03, fp
2888c     04 4E 85 F1 | 	sub	fp, #4
28890     11 16 06 F1 | 	add	arg03, #17
28894     0B 05 48 FC | 	wrbyte	#2, arg03
28898     02 FA 05 F6 | 	mov	result1, #2
2889c     5C 04 90 FD | 	jmp	#LR__4173
288a0                 | LR__4153
288a0     14 4E 05 F1 | 	add	fp, #20
288a4     A7 FA 01 FB | 	rdlong	result1, fp
288a8     14 4E 85 F1 | 	sub	fp, #20
288ac     FF FF 7F FF 
288b0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
288b4     1C 00 90 5D |  if_ne	jmp	#LR__4154
288b8     04 4E 05 F1 | 	add	fp, #4
288bc     A7 16 02 FB | 	rdlong	arg03, fp
288c0     04 4E 85 F1 | 	sub	fp, #4
288c4     11 16 06 F1 | 	add	arg03, #17
288c8     0B 03 48 FC | 	wrbyte	#1, arg03
288cc     01 FA 05 F6 | 	mov	result1, #1
288d0     28 04 90 FD | 	jmp	#LR__4173
288d4                 | LR__4154
288d4     04 4E 05 F1 | 	add	fp, #4
288d8     A7 16 02 FB | 	rdlong	arg03, fp
288dc     10 4E 05 F1 | 	add	fp, #16
288e0     A7 18 02 FB | 	rdlong	arg04, fp
288e4     14 4E 85 F1 | 	sub	fp, #20
288e8     08 16 06 F1 | 	add	arg03, #8
288ec     0B 19 62 FC | 	wrlong	arg04, arg03
288f0                 | LR__4155
288f0     04 4E 05 F1 | 	add	fp, #4
288f4     A7 16 02 FB | 	rdlong	arg03, fp
288f8     10 4E 05 F1 | 	add	fp, #16
288fc     A7 18 02 FB | 	rdlong	arg04, fp
28900     14 4E 85 F1 | 	sub	fp, #20
28904     18 16 06 F1 | 	add	arg03, #24
28908     0B 19 62 FC | 	wrlong	arg04, arg03
2890c                 | LR__4156
2890c     14 4E 05 F1 | 	add	fp, #20
28910     A7 16 0A FB | 	rdlong	arg03, fp wz
28914     14 4E 85 F1 | 	sub	fp, #20
28918     28 02 90 AD |  if_e	jmp	#LR__4166
2891c                 | ' 				while (ofs > bcs) {
2891c                 | LR__4157
2891c     08 4E 05 F1 | 	add	fp, #8
28920     A7 18 02 FB | 	rdlong	arg04, fp
28924     10 4E 05 F1 | 	add	fp, #16
28928     A7 16 02 FB | 	rdlong	arg03, fp
2892c     18 4E 85 F1 | 	sub	fp, #24
28930     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
28934     68 01 90 ED |  if_be	jmp	#LR__4163
28938     08 4E 05 F1 | 	add	fp, #8
2893c     A7 18 02 FB | 	rdlong	arg04, fp
28940     10 4E 05 F1 | 	add	fp, #16
28944     A7 16 02 FB | 	rdlong	arg03, fp
28948     0B 19 82 F1 | 	sub	arg04, arg03
2894c     10 4E 85 F1 | 	sub	fp, #16
28950     A7 18 62 FC | 	wrlong	arg04, fp
28954     04 4E 85 F1 | 	sub	fp, #4
28958     A7 18 02 FB | 	rdlong	arg04, fp
2895c     0C FB 01 F6 | 	mov	result1, arg04
28960     14 18 06 F1 | 	add	arg04, #20
28964     0C 19 02 FB | 	rdlong	arg04, arg04
28968     14 4E 05 F1 | 	add	fp, #20
2896c     A7 16 02 FB | 	rdlong	arg03, fp
28970     0B 19 02 F1 | 	add	arg04, arg03
28974     14 FA 05 F1 | 	add	result1, #20
28978     FD 18 62 FC | 	wrlong	arg04, result1
2897c     14 4E 85 F1 | 	sub	fp, #20
28980     A7 16 02 FB | 	rdlong	arg03, fp
28984     04 4E 85 F1 | 	sub	fp, #4
28988     10 16 06 F1 | 	add	arg03, #16
2898c     0B 17 C2 FA | 	rdbyte	arg03, arg03
28990     02 16 CE F7 | 	test	arg03, #2 wz
28994     3C 00 90 AD |  if_e	jmp	#LR__4158
28998     04 4E 05 F1 | 	add	fp, #4
2899c     A7 12 02 FB | 	rdlong	arg01, fp
289a0     10 4E 05 F1 | 	add	fp, #16
289a4     A7 14 02 FB | 	rdlong	arg02, fp
289a8     14 4E 85 F1 | 	sub	fp, #20
289ac     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
289b0     14 4E 05 F1 | 	add	fp, #20
289b4     A7 FA 61 FC | 	wrlong	result1, fp
289b8     00 FA 4D F2 | 	cmps	result1, #0 wz
289bc     14 4E 85 F1 | 	sub	fp, #20
289c0     08 4E 05 A1 |  if_e	add	fp, #8
289c4     A7 00 68 AC |  if_e	wrlong	#0, fp
289c8     08 4E 85 A1 |  if_e	sub	fp, #8
289cc                 | ' 							ofs = 0; break;
289cc     D0 00 90 AD |  if_e	jmp	#LR__4163
289d0     24 00 90 FD | 	jmp	#LR__4159
289d4                 | LR__4158
289d4     04 4E 05 F1 | 	add	fp, #4
289d8     A7 12 02 FB | 	rdlong	arg01, fp
289dc     10 4E 05 F1 | 	add	fp, #16
289e0     A7 14 02 FB | 	rdlong	arg02, fp
289e4     14 4E 85 F1 | 	sub	fp, #20
289e8     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
289ec     14 4E 05 F1 | 	add	fp, #20
289f0     A7 FA 61 FC | 	wrlong	result1, fp
289f4     14 4E 85 F1 | 	sub	fp, #20
289f8                 | LR__4159
289f8     14 4E 05 F1 | 	add	fp, #20
289fc     A7 16 02 FB | 	rdlong	arg03, fp
28a00     14 4E 85 F1 | 	sub	fp, #20
28a04     FF FF 7F FF 
28a08     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
28a0c     1C 00 90 5D |  if_ne	jmp	#LR__4160
28a10     04 4E 05 F1 | 	add	fp, #4
28a14     A7 16 02 FB | 	rdlong	arg03, fp
28a18     04 4E 85 F1 | 	sub	fp, #4
28a1c     11 16 06 F1 | 	add	arg03, #17
28a20     0B 03 48 FC | 	wrbyte	#1, arg03
28a24     01 FA 05 F6 | 	mov	result1, #1
28a28     D0 02 90 FD | 	jmp	#LR__4173
28a2c                 | LR__4160
28a2c     14 4E 05 F1 | 	add	fp, #20
28a30     A7 16 02 FB | 	rdlong	arg03, fp
28a34     14 4E 85 F1 | 	sub	fp, #20
28a38     02 16 16 F2 | 	cmp	arg03, #2 wc
28a3c     24 00 90 CD |  if_b	jmp	#LR__4161
28a40     10 4E 05 F1 | 	add	fp, #16
28a44     A7 18 02 FB | 	rdlong	arg04, fp
28a48     04 4E 05 F1 | 	add	fp, #4
28a4c     A7 16 02 FB | 	rdlong	arg03, fp
28a50     14 4E 85 F1 | 	sub	fp, #20
28a54     18 18 06 F1 | 	add	arg04, #24
28a58     0C 19 02 FB | 	rdlong	arg04, arg04
28a5c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
28a60     1C 00 90 CD |  if_b	jmp	#LR__4162
28a64                 | LR__4161
28a64     04 4E 05 F1 | 	add	fp, #4
28a68     A7 16 02 FB | 	rdlong	arg03, fp
28a6c     04 4E 85 F1 | 	sub	fp, #4
28a70     11 16 06 F1 | 	add	arg03, #17
28a74     0B 05 48 FC | 	wrbyte	#2, arg03
28a78     02 FA 05 F6 | 	mov	result1, #2
28a7c     7C 02 90 FD | 	jmp	#LR__4173
28a80                 | LR__4162
28a80     04 4E 05 F1 | 	add	fp, #4
28a84     A7 18 02 FB | 	rdlong	arg04, fp
28a88     10 4E 05 F1 | 	add	fp, #16
28a8c     A7 16 02 FB | 	rdlong	arg03, fp
28a90     14 4E 85 F1 | 	sub	fp, #20
28a94     18 18 06 F1 | 	add	arg04, #24
28a98     0C 17 62 FC | 	wrlong	arg03, arg04
28a9c     7C FE 9F FD | 	jmp	#LR__4157
28aa0                 | LR__4163
28aa0     04 4E 05 F1 | 	add	fp, #4
28aa4     A7 16 02 FB | 	rdlong	arg03, fp
28aa8     0B 13 02 F6 | 	mov	arg01, arg03
28aac     14 16 06 F1 | 	add	arg03, #20
28ab0     0B 15 02 FB | 	rdlong	arg02, arg03
28ab4     04 4E 05 F1 | 	add	fp, #4
28ab8     A7 16 02 FB | 	rdlong	arg03, fp
28abc     0B 15 02 F1 | 	add	arg02, arg03
28ac0     14 12 06 F1 | 	add	arg01, #20
28ac4     09 15 62 FC | 	wrlong	arg02, arg01
28ac8     A7 16 02 FB | 	rdlong	arg03, fp
28acc     08 4E 85 F1 | 	sub	fp, #8
28ad0     FF 17 CE F7 | 	test	arg03, #511 wz
28ad4     6C 00 90 AD |  if_e	jmp	#LR__4165
28ad8     10 4E 05 F1 | 	add	fp, #16
28adc     A7 12 02 FB | 	rdlong	arg01, fp
28ae0     04 4E 05 F1 | 	add	fp, #4
28ae4     A7 14 02 FB | 	rdlong	arg02, fp
28ae8     14 4E 85 F1 | 	sub	fp, #20
28aec     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
28af0     1C 4E 05 F1 | 	add	fp, #28
28af4     A7 FA 61 FC | 	wrlong	result1, fp
28af8     1C 4E 85 F1 | 	sub	fp, #28
28afc     00 FA 0D F2 | 	cmp	result1, #0 wz
28b00     1C 00 90 5D |  if_ne	jmp	#LR__4164
28b04     04 4E 05 F1 | 	add	fp, #4
28b08     A7 16 02 FB | 	rdlong	arg03, fp
28b0c     04 4E 85 F1 | 	sub	fp, #4
28b10     11 16 06 F1 | 	add	arg03, #17
28b14     0B 05 48 FC | 	wrbyte	#2, arg03
28b18     02 FA 05 F6 | 	mov	result1, #2
28b1c     DC 01 90 FD | 	jmp	#LR__4173
28b20                 | LR__4164
28b20     1C 4E 05 F1 | 	add	fp, #28
28b24     A7 18 02 FB | 	rdlong	arg04, fp
28b28     14 4E 85 F1 | 	sub	fp, #20
28b2c     A7 16 02 FB | 	rdlong	arg03, fp
28b30     09 16 46 F0 | 	shr	arg03, #9
28b34     0B 19 02 F1 | 	add	arg04, arg03
28b38     14 4E 05 F1 | 	add	fp, #20
28b3c     A7 18 62 FC | 	wrlong	arg04, fp
28b40     1C 4E 85 F1 | 	sub	fp, #28
28b44                 | LR__4165
28b44                 | LR__4166
28b44                 | LR__4167
28b44     04 4E 05 F1 | 	add	fp, #4
28b48     A7 18 02 FB | 	rdlong	arg04, fp
28b4c     0C 17 02 F6 | 	mov	arg03, arg04
28b50     04 4E 85 F1 | 	sub	fp, #4
28b54     14 16 06 F1 | 	add	arg03, #20
28b58     0B 17 02 FB | 	rdlong	arg03, arg03
28b5c     0C 18 06 F1 | 	add	arg04, #12
28b60     0C 19 02 FB | 	rdlong	arg04, arg04
28b64     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
28b68     3C 00 90 ED |  if_be	jmp	#LR__4168
28b6c     04 4E 05 F1 | 	add	fp, #4
28b70     A7 18 02 FB | 	rdlong	arg04, fp
28b74     0C 17 02 F6 | 	mov	arg03, arg04
28b78     14 18 06 F1 | 	add	arg04, #20
28b7c     0C 19 02 FB | 	rdlong	arg04, arg04
28b80     0C 16 06 F1 | 	add	arg03, #12
28b84     0B 19 62 FC | 	wrlong	arg04, arg03
28b88     A7 18 02 FB | 	rdlong	arg04, fp
28b8c     0C 17 02 F6 | 	mov	arg03, arg04
28b90     04 4E 85 F1 | 	sub	fp, #4
28b94     10 18 06 F1 | 	add	arg04, #16
28b98     0C 19 C2 FA | 	rdbyte	arg04, arg04
28b9c     40 18 46 F5 | 	or	arg04, #64
28ba0     10 16 06 F1 | 	add	arg03, #16
28ba4     0B 19 42 FC | 	wrbyte	arg04, arg03
28ba8                 | LR__4168
28ba8     04 4E 05 F1 | 	add	fp, #4
28bac     A7 16 02 FB | 	rdlong	arg03, fp
28bb0     04 4E 85 F1 | 	sub	fp, #4
28bb4     14 16 06 F1 | 	add	arg03, #20
28bb8     0B 17 02 FB | 	rdlong	arg03, arg03
28bbc     FF 17 CE F7 | 	test	arg03, #511 wz
28bc0     2C 01 90 AD |  if_e	jmp	#LR__4172
28bc4     04 4E 05 F1 | 	add	fp, #4
28bc8     A7 18 02 FB | 	rdlong	arg04, fp
28bcc     18 4E 05 F1 | 	add	fp, #24
28bd0     A7 16 02 FB | 	rdlong	arg03, fp
28bd4     1C 4E 85 F1 | 	sub	fp, #28
28bd8     1C 18 06 F1 | 	add	arg04, #28
28bdc     0C 19 02 FB | 	rdlong	arg04, arg04
28be0     0C 17 0A F2 | 	cmp	arg03, arg04 wz
28be4     08 01 90 AD |  if_e	jmp	#LR__4172
28be8     04 4E 05 F1 | 	add	fp, #4
28bec     A7 16 02 FB | 	rdlong	arg03, fp
28bf0     04 4E 85 F1 | 	sub	fp, #4
28bf4     10 16 06 F1 | 	add	arg03, #16
28bf8     0B 17 C2 FA | 	rdbyte	arg03, arg03
28bfc     80 16 CE F7 | 	test	arg03, #128 wz
28c00     7C 00 90 AD |  if_e	jmp	#LR__4170
28c04     10 4E 05 F1 | 	add	fp, #16
28c08     A7 16 02 FB | 	rdlong	arg03, fp
28c0c     01 16 06 F1 | 	add	arg03, #1
28c10     0B 13 C2 FA | 	rdbyte	arg01, arg03
28c14     0C 4E 85 F1 | 	sub	fp, #12
28c18     A7 16 02 FB | 	rdlong	arg03, fp
28c1c     0B 15 02 F6 | 	mov	arg02, arg03
28c20     28 14 06 F1 | 	add	arg02, #40
28c24     04 4E 85 F1 | 	sub	fp, #4
28c28     1C 16 06 F1 | 	add	arg03, #28
28c2c     0B 17 02 FB | 	rdlong	arg03, arg03
28c30     01 18 06 F6 | 	mov	arg04, #1
28c34     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
28c38     00 FA 0D F2 | 	cmp	result1, #0 wz
28c3c     1C 00 90 AD |  if_e	jmp	#LR__4169
28c40     04 4E 05 F1 | 	add	fp, #4
28c44     A7 16 02 FB | 	rdlong	arg03, fp
28c48     04 4E 85 F1 | 	sub	fp, #4
28c4c     11 16 06 F1 | 	add	arg03, #17
28c50     0B 03 48 FC | 	wrbyte	#1, arg03
28c54     01 FA 05 F6 | 	mov	result1, #1
28c58     A0 00 90 FD | 	jmp	#LR__4173
28c5c                 | LR__4169
28c5c     04 4E 05 F1 | 	add	fp, #4
28c60     A7 18 02 FB | 	rdlong	arg04, fp
28c64     0C 17 02 F6 | 	mov	arg03, arg04
28c68     04 4E 85 F1 | 	sub	fp, #4
28c6c     10 18 06 F1 | 	add	arg04, #16
28c70     0C 19 C2 FA | 	rdbyte	arg04, arg04
28c74     7F 18 06 F5 | 	and	arg04, #127
28c78     10 16 06 F1 | 	add	arg03, #16
28c7c     0B 19 42 FC | 	wrbyte	arg04, arg03
28c80                 | LR__4170
28c80     10 4E 05 F1 | 	add	fp, #16
28c84     A7 16 02 FB | 	rdlong	arg03, fp
28c88     01 16 06 F1 | 	add	arg03, #1
28c8c     0B 13 C2 FA | 	rdbyte	arg01, arg03
28c90     0C 4E 85 F1 | 	sub	fp, #12
28c94     A7 14 02 FB | 	rdlong	arg02, fp
28c98     28 14 06 F1 | 	add	arg02, #40
28c9c     18 4E 05 F1 | 	add	fp, #24
28ca0     A7 16 02 FB | 	rdlong	arg03, fp
28ca4     1C 4E 85 F1 | 	sub	fp, #28
28ca8     01 18 06 F6 | 	mov	arg04, #1
28cac     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
28cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
28cb4     1C 00 90 AD |  if_e	jmp	#LR__4171
28cb8     04 4E 05 F1 | 	add	fp, #4
28cbc     A7 16 02 FB | 	rdlong	arg03, fp
28cc0     04 4E 85 F1 | 	sub	fp, #4
28cc4     11 16 06 F1 | 	add	arg03, #17
28cc8     0B 03 48 FC | 	wrbyte	#1, arg03
28ccc     01 FA 05 F6 | 	mov	result1, #1
28cd0     28 00 90 FD | 	jmp	#LR__4173
28cd4                 | LR__4171
28cd4     04 4E 05 F1 | 	add	fp, #4
28cd8     A7 18 02 FB | 	rdlong	arg04, fp
28cdc     18 4E 05 F1 | 	add	fp, #24
28ce0     A7 16 02 FB | 	rdlong	arg03, fp
28ce4     1C 4E 85 F1 | 	sub	fp, #28
28ce8     1C 18 06 F1 | 	add	arg04, #28
28cec     0C 17 62 FC | 	wrlong	arg03, arg04
28cf0                 | LR__4172
28cf0                 | ' 
28cf0                 | ' 			fp->sect = nsect;
28cf0                 | ' 		}
28cf0                 | ' 	}
28cf0                 | ' 
28cf0                 | ' 	return res ;
28cf0     0C 4E 05 F1 | 	add	fp, #12
28cf4     A7 FA 01 FB | 	rdlong	result1, fp
28cf8     0C 4E 85 F1 | 	sub	fp, #12
28cfc                 | LR__4173
28cfc     A7 F0 03 F6 | 	mov	ptra, fp
28d00     B2 00 A0 FD | 	call	#popregs_
28d04                 | _fatfs_cc_f_lseek_ret
28d04     2D 00 64 FD | 	ret
28d08                 | 
28d08                 | _fatfs_cc_f_opendir
28d08     01 4A 05 F6 | 	mov	COUNT_, #1
28d0c     A8 00 A0 FD | 	call	#pushregs_
28d10     14 F0 07 F1 | 	add	ptra, #20
28d14     04 4E 05 F1 | 	add	fp, #4
28d18     A7 12 62 FC | 	wrlong	arg01, fp
28d1c     04 4E 05 F1 | 	add	fp, #4
28d20     A7 14 62 FC | 	wrlong	arg02, fp
28d24     04 4E 85 F1 | 	sub	fp, #4
28d28     A7 16 0A FB | 	rdlong	arg03, fp wz
28d2c     04 4E 85 F1 | 	sub	fp, #4
28d30     09 FA 05 A6 |  if_e	mov	result1, #9
28d34     78 01 90 AD |  if_e	jmp	#LR__4186
28d38     08 4E 05 F1 | 	add	fp, #8
28d3c     A7 12 02 F6 | 	mov	arg01, fp
28d40     08 4E 05 F1 | 	add	fp, #8
28d44     A7 14 02 F6 | 	mov	arg02, fp
28d48     10 4E 85 F1 | 	sub	fp, #16
28d4c     00 16 06 F6 | 	mov	arg03, #0
28d50     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
28d54     0C 4E 05 F1 | 	add	fp, #12
28d58     A7 FA 61 FC | 	wrlong	result1, fp
28d5c     0C 4E 85 F1 | 	sub	fp, #12
28d60     00 FA 0D F2 | 	cmp	result1, #0 wz
28d64     20 01 90 5D |  if_ne	jmp	#LR__4185
28d68     04 4E 05 F1 | 	add	fp, #4
28d6c     A7 16 02 FB | 	rdlong	arg03, fp
28d70     0C 4E 05 F1 | 	add	fp, #12
28d74     A7 FA 01 FB | 	rdlong	result1, fp
28d78     0B FB 61 FC | 	wrlong	result1, arg03
28d7c     0C 4E 85 F1 | 	sub	fp, #12
28d80     A7 12 02 FB | 	rdlong	arg01, fp
28d84     04 4E 05 F1 | 	add	fp, #4
28d88     A7 14 02 FB | 	rdlong	arg02, fp
28d8c     08 4E 85 F1 | 	sub	fp, #8
28d90     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
28d94     0C 4E 05 F1 | 	add	fp, #12
28d98     A7 FA 61 FC | 	wrlong	result1, fp
28d9c     0C 4E 85 F1 | 	sub	fp, #12
28da0     00 FA 0D F2 | 	cmp	result1, #0 wz
28da4     C4 00 90 5D |  if_ne	jmp	#LR__4184
28da8     04 4E 05 F1 | 	add	fp, #4
28dac     A7 16 02 FB | 	rdlong	arg03, fp
28db0     04 4E 85 F1 | 	sub	fp, #4
28db4     2B 16 06 F1 | 	add	arg03, #43
28db8     0B 17 C2 FA | 	rdbyte	arg03, arg03
28dbc     80 16 CE F7 | 	test	arg03, #128 wz
28dc0     58 00 90 5D |  if_ne	jmp	#LR__4182
28dc4     04 4E 05 F1 | 	add	fp, #4
28dc8     A7 16 02 FB | 	rdlong	arg03, fp
28dcc     04 4E 85 F1 | 	sub	fp, #4
28dd0     06 16 06 F1 | 	add	arg03, #6
28dd4     0B 17 C2 FA | 	rdbyte	arg03, arg03
28dd8     10 16 CE F7 | 	test	arg03, #16 wz
28ddc     30 00 90 AD |  if_e	jmp	#LR__4180
28de0     04 4E 05 F1 | 	add	fp, #4
28de4     A7 16 02 FB | 	rdlong	arg03, fp
28de8     0B 1F 02 F6 | 	mov	local01, arg03
28dec     0C 4E 05 F1 | 	add	fp, #12
28df0     A7 12 02 FB | 	rdlong	arg01, fp
28df4     10 4E 85 F1 | 	sub	fp, #16
28df8     1C 16 06 F1 | 	add	arg03, #28
28dfc     0B 15 02 FB | 	rdlong	arg02, arg03
28e00     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
28e04     08 1E 06 F1 | 	add	local01, #8
28e08     0F FB 61 FC | 	wrlong	result1, local01
28e0c     0C 00 90 FD | 	jmp	#LR__4181
28e10                 | LR__4180
28e10     0C 4E 05 F1 | 	add	fp, #12
28e14     A7 0A 68 FC | 	wrlong	#5, fp
28e18     0C 4E 85 F1 | 	sub	fp, #12
28e1c                 | LR__4181
28e1c                 | LR__4182
28e1c     0C 4E 05 F1 | 	add	fp, #12
28e20     A7 1E 0A FB | 	rdlong	local01, fp wz
28e24     0C 4E 85 F1 | 	sub	fp, #12
28e28     40 00 90 5D |  if_ne	jmp	#LR__4183
28e2c     04 4E 05 F1 | 	add	fp, #4
28e30     A7 1E 02 FB | 	rdlong	local01, fp
28e34     0C 4E 05 F1 | 	add	fp, #12
28e38     A7 16 02 FB | 	rdlong	arg03, fp
28e3c     06 16 06 F1 | 	add	arg03, #6
28e40     0B 17 E2 FA | 	rdword	arg03, arg03
28e44     04 1E 06 F1 | 	add	local01, #4
28e48     0F 17 52 FC | 	wrword	arg03, local01
28e4c     0C 4E 85 F1 | 	sub	fp, #12
28e50     A7 12 02 FB | 	rdlong	arg01, fp
28e54     04 4E 85 F1 | 	sub	fp, #4
28e58     00 14 06 F6 | 	mov	arg02, #0
28e5c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
28e60     0C 4E 05 F1 | 	add	fp, #12
28e64     A7 FA 61 FC | 	wrlong	result1, fp
28e68     0C 4E 85 F1 | 	sub	fp, #12
28e6c                 | LR__4183
28e6c                 | LR__4184
28e6c     0C 4E 05 F1 | 	add	fp, #12
28e70     A7 1E 02 FB | 	rdlong	local01, fp
28e74     0C 4E 85 F1 | 	sub	fp, #12
28e78     04 1E 0E F2 | 	cmp	local01, #4 wz
28e7c     0C 4E 05 A1 |  if_e	add	fp, #12
28e80     A7 0A 68 AC |  if_e	wrlong	#5, fp
28e84     0C 4E 85 A1 |  if_e	sub	fp, #12
28e88                 | LR__4185
28e88     0C 4E 05 F1 | 	add	fp, #12
28e8c     A7 1E 0A FB | 	rdlong	local01, fp wz
28e90     0C 4E 85 F1 | 	sub	fp, #12
28e94     04 4E 05 51 |  if_ne	add	fp, #4
28e98     A7 1E 02 5B |  if_ne	rdlong	local01, fp
28e9c     04 4E 85 51 |  if_ne	sub	fp, #4
28ea0     0F 01 68 5C |  if_ne	wrlong	#0, local01
28ea4                 | ' 
28ea4                 | ' 	return res ;
28ea4     0C 4E 05 F1 | 	add	fp, #12
28ea8     A7 FA 01 FB | 	rdlong	result1, fp
28eac     0C 4E 85 F1 | 	sub	fp, #12
28eb0                 | LR__4186
28eb0     A7 F0 03 F6 | 	mov	ptra, fp
28eb4     B2 00 A0 FD | 	call	#popregs_
28eb8                 | _fatfs_cc_f_opendir_ret
28eb8     2D 00 64 FD | 	ret
28ebc                 | 
28ebc                 | _fatfs_cc_f_closedir
28ebc     00 4A 05 F6 | 	mov	COUNT_, #0
28ec0     A8 00 A0 FD | 	call	#pushregs_
28ec4     10 F0 07 F1 | 	add	ptra, #16
28ec8     04 4E 05 F1 | 	add	fp, #4
28ecc     A7 12 62 FC | 	wrlong	arg01, fp
28ed0     08 4E 05 F1 | 	add	fp, #8
28ed4     A7 14 02 F6 | 	mov	arg02, fp
28ed8     0C 4E 85 F1 | 	sub	fp, #12
28edc     C0 DD BF FD | 	call	#_fatfs_cc_validate
28ee0     08 4E 05 F1 | 	add	fp, #8
28ee4     A7 FA 61 FC | 	wrlong	result1, fp
28ee8     08 4E 85 F1 | 	sub	fp, #8
28eec     00 FA 0D F2 | 	cmp	result1, #0 wz
28ef0     04 4E 05 A1 |  if_e	add	fp, #4
28ef4     A7 FA 01 AB |  if_e	rdlong	result1, fp
28ef8     04 4E 85 A1 |  if_e	sub	fp, #4
28efc     FD 00 68 AC |  if_e	wrlong	#0, result1
28f00                 | ' 
28f00                 | ' 
28f00                 | ' 
28f00                 | ' 
28f00                 | ' 		dp->obj.fs = 0;
28f00                 | ' #line 4633 "ff.c"
28f00                 | ' 	}
28f00                 | ' 	return res;
28f00     08 4E 05 F1 | 	add	fp, #8
28f04     A7 FA 01 FB | 	rdlong	result1, fp
28f08     08 4E 85 F1 | 	sub	fp, #8
28f0c     A7 F0 03 F6 | 	mov	ptra, fp
28f10     B2 00 A0 FD | 	call	#popregs_
28f14                 | _fatfs_cc_f_closedir_ret
28f14     2D 00 64 FD | 	ret
28f18                 | 
28f18                 | _fatfs_cc_f_readdir
28f18     00 4A 05 F6 | 	mov	COUNT_, #0
28f1c     A8 00 A0 FD | 	call	#pushregs_
28f20     14 F0 07 F1 | 	add	ptra, #20
28f24     04 4E 05 F1 | 	add	fp, #4
28f28     A7 12 62 FC | 	wrlong	arg01, fp
28f2c     04 4E 05 F1 | 	add	fp, #4
28f30     A7 14 62 FC | 	wrlong	arg02, fp
28f34     04 4E 85 F1 | 	sub	fp, #4
28f38     A7 12 02 FB | 	rdlong	arg01, fp
28f3c     0C 4E 05 F1 | 	add	fp, #12
28f40     A7 14 02 F6 | 	mov	arg02, fp
28f44     10 4E 85 F1 | 	sub	fp, #16
28f48     54 DD BF FD | 	call	#_fatfs_cc_validate
28f4c     0C 4E 05 F1 | 	add	fp, #12
28f50     A7 FA 61 FC | 	wrlong	result1, fp
28f54     0C 4E 85 F1 | 	sub	fp, #12
28f58     00 FA 0D F2 | 	cmp	result1, #0 wz
28f5c     BC 00 90 5D |  if_ne	jmp	#LR__4193
28f60     08 4E 05 F1 | 	add	fp, #8
28f64     A7 FA 09 FB | 	rdlong	result1, fp wz
28f68     08 4E 85 F1 | 	sub	fp, #8
28f6c     24 00 90 5D |  if_ne	jmp	#LR__4190
28f70     04 4E 05 F1 | 	add	fp, #4
28f74     A7 12 02 FB | 	rdlong	arg01, fp
28f78     04 4E 85 F1 | 	sub	fp, #4
28f7c     00 14 06 F6 | 	mov	arg02, #0
28f80     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
28f84     0C 4E 05 F1 | 	add	fp, #12
28f88     A7 FA 61 FC | 	wrlong	result1, fp
28f8c     0C 4E 85 F1 | 	sub	fp, #12
28f90     88 00 90 FD | 	jmp	#LR__4192
28f94                 | LR__4190
28f94     04 4E 05 F1 | 	add	fp, #4
28f98     A7 12 02 FB | 	rdlong	arg01, fp
28f9c     04 4E 85 F1 | 	sub	fp, #4
28fa0     00 14 06 F6 | 	mov	arg02, #0
28fa4     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
28fa8     0C 4E 05 F1 | 	add	fp, #12
28fac     A7 FA 61 FC | 	wrlong	result1, fp
28fb0     0C 4E 85 F1 | 	sub	fp, #12
28fb4     04 FA 0D F2 | 	cmp	result1, #4 wz
28fb8     0C 4E 05 A1 |  if_e	add	fp, #12
28fbc     A7 00 68 AC |  if_e	wrlong	#0, fp
28fc0     0C 4E 85 A1 |  if_e	sub	fp, #12
28fc4     0C 4E 05 F1 | 	add	fp, #12
28fc8     A7 FA 09 FB | 	rdlong	result1, fp wz
28fcc     0C 4E 85 F1 | 	sub	fp, #12
28fd0     48 00 90 5D |  if_ne	jmp	#LR__4191
28fd4     04 4E 05 F1 | 	add	fp, #4
28fd8     A7 12 02 FB | 	rdlong	arg01, fp
28fdc     04 4E 05 F1 | 	add	fp, #4
28fe0     A7 14 02 FB | 	rdlong	arg02, fp
28fe4     08 4E 85 F1 | 	sub	fp, #8
28fe8     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
28fec     04 4E 05 F1 | 	add	fp, #4
28ff0     A7 12 02 FB | 	rdlong	arg01, fp
28ff4     04 4E 85 F1 | 	sub	fp, #4
28ff8     00 14 06 F6 | 	mov	arg02, #0
28ffc     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
29000     0C 4E 05 F1 | 	add	fp, #12
29004     A7 FA 61 FC | 	wrlong	result1, fp
29008     0C 4E 85 F1 | 	sub	fp, #12
2900c     04 FA 0D F2 | 	cmp	result1, #4 wz
29010     0C 4E 05 A1 |  if_e	add	fp, #12
29014     A7 00 68 AC |  if_e	wrlong	#0, fp
29018     0C 4E 85 A1 |  if_e	sub	fp, #12
2901c                 | LR__4191
2901c                 | LR__4192
2901c                 | LR__4193
2901c                 | ' 			}
2901c                 | ' 			;
2901c                 | ' 		}
2901c                 | ' 	}
2901c                 | ' 	return res ;
2901c     0C 4E 05 F1 | 	add	fp, #12
29020     A7 FA 01 FB | 	rdlong	result1, fp
29024     0C 4E 85 F1 | 	sub	fp, #12
29028     A7 F0 03 F6 | 	mov	ptra, fp
2902c     B2 00 A0 FD | 	call	#popregs_
29030                 | _fatfs_cc_f_readdir_ret
29030     2D 00 64 FD | 	ret
29034                 | 
29034                 | _fatfs_cc_f_stat
29034     00 4A 05 F6 | 	mov	COUNT_, #0
29038     A8 00 A0 FD | 	call	#pushregs_
2903c     40 F0 07 F1 | 	add	ptra, #64
29040     04 4E 05 F1 | 	add	fp, #4
29044     A7 12 62 FC | 	wrlong	arg01, fp
29048     04 4E 05 F1 | 	add	fp, #4
2904c     A7 14 62 FC | 	wrlong	arg02, fp
29050     04 4E 85 F1 | 	sub	fp, #4
29054     A7 12 02 F6 | 	mov	arg01, fp
29058     0C 4E 05 F1 | 	add	fp, #12
2905c     A7 14 02 F6 | 	mov	arg02, fp
29060     10 4E 85 F1 | 	sub	fp, #16
29064     00 16 06 F6 | 	mov	arg03, #0
29068     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2906c     0C 4E 05 F1 | 	add	fp, #12
29070     A7 FA 61 FC | 	wrlong	result1, fp
29074     0C 4E 85 F1 | 	sub	fp, #12
29078     00 FA 0D F2 | 	cmp	result1, #0 wz
2907c     74 00 90 5D |  if_ne	jmp	#LR__4203
29080     10 4E 05 F1 | 	add	fp, #16
29084     A7 12 02 F6 | 	mov	arg01, fp
29088     0C 4E 85 F1 | 	sub	fp, #12
2908c     A7 14 02 FB | 	rdlong	arg02, fp
29090     04 4E 85 F1 | 	sub	fp, #4
29094     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
29098     0C 4E 05 F1 | 	add	fp, #12
2909c     A7 FA 61 FC | 	wrlong	result1, fp
290a0     0C 4E 85 F1 | 	sub	fp, #12
290a4     00 FA 0D F2 | 	cmp	result1, #0 wz
290a8     48 00 90 5D |  if_ne	jmp	#LR__4202
290ac     3B 4E 05 F1 | 	add	fp, #59
290b0     A7 FA C1 FA | 	rdbyte	result1, fp
290b4     3B 4E 85 F1 | 	sub	fp, #59
290b8     80 FA CD F7 | 	test	result1, #128 wz
290bc     0C 4E 05 51 |  if_ne	add	fp, #12
290c0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
290c4     0C 4E 85 51 |  if_ne	sub	fp, #12
290c8     28 00 90 5D |  if_ne	jmp	#LR__4201
290cc     08 4E 05 F1 | 	add	fp, #8
290d0     A7 FA 09 FB | 	rdlong	result1, fp wz
290d4     08 4E 85 F1 | 	sub	fp, #8
290d8     18 00 90 AD |  if_e	jmp	#LR__4200
290dc     10 4E 05 F1 | 	add	fp, #16
290e0     A7 12 02 F6 | 	mov	arg01, fp
290e4     08 4E 85 F1 | 	sub	fp, #8
290e8     A7 14 02 FB | 	rdlong	arg02, fp
290ec     08 4E 85 F1 | 	sub	fp, #8
290f0     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
290f4                 | LR__4200
290f4                 | LR__4201
290f4                 | LR__4202
290f4                 | LR__4203
290f4                 | ' 			}
290f4                 | ' 		}
290f4                 | ' 		;
290f4                 | ' 	}
290f4                 | ' 
290f4                 | ' 	return res ;
290f4     0C 4E 05 F1 | 	add	fp, #12
290f8     A7 FA 01 FB | 	rdlong	result1, fp
290fc     0C 4E 85 F1 | 	sub	fp, #12
29100     A7 F0 03 F6 | 	mov	ptra, fp
29104     B2 00 A0 FD | 	call	#popregs_
29108                 | _fatfs_cc_f_stat_ret
29108     2D 00 64 FD | 	ret
2910c                 | 
2910c                 | _fatfs_cc_f_unlink
2910c     00 4A 05 F6 | 	mov	COUNT_, #0
29110     A8 00 A0 FD | 	call	#pushregs_
29114     74 F0 07 F1 | 	add	ptra, #116
29118     04 4E 05 F1 | 	add	fp, #4
2911c     A7 12 62 FC | 	wrlong	arg01, fp
29120     68 4E 05 F1 | 	add	fp, #104
29124     A7 00 68 FC | 	wrlong	#0, fp
29128     68 4E 85 F1 | 	sub	fp, #104
2912c     A7 12 02 F6 | 	mov	arg01, fp
29130     6C 4E 05 F1 | 	add	fp, #108
29134     A7 14 02 F6 | 	mov	arg02, fp
29138     70 4E 85 F1 | 	sub	fp, #112
2913c     02 16 06 F6 | 	mov	arg03, #2
29140     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
29144     08 4E 05 F1 | 	add	fp, #8
29148     A7 FA 61 FC | 	wrlong	result1, fp
2914c     08 4E 85 F1 | 	sub	fp, #8
29150     00 FA 0D F2 | 	cmp	result1, #0 wz
29154     E4 01 90 5D |  if_ne	jmp	#LR__4218
29158     70 4E 05 F1 | 	add	fp, #112
2915c     A7 16 02 FB | 	rdlong	arg03, fp
29160     64 4E 85 F1 | 	sub	fp, #100
29164     A7 16 62 FC | 	wrlong	arg03, fp
29168     A7 12 02 F6 | 	mov	arg01, fp
2916c     08 4E 85 F1 | 	sub	fp, #8
29170     A7 14 02 FB | 	rdlong	arg02, fp
29174     04 4E 85 F1 | 	sub	fp, #4
29178     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2917c     08 4E 05 F1 | 	add	fp, #8
29180     A7 FA 61 FC | 	wrlong	result1, fp
29184     00 FA 4D F2 | 	cmps	result1, #0 wz
29188     08 4E 85 F1 | 	sub	fp, #8
2918c     AC 01 90 5D |  if_ne	jmp	#LR__4217
29190     37 4E 05 F1 | 	add	fp, #55
29194     A7 FA C1 FA | 	rdbyte	result1, fp
29198     37 4E 85 F1 | 	sub	fp, #55
2919c     80 FA CD F7 | 	test	result1, #128 wz
291a0     08 4E 05 51 |  if_ne	add	fp, #8
291a4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
291a8     08 4E 85 51 |  if_ne	sub	fp, #8
291ac     1C 00 90 5D |  if_ne	jmp	#LR__4210
291b0     12 4E 05 F1 | 	add	fp, #18
291b4     A7 FA C1 FA | 	rdbyte	result1, fp
291b8     12 4E 85 F1 | 	sub	fp, #18
291bc     01 FA CD F7 | 	test	result1, #1 wz
291c0     08 4E 05 51 |  if_ne	add	fp, #8
291c4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
291c8     08 4E 85 51 |  if_ne	sub	fp, #8
291cc                 | LR__4210
291cc     08 4E 05 F1 | 	add	fp, #8
291d0     A7 FA 09 FB | 	rdlong	result1, fp wz
291d4     08 4E 85 F1 | 	sub	fp, #8
291d8     C8 00 90 5D |  if_ne	jmp	#LR__4213
291dc     70 4E 05 F1 | 	add	fp, #112
291e0     A7 12 02 FB | 	rdlong	arg01, fp
291e4     48 4E 85 F1 | 	sub	fp, #72
291e8     A7 14 02 FB | 	rdlong	arg02, fp
291ec     28 4E 85 F1 | 	sub	fp, #40
291f0     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
291f4     6C 4E 05 F1 | 	add	fp, #108
291f8     A7 FA 61 FC | 	wrlong	result1, fp
291fc     5A 4E 85 F1 | 	sub	fp, #90
29200     A7 FA C1 FA | 	rdbyte	result1, fp
29204     12 4E 85 F1 | 	sub	fp, #18
29208     10 FA CD F7 | 	test	result1, #16 wz
2920c     94 00 90 AD |  if_e	jmp	#LR__4212
29210     70 4E 05 F1 | 	add	fp, #112
29214     A7 FA 01 FB | 	rdlong	result1, fp
29218     34 4E 85 F1 | 	sub	fp, #52
2921c     A7 FA 61 FC | 	wrlong	result1, fp
29220     30 4E 05 F1 | 	add	fp, #48
29224     A7 16 02 FB | 	rdlong	arg03, fp
29228     28 4E 85 F1 | 	sub	fp, #40
2922c     A7 16 62 FC | 	wrlong	arg03, fp
29230     08 4E 85 F1 | 	sub	fp, #8
29234     A7 12 02 F6 | 	mov	arg01, fp
29238     3C 4E 85 F1 | 	sub	fp, #60
2923c     00 14 06 F6 | 	mov	arg02, #0
29240     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
29244     08 4E 05 F1 | 	add	fp, #8
29248     A7 FA 61 FC | 	wrlong	result1, fp
2924c     08 4E 85 F1 | 	sub	fp, #8
29250     00 FA 0D F2 | 	cmp	result1, #0 wz
29254     4C 00 90 5D |  if_ne	jmp	#LR__4211
29258     3C 4E 05 F1 | 	add	fp, #60
2925c     A7 12 02 F6 | 	mov	arg01, fp
29260     3C 4E 85 F1 | 	sub	fp, #60
29264     00 14 06 F6 | 	mov	arg02, #0
29268     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2926c     08 4E 05 F1 | 	add	fp, #8
29270     A7 FA 61 FC | 	wrlong	result1, fp
29274     00 FA 4D F2 | 	cmps	result1, #0 wz
29278     08 4E 85 F1 | 	sub	fp, #8
2927c     08 4E 05 A1 |  if_e	add	fp, #8
29280     A7 0E 68 AC |  if_e	wrlong	#7, fp
29284     08 4E 85 A1 |  if_e	sub	fp, #8
29288     08 4E 05 F1 | 	add	fp, #8
2928c     A7 FA 01 FB | 	rdlong	result1, fp
29290     08 4E 85 F1 | 	sub	fp, #8
29294     04 FA 0D F2 | 	cmp	result1, #4 wz
29298     08 4E 05 A1 |  if_e	add	fp, #8
2929c     A7 00 68 AC |  if_e	wrlong	#0, fp
292a0     08 4E 85 A1 |  if_e	sub	fp, #8
292a4                 | LR__4211
292a4                 | LR__4212
292a4                 | LR__4213
292a4     08 4E 05 F1 | 	add	fp, #8
292a8     A7 FA 09 FB | 	rdlong	result1, fp wz
292ac     08 4E 85 F1 | 	sub	fp, #8
292b0     88 00 90 5D |  if_ne	jmp	#LR__4216
292b4     0C 4E 05 F1 | 	add	fp, #12
292b8     A7 12 02 F6 | 	mov	arg01, fp
292bc     0C 4E 85 F1 | 	sub	fp, #12
292c0     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
292c4     08 4E 05 F1 | 	add	fp, #8
292c8     A7 FA 61 FC | 	wrlong	result1, fp
292cc     08 4E 85 F1 | 	sub	fp, #8
292d0     00 FA 0D F2 | 	cmp	result1, #0 wz
292d4     38 00 90 5D |  if_ne	jmp	#LR__4214
292d8     6C 4E 05 F1 | 	add	fp, #108
292dc     A7 FA 09 FB | 	rdlong	result1, fp wz
292e0     6C 4E 85 F1 | 	sub	fp, #108
292e4     28 00 90 AD |  if_e	jmp	#LR__4214
292e8     0C 4E 05 F1 | 	add	fp, #12
292ec     A7 12 02 F6 | 	mov	arg01, fp
292f0     60 4E 05 F1 | 	add	fp, #96
292f4     A7 14 02 FB | 	rdlong	arg02, fp
292f8     6C 4E 85 F1 | 	sub	fp, #108
292fc     00 16 06 F6 | 	mov	arg03, #0
29300     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
29304     08 4E 05 F1 | 	add	fp, #8
29308     A7 FA 61 FC | 	wrlong	result1, fp
2930c     08 4E 85 F1 | 	sub	fp, #8
29310                 | LR__4214
29310     08 4E 05 F1 | 	add	fp, #8
29314     A7 FA 09 FB | 	rdlong	result1, fp wz
29318     08 4E 85 F1 | 	sub	fp, #8
2931c     1C 00 90 5D |  if_ne	jmp	#LR__4215
29320     70 4E 05 F1 | 	add	fp, #112
29324     A7 12 02 FB | 	rdlong	arg01, fp
29328     70 4E 85 F1 | 	sub	fp, #112
2932c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
29330     08 4E 05 F1 | 	add	fp, #8
29334     A7 FA 61 FC | 	wrlong	result1, fp
29338     08 4E 85 F1 | 	sub	fp, #8
2933c                 | LR__4215
2933c                 | LR__4216
2933c                 | LR__4217
2933c                 | LR__4218
2933c                 | ' 			}
2933c                 | ' 		}
2933c                 | ' 		;
2933c                 | ' 	}
2933c                 | ' 
2933c                 | ' 	return res ;
2933c     08 4E 05 F1 | 	add	fp, #8
29340     A7 FA 01 FB | 	rdlong	result1, fp
29344     08 4E 85 F1 | 	sub	fp, #8
29348     A7 F0 03 F6 | 	mov	ptra, fp
2934c     B2 00 A0 FD | 	call	#popregs_
29350                 | _fatfs_cc_f_unlink_ret
29350     2D 00 64 FD | 	ret
29354                 | 
29354                 | _fatfs_cc_f_mkdir
29354     00 4A 05 F6 | 	mov	COUNT_, #0
29358     A8 00 A0 FD | 	call	#pushregs_
2935c     5C F0 07 F1 | 	add	ptra, #92
29360     04 4E 05 F1 | 	add	fp, #4
29364     A7 12 62 FC | 	wrlong	arg01, fp
29368     A7 12 02 F6 | 	mov	arg01, fp
2936c     48 4E 05 F1 | 	add	fp, #72
29370     A7 14 02 F6 | 	mov	arg02, fp
29374     4C 4E 85 F1 | 	sub	fp, #76
29378     02 16 06 F6 | 	mov	arg03, #2
2937c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
29380     08 4E 05 F1 | 	add	fp, #8
29384     A7 FA 61 FC | 	wrlong	result1, fp
29388     08 4E 85 F1 | 	sub	fp, #8
2938c     00 FA 0D F2 | 	cmp	result1, #0 wz
29390     C4 02 90 5D |  if_ne	jmp	#LR__4225
29394     4C 4E 05 F1 | 	add	fp, #76
29398     A7 16 02 FB | 	rdlong	arg03, fp
2939c     40 4E 85 F1 | 	sub	fp, #64
293a0     A7 16 62 FC | 	wrlong	arg03, fp
293a4     A7 12 02 F6 | 	mov	arg01, fp
293a8     08 4E 85 F1 | 	sub	fp, #8
293ac     A7 14 02 FB | 	rdlong	arg02, fp
293b0     04 4E 85 F1 | 	sub	fp, #4
293b4     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
293b8     08 4E 05 F1 | 	add	fp, #8
293bc     A7 FA 61 FC | 	wrlong	result1, fp
293c0     00 FA 4D F2 | 	cmps	result1, #0 wz
293c4     08 4E 85 F1 | 	sub	fp, #8
293c8     08 4E 05 A1 |  if_e	add	fp, #8
293cc     A7 10 68 AC |  if_e	wrlong	#8, fp
293d0     08 4E 85 A1 |  if_e	sub	fp, #8
293d4     08 4E 05 F1 | 	add	fp, #8
293d8     A7 FA 01 FB | 	rdlong	result1, fp
293dc     08 4E 85 F1 | 	sub	fp, #8
293e0     04 FA 0D F2 | 	cmp	result1, #4 wz
293e4     70 02 90 5D |  if_ne	jmp	#LR__4224
293e8     4C 4E 05 F1 | 	add	fp, #76
293ec     A7 16 02 FB | 	rdlong	arg03, fp
293f0     10 4E 85 F1 | 	sub	fp, #16
293f4     A7 16 62 FC | 	wrlong	arg03, fp
293f8     A7 12 02 F6 | 	mov	arg01, fp
293fc     3C 4E 85 F1 | 	sub	fp, #60
29400     00 14 06 F6 | 	mov	arg02, #0
29404     04 AC BF FD | 	call	#_fatfs_cc_create_chain
29408     50 4E 05 F1 | 	add	fp, #80
2940c     A7 FA 61 FC | 	wrlong	result1, fp
29410     48 4E 85 F1 | 	sub	fp, #72
29414     A7 00 68 FC | 	wrlong	#0, fp
29418     48 4E 05 F1 | 	add	fp, #72
2941c     A7 FA 09 FB | 	rdlong	result1, fp wz
29420     50 4E 85 F1 | 	sub	fp, #80
29424     08 4E 05 A1 |  if_e	add	fp, #8
29428     A7 0E 68 AC |  if_e	wrlong	#7, fp
2942c     08 4E 85 A1 |  if_e	sub	fp, #8
29430     50 4E 05 F1 | 	add	fp, #80
29434     A7 FA 01 FB | 	rdlong	result1, fp
29438     50 4E 85 F1 | 	sub	fp, #80
2943c     01 FA 0D F2 | 	cmp	result1, #1 wz
29440     08 4E 05 A1 |  if_e	add	fp, #8
29444     A7 04 68 AC |  if_e	wrlong	#2, fp
29448     08 4E 85 A1 |  if_e	sub	fp, #8
2944c     50 4E 05 F1 | 	add	fp, #80
29450     A7 16 02 FB | 	rdlong	arg03, fp
29454     50 4E 85 F1 | 	sub	fp, #80
29458     FF FF 7F FF 
2945c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
29460     08 4E 05 A1 |  if_e	add	fp, #8
29464     A7 02 68 AC |  if_e	wrlong	#1, fp
29468     08 4E 85 A1 |  if_e	sub	fp, #8
2946c     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
29470     58 4E 05 F1 | 	add	fp, #88
29474     A7 FA 61 FC | 	wrlong	result1, fp
29478     50 4E 85 F1 | 	sub	fp, #80
2947c     A7 FA 09 FB | 	rdlong	result1, fp wz
29480     08 4E 85 F1 | 	sub	fp, #8
29484     1C 01 90 5D |  if_ne	jmp	#LR__4221
29488     4C 4E 05 F1 | 	add	fp, #76
2948c     A7 12 02 FB | 	rdlong	arg01, fp
29490     04 4E 05 F1 | 	add	fp, #4
29494     A7 14 02 FB | 	rdlong	arg02, fp
29498     50 4E 85 F1 | 	sub	fp, #80
2949c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
294a0     08 4E 05 F1 | 	add	fp, #8
294a4     A7 FA 61 FC | 	wrlong	result1, fp
294a8     00 FA 4D F2 | 	cmps	result1, #0 wz
294ac     08 4E 85 F1 | 	sub	fp, #8
294b0     F0 00 90 5D |  if_ne	jmp	#LR__4220
294b4     4C 4E 05 F1 | 	add	fp, #76
294b8     A7 12 02 FB | 	rdlong	arg01, fp
294bc     4C 4E 85 F1 | 	sub	fp, #76
294c0     34 12 06 F1 | 	add	arg01, #52
294c4     20 14 06 F6 | 	mov	arg02, #32
294c8     0B 16 06 F6 | 	mov	arg03, #11
294cc     98 00 A0 FD | 	call	#\builtin_bytefill_
294d0     4C 4E 05 F1 | 	add	fp, #76
294d4     A7 FA 01 FB | 	rdlong	result1, fp
294d8     34 FA 05 F1 | 	add	result1, #52
294dc     FD 5C 48 FC | 	wrbyte	#46, result1
294e0     A7 16 02 FB | 	rdlong	arg03, fp
294e4     3F 16 06 F1 | 	add	arg03, #63
294e8     0B 21 48 FC | 	wrbyte	#16, arg03
294ec     A7 12 02 FB | 	rdlong	arg01, fp
294f0     4A 12 06 F1 | 	add	arg01, #74
294f4     0C 4E 05 F1 | 	add	fp, #12
294f8     A7 14 02 FB | 	rdlong	arg02, fp
294fc     09 15 62 FC | 	wrlong	arg02, arg01
29500     0C 4E 85 F1 | 	sub	fp, #12
29504     A7 14 02 FB | 	rdlong	arg02, fp
29508     0A 13 02 F6 | 	mov	arg01, arg02
2950c     34 14 06 F1 | 	add	arg02, #52
29510     04 4E 05 F1 | 	add	fp, #4
29514     A7 16 02 FB | 	rdlong	arg03, fp
29518     50 4E 85 F1 | 	sub	fp, #80
2951c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
29520     4C 4E 05 F1 | 	add	fp, #76
29524     A7 14 02 FB | 	rdlong	arg02, fp
29528     0A 13 02 F6 | 	mov	arg01, arg02
2952c     54 12 06 F1 | 	add	arg01, #84
29530     4C 4E 85 F1 | 	sub	fp, #76
29534     34 14 06 F1 | 	add	arg02, #52
29538     20 16 06 F6 | 	mov	arg03, #32
2953c     D8 2C BF FD | 	call	#__system____builtin_memmove
29540     4C 4E 05 F1 | 	add	fp, #76
29544     A7 16 02 FB | 	rdlong	arg03, fp
29548     55 16 06 F1 | 	add	arg03, #85
2954c     0B 5D 48 FC | 	wrbyte	#46, arg03
29550     38 4E 85 F1 | 	sub	fp, #56
29554     A7 16 02 FB | 	rdlong	arg03, fp
29558     40 4E 05 F1 | 	add	fp, #64
2955c     A7 16 62 FC | 	wrlong	arg03, fp
29560     08 4E 85 F1 | 	sub	fp, #8
29564     A7 14 02 FB | 	rdlong	arg02, fp
29568     0A 13 02 F6 | 	mov	arg01, arg02
2956c     54 14 06 F1 | 	add	arg02, #84
29570     4C 4E 85 F1 | 	sub	fp, #76
29574     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
29578     4C 4E 05 F1 | 	add	fp, #76
2957c     A7 16 02 FB | 	rdlong	arg03, fp
29580     03 16 06 F1 | 	add	arg03, #3
29584     0B 03 48 FC | 	wrbyte	#1, arg03
29588     40 4E 85 F1 | 	sub	fp, #64
2958c     A7 12 02 F6 | 	mov	arg01, fp
29590     0C 4E 85 F1 | 	sub	fp, #12
29594     44 BA BF FD | 	call	#_fatfs_cc_dir_register
29598     08 4E 05 F1 | 	add	fp, #8
2959c     A7 FA 61 FC | 	wrlong	result1, fp
295a0     08 4E 85 F1 | 	sub	fp, #8
295a4                 | LR__4220
295a4                 | LR__4221
295a4     08 4E 05 F1 | 	add	fp, #8
295a8     A7 FA 09 FB | 	rdlong	result1, fp wz
295ac     08 4E 85 F1 | 	sub	fp, #8
295b0     88 00 90 5D |  if_ne	jmp	#LR__4222
295b4     28 4E 05 F1 | 	add	fp, #40
295b8     A7 12 02 FB | 	rdlong	arg01, fp
295bc     16 12 06 F1 | 	add	arg01, #22
295c0     30 4E 05 F1 | 	add	fp, #48
295c4     A7 14 02 FB | 	rdlong	arg02, fp
295c8     09 15 62 FC | 	wrlong	arg02, arg01
295cc     0C 4E 85 F1 | 	sub	fp, #12
295d0     A7 12 02 FB | 	rdlong	arg01, fp
295d4     24 4E 85 F1 | 	sub	fp, #36
295d8     A7 14 02 FB | 	rdlong	arg02, fp
295dc     28 4E 05 F1 | 	add	fp, #40
295e0     A7 16 02 FB | 	rdlong	arg03, fp
295e4     50 4E 85 F1 | 	sub	fp, #80
295e8     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
295ec     28 4E 05 F1 | 	add	fp, #40
295f0     A7 FA 01 FB | 	rdlong	result1, fp
295f4     0B FA 05 F1 | 	add	result1, #11
295f8     FD 20 48 FC | 	wrbyte	#16, result1
295fc     24 4E 05 F1 | 	add	fp, #36
29600     A7 FA 01 FB | 	rdlong	result1, fp
29604     03 FA 05 F1 | 	add	result1, #3
29608     FD 02 48 FC | 	wrbyte	#1, result1
2960c     44 4E 85 F1 | 	sub	fp, #68
29610     A7 FA 09 FB | 	rdlong	result1, fp wz
29614     08 4E 85 F1 | 	sub	fp, #8
29618     3C 00 90 5D |  if_ne	jmp	#LR__4223
2961c     4C 4E 05 F1 | 	add	fp, #76
29620     A7 12 02 FB | 	rdlong	arg01, fp
29624     4C 4E 85 F1 | 	sub	fp, #76
29628     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2962c     08 4E 05 F1 | 	add	fp, #8
29630     A7 FA 61 FC | 	wrlong	result1, fp
29634     08 4E 85 F1 | 	sub	fp, #8
29638     1C 00 90 FD | 	jmp	#LR__4223
2963c                 | LR__4222
2963c     3C 4E 05 F1 | 	add	fp, #60
29640     A7 12 02 F6 | 	mov	arg01, fp
29644     14 4E 05 F1 | 	add	fp, #20
29648     A7 14 02 FB | 	rdlong	arg02, fp
2964c     50 4E 85 F1 | 	sub	fp, #80
29650     00 16 06 F6 | 	mov	arg03, #0
29654     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
29658                 | LR__4223
29658                 | LR__4224
29658                 | LR__4225
29658                 | ' 				remove_chain(&sobj, dcl, 0);
29658                 | ' 			}
29658                 | ' 		}
29658                 | ' 		;
29658                 | ' 	}
29658                 | ' 
29658                 | ' 	return res ;
29658     08 4E 05 F1 | 	add	fp, #8
2965c     A7 FA 01 FB | 	rdlong	result1, fp
29660     08 4E 85 F1 | 	sub	fp, #8
29664     A7 F0 03 F6 | 	mov	ptra, fp
29668     B2 00 A0 FD | 	call	#popregs_
2966c                 | _fatfs_cc_f_mkdir_ret
2966c     2D 00 64 FD | 	ret
29670                 | 
29670                 | _fatfs_cc_f_rename
29670     01 4A 05 F6 | 	mov	COUNT_, #1
29674     A8 00 A0 FD | 	call	#pushregs_
29678     9C F0 07 F1 | 	add	ptra, #156
2967c     04 4E 05 F1 | 	add	fp, #4
29680     A7 12 62 FC | 	wrlong	arg01, fp
29684     04 4E 05 F1 | 	add	fp, #4
29688     A7 14 62 FC | 	wrlong	arg02, fp
2968c     A7 12 02 F6 | 	mov	arg01, fp
29690     08 4E 85 F1 | 	sub	fp, #8
29694     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
29698     04 4E 05 F1 | 	add	fp, #4
2969c     A7 12 02 F6 | 	mov	arg01, fp
296a0     6C 4E 05 F1 | 	add	fp, #108
296a4     A7 14 02 F6 | 	mov	arg02, fp
296a8     70 4E 85 F1 | 	sub	fp, #112
296ac     02 16 06 F6 | 	mov	arg03, #2
296b0     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
296b4     0C 4E 05 F1 | 	add	fp, #12
296b8     A7 FA 61 FC | 	wrlong	result1, fp
296bc     0C 4E 85 F1 | 	sub	fp, #12
296c0     00 FA 0D F2 | 	cmp	result1, #0 wz
296c4     44 03 90 5D |  if_ne	jmp	#LR__4243
296c8     70 4E 05 F1 | 	add	fp, #112
296cc     A7 16 02 FB | 	rdlong	arg03, fp
296d0     60 4E 85 F1 | 	sub	fp, #96
296d4     A7 16 62 FC | 	wrlong	arg03, fp
296d8     A7 12 02 F6 | 	mov	arg01, fp
296dc     0C 4E 85 F1 | 	sub	fp, #12
296e0     A7 14 02 FB | 	rdlong	arg02, fp
296e4     04 4E 85 F1 | 	sub	fp, #4
296e8     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
296ec     0C 4E 05 F1 | 	add	fp, #12
296f0     A7 FA 61 FC | 	wrlong	result1, fp
296f4     00 FA 4D F2 | 	cmps	result1, #0 wz
296f8     0C 4E 85 F1 | 	sub	fp, #12
296fc     1C 00 90 5D |  if_ne	jmp	#LR__4230
29700     3B 4E 05 F1 | 	add	fp, #59
29704     A7 FA C1 FA | 	rdbyte	result1, fp
29708     3B 4E 85 F1 | 	sub	fp, #59
2970c     A0 FA CD F7 | 	test	result1, #160 wz
29710     0C 4E 05 51 |  if_ne	add	fp, #12
29714     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29718     0C 4E 85 51 |  if_ne	sub	fp, #12
2971c                 | LR__4230
2971c     0C 4E 05 F1 | 	add	fp, #12
29720     A7 1E 0A FB | 	rdlong	local01, fp wz
29724     0C 4E 85 F1 | 	sub	fp, #12
29728     E0 02 90 5D |  if_ne	jmp	#LR__4242
2972c     74 4E 05 F1 | 	add	fp, #116
29730     A7 12 02 F6 | 	mov	arg01, fp
29734     48 4E 85 F1 | 	sub	fp, #72
29738     A7 14 02 FB | 	rdlong	arg02, fp
2973c     2C 4E 85 F1 | 	sub	fp, #44
29740     20 16 06 F6 | 	mov	arg03, #32
29744     D0 2A BF FD | 	call	#__system____builtin_memmove
29748     40 4E 05 F1 | 	add	fp, #64
2974c     A7 12 02 F6 | 	mov	arg01, fp
29750     30 4E 85 F1 | 	sub	fp, #48
29754     A7 14 02 F6 | 	mov	arg02, fp
29758     10 4E 85 F1 | 	sub	fp, #16
2975c     30 16 06 F6 | 	mov	arg03, #48
29760     B4 2A BF FD | 	call	#__system____builtin_memmove
29764     40 4E 05 F1 | 	add	fp, #64
29768     A7 12 02 F6 | 	mov	arg01, fp
2976c     38 4E 85 F1 | 	sub	fp, #56
29770     A7 14 02 FB | 	rdlong	arg02, fp
29774     08 4E 85 F1 | 	sub	fp, #8
29778     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2977c     0C 4E 05 F1 | 	add	fp, #12
29780     A7 FA 61 FC | 	wrlong	result1, fp
29784     0C 4E 85 F1 | 	sub	fp, #12
29788     00 FA 0D F2 | 	cmp	result1, #0 wz
2978c     4C 00 90 5D |  if_ne	jmp	#LR__4233
29790     48 4E 05 F1 | 	add	fp, #72
29794     A7 FA 01 FB | 	rdlong	result1, fp
29798     30 4E 85 F1 | 	sub	fp, #48
2979c     A7 16 02 FB | 	rdlong	arg03, fp
297a0     18 4E 85 F1 | 	sub	fp, #24
297a4     0B FB 09 F2 | 	cmp	result1, arg03 wz
297a8     20 00 90 5D |  if_ne	jmp	#LR__4231
297ac     50 4E 05 F1 | 	add	fp, #80
297b0     A7 FA 01 FB | 	rdlong	result1, fp
297b4     30 4E 85 F1 | 	sub	fp, #48
297b8     A7 16 02 FB | 	rdlong	arg03, fp
297bc     20 4E 85 F1 | 	sub	fp, #32
297c0     0B FB 09 F2 | 	cmp	result1, arg03 wz
297c4     04 1E 06 A6 |  if_e	mov	local01, #4
297c8     04 00 90 AD |  if_e	jmp	#LR__4232
297cc                 | LR__4231
297cc     08 1E 06 F6 | 	mov	local01, #8
297d0                 | LR__4232
297d0     0C 4E 05 F1 | 	add	fp, #12
297d4     A7 1E 62 FC | 	wrlong	local01, fp
297d8     0C 4E 85 F1 | 	sub	fp, #12
297dc                 | LR__4233
297dc     0C 4E 05 F1 | 	add	fp, #12
297e0     A7 1E 02 FB | 	rdlong	local01, fp
297e4     0C 4E 85 F1 | 	sub	fp, #12
297e8     04 1E 0E F2 | 	cmp	local01, #4 wz
297ec     CC 01 90 5D |  if_ne	jmp	#LR__4239
297f0     40 4E 05 F1 | 	add	fp, #64
297f4     A7 12 02 F6 | 	mov	arg01, fp
297f8     40 4E 85 F1 | 	sub	fp, #64
297fc     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
29800     0C 4E 05 F1 | 	add	fp, #12
29804     A7 FA 61 FC | 	wrlong	result1, fp
29808     0C 4E 85 F1 | 	sub	fp, #12
2980c     00 FA 0D F2 | 	cmp	result1, #0 wz
29810     A8 01 90 5D |  if_ne	jmp	#LR__4238
29814     5C 4E 05 F1 | 	add	fp, #92
29818     A7 12 02 FB | 	rdlong	arg01, fp
2981c     38 4E 05 F1 | 	add	fp, #56
29820     A7 12 62 FC | 	wrlong	arg01, fp
29824     0D 12 06 F1 | 	add	arg01, #13
29828     20 4E 85 F1 | 	sub	fp, #32
2982c     A7 14 02 F6 | 	mov	arg02, fp
29830     74 4E 85 F1 | 	sub	fp, #116
29834     0D 14 06 F1 | 	add	arg02, #13
29838     13 16 06 F6 | 	mov	arg03, #19
2983c     D8 29 BF FD | 	call	#__system____builtin_memmove
29840     94 4E 05 F1 | 	add	fp, #148
29844     A7 1E 02 FB | 	rdlong	local01, fp
29848     15 4E 85 F1 | 	sub	fp, #21
2984c     A7 FA C1 FA | 	rdbyte	result1, fp
29850     0B 1E 06 F1 | 	add	local01, #11
29854     0F FB 41 FC | 	wrbyte	result1, local01
29858     15 4E 05 F1 | 	add	fp, #21
2985c     A7 1E 02 FB | 	rdlong	local01, fp
29860     94 4E 85 F1 | 	sub	fp, #148
29864     0B 1E 06 F1 | 	add	local01, #11
29868     0F 1F C2 FA | 	rdbyte	local01, local01
2986c     10 1E CE F7 | 	test	local01, #16 wz
29870     24 00 90 5D |  if_ne	jmp	#LR__4234
29874     94 4E 05 F1 | 	add	fp, #148
29878     A7 FA 01 FB | 	rdlong	result1, fp
2987c     FD 1E 02 F6 | 	mov	local01, result1
29880     94 4E 85 F1 | 	sub	fp, #148
29884     0B FA 05 F1 | 	add	result1, #11
29888     FD FA C1 FA | 	rdbyte	result1, result1
2988c     20 FA 45 F5 | 	or	result1, #32
29890     0B 1E 06 F1 | 	add	local01, #11
29894     0F FB 41 FC | 	wrbyte	result1, local01
29898                 | LR__4234
29898     70 4E 05 F1 | 	add	fp, #112
2989c     A7 1E 02 FB | 	rdlong	local01, fp
298a0     03 1E 06 F1 | 	add	local01, #3
298a4     0F 03 48 FC | 	wrbyte	#1, local01
298a8     24 4E 05 F1 | 	add	fp, #36
298ac     A7 1E 02 FB | 	rdlong	local01, fp
298b0     94 4E 85 F1 | 	sub	fp, #148
298b4     0B 1E 06 F1 | 	add	local01, #11
298b8     0F 1F C2 FA | 	rdbyte	local01, local01
298bc     10 1E CE F7 | 	test	local01, #16 wz
298c0     F8 00 90 AD |  if_e	jmp	#LR__4237
298c4     18 4E 05 F1 | 	add	fp, #24
298c8     A7 16 02 FB | 	rdlong	arg03, fp
298cc     30 4E 05 F1 | 	add	fp, #48
298d0     A7 1E 02 FB | 	rdlong	local01, fp
298d4     48 4E 85 F1 | 	sub	fp, #72
298d8     0F 17 0A F2 | 	cmp	arg03, local01 wz
298dc     DC 00 90 AD |  if_e	jmp	#LR__4237
298e0     70 4E 05 F1 | 	add	fp, #112
298e4     A7 12 02 FB | 	rdlong	arg01, fp
298e8     09 1F 02 F6 | 	mov	local01, arg01
298ec     24 4E 05 F1 | 	add	fp, #36
298f0     A7 14 02 FB | 	rdlong	arg02, fp
298f4     94 4E 85 F1 | 	sub	fp, #148
298f8     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
298fc     FD 14 02 F6 | 	mov	arg02, result1
29900     0F 13 02 F6 | 	mov	arg01, local01
29904     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
29908     98 4E 05 F1 | 	add	fp, #152
2990c     A7 FA 61 FC | 	wrlong	result1, fp
29910     00 FA 4D F2 | 	cmps	result1, #0 wz
29914     98 4E 85 F1 | 	sub	fp, #152
29918     0C 4E 05 A1 |  if_e	add	fp, #12
2991c     A7 04 68 AC |  if_e	wrlong	#2, fp
29920     0C 4E 85 A1 |  if_e	sub	fp, #12
29924     94 00 90 AD |  if_e	jmp	#LR__4236
29928     70 4E 05 F1 | 	add	fp, #112
2992c     A7 12 02 FB | 	rdlong	arg01, fp
29930     28 4E 05 F1 | 	add	fp, #40
29934     A7 14 02 FB | 	rdlong	arg02, fp
29938     98 4E 85 F1 | 	sub	fp, #152
2993c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
29940     0C 4E 05 F1 | 	add	fp, #12
29944     A7 FA 61 FC | 	wrlong	result1, fp
29948     64 4E 05 F1 | 	add	fp, #100
2994c     A7 1E 02 FB | 	rdlong	local01, fp
29950     54 1E 06 F1 | 	add	local01, #84
29954     24 4E 05 F1 | 	add	fp, #36
29958     A7 1E 62 FC | 	wrlong	local01, fp
2995c     88 4E 85 F1 | 	sub	fp, #136
29960     A7 1E 0A FB | 	rdlong	local01, fp wz
29964     0C 4E 85 F1 | 	sub	fp, #12
29968     50 00 90 5D |  if_ne	jmp	#LR__4235
2996c     94 4E 05 F1 | 	add	fp, #148
29970     A7 1E 02 FB | 	rdlong	local01, fp
29974     94 4E 85 F1 | 	sub	fp, #148
29978     01 1E 06 F1 | 	add	local01, #1
2997c     0F 1F C2 FA | 	rdbyte	local01, local01
29980     2E 1E 0E F2 | 	cmp	local01, #46 wz
29984     34 00 90 5D |  if_ne	jmp	#LR__4235
29988     70 4E 05 F1 | 	add	fp, #112
2998c     A7 12 02 FB | 	rdlong	arg01, fp
29990     24 4E 05 F1 | 	add	fp, #36
29994     A7 14 02 FB | 	rdlong	arg02, fp
29998     4C 4E 85 F1 | 	sub	fp, #76
2999c     A7 16 02 FB | 	rdlong	arg03, fp
299a0     48 4E 85 F1 | 	sub	fp, #72
299a4     50 AD BF FD | 	call	#_fatfs_cc_st_clust
299a8     70 4E 05 F1 | 	add	fp, #112
299ac     A7 1E 02 FB | 	rdlong	local01, fp
299b0     70 4E 85 F1 | 	sub	fp, #112
299b4     03 1E 06 F1 | 	add	local01, #3
299b8     0F 03 48 FC | 	wrbyte	#1, local01
299bc                 | LR__4235
299bc                 | LR__4236
299bc                 | LR__4237
299bc                 | LR__4238
299bc                 | LR__4239
299bc     0C 4E 05 F1 | 	add	fp, #12
299c0     A7 1E 0A FB | 	rdlong	local01, fp wz
299c4     0C 4E 85 F1 | 	sub	fp, #12
299c8     40 00 90 5D |  if_ne	jmp	#LR__4241
299cc     10 4E 05 F1 | 	add	fp, #16
299d0     A7 12 02 F6 | 	mov	arg01, fp
299d4     10 4E 85 F1 | 	sub	fp, #16
299d8     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
299dc     0C 4E 05 F1 | 	add	fp, #12
299e0     A7 FA 61 FC | 	wrlong	result1, fp
299e4     0C 4E 85 F1 | 	sub	fp, #12
299e8     00 FA 0D F2 | 	cmp	result1, #0 wz
299ec     1C 00 90 5D |  if_ne	jmp	#LR__4240
299f0     70 4E 05 F1 | 	add	fp, #112
299f4     A7 12 02 FB | 	rdlong	arg01, fp
299f8     70 4E 85 F1 | 	sub	fp, #112
299fc     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
29a00     0C 4E 05 F1 | 	add	fp, #12
29a04     A7 FA 61 FC | 	wrlong	result1, fp
29a08     0C 4E 85 F1 | 	sub	fp, #12
29a0c                 | LR__4240
29a0c                 | LR__4241
29a0c                 | LR__4242
29a0c                 | LR__4243
29a0c                 | ' 					res = sync_fs(fs);
29a0c                 | ' 				}
29a0c                 | ' 			}
29a0c                 | ' 
29a0c                 | ' 		}
29a0c                 | ' 		;
29a0c                 | ' 	}
29a0c                 | ' 
29a0c                 | ' 	return res ;
29a0c     0C 4E 05 F1 | 	add	fp, #12
29a10     A7 FA 01 FB | 	rdlong	result1, fp
29a14     0C 4E 85 F1 | 	sub	fp, #12
29a18     A7 F0 03 F6 | 	mov	ptra, fp
29a1c     B2 00 A0 FD | 	call	#popregs_
29a20                 | _fatfs_cc_f_rename_ret
29a20     2D 00 64 FD | 	ret
29a24                 | 
29a24                 | _fatfs_cc_time
29a24     00 4A 05 F6 | 	mov	COUNT_, #0
29a28     A8 00 A0 FD | 	call	#pushregs_
29a2c     14 F0 07 F1 | 	add	ptra, #20
29a30     04 4E 05 F1 | 	add	fp, #4
29a34     A7 12 62 FC | 	wrlong	arg01, fp
29a38     04 4E 05 F1 | 	add	fp, #4
29a3c     A7 12 02 F6 | 	mov	arg01, fp
29a40     08 4E 85 F1 | 	sub	fp, #8
29a44     00 14 06 F6 | 	mov	arg02, #0
29a48     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
29a4c     08 4E 05 F1 | 	add	fp, #8
29a50     A7 FA 01 FB | 	rdlong	result1, fp
29a54     08 4E 05 F1 | 	add	fp, #8
29a58     A7 FA 61 FC | 	wrlong	result1, fp
29a5c     0C 4E 85 F1 | 	sub	fp, #12
29a60     A7 FA 09 FB | 	rdlong	result1, fp wz
29a64     04 4E 85 F1 | 	sub	fp, #4
29a68     18 00 90 AD |  if_e	jmp	#LR__4250
29a6c     04 4E 05 F1 | 	add	fp, #4
29a70     A7 FA 01 FB | 	rdlong	result1, fp
29a74     0C 4E 05 F1 | 	add	fp, #12
29a78     A7 14 02 FB | 	rdlong	arg02, fp
29a7c     10 4E 85 F1 | 	sub	fp, #16
29a80     FD 14 62 FC | 	wrlong	arg02, result1
29a84                 | LR__4250
29a84                 | '         *tp = now;
29a84                 | '     return now;
29a84     10 4E 05 F1 | 	add	fp, #16
29a88     A7 FA 01 FB | 	rdlong	result1, fp
29a8c     10 4E 85 F1 | 	sub	fp, #16
29a90     A7 F0 03 F6 | 	mov	ptra, fp
29a94     B2 00 A0 FD | 	call	#popregs_
29a98                 | _fatfs_cc_time_ret
29a98     2D 00 64 FD | 	ret
29a9c                 | 
29a9c                 | _fatfs_cc_mktime
29a9c     06 4A 05 F6 | 	mov	COUNT_, #6
29aa0     A8 00 A0 FD | 	call	#pushregs_
29aa4     09 1F 02 F6 | 	mov	local01, arg01
29aa8     14 1E 06 F1 | 	add	local01, #20
29aac     0F 13 02 FB | 	rdlong	arg01, local01
29ab0     14 1E 86 F1 | 	sub	local01, #20
29ab4     46 12 56 F2 | 	cmps	arg01, #70 wc
29ab8                 | '                 return (time_t) -1;
29ab8     01 FA 65 C6 |  if_b	neg	result1, #1
29abc     7C 01 90 CD |  if_b	jmp	#LR__4264
29ac0     03 00 00 FF 
29ac4     6C 21 06 F6 | 	mov	local02, ##1900
29ac8     14 1E 06 F1 | 	add	local01, #20
29acc     0F FB 01 FB | 	rdlong	result1, local01
29ad0     FD 20 02 F1 | 	add	local02, result1
29ad4     08 1E 86 F1 | 	sub	local01, #8
29ad8     0F 23 02 FB | 	rdlong	local03, local01
29adc     01 22 86 F1 | 	sub	local03, #1
29ae0     04 1E 06 F1 | 	add	local01, #4
29ae4     0F 13 02 FB | 	rdlong	arg01, local01
29ae8     10 1E 86 F1 | 	sub	local01, #16
29aec     02 12 66 F0 | 	shl	arg01, #2
29af0     02 00 00 FF 
29af4     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
29af8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29afc     09 FB 01 FB | 	rdlong	result1, arg01
29b00     FD 22 02 F1 | 	add	local03, result1
29b04     10 13 02 F6 | 	mov	arg01, local02
29b08     02 00 00 FF 
29b0c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
29b10     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
29b14     00 FA 0D F2 | 	cmp	result1, #0 wz
29b18     1C 00 90 AD |  if_e	jmp	#LR__4260
29b1c     00 24 06 F6 | 	mov	local04, #0
29b20     10 1E 06 F1 | 	add	local01, #16
29b24     0F FB 01 FB | 	rdlong	result1, local01
29b28     10 1E 86 F1 | 	sub	local01, #16
29b2c     02 FA 55 F2 | 	cmps	result1, #2 wc
29b30     01 24 06 36 |  if_ae	mov	local04, #1
29b34     04 00 90 FD | 	jmp	#LR__4261
29b38                 | LR__4260
29b38     00 24 06 F6 | 	mov	local04, #0
29b3c                 | LR__4261
29b3c     04 1E 06 F1 | 	add	local01, #4
29b40     0F FB 01 FB | 	rdlong	result1, local01
29b44     04 1E 86 F1 | 	sub	local01, #4
29b48     0F 27 02 FB | 	rdlong	local05, local01
29b4c     08 1E 06 F1 | 	add	local01, #8
29b50     0F 13 02 FB | 	rdlong	arg01, local01
29b54     07 00 00 FF 
29b58     10 12 06 FD | 	qmul	arg01, ##3600
29b5c     12 23 02 F1 | 	add	local03, local04
29b60     FD 24 02 F6 | 	mov	local04, result1
29b64     04 24 66 F0 | 	shl	local04, #4
29b68     FD 24 82 F1 | 	sub	local04, result1
29b6c     02 24 66 F0 | 	shl	local04, #2
29b70     12 27 02 F1 | 	add	local05, local04
29b74     08 1E 86 F1 | 	sub	local01, #8
29b78     18 24 62 FD | 	getqx	local04
29b7c     A8 00 00 FF 
29b80     80 23 06 FD | 	qmul	local03, ##86400
29b84     12 27 02 F1 | 	add	local05, local04
29b88     10 23 02 F6 | 	mov	local03, local02
29b8c     03 00 00 FF 
29b90     B2 23 86 F1 | 	sub	local03, ##1970
29b94     18 24 62 FD | 	getqx	local04
29b98     99 F0 00 FF 
29b9c     80 23 06 FD | 	qmul	local03, ##31536000
29ba0     12 27 02 F1 | 	add	local05, local04
29ba4     10 23 02 F6 | 	mov	local03, local02
29ba8     03 00 00 FF 
29bac     B1 23 86 F1 | 	sub	local03, ##1969
29bb0     11 29 52 F6 | 	abs	local06, local03 wc
29bb4     02 28 46 F0 | 	shr	local06, #2
29bb8     14 29 82 F6 | 	negc	local06, local06
29bbc     03 00 00 FF 
29bc0     D1 21 56 F2 | 	cmps	local02, ##2001 wc
29bc4     18 24 62 FD | 	getqx	local04
29bc8     12 27 02 F1 | 	add	local05, local04
29bcc     18 00 90 CD |  if_b	jmp	#LR__4262
29bd0     03 00 00 FF 
29bd4     D0 21 86 F1 | 	sub	local02, ##2000
29bd8     10 25 52 F6 | 	abs	local04, local02 wc
29bdc     64 24 16 FD | 	qdiv	local04, #100
29be0     18 24 62 FD | 	getqx	local04
29be4     12 29 A2 F3 | 	sumnc	local06, local04
29be8                 | LR__4262
29be8     A8 00 00 FF 
29bec     80 29 06 FD | 	qmul	local06, ##86400
29bf0     18 28 62 FD | 	getqx	local06
29bf4     14 27 02 F1 | 	add	local05, local06
29bf8     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
29bfc     02 00 00 FF 
29c00     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
29c04     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
29c08     14 27 02 F1 | 	add	local05, local06
29c0c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
29c10     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
29c14     02 00 00 FF 
29c18     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
29c1c     01 22 0E F2 | 	cmp	local03, #1 wz
29c20     14 00 90 5D |  if_ne	jmp	#LR__4263
29c24     0F 13 02 F6 | 	mov	arg01, local01
29c28     DC 19 B0 FD | 	call	#_fatfs_cc___indst
29c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
29c30     07 00 00 5F 
29c34     10 26 86 51 |  if_ne	sub	local05, ##3600
29c38                 | LR__4263
29c38                 | '                 s -=  (3600L) ;
29c38                 | ' 
29c38                 | '         return s;
29c38     13 FB 01 F6 | 	mov	result1, local05
29c3c                 | LR__4264
29c3c     A7 F0 03 F6 | 	mov	ptra, fp
29c40     B2 00 A0 FD | 	call	#popregs_
29c44                 | _fatfs_cc_mktime_ret
29c44     2D 00 64 FD | 	ret
29c48                 | 
29c48                 | _fatfs_cc__gmtime_r
29c48     03 4A 05 F6 | 	mov	COUNT_, #3
29c4c     A8 00 A0 FD | 	call	#pushregs_
29c50     09 1F 02 FB | 	rdlong	local01, arg01
29c54     A8 00 00 FF 
29c58     80 1F 16 FD | 	qdiv	local01, ##86400
29c5c     18 FA 61 FD | 	getqx	result1
29c60     04 FA 05 F1 | 	add	result1, #4
29c64     07 FA 15 FD | 	qdiv	result1, #7
29c68     18 14 06 F1 | 	add	arg02, #24
29c6c     D1 7F 27 FF 
29c70     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
29c74     D1 7F 27 3F 
29c78     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
29c7c     03 00 00 3F 
29c80     DC 21 06 36 |  if_ae	mov	local02, ##2012
29c84     03 00 00 CF 
29c88     B2 21 06 C6 |  if_b	mov	local02, ##1970
29c8c                 | ' 	  year = 1970;
29c8c                 | ' 	}
29c8c                 | ' 
29c8c                 | ' 	for(;;) {
29c8c     19 FA 61 FD | 	getqy	result1
29c90     0A FB 61 FC | 	wrlong	result1, arg02
29c94     18 14 86 F1 | 	sub	arg02, #24
29c98                 | LR__4270
29c98     10 13 02 F6 | 	mov	arg01, local02
29c9c     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
29ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ca4     42 F1 00 5F 
29ca8     00 23 06 56 |  if_ne	mov	local03, ##31622400
29cac     99 F0 00 AF 
29cb0     80 23 06 A6 |  if_e	mov	local03, ##31536000
29cb4     11 1F 12 F2 | 	cmp	local01, local03 wc
29cb8                 | ' 	    break;
29cb8     01 20 06 31 |  if_ae	add	local02, #1
29cbc     11 1F 82 31 |  if_ae	sub	local01, local03
29cc0     D4 FF 9F 3D |  if_ae	jmp	#LR__4270
29cc4     A8 00 00 FF 
29cc8     80 1F 16 FD | 	qdiv	local01, ##86400
29ccc     10 23 02 F6 | 	mov	local03, local02
29cd0     03 00 00 FF 
29cd4     6C 23 86 F1 | 	sub	local03, ##1900
29cd8     14 14 06 F1 | 	add	arg02, #20
29cdc     0A 23 62 FC | 	wrlong	local03, arg02
29ce0     08 14 06 F1 | 	add	arg02, #8
29ce4     10 13 02 F6 | 	mov	arg01, local02
29ce8     18 20 62 FD | 	getqx	local02
29cec     0A 21 62 FC | 	wrlong	local02, arg02
29cf0     1C 14 86 F1 | 	sub	arg02, #28
29cf4     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
29cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
29cfc     1D 22 06 56 |  if_ne	mov	local03, #29
29d00     1C 22 06 A6 |  if_e	mov	local03, #28
29d04     02 00 00 FF 
29d08     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
29d0c     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
29d10     02 00 00 FF 
29d14     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
29d18                 | ' 
29d18                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
29d18                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
29d18     00 12 06 F6 | 	mov	arg01, #0
29d1c     97 2A 48 FB | 	callpa	#(@LR__4272-@LR__4271)>>2,fcache_load_ptr_
29d20                 | LR__4271
29d20     09 23 02 F6 | 	mov	local03, arg01
29d24     02 22 66 F0 | 	shl	local03, #2
29d28     02 00 00 FF 
29d2c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
29d30     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
29d34     11 23 02 FB | 	rdlong	local03, local03
29d38     11 21 52 F2 | 	cmps	local02, local03 wc
29d3c     02 00 00 FF 
29d40     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
29d44     2C 00 90 CD |  if_b	jmp	#LR__4273
29d48     09 23 02 F6 | 	mov	local03, arg01
29d4c     02 22 66 F0 | 	shl	local03, #2
29d50     02 00 00 FF 
29d54     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
29d58     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
29d5c     11 23 02 FB | 	rdlong	local03, local03
29d60     11 21 82 F1 | 	sub	local02, local03
29d64     01 12 06 F1 | 	add	arg01, #1
29d68     02 00 00 FF 
29d6c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
29d70     AC FF 9F FD | 	jmp	#LR__4271
29d74                 | LR__4272
29d74                 | LR__4273
29d74     A8 00 00 FF 
29d78     80 1F 16 FD | 	qdiv	local01, ##86400
29d7c     10 14 06 F1 | 	add	arg02, #16
29d80     0A 13 62 FC | 	wrlong	arg01, arg02
29d84     01 20 06 F1 | 	add	local02, #1
29d88     04 14 86 F1 | 	sub	arg02, #4
29d8c     0A 21 62 FC | 	wrlong	local02, arg02
29d90     19 1E 62 FD | 	getqy	local01
29d94     07 00 00 FF 
29d98     10 1E 16 FD | 	qdiv	local01, ##3600
29d9c     18 22 62 FD | 	getqx	local03
29da0     07 00 00 FF 
29da4     10 1E 16 FD | 	qdiv	local01, ##3600
29da8     04 14 86 F1 | 	sub	arg02, #4
29dac     0A 23 62 FC | 	wrlong	local03, arg02
29db0     19 1E 62 FD | 	getqy	local01
29db4     3C 1E 16 FD | 	qdiv	local01, #60
29db8     18 22 62 FD | 	getqx	local03
29dbc     3C 1E 16 FD | 	qdiv	local01, #60
29dc0     04 14 86 F1 | 	sub	arg02, #4
29dc4     0A 23 62 FC | 	wrlong	local03, arg02
29dc8     04 14 86 F1 | 	sub	arg02, #4
29dcc                 | '         stm->tm_isdst = 0;
29dcc                 | ' 
29dcc                 | ' ;
29dcc                 | '         return stm;
29dcc     0A FB 01 F6 | 	mov	result1, arg02
29dd0     19 22 62 FD | 	getqy	local03
29dd4     0A 23 62 FC | 	wrlong	local03, arg02
29dd8     20 14 06 F1 | 	add	arg02, #32
29ddc     0A 01 68 FC | 	wrlong	#0, arg02
29de0     A7 F0 03 F6 | 	mov	ptra, fp
29de4     B2 00 A0 FD | 	call	#popregs_
29de8                 | _fatfs_cc__gmtime_r_ret
29de8     2D 00 64 FD | 	ret
29dec                 | 
29dec                 | _fatfs_cc__tzset
29dec     5C 01 00 FF 
29df0     31 13 06 F6 | 	mov	arg01, ##@LR__4585
29df4     34 00 B0 FD | 	call	#_fatfs_cc_getenv
29df8     FD 12 02 F6 | 	mov	arg01, result1
29dfc     02 00 00 FF 
29e00     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
29e04     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
29e08     02 00 00 FF 
29e0c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
29e10     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
29e14     02 00 00 FF 
29e18     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
29e1c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
29e20     02 00 00 FF 
29e24     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
29e28                 | _fatfs_cc__tzset_ret
29e28     2D 00 64 FD | 	ret
29e2c                 | 
29e2c                 | _fatfs_cc_getenv
29e2c     06 4A 05 F6 | 	mov	COUNT_, #6
29e30     A8 00 A0 FD | 	call	#pushregs_
29e34     09 1F 02 F6 | 	mov	local01, arg01
29e38     09 21 02 F6 | 	mov	local02, arg01
29e3c     97 06 48 FB | 	callpa	#(@LR__4281-@LR__4280)>>2,fcache_load_ptr_
29e40                 | LR__4280
29e40     10 FB C9 FA | 	rdbyte	result1, local02 wz
29e44     01 20 06 51 |  if_ne	add	local02, #1
29e48     F4 FF 9F 5D |  if_ne	jmp	#LR__4280
29e4c                 | LR__4281
29e4c     09 21 82 F1 | 	sub	local02, arg01
29e50     10 FB 01 F6 | 	mov	result1, local02
29e54     02 00 00 FF 
29e58     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
29e5c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
29e60     02 00 00 FF 
29e64     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
29e68                 | '             return 0;
29e68     00 FA 05 A6 |  if_e	mov	result1, #0
29e6c     5C 00 90 AD |  if_e	jmp	#LR__4284
29e70                 | ' 
29e70                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
29e70     02 00 00 FF 
29e74     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
29e78     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
29e7c     02 00 00 FF 
29e80     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
29e84                 | LR__4282
29e84     11 25 0A FB | 	rdlong	local04, local03 wz
29e88     3C 00 90 AD |  if_e	jmp	#LR__4283
29e8c     12 13 02 F6 | 	mov	arg01, local04
29e90     0F 15 02 F6 | 	mov	arg02, local01
29e94     10 17 02 F6 | 	mov	arg03, local02
29e98     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
29e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
29ea0     10 27 02 A6 |  if_e	mov	local05, local02
29ea4     12 27 02 A1 |  if_e	add	local05, local04
29ea8     13 29 C2 AA |  if_e	rdbyte	local06, local05
29eac     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
29eb0                 | ' 			return name+len+1;
29eb0     10 25 02 A1 |  if_e	add	local04, local02
29eb4     01 24 06 A1 |  if_e	add	local04, #1
29eb8     12 FB 01 A6 |  if_e	mov	result1, local04
29ebc     0C 00 90 AD |  if_e	jmp	#LR__4284
29ec0     04 22 06 F1 | 	add	local03, #4
29ec4     BC FF 9F FD | 	jmp	#LR__4282
29ec8                 | LR__4283
29ec8                 | ' 	}
29ec8                 | ' 	return 0;
29ec8     00 FA 05 F6 | 	mov	result1, #0
29ecc                 | LR__4284
29ecc     A7 F0 03 F6 | 	mov	ptra, fp
29ed0     B2 00 A0 FD | 	call	#popregs_
29ed4                 | _fatfs_cc_getenv_ret
29ed4     2D 00 64 FD | 	ret
29ed8                 | 
29ed8                 | _fatfs_cc__get_fattime
29ed8     00 4A 05 F6 | 	mov	COUNT_, #0
29edc     A8 00 A0 FD | 	call	#pushregs_
29ee0     34 F0 07 F1 | 	add	ptra, #52
29ee4     00 12 06 F6 | 	mov	arg01, #0
29ee8     38 FB BF FD | 	call	#_fatfs_cc_time
29eec     04 4E 05 F1 | 	add	fp, #4
29ef0     A7 FA 61 FC | 	wrlong	result1, fp
29ef4     A7 12 02 F6 | 	mov	arg01, fp
29ef8     0C 4E 05 F1 | 	add	fp, #12
29efc     A7 14 02 F6 | 	mov	arg02, fp
29f00     10 4E 85 F1 | 	sub	fp, #16
29f04     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
29f08     24 4E 05 F1 | 	add	fp, #36
29f0c     A7 14 02 FB | 	rdlong	arg02, fp
29f10     50 14 86 F1 | 	sub	arg02, #80
29f14     09 14 66 F0 | 	shl	arg02, #9
29f18     04 4E 85 F1 | 	sub	fp, #4
29f1c     A7 FA 01 FB | 	rdlong	result1, fp
29f20     01 FA 05 F1 | 	add	result1, #1
29f24     05 FA 65 F0 | 	shl	result1, #5
29f28     FD 14 42 F5 | 	or	arg02, result1
29f2c     04 4E 85 F1 | 	sub	fp, #4
29f30     A7 FA 01 FB | 	rdlong	result1, fp
29f34     FD 14 42 F5 | 	or	arg02, result1
29f38     14 4E 85 F1 | 	sub	fp, #20
29f3c     A7 14 62 FC | 	wrlong	arg02, fp
29f40     10 4E 05 F1 | 	add	fp, #16
29f44     A7 14 02 FB | 	rdlong	arg02, fp
29f48     0B 14 66 F0 | 	shl	arg02, #11
29f4c     04 4E 85 F1 | 	sub	fp, #4
29f50     A7 FA 01 FB | 	rdlong	result1, fp
29f54     05 FA 65 F0 | 	shl	result1, #5
29f58     FD 14 42 F5 | 	or	arg02, result1
29f5c     04 4E 85 F1 | 	sub	fp, #4
29f60     A7 FA 01 FB | 	rdlong	result1, fp
29f64     FD 14 42 F5 | 	or	arg02, result1
29f68     04 4E 85 F1 | 	sub	fp, #4
29f6c     A7 14 62 FC | 	wrlong	arg02, fp
29f70                 | ' 
29f70                 | '     now = time(0);
29f70                 | '     _gmtime_r (&now, &date);
29f70                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
29f70                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
29f70                 | '     return (ffdate << 16) | fftime;
29f70     04 4E 85 F1 | 	sub	fp, #4
29f74     A7 FA 01 FB | 	rdlong	result1, fp
29f78     10 FA 65 F0 | 	shl	result1, #16
29f7c     08 4E 85 F1 | 	sub	fp, #8
29f80     0A FB 41 F5 | 	or	result1, arg02
29f84     A7 F0 03 F6 | 	mov	ptra, fp
29f88     B2 00 A0 FD | 	call	#popregs_
29f8c                 | _fatfs_cc__get_fattime_ret
29f8c     2D 00 64 FD | 	ret
29f90                 | 
29f90                 | _fatfs_cc_unixtime_0894
29f90     00 4A 05 F6 | 	mov	COUNT_, #0
29f94     A8 00 A0 FD | 	call	#pushregs_
29f98     34 F0 07 F1 | 	add	ptra, #52
29f9c     04 4E 05 F1 | 	add	fp, #4
29fa0     A7 12 62 FC | 	wrlong	arg01, fp
29fa4     04 4E 05 F1 | 	add	fp, #4
29fa8     A7 14 62 FC | 	wrlong	arg02, fp
29fac     04 4E 85 F1 | 	sub	fp, #4
29fb0     A7 14 02 FB | 	rdlong	arg02, fp
29fb4     09 14 46 F0 | 	shr	arg02, #9
29fb8     7F 14 06 F5 | 	and	arg02, #127
29fbc     50 FA 05 F6 | 	mov	result1, #80
29fc0     0A FB 01 F1 | 	add	result1, arg02
29fc4     20 4E 05 F1 | 	add	fp, #32
29fc8     A7 FA 61 FC | 	wrlong	result1, fp
29fcc     20 4E 85 F1 | 	sub	fp, #32
29fd0     A7 FA 01 FB | 	rdlong	result1, fp
29fd4     05 FA 45 F0 | 	shr	result1, #5
29fd8     FD FA 41 F8 | 	getnib	result1, result1, #0
29fdc     01 FA 85 F1 | 	sub	result1, #1
29fe0     1C 4E 05 F1 | 	add	fp, #28
29fe4     A7 FA 61 FC | 	wrlong	result1, fp
29fe8     1C 4E 85 F1 | 	sub	fp, #28
29fec     A7 FA 01 FB | 	rdlong	result1, fp
29ff0     1F FA 05 F5 | 	and	result1, #31
29ff4     18 4E 05 F1 | 	add	fp, #24
29ff8     A7 FA 61 FC | 	wrlong	result1, fp
29ffc     14 4E 85 F1 | 	sub	fp, #20
2a000     A7 FA 01 FB | 	rdlong	result1, fp
2a004     0B FA 45 F0 | 	shr	result1, #11
2a008     1F FA 05 F5 | 	and	result1, #31
2a00c     10 4E 05 F1 | 	add	fp, #16
2a010     A7 FA 61 FC | 	wrlong	result1, fp
2a014     10 4E 85 F1 | 	sub	fp, #16
2a018     A7 FA 01 FB | 	rdlong	result1, fp
2a01c     05 FA 45 F0 | 	shr	result1, #5
2a020     3F FA 05 F5 | 	and	result1, #63
2a024     0C 4E 05 F1 | 	add	fp, #12
2a028     A7 FA 61 FC | 	wrlong	result1, fp
2a02c     0C 4E 85 F1 | 	sub	fp, #12
2a030     A7 14 02 FB | 	rdlong	arg02, fp
2a034     1F 14 06 F5 | 	and	arg02, #31
2a038     01 14 66 F0 | 	shl	arg02, #1
2a03c     08 4E 05 F1 | 	add	fp, #8
2a040     A7 14 62 FC | 	wrlong	arg02, fp
2a044     A7 12 02 F6 | 	mov	arg01, fp
2a048     10 4E 85 F1 | 	sub	fp, #16
2a04c     4C FA BF FD | 	call	#_fatfs_cc_mktime
2a050     0C 4E 05 F1 | 	add	fp, #12
2a054     A7 FA 61 FC | 	wrlong	result1, fp
2a058                 | ' 
2a058                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2a058                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2a058                 | '     date.tm_mday = (dosdate & 0x1f);
2a058                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2a058                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2a058                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2a058                 | ' 
2a058                 | '     t = mktime(&date);
2a058                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a058                 | '     return t;
2a058     0C 4E 85 F1 | 	sub	fp, #12
2a05c     A7 F0 03 F6 | 	mov	ptra, fp
2a060     B2 00 A0 FD | 	call	#popregs_
2a064                 | _fatfs_cc_unixtime_0894_ret
2a064     2D 00 64 FD | 	ret
2a068                 | 
2a068                 | _fatfs_cc__set_dos_error_0896
2a068     09 01 02 F6 | 	mov	_var01, arg01
2a06c                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a06c                 | '     switch (derr) {
2a06c     14 00 26 F3 | 	fle	_var01, #20
2a070     30 00 62 FD | 	jmprel	_var01
2a074                 | LR__4290
2a074     50 00 90 FD | 	jmp	#LR__4291
2a078     84 00 90 FD | 	jmp	#LR__4305
2a07c     80 00 90 FD | 	jmp	#LR__4306
2a080     7C 00 90 FD | 	jmp	#LR__4307
2a084     48 00 90 FD | 	jmp	#LR__4292
2a088     44 00 90 FD | 	jmp	#LR__4293
2a08c     40 00 90 FD | 	jmp	#LR__4294
2a090     44 00 90 FD | 	jmp	#LR__4295
2a094     48 00 90 FD | 	jmp	#LR__4297
2a098     54 00 90 FD | 	jmp	#LR__4300
2a09c     38 00 90 FD | 	jmp	#LR__4296
2a0a0     4C 00 90 FD | 	jmp	#LR__4301
2a0a4     48 00 90 FD | 	jmp	#LR__4302
2a0a8     44 00 90 FD | 	jmp	#LR__4303
2a0ac     50 00 90 FD | 	jmp	#LR__4308
2a0b0     4C 00 90 FD | 	jmp	#LR__4308
2a0b4     48 00 90 FD | 	jmp	#LR__4308
2a0b8     2C 00 90 FD | 	jmp	#LR__4298
2a0bc     38 00 90 FD | 	jmp	#LR__4304
2a0c0     2C 00 90 FD | 	jmp	#LR__4299
2a0c4     38 00 90 FD | 	jmp	#LR__4308
2a0c8                 | LR__4291
2a0c8     00 02 06 F6 | 	mov	_var02, #0
2a0cc                 | '         r = 0;
2a0cc                 | '         break;
2a0cc     34 00 90 FD | 	jmp	#LR__4309
2a0d0                 | LR__4292
2a0d0                 | LR__4293
2a0d0                 | LR__4294
2a0d0     04 02 06 F6 | 	mov	_var02, #4
2a0d4                 | '         r =  4 ;
2a0d4                 | '         break;
2a0d4     2C 00 90 FD | 	jmp	#LR__4309
2a0d8                 | LR__4295
2a0d8                 | LR__4296
2a0d8     06 02 06 F6 | 	mov	_var02, #6
2a0dc                 | '         r =  6 ;
2a0dc                 | '         break;
2a0dc     24 00 90 FD | 	jmp	#LR__4309
2a0e0                 | LR__4297
2a0e0     09 02 06 F6 | 	mov	_var02, #9
2a0e4                 | '         r =  9 ;
2a0e4                 | '         break;
2a0e4     1C 00 90 FD | 	jmp	#LR__4309
2a0e8                 | LR__4298
2a0e8     07 02 06 F6 | 	mov	_var02, #7
2a0ec                 | '         r =  7 ;
2a0ec                 | '         break;
2a0ec     14 00 90 FD | 	jmp	#LR__4309
2a0f0                 | LR__4299
2a0f0                 | LR__4300
2a0f0                 | LR__4301
2a0f0                 | LR__4302
2a0f0                 | LR__4303
2a0f0     0A 02 06 F6 | 	mov	_var02, #10
2a0f4                 | '         r =  10 ;
2a0f4                 | '         break;
2a0f4     0C 00 90 FD | 	jmp	#LR__4309
2a0f8                 | LR__4304
2a0f8     0B 02 06 F6 | 	mov	_var02, #11
2a0fc                 | '         r =  11 ;
2a0fc                 | '         break;
2a0fc     04 00 90 FD | 	jmp	#LR__4309
2a100                 | LR__4305
2a100                 | LR__4306
2a100                 | LR__4307
2a100                 | LR__4308
2a100     0C 02 06 F6 | 	mov	_var02, #12
2a104                 | '         r =  12 ;
2a104                 | '         break;
2a104                 | LR__4309
2a104                 | '     }
2a104                 | '     return _seterror(r);
2a104     00 02 4E F2 | 	cmps	_var02, #0 wz
2a108     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a10c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2a110     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a114     01 FA 65 56 |  if_ne	neg	result1, #1
2a118     00 FA 05 A6 |  if_e	mov	result1, #0
2a11c                 | _fatfs_cc__set_dos_error_0896_ret
2a11c     2D 00 64 FD | 	ret
2a120                 | 
2a120                 | _fatfs_cc_v_creat
2a120     04 4A 05 F6 | 	mov	COUNT_, #4
2a124     A8 00 A0 FD | 	call	#pushregs_
2a128     09 1F 02 F6 | 	mov	local01, arg01
2a12c     0A 21 02 F6 | 	mov	local02, arg02
2a130     03 00 00 FF 
2a134     3C 12 06 F6 | 	mov	arg01, ##1596
2a138                 | '     return _gc_alloc(size);
2a138     10 14 06 F6 | 	mov	arg02, #16
2a13c     30 60 BF FD | 	call	#__system___gc_doalloc
2a140     FD 22 0A F6 | 	mov	local03, result1 wz
2a144                 | '       return _seterror( 7 );
2a144     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a148     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a14c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a150     01 FA 65 A6 |  if_e	neg	result1, #1
2a154     58 00 90 AD |  if_e	jmp	#LR__4311
2a158     11 13 02 F6 | 	mov	arg01, local03
2a15c     00 14 06 F6 | 	mov	arg02, #0
2a160     03 00 00 FF 
2a164     3C 16 06 F6 | 	mov	arg03, ##1596
2a168     98 00 A0 FD | 	call	#\builtin_bytefill_
2a16c     02 00 00 FF 
2a170     14 22 06 F1 | 	add	local03, ##1044
2a174     11 13 02 F6 | 	mov	arg01, local03
2a178     02 00 00 FF 
2a17c     14 22 86 F1 | 	sub	local03, ##1044
2a180     10 15 02 F6 | 	mov	arg02, local02
2a184     07 16 06 F6 | 	mov	arg03, #7
2a188     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2a18c     FD 24 0A F6 | 	mov	local04, result1 wz
2a190     14 00 90 AD |  if_e	jmp	#LR__4310
2a194     11 13 02 F6 | 	mov	arg01, local03
2a198                 | '     return _gc_free(ptr);
2a198     E0 60 BF FD | 	call	#__system___gc_free
2a19c                 | '     free(f);
2a19c                 | '     return _set_dos_error(r);
2a19c     12 13 02 F6 | 	mov	arg01, local04
2a1a0     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a1a4     08 00 90 FD | 	jmp	#LR__4311
2a1a8                 | LR__4310
2a1a8     0F 23 62 FC | 	wrlong	local03, local01
2a1ac                 | '   }
2a1ac                 | '   fil->vfsdata = f;
2a1ac                 | '   return 0;
2a1ac     00 FA 05 F6 | 	mov	result1, #0
2a1b0                 | LR__4311
2a1b0     A7 F0 03 F6 | 	mov	ptra, fp
2a1b4     B2 00 A0 FD | 	call	#popregs_
2a1b8                 | _fatfs_cc_v_creat_ret
2a1b8     2D 00 64 FD | 	ret
2a1bc                 | 
2a1bc                 | _fatfs_cc_v_close
2a1bc     02 4A 05 F6 | 	mov	COUNT_, #2
2a1c0     A8 00 A0 FD | 	call	#pushregs_
2a1c4     09 1F 02 FB | 	rdlong	local01, arg01
2a1c8     02 00 00 FF 
2a1cc     14 1E 06 F1 | 	add	local01, ##1044
2a1d0     0F 13 02 F6 | 	mov	arg01, local01
2a1d4     02 00 00 FF 
2a1d8     14 1E 86 F1 | 	sub	local01, ##1044
2a1dc     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2a1e0     FD 20 02 F6 | 	mov	local02, result1
2a1e4     0F 13 02 F6 | 	mov	arg01, local01
2a1e8                 | '     return _gc_free(ptr);
2a1e8     90 60 BF FD | 	call	#__system___gc_free
2a1ec                 | '     FAT_FIL *f = fil->vfsdata;
2a1ec                 | '     r=f_close(&f->fil);
2a1ec                 | '     free(f);
2a1ec                 | '     return _set_dos_error(r);
2a1ec     10 13 02 F6 | 	mov	arg01, local02
2a1f0     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a1f4     A7 F0 03 F6 | 	mov	ptra, fp
2a1f8     B2 00 A0 FD | 	call	#popregs_
2a1fc                 | _fatfs_cc_v_close_ret
2a1fc     2D 00 64 FD | 	ret
2a200                 | 
2a200                 | _fatfs_cc_v_opendir
2a200     04 4A 05 F6 | 	mov	COUNT_, #4
2a204     A8 00 A0 FD | 	call	#pushregs_
2a208     09 1F 02 F6 | 	mov	local01, arg01
2a20c     0A 21 02 F6 | 	mov	local02, arg02
2a210     30 12 06 F6 | 	mov	arg01, #48
2a214                 | '     return _gc_alloc(size);
2a214     10 14 06 F6 | 	mov	arg02, #16
2a218     54 5F BF FD | 	call	#__system___gc_doalloc
2a21c     FD 22 0A F6 | 	mov	local03, result1 wz
2a220                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a220                 | '       return _seterror( 7 );
2a220     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a224     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a228     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a22c     01 FA 65 A6 |  if_e	neg	result1, #1
2a230     34 00 90 AD |  if_e	jmp	#LR__4321
2a234     10 15 02 F6 | 	mov	arg02, local02
2a238     11 13 02 F6 | 	mov	arg01, local03
2a23c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2a240     FD 24 0A F6 | 	mov	local04, result1 wz
2a244     14 00 90 AD |  if_e	jmp	#LR__4320
2a248     11 13 02 F6 | 	mov	arg01, local03
2a24c                 | '     return _gc_free(ptr);
2a24c     2C 60 BF FD | 	call	#__system___gc_free
2a250                 | '         free(f);
2a250                 | '         return _set_dos_error(r);
2a250     12 13 02 F6 | 	mov	arg01, local04
2a254     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a258     0C 00 90 FD | 	jmp	#LR__4321
2a25c                 | LR__4320
2a25c     04 1E 06 F1 | 	add	local01, #4
2a260     0F 23 62 FC | 	wrlong	local03, local01
2a264                 | '     }
2a264                 | '     dir->vfsdata = f;
2a264                 | '     return 0;
2a264     00 FA 05 F6 | 	mov	result1, #0
2a268                 | LR__4321
2a268     A7 F0 03 F6 | 	mov	ptra, fp
2a26c     B2 00 A0 FD | 	call	#popregs_
2a270                 | _fatfs_cc_v_opendir_ret
2a270     2D 00 64 FD | 	ret
2a274                 | 
2a274                 | _fatfs_cc_v_closedir
2a274     02 4A 05 F6 | 	mov	COUNT_, #2
2a278     A8 00 A0 FD | 	call	#pushregs_
2a27c     04 12 06 F1 | 	add	arg01, #4
2a280     09 1F 02 FB | 	rdlong	local01, arg01
2a284     0F 13 02 F6 | 	mov	arg01, local01
2a288     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2a28c     FD 20 02 F6 | 	mov	local02, result1
2a290     0F 13 02 F6 | 	mov	arg01, local01
2a294                 | '     return _gc_free(ptr);
2a294     E4 5F BF FD | 	call	#__system___gc_free
2a298     00 20 0E F2 | 	cmp	local02, #0 wz
2a29c     10 13 02 56 |  if_ne	mov	arg01, local02
2a2a0     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0896
2a2a4                 | '     return r;
2a2a4     10 FB 01 F6 | 	mov	result1, local02
2a2a8     A7 F0 03 F6 | 	mov	ptra, fp
2a2ac     B2 00 A0 FD | 	call	#popregs_
2a2b0                 | _fatfs_cc_v_closedir_ret
2a2b0     2D 00 64 FD | 	ret
2a2b4                 | 
2a2b4                 | _fatfs_cc_v_readdir
2a2b4     01 4A 05 F6 | 	mov	COUNT_, #1
2a2b8     A8 00 A0 FD | 	call	#pushregs_
2a2bc     2C F1 07 F1 | 	add	ptra, #300
2a2c0     04 4E 05 F1 | 	add	fp, #4
2a2c4     A7 12 62 FC | 	wrlong	arg01, fp
2a2c8     04 4E 05 F1 | 	add	fp, #4
2a2cc     A7 14 62 FC | 	wrlong	arg02, fp
2a2d0     04 4E 85 F1 | 	sub	fp, #4
2a2d4     A7 16 02 FB | 	rdlong	arg03, fp
2a2d8     04 16 06 F1 | 	add	arg03, #4
2a2dc     0B 13 02 FB | 	rdlong	arg01, arg03
2a2e0     08 4E 05 F1 | 	add	fp, #8
2a2e4     A7 14 02 F6 | 	mov	arg02, fp
2a2e8     0C 4E 85 F1 | 	sub	fp, #12
2a2ec     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2a2f0     28 4F 05 F1 | 	add	fp, #296
2a2f4     A7 FA 61 FC | 	wrlong	result1, fp
2a2f8     28 4F 85 F1 | 	sub	fp, #296
2a2fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a300     14 00 90 AD |  if_e	jmp	#LR__4330
2a304                 | '         return _set_dos_error(r);
2a304     28 4F 05 F1 | 	add	fp, #296
2a308     A7 12 02 FB | 	rdlong	arg01, fp
2a30c     28 4F 85 F1 | 	sub	fp, #296
2a310     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a314     C4 00 90 FD | 	jmp	#LR__4333
2a318                 | LR__4330
2a318     28 4E 05 F1 | 	add	fp, #40
2a31c     A7 16 CA FA | 	rdbyte	arg03, fp wz
2a320     28 4E 85 F1 | 	sub	fp, #40
2a324                 | '         return -1;
2a324     01 FA 65 A6 |  if_e	neg	result1, #1
2a328     B0 00 90 AD |  if_e	jmp	#LR__4333
2a32c     08 4E 05 F1 | 	add	fp, #8
2a330     A7 12 02 FB | 	rdlong	arg01, fp
2a334     20 4E 05 F1 | 	add	fp, #32
2a338     A7 14 02 F6 | 	mov	arg02, fp
2a33c     28 4E 85 F1 | 	sub	fp, #40
2a340     3F 16 06 F6 | 	mov	arg03, #63
2a344     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2a348     08 4E 05 F1 | 	add	fp, #8
2a34c     A7 16 02 FB | 	rdlong	arg03, fp
2a350     3F 16 06 F1 | 	add	arg03, #63
2a354     0B 01 48 FC | 	wrbyte	#0, arg03
2a358     0C 4E 05 F1 | 	add	fp, #12
2a35c     A7 16 C2 FA | 	rdbyte	arg03, fp
2a360     14 4E 85 F1 | 	sub	fp, #20
2a364     10 16 CE F7 | 	test	arg03, #16 wz
2a368     18 00 90 AD |  if_e	jmp	#LR__4331
2a36c     08 4E 05 F1 | 	add	fp, #8
2a370     A7 16 02 FB | 	rdlong	arg03, fp
2a374     08 4E 85 F1 | 	sub	fp, #8
2a378     50 16 06 F1 | 	add	arg03, #80
2a37c     0B 03 48 FC | 	wrbyte	#1, arg03
2a380     14 00 90 FD | 	jmp	#LR__4332
2a384                 | LR__4331
2a384     08 4E 05 F1 | 	add	fp, #8
2a388     A7 16 02 FB | 	rdlong	arg03, fp
2a38c     08 4E 85 F1 | 	sub	fp, #8
2a390     50 16 06 F1 | 	add	arg03, #80
2a394     0B 01 48 FC | 	wrbyte	#0, arg03
2a398                 | LR__4332
2a398     08 4E 05 F1 | 	add	fp, #8
2a39c     A7 16 02 FB | 	rdlong	arg03, fp
2a3a0     04 4E 05 F1 | 	add	fp, #4
2a3a4     A7 14 02 FB | 	rdlong	arg02, fp
2a3a8     48 16 06 F1 | 	add	arg03, #72
2a3ac     0B 15 62 FC | 	wrlong	arg02, arg03
2a3b0     04 4E 85 F1 | 	sub	fp, #4
2a3b4     A7 1E 02 FB | 	rdlong	local01, fp
2a3b8     08 4E 05 F1 | 	add	fp, #8
2a3bc     A7 12 E2 FA | 	rdword	arg01, fp
2a3c0     02 4E 05 F1 | 	add	fp, #2
2a3c4     A7 14 E2 FA | 	rdword	arg02, fp
2a3c8     12 4E 85 F1 | 	sub	fp, #18
2a3cc     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0894
2a3d0     4C 1E 06 F1 | 	add	local01, #76
2a3d4     0F FB 61 FC | 	wrlong	result1, local01
2a3d8                 | '         ent->d_type =  (0) ;
2a3d8                 | '     }
2a3d8                 | '     ent->d_size = finfo.fsize;
2a3d8                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2a3d8                 | '     return 0;
2a3d8     00 FA 05 F6 | 	mov	result1, #0
2a3dc                 | LR__4333
2a3dc     A7 F0 03 F6 | 	mov	ptra, fp
2a3e0     B2 00 A0 FD | 	call	#popregs_
2a3e4                 | _fatfs_cc_v_readdir_ret
2a3e4     2D 00 64 FD | 	ret
2a3e8                 | 
2a3e8                 | _fatfs_cc_v_stat
2a3e8     03 4A 05 F6 | 	mov	COUNT_, #3
2a3ec     A8 00 A0 FD | 	call	#pushregs_
2a3f0     30 F1 07 F1 | 	add	ptra, #304
2a3f4     04 4E 05 F1 | 	add	fp, #4
2a3f8     A7 12 62 FC | 	wrlong	arg01, fp
2a3fc     04 4E 05 F1 | 	add	fp, #4
2a400     A7 14 62 FC | 	wrlong	arg02, fp
2a404     08 4E 85 F1 | 	sub	fp, #8
2a408     0A 13 02 F6 | 	mov	arg01, arg02
2a40c     00 14 06 F6 | 	mov	arg02, #0
2a410     30 16 06 F6 | 	mov	arg03, #48
2a414     98 00 A0 FD | 	call	#\builtin_bytefill_
2a418     04 4E 05 F1 | 	add	fp, #4
2a41c     A7 FA 01 FB | 	rdlong	result1, fp
2a420     04 4E 85 F1 | 	sub	fp, #4
2a424     FD FA C9 FA | 	rdbyte	result1, result1 wz
2a428     2C 00 90 AD |  if_e	jmp	#LR__4340
2a42c     04 4E 05 F1 | 	add	fp, #4
2a430     A7 FA 01 FB | 	rdlong	result1, fp
2a434     04 4E 85 F1 | 	sub	fp, #4
2a438     FD FA C1 FA | 	rdbyte	result1, result1
2a43c     2E FA 0D F2 | 	cmp	result1, #46 wz
2a440     04 4E 05 A1 |  if_e	add	fp, #4
2a444     A7 1E 02 AB |  if_e	rdlong	local01, fp
2a448     04 4E 85 A1 |  if_e	sub	fp, #4
2a44c     01 1E 06 A1 |  if_e	add	local01, #1
2a450     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2a454     18 00 90 5D |  if_ne	jmp	#LR__4341
2a458                 | LR__4340
2a458     18 4E 05 F1 | 	add	fp, #24
2a45c     A7 20 48 FC | 	wrbyte	#16, fp
2a460     0C 4E 85 F1 | 	sub	fp, #12
2a464     A7 00 68 FC | 	wrlong	#0, fp
2a468     0C 4E 85 F1 | 	sub	fp, #12
2a46c     24 00 90 FD | 	jmp	#LR__4342
2a470                 | LR__4341
2a470     04 4E 05 F1 | 	add	fp, #4
2a474     A7 12 02 FB | 	rdlong	arg01, fp
2a478     0C 4E 05 F1 | 	add	fp, #12
2a47c     A7 14 02 F6 | 	mov	arg02, fp
2a480     10 4E 85 F1 | 	sub	fp, #16
2a484     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2a488     0C 4E 05 F1 | 	add	fp, #12
2a48c     A7 FA 61 FC | 	wrlong	result1, fp
2a490     0C 4E 85 F1 | 	sub	fp, #12
2a494                 | LR__4342
2a494     0C 4E 05 F1 | 	add	fp, #12
2a498     A7 20 0A FB | 	rdlong	local02, fp wz
2a49c     0C 4E 85 F1 | 	sub	fp, #12
2a4a0     14 00 90 AD |  if_e	jmp	#LR__4343
2a4a4                 | '         return _set_dos_error(r);
2a4a4     0C 4E 05 F1 | 	add	fp, #12
2a4a8     A7 12 02 FB | 	rdlong	arg01, fp
2a4ac     0C 4E 85 F1 | 	sub	fp, #12
2a4b0     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a4b4     14 01 90 FD | 	jmp	#LR__4344
2a4b8                 | LR__4343
2a4b8     2C 4F 05 F1 | 	add	fp, #300
2a4bc     A7 48 6A FC | 	wrlong	#292, fp
2a4c0     14 4F 85 F1 | 	sub	fp, #276
2a4c4     A7 22 C2 FA | 	rdbyte	local03, fp
2a4c8     18 4E 85 F1 | 	sub	fp, #24
2a4cc     01 22 CE F7 | 	test	local03, #1 wz
2a4d0     2C 4F 05 A1 |  if_e	add	fp, #300
2a4d4     A7 22 02 AB |  if_e	rdlong	local03, fp
2a4d8     92 22 46 A5 |  if_e	or	local03, #146
2a4dc     A7 22 62 AC |  if_e	wrlong	local03, fp
2a4e0     2C 4F 85 A1 |  if_e	sub	fp, #300
2a4e4     18 4E 05 F1 | 	add	fp, #24
2a4e8     A7 22 C2 FA | 	rdbyte	local03, fp
2a4ec     18 4E 85 F1 | 	sub	fp, #24
2a4f0     10 22 CE F7 | 	test	local03, #16 wz
2a4f4     2C 4F 05 51 |  if_ne	add	fp, #300
2a4f8     A7 22 02 5B |  if_ne	rdlong	local03, fp
2a4fc     08 00 00 5F 
2a500     49 22 46 55 |  if_ne	or	local03, ##4169
2a504     A7 22 62 5C |  if_ne	wrlong	local03, fp
2a508     2C 4F 85 51 |  if_ne	sub	fp, #300
2a50c     08 4E 05 F1 | 	add	fp, #8
2a510     A7 22 02 FB | 	rdlong	local03, fp
2a514     24 4F 05 F1 | 	add	fp, #292
2a518     A7 20 02 FB | 	rdlong	local02, fp
2a51c     08 22 06 F1 | 	add	local03, #8
2a520     11 21 62 FC | 	wrlong	local02, local03
2a524     24 4F 85 F1 | 	sub	fp, #292
2a528     A7 22 02 FB | 	rdlong	local03, fp
2a52c     0C 22 06 F1 | 	add	local03, #12
2a530     11 03 68 FC | 	wrlong	#1, local03
2a534     A7 22 02 FB | 	rdlong	local03, fp
2a538     08 4E 05 F1 | 	add	fp, #8
2a53c     A7 20 02 FB | 	rdlong	local02, fp
2a540     18 22 06 F1 | 	add	local03, #24
2a544     11 21 62 FC | 	wrlong	local02, local03
2a548     08 4E 85 F1 | 	sub	fp, #8
2a54c     A7 22 02 FB | 	rdlong	local03, fp
2a550     1C 22 06 F1 | 	add	local03, #28
2a554     01 00 80 FF 
2a558     11 01 68 FC | 	wrlong	##512, local03
2a55c     A7 20 02 FB | 	rdlong	local02, fp
2a560     10 23 02 F6 | 	mov	local03, local02
2a564     18 20 06 F1 | 	add	local02, #24
2a568     10 21 02 FB | 	rdlong	local02, local02
2a56c     FF 21 06 F1 | 	add	local02, #511
2a570     10 21 52 F6 | 	abs	local02, local02 wc
2a574     09 20 46 F0 | 	shr	local02, #9
2a578     10 21 82 F6 | 	negc	local02, local02
2a57c     20 22 06 F1 | 	add	local03, #32
2a580     11 21 62 FC | 	wrlong	local02, local03
2a584     A7 20 02 FB | 	rdlong	local02, fp
2a588     10 23 02 F6 | 	mov	local03, local02
2a58c     10 1F 02 F6 | 	mov	local01, local02
2a590     0C 4E 05 F1 | 	add	fp, #12
2a594     A7 12 E2 FA | 	rdword	arg01, fp
2a598     02 4E 05 F1 | 	add	fp, #2
2a59c     A7 14 E2 FA | 	rdword	arg02, fp
2a5a0     16 4E 85 F1 | 	sub	fp, #22
2a5a4     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0894
2a5a8     2C 1E 06 F1 | 	add	local01, #44
2a5ac     0F FB 61 FC | 	wrlong	result1, local01
2a5b0     28 20 06 F1 | 	add	local02, #40
2a5b4     10 FB 61 FC | 	wrlong	result1, local02
2a5b8     24 22 06 F1 | 	add	local03, #36
2a5bc     11 FB 61 FC | 	wrlong	result1, local03
2a5c0                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2a5c0                 | '     }
2a5c0                 | '     buf->st_mode = mode;
2a5c0                 | '     buf->st_nlink = 1;
2a5c0                 | '     buf->st_size = finfo.fsize;
2a5c0                 | '     buf->st_blksize = 512;
2a5c0                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2a5c0                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2a5c0                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a5c0                 | '     return r;
2a5c0     0C 4E 05 F1 | 	add	fp, #12
2a5c4     A7 FA 01 FB | 	rdlong	result1, fp
2a5c8     0C 4E 85 F1 | 	sub	fp, #12
2a5cc                 | LR__4344
2a5cc     A7 F0 03 F6 | 	mov	ptra, fp
2a5d0     B2 00 A0 FD | 	call	#popregs_
2a5d4                 | _fatfs_cc_v_stat_ret
2a5d4     2D 00 64 FD | 	ret
2a5d8                 | 
2a5d8                 | _fatfs_cc_v_read
2a5d8     00 4A 05 F6 | 	mov	COUNT_, #0
2a5dc     A8 00 A0 FD | 	call	#pushregs_
2a5e0     1C F0 07 F1 | 	add	ptra, #28
2a5e4     04 4E 05 F1 | 	add	fp, #4
2a5e8     A7 12 62 FC | 	wrlong	arg01, fp
2a5ec     04 4E 05 F1 | 	add	fp, #4
2a5f0     A7 14 62 FC | 	wrlong	arg02, fp
2a5f4     04 4E 05 F1 | 	add	fp, #4
2a5f8     A7 16 62 FC | 	wrlong	arg03, fp
2a5fc     08 4E 85 F1 | 	sub	fp, #8
2a600     A7 12 02 FB | 	rdlong	arg01, fp
2a604     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a608     0C 4E 05 F1 | 	add	fp, #12
2a60c     A7 12 62 FC | 	wrlong	arg01, fp
2a610     10 4E 85 F1 | 	sub	fp, #16
2a614                 | '         return _seterror( 5 );
2a614     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a618     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a61c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a620     01 FA 65 A6 |  if_e	neg	result1, #1
2a624     B8 00 90 AD |  if_e	jmp	#LR__4352
2a628     10 4E 05 F1 | 	add	fp, #16
2a62c     A7 12 02 FB | 	rdlong	arg01, fp
2a630     02 00 00 FF 
2a634     14 12 06 F1 | 	add	arg01, ##1044
2a638     08 4E 85 F1 | 	sub	fp, #8
2a63c     A7 14 02 FB | 	rdlong	arg02, fp
2a640     04 4E 05 F1 | 	add	fp, #4
2a644     A7 16 02 FB | 	rdlong	arg03, fp
2a648     0C 4E 05 F1 | 	add	fp, #12
2a64c     A7 18 02 F6 | 	mov	arg04, fp
2a650     18 4E 85 F1 | 	sub	fp, #24
2a654     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2a658     14 4E 05 F1 | 	add	fp, #20
2a65c     A7 FA 61 FC | 	wrlong	result1, fp
2a660     14 4E 85 F1 | 	sub	fp, #20
2a664     00 FA 0D F2 | 	cmp	result1, #0 wz
2a668     34 00 90 AD |  if_e	jmp	#LR__4350
2a66c     04 4E 05 F1 | 	add	fp, #4
2a670     A7 18 02 FB | 	rdlong	arg04, fp
2a674     0C 17 02 F6 | 	mov	arg03, arg04
2a678     08 18 06 F1 | 	add	arg04, #8
2a67c     0C 19 02 FB | 	rdlong	arg04, arg04
2a680     20 18 46 F5 | 	or	arg04, #32
2a684     08 16 06 F1 | 	add	arg03, #8
2a688     0B 19 62 FC | 	wrlong	arg04, arg03
2a68c                 | '         fil->state |=  (0x20) ;
2a68c                 | '         return _set_dos_error(r);
2a68c     10 4E 05 F1 | 	add	fp, #16
2a690     A7 12 02 FB | 	rdlong	arg01, fp
2a694     14 4E 85 F1 | 	sub	fp, #20
2a698     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a69c     40 00 90 FD | 	jmp	#LR__4352
2a6a0                 | LR__4350
2a6a0     18 4E 05 F1 | 	add	fp, #24
2a6a4     A7 FA 09 FB | 	rdlong	result1, fp wz
2a6a8     18 4E 85 F1 | 	sub	fp, #24
2a6ac     24 00 90 5D |  if_ne	jmp	#LR__4351
2a6b0     04 4E 05 F1 | 	add	fp, #4
2a6b4     A7 FA 01 FB | 	rdlong	result1, fp
2a6b8     FD 18 02 F6 | 	mov	arg04, result1
2a6bc     04 4E 85 F1 | 	sub	fp, #4
2a6c0     08 FA 05 F1 | 	add	result1, #8
2a6c4     FD FA 01 FB | 	rdlong	result1, result1
2a6c8     10 FA 45 F5 | 	or	result1, #16
2a6cc     08 18 06 F1 | 	add	arg04, #8
2a6d0     0C FB 61 FC | 	wrlong	result1, arg04
2a6d4                 | LR__4351
2a6d4                 | '         fil->state |=  (0x10) ;
2a6d4                 | '     }
2a6d4                 | '     return x;
2a6d4     18 4E 05 F1 | 	add	fp, #24
2a6d8     A7 FA 01 FB | 	rdlong	result1, fp
2a6dc     18 4E 85 F1 | 	sub	fp, #24
2a6e0                 | LR__4352
2a6e0     A7 F0 03 F6 | 	mov	ptra, fp
2a6e4     B2 00 A0 FD | 	call	#popregs_
2a6e8                 | _fatfs_cc_v_read_ret
2a6e8     2D 00 64 FD | 	ret
2a6ec                 | 
2a6ec                 | _fatfs_cc_v_write
2a6ec     00 4A 05 F6 | 	mov	COUNT_, #0
2a6f0     A8 00 A0 FD | 	call	#pushregs_
2a6f4     1C F0 07 F1 | 	add	ptra, #28
2a6f8     04 4E 05 F1 | 	add	fp, #4
2a6fc     A7 12 62 FC | 	wrlong	arg01, fp
2a700     04 4E 05 F1 | 	add	fp, #4
2a704     A7 14 62 FC | 	wrlong	arg02, fp
2a708     04 4E 05 F1 | 	add	fp, #4
2a70c     A7 16 62 FC | 	wrlong	arg03, fp
2a710     08 4E 85 F1 | 	sub	fp, #8
2a714     A7 12 02 FB | 	rdlong	arg01, fp
2a718     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a71c     0C 4E 05 F1 | 	add	fp, #12
2a720     A7 12 62 FC | 	wrlong	arg01, fp
2a724     10 4E 85 F1 | 	sub	fp, #16
2a728                 | '         return _seterror( 5 );
2a728     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a72c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a730     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a734     01 FA 65 A6 |  if_e	neg	result1, #1
2a738     84 00 90 AD |  if_e	jmp	#LR__4361
2a73c     10 4E 05 F1 | 	add	fp, #16
2a740     A7 12 02 FB | 	rdlong	arg01, fp
2a744     02 00 00 FF 
2a748     14 12 06 F1 | 	add	arg01, ##1044
2a74c     08 4E 85 F1 | 	sub	fp, #8
2a750     A7 14 02 FB | 	rdlong	arg02, fp
2a754     04 4E 05 F1 | 	add	fp, #4
2a758     A7 16 02 FB | 	rdlong	arg03, fp
2a75c     0C 4E 05 F1 | 	add	fp, #12
2a760     A7 18 02 F6 | 	mov	arg04, fp
2a764     18 4E 85 F1 | 	sub	fp, #24
2a768     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2a76c     14 4E 05 F1 | 	add	fp, #20
2a770     A7 FA 61 FC | 	wrlong	result1, fp
2a774     14 4E 85 F1 | 	sub	fp, #20
2a778     00 FA 0D F2 | 	cmp	result1, #0 wz
2a77c     34 00 90 AD |  if_e	jmp	#LR__4360
2a780     04 4E 05 F1 | 	add	fp, #4
2a784     A7 18 02 FB | 	rdlong	arg04, fp
2a788     0C 17 02 F6 | 	mov	arg03, arg04
2a78c     08 18 06 F1 | 	add	arg04, #8
2a790     0C 19 02 FB | 	rdlong	arg04, arg04
2a794     20 18 46 F5 | 	or	arg04, #32
2a798     08 16 06 F1 | 	add	arg03, #8
2a79c     0B 19 62 FC | 	wrlong	arg04, arg03
2a7a0                 | '         fil->state |=  (0x20) ;
2a7a0                 | '         return _set_dos_error(r);
2a7a0     10 4E 05 F1 | 	add	fp, #16
2a7a4     A7 12 02 FB | 	rdlong	arg01, fp
2a7a8     14 4E 85 F1 | 	sub	fp, #20
2a7ac     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a7b0     0C 00 90 FD | 	jmp	#LR__4361
2a7b4                 | LR__4360
2a7b4                 | '     }
2a7b4                 | '     return x;
2a7b4     18 4E 05 F1 | 	add	fp, #24
2a7b8     A7 FA 01 FB | 	rdlong	result1, fp
2a7bc     18 4E 85 F1 | 	sub	fp, #24
2a7c0                 | LR__4361
2a7c0     A7 F0 03 F6 | 	mov	ptra, fp
2a7c4     B2 00 A0 FD | 	call	#popregs_
2a7c8                 | _fatfs_cc_v_write_ret
2a7c8     2D 00 64 FD | 	ret
2a7cc                 | 
2a7cc                 | _fatfs_cc_v_lseek
2a7cc     04 4A 05 F6 | 	mov	COUNT_, #4
2a7d0     A8 00 A0 FD | 	call	#pushregs_
2a7d4     0A 1F 02 F6 | 	mov	local01, arg02
2a7d8     0B 21 02 F6 | 	mov	local02, arg03
2a7dc     09 23 02 FB | 	rdlong	local03, arg01
2a7e0     02 00 00 FF 
2a7e4     14 22 0E F1 | 	add	local03, ##1044 wz
2a7e8                 | '         return _seterror( 5 );
2a7e8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a7ec     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a7f0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a7f4     01 FA 65 A6 |  if_e	neg	result1, #1
2a7f8     4C 00 90 AD |  if_e	jmp	#LR__4372
2a7fc     00 20 0E F2 | 	cmp	local02, #0 wz
2a800     24 00 90 AD |  if_e	jmp	#LR__4370
2a804     01 20 0E F2 | 	cmp	local02, #1 wz
2a808     14 22 06 A1 |  if_e	add	local03, #20
2a80c     11 25 02 AB |  if_e	rdlong	local04, local03
2a810     14 22 86 A1 |  if_e	sub	local03, #20
2a814     12 1F 02 A1 |  if_e	add	local01, local04
2a818     0C 22 06 51 |  if_ne	add	local03, #12
2a81c     11 25 02 5B |  if_ne	rdlong	local04, local03
2a820     0C 22 86 51 |  if_ne	sub	local03, #12
2a824     12 1F 02 51 |  if_ne	add	local01, local04
2a828                 | LR__4370
2a828     0F 15 02 F6 | 	mov	arg02, local01
2a82c     11 13 02 F6 | 	mov	arg01, local03
2a830     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2a834     FD 12 0A F6 | 	mov	arg01, result1 wz
2a838     08 00 90 AD |  if_e	jmp	#LR__4371
2a83c                 | '         return _set_dos_error(result);
2a83c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a840     04 00 90 FD | 	jmp	#LR__4372
2a844                 | LR__4371
2a844                 | '     }
2a844                 | '     return offset;
2a844     0F FB 01 F6 | 	mov	result1, local01
2a848                 | LR__4372
2a848     A7 F0 03 F6 | 	mov	ptra, fp
2a84c     B2 00 A0 FD | 	call	#popregs_
2a850                 | _fatfs_cc_v_lseek_ret
2a850     2D 00 64 FD | 	ret
2a854                 | 
2a854                 | _fatfs_cc_v_ioctl
2a854                 | ' {
2a854                 | '     return _seterror( 10 );
2a854     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a858     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2a85c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a860     01 FA 65 F6 | 	neg	result1, #1
2a864                 | _fatfs_cc_v_ioctl_ret
2a864     2D 00 64 FD | 	ret
2a868                 | 
2a868                 | _fatfs_cc_v_mkdir
2a868     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2a86c     FD 12 02 F6 | 	mov	arg01, result1
2a870                 | ' 
2a870                 | '     r = f_mkdir(name);
2a870                 | '     return _set_dos_error(r);
2a870     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a874                 | _fatfs_cc_v_mkdir_ret
2a874     2D 00 64 FD | 	ret
2a878                 | 
2a878                 | _fatfs_cc_v_remove
2a878     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2a87c     FD 12 02 F6 | 	mov	arg01, result1
2a880                 | ' 
2a880                 | '     r = f_unlink(name);
2a880                 | '     return _set_dos_error(r);
2a880     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a884                 | _fatfs_cc_v_remove_ret
2a884     2D 00 64 FD | 	ret
2a888                 | 
2a888                 | _fatfs_cc_v_rmdir
2a888     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2a88c     FD 12 02 F6 | 	mov	arg01, result1
2a890                 | ' 
2a890                 | '     r = f_unlink(name);
2a890                 | '     return _set_dos_error(r);
2a890     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a894                 | _fatfs_cc_v_rmdir_ret
2a894     2D 00 64 FD | 	ret
2a898                 | 
2a898                 | _fatfs_cc_v_rename
2a898     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2a89c     FD 12 02 F6 | 	mov	arg01, result1
2a8a0                 | '     return _set_dos_error(r);
2a8a0     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a8a4                 | _fatfs_cc_v_rename_ret
2a8a4     2D 00 64 FD | 	ret
2a8a8                 | 
2a8a8                 | _fatfs_cc_v_open
2a8a8     07 4A 05 F6 | 	mov	COUNT_, #7
2a8ac     A8 00 A0 FD | 	call	#pushregs_
2a8b0     09 1F 02 F6 | 	mov	local01, arg01
2a8b4     0A 21 02 F6 | 	mov	local02, arg02
2a8b8     0B 23 02 F6 | 	mov	local03, arg03
2a8bc     03 00 00 FF 
2a8c0     3C 12 06 F6 | 	mov	arg01, ##1596
2a8c4                 | '     return _gc_alloc(size);
2a8c4     10 14 06 F6 | 	mov	arg02, #16
2a8c8     A4 58 BF FD | 	call	#__system___gc_doalloc
2a8cc     FD 24 0A F6 | 	mov	local04, result1 wz
2a8d0                 | '       return _seterror( 7 );
2a8d0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a8d4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a8d8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a8dc     01 FA 65 A6 |  if_e	neg	result1, #1
2a8e0     98 00 90 AD |  if_e	jmp	#LR__4386
2a8e4     12 13 02 F6 | 	mov	arg01, local04
2a8e8     00 14 06 F6 | 	mov	arg02, #0
2a8ec     03 00 00 FF 
2a8f0     3C 16 06 F6 | 	mov	arg03, ##1596
2a8f4     98 00 A0 FD | 	call	#\builtin_bytefill_
2a8f8                 | '   switch (flags & 3) {
2a8f8     11 27 02 F6 | 	mov	local05, local03
2a8fc     03 26 0E F5 | 	and	local05, #3 wz
2a900     0C 00 90 AD |  if_e	jmp	#LR__4380
2a904     01 26 0E F2 | 	cmp	local05, #1 wz
2a908     0C 00 90 AD |  if_e	jmp	#LR__4381
2a90c     10 00 90 FD | 	jmp	#LR__4382
2a910                 | LR__4380
2a910     01 28 06 F6 | 	mov	local06, #1
2a914                 | '       fs_flags =  0x01 ;
2a914                 | '       break;
2a914     0C 00 90 FD | 	jmp	#LR__4383
2a918                 | LR__4381
2a918     02 28 06 F6 | 	mov	local06, #2
2a91c                 | '       fs_flags =  0x02 ;
2a91c                 | '       break;
2a91c     04 00 90 FD | 	jmp	#LR__4383
2a920                 | LR__4382
2a920     03 28 06 F6 | 	mov	local06, #3
2a924                 | '       fs_flags =  0x01  |  0x02 ;
2a924                 | '       break;
2a924                 | LR__4383
2a924     08 22 CE F7 | 	test	local03, #8 wz
2a928     18 28 46 55 |  if_ne	or	local06, #24
2a92c     08 00 90 5D |  if_ne	jmp	#LR__4384
2a930     20 22 CE F7 | 	test	local03, #32 wz
2a934     30 28 46 55 |  if_ne	or	local06, #48
2a938                 | LR__4384
2a938     02 00 00 FF 
2a93c     14 24 06 F1 | 	add	local04, ##1044
2a940     12 13 02 F6 | 	mov	arg01, local04
2a944     02 00 00 FF 
2a948     14 24 86 F1 | 	sub	local04, ##1044
2a94c     10 15 02 F6 | 	mov	arg02, local02
2a950     14 17 02 F6 | 	mov	arg03, local06
2a954     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2a958     FD 2A 0A F6 | 	mov	local07, result1 wz
2a95c     14 00 90 AD |  if_e	jmp	#LR__4385
2a960     12 13 02 F6 | 	mov	arg01, local04
2a964                 | '     return _gc_free(ptr);
2a964     14 59 BF FD | 	call	#__system___gc_free
2a968                 | '     free(f);
2a968                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a968                 | '     return _set_dos_error(r);
2a968     15 13 02 F6 | 	mov	arg01, local07
2a96c     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a970     08 00 90 FD | 	jmp	#LR__4386
2a974                 | LR__4385
2a974     0F 25 62 FC | 	wrlong	local04, local01
2a978                 | '   }
2a978                 | '   fil->vfsdata = f;
2a978                 | '   return 0;
2a978     00 FA 05 F6 | 	mov	result1, #0
2a97c                 | LR__4386
2a97c     A7 F0 03 F6 | 	mov	ptra, fp
2a980     B2 00 A0 FD | 	call	#popregs_
2a984                 | _fatfs_cc_v_open_ret
2a984     2D 00 64 FD | 	ret
2a988                 | 
2a988                 | _fatfs_cc_v_flush
2a988     09 13 02 FB | 	rdlong	arg01, arg01
2a98c     02 00 00 FF 
2a990     14 12 0E F1 | 	add	arg01, ##1044 wz
2a994                 | '         return _seterror( 5 );
2a994     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a998     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a99c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a9a0     01 FA 65 A6 |  if_e	neg	result1, #1
2a9a4     0C 00 90 AD |  if_e	jmp	#LR__4390
2a9a8     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2a9ac     FD 12 02 F6 | 	mov	arg01, result1
2a9b0                 | '     }
2a9b0                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a9b0                 | '     result = f_sync(f);
2a9b0                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a9b0                 | '     return _set_dos_error(result);
2a9b0     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a9b4                 | LR__4390
2a9b4                 | _fatfs_cc_v_flush_ret
2a9b4     2D 00 64 FD | 	ret
2a9b8                 | 
2a9b8                 | _fatfs_cc_v_init
2a9b8                 | ' {
2a9b8                 | '     return 0;
2a9b8     00 FA 05 F6 | 	mov	result1, #0
2a9bc                 | _fatfs_cc_v_init_ret
2a9bc     2D 00 64 FD | 	ret
2a9c0                 | 
2a9c0                 | _fatfs_cc_v_deinit
2a9c0     5C 01 00 FF 
2a9c4     34 15 06 F6 | 	mov	arg02, ##@LR__4586
2a9c8     00 12 06 F6 | 	mov	arg01, #0
2a9cc     00 16 06 F6 | 	mov	arg03, #0
2a9d0     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2a9d4     01 00 00 FF 
2a9d8     08 E4 05 F1 | 	add	objptr, ##520
2a9dc     F2 12 02 FB | 	rdlong	arg01, objptr
2a9e0     04 E4 05 F1 | 	add	objptr, #4
2a9e4     F2 14 02 FB | 	rdlong	arg02, objptr
2a9e8     01 00 00 FF 
2a9ec     0C E4 85 F1 | 	sub	objptr, ##524
2a9f0     54 40 BF FD | 	call	#__system___freepins
2a9f4                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a9f4                 | '     _freepins(f_pinmask);
2a9f4                 | '     return 0;
2a9f4     00 FA 05 F6 | 	mov	result1, #0
2a9f8                 | _fatfs_cc_v_deinit_ret
2a9f8     2D 00 64 FD | 	ret
2a9fc                 | 
2a9fc                 | _fatfs_cc_get_vfs
2a9fc     01 4A 05 F6 | 	mov	COUNT_, #1
2aa00     A8 00 A0 FD | 	call	#pushregs_
2aa04     09 1F 02 F6 | 	mov	local01, arg01
2aa08     50 12 06 F6 | 	mov	arg01, #80
2aa0c     30 57 BF FD | 	call	#__system___gc_alloc_managed
2aa10     FD 12 02 F6 | 	mov	arg01, result1
2aa14     F2 FA 01 F6 | 	mov	result1, objptr
2aa18     00 28 04 FF 
2aa1c     00 FA 45 F5 | 	or	result1, ##139460608
2aa20     09 FB 61 FC | 	wrlong	result1, arg01
2aa24     F2 FA 01 F6 | 	mov	result1, objptr
2aa28     00 30 04 FF 
2aa2c     00 FA 45 F5 | 	or	result1, ##140509184
2aa30     04 12 06 F1 | 	add	arg01, #4
2aa34     09 FB 61 FC | 	wrlong	result1, arg01
2aa38     F2 FA 01 F6 | 	mov	result1, objptr
2aa3c     00 38 04 FF 
2aa40     00 FA 45 F5 | 	or	result1, ##141557760
2aa44     04 12 06 F1 | 	add	arg01, #4
2aa48     09 FB 61 FC | 	wrlong	result1, arg01
2aa4c     F2 FA 01 F6 | 	mov	result1, objptr
2aa50     00 40 04 FF 
2aa54     00 FA 45 F5 | 	or	result1, ##142606336
2aa58     04 12 06 F1 | 	add	arg01, #4
2aa5c     09 FB 61 FC | 	wrlong	result1, arg01
2aa60     F2 FA 01 F6 | 	mov	result1, objptr
2aa64     00 48 04 FF 
2aa68     00 FA 45 F5 | 	or	result1, ##143654912
2aa6c     04 12 06 F1 | 	add	arg01, #4
2aa70     09 FB 61 FC | 	wrlong	result1, arg01
2aa74     04 12 06 F1 | 	add	arg01, #4
2aa78     09 01 68 FC | 	wrlong	#0, arg01
2aa7c     04 12 06 F1 | 	add	arg01, #4
2aa80     09 1F 62 FC | 	wrlong	local01, arg01
2aa84     04 12 06 F1 | 	add	arg01, #4
2aa88     09 01 68 FC | 	wrlong	#0, arg01
2aa8c     F2 FA 01 F6 | 	mov	result1, objptr
2aa90     00 50 04 FF 
2aa94     00 FA 45 F5 | 	or	result1, ##144703488
2aa98     04 12 06 F1 | 	add	arg01, #4
2aa9c     09 FB 61 FC | 	wrlong	result1, arg01
2aaa0     F2 FA 01 F6 | 	mov	result1, objptr
2aaa4     00 58 04 FF 
2aaa8     00 FA 45 F5 | 	or	result1, ##145752064
2aaac     04 12 06 F1 | 	add	arg01, #4
2aab0     09 FB 61 FC | 	wrlong	result1, arg01
2aab4     F2 FA 01 F6 | 	mov	result1, objptr
2aab8     00 60 04 FF 
2aabc     00 FA 45 F5 | 	or	result1, ##146800640
2aac0     04 12 06 F1 | 	add	arg01, #4
2aac4     09 FB 61 FC | 	wrlong	result1, arg01
2aac8     F2 FA 01 F6 | 	mov	result1, objptr
2aacc     00 68 04 FF 
2aad0     00 FA 45 F5 | 	or	result1, ##147849216
2aad4     04 12 06 F1 | 	add	arg01, #4
2aad8     09 FB 61 FC | 	wrlong	result1, arg01
2aadc     F2 FA 01 F6 | 	mov	result1, objptr
2aae0     00 70 04 FF 
2aae4     00 FA 45 F5 | 	or	result1, ##148897792
2aae8     04 12 06 F1 | 	add	arg01, #4
2aaec     09 FB 61 FC | 	wrlong	result1, arg01
2aaf0     F2 FA 01 F6 | 	mov	result1, objptr
2aaf4     00 78 04 FF 
2aaf8     00 FA 45 F5 | 	or	result1, ##149946368
2aafc     04 12 06 F1 | 	add	arg01, #4
2ab00     09 FB 61 FC | 	wrlong	result1, arg01
2ab04     F2 FA 01 F6 | 	mov	result1, objptr
2ab08     00 80 04 FF 
2ab0c     00 FA 45 F5 | 	or	result1, ##150994944
2ab10     04 12 06 F1 | 	add	arg01, #4
2ab14     09 FB 61 FC | 	wrlong	result1, arg01
2ab18     F2 FA 01 F6 | 	mov	result1, objptr
2ab1c     00 88 04 FF 
2ab20     00 FA 45 F5 | 	or	result1, ##152043520
2ab24     04 12 06 F1 | 	add	arg01, #4
2ab28     09 FB 61 FC | 	wrlong	result1, arg01
2ab2c     F2 FA 01 F6 | 	mov	result1, objptr
2ab30     00 90 04 FF 
2ab34     00 FA 45 F5 | 	or	result1, ##153092096
2ab38     04 12 06 F1 | 	add	arg01, #4
2ab3c     09 FB 61 FC | 	wrlong	result1, arg01
2ab40     F2 FA 01 F6 | 	mov	result1, objptr
2ab44     00 98 04 FF 
2ab48     00 FA 45 F5 | 	or	result1, ##154140672
2ab4c     04 12 06 F1 | 	add	arg01, #4
2ab50     09 FB 61 FC | 	wrlong	result1, arg01
2ab54     F2 FA 01 F6 | 	mov	result1, objptr
2ab58     00 A0 04 FF 
2ab5c     00 FA 45 F5 | 	or	result1, ##155189248
2ab60     04 12 06 F1 | 	add	arg01, #4
2ab64     09 FB 61 FC | 	wrlong	result1, arg01
2ab68     F2 FA 01 F6 | 	mov	result1, objptr
2ab6c     00 A8 04 FF 
2ab70     00 FA 45 F5 | 	or	result1, ##156237824
2ab74     04 12 06 F1 | 	add	arg01, #4
2ab78     09 FB 61 FC | 	wrlong	result1, arg01
2ab7c     4C 12 86 F1 | 	sub	arg01, #76
2ab80                 | ' 
2ab80                 | '     v->close = &v_close;
2ab80                 | '     v->read = &v_read;
2ab80                 | '     v->write = &v_write;
2ab80                 | '     v->lseek = &v_lseek;
2ab80                 | '     v->ioctl = &v_ioctl;
2ab80                 | '     v->flush = 0;
2ab80                 | '     v->vfs_data = ptr;
2ab80                 | '     v->reserved = 0;
2ab80                 | ' 
2ab80                 | '     v->open = &v_open;
2ab80                 | '     v->creat = &v_creat;
2ab80                 | '     v->opendir = &v_opendir;
2ab80                 | '     v->closedir = &v_closedir;
2ab80                 | '     v->readdir = &v_readdir;
2ab80                 | '     v->stat = &v_stat;
2ab80                 | ' 
2ab80                 | '     v->mkdir = &v_mkdir;
2ab80                 | '     v->rmdir = &v_rmdir;
2ab80                 | ' 
2ab80                 | '     v->remove = &v_remove;
2ab80                 | '     v->rename = &v_rename;
2ab80                 | ' 
2ab80                 | '     v->init = &v_init;
2ab80                 | '     v->deinit = &v_deinit;
2ab80                 | ' 
2ab80                 | '     return v;
2ab80     09 FB 01 F6 | 	mov	result1, arg01
2ab84     A7 F0 03 F6 | 	mov	ptra, fp
2ab88     B2 00 A0 FD | 	call	#popregs_
2ab8c                 | _fatfs_cc_get_vfs_ret
2ab8c     2D 00 64 FD | 	ret
2ab90                 | 
2ab90                 | _fatfs_cc_xmit_mmc_1043
2ab90     01 00 00 FF 
2ab94     10 E4 05 F1 | 	add	objptr, ##528
2ab98     F2 00 02 FB | 	rdlong	_var01, objptr
2ab9c     08 E4 05 F1 | 	add	objptr, #8
2aba0     F2 02 02 FB | 	rdlong	_var02, objptr
2aba4     01 00 00 FF 
2aba8     18 E4 85 F1 | 	sub	objptr, ##536
2abac     40 02 62 FD | 	dirl	_var02
2abb0     28 02 64 FD | 	setq	#1
2abb4     09 05 02 FB | 	rdlong	_var03, arg01
2abb8     69 04 62 FD | 	rev	_var03
2abbc     1B 04 FE F9 | 	movbyts	_var03, #27
2abc0     01 05 22 FC | 	wypin	_var03, _var02
2abc4     0A 05 02 F6 | 	mov	_var03, arg02
2abc8     02 14 4E F0 | 	shr	arg02, #2 wz
2abcc     03 04 66 F0 | 	shl	_var03, #3
2abd0     00 05 22 FC | 	wypin	_var03, _var01
2abd4     41 02 62 FD | 	dirh	_var02
2abd8     08 12 06 F1 | 	add	arg01, #8
2abdc     69 06 62 FD | 	rev	_var04
2abe0     1B 06 FE F9 | 	movbyts	_var04, #27
2abe4                 | LR__4400
2abe4     01 07 22 5C |  if_ne	wypin	_var04, _var02
2abe8     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2abec     04 12 06 51 |  if_ne	add	arg01, #4
2abf0     69 06 62 5D |  if_ne	rev	_var04
2abf4     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2abf8                 | LR__4401
2abf8     40 02 72 5D |  if_ne	testp	_var02 wc
2abfc     F8 FF 9F 1D |  if_a	jmp	#LR__4401
2ac00     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4400
2ac04                 | LR__4402
2ac04     40 00 72 FD | 	testp	_var01 wc
2ac08     F8 FF 9F 3D |  if_ae	jmp	#LR__4402
2ac0c     40 02 62 FD | 	dirl	_var02
2ac10     FF FF FF FF 
2ac14     01 FF 2B FC | 	wypin	##-1, _var02
2ac18     41 02 62 FD | 	dirh	_var02
2ac1c                 | _fatfs_cc_xmit_mmc_1043_ret
2ac1c     2D 00 64 FD | 	ret
2ac20                 | 
2ac20                 | _fatfs_cc_rcvr_mmc_1050
2ac20     01 00 00 FF 
2ac24     10 E4 05 F1 | 	add	objptr, ##528
2ac28     F2 00 02 FB | 	rdlong	_var01, objptr
2ac2c     0C E4 05 F1 | 	add	objptr, #12
2ac30     F2 02 02 FB | 	rdlong	_var02, objptr
2ac34     01 00 00 FF 
2ac38     1C E4 85 F1 | 	sub	objptr, ##540
2ac3c     01 03 08 FC | 	akpin	_var02
2ac40     0A 05 0A F6 | 	mov	_var03, arg02 wz
2ac44     02 04 4E F0 | 	shr	_var03, #2 wz
2ac48     30 00 90 AD |  if_e	jmp	#LR__4412
2ac4c     02 07 02 F6 | 	mov	_var04, _var03
2ac50     05 06 66 F0 | 	shl	_var04, #5
2ac54     00 07 22 FC | 	wypin	_var04, _var01
2ac58     01 7F 18 FC | 	wxpin	#63, _var02
2ac5c                 | LR__4410
2ac5c                 | LR__4411
2ac5c     40 02 72 FD | 	testp	_var02 wc
2ac60     F8 FF 9F 3D |  if_ae	jmp	#LR__4411
2ac64     01 07 8A FA | 	rdpin	_var04, _var02
2ac68     69 06 62 FD | 	rev	_var04
2ac6c     1B 06 FE F9 | 	movbyts	_var04, #27
2ac70     09 07 62 FC | 	wrlong	_var04, arg01
2ac74     04 12 06 F1 | 	add	arg01, #4
2ac78     F8 05 6E FB | 	djnz	_var03, #LR__4410
2ac7c                 | LR__4412
2ac7c     03 14 0E F5 | 	and	arg02, #3 wz
2ac80     24 00 90 AD |  if_e	jmp	#LR__4415
2ac84     01 4F 18 FC | 	wxpin	#39, _var02
2ac88                 | LR__4413
2ac88     00 11 28 FC | 	wypin	#8, _var01
2ac8c                 | LR__4414
2ac8c     40 02 72 FD | 	testp	_var02 wc
2ac90     F8 FF 9F 3D |  if_ae	jmp	#LR__4414
2ac94     01 07 8A FA | 	rdpin	_var04, _var02
2ac98     69 06 62 FD | 	rev	_var04
2ac9c     09 07 42 FC | 	wrbyte	_var04, arg01
2aca0     01 12 06 F1 | 	add	arg01, #1
2aca4     F8 15 6E FB | 	djnz	arg02, #LR__4413
2aca8                 | LR__4415
2aca8                 | _fatfs_cc_rcvr_mmc_1050_ret
2aca8     2D 00 64 FD | 	ret
2acac                 | 
2acac                 | _fatfs_cc_wait_ready_1054
2acac     01 4A 05 F6 | 	mov	COUNT_, #1
2acb0     A8 00 A0 FD | 	call	#pushregs_
2acb4     10 F0 07 F1 | 	add	ptra, #16
2acb8     1A FA 61 FD | 	getct	result1
2acbc     08 4E 05 F1 | 	add	fp, #8
2acc0     A7 FA 61 FC | 	wrlong	result1, fp
2acc4     14 1E 06 FB | 	rdlong	local01, #20
2acc8     01 1E 46 F0 | 	shr	local01, #1
2accc     04 4E 05 F1 | 	add	fp, #4
2acd0     A7 1E 62 FC | 	wrlong	local01, fp
2acd4     0C 4E 85 F1 | 	sub	fp, #12
2acd8                 | ' {
2acd8                 | ' 	BYTE d;
2acd8                 | ' 	UINT tmr, tmout;
2acd8                 | ' 
2acd8                 | ' 	tmr = _cnt();
2acd8                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2acd8                 | ' 	for(;;) {
2acd8                 | LR__4420
2acd8     04 4E 05 F1 | 	add	fp, #4
2acdc     A7 12 02 F6 | 	mov	arg01, fp
2ace0     04 4E 85 F1 | 	sub	fp, #4
2ace4     01 14 06 F6 | 	mov	arg02, #1
2ace8     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2acec     04 4E 05 F1 | 	add	fp, #4
2acf0     A7 1E C2 FA | 	rdbyte	local01, fp
2acf4     04 4E 85 F1 | 	sub	fp, #4
2acf8     FF 1E 0E F2 | 	cmp	local01, #255 wz
2acfc     01 FA 05 A6 |  if_e	mov	result1, #1
2ad00     28 00 90 AD |  if_e	jmp	#LR__4421
2ad04     1A FA 61 FD | 	getct	result1
2ad08     08 4E 05 F1 | 	add	fp, #8
2ad0c     A7 1E 02 FB | 	rdlong	local01, fp
2ad10     0F FB 81 F1 | 	sub	result1, local01
2ad14     04 4E 05 F1 | 	add	fp, #4
2ad18     A7 1E 02 FB | 	rdlong	local01, fp
2ad1c     0C 4E 85 F1 | 	sub	fp, #12
2ad20     0F FB 11 F2 | 	cmp	result1, local01 wc
2ad24     00 FA 05 36 |  if_ae	mov	result1, #0
2ad28     AC FF 9F CD |  if_b	jmp	#LR__4420
2ad2c                 | LR__4421
2ad2c     A7 F0 03 F6 | 	mov	ptra, fp
2ad30     B2 00 A0 FD | 	call	#popregs_
2ad34                 | _fatfs_cc_wait_ready_1054_ret
2ad34     2D 00 64 FD | 	ret
2ad38                 | 
2ad38                 | _fatfs_cc_deselect_1060
2ad38     00 4A 05 F6 | 	mov	COUNT_, #0
2ad3c     A8 00 A0 FD | 	call	#pushregs_
2ad40     14 F0 07 F1 | 	add	ptra, #20
2ad44     01 00 00 FF 
2ad48     14 E4 05 F1 | 	add	objptr, ##532
2ad4c     F2 14 02 FB | 	rdlong	arg02, objptr
2ad50     04 4E 05 F1 | 	add	fp, #4
2ad54     A7 14 62 FC | 	wrlong	arg02, fp
2ad58     04 E4 85 F1 | 	sub	objptr, #4
2ad5c     F2 14 02 FB | 	rdlong	arg02, objptr
2ad60     04 4E 05 F1 | 	add	fp, #4
2ad64     A7 14 62 FC | 	wrlong	arg02, fp
2ad68     08 E4 05 F1 | 	add	objptr, #8
2ad6c     F2 14 02 FB | 	rdlong	arg02, objptr
2ad70     04 4E 05 F1 | 	add	fp, #4
2ad74     A7 14 62 FC | 	wrlong	arg02, fp
2ad78     04 E4 05 F1 | 	add	objptr, #4
2ad7c     F2 14 02 FB | 	rdlong	arg02, objptr
2ad80     01 00 00 FF 
2ad84     1C E4 85 F1 | 	sub	objptr, ##540
2ad88     04 4E 05 F1 | 	add	fp, #4
2ad8c     A7 14 62 FC | 	wrlong	arg02, fp
2ad90     0C 4E 85 F1 | 	sub	fp, #12
2ad94     A7 12 02 FB | 	rdlong	arg01, fp
2ad98     04 4E 85 F1 | 	sub	fp, #4
2ad9c     59 12 62 FD | 	drvh	arg01
2ada0     1F 20 64 FD | 	waitx	#16
2ada4     A7 12 02 F6 | 	mov	arg01, fp
2ada8     01 14 06 F6 | 	mov	arg02, #1
2adac     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2adb0     A7 F0 03 F6 | 	mov	ptra, fp
2adb4     B2 00 A0 FD | 	call	#popregs_
2adb8                 | _fatfs_cc_deselect_1060_ret
2adb8     2D 00 64 FD | 	ret
2adbc                 | 
2adbc                 | _fatfs_cc_select_1064
2adbc     00 4A 05 F6 | 	mov	COUNT_, #0
2adc0     A8 00 A0 FD | 	call	#pushregs_
2adc4     10 F0 07 F1 | 	add	ptra, #16
2adc8     01 00 00 FF 
2adcc     14 E4 05 F1 | 	add	objptr, ##532
2add0     F2 14 02 FB | 	rdlong	arg02, objptr
2add4     08 4E 05 F1 | 	add	fp, #8
2add8     A7 14 62 FC | 	wrlong	arg02, fp
2addc     08 E4 05 F1 | 	add	objptr, #8
2ade0     F2 12 02 FB | 	rdlong	arg01, objptr
2ade4     01 00 00 FF 
2ade8     1C E4 85 F1 | 	sub	objptr, ##540
2adec     04 4E 05 F1 | 	add	fp, #4
2adf0     A7 12 62 FC | 	wrlong	arg01, fp
2adf4     50 12 62 FD | 	fltl	arg01
2adf8     04 4E 85 F1 | 	sub	fp, #4
2adfc     A7 12 02 FB | 	rdlong	arg01, fp
2ae00     58 12 62 FD | 	drvl	arg01
2ae04     1F 20 64 FD | 	waitx	#16
2ae08     04 4E 05 F1 | 	add	fp, #4
2ae0c     A7 12 02 FB | 	rdlong	arg01, fp
2ae10     41 12 62 FD | 	dirh	arg01
2ae14     08 4E 85 F1 | 	sub	fp, #8
2ae18     A7 12 02 F6 | 	mov	arg01, fp
2ae1c     04 4E 85 F1 | 	sub	fp, #4
2ae20     01 14 06 F6 | 	mov	arg02, #1
2ae24     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2ae28     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1054
2ae2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae30     01 FA 05 56 |  if_ne	mov	result1, #1
2ae34     08 00 90 5D |  if_ne	jmp	#LR__4430
2ae38     FC FE BF FD | 	call	#_fatfs_cc_deselect_1060
2ae3c                 | ' 
2ae3c                 | ' 	deselect();
2ae3c                 | ' 	return 0;
2ae3c     00 FA 05 F6 | 	mov	result1, #0
2ae40                 | LR__4430
2ae40     A7 F0 03 F6 | 	mov	ptra, fp
2ae44     B2 00 A0 FD | 	call	#popregs_
2ae48                 | _fatfs_cc_select_1064_ret
2ae48     2D 00 64 FD | 	ret
2ae4c                 | 
2ae4c                 | _fatfs_cc_rcvr_datablock_1068
2ae4c     01 4A 05 F6 | 	mov	COUNT_, #1
2ae50     A8 00 A0 FD | 	call	#pushregs_
2ae54     18 F0 07 F1 | 	add	ptra, #24
2ae58     04 4E 05 F1 | 	add	fp, #4
2ae5c     A7 12 62 FC | 	wrlong	arg01, fp
2ae60     04 4E 05 F1 | 	add	fp, #4
2ae64     A7 14 62 FC | 	wrlong	arg02, fp
2ae68     1A FA 61 FD | 	getct	result1
2ae6c     08 4E 05 F1 | 	add	fp, #8
2ae70     A7 FA 61 FC | 	wrlong	result1, fp
2ae74     14 1E 06 FB | 	rdlong	local01, #20
2ae78     03 1E 46 F0 | 	shr	local01, #3
2ae7c     04 4E 05 F1 | 	add	fp, #4
2ae80     A7 1E 62 FC | 	wrlong	local01, fp
2ae84     14 4E 85 F1 | 	sub	fp, #20
2ae88                 | ' 	BYTE *buff,
2ae88                 | ' 	UINT btr
2ae88                 | ' )
2ae88                 | ' {
2ae88                 | ' 	BYTE d[2];
2ae88                 | ' 	UINT tmr, tmout;
2ae88                 | ' 
2ae88                 | ' 	tmr = _cnt();
2ae88                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2ae88                 | ' 	for(;;) {
2ae88                 | LR__4440
2ae88     0C 4E 05 F1 | 	add	fp, #12
2ae8c     A7 12 02 F6 | 	mov	arg01, fp
2ae90     0C 4E 85 F1 | 	sub	fp, #12
2ae94     01 14 06 F6 | 	mov	arg02, #1
2ae98     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2ae9c     0C 4E 05 F1 | 	add	fp, #12
2aea0     A7 1E C2 FA | 	rdbyte	local01, fp
2aea4     0C 4E 85 F1 | 	sub	fp, #12
2aea8     FF 1E 0E F2 | 	cmp	local01, #255 wz
2aeac     28 00 90 5D |  if_ne	jmp	#LR__4441
2aeb0     1A FA 61 FD | 	getct	result1
2aeb4     FD 1E 02 F6 | 	mov	local01, result1
2aeb8     10 4E 05 F1 | 	add	fp, #16
2aebc     A7 14 02 FB | 	rdlong	arg02, fp
2aec0     0A 1F 82 F1 | 	sub	local01, arg02
2aec4     04 4E 05 F1 | 	add	fp, #4
2aec8     A7 14 02 FB | 	rdlong	arg02, fp
2aecc     14 4E 85 F1 | 	sub	fp, #20
2aed0     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2aed4     B0 FF 9F CD |  if_b	jmp	#LR__4440
2aed8                 | LR__4441
2aed8     0C 4E 05 F1 | 	add	fp, #12
2aedc     A7 1E C2 FA | 	rdbyte	local01, fp
2aee0     0C 4E 85 F1 | 	sub	fp, #12
2aee4     FE 1E 0E F2 | 	cmp	local01, #254 wz
2aee8     00 FA 05 56 |  if_ne	mov	result1, #0
2aeec     30 00 90 5D |  if_ne	jmp	#LR__4442
2aef0     04 4E 05 F1 | 	add	fp, #4
2aef4     A7 12 02 FB | 	rdlong	arg01, fp
2aef8     04 4E 05 F1 | 	add	fp, #4
2aefc     A7 14 02 FB | 	rdlong	arg02, fp
2af00     08 4E 85 F1 | 	sub	fp, #8
2af04     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2af08     0C 4E 05 F1 | 	add	fp, #12
2af0c     A7 12 02 F6 | 	mov	arg01, fp
2af10     0C 4E 85 F1 | 	sub	fp, #12
2af14     02 14 06 F6 | 	mov	arg02, #2
2af18     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2af1c                 | ' 
2af1c                 | ' 	rcvr_mmc(buff, btr);
2af1c                 | ' 	rcvr_mmc(d, 2);
2af1c                 | ' 
2af1c                 | ' 	return 1;
2af1c     01 FA 05 F6 | 	mov	result1, #1
2af20                 | LR__4442
2af20     A7 F0 03 F6 | 	mov	ptra, fp
2af24     B2 00 A0 FD | 	call	#popregs_
2af28                 | _fatfs_cc_rcvr_datablock_1068_ret
2af28     2D 00 64 FD | 	ret
2af2c                 | 
2af2c                 | _fatfs_cc_xmit_datablock_1070
2af2c     00 4A 05 F6 | 	mov	COUNT_, #0
2af30     A8 00 A0 FD | 	call	#pushregs_
2af34     10 F0 07 F1 | 	add	ptra, #16
2af38     04 4E 05 F1 | 	add	fp, #4
2af3c     A7 12 62 FC | 	wrlong	arg01, fp
2af40     04 4E 05 F1 | 	add	fp, #4
2af44     A7 14 42 FC | 	wrbyte	arg02, fp
2af48     08 4E 85 F1 | 	sub	fp, #8
2af4c     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1054
2af50     00 FA 0D F2 | 	cmp	result1, #0 wz
2af54     00 FA 05 A6 |  if_e	mov	result1, #0
2af58     90 00 90 AD |  if_e	jmp	#LR__4451
2af5c     08 4E 05 F1 | 	add	fp, #8
2af60     A7 14 C2 FA | 	rdbyte	arg02, fp
2af64     04 4E 05 F1 | 	add	fp, #4
2af68     A7 14 42 FC | 	wrbyte	arg02, fp
2af6c     A7 12 02 F6 | 	mov	arg01, fp
2af70     0C 4E 85 F1 | 	sub	fp, #12
2af74     01 14 06 F6 | 	mov	arg02, #1
2af78     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2af7c     08 4E 05 F1 | 	add	fp, #8
2af80     A7 14 C2 FA | 	rdbyte	arg02, fp
2af84     08 4E 85 F1 | 	sub	fp, #8
2af88     FD 14 0E F2 | 	cmp	arg02, #253 wz
2af8c     58 00 90 AD |  if_e	jmp	#LR__4450
2af90     04 4E 05 F1 | 	add	fp, #4
2af94     A7 12 02 FB | 	rdlong	arg01, fp
2af98     04 4E 85 F1 | 	sub	fp, #4
2af9c     09 14 C6 F9 | 	decod	arg02, #9
2afa0     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2afa4     0C 4E 05 F1 | 	add	fp, #12
2afa8     A7 12 02 F6 | 	mov	arg01, fp
2afac     0C 4E 85 F1 | 	sub	fp, #12
2afb0     02 14 06 F6 | 	mov	arg02, #2
2afb4     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2afb8     0C 4E 05 F1 | 	add	fp, #12
2afbc     A7 12 02 F6 | 	mov	arg01, fp
2afc0     0C 4E 85 F1 | 	sub	fp, #12
2afc4     01 14 06 F6 | 	mov	arg02, #1
2afc8     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2afcc     0C 4E 05 F1 | 	add	fp, #12
2afd0     A7 14 C2 FA | 	rdbyte	arg02, fp
2afd4     0C 4E 85 F1 | 	sub	fp, #12
2afd8     1F 14 06 F5 | 	and	arg02, #31
2afdc     05 14 0E F2 | 	cmp	arg02, #5 wz
2afe0                 | ' 			return 0;
2afe0     00 FA 05 56 |  if_ne	mov	result1, #0
2afe4     04 00 90 5D |  if_ne	jmp	#LR__4451
2afe8                 | LR__4450
2afe8                 | ' 	}
2afe8                 | ' 
2afe8                 | ' 	return 1;
2afe8     01 FA 05 F6 | 	mov	result1, #1
2afec                 | LR__4451
2afec     A7 F0 03 F6 | 	mov	ptra, fp
2aff0     B2 00 A0 FD | 	call	#popregs_
2aff4                 | _fatfs_cc_xmit_datablock_1070_ret
2aff4     2D 00 64 FD | 	ret
2aff8                 | 
2aff8                 | _fatfs_cc_send_cmd_1074
2aff8     01 4A 05 F6 | 	mov	COUNT_, #1
2affc     A8 00 A0 FD | 	call	#pushregs_
2b000     1C F0 07 F1 | 	add	ptra, #28
2b004                 | _fatfs_cc_send_cmd_1074_enter
2b004     04 4E 05 F1 | 	add	fp, #4
2b008     A7 12 42 FC | 	wrbyte	arg01, fp
2b00c     04 4E 05 F1 | 	add	fp, #4
2b010     A7 14 62 FC | 	wrlong	arg02, fp
2b014     04 4E 85 F1 | 	sub	fp, #4
2b018     A7 FA C1 FA | 	rdbyte	result1, fp
2b01c     04 4E 85 F1 | 	sub	fp, #4
2b020     80 FA CD F7 | 	test	result1, #128 wz
2b024     44 00 90 AD |  if_e	jmp	#LR__4460
2b028     04 4E 05 F1 | 	add	fp, #4
2b02c     A7 14 C2 FA | 	rdbyte	arg02, fp
2b030     7F 14 06 F5 | 	and	arg02, #127
2b034     A7 14 42 FC | 	wrbyte	arg02, fp
2b038     04 4E 85 F1 | 	sub	fp, #4
2b03c     37 12 06 F6 | 	mov	arg01, #55
2b040     00 14 06 F6 | 	mov	arg02, #0
2b044     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1074
2b048     0C 4E 05 F1 | 	add	fp, #12
2b04c     A7 FA 41 FC | 	wrbyte	result1, fp
2b050     A7 14 C2 FA | 	rdbyte	arg02, fp
2b054     0C 4E 85 F1 | 	sub	fp, #12
2b058     02 14 16 F2 | 	cmp	arg02, #2 wc
2b05c     0C 4E 05 31 |  if_ae	add	fp, #12
2b060     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2b064     0C 4E 85 31 |  if_ae	sub	fp, #12
2b068     6C 01 90 3D |  if_ae	jmp	#LR__4464
2b06c                 | LR__4460
2b06c     04 4E 05 F1 | 	add	fp, #4
2b070     A7 14 C2 FA | 	rdbyte	arg02, fp
2b074     04 4E 85 F1 | 	sub	fp, #4
2b078     0C 14 0E F2 | 	cmp	arg02, #12 wz
2b07c     14 00 90 AD |  if_e	jmp	#LR__4461
2b080     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1060
2b084     34 FD BF FD | 	call	#_fatfs_cc_select_1064
2b088     00 FA 0D F2 | 	cmp	result1, #0 wz
2b08c     FF FA 05 A6 |  if_e	mov	result1, #255
2b090     44 01 90 AD |  if_e	jmp	#LR__4464
2b094                 | LR__4461
2b094     04 4E 05 F1 | 	add	fp, #4
2b098     A7 14 C2 FA | 	rdbyte	arg02, fp
2b09c     40 FA 05 F6 | 	mov	result1, #64
2b0a0     0A FB 41 F5 | 	or	result1, arg02
2b0a4     10 4E 05 F1 | 	add	fp, #16
2b0a8     A7 FA 41 FC | 	wrbyte	result1, fp
2b0ac     0C 4E 85 F1 | 	sub	fp, #12
2b0b0     A7 FA 01 FB | 	rdlong	result1, fp
2b0b4     18 FA 45 F0 | 	shr	result1, #24
2b0b8     0D 4E 05 F1 | 	add	fp, #13
2b0bc     A7 FA 41 FC | 	wrbyte	result1, fp
2b0c0     0D 4E 85 F1 | 	sub	fp, #13
2b0c4     A7 FA 01 FB | 	rdlong	result1, fp
2b0c8     10 FA 45 F0 | 	shr	result1, #16
2b0cc     0E 4E 05 F1 | 	add	fp, #14
2b0d0     A7 FA 41 FC | 	wrbyte	result1, fp
2b0d4     0E 4E 85 F1 | 	sub	fp, #14
2b0d8     A7 FA 01 FB | 	rdlong	result1, fp
2b0dc     08 FA 45 F0 | 	shr	result1, #8
2b0e0     0F 4E 05 F1 | 	add	fp, #15
2b0e4     A7 FA 41 FC | 	wrbyte	result1, fp
2b0e8     0F 4E 85 F1 | 	sub	fp, #15
2b0ec     A7 FA 01 FB | 	rdlong	result1, fp
2b0f0     10 4E 05 F1 | 	add	fp, #16
2b0f4     A7 FA 41 FC | 	wrbyte	result1, fp
2b0f8     0C 4E 85 F1 | 	sub	fp, #12
2b0fc     A7 02 48 FC | 	wrbyte	#1, fp
2b100     08 4E 85 F1 | 	sub	fp, #8
2b104     A7 FA C9 FA | 	rdbyte	result1, fp wz
2b108     04 4E 85 F1 | 	sub	fp, #4
2b10c     0C 4E 05 A1 |  if_e	add	fp, #12
2b110     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2b114     0C 4E 85 A1 |  if_e	sub	fp, #12
2b118     04 4E 05 F1 | 	add	fp, #4
2b11c     A7 FA C1 FA | 	rdbyte	result1, fp
2b120     04 4E 85 F1 | 	sub	fp, #4
2b124     08 FA 0D F2 | 	cmp	result1, #8 wz
2b128     0C 4E 05 A1 |  if_e	add	fp, #12
2b12c     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2b130     0C 4E 85 A1 |  if_e	sub	fp, #12
2b134     0C 4E 05 F1 | 	add	fp, #12
2b138     A7 14 C2 FA | 	rdbyte	arg02, fp
2b13c     0D 4E 05 F1 | 	add	fp, #13
2b140     A7 14 42 FC | 	wrbyte	arg02, fp
2b144     05 4E 85 F1 | 	sub	fp, #5
2b148     A7 12 02 F6 | 	mov	arg01, fp
2b14c     14 4E 85 F1 | 	sub	fp, #20
2b150     06 14 06 F6 | 	mov	arg02, #6
2b154     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2b158     04 4E 05 F1 | 	add	fp, #4
2b15c     A7 1E C2 FA | 	rdbyte	local01, fp
2b160     04 4E 85 F1 | 	sub	fp, #4
2b164     0C 1E 0E F2 | 	cmp	local01, #12 wz
2b168     10 4E 05 A1 |  if_e	add	fp, #16
2b16c     A7 12 02 A6 |  if_e	mov	arg01, fp
2b170     10 4E 85 A1 |  if_e	sub	fp, #16
2b174     01 14 06 A6 |  if_e	mov	arg02, #1
2b178     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1050
2b17c     0C 4E 05 F1 | 	add	fp, #12
2b180     A7 14 48 FC | 	wrbyte	#10, fp
2b184     0C 4E 85 F1 | 	sub	fp, #12
2b188                 | ' 	n = 10;
2b188                 | ' 	do
2b188                 | LR__4462
2b188     10 4E 05 F1 | 	add	fp, #16
2b18c     A7 12 02 F6 | 	mov	arg01, fp
2b190     10 4E 85 F1 | 	sub	fp, #16
2b194     01 14 06 F6 | 	mov	arg02, #1
2b198     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b19c     10 4E 05 F1 | 	add	fp, #16
2b1a0     A7 1E C2 FA | 	rdbyte	local01, fp
2b1a4     10 4E 85 F1 | 	sub	fp, #16
2b1a8     80 1E CE F7 | 	test	local01, #128 wz
2b1ac     1C 00 90 AD |  if_e	jmp	#LR__4463
2b1b0     0C 4E 05 F1 | 	add	fp, #12
2b1b4     A7 1E C2 FA | 	rdbyte	local01, fp
2b1b8     01 1E 86 F1 | 	sub	local01, #1
2b1bc     A7 1E 42 FC | 	wrbyte	local01, fp
2b1c0     A7 1E CA FA | 	rdbyte	local01, fp wz
2b1c4     0C 4E 85 F1 | 	sub	fp, #12
2b1c8     BC FF 9F 5D |  if_ne	jmp	#LR__4462
2b1cc                 | LR__4463
2b1cc                 | ' 
2b1cc                 | ' 	return d;
2b1cc     10 4E 05 F1 | 	add	fp, #16
2b1d0     A7 FA C1 FA | 	rdbyte	result1, fp
2b1d4     10 4E 85 F1 | 	sub	fp, #16
2b1d8                 | LR__4464
2b1d8     A7 F0 03 F6 | 	mov	ptra, fp
2b1dc     B2 00 A0 FD | 	call	#popregs_
2b1e0                 | _fatfs_cc_send_cmd_1074_ret
2b1e0     2D 00 64 FD | 	ret
2b1e4                 | 
2b1e4                 | _fatfs_cc_disk_deinitialize
2b1e4     03 4A 05 F6 | 	mov	COUNT_, #3
2b1e8     A8 00 A0 FD | 	call	#pushregs_
2b1ec     00 12 4E F2 | 	cmps	arg01, #0 wz
2b1f0     01 00 00 FF 
2b1f4     14 E4 05 F1 | 	add	objptr, ##532
2b1f8     F2 12 02 FB | 	rdlong	arg01, objptr
2b1fc     04 E4 85 F1 | 	sub	objptr, #4
2b200     F2 1E 02 FB | 	rdlong	local01, objptr
2b204     08 E4 05 F1 | 	add	objptr, #8
2b208     F2 20 02 FB | 	rdlong	local02, objptr
2b20c     04 E4 05 F1 | 	add	objptr, #4
2b210     F2 22 02 FB | 	rdlong	local03, objptr
2b214     01 00 00 FF 
2b218     1C E4 85 F1 | 	sub	objptr, ##540
2b21c                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b21c                 | '         return RES_NOTRDY;
2b21c     03 FA 05 56 |  if_ne	mov	result1, #3
2b220     2C 00 90 5D |  if_ne	jmp	#LR__4470
2b224     50 12 62 FD | 	fltl	arg01
2b228     09 01 08 FC | 	wrpin	#0, arg01
2b22c     50 1E 62 FD | 	fltl	local01
2b230     0F 01 08 FC | 	wrpin	#0, local01
2b234     50 20 62 FD | 	fltl	local02
2b238     10 01 08 FC | 	wrpin	#0, local02
2b23c     50 22 62 FD | 	fltl	local03
2b240     11 01 08 FC | 	wrpin	#0, local03
2b244     0A 12 06 F6 | 	mov	arg01, #10
2b248     A0 13 BF FD | 	call	#__system___waitms
2b24c                 | '     }
2b24c                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b24c                 | '     _pinclear(PIN_SS);
2b24c                 | '     _pinclear(PIN_CLK);
2b24c                 | '     _pinclear(PIN_DI);
2b24c                 | '     _pinclear(PIN_DO);
2b24c                 | ' 
2b24c                 | '     _waitms(10);
2b24c                 | ' 
2b24c                 | '     return 0;
2b24c     00 FA 05 F6 | 	mov	result1, #0
2b250                 | LR__4470
2b250     A7 F0 03 F6 | 	mov	ptra, fp
2b254     B2 00 A0 FD | 	call	#popregs_
2b258                 | _fatfs_cc_disk_deinitialize_ret
2b258     2D 00 64 FD | 	ret
2b25c                 | 
2b25c                 | _fatfs_cc_gettimeofday
2b25c     04 4A 05 F6 | 	mov	COUNT_, #4
2b260     A8 00 A0 FD | 	call	#pushregs_
2b264     09 1F 02 F6 | 	mov	local01, arg01
2b268     5C 0F BF FD | 	call	#__system___getus
2b26c     FD 12 02 F6 | 	mov	arg01, result1
2b270     02 00 00 FF 
2b274     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2b278     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2b27c     09 FB 01 F6 | 	mov	result1, arg01
2b280     10 FB 81 F1 | 	sub	result1, local02
2b284     A1 07 00 FF 
2b288     40 FA 15 FD | 	qdiv	result1, ##1000000
2b28c     02 00 00 FF 
2b290     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2b294     18 20 62 FD | 	getqx	local02
2b298     A1 07 00 FF 
2b29c     40 FA 15 FD | 	qdiv	result1, ##1000000
2b2a0     00 20 0E F2 | 	cmp	local02, #0 wz
2b2a4     19 22 62 FD | 	getqy	local03
2b2a8     28 00 90 AD |  if_e	jmp	#LR__4480
2b2ac     02 00 00 FF 
2b2b0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2b2b4     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2b2b8     10 25 02 F1 | 	add	local04, local02
2b2bc     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2b2c0     11 13 82 F1 | 	sub	arg01, local03
2b2c4     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2b2c8     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2b2cc     02 00 00 FF 
2b2d0     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2b2d4                 | LR__4480
2b2d4     02 00 00 FF 
2b2d8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2b2dc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2b2e0     02 00 00 FF 
2b2e4     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2b2e8     0F 25 62 FC | 	wrlong	local04, local01
2b2ec     04 1E 06 F1 | 	add	local01, #4
2b2f0     0F 23 62 FC | 	wrlong	local03, local01
2b2f4                 | '         lastsec += secs;
2b2f4                 | '         lastus = now - leftover;
2b2f4                 | '     }
2b2f4                 | '     tv->tv_sec = lastsec;
2b2f4                 | '     tv->tv_usec = leftover;
2b2f4                 | '     return 0;
2b2f4     00 FA 05 F6 | 	mov	result1, #0
2b2f8     A7 F0 03 F6 | 	mov	ptra, fp
2b2fc     B2 00 A0 FD | 	call	#popregs_
2b300                 | _fatfs_cc_gettimeofday_ret
2b300     2D 00 64 FD | 	ret
2b304                 | 
2b304                 | _fatfs_cc__is_leap_year
2b304     09 FB 51 F6 | 	abs	result1, arg01 wc
2b308     03 FA 05 F5 | 	and	result1, #3
2b30c     FD FA 89 F6 | 	negc	result1, result1 wz
2b310     38 00 90 5D |  if_ne	jmp	#LR__4491
2b314     09 FB 51 F6 | 	abs	result1, arg01 wc
2b318     64 FA 15 FD | 	qdiv	result1, #100
2b31c     19 FA 61 FD | 	getqy	result1
2b320     FD FA 89 F6 | 	negc	result1, result1 wz
2b324     1C 00 90 5D |  if_ne	jmp	#LR__4490
2b328     09 FB 51 F6 | 	abs	result1, arg01 wc
2b32c     90 FB 15 FD | 	qdiv	result1, #400
2b330                 | '       return (0 == y % 400);
2b330     00 FA 05 F6 | 	mov	result1, #0
2b334     19 00 62 FD | 	getqy	_var01
2b338     00 01 8A F6 | 	negc	_var01, _var01 wz
2b33c     01 FA 05 A6 |  if_e	mov	result1, #1
2b340     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2b344                 | LR__4490
2b344                 | '     return 1;
2b344     01 FA 05 F6 | 	mov	result1, #1
2b348     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2b34c                 | LR__4491
2b34c                 | '   }
2b34c                 | '   return 0;
2b34c     00 FA 05 F6 | 	mov	result1, #0
2b350                 | _fatfs_cc__is_leap_year_ret
2b350     2D 00 64 FD | 	ret
2b354                 | 
2b354                 | _fatfs_cc___tzoffset
2b354     09 01 0A F6 | 	mov	_var01, arg01 wz
2b358     FF FF FF FF 
2b35c     0A FF 6B FC | 	wrlong	##-1, arg02
2b360     01 02 06 F6 | 	mov	_var02, #1
2b364     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2b368                 | '                 return 0;
2b368     00 FA 05 A6 |  if_e	mov	result1, #0
2b36c     94 02 90 AD |  if_e	jmp	#LR__4517
2b370     0A 01 68 FC | 	wrlong	#0, arg02
2b374     02 00 00 FF 
2b378     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b37c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2b380                 | ' 
2b380                 | '        *hasdst = 0;
2b380                 | ' 
2b380                 | ' 	n = stdname;
2b380                 | '         while (*s && isalpha(*s)) {
2b380     02 00 00 FF 
2b384     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2b388     97 28 48 FB | 	callpa	#(@LR__4501-@LR__4500)>>2,fcache_load_ptr_
2b38c                 | LR__4500
2b38c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2b390     48 00 90 AD |  if_e	jmp	#LR__4502
2b394     00 13 C2 FA | 	rdbyte	arg01, _var01
2b398                 | ' {
2b398                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b398     80 12 36 F3 | 	fle	arg01, #128 wc
2b39c                 | '     return __ctype[c];
2b39c     02 00 00 FF 
2b3a0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b3a4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b3a8     09 FB C1 FA | 	rdbyte	result1, arg01
2b3ac     02 00 00 FF 
2b3b0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b3b4     0C FA CD F7 | 	test	result1, #12 wz
2b3b8     20 00 90 AD |  if_e	jmp	#LR__4502
2b3bc     00 09 02 F6 | 	mov	_var05, _var01
2b3c0     00 0B 02 F6 | 	mov	_var06, _var01
2b3c4     01 0A 06 F1 | 	add	_var06, #1
2b3c8     04 0D C2 FA | 	rdbyte	_var07, _var05
2b3cc     05 01 02 F6 | 	mov	_var01, _var06
2b3d0     03 0D 42 FC | 	wrbyte	_var07, _var04
2b3d4     01 06 06 F1 | 	add	_var04, #1
2b3d8     B0 FF 9F FD | 	jmp	#LR__4500
2b3dc                 | LR__4501
2b3dc                 | LR__4502
2b3dc     03 01 48 FC | 	wrbyte	#0, _var04
2b3e0     00 0E 06 F6 | 	mov	_var08, #0
2b3e4     00 05 C2 FA | 	rdbyte	_var03, _var01
2b3e8     2D 04 0E F2 | 	cmp	_var03, #45 wz
2b3ec     01 02 66 A6 |  if_e	neg	_var02, #1
2b3f0     01 00 06 A1 |  if_e	add	_var01, #1
2b3f4     97 28 48 FB | 	callpa	#(@LR__4504-@LR__4503)>>2,fcache_load_ptr_
2b3f8                 | '                 sgn = -1;
2b3f8                 | '                 s++;
2b3f8                 | '         }
2b3f8                 | '         while (isdigit(*s)) {
2b3f8                 | LR__4503
2b3f8     00 13 C2 FA | 	rdbyte	arg01, _var01
2b3fc                 | ' {
2b3fc                 | '   return  (__ctype_get(c) & 0x02 ) ;
2b3fc     80 12 36 F3 | 	fle	arg01, #128 wc
2b400                 | '     return __ctype[c];
2b400     02 00 00 FF 
2b404     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b408     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b40c     09 FB C1 FA | 	rdbyte	result1, arg01
2b410     02 00 00 FF 
2b414     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b418     02 FA CD F7 | 	test	result1, #2 wz
2b41c     28 00 90 AD |  if_e	jmp	#LR__4505
2b420     07 05 02 F6 | 	mov	_var03, _var08
2b424     02 04 66 F0 | 	shl	_var03, #2
2b428     07 05 02 F1 | 	add	_var03, _var08
2b42c     01 04 66 F0 | 	shl	_var03, #1
2b430     00 09 C2 FA | 	rdbyte	_var05, _var01
2b434     30 08 86 F1 | 	sub	_var05, #48
2b438     04 05 02 F1 | 	add	_var03, _var05
2b43c     02 0F 02 F6 | 	mov	_var08, _var03
2b440     01 00 06 F1 | 	add	_var01, #1
2b444     B0 FF 9F FD | 	jmp	#LR__4503
2b448                 | LR__4504
2b448                 | LR__4505
2b448     07 00 00 FF 
2b44c     10 0E 06 FD | 	qmul	_var08, ##3600
2b450     00 05 C2 FA | 	rdbyte	_var03, _var01
2b454     3A 04 0E F2 | 	cmp	_var03, #58 wz
2b458     18 10 62 FD | 	getqx	_var09
2b45c     70 00 90 5D |  if_ne	jmp	#LR__4509
2b460     00 0E 06 F6 | 	mov	_var08, #0
2b464     01 00 06 F1 | 	add	_var01, #1
2b468     97 28 48 FB | 	callpa	#(@LR__4507-@LR__4506)>>2,fcache_load_ptr_
2b46c                 | '                 x = 0;
2b46c                 | '                 s++;
2b46c                 | '                 while (isdigit(*s)) {
2b46c                 | LR__4506
2b46c     00 13 C2 FA | 	rdbyte	arg01, _var01
2b470                 | ' {
2b470                 | '   return  (__ctype_get(c) & 0x02 ) ;
2b470     80 12 36 F3 | 	fle	arg01, #128 wc
2b474                 | '     return __ctype[c];
2b474     02 00 00 FF 
2b478     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b47c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b480     09 FB C1 FA | 	rdbyte	result1, arg01
2b484     02 00 00 FF 
2b488     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b48c     02 FA CD F7 | 	test	result1, #2 wz
2b490     28 00 90 AD |  if_e	jmp	#LR__4508
2b494     07 05 02 F6 | 	mov	_var03, _var08
2b498     02 04 66 F0 | 	shl	_var03, #2
2b49c     07 05 02 F1 | 	add	_var03, _var08
2b4a0     01 04 66 F0 | 	shl	_var03, #1
2b4a4     00 09 C2 FA | 	rdbyte	_var05, _var01
2b4a8     30 08 86 F1 | 	sub	_var05, #48
2b4ac     04 05 02 F1 | 	add	_var03, _var05
2b4b0     02 0F 02 F6 | 	mov	_var08, _var03
2b4b4     01 00 06 F1 | 	add	_var01, #1
2b4b8     B0 FF 9F FD | 	jmp	#LR__4506
2b4bc                 | LR__4507
2b4bc                 | LR__4508
2b4bc     07 0D 02 F6 | 	mov	_var07, _var08
2b4c0     04 0C 66 F0 | 	shl	_var07, #4
2b4c4     07 0D 82 F1 | 	sub	_var07, _var08
2b4c8     02 0C 66 F0 | 	shl	_var07, #2
2b4cc     06 11 02 F1 | 	add	_var09, _var07
2b4d0                 | LR__4509
2b4d0     02 00 00 FF 
2b4d4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b4d8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2b4dc     00 13 C2 FA | 	rdbyte	arg01, _var01
2b4e0                 | ' {
2b4e0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b4e0     80 12 36 F3 | 	fle	arg01, #128 wc
2b4e4                 | '     return __ctype[c];
2b4e4     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2b4e8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b4ec     09 FB C1 FA | 	rdbyte	result1, arg01
2b4f0     02 00 00 FF 
2b4f4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b4f8     0C FA CD F7 | 	test	result1, #12 wz
2b4fc     50 00 90 AD |  if_e	jmp	#LR__4512
2b500     0A 03 68 FC | 	wrlong	#1, arg02
2b504                 | '                 *hasdst = 1;
2b504                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2b504                 | LR__4510
2b504     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2b508     44 00 90 AD |  if_e	jmp	#LR__4511
2b50c     00 13 C2 FA | 	rdbyte	arg01, _var01
2b510                 | ' {
2b510                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b510     80 12 36 F3 | 	fle	arg01, #128 wc
2b514                 | '     return __ctype[c];
2b514     02 00 00 FF 
2b518     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b51c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b520     09 FB C1 FA | 	rdbyte	result1, arg01
2b524     02 00 00 FF 
2b528     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b52c     0C FA CD F7 | 	test	result1, #12 wz
2b530     1C 00 90 AD |  if_e	jmp	#LR__4511
2b534     00 0B 02 F6 | 	mov	_var06, _var01
2b538     01 0A 06 F1 | 	add	_var06, #1
2b53c     00 0D C2 FA | 	rdbyte	_var07, _var01
2b540     05 01 02 F6 | 	mov	_var01, _var06
2b544     03 0D 42 FC | 	wrbyte	_var07, _var04
2b548     01 06 06 F1 | 	add	_var04, #1
2b54c     B4 FF 9F FD | 	jmp	#LR__4510
2b550                 | LR__4511
2b550                 | LR__4512
2b550     03 01 48 FC | 	wrbyte	#0, _var04
2b554     02 00 00 FF 
2b558     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b55c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2b560     02 00 00 FF 
2b564     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2b568     20 00 90 AD |  if_e	jmp	#LR__4513
2b56c     02 00 00 FF 
2b570     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b574     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b578     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2b57c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b580     02 00 00 FF 
2b584     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2b588     1C 00 90 FD | 	jmp	#LR__4514
2b58c                 | LR__4513
2b58c     02 00 00 FF 
2b590     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2b594     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b598     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2b59c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b5a0     02 00 00 FF 
2b5a4     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2b5a8                 | LR__4514
2b5a8     02 00 00 FF 
2b5ac     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b5b0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2b5b4     02 00 00 FF 
2b5b8     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2b5bc     20 00 90 AD |  if_e	jmp	#LR__4515
2b5c0     02 00 00 FF 
2b5c4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b5c8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b5cc     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2b5d0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b5d4     02 00 00 FF 
2b5d8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2b5dc     1C 00 90 FD | 	jmp	#LR__4516
2b5e0                 | LR__4515
2b5e0     02 00 00 FF 
2b5e4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b5e8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b5ec     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2b5f0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b5f4     02 00 00 FF 
2b5f8     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2b5fc                 | LR__4516
2b5fc     08 03 02 FD | 	qmul	_var02, _var09
2b600                 | ' 		_tzname[1] = stdname;
2b600                 | ' 
2b600                 | '         return sgn * off;
2b600     18 FA 61 FD | 	getqx	result1
2b604                 | LR__4517
2b604                 | _fatfs_cc___tzoffset_ret
2b604     2D 00 64 FD | 	ret
2b608                 | 
2b608                 | _fatfs_cc___indst
2b608     10 12 06 F1 | 	add	arg01, #16
2b60c     09 01 02 FB | 	rdlong	_var01, arg01
2b610     10 12 86 F1 | 	sub	arg01, #16
2b614     02 00 0E F2 | 	cmp	_var01, #2 wz
2b618     30 00 90 5D |  if_ne	jmp	#LR__4520
2b61c     07 00 06 F6 | 	mov	_var01, #7
2b620     18 12 06 F1 | 	add	arg01, #24
2b624     09 03 02 FB | 	rdlong	_var02, arg01
2b628     01 01 02 F1 | 	add	_var01, _var02
2b62c     0C 12 86 F1 | 	sub	arg01, #12
2b630     09 05 02 FB | 	rdlong	_var03, arg01
2b634     02 01 82 F1 | 	sub	_var01, _var03
2b638     00 00 56 F2 | 	cmps	_var01, #0 wc
2b63c                 | '                         return 1;
2b63c     01 FA 05 C6 |  if_b	mov	result1, #1
2b640     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2b644                 | '                 return 0;
2b644     00 FA 05 F6 | 	mov	result1, #0
2b648     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2b64c                 | LR__4520
2b64c     10 12 06 F1 | 	add	arg01, #16
2b650     09 01 02 FB | 	rdlong	_var01, arg01
2b654     10 12 86 F1 | 	sub	arg01, #16
2b658     0A 00 0E F2 | 	cmp	_var01, #10 wz
2b65c     28 00 90 5D |  if_ne	jmp	#LR__4521
2b660     18 12 06 F1 | 	add	arg01, #24
2b664     09 01 02 FB | 	rdlong	_var01, arg01
2b668     0C 12 86 F1 | 	sub	arg01, #12
2b66c     09 07 02 FB | 	rdlong	_var04, arg01
2b670     03 01 82 F1 | 	sub	_var01, _var04
2b674     00 00 56 F2 | 	cmps	_var01, #0 wc
2b678                 | '                         return 0;
2b678     00 FA 05 C6 |  if_b	mov	result1, #0
2b67c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2b680                 | '                 return 1;
2b680     01 FA 05 F6 | 	mov	result1, #1
2b684     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2b688                 | LR__4521
2b688                 | '         }
2b688                 | ' 
2b688                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2b688     00 00 06 F6 | 	mov	_var01, #0
2b68c     10 12 06 F1 | 	add	arg01, #16
2b690     09 03 02 FB | 	rdlong	_var02, arg01
2b694     10 12 86 F1 | 	sub	arg01, #16
2b698     03 02 56 F2 | 	cmps	_var02, #3 wc
2b69c     10 00 90 CD |  if_b	jmp	#LR__4522
2b6a0     10 12 06 F1 | 	add	arg01, #16
2b6a4     09 05 02 FB | 	rdlong	_var03, arg01
2b6a8     0A 04 56 F2 | 	cmps	_var03, #10 wc
2b6ac     01 00 06 C6 |  if_b	mov	_var01, #1
2b6b0                 | LR__4522
2b6b0     00 FB 01 F6 | 	mov	result1, _var01
2b6b4                 | _fatfs_cc___indst_ret
2b6b4     2D 00 64 FD | 	ret
2b6b8                 | 
2b6b8                 | ' 	
2b6b8                 | ' 	FUNCTION pfunc(c as integer) as integer
2b6b8                 | ___strs_cl_pfunc
2b6b8                 | ' 		if (i < 16) then
2b6b8     04 E4 05 F1 | 	add	objptr, #4
2b6bc     F2 FA 01 FB | 	rdlong	result1, objptr
2b6c0     04 E4 85 F1 | 	sub	objptr, #4
2b6c4     10 FA 55 F2 | 	cmps	result1, #16 wc
2b6c8     2C 00 90 3D |  if_ae	jmp	#LR__4530
2b6cc     F2 FA 01 FB | 	rdlong	result1, objptr
2b6d0     04 E4 05 F1 | 	add	objptr, #4
2b6d4     F2 00 02 FB | 	rdlong	_var01, objptr
2b6d8     FD 00 02 F1 | 	add	_var01, result1
2b6dc     00 13 42 FC | 	wrbyte	arg01, _var01
2b6e0     F2 FA 01 FB | 	rdlong	result1, objptr
2b6e4     01 FA 05 F1 | 	add	result1, #1
2b6e8     F2 FA 61 FC | 	wrlong	result1, objptr
2b6ec     04 E4 85 F1 | 	sub	objptr, #4
2b6f0                 | ' 			p(i) = c
2b6f0                 | ' 			i = i+1
2b6f0                 | ' 			return 1
2b6f0     01 FA 05 F6 | 	mov	result1, #1
2b6f4     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2b6f8                 | LR__4530
2b6f8                 | ' 			return -1
2b6f8     01 FA 65 F6 | 	neg	result1, #1
2b6fc                 | ___strs_cl_pfunc_ret
2b6fc     2D 00 64 FD | 	ret
2b700                 | 
2b700                 | __struct__s_vfs_file_t_putchar
2b700     04 4A 05 F6 | 	mov	COUNT_, #4
2b704     A8 00 A0 FD | 	call	#pushregs_
2b708     1C E4 05 F1 | 	add	objptr, #28
2b70c     F2 1E 0A FB | 	rdlong	local01, objptr wz
2b710     1C E4 85 F1 | 	sub	objptr, #28
2b714     00 FA 05 A6 |  if_e	mov	result1, #0
2b718     48 00 90 AD |  if_e	jmp	#LR__4540
2b71c     1C E4 05 F1 | 	add	objptr, #28
2b720     F2 20 02 FB | 	rdlong	local02, objptr
2b724     10 23 02 F6 | 	mov	local03, local02
2b728     1C E4 85 F1 | 	sub	objptr, #28
2b72c     13 22 46 F7 | 	zerox	local03, #19
2b730     14 20 46 F0 | 	shr	local02, #20
2b734     02 20 66 F0 | 	shl	local02, #2
2b738     ED 20 02 F1 | 	add	local02, __methods__
2b73c     10 21 02 FB | 	rdlong	local02, local02
2b740     F2 14 02 F6 | 	mov	arg02, objptr
2b744     F2 24 02 F6 | 	mov	local04, objptr
2b748     11 E5 01 F6 | 	mov	objptr, local03
2b74c     2D 20 62 FD | 	call	local02
2b750     12 E5 01 F6 | 	mov	objptr, local04
2b754                 | '     return (i < 0) ? 0 : 1;
2b754     00 FA 55 F2 | 	cmps	result1, #0 wc
2b758     00 1E 06 C6 |  if_b	mov	local01, #0
2b75c     01 1E 06 36 |  if_ae	mov	local01, #1
2b760     0F FB 01 F6 | 	mov	result1, local01
2b764                 | LR__4540
2b764     A7 F0 03 F6 | 	mov	ptra, fp
2b768     B2 00 A0 FD | 	call	#popregs_
2b76c                 | __struct__s_vfs_file_t_putchar_ret
2b76c     2D 00 64 FD | 	ret
2b770                 | 
2b770                 | __struct__s_vfs_file_t_getchar
2b770     03 4A 05 F6 | 	mov	COUNT_, #3
2b774     A8 00 A0 FD | 	call	#pushregs_
2b778     20 E4 05 F1 | 	add	objptr, #32
2b77c     F2 12 0A FB | 	rdlong	arg01, objptr wz
2b780     20 E4 85 F1 | 	sub	objptr, #32
2b784     01 FA 65 A6 |  if_e	neg	result1, #1
2b788     38 00 90 AD |  if_e	jmp	#LR__4550
2b78c                 | '     return getcf(__this);
2b78c     20 E4 05 F1 | 	add	objptr, #32
2b790     F2 1E 02 FB | 	rdlong	local01, objptr
2b794     0F 21 02 F6 | 	mov	local02, local01
2b798     20 E4 85 F1 | 	sub	objptr, #32
2b79c     13 20 46 F7 | 	zerox	local02, #19
2b7a0     14 1E 46 F0 | 	shr	local01, #20
2b7a4     02 1E 66 F0 | 	shl	local01, #2
2b7a8     ED 1E 02 F1 | 	add	local01, __methods__
2b7ac     0F 1F 02 FB | 	rdlong	local01, local01
2b7b0     F2 12 02 F6 | 	mov	arg01, objptr
2b7b4     F2 22 02 F6 | 	mov	local03, objptr
2b7b8     10 E5 01 F6 | 	mov	objptr, local02
2b7bc     2D 1E 62 FD | 	call	local01
2b7c0     11 E5 01 F6 | 	mov	objptr, local03
2b7c4                 | LR__4550
2b7c4     A7 F0 03 F6 | 	mov	ptra, fp
2b7c8     B2 00 A0 FD | 	call	#popregs_
2b7cc                 | __struct__s_vfs_file_t_getchar_ret
2b7cc     2D 00 64 FD | 	ret
2b7d0                 | 
2b7d0                 | __struct___bas_wrap_sender_tx
2b7d0     03 4A 05 F6 | 	mov	COUNT_, #3
2b7d4     A8 00 A0 FD | 	call	#pushregs_
2b7d8     F2 1E 02 FB | 	rdlong	local01, objptr
2b7dc     0F 21 02 F6 | 	mov	local02, local01
2b7e0     13 1E 46 F7 | 	zerox	local01, #19
2b7e4     14 20 46 F0 | 	shr	local02, #20
2b7e8     02 20 66 F0 | 	shl	local02, #2
2b7ec     ED 20 02 F1 | 	add	local02, __methods__
2b7f0     10 21 02 FB | 	rdlong	local02, local02
2b7f4     F2 22 02 F6 | 	mov	local03, objptr
2b7f8     0F E5 01 F6 | 	mov	objptr, local01
2b7fc     2D 20 62 FD | 	call	local02
2b800     11 E5 01 F6 | 	mov	objptr, local03
2b804     01 FA 05 F6 | 	mov	result1, #1
2b808     A7 F0 03 F6 | 	mov	ptra, fp
2b80c     B2 00 A0 FD | 	call	#popregs_
2b810                 | __struct___bas_wrap_sender_tx_ret
2b810     2D 00 64 FD | 	ret
2b814                 | 
2b814                 | __struct___bas_wrap_sender_rx
2b814     03 4A 05 F6 | 	mov	COUNT_, #3
2b818     A8 00 A0 FD | 	call	#pushregs_
2b81c     04 E4 05 F1 | 	add	objptr, #4
2b820     F2 1E 02 FB | 	rdlong	local01, objptr
2b824     0F 21 02 F6 | 	mov	local02, local01
2b828     04 E4 85 F1 | 	sub	objptr, #4
2b82c     13 20 46 F7 | 	zerox	local02, #19
2b830     14 1E 46 F0 | 	shr	local01, #20
2b834     02 1E 66 F0 | 	shl	local01, #2
2b838     ED 1E 02 F1 | 	add	local01, __methods__
2b83c     0F 1F 02 FB | 	rdlong	local01, local01
2b840     F2 22 02 F6 | 	mov	local03, objptr
2b844     10 E5 01 F6 | 	mov	objptr, local02
2b848     2D 1E 62 FD | 	call	local01
2b84c     11 E5 01 F6 | 	mov	objptr, local03
2b850     A7 F0 03 F6 | 	mov	ptra, fp
2b854     B2 00 A0 FD | 	call	#popregs_
2b858                 | __struct___bas_wrap_sender_rx_ret
2b858     2D 00 64 FD | 	ret
2b85c                 | 
2b85c                 | __struct___bas_wrap_sender_close
2b85c     03 4A 05 F6 | 	mov	COUNT_, #3
2b860     A8 00 A0 FD | 	call	#pushregs_
2b864     08 E4 05 F1 | 	add	objptr, #8
2b868     F2 1E 02 FB | 	rdlong	local01, objptr
2b86c     0F 21 02 F6 | 	mov	local02, local01
2b870     08 E4 85 F1 | 	sub	objptr, #8
2b874     13 20 46 F7 | 	zerox	local02, #19
2b878     14 1E 46 F0 | 	shr	local01, #20
2b87c     02 1E 66 F0 | 	shl	local01, #2
2b880     ED 1E 02 F1 | 	add	local01, __methods__
2b884     0F 1F 02 FB | 	rdlong	local01, local01
2b888     F2 22 02 F6 | 	mov	local03, objptr
2b88c     10 E5 01 F6 | 	mov	objptr, local02
2b890     2D 1E 62 FD | 	call	local01
2b894     11 E5 01 F6 | 	mov	objptr, local03
2b898     A7 F0 03 F6 | 	mov	ptra, fp
2b89c     B2 00 A0 FD | 	call	#popregs_
2b8a0                 | __struct___bas_wrap_sender_close_ret
2b8a0     2D 00 64 FD | 	ret
2b8a4                 | 
2b8a4                 | LR__4560
2b8a4     2F          | 	byte	"/"
2b8a5     00          | 	byte	0
2b8a6                 | LR__4561
2b8a6     69 6E 66    | 	byte	"inf"
2b8a9     00          | 	byte	0
2b8aa                 | LR__4562
2b8aa     6E 61 6E    | 	byte	"nan"
2b8ad     00          | 	byte	0
2b8ae                 | LR__4563
2b8ae                 | 	byte	
2b8ae     00          | 	byte	0
2b8af                 | LR__4564
2b8af                 | 	byte	
2b8af     00          | 	byte	0
2b8b0                 | LR__4565
2b8b0                 | 	byte	
2b8b0     00          | 	byte	0
2b8b1                 | LR__4566
2b8b1                 | 	byte	
2b8b1     00          | 	byte	0
2b8b2                 | LR__4567
2b8b2                 | 	byte	
2b8b2     00          | 	byte	0
2b8b3                 | LR__4568
2b8b3                 | 	byte	
2b8b3     00          | 	byte	0
2b8b4                 | LR__4569
2b8b4                 | 	byte	
2b8b4     00          | 	byte	0
2b8b5                 | LR__4570
2b8b5                 | 	byte	
2b8b5     00          | 	byte	0
2b8b6                 | LR__4571
2b8b6     00          | 	byte	0
2b8b7     00          | 	byte	0
2b8b8                 | LR__4572
2b8b8     00          | 	byte	0
2b8b9     00          | 	byte	0
2b8ba                 | LR__4573
2b8ba     00          | 	byte	0
2b8bb     00          | 	byte	0
2b8bc                 | LR__4574
2b8bc     20 21 21 21 
2b8c0     20 63 6F 72 
2b8c4     72 75 70 74 
2b8c8     65 64 20 68 
2b8cc     65 61 70 3F 
2b8d0     3F 3F 20 21 
2b8d4     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2b8d7     00          | 	byte	0
2b8d8                 | LR__4575
2b8d8     20 21 21 21 
2b8dc     20 6F 75 74 
2b8e0     20 6F 66 20 
2b8e4     68 65 61 70 
2b8e8     20 6D 65 6D 
2b8ec     6F 72 79 20 
2b8f0     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2b8f4     00          | 	byte	0
2b8f5                 | LR__4576
2b8f5     20 21 21 21 
2b8f9     20 63 6F 72 
2b8fd     72 75 70 74 
2b901     65 64 20 68 
2b905     65 61 70 20 
2b909     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2b90d     00          | 	byte	0
2b90e                 | LR__4577
2b90e     00          | 	byte	0
2b90f     00          | 	byte	0
2b910                 | LR__4578
2b910     2E          | 	byte	"."
2b911     00          | 	byte	0
2b912                 | LR__4579
2b912     00          | 	byte	0
2b913     00          | 	byte	0
2b914                 | LR__4580
2b914     00          | 	byte	0
2b915     00          | 	byte	0
2b916                 | LR__4581
2b916     00          | 	byte	0
2b917     00          | 	byte	0
2b918                 | LR__4582
2b918     2A 3A 3C 3E 
2b91c     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2b920     00          | 	byte	0
2b921                 | LR__4583
2b921     2B 2C 3B 3D 
2b925     5B 5D       | 	byte	"+,;=[]"
2b927     00          | 	byte	0
2b928                 | LR__4584
2b928     46 41 54 33 
2b92c     32 20 20 20 | 	byte	"FAT32   "
2b930     00          | 	byte	0
2b931                 | LR__4585
2b931     54 5A       | 	byte	"TZ"
2b933     00          | 	byte	0
2b934                 | LR__4586
2b934     00          | 	byte	0
2b935     00          | 	byte	0
2b936                 | LR__4587
2b936                 | 	byte	
2b936     00          | 	byte	0
2b937                 | LR__4588
2b937                 | 	byte	
2b937     00          | 	byte	0
2b938                 | LR__4589
2b938     22          | 	byte	34
2b939     00          | 	byte	0
2b93a                 | LR__4590
2b93a     22          | 	byte	34
2b93b     00          | 	byte	0
2b93c                 | LR__4591
2b93c     3A          | 	byte	":"
2b93d     00          | 	byte	0
2b93e                 | LR__4592
2b93e                 | 	byte	
2b93e     00          | 	byte	0
2b93f                 | LR__4593
2b93f                 | 	byte	
2b93f     00          | 	byte	0
2b940                 | LR__4594
2b940                 | 	byte	
2b940     00          | 	byte	0
2b941                 | LR__4595
2b941                 | 	byte	
2b941     00          | 	byte	0
2b942                 | LR__4596
2b942                 | 	byte	
2b942     00          | 	byte	0
2b943                 | LR__4597
2b943                 | 	byte	
2b943     00          | 	byte	0
2b944                 | LR__4598
2b944                 | 	byte	
2b944     00          | 	byte	0
2b945                 | LR__4599
2b945     22          | 	byte	34
2b946     00          | 	byte	0
2b947                 | LR__4600
2b947     22          | 	byte	34
2b948     00          | 	byte	0
2b949                 | LR__4601
2b949     22          | 	byte	34
2b94a     00          | 	byte	0
2b94b                 | LR__4602
2b94b     22          | 	byte	34
2b94c     00          | 	byte	0
2b94d                 | LR__4603
2b94d     22          | 	byte	34
2b94e     00          | 	byte	0
2b94f                 | LR__4604
2b94f     3E          | 	byte	">"
2b950     00          | 	byte	0
2b951                 | LR__4605
2b951     3C          | 	byte	"<"
2b952     00          | 	byte	0
2b953                 | LR__4606
2b953     2B          | 	byte	"+"
2b954     00          | 	byte	0
2b955                 | LR__4607
2b955     2D          | 	byte	"-"
2b956     00          | 	byte	0
2b957                 | LR__4608
2b957     2A          | 	byte	"*"
2b958     00          | 	byte	0
2b959                 | LR__4609
2b959     2F          | 	byte	"/"
2b95a     00          | 	byte	0
2b95b                 | LR__4610
2b95b     5E          | 	byte	"^"
2b95c     00          | 	byte	0
2b95d                 | LR__4611
2b95d     3D          | 	byte	"="
2b95e     00          | 	byte	0
2b95f                 | LR__4612
2b95f     2B          | 	byte	"+"
2b960     00          | 	byte	0
2b961                 | LR__4613
2b961     2B          | 	byte	"+"
2b962     00          | 	byte	0
2b963                 | LR__4614
2b963     2D          | 	byte	"-"
2b964     00          | 	byte	0
2b965                 | LR__4615
2b965     2D          | 	byte	"-"
2b966     00          | 	byte	0
2b967                 | LR__4616
2b967     3C          | 	byte	"<"
2b968     00          | 	byte	0
2b969                 | LR__4617
2b969     3E          | 	byte	">"
2b96a     00          | 	byte	0
2b96b                 | LR__4618
2b96b     22          | 	byte	34
2b96c     00          | 	byte	0
2b96d                 | LR__4619
2b96d     22          | 	byte	34
2b96e     00          | 	byte	0
2b96f                 | LR__4620
2b96f     2E          | 	byte	"."
2b970     00          | 	byte	0
2b971                 | LR__4621
2b971     3F          | 	byte	"?"
2b972     00          | 	byte	0
2b973                 | LR__4622
2b973     3F          | 	byte	"?"
2b974     00          | 	byte	0
2b975                 | LR__4623
2b975     6D 6F 75 73 
2b979     65          | 	byte	"mouse"
2b97a     00          | 	byte	0
2b97b                 | LR__4624
2b97b     63 75 72 73 
2b97f     6F 72       | 	byte	"cursor"
2b981     00          | 	byte	0
2b982                 | LR__4625
2b982     63 6C 69 63 
2b986     6B          | 	byte	"click"
2b987     00          | 	byte	0
2b988                 | LR__4626
2b988     6F 6E       | 	byte	"on"
2b98a     00          | 	byte	0
2b98b                 | LR__4627
2b98b     31          | 	byte	"1"
2b98c     00          | 	byte	0
2b98d                 | LR__4628
2b98d     6F 66 66    | 	byte	"off"
2b990     00          | 	byte	0
2b991                 | LR__4629
2b991     30          | 	byte	"0"
2b992     00          | 	byte	0
2b993                 | LR__4630
2b993     6D 6F 64 65 | 	byte	"mode"
2b997     00          | 	byte	0
2b998                 | LR__4631
2b998     6D 2E       | 	byte	"m."
2b99a     00          | 	byte	0
2b99b                 | LR__4632
2b99b     61 74 61 72 
2b99f     69          | 	byte	"atari"
2b9a0     00          | 	byte	0
2b9a1                 | LR__4633
2b9a1     30          | 	byte	"0"
2b9a2     00          | 	byte	0
2b9a3                 | LR__4634
2b9a3     70 63 5F 61 
2b9a7     6D 62 65 72 | 	byte	"pc_amber"
2b9ab     00          | 	byte	0
2b9ac                 | LR__4635
2b9ac     31          | 	byte	"1"
2b9ad     00          | 	byte	0
2b9ae                 | LR__4636
2b9ae     70 63 5F 67 
2b9b2     72 65 65 6E | 	byte	"pc_green"
2b9b6     00          | 	byte	0
2b9b7                 | LR__4637
2b9b7     32          | 	byte	"2"
2b9b8     00          | 	byte	0
2b9b9                 | LR__4638
2b9b9     70 63 5F 77 
2b9bd     68 69 74 65 | 	byte	"pc_white"
2b9c1     00          | 	byte	0
2b9c2                 | LR__4639
2b9c2     33          | 	byte	"3"
2b9c3     00          | 	byte	0
2b9c4                 | LR__4640
2b9c4     73 74       | 	byte	"st"
2b9c6     00          | 	byte	0
2b9c7                 | LR__4641
2b9c7     34          | 	byte	"4"
2b9c8     00          | 	byte	0
2b9c9                 | LR__4642
2b9c9                 | 	byte	
2b9c9     00          | 	byte	0
2b9ca                 | LR__4643
2b9ca     6C 6F 61 64 | 	byte	"load"
2b9ce     00          | 	byte	0
2b9cf                 | LR__4644
2b9cf     73 61 76 65 | 	byte	"save"
2b9d3     00          | 	byte	0
2b9d4                 | LR__4645
2b9d4     62 72 75 6E | 	byte	"brun"
2b9d8     00          | 	byte	0
2b9d9                 | LR__4646
2b9d9     6C 6F 2E    | 	byte	"lo."
2b9dc     00          | 	byte	0
2b9dd                 | LR__4647
2b9dd     73 2E       | 	byte	"s."
2b9df     00          | 	byte	0
2b9e0                 | LR__4648
2b9e0     62 72 2E    | 	byte	"br."
2b9e3     00          | 	byte	0
2b9e4                 | LR__4649
2b9e4                 | 	byte	
2b9e4     00          | 	byte	0
2b9e5                 | LR__4650
2b9e5                 | 	byte	
2b9e5     00          | 	byte	0
2b9e6                 | LR__4651
2b9e6                 | 	byte	
2b9e6     00          | 	byte	0
2b9e7                 | LR__4652
2b9e7                 | 	byte	
2b9e7     00          | 	byte	0
2b9e8                 | LR__4653
2b9e8     20 55 73 65 
2b9ec     72 20 66 75 
2b9f0     6E 63 74 69 
2b9f4     6F 6E 73 20 
2b9f8     61 6E 64 20 
2b9fc     61 72 72 61 
2ba00     79 73 20 6E 
2ba04     6F 74 20 79 
2ba08     65 74 20 69 
2ba0c     6D 70 6C 65 
2ba10     6D 65 6E 74 
2ba14     65 64       | 	byte	" User functions and arrays not yet implemented"
2ba16     00          | 	byte	0
2ba17                 | LR__4654
2ba17                 | 	byte	
2ba17     00          | 	byte	0
2ba18                 | LR__4655
2ba18                 | 	byte	
2ba18     00          | 	byte	0
2ba19                 | LR__4656
2ba19     52 65 61 64 
2ba1d     79          | 	byte	"Ready"
2ba1e     00          | 	byte	0
2ba1f                 | LR__4657
2ba1f     2B          | 	byte	"+"
2ba20     00          | 	byte	0
2ba21                 | LR__4658
2ba21     2D          | 	byte	"-"
2ba22     00          | 	byte	0
2ba23                 | LR__4659
2ba23     6F 72       | 	byte	"or"
2ba25     00          | 	byte	0
2ba26                 | LR__4660
2ba26     78 6F 72    | 	byte	"xor"
2ba29     00          | 	byte	0
2ba2a                 | LR__4661
2ba2a     2A          | 	byte	"*"
2ba2b     00          | 	byte	0
2ba2c                 | LR__4662
2ba2c     2F          | 	byte	"/"
2ba2d     00          | 	byte	0
2ba2e                 | LR__4663
2ba2e     61 6E 64    | 	byte	"and"
2ba31     00          | 	byte	0
2ba32                 | LR__4664
2ba32     64 69 76    | 	byte	"div"
2ba35     00          | 	byte	0
2ba36                 | LR__4665
2ba36     6D 6F 64    | 	byte	"mod"
2ba39     00          | 	byte	0
2ba3a                 | LR__4666
2ba3a     73 68 6C    | 	byte	"shl"
2ba3d     00          | 	byte	0
2ba3e                 | LR__4667
2ba3e     73 68 72    | 	byte	"shr"
2ba41     00          | 	byte	0
2ba42                 | LR__4668
2ba42     5E          | 	byte	"^"
2ba43     00          | 	byte	0
2ba44                 | LR__4669
2ba44     6E 6F 74    | 	byte	"not"
2ba47     00          | 	byte	0
2ba48                 | LR__4670
2ba48     40          | 	byte	"@"
2ba49     00          | 	byte	0
2ba4a                 | LR__4671
2ba4a     3D          | 	byte	"="
2ba4b     00          | 	byte	0
2ba4c                 | LR__4672
2ba4c     3E 3D       | 	byte	">="
2ba4e     00          | 	byte	0
2ba4f                 | LR__4673
2ba4f     3C 3D       | 	byte	"<="
2ba51     00          | 	byte	0
2ba52                 | LR__4674
2ba52     3C          | 	byte	"<"
2ba53     00          | 	byte	0
2ba54                 | LR__4675
2ba54     3E          | 	byte	">"
2ba55     00          | 	byte	0
2ba56                 | LR__4676
2ba56     3C 3E       | 	byte	"<>"
2ba58     00          | 	byte	0
2ba59                 | LR__4677
2ba59     2B 2B       | 	byte	"++"
2ba5b     00          | 	byte	0
2ba5c                 | LR__4678
2ba5c     2D 2D       | 	byte	"--"
2ba5e     00          | 	byte	0
2ba5f                 | LR__4679
2ba5f     23          | 	byte	"#"
2ba60     00          | 	byte	0
2ba61                 | LR__4680
2ba61     23          | 	byte	"#"
2ba62     00          | 	byte	0
2ba63                 | LR__4681
2ba63     2D          | 	byte	"-"
2ba64     00          | 	byte	0
2ba65                 | LR__4682
2ba65     30          | 	byte	"0"
2ba66     00          | 	byte	0
2ba67                 | LR__4683
2ba67     63          | 	byte	"c"
2ba68     00          | 	byte	0
2ba69                 | LR__4684
2ba69     63 23       | 	byte	"c#"
2ba6b     00          | 	byte	0
2ba6c                 | LR__4685
2ba6c     64          | 	byte	"d"
2ba6d     00          | 	byte	0
2ba6e                 | LR__4686
2ba6e     64 23       | 	byte	"d#"
2ba70     00          | 	byte	0
2ba71                 | LR__4687
2ba71     65          | 	byte	"e"
2ba72     00          | 	byte	0
2ba73                 | LR__4688
2ba73     66          | 	byte	"f"
2ba74     00          | 	byte	0
2ba75                 | LR__4689
2ba75     66 23       | 	byte	"f#"
2ba77     00          | 	byte	0
2ba78                 | LR__4690
2ba78     67          | 	byte	"g"
2ba79     00          | 	byte	0
2ba7a                 | LR__4691
2ba7a     67 23       | 	byte	"g#"
2ba7c     00          | 	byte	0
2ba7d                 | LR__4692
2ba7d     61          | 	byte	"a"
2ba7e     00          | 	byte	0
2ba7f                 | LR__4693
2ba7f     61 23       | 	byte	"a#"
2ba81     00          | 	byte	0
2ba82                 | LR__4694
2ba82     68          | 	byte	"h"
2ba83     00          | 	byte	0
2ba84                 | LR__4695
2ba84     62          | 	byte	"b"
2ba85     00          | 	byte	0
2ba86                 | LR__4696
2ba86     2B          | 	byte	"+"
2ba87     00          | 	byte	0
2ba88                 | LR__4697
2ba88     2D          | 	byte	"-"
2ba89     00          | 	byte	0
2ba8a                 | LR__4698
2ba8a     3D          | 	byte	"="
2ba8b     00          | 	byte	0
2ba8c                 | LR__4699
2ba8c     2C          | 	byte	","
2ba8d     00          | 	byte	0
2ba8e                 | LR__4700
2ba8e     2A          | 	byte	"*"
2ba8f     00          | 	byte	0
2ba90                 | LR__4701
2ba90     2F          | 	byte	"/"
2ba91     00          | 	byte	0
2ba92                 | LR__4702
2ba92     3B          | 	byte	";"
2ba93     00          | 	byte	0
2ba94                 | LR__4703
2ba94     22          | 	byte	34
2ba95     00          | 	byte	0
2ba96                 | LR__4704
2ba96     5E          | 	byte	"^"
2ba97     00          | 	byte	0
2ba98                 | LR__4705
2ba98     29          | 	byte	")"
2ba99     00          | 	byte	0
2ba9a                 | LR__4706
2ba9a     28          | 	byte	"("
2ba9b     00          | 	byte	0
2ba9c                 | LR__4707
2ba9c     3A          | 	byte	":"
2ba9d     00          | 	byte	0
2ba9e                 | LR__4708
2ba9e     20          | 	byte	" "
2ba9f     00          | 	byte	0
2baa0                 | LR__4709
2baa0     3E          | 	byte	">"
2baa1     00          | 	byte	0
2baa2                 | LR__4710
2baa2     3C          | 	byte	"<"
2baa3     00          | 	byte	0
2baa4                 | LR__4711
2baa4     3D          | 	byte	"="
2baa5     00          | 	byte	0
2baa6                 | LR__4712
2baa6     62 65 65 70 | 	byte	"beep"
2baaa     00          | 	byte	0
2baab                 | LR__4713
2baab     62 2E       | 	byte	"b."
2baad     00          | 	byte	0
2baae                 | LR__4714
2baae     62 6F 78    | 	byte	"box"
2bab1     00          | 	byte	0
2bab2                 | LR__4715
2bab2     62 72 75 6E | 	byte	"brun"
2bab6     00          | 	byte	0
2bab7                 | LR__4716
2bab7     62 72 2E    | 	byte	"br."
2baba     00          | 	byte	0
2babb                 | LR__4717
2babb     63 69 72 63 
2babf     6C 65       | 	byte	"circle"
2bac1     00          | 	byte	0
2bac2                 | LR__4718
2bac2     63 69 2E    | 	byte	"ci."
2bac5     00          | 	byte	0
2bac6                 | LR__4719
2bac6     63 6C 69 63 
2baca     6B          | 	byte	"click"
2bacb     00          | 	byte	0
2bacc                 | LR__4720
2bacc     63 6C 73    | 	byte	"cls"
2bacf     00          | 	byte	0
2bad0                 | LR__4721
2bad0     63 6F 6C 6F 
2bad4     72          | 	byte	"color"
2bad5     00          | 	byte	0
2bad6                 | LR__4722
2bad6     63 2E       | 	byte	"c."
2bad8     00          | 	byte	0
2bad9                 | LR__4723
2bad9     63 73 61 76 
2badd     65          | 	byte	"csave"
2bade     00          | 	byte	0
2badf                 | LR__4724
2badf     63 73 2E    | 	byte	"cs."
2bae2     00          | 	byte	0
2bae3                 | LR__4725
2bae3     63 75 72 73 
2bae7     6F 72       | 	byte	"cursor"
2bae9     00          | 	byte	0
2baea                 | LR__4726
2baea     64 65 66 73 
2baee     6E 64       | 	byte	"defsnd"
2baf0     00          | 	byte	0
2baf1                 | LR__4727
2baf1     64 65 66 65 
2baf5     6E 76       | 	byte	"defenv"
2baf7     00          | 	byte	0
2baf8                 | LR__4728
2baf8     64 65 66 73 
2bafc     70 72 69 74 
2bb00     65          | 	byte	"defsprite"
2bb01     00          | 	byte	0
2bb02                 | LR__4729
2bb02     64 73 2E    | 	byte	"ds."
2bb05     00          | 	byte	0
2bb06                 | LR__4730
2bb06     64 65 67    | 	byte	"deg"
2bb09     00          | 	byte	0
2bb0a                 | LR__4731
2bb0a     64 69 6D    | 	byte	"dim"
2bb0d     00          | 	byte	0
2bb0e                 | LR__4732
2bb0e     64 69 72    | 	byte	"dir"
2bb11     00          | 	byte	0
2bb12                 | LR__4733
2bb12     64 70 6F 6B 
2bb16     65          | 	byte	"dpoke"
2bb17     00          | 	byte	0
2bb18                 | LR__4734
2bb18     64 72 61 77 | 	byte	"draw"
2bb1c     00          | 	byte	0
2bb1d                 | LR__4735
2bb1d     64 72 2E    | 	byte	"dr."
2bb20     00          | 	byte	0
2bb21                 | LR__4736
2bb21     65 6C 73 65 | 	byte	"else"
2bb25     00          | 	byte	0
2bb26                 | LR__4737
2bb26     66 63 69 72 
2bb2a     63 6C 65    | 	byte	"fcircle"
2bb2d     00          | 	byte	0
2bb2e                 | LR__4738
2bb2e     66 63 2E    | 	byte	"fc."
2bb31     00          | 	byte	0
2bb32                 | LR__4739
2bb32     66 69 6C 6C | 	byte	"fill"
2bb36     00          | 	byte	0
2bb37                 | LR__4740
2bb37     66 69 2E    | 	byte	"fi."
2bb3a     00          | 	byte	0
2bb3b                 | LR__4741
2bb3b     66 6F 6E 74 | 	byte	"font"
2bb3f     00          | 	byte	0
2bb40                 | LR__4742
2bb40     66 6F 72    | 	byte	"for"
2bb43     00          | 	byte	0
2bb44                 | LR__4743
2bb44     66 2E       | 	byte	"f."
2bb46     00          | 	byte	0
2bb47                 | LR__4744
2bb47     66 72 61 6D 
2bb4b     65          | 	byte	"frame"
2bb4c     00          | 	byte	0
2bb4d                 | LR__4745
2bb4d     66 72 2E    | 	byte	"fr."
2bb50     00          | 	byte	0
2bb51                 | LR__4746
2bb51     67 6F 74 6F | 	byte	"goto"
2bb55     00          | 	byte	0
2bb56                 | LR__4747
2bb56     67 2E       | 	byte	"g."
2bb58     00          | 	byte	0
2bb59                 | LR__4748
2bb59     69 66       | 	byte	"if"
2bb5b     00          | 	byte	0
2bb5c                 | LR__4749
2bb5c     69 6E 6B    | 	byte	"ink"
2bb5f     00          | 	byte	0
2bb60                 | LR__4750
2bb60     69 2E       | 	byte	"i."
2bb62     00          | 	byte	0
2bb63                 | LR__4751
2bb63     69 6E 74    | 	byte	"int"
2bb66     00          | 	byte	0
2bb67                 | LR__4752
2bb67     6C 69 73 74 | 	byte	"list"
2bb6b     00          | 	byte	0
2bb6c                 | LR__4753
2bb6c     6C 2E       | 	byte	"l."
2bb6e     00          | 	byte	0
2bb6f                 | LR__4754
2bb6f     6C 6F 61 64 | 	byte	"load"
2bb73     00          | 	byte	0
2bb74                 | LR__4755
2bb74     6C 6F 2E    | 	byte	"lo."
2bb77     00          | 	byte	0
2bb78                 | LR__4756
2bb78     6C 70 6F 6B 
2bb7c     65          | 	byte	"lpoke"
2bb7d     00          | 	byte	0
2bb7e                 | LR__4757
2bb7e     6D 6F 64 65 | 	byte	"mode"
2bb82     00          | 	byte	0
2bb83                 | LR__4758
2bb83     6D 2E       | 	byte	"m."
2bb85     00          | 	byte	0
2bb86                 | LR__4759
2bb86     6D 6F 75 73 
2bb8a     65          | 	byte	"mouse"
2bb8b     00          | 	byte	0
2bb8c                 | LR__4760
2bb8c     6E 65 77    | 	byte	"new"
2bb8f     00          | 	byte	0
2bb90                 | LR__4761
2bb90     6E 65 78 74 | 	byte	"next"
2bb94     00          | 	byte	0
2bb95                 | LR__4762
2bb95     6E 2E       | 	byte	"n."
2bb97     00          | 	byte	0
2bb98                 | LR__4763
2bb98     70 61 70 65 
2bb9c     72          | 	byte	"paper"
2bb9d     00          | 	byte	0
2bb9e                 | LR__4764
2bb9e     70 2E       | 	byte	"p."
2bba0     00          | 	byte	0
2bba1                 | LR__4765
2bba1     70 69 6E 66 
2bba5     6C 6F 61 74 | 	byte	"pinfloat"
2bba9     00          | 	byte	0
2bbaa                 | LR__4766
2bbaa     70 69 6E 68 
2bbae     69          | 	byte	"pinhi"
2bbaf     00          | 	byte	0
2bbb0                 | LR__4767
2bbb0     70 69 6E 6C 
2bbb4     6F          | 	byte	"pinlo"
2bbb5     00          | 	byte	0
2bbb6                 | LR__4768
2bbb6     70 69 6E 73 
2bbba     74 61 72 74 | 	byte	"pinstart"
2bbbe     00          | 	byte	0
2bbbf                 | LR__4769
2bbbf     70 69 6E 74 
2bbc3     6F 67 67 6C 
2bbc7     65          | 	byte	"pintoggle"
2bbc8     00          | 	byte	0
2bbc9                 | LR__4770
2bbc9     70 69 6E 77 
2bbcd     72 69 74 65 | 	byte	"pinwrite"
2bbd1     00          | 	byte	0
2bbd2                 | LR__4771
2bbd2     70 6C 61 79 | 	byte	"play"
2bbd6     00          | 	byte	0
2bbd7                 | LR__4772
2bbd7     70 6C 6F 74 | 	byte	"plot"
2bbdb     00          | 	byte	0
2bbdc                 | LR__4773
2bbdc     70 6C 2E    | 	byte	"pl."
2bbdf     00          | 	byte	0
2bbe0                 | LR__4774
2bbe0     70 6F 6B 65 | 	byte	"poke"
2bbe4     00          | 	byte	0
2bbe5                 | LR__4775
2bbe5     70 6F 73 69 
2bbe9     74 69 6F 6E | 	byte	"position"
2bbed     00          | 	byte	0
2bbee                 | LR__4776
2bbee     70 6F 73 2E | 	byte	"pos."
2bbf2     00          | 	byte	0
2bbf3                 | LR__4777
2bbf3     70 72 69 6E 
2bbf7     74          | 	byte	"print"
2bbf8     00          | 	byte	0
2bbf9                 | LR__4778
2bbf9     3F          | 	byte	"?"
2bbfa     00          | 	byte	0
2bbfb                 | LR__4779
2bbfb     72 61 64    | 	byte	"rad"
2bbfe     00          | 	byte	0
2bbff                 | LR__4780
2bbff     72 65 6C 65 
2bc03     61 73 65    | 	byte	"release"
2bc06     00          | 	byte	0
2bc07                 | LR__4781
2bc07     72 75 6E    | 	byte	"run"
2bc0a     00          | 	byte	0
2bc0b                 | LR__4782
2bc0b     73 61 76 65 | 	byte	"save"
2bc0f     00          | 	byte	0
2bc10                 | LR__4783
2bc10     73 2E       | 	byte	"s."
2bc12     00          | 	byte	0
2bc13                 | LR__4784
2bc13     73 65 74 64 
2bc17     65 6C 61 79 | 	byte	"setdelay"
2bc1b     00          | 	byte	0
2bc1c                 | LR__4785
2bc1c     73 65 74 65 
2bc20     6E 76       | 	byte	"setenv"
2bc22     00          | 	byte	0
2bc23                 | LR__4786
2bc23     73 65 74 6C 
2bc27     65 6E       | 	byte	"setlen"
2bc29     00          | 	byte	0
2bc2a                 | LR__4787
2bc2a     73 65 74 70 
2bc2e     61 6E       | 	byte	"setpan"
2bc30     00          | 	byte	0
2bc31                 | LR__4788
2bc31     73 65 74 73 
2bc35     75 73 74 61 
2bc39     69 6E       | 	byte	"setsustain"
2bc3b     00          | 	byte	0
2bc3c                 | LR__4789
2bc3c     73 65 74 76 
2bc40     6F 6C       | 	byte	"setvol"
2bc42     00          | 	byte	0
2bc43                 | LR__4790
2bc43     73 65 74 77 
2bc47     61 76 65    | 	byte	"setwave"
2bc4a     00          | 	byte	0
2bc4b                 | LR__4791
2bc4b     73 6F 75 6E 
2bc4f     64          | 	byte	"sound"
2bc50     00          | 	byte	0
2bc51                 | LR__4792
2bc51     73 6F 2E    | 	byte	"so."
2bc54     00          | 	byte	0
2bc55                 | LR__4793
2bc55     73 70 72 69 
2bc59     74 65       | 	byte	"sprite"
2bc5b     00          | 	byte	0
2bc5c                 | LR__4794
2bc5c     73 70 2E    | 	byte	"sp."
2bc5f     00          | 	byte	0
2bc60                 | LR__4795
2bc60     74 68 65 6E | 	byte	"then"
2bc64     00          | 	byte	0
2bc65                 | LR__4796
2bc65     77 61 69 74 
2bc69     6D 73       | 	byte	"waitms"
2bc6b     00          | 	byte	0
2bc6c                 | LR__4797
2bc6c     77 61 69 74 
2bc70     63 6C 6F 63 
2bc74     6B          | 	byte	"waitclock"
2bc75     00          | 	byte	0
2bc76                 | LR__4798
2bc76     77 63 2E    | 	byte	"wc."
2bc79     00          | 	byte	0
2bc7a                 | LR__4799
2bc7a     77 61 69 74 
2bc7e     76 62 6C    | 	byte	"waitvbl"
2bc81     00          | 	byte	0
2bc82                 | LR__4800
2bc82     77 76 2E    | 	byte	"wv."
2bc85     00          | 	byte	0
2bc86                 | LR__4801
2bc86     77 78 70 69 
2bc8a     6E          | 	byte	"wxpin"
2bc8b     00          | 	byte	0
2bc8c                 | LR__4802
2bc8c     77 79 70 69 
2bc90     6E          | 	byte	"wypin"
2bc91     00          | 	byte	0
2bc92                 | LR__4803
2bc92     61 62 73    | 	byte	"abs"
2bc95     00          | 	byte	0
2bc96                 | LR__4804
2bc96     61 63 6F 73 | 	byte	"acos"
2bc9a     00          | 	byte	0
2bc9b                 | LR__4805
2bc9b     61 64 72    | 	byte	"adr"
2bc9e     00          | 	byte	0
2bc9f                 | LR__4806
2bc9f     61 64 64 72 | 	byte	"addr"
2bca3     00          | 	byte	0
2bca4                 | LR__4807
2bca4     76 61 72 70 
2bca8     74 72       | 	byte	"varptr"
2bcaa     00          | 	byte	0
2bcab                 | LR__4808
2bcab     61 73 69 6E | 	byte	"asin"
2bcaf     00          | 	byte	0
2bcb0                 | LR__4809
2bcb0     61 74 6E    | 	byte	"atn"
2bcb3     00          | 	byte	0
2bcb4                 | LR__4810
2bcb4     63 6F 73    | 	byte	"cos"
2bcb7     00          | 	byte	0
2bcb8                 | LR__4811
2bcb8     64 70 65 65 
2bcbc     6B          | 	byte	"dpeek"
2bcbd     00          | 	byte	0
2bcbe                 | LR__4812
2bcbe     66 72 65    | 	byte	"fre"
2bcc1     00          | 	byte	0
2bcc2                 | LR__4813
2bcc2     67 65 74 70 
2bcc6     69 78 65 6C | 	byte	"getpixel"
2bcca     00          | 	byte	0
2bccb                 | LR__4814
2bccb     67 65 2E    | 	byte	"ge."
2bcce     00          | 	byte	0
2bccf                 | LR__4815
2bccf     67 65 74 65 
2bcd3     6E 76 73 75 
2bcd7     73 74 61 69 
2bcdb     6E          | 	byte	"getenvsustain"
2bcdc     00          | 	byte	0
2bcdd                 | LR__4816
2bcdd     67 65 74 6E 
2bce1     6F 74 65 76 
2bce5     61 6C 75 65 | 	byte	"getnotevalue"
2bce9     00          | 	byte	0
2bcea                 | LR__4817
2bcea     67 65 74 74 
2bcee     69 6D 65    | 	byte	"gettime"
2bcf1     00          | 	byte	0
2bcf2                 | LR__4818
2bcf2     69 6E 6B 65 
2bcf6     79 24       | 	byte	"inkey$"
2bcf8     00          | 	byte	0
2bcf9                 | LR__4819
2bcf9     6C 70 65 65 
2bcfd     6B          | 	byte	"lpeek"
2bcfe     00          | 	byte	0
2bcff                 | LR__4820
2bcff     6D 6F 75 73 
2bd03     65 6B       | 	byte	"mousek"
2bd05     00          | 	byte	0
2bd06                 | LR__4821
2bd06     6D 6F 75 73 
2bd0a     65 77       | 	byte	"mousew"
2bd0c     00          | 	byte	0
2bd0d                 | LR__4822
2bd0d     6D 6F 75 73 
2bd11     65 78       | 	byte	"mousex"
2bd13     00          | 	byte	0
2bd14                 | LR__4823
2bd14     6D 6F 75 73 
2bd18     65 79       | 	byte	"mousey"
2bd1a     00          | 	byte	0
2bd1b                 | LR__4824
2bd1b     70 65 65 6B | 	byte	"peek"
2bd1f     00          | 	byte	0
2bd20                 | LR__4825
2bd20     70 69 6E 72 
2bd24     65 61 64    | 	byte	"pinread"
2bd27     00          | 	byte	0
2bd28                 | LR__4826
2bd28     72 64 70 69 
2bd2c     6E          | 	byte	"rdpin"
2bd2d     00          | 	byte	0
2bd2e                 | LR__4827
2bd2e     72 71 70 69 
2bd32     6E          | 	byte	"rqpin"
2bd33     00          | 	byte	0
2bd34                 | LR__4828
2bd34     72 6E 64    | 	byte	"rnd"
2bd37     00          | 	byte	0
2bd38                 | LR__4829
2bd38     73 69 6E    | 	byte	"sin"
2bd3b     00          | 	byte	0
2bd3c                 | LR__4830
2bd3c     73 71 72    | 	byte	"sqr"
2bd3f     00          | 	byte	0
2bd40                 | LR__4831
2bd40     73 74 69 63 
2bd44     6B          | 	byte	"stick"
2bd45     00          | 	byte	0
2bd46                 | LR__4832
2bd46     73 74 72 69 
2bd4a     67          | 	byte	"strig"
2bd4b     00          | 	byte	0
2bd4c                 | LR__4833
2bd4c     74 61 6E    | 	byte	"tan"
2bd4f     00          | 	byte	0
2bd50                 | LR__4834
2bd50     61          | 	byte	"a"
2bd51     00          | 	byte	0
2bd52                 | LR__4835
2bd52     7A          | 	byte	"z"
2bd53     00          | 	byte	0
2bd54                 | LR__4836
2bd54     5F          | 	byte	"_"
2bd55     00          | 	byte	0
2bd56                 | LR__4837
2bd56     61          | 	byte	"a"
2bd57     00          | 	byte	0
2bd58                 | LR__4838
2bd58     7A          | 	byte	"z"
2bd59     00          | 	byte	0
2bd5a                 | LR__4839
2bd5a     30          | 	byte	"0"
2bd5b     00          | 	byte	0
2bd5c                 | LR__4840
2bd5c     39          | 	byte	"9"
2bd5d     00          | 	byte	0
2bd5e                 | LR__4841
2bd5e     5F          | 	byte	"_"
2bd5f     00          | 	byte	0
2bd60                 | LR__4842
2bd60     2E          | 	byte	"."
2bd61     00          | 	byte	0
2bd62                 | LR__4843
2bd62     61          | 	byte	"a"
2bd63     00          | 	byte	0
2bd64                 | LR__4844
2bd64     7A          | 	byte	"z"
2bd65     00          | 	byte	0
2bd66                 | LR__4845
2bd66     30          | 	byte	"0"
2bd67     00          | 	byte	0
2bd68                 | LR__4846
2bd68     39          | 	byte	"9"
2bd69     00          | 	byte	0
2bd6a                 | LR__4847
2bd6a     5F          | 	byte	"_"
2bd6b     00          | 	byte	0
2bd6c                 | LR__4848
2bd6c     24          | 	byte	"$"
2bd6d     00          | 	byte	0
2bd6e                 | LR__4849
2bd6e     25          | 	byte	"%"
2bd6f     00          | 	byte	0
2bd70                 | LR__4850
2bd70     21          | 	byte	"!"
2bd71     00          | 	byte	0
2bd72                 | LR__4851
2bd72     30          | 	byte	"0"
2bd73     00          | 	byte	0
2bd74                 | LR__4852
2bd74     39          | 	byte	"9"
2bd75     00          | 	byte	0
2bd76                 | LR__4853
2bd76     2E          | 	byte	"."
2bd77     00          | 	byte	0
2bd78                 | LR__4854
2bd78     24          | 	byte	"$"
2bd79     00          | 	byte	0
2bd7a                 | LR__4855
2bd7a     25          | 	byte	"%"
2bd7b     00          | 	byte	0
2bd7c                 | LR__4856
2bd7c     2D          | 	byte	"-"
2bd7d     00          | 	byte	0
2bd7e                 | LR__4857
2bd7e     2E          | 	byte	"."
2bd7f     00          | 	byte	0
2bd80                 | LR__4858
2bd80     30          | 	byte	"0"
2bd81     00          | 	byte	0
2bd82                 | LR__4859
2bd82     39          | 	byte	"9"
2bd83     00          | 	byte	0
2bd84                 | LR__4860
2bd84     5F          | 	byte	"_"
2bd85     00          | 	byte	0
2bd86                 | LR__4861
2bd86     2E          | 	byte	"."
2bd87     00          | 	byte	0
2bd88                 | LR__4862
2bd88     45          | 	byte	"E"
2bd89     00          | 	byte	0
2bd8a                 | LR__4863
2bd8a     65          | 	byte	"e"
2bd8b     00          | 	byte	0
2bd8c                 | LR__4864
2bd8c     2D          | 	byte	"-"
2bd8d     00          | 	byte	0
2bd8e                 | LR__4865
2bd8e     2D          | 	byte	"-"
2bd8f     00          | 	byte	0
2bd90                 | LR__4866
2bd90     65          | 	byte	"e"
2bd91     00          | 	byte	0
2bd92                 | LR__4867
2bd92     2E          | 	byte	"."
2bd93     00          | 	byte	0
2bd94                 | LR__4868
2bd94     45          | 	byte	"E"
2bd95     00          | 	byte	0
2bd96                 | LR__4869
2bd96     65          | 	byte	"e"
2bd97     00          | 	byte	0
2bd98                 | LR__4870
2bd98     30          | 	byte	"0"
2bd99     00          | 	byte	0
2bd9a                 | LR__4871
2bd9a     39          | 	byte	"9"
2bd9b     00          | 	byte	0
2bd9c                 | LR__4872
2bd9c     24          | 	byte	"$"
2bd9d     00          | 	byte	0
2bd9e                 | LR__4873
2bd9e     25          | 	byte	"%"
2bd9f     00          | 	byte	0
2bda0                 | LR__4874
2bda0     2D          | 	byte	"-"
2bda1     00          | 	byte	0
2bda2                 | LR__4875
2bda2     30          | 	byte	"0"
2bda3     00          | 	byte	0
2bda4                 | LR__4876
2bda4     39          | 	byte	"9"
2bda5     00          | 	byte	0
2bda6                 | LR__4877
2bda6     5F          | 	byte	"_"
2bda7     00          | 	byte	0
2bda8                 | LR__4878
2bda8     30          | 	byte	"0"
2bda9     00          | 	byte	0
2bdaa                 | LR__4879
2bdaa     39          | 	byte	"9"
2bdab     00          | 	byte	0
2bdac                 | LR__4880
2bdac     5F          | 	byte	"_"
2bdad     00          | 	byte	0
2bdae                 | LR__4881
2bdae     22          | 	byte	34
2bdaf     00          | 	byte	0
2bdb0                 | LR__4882
2bdb0     22          | 	byte	34
2bdb1     00          | 	byte	0
2bdb2                 | LR__4883
2bdb2     44 69 6D 3A 
2bdb6     20 61 74 20 
2bdba     6C 69 6E 65 
2bdbe     20          | 	byte	"Dim: at line "
2bdbf     00          | 	byte	0
2bdc0                 | LR__4884
2bdc0     3A 20 77 61 
2bdc4     72 6E 69 6E 
2bdc8     67 3A 20 74 
2bdcc     68 65 20 76 
2bdd0     61 72 69 61 
2bdd4     62 6C 65 20 
2bdd8     65 78 69 73 
2bddc     74 65 64 2E | 	byte	": warning: the variable existed."
2bde0     00          | 	byte	0
2bde1                 | LR__4885
2bde1     28          | 	byte	"("
2bde2     00          | 	byte	0
2bde3                 | LR__4886
2bde3     61 73       | 	byte	"as"
2bde5     00          | 	byte	0
2bde6                 | LR__4887
2bde6     61 73       | 	byte	"as"
2bde8     00          | 	byte	0
2bde9                 | LR__4888
2bde9     2C          | 	byte	","
2bdea     00          | 	byte	0
2bdeb                 | LR__4889
2bdeb     29          | 	byte	")"
2bdec     00          | 	byte	0
2bded                 | LR__4890
2bded     29          | 	byte	")"
2bdee     00          | 	byte	0
2bdef                 | LR__4891
2bdef     61 73       | 	byte	"as"
2bdf1     00          | 	byte	0
2bdf2                 | LR__4892
2bdf2     62 79 74 65 | 	byte	"byte"
2bdf6     00          | 	byte	0
2bdf7                 | LR__4893
2bdf7     75 62 79 74 
2bdfb     65          | 	byte	"ubyte"
2bdfc     00          | 	byte	0
2bdfd                 | LR__4894
2bdfd     73 68 6F 72 
2be01     74          | 	byte	"short"
2be02     00          | 	byte	0
2be03                 | LR__4895
2be03     75 73 68 6F 
2be07     72 74       | 	byte	"ushort"
2be09     00          | 	byte	0
2be0a                 | LR__4896
2be0a     6C 6F 6E 67 | 	byte	"long"
2be0e     00          | 	byte	0
2be0f                 | LR__4897
2be0f     69 6E 74 65 
2be13     67 65 72    | 	byte	"integer"
2be16     00          | 	byte	0
2be17                 | LR__4898
2be17     75 6C 6F 6E 
2be1b     67          | 	byte	"ulong"
2be1c     00          | 	byte	0
2be1d                 | LR__4899
2be1d     69 6E 74 36 
2be21     34          | 	byte	"int64"
2be22     00          | 	byte	0
2be23                 | LR__4900
2be23     75 69 6E 74 
2be27     36 34       | 	byte	"uint64"
2be29     00          | 	byte	0
2be2a                 | LR__4901
2be2a     73 69 6E 67 
2be2e     6C 65       | 	byte	"single"
2be30     00          | 	byte	0
2be31                 | LR__4902
2be31     64 6F 75 62 
2be35     6C 65       | 	byte	"double"
2be37     00          | 	byte	0
2be38                 | LR__4903
2be38     73 74 72 69 
2be3c     6E 67       | 	byte	"string"
2be3e     00          | 	byte	0
2be3f                 | LR__4904
2be3f     74 6F       | 	byte	"to"
2be41     00          | 	byte	0
2be42                 | LR__4905
2be42     73 74 65 70 | 	byte	"step"
2be46     00          | 	byte	0
2be47                 | LR__4906
2be47     73 2E       | 	byte	"s."
2be49     00          | 	byte	0
2be4a                 | LR__4907
2be4a     57 65 20 68 
2be4e     61 76 65 20 
2be52     61 20 73 6C 
2be56     6F 77 20 67 
2be5a     6F 74 6F 2C 
2be5e     20 74 6F 64 
2be62     6F 20 20    | 	byte	"We have a slow goto, todo  "
2be65     00          | 	byte	0
2be66                 | LR__4908
2be66     6E 6F 6E 61 
2be6a     6D 65 2E 62 
2be6e     61 73       | 	byte	"noname.bas"
2be70     00          | 	byte	0
2be71                 | LR__4909
2be71                 | 	byte	
2be71     00          | 	byte	0
2be72                 | LR__4910
2be72     6E 6F 6E 61 
2be76     6D 65 2E 62 
2be7a     61 73       | 	byte	"noname.bas"
2be7c     00          | 	byte	0
2be7d                 | LR__4911
2be7d     2F          | 	byte	"/"
2be7e     00          | 	byte	0
2be7f                 | LR__4912
2be7f                 | 	byte	
2be7f     00          | 	byte	0
2be80                 | LR__4913
2be80                 | 	byte	
2be80     00          | 	byte	0
2be81                 | LR__4914
2be81     6E 6F 6E 61 
2be85     6D 65 2E 62 
2be89     61 73       | 	byte	"noname.bas"
2be8b     00          | 	byte	0
2be8c                 | LR__4915
2be8c     2F          | 	byte	"/"
2be8d     00          | 	byte	0
2be8e                 | LR__4916
2be8e     53 79 73 74 
2be92     65 6D 20 65 
2be96     72 72 6F 72 
2be9a     20          | 	byte	"System error "
2be9b     00          | 	byte	0
2be9c                 | LR__4917
2be9c     3A 20       | 	byte	": "
2be9e     00          | 	byte	0
2be9f                 | LR__4918
2be9f     2F          | 	byte	"/"
2bea0     00          | 	byte	0
2bea1                 | LR__4919
2bea1     30          | 	byte	"0"
2bea2     00          | 	byte	0
2bea3                 | LR__4920
2bea3     39          | 	byte	"9"
2bea4     00          | 	byte	0
2bea5                 | LR__4921
2bea5                 | 	byte	
2bea5     00          | 	byte	0
2bea6                 | LR__4922
2bea6     53 74 6F 70 
2beaa     70 65 64 20 
2beae     61 74 20 6C 
2beb2     69 6E 65 20 | 	byte	"Stopped at line "
2beb6     00          | 	byte	0
2beb7                 | LR__4923
2beb7                 | 	byte	
2beb7     00          | 	byte	0
2beb8                 | LR__4924
2beb8                 | 	byte	
2beb8     00          | 	byte	0
2beb9                 | LR__4925
2beb9     2F 73 64 2F 
2bebd     6D 65 64 69 
2bec1     61 2F 68 2F | 	byte	"/sd/media/h/"
2bec5     00          | 	byte	0
2bec6                 | LR__4926
2bec6     53 79 73 74 
2beca     65 6D 20 65 
2bece     72 72 6F 72 
2bed2     20          | 	byte	"System error "
2bed3     00          | 	byte	0
2bed4                 | LR__4927
2bed4     3A 20       | 	byte	": "
2bed6     00          | 	byte	0
2bed7                 | LR__4928
2bed7                 | 	byte	
2bed7     00          | 	byte	0
2bed8                 | LR__4929
2bed8                 | 	byte	
2bed8     00          | 	byte	0
2bed9                 | LR__4930
2bed9     2F 73 64 2F 
2bedd     6D 65 64 69 
2bee1     61 2F 73 2F | 	byte	"/sd/media/s/"
2bee5     00          | 	byte	0
2bee6                 | LR__4931
2bee6     53 79 73 74 
2beea     65 6D 20 65 
2beee     72 72 6F 72 
2bef2     20          | 	byte	"System error "
2bef3     00          | 	byte	0
2bef4                 | LR__4932
2bef4     3A 20       | 	byte	": "
2bef6     00          | 	byte	0
2bef7                 | LR__4933
2bef7     45 72 72 6F 
2befb     72 20       | 	byte	"Error "
2befd     00          | 	byte	0
2befe                 | LR__4934
2befe     3A 20       | 	byte	": "
2bf00     00          | 	byte	0
2bf01                 | LR__4935
2bf01                 | 	byte	
2bf01     00          | 	byte	0
2bf02                 | LR__4936
2bf02                 | 	byte	
2bf02     00          | 	byte	0
2bf03                 | LR__4937
2bf03     72 6E 64 3A 
2bf07     20          | 	byte	"rnd: "
2bf08     00          | 	byte	0
2bf09                 | LR__4938
2bf09     72 6E 64 3A 
2bf0d     20          | 	byte	"rnd: "
2bf0e     00          | 	byte	0
2bf0f                 | LR__4939
2bf0f     67 65 74 65 
2bf13     6E 76 73 75 
2bf17     73 74 61 69 
2bf1b     6E 3A 20    | 	byte	"getenvsustain: "
2bf1e     00          | 	byte	0
2bf1f                 | LR__4940
2bf1f     73 69 6E 3A 
2bf23     20          | 	byte	"sin: "
2bf24     00          | 	byte	0
2bf25                 | LR__4941
2bf25     63 6F 73 3A 
2bf29     20          | 	byte	"cos: "
2bf2a     00          | 	byte	0
2bf2b                 | LR__4942
2bf2b     74 61 6E 3A 
2bf2f     20          | 	byte	"tan: "
2bf30     00          | 	byte	0
2bf31                 | LR__4943
2bf31     61 73 69 6E 
2bf35     3A 20       | 	byte	"asin: "
2bf37     00          | 	byte	0
2bf38                 | LR__4944
2bf38     61 63 6F 73 
2bf3c     3A 20       | 	byte	"acos: "
2bf3e     00          | 	byte	0
2bf3f                 | LR__4945
2bf3f     61 74 6E 3A 
2bf43     20          | 	byte	"atn: "
2bf44     00          | 	byte	0
2bf45                 | LR__4946
2bf45     73 71 72 3A 
2bf49     20          | 	byte	"sqr: "
2bf4a     00          | 	byte	0
2bf4b                 | LR__4947
2bf4b     73 74 69 63 
2bf4f     6B 3A 20    | 	byte	"stick: "
2bf52     00          | 	byte	0
2bf53                 | LR__4948
2bf53     73 74 72 69 
2bf57     67 3A 20    | 	byte	"strig: "
2bf5a     00          | 	byte	0
2bf5b                 | LR__4949
2bf5b     67 65 74 70 
2bf5f     69 78 65 6C 
2bf63     3A 20       | 	byte	"getpixel: "
2bf65     00          | 	byte	0
2bf66                 | LR__4950
2bf66                 | 	byte	
2bf66     00          | 	byte	0
2bf67                 | LR__4951
2bf67     2F 73 64 2F 
2bf6b     62 61 73    | 	byte	"/sd/bas"
2bf6e     00          | 	byte	0
2bf6f                 | LR__4952
2bf6f     57 6F 72 6B 
2bf73     69 6E 67 20 
2bf77     64 69 72 65 
2bf7b     63 74 6F 72 
2bf7f     79 3A 20    | 	byte	"Working directory: "
2bf82     00          | 	byte	0
2bf83                 | LR__4953
2bf83     2A          | 	byte	"*"
2bf84     00          | 	byte	0
2bf85                 | LR__4954
2bf85                 | 	byte	
2bf85     00          | 	byte	0
2bf86                 | LR__4955
2bf86     5B 64 69 72 
2bf8a     5D 20       | 	byte	"[dir] "
2bf8c     00          | 	byte	0
2bf8d                 | LR__4956
2bf8d     2A          | 	byte	"*"
2bf8e     00          | 	byte	0
2bf8f                 | LR__4957
2bf8f                 | 	byte	
2bf8f     00          | 	byte	0
2bf90                 | LR__4958
2bf90     2D 2D 2D 2D 
2bf94     2D 6D 6F 72 
2bf98     65 2C 20 70 
2bf9c     72 65 73 73 
2bfa0     20 61 6E 79 
2bfa4     20 6B 65 79 | 	byte	"-----more, press any key"
2bfa8     00          | 	byte	0
2bfa9                 | LR__4959
2bfa9     20 20 20 20 
      ...             
2bfc1     20 20 20 20 
2bfc5     20          | 	byte	"                             "
2bfc6     00          | 	byte	0
2bfc7                 | LR__4960
2bfc7     2F          | 	byte	"/"
2bfc8     00          | 	byte	0
2bfc9                 | LR__4961
2bfc9     2F 73 64 2F 
2bfcd     62 69 6E 2F | 	byte	"/sd/bin/"
2bfd1     00          | 	byte	0
2bfd2                 | LR__4962
2bfd2     53 79 73 74 
2bfd6     65 6D 20 65 
2bfda     72 72 6F 72 
2bfde     20          | 	byte	"System error "
2bfdf     00          | 	byte	0
2bfe0                 | LR__4963
2bfe0     3A 20       | 	byte	": "
2bfe2     00          | 	byte	0
2bfe3                 | LR__4964
2bfe3                 | 	byte	
2bfe3     00          | 	byte	0
2bfe4                 | LR__4965
2bfe4     45 78 70 65 
2bfe8     63 74 65 64 
2bfec     20 6E 75 6D 
2bff0     62 65 72 2C 
2bff4     20 67 6F 74 
2bff8     20 73 6F 6D 
2bffc     65 74 68 69 
2c000     6E 67 20 65 
2c004     6C 73 65 2E | 	byte	"Expected number, got something else."
2c008     00          | 	byte	0
2c009                 | LR__4966
2c009     43 61 6E 6E 
2c00d     6F 74 20 61 
2c011     64 64 20 61 
2c015     20 6E 75 6D 
2c019     62 65 72 20 
2c01d     74 6F 20 61 
2c021     20 73 74 72 
2c025     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2c029     00          | 	byte	0
2c02a                 | LR__4967
2c02a     43 61 6E 6E 
2c02e     6F 74 20 73 
2c032     75 62 73 74 
2c036     72 61 63 74 
2c03a     20 73 74 72 
2c03e     69 6E 67 73 
2c042     2E          | 	byte	"Cannot substract strings."
2c043     00          | 	byte	0
2c044                 | LR__4968
2c044     55 6E 6B 6E 
2c048     6F 77 6E 20 
2c04c     65 72 72 6F 
2c050     72 20 77 68 
2c054     69 6C 65 20 
2c058     61 64 64 69 
2c05c     6E 67 2E    | 	byte	"Unknown error while adding."
2c05f     00          | 	byte	0
2c060                 | LR__4969
2c060     55 6E 6B 6E 
2c064     6F 77 6E 20 
2c068     65 72 72 6F 
2c06c     72 20 77 68 
2c070     69 6C 65 20 
2c074     73 75 62 73 
2c078     74 72 61 63 
2c07c     74 69 6E 67 
2c080     2E          | 	byte	"Unknown error while substracting."
2c081     00          | 	byte	0
2c082                 | LR__4970
2c082     43 61 6E 6E 
2c086     6F 74 20 64 
2c08a     6F 20 6C 6F 
2c08e     67 69 63 20 
2c092     6F 70 65 72 
2c096     61 74 69 6F 
2c09a     6E 20 6F 6E 
2c09e     20 73 74 72 
2c0a2     69 6E 67 20 
2c0a6     6F 72 20 66 
2c0aa     6C 6F 61 74 
2c0ae     2E          | 	byte	"Cannot do logic operation on string or float."
2c0af     00          | 	byte	0
2c0b0                 | LR__4971
2c0b0     55 6E 6B 6E 
2c0b4     6F 77 6E 20 
2c0b8     65 72 72 6F 
2c0bc     72 20 77 68 
2c0c0     69 6C 65 20 
2c0c4     64 6F 69 6E 
2c0c8     67 20 6C 6F 
2c0cc     67 69 63 20 
2c0d0     6F 70 65 72 
2c0d4     61 74 69 6F 
2c0d8     6E 2E       | 	byte	"Unknown error while doing logic operation."
2c0da     00          | 	byte	0
2c0db                 | LR__4972
2c0db     43 61 6E 6E 
2c0df     6F 74 20 6D 
2c0e3     75 6C 74 69 
2c0e7     70 6C 79 20 
2c0eb     73 74 72 69 
2c0ef     6E 67 73 2E | 	byte	"Cannot multiply strings."
2c0f3     00          | 	byte	0
2c0f4                 | LR__4973
2c0f4     55 6E 6B 6E 
2c0f8     6F 77 6E 20 
2c0fc     65 72 72 6F 
2c100     72 20 77 68 
2c104     69 6C 65 20 
2c108     6D 75 6C 74 
2c10c     69 70 6C 79 
2c110     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2c114     00          | 	byte	0
2c115                 | LR__4974
2c115     43 61 6E 6E 
2c119     6F 74 20 64 
2c11d     69 76 69 64 
2c121     65 20 73 74 
2c125     72 69 6E 67 
2c129     73 2E       | 	byte	"Cannot divide strings."
2c12b     00          | 	byte	0
2c12c                 | LR__4975
2c12c     55 6E 6B 6E 
2c130     6F 77 6E 20 
2c134     65 72 72 6F 
2c138     72 20 77 68 
2c13c     69 6C 65 20 
2c140     64 69 76 69 
2c144     64 69 6E 67 
2c148     2E          | 	byte	"Unknown error while dividing."
2c149     00          | 	byte	0
2c14a                 | LR__4976
2c14a     43 61 6E 6E 
2c14e     6F 74 20 63 
2c152     6F 6D 70 75 
2c156     74 65 20 61 
2c15a     20 70 6F 77 
2c15e     65 72 20 6F 
2c162     66 20 61 20 
2c166     73 74 72 69 
2c16a     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2c16d     00          | 	byte	0
2c16e                 | LR__4977
2c16e     55 6E 6B 6E 
2c172     6F 77 6E 20 
2c176     65 72 72 6F 
2c17a     72 20 77 68 
2c17e     69 6C 65 20 
2c182     63 6F 6D 70 
2c186     75 74 69 6E 
2c18a     67 20 61 20 
2c18e     70 6F 77 65 
2c192     72 2E       | 	byte	"Unknown error while computing a power."
2c194     00          | 	byte	0
2c195                 | LR__4978
2c195     52 69 67 68 
2c199     74 20 70 61 
2c19d     72 65 6E 74 
2c1a1     68 65 73 69 
2c1a5     73 20 65 78 
2c1a9     70 65 63 74 
2c1ad     65 64 2E    | 	byte	"Right parenthesis expected."
2c1b0     00          | 	byte	0
2c1b1                 | LR__4979
2c1b1     45 78 70 65 
2c1b5     63 74 65 64 
2c1b9     20 73 74 72 
2c1bd     69 6E 67 2E | 	byte	"Expected string."
2c1c1     00          | 	byte	0
2c1c2                 | LR__4980
2c1c2     45 78 70 65 
2c1c6     63 74 65 64 
2c1ca     20 66 6C 6F 
2c1ce     61 74 2E    | 	byte	"Expected float."
2c1d1     00          | 	byte	0
2c1d2                 | LR__4981
2c1d2     45 78 70 65 
2c1d6     63 74 65 64 
2c1da     20 75 6E 73 
2c1de     69 67 6E 65 
2c1e2     64 20 69 6E 
2c1e6     74 65 67 65 
2c1ea     72 2E       | 	byte	"Expected unsigned integer."
2c1ec     00          | 	byte	0
2c1ed                 | LR__4982
2c1ed     45 78 70 65 
2c1f1     63 74 65 64 
2c1f5     20 69 6E 74 
2c1f9     65 67 65 72 
2c1fd     2E          | 	byte	"Expected integer."
2c1fe     00          | 	byte	0
2c1ff                 | LR__4983
2c1ff     4E 6F 20 6D 
2c203     6F 72 65 20 
2c207     76 61 72 69 
2c20b     61 62 6C 65 
2c20f     20 73 6C 6F 
2c213     74 73 2E    | 	byte	"No more variable slots."
2c216     00          | 	byte	0
2c217                 | LR__4984
2c217     56 61 72 69 
2c21b     61 62 6C 65 
2c21f     20 6E 6F 74 
2c223     20 66 6F 75 
2c227     6E 64 2E    | 	byte	"Variable not found."
2c22a     00          | 	byte	0
2c22b                 | LR__4985
2c22b     43 6F 6D 6D 
2c22f     61 20 65 78 
2c233     70 65 63 74 
2c237     65 64 2E    | 	byte	"Comma expected."
2c23a     00          | 	byte	0
2c23b                 | LR__4986
2c23b     43 6F 6D 6D 
2c23f     61 20 6F 72 
2c243     20 73 65 6D 
2c247     69 63 6F 6C 
2c24b     6F 6E 20 65 
2c24f     78 70 65 63 
2c253     74 65 64 2E | 	byte	"Comma or semicolon expected."
2c257     00          | 	byte	0
2c258                 | LR__4987
2c258     55 6E 6B 6E 
2c25c     6F 77 6E 20 
2c260     63 6F 6D 6D 
2c264     61 6E 64 2E | 	byte	"Unknown command."
2c268     00          | 	byte	0
2c269                 | LR__4988
2c269     53 74 61 63 
2c26d     6B 20 75 6E 
2c271     64 65 72 66 
2c275     6C 6F 77 2E | 	byte	"Stack underflow."
2c279     00          | 	byte	0
2c27a                 | LR__4989
2c27a     43 61 6E 6E 
2c27e     6F 74 20 65 
2c282     78 65 63 75 
2c286     74 65 20 67 
2c28a     6F 74 6F 20 
2c28e     69 6E 20 74 
2c292     68 65 20 69 
2c296     6D 6D 65 64 
2c29a     69 61 74 65 
2c29e     20 6D 6F 64 
2c2a2     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2c2a4     00          | 	byte	0
2c2a5                 | LR__4990
2c2a5     43 61 6E 6E 
2c2a9     6F 74 20 6C 
2c2ad     6F 61 64 20 
2c2b1     66 72 6F 6D 
2c2b5     20 74 68 69 
2c2b9     73 20 66 69 
2c2bd     6C 65 2E    | 	byte	"Cannot load from this file."
2c2c0     00          | 	byte	0
2c2c1                 | LR__4991
2c2c1     54 68 65 20 
2c2c5     70 72 6F 67 
2c2c9     72 61 6D 20 
2c2cd     69 73 20 65 
2c2d1     6D 70 74 79 
2c2d5     2E          | 	byte	"The program is empty."
2c2d6     00          | 	byte	0
2c2d7                 | LR__4992
2c2d7     49 66 20 61 
2c2db     66 74 65 72 
2c2df     20 69 66 2E | 	byte	"If after if."
2c2e3     00          | 	byte	0
2c2e4                 | LR__4993
2c2e4     45 6D 70 74 
2c2e8     79 20 65 78 
2c2ec     70 72 65 73 
2c2f0     73 69 6F 6E 
2c2f4     2E          | 	byte	"Empty expression."
2c2f5     00          | 	byte	0
2c2f6                 | LR__4994
2c2f6     53 74 72 69 
2c2fa     6E 67 20 65 
2c2fe     78 70 65 63 
2c302     74 65 64 2E | 	byte	"String expected."
2c306     00          | 	byte	0
2c307                 | LR__4995
2c307     49 6E 74 65 
2c30b     72 70 72 65 
2c30f     74 65 72 20 
2c313     69 6E 74 65 
2c317     72 6E 61 6C 
2c31b     20 65 72 72 
2c31f     6F 72 2E    | 	byte	"Interpreter internal error."
2c322     00          | 	byte	0
2c323                 | LR__4996
2c323     45 78 70 65 
2c327     63 74 65 64 
2c32b     20 61 73 73 
2c32f     69 67 6E 2E | 	byte	"Expected assign."
2c333     00          | 	byte	0
2c334                 | LR__4997
2c334     45 78 70 65 
2c338     63 74 65 64 
2c33c     20 27 74 6F 
2c340     27 2E       | 	byte	"Expected 'to'."
2c342     00          | 	byte	0
2c343                 | LR__4998
2c343     45 78 70 65 
2c347     63 74 65 64 
2c34b     20 69 6E 74 
2c34f     65 67 65 72 
2c353     20 76 61 72 
2c357     69 61 62 6C 
2c35b     65 2E       | 	byte	"Expected integer variable."
2c35d     00          | 	byte	0
2c35e                 | LR__4999
2c35e     55 6E 69 6E 
2c362     69 74 69 61 
2c366     6C 69 7A 65 
2c36a     64 20 76 61 
2c36e     72 69 61 62 
2c372     6C 65 20 69 
2c376     6E 20 27 6E 
2c37a     65 78 74 27 
2c37e     2C 20 75 73 
2c382     65 20 27 66 
2c386     6F 72 27 20 
2c38a     62 65 66 6F 
2c38e     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2c391     00          | 	byte	0
2c392                 | LR__5000
2c392     4E 6F 20 6D 
2c396     6F 72 65 20 
2c39a     73 6C 6F 74 
2c39e     73 20 66 6F 
2c3a2     72 20 27 66 
2c3a6     6F 72 27 2E | 	byte	"No more slots for 'for'."
2c3aa     00          | 	byte	0
2c3ab                 | LR__5001
2c3ab     27 4E 65 78 
2c3af     74 27 20 64 
2c3b3     6F 65 73 6E 
2c3b7     27 74 20 6D 
2c3bb     61 74 63 68 
2c3bf     20 27 66 6F 
2c3c3     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2c3c6     00          | 	byte	0
2c3c7                 | LR__5002
2c3c7     27 47 6F 74 
2c3cb     6F 27 20 74 
2c3cf     61 72 67 65 
2c3d3     74 20 6C 69 
2c3d7     6E 65 20 6E 
2c3db     6F 74 20 66 
2c3df     6F 75 6E 64 
2c3e3     2E          | 	byte	"'Goto' target line not found."
2c3e4     00          | 	byte	0
2c3e5                 | LR__5003
2c3e5     42 61 64 20 
2c3e9     6E 75 6D 62 
2c3ed     65 72 20 6F 
2c3f1     66 20 70 61 
2c3f5     72 61 6D 65 
2c3f9     74 65 72 73 | 	byte	"Bad number of parameters"
2c3fd     00          | 	byte	0
2c3fe                 | LR__5004
2c3fe     46 75 6E 63 
2c402     74 69 6F 6E 
2c406     20 75 6E 64 
2c40a     65 66 69 6E 
2c40e     65 64 20 66 
2c412     6F 72 20 73 
2c416     74 72 69 6E 
2c41a     67 73       | 	byte	"Function undefined for strings"
2c41c     00          | 	byte	0
2c41d                 | LR__5005
2c41d     42 61 64 20 
2c421     70 61 72 61 
2c425     6D 65 74 65 
2c429     72 2E       | 	byte	"Bad parameter."
2c42b     00          | 	byte	0
2c42c                 | LR__5006
2c42c     43 61 6E 6E 
2c430     6F 74 20 64 
2c434     65 63 6C 61 
2c438     72 65 20 61 
2c43c     6E 20 61 72 
2c440     72 61 79 3A 
2c444     20 74 68 65 
2c448     20 76 61 72 
2c44c     69 61 62 6C 
2c450     65 20 65 78 
2c454     69 73 74 73 
2c458     2E          | 	byte	"Cannot declare an array: the variable exists."
2c459     00          | 	byte	0
2c45a                 | LR__5007
2c45a     45 78 70 65 
2c45e     63 74 65 64 
2c462     20 27 28 27 
2c466     2E          | 	byte	"Expected '('."
2c467     00          | 	byte	0
2c468                 | LR__5008
2c468     45 78 70 65 
2c46c     63 74 65 64 
2c470     20 27 29 27 
2c474     20 6F 72 20 
2c478     27 2C 27 2E | 	byte	"Expected ')' or ','."
2c47c     00          | 	byte	0
2c47d                 | LR__5009
2c47d     4E 6F 20 6D 
2c481     6F 72 65 20 
2c485     74 68 61 6E 
2c489     20 33 20 64 
2c48d     69 6D 65 6E 
2c491     73 69 6F 6E 
2c495     73 20 73 75 
2c499     70 70 6F 72 
2c49d     74 65 64    | 	byte	"No more than 3 dimensions supported"
2c4a0     00          | 	byte	0
2c4a1                 | LR__5010
2c4a1     56 61 72 69 
2c4a5     61 62 6C 65 
2c4a9     20 6E 61 6D 
2c4ad     65 20 65 78 
2c4b1     70 65 63 74 
2c4b5     65 64       | 	byte	"Variable name expected"
2c4b7     00          | 	byte	0
2c4b8                 | LR__5011
2c4b8     54 79 70 65 
2c4bc     20 6E 61 6D 
2c4c0     65 20 65 78 
2c4c4     70 65 63 74 
2c4c8     65 64       | 	byte	"Type name expected"
2c4ca     00          | 	byte	0
2c4cb                 | LR__5012
2c4cb     54 79 70 65 
2c4cf     20 6E 6F 74 
2c4d3     20 73 75 70 
2c4d7     70 6F 72 74 
2c4db     65 64 20 79 
2c4df     65 74       | 	byte	"Type not supported yet"
2c4e1     00          | 	byte	0
2c4e2                 | LR__5013
2c4e2     41 72 72 61 
2c4e6     79 20 69 6E 
2c4ea     64 65 78 20 
2c4ee     6F 75 74 20 
2c4f2     6F 66 20 72 
2c4f6     61 6E 67 65 | 	byte	"Array index out of range"
2c4fa     00          | 	byte	0
2c4fb                 | LR__5014
2c4fb     45 72 72 6F 
2c4ff     72 20       | 	byte	"Error "
2c501     00          | 	byte	0
2c502                 | LR__5015
2c502     3A 20       | 	byte	": "
2c504     00          | 	byte	0
2c505                 | LR__5016
2c505     2F 73 64    | 	byte	"/sd"
2c508     00          | 	byte	0
2c509                 | LR__5017
2c509     2F 73 64 2F 
2c50d     62 61 73    | 	byte	"/sd/bas"
2c510     00          | 	byte	0
2c511                 | LR__5018
2c511     2F 73 64 2F 
2c515     62 61 73    | 	byte	"/sd/bas"
2c518     00          | 	byte	0
2c519                 | LR__5019
2c519     20 42 41 53 
2c51d     49 43 20 62 
2c521     79 74 65 73 
2c525     20 66 72 65 
2c529     65          | 	byte	" BASIC bytes free"
2c52a     00          | 	byte	0
2c52b                 | LR__5020
2c52b     52 65 61 64 
2c52f     79          | 	byte	"Ready"
2c530     00          | 	byte	0
2c531                 | LR__5021
2c531     20          | 	byte	" "
2c532     00          | 	byte	0
2c533                 | LR__5022
2c533     20          | 	byte	" "
2c534     00          | 	byte	0
2c535                 | LR__5023
2c535                 | 	byte	
2c535     00          | 	byte	0
2c536                 | LR__5024
2c536                 | 	byte	
2c536     00          | 	byte	0
2c537     00          | 	alignl
2c538                 | _dat_
2c538     00 00 00 00 
2c53c     00 00 00 00 
2c540     00 00 00 00 
2c544     00 00 00 00 | 	byte	$00[16]
2c548     61 41 17 0E 
2c54c     62 42 00 00 
2c550     63 43 19 10 
2c554     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2c558     65 45 18 0F 
2c55c     66 46 00 00 
2c560     67 47 00 00 
2c564     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2c568     69 49 00 00 
2c56c     6A 4A 00 00 
2c570     6B 4B 00 00 
2c574     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2c578     6D 4D 00 00 
2c57c     6E 4E 1A 11 
2c580     6F 4F 1E 15 
2c584     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2c588     71 51 00 00 
2c58c     72 52 00 00 
2c590     73 53 1B 12 
2c594     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2c598     75 55 00 00 
2c59c     76 56 00 00 
2c5a0     77 57 00 00 
2c5a4     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2c5a8     79 59 00 00 
2c5ac     7A 5A 1D 14 
2c5b0     31 21 04 00 
2c5b4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2c5b8     33 23 06 00 
2c5bc     34 24 07 00 
2c5c0     35 25 08 00 
2c5c4     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2c5c8     37 26 0A 00 
2c5cc     38 2A 0B 00 
2c5d0     39 28 0C 00 
2c5d4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2c5d8     8D 8D 00 00 
2c5dc     9B 9B 00 00 
2c5e0     88 88 00 00 
2c5e4     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2c5e8     20 20 00 00 
2c5ec     2D 5F 00 00 
2c5f0     3D 2B 00 00 
2c5f4     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2c5f8     5D 7D 00 00 
2c5fc     5C 7C 00 00 
2c600     23 7E 00 00 
2c604     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2c608     27 22 00 00 
2c60c     60 7E 03 00 
2c610     2C 3C 00 00 
2c614     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2c618     2F 3F 00 00 
2c61c     B9 B9 00 00 
2c620     BA 00 00 00 
2c624     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2c628     BC 00 00 00 
2c62c     BD 00 00 00 
2c630     BE 00 00 00 
2c634     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2c638     C0 00 00 00 
2c63c     C1 00 00 00 
2c640     C2 00 00 00 
2c644     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2c648     C4 00 00 00 
2c64c     C5 00 00 00 
2c650     C6 00 00 00 
2c654     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2c658     C8 00 00 00 
2c65c     C9 00 00 00 
2c660     CA 00 00 00 
2c664     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2c668     7F 7F 00 00 
2c66c     CC 00 00 00 
2c670     CD 00 00 00 
2c674     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2c678     CF 00 00 00 
2c67c     D0 00 00 00 
2c680     D1 00 00 00 
2c684     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2c688     2F 2F 00 00 
2c68c     2A 2A 00 00 
2c690     2D 2D 00 00 
2c694     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2c698     8D 8D 00 00 
2c69c     31 31 00 00 
2c6a0     32 32 00 00 
2c6a4     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2c6a8     34 34 00 00 
2c6ac     35 35 00 00 
2c6b0     36 36 00 00 
2c6b4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2c6b8     38 38 00 00 
2c6bc     39 39 00 00 
2c6c0     30 30 00 00 
2c6c4     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2c6c8     5C 7C 00 00 
2c6cc     00 00 00 00 
2c6d0     00 00 00 00 
2c6d4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2c6d8     00 00 00 00 
      ...             
2c730     00 00 00 00 
2c734     00 00 00 00 | 	byte	$00[96]
2c738     2B 00 A6 F2 
2c73c     24 A7 09 80 
2c740     5B 88 4D 89 
2c744     80 88 A5 88 | atari_spl file "atari.spl"
2c748     6D 88 B8 88 
2c74c     80 88 CB 88 
2c750     92 88 A5 88 
2c754     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2c758     A5 88 CA 88 
2c75c     A6 88 DD 88 
2c760     B8 88 AB 89 
2c764     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2c768     C8 AD C6 F1 
2c76c     91 06 B6 FF 
2c770     13 00 4A 00 
2c774     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2c778     5D 00 5E 00 
2c77c     5D 00 5E 00 
2c780     5E 00 5D 00 
2c784     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2c788     38 00 83 00 
2c78c     25 00 83 00 
2c790     C3 FE D1 04 
2c794     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2c798     48 88 38 85 
2c79c     41 8A CB 88 
2c7a0     28 89 B8 88 
2c7a4     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2c7a8     15 89 03 89 
2c7ac     02 89 15 89 
2c7b0     16 89 15 89 
2c7b4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2c7b8     15 89 3A 89 
2c7bc     72 89 E3 89 
2c7c0     52 83 AD 97 
2c7c4     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2c7c8     0C 02 B6 FF 
2c7cc     E1 00 A8 00 
2c7d0     F3 00 A8 00 
2c7d4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2c7d8     CE 00 CD 00 
2c7dc     CD 00 BA 00 
2c7e0     E1 00 BB 00 
2c7e4     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2c7e8     DF 00 C9 FF 
2c7ec     E6 01 B6 06 
2c7f0     EE DD 8D 98 
2c7f4     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2c7f8     97 89 73 89 
2c7fc     3B 89 60 89 
2c800     60 89 60 89 
2c804     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2c808     73 89 72 89 
2c80c     85 89 73 89 
2c810     AA 89 60 89 
2c814     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2c818     E8 8A 18 86 
2c81c     92 88 A5 C2 
2c820     E0 00 C3 05 
2c824     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2c828     F2 00 64 01 
2c82c     06 01 3E 01 
2c830     2B 01 2B 01 
2c834     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2c838     2B 01 2A 01 
2c83c     2B 01 2B 01 
2c840     2B 01 18 01 
2c844     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2c848     39 07 61 F3 
2c84c     C0 AF 37 85 
2c850     0F 88 8B 8A 
2c854     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2c858     AB 89 D0 89 
2c85c     AB 89 D0 89 
2c860     D0 89 CF 89 
2c864     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2c868     D0 89 F5 89 
2c86c     BD 89 08 8A 
2c870     CF 89 E8 8A 
2c874     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2c878     53 B3 0D F8 
2c87c     F4 07 38 00 
2c880     63 01 63 01 
2c884     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2c888     88 01 88 01 
2c88c     76 01 88 01 
2c890     88 01 89 01 
2c894     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2c898     75 01 AE 01 
2c89c     76 01 88 01 
2c8a0     4A 00 46 06 
2c8a4     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2c8a8     08 8A 9A 86 
2c8ac     33 8B 08 8A 
2c8b0     2D 8A F5 89 
2c8b4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2c8b8     2D 8A 2D 8A 
2c8bc     2E 8A 1B 8A 
2c8c0     40 8A 2D 8A 
2c8c4     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2c8c8     2E 8A 79 8A 
2c8cc     66 8A C8 8B 
2c8d0     72 82 2B 97 
2c8d4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2c8d8     1D 02 05 01 
2c8dc     F8 01 C0 01 
2c8e0     0B 02 C0 01 
2c8e4     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2c8e8     F9 01 D3 01 
2c8ec     F8 01 D3 01 
2c8f0     F8 01 D2 01 
2c8f4     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2c8f8     E6 01 2B 01 
2c8fc     8E 02 5F 07 
2c900     F7 E2 ED 9C 
2c904     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2c908     E8 8A 78 8A 
2c90c     78 8A 65 8A 
2c910     8B 8A 78 8A 
2c914     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2c918     8B 8A 9D 8A 
2c91c     9D 8A 8B 8A 
2c920     C2 8A 78 8A 
2c924     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2c928     70 8C 18 86 
2c92c     8B 8A 23 C9 
2c930     CB 03 C4 05 
2c934     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2c938     0B 02 7B 02 
2c93c     1E 02 55 02 
2c940     30 02 43 02 
2c944     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2c948     43 02 44 02 
2c94c     43 02 30 02 
2c950     68 02 31 02 
2c954     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2c958     07 08 3F F7 
2c95c     73 B2 13 85 
2c960     15 89 ED 8B 
2c964     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2c968     B0 8A FB 8A 
2c96c     D5 8A FA 8A 
2c970     E8 8A FB 8A 
2c974     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2c978     E8 8A 21 8B 
2c97c     E7 8A 33 8B 
2c980     E8 8A 26 8C 
2c984     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2c988     8D B0 27 F6 
2c98c     9C 08 AD 01 
2c990     7B 02 8D 02 
2c994     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2c998     A1 02 A0 02 
2c99c     A1 02 A0 02 
2c9a0     A0 02 A0 02 
2c9a4     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2c9a8     7B 02 D8 02 
2c9ac     7B 02 C6 02 
2c9b0     3E 01 C3 05 
2c9b4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2c9b8     00 8C 2A 86 
2c9bc     E0 8C FA 8A 
2c9c0     6A 8B FB 8A 
2c9c4     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2c9c8     45 8B 45 8B 
2c9cc     45 8B 6B 8B 
2c9d0     46 8B 59 8B 
2c9d4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2c9d8     6B 8B 6B 8B 
2c9dc     6B 8B 6B 8B 
2c9e0     7D 8B 7D 8B 
2c9e4     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2c9e8     90 8B 91 8B 
2c9ec     90 8B 90 8B 
2c9f0     A3 8B A3 8B 
2c9f4     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2c9f8     B5 8B B6 8B 
2c9fc     B5 8B B5 8B 
2ca00     B6 8B C8 8B 
2ca04     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2ca08     C8 8B DA 8B 
2ca0c     DB 8B DB 8B 
2ca10     DB 8B DC 8B 
2ca14     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2ca18     EE 8B EE 8B 
2ca1c     00 8C 01 8C 
2ca20     00 8C 01 8C 
2ca24     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2ca28     12 8C 13 8C 
2ca2c     13 8C 26 8C 
2ca30     26 8C 26 8C 
2ca34     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2ca38     38 8C 38 8C 
2ca3c     38 8C 38 8C 
2ca40     4B 8C 4B 8C 
2ca44     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2ca48     5E 8C 5E 8C 
2ca4c     5E 8C 5E 8C 
2ca50     70 8C 70 8C 
2ca54     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2ca58     70 8C 83 8C 
2ca5c     83 8C 83 8C 
2ca60     83 8C 96 8C 
2ca64     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2ca68     95 8C A9 8C 
2ca6c     A9 8C A8 8C 
2ca70     A8 8C A8 8C 
2ca74     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2ca78     BB 8C BB 8C 
2ca7c     BB 8C CE 8C 
2ca80     CE 8C CE 8C 
2ca84     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2ca88     E0 8C E1 8C 
2ca8c     E1 8C E0 8C 
2ca90     F4 8C F2 8C 
2ca94     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2ca98     05 8D 05 8D 
2ca9c     06 8D 06 8D 
2caa0     19 8D 19 8D 
2caa4     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2caa8     18 8D 2B 8D 
2caac     2B 8D 2B 8D 
2cab0     2A 8D 3E 8D 
2cab4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2cab8     3E 8D 51 8D 
2cabc     50 8D 50 8D 
2cac0     50 8D 51 8D 
2cac4     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2cac8     63 8D 64 8D 
2cacc     76 8D 75 8D 
2cad0     75 8D 76 8D 
2cad4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2cad8     88 8D 88 8D 
2cadc     89 8D 9B 8D 
2cae0     9A 8D 9B 8D 
2cae4     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2cae8     AD 8D AE 8D 
2caec     AD 8D AE 8D 
2caf0     C1 8D C1 8D 
2caf4     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2caf8     D3 8D D3 8D 
2cafc     D3 8D D3 8D 
2cb00     D3 8D E6 8D 
2cb04     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2cb08     E6 8D E6 8D 
2cb0c     F9 8D F9 8D 
2cb10     F9 8D F8 8D 
2cb14     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2cb18     0B 8E 0B 8E 
2cb1c     1D 8E 1D 8E 
2cb20     1E 8E 1E 8E 
2cb24     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2cb28     31 8E 31 8E 
2cb2c     31 8E 42 8E 
2cb30     43 8E 43 8E 
2cb34     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2cb38     56 8E 56 8E 
2cb3c     55 8E 56 8E 
2cb40     68 8E 69 8E 
2cb44     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2cb48     69 8E 7B 8E 
2cb4c     7C 8E 7B 8E 
2cb50     7B 8E 8D 8E 
2cb54     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2cb58     8D 8E A1 8E 
2cb5c     A0 8E A1 8E 
2cb60     A1 8E A0 8E 
2cb64     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2cb68     B3 8E B3 8E 
2cb6c     C6 8E C5 8E 
2cb70     C6 8E C6 8E 
2cb74     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2cb78     D8 8E D9 8E 
2cb7c     D8 8E EC 8E 
2cb80     EB 8E EC 8E 
2cb84     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2cb88     FE 8E FE 8E 
2cb8c     FE 8E FE 8E 
2cb90     10 8F 10 8F 
2cb94     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2cb98     11 8F 23 8F 
2cb9c     24 8F 23 8F 
2cba0     24 8F 37 8F 
2cba4     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2cba8     36 8F 36 8F 
2cbac     48 8F 49 8F 
2cbb0     49 8F 49 8F 
2cbb4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2cbb8     5B 8F 5C 8F 
2cbbc     5B 8F 6E 8F 
2cbc0     6E 8F 6E 8F 
2cbc4     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2cbc8     81 8F 81 8F 
2cbcc     81 8F 81 8F 
2cbd0     93 8F 93 8F 
2cbd4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2cbd8     93 8F A6 8F 
2cbdc     A6 8F A6 8F 
2cbe0     A6 8F B9 8F 
2cbe4     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2cbe8     B9 8F B9 8F 
2cbec     CC 8F CB 8F 
2cbf0     CB 8F CC 8F 
2cbf4     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2cbf8     DF 8F DE 8F 
2cbfc     DE 8F F1 8F 
2cc00     F1 8F F1 8F 
2cc04     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2cc08     03 90 04 90 
2cc0c     04 90 04 90 
2cc10     16 90 17 90 
2cc14     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2cc18     29 90 28 90 
2cc1c     29 90 28 90 
2cc20     29 90 3C 90 
2cc24     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2cc28     3C 90 4F 90 
2cc2c     4E 90 4E 90 
2cc30     4E 90 4E 90 
2cc34     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2cc38     61 90 61 90 
2cc3c     73 90 74 90 
2cc40     74 90 74 90 
2cc44     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2cc48     87 90 86 90 
2cc4c     87 90 86 90 
2cc50     99 90 99 90 
2cc54     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2cc58     AB 90 AB 90 
2cc5c     AC 90 AB 90 
2cc60     AB 90 BF 90 
2cc64     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2cc68     BE 90 D1 90 
2cc6c     D0 90 D1 90 
2cc70     D1 90 D1 90 
2cc74     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2cc78     E3 90 E4 90 
2cc7c     F6 90 F6 90 
2cc80     F6 90 F6 90 
2cc84     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2cc88     09 91 0A 91 
2cc8c     0A 91 1C 91 
2cc90     1C 91 1C 91 
2cc94     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2cc98     2F 91 2E 91 
2cc9c     2F 91 2F 91 
2cca0     2E 91 41 91 
2cca4     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2cca8     41 91 53 91 
2ccac     54 91 54 91 
2ccb0     53 91 54 91 
2ccb4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2ccb8     67 91 67 91 
2ccbc     79 91 7A 91 
2ccc0     79 91 78 91 
2ccc4     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2ccc8     8C 91 8B 91 
2cccc     8C 91 8C 91 
2ccd0     9E 91 9E 91 
2ccd4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2ccd8     B1 91 B1 91 
2ccdc     B2 91 B1 91 
2cce0     B1 91 C4 91 
2cce4     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2cce8     C4 91 D6 91 
2ccec     D7 91 D7 91 
2ccf0     D7 91 D6 91 
2ccf4     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2ccf8     EA 91 EA 91 
2ccfc     EA 91 FC 91 
2cd00     FC 91 FB 91 
2cd04     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2cd08     0E 92 0F 92 
2cd0c     0F 92 0E 92 
2cd10     21 92 21 92 
2cd14     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2cd18     21 92 34 92 
2cd1c     33 92 34 92 
2cd20     34 92 47 92 
2cd24     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2cd28     46 92 47 92 
2cd2c     59 92 59 92 
2cd30     59 92 59 92 
2cd34     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2cd38     6C 92 6C 92 
2cd3c     6B 92 7E 92 
2cd40     7E 92 7E 92 
2cd44     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2cd48     92 92 91 92 
2cd4c     91 92 90 92 
2cd50     91 92 A4 92 
2cd54     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2cd58     A3 92 B6 92 
2cd5c     B6 92 B7 92 
2cd60     B7 92 B6 92 
2cd64     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2cd68     CA 92 C9 92 
2cd6c     CA 92 DC 92 
2cd70     DC 92 DC 92 
2cd74     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2cd78     EF 92 EF 92 
2cd7c     EF 92 EF 92 
2cd80     01 93 01 93 
2cd84     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2cd88     15 93 14 93 
2cd8c     14 93 14 93 
2cd90     14 93 27 93 
2cd94     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2cd98     27 93 39 93 
2cd9c     3A 93 39 93 
2cda0     39 93 39 93 
2cda4     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2cda8     4B 93 4C 93 
2cdac     5F 93 5F 93 
2cdb0     5F 93 5E 93 
2cdb4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2cdb8     5F 93 84 93 
2cdbc     4C 93 96 93 
2cdc0     5F 93 AE 94 
2cdc4     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2cdc8     7B C1 00 00 
2cdcc     00 00 00 00 
2cdd0     00 00 00 00 
2cdd4     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cdd8     00 00 00 00 | 	byte	$00, $00, $00, $00
2cddc     00 00 00 00 | zero long 0
2cde0     7A D7 00 80 
2cde4     87 8A 48 8F 
2cde8     EC 8C 76 8D 
2cdec     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2cdf0     3C 8D 82 8D 
2cdf4     42 8D 88 8D 
2cdf8     8C 8D 8E 8D 
2cdfc     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2ce00     97 8D DE 8D 
2ce04     E1 8D F1 8E 
2ce08     D8 8C A3 83 
2ce0c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2ce10     65 71 C9 65 
2ce14     FC 64 C4 65 
2ce18     C1 65 BF 65 
2ce1c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2ce20     B6 65 B4 65 
2ce24     B2 65 AE 65 
2ce28     AC 65 ED 65 
2ce2c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2ce30     5E 65 25 66 
2ce34     FA 62 23 6B 
2ce38     B5 6C 61 0A 
2ce3c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2ce40     5D 90 BE 8D 
2ce44     47 8E C3 8D 
2ce48     09 8E C9 8D 
2ce4c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2ce50     15 8E 19 8E 
2ce54     1B 8E 62 8E 
2ce58     64 8E 68 8E 
2ce5c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2ce60     B5 8E 4C 90 
2ce64     FA 84 3C 9D 
2ce68     98 13 79 6D 
2ce6c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2ce70     D9 66 50 66 
2ce74     D4 66 4B 66 
2ce78     8C 66 46 66 
2ce7c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2ce80     81 66 3A 66 
2ce84     7C 66 36 66 
2ce88     76 66 30 66 
2ce8c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2ce90     6B 66 88 72 
2ce94     BF 37 E7 B7 
2ce98     75 83 8B 8E 
2ce9c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2cea0     94 8E 96 8E 
2cea4     DD 8E 9C 8E 
2cea8     E2 8E A2 8E 
2ceac     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2ceb0     EE 8E AE 8E 
2ceb4     38 8F B5 8E 
2ceb8     3F 8F FD 8E 
2cebc     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2cec0     A5 87 1E E3 
2cec4     6D 5D FA 71 
2cec8     41 64 25 67 
2cecc     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2ced0     D9 66 1A 67 
2ced4     18 67 15 67 
2ced8     12 67 0F 67 
2cedc     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2cee0     07 67 C0 66 
2cee4     01 67 BC 66 
2cee8     B8 66 DE 64 
2ceec     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2cef0     43 E5 1F 8B 
2cef4     14 8A F1 90 
2cef8     1C 8F 63 8F 
2cefc     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2cf00     29 8F 6E 8F 
2cf04     72 8F 75 8F 
2cf08     34 8F BE 8F 
2cf0c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2cf10     84 8F 87 8F 
2cf14     CC 8F 56 90 
2cf18     67 91 49 80 
2cf1c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2cf20     46 77 A6 66 
2cf24     E8 66 B0 67 
2cf28     AD 67 ED 67 
2cf2c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2cf30     A2 67 E3 67 
2cf34     9D 67 9A 67 
2cf38     98 67 94 67 
2cf3c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2cf40     49 67 CD 67 
2cf44     28 65 5F 6E 
2cf48     82 67 3A 01 
2cf4c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2cf50     C2 91 A9 8F 
2cf54     EF 8F AE 8F 
2cf58     F4 8F B5 8F 
2cf5c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2cf60     01 90 03 90 
2cf64     07 90 09 90 
2cf68     0C 90 53 90 
2cf6c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2cf70     18 90 44 93 
2cf74     85 84 D6 9D 
2cf78     87 1F 2F 75 
2cf7c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2cf80     C4 68 F6 67 
2cf84     BE 68 F1 67 
2cf88     76 68 2E 68 
2cf8c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2cf90     27 68 24 68 
2cf94     64 68 1E 68 
2cf98     5F 68 19 68 
2cf9c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2cfa0     DC 68 56 72 
2cfa4     7E 36 C2 B8 
2cfa8     D7 84 73 90 
2cfac     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2cfb0     7B 90 7F 90 
2cfb4     82 90 84 90 
2cfb8     CB 90 8B 90 
2cfbc     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2cfc0     D7 90 96 90 
2cfc4     20 91 59 90 
2cfc8     25 91 A2 90 
2cfcc     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2cfd0     D0 89 40 EE 
2cfd4     12 64 C4 71 
2cfd8     29 66 0C 69 
2cfdc     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2cfe0     C0 68 02 69 
2cfe4     FE 68 FB 68 
2cfe8     F9 68 F6 68 
2cfec     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2cff0     EE 68 A8 68 
2cff4     2C 69 5F 68 
2cff8     E2 68 81 66 
2cffc     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2d000     1E EB A6 8A 
2d004     73 8B 5E 93 
2d008     7B 90 48 91 
2d00c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2d010     0D 91 11 91 
2d014     14 91 16 91 
2d018     5C 91 1C 91 
2d01c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2d020     68 91 AF 91 
2d024     2A 91 B5 91 
2d028     75 91 1A 94 
2d02c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2d030     70 0E CB 6C 
2d034     5D 6E C4 67 
2d038     99 69 54 69 
2d03c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2d040     D2 69 49 69 
2d044     89 69 86 69 
2d048     40 69 C4 69 
2d04c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2d050     35 69 76 69 
2d054     58 67 EB 6D 
2d058     E9 6D 89 0F 
2d05c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2d060     33 94 94 91 
2d064     D9 91 56 91 
2d068     E0 91 9F 91 
2d06c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2d070     EC 91 EE 91 
2d074     F1 91 F4 91 
2d078     F7 91 3D 92 
2d07c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2d080     46 92 21 94 
2d084     11 89 A4 9D 
2d088     FD 0E 8F 6C 
2d08c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2d090     28 6A E1 69 
2d094     65 6A 1F 6A 
2d098     5F 6A 1A 6A 
2d09c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2d0a0     54 6A 0F 6A 
2d0a4     4F 6A 09 6A 
2d0a8     06 6A 03 6A 
2d0ac     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2d0b0     23 68 69 77 
2d0b4     3A 4D 38 CA 
2d0b8     38 86 4E 91 
2d0bc     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2d0c0     64 92 24 92 
2d0c4     6A 92 2A 92 
2d0c8     70 92 30 92 
2d0cc     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2d0d0     7B 92 7E 92 
2d0d4     C5 92 84 92 
2d0d8     CB 92 8A 92 
2d0dc     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2d0e0     4D 8D F9 E2 
2d0e4     97 59 FE 74 
2d0e8     DB 68 6D 6A 
2d0ec     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2d0f0     A8 6A A5 6A 
2d0f4     A3 6A 9F 6A 
2d0f8     9D 6A 9B 6A 
2d0fc     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2d100     D6 6A 8F 6A 
2d104     CF 6A 46 6A 
2d108     CA 6A E1 67 
2d10c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2d110     D3 F7 15 92 
2d114     90 8C BF 94 
2d118     A6 92 EB 92 
2d11c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2d120     B1 92 F7 92 
2d124     FA 92 FD 92 
2d128     00 93 02 93 
2d12c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2d130     4F 93 52 93 
2d134     54 93 22 94 
2d138     5A 93 8F 88 
2d13c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2d140     1C 77 07 6C 
2d144     E8 69 7A 6B 
2d148     34 6B 75 6B 
2d14c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2d150     29 6B 26 6B 
2d154     24 6B 21 6B 
2d158     1D 6B 5E 6B 
2d15c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2d160     12 6B 52 6B 
2d164     34 69 34 6E 
2d168     BA 73 A4 24 
2d16c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2d170     7A 94 B3 93 
2d174     72 93 31 93 
2d178     78 93 7A 93 
2d17c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2d180     83 93 86 93 
2d184     89 93 D0 93 
2d188     D2 93 D5 93 
2d18c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2d190     DD 93 40 96 
2d194     30 8B 99 9C 
2d198     52 10 94 71 
2d19c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2d1a0     46 6C 79 6B 
2d1a4     40 6C B7 6B 
2d1a8     F7 6B B1 6B 
2d1ac     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2d1b0     EC 6B A5 6B 
2d1b4     A2 6B 9F 6B 
2d1b8     9D 6B 9A 6B 
2d1bc     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2d1c0     C8 6A E4 76 
2d1c4     20 4B F9 CE 
2d1c8     2E 8A 1A 92 
2d1cc     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2d1d0     FB 93 BA 93 
2d1d4     01 94 03 94 
2d1d8     4A 94 09 94 
2d1dc     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2d1e0     55 94 14 94 
2d1e4     9E 94 1A 94 
2d1e8     61 94 20 94 
2d1ec     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2d1f0     3E 87 E5 CD 
2d1f4     5F 50 6C 78 
2d1f8     B5 6A 04 6C 
2d1fc     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2d200     83 6C 7F 6C 
2d204     7C 6C 36 6C 
2d208     76 6C 74 6C 
2d20c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2d210     6B 6C 25 6C 
2d214     66 6C 1F 6C 
2d218     1D 6C 41 6A 
2d21c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2d220     BA FA FC 94 
2d224     5B 8D 97 96 
2d228     3B 94 C5 94 
2d22c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2d230     89 94 8C 94 
2d234     8F 94 92 94 
2d238     94 94 DB 94 
2d23c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2d240     E4 94 E7 94 
2d244     2D 95 74 95 
2d248     C8 96 15 89 
2d24c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2d250     CB 75 31 6F 
2d254     7E 6B 10 6D 
2d258     C9 6C 0A 6D 
2d25c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2d260     BD 6C FF 6C 
2d264     FB 6C F9 6C 
2d268     B2 6C F3 6C 
2d26c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2d270     A7 6C E8 6C 
2d274     0D 6B 85 6F 
2d278     C7 74 10 28 
2d27c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2d280     96 96 47 95 
2d284     06 95 0A 95 
2d288     0C 95 0F 95 
2d28c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2d290     17 95 5E 95 
2d294     61 95 63 95 
2d298     22 95 AC 95 
2d29c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2d2a0     72 95 17 98 
2d2a4     59 8E 01 96 
2d2a8     CF FC 5A 68 
2d2ac     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2d2b0     96 6D 50 6D 
2d2b4     D5 6D 4A 6D 
2d2b8     8C 6D 89 6D 
2d2bc     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2d2c0     80 6D 3A 6D 
2d2c4     7A 6D 77 6D 
2d2c8     75 6D 71 6D 
2d2cc     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2d2d0     18 6C BC 78 
2d2d4     9A 4F 7E CF 
2d2d8     1F 89 F1 93 
2d2dc     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2d2e0     D2 95 4E 95 
2d2e4     D7 95 53 95 
2d2e8     DD 95 E0 95 
2d2ec     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2d2f0     A5 95 EB 95 
2d2f4     EE 95 F0 95 
2d2f8     37 96 B3 95 
2d2fc     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2d300     1A 98 D5 8D 
2d304     C5 9F CD 0F 
2d308     0F 71 F3 73 
2d30c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2d310     D9 6D 5E 6E 
2d314     D3 6D 58 6E 
2d318     12 6E 0F 6E 
2d31c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2d320     49 6E BF 6D 
2d324     87 6E 76 6D 
2d328     81 6E 11 6B 
2d32c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2d330     3F 09 44 95 
2d334     E5 8D 3F 99 
2d338     D4 95 A2 96 
2d33c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2d340     23 96 69 96 
2d344     6B 96 6E 96 
2d348     71 96 74 96 
2d34c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2d350     BF 96 3C 96 
2d354     C6 96 C8 96 
2d358     A3 98 51 8D 
2d35c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2d360     CF 75 29 73 
2d364     90 6C EC 6E 
2d368     62 6E E7 6E 
2d36c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2d370     9A 6E 98 6E 
2d374     95 6E 91 6E 
2d378     8E 6E CF 6E 
2d37c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2d380     40 6E C3 6E 
2d384     E8 6C 45 6F 
2d388     A5 7B C9 35 
2d38c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2d390     2D 98 23 97 
2d394     E1 96 A0 96 
2d398     A4 96 EA 96 
2d39c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2d3a0     AF 96 F4 96 
2d3a4     F8 96 3E 97 
2d3a8     FD 96 43 97 
2d3ac     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2d3b0     08 97 6B 99 
2d3b4     D6 92 88 91 
2d3b8     D8 EE 84 66 
2d3bc     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2d3c0     2E 6F E7 6E 
2d3c4     6C 6F 24 6F 
2d3c8     21 6F 1F 6F 
2d3cc     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2d3d0     17 6F 13 6F 
2d3d4     54 6F 0E 6F 
2d3d8     0B 6F 4B 6F 
2d3dc     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2d3e0     27 6D 1C 7B 
2d3e4     19 59 9F DB 
2d3e8     66 8E BC 94 
2d3ec     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2d3f0     67 97 26 97 
2d3f4     6D 97 2B 97 
2d3f8     72 97 32 97 
2d3fc     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2d400     C1 97 7F 97 
2d404     C6 97 85 97 
2d408     CB 97 CE 97 
2d40c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2d410     EC 8A C4 C6 
2d414     68 4C F4 7D 
2d418     63 6E E8 6E 
2d41c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2d420     ED 6F A7 6F 
2d424     E7 6F A0 6F 
2d428     E1 6F 9B 6F 
2d42c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2d430     D5 6F 8F 6F 
2d434     CE 6F 45 6F 
2d438     86 6F 68 6D 
2d43c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2d440     C0 13 AD A2 
2d444     A7 8E 79 99 
2d448     E6 97 E8 97 
2d44c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2d450     F1 97 F3 97 
2d454     F6 97 F9 97 
2d458     FB 97 FE 97 
2d45c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2d460     4A 98 0A 98 
2d464     93 98 0F 98 
2d468     7F 9B BF 8C 
2d46c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2d470     91 7B 62 73 
2d474     1A 6E B9 70 
2d478     EB 6F B3 70 
2d47c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2d480     25 70 20 70 
2d484     1E 70 1B 70 
2d488     18 70 15 70 
2d48c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2d490     0D 70 09 70 
2d494     07 70 03 70 
2d498     01 70 FD 6F 
2d49c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2d4a0     F6 6F F2 6F 
2d4a4     EF 6F EC 6F 
2d4a8     2C 70 E6 6F 
2d4ac     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2d4b0     DD 6F 97 6F 
2d4b4     D7 6F 84 6E 
2d4b8     8F 6F 3F 7D 
2d4bc     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2d4be     00 00 00 00 | zero1 long 0
2d4c2     FF FF FF FF 
2d4c6     FF FF       | atarist_spl file "atarist.spl" '512
2d4c8     00 00 00 00 
2d4cc     00 00 00 00 
2d4d0     00 00       | 	byte	$00[10]
2d4d2     17 7F F2 7F 
2d4d6     B2 7F 72 7F 
2d4da     33 7F F4 7E 
2d4de     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2d4e2     36 7E F5 7D 
2d4e6     E9 51 F2 0D 
2d4ea     8E 00 F3 FD 
2d4ee     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2d4f2     57 FD 58 FD 
2d4f6     5B FD 5C FD 
2d4fa     5C FD 60 7D 
2d4fe     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2d502     D6 7C 98 7C 
2d506     59 7C 1A 7C 
2d50a     DC 7B 9E 7B 
2d50e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2d512     F3 05 00 FD 
2d516     41 FB EA FA 
2d51a     D9 FA DB FA 
2d51e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2d522     E4 FA 9B 36 
2d526     F8 7A C0 7A 
2d52a     84 7A 45 7A 
2d52e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2d532     8E 79 51 79 
2d536     15 79 D7 78 
2d53a     3C 1F EB FF 
2d53e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2d542     6D F8 65 F8 
2d546     68 F8 6D F8 
2d54a     70 F8 74 F8 
2d54e     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2d552     AB 60 79 60 
2d556     4B 60 1A 60 
2d55a     E9 5F B9 5F 
2d55e     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2d562     FB 59 B2 0B 
2d566     92 FA 3A F7 
2d56a     96 F6 79 F6 
2d56e     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2d572     82 F6 86 F6 
2d576     8C F6 DB 5D 
2d57a     F1 5E C1 5E 
2d57e     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2d582     34 5E 04 5E 
2d586     D6 5D A6 5D 
2d58a     78 5D D4 3E 
2d58e     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2d592     27 F5 BA F4 
2d596     AB F4 AD F4 
2d59a     B2 F4 B8 F4 
2d59e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2d5a2     26 5D 2B 5D 
2d5a6     FC 5C CD 5C 
2d5aa     9F 5C 70 5C 
2d5ae     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2d5b2     E5 5B B8 5B 
2d5b6     DB 24 A7 FC 
2d5ba     D1 F4 4D F3 
2d5be     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2d5c2     04 F3 0B F3 
2d5c6     11 F3 16 F3 
2d5ca     DE 18 98 5B 
2d5ce     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2d5d2     4E 4A 29 48 
2d5d6     A0 47 6A 47 
2d5da     43 47 20 47 
2d5de     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2d5e2     E2 F6 98 F2 
2d5e6     C5 F1 A3 F1 
2d5ea     A3 F1 A8 F1 
2d5ee     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2d5f2     BF F1 00 3D 
2d5f6     EF 46 CD 46 
2d5fa     AA 46 86 46 
2d5fe     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2d602     1C 46 F9 45 
2d606     D7 45 EE 43 
2d60a     DE 02 E8 F3 
2d60e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2d612     61 F0 65 F0 
2d616     6D F0 74 F0 
2d61a     7C F0 84 F0 
2d61e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2d622     8E 45 6D 45 
2d626     49 45 27 45 
2d62a     05 45 E1 44 
2d62e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2d632     F1 2F A9 FB 
2d636     8B F1 9B EF 
2d63a     40 EF 36 EF 
2d63e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2d642     4D EF 56 EF 
2d646     5E EF 7B 44 
2d64a     8C 44 69 44 
2d64e     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2d652     03 44 E1 43 
2d656     C0 43 F5 37 
2d65a     69 33 0F 11 
2d65e     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2d662     66 EE 37 EE 
2d666     38 EE 40 EE 
2d66a     48 EE 51 EE 
2d66e     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2d672     7D 32 6A 32 
2d676     51 32 37 32 
2d67a     1F 32 05 32 
2d67e     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2d682     B9 31 A1 31 
2d686     F1 04 F4 F1 
2d68a     50 EE A0 ED 
2d68e     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2d692     93 ED 9A ED 
2d696     A4 ED AD ED 
2d69a     F4 27 C1 31 
2d69e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2d6a2     78 31 5F 31 
2d6a6     46 31 2E 31 
2d6aa     15 31 FC 30 
2d6ae     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2d6b2     C4 EF 4A ED 
2d6b6     DC EC CB EC 
2d6ba     D2 EC DA EC 
2d6be     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2d6c2     F9 EC 64 2F 
2d6c6     0A 31 F1 30 
2d6ca     D9 30 C0 30 
2d6ce     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2d6d2     78 30 5F 30 
2d6d6     46 30 38 23 
2d6da     A6 F6 19 EE 
2d6de     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2d6e2     20 EC 28 EC 
2d6e6     32 EC 3C EC 
2d6ea     47 EC 51 EC 
2d6ee     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2d6f2     A3 22 93 22 
2d6f6     7F 22 6E 22 
2d6fa     5D 22 4C 22 
2d6fe     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2d702     77 09 76 F1 
2d706     CC EC F0 EB 
2d70a     CD EB CE EB 
2d70e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2d712     ED EB F5 EB 
2d716     3E F6 6B 22 
2d71a     5F 22 4E 22 
2d71e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2d722     1B 22 0B 22 
2d726     FA 21 E9 21 
2d72a     D8 21 4D FF 
2d72e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2d732     92 EB 7B EB 
2d736     82 EB 8C EB 
2d73a     97 EB A1 EB 
2d73e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2d742     15 22 04 22 
2d746     F3 21 E3 21 
2d74a     D2 21 C0 21 
2d74e     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2d752     8E 21 7D 21 
2d756     9A F8 A4 ED 
2d75a     8E EB 2F EB 
2d75e     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2d762     37 EB 42 EB 
2d766     4C EB 57 EB 
2d76a     B2 17 22 19 
2d76e     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2d772     FD 18 EF 18 
2d776     E3 18 D6 18 
2d77a     CA 18 BD 18 
2d77e     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2d782     60 EC 35 EB 
2d786     01 EB 01 EB 
2d78a     0C EB 16 EB 
2d78e     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2d792     34 EB D0 18 
2d796     00 19 F4 18 
2d79a     E8 18 DA 18 
2d79e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2d7a2     B6 18 A9 18 
2d7a6     9D 18 91 05 
2d7aa     F0 EF CA EB 
2d7ae     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2d7b2     E8 EA F2 EA 
2d7b6     FE EA 07 EB 
2d7ba     12 EB C2 EF 
2d7be     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2d7c2     D9 18 CD 18 
2d7c6     C0 18 B3 18 
2d7ca     A7 18 9B 18 
2d7ce     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2d7d2     B8 FC 30 EE 
2d7d6     61 EB DC EA 
2d7da     CD EA D2 EA 
2d7de     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2d7e2     F3 EA FE EA 
2d7e6     D2 09 D1 18 
2d7ea     C3 18 17 18 
2d7ee     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2d7f2     66 11 52 11 
2d7f6     49 11 41 11 
2d7fa     38 11 E0 F4 
2d7fe     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2d802     C9 EA C5 EA 
2d806     CF EA DB EA 
2d80a     E6 EA EF EA 
2d80e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2d812     89 11 80 11 
2d816     78 11 6E 11 
2d81a     67 11 5D 11 
2d81e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2d822     43 11 32 0D 
2d826     9C F1 07 EC 
2d82a     F8 EA CD EA 
2d82e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2d832     E4 EA ED EA 
2d836     F8 EA 02 EB 
2d83a     55 11 91 11 
2d83e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2d842     75 11 6E 11 
2d846     64 11 5E 11 
2d84a     54 11 4A 11 
2d84e     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2d852     A8 EB F1 EA 
2d856     D9 EA DC EA 
2d85a     E8 EA F1 EA 
2d85e     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2d862     A6 EB 9E 11 
2d866     A0 11 96 11 
2d86a     8D 11 85 11 
2d86e     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2d872     6A 11 CA 0D 
2d876     36 0B 57 F8 
2d87a     6C ED 57 EB 
2d87e     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2d882     F4 EA FF EA 
2d886     09 EB 15 EB 
2d88a     1E EB 1A FD 
2d88e     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2d892     ED 0A E8 0A 
2d896     E2 0A DC 0A 
2d89a     D6 0A D1 0A 
2d89e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2d8a2     F8 F3 BC EC 
2d8a6     57 EB 1E EB 
2d8aa     18 EB 24 EB 
2d8ae     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2d8b2     42 EB 4D EB 
2d8b6     08 09 20 0B 
2d8ba     1A 0B 14 0B 
2d8be     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2d8c2     04 0B FE 0A 
2d8c6     F9 0A F2 0A 
2d8ca     84 08 3A F1 
2d8ce     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2d8d2     42 EB 42 EB 
2d8d6     4E EB 57 EB 
2d8da     62 EB 6B EB 
2d8de     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2d8e2     48 0B 43 0B 
2d8e6     3C 0B 36 0B 
2d8ea     31 0B 2C 0B 
2d8ee     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2d8f2     1B 0B 5C 00 
2d8f6     6A EF 1B EC 
2d8fa     81 EB 6A EB 
2d8fe     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2d902     85 EB 8E EB 
2d906     99 EB A3 EB 
2d90a     DD 05 E5 05 
2d90e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2d912     DB 05 D8 05 
2d916     D5 05 D1 05 
2d91a     D0 05 CB 05 
2d91e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2d922     0C EC BB EB 
2d926     B3 EB BB EB 
2d92a     C5 EB D0 EB 
2d92e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2d932     E4 F7 2C 06 
2d936     28 06 24 06 
2d93a     22 06 1F 06 
2d93e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2d942     16 06 14 06 
2d946     0F 06 D0 F3 
2d94a     65 ED 2D EC 
2d94e     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2d952     01 EC 0A EC 
2d956     14 EC 1E EC 
2d95a     29 EC FB 03 
2d95e     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2d962     63 06 60 06 
2d966     5E 06 59 06 
2d96a     58 06 54 06 
2d96e     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2d972     69 F1 21 ED 
2d976     55 EC 33 EC 
2d97a     36 EC 40 EC 
2d97e     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2d982     5C EC 68 EC 
2d986     92 02 D9 02 
2d98a     D7 02 D7 02 
2d98e     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2d992     D1 02 D1 02 
2d996     CE 02 CD 02 
2d99a     5D FC 80 EF 
2d99e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2d9a2     83 EC 8A EC 
2d9a6     93 EC 9C EC 
2d9aa     A5 EC B1 EC 
2d9ae     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2d9b2     2B 03 2A 03 
2d9b6     29 03 26 03 
2d9ba     25 03 24 03 
2d9be     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2d9c2     1F 03 70 F7 
2d9c6     D0 EE 27 ED 
2d9ca     DB EC D4 EC 
2d9ce     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2d9d2     F0 EC FA EC 
2d9d6     02 ED F9 F4 
2d9da     7B 03 7C 03 
2d9de     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2d9e2     75 03 73 03 
2d9e6     72 03 70 03 
2d9ea     6D 03 6C 03 
2d9ee     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2d9f2     54 ED 22 ED 
2d9f6     22 ED 2C ED 
2d9fa     35 ED 3F ED 
2d9fe     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2da02     14 01 C3 03 
2da06     C1 03 C0 03 
2da0a     5F 01 A5 00 
2da0e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2da12     7B 00 7C 00 
2da16     20 00 85 F1 
2da1a     2A EE 89 ED 
2da1e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2da22     80 ED 87 ED 
2da26     90 ED 9A ED 
2da2a     A3 ED 73 00 
2da2e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2da32     D0 00 D0 00 
2da36     D0 00 D0 00 
2da3a     D0 00 CF 00 
2da3e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2da42     80 F0 3D EE 
2da46     D5 ED C7 ED 
2da4a     CD ED D6 ED 
2da4e     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2da52     F2 ED FA ED 
2da56     1D 01 29 01 
2da5a     27 01 27 01 
2da5e     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2da62     25 01 26 01 
2da66     26 01 23 01 
2da6a     D0 F7 EC EF 
2da6e     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2da72     1C EE 24 EE 
2da76     2D EE 37 EE 
2da7a     40 EE 47 EE 
2da7e     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2da82     7D 01 7B 01 
2da86     7A 01 7A 01 
2da8a     79 01 78 01 
2da8e     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2da92     84 FE DE F3 
2da96     6C EF 93 EE 
2da9a     72 EE 72 EE 
2da9e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2daa2     8B EE 95 EE 
2daa6     9E EE 15 FC 
2daaa     67 FE 67 FE 
2daae     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2dab2     6B FE 6B FE 
2dab6     6D FE 6D FE 
2daba     6D FE 6F FE 
2dabe     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2dac2     DF EE CC EE 
2dac6     CF EE D9 EE 
2daca     E1 EE EA EE 
2dace     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2dad2     5A FE C4 FE 
2dad6     C3 FE C5 FE 
2dada     C6 FE C6 FE 
2dade     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2dae2     C8 FE C7 FE 
2dae6     DA FB 85 F1 
2daea     8D EF 31 EF 
2daee     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2daf2     34 EF 3E EF 
2daf6     46 EF 4F EF 
2dafa     57 EF 0D FF 
2dafe     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2db02     1F FF 1F FF 
2db06     21 FF 21 FF 
2db0a     21 FF 21 FF 
2db0e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2db12     15 F1 BE EF 
2db16     84 EF 7E EF 
2db1a     88 EF 8F EF 
2db1e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2db22     A9 EF 06 F2 
2db26     A6 FC AB FC 
2db2a     AD FC AE FC 
2db2e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2db32     B2 FC B4 FC 
2db36     B6 FC B7 FC 
2db3a     8B F4 BD F0 
2db3e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2db42     E4 EF EE EF 
2db46     F6 EF FD EF 
2db4a     04 F0 0E F0 
2db4e     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2db52     0B FD 0D FD 
2db56     0F FD 11 FD 
2db5a     11 FD 13 FD 
2db5e     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2db62     17 FD 64 F3 
2db66     CD F0 52 F0 
2db6a     41 F0 45 F0 
2db6e     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2db72     5B F0 64 F0 
2db76     6D F0 FB FC 
2db7a     65 FD 68 FD 
2db7e     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2db82     6C FD 6D FD 
2db86     6F FD 70 FD 
2db8a     72 FD B3 FB 
2db8e     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2db92     A4 F0 99 F0 
2db96     A0 F0 A8 F0 
2db9a     AE F0 B9 F0 
2db9e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2dba2     CB FB DD FB 
2dba6     DE FB E0 FB 
2dbaa     E3 FB E3 FB 
2dbae     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2dbb2     E9 FB EC FB 
2dbb6     62 F7 27 F2 
2dbba     2A F1 FF F0 
2dbbe     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2dbc2     0C F1 13 F1 
2dbc6     1B F1 23 F1 
2dbca     33 F2 3C FC 
2dbce     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2dbd2     42 FC 45 FC 
2dbd6     47 FC 48 FC 
2dbda     4A FC 4C FC 
2dbde     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2dbe2     20 F2 77 F1 
2dbe6     5C F1 5F F1 
2dbea     64 F1 6C F1 
2dbee     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2dbf2     83 F1 DC F8 
2dbf6     9A FC 9A FC 
2dbfa     9B FC 9E FC 
2dbfe     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2dc02     A3 FC A4 FC 
2dc06     A6 FC A9 FC 
2dc0a     90 F4 33 F2 
2dc0e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2dc12     BA F1 BF F1 
2dc16     C7 F1 CE F1 
2dc1a     D6 F1 DC F1 
2dc1e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2dc22     F3 FC F5 FC 
2dc26     FE FB 79 FB 
2dc2a     62 FB 5F FB 
2dc2e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2dc32     6F FA AF F3 
2dc36     53 F2 12 F2 
2dc3a     0F F2 15 F2 
2dc3e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2dc42     2A F2 32 F2 
2dc46     38 F2 9A FB 
2dc4a     AF FB B1 FB 
2dc4e     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2dc52     B7 FB B8 FB 
2dc56     BA FB BC FB 
2dc5a     C1 FB 3B F8 
2dc5e     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2dc62     6E F2 6C F2 
2dc66     74 F2 7A F2 
2dc6a     81 F2 87 F2 
2dc6e     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2dc72     06 FC 09 FC 
2dc76     0C FC 0E FC 
2dc7a     0F FC 12 FC 
2dc7e     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2dc82     17 FC 1A FC 
2dc86     B2 F6 7B F3 
2dc8a     DD F2 C5 F2 
2dc8e     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2dc92     D4 F2 DB F2 
2dc96     E0 F2 E8 F2 
2dc9a     28 F8 60 FC 
2dc9e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2dca2     64 FC 66 FC 
2dca6     68 FC 6A FC 
2dcaa     6D FC 52 FC 
2dcae     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2dcb2     78 F3 24 F3 
2dcb6     1A F3 1E F3 
2dcba     24 F3 2A F3 
2dcbe     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2dcc2     3D F3 80 FA 
2dcc6     0C FB 0F FB 
2dcca     10 FB 14 FB 
2dcce     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2dcd2     1B FB 1D FB 
2dcd6     1F FB 92 FA 
2dcda     DE F4 AE F3 
2dcde     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2dce2     79 F3 7E F3 
2dce6     84 F3 8C F3 
2dcea     92 F3 97 F3 
2dcee     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2dcf2     67 FB 69 FB 
2dcf6     6B FB 6F FB 
2dcfa     71 FB 72 FB 
2dcfe     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2dd02     E3 F8 BA F4 
2dd06     EE F3 CC F3 
2dd0a     CA F3 CF F3 
2dd0e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2dd12     E2 F3 E8 F3 
2dd16     ED F3 B7 FB 
2dd1a     BC FB BE FB 
2dd1e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2dd22     C4 FB C6 FB 
2dd26     C8 FB C9 FB 
2dd2a     CC FB 8F F7 
2dd2e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2dd32     1E F4 1E F4 
2dd36     24 F4 2A F4 
2dd3a     30 F4 38 F4 
2dd3e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2dd42     AD FA B1 FA 
2dd46     B4 FA B6 FA 
2dd4a     BA FA BB FA 
2dd4e     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2dd52     C2 FA C6 FA 
2dd56     55 F6 C6 F4 
2dd5a     7D F4 72 F4 
2dd5e     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2dd62     83 F4 89 F4 
2dd66     8F F4 94 F4 
2dd6a     66 FA 03 FB 
2dd6e     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2dd72     0A FB 0E FB 
2dd76     10 FB 11 FB 
2dd7a     16 FB 18 FB 
2dd7e     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2dd82     F9 F4 CA F4 
2dd86     C5 F4 CB F4 
2dd8a     D1 F4 D7 F4 
2dd8e     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2dd92     E8 F4 3F FB 
2dd96     56 FB 58 FB 
2dd9a     5A FB 5E FB 
2dd9e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2dda2     64 FB 64 FB 
2dda6     69 FB 99 F9 
2ddaa     E9 F5 33 F5 
2ddae     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2ddb2     1D F5 22 F5 
2ddb6     27 F5 2E F5 
2ddba     32 F5 37 F5 
2ddbe     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2ddc2     BC FA BC FA 
2ddc6     C1 FA C2 FA 
2ddca     C4 FA C8 FA 
2ddce     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2ddd2     F9 F7 DB F5 
2ddd6     78 F5 69 F5 
2ddda     6A F5 70 F5 
2ddde     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2dde2     7F F5 85 F5 
2dde6     6E F7 06 FB 
2ddea     0A FB 0B FB 
2ddee     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2ddf2     14 FB 15 FB 
2ddf6     18 FB 1B FB 
2ddfa     1D FB 70 F7 
2ddfe     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2de02     B6 F5 BB F5 
2de06     C0 F5 C6 F5 
2de0a     CA F5 CF F5 
2de0e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2de12     54 FB 56 FB 
2de16     5A FB 5B FB 
2de1a     5E FB 5F FB 
2de1e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2de22     67 FB 52 FB 
2de26     29 F7 33 F6 
2de2a     06 F6 02 F6 
2de2e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2de32     10 F6 16 F6 
2de36     1A F6 1F F6 
2de3a     81 FB 9F FB 
2de3e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2de42     51 FB F2 FA 
2de46     E3 FA E3 FA 
2de4a     E5 FA E9 FA 
2de4e     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2de52     64 F6 4D F6 
2de56     4D F6 53 F6 
2de5a     57 F6 5C F6 
2de5e     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2de62     6A F6 19 FB 
2de66     1E FB 22 FB 
2de6a     23 FB 24 FB 
2de6e     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2de72     2C FB 2E FB 
2de76     32 FB F0 F8 
2de7a     01 F7 A5 F6 
2de7e     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2de82     9F F6 A3 F6 
2de86     A6 F6 AC F6 
2de8a     B0 F6 EB F7 
2de8e     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2de92     68 FB 6C FB 
2de96     6E FB 71 FB 
2de9a     72 FB 74 FB 
2de9e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2dea2     71 F8 21 F7 
2dea6     E5 F6 DD F6 
2deaa     E1 F6 E6 F6 
2deae     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2deb2     F5 F6 F7 F6 
2deb6     F7 FA AB FB 
2deba     AD FB AF FB 
2debe     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2dec2     B6 FB B9 FB 
2dec6     BB FB BC FB 
2deca     21 FB 07 F8 
2dece     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2ded2     22 F7 26 F7 
2ded6     2B F7 2E F7 
2deda     34 F7 38 F7 
2dede     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2dee2     13 FB 16 FB 
2dee6     17 FB 1B FB 
2deea     1E FB 20 FB 
2deee     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2def2     26 FB 77 FA 
2def6     F3 F7 7C F7 
2defa     67 F7 6A F7 
2defe     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2df02     74 F7 7A F7 
2df06     7E F7 82 F7 
2df0a     53 FB 5A FB 
2df0e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2df12     5F FB 63 FB 
2df16     65 FB 67 FB 
2df1a     69 FB 6A FB 
2df1e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2df22     B5 F7 A9 F7 
2df26     AD F7 B0 F7 
2df2a     B5 F7 B8 F7 
2df2e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2df32     6E F8 99 FB 
2df36     9C FB 9D FB 
2df3a     9F FB A4 FB 
2df3e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2df42     A9 FB AB FB 
2df46     AD FB 46 F9 
2df4a     26 F8 F0 F7 
2df4e     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2df52     F4 F7 F8 F7 
2df56     FB F7 FF F7 
2df5a     03 F8 65 FA 
2df5e     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2df62     2B FB 2F FB 
2df66     30 FB 32 FB 
2df6a     34 FB 38 FB 
2df6e     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2df72     E9 F8 4A F8 
2df76     2E F8 2C F8 
2df7a     2F F8 36 F8 
2df7e     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2df82     41 F8 44 F8 
2df86     4A FB 67 FB 
2df8a     68 FB 6B FB 
2df8e     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2df92     73 FB 74 FB 
2df96     78 FB 7A FB 
2df9a     14 FB E7 F8 
2df9e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2dfa2     6D F8 70 F8 
2dfa6     73 F8 78 F8 
2dfaa     7C F8 80 F8 
2dfae     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2dfb2     A6 FB A7 FB 
2dfb6     A9 FB AC FB 
2dfba     AF FB B1 FB 
2dfbe     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2dfc2     B7 FB 73 FA 
2dfc6     F8 F8 B4 F8 
2dfca     A9 F8 AB F8 
2dfce     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2dfd2     B4 F8 B8 F8 
2dfd6     BB F8 FA F8 
2dfda     64 FB 65 FB 
2dfde     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2dfe2     6D FB 6F FB 
2dfe6     70 FB 74 FB 
2dfea     77 FB 77 FB 
2dfee     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2dff2     E9 F8 E4 F8 
2dff6     E8 F8 EB F8 
2dffa     EE F8 F2 F8 
2dffe     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2e002     B5 FA 9F FB 
2e006     A1 FB A4 FB 
2e00a     A5 FB A9 FB 
2e00e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2e012     AE FB B1 FB 
2e016     B2 FB C7 F9 
2e01a     39 F9 22 F9 
2e01e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2e022     26 F9 2A F9 
2e026     2E F9 32 F9 
2e02a     33 F9 BA FB 
2e02e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2e032     DE FB E1 FB 
2e036     E2 FB E4 FB 
2e03a     E5 FB E7 FB 
2e03e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2e042     C5 F9 67 F9 
2e046     57 F9 56 F9 
2e04a     5B F9 5F F9 
2e04e     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2e052     68 F9 6C F9 
2e056     0B FC 11 FC 
2e05a     14 FC 15 FC 
2e05e     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2e062     B5 FB B5 FB 
2e066     B6 FB B8 FB 
2e06a     E9 FA C8 F9 
2e06e     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2e072     90 F9 94 F9 
2e076     95 F9 99 F9 
2e07a     9D F9 9F F9 
2e07e     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2e082     DE FB DF FB 
2e086     E2 FB E4 FB 
2e08a     E6 FB E8 FB 
2e08e     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2e092     EF FB AC FA 
2e096     E9 F9 C7 F9 
2e09a     C3 F9 C8 F9 
2e09e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2e0a2     D0 F9 D4 F9 
2e0a6     D6 F9 0E FB 
2e0aa     11 FC 13 FC 
2e0ae     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2e0b2     19 FC 1B FC 
2e0b6     1D FC 1E FC 
2e0ba     21 FC 22 FC 
2e0be     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2e0c2     F7 F9 F7 F9 
2e0c6     FB F9 FE F9 
2e0ca     00 FA 03 FA 
2e0ce     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2e0d2     1B FC 45 FC 
2e0d6     46 FC 48 FC 
2e0da     4A FC 4B FC 
2e0de     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2e0e2     52 FC 54 FC 
2e0e6     F3 FB 82 FA 
2e0ea     35 FA 28 FA 
2e0ee     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2e0f2     31 FA 32 FA 
2e0f6     37 FA 37 FA 
2e0fa     3C FA 00 FC 
2e0fe     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2e102     09 FC 0B FC 
2e106     0F FC 12 FC 
2e10a     12 FC 15 FC 
2e10e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2e112     8D FA 60 FA 
2e116     5B FA 5C FA 
2e11a     60 FA 61 FA 
2e11e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2e122     6C FA 6D FA 
2e126     37 FC 3A FC 
2e12a     3B FC 3D FC 
2e12e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2e132     43 FC 44 FC 
2e136     45 FC 47 FC 
2e13a     51 FB AB FA 
2e13e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2e142     8E FA 91 FA 
2e146     93 FA 95 FA 
2e14a     98 FA 9B FA 
2e14e     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2e152     68 FC 6A FC 
2e156     6C FC 6E FC 
2e15a     70 FC 72 FC 
2e15e     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2e162     76 FC 3B FB 
2e166     D0 FA BB FA 
2e16a     B9 FA BD FA 
2e16e     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2e172     C4 FA C6 FA 
2e176     CA FA 13 FC 
2e17a     3A FC 3A FC 
2e17e     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2e182     41 FC 43 FC 
2e186     44 FC 47 FC 
2e18a     48 FC 3C FC 
2e18e     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2e192     E6 FA E8 FA 
2e196     EB FA EE FA 
2e19a     F0 FA F2 FA 
2e19e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2e1a2     61 FC 66 FC 
2e1a6     68 FC 6B FC 
2e1aa     6C FC 6E FC 
2e1ae     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2e1b2     73 FC 75 FC 
2e1b6     13 FC 3F FB 
2e1ba     17 FB 12 FB 
2e1be     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2e1c2     1A FB 1D FB 
2e1c6     1F FB 20 FB 
2e1ca     23 FB 92 FC 
2e1ce     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2e1d2     96 FC 97 FC 
2e1d6     9A FC 9C FC 
2e1da     9E FC 9F FC 
2e1de     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2e1e2     5A FB 41 FB 
2e1e6     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2e1ea     00 00 00 00 | zero2 long 0
2e1ee     01 00 00 00 
2e1f2     00 00 00 00 
2e1f6     00 00 00 00 
2e1fa     00 00 00 00 | mouse  file "mouse2.def"
2e1fe     00 00 00 00 
2e202     00 00 00 00 
2e206     00 00 00 00 
2e20a     00 00 00 00 | 	byte	$00[16]
2e20e     01 01 00 00 
2e212     00 00 00 00 
2e216     00 00 00 00 
2e21a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e21e     00 00 00 00 
2e222     00 00 00 00 
2e226     00 00 00 00 
2e22a     00 00 00 00 | 	byte	$00[16]
2e22e     01 0D 01 00 
2e232     00 00 00 00 
2e236     00 00 00 00 
2e23a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e23e     00 00 00 00 
2e242     00 00 00 00 
2e246     00 00 00 00 
2e24a     00 00 00 00 | 	byte	$00[16]
2e24e     01 0D 0D 01 
2e252     00 00 00 00 
2e256     00 00 00 00 
2e25a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e25e     00 00 00 00 
2e262     00 00 00 00 
2e266     00 00 00 00 
2e26a     00 00 00 00 | 	byte	$00[16]
2e26e     01 0D 0D 0D 
2e272     01 00 00 00 
2e276     00 00 00 00 
2e27a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e27e     00 00 00 00 
2e282     00 00 00 00 
2e286     00 00 00 00 
2e28a     00 00 00 00 | 	byte	$00[16]
2e28e     01 0D 0D 0D 
2e292     0D 01 00 00 
2e296     00 00 00 00 
2e29a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e29e     00 00 00 00 
2e2a2     00 00 00 00 
2e2a6     00 00 00 00 
2e2aa     00 00 00 00 | 	byte	$00[16]
2e2ae     01 0D 0D 0D 
2e2b2     0D 0D 01 00 
2e2b6     00 00 00 00 
2e2ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e2be     00 00 00 00 
2e2c2     00 00 00 00 
2e2c6     00 00 00 00 
2e2ca     00 00 00 00 | 	byte	$00[16]
2e2ce     01 0D 0D 0D 
2e2d2     0D 0D 0D 01 
2e2d6     00 00 00 00 
2e2da     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2e2de     00 00 00 00 
2e2e2     00 00 00 00 
2e2e6     00 00 00 00 
2e2ea     00 00 00 00 | 	byte	$00[16]
2e2ee     01 0D 0D 0D 
2e2f2     0D 0D 0D 0C 
2e2f6     01 00 00 00 
2e2fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2e2fe     00 00 00 00 
2e302     00 00 00 00 
2e306     00 00 00 00 
2e30a     00 00 00 00 | 	byte	$00[16]
2e30e     01 0D 0D 0D 
2e312     0D 0D 0D 0D 
2e316     0C 01 00 00 
2e31a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2e31e     00 00 00 00 
2e322     00 00 00 00 
2e326     00 00 00 00 
2e32a     00 00 00 00 | 	byte	$00[16]
2e32e     01 0D 0D 0D 
2e332     0D 0D 0D 0D 
2e336     0D 0C 01 00 
2e33a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2e33e     00 00 00 00 
2e342     00 00 00 00 
2e346     00 00 00 00 
2e34a     00 00 00 00 | 	byte	$00[16]
2e34e     01 0D 0D 0D 
2e352     0D 0D 0D 0D 
2e356     0D 0D 0B 01 
2e35a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2e35e     00 00 00 00 
2e362     00 00 00 00 
2e366     00 00 00 00 
2e36a     00 00 00 00 | 	byte	$00[16]
2e36e     01 0D 0D 0D 
2e372     0C 0D 0D 03 
2e376     01 01 01 01 
2e37a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2e37e     00 00 00 00 
2e382     00 00 00 00 
2e386     00 00 00 00 
2e38a     00 00 00 00 | 	byte	$00[16]
2e38e     01 0D 0D 0C 
2e392     01 09 0D 03 
2e396     00 00 00 00 
2e39a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2e39e     00 00 00 00 
2e3a2     00 00 00 00 
2e3a6     00 00 00 00 
2e3aa     00 00 00 00 | 	byte	$00[16]
2e3ae     01 0D 0C 01 
2e3b2     00 01 0D 0B 
2e3b6     01 00 00 00 
2e3ba     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2e3be     00 00 00 00 
2e3c2     00 00 00 00 
2e3c6     00 00 00 00 
2e3ca     00 00 00 00 | 	byte	$00[16]
2e3ce     01 0C 01 00 
2e3d2     00 01 0A 0D 
2e3d6     01 00 00 00 
2e3da     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2e3de     00 00 00 00 
2e3e2     00 00 00 00 
2e3e6     00 00 00 00 
2e3ea     00 00 00 00 | 	byte	$00[16]
2e3ee     01 01 00 00 
2e3f2     00 00 01 0D 
2e3f6     0B 01 00 00 
2e3fa     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2e3fe     00 00 00 00 
2e402     00 00 00 00 
2e406     00 00 00 00 
2e40a     00 00 00 00 
2e40e     00 00 00 00 
2e412     00 00       | 	byte	$00[22]
2e414     01 0B 0D 01 
2e418     00 00 00 00 
2e41c     00 00 00 00 
2e420     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e424     00 00 00 00 
2e428     00 00 00 00 
2e42c     00 00 00 00 
2e430     00 00 00 00 
2e434     00          | 	byte	$00[17]
2e435     01 01 00 00 
2e439     00 00 00 00 
2e43d     00 00 00 00 
2e441     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e445     00 00 00 00 
      ...             
2e5e9     00 00 00 00 
2e5ed     00          | 	byte	$00[425]
2e5ee     73 32 00 04 
2e5f2     00 00 10 00 
2e5f6     00 00 00 00 
2e5fa     00 00 00 00 | atari2 file "atari2.s2"
2e5fe     43 87 43 87 
2e602     43 87 44 87 
2e606     43 87 44 87 
2e60a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e60e     43 87 43 87 
2e612     43 87 44 87 
2e616     43 87 43 87 
2e61a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e61e     44 87 43 87 
2e622     44 87 43 87 
2e626     43 87 43 87 
2e62a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e62e     43 87 43 87 
2e632     44 87 43 87 
2e636     44 87 44 87 
2e63a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
2e63e     43 87 43 87 
2e642     44 87 43 87 
2e646     43 87 42 87 
2e64a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2e64e     43 87 43 87 
2e652     43 87 43 87 
2e656     44 87 43 87 
2e65a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2e65e     44 87 44 87 
2e662     43 87 44 87 
2e666     43 87 44 87 
2e66a     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e66e     44 87 43 87 
2e672     44 87 44 87 
2e676     43 87 43 87 
2e67a     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e67e     43 87 44 87 
2e682     44 87 43 87 
2e686     43 87 44 87 
2e68a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e68e     43 87 43 87 
2e692     43 87 43 87 
2e696     43 87 43 87 
2e69a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e69e     42 87 43 87 
2e6a2     44 87 42 87 
2e6a6     43 87 43 87 
2e6aa     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e6ae     43 87 44 87 
2e6b2     44 87 43 87 
2e6b6     43 87 43 87 
2e6ba     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e6be     43 87 5C 87 
2e6c2     EE 86 AC 87 
2e6c6     4C 7C A3 78 
2e6ca     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
2e6ce     BC 78 BB 78 
2e6d2     BD 78 BC 78 
2e6d6     BB 78 BD 78 
2e6da     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
2e6de     BB 78 BB 78 
2e6e2     BC 78 BC 78 
2e6e6     BC 78 BB 78 
2e6ea     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e6ee     BC 78 BC 78 
2e6f2     BC 78 BC 78 
2e6f6     BC 78 BC 78 
2e6fa     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e6fe     BB 78 BC 78 
2e702     A0 78 4C 7C 
2e706     11 7A 29 89 
2e70a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
2e70e     44 87 43 87 
2e712     44 87 43 87 
2e716     43 87 42 87 
2e71a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2e71e     43 87 43 87 
2e722     44 87 ED 85 
2e726     71 85 52 79 
2e72a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
2e72e     BC 78 BC 78 
2e732     BC 78 BC 78 
2e736     BC 78 BC 78 
2e73a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e73e     BC 78 BC 78 
2e742     BC 78 A0 78 
2e746     CF 7A B9 81 
2e74a     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
2e74e     44 87 43 87 
2e752     43 87 44 87 
2e756     43 87 44 87 
2e75a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e75e     43 87 43 87 
2e762     43 87 43 87 
2e766     44 87 43 87 
2e76a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2e76e     43 87 43 87 
2e772     44 87 43 87 
2e776     44 87 43 87 
2e77a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2e77e     44 87 43 87 
2e782     43 87 43 87 
2e786     5A 87 39 81 
2e78a     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
2e78e     A5 78 BC 78 
2e792     BB 78 BC 78 
2e796     BB 78 BC 78 
2e79a     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
2e79e     BC 78 BC 78 
2e7a2     BC 78 BC 78 
2e7a6     BC 78 8F 79 
2e7aa     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
2e7ae     09 85 47 87 
2e7b2     43 87 43 87 
2e7b6     42 87 42 87 
2e7ba     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
2e7be     43 87 43 87 
2e7c2     43 87 43 87 
2e7c6     43 87 44 87 
2e7ca     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e7ce     43 87 43 87 
2e7d2     44 87 43 87 
2e7d6     42 87 43 87 
2e7da     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
2e7de     44 87 43 87 
2e7e2     43 87 43 87 
2e7e6     44 87 44 87 
2e7ea     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
2e7ee     94 78 55 7A 
2e7f2     B9 78 BC 78 
2e7f6     BC 78 BC 78 
2e7fa     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e7fe     BC 78 BB 78 
2e802     BC 78 BC 78 
2e806     BC 78 BC 78 
2e80a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e80e     BB 78 BC 78 
2e812     BC 78 BC 78 
2e816     BB 78 BC 78 
2e81a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2e81e     BC 78 BC 78 
2e822     BD 78 BC 78 
2e826     BC 78 BB 78 
2e82a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
2e82e     94 78 B3 84 
2e832     36 84 4A 87 
2e836     43 87 43 87 
2e83a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e83e     43 87 44 87 
2e842     43 87 43 87 
2e846     43 87 43 87 
2e84a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e84e     43 87 44 87 
2e852     43 87 44 87 
2e856     43 87 43 87 
2e85a     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e85e     43 87 43 87 
2e862     43 87 45 87 
2e866     43 87 43 87 
2e86a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e86e     43 87 44 87 
2e872     44 87 44 87 
2e876     43 87 43 87 
2e87a     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e87e     43 87 42 87 
2e882     43 87 43 87 
2e886     44 87 43 87 
2e88a     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2e88e     54 87 3C 82 
2e892     36 83 52 79 
2e896     C6 78 BC 78 
2e89a     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
2e89e     BB 78 BB 78 
2e8a2     BC 78 BC 78 
2e8a6     BC 78 BC 78 
2e8aa     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2e8ae     BD 78 ED 78 
2e8b2     1B 79 F4 83 
2e8b6     4D 83 4E 87 
2e8ba     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
2e8be     44 87 43 87 
2e8c2     42 87 44 87 
2e8c6     43 87 42 87 
2e8ca     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
2e8ce     43 87 54 87 
2e8d2     26 82 B3 84 
2e8d6     D6 77 BB 78 
2e8da     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
2e8de     BC 78 BB 78 
2e8e2     BB 78 BB 78 
2e8e6     BB 78 BB 78 
2e8ea     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
2e8ee     BC 78 BC 78 
2e8f2     26 79 18 75 
2e8f6     36 83 1F 84 
2e8fa     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
2e8fe     43 87 43 87 
2e902     43 87 43 87 
2e906     43 87 44 87 
2e90a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e90e     43 87 44 87 
2e912     44 87 43 87 
2e916     43 87 43 87 
2e91a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
2e91e     43 87 43 87 
2e922     43 87 43 87 
2e926     44 87 44 87 
2e92a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
2e92e     44 87 43 87 
2e932     43 87 43 87 
2e936     43 87 44 87 
2e93a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e93e     44 87 44 87 
2e942     44 87 43 87 
2e946     44 87 43 87 
2e94a     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e94e     43 87 43 87 
2e952     43 87 44 87 
2e956     44 87 43 87 
2e95a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e95e     43 87 43 87 
2e962     43 87 43 87 
2e966     43 87 44 87 
2e96a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e96e     43 87 44 87 
2e972     43 87 44 87 
2e976     19 87 7D 86 
2e97a     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
2e97e     B1 78 BC 78 
2e982     BC 78 BC 78 
2e986     BC 78 BC 78 
2e98a     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e98e     BC 78 BC 78 
2e992     BD 78 BC 78 
2e996     B7 78 3B 7B 
2e99a     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
2e99e     96 86 44 87 
2e9a2     43 87 43 87 
2e9a6     43 87 43 87 
2e9aa     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e9ae     44 87 44 87 
2e9b2     43 87 44 87 
2e9b6     43 87 44 87 
2e9ba     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
2e9be     43 87 44 87 
2e9c2     43 87 44 87 
2e9c6     43 87 44 87 
2e9ca     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e9ce     43 87 44 87 
2e9d2     43 87 43 87 
2e9d6     44 87 43 87 
2e9da     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e9de     44 87 44 87 
2e9e2     43 87 43 87 
2e9e6     43 87 44 87 
2e9ea     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e9ee     43 87 43 87 
2e9f2     43 87 43 87 
2e9f6     44 87 44 87 
2e9fa     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
2e9fe     36 83 CF 7A 
2ea02     AB 78 BB 78 
2ea06     BC 78 BC 78 
2ea0a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
2ea0e     BB 78 BC 78 
2ea12     BC 78 BC 78 
2ea16     BC 78 BC 78 
2ea1a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2ea1e     BC 78 BC 78 
2ea22     BC 78 BB 78 
2ea26     BC 78 BC 78 
2ea2a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2ea2e     BB 78 BC 78 
2ea32     BB 78 BC 78 
2ea36     BC 78 BD 78 
2ea3a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
2ea3e     BC 78 BC 78 
2ea42     BC 78 BC 78 
2ea46     BC 78 BD 78 
2ea4a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
2ea4e     BC 78 BB 78 
2ea52     BC 78 BB 78 
2ea56     BB 78 BC 78 
2ea5a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
2ea5e     BC 78 BC 78 
2ea62     BC 78 BC 78 
2ea66     BC 78 BB 78 
2ea6a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
2ea6e     BC 78 BC 78 
2ea72     BC 78 BD 78 
2ea76     BB 78 BC 78 
2ea7a     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2ea7e     BC 78 BC 78 
2ea82     BC 78 BB 78 
2ea86     BC 78 BB 78 
2ea8a     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2ea8e     BB 78 BC 78 
2ea92     BC 78 BC 78 
2ea96     BC 78 BB 78 
2ea9a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ea9e     BC 78 BC 78 
2eaa2     BC 78 BB 78 
2eaa6     BC 78 BB 78 
2eaaa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2eaae     BC 78 BC 78 
2eab2     BC 78 BC 78 
2eab6     BB 78 BC 78 
2eaba     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2eabe     BC 78 9F 78 
2eac2     52 79 B3 84 
2eac6     2F 86 60 87 
2eaca     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
2eace     44 87 43 87 
2ead2     43 87 43 87 
2ead6     43 87 43 87 
2eada     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2eade     43 87 43 87 
2eae2     43 87 44 87 
2eae6     43 87 43 87 
2eaea     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2eaee     43 87 43 87 
2eaf2     43 87 43 87 
2eaf6     43 87 44 87 
2eafa     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2eafe     44 87 44 87 
2eb02     5E 87 BC 80 
2eb06     FB 80 94 78 
2eb0a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
2eb0e     BD 78 BC 78 
2eb12     BB 78 BC 78 
2eb16     BB 78 BB 78 
2eb1a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
2eb1e     BC 78 BB 78 
2eb22     BB 78 6B 79 
2eb26     D6 77 AC 87 
2eb2a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
2eb2e     43 87 44 87 
2eb32     43 87 43 87 
2eb36     44 87 43 87 
2eb3a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2eb3e     43 87 44 87 
2eb42     43 87 5C 87 
2eb46     E7 80 00 80 
2eb4a     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
2eb4e     BC 78 BD 78 
2eb52     BC 78 BC 78 
2eb56     BC 78 BB 78 
2eb5a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2eb5e     BC 78 BC 78 
2eb62     BB 78 BC 78 
2eb66     BB 78 BC 78 
2eb6a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2eb6e     BB 78 BC 78 
2eb72     BC 78 BC 78 
2eb76     BC 78 BC 78 
2eb7a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2eb7e     BC 78 BC 78 
2eb82     BC 78 BC 78 
2eb86     A0 78 8D 7B 
2eb8a     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
2eb8e     60 87 43 87 
2eb92     44 87 44 87 
2eb96     43 87 43 87 
2eb9a     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
2eb9e     44 87 43 87 
2eba2     43 87 43 87 
2eba6     44 87 73 86 
2ebaa     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
2ebae     51 7B B6 78 
2ebb2     BC 78 BD 78 
2ebb6     BC 78 BC 78 
2ebba     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2ebbe     BB 78 BC 78 
2ebc2     BD 78 BB 78 
2ebc6     BC 78 BB 78 
2ebca     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2ebce     BC 78 BC 78 
2ebd2     BC 78 BC 78 
2ebd6     BB 78 BC 78 
2ebda     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ebde     BC 78 BB 78 
2ebe2     BB 78 BC 78 
2ebe6     BC 78 BB 78 
2ebea     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
2ebee     22 8C AF 84 
2ebf2     48 87 43 87 
2ebf6     44 87 43 87 
2ebfa     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
2ebfe     43 87 42 87 
2ec02     43 87 43 87 
2ec06     44 87 43 87 
2ec0a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2ec0e     43 87 43 87 
2ec12     44 87 44 87 
2ec16     43 87 43 87 
2ec1a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2ec1e     43 87 43 87 
2ec22     43 87 43 87 
2ec26     44 87 43 87 
2ec2a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
2ec2e     9F 8B D6 77 
2ec32     16 7C B3 78 
2ec36     BC 78 BB 78 
2ec3a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2ec3e     BB 78 BC 78 
2ec42     BB 78 BC 78 
2ec46     BC 78 BC 78 
2ec4a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2ec4e     BC 78 BB 78 
2ec52     BB 78 BC 78 
2ec56     BB 78 BC 78 
2ec5a     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2ec5e     BB 78 BB 78 
2ec62     BC 78 BC 78 
2ec66     BC 78 BB 78 
2ec6a     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2ec6e     BC 78 BC 78 
2ec72     BC 78 BD 78 
2ec76     BB 78 BC 78 
2ec7a     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
2ec7e     BC 78 BC 78 
2ec82     BC 78 BB 78 
2ec86     BC 78 BC 78 
2ec8a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2ec8e     A8 78 54 7E 
2ec92     F4 83 17 82 
2ec96     50 87 43 87 
2ec9a     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
2ec9e     44 87 43 87 
2eca2     44 87 43 87 
2eca6     43 87 44 87 
2ecaa     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2ecae     43 87 28 87 
2ecb2     20 85 CF 7A 
2ecb6     70 7D AD 78 
2ecba     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
2ecbe     BB 78 BC 78 
2ecc2     BC 78 BC 78 
2ecc6     BB 78 BB 78 
2ecca     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
2ecce     BB 78 B2 78 
2ecd2     9A 7C CF 7A 
2ecd6     4A 87 0D 87 
2ecda     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
2ecde     43 87 44 87 
2ece2     43 87 44 87 
2ece6     43 87 43 87 
2ecea     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
2ecee     44 87 43 87 
2ecf2     28 87 51 85 
2ecf6     11 7A 1E 7D 
2ecfa     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
2ecfe     BC 78 BB 78 
2ed02     BC 78 BC 78 
2ed06     BC 78 BC 78 
2ed0a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2ed0e     BB 78 BC 78 
2ed12     BB 78 BC 78 
2ed16     BC 78 BC 78 
2ed1a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2ed1e     BB 78 BC 78 
2ed22     BC 78 BC 78 
2ed26     BD 78 BB 78 
2ed2a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
2ed2e     BC 78 BB 78 
2ed32     BC 78 BC 78 
2ed36     BC 78 BB 78 
2ed3a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ed3e     BC 78 BC 78 
2ed42     BC 78 BC 78 
2ed46     BB 78 BC 78 
2ed4a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ed4e     BC 78 BD 78 
2ed52     BC 78 BC 78 
2ed56     BC 78 BB 78 
2ed5a     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ed5e     BC 78 BB 78 
2ed62     BB 78 BC 78 
2ed66     BC 78 BB 78 
2ed6a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ed6e     BB 78 BB 78 
2ed72     BB 78 BC 78 
2ed76     B6 78 48 7D 
2ed7a     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
2ed7e     56 87 43 87 
2ed82     42 87 44 87 
2ed86     44 87 43 87 
2ed8a     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2ed8e     43 87 44 87 
2ed92     43 87 44 87 
2ed96     4C 87 7E 83 
2ed9a     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
2ed9e     F7 78 BC 78 
2eda2     BC 78 BB 78 
2eda6     BB 78 BC 78 
2edaa     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2edae     BC 78 BB 78 
2edb2     BC 78 BC 78 
2edb6     BB 78 BC 78 
2edba     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2edbe     BB 78 BC 78 
2edc2     BC 78 BC 78 
2edc6     BC 78 BB 78 
2edca     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2edce     BC 78 BC 78 
2edd2     BC 78 BC 78 
2edd6     BC 78 BB 78 
2edda     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2edde     BC 78 BB 78 
2ede2     BB 78 BC 78 
2ede6     BC 78 BB 78 
2edea     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2edee     BC 78 BC 78 
2edf2     BB 78 BC 78 
2edf6     BC 78 BC 78 
2edfa     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
2edfe     73 32 00 04 
2ee02     00 00 10 00 
2ee06     00 00 00 00 
2ee0a     00 00 00 00 | atari12 file "atari12.s2"
2ee0e     00 6D 00 6D 
2ee12     00 6D 00 6D 
2ee16     00 6D 00 6D 
2ee1a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee1e     00 6D 00 6D 
2ee22     00 6D 00 6D 
2ee26     00 6D 00 6D 
2ee2a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee2e     00 6D 00 6D 
2ee32     00 6D 00 6D 
2ee36     00 6D 00 6D 
2ee3a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee3e     00 6D 00 6D 
2ee42     00 6D 00 6D 
2ee46     00 6D 00 6D 
2ee4a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee4e     00 6D 00 6D 
2ee52     00 6D 00 6D 
2ee56     00 6D 00 6D 
2ee5a     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
2ee5e     00 6C 00 6C 
2ee62     00 6C 00 6C 
2ee66     00 6C 00 6C 
2ee6a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ee6e     00 6C 00 6C 
2ee72     00 6C 00 6C 
2ee76     00 6C 00 6C 
2ee7a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ee7e     00 6C 00 6C 
2ee82     00 6C 00 6C 
2ee86     00 6C 00 6C 
2ee8a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ee8e     00 6C 00 6C 
2ee92     00 6C 00 6C 
2ee96     00 6C 00 6C 
2ee9a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ee9e     00 6C 00 6C 
2eea2     00 6C 00 6C 
2eea6     00 6C 00 6C 
2eeaa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eeae     00 6C 00 6C 
2eeb2     00 6C 00 6C 
2eeb6     00 6C 00 6C 
2eeba     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eebe     00 6C 00 6C 
2eec2     00 6C 00 6C 
2eec6     00 6C 00 6C 
2eeca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eece     00 6C 00 6C 
2eed2     00 6C 00 6C 
2eed6     00 6C 00 6C 
2eeda     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eede     00 6C 00 6C 
2eee2     00 6C 00 6C 
2eee6     00 6C 00 6C 
2eeea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eeee     00 6C 00 6C 
2eef2     00 6C 00 6C 
2eef6     00 6C 00 6C 
2eefa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eefe     00 6C 00 6C 
2ef02     00 6C 00 6C 
2ef06     00 6C 00 6C 
2ef0a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ef0e     00 6C 00 6B 
2ef12     00 6B 00 6B 
2ef16     00 6B 00 6B 
2ef1a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef1e     00 6B 00 6B 
2ef22     00 6B 00 6B 
2ef26     00 6B 00 6B 
2ef2a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef2e     00 6B 00 6B 
2ef32     00 6B 00 6B 
2ef36     00 6B 00 6B 
2ef3a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef3e     00 6B 00 6B 
2ef42     00 6B 00 6B 
2ef46     00 6B 00 6B 
2ef4a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef4e     00 6B 00 6B 
2ef52     00 6B 00 6B 
2ef56     00 6B 00 6B 
2ef5a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef5e     00 6B 00 6B 
2ef62     00 6B 00 6B 
2ef66     00 6B 00 6B 
2ef6a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef6e     00 6B 00 6B 
2ef72     00 6B 00 6B 
2ef76     00 6B 00 6B 
2ef7a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef7e     00 6B 00 6B 
2ef82     00 6B 00 6B 
2ef86     00 6B 00 6B 
2ef8a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef8e     00 6B 00 6B 
2ef92     00 6B 00 6B 
2ef96     00 6B 00 6B 
2ef9a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef9e     00 6B 00 6B 
2efa2     00 6B 00 6B 
2efa6     00 6A 00 9D 
2efaa     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
2efae     00 9E 00 9E 
2efb2     00 9E 00 9E 
2efb6     00 9E 00 9E 
2efba     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2efbe     00 9E 00 9E 
2efc2     00 9E 00 9E 
2efc6     00 9E 00 9E 
2efca     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2efce     00 9E 00 9E 
2efd2     00 9E 00 9E 
2efd6     00 9E 00 9E 
2efda     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2efde     00 9E 00 9E 
2efe2     00 9E 00 9E 
2efe6     00 9E 00 9E 
2efea     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2efee     00 9E 00 9E 
2eff2     00 9E 00 9E 
2eff6     00 9E 00 9E 
2effa     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2effe     00 9E 00 9E 
2f002     00 9E 00 9E 
2f006     00 9E 00 9E 
2f00a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f00e     00 9E 00 9E 
2f012     00 9E 00 9E 
2f016     00 9E 00 9E 
2f01a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f01e     00 9E 00 9E 
2f022     00 9E 00 9E 
2f026     00 9E 00 9E 
2f02a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f02e     00 9E 00 9E 
2f032     00 9E 00 9E 
2f036     00 9E 00 9E 
2f03a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
2f03e     00 9F 00 9F 
2f042     00 9F 00 9F 
2f046     00 9F 00 9F 
2f04a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f04e     00 9F 00 9F 
2f052     00 9F 00 9F 
2f056     00 9F 00 9F 
2f05a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f05e     00 9F 00 9F 
2f062     00 9F 00 9F 
2f066     00 9F 00 9F 
2f06a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f06e     00 9F 00 9F 
2f072     00 9F 00 9F 
2f076     00 9F 00 9F 
2f07a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f07e     00 9F 00 9F 
2f082     00 9F 00 9F 
2f086     00 9F 00 9F 
2f08a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f08e     00 9F 00 9F 
2f092     00 9F 00 9F 
2f096     00 9F 00 9F 
2f09a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f09e     00 9F 00 9F 
2f0a2     00 9F 00 9F 
2f0a6     00 9F 00 9F 
2f0aa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0ae     00 9F 00 9F 
2f0b2     00 9F 00 9F 
2f0b6     00 9F 00 9F 
2f0ba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0be     00 9F 00 9F 
2f0c2     00 9F 00 9F 
2f0c6     00 9F 00 9F 
2f0ca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0ce     00 9F 00 9F 
2f0d2     00 9F 00 9F 
2f0d6     00 9F 00 9F 
2f0da     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0de     00 9F 00 9F 
2f0e2     00 9F 00 9F 
2f0e6     00 9F 00 9F 
2f0ea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0ee     00 9F 00 9F 
2f0f2     00 9F 00 9F 
2f0f6     00 9F 00 9F 
2f0fa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0fe     00 9F 00 9F 
2f102     00 9F 00 A0 
2f106     00 A0 00 A0 
2f10a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f10e     00 A0 00 A0 
2f112     00 A0 00 A0 
2f116     00 A0 00 A0 
2f11a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f11e     00 A0 00 A0 
2f122     00 A0 00 A0 
2f126     00 A0 00 A0 
2f12a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f12e     00 A0 00 A0 
2f132     00 A0 00 A0 
2f136     00 A0 00 A0 
2f13a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f13e     00 A0 00 A0 
2f142     00 A0 00 A0 
2f146     00 A0 00 A0 
2f14a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f14e     00 A0 00 A0 
2f152     00 A0 00 A0 
2f156     00 A0 00 A0 
2f15a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f15e     00 A0 00 A0 
2f162     00 A0 00 A0 
2f166     00 A0 00 A0 
2f16a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f16e     00 A0 00 A0 
2f172     00 A0 00 A0 
2f176     00 A0 00 A0 
2f17a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f17e     00 A0 00 A0 
2f182     00 A0 00 A0 
2f186     00 A0 00 A0 
2f18a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f18e     00 A0 00 A0 
2f192     00 A0 00 A0 
2f196     00 A0 00 A0 
2f19a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f19e     00 A0 00 A0 
2f1a2     00 A0 00 A0 
2f1a6     00 A0 00 A0 
2f1aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f1ae     00 A0 00 A0 
2f1b2     00 A0 00 A0 
2f1b6     00 A0 00 A0 
2f1ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f1be     00 A0 00 A0 
2f1c2     00 A0 00 A0 
2f1c6     00 A0 00 A0 
2f1ca     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
2f1ce     00 6D 00 6D 
2f1d2     00 6D 00 6D 
2f1d6     00 6D 00 6D 
2f1da     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f1de     00 6D 00 6D 
2f1e2     00 6D 00 6D 
2f1e6     00 6D 00 6D 
2f1ea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f1ee     00 6D 00 6D 
2f1f2     00 6D 00 6D 
2f1f6     00 6D 00 6D 
2f1fa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f1fe     00 6D 00 6D 
2f202     00 6D 00 6D 
2f206     00 6D 00 6D 
2f20a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f20e     00 6D 00 6D 
2f212     00 6D 00 6D 
2f216     00 6D 00 6D 
2f21a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f21e     00 6D 00 6D 
2f222     00 6D 00 6D 
2f226     00 6D 00 6D 
2f22a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f22e     00 6D 00 6D 
2f232     00 6D 00 6D 
2f236     00 6D 00 6D 
2f23a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f23e     00 6D 00 6D 
2f242     00 6D 00 6D 
2f246     00 6D 00 6D 
2f24a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f24e     00 6D 00 6D 
2f252     00 A0 00 A0 
2f256     00 A0 00 A0 
2f25a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f25e     00 A0 00 A0 
2f262     00 A0 00 A0 
2f266     00 A0 00 A0 
2f26a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f26e     00 A0 00 A0 
2f272     00 A0 00 A0 
2f276     00 A0 00 A0 
2f27a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f27e     00 A0 00 A0 
2f282     00 A0 00 A0 
2f286     00 A0 00 A0 
2f28a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f28e     00 A0 00 A0 
2f292     00 A0 00 A0 
2f296     00 A0 00 A0 
2f29a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f29e     00 A0 00 A0 
2f2a2     00 A0 00 A0 
2f2a6     00 A0 00 A0 
2f2aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2ae     00 A0 00 A0 
2f2b2     00 A0 00 A0 
2f2b6     00 A0 00 A0 
2f2ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2be     00 A0 00 A0 
2f2c2     00 A0 00 A0 
2f2c6     00 A0 00 A0 
2f2ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2ce     00 A0 00 A0 
2f2d2     00 A0 00 A0 
2f2d6     00 A0 00 A0 
2f2da     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
2f2de     00 6D 00 6D 
2f2e2     00 6D 00 6D 
2f2e6     00 6D 00 6D 
2f2ea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f2ee     00 6D 00 6D 
2f2f2     00 6D 00 6D 
2f2f6     00 6D 00 6D 
2f2fa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f2fe     00 6D 00 6D 
2f302     00 6D 00 6D 
2f306     00 6D 00 6D 
2f30a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f30e     00 6D 00 6D 
2f312     00 6D 00 6D 
2f316     00 6D 00 6D 
2f31a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f31e     00 6D 00 6D 
2f322     00 6D 00 6D 
2f326     00 6D 00 6D 
2f32a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f32e     00 6D 00 6D 
2f332     00 6D 00 6D 
2f336     00 6D 00 6D 
2f33a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f33e     00 6D 00 6D 
2f342     00 6D 00 6D 
2f346     00 6D 00 6D 
2f34a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f34e     00 6D 00 6D 
2f352     00 6D 00 6D 
2f356     00 6D 00 6D 
2f35a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f35e     00 6D 00 6D 
2f362     00 6C 00 A0 
2f366     00 9F 00 A0 
2f36a     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
2f36e     00 A0 00 A0 
2f372     00 A0 00 A0 
2f376     00 A0 00 A0 
2f37a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f37e     00 A0 00 A0 
2f382     00 A0 00 A0 
2f386     00 A0 00 A0 
2f38a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f38e     00 A0 00 A0 
2f392     00 A0 00 A0 
2f396     00 A0 00 A0 
2f39a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f39e     00 A0 00 A0 
2f3a2     00 A0 00 A0 
2f3a6     00 A0 00 A0 
2f3aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3ae     00 A0 00 A0 
2f3b2     00 A0 00 A0 
2f3b6     00 A0 00 A0 
2f3ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3be     00 A0 00 A0 
2f3c2     00 A0 00 A0 
2f3c6     00 A0 00 A0 
2f3ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3ce     00 A0 00 A0 
2f3d2     00 A0 00 A0 
2f3d6     00 A0 00 A0 
2f3da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3de     00 A0 00 A0 
2f3e2     00 A0 00 A0 
2f3e6     00 A0 00 A0 
2f3ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3ee     00 A0 00 A0 
2f3f2     00 A0 00 A0 
2f3f6     00 A0 00 A0 
2f3fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3fe     00 A0 00 A0 
2f402     00 A0 00 A0 
2f406     00 A0 00 A0 
2f40a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f40e     00 A0 00 A0 
2f412     00 A0 00 A0 
2f416     00 A0 00 A0 
2f41a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
2f41e     00 A1 00 A1 
2f422     00 A1 00 A1 
2f426     00 A1 00 A1 
2f42a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f42e     00 A1 00 A1 
2f432     00 A1 00 A1 
2f436     00 A1 00 A1 
2f43a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f43e     00 A1 00 A1 
2f442     00 A1 00 A1 
2f446     00 A1 00 A1 
2f44a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f44e     00 A1 00 A1 
2f452     00 A1 00 A1 
2f456     00 A1 00 A1 
2f45a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f45e     00 A1 00 A1 
2f462     00 A1 00 A1 
2f466     00 A1 00 A1 
2f46a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f46e     00 A1 00 A1 
2f472     00 A1 00 A1 
2f476     00 6E 00 6E 
2f47a     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f47e     00 6E 00 6E 
2f482     00 6E 00 6E 
2f486     00 6E 00 6E 
2f48a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f48e     00 6E 00 6E 
2f492     00 6E 00 6E 
2f496     00 6E 00 6E 
2f49a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f49e     00 6E 00 6E 
2f4a2     00 6E 00 6E 
2f4a6     00 6E 00 6E 
2f4aa     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f4ae     00 6E 00 6D 
2f4b2     00 6D 00 6D 
2f4b6     00 6D 00 6D 
2f4ba     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4be     00 6D 00 6D 
2f4c2     00 6D 00 6D 
2f4c6     00 6D 00 6D 
2f4ca     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4ce     00 6D 00 6D 
2f4d2     00 6D 00 6D 
2f4d6     00 6D 00 6D 
2f4da     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4de     00 6D 00 6D 
2f4e2     00 6D 00 6D 
2f4e6     00 6D 00 6D 
2f4ea     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4ee     00 6D 00 6D 
2f4f2     00 6D 00 6D 
2f4f6     00 6D 00 6D 
2f4fa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4fe     00 6D 00 6D 
2f502     00 6D 00 6D 
2f506     00 6D 00 6D 
2f50a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f50e     00 6D 00 6D 
2f512     00 6D 00 6D 
2f516     00 6D 00 6D 
2f51a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f51e     00 6D 00 6D 
2f522     00 6D 00 6D 
2f526     00 6D 00 6D 
2f52a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f52e     00 6D 00 6D 
2f532     00 6D 00 6D 
2f536     00 6D 00 6D 
2f53a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f53e     00 6D 00 6D 
2f542     00 6D 00 6D 
2f546     00 6D 00 6D 
2f54a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f54e     00 6D 00 6D 
2f552     00 6D 00 6D 
2f556     00 6D 00 6D 
2f55a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f55e     00 6D 00 6D 
2f562     00 6C 00 6C 
2f566     00 6C 00 6C 
2f56a     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f56e     00 6C 00 6C 
2f572     00 6C 00 6C 
2f576     00 6C 00 6C 
2f57a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f57e     00 6C 00 6C 
2f582     00 6C 00 6C 
2f586     00 9D 00 9F 
2f58a     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
2f58e     00 9F 00 9F 
2f592     00 9F 00 9F 
2f596     00 A0 00 A0 
2f59a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f59e     00 A0 00 A0 
2f5a2     00 A0 00 A0 
2f5a6     00 A0 00 A0 
2f5aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5ae     00 A0 00 A0 
2f5b2     00 A0 00 A0 
2f5b6     00 A0 00 A0 
2f5ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5be     00 A0 00 A0 
2f5c2     00 A0 00 A0 
2f5c6     00 A0 00 A0 
2f5ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5ce     00 A0 00 A0 
2f5d2     00 A0 00 A0 
2f5d6     00 A0 00 A0 
2f5da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5de     00 A0 00 A0 
2f5e2     00 A0 00 A0 
2f5e6     00 A0 00 A0 
2f5ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5ee     00 A0 00 A0 
2f5f2     00 A0 00 A0 
2f5f6     00 A0 00 A0 
2f5fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5fe     00 A0 00 A0 
2f602     00 A0 00 A0 
2f606     00 A0 00 A0 
2f60a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f60e                 | 
2f60e     00 00       |              	org
2f610 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2f614 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2f618 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2f61c 003             | 
2f61c 003 00 30 04 F6 |                 mov     psramaddr,#0
2f620 004             | 
2f620 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2f624 005 20 00 00 FF 
2f628 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2f62c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2f630 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2f634 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2f638 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2f63c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2f640 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2f644 00d             | 
2f644 00d 20 00 00 FF 
2f648 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2f64c 00f E0 03 00 FF 
2f650 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2f654 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2f658 012             | 
2f658 012             |                 
2f658 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2f65c 013             |     
2f65c 013 01 2C 60 FD |                 cogid 	t11				' get id
2f660 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2f664 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2f668 016             | 
2f668 016 00 00 00 00 | t11 		long 	0
2f66c 017 00 FF 07 00 | mailbox 	long 	$7FF00
2f670 018 00 00 00 00 | psramaddr 	long 	0
2f674 019 00 00 00 00 | pslockval	long 	0
2f678 01a 00 00 00 00 | cmd             long    0
2f67c 01b 00 00 00 00 | buf1            long    0
2f680 01c 00 40 00 00 | buf2            long    16384
2f684 01d 88 F6 02 00 | 	long	@@@_dat_ + 12624
2f688 01e 50 32 20 52 
2f68c 01f 65 74 72 6F 
2f690 020 6D 61 63 68 
2f694 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2f698 022 42 41 53 49 
2f69c 023 43 20 76 65 
2f6a0 024 72 73 69 6F 
2f6a4 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2f6a8 026 32 36 00 00 | 	byte	$32, $36, $00, $00
2f6ac 027             | 	alignl
2f6ac 027             | _hg010b_spin2_dat_
2f6ac 027             | 
2f6ac 027 00 00 00 00 
2f6b0 028 00 00 00 00 
2f6b4 029 00 00 00 00 
2f6b8 02a 00 00 00 00 
2f6bc 02b 00 00 00    | vga_font       file "vgafont.def"
2f6bf 02b 7E 81 A5 81 
2f6c3 02c 81 BD 99 81 
2f6c7 02d 81 7E 00 00 
2f6cb 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2f6cf 02f 7E FF DB FF 
2f6d3 030 FF C3 E7 FF 
2f6d7 031 FF 7E 00 00 
2f6db 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2f6df 033 00 36 7F 7F 
2f6e3 034 7F 7F 3E 1C 
2f6e7 035 08 00 00 00 
2f6eb 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2f6ef 037 00 08 1C 3E 
2f6f3 038 7F 3E 1C 08 
2f6f7 039 00 00 00 00 
2f6fb 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2f6ff 03b 18 3C 3C E7 
2f703 03c E7 E7 18 18 
2f707 03d 3C 00 00 00 
2f70b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2f70f 03f 18 3C 7E FF 
2f713 040 FF 7E 18 18 
2f717 041 3C 00 00 00 
2f71b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2f71f 043 00 00 00 18 
2f723 044 3C 3C 18 00 
2f727 045 00 00 00 00 
2f72b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2f72f 047 FF FF FF E7 
2f733 048 C3 C3 E7 FF 
2f737 049 FF FF FF FF 
2f73b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2f73f 04b 00 00 3C 66 
2f743 04c 42 42 66 3C 
2f747 04d 00 00 00 00 
2f74b 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2f74f 04f FF FF C3 99 
2f753 050 BD BD 99 C3 
2f757 051 FF FF FF FF 
2f75b 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2f75f 053 78 70 58 4C 
2f763 054 1E 33 33 33 
2f767 055 33 1E 00 00 
2f76b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2f76f 057 3C 66 66 66 
2f773 058 66 3C 18 7E 
2f777 059 18 18 00 00 
2f77b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2f77f 05b FC CC FC 0C 
2f783 05c 0C 0C 0C 0E 
2f787 05d 0F 07 00 00 
2f78b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2f78f 05f FE C6 FE C6 
2f793 060 C6 C6 C6 E6 
2f797 061 E7 67 03 00 
2f79b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2f79f 063 18 18 DB 3C 
2f7a3 064 E7 3C DB 18 
2f7a7 065 18 00 00 00 
2f7ab 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2f7af 067 03 07 0F 1F 
2f7b3 068 7F 1F 0F 07 
2f7b7 069 03 01 00 00 
2f7bb 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2f7bf 06b 60 70 78 7C 
2f7c3 06c 7F 7C 78 70 
2f7c7 06d 60 40 00 00 
2f7cb 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2f7cf 06f 18 3C 7E 18 
2f7d3 070 18 18 7E 3C 
2f7d7 071 18 00 00 00 
2f7db 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2f7df 073 66 66 66 66 
2f7e3 074 66 66 66    | 	byte	$66[7]
2f7e6 075 00 66 66 00 
2f7ea 076 00 00 00 00 
2f7ee 077 00 FE DB DB 
2f7f2 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2f7f6 079 D8 D8 D8 00 
2f7fa 07a 00 00 00 3E 
2f7fe 07b 63 06 1C 36 
2f802 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2f806 07d 30 63 3E 00 
2f80a 07e 00 00 00 00 
2f80e 07f 00 00 00 00 
2f812 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2f816 081 7F 7F 7F 00 
2f81a 082 00 00 00 00 
2f81e 083 00 18 3C 7E 
2f822 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2f826 085 3C 18 7E 00 
2f82a 086 00 00 00 00 
2f82e 087 00 18 3C 7E 
2f832 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2f836 089 18 18 18 00 
2f83a 08a 00 00 00 00 
2f83e 08b 00 18 18 18 
2f842 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f846 08d 7E 3C 18 00 
2f84a 08e 00 00 00 00 
2f84e 08f 00 00 00 18 
2f852 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2f856 091 00 00 00 00 
2f85a 092 00 00 00 00 
2f85e 093 00 00 00    | 	byte	$00[11]
2f861 094 0C 06 7F 06 
2f865 095 0C 00 00 00 
2f869 096 00 00 00 00 
2f86d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f871 098 00 03 03 03 
2f875 099 7F 00 00 00 
2f879 09a 00 00 00 00 
2f87d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f881 09c 14 36 7F 36 
2f885 09d 14 00 00 00 
2f889 09e 00 00 00 00 
2f88d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2f891 0a0 1C 1C 3E 3E 
2f895 0a1 7F 7F 00 00 
2f899 0a2 00 00 00 00 
2f89d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2f8a1 0a4 7F 3E 3E 1C 
2f8a5 0a5 1C 08 00 00 
2f8a9 0a6 00 00 00 00 
2f8ad 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f8b1 0a8 00 00 00 00 
2f8b5 0a9 00 00 00 00 
2f8b9 0aa 00 00 00 00 
2f8bd 0ab 00 00       | 	byte	$00[14]
2f8bf 0ab 18 3C 3C 3C 
2f8c3 0ac 18 18 18 00 
2f8c7 0ad 18 18 00 00 
2f8cb 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2f8cf 0af 66 24 00 00 
2f8d3 0b0 00 00 00 00 
2f8d7 0b1 00 00 00 00 
2f8db 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f8df 0b3 00 36 36 7F 
2f8e3 0b4 36 36 36 7F 
2f8e7 0b5 36 36 00 00 
2f8eb 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2f8ef 0b7 3E 63 43 03 
2f8f3 0b8 3E 60 60 61 
2f8f7 0b9 63 3E 18 18 
2f8fb 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2f8ff 0bb 00 00 43 63 
2f903 0bc 30 18 0C 06 
2f907 0bd 63 61 00 00 
2f90b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2f90f 0bf 1C 36 36 1C 
2f913 0c0 6E 3B 33 33 
2f917 0c1 33 6E 00 00 
2f91b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2f91f 0c3 0C 0C 0C 06 
2f923 0c4 00 00 00 00 
2f927 0c5 00 00 00 00 
2f92b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f92f 0c7 30 18 0C 0C 
2f933 0c8 0C 0C 0C 0C 
2f937 0c9 18 30 00 00 
2f93b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2f93f 0cb 0C 18 30 30 
2f943 0cc 30 30 30 30 
2f947 0cd 18 0C 00 00 
2f94b 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2f94f 0cf 00 00 00 66 
2f953 0d0 3C FF 3C 66 
2f957 0d1 00 00 00 00 
2f95b 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2f95f 0d3 00 00 00 18 
2f963 0d4 18 7E 18 18 
2f967 0d5 00 00 00 00 
2f96b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2f96f 0d7 00 00 00 00 
2f973 0d8 00 00 00 00 | 	byte	$00[8]
2f977 0d9 18 18 18 0C 
2f97b 0da 00 00 00 00 
2f97f 0db 00 00 00 00 
2f983 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2f987 0dd 00 00 00 00 
2f98b 0de 00 00 00 00 
2f98f 0df 00 00 00 00 
2f993 0e0 00 00 00 00 | 	byte	$00[16]
2f997 0e1 18 18 00 00 
2f99b 0e2 00 00 00 00 
2f99f 0e3 00 00 40 60 
2f9a3 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2f9a7 0e5 03 01 00 00 
2f9ab 0e6 00 00 00 00 
2f9af 0e7 1C 36 63 63 
2f9b3 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2f9b7 0e9 36 1C 00 00 
2f9bb 0ea 00 00 00 00 
2f9bf 0eb 18 1C 1E 18 
2f9c3 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2f9c7 0ed 18 7E 00 00 
2f9cb 0ee 00 00 00 00 
2f9cf 0ef 3E 63 60 30 
2f9d3 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2f9d7 0f1 63 7F 00 00 
2f9db 0f2 00 00 00 00 
2f9df 0f3 3E 63 60 60 
2f9e3 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2f9e7 0f5 63 3E 00 00 
2f9eb 0f6 00 00 00 00 
2f9ef 0f7 30 38 3C 36 
2f9f3 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2f9f7 0f9 30 78 00 00 
2f9fb 0fa 00 00 00 00 
2f9ff 0fb 7F 03 03 03 
2fa03 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2fa07 0fd 63 3E 00 00 
2fa0b 0fe 00 00 00 00 
2fa0f 0ff 1C 06 03 03 
2fa13 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2fa17 101 63 3E 00 00 
2fa1b 102 00 00 00 00 
2fa1f 103 7F 63 60 60 
2fa23 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2fa27 105 0C 0C 00 00 
2fa2b 106 00 00 00 00 
2fa2f 107 3E 63 63 63 
2fa33 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2fa37 109 63 3E 00 00 
2fa3b 10a 00 00 00 00 
2fa3f 10b 3E 63 63 63 
2fa43 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2fa47 10d 30 1E 00 00 
2fa4b 10e 00 00 00 00 
2fa4f 10f 00 00 00 18 
2fa53 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2fa57 111 18 18 00 00 
2fa5b 112 00 00 00 00 
2fa5f 113 00 00 00 18 
2fa63 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2fa67 115 18 18 0C 00 
2fa6b 116 00 00 00 00 
2fa6f 117 00 60 30 18 
2fa73 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2fa77 119 30 60 00 00 
2fa7b 11a 00 00 00 00 
2fa7f 11b 00 00 00 7E 
2fa83 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2fa87 11d 00 00 00 00 
2fa8b 11e 00 00 00 00 
2fa8f 11f 00          | 	byte	$00[9]
2fa90 120 06 0C 18 30 
2fa94 121 60 30 18 0C 
2fa98 122 06 00 00 00 
2fa9c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2faa0 124 63 63 30 18 
2faa4 125 18 18 00 18 
2faa8 126 18 00 00 00 
2faac 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2fab0 128 3E 63 63 7B 
2fab4 129 7B 7B 3B 03 
2fab8 12a 3E 00 00 00 
2fabc 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2fac0 12c 1C 36 63 63 
2fac4 12d 7F 63 63 63 
2fac8 12e 63 00 00 00 
2facc 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2fad0 130 66 66 66 3E 
2fad4 131 66 66 66 66 
2fad8 132 3F 00 00 00 
2fadc 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2fae0 134 66 43 03 03 
2fae4 135 03 03 43 66 
2fae8 136 3C 00 00 00 
2faec 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2faf0 138 36 66 66 66 
2faf4 139 66 66 66 36 
2faf8 13a 1F 00 00 00 
2fafc 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2fb00 13c 66 46 16 1E 
2fb04 13d 16 06 46 66 
2fb08 13e 7F 00 00 00 
2fb0c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2fb10 140 66 46 16 1E 
2fb14 141 16 06 06 06 
2fb18 142 0F 00 00 00 
2fb1c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2fb20 144 66 43 03 03 
2fb24 145 7B 63 63 66 
2fb28 146 5C 00 00 00 
2fb2c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2fb30 148 63 63 63 7F 
2fb34 149 63 63 63 63 
2fb38 14a 63 00 00 00 
2fb3c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2fb40 14c 18 18 18 18 
2fb44 14d 18 18 18 18 | 	byte	$18[8]
2fb48 14e 3C 00 00 00 
2fb4c 14f 00 00 00 78 
2fb50 150 30 30 30 30 
2fb54 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2fb58 152 1E 00 00 00 
2fb5c 153 00 00 00 67 
2fb60 154 66 66 36 1E 
2fb64 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2fb68 156 67 00 00 00 
2fb6c 157 00 00 00 0F 
2fb70 158 06 06 06 06 
2fb74 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2fb78 15a 7F 00 00 00 
2fb7c 15b 00 00 00 63 
2fb80 15c 77 7F 7F 6B 
2fb84 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2fb88 15e 63 00 00 00 
2fb8c 15f 00 00 00 63 
2fb90 160 67 6F 7F 7B 
2fb94 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2fb98 162 63 00 00 00 
2fb9c 163 00 00 00 3E 
2fba0 164 63 63 63 63 
2fba4 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2fba8 166 3E 00 00 00 
2fbac 167 00 00 00 3F 
2fbb0 168 66 66 66 3E 
2fbb4 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2fbb8 16a 0F 00 00 00 
2fbbc 16b 00 00 00 3E 
2fbc0 16c 63 63 63 63 
2fbc4 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2fbc8 16e 3E 30 70 00 
2fbcc 16f 00 00 00 3F 
2fbd0 170 66 66 66 3E 
2fbd4 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2fbd8 172 67 00 00 00 
2fbdc 173 00 00 00 3E 
2fbe0 174 63 63 06 1C 
2fbe4 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2fbe8 176 3E 00 00 00 
2fbec 177 00 00 00 7E 
2fbf0 178 7E 5A 18 18 
2fbf4 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2fbf8 17a 3C 00 00 00 
2fbfc 17b 00 00 00 63 
2fc00 17c 63 63 63 63 
2fc04 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2fc08 17e 3E 00 00 00 
2fc0c 17f 00 00 00 63 
2fc10 180 63 63 63 63 
2fc14 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2fc18 182 08 00 00 00 
2fc1c 183 00 00 00 63 
2fc20 184 63 63 63 6B 
2fc24 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2fc28 186 36 00 00 00 
2fc2c 187 00 00 00 63 
2fc30 188 63 36 3E 1C 
2fc34 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2fc38 18a 63 00 00 00 
2fc3c 18b 00 00 00 66 
2fc40 18c 66 66 66 3C 
2fc44 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2fc48 18e 3C 00 00 00 
2fc4c 18f 00 00 00 7F 
2fc50 190 63 61 30 18 
2fc54 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2fc58 192 7F 00 00 00 
2fc5c 193 00 00 00 3C 
2fc60 194 0C 0C 0C 0C 
2fc64 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2fc68 196 3C 00 00 00 
2fc6c 197 00 00 00 00 
2fc70 198 01 03 07 0E 
2fc74 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2fc78 19a 40 00 00 00 
2fc7c 19b 00 00 00 3C 
2fc80 19c 30 30 30 30 
2fc84 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2fc88 19e 3C 00 00 00 
2fc8c 19f 1C 36 00 00 
2fc90 1a0 00 00 00 00 
2fc94 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fc98 1a2 00 00 00 00 
2fc9c 1a3 00 00 00 00 
2fca0 1a4 00 00 00 00 
2fca4 1a5 00 00 00 00 
2fca8 1a6 00          | 	byte	$00[17]
2fca9 1a6 FF 00 00 0C 
2fcad 1a7 18 00 00 00 
2fcb1 1a8 00 00 00 00 
2fcb5 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fcb9 1aa 00 00 00 00 
2fcbd 1ab 00 00 00 00 
2fcc1 1ac 00          | 	byte	$00[9]
2fcc2 1ac 1E 30 3E 33 
2fcc6 1ad 33 33 6E 00 
2fcca 1ae 00 00 00 00 
2fcce 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2fcd2 1b0 1E 36 66 66 
2fcd6 1b1 66 66 3E 00 
2fcda 1b2 00 00 00 00 
2fcde 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fce2 1b4 3E 63 03 03 
2fce6 1b5 03 63 3E 00 
2fcea 1b6 00 00 00 00 
2fcee 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2fcf2 1b8 3C 36 33 33 
2fcf6 1b9 33 33 6E 00 
2fcfa 1ba 00 00 00 00 
2fcfe 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fd02 1bc 3E 63 7F 03 
2fd06 1bd 03 63 3E 00 
2fd0a 1be 00 00 00 00 
2fd0e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2fd12 1c0 0C 1E 0C 0C 
2fd16 1c1 0C 0C 1E 00 
2fd1a 1c2 00 00 00 00 
2fd1e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fd22 1c4 6E 33 33 33 
2fd26 1c5 33 33 3E 30 
2fd2a 1c6 33 1E 00 00 
2fd2e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2fd32 1c8 36 6E 66 66 
2fd36 1c9 66 66 67 00 
2fd3a 1ca 00 00 00 00 
2fd3e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2fd42 1cc 1C 18 18 18 
2fd46 1cd 18 18 3C 00 
2fd4a 1ce 00 00 00 00 
2fd4e 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2fd52 1d0 70 60 60 60 
2fd56 1d1 60 60 60 66 
2fd5a 1d2 66 3C 00 00 
2fd5e 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2fd62 1d4 66 36 1E 1E 
2fd66 1d5 36 66 67 00 
2fd6a 1d6 00 00 00 00 
2fd6e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2fd72 1d8 18 18 18 18 
2fd76 1d9 18 18       | 	byte	$18[6]
2fd78 1da 3C 00 00 00 
2fd7c 1db 00 00 00 00 
2fd80 1dc 00 00 37 7F 
2fd84 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2fd88 1de 63 00 00 00 
2fd8c 1df 00 00 00 00 
2fd90 1e0 00 00 3B 66 
2fd94 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2fd98 1e2 66 00 00 00 
2fd9c 1e3 00 00 00 00 
2fda0 1e4 00 00 3E 63 
2fda4 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2fda8 1e6 3E 00 00 00 
2fdac 1e7 00 00 00 00 
2fdb0 1e8 00 00 3B 66 
2fdb4 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2fdb8 1ea 3E 06 06 0F 
2fdbc 1eb 00 00 00 00 
2fdc0 1ec 00 00 6E 33 
2fdc4 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2fdc8 1ee 3E 30 30 78 
2fdcc 1ef 00 00 00 00 
2fdd0 1f0 00 00 3B 6E 
2fdd4 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2fdd8 1f2 0F 00 00 00 
2fddc 1f3 00 00 00 00 
2fde0 1f4 00 00 3E 63 
2fde4 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2fde8 1f6 3E 00 00 00 
2fdec 1f7 00 00 00 08 
2fdf0 1f8 0C 0C 3F 0C 
2fdf4 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2fdf8 1fa 38 00 00 00 
2fdfc 1fb 00 00 00 00 
2fe00 1fc 00 00 33 33 
2fe04 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2fe08 1fe 6E 00 00 00 
2fe0c 1ff 00 00 00 00 
2fe10 200 00 00 63 63 
2fe14 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2fe18 202 1C 00 00 00 
2fe1c 203 00 00 00 00 
2fe20 204 00 00 63 63 
2fe24 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2fe28 206 36 00 00 00 
2fe2c 207 00 00 00 00 
2fe30 208 00 00 63 36 
2fe34 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2fe38 20a 63 00 00 00 
2fe3c 20b 00 00 00 00 
2fe40 20c 00 00 63 63 
2fe44 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2fe48 20e 7E 60 30 1F 
2fe4c 20f 00 00 00 00 
2fe50 210 00 00 7F 33 
2fe54 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2fe58 212 7F 00 00 00 
2fe5c 213 00 00 00 70 
2fe60 214 18 18 18 0E 
2fe64 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2fe68 216 70 00 00 00 
2fe6c 217 00 00 00 18 
2fe70 218 18 18 18 18 
2fe74 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2fe78 21a 18 00 00 00 
2fe7c 21b 00 00 00 0E 
2fe80 21c 18 18 18 70 
2fe84 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2fe88 21e 0E 00 00 00 
2fe8c 21f 6E 3B 00 00 
2fe90 220 00 00 00 00 
2fe94 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe98 222 00 00 00 00 
2fe9c 223 00 00 00 00 
2fea0 224 00 00       | 	byte	$00[10]
2fea2 224 08 1C 36 63 
2fea6 225 63 63 7F 00 
2feaa 226 00 00 00 00 
2feae 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2feb2 228 03 03 03 03 
2feb6 229 43 66 3C 18 
2feba 22a 30 1E 00 00 
2febe 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2fec2 22c 33 33 33 33 
2fec6 22d 33 33       | 	byte	$33[6]
2fec8 22e 6E 00 00 00 
2fecc 22f 00 00 60 30 
2fed0 230 18 00 3E 63 
2fed4 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2fed8 232 3E 00 00 00 
2fedc 233 00 00 08 1C 
2fee0 234 36 00 1E 30 
2fee4 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2fee8 236 6E 00 00 00 
2feec 237 00 00 00 00 
2fef0 238 33 00 1E 30 
2fef4 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2fef8 23a 6E 00 00 00 
2fefc 23b 00 00 1C 36 
2ff00 23c 1C 00 33 33 
2ff04 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2ff08 23e 6E 00 00 00 
2ff0c 23f 00 00 60 30 
2ff10 240 18 00 3E 63 
2ff14 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2ff18 242 3E 00 00 00 
2ff1c 243 00 00 00 00 
2ff20 244 00 00 3E 63 
2ff24 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2ff28 246 3E 18 30 1E 
2ff2c 247 00 00 00 1C 
2ff30 248 58 78 38 18 
2ff34 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2ff38 24a 3C 00 00 00 
2ff3c 24b 00 00 00 00 
2ff40 24c 63 00 3E 63 
2ff44 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2ff48 24e 3E 00 00 00 
2ff4c 24f 66 33 00 3E 
2ff50 250 63 63 63 63 
2ff54 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2ff58 252 3E 00 00 00 
2ff5c 253 00 00 CC 66 
2ff60 254 33 00 3E 63 
2ff64 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2ff68 256 3E 00 00 00 
2ff6c 257 00 00 18 3C 
2ff70 258 66 00 1C 18 
2ff74 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2ff78 25a 3C 00 00 00 
2ff7c 25b 30 18 00 7F 
2ff80 25c 63 61 30 18 
2ff84 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2ff88 25e 7F 00 00 00 
2ff8c 25f 00 63 00 08 
2ff90 260 1C 36 63 63 
2ff94 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2ff98 262 63 00 00 00 
2ff9c 263 30 18 00 3C 
2ffa0 264 66 43 03 03 
2ffa4 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2ffa8 266 3C 00 00 00 
2ffac 267 30 18 00 7F 
2ffb0 268 66 46 16 1E 
2ffb4 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2ffb8 26a 7F 00 00 00 
2ffbc 26b 0C 06 00 0F 
2ffc0 26c 06 06 06 06 
2ffc4 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2ffc8 26e 7F 00 00 00 
2ffcc 26f 30 18 00 1C 
2ffd0 270 18 18 18 18 
2ffd4 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2ffd8 272 3C 00 00 00 
2ffdc 273 00 00 08 1C 
2ffe0 274 36 00 3E 63 
2ffe4 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2ffe8 276 3E 00 00 00 
2ffec 277 00 00 00 00 
2fff0 278 63 00 3E 63 
2fff4 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2fff8 27a 3E 00 00 00 
2fffc 27b 00 00 00 6F 
30000 27c 46 26 06 06 
30004 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
30008 27e 7F 00 00 00 
3000c 27f 00 00 00 6E 
30010 280 4C 2C 0C 0C 
30014 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
30018 282 1E 00 00 00 
3001c 283 30 18 00 3E 
30020 284 63 63 06 1C 
30024 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
30028 286 3E 00 00 00 
3002c 287 00 00 60 30 
30030 288 18 00 3E 63 
30034 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
30038 28a 3E 00 00 00 
3003c 28b 00 63 00 3E 
30040 28c 63 63 63 63 
30044 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
30048 28e 3E 00 00 00 
3004c 28f 00 63 00 63 
30050 290 63 63 63 63 
30054 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
30058 292 3E 00 00 00 
3005c 293 6C 38 00 7E 
30060 294 7E 5A 18 18 
30064 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
30068 296 3C 00 00 00 
3006c 297 00 00 60 48 
30070 298 2C 0C 3F 0C 
30074 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
30078 29a 38 00 00 00 
3007c 29b 00 00 00 0F 
30080 29c 26 36 1E 0E 
30084 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
30088 29e 7F 00 00 00 
3008c 29f 00 00 00 00 
30090 2a0 00 63 36 1C 
30094 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
30098 2a2 00 00 00 00 
3009c 2a3 00 00       | 	byte	$00[6]
3009e 2a3 36 1C 08 00 
300a2 2a4 3E 63 03 03 
300a6 2a5 03 63 3E 00 
300aa 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
300ae 2a7 30 18 0C 00 
300b2 2a8 1E 30 3E 33 
300b6 2a9 33 33 6E 00 
300ba 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
300be 2ab 60 30 18 00 
300c2 2ac 1C 18 18 18 
300c6 2ad 18 18 3C 00 
300ca 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
300ce 2af 60 30 18 00 
300d2 2b0 3E 63 63 63 
300d6 2b1 63 63 3E 00 
300da 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
300de 2b3 30 18 0C 00 
300e2 2b4 33 33 33 33 
300e6 2b5 33 33 6E 00 
300ea 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
300ee 2b7 00 08 1C 36 
300f2 2b8 63 63 7F 63 
300f6 2b9 63 63 63 18 
300fa 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
300fe 2bb 00 00 00 00 
30102 2bc 1E 30 3E 33 
30106 2bd 33 33 6E 18 
3010a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3010e 2bf 00 7F 63 61 
30112 2c0 30 18 0C 06 
30116 2c1 43 63 7F 00 
3011a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3011e 2c3 36 1C 08 00 
30122 2c4 7F 33 18 0C 
30126 2c5 06 63 7F 00 
3012a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3012e 2c7 00 7F 66 46 
30132 2c8 16 1E 16 06 
30136 2c9 46 66 7F 18 
3013a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3013e 2cb 00 00 00 00 
30142 2cc 3E 63 7F 03 
30146 2cd 03 63 3E 18 
3014a 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3014e 2cf 00 3C 66 03 
30152 2d0 1F 03 0F 03 
30156 2d1 03 66 3C 00 
3015a 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3015e 2d3 60 30 18 00 
30162 2d4 7F 33 18 0C 
30166 2d5 06 63 7F 00 
3016a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3016e 2d7 00 3C 66 43 
30172 2d8 03 03 03 03 
30176 2d9 43 66 3C 00 
3017a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3017e 2db 00 00 00 00 
30182 2dc 3E 63 06 1C 
30186 2dd 30 63 3E 18 
3018a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3018e 2df 00 00 00 00 
30192 2e0 00 00       | 	byte	$00[6]
30194 2e1 6C 36 1B 36 
30198 2e2 6C 00 00 00 
3019c 2e3 00 00 00 00 
301a0 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
301a4 2e5 1B 36 6C 36 
301a8 2e6 1B 00 00 00 
301ac 2e7 88 22 88 22 
301b0 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
301b4 2e9 88 22 88 22 
301b8 2ea 88 22 88 22 
301bc 2eb AA 55 AA 55 
301c0 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
301c4 2ed AA 55 AA 55 
301c8 2ee AA 55 AA 55 
301cc 2ef BB EE BB EE 
301d0 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
301d4 2f1 BB EE BB EE 
301d8 2f2 BB EE BB EE 
301dc 2f3 18 18 18 18 
301e0 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
301e4 2f5 18 18 18 18 
301e8 2f6 18 18 18 18 
301ec 2f7 18 18 18 18 
301f0 2f8 18 18 18    | 	byte	$18[15]
301f3 2f8 1F 18 18 18 
301f7 2f9 18 18 18 18 
301fb 2fa 18 30 18 00 
301ff 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
30203 2fc 63 7F 63 63 
30207 2fd 63 63 00 00 
3020b 2fe 00 1C 36 00 
3020f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
30213 300 63 7F 63 63 
30217 301 63 63 00 00 
3021b 302 00 36 1C 00 
3021f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
30223 304 1E 16 06 46 
30227 305 66 7F 00 00 
3022b 306 00 00 00 00 
3022f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
30233 308 1C 30 60 63 
30237 309 63 3E 18 30 
3023b 30a 1E 6C 6C 6C 
3023f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
30243 30c 6F 6C 6C 6C 
30247 30d 6C 6C 6C 6C 
3024b 30e 6C 6C 6C 6C 
3024f 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30253 310 6C 6C 6C 6C 
30257 311 6C 6C 6C 6C 
3025b 312 6C          | 	byte	$6c[9]
3025c 313 00 00 00 00 
30260 314 00          | 	byte	$00[5]
30261 314 7F 60 6F 6C 
30265 315 6C 6C 6C 6C 
30269 316 6C 6C 6C 6C 
3026d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30271 318 6F 60 7F 00 
30275 319 00 00 00 00 
30279 31a 00 00 00 18 
3027d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
30281 31c 61 30 18 0C 
30285 31d 06 43 63 7F 
30289 31e 00 00 00 00 
3028d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
30291 320 00 7F 33 18 
30295 321 0C 06 63 7F 
30299 322 00 00 00 00 
3029d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
302a1 324 00 00 1F 18 
302a5 325 18 18 18 18 
302a9 326 18 18 18 18 
302ad 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
302b1 328 18 18 F8 00 
302b5 329 00 00 00 00 
302b9 32a 00 00 00 18 
302bd 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
302c1 32c 18 18 FF 00 
302c5 32d 00 00 00 00 
302c9 32e 00 00 00 00 
302cd 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
302d1 330 00 00 FF 18 
302d5 331 18 18 18 18 
302d9 332 18 18 18 18 
302dd 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
302e1 334 18 18 F8 18 
302e5 335 18 18 18 18 
302e9 336 18 18 18 00 
302ed 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
302f1 338 00 00 FF 00 
302f5 339 00 00 00 00 
302f9 33a 00 00 00 18 
302fd 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
30301 33c 18 18 FF 18 
30305 33d 18 18 18 18 
30309 33e 18 18 18 63 
3030d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
30311 340 36 63 63 7F 
30315 341 63 63 63 63 
30319 342 00 00 00 00 
3031d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
30321 344 00 1E 30 3E 
30325 345 33 33 33 6E 
30329 346 00 00 00 6C 
3032d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
30331 348 EC 0C FC 00 
30335 349 00 00 00 00 
30339 34a 00 00 00 00 
3033d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30341 34c FC 0C EC 6C 
30345 34d 6C 6C 6C 6C 
30349 34e 6C 6C 6C 6C 
3034d 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30351 350 EF 00 FF 00 
30355 351 00 00 00 00 
30359 352 00 00 00 00 
3035d 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30361 354 FF 00 EF 6C 
30365 355 6C 6C 6C 6C 
30369 356 6C 6C 6C 6C 
3036d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30371 358 EC 0C EC 6C 
30375 359 6C 6C 6C 6C 
30379 35a 6C 6C 6C 00 
3037d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
30381 35c FF 00 FF 00 
30385 35d 00 00 00 00 
30389 35e 00 00 00 6C 
3038d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
30391 360 EF 00 EF 6C 
30395 361 6C 6C 6C 6C 
30399 362 6C 6C 6C 00 
3039d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
303a1 364 63 3E 63 63 
303a5 365 63 63 3E 63 
303a9 366 00 00 00 00 
303ad 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
303b1 368 30 3C 36 33 
303b5 369 33 33 33 6E 
303b9 36a 00 00 00 00 
303bd 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
303c1 36c 66 66 6F 66 
303c5 36d 66 66 36 1F 
303c9 36e 00 00 00 36 
303cd 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
303d1 370 66 66 66 66 
303d5 371 66 66       | 	byte	$66[6]
303d7 371 36 1F 00 00 
303db 372 00 00 63 00 
303df 373 7F 66 46 16 
303e3 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
303e7 375 66 7F 00 00 
303eb 376 00 6C 38 00 
303ef 377 38 30 30 3C 
303f3 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
303f7 379 33 6E 00 00 
303fb 37a 00 36 1C 00 
303ff 37b 63 67 6F 7F 
30403 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
30407 37d 63 63 00 00 
3040b 37e 00 30 18 00 
3040f 37f 3C 18 18 18 
30413 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
30417 381 18 3C 00 00 
3041b 382 00 3C 66 00 
3041f 383 3C 18 18 18 
30423 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
30427 385 18 3C 00 00 
3042b 386 00 00 00 36 
3042f 387 1C 08 00 3E 
30433 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
30437 389 63 3E 00 00 
3043b 38a 00 18 18 18 
3043f 38b 18 18 18 18 
30443 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
30447 38d 00 00 00 00 
3044b 38e 00 00 00 00 
3044f 38f 00 00 00 00 | 	byte	$00[12]
30453 390 F8 18 18 18 
30457 391 18 18 18 18 
3045b 392 18 FF FF FF 
3045f 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
30463 394 FF FF FF FF 
30467 395 FF FF FF FF 
3046b 396 FF          | 	byte	$ff[9]
3046c 397 00 00 00 00 
30470 398 00 00 00    | 	byte	$00[7]
30473 398 FF FF FF FF 
30477 399 FF FF FF FF 
3047b 39a FF          | 	byte	$ff[9]
3047c 39b 00 00 00 7E 
30480 39c 7E 5A 18 18 
30484 39d 18 18 18 18 
30488 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3048c 39f 1C 36 1C 63 
30490 3a0 63 63 63 63 
30494 3a1 63 63 63 63 
30498 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3049c 3a3 FF FF FF FF 
304a0 3a4 FF FF FF    | 	byte	$ff[7]
304a3 3a4 00 00 00 00 
304a7 3a5 00 00 00 00 
304ab 3a6 00          | 	byte	$00[9]
304ac 3a7 30 18 00 3E 
304b0 3a8 63 63 63 63 
304b4 3a9 63 63 63 63 
304b8 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
304bc 3ab 00 00 00 1E 
304c0 3ac 33 33 33 1B 
304c4 3ad 33 63 63 63 
304c8 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
304cc 3af 1C 36 00 3E 
304d0 3b0 63 63 63 63 
304d4 3b1 63 63 63 63 
304d8 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
304dc 3b3 30 18 00 63 
304e0 3b4 67 6F 7F 7B 
304e4 3b5 73 63 63 63 
304e8 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
304ec 3b7 00 00 60 30 
304f0 3b8 18 00 3B 66 
304f4 3b9 66 66 66 66 
304f8 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
304fc 3bb 00 00 36 1C 
30500 3bc 08 00 3B 66 
30504 3bd 66 66 66 66 
30508 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3050c 3bf 36 1C 00 3E 
30510 3c0 63 63 06 1C 
30514 3c1 30 60 63 63 
30518 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3051c 3c3 00 00 36 1C 
30520 3c4 08 00 3E 63 
30524 3c5 06 1C 30 63 
30528 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3052c 3c7 30 18 00 3F 
30530 3c8 66 66 66 3E 
30534 3c9 36 66 66 66 
30538 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3053c 3cb 30 18 00 63 
30540 3cc 63 63 63 63 
30544 3cd 63 63 63 63 
30548 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3054c 3cf 00 00 60 30 
30550 3d0 18 00 3B 6E 
30554 3d1 66 06 06 06 
30558 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3055c 3d3 66 33 00 63 
30560 3d4 63 63 63 63 
30564 3d5 63 63 63 63 
30568 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3056c 3d7 00 00 60 30 
30570 3d8 18 00 63 63 
30574 3d9 63 63 63 63 
30578 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3057c 3db 30 18 00 66 
30580 3dc 66 66 66 3C 
30584 3dd 18 18 18 18 
30588 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3058c 3df 00 00 00 08 
30590 3e0 0C 0C 3F 0C 
30594 3e1 0C 0C 0C 6C 
30598 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3059c 3e3 30 18 00 00 
305a0 3e4 00 00 00 00 
305a4 3e5 00 00 00 00 
305a8 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
305ac 3e7 00 00 00 00 
305b0 3e8 00 00 00 00 | 	byte	$00[8]
305b4 3e9 7F 00 00 00 
305b8 3ea 00 00 00 00 
305bc 3eb 66 33 00 00 
305c0 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
305c4 3ed 00 00 00 00 
305c8 3ee 00 00 00 00 
305cc 3ef 00 00 00 00 
305d0 3f0 00 00 00 00 
305d4 3f1 00 00 00 00 
305d8 3f2 00          | 	byte	$00[21]
305d9 3f2 0C 06 3C 36 
305dd 3f3 1C 00 00 00 
305e1 3f4 00 00 00 00 
305e5 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
305e9 3f6 00 00 00 63 
305ed 3f7 3E 00 00 00 
305f1 3f8 00 00 00 00 
305f5 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
305f9 3fa 00 00 00 00 
305fd 3fb 3E 63 06 1C 
30601 3fc 36 63 63 36 
30605 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
30609 3fe 00 00 00 00 
3060d 3ff 00 00 00 00 | 	byte	$00[8]
30611 400 18 00 7E 00 
30615 401 18 00 00 00 
30619 402 00 00 00 00 
3061d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30621 404 00 00 00 00 
30625 405 00 00 00 00 | 	byte	$00[8]
30629 406 18 30 1E 00 
3062d 407 00 00 1C 36 
30631 408 36 1C 00 00 
30635 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
30639 40a 00 00 00 00 
3063d 40b 63 00 00 00 
30641 40c 00 00 00 00 
30645 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30649 40e 00 00 00 18 
3064d 40f 18 00 00 00 
30651 410 00 00 00 00 
30655 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30659 412 00 00 00 00 
3065d 413 00          | 	byte	$00[5]
3065e 413 CC 66 33 00 
30662 414 33 33 33 33 
30666 415 33 33 6E 00 
3066a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3066e 417 00 3F 66 66 
30672 418 66 3E 36 66 
30676 419 66 66 6F 00 
3067a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3067e 41b 36 1C 08 00 
30682 41c 3B 6E 66 06 
30686 41d 06 06 0F 00 
3068a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3068e 41f 00 00 00 7E 
30692 420 7E 7E 7E 7E 
30696 421 7E 7E 00 00 
3069a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3069e 423 00 00 00 00 
306a2 424 00 00 00 00 
306a6 425 00 00 00 00 
306aa 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
306ac 427             | 'vga_font       file "vgafont.def"
306ac 427 00 00 00 00 
      ...             
306dc 433 00 00 00 00 
306e0 434 00 00 00    | st_font        file "st4font.def"
306e3 434 FF FF 00 00 
306e7 435 00 00 00 00 
306eb 436 00 18 18 18 
306ef 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
306f3 438 18 18 18 18 
306f7 439 18 18 18 18 
306fb 43a 18          | 	byte	$18[9]
306fc 43b 00 00 00 00 
30700 43c 00 00 00    | 	byte	$00[7]
30703 43c FF FF 18 18 
30707 43d 18 18 18 18 
3070b 43e 18 18 18 18 
3070f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30713 440 FF FF 00 00 
30717 441 00 00 00 00 
3071b 442 00 18 18 18 
3071f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30723 444 1F 1F 18 18 
30727 445 18 18 18 18 
3072b 446 18 18 18 18 
3072f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30733 448 F8 F8 18 18 
30737 449 18 18 18 18 
3073b 44a 18 00 00 00 
3073f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30743 44c 1F 1F 18 18 
30747 44d 18 18 18 18 
3074b 44e 18 00 00 00 
3074f 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30753 450 F8 F8 18 18 
30757 451 18 18 18 18 
3075b 452 18 18 18 18 
3075f 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30763 454 1F 1F 00 00 
30767 455 00 00 00 00 
3076b 456 00 18 18 18 
3076f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30773 458 F8 F8 00 00 
30777 459 00 00 00 00 
3077b 45a 00 18 18 18 
3077f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30783 45c FF FF 18 18 
30787 45d 18 18 18 18 
3078b 45e 18 00 00 18 
3078f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
30793 460 66 7E 7E 66 
30797 461 66 66 66 30 
3079b 462 18 00 00 7E 
3079f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
307a3 464 3E 06 06 06 
307a7 465 06 7E 7E 18 
307ab 466 0C 30 18 3C 
307af 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
307b3 468 06 06 06 66 
307b7 469 66 7E 3C 00 
307bb 46a 00 30 18 66 
307bf 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
307c3 46c 7E 7E 76 76 
307c7 46d 66 66 66 00 
307cb 46e 00 30 18 7C 
307cf 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
307d3 470 1C 38 70 60 
307d7 471 60 7E 3E 00 
307db 472 00 30 18 7E 
307df 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
307e3 474 18 0C 0C 06 
307e7 475 06 7E 7E 00 
307eb 476 00 18 18 00 
307ef 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
307f3 478 18 18 0C 0C 
307f7 479 06 7E 7E 00 
307fb 47a 00 30 18 3C 
307ff 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
30803 47c 66 66 66 66 
30807 47d 66          | 	byte	$66[5]
30808 47e 7E 3C 00 00 
3080c 47f 00 00 06 06 
30810 480 06 06 16 1E 
30814 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
30818 482 7E 7E 00 00 
3081c 483 00 00 00 00 
30820 484 00 3C 7C 60 
30824 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
30828 486 7E 7C 30 18 
3082c 487 00 00 00 00 
30830 488 00 3C 7E 66 
30834 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
30838 48a 7E 7C 18 0C 
3083c 48b 00 00 30 18 
30840 48c 00 3C 3E 06 
30844 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
30848 48e 7E 7C 00 00 
3084c 48f 00 00 30 18 
30850 490 00 3E 7E 66 
30854 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
30858 492 66 66 00 00 
3085c 493 00 00 30 18 
30860 494 00 7C 7E 06 
30864 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
30868 496 7E 3E 00 00 
3086c 497 00 00 30 18 
30870 498 00 7E 7E 30 
30874 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
30878 49a 7E 7E 00 00 
3087c 49b 00 00 18 18 
30880 49c 00 7E 7E 30 
30884 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
30888 49e 7E 7E 00 00 
3088c 49f 00 00 30 18 
30890 4a0 00 3C 7E 66 
30894 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
30898 4a2 7E 3C 00 00 
3089c 4a3 00 00 1C 1C 
308a0 4a4 18 18 38 3C 
308a4 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
308a8 4a6 3C 3C 00 00 
308ac 4a7 00 00 00 00 
308b0 4a8 00 00 00 00 
308b4 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
308b8 4aa 00 00 00 00 
308bc 4ab 00 00       | 	byte	$00[6]
308be 4ab 18 18 18 18 
308c2 4ac 18 18 18 18 | 	byte	$18[8]
308c6 4ad 00 00 18 18 
308ca 4ae 00 00 00 00 
308ce 4af 66 66 66 66 
308d2 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
308d6 4b1 00 00 00 00 
308da 4b2 00 00 00 00 
308de 4b3 00          | 	byte	$00[9]
308df 4b3 66 66 FF FF 
308e3 4b4 66 66 FF FF 
308e7 4b5 66 66 00 00 
308eb 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
308ef 4b7 7C 7E 06 06 
308f3 4b8 3E 7C 60 60 
308f7 4b9 7E 3E 18 18 
308fb 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
308ff 4bb 66 30 30 18 
30903 4bc 18 0C 0C 66 
30907 4bd 66 00 00 00 
3090b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3090f 4bf 66 66 3C 1C 
30913 4c0 1C FC FE 66 
30917 4c1 66 FE FC 00 
3091b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3091f 4c3 18 18 18 18 
30923 4c4 00 00 00 00 
30927 4c5 00 00 00 00 
3092b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3092f 4c7 18 1C 0C 0C 
30933 4c8 0C 0C 0C 0C 
30937 4c9 1C 18 30 00 
3093b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3093f 4cb 18 38 30 30 
30943 4cc 30 30 30 30 
30947 4cd 38 18 0C 00 
3094b 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3094f 4cf 66 66 3C 3C 
30953 4d0 FF FF 3C 3C 
30957 4d1 66 66 00 00 
3095b 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3095f 4d3 00 18 18 18 
30963 4d4 7E 7E 18 18 
30967 4d5 18 00 00 00 
3096b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3096f 4d7 00 00 00 00 
30973 4d8 00 00       | 	byte	$00[6]
30975 4d9 18 18 18 18 
30979 4da 18          | 	byte	$18[5]
3097a 4da 0C 04 00 00 
3097e 4db 00 00 00 00 
30982 4dc 7E 7E 00 00 
30986 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3098a 4de 00 00 00 00 
3098e 4df 00 00 00 00 
30992 4e0 00 00 00 00 
30996 4e1 00          | 	byte	$00[13]
30997 4e1 18 18 18 00 
3099b 4e2 00 00 00 60 
3099f 4e3 60 60 30 30 
309a3 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
309a7 4e5 06 06 06 00 
309ab 4e6 00 00 00 3C 
309af 4e7 7E 66 66 66 
309b3 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
309b7 4e9 66 7E 3C 00 
309bb 4ea 00 00 00 18 
309bf 4eb 18 1C 1C 18 
309c3 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
309c7 4ed 18 7E 7E 00 
309cb 4ee 00 00 00 3C 
309cf 4ef 7E 66 66 30 
309d3 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
309d7 4f1 0C 7E 7E 00 
309db 4f2 00 00 00 7E 
309df 4f3 7E 30 30 18 
309e3 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
309e7 4f5 66 7E 3C 00 
309eb 4f6 00 00 00 30 
309ef 4f7 30 38 38 3C 
309f3 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
309f7 4f9 7E 30 30 00 
309fb 4fa 00 00 00 7E 
309ff 4fb 7E 06 06 3E 
30a03 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
30a07 4fd 66 7E 3C 00 
30a0b 4fe 00 00 00 38 
30a0f 4ff 3C 0E 06 06 
30a13 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
30a17 501 66 7E 3C 00 
30a1b 502 00 00 00 7E 
30a1f 503 7E 60 60 30 
30a23 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
30a27 505 0C 0C 0C 00 
30a2b 506 00 00 00 3C 
30a2f 507 7E 66 66 3C 
30a33 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
30a37 509 66 7E 3C 00 
30a3b 50a 00 00 00 3C 
30a3f 50b 7E 66 66 7E 
30a43 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
30a47 50d 70 3C 1C 00 
30a4b 50e 00 00 00 00 
30a4f 50f 00 00 18 18 
30a53 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
30a57 511 18 18 18 00 
30a5b 512 00 00 00 00 
30a5f 513 00 00 18 18 
30a63 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
30a67 515 18 18 18 0C 
30a6b 516 04 00 00 00 
30a6f 517 70 38 1C 0E 
30a73 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
30a77 519 70 00 00 00 
30a7b 51a 00 00 00 00 
30a7f 51b 00 00 7E 7E 
30a83 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
30a87 51d 00 00 00 00 
30a8b 51e 00 00 00 00 | 	byte	$00[8]
30a8f 51f 0E 1C 38 70 
30a93 520 E0 70 38 1C 
30a97 521 0E 00 00 00 
30a9b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
30a9f 523 7E 66 66 30 
30aa3 524 30 18 18 18 
30aa7 525 00 18 18 00 
30aab 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
30aaf 527 7E 66 66 66 
30ab3 528 66 36 06 66 
30ab7 529 66 7E 3C 00 
30abb 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
30abf 52b 3C 7E 66 66 
30ac3 52c 66 7E 7E 66 
30ac7 52d 66 66 66 00 
30acb 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
30acf 52f 7E 66 66 7E 
30ad3 530 3E 66 66 66 
30ad7 531 66 7E 3E 00 
30adb 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
30adf 533 7E 66 66 06 
30ae3 534 06 06 06 66 
30ae7 535 66 7E 3C 00 
30aeb 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
30aef 537 7E 66 66 66 
30af3 538 66 66 66 66 
30af7 539 66 7E 3E 00 
30afb 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
30aff 53b 7E 06 06 3E 
30b03 53c 3E 06 06 06 
30b07 53d 06 7E 7E 00 
30b0b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
30b0f 53f 7E 06 06 3E 
30b13 540 3E 06 06 06 
30b17 541 06 06 06 00 
30b1b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
30b1f 543 7E 06 06 76 
30b23 544 76 66 66 66 
30b27 545 66 7E 3C 00 
30b2b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
30b2f 547 66 66 66 7E 
30b33 548 7E 66 66 66 
30b37 549 66 66 66 00 
30b3b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
30b3f 54b 7E 18 18 18 
30b43 54c 18 18 18 18 
30b47 54d 18 7E 7E 00 
30b4b 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
30b4f 54f 60 60 60 60 
30b53 550 60 60 60    | 	byte	$60[7]
30b56 551 66 66 7E 3C 
30b5a 552 00 00 00 00 
30b5e 553 66 66 36 36 
30b62 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
30b66 555 66 66 C6 C6 
30b6a 556 00 00 00 00 
30b6e 557 06 06 06 06 
30b72 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
30b76 559 06 06 7E 7E 
30b7a 55a 00 00 00 00 
30b7e 55b C6 C6 EE EE 
30b82 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
30b86 55d C6 C6 C6 C6 
30b8a 55e 00 00 00 00 
30b8e 55f 66 66 66 6E 
30b92 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
30b96 561 76 66 66 66 
30b9a 562 00 00 00 00 
30b9e 563 3C 7E 66 66 
30ba2 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
30ba6 565 66 66 7E 3C 
30baa 566 00 00 00 00 
30bae 567 3E 7E 66 66 
30bb2 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
30bb6 569 06 06 06 06 
30bba 56a 00 00 00 00 
30bbe 56b 3C 7E 66 66 
30bc2 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
30bc6 56d 66 56 3E 6C 
30bca 56e 00 00 00 00 
30bce 56f 3E 7E 66 66 
30bd2 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
30bd6 571 66 66 C6 C6 
30bda 572 00 00 00 00 
30bde 573 7C 7E 06 06 
30be2 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
30be6 575 60 60 7E 3E 
30bea 576 00 00 00 00 
30bee 577 7E 7E 18 18 
30bf2 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
30bf6 579 18 18 18 18 
30bfa 57a 00 00 00 00 
30bfe 57b 66 66 66 66 
30c02 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
30c06 57d 66 66 7E 3C 
30c0a 57e 00 00 00 00 
30c0e 57f 66 66 66 66 
30c12 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
30c16 581 3C 3C 18 18 
30c1a 582 00 00 00 00 
30c1e 583 C6 C6 C6 C6 
30c22 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
30c26 585 FE EE C6 82 
30c2a 586 00 00 00 00 
30c2e 587 66 66 66 3C 
30c32 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
30c36 589 3C 66 66 66 
30c3a 58a 00 00 00 00 
30c3e 58b 66 66 66 66 
30c42 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
30c46 58d 18 18 18 18 
30c4a 58e 00 00 00 00 
30c4e 58f 7E 7E 30 30 
30c52 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
30c56 591 06 06 7E 7E 
30c5a 592 00 00 00 00 
30c5e 593 3C 3C 0C 0C 
30c62 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
30c66 595 0C 0C 3C 3C 
30c6a 596 00 00 00 00 
30c6e 597 06 06 0C 0C 
30c72 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
30c76 599 60 60 C0 C0 
30c7a 59a 00 00 00 00 
30c7e 59b 3C 3C 30 30 
30c82 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
30c86 59d 30 30 3C 3C 
30c8a 59e 00 00 00 00 
30c8e 59f 18 18 3C 3C 
30c92 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
30c96 5a1 00 00 00 00 
30c9a 5a2 00 00 00 00 
30c9e 5a3 00 00 00 00 
30ca2 5a4 00 00 00 00 
30ca6 5a5 00 00       | 	byte	$00[18]
30ca8 5a6 FE FE 00 00 
30cac 5a7 00 00 0C 0C 
30cb0 5a8 18 18 00 00 
30cb4 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
30cb8 5aa 00 00 00 00 
30cbc 5ab 00 00 00 00 
30cc0 5ac 00          | 	byte	$00[9]
30cc1 5ac 3C 7C 60 7C 
30cc5 5ad 7E 66 66 7E 
30cc9 5ae 7C 00 00 00 
30ccd 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
30cd1 5b0 3E 7E 66 66 
30cd5 5b1 66 66 66 7E 
30cd9 5b2 3E 00 00 00 
30cdd 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
30ce1 5b4 3C 3E 06 06 
30ce5 5b5 06 06 06 7E 
30ce9 5b6 7C 00 00 00 
30ced 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
30cf1 5b8 7C 7E 66 66 
30cf5 5b9 66 66 66 7E 
30cf9 5ba 7C 00 00 00 
30cfd 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
30d01 5bc 3C 7E 66 66 
30d05 5bd 7E 06 06 7E 
30d09 5be 7C 00 00 00 
30d0d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
30d11 5c0 18 7E 7E 18 
30d15 5c1 18 18 18 18 
30d19 5c2 18 00 00 00 
30d1d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30d21 5c4 7C 7E 66 66 
30d25 5c5 66 66 7E 7C 
30d29 5c6 60 7E 3E 00 
30d2d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
30d31 5c8 3E 7E 66 66 
30d35 5c9 66 66 66 66 
30d39 5ca 66 00 00 00 
30d3d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
30d41 5cc 1C 1C 18 18 
30d45 5cd 18 18 18 3C 
30d49 5ce 3C 00 00 00 
30d4d 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
30d51 5d0 30 30 30 30 
30d55 5d1 30 30 30 30 
30d59 5d2 30          | 	byte	$30[9]
30d5a 5d2 3E 1E 00 00 
30d5e 5d3 06 06 06 36 
30d62 5d4 36 1E 1E 1E 
30d66 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
30d6a 5d6 00 00 00 00 
30d6e 5d7 1C 1C 18 18 
30d72 5d8 18 18 18 18 
30d76 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
30d7a 5da 00 00 00 00 
30d7e 5db 00 00 00    | 	byte	$00[7]
30d81 5dc 6C FE FE D6 
30d85 5dd D6 C6 C6 C6 
30d89 5de C6 00 00 00 
30d8d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
30d91 5e0 3E 7E 66 66 
30d95 5e1 66 66 66 66 
30d99 5e2 66 00 00 00 
30d9d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
30da1 5e4 3C 7E 66 66 
30da5 5e5 66 66 66 7E 
30da9 5e6 3C 00 00 00 
30dad 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
30db1 5e8 3E 7E 66 66 
30db5 5e9 66 66 66 7E 
30db9 5ea 3E 06 06 00 
30dbd 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
30dc1 5ec 7C 7E 66 66 
30dc5 5ed 66 66 66 7E 
30dc9 5ee 7C 60 60 00 
30dcd 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
30dd1 5f0 3E 7E 66 06 
30dd5 5f1 06 06 06 06 
30dd9 5f2 06 00 00 00 
30ddd 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
30de1 5f4 7C 7E 06 0E 
30de5 5f5 3C 70 60 7E 
30de9 5f6 3E 00 00 00 
30ded 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
30df1 5f8 7E 7E 18 18 
30df5 5f9 18 18 18 78 
30df9 5fa 70 00 00 00 
30dfd 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
30e01 5fc 66 66 66 66 
30e05 5fd 66 66 66    | 	byte	$66[7]
30e08 5fe 7E 7C 00 00 
30e0c 5ff 00 00 00 00 
30e10 600 00 66 66 66 
30e14 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
30e18 602 18 18 00 00 
30e1c 603 00 00 00 00 
30e20 604 00 C6 C6 D6 
30e24 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
30e28 606 C6 82 00 00 
30e2c 607 00 00 00 00 
30e30 608 00 66 66 3C 
30e34 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
30e38 60a 66 66 00 00 
30e3c 60b 00 00 00 00 
30e40 60c 00 66 66 66 
30e44 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
30e48 60e 7C 60 7E 3E 
30e4c 60f 00 00 00 00 
30e50 610 00 7E 7E 30 
30e54 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
30e58 612 7E 7E 00 00 
30e5c 613 00 00 30 18 
30e60 614 18 18 18 0C 
30e64 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
30e68 616 18 30 00 00 
30e6c 617 00 00 18 18 
30e70 618 18 18 18 18 
30e74 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30e78 61a 18 18 00 00 
30e7c 61b 00 00 0C 18 
30e80 61c 18 18 18 30 
30e84 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
30e88 61e 18 0C 00 00 
30e8c 61f 00 00 6C 7E 
30e90 620 36 00 00 00 
30e94 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
30e98 622 00 00 00 00 
30e9c 623 00 00 00 00 
30ea0 624 00          | 	byte	$00[9]
30ea1 624 18 18 18 18 
30ea5 625 18 18 00 00 
30ea9 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
30eac 627             | 'amiga_font     file "amigafont.def"
30eac 627 00 6C FE FE 
30eb0 628 7C 38 10 00 
30eb4 629 18 18 18 F8 
30eb8 62a F8 18 18 18 | a8_font        file "atari8.fnt"
30ebc 62b C0 C0 C0 C0 
30ec0 62c C0 C0 C0 C0 | 	byte	$c0[8]
30ec4 62d 18 18 18 1F 
30ec8 62e 1F 00 00 00 
30ecc 62f 18 18 18 1F 
30ed0 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
30ed4 631 00 00 00 1F 
30ed8 632 1F 18 18 18 
30edc 633 C0 E0 70 38 
30ee0 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
30ee4 635 03 07 0E 1C 
30ee8 636 38 70 E0 C0 
30eec 637 80 C0 E0 F0 
30ef0 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
30ef4 639 00 00 00 00 
30ef8 63a F0 F0 F0 F0 
30efc 63b 01 03 07 0F 
30f00 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
30f04 63d F0 F0 F0 F0 
30f08 63e 00 00 00 00 
30f0c 63f 0F 0F 0F 0F 
30f10 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
30f14 641 FF FF 00 00 
30f18 642 00 00 00 00 
30f1c 643 00 00 00 00 
30f20 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
30f24 645 00 00 00 00 
30f28 646 0F 0F 0F 0F 
30f2c 647 00 38 38 EE 
30f30 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
30f34 649 00 00 00 F8 
30f38 64a F8 18 18 18 
30f3c 64b 00 00 00 FF 
30f40 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
30f44 64d 18 18 18 FF 
30f48 64e FF 18 18 18 
30f4c 64f 00 00 3C 7E 
30f50 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
30f54 651 00 00 00 00 
30f58 652 FF FF FF FF 
30f5c 653 03 03 03 03 
30f60 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
30f64 655 00 00 00 FF 
30f68 656 FF 18 18 18 
30f6c 657 18 18 18 FF 
30f70 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
30f74 659 0F 0F 0F 0F 
30f78 65a 0F 0F 0F 0F | 	byte	$0f[8]
30f7c 65b 18 18 18 F8 
30f80 65c F8 00 00 00 
30f84 65d 1E 06 1E 06 
30f88 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
30f8c 65f 00 18 3C 7E 
30f90 660 18 18 18 00 
30f94 661 00 18 18 18 
30f98 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
30f9c 663 00 18 0C 7E 
30fa0 664 0C 18 00 00 
30fa4 665 00 18 30 7E 
30fa8 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
30fac 667 00 00 00 00 
30fb0 668 00 00 00 00 
30fb4 669 00          | 	byte	$00[9]
30fb5 669 18 18 18 18 
30fb9 66a 00 18 00 00 
30fbd 66b 66 66 66 00 
30fc1 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
30fc5 66d 66 FF 66 66 
30fc9 66e FF 66 00 18 
30fcd 66f 7C 06 3C 60 
30fd1 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
30fd5 671 66 36 18 0C 
30fd9 672 66 62 00 38 
30fdd 673 6C 38 1C F6 
30fe1 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
30fe5 675 18 18 18 00 
30fe9 676 00 00 00 00 
30fed 677 70 38 18 18 
30ff1 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
30ff5 679 0E 1C 18 18 
30ff9 67a 1C 0E 00 00 
30ffd 67b 66 3C FF 3C 
31001 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
31005 67d 18 18 7E 18 
31009 67e 18 00 00 00 
3100d 67f 00 00 00 00 
31011 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
31015 681 00 00 7E 00 
31019 682 00 00 00 00 
3101d 683 00 00 00 00 
31021 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
31025 685 60 30 18 0C 
31029 686 06 02 00 00 
3102d 687 3C 66 76 6E 
31031 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
31035 689 18 1C 18 18 
31039 68a 18 7E 00 00 
3103d 68b 3C 66 30 18 
31041 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
31045 68d 7E 30 18 30 
31049 68e 66 3C 00 00 
3104d 68f 30 38 3C 36 
31051 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
31055 691 7E 06 3E 60 
31059 692 66 3C 00 00 
3105d 693 3C 06 3E 66 
31061 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
31065 695 7E 60 30 18 
31069 696 0C 0C 00 00 
3106d 697 3C 66 3C 66 
31071 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
31075 699 3C 66 7C 60 
31079 69a 30 1C 00 00 
3107d 69b 00 18 18 00 
31081 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
31085 69d 00 18 18 00 
31089 69e 18 18 0C 60 
3108d 69f 30 18 0C 18 
31091 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
31095 6a1 00 7E 00 00 
31099 6a2 7E 00 00 06 
3109d 6a3 0C 18 30 18 
310a1 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
310a5 6a5 3C 66 30 18 
310a9 6a6 00 18 00 00 
310ad 6a7 3C 66 76 76 
310b1 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
310b5 6a9 18 3C 66 66 
310b9 6aa 7E 66 00 00 
310bd 6ab 3E 66 3E 66 
310c1 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
310c5 6ad 3C 66 06 06 
310c9 6ae 66 3C 00 00 
310cd 6af 1E 36 66 66 
310d1 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
310d5 6b1 7E 06 3E 06 
310d9 6b2 06 7E 00 00 
310dd 6b3 7E 06 3E 06 
310e1 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
310e5 6b5 7C 06 06 76 
310e9 6b6 66 7C 00 00 
310ed 6b7 66 66 7E 66 
310f1 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
310f5 6b9 7E 18 18 18 
310f9 6ba 18 7E 00 00 
310fd 6bb 60 60 60 60 
31101 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
31105 6bd 66 36 1E 1E 
31109 6be 36 66 00 00 
3110d 6bf 06 06 06 06 
31111 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
31115 6c1 C6 EE FE D6 
31119 6c2 C6 C6 00 00 
3111d 6c3 66 6E 7E 7E 
31121 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
31125 6c5 3C 66 66 66 
31129 6c6 66 3C 00 00 
3112d 6c7 3E 66 66 3E 
31131 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
31135 6c9 3C 66 66 66 
31139 6ca 36 6C 00 00 
3113d 6cb 3E 66 66 3E 
31141 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
31145 6cd 3C 06 3C 60 
31149 6ce 60 3C 00 00 
3114d 6cf 7E 18 18 18 
31151 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
31155 6d1 66 66 66 66 
31159 6d2 66          | 	byte	$66[5]
3115a 6d2 7E 00 00 66 
3115e 6d3 66 66 66 3C 
31162 6d4 18 00 00 C6 
31166 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3116a 6d6 C6 00 00 66 
3116e 6d7 66 3C 3C 66 
31172 6d8 66 00 00 66 
31176 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3117a 6da 18 00 00 7E 
3117e 6db 30 18 0C 06 
31182 6dc 7E 00 00 78 
31186 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3118a 6de 78 00 00 02 
3118e 6df 06 0C 18 30 
31192 6e0 60 00 00 1E 
31196 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3119a 6e2 1E 00 00 10 
3119e 6e3 38 6C C6 00 
311a2 6e4 00 00 00 00 
311a6 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
311aa 6e6 FF 00 00 18 
311ae 6e7 3C 7E 7E 3C 
311b2 6e8 18 00 00 00 
311b6 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
311ba 6ea 7C 00 00 06 
311be 6eb 06 3E 66 66 
311c2 6ec 3E 00 00 00 
311c6 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
311ca 6ee 3C 00 00 60 
311ce 6ef 60 7C 66 66 
311d2 6f0 7C 00 00 00 
311d6 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
311da 6f2 3C 00 00 70 
311de 6f3 18 7C 18 18 
311e2 6f4 18 00 00 00 
311e6 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
311ea 6f6 60 3E 00 06 
311ee 6f7 06 3E 66 66 
311f2 6f8 66 00 00 18 
311f6 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
311fa 6fa 3C 00 00 60 
311fe 6fb 00 60 60 60 
31202 6fc 60 3C 00 06 
31206 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3120a 6fe 66 00 00 1C 
3120e 6ff 18 18 18 18 
31212 700 3C 00 00 00 
31216 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3121a 702 C6 00 00 00 
3121e 703 3E 66 66 66 
31222 704 66 00 00 00 
31226 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3122a 706 3C 00 00 00 
3122e 707 3E 66 66 3E 
31232 708 06 06 00 00 
31236 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3123a 70a 60 60 00 00 
3123e 70b 3E 66 06 06 
31242 70c 06 00 00 00 
31246 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3124a 70e 3E 00 00 18 
3124e 70f 7E 18 18 18 
31252 710 70 00 00 00 
31256 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3125a 712 7C 00 00 00 
3125e 713 66 66 66 3C 
31262 714 18 00 00 00 
31266 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3126a 716 6C 00 00 00 
3126e 717 66 3C 18 3C 
31272 718 66 00 00 00 
31276 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3127a 71a 30 1E 00 00 
3127e 71b 7E 30 18 0C 
31282 71c 7E 00 00 18 
31286 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3128a 71e 3C 00 18 18 
3128e 71f 18 18 18 18 
31292 720 18 18 00 7E 
31296 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3129a 722 60 00 10 18 
3129e 723 1C 1E 1C 18 
312a2 724 10 00 08 18 
312a6 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
312aa 726 08 00       | 	byte	$08, $00
312ac 727 00 00 00 00 
312b0 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
312b1 728 80 00 00 00 
312b5 729 00 80 00 00 
312b9 72a 80 80 00 00 
312bd 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
312c1 72c 80 00 80 00 
312c5 72d 00 40 80 00 
312c9 72e AA AA AA 00 
312cd 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
312d1 730 FF 00 00 00 
312d5 731 00 FF 00 00 
312d9 732 FF FF 00 00 
312dd 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
312e1 734 FF 00 FF 00 
312e5 735 00 FF FF 00 
312e9 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
312ec 737 00 00 00 00 
312f0 738 00          | ataripalette   file "ataripalettep2.def"
312f1 738 11 11 11 00 
312f5 739 22 22 22 00 
312f9 73a 33 33 33 00 
312fd 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
31301 73c 55 55 55 00 
31305 73d 66 66 66 00 
31309 73e 77 77 77 00 
3130d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
31311 740 99 99 99 00 
31315 741 AA AA AA 00 
31319 742 BB BB BB 00 
3131d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
31321 744 DD DD DD 00 
31325 745 EE EE EE 00 
31329 746 FF FF FF 00 
3132d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
31331 748 00 14 40 00 
31335 749 00 1E 60 00 
31339 74a 00 28 80 00 
3133d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
31341 74c 00 3C BF 00 
31345 74d 00 46 DF 00 
31349 74e 00 50 FF 00 
3134d 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
31351 750 39 77 FF 00 
31355 751 55 8A FF 00 
31359 752 71 9E FF 00 
3135d 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
31361 754 AA C5 FF 00 
31365 755 C6 D8 FF 00 
31369 756 E3 EC FF 00 
3136d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
31371 758 00 00 40 00 
31375 759 00 00 60 00 
31379 75a 00 00 80 00 
3137d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
31381 75c 00 00 BF 00 
31385 75d 00 00 DF 00 
31389 75e 00 00 FF 00 
3138d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
31391 760 39 39 FF 00 
31395 761 55 55 FF 00 
31399 762 71 71 FF 00 
3139d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
313a1 764 AA AA FF 00 
313a5 765 C6 C6 FF 00 
313a9 766 E3 E3 FF 00 
313ad 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
313b1 768 20 00 40 00 
313b5 769 30 00 60 00 
313b9 76a 40 00 80 00 
313bd 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
313c1 76c 60 00 BF 00 
313c5 76d 70 00 DF 00 
313c9 76e 80 00 FF 00 
313cd 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
313d1 770 9C 39 FF 00 
313d5 771 AA 55 FF 00 
313d9 772 B8 71 FF 00 
313dd 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
313e1 774 D5 AA FF 00 
313e5 775 E3 C6 FF 00 
313e9 776 F1 E3 FF 00 
313ed 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
313f1 778 40 00 40 00 
313f5 779 60 00 60 00 
313f9 77a 80 00 80 00 
313fd 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
31401 77c BF 00 BF 00 
31405 77d DF 00 DF 00 
31409 77e FF 00 FF 00 
3140d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
31411 780 FF 39 FF 00 
31415 781 FF 55 FF 00 
31419 782 FF 71 FF 00 
3141d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
31421 784 FF AA FF 00 
31425 785 FF C6 FF 00 
31429 786 FF E3 FF 00 
3142d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
31431 788 40 00 20 00 
31435 789 60 00 30 00 
31439 78a 80 00 40 00 
3143d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
31441 78c BF 00 60 00 
31445 78d DF 00 70 00 
31449 78e FF 00 80 00 
3144d 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
31451 790 FF 39 9C 00 
31455 791 FF 55 AA 00 
31459 792 FF 71 B8 00 
3145d 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
31461 794 FF AA D5 00 
31465 795 FF C6 E3 00 
31469 796 FF E3 F1 00 
3146d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
31471 798 40 00 00 00 
31475 799 60 00 00 00 
31479 79a 80 00 00 00 
3147d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
31481 79c BF 00 00 00 
31485 79d DF 00 00 00 
31489 79e FF 00 00 00 
3148d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
31491 7a0 FF 39 39 00 
31495 7a1 FF 55 55 00 
31499 7a2 FF 71 71 00 
3149d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
314a1 7a4 FF AA AA 00 
314a5 7a5 FF C6 C6 00 
314a9 7a6 FF E3 E3 00 
314ad 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
314b1 7a8 40 10 00 00 
314b5 7a9 60 18 00 00 
314b9 7aa 80 20 00 00 
314bd 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
314c1 7ac BF 30 00 00 
314c5 7ad DF 38 00 00 
314c9 7ae FF 40 00 00 
314cd 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
314d1 7b0 FF 6A 39 00 
314d5 7b1 FF 80 55 00 
314d9 7b2 FF 95 71 00 
314dd 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
314e1 7b4 FF BF AA 00 
314e5 7b5 FF D5 C6 00 
314e9 7b6 FF EA E3 00 
314ed 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
314f1 7b8 40 20 00 00 
314f5 7b9 60 30 00 00 
314f9 7ba 80 40 00 00 
314fd 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
31501 7bc BF 60 00 00 
31505 7bd DF 70 00 00 
31509 7be FF 80 00 00 
3150d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
31511 7c0 FF 9C 39 00 
31515 7c1 FF AA 55 00 
31519 7c2 FF B8 71 00 
3151d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
31521 7c4 FF D5 AA 00 
31525 7c5 FF E3 C6 00 
31529 7c6 FF F1 E3 00 
3152d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
31531 7c8 40 30 00 00 
31535 7c9 60 48 00 00 
31539 7ca 80 60 00 00 
3153d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
31541 7cc BF 90 00 00 
31545 7cd DF A8 00 00 
31549 7ce FF C0 00 00 
3154d 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
31551 7d0 FF CE 39 00 
31555 7d1 FF D5 55 00 
31559 7d2 FF DC 71 00 
3155d 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
31561 7d4 FF EA AA 00 
31565 7d5 FF F1 C6 00 
31569 7d6 FF F8 E3 00 
3156d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
31571 7d8 30 40 00 00 
31575 7d9 48 60 00 00 
31579 7da 60 80 00 00 
3157d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
31581 7dc 90 BF 00 00 
31585 7dd A8 DF 00 00 
31589 7de C0 FF 00 00 
3158d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
31591 7e0 CE FF 39 00 
31595 7e1 D5 FF 55 00 
31599 7e2 DC FF 71 00 
3159d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
315a1 7e4 EA FF AA 00 
315a5 7e5 F1 FF C6 00 
315a9 7e6 F8 FF E3 00 
315ad 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
315b1 7e8 00 40 00 00 
315b5 7e9 00 60 00 00 
315b9 7ea 00 80 00 00 
315bd 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
315c1 7ec 00 BF 00 00 
315c5 7ed 00 DF 00 00 
315c9 7ee 00 FF 00 00 
315cd 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
315d1 7f0 39 FF 39 00 
315d5 7f1 55 FF 55 00 
315d9 7f2 71 FF 71 00 
315dd 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
315e1 7f4 AA FF AA 00 
315e5 7f5 C6 FF C6 00 
315e9 7f6 E3 FF E3 00 
315ed 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
315f1 7f8 00 40 14 00 
315f5 7f9 00 60 1E 00 
315f9 7fa 00 80 28 00 
315fd 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
31601 7fc 00 BF 3C 00 
31605 7fd 00 DF 46 00 
31609 7fe 00 FF 50 00 
3160d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
31611 800 39 FF 77 00 
31615 801 55 FF 8A 00 
31619 802 71 FF 9E 00 
3161d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
31621 804 AA FF C5 00 
31625 805 C6 FF D8 00 
31629 806 E3 FF EC 00 
3162d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
31631 808 00 40 28 00 
31635 809 00 60 3C 00 
31639 80a 00 80 50 00 
3163d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
31641 80c 00 BF 78 00 
31645 80d 00 DF 8C 00 
31649 80e 00 FF A0 00 
3164d 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
31651 810 39 FF B5 00 
31655 811 55 FF C0 00 
31659 812 71 FF CA 00 
3165d 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
31661 814 AA FF DF 00 
31665 815 C6 FF EA 00 
31669 816 E3 FF F4 00 
3166d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
31671 818 00 40 40 00 
31675 819 00 60 60 00 
31679 81a 00 80 80 00 
3167d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
31681 81c 00 BF BF 00 
31685 81d 00 DF DF 00 
31689 81e 00 FF FF 00 
3168d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
31691 820 39 FF FF 00 
31695 821 55 FF FF 00 
31699 822 71 FF FF 00 
3169d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
316a1 824 AA FF FF 00 
316a5 825 C6 FF FF 00 
316a9 826 E3 FF FF 00 
316ad 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
316b1 828 00 28 40 00 
316b5 829 00 3C 60 00 
316b9 82a 00 50 80 00 
316bd 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
316c1 82c 00 78 BF 00 
316c5 82d 00 8C DF 00 
316c9 82e 00 A0 FF 00 
316cd 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
316d1 830 39 B5 FF 00 
316d5 831 55 C0 FF 00 
316d9 832 71 CA FF 00 
316dd 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
316e1 834 AA DF FF 00 
316e5 835 C6 EA FF 00 
316e9 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
316ec 837             | 
316ec 837             | '**********************************************************************************
316ec 837             | '
316ec 837             | '        Timings and colors definitions
316ec 837             | '
316ec 837             | '**********************************************************************************
316ec 837             | 
316ec 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
316ec 837 10 00 00 00 
316f0 838 50 00 00 00 
316f4 839 0C 00 00 00 
316f8 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
316fc 83b 08 00 00 00 
31700 83c 04 00 00 00 
31704 83d 08 00 00 00 
31708 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
3170c 83f 40 02 00 00 
31710 840 6A 8C 15 14 
31714 841 FB 06 B7 01 
31718 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
3171c 843 00 00 00 00 
31720 844 C0 00 00 00 
31724 845 00 00 00 00 
31728 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3172c 847 00 75 C7 97 
31730 848 27 47 F6 0A 
31734 849 05 79 CB 9B 
31738 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3173c 84b             | 
3173c 84b             | ''--------  Initialization  ----------------------------------------------------------------
3173c 84b             | 
3173c 84b 28 0C 64 FD | hdmi            setq    #6
31740 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
31744 84d 28 10 64 FD |                 setq    #8
31748 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3174c 84f             | 
3174c 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
31750 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
31754 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
31758 852 D6 C6 01 F1 |                 add     t1,hbase
3175c 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
31760 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
31764 855 7B 0B 80 5F 
31768 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3176c 857 66 66 86 FF 
31770 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
31774 859             | '
31774 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
31778 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3177c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
31780 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
31784 85d             | 
31784 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
31788 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3178c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
31790 860             | 
31790 860             | ''--------  frame rendering main loop  ---------------------------------------------------
31790 860             | 
31790 860 28 06 64 FD | p101            setq 	#3
31794 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
31798 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3179c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
317a0 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
317a4 865 00 A0 05 F6 |                 mov     dlinum, #0
317a8 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
317ac 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
317b0 868             | 
317b0 868             | 
317b0 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
317b4 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
317b8 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
317bc 86b             |                 
317bc 86b             | 
317bc 86b             | 
317bc 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
317bc 86b             |   
317bc 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
317c0 86c 29 FE 65 3D |          if_nc  setq2   #255
317c4 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
317c8 86e             | 
317c8 86e             | '' -----   up porch (before the picture)
317c8 86e             | 
317c8 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
317cc 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
317d0 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
317d4 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
317d8 872             |  
317d8 872             |    
317d8 872             |  
317d8 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
317dc 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
317e0 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
317e4 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
317e8 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
317ec 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
317f0 878             | 
317f0 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
317f4 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
317f8 87a 48 00 B0 FD | 		call    #dli
317fc 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
31800 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
31804 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
31808 87e             |                 	
31808 87e             |                 
31808 87e             | 
31808 87e             |  
31808 87e             | '' ------- the main screen drawing starts here
31808 87e             | 
31808 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3180c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
31810 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
31814 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
31818 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3181c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
31820 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
31824 885             |               
31824 885             | 
31824 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
31828 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3182c 887             | 
3182c 887             | ' ---------------- All visible lines displayed now, start vblank  
3182c 887             | 
3182c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
31830 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
31834 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
31838 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3183c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
31840 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
31844 88d             | 
31844 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
31844 88d             | 
31844 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
31844 88d             | 
31844 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
31848 88e             | 
31848 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3184c 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
31850 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
31854 891             | 
31854 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
31858 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3185c 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
31860 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
31864 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
31868 896             | 
31868 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3186c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
31870 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
31874 899 70 00 90 AD |     if_z        jmp     #preload
31878 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3187c 89b 94 00 90 AD |     if_z        jmp     #preload2
31880 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
31884 89d 0C 00 90 AD |     if_z        jmp     #p390
31888 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3188c 89f 28 00 90 AD |     if_z        jmp     #p391  
31890 8a0             | 
31890 8a0 2D 00 64 FD | p308            ret
31894 8a1             |    
31894 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
31898 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3189c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
318a0 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
318a4 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
318a8 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
318ac 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
318b0 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
318b4 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
318b8 8aa             |  
318b8 8aa             | '' --------  Reload palette. To do 
318b8 8aa             | 
318b8 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
318bc 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
318c0 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
318c4 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
318c8 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
318cc 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
318d0 8b0 70 FF 9F FD |         	jmp     #dli                
318d4 8b1             |       
318d4 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
318d4 8b1             | 
318d4 8b1             | 
318d4 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
318d4 8b1             | 
318d4 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
318d8 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
318dc 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
318e0 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
318e4 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
318e8 8b6             |         
318e8 8b6             | '' -------------- Preload a line from PSRAM        
318e8 8b6             |         
318e8 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
318ec 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
318f0 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
318f4 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
318f8 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
318fc 8bb             | 
318fc 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
31900 8bc 32 B7 01 F6 |                 mov     buf2,a1024
31904 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
31908 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3190c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
31910 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
31914 8c1             |  
31914 8c1             |  
31914 8c1             | preload2      '  incmod  dlinum,#3
31914 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
31918 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3191c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
31920 8c4 28 02 64 FD |                 setq	#1
31924 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
31928 8c6             |                 
31928 8c6             | 
31928 8c6             | '' -------------- Draw sprites
31928 8c6             | 
31928 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3192c 8c7 10 5C 0E F5 | 		and t8,#16 wz
31930 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
31934 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
31938 8ca             | 		
31938 8ca             | 
31938 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3193c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
31940 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
31944 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
31948 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3194c 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
31950 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
31954 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
31958 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3195c 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
31960 8d4 01 52 86 F1 |                 sub     sprite_h,#1
31964 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
31968 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3196c 8d7             | 
3196c 8d7             | 
3196c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
31970 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
31974 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
31978 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3197c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
31980 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
31984 8dd 00 5E 06 F6 |                 mov 	t9,#0
31988 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3198c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
31990 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
31994 8e1             |      
31994 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
31998 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3199c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
319a0 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
319a4 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
319a8 8e6             |                 
319a8 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
319ac 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
319b0 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
319b4 8e9             |   		
319b4 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
319b8 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
319bc 8eb             | 
319bc 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
319c0 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
319c4 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
319c8 8ee             |  
319c8 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
319cc 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
319d0 8f0 10 00 90 CD |      if_c 	jmp     #p899		
319d4 8f1             | 	
319d4 8f1             | 	
319d4 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
319d8 8f2 28 CD 01 F1 | 		add	t4,sprite_w
319dc 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
319e0 8f4             | 
319e0 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
319e4 8f5             | 
319e4 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
319e8 8f6 01 58 86 F1 | 	 	sub     t6,#1
319ec 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
319f0 8f8             | 
319f0 8f8 28 58 62 FD |                 setq   	t6
319f4 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
319f8 8fa 28 5D 02 F6 |                 mov t8,sprite_w
319fc 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
31a00 8fc 24 00 90 AD |         if_z    jmp #p898
31a04 8fd             |          
31a04 8fd             |         
31a04 8fd 70 5F 06 F6 |                 mov  t9,#368
31a08 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
31a0c 8ff             | 
31a0c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
31a10 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
31a14 901 FF FF 7F FF 
31a18 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
31a1c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
31a20 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
31a24 905 2D 01 00 F5 |                 and 0-0, t7
31a28 906             |                
31a28 906             | 
31a28 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
31a2c 907 E5 E0 7A FA |                 wmlong 368,t3				
31a30 908             |                 
31a30 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
31a34 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
31a38 90a 2D 00 64 FD |                 ret
31a3c 90b             | 	
31a3c 90b             | 	
31a3c 90b             |                
31a3c 90b             |  
31a3c 90b             | '' -------------- Graphics line ------------------------------------------------------------
31a3c 90b             |  
31a3c 90b             | 
31a3c 90b             | '' consts and vars
31a3c 90b             | 
31a3c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
31a40 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
31a44 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
31a48 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
31a4c 90f             | 
31a4c 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
31a50 910             | 
31a50 910             | '------ these longs will be set by setmode function
31a50 910             | 
31a50 910 00 00 00 00 | m_bs            long    0        'blanks before sync
31a54 911 00 00 00 00 | m_sn            long    0        'sync
31a58 912 00 00 00 00 | m_bv            long    0        'blanks before visible
31a5c 913 00 00 00 00 | m_vi            long    0        'visible pixels #
31a60 914             | 'm_border        long    0        'left/right borders
31a60 914 00 00 00 00 | i_upporch       long    0        'up porch lines
31a64 915 00 00 00 00 | i_vsync         long    0        'vsync lines
31a68 916 00 00 00 00 | i_downporch     long    0        'down porch lines
31a6c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
31a70 918 00 00 00 00 | i_totalvis      long    0
31a74 919             | 
31a74 919             | '-------------------------------------
31a74 919             |  
31a74 919 00 00 00 00 | linenum         long    0
31a78 91a 00 00 00 00 | frames          long    0
31a7c 91b 00 00 00 00 | dlinum long 0
31a80 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
31a84 91d             | 
31a84 91d 00 00 00 00 | vblankptr       long    0
31a88 91e 00 00 00 00 | modeptr         long    0
31a8c 91f 00 00 00 00 | paletteptr      long    0
31a90 920 00 00 00 00 | dlptr           long    0
31a94 921 01 00 00 00 | hbase           long    1
31a98 922 00 00 00 00 | mailbox         long    0
31a9c 923 00 00 00 00 | spriteptr          long 0
31aa0 924             | 
31aa0 924 00 00 00 00 | cmd             long    0
31aa4 925 00 B0 07 00 | buf1            long    $80000-16384-4096
31aa8 926 00 04 00 00 | buf2            long    1024
31aac 927 01 00 00 00 | dlptr2          long    1
31ab0 928 01 00 00 00 | dl              long    1
31ab4 929             | 
31ab4 929 00 00 00 00 | buf1c long 0
31ab8 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
31abc 92b 01 00 00 00 | framebuf2       long    1
31ac0 92c 01 00 00 00 | hsync0          long    1
31ac4 92d 01 00 00 00 | hsync1          long    1
31ac8 92e             | 
31ac8 92e 01 00 00 00 | t1              long    1
31acc 92f 00 00 00 00 | t2 long 0
31ad0 930 00 00 00 00 | t3 long 0
31ad4 931 00 00 00 00 | t4 long 0
31ad8 932             | 
31ad8 932 00 00 00 00 | rcnt            long    0  'dl repeat count
31adc 933 00 00 00 00 | rcnt2           long    0
31ae0 934 00 00 00 00 | rcnt2a          long    0
31ae4 935 00 00 00 00 | roffset         long    0
31ae8 936 00 00 00 00 | rdl             long    0  'dl repeat line
31aec 937 00 00 00 00 | dlc             long    0  'dl command
31af0 938             | 
31af0 938 FF FF FF FF | affffffff       long    $ffffffff
31af4 939 00 00 00 00 | sprite1pointer long 0
31af8 93a 00 00 00 00 | sprite1xy      long 0
31afc 93b 00 00 00 00 | sprite1wh      long 0
31b00 93c 00 00 00 00 | sprite2pointer long 0
31b04 93d 00 00 00 00 | sprite2xy      long 0
31b08 93e 00 00 00 00 | sprite2wh      long 0
31b0c 93f 00 00 00 00 | sprite3pointer long 0
31b10 940 00 00 00 00 | sprite3xy      long 0
31b14 941 00 00 00 00 | sprite3wh      long 0
31b18 942 00 00 00 00 | sprite4pointer long 0
31b1c 943 00 00 00 00 | sprite4xy      long 0
31b20 944 00 00 00 00 | sprite4wh      long 0
31b24 945 00 00 00 00 | sprite5pointer long 0
31b28 946 00 00 00 00 | sprite5xy      long 0
31b2c 947 00 00 00 00 | sprite5wh      long 0
31b30 948 00 00 00 00 | sprite6pointer long 0
31b34 949 00 00 00 00 | sprite6xy      long 0
31b38 94a 00 00 00 00 | sprite6wh      long 0
31b3c 94b 00 00 00 00 | sprite7pointer long 0
31b40 94c 00 00 00 00 | sprite7xy      long 0
31b44 94d 00 00 00 00 | sprite7wh      long 0
31b48 94e 00 00 00 00 | sprite8pointer long 0
31b4c 94f 00 00 00 00 | sprite8xy      long 0
31b50 950 00 00 00 00 | sprite8wh      long 0
31b54 951 00 00 00 00 | sprite9pointer long 0
31b58 952 00 00 00 00 | sprite9xy      long 0
31b5c 953 00 00 00 00 | sprite9wh      long 0
31b60 954 00 00 00 00 | sprite10pointer long 0
31b64 955 00 00 00 00 | sprite10xy      long 0
31b68 956 00 00 00 00 | sprite10wh      long 0
31b6c 957 00 00 00 00 | sprite11pointer long 0
31b70 958 00 00 00 00 | sprite11xy      long 0
31b74 959 00 00 00 00 | sprite11wh      long 0
31b78 95a 00 00 00 00 | sprite12pointer long 0
31b7c 95b 00 00 00 00 | sprite12xy      long 0
31b80 95c 00 00 00 00 | sprite12wh      long 0
31b84 95d 00 00 00 00 | sprite13pointer long 0
31b88 95e 00 00 00 00 | sprite13xy      long 0
31b8c 95f 00 00 00 00 | sprite13wh      long 0
31b90 960 00 00 00 00 | sprite14pointer long 0
31b94 961 00 00 00 00 | sprite14xy      long 0
31b98 962 00 00 00 00 | sprite14wh      long 0
31b9c 963 00 00 00 00 | sprite15pointer long 0
31ba0 964 00 00 00 00 | sprite15xy      long 0
31ba4 965 00 00 00 00 | sprite15wh      long 0
31ba8 966 00 00 00 00 | sprite16pointer long 0
31bac 967 00 00 00 00 | sprite16xy      long 0
31bb0 968 00 00 00 00 | sprite16wh      long 0
31bb4 969 00 00 00 00 | sprite17pointer long 0
31bb8 96a 00 00 00 00 | sprite17xy      long 0
31bbc 96b 00 00 00 00 | sprite17wh      long 0
31bc0 96c 00 00 00 00 | sprite18pointer long 0
31bc4 96d 00 00 00 00 | sprite18xy      long 0
31bc8 96e 00 00 00 00 | sprite18wh      long 0
31bcc 96f 00 00 00 00 | spritenum long 0
31bd0 970             | 
31bd0 970 00 00 00 00 | spriteline long 0
31bd4 971 84 03 00 00 | sprite_x long 900
31bd8 972 00 00 00 00 | sprite_y long 0
31bdc 973 10 00 00 00 | sprite_w long 16
31be0 974 40 00 00 00 | sprite_h long 64
31be4 975 00 00 00 00 | l2 long 0
31be8 976 00 00 00 00 | t5 long 0
31bec 977 00 00 00 00 | t6 long 0
31bf0 978 00 00 00 00 | t7 long 0
31bf4 979 00 00 00 00 | t8 long 0
31bf8 97a 00 00 00 00 | t9 long 0
31bfc 97b 00 00 00 00 | preloadaddr long 0
31c00 97c 00 00 00 00 | preloadlineaddr long 0
31c04 97d 00 04 00 00 | a1024 long 1024
31c08 97e             | 
31c08 97e E0 03 00 00 | aa long 992
31c0c 97f FF 03 00 00 | a1023 long 1023
31c10 980 00 10 00 00 | a4096 long 4096
31c14 981             |  fit 368
31c14 981             | _psram_spin2_dat_
31c14 981 00 00 00 00 
      ...             
31d0c 9bf 00 00 00 00 
31d10 9c0 00 00 00 00 |     listdata long 0[8*8]
31d14 9c1             |             orgh
31d14                 | 
31d14                 | ' driver state
31d14     FF FF FF FF | drivercog   long    -1  ' COG id of driver
31d18     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
31d1c                 | 
31d1c                 | ' delay profile
31d1c     07 00 00 00 
31d20     00 CF 7B 05 
31d24     80 D1 F0 08 
31d28     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
31d2c     80 C4 60 0F 
31d30     80 39 7A 12 
31d34     40 2D D9 13 
31d38     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
31d3c                 | 
31d3c                 | ' data to be passed to driver when starting it
31d3c                 | startupData
31d3c     00 00 00 00 |     long    0           ' current frequency
31d40     00 00 00 00 |     long    FLAGS       ' optional flags for driver
31d44     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
31d48     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
31d4c     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
31d50     5C 1D 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
31d54     DC 1D 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
31d58     FC 1D 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
31d5c                 | 
31d5c                 | ' data for memory
31d5c                 | deviceData
31d5c                 |     ' 16 bank parameters follow (16MB per bank)
31d5c     00 00 00 00 
      ...             
31d94     00 00 00 00 
31d98     00 00 00 00 |     long    0[16]                               ' banks 0-15
31d9c                 |     ' 16 banks of pin parameters follow
31d9c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
31da0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
31da4     FF FF FF FF 
      ...             
31dd4     FF FF FF FF 
31dd8     FF FF FF FF |     long    -1[14]                              ' banks 2-15
31ddc                 | 
31ddc                 | ' data for COG polling
31ddc                 | qosData 
31ddc     00 00 FF FF 
31de0     00 00 FF FF 
31de4     00 00 FF FF 
31de8     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
31dec     00 00 FF FF 
31df0     00 00 FF FF 
31df4     00 00 FF FF 
31df8     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
31dfc                 |     
31dfc                 | ' mailbox storage
31dfc                 | 
31dfc                 | mailboxes
31dfc     00 00 00 00 
      ...             
31e54     00 00 00 00 
31e58     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
31e5c                 | 	alignl
31e5c                 | _psram16drv_spin2_dat_
31e5c                 |                             orgh
31e5c     00 00 00 00 
      ...             
31e74     00 00 00 00 
31e78     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
31e7c                 | 
31e7c                 | driver_start
31e7c                 |                             org
31e7c 000             | '..................................................................................................
31e7c 000             | ' Memory layout for COG RAM once operational:
31e7c 000             | '
31e7c 000             | '  COG RAM address      Usage
31e7c 000             | '  ---------------      ----
31e7c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
31e7c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
31e7c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
31e7c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
31e7c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
31e7c 000             | '  ~$198-$1F3           State and register variables
31e7c 000             | '
31e7c 000             | ' Also during driver COG startup:
31e7c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
31e7c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
31e7c 000             | '..................................................................................................
31e7c 000             |                             
31e7c 000             | ' Mailbox storage after vector initialization
31e7c 000             | 
31e7c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
31e80 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
31e84 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
31e88 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
31e8c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
31e90 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
31e94 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
31e98 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
31e9c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
31ea0 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
31ea4 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
31ea8 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
31eac 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
31eb0 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
31eb4 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
31eb8 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
31ebc 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
31ec0 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
31ec4 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
31ec8 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
31ecc 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
31ed0 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
31ed4 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
31ed8 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
31edc 018             | 
31edc 018             | ' Mailbox parameter addresses per COG once patched
31edc 018             |                             
31edc 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
31ee0 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
31ee4 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
31ee8 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
31eec 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
31ef0 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
31ef4 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
31ef8 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
31efc 020             | 
31efc 020             | '..................................................................................................
31efc 020             | ' Per COG request and state setup and service branching
31efc 020             |         
31efc 020             | cog0                 
31efc 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
31f00 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
31f04 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
31f08 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
31f0c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31f10 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31f14 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
31f18 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
31f1c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
31f20 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31f24 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31f28 02b 33 CA 63 FD |                             execf   request-0               'jump to service
31f2c 02c             | cog1                        
31f2c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
31f30 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
31f34 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
31f38 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
31f3c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31f40 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31f44 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
31f48 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
31f4c 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
31f50 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31f54 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31f58 037 33 CA 63 FD |                             execf   request-0               'jump to service
31f5c 038             | cog2                         
31f5c 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
31f60 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
31f64 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
31f68 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
31f6c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31f70 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31f74 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
31f78 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
31f7c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
31f80 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31f84 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31f88 043 33 CA 63 FD |                             execf   request-0               'jump to service
31f8c 044             | cog3                        
31f8c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
31f90 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
31f94 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
31f98 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
31f9c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31fa0 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31fa4 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
31fa8 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
31fac 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
31fb0 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31fb4 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31fb8 04f 33 CA 63 FD |                             execf   request-0               'jump to service
31fbc 050             | cog4                        
31fbc 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
31fc0 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
31fc4 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
31fc8 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
31fcc 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31fd0 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31fd4 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
31fd8 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
31fdc 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
31fe0 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31fe4 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31fe8 05b 33 CA 63 FD |                             execf   request-0               'jump to service
31fec 05c             | cog5                        
31fec 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
31ff0 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
31ff4 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
31ff8 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
31ffc 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32000 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32004 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
32008 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3200c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
32010 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32014 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32018 067 33 CA 63 FD |                             execf   request-0               'jump to service
3201c 068             | cog6                        
3201c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
32020 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
32024 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
32028 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3202c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32030 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32034 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
32038 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3203c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
32040 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32044 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32048 073 33 CA 63 FD |                             execf   request-0               'jump to service
3204c 074             | cog7                        
3204c 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
32050 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
32054 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
32058 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3205c 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32060 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32064 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
32068 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3206c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
32070 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32074 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32078 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3207c 080             |                             fit     128
3207c 080             | 
3207c 080             |                             fit     128
3207c 080             | pad                         long    0[128-$]                'align init code to $80
3207c 080             | 
3207c 080             | '..................................................................................................
3207c 080             | 
3207c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3207c 080             | 
3207c 080             | init                        
3207c 080             |                             ' get driver scratch long address in hub
3207c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
32080 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
32084 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
32088 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3208c 084             |                     
3208c 084             |                             ' read in the additional LUT RAM code
3208c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
32090 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
32094 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
32098 087             | 
32098 087             |                             ' read the startup parameters
32098 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3209c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
320a0 089             | 
320a0 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
320a0 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
320a4 08a             | 
320a4 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
320a8 08b 01 00 00 5F 
320ac 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
320b0 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
320b4 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
320b8 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
320bc 090             | 
320bc 090             |                             ' setup data pin modes and data bus pin group in streamer commands
320bc 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
320c0 091 01 00 00 FF 
320c4 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
320c8 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
320cc 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
320d0 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
320d4 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
320d8 097 08 DE 47 F5 |                             or      a, #8
320dc 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
320e0 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
320e4 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
320e8 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
320ec 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
320f0 09d 01 DE 07 F1 |                             add     a, #1
320f4 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
320f8 09f             |  
320f8 09f             |                             ' setup device control pin states
320f8 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
320fc 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
32100 0a1 01 00 00 FF 
32104 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
32108 0a3             | 
32108 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3210c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
32110 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
32114 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
32118 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3211c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
32120 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
32124 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
32128 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3212c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
32130 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
32134 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
32138 0af             | pinloop
32138 0af             |                             ' generate minimum CE high time before access
32138 0af A1 07 00 FF 
3213c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
32140 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
32144 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
32148 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3214c 0b4 1F DE 63 FD |                             waitx   a                       'delay
32150 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
32154 0b6             | 
32154 0b6             |                             ' setup the COG mailboxes and addresses 
32154 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
32158 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3215c 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
32160 0b9             | 
32160 0b9 28 2E 64 FD |                             setq    #24-1
32164 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
32168 0bb             | 
32168 0bb             |                             ' setup the polling loop for active COGs 
32168 0bb 01 C2 63 FD |                             cogid   id
3216c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
32170 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
32174 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
32178 0bf 0A F0 07 F6 |                             mov     ptra, #10
3217c 0c0 E1 F1 03 FA |                             mul     ptra, id
32180 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
32184 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
32188 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3218c 0c4 03 C2 07 FA |                             mul     id, #3
32190 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
32194 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
32198 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3219c 0c8 D8 01 B0 FD |                             call    #reloadcogs
321a0 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
321a4 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
321a8 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
321a8 0cb D8 E5 B7 F9 |                             setd    d, #addr1
321ac 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
321b0 0cd 08 04 DC FC |                             rep     #2, #8
321b4 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
321b8 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
321bc 0d0             | 
321bc 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
321bc 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
321bc 0d0 01 C2 63 FD |                             cogid   id
321c0 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
321c4 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
321c8 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
321cc 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
321d0 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
321d4 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
321d8 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
321dc 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
321e0 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
321e4 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
321e8 0db 3F E4 A7 F9 |                             alti    d, #%111_111
321ec 0dc 00 00 00 F6 |                             mov     0-0, 0-0
321f0 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
321f4 0de A5 E5 03 F1 |                             add     d, const512
321f8 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
321fc 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
32200 0e1 00 00 00 F6 |                             mov     0-0, 0-0
32204 0e2             |                             
32204 0e2             |                             ' setup register values for control vector loop setup after we return
32204 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
32208 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3220c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
32210 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
32214 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
32218 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3221c 0e8 D0 C3 8F F9 |                             altd    id, #id0
32220 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
32224 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
32228 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3222c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
32230 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
32234 0ee             |  
32234 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
32238 0ef 07 CA 07 F5 |                             and     request, #7
3223c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
32240 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
32244 0f2             |                             fit     $100                    'ensure all init code fits this space
32244 0f2             | 
32244 0f2             |                             fit     $100                    'ensure all init code fits this space
32244 0f2             | 
32244 0f2 00 00 00 00 
      ...             
32274 0fe 00 00 00 00 
32278 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3227c 100             | 
3227c 100             | '..................................................................................................
3227c 100             | ' Error result handling and COG notification of request completion
3227c 100             | 
3227c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
32280 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
32284 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
32288 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3228c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
32290 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
32294 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
32298 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3229c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
322a0 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
322a4 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
322a8 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
322ac 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
322b0 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
322b4 10e             | ' Poller re-starts here after a COG is serviced
322b4 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
322b8 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
322bc 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
322c0 111             | ' Main dynamic polling loop repeats until a request arrives
322c0 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
322c4 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
322c8 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
322cc 114             | 
322cc 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
322d0 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
322d4 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
322d8 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
322dc 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
322e0 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
322e4 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
322e8 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
322ec 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
322f0 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
322f4 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
322f8 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
322fc 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
32300 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
32304 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
32308 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3230c 124             | 
3230c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
32310 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
32314 126             |  
32314 126             | '..................................................................................................
32314 126             | ' List handler                               
32314 126             | 
32314 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
32318 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3231c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
32320 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
32324 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
32328 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3232c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
32330 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
32334 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
32338 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3233c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
32340 131 33 00 60 FD |                             execf   0-0                     'process the request 
32344 132             | 
32344 132             | '..................................................................................................
32344 132             | ' Restoring per COG state and resuming where we left off
32344 132             | 
32344 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
32348 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3234c 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
32350 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
32354 136 D8 CB FB F8 |                             getbyte request, addr1, #3
32358 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3235c 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
32360 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
32364 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
32368 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3236c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
32370 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
32374 13e             |                    
32374 13e             | '..................................................................................................
32374 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
32374 13e             | 
32374 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
32378 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3237c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
32380 141 D0 DF B7 F9 |                             setd    a, #id0
32384 142 D8 DF BF F9 |                             sets    a, #addr1
32388 143 FE FF FF FF 
3238c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
32390 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
32394 146 3F DE A7 F9 |                             alti    a, #%111_111 
32398 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3239c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
323a0 149 01 E2 63 FD |                             cogid   c
323a4 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
323a8 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
323ac 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
323b0 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
323b4 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
323b8 14f 00 E0 03 F6 |                             mov     b, 0-0
323bc 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
323c0 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
323c4 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
323c8 153 0C 00 90 AD |             if_z            jmp     #excluded               
323cc 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
323d0 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
323d4 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
323d8 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
323dc 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
323e0 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
323e4 15a             | 
323e4 15a             | 'determine priority cogs and build instructions for the polling sequence
323e4 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
323e8 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
323ec 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
323f0 15d             | 
323f0 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
323f4 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
323f8 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
323fc 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
32400 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
32404 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
32408 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3240c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
32410 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
32414 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
32418 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3241c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
32420 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
32424 16a             | endprioloop
32424 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
32428 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3242c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
32430 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
32434 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
32438 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3243c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
32440 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
32444 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
32448 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3244c 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
32450 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
32454 176             | 
32454 176             | ' populate the round robin COG polling instructions
32454 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
32458 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3245c 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
32460 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
32464 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
32468 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3246c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
32470 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
32474 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
32478 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3247c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
32480 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
32484 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
32488 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3248c 184             | '..................................................................................................
3248c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3248c 184             | 
3248c 184             | set_latency                                                 '            (a) set latency
3248c 184             | get_latency                                                 '            (b) get latency
3248c 184             | set_burst                                                   '            (c) set burst size of bank
3248c 184             | get_burst                                                   '            (d) get burst size of bank
3248c 184             |                                                             '            (e) dump state
3248c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
32490 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
32494 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
32498 187             |                                                             ' | | | | e  account for following AUGS
32498 187 04 00 00 FF 
3249c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
324a0 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
324a4 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
324a8 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
324ac 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
324b0 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
324b4 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
324b8 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
324bc 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
324c0 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
324c4 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
324c8 193             | 
324c8 193             | '..................................................................................................
324c8 193             | ' Misc EXECF code
324c8 193             | 
324c8 193 33 72 63 FD | start_read_exec             execf   newburstr
324cc 194 33 7C 63 FD | start_write_exec            execf   resumewrites
324d0 195 33 78 63 FD | continue_read_exec          execf   lockedreads
324d4 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
324d8 197             | 
324d8 197             | '..................................................................................................
324d8 197             | ' Variables
324d8 197             | 
324d8 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
324dc 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
324e0 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
324e4 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
324e8 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
324ec 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
324f0 19d             | 
324f0 19d 00 00 00 80 | xfreq1          long    $80000000
324f4 19e 00 00 00 40 | xfreq2          long    $40000000
324f8 19f 03 00 00 00 | delay           long    3
324fc 1a0             | 
324fc 1a0             | lutcodeaddr                 
324fc 1a0             | startupparams
324fc 1a0             | excludedcogs                                    'careful: shared register use!
324fc 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
32500 1a1 00 00 00 00 | flags           long    0
32504 1a2             | mask                                            'careful: shared register use!
32504 1a2 00 00 00 00 | resetmaskA      long    0
32508 1a3             | limit                                           'careful: shared register use!
32508 1a3 00 00 00 00 | resetmaskB      long    0
3250c 1a4 00 00 00 00 | datapins        long    0
32510 1a5             | const512                                        'careful: shared register use!
32510 1a5 00 00 00 00 | devicelist      long    0
32514 1a6 00 00 00 00 | coglist         long    0
32518 1a7 00 00 00 00 | mbox            long    0 
3251c 1a8             | 
3251c 1a8             | clkpin                                          'shared with code patched during init
3251c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
32520 1a9             | cspin                                           'shared with code patched during init
32520 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
32524 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
32528 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3252c 1ac 01 00 00 00 | clkdelay        long    1
32530 1ad 00 00 00 00 | regdatabus      long    0
32534 1ae             | 
32534 1ae 10 00 00 00 | deviceaddr      long    $10
32538 1af             | rrcounter
32538 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3253c 1b0             | 
3253c 1b0             | ' jump addresses for the per COG handlers
3253c 1b0 20 00 00 00 | cog0_handler    long    cog0
32540 1b1 2C 00 00 00 | cog1_handler    long    cog1
32544 1b2 38 00 00 00 | cog2_handler    long    cog2
32548 1b3 44 00 00 00 | cog3_handler    long    cog3
3254c 1b4 50 00 00 00 | cog4_handler    long    cog4
32550 1b5 5C 00 00 00 | cog5_handler    long    cog5
32554 1b6 68 00 00 00 | cog6_handler    long    cog6
32558 1b7 74 00 00 00 | cog7_handler    long    cog7
3255c 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
32560 1b9             | 
32560 1b9             | ' EXECF sequences
32560 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
32564 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
32568 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3256c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
32570 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
32574 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
32578 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3257c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3257c 1c0             | 
3257c 1c0             | 
3257c 1c0             | ' SKIPF sequences
3257c 1c0             | skiptable
3257c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
32580 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
32584 1c2 00 00 00 00 |                 long    0                      ' read modify write long
32588 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3258c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
32590 1c5 00 00 00 00 | pattern2        long    0
32594 1c6 00 00 00 00 | pattern3        long    0
32598 1c7 77 02 00 00 | singlelong      long    %1001110111  
3259c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
325a0 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
325a4 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
325a8 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
325ac 1cc             | 
325ac 1cc             | ' LUT RAM address values
325ac 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
325b0 1cd DD 02 00 00 | continue_read   long    continue_read_lut
325b4 1ce DB 02 00 00 | continue_write  long    continue_write_lut
325b8 1cf F6 02 00 00 | noread          long    noread_lut
325bc 1d0             | 
325bc 1d0 00 00 00 00 | id0             long    0
325c0 1d1 01 00 00 00 | id1             long    1
325c4 1d2 02 00 00 00 | id2             long    2
325c8 1d3 03 00 00 00 | id3             long    3
325cc 1d4 04 00 00 00 | id4             long    4
325d0 1d5 05 00 00 00 | id5             long    5
325d4 1d6 06 00 00 00 | id6             long    6
325d8 1d7 07 00 00 00 | id7             long    7
325dc 1d8             | 
325dc 1d8             | 'These next 10 request registers below are also temporarily reused during init 
325dc 1d8             | 'and COG updates and need to follow immediately after id0-id7
325dc 1d8 00 00 00 00 | addr1           long    0
325e0 1d9 00 00 00 00 | hubdata         long    0
325e4 1da 00 00 00 00 | count           long    0
325e8 1db 00 00 00 00 | addr2           long    0
325ec 1dc 00 00 00 00 | total           long    0
325f0 1dd 00 00 00 00 | offset1         long    0
325f4 1de 00 00 00 00 | offset2         long    0
325f8 1df 00 00 00 00 | link            long    0
325fc 1e0             | 
325fc 1e0             | burstwrite                                      'note shared register use during init
325fc 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
32600 1e1 00 00 00 00 | id              long    0
32604 1e2             | 
32604 1e2 00 00 00 00 | header          long    0
32608 1e3 00 00 00 00 | trailer         long    0
3260c 1e4 00 00 00 00 | cmdaddr         long    0
32610 1e5 00 00 00 00 | request         long    0
32614 1e6 00 00 00 00 | rrlimit         long    0
32618 1e7 00 00 00 00 | pinconfig       long    0
3261c 1e8 00 00 00 00 | clks            long    0
32620 1e9 00 00 00 00 | resume          long    0
32624 1ea 00 00 00 00 | orighubsize     long    0
32628 1eb 00 00 00 00 | wrclks          long    0
3262c 1ec             | 
3262c 1ec 00 00 00 00 | pattern         long    0
32630 1ed 00 00 00 00 | hubscratch      long    0
32634 1ee 00 10 00 00 | val4k           long    4096
32638 1ef             | 
32638 1ef             | ' temporary general purpose regs
32638 1ef 00 00 00 00 | a               long    0
3263c 1f0 00 00 00 00 | b               long    0
32640 1f1 00 00 00 00 | c               long    0
32644 1f2 00 00 00 00 | d               long    0
32648 1f3             |                 fit     502
32648 1f3             | 
32648 1f3             |                 fit     502
32648 1f3             | 
32648 1f3             | '..................................................................................................
32648 1f3             | 
32648 1f3             |             orgh
32648                 | 
32648                 | lut_code
32648                 | 'HW init code up to 80 longs
32648                 | 
32648                 | '..................................................................................................
32648                 | ' Memory layout for LUT RAM once operational:
32648                 | '
32648                 | '  LUT RAM address      Usage
32648                 | '  ---------------      ----
32648                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
32648                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
32648                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
32648                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
32648                 | '
32648                 | ' Also during driver COG startup:
32648                 | ' $230-$24F is used for HW init setup
32648                 | ' $250-$26F is used as temporary vector storage 
32648                 | '..................................................................................................
32648                 | 
32648                 |                 org $230    
32648 230             | 
32648 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
32648 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3264c 231 24 16 60 FD |                             pollxfi
32650 232 FF AA 2A FF 
32654 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
32658 234 28 00 B0 FD |                             call    #sendqspi
3265c 235 07 F8 07 FF 
32660 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
32664 237 28 00 B0 FD |                             call    #sendspi
32668 238 F8 07 78 FF 
3266c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
32670 23a 1C 00 B0 FD |                             call    #sendspi
32674 23b 7F 78 78 FF 
32678 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3267c 23d 10 00 B0 FD |                             call    #sendspi 
32680 23e 2D 00 64 FD |                             ret
32684 23f             | 
32684 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
32688 240 32 0C 64 FD |                             skipf   #%110
3268c 241 9C EF 03 F6 |                             mov     pb, xsendimm
32690 242             | 
32690 242 10 D0 07 F6 | sendspi                     mov     clks, #16
32694 243 97 EF 03 F6 |                             mov     pb, ximm8lut
32698 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3269c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
326a0 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
326a4 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
326a8 248 24 36 60 FD |                             waitxfi                         'wait for the completion
326ac 249 50 48 63 FD |                             fltl    datapins                'float data bus
326b0 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
326b4 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
326b8 24c             | 
326b8 24c 00 00 00 00 
326bc 24d 00 00 00 00 
326c0 24e 00 00 00 00 
326c4 24f 00 00 00 00 |                 long    0[$270-32-$]
326c8 250             |                 fit     $270-32  ' keep room for 32 vector longs
326c8 250             |     
326c8 250             |                 fit     $270-32  ' keep room for 32 vector longs
326c8 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
326c8 250             | rw_vect ' PSRAM jump vectors
326c8 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
326cc 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
326d0 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
326d4 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
326d8 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
326dc 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
326e0 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
326e4 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
326e8 258             | ro_vect ' R/O PSRAM jump vectors
326e8 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
326ec 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
326f0 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
326f4 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
326f8 25c 00 01 00 00 |                 long    unsupported
326fc 25d 00 01 00 00 |                 long    unsupported
32700 25e 00 01 00 00 |                 long    unsupported
32704 25f 00 01 00 00 |                 long    unsupported
32708 260             | ctrl_vect ' Control jump vectors
32708 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3270c 261 00 01 00 00 |                 long    unsupported
32710 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
32714 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
32718 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3271c 265 00 01 00 00 |                 long    unsupported
32720 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
32724 267 3E 01 00 00 |                 long    reconfig 
32728 268             | no_vect ' Invalid bank jump vectors
32728 268 01 01 00 00 |                 long    invalidbank
3272c 269 01 01 00 00 |                 long    invalidbank
32730 26a 01 01 00 00 |                 long    invalidbank
32734 26b 01 01 00 00 |                 long    invalidbank
32738 26c 01 01 00 00 |                 long    invalidbank
3273c 26d 01 01 00 00 |                 long    invalidbank
32740 26e 01 01 00 00 |                 long    invalidbank
32744 26f 01 01 00 00 |                 long    invalidbank
32748 270             |                 fit     $270
32748 270             | 
32748 270             |                 fit     $270
32748 270             | '..................................................................................................
32748 270             | ' PSRAM READS
32748 270             |                                                             ' a b c d e f
32748 270             |                                                             ' B W L B R L  (a) byte read
32748 270             |                                                             ' Y O O U E O  (b) word read
32748 270             |                                                             ' T R N R S C  (c) long read
32748 270             |                                                             ' E D G S U K  (d) new burst read
32748 270             |                                                             '       T M E  (e) resumed sub-burst
32748 270             |                                                             '         E D  (f) locked sub-burst
32748 270             | 
32748 270             | 
32748 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3274c 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
32750 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
32754 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
32758 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3275c 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
32760 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
32764 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
32768 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3276c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
32770 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
32774 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
32778 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3277c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
32780 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
32784 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
32788 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3278c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
32790 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
32794 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
32798 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3279c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
327a0 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
327a4 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
327a8 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
327ac 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
327b0 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
327b4 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
327b8 28c             | 
327b8 28c             |                             ' fall through to read bursts
327b8 28c             |                         
327b8 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
327b8 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
327bc 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
327c0 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
327c4 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
327c8 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
327cc 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
327d0 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
327d4 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
327d8 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
327dc 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
327e0 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
327e4 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
327e8 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
327ec 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
327f0 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
327f4 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
327f8 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
327fc 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
32800 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
32804 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
32808 2a0 E8 D1 03 F1 |                             add     clks, clks
3280c 2a1             | readcommon
3280c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
32810 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
32814 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
32818 2a4             | 
32818 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3281c 2a5 69 C8 63 FD |                             rev     cmdaddr
32820 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
32824 2a7 61 C8 63 FD |                             mergeb  cmdaddr
32828 2a8             | 
32828 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3282c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
32830 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
32830 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
32834 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
32838 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3283c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
32840 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
32840 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
32844 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
32848 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3284c 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
32850 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
32854 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
32858 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
32858 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3285c 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
32860 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
32864 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
32868 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3286c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
32870 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
32874 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
32878 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3287c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
32880 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
32884 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
32888 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3288c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
32890 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
32890 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
32894 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
32898 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3289c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
328a0 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
328a4 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
328a8 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
328ac 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
328b0 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
328b4 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
328b8 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
328bc 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
328c0 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
328c4 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
328c8 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
328cc 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
328d0 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
328d4 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
328d8 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
328dc 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
328e0 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
328e4 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
328e8 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
328ec 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
328f0 2da 10 03 90 FD |                             jmp     #writecommon
328f4 2db             | 
328f4 2db             | '..................................................................................................
328f4 2db             | ' Burst continuation testing
328f4 2db             | 
328f4 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
328f8 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
328fc 2dd             | continue_read_lut          
328fc 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
32900 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
32904 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
32908 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3290c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
32910 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
32914 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
32918 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3291c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
32920 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
32924 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
32928 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3292c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
32930 2ea             | 
32930 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
32934 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
32938 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3293c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
32940 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
32944 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
32948 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3294c 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
32950 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
32954 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
32958 2f4 2A 1C 66 0D |             _ret_           push    #poller
3295c 2f5             | 
3295c 2f5             | 
3295c 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
32960 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
32960 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
32964 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
32968 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3296c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
32970 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
32974 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
32978 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3297c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
32980 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
32984 2ff             | '..................................................................................................
32984 2ff             | ' Completion of requests
32984 2ff             | 
32984 2ff             | complete_rw_lut             
32984 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
32988 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3298c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
32990 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
32994 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
32998 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3299c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
329a0 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
329a4 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
329a8 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
329ac 309 32 62 64 AD |             if_z            skipf   #%110001
329b0 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
329b4 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
329b8 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
329bc 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
329c0 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
329c4 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
329c8 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
329cc 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
329d0 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
329d4 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
329d8 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
329dc 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
329e0 316             |                                                             ' skipcase (a) gfx copy to/from hub
329e0 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
329e0 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
329e0 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
329e4 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
329e8 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
329ec 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
329f0 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
329f4 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
329f8 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
329fc 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
32a00 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
32a04 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
32a08 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
32a0c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
32a10 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
32a14 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
32a18 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
32a1c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
32a20 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
32a24 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
32a28 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
32a2c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
32a30 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
32a34 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
32a38 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
32a3c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
32a40 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
32a44 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
32a48 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
32a4c 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
32a50 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
32a54 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
32a58 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
32a5c 335 DF B7 03 A6 |             if_z            mov     addr2, link
32a60 336 34 FF 9F AD |             if_z            jmp     #checknext
32a64 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
32a68 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
32a6c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
32a70 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
32a74 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
32a78 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
32a7c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
32a80 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
32a84 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
32a88 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
32a8c 341             | 
32a8c 341             | '..................................................................................................
32a8c 341             | ' PSRAM WRITES
32a8c 341             |                                                             '  a b c d e f g h
32a8c 341             | 
32a8c 341             |                                                             '  B W L F B R L L (a) byte write(s)
32a8c 341             |                                                             '  Y O O I U E O O (b) word write(s)
32a8c 341             |                                                             '  T R N L R S C C (c) long write(s)
32a8c 341             |                                                             '  E D G L S U K K (d) resumed fill
32a8c 341             |                                                             '          T M E E (e) new burst write
32a8c 341             |                                                             '            E D D (f) resumed burst
32a8c 341             |                                                             '              F B (g) locked fill
32a8c 341             |                                                             '              I U (h) locked burst write
32a8c 341             |                                                             '              L R 
32a8c 341             |                                                             '              L S 
32a8c 341             |                                                             '                T 
32a8c 341             | 
32a8c 341             | w_single                   
32a8c 341             | w_fill_cont           
32a8c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
32a90 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
32a94 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
32a98 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
32a9c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
32aa0 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
32aa4 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
32aa8 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
32aac 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
32ab0 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
32ab4 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
32ab8 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
32abc 34d             |                ' disable call to r_resume_burst for single longs when z=0
32abc 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
32ac0 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
32ac4 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
32ac8 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
32acc 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
32ad0 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
32ad4 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
32ad8 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
32adc 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
32ae0 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
32ae4 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
32ae8 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
32aec 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
32af0 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
32af4 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
32af8 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
32afc 35d             |         
32afc 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
32afc 35d             |             '
32afc 35d             |             '  At least one of these 3 optional components will be sent
32afc 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
32afc 35d             |             '     body - N x full longs of data
32afc 35d             |             '     trailer - last partial long of data
32afc 35d             |             '
32afc 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
32afc 35d             |             '
32afc 35d             |             'Case    Type                           Sends
32afc 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
32afc 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
32afc 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
32afc 35d             |             ' 4)     Multiple long fill             body only
32afc 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
32afc 35d             | 
32afc 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
32afc 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
32b00 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
32b04 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
32b08 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
32b0c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
32b10 362 13 8C 07 F6 |                             mov     pattern3, #%10011
32b14 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
32b18 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
32b1c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
32b20 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
32b24 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
32b28 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
32b2c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
32b30 36a             |                             
32b30 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
32b34 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
32b38 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
32b3c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
32b40 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
32b44 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
32b48 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
32b4c 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
32b50 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
32b54 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
32b58 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
32b5c 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
32b60 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
32b64 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
32b68 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
32b6c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
32b70 37a             | 
32b70 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
32b74 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
32b78 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
32b7c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
32b80 37e             |                  
32b80 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
32b84 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
32b88 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
32b8c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
32b90 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
32b94 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
32b98 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
32b9c 385             | 
32b9c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
32ba0 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
32ba4 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
32ba8 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
32bac 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
32bb0 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
32bb4 38b             | 
32bb4 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
32bb4 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
32bb8 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
32bbc 38d 2A B0 63 FD |                             push    addr1                   'save address
32bc0 38e             | 
32bc0 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
32bc0 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
32bc4 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
32bc8 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
32bcc 391             |             
32bcc 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
32bd0 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
32bd4 393 2B B0 63 FD |                             pop     addr1                   'restore address
32bd8 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
32bdc 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
32be0 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
32be4 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
32be8 398             | 
32be8 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
32bec 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
32bf0 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
32bf4 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
32bf8 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
32bfc 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
32c00 39e             | 
32c00 39e             |                             'trailer is done
32c00 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
32c04 39f             | 
32c04 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
32c08 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
32c0c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
32c10 3a2             | 
32c10 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
32c14 3a3 69 C8 63 FD |                             rev     cmdaddr                 
32c18 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
32c1c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
32c20 3a6             |                             
32c20 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
32c24 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
32c28 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
32c2c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
32c30 3aa             |                                                          
32c30 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
32c34 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
32c38 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
32c3c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
32c40 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
32c44 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
32c48 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
32c4c 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
32c50 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
32c54 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
32c58 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
32c5c 3b5             |  
32c5c 3b5 59 52 63 FD |                             drvh    cspin
32c60 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
32c64 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
32c68 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
32c6c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
32c70 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
32c74 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
32c78 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
32c7c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
32c80 3be EA E5 03 F6 |                             mov     d, orighubsize
32c84 3bf EF E5 63 F0 |                             shl     d, a
32c88 3c0 F2 E3 83 F1 |                             sub     c, d
32c8c 3c1 DD E3 03 F1 |                             add     c, offset1
32c90 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
32c94 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
32c98 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
32c9c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
32ca0 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
32ca4 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
32ca8 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
32cac 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
32cb0 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
32cb4 3cb BB D3 03 F6 |                             mov     resume, restorefill
32cb8 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
32cbc 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
32cc0 3ce 6C FC BF CD |             if_c            call    #yield
32cc4 3cf 2D 00 64 FD |                             ret
32cc8 3d0             |                            
32cc8 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
32cc8 3d0             |                       '     rczl    pa                      'rotate left into address offset
32cc8 3d0             |                       '     rczl    c wcz                   'restore count and flags
32cc8 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
32ccc 3d1 02 EC 67 F0 |                             shl     pa, #2
32cd0 3d2 28 06 64 AD |             if_z            setq    #3
32cd4 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
32cd8 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
32cdc 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
32ce0 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
32ce4 3d7             | 
32ce4 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
32ce8 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
32cec 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
32cf0 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
32cf4 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
32cf8 3dc             |                 fit 1024-32
32cf8 3dc             |         
32cf8 3dc             | 
32cf8 3dc             | '..................................................................................................
32cf8 3dc             | 
32cf8 3dc             |                 fit 1024-32
32cf8 3dc 00 00 00 00 
32cfc 3dd 00 00 00 00 
32d00 3de 00 00 00 00 
32d04 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
32d08 3e0             |                 org 1024-32
32d08 000             | 
32d08 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
32d08 000 00 00 00 00 |                 long $0000
32d0c 001 11 11 00 00 |                 long $1111
32d10 002 22 22 00 00 |                 long $2222
32d14 003 33 33 00 00 |                 long $3333
32d18 004 44 44 00 00 |                 long $4444
32d1c 005 55 55 00 00 |                 long $5555
32d20 006 66 66 00 00 |                 long $6666
32d24 007 77 77 00 00 |                 long $7777
32d28 008 88 88 00 00 |                 long $8888
32d2c 009 99 99 00 00 |                 long $9999
32d30 00a AA AA 00 00 |                 long $aaaa
32d34 00b BB BB 00 00 |                 long $bbbb
32d38 00c CC CC 00 00 |                 long $cccc
32d3c 00d DD DD 00 00 |                 long $dddd
32d40 00e EE EE 00 00 |                 long $eeee
32d44 00f FF FF 00 00 |                 long $ffff
32d48 010             | 
32d48 010             | 'masks
32d48 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
32d4c 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
32d50 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
32d54 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
32d58 014             | 
32d58 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
32d5c 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
32d60 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
32d64 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
32d68 018             | 
32d68 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
32d6c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
32d70 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
32d74 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
32d78 01c             | 
32d78 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
32d7c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
32d80 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
32d84 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
32d88 020             |         fit 1024
32d88 020             | 
32d88 020             |         fit 1024
32d88 020             | 
32d88 020             | '--------------------------------------------------------------------------------------------------
32d88 020             |         orgh
32d88                 | 
32d88                 | gfxexpansion
32d88                 |                             'simple line drawing graphics expansion of memory driver
32d88                 |                             'jmp     #donerepeats                'just return for now
32d88                 | 
32d88     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
32d8c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
32d90     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
32d94     DD E1 03 F6 |                             mov     b, offset1              'get error term
32d98     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
32d9c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
32da0     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
32da4     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
32da8     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
32dac     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
32db0     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
32db4     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
32db8     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
32dbc     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
32dc0     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
32dc4     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
32dc8     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
32dcc     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
32dd0     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
32dd4     DC E5 33 F9 |                             getword d, total, #0            'get line width
32dd8     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
32ddc     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
32de0     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
32de4     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
32de8     C3 03 80 FD |                             jmp     #readmask               'continue filling
32dec                 | 	alignl
32dec                 | _usbnew_spin2_dat_
32dec                 |                 org     $000
32dec 000             | 
32dec 000             | usb_host_start
32dec 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
32df0 001             | 
32df0 001 03 00 00 FF 
32df4 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
32df8 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
32dfc 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
32e00 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
32e04 006 29 70 63 FD |                 setq2   htmp
32e08 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
32e0c 008             | 
32e0c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
32e10 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
32e14 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
32e18 00b             | 
32e18 00b             | '------------------------------------------------------------------------------
32e18 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
32e18 00b             | ' special because the receiving function must not respond with either STALL or
32e18 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
32e18 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
32e18 00b             | ' corrupt packet, it must ignore the transaction
32e18 00b             | '------------------------------------------------------------------------------
32e18 00b             | ' On entry:
32e18 00b             | '   PTRA - start address of the SETUP data struct.
32e18 00b             | ' On exit:
32e18 00b             | '   retval - PID_ACK on success, otherwise error code.
32e18 00b             | '------------------------------------------------------------------------------
32e18 00b             | txn_setup
32e18 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
32e1c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
32e20 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
32e24 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
32e28 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
32e2c 010             | .setup
32e2c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
32e30 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32e34 012 2D 00 64 AD |         if_z    ret
32e38 013 7C 0B B0 FD |                 call    #retry_wait
32e3c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
32e40 015 2D 00 64 AD |         if_z    ret
32e44 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
32e48 017 E0 FF 9F FD |                 jmp     #.setup
32e4c 018             | 
32e4c 018             | '------------------------------------------------------------------------------
32e4c 018             | ' IN/INTERRUPT transaction.
32e4c 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
32e4c 018             | '------------------------------------------------------------------------------
32e4c 018             | ' On entry:
32e4c 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
32e4c 018             | '     CRC(b19..23).
32e4c 018             | ' On exit:
32e4c 018             | '------------------------------------------------------------------------------
32e4c 018             | txn_in
32e4c 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
32e50 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
32e54 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
32e58 01b             | 
32e58 01b             |                 ' Fall through to urx_packet
32e58 01b             | 
32e58 01b             | '------------------------------------------------------------------------------
32e58 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
32e58 01b             | ' received are handshakes and IN DATAx.
32e58 01b             | '------------------------------------------------------------------------------
32e58 01b             | ' On entry:
32e58 01b             | ' On exit:
32e58 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
32e58 01b             | '     returned.
32e58 01b             | '------------------------------------------------------------------------------
32e58 01b             | urx_packet
32e58 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
32e5c 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32e60 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
32e64 01e 1A 92 63 FD |                 getct   hct2
32e68 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
32e6c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
32e70 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
32e74 022             | .wait_sop
32e74 022 22 A7 8A FA |                 rdpin   urx, dm
32e78 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32e7c 024 08 00 90 CD |         if_c    jmp     #.get_pid
32e80 025 FC 25 CC FB |                 jnct2   #.wait_sop
32e84 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
32e88 027             | .get_pid
32e88 027 28 02 B0 FD |                 call    #urx_next
32e8c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
32e90 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
32e94 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
32e98 02b             | .chk_pid
32e98 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32e9c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
32ea0 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
32ea4 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
32ea8 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
32eac 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
32eb0 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
32eb4 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
32eb8 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
32ebc 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
32ec0 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
32ec4 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
32ec8 037             | .ack_resend
32ec8 037 22 A7 82 FA |                 rqpin   urx, dm
32ecc 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
32ed0 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
32ed4 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
32ed8 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
32edc 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
32ee0 03d             | .chk_eop
32ee0 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
32ee4 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
32ee8 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
32eec 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
32ef0 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
32ef4 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
32ef8 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
32efc 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
32f00 045 2D 00 64 FD |                 ret
32f04 046             | .idle
32f04 046 22 A7 82 FA |                 rqpin   urx, dm
32f08 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
32f0c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
32f10 049 2D 00 64 FD |                 ret
32f14 04a             | 
32f14 04a             | '------------------------------------------------------------------------------
32f14 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
32f14 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
32f14 04a             | ' if one is required.
32f14 04a             | '------------------------------------------------------------------------------
32f14 04a             | ' On entry:
32f14 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
32f14 04a             | ' On exit:
32f14 04a             | '------------------------------------------------------------------------------
32f14 04a             | utx_token
32f14 04a 22 A7 82 FA |                 rqpin   urx, dm
32f18 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
32f1c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
32f20 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
32f24 04e 34 0D B0 CD |         if_c    call    #utx_pre
32f28 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
32f2c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
32f30 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
32f34 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
32f38 053             | .next_byte
32f38 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
32f3c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
32f40 055             | .wait
32f40 055 40 46 72 FD |                 testp   dp                      wc
32f44 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
32f48 057 23 03 08 FC |                 akpin   dp
32f4c 058 22 A5 22 FC |                 wypin   utx, dm
32f50 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
32f54 05a             | 
32f54 05a             | '------------------------------------------------------------------------------
32f54 05a             | ' SETUP/OUT/INTERRUPT transaction.
32f54 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
32f54 05a             | '------------------------------------------------------------------------------
32f54 05a             | ' On entry:
32f54 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
32f54 05a             | '     CRC(b19..23).
32f54 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
32f54 05a             | '   pkt_data - count of DATAx payload bytes to send.
32f54 05a             | ' On exit:
32f54 05a             | '------------------------------------------------------------------------------
32f54 05a             | txn_out
32f54 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
32f58 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
32f5c 05c 00 00 C0 FF 
32f60 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
32f64 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
32f68 05f             | 
32f68 05f             |                 ' Fall through to utx_data
32f68 05f             | 
32f68 05f             | '------------------------------------------------------------------------------
32f68 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
32f68 05f             | ' calculated while the data byte is being shifted out. Since data stage
32f68 05f             | ' success/fail is not determined until the status stage of the transaction,
32f68 05f             | ' this routine is only concerned about the current DATAx packet.
32f68 05f             | '------------------------------------------------------------------------------
32f68 05f             | ' On entry:
32f68 05f             | '   PTRA - hub start address of the data to read.
32f68 05f             | '   pkt_cnt - data payload size.
32f68 05f             | ' On exit:
32f68 05f             | '------------------------------------------------------------------------------
32f68 05f             | utx_data
32f68 05f 22 A7 82 FA |                 rqpin   urx, dm
32f6c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32f70 061 F4 FF 9F CD |         if_c    jmp     #utx_data
32f74 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
32f78 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
32f7c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
32f80 065 D8 0C B0 CD |         if_c    call    #utx_pre
32f84 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
32f88 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
32f8c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
32f90 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
32f94 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
32f98 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
32f9c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
32fa0 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
32fa4 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
32fa8 06f             | .read_byte
32fa8 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
32fac 070 F0 00 B0 FD |                 call    #utx_byte
32fb0 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
32fb4 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
32fb8 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
32fbc 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
32fc0 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
32fc4 076             | .send_crc
32fc4 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
32fc8 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
32fcc 078 D0 00 B0 FD |                 call    #utx_byte
32fd0 079 5D A5 EA F8 |                 getbyte utx, crc, #1
32fd4 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
32fd8 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
32fdc 07c             | 
32fdc 07c             | '------------------------------------------------------------------------------
32fdc 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
32fdc 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
32fdc 07c             | ' expects that the packet includes at least the CRC word.
32fdc 07c             | '
32fdc 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
32fdc 07c             | ' was requested, which makes it difficult to determine where the data stops
32fdc 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
32fdc 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
32fdc 07c             | ' USB-16 expected residual value of 0xB001.
32fdc 07c             | '
32fdc 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
32fdc 07c             | ' so the caller can verify IN success before writing the data to its final
32fdc 07c             | ' destination.
32fdc 07c             | '------------------------------------------------------------------------------
32fdc 07c             | ' On entry:
32fdc 07c             | '   pkt_data - max byte count expected to be in the packet.
32fdc 07c             | '   newb_flg - signals new byte ready when toggled.
32fdc 07c             | ' On exit:
32fdc 07c             | '   pkt_cnt - actual number of bytes read.
32fdc 07c             | '------------------------------------------------------------------------------
32fdc 07c             | urx_data
32fdc 07c F7 75 03 F6 |                 mov     htmp2, pb
32fe0 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
32fe4 07e 00 00 C0 FF 
32fe8 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
32fec 080 BA EF 03 F6 |                 mov     pb, htmp2
32ff0 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
32ff4 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
32ff8 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
32ffc 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
33000 085             | .wait_byte
33000 085             | ' In-line rx for max speed
33000 085 22 A7 82 FA |                 rqpin   urx, dm
33004 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
33008 087 53 A5 02 F5 |                 and     utx, urx
3300c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
33010 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
33014 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
33018 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3301c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
33020 08d DC FF 9F FD |                 jmp     #.wait_byte
33024 08e             | .get_byte
33024 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
33028 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3302c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
33030 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
33034 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
33038 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3303c 094             | .end_crc
3303c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
33040 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
33044 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
33048 097 2D 00 64 1D |         if_a    ret
3304c 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3304c 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3304c 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3304c 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3304c 098 22 A7 82 FA |                 rqpin   urx, dm
33050 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
33054 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
33058 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
33058 09b             | .chk_crc
33058 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3305c 09c 58 00 00 FF 
33060 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
33064 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
33068 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3306c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
33070 0a1 34 09 B0 FD |                 call    #poll_waitx
33074 0a2             | 
33074 0a2             |                 ' Fall through to utx_handshake
33074 0a2             | 
33074 0a2             | '------------------------------------------------------------------------------
33074 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
33074 0a2             | ' the appropriate IP delay has been inserted.
33074 0a2             | '------------------------------------------------------------------------------
33074 0a2             | ' On entry:
33074 0a2             | '   retval - handshake PID to send.
33074 0a2             | ' On exit:
33074 0a2             | '   retval unchanged.
33074 0a2             | '------------------------------------------------------------------------------
33074 0a2             | utx_handshake
33074 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
33078 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3307c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
33080 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
33084 0a6 5F A5 02 F6 |                 mov     utx, retval
33088 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3308c 0a8             | .idle
3308c 0a8 22 A7 82 FA |                 rqpin   urx, dm
33090 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
33094 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
33098 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3309c 0ac 08 09 90 FD |                 jmp     #poll_waitx
330a0 0ad             | 
330a0 0ad             | '------------------------------------------------------------------------------
330a0 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
330a0 0ad             | '------------------------------------------------------------------------------
330a0 0ad             | ' On entry:
330a0 0ad             | '   utx - byte to transmit.
330a0 0ad             | ' On exit:
330a0 0ad             | '------------------------------------------------------------------------------
330a0 0ad             | utx_byte
330a0 0ad 40 46 72 FD |                 testp   dp                      wc
330a4 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
330a8 0af 23 03 08 FC |                 akpin   dp
330ac 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
330b0 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
330b4 0b2             | 
330b4 0b2             | '------------------------------------------------------------------------------
330b4 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
330b4 0b2             | '------------------------------------------------------------------------------
330b4 0b2             | ' On entry:
330b4 0b2             | ' On exit:
330b4 0b2             | '   retval - the byte read.
330b4 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
330b4 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
330b4 0b2             | '     received.
330b4 0b2             | '------------------------------------------------------------------------------
330b4 0b2             | urx_next
330b4 0b2 22 A7 8A FA |                 rdpin   urx, dm
330b8 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
330bc 0b4 53 A5 02 F5 |                 and     utx, urx
330c0 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
330c4 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
330c8 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
330cc 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
330d0 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
330d4 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
330d8 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
330dc 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
330e0 0bd 2D 00 64 FD |                 ret
330e4 0be             | 
330e4 0be             | '------------------------------------------------------------------------------
330e4 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
330e4 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
330e4 0be             | ' length, and the PID is not included in the CRC calculation:
330e4 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
330e4 0be             | '  CRC5  ENDP ADDRESS PID
330e4 0be             | ' %00000_1111_1111111_xxxxxxxx
330e4 0be             | '------------------------------------------------------------------------------
330e4 0be             | ' On entry:
330e4 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
330e4 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
330e4 0be             | ' On exit:
330e4 0be             | '   ep_addr_pid - CRC value appended to the packet.
330e4 0be             | '------------------------------------------------------------------------------
330e4 0be             | calc_crc5
330e4 0be FF 03 00 FF 
330e8 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
330ec 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
330f0 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
330f4 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
330f8 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
330fc 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
33100 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
33104 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
33108 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3310c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
33110 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
33114 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
33118 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3311c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
33120 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
33124 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
33128 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3312c 0d0             | 
3312c 0d0             | '------------------------------------------------------------------------------
3312c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3312c 0d0             | '------------------------------------------------------------------------------
3312c 0d0             | isr1_fsframe
3312c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
33130 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33134 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33138 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3313c 0d4             | .wait
3313c 0d4 40 46 72 FD |                 testp   dp                      wc
33140 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
33144 0d6 23 03 08 FC |                 akpin   dp
33148 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3314c 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
33150 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
33154 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
33158 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3315c 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
33160 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
33164 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
33168 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3316c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
33170 0e1 2C FF BF FD |                 call    #utx_byte
33174 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
33178 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3317c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
33180 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
33184 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
33188 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3318c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
33190 0e9 5B A5 42 F5 |                 or      utx, icrc
33194 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
33198 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3319c 0ec 20 00 90 FD |                 jmp     #isr1_wait
331a0 0ed             | isr1_lsframe
331a0 0ed 1A 92 62 FD |                 getct   iframe_ct_base
331a4 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
331a8 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
331ac 0f0             | .wait
331ac 0f0 40 46 72 FD |                 testp   dp                      wc
331b0 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
331b4 0f2 23 03 08 FC |                 akpin   dp
331b8 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
331bc 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
331c0 0f5             | isr1_wait
331c0 0f5 22 A5 82 FA |                 rqpin   utx, dm
331c4 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
331c8 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
331cc 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
331d0 0f9 03 00 00 FF 
331d4 0fa FF B3 06 F5 |                 and     frame, ##$7ff
331d8 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
331dc 0fc F5 FF 3B FB |                 reti1
331e0 0fd             | 
331e0 0fd             | '------------------------------------------------------------------------------
331e0 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
331e0 0fd             | ' transaction will complete before the next frame is triggered.
331e0 0fd             | '------------------------------------------------------------------------------
331e0 0fd             | ' On entry:
331e0 0fd             | ' On exit:
331e0 0fd             | '------------------------------------------------------------------------------
331e0 0fd             | wait_txn_ok
331e0 0fd 1A 74 63 FD |                 getct   htmp2
331e4 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
331e8 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
331ec 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
331f0 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
331f4 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
331f8 103 2D 00 64 FD |                 ret
331fc 104             | 
331fc 104             | '------------------------------------------------------------------------------
331fc 104             | ' A device connection was detected, or a bus reset was requested by the USB
331fc 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
331fc 104             | ' and perform a reset sequence prior to device enumeration.
331fc 104             | '------------------------------------------------------------------------------
331fc 104             | dev_reset
331fc 104 22 A7 82 FA |                 rqpin   urx, dm
33200 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
33204 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
33208 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3320c 108             | reset
3320c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
33210 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
33214 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
33218 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3321c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
33220 10d 1A 92 62 FD |                 getct   iframe_ct_base
33224 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33228 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3322c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
33230 111 24 70 07 F1 |                 add     htmp, #36
33234 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
33238 113             | .framewait
33238 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3323c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
33240 115 2D 00 64 FD |                 ret
33244 116             | 
33244 116             | '------------------------------------------------------------------------------
33244 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
33244 116             | '------------------------------------------------------------------------------
33244 116             | ' On entry:
33244 116             | '   PTRA - source address.
33244 116             | '   PB - destination address.
33244 116             | '   hr0 - length of copy, in bytes.
33244 116             | ' On exit:
33244 116             | '------------------------------------------------------------------------------
33244 116             | hmemcpy
33244 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
33248 117 F7 71 43 FC |                 wrbyte  htmp, pb
3324c 118 01 EE 07 F1 |                 add     pb, #1
33250 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
33254 11a             | 
33254 11a             | '------------------------------------------------------------------------------
33254 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
33254 11a             | ' loop until the errant device is disconnected.
33254 11a             | '------------------------------------------------------------------------------
33254 11a             | ' On entry:
33254 11a             | ' On exit:
33254 11a             | '------------------------------------------------------------------------------
33254 11a             | host_error
33254 11a             |           if ERROR_LED >= 0
33254 11a             |           end
33254 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
33258 11b             | 
33258 11b             | '------------------------------------------------------------------------------
33258 11b             | ' Get HID descriptor buffer for current port
33258 11b             | '------------------------------------------------------------------------------
33258 11b             | ' On entry:
33258 11b             | ' On exit:
33258 11b             | '   PB - HID descriptor buffer pointer
33258 11b             | '------------------------------------------------------------------------------
33258 11b             | get_hid_descr_buffer
33258 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3325c 11c 01 EE E7 F2 |                 cmpsub  pb, #1
33260 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
33264 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
33268 11f             | 
33268 11f             | 
33268 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3326c 120             | 
3326c 120             | ' USB commands and error codes
3326c 120 00 00 00 00 | cmd_data        long    0
33270 121 00 00 00 00 | usb_err_code    long    ERR_NONE
33274 122             | 
33274 122             | ' Parameters block assigned at cog startup
33274 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
33278 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3327c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
33280 125             | if ACTIVITY_LED >= 0
33280 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
33280 125             | end
33280 125             | if ERROR_LED >= 0
33280 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
33280 125             | end
33280 125 00 00 00 00 | hid_descr_p     long    0
33284 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
33284 126             | 'hkbd_report_p   long    0
33284 126 00 00 00 00 | hub_descr_p     long    0
33288 127 00 00 00 00 | urx_buff_p      long    0
3328c 128 00 00 00 00 | dev_desc_buff_p long    0
33290 129 00 00 00 00 | con_desc_buff_p long    0
33294 12a 00 00 00 00 | cache_start_p   long    0
33298 12b 00 00 00 00 | cache_end_p     long    0
3329c 12c             | if EMUPAD_MAX_PLAYER > 0
3329c 12c             | emupad_out_ptr  long    0
3329c 12c             | end
3329c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
332a0 12d             | 
332a0 12d             | hdev_init_start
332a0 12d             | hdev_port       res     1
332a0 12d             | hdev_port       res     1
332a0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
332a0 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
332a0 12d             | kbm_next_datax  res     1
332a0 12d             | kbm_next_datax  res     1
332a0 12d             | hub_intf_num    res     1
332a0 12d             | hub_intf_num    res     1
332a0 12d             | hub_next_datax  res     1
332a0 12d             | hub_next_datax  res     1
332a0 12d             | hub_status_chg  res     1
332a0 12d             | hub_status_chg  res     1
332a0 12d             | hub_port_status res     1
332a0 12d             | hub_port_status res     1
332a0 12d             | if HAVE_MOUSE
332a0 12d             | ms_intf_num     res     1
332a0 12d             | ms_intf_num     res     1
332a0 12d             | ms_in_max_pkt   res     1
332a0 12d             | ms_in_max_pkt   res     1
332a0 12d             | end
332a0 12d             | kb_intf_num     res     1
332a0 12d             | kb_intf_num     res     1
332a0 12d             | kb_interval     res     1
332a0 12d             | kb_interval     res     1
332a0 12d             | kb_in_max_pkt   res     1
332a0 12d             | kb_in_max_pkt   res     1
332a0 12d             | kb_max_index    res     1
332a0 12d             | kb_max_index    res     1
332a0 12d             | kb_led_states   res     1
332a0 12d             | kb_led_states   res     1
332a0 12d             | gp_intf_num     res     1
332a0 12d             | gp_intf_num     res     1
332a0 12d             | gp_interval     res     1
332a0 12d             | gp_interval     res     1
332a0 12d             | gp_max_index    res     1
332a0 12d             | gp_max_index    res     1
332a0 12d             | gp_descr_len    res     1+MAX_DEVICES
332a0 12d             | gp_descr_len    res     1+MAX_DEVICES
332a0 12d             | hdev_init_end
332a0 12d             | 
332a0 12d             | ' Initialized at cog startup:
332a0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
332a0 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
332a0 12d             | iframe_ct_new   res     1
332a0 12d             | iframe_ct_new   res     1
332a0 12d             | iframe_ct_base  res     1
332a0 12d             | iframe_ct_base  res     1
332a0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
332a0 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
332a0 12d             | 
332a0 12d             | ' This register block is reset to zero when a USB device connects
332a0 12d             | hreg_init_start
332a0 12d             | hstatus         res     1         ' Host status flags
332a0 12d             | hstatus         res     1         ' Host status flags
332a0 12d             | hctwait         res     1         ' Poll-based wait clocks
332a0 12d             | hctwait         res     1         ' Poll-based wait clocks
332a0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
332a0 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
332a0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
332a0 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
332a0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
332a0 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
332a0 12d             | xfer_retry      res     1         ' Control transfer retry count
332a0 12d             | xfer_retry      res     1         ' Control transfer retry count
332a0 12d             | retry           res     1         ' Transaction retry count
332a0 12d             | retry           res     1         ' Transaction retry count
332a0 12d             | utx             res     1         ' Byte to transmit on USB
332a0 12d             | utx             res     1         ' Byte to transmit on USB
332a0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
332a0 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
332a0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
332a0 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
332a0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
332a0 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
332a0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
332a0 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
332a0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
332a0 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
332a0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
332a0 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
332a0 12d             | frame           res     1         ' USB 1ms frame counter value
332a0 12d             | frame           res     1         ' USB 1ms frame counter value
332a0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
332a0 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
332a0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
332a0 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
332a0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
332a0 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
332a0 12d             | crc             res     1         ' Used for CRC16 calculation
332a0 12d             | crc             res     1         ' Used for CRC16 calculation
332a0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
332a0 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
332a0 12d             | retval          res     1         ' Global success/fail return parameter
332a0 12d             | retval          res     1         ' Global success/fail return parameter
332a0 12d             | context_retval  res     1         ' Operation contextual return parameter
332a0 12d             | context_retval  res     1         ' Operation contextual return parameter
332a0 12d             | ' Device stuff
332a0 12d             | hdev_id         res     1+MAX_DEVICES
332a0 12d             | hdev_id         res     1+MAX_DEVICES
332a0 12d             | hdev_bcd        res     1
332a0 12d             | hdev_bcd        res     1
332a0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
332a0 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
332a0 12d             | ' Keyboard/mouse stuff
332a0 12d             | hctrl_ep_addr   res     1
332a0 12d             | hctrl_ep_addr   res     1
332a0 12d             | hctrl_max_pkt   res     1
332a0 12d             | hctrl_max_pkt   res     1
332a0 12d             | hconfig_base    res     1
332a0 12d             | hconfig_base    res     1
332a0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
332a0 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
332a0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
332a0 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
332a0 12d             | hdev_class      res     1
332a0 12d             | hdev_class      res     1
332a0 12d             | hdev_subclass   res     1
332a0 12d             | hdev_subclass   res     1
332a0 12d             | hdev_protocol   res     1
332a0 12d             | hdev_protocol   res     1
332a0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
332a0 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
332a0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
332a0 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
332a0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
332a0 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
332a0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
332a0 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
332a0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
332a0 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
332a0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
332a0 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
332a0 12d             | if HAVE_MOUSE
332a0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
332a0 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
332a0 12d             | end
332a0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
332a0 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
332a0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
332a0 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
332a0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
332a0 12d             | hdev_ep_addr    res     1+MAX_DEVICES
332a0 12d             | hdev_out_addr   res     1
332a0 12d             | hdev_out_addr   res     1
332a0 12d             | 
332a0 12d             | if EMUPAD_MAX_PLAYER > 0
332a0 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
332a0 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
332a0 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
332a0 12d             | end
332a0 12d             | 
332a0 12d             | hreg_init_end
332a0 12d             | 
332a0 12d             | hidr_start
332a0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
332a0 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
332a0 12d             | hidr_flags      res     1
332a0 12d             | hidr_flags      res     1
332a0 12d             | hidr_axis       res     3
332a0 12d             | hidr_axis       res     3
332a0 12d             | hidr_buttons    res     1
332a0 12d             | hidr_buttons    res     1
332a0 12d             | hidr_hats       res     1
332a0 12d             | hidr_hats       res     1
332a0 12d             | '' Above are actually useful values, 6 longs
332a0 12d             | hidr_id         res     1
332a0 12d             | hidr_id         res     1
332a0 12d             | hidr_state      res     1
332a0 12d             | hidr_state      res     1
332a0 12d             | hidr_size       res     1
332a0 12d             | hidr_size       res     1
332a0 12d             | hidr_count      res     1
332a0 12d             | hidr_count      res     1
332a0 12d             | hidr_offset     res     1
332a0 12d             | hidr_offset     res     1
332a0 12d             | hidr_usage_idx  res     1
332a0 12d             | hidr_usage_idx  res     1
332a0 12d             | hidr_lminmax    res     1
332a0 12d             | hidr_lminmax    res     1
332a0 12d             | hidr_pminmax    res     1
332a0 12d             | hidr_pminmax    res     1
332a0 12d             | hidr_type       res     1
332a0 12d             | hidr_type       res     1
332a0 12d             | hidr_end
332a0 12d             | 
332a0 12d             | ' Variables dependent on the system freqency
332a0 12d             | _var_64_lower_  res     1
332a0 12d             | _var_64_lower_  res     1
332a0 12d             | _var_64_upper_  res     1
332a0 12d             | _var_64_upper_  res     1
332a0 12d             | _12Mbps_        res     1
332a0 12d             | _12Mbps_        res     1
332a0 12d             | _1_5Mbps_       res     1
332a0 12d             | _1_5Mbps_       res     1
332a0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
332a0 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
332a0 12d             | _1us_           res     1         ' 1us
332a0 12d             | _1us_           res     1         ' 1us
332a0 12d             | _10us_          res     1         ' 10us
332a0 12d             | _10us_          res     1         ' 10us
332a0 12d             | _33us_          res     1         ' 33us
332a0 12d             | _33us_          res     1         ' 33us
332a0 12d             | _txn_err_       res     1         ' 250us
332a0 12d             | _txn_err_       res     1         ' 250us
332a0 12d             | _500us_         res     1         ' 500us
332a0 12d             | _500us_         res     1         ' 500us
332a0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
332a0 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
332a0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
332a0 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
332a0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
332a0 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
332a0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
332a0 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
332a0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
332a0 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
332a0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
332a0 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
332a0 12d             | _preamble_wait_ res     1
332a0 12d             | _preamble_wait_ res     1
332a0 12d             | _1ms_           res     1         ' 1ms
332a0 12d             | _1ms_           res     1         ' 1ms
332a0 12d             | _2ms_           res     1         ' 2ms
332a0 12d             | _2ms_           res     1         ' 2ms
332a0 12d             | _suspend_wait_  res     1         ' 3ms
332a0 12d             | _suspend_wait_  res     1         ' 3ms
332a0 12d             | _4ms_           res     1         ' 4ms
332a0 12d             | _4ms_           res     1         ' 4ms
332a0 12d             | _xfer_wait_     res     1         ' 5ms
332a0 12d             | _xfer_wait_     res     1         ' 5ms
332a0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
332a0 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
332a0 12d             | _reset_hold_    res     1         ' 15ms
332a0 12d             | _reset_hold_    res     1         ' 15ms
332a0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
332a0 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
332a0 12d             | _21ms_          res     1         ' 21ms
332a0 12d             | _21ms_          res     1         ' 21ms
332a0 12d             | _100ms_         res     1         ' 100ms
332a0 12d             | _100ms_         res     1         ' 100ms
332a0 12d             | _500ms_         res     1         ' 500ms
332a0 12d             | _500ms_         res     1         ' 500ms
332a0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
332a0 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
332a0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
332a0 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
332a0 12d             | '------------------------------------------------------------------------------
332a0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
332a0 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
332a0 12d             | _usb_d_ls_nco_  res     1
332a0 12d             | _usb_d_ls_nco_  res     1
332a0 12d             | _usb_h_fs_nco_  res     1
332a0 12d             | _usb_h_fs_nco_  res     1
332a0 12d             | _usb_d_fs_nco_  res     1
332a0 12d             | _usb_d_fs_nco_  res     1
332a0 12d             | '------------------------------------------------------------------------------
332a0 12d             | ' Scratch registers
332a0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
332a0 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
332a0 12d             | htmp1           res     1
332a0 12d             | htmp1           res     1
332a0 12d             | htmp2           res     1
332a0 12d             | htmp2           res     1
332a0 12d             | htmp3           res     1
332a0 12d             | htmp3           res     1
332a0 12d             | hrep            res     1         ' Repeat count
332a0 12d             | hrep            res     1         ' Repeat count
332a0 12d             | hsave0          res     1         ' Subroutine parameter saves
332a0 12d             | hsave0          res     1         ' Subroutine parameter saves
332a0 12d             | hsave1          res     1
332a0 12d             | hsave1          res     1
332a0 12d             | hsave2          res     1
332a0 12d             | hsave2          res     1
332a0 12d             | isrtmp1         res     1
332a0 12d             | isrtmp1         res     1
332a0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
332a0 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
332a0 12d             | hr0             res     1         ' Multi-purpose registers
332a0 12d             | hr0             res     1         ' Multi-purpose registers
332a0 12d             | hr1             res     1
332a0 12d             | hr1             res     1
332a0 12d             | hr2             res     1
332a0 12d             | hr2             res     1
332a0 12d             | hr3             res     1
332a0 12d             | hr3             res     1
332a0 12d             | hpar1           res     1         ' Routine entry/exit parameters
332a0 12d             | hpar1           res     1         ' Routine entry/exit parameters
332a0 12d             | hpar2           res     1
332a0 12d             | hpar2           res     1
332a0 12d             | hpar3           res     1
332a0 12d             | hpar3           res     1
332a0 12d             | hct2            res     1         ' Function response bus turn-around timer
332a0 12d             | hct2            res     1         ' Function response bus turn-around timer
332a0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
332a0 12d             | hct3            res     1         ' Keyboard/mouse poll timer
332a0 12d             | mod_cnt         res     1         ' Used in idle loops
332a0 12d             | mod_cnt         res     1         ' Used in idle loops
332a0 12d             |                 fit     $1F0
332a0 12d             |                 org     $200
332a0 200             | hlut_start
332a0 200             | 
332a0 200             | '------------------------------------------------------------------------------
332a0 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
332a0 200             | ' settings to startup defaults.
332a0 200             | '------------------------------------------------------------------------------
332a0 200             | ' On entry:
332a0 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
332a0 200             | '------------------------------------------------------------------------------
332a0 200             | set_speed_full
332a0 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
332a4 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
332a8 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
332ac 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
332b0 204             | '                ret                             wcz     ' Restore caller flags on exit
332b0 204             | 
332b0 204             | '------------------------------------------------------------------------------
332b0 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
332b0 204             | ' is a downstream hub connected (not yet implemented), the baud generator
332b0 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
332b0 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
332b0 204             | ' putting the smart pins into reset.
332b0 204             | '------------------------------------------------------------------------------
332b0 204             | ' On entry:
332b0 204             | ' On exit: CZ flags restored to caller states
332b0 204             | '------------------------------------------------------------------------------
332b0 204             | set_speed_low
332b0 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
332b4 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
332b8 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
332bc 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
332c0 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
332c4 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
332c8 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
332cc 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
332d0 20c             | 
332d0 20c             | '------------------------------------------------------------------------------
332d0 20c             | ' Perform configuration stuff required when a device intitially connects.
332d0 20c             | '------------------------------------------------------------------------------
332d0 20c             | ' On entry:
332d0 20c             | ' On exit:
332d0 20c             | '------------------------------------------------------------------------------
332d0 20c             | on_connect
332d0 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
332d4 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
332d8 20e             | .retry
332d8 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
332dc 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
332e0 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
332e4 211 00 08 00 FF 
332e8 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
332ec 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
332f0 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
332f4 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
332f8 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
332fc 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
33300 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33304 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
33308 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3330c 21b 4C 03 B0 FD |                 call    #poll_waitx
33310 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
33314 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
33318 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3331c 21f B8 FF 9F FD |                 jmp     #.retry
33320 220             | .get_dev_desc
33320 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
33324 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
33328 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3332c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
33330 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
33334 225 88 FB BF FD |                 call    #reset
33338 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3333c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
33340 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
33344 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
33348 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3334c 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
33350 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
33354 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
33358 22e 04 00 00 FF 
3335c 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
33360 230 34 FA BF FD |                 call    #calc_crc5
33364 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
33368 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3336c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
33370 234 F7 AD C2 FA |                 rdbyte  total_data, pb
33374 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
33378 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3337c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33380 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
33384 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
33388 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3338c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
33390 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
33394 23d C4 02 B0 FD |                 call    #poll_waitx
33398 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3339c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
333a0 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
333a4 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
333a8 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
333ac 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
333b0 244 2D 00 64 5D |         if_nz   ret
333b4 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
333b8 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
333bc 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
333c0 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
333c4 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
333c8 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
333cc 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
333d0 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
333d4 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
333d8 24e 2C FB 9F CD |         if_b    jmp     #host_error
333dc 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
333e0 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
333e4 251 2D EC 63 FD |                 call    pa
333e8 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
333ec 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
333f0 254 2C EC 63 FD |                 jmp     pa
333f4 255             | 
333f4 255             | '------------------------------------------------------------------------------
333f4 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
333f4 255             | ' Status reporting is always in the function-to-host direction.
333f4 255             | '------------------------------------------------------------------------------
333f4 255             | ' On entry:
333f4 255             | '   PTRA - start address of the SETUP data in hub.
333f4 255             | '   PB - start address of the buffer/struct to be written to during the IN data
333f4 255             | '     stage.
333f4 255             | '   ep_addr_pid - device address, endpoint and CRC5.
333f4 255             | ' On exit:
333f4 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
333f4 255             | '     contains the count of data stage bytes actually received, which must
333f4 255             | '     always be <= the count requested.
333f4 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
333f4 255             | '     more specific USB operation error code.
333f4 255             | '------------------------------------------------------------------------------
333f4 255             | control_read
333f4 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
333f8 256 F8 8F 03 F6 |                 mov     hpar2, ptra
333fc 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
33400 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
33404 259             | .xfer_start
33404 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
33408 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3340c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33410 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
33414 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
33418 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3341c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
33420 260 61 00 00 FF 
33424 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
33428 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3342c 263             | .data
3342c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
33430 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
33434 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
33438 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3343c 267             | .nak_retry
3343c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
33440 268             | .in_retry
33440 268 BC F6 BF FD |                 call    #txn_in
33444 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
33448 26a 28 00 90 AD |         if_z    jmp     #.commit
3344c 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
33450 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
33454 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
33458 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3345c 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
33460 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
33464 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
33468 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3346c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
33470 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
33474 275             | .commit
33474 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
33478 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3347c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
33480 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
33484 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
33488 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3348c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
33490 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
33494 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
33498 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3349c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
334a0 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
334a4 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
334a8 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
334ac 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
334b0 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
334b4 285             | .pre_status
334b4 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
334b8 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
334bc 287 00 B0 06 F6 |                 mov     pkt_data, #0
334c0 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
334c4 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
334c8 28a 61 00 00 FF 
334cc 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
334d0 28c             | .out_retry
334d0 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
334d4 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
334d8 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
334dc 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
334e0 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
334e4 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
334e8 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
334ec 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
334f0 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
334f4 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
334f8 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
334fc 297             | ' I've encountered transfer STALL, even though the data looks correct, and
334fc 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
334fc 297             | ' ControlRead() transfer gets things unstuck most of the time...
334fc 297             | .xfer_retry
334fc 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
33500 298 58 01 B0 FD |                 call    #poll_waitx
33504 299 8C F9 BF FD |                 call    #wait_txn_ok
33508 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3350c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
33510 29c C8 EF 03 F6 |                 mov     pb, hpar3
33514 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
33518 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3351c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
33520 2a0             | 
33520 2a0             | '------------------------------------------------------------------------------
33520 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
33520 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
33520 2a0             | ' the SETUP data struct is filled with the required values.
33520 2a0             | '------------------------------------------------------------------------------
33520 2a0             | ' On entry:
33520 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
33520 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
33520 2a0             | '     stage.
33520 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
33520 2a0             | ' On exit:
33520 2a0             | '   retval - used to convey the success/failure of each stage.
33520 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
33520 2a0             | '     more specific USB operation error code.
33520 2a0             | '------------------------------------------------------------------------------
33520 2a0             | control_write
33520 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33524 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
33528 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3352c 2a3             | 
3352c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
33530 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
33534 2a5 F7 91 03 F6 |                 mov     hpar3, pb
33538 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3353c 2a7             | .xfer_start
3353c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
33540 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
33544 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
33548 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3354c 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
33550 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
33554 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
33558 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3355c 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
33560 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
33564 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
33568 2b2             | .data
33568 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3356c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
33570 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
33574 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
33578 2b6             | .out_retry
33578 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3357c 2b7 88 F6 BF FD |                 call    #txn_out
33580 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33584 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
33588 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3358c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
33590 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
33594 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
33598 2be             | .commit
33598 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3359c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
335a0 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
335a4 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
335a8 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
335ac 2c3             | pre_status_in
335ac 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
335b0 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
335b4 2c5             | .status_retry
335b4 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
335b8 2c6 44 F5 BF FD |                 call    #txn_in
335bc 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
335c0 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
335c4 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
335c8 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
335cc 2cb 2D 00 64 AD |         if_z    ret
335d0 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
335d4 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
335d8 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
335dc 2cf             | '               ret                                     ' Caller must handle transfer retirement
335dc 2cf             | 
335dc 2cf             | '------------------------------------------------------------------------------
335dc 2cf             | ' Execute an IN interrupt transaction.
335dc 2cf             | '------------------------------------------------------------------------------
335dc 2cf             | ' On entry:
335dc 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
335dc 2cf             | '   hpar2 - Address of the IN data buffer
335dc 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
335dc 2cf             | ' On exit:
335dc 2cf             | '   retval - the result of the operation.
335dc 2cf             | '   hpar3 - the count of IN data bytes actually received.
335dc 2cf             | '------------------------------------------------------------------------------
335dc 2cf             | do_int_in
335dc 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
335e0 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
335e4 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
335e8 2d2             | 
335e8 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
335ec 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
335f0 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
335f4 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
335f8 2d6             | .retry
335f8 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
335fc 2d7 00 F5 BF FD |                 call    #txn_in
33600 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
33604 2d9 1C 00 90 AD |         if_z    jmp     #.commit
33608 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3360c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
33610 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
33614 2dd 54 00 B0 FD |                 call    #retry_wait
33618 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3361c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
33620 2e0 D4 FF 9F FD |                 jmp     #.retry
33624 2e1             | .commit
33624 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
33628 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3362c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
33630 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
33634 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
33638 2e6             | .post_ret
33638 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3363c 2e7             | 
3363c 2e7             | 
3363c 2e7             | '------------------------------------------------------------------------------
3363c 2e7             | ' Resets the downstream hub port to FS
3363c 2e7             | '------------------------------------------------------------------------------
3363c 2e7             | dwnstream_reset
3363c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33640 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
33644 2e9             | 
33644 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
33648 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3364c 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
33650 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
33654 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
33658 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3365c 2ef             | 
3365c 2ef             | '------------------------------------------------------------------------------
3365c 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3365c 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3365c 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3365c 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3365c 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3365c 2ef             | '------------------------------------------------------------------------------
3365c 2ef             | ' On entry:
3365c 2ef             | '   hctwait - wait interval in sysclocks.
3365c 2ef             | ' On exit:
3365c 2ef             | '------------------------------------------------------------------------------
3365c 2ef             | poll_waitx
3365c 2ef 1A 92 63 FD |                 getct   hct2
33660 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
33664 2f1             | .wait
33664 2f1 FF 25 CC FB |                 jnct2   #.wait
33668 2f2 2D 00 64 FD |                 ret
3366c 2f3             | 
3366c 2f3             | '------------------------------------------------------------------------------
3366c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3366c 2f3             | '------------------------------------------------------------------------------
3366c 2f3             | ' On entry:
3366c 2f3             | '   retval - transaction response PID or error code.
3366c 2f3             | ' On exit:
3366c 2f3             | '------------------------------------------------------------------------------
3366c 2f3             | retry_wait
3366c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
33670 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
33674 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
33678 2f6 14 00 90 AD |         if_z    jmp     #.nak
3367c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
33680 2f8 D8 FF BF FD |                 call    #poll_waitx
33684 2f9             | .dec
33684 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
33688 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3368c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
33690 2fc             | .nak
33690 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
33694 2fd C4 FF BF FD |                 call    #poll_waitx
33698 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3369c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
336a0 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
336a4 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
336a8 302 2D 00 64 FD |                 ret
336ac 303             | 
336ac 303             | host_reset
336ac 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
336b0 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
336b4 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
336b4 305 BD 01 05 FF 
336b8 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
336bc 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
336c0 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
336c4 309             | ' Check to see if the system clock has been changed.
336c4 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
336c8 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
336cc 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
336d0 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
336d4 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
336d8 30e 40 46 62 FD |                 dirl    dp
336dc 30f             | 
336dc 30f 28 02 64 FD |                 setq    #1
336e0 310 80 00 80 FF 
336e4 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
336e8 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
336ec 313             | .enable
336ec 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
336f0 314 41 46 62 FD |                 dirh    dp
336f4 315 1F 36 63 FD |                 waitx   _1us_
336f8 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
336fc 317             | 
336fc 317             |                 ' Handle Port protection enable and startup delay
336fc 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
33700 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
33704 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
33708 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3370c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
33710 31c             | 
33710 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
33714 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
33718 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3371c 31f 00 00 04 F6 |                 mov     0-0, #0
33720 320             | .regloop
33720 320             | 
33720 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
33720 320             | 
33720 320             | discon_entry
33720 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
33724 321             | 
33724 321             |               
33724 321             |         if HAVE_HIDPAD
33724 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
33728 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3372c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
33730 324 F7 01 68 FC |                 wrlong  #0,pb
33734 325             |         end
33734 325             |         if EMUPAD_MAX_PLAYER > 0
33734 325             |         end
33734 325             | 
33734 325             |                 ' Fall through to disconnected loop
33734 325             | 
33734 325             | '-----------------------------------------------------------------------------------------------------------------
33734 325             | ' Device connect handling (Section 7.1.7.3).
33734 325             | '-----------------------------------------------------------------------------------------------------------------
33734 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
33734 325             | ' device to connect (Section 7.1.7.3).
33734 325             | '-----------------------------------------------------------------------------------------------------------------
33734 325             | disconnected
33734 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
33738 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3373c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
33740 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
33744 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
33748 32a             |         if ACTIVITY_LED >= 0
33748 32a             |         end
33748 32a 22 A7 82 FA |                 rqpin   urx, dm
3374c 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
33750 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
33754 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
33758 32e             | .se1_test
33758 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3375c 32f FC FE BF FD |                 call    #poll_waitx
33760 330 22 A7 82 FA |                 rqpin   urx, dm
33764 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
33768 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3376c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
33770 334             | .se1            'SE1 is a fatal error condition
33770 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
33774 335 E4 FE BF FD |                 call    #poll_waitx
33778 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3377c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
33780 338             | .connect_test                                           ' Test lines until stable J/K state seen
33780 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
33784 339 22 A7 82 FA |                 rqpin   urx, dm
33788 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3378c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
33790 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
33794 33d             | connected
33794 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
33798 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3379c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
337a0 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
337a4 341             | .set_pulse
337a4 341 1A 64 63 FD |                 getct   _pulse_time_
337a8 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
337ac 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
337ac 343             | ' of 1ms and make a correction, if necessary.
337ac 343             | '                mov     htmp, _1ms_
337ac 343             | '                subs    htmp, iframe_delta
337ac 343             | '                adds    _frame1ms_clks_, htmp
337ac 343             | '                debug(udec(_frame1ms_clks_))
337ac 343             | 
337ac 343             |                 ' Fall through to idle/processing loop
337ac 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
337b0 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
337b4 345             | 
337b4 345             | hidle
337b4 345 22 A7 82 FA |                 rqpin   urx, dm
337b8 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
337bc 347 98 00 90 CD |         if_c    jmp     #.se0_test
337c0 348 24 06 70 FD |                 pollct3                         wc
337c4 349 68 00 90 3D |         if_nc   jmp     #.nopoll
337c8 34a 1A 94 63 FD |                 getct   hct3
337cc 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
337d0 34c             | 
337d0 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
337d4 34d 00 70 E3 F8 |                 getbyte htmp
337d8 34e             | 
337d8 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
337dc 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
337e0 350 40 00 90 AD |         if_z    jmp     #.poll
337e4 351             | 
337e4 351             |         if _HAVE_GAMEPAD
337e4 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
337e8 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
337ec 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
337f0 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
337f4 355 2C 00 90 AD |         if_z    jmp     #.poll
337f8 356             |         end
337f8 356             | 
337f8 356             |         if HAVE_MOUSE
337f8 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
337fc 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
33800 358 20 00 90 AD |         if_z    jmp     #.poll
33804 359             |         end
33804 359             | 
33804 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
33808 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3380c 35b 14 00 90 AD |         if_z    jmp     #.poll
33810 35c             | 
33810 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
33814 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
33818 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3381c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
33820 360             |         if HAVE_MOUSE
33820 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
33824 361             |         else
33824 361             |         end
33824 361             | 
33824 361             | .poll
33824 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
33828 362 2D EC 63 FD |                 call    pa
3382c 363             | .skip_poll
3382c 363             | 
3382c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
33830 364             | 
33830 364             | .nopoll
33830 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
33834 365 44 00 90 AD |         if_z    jmp     #hsuspend
33838 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3383c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
33840 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
33844 369 1A 84 63 FD |                 getct   hr0
33848 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3384c 36b             |         if ACTIVITY_LED >= 0
3384c 36b             |         end
3384c 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
33850 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
33854 36d 5C FF 9F FD |                 jmp     #hidle
33858 36e             | ' Check for extended SE0 state on the bus
33858 36e             | .se0_test
33858 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3385c 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
33860 370 22 A7 82 FA |                 rqpin   urx, dm
33864 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
33868 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3386c 373 24 F6 BF FD |                 call    #wait_txn_ok
33870 374 00 00 80 FF 
33874 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
33878 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
33878 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3387c 377             | 
3387c 377             | hsuspend
3387c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
33880 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
33884 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
33888 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3388c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
33890 37c 00 96 07 F6 |                 mov     mod_cnt, #0
33894 37d             | 
33894 37d             |                 ' Fall through to resume wait loop
33894 37d             | 
33894 37d             | hwait_resume
33894 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
33898 37e 02 86 47 F0 |                 shr     hr1, #2
3389c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
338a0 380             |         if ACTIVITY_LED >= 0
338a0 380             |         end
338a0 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
338a4 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
338a8 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
338ac 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
338b0 384 18 00 90 AD |         if_z    jmp     #.resume
338b4 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
338b8 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
338bc 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
338c0 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
338c4 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
338c8 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
338cc 38b             | .resume
338cc 38b 22 05 28 FC |                 wypin   #OUT_K, dm
338d0 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
338d4 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
338d8 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
338dc 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
338e0 390 1F 70 63 FD |                 waitx   htmp
338e4 391 22 07 28 FC |                 wypin   #OUT_J, dm
338e8 392 01 70 47 F0 |                 shr     htmp, #1
338ec 393 1F 70 63 FD |                 waitx   htmp
338f0 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
338f4 395 1A 92 62 FD |                 getct   iframe_ct_base
338f8 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
338fc 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33900 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
33904 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
33908 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3390c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
33910 39c             | 
33910 39c             | '------------------------------------------------------------------------------
33910 39c             | ' Send preamble to enable low-speed HUB ports
33910 39c             | '------------------------------------------------------------------------------
33910 39c             | ' On entry:
33910 39c             | ' On exit:
33910 39c             | '   USB baud rate set to low-speed
33910 39c             | '------------------------------------------------------------------------------
33910 39c             | utx_pre
33910 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33914 39d 40 46 62 FD |                 dirl    dp
33918 39e 28 02 64 FD |                 setq    #1
3391c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
33920 3a0 58 44 62 FD |                 drvl    dm
33924 3a1 59 46 62 FD |                 drvh    dp
33928 3a2             | 
33928 3a2 1E 00 00 FF 
3392c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
33930 3a4             | 
33930 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
33934 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
33938 3a6 28 02 64 3D |         if_nc   setq    #1
3393c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
33940 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
33944 3a9             | .l1
33944 3a9             | 
33944 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33948 3aa 40 46 62 FD |                 dirl    dp
3394c 3ab 28 02 64 FD |                 setq    #1
33950 3ac 80 00 80 FF 
33954 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
33958 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3395c 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
33960 3b0 41 46 62 FD |                 dirh    dp
33964 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33968 3b2             | 
33968 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3396c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
33970 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
33974 3b5             | 
33974 3b5             | hlut_end
33974 3b5             |                 fit     $400
33974 3b5             |                 orgh
33974                 | if OVERLAP_MEMORY
33974                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
33974                 | end
33974                 | '------------------------------------------------------------------------------
33974                 | ' Routines called from cog space.
33974                 | '------------------------------------------------------------------------------
33974                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
33974                 | '------------------------------------------------------------------------------
33974                 | 
33974                 | '------------------------------------------------------------------------------
33974                 | ' USB host cog initialization.
33974                 | '------------------------------------------------------------------------------
33974                 | usb_host_init
33974                 |                 ' Initialize buffer pointers
33974                 |         if OVERLAP_MEMORY
33974                 |         else
33974     40 15 B0 FE |                 loc     pb, #hid_descr
33978                 |         end
33978     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3397c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3397c                 |                 {
3397c                 |                 }
3397c                 |         
3397c                 |                 {
3397c                 |                 }
3397c                 |                 'loc     pb,#hkbd_report
3397c                 |                 'mov     hkbd_report_p,pb
3397c                 | 
3397c     08 1D B0 FE |                 loc     pb, #hub_descr
33980     F7 4D 02 F6 |                 mov     hub_descr_p, pb
33984     1D 1D B0 FE |                 loc     pb, #urx_buff
33988     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3398c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
33990     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
33994     9F 1D B0 FE |                 loc     pb, #con_desc_buff
33998     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3399c     18 15 B0 FE |                 loc     pb, #usb_cache_start
339a0     F7 55 02 F6 |                 mov     cache_start_p, pb
339a4     E9 1C B0 FE |                 loc     pb, #usb_cache_end
339a8     F7 57 02 F6 |                 mov     cache_end_p, pb
339ac                 | 
339ac                 |         if ERROR_LED >= 0
339ac                 |         end
339ac                 | 
339ac                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
339ac                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
339ac                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
339ac                 | ' Configure and enable the Serial Host USB port.
339ac     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
339b0                 | 
339b0                 | '------------------------------------------------------------------------------
339b0                 | ' Timing calculations happen before any interrupt(s) are enabled.
339b0                 | '------------------------------------------------------------------------------
339b0                 | ' On entry:
339b0                 | '   htmp - current CLKFREQ value.
339b0                 | '------------------------------------------------------------------------------
339b0                 | hinit_usb_timings
339b0                 | '                getct   htmp2
339b0     B8 59 02 F6 |                 mov     save_sysclk, htmp
339b4     8D 5B 80 FF 
339b8     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
339bc     18 30 63 FD |                 getqx   _12Mbps_
339c0     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
339c4     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
339c8     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
339cc     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
339d0     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
339d4     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
339d8     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
339dc     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
339e0     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
339e4     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
339e8     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
339ec     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
339f0     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
339f4     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
339f8     80 00 00 FF 
339fc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
33a00     18 2C 63 FD |                 getqx   _var_64_lower_
33a04     19 2E 63 FD |                 getqy   _var_64_upper_
33a08     28 2C 63 FD |                 setq    _var_64_lower_
33a0c     65 CD 1D FF 
33a10     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
33a14     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
33a18     01 00 00 FF 
33a1c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
33a20     18 2C 63 FD |                 getqx   _var_64_lower_
33a24     19 2E 63 FD |                 getqy   _var_64_upper_
33a28     28 2C 63 FD |                 setq    _var_64_lower_
33a2c     A1 07 00 FF 
33a30     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
33a34     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
33a38     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
33a3c     09 36 57 F0 |                 shr     _1us_, #9               wc
33a40     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
33a44     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
33a48     18 38 63 FD |                 getqx   _10us_
33a4c     09 38 57 F0 |                 shr     _10us_, #9              wc
33a50     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
33a54     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
33a58     18 3A 63 FD |                 getqx   _33us_
33a5c     09 3A 57 F0 |                 shr     _33us_, #9              wc
33a60     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
33a64     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
33a68     18 3C 63 FD |                 getqx   _txn_err_
33a6c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
33a70     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
33a74     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
33a78     18 3E 63 FD |                 getqx   _500us_
33a7c     09 3E 57 F0 |                 shr     _500us_, #9             wc
33a80     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
33a84     01 00 00 FF 
33a88     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
33a8c     18 40 63 FD |                 getqx   _txn_ok_ls_
33a90     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
33a94     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
33a98     01 00 00 FF 
33a9c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
33aa0     18 42 63 FD |                 getqx   _txn_ok_fs_
33aa4     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
33aa8     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
33aac     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
33ab0     05 00 00 FF 
33ab4     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
33ab8     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
33abc     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
33ac0     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
33ac4     1C 00 00 FF 
33ac8     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
33acc     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
33ad0     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
33ad4     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
33ad8     00 00 00 FF 
33adc     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
33ae0     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
33ae4     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
33ae8     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
33aec     04 00 00 FF 
33af0     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
33af4     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
33af8     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
33afc     8D 5B 00 FF 
33b00     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
33b04     18 4C 63 FD |                 getqx   _preamble_wait_
33b08     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
33b0c     01 00 00 FF 
33b10     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
33b14     18 2C 63 FD |                 getqx   _var_64_lower_
33b18     19 2E 63 FD |                 getqy   _var_64_upper_
33b1c     28 2C 63 FD |                 setq    _var_64_lower_
33b20     01 00 00 FF 
33b24     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
33b28     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
33b2c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
33b30     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
33b34     FF FF 7F FF 
33b38     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
33b3c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
33b40     A7 51 03 F6 |                 mov     _2ms_, _1ms_
33b44     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
33b48     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
33b4c     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
33b50     A7 55 03 F6 |                 mov     _4ms_, _1ms_
33b54     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
33b58     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
33b5c     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
33b60     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
33b64     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
33b68     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
33b6c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
33b70     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
33b74     A7 59 03 F6 |                 mov     _8ms_, _1ms_
33b78     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
33b7c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
33b80     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
33b84     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
33b88     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
33b8c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
33b90     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
33b94     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
33b98     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
33b9c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
33ba0     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
33ba4                 | '        _ret_   mov     _1sec_, save_sysclk
33ba4                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
33ba4                 | '                ret
33ba4                 | {
33ba4                 | }
33ba4                 | 
33ba4                 | '------------------------------------------------------------------------------
33ba4                 | ' Parse a configuration descriptor chain to see if the device is a recognized
33ba4                 | ' one. If it is, start the task progression that will configure the device for
33ba4                 | ' use.
33ba4                 | '------------------------------------------------------------------------------
33ba4                 | ' On entry:
33ba4                 | '   hconfig_base - start address of the cached config descriptor chain.
33ba4                 | ' On exit:
33ba4                 | '------------------------------------------------------------------------------
33ba4                 | hparse_con_desc
33ba4     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
33ba8     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
33bac     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
33bb0     4E 70 FF F9 |                 movbyts htmp,#%%1032
33bb4     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
33bb8                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
33bb8                 | 
33bb8     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
33bbc     6E ED 03 F1 |                 add     pa, hconfig_base
33bc0     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
33bc4                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
33bc4                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
33bc4                 | ' that defines a keyboard and/or mouse.
33bc4     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
33bc8                 | .next_intf
33bc8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
33bcc     BC 01 90 3D |         if_ae   jmp     #hset_config
33bd0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
33bd4     75 F3 03 F1 |                 add     ptrb, hnext_desc
33bd8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
33bdc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
33be0     0C 00 90 AD |         if_z    jmp     #.intf
33be4     80 71 C7 FA |                 rdbyte  htmp, ptrb
33be8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
33bec     D8 FF 9F FD |                 jmp     #.next_intf
33bf0                 | .intf
33bf0     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
33bf4     00 90 07 F6 |                 mov     hpar3, #0
33bf8     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
33bfc     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
33c00     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
33c04     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
33c08                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
33c08                 | 
33c08                 | .endp
33c08     80 71 C7 FA |                 rdbyte  htmp, ptrb
33c0c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
33c10     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
33c14     78 00 90 3D |         if_ae   jmp     #.get_device
33c18     6E F3 03 F6 |                 mov     ptrb, hconfig_base
33c1c     75 F3 03 F1 |                 add     ptrb, hnext_desc
33c20     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
33c24     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
33c28     64 00 90 AD |         if_z    jmp     #.get_device
33c2c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
33c30     04 00 90 AD |         if_z    jmp     #.get_ep
33c34     D0 FF 9F FD |                 jmp     #.endp
33c38                 | .get_ep
33c38     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
33c3c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
33c40     0F 86 67 F0 |                 shl     hr1, #8 + 7
33c44     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
33c48     3F 00 00 FF 
33c4c     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
33c50     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
33c54     00 8E 0F F2 |                 cmp     hpar2, #0               wz
33c58     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
33c5c     00 90 0F F2 |                 cmp     hpar3, #0               wz
33c60     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
33c64     A0 FF 9F FD |                 jmp     #.endp
33c68                 | .in_ep
33c68     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
33c6c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
33c70                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
33c70     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
33c74     C2 89 DB F8 |                 setbyte hr2, hr0, #3
33c78     8C FF 9F FD |                 jmp     #.endp
33c7c                 | .out_ep
33c7c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
33c80     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
33c84                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
33c84     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
33c88     C2 8B DB F8 |                 setbyte hr3, hr0, #3
33c8c     78 FF 9F FD |                 jmp     #.endp
33c90                 | 
33c90                 | .get_device
33c90     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
33c94     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
33c98     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
33c9c     68 00 90 AD |         if_z    jmp     #.gamepad
33ca0     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
33ca4     AC 00 90 AD |         if_z    jmp     #.hub
33ca8     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
33cac     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
33cb0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
33cb4     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
33cb8     4C 00 90 AD |         if_z    jmp     #.gamepad
33cbc     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
33cc0     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
33cc4                 | .keyboard
33cc4     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
33cc8                 |         if HAVE_MOUSE
33cc8     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
33ccc                 |         else
33ccc                 |         end
33ccc     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
33cd0     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
33cd4     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33cd8     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
33cdc     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
33ce0     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
33ce4                 |                 'debug(udec(kb_intf_num))
33ce4                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
33ce4     E0 FE 9F FD |                 jmp     #.next_intf
33ce8                 | if HAVE_MOUSE
33ce8                 | .mouse
33ce8     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
33cec     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
33cf0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
33cf4     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
33cf8     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33cfc                 |                 'getbyte ms_interval, hr2, #3
33cfc     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
33d00     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
33d04                 |                 'debug(udec(kb_intf_num))
33d04                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
33d04     C0 FE 9F FD |                 jmp     #.next_intf
33d08                 | end
33d08                 | .gamepad
33d08     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
33d0c     C7 71 63 F5 |                 xor     htmp, hpar2
33d10     3F 00 00 FF 
33d14     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33d18     AC FE 9F AD |         if_z    jmp     #.next_intf
33d1c                 |         if HAVE_MOUSE
33d1c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
33d20     C7 71 63 F5 |                 xor     htmp, hpar2
33d24     3F 00 00 FF 
33d28     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33d2c     98 FE 9F AD |         if_z    jmp     #.next_intf
33d30                 |         end
33d30     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
33d34     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
33d38     8C FE 9F 5D |         if_nz   jmp     #.next_intf
33d3c                 | 
33d3c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33d40     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
33d44     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33d48     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
33d4c     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
33d50                 |                 'debug(udec(gp_intf_num))
33d50                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
33d50     74 FE 9F FD |                 jmp     #.next_intf
33d54                 | .hub
33d54     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
33d58     6C FE 9F 5D |         if_nz   jmp     #.next_intf
33d5c     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
33d60     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
33d64     60 FE 9F 5D |         if_nz   jmp     #.next_intf
33d68     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
33d6c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
33d70     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
33d74     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
33d78     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
33d7c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33d80     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
33d84     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
33d88                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
33d88     3C FE 9F FD |                 jmp     #.next_intf
33d8c                 | 
33d8c                 | '------------------------------------------------------------------------------
33d8c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
33d8c                 | ' it according to its function, or functions. In the case of this boot protocol
33d8c                 | ' keyboard/mouse class driver:
33d8c                 | ' - SetConfiguration(config_num)
33d8c                 | ' - SetProtocol(boot)
33d8c                 | ' - SetIdle(indefinite)
33d8c                 | ' - Enter the device interrupt IN polling task stage.
33d8c                 | '------------------------------------------------------------------------------
33d8c                 | ' On entry:
33d8c                 | ' On exit:
33d8c                 | '------------------------------------------------------------------------------
33d8c                 | hset_config
33d8c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
33d8c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
33d8c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
33d90     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33d94     00 00 0C F2 |                 cmp     0-0, #0                 wz
33d98     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
33d9c                 |         if HAVE_MOUSE
33d9c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
33da0                 |         end
33da0     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
33da4     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
33da8                 | .set_config
33da8     6C 0E D0 FE |                 loc     ptra, #set_config
33dac     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
33db0     6E ED 03 F1 |                 add     pa, hconfig_base
33db4     F6 8D C3 FA |                 rdbyte  hpar1, pa
33db8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
33dbc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
33dc0     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
33dc4     A0 02 A0 FD |                 call    #control_write
33dc8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33dcc     2D 00 64 5D |         if_nz   ret
33dd0                 | .kbd_config
33dd0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
33dd4     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
33dd8                 | 
33dd8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
33ddc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33de0     3F 00 00 FF 
33de4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33de8     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
33dec                 | 
33dec     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
33df0     34 0E D0 FE |                 loc     ptra, #set_protocol
33df4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
33df8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33dfc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
33e00     A0 02 A0 FD |                 call    #control_write
33e04     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33e08     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
33e0c     E4 02 90 5D |         if_nz   jmp     #.notify_client
33e10     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
33e14     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
33e18     30 03 B0 FD |                 call    #hset_idle
33e1c                 |                 'cmp     retval, #PID_ACK        wz
33e1c                 |         'if_nz   mov     hkbd_ep_addr, #0
33e1c                 |         'if_nz   jmp     #.notify_client
33e1c     A8 99 02 F6 |                 mov     hctwait, _2ms_
33e20     EF 02 A0 FD |                 call    #poll_waitx
33e24     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
33e28     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
33e2c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
33e30     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
33e34     2C 03 B0 FD |                 call    #hset_kbdled_report
33e38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33e3c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
33e40     B0 02 90 5D |         if_nz   jmp     #.notify_client
33e44     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
33e48     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33e4c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33e50     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33e54     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
33e58     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
33e5c     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
33e60     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
33e64     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
33e68     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
33e6c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
33e70                 |         if !!HAVE_MOUSE
33e70                 |         end
33e70                 | 
33e70                 | .mouse_config
33e70                 | if HAVE_MOUSE
33e70     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
33e74     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
33e78     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
33e7c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33e80     3F 00 00 FF 
33e84     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33e88     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
33e8c                 | 
33e8c                 |                 debug("mouse passed addr check")
33e8c                 | 
33e8c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
33e90     00 00 80 FF 
33e94     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
33e98     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
33e9c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33ea0     55 02 A0 FD |                 call    #control_read
33ea4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33ea8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
33eac     44 02 90 5D |         if_nz   jmp     #.notify_client
33eb0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
33eb4     56 01 00 F6 |                 mov     0-0, total_data
33eb8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33ebc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
33ebc                 | 
33ebc     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
33ec0     64 0D D0 FE |                 loc     ptra, #set_protocol
33ec4     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
33ec8     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33ecc     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
33ed0     A0 02 A0 FD |                 call    #control_write
33ed4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33ed8     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
33edc     14 02 90 5D |         if_nz   jmp     #.notify_client
33ee0                 |                 debug("mouse passed SetProtocol")
33ee0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
33ee4     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
33ee8     60 02 B0 FD |                 call    #hset_idle
33eec                 |                 'cmp     retval, #PID_ACK        wz
33eec                 |         'if_nz   mov     hmouse_ep_addr, #0
33eec                 |         'if_nz   jmp     #.notify_client
33eec                 |                 debug("mouse passed SetIdle")
33eec     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
33ef0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33ef4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33ef8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33efc     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
33f00     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
33f04     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
33f08     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
33f0c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
33f10     3F 00 00 FF 
33f14     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
33f18     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
33f1c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
33f20     D0 01 90 FD |                 jmp     #.notify_client
33f24                 | end
33f24                 | .gamepad_config
33f24                 | if _HAVE_GAMEPAD
33f24     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33f28     00 00 0C F2 |                 cmp     0-0, #0                 wz
33f2c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
33f30     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
33f34     00 70 03 F6 |                 mov     htmp, 0-0
33f38     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33f3c     3F 00 00 FF 
33f40     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33f44     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
33f48                 | 
33f48     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
33f4c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
33f50     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33f54     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33f58     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33f5c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33f60     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
33f64     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
33f68     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
33f6c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33f70     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33f74     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
33f78     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
33f7c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
33f80                 | 
33f80                 |                 if EMUPAD_MAX_PLAYER > 0
33f80                 |                 
33f80                 | .rule_loop           
33f80                 |                 end
33f80                 | 
33f80     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
33f84     5C 00 90 AD |         if_e    jmp     #.xinput
33f88     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
33f8c     00 70 03 F6 |                 mov     htmp,0-0
33f90     01 A6 02 FF 
33f94     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
33f98     7C 00 90 AD |         if_e    jmp     #.ps3
33f9c                 | 
33f9c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
33fa0     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
33fa4     00 00 80 5F 
33fa8     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
33fac     03 00 80 AF 
33fb0     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
33fb4     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
33fb8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33fbc     55 02 A0 FD |                 call    #control_read
33fc0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33fc4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
33fc8     00 00 04 56 |         if_nz   mov     0-0, #0
33fcc     24 01 90 5D |         if_nz   jmp     #.notify_client
33fd0     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
33fd4     56 01 00 F6 |                 mov     0-0, total_data
33fd8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33fdc                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
33fdc                 | 
33fdc     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
33fe0     10 01 90 FD |                 jmp     #.notify_client
33fe4                 | .xinput
33fe4     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
33fe8     2D EF 03 F6 |                 mov     pb,hdev_port
33fec     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
33ff0     03 EE 27 F3 |                 fle     pb,#3
33ff4     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
33ff8     02 EF 47 FC |                 wrbyte  pb, ptra[2]
33ffc                 | 
33ffc     03 B0 06 F6 |                 mov     pkt_data, #3
34000     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
34004     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
34008     5A 00 A0 FD |                 call    #txn_out
3400c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
34010                 | 
34010     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
34014     DC 00 90 FD |                 jmp     #.notify_client
34018                 | .ps3
34018     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3401c     2D EF 03 F6 |                 mov     pb,hdev_port
34020     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
34024     04 EE 27 F3 |                 fle     pb,#4
34028     F7 EF C3 F9 |                 decod   pb
3402c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
34030                 | 
34030     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
34034     00 0C D0 FE |                 loc     ptra, #set_report
34038     01 00 80 FF 
3403c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
34040     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34044     03 61 5C FC |                 wrword  #48, ptra[wLength]
34048     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3404c     A0 02 A0 FD |                 call    #control_write
34050                 | 
34050     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
34054     E0 0B D0 FE |                 loc     ptra, #set_report
34058     01 00 80 FF 
3405c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
34060     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34064     03 09 5C FC |                 wrword  #4, ptra[wLength]
34068     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3406c     A0 02 A0 FD |                 call    #control_write
34070     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
34074     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
34078     00 00 04 56 |         if_nz   mov     0-0, #0
3407c     74 00 90 5D |         if_nz   jmp     #.notify_client
34080                 | 
34080     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
34084     6C 00 90 FD |                 jmp     #.notify_client
34088                 | end
34088                 | 
34088                 | .hub_config
34088     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3408c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
34090     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
34094     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
34098     3F 00 00 FF 
3409c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
340a0     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
340a4                 | 
340a4     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
340a8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
340ac     26 EF 03 F6 |                 mov     pb, hub_descr_p
340b0     55 02 A0 FD |                 call    #control_read
340b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
340b8     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
340bc     34 00 90 5D |         if_nz   jmp     #.notify_client
340c0                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
340c0                 | 
340c0     26 F1 03 F6 |                 mov     ptra, hub_descr_p
340c4     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
340c8     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
340cc                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
340cc                 | .pwr_loop
340cc     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
340d0     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
340d4     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
340d8     A0 02 A0 FD |                 call    #control_write
340dc     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
340e0                 | 
340e0     B1 99 02 F6 |                 mov     hctwait, _500ms_
340e4     B0 99 02 F1 |                 add     hctwait, _100ms_
340e8     EF 02 A0 FD |                 call    #poll_waitx
340ec                 | 
340ec     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
340f0     00 00 90 FD |                 jmp     #.notify_client
340f4                 | 
340f4                 | .notify_client
340f4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
340f8     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
340fc                 |                 debug(uhex_long(hdev_type,hdev_type+1))
340fc                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
340fc     2D 00 64 FD |                 ret
34100                 | 
34100                 | '------------------------------------------------------------------------------
34100                 | ' Initialize the keyboard/mouse data area to start-up values.
34100                 | '------------------------------------------------------------------------------
34100                 | ' On entry:
34100                 | ' On exit:
34100                 | '------------------------------------------------------------------------------
34100                 | init_kbdm_data
34100     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
34104     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
34108                 | 
34108     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3410c     2B ED 03 F6 |                 mov     pa, cache_end_p
34110                 | .loop
34110     61 01 4C FC |                 wrbyte  #0, ptra++
34114     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
34118     F4 FF 9F CD |         if_b    jmp     #.loop
3411c                 |         
3411c                 |         if EMUPAD_MAX_PLAYER > 0
3411c                 |         end
3411c                 | 
3411c                 | 
3411c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
34120                 | .regloop
34120     00 EC 8F F9 |                 altd    pa
34124     00 00 04 F6 |                 mov     0-0, #0
34128     01 EC 07 F1 |                 add     pa, #1
3412c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
34130     EC FF 9F 5D |         if_nz   jmp     #.regloop
34134                 | 
34134     E1 E1 61 FF 
34138     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3413c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
34140     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
34144     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
34148                 | 
34148     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3414c                 | 
3414c                 | '------------------------------------------------------------------------------
3414c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3414c                 | ' function.
3414c                 | '------------------------------------------------------------------------------
3414c                 | ' On entry:
3414c                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3414c                 | '   hpar2 - index number of the target interface.
3414c                 | ' On exit:
3414c                 | '------------------------------------------------------------------------------
3414c                 | hset_idle
3414c     A8 99 02 F6 |                 mov     hctwait, _2ms_
34150     EF 02 A0 FD |                 call    #poll_waitx
34154     D8 0A D0 FE |                 loc     ptra, #set_idle
34158     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3415c     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
34160     A0 02 80 FD |                 jmp     #control_write
34164                 | 
34164                 | '------------------------------------------------------------------------------
34164                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
34164                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
34164                 | '------------------------------------------------------------------------------
34164                 | ' On entry:
34164                 | '   ep_addr_pid - device address and enpoint for the request.
34164                 | ' On exit:
34164                 | '   retval - transaction result.
34164                 | '------------------------------------------------------------------------------
34164                 | hset_kbdled_report
34164     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
34168     CC 0A D0 FE |                 loc     ptra, #set_report
3416c     01 00 80 FF 
34170     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
34174     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34178     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3417c     27 EF 03 F6 |                 mov     pb, urx_buff_p
34180     F7 77 42 FC |                 wrbyte  kb_led_states, pb
34184     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
34188                 | 
34188                 | '------------------------------------------------------------------------------
34188                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
34188                 | '------------------------------------------------------------------------------
34188                 | ' On entry:
34188                 | ' On exit:
34188                 | '------------------------------------------------------------------------------
34188                 | hget_kbd_in_report
34188     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3418c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34190     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
34194     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
34198     CF 02 A0 FD |                 call    #do_int_in
3419c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
341a0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
341a4                 | 
341a4     00 90 0F F2 |                 cmp     hpar3, #0               wz
341a8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
341ac                 | 
341ac     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
341b0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
341b4     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
341b8     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
341bc                 | 
341bc     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
341c0     18 00 B0 FD |                 call    #hkbd_compare
341c4                 |         if EMUPAD_MAX_PLAYER > 0
341c4                 |         end
341c4                 | 
341c4                 | .led_check
341c4     3B 71 03 F6 |                 mov     htmp, kb_led_states
341c8     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
341cc     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
341d0     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
341d4     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
341d8     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
341dc                 | 
341dc                 | '------------------------------------------------------------------------------
341dc                 | ' Compare current and previous keyboard data buffers for keypress changes.
341dc                 | '------------------------------------------------------------------------------
341dc                 | hkbd_compare
341dc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
341e0     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
341e4     61 73 07 FB |                 rdlong  htmp1, ptra++
341e8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
341ec     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
341f0     61 73 07 FB |                 rdlong  htmp1, ptra++
341f4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
341f8     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
341fc     2D 00 64 AD |         if_z    ret
34200                 | 
34200     B4 13 D0 FE |                 loc     ptra, #hkbd_report
34204                 | 
34204                 |                 ' Handle modifiers
34204     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
34208     00 87 C7 FA |                 rdbyte  hr1, ptra
3420c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
34210     63 86 63 FD |                 mergew  hr1
34214     08 EC 07 F6 |                 mov     pa,#8
34218                 | .modloop
34218     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3421c     E8 8C 07 F6 |                 mov     hpar1,#$E8
34220     F6 8D 83 F1 |                 sub     hpar1,pa
34224     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
34228     FB ED 6F FB |                 djnz    pa,#.modloop
3422c                 | 
3422c     6F E0 75 FD | .release        modc    _set    wc
34230                 |                 'alts    hdev_port, #hid_report_p
34230                 |                 'mov     ptra, hid_report_p
34230     02 F0 07 F1 |                 add     ptra, #2
34234     06 EC 07 F6 |                 mov     pa, #6
34238     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3423c     20 00 90 AD |         if_z    jmp     #.rl3
34240     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
34244     02 F2 07 F1 |                 add     ptrb, #2
34248     06 EE 07 F6 |                 mov     pb, #6
3424c     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
34250     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
34254     08 00 90 AD |         if_z    jmp     #.rl3
34258     FC EF 6F FB |                 djnz    pb, #.rl2
3425c     68 00 B0 FD |                 call    #hkbd_translate
34260     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
34264                 | 
34264     00 90 07 F6 |                 mov     hpar3, #0
34268     1F 90 27 F4 |                 bith    hpar3, #31
3426c                 | 
3426c     6F 00 74 FD | .press          modc    _clr    wc
34270     27 F1 03 F6 |                 mov     ptra, urx_buff_p
34274     02 F0 07 F1 |                 add     ptra, #2
34278     06 EC 07 F6 |                 mov     pa, #6
3427c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
34280     20 00 90 AD |         if_z    jmp     #.pl3
34284     30 13 F0 FE |                 loc     ptrb, #hkbd_report
34288     02 F2 07 F1 |                 add     ptrb, #2
3428c     06 EE 07 F6 |                 mov     pb, #6
34290     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
34294     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
34298     08 00 90 AD |         if_z    jmp     #.pl3
3429c     FC EF 6F FB |                 djnz    pb, #.pl2
342a0     24 00 B0 FD |                 call    #hkbd_translate
342a4     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
342a8                 | 
342a8     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
342ac     08 13 F0 FE |                 loc     ptrb, #hkbd_report
342b0     28 02 64 FD |                 setq #1
342b4     61 73 07 FB |                 rdlong  htmp1, ptra++
342b8     28 02 64 FD |                 setq #1
342bc     E1 73 67 FC |                 wrlong  htmp1, ptrb++
342c0     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
342c4                 | 
342c4     2D 00 64 FD |                 ret
342c8                 | 
342c8                 | '------------------------------------------------------------------------------
342c8                 | ' Translate keyboard scancode to ASCII
342c8                 | '------------------------------------------------------------------------------
342c8                 | ' On entry:
342c8                 | '   hpar1 - scancode
342c8                 | '   hpar2 - key modifiers state
342c8                 | '       c - pressed (0) or released (1) flag
342c8                 | ' On exit:
342c8                 | '   hpar1 - bit     31 = 0 pressed, 1 released
342c8                 | '               30..17 = unused
342c8                 | '                   18 = scroll-lock state 
342c8                 | '                   17 = caps-lock state
342c8                 | '                   16 = num-lock state 
342c8                 | '                15..8 = key modifiers state
342c8                 | '                 7..0 = scancode
342c8                 | '------------------------------------------------------------------------------
342c8                 | hkbd_translate
342c8     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
342cc     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
342d0     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
342d4     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
342d8     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
342dc     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
342e0                 | 
342e0                 |         if EMUPAD_MAX_PLAYER > 0
342e0                 | 
342e0                 |         if EMUPAD_BT0_BIT >= 0
342e0                 |         end
342e0                 |         if EMUPAD_BT1_BIT >= 0
342e0                 |         end
342e0                 |         if EMUPAD_BT2_BIT >= 0
342e0                 |         end
342e0                 |         if EMUPAD_BT3_BIT >= 0
342e0                 |         end
342e0                 |         if EMUPAD_BT4_BIT >= 0
342e0                 |         end
342e0                 |         if EMUPAD_BT5_BIT >= 0
342e0                 |         end
342e0                 |         if EMUPAD_BT6_BIT >= 0
342e0                 |         end
342e0                 |         if EMUPAD_BT7_BIT >= 0
342e0                 |         end
342e0                 |         if EMUPAD_BT8_BIT >= 0
342e0                 |         end
342e0                 |         if EMUPAD_BT9_BIT >= 0
342e0                 |         end
342e0                 | 
342e0                 |         end
342e0     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
342e4     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
342e8     1F 8C 47 F4 |                 bitc    hpar1, #31
342ec                 |         if KEYQUEUE_SIZE > 0
342ec     C4 09 B0 FE |                 loc pb,#keyq_head
342f0     F7 71 E3 FA |                 rdword htmp,pb
342f4     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
342f8     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
342fc     B8 75 03 F6 |                 mov htmp2,htmp
34300     04 74 07 FA |                 mul htmp2,#4
34304     F7 75 03 F1 |                 add htmp2,pb
34308     02 74 07 F1 |                 add htmp2,#2
3430c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
34310     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
34314     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
34318     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3431c                 |         end
3431c     2D 00 7C FD |                 ret wcz
34320                 | 
34320                 | if HAVE_MOUSE
34320                 | '------------------------------------------------------------------------------
34320                 | ' Execute an IN interrupt transaction to poll for mouse activity.
34320                 | '------------------------------------------------------------------------------
34320                 | ' On entry:
34320                 | ' On exit:
34320                 | '------------------------------------------------------------------------------
34320                 | hget_mouse_in_report
34320     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
34324     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34328     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3432c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
34330     CF 02 A0 FD |                 call    #do_int_in
34334     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34338     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3433c                 | 
3433c     00 90 0F F2 |                 cmp     hpar3, #0               wz
34340     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34344                 | 
34344     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
34348     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3434c     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
34350     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
34354                 | 
34354     27 F1 03 F6 |                 mov     ptra, urx_buff_p
34358     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3435c     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
34360     01 90 87 31 |         if_ae   sub     hpar3, #1
34364                 | 
34364     40 09 90 FE |                 loc     pa, #mouse_limits
34368     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3436c                 | 
3436c                 |                 ' load xacc,yacc,zacc
3436c     28 04 64 FD |                 setq    #3-1
34370     80 87 07 FB |                 rdlong  hr1,ptrb
34374                 |                 ' load limits and outptr
34374     28 04 64 FD |                 setq    #3-1
34378     F6 73 03 FB |                 rdlong  htmp1,pa
3437c                 | 
3437c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
34380     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
34384     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
34388     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3438c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
34390     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
34394     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
34398     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3439c                 |               
3439c                 | 
3439c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
343a0     07 70 67 F7 |                 signx   htmp, #7
343a4     B8 87 03 F1 |                 add     hr1,htmp
343a8     00 72 0F F2 |                 cmp     htmp1,#0 wz
343ac     B9 87 63 53 |         if_ne   fles    hr1,htmp1
343b0     00 86 47 53 |         if_ne   fges    hr1,#0
343b4                 | 
343b4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
343b8     07 70 67 F7 |                 signx   htmp, #7
343bc     B8 89 03 F1 |                 add     hr2,htmp
343c0     00 74 0F F2 |                 cmp     htmp2,#0 wz
343c4     BA 89 63 53 |         if_ne   fles    hr2,htmp2
343c8     00 88 47 53 |         if_ne   fges    hr2,#0
343cc                 |                 
343cc                 | 
343cc     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
343d0     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
343d4     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
343d8     B8 8B 03 A1 |         if_z    add     hr3,htmp
343dc                 | 
343dc     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
343e0     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
343e4                 | 
343e4                 |                 ' write back accumulators
343e4     28 04 64 FD |                 setq    #3-1
343e8     80 87 67 FC |                 wrlong  hr1,ptrb
343ec                 |                 ' if outptr set, write X/Y words
343ec     00 76 0F F2 |                 cmp htmp3,#0                    wz
343f0     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
343f4     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
343f8     2D 00 64 FD |                 ret
343fc                 | end
343fc                 | 
343fc                 | '------------------------------------------------------------------------------
343fc                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
343fc                 | '------------------------------------------------------------------------------
343fc                 | ' On entry:
343fc                 | ' On exit:
343fc                 | '------------------------------------------------------------------------------
343fc                 | if _HAVE_GAMEPAD
343fc                 | hget_gp_in_report
343fc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
34400     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
34404                 | 
34404     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34408     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3440c     00 90 E3 F8 |                 getbyte hpar3
34410     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
34414     CF 02 A0 FD |                 call    #do_int_in
34418     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3441c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
34420                 | 
34420     00 90 0F F2 |                 cmp     hpar3, #0               wz
34424     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34428                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
34428                 | 
34428     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3442c     00 70 E3 F8 |                 getbyte htmp                            ' |
34430     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
34434     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
34438     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3443c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
34440     B8 01 C0 F8 |                 setbyte htmp                            ' |
34444                 | 
34444                 | ' Note: the following code compares the current and previous reports
34444                 | ' and process the data if there are changes to ease the debug output.
34444                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
34444                 | ' gpPreReport buffer.
34444                 | 
34444                 |                 ' ----- start of block to remove
34444                 |                 {
34444                 |                 }
34444                 |                 ' ----- end of block to remove
34444     F4 04 90 FE |                 loc pa,#hpad_translate
34448     2A EC 63 FD |                 push pa
3444c                 | 
3444c                 |                 ' FALL THROUGH !!!!
3444c                 | 
3444c                 | '------------------------------------------------------------------------------
3444c                 | ' Decode controller report
3444c                 | '------------------------------------------------------------------------------
3444c                 | hid_decode
3444c                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3444c     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
34450     00 04 00 FF 
34454     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
34458                 | 
34458     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3445c                 | 
3445c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
34460     00 2A E3 F8 |                 getbyte hidr_type
34464     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
34468     34 02 90 AD |         if_z    jmp     #hpad_xinput
3446c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
34470     1C 03 90 AD |         if_z    jmp     #hpad_ps3
34474     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
34478     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3447c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
34480                 |                 
34480                 | 
34480                 | '------------------------------------------------------------------------------
34480                 | ' Handle HID controller (or mouse now
34480                 | ' On entry:
34480                 | '   ptrb - controller report
34480                 | '------------------------------------------------------------------------------
34480                 | hpad_hid
34480     1B 01 A0 FD |                 call    #get_hid_descr_buffer
34484     F7 F1 03 F6 |                 mov     ptra, pb
34488     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3448c     00 EC 03 F6 |                 mov     pa, 0-0
34490                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
34490     19 2A 3B FF 
34494     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
34498                 | 
34498                 | .next
34498     00 EC 5F F2 |                 cmps    pa, #0      wcz
3449c     2D 00 7C ED |         if_be   ret     wcz
344a0                 | 
344a0     61 8D C7 FA |                 rdbyte  hpar1, ptra++
344a4     01 EC 87 F1 |                 sub     pa, #1
344a8     00 8E 07 F6 |                 mov     hpar2, #0
344ac                 | 
344ac     C6 71 03 F6 |                 mov     htmp, hpar1
344b0     03 70 07 F5 |                 and     htmp, #$03
344b4     01 70 0F F2 |                 cmp     htmp, #1    wz
344b8     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
344bc     07 8E 67 A7 |         if_z    signx   hpar2,#7
344c0     01 EC 87 A1 |         if_z    sub     pa, #1
344c4     02 70 0F F2 |                 cmp     htmp, #2    wz
344c8     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
344cc     0F 8E 67 A7 |         if_z    signx   hpar2,#15
344d0     02 EC 87 A1 |         if_z    sub     pa, #2
344d4     03 70 0F F2 |                 cmp     htmp, #3    wz
344d8     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
344dc     04 EC 87 A1 |         if_z    sub     pa, #4
344e0                 | 
344e0     FC 8C 07 F5 |                 and     hpar1, #$FC
344e4                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
344e4                 | 
344e4     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
344e8     0C 01 90 AD |         if_z    jmp     #.report_id
344ec     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
344f0     24 01 90 AD |         if_z    jmp     #.usage_page
344f4     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
344f8     2C 01 90 AD |         if_z    jmp     #.usage
344fc     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
34500     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
34504     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
34508     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3450c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
34510     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
34514     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
34518     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3451c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
34520     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
34524     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
34528     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3452c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
34530     64 FF 9F 5D |         if_nz   jmp     #.next
34534                 | 
34534     D8 1D A7 FB |                 tjf     hidr_state,#.next
34538                 | 
34538     03 8E 07 F5 |                 and     hpar2, #$03
3453c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
34540     18 00 90 5D |         if_nz   jmp     #.skip
34544                 | 
34544     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
34548     20 00 90 AD |         if_z    jmp     #.axes
3454c     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
34550     5C 00 90 AD |         if_z    jmp     #.hats
34554     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
34558     70 00 90 AD |         if_z    jmp     #.buttons
3455c                 | .skip
3455c     8F 71 03 F6 |                 mov     htmp, hidr_size
34560     90 71 03 FA |                 mul     htmp, hidr_count
34564     B8 23 03 F1 |                 add     hidr_offset, htmp
34568     2C FF 9F FD |                 jmp     #.next
3456c                 | .axes
3456c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3456c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
34570     90 87 03 F6 |                 mov     hr1, hidr_count
34574                 | .l1
34574     91 8D 03 F6 |                 mov     hpar1, hidr_offset
34578     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3457c     04 03 B0 FD |                 call    #hpad_getbits
34580     64 03 B0 FD |                 call    #hpad_normalize
34584     06 84 1F F2 |                 cmp     hr0, #6         wcz
34588     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3458c     00 88 43 C8 |         if_b    getnib  hr2
34590     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
34594     5F 01 20 C9 |         if_b    setword retval
34598     01 84 07 C1 |         if_b    add     hr0, #1
3459c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
345a0     F4 87 6F FB |                 djnz    hr1, #.l1
345a4                 | 
345a4     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
345a8     01 1C 07 F6 |                 mov     hidr_state, #1
345ac     E8 FE 9F FD |                 jmp     #.next
345b0                 | .hats
345b0                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
345b0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
345b4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
345b8     C8 02 B0 FD |                 call    #hpad_getbits
345bc     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
345c0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
345c4     01 1C 07 F6 |                 mov     hidr_state, #1
345c8     90 FF 9F FD |                 jmp     #.skip
345cc                 | .buttons
345cc                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
345cc     91 8D 03 F6 |                 mov     hpar1, hidr_offset
345d0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
345d4     90 8F 03 FA |                 mul     hpar2, hidr_count
345d8     A8 02 B0 FD |                 call    #hpad_getbits
345dc     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
345e0     B8 BF 62 F0 |                 shl     retval, htmp
345e4     5F 17 43 F5 |                 or      hidr_buttons, retval
345e8     90 71 03 F1 |                 add     htmp, hidr_count
345ec     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
345f0     01 1C 07 F6 |                 mov     hidr_state, #1
345f4     64 FF 9F FD |                 jmp     #.skip
345f8                 | .report_id
345f8     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
345fc     2D 00 7C 5D |         if_nz   ret     wcz
34600     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
34604     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
34608     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3460c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
34610     01 F2 87 51 |         if_nz   sub     ptrb,#1
34614     80 FE 9F FD |                 jmp     #.next
34618                 | .usage_page
34618     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3461c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
34620     04 1C 07 A6 |         if_z    mov     hidr_state, #4
34624     70 FE 9F FD |                 jmp     #.next
34628                 | .usage
34628     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3462c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
34630     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
34634     01 1C 07 A6 |         if_z    mov     hidr_state, #1
34638     5C FE 9F AD |         if_z    jmp     #.next
3463c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
34640     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
34644     01 1C 07 A6 |         if_z    mov     hidr_state, #1
34648     4C FE 9F AD |         if_z    jmp     #.next
3464c     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
34650     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
34654     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
34658     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3465c     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
34660     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
34664     10 00 90 AD |         if_z    jmp     #.usage_axis
34668     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3466c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
34670     03 1C 07 A6 |         if_z    mov     hidr_state, #3
34674     20 FE 9F FD |                 jmp     #.next
34678                 | .usage_axis
34678     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3467c     18 FE 9F CD |         if_b    jmp     #.next
34680     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
34684     C7 01 00 F8 |                 setnib  hpar2
34688                 | 
34688     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3468c     C7 8F C3 F9 |                 decod   hpar2
34690     C7 0F 43 F5 |                 or      hidr_flags, hpar2
34694                 | 
34694     01 24 07 F1 |                 add     hidr_usage_idx, #1
34698     02 1C 07 F6 |                 mov     hidr_state, #2
3469c     F8 FD 9F FD |                 jmp     #.next
346a0                 | 
346a0                 | '------------------------------------------------------------------------------
346a0                 | ' Handle XInput controller
346a0                 | ' On entry:
346a0                 | '   ptrb - controller report
346a0                 | '------------------------------------------------------------------------------
346a0                 | '   Default implementation translates the report to a pseudo-defacto hid
346a0                 | '   standard and jumps to hpad_translate for actions.
346a0                 | '   Implementors may take specific actions for this kind of controller.
346a0                 | '------------------------------------------------------------------------------
346a0                 | hpad_xinput
346a0     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
346a4     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
346a8     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
346ac     14 70 0F F2 |                 cmp     htmp, #$14      wz
346b0     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
346b4                 | 
346b4                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
346b4                 | 
346b4     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
346b8     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
346bc                 | 
346bc     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
346c0     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
346c4     5F BF 22 F6 |                 not     retval
346c8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
346cc     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
346d0     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
346d4     5F BF 22 F6 |                 not     retval
346d8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
346dc                 | 
346dc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
346e0     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
346e4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
346e8     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
346ec     F8 01 B0 FD |                 call    #hpad_normalize
346f0     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
346f4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
346f8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
346fc     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
34700     E4 01 B0 FD |                 call    #hpad_normalize
34704     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
34708                 | 
34708     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3470c     81 BF E6 FA |                 rdword  retval, ptrb[1]
34710     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
34714     00 16 47 F4 |                 bitc    hidr_buttons, #0
34718     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3471c     01 16 47 F4 |                 bitc    hidr_buttons, #1
34720     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
34724     02 16 47 F4 |                 bitc    hidr_buttons, #2
34728     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3472c     03 16 47 F4 |                 bitc    hidr_buttons, #3
34730     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
34734     04 16 47 F4 |                 bitc    hidr_buttons, #4
34738     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3473c     05 16 47 F4 |                 bitc    hidr_buttons, #5
34740     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
34744     08 16 47 F4 |                 bitc    hidr_buttons, #8
34748     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3474c     09 16 47 F4 |                 bitc    hidr_buttons, #9
34750     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
34754     0A 16 47 F4 |                 bitc    hidr_buttons, #10
34758     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3475c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
34760     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
34764     0C 16 47 F4 |                 bitc    hidr_buttons, #12
34768                 | 
34768     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3476c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
34770     7A BB 7A FF 
34774     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
34778     F9 FF 7F FF 
3477c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
34780     B9 71 5F F9 |                 altgn   htmp, #htmp1
34784     00 70 43 F8 |                 getnib  htmp
34788     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3478c                 | 
3478c     AC 01 90 FD |                 jmp     #hpad_translate
34790                 | 
34790                 | '------------------------------------------------------------------------------
34790                 | ' Handle PS3 controller
34790                 | ' On entry:
34790                 | '   ptrb - controller report
34790                 | '------------------------------------------------------------------------------
34790                 | '   Default implementation translates the report to a pseudo-defacto hid
34790                 | '   standard and jumps to hpad_translate for actions.
34790                 | '   Implementors may take specific actions for this kind of controller.
34790                 | '------------------------------------------------------------------------------
34790                 | hpad_ps3
34790     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
34794     01 70 0F F2 |                 cmp     htmp, #$01      wz
34798     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3479c                 | 
3479c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3479c                 | 
3479c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
347a0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
347a4     40 01 B0 FD |                 call    #hpad_normalize
347a8     5F 11 23 F9 |                 setword hidr_axis, retval, #0
347ac     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
347b0     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
347b4     30 01 B0 FD |                 call    #hpad_normalize
347b8     5F 11 2B F9 |                 setword hidr_axis, retval, #1
347bc     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
347c0     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
347c4     20 01 B0 FD |                 call    #hpad_normalize
347c8     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
347cc     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
347d0     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
347d4     10 01 B0 FD |                 call    #hpad_normalize
347d8     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
347dc     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
347e0     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
347e4                 | 
347e4     08 8C 07 F6 |                 mov     hpar1, #8
347e8     13 8E 07 F6 |                 mov     hpar2, #19
347ec     94 00 B0 FD |                 call    #hpad_getbits
347f0                 | 
347f0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
347f4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
347f8     00 16 47 F4 |                 bitc    hidr_buttons, #0
347fc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
34800     01 16 47 F4 |                 bitc    hidr_buttons, #1
34804     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
34808     02 16 47 F4 |                 bitc    hidr_buttons, #2
3480c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
34810     03 16 47 F4 |                 bitc    hidr_buttons, #3
34814     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
34818     04 16 47 F4 |                 bitc    hidr_buttons, #4
3481c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
34820     05 16 47 F4 |                 bitc    hidr_buttons, #5
34824     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
34828     06 16 47 F4 |                 bitc    hidr_buttons, #6
3482c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
34830     07 16 47 F4 |                 bitc    hidr_buttons, #7
34834     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
34838     08 16 47 F4 |                 bitc    hidr_buttons, #8
3483c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
34840     09 16 47 F4 |                 bitc    hidr_buttons, #9
34844     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
34848     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3484c     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
34850     0B 16 47 F4 |                 bitc    hidr_buttons, #11
34854     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
34858     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3485c                 | 
3485c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
34860     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
34864     09 FA 79 FF 
34868     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3486c     FF FA 7F FF 
34870     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
34874     B9 71 5F F9 |                 altgn   htmp, #htmp1
34878     00 70 43 F8 |                 getnib  htmp
3487c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
34880                 | 
34880     B8 00 90 FD |                 jmp     #hpad_translate
34884                 | 
34884                 | '------------------------------------------------------------------------------
34884                 | ' Read bits from report data buffer
34884                 | '------------------------------------------------------------------------------
34884                 | ' On entry:
34884                 | '   PTRB - report buffer
34884                 | '   hpar1 - start bit
34884                 | '   hpar2 - number of bits
34884                 | ' On exit:
34884                 | '   retval - bits
34884                 | '------------------------------------------------------------------------------
34884                 | hpad_getbits
34884     C6 71 03 F6 |                 mov     htmp, hpar1
34888     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3488c     F9 71 03 F1 |                 add     htmp, ptrb
34890     B8 BF 02 FB |                 rdlong  retval, htmp
34894                 | 
34894     C6 73 03 F6 |                 mov     htmp1, hpar1
34898     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3489c     B9 BF 42 F0 |                 shr     retval, htmp1
348a0                 | 
348a0     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
348a4     10 00 90 1D |         if_a    jmp     #.l1
348a8                 | 
348a8     C7 8F C3 F9 |                 decod   hpar2
348ac     01 8E 87 F1 |                 sub     hpar2, #1
348b0     C7 BF 02 F5 |                 and     retval, hpar2
348b4     2D 00 64 FD |                 ret
348b8                 | .l1
348b8     FF 7F 00 FF 
348bc     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
348c0     03 70 07 F1 |                 add     htmp, #3
348c4     B8 75 03 FB |                 rdlong  htmp2, htmp
348c8     18 8E 87 F1 |                 sub     hpar2, #24
348cc     C7 8F C3 F9 |                 decod   hpar2
348d0     01 8E 87 F1 |                 sub     hpar2, #1
348d4     B9 75 43 F0 |                 shr     htmp2, htmp1
348d8     C7 75 03 F5 |                 and     htmp2, hpar2
348dc     18 74 67 F0 |                 shl     htmp2, #24
348e0     BA BF 42 F5 |                 or      retval, htmp2
348e4     2D 00 64 FD |                 ret
348e8                 | 
348e8                 | '------------------------------------------------------------------------------
348e8                 | ' Normalize value to signed word (-32768 / 32767)
348e8                 | '------------------------------------------------------------------------------
348e8                 | ' On entry:
348e8                 | '   retval - value to normalize
348e8                 | '   hidr_lminmax - min (word 1) max (word 0) value range
348e8                 | '   - or -
348e8                 | '   hidr_pminmax - min (word 1) max (word 0) value range
348e8                 | '   hidr_size - value bits length
348e8                 | ' On exit:
348e8                 | '   retval - normalized value
348e8                 | '------------------------------------------------------------------------------
348e8                 | hpad_normalize
348e8     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
348ec     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
348f0     2D 00 64 AD |         if_z    ret
348f4     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
348f8     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
348fc     0F 72 77 F7 |                 signx   htmp1, #15      wc
34900     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
34904     00 BE 66 C7 |         if_c    signx   retval, #0-0
34908     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3490c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
34910     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
34914     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
34918     B8 71 53 F6 |                 abs     htmp            wc
3491c     1F BE 0E F4 |                 testb   retval, #31     wz
34920     5F BF 42 F6 |                 abs     retval
34924     B8 BF 12 FD |                 qdiv    retval, htmp
34928     18 BE 62 FD |                 getqx   retval
3492c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
34930     C0 FF 7F FF 
34934     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
34938     2D 00 64 FD |                 ret
3493c                 | 
3493c                 | '------------------------------------------------------------------------------
3493c                 | ' Perform controller actions
3493c                 | ' On entry:
3493c                 | '    hidr_id        report id
3493c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3493c                 | '                      X = hidr_axis+0, #0
3493c                 | '                      Y = hidr_axis+0, #1
3493c                 | '                      Z = hidr_axis+1, #0
3493c                 | '                     RX = hidr_axis+1, #1
3493c                 | '                     RY = hidr_axis+2, #0
3493c                 | '                     RZ = hidr_axis+2, #1
3493c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3493c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3493c                 | '
3493c                 | '                     -------3 -------2 -------1 -------0 byte
3493c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3493c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3493c                 | '                                zyx||| |||||||| ++++++++ n. buttons
3493c                 | '                                |||||| ||||++++--------- n. axes
3493c                 | '                                |||||| ++++------------- n. hats
3493c                 | '                                ++++++------------------ valid axes
3493c                 | '------------------------------------------------------------------------------
3493c                 | hpad_translate
3493c                 | 
3493c                 | 
3493c                 |         if HAVE_HIDPAD
3493c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
34940     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
34944     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
34948     01 70 E7 F2 |                 cmpsub  htmp,#1
3494c     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
34950     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
34954     2D 00 7C 3D |         if_ae   ret     wcz
34958     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3495c     B8 F3 03 F1 |                 add     ptrb,htmp
34960     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
34964     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
34968     28 0C 64 FD |                 setq    #7-1
3496c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
34970                 |         end
34970                 | 
34970                 | 
34970                 |         if EMUPAD_MAX_PLAYER > 0
34970                 | .emupad_no_hat
34970                 |         if EMUPAD_BT0_BIT >= 0
34970                 |         end
34970                 |         if EMUPAD_BT1_BIT >= 0
34970                 |         end
34970                 |         if EMUPAD_BT2_BIT >= 0
34970                 |         end
34970                 |         if EMUPAD_BT3_BIT >= 0
34970                 |         end
34970                 |         if EMUPAD_BT4_BIT >= 0
34970                 |         end
34970                 |         if EMUPAD_BT5_BIT >= 0
34970                 |         end
34970                 |         if EMUPAD_BT6_BIT >= 0
34970                 |         end
34970                 |         if EMUPAD_BT7_BIT >= 0
34970                 |         end
34970                 |         if EMUPAD_BT8_BIT >= 0
34970                 |         end
34970                 |         if EMUPAD_BT9_BIT >= 0
34970                 |         end
34970                 | .emupad_slot_over
34970                 |         end
34970                 | 
34970                 |         if 0
34970                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
34970                 | 
34970                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
34970                 | 
34970                 |         end
34970     2D 00 64 FD |                 ret
34974                 | end
34974                 | 
34974                 | if EMUPAD_MAX_PLAYER > 0
34974                 | '------------------------------------------------------------------------------
34974                 | ' Clear EmuPad state
34974                 | '------------------------------------------------------------------------------
34974                 | emupad_reset
34974                 | 
34974                 | '------------------------------------------------------------------------------
34974                 | ' Get EmuPad Player number for current device (into retval)
34974                 | ' Z flag is also set if current device is valid
34974                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
34974                 | '------------------------------------------------------------------------------
34974                 | emupad_getnum
34974                 | .loop
34974                 | '------------------------------------------------------------------------------
34974                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
34974                 | '------------------------------------------------------------------------------
34974                 | emupad_discon
34974                 | .loop         
34974                 |         
34974                 |         ' FALL THROUGH!!!
34974                 | 
34974                 | '------------------------------------------------------------------------------
34974                 | ' Update EmuPad reports (all of them...)
34974                 | '------------------------------------------------------------------------------
34974                 | emupad_write_reports
34974                 | .devloop
34974                 | 
34974                 | end
34974                 | 
34974                 | 
34974                 | '------------------------------------------------------------------------------
34974                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
34974                 | '------------------------------------------------------------------------------
34974                 | ' On entry:
34974                 | ' On exit:
34974                 | '------------------------------------------------------------------------------
34974                 | hget_hub_status
34974     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
34978     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3497c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
34980     01 90 2F F9 |                 setword hpar3, #1, #1
34984     CF 02 A0 FD |                 call    #do_int_in
34988     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3498c     0C 00 90 AD |         if_z    jmp     #.data
34990     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
34994     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
34998     2D 00 64 FD |                 ret
3499c                 | .data
3499c     00 90 0F F2 |                 cmp     hpar3, #0               wz
349a0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
349a4                 | 
349a4     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
349a8     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
349ac     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
349b0     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
349b4                 |                 debug(ubin_long(hub_status_chg))
349b4                 | 
349b4     01 5A 06 F6 |                 mov     hdev_port, #1
349b8                 | .loop
349b8     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
349bc     0C 00 B0 AD |         if_x1   call    #hub_port_handler
349c0     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
349c4     F0 FF 9F 3D |         if_nc   jmp     #.loop
349c8     2D 00 64 FD |                 ret
349cc                 | 
349cc                 | hub_port_handler
349cc     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
349d0     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
349d4     27 EF 03 F6 |                 mov     pb, urx_buff_p
349d8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
349dc     55 02 A0 FD |                 call    #control_read
349e0     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
349e4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
349e4                 | 
349e4     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
349e8     50 01 90 5D |         if_x0   jmp     #.other
349ec     68 02 D0 FE |                 loc     ptra, #clr_port_feat
349f0     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
349f4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
349f8     A0 02 A0 FD |                 call    #control_write
349fc     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
34a00     7C 01 90 5D |         if_x0   jmp     #.disconnect
34a04     B0 99 02 F6 |                 mov     hctwait, _100ms_
34a08     EF 02 A0 FD |                 call    #poll_waitx
34a0c                 | 
34a0c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
34a10     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
34a14     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34a18     A0 02 A0 FD |                 call    #control_write
34a1c                 | 
34a1c     02 76 07 F6 |                 mov     htmp3, #2
34a20                 | .wait_reset
34a20     AC 99 02 F6 |                 mov     hctwait, _8ms_
34a24     EF 02 A0 FD |                 call    #poll_waitx
34a28     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34a2c     27 EF 03 F6 |                 mov     pb, urx_buff_p
34a30     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34a34     55 02 A0 FD |                 call    #control_read
34a38     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
34a3c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
34a40     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
34a44                 | 
34a44     10 02 D0 FE |                 loc     ptra, #clr_port_feat
34a48     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
34a4c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34a50     A0 02 A0 FD |                 call    #control_write
34a54                 | 
34a54     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
34a58                 | .wait_recover
34a58     A7 99 02 F6 |                 mov     hctwait, _1ms_
34a5c     EF 02 A0 FD |                 call    #poll_waitx
34a60     FD 71 6F FB |                 djnz    htmp,#.wait_recover
34a64                 | 
34a64     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34a68     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
34a6c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
34a70                 | 
34a70     00 08 00 FF 
34a74     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
34a78     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
34a7c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
34a80     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
34a84     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
34a88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34a8c     48 01 90 5D |         if_nz   jmp     #.done
34a90                 | .get_dev_desc
34a90     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
34a94     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
34a98     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
34a9c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
34aa0     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
34aa4     01 71 57 FC |                 wrword  htmp, ptra[wValue]
34aa8     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
34aac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34ab0     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
34ab4     AC 99 02 F6 |                 mov     hctwait, _8ms_
34ab8     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
34abc     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
34ac0     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
34ac4     BE 00 A0 FD |                 call    #calc_crc5
34ac8     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
34acc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
34ad0     F7 AD C2 FA |                 rdbyte  total_data, pb
34ad4     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
34ad8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
34adc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34ae0     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
34ae4     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
34ae8     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
34aec                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
34aec     9F 99 02 F6 |                 mov     hctwait, _500us_
34af0     EF 02 A0 FD |                 call    #poll_waitx
34af4     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
34af8     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
34afc     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
34b00     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
34b04     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34b08     CC 00 90 5D |         if_nz   jmp     #.done
34b0c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
34b10     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
34b14     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
34b18     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
34b1c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
34b20     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
34b24     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
34b28     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
34b2c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
34b30     A4 00 90 CD |         if_b    jmp     #.done
34b34     6C F0 BF FD |                 call    #hparse_con_desc
34b38     9C 00 90 FD |                 jmp     #.done
34b3c                 | 
34b3c                 | .other
34b3c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
34b40     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
34b44     28 00 90 AD |         if_x1   jmp     #.reset_feature
34b48     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
34b4c     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
34b50     1C 00 90 AD |         if_x1   jmp     #.reset_feature
34b54     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
34b58     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
34b5c     10 00 90 AD |         if_x1   jmp     #.reset_feature
34b60     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
34b64     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
34b68     04 00 90 AD |         if_x1   jmp     #.reset_feature
34b6c     68 00 90 FD |                 jmp     #.done
34b70                 | .reset_feature
34b70     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
34b74     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34b78     A0 02 A0 FD |                 call    #control_write
34b7c     58 00 90 FD |                 jmp     #.done
34b80                 | .disconnect
34b80                 | 
34b80     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
34b84     00 70 E3 F8 |                 getbyte htmp
34b88     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
34b8c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
34b90     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
34b94     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
34b98     00 76 06 A6 |         if_z    mov     kb_led_states, #0
34b9c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
34ba0                 |         if EMUPAD_MAX_PLAYER > 0
34ba0                 |         end
34ba0                 |         if HAVE_MOUSE
34ba0     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
34ba4     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
34ba8     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
34bac                 |         end
34bac                 |         if HAVE_HIDPAD
34bac     14 0A F0 FE |                 loc ptrb,#hidpad_report
34bb0     2D 71 03 F6 |                 mov htmp,hdev_port
34bb4     01 70 E7 F2 |                 cmpsub htmp,#1
34bb8     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
34bbc     B8 F3 03 F1 |                 add ptrb,htmp
34bc0     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
34bc4     80 01 6C FC |                 wrlong #0,ptrb
34bc8                 |         end
34bc8                 | 
34bc8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
34bcc     00 00 C4 F8 |                 setbyte #0
34bd0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34bd4     00 00 04 F6 |                 mov     0-0, #0
34bd8                 | 
34bd8                 | .done
34bd8     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
34bdc     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
34be0     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
34be4     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
34be8     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
34bec     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
34bf0                 | 
34bf0     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34bf4     27 EF 03 F6 |                 mov     pb, urx_buff_p
34bf8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34bfc     55 02 A0 FD |                 call    #control_read
34c00     00 69 06 FB |                 rdlong  hub_port_status, ptra
34c04                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
34c04     2D 00 64 FD |                 ret
34c08                 | 
34c08                 | '------------------------------------------------------------------------------
34c08                 | ' Partially populated SETUP packets
34c08                 | '------------------------------------------------------------------------------
34c08     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
34c09     06          |                 byte    REQ_GET_DESC
34c0a     00 01       |                 word    TYPE_DEVICE << 8
34c0c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34c0e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c10     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
34c11     06          |                 byte    REQ_GET_DESC
34c12     00 02       |                 word    TYPE_CONFIG << 8
34c14     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34c16     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c18     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
34c19     09          |                 byte    REQ_SET_CONFIG
34c1a     00 00       |                 word    0       ' Configuration value
34c1c     00 00       |                 word    0       ' Zero
34c1e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
34c20     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
34c21     05          |                 byte    REQ_SET_ADDR
34c22     00 00       |                 word    0       ' Zero
34c24     00 00       |                 word    0       ' Zero
34c26     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
34c28                 | '------------------------------------------------------------------------------
34c28                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
34c28                 | ' wValue field dictates which protocol should be used.
34c28                 | '
34c28                 | ' When initialized, all devices default to report protocol. However the host
34c28                 | ' should not make any assumptions about the device state and should set the
34c28                 | ' desired protocol whenever initializing a device.
34c28                 | '------------------------------------------------------------------------------
34c28     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34c29     0B          |                 byte    HID_SET_PROTO
34c2a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
34c2c                 |                                                 ' (HID 1.11 Section 7.2.6).
34c2c     00 00       |                 word    0               ' Interface index number.
34c2e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
34c30                 | '------------------------------------------------------------------------------
34c30     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34c31     0A          |                 byte    HID_SET_IDLE
34c32     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
34c34                 |                                         ' reporting until a change is detected in the report data
34c34                 | 
34c34                 |                                         ' (HID 1.11 Section 7.2.4).
34c34     00 00       |                 word    0       ' Interface index number.
34c36     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
34c38     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34c39     09          |                 byte    HID_SET_REPORT
34c3a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
34c3c                 |                                         ' (HID 1.11 Section 7.2.2).
34c3c     00 00       |                 word    0       ' Interface index number.
34c3e     00 00       |                 word    0       ' Size of the report, in bytes.
34c40     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
34c41     06          |                 byte    REQ_GET_DESC
34c42     00 22       |                 word    TYPE_REPORT << 8
34c44     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34c46     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c48                 | '------------------------------------------------------------------------------
34c48     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
34c49     06          |                 byte    REQ_GET_DESC
34c4a     00 29       |                 word    TYPE_HUB << 8
34c4c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34c4e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c50     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
34c51     03          |                 byte    REQ_SET_FEATURE
34c52     00 00       |                 word    0       ' port power
34c54     01 00       |                 word    1       ' Port index number (1+)
34c56     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c58     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
34c59     01          |                 byte    REQ_CLEAR_FEATURE
34c5a     00 00       |                 word    0       ' port power
34c5c     01 00       |                 word    1       ' Port index number (1+)
34c5e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c60     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
34c61     00          |                 byte    REQ_GET_STATUS
34c62     00 00       |                 word    0
34c64     01 00       |                 word    1       ' Port index number (1+)
34c66     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
34c68                 | '------------------------------------------------------------------------------
34c68                 | if _HAVE_GAMEPAD
34c68     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
34c6c                 | ps3_command_buff
34c6c     00 00 00 00 
34c70     00          |                 byte    $00, $00, $00, $00, $00
34c71     00 00 00 00 
34c75     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
34c76     FF 27 10 00 
34c7a     32          |                 byte    $FF, $27, $10, $00, $32
34c7b     FF 27 10 00 
34c7f     32          |                 byte    $FF, $27, $10, $00, $32
34c80     FF 27 10 00 
34c84     32          |                 byte    $FF, $27, $10, $00, $32
34c85     FF 27 10 00 
34c89     32          |                 byte    $FF, $27, $10, $00, $32
34c8a     00 00 00 00 
34c8e     00          |                 byte    $00, $00, $00, $00, $00
34c8f     00 00 00 00 
34c93     00          |                 byte    $00, $00, $00, $00, $00
34c94     00 00 00 00 
34c98     00          |                 byte    $00, $00, $00, $00, $00
34c99     00 00 00    |                 byte    $00, $00, $00
34c9c                 | '------------------------------------------------------------------------------
34c9c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
34c9f                 |                                         ' 0x01 All blinking
34c9f                 |                                         ' 0x02 1 flashes, then on
34c9f                 |                                         ' 0x03 2 flashes, then on
34c9f                 |                                         ' 0x04 3 flashes, then on
34c9f                 |                                         ' 0x05 4 flashes, then on
34c9f                 |                                         ' 0x06 1 on
34c9f                 |                                         ' 0x07 2 on
34c9f                 |                                         ' 0x08 3 on
34c9f                 |                                         ' 0x09 4 on
34c9f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
34c9f                 |                                         ' 0x0B Blinking*
34c9f                 |                                         ' 0x0C Slow blinking*
34c9f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
34c9f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
34ca2     00          |                 byte    $00             ' Left rumble
34ca3     00          |                 byte    $00             ' Right rumble
34ca4     00 00 00    |                 byte    $00, $00, $00
34ca7     00          | end
34ca8                 | alignl
34ca8                 | 
34ca8                 | if HAVE_MOUSE
34ca8     00 00 00 00 
34cac     00 00 00 00 | mouse_limits long 0[2]
34cb0     00 00 00 00 | mouse_outptr long 0
34cb4                 | end
34cb4                 | 
34cb4                 | if KEYQUEUE_SIZE > 0
34cb4     00          | keyq_head byte 0
34cb5     00          | keyq_tail byte 0
34cb6     00 00 00 00 
      ...             
34eb2     00 00 00 00 
34eb6     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
34eb8                 | alignl
34eb8                 | end
34eb8                 | 
34eb8                 | if EMUPAD_MAX_PLAYER > 0
34eb8                 | emupad_rule_buffer
34eb8                 | if EMUPAD_BUILTIN_RULES
34eb8                 | file "padmap_builtin.dat"
34eb8                 | end
34eb8                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
34eb8                 | '' Default rule directly follows!
34eb8                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
34eb8                 | end
34eb8                 | 
34eb8                 | '------------------------------------------------------------------------------
34eb8                 | ' The USB data cache area gets zero-filled at every device disconnect
34eb8                 | '------------------------------------------------------------------------------
34eb8                 | usb_cache_start
34eb8                 | 
34eb8                 | ' HID descriptor and report buffers
34eb8                 | if !!OVERLAP_MEMORY
34eb8     00 00 00 00 
      ...             
355b0     00 00 00 00 
355b4     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
355b8                 | end
355b8     00 00 00 00 
355bc     00 00 00 00 | hkbd_report     byte    0[8]
355c0     00 00 00 00 | hkbd_led_rep    byte    0
355c4                 | alignl
355c4                 | 
355c4                 | if HAVE_HIDPAD
355c4     00 00 00 00 
      ...             
35680     00 00 00 00 
35684     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
35688                 | end
35688                 | 
35688                 | ' HUB descriptor
35688     00          | hub_descr       byte    0   ' bDescLength
35689     00          |                 byte    0   ' bDescriptorType
3568a     00          |                 byte    0   ' bNbrPorts
3568b     00 00       |                 word    0   ' wHubCharacteristics
3568d     00          |                 byte    0   ' bPwrOn2PwrGood
3568e     00          |                 byte    0   ' bHubContrCurrent
3568f     00          |                 byte    0   ' DeviceRemoveable
35690     00          |                 byte    0   ' PortPwrCtrlMask
35691                 | 
35691                 | usb_cache_end
35691                 | 
35691                 | if HAVE_MOUSE
35691     00 00 00 00 | mouse_xacc      long 0
35695     00 00 00 00 | mouse_yacc      long 0
35699     00 00 00 00 | mouse_zacc      long 0
3569d     00          | mouse_bstate    byte 0
3569e     00          | mouse_lpending  byte 0
3569f     00          | mouse_rpending  byte 0
356a0     00          | mouse_mpending  byte 0
356a1     00          | mouse_lock      byte 0
356a2     00 00 00    |                 byte 0[3] ' padding
356a5                 | end
356a5                 | 
356a5     00 00 00 00 
      ...             
3571d     00 00 00 00 
35721     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
35725     00 00 00 00 
35729     00 00 00 00 
3572d     00 00 00 00 
35731     00 00 00 00 
35735     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
35737     00 00 00 00 
      ...             
3582f     00 00 00 00 
35833     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
35837                 | 
35837     00          | driver_cog      byte    0                       ' Current driver cog + 1
35838                 | 	alignl
35838                 | _audio096_spin2_dat_
35838                 | 
35838                 | audio       org     0
35838                 | 
35838     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3583c     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
35840     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
35844                 | 
35844     01 EC 63 FD |             cogid   pa                   ' compute cogid
35848     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3584c     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
35850     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
35854                 | 
35854     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
35858     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3585c     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
35860     0F 20 06 FC |             wrpin   dac2,#right
35864     0F 00 1E FC |             wxpin   #256,#right    
35868     41 9C 64 FD |             dirh    #left addpins 1
3586c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
35870     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
35874     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
35878                 |             
35878                 | '---------------------------------------------------------------------------------        
35878                 | '----------------- The main loop -------------------------------------------------
35878                 | '---------------------------------------------------------------------------------
35878                 | 
35878     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3587c     10 00 90 CD |       if_c  jmp     #loop1
35880                 |   
35880     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
35884     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
35888     D3 00 80 F1 |             sub     0-0,a40000000
3588c     FD FD 6D FB |             djnz    cn,#p402
35890                 |     
35890     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
35894     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
35898     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3589c     01 FC 05 C6 |     if_c    mov     cn,#1
358a0     D8 FE 39 F3 |             fle     ct,time3 wcz
358a4     02 FC 05 C6 |     if_c    mov     cn,#2     
358a8     D9 FE 39 F3 |             fle     ct,time4 wcz
358ac     03 FC 05 C6 |     if_c    mov     cn,#3
358b0     DA FE 39 F3 |             fle     ct,time5 wcz
358b4     04 FC 05 C6 |     if_c    mov     cn,#4
358b8     DB FE 39 F3 |             fle     ct,time6 wcz
358bc     05 FC 05 C6 |     if_c    mov     cn,#5
358c0     DC FE 39 F3 |             fle     ct,time7 wcz
358c4     06 FC 05 C6 |     if_c    mov     cn,#6
358c8     DD FE 39 F3 |             fle     ct,time8 wcz
358cc     07 FC 05 C6 |     if_c    mov     cn,#7
358d0                 | 
358d0                 | 
358d0                 | '----------------------------------------------------------------------------------
358d0                 | '------------- Compute channel samples --------------------------------------------
358d0                 | '----------------------------------------------------------------------------------
358d0                 | 
358d0                 | 
358d0     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
358d4     06 BC 65 F0 |             shl     channeladd,#6
358d8     DE F0 03 F1 |             add     ptra,channeladd
358dc                 | 
358dc     28 16 64 FD |             setq    #11                        	' read parameters
358e0     00 D3 05 FB |             rdlong  pointer0,ptra
358e4                 |     	    
358e4     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
358e8     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
358ec     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
358f0     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
358f4     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
358f8     00 C0 0D F2 |             cmp     qq,#0 wz                         
358fc     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
35900     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
35904                 |             
35904     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
35908     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3590c     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
35910                 | 
35910     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
35914     EA 04 3A F9 |             getword oldrs,sample0,#1
35918     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3591c     EE F6 31 F9 |     	    getword avol0,volpan0,#0
35920     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
35924     EF F2 31 F9 |             getword afreq0,freqskip0,#0
35928                 | 
35928     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3592c     00 00 02 F6 |             mov     dt0,0-0    
35930     D5 00 82 F1 |             sub     dt0,time0
35934                 |             
35934     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
35938     F9 00 00 F1 |             add     0-0,afreq0  	
3593c                 |             
3593c                 | '---- envelopes
3593c                 |             
3593c     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
35940     20 00 00 AF 
35944     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
35948     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3594c                 | 
3594c     F9 44 02 F6 |             mov     envs1,afreq0
35950     F3 44 02 FA |             mul     envs1,envspd0
35954     22 E3 01 F1 |             add     envph0,envs1 
35958                 | 
35958     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3595c     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
35960     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
35964     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
35968     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3596c     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
35970     00 42 06 36 |     if_ge   mov     envlo,#0
35974     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
35978     16 E2 65 30 |     if_ge   shl     envph0,#22
3597c                 | 
3597c     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
35980     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
35984     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
35988     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3598c     22 47 3A F9 |             getword envs2,envs1,#1		' next value
35990     22 45 32 F9 |             getword envs1,envs1,#0		' current value
35994     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
35998     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3599c     21 45 02 FA |             mul     envs1,envlo
359a0     23 45 02 F1 |             add     envs1,envs2
359a4     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
359a8                 |             
359a8     1B D6 0D F4 | p410        testb   sstart0, #27 wz
359ac     1B C2 61 AD |     if_z    getrnd  spl
359b0     58 00 90 AD |     if_z    jmp     #p406
359b4                 |  
359b4     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
359b8     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
359bc     08 D2 45 F0 |             shr     pointer0,#8
359c0                 |          
359c0     1F D6 0D F4 |             testb   sstart0,#31 wz            
359c4     01 D2 65 A0 |     if_z    shl     pointer0,#1        
359c8     1C D6 0D F4 |             testb   sstart0,#28 wz            
359cc     01 D2 65 A0 |     if_z    shl     pointer0,#1        
359d0                 |         
359d0     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
359d4     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
359d8     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
359dc                 |             
359dc     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
359e0     EB C0 01 F1 |             add     qq,sstart0            
359e4                 | 
359e4     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
359e8     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
359ec     14 01 B0 1D |     if_gt   call    #cache_read
359f0                 |          
359f0     1F D6 0D F4 |             testb   sstart0,#31 wz 
359f4     08 C2 65 50 |     if_nz   shl     spl,#8
359f8     08 D2 65 50 |     if_nz   shl     pointer0,#8
359fc     07 D2 65 A0 |     if_z    shl     pointer0,#7
35a00     1C D6 0D F4 |             testb   sstart0,#28 wz            
35a04     01 D2 45 A0 |     if_z    shr     pointer0,#1    
35a08     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
35a0c                 | 
35a0c                 | 
35a0c     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
35a10     00 C2 01 F6 |             mov     spl,0-0
35a14     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
35a18     00 C2 01 F6 |             mov     spl,0-0
35a1c                 | 
35a1c     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
35a20     00 06 02 F6 |             mov     ls0,0-0
35a24     20 00 00 FF 
35a28     00 C0 05 F6 |             mov     qq,##16384
35a2c     FC C0 81 F1 |             sub     qq,apan0
35a30     E0 C2 31 FA |             scas    spl,qq
35a34     00 08 02 F6 |             mov     rs0, 0-0
35a38                 | 
35a38     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
35a3c     04 0D 02 F1 |             add     rs,rs0
35a40     01 0B 82 F1 |             sub     ls,oldls
35a44     03 0B 02 F1 |             add     ls,ls0
35a48                 |    
35a48     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
35a4c     03 D5 21 F9 |             setword sample0,ls0,#0
35a50                 |             
35a50     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
35a54     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
35a58     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
35a5c                 |   '  if_z    mov     sample0,#0
35a5c     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
35a60     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
35a64     04 00 00 AF 
35a68     00 AC 05 A1 |     if_z    add     time1,##2048
35a6c     D6 AE 01 A6 |     if_z    mov     time2,time1
35a70     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
35a74                 | 
35a74     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
35a78     00 D3 65 FC |             wrlong  pointer0,ptra
35a7c     08 E3 65 FC |             wrlong  envph0,ptra[8]
35a80     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
35a84                 |                       
35a84     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
35a88     FF BF 25 A7 |     if_z    decmod  front, #511          
35a8c                 |          
35a8c     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
35a90     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
35a94     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
35a98     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
35a9c                 | 	    
35a9c                 | 		    
35a9c     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
35aa0     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
35aa4     02 11 02 F6 |             mov     newsample, oldrs       
35aa8                 | 
35aa8     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
35aac     00 AB 01 F1 |             add     time0,dt0    
35ab0                 |                                      
35ab0     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
35ab4     D8 FD 9F AD |     if_z    jmp     #loop1
35ab8     00 C1 01 F6 |             mov     qq,dt0
35abc                 |   
35abc     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
35ac0     00 BE 9D F2 |             cmpr    front, #0-0 wcz
35ac4     F4 FF 9F AD |     if_e    jmp     #p301    
35ac8                 | 		
35ac8     00 16 0E F2 | 	    cmp     scbase,#0 wz
35acc     20 00 90 AD |     if_z    jmp     #p302	   
35ad0                 |   
35ad0     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
35ad4     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
35ad8     02 1A 66 C0 |     if_c    shl     scptr2,#2
35adc     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
35ae0     60 1A 66 FC |             wrlong  scptr2,#$60
35ae4     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
35ae8     01 00 00 CF 
35aec     7F 18 06 C7 |     if_c    incmod  scptr,##639
35af0                 | 			    
35af0     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
35af4     00 00 00 FF 
35af8     FF BF 05 F7 |             incmod  front, ##511
35afc     EF C1 6D FB |             djnz    qq,#p301
35b00                 |             
35b00     74 FD 9F FD |             jmp     #loop            'loop
35b04                 | 
35b04                 | '----------------------------------------------------------------------------------
35b04                 | '------------- This is the end of the main loop -----------------------------------
35b04                 | '----------------------------------------------------------------------------------
35b04                 | 
35b04                 | '----------------------------------------------------------------------------------
35b04                 | '------------- PSRAM cache ----------- --------------------------------------------
35b04                 | '----------------------------------------------------------------------------------
35b04                 | 
35b04                 | ' There are 8 cache pointers for 8 channels
35b04                 | ' if 24 higher bits of address=cache, then get a word from the cache
35b04                 | ' else load the cache from PSRAM, update the pointer, then read a sample
35b04                 | 
35b04                 | 
35b04     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
35b08                 |             
35b08     E0 3C 02 F6 | 	    mov     addrhi,qq		
35b0c     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
35b10     12 FD 95 F9 | 	    alts    cn,#cache1            
35b14     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
35b18     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
35b1c                 | 	
35b1c     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
35b20     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
35b24     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
35b28     08 34 66 F0 | 	    shl     cmd,#8
35b2c     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
35b30     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
35b34     08 36 66 F0 |             shl     hubaddr,#8                  '
35b38     11 37 02 F1 |             add     hubaddr,hubptr 
35b3c     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
35b40     28 04 64 FD |             setq    #2                          ' write 3 longs
35b44     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
35b48     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
35b4c     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
35b50                 |             
35b50                 | 	
35b50     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
35b54     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
35b58     11 C1 01 F1 | 	    add     qq,hubptr
35b5c     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
35b60     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
35b64                 |           
35b64                 | 
35b64                 | '--------------------------------------------------------------------------
35b64                 | '------ Interrupt service -------------------------------------------------
35b64                 | '------ Output the sample, get the next one if exists ---------------------
35b64                 | '--------------------------------------------------------------------------
35b64                 | 
35b64     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
35b68     0F CC 25 FC |             wypin   rsample,#right       '4
35b6c     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
35b70     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
35b74     FF F3 07 57 |     if_ne   incmod  ptrb,#511
35b78     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
35b7c     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
35b80                 |     
35b80     F5 FF 3B FB |             reti1                        '17/19 
35b84                 |           
35b84                 | '---------------------------------------------------------------------------
35b84                 | '-------- End of interrupt -------------------------------------------------
35b84                 | '---------------------------------------------------------------------------    
35b84                 | 
35b84                 | 
35b84                 | '---------------------------------------------------------------------------
35b84                 | '------- Variables ---------------------------------------------------------
35b84                 | '---------------------------------------------------------------------------
35b84                 | 
35b84                 | ' constants
35b84                 | 
35b84     00 00 00 40 | a40000000   long $40000000
35b88     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
35b8c                 | 
35b8c                 | ' Time variables
35b8c                 | 
35b8c     00 00 00 00 | time0       long 0    ' Global sample computing time
35b90     01 00 00 00 | time1       long 1    ' Local channels time
35b94     02 00 00 00 | time2       long 2
35b98     03 00 00 00 | time3       long 3
35b9c     04 00 00 00 | time4       long 4
35ba0     05 00 00 00 | time5       long 5
35ba4     06 00 00 00 | time6       long 6
35ba8     07 00 00 00 | time7       long 7
35bac     08 00 00 00 | time8       long 8
35bb0                 | 
35bb0     00 00 00 00 | channeladd long 0
35bb4                 | 
35bb4     00 00 00 00 | front       long 0
35bb8                 | 
35bb8                 | ' temporary variables 
35bb8     00 00 00 00 | qq          long 0
35bbc     00 00 00 00 | spl         long 0
35bc0     00 00 00 00 | zero        long 0
35bc4     00 00 00 00 | mailbox     long 0
35bc8     00 00 00 00 | mailbox2 long 0
35bcc                 | 
35bcc                 | ' Interrupt ISR variables
35bcc                 | 
35bcc     00 00 00 00 | lsample     long 0
35bd0     00 00 00 00 | rsample     long 0
35bd4     00 00 00 00 | lsnext      long 0
35bd8     00 00 00 00 | rsnext      long 0 
35bdc                 | 
35bdc                 | ' channel parameter block
35bdc                 | 
35bdc     00 00 00 00 | pointer0    long 0     
35be0     00 00 00 00 | sample0     long 0
35be4     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
35be8     00 00 00 00 | lstart0     long 0
35bec     00 00 00 00 | lend0       long 0
35bf0     00 00 00 00 | volpan0     long 0
35bf4     00 00 00 00 | freqskip0   long 0
35bf8     00 00 00 00 | command0    long 0
35bfc     00 00 00 00 | envph0	    long 0
35c00     00 00 00 00 | envptr0	    long 0
35c04     00 00 00 00 | envspd0	    long 0
35c08     00 00 00 00 | envlen0	    long 0
35c0c     00 00 00 00 | res5	    long 0
35c10     00 00 00 00 | res6	    long 0
35c14     00 00 00 00 | res7	    long 0
35c18     00 00 00 00 | res8	    long 0
35c1c                 | 
35c1c     00 00 00 00 | afreq0      long 0
35c20     00 00 00 00 | askip0      long 0
35c24     00 00 00 00 | avol0       long 0
35c28     00 00 00 00 | apan0       long 0
35c2c                 | 
35c2c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
35c30     00 00 00 00 | cn          long 0
35c34     00 00 00 00 | ct          long 0
35c38     00 00 00 00 | dt0         long 0
35c3c                 | 
35c3c                 | ' Samples
35c3c     00 00 00 00 | oldls       long 0
35c40     00 00 00 00 | oldrs       long 0
35c44                 | 
35c44     00 00 00 00 | ls0         long 0
35c48     00 00 00 00 | rs0         long 0
35c4c                 | 
35c4c     00 00 00 00 | ls          long 0    
35c50     00 00 00 00 | rs          long 0
35c54                 | 
35c54     00 00 00 00 | oldsample   long 0
35c58     00 00 00 00 | newsample   long 0
35c5c                 | 
35c5c     00 00 00 00 | nrsample    long 0
35c60     00 00 00 00 | nlsample    long 0
35c64                 | 
35c64     00 00 00 00 | scbase long 0
35c68     00 00 00 00 | scptr long 0
35c6c     00 00 00 00 | scptr2 long 0
35c70     00 00 00 00 | scope long 0
35c74                 | 
35c74     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
35c78     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
35c7c                 | 
35c7c     00 18 07 00 | hubptr      long $71800
35c80     00 00 00 00 | cache1      long 0
35c84     00 00 00 00 | cache2      long 0
35c88     00 00 00 00 | cache3      long 0
35c8c     00 00 00 00 | cache4      long 0
35c90     00 00 00 00 | cache5      long 0
35c94     00 00 00 00 | cache6      long 0
35c98     00 00 00 00 | cache7      long 0
35c9c     00 00 00 00 | cache8      long 0
35ca0                 | 
35ca0                 | 
35ca0     00 00 00 00 | cmd         long 0
35ca4     00 00 00 00 | hubaddr     long 0
35ca8     00 01 00 00 | count       long 256
35cac     00 00 00 00 | addrlo long 0
35cb0     00 00 00 00 | addrhi long 0
35cb4     00 00 00 00 | pointer00 long 0
35cb8     00 00 00 00 | envhi long 0
35cbc     00 00 00 00 | envlo long 0
35cc0     00 00 00 00 | envs1 long 0
35cc4     00 00 00 00 | envs2 long 0
35cc8     00 00 00 00 | noise0 long 0
35ccc     00 00 00 00 
35cd0     00 00 00 00 | null  			long 	0,0           ' for channel reset
35cd4                 | 	alignl
35cd4                 | __system__dat_
35cd4     00 00 00 00 
35cd8     00 00 00 00 | 	byte	$00[8]
35cdc     03 00 00 00 
35ce0     00 00 00 00 
35ce4     00 00 00 00 
35ce8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35cec     00 00 00 00 
      ...             
35f78     00 00 00 00 
35f7c     00 00 00 00 | 	byte	$00[660]
35f80     00 00 E0 07 | 	long	(126 {__system____root_opendir})<<20
35f84     00 00 F0 07 | 	long	(127 {__system____root_closedir})<<20
35f88     00 00 00 08 | 	long	(128 {__system____root_readdir})<<20
35f8c     00 00 10 08 | 	long	(129 {__system____root_stat})<<20
35f90     00 00 00 00 
35f94     00 00 00 00 
35f98     00 00 00 00 
35f9c     00 00 00 00 
35fa0     00 00 00 00 
35fa4     00 00 00 00 
35fa8     00 00 00 00 | 	byte	$00[28]
35fac     14 60 03 00 | 	long	@@@__system__dat_ + 832
35fb0     17 60 03 00 | 	long	@@@__system__dat_ + 835
35fb4     38 60 03 00 | 	long	@@@__system__dat_ + 868
35fb8     51 60 03 00 | 	long	@@@__system__dat_ + 893
35fbc     6C 60 03 00 | 	long	@@@__system__dat_ + 920
35fc0     86 60 03 00 | 	long	@@@__system__dat_ + 946
35fc4     96 60 03 00 | 	long	@@@__system__dat_ + 962
35fc8     A8 60 03 00 | 	long	@@@__system__dat_ + 980
35fcc     BA 60 03 00 | 	long	@@@__system__dat_ + 998
35fd0     CC 60 03 00 | 	long	@@@__system__dat_ + 1016
35fd4     D8 60 03 00 | 	long	@@@__system__dat_ + 1028
35fd8     E9 60 03 00 | 	long	@@@__system__dat_ + 1045
35fdc     FD 60 03 00 | 	long	@@@__system__dat_ + 1065
35fe0     07 61 03 00 | 	long	@@@__system__dat_ + 1075
35fe4     17 61 03 00 | 	long	@@@__system__dat_ + 1091
35fe8     26 61 03 00 | 	long	@@@__system__dat_ + 1106
35fec     3C 61 03 00 | 	long	@@@__system__dat_ + 1128
35ff0     55 61 03 00 | 	long	@@@__system__dat_ + 1153
35ff4     69 61 03 00 | 	long	@@@__system__dat_ + 1173
35ff8     77 61 03 00 | 	long	@@@__system__dat_ + 1187
35ffc     8B 61 03 00 | 	long	@@@__system__dat_ + 1207
36000     97 61 03 00 | 	long	@@@__system__dat_ + 1219
36004     A9 61 03 00 | 	long	@@@__system__dat_ + 1237
36008     C1 61 03 00 | 	long	@@@__system__dat_ + 1261
3600c     D3 61 03 00 | 	long	@@@__system__dat_ + 1279
36010     E6 61 03 00 | 	long	@@@__system__dat_ + 1298
36014     4F 4B 00 4E 
36018     75 6D 65 72 
3601c     69 63 61 6C 
36020     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
36024     75 6D 65 6E 
36028     74 20 6F 75 
3602c     74 20 6F 66 
36030     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
36034     61 69 6E 00 
36038     52 65 73 75 
3603c     6C 74 20 6E 
36040     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
36044     65 70 72 65 
36048     73 65 6E 74 
3604c     61 62 6C 65 
36050     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
36054     65 67 61 6C 
36058     20 6D 75 6C 
3605c     74 69 62 79 
36060     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
36064     65 71 75 65 
36068     6E 63 65 00 
3606c     4E 6F 20 73 
36070     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
36074     66 69 6C 65 
36078     20 6F 72 20 
3607c     64 69 72 65 
36080     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
36084     79 00 42 61 
36088     64 20 66 69 
3608c     6C 65 20 6E 
36090     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
36094     72 00 50 65 
36098     72 6D 69 73 
3609c     73 69 6F 6E 
360a0     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
360a4     69 65 64 00 
360a8     4E 6F 74 20 
360ac     65 6E 6F 75 
360b0     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
360b4     65 6D 6F 72 
360b8     79 00 54 65 
360bc     6D 70 6F 72 
360c0     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
360c4     66 61 69 6C 
360c8     75 72 65 00 
360cc     46 69 6C 65 
360d0     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
360d4     73 74 73 00 
360d8     49 6E 76 61 
360dc     6C 69 64 20 
360e0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
360e4     6D 65 6E 74 
360e8     00 54 6F 6F 
360ec     20 6D 61 6E 
360f0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
360f4     65 6E 20 66 
360f8     69 6C 65 73 
360fc     00 49 2F 4F 
36100     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
36104     6F 72 00 4E 
36108     6F 74 20 61 
3610c     20 64 69 72 
36110     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
36114     72 79 00 49 
36118     73 20 61 20 
3611c     64 69 72 65 
36120     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
36124     79 00 52 65 
36128     61 64 20 6F 
3612c     6E 6C 79 20 
36130     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
36134     20 73 79 73 
36138     74 65 6D 00 
3613c     46 75 6E 63 
36140     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
36144     20 6E 6F 74 
36148     20 69 6D 70 
3614c     6C 65 6D 65 
36150     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
36154     00 44 69 72 
36158     65 63 74 6F 
3615c     72 79 20 6E 
36160     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
36164     6D 70 74 79 
36168     00 4E 61 6D 
3616c     65 20 74 6F 
36170     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
36174     6E 67 00 44 
36178     65 76 69 63 
3617c     65 20 6E 6F 
36180     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
36184     65 6B 61 62 
36188     6C 65 00 42 
3618c     61 64 20 61 
36190     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
36194     73 73 00 42 
36198     72 6F 6B 65 
3619c     6E 20 63 6F 
361a0     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
361a4     74 69 6F 6E 
361a8     00 44 65 76 
361ac     69 63 65 20 
361b0     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
361b4     65 73 6F 75 
361b8     72 63 65 20 
361bc     62 75 73 79 
361c0     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
361c4     73 73 20 64 
361c8     65 76 69 63 
361cc     65 20 6C 69 
361d0     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
361d4     6F 20 73 70 
361d8     61 63 65 20 
361dc     6F 6E 20 64 
361e0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
361e4     65 00 55 6E 
361e8     6B 6E 6F 77 
361ec     6E 20 65 72 
361f0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
361f4     00 00 00 00 
361f8     00 00 00 00 | 	byte	$00[8]
361fc     05 00 00 00 
36200     00 00 00 00 
36204     00 00 00 00 
36208     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3620c     00 00 00 00 | 	byte	$00, $00, $00, $00
36210     00 00 60 09 | 	long	(150 {__system___tx})<<20
36214     00 00 70 09 | 	long	(151 {__system___rx})<<20
36218     00 00 00 00 | 	byte	$00, $00, $00, $00
3621c     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
36220     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
36224     00 00 00 00 
36228     00 00 00 00 | 	byte	$00[8]
3622c     01 00 00 00 
36230     06 00 00 00 
36234     00 00 00 00 
36238     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3623c     00 00 00 00 
36240     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
36244     00 00 60 09 | 	long	(150 {__system___tx})<<20
36248     00 00 70 09 | 	long	(151 {__system___rx})<<20
3624c     00 00 00 00 | 	byte	$00, $00, $00, $00
36250     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
36254     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
36258     00 00 00 00 
3625c     00 00 00 00 | 	byte	$00[8]
36260     01 00 00 00 
36264     06 00 00 00 
36268     00 00 00 00 
3626c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36270     00 00 00 00 
36274     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
36278     00 00 60 09 | 	long	(150 {__system___tx})<<20
3627c     00 00 70 09 | 	long	(151 {__system___rx})<<20
36280     00 00 00 00 | 	byte	$00, $00, $00, $00
36284     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
36288     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
3628c     00 00 00 00 
      ...             
363fc     00 00 00 00 
36400     00 00 00 00 | 	byte	$00[376]
36404     08 64 03 00 | 	long	@@@__system__dat_ + 1844
36408     00 00 00 00 
3640c     00 00 00 00 
36410     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36414                 | 	alignl
36414                 | _fatfs_cc_dat_
36414     C7 00 FC 00 
36418     E9 00 E2 00 
3641c     E4 00 E0 00 
36420     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
36424     EA 00 EB 00 
36428     E8 00 EF 00 
3642c     EE 00 EC 00 
36430     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
36434     C9 00 E6 00 
36438     C6 00 F4 00 
3643c     F6 00 F2 00 
36440     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
36444     FF 00 D6 00 
36448     DC 00 F8 00 
3644c     A3 00 D8 00 
36450     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
36454     E1 00 ED 00 
36458     F3 00 FA 00 
3645c     F1 00 D1 00 
36460     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
36464     BF 00 AE 00 
36468     AC 00 BD 00 
3646c     BC 00 A1 00 
36470     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
36474     91 25 92 25 
36478     93 25 02 25 
3647c     24 25 C1 00 
36480     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
36484     A9 00 63 25 
36488     51 25 57 25 
3648c     5D 25 A2 00 
36490     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
36494     14 25 34 25 
36498     2C 25 1C 25 
3649c     00 25 3C 25 
364a0     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
364a4     5A 25 54 25 
364a8     69 25 66 25 
364ac     60 25 50 25 
364b0     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
364b4     F0 00 D0 00 
364b8     CA 00 CB 00 
364bc     C8 00 31 01 
364c0     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
364c4     CF 00 18 25 
364c8     0C 25 88 25 
364cc     84 25 A6 00 
364d0     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
364d4     D3 00 DF 00 
364d8     D4 00 D2 00 
364dc     F5 00 D5 00 
364e0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
364e4     DE 00 DA 00 
364e8     DB 00 D9 00 
364ec     FD 00 DD 00 
364f0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
364f4     AD 00 B1 00 
364f8     17 20 BE 00 
364fc     B6 00 A7 00 
36500     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
36504     B0 00 A8 00 
36508     B7 00 B9 00 
3650c     B3 00 B2 00 
36510     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
36514     61 00 1A 03 
36518     E0 00 17 03 
3651c     F8 00 07 03 
36520     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
36524     78 01 00 01 
36528     30 01 32 01 
3652c     06 01 39 01 
36530     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
36534     2E 01 79 01 
36538     06 01 80 01 
3653c     4D 00 43 02 
36540     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
36544     82 01 84 01 
36548     84 01 86 01 
3654c     87 01 87 01 
36550     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
36554     8B 01 8B 01 
36558     8D 01 8E 01 
3655c     8F 01 90 01 
36560     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
36564     93 01 94 01 
36568     F6 01 96 01 
3656c     97 01 98 01 
36570     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
36574     9B 01 9C 01 
36578     9D 01 20 02 
3657c     9F 01 A0 01 
36580     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
36584     A2 01 A4 01 
36588     A4 01 A6 01 
3658c     A7 01 A7 01 
36590     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
36594     AB 01 AC 01 
36598     AC 01 AE 01 
3659c     AF 01 AF 01 
365a0     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
365a4     B3 01 B3 01 
365a8     B5 01 B5 01 
365ac     B7 01 B8 01 
365b0     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
365b4     BB 01 BC 01 
365b8     BC 01 BE 01 
365bc     F7 01 C0 01 
365c0     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
365c4     C3 01 C4 01 
365c8     C5 01 C4 01 
365cc     C7 01 C8 01 
365d0     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
365d4     CB 01 CA 01 
365d8     CD 01 10 01 
365dc     DD 01 01 00 
365e0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
365e4     12 01 F3 01 
365e8     03 00 F1 01 
365ec     F4 01 F4 01 
365f0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
365f4     22 02 12 01 
365f8     3A 02 09 00 
365fc     65 2C 3B 02 
36600     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
36604     66 2C 3F 02 
36608     40 02 41 02 
3660c     41 02 46 02 
36610     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
36614     40 00 81 01 
36618     86 01 55 02 
3661c     89 01 8A 01 
36620     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
36624     5A 02 90 01 
36628     5C 02 5D 02 
3662c     5E 02 5F 02 
36630     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
36634     62 02 94 01 
36638     64 02 65 02 
3663c     66 02 67 02 
36640     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
36644     6A 02 62 2C 
36648     6C 02 6D 02 
3664c     6E 02 9C 01 
36650     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
36654     9D 01 73 02 
36658     74 02 9F 01 
3665c     76 02 77 02 
36660     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
36664     7A 02 7B 02 
36668     7C 02 64 2C 
3666c     7E 02 7F 02 
36670     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
36674     82 02 A9 01 
36678     84 02 85 02 
3667c     86 02 87 02 
36680     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
36684     B1 01 B2 01 
36688     45 02 8D 02 
3668c     8E 02 8F 02 
36690     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
36694     B7 01 7B 03 
36698     03 00 FD 03 
3669c     FE 03 FF 03 
366a0     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
366a4     86 03 88 03 
366a8     89 03 8A 03 
366ac     B1 03 11 03 
366b0     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
366b4     A3 03 A3 03 
366b8     C4 03 08 03 
366bc     CC 03 03 00 
366c0     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
366c4     8F 03 D8 03 
366c8     18 01 F2 03 
366cc     0A 00 F9 03 
366d0     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
366d4     F5 03 F6 03 
366d8     F7 03 F7 03 
366dc     F9 03 FA 03 
366e0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
366e4     20 03 50 04 
366e8     10 07 60 04 
366ec     22 01 8A 04 
366f0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
366f4     0E 01 CF 04 
366f8     01 00 C0 04 
366fc     D0 04 44 01 
36700     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
36704     00 00 7D 1D 
36708     01 00 63 2C 
3670c     00 1E 96 01 
36710     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
36714     00 1F 08 06 
36718     10 1F 06 06 
3671c     20 1F 08 06 
36720     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
36724     40 1F 06 06 
36728     51 1F 07 00 
3672c     59 1F 52 1F 
36730     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
36734     5D 1F 56 1F 
36738     5F 1F 60 1F 
3673c     08 06 70 1F 
36740     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
36744     BB 1F C8 1F 
36748     C9 1F CA 1F 
3674c     CB 1F DA 1F 
36750     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
36754     F9 1F EA 1F 
36758     EB 1F FA 1F 
3675c     FB 1F 80 1F 
36760     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
36764     08 06 A0 1F 
36768     08 06 B0 1F 
3676c     04 00 B8 1F 
36770     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
36774     BC 1F CC 1F 
36778     01 00 C3 1F 
3677c     D0 1F 02 06 
36780     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
36784     E5 1F 01 00 
36788     EC 1F F3 1F 
3678c     01 00 FC 1F 
36790     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
36794     32 21 70 21 
36798     10 02 84 21 
3679c     01 00 83 21 
367a0     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
367a4     30 2C 2F 04 
367a8     60 2C 02 01 
367ac     67 2C 06 01 
367b0     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
367b4     80 2C 64 01 
367b8     00 2D 26 08 
367bc     41 FF 1A 03 
367c0     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
367c4     05 07 09 0E 
367c8     10 12 14 16 
367cc     18 1C 1E 43 
367d0     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
367d4     41 41 43 45 
367d8     45 45 49 49 
367dc     49 41 41 45 
367e0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
367e4     4F 55 55 59 
367e8     4F 55 4F 9C 
367ec     4F 9E 9F 41 
367f0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
367f4     A5 A6 A7 A8 
367f8     A9 AA AB AC 
367fc     AD AE AF B0 
36800     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
36804     41 41 41 B8 
36808     B9 BA BB BC 
3680c     BD BE BF C0 
36810     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
36814     C5 41 41 C8 
36818     C9 CA CB CC 
3681c     CD CE CF D1 
36820     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
36824     49 49 49 49 
36828     D9 DA DB DC 
3682c     DD 49 DF 4F 
36830     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
36834     4F E6 E8 E8 
36838     55 55 55 59 
3683c     59 EE EF F0 
36840     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
36844     F5 F6 F7 F8 
36848     F9 FA FB FC 
3684c     FD FE FF 00 
36850     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
36854     00 00 00 00 | 	byte	$00, $00, $00, $00
36858     00 00 50 08 | 	long	(133 {_fatfs_cc_v_close})<<20
3685c     00 00 60 08 | 	long	(134 {_fatfs_cc_v_read})<<20
36860     00 00 70 08 | 	long	(135 {_fatfs_cc_v_write})<<20
36864     00 00 80 08 | 	long	(136 {_fatfs_cc_v_lseek})<<20
36868     00 00 90 08 | 	long	(137 {_fatfs_cc_v_ioctl})<<20
3686c     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_flush})<<20
36870     00 00 00 00 
36874     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
36878     00 00 A0 08 | 	long	(138 {_fatfs_cc_v_open})<<20
3687c     00 00 B0 08 | 	long	(139 {_fatfs_cc_v_creat})<<20
36880     00 00 C0 08 | 	long	(140 {_fatfs_cc_v_opendir})<<20
36884     00 00 D0 08 | 	long	(141 {_fatfs_cc_v_closedir})<<20
36888     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_readdir})<<20
3688c     00 00 F0 08 | 	long	(143 {_fatfs_cc_v_stat})<<20
36890     00 00 00 09 | 	long	(144 {_fatfs_cc_v_mkdir})<<20
36894     00 00 10 09 | 	long	(145 {_fatfs_cc_v_rmdir})<<20
36898     00 00 20 09 | 	long	(146 {_fatfs_cc_v_remove})<<20
3689c     00 00 30 09 | 	long	(147 {_fatfs_cc_v_rename})<<20
368a0     00 00 40 09 | 	long	(148 {_fatfs_cc_v_init})<<20
368a4     00 00 50 09 | 	long	(149 {_fatfs_cc_v_deinit})<<20
368a8     FF FF FF FF 
368ac     1F 00 00 00 
368b0     1C 00 00 00 
368b4     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
368b8     1E 00 00 00 
368bc     1F 00 00 00 
368c0     1E 00 00 00 
368c4     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
368c8     1F 00 00 00 
368cc     1E 00 00 00 
368d0     1F 00 00 00 
368d4     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
368d8     1F 00 00 00 
368dc     00 00 00 00 
368e0     1F 00 00 00 
368e4     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
368e8     5A 00 00 00 
368ec     78 00 00 00 
368f0     97 00 00 00 
368f4     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
368f8     D4 00 00 00 
368fc     F3 00 00 00 
36900     11 01 00 00 
36904     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
36908     4E 01 00 00 
3690c     6D 01 00 00 
36910     FF FF FF FF 
36914     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
36918     00 00 00 00 
      ...             
36930     00 00 00 00 
36934     00 00 00 00 | 	byte	$00[32]
36938     56 69 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3693c     5A 69 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
36940     00 00 00 00 
36944     00 00 00 00 
36948     00 00 00 00 
3694c     00 00 00 00 
36950     00 00       | 	byte	$00[18]
36952     3F 3F 3F 00 
36956     55 43 54 00 
3695a     55 43 54 00 
3695e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
36962     00 00 00 00 
36966     00 00 00    | 	byte	$00[7]
36969     CA 9A 3B 00 
3696d     00 00 00 01 
36971     01 01 01 01 
36975     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
36979     91 11 11 11 
3697d     11 01 01 01 
36981     01 01 01 01 
36985     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
36989     01 01 01 01 
3698d     01 01 01    | 	byte	$01[7]
36990     90 20 20 20 
36994     20 20 20 20 
36998     20 20 20 20 
3699c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
369a0     42 42 42 42 
369a4     42 42 42 42 
369a8     42 42       | 	byte	$42[10]
369aa     20 20 20 20 
369ae     20 20 20    | 	byte	$20[7]
369b1     44 44 44 44 
369b5     44 44       | 	byte	$44[6]
369b7     04 04 04 04 
369bb     04 04 04 04 
369bf     04 04 04 04 
369c3     04 04 04 04 
369c7     04 04 04 04 | 	byte	$04[20]
369cb     20 20 20 20 
369cf     20 20       | 	byte	$20[6]
369d1     48 48 48 48 
369d5     48 48       | 	byte	$48[6]
369d7     08 08 08 08 
369db     08 08 08 08 
369df     08 08 08 08 
369e3     08 08 08 08 
369e7     08 08 08 08 | 	byte	$08[20]
369eb     20 20 20 20 
369ef     01 00 00 00 
369f3     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
369f4                 | __methodtable__
369f4     F8 6E 01 00 | 	long	@_do_no_command
369f8     58 F3 00 00 | 	long	@_do_plus
369fc     44 F8 00 00 | 	long	@_do_minus
36a00     0C FD 00 00 | 	long	@_do_or
36a04     24 FE 00 00 | 	long	@_do_mul
36a08     B0 03 01 00 | 	long	@_do_fdiv
36a0c     F4 FB 00 00 | 	long	@_do_and
36a10     90 01 01 00 | 	long	@_do_div
36a14     78 05 01 00 | 	long	@_do_mod
36a18     98 07 01 00 | 	long	@_do_shl
36a1c     B0 08 01 00 | 	long	@_do_shr
36a20     C8 09 01 00 | 	long	@_do_power
36a24     D8 E6 00 00 | 	long	@_do_getvar
36a28     40 A2 00 00 | 	long	@_do_push
36a2c     D8 E0 00 00 | 	long	@_do_assign
36a30     44 41 01 00 | 	long	@_do_cls
36a34     E4 DA 00 00 | 	long	@_do_new
36a38     E8 41 01 00 | 	long	@_do_plot
36a3c     B8 42 01 00 | 	long	@_do_draw
36a40     2C 4C 01 00 | 	long	@_do_print
36a44     24 45 01 00 | 	long	@_do_circle
36a48     AC 43 01 00 | 	long	@_do_fcircle
36a4c     9C 46 01 00 | 	long	@_do_box
36a50     44 4A 01 00 | 	long	@_do_frame
36a54     B0 41 01 00 | 	long	@_do_color
36a58     6C 82 00 00 | 	long	@_do_for
36a5c     98 84 00 00 | 	long	@_do_next
36a60     48 D8 00 00 | 	long	@_do_list
36a64     90 B2 00 00 | 	long	@_do_run
36a68     94 DF 00 00 | 	long	@_do_error
36a6c     90 DC 00 00 | 	long	@_do_fast_goto
36a70     80 DD 00 00 | 	long	@_do_find_goto
36a74     90 DF 00 00 | 	long	@_do_slow_goto
36a78     90 28 01 00 | 	long	@_do_converttoint
36a7c     84 A8 00 00 | 	long	@_test_csave
36a80     D8 AB 00 00 | 	long	@_do_save
36a84     C4 AE 00 00 | 	long	@_do_load
36a88     90 5A 01 00 | 	long	@_do_pinwrite
36a8c     2C 65 01 00 | 	long	@_do_waitms
36a90     68 66 01 00 | 	long	@_do_waitvbl
36a94     68 69 01 00 | 	long	@_do_if
36a98     4C 6A 01 00 | 	long	@_do_else
36a9c     14 6B 01 00 | 	long	@_do_nothing
36aa0     90 0B 01 00 | 	long	@_do_eq
36aa4     08 1A 01 00 | 	long	@_do_ge
36aa8     E0 1E 01 00 | 	long	@_do_le
36aac     68 10 01 00 | 	long	@_do_gt
36ab0     40 15 01 00 | 	long	@_do_lt
36ab4     B8 23 01 00 | 	long	@_do_ne
36ab8     6C 2B 01 00 | 	long	@_do_rnd
36abc     18 6B 01 00 | 	long	@_do_brun
36ac0     E4 6D 01 00 | 	long	@_do_beep
36ac4     98 66 01 00 | 	long	@_do_dir
36ac8     F4 50 01 00 | 	long	@_do_paper
36acc     7C 51 01 00 | 	long	@_do_ink
36ad0     18 52 01 00 | 	long	@_do_font
36ad4     94 52 01 00 | 	long	@_do_mode
36ad8     50 6D 01 00 | 	long	@_do_mouse
36adc     DC 40 01 00 | 	long	@_do_gettime
36ae0     84 6D 01 00 | 	long	@_do_cursor
36ae4     B8 6D 01 00 | 	long	@_do_click
36ae8     68 3E 01 00 | 	long	@_do_mousex
36aec     AC 3E 01 00 | 	long	@_do_mousey
36af0     34 3F 01 00 | 	long	@_do_mousek
36af4     F0 3E 01 00 | 	long	@_do_mousew
36af8     40 2E 01 00 | 	long	@_do_sin
36afc     94 35 01 00 | 	long	@_do_stick
36b00     18 37 01 00 | 	long	@_do_strig
36b04     7C 3D 01 00 | 	long	@_do_sprite
36b08     EC 39 01 00 | 	long	@_do_defsprite
36b0c     9C 38 01 00 | 	long	@_do_getpixel
36b10     74 66 01 00 | 	long	@_do_waitclock
36b14     04 6F 01 00 | 	long	@_do_negative
36b18     78 3F 01 00 | 	long	@_do_rdpin
36b1c     E4 3F 01 00 | 	long	@_do_rqpin
36b20     58 40 01 00 | 	long	@_do_pinread
36b24     28 5D 01 00 | 	long	@_do_wrpin
36b28     A8 5D 01 00 | 	long	@_do_wxpin
36b2c     28 5E 01 00 | 	long	@_do_wypin
36b30     18 5B 01 00 | 	long	@_do_pinfloat
36b34     58 5B 01 00 | 	long	@_do_pinlo
36b38     98 5B 01 00 | 	long	@_do_pinhi
36b3c     18 5C 01 00 | 	long	@_do_pinstart
36b40     D8 5B 01 00 | 	long	@_do_pintoggle
36b44     A8 5E 01 00 | 	long	@_do_position
36b48     4C 2F 01 00 | 	long	@_do_cos
36b4c     6C 30 01 00 | 	long	@_do_tan
36b50     90 33 01 00 | 	long	@_do_atn
36b54     78 31 01 00 | 	long	@_do_asin
36b58     84 32 01 00 | 	long	@_do_acos
36b5c     A4 34 01 00 | 	long	@_do_sqr
36b60     84 48 01 00 | 	long	@_do_fill
36b64     50 CE 00 00 | 	long	@_do_defsnd
36b68     DC B5 00 00 | 	long	@_do_defenv
36b6c     70 6A 01 00 | 	long	@_do_rad
36b70     98 6A 01 00 | 	long	@_do_deg
36b74     C0 6A 01 00 | 	long	@_do_int
36b78     84 C2 00 00 | 	long	@_do_play
36b7c     F0 57 01 00 | 	long	@_do_setdelay
36b80     48 57 01 00 | 	long	@_do_setenv
36b84     98 58 01 00 | 	long	@_do_setlen
36b88     E8 59 01 00 | 	long	@_do_setpan
36b8c     40 59 01 00 | 	long	@_do_setvol
36b90     F8 55 01 00 | 	long	@_do_setwave
36b94     A0 56 01 00 | 	long	@_do_setsustain
36b98     B8 CD 00 00 | 	long	@_do_release
36b9c     34 2D 01 00 | 	long	@_do_getenvsustain
36ba0     30 5F 01 00 | 	long	@_do_poke
36ba4     08 60 01 00 | 	long	@_do_dpoke
36ba8     E0 60 01 00 | 	long	@_do_lpoke
36bac     B8 61 01 00 | 	long	@_do_peek
36bb0     68 62 01 00 | 	long	@_do_dpeek
36bb4     14 63 01 00 | 	long	@_do_lpeek
36bb8     24 64 01 00 | 	long	@_do_adr
36bbc     C0 63 01 00 | 	long	@_do_fre
36bc0     28 64 01 00 | 	long	@_do_getnotevalue
36bc4     90 EC 00 00 | 	long	@_do_getaddr
36bc8     80 F0 00 00 | 	long	@_do_inkey
36bcc     B4 6F 01 00 | 	long	@_do_abs
36bd0     A0 AF 01 00 | 	long	@_hg010b_spin2_putchar
36bd4     D0 B7 02 00 | 	long	@__struct___bas_wrap_sender_tx
36bd8     14 B8 02 00 | 	long	@__struct___bas_wrap_sender_rx
36bdc     5C B8 02 00 | 	long	@__struct___bas_wrap_sender_close
36be0     00 B7 02 00 | 	long	@__struct__s_vfs_file_t_putchar
36be4     70 B7 02 00 | 	long	@__struct__s_vfs_file_t_getchar
36be8     B8 B6 02 00 | 	long	@___strs_cl_pfunc
36bec     18 16 02 00 | 	long	@__system____root_opendir
36bf0     B4 16 02 00 | 	long	@__system____root_closedir
36bf4     30 16 02 00 | 	long	@__system____root_readdir
36bf8     BC 16 02 00 | 	long	@__system____root_stat
36bfc     44 0F 02 00 | 	long	@__system____default_putc
36c00     C8 0E 02 00 | 	long	@__system____default_getc
36c04     EC 0F 02 00 | 	long	@__system____default_flush
36c08     BC A1 02 00 | 	long	@_fatfs_cc_v_close
36c0c     D8 A5 02 00 | 	long	@_fatfs_cc_v_read
36c10     EC A6 02 00 | 	long	@_fatfs_cc_v_write
36c14     CC A7 02 00 | 	long	@_fatfs_cc_v_lseek
36c18     54 A8 02 00 | 	long	@_fatfs_cc_v_ioctl
36c1c     A8 A8 02 00 | 	long	@_fatfs_cc_v_open
36c20     20 A1 02 00 | 	long	@_fatfs_cc_v_creat
36c24     00 A2 02 00 | 	long	@_fatfs_cc_v_opendir
36c28     74 A2 02 00 | 	long	@_fatfs_cc_v_closedir
36c2c     B4 A2 02 00 | 	long	@_fatfs_cc_v_readdir
36c30     E8 A3 02 00 | 	long	@_fatfs_cc_v_stat
36c34     68 A8 02 00 | 	long	@_fatfs_cc_v_mkdir
36c38     88 A8 02 00 | 	long	@_fatfs_cc_v_rmdir
36c3c     78 A8 02 00 | 	long	@_fatfs_cc_v_remove
36c40     98 A8 02 00 | 	long	@_fatfs_cc_v_rename
36c44     B8 A9 02 00 | 	long	@_fatfs_cc_v_init
36c48     C0 A9 02 00 | 	long	@_fatfs_cc_v_deinit
36c4c     F0 C3 01 00 | 	long	@__system___tx
36c50     30 C4 01 00 | 	long	@__system___rx
36c54     24 22 02 00 | 	long	@__system___rxtxioctl_0630
36c58     7C 22 02 00 | 	long	@__system____dummy_flush_0631
36c5c     88 A9 02 00 | 	long	@_fatfs_cc_v_flush
36c60                 | __heap_base
36c60     00 00 00 00 
      ...             
65a60     00 00 00 00 
65a64     00 00 00 00 | 	long	0[48002]
65a68                 | objmem
65a68     00 00 00 00 
      ...             
75160     00 00 00 00 
75164     00 00 00 00 | 	long	0[15808]
75168                 | stackspace
75168     00 00 00 00 | 	long	0[1]
7516c 100             | 	org	COG_BSS_START
7516c 100             | _var01
7516c 100             | 	res	1
7516c 101             | _var02
7516c 101             | 	res	1
7516c 102             | _var03
7516c 102             | 	res	1
7516c 103             | _var04
7516c 103             | 	res	1
7516c 104             | _var05
7516c 104             | 	res	1
7516c 105             | _var06
7516c 105             | 	res	1
7516c 106             | _var07
7516c 106             | 	res	1
7516c 107             | _var08
7516c 107             | 	res	1
7516c 108             | _var09
7516c 108             | 	res	1
7516c 109             | arg01
7516c 109             | 	res	1
7516c 10a             | arg02
7516c 10a             | 	res	1
7516c 10b             | arg03
7516c 10b             | 	res	1
7516c 10c             | arg04
7516c 10c             | 	res	1
7516c 10d             | arg05
7516c 10d             | 	res	1
7516c 10e             | arg06
7516c 10e             | 	res	1
7516c 10f             | local01
7516c 10f             | 	res	1
7516c 110             | local02
7516c 110             | 	res	1
7516c 111             | local03
7516c 111             | 	res	1
7516c 112             | local04
7516c 112             | 	res	1
7516c 113             | local05
7516c 113             | 	res	1
7516c 114             | local06
7516c 114             | 	res	1
7516c 115             | local07
7516c 115             | 	res	1
7516c 116             | local08
7516c 116             | 	res	1
7516c 117             | local09
7516c 117             | 	res	1
7516c 118             | local10
7516c 118             | 	res	1
7516c 119             | local11
7516c 119             | 	res	1
7516c 11a             | local12
7516c 11a             | 	res	1
7516c 11b             | local13
7516c 11b             | 	res	1
7516c 11c             | local14
7516c 11c             | 	res	1
7516c 11d             | local15
7516c 11d             | 	res	1
7516c 11e             | local16
7516c 11e             | 	res	1
7516c 11f             | local17
7516c 11f             | 	res	1
7516c 120             | local18
7516c 120             | 	res	1
7516c 121             | local19
7516c 121             | 	res	1
7516c 122             | local20
7516c 122             | 	res	1
7516c 123             | local21
7516c 123             | 	res	1
7516c 124             | local22
7516c 124             | 	res	1
7516c 125             | local23
7516c 125             | 	res	1
7516c 126             | local24
7516c 126             | 	res	1
7516c 127             | local25
7516c 127             | 	res	1
7516c 128             | local26
7516c 128             | 	res	1
7516c 129             | local27
7516c 129             | 	res	1
7516c 12a             | local28
7516c 12a             | 	res	1
7516c 12b             | local29
7516c 12b             | 	res	1
7516c 12c             | local30
7516c 12c             | 	res	1
7516c 12d             | local31
7516c 12d             | 	res	1
7516c 12e             | local32
7516c 12e             | 	res	1
7516c 12f             | local33
7516c 12f             | 	res	1
7516c 130             | local34
7516c 130             | 	res	1
7516c 131             | local35
7516c 131             | 	res	1
7516c 132             | muldiva_
7516c 132             | 	res	1
7516c 133             | muldivb_
7516c 133             | 	res	1
7516c 134             | 	fit	480
7516c 134             | 
