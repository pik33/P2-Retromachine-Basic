00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic026b.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 26
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 4C 90 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec C0 6D 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 54 6B 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 C8 5B 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 34 5E 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 98 59 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 98 C6 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 74 65 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 0C F8 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 BC 1F 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 74 1D 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 4C 2F 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc CC 52 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7B 00 00 FF 
00818     13 E4 05 F1 | 	add	objptr, ##62995
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7B 00 00 FF 
0082c     58 E4 85 F1 | 	sub	objptr, ##63064
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     04 BF B1 FD | 	call	#__system___waitms
0083c     7B 00 00 FF 
00840     58 E4 05 F1 | 	add	objptr, ##63064
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7B 00 00 FF 
00854     58 E4 85 F1 | 	sub	objptr, ##63064
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     DC BE B1 FD | 	call	#__system___waitms
00864     7B 00 00 FF 
00868     58 E4 05 F1 | 	add	objptr, ##63064
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7B 00 00 FF 
0087c     58 E4 85 F1 | 	sub	objptr, ##63064
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     B4 BE B1 FD | 	call	#__system___waitms
0088c     7B 00 00 FF 
00890     58 E4 05 F1 | 	add	objptr, ##63064
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7B 00 00 FF 
008a4     58 E4 85 F1 | 	sub	objptr, ##63064
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     D0 E5 05 F1 | 	add	objptr, ##62928
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     D8 E5 85 F1 | 	sub	objptr, ##62936
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     48 B4 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     98 B4 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     88 B4 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     E0 E5 05 F1 | 	add	objptr, ##62944
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     FC E5 85 F1 | 	sub	objptr, ##62972
009b0     EC B3 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     E0 E5 05 F1 | 	add	objptr, ##62944
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     FC E5 85 F1 | 	sub	objptr, ##62972
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     00 E4 05 F1 | 	add	objptr, ##44544
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     6A 00 00 FF 
00a68     60 E4 85 F1 | 	sub	objptr, ##54368
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     F0 E5 05 F1 | 	add	objptr, ##43504
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     5D 01 00 FF 
00abc     8A 16 06 F6 | 	mov	arg03, ##@LR__4587
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     57 00 00 FF 
00afc     00 E4 85 F1 | 	sub	objptr, ##44544
00b00     1C DE B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     54 DD B1 FD | 	call	#__system__LTrim_S
00b0c     57 00 00 FF 
00b10     00 E4 05 F1 | 	add	objptr, ##44544
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     5D 01 00 FF 
00b1c     8B 1E 06 F6 | 	mov	local01, ##@LR__4588
00b20     24 00 00 FF 
00b24     A8 E4 05 F1 | 	add	objptr, ##18600
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     A8 E4 85 F1 | 	sub	objptr, ##18600
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     57 00 00 FF 
00b3c     00 E4 85 F1 | 	sub	objptr, ##44544
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7B 00 00 FF 
00b5c     AC E4 05 F1 | 	add	objptr, ##63148
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7B 00 00 FF 
00b68     AC E4 85 F1 | 	sub	objptr, ##63148
00b6c     C0 27 90 AD |  if_e	jmp	#LR__0149
00b70     7B 00 00 FF 
00b74     B0 E4 05 F1 | 	add	objptr, ##63152
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     B0 E4 85 F1 | 	sub	objptr, ##18608
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     57 00 00 FF 
00b90     00 E4 85 F1 | 	sub	objptr, ##44544
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     57 00 00 FF 
00bc0     00 E4 05 F1 | 	add	objptr, ##44544
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     57 00 00 FF 
00bcc     00 E4 85 F1 | 	sub	objptr, ##44544
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     CC D9 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     5D 01 00 FF 
00be4     8C 14 06 F6 | 	mov	arg02, ##@LR__4589
00be8     88 B8 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7B 00 00 FF 
00bf8     B0 E4 05 F1 | 	add	objptr, ##63152
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7B 00 00 FF 
00c04     B0 E4 85 F1 | 	sub	objptr, ##63152
00c08     7B 00 00 AF 
00c0c     B0 E4 05 A1 |  if_e	add	objptr, ##63152
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7B 00 00 AF 
00c18     B0 E4 85 A1 |  if_e	sub	objptr, ##63152
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     57 00 00 FF 
00c24     00 E4 05 F1 | 	add	objptr, ##44544
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     57 00 00 FF 
00c30     00 E4 85 F1 | 	sub	objptr, ##44544
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     68 D9 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     5D 01 00 FF 
00c48     8E 14 06 F6 | 	mov	arg02, ##@LR__4590
00c4c     24 B8 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7B 00 00 AF 
00c58     B0 E4 05 A1 |  if_e	add	objptr, ##63152
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7B 00 00 AF 
00c64     B0 E4 85 A1 |  if_e	sub	objptr, ##63152
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7B 00 00 AF 
00c70     B0 E4 05 A1 |  if_e	add	objptr, ##63152
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7B 00 00 AF 
00c7c     B0 E4 85 A1 |  if_e	sub	objptr, ##63152
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     F0 E5 05 F1 | 	add	objptr, ##43504
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     C0 E4 05 F1 | 	add	objptr, ##19648
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7B 00 00 FF 
00ca8     B0 E4 85 F1 | 	sub	objptr, ##63152
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     57 00 00 FF 
00cc4     00 E4 05 F1 | 	add	objptr, ##44544
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     57 00 00 FF 
00cd0     00 E4 85 F1 | 	sub	objptr, ##44544
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     C8 D8 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     5D 01 00 FF 
00ce8     90 2E 06 F6 | 	mov	local09, ##@LR__4591
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     80 B7 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     F0 E5 05 F1 | 	add	objptr, ##43504
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     F0 E5 85 F1 | 	sub	objptr, ##43504
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7B 00 00 FF 
00d34     AC E4 05 F1 | 	add	objptr, ##63148
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7B 00 00 FF 
00d40     AC E4 85 F1 | 	sub	objptr, ##63148
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7B 00 00 FF 
00d58     AC E4 05 F1 | 	add	objptr, ##63148
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7B 00 00 FF 
00d64     AC E4 85 F1 | 	sub	objptr, ##63148
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     57 00 00 FF 
00d74     00 E4 05 F1 | 	add	objptr, ##44544
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     57 00 00 FF 
00d80     00 E4 85 F1 | 	sub	objptr, ##44544
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     68 D7 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     68 DB B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     A0 DA B1 FD | 	call	#__system__LTrim_S
00dc0     7B 00 00 FF 
00dc4     B4 E4 05 F1 | 	add	objptr, ##63156
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     B4 E4 85 F1 | 	sub	objptr, ##18612
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     57 00 00 FF 
00ddc     00 E4 85 F1 | 	sub	objptr, ##44544
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     A4 D6 B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     2C DB B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     64 DA B1 FD | 	call	#__system__LTrim_S
00dfc     57 00 00 FF 
00e00     00 E4 05 F1 | 	add	objptr, ##44544
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     57 00 00 FF 
00e0c     00 E4 85 F1 | 	sub	objptr, ##44544
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     5D 01 00 FF 
00e18     92 1E 06 F6 | 	mov	local01, ##@LR__4592
00e1c     7B 00 00 FF 
00e20     B4 E4 05 F1 | 	add	objptr, ##63156
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7B 00 00 FF 
00e2c     B4 E4 85 F1 | 	sub	objptr, ##63156
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     57 00 00 FF 
00e34     08 E4 05 F1 | 	add	objptr, ##44552
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     57 00 00 FF 
00e40     08 E4 85 F1 | 	sub	objptr, ##44552
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7B 00 00 FF 
00e54     B4 E4 05 F1 | 	add	objptr, ##63156
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7B 00 00 FF 
00e60     B4 E4 85 F1 | 	sub	objptr, ##63156
00e64     5D 01 00 FF 
00e68     93 14 06 F6 | 	mov	arg02, ##@LR__4593
00e6c     04 B6 B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     57 00 00 5F 
00e78     08 E4 05 51 |  if_ne	add	objptr, ##44552
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     57 00 00 5F 
00e84     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     57 00 00 FF 
00e90     08 E4 05 F1 | 	add	objptr, ##44552
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     57 00 00 FF 
00e9c     08 E4 85 F1 | 	sub	objptr, ##44552
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7B 00 00 FF 
00eb0     B4 E4 05 F1 | 	add	objptr, ##63156
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7B 00 00 FF 
00ebc     B4 E4 85 F1 | 	sub	objptr, ##63156
00ec0     5D 01 00 FF 
00ec4     94 14 06 F6 | 	mov	arg02, ##@LR__4594
00ec8     A8 B5 B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     57 00 00 AF 
00ed4     08 E4 05 A1 |  if_e	add	objptr, ##44552
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     57 00 00 AF 
00ee0     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     57 00 00 FF 
00eec     08 E4 05 F1 | 	add	objptr, ##44552
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     57 00 00 FF 
00ef8     08 E4 85 F1 | 	sub	objptr, ##44552
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7B 00 00 FF 
00f08     B4 E4 05 F1 | 	add	objptr, ##63156
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7B 00 00 FF 
00f14     B4 E4 85 F1 | 	sub	objptr, ##63156
00f18     5D 01 00 FF 
00f1c     95 14 06 F6 | 	mov	arg02, ##@LR__4595
00f20     50 B5 B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     57 00 00 5F 
00f2c     08 E4 05 51 |  if_ne	add	objptr, ##44552
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     57 00 00 5F 
00f38     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     57 00 00 FF 
00f44     08 E4 05 F1 | 	add	objptr, ##44552
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     57 00 00 FF 
00f50     08 E4 85 F1 | 	sub	objptr, ##44552
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7B 00 00 FF 
00f60     B4 E4 05 F1 | 	add	objptr, ##63156
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7B 00 00 FF 
00f6c     B4 E4 85 F1 | 	sub	objptr, ##63156
00f70     5D 01 00 FF 
00f74     96 14 06 F6 | 	mov	arg02, ##@LR__4596
00f78     F8 B4 B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     57 00 00 AF 
00f84     08 E4 05 A1 |  if_e	add	objptr, ##44552
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     57 00 00 AF 
00f90     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     57 00 00 FF 
00fb0     00 E4 05 F1 | 	add	objptr, ##44544
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     57 00 00 FF 
00fbc     00 E4 85 F1 | 	sub	objptr, ##44544
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     DC D5 B1 FD | 	call	#__system__Mid_S
00fcc     7B 00 00 FF 
00fd0     B8 E4 05 F1 | 	add	objptr, ##63160
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7B 00 00 FF 
00fe0     B8 E4 85 F1 | 	sub	objptr, ##63160
00fe4     C0 29 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7B 00 00 FF 
01010     AC E4 05 F1 | 	add	objptr, ##63148
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7B 00 00 FF 
0101c     AC E4 85 F1 | 	sub	objptr, ##63148
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7B 00 00 FF 
0106c     C0 E4 05 F1 | 	add	objptr, ##63168
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7B 00 00 FF 
010a0     C0 E4 85 F1 | 	sub	objptr, ##63168
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     57 00 00 FF 
010b4     00 E4 05 F1 | 	add	objptr, ##44544
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     C0 E4 05 F1 | 	add	objptr, ##18624
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7B 00 00 FF 
010cc     C0 E4 85 F1 | 	sub	objptr, ##63168
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     D0 D4 B1 FD | 	call	#__system__Mid_S
010d8     7B 00 00 FF 
010dc     C8 E4 05 F1 | 	add	objptr, ##63176
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7B 00 00 FF 
010e8     C8 E4 85 F1 | 	sub	objptr, ##63176
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     5D 01 00 FF 
010f4     97 14 06 F6 | 	mov	arg02, ##@LR__4597
010f8     78 B3 B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     F0 E5 05 F1 | 	add	objptr, ##43504
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     D8 E4 05 F1 | 	add	objptr, ##19672
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7B 00 00 FF 
01128     C8 E4 85 F1 | 	sub	objptr, ##63176
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     57 00 00 FF 
01138     00 E4 05 F1 | 	add	objptr, ##44544
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     C0 E4 05 F1 | 	add	objptr, ##18624
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7B 00 00 FF 
01164     C0 E4 85 F1 | 	sub	objptr, ##63168
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     30 D4 B1 FD | 	call	#__system__Mid_S
01178     7B 00 00 FF 
0117c     C8 E4 05 F1 | 	add	objptr, ##63176
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7B 00 00 FF 
01188     C8 E4 85 F1 | 	sub	objptr, ##63176
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     5D 01 00 FF 
01194     98 14 06 F6 | 	mov	arg02, ##@LR__4598
01198     D8 B2 B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     F0 E5 05 F1 | 	add	objptr, ##43504
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     D8 E4 05 F1 | 	add	objptr, ##19672
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7B 00 00 FF 
011c8     C8 E4 85 F1 | 	sub	objptr, ##63176
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     F0 E5 05 F1 | 	add	objptr, ##43504
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     5D 01 00 FF 
011fc     99 14 06 F6 | 	mov	arg02, ##@LR__4599
01200     54 00 00 FF 
01204     F0 E5 85 F1 | 	sub	objptr, ##43504
01208     68 B2 B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     F0 E5 05 F1 | 	add	objptr, ##43504
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     D8 E4 05 F1 | 	add	objptr, ##19672
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     D8 E4 85 F1 | 	sub	objptr, ##19672
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     F0 E5 85 F1 | 	sub	objptr, ##43504
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     2C B2 B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     F0 E5 05 F1 | 	add	objptr, ##43504
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     F0 E5 85 F1 | 	sub	objptr, ##43504
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7B 00 00 FF 
01314     C8 E4 05 F1 | 	add	objptr, ##63176
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7B 00 00 FF 
01320     C8 E4 85 F1 | 	sub	objptr, ##63176
01324     5D 01 00 FF 
01328     9B 14 06 F6 | 	mov	arg02, ##@LR__4600
0132c     44 B1 B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7B 00 00 FF 
01340     C8 E4 05 F1 | 	add	objptr, ##63176
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7B 00 00 FF 
0134c     C8 E4 85 F1 | 	sub	objptr, ##63176
01350     5D 01 00 FF 
01354     9D 14 06 F6 | 	mov	arg02, ##@LR__4601
01358     18 B1 B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     F0 E5 05 F1 | 	add	objptr, ##43504
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     F0 E5 85 F1 | 	sub	objptr, ##43504
01398     7C D1 B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     5D 01 00 FF 
013a4     9F 14 06 F6 | 	mov	arg02, ##@LR__4602
013a8     C8 B0 B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     F0 E5 05 F1 | 	add	objptr, ##43504
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     F0 E5 85 F1 | 	sub	objptr, ##43504
013e0     AC D0 B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     5D 01 00 FF 
013ec     A1 14 06 F6 | 	mov	arg02, ##@LR__4603
013f0     80 B0 B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     F0 E5 05 F1 | 	add	objptr, ##43504
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     F0 E5 85 F1 | 	sub	objptr, ##43504
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     94 D0 B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     14 B0 B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     F0 E5 05 F1 | 	add	objptr, ##43504
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     F0 E5 85 F1 | 	sub	objptr, ##43504
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     F0 E5 05 F1 | 	add	objptr, ##43504
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     E0 E4 05 F1 | 	add	objptr, ##19680
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     E0 E4 85 F1 | 	sub	objptr, ##19680
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     E4 E4 05 F1 | 	add	objptr, ##19684
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7B 00 00 FF 
01594     D0 E4 85 F1 | 	sub	objptr, ##63184
01598     5D 01 00 FF 
0159c     A3 14 06 F6 | 	mov	arg02, ##@LR__4604
015a0     D0 AE B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7B 00 00 FF 
015b0     D0 E4 05 F1 | 	add	objptr, ##63184
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7B 00 00 FF 
015bc     D0 E4 85 F1 | 	sub	objptr, ##63184
015c0     5D 01 00 FF 
015c4     A5 14 06 F6 | 	mov	arg02, ##@LR__4605
015c8     A8 AE B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7B 00 00 FF 
015d8     D0 E4 05 F1 | 	add	objptr, ##63184
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7B 00 00 FF 
015e4     D0 E4 85 F1 | 	sub	objptr, ##63184
015e8     5D 01 00 FF 
015ec     A7 14 06 F6 | 	mov	arg02, ##@LR__4606
015f0     80 AE B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7B 00 00 FF 
01600     D0 E4 05 F1 | 	add	objptr, ##63184
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7B 00 00 FF 
0160c     D0 E4 85 F1 | 	sub	objptr, ##63184
01610     5D 01 00 FF 
01614     A9 32 06 F6 | 	mov	local11, ##@LR__4607
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     54 AE B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7B 00 00 FF 
0162c     D0 E4 05 F1 | 	add	objptr, ##63184
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7B 00 00 FF 
01638     D0 E4 85 F1 | 	sub	objptr, ##63184
0163c     5D 01 00 FF 
01640     AB 30 06 F6 | 	mov	local10, ##@LR__4608
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     24 AE B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7B 00 00 FF 
0165c     D0 E4 05 F1 | 	add	objptr, ##63184
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7B 00 00 FF 
01668     D0 E4 85 F1 | 	sub	objptr, ##63184
0166c     5D 01 00 FF 
01670     AD 30 06 F6 | 	mov	local10, ##@LR__4609
01674     18 15 02 F6 | 	mov	arg02, local10
01678     F8 AD B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7B 00 00 FF 
01688     D0 E4 05 F1 | 	add	objptr, ##63184
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7B 00 00 FF 
01694     D0 E4 85 F1 | 	sub	objptr, ##63184
01698     5D 01 00 FF 
0169c     AF 36 06 F6 | 	mov	local13, ##@LR__4610
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     CC AD B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7B 00 00 FF 
016b4     D4 E4 05 F1 | 	add	objptr, ##63188
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7B 00 00 FF 
016c0     D4 E4 85 F1 | 	sub	objptr, ##63188
016c4     5D 01 00 FF 
016c8     B1 4A 06 F6 | 	mov	local23, ##@LR__4611
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     9C AD B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7B 00 00 FF 
016e4     D0 E4 05 F1 | 	add	objptr, ##63184
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7B 00 00 FF 
016f0     D0 E4 85 F1 | 	sub	objptr, ##63184
016f4     5D 01 00 FF 
016f8     B3 4A 06 F6 | 	mov	local23, ##@LR__4612
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     70 AD B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7B 00 00 FF 
01710     D4 E4 05 F1 | 	add	objptr, ##63188
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7B 00 00 FF 
0171c     D4 E4 85 F1 | 	sub	objptr, ##63188
01720     5D 01 00 FF 
01724     B5 44 06 F6 | 	mov	local20, ##@LR__4613
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     40 AD B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7B 00 00 FF 
01740     D0 E4 05 F1 | 	add	objptr, ##63184
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7B 00 00 FF 
0174c     D0 E4 85 F1 | 	sub	objptr, ##63184
01750     5D 01 00 FF 
01754     B7 44 06 F6 | 	mov	local20, ##@LR__4614
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     14 AD B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7B 00 00 FF 
0176c     D4 E4 05 F1 | 	add	objptr, ##63188
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7B 00 00 FF 
01778     D4 E4 85 F1 | 	sub	objptr, ##63188
0177c     5D 01 00 FF 
01780     B9 4C 06 F6 | 	mov	local24, ##@LR__4615
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     E4 AC B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7B 00 00 FF 
0179c     D0 E4 05 F1 | 	add	objptr, ##63184
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7B 00 00 FF 
017a8     D0 E4 85 F1 | 	sub	objptr, ##63184
017ac     5D 01 00 FF 
017b0     BB 4E 06 F6 | 	mov	local25, ##@LR__4616
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     B4 AC B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7B 00 00 FF 
017cc     D4 E4 05 F1 | 	add	objptr, ##63188
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7B 00 00 FF 
017d8     D4 E4 85 F1 | 	sub	objptr, ##63188
017dc     5D 01 00 FF 
017e0     BD 50 06 F6 | 	mov	local26, ##@LR__4617
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     84 AC B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     F0 E5 05 F1 | 	add	objptr, ##43504
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     E0 E4 05 F1 | 	add	objptr, ##19680
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7B 00 00 FF 
01824     D4 E4 85 F1 | 	sub	objptr, ##63188
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     74 AC B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     F0 E5 05 F1 | 	add	objptr, ##43504
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     F0 E5 85 F1 | 	sub	objptr, ##43504
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     F0 E5 05 F1 | 	add	objptr, ##43504
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     F0 E5 85 F1 | 	sub	objptr, ##43504
01930     EC CF B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     24 CF B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     F0 E5 05 F1 | 	add	objptr, ##43504
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     F0 E5 85 F1 | 	sub	objptr, ##43504
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     F0 E5 05 F1 | 	add	objptr, ##43504
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     F0 E5 85 F1 | 	sub	objptr, ##43504
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     F0 E5 05 F1 | 	add	objptr, ##43504
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     F0 E5 85 F1 | 	sub	objptr, ##43504
01a98     F4 C9 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     5D 01 00 FF 
01aa4     BF 14 06 F6 | 	mov	arg02, ##@LR__4618
01aa8     C8 A9 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     F0 E5 05 F1 | 	add	objptr, ##43504
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     F0 E5 85 F1 | 	sub	objptr, ##43504
01ad8     3C CA B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     5D 01 00 FF 
01ae4     C1 14 06 F6 | 	mov	arg02, ##@LR__4619
01ae8     88 A9 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     F0 E5 05 F1 | 	add	objptr, ##43504
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     F0 E5 85 F1 | 	sub	objptr, ##43504
01b24     78 CC B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     F0 E5 05 F1 | 	add	objptr, ##43504
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     F0 E5 85 F1 | 	sub	objptr, ##43504
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     F0 E5 05 F1 | 	add	objptr, ##43504
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     F0 E5 85 F1 | 	sub	objptr, ##43504
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     84 17 90 AD |  if_e	jmp	#LR__0149
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     F0 E5 05 F1 | 	add	objptr, ##43504
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     F0 E5 85 F1 | 	sub	objptr, ##43504
01bc0     08 36 B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7B 00 00 5F 
01bcc     D8 E4 05 51 |  if_ne	add	objptr, ##63192
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7B 00 00 FF 
01bd8     D8 E4 E5 F3 | 	sumnz	objptr, ##63192
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7B 00 00 AF 
01be4     D8 E4 85 A1 |  if_e	sub	objptr, ##63192
01be8     7B 00 00 FF 
01bec     D8 E4 05 F1 | 	add	objptr, ##63192
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     E8 E4 85 F1 | 	sub	objptr, ##19688
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     EC E4 05 F1 | 	add	objptr, ##19692
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     E8 E4 85 F1 | 	sub	objptr, ##19688
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     5D 01 00 FF 
01c38     C3 16 06 F6 | 	mov	arg03, ##@LR__4620
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     F0 E5 85 F1 | 	sub	objptr, ##43504
01c48     8C CD B1 FD | 	call	#__system__Instr
01c4c     7B 00 00 FF 
01c50     E0 E4 05 F1 | 	add	objptr, ##63200
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7B 00 00 FF 
01c60     E0 E4 85 F1 | 	sub	objptr, ##63200
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7B 00 00 FF 
01c70     D8 E4 05 F1 | 	add	objptr, ##63192
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     E8 E4 85 F1 | 	sub	objptr, ##19688
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     F0 E5 85 F1 | 	sub	objptr, ##43504
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7B 00 00 FF 
01cb8     E0 E4 05 F1 | 	add	objptr, ##63200
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7B 00 00 FF 
01cc4     E0 E4 85 F1 | 	sub	objptr, ##63200
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7B 00 00 FF 
01cdc     D8 E4 05 F1 | 	add	objptr, ##63192
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     E8 E4 85 F1 | 	sub	objptr, ##19688
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     E8 E4 05 F1 | 	add	objptr, ##19688
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     E8 E4 85 F1 | 	sub	objptr, ##19688
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     E8 E4 05 F1 | 	add	objptr, ##19688
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     E8 E4 85 F1 | 	sub	objptr, ##19688
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     F0 E5 85 F1 | 	sub	objptr, ##43504
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7B 00 00 FF 
01dd0     E0 E4 05 F1 | 	add	objptr, ##63200
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7B 00 00 FF 
01ddc     E0 E4 85 F1 | 	sub	objptr, ##63200
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     2C C7 B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7B 00 00 FF 
01df4     D8 E4 05 F1 | 	add	objptr, ##63192
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     E8 E4 85 F1 | 	sub	objptr, ##19688
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     F0 E4 05 F1 | 	add	objptr, ##19696
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7B 00 00 FF 
01e34     E0 E4 85 F1 | 	sub	objptr, ##63200
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     4C C6 B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7B 00 00 FF 
01e4c     D8 E4 05 F1 | 	add	objptr, ##63192
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     E8 E4 85 F1 | 	sub	objptr, ##19688
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     F0 E5 85 F1 | 	sub	objptr, ##43504
01e74     18 C6 B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     5D 01 00 FF 
01e80     C5 14 06 F6 | 	mov	arg02, ##@LR__4621
01e84     EC A5 B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7B 00 00 FF 
01e94     D8 E4 05 F1 | 	add	objptr, ##63192
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     E8 E4 85 F1 | 	sub	objptr, ##19688
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     F0 E5 85 F1 | 	sub	objptr, ##43504
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7B 00 00 FF 
01ee8     D8 E4 05 F1 | 	add	objptr, ##63192
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     E8 E4 85 F1 | 	sub	objptr, ##19688
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     E8 E4 05 F1 | 	add	objptr, ##19688
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     E8 E4 85 F1 | 	sub	objptr, ##19688
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     E8 E4 05 F1 | 	add	objptr, ##19688
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     E8 E4 85 F1 | 	sub	objptr, ##19688
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     F0 E5 85 F1 | 	sub	objptr, ##43504
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     20 C5 B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7B 00 00 FF 
02000     D8 E4 05 F1 | 	add	objptr, ##63192
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     E8 E4 85 F1 | 	sub	objptr, ##19688
02014     F2 26 02 F1 | 	add	local05, objptr
02018     5D 01 00 FF 
0201c     C7 32 06 F6 | 	mov	local11, ##@LR__4622
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     F0 E5 85 F1 | 	sub	objptr, ##43504
0202c                 | LR__0107
0202c     7B 00 00 FF 
02030     D8 E4 05 F1 | 	add	objptr, ##63192
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     E8 E4 85 F1 | 	sub	objptr, ##19688
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     EC E4 05 F1 | 	add	objptr, ##19692
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7B 00 00 FF 
0205c     DC E4 85 F1 | 	sub	objptr, ##63196
02060     5D 01 00 FF 
02064     C9 14 06 F6 | 	mov	arg02, ##@LR__4623
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     04 A4 B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7B 00 00 FF 
0207c     DC E4 05 F1 | 	add	objptr, ##63196
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7B 00 00 FF 
02088     DC E4 85 F1 | 	sub	objptr, ##63196
0208c     5D 01 00 FF 
02090     CF 14 06 F6 | 	mov	arg02, ##@LR__4624
02094     DC A3 B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7B 00 00 FF 
020a4     DC E4 05 F1 | 	add	objptr, ##63196
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7B 00 00 FF 
020b0     DC E4 85 F1 | 	sub	objptr, ##63196
020b4     5D 01 00 FF 
020b8     D6 14 06 F6 | 	mov	arg02, ##@LR__4625
020bc     B4 A3 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7B 00 00 FF 
020cc     D8 E4 05 F1 | 	add	objptr, ##63192
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     E8 E4 85 F1 | 	sub	objptr, ##19688
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     F0 E5 85 F1 | 	sub	objptr, ##43504
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7B 00 00 FF 
02118     D8 E4 05 F1 | 	add	objptr, ##63192
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     E8 E4 85 F1 | 	sub	objptr, ##19688
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     5D 01 00 FF 
0213c     DC 14 06 F6 | 	mov	arg02, ##@LR__4626
02140     54 00 00 FF 
02144     F0 E5 85 F1 | 	sub	objptr, ##43504
02148     28 A3 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7B 00 00 FF 
02158     D8 E4 05 F1 | 	add	objptr, ##63192
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     E8 E4 85 F1 | 	sub	objptr, ##19688
02170     F2 26 02 F1 | 	add	local05, objptr
02174     5D 01 00 FF 
02178     DF 32 06 F6 | 	mov	local11, ##@LR__4627
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     E8 E4 05 F1 | 	add	objptr, ##19688
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     E8 E4 85 F1 | 	sub	objptr, ##19688
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     F0 E5 85 F1 | 	sub	objptr, ##43504
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7B 00 00 FF 
021b8     D8 E4 05 F1 | 	add	objptr, ##63192
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     E8 E4 85 F1 | 	sub	objptr, ##19688
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     5D 01 00 FF 
021e0     E1 14 06 F6 | 	mov	arg02, ##@LR__4628
021e4     54 00 00 FF 
021e8     F0 E5 85 F1 | 	sub	objptr, ##43504
021ec     84 A2 B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7B 00 00 FF 
021fc     D8 E4 05 F1 | 	add	objptr, ##63192
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     E8 E4 85 F1 | 	sub	objptr, ##19688
02214     F2 26 02 F1 | 	add	local05, objptr
02218     5D 01 00 FF 
0221c     E5 32 06 F6 | 	mov	local11, ##@LR__4629
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     E8 E4 05 F1 | 	add	objptr, ##19688
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     E8 E4 85 F1 | 	sub	objptr, ##19688
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     F0 E5 85 F1 | 	sub	objptr, ##43504
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7B 00 00 FF 
02260     DC E4 05 F1 | 	add	objptr, ##63196
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7B 00 00 FF 
0226c     DC E4 85 F1 | 	sub	objptr, ##63196
02270     5D 01 00 FF 
02274     E7 14 06 F6 | 	mov	arg02, ##@LR__4630
02278     F8 A1 B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7B 00 00 FF 
02288     DC E4 05 F1 | 	add	objptr, ##63196
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7B 00 00 FF 
02294     DC E4 85 F1 | 	sub	objptr, ##63196
02298     5D 01 00 FF 
0229c     EC 14 06 F6 | 	mov	arg02, ##@LR__4631
022a0     D0 A1 B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7B 00 00 FF 
022b0     D8 E4 05 F1 | 	add	objptr, ##63192
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     E8 E4 85 F1 | 	sub	objptr, ##19688
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     5D 01 00 FF 
022d4     EF 14 06 F6 | 	mov	arg02, ##@LR__4632
022d8     54 00 00 FF 
022dc     F0 E5 85 F1 | 	sub	objptr, ##43504
022e0     90 A1 B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7B 00 00 FF 
022f0     D8 E4 05 F1 | 	add	objptr, ##63192
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     E8 E4 85 F1 | 	sub	objptr, ##19688
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     5D 01 00 FF 
02310     F5 32 06 F6 | 	mov	local11, ##@LR__4633
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     F0 E5 85 F1 | 	sub	objptr, ##43504
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7B 00 00 FF 
02324     D8 E4 05 F1 | 	add	objptr, ##63192
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     E8 E4 85 F1 | 	sub	objptr, ##19688
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     5D 01 00 FF 
02348     F7 14 06 F6 | 	mov	arg02, ##@LR__4634
0234c     54 00 00 FF 
02350     F0 E5 85 F1 | 	sub	objptr, ##43504
02354     1C A1 B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7B 00 00 FF 
02364     D8 E4 05 F1 | 	add	objptr, ##63192
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     E8 E4 85 F1 | 	sub	objptr, ##19688
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     5D 01 00 FF 
02384     00 33 06 F6 | 	mov	local11, ##@LR__4635
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     F0 E5 85 F1 | 	sub	objptr, ##43504
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7B 00 00 FF 
02398     D8 E4 05 F1 | 	add	objptr, ##63192
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     E8 E4 85 F1 | 	sub	objptr, ##19688
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     5D 01 00 FF 
023bc     02 15 06 F6 | 	mov	arg02, ##@LR__4636
023c0     54 00 00 FF 
023c4     F0 E5 85 F1 | 	sub	objptr, ##43504
023c8     A8 A0 B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7B 00 00 FF 
023d8     D8 E4 05 F1 | 	add	objptr, ##63192
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     E8 E4 85 F1 | 	sub	objptr, ##19688
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     5D 01 00 FF 
023f8     0B 33 06 F6 | 	mov	local11, ##@LR__4637
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     F0 E5 85 F1 | 	sub	objptr, ##43504
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7B 00 00 FF 
0240c     D8 E4 05 F1 | 	add	objptr, ##63192
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     E8 E4 85 F1 | 	sub	objptr, ##19688
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     5D 01 00 FF 
02430     0D 15 06 F6 | 	mov	arg02, ##@LR__4638
02434     54 00 00 FF 
02438     F0 E5 85 F1 | 	sub	objptr, ##43504
0243c     34 A0 B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7B 00 00 FF 
0244c     D8 E4 05 F1 | 	add	objptr, ##63192
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     E8 E4 85 F1 | 	sub	objptr, ##19688
02464     F2 26 02 F1 | 	add	local05, objptr
02468     5D 01 00 FF 
0246c     16 33 06 F6 | 	mov	local11, ##@LR__4639
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     F0 E5 85 F1 | 	sub	objptr, ##43504
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7B 00 00 FF 
02480     D8 E4 05 F1 | 	add	objptr, ##63192
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     E8 E4 85 F1 | 	sub	objptr, ##19688
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     5D 01 00 FF 
024a8     18 15 06 F6 | 	mov	arg02, ##@LR__4640
024ac     54 00 00 FF 
024b0     F0 E5 85 F1 | 	sub	objptr, ##43504
024b4     BC 9F B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7B 00 00 FF 
024c4     D8 E4 05 F1 | 	add	objptr, ##63192
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     E8 E4 85 F1 | 	sub	objptr, ##19688
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     5D 01 00 FF 
024e4     1B 33 06 F6 | 	mov	local11, ##@LR__4641
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     F0 E5 85 F1 | 	sub	objptr, ##43504
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     60 06 90 3D |  if_ae	jmp	#LR__0129
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     F0 E5 05 F1 | 	add	objptr, ##43504
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     F0 E5 85 F1 | 	sub	objptr, ##43504
02534     70 14 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     F0 E5 05 F1 | 	add	objptr, ##43504
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     F0 E5 85 F1 | 	sub	objptr, ##43504
0256c     EC 05 90 3D |  if_ae	jmp	#LR__0128
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     F0 E5 05 F1 | 	add	objptr, ##43504
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     F0 E5 85 F1 | 	sub	objptr, ##43504
025a0     B8 0D B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     F0 E5 05 F1 | 	add	objptr, ##43504
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     F0 E5 85 F1 | 	sub	objptr, ##43504
025d8     80 05 90 3D |  if_ae	jmp	#LR__0128
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     F0 E5 05 F1 | 	add	objptr, ##43504
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     F0 E5 85 F1 | 	sub	objptr, ##43504
0260c                 | ' 
0260c                 | ' select case s
0260c     5D 01 00 FF 
02610     F8 15 06 F6 | 	mov	arg02, ##@LR__4711
02614     5C 9E B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     F0 E5 05 F1 | 	add	objptr, ##43504
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     F0 E5 85 F1 | 	sub	objptr, ##43504
02658     00 05 90 3D |  if_ae	jmp	#LR__0128
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     F0 E5 05 F1 | 	add	objptr, ##43504
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     F0 E5 85 F1 | 	sub	objptr, ##43504
0268c     18 15 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     F0 E5 05 F1 | 	add	objptr, ##43504
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     F0 E5 85 F1 | 	sub	objptr, ##43504
026c4     94 04 90 3D |  if_ae	jmp	#LR__0128
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     F0 E5 05 F1 | 	add	objptr, ##43504
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 35 02 F6 | 	mov	local12, local03
026e0     03 34 66 F0 | 	shl	local12, #3
026e4     F2 4A 02 F6 | 	mov	local23, objptr
026e8     F2 34 02 F1 | 	add	local12, objptr
026ec     1A 13 02 FB | 	rdlong	arg01, local12
026f0     54 00 00 FF 
026f4     F0 E5 85 F1 | 	sub	objptr, ##43504
026f8     2C 20 B0 FD | 	call	#_isfunction
026fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02700     04 2E 06 F1 | 	add	local09, #4
02704     17 FB 61 FC | 	wrlong	result1, local09
02708                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02708     11 2F 02 F6 | 	mov	local09, local03
0270c     03 2E 66 F0 | 	shl	local09, #3
02710     54 00 00 FF 
02714     F0 E5 05 F1 | 	add	objptr, ##43504
02718     F2 2E 02 F1 | 	add	local09, objptr
0271c     04 2E 06 F1 | 	add	local09, #4
02720     17 33 02 FB | 	rdlong	local11, local09
02724     01 32 56 F2 | 	cmps	local11, #1 wc
02728     54 00 00 FF 
0272c     F0 E5 85 F1 | 	sub	objptr, ##43504
02730     28 04 90 3D |  if_ae	jmp	#LR__0128
02734     11 2F 02 F6 | 	mov	local09, local03
02738     03 2E 66 F0 | 	shl	local09, #3
0273c     54 00 00 FF 
02740     F0 E5 05 F1 | 	add	objptr, ##43504
02744     F2 2E 02 F1 | 	add	local09, objptr
02748     11 31 02 F6 | 	mov	local10, local03
0274c     18 37 02 F6 | 	mov	local13, local10
02750     03 36 66 F0 | 	shl	local13, #3
02754     F2 34 02 F6 | 	mov	local12, objptr
02758     F2 36 02 F1 | 	add	local13, objptr
0275c     1B 13 02 FB | 	rdlong	arg01, local13
02760     54 00 00 FF 
02764     F0 E5 85 F1 | 	sub	objptr, ##43504
02768     D0 0E B0 FD | 	call	#_isnotename
0276c     04 2E 06 F1 | 	add	local09, #4
02770     17 FB 61 FC | 	wrlong	result1, local09
02774                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02774                 | ' if lparts(i).token>0 then 
02774     11 2F 02 F6 | 	mov	local09, local03
02778     03 2E 66 F0 | 	shl	local09, #3
0277c     54 00 00 FF 
02780     F0 E5 05 F1 | 	add	objptr, ##43504
02784     F2 2E 02 F1 | 	add	local09, objptr
02788     04 2E 06 F1 | 	add	local09, #4
0278c     17 33 02 FB | 	rdlong	local11, local09
02790     01 32 56 F2 | 	cmps	local11, #1 wc
02794     54 00 00 FF 
02798     F0 E5 85 F1 | 	sub	objptr, ##43504
0279c     88 00 90 CD |  if_b	jmp	#LR__0120
027a0     11 27 02 F6 | 	mov	local05, local03
027a4     03 26 66 F0 | 	shl	local05, #3
027a8     54 00 00 FF 
027ac     F0 E5 05 F1 | 	add	objptr, ##43504
027b0     F2 26 02 F1 | 	add	local05, objptr
027b4     04 26 06 F1 | 	add	local05, #4
027b8     13 33 02 FB | 	rdlong	local11, local05
027bc     19 13 02 F6 | 	mov	arg01, local11
027c0     54 00 00 FF 
027c4     F0 E5 85 F1 | 	sub	objptr, ##43504
027c8     E0 60 B1 FD | 	call	#_getnoteval
027cc     FD 62 02 F6 | 	mov	local35, result1
027d0     11 2F 02 F6 | 	mov	local09, local03
027d4     03 2E 66 F0 | 	shl	local09, #3
027d8     54 00 00 FF 
027dc     F0 E5 05 F1 | 	add	objptr, ##43504
027e0     F2 2E 02 F1 | 	add	local09, objptr
027e4     31 13 02 F6 | 	mov	arg01, local35
027e8     54 00 00 FF 
027ec     F0 E5 85 F1 | 	sub	objptr, ##43504
027f0     94 BE B1 FD | 	call	#__system__str_S
027f4     17 FB 61 FC | 	wrlong	result1, local09
027f8     11 25 02 F6 | 	mov	local04, local03
027fc     12 2F 02 F6 | 	mov	local09, local04
02800     03 2E 66 F0 | 	shl	local09, #3
02804     54 00 00 FF 
02808     F0 E5 05 F1 | 	add	objptr, ##43504
0280c     F2 2E 02 F1 | 	add	local09, objptr
02810     04 2E 06 F1 | 	add	local09, #4
02814     01 00 80 FF 
02818     17 05 68 FC | 	wrlong	##514, local09
0281c     54 00 00 FF 
02820     F0 E5 85 F1 | 	sub	objptr, ##43504
02824     34 03 90 FD | 	jmp	#LR__0128
02828                 | LR__0120
02828     11 27 02 F6 | 	mov	local05, local03
0282c     03 26 66 F0 | 	shl	local05, #3
02830     54 00 00 FF 
02834     F0 E5 05 F1 | 	add	objptr, ##43504
02838     F2 26 02 F1 | 	add	local05, objptr
0283c     13 13 02 FB | 	rdlong	arg01, local05
02840     54 00 00 FF 
02844     F0 E5 85 F1 | 	sub	objptr, ##43504
02848     50 25 B0 FD | 	call	#_isnum
0284c     FD 1E 02 F6 | 	mov	local01, result1
02850     7B 00 00 FF 
02854     E4 E4 05 F1 | 	add	objptr, ##63204
02858     F2 1E 62 FC | 	wrlong	local01, objptr
0285c     11 27 02 F6 | 	mov	local05, local03
02860     03 26 66 F0 | 	shl	local05, #3
02864     26 00 00 FF 
02868     F4 E4 85 F1 | 	sub	objptr, ##19700
0286c     F2 26 02 F1 | 	add	local05, objptr
02870     13 13 02 FB | 	rdlong	arg01, local05
02874     54 00 00 FF 
02878     F0 E5 85 F1 | 	sub	objptr, ##43504
0287c     F4 27 B0 FD | 	call	#_isint
02880     FD 1E 02 F6 | 	mov	local01, result1
02884     7B 00 00 FF 
02888     E8 E4 05 F1 | 	add	objptr, ##63208
0288c     F2 1E 62 FC | 	wrlong	local01, objptr
02890     11 27 02 F6 | 	mov	local05, local03
02894     03 26 66 F0 | 	shl	local05, #3
02898     26 00 00 FF 
0289c     F8 E4 85 F1 | 	sub	objptr, ##19704
028a0     F2 28 02 F6 | 	mov	local06, objptr
028a4     F2 26 02 F1 | 	add	local05, objptr
028a8     13 13 02 FB | 	rdlong	arg01, local05
028ac     54 00 00 FF 
028b0     F0 E5 85 F1 | 	sub	objptr, ##43504
028b4     14 29 B0 FD | 	call	#_isdec
028b8     7B 00 00 FF 
028bc     EC E4 05 F1 | 	add	objptr, ##63212
028c0     F2 FA 61 FC | 	wrlong	result1, objptr
028c4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028c4     08 E4 85 F1 | 	sub	objptr, #8
028c8     F2 1E 0A FB | 	rdlong	local01, objptr wz
028cc     7B 00 00 FF 
028d0     E4 E4 85 F1 | 	sub	objptr, ##63204
028d4     60 00 90 AD |  if_e	jmp	#LR__0121
028d8     7B 00 00 FF 
028dc     E8 E4 05 F1 | 	add	objptr, ##63208
028e0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028e4     7B 00 00 FF 
028e8     E8 E4 85 F1 | 	sub	objptr, ##63208
028ec     48 00 90 AD |  if_e	jmp	#LR__0121
028f0     7B 00 00 FF 
028f4     EC E4 05 F1 | 	add	objptr, ##63212
028f8     F2 32 0A FB | 	rdlong	local11, objptr wz
028fc     7B 00 00 FF 
02900     EC E4 85 F1 | 	sub	objptr, ##63212
02904     30 00 90 AD |  if_e	jmp	#LR__0121
02908     11 25 02 F6 | 	mov	local04, local03
0290c     12 2F 02 F6 | 	mov	local09, local04
02910     03 2E 66 F0 | 	shl	local09, #3
02914     54 00 00 FF 
02918     F0 E5 05 F1 | 	add	objptr, ##43504
0291c     F2 2E 02 F1 | 	add	local09, objptr
02920     04 2E 06 F1 | 	add	local09, #4
02924     01 00 80 FF 
02928     17 01 68 FC | 	wrlong	##512, local09
0292c     54 00 00 FF 
02930     F0 E5 85 F1 | 	sub	objptr, ##43504
02934     24 02 90 FD | 	jmp	#LR__0128
02938                 | LR__0121
02938                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02938     7B 00 00 FF 
0293c     E4 E4 05 F1 | 	add	objptr, ##63204
02940     F2 1E 0A FB | 	rdlong	local01, objptr wz
02944     7B 00 00 FF 
02948     E4 E4 85 F1 | 	sub	objptr, ##63204
0294c     64 00 90 AD |  if_e	jmp	#LR__0122
02950     7B 00 00 FF 
02954     E8 E4 05 F1 | 	add	objptr, ##63208
02958     F2 2E 0A FB | 	rdlong	local09, objptr wz
0295c     7B 00 00 FF 
02960     E8 E4 85 F1 | 	sub	objptr, ##63208
02964     7B 00 00 5F 
02968     EC E4 05 51 |  if_ne	add	objptr, ##63212
0296c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02970     7B 00 00 5F 
02974     EC E4 85 51 |  if_ne	sub	objptr, ##63212
02978     19 29 22 56 |  if_ne	not	local06, local11
0297c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02980     30 00 90 AD |  if_e	jmp	#LR__0122
02984     11 25 02 F6 | 	mov	local04, local03
02988     12 2F 02 F6 | 	mov	local09, local04
0298c     03 2E 66 F0 | 	shl	local09, #3
02990     54 00 00 FF 
02994     F0 E5 05 F1 | 	add	objptr, ##43504
02998     F2 2E 02 F1 | 	add	local09, objptr
0299c     04 2E 06 F1 | 	add	local09, #4
029a0     01 00 80 FF 
029a4     17 03 68 FC | 	wrlong	##513, local09
029a8     54 00 00 FF 
029ac     F0 E5 85 F1 | 	sub	objptr, ##43504
029b0     A8 01 90 FD | 	jmp	#LR__0128
029b4                 | LR__0122
029b4                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
029b4     7B 00 00 FF 
029b8     E4 E4 05 F1 | 	add	objptr, ##63204
029bc     F2 1E 0A FB | 	rdlong	local01, objptr wz
029c0     7B 00 00 FF 
029c4     E4 E4 85 F1 | 	sub	objptr, ##63204
029c8     7B 00 00 5F 
029cc     E8 E4 05 51 |  if_ne	add	objptr, ##63208
029d0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029d4     7B 00 00 5F 
029d8     E8 E4 85 51 |  if_ne	sub	objptr, ##63208
029dc     17 2F 22 56 |  if_ne	not	local09, local09
029e0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029e4     7B 00 00 5F 
029e8     EC E4 05 51 |  if_ne	add	objptr, ##63212
029ec     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029f0     7B 00 00 5F 
029f4     EC E4 85 51 |  if_ne	sub	objptr, ##63212
029f8     19 29 22 56 |  if_ne	not	local06, local11
029fc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02a00     30 00 90 AD |  if_e	jmp	#LR__0123
02a04     11 25 02 F6 | 	mov	local04, local03
02a08     12 2F 02 F6 | 	mov	local09, local04
02a0c     03 2E 66 F0 | 	shl	local09, #3
02a10     54 00 00 FF 
02a14     F0 E5 05 F1 | 	add	objptr, ##43504
02a18     F2 2E 02 F1 | 	add	local09, objptr
02a1c     04 2E 06 F1 | 	add	local09, #4
02a20     01 00 80 FF 
02a24     17 05 68 FC | 	wrlong	##514, local09
02a28     54 00 00 FF 
02a2c     F0 E5 85 F1 | 	sub	objptr, ##43504
02a30     28 01 90 FD | 	jmp	#LR__0128
02a34                 | LR__0123
02a34                 | ' 
02a34                 | ' if isstring(lparts(i).part$) then 
02a34     11 27 02 F6 | 	mov	local05, local03
02a38     03 26 66 F0 | 	shl	local05, #3
02a3c     54 00 00 FF 
02a40     F0 E5 05 F1 | 	add	objptr, ##43504
02a44     F2 26 02 F1 | 	add	local05, objptr
02a48     13 13 02 FB | 	rdlong	arg01, local05
02a4c     54 00 00 FF 
02a50     F0 E5 85 F1 | 	sub	objptr, ##43504
02a54     34 28 B0 FD | 	call	#_isstring
02a58     00 FA 0D F2 | 	cmp	result1, #0 wz
02a5c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a60     11 2F 02 F6 | 	mov	local09, local03
02a64     03 2E 66 F0 | 	shl	local09, #3
02a68     54 00 00 FF 
02a6c     F0 E5 05 F1 | 	add	objptr, ##43504
02a70     F2 2E 02 F1 | 	add	local09, objptr
02a74     04 2E 06 F1 | 	add	local09, #4
02a78     01 00 80 FF 
02a7c     17 07 68 FC | 	wrlong	##515, local09
02a80     11 25 02 F6 | 	mov	local04, local03
02a84     12 2F 02 F6 | 	mov	local09, local04
02a88     03 2E 66 F0 | 	shl	local09, #3
02a8c     F2 2E 02 F1 | 	add	local09, objptr
02a90     11 37 02 F6 | 	mov	local13, local03
02a94     03 36 66 F0 | 	shl	local13, #3
02a98     F2 36 02 F1 | 	add	local13, objptr
02a9c     1B 29 02 FB | 	rdlong	local06, local13
02aa0     02 32 06 F6 | 	mov	local11, #2
02aa4     11 4B 02 F6 | 	mov	local23, local03
02aa8     25 43 02 F6 | 	mov	local19, local23
02aac     21 45 02 F6 | 	mov	local20, local19
02ab0     03 44 66 F0 | 	shl	local20, #3
02ab4     F2 46 02 F6 | 	mov	local21, objptr
02ab8     F2 44 02 F1 | 	add	local20, objptr
02abc     22 13 02 FB | 	rdlong	arg01, local20
02ac0     54 00 00 FF 
02ac4     F0 E5 85 F1 | 	sub	objptr, ##43504
02ac8     09 2B 02 F6 | 	mov	local07, arg01
02acc     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ad0                 | LR__0124
02ad0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ad4     01 2A 06 51 |  if_ne	add	local07, #1
02ad8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02adc                 | LR__0125
02adc     09 2B 82 F1 | 	sub	local07, arg01
02ae0     15 35 02 F6 | 	mov	local12, local07
02ae4     1A 17 02 F6 | 	mov	arg03, local12
02ae8     02 16 86 F1 | 	sub	arg03, #2
02aec     14 13 02 F6 | 	mov	arg01, local06
02af0     19 15 02 F6 | 	mov	arg02, local11
02af4     B0 BA B1 FD | 	call	#__system__Mid_S
02af8     17 FB 61 FC | 	wrlong	result1, local09
02afc     5C 00 90 FD | 	jmp	#LR__0128
02b00                 | LR__0126
02b00                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02b00     11 25 02 F6 | 	mov	local04, local03
02b04     12 27 02 F6 | 	mov	local05, local04
02b08     03 26 66 F0 | 	shl	local05, #3
02b0c     54 00 00 FF 
02b10     F0 E5 05 F1 | 	add	objptr, ##43504
02b14     F2 26 02 F1 | 	add	local05, objptr
02b18     13 13 02 FB | 	rdlong	arg01, local05
02b1c     54 00 00 FF 
02b20     F0 E5 85 F1 | 	sub	objptr, ##43504
02b24     00 20 B0 FD | 	call	#_isname
02b28     00 FA 4D F2 | 	cmps	result1, #0 wz
02b2c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b30     11 25 02 F6 | 	mov	local04, local03
02b34     12 2F 02 F6 | 	mov	local09, local04
02b38     03 2E 66 F0 | 	shl	local09, #3
02b3c     54 00 00 FF 
02b40     F0 E5 05 F1 | 	add	objptr, ##43504
02b44     F2 2E 02 F1 | 	add	local09, objptr
02b48     04 2E 06 F1 | 	add	local09, #4
02b4c     01 00 80 FF 
02b50     17 09 68 FC | 	wrlong	##516, local09
02b54     54 00 00 FF 
02b58     F0 E5 85 F1 | 	sub	objptr, ##43504
02b5c                 | LR__0127
02b5c                 | LR__0128
02b5c     01 22 06 F1 | 	add	local03, #1
02b60     98 F9 9F FD | 	jmp	#LR__0119
02b64                 | LR__0129
02b64     1D 2F 02 F6 | 	mov	local09, local15
02b68     03 2E 66 F0 | 	shl	local09, #3
02b6c     54 00 00 FF 
02b70     F0 E5 05 F1 | 	add	objptr, ##43504
02b74     F2 2E 02 F1 | 	add	local09, objptr
02b78     04 2E 06 F1 | 	add	local09, #4
02b7c     17 FD 6B FC | 	wrlong	#510, local09
02b80     1D 2F 02 F6 | 	mov	local09, local15
02b84     03 2E 66 F0 | 	shl	local09, #3
02b88     F2 26 02 F6 | 	mov	local05, objptr
02b8c     F2 2E 02 F1 | 	add	local09, objptr
02b90     5D 01 00 FF 
02b94     1D 29 06 F6 | 	mov	local06, ##@LR__4642
02b98     17 29 62 FC | 	wrlong	local06, local09
02b9c     10 00 00 FF 
02ba0     54 E4 05 F1 | 	add	objptr, ##8276
02ba4     F2 3A 62 FC | 	wrlong	local15, objptr
02ba8                 | ' 
02ba8                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02ba8                 | ' 
02ba8                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02ba8                 | '  
02ba8                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02ba8     16 00 00 FF 
02bac     98 E4 05 F1 | 	add	objptr, ##11416
02bb0     F2 12 02 FB | 	rdlong	arg01, objptr
02bb4     7B 00 00 FF 
02bb8     DC E4 85 F1 | 	sub	objptr, ##63196
02bbc     5D 01 00 FF 
02bc0     1E 2F 06 F6 | 	mov	local09, ##@LR__4643
02bc4     17 15 02 F6 | 	mov	arg02, local09
02bc8     A8 98 B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     EC 00 90 AD |  if_e	jmp	#LR__0130
02bd4     7B 00 00 FF 
02bd8     DC E4 05 F1 | 	add	objptr, ##63196
02bdc     F2 12 02 FB | 	rdlong	arg01, objptr
02be0     7B 00 00 FF 
02be4     DC E4 85 F1 | 	sub	objptr, ##63196
02be8     5D 01 00 FF 
02bec     23 27 06 F6 | 	mov	local05, ##@LR__4644
02bf0     13 2F 02 F6 | 	mov	local09, local05
02bf4     17 15 02 F6 | 	mov	arg02, local09
02bf8     78 98 B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     BC 00 90 AD |  if_e	jmp	#LR__0130
02c04     7B 00 00 FF 
02c08     DC E4 05 F1 | 	add	objptr, ##63196
02c0c     F2 12 02 FB | 	rdlong	arg01, objptr
02c10     7B 00 00 FF 
02c14     DC E4 85 F1 | 	sub	objptr, ##63196
02c18     5D 01 00 FF 
02c1c     28 29 06 F6 | 	mov	local06, ##@LR__4645
02c20     14 27 02 F6 | 	mov	local05, local06
02c24     13 15 02 F6 | 	mov	arg02, local05
02c28     48 98 B1 FD | 	call	#__system___string_cmp
02c2c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c30     8C 00 90 AD |  if_e	jmp	#LR__0130
02c34     7B 00 00 FF 
02c38     DC E4 05 F1 | 	add	objptr, ##63196
02c3c     F2 12 02 FB | 	rdlong	arg01, objptr
02c40     7B 00 00 FF 
02c44     DC E4 85 F1 | 	sub	objptr, ##63196
02c48     5D 01 00 FF 
02c4c     2D 33 06 F6 | 	mov	local11, ##@LR__4646
02c50     19 29 02 F6 | 	mov	local06, local11
02c54     14 15 02 F6 | 	mov	arg02, local06
02c58     18 98 B1 FD | 	call	#__system___string_cmp
02c5c     FD 26 0A F6 | 	mov	local05, result1 wz
02c60     5C 00 90 AD |  if_e	jmp	#LR__0130
02c64     7B 00 00 FF 
02c68     DC E4 05 F1 | 	add	objptr, ##63196
02c6c     F2 12 02 FB | 	rdlong	arg01, objptr
02c70     7B 00 00 FF 
02c74     DC E4 85 F1 | 	sub	objptr, ##63196
02c78     5D 01 00 FF 
02c7c     31 33 06 F6 | 	mov	local11, ##@LR__4647
02c80     19 15 02 F6 | 	mov	arg02, local11
02c84     EC 97 B1 FD | 	call	#__system___string_cmp
02c88     FD 28 0A F6 | 	mov	local06, result1 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0130
02c90     7B 00 00 FF 
02c94     DC E4 05 F1 | 	add	objptr, ##63196
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     7B 00 00 FF 
02ca0     DC E4 85 F1 | 	sub	objptr, ##63196
02ca4     5D 01 00 FF 
02ca8     34 37 06 F6 | 	mov	local13, ##@LR__4648
02cac     1B 31 02 F6 | 	mov	local10, local13
02cb0     18 15 02 F6 | 	mov	arg02, local10
02cb4     BC 97 B1 FD | 	call	#__system___string_cmp
02cb8     FD 32 0A F6 | 	mov	local11, result1 wz
02cbc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cc0                 | LR__0130
02cc0     7B 00 00 FF 
02cc4     D8 E4 05 F1 | 	add	objptr, ##63192
02cc8     F2 36 02 FB | 	rdlong	local13, objptr
02ccc     1B 31 02 F6 | 	mov	local10, local13
02cd0     01 30 06 F1 | 	add	local10, #1
02cd4     18 35 02 F6 | 	mov	local12, local10
02cd8     1A 4B 02 F6 | 	mov	local23, local12
02cdc     03 4A 66 F0 | 	shl	local23, #3
02ce0     26 00 00 FF 
02ce4     E8 E4 85 F1 | 	sub	objptr, ##19688
02ce8     F2 42 02 F6 | 	mov	local19, objptr
02cec     F2 4A 02 F1 | 	add	local23, objptr
02cf0     04 4A 06 F1 | 	add	local23, #4
02cf4     25 47 02 FB | 	rdlong	local21, local23
02cf8     04 4A 86 F1 | 	sub	local23, #4
02cfc     23 45 02 F6 | 	mov	local20, local21
02d00     01 00 00 FF 
02d04     04 44 0E F2 | 	cmp	local20, ##516 wz
02d08     54 00 00 FF 
02d0c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d10     48 00 90 5D |  if_ne	jmp	#LR__0131
02d14     7B 00 00 FF 
02d18     D8 E4 05 F1 | 	add	objptr, ##63192
02d1c     F2 2E 02 FB | 	rdlong	local09, objptr
02d20     01 2E 06 F1 | 	add	local09, #1
02d24     17 27 02 F6 | 	mov	local05, local09
02d28     03 26 66 F0 | 	shl	local05, #3
02d2c     26 00 00 FF 
02d30     E8 E4 85 F1 | 	sub	objptr, ##19688
02d34     F2 28 02 F6 | 	mov	local06, objptr
02d38     F2 26 02 F1 | 	add	local05, objptr
02d3c     01 00 00 FF 
02d40     03 32 06 F6 | 	mov	local11, ##515
02d44     04 26 06 F1 | 	add	local05, #4
02d48     01 00 80 FF 
02d4c     13 07 68 FC | 	wrlong	##515, local05
02d50     04 26 86 F1 | 	sub	local05, #4
02d54     54 00 00 FF 
02d58     F0 E5 85 F1 | 	sub	objptr, ##43504
02d5c                 | LR__0131
02d5c                 | ' 
02d5c                 | ' ' abbreviated command has to be at the position addptr
02d5c                 | ' 
02d5c                 | ' 
02d5c                 | ' 
02d5c                 | ' '2b determine a type of the line
02d5c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d5c     54 00 00 FF 
02d60     F0 E5 05 F1 | 	add	objptr, ##43504
02d64     F2 12 02 FB | 	rdlong	arg01, objptr
02d68     54 00 00 FF 
02d6c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d70     58 24 B0 FD | 	call	#_isdec
02d74     00 FA 0D F2 | 	cmp	result1, #0 wz
02d78     30 00 90 AD |  if_e	jmp	#LR__0132
02d7c     54 00 00 FF 
02d80     F0 E5 05 F1 | 	add	objptr, ##43504
02d84     F2 12 02 FB | 	rdlong	arg01, objptr
02d88     54 00 00 FF 
02d8c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d90     00 14 06 F6 | 	mov	arg02, #0
02d94     A8 C8 B1 FD | 	call	#__system____builtin_atoi
02d98     7B 00 00 FF 
02d9c     74 E4 05 F1 | 	add	objptr, ##63092
02da0     F2 FA 61 FC | 	wrlong	result1, objptr
02da4     7B 00 00 FF 
02da8     74 E4 85 F1 | 	sub	objptr, ##63092
02dac                 | LR__0132
02dac                 | ' 
02dac                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dac     7B 00 00 FF 
02db0     74 E4 05 F1 | 	add	objptr, ##63092
02db4     F2 1E 02 FB | 	rdlong	local01, objptr
02db8     7B 00 00 FF 
02dbc     74 E4 85 F1 | 	sub	objptr, ##63092
02dc0     01 1E 16 F2 | 	cmp	local01, #1 wc
02dc4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dc8     01 3A 0E F2 | 	cmp	local15, #1 wz
02dcc     57 00 00 AF 
02dd0     08 E4 05 A1 |  if_e	add	objptr, ##44552
02dd4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02dd8     57 00 00 AF 
02ddc     08 E4 85 A1 |  if_e	sub	objptr, ##44552
02de0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02de4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02de8     7B 00 00 FF 
02dec     74 E4 05 F1 | 	add	objptr, ##63092
02df0     F2 12 02 FB | 	rdlong	arg01, objptr
02df4     7B 00 00 FF 
02df8     74 E4 85 F1 | 	sub	objptr, ##63092
02dfc     F0 24 B0 FD | 	call	#_deleteline
02e00     4C 05 90 FD | 	jmp	#LR__0150
02e04                 | LR__0133
02e04                 | ' 
02e04                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e04     7B 00 00 FF 
02e08     74 E4 05 F1 | 	add	objptr, ##63092
02e0c     F2 1E 02 FB | 	rdlong	local01, objptr
02e10     7B 00 00 FF 
02e14     74 E4 85 F1 | 	sub	objptr, ##63092
02e18     01 1E 16 F2 | 	cmp	local01, #1 wc
02e1c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e20     57 00 00 FF 
02e24     08 E4 05 F1 | 	add	objptr, ##44552
02e28     F2 26 02 FB | 	rdlong	local05, objptr
02e2c     57 00 00 FF 
02e30     08 E4 85 F1 | 	sub	objptr, ##44552
02e34     13 2F 0A F6 | 	mov	local09, local05 wz
02e38     20 00 90 AD |  if_e	jmp	#LR__0134
02e3c     57 00 00 FF 
02e40     08 E4 05 F1 | 	add	objptr, ##44552
02e44     F2 32 02 FB | 	rdlong	local11, objptr
02e48     57 00 00 FF 
02e4c     08 E4 85 F1 | 	sub	objptr, ##44552
02e50     19 29 02 F6 | 	mov	local06, local11
02e54     03 28 0E F2 | 	cmp	local06, #3 wz
02e58     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e5c                 | LR__0134
02e5c     55 00 00 FF 
02e60     04 E4 05 F1 | 	add	objptr, ##43524
02e64     F2 36 02 FB | 	rdlong	local13, objptr
02e68     55 00 00 FF 
02e6c     04 E4 85 F1 | 	sub	objptr, ##43524
02e70     1B 31 02 F6 | 	mov	local10, local13
02e74     1B 30 0E F2 | 	cmp	local10, #27 wz
02e78     90 00 90 AD |  if_e	jmp	#LR__0136
02e7c     7B 00 00 FF 
02e80     74 E4 05 F1 | 	add	objptr, ##63092
02e84     F2 12 02 FB | 	rdlong	arg01, objptr
02e88     24 00 00 FF 
02e8c     6C E4 85 F1 | 	sub	objptr, ##18540
02e90     F2 16 02 FB | 	rdlong	arg03, objptr
02e94     57 00 00 FF 
02e98     08 E4 85 F1 | 	sub	objptr, ##44552
02e9c     00 14 06 F6 | 	mov	arg02, #0
02ea0     80 38 B0 FD | 	call	#_compile
02ea4     FD 20 0A F6 | 	mov	local02, result1 wz
02ea8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ea8                 | '   if err<>0 then printerror(err): goto 104
02ea8     0C 00 90 AD |  if_e	jmp	#LR__0135
02eac     10 13 02 F6 | 	mov	arg01, local02
02eb0     B0 5D B1 FD | 	call	#_printerror
02eb4     98 04 90 FD | 	jmp	#LR__0150
02eb8                 | LR__0135
02eb8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02eb8     7B 00 00 FF 
02ebc     B4 E4 05 F1 | 	add	objptr, ##63156
02ec0     F2 12 02 FB | 	rdlong	arg01, objptr
02ec4     7B 00 00 FF 
02ec8     B4 E4 85 F1 | 	sub	objptr, ##63156
02ecc     5D 01 00 FF 
02ed0     38 15 06 F6 | 	mov	arg02, ##@LR__4649
02ed4     9C 95 B1 FD | 	call	#__system___string_cmp
02ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
02edc     70 04 90 AD |  if_e	jmp	#LR__0150
02ee0     7B 00 00 FF 
02ee4     B4 E4 05 F1 | 	add	objptr, ##63156
02ee8     F2 1E 02 FB | 	rdlong	local01, objptr
02eec     24 00 00 FF 
02ef0     B4 E4 85 F1 | 	sub	objptr, ##18612
02ef4     F2 1E 62 FC | 	wrlong	local01, objptr
02ef8     08 E4 05 F1 | 	add	objptr, #8
02efc     F2 08 68 FC | 	wrlong	#4, objptr
02f00     57 00 00 FF 
02f04     08 E4 85 F1 | 	sub	objptr, ##44552
02f08     64 DB 9F FD | 	jmp	#LR__0020
02f0c                 | LR__0136
02f0c                 | '       							
02f0c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f0c     7B 00 00 FF 
02f10     74 E4 05 F1 | 	add	objptr, ##63092
02f14     F2 1E 02 FB | 	rdlong	local01, objptr
02f18     7B 00 00 FF 
02f1c     74 E4 85 F1 | 	sub	objptr, ##63092
02f20     01 1E 16 F2 | 	cmp	local01, #1 wc
02f24     EC 00 90 CD |  if_b	jmp	#LR__0139
02f28     57 00 00 FF 
02f2c     08 E4 05 F1 | 	add	objptr, ##44552
02f30     F2 26 02 FB | 	rdlong	local05, objptr
02f34     57 00 00 FF 
02f38     08 E4 85 F1 | 	sub	objptr, ##44552
02f3c     01 26 0E F2 | 	cmp	local05, #1 wz
02f40     20 00 90 AD |  if_e	jmp	#LR__0137
02f44     57 00 00 FF 
02f48     08 E4 05 F1 | 	add	objptr, ##44552
02f4c     F2 32 02 FB | 	rdlong	local11, objptr
02f50     57 00 00 FF 
02f54     08 E4 85 F1 | 	sub	objptr, ##44552
02f58     19 29 02 F6 | 	mov	local06, local11
02f5c     02 28 0E F2 | 	cmp	local06, #2 wz
02f60     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f64                 | LR__0137
02f64     54 00 00 FF 
02f68     FC E5 05 F1 | 	add	objptr, ##43516
02f6c     F2 36 02 FB | 	rdlong	local13, objptr
02f70     54 00 00 FF 
02f74     FC E5 85 F1 | 	sub	objptr, ##43516
02f78     1B 31 02 F6 | 	mov	local10, local13
02f7c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f80     90 00 90 AD |  if_e	jmp	#LR__0139
02f84     7B 00 00 FF 
02f88     74 E4 05 F1 | 	add	objptr, ##63092
02f8c     F2 12 02 FB | 	rdlong	arg01, objptr
02f90     24 00 00 FF 
02f94     6C E4 85 F1 | 	sub	objptr, ##18540
02f98     F2 16 02 FB | 	rdlong	arg03, objptr
02f9c     57 00 00 FF 
02fa0     08 E4 85 F1 | 	sub	objptr, ##44552
02fa4     00 14 06 F6 | 	mov	arg02, #0
02fa8     78 37 B0 FD | 	call	#_compile
02fac     FD 20 0A F6 | 	mov	local02, result1 wz
02fb0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fb0                 | '   if err<>0 then printerror(err): goto 104
02fb0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fb4     10 13 02 F6 | 	mov	arg01, local02
02fb8     A8 5C B1 FD | 	call	#_printerror
02fbc     90 03 90 FD | 	jmp	#LR__0150
02fc0                 | LR__0138
02fc0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fc0     7B 00 00 FF 
02fc4     B4 E4 05 F1 | 	add	objptr, ##63156
02fc8     F2 12 02 FB | 	rdlong	arg01, objptr
02fcc     7B 00 00 FF 
02fd0     B4 E4 85 F1 | 	sub	objptr, ##63156
02fd4     5D 01 00 FF 
02fd8     39 15 06 F6 | 	mov	arg02, ##@LR__4650
02fdc     94 94 B1 FD | 	call	#__system___string_cmp
02fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe4     68 03 90 AD |  if_e	jmp	#LR__0150
02fe8     7B 00 00 FF 
02fec     B4 E4 05 F1 | 	add	objptr, ##63156
02ff0     F2 1E 02 FB | 	rdlong	local01, objptr
02ff4     24 00 00 FF 
02ff8     B4 E4 85 F1 | 	sub	objptr, ##18612
02ffc     F2 1E 62 FC | 	wrlong	local01, objptr
03000     08 E4 05 F1 | 	add	objptr, #8
03004     F2 08 68 FC | 	wrlong	#4, objptr
03008     57 00 00 FF 
0300c     08 E4 85 F1 | 	sub	objptr, ##44552
03010     5C DA 9F FD | 	jmp	#LR__0020
03014                 | LR__0139
03014                 | ' 							 
03014                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03014     7B 00 00 FF 
03018     74 E4 05 F1 | 	add	objptr, ##63092
0301c     F2 1E 02 FB | 	rdlong	local01, objptr
03020     7B 00 00 FF 
03024     74 E4 85 F1 | 	sub	objptr, ##63092
03028     01 1E 16 F2 | 	cmp	local01, #1 wc
0302c     D4 00 90 CD |  if_b	jmp	#LR__0141
03030     57 00 00 FF 
03034     08 E4 05 F1 | 	add	objptr, ##44552
03038     F2 26 0A FB | 	rdlong	local05, objptr wz
0303c     57 00 00 FF 
03040     08 E4 85 F1 | 	sub	objptr, ##44552
03044     20 00 90 AD |  if_e	jmp	#LR__0140
03048     57 00 00 FF 
0304c     08 E4 05 F1 | 	add	objptr, ##44552
03050     F2 32 02 FB | 	rdlong	local11, objptr
03054     57 00 00 FF 
03058     08 E4 85 F1 | 	sub	objptr, ##44552
0305c     19 29 02 F6 | 	mov	local06, local11
03060     03 28 0E F2 | 	cmp	local06, #3 wz
03064     9C 00 90 5D |  if_ne	jmp	#LR__0141
03068                 | LR__0140
03068     55 00 00 FF 
0306c     04 E4 05 F1 | 	add	objptr, ##43524
03070     F2 36 02 FB | 	rdlong	local13, objptr
03074     55 00 00 FF 
03078     04 E4 85 F1 | 	sub	objptr, ##43524
0307c     1B 31 02 F6 | 	mov	local10, local13
03080     1B 30 0E F2 | 	cmp	local10, #27 wz
03084     7C 00 90 5D |  if_ne	jmp	#LR__0141
03088     7B 00 00 FF 
0308c     74 E4 05 F1 | 	add	objptr, ##63092
03090     F2 12 02 FB | 	rdlong	arg01, objptr
03094     24 00 00 FF 
03098     6C E4 85 F1 | 	sub	objptr, ##18540
0309c     F2 16 02 FB | 	rdlong	arg03, objptr
030a0     57 00 00 FF 
030a4     08 E4 85 F1 | 	sub	objptr, ##44552
030a8     00 14 06 F6 | 	mov	arg02, #0
030ac     44 37 B0 FD | 	call	#_compile_assign
030b0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030b0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030b0     7B 00 00 FF 
030b4     B4 E4 05 F1 | 	add	objptr, ##63156
030b8     F2 12 02 FB | 	rdlong	arg01, objptr
030bc     7B 00 00 FF 
030c0     B4 E4 85 F1 | 	sub	objptr, ##63156
030c4     5D 01 00 FF 
030c8     3A 15 06 F6 | 	mov	arg02, ##@LR__4651
030cc     A4 93 B1 FD | 	call	#__system___string_cmp
030d0     00 FA 0D F2 | 	cmp	result1, #0 wz
030d4     78 02 90 AD |  if_e	jmp	#LR__0150
030d8     7B 00 00 FF 
030dc     B4 E4 05 F1 | 	add	objptr, ##63156
030e0     F2 1E 02 FB | 	rdlong	local01, objptr
030e4     24 00 00 FF 
030e8     B4 E4 85 F1 | 	sub	objptr, ##18612
030ec     F2 1E 62 FC | 	wrlong	local01, objptr
030f0     08 E4 05 F1 | 	add	objptr, #8
030f4     F2 08 68 FC | 	wrlong	#4, objptr
030f8     57 00 00 FF 
030fc     08 E4 85 F1 | 	sub	objptr, ##44552
03100     6C D9 9F FD | 	jmp	#LR__0020
03104                 | LR__0141
03104                 | '     							 
03104                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03104     7B 00 00 FF 
03108     74 E4 05 F1 | 	add	objptr, ##63092
0310c     F2 1E 02 FB | 	rdlong	local01, objptr
03110     7B 00 00 FF 
03114     74 E4 85 F1 | 	sub	objptr, ##63092
03118     01 1E 16 F2 | 	cmp	local01, #1 wc
0311c     CC 00 90 CD |  if_b	jmp	#LR__0142
03120     57 00 00 FF 
03124     08 E4 05 F1 | 	add	objptr, ##44552
03128     F2 26 02 FB | 	rdlong	local05, objptr
0312c     57 00 00 FF 
03130     08 E4 85 F1 | 	sub	objptr, ##44552
03134     01 26 0E F2 | 	cmp	local05, #1 wz
03138     57 00 00 5F 
0313c     08 E4 05 51 |  if_ne	add	objptr, ##44552
03140     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03144     57 00 00 5F 
03148     08 E4 85 51 |  if_ne	sub	objptr, ##44552
0314c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03150     54 00 00 AF 
03154     FC E5 05 A1 |  if_e	add	objptr, ##43516
03158     F2 36 02 AB |  if_e	rdlong	local13, objptr
0315c     54 00 00 AF 
03160     FC E5 85 A1 |  if_e	sub	objptr, ##43516
03164     1B 31 02 A6 |  if_e	mov	local10, local13
03168     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0316c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03170     7B 00 00 FF 
03174     74 E4 05 F1 | 	add	objptr, ##63092
03178     F2 12 02 FB | 	rdlong	arg01, objptr
0317c     24 00 00 FF 
03180     6C E4 85 F1 | 	sub	objptr, ##18540
03184     F2 16 02 FB | 	rdlong	arg03, objptr
03188     57 00 00 FF 
0318c     08 E4 85 F1 | 	sub	objptr, ##44552
03190     00 14 06 F6 | 	mov	arg02, #0
03194     5C 36 B0 FD | 	call	#_compile_assign
03198                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
03198                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
03198     7B 00 00 FF 
0319c     B4 E4 05 F1 | 	add	objptr, ##63156
031a0     F2 12 02 FB | 	rdlong	arg01, objptr
031a4     7B 00 00 FF 
031a8     B4 E4 85 F1 | 	sub	objptr, ##63156
031ac     5D 01 00 FF 
031b0     3B 15 06 F6 | 	mov	arg02, ##@LR__4652
031b4     BC 92 B1 FD | 	call	#__system___string_cmp
031b8     00 FA 0D F2 | 	cmp	result1, #0 wz
031bc     90 01 90 AD |  if_e	jmp	#LR__0150
031c0     7B 00 00 FF 
031c4     B4 E4 05 F1 | 	add	objptr, ##63156
031c8     F2 1E 02 FB | 	rdlong	local01, objptr
031cc     24 00 00 FF 
031d0     B4 E4 85 F1 | 	sub	objptr, ##18612
031d4     F2 1E 62 FC | 	wrlong	local01, objptr
031d8     08 E4 05 F1 | 	add	objptr, #8
031dc     F2 08 68 FC | 	wrlong	#4, objptr
031e0     57 00 00 FF 
031e4     08 E4 85 F1 | 	sub	objptr, ##44552
031e8     84 D8 9F FD | 	jmp	#LR__0020
031ec                 | LR__0142
031ec                 | ' 
031ec                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031ec     54 00 00 FF 
031f0     F4 E5 05 F1 | 	add	objptr, ##43508
031f4     F2 1E 02 FB | 	rdlong	local01, objptr
031f8     54 00 00 FF 
031fc     F4 E5 85 F1 | 	sub	objptr, ##43508
03200     01 00 00 FF 
03204     04 1E 0E F2 | 	cmp	local01, ##516 wz
03208     54 00 00 AF 
0320c     FC E5 05 A1 |  if_e	add	objptr, ##43516
03210     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03214     54 00 00 AF 
03218     FC E5 85 A1 |  if_e	sub	objptr, ##43516
0321c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03220     14 00 90 5D |  if_ne	jmp	#LR__0143
03224     00 12 06 F6 | 	mov	arg01, #0
03228     00 14 06 F6 | 	mov	arg02, #0
0322c     00 16 06 F6 | 	mov	arg03, #0
03230     C0 35 B0 FD | 	call	#_compile_assign
03234     90 00 90 FD | 	jmp	#LR__0145
03238                 | LR__0143
03238                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03238     54 00 00 FF 
0323c     F4 E5 05 F1 | 	add	objptr, ##43508
03240     F2 1E 02 FB | 	rdlong	local01, objptr
03244     54 00 00 FF 
03248     F4 E5 85 F1 | 	sub	objptr, ##43508
0324c     01 00 00 FF 
03250     04 1E 0E F2 | 	cmp	local01, ##516 wz
03254     54 00 00 AF 
03258     FC E5 05 A1 |  if_e	add	objptr, ##43516
0325c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03260     54 00 00 AF 
03264     FC E5 85 A1 |  if_e	sub	objptr, ##43516
03268     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0326c     44 00 90 5D |  if_ne	jmp	#LR__0144
03270     00 12 06 F6 | 	mov	arg01, #0
03274     64 EB B1 FD | 	call	#__system___getiolock_0474
03278     FD 12 02 F6 | 	mov	arg01, result1
0327c     CC 91 B1 FD | 	call	#__system___lockmem
03280     5D 01 00 FF 
03284     3C 15 06 F6 | 	mov	arg02, ##@LR__4653
03288     00 12 06 F6 | 	mov	arg01, #0
0328c     00 16 06 F6 | 	mov	arg03, #0
03290     BC 9E B1 FD | 	call	#__system___basic_print_string
03294     00 12 06 F6 | 	mov	arg01, #0
03298     0A 14 06 F6 | 	mov	arg02, #10
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     54 9E B1 FD | 	call	#__system___basic_print_char
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     30 EB B1 FD | 	call	#__system___getiolock_0474
032ac     FD 00 68 FC | 	wrlong	#0, result1
032b0     7C 00 90 FD | 	jmp	#LR__0149
032b4                 | LR__0144
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     00 14 06 F6 | 	mov	arg02, #0
032bc     00 16 06 F6 | 	mov	arg03, #0
032c0     60 34 B0 FD | 	call	#_compile
032c4     FD 20 02 F6 | 	mov	local02, result1
032c8                 | LR__0145
032c8                 | ' 
032c8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032c8                 | ' 
032c8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032c8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032c8                 | ' if err=0 then execute_line() else printerror(err)
032c8     00 20 0E F2 | 	cmp	local02, #0 wz
032cc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032d0     00 12 06 F6 | 	mov	arg01, #0
032d4     B4 6D B0 FD | 	call	#_execute_line
032d8     08 00 90 FD | 	jmp	#LR__0147
032dc                 | LR__0146
032dc     10 13 02 F6 | 	mov	arg01, local02
032e0     80 59 B1 FD | 	call	#_printerror
032e4                 | LR__0147
032e4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032e4     7B 00 00 FF 
032e8     B4 E4 05 F1 | 	add	objptr, ##63156
032ec     F2 12 02 FB | 	rdlong	arg01, objptr
032f0     7B 00 00 FF 
032f4     B4 E4 85 F1 | 	sub	objptr, ##63156
032f8     5D 01 00 FF 
032fc     6B 15 06 F6 | 	mov	arg02, ##@LR__4654
03300     70 91 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     24 00 90 AD |  if_e	jmp	#LR__0148
0330c     7B 00 00 FF 
03310     B4 E4 05 F1 | 	add	objptr, ##63156
03314     F2 1E 02 FB | 	rdlong	local01, objptr
03318     24 00 00 FF 
0331c     B4 E4 85 F1 | 	sub	objptr, ##18612
03320     F2 1E 62 FC | 	wrlong	local01, objptr
03324     57 00 00 FF 
03328     00 E4 85 F1 | 	sub	objptr, ##44544
0332c     40 D7 9F FD | 	jmp	#LR__0020
03330                 | LR__0148
03330                 | LR__0149
03330     5D 01 00 FF 
03334     6C 13 06 F6 | 	mov	arg01, ##@LR__4655
03338                 | ' 
03338                 | ' write(text)
03338     D4 7F B1 FD | 	call	#_hg010b_spin2_write
0333c                 | ' crlf
0333c     30 81 B1 FD | 	call	#_hg010b_spin2_crlf
03340     5D 01 00 FF 
03344     6D 13 06 F6 | 	mov	arg01, ##@LR__4656
03348                 | ' 
03348                 | ' write(text)
03348     C4 7F B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     20 81 B1 FD | 	call	#_hg010b_spin2_crlf
03350                 | LR__0150
03350     A7 F0 03 F6 | 	mov	ptra, fp
03354     B2 00 A0 FD | 	call	#popregs_
03358                 | _interpret_ret
03358     2D 00 64 FD | 	ret
0335c                 | 
0335c                 | ' 
0335c                 | ' 
0335c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0335c                 | ' 
0335c                 | ' function isoperator(s as string) as ubyte
0335c                 | _isoperator
0335c     01 4A 05 F6 | 	mov	COUNT_, #1
03360     A8 00 A0 FD | 	call	#pushregs_
03364                 | ' 
03364                 | ' select case s
03364     09 1F 02 F6 | 	mov	local01, arg01
03368     5D 01 00 FF 
0336c     73 15 06 F6 | 	mov	arg02, ##@LR__4657
03370     0F 13 02 F6 | 	mov	arg01, local01
03374     FC 90 B1 FD | 	call	#__system___string_cmp
03378     00 FA 0D F2 | 	cmp	result1, #0 wz
0337c     FC 01 90 AD |  if_e	jmp	#LR__0160
03380     5D 01 00 FF 
03384     75 15 06 F6 | 	mov	arg02, ##@LR__4658
03388     0F 13 02 F6 | 	mov	arg01, local01
0338c     E4 90 B1 FD | 	call	#__system___string_cmp
03390     00 FA 0D F2 | 	cmp	result1, #0 wz
03394     EC 01 90 AD |  if_e	jmp	#LR__0161
03398     5D 01 00 FF 
0339c     77 15 06 F6 | 	mov	arg02, ##@LR__4659
033a0     0F 13 02 F6 | 	mov	arg01, local01
033a4     CC 90 B1 FD | 	call	#__system___string_cmp
033a8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ac     DC 01 90 AD |  if_e	jmp	#LR__0162
033b0     5D 01 00 FF 
033b4     7A 15 06 F6 | 	mov	arg02, ##@LR__4660
033b8     0F 13 02 F6 | 	mov	arg01, local01
033bc     B4 90 B1 FD | 	call	#__system___string_cmp
033c0     00 FA 0D F2 | 	cmp	result1, #0 wz
033c4     CC 01 90 AD |  if_e	jmp	#LR__0163
033c8     5D 01 00 FF 
033cc     7E 15 06 F6 | 	mov	arg02, ##@LR__4661
033d0     0F 13 02 F6 | 	mov	arg01, local01
033d4     9C 90 B1 FD | 	call	#__system___string_cmp
033d8     00 FA 0D F2 | 	cmp	result1, #0 wz
033dc     BC 01 90 AD |  if_e	jmp	#LR__0164
033e0     5D 01 00 FF 
033e4     80 15 06 F6 | 	mov	arg02, ##@LR__4662
033e8     0F 13 02 F6 | 	mov	arg01, local01
033ec     84 90 B1 FD | 	call	#__system___string_cmp
033f0     00 FA 0D F2 | 	cmp	result1, #0 wz
033f4     AC 01 90 AD |  if_e	jmp	#LR__0165
033f8     5D 01 00 FF 
033fc     82 15 06 F6 | 	mov	arg02, ##@LR__4663
03400     0F 13 02 F6 | 	mov	arg01, local01
03404     6C 90 B1 FD | 	call	#__system___string_cmp
03408     00 FA 0D F2 | 	cmp	result1, #0 wz
0340c     9C 01 90 AD |  if_e	jmp	#LR__0166
03410     5D 01 00 FF 
03414     86 15 06 F6 | 	mov	arg02, ##@LR__4664
03418     0F 13 02 F6 | 	mov	arg01, local01
0341c     54 90 B1 FD | 	call	#__system___string_cmp
03420     00 FA 0D F2 | 	cmp	result1, #0 wz
03424     8C 01 90 AD |  if_e	jmp	#LR__0167
03428     5D 01 00 FF 
0342c     8A 15 06 F6 | 	mov	arg02, ##@LR__4665
03430     0F 13 02 F6 | 	mov	arg01, local01
03434     3C 90 B1 FD | 	call	#__system___string_cmp
03438     00 FA 0D F2 | 	cmp	result1, #0 wz
0343c     7C 01 90 AD |  if_e	jmp	#LR__0168
03440     5D 01 00 FF 
03444     8E 15 06 F6 | 	mov	arg02, ##@LR__4666
03448     0F 13 02 F6 | 	mov	arg01, local01
0344c     24 90 B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     6C 01 90 AD |  if_e	jmp	#LR__0169
03458     5D 01 00 FF 
0345c     92 15 06 F6 | 	mov	arg02, ##@LR__4667
03460     0F 13 02 F6 | 	mov	arg01, local01
03464     0C 90 B1 FD | 	call	#__system___string_cmp
03468     00 FA 0D F2 | 	cmp	result1, #0 wz
0346c     5C 01 90 AD |  if_e	jmp	#LR__0170
03470     5D 01 00 FF 
03474     96 15 06 F6 | 	mov	arg02, ##@LR__4668
03478     0F 13 02 F6 | 	mov	arg01, local01
0347c     F4 8F B1 FD | 	call	#__system___string_cmp
03480     00 FA 0D F2 | 	cmp	result1, #0 wz
03484     4C 01 90 AD |  if_e	jmp	#LR__0171
03488     5D 01 00 FF 
0348c     98 15 06 F6 | 	mov	arg02, ##@LR__4669
03490     0F 13 02 F6 | 	mov	arg01, local01
03494     DC 8F B1 FD | 	call	#__system___string_cmp
03498     00 FA 0D F2 | 	cmp	result1, #0 wz
0349c     3C 01 90 AD |  if_e	jmp	#LR__0172
034a0     5D 01 00 FF 
034a4     9C 15 06 F6 | 	mov	arg02, ##@LR__4670
034a8     0F 13 02 F6 | 	mov	arg01, local01
034ac     C4 8F B1 FD | 	call	#__system___string_cmp
034b0     00 FA 0D F2 | 	cmp	result1, #0 wz
034b4     2C 01 90 AD |  if_e	jmp	#LR__0173
034b8     5D 01 00 FF 
034bc     9E 15 06 F6 | 	mov	arg02, ##@LR__4671
034c0     0F 13 02 F6 | 	mov	arg01, local01
034c4     AC 8F B1 FD | 	call	#__system___string_cmp
034c8     00 FA 0D F2 | 	cmp	result1, #0 wz
034cc     1C 01 90 AD |  if_e	jmp	#LR__0174
034d0     5D 01 00 FF 
034d4     A0 15 06 F6 | 	mov	arg02, ##@LR__4672
034d8     0F 13 02 F6 | 	mov	arg01, local01
034dc     94 8F B1 FD | 	call	#__system___string_cmp
034e0     00 FA 0D F2 | 	cmp	result1, #0 wz
034e4     0C 01 90 AD |  if_e	jmp	#LR__0175
034e8     5D 01 00 FF 
034ec     A3 15 06 F6 | 	mov	arg02, ##@LR__4673
034f0     0F 13 02 F6 | 	mov	arg01, local01
034f4     7C 8F B1 FD | 	call	#__system___string_cmp
034f8     00 FA 0D F2 | 	cmp	result1, #0 wz
034fc     FC 00 90 AD |  if_e	jmp	#LR__0176
03500     5D 01 00 FF 
03504     A6 15 06 F6 | 	mov	arg02, ##@LR__4674
03508     0F 13 02 F6 | 	mov	arg01, local01
0350c     64 8F B1 FD | 	call	#__system___string_cmp
03510     00 FA 0D F2 | 	cmp	result1, #0 wz
03514     EC 00 90 AD |  if_e	jmp	#LR__0177
03518     5D 01 00 FF 
0351c     A8 15 06 F6 | 	mov	arg02, ##@LR__4675
03520     0F 13 02 F6 | 	mov	arg01, local01
03524     4C 8F B1 FD | 	call	#__system___string_cmp
03528     00 FA 0D F2 | 	cmp	result1, #0 wz
0352c     DC 00 90 AD |  if_e	jmp	#LR__0178
03530     5D 01 00 FF 
03534     AA 15 06 F6 | 	mov	arg02, ##@LR__4676
03538     0F 13 02 F6 | 	mov	arg01, local01
0353c     34 8F B1 FD | 	call	#__system___string_cmp
03540     00 FA 0D F2 | 	cmp	result1, #0 wz
03544     CC 00 90 AD |  if_e	jmp	#LR__0179
03548     5D 01 00 FF 
0354c     AD 15 06 F6 | 	mov	arg02, ##@LR__4677
03550     0F 13 02 F6 | 	mov	arg01, local01
03554     1C 8F B1 FD | 	call	#__system___string_cmp
03558     00 FA 0D F2 | 	cmp	result1, #0 wz
0355c     BC 00 90 AD |  if_e	jmp	#LR__0180
03560     5D 01 00 FF 
03564     B0 15 06 F6 | 	mov	arg02, ##@LR__4678
03568     0F 13 02 F6 | 	mov	arg01, local01
0356c     04 8F B1 FD | 	call	#__system___string_cmp
03570     00 FA 0D F2 | 	cmp	result1, #0 wz
03574     AC 00 90 AD |  if_e	jmp	#LR__0181
03578     B0 00 90 FD | 	jmp	#LR__0182
0357c                 | LR__0160
0357c     01 FA 05 F6 | 	mov	result1, #1
03580     AC 00 90 FD | 	jmp	#LR__0183
03584                 | LR__0161
03584     02 FA 05 F6 | 	mov	result1, #2
03588     A4 00 90 FD | 	jmp	#LR__0183
0358c                 | LR__0162
0358c     03 FA 05 F6 | 	mov	result1, #3
03590     9C 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0163
03594     04 FA 05 F6 | 	mov	result1, #4
03598     94 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0164
0359c     05 FA 05 F6 | 	mov	result1, #5
035a0     8C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0165
035a4     06 FA 05 F6 | 	mov	result1, #6
035a8     84 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0166
035ac     07 FA 05 F6 | 	mov	result1, #7
035b0     7C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0167
035b4     08 FA 05 F6 | 	mov	result1, #8
035b8     74 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0168
035bc     09 FA 05 F6 | 	mov	result1, #9
035c0     6C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0169
035c4     0A FA 05 F6 | 	mov	result1, #10
035c8     64 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0170
035cc     0B FA 05 F6 | 	mov	result1, #11
035d0     5C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0171
035d4     0C FA 05 F6 | 	mov	result1, #12
035d8     54 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0172
035dc     0D FA 05 F6 | 	mov	result1, #13
035e0     4C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0173
035e4     0E FA 05 F6 | 	mov	result1, #14
035e8     44 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0174
035ec     1B FA 05 F6 | 	mov	result1, #27
035f0     3C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0175
035f4     27 FA 05 F6 | 	mov	result1, #39
035f8     34 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0176
035fc     26 FA 05 F6 | 	mov	result1, #38
03600     2C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0177
03604     10 FA 05 F6 | 	mov	result1, #16
03608     24 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0178
0360c     0F FA 05 F6 | 	mov	result1, #15
03610     1C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0179
03614     2A FA 05 F6 | 	mov	result1, #42
03618     14 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0180
0361c     28 FA 05 F6 | 	mov	result1, #40
03620     0C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0181
03624     29 FA 05 F6 | 	mov	result1, #41
03628     04 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0182
0362c     00 FA 05 F6 | 	mov	result1, #0
03630                 | LR__0183
03630     A7 F0 03 F6 | 	mov	ptra, fp
03634     B2 00 A0 FD | 	call	#popregs_
03638                 | _isoperator_ret
03638     2D 00 64 FD | 	ret
0363c                 | 
0363c                 | ' 
0363c                 | ' 
0363c                 | ' function isnotename(s as string) as ulong
0363c                 | _isnotename
0363c     07 4A 05 F6 | 	mov	COUNT_, #7
03640     A8 00 A0 FD | 	call	#pushregs_
03644                 | ' if left$(s,1)<>"#" then return 0
03644     09 1F 02 F6 | 	mov	local01, arg01
03648     01 14 06 F6 | 	mov	arg02, #1
0364c     40 AE B1 FD | 	call	#__system__Left_S
03650     FD 12 02 F6 | 	mov	arg01, result1
03654     5D 01 00 FF 
03658     B3 15 06 F6 | 	mov	arg02, ##@LR__4679
0365c     14 8E B1 FD | 	call	#__system___string_cmp
03660     00 FA 0D F2 | 	cmp	result1, #0 wz
03664     00 FA 05 56 |  if_ne	mov	result1, #0
03668     30 03 90 5D |  if_ne	jmp	#LR__0213
0366c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     03 14 06 F6 | 	mov	arg02, #3
03674     01 16 06 F6 | 	mov	arg03, #1
03678     2C AF B1 FD | 	call	#__system__Mid_S
0367c     FD 12 02 F6 | 	mov	arg01, result1
03680     5D 01 00 FF 
03684     B5 15 06 F6 | 	mov	arg02, ##@LR__4680
03688     E8 8D B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     18 00 90 5D |  if_ne	jmp	#LR__0190
03694     0F 13 02 F6 | 	mov	arg01, local01
03698     02 14 06 F6 | 	mov	arg02, #2
0369c     02 16 06 F6 | 	mov	arg03, #2
036a0     04 AF B1 FD | 	call	#__system__Mid_S
036a4     FD 20 02 F6 | 	mov	local02, result1
036a8     14 00 90 FD | 	jmp	#LR__0191
036ac                 | LR__0190
036ac     0F 13 02 F6 | 	mov	arg01, local01
036b0     02 14 06 F6 | 	mov	arg02, #2
036b4     01 16 06 F6 | 	mov	arg03, #1
036b8     EC AE B1 FD | 	call	#__system__Mid_S
036bc     FD 20 02 F6 | 	mov	local02, result1
036c0                 | LR__0191
036c0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036c0     0F 13 02 F6 | 	mov	arg01, local01
036c4     09 23 02 F6 | 	mov	local03, arg01
036c8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036cc                 | LR__0192
036cc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036d0     01 22 06 51 |  if_ne	add	local03, #1
036d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036d8                 | LR__0193
036d8     09 23 82 F1 | 	sub	local03, arg01
036dc     11 15 02 F6 | 	mov	arg02, local03
036e0     01 14 86 F1 | 	sub	arg02, #1
036e4     0F 13 02 F6 | 	mov	arg01, local01
036e8     01 16 06 F6 | 	mov	arg03, #1
036ec     B8 AE B1 FD | 	call	#__system__Mid_S
036f0     FD 12 02 F6 | 	mov	arg01, result1
036f4     5D 01 00 FF 
036f8     B7 15 06 F6 | 	mov	arg02, ##@LR__4681
036fc     74 8D B1 FD | 	call	#__system___string_cmp
03700     00 FA 0D F2 | 	cmp	result1, #0 wz
03704     28 00 90 AD |  if_e	jmp	#LR__0194
03708     0F 13 02 F6 | 	mov	arg01, local01
0370c     01 14 06 F6 | 	mov	arg02, #1
03710     04 AE B1 FD | 	call	#__system__Right_S
03714     FD 12 02 F6 | 	mov	arg01, result1
03718     94 C0 B1 FD | 	call	#__system____builtin_atof
0371c     FD 12 02 F6 | 	mov	arg01, result1
03720     00 14 06 F6 | 	mov	arg02, #0
03724     68 BD B1 FD | 	call	#__system___float_tointeger
03728     FD 24 02 F6 | 	mov	local04, result1
0372c     34 00 90 FD | 	jmp	#LR__0195
03730                 | LR__0194
03730     0F 13 02 F6 | 	mov	arg01, local01
03734     01 14 06 F6 | 	mov	arg02, #1
03738     DC AD B1 FD | 	call	#__system__Right_S
0373c     FD 12 02 F6 | 	mov	arg01, result1
03740     6C C0 B1 FD | 	call	#__system____builtin_atof
03744     FD 14 02 F6 | 	mov	arg02, result1
03748     00 C0 5F FF 
0374c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03750     74 B8 B1 FD | 	call	#__system___float_mul
03754     FD 12 02 F6 | 	mov	arg01, result1
03758     00 14 06 F6 | 	mov	arg02, #0
0375c     30 BD B1 FD | 	call	#__system___float_tointeger
03760     FD 24 02 F6 | 	mov	local04, result1
03764                 | LR__0195
03764                 | ' 
03764                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03764     00 24 0E F2 | 	cmp	local04, #0 wz
03768     24 00 90 5D |  if_ne	jmp	#LR__0196
0376c     0F 13 02 F6 | 	mov	arg01, local01
03770     01 14 06 F6 | 	mov	arg02, #1
03774     A0 AD B1 FD | 	call	#__system__Right_S
03778     FD 12 02 F6 | 	mov	arg01, result1
0377c     5D 01 00 FF 
03780     B9 15 06 F6 | 	mov	arg02, ##@LR__4682
03784     EC 8C B1 FD | 	call	#__system___string_cmp
03788     00 FA 0D F2 | 	cmp	result1, #0 wz
0378c     04 24 06 56 |  if_ne	mov	local04, #4
03790                 | LR__0196
03790                 | ' 
03790                 | ' select case s1
03790     10 27 02 F6 | 	mov	local05, local02
03794     5D 01 00 FF 
03798     BB 15 06 F6 | 	mov	arg02, ##@LR__4683
0379c     13 13 02 F6 | 	mov	arg01, local05
037a0     D0 8C B1 FD | 	call	#__system___string_cmp
037a4     00 FA 0D F2 | 	cmp	result1, #0 wz
037a8     24 01 90 AD |  if_e	jmp	#LR__0197
037ac     5D 01 00 FF 
037b0     BD 15 06 F6 | 	mov	arg02, ##@LR__4684
037b4     13 13 02 F6 | 	mov	arg01, local05
037b8     B8 8C B1 FD | 	call	#__system___string_cmp
037bc     00 FA 0D F2 | 	cmp	result1, #0 wz
037c0     18 01 90 AD |  if_e	jmp	#LR__0198
037c4     5D 01 00 FF 
037c8     C0 15 06 F6 | 	mov	arg02, ##@LR__4685
037cc     13 13 02 F6 | 	mov	arg01, local05
037d0     A0 8C B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     0C 01 90 AD |  if_e	jmp	#LR__0199
037dc     5D 01 00 FF 
037e0     C2 15 06 F6 | 	mov	arg02, ##@LR__4686
037e4     13 13 02 F6 | 	mov	arg01, local05
037e8     88 8C B1 FD | 	call	#__system___string_cmp
037ec     00 FA 0D F2 | 	cmp	result1, #0 wz
037f0     00 01 90 AD |  if_e	jmp	#LR__0200
037f4     5D 01 00 FF 
037f8     C5 15 06 F6 | 	mov	arg02, ##@LR__4687
037fc     13 13 02 F6 | 	mov	arg01, local05
03800     70 8C B1 FD | 	call	#__system___string_cmp
03804     00 FA 0D F2 | 	cmp	result1, #0 wz
03808     F4 00 90 AD |  if_e	jmp	#LR__0201
0380c     5D 01 00 FF 
03810     C7 15 06 F6 | 	mov	arg02, ##@LR__4688
03814     13 13 02 F6 | 	mov	arg01, local05
03818     58 8C B1 FD | 	call	#__system___string_cmp
0381c     00 FA 0D F2 | 	cmp	result1, #0 wz
03820     E8 00 90 AD |  if_e	jmp	#LR__0202
03824     5D 01 00 FF 
03828     C9 15 06 F6 | 	mov	arg02, ##@LR__4689
0382c     13 13 02 F6 | 	mov	arg01, local05
03830     40 8C B1 FD | 	call	#__system___string_cmp
03834     00 FA 0D F2 | 	cmp	result1, #0 wz
03838     DC 00 90 AD |  if_e	jmp	#LR__0203
0383c     5D 01 00 FF 
03840     CC 15 06 F6 | 	mov	arg02, ##@LR__4690
03844     13 13 02 F6 | 	mov	arg01, local05
03848     28 8C B1 FD | 	call	#__system___string_cmp
0384c     00 FA 0D F2 | 	cmp	result1, #0 wz
03850     D0 00 90 AD |  if_e	jmp	#LR__0204
03854     5D 01 00 FF 
03858     CE 15 06 F6 | 	mov	arg02, ##@LR__4691
0385c     13 13 02 F6 | 	mov	arg01, local05
03860     10 8C B1 FD | 	call	#__system___string_cmp
03864     00 FA 0D F2 | 	cmp	result1, #0 wz
03868     C4 00 90 AD |  if_e	jmp	#LR__0205
0386c     5D 01 00 FF 
03870     D1 15 06 F6 | 	mov	arg02, ##@LR__4692
03874     13 13 02 F6 | 	mov	arg01, local05
03878     F8 8B B1 FD | 	call	#__system___string_cmp
0387c     00 FA 0D F2 | 	cmp	result1, #0 wz
03880     B8 00 90 AD |  if_e	jmp	#LR__0206
03884     5D 01 00 FF 
03888     D3 15 06 F6 | 	mov	arg02, ##@LR__4693
0388c     13 13 02 F6 | 	mov	arg01, local05
03890     E0 8B B1 FD | 	call	#__system___string_cmp
03894     00 FA 0D F2 | 	cmp	result1, #0 wz
03898     AC 00 90 AD |  if_e	jmp	#LR__0207
0389c     5D 01 00 FF 
038a0     D6 15 06 F6 | 	mov	arg02, ##@LR__4694
038a4     13 13 02 F6 | 	mov	arg01, local05
038a8     C8 8B B1 FD | 	call	#__system___string_cmp
038ac     00 FA 0D F2 | 	cmp	result1, #0 wz
038b0     A0 00 90 AD |  if_e	jmp	#LR__0208
038b4     5D 01 00 FF 
038b8     D8 15 06 F6 | 	mov	arg02, ##@LR__4695
038bc     13 13 02 F6 | 	mov	arg01, local05
038c0     B0 8B B1 FD | 	call	#__system___string_cmp
038c4     00 FA 0D F2 | 	cmp	result1, #0 wz
038c8     94 00 90 AD |  if_e	jmp	#LR__0209
038cc     9C 00 90 FD | 	jmp	#LR__0210
038d0                 | LR__0197
038d0     01 00 00 FF 
038d4     00 29 06 F6 | 	mov	local06, ##768
038d8     98 00 90 FD | 	jmp	#LR__0211
038dc                 | LR__0198
038dc     01 00 00 FF 
038e0     01 29 06 F6 | 	mov	local06, ##769
038e4     8C 00 90 FD | 	jmp	#LR__0211
038e8                 | LR__0199
038e8     01 00 00 FF 
038ec     02 29 06 F6 | 	mov	local06, ##770
038f0     80 00 90 FD | 	jmp	#LR__0211
038f4                 | LR__0200
038f4     01 00 00 FF 
038f8     03 29 06 F6 | 	mov	local06, ##771
038fc     74 00 90 FD | 	jmp	#LR__0211
03900                 | LR__0201
03900     01 00 00 FF 
03904     04 29 06 F6 | 	mov	local06, ##772
03908     68 00 90 FD | 	jmp	#LR__0211
0390c                 | LR__0202
0390c     01 00 00 FF 
03910     05 29 06 F6 | 	mov	local06, ##773
03914     5C 00 90 FD | 	jmp	#LR__0211
03918                 | LR__0203
03918     01 00 00 FF 
0391c     06 29 06 F6 | 	mov	local06, ##774
03920     50 00 90 FD | 	jmp	#LR__0211
03924                 | LR__0204
03924     01 00 00 FF 
03928     07 29 06 F6 | 	mov	local06, ##775
0392c     44 00 90 FD | 	jmp	#LR__0211
03930                 | LR__0205
03930     01 00 00 FF 
03934     08 29 06 F6 | 	mov	local06, ##776
03938     38 00 90 FD | 	jmp	#LR__0211
0393c                 | LR__0206
0393c     01 00 00 FF 
03940     09 29 06 F6 | 	mov	local06, ##777
03944     2C 00 90 FD | 	jmp	#LR__0211
03948                 | LR__0207
03948     01 00 00 FF 
0394c     0A 29 06 F6 | 	mov	local06, ##778
03950     20 00 90 FD | 	jmp	#LR__0211
03954                 | LR__0208
03954     01 00 00 FF 
03958     0B 29 06 F6 | 	mov	local06, ##779
0395c     14 00 90 FD | 	jmp	#LR__0211
03960                 | LR__0209
03960     01 00 00 FF 
03964     0B 29 06 F6 | 	mov	local06, ##779
03968     08 00 90 FD | 	jmp	#LR__0211
0396c                 | LR__0210
0396c     00 FA 05 F6 | 	mov	result1, #0
03970     28 00 90 FD | 	jmp	#LR__0213
03974                 | LR__0211
03974                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03974     FF FF 7F FF 
03978     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0397c     18 00 90 CD |  if_b	jmp	#LR__0212
03980     0A 24 56 F2 | 	cmps	local04, #10 wc
03984     12 2B 02 C6 |  if_b	mov	local07, local04
03988     01 2A 66 C0 |  if_b	shl	local07, #1
0398c     12 2B 02 C1 |  if_b	add	local07, local04
03990     02 2A 66 C0 |  if_b	shl	local07, #2
03994     15 29 02 C1 |  if_b	add	local06, local07
03998                 | LR__0212
03998                 | ' return token
03998     14 FB 01 F6 | 	mov	result1, local06
0399c                 | LR__0213
0399c     A7 F0 03 F6 | 	mov	ptra, fp
039a0     B2 00 A0 FD | 	call	#popregs_
039a4                 | _isnotename_ret
039a4     2D 00 64 FD | 	ret
039a8                 | 
039a8                 | ' 
039a8                 | ' 
039a8                 | ' function isseparator(s as string) as ubyte
039a8                 | _isseparator
039a8     01 4A 05 F6 | 	mov	COUNT_, #1
039ac     A8 00 A0 FD | 	call	#pushregs_
039b0                 | ' 
039b0                 | ' select case s
039b0     09 1F 02 F6 | 	mov	local01, arg01
039b4     5D 01 00 FF 
039b8     DA 15 06 F6 | 	mov	arg02, ##@LR__4696
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     B0 8A B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     54 01 90 AD |  if_e	jmp	#LR__0220
039cc     5D 01 00 FF 
039d0     DC 15 06 F6 | 	mov	arg02, ##@LR__4697
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     98 8A B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     44 01 90 AD |  if_e	jmp	#LR__0221
039e4     5D 01 00 FF 
039e8     DE 15 06 F6 | 	mov	arg02, ##@LR__4698
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     80 8A B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     34 01 90 AD |  if_e	jmp	#LR__0222
039fc     5D 01 00 FF 
03a00     E0 15 06 F6 | 	mov	arg02, ##@LR__4699
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     68 8A B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     24 01 90 AD |  if_e	jmp	#LR__0223
03a14     5D 01 00 FF 
03a18     E2 15 06 F6 | 	mov	arg02, ##@LR__4700
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     50 8A B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     14 01 90 AD |  if_e	jmp	#LR__0224
03a2c     5D 01 00 FF 
03a30     E4 15 06 F6 | 	mov	arg02, ##@LR__4701
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     38 8A B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     04 01 90 AD |  if_e	jmp	#LR__0225
03a44     5D 01 00 FF 
03a48     E6 15 06 F6 | 	mov	arg02, ##@LR__4702
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     20 8A B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     F4 00 90 AD |  if_e	jmp	#LR__0226
03a5c     5D 01 00 FF 
03a60     E8 15 06 F6 | 	mov	arg02, ##@LR__4703
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     08 8A B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     E4 00 90 AD |  if_e	jmp	#LR__0227
03a74     5D 01 00 FF 
03a78     EA 15 06 F6 | 	mov	arg02, ##@LR__4704
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     F0 89 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     D4 00 90 AD |  if_e	jmp	#LR__0228
03a8c     5D 01 00 FF 
03a90     EC 15 06 F6 | 	mov	arg02, ##@LR__4705
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     D8 89 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     C4 00 90 AD |  if_e	jmp	#LR__0229
03aa4     5D 01 00 FF 
03aa8     EE 15 06 F6 | 	mov	arg02, ##@LR__4706
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     C0 89 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     B4 00 90 AD |  if_e	jmp	#LR__0230
03abc     5D 01 00 FF 
03ac0     F0 15 06 F6 | 	mov	arg02, ##@LR__4707
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     A8 89 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ad4     5D 01 00 FF 
03ad8     F2 15 06 F6 | 	mov	arg02, ##@LR__4708
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     90 89 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     94 00 90 AD |  if_e	jmp	#LR__0232
03aec     5D 01 00 FF 
03af0     F4 15 06 F6 | 	mov	arg02, ##@LR__4709
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     78 89 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     84 00 90 AD |  if_e	jmp	#LR__0233
03b04     5D 01 00 FF 
03b08     F6 15 06 F6 | 	mov	arg02, ##@LR__4710
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     60 89 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     74 00 90 AD |  if_e	jmp	#LR__0234
03b1c     78 00 90 FD | 	jmp	#LR__0235
03b20                 | LR__0220
03b20     01 FA 05 F6 | 	mov	result1, #1
03b24     74 00 90 FD | 	jmp	#LR__0236
03b28                 | LR__0221
03b28     02 FA 05 F6 | 	mov	result1, #2
03b2c     6C 00 90 FD | 	jmp	#LR__0236
03b30                 | LR__0222
03b30     1B FA 05 F6 | 	mov	result1, #27
03b34     64 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0223
03b38     11 FA 05 F6 | 	mov	result1, #17
03b3c     5C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0224
03b40     05 FA 05 F6 | 	mov	result1, #5
03b44     54 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0225
03b48     06 FA 05 F6 | 	mov	result1, #6
03b4c     4C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0226
03b50     12 FA 05 F6 | 	mov	result1, #18
03b54     44 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0227
03b58     13 FA 05 F6 | 	mov	result1, #19
03b5c     3C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0228
03b60     0C FA 05 F6 | 	mov	result1, #12
03b64     34 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0229
03b68     14 FA 05 F6 | 	mov	result1, #20
03b6c     2C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0230
03b70     15 FA 05 F6 | 	mov	result1, #21
03b74     24 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0231
03b78     16 FA 05 F6 | 	mov	result1, #22
03b7c     1C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0232
03b80     FF FB 05 F6 | 	mov	result1, #511
03b84     14 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0233
03b88     0F FA 05 F6 | 	mov	result1, #15
03b8c     0C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0234
03b90     10 FA 05 F6 | 	mov	result1, #16
03b94     04 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0235
03b98     00 FA 05 F6 | 	mov	result1, #0
03b9c                 | LR__0236
03b9c     A7 F0 03 F6 | 	mov	ptra, fp
03ba0     B2 00 A0 FD | 	call	#popregs_
03ba4                 | _isseparator_ret
03ba4     2D 00 64 FD | 	ret
03ba8                 | 
03ba8                 | ' 
03ba8                 | ' 
03ba8                 | ' function iscommand(s as string) as ubyte
03ba8                 | _iscommand
03ba8     01 4A 05 F6 | 	mov	COUNT_, #1
03bac     A8 00 A0 FD | 	call	#pushregs_
03bb0                 | ' 
03bb0                 | ' select case s
03bb0     09 1F 02 F6 | 	mov	local01, arg01
03bb4     5D 01 00 FF 
03bb8     FA 15 06 F6 | 	mov	arg02, ##@LR__4712
03bbc     0F 13 02 F6 | 	mov	arg01, local01
03bc0     B0 88 B1 FD | 	call	#__system___string_cmp
03bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc8     74 08 90 AD |  if_e	jmp	#LR__0240
03bcc     5D 01 00 FF 
03bd0     FF 15 06 F6 | 	mov	arg02, ##@LR__4713
03bd4     0F 13 02 F6 | 	mov	arg01, local01
03bd8     98 88 B1 FD | 	call	#__system___string_cmp
03bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03be0     64 08 90 AD |  if_e	jmp	#LR__0241
03be4     5E 01 00 FF 
03be8     02 14 06 F6 | 	mov	arg02, ##@LR__4714
03bec     0F 13 02 F6 | 	mov	arg01, local01
03bf0     80 88 B1 FD | 	call	#__system___string_cmp
03bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf8     54 08 90 AD |  if_e	jmp	#LR__0242
03bfc     5E 01 00 FF 
03c00     06 14 06 F6 | 	mov	arg02, ##@LR__4715
03c04     0F 13 02 F6 | 	mov	arg01, local01
03c08     68 88 B1 FD | 	call	#__system___string_cmp
03c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c10     44 08 90 AD |  if_e	jmp	#LR__0243
03c14     5E 01 00 FF 
03c18     0B 14 06 F6 | 	mov	arg02, ##@LR__4716
03c1c     0F 13 02 F6 | 	mov	arg01, local01
03c20     50 88 B1 FD | 	call	#__system___string_cmp
03c24     00 FA 0D F2 | 	cmp	result1, #0 wz
03c28     34 08 90 AD |  if_e	jmp	#LR__0244
03c2c     5E 01 00 FF 
03c30     0F 14 06 F6 | 	mov	arg02, ##@LR__4717
03c34     0F 13 02 F6 | 	mov	arg01, local01
03c38     38 88 B1 FD | 	call	#__system___string_cmp
03c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c40     24 08 90 AD |  if_e	jmp	#LR__0245
03c44     5E 01 00 FF 
03c48     16 14 06 F6 | 	mov	arg02, ##@LR__4718
03c4c     0F 13 02 F6 | 	mov	arg01, local01
03c50     20 88 B1 FD | 	call	#__system___string_cmp
03c54     00 FA 0D F2 | 	cmp	result1, #0 wz
03c58     14 08 90 AD |  if_e	jmp	#LR__0246
03c5c     5E 01 00 FF 
03c60     1A 14 06 F6 | 	mov	arg02, ##@LR__4719
03c64     0F 13 02 F6 | 	mov	arg01, local01
03c68     08 88 B1 FD | 	call	#__system___string_cmp
03c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c70     04 08 90 AD |  if_e	jmp	#LR__0247
03c74     5E 01 00 FF 
03c78     20 14 06 F6 | 	mov	arg02, ##@LR__4720
03c7c     0F 13 02 F6 | 	mov	arg01, local01
03c80     F0 87 B1 FD | 	call	#__system___string_cmp
03c84     00 FA 0D F2 | 	cmp	result1, #0 wz
03c88     F4 07 90 AD |  if_e	jmp	#LR__0248
03c8c     5E 01 00 FF 
03c90     24 14 06 F6 | 	mov	arg02, ##@LR__4721
03c94     0F 13 02 F6 | 	mov	arg01, local01
03c98     D8 87 B1 FD | 	call	#__system___string_cmp
03c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03ca0     E4 07 90 AD |  if_e	jmp	#LR__0249
03ca4     5E 01 00 FF 
03ca8     2A 14 06 F6 | 	mov	arg02, ##@LR__4722
03cac     0F 13 02 F6 | 	mov	arg01, local01
03cb0     C0 87 B1 FD | 	call	#__system___string_cmp
03cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb8     D4 07 90 AD |  if_e	jmp	#LR__0250
03cbc     5E 01 00 FF 
03cc0     2D 14 06 F6 | 	mov	arg02, ##@LR__4723
03cc4     0F 13 02 F6 | 	mov	arg01, local01
03cc8     A8 87 B1 FD | 	call	#__system___string_cmp
03ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
03cd0     C4 07 90 AD |  if_e	jmp	#LR__0251
03cd4     5E 01 00 FF 
03cd8     33 14 06 F6 | 	mov	arg02, ##@LR__4724
03cdc     0F 13 02 F6 | 	mov	arg01, local01
03ce0     90 87 B1 FD | 	call	#__system___string_cmp
03ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce8     B4 07 90 AD |  if_e	jmp	#LR__0252
03cec     5E 01 00 FF 
03cf0     37 14 06 F6 | 	mov	arg02, ##@LR__4725
03cf4     0F 13 02 F6 | 	mov	arg01, local01
03cf8     78 87 B1 FD | 	call	#__system___string_cmp
03cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03d00     A4 07 90 AD |  if_e	jmp	#LR__0253
03d04     5E 01 00 FF 
03d08     3E 14 06 F6 | 	mov	arg02, ##@LR__4726
03d0c     0F 13 02 F6 | 	mov	arg01, local01
03d10     60 87 B1 FD | 	call	#__system___string_cmp
03d14     00 FA 0D F2 | 	cmp	result1, #0 wz
03d18     94 07 90 AD |  if_e	jmp	#LR__0254
03d1c     5E 01 00 FF 
03d20     45 14 06 F6 | 	mov	arg02, ##@LR__4727
03d24     0F 13 02 F6 | 	mov	arg01, local01
03d28     48 87 B1 FD | 	call	#__system___string_cmp
03d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d30     84 07 90 AD |  if_e	jmp	#LR__0255
03d34     5E 01 00 FF 
03d38     4C 14 06 F6 | 	mov	arg02, ##@LR__4728
03d3c     0F 13 02 F6 | 	mov	arg01, local01
03d40     30 87 B1 FD | 	call	#__system___string_cmp
03d44     00 FA 0D F2 | 	cmp	result1, #0 wz
03d48     74 07 90 AD |  if_e	jmp	#LR__0256
03d4c     5E 01 00 FF 
03d50     56 14 06 F6 | 	mov	arg02, ##@LR__4729
03d54     0F 13 02 F6 | 	mov	arg01, local01
03d58     18 87 B1 FD | 	call	#__system___string_cmp
03d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d60     64 07 90 AD |  if_e	jmp	#LR__0257
03d64     5E 01 00 FF 
03d68     5A 14 06 F6 | 	mov	arg02, ##@LR__4730
03d6c     0F 13 02 F6 | 	mov	arg01, local01
03d70     00 87 B1 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     54 07 90 AD |  if_e	jmp	#LR__0258
03d7c     5E 01 00 FF 
03d80     5E 14 06 F6 | 	mov	arg02, ##@LR__4731
03d84     0F 13 02 F6 | 	mov	arg01, local01
03d88     E8 86 B1 FD | 	call	#__system___string_cmp
03d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d90     44 07 90 AD |  if_e	jmp	#LR__0259
03d94     5E 01 00 FF 
03d98     62 14 06 F6 | 	mov	arg02, ##@LR__4732
03d9c     0F 13 02 F6 | 	mov	arg01, local01
03da0     D0 86 B1 FD | 	call	#__system___string_cmp
03da4     00 FA 0D F2 | 	cmp	result1, #0 wz
03da8     34 07 90 AD |  if_e	jmp	#LR__0260
03dac     5E 01 00 FF 
03db0     66 14 06 F6 | 	mov	arg02, ##@LR__4733
03db4     0F 13 02 F6 | 	mov	arg01, local01
03db8     B8 86 B1 FD | 	call	#__system___string_cmp
03dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc0     24 07 90 AD |  if_e	jmp	#LR__0261
03dc4     5E 01 00 FF 
03dc8     6C 14 06 F6 | 	mov	arg02, ##@LR__4734
03dcc     0F 13 02 F6 | 	mov	arg01, local01
03dd0     A0 86 B1 FD | 	call	#__system___string_cmp
03dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd8     14 07 90 AD |  if_e	jmp	#LR__0262
03ddc     5E 01 00 FF 
03de0     71 14 06 F6 | 	mov	arg02, ##@LR__4735
03de4     0F 13 02 F6 | 	mov	arg01, local01
03de8     88 86 B1 FD | 	call	#__system___string_cmp
03dec     00 FA 0D F2 | 	cmp	result1, #0 wz
03df0     04 07 90 AD |  if_e	jmp	#LR__0263
03df4     5E 01 00 FF 
03df8     75 14 06 F6 | 	mov	arg02, ##@LR__4736
03dfc     0F 13 02 F6 | 	mov	arg01, local01
03e00     70 86 B1 FD | 	call	#__system___string_cmp
03e04     00 FA 0D F2 | 	cmp	result1, #0 wz
03e08     F4 06 90 AD |  if_e	jmp	#LR__0264
03e0c     5E 01 00 FF 
03e10     7A 14 06 F6 | 	mov	arg02, ##@LR__4737
03e14     0F 13 02 F6 | 	mov	arg01, local01
03e18     58 86 B1 FD | 	call	#__system___string_cmp
03e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e20     E4 06 90 AD |  if_e	jmp	#LR__0265
03e24     5E 01 00 FF 
03e28     82 14 06 F6 | 	mov	arg02, ##@LR__4738
03e2c     0F 13 02 F6 | 	mov	arg01, local01
03e30     40 86 B1 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     D4 06 90 AD |  if_e	jmp	#LR__0266
03e3c     5E 01 00 FF 
03e40     86 14 06 F6 | 	mov	arg02, ##@LR__4739
03e44     0F 13 02 F6 | 	mov	arg01, local01
03e48     28 86 B1 FD | 	call	#__system___string_cmp
03e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e50     C4 06 90 AD |  if_e	jmp	#LR__0267
03e54     5E 01 00 FF 
03e58     8B 14 06 F6 | 	mov	arg02, ##@LR__4740
03e5c     0F 13 02 F6 | 	mov	arg01, local01
03e60     10 86 B1 FD | 	call	#__system___string_cmp
03e64     00 FA 0D F2 | 	cmp	result1, #0 wz
03e68     B4 06 90 AD |  if_e	jmp	#LR__0268
03e6c     5E 01 00 FF 
03e70     8F 14 06 F6 | 	mov	arg02, ##@LR__4741
03e74     0F 13 02 F6 | 	mov	arg01, local01
03e78     F8 85 B1 FD | 	call	#__system___string_cmp
03e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e80     A4 06 90 AD |  if_e	jmp	#LR__0269
03e84     5E 01 00 FF 
03e88     94 14 06 F6 | 	mov	arg02, ##@LR__4742
03e8c     0F 13 02 F6 | 	mov	arg01, local01
03e90     E0 85 B1 FD | 	call	#__system___string_cmp
03e94     00 FA 0D F2 | 	cmp	result1, #0 wz
03e98     94 06 90 AD |  if_e	jmp	#LR__0270
03e9c     5E 01 00 FF 
03ea0     98 14 06 F6 | 	mov	arg02, ##@LR__4743
03ea4     0F 13 02 F6 | 	mov	arg01, local01
03ea8     C8 85 B1 FD | 	call	#__system___string_cmp
03eac     00 FA 0D F2 | 	cmp	result1, #0 wz
03eb0     84 06 90 AD |  if_e	jmp	#LR__0271
03eb4     5E 01 00 FF 
03eb8     9B 14 06 F6 | 	mov	arg02, ##@LR__4744
03ebc     0F 13 02 F6 | 	mov	arg01, local01
03ec0     B0 85 B1 FD | 	call	#__system___string_cmp
03ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec8     74 06 90 AD |  if_e	jmp	#LR__0272
03ecc     5E 01 00 FF 
03ed0     A1 14 06 F6 | 	mov	arg02, ##@LR__4745
03ed4     0F 13 02 F6 | 	mov	arg01, local01
03ed8     98 85 B1 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     64 06 90 AD |  if_e	jmp	#LR__0273
03ee4     5E 01 00 FF 
03ee8     A5 14 06 F6 | 	mov	arg02, ##@LR__4746
03eec     0F 13 02 F6 | 	mov	arg01, local01
03ef0     80 85 B1 FD | 	call	#__system___string_cmp
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     54 06 90 AD |  if_e	jmp	#LR__0274
03efc     5E 01 00 FF 
03f00     AA 14 06 F6 | 	mov	arg02, ##@LR__4747
03f04     0F 13 02 F6 | 	mov	arg01, local01
03f08     68 85 B1 FD | 	call	#__system___string_cmp
03f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f10     44 06 90 AD |  if_e	jmp	#LR__0275
03f14     5E 01 00 FF 
03f18     AD 14 06 F6 | 	mov	arg02, ##@LR__4748
03f1c     0F 13 02 F6 | 	mov	arg01, local01
03f20     50 85 B1 FD | 	call	#__system___string_cmp
03f24     00 FA 0D F2 | 	cmp	result1, #0 wz
03f28     34 06 90 AD |  if_e	jmp	#LR__0276
03f2c     5E 01 00 FF 
03f30     B0 14 06 F6 | 	mov	arg02, ##@LR__4749
03f34     0F 13 02 F6 | 	mov	arg01, local01
03f38     38 85 B1 FD | 	call	#__system___string_cmp
03f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f40     24 06 90 AD |  if_e	jmp	#LR__0277
03f44     5E 01 00 FF 
03f48     B4 14 06 F6 | 	mov	arg02, ##@LR__4750
03f4c     0F 13 02 F6 | 	mov	arg01, local01
03f50     20 85 B1 FD | 	call	#__system___string_cmp
03f54     00 FA 0D F2 | 	cmp	result1, #0 wz
03f58     14 06 90 AD |  if_e	jmp	#LR__0278
03f5c     5E 01 00 FF 
03f60     B7 14 06 F6 | 	mov	arg02, ##@LR__4751
03f64     0F 13 02 F6 | 	mov	arg01, local01
03f68     08 85 B1 FD | 	call	#__system___string_cmp
03f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f70     04 06 90 AD |  if_e	jmp	#LR__0279
03f74     5E 01 00 FF 
03f78     BB 14 06 F6 | 	mov	arg02, ##@LR__4752
03f7c     0F 13 02 F6 | 	mov	arg01, local01
03f80     F0 84 B1 FD | 	call	#__system___string_cmp
03f84     00 FA 0D F2 | 	cmp	result1, #0 wz
03f88     F4 05 90 AD |  if_e	jmp	#LR__0280
03f8c     5E 01 00 FF 
03f90     C0 14 06 F6 | 	mov	arg02, ##@LR__4753
03f94     0F 13 02 F6 | 	mov	arg01, local01
03f98     D8 84 B1 FD | 	call	#__system___string_cmp
03f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03fa0     E4 05 90 AD |  if_e	jmp	#LR__0281
03fa4     5E 01 00 FF 
03fa8     C3 14 06 F6 | 	mov	arg02, ##@LR__4754
03fac     0F 13 02 F6 | 	mov	arg01, local01
03fb0     C0 84 B1 FD | 	call	#__system___string_cmp
03fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb8     D4 05 90 AD |  if_e	jmp	#LR__0282
03fbc     5E 01 00 FF 
03fc0     C8 14 06 F6 | 	mov	arg02, ##@LR__4755
03fc4     0F 13 02 F6 | 	mov	arg01, local01
03fc8     A8 84 B1 FD | 	call	#__system___string_cmp
03fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fd0     C4 05 90 AD |  if_e	jmp	#LR__0283
03fd4     5E 01 00 FF 
03fd8     CC 14 06 F6 | 	mov	arg02, ##@LR__4756
03fdc     0F 13 02 F6 | 	mov	arg01, local01
03fe0     90 84 B1 FD | 	call	#__system___string_cmp
03fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe8     B4 05 90 AD |  if_e	jmp	#LR__0284
03fec     5E 01 00 FF 
03ff0     D2 14 06 F6 | 	mov	arg02, ##@LR__4757
03ff4     0F 13 02 F6 | 	mov	arg01, local01
03ff8     78 84 B1 FD | 	call	#__system___string_cmp
03ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
04000     A4 05 90 AD |  if_e	jmp	#LR__0285
04004     5E 01 00 FF 
04008     D7 14 06 F6 | 	mov	arg02, ##@LR__4758
0400c     0F 13 02 F6 | 	mov	arg01, local01
04010     60 84 B1 FD | 	call	#__system___string_cmp
04014     00 FA 0D F2 | 	cmp	result1, #0 wz
04018     94 05 90 AD |  if_e	jmp	#LR__0286
0401c     5E 01 00 FF 
04020     DA 14 06 F6 | 	mov	arg02, ##@LR__4759
04024     0F 13 02 F6 | 	mov	arg01, local01
04028     48 84 B1 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     84 05 90 AD |  if_e	jmp	#LR__0287
04034     5E 01 00 FF 
04038     E0 14 06 F6 | 	mov	arg02, ##@LR__4760
0403c     0F 13 02 F6 | 	mov	arg01, local01
04040     30 84 B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     74 05 90 AD |  if_e	jmp	#LR__0288
0404c     5E 01 00 FF 
04050     E4 14 06 F6 | 	mov	arg02, ##@LR__4761
04054     0F 13 02 F6 | 	mov	arg01, local01
04058     18 84 B1 FD | 	call	#__system___string_cmp
0405c     00 FA 0D F2 | 	cmp	result1, #0 wz
04060     64 05 90 AD |  if_e	jmp	#LR__0289
04064     5E 01 00 FF 
04068     E9 14 06 F6 | 	mov	arg02, ##@LR__4762
0406c     0F 13 02 F6 | 	mov	arg01, local01
04070     00 84 B1 FD | 	call	#__system___string_cmp
04074     00 FA 0D F2 | 	cmp	result1, #0 wz
04078     54 05 90 AD |  if_e	jmp	#LR__0290
0407c     5E 01 00 FF 
04080     EC 14 06 F6 | 	mov	arg02, ##@LR__4763
04084     0F 13 02 F6 | 	mov	arg01, local01
04088     E8 83 B1 FD | 	call	#__system___string_cmp
0408c     00 FA 0D F2 | 	cmp	result1, #0 wz
04090     44 05 90 AD |  if_e	jmp	#LR__0291
04094     5E 01 00 FF 
04098     F2 14 06 F6 | 	mov	arg02, ##@LR__4764
0409c     0F 13 02 F6 | 	mov	arg01, local01
040a0     D0 83 B1 FD | 	call	#__system___string_cmp
040a4     00 FA 0D F2 | 	cmp	result1, #0 wz
040a8     34 05 90 AD |  if_e	jmp	#LR__0292
040ac     5E 01 00 FF 
040b0     F5 14 06 F6 | 	mov	arg02, ##@LR__4765
040b4     0F 13 02 F6 | 	mov	arg01, local01
040b8     B8 83 B1 FD | 	call	#__system___string_cmp
040bc     00 FA 0D F2 | 	cmp	result1, #0 wz
040c0     24 05 90 AD |  if_e	jmp	#LR__0293
040c4     5E 01 00 FF 
040c8     FE 14 06 F6 | 	mov	arg02, ##@LR__4766
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     A0 83 B1 FD | 	call	#__system___string_cmp
040d4     00 FA 0D F2 | 	cmp	result1, #0 wz
040d8     14 05 90 AD |  if_e	jmp	#LR__0294
040dc     5E 01 00 FF 
040e0     04 15 06 F6 | 	mov	arg02, ##@LR__4767
040e4     0F 13 02 F6 | 	mov	arg01, local01
040e8     88 83 B1 FD | 	call	#__system___string_cmp
040ec     00 FA 0D F2 | 	cmp	result1, #0 wz
040f0     04 05 90 AD |  if_e	jmp	#LR__0295
040f4     5E 01 00 FF 
040f8     0A 15 06 F6 | 	mov	arg02, ##@LR__4768
040fc     0F 13 02 F6 | 	mov	arg01, local01
04100     70 83 B1 FD | 	call	#__system___string_cmp
04104     00 FA 0D F2 | 	cmp	result1, #0 wz
04108     F4 04 90 AD |  if_e	jmp	#LR__0296
0410c     5E 01 00 FF 
04110     13 15 06 F6 | 	mov	arg02, ##@LR__4769
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     58 83 B1 FD | 	call	#__system___string_cmp
0411c     00 FA 0D F2 | 	cmp	result1, #0 wz
04120     E4 04 90 AD |  if_e	jmp	#LR__0297
04124     5E 01 00 FF 
04128     1D 15 06 F6 | 	mov	arg02, ##@LR__4770
0412c     0F 13 02 F6 | 	mov	arg01, local01
04130     40 83 B1 FD | 	call	#__system___string_cmp
04134     00 FA 0D F2 | 	cmp	result1, #0 wz
04138     D4 04 90 AD |  if_e	jmp	#LR__0298
0413c     5E 01 00 FF 
04140     26 15 06 F6 | 	mov	arg02, ##@LR__4771
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     28 83 B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     C4 04 90 AD |  if_e	jmp	#LR__0299
04154     5E 01 00 FF 
04158     2B 15 06 F6 | 	mov	arg02, ##@LR__4772
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     10 83 B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     B4 04 90 AD |  if_e	jmp	#LR__0300
0416c     5E 01 00 FF 
04170     30 15 06 F6 | 	mov	arg02, ##@LR__4773
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     F8 82 B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     A4 04 90 AD |  if_e	jmp	#LR__0301
04184     5E 01 00 FF 
04188     34 15 06 F6 | 	mov	arg02, ##@LR__4774
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     E0 82 B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     94 04 90 AD |  if_e	jmp	#LR__0302
0419c     5E 01 00 FF 
041a0     39 15 06 F6 | 	mov	arg02, ##@LR__4775
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     C8 82 B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     84 04 90 AD |  if_e	jmp	#LR__0303
041b4     5E 01 00 FF 
041b8     42 15 06 F6 | 	mov	arg02, ##@LR__4776
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     B0 82 B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     74 04 90 AD |  if_e	jmp	#LR__0304
041cc     5E 01 00 FF 
041d0     47 15 06 F6 | 	mov	arg02, ##@LR__4777
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     98 82 B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     64 04 90 AD |  if_e	jmp	#LR__0305
041e4     5E 01 00 FF 
041e8     4D 15 06 F6 | 	mov	arg02, ##@LR__4778
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     80 82 B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     54 04 90 AD |  if_e	jmp	#LR__0306
041fc     5E 01 00 FF 
04200     4F 15 06 F6 | 	mov	arg02, ##@LR__4779
04204     0F 13 02 F6 | 	mov	arg01, local01
04208     68 82 B1 FD | 	call	#__system___string_cmp
0420c     00 FA 0D F2 | 	cmp	result1, #0 wz
04210     44 04 90 AD |  if_e	jmp	#LR__0307
04214     5E 01 00 FF 
04218     53 15 06 F6 | 	mov	arg02, ##@LR__4780
0421c     0F 13 02 F6 | 	mov	arg01, local01
04220     50 82 B1 FD | 	call	#__system___string_cmp
04224     00 FA 0D F2 | 	cmp	result1, #0 wz
04228     34 04 90 AD |  if_e	jmp	#LR__0308
0422c     5E 01 00 FF 
04230     5B 15 06 F6 | 	mov	arg02, ##@LR__4781
04234     0F 13 02 F6 | 	mov	arg01, local01
04238     38 82 B1 FD | 	call	#__system___string_cmp
0423c     00 FA 0D F2 | 	cmp	result1, #0 wz
04240     24 04 90 AD |  if_e	jmp	#LR__0309
04244     5E 01 00 FF 
04248     5F 15 06 F6 | 	mov	arg02, ##@LR__4782
0424c     0F 13 02 F6 | 	mov	arg01, local01
04250     20 82 B1 FD | 	call	#__system___string_cmp
04254     00 FA 0D F2 | 	cmp	result1, #0 wz
04258     14 04 90 AD |  if_e	jmp	#LR__0310
0425c     5E 01 00 FF 
04260     64 15 06 F6 | 	mov	arg02, ##@LR__4783
04264     0F 13 02 F6 | 	mov	arg01, local01
04268     08 82 B1 FD | 	call	#__system___string_cmp
0426c     00 FA 0D F2 | 	cmp	result1, #0 wz
04270     04 04 90 AD |  if_e	jmp	#LR__0311
04274     5E 01 00 FF 
04278     67 15 06 F6 | 	mov	arg02, ##@LR__4784
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     F0 81 B1 FD | 	call	#__system___string_cmp
04284     00 FA 0D F2 | 	cmp	result1, #0 wz
04288     F4 03 90 AD |  if_e	jmp	#LR__0312
0428c     5E 01 00 FF 
04290     70 15 06 F6 | 	mov	arg02, ##@LR__4785
04294     0F 13 02 F6 | 	mov	arg01, local01
04298     D8 81 B1 FD | 	call	#__system___string_cmp
0429c     00 FA 0D F2 | 	cmp	result1, #0 wz
042a0     E4 03 90 AD |  if_e	jmp	#LR__0313
042a4     5E 01 00 FF 
042a8     77 15 06 F6 | 	mov	arg02, ##@LR__4786
042ac     0F 13 02 F6 | 	mov	arg01, local01
042b0     C0 81 B1 FD | 	call	#__system___string_cmp
042b4     00 FA 0D F2 | 	cmp	result1, #0 wz
042b8     D4 03 90 AD |  if_e	jmp	#LR__0314
042bc     5E 01 00 FF 
042c0     7E 15 06 F6 | 	mov	arg02, ##@LR__4787
042c4     0F 13 02 F6 | 	mov	arg01, local01
042c8     A8 81 B1 FD | 	call	#__system___string_cmp
042cc     00 FA 0D F2 | 	cmp	result1, #0 wz
042d0     C4 03 90 AD |  if_e	jmp	#LR__0315
042d4     5E 01 00 FF 
042d8     85 15 06 F6 | 	mov	arg02, ##@LR__4788
042dc     0F 13 02 F6 | 	mov	arg01, local01
042e0     90 81 B1 FD | 	call	#__system___string_cmp
042e4     00 FA 0D F2 | 	cmp	result1, #0 wz
042e8     B4 03 90 AD |  if_e	jmp	#LR__0316
042ec     5E 01 00 FF 
042f0     90 15 06 F6 | 	mov	arg02, ##@LR__4789
042f4     0F 13 02 F6 | 	mov	arg01, local01
042f8     78 81 B1 FD | 	call	#__system___string_cmp
042fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04300     A4 03 90 AD |  if_e	jmp	#LR__0317
04304     5E 01 00 FF 
04308     97 15 06 F6 | 	mov	arg02, ##@LR__4790
0430c     0F 13 02 F6 | 	mov	arg01, local01
04310     60 81 B1 FD | 	call	#__system___string_cmp
04314     00 FA 0D F2 | 	cmp	result1, #0 wz
04318     94 03 90 AD |  if_e	jmp	#LR__0318
0431c     5E 01 00 FF 
04320     9F 15 06 F6 | 	mov	arg02, ##@LR__4791
04324     0F 13 02 F6 | 	mov	arg01, local01
04328     48 81 B1 FD | 	call	#__system___string_cmp
0432c     00 FA 0D F2 | 	cmp	result1, #0 wz
04330     84 03 90 AD |  if_e	jmp	#LR__0319
04334     5E 01 00 FF 
04338     A5 15 06 F6 | 	mov	arg02, ##@LR__4792
0433c     0F 13 02 F6 | 	mov	arg01, local01
04340     30 81 B1 FD | 	call	#__system___string_cmp
04344     00 FA 0D F2 | 	cmp	result1, #0 wz
04348     74 03 90 AD |  if_e	jmp	#LR__0320
0434c     5E 01 00 FF 
04350     A9 15 06 F6 | 	mov	arg02, ##@LR__4793
04354     0F 13 02 F6 | 	mov	arg01, local01
04358     18 81 B1 FD | 	call	#__system___string_cmp
0435c     00 FA 0D F2 | 	cmp	result1, #0 wz
04360     64 03 90 AD |  if_e	jmp	#LR__0321
04364     5E 01 00 FF 
04368     B0 15 06 F6 | 	mov	arg02, ##@LR__4794
0436c     0F 13 02 F6 | 	mov	arg01, local01
04370     00 81 B1 FD | 	call	#__system___string_cmp
04374     00 FA 0D F2 | 	cmp	result1, #0 wz
04378     54 03 90 AD |  if_e	jmp	#LR__0322
0437c     5E 01 00 FF 
04380     B4 15 06 F6 | 	mov	arg02, ##@LR__4795
04384     0F 13 02 F6 | 	mov	arg01, local01
04388     E8 80 B1 FD | 	call	#__system___string_cmp
0438c     00 FA 0D F2 | 	cmp	result1, #0 wz
04390     44 03 90 AD |  if_e	jmp	#LR__0323
04394     5E 01 00 FF 
04398     B9 15 06 F6 | 	mov	arg02, ##@LR__4796
0439c     0F 13 02 F6 | 	mov	arg01, local01
043a0     D0 80 B1 FD | 	call	#__system___string_cmp
043a4     00 FA 0D F2 | 	cmp	result1, #0 wz
043a8     34 03 90 AD |  if_e	jmp	#LR__0324
043ac     5E 01 00 FF 
043b0     C0 15 06 F6 | 	mov	arg02, ##@LR__4797
043b4     0F 13 02 F6 | 	mov	arg01, local01
043b8     B8 80 B1 FD | 	call	#__system___string_cmp
043bc     00 FA 0D F2 | 	cmp	result1, #0 wz
043c0     24 03 90 AD |  if_e	jmp	#LR__0325
043c4     5E 01 00 FF 
043c8     CA 15 06 F6 | 	mov	arg02, ##@LR__4798
043cc     0F 13 02 F6 | 	mov	arg01, local01
043d0     A0 80 B1 FD | 	call	#__system___string_cmp
043d4     00 FA 0D F2 | 	cmp	result1, #0 wz
043d8     14 03 90 AD |  if_e	jmp	#LR__0326
043dc     5E 01 00 FF 
043e0     CE 15 06 F6 | 	mov	arg02, ##@LR__4799
043e4     0F 13 02 F6 | 	mov	arg01, local01
043e8     88 80 B1 FD | 	call	#__system___string_cmp
043ec     00 FA 0D F2 | 	cmp	result1, #0 wz
043f0     04 03 90 AD |  if_e	jmp	#LR__0327
043f4     5E 01 00 FF 
043f8     D6 15 06 F6 | 	mov	arg02, ##@LR__4800
043fc     0F 13 02 F6 | 	mov	arg01, local01
04400     70 80 B1 FD | 	call	#__system___string_cmp
04404     00 FA 0D F2 | 	cmp	result1, #0 wz
04408     F4 02 90 AD |  if_e	jmp	#LR__0328
0440c     5E 01 00 FF 
04410     DA 15 06 F6 | 	mov	arg02, ##@LR__4801
04414     0F 13 02 F6 | 	mov	arg01, local01
04418     58 80 B1 FD | 	call	#__system___string_cmp
0441c     00 FA 0D F2 | 	cmp	result1, #0 wz
04420     E4 02 90 AD |  if_e	jmp	#LR__0329
04424     5E 01 00 FF 
04428     E0 15 06 F6 | 	mov	arg02, ##@LR__4802
0442c     0F 13 02 F6 | 	mov	arg01, local01
04430     40 80 B1 FD | 	call	#__system___string_cmp
04434     00 FA 0D F2 | 	cmp	result1, #0 wz
04438     D4 02 90 AD |  if_e	jmp	#LR__0330
0443c     D8 02 90 FD | 	jmp	#LR__0331
04440                 | LR__0240
04440     5C FA 05 F6 | 	mov	result1, #92
04444     D4 02 90 FD | 	jmp	#LR__0332
04448                 | LR__0241
04448     5C FA 05 F6 | 	mov	result1, #92
0444c     CC 02 90 FD | 	jmp	#LR__0332
04450                 | LR__0242
04450     47 FA 05 F6 | 	mov	result1, #71
04454     C4 02 90 FD | 	jmp	#LR__0332
04458                 | LR__0243
04458     59 FA 05 F6 | 	mov	result1, #89
0445c     BC 02 90 FD | 	jmp	#LR__0332
04460                 | LR__0244
04460     59 FA 05 F6 | 	mov	result1, #89
04464     B4 02 90 FD | 	jmp	#LR__0332
04468                 | LR__0245
04468     45 FA 05 F6 | 	mov	result1, #69
0446c     AC 02 90 FD | 	jmp	#LR__0332
04470                 | LR__0246
04470     45 FA 05 F6 | 	mov	result1, #69
04474     A4 02 90 FD | 	jmp	#LR__0332
04478                 | LR__0247
04478     69 FA 05 F6 | 	mov	result1, #105
0447c     9C 02 90 FD | 	jmp	#LR__0332
04480                 | LR__0248
04480     40 FA 05 F6 | 	mov	result1, #64
04484     94 02 90 FD | 	jmp	#LR__0332
04488                 | LR__0249
04488     49 FA 05 F6 | 	mov	result1, #73
0448c     8C 02 90 FD | 	jmp	#LR__0332
04490                 | LR__0250
04490     49 FA 05 F6 | 	mov	result1, #73
04494     84 02 90 FD | 	jmp	#LR__0332
04498                 | LR__0251
04498     50 FA 05 F6 | 	mov	result1, #80
0449c     7C 02 90 FD | 	jmp	#LR__0332
044a0                 | LR__0252
044a0     50 FA 05 F6 | 	mov	result1, #80
044a4     74 02 90 FD | 	jmp	#LR__0332
044a8                 | LR__0253
044a8     68 FA 05 F6 | 	mov	result1, #104
044ac     6C 02 90 FD | 	jmp	#LR__0332
044b0                 | LR__0254
044b0     73 FA 05 F6 | 	mov	result1, #115
044b4     64 02 90 FD | 	jmp	#LR__0332
044b8                 | LR__0255
044b8     74 FA 05 F6 | 	mov	result1, #116
044bc     5C 02 90 FD | 	jmp	#LR__0332
044c0                 | LR__0256
044c0     6C FA 05 F6 | 	mov	result1, #108
044c4     54 02 90 FD | 	jmp	#LR__0332
044c8                 | LR__0257
044c8     6C FA 05 F6 | 	mov	result1, #108
044cc     4C 02 90 FD | 	jmp	#LR__0332
044d0                 | LR__0258
044d0     89 FA 05 F6 | 	mov	result1, #137
044d4     44 02 90 FD | 	jmp	#LR__0332
044d8                 | LR__0259
044d8     72 FA 05 F6 | 	mov	result1, #114
044dc     3C 02 90 FD | 	jmp	#LR__0332
044e0                 | LR__0260
044e0     5D FA 05 F6 | 	mov	result1, #93
044e4     34 02 90 FD | 	jmp	#LR__0332
044e8                 | LR__0261
044e8     96 FA 05 F6 | 	mov	result1, #150
044ec     2C 02 90 FD | 	jmp	#LR__0332
044f0                 | LR__0262
044f0     43 FA 05 F6 | 	mov	result1, #67
044f4     24 02 90 FD | 	jmp	#LR__0332
044f8                 | LR__0263
044f8     43 FA 05 F6 | 	mov	result1, #67
044fc     1C 02 90 FD | 	jmp	#LR__0332
04500                 | LR__0264
04500     5A FA 05 F6 | 	mov	result1, #90
04504     14 02 90 FD | 	jmp	#LR__0332
04508                 | LR__0265
04508     46 FA 05 F6 | 	mov	result1, #70
0450c     0C 02 90 FD | 	jmp	#LR__0332
04510                 | LR__0266
04510     46 FA 05 F6 | 	mov	result1, #70
04514     04 02 90 FD | 	jmp	#LR__0332
04518                 | LR__0267
04518     71 FA 05 F6 | 	mov	result1, #113
0451c     FC 01 90 FD | 	jmp	#LR__0332
04520                 | LR__0268
04520     71 FA 05 F6 | 	mov	result1, #113
04524     F4 01 90 FD | 	jmp	#LR__0332
04528                 | LR__0269
04528     60 FA 05 F6 | 	mov	result1, #96
0452c     EC 01 90 FD | 	jmp	#LR__0332
04530                 | LR__0270
04530     4A FA 05 F6 | 	mov	result1, #74
04534     E4 01 90 FD | 	jmp	#LR__0332
04538                 | LR__0271
04538     4A FA 05 F6 | 	mov	result1, #74
0453c     DC 01 90 FD | 	jmp	#LR__0332
04540                 | LR__0272
04540     48 FA 05 F6 | 	mov	result1, #72
04544     D4 01 90 FD | 	jmp	#LR__0332
04548                 | LR__0273
04548     48 FA 05 F6 | 	mov	result1, #72
0454c     CC 01 90 FD | 	jmp	#LR__0332
04550                 | LR__0274
04550     4E FA 05 F6 | 	mov	result1, #78
04554     C4 01 90 FD | 	jmp	#LR__0332
04558                 | LR__0275
04558     4E FA 05 F6 | 	mov	result1, #78
0455c     BC 01 90 FD | 	jmp	#LR__0332
04560                 | LR__0276
04560     58 FA 05 F6 | 	mov	result1, #88
04564     B4 01 90 FD | 	jmp	#LR__0332
04568                 | LR__0277
04568     5F FA 05 F6 | 	mov	result1, #95
0456c     AC 01 90 FD | 	jmp	#LR__0332
04570                 | LR__0278
04570     5F FA 05 F6 | 	mov	result1, #95
04574     A4 01 90 FD | 	jmp	#LR__0332
04578                 | LR__0279
04578     8A FA 05 F6 | 	mov	result1, #138
0457c     9C 01 90 FD | 	jmp	#LR__0332
04580                 | LR__0280
04580     4C FA 05 F6 | 	mov	result1, #76
04584     94 01 90 FD | 	jmp	#LR__0332
04588                 | LR__0281
04588     4C FA 05 F6 | 	mov	result1, #76
0458c     8C 01 90 FD | 	jmp	#LR__0332
04590                 | LR__0282
04590     52 FA 05 F6 | 	mov	result1, #82
04594     84 01 90 FD | 	jmp	#LR__0332
04598                 | LR__0283
04598     52 FA 05 F6 | 	mov	result1, #82
0459c     7C 01 90 FD | 	jmp	#LR__0332
045a0                 | LR__0284
045a0     97 FA 05 F6 | 	mov	result1, #151
045a4     74 01 90 FD | 	jmp	#LR__0332
045a8                 | LR__0285
045a8     61 FA 05 F6 | 	mov	result1, #97
045ac     6C 01 90 FD | 	jmp	#LR__0332
045b0                 | LR__0286
045b0     61 FA 05 F6 | 	mov	result1, #97
045b4     64 01 90 FD | 	jmp	#LR__0332
045b8                 | LR__0287
045b8     63 FA 05 F6 | 	mov	result1, #99
045bc     5C 01 90 FD | 	jmp	#LR__0332
045c0                 | LR__0288
045c0     41 FA 05 F6 | 	mov	result1, #65
045c4     54 01 90 FD | 	jmp	#LR__0332
045c8                 | LR__0289
045c8     4B FA 05 F6 | 	mov	result1, #75
045cc     4C 01 90 FD | 	jmp	#LR__0332
045d0                 | LR__0290
045d0     4B FA 05 F6 | 	mov	result1, #75
045d4     44 01 90 FD | 	jmp	#LR__0332
045d8                 | LR__0291
045d8     5E FA 05 F6 | 	mov	result1, #94
045dc     3C 01 90 FD | 	jmp	#LR__0332
045e0                 | LR__0292
045e0     5E FA 05 F6 | 	mov	result1, #94
045e4     34 01 90 FD | 	jmp	#LR__0332
045e8                 | LR__0293
045e8     7C FA 05 F6 | 	mov	result1, #124
045ec     2C 01 90 FD | 	jmp	#LR__0332
045f0                 | LR__0294
045f0     7E FA 05 F6 | 	mov	result1, #126
045f4     24 01 90 FD | 	jmp	#LR__0332
045f8                 | LR__0295
045f8     7D FA 05 F6 | 	mov	result1, #125
045fc     1C 01 90 FD | 	jmp	#LR__0332
04600                 | LR__0296
04600     7F FA 05 F6 | 	mov	result1, #127
04604     14 01 90 FD | 	jmp	#LR__0332
04608                 | LR__0297
04608     80 FA 05 F6 | 	mov	result1, #128
0460c     0C 01 90 FD | 	jmp	#LR__0332
04610                 | LR__0298
04610     55 FA 05 F6 | 	mov	result1, #85
04614     04 01 90 FD | 	jmp	#LR__0332
04618                 | LR__0299
04618     75 FA 05 F6 | 	mov	result1, #117
0461c     FC 00 90 FD | 	jmp	#LR__0332
04620                 | LR__0300
04620     42 FA 05 F6 | 	mov	result1, #66
04624     F4 00 90 FD | 	jmp	#LR__0332
04628                 | LR__0301
04628     42 FA 05 F6 | 	mov	result1, #66
0462c     EC 00 90 FD | 	jmp	#LR__0332
04630                 | LR__0302
04630     95 FA 05 F6 | 	mov	result1, #149
04634     E4 00 90 FD | 	jmp	#LR__0332
04638                 | LR__0303
04638     81 FA 05 F6 | 	mov	result1, #129
0463c     DC 00 90 FD | 	jmp	#LR__0332
04640                 | LR__0304
04640     81 FA 05 F6 | 	mov	result1, #129
04644     D4 00 90 FD | 	jmp	#LR__0332
04648                 | LR__0305
04648     44 FA 05 F6 | 	mov	result1, #68
0464c     CC 00 90 FD | 	jmp	#LR__0332
04650                 | LR__0306
04650     44 FA 05 F6 | 	mov	result1, #68
04654     C4 00 90 FD | 	jmp	#LR__0332
04658                 | LR__0307
04658     88 FA 05 F6 | 	mov	result1, #136
0465c     BC 00 90 FD | 	jmp	#LR__0332
04660                 | LR__0308
04660     92 FA 05 F6 | 	mov	result1, #146
04664     B4 00 90 FD | 	jmp	#LR__0332
04668                 | LR__0309
04668     4D FA 05 F6 | 	mov	result1, #77
0466c     AC 00 90 FD | 	jmp	#LR__0332
04670                 | LR__0310
04670     51 FA 05 F6 | 	mov	result1, #81
04674     A4 00 90 FD | 	jmp	#LR__0332
04678                 | LR__0311
04678     51 FA 05 F6 | 	mov	result1, #81
0467c     9C 00 90 FD | 	jmp	#LR__0332
04680                 | LR__0312
04680     8E FA 05 F6 | 	mov	result1, #142
04684     94 00 90 FD | 	jmp	#LR__0332
04688                 | LR__0313
04688     90 FA 05 F6 | 	mov	result1, #144
0468c     8C 00 90 FD | 	jmp	#LR__0332
04690                 | LR__0314
04690     8D FA 05 F6 | 	mov	result1, #141
04694     84 00 90 FD | 	jmp	#LR__0332
04698                 | LR__0315
04698     8C FA 05 F6 | 	mov	result1, #140
0469c     7C 00 90 FD | 	jmp	#LR__0332
046a0                 | LR__0316
046a0     91 FA 05 F6 | 	mov	result1, #145
046a4     74 00 90 FD | 	jmp	#LR__0332
046a8                 | LR__0317
046a8     8B FA 05 F6 | 	mov	result1, #139
046ac     6C 00 90 FD | 	jmp	#LR__0332
046b0                 | LR__0318
046b0     8F FA 05 F6 | 	mov	result1, #143
046b4     64 00 90 FD | 	jmp	#LR__0332
046b8                 | LR__0319
046b8     75 FA 05 F6 | 	mov	result1, #117
046bc     5C 00 90 FD | 	jmp	#LR__0332
046c0                 | LR__0320
046c0     75 FA 05 F6 | 	mov	result1, #117
046c4     54 00 90 FD | 	jmp	#LR__0332
046c8                 | LR__0321
046c8     6D FA 05 F6 | 	mov	result1, #109
046cc     4C 00 90 FD | 	jmp	#LR__0332
046d0                 | LR__0322
046d0     6D FA 05 F6 | 	mov	result1, #109
046d4     44 00 90 FD | 	jmp	#LR__0332
046d8                 | LR__0323
046d8     5B FA 05 F6 | 	mov	result1, #91
046dc     3C 00 90 FD | 	jmp	#LR__0332
046e0                 | LR__0324
046e0     56 FA 05 F6 | 	mov	result1, #86
046e4     34 00 90 FD | 	jmp	#LR__0332
046e8                 | LR__0325
046e8     70 FA 05 F6 | 	mov	result1, #112
046ec     2C 00 90 FD | 	jmp	#LR__0332
046f0                 | LR__0326
046f0     70 FA 05 F6 | 	mov	result1, #112
046f4     24 00 90 FD | 	jmp	#LR__0332
046f8                 | LR__0327
046f8     57 FA 05 F6 | 	mov	result1, #87
046fc     1C 00 90 FD | 	jmp	#LR__0332
04700                 | LR__0328
04700     57 FA 05 F6 | 	mov	result1, #87
04704     14 00 90 FD | 	jmp	#LR__0332
04708                 | LR__0329
04708     77 FA 05 F6 | 	mov	result1, #119
0470c     0C 00 90 FD | 	jmp	#LR__0332
04710                 | LR__0330
04710     78 FA 05 F6 | 	mov	result1, #120
04714     04 00 90 FD | 	jmp	#LR__0332
04718                 | LR__0331
04718     00 FA 05 F6 | 	mov	result1, #0
0471c                 | LR__0332
0471c     A7 F0 03 F6 | 	mov	ptra, fp
04720     B2 00 A0 FD | 	call	#popregs_
04724                 | _iscommand_ret
04724     2D 00 64 FD | 	ret
04728                 | 
04728                 | ' 
04728                 | ' function isfunction(s as string) as ubyte
04728                 | _isfunction
04728     01 4A 05 F6 | 	mov	COUNT_, #1
0472c     A8 00 A0 FD | 	call	#pushregs_
04730                 | ' 
04730                 | ' select case s
04730     09 1F 02 F6 | 	mov	local01, arg01
04734     5E 01 00 FF 
04738     E6 15 06 F6 | 	mov	arg02, ##@LR__4803
0473c     0F 13 02 F6 | 	mov	arg01, local01
04740     30 7D B1 FD | 	call	#__system___string_cmp
04744     00 FA 0D F2 | 	cmp	result1, #0 wz
04748     D4 02 90 AD |  if_e	jmp	#LR__0340
0474c     5E 01 00 FF 
04750     EA 15 06 F6 | 	mov	arg02, ##@LR__4804
04754     0F 13 02 F6 | 	mov	arg01, local01
04758     18 7D B1 FD | 	call	#__system___string_cmp
0475c     00 FA 0D F2 | 	cmp	result1, #0 wz
04760     C4 02 90 AD |  if_e	jmp	#LR__0341
04764     5E 01 00 FF 
04768     EF 15 06 F6 | 	mov	arg02, ##@LR__4805
0476c     0F 13 02 F6 | 	mov	arg01, local01
04770     00 7D B1 FD | 	call	#__system___string_cmp
04774     00 FA 0D F2 | 	cmp	result1, #0 wz
04778     B4 02 90 AD |  if_e	jmp	#LR__0342
0477c     5E 01 00 FF 
04780     F3 15 06 F6 | 	mov	arg02, ##@LR__4806
04784     0F 13 02 F6 | 	mov	arg01, local01
04788     E8 7C B1 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     A4 02 90 AD |  if_e	jmp	#LR__0343
04794     5E 01 00 FF 
04798     F8 15 06 F6 | 	mov	arg02, ##@LR__4807
0479c     0F 13 02 F6 | 	mov	arg01, local01
047a0     D0 7C B1 FD | 	call	#__system___string_cmp
047a4     00 FA 0D F2 | 	cmp	result1, #0 wz
047a8     94 02 90 AD |  if_e	jmp	#LR__0344
047ac     5E 01 00 FF 
047b0     FF 15 06 F6 | 	mov	arg02, ##@LR__4808
047b4     0F 13 02 F6 | 	mov	arg01, local01
047b8     B8 7C B1 FD | 	call	#__system___string_cmp
047bc     00 FA 0D F2 | 	cmp	result1, #0 wz
047c0     84 02 90 AD |  if_e	jmp	#LR__0345
047c4     5F 01 00 FF 
047c8     04 14 06 F6 | 	mov	arg02, ##@LR__4809
047cc     0F 13 02 F6 | 	mov	arg01, local01
047d0     A0 7C B1 FD | 	call	#__system___string_cmp
047d4     00 FA 0D F2 | 	cmp	result1, #0 wz
047d8     74 02 90 AD |  if_e	jmp	#LR__0346
047dc     5F 01 00 FF 
047e0     08 14 06 F6 | 	mov	arg02, ##@LR__4810
047e4     0F 13 02 F6 | 	mov	arg01, local01
047e8     88 7C B1 FD | 	call	#__system___string_cmp
047ec     00 FA 0D F2 | 	cmp	result1, #0 wz
047f0     64 02 90 AD |  if_e	jmp	#LR__0347
047f4     5F 01 00 FF 
047f8     0C 14 06 F6 | 	mov	arg02, ##@LR__4811
047fc     0F 13 02 F6 | 	mov	arg01, local01
04800     70 7C B1 FD | 	call	#__system___string_cmp
04804     00 FA 0D F2 | 	cmp	result1, #0 wz
04808     54 02 90 AD |  if_e	jmp	#LR__0348
0480c     5F 01 00 FF 
04810     12 14 06 F6 | 	mov	arg02, ##@LR__4812
04814     0F 13 02 F6 | 	mov	arg01, local01
04818     58 7C B1 FD | 	call	#__system___string_cmp
0481c     00 FA 0D F2 | 	cmp	result1, #0 wz
04820     44 02 90 AD |  if_e	jmp	#LR__0349
04824     5F 01 00 FF 
04828     16 14 06 F6 | 	mov	arg02, ##@LR__4813
0482c     0F 13 02 F6 | 	mov	arg01, local01
04830     40 7C B1 FD | 	call	#__system___string_cmp
04834     00 FA 0D F2 | 	cmp	result1, #0 wz
04838     34 02 90 AD |  if_e	jmp	#LR__0350
0483c     5F 01 00 FF 
04840     1F 14 06 F6 | 	mov	arg02, ##@LR__4814
04844     0F 13 02 F6 | 	mov	arg01, local01
04848     28 7C B1 FD | 	call	#__system___string_cmp
0484c     00 FA 0D F2 | 	cmp	result1, #0 wz
04850     24 02 90 AD |  if_e	jmp	#LR__0351
04854     5F 01 00 FF 
04858     23 14 06 F6 | 	mov	arg02, ##@LR__4815
0485c     0F 13 02 F6 | 	mov	arg01, local01
04860     10 7C B1 FD | 	call	#__system___string_cmp
04864     00 FA 0D F2 | 	cmp	result1, #0 wz
04868     14 02 90 AD |  if_e	jmp	#LR__0352
0486c     5F 01 00 FF 
04870     31 14 06 F6 | 	mov	arg02, ##@LR__4816
04874     0F 13 02 F6 | 	mov	arg01, local01
04878     F8 7B B1 FD | 	call	#__system___string_cmp
0487c     00 FA 0D F2 | 	cmp	result1, #0 wz
04880     04 02 90 AD |  if_e	jmp	#LR__0353
04884     5F 01 00 FF 
04888     3E 14 06 F6 | 	mov	arg02, ##@LR__4817
0488c     0F 13 02 F6 | 	mov	arg01, local01
04890     E0 7B B1 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     F4 01 90 AD |  if_e	jmp	#LR__0354
0489c     5F 01 00 FF 
048a0     46 14 06 F6 | 	mov	arg02, ##@LR__4818
048a4     0F 13 02 F6 | 	mov	arg01, local01
048a8     C8 7B B1 FD | 	call	#__system___string_cmp
048ac     00 FA 0D F2 | 	cmp	result1, #0 wz
048b0     E4 01 90 AD |  if_e	jmp	#LR__0355
048b4     5F 01 00 FF 
048b8     4D 14 06 F6 | 	mov	arg02, ##@LR__4819
048bc     0F 13 02 F6 | 	mov	arg01, local01
048c0     B0 7B B1 FD | 	call	#__system___string_cmp
048c4     00 FA 0D F2 | 	cmp	result1, #0 wz
048c8     D4 01 90 AD |  if_e	jmp	#LR__0356
048cc     5F 01 00 FF 
048d0     53 14 06 F6 | 	mov	arg02, ##@LR__4820
048d4     0F 13 02 F6 | 	mov	arg01, local01
048d8     98 7B B1 FD | 	call	#__system___string_cmp
048dc     00 FA 0D F2 | 	cmp	result1, #0 wz
048e0     C4 01 90 AD |  if_e	jmp	#LR__0357
048e4     5F 01 00 FF 
048e8     5A 14 06 F6 | 	mov	arg02, ##@LR__4821
048ec     0F 13 02 F6 | 	mov	arg01, local01
048f0     80 7B B1 FD | 	call	#__system___string_cmp
048f4     00 FA 0D F2 | 	cmp	result1, #0 wz
048f8     B4 01 90 AD |  if_e	jmp	#LR__0358
048fc     5F 01 00 FF 
04900     61 14 06 F6 | 	mov	arg02, ##@LR__4822
04904     0F 13 02 F6 | 	mov	arg01, local01
04908     68 7B B1 FD | 	call	#__system___string_cmp
0490c     00 FA 0D F2 | 	cmp	result1, #0 wz
04910     A4 01 90 AD |  if_e	jmp	#LR__0359
04914     5F 01 00 FF 
04918     68 14 06 F6 | 	mov	arg02, ##@LR__4823
0491c     0F 13 02 F6 | 	mov	arg01, local01
04920     50 7B B1 FD | 	call	#__system___string_cmp
04924     00 FA 0D F2 | 	cmp	result1, #0 wz
04928     94 01 90 AD |  if_e	jmp	#LR__0360
0492c     5F 01 00 FF 
04930     6F 14 06 F6 | 	mov	arg02, ##@LR__4824
04934     0F 13 02 F6 | 	mov	arg01, local01
04938     38 7B B1 FD | 	call	#__system___string_cmp
0493c     00 FA 0D F2 | 	cmp	result1, #0 wz
04940     84 01 90 AD |  if_e	jmp	#LR__0361
04944     5F 01 00 FF 
04948     74 14 06 F6 | 	mov	arg02, ##@LR__4825
0494c     0F 13 02 F6 | 	mov	arg01, local01
04950     20 7B B1 FD | 	call	#__system___string_cmp
04954     00 FA 0D F2 | 	cmp	result1, #0 wz
04958     74 01 90 AD |  if_e	jmp	#LR__0362
0495c     5F 01 00 FF 
04960     7C 14 06 F6 | 	mov	arg02, ##@LR__4826
04964     0F 13 02 F6 | 	mov	arg01, local01
04968     08 7B B1 FD | 	call	#__system___string_cmp
0496c     00 FA 0D F2 | 	cmp	result1, #0 wz
04970     64 01 90 AD |  if_e	jmp	#LR__0363
04974     5F 01 00 FF 
04978     82 14 06 F6 | 	mov	arg02, ##@LR__4827
0497c     0F 13 02 F6 | 	mov	arg01, local01
04980     F0 7A B1 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     54 01 90 AD |  if_e	jmp	#LR__0364
0498c     5F 01 00 FF 
04990     88 14 06 F6 | 	mov	arg02, ##@LR__4828
04994     0F 13 02 F6 | 	mov	arg01, local01
04998     D8 7A B1 FD | 	call	#__system___string_cmp
0499c     00 FA 0D F2 | 	cmp	result1, #0 wz
049a0     44 01 90 AD |  if_e	jmp	#LR__0365
049a4     5F 01 00 FF 
049a8     8C 14 06 F6 | 	mov	arg02, ##@LR__4829
049ac     0F 13 02 F6 | 	mov	arg01, local01
049b0     C0 7A B1 FD | 	call	#__system___string_cmp
049b4     00 FA 0D F2 | 	cmp	result1, #0 wz
049b8     34 01 90 AD |  if_e	jmp	#LR__0366
049bc     5F 01 00 FF 
049c0     90 14 06 F6 | 	mov	arg02, ##@LR__4830
049c4     0F 13 02 F6 | 	mov	arg01, local01
049c8     A8 7A B1 FD | 	call	#__system___string_cmp
049cc     00 FA 0D F2 | 	cmp	result1, #0 wz
049d0     24 01 90 AD |  if_e	jmp	#LR__0367
049d4     5F 01 00 FF 
049d8     94 14 06 F6 | 	mov	arg02, ##@LR__4831
049dc     0F 13 02 F6 | 	mov	arg01, local01
049e0     90 7A B1 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     14 01 90 AD |  if_e	jmp	#LR__0368
049ec     5F 01 00 FF 
049f0     9A 14 06 F6 | 	mov	arg02, ##@LR__4832
049f4     0F 13 02 F6 | 	mov	arg01, local01
049f8     78 7A B1 FD | 	call	#__system___string_cmp
049fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04a00     04 01 90 AD |  if_e	jmp	#LR__0369
04a04     5F 01 00 FF 
04a08     A0 14 06 F6 | 	mov	arg02, ##@LR__4833
04a0c     0F 13 02 F6 | 	mov	arg01, local01
04a10     60 7A B1 FD | 	call	#__system___string_cmp
04a14     00 FA 0D F2 | 	cmp	result1, #0 wz
04a18     F4 00 90 AD |  if_e	jmp	#LR__0370
04a1c     F8 00 90 FD | 	jmp	#LR__0371
04a20                 | LR__0340
04a20     9E FA 05 F6 | 	mov	result1, #158
04a24     F4 00 90 FD | 	jmp	#LR__0372
04a28                 | LR__0341
04a28     85 FA 05 F6 | 	mov	result1, #133
04a2c     EC 00 90 FD | 	jmp	#LR__0372
04a30                 | LR__0342
04a30     9B FA 05 F6 | 	mov	result1, #155
04a34     E4 00 90 FD | 	jmp	#LR__0372
04a38                 | LR__0343
04a38     9B FA 05 F6 | 	mov	result1, #155
04a3c     DC 00 90 FD | 	jmp	#LR__0372
04a40                 | LR__0344
04a40     9B FA 05 F6 | 	mov	result1, #155
04a44     D4 00 90 FD | 	jmp	#LR__0372
04a48                 | LR__0345
04a48     84 FA 05 F6 | 	mov	result1, #132
04a4c     CC 00 90 FD | 	jmp	#LR__0372
04a50                 | LR__0346
04a50     86 FA 05 F6 | 	mov	result1, #134
04a54     C4 00 90 FD | 	jmp	#LR__0372
04a58                 | LR__0347
04a58     82 FA 05 F6 | 	mov	result1, #130
04a5c     BC 00 90 FD | 	jmp	#LR__0372
04a60                 | LR__0348
04a60     99 FA 05 F6 | 	mov	result1, #153
04a64     B4 00 90 FD | 	jmp	#LR__0372
04a68                 | LR__0349
04a68     9C FA 05 F6 | 	mov	result1, #156
04a6c     AC 00 90 FD | 	jmp	#LR__0372
04a70                 | LR__0350
04a70     6F FA 05 F6 | 	mov	result1, #111
04a74     A4 00 90 FD | 	jmp	#LR__0372
04a78                 | LR__0351
04a78     6F FA 05 F6 | 	mov	result1, #111
04a7c     9C 00 90 FD | 	jmp	#LR__0372
04a80                 | LR__0352
04a80     93 FA 05 F6 | 	mov	result1, #147
04a84     94 00 90 FD | 	jmp	#LR__0372
04a88                 | LR__0353
04a88     94 FA 05 F6 | 	mov	result1, #148
04a8c     8C 00 90 FD | 	jmp	#LR__0372
04a90                 | LR__0354
04a90     62 FA 05 F6 | 	mov	result1, #98
04a94     84 00 90 FD | 	jmp	#LR__0372
04a98                 | LR__0355
04a98     9D FA 05 F6 | 	mov	result1, #157
04a9c     7C 00 90 FD | 	jmp	#LR__0372
04aa0                 | LR__0356
04aa0     9A FA 05 F6 | 	mov	result1, #154
04aa4     74 00 90 FD | 	jmp	#LR__0372
04aa8                 | LR__0357
04aa8     66 FA 05 F6 | 	mov	result1, #102
04aac     6C 00 90 FD | 	jmp	#LR__0372
04ab0                 | LR__0358
04ab0     67 FA 05 F6 | 	mov	result1, #103
04ab4     64 00 90 FD | 	jmp	#LR__0372
04ab8                 | LR__0359
04ab8     64 FA 05 F6 | 	mov	result1, #100
04abc     5C 00 90 FD | 	jmp	#LR__0372
04ac0                 | LR__0360
04ac0     65 FA 05 F6 | 	mov	result1, #101
04ac4     54 00 90 FD | 	jmp	#LR__0372
04ac8                 | LR__0361
04ac8     98 FA 05 F6 | 	mov	result1, #152
04acc     4C 00 90 FD | 	jmp	#LR__0372
04ad0                 | LR__0362
04ad0     7B FA 05 F6 | 	mov	result1, #123
04ad4     44 00 90 FD | 	jmp	#LR__0372
04ad8                 | LR__0363
04ad8     76 FA 05 F6 | 	mov	result1, #118
04adc     3C 00 90 FD | 	jmp	#LR__0372
04ae0                 | LR__0364
04ae0     7A FA 05 F6 | 	mov	result1, #122
04ae4     34 00 90 FD | 	jmp	#LR__0372
04ae8                 | LR__0365
04ae8     54 FA 05 F6 | 	mov	result1, #84
04aec     2C 00 90 FD | 	jmp	#LR__0372
04af0                 | LR__0366
04af0     6B FA 05 F6 | 	mov	result1, #107
04af4     24 00 90 FD | 	jmp	#LR__0372
04af8                 | LR__0367
04af8     87 FA 05 F6 | 	mov	result1, #135
04afc     1C 00 90 FD | 	jmp	#LR__0372
04b00                 | LR__0368
04b00     6A FA 05 F6 | 	mov	result1, #106
04b04     14 00 90 FD | 	jmp	#LR__0372
04b08                 | LR__0369
04b08     6E FA 05 F6 | 	mov	result1, #110
04b0c     0C 00 90 FD | 	jmp	#LR__0372
04b10                 | LR__0370
04b10     83 FA 05 F6 | 	mov	result1, #131
04b14     04 00 90 FD | 	jmp	#LR__0372
04b18                 | LR__0371
04b18     00 FA 05 F6 | 	mov	result1, #0
04b1c                 | LR__0372
04b1c     A7 F0 03 F6 | 	mov	ptra, fp
04b20     B2 00 A0 FD | 	call	#popregs_
04b24                 | _isfunction_ret
04b24     2D 00 64 FD | 	ret
04b28                 | 
04b28                 | ' 
04b28                 | ' function isname(s as string) as boolean
04b28                 | _isname
04b28     0D 4A 05 F6 | 	mov	COUNT_, #13
04b2c     A8 00 A0 FD | 	call	#pushregs_
04b30     09 1F 02 F6 | 	mov	local01, arg01
04b34     09 21 02 F6 | 	mov	local02, arg01
04b38     97 06 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
04b3c                 | LR__0380
04b3c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04b40     01 20 06 51 |  if_ne	add	local02, #1
04b44     F4 FF 9F 5D |  if_ne	jmp	#LR__0380
04b48                 | LR__0381
04b48     09 21 82 F1 | 	sub	local02, arg01
04b4c     10 FB 01 F6 | 	mov	result1, local02
04b50     FD 22 0A F6 | 	mov	local03, result1 wz
04b54     00 FA 05 A6 |  if_e	mov	result1, #0
04b58     34 02 90 AD |  if_e	jmp	#LR__0393
04b5c     0F 13 02 F6 | 	mov	arg01, local01
04b60     01 14 06 F6 | 	mov	arg02, #1
04b64     01 16 06 F6 | 	mov	arg03, #1
04b68     3C 9A B1 FD | 	call	#__system__Mid_S
04b6c     FD 24 02 F6 | 	mov	local04, result1
04b70                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04b70     5F 01 00 FF 
04b74     A4 14 06 F6 | 	mov	arg02, ##@LR__4834
04b78     12 13 02 F6 | 	mov	arg01, local04
04b7c     F4 78 B1 FD | 	call	#__system___string_cmp
04b80     00 FA 55 F2 | 	cmps	result1, #0 wc
04b84     18 00 90 CD |  if_b	jmp	#LR__0382
04b88     5F 01 00 FF 
04b8c     A6 14 06 F6 | 	mov	arg02, ##@LR__4835
04b90     12 13 02 F6 | 	mov	arg01, local04
04b94     DC 78 B1 FD | 	call	#__system___string_cmp
04b98     01 FA 55 F2 | 	cmps	result1, #1 wc
04b9c     1C 00 90 CD |  if_b	jmp	#LR__0383
04ba0                 | LR__0382
04ba0     5F 01 00 FF 
04ba4     A8 14 06 F6 | 	mov	arg02, ##@LR__4836
04ba8     12 13 02 F6 | 	mov	arg01, local04
04bac     C4 78 B1 FD | 	call	#__system___string_cmp
04bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb4     00 FA 05 56 |  if_ne	mov	result1, #0
04bb8     D4 01 90 5D |  if_ne	jmp	#LR__0393
04bbc                 | LR__0383
04bbc                 | ' if l>2 then 
04bbc     03 22 56 F2 | 	cmps	local03, #3 wc
04bc0     C8 01 90 CD |  if_b	jmp	#LR__0392
04bc4                 | '   for i=2 to l
04bc4     02 26 06 F6 | 	mov	local05, #2
04bc8     11 29 02 F6 | 	mov	local06, local03
04bcc     01 28 06 F1 | 	add	local06, #1
04bd0                 | LR__0384
04bd0     14 27 52 F2 | 	cmps	local05, local06 wc
04bd4     B4 01 90 3D |  if_ae	jmp	#LR__0391
04bd8     0F 13 02 F6 | 	mov	arg01, local01
04bdc     13 15 02 F6 | 	mov	arg02, local05
04be0     01 16 06 F6 | 	mov	arg03, #1
04be4     C0 99 B1 FD | 	call	#__system__Mid_S
04be8     FD 24 02 F6 | 	mov	local04, result1
04bec                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04bec     11 27 52 F2 | 	cmps	local05, local03 wc
04bf0     9C 00 90 3D |  if_ae	jmp	#LR__0387
04bf4     5F 01 00 FF 
04bf8     AA 14 06 F6 | 	mov	arg02, ##@LR__4837
04bfc     12 13 02 F6 | 	mov	arg01, local04
04c00     70 78 B1 FD | 	call	#__system___string_cmp
04c04     00 FA 55 F2 | 	cmps	result1, #0 wc
04c08     18 00 90 CD |  if_b	jmp	#LR__0385
04c0c     5F 01 00 FF 
04c10     AC 14 06 F6 | 	mov	arg02, ##@LR__4838
04c14     12 13 02 F6 | 	mov	arg01, local04
04c18     58 78 B1 FD | 	call	#__system___string_cmp
04c1c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c20     6C 00 90 CD |  if_b	jmp	#LR__0387
04c24                 | LR__0385
04c24     5F 01 00 FF 
04c28     AE 14 06 F6 | 	mov	arg02, ##@LR__4839
04c2c     12 13 02 F6 | 	mov	arg01, local04
04c30     40 78 B1 FD | 	call	#__system___string_cmp
04c34     00 FA 55 F2 | 	cmps	result1, #0 wc
04c38     18 00 90 CD |  if_b	jmp	#LR__0386
04c3c     5F 01 00 FF 
04c40     B0 14 06 F6 | 	mov	arg02, ##@LR__4840
04c44     12 13 02 F6 | 	mov	arg01, local04
04c48     28 78 B1 FD | 	call	#__system___string_cmp
04c4c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c50     3C 00 90 CD |  if_b	jmp	#LR__0387
04c54                 | LR__0386
04c54     5F 01 00 FF 
04c58     B2 2A 06 F6 | 	mov	local07, ##@LR__4841
04c5c     12 13 02 F6 | 	mov	arg01, local04
04c60     15 15 02 F6 | 	mov	arg02, local07
04c64     0C 78 B1 FD | 	call	#__system___string_cmp
04c68     00 FA 0D F2 | 	cmp	result1, #0 wz
04c6c     20 00 90 AD |  if_e	jmp	#LR__0387
04c70     5F 01 00 FF 
04c74     B4 2C 06 F6 | 	mov	local08, ##@LR__4842
04c78     12 13 02 F6 | 	mov	arg01, local04
04c7c     16 15 02 F6 | 	mov	arg02, local08
04c80     F0 77 B1 FD | 	call	#__system___string_cmp
04c84     FD 2E 0A F6 | 	mov	local09, result1 wz
04c88     00 FA 05 56 |  if_ne	mov	result1, #0
04c8c     00 01 90 5D |  if_ne	jmp	#LR__0393
04c90                 | LR__0387
04c90                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04c90     11 27 0A F2 | 	cmp	local05, local03 wz
04c94     EC 00 90 5D |  if_ne	jmp	#LR__0390
04c98     5F 01 00 FF 
04c9c     B6 30 06 F6 | 	mov	local10, ##@LR__4843
04ca0     12 13 02 F6 | 	mov	arg01, local04
04ca4     18 15 02 F6 | 	mov	arg02, local10
04ca8     C8 77 B1 FD | 	call	#__system___string_cmp
04cac     FD 32 02 F6 | 	mov	local11, result1
04cb0     00 32 56 F2 | 	cmps	local11, #0 wc
04cb4     1C 00 90 CD |  if_b	jmp	#LR__0388
04cb8     5F 01 00 FF 
04cbc     B8 14 06 F6 | 	mov	arg02, ##@LR__4844
04cc0     12 13 02 F6 | 	mov	arg01, local04
04cc4     AC 77 B1 FD | 	call	#__system___string_cmp
04cc8     FD 30 02 F6 | 	mov	local10, result1
04ccc     01 30 56 F2 | 	cmps	local10, #1 wc
04cd0     B0 00 90 CD |  if_b	jmp	#LR__0390
04cd4                 | LR__0388
04cd4     5F 01 00 FF 
04cd8     BA 14 06 F6 | 	mov	arg02, ##@LR__4845
04cdc     12 13 02 F6 | 	mov	arg01, local04
04ce0     90 77 B1 FD | 	call	#__system___string_cmp
04ce4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ce8     1C 00 90 CD |  if_b	jmp	#LR__0389
04cec     5F 01 00 FF 
04cf0     BC 2E 06 F6 | 	mov	local09, ##@LR__4846
04cf4     12 13 02 F6 | 	mov	arg01, local04
04cf8     17 15 02 F6 | 	mov	arg02, local09
04cfc     74 77 B1 FD | 	call	#__system___string_cmp
04d00     01 FA 55 F2 | 	cmps	result1, #1 wc
04d04     7C 00 90 CD |  if_b	jmp	#LR__0390
04d08                 | LR__0389
04d08     5F 01 00 FF 
04d0c     BE 2E 06 F6 | 	mov	local09, ##@LR__4847
04d10     12 13 02 F6 | 	mov	arg01, local04
04d14     17 15 02 F6 | 	mov	arg02, local09
04d18     58 77 B1 FD | 	call	#__system___string_cmp
04d1c     00 FA 4D F2 | 	cmps	result1, #0 wz
04d20     60 00 90 AD |  if_e	jmp	#LR__0390
04d24     5F 01 00 FF 
04d28     C0 2C 06 F6 | 	mov	local08, ##@LR__4848
04d2c     12 13 02 F6 | 	mov	arg01, local04
04d30     16 15 02 F6 | 	mov	arg02, local08
04d34     3C 77 B1 FD | 	call	#__system___string_cmp
04d38     FD 2E 0A F6 | 	mov	local09, result1 wz
04d3c     44 00 90 AD |  if_e	jmp	#LR__0390
04d40     5F 01 00 FF 
04d44     C2 34 06 F6 | 	mov	local12, ##@LR__4849
04d48     1A 2D 02 F6 | 	mov	local08, local12
04d4c     12 13 02 F6 | 	mov	arg01, local04
04d50     16 15 02 F6 | 	mov	arg02, local08
04d54     1C 77 B1 FD | 	call	#__system___string_cmp
04d58     FD 2A 0A F6 | 	mov	local07, result1 wz
04d5c     24 00 90 AD |  if_e	jmp	#LR__0390
04d60     5F 01 00 FF 
04d64     C4 36 06 F6 | 	mov	local13, ##@LR__4850
04d68     1B 35 02 F6 | 	mov	local12, local13
04d6c     12 13 02 F6 | 	mov	arg01, local04
04d70     1A 15 02 F6 | 	mov	arg02, local12
04d74     FC 76 B1 FD | 	call	#__system___string_cmp
04d78     FD 2C 0A F6 | 	mov	local08, result1 wz
04d7c     00 FA 05 56 |  if_ne	mov	result1, #0
04d80     0C 00 90 5D |  if_ne	jmp	#LR__0393
04d84                 | LR__0390
04d84     01 26 06 F1 | 	add	local05, #1
04d88     44 FE 9F FD | 	jmp	#LR__0384
04d8c                 | LR__0391
04d8c                 | LR__0392
04d8c                 | ' return true
04d8c     01 FA 65 F6 | 	neg	result1, #1
04d90                 | LR__0393
04d90     A7 F0 03 F6 | 	mov	ptra, fp
04d94     B2 00 A0 FD | 	call	#popregs_
04d98                 | _isname_ret
04d98     2D 00 64 FD | 	ret
04d9c                 | 
04d9c                 | ' 
04d9c                 | ' function isnum(s as string) as boolean
04d9c                 | _isnum
04d9c     0D 4A 05 F6 | 	mov	COUNT_, #13
04da0     A8 00 A0 FD | 	call	#pushregs_
04da4     09 1F 02 F6 | 	mov	local01, arg01
04da8     00 20 06 F6 | 	mov	local02, #0
04dac     00 22 06 F6 | 	mov	local03, #0
04db0     0F 13 02 F6 | 	mov	arg01, local01
04db4     09 25 02 F6 | 	mov	local04, arg01
04db8     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
04dbc                 | LR__0400
04dbc     12 FB C9 FA | 	rdbyte	result1, local04 wz
04dc0     01 24 06 51 |  if_ne	add	local04, #1
04dc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
04dc8                 | LR__0401
04dc8     09 25 82 F1 | 	sub	local04, arg01
04dcc     12 FB 01 F6 | 	mov	result1, local04
04dd0     FD 26 0A F6 | 	mov	local05, result1 wz
04dd4     00 FA 05 A6 |  if_e	mov	result1, #0
04dd8     8C 02 90 AD |  if_e	jmp	#LR__0412
04ddc     0F 13 02 F6 | 	mov	arg01, local01
04de0     01 14 06 F6 | 	mov	arg02, #1
04de4     01 16 06 F6 | 	mov	arg03, #1
04de8     BC 97 B1 FD | 	call	#__system__Mid_S
04dec     FD 28 02 F6 | 	mov	local06, result1
04df0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04df0     5F 01 00 FF 
04df4     C6 14 06 F6 | 	mov	arg02, ##@LR__4851
04df8     14 13 02 F6 | 	mov	arg01, local06
04dfc     74 76 B1 FD | 	call	#__system___string_cmp
04e00     00 FA 55 F2 | 	cmps	result1, #0 wc
04e04     18 00 90 CD |  if_b	jmp	#LR__0402
04e08     5F 01 00 FF 
04e0c     C8 14 06 F6 | 	mov	arg02, ##@LR__4852
04e10     14 13 02 F6 | 	mov	arg01, local06
04e14     5C 76 B1 FD | 	call	#__system___string_cmp
04e18     01 FA 55 F2 | 	cmps	result1, #1 wc
04e1c     78 00 90 CD |  if_b	jmp	#LR__0403
04e20                 | LR__0402
04e20     5F 01 00 FF 
04e24     CA 14 06 F6 | 	mov	arg02, ##@LR__4853
04e28     14 13 02 F6 | 	mov	arg01, local06
04e2c     44 76 B1 FD | 	call	#__system___string_cmp
04e30     00 FA 0D F2 | 	cmp	result1, #0 wz
04e34     60 00 90 AD |  if_e	jmp	#LR__0403
04e38     5F 01 00 FF 
04e3c     CC 2A 06 F6 | 	mov	local07, ##@LR__4854
04e40     14 13 02 F6 | 	mov	arg01, local06
04e44     15 15 02 F6 | 	mov	arg02, local07
04e48     28 76 B1 FD | 	call	#__system___string_cmp
04e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e50     44 00 90 AD |  if_e	jmp	#LR__0403
04e54     5F 01 00 FF 
04e58     CE 2C 06 F6 | 	mov	local08, ##@LR__4855
04e5c     16 2B 02 F6 | 	mov	local07, local08
04e60     14 13 02 F6 | 	mov	arg01, local06
04e64     15 15 02 F6 | 	mov	arg02, local07
04e68     08 76 B1 FD | 	call	#__system___string_cmp
04e6c     00 FA 4D F2 | 	cmps	result1, #0 wz
04e70     24 00 90 AD |  if_e	jmp	#LR__0403
04e74     5F 01 00 FF 
04e78     D0 2E 06 F6 | 	mov	local09, ##@LR__4856
04e7c     17 2D 02 F6 | 	mov	local08, local09
04e80     14 13 02 F6 | 	mov	arg01, local06
04e84     16 15 02 F6 | 	mov	arg02, local08
04e88     E8 75 B1 FD | 	call	#__system___string_cmp
04e8c     FD 2A 0A F6 | 	mov	local07, result1 wz
04e90     00 FA 05 56 |  if_ne	mov	result1, #0
04e94     D0 01 90 5D |  if_ne	jmp	#LR__0412
04e98                 | LR__0403
04e98                 | ' if m$="." then ds=1
04e98     5F 01 00 FF 
04e9c     D2 14 06 F6 | 	mov	arg02, ##@LR__4857
04ea0     14 13 02 F6 | 	mov	arg01, local06
04ea4     CC 75 B1 FD | 	call	#__system___string_cmp
04ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eac     01 20 06 A6 |  if_e	mov	local02, #1
04eb0                 | ' if l>1 then 
04eb0     02 26 56 F2 | 	cmps	local05, #2 wc
04eb4     AC 01 90 CD |  if_b	jmp	#LR__0411
04eb8                 | '   for i=2 to l
04eb8     02 30 06 F6 | 	mov	local10, #2
04ebc     13 33 02 F6 | 	mov	local11, local05
04ec0     01 32 06 F1 | 	add	local11, #1
04ec4                 | LR__0404
04ec4     19 31 52 F2 | 	cmps	local10, local11 wc
04ec8     98 01 90 3D |  if_ae	jmp	#LR__0410
04ecc     0F 13 02 F6 | 	mov	arg01, local01
04ed0     18 15 02 F6 | 	mov	arg02, local10
04ed4     01 16 06 F6 | 	mov	arg03, #1
04ed8     CC 96 B1 FD | 	call	#__system__Mid_S
04edc     FD 28 02 F6 | 	mov	local06, result1
04ee0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04ee0     5F 01 00 FF 
04ee4     D4 14 06 F6 | 	mov	arg02, ##@LR__4858
04ee8     14 13 02 F6 | 	mov	arg01, local06
04eec     84 75 B1 FD | 	call	#__system___string_cmp
04ef0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ef4     18 00 90 CD |  if_b	jmp	#LR__0405
04ef8     5F 01 00 FF 
04efc     D6 14 06 F6 | 	mov	arg02, ##@LR__4859
04f00     14 13 02 F6 | 	mov	arg01, local06
04f04     6C 75 B1 FD | 	call	#__system___string_cmp
04f08     01 FA 55 F2 | 	cmps	result1, #1 wc
04f0c     98 00 90 CD |  if_b	jmp	#LR__0406
04f10                 | LR__0405
04f10     5F 01 00 FF 
04f14     D8 14 06 F6 | 	mov	arg02, ##@LR__4860
04f18     14 13 02 F6 | 	mov	arg01, local06
04f1c     54 75 B1 FD | 	call	#__system___string_cmp
04f20     00 FA 0D F2 | 	cmp	result1, #0 wz
04f24     80 00 90 AD |  if_e	jmp	#LR__0406
04f28     5F 01 00 FF 
04f2c     DA 2A 06 F6 | 	mov	local07, ##@LR__4861
04f30     14 13 02 F6 | 	mov	arg01, local06
04f34     15 15 02 F6 | 	mov	arg02, local07
04f38     38 75 B1 FD | 	call	#__system___string_cmp
04f3c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f40     64 00 90 AD |  if_e	jmp	#LR__0406
04f44     5F 01 00 FF 
04f48     DC 2C 06 F6 | 	mov	local08, ##@LR__4862
04f4c     16 2B 02 F6 | 	mov	local07, local08
04f50     14 13 02 F6 | 	mov	arg01, local06
04f54     15 15 02 F6 | 	mov	arg02, local07
04f58     18 75 B1 FD | 	call	#__system___string_cmp
04f5c     FD 34 0A F6 | 	mov	local12, result1 wz
04f60     44 00 90 AD |  if_e	jmp	#LR__0406
04f64     5F 01 00 FF 
04f68     DE 2E 06 F6 | 	mov	local09, ##@LR__4863
04f6c     17 2D 02 F6 | 	mov	local08, local09
04f70     14 13 02 F6 | 	mov	arg01, local06
04f74     16 15 02 F6 | 	mov	arg02, local08
04f78     F8 74 B1 FD | 	call	#__system___string_cmp
04f7c     FD 2A 0A F6 | 	mov	local07, result1 wz
04f80     24 00 90 AD |  if_e	jmp	#LR__0406
04f84     5F 01 00 FF 
04f88     E0 36 06 F6 | 	mov	local13, ##@LR__4864
04f8c     1B 2F 02 F6 | 	mov	local09, local13
04f90     14 13 02 F6 | 	mov	arg01, local06
04f94     17 15 02 F6 | 	mov	arg02, local09
04f98     D8 74 B1 FD | 	call	#__system___string_cmp
04f9c     FD 2C 0A F6 | 	mov	local08, result1 wz
04fa0     00 FA 05 56 |  if_ne	mov	result1, #0
04fa4     C0 00 90 5D |  if_ne	jmp	#LR__0412
04fa8                 | LR__0406
04fa8                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04fa8     5F 01 00 FF 
04fac     E2 14 06 F6 | 	mov	arg02, ##@LR__4865
04fb0     14 13 02 F6 | 	mov	arg01, local06
04fb4     BC 74 B1 FD | 	call	#__system___string_cmp
04fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fbc     38 00 90 5D |  if_ne	jmp	#LR__0407
04fc0     18 15 02 F6 | 	mov	arg02, local10
04fc4     01 14 86 F1 | 	sub	arg02, #1
04fc8     0F 13 02 F6 | 	mov	arg01, local01
04fcc     01 16 06 F6 | 	mov	arg03, #1
04fd0     D4 95 B1 FD | 	call	#__system__Mid_S
04fd4     FD 12 02 F6 | 	mov	arg01, result1
04fd8     C4 97 B1 FD | 	call	#__system__LCase_S
04fdc     FD 12 02 F6 | 	mov	arg01, result1
04fe0     5F 01 00 FF 
04fe4     E4 14 06 F6 | 	mov	arg02, ##@LR__4866
04fe8     88 74 B1 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     00 FA 05 56 |  if_ne	mov	result1, #0
04ff4     70 00 90 5D |  if_ne	jmp	#LR__0412
04ff8                 | LR__0407
04ff8                 | '     if m$="." then ds+=1: if ds>1 then return false
04ff8     5F 01 00 FF 
04ffc     E6 14 06 F6 | 	mov	arg02, ##@LR__4867
05000     14 13 02 F6 | 	mov	arg01, local06
05004     6C 74 B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     01 20 06 A1 |  if_e	add	local02, #1
05010     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05014     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05018     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0412
0501c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0501c     5F 01 00 FF 
05020     E8 14 06 F6 | 	mov	arg02, ##@LR__4868
05024     14 13 02 F6 | 	mov	arg01, local06
05028     48 74 B1 FD | 	call	#__system___string_cmp
0502c     00 FA 4D F2 | 	cmps	result1, #0 wz
05030     18 00 90 AD |  if_e	jmp	#LR__0408
05034     5F 01 00 FF 
05038     EA 14 06 F6 | 	mov	arg02, ##@LR__4869
0503c     14 13 02 F6 | 	mov	arg01, local06
05040     30 74 B1 FD | 	call	#__system___string_cmp
05044     00 FA 4D F2 | 	cmps	result1, #0 wz
05048     10 00 90 5D |  if_ne	jmp	#LR__0409
0504c                 | LR__0408
0504c     01 22 06 F1 | 	add	local03, #1
05050     02 22 56 F2 | 	cmps	local03, #2 wc
05054     00 FA 05 36 |  if_ae	mov	result1, #0
05058     0C 00 90 3D |  if_ae	jmp	#LR__0412
0505c                 | LR__0409
0505c     01 30 06 F1 | 	add	local10, #1
05060     60 FE 9F FD | 	jmp	#LR__0404
05064                 | LR__0410
05064                 | LR__0411
05064                 | ' return true
05064     01 FA 65 F6 | 	neg	result1, #1
05068                 | LR__0412
05068     A7 F0 03 F6 | 	mov	ptra, fp
0506c     B2 00 A0 FD | 	call	#popregs_
05070                 | _isnum_ret
05070     2D 00 64 FD | 	ret
05074                 | 
05074                 | '   
05074                 | ' function isint(s as string) as boolean
05074                 | _isint
05074     05 4A 05 F6 | 	mov	COUNT_, #5
05078     A8 00 A0 FD | 	call	#pushregs_
0507c     09 1F 02 F6 | 	mov	local01, arg01
05080     09 21 02 F6 | 	mov	local02, arg01
05084     97 06 48 FB | 	callpa	#(@LR__0421-@LR__0420)>>2,fcache_load_ptr_
05088                 | LR__0420
05088     10 FB C9 FA | 	rdbyte	result1, local02 wz
0508c     01 20 06 51 |  if_ne	add	local02, #1
05090     F4 FF 9F 5D |  if_ne	jmp	#LR__0420
05094                 | LR__0421
05094     09 21 82 F1 | 	sub	local02, arg01
05098     10 FB 01 F6 | 	mov	result1, local02
0509c     FD 20 0A F6 | 	mov	local02, result1 wz
050a0     00 FA 05 A6 |  if_e	mov	result1, #0
050a4     18 01 90 AD |  if_e	jmp	#LR__0429
050a8     0F 13 02 F6 | 	mov	arg01, local01
050ac     01 14 06 F6 | 	mov	arg02, #1
050b0     01 16 06 F6 | 	mov	arg03, #1
050b4     F0 94 B1 FD | 	call	#__system__Mid_S
050b8     FD 22 02 F6 | 	mov	local03, result1
050bc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
050bc     5F 01 00 FF 
050c0     EC 14 06 F6 | 	mov	arg02, ##@LR__4870
050c4     11 13 02 F6 | 	mov	arg01, local03
050c8     A8 73 B1 FD | 	call	#__system___string_cmp
050cc     00 FA 55 F2 | 	cmps	result1, #0 wc
050d0     18 00 90 CD |  if_b	jmp	#LR__0422
050d4     5F 01 00 FF 
050d8     EE 14 06 F6 | 	mov	arg02, ##@LR__4871
050dc     11 13 02 F6 | 	mov	arg01, local03
050e0     90 73 B1 FD | 	call	#__system___string_cmp
050e4     01 FA 55 F2 | 	cmps	result1, #1 wc
050e8     4C 00 90 CD |  if_b	jmp	#LR__0423
050ec                 | LR__0422
050ec     5F 01 00 FF 
050f0     F0 14 06 F6 | 	mov	arg02, ##@LR__4872
050f4     11 13 02 F6 | 	mov	arg01, local03
050f8     78 73 B1 FD | 	call	#__system___string_cmp
050fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05100     34 00 90 AD |  if_e	jmp	#LR__0423
05104     5F 01 00 FF 
05108     F2 14 06 F6 | 	mov	arg02, ##@LR__4873
0510c     11 13 02 F6 | 	mov	arg01, local03
05110     60 73 B1 FD | 	call	#__system___string_cmp
05114     00 FA 0D F2 | 	cmp	result1, #0 wz
05118     1C 00 90 AD |  if_e	jmp	#LR__0423
0511c     5F 01 00 FF 
05120     F4 14 06 F6 | 	mov	arg02, ##@LR__4874
05124     11 13 02 F6 | 	mov	arg01, local03
05128     48 73 B1 FD | 	call	#__system___string_cmp
0512c     00 FA 0D F2 | 	cmp	result1, #0 wz
05130     00 FA 05 56 |  if_ne	mov	result1, #0
05134     88 00 90 5D |  if_ne	jmp	#LR__0429
05138                 | LR__0423
05138                 | ' 
05138                 | ' if l>1 then 
05138     02 20 56 F2 | 	cmps	local02, #2 wc
0513c     7C 00 90 CD |  if_b	jmp	#LR__0428
05140                 | '   for i=2 to l
05140     02 24 06 F6 | 	mov	local04, #2
05144     10 27 02 F6 | 	mov	local05, local02
05148     01 26 06 F1 | 	add	local05, #1
0514c                 | LR__0424
0514c     13 25 52 F2 | 	cmps	local04, local05 wc
05150     68 00 90 3D |  if_ae	jmp	#LR__0427
05154     0F 13 02 F6 | 	mov	arg01, local01
05158     12 15 02 F6 | 	mov	arg02, local04
0515c     01 16 06 F6 | 	mov	arg03, #1
05160     44 94 B1 FD | 	call	#__system__Mid_S
05164     FD 22 02 F6 | 	mov	local03, result1
05168                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05168     5F 01 00 FF 
0516c     F6 14 06 F6 | 	mov	arg02, ##@LR__4875
05170     11 13 02 F6 | 	mov	arg01, local03
05174     FC 72 B1 FD | 	call	#__system___string_cmp
05178     00 FA 55 F2 | 	cmps	result1, #0 wc
0517c     18 00 90 CD |  if_b	jmp	#LR__0425
05180     5F 01 00 FF 
05184     F8 14 06 F6 | 	mov	arg02, ##@LR__4876
05188     11 13 02 F6 | 	mov	arg01, local03
0518c     E4 72 B1 FD | 	call	#__system___string_cmp
05190     01 FA 55 F2 | 	cmps	result1, #1 wc
05194     1C 00 90 CD |  if_b	jmp	#LR__0426
05198                 | LR__0425
05198     5F 01 00 FF 
0519c     FA 14 06 F6 | 	mov	arg02, ##@LR__4877
051a0     11 13 02 F6 | 	mov	arg01, local03
051a4     CC 72 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     00 FA 05 56 |  if_ne	mov	result1, #0
051b0     0C 00 90 5D |  if_ne	jmp	#LR__0429
051b4                 | LR__0426
051b4     01 24 06 F1 | 	add	local04, #1
051b8     90 FF 9F FD | 	jmp	#LR__0424
051bc                 | LR__0427
051bc                 | LR__0428
051bc                 | ' return true
051bc     01 FA 65 F6 | 	neg	result1, #1
051c0                 | LR__0429
051c0     A7 F0 03 F6 | 	mov	ptra, fp
051c4     B2 00 A0 FD | 	call	#popregs_
051c8                 | _isint_ret
051c8     2D 00 64 FD | 	ret
051cc                 | 
051cc                 | ' 
051cc                 | ' function isdec(s as string) as boolean
051cc                 | _isdec
051cc     05 4A 05 F6 | 	mov	COUNT_, #5
051d0     A8 00 A0 FD | 	call	#pushregs_
051d4     09 1F 02 F6 | 	mov	local01, arg01
051d8     09 21 02 F6 | 	mov	local02, arg01
051dc     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
051e0                 | LR__0430
051e0     10 FB C9 FA | 	rdbyte	result1, local02 wz
051e4     01 20 06 51 |  if_ne	add	local02, #1
051e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
051ec                 | LR__0431
051ec     09 21 82 F1 | 	sub	local02, arg01
051f0     10 FB 01 F6 | 	mov	result1, local02
051f4     FD 20 0A F6 | 	mov	local02, result1 wz
051f8     00 FA 05 A6 |  if_e	mov	result1, #0
051fc     80 00 90 AD |  if_e	jmp	#LR__0436
05200                 | ' for i=1 to l
05200     01 22 06 F6 | 	mov	local03, #1
05204     10 25 02 F6 | 	mov	local04, local02
05208     01 24 06 F1 | 	add	local04, #1
0520c                 | LR__0432
0520c     12 23 52 F2 | 	cmps	local03, local04 wc
05210     68 00 90 3D |  if_ae	jmp	#LR__0435
05214     0F 13 02 F6 | 	mov	arg01, local01
05218     11 15 02 F6 | 	mov	arg02, local03
0521c     01 16 06 F6 | 	mov	arg03, #1
05220     84 93 B1 FD | 	call	#__system__Mid_S
05224     FD 26 02 F6 | 	mov	local05, result1
05228                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05228     5F 01 00 FF 
0522c     FC 14 06 F6 | 	mov	arg02, ##@LR__4878
05230     13 13 02 F6 | 	mov	arg01, local05
05234     3C 72 B1 FD | 	call	#__system___string_cmp
05238     00 FA 55 F2 | 	cmps	result1, #0 wc
0523c     18 00 90 CD |  if_b	jmp	#LR__0433
05240     5F 01 00 FF 
05244     FE 14 06 F6 | 	mov	arg02, ##@LR__4879
05248     13 13 02 F6 | 	mov	arg01, local05
0524c     24 72 B1 FD | 	call	#__system___string_cmp
05250     01 FA 55 F2 | 	cmps	result1, #1 wc
05254     1C 00 90 CD |  if_b	jmp	#LR__0434
05258                 | LR__0433
05258     5F 01 00 FF 
0525c     00 15 06 F6 | 	mov	arg02, ##@LR__4880
05260     13 13 02 F6 | 	mov	arg01, local05
05264     0C 72 B1 FD | 	call	#__system___string_cmp
05268     00 FA 0D F2 | 	cmp	result1, #0 wz
0526c     00 FA 05 56 |  if_ne	mov	result1, #0
05270     0C 00 90 5D |  if_ne	jmp	#LR__0436
05274                 | LR__0434
05274     01 22 06 F1 | 	add	local03, #1
05278     90 FF 9F FD | 	jmp	#LR__0432
0527c                 | LR__0435
0527c                 | ' return true
0527c     01 FA 65 F6 | 	neg	result1, #1
05280                 | LR__0436
05280     A7 F0 03 F6 | 	mov	ptra, fp
05284     B2 00 A0 FD | 	call	#popregs_
05288                 | _isdec_ret
05288     2D 00 64 FD | 	ret
0528c                 | 
0528c                 | ' 
0528c                 | ' function isstring(s as string) as boolean
0528c                 | _isstring
0528c     01 4A 05 F6 | 	mov	COUNT_, #1
05290     A8 00 A0 FD | 	call	#pushregs_
05294                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
05294     09 1F 02 F6 | 	mov	local01, arg01
05298     01 14 06 F6 | 	mov	arg02, #1
0529c     F0 91 B1 FD | 	call	#__system__Left_S
052a0     FD 12 02 F6 | 	mov	arg01, result1
052a4     5F 01 00 FF 
052a8     02 15 06 F6 | 	mov	arg02, ##@LR__4881
052ac     C4 71 B1 FD | 	call	#__system___string_cmp
052b0     00 FA 4D F2 | 	cmps	result1, #0 wz
052b4     28 00 90 5D |  if_ne	jmp	#LR__0440
052b8     0F 13 02 F6 | 	mov	arg01, local01
052bc     01 14 06 F6 | 	mov	arg02, #1
052c0     54 92 B1 FD | 	call	#__system__Right_S
052c4     FD 12 02 F6 | 	mov	arg01, result1
052c8     5F 01 00 FF 
052cc     04 15 06 F6 | 	mov	arg02, ##@LR__4882
052d0     A0 71 B1 FD | 	call	#__system___string_cmp
052d4     00 FA 4D F2 | 	cmps	result1, #0 wz
052d8     01 FA 65 A6 |  if_e	neg	result1, #1
052dc     04 00 90 AD |  if_e	jmp	#LR__0441
052e0                 | LR__0440
052e0     00 FA 05 F6 | 	mov	result1, #0
052e4                 | LR__0441
052e4     A7 F0 03 F6 | 	mov	ptra, fp
052e8     B2 00 A0 FD | 	call	#popregs_
052ec                 | _isstring_ret
052ec     2D 00 64 FD | 	ret
052f0                 | 
052f0                 | ' 
052f0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
052f0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052f0                 | ' 
052f0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052f0                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
052f0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052f0                 | ' 
052f0                 | ' '----- delete a line from a program
052f0                 | ' 
052f0                 | ' function deleteline(aline as ulong) as integer
052f0                 | _deleteline
052f0     03 4A 05 F6 | 	mov	COUNT_, #3
052f4     A8 00 A0 FD | 	call	#pushregs_
052f8     2C F0 07 F1 | 	add	ptra, #44
052fc     04 4E 05 F1 | 	add	fp, #4
05300     A7 12 62 FC | 	wrlong	arg01, fp
05304     6A 00 00 FF 
05308     68 E4 05 F1 | 	add	objptr, ##54376
0530c     F2 1E 02 FB | 	rdlong	local01, objptr
05310     0C 4E 05 F1 | 	add	fp, #12
05314     A7 1E 62 FC | 	wrlong	local01, fp
05318     10 4E 85 F1 | 	sub	fp, #16
0531c                 | ' 
0531c                 | ' 
0531c                 | ' searchptr=programstart
0531c                 | ' 
0531c                 | ' do
0531c     5E 00 00 FF 
05320     A8 E5 85 F1 | 	sub	objptr, ##48552
05324                 | LR__0450
05324     14 4E 05 F1 | 	add	fp, #20
05328     A7 12 02 F6 | 	mov	arg01, fp
0532c     04 4E 85 F1 | 	sub	fp, #4
05330     A7 14 02 FB | 	rdlong	arg02, fp
05334     10 4E 85 F1 | 	sub	fp, #16
05338     18 16 06 F6 | 	mov	arg03, #24
0533c     08 65 B1 FD | 	call	#_psram_spin2_read1
05340     10 4E 05 F1 | 	add	fp, #16
05344     A7 1E 02 FB | 	rdlong	local01, fp
05348     08 4E 85 F1 | 	sub	fp, #8
0534c     A7 1E 62 FC | 	wrlong	local01, fp
05350     20 4E 05 F1 | 	add	fp, #32
05354     A7 1E 02 FB | 	rdlong	local01, fp
05358     18 4E 85 F1 | 	sub	fp, #24
0535c     A7 1E 62 FC | 	wrlong	local01, fp
05360     04 4E 05 F1 | 	add	fp, #4
05364     A7 1E 02 FB | 	rdlong	local01, fp
05368     10 4E 85 F1 | 	sub	fp, #16
0536c     A7 16 02 FB | 	rdlong	arg03, fp
05370     04 4E 85 F1 | 	sub	fp, #4
05374     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05378     28 4E 05 C1 |  if_b	add	fp, #40
0537c     A7 20 02 CB |  if_b	rdlong	local02, fp
05380     28 4E 85 C1 |  if_b	sub	fp, #40
05384     FF FF 3F CF 
05388     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0538c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0450
05390     0B 00 00 FF 
05394     C0 E4 85 F1 | 	sub	objptr, ##5824
05398                 | ' 
05398                 | ' 
05398                 | ' if header(0)<>aline then return -1
05398     14 4E 05 F1 | 	add	fp, #20
0539c     A7 1E 02 FB | 	rdlong	local01, fp
053a0     10 4E 85 F1 | 	sub	fp, #16
053a4     A7 22 02 FB | 	rdlong	local03, fp
053a8     04 4E 85 F1 | 	sub	fp, #4
053ac     11 1F 0A F2 | 	cmp	local01, local03 wz
053b0     01 FA 65 56 |  if_ne	neg	result1, #1
053b4     C8 02 90 5D |  if_ne	jmp	#LR__0456
053b8     08 4E 05 F1 | 	add	fp, #8
053bc     A7 12 02 FB | 	rdlong	arg01, fp
053c0     08 4E 85 F1 | 	sub	fp, #8
053c4     01 14 66 F6 | 	neg	arg02, #1
053c8     FC 39 B1 FD | 	call	#_pslpoke
053cc                 | ' 
053cc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
053cc                 | ' 
053cc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
053cc     28 4E 05 F1 | 	add	fp, #40
053d0     A7 1E 02 FB | 	rdlong	local01, fp
053d4     28 4E 85 F1 | 	sub	fp, #40
053d8     FF FF 3F FF 
053dc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
053e0     24 4E 05 A1 |  if_e	add	fp, #36
053e4     A7 22 02 AB |  if_e	rdlong	local03, fp
053e8     24 4E 85 A1 |  if_e	sub	fp, #36
053ec     FF FF 7F AF 
053f0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
053f4     78 00 90 5D |  if_ne	jmp	#LR__0451
053f8     6A 00 00 FF 
053fc     68 E4 05 F1 | 	add	objptr, ##54376
05400     F2 00 68 FC | 	wrlong	#0, objptr
05404     07 00 00 FF 
05408     28 E4 85 F1 | 	sub	objptr, ##3624
0540c     F2 00 68 FC | 	wrlong	#0, objptr
05410     07 00 00 FF 
05414     2C E4 05 F1 | 	add	objptr, ##3628
05418     F2 00 68 FC | 	wrlong	#0, objptr
0541c     04 E4 05 F1 | 	add	objptr, #4
05420     FF FF FF FF 
05424     F2 FE 6B FC | 	wrlong	##-1, objptr
05428     6A 00 00 FF 
0542c     70 E4 85 F1 | 	sub	objptr, ##54384
05430     00 12 06 F6 | 	mov	arg01, #0
05434     01 14 66 F6 | 	neg	arg02, #1
05438     8C 39 B1 FD | 	call	#_pslpoke
0543c     10 12 06 F6 | 	mov	arg01, #16
05440     01 14 66 F6 | 	neg	arg02, #1
05444     80 39 B1 FD | 	call	#_pslpoke
05448     14 12 06 F6 | 	mov	arg01, #20
0544c     1E 14 CE F9 | 	bmask	arg02, #30
05450     74 39 B1 FD | 	call	#_pslpoke
05454     79 00 00 FF 
05458     94 E5 05 F1 | 	add	objptr, ##62356
0545c     F2 00 68 FC | 	wrlong	#0, objptr
05460     04 E4 05 F1 | 	add	objptr, #4
05464     F2 00 68 FC | 	wrlong	#0, objptr
05468     79 00 00 FF 
0546c     98 E5 85 F1 | 	sub	objptr, ##62360
05470                 | LR__0451
05470                 | ' 
05470                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05470     28 4E 05 F1 | 	add	fp, #40
05474     A7 1E 02 FB | 	rdlong	local01, fp
05478     28 4E 85 F1 | 	sub	fp, #40
0547c     FF FF 3F FF 
05480     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05484     74 00 90 5D |  if_ne	jmp	#LR__0452
05488     24 4E 05 F1 | 	add	fp, #36
0548c     A7 22 02 FB | 	rdlong	local03, fp
05490     24 4E 85 F1 | 	sub	fp, #36
05494     FF FF 7F FF 
05498     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0549c     5C 00 90 AD |  if_e	jmp	#LR__0452
054a0     24 4E 05 F1 | 	add	fp, #36
054a4     A7 12 02 FB | 	rdlong	arg01, fp
054a8     24 4E 85 F1 | 	sub	fp, #36
054ac     14 12 06 F1 | 	add	arg01, #20
054b0     1E 14 CE F9 | 	bmask	arg02, #30
054b4     10 39 B1 FD | 	call	#_pslpoke
054b8     24 4E 05 F1 | 	add	fp, #36
054bc     A7 1E 02 FB | 	rdlong	local01, fp
054c0     6A 00 00 FF 
054c4     70 E4 05 F1 | 	add	objptr, ##54384
054c8     F2 1E 62 FC | 	wrlong	local01, objptr
054cc     6A 00 00 FF 
054d0     70 E4 85 F1 | 	sub	objptr, ##54384
054d4     A7 12 02 FB | 	rdlong	arg01, fp
054d8     24 4E 85 F1 | 	sub	fp, #36
054dc     18 3A B1 FD | 	call	#_pslpeek
054e0     6A 00 00 FF 
054e4     6C E4 05 F1 | 	add	objptr, ##54380
054e8     F2 FA 61 FC | 	wrlong	result1, objptr
054ec     6A 00 00 FF 
054f0     6C E4 85 F1 | 	sub	objptr, ##54380
054f4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
054f4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
054f4                 | '   lastline=pslpeek(header(4))
054f4                 | '   return 0
054f4     00 FA 05 F6 | 	mov	result1, #0
054f8     84 01 90 FD | 	jmp	#LR__0456
054fc                 | LR__0452
054fc                 | ' 
054fc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
054fc     28 4E 05 F1 | 	add	fp, #40
05500     A7 1E 02 FB | 	rdlong	local01, fp
05504     28 4E 85 F1 | 	sub	fp, #40
05508     FF FF 3F FF 
0550c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05510     58 00 90 AD |  if_e	jmp	#LR__0453
05514     24 4E 05 F1 | 	add	fp, #36
05518     A7 22 02 FB | 	rdlong	local03, fp
0551c     24 4E 85 F1 | 	sub	fp, #36
05520     FF FF 7F FF 
05524     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05528     40 00 90 5D |  if_ne	jmp	#LR__0453
0552c     28 4E 05 F1 | 	add	fp, #40
05530     A7 12 02 FB | 	rdlong	arg01, fp
05534     28 4E 85 F1 | 	sub	fp, #40
05538     10 12 06 F1 | 	add	arg01, #16
0553c     01 14 66 F6 | 	neg	arg02, #1
05540     84 38 B1 FD | 	call	#_pslpoke
05544     28 4E 05 F1 | 	add	fp, #40
05548     A7 1E 02 FB | 	rdlong	local01, fp
0554c     28 4E 85 F1 | 	sub	fp, #40
05550     6A 00 00 FF 
05554     68 E4 05 F1 | 	add	objptr, ##54376
05558     F2 1E 62 FC | 	wrlong	local01, objptr
0555c     6A 00 00 FF 
05560     68 E4 85 F1 | 	sub	objptr, ##54376
05564                 | ' '   print "deleted first line"
05564                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05564                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05564                 | '   return 0
05564     00 FA 05 F6 | 	mov	result1, #0
05568     14 01 90 FD | 	jmp	#LR__0456
0556c                 | LR__0453
0556c                 | ' 
0556c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0556c     28 4E 05 F1 | 	add	fp, #40
05570     A7 1E 02 FB | 	rdlong	local01, fp
05574     28 4E 85 F1 | 	sub	fp, #40
05578     FF FF 3F FF 
0557c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05580     24 4E 05 51 |  if_ne	add	fp, #36
05584     A7 22 02 5B |  if_ne	rdlong	local03, fp
05588     24 4E 85 51 |  if_ne	sub	fp, #36
0558c     FF FF 7F 5F 
05590     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05594     40 00 90 AD |  if_e	jmp	#LR__0454
05598     28 4E 05 F1 | 	add	fp, #40
0559c     A7 12 02 FB | 	rdlong	arg01, fp
055a0     10 12 06 F1 | 	add	arg01, #16
055a4     04 4E 85 F1 | 	sub	fp, #4
055a8     A7 14 02 FB | 	rdlong	arg02, fp
055ac     24 4E 85 F1 | 	sub	fp, #36
055b0     14 38 B1 FD | 	call	#_pslpoke
055b4     24 4E 05 F1 | 	add	fp, #36
055b8     A7 12 02 FB | 	rdlong	arg01, fp
055bc     14 12 06 F1 | 	add	arg01, #20
055c0     04 4E 05 F1 | 	add	fp, #4
055c4     A7 14 02 FB | 	rdlong	arg02, fp
055c8     28 4E 85 F1 | 	sub	fp, #40
055cc     F8 37 B1 FD | 	call	#_pslpoke
055d0                 | '    pslpoke(header(5)+16,header(4))  
055d0                 | '    pslpoke(header(4)+20, header(5))
055d0                 | '    return 0
055d0     00 FA 05 F6 | 	mov	result1, #0
055d4     A8 00 90 FD | 	jmp	#LR__0456
055d8                 | LR__0454
055d8     10 4E 05 F1 | 	add	fp, #16
055dc     A7 1E 02 FB | 	rdlong	local01, fp
055e0     08 4E 85 F1 | 	sub	fp, #8
055e4     A7 1E 62 FC | 	wrlong	local01, fp
055e8     6A 00 00 FF 
055ec     68 E4 05 F1 | 	add	objptr, ##54376
055f0     F2 1E 02 FB | 	rdlong	local01, objptr
055f4     08 4E 05 F1 | 	add	fp, #8
055f8     A7 1E 62 FC | 	wrlong	local01, fp
055fc     10 4E 85 F1 | 	sub	fp, #16
05600                 | ' 
05600                 | ' 
05600                 | ' 
05600                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05600                 | ' 
05600                 | ' lineptr2=searchptr
05600                 | ' searchptr=programstart
05600                 | ' 
05600                 | ' do
05600     5E 00 00 FF 
05604     A8 E5 85 F1 | 	sub	objptr, ##48552
05608                 | LR__0455
05608     14 4E 05 F1 | 	add	fp, #20
0560c     A7 12 02 F6 | 	mov	arg01, fp
05610     04 4E 85 F1 | 	sub	fp, #4
05614     A7 14 02 FB | 	rdlong	arg02, fp
05618     10 4E 85 F1 | 	sub	fp, #16
0561c     18 16 06 F6 | 	mov	arg03, #24
05620     24 62 B1 FD | 	call	#_psram_spin2_read1
05624     10 4E 05 F1 | 	add	fp, #16
05628     A7 1E 02 FB | 	rdlong	local01, fp
0562c     08 4E 85 F1 | 	sub	fp, #8
05630     A7 1E 62 FC | 	wrlong	local01, fp
05634     20 4E 05 F1 | 	add	fp, #32
05638     A7 1E 02 FB | 	rdlong	local01, fp
0563c     18 4E 85 F1 | 	sub	fp, #24
05640     A7 1E 62 FC | 	wrlong	local01, fp
05644     04 4E 05 F1 | 	add	fp, #4
05648     A7 1E 02 FB | 	rdlong	local01, fp
0564c     10 4E 85 F1 | 	sub	fp, #16
05650     A7 22 02 FB | 	rdlong	local03, fp
05654     04 4E 85 F1 | 	sub	fp, #4
05658     11 1F 12 F2 | 	cmp	local01, local03 wc
0565c     28 4E 05 C1 |  if_b	add	fp, #40
05660     A7 20 02 CB |  if_b	rdlong	local02, fp
05664     28 4E 85 C1 |  if_b	sub	fp, #40
05668     FF FF 3F CF 
0566c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05670     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0455
05674     0B 00 00 FF 
05678     C0 E4 85 F1 | 	sub	objptr, ##5824
0567c     00 FA 05 F6 | 	mov	result1, #0
05680                 | LR__0456
05680     A7 F0 03 F6 | 	mov	ptra, fp
05684     B2 00 A0 FD | 	call	#popregs_
05688                 | _deleteline_ret
05688     2D 00 64 FD | 	ret
0568c                 | 
0568c                 | ' 
0568c                 | ' sub save_line
0568c                 | _save_line
0568c     03 4A 05 F6 | 	mov	COUNT_, #3
05690     A8 00 A0 FD | 	call	#pushregs_
05694     6A 00 00 FF 
05698     60 E4 05 F1 | 	add	objptr, ##54368
0569c     F2 16 02 FB | 	rdlong	arg03, objptr
056a0     01 16 06 F1 | 	add	arg03, #1
056a4     05 00 00 FF 
056a8     18 E4 85 F1 | 	sub	objptr, ##2584
056ac     F2 14 02 FB | 	rdlong	arg02, objptr
056b0     0B 15 02 FD | 	qmul	arg02, arg03
056b4     0E 00 00 FF 
056b8     44 E4 85 F1 | 	sub	objptr, ##7236
056bc     F2 12 02 FB | 	rdlong	arg01, objptr
056c0     57 00 00 FF 
056c4     04 E4 85 F1 | 	sub	objptr, ##44548
056c8     09 1F 02 F6 | 	mov	local01, arg01
056cc     18 20 62 FD | 	getqx	local02
056d0     97 06 48 FB | 	callpa	#(@LR__0461-@LR__0460)>>2,fcache_load_ptr_
056d4                 | LR__0460
056d4     0F FB C9 FA | 	rdbyte	result1, local01 wz
056d8     01 1E 06 51 |  if_ne	add	local01, #1
056dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0460
056e0                 | LR__0461
056e0     09 1F 82 F1 | 	sub	local01, arg01
056e4     03 1E CE F7 | 	test	local01, #3 wz
056e8     02 1E 46 50 |  if_ne	shr	local01, #2
056ec     01 1E 06 51 |  if_ne	add	local01, #1
056f0     02 1E 66 50 |  if_ne	shl	local01, #2
056f4     10 23 02 F6 | 	mov	local03, local02
056f8     0F 23 02 F1 | 	add	local03, local01
056fc     63 00 00 FF 
05700     40 E4 05 F1 | 	add	objptr, ##50752
05704     F2 16 02 FB | 	rdlong	arg03, objptr
05708     10 17 02 F1 | 	add	arg03, local02
0570c     04 00 00 FF 
05710     28 E4 05 F1 | 	add	objptr, ##2088
05714     F2 16 62 FC | 	wrlong	arg03, objptr
05718     04 E4 05 F1 | 	add	objptr, #4
0571c     F2 1E 62 FC | 	wrlong	local01, objptr
05720     0C E4 85 F1 | 	sub	objptr, #12
05724     F2 12 02 F6 | 	mov	arg01, objptr
05728     04 00 00 FF 
0572c     20 E4 85 F1 | 	sub	objptr, ##2080
05730     F2 14 02 FB | 	rdlong	arg02, objptr
05734     10 17 02 F6 | 	mov	arg03, local02
05738     57 00 00 FF 
0573c     80 E5 85 F1 | 	sub	objptr, ##44928
05740     A0 61 B1 FD | 	call	#_psram_spin2_write
05744     4B 00 00 FF 
05748     44 E5 05 F1 | 	add	objptr, ##38724
0574c     F2 12 02 FB | 	rdlong	arg01, objptr
05750     0C 00 00 FF 
05754     3C E4 05 F1 | 	add	objptr, ##6204
05758     F2 14 02 FB | 	rdlong	arg02, objptr
0575c     10 15 02 F1 | 	add	arg02, local02
05760     0F 17 02 F6 | 	mov	arg03, local01
05764     57 00 00 FF 
05768     80 E5 85 F1 | 	sub	objptr, ##44928
0576c     74 61 B1 FD | 	call	#_psram_spin2_write
05770     57 00 00 FF 
05774     80 E5 05 F1 | 	add	objptr, ##44928
05778     F2 1E 02 FB | 	rdlong	local01, objptr
0577c     11 1F 02 F1 | 	add	local01, local03
05780     F2 1E 62 FC | 	wrlong	local01, objptr
05784     63 00 00 FF 
05788     40 E4 85 F1 | 	sub	objptr, ##50752
0578c     A7 F0 03 F6 | 	mov	ptra, fp
05790     B2 00 A0 FD | 	call	#popregs_
05794                 | _save_line_ret
05794     2D 00 64 FD | 	ret
05798                 | 
05798                 | ' 
05798                 | ' 
05798                 | ' function insertline(aline as ulong) as integer
05798                 | _insertline
05798     02 4A 05 F6 | 	mov	COUNT_, #2
0579c     A8 00 A0 FD | 	call	#pushregs_
057a0     28 F0 07 F1 | 	add	ptra, #40
057a4     04 4E 05 F1 | 	add	fp, #4
057a8     A7 12 62 FC | 	wrlong	arg01, fp
057ac     6A 00 00 FF 
057b0     68 E4 05 F1 | 	add	objptr, ##54376
057b4     F2 1E 02 FB | 	rdlong	local01, objptr
057b8     04 4E 05 F1 | 	add	fp, #4
057bc     A7 1E 62 FC | 	wrlong	local01, fp
057c0     08 4E 85 F1 | 	sub	fp, #8
057c4                 | ' 
057c4                 | ' do
057c4     5E 00 00 FF 
057c8     A8 E5 85 F1 | 	sub	objptr, ##48552
057cc                 | LR__0470
057cc     10 4E 05 F1 | 	add	fp, #16
057d0     A7 12 02 F6 | 	mov	arg01, fp
057d4     08 4E 85 F1 | 	sub	fp, #8
057d8     A7 14 02 FB | 	rdlong	arg02, fp
057dc     08 4E 85 F1 | 	sub	fp, #8
057e0     18 16 06 F6 | 	mov	arg03, #24
057e4     60 60 B1 FD | 	call	#_psram_spin2_read1
057e8     08 4E 05 F1 | 	add	fp, #8
057ec     A7 1E 02 FB | 	rdlong	local01, fp
057f0     04 4E 05 F1 | 	add	fp, #4
057f4     A7 1E 62 FC | 	wrlong	local01, fp
057f8     18 4E 05 F1 | 	add	fp, #24
057fc     A7 1E 02 FB | 	rdlong	local01, fp
05800     1C 4E 85 F1 | 	sub	fp, #28
05804     A7 1E 62 FC | 	wrlong	local01, fp
05808     08 4E 05 F1 | 	add	fp, #8
0580c     A7 1E 02 FB | 	rdlong	local01, fp
05810     0C 4E 85 F1 | 	sub	fp, #12
05814     A7 16 02 FB | 	rdlong	arg03, fp
05818     04 4E 85 F1 | 	sub	fp, #4
0581c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05820     24 4E 05 C1 |  if_b	add	fp, #36
05824     A7 20 02 CB |  if_b	rdlong	local02, fp
05828     24 4E 85 C1 |  if_b	sub	fp, #36
0582c     FF FF 3F CF 
05830     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05834     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0470
05838     0B 00 00 FF 
0583c     C0 E4 85 F1 | 	sub	objptr, ##5824
05840                 | ' 
05840                 | ' if header(0)=aline then return -1 ' delete it first
05840     10 4E 05 F1 | 	add	fp, #16
05844     A7 1E 02 FB | 	rdlong	local01, fp
05848     0C 4E 85 F1 | 	sub	fp, #12
0584c     A7 20 02 FB | 	rdlong	local02, fp
05850     04 4E 85 F1 | 	sub	fp, #4
05854     10 1F 0A F2 | 	cmp	local01, local02 wz
05858     01 FA 65 A6 |  if_e	neg	result1, #1
0585c     48 01 90 AD |  if_e	jmp	#LR__0473
05860                 | ' if header(0)<aline then return -2 ' end of program reached
05860     10 4E 05 F1 | 	add	fp, #16
05864     A7 1E 02 FB | 	rdlong	local01, fp
05868     0C 4E 85 F1 | 	sub	fp, #12
0586c     A7 16 02 FB | 	rdlong	arg03, fp
05870     04 4E 85 F1 | 	sub	fp, #4
05874     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05878     02 FA 65 C6 |  if_b	neg	result1, #2
0587c     28 01 90 CD |  if_b	jmp	#LR__0473
05880                 | ' 
05880                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05880     20 4E 05 F1 | 	add	fp, #32
05884     A7 1E 02 FB | 	rdlong	local01, fp
05888     20 4E 85 F1 | 	sub	fp, #32
0588c     FF FF 7F FF 
05890     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05894     78 00 90 5D |  if_ne	jmp	#LR__0471
05898     63 00 00 FF 
0589c     40 E4 05 F1 | 	add	objptr, ##50752
058a0     F2 1E 02 FB | 	rdlong	local01, objptr
058a4     07 00 00 FF 
058a8     28 E4 05 F1 | 	add	objptr, ##3624
058ac     F2 1E 62 FC | 	wrlong	local01, objptr
058b0     0C 4E 05 F1 | 	add	fp, #12
058b4     A7 12 02 FB | 	rdlong	arg01, fp
058b8     0C 4E 85 F1 | 	sub	fp, #12
058bc     10 12 06 F1 | 	add	arg01, #16
058c0     07 00 00 FF 
058c4     28 E4 85 F1 | 	sub	objptr, ##3624
058c8     F2 14 02 FB | 	rdlong	arg02, objptr
058cc     63 00 00 FF 
058d0     40 E4 85 F1 | 	sub	objptr, ##50752
058d4     F0 34 B1 FD | 	call	#_pslpoke
058d8     67 00 00 FF 
058dc     70 E4 05 F1 | 	add	objptr, ##52848
058e0     FF FF FF FF 
058e4     F2 FE 6B FC | 	wrlong	##-1, objptr
058e8     0C 4E 05 F1 | 	add	fp, #12
058ec     A7 1E 02 FB | 	rdlong	local01, fp
058f0     0C 4E 85 F1 | 	sub	fp, #12
058f4     04 E4 05 F1 | 	add	objptr, #4
058f8     F2 1E 62 FC | 	wrlong	local01, objptr
058fc     67 00 00 FF 
05900     74 E4 85 F1 | 	sub	objptr, ##52852
05904     84 FD BF FD | 	call	#_save_line
05908                 | '   programstart=programptr
05908                 | '   pslpoke(lineptr2+16,programptr)
05908                 | '   ucompiledline(4)=$FFFF_FFFF
05908                 | '   ucompiledline(5)=lineptr2
05908                 | '   save_line
05908                 | '   return 0
05908     00 FA 05 F6 | 	mov	result1, #0
0590c     98 00 90 FD | 	jmp	#LR__0473
05910                 | LR__0471
05910                 | ' 
05910                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05910     20 4E 05 F1 | 	add	fp, #32
05914     A7 1E 02 FB | 	rdlong	local01, fp
05918     20 4E 85 F1 | 	sub	fp, #32
0591c     FF FF 7F FF 
05920     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05924     7C 00 90 AD |  if_e	jmp	#LR__0472
05928     20 4E 05 F1 | 	add	fp, #32
0592c     A7 1E 02 FB | 	rdlong	local01, fp
05930     67 00 00 FF 
05934     70 E4 05 F1 | 	add	objptr, ##52848
05938     F2 1E 62 FC | 	wrlong	local01, objptr
0593c     14 4E 85 F1 | 	sub	fp, #20
05940     A7 1E 02 FB | 	rdlong	local01, fp
05944     04 E4 05 F1 | 	add	objptr, #4
05948     F2 1E 62 FC | 	wrlong	local01, objptr
0594c     A7 12 02 FB | 	rdlong	arg01, fp
05950     0C 4E 85 F1 | 	sub	fp, #12
05954     10 12 06 F1 | 	add	arg01, #16
05958     04 00 00 FF 
0595c     34 E4 85 F1 | 	sub	objptr, ##2100
05960     F2 14 02 FB | 	rdlong	arg02, objptr
05964     63 00 00 FF 
05968     40 E4 85 F1 | 	sub	objptr, ##50752
0596c     58 34 B1 FD | 	call	#_pslpoke
05970     20 4E 05 F1 | 	add	fp, #32
05974     A7 12 02 FB | 	rdlong	arg01, fp
05978     20 4E 85 F1 | 	sub	fp, #32
0597c     14 12 06 F1 | 	add	arg01, #20
05980     63 00 00 FF 
05984     40 E4 05 F1 | 	add	objptr, ##50752
05988     F2 14 02 FB | 	rdlong	arg02, objptr
0598c     63 00 00 FF 
05990     40 E4 85 F1 | 	sub	objptr, ##50752
05994     30 34 B1 FD | 	call	#_pslpoke
05998     F0 FC BF FD | 	call	#_save_line
0599c                 | '   ucompiledline(4)=header(4)
0599c                 | '   ucompiledline(5)=lineptr2
0599c                 | '   pslpoke(lineptr2+16,programptr)
0599c                 | '   pslpoke(header(4)+20,programptr)
0599c                 | '   save_line
0599c                 | '   return 0
0599c     00 FA 05 F6 | 	mov	result1, #0
059a0     04 00 90 FD | 	jmp	#LR__0473
059a4                 | LR__0472
059a4     00 FA 05 F6 | 	mov	result1, #0
059a8                 | LR__0473
059a8     A7 F0 03 F6 | 	mov	ptra, fp
059ac     B2 00 A0 FD | 	call	#popregs_
059b0                 | _insertline_ret
059b0     2D 00 64 FD | 	ret
059b4                 | 
059b4                 | ' 
059b4                 | ' sub add_line_at_end(aline) 
059b4                 | _add_line_at_end
059b4     6A 00 00 FF 
059b8     6C E4 05 F1 | 	add	objptr, ##54380
059bc     F2 12 62 FC | 	wrlong	arg01, objptr
059c0     04 E4 05 F1 | 	add	objptr, #4
059c4     F2 14 02 FB | 	rdlong	arg02, objptr
059c8     03 00 00 FF 
059cc     00 E4 85 F1 | 	sub	objptr, ##1536
059d0     F2 14 62 FC | 	wrlong	arg02, objptr
059d4     03 00 00 FF 
059d8     00 E4 05 F1 | 	add	objptr, ##1536
059dc     F2 12 02 FB | 	rdlong	arg01, objptr
059e0     14 12 06 F1 | 	add	arg01, #20
059e4     07 00 00 FF 
059e8     30 E4 85 F1 | 	sub	objptr, ##3632
059ec     F2 14 02 FB | 	rdlong	arg02, objptr
059f0     63 00 00 FF 
059f4     40 E4 85 F1 | 	sub	objptr, ##50752
059f8     CC 33 B1 FD | 	call	#_pslpoke
059fc     63 00 00 FF 
05a00     40 E4 05 F1 | 	add	objptr, ##50752
05a04     F2 14 02 FB | 	rdlong	arg02, objptr
05a08     07 00 00 FF 
05a0c     30 E4 05 F1 | 	add	objptr, ##3632
05a10     F2 14 62 FC | 	wrlong	arg02, objptr
05a14     02 00 00 FF 
05a18     FC E5 85 F1 | 	sub	objptr, ##1532
05a1c     FF FF BF FF 
05a20     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05a24                 | ' 
05a24                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05a24                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05a24     04 00 00 FF 
05a28     34 E4 85 F1 | 	sub	objptr, ##2100
05a2c     F2 14 0A FB | 	rdlong	arg02, objptr wz
05a30     63 00 00 FF 
05a34     40 E4 85 F1 | 	sub	objptr, ##50752
05a38     67 00 00 AF 
05a3c     70 E4 05 A1 |  if_e	add	objptr, ##52848
05a40     FF FF FF AF 
05a44     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05a48     67 00 00 AF 
05a4c     70 E4 85 A1 |  if_e	sub	objptr, ##52848
05a50     38 FC BF FD | 	call	#_save_line
05a54     63 00 00 FF 
05a58     40 E4 05 F1 | 	add	objptr, ##50752
05a5c     F2 12 02 FB | 	rdlong	arg01, objptr
05a60     63 00 00 FF 
05a64     40 E4 85 F1 | 	sub	objptr, ##50752
05a68     01 14 66 F6 | 	neg	arg02, #1
05a6c     58 33 B1 FD | 	call	#_pslpoke
05a70                 | _add_line_at_end_ret
05a70     2D 00 64 FD | 	ret
05a74                 | 
05a74                 | ' 
05a74                 | ' function compile_immediate(linetype as ulong) as integer
05a74                 | _compile_immediate
05a74     09 4A 05 F6 | 	mov	COUNT_, #9
05a78     A8 00 A0 FD | 	call	#pushregs_
05a7c                 | _compile_immediate_enter
05a7c     09 25 0A F6 | 	mov	local04, arg01 wz
05a80     00 26 06 F6 | 	mov	local05, #0
05a84     00 28 06 F6 | 	mov	local06, #0
05a88                 | ' 
05a88                 | ' ' linetype=cont+1, linetype=0 immediate
05a88                 | ' '  : 1: this is the first part of the line that will continue
05a88                 | ' ' 2 - this is the continuation of the line
05a88                 | ' ' 3 - this is the last continued line
05a88                 | ' ' 4 - this is the one and only part
05a88                 | ' 
05a88                 | ' err=0
05a88                 | ' cmd=0
05a88                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05a88     30 00 90 5D |  if_ne	jmp	#LR__0480
05a8c     54 00 00 FF 
05a90     F4 E5 05 F1 | 	add	objptr, ##43508
05a94     F2 28 02 FB | 	rdlong	local06, objptr
05a98     02 00 00 FF 
05a9c     34 E4 05 F1 | 	add	objptr, ##1076
05aa0     F2 02 68 FC | 	wrlong	#1, objptr
05aa4     00 2A 06 F6 | 	mov	local07, #0
05aa8     13 00 00 FF 
05aac     38 E4 05 F1 | 	add	objptr, ##9784
05ab0     F2 00 68 FC | 	wrlong	#0, objptr
05ab4     6A 00 00 FF 
05ab8     60 E4 85 F1 | 	sub	objptr, ##54368
05abc                 | LR__0480
05abc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05abc     02 24 0E F2 | 	cmp	local04, #2 wz
05ac0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05ac4     24 00 90 5D |  if_ne	jmp	#LR__0481
05ac8     54 00 00 FF 
05acc     F4 E5 05 F1 | 	add	objptr, ##43508
05ad0     F2 28 02 FB | 	rdlong	local06, objptr
05ad4     01 2A 06 F6 | 	mov	local07, #1
05ad8     02 00 00 FF 
05adc     34 E4 05 F1 | 	add	objptr, ##1076
05ae0     F2 02 68 FC | 	wrlong	#1, objptr
05ae4     57 00 00 FF 
05ae8     28 E4 85 F1 | 	sub	objptr, ##44584
05aec                 | LR__0481
05aec                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05aec     04 24 0E F2 | 	cmp	local04, #4 wz
05af0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05af4     30 00 90 5D |  if_ne	jmp	#LR__0482
05af8     54 00 00 FF 
05afc     FC E5 05 F1 | 	add	objptr, ##43516
05b00     F2 28 02 FB | 	rdlong	local06, objptr
05b04     02 2A 06 F6 | 	mov	local07, #2
05b08     02 00 00 FF 
05b0c     2C E4 05 F1 | 	add	objptr, ##1068
05b10     F2 04 68 FC | 	wrlong	#2, objptr
05b14     13 00 00 FF 
05b18     38 E4 05 F1 | 	add	objptr, ##9784
05b1c     F2 04 68 FC | 	wrlong	#2, objptr
05b20     6A 00 00 FF 
05b24     60 E4 85 F1 | 	sub	objptr, ##54368
05b28                 | LR__0482
05b28                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05b28     05 24 0E F2 | 	cmp	local04, #5 wz
05b2c     44 00 90 5D |  if_ne	jmp	#LR__0483
05b30     57 00 00 FF 
05b34     28 E4 05 F1 | 	add	objptr, ##44584
05b38     F2 FA 01 FB | 	rdlong	result1, objptr
05b3c     FD 2A 02 F6 | 	mov	local07, result1
05b40     03 2A 66 F0 | 	shl	local07, #3
05b44     02 00 00 FF 
05b48     38 E4 85 F1 | 	sub	objptr, ##1080
05b4c     F2 2A 02 F1 | 	add	local07, objptr
05b50     04 2A 06 F1 | 	add	local07, #4
05b54     15 29 02 FB | 	rdlong	local06, local07
05b58     FD 2A 02 F6 | 	mov	local07, result1
05b5c     01 2A 06 F1 | 	add	local07, #1
05b60     02 00 00 FF 
05b64     38 E4 05 F1 | 	add	objptr, ##1080
05b68     F2 2A 62 FC | 	wrlong	local07, objptr
05b6c     57 00 00 FF 
05b70     28 E4 85 F1 | 	sub	objptr, ##44584
05b74                 | LR__0483
05b74     00 2C 06 F6 | 	mov	local08, #0
05b78                 | ' vars=0
05b78                 | ' 'print  "In compile_immediate cmd=:", cmd
05b78                 | ' 451 select case cmd
05b78     5C 28 0E F2 | 	cmp	local06, #92 wz
05b7c     08 02 90 AD |  if_e	jmp	#LR__0484
05b80     47 28 0E F2 | 	cmp	local06, #71 wz
05b84     0C 02 90 AD |  if_e	jmp	#LR__0485
05b88     59 28 0E F2 | 	cmp	local06, #89 wz
05b8c     10 02 90 AD |  if_e	jmp	#LR__0486
05b90     45 28 0E F2 | 	cmp	local06, #69 wz
05b94     14 02 90 AD |  if_e	jmp	#LR__0487
05b98     69 28 0E F2 | 	cmp	local06, #105 wz
05b9c     18 02 90 AD |  if_e	jmp	#LR__0488
05ba0     40 28 0E F2 | 	cmp	local06, #64 wz
05ba4     84 04 90 AD |  if_e	jmp	#LR__0543
05ba8     49 28 0E F2 | 	cmp	local06, #73 wz
05bac     14 02 90 AD |  if_e	jmp	#LR__0489
05bb0     50 28 0E F2 | 	cmp	local06, #80 wz
05bb4     18 02 90 AD |  if_e	jmp	#LR__0490
05bb8     68 28 0E F2 | 	cmp	local06, #104 wz
05bbc     1C 02 90 AD |  if_e	jmp	#LR__0491
05bc0     74 28 0E F2 | 	cmp	local06, #116 wz
05bc4     20 02 90 AD |  if_e	jmp	#LR__0492
05bc8     73 28 0E F2 | 	cmp	local06, #115 wz
05bcc     24 02 90 AD |  if_e	jmp	#LR__0493
05bd0     6C 28 0E F2 | 	cmp	local06, #108 wz
05bd4     28 02 90 AD |  if_e	jmp	#LR__0494
05bd8     89 28 0E F2 | 	cmp	local06, #137 wz
05bdc     4C 04 90 AD |  if_e	jmp	#LR__0543
05be0     72 28 0E F2 | 	cmp	local06, #114 wz
05be4     24 02 90 AD |  if_e	jmp	#LR__0495
05be8     5D 28 0E F2 | 	cmp	local06, #93 wz
05bec     3C 04 90 AD |  if_e	jmp	#LR__0543
05bf0     96 28 0E F2 | 	cmp	local06, #150 wz
05bf4     1C 02 90 AD |  if_e	jmp	#LR__0496
05bf8     43 28 0E F2 | 	cmp	local06, #67 wz
05bfc     1C 02 90 AD |  if_e	jmp	#LR__0497
05c00     5A 28 0E F2 | 	cmp	local06, #90 wz
05c04     20 02 90 AD |  if_e	jmp	#LR__0498
05c08     4E 28 0E F2 | 	cmp	local06, #78 wz
05c0c     20 02 90 AD |  if_e	jmp	#LR__0499
05c10     46 28 0E F2 | 	cmp	local06, #70 wz
05c14     34 02 90 AD |  if_e	jmp	#LR__0501
05c18     71 28 0E F2 | 	cmp	local06, #113 wz
05c1c     38 02 90 AD |  if_e	jmp	#LR__0502
05c20     60 28 0E F2 | 	cmp	local06, #96 wz
05c24     3C 02 90 AD |  if_e	jmp	#LR__0503
05c28     4A 28 0E F2 | 	cmp	local06, #74 wz
05c2c     40 02 90 AD |  if_e	jmp	#LR__0504
05c30     48 28 0E F2 | 	cmp	local06, #72 wz
05c34     40 02 90 AD |  if_e	jmp	#LR__0505
05c38     58 28 0E F2 | 	cmp	local06, #88 wz
05c3c     44 02 90 AD |  if_e	jmp	#LR__0506
05c40     5F 28 0E F2 | 	cmp	local06, #95 wz
05c44     44 02 90 AD |  if_e	jmp	#LR__0507
05c48     8A 28 0E F2 | 	cmp	local06, #138 wz
05c4c     48 02 90 AD |  if_e	jmp	#LR__0508
05c50     4C 28 0E F2 | 	cmp	local06, #76 wz
05c54     4C 02 90 AD |  if_e	jmp	#LR__0509
05c58     52 28 0E F2 | 	cmp	local06, #82 wz
05c5c     50 02 90 AD |  if_e	jmp	#LR__0510
05c60     97 28 0E F2 | 	cmp	local06, #151 wz
05c64     54 02 90 AD |  if_e	jmp	#LR__0511
05c68     61 28 0E F2 | 	cmp	local06, #97 wz
05c6c     58 02 90 AD |  if_e	jmp	#LR__0512
05c70     63 28 0E F2 | 	cmp	local06, #99 wz
05c74     5C 02 90 AD |  if_e	jmp	#LR__0513
05c78     41 28 0E F2 | 	cmp	local06, #65 wz
05c7c     AC 03 90 AD |  if_e	jmp	#LR__0543
05c80     4B 28 0E F2 | 	cmp	local06, #75 wz
05c84     58 02 90 AD |  if_e	jmp	#LR__0514
05c88     5E 28 0E F2 | 	cmp	local06, #94 wz
05c8c     58 02 90 AD |  if_e	jmp	#LR__0515
05c90     7C 28 0E F2 | 	cmp	local06, #124 wz
05c94     5C 02 90 AD |  if_e	jmp	#LR__0516
05c98     7D 28 0E F2 | 	cmp	local06, #125 wz
05c9c     60 02 90 AD |  if_e	jmp	#LR__0517
05ca0     7E 28 0E F2 | 	cmp	local06, #126 wz
05ca4     64 02 90 AD |  if_e	jmp	#LR__0518
05ca8     7F 28 0E F2 | 	cmp	local06, #127 wz
05cac     68 02 90 AD |  if_e	jmp	#LR__0519
05cb0     80 28 0E F2 | 	cmp	local06, #128 wz
05cb4     6C 02 90 AD |  if_e	jmp	#LR__0520
05cb8     55 28 0E F2 | 	cmp	local06, #85 wz
05cbc     70 02 90 AD |  if_e	jmp	#LR__0521
05cc0     75 28 0E F2 | 	cmp	local06, #117 wz
05cc4     74 02 90 AD |  if_e	jmp	#LR__0522
05cc8     42 28 0E F2 | 	cmp	local06, #66 wz
05ccc     78 02 90 AD |  if_e	jmp	#LR__0523
05cd0     95 28 0E F2 | 	cmp	local06, #149 wz
05cd4     7C 02 90 AD |  if_e	jmp	#LR__0524
05cd8     81 28 0E F2 | 	cmp	local06, #129 wz
05cdc     80 02 90 AD |  if_e	jmp	#LR__0525
05ce0     44 28 0E F2 | 	cmp	local06, #68 wz
05ce4     84 02 90 AD |  if_e	jmp	#LR__0526
05ce8     88 28 0E F2 | 	cmp	local06, #136 wz
05cec     3C 03 90 AD |  if_e	jmp	#LR__0543
05cf0     92 28 0E F2 | 	cmp	local06, #146 wz
05cf4     80 02 90 AD |  if_e	jmp	#LR__0527
05cf8     4D 28 0E F2 | 	cmp	local06, #77 wz
05cfc     2C 03 90 AD |  if_e	jmp	#LR__0543
05d00     51 28 0E F2 | 	cmp	local06, #81 wz
05d04     78 02 90 AD |  if_e	jmp	#LR__0528
05d08     8E 28 0E F2 | 	cmp	local06, #142 wz
05d0c     7C 02 90 AD |  if_e	jmp	#LR__0529
05d10     90 28 0E F2 | 	cmp	local06, #144 wz
05d14     80 02 90 AD |  if_e	jmp	#LR__0530
05d18     8D 28 0E F2 | 	cmp	local06, #141 wz
05d1c     84 02 90 AD |  if_e	jmp	#LR__0531
05d20     8C 28 0E F2 | 	cmp	local06, #140 wz
05d24     88 02 90 AD |  if_e	jmp	#LR__0532
05d28     91 28 0E F2 | 	cmp	local06, #145 wz
05d2c     8C 02 90 AD |  if_e	jmp	#LR__0533
05d30     8B 28 0E F2 | 	cmp	local06, #139 wz
05d34     90 02 90 AD |  if_e	jmp	#LR__0534
05d38     8F 28 0E F2 | 	cmp	local06, #143 wz
05d3c     94 02 90 AD |  if_e	jmp	#LR__0535
05d40     6D 28 0E F2 | 	cmp	local06, #109 wz
05d44     98 02 90 AD |  if_e	jmp	#LR__0536
05d48     70 28 0E F2 | 	cmp	local06, #112 wz
05d4c     DC 02 90 AD |  if_e	jmp	#LR__0543
05d50     56 28 0E F2 | 	cmp	local06, #86 wz
05d54     94 02 90 AD |  if_e	jmp	#LR__0537
05d58     57 28 0E F2 | 	cmp	local06, #87 wz
05d5c     CC 02 90 AD |  if_e	jmp	#LR__0543
05d60     79 28 0E F2 | 	cmp	local06, #121 wz
05d64     90 02 90 AD |  if_e	jmp	#LR__0538
05d68     77 28 0E F2 | 	cmp	local06, #119 wz
05d6c     94 02 90 AD |  if_e	jmp	#LR__0539
05d70     78 28 0E F2 | 	cmp	local06, #120 wz
05d74     98 02 90 AD |  if_e	jmp	#LR__0540
05d78     01 00 00 FF 
05d7c     04 28 0E F2 | 	cmp	local06, ##516 wz
05d80     98 02 90 AD |  if_e	jmp	#LR__0541
05d84     9C 02 90 FD | 	jmp	#LR__0542
05d88                 | LR__0484
05d88     A0 0C B0 FD | 	call	#_compile_fun_2p
05d8c     FD 26 02 F6 | 	mov	local05, result1
05d90     98 02 90 FD | 	jmp	#LR__0543
05d94                 | LR__0485
05d94     D4 0D B0 FD | 	call	#_compile_fun_4p
05d98     FD 26 02 F6 | 	mov	local05, result1
05d9c     8C 02 90 FD | 	jmp	#LR__0543
05da0                 | LR__0486
05da0     64 2F B0 FD | 	call	#_expr
05da4                 | ' expr()
05da4                 | ' return 0
05da4     00 26 06 F6 | 	mov	local05, #0
05da8     80 02 90 FD | 	jmp	#LR__0543
05dac                 | LR__0487
05dac     F0 0C B0 FD | 	call	#_compile_fun_3p
05db0     FD 26 02 F6 | 	mov	local05, result1
05db4     74 02 90 FD | 	jmp	#LR__0543
05db8                 | LR__0488
05db8     4C 2F B0 FD | 	call	#_expr
05dbc                 | ' expr()
05dbc                 | ' return 0
05dbc     00 26 06 F6 | 	mov	local05, #0
05dc0     68 02 90 FD | 	jmp	#LR__0543
05dc4                 | LR__0489
05dc4     40 2F B0 FD | 	call	#_expr
05dc8                 | ' expr()
05dc8                 | ' return 0
05dc8     00 26 06 F6 | 	mov	local05, #0
05dcc     5C 02 90 FD | 	jmp	#LR__0543
05dd0                 | LR__0490
05dd0     38 10 B0 FD | 	call	#_compile_fun_varp
05dd4     FD 2C 02 F6 | 	mov	local08, result1
05dd8     50 02 90 FD | 	jmp	#LR__0543
05ddc                 | LR__0491
05ddc     28 2F B0 FD | 	call	#_expr
05de0                 | ' expr()
05de0                 | ' return 0
05de0     00 26 06 F6 | 	mov	local05, #0
05de4     44 02 90 FD | 	jmp	#LR__0543
05de8                 | LR__0492
05de8     20 10 B0 FD | 	call	#_compile_fun_varp
05dec     FD 2C 02 F6 | 	mov	local08, result1
05df0     38 02 90 FD | 	jmp	#LR__0543
05df4                 | LR__0493
05df4     14 10 B0 FD | 	call	#_compile_fun_varp
05df8     FD 2C 02 F6 | 	mov	local08, result1
05dfc     2C 02 90 FD | 	jmp	#LR__0543
05e00                 | LR__0494
05e00     8C 0E B0 FD | 	call	#_compile_fun_5p
05e04     FD 26 02 F6 | 	mov	local05, result1
05e08     20 02 90 FD | 	jmp	#LR__0543
05e0c                 | LR__0495
05e0c     E8 19 B0 FD | 	call	#_compile_dim
05e10     D4 02 90 FD | 	jmp	#LR__0544
05e14                 | LR__0496
05e14     14 0C B0 FD | 	call	#_compile_fun_2p
05e18     10 02 90 FD | 	jmp	#LR__0543
05e1c                 | LR__0497
05e1c     0C 0C B0 FD | 	call	#_compile_fun_2p
05e20     FD 26 02 F6 | 	mov	local05, result1
05e24     04 02 90 FD | 	jmp	#LR__0543
05e28                 | LR__0498
05e28     A4 18 B0 FD | 	call	#_compile_else
05e2c     B8 02 90 FD | 	jmp	#LR__0544
05e30                 | LR__0499
05e30     01 24 16 F2 | 	cmp	local04, #1 wc
05e34     08 00 90 CD |  if_b	jmp	#LR__0500
05e38     6C 2B B0 FD | 	call	#_compile_goto
05e3c     A8 02 90 FD | 	jmp	#LR__0544
05e40                 | LR__0500
05e40     19 12 06 F6 | 	mov	arg01, #25
05e44     1C 2E B1 FD | 	call	#_printerror
05e48     9C 02 90 FD | 	jmp	#LR__0544
05e4c                 | LR__0501
05e4c     50 0C B0 FD | 	call	#_compile_fun_3p
05e50     FD 26 02 F6 | 	mov	local05, result1
05e54     D4 01 90 FD | 	jmp	#LR__0543
05e58                 | LR__0502
05e58     10 0D B0 FD | 	call	#_compile_fun_4p
05e5c     FD 26 02 F6 | 	mov	local05, result1
05e60     C8 01 90 FD | 	jmp	#LR__0543
05e64                 | LR__0503
05e64     A0 2E B0 FD | 	call	#_expr
05e68                 | ' expr()
05e68                 | ' return 0
05e68     00 26 06 F6 | 	mov	local05, #0
05e6c     BC 01 90 FD | 	jmp	#LR__0543
05e70                 | LR__0504
05e70     94 20 B0 FD | 	call	#_compile_for
05e74     70 02 90 FD | 	jmp	#LR__0544
05e78                 | LR__0505
05e78     F0 0C B0 FD | 	call	#_compile_fun_4p
05e7c     FD 26 02 F6 | 	mov	local05, result1
05e80     A8 01 90 FD | 	jmp	#LR__0543
05e84                 | LR__0506
05e84     08 17 B0 FD | 	call	#_compile_if
05e88     5C 02 90 FD | 	jmp	#LR__0544
05e8c                 | LR__0507
05e8c     78 2E B0 FD | 	call	#_expr
05e90                 | ' expr()
05e90                 | ' return 0
05e90     00 26 06 F6 | 	mov	local05, #0
05e94     94 01 90 FD | 	jmp	#LR__0543
05e98                 | LR__0508
05e98     6C 2E B0 FD | 	call	#_expr
05e9c                 | ' expr()
05e9c                 | ' return 0
05e9c     00 26 06 F6 | 	mov	local05, #0
05ea0     88 01 90 FD | 	jmp	#LR__0543
05ea4                 | LR__0509
05ea4     64 0F B0 FD | 	call	#_compile_fun_varp
05ea8     FD 2C 02 F6 | 	mov	local08, result1
05eac     7C 01 90 FD | 	jmp	#LR__0543
05eb0                 | LR__0510
05eb0     58 0F B0 FD | 	call	#_compile_fun_varp
05eb4     FD 2C 02 F6 | 	mov	local08, result1
05eb8     70 01 90 FD | 	jmp	#LR__0543
05ebc                 | LR__0511
05ebc     6C 0B B0 FD | 	call	#_compile_fun_2p
05ec0     FD 26 02 F6 | 	mov	local05, result1
05ec4     64 01 90 FD | 	jmp	#LR__0543
05ec8                 | LR__0512
05ec8     3C 2E B0 FD | 	call	#_expr
05ecc                 | ' expr()
05ecc                 | ' return 0
05ecc     00 26 06 F6 | 	mov	local05, #0
05ed0     58 01 90 FD | 	jmp	#LR__0543
05ed4                 | LR__0513
05ed4     30 2E B0 FD | 	call	#_expr
05ed8                 | ' expr()
05ed8                 | ' return 0
05ed8     00 26 06 F6 | 	mov	local05, #0
05edc     4C 01 90 FD | 	jmp	#LR__0543
05ee0                 | LR__0514
05ee0     14 29 B0 FD | 	call	#_compile_next
05ee4     00 02 90 FD | 	jmp	#LR__0544
05ee8                 | LR__0515
05ee8     1C 2E B0 FD | 	call	#_expr
05eec                 | ' expr()
05eec                 | ' return 0
05eec     00 26 06 F6 | 	mov	local05, #0
05ef0     38 01 90 FD | 	jmp	#LR__0543
05ef4                 | LR__0516
05ef4     10 2E B0 FD | 	call	#_expr
05ef8                 | ' expr()
05ef8                 | ' return 0
05ef8     00 26 06 F6 | 	mov	local05, #0
05efc     2C 01 90 FD | 	jmp	#LR__0543
05f00                 | LR__0517
05f00     04 2E B0 FD | 	call	#_expr
05f04                 | ' expr()
05f04                 | ' return 0
05f04     00 26 06 F6 | 	mov	local05, #0
05f08     20 01 90 FD | 	jmp	#LR__0543
05f0c                 | LR__0518
05f0c     F8 2D B0 FD | 	call	#_expr
05f10                 | ' expr()
05f10                 | ' return 0
05f10     00 26 06 F6 | 	mov	local05, #0
05f14     14 01 90 FD | 	jmp	#LR__0543
05f18                 | LR__0519
05f18     50 0C B0 FD | 	call	#_compile_fun_4p
05f1c     FD 26 02 F6 | 	mov	local05, result1
05f20     08 01 90 FD | 	jmp	#LR__0543
05f24                 | LR__0520
05f24     E0 2D B0 FD | 	call	#_expr
05f28                 | ' expr()
05f28                 | ' return 0
05f28     00 26 06 F6 | 	mov	local05, #0
05f2c     FC 00 90 FD | 	jmp	#LR__0543
05f30                 | LR__0521
05f30     F8 0A B0 FD | 	call	#_compile_fun_2p
05f34     FD 26 02 F6 | 	mov	local05, result1
05f38     F0 00 90 FD | 	jmp	#LR__0543
05f3c                 | LR__0522
05f3c     CC 0E B0 FD | 	call	#_compile_fun_varp
05f40     FD 2C 02 F6 | 	mov	local08, result1
05f44     E4 00 90 FD | 	jmp	#LR__0543
05f48                 | LR__0523
05f48     E0 0A B0 FD | 	call	#_compile_fun_2p
05f4c     FD 26 02 F6 | 	mov	local05, result1
05f50     D8 00 90 FD | 	jmp	#LR__0543
05f54                 | LR__0524
05f54     D4 0A B0 FD | 	call	#_compile_fun_2p
05f58     FD 26 02 F6 | 	mov	local05, result1
05f5c     CC 00 90 FD | 	jmp	#LR__0543
05f60                 | LR__0525
05f60     C8 0A B0 FD | 	call	#_compile_fun_2p
05f64     FD 26 02 F6 | 	mov	local05, result1
05f68     C0 00 90 FD | 	jmp	#LR__0543
05f6c                 | LR__0526
05f6c     48 0F B0 FD | 	call	#_compile_print
05f70     FD 26 02 F6 | 	mov	local05, result1
05f74     70 01 90 FD | 	jmp	#LR__0544
05f78                 | LR__0527
05f78     8C 2D B0 FD | 	call	#_expr
05f7c                 | ' expr()
05f7c                 | ' return 0
05f7c     AC 00 90 FD | 	jmp	#LR__0543
05f80                 | LR__0528
05f80     88 0E B0 FD | 	call	#_compile_fun_varp
05f84     FD 2C 02 F6 | 	mov	local08, result1
05f88     A0 00 90 FD | 	jmp	#LR__0543
05f8c                 | LR__0529
05f8c     9C 0A B0 FD | 	call	#_compile_fun_2p
05f90     FD 26 02 F6 | 	mov	local05, result1
05f94     94 00 90 FD | 	jmp	#LR__0543
05f98                 | LR__0530
05f98     90 0A B0 FD | 	call	#_compile_fun_2p
05f9c     FD 26 02 F6 | 	mov	local05, result1
05fa0     88 00 90 FD | 	jmp	#LR__0543
05fa4                 | LR__0531
05fa4     84 0A B0 FD | 	call	#_compile_fun_2p
05fa8     FD 26 02 F6 | 	mov	local05, result1
05fac     7C 00 90 FD | 	jmp	#LR__0543
05fb0                 | LR__0532
05fb0     78 0A B0 FD | 	call	#_compile_fun_2p
05fb4     FD 26 02 F6 | 	mov	local05, result1
05fb8     70 00 90 FD | 	jmp	#LR__0543
05fbc                 | LR__0533
05fbc     6C 0A B0 FD | 	call	#_compile_fun_2p
05fc0     FD 26 02 F6 | 	mov	local05, result1
05fc4     64 00 90 FD | 	jmp	#LR__0543
05fc8                 | LR__0534
05fc8     60 0A B0 FD | 	call	#_compile_fun_2p
05fcc     FD 26 02 F6 | 	mov	local05, result1
05fd0     58 00 90 FD | 	jmp	#LR__0543
05fd4                 | LR__0535
05fd4     54 0A B0 FD | 	call	#_compile_fun_2p
05fd8     FD 26 02 F6 | 	mov	local05, result1
05fdc     4C 00 90 FD | 	jmp	#LR__0543
05fe0                 | LR__0536
05fe0     BC 0A B0 FD | 	call	#_compile_fun_3p
05fe4     FD 26 02 F6 | 	mov	local05, result1
05fe8     40 00 90 FD | 	jmp	#LR__0543
05fec                 | LR__0537
05fec     18 2D B0 FD | 	call	#_expr
05ff0                 | ' expr()
05ff0                 | ' return 0
05ff0     00 26 06 F6 | 	mov	local05, #0
05ff4     34 00 90 FD | 	jmp	#LR__0543
05ff8                 | LR__0538
05ff8     30 0A B0 FD | 	call	#_compile_fun_2p
05ffc     FD 26 02 F6 | 	mov	local05, result1
06000     28 00 90 FD | 	jmp	#LR__0543
06004                 | LR__0539
06004     24 0A B0 FD | 	call	#_compile_fun_2p
06008     FD 26 02 F6 | 	mov	local05, result1
0600c     1C 00 90 FD | 	jmp	#LR__0543
06010                 | LR__0540
06010     18 0A B0 FD | 	call	#_compile_fun_2p
06014     FD 26 02 F6 | 	mov	local05, result1
06018     10 00 90 FD | 	jmp	#LR__0543
0601c                 | LR__0541
0601c     E8 01 B0 FD | 	call	#_compile_array_assign
06020     C4 00 90 FD | 	jmp	#LR__0544
06024                 | LR__0542
06024     48 09 B0 FD | 	call	#_compile_unknown
06028     BC 00 90 FD | 	jmp	#LR__0544
0602c                 | LR__0543
0602c     14 23 02 F6 | 	mov	local03, local06
06030     16 1F 02 F6 | 	mov	local01, local08
06034     0F 2B 02 F6 | 	mov	local07, local01
06038     10 2F 02 F6 | 	mov	local09, local02
0603c     11 29 02 F6 | 	mov	local06, local03
06040     6A 00 00 FF 
06044     60 E4 05 F1 | 	add	objptr, ##54368
06048     F2 1E 02 FB | 	rdlong	local01, objptr
0604c     0F 2D 02 F6 | 	mov	local08, local01
06050     01 2C 66 F0 | 	shl	local08, #1
06054     0F 2D 02 F1 | 	add	local08, local01
06058     02 2C 66 F0 | 	shl	local08, #2
0605c     03 00 00 FF 
06060     00 E4 85 F1 | 	sub	objptr, ##1536
06064     F2 2C 02 F1 | 	add	local08, objptr
06068     16 2B 62 FC | 	wrlong	local07, local08
0606c     03 00 00 FF 
06070     00 E4 05 F1 | 	add	objptr, ##1536
06074     F2 1E 02 FB | 	rdlong	local01, objptr
06078     0F 2D 02 F6 | 	mov	local08, local01
0607c     01 2C 66 F0 | 	shl	local08, #1
06080     0F 2D 02 F1 | 	add	local08, local01
06084     02 2C 66 F0 | 	shl	local08, #2
06088     03 00 00 FF 
0608c     00 E4 85 F1 | 	sub	objptr, ##1536
06090     F2 2C 02 F1 | 	add	local08, objptr
06094     04 2C 06 F1 | 	add	local08, #4
06098     16 2F 62 FC | 	wrlong	local09, local08
0609c     03 00 00 FF 
060a0     00 E4 05 F1 | 	add	objptr, ##1536
060a4     F2 1E 02 FB | 	rdlong	local01, objptr
060a8     0F 2D 02 F6 | 	mov	local08, local01
060ac     01 2C 66 F0 | 	shl	local08, #1
060b0     0F 2D 02 F1 | 	add	local08, local01
060b4     02 2C 66 F0 | 	shl	local08, #2
060b8     03 00 00 FF 
060bc     00 E4 85 F1 | 	sub	objptr, ##1536
060c0     F2 2C 02 F1 | 	add	local08, objptr
060c4     08 2C 06 F1 | 	add	local08, #8
060c8     16 29 62 FC | 	wrlong	local06, local08
060cc     03 00 00 FF 
060d0     00 E4 05 F1 | 	add	objptr, ##1536
060d4     F2 2A 02 FB | 	rdlong	local07, objptr
060d8     01 2A 06 F1 | 	add	local07, #1
060dc     F2 2A 62 FC | 	wrlong	local07, objptr
060e0     6A 00 00 FF 
060e4     60 E4 85 F1 | 	sub	objptr, ##54368
060e8                 | LR__0544
060e8                 | ' 
060e8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
060e8                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
060e8     00 24 0E F2 | 	cmp	local04, #0 wz
060ec     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
060f0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
060f4     38 00 90 5D |  if_ne	jmp	#LR__0545
060f8     6A 00 00 FF 
060fc     60 E4 05 F1 | 	add	objptr, ##54368
06100     F2 2C 02 FB | 	rdlong	local08, objptr
06104     16 1F 02 F6 | 	mov	local01, local08
06108     01 1E 66 F0 | 	shl	local01, #1
0610c     16 1F 02 F1 | 	add	local01, local08
06110     02 1E 66 F0 | 	shl	local01, #2
06114     03 00 00 FF 
06118     00 E4 85 F1 | 	sub	objptr, ##1536
0611c     F2 1E 02 F1 | 	add	local01, objptr
06120     08 1E 06 F1 | 	add	local01, #8
06124     0F FD 6B FC | 	wrlong	#510, local01
06128     67 00 00 FF 
0612c     60 E4 85 F1 | 	sub	objptr, ##52832
06130                 | LR__0545
06130                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
06130     6A 00 00 FF 
06134     60 E4 05 F1 | 	add	objptr, ##54368
06138     F2 1E 02 FB | 	rdlong	local01, objptr
0613c     6A 00 00 FF 
06140     60 E4 85 F1 | 	sub	objptr, ##54368
06144     97 58 48 FB | 	callpa	#(@LR__0548-@LR__0546)>>2,fcache_load_ptr_
06148                 | LR__0546
06148     0F 2D 02 F6 | 	mov	local08, local01
0614c     01 2C 66 F0 | 	shl	local08, #1
06150     0F 2D 02 F1 | 	add	local08, local01
06154     02 2C 66 F0 | 	shl	local08, #2
06158     67 00 00 FF 
0615c     60 E4 05 F1 | 	add	objptr, ##52832
06160     F2 2C 02 F1 | 	add	local08, objptr
06164     08 2C 06 F1 | 	add	local08, #8
06168     16 2D 02 FB | 	rdlong	local08, local08
0616c     9B 2C 0E F2 | 	cmp	local08, #155 wz
06170     67 00 00 FF 
06174     60 E4 85 F1 | 	sub	objptr, ##52832
06178     70 00 90 5D |  if_ne	jmp	#LR__0547
0617c     0F 2D 02 F6 | 	mov	local08, local01
06180     01 2C 86 F1 | 	sub	local08, #1
06184     16 2F 02 F6 | 	mov	local09, local08
06188     01 2E 66 F0 | 	shl	local09, #1
0618c     16 2F 02 F1 | 	add	local09, local08
06190     02 2E 66 F0 | 	shl	local09, #2
06194     67 00 00 FF 
06198     60 E4 05 F1 | 	add	objptr, ##52832
0619c     F2 2E 02 F1 | 	add	local09, objptr
061a0     08 2E 06 F1 | 	add	local09, #8
061a4     17 2D 02 FB | 	rdlong	local08, local09
061a8     11 2C 0E F2 | 	cmp	local08, #17 wz
061ac     67 00 00 FF 
061b0     60 E4 85 F1 | 	sub	objptr, ##52832
061b4     34 00 90 5D |  if_ne	jmp	#LR__0547
061b8     0F 2F 02 F6 | 	mov	local09, local01
061bc     01 2E 86 F1 | 	sub	local09, #1
061c0     17 2D 02 F6 | 	mov	local08, local09
061c4     01 2C 66 F0 | 	shl	local08, #1
061c8     17 2D 02 F1 | 	add	local08, local09
061cc     02 2C 66 F0 | 	shl	local08, #2
061d0     67 00 00 FF 
061d4     60 E4 05 F1 | 	add	objptr, ##52832
061d8     F2 2C 02 F1 | 	add	local08, objptr
061dc     08 2C 06 F1 | 	add	local08, #8
061e0     16 25 68 FC | 	wrlong	#18, local08
061e4     67 00 00 FF 
061e8     60 E4 85 F1 | 	sub	objptr, ##52832
061ec                 | LR__0547
061ec     01 1E 86 F1 | 	sub	local01, #1
061f0     01 1E 56 F2 | 	cmps	local01, #1 wc
061f4     50 FF 9F 3D |  if_ae	jmp	#LR__0546
061f8                 | LR__0548
061f8                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
061f8                 | ' return err
061f8     13 FB 01 F6 | 	mov	result1, local05
061fc     A7 F0 03 F6 | 	mov	ptra, fp
06200     B2 00 A0 FD | 	call	#popregs_
06204                 | _compile_immediate_ret
06204     2D 00 64 FD | 	ret
06208                 | 
06208                 | ' 
06208                 | ' sub compile_array_assign
06208                 | _compile_array_assign
06208     0A 4A 05 F6 | 	mov	COUNT_, #10
0620c     A8 00 A0 FD | 	call	#pushregs_
06210     00 24 06 F6 | 	mov	local04, #0
06214     57 00 00 FF 
06218     28 E4 05 F1 | 	add	objptr, ##44584
0621c     F2 26 02 FB | 	rdlong	local05, objptr
06220     13 FB 01 F6 | 	mov	result1, local05
06224     01 FA 85 F1 | 	sub	result1, #1
06228     03 FA 65 F0 | 	shl	result1, #3
0622c     02 00 00 FF 
06230     38 E4 85 F1 | 	sub	objptr, ##1080
06234     F2 FA 01 F1 | 	add	result1, objptr
06238     FD 28 02 FB | 	rdlong	local06, result1
0623c                 | ' numpar=0
0623c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
0623c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
0623c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
0623c                 | ' if lparts(ct).token=token_lpar then
0623c     03 26 66 F0 | 	shl	local05, #3
06240     F2 26 02 F1 | 	add	local05, objptr
06244     04 26 06 F1 | 	add	local05, #4
06248     13 27 02 FB | 	rdlong	local05, local05
0624c     15 26 0E F2 | 	cmp	local05, #21 wz
06250     54 00 00 FF 
06254     F0 E5 85 F1 | 	sub	objptr, ##43504
06258     D4 01 90 5D |  if_ne	jmp	#LR__0554
0625c     57 00 00 FF 
06260     28 E4 05 F1 | 	add	objptr, ##44584
06264     F2 2A 02 FB | 	rdlong	local07, objptr
06268     01 2A 06 F1 | 	add	local07, #1
0626c     F2 2A 62 FC | 	wrlong	local07, objptr
06270     57 00 00 FF 
06274     28 E4 85 F1 | 	sub	objptr, ##44584
06278                 | '   ct+=1 											' omit this lpar, this is for expr list
06278                 | '   do
06278                 | LR__0550
06278     8C 2A B0 FD | 	call	#_expr
0627c     57 00 00 FF 
06280     28 E4 05 F1 | 	add	objptr, ##44584
06284     F2 26 02 FB | 	rdlong	local05, objptr
06288     01 26 06 F1 | 	add	local05, #1
0628c     F2 26 62 FC | 	wrlong	local05, objptr
06290     01 24 06 F1 | 	add	local04, #1
06294     01 26 86 F1 | 	sub	local05, #1
06298     03 26 66 F0 | 	shl	local05, #3
0629c     02 00 00 FF 
062a0     38 E4 85 F1 | 	sub	objptr, ##1080
062a4     F2 26 02 F1 | 	add	local05, objptr
062a8     04 26 06 F1 | 	add	local05, #4
062ac     13 2B 02 FB | 	rdlong	local07, local05
062b0     14 2A 0E F2 | 	cmp	local07, #20 wz
062b4     54 00 00 FF 
062b8     F0 E5 85 F1 | 	sub	objptr, ##43504
062bc     34 00 90 AD |  if_e	jmp	#LR__0551
062c0     57 00 00 FF 
062c4     28 E4 05 F1 | 	add	objptr, ##44584
062c8     F2 2A 02 FB | 	rdlong	local07, objptr
062cc     03 2A 66 F0 | 	shl	local07, #3
062d0     02 00 00 FF 
062d4     38 E4 85 F1 | 	sub	objptr, ##1080
062d8     F2 2A 02 F1 | 	add	local07, objptr
062dc     04 2A 06 F1 | 	add	local07, #4
062e0     15 2B 02 FB | 	rdlong	local07, local07
062e4     FE 2B 0E F2 | 	cmp	local07, #510 wz
062e8     54 00 00 FF 
062ec     F0 E5 85 F1 | 	sub	objptr, ##43504
062f0     84 FF 9F 5D |  if_ne	jmp	#LR__0550
062f4                 | LR__0551
062f4     57 00 00 FF 
062f8     28 E4 05 F1 | 	add	objptr, ##44584
062fc     F2 2A 02 FB | 	rdlong	local07, objptr
06300     01 2A 06 F1 | 	add	local07, #1
06304     F2 2A 62 FC | 	wrlong	local07, objptr
06308     57 00 00 FF 
0630c     28 E4 85 F1 | 	sub	objptr, ##44584
06310     F4 29 B0 FD | 	call	#_expr
06314     01 2C 66 F6 | 	neg	local08, #1
06318     00 2E 06 F6 | 	mov	local09, #0
0631c                 | ' '   print "in array_assign, rpar found, numpar=",numpar
0631c                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
0631c                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
0631c                 | ' ct+=1 : expr()
0631c                 | ' ' now find the vae
0631c                 | ' 
0631c                 | ' j=-1 : i=0 : do : 
0631c                 | LR__0552
0631c                 | '   if variables(i).name=varname$ then j=i: exit loop
0631c     17 27 02 F6 | 	mov	local05, local09
06320     04 26 66 F0 | 	shl	local05, #4
06324     34 00 00 FF 
06328     EC E5 05 F1 | 	add	objptr, ##27116
0632c     F2 26 02 F1 | 	add	local05, objptr
06330     13 13 02 FB | 	rdlong	arg01, local05
06334     14 15 02 F6 | 	mov	arg02, local06
06338     34 00 00 FF 
0633c     EC E5 85 F1 | 	sub	objptr, ##27116
06340     30 61 B1 FD | 	call	#__system___string_cmp
06344     00 FA 0D F2 | 	cmp	result1, #0 wz
06348     17 2D 02 A6 |  if_e	mov	local08, local09
0634c     20 00 90 AD |  if_e	jmp	#LR__0553
06350     01 2E 06 F1 | 	add	local09, #1
06354     54 00 00 FF 
06358     EC E5 05 F1 | 	add	objptr, ##43500
0635c     F2 2A 02 FB | 	rdlong	local07, objptr
06360     54 00 00 FF 
06364     EC E5 85 F1 | 	sub	objptr, ##43500
06368     15 2F 5A F2 | 	cmps	local09, local07 wcz
0636c     AC FF 9F ED |  if_be	jmp	#LR__0552
06370                 | LR__0553
06370     16 1F 02 F6 | 	mov	local01, local08
06374     12 21 02 F6 | 	mov	local02, local04
06378     17 22 06 F6 | 	mov	local03, #23
0637c     0F 2B 02 F6 | 	mov	local07, local01
06380     10 31 02 F6 | 	mov	local10, local02
06384     11 2D 02 F6 | 	mov	local08, local03
06388     6A 00 00 FF 
0638c     60 E4 05 F1 | 	add	objptr, ##54368
06390     F2 1E 02 FB | 	rdlong	local01, objptr
06394     0F 2F 02 F6 | 	mov	local09, local01
06398     01 2E 66 F0 | 	shl	local09, #1
0639c     0F 2F 02 F1 | 	add	local09, local01
063a0     02 2E 66 F0 | 	shl	local09, #2
063a4     03 00 00 FF 
063a8     00 E4 85 F1 | 	sub	objptr, ##1536
063ac     F2 2E 02 F1 | 	add	local09, objptr
063b0     17 2B 62 FC | 	wrlong	local07, local09
063b4     03 00 00 FF 
063b8     00 E4 05 F1 | 	add	objptr, ##1536
063bc     F2 1E 02 FB | 	rdlong	local01, objptr
063c0     0F 2F 02 F6 | 	mov	local09, local01
063c4     01 2E 66 F0 | 	shl	local09, #1
063c8     0F 2F 02 F1 | 	add	local09, local01
063cc     02 2E 66 F0 | 	shl	local09, #2
063d0     03 00 00 FF 
063d4     00 E4 85 F1 | 	sub	objptr, ##1536
063d8     F2 2E 02 F1 | 	add	local09, objptr
063dc     04 2E 06 F1 | 	add	local09, #4
063e0     17 31 62 FC | 	wrlong	local10, local09
063e4     03 00 00 FF 
063e8     00 E4 05 F1 | 	add	objptr, ##1536
063ec     F2 30 02 FB | 	rdlong	local10, objptr
063f0     18 1F 02 F6 | 	mov	local01, local10
063f4     01 1E 66 F0 | 	shl	local01, #1
063f8     18 1F 02 F1 | 	add	local01, local10
063fc     02 1E 66 F0 | 	shl	local01, #2
06400     03 00 00 FF 
06404     00 E4 85 F1 | 	sub	objptr, ##1536
06408     F2 1E 02 F1 | 	add	local01, objptr
0640c     08 1E 06 F1 | 	add	local01, #8
06410     0F 2D 62 FC | 	wrlong	local08, local01
06414     03 00 00 FF 
06418     00 E4 05 F1 | 	add	objptr, ##1536
0641c     F2 2A 02 FB | 	rdlong	local07, objptr
06420     01 2A 06 F1 | 	add	local07, #1
06424     F2 2A 62 FC | 	wrlong	local07, objptr
06428     6A 00 00 FF 
0642c     60 E4 85 F1 | 	sub	objptr, ##54368
06430                 | LR__0554
06430     A7 F0 03 F6 | 	mov	ptra, fp
06434     B2 00 A0 FD | 	call	#popregs_
06438                 | _compile_array_assign_ret
06438     2D 00 64 FD | 	ret
0643c                 | 
0643c                 | ' 
0643c                 | ' 
0643c                 | ' sub compile_immediate_assign(linetype as ulong)
0643c                 | _compile_immediate_assign
0643c     09 4A 05 F6 | 	mov	COUNT_, #9
06440     A8 00 A0 FD | 	call	#pushregs_
06444     09 25 0A F6 | 	mov	local04, arg01 wz
06448     FF 22 06 F6 | 	mov	local03, #255
0644c     01 26 66 F6 | 	neg	local05, #1
06450                 | ' 
06450                 | ' t1.result_type=result_error : t1.result.uresult=0
06450                 | ' i=-1: j=-1
06450                 | ' 
06450                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
06450     2C 00 90 5D |  if_ne	jmp	#LR__0560
06454     54 00 00 FF 
06458     F0 E5 05 F1 | 	add	objptr, ##43504
0645c     F2 28 02 FB | 	rdlong	local06, objptr
06460     02 00 00 FF 
06464     38 E4 05 F1 | 	add	objptr, ##1080
06468     F2 04 68 FC | 	wrlong	#2, objptr
0646c     13 00 00 FF 
06470     38 E4 05 F1 | 	add	objptr, ##9784
06474     F2 00 68 FC | 	wrlong	#0, objptr
06478     6A 00 00 FF 
0647c     60 E4 85 F1 | 	sub	objptr, ##54368
06480                 | LR__0560
06480                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
06480     02 24 0E F2 | 	cmp	local04, #2 wz
06484     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06488     54 00 00 AF 
0648c     F0 E5 05 A1 |  if_e	add	objptr, ##43504
06490     F2 28 02 AB |  if_e	rdlong	local06, objptr
06494     02 00 00 AF 
06498     38 E4 05 A1 |  if_e	add	objptr, ##1080
0649c     F2 04 68 AC |  if_e	wrlong	#2, objptr
064a0     57 00 00 AF 
064a4     28 E4 85 A1 |  if_e	sub	objptr, ##44584
064a8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
064a8     04 24 0E F2 | 	cmp	local04, #4 wz
064ac     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
064b0     2C 00 90 5D |  if_ne	jmp	#LR__0561
064b4     54 00 00 FF 
064b8     F8 E5 05 F1 | 	add	objptr, ##43512
064bc     F2 28 02 FB | 	rdlong	local06, objptr
064c0     02 00 00 FF 
064c4     30 E4 05 F1 | 	add	objptr, ##1072
064c8     F2 06 68 FC | 	wrlong	#3, objptr
064cc     13 00 00 FF 
064d0     38 E4 05 F1 | 	add	objptr, ##9784
064d4     F2 04 68 FC | 	wrlong	#2, objptr
064d8     6A 00 00 FF 
064dc     60 E4 85 F1 | 	sub	objptr, ##54368
064e0                 | LR__0561
064e0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
064e0     05 24 0E F2 | 	cmp	local04, #5 wz
064e4     3C 00 90 5D |  if_ne	jmp	#LR__0562
064e8     57 00 00 FF 
064ec     28 E4 05 F1 | 	add	objptr, ##44584
064f0     F2 FA 01 FB | 	rdlong	result1, objptr
064f4     FD 28 02 F6 | 	mov	local06, result1
064f8     03 28 66 F0 | 	shl	local06, #3
064fc     02 00 00 FF 
06500     38 E4 85 F1 | 	sub	objptr, ##1080
06504     F2 28 02 F1 | 	add	local06, objptr
06508     14 29 02 FB | 	rdlong	local06, local06
0650c     02 FA 05 F1 | 	add	result1, #2
06510     02 00 00 FF 
06514     38 E4 05 F1 | 	add	objptr, ##1080
06518     F2 FA 61 FC | 	wrlong	result1, objptr
0651c     57 00 00 FF 
06520     28 E4 85 F1 | 	sub	objptr, ##44584
06524                 | LR__0562
06524     14 13 02 F6 | 	mov	arg01, local06
06528     01 14 06 F6 | 	mov	arg02, #1
0652c     E8 7F B1 FD | 	call	#__system__Right_S
06530     D4 27 B0 FD | 	call	#_expr
06534                 | '  
06534                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06534                 | ' 
06534                 | ' suffix2$=right$(varname2$,1)
06534                 | ' expr()
06534                 | ' 
06534                 | ' 
06534                 | ' if varnum>0 then
06534     54 00 00 FF 
06538     EC E5 05 F1 | 	add	objptr, ##43500
0653c     F2 2A 02 FB | 	rdlong	local07, objptr
06540     54 00 00 FF 
06544     EC E5 85 F1 | 	sub	objptr, ##43500
06548     01 2A 56 F2 | 	cmps	local07, #1 wc
0654c     58 00 90 CD |  if_b	jmp	#LR__0565
06550                 | '   for i=0 to varnum-1
06550     00 2C 06 F6 | 	mov	local08, #0
06554     54 00 00 FF 
06558     EC E5 05 F1 | 	add	objptr, ##43500
0655c     F2 2E 02 FB | 	rdlong	local09, objptr
06560     54 00 00 FF 
06564     EC E5 85 F1 | 	sub	objptr, ##43500
06568                 | LR__0563
06568     17 2D 52 F2 | 	cmps	local08, local09 wc
0656c     38 00 90 3D |  if_ae	jmp	#LR__0564
06570                 | '     if variables(i).name=varname2$ then j=i : exit
06570     16 2B 02 F6 | 	mov	local07, local08
06574     04 2A 66 F0 | 	shl	local07, #4
06578     34 00 00 FF 
0657c     EC E5 05 F1 | 	add	objptr, ##27116
06580     F2 2A 02 F1 | 	add	local07, objptr
06584     15 13 02 FB | 	rdlong	arg01, local07
06588     14 15 02 F6 | 	mov	arg02, local06
0658c     34 00 00 FF 
06590     EC E5 85 F1 | 	sub	objptr, ##27116
06594     DC 5E B1 FD | 	call	#__system___string_cmp
06598     00 FA 0D F2 | 	cmp	result1, #0 wz
0659c     16 27 02 A6 |  if_e	mov	local05, local08
065a0     01 2C 06 51 |  if_ne	add	local08, #1
065a4     C0 FF 9F 5D |  if_ne	jmp	#LR__0563
065a8                 | LR__0564
065a8                 | LR__0565
065a8                 | ' if  j=-1 andalso varnum<maxvars then   
065a8     FF FF 7F FF 
065ac     FF 27 0E F2 | 	cmp	local05, ##-1 wz
065b0     60 00 90 5D |  if_ne	jmp	#LR__0566
065b4     54 00 00 FF 
065b8     EC E5 05 F1 | 	add	objptr, ##43500
065bc     F2 2A 02 FB | 	rdlong	local07, objptr
065c0     54 00 00 FF 
065c4     EC E5 85 F1 | 	sub	objptr, ##43500
065c8     01 00 00 FF 
065cc     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
065d0     40 00 90 3D |  if_ae	jmp	#LR__0566
065d4     54 00 00 FF 
065d8     EC E5 05 F1 | 	add	objptr, ##43500
065dc     F2 2E 02 FB | 	rdlong	local09, objptr
065e0     04 2E 66 F0 | 	shl	local09, #4
065e4     20 00 00 FF 
065e8     00 E4 85 F1 | 	sub	objptr, ##16384
065ec     F2 2E 02 F1 | 	add	local09, objptr
065f0     17 29 62 FC | 	wrlong	local06, local09
065f4     20 00 00 FF 
065f8     00 E4 05 F1 | 	add	objptr, ##16384
065fc     F2 2A 02 FB | 	rdlong	local07, objptr
06600     15 27 02 F6 | 	mov	local05, local07
06604     01 2A 06 F1 | 	add	local07, #1
06608     F2 2A 62 FC | 	wrlong	local07, objptr
0660c     54 00 00 FF 
06610     EC E5 85 F1 | 	sub	objptr, ##43500
06614                 | LR__0566
06614     13 1F 02 F6 | 	mov	local01, local05
06618     17 22 06 F6 | 	mov	local03, #23
0661c     0F 2B 02 F6 | 	mov	local07, local01
06620     10 2F 02 F6 | 	mov	local09, local02
06624     11 1F 02 F6 | 	mov	local01, local03
06628     6A 00 00 FF 
0662c     60 E4 05 F1 | 	add	objptr, ##54368
06630     F2 2C 02 FB | 	rdlong	local08, objptr
06634     16 29 02 F6 | 	mov	local06, local08
06638     01 28 66 F0 | 	shl	local06, #1
0663c     16 29 02 F1 | 	add	local06, local08
06640     02 28 66 F0 | 	shl	local06, #2
06644     03 00 00 FF 
06648     00 E4 85 F1 | 	sub	objptr, ##1536
0664c     F2 28 02 F1 | 	add	local06, objptr
06650     14 2B 62 FC | 	wrlong	local07, local06
06654     03 00 00 FF 
06658     00 E4 05 F1 | 	add	objptr, ##1536
0665c     F2 2C 02 FB | 	rdlong	local08, objptr
06660     16 2B 02 F6 | 	mov	local07, local08
06664     01 2A 66 F0 | 	shl	local07, #1
06668     16 2B 02 F1 | 	add	local07, local08
0666c     02 2A 66 F0 | 	shl	local07, #2
06670     03 00 00 FF 
06674     00 E4 85 F1 | 	sub	objptr, ##1536
06678     F2 2A 02 F1 | 	add	local07, objptr
0667c     04 2A 06 F1 | 	add	local07, #4
06680     15 2F 62 FC | 	wrlong	local09, local07
06684     03 00 00 FF 
06688     00 E4 05 F1 | 	add	objptr, ##1536
0668c     F2 2E 02 FB | 	rdlong	local09, objptr
06690     17 2D 02 F6 | 	mov	local08, local09
06694     01 2C 66 F0 | 	shl	local08, #1
06698     17 2D 02 F1 | 	add	local08, local09
0669c     02 2C 66 F0 | 	shl	local08, #2
066a0     03 00 00 FF 
066a4     00 E4 85 F1 | 	sub	objptr, ##1536
066a8     F2 2C 02 F1 | 	add	local08, objptr
066ac     08 2C 06 F1 | 	add	local08, #8
066b0     16 1F 62 FC | 	wrlong	local01, local08
066b4     03 00 00 FF 
066b8     00 E4 05 F1 | 	add	objptr, ##1536
066bc     F2 2A 02 FB | 	rdlong	local07, objptr
066c0     01 2A 06 F1 | 	add	local07, #1
066c4     F2 2A 62 FC | 	wrlong	local07, objptr
066c8     6A 00 00 FF 
066cc     60 E4 85 F1 | 	sub	objptr, ##54368
066d0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
066d0                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
066d0     00 24 0E F2 | 	cmp	local04, #0 wz
066d4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066d8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
066dc     38 00 90 5D |  if_ne	jmp	#LR__0567
066e0     6A 00 00 FF 
066e4     60 E4 05 F1 | 	add	objptr, ##54368
066e8     F2 1E 02 FB | 	rdlong	local01, objptr
066ec     0F 2F 02 F6 | 	mov	local09, local01
066f0     01 2E 66 F0 | 	shl	local09, #1
066f4     0F 2F 02 F1 | 	add	local09, local01
066f8     02 2E 66 F0 | 	shl	local09, #2
066fc     03 00 00 FF 
06700     00 E4 85 F1 | 	sub	objptr, ##1536
06704     F2 2E 02 F1 | 	add	local09, objptr
06708     08 2E 06 F1 | 	add	local09, #8
0670c     17 FD 6B FC | 	wrlong	#510, local09
06710     67 00 00 FF 
06714     60 E4 85 F1 | 	sub	objptr, ##52832
06718                 | LR__0567
06718     A7 F0 03 F6 | 	mov	ptra, fp
0671c     B2 00 A0 FD | 	call	#popregs_
06720                 | _compile_immediate_assign_ret
06720     2D 00 64 FD | 	ret
06724                 | 
06724                 | ' 
06724                 | ' ' ------------------ compile the line that is calling a command 
06724                 | ' 
06724                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06724                 | _compile
06724     04 4A 05 F6 | 	mov	COUNT_, #4
06728     A8 00 A0 FD | 	call	#pushregs_
0672c     09 1F 0A F6 | 	mov	local01, arg01 wz
06730     0A 21 02 F6 | 	mov	local02, arg02
06734     0B 23 02 F6 | 	mov	local03, arg03
06738                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06738                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06738                 | '  
06738                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06738                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06738     0C 00 90 5D |  if_ne	jmp	#LR__0570
0673c     00 12 06 F6 | 	mov	arg01, #0
06740     30 F3 BF FD | 	call	#_compile_immediate
06744     A0 00 90 FD | 	jmp	#LR__0577
06748                 | LR__0570
06748     67 00 00 FF 
0674c     60 E4 05 F1 | 	add	objptr, ##52832
06750     F2 1E 62 FC | 	wrlong	local01, objptr
06754     04 E4 05 F1 | 	add	objptr, #4
06758     F2 20 62 FC | 	wrlong	local02, objptr
0675c     67 00 00 FF 
06760     64 E4 85 F1 | 	sub	objptr, ##52836
06764     11 13 02 F6 | 	mov	arg01, local03
06768     01 12 06 F1 | 	add	arg01, #1
0676c     04 F3 BF FD | 	call	#_compile_immediate
06770     FD 24 0A F6 | 	mov	local04, result1 wz
06774                 | ' 
06774                 | ' ucompiledline(0)=alinemajor
06774                 | ' ucompiledline(1)=alineminor
06774                 | ' 
06774                 | ' 
06774                 | ' ' cont: 0: this is the first part of the line that will continue
06774                 | ' ' 1 - this is the continuation of the line
06774                 | ' ' 2 - this is the last continued line
06774                 | ' ' 3 - this is the ome and only part
06774                 | ' 
06774                 | ' err=compile_immediate(cont+1) 
06774                 | ' if err=0 then
06774     6C 00 90 5D |  if_ne	jmp	#LR__0576
06778                 | '   if cont=3 orelse cont=2 then 
06778     03 22 0E F2 | 	cmp	local03, #3 wz
0677c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06780     60 00 90 5D |  if_ne	jmp	#LR__0575
06784                 | '     if alinemajor >lastline then 
06784     6A 00 00 FF 
06788     6C E4 05 F1 | 	add	objptr, ##54380
0678c     F2 16 02 FB | 	rdlong	arg03, objptr
06790     6A 00 00 FF 
06794     6C E4 85 F1 | 	sub	objptr, ##54380
06798     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0679c     0C 00 90 ED |  if_be	jmp	#LR__0571
067a0     0F 13 02 F6 | 	mov	arg01, local01
067a4     0C F2 BF FD | 	call	#_add_line_at_end
067a8     38 00 90 FD | 	jmp	#LR__0574
067ac                 | LR__0571
067ac     0F 13 02 F6 | 	mov	arg01, local01
067b0     3C EB BF FD | 	call	#_deleteline
067b4                 | '       deleteline(alinemajor)  
067b4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
067b4     6A 00 00 FF 
067b8     6C E4 05 F1 | 	add	objptr, ##54380
067bc     F2 16 02 FB | 	rdlong	arg03, objptr
067c0     6A 00 00 FF 
067c4     6C E4 85 F1 | 	sub	objptr, ##54380
067c8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
067cc     0C 00 90 ED |  if_be	jmp	#LR__0572
067d0     0F 13 02 F6 | 	mov	arg01, local01
067d4     DC F1 BF FD | 	call	#_add_line_at_end
067d8     08 00 90 FD | 	jmp	#LR__0573
067dc                 | LR__0572
067dc     0F 13 02 F6 | 	mov	arg01, local01
067e0     B4 EF BF FD | 	call	#_insertline
067e4                 | LR__0573
067e4                 | LR__0574
067e4                 | LR__0575
067e4                 | LR__0576
067e4                 | ' return err
067e4     12 FB 01 F6 | 	mov	result1, local04
067e8                 | LR__0577
067e8     A7 F0 03 F6 | 	mov	ptra, fp
067ec     B2 00 A0 FD | 	call	#popregs_
067f0                 | _compile_ret
067f0     2D 00 64 FD | 	ret
067f4                 | 
067f4                 | ' 
067f4                 | ' ' ------------------ compile the line that is assigning to a variable
067f4                 | ' 
067f4                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
067f4                 | _compile_assign
067f4     03 4A 05 F6 | 	mov	COUNT_, #3
067f8     A8 00 A0 FD | 	call	#pushregs_
067fc     09 1F 0A F6 | 	mov	local01, arg01 wz
06800     0A 21 02 F6 | 	mov	local02, arg02
06804     0B 23 02 F6 | 	mov	local03, arg03
06808                 | ' 
06808                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06808                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06808     0C 00 90 5D |  if_ne	jmp	#LR__0580
0680c     00 12 06 F6 | 	mov	arg01, #0
06810     28 FC BF FD | 	call	#_compile_immediate_assign
06814     94 00 90 FD | 	jmp	#LR__0586
06818                 | LR__0580
06818     67 00 00 FF 
0681c     60 E4 05 F1 | 	add	objptr, ##52832
06820     F2 1E 62 FC | 	wrlong	local01, objptr
06824     04 E4 05 F1 | 	add	objptr, #4
06828     F2 20 62 FC | 	wrlong	local02, objptr
0682c     67 00 00 FF 
06830     64 E4 85 F1 | 	sub	objptr, ##52836
06834     11 13 02 F6 | 	mov	arg01, local03
06838     01 12 06 F1 | 	add	arg01, #1
0683c     FC FB BF FD | 	call	#_compile_immediate_assign
06840                 | ' 
06840                 | ' ucompiledline(0)=alinemajor
06840                 | ' ucompiledline(1)=alineminor
06840                 | ' 
06840                 | ' compile_immediate_assign(cont+1) 
06840                 | ' 
06840                 | ' if cont=3 orelse cont=2 then 
06840     03 22 0E F2 | 	cmp	local03, #3 wz
06844     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06848     60 00 90 5D |  if_ne	jmp	#LR__0585
0684c                 | '   if alinemajor >lastline then 
0684c     6A 00 00 FF 
06850     6C E4 05 F1 | 	add	objptr, ##54380
06854     F2 16 02 FB | 	rdlong	arg03, objptr
06858     6A 00 00 FF 
0685c     6C E4 85 F1 | 	sub	objptr, ##54380
06860     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06864     0C 00 90 ED |  if_be	jmp	#LR__0581
06868     0F 13 02 F6 | 	mov	arg01, local01
0686c     44 F1 BF FD | 	call	#_add_line_at_end
06870     38 00 90 FD | 	jmp	#LR__0584
06874                 | LR__0581
06874     0F 13 02 F6 | 	mov	arg01, local01
06878     74 EA BF FD | 	call	#_deleteline
0687c                 | '     deleteline(alinemajor)  
0687c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0687c     6A 00 00 FF 
06880     6C E4 05 F1 | 	add	objptr, ##54380
06884     F2 16 02 FB | 	rdlong	arg03, objptr
06888     6A 00 00 FF 
0688c     6C E4 85 F1 | 	sub	objptr, ##54380
06890     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06894     0C 00 90 ED |  if_be	jmp	#LR__0582
06898     0F 13 02 F6 | 	mov	arg01, local01
0689c     14 F1 BF FD | 	call	#_add_line_at_end
068a0     08 00 90 FD | 	jmp	#LR__0583
068a4                 | LR__0582
068a4     0F 13 02 F6 | 	mov	arg01, local01
068a8     EC EE BF FD | 	call	#_insertline
068ac                 | LR__0583
068ac                 | LR__0584
068ac                 | LR__0585
068ac                 | LR__0586
068ac     A7 F0 03 F6 | 	mov	ptra, fp
068b0     B2 00 A0 FD | 	call	#popregs_
068b4                 | _compile_assign_ret
068b4     2D 00 64 FD | 	ret
068b8                 | 
068b8                 | ' 
068b8                 | ' sub compile_error(errno)
068b8                 | _compile_error
068b8     FF 04 06 F6 | 	mov	_var03, #255
068bc     01 07 02 F6 | 	mov	_var04, _var02
068c0     02 09 02 F6 | 	mov	_var05, _var03
068c4     6A 00 00 FF 
068c8     60 E4 05 F1 | 	add	objptr, ##54368
068cc     F2 0A 02 FB | 	rdlong	_var06, objptr
068d0     05 0D 02 F6 | 	mov	_var07, _var06
068d4     01 0C 66 F0 | 	shl	_var07, #1
068d8     05 0D 02 F1 | 	add	_var07, _var06
068dc     02 0C 66 F0 | 	shl	_var07, #2
068e0     03 00 00 FF 
068e4     00 E4 85 F1 | 	sub	objptr, ##1536
068e8     F2 0C 02 F1 | 	add	_var07, objptr
068ec     06 13 62 FC | 	wrlong	arg01, _var07
068f0     03 00 00 FF 
068f4     00 E4 05 F1 | 	add	objptr, ##1536
068f8     F2 0C 02 FB | 	rdlong	_var07, objptr
068fc     06 0B 02 F6 | 	mov	_var06, _var07
06900     01 0A 66 F0 | 	shl	_var06, #1
06904     06 0B 02 F1 | 	add	_var06, _var07
06908     02 0A 66 F0 | 	shl	_var06, #2
0690c     03 00 00 FF 
06910     00 E4 85 F1 | 	sub	objptr, ##1536
06914     F2 0A 02 F1 | 	add	_var06, objptr
06918     04 0A 06 F1 | 	add	_var06, #4
0691c     05 07 62 FC | 	wrlong	_var04, _var06
06920     03 00 00 FF 
06924     00 E4 05 F1 | 	add	objptr, ##1536
06928     F2 0C 02 FB | 	rdlong	_var07, objptr
0692c     06 0B 02 F6 | 	mov	_var06, _var07
06930     01 0A 66 F0 | 	shl	_var06, #1
06934     06 0B 02 F1 | 	add	_var06, _var07
06938     02 0A 66 F0 | 	shl	_var06, #2
0693c     03 00 00 FF 
06940     00 E4 85 F1 | 	sub	objptr, ##1536
06944     F2 0A 02 F1 | 	add	_var06, objptr
06948     08 0A 06 F1 | 	add	_var06, #8
0694c     05 09 62 FC | 	wrlong	_var05, _var06
06950     03 00 00 FF 
06954     00 E4 05 F1 | 	add	objptr, ##1536
06958     F2 12 02 FB | 	rdlong	arg01, objptr
0695c     01 12 06 F1 | 	add	arg01, #1
06960     F2 12 62 FC | 	wrlong	arg01, objptr
06964     6A 00 00 FF 
06968     60 E4 85 F1 | 	sub	objptr, ##54368
0696c                 | _compile_error_ret
0696c     2D 00 64 FD | 	ret
06970                 | 
06970                 | ' 
06970                 | ' sub compile_unknown() 
06970                 | _compile_unknown
06970     FF 04 06 F6 | 	mov	_var03, #255
06974     17 00 06 F6 | 	mov	_var01, #23
06978     01 07 02 F6 | 	mov	_var04, _var02
0697c     02 01 02 F6 | 	mov	_var01, _var03
06980     6A 00 00 FF 
06984     60 E4 05 F1 | 	add	objptr, ##54368
06988     F2 08 02 FB | 	rdlong	_var05, objptr
0698c     04 0B 02 F6 | 	mov	_var06, _var05
06990     01 0A 66 F0 | 	shl	_var06, #1
06994     04 0B 02 F1 | 	add	_var06, _var05
06998     02 0A 66 F0 | 	shl	_var06, #2
0699c     03 00 00 FF 
069a0     00 E4 85 F1 | 	sub	objptr, ##1536
069a4     F2 0A 02 F1 | 	add	_var06, objptr
069a8     05 2F 68 FC | 	wrlong	#23, _var06
069ac     03 00 00 FF 
069b0     00 E4 05 F1 | 	add	objptr, ##1536
069b4     F2 0A 02 FB | 	rdlong	_var06, objptr
069b8     05 09 02 F6 | 	mov	_var05, _var06
069bc     01 08 66 F0 | 	shl	_var05, #1
069c0     05 09 02 F1 | 	add	_var05, _var06
069c4     02 08 66 F0 | 	shl	_var05, #2
069c8     03 00 00 FF 
069cc     00 E4 85 F1 | 	sub	objptr, ##1536
069d0     F2 08 02 F1 | 	add	_var05, objptr
069d4     04 08 06 F1 | 	add	_var05, #4
069d8     04 07 62 FC | 	wrlong	_var04, _var05
069dc     03 00 00 FF 
069e0     00 E4 05 F1 | 	add	objptr, ##1536
069e4     F2 0A 02 FB | 	rdlong	_var06, objptr
069e8     05 09 02 F6 | 	mov	_var05, _var06
069ec     01 08 66 F0 | 	shl	_var05, #1
069f0     05 09 02 F1 | 	add	_var05, _var06
069f4     02 08 66 F0 | 	shl	_var05, #2
069f8     03 00 00 FF 
069fc     00 E4 85 F1 | 	sub	objptr, ##1536
06a00     F2 08 02 F1 | 	add	_var05, objptr
06a04     08 08 06 F1 | 	add	_var05, #8
06a08     04 01 62 FC | 	wrlong	_var01, _var05
06a0c     03 00 00 FF 
06a10     00 E4 05 F1 | 	add	objptr, ##1536
06a14     F2 0A 02 FB | 	rdlong	_var06, objptr
06a18     01 0A 06 F1 | 	add	_var06, #1
06a1c     F2 0A 62 FC | 	wrlong	_var06, objptr
06a20     6A 00 00 FF 
06a24     60 E4 85 F1 | 	sub	objptr, ##54368
06a28                 | _compile_unknown_ret
06a28     2D 00 64 FD | 	ret
06a2c                 | 
06a2c                 | ' 
06a2c                 | ' function compile_fun_2p() as ulong
06a2c                 | _compile_fun_2p
06a2c     01 4A 05 F6 | 	mov	COUNT_, #1
06a30     A8 00 A0 FD | 	call	#pushregs_
06a34     D0 22 B0 FD | 	call	#_expr
06a38                 | ' 
06a38                 | ' expr()
06a38                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06a38     57 00 00 FF 
06a3c     28 E4 05 F1 | 	add	objptr, ##44584
06a40     F2 1E 02 FB | 	rdlong	local01, objptr
06a44     03 1E 66 F0 | 	shl	local01, #3
06a48     02 00 00 FF 
06a4c     38 E4 85 F1 | 	sub	objptr, ##1080
06a50     F2 1E 02 F1 | 	add	local01, objptr
06a54     04 1E 06 F1 | 	add	local01, #4
06a58     0F 1F 02 FB | 	rdlong	local01, local01
06a5c     11 1E 0E F2 | 	cmp	local01, #17 wz
06a60     54 00 00 FF 
06a64     F0 E5 85 F1 | 	sub	objptr, ##43504
06a68     15 FA 05 56 |  if_ne	mov	result1, #21
06a6c     24 00 90 5D |  if_ne	jmp	#LR__0590
06a70     57 00 00 FF 
06a74     28 E4 05 F1 | 	add	objptr, ##44584
06a78     F2 1E 02 FB | 	rdlong	local01, objptr
06a7c     01 1E 06 F1 | 	add	local01, #1
06a80     F2 1E 62 FC | 	wrlong	local01, objptr
06a84     57 00 00 FF 
06a88     28 E4 85 F1 | 	sub	objptr, ##44584
06a8c     78 22 B0 FD | 	call	#_expr
06a90     00 FA 05 F6 | 	mov	result1, #0
06a94                 | LR__0590
06a94     A7 F0 03 F6 | 	mov	ptra, fp
06a98     B2 00 A0 FD | 	call	#popregs_
06a9c                 | _compile_fun_2p_ret
06a9c     2D 00 64 FD | 	ret
06aa0                 | 
06aa0                 | ' 
06aa0                 | ' function compile_fun_3p() as ulong
06aa0                 | _compile_fun_3p
06aa0     01 4A 05 F6 | 	mov	COUNT_, #1
06aa4     A8 00 A0 FD | 	call	#pushregs_
06aa8     5C 22 B0 FD | 	call	#_expr
06aac                 | ' 
06aac                 | ' expr()
06aac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06aac     57 00 00 FF 
06ab0     28 E4 05 F1 | 	add	objptr, ##44584
06ab4     F2 1E 02 FB | 	rdlong	local01, objptr
06ab8     03 1E 66 F0 | 	shl	local01, #3
06abc     02 00 00 FF 
06ac0     38 E4 85 F1 | 	sub	objptr, ##1080
06ac4     F2 1E 02 F1 | 	add	local01, objptr
06ac8     04 1E 06 F1 | 	add	local01, #4
06acc     0F 1F 02 FB | 	rdlong	local01, local01
06ad0     11 1E 0E F2 | 	cmp	local01, #17 wz
06ad4     54 00 00 FF 
06ad8     F0 E5 85 F1 | 	sub	objptr, ##43504
06adc     15 FA 05 56 |  if_ne	mov	result1, #21
06ae0     7C 00 90 5D |  if_ne	jmp	#LR__0600
06ae4     57 00 00 FF 
06ae8     28 E4 05 F1 | 	add	objptr, ##44584
06aec     F2 1E 02 FB | 	rdlong	local01, objptr
06af0     01 1E 06 F1 | 	add	local01, #1
06af4     F2 1E 62 FC | 	wrlong	local01, objptr
06af8     57 00 00 FF 
06afc     28 E4 85 F1 | 	sub	objptr, ##44584
06b00     04 22 B0 FD | 	call	#_expr
06b04                 | ' expr()
06b04                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b04     57 00 00 FF 
06b08     28 E4 05 F1 | 	add	objptr, ##44584
06b0c     F2 1E 02 FB | 	rdlong	local01, objptr
06b10     03 1E 66 F0 | 	shl	local01, #3
06b14     02 00 00 FF 
06b18     38 E4 85 F1 | 	sub	objptr, ##1080
06b1c     F2 1E 02 F1 | 	add	local01, objptr
06b20     04 1E 06 F1 | 	add	local01, #4
06b24     0F 1F 02 FB | 	rdlong	local01, local01
06b28     11 1E 0E F2 | 	cmp	local01, #17 wz
06b2c     54 00 00 FF 
06b30     F0 E5 85 F1 | 	sub	objptr, ##43504
06b34     15 FA 05 56 |  if_ne	mov	result1, #21
06b38     24 00 90 5D |  if_ne	jmp	#LR__0600
06b3c     57 00 00 FF 
06b40     28 E4 05 F1 | 	add	objptr, ##44584
06b44     F2 1E 02 FB | 	rdlong	local01, objptr
06b48     01 1E 06 F1 | 	add	local01, #1
06b4c     F2 1E 62 FC | 	wrlong	local01, objptr
06b50     57 00 00 FF 
06b54     28 E4 85 F1 | 	sub	objptr, ##44584
06b58     AC 21 B0 FD | 	call	#_expr
06b5c     00 FA 05 F6 | 	mov	result1, #0
06b60                 | LR__0600
06b60     A7 F0 03 F6 | 	mov	ptra, fp
06b64     B2 00 A0 FD | 	call	#popregs_
06b68                 | _compile_fun_3p_ret
06b68     2D 00 64 FD | 	ret
06b6c                 | 
06b6c                 | ' 
06b6c                 | ' function compile_fun_4p() as ulong
06b6c                 | _compile_fun_4p
06b6c     01 4A 05 F6 | 	mov	COUNT_, #1
06b70     A8 00 A0 FD | 	call	#pushregs_
06b74     90 21 B0 FD | 	call	#_expr
06b78                 | ' 
06b78                 | ' expr()
06b78                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b78     57 00 00 FF 
06b7c     28 E4 05 F1 | 	add	objptr, ##44584
06b80     F2 1E 02 FB | 	rdlong	local01, objptr
06b84     03 1E 66 F0 | 	shl	local01, #3
06b88     02 00 00 FF 
06b8c     38 E4 85 F1 | 	sub	objptr, ##1080
06b90     F2 1E 02 F1 | 	add	local01, objptr
06b94     04 1E 06 F1 | 	add	local01, #4
06b98     0F 1F 02 FB | 	rdlong	local01, local01
06b9c     11 1E 0E F2 | 	cmp	local01, #17 wz
06ba0     54 00 00 FF 
06ba4     F0 E5 85 F1 | 	sub	objptr, ##43504
06ba8     15 FA 05 56 |  if_ne	mov	result1, #21
06bac     D4 00 90 5D |  if_ne	jmp	#LR__0610
06bb0     57 00 00 FF 
06bb4     28 E4 05 F1 | 	add	objptr, ##44584
06bb8     F2 1E 02 FB | 	rdlong	local01, objptr
06bbc     01 1E 06 F1 | 	add	local01, #1
06bc0     F2 1E 62 FC | 	wrlong	local01, objptr
06bc4     57 00 00 FF 
06bc8     28 E4 85 F1 | 	sub	objptr, ##44584
06bcc     38 21 B0 FD | 	call	#_expr
06bd0                 | ' expr()
06bd0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06bd0     57 00 00 FF 
06bd4     28 E4 05 F1 | 	add	objptr, ##44584
06bd8     F2 1E 02 FB | 	rdlong	local01, objptr
06bdc     03 1E 66 F0 | 	shl	local01, #3
06be0     02 00 00 FF 
06be4     38 E4 85 F1 | 	sub	objptr, ##1080
06be8     F2 1E 02 F1 | 	add	local01, objptr
06bec     04 1E 06 F1 | 	add	local01, #4
06bf0     0F 1F 02 FB | 	rdlong	local01, local01
06bf4     11 1E 0E F2 | 	cmp	local01, #17 wz
06bf8     54 00 00 FF 
06bfc     F0 E5 85 F1 | 	sub	objptr, ##43504
06c00     15 FA 05 56 |  if_ne	mov	result1, #21
06c04     7C 00 90 5D |  if_ne	jmp	#LR__0610
06c08     57 00 00 FF 
06c0c     28 E4 05 F1 | 	add	objptr, ##44584
06c10     F2 1E 02 FB | 	rdlong	local01, objptr
06c14     01 1E 06 F1 | 	add	local01, #1
06c18     F2 1E 62 FC | 	wrlong	local01, objptr
06c1c     57 00 00 FF 
06c20     28 E4 85 F1 | 	sub	objptr, ##44584
06c24     E0 20 B0 FD | 	call	#_expr
06c28                 | ' expr()
06c28                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c28     57 00 00 FF 
06c2c     28 E4 05 F1 | 	add	objptr, ##44584
06c30     F2 1E 02 FB | 	rdlong	local01, objptr
06c34     03 1E 66 F0 | 	shl	local01, #3
06c38     02 00 00 FF 
06c3c     38 E4 85 F1 | 	sub	objptr, ##1080
06c40     F2 1E 02 F1 | 	add	local01, objptr
06c44     04 1E 06 F1 | 	add	local01, #4
06c48     0F 1F 02 FB | 	rdlong	local01, local01
06c4c     11 1E 0E F2 | 	cmp	local01, #17 wz
06c50     54 00 00 FF 
06c54     F0 E5 85 F1 | 	sub	objptr, ##43504
06c58     15 FA 05 56 |  if_ne	mov	result1, #21
06c5c     24 00 90 5D |  if_ne	jmp	#LR__0610
06c60     57 00 00 FF 
06c64     28 E4 05 F1 | 	add	objptr, ##44584
06c68     F2 1E 02 FB | 	rdlong	local01, objptr
06c6c     01 1E 06 F1 | 	add	local01, #1
06c70     F2 1E 62 FC | 	wrlong	local01, objptr
06c74     57 00 00 FF 
06c78     28 E4 85 F1 | 	sub	objptr, ##44584
06c7c     88 20 B0 FD | 	call	#_expr
06c80     00 FA 05 F6 | 	mov	result1, #0
06c84                 | LR__0610
06c84     A7 F0 03 F6 | 	mov	ptra, fp
06c88     B2 00 A0 FD | 	call	#popregs_
06c8c                 | _compile_fun_4p_ret
06c8c     2D 00 64 FD | 	ret
06c90                 | 
06c90                 | ' 
06c90                 | ' 
06c90                 | ' function compile_fun_5p() as ulong
06c90                 | _compile_fun_5p
06c90     01 4A 05 F6 | 	mov	COUNT_, #1
06c94     A8 00 A0 FD | 	call	#pushregs_
06c98     6C 20 B0 FD | 	call	#_expr
06c9c                 | ' 
06c9c                 | ' expr()
06c9c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c9c     57 00 00 FF 
06ca0     28 E4 05 F1 | 	add	objptr, ##44584
06ca4     F2 1E 02 FB | 	rdlong	local01, objptr
06ca8     03 1E 66 F0 | 	shl	local01, #3
06cac     02 00 00 FF 
06cb0     38 E4 85 F1 | 	sub	objptr, ##1080
06cb4     F2 1E 02 F1 | 	add	local01, objptr
06cb8     04 1E 06 F1 | 	add	local01, #4
06cbc     0F 1F 02 FB | 	rdlong	local01, local01
06cc0     11 1E 0E F2 | 	cmp	local01, #17 wz
06cc4     54 00 00 FF 
06cc8     F0 E5 85 F1 | 	sub	objptr, ##43504
06ccc     15 FA 05 56 |  if_ne	mov	result1, #21
06cd0     2C 01 90 5D |  if_ne	jmp	#LR__0620
06cd4     57 00 00 FF 
06cd8     28 E4 05 F1 | 	add	objptr, ##44584
06cdc     F2 1E 02 FB | 	rdlong	local01, objptr
06ce0     01 1E 06 F1 | 	add	local01, #1
06ce4     F2 1E 62 FC | 	wrlong	local01, objptr
06ce8     57 00 00 FF 
06cec     28 E4 85 F1 | 	sub	objptr, ##44584
06cf0     14 20 B0 FD | 	call	#_expr
06cf4                 | ' expr()
06cf4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cf4     57 00 00 FF 
06cf8     28 E4 05 F1 | 	add	objptr, ##44584
06cfc     F2 1E 02 FB | 	rdlong	local01, objptr
06d00     03 1E 66 F0 | 	shl	local01, #3
06d04     02 00 00 FF 
06d08     38 E4 85 F1 | 	sub	objptr, ##1080
06d0c     F2 1E 02 F1 | 	add	local01, objptr
06d10     04 1E 06 F1 | 	add	local01, #4
06d14     0F 1F 02 FB | 	rdlong	local01, local01
06d18     11 1E 0E F2 | 	cmp	local01, #17 wz
06d1c     54 00 00 FF 
06d20     F0 E5 85 F1 | 	sub	objptr, ##43504
06d24     15 FA 05 56 |  if_ne	mov	result1, #21
06d28     D4 00 90 5D |  if_ne	jmp	#LR__0620
06d2c     57 00 00 FF 
06d30     28 E4 05 F1 | 	add	objptr, ##44584
06d34     F2 1E 02 FB | 	rdlong	local01, objptr
06d38     01 1E 06 F1 | 	add	local01, #1
06d3c     F2 1E 62 FC | 	wrlong	local01, objptr
06d40     57 00 00 FF 
06d44     28 E4 85 F1 | 	sub	objptr, ##44584
06d48     BC 1F B0 FD | 	call	#_expr
06d4c                 | ' expr()
06d4c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d4c     57 00 00 FF 
06d50     28 E4 05 F1 | 	add	objptr, ##44584
06d54     F2 1E 02 FB | 	rdlong	local01, objptr
06d58     03 1E 66 F0 | 	shl	local01, #3
06d5c     02 00 00 FF 
06d60     38 E4 85 F1 | 	sub	objptr, ##1080
06d64     F2 1E 02 F1 | 	add	local01, objptr
06d68     04 1E 06 F1 | 	add	local01, #4
06d6c     0F 1F 02 FB | 	rdlong	local01, local01
06d70     11 1E 0E F2 | 	cmp	local01, #17 wz
06d74     54 00 00 FF 
06d78     F0 E5 85 F1 | 	sub	objptr, ##43504
06d7c     15 FA 05 56 |  if_ne	mov	result1, #21
06d80     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d84     57 00 00 FF 
06d88     28 E4 05 F1 | 	add	objptr, ##44584
06d8c     F2 1E 02 FB | 	rdlong	local01, objptr
06d90     01 1E 06 F1 | 	add	local01, #1
06d94     F2 1E 62 FC | 	wrlong	local01, objptr
06d98     57 00 00 FF 
06d9c     28 E4 85 F1 | 	sub	objptr, ##44584
06da0     64 1F B0 FD | 	call	#_expr
06da4                 | ' expr()
06da4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06da4     57 00 00 FF 
06da8     28 E4 05 F1 | 	add	objptr, ##44584
06dac     F2 1E 02 FB | 	rdlong	local01, objptr
06db0     03 1E 66 F0 | 	shl	local01, #3
06db4     02 00 00 FF 
06db8     38 E4 85 F1 | 	sub	objptr, ##1080
06dbc     F2 1E 02 F1 | 	add	local01, objptr
06dc0     04 1E 06 F1 | 	add	local01, #4
06dc4     0F 1F 02 FB | 	rdlong	local01, local01
06dc8     11 1E 0E F2 | 	cmp	local01, #17 wz
06dcc     54 00 00 FF 
06dd0     F0 E5 85 F1 | 	sub	objptr, ##43504
06dd4     15 FA 05 56 |  if_ne	mov	result1, #21
06dd8     24 00 90 5D |  if_ne	jmp	#LR__0620
06ddc     57 00 00 FF 
06de0     28 E4 05 F1 | 	add	objptr, ##44584
06de4     F2 1E 02 FB | 	rdlong	local01, objptr
06de8     01 1E 06 F1 | 	add	local01, #1
06dec     F2 1E 62 FC | 	wrlong	local01, objptr
06df0     57 00 00 FF 
06df4     28 E4 85 F1 | 	sub	objptr, ##44584
06df8     0C 1F B0 FD | 	call	#_expr
06dfc     00 FA 05 F6 | 	mov	result1, #0
06e00                 | LR__0620
06e00     A7 F0 03 F6 | 	mov	ptra, fp
06e04     B2 00 A0 FD | 	call	#popregs_
06e08                 | _compile_fun_5p_ret
06e08     2D 00 64 FD | 	ret
06e0c                 | 
06e0c                 | ' 
06e0c                 | ' function compile_fun_varp() as ulong 
06e0c                 | _compile_fun_varp
06e0c     02 4A 05 F6 | 	mov	COUNT_, #2
06e10     A8 00 A0 FD | 	call	#pushregs_
06e14     00 1E 06 F6 | 	mov	local01, #0
06e18                 | ' i=0
06e18                 | ' if lparts(ct).token<>token_end then
06e18     57 00 00 FF 
06e1c     28 E4 05 F1 | 	add	objptr, ##44584
06e20     F2 20 02 FB | 	rdlong	local02, objptr
06e24     03 20 66 F0 | 	shl	local02, #3
06e28     02 00 00 FF 
06e2c     38 E4 85 F1 | 	sub	objptr, ##1080
06e30     F2 20 02 F1 | 	add	local02, objptr
06e34     04 20 06 F1 | 	add	local02, #4
06e38     10 21 02 FB | 	rdlong	local02, local02
06e3c     FE 21 0E F2 | 	cmp	local02, #510 wz
06e40     54 00 00 FF 
06e44     F0 E5 85 F1 | 	sub	objptr, ##43504
06e48     5C 00 90 AD |  if_e	jmp	#LR__0632
06e4c                 | '   do
06e4c                 | LR__0630
06e4c     B8 1E B0 FD | 	call	#_expr
06e50     01 1E 06 F1 | 	add	local01, #1
06e54                 | '   expr()
06e54                 | '    i+=1
06e54                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06e54     57 00 00 FF 
06e58     28 E4 05 F1 | 	add	objptr, ##44584
06e5c     F2 20 02 FB | 	rdlong	local02, objptr
06e60     03 20 66 F0 | 	shl	local02, #3
06e64     02 00 00 FF 
06e68     38 E4 85 F1 | 	sub	objptr, ##1080
06e6c     F2 20 02 F1 | 	add	local02, objptr
06e70     04 20 06 F1 | 	add	local02, #4
06e74     10 21 02 FB | 	rdlong	local02, local02
06e78     11 20 0E F2 | 	cmp	local02, #17 wz
06e7c     54 00 00 FF 
06e80     F0 E5 85 F1 | 	sub	objptr, ##43504
06e84     20 00 90 5D |  if_ne	jmp	#LR__0631
06e88     57 00 00 FF 
06e8c     28 E4 05 F1 | 	add	objptr, ##44584
06e90     F2 20 02 FB | 	rdlong	local02, objptr
06e94     01 20 06 F1 | 	add	local02, #1
06e98     F2 20 62 FC | 	wrlong	local02, objptr
06e9c     57 00 00 FF 
06ea0     28 E4 85 F1 | 	sub	objptr, ##44584
06ea4     A4 FF 9F FD | 	jmp	#LR__0630
06ea8                 | LR__0631
06ea8                 | LR__0632
06ea8                 | ' return i
06ea8     0F FB 01 F6 | 	mov	result1, local01
06eac     A7 F0 03 F6 | 	mov	ptra, fp
06eb0     B2 00 A0 FD | 	call	#popregs_
06eb4                 | _compile_fun_varp_ret
06eb4     2D 00 64 FD | 	ret
06eb8                 | 
06eb8                 | ' 
06eb8                 | ' 
06eb8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06eb8                 | _compile_print
06eb8     0B 4A 05 F6 | 	mov	COUNT_, #11
06ebc     A8 00 A0 FD | 	call	#pushregs_
06ec0     00 1E 06 F6 | 	mov	local01, #0
06ec4     1D 22 06 F6 | 	mov	local03, #29
06ec8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06ec8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06ec8     57 00 00 FF 
06ecc     28 E4 05 F1 | 	add	objptr, ##44584
06ed0     F2 24 02 FB | 	rdlong	local04, objptr
06ed4     03 24 66 F0 | 	shl	local04, #3
06ed8     02 00 00 FF 
06edc     38 E4 85 F1 | 	sub	objptr, ##1080
06ee0     F2 24 02 F1 | 	add	local04, objptr
06ee4     04 24 06 F1 | 	add	local04, #4
06ee8     12 25 02 FB | 	rdlong	local04, local04
06eec     FE 25 0E F2 | 	cmp	local04, #510 wz
06ef0     54 00 00 FF 
06ef4     F0 E5 85 F1 | 	sub	objptr, ##43504
06ef8     68 01 90 5D |  if_ne	jmp	#LR__0640
06efc     20 22 06 F6 | 	mov	local03, #32
06f00     0F 27 02 F6 | 	mov	local05, local01
06f04     10 29 02 F6 | 	mov	local06, local02
06f08     11 2B 02 F6 | 	mov	local07, local03
06f0c     6A 00 00 FF 
06f10     60 E4 05 F1 | 	add	objptr, ##54368
06f14     F2 2C 02 FB | 	rdlong	local08, objptr
06f18     16 2F 02 F6 | 	mov	local09, local08
06f1c     01 2E 66 F0 | 	shl	local09, #1
06f20     16 2F 02 F1 | 	add	local09, local08
06f24     02 2E 66 F0 | 	shl	local09, #2
06f28     03 00 00 FF 
06f2c     00 E4 85 F1 | 	sub	objptr, ##1536
06f30     F2 2E 02 F1 | 	add	local09, objptr
06f34     17 27 62 FC | 	wrlong	local05, local09
06f38     03 00 00 FF 
06f3c     00 E4 05 F1 | 	add	objptr, ##1536
06f40     F2 26 02 FB | 	rdlong	local05, objptr
06f44     13 31 02 F6 | 	mov	local10, local05
06f48     01 30 66 F0 | 	shl	local10, #1
06f4c     13 31 02 F1 | 	add	local10, local05
06f50     02 30 66 F0 | 	shl	local10, #2
06f54     03 00 00 FF 
06f58     00 E4 85 F1 | 	sub	objptr, ##1536
06f5c     F2 30 02 F1 | 	add	local10, objptr
06f60     04 30 06 F1 | 	add	local10, #4
06f64     18 29 62 FC | 	wrlong	local06, local10
06f68     03 00 00 FF 
06f6c     00 E4 05 F1 | 	add	objptr, ##1536
06f70     F2 26 02 FB | 	rdlong	local05, objptr
06f74     13 33 02 F6 | 	mov	local11, local05
06f78     01 32 66 F0 | 	shl	local11, #1
06f7c     13 33 02 F1 | 	add	local11, local05
06f80     02 32 66 F0 | 	shl	local11, #2
06f84     03 00 00 FF 
06f88     00 E4 85 F1 | 	sub	objptr, ##1536
06f8c     F2 32 02 F1 | 	add	local11, objptr
06f90     08 32 06 F1 | 	add	local11, #8
06f94     19 2B 62 FC | 	wrlong	local07, local11
06f98     03 00 00 FF 
06f9c     00 E4 05 F1 | 	add	objptr, ##1536
06fa0     F2 26 02 FB | 	rdlong	local05, objptr
06fa4     01 26 06 F1 | 	add	local05, #1
06fa8     F2 26 62 FC | 	wrlong	local05, objptr
06fac     44 22 06 F6 | 	mov	local03, #68
06fb0     0F 27 02 F6 | 	mov	local05, local01
06fb4     10 29 02 F6 | 	mov	local06, local02
06fb8     11 2B 02 F6 | 	mov	local07, local03
06fbc     F2 2C 02 FB | 	rdlong	local08, objptr
06fc0     16 2F 02 F6 | 	mov	local09, local08
06fc4     01 2E 66 F0 | 	shl	local09, #1
06fc8     16 2F 02 F1 | 	add	local09, local08
06fcc     02 2E 66 F0 | 	shl	local09, #2
06fd0     03 00 00 FF 
06fd4     00 E4 85 F1 | 	sub	objptr, ##1536
06fd8     F2 2E 02 F1 | 	add	local09, objptr
06fdc     17 27 62 FC | 	wrlong	local05, local09
06fe0     03 00 00 FF 
06fe4     00 E4 05 F1 | 	add	objptr, ##1536
06fe8     F2 32 02 FB | 	rdlong	local11, objptr
06fec     19 31 02 F6 | 	mov	local10, local11
06ff0     01 30 66 F0 | 	shl	local10, #1
06ff4     19 31 02 F1 | 	add	local10, local11
06ff8     02 30 66 F0 | 	shl	local10, #2
06ffc     03 00 00 FF 
07000     00 E4 85 F1 | 	sub	objptr, ##1536
07004     F2 30 02 F1 | 	add	local10, objptr
07008     04 30 06 F1 | 	add	local10, #4
0700c     18 29 62 FC | 	wrlong	local06, local10
07010     03 00 00 FF 
07014     00 E4 05 F1 | 	add	objptr, ##1536
07018     F2 30 02 FB | 	rdlong	local10, objptr
0701c     18 33 02 F6 | 	mov	local11, local10
07020     01 32 66 F0 | 	shl	local11, #1
07024     18 33 02 F1 | 	add	local11, local10
07028     02 32 66 F0 | 	shl	local11, #2
0702c     03 00 00 FF 
07030     00 E4 85 F1 | 	sub	objptr, ##1536
07034     F2 32 02 F1 | 	add	local11, objptr
07038     08 32 06 F1 | 	add	local11, #8
0703c     19 2B 62 FC | 	wrlong	local07, local11
07040     03 00 00 FF 
07044     00 E4 05 F1 | 	add	objptr, ##1536
07048     F2 26 02 FB | 	rdlong	local05, objptr
0704c     01 26 06 F1 | 	add	local05, #1
07050     F2 26 62 FC | 	wrlong	local05, objptr
07054     6A 00 00 FF 
07058     60 E4 85 F1 | 	sub	objptr, ##54368
0705c     00 FA 05 F6 | 	mov	result1, #0
07060     20 05 90 FD | 	jmp	#LR__0647
07064                 | LR__0640
07064                 | ' do
07064                 | LR__0641
07064     A0 1C B0 FD | 	call	#_expr
07068                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
07068                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07068     57 00 00 FF 
0706c     28 E4 05 F1 | 	add	objptr, ##44584
07070     F2 24 02 FB | 	rdlong	local04, objptr
07074     03 24 66 F0 | 	shl	local04, #3
07078     02 00 00 FF 
0707c     38 E4 85 F1 | 	sub	objptr, ##1080
07080     F2 24 02 F1 | 	add	local04, objptr
07084     04 24 06 F1 | 	add	local04, #4
07088     12 2D 02 FB | 	rdlong	local08, local04
0708c     11 2C 0E F2 | 	cmp	local08, #17 wz
07090     54 00 00 FF 
07094     F0 E5 85 F1 | 	sub	objptr, ##43504
07098     60 01 90 5D |  if_ne	jmp	#LR__0642
0709c     21 22 06 F6 | 	mov	local03, #33
070a0     0F 27 02 F6 | 	mov	local05, local01
070a4     10 29 02 F6 | 	mov	local06, local02
070a8     11 2B 02 F6 | 	mov	local07, local03
070ac     6A 00 00 FF 
070b0     60 E4 05 F1 | 	add	objptr, ##54368
070b4     F2 2C 02 FB | 	rdlong	local08, objptr
070b8     16 2F 02 F6 | 	mov	local09, local08
070bc     01 2E 66 F0 | 	shl	local09, #1
070c0     16 2F 02 F1 | 	add	local09, local08
070c4     02 2E 66 F0 | 	shl	local09, #2
070c8     03 00 00 FF 
070cc     00 E4 85 F1 | 	sub	objptr, ##1536
070d0     F2 2E 02 F1 | 	add	local09, objptr
070d4     17 27 62 FC | 	wrlong	local05, local09
070d8     03 00 00 FF 
070dc     00 E4 05 F1 | 	add	objptr, ##1536
070e0     F2 32 02 FB | 	rdlong	local11, objptr
070e4     19 31 02 F6 | 	mov	local10, local11
070e8     01 30 66 F0 | 	shl	local10, #1
070ec     19 31 02 F1 | 	add	local10, local11
070f0     02 30 66 F0 | 	shl	local10, #2
070f4     03 00 00 FF 
070f8     00 E4 85 F1 | 	sub	objptr, ##1536
070fc     F2 30 02 F1 | 	add	local10, objptr
07100     04 30 06 F1 | 	add	local10, #4
07104     18 29 62 FC | 	wrlong	local06, local10
07108     03 00 00 FF 
0710c     00 E4 05 F1 | 	add	objptr, ##1536
07110     F2 26 02 FB | 	rdlong	local05, objptr
07114     13 33 02 F6 | 	mov	local11, local05
07118     01 32 66 F0 | 	shl	local11, #1
0711c     13 33 02 F1 | 	add	local11, local05
07120     02 32 66 F0 | 	shl	local11, #2
07124     03 00 00 FF 
07128     00 E4 85 F1 | 	sub	objptr, ##1536
0712c     F2 32 02 F1 | 	add	local11, objptr
07130     08 32 06 F1 | 	add	local11, #8
07134     19 2B 62 FC | 	wrlong	local07, local11
07138     03 00 00 FF 
0713c     00 E4 05 F1 | 	add	objptr, ##1536
07140     F2 26 02 FB | 	rdlong	local05, objptr
07144     01 26 06 F1 | 	add	local05, #1
07148     F2 26 62 FC | 	wrlong	local05, objptr
0714c     44 22 06 F6 | 	mov	local03, #68
07150     0F 27 02 F6 | 	mov	local05, local01
07154     10 29 02 F6 | 	mov	local06, local02
07158     11 2B 02 F6 | 	mov	local07, local03
0715c     F2 2C 02 FB | 	rdlong	local08, objptr
07160     16 2F 02 F6 | 	mov	local09, local08
07164     01 2E 66 F0 | 	shl	local09, #1
07168     16 2F 02 F1 | 	add	local09, local08
0716c     02 2E 66 F0 | 	shl	local09, #2
07170     03 00 00 FF 
07174     00 E4 85 F1 | 	sub	objptr, ##1536
07178     F2 2E 02 F1 | 	add	local09, objptr
0717c     17 27 62 FC | 	wrlong	local05, local09
07180     03 00 00 FF 
07184     00 E4 05 F1 | 	add	objptr, ##1536
07188     F2 32 02 FB | 	rdlong	local11, objptr
0718c     19 31 02 F6 | 	mov	local10, local11
07190     01 30 66 F0 | 	shl	local10, #1
07194     19 31 02 F1 | 	add	local10, local11
07198     02 30 66 F0 | 	shl	local10, #2
0719c     03 00 00 FF 
071a0     00 E4 85 F1 | 	sub	objptr, ##1536
071a4     F2 30 02 F1 | 	add	local10, objptr
071a8     04 30 06 F1 | 	add	local10, #4
071ac     18 29 62 FC | 	wrlong	local06, local10
071b0     03 00 00 FF 
071b4     00 E4 05 F1 | 	add	objptr, ##1536
071b8     F2 30 02 FB | 	rdlong	local10, objptr
071bc     18 33 02 F6 | 	mov	local11, local10
071c0     01 32 66 F0 | 	shl	local11, #1
071c4     18 33 02 F1 | 	add	local11, local10
071c8     02 32 66 F0 | 	shl	local11, #2
071cc     03 00 00 FF 
071d0     00 E4 85 F1 | 	sub	objptr, ##1536
071d4     F2 32 02 F1 | 	add	local11, objptr
071d8     08 32 06 F1 | 	add	local11, #8
071dc     19 2B 62 FC | 	wrlong	local07, local11
071e0     03 00 00 FF 
071e4     00 E4 05 F1 | 	add	objptr, ##1536
071e8     F2 26 02 FB | 	rdlong	local05, objptr
071ec     01 26 06 F1 | 	add	local05, #1
071f0     F2 26 62 FC | 	wrlong	local05, objptr
071f4     6A 00 00 FF 
071f8     60 E4 85 F1 | 	sub	objptr, ##54368
071fc                 | LR__0642
071fc                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
071fc     57 00 00 FF 
07200     28 E4 05 F1 | 	add	objptr, ##44584
07204     F2 24 02 FB | 	rdlong	local04, objptr
07208     03 24 66 F0 | 	shl	local04, #3
0720c     02 00 00 FF 
07210     38 E4 85 F1 | 	sub	objptr, ##1080
07214     F2 24 02 F1 | 	add	local04, objptr
07218     04 24 06 F1 | 	add	local04, #4
0721c     12 2D 02 FB | 	rdlong	local08, local04
07220     12 2C 0E F2 | 	cmp	local08, #18 wz
07224     54 00 00 FF 
07228     F0 E5 85 F1 | 	sub	objptr, ##43504
0722c     60 01 90 5D |  if_ne	jmp	#LR__0643
07230     22 22 06 F6 | 	mov	local03, #34
07234     0F 27 02 F6 | 	mov	local05, local01
07238     10 29 02 F6 | 	mov	local06, local02
0723c     11 2B 02 F6 | 	mov	local07, local03
07240     6A 00 00 FF 
07244     60 E4 05 F1 | 	add	objptr, ##54368
07248     F2 2C 02 FB | 	rdlong	local08, objptr
0724c     16 2F 02 F6 | 	mov	local09, local08
07250     01 2E 66 F0 | 	shl	local09, #1
07254     16 2F 02 F1 | 	add	local09, local08
07258     02 2E 66 F0 | 	shl	local09, #2
0725c     03 00 00 FF 
07260     00 E4 85 F1 | 	sub	objptr, ##1536
07264     F2 2E 02 F1 | 	add	local09, objptr
07268     17 27 62 FC | 	wrlong	local05, local09
0726c     03 00 00 FF 
07270     00 E4 05 F1 | 	add	objptr, ##1536
07274     F2 32 02 FB | 	rdlong	local11, objptr
07278     19 31 02 F6 | 	mov	local10, local11
0727c     01 30 66 F0 | 	shl	local10, #1
07280     19 31 02 F1 | 	add	local10, local11
07284     02 30 66 F0 | 	shl	local10, #2
07288     03 00 00 FF 
0728c     00 E4 85 F1 | 	sub	objptr, ##1536
07290     F2 30 02 F1 | 	add	local10, objptr
07294     04 30 06 F1 | 	add	local10, #4
07298     18 29 62 FC | 	wrlong	local06, local10
0729c     03 00 00 FF 
072a0     00 E4 05 F1 | 	add	objptr, ##1536
072a4     F2 26 02 FB | 	rdlong	local05, objptr
072a8     13 33 02 F6 | 	mov	local11, local05
072ac     01 32 66 F0 | 	shl	local11, #1
072b0     13 33 02 F1 | 	add	local11, local05
072b4     02 32 66 F0 | 	shl	local11, #2
072b8     03 00 00 FF 
072bc     00 E4 85 F1 | 	sub	objptr, ##1536
072c0     F2 32 02 F1 | 	add	local11, objptr
072c4     08 32 06 F1 | 	add	local11, #8
072c8     19 2B 62 FC | 	wrlong	local07, local11
072cc     03 00 00 FF 
072d0     00 E4 05 F1 | 	add	objptr, ##1536
072d4     F2 26 02 FB | 	rdlong	local05, objptr
072d8     01 26 06 F1 | 	add	local05, #1
072dc     F2 26 62 FC | 	wrlong	local05, objptr
072e0     44 22 06 F6 | 	mov	local03, #68
072e4     0F 27 02 F6 | 	mov	local05, local01
072e8     10 29 02 F6 | 	mov	local06, local02
072ec     11 2B 02 F6 | 	mov	local07, local03
072f0     F2 2C 02 FB | 	rdlong	local08, objptr
072f4     16 2F 02 F6 | 	mov	local09, local08
072f8     01 2E 66 F0 | 	shl	local09, #1
072fc     16 2F 02 F1 | 	add	local09, local08
07300     02 2E 66 F0 | 	shl	local09, #2
07304     03 00 00 FF 
07308     00 E4 85 F1 | 	sub	objptr, ##1536
0730c     F2 2E 02 F1 | 	add	local09, objptr
07310     17 27 62 FC | 	wrlong	local05, local09
07314     03 00 00 FF 
07318     00 E4 05 F1 | 	add	objptr, ##1536
0731c     F2 32 02 FB | 	rdlong	local11, objptr
07320     19 31 02 F6 | 	mov	local10, local11
07324     01 30 66 F0 | 	shl	local10, #1
07328     19 31 02 F1 | 	add	local10, local11
0732c     02 30 66 F0 | 	shl	local10, #2
07330     03 00 00 FF 
07334     00 E4 85 F1 | 	sub	objptr, ##1536
07338     F2 30 02 F1 | 	add	local10, objptr
0733c     04 30 06 F1 | 	add	local10, #4
07340     18 29 62 FC | 	wrlong	local06, local10
07344     03 00 00 FF 
07348     00 E4 05 F1 | 	add	objptr, ##1536
0734c     F2 30 02 FB | 	rdlong	local10, objptr
07350     18 33 02 F6 | 	mov	local11, local10
07354     01 32 66 F0 | 	shl	local11, #1
07358     18 33 02 F1 | 	add	local11, local10
0735c     02 32 66 F0 | 	shl	local11, #2
07360     03 00 00 FF 
07364     00 E4 85 F1 | 	sub	objptr, ##1536
07368     F2 32 02 F1 | 	add	local11, objptr
0736c     08 32 06 F1 | 	add	local11, #8
07370     19 2B 62 FC | 	wrlong	local07, local11
07374     03 00 00 FF 
07378     00 E4 05 F1 | 	add	objptr, ##1536
0737c     F2 26 02 FB | 	rdlong	local05, objptr
07380     01 26 06 F1 | 	add	local05, #1
07384     F2 26 62 FC | 	wrlong	local05, objptr
07388     6A 00 00 FF 
0738c     60 E4 85 F1 | 	sub	objptr, ##54368
07390                 | LR__0643
07390                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07390     57 00 00 FF 
07394     28 E4 05 F1 | 	add	objptr, ##44584
07398     F2 24 02 FB | 	rdlong	local04, objptr
0739c     03 24 66 F0 | 	shl	local04, #3
073a0     02 00 00 FF 
073a4     38 E4 85 F1 | 	sub	objptr, ##1080
073a8     F2 24 02 F1 | 	add	local04, objptr
073ac     04 24 06 F1 | 	add	local04, #4
073b0     12 2D 02 FB | 	rdlong	local08, local04
073b4     FE 2D 0E F2 | 	cmp	local08, #510 wz
073b8     54 00 00 FF 
073bc     F0 E5 85 F1 | 	sub	objptr, ##43504
073c0     B8 00 90 5D |  if_ne	jmp	#LR__0644
073c4     44 22 06 F6 | 	mov	local03, #68
073c8     0F 27 02 F6 | 	mov	local05, local01
073cc     10 29 02 F6 | 	mov	local06, local02
073d0     11 2B 02 F6 | 	mov	local07, local03
073d4     6A 00 00 FF 
073d8     60 E4 05 F1 | 	add	objptr, ##54368
073dc     F2 2C 02 FB | 	rdlong	local08, objptr
073e0     16 2F 02 F6 | 	mov	local09, local08
073e4     01 2E 66 F0 | 	shl	local09, #1
073e8     16 2F 02 F1 | 	add	local09, local08
073ec     02 2E 66 F0 | 	shl	local09, #2
073f0     03 00 00 FF 
073f4     00 E4 85 F1 | 	sub	objptr, ##1536
073f8     F2 2E 02 F1 | 	add	local09, objptr
073fc     17 27 62 FC | 	wrlong	local05, local09
07400     03 00 00 FF 
07404     00 E4 05 F1 | 	add	objptr, ##1536
07408     F2 32 02 FB | 	rdlong	local11, objptr
0740c     19 31 02 F6 | 	mov	local10, local11
07410     01 30 66 F0 | 	shl	local10, #1
07414     19 31 02 F1 | 	add	local10, local11
07418     02 30 66 F0 | 	shl	local10, #2
0741c     03 00 00 FF 
07420     00 E4 85 F1 | 	sub	objptr, ##1536
07424     F2 30 02 F1 | 	add	local10, objptr
07428     04 30 06 F1 | 	add	local10, #4
0742c     18 29 62 FC | 	wrlong	local06, local10
07430     03 00 00 FF 
07434     00 E4 05 F1 | 	add	objptr, ##1536
07438     F2 30 02 FB | 	rdlong	local10, objptr
0743c     18 33 02 F6 | 	mov	local11, local10
07440     01 32 66 F0 | 	shl	local11, #1
07444     18 33 02 F1 | 	add	local11, local10
07448     02 32 66 F0 | 	shl	local11, #2
0744c     03 00 00 FF 
07450     00 E4 85 F1 | 	sub	objptr, ##1536
07454     F2 32 02 F1 | 	add	local11, objptr
07458     08 32 06 F1 | 	add	local11, #8
0745c     19 2B 62 FC | 	wrlong	local07, local11
07460     03 00 00 FF 
07464     00 E4 05 F1 | 	add	objptr, ##1536
07468     F2 26 02 FB | 	rdlong	local05, objptr
0746c     01 26 06 F1 | 	add	local05, #1
07470     F2 26 62 FC | 	wrlong	local05, objptr
07474     6A 00 00 FF 
07478     60 E4 85 F1 | 	sub	objptr, ##54368
0747c                 | LR__0644
0747c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
0747c     57 00 00 FF 
07480     28 E4 05 F1 | 	add	objptr, ##44584
07484     F2 24 02 FB | 	rdlong	local04, objptr
07488     03 24 66 F0 | 	shl	local04, #3
0748c     02 00 00 FF 
07490     38 E4 85 F1 | 	sub	objptr, ##1080
07494     F2 24 02 F1 | 	add	local04, objptr
07498     04 24 06 F1 | 	add	local04, #4
0749c     12 2D 02 FB | 	rdlong	local08, local04
074a0     11 2C 0E F2 | 	cmp	local08, #17 wz
074a4     54 00 00 FF 
074a8     F0 E5 85 F1 | 	sub	objptr, ##43504
074ac     6C 00 90 AD |  if_e	jmp	#LR__0645
074b0     57 00 00 FF 
074b4     28 E4 05 F1 | 	add	objptr, ##44584
074b8     F2 2C 02 FB | 	rdlong	local08, objptr
074bc     03 2C 66 F0 | 	shl	local08, #3
074c0     02 00 00 FF 
074c4     38 E4 85 F1 | 	sub	objptr, ##1080
074c8     F2 2C 02 F1 | 	add	local08, objptr
074cc     04 2C 06 F1 | 	add	local08, #4
074d0     16 2D 02 FB | 	rdlong	local08, local08
074d4     12 2C 0E F2 | 	cmp	local08, #18 wz
074d8     54 00 00 FF 
074dc     F0 E5 85 F1 | 	sub	objptr, ##43504
074e0     38 00 90 AD |  if_e	jmp	#LR__0645
074e4     57 00 00 FF 
074e8     28 E4 05 F1 | 	add	objptr, ##44584
074ec     F2 32 02 FB | 	rdlong	local11, objptr
074f0     03 32 66 F0 | 	shl	local11, #3
074f4     02 00 00 FF 
074f8     38 E4 85 F1 | 	sub	objptr, ##1080
074fc     F2 32 02 F1 | 	add	local11, objptr
07500     04 32 06 F1 | 	add	local11, #4
07504     19 33 02 FB | 	rdlong	local11, local11
07508     FE 33 0E F2 | 	cmp	local11, #510 wz
0750c     54 00 00 FF 
07510     F0 E5 85 F1 | 	sub	objptr, ##43504
07514     16 FA 05 56 |  if_ne	mov	result1, #22
07518     68 00 90 5D |  if_ne	jmp	#LR__0647
0751c                 | LR__0645
0751c     57 00 00 FF 
07520     28 E4 05 F1 | 	add	objptr, ##44584
07524     F2 24 02 FB | 	rdlong	local04, objptr
07528     01 24 06 F1 | 	add	local04, #1
0752c     F2 24 62 FC | 	wrlong	local04, objptr
07530     03 24 66 F0 | 	shl	local04, #3
07534     02 00 00 FF 
07538     38 E4 85 F1 | 	sub	objptr, ##1080
0753c     F2 24 02 F1 | 	add	local04, objptr
07540     04 24 06 F1 | 	add	local04, #4
07544     12 2D 02 FB | 	rdlong	local08, local04
07548     FE 2D 0E F2 | 	cmp	local08, #510 wz
0754c     54 00 00 FF 
07550     F0 E5 85 F1 | 	sub	objptr, ##43504
07554     28 00 90 AD |  if_e	jmp	#LR__0646
07558     57 00 00 FF 
0755c     28 E4 05 F1 | 	add	objptr, ##44584
07560     F2 32 02 FB | 	rdlong	local11, objptr
07564     0E 00 00 FF 
07568     1C E4 05 F1 | 	add	objptr, ##7196
0756c     F2 30 02 FB | 	rdlong	local10, objptr
07570     65 00 00 FF 
07574     44 E4 85 F1 | 	sub	objptr, ##51780
07578     18 33 52 F2 | 	cmps	local11, local10 wc
0757c     E4 FA 9F CD |  if_b	jmp	#LR__0641
07580                 | LR__0646
07580                 | ' return 0
07580     00 FA 05 F6 | 	mov	result1, #0
07584                 | LR__0647
07584     A7 F0 03 F6 | 	mov	ptra, fp
07588     B2 00 A0 FD | 	call	#popregs_
0758c                 | _compile_print_ret
0758c     2D 00 64 FD | 	ret
07590                 | 
07590                 | ' 
07590                 | ' function compile_if() as ulong  
07590                 | _compile_if
07590     05 4A 05 F6 | 	mov	COUNT_, #5
07594     A8 00 A0 FD | 	call	#pushregs_
07598                 | _compile_if_enter
07598     6C 17 B0 FD | 	call	#_expr
0759c                 | ' expr()
0759c                 | ' return 0
0759c     57 00 00 FF 
075a0     28 E4 05 F1 | 	add	objptr, ##44584
075a4     F2 FA 01 FB | 	rdlong	result1, objptr
075a8     01 FA 05 F1 | 	add	result1, #1
075ac     F2 FA 61 FC | 	wrlong	result1, objptr
075b0     58 22 06 F6 | 	mov	local03, #88
075b4     0F 25 02 F6 | 	mov	local04, local01
075b8     10 27 02 F6 | 	mov	local05, local02
075bc     11 1F 02 F6 | 	mov	local01, local03
075c0     13 00 00 FF 
075c4     38 E4 05 F1 | 	add	objptr, ##9784
075c8     F2 12 02 FB | 	rdlong	arg01, objptr
075cc     09 FB 01 F6 | 	mov	result1, arg01
075d0     01 FA 65 F0 | 	shl	result1, #1
075d4     09 FB 01 F1 | 	add	result1, arg01
075d8     02 FA 65 F0 | 	shl	result1, #2
075dc     03 00 00 FF 
075e0     00 E4 85 F1 | 	sub	objptr, ##1536
075e4     F2 FA 01 F1 | 	add	result1, objptr
075e8     FD 24 62 FC | 	wrlong	local04, result1
075ec     03 00 00 FF 
075f0     00 E4 05 F1 | 	add	objptr, ##1536
075f4     F2 12 02 FB | 	rdlong	arg01, objptr
075f8     09 25 02 F6 | 	mov	local04, arg01
075fc     01 24 66 F0 | 	shl	local04, #1
07600     09 25 02 F1 | 	add	local04, arg01
07604     02 24 66 F0 | 	shl	local04, #2
07608     03 00 00 FF 
0760c     00 E4 85 F1 | 	sub	objptr, ##1536
07610     F2 24 02 F1 | 	add	local04, objptr
07614     04 24 06 F1 | 	add	local04, #4
07618     12 27 62 FC | 	wrlong	local05, local04
0761c     03 00 00 FF 
07620     00 E4 05 F1 | 	add	objptr, ##1536
07624     F2 24 02 FB | 	rdlong	local04, objptr
07628     12 27 02 F6 | 	mov	local05, local04
0762c     01 26 66 F0 | 	shl	local05, #1
07630     12 27 02 F1 | 	add	local05, local04
07634     02 26 66 F0 | 	shl	local05, #2
07638     03 00 00 FF 
0763c     00 E4 85 F1 | 	sub	objptr, ##1536
07640     F2 26 02 F1 | 	add	local05, objptr
07644     08 26 06 F1 | 	add	local05, #8
07648     13 1F 62 FC | 	wrlong	local01, local05
0764c     03 00 00 FF 
07650     00 E4 05 F1 | 	add	objptr, ##1536
07654     F2 24 02 FB | 	rdlong	local04, objptr
07658     01 24 06 F1 | 	add	local04, #1
0765c     F2 24 62 FC | 	wrlong	local04, objptr
07660                 | ' 
07660                 | ' 'print "In compile_if"
07660                 | ' compile_fun_1p()
07660                 | ' cmd=lparts(ct).token : ct+=1
07660                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07660                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07660                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07660     13 00 00 FF 
07664     38 E4 85 F1 | 	sub	objptr, ##9784
07668     F2 26 02 FB | 	rdlong	local05, objptr
0766c     01 26 06 F1 | 	add	local05, #1
07670     03 26 66 F0 | 	shl	local05, #3
07674     02 00 00 FF 
07678     38 E4 85 F1 | 	sub	objptr, ##1080
0767c     F2 26 02 F1 | 	add	local05, objptr
07680     13 13 02 FB | 	rdlong	arg01, local05
07684     54 00 00 FF 
07688     F0 E5 85 F1 | 	sub	objptr, ##43504
0768c                 | ' 
0768c                 | ' select case s
0768c     5D 01 00 FF 
07690     F8 15 06 F6 | 	mov	arg02, ##@LR__4711
07694     DC 4D B1 FD | 	call	#__system___string_cmp
07698     00 FA 0D F2 | 	cmp	result1, #0 wz
0769c     1B FA 05 A6 |  if_e	mov	result1, #27
076a0     00 FA 05 56 |  if_ne	mov	result1, #0
076a4     00 FA 0D F2 | 	cmp	result1, #0 wz
076a8     0C 00 90 AD |  if_e	jmp	#LR__0650
076ac     05 12 06 F6 | 	mov	arg01, #5
076b0     88 ED BF FD | 	call	#_compile_immediate_assign
076b4     08 00 90 FD | 	jmp	#LR__0651
076b8                 | LR__0650
076b8     05 12 06 F6 | 	mov	arg01, #5
076bc     B4 E3 BF FD | 	call	#_compile_immediate
076c0                 | LR__0651
076c0                 | ' 
076c0                 | ' 
076c0                 | ' return 0
076c0     00 FA 05 F6 | 	mov	result1, #0
076c4     A7 F0 03 F6 | 	mov	ptra, fp
076c8     B2 00 A0 FD | 	call	#popregs_
076cc                 | _compile_if_ret
076cc     2D 00 64 FD | 	ret
076d0                 | 
076d0                 | ' 
076d0                 | ' function compile_else() as ulong  
076d0                 | _compile_else
076d0     05 4A 05 F6 | 	mov	COUNT_, #5
076d4     A8 00 A0 FD | 	call	#pushregs_
076d8                 | _compile_else_enter
076d8     5A 22 06 F6 | 	mov	local03, #90
076dc     0F 25 02 F6 | 	mov	local04, local01
076e0     10 27 02 F6 | 	mov	local05, local02
076e4     11 1F 02 F6 | 	mov	local01, local03
076e8     6A 00 00 FF 
076ec     60 E4 05 F1 | 	add	objptr, ##54368
076f0     F2 12 02 FB | 	rdlong	arg01, objptr
076f4     09 FB 01 F6 | 	mov	result1, arg01
076f8     01 FA 65 F0 | 	shl	result1, #1
076fc     09 FB 01 F1 | 	add	result1, arg01
07700     02 FA 65 F0 | 	shl	result1, #2
07704     03 00 00 FF 
07708     00 E4 85 F1 | 	sub	objptr, ##1536
0770c     F2 FA 01 F1 | 	add	result1, objptr
07710     FD 24 62 FC | 	wrlong	local04, result1
07714     03 00 00 FF 
07718     00 E4 05 F1 | 	add	objptr, ##1536
0771c     F2 FA 01 FB | 	rdlong	result1, objptr
07720     FD 24 02 F6 | 	mov	local04, result1
07724     01 24 66 F0 | 	shl	local04, #1
07728     FD 24 02 F1 | 	add	local04, result1
0772c     02 24 66 F0 | 	shl	local04, #2
07730     03 00 00 FF 
07734     00 E4 85 F1 | 	sub	objptr, ##1536
07738     F2 24 02 F1 | 	add	local04, objptr
0773c     04 24 06 F1 | 	add	local04, #4
07740     12 27 62 FC | 	wrlong	local05, local04
07744     03 00 00 FF 
07748     00 E4 05 F1 | 	add	objptr, ##1536
0774c     F2 24 02 FB | 	rdlong	local04, objptr
07750     12 27 02 F6 | 	mov	local05, local04
07754     01 26 66 F0 | 	shl	local05, #1
07758     12 27 02 F1 | 	add	local05, local04
0775c     02 26 66 F0 | 	shl	local05, #2
07760     03 00 00 FF 
07764     00 E4 85 F1 | 	sub	objptr, ##1536
07768     F2 26 02 F1 | 	add	local05, objptr
0776c     08 26 06 F1 | 	add	local05, #8
07770     13 1F 62 FC | 	wrlong	local01, local05
07774     03 00 00 FF 
07778     00 E4 05 F1 | 	add	objptr, ##1536
0777c     F2 24 02 FB | 	rdlong	local04, objptr
07780     01 24 06 F1 | 	add	local04, #1
07784     F2 24 62 FC | 	wrlong	local04, objptr
07788                 | ' 
07788                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
07788                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07788     13 00 00 FF 
0778c     38 E4 85 F1 | 	sub	objptr, ##9784
07790     F2 26 02 FB | 	rdlong	local05, objptr
07794     01 26 06 F1 | 	add	local05, #1
07798     03 26 66 F0 | 	shl	local05, #3
0779c     02 00 00 FF 
077a0     38 E4 85 F1 | 	sub	objptr, ##1080
077a4     F2 26 02 F1 | 	add	local05, objptr
077a8     13 13 02 FB | 	rdlong	arg01, local05
077ac     54 00 00 FF 
077b0     F0 E5 85 F1 | 	sub	objptr, ##43504
077b4                 | ' 
077b4                 | ' select case s
077b4     5D 01 00 FF 
077b8     F8 15 06 F6 | 	mov	arg02, ##@LR__4711
077bc     B4 4C B1 FD | 	call	#__system___string_cmp
077c0     00 FA 0D F2 | 	cmp	result1, #0 wz
077c4     1B FA 05 A6 |  if_e	mov	result1, #27
077c8     00 FA 05 56 |  if_ne	mov	result1, #0
077cc     00 FA 0D F2 | 	cmp	result1, #0 wz
077d0     0C 00 90 AD |  if_e	jmp	#LR__0660
077d4     05 12 06 F6 | 	mov	arg01, #5
077d8     60 EC BF FD | 	call	#_compile_immediate_assign
077dc     08 00 90 FD | 	jmp	#LR__0661
077e0                 | LR__0660
077e0     05 12 06 F6 | 	mov	arg01, #5
077e4     8C E2 BF FD | 	call	#_compile_immediate
077e8                 | LR__0661
077e8                 | ' 
077e8                 | ' 
077e8                 | ' return 0
077e8     00 FA 05 F6 | 	mov	result1, #0
077ec     A7 F0 03 F6 | 	mov	ptra, fp
077f0     B2 00 A0 FD | 	call	#popregs_
077f4                 | _compile_else_ret
077f4     2D 00 64 FD | 	ret
077f8                 | 
077f8                 | ' 
077f8                 | ' 
077f8                 | ' function compile_dim() as ulong  
077f8                 | _compile_dim
077f8     11 4A 05 F6 | 	mov	COUNT_, #17
077fc     A8 00 A0 FD | 	call	#pushregs_
07800     01 1E 06 F6 | 	mov	local01, #1
07804     01 20 06 F6 | 	mov	local02, #1
07808     01 22 06 F6 | 	mov	local03, #1
0780c                 | ' 
0780c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0780c                 | ' 
0780c                 | ' if isname(lparts(ct).part$) then 
0780c     57 00 00 FF 
07810     28 E4 05 F1 | 	add	objptr, ##44584
07814     F2 18 02 FB | 	rdlong	arg04, objptr
07818     03 18 66 F0 | 	shl	arg04, #3
0781c     02 00 00 FF 
07820     38 E4 85 F1 | 	sub	objptr, ##1080
07824     F2 18 02 F1 | 	add	arg04, objptr
07828     0C 13 02 FB | 	rdlong	arg01, arg04
0782c     54 00 00 FF 
07830     F0 E5 85 F1 | 	sub	objptr, ##43504
07834     F0 D2 BF FD | 	call	#_isname
07838     00 FA 0D F2 | 	cmp	result1, #0 wz
0783c     AC 05 90 AD |  if_e	jmp	#LR__0694
07840     57 00 00 FF 
07844     28 E4 05 F1 | 	add	objptr, ##44584
07848     F2 24 02 FB | 	rdlong	local04, objptr
0784c     03 24 66 F0 | 	shl	local04, #3
07850     02 00 00 FF 
07854     38 E4 85 F1 | 	sub	objptr, ##1080
07858     F2 24 02 F1 | 	add	local04, objptr
0785c     12 27 02 FB | 	rdlong	local05, local04
07860     01 28 66 F6 | 	neg	local06, #1
07864                 | '   varname2$=lparts(ct).part$ 
07864                 | '   j=-1
07864                 | '   if varnum>0 then
07864     04 E4 85 F1 | 	sub	objptr, #4
07868     F2 2A 02 FB | 	rdlong	local07, objptr
0786c     54 00 00 FF 
07870     EC E5 85 F1 | 	sub	objptr, ##43500
07874     01 2A 56 F2 | 	cmps	local07, #1 wc
07878     58 00 90 CD |  if_b	jmp	#LR__0672
0787c                 | '  '   print "in dim, varnum=";varnum
0787c                 | '     for i=0 to varnum-1
0787c     00 2C 06 F6 | 	mov	local08, #0
07880     54 00 00 FF 
07884     EC E5 05 F1 | 	add	objptr, ##43500
07888     F2 2E 02 FB | 	rdlong	local09, objptr
0788c     54 00 00 FF 
07890     EC E5 85 F1 | 	sub	objptr, ##43500
07894                 | LR__0670
07894     17 2D 52 F2 | 	cmps	local08, local09 wc
07898     38 00 90 3D |  if_ae	jmp	#LR__0671
0789c                 | '       if variables(i).name=varname2$ then j=i : exit
0789c     16 25 02 F6 | 	mov	local04, local08
078a0     04 24 66 F0 | 	shl	local04, #4
078a4     34 00 00 FF 
078a8     EC E5 05 F1 | 	add	objptr, ##27116
078ac     F2 24 02 F1 | 	add	local04, objptr
078b0     12 13 02 FB | 	rdlong	arg01, local04
078b4     13 15 02 F6 | 	mov	arg02, local05
078b8     34 00 00 FF 
078bc     EC E5 85 F1 | 	sub	objptr, ##27116
078c0     B0 4B B1 FD | 	call	#__system___string_cmp
078c4     00 FA 0D F2 | 	cmp	result1, #0 wz
078c8     16 29 02 A6 |  if_e	mov	local06, local08
078cc     01 2C 06 51 |  if_ne	add	local08, #1
078d0     C0 FF 9F 5D |  if_ne	jmp	#LR__0670
078d4                 | LR__0671
078d4                 | LR__0672
078d4                 | ' '  if j<>-1 then printerror (42) : return 42
078d4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
078d4     FF FF 7F FF 
078d8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
078dc     54 00 00 AF 
078e0     EC E5 05 A1 |  if_e	add	objptr, ##43500
078e4     F2 28 02 AB |  if_e	rdlong	local06, objptr
078e8     54 00 00 AF 
078ec     EC E5 85 A1 |  if_e	sub	objptr, ##43500
078f0     78 00 90 AD |  if_e	jmp	#LR__0673
078f4     00 12 06 F6 | 	mov	arg01, #0
078f8     E0 A4 B1 FD | 	call	#__system___getiolock_0474
078fc     FD 12 02 F6 | 	mov	arg01, result1
07900     48 4B B1 FD | 	call	#__system___lockmem
07904     5F 01 00 FF 
07908     06 15 06 F6 | 	mov	arg02, ##@LR__4883
0790c     00 12 06 F6 | 	mov	arg01, #0
07910     00 16 06 F6 | 	mov	arg03, #0
07914     38 58 B1 FD | 	call	#__system___basic_print_string
07918     7B 00 00 FF 
0791c     74 E4 05 F1 | 	add	objptr, ##63092
07920     F2 14 02 FB | 	rdlong	arg02, objptr
07924     7B 00 00 FF 
07928     74 E4 85 F1 | 	sub	objptr, ##63092
0792c     00 12 06 F6 | 	mov	arg01, #0
07930     00 16 06 F6 | 	mov	arg03, #0
07934     0A 18 06 F6 | 	mov	arg04, #10
07938     98 58 B1 FD | 	call	#__system___basic_print_unsigned
0793c     5F 01 00 FF 
07940     14 15 06 F6 | 	mov	arg02, ##@LR__4884
07944     00 12 06 F6 | 	mov	arg01, #0
07948     00 16 06 F6 | 	mov	arg03, #0
0794c     00 58 B1 FD | 	call	#__system___basic_print_string
07950     00 12 06 F6 | 	mov	arg01, #0
07954     0A 14 06 F6 | 	mov	arg02, #10
07958     00 16 06 F6 | 	mov	arg03, #0
0795c     98 57 B1 FD | 	call	#__system___basic_print_char
07960     00 12 06 F6 | 	mov	arg01, #0
07964     74 A4 B1 FD | 	call	#__system___getiolock_0474
07968     FD 00 68 FC | 	wrlong	#0, result1
0796c                 | LR__0673
0796c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
0796c     57 00 00 FF 
07970     28 E4 05 F1 | 	add	objptr, ##44584
07974     F2 18 02 FB | 	rdlong	arg04, objptr
07978     01 18 06 F1 | 	add	arg04, #1
0797c     03 18 66 F0 | 	shl	arg04, #3
07980     02 00 00 FF 
07984     38 E4 85 F1 | 	sub	objptr, ##1080
07988     F2 18 02 F1 | 	add	arg04, objptr
0798c     0C 13 02 FB | 	rdlong	arg01, arg04
07990     5F 01 00 FF 
07994     35 15 06 F6 | 	mov	arg02, ##@LR__4885
07998     54 00 00 FF 
0799c     F0 E5 85 F1 | 	sub	objptr, ##43504
079a0     D0 4A B1 FD | 	call	#__system___string_cmp
079a4     00 FA 0D F2 | 	cmp	result1, #0 wz
079a8     50 00 90 AD |  if_e	jmp	#LR__0674
079ac     57 00 00 FF 
079b0     28 E4 05 F1 | 	add	objptr, ##44584
079b4     F2 2E 02 FB | 	rdlong	local09, objptr
079b8     01 2E 06 F1 | 	add	local09, #1
079bc     03 2E 66 F0 | 	shl	local09, #3
079c0     02 00 00 FF 
079c4     38 E4 85 F1 | 	sub	objptr, ##1080
079c8     F2 2E 02 F1 | 	add	local09, objptr
079cc     17 13 02 FB | 	rdlong	arg01, local09
079d0     5F 01 00 FF 
079d4     37 15 06 F6 | 	mov	arg02, ##@LR__4886
079d8     54 00 00 FF 
079dc     F0 E5 85 F1 | 	sub	objptr, ##43504
079e0     90 4A B1 FD | 	call	#__system___string_cmp
079e4     00 FA 0D F2 | 	cmp	result1, #0 wz
079e8     10 00 90 AD |  if_e	jmp	#LR__0674
079ec     2B 12 06 F6 | 	mov	arg01, #43
079f0     70 12 B1 FD | 	call	#_printerror
079f4     2B FA 05 F6 | 	mov	result1, #43
079f8     00 05 90 FD | 	jmp	#LR__0696
079fc                 | LR__0674
079fc                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
079fc     57 00 00 FF 
07a00     28 E4 05 F1 | 	add	objptr, ##44584
07a04     F2 14 02 FB | 	rdlong	arg02, objptr
07a08     01 14 06 F1 | 	add	arg02, #1
07a0c     03 14 66 F0 | 	shl	arg02, #3
07a10     02 00 00 FF 
07a14     38 E4 85 F1 | 	sub	objptr, ##1080
07a18     F2 14 02 F1 | 	add	arg02, objptr
07a1c     0A 13 02 FB | 	rdlong	arg01, arg02
07a20     5F 01 00 FF 
07a24     3A 15 06 F6 | 	mov	arg02, ##@LR__4887
07a28     54 00 00 FF 
07a2c     F0 E5 85 F1 | 	sub	objptr, ##43504
07a30     40 4A B1 FD | 	call	#__system___string_cmp
07a34     00 FA 0D F2 | 	cmp	result1, #0 wz
07a38     57 00 00 AF 
07a3c     28 E4 05 A1 |  if_e	add	objptr, ##44584
07a40     F2 30 02 AB |  if_e	rdlong	local10, objptr
07a44     57 00 00 AF 
07a48     28 E4 85 A1 |  if_e	sub	objptr, ##44584
07a4c     01 30 06 A1 |  if_e	add	local10, #1
07a50     7C 01 90 AD |  if_e	jmp	#LR__0680
07a54     57 00 00 FF 
07a58     28 E4 05 F1 | 	add	objptr, ##44584
07a5c     F2 30 02 FB | 	rdlong	local10, objptr
07a60     57 00 00 FF 
07a64     28 E4 85 F1 | 	sub	objptr, ##44584
07a68     02 30 06 F1 | 	add	local10, #2
07a6c     00 32 06 F6 | 	mov	local11, #0
07a70                 | '   l=ct+2 : m=0 : do
07a70                 | LR__0675
07a70                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07a70                 | '     if isdec(lparts(l).part$) then 
07a70     18 25 02 F6 | 	mov	local04, local10
07a74     03 24 66 F0 | 	shl	local04, #3
07a78     54 00 00 FF 
07a7c     F0 E5 05 F1 | 	add	objptr, ##43504
07a80     F2 24 02 F1 | 	add	local04, objptr
07a84     12 13 02 FB | 	rdlong	arg01, local04
07a88     54 00 00 FF 
07a8c     F0 E5 85 F1 | 	sub	objptr, ##43504
07a90     38 D7 BF FD | 	call	#_isdec
07a94     00 FA 0D F2 | 	cmp	result1, #0 wz
07a98     44 00 90 AD |  if_e	jmp	#LR__0676
07a9c     19 35 02 F6 | 	mov	local12, local11
07aa0     0F 35 06 F1 | 	add	local12, #local01
07aa4     18 2F 02 F6 | 	mov	local09, local10
07aa8     03 2E 66 F0 | 	shl	local09, #3
07aac     54 00 00 FF 
07ab0     F0 E5 05 F1 | 	add	objptr, ##43504
07ab4     F2 2E 02 F1 | 	add	local09, objptr
07ab8     17 13 02 FB | 	rdlong	arg01, local09
07abc     00 14 06 F6 | 	mov	arg02, #0
07ac0     54 00 00 FF 
07ac4     F0 E5 85 F1 | 	sub	objptr, ##43504
07ac8     74 7B B1 FD | 	call	#__system____builtin_atoi
07acc     FD 36 02 F6 | 	mov	local13, result1
07ad0                 | 	'.live	local13
07ad0                 | 	'.live	local12
07ad0     00 34 8E F9 | 	altd	local12, #0
07ad4     1B 35 02 F6 | 	mov	local12, local13
07ad8     01 32 06 F1 | 	add	local11, #1
07adc     10 00 90 FD | 	jmp	#LR__0677
07ae0                 | LR__0676
07ae0     11 12 06 F6 | 	mov	arg01, #17
07ae4     7C 11 B1 FD | 	call	#_printerror
07ae8                 | '       printerror (17)  : return(17)
07ae8     11 FA 05 F6 | 	mov	result1, #17
07aec     0C 04 90 FD | 	jmp	#LR__0696
07af0                 | LR__0677
07af0                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07af0     18 25 02 F6 | 	mov	local04, local10
07af4     01 24 06 F1 | 	add	local04, #1
07af8     03 24 66 F0 | 	shl	local04, #3
07afc     54 00 00 FF 
07b00     F0 E5 05 F1 | 	add	objptr, ##43504
07b04     F2 24 02 F1 | 	add	local04, objptr
07b08     12 13 02 FB | 	rdlong	arg01, local04
07b0c     5F 01 00 FF 
07b10     3D 15 06 F6 | 	mov	arg02, ##@LR__4888
07b14     54 00 00 FF 
07b18     F0 E5 85 F1 | 	sub	objptr, ##43504
07b1c     54 49 B1 FD | 	call	#__system___string_cmp
07b20     00 FA 0D F2 | 	cmp	result1, #0 wz
07b24     48 00 90 AD |  if_e	jmp	#LR__0678
07b28     18 37 02 F6 | 	mov	local13, local10
07b2c     01 36 06 F1 | 	add	local13, #1
07b30     03 36 66 F0 | 	shl	local13, #3
07b34     54 00 00 FF 
07b38     F0 E5 05 F1 | 	add	objptr, ##43504
07b3c     F2 36 02 F1 | 	add	local13, objptr
07b40     1B 13 02 FB | 	rdlong	arg01, local13
07b44     5F 01 00 FF 
07b48     3F 15 06 F6 | 	mov	arg02, ##@LR__4889
07b4c     54 00 00 FF 
07b50     F0 E5 85 F1 | 	sub	objptr, ##43504
07b54     1C 49 B1 FD | 	call	#__system___string_cmp
07b58     00 FA 0D F2 | 	cmp	result1, #0 wz
07b5c     10 00 90 AD |  if_e	jmp	#LR__0678
07b60     2C 12 06 F6 | 	mov	arg01, #44
07b64     FC 10 B1 FD | 	call	#_printerror
07b68     2C FA 05 F6 | 	mov	result1, #44
07b6c     8C 03 90 FD | 	jmp	#LR__0696
07b70                 | LR__0678
07b70     02 30 06 F1 | 	add	local10, #2
07b74     18 25 02 F6 | 	mov	local04, local10
07b78     01 24 86 F1 | 	sub	local04, #1
07b7c     03 24 66 F0 | 	shl	local04, #3
07b80     54 00 00 FF 
07b84     F0 E5 05 F1 | 	add	objptr, ##43504
07b88     F2 24 02 F1 | 	add	local04, objptr
07b8c     12 13 02 FB | 	rdlong	arg01, local04
07b90     5F 01 00 FF 
07b94     41 15 06 F6 | 	mov	arg02, ##@LR__4890
07b98     54 00 00 FF 
07b9c     F0 E5 85 F1 | 	sub	objptr, ##43504
07ba0     D0 48 B1 FD | 	call	#__system___string_cmp
07ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ba8     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07bac     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0675
07bb0                 | '   if m>3 then printerror(45): return(45)
07bb0     04 32 56 F2 | 	cmps	local11, #4 wc
07bb4     10 00 90 CD |  if_b	jmp	#LR__0679
07bb8     2D 12 06 F6 | 	mov	arg01, #45
07bbc     A4 10 B1 FD | 	call	#_printerror
07bc0     2D FA 05 F6 | 	mov	result1, #45
07bc4     34 03 90 FD | 	jmp	#LR__0696
07bc8                 | LR__0679
07bc8     00 39 06 F6 | 	mov	local14, #256
07bcc     0C 3A 06 F6 | 	mov	local15, #12
07bd0                 | LR__0680
07bd0                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07bd0                 | '   arraytype=array_no_type : esize=12
07bd0                 | ' 1350 
07bd0                 | '   if lparts(l).part$="as" then
07bd0     18 25 02 F6 | 	mov	local04, local10
07bd4     03 24 66 F0 | 	shl	local04, #3
07bd8     54 00 00 FF 
07bdc     F0 E5 05 F1 | 	add	objptr, ##43504
07be0     F2 24 02 F1 | 	add	local04, objptr
07be4     12 13 02 FB | 	rdlong	arg01, local04
07be8     5F 01 00 FF 
07bec     43 15 06 F6 | 	mov	arg02, ##@LR__4891
07bf0     54 00 00 FF 
07bf4     F0 E5 85 F1 | 	sub	objptr, ##43504
07bf8     78 48 B1 FD | 	call	#__system___string_cmp
07bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
07c00     F8 01 90 5D |  if_ne	jmp	#LR__0695
07c04                 | '     select case lparts(l+1).part$
07c04     18 35 02 F6 | 	mov	local12, local10
07c08     01 34 06 F1 | 	add	local12, #1
07c0c     03 34 66 F0 | 	shl	local12, #3
07c10     54 00 00 FF 
07c14     F0 E5 05 F1 | 	add	objptr, ##43504
07c18     F2 34 02 F1 | 	add	local12, objptr
07c1c     1A 3D 02 FB | 	rdlong	local16, local12
07c20     5F 01 00 FF 
07c24     46 15 06 F6 | 	mov	arg02, ##@LR__4892
07c28     1E 13 02 F6 | 	mov	arg01, local16
07c2c     54 00 00 FF 
07c30     F0 E5 85 F1 | 	sub	objptr, ##43504
07c34     3C 48 B1 FD | 	call	#__system___string_cmp
07c38     00 FA 0D F2 | 	cmp	result1, #0 wz
07c3c     0C 01 90 AD |  if_e	jmp	#LR__0681
07c40     5F 01 00 FF 
07c44     4B 15 06 F6 | 	mov	arg02, ##@LR__4893
07c48     1E 13 02 F6 | 	mov	arg01, local16
07c4c     24 48 B1 FD | 	call	#__system___string_cmp
07c50     00 FA 0D F2 | 	cmp	result1, #0 wz
07c54     00 01 90 AD |  if_e	jmp	#LR__0682
07c58     5F 01 00 FF 
07c5c     51 15 06 F6 | 	mov	arg02, ##@LR__4894
07c60     1E 13 02 F6 | 	mov	arg01, local16
07c64     0C 48 B1 FD | 	call	#__system___string_cmp
07c68     00 FA 0D F2 | 	cmp	result1, #0 wz
07c6c     F4 00 90 AD |  if_e	jmp	#LR__0683
07c70     5F 01 00 FF 
07c74     57 15 06 F6 | 	mov	arg02, ##@LR__4895
07c78     1E 13 02 F6 | 	mov	arg01, local16
07c7c     F4 47 B1 FD | 	call	#__system___string_cmp
07c80     00 FA 0D F2 | 	cmp	result1, #0 wz
07c84     E8 00 90 AD |  if_e	jmp	#LR__0684
07c88     5F 01 00 FF 
07c8c     5E 15 06 F6 | 	mov	arg02, ##@LR__4896
07c90     1E 13 02 F6 | 	mov	arg01, local16
07c94     DC 47 B1 FD | 	call	#__system___string_cmp
07c98     00 FA 0D F2 | 	cmp	result1, #0 wz
07c9c     DC 00 90 AD |  if_e	jmp	#LR__0685
07ca0     5F 01 00 FF 
07ca4     63 15 06 F6 | 	mov	arg02, ##@LR__4897
07ca8     1E 13 02 F6 | 	mov	arg01, local16
07cac     C4 47 B1 FD | 	call	#__system___string_cmp
07cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
07cb4     D0 00 90 AD |  if_e	jmp	#LR__0686
07cb8     5F 01 00 FF 
07cbc     6B 15 06 F6 | 	mov	arg02, ##@LR__4898
07cc0     1E 13 02 F6 | 	mov	arg01, local16
07cc4     AC 47 B1 FD | 	call	#__system___string_cmp
07cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07ccc     C4 00 90 AD |  if_e	jmp	#LR__0687
07cd0     5F 01 00 FF 
07cd4     71 15 06 F6 | 	mov	arg02, ##@LR__4899
07cd8     1E 13 02 F6 | 	mov	arg01, local16
07cdc     94 47 B1 FD | 	call	#__system___string_cmp
07ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
07ce4     B8 00 90 AD |  if_e	jmp	#LR__0688
07ce8     5F 01 00 FF 
07cec     77 15 06 F6 | 	mov	arg02, ##@LR__4900
07cf0     1E 13 02 F6 | 	mov	arg01, local16
07cf4     7C 47 B1 FD | 	call	#__system___string_cmp
07cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cfc     AC 00 90 AD |  if_e	jmp	#LR__0689
07d00     5F 01 00 FF 
07d04     7E 15 06 F6 | 	mov	arg02, ##@LR__4901
07d08     1E 13 02 F6 | 	mov	arg01, local16
07d0c     64 47 B1 FD | 	call	#__system___string_cmp
07d10     00 FA 0D F2 | 	cmp	result1, #0 wz
07d14     A0 00 90 AD |  if_e	jmp	#LR__0690
07d18     5F 01 00 FF 
07d1c     85 15 06 F6 | 	mov	arg02, ##@LR__4902
07d20     1E 13 02 F6 | 	mov	arg01, local16
07d24     4C 47 B1 FD | 	call	#__system___string_cmp
07d28     00 FA 0D F2 | 	cmp	result1, #0 wz
07d2c     94 00 90 AD |  if_e	jmp	#LR__0691
07d30     5F 01 00 FF 
07d34     8C 15 06 F6 | 	mov	arg02, ##@LR__4903
07d38     1E 13 02 F6 | 	mov	arg01, local16
07d3c     34 47 B1 FD | 	call	#__system___string_cmp
07d40     00 FA 0D F2 | 	cmp	result1, #0 wz
07d44     88 00 90 AD |  if_e	jmp	#LR__0692
07d48     90 00 90 FD | 	jmp	#LR__0693
07d4c                 | LR__0681
07d4c     01 39 06 F6 | 	mov	local14, #257
07d50     01 3A 06 F6 | 	mov	local15, #1
07d54     A4 00 90 FD | 	jmp	#LR__0695
07d58                 | LR__0682
07d58     02 39 06 F6 | 	mov	local14, #258
07d5c     01 3A 06 F6 | 	mov	local15, #1
07d60     98 00 90 FD | 	jmp	#LR__0695
07d64                 | LR__0683
07d64     03 39 06 F6 | 	mov	local14, #259
07d68     02 3A 06 F6 | 	mov	local15, #2
07d6c     8C 00 90 FD | 	jmp	#LR__0695
07d70                 | LR__0684
07d70     04 39 06 F6 | 	mov	local14, #260
07d74     02 3A 06 F6 | 	mov	local15, #2
07d78     80 00 90 FD | 	jmp	#LR__0695
07d7c                 | LR__0685
07d7c     05 39 06 F6 | 	mov	local14, #261
07d80     04 3A 06 F6 | 	mov	local15, #4
07d84     74 00 90 FD | 	jmp	#LR__0695
07d88                 | LR__0686
07d88     05 39 06 F6 | 	mov	local14, #261
07d8c     04 3A 06 F6 | 	mov	local15, #4
07d90     68 00 90 FD | 	jmp	#LR__0695
07d94                 | LR__0687
07d94     06 39 06 F6 | 	mov	local14, #262
07d98     04 3A 06 F6 | 	mov	local15, #4
07d9c     5C 00 90 FD | 	jmp	#LR__0695
07da0                 | LR__0688
07da0     07 39 06 F6 | 	mov	local14, #263
07da4     08 3A 06 F6 | 	mov	local15, #8
07da8     50 00 90 FD | 	jmp	#LR__0695
07dac                 | LR__0689
07dac     08 39 06 F6 | 	mov	local14, #264
07db0     08 3A 06 F6 | 	mov	local15, #8
07db4     44 00 90 FD | 	jmp	#LR__0695
07db8                 | LR__0690
07db8     09 39 06 F6 | 	mov	local14, #265
07dbc     04 3A 06 F6 | 	mov	local15, #4
07dc0     38 00 90 FD | 	jmp	#LR__0695
07dc4                 | LR__0691
07dc4     0A 39 06 F6 | 	mov	local14, #266
07dc8     08 3A 06 F6 | 	mov	local15, #8
07dcc     2C 00 90 FD | 	jmp	#LR__0695
07dd0                 | LR__0692
07dd0     0B 39 06 F6 | 	mov	local14, #267
07dd4     04 3A 06 F6 | 	mov	local15, #4
07dd8     20 00 90 FD | 	jmp	#LR__0695
07ddc                 | LR__0693
07ddc     2F 12 06 F6 | 	mov	arg01, #47
07de0     80 0E B1 FD | 	call	#_printerror
07de4     2F FA 05 F6 | 	mov	result1, #47
07de8     10 01 90 FD | 	jmp	#LR__0696
07dec                 | LR__0694
07dec     2E 12 06 F6 | 	mov	arg01, #46
07df0     70 0E B1 FD | 	call	#_printerror
07df4                 | '   printerror(46): return 46
07df4     2E FA 05 F6 | 	mov	result1, #46
07df8     00 01 90 FD | 	jmp	#LR__0696
07dfc                 | LR__0695
07dfc     0F 3B 02 FD | 	qmul	local15, local01
07e00     18 2A 62 FD | 	getqx	local07
07e04     10 2B 02 FD | 	qmul	local07, local02
07e08     18 3C 62 FD | 	getqx	local16
07e0c     11 3D 02 FD | 	qmul	local16, local03
07e10     7B 00 00 FF 
07e14     5C E4 05 F1 | 	add	objptr, ##63068
07e18     F2 3E 02 FB | 	rdlong	local17, objptr
07e1c     1C 15 02 F6 | 	mov	arg02, local14
07e20     18 3C 62 FD | 	getqx	local16
07e24     1E 3F 82 F1 | 	sub	local17, local16
07e28     10 3E 86 F1 | 	sub	local17, #16
07e2c     0F 3E 26 F5 | 	andn	local17, #15
07e30     F2 3E 62 FC | 	wrlong	local17, objptr
07e34     7B 00 00 FF 
07e38     5C E4 85 F1 | 	sub	objptr, ##63068
07e3c     1F 13 02 F6 | 	mov	arg01, local17
07e40     CC 0F B1 FD | 	call	#_psdpoke
07e44     1F 13 02 F6 | 	mov	arg01, local17
07e48     02 12 06 F1 | 	add	arg01, #2
07e4c     1D 15 02 F6 | 	mov	arg02, local15
07e50     BC 0F B1 FD | 	call	#_psdpoke
07e54     1F 13 02 F6 | 	mov	arg01, local17
07e58     04 12 06 F1 | 	add	arg01, #4
07e5c     0F 15 02 F6 | 	mov	arg02, local01
07e60     64 0F B1 FD | 	call	#_pslpoke
07e64     1F 13 02 F6 | 	mov	arg01, local17
07e68     08 12 06 F1 | 	add	arg01, #8
07e6c     10 15 02 F6 | 	mov	arg02, local02
07e70     54 0F B1 FD | 	call	#_pslpoke
07e74     1F 13 02 F6 | 	mov	arg01, local17
07e78     0C 12 06 F1 | 	add	arg01, #12
07e7c     11 15 02 F6 | 	mov	arg02, local03
07e80     44 0F B1 FD | 	call	#_pslpoke
07e84     14 35 02 F6 | 	mov	local12, local06
07e88     04 34 66 F0 | 	shl	local12, #4
07e8c     34 00 00 FF 
07e90     EC E5 05 F1 | 	add	objptr, ##27116
07e94     F2 34 02 F1 | 	add	local12, objptr
07e98     1A 27 62 FC | 	wrlong	local05, local12
07e9c     14 35 02 F6 | 	mov	local12, local06
07ea0     04 34 66 F0 | 	shl	local12, #4
07ea4     F2 34 02 F1 | 	add	local12, objptr
07ea8     04 34 06 F1 | 	add	local12, #4
07eac     1A 3F 62 FC | 	wrlong	local17, local12
07eb0     14 35 02 F6 | 	mov	local12, local06
07eb4     04 34 66 F0 | 	shl	local12, #4
07eb8     F2 34 02 F1 | 	add	local12, objptr
07ebc     0C 34 06 F1 | 	add	local12, #12
07ec0     1A 39 62 FC | 	wrlong	local14, local12
07ec4                 | ' memtop=arrayptr
07ec4                 | ' 
07ec4                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
07ec4                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
07ec4                 | ' pslpoke arrayptr+4,dims(0)
07ec4                 | ' pslpoke arrayptr+8,dims(1)
07ec4                 | ' pslpoke arrayptr+12,dims(2)
07ec4                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
07ec4                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
07ec4                 | ' 
07ec4                 | ' 
07ec4                 | ' variables(j).name=varname2$
07ec4                 | ' variables(j).value.uresult=arrayptr
07ec4                 | ' variables(j).vartype=arraytype
07ec4                 | ' if j=varnum then varnum+=1
07ec4     20 00 00 FF 
07ec8     00 E4 05 F1 | 	add	objptr, ##16384
07ecc     F2 2A 02 FB | 	rdlong	local07, objptr
07ed0     54 00 00 FF 
07ed4     EC E5 85 F1 | 	sub	objptr, ##43500
07ed8     15 29 0A F2 | 	cmp	local06, local07 wz
07edc     54 00 00 AF 
07ee0     EC E5 05 A1 |  if_e	add	objptr, ##43500
07ee4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07ee8     01 2A 06 A1 |  if_e	add	local07, #1
07eec     F2 2A 62 AC |  if_e	wrlong	local07, objptr
07ef0     54 00 00 AF 
07ef4     EC E5 85 A1 |  if_e	sub	objptr, ##43500
07ef8                 | ' 
07ef8                 | ' return 0
07ef8     00 FA 05 F6 | 	mov	result1, #0
07efc                 | LR__0696
07efc     A7 F0 03 F6 | 	mov	ptra, fp
07f00     B2 00 A0 FD | 	call	#popregs_
07f04                 | _compile_dim_ret
07f04     2D 00 64 FD | 	ret
07f08                 | 
07f08                 | ' 
07f08                 | ' 
07f08                 | ' function compile_for() as ulong  
07f08                 | _compile_for
07f08     07 4A 05 F6 | 	mov	COUNT_, #7
07f0c     A8 00 A0 FD | 	call	#pushregs_
07f10                 | ' 
07f10                 | ' 
07f10                 | ' 
07f10                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07f10     57 00 00 FF 
07f14     28 E4 05 F1 | 	add	objptr, ##44584
07f18     F2 14 02 FB | 	rdlong	arg02, objptr
07f1c     01 14 06 F1 | 	add	arg02, #1
07f20     03 14 66 F0 | 	shl	arg02, #3
07f24     02 00 00 FF 
07f28     38 E4 85 F1 | 	sub	objptr, ##1080
07f2c     F2 14 02 F1 | 	add	arg02, objptr
07f30     0A 13 02 FB | 	rdlong	arg01, arg02
07f34     54 00 00 FF 
07f38     F0 E5 85 F1 | 	sub	objptr, ##43504
07f3c                 | ' 
07f3c                 | ' select case s
07f3c     5D 01 00 FF 
07f40     F8 15 06 F6 | 	mov	arg02, ##@LR__4711
07f44     2C 45 B1 FD | 	call	#__system___string_cmp
07f48     00 FA 0D F2 | 	cmp	result1, #0 wz
07f4c     1B FA 05 A6 |  if_e	mov	result1, #27
07f50     00 FA 05 56 |  if_ne	mov	result1, #0
07f54     00 FA 0D F2 | 	cmp	result1, #0 wz
07f58     0C 00 90 AD |  if_e	jmp	#LR__0700
07f5c     05 12 06 F6 | 	mov	arg01, #5
07f60     D8 E4 BF FD | 	call	#_compile_immediate_assign
07f64     10 00 90 FD | 	jmp	#LR__0701
07f68                 | LR__0700
07f68     20 12 06 F6 | 	mov	arg01, #32
07f6c     48 E9 BF FD | 	call	#_compile_error
07f70     20 FA 05 F6 | 	mov	result1, #32
07f74     E8 02 90 FD | 	jmp	#LR__0707
07f78                 | LR__0701
07f78     6A 00 00 FF 
07f7c     60 E4 05 F1 | 	add	objptr, ##54368
07f80     F2 12 02 FB | 	rdlong	arg01, objptr
07f84     09 25 02 F6 | 	mov	local04, arg01
07f88     01 24 86 F1 | 	sub	local04, #1
07f8c     12 15 02 F6 | 	mov	arg02, local04
07f90     01 14 66 F0 | 	shl	arg02, #1
07f94     12 15 02 F1 | 	add	arg02, local04
07f98     02 14 66 F0 | 	shl	arg02, #2
07f9c     03 00 00 FF 
07fa0     00 E4 85 F1 | 	sub	objptr, ##1536
07fa4     F2 14 02 F1 | 	add	arg02, objptr
07fa8     0A 1F 02 FB | 	rdlong	local01, arg02
07fac     04 14 06 F1 | 	add	arg02, #4
07fb0     0A 27 02 FB | 	rdlong	local05, arg02
07fb4     01 12 86 F1 | 	sub	arg01, #1
07fb8     09 29 02 F6 | 	mov	local06, arg01
07fbc     01 28 66 F0 | 	shl	local06, #1
07fc0     09 29 02 F1 | 	add	local06, arg01
07fc4     02 28 66 F0 | 	shl	local06, #2
07fc8     F2 28 02 F1 | 	add	local06, objptr
07fcc     08 28 06 F1 | 	add	local06, #8
07fd0     14 13 02 FB | 	rdlong	arg01, local06
07fd4     13 21 02 F6 | 	mov	local02, local05
07fd8     09 23 02 F6 | 	mov	local03, arg01
07fdc                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
07fdc                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
07fdc     17 22 0E F2 | 	cmp	local03, #23 wz
07fe0     67 00 00 FF 
07fe4     60 E4 85 F1 | 	sub	objptr, ##52832
07fe8     10 00 90 AD |  if_e	jmp	#LR__0702
07fec     22 12 06 F6 | 	mov	arg01, #34
07ff0     C4 E8 BF FD | 	call	#_compile_error
07ff4     22 FA 05 F6 | 	mov	result1, #34
07ff8     64 02 90 FD | 	jmp	#LR__0707
07ffc                 | LR__0702
07ffc     0F 2B 02 F6 | 	mov	local07, local01
08000                 | ' varnum=t1.result.uresult
08000                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
08000     57 00 00 FF 
08004     28 E4 05 F1 | 	add	objptr, ##44584
08008     F2 24 02 FB | 	rdlong	local04, objptr
0800c     03 24 66 F0 | 	shl	local04, #3
08010     02 00 00 FF 
08014     38 E4 85 F1 | 	sub	objptr, ##1080
08018     F2 24 02 F1 | 	add	local04, objptr
0801c     12 13 02 FB | 	rdlong	arg01, local04
08020     5F 01 00 FF 
08024     93 15 06 F6 | 	mov	arg02, ##@LR__4904
08028     54 00 00 FF 
0802c     F0 E5 85 F1 | 	sub	objptr, ##43504
08030     40 44 B1 FD | 	call	#__system___string_cmp
08034     00 FA 0D F2 | 	cmp	result1, #0 wz
08038     10 00 90 AD |  if_e	jmp	#LR__0703
0803c     21 12 06 F6 | 	mov	arg01, #33
08040     74 E8 BF FD | 	call	#_compile_error
08044     21 FA 05 F6 | 	mov	result1, #33
08048     14 02 90 FD | 	jmp	#LR__0707
0804c                 | LR__0703
0804c     57 00 00 FF 
08050     28 E4 05 F1 | 	add	objptr, ##44584
08054     F2 24 02 FB | 	rdlong	local04, objptr
08058     01 24 06 F1 | 	add	local04, #1
0805c     F2 24 62 FC | 	wrlong	local04, objptr
08060     57 00 00 FF 
08064     28 E4 85 F1 | 	sub	objptr, ##44584
08068     9C 0C B0 FD | 	call	#_expr
0806c                 | ' ct+=1
0806c                 | ' expr()  ' there is "to" value pushed on the stack
0806c                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0806c     57 00 00 FF 
08070     28 E4 05 F1 | 	add	objptr, ##44584
08074     F2 24 02 FB | 	rdlong	local04, objptr
08078     03 24 66 F0 | 	shl	local04, #3
0807c     02 00 00 FF 
08080     38 E4 85 F1 | 	sub	objptr, ##1080
08084     F2 24 02 F1 | 	add	local04, objptr
08088     12 13 02 FB | 	rdlong	arg01, local04
0808c     5F 01 00 FF 
08090     96 15 06 F6 | 	mov	arg02, ##@LR__4905
08094     54 00 00 FF 
08098     F0 E5 85 F1 | 	sub	objptr, ##43504
0809c     D4 43 B1 FD | 	call	#__system___string_cmp
080a0     00 FA 0D F2 | 	cmp	result1, #0 wz
080a4     3C 00 90 AD |  if_e	jmp	#LR__0704
080a8     57 00 00 FF 
080ac     28 E4 05 F1 | 	add	objptr, ##44584
080b0     F2 28 02 FB | 	rdlong	local06, objptr
080b4     03 28 66 F0 | 	shl	local06, #3
080b8     02 00 00 FF 
080bc     38 E4 85 F1 | 	sub	objptr, ##1080
080c0     F2 28 02 F1 | 	add	local06, objptr
080c4     14 13 02 FB | 	rdlong	arg01, local06
080c8     5F 01 00 FF 
080cc     9B 15 06 F6 | 	mov	arg02, ##@LR__4906
080d0     54 00 00 FF 
080d4     F0 E5 85 F1 | 	sub	objptr, ##43504
080d8     98 43 B1 FD | 	call	#__system___string_cmp
080dc     00 FA 0D F2 | 	cmp	result1, #0 wz
080e0     24 00 90 5D |  if_ne	jmp	#LR__0705
080e4                 | LR__0704
080e4     57 00 00 FF 
080e8     28 E4 05 F1 | 	add	objptr, ##44584
080ec     F2 28 02 FB | 	rdlong	local06, objptr
080f0     01 28 06 F1 | 	add	local06, #1
080f4     F2 28 62 FC | 	wrlong	local06, objptr
080f8     57 00 00 FF 
080fc     28 E4 85 F1 | 	sub	objptr, ##44584
08100     04 0C B0 FD | 	call	#_expr
08104     78 00 90 FD | 	jmp	#LR__0706
08108                 | LR__0705
08108     6A 00 00 FF 
0810c     60 E4 05 F1 | 	add	objptr, ##54368
08110     F2 28 02 FB | 	rdlong	local06, objptr
08114     14 27 02 F6 | 	mov	local05, local06
08118     01 26 66 F0 | 	shl	local05, #1
0811c     14 27 02 F1 | 	add	local05, local06
08120     02 26 66 F0 | 	shl	local05, #2
08124     03 00 00 FF 
08128     00 E4 85 F1 | 	sub	objptr, ##1536
0812c     F2 26 02 F1 | 	add	local05, objptr
08130     08 26 06 F1 | 	add	local05, #8
08134     13 39 68 FC | 	wrlong	#28, local05
08138     03 00 00 FF 
0813c     00 E4 05 F1 | 	add	objptr, ##1536
08140     F2 28 02 FB | 	rdlong	local06, objptr
08144     14 27 02 F6 | 	mov	local05, local06
08148     01 26 66 F0 | 	shl	local05, #1
0814c     14 27 02 F1 | 	add	local05, local06
08150     02 26 66 F0 | 	shl	local05, #2
08154     03 00 00 FF 
08158     00 E4 85 F1 | 	sub	objptr, ##1536
0815c     F2 26 02 F1 | 	add	local05, objptr
08160     13 03 68 FC | 	wrlong	#1, local05
08164     03 00 00 FF 
08168     00 E4 05 F1 | 	add	objptr, ##1536
0816c     F2 28 02 FB | 	rdlong	local06, objptr
08170     01 28 06 F1 | 	add	local06, #1
08174     F2 28 62 FC | 	wrlong	local06, objptr
08178     6A 00 00 FF 
0817c     60 E4 85 F1 | 	sub	objptr, ##54368
08180                 | LR__0706
08180     6A 00 00 FF 
08184     60 E4 05 F1 | 	add	objptr, ##54368
08188     F2 28 02 FB | 	rdlong	local06, objptr
0818c     14 27 02 F6 | 	mov	local05, local06
08190     01 26 66 F0 | 	shl	local05, #1
08194     14 27 02 F1 | 	add	local05, local06
08198     02 26 66 F0 | 	shl	local05, #2
0819c     03 00 00 FF 
081a0     00 E4 85 F1 | 	sub	objptr, ##1536
081a4     F2 26 02 F1 | 	add	local05, objptr
081a8     08 26 06 F1 | 	add	local05, #8
081ac     13 39 68 FC | 	wrlong	#28, local05
081b0     03 00 00 FF 
081b4     00 E4 05 F1 | 	add	objptr, ##1536
081b8     F2 28 02 FB | 	rdlong	local06, objptr
081bc     14 27 02 F6 | 	mov	local05, local06
081c0     01 26 66 F0 | 	shl	local05, #1
081c4     14 27 02 F1 | 	add	local05, local06
081c8     02 26 66 F0 | 	shl	local05, #2
081cc     03 00 00 FF 
081d0     00 E4 85 F1 | 	sub	objptr, ##1536
081d4     F2 26 02 F1 | 	add	local05, objptr
081d8     13 2B 62 FC | 	wrlong	local07, local05
081dc     03 00 00 FF 
081e0     00 E4 05 F1 | 	add	objptr, ##1536
081e4     F2 2A 02 FB | 	rdlong	local07, objptr
081e8     01 2A 06 F1 | 	add	local07, #1
081ec     F2 2A 62 FC | 	wrlong	local07, objptr
081f0     15 29 02 F6 | 	mov	local06, local07
081f4     01 28 66 F0 | 	shl	local06, #1
081f8     15 29 02 F1 | 	add	local06, local07
081fc     02 28 66 F0 | 	shl	local06, #2
08200     03 00 00 FF 
08204     00 E4 85 F1 | 	sub	objptr, ##1536
08208     F2 28 02 F1 | 	add	local06, objptr
0820c     08 28 06 F1 | 	add	local06, #8
08210     14 95 68 FC | 	wrlong	#74, local06
08214     03 00 00 FF 
08218     00 E4 05 F1 | 	add	objptr, ##1536
0821c     F2 2A 02 FB | 	rdlong	local07, objptr
08220     15 29 02 F6 | 	mov	local06, local07
08224     01 28 66 F0 | 	shl	local06, #1
08228     15 29 02 F1 | 	add	local06, local07
0822c     02 28 66 F0 | 	shl	local06, #2
08230     03 00 00 FF 
08234     00 E4 85 F1 | 	sub	objptr, ##1536
08238     F2 28 02 F1 | 	add	local06, objptr
0823c     14 01 68 FC | 	wrlong	#0, local06
08240     03 00 00 FF 
08244     00 E4 05 F1 | 	add	objptr, ##1536
08248     F2 2A 02 FB | 	rdlong	local07, objptr
0824c     01 2A 06 F1 | 	add	local07, #1
08250     F2 2A 62 FC | 	wrlong	local07, objptr
08254     6A 00 00 FF 
08258     60 E4 85 F1 | 	sub	objptr, ##54368
0825c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0825c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0825c                 | ' 
0825c                 | ' 
0825c                 | ' return 0
0825c     00 FA 05 F6 | 	mov	result1, #0
08260                 | LR__0707
08260     A7 F0 03 F6 | 	mov	ptra, fp
08264     B2 00 A0 FD | 	call	#popregs_
08268                 | _compile_for_ret
08268     2D 00 64 FD | 	ret
0826c                 | 
0826c                 | ' 
0826c                 | ' 
0826c                 | ' sub do_for()
0826c                 | _do_for
0826c     01 4A 05 F6 | 	mov	COUNT_, #1
08270     A8 00 A0 FD | 	call	#pushregs_
08274     10 F0 07 F1 | 	add	ptra, #16
08278     79 00 00 FF 
0827c     BC E5 05 F1 | 	add	objptr, ##62396
08280     F2 12 02 FB | 	rdlong	arg01, objptr
08284     01 12 06 F1 | 	add	arg01, #1
08288     F2 12 62 FC | 	wrlong	arg01, objptr
0828c     79 00 00 FF 
08290     BC E5 85 F1 | 	sub	objptr, ##62396
08294     F8 1E B0 FD | 	call	#_pop
08298     A7 FA 61 FC | 	wrlong	result1, fp
0829c     04 4E 05 F1 | 	add	fp, #4
082a0     A7 FC 61 FC | 	wrlong	result2, fp
082a4     04 4E 05 F1 | 	add	fp, #4
082a8     A7 FE 61 FC | 	wrlong	result3, fp
082ac     08 4E 85 F1 | 	sub	fp, #8
082b0     79 00 00 FF 
082b4     BC E5 05 F1 | 	add	objptr, ##62396
082b8     F2 12 02 FB | 	rdlong	arg01, objptr
082bc     09 1F 02 F6 | 	mov	local01, arg01
082c0     02 1E 66 F0 | 	shl	local01, #2
082c4     09 1F 02 F1 | 	add	local01, arg01
082c8     02 1E 66 F0 | 	shl	local01, #2
082cc     07 00 00 FF 
082d0     40 E5 85 F1 | 	sub	objptr, ##3904
082d4     F2 1E 02 F1 | 	add	local01, objptr
082d8     A7 12 02 FB | 	rdlong	arg01, fp
082dc     08 1E 06 F1 | 	add	local01, #8
082e0     0F 13 62 FC | 	wrlong	arg01, local01
082e4     72 00 00 FF 
082e8     7C E4 85 F1 | 	sub	objptr, ##58492
082ec     A0 1E B0 FD | 	call	#_pop
082f0     A7 FA 61 FC | 	wrlong	result1, fp
082f4     04 4E 05 F1 | 	add	fp, #4
082f8     A7 FC 61 FC | 	wrlong	result2, fp
082fc     04 4E 05 F1 | 	add	fp, #4
08300     A7 FE 61 FC | 	wrlong	result3, fp
08304     08 4E 85 F1 | 	sub	fp, #8
08308     79 00 00 FF 
0830c     BC E5 05 F1 | 	add	objptr, ##62396
08310     F2 12 02 FB | 	rdlong	arg01, objptr
08314     09 1F 02 F6 | 	mov	local01, arg01
08318     02 1E 66 F0 | 	shl	local01, #2
0831c     09 1F 02 F1 | 	add	local01, arg01
08320     02 1E 66 F0 | 	shl	local01, #2
08324     07 00 00 FF 
08328     40 E5 85 F1 | 	sub	objptr, ##3904
0832c     F2 1E 02 F1 | 	add	local01, objptr
08330     A7 12 02 F6 | 	mov	arg01, fp
08334     72 00 00 FF 
08338     7C E4 85 F1 | 	sub	objptr, ##58492
0833c     48 A7 B0 FD | 	call	#_converttoint
08340     FD 12 02 F6 | 	mov	arg01, result1
08344     0C 1E 06 F1 | 	add	local01, #12
08348     0F 13 62 FC | 	wrlong	arg01, local01
0834c     40 1E B0 FD | 	call	#_pop
08350     A7 FA 61 FC | 	wrlong	result1, fp
08354     04 4E 05 F1 | 	add	fp, #4
08358     A7 FC 61 FC | 	wrlong	result2, fp
0835c     04 4E 05 F1 | 	add	fp, #4
08360     A7 FE 61 FC | 	wrlong	result3, fp
08364     08 4E 85 F1 | 	sub	fp, #8
08368     79 00 00 FF 
0836c     BC E5 05 F1 | 	add	objptr, ##62396
08370     F2 12 02 FB | 	rdlong	arg01, objptr
08374     09 1F 02 F6 | 	mov	local01, arg01
08378     02 1E 66 F0 | 	shl	local01, #2
0837c     09 1F 02 F1 | 	add	local01, arg01
08380     02 1E 66 F0 | 	shl	local01, #2
08384     07 00 00 FF 
08388     40 E5 85 F1 | 	sub	objptr, ##3904
0838c     F2 1E 02 F1 | 	add	local01, objptr
08390     A7 12 02 F6 | 	mov	arg01, fp
08394     72 00 00 FF 
08398     7C E4 85 F1 | 	sub	objptr, ##58492
0839c     E8 A6 B0 FD | 	call	#_converttoint
083a0     10 1E 06 F1 | 	add	local01, #16
083a4     0F FB 61 FC | 	wrlong	result1, local01
083a8                 | ' fortop+=1
083a8                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
083a8                 | ' 'if i> maxfor then printerror(36) : return
083a8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
083a8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
083a8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
083a8                 | ' if compiledline(lineptr_e).result_type=token_end then
083a8     6A 00 00 FF 
083ac     64 E4 05 F1 | 	add	objptr, ##54372
083b0     F2 12 02 FB | 	rdlong	arg01, objptr
083b4     09 1F 02 F6 | 	mov	local01, arg01
083b8     01 1E 66 F0 | 	shl	local01, #1
083bc     09 1F 02 F1 | 	add	local01, arg01
083c0     02 1E 66 F0 | 	shl	local01, #2
083c4     03 00 00 FF 
083c8     04 E4 85 F1 | 	sub	objptr, ##1540
083cc     F2 1E 02 F1 | 	add	local01, objptr
083d0     08 1E 06 F1 | 	add	local01, #8
083d4     0F 1F 02 FB | 	rdlong	local01, local01
083d8     FE 1F 0E F2 | 	cmp	local01, #510 wz
083dc     67 00 00 FF 
083e0     60 E4 85 F1 | 	sub	objptr, ##52832
083e4     70 00 90 5D |  if_ne	jmp	#LR__0710
083e8     79 00 00 FF 
083ec     BC E5 05 F1 | 	add	objptr, ##62396
083f0     F2 12 02 FB | 	rdlong	arg01, objptr
083f4     09 1F 02 F6 | 	mov	local01, arg01
083f8     02 1E 66 F0 | 	shl	local01, #2
083fc     09 1F 02 F1 | 	add	local01, arg01
08400     02 1E 66 F0 | 	shl	local01, #2
08404     07 00 00 FF 
08408     40 E5 85 F1 | 	sub	objptr, ##3904
0840c     F2 1E 02 F1 | 	add	local01, objptr
08410     07 00 00 FF 
08414     18 E5 05 F1 | 	add	objptr, ##3864
08418     F2 12 02 FB | 	rdlong	arg01, objptr
0841c     0F 13 62 FC | 	wrlong	arg01, local01
08420     28 E4 05 F1 | 	add	objptr, #40
08424     F2 12 02 FB | 	rdlong	arg01, objptr
08428     09 1F 02 F6 | 	mov	local01, arg01
0842c     02 1E 66 F0 | 	shl	local01, #2
08430     09 1F 02 F1 | 	add	local01, arg01
08434     02 1E 66 F0 | 	shl	local01, #2
08438     07 00 00 FF 
0843c     40 E5 85 F1 | 	sub	objptr, ##3904
08440     F2 1E 02 F1 | 	add	local01, objptr
08444     04 1E 06 F1 | 	add	local01, #4
08448     0F 01 68 FC | 	wrlong	#0, local01
0844c     72 00 00 FF 
08450     7C E4 85 F1 | 	sub	objptr, ##58492
08454     7C 00 90 FD | 	jmp	#LR__0711
08458                 | LR__0710
08458     79 00 00 FF 
0845c     BC E5 05 F1 | 	add	objptr, ##62396
08460     F2 12 02 FB | 	rdlong	arg01, objptr
08464     09 1F 02 F6 | 	mov	local01, arg01
08468     02 1E 66 F0 | 	shl	local01, #2
0846c     09 1F 02 F1 | 	add	local01, arg01
08470     02 1E 66 F0 | 	shl	local01, #2
08474     07 00 00 FF 
08478     40 E5 85 F1 | 	sub	objptr, ##3904
0847c     F2 1E 02 F1 | 	add	local01, objptr
08480     07 00 00 FF 
08484     20 E5 05 F1 | 	add	objptr, ##3872
08488     F2 12 02 FB | 	rdlong	arg01, objptr
0848c     0F 13 62 FC | 	wrlong	arg01, local01
08490     20 E4 05 F1 | 	add	objptr, #32
08494     F2 12 02 FB | 	rdlong	arg01, objptr
08498     09 1F 02 F6 | 	mov	local01, arg01
0849c     02 1E 66 F0 | 	shl	local01, #2
084a0     09 1F 02 F1 | 	add	local01, arg01
084a4     02 1E 66 F0 | 	shl	local01, #2
084a8     07 00 00 FF 
084ac     40 E5 85 F1 | 	sub	objptr, ##3904
084b0     F2 1E 02 F1 | 	add	local01, objptr
084b4     08 00 00 FF 
084b8     18 E4 85 F1 | 	sub	objptr, ##4120
084bc     F2 12 02 FB | 	rdlong	arg01, objptr
084c0     6A 00 00 FF 
084c4     64 E4 85 F1 | 	sub	objptr, ##54372
084c8     01 12 06 F1 | 	add	arg01, #1
084cc     04 1E 06 F1 | 	add	local01, #4
084d0     0F 13 62 FC | 	wrlong	arg01, local01
084d4                 | LR__0711
084d4     A7 F0 03 F6 | 	mov	ptra, fp
084d8     B2 00 A0 FD | 	call	#popregs_
084dc                 | _do_for_ret
084dc     2D 00 64 FD | 	ret
084e0                 | 
084e0                 | ' 
084e0                 | ' ' now do_next todo
084e0                 | ' 
084e0                 | ' sub do_next()
084e0                 | _do_next
084e0     04 4A 05 F6 | 	mov	COUNT_, #4
084e4     A8 00 A0 FD | 	call	#pushregs_
084e8     A4 1C B0 FD | 	call	#_pop
084ec     FD 1E 02 F6 | 	mov	local01, result1
084f0     FE 20 02 F6 | 	mov	local02, result2
084f4     FF 22 02 F6 | 	mov	local03, result3
084f8                 | ' 
084f8                 | ' t1=pop() :varnum=t1.result.uresult
084f8                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
084f8     79 00 00 FF 
084fc     BC E5 05 F1 | 	add	objptr, ##62396
08500     F2 12 02 FB | 	rdlong	arg01, objptr
08504     09 15 02 F6 | 	mov	arg02, arg01
08508     02 14 66 F0 | 	shl	arg02, #2
0850c     09 15 02 F1 | 	add	arg02, arg01
08510     02 14 66 F0 | 	shl	arg02, #2
08514     07 00 00 FF 
08518     40 E5 85 F1 | 	sub	objptr, ##3904
0851c     F2 14 02 F1 | 	add	arg02, objptr
08520     08 14 06 F1 | 	add	arg02, #8
08524     0A 15 02 FB | 	rdlong	arg02, arg02
08528     0F 15 0A F2 | 	cmp	arg02, local01 wz
0852c     72 00 00 FF 
08530     7C E4 85 F1 | 	sub	objptr, ##58492
08534     0C 00 90 AD |  if_e	jmp	#LR__0720
08538     25 12 06 F6 | 	mov	arg01, #37
0853c     24 07 B1 FD | 	call	#_printerror
08540     A8 02 90 FD | 	jmp	#LR__0725
08544                 | LR__0720
08544                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
08544     0F 15 02 F6 | 	mov	arg02, local01
08548     04 14 66 F0 | 	shl	arg02, #4
0854c     34 00 00 FF 
08550     EC E5 05 F1 | 	add	objptr, ##27116
08554     F2 14 02 F1 | 	add	arg02, objptr
08558     0C 14 06 F1 | 	add	arg02, #12
0855c     0A 15 02 FB | 	rdlong	arg02, arg02
08560     1E 14 0E F2 | 	cmp	arg02, #30 wz
08564     34 00 00 FF 
08568     EC E5 85 F1 | 	sub	objptr, ##27116
0856c     54 00 90 5D |  if_ne	jmp	#LR__0721
08570     0F 15 02 F6 | 	mov	arg02, local01
08574     04 14 66 F0 | 	shl	arg02, #4
08578     34 00 00 FF 
0857c     EC E5 05 F1 | 	add	objptr, ##27116
08580     F2 14 02 F1 | 	add	arg02, objptr
08584     0C 14 06 F1 | 	add	arg02, #12
08588     0A 39 68 FC | 	wrlong	#28, arg02
0858c     0F 25 02 F6 | 	mov	local04, local01
08590     04 24 66 F0 | 	shl	local04, #4
08594     F2 24 02 F1 | 	add	local04, objptr
08598     0F 13 02 F6 | 	mov	arg01, local01
0859c     04 12 66 F0 | 	shl	arg01, #4
085a0     F2 12 02 F1 | 	add	arg01, objptr
085a4     04 12 06 F1 | 	add	arg01, #4
085a8     09 13 02 FB | 	rdlong	arg01, arg01
085ac     34 00 00 FF 
085b0     EC E5 85 F1 | 	sub	objptr, ##27116
085b4     01 14 06 F6 | 	mov	arg02, #1
085b8     D4 6E B1 FD | 	call	#__system___float_tointeger
085bc     04 24 06 F1 | 	add	local04, #4
085c0     12 FB 61 FC | 	wrlong	result1, local04
085c4                 | LR__0721
085c4     79 00 00 FF 
085c8     BC E5 05 F1 | 	add	objptr, ##62396
085cc     F2 12 02 FB | 	rdlong	arg01, objptr
085d0     09 25 02 F6 | 	mov	local04, arg01
085d4     02 24 66 F0 | 	shl	local04, #2
085d8     09 25 02 F1 | 	add	local04, arg01
085dc     02 24 66 F0 | 	shl	local04, #2
085e0     07 00 00 FF 
085e4     40 E5 85 F1 | 	sub	objptr, ##3904
085e8     F2 24 02 F1 | 	add	local04, objptr
085ec     0C 24 06 F1 | 	add	local04, #12
085f0     12 25 02 FB | 	rdlong	local04, local04
085f4     0F 13 02 F6 | 	mov	arg01, local01
085f8     04 12 66 F0 | 	shl	arg01, #4
085fc     3D 00 00 FF 
08600     90 E4 85 F1 | 	sub	objptr, ##31376
08604     F2 12 02 F1 | 	add	arg01, objptr
08608     0F FF 01 F6 | 	mov	result3, local01
0860c     04 FE 65 F0 | 	shl	result3, #4
08610     F2 FE 01 F1 | 	add	result3, objptr
08614     04 FE 05 F1 | 	add	result3, #4
08618     FF FE 01 FB | 	rdlong	result3, result3
0861c     12 FF 01 F1 | 	add	result3, local04
08620     04 12 06 F1 | 	add	arg01, #4
08624     09 FF 61 FC | 	wrlong	result3, arg01
08628                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08628                 | ' if fortable(fortop).stepval>=0 then
08628     44 00 00 FF 
0862c     D0 E5 05 F1 | 	add	objptr, ##35280
08630     F2 12 02 FB | 	rdlong	arg01, objptr
08634     09 25 02 F6 | 	mov	local04, arg01
08638     02 24 66 F0 | 	shl	local04, #2
0863c     09 25 02 F1 | 	add	local04, arg01
08640     02 24 66 F0 | 	shl	local04, #2
08644     07 00 00 FF 
08648     40 E5 85 F1 | 	sub	objptr, ##3904
0864c     F2 24 02 F1 | 	add	local04, objptr
08650     0C 24 06 F1 | 	add	local04, #12
08654     12 25 02 FB | 	rdlong	local04, local04
08658     00 24 56 F2 | 	cmps	local04, #0 wc
0865c     72 00 00 FF 
08660     7C E4 85 F1 | 	sub	objptr, ##58492
08664     78 00 90 CD |  if_b	jmp	#LR__0722
08668                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08668     04 1E 66 F0 | 	shl	local01, #4
0866c     34 00 00 FF 
08670     EC E5 05 F1 | 	add	objptr, ##27116
08674     F2 1E 02 F1 | 	add	local01, objptr
08678     44 00 00 FF 
0867c     D0 E5 05 F1 | 	add	objptr, ##35280
08680     F2 24 02 FB | 	rdlong	local04, objptr
08684     12 13 02 F6 | 	mov	arg01, local04
08688     02 12 66 F0 | 	shl	arg01, #2
0868c     12 13 02 F1 | 	add	arg01, local04
08690     02 12 66 F0 | 	shl	arg01, #2
08694     07 00 00 FF 
08698     40 E5 85 F1 | 	sub	objptr, ##3904
0869c     F2 12 02 F1 | 	add	arg01, objptr
086a0     04 1E 06 F1 | 	add	local01, #4
086a4     0F 25 02 FB | 	rdlong	local04, local01
086a8     10 12 06 F1 | 	add	arg01, #16
086ac     09 13 02 FB | 	rdlong	arg01, arg01
086b0     09 25 5A F2 | 	cmps	local04, arg01 wcz
086b4     72 00 00 FF 
086b8     7C E4 85 F1 | 	sub	objptr, ##58492
086bc     9C 00 90 ED |  if_be	jmp	#LR__0724
086c0     79 00 00 FF 
086c4     BC E5 05 F1 | 	add	objptr, ##62396
086c8     F2 24 02 FB | 	rdlong	local04, objptr
086cc     01 24 86 F1 | 	sub	local04, #1
086d0     F2 24 62 FC | 	wrlong	local04, objptr
086d4     79 00 00 FF 
086d8     BC E5 85 F1 | 	sub	objptr, ##62396
086dc     0C 01 90 FD | 	jmp	#LR__0725
086e0                 | LR__0722
086e0                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
086e0     0F 13 02 F6 | 	mov	arg01, local01
086e4     04 12 66 F0 | 	shl	arg01, #4
086e8     34 00 00 FF 
086ec     EC E5 05 F1 | 	add	objptr, ##27116
086f0     F2 12 02 F1 | 	add	arg01, objptr
086f4     44 00 00 FF 
086f8     D0 E5 05 F1 | 	add	objptr, ##35280
086fc     F2 24 02 FB | 	rdlong	local04, objptr
08700     12 1F 02 F6 | 	mov	local01, local04
08704     02 1E 66 F0 | 	shl	local01, #2
08708     12 1F 02 F1 | 	add	local01, local04
0870c     02 1E 66 F0 | 	shl	local01, #2
08710     07 00 00 FF 
08714     40 E5 85 F1 | 	sub	objptr, ##3904
08718     F2 1E 02 F1 | 	add	local01, objptr
0871c     04 12 06 F1 | 	add	arg01, #4
08720     09 13 02 FB | 	rdlong	arg01, arg01
08724     10 1E 06 F1 | 	add	local01, #16
08728     0F 1F 02 FB | 	rdlong	local01, local01
0872c     0F 13 52 F2 | 	cmps	arg01, local01 wc
08730     72 00 00 FF 
08734     7C E4 85 F1 | 	sub	objptr, ##58492
08738     20 00 90 3D |  if_ae	jmp	#LR__0723
0873c     79 00 00 FF 
08740     BC E5 05 F1 | 	add	objptr, ##62396
08744     F2 24 02 FB | 	rdlong	local04, objptr
08748     01 24 86 F1 | 	sub	local04, #1
0874c     F2 24 62 FC | 	wrlong	local04, objptr
08750     79 00 00 FF 
08754     BC E5 85 F1 | 	sub	objptr, ##62396
08758     90 00 90 FD | 	jmp	#LR__0725
0875c                 | LR__0723
0875c                 | LR__0724
0875c     79 00 00 FF 
08760     BC E5 05 F1 | 	add	objptr, ##62396
08764     F2 1E 02 FB | 	rdlong	local01, objptr
08768     0F 25 02 F6 | 	mov	local04, local01
0876c     02 24 66 F0 | 	shl	local04, #2
08770     0F 25 02 F1 | 	add	local04, local01
08774     02 24 66 F0 | 	shl	local04, #2
08778     07 00 00 FF 
0877c     40 E5 85 F1 | 	sub	objptr, ##3904
08780     F2 24 02 F1 | 	add	local04, objptr
08784     12 25 02 FB | 	rdlong	local04, local04
08788     07 00 00 FF 
0878c     18 E5 05 F1 | 	add	objptr, ##3864
08790     F2 24 62 FC | 	wrlong	local04, objptr
08794     28 E4 05 F1 | 	add	objptr, #40
08798     F2 1E 02 FB | 	rdlong	local01, objptr
0879c     0F 25 02 F6 | 	mov	local04, local01
087a0     02 24 66 F0 | 	shl	local04, #2
087a4     0F 25 02 F1 | 	add	local04, local01
087a8     02 24 66 F0 | 	shl	local04, #2
087ac     07 00 00 FF 
087b0     40 E5 85 F1 | 	sub	objptr, ##3904
087b4     F2 24 02 F1 | 	add	local04, objptr
087b8     04 24 06 F1 | 	add	local04, #4
087bc     12 25 02 FB | 	rdlong	local04, local04
087c0     07 00 00 FF 
087c4     1C E5 05 F1 | 	add	objptr, ##3868
087c8     F2 24 62 FC | 	wrlong	local04, objptr
087cc     0F 00 00 FF 
087d0     38 E5 85 F1 | 	sub	objptr, ##7992
087d4     F2 24 02 FB | 	rdlong	local04, objptr
087d8     01 24 86 F1 | 	sub	local04, #1
087dc     04 E4 05 F1 | 	add	objptr, #4
087e0     F2 24 62 FC | 	wrlong	local04, objptr
087e4     6A 00 00 FF 
087e8     64 E4 85 F1 | 	sub	objptr, ##54372
087ec                 | LR__0725
087ec     A7 F0 03 F6 | 	mov	ptra, fp
087f0     B2 00 A0 FD | 	call	#popregs_
087f4                 | _do_next_ret
087f4     2D 00 64 FD | 	ret
087f8                 | 
087f8                 | ' 
087f8                 | ' 
087f8                 | ' function compile_next() as ulong
087f8                 | _compile_next
087f8     04 4A 05 F6 | 	mov	COUNT_, #4
087fc     A8 00 A0 FD | 	call	#pushregs_
08800     57 00 00 FF 
08804     28 E4 05 F1 | 	add	objptr, ##44584
08808     F2 12 02 FB | 	rdlong	arg01, objptr
0880c     03 12 66 F0 | 	shl	arg01, #3
08810     02 00 00 FF 
08814     38 E4 85 F1 | 	sub	objptr, ##1080
08818     F2 12 02 F1 | 	add	arg01, objptr
0881c     09 1F 02 FB | 	rdlong	local01, arg01
08820                 | ' 
08820                 | ' varname$=lparts(ct).part$ 
08820                 | ' 'suffix$=right$(varname$,1)
08820                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08820                 | ' if varnum=0 then compile_error(35)  : return 35
08820     04 E4 85 F1 | 	sub	objptr, #4
08824     F2 14 0A FB | 	rdlong	arg02, objptr wz
08828     54 00 00 FF 
0882c     EC E5 85 F1 | 	sub	objptr, ##43500
08830     10 00 90 5D |  if_ne	jmp	#LR__0730
08834     23 12 06 F6 | 	mov	arg01, #35
08838     7C E0 BF FD | 	call	#_compile_error
0883c     23 FA 05 F6 | 	mov	result1, #35
08840     58 01 90 FD | 	jmp	#LR__0734
08844                 | LR__0730
08844     01 20 66 F6 | 	neg	local02, #1
08848                 | ' j=-1
08848                 | ' for i=0 to varnum-1
08848     00 22 06 F6 | 	mov	local03, #0
0884c     54 00 00 FF 
08850     EC E5 05 F1 | 	add	objptr, ##43500
08854     F2 24 02 FB | 	rdlong	local04, objptr
08858     54 00 00 FF 
0885c     EC E5 85 F1 | 	sub	objptr, ##43500
08860                 | LR__0731
08860     12 23 12 F2 | 	cmp	local03, local04 wc
08864     38 00 90 3D |  if_ae	jmp	#LR__0732
08868                 | '   if variables(i).name=varname$ then j=i : exit
08868     11 15 02 F6 | 	mov	arg02, local03
0886c     04 14 66 F0 | 	shl	arg02, #4
08870     34 00 00 FF 
08874     EC E5 05 F1 | 	add	objptr, ##27116
08878     F2 14 02 F1 | 	add	arg02, objptr
0887c     0A 13 02 FB | 	rdlong	arg01, arg02
08880     0F 15 02 F6 | 	mov	arg02, local01
08884     34 00 00 FF 
08888     EC E5 85 F1 | 	sub	objptr, ##27116
0888c     E4 3B B1 FD | 	call	#__system___string_cmp
08890     00 FA 0D F2 | 	cmp	result1, #0 wz
08894     11 21 02 A6 |  if_e	mov	local02, local03
08898     01 22 06 51 |  if_ne	add	local03, #1
0889c     C0 FF 9F 5D |  if_ne	jmp	#LR__0731
088a0                 | LR__0732
088a0                 | ' if j=-1 then compile_error(35) : return 35
088a0     FF FF 7F FF 
088a4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
088a8     10 00 90 5D |  if_ne	jmp	#LR__0733
088ac     23 12 06 F6 | 	mov	arg01, #35
088b0     04 E0 BF FD | 	call	#_compile_error
088b4     23 FA 05 F6 | 	mov	result1, #35
088b8     E0 00 90 FD | 	jmp	#LR__0734
088bc                 | LR__0733
088bc     6A 00 00 FF 
088c0     60 E4 05 F1 | 	add	objptr, ##54368
088c4     F2 24 02 FB | 	rdlong	local04, objptr
088c8     12 23 02 F6 | 	mov	local03, local04
088cc     01 22 66 F0 | 	shl	local03, #1
088d0     12 23 02 F1 | 	add	local03, local04
088d4     02 22 66 F0 | 	shl	local03, #2
088d8     03 00 00 FF 
088dc     00 E4 85 F1 | 	sub	objptr, ##1536
088e0     F2 22 02 F1 | 	add	local03, objptr
088e4     08 22 06 F1 | 	add	local03, #8
088e8     11 39 68 FC | 	wrlong	#28, local03
088ec     03 00 00 FF 
088f0     00 E4 05 F1 | 	add	objptr, ##1536
088f4     F2 24 02 FB | 	rdlong	local04, objptr
088f8     12 23 02 F6 | 	mov	local03, local04
088fc     01 22 66 F0 | 	shl	local03, #1
08900     12 23 02 F1 | 	add	local03, local04
08904     02 22 66 F0 | 	shl	local03, #2
08908     03 00 00 FF 
0890c     00 E4 85 F1 | 	sub	objptr, ##1536
08910     F2 22 02 F1 | 	add	local03, objptr
08914     11 21 62 FC | 	wrlong	local02, local03
08918     03 00 00 FF 
0891c     00 E4 05 F1 | 	add	objptr, ##1536
08920     F2 24 02 FB | 	rdlong	local04, objptr
08924     01 24 06 F1 | 	add	local04, #1
08928     F2 24 62 FC | 	wrlong	local04, objptr
0892c     12 23 02 F6 | 	mov	local03, local04
08930     01 22 66 F0 | 	shl	local03, #1
08934     12 23 02 F1 | 	add	local03, local04
08938     02 22 66 F0 | 	shl	local03, #2
0893c     03 00 00 FF 
08940     00 E4 85 F1 | 	sub	objptr, ##1536
08944     F2 22 02 F1 | 	add	local03, objptr
08948     08 22 06 F1 | 	add	local03, #8
0894c     11 97 68 FC | 	wrlong	#75, local03
08950     03 00 00 FF 
08954     00 E4 05 F1 | 	add	objptr, ##1536
08958     F2 24 02 FB | 	rdlong	local04, objptr
0895c     12 23 02 F6 | 	mov	local03, local04
08960     01 22 66 F0 | 	shl	local03, #1
08964     12 23 02 F1 | 	add	local03, local04
08968     02 22 66 F0 | 	shl	local03, #2
0896c     03 00 00 FF 
08970     00 E4 85 F1 | 	sub	objptr, ##1536
08974     F2 22 02 F1 | 	add	local03, objptr
08978     11 01 68 FC | 	wrlong	#0, local03
0897c     03 00 00 FF 
08980     00 E4 05 F1 | 	add	objptr, ##1536
08984     F2 24 02 FB | 	rdlong	local04, objptr
08988     01 24 06 F1 | 	add	local04, #1
0898c     F2 24 62 FC | 	wrlong	local04, objptr
08990     6A 00 00 FF 
08994     60 E4 85 F1 | 	sub	objptr, ##54368
08998                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08998                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08998                 | ' return 0
08998     00 FA 05 F6 | 	mov	result1, #0
0899c                 | LR__0734
0899c     A7 F0 03 F6 | 	mov	ptra, fp
089a0     B2 00 A0 FD | 	call	#popregs_
089a4                 | _compile_next_ret
089a4     2D 00 64 FD | 	ret
089a8                 | 
089a8                 | ' 
089a8                 | ' 
089a8                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
089a8                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
089a8                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
089a8                 | ' 
089a8                 | ' 
089a8                 | ' function compile_goto( ) as ulong
089a8                 | _compile_goto
089a8     03 4A 05 F6 | 	mov	COUNT_, #3
089ac     A8 00 A0 FD | 	call	#pushregs_
089b0     28 F0 07 F1 | 	add	ptra, #40
089b4                 | ' 
089b4                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
089b4     57 00 00 FF 
089b8     28 E4 05 F1 | 	add	objptr, ##44584
089bc     F2 16 02 FB | 	rdlong	arg03, objptr
089c0     03 16 66 F0 | 	shl	arg03, #3
089c4     02 00 00 FF 
089c8     38 E4 85 F1 | 	sub	objptr, ##1080
089cc     F2 16 02 F1 | 	add	arg03, objptr
089d0     04 16 06 F1 | 	add	arg03, #4
089d4     0B 17 02 FB | 	rdlong	arg03, arg03
089d8     01 00 00 FF 
089dc     00 16 0E F2 | 	cmp	arg03, ##512 wz
089e0     54 00 00 FF 
089e4     F0 E5 85 F1 | 	sub	objptr, ##43504
089e8     CC 02 90 5D |  if_ne	jmp	#LR__0745
089ec     57 00 00 FF 
089f0     28 E4 05 F1 | 	add	objptr, ##44584
089f4     F2 16 02 FB | 	rdlong	arg03, objptr
089f8     01 16 06 F1 | 	add	arg03, #1
089fc     03 16 66 F0 | 	shl	arg03, #3
08a00     02 00 00 FF 
08a04     38 E4 85 F1 | 	sub	objptr, ##1080
08a08     F2 16 02 F1 | 	add	arg03, objptr
08a0c     04 16 06 F1 | 	add	arg03, #4
08a10     0B 17 02 FB | 	rdlong	arg03, arg03
08a14     FE 17 0E F2 | 	cmp	arg03, #510 wz
08a18     54 00 00 FF 
08a1c     F0 E5 85 F1 | 	sub	objptr, ##43504
08a20     94 02 90 5D |  if_ne	jmp	#LR__0745
08a24     57 00 00 FF 
08a28     28 E4 05 F1 | 	add	objptr, ##44584
08a2c     F2 16 02 FB | 	rdlong	arg03, objptr
08a30     03 16 66 F0 | 	shl	arg03, #3
08a34     02 00 00 FF 
08a38     38 E4 85 F1 | 	sub	objptr, ##1080
08a3c     F2 16 02 F1 | 	add	arg03, objptr
08a40     0B 13 02 FB | 	rdlong	arg01, arg03
08a44     00 14 06 F6 | 	mov	arg02, #0
08a48     54 00 00 FF 
08a4c     F0 E5 85 F1 | 	sub	objptr, ##43504
08a50     EC 6B B1 FD | 	call	#__system____builtin_atoi
08a54     04 4E 05 F1 | 	add	fp, #4
08a58     A7 FA 61 FC | 	wrlong	result1, fp
08a5c     6A 00 00 FF 
08a60     60 E4 05 F1 | 	add	objptr, ##54368
08a64     F2 1E 02 FB | 	rdlong	local01, objptr
08a68     0F 21 02 F6 | 	mov	local02, local01
08a6c     01 20 66 F0 | 	shl	local02, #1
08a70     0F 21 02 F1 | 	add	local02, local01
08a74     02 20 66 F0 | 	shl	local02, #2
08a78     03 00 00 FF 
08a7c     00 E4 85 F1 | 	sub	objptr, ##1536
08a80     F2 20 02 F1 | 	add	local02, objptr
08a84     08 20 06 F1 | 	add	local02, #8
08a88     10 9D 68 FC | 	wrlong	#78, local02
08a8c     03 00 00 FF 
08a90     08 E4 05 F1 | 	add	objptr, ##1544
08a94     F2 22 02 FB | 	rdlong	local03, objptr
08a98     6A 00 00 FF 
08a9c     68 E4 85 F1 | 	sub	objptr, ##54376
08aa0     04 4E 05 F1 | 	add	fp, #4
08aa4     A7 22 62 FC | 	wrlong	local03, fp
08aa8     08 4E 85 F1 | 	sub	fp, #8
08aac                 | ' 
08aac                 | '   gotoline=val%(lparts(ct).part$) 
08aac                 | '   compiledline(lineptr).result_type=token_fast_goto
08aac                 | ' ' now find a pointer to goto
08aac                 | '   gotoptr=programstart
08aac                 | '   do
08aac                 | LR__0740
08aac     10 4E 05 F1 | 	add	fp, #16
08ab0     A7 12 02 F6 | 	mov	arg01, fp
08ab4     08 4E 85 F1 | 	sub	fp, #8
08ab8     A7 14 02 FB | 	rdlong	arg02, fp
08abc     08 4E 85 F1 | 	sub	fp, #8
08ac0     18 16 06 F6 | 	mov	arg03, #24
08ac4     0B 00 00 FF 
08ac8     C0 E4 05 F1 | 	add	objptr, ##5824
08acc     78 2D B1 FD | 	call	#_psram_spin2_read1
08ad0     0B 00 00 FF 
08ad4     C0 E4 85 F1 | 	sub	objptr, ##5824
08ad8                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08ad8                 | '     if gotoheader(0)<>$FFFFFFFF then
08ad8     10 4E 05 F1 | 	add	fp, #16
08adc     A7 22 02 FB | 	rdlong	local03, fp
08ae0     10 4E 85 F1 | 	sub	fp, #16
08ae4     FF FF 7F FF 
08ae8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08aec     24 00 90 AD |  if_e	jmp	#LR__0741
08af0     08 4E 05 F1 | 	add	fp, #8
08af4     A7 22 02 FB | 	rdlong	local03, fp
08af8     04 4E 05 F1 | 	add	fp, #4
08afc     A7 22 62 FC | 	wrlong	local03, fp
08b00     18 4E 05 F1 | 	add	fp, #24
08b04     A7 22 02 FB | 	rdlong	local03, fp
08b08     1C 4E 85 F1 | 	sub	fp, #28
08b0c     A7 22 62 FC | 	wrlong	local03, fp
08b10     08 4E 85 F1 | 	sub	fp, #8
08b14                 | LR__0741
08b14     24 4E 05 F1 | 	add	fp, #36
08b18     A7 22 02 FB | 	rdlong	local03, fp
08b1c     24 4E 85 F1 | 	sub	fp, #36
08b20     FF FF 3F FF 
08b24     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08b28     10 4E 05 51 |  if_ne	add	fp, #16
08b2c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08b30     10 4E 85 51 |  if_ne	sub	fp, #16
08b34     FF FF 7F 5F 
08b38     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08b3c     1C 00 90 AD |  if_e	jmp	#LR__0742
08b40     10 4E 05 F1 | 	add	fp, #16
08b44     A7 22 02 FB | 	rdlong	local03, fp
08b48     0C 4E 85 F1 | 	sub	fp, #12
08b4c     A7 20 02 FB | 	rdlong	local02, fp
08b50     04 4E 85 F1 | 	sub	fp, #4
08b54     10 23 0A F2 | 	cmp	local03, local02 wz
08b58     50 FF 9F 5D |  if_ne	jmp	#LR__0740
08b5c                 | LR__0742
08b5c                 | '   if gotoheader(0)=gotoline then
08b5c     10 4E 05 F1 | 	add	fp, #16
08b60     A7 22 02 FB | 	rdlong	local03, fp
08b64     0C 4E 85 F1 | 	sub	fp, #12
08b68     A7 1E 02 FB | 	rdlong	local01, fp
08b6c     04 4E 85 F1 | 	sub	fp, #4
08b70     0F 23 0A F2 | 	cmp	local03, local01 wz
08b74     7C 00 90 5D |  if_ne	jmp	#LR__0743
08b78     6A 00 00 FF 
08b7c     60 E4 05 F1 | 	add	objptr, ##54368
08b80     F2 1E 02 FB | 	rdlong	local01, objptr
08b84     0F 21 02 F6 | 	mov	local02, local01
08b88     01 20 66 F0 | 	shl	local02, #1
08b8c     0F 21 02 F1 | 	add	local02, local01
08b90     02 20 66 F0 | 	shl	local02, #2
08b94     03 00 00 FF 
08b98     00 E4 85 F1 | 	sub	objptr, ##1536
08b9c     F2 20 02 F1 | 	add	local02, objptr
08ba0     0C 4E 05 F1 | 	add	fp, #12
08ba4     A7 22 02 FB | 	rdlong	local03, fp
08ba8     10 23 62 FC | 	wrlong	local03, local02
08bac     03 00 00 FF 
08bb0     00 E4 05 F1 | 	add	objptr, ##1536
08bb4     F2 1E 02 FB | 	rdlong	local01, objptr
08bb8     0F 21 02 F6 | 	mov	local02, local01
08bbc     01 20 66 F0 | 	shl	local02, #1
08bc0     0F 21 02 F1 | 	add	local02, local01
08bc4     02 20 66 F0 | 	shl	local02, #2
08bc8     03 00 00 FF 
08bcc     00 E4 85 F1 | 	sub	objptr, ##1536
08bd0     F2 20 02 F1 | 	add	local02, objptr
08bd4     08 4E 85 F1 | 	sub	fp, #8
08bd8     A7 22 02 FB | 	rdlong	local03, fp
08bdc     04 4E 85 F1 | 	sub	fp, #4
08be0     04 20 06 F1 | 	add	local02, #4
08be4     10 23 62 FC | 	wrlong	local03, local02
08be8     67 00 00 FF 
08bec     60 E4 85 F1 | 	sub	objptr, ##52832
08bf0     A4 00 90 FD | 	jmp	#LR__0744
08bf4                 | LR__0743
08bf4     6A 00 00 FF 
08bf8     60 E4 05 F1 | 	add	objptr, ##54368
08bfc     F2 1E 02 FB | 	rdlong	local01, objptr
08c00     0F 21 02 F6 | 	mov	local02, local01
08c04     01 20 66 F0 | 	shl	local02, #1
08c08     0F 21 02 F1 | 	add	local02, local01
08c0c     02 20 66 F0 | 	shl	local02, #2
08c10     03 00 00 FF 
08c14     00 E4 85 F1 | 	sub	objptr, ##1536
08c18     F2 20 02 F1 | 	add	local02, objptr
08c1c     00 00 C0 FF 
08c20     10 01 68 FC | 	wrlong	##-2147483648, local02
08c24     03 00 00 FF 
08c28     00 E4 05 F1 | 	add	objptr, ##1536
08c2c     F2 1E 02 FB | 	rdlong	local01, objptr
08c30     0F 21 02 F6 | 	mov	local02, local01
08c34     01 20 66 F0 | 	shl	local02, #1
08c38     0F 21 02 F1 | 	add	local02, local01
08c3c     02 20 66 F0 | 	shl	local02, #2
08c40     03 00 00 FF 
08c44     00 E4 85 F1 | 	sub	objptr, ##1536
08c48     F2 20 02 F1 | 	add	local02, objptr
08c4c     04 4E 05 F1 | 	add	fp, #4
08c50     A7 22 02 FB | 	rdlong	local03, fp
08c54     04 4E 85 F1 | 	sub	fp, #4
08c58     04 20 06 F1 | 	add	local02, #4
08c5c     10 23 62 FC | 	wrlong	local03, local02
08c60     03 00 00 FF 
08c64     00 E4 05 F1 | 	add	objptr, ##1536
08c68     F2 1E 02 FB | 	rdlong	local01, objptr
08c6c     0F 21 02 F6 | 	mov	local02, local01
08c70     01 20 66 F0 | 	shl	local02, #1
08c74     0F 21 02 F1 | 	add	local02, local01
08c78     02 20 66 F0 | 	shl	local02, #2
08c7c     03 00 00 FF 
08c80     00 E4 85 F1 | 	sub	objptr, ##1536
08c84     F2 20 02 F1 | 	add	local02, objptr
08c88     08 20 06 F1 | 	add	local02, #8
08c8c     10 A7 68 FC | 	wrlong	#83, local02
08c90     67 00 00 FF 
08c94     60 E4 85 F1 | 	sub	objptr, ##52832
08c98                 | LR__0744
08c98     6A 00 00 FF 
08c9c     60 E4 05 F1 | 	add	objptr, ##54368
08ca0     F2 22 02 FB | 	rdlong	local03, objptr
08ca4     01 22 06 F1 | 	add	local03, #1
08ca8     F2 22 62 FC | 	wrlong	local03, objptr
08cac     6A 00 00 FF 
08cb0     60 E4 85 F1 | 	sub	objptr, ##54368
08cb4     40 00 90 FD | 	jmp	#LR__0746
08cb8                 | LR__0745
08cb8                 | '    print "We have a slow goto, todo  "
08cb8     00 12 06 F6 | 	mov	arg01, #0
08cbc     1C 91 B1 FD | 	call	#__system___getiolock_0474
08cc0     FD 12 02 F6 | 	mov	arg01, result1
08cc4     84 37 B1 FD | 	call	#__system___lockmem
08cc8     5F 01 00 FF 
08ccc     9E 15 06 F6 | 	mov	arg02, ##@LR__4907
08cd0     00 12 06 F6 | 	mov	arg01, #0
08cd4     00 16 06 F6 | 	mov	arg03, #0
08cd8     74 44 B1 FD | 	call	#__system___basic_print_string
08cdc     00 12 06 F6 | 	mov	arg01, #0
08ce0     0A 14 06 F6 | 	mov	arg02, #10
08ce4     00 16 06 F6 | 	mov	arg03, #0
08ce8     0C 44 B1 FD | 	call	#__system___basic_print_char
08cec     00 12 06 F6 | 	mov	arg01, #0
08cf0     E8 90 B1 FD | 	call	#__system___getiolock_0474
08cf4     FD 00 68 FC | 	wrlong	#0, result1
08cf8                 | LR__0746
08cf8                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08cf8                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08cf8                 | ' return 0
08cf8     00 FA 05 F6 | 	mov	result1, #0
08cfc     A7 F0 03 F6 | 	mov	ptra, fp
08d00     B2 00 A0 FD | 	call	#popregs_
08d04                 | _compile_goto_ret
08d04     2D 00 64 FD | 	ret
08d08                 | 
08d08                 | ' 
08d08                 | ' 
08d08                 | ' 
08d08                 | ' 
08d08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d08                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08d08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d08                 | ' 
08d08                 | ' 
08d08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d08                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08d08                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08d08                 | ' 
08d08                 | ' 
08d08                 | ' function expr() as integer 
08d08                 | _expr
08d08     07 4A 05 F6 | 	mov	COUNT_, #7
08d0c     A8 00 A0 FD | 	call	#pushregs_
08d10                 | _expr_enter
08d10     57 00 00 FF 
08d14     28 E4 05 F1 | 	add	objptr, ##44584
08d18     F2 24 02 FB | 	rdlong	local04, objptr
08d1c     03 24 66 F0 | 	shl	local04, #3
08d20     02 00 00 FF 
08d24     38 E4 85 F1 | 	sub	objptr, ##1080
08d28     F2 24 02 F1 | 	add	local04, objptr
08d2c     04 24 06 F1 | 	add	local04, #4
08d30     12 27 02 FB | 	rdlong	local05, local04
08d34                 | ' 
08d34                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08d34     FE 27 0E F2 | 	cmp	local05, #510 wz
08d38     54 00 00 FF 
08d3c     F0 E5 85 F1 | 	sub	objptr, ##43504
08d40     C4 00 90 5D |  if_ne	jmp	#LR__0750
08d44     1D 1E 06 F6 | 	mov	local01, #29
08d48     FF 22 06 F6 | 	mov	local03, #255
08d4c     0F 29 02 F6 | 	mov	local06, local01
08d50     10 2B 02 F6 | 	mov	local07, local02
08d54     11 1F 02 F6 | 	mov	local01, local03
08d58     6A 00 00 FF 
08d5c     60 E4 05 F1 | 	add	objptr, ##54368
08d60     F2 26 02 FB | 	rdlong	local05, objptr
08d64     13 25 02 F6 | 	mov	local04, local05
08d68     01 24 66 F0 | 	shl	local04, #1
08d6c     13 25 02 F1 | 	add	local04, local05
08d70     02 24 66 F0 | 	shl	local04, #2
08d74     03 00 00 FF 
08d78     00 E4 85 F1 | 	sub	objptr, ##1536
08d7c     F2 24 02 F1 | 	add	local04, objptr
08d80     12 29 62 FC | 	wrlong	local06, local04
08d84     03 00 00 FF 
08d88     00 E4 05 F1 | 	add	objptr, ##1536
08d8c     F2 28 02 FB | 	rdlong	local06, objptr
08d90     14 27 02 F6 | 	mov	local05, local06
08d94     01 26 66 F0 | 	shl	local05, #1
08d98     14 27 02 F1 | 	add	local05, local06
08d9c     02 26 66 F0 | 	shl	local05, #2
08da0     03 00 00 FF 
08da4     00 E4 85 F1 | 	sub	objptr, ##1536
08da8     F2 26 02 F1 | 	add	local05, objptr
08dac     04 26 06 F1 | 	add	local05, #4
08db0     13 2B 62 FC | 	wrlong	local07, local05
08db4     03 00 00 FF 
08db8     00 E4 05 F1 | 	add	objptr, ##1536
08dbc     F2 2A 02 FB | 	rdlong	local07, objptr
08dc0     15 29 02 F6 | 	mov	local06, local07
08dc4     01 28 66 F0 | 	shl	local06, #1
08dc8     15 29 02 F1 | 	add	local06, local07
08dcc     02 28 66 F0 | 	shl	local06, #2
08dd0     03 00 00 FF 
08dd4     00 E4 85 F1 | 	sub	objptr, ##1536
08dd8     F2 28 02 F1 | 	add	local06, objptr
08ddc     08 28 06 F1 | 	add	local06, #8
08de0     14 1F 62 FC | 	wrlong	local01, local06
08de4     03 00 00 FF 
08de8     00 E4 05 F1 | 	add	objptr, ##1536
08dec     F2 28 02 FB | 	rdlong	local06, objptr
08df0     01 28 06 F1 | 	add	local06, #1
08df4     F2 28 62 FC | 	wrlong	local06, objptr
08df8     6A 00 00 FF 
08dfc     60 E4 85 F1 | 	sub	objptr, ##54368
08e00     1D FA 05 F6 | 	mov	result1, #29
08e04     54 01 90 FD | 	jmp	#LR__0753
08e08                 | LR__0750
08e08     00 1E 06 F6 | 	mov	local01, #0
08e0c     58 01 B0 FD | 	call	#_addsub
08e10     57 00 00 FF 
08e14     28 E4 05 F1 | 	add	objptr, ##44584
08e18     F2 24 02 FB | 	rdlong	local04, objptr
08e1c     03 24 66 F0 | 	shl	local04, #3
08e20     02 00 00 FF 
08e24     38 E4 85 F1 | 	sub	objptr, ##1080
08e28     F2 24 02 F1 | 	add	local04, objptr
08e2c     04 24 06 F1 | 	add	local04, #4
08e30     12 27 02 FB | 	rdlong	local05, local04
08e34                 | ' t3.result.uresult=0
08e34                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08e34                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08e34                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08e34     54 00 00 FF 
08e38     F0 E5 85 F1 | 	sub	objptr, ##43504
08e3c                 | LR__0751
08e3c     1B 26 0E F2 | 	cmp	local05, #27 wz
08e40     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08e44     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08e48     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08e4c     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08e50     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08e54     00 01 90 5D |  if_ne	jmp	#LR__0752
08e58     57 00 00 FF 
08e5c     28 E4 05 F1 | 	add	objptr, ##44584
08e60     F2 28 02 FB | 	rdlong	local06, objptr
08e64     01 28 06 F1 | 	add	local06, #1
08e68     F2 28 62 FC | 	wrlong	local06, objptr
08e6c     57 00 00 FF 
08e70     28 E4 85 F1 | 	sub	objptr, ##44584
08e74     F0 00 B0 FD | 	call	#_addsub
08e78     13 23 02 F6 | 	mov	local03, local05
08e7c     0F 29 02 F6 | 	mov	local06, local01
08e80     10 2B 02 F6 | 	mov	local07, local02
08e84     11 27 02 F6 | 	mov	local05, local03
08e88     6A 00 00 FF 
08e8c     60 E4 05 F1 | 	add	objptr, ##54368
08e90     F2 24 02 FB | 	rdlong	local04, objptr
08e94     12 FB 01 F6 | 	mov	result1, local04
08e98     01 FA 65 F0 | 	shl	result1, #1
08e9c     12 FB 01 F1 | 	add	result1, local04
08ea0     02 FA 65 F0 | 	shl	result1, #2
08ea4     03 00 00 FF 
08ea8     00 E4 85 F1 | 	sub	objptr, ##1536
08eac     F2 FA 01 F1 | 	add	result1, objptr
08eb0     FD 28 62 FC | 	wrlong	local06, result1
08eb4     03 00 00 FF 
08eb8     00 E4 05 F1 | 	add	objptr, ##1536
08ebc     F2 28 02 FB | 	rdlong	local06, objptr
08ec0     14 25 02 F6 | 	mov	local04, local06
08ec4     01 24 66 F0 | 	shl	local04, #1
08ec8     14 25 02 F1 | 	add	local04, local06
08ecc     02 24 66 F0 | 	shl	local04, #2
08ed0     03 00 00 FF 
08ed4     00 E4 85 F1 | 	sub	objptr, ##1536
08ed8     F2 24 02 F1 | 	add	local04, objptr
08edc     04 24 06 F1 | 	add	local04, #4
08ee0     12 2B 62 FC | 	wrlong	local07, local04
08ee4     03 00 00 FF 
08ee8     00 E4 05 F1 | 	add	objptr, ##1536
08eec     F2 2A 02 FB | 	rdlong	local07, objptr
08ef0     15 29 02 F6 | 	mov	local06, local07
08ef4     01 28 66 F0 | 	shl	local06, #1
08ef8     15 29 02 F1 | 	add	local06, local07
08efc     02 28 66 F0 | 	shl	local06, #2
08f00     03 00 00 FF 
08f04     00 E4 85 F1 | 	sub	objptr, ##1536
08f08     F2 28 02 F1 | 	add	local06, objptr
08f0c     08 28 06 F1 | 	add	local06, #8
08f10     14 27 62 FC | 	wrlong	local05, local06
08f14     03 00 00 FF 
08f18     00 E4 05 F1 | 	add	objptr, ##1536
08f1c     F2 28 02 FB | 	rdlong	local06, objptr
08f20     01 28 06 F1 | 	add	local06, #1
08f24     F2 28 62 FC | 	wrlong	local06, objptr
08f28     13 00 00 FF 
08f2c     38 E4 85 F1 | 	sub	objptr, ##9784
08f30     F2 24 02 FB | 	rdlong	local04, objptr
08f34     03 24 66 F0 | 	shl	local04, #3
08f38     02 00 00 FF 
08f3c     38 E4 85 F1 | 	sub	objptr, ##1080
08f40     F2 24 02 F1 | 	add	local04, objptr
08f44     04 24 06 F1 | 	add	local04, #4
08f48     12 27 02 FB | 	rdlong	local05, local04
08f4c     54 00 00 FF 
08f50     F0 E5 85 F1 | 	sub	objptr, ##43504
08f54     E4 FE 9F FD | 	jmp	#LR__0751
08f58                 | LR__0752
08f58                 | ' return 0  
08f58     00 FA 05 F6 | 	mov	result1, #0
08f5c                 | LR__0753
08f5c     A7 F0 03 F6 | 	mov	ptra, fp
08f60     B2 00 A0 FD | 	call	#popregs_
08f64                 | _expr_ret
08f64     2D 00 64 FD | 	ret
08f68                 | 
08f68                 | ' 
08f68                 | ' 
08f68                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08f68                 | ' 
08f68                 | ' function addsub() as integer 
08f68                 | _addsub
08f68     07 4A 05 F6 | 	mov	COUNT_, #7
08f6c     A8 00 A0 FD | 	call	#pushregs_
08f70                 | _addsub_enter
08f70     00 1E 06 F6 | 	mov	local01, #0
08f74     50 01 B0 FD | 	call	#_muldiv
08f78     57 00 00 FF 
08f7c     28 E4 05 F1 | 	add	objptr, ##44584
08f80     F2 24 02 FB | 	rdlong	local04, objptr
08f84     03 24 66 F0 | 	shl	local04, #3
08f88     02 00 00 FF 
08f8c     38 E4 85 F1 | 	sub	objptr, ##1080
08f90     F2 24 02 F1 | 	add	local04, objptr
08f94     04 24 06 F1 | 	add	local04, #4
08f98     12 27 02 FB | 	rdlong	local05, local04
08f9c                 | ' t3.result.uresult=0
08f9c                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08f9c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08f9c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
08f9c     54 00 00 FF 
08fa0     F0 E5 85 F1 | 	sub	objptr, ##43504
08fa4                 | LR__0760
08fa4     01 26 0E F2 | 	cmp	local05, #1 wz
08fa8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
08fac     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08fb0     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
08fb4     00 01 90 5D |  if_ne	jmp	#LR__0761
08fb8     57 00 00 FF 
08fbc     28 E4 05 F1 | 	add	objptr, ##44584
08fc0     F2 24 02 FB | 	rdlong	local04, objptr
08fc4     01 24 06 F1 | 	add	local04, #1
08fc8     F2 24 62 FC | 	wrlong	local04, objptr
08fcc     57 00 00 FF 
08fd0     28 E4 85 F1 | 	sub	objptr, ##44584
08fd4     F0 00 B0 FD | 	call	#_muldiv
08fd8     13 23 02 F6 | 	mov	local03, local05
08fdc     0F 29 02 F6 | 	mov	local06, local01
08fe0     10 2B 02 F6 | 	mov	local07, local02
08fe4     11 27 02 F6 | 	mov	local05, local03
08fe8     6A 00 00 FF 
08fec     60 E4 05 F1 | 	add	objptr, ##54368
08ff0     F2 24 02 FB | 	rdlong	local04, objptr
08ff4     12 FB 01 F6 | 	mov	result1, local04
08ff8     01 FA 65 F0 | 	shl	result1, #1
08ffc     12 FB 01 F1 | 	add	result1, local04
09000     02 FA 65 F0 | 	shl	result1, #2
09004     03 00 00 FF 
09008     00 E4 85 F1 | 	sub	objptr, ##1536
0900c     F2 FA 01 F1 | 	add	result1, objptr
09010     FD 28 62 FC | 	wrlong	local06, result1
09014     03 00 00 FF 
09018     00 E4 05 F1 | 	add	objptr, ##1536
0901c     F2 28 02 FB | 	rdlong	local06, objptr
09020     14 25 02 F6 | 	mov	local04, local06
09024     01 24 66 F0 | 	shl	local04, #1
09028     14 25 02 F1 | 	add	local04, local06
0902c     02 24 66 F0 | 	shl	local04, #2
09030     03 00 00 FF 
09034     00 E4 85 F1 | 	sub	objptr, ##1536
09038     F2 24 02 F1 | 	add	local04, objptr
0903c     04 24 06 F1 | 	add	local04, #4
09040     12 2B 62 FC | 	wrlong	local07, local04
09044     03 00 00 FF 
09048     00 E4 05 F1 | 	add	objptr, ##1536
0904c     F2 2A 02 FB | 	rdlong	local07, objptr
09050     15 29 02 F6 | 	mov	local06, local07
09054     01 28 66 F0 | 	shl	local06, #1
09058     15 29 02 F1 | 	add	local06, local07
0905c     02 28 66 F0 | 	shl	local06, #2
09060     03 00 00 FF 
09064     00 E4 85 F1 | 	sub	objptr, ##1536
09068     F2 28 02 F1 | 	add	local06, objptr
0906c     08 28 06 F1 | 	add	local06, #8
09070     14 27 62 FC | 	wrlong	local05, local06
09074     03 00 00 FF 
09078     00 E4 05 F1 | 	add	objptr, ##1536
0907c     F2 28 02 FB | 	rdlong	local06, objptr
09080     01 28 06 F1 | 	add	local06, #1
09084     F2 28 62 FC | 	wrlong	local06, objptr
09088     13 00 00 FF 
0908c     38 E4 85 F1 | 	sub	objptr, ##9784
09090     F2 24 02 FB | 	rdlong	local04, objptr
09094     03 24 66 F0 | 	shl	local04, #3
09098     02 00 00 FF 
0909c     38 E4 85 F1 | 	sub	objptr, ##1080
090a0     F2 24 02 F1 | 	add	local04, objptr
090a4     04 24 06 F1 | 	add	local04, #4
090a8     12 27 02 FB | 	rdlong	local05, local04
090ac     54 00 00 FF 
090b0     F0 E5 85 F1 | 	sub	objptr, ##43504
090b4     EC FE 9F FD | 	jmp	#LR__0760
090b8                 | LR__0761
090b8                 | '   return 0
090b8     00 FA 05 F6 | 	mov	result1, #0
090bc     A7 F0 03 F6 | 	mov	ptra, fp
090c0     B2 00 A0 FD | 	call	#popregs_
090c4                 | _addsub_ret
090c4     2D 00 64 FD | 	ret
090c8                 | 
090c8                 | ' 
090c8                 | ' sub muldiv()
090c8                 | _muldiv
090c8     08 4A 05 F6 | 	mov	COUNT_, #8
090cc     A8 00 A0 FD | 	call	#pushregs_
090d0                 | _muldiv_enter
090d0     00 1E 06 F6 | 	mov	local01, #0
090d4     58 01 B0 FD | 	call	#_getvalue
090d8     57 00 00 FF 
090dc     28 E4 05 F1 | 	add	objptr, ##44584
090e0     F2 24 02 FB | 	rdlong	local04, objptr
090e4     03 24 66 F0 | 	shl	local04, #3
090e8     02 00 00 FF 
090ec     38 E4 85 F1 | 	sub	objptr, ##1080
090f0     F2 24 02 F1 | 	add	local04, objptr
090f4     04 24 06 F1 | 	add	local04, #4
090f8     12 27 02 FB | 	rdlong	local05, local04
090fc                 | ' t3.result.uresult=0
090fc                 | ' getvalue()    
090fc                 | ' op = lparts(ct).token
090fc                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
090fc     54 00 00 FF 
09100     F0 E5 85 F1 | 	sub	objptr, ##43504
09104                 | LR__0770
09104     05 26 0E F2 | 	cmp	local05, #5 wz
09108     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0910c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09110     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09114     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09118     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0911c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09120     00 01 90 5D |  if_ne	jmp	#LR__0771
09124     57 00 00 FF 
09128     28 E4 05 F1 | 	add	objptr, ##44584
0912c     F2 24 02 FB | 	rdlong	local04, objptr
09130     01 24 06 F1 | 	add	local04, #1
09134     F2 24 62 FC | 	wrlong	local04, objptr
09138     57 00 00 FF 
0913c     28 E4 85 F1 | 	sub	objptr, ##44584
09140     EC 00 B0 FD | 	call	#_getvalue
09144     13 23 02 F6 | 	mov	local03, local05
09148     0F 29 02 F6 | 	mov	local06, local01
0914c     10 2B 02 F6 | 	mov	local07, local02
09150     11 27 02 F6 | 	mov	local05, local03
09154     6A 00 00 FF 
09158     60 E4 05 F1 | 	add	objptr, ##54368
0915c     F2 24 02 FB | 	rdlong	local04, objptr
09160     12 2D 02 F6 | 	mov	local08, local04
09164     01 2C 66 F0 | 	shl	local08, #1
09168     12 2D 02 F1 | 	add	local08, local04
0916c     02 2C 66 F0 | 	shl	local08, #2
09170     03 00 00 FF 
09174     00 E4 85 F1 | 	sub	objptr, ##1536
09178     F2 2C 02 F1 | 	add	local08, objptr
0917c     16 29 62 FC | 	wrlong	local06, local08
09180     03 00 00 FF 
09184     00 E4 05 F1 | 	add	objptr, ##1536
09188     F2 2C 02 FB | 	rdlong	local08, objptr
0918c     16 29 02 F6 | 	mov	local06, local08
09190     01 28 66 F0 | 	shl	local06, #1
09194     16 29 02 F1 | 	add	local06, local08
09198     02 28 66 F0 | 	shl	local06, #2
0919c     03 00 00 FF 
091a0     00 E4 85 F1 | 	sub	objptr, ##1536
091a4     F2 28 02 F1 | 	add	local06, objptr
091a8     04 28 06 F1 | 	add	local06, #4
091ac     14 2B 62 FC | 	wrlong	local07, local06
091b0     03 00 00 FF 
091b4     00 E4 05 F1 | 	add	objptr, ##1536
091b8     F2 2C 02 FB | 	rdlong	local08, objptr
091bc     16 2B 02 F6 | 	mov	local07, local08
091c0     01 2A 66 F0 | 	shl	local07, #1
091c4     16 2B 02 F1 | 	add	local07, local08
091c8     02 2A 66 F0 | 	shl	local07, #2
091cc     03 00 00 FF 
091d0     00 E4 85 F1 | 	sub	objptr, ##1536
091d4     F2 2A 02 F1 | 	add	local07, objptr
091d8     08 2A 06 F1 | 	add	local07, #8
091dc     15 27 62 FC | 	wrlong	local05, local07
091e0     03 00 00 FF 
091e4     00 E4 05 F1 | 	add	objptr, ##1536
091e8     F2 28 02 FB | 	rdlong	local06, objptr
091ec     01 28 06 F1 | 	add	local06, #1
091f0     F2 28 62 FC | 	wrlong	local06, objptr
091f4     13 00 00 FF 
091f8     38 E4 85 F1 | 	sub	objptr, ##9784
091fc     F2 24 02 FB | 	rdlong	local04, objptr
09200     03 24 66 F0 | 	shl	local04, #3
09204     02 00 00 FF 
09208     38 E4 85 F1 | 	sub	objptr, ##1080
0920c     F2 24 02 F1 | 	add	local04, objptr
09210     04 24 06 F1 | 	add	local04, #4
09214     12 27 02 FB | 	rdlong	local05, local04
09218     54 00 00 FF 
0921c     F0 E5 85 F1 | 	sub	objptr, ##43504
09220     E0 FE 9F FD | 	jmp	#LR__0770
09224                 | LR__0771
09224     A7 F0 03 F6 | 	mov	ptra, fp
09228     B2 00 A0 FD | 	call	#popregs_
0922c                 | _muldiv_ret
0922c     2D 00 64 FD | 	ret
09230                 | 
09230                 | ' 
09230                 | ' sub getvalue() 
09230                 | _getvalue
09230     0B 4A 05 F6 | 	mov	COUNT_, #11
09234     A8 00 A0 FD | 	call	#pushregs_
09238                 | _getvalue_enter
09238     01 24 06 F6 | 	mov	local04, #1
0923c     00 1E 06 F6 | 	mov	local01, #0
09240     1D 22 06 F6 | 	mov	local03, #29
09244     57 00 00 FF 
09248     28 E4 05 F1 | 	add	objptr, ##44584
0924c     F2 16 02 FB | 	rdlong	arg03, objptr
09250     03 16 66 F0 | 	shl	arg03, #3
09254     02 00 00 FF 
09258     38 E4 85 F1 | 	sub	objptr, ##1080
0925c     F2 16 02 F1 | 	add	arg03, objptr
09260     04 16 06 F1 | 	add	arg03, #4
09264     0B 27 02 FB | 	rdlong	local05, arg03
09268                 | ' m=1
09268                 | ' t1.result.uresult=0: t1.result_type=result_uint
09268                 | ' op=lparts(ct).token
09268                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09268     02 26 0E F2 | 	cmp	local05, #2 wz
0926c     54 00 00 FF 
09270     F0 E5 85 F1 | 	sub	objptr, ##43504
09274     38 00 90 5D |  if_ne	jmp	#LR__0780
09278     01 24 66 F6 | 	neg	local04, #1
0927c     57 00 00 FF 
09280     28 E4 05 F1 | 	add	objptr, ##44584
09284     F2 26 02 FB | 	rdlong	local05, objptr
09288     01 26 06 F1 | 	add	local05, #1
0928c     F2 26 62 FC | 	wrlong	local05, objptr
09290     03 26 66 F0 | 	shl	local05, #3
09294     02 00 00 FF 
09298     38 E4 85 F1 | 	sub	objptr, ##1080
0929c     F2 26 02 F1 | 	add	local05, objptr
092a0     04 26 06 F1 | 	add	local05, #4
092a4     13 27 02 FB | 	rdlong	local05, local05
092a8     54 00 00 FF 
092ac     F0 E5 85 F1 | 	sub	objptr, ##43504
092b0                 | LR__0780
092b0                 | ' select case op
092b0     01 00 00 FF 
092b4     00 26 0E F2 | 	cmp	local05, ##512 wz
092b8     3C 00 90 AD |  if_e	jmp	#LR__0781
092bc     01 00 00 FF 
092c0     01 26 0E F2 | 	cmp	local05, ##513 wz
092c4     88 01 90 AD |  if_e	jmp	#LR__0784
092c8     01 00 00 FF 
092cc     02 26 0E F2 | 	cmp	local05, ##514 wz
092d0     84 02 90 AD |  if_e	jmp	#LR__0785
092d4     01 00 00 FF 
092d8     03 26 0E F2 | 	cmp	local05, ##515 wz
092dc     E8 03 90 AD |  if_e	jmp	#LR__0788
092e0     01 00 00 FF 
092e4     04 26 0E F2 | 	cmp	local05, ##516 wz
092e8     B8 05 90 AD |  if_e	jmp	#LR__0793
092ec     15 26 0E F2 | 	cmp	local05, #21 wz
092f0     D8 05 90 AD |  if_e	jmp	#LR__0794
092f4     48 06 90 FD | 	jmp	#LR__0795
092f8                 | LR__0781
092f8                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
092f8     01 24 0E F2 | 	cmp	local04, #1 wz
092fc     3C 00 90 5D |  if_ne	jmp	#LR__0782
09300     57 00 00 FF 
09304     28 E4 05 F1 | 	add	objptr, ##44584
09308     F2 26 02 FB | 	rdlong	local05, objptr
0930c     03 26 66 F0 | 	shl	local05, #3
09310     02 00 00 FF 
09314     38 E4 85 F1 | 	sub	objptr, ##1080
09318     F2 26 02 F1 | 	add	local05, objptr
0931c     13 13 02 FB | 	rdlong	arg01, local05
09320     00 14 06 F6 | 	mov	arg02, #0
09324     54 00 00 FF 
09328     F0 E5 85 F1 | 	sub	objptr, ##43504
0932c     10 63 B1 FD | 	call	#__system____builtin_atoi
09330     FD 24 02 FD | 	qmul	local04, result1
09334     18 1E 62 FD | 	getqx	local01
09338     1C 22 06 F6 | 	mov	local03, #28
0933c                 | LR__0782
0933c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0933c     FF FF 7F FF 
09340     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09344     3C 00 90 5D |  if_ne	jmp	#LR__0783
09348     57 00 00 FF 
0934c     28 E4 05 F1 | 	add	objptr, ##44584
09350     F2 26 02 FB | 	rdlong	local05, objptr
09354     03 26 66 F0 | 	shl	local05, #3
09358     02 00 00 FF 
0935c     38 E4 85 F1 | 	sub	objptr, ##1080
09360     F2 26 02 F1 | 	add	local05, objptr
09364     13 13 02 FB | 	rdlong	arg01, local05
09368     00 14 06 F6 | 	mov	arg02, #0
0936c     54 00 00 FF 
09370     F0 E5 85 F1 | 	sub	objptr, ##43504
09374     C8 62 B1 FD | 	call	#__system____builtin_atoi
09378     FD 24 02 FD | 	qmul	local04, result1
0937c     18 1E 62 FD | 	getqx	local01
09380     1C 22 06 F6 | 	mov	local03, #28
09384                 | LR__0783
09384     0F 29 02 F6 | 	mov	local06, local01
09388     10 2B 02 F6 | 	mov	local07, local02
0938c     11 27 02 F6 | 	mov	local05, local03
09390     6A 00 00 FF 
09394     60 E4 05 F1 | 	add	objptr, ##54368
09398     F2 1E 02 FB | 	rdlong	local01, objptr
0939c     0F 25 02 F6 | 	mov	local04, local01
093a0     01 24 66 F0 | 	shl	local04, #1
093a4     0F 25 02 F1 | 	add	local04, local01
093a8     02 24 66 F0 | 	shl	local04, #2
093ac     03 00 00 FF 
093b0     00 E4 85 F1 | 	sub	objptr, ##1536
093b4     F2 24 02 F1 | 	add	local04, objptr
093b8     12 29 62 FC | 	wrlong	local06, local04
093bc     03 00 00 FF 
093c0     00 E4 05 F1 | 	add	objptr, ##1536
093c4     F2 28 02 FB | 	rdlong	local06, objptr
093c8     14 1F 02 F6 | 	mov	local01, local06
093cc     01 1E 66 F0 | 	shl	local01, #1
093d0     14 1F 02 F1 | 	add	local01, local06
093d4     02 1E 66 F0 | 	shl	local01, #2
093d8     03 00 00 FF 
093dc     00 E4 85 F1 | 	sub	objptr, ##1536
093e0     F2 1E 02 F1 | 	add	local01, objptr
093e4     04 1E 06 F1 | 	add	local01, #4
093e8     0F 2B 62 FC | 	wrlong	local07, local01
093ec     03 00 00 FF 
093f0     00 E4 05 F1 | 	add	objptr, ##1536
093f4     F2 2A 02 FB | 	rdlong	local07, objptr
093f8     15 29 02 F6 | 	mov	local06, local07
093fc     01 28 66 F0 | 	shl	local06, #1
09400     15 29 02 F1 | 	add	local06, local07
09404     02 28 66 F0 | 	shl	local06, #2
09408     03 00 00 FF 
0940c     00 E4 85 F1 | 	sub	objptr, ##1536
09410     F2 28 02 F1 | 	add	local06, objptr
09414     08 28 06 F1 | 	add	local06, #8
09418     14 27 62 FC | 	wrlong	local05, local06
0941c     03 00 00 FF 
09420     00 E4 05 F1 | 	add	objptr, ##1536
09424     F2 28 02 FB | 	rdlong	local06, objptr
09428     01 28 06 F1 | 	add	local06, #1
0942c     F2 28 62 FC | 	wrlong	local06, objptr
09430     13 00 00 FF 
09434     38 E4 85 F1 | 	sub	objptr, ##9784
09438     F2 28 02 FB | 	rdlong	local06, objptr
0943c     01 28 06 F1 | 	add	local06, #1
09440     F2 28 62 FC | 	wrlong	local06, objptr
09444     57 00 00 FF 
09448     28 E4 85 F1 | 	sub	objptr, ##44584
0944c     14 05 90 FD | 	jmp	#LR__0796
09450                 | LR__0784
09450     57 00 00 FF 
09454     28 E4 05 F1 | 	add	objptr, ##44584
09458     F2 28 02 FB | 	rdlong	local06, objptr
0945c     03 28 66 F0 | 	shl	local06, #3
09460     02 00 00 FF 
09464     38 E4 85 F1 | 	sub	objptr, ##1080
09468     F2 28 02 F1 | 	add	local06, objptr
0946c     14 13 02 FB | 	rdlong	arg01, local06
09470     00 14 06 F6 | 	mov	arg02, #0
09474     54 00 00 FF 
09478     F0 E5 85 F1 | 	sub	objptr, ##43504
0947c     C0 61 B1 FD | 	call	#__system____builtin_atoi
09480     FD 24 02 FD | 	qmul	local04, result1
09484     6A 00 00 FF 
09488     60 E4 05 F1 | 	add	objptr, ##54368
0948c     F2 28 02 FB | 	rdlong	local06, objptr
09490     14 2D 02 F6 | 	mov	local08, local06
09494     01 2C 66 F0 | 	shl	local08, #1
09498     14 2D 02 F1 | 	add	local08, local06
0949c     02 2C 66 F0 | 	shl	local08, #2
094a0     03 00 00 FF 
094a4     00 E4 85 F1 | 	sub	objptr, ##1536
094a8     F2 2C 02 F1 | 	add	local08, objptr
094ac     03 00 00 FF 
094b0     00 E4 05 F1 | 	add	objptr, ##1536
094b4     18 1E 62 FD | 	getqx	local01
094b8     1C 22 06 F6 | 	mov	local03, #28
094bc     0F 29 02 F6 | 	mov	local06, local01
094c0     10 2B 02 F6 | 	mov	local07, local02
094c4     16 29 62 FC | 	wrlong	local06, local08
094c8     11 2D 02 F6 | 	mov	local08, local03
094cc     F2 28 02 FB | 	rdlong	local06, objptr
094d0     14 27 02 F6 | 	mov	local05, local06
094d4     01 26 66 F0 | 	shl	local05, #1
094d8     14 27 02 F1 | 	add	local05, local06
094dc     02 26 66 F0 | 	shl	local05, #2
094e0     03 00 00 FF 
094e4     00 E4 85 F1 | 	sub	objptr, ##1536
094e8     F2 26 02 F1 | 	add	local05, objptr
094ec     04 26 06 F1 | 	add	local05, #4
094f0     13 2B 62 FC | 	wrlong	local07, local05
094f4     03 00 00 FF 
094f8     00 E4 05 F1 | 	add	objptr, ##1536
094fc     F2 2A 02 FB | 	rdlong	local07, objptr
09500     15 29 02 F6 | 	mov	local06, local07
09504     01 28 66 F0 | 	shl	local06, #1
09508     15 29 02 F1 | 	add	local06, local07
0950c     02 28 66 F0 | 	shl	local06, #2
09510     03 00 00 FF 
09514     00 E4 85 F1 | 	sub	objptr, ##1536
09518     F2 28 02 F1 | 	add	local06, objptr
0951c     08 28 06 F1 | 	add	local06, #8
09520     14 2D 62 FC | 	wrlong	local08, local06
09524     03 00 00 FF 
09528     00 E4 05 F1 | 	add	objptr, ##1536
0952c     F2 28 02 FB | 	rdlong	local06, objptr
09530     01 28 06 F1 | 	add	local06, #1
09534     F2 28 62 FC | 	wrlong	local06, objptr
09538     13 00 00 FF 
0953c     38 E4 85 F1 | 	sub	objptr, ##9784
09540     F2 28 02 FB | 	rdlong	local06, objptr
09544     01 28 06 F1 | 	add	local06, #1
09548     F2 28 62 FC | 	wrlong	local06, objptr
0954c     57 00 00 FF 
09550     28 E4 85 F1 | 	sub	objptr, ##44584
09554     0C 04 90 FD | 	jmp	#LR__0796
09558                 | LR__0785
09558                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09558     01 24 0E F2 | 	cmp	local04, #1 wz
0955c     48 00 90 5D |  if_ne	jmp	#LR__0786
09560     00 C0 1F FF 
09564     00 28 06 F6 | 	mov	local06, ##1065353216
09568     57 00 00 FF 
0956c     28 E4 05 F1 | 	add	objptr, ##44584
09570     F2 2C 02 FB | 	rdlong	local08, objptr
09574     03 2C 66 F0 | 	shl	local08, #3
09578     02 00 00 FF 
0957c     38 E4 85 F1 | 	sub	objptr, ##1080
09580     F2 2C 02 F1 | 	add	local08, objptr
09584     16 13 02 FB | 	rdlong	arg01, local08
09588     54 00 00 FF 
0958c     F0 E5 85 F1 | 	sub	objptr, ##43504
09590     1C 62 B1 FD | 	call	#__system____builtin_atof
09594     FD 14 02 F6 | 	mov	arg02, result1
09598     14 13 02 F6 | 	mov	arg01, local06
0959c     28 5A B1 FD | 	call	#__system___float_mul
095a0     FD 1E 02 F6 | 	mov	local01, result1
095a4     1E 22 06 F6 | 	mov	local03, #30
095a8                 | LR__0786
095a8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
095a8     FF FF 7F FF 
095ac     FF 25 0E F2 | 	cmp	local04, ##-1 wz
095b0     48 00 90 5D |  if_ne	jmp	#LR__0787
095b4     00 C0 5F FF 
095b8     00 28 06 F6 | 	mov	local06, ##-1082130432
095bc     57 00 00 FF 
095c0     28 E4 05 F1 | 	add	objptr, ##44584
095c4     F2 2C 02 FB | 	rdlong	local08, objptr
095c8     03 2C 66 F0 | 	shl	local08, #3
095cc     02 00 00 FF 
095d0     38 E4 85 F1 | 	sub	objptr, ##1080
095d4     F2 2C 02 F1 | 	add	local08, objptr
095d8     16 13 02 FB | 	rdlong	arg01, local08
095dc     54 00 00 FF 
095e0     F0 E5 85 F1 | 	sub	objptr, ##43504
095e4     C8 61 B1 FD | 	call	#__system____builtin_atof
095e8     FD 14 02 F6 | 	mov	arg02, result1
095ec     14 13 02 F6 | 	mov	arg01, local06
095f0     D4 59 B1 FD | 	call	#__system___float_mul
095f4     FD 1E 02 F6 | 	mov	local01, result1
095f8     1E 22 06 F6 | 	mov	local03, #30
095fc                 | LR__0787
095fc     0F 29 02 F6 | 	mov	local06, local01
09600     10 2B 02 F6 | 	mov	local07, local02
09604     11 27 02 F6 | 	mov	local05, local03
09608     6A 00 00 FF 
0960c     60 E4 05 F1 | 	add	objptr, ##54368
09610     F2 1E 02 FB | 	rdlong	local01, objptr
09614     0F 2D 02 F6 | 	mov	local08, local01
09618     01 2C 66 F0 | 	shl	local08, #1
0961c     0F 2D 02 F1 | 	add	local08, local01
09620     02 2C 66 F0 | 	shl	local08, #2
09624     03 00 00 FF 
09628     00 E4 85 F1 | 	sub	objptr, ##1536
0962c     F2 2C 02 F1 | 	add	local08, objptr
09630     16 29 62 FC | 	wrlong	local06, local08
09634     03 00 00 FF 
09638     00 E4 05 F1 | 	add	objptr, ##1536
0963c     F2 2C 02 FB | 	rdlong	local08, objptr
09640     16 29 02 F6 | 	mov	local06, local08
09644     01 28 66 F0 | 	shl	local06, #1
09648     16 29 02 F1 | 	add	local06, local08
0964c     02 28 66 F0 | 	shl	local06, #2
09650     03 00 00 FF 
09654     00 E4 85 F1 | 	sub	objptr, ##1536
09658     F2 28 02 F1 | 	add	local06, objptr
0965c     04 28 06 F1 | 	add	local06, #4
09660     14 2B 62 FC | 	wrlong	local07, local06
09664     03 00 00 FF 
09668     00 E4 05 F1 | 	add	objptr, ##1536
0966c     F2 2C 02 FB | 	rdlong	local08, objptr
09670     16 2B 02 F6 | 	mov	local07, local08
09674     01 2A 66 F0 | 	shl	local07, #1
09678     16 2B 02 F1 | 	add	local07, local08
0967c     02 2A 66 F0 | 	shl	local07, #2
09680     03 00 00 FF 
09684     00 E4 85 F1 | 	sub	objptr, ##1536
09688     F2 2A 02 F1 | 	add	local07, objptr
0968c     08 2A 06 F1 | 	add	local07, #8
09690     15 27 62 FC | 	wrlong	local05, local07
09694     03 00 00 FF 
09698     00 E4 05 F1 | 	add	objptr, ##1536
0969c     F2 28 02 FB | 	rdlong	local06, objptr
096a0     01 28 06 F1 | 	add	local06, #1
096a4     F2 28 62 FC | 	wrlong	local06, objptr
096a8     13 00 00 FF 
096ac     38 E4 85 F1 | 	sub	objptr, ##9784
096b0     F2 28 02 FB | 	rdlong	local06, objptr
096b4     01 28 06 F1 | 	add	local06, #1
096b8     F2 28 62 FC | 	wrlong	local06, objptr
096bc     57 00 00 FF 
096c0     28 E4 85 F1 | 	sub	objptr, ##44584
096c4     9C 02 90 FD | 	jmp	#LR__0796
096c8                 | LR__0788
096c8     1F 22 06 F6 | 	mov	local03, #31
096cc     57 00 00 FF 
096d0     28 E4 05 F1 | 	add	objptr, ##44584
096d4     F2 16 02 FB | 	rdlong	arg03, objptr
096d8     03 16 66 F0 | 	shl	arg03, #3
096dc     02 00 00 FF 
096e0     38 E4 85 F1 | 	sub	objptr, ##1080
096e4     F2 16 02 F1 | 	add	arg03, objptr
096e8     0B 13 02 FB | 	rdlong	arg01, arg03
096ec     54 00 00 FF 
096f0     F0 E5 85 F1 | 	sub	objptr, ##43504
096f4     09 2F 02 F6 | 	mov	local09, arg01
096f8     97 06 48 FB | 	callpa	#(@LR__0790-@LR__0789)>>2,fcache_load_ptr_
096fc                 | LR__0789
096fc     17 FB C9 FA | 	rdbyte	result1, local09 wz
09700     01 2E 06 51 |  if_ne	add	local09, #1
09704     F4 FF 9F 5D |  if_ne	jmp	#LR__0789
09708                 | LR__0790
09708     09 2F 82 F1 | 	sub	local09, arg01
0970c     17 FB 01 F6 | 	mov	result1, local09
09710     7B 00 00 FF 
09714     AC E4 05 F1 | 	add	objptr, ##63148
09718     F2 FA 61 FC | 	wrlong	result1, objptr
0971c     50 E4 85 F1 | 	sub	objptr, #80
09720     F2 12 02 FB | 	rdlong	arg01, objptr
09724     FD 12 82 F1 | 	sub	arg01, result1
09728     04 12 86 F1 | 	sub	arg01, #4
0972c     03 12 26 F5 | 	andn	arg01, #3
09730     F2 12 62 FC | 	wrlong	arg01, objptr
09734     50 E4 05 F1 | 	add	objptr, #80
09738     F2 14 02 FB | 	rdlong	arg02, objptr
0973c     7B 00 00 FF 
09740     AC E4 85 F1 | 	sub	objptr, ##63148
09744     80 F6 B0 FD | 	call	#_pslpoke
09748                 | '     pslpoke memtop,l
09748                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09748     01 30 06 F6 | 	mov	local10, #1
0974c     7B 00 00 FF 
09750     AC E4 05 F1 | 	add	objptr, ##63148
09754     F2 32 02 FB | 	rdlong	local11, objptr
09758     7B 00 00 FF 
0975c     AC E4 85 F1 | 	sub	objptr, ##63148
09760     01 32 06 F1 | 	add	local11, #1
09764                 | LR__0791
09764     19 31 52 F2 | 	cmps	local10, local11 wc
09768     5C 00 90 3D |  if_ae	jmp	#LR__0792
0976c     7B 00 00 FF 
09770     5C E4 05 F1 | 	add	objptr, ##63068
09774     F2 2A 02 FB | 	rdlong	local07, objptr
09778     03 2A 06 F1 | 	add	local07, #3
0977c     18 2B 02 F1 | 	add	local07, local10
09780     24 00 00 FF 
09784     34 E4 85 F1 | 	sub	objptr, ##18484
09788     F2 2C 02 FB | 	rdlong	local08, objptr
0978c     03 2C 66 F0 | 	shl	local08, #3
09790     02 00 00 FF 
09794     38 E4 85 F1 | 	sub	objptr, ##1080
09798     F2 2C 02 F1 | 	add	local08, objptr
0979c     16 13 02 FB | 	rdlong	arg01, local08
097a0     18 15 02 F6 | 	mov	arg02, local10
097a4     01 16 06 F6 | 	mov	arg03, #1
097a8     54 00 00 FF 
097ac     F0 E5 85 F1 | 	sub	objptr, ##43504
097b0     F4 4D B1 FD | 	call	#__system__Mid_S
097b4     FD 14 C2 FA | 	rdbyte	arg02, result1
097b8     15 13 02 F6 | 	mov	arg01, local07
097bc     98 F6 B0 FD | 	call	#_pspoke
097c0     01 30 06 F1 | 	add	local10, #1
097c4     9C FF 9F FD | 	jmp	#LR__0791
097c8                 | LR__0792
097c8     7B 00 00 FF 
097cc     5C E4 05 F1 | 	add	objptr, ##63068
097d0     F2 1E 02 FB | 	rdlong	local01, objptr
097d4     2B 22 06 F6 | 	mov	local03, #43
097d8     0F 29 02 F6 | 	mov	local06, local01
097dc     10 2B 02 F6 | 	mov	local07, local02
097e0     11 33 02 F6 | 	mov	local11, local03
097e4     10 00 00 FF 
097e8     FC E5 85 F1 | 	sub	objptr, ##8700
097ec     F2 30 02 FB | 	rdlong	local10, objptr
097f0     18 2D 02 F6 | 	mov	local08, local10
097f4     01 2C 66 F0 | 	shl	local08, #1
097f8     18 2D 02 F1 | 	add	local08, local10
097fc     02 2C 66 F0 | 	shl	local08, #2
09800     03 00 00 FF 
09804     00 E4 85 F1 | 	sub	objptr, ##1536
09808     F2 2C 02 F1 | 	add	local08, objptr
0980c     16 29 62 FC | 	wrlong	local06, local08
09810     03 00 00 FF 
09814     00 E4 05 F1 | 	add	objptr, ##1536
09818     F2 30 02 FB | 	rdlong	local10, objptr
0981c     18 2D 02 F6 | 	mov	local08, local10
09820     01 2C 66 F0 | 	shl	local08, #1
09824     18 2D 02 F1 | 	add	local08, local10
09828     02 2C 66 F0 | 	shl	local08, #2
0982c     03 00 00 FF 
09830     00 E4 85 F1 | 	sub	objptr, ##1536
09834     F2 2C 02 F1 | 	add	local08, objptr
09838     04 2C 06 F1 | 	add	local08, #4
0983c     16 2B 62 FC | 	wrlong	local07, local08
09840     03 00 00 FF 
09844     00 E4 05 F1 | 	add	objptr, ##1536
09848     F2 30 02 FB | 	rdlong	local10, objptr
0984c     18 2D 02 F6 | 	mov	local08, local10
09850     01 2C 66 F0 | 	shl	local08, #1
09854     18 2D 02 F1 | 	add	local08, local10
09858     02 2C 66 F0 | 	shl	local08, #2
0985c     03 00 00 FF 
09860     00 E4 85 F1 | 	sub	objptr, ##1536
09864     F2 2C 02 F1 | 	add	local08, objptr
09868     08 2C 06 F1 | 	add	local08, #8
0986c     16 33 62 FC | 	wrlong	local11, local08
09870     03 00 00 FF 
09874     00 E4 05 F1 | 	add	objptr, ##1536
09878     F2 28 02 FB | 	rdlong	local06, objptr
0987c     01 28 06 F1 | 	add	local06, #1
09880     F2 28 62 FC | 	wrlong	local06, objptr
09884     13 00 00 FF 
09888     38 E4 85 F1 | 	sub	objptr, ##9784
0988c     F2 28 02 FB | 	rdlong	local06, objptr
09890     01 28 06 F1 | 	add	local06, #1
09894     F2 28 62 FC | 	wrlong	local06, objptr
09898     57 00 00 FF 
0989c     28 E4 85 F1 | 	sub	objptr, ##44584
098a0     C0 00 90 FD | 	jmp	#LR__0796
098a4                 | LR__0793
098a4     12 13 02 F6 | 	mov	arg01, local04
098a8     B8 03 B0 FD | 	call	#_getvar
098ac     57 00 00 FF 
098b0     28 E4 05 F1 | 	add	objptr, ##44584
098b4     F2 28 02 FB | 	rdlong	local06, objptr
098b8     01 28 06 F1 | 	add	local06, #1
098bc     F2 28 62 FC | 	wrlong	local06, objptr
098c0     57 00 00 FF 
098c4     28 E4 85 F1 | 	sub	objptr, ##44584
098c8     98 00 90 FD | 	jmp	#LR__0796
098cc                 | LR__0794
098cc     57 00 00 FF 
098d0     28 E4 05 F1 | 	add	objptr, ##44584
098d4     F2 28 02 FB | 	rdlong	local06, objptr
098d8     01 28 06 F1 | 	add	local06, #1
098dc     F2 28 62 FC | 	wrlong	local06, objptr
098e0     57 00 00 FF 
098e4     28 E4 85 F1 | 	sub	objptr, ##44584
098e8     1C F4 BF FD | 	call	#_expr
098ec                 | '     ct+=1
098ec                 | '     expr() 
098ec                 | '     if lparts(ct).token=token_rpar then ct+=1
098ec     57 00 00 FF 
098f0     28 E4 05 F1 | 	add	objptr, ##44584
098f4     F2 32 02 FB | 	rdlong	local11, objptr
098f8     03 32 66 F0 | 	shl	local11, #3
098fc     02 00 00 FF 
09900     38 E4 85 F1 | 	sub	objptr, ##1080
09904     F2 32 02 F1 | 	add	local11, objptr
09908     04 32 06 F1 | 	add	local11, #4
0990c     19 33 02 FB | 	rdlong	local11, local11
09910     14 32 0E F2 | 	cmp	local11, #20 wz
09914     54 00 00 FF 
09918     F0 E5 85 F1 | 	sub	objptr, ##43504
0991c     44 00 90 5D |  if_ne	jmp	#LR__0796
09920     57 00 00 FF 
09924     28 E4 05 F1 | 	add	objptr, ##44584
09928     F2 28 02 FB | 	rdlong	local06, objptr
0992c     01 28 06 F1 | 	add	local06, #1
09930     F2 28 62 FC | 	wrlong	local06, objptr
09934     57 00 00 FF 
09938     28 E4 85 F1 | 	sub	objptr, ##44584
0993c     24 00 90 FD | 	jmp	#LR__0796
09940                 | LR__0795
09940     12 13 02 F6 | 	mov	arg01, local04
09944     28 00 B0 FD | 	call	#_getfun
09948     57 00 00 FF 
0994c     28 E4 05 F1 | 	add	objptr, ##44584
09950     F2 28 02 FB | 	rdlong	local06, objptr
09954     01 28 06 F1 | 	add	local06, #1
09958     F2 28 62 FC | 	wrlong	local06, objptr
0995c     57 00 00 FF 
09960     28 E4 85 F1 | 	sub	objptr, ##44584
09964                 | LR__0796
09964     A7 F0 03 F6 | 	mov	ptra, fp
09968     B2 00 A0 FD | 	call	#popregs_
0996c                 | _getvalue_ret
0996c     2D 00 64 FD | 	ret
09970                 | 
09970                 | ' 
09970                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
09970                 | _getfun
09970     0A 4A 05 F6 | 	mov	COUNT_, #10
09974     A8 00 A0 FD | 	call	#pushregs_
09978                 | _getfun_enter
09978     09 25 02 F6 | 	mov	local04, arg01
0997c     57 00 00 FF 
09980     28 E4 05 F1 | 	add	objptr, ##44584
09984     F2 26 02 FB | 	rdlong	local05, objptr
09988     13 29 02 F6 | 	mov	local06, local05
0998c     00 2A 06 F6 | 	mov	local07, #0
09990                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
09990                 | ' oldct=ct
09990                 | ' numpar=0
09990                 | '   
09990                 | ' if lparts(ct+1).token=token_lpar then
09990     01 26 06 F1 | 	add	local05, #1
09994     03 26 66 F0 | 	shl	local05, #3
09998     02 00 00 FF 
0999c     38 E4 85 F1 | 	sub	objptr, ##1080
099a0     F2 26 02 F1 | 	add	local05, objptr
099a4     04 26 06 F1 | 	add	local05, #4
099a8     13 27 02 FB | 	rdlong	local05, local05
099ac     15 26 0E F2 | 	cmp	local05, #21 wz
099b0     54 00 00 FF 
099b4     F0 E5 85 F1 | 	sub	objptr, ##43504
099b8     08 01 90 5D |  if_ne	jmp	#LR__0804
099bc     57 00 00 FF 
099c0     28 E4 05 F1 | 	add	objptr, ##44584
099c4     F2 2C 02 FB | 	rdlong	local08, objptr
099c8     01 2C 06 F1 | 	add	local08, #1
099cc     F2 2C 62 FC | 	wrlong	local08, objptr
099d0     57 00 00 FF 
099d4     28 E4 85 F1 | 	sub	objptr, ##44584
099d8                 | '   ct+=1 											' omit this lpar, this is for expr list
099d8                 | '   do
099d8                 | LR__0800
099d8     57 00 00 FF 
099dc     28 E4 05 F1 | 	add	objptr, ##44584
099e0     F2 26 02 FB | 	rdlong	local05, objptr
099e4     01 26 06 F1 | 	add	local05, #1
099e8     F2 26 62 FC | 	wrlong	local05, objptr
099ec                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
099ec                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
099ec     03 26 66 F0 | 	shl	local05, #3
099f0     02 00 00 FF 
099f4     38 E4 85 F1 | 	sub	objptr, ##1080
099f8     F2 26 02 F1 | 	add	local05, objptr
099fc     04 26 06 F1 | 	add	local05, #4
09a00     13 2D 02 FB | 	rdlong	local08, local05
09a04     15 2C 0E F2 | 	cmp	local08, #21 wz
09a08     54 00 00 FF 
09a0c     F0 E5 85 F1 | 	sub	objptr, ##43504
09a10     40 00 90 5D |  if_ne	jmp	#LR__0801
09a14     57 00 00 FF 
09a18     28 E4 05 F1 | 	add	objptr, ##44584
09a1c     F2 2C 02 FB | 	rdlong	local08, objptr
09a20     01 2C 06 F1 | 	add	local08, #1
09a24     F2 2C 62 FC | 	wrlong	local08, objptr
09a28     57 00 00 FF 
09a2c     28 E4 85 F1 | 	sub	objptr, ##44584
09a30     D4 F2 BF FD | 	call	#_expr
09a34     57 00 00 FF 
09a38     28 E4 05 F1 | 	add	objptr, ##44584
09a3c     F2 2C 02 FB | 	rdlong	local08, objptr
09a40     01 2C 06 F1 | 	add	local08, #1
09a44     F2 2C 62 FC | 	wrlong	local08, objptr
09a48     57 00 00 FF 
09a4c     28 E4 85 F1 | 	sub	objptr, ##44584
09a50     04 00 90 FD | 	jmp	#LR__0802
09a54                 | LR__0801
09a54     B0 F2 BF FD | 	call	#_expr
09a58                 | LR__0802
09a58     01 2A 06 F1 | 	add	local07, #1
09a5c     57 00 00 FF 
09a60     28 E4 05 F1 | 	add	objptr, ##44584
09a64     F2 26 02 FB | 	rdlong	local05, objptr
09a68     03 26 66 F0 | 	shl	local05, #3
09a6c     02 00 00 FF 
09a70     38 E4 85 F1 | 	sub	objptr, ##1080
09a74     F2 26 02 F1 | 	add	local05, objptr
09a78     04 26 06 F1 | 	add	local05, #4
09a7c     13 2D 02 FB | 	rdlong	local08, local05
09a80     14 2C 0E F2 | 	cmp	local08, #20 wz
09a84     54 00 00 FF 
09a88     F0 E5 85 F1 | 	sub	objptr, ##43504
09a8c     34 00 90 AD |  if_e	jmp	#LR__0803
09a90     57 00 00 FF 
09a94     28 E4 05 F1 | 	add	objptr, ##44584
09a98     F2 2C 02 FB | 	rdlong	local08, objptr
09a9c     03 2C 66 F0 | 	shl	local08, #3
09aa0     02 00 00 FF 
09aa4     38 E4 85 F1 | 	sub	objptr, ##1080
09aa8     F2 2C 02 F1 | 	add	local08, objptr
09aac     04 2C 06 F1 | 	add	local08, #4
09ab0     16 2D 02 FB | 	rdlong	local08, local08
09ab4     FE 2D 0E F2 | 	cmp	local08, #510 wz
09ab8     54 00 00 FF 
09abc     F0 E5 85 F1 | 	sub	objptr, ##43504
09ac0     14 FF 9F 5D |  if_ne	jmp	#LR__0800
09ac4                 | LR__0803
09ac4                 | LR__0804
09ac4     15 1F 02 F6 | 	mov	local01, local07
09ac8     03 28 66 F0 | 	shl	local06, #3
09acc     54 00 00 FF 
09ad0     F0 E5 05 F1 | 	add	objptr, ##43504
09ad4     F2 28 02 F1 | 	add	local06, objptr
09ad8     04 28 06 F1 | 	add	local06, #4
09adc     14 23 02 FB | 	rdlong	local03, local06
09ae0     0F 2D 02 F6 | 	mov	local08, local01
09ae4     10 2B 02 F6 | 	mov	local07, local02
09ae8     11 29 02 F6 | 	mov	local06, local03
09aec     15 00 00 FF 
09af0     70 E4 05 F1 | 	add	objptr, ##10864
09af4     F2 26 02 FB | 	rdlong	local05, objptr
09af8     13 13 02 F6 | 	mov	arg01, local05
09afc     01 12 66 F0 | 	shl	arg01, #1
09b00     13 13 02 F1 | 	add	arg01, local05
09b04     02 12 66 F0 | 	shl	arg01, #2
09b08     03 00 00 FF 
09b0c     00 E4 85 F1 | 	sub	objptr, ##1536
09b10     F2 12 02 F1 | 	add	arg01, objptr
09b14     09 2D 62 FC | 	wrlong	local08, arg01
09b18     03 00 00 FF 
09b1c     00 E4 05 F1 | 	add	objptr, ##1536
09b20     F2 2C 02 FB | 	rdlong	local08, objptr
09b24     16 2F 02 F6 | 	mov	local09, local08
09b28     01 2E 66 F0 | 	shl	local09, #1
09b2c     16 2F 02 F1 | 	add	local09, local08
09b30     02 2E 66 F0 | 	shl	local09, #2
09b34     03 00 00 FF 
09b38     00 E4 85 F1 | 	sub	objptr, ##1536
09b3c     F2 2E 02 F1 | 	add	local09, objptr
09b40     04 2E 06 F1 | 	add	local09, #4
09b44     17 2B 62 FC | 	wrlong	local07, local09
09b48     03 00 00 FF 
09b4c     00 E4 05 F1 | 	add	objptr, ##1536
09b50     F2 2C 02 FB | 	rdlong	local08, objptr
09b54     16 31 02 F6 | 	mov	local10, local08
09b58     01 30 66 F0 | 	shl	local10, #1
09b5c     16 31 02 F1 | 	add	local10, local08
09b60     02 30 66 F0 | 	shl	local10, #2
09b64     03 00 00 FF 
09b68     00 E4 85 F1 | 	sub	objptr, ##1536
09b6c     F2 30 02 F1 | 	add	local10, objptr
09b70     08 30 06 F1 | 	add	local10, #8
09b74     18 29 62 FC | 	wrlong	local06, local10
09b78     03 00 00 FF 
09b7c     00 E4 05 F1 | 	add	objptr, ##1536
09b80     F2 2C 02 FB | 	rdlong	local08, objptr
09b84     01 2C 06 F1 | 	add	local08, #1
09b88     F2 2C 62 FC | 	wrlong	local08, objptr
09b8c     6A 00 00 FF 
09b90     60 E4 85 F1 | 	sub	objptr, ##54368
09b94                 | ' 
09b94                 | ' t2.result.uresult=numpar
09b94                 | ' 
09b94                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
09b94                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09b94                 | ' 
09b94                 | '   
09b94                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09b94     FF FF 7F FF 
09b98     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09b9c     B8 00 90 5D |  if_ne	jmp	#LR__0805
09ba0     15 22 06 F6 | 	mov	local03, #21
09ba4     0F 2D 02 F6 | 	mov	local08, local01
09ba8     10 2B 02 F6 | 	mov	local07, local02
09bac     11 29 02 F6 | 	mov	local06, local03
09bb0     6A 00 00 FF 
09bb4     60 E4 05 F1 | 	add	objptr, ##54368
09bb8     F2 26 02 FB | 	rdlong	local05, objptr
09bbc     13 13 02 F6 | 	mov	arg01, local05
09bc0     01 12 66 F0 | 	shl	arg01, #1
09bc4     13 13 02 F1 | 	add	arg01, local05
09bc8     02 12 66 F0 | 	shl	arg01, #2
09bcc     03 00 00 FF 
09bd0     00 E4 85 F1 | 	sub	objptr, ##1536
09bd4     F2 12 02 F1 | 	add	arg01, objptr
09bd8     09 2D 62 FC | 	wrlong	local08, arg01
09bdc     03 00 00 FF 
09be0     00 E4 05 F1 | 	add	objptr, ##1536
09be4     F2 30 02 FB | 	rdlong	local10, objptr
09be8     18 2F 02 F6 | 	mov	local09, local10
09bec     01 2E 66 F0 | 	shl	local09, #1
09bf0     18 2F 02 F1 | 	add	local09, local10
09bf4     02 2E 66 F0 | 	shl	local09, #2
09bf8     03 00 00 FF 
09bfc     00 E4 85 F1 | 	sub	objptr, ##1536
09c00     F2 2E 02 F1 | 	add	local09, objptr
09c04     04 2E 06 F1 | 	add	local09, #4
09c08     17 2B 62 FC | 	wrlong	local07, local09
09c0c     03 00 00 FF 
09c10     00 E4 05 F1 | 	add	objptr, ##1536
09c14     F2 2E 02 FB | 	rdlong	local09, objptr
09c18     17 31 02 F6 | 	mov	local10, local09
09c1c     01 30 66 F0 | 	shl	local10, #1
09c20     17 31 02 F1 | 	add	local10, local09
09c24     02 30 66 F0 | 	shl	local10, #2
09c28     03 00 00 FF 
09c2c     00 E4 85 F1 | 	sub	objptr, ##1536
09c30     F2 30 02 F1 | 	add	local10, objptr
09c34     08 30 06 F1 | 	add	local10, #8
09c38     18 29 62 FC | 	wrlong	local06, local10
09c3c     03 00 00 FF 
09c40     00 E4 05 F1 | 	add	objptr, ##1536
09c44     F2 2C 02 FB | 	rdlong	local08, objptr
09c48     01 2C 06 F1 | 	add	local08, #1
09c4c     F2 2C 62 FC | 	wrlong	local08, objptr
09c50     6A 00 00 FF 
09c54     60 E4 85 F1 | 	sub	objptr, ##54368
09c58                 | LR__0805
09c58     A7 F0 03 F6 | 	mov	ptra, fp
09c5c     B2 00 A0 FD | 	call	#popregs_
09c60                 | _getfun_ret
09c60     2D 00 64 FD | 	ret
09c64                 | 
09c64                 | '   
09c64                 | '   
09c64                 | ' sub getvar(m as integer) 
09c64                 | _getvar
09c64     0A 4A 05 F6 | 	mov	COUNT_, #10
09c68     A8 00 A0 FD | 	call	#pushregs_
09c6c                 | _getvar_enter
09c6c     09 25 02 F6 | 	mov	local04, arg01
09c70     57 00 00 FF 
09c74     28 E4 05 F1 | 	add	objptr, ##44584
09c78     F2 14 02 FB | 	rdlong	arg02, objptr
09c7c     03 14 66 F0 | 	shl	arg02, #3
09c80     02 00 00 FF 
09c84     38 E4 85 F1 | 	sub	objptr, ##1080
09c88     F2 14 02 F1 | 	add	arg02, objptr
09c8c     0A 27 02 FB | 	rdlong	local05, arg02
09c90     13 13 02 F6 | 	mov	arg01, local05
09c94     01 14 06 F6 | 	mov	arg02, #1
09c98     54 00 00 FF 
09c9c     F0 E5 85 F1 | 	sub	objptr, ##43504
09ca0     74 48 B1 FD | 	call	#__system__Right_S
09ca4     FD 28 02 F6 | 	mov	local06, result1
09ca8     01 2A 66 F6 | 	neg	local07, #1
09cac                 | ' 
09cac                 | ' varname$=lparts(ct).part$
09cac                 | ' suffix$=right$(varname$,1)
09cac                 | ' j=-1
09cac                 | ' 
09cac                 | ' for i=0 to varnum-1
09cac     00 2C 06 F6 | 	mov	local08, #0
09cb0     54 00 00 FF 
09cb4     EC E5 05 F1 | 	add	objptr, ##43500
09cb8     F2 2E 02 FB | 	rdlong	local09, objptr
09cbc     54 00 00 FF 
09cc0     EC E5 85 F1 | 	sub	objptr, ##43500
09cc4                 | LR__0810
09cc4     17 2D 52 F2 | 	cmps	local08, local09 wc
09cc8     38 00 90 3D |  if_ae	jmp	#LR__0811
09ccc                 | '   if variables(i).name=varname$ then j=i : exit
09ccc     16 15 02 F6 | 	mov	arg02, local08
09cd0     04 14 66 F0 | 	shl	arg02, #4
09cd4     34 00 00 FF 
09cd8     EC E5 05 F1 | 	add	objptr, ##27116
09cdc     F2 14 02 F1 | 	add	arg02, objptr
09ce0     0A 13 02 FB | 	rdlong	arg01, arg02
09ce4     13 15 02 F6 | 	mov	arg02, local05
09ce8     34 00 00 FF 
09cec     EC E5 85 F1 | 	sub	objptr, ##27116
09cf0     80 27 B1 FD | 	call	#__system___string_cmp
09cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
09cf8     16 2B 02 A6 |  if_e	mov	local07, local08
09cfc     01 2C 06 51 |  if_ne	add	local08, #1
09d00     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
09d04                 | LR__0811
09d04                 | ' if  j=-1 andalso varnum<maxvars then   
09d04     FF FF 7F FF 
09d08     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09d0c     A8 00 90 5D |  if_ne	jmp	#LR__0812
09d10     54 00 00 FF 
09d14     EC E5 05 F1 | 	add	objptr, ##43500
09d18     F2 2E 02 FB | 	rdlong	local09, objptr
09d1c     54 00 00 FF 
09d20     EC E5 85 F1 | 	sub	objptr, ##43500
09d24     01 00 00 FF 
09d28     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09d2c     88 00 90 3D |  if_ae	jmp	#LR__0812
09d30     54 00 00 FF 
09d34     EC E5 05 F1 | 	add	objptr, ##43500
09d38     F2 2E 02 FB | 	rdlong	local09, objptr
09d3c     04 2E 66 F0 | 	shl	local09, #4
09d40     20 00 00 FF 
09d44     00 E4 85 F1 | 	sub	objptr, ##16384
09d48     F2 2E 02 F1 | 	add	local09, objptr
09d4c     17 27 62 FC | 	wrlong	local05, local09
09d50     20 00 00 FF 
09d54     00 E4 05 F1 | 	add	objptr, ##16384
09d58     F2 2E 02 FB | 	rdlong	local09, objptr
09d5c     04 2E 66 F0 | 	shl	local09, #4
09d60     20 00 00 FF 
09d64     00 E4 85 F1 | 	sub	objptr, ##16384
09d68     F2 2E 02 F1 | 	add	local09, objptr
09d6c     04 2E 06 F1 | 	add	local09, #4
09d70     17 01 68 FC | 	wrlong	#0, local09
09d74     20 00 00 FF 
09d78     00 E4 05 F1 | 	add	objptr, ##16384
09d7c     F2 2E 02 FB | 	rdlong	local09, objptr
09d80     04 2E 66 F0 | 	shl	local09, #4
09d84     20 00 00 FF 
09d88     00 E4 85 F1 | 	sub	objptr, ##16384
09d8c     F2 2E 02 F1 | 	add	local09, objptr
09d90     0C 2E 06 F1 | 	add	local09, #12
09d94     17 39 68 FC | 	wrlong	#28, local09
09d98     20 00 00 FF 
09d9c     00 E4 05 F1 | 	add	objptr, ##16384
09da0     F2 2E 02 FB | 	rdlong	local09, objptr
09da4     17 2B 02 F6 | 	mov	local07, local09
09da8     01 2E 06 F1 | 	add	local09, #1
09dac     F2 2E 62 FC | 	wrlong	local09, objptr
09db0     54 00 00 FF 
09db4     EC E5 85 F1 | 	sub	objptr, ##43500
09db8                 | LR__0812
09db8     00 2E 06 F6 | 	mov	local09, #0
09dbc                 | ' numpar=0
09dbc                 | ' ' check if it is an array
09dbc                 | ' 
09dbc                 | ' if lparts(ct+1).token=token_lpar then
09dbc     57 00 00 FF 
09dc0     28 E4 05 F1 | 	add	objptr, ##44584
09dc4     F2 2C 02 FB | 	rdlong	local08, objptr
09dc8     01 2C 06 F1 | 	add	local08, #1
09dcc     03 2C 66 F0 | 	shl	local08, #3
09dd0     02 00 00 FF 
09dd4     38 E4 85 F1 | 	sub	objptr, ##1080
09dd8     F2 2C 02 F1 | 	add	local08, objptr
09ddc     04 2C 06 F1 | 	add	local08, #4
09de0     16 2D 02 FB | 	rdlong	local08, local08
09de4     15 2C 0E F2 | 	cmp	local08, #21 wz
09de8     54 00 00 FF 
09dec     F0 E5 85 F1 | 	sub	objptr, ##43504
09df0     08 01 90 5D |  if_ne	jmp	#LR__0817
09df4     57 00 00 FF 
09df8     28 E4 05 F1 | 	add	objptr, ##44584
09dfc     F2 30 02 FB | 	rdlong	local10, objptr
09e00     01 30 06 F1 | 	add	local10, #1
09e04     F2 30 62 FC | 	wrlong	local10, objptr
09e08     57 00 00 FF 
09e0c     28 E4 85 F1 | 	sub	objptr, ##44584
09e10                 | '   ct+=1 											' omit this lpar, this is for expr list
09e10                 | '   do
09e10                 | LR__0813
09e10     57 00 00 FF 
09e14     28 E4 05 F1 | 	add	objptr, ##44584
09e18     F2 2C 02 FB | 	rdlong	local08, objptr
09e1c     01 2C 06 F1 | 	add	local08, #1
09e20     F2 2C 62 FC | 	wrlong	local08, objptr
09e24                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09e24                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09e24     03 2C 66 F0 | 	shl	local08, #3
09e28     02 00 00 FF 
09e2c     38 E4 85 F1 | 	sub	objptr, ##1080
09e30     F2 2C 02 F1 | 	add	local08, objptr
09e34     04 2C 06 F1 | 	add	local08, #4
09e38     16 31 02 FB | 	rdlong	local10, local08
09e3c     15 30 0E F2 | 	cmp	local10, #21 wz
09e40     54 00 00 FF 
09e44     F0 E5 85 F1 | 	sub	objptr, ##43504
09e48     40 00 90 5D |  if_ne	jmp	#LR__0814
09e4c     57 00 00 FF 
09e50     28 E4 05 F1 | 	add	objptr, ##44584
09e54     F2 30 02 FB | 	rdlong	local10, objptr
09e58     01 30 06 F1 | 	add	local10, #1
09e5c     F2 30 62 FC | 	wrlong	local10, objptr
09e60     57 00 00 FF 
09e64     28 E4 85 F1 | 	sub	objptr, ##44584
09e68     9C EE BF FD | 	call	#_expr
09e6c     57 00 00 FF 
09e70     28 E4 05 F1 | 	add	objptr, ##44584
09e74     F2 30 02 FB | 	rdlong	local10, objptr
09e78     01 30 06 F1 | 	add	local10, #1
09e7c     F2 30 62 FC | 	wrlong	local10, objptr
09e80     57 00 00 FF 
09e84     28 E4 85 F1 | 	sub	objptr, ##44584
09e88     04 00 90 FD | 	jmp	#LR__0815
09e8c                 | LR__0814
09e8c     78 EE BF FD | 	call	#_expr
09e90                 | LR__0815
09e90     01 2E 06 F1 | 	add	local09, #1
09e94     57 00 00 FF 
09e98     28 E4 05 F1 | 	add	objptr, ##44584
09e9c     F2 2C 02 FB | 	rdlong	local08, objptr
09ea0     03 2C 66 F0 | 	shl	local08, #3
09ea4     02 00 00 FF 
09ea8     38 E4 85 F1 | 	sub	objptr, ##1080
09eac     F2 2C 02 F1 | 	add	local08, objptr
09eb0     04 2C 06 F1 | 	add	local08, #4
09eb4     16 31 02 FB | 	rdlong	local10, local08
09eb8     14 30 0E F2 | 	cmp	local10, #20 wz
09ebc     54 00 00 FF 
09ec0     F0 E5 85 F1 | 	sub	objptr, ##43504
09ec4     34 00 90 AD |  if_e	jmp	#LR__0816
09ec8     57 00 00 FF 
09ecc     28 E4 05 F1 | 	add	objptr, ##44584
09ed0     F2 30 02 FB | 	rdlong	local10, objptr
09ed4     03 30 66 F0 | 	shl	local10, #3
09ed8     02 00 00 FF 
09edc     38 E4 85 F1 | 	sub	objptr, ##1080
09ee0     F2 30 02 F1 | 	add	local10, objptr
09ee4     04 30 06 F1 | 	add	local10, #4
09ee8     18 31 02 FB | 	rdlong	local10, local10
09eec     FE 31 0E F2 | 	cmp	local10, #510 wz
09ef0     54 00 00 FF 
09ef4     F0 E5 85 F1 | 	sub	objptr, ##43504
09ef8     14 FF 9F 5D |  if_ne	jmp	#LR__0813
09efc                 | LR__0816
09efc                 | LR__0817
09efc     17 21 02 F6 | 	mov	local02, local09
09f00     11 22 06 F6 | 	mov	local03, #17
09f04     15 1F 02 F6 | 	mov	local01, local07
09f08     0F 31 02 F6 | 	mov	local10, local01
09f0c     10 2F 02 F6 | 	mov	local09, local02
09f10     11 2D 02 F6 | 	mov	local08, local03
09f14     6A 00 00 FF 
09f18     60 E4 05 F1 | 	add	objptr, ##54368
09f1c     F2 2A 02 FB | 	rdlong	local07, objptr
09f20     15 29 02 F6 | 	mov	local06, local07
09f24     01 28 66 F0 | 	shl	local06, #1
09f28     15 29 02 F1 | 	add	local06, local07
09f2c     02 28 66 F0 | 	shl	local06, #2
09f30     03 00 00 FF 
09f34     00 E4 85 F1 | 	sub	objptr, ##1536
09f38     F2 28 02 F1 | 	add	local06, objptr
09f3c     14 31 62 FC | 	wrlong	local10, local06
09f40     03 00 00 FF 
09f44     00 E4 05 F1 | 	add	objptr, ##1536
09f48     F2 30 02 FB | 	rdlong	local10, objptr
09f4c     18 27 02 F6 | 	mov	local05, local10
09f50     01 26 66 F0 | 	shl	local05, #1
09f54     18 27 02 F1 | 	add	local05, local10
09f58     02 26 66 F0 | 	shl	local05, #2
09f5c     03 00 00 FF 
09f60     00 E4 85 F1 | 	sub	objptr, ##1536
09f64     F2 26 02 F1 | 	add	local05, objptr
09f68     04 26 06 F1 | 	add	local05, #4
09f6c     13 2F 62 FC | 	wrlong	local09, local05
09f70     03 00 00 FF 
09f74     00 E4 05 F1 | 	add	objptr, ##1536
09f78     F2 30 02 FB | 	rdlong	local10, objptr
09f7c     18 FB 01 F6 | 	mov	result1, local10
09f80     01 FA 65 F0 | 	shl	result1, #1
09f84     18 FB 01 F1 | 	add	result1, local10
09f88     02 FA 65 F0 | 	shl	result1, #2
09f8c     03 00 00 FF 
09f90     00 E4 85 F1 | 	sub	objptr, ##1536
09f94     F2 FA 01 F1 | 	add	result1, objptr
09f98     08 FA 05 F1 | 	add	result1, #8
09f9c     FD 2C 62 FC | 	wrlong	local08, result1
09fa0     03 00 00 FF 
09fa4     00 E4 05 F1 | 	add	objptr, ##1536
09fa8     F2 30 02 FB | 	rdlong	local10, objptr
09fac     01 30 06 F1 | 	add	local10, #1
09fb0     F2 30 62 FC | 	wrlong	local10, objptr
09fb4     6A 00 00 FF 
09fb8     60 E4 85 F1 | 	sub	objptr, ##54368
09fbc                 | ' 
09fbc                 | ' t2.result.twowords(1)=numpar
09fbc                 | ' 
09fbc                 | ' 
09fbc                 | ' 
09fbc                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09fbc                 | ' 
09fbc                 | ' 
09fbc                 | '  
09fbc                 | ' 
09fbc                 | ' 701 
09fbc                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09fbc                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09fbc     FF FF 7F FF 
09fc0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09fc4     B8 00 90 5D |  if_ne	jmp	#LR__0818
09fc8     15 22 06 F6 | 	mov	local03, #21
09fcc     0F 31 02 F6 | 	mov	local10, local01
09fd0     10 2F 02 F6 | 	mov	local09, local02
09fd4     11 2D 02 F6 | 	mov	local08, local03
09fd8     6A 00 00 FF 
09fdc     60 E4 05 F1 | 	add	objptr, ##54368
09fe0     F2 2A 02 FB | 	rdlong	local07, objptr
09fe4     15 29 02 F6 | 	mov	local06, local07
09fe8     01 28 66 F0 | 	shl	local06, #1
09fec     15 29 02 F1 | 	add	local06, local07
09ff0     02 28 66 F0 | 	shl	local06, #2
09ff4     03 00 00 FF 
09ff8     00 E4 85 F1 | 	sub	objptr, ##1536
09ffc     F2 28 02 F1 | 	add	local06, objptr
0a000     14 31 62 FC | 	wrlong	local10, local06
0a004     03 00 00 FF 
0a008     00 E4 05 F1 | 	add	objptr, ##1536
0a00c     F2 1E 02 FB | 	rdlong	local01, objptr
0a010     0F 27 02 F6 | 	mov	local05, local01
0a014     01 26 66 F0 | 	shl	local05, #1
0a018     0F 27 02 F1 | 	add	local05, local01
0a01c     02 26 66 F0 | 	shl	local05, #2
0a020     03 00 00 FF 
0a024     00 E4 85 F1 | 	sub	objptr, ##1536
0a028     F2 26 02 F1 | 	add	local05, objptr
0a02c     04 26 06 F1 | 	add	local05, #4
0a030     13 2F 62 FC | 	wrlong	local09, local05
0a034     03 00 00 FF 
0a038     00 E4 05 F1 | 	add	objptr, ##1536
0a03c     F2 1E 02 FB | 	rdlong	local01, objptr
0a040     0F FB 01 F6 | 	mov	result1, local01
0a044     01 FA 65 F0 | 	shl	result1, #1
0a048     0F FB 01 F1 | 	add	result1, local01
0a04c     02 FA 65 F0 | 	shl	result1, #2
0a050     03 00 00 FF 
0a054     00 E4 85 F1 | 	sub	objptr, ##1536
0a058     F2 FA 01 F1 | 	add	result1, objptr
0a05c     08 FA 05 F1 | 	add	result1, #8
0a060     FD 2C 62 FC | 	wrlong	local08, result1
0a064     03 00 00 FF 
0a068     00 E4 05 F1 | 	add	objptr, ##1536
0a06c     F2 30 02 FB | 	rdlong	local10, objptr
0a070     01 30 06 F1 | 	add	local10, #1
0a074     F2 30 62 FC | 	wrlong	local10, objptr
0a078     6A 00 00 FF 
0a07c     60 E4 85 F1 | 	sub	objptr, ##54368
0a080                 | LR__0818
0a080     A7 F0 03 F6 | 	mov	ptra, fp
0a084     B2 00 A0 FD | 	call	#popregs_
0a088                 | _getvar_ret
0a088     2D 00 64 FD | 	ret
0a08c                 | 
0a08c                 | ' 
0a08c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a08c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a08c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a08c                 | ' 
0a08c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a08c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a08c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a08c                 | ' 
0a08c                 | ' function execute_line (astart=0 as integer) as integer
0a08c                 | _execute_line
0a08c     04 4A 05 F6 | 	mov	COUNT_, #4
0a090     A8 00 A0 FD | 	call	#pushregs_
0a094     79 00 00 FF 
0a098     98 E5 05 F1 | 	add	objptr, ##62360
0a09c     F2 00 68 FC | 	wrlong	#0, objptr
0a0a0                 | ' runptr2=0
0a0a0                 | ' for lineptr_e=astart to lineptr-1
0a0a0     0F 00 00 FF 
0a0a4     34 E5 85 F1 | 	sub	objptr, ##7988
0a0a8     F2 12 62 FC | 	wrlong	arg01, objptr
0a0ac     04 E4 85 F1 | 	sub	objptr, #4
0a0b0     F2 1E 02 FB | 	rdlong	local01, objptr
0a0b4     6A 00 00 FF 
0a0b8     60 E4 85 F1 | 	sub	objptr, ##54368
0a0bc                 | LR__0820
0a0bc     6A 00 00 FF 
0a0c0     64 E4 05 F1 | 	add	objptr, ##54372
0a0c4     F2 FA 01 FB | 	rdlong	result1, objptr
0a0c8     6A 00 00 FF 
0a0cc     64 E4 85 F1 | 	sub	objptr, ##54372
0a0d0     0F FB 51 F2 | 	cmps	result1, local01 wc
0a0d4     98 00 90 3D |  if_ae	jmp	#LR__0821
0a0d8     6A 00 00 FF 
0a0dc     64 E4 05 F1 | 	add	objptr, ##54372
0a0e0     F2 FA 01 FB | 	rdlong	result1, objptr
0a0e4     FD 20 02 F6 | 	mov	local02, result1
0a0e8     01 20 66 F0 | 	shl	local02, #1
0a0ec     FD 20 02 F1 | 	add	local02, result1
0a0f0     02 20 66 F0 | 	shl	local02, #2
0a0f4     03 00 00 FF 
0a0f8     04 E4 85 F1 | 	sub	objptr, ##1540
0a0fc     F2 20 02 F1 | 	add	local02, objptr
0a100     08 20 06 F1 | 	add	local02, #8
0a104     10 21 02 FB | 	rdlong	local02, local02
0a108     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a10c     02 20 66 F0 | 	shl	local02, #2
0a110     04 00 00 FF 
0a114     1C E4 85 F1 | 	sub	objptr, ##2076
0a118     F2 20 02 F1 | 	add	local02, objptr
0a11c     10 21 02 FB | 	rdlong	local02, local02
0a120     10 23 02 F6 | 	mov	local03, local02
0a124     13 20 46 F7 | 	zerox	local02, #19
0a128     14 22 46 F0 | 	shr	local03, #20
0a12c     02 22 66 F0 | 	shl	local03, #2
0a130     ED 22 02 F1 | 	add	local03, __methods__
0a134     11 23 02 FB | 	rdlong	local03, local03
0a138     63 00 00 FF 
0a13c     44 E4 85 F1 | 	sub	objptr, ##50756
0a140     F2 24 02 F6 | 	mov	local04, objptr
0a144     10 E5 01 F6 | 	mov	objptr, local02
0a148     2D 22 62 FD | 	call	local03
0a14c     12 E5 01 F6 | 	mov	objptr, local04
0a150     6A 00 00 FF 
0a154     64 E4 05 F1 | 	add	objptr, ##54372
0a158     F2 24 02 FB | 	rdlong	local04, objptr
0a15c     01 24 06 F1 | 	add	local04, #1
0a160     F2 24 62 FC | 	wrlong	local04, objptr
0a164     6A 00 00 FF 
0a168     64 E4 85 F1 | 	sub	objptr, ##54372
0a16c     4C FF 9F FD | 	jmp	#LR__0820
0a170                 | LR__0821
0a170                 | ' return runptr2
0a170     79 00 00 FF 
0a174     98 E5 05 F1 | 	add	objptr, ##62360
0a178     F2 FA 01 FB | 	rdlong	result1, objptr
0a17c     79 00 00 FF 
0a180     98 E5 85 F1 | 	sub	objptr, ##62360
0a184     A7 F0 03 F6 | 	mov	ptra, fp
0a188     B2 00 A0 FD | 	call	#popregs_
0a18c                 | _execute_line_ret
0a18c     2D 00 64 FD | 	ret
0a190                 | 
0a190                 | ' 
0a190                 | ' 
0a190                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a190                 | ' 
0a190                 | ' function pop() as expr_result
0a190                 | _pop
0a190                 | ' 
0a190                 | ' if stackpointer=0 then
0a190     63 00 00 FF 
0a194     3C E4 05 F1 | 	add	objptr, ##50748
0a198     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a19c     63 00 00 FF 
0a1a0     3C E4 85 F1 | 	sub	objptr, ##50748
0a1a4     FF 04 06 A6 |  if_e	mov	_var03, #255
0a1a8     18 00 06 A6 |  if_e	mov	_var01, #24
0a1ac     68 00 90 AD |  if_e	jmp	#LR__0830
0a1b0     63 00 00 FF 
0a1b4     3C E4 05 F1 | 	add	objptr, ##50748
0a1b8     F2 FA 01 FB | 	rdlong	result1, objptr
0a1bc     01 FA 85 F1 | 	sub	result1, #1
0a1c0     F2 FA 61 FC | 	wrlong	result1, objptr
0a1c4     FD FE 01 F6 | 	mov	result3, result1
0a1c8     01 FE 65 F0 | 	shl	result3, #1
0a1cc     FD FE 01 F1 | 	add	result3, result1
0a1d0     02 FE 65 F0 | 	shl	result3, #2
0a1d4     0C 00 00 FF 
0a1d8     0C E4 85 F1 | 	sub	objptr, ##6156
0a1dc     F2 FE 01 F1 | 	add	result3, objptr
0a1e0     FF 00 02 FB | 	rdlong	_var01, result3
0a1e4     04 FE 05 F1 | 	add	result3, #4
0a1e8     FF FE 01 FB | 	rdlong	result3, result3
0a1ec     FD FC 01 F6 | 	mov	result2, result1
0a1f0     01 FC 65 F0 | 	shl	result2, #1
0a1f4     FD FC 01 F1 | 	add	result2, result1
0a1f8     02 FC 65 F0 | 	shl	result2, #2
0a1fc     F2 FC 01 F1 | 	add	result2, objptr
0a200     08 FC 05 F1 | 	add	result2, #8
0a204     FE FA 01 FB | 	rdlong	result1, result2
0a208     FF 02 02 F6 | 	mov	_var02, result3
0a20c     FD 04 02 F6 | 	mov	_var03, result1
0a210     57 00 00 FF 
0a214     30 E4 85 F1 | 	sub	objptr, ##44592
0a218                 | LR__0830
0a218                 | ' return t1
0a218     01 FD 01 F6 | 	mov	result2, _var02
0a21c     02 FF 01 F6 | 	mov	result3, _var03
0a220     00 FB 01 F6 | 	mov	result1, _var01
0a224                 | _pop_ret
0a224     2D 00 64 FD | 	ret
0a228                 | 
0a228                 | ' 
0a228                 | ' sub push(t1 as expr_result )
0a228                 | _push
0a228                 | ' 
0a228                 | ' 'print "In push: "; t1.result_type
0a228                 | ' 'print "In push: "; t1.result.uresult
0a228                 | ' 
0a228                 | ' if stackpointer<maxstack then 
0a228     63 00 00 FF 
0a22c     3C E4 05 F1 | 	add	objptr, ##50748
0a230     F2 00 02 FB | 	rdlong	_var01, objptr
0a234     63 00 00 FF 
0a238     3C E4 85 F1 | 	sub	objptr, ##50748
0a23c     01 00 00 FF 
0a240     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a244     BC 00 90 3D |  if_ae	jmp	#LR__0840
0a248     09 01 02 FB | 	rdlong	_var01, arg01
0a24c     04 12 06 F1 | 	add	arg01, #4
0a250     09 03 02 FB | 	rdlong	_var02, arg01
0a254     04 12 06 F1 | 	add	arg01, #4
0a258     09 13 02 FB | 	rdlong	arg01, arg01
0a25c     63 00 00 FF 
0a260     3C E4 05 F1 | 	add	objptr, ##50748
0a264     F2 04 02 FB | 	rdlong	_var03, objptr
0a268     02 07 02 F6 | 	mov	_var04, _var03
0a26c     01 06 66 F0 | 	shl	_var04, #1
0a270     02 07 02 F1 | 	add	_var04, _var03
0a274     02 06 66 F0 | 	shl	_var04, #2
0a278     0C 00 00 FF 
0a27c     0C E4 85 F1 | 	sub	objptr, ##6156
0a280     F2 06 02 F1 | 	add	_var04, objptr
0a284     03 01 62 FC | 	wrlong	_var01, _var04
0a288     0C 00 00 FF 
0a28c     0C E4 05 F1 | 	add	objptr, ##6156
0a290     F2 06 02 FB | 	rdlong	_var04, objptr
0a294     03 05 02 F6 | 	mov	_var03, _var04
0a298     01 04 66 F0 | 	shl	_var03, #1
0a29c     03 05 02 F1 | 	add	_var03, _var04
0a2a0     02 04 66 F0 | 	shl	_var03, #2
0a2a4     0C 00 00 FF 
0a2a8     0C E4 85 F1 | 	sub	objptr, ##6156
0a2ac     F2 04 02 F1 | 	add	_var03, objptr
0a2b0     04 04 06 F1 | 	add	_var03, #4
0a2b4     02 03 62 FC | 	wrlong	_var02, _var03
0a2b8     0C 00 00 FF 
0a2bc     0C E4 05 F1 | 	add	objptr, ##6156
0a2c0     F2 06 02 FB | 	rdlong	_var04, objptr
0a2c4     03 05 02 F6 | 	mov	_var03, _var04
0a2c8     01 04 66 F0 | 	shl	_var03, #1
0a2cc     03 05 02 F1 | 	add	_var03, _var04
0a2d0     02 04 66 F0 | 	shl	_var03, #2
0a2d4     0C 00 00 FF 
0a2d8     0C E4 85 F1 | 	sub	objptr, ##6156
0a2dc     F2 04 02 F1 | 	add	_var03, objptr
0a2e0     08 04 06 F1 | 	add	_var03, #8
0a2e4     02 13 62 FC | 	wrlong	arg01, _var03
0a2e8     0C 00 00 FF 
0a2ec     0C E4 05 F1 | 	add	objptr, ##6156
0a2f0     F2 00 02 FB | 	rdlong	_var01, objptr
0a2f4     01 00 06 F1 | 	add	_var01, #1
0a2f8     F2 00 62 FC | 	wrlong	_var01, objptr
0a2fc     63 00 00 FF 
0a300     3C E4 85 F1 | 	sub	objptr, ##50748
0a304                 | LR__0840
0a304                 | _push_ret
0a304     2D 00 64 FD | 	ret
0a308                 | 
0a308                 | ' 
0a308                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a308                 | ' 
0a308                 | ' sub do_push
0a308                 | _do_push
0a308                 | ' if stackpointer<maxstack then 
0a308     63 00 00 FF 
0a30c     3C E4 05 F1 | 	add	objptr, ##50748
0a310     F2 00 02 FB | 	rdlong	_var01, objptr
0a314     63 00 00 FF 
0a318     3C E4 85 F1 | 	sub	objptr, ##50748
0a31c     01 00 00 FF 
0a320     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a324     F8 00 90 3D |  if_ae	jmp	#LR__0850
0a328     6A 00 00 FF 
0a32c     64 E4 05 F1 | 	add	objptr, ##54372
0a330     F2 02 02 FB | 	rdlong	_var02, objptr
0a334     01 05 02 F6 | 	mov	_var03, _var02
0a338     01 04 66 F0 | 	shl	_var03, #1
0a33c     01 05 02 F1 | 	add	_var03, _var02
0a340     02 04 66 F0 | 	shl	_var03, #2
0a344     03 00 00 FF 
0a348     04 E4 85 F1 | 	sub	objptr, ##1540
0a34c     F2 04 02 F1 | 	add	_var03, objptr
0a350     02 01 02 FB | 	rdlong	_var01, _var03
0a354     04 04 06 F1 | 	add	_var03, #4
0a358     02 07 02 FB | 	rdlong	_var04, _var03
0a35c     01 05 02 F6 | 	mov	_var03, _var02
0a360     01 04 66 F0 | 	shl	_var03, #1
0a364     01 05 02 F1 | 	add	_var03, _var02
0a368     02 04 66 F0 | 	shl	_var03, #2
0a36c     F2 04 02 F1 | 	add	_var03, objptr
0a370     08 04 06 F1 | 	add	_var03, #8
0a374     02 03 02 FB | 	rdlong	_var02, _var03
0a378     04 00 00 FF 
0a37c     24 E4 85 F1 | 	sub	objptr, ##2084
0a380     F2 04 02 FB | 	rdlong	_var03, objptr
0a384     02 09 02 F6 | 	mov	_var05, _var03
0a388     01 08 66 F0 | 	shl	_var05, #1
0a38c     02 09 02 F1 | 	add	_var05, _var03
0a390     02 08 66 F0 | 	shl	_var05, #2
0a394     0C 00 00 FF 
0a398     0C E4 85 F1 | 	sub	objptr, ##6156
0a39c     F2 08 02 F1 | 	add	_var05, objptr
0a3a0     04 01 62 FC | 	wrlong	_var01, _var05
0a3a4     0C 00 00 FF 
0a3a8     0C E4 05 F1 | 	add	objptr, ##6156
0a3ac     F2 08 02 FB | 	rdlong	_var05, objptr
0a3b0     04 05 02 F6 | 	mov	_var03, _var05
0a3b4     01 04 66 F0 | 	shl	_var03, #1
0a3b8     04 05 02 F1 | 	add	_var03, _var05
0a3bc     02 04 66 F0 | 	shl	_var03, #2
0a3c0     0C 00 00 FF 
0a3c4     0C E4 85 F1 | 	sub	objptr, ##6156
0a3c8     F2 04 02 F1 | 	add	_var03, objptr
0a3cc     04 04 06 F1 | 	add	_var03, #4
0a3d0     02 07 62 FC | 	wrlong	_var04, _var03
0a3d4     0C 00 00 FF 
0a3d8     0C E4 05 F1 | 	add	objptr, ##6156
0a3dc     F2 08 02 FB | 	rdlong	_var05, objptr
0a3e0     04 07 02 F6 | 	mov	_var04, _var05
0a3e4     01 06 66 F0 | 	shl	_var04, #1
0a3e8     04 07 02 F1 | 	add	_var04, _var05
0a3ec     02 06 66 F0 | 	shl	_var04, #2
0a3f0     0C 00 00 FF 
0a3f4     0C E4 85 F1 | 	sub	objptr, ##6156
0a3f8     F2 06 02 F1 | 	add	_var04, objptr
0a3fc     08 06 06 F1 | 	add	_var04, #8
0a400     03 03 62 FC | 	wrlong	_var02, _var04
0a404     0C 00 00 FF 
0a408     0C E4 05 F1 | 	add	objptr, ##6156
0a40c     F2 00 02 FB | 	rdlong	_var01, objptr
0a410     01 00 06 F1 | 	add	_var01, #1
0a414     F2 00 62 FC | 	wrlong	_var01, objptr
0a418     63 00 00 FF 
0a41c     3C E4 85 F1 | 	sub	objptr, ##50748
0a420                 | LR__0850
0a420                 | _do_push_ret
0a420     2D 00 64 FD | 	ret
0a424                 | 
0a424                 | ' 
0a424                 | '   
0a424                 | ' sub csave_block(address as ulong)
0a424                 | _csave_block
0a424     09 01 02 F6 | 	mov	_var01, arg01
0a428                 | ' 
0a428                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0a428                 | ' ' we enter it at the state of playing 1 kHz header tone
0a428                 | ' 
0a428                 | ' for i=0 to 63 step 2
0a428     00 02 06 F6 | 	mov	_var02, #0
0a42c                 | LR__0860
0a42c                 | '   do: loop until lpeek(base+32*7)>32768
0a42c     56 00 00 FF 
0a430     F4 E5 05 F1 | 	add	objptr, ##44532
0a434     97 0C 48 FB | 	callpa	#(@LR__0862-@LR__0861)>>2,fcache_load_ptr_
0a438                 | LR__0861
0a438     F2 12 02 FB | 	rdlong	arg01, objptr
0a43c     E0 12 06 F1 | 	add	arg01, #224
0a440     09 FB 01 FB | 	rdlong	result1, arg01
0a444     40 00 00 FF 
0a448     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a44c     E8 FF 9F CD |  if_b	jmp	#LR__0861
0a450                 | LR__0862
0a450     00 13 02 F6 | 	mov	arg01, _var01
0a454     01 05 02 F6 | 	mov	_var03, _var02
0a458     02 04 66 F0 | 	shl	_var03, #2
0a45c     02 13 02 F1 | 	add	arg01, _var03
0a460     09 07 02 FB | 	rdlong	_var04, arg01
0a464     24 00 00 FF 
0a468     D8 E4 05 F1 | 	add	objptr, ##18648
0a46c     F2 06 62 FC | 	wrlong	_var04, objptr
0a470     7B 00 00 FF 
0a474     CC E4 85 F1 | 	sub	objptr, ##63180
0a478                 | '   q=lpeek(address+4*i)
0a478                 | '      for bit=0 to 31
0a478     00 08 06 F6 | 	mov	_var05, #0
0a47c     97 84 48 FB | 	callpa	#(@LR__0867-@LR__0863)>>2,fcache_load_ptr_
0a480                 | LR__0863
0a480                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0a480     7B 00 00 FF 
0a484     CC E4 05 F1 | 	add	objptr, ##63180
0a488     F2 06 02 FB | 	rdlong	_var04, objptr
0a48c     7B 00 00 FF 
0a490     CC E4 85 F1 | 	sub	objptr, ##63180
0a494     04 05 C2 F9 | 	decod	_var03, _var05
0a498     02 07 CA F7 | 	test	_var04, _var03 wz
0a49c     60 00 90 AD |  if_e	jmp	#LR__0864
0a4a0     04 05 02 F6 | 	mov	_var03, _var05
0a4a4     02 04 66 F0 | 	shl	_var03, #2
0a4a8     77 00 00 FF 
0a4ac     90 E4 05 F1 | 	add	objptr, ##61072
0a4b0     F2 04 02 F1 | 	add	_var03, objptr
0a4b4     02 FF 48 FC | 	wrbyte	#127, _var03
0a4b8     04 05 02 F6 | 	mov	_var03, _var05
0a4bc     02 04 66 F0 | 	shl	_var03, #2
0a4c0     01 04 06 F1 | 	add	_var03, #1
0a4c4     F2 04 02 F1 | 	add	_var03, objptr
0a4c8     02 01 49 FC | 	wrbyte	#128, _var03
0a4cc     04 05 02 F6 | 	mov	_var03, _var05
0a4d0     02 04 66 F0 | 	shl	_var03, #2
0a4d4     02 04 06 F1 | 	add	_var03, #2
0a4d8     F2 04 02 F1 | 	add	_var03, objptr
0a4dc     02 FF 48 FC | 	wrbyte	#127, _var03
0a4e0     04 05 02 F6 | 	mov	_var03, _var05
0a4e4     02 04 66 F0 | 	shl	_var03, #2
0a4e8     03 04 06 F1 | 	add	_var03, #3
0a4ec     F2 04 02 F1 | 	add	_var03, objptr
0a4f0     02 01 49 FC | 	wrbyte	#128, _var03
0a4f4     77 00 00 FF 
0a4f8     90 E4 85 F1 | 	sub	objptr, ##61072
0a4fc     5C 00 90 FD | 	jmp	#LR__0865
0a500                 | LR__0864
0a500     04 05 02 F6 | 	mov	_var03, _var05
0a504     02 04 66 F0 | 	shl	_var03, #2
0a508     77 00 00 FF 
0a50c     90 E4 05 F1 | 	add	objptr, ##61072
0a510     F2 04 02 F1 | 	add	_var03, objptr
0a514     02 01 49 FC | 	wrbyte	#128, _var03
0a518     04 05 02 F6 | 	mov	_var03, _var05
0a51c     02 04 66 F0 | 	shl	_var03, #2
0a520     01 04 06 F1 | 	add	_var03, #1
0a524     F2 04 02 F1 | 	add	_var03, objptr
0a528     02 01 49 FC | 	wrbyte	#128, _var03
0a52c     04 05 02 F6 | 	mov	_var03, _var05
0a530     02 04 66 F0 | 	shl	_var03, #2
0a534     02 04 06 F1 | 	add	_var03, #2
0a538     F2 04 02 F1 | 	add	_var03, objptr
0a53c     02 FF 48 FC | 	wrbyte	#127, _var03
0a540     04 05 02 F6 | 	mov	_var03, _var05
0a544     02 04 66 F0 | 	shl	_var03, #2
0a548     03 04 06 F1 | 	add	_var03, #3
0a54c     F2 04 02 F1 | 	add	_var03, objptr
0a550     02 FF 48 FC | 	wrbyte	#127, _var03
0a554     77 00 00 FF 
0a558     90 E4 85 F1 | 	sub	objptr, ##61072
0a55c                 | LR__0865
0a55c     01 08 06 F1 | 	add	_var05, #1
0a560     20 08 56 F2 | 	cmps	_var05, #32 wc
0a564     18 FF 9F CD |  if_b	jmp	#LR__0863
0a568                 | '   do: loop until lpeek(base+32*7)<32768
0a568     56 00 00 FF 
0a56c     F4 E5 05 F1 | 	add	objptr, ##44532
0a570                 | LR__0866
0a570     F2 12 02 FB | 	rdlong	arg01, objptr
0a574     E0 12 06 F1 | 	add	arg01, #224
0a578     09 FB 01 FB | 	rdlong	result1, arg01
0a57c     40 00 00 FF 
0a580     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a584     E8 FF 9F 3D |  if_ae	jmp	#LR__0866
0a588                 | LR__0867
0a588     00 13 02 F6 | 	mov	arg01, _var01
0a58c     04 12 06 F1 | 	add	arg01, #4
0a590     01 05 02 F6 | 	mov	_var03, _var02
0a594     02 04 66 F0 | 	shl	_var03, #2
0a598     02 13 02 F1 | 	add	arg01, _var03
0a59c     09 07 02 FB | 	rdlong	_var04, arg01
0a5a0     24 00 00 FF 
0a5a4     D8 E4 05 F1 | 	add	objptr, ##18648
0a5a8     F2 06 62 FC | 	wrlong	_var04, objptr
0a5ac     7B 00 00 FF 
0a5b0     CC E4 85 F1 | 	sub	objptr, ##63180
0a5b4                 | '   q=lpeek(address+4+4*i)
0a5b4                 | '      for bit=0 to 31
0a5b4     00 08 06 F6 | 	mov	_var05, #0
0a5b8     97 94 48 FB | 	callpa	#(@LR__0871-@LR__0868)>>2,fcache_load_ptr_
0a5bc                 | LR__0868
0a5bc                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0a5bc     7B 00 00 FF 
0a5c0     CC E4 05 F1 | 	add	objptr, ##63180
0a5c4     F2 06 02 FB | 	rdlong	_var04, objptr
0a5c8     7B 00 00 FF 
0a5cc     CC E4 85 F1 | 	sub	objptr, ##63180
0a5d0     04 05 C2 F9 | 	decod	_var03, _var05
0a5d4     02 07 CA F7 | 	test	_var04, _var03 wz
0a5d8     80 00 90 AD |  if_e	jmp	#LR__0869
0a5dc     04 0B 02 F6 | 	mov	_var06, _var05
0a5e0     02 0A 66 F0 | 	shl	_var06, #2
0a5e4     80 04 06 F6 | 	mov	_var03, #128
0a5e8     05 05 02 F1 | 	add	_var03, _var06
0a5ec     77 00 00 FF 
0a5f0     90 E4 05 F1 | 	add	objptr, ##61072
0a5f4     F2 04 02 F1 | 	add	_var03, objptr
0a5f8     02 FF 48 FC | 	wrbyte	#127, _var03
0a5fc     04 0B 02 F6 | 	mov	_var06, _var05
0a600     02 0A 66 F0 | 	shl	_var06, #2
0a604     80 04 06 F6 | 	mov	_var03, #128
0a608     05 05 02 F1 | 	add	_var03, _var06
0a60c     01 04 06 F1 | 	add	_var03, #1
0a610     F2 04 02 F1 | 	add	_var03, objptr
0a614     02 01 49 FC | 	wrbyte	#128, _var03
0a618     04 0B 02 F6 | 	mov	_var06, _var05
0a61c     02 0A 66 F0 | 	shl	_var06, #2
0a620     80 04 06 F6 | 	mov	_var03, #128
0a624     05 05 02 F1 | 	add	_var03, _var06
0a628     02 04 06 F1 | 	add	_var03, #2
0a62c     F2 04 02 F1 | 	add	_var03, objptr
0a630     02 FF 48 FC | 	wrbyte	#127, _var03
0a634     04 0B 02 F6 | 	mov	_var06, _var05
0a638     02 0A 66 F0 | 	shl	_var06, #2
0a63c     80 04 06 F6 | 	mov	_var03, #128
0a640     05 05 02 F1 | 	add	_var03, _var06
0a644     03 04 06 F1 | 	add	_var03, #3
0a648     F2 04 02 F1 | 	add	_var03, objptr
0a64c     02 01 49 FC | 	wrbyte	#128, _var03
0a650     77 00 00 FF 
0a654     90 E4 85 F1 | 	sub	objptr, ##61072
0a658     7C 00 90 FD | 	jmp	#LR__0870
0a65c                 | LR__0869
0a65c     04 0B 02 F6 | 	mov	_var06, _var05
0a660     02 0A 66 F0 | 	shl	_var06, #2
0a664     80 04 06 F6 | 	mov	_var03, #128
0a668     05 05 02 F1 | 	add	_var03, _var06
0a66c     77 00 00 FF 
0a670     90 E4 05 F1 | 	add	objptr, ##61072
0a674     F2 04 02 F1 | 	add	_var03, objptr
0a678     02 01 49 FC | 	wrbyte	#128, _var03
0a67c     04 0B 02 F6 | 	mov	_var06, _var05
0a680     02 0A 66 F0 | 	shl	_var06, #2
0a684     80 04 06 F6 | 	mov	_var03, #128
0a688     05 05 02 F1 | 	add	_var03, _var06
0a68c     01 04 06 F1 | 	add	_var03, #1
0a690     F2 04 02 F1 | 	add	_var03, objptr
0a694     02 01 49 FC | 	wrbyte	#128, _var03
0a698     04 0B 02 F6 | 	mov	_var06, _var05
0a69c     02 0A 66 F0 | 	shl	_var06, #2
0a6a0     80 04 06 F6 | 	mov	_var03, #128
0a6a4     05 05 02 F1 | 	add	_var03, _var06
0a6a8     02 04 06 F1 | 	add	_var03, #2
0a6ac     F2 04 02 F1 | 	add	_var03, objptr
0a6b0     02 FF 48 FC | 	wrbyte	#127, _var03
0a6b4     04 0B 02 F6 | 	mov	_var06, _var05
0a6b8     02 0A 66 F0 | 	shl	_var06, #2
0a6bc     80 04 06 F6 | 	mov	_var03, #128
0a6c0     05 05 02 F1 | 	add	_var03, _var06
0a6c4     03 04 06 F1 | 	add	_var03, #3
0a6c8     F2 04 02 F1 | 	add	_var03, objptr
0a6cc     02 FF 48 FC | 	wrbyte	#127, _var03
0a6d0     77 00 00 FF 
0a6d4     90 E4 85 F1 | 	sub	objptr, ##61072
0a6d8                 | LR__0870
0a6d8     01 08 06 F1 | 	add	_var05, #1
0a6dc     20 08 56 F2 | 	cmps	_var05, #32 wc
0a6e0     D8 FE 9F CD |  if_b	jmp	#LR__0868
0a6e4                 | LR__0871
0a6e4     02 02 06 F1 | 	add	_var02, #2
0a6e8     40 02 56 F2 | 	cmps	_var02, #64 wc
0a6ec     3C FD 9F CD |  if_b	jmp	#LR__0860
0a6f0                 | ' do: loop until lpeek(base+32*7)>32768
0a6f0     56 00 00 FF 
0a6f4     F4 E5 05 F1 | 	add	objptr, ##44532
0a6f8     97 84 48 FB | 	callpa	#(@LR__0880-@LR__0872)>>2,fcache_load_ptr_
0a6fc                 | LR__0872
0a6fc     F2 12 02 FB | 	rdlong	arg01, objptr
0a700     E0 12 06 F1 | 	add	arg01, #224
0a704     09 FB 01 FB | 	rdlong	result1, arg01
0a708     40 00 00 FF 
0a70c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a710     E8 FF 9F CD |  if_b	jmp	#LR__0872
0a714     56 00 00 FF 
0a718     F4 E5 85 F1 | 	sub	objptr, ##44532
0a71c                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a71c     00 02 06 F6 | 	mov	_var02, #0
0a720                 | LR__0873
0a720     01 07 52 F6 | 	abs	_var04, _var02 wc
0a724     07 06 06 F5 | 	and	_var04, #7
0a728     03 07 82 F6 | 	negc	_var04, _var04
0a72c     04 06 56 F2 | 	cmps	_var04, #4 wc
0a730     20 00 90 3D |  if_ae	jmp	#LR__0874
0a734     01 0B 02 F6 | 	mov	_var06, _var02
0a738     77 00 00 FF 
0a73c     90 E4 05 F1 | 	add	objptr, ##61072
0a740     F2 0A 02 F1 | 	add	_var06, objptr
0a744     05 FF 48 FC | 	wrbyte	#127, _var06
0a748     77 00 00 FF 
0a74c     90 E4 85 F1 | 	sub	objptr, ##61072
0a750     1C 00 90 FD | 	jmp	#LR__0875
0a754                 | LR__0874
0a754     01 0B 02 F6 | 	mov	_var06, _var02
0a758     77 00 00 FF 
0a75c     90 E4 05 F1 | 	add	objptr, ##61072
0a760     F2 0A 02 F1 | 	add	_var06, objptr
0a764     05 01 49 FC | 	wrbyte	#128, _var06
0a768     77 00 00 FF 
0a76c     90 E4 85 F1 | 	sub	objptr, ##61072
0a770                 | LR__0875
0a770     01 02 06 F1 | 	add	_var02, #1
0a774     80 02 56 F2 | 	cmps	_var02, #128 wc
0a778     A4 FF 9F CD |  if_b	jmp	#LR__0873
0a77c                 | ' 
0a77c                 | ' do: loop until lpeek(base+32*7)<32768
0a77c     56 00 00 FF 
0a780     F4 E5 05 F1 | 	add	objptr, ##44532
0a784                 | LR__0876
0a784     F2 12 02 FB | 	rdlong	arg01, objptr
0a788     E0 12 06 F1 | 	add	arg01, #224
0a78c     09 FB 01 FB | 	rdlong	result1, arg01
0a790     40 00 00 FF 
0a794     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a798     E8 FF 9F 3D |  if_ae	jmp	#LR__0876
0a79c     56 00 00 FF 
0a7a0     F4 E5 85 F1 | 	sub	objptr, ##44532
0a7a4                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a7a4     80 02 06 F6 | 	mov	_var02, #128
0a7a8                 | LR__0877
0a7a8     01 07 52 F6 | 	abs	_var04, _var02 wc
0a7ac     07 06 06 F5 | 	and	_var04, #7
0a7b0     03 07 82 F6 | 	negc	_var04, _var04
0a7b4     04 06 56 F2 | 	cmps	_var04, #4 wc
0a7b8     20 00 90 3D |  if_ae	jmp	#LR__0878
0a7bc     01 0B 02 F6 | 	mov	_var06, _var02
0a7c0     77 00 00 FF 
0a7c4     90 E4 05 F1 | 	add	objptr, ##61072
0a7c8     F2 0A 02 F1 | 	add	_var06, objptr
0a7cc     05 FF 48 FC | 	wrbyte	#127, _var06
0a7d0     77 00 00 FF 
0a7d4     90 E4 85 F1 | 	sub	objptr, ##61072
0a7d8     1C 00 90 FD | 	jmp	#LR__0879
0a7dc                 | LR__0878
0a7dc     01 0B 02 F6 | 	mov	_var06, _var02
0a7e0     77 00 00 FF 
0a7e4     90 E4 05 F1 | 	add	objptr, ##61072
0a7e8     F2 0A 02 F1 | 	add	_var06, objptr
0a7ec     05 01 49 FC | 	wrbyte	#128, _var06
0a7f0     77 00 00 FF 
0a7f4     90 E4 85 F1 | 	sub	objptr, ##61072
0a7f8                 | LR__0879
0a7f8     01 02 06 F1 | 	add	_var02, #1
0a7fc     00 03 16 F2 | 	cmp	_var02, #256 wc
0a800     A4 FF 9F CD |  if_b	jmp	#LR__0877
0a804                 | LR__0880
0a804                 | _csave_block_ret
0a804     2D 00 64 FD | 	ret
0a808                 | 
0a808                 | ' 
0a808                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0a808                 | _csave_addtoblock
0a808     04 4A 05 F6 | 	mov	COUNT_, #4
0a80c     A8 00 A0 FD | 	call	#pushregs_
0a810     09 1F 02 F6 | 	mov	local01, arg01
0a814                 | ' 
0a814                 | ' 
0a814                 | ' if force=0 then
0a814     07 14 4E F7 | 	zerox	arg02, #7 wz
0a818     78 00 90 5D |  if_ne	jmp	#LR__0890
0a81c     79 00 00 FF 
0a820     90 E5 05 F1 | 	add	objptr, ##62352
0a824     F2 14 02 FB | 	rdlong	arg02, objptr
0a828     02 00 00 FF 
0a82c     00 E4 85 F1 | 	sub	objptr, ##1024
0a830     F2 14 02 F1 | 	add	arg02, objptr
0a834     0A 1F 42 FC | 	wrbyte	local01, arg02
0a838     02 00 00 FF 
0a83c     00 E4 05 F1 | 	add	objptr, ##1024
0a840     F2 1E 02 FB | 	rdlong	local01, objptr
0a844     01 1E 06 F1 | 	add	local01, #1
0a848     F2 1E 62 FC | 	wrlong	local01, objptr
0a84c                 | '   block(blockptr)=d
0a84c                 | '   blockptr+=1
0a84c                 | '   if blockptr>=255 then
0a84c     79 00 00 FF 
0a850     90 E5 85 F1 | 	sub	objptr, ##62352
0a854     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a858     E4 00 90 CD |  if_b	jmp	#LR__0894
0a85c     77 00 00 FF 
0a860     90 E5 05 F1 | 	add	objptr, ##61328
0a864     F2 12 02 F6 | 	mov	arg01, objptr
0a868     77 00 00 FF 
0a86c     90 E5 85 F1 | 	sub	objptr, ##61328
0a870     B0 FB BF FD | 	call	#_csave_block
0a874     79 00 00 FF 
0a878     90 E5 05 F1 | 	add	objptr, ##62352
0a87c     F2 00 68 FC | 	wrlong	#0, objptr
0a880     79 00 00 FF 
0a884     90 E5 85 F1 | 	sub	objptr, ##62352
0a888     2C 13 06 F6 | 	mov	arg01, #300
0a88c     B0 1E B1 FD | 	call	#__system___waitms
0a890     AC 00 90 FD | 	jmp	#LR__0894
0a894                 | LR__0890
0a894     79 00 00 FF 
0a898     90 E5 05 F1 | 	add	objptr, ##62352
0a89c     F2 20 02 FB | 	rdlong	local02, objptr
0a8a0     02 00 00 FF 
0a8a4     00 E4 85 F1 | 	sub	objptr, ##1024
0a8a8     F2 20 02 F1 | 	add	local02, objptr
0a8ac     10 1F 42 FC | 	wrbyte	local01, local02
0a8b0                 | '   block(blockptr)=d
0a8b0                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a8b0     02 00 00 FF 
0a8b4     00 E4 05 F1 | 	add	objptr, ##1024
0a8b8     F2 22 02 FB | 	rdlong	local03, objptr
0a8bc     79 00 00 FF 
0a8c0     90 E5 85 F1 | 	sub	objptr, ##62352
0a8c4     FF 22 16 F2 | 	cmp	local03, #255 wc
0a8c8     40 00 90 3D |  if_ae	jmp	#LR__0893
0a8cc     79 00 00 FF 
0a8d0     90 E5 05 F1 | 	add	objptr, ##62352
0a8d4     F2 24 02 FB | 	rdlong	local04, objptr
0a8d8     79 00 00 FF 
0a8dc     90 E5 85 F1 | 	sub	objptr, ##62352
0a8e0                 | LR__0891
0a8e0     00 25 56 F2 | 	cmps	local04, #256 wc
0a8e4     24 00 90 3D |  if_ae	jmp	#LR__0892
0a8e8     12 21 02 F6 | 	mov	local02, local04
0a8ec     77 00 00 FF 
0a8f0     90 E5 05 F1 | 	add	objptr, ##61328
0a8f4     F2 20 02 F1 | 	add	local02, objptr
0a8f8     10 01 48 FC | 	wrbyte	#0, local02
0a8fc     01 24 06 F1 | 	add	local04, #1
0a900     77 00 00 FF 
0a904     90 E5 85 F1 | 	sub	objptr, ##61328
0a908     D4 FF 9F FD | 	jmp	#LR__0891
0a90c                 | LR__0892
0a90c                 | LR__0893
0a90c     77 00 00 FF 
0a910     90 E5 05 F1 | 	add	objptr, ##61328
0a914     F2 12 02 F6 | 	mov	arg01, objptr
0a918     77 00 00 FF 
0a91c     90 E5 85 F1 | 	sub	objptr, ##61328
0a920     00 FB BF FD | 	call	#_csave_block
0a924     79 00 00 FF 
0a928     90 E5 05 F1 | 	add	objptr, ##62352
0a92c     F2 00 68 FC | 	wrlong	#0, objptr
0a930     79 00 00 FF 
0a934     90 E5 85 F1 | 	sub	objptr, ##62352
0a938     2C 13 06 F6 | 	mov	arg01, #300
0a93c     00 1E B1 FD | 	call	#__system___waitms
0a940                 | LR__0894
0a940     A7 F0 03 F6 | 	mov	ptra, fp
0a944     B2 00 A0 FD | 	call	#popregs_
0a948                 | _csave_addtoblock_ret
0a948     2D 00 64 FD | 	ret
0a94c                 | 
0a94c                 | ' 
0a94c                 | ' sub test_csave
0a94c                 | _test_csave
0a94c     04 4A 05 F6 | 	mov	COUNT_, #4
0a950     A8 00 A0 FD | 	call	#pushregs_
0a954     C0 F0 07 F1 | 	add	ptra, #192
0a958                 | ' 'dim fileheader,savestart, saveptr as ulong
0a958                 | ' 
0a958                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a958     6A 00 00 FF 
0a95c     68 E4 05 F1 | 	add	objptr, ##54376
0a960     F2 12 02 FB | 	rdlong	arg01, objptr
0a964     6A 00 00 FF 
0a968     68 E4 85 F1 | 	sub	objptr, ##54376
0a96c     88 E5 B0 FD | 	call	#_pslpeek
0a970     FF FF 7F FF 
0a974     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a978     0C 00 90 5D |  if_ne	jmp	#LR__0900
0a97c     1B 12 06 F6 | 	mov	arg01, #27
0a980     E0 E2 B0 FD | 	call	#_printerror
0a984     0C 03 90 FD | 	jmp	#LR__0912
0a988                 | LR__0900
0a988     04 F8 BF FD | 	call	#_pop
0a98c     FF 1E 02 F6 | 	mov	local01, result3
0a990     90 4E 05 F1 | 	add	fp, #144
0a994     A7 FA 61 FC | 	wrlong	result1, fp
0a998     04 4E 05 F1 | 	add	fp, #4
0a99c     A7 FC 61 FC | 	wrlong	result2, fp
0a9a0     04 4E 05 F1 | 	add	fp, #4
0a9a4     A7 1E 62 FC | 	wrlong	local01, fp
0a9a8                 | ' t1=pop()
0a9a8                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a9a8     98 4E 85 F1 | 	sub	fp, #152
0a9ac     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a9b0     5F 01 00 5F 
0a9b4     BA 1F 06 56 |  if_ne	mov	local01, ##@LR__4908
0a9b8     8C 4E 05 51 |  if_ne	add	fp, #140
0a9bc     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a9c0     8C 4E 85 51 |  if_ne	sub	fp, #140
0a9c4     90 4E 05 A1 |  if_e	add	fp, #144
0a9c8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a9cc     04 4E 85 A1 |  if_e	sub	fp, #4
0a9d0     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a9d4     8C 4E 85 A1 |  if_e	sub	fp, #140
0a9d8                 | ' 
0a9d8                 | ' ' prepare 1 kHz header wave
0a9d8                 | ' 
0a9d8                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a9d8     A7 00 68 FC | 	wrlong	#0, fp
0a9dc     97 34 48 FB | 	callpa	#(@LR__0904-@LR__0901)>>2,fcache_load_ptr_
0a9e0                 | LR__0901
0a9e0     A7 1E 02 FB | 	rdlong	local01, fp
0a9e4     0F 1F 52 F6 | 	abs	local01, local01 wc
0a9e8     07 1E 06 F5 | 	and	local01, #7
0a9ec     0F 1F 82 F6 | 	negc	local01, local01
0a9f0     04 1E 56 F2 | 	cmps	local01, #4 wc
0a9f4     20 00 90 3D |  if_ae	jmp	#LR__0902
0a9f8     A7 1E 02 FB | 	rdlong	local01, fp
0a9fc     77 00 00 FF 
0aa00     90 E4 05 F1 | 	add	objptr, ##61072
0aa04     F2 1E 02 F1 | 	add	local01, objptr
0aa08     0F FF 48 FC | 	wrbyte	#127, local01
0aa0c     77 00 00 FF 
0aa10     90 E4 85 F1 | 	sub	objptr, ##61072
0aa14     1C 00 90 FD | 	jmp	#LR__0903
0aa18                 | LR__0902
0aa18     A7 1E 02 FB | 	rdlong	local01, fp
0aa1c     77 00 00 FF 
0aa20     90 E4 05 F1 | 	add	objptr, ##61072
0aa24     F2 1E 02 F1 | 	add	local01, objptr
0aa28     0F 01 49 FC | 	wrbyte	#128, local01
0aa2c     77 00 00 FF 
0aa30     90 E4 85 F1 | 	sub	objptr, ##61072
0aa34                 | LR__0903
0aa34     A7 1E 02 FB | 	rdlong	local01, fp
0aa38     01 1E 06 F1 | 	add	local01, #1
0aa3c     A7 1E 62 FC | 	wrlong	local01, fp
0aa40     00 1F 56 F2 | 	cmps	local01, #256 wc
0aa44     98 FF 9F CD |  if_b	jmp	#LR__0901
0aa48                 | LR__0904
0aa48     77 00 00 FF 
0aa4c     90 E4 05 F1 | 	add	objptr, ##61072
0aa50     F2 14 02 F6 | 	mov	arg02, objptr
0aa54     07 12 06 F6 | 	mov	arg01, #7
0aa58     0F 00 00 FF 
0aa5c     40 17 06 F6 | 	mov	arg03, ##8000
0aa60     0E 18 C6 F9 | 	decod	arg04, #14
0aa64     00 1B 06 F6 | 	mov	arg05, #256
0aa68     00 1C 06 F6 | 	mov	arg06, #0
0aa6c     6B 00 00 FF 
0aa70     D0 E5 85 F1 | 	sub	objptr, ##55248
0aa74     20 16 B1 FD | 	call	#_audio096_spin2_play8
0aa78     0B 00 00 FF 
0aa7c     C0 E4 85 F1 | 	sub	objptr, ##5824
0aa80     05 00 00 FF 
0aa84     B8 13 06 F6 | 	mov	arg01, ##3000
0aa88     B4 1C B1 FD | 	call	#__system___waitms
0aa8c     79 00 00 FF 
0aa90     90 E5 05 F1 | 	add	objptr, ##62352
0aa94     F2 00 68 FC | 	wrlong	#0, objptr
0aa98     79 00 00 FF 
0aa9c     90 E5 85 F1 | 	sub	objptr, ##62352
0aaa0     72 12 06 F6 | 	mov	arg01, #114
0aaa4     00 14 06 F6 | 	mov	arg02, #0
0aaa8     5C FD BF FD | 	call	#_csave_addtoblock
0aaac     62 12 06 F6 | 	mov	arg01, #98
0aab0     00 14 06 F6 | 	mov	arg02, #0
0aab4     50 FD BF FD | 	call	#_csave_addtoblock
0aab8     61 12 06 F6 | 	mov	arg01, #97
0aabc     00 14 06 F6 | 	mov	arg02, #0
0aac0     44 FD BF FD | 	call	#_csave_addtoblock
0aac4     0D 12 06 F6 | 	mov	arg01, #13
0aac8     00 14 06 F6 | 	mov	arg02, #0
0aacc     38 FD BF FD | 	call	#_csave_addtoblock
0aad0                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0aad0                 | ' waitms 3000 
0aad0                 | ' 
0aad0                 | ' blockptr=0
0aad0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0aad0                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0aad0     A7 02 68 FC | 	wrlong	#1, fp
0aad4     8C 4E 05 F1 | 	add	fp, #140
0aad8     A7 12 02 FB | 	rdlong	arg01, fp
0aadc     8C 4E 85 F1 | 	sub	fp, #140
0aae0     09 21 02 F6 | 	mov	local02, arg01
0aae4     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0aae8                 | LR__0905
0aae8     10 FB C9 FA | 	rdbyte	result1, local02 wz
0aaec     01 20 06 51 |  if_ne	add	local02, #1
0aaf0     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0aaf4                 | LR__0906
0aaf4     09 21 82 F1 | 	sub	local02, arg01
0aaf8     10 23 02 F6 | 	mov	local03, local02
0aafc     01 22 06 F1 | 	add	local03, #1
0ab00                 | LR__0907
0ab00     A7 1E 02 FB | 	rdlong	local01, fp
0ab04     11 1F 52 F2 | 	cmps	local01, local03 wc
0ab08     34 00 90 3D |  if_ae	jmp	#LR__0908
0ab0c     8C 4E 05 F1 | 	add	fp, #140
0ab10     A7 12 02 FB | 	rdlong	arg01, fp
0ab14     8C 4E 85 F1 | 	sub	fp, #140
0ab18     A7 14 02 FB | 	rdlong	arg02, fp
0ab1c     01 16 06 F6 | 	mov	arg03, #1
0ab20     84 3A B1 FD | 	call	#__system__Mid_S
0ab24     FD 12 C2 FA | 	rdbyte	arg01, result1
0ab28     00 14 06 F6 | 	mov	arg02, #0
0ab2c     D8 FC BF FD | 	call	#_csave_addtoblock
0ab30     A7 1E 02 FB | 	rdlong	local01, fp
0ab34     01 1E 06 F1 | 	add	local01, #1
0ab38     A7 1E 62 FC | 	wrlong	local01, fp
0ab3c     C0 FF 9F FD | 	jmp	#LR__0907
0ab40                 | LR__0908
0ab40     00 12 06 F6 | 	mov	arg01, #0
0ab44     00 14 06 F6 | 	mov	arg02, #0
0ab48     BC FC BF FD | 	call	#_csave_addtoblock
0ab4c     72 12 06 F6 | 	mov	arg01, #114
0ab50     00 14 06 F6 | 	mov	arg02, #0
0ab54     B0 FC BF FD | 	call	#_csave_addtoblock
0ab58     62 12 06 F6 | 	mov	arg01, #98
0ab5c     00 14 06 F6 | 	mov	arg02, #0
0ab60     A4 FC BF FD | 	call	#_csave_addtoblock
0ab64     73 12 06 F6 | 	mov	arg01, #115
0ab68     00 14 06 F6 | 	mov	arg02, #0
0ab6c     98 FC BF FD | 	call	#_csave_addtoblock
0ab70     0D 12 06 F6 | 	mov	arg01, #13
0ab74     00 14 06 F6 | 	mov	arg02, #0
0ab78     8C FC BF FD | 	call	#_csave_addtoblock
0ab7c     6A 00 00 FF 
0ab80     68 E4 05 F1 | 	add	objptr, ##54376
0ab84     F2 1E 02 FB | 	rdlong	local01, objptr
0ab88     6A 00 00 FF 
0ab8c     68 E4 85 F1 | 	sub	objptr, ##54376
0ab90     9C 4E 05 F1 | 	add	fp, #156
0ab94     A7 1E 62 FC | 	wrlong	local01, fp
0ab98     9C 4E 85 F1 | 	sub	fp, #156
0ab9c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0ab9c                 | ' 
0ab9c                 | ' saveptr=programstart
0ab9c                 | ' do
0ab9c                 | LR__0909
0ab9c     A0 4E 05 F1 | 	add	fp, #160
0aba0     A7 12 02 F6 | 	mov	arg01, fp
0aba4     04 4E 85 F1 | 	sub	fp, #4
0aba8     A7 14 02 FB | 	rdlong	arg02, fp
0abac     9C 4E 85 F1 | 	sub	fp, #156
0abb0     18 16 06 F6 | 	mov	arg03, #24
0abb4     0B 00 00 FF 
0abb8     C0 E4 05 F1 | 	add	objptr, ##5824
0abbc     88 0C B1 FD | 	call	#_psram_spin2_read1
0abc0     0C 4E 05 F1 | 	add	fp, #12
0abc4     A7 12 02 F6 | 	mov	arg01, fp
0abc8     9C 4E 05 F1 | 	add	fp, #156
0abcc     A7 14 02 FB | 	rdlong	arg02, fp
0abd0     04 4E 05 F1 | 	add	fp, #4
0abd4     A7 16 02 FB | 	rdlong	arg03, fp
0abd8     AC 4E 85 F1 | 	sub	fp, #172
0abdc     68 0C B1 FD | 	call	#_psram_spin2_read1
0abe0     0B 00 00 FF 
0abe4     C0 E4 85 F1 | 	sub	objptr, ##5824
0abe8     AC 4E 05 F1 | 	add	fp, #172
0abec     A7 12 02 FB | 	rdlong	arg01, fp
0abf0     AC 4E 85 F1 | 	sub	fp, #172
0abf4     00 14 06 F6 | 	mov	arg02, #0
0abf8     0C FC BF FD | 	call	#_csave_addtoblock
0abfc                 | '   psram.read1(varptr(header(0)),saveptr,24)
0abfc                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0abfc                 | '   csave_addtoblock(header(3),0) ' that's always <255
0abfc                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0abfc     A7 00 68 FC | 	wrlong	#0, fp
0ac00     AC 4E 05 F1 | 	add	fp, #172
0ac04     A7 24 02 FB | 	rdlong	local04, fp
0ac08     AC 4E 85 F1 | 	sub	fp, #172
0ac0c                 | LR__0910
0ac0c     A7 1E 02 FB | 	rdlong	local01, fp
0ac10     12 1F 52 F2 | 	cmps	local01, local04 wc
0ac14     2C 00 90 3D |  if_ae	jmp	#LR__0911
0ac18     A7 22 02 FB | 	rdlong	local03, fp
0ac1c     0C 4E 05 F1 | 	add	fp, #12
0ac20     A7 22 02 F1 | 	add	local03, fp
0ac24     11 13 C2 FA | 	rdbyte	arg01, local03
0ac28     00 14 06 F6 | 	mov	arg02, #0
0ac2c     0C 4E 85 F1 | 	sub	fp, #12
0ac30     D4 FB BF FD | 	call	#_csave_addtoblock
0ac34     A7 22 02 FB | 	rdlong	local03, fp
0ac38     01 22 06 F1 | 	add	local03, #1
0ac3c     A7 22 62 FC | 	wrlong	local03, fp
0ac40     C8 FF 9F FD | 	jmp	#LR__0910
0ac44                 | LR__0911
0ac44     B4 4E 05 F1 | 	add	fp, #180
0ac48     A7 1E 02 FB | 	rdlong	local01, fp
0ac4c     18 4E 85 F1 | 	sub	fp, #24
0ac50     A7 1E 62 FC | 	wrlong	local01, fp
0ac54     18 4E 05 F1 | 	add	fp, #24
0ac58     A7 1E 02 FB | 	rdlong	local01, fp
0ac5c     B4 4E 85 F1 | 	sub	fp, #180
0ac60     FF FF 3F FF 
0ac64     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ac68     30 FF 9F 5D |  if_ne	jmp	#LR__0909
0ac6c     00 12 06 F6 | 	mov	arg01, #0
0ac70     01 14 06 F6 | 	mov	arg02, #1
0ac74     90 FB BF FD | 	call	#_csave_addtoblock
0ac78     56 00 00 FF 
0ac7c     F4 E5 05 F1 | 	add	objptr, ##44532
0ac80     F2 12 02 FB | 	rdlong	arg01, objptr
0ac84     56 00 00 FF 
0ac88     F4 E5 85 F1 | 	sub	objptr, ##44532
0ac8c     F4 12 06 F1 | 	add	arg01, #244
0ac90     09 01 58 FC | 	wrword	#0, arg01
0ac94                 | LR__0912
0ac94     A7 F0 03 F6 | 	mov	ptra, fp
0ac98     B2 00 A0 FD | 	call	#popregs_
0ac9c                 | _test_csave_ret
0ac9c     2D 00 64 FD | 	ret
0aca0                 | 
0aca0                 | ' 
0aca0                 | ' ' ----------------- Save the program
0aca0                 | ' 
0aca0                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0aca0                 | _do_save
0aca0     02 4A 05 F6 | 	mov	COUNT_, #2
0aca4     A8 00 A0 FD | 	call	#pushregs_
0aca8     01 00 00 FF 
0acac     BC F0 07 F1 | 	add	ptra, ##700
0acb0     01 00 00 FF 
0acb4     10 4E 05 F1 | 	add	fp, ##528
0acb8     B1 B0 86 FF 
0acbc     A7 E4 68 FC | 	wrlong	##224486002, fp
0acc0     01 00 00 FF 
0acc4     10 4E 85 F1 | 	sub	fp, ##528
0acc8     C4 F4 BF FD | 	call	#_pop
0accc     FF 16 02 F6 | 	mov	arg03, result3
0acd0     A7 FA 61 FC | 	wrlong	result1, fp
0acd4     04 4E 05 F1 | 	add	fp, #4
0acd8     A7 FC 61 FC | 	wrlong	result2, fp
0acdc     04 4E 05 F1 | 	add	fp, #4
0ace0     A7 16 62 FC | 	wrlong	arg03, fp
0ace4     08 4E 85 F1 | 	sub	fp, #8
0ace8                 | ' 
0ace8                 | ' fileheader=$0D616272' rba+ver'
0ace8                 | ' 
0ace8                 | ' t1=pop() 
0ace8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0ace8     6A 00 00 FF 
0acec     68 E4 05 F1 | 	add	objptr, ##54376
0acf0     F2 12 02 FB | 	rdlong	arg01, objptr
0acf4     6A 00 00 FF 
0acf8     68 E4 85 F1 | 	sub	objptr, ##54376
0acfc     F8 E1 B0 FD | 	call	#_pslpeek
0ad00     FF FF 7F FF 
0ad04     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0ad08     0C 00 90 5D |  if_ne	jmp	#LR__0920
0ad0c     1B 12 06 F6 | 	mov	arg01, #27
0ad10     50 DF B0 FD | 	call	#_printerror
0ad14     68 02 90 FD | 	jmp	#LR__0926
0ad18                 | LR__0920
0ad18                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0ad18     08 4E 05 F1 | 	add	fp, #8
0ad1c     A7 16 02 FB | 	rdlong	arg03, fp
0ad20     08 4E 85 F1 | 	sub	fp, #8
0ad24     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ad28     18 00 90 5D |  if_ne	jmp	#LR__0921
0ad2c     A7 12 02 FB | 	rdlong	arg01, fp
0ad30     A4 33 B0 FD | 	call	#_convertstring
0ad34     A7 FA 61 FC | 	wrlong	result1, fp
0ad38     08 4E 05 F1 | 	add	fp, #8
0ad3c     A7 3E 68 FC | 	wrlong	#31, fp
0ad40     08 4E 85 F1 | 	sub	fp, #8
0ad44                 | LR__0921
0ad44                 | ' if t1.result_type=result_string then
0ad44     08 4E 05 F1 | 	add	fp, #8
0ad48     A7 1E 02 FB | 	rdlong	local01, fp
0ad4c     08 4E 85 F1 | 	sub	fp, #8
0ad50     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ad54     28 02 90 5D |  if_ne	jmp	#LR__0925
0ad58                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0ad58     A7 12 02 FB | 	rdlong	arg01, fp
0ad5c     5F 01 00 FF 
0ad60     C5 15 06 F6 | 	mov	arg02, ##@LR__4909
0ad64     0C 17 B1 FD | 	call	#__system___string_cmp
0ad68     00 FA 0D F2 | 	cmp	result1, #0 wz
0ad6c     5F 01 00 AF 
0ad70     C6 1F 06 A6 |  if_e	mov	local01, ##@LR__4910
0ad74     A7 1E 62 AC |  if_e	wrlong	local01, fp
0ad78                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0ad78     09 12 06 F6 | 	mov	arg01, #9
0ad7c     90 66 B1 FD | 	call	#__system__close
0ad80     09 1E 06 F6 | 	mov	local01, #9
0ad84     72 00 00 FF 
0ad88     78 E4 05 F1 | 	add	objptr, ##58488
0ad8c     F2 12 02 FB | 	rdlong	arg01, objptr
0ad90     72 00 00 FF 
0ad94     78 E4 85 F1 | 	sub	objptr, ##58488
0ad98     5F 01 00 FF 
0ad9c     D1 15 06 F6 | 	mov	arg02, ##@LR__4911
0ada0     04 17 B1 FD | 	call	#__system___string_concat
0ada4     FD 12 02 F6 | 	mov	arg01, result1
0ada8     A7 14 02 FB | 	rdlong	arg02, fp
0adac     F8 16 B1 FD | 	call	#__system___string_concat
0adb0     FD 14 02 F6 | 	mov	arg02, result1
0adb4     0F 13 02 F6 | 	mov	arg01, local01
0adb8     0D 16 06 F6 | 	mov	arg03, #13
0adbc     8C 22 B1 FD | 	call	#__system___basic_open_string
0adc0     01 00 00 FF 
0adc4     0C 4E 05 F1 | 	add	fp, ##524
0adc8     A7 0A 68 FC | 	wrlong	#5, fp
0adcc     6A 00 00 FF 
0add0     68 E4 05 F1 | 	add	objptr, ##54376
0add4     F2 1E 02 FB | 	rdlong	local01, objptr
0add8     6A 00 00 FF 
0addc     68 E4 85 F1 | 	sub	objptr, ##54376
0ade0     0C 4E 05 F1 | 	add	fp, #12
0ade4     A7 1E 62 FC | 	wrlong	local01, fp
0ade8     01 00 00 FF 
0adec     18 4E 85 F1 | 	sub	fp, ##536
0adf0                 | ' '  put #9,1,fileheader,1
0adf0                 | '   i=5
0adf0                 | '   saveptr=programstart
0adf0                 | '   do
0adf0                 | LR__0922
0adf0     01 00 00 FF 
0adf4     1C 4E 05 F1 | 	add	fp, ##540
0adf8     A7 12 02 F6 | 	mov	arg01, fp
0adfc     04 4E 85 F1 | 	sub	fp, #4
0ae00     A7 14 02 FB | 	rdlong	arg02, fp
0ae04     01 00 00 FF 
0ae08     18 4E 85 F1 | 	sub	fp, ##536
0ae0c     18 16 06 F6 | 	mov	arg03, #24
0ae10     0B 00 00 FF 
0ae14     C0 E4 05 F1 | 	add	objptr, ##5824
0ae18     2C 0A B1 FD | 	call	#_psram_spin2_read1
0ae1c     01 00 00 FF 
0ae20     34 4E 05 F1 | 	add	fp, ##564
0ae24     A7 12 02 F6 | 	mov	arg01, fp
0ae28     10 4E 85 F1 | 	sub	fp, #16
0ae2c     A7 14 02 FB | 	rdlong	arg02, fp
0ae30     04 4E 05 F1 | 	add	fp, #4
0ae34     A7 16 02 FB | 	rdlong	arg03, fp
0ae38     01 00 00 FF 
0ae3c     28 4E 85 F1 | 	sub	fp, ##552
0ae40     04 0A B1 FD | 	call	#_psram_spin2_read1
0ae44     0B 00 00 FF 
0ae48     C0 E4 85 F1 | 	sub	objptr, ##5824
0ae4c     5F 01 00 FF 
0ae50     D3 1F 06 F6 | 	mov	local01, ##@LR__4912
0ae54     01 00 00 FF 
0ae58     B4 4E 05 F1 | 	add	fp, ##692
0ae5c     A7 1E 62 FC | 	wrlong	local01, fp
0ae60                 | '     psram.read1(varptr(header(0)),saveptr,24)
0ae60                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0ae60                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0ae60     A8 4E 85 F1 | 	sub	fp, #168
0ae64     A7 02 68 FC | 	wrlong	#1, fp
0ae68     1C 4E 05 F1 | 	add	fp, #28
0ae6c     A7 20 02 FB | 	rdlong	local02, fp
0ae70     01 00 00 FF 
0ae74     28 4E 85 F1 | 	sub	fp, ##552
0ae78     01 20 06 F1 | 	add	local02, #1
0ae7c                 | LR__0923
0ae7c     01 00 00 FF 
0ae80     0C 4E 05 F1 | 	add	fp, ##524
0ae84     A7 1E 02 FB | 	rdlong	local01, fp
0ae88     01 00 00 FF 
0ae8c     0C 4E 85 F1 | 	sub	fp, ##524
0ae90     10 1F 52 F2 | 	cmps	local01, local02 wc
0ae94     64 00 90 3D |  if_ae	jmp	#LR__0924
0ae98     01 00 00 FF 
0ae9c     B4 4E 05 F1 | 	add	fp, ##692
0aea0     A7 1E 02 FB | 	rdlong	local01, fp
0aea4     A8 4E 85 F1 | 	sub	fp, #168
0aea8     A7 16 02 FB | 	rdlong	arg03, fp
0aeac     01 16 86 F1 | 	sub	arg03, #1
0aeb0     28 4E 05 F1 | 	add	fp, #40
0aeb4     A7 16 02 F1 | 	add	arg03, fp
0aeb8     0B 13 C2 FA | 	rdbyte	arg01, arg03
0aebc     01 00 00 FF 
0aec0     34 4E 85 F1 | 	sub	fp, ##564
0aec4     8C 37 B1 FD | 	call	#__system__Chr_S
0aec8     FD 14 02 F6 | 	mov	arg02, result1
0aecc     0F 13 02 F6 | 	mov	arg01, local01
0aed0     D4 15 B1 FD | 	call	#__system___string_concat
0aed4     01 00 00 FF 
0aed8     B4 4E 05 F1 | 	add	fp, ##692
0aedc     A7 FA 61 FC | 	wrlong	result1, fp
0aee0     A8 4E 85 F1 | 	sub	fp, #168
0aee4     A7 1E 02 FB | 	rdlong	local01, fp
0aee8     01 1E 06 F1 | 	add	local01, #1
0aeec     A7 1E 62 FC | 	wrlong	local01, fp
0aef0     01 00 00 FF 
0aef4     0C 4E 85 F1 | 	sub	fp, ##524
0aef8     80 FF 9F FD | 	jmp	#LR__0923
0aefc                 | LR__0924
0aefc                 | '  '   put #9,i,header(3),1 : i+=4
0aefc                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0aefc                 | '      print #9, saveline$
0aefc     09 12 06 F6 | 	mov	arg01, #9
0af00     D8 6E B1 FD | 	call	#__system___getiolock_0474
0af04     FD 12 02 F6 | 	mov	arg01, result1
0af08     40 15 B1 FD | 	call	#__system___lockmem
0af0c     01 00 00 FF 
0af10     B4 4E 05 F1 | 	add	fp, ##692
0af14     A7 14 02 FB | 	rdlong	arg02, fp
0af18     01 00 00 FF 
0af1c     B4 4E 85 F1 | 	sub	fp, ##692
0af20     09 12 06 F6 | 	mov	arg01, #9
0af24     00 16 06 F6 | 	mov	arg03, #0
0af28     24 22 B1 FD | 	call	#__system___basic_print_string
0af2c     09 12 06 F6 | 	mov	arg01, #9
0af30     0A 14 06 F6 | 	mov	arg02, #10
0af34     00 16 06 F6 | 	mov	arg03, #0
0af38     BC 21 B1 FD | 	call	#__system___basic_print_char
0af3c     09 12 06 F6 | 	mov	arg01, #9
0af40     98 6E B1 FD | 	call	#__system___getiolock_0474
0af44     FD 00 68 FC | 	wrlong	#0, result1
0af48     01 00 00 FF 
0af4c     30 4E 05 F1 | 	add	fp, ##560
0af50     A7 1E 02 FB | 	rdlong	local01, fp
0af54     18 4E 85 F1 | 	sub	fp, #24
0af58     A7 1E 62 FC | 	wrlong	local01, fp
0af5c     18 4E 05 F1 | 	add	fp, #24
0af60     A7 1E 02 FB | 	rdlong	local01, fp
0af64     01 00 00 FF 
0af68     30 4E 85 F1 | 	sub	fp, ##560
0af6c     FF FF 3F FF 
0af70     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0af74     78 FE 9F 5D |  if_ne	jmp	#LR__0922
0af78                 | '   close #9  
0af78     09 12 06 F6 | 	mov	arg01, #9
0af7c     90 64 B1 FD | 	call	#__system__close
0af80                 | LR__0925
0af80                 | LR__0926
0af80     A7 F0 03 F6 | 	mov	ptra, fp
0af84     B2 00 A0 FD | 	call	#popregs_
0af88                 | _do_save_ret
0af88     2D 00 64 FD | 	ret
0af8c                 | 
0af8c                 | ' 
0af8c                 | ' '----------------- Load the program
0af8c                 | ' 'lo todo: errors while loading
0af8c                 | ' sub do_load
0af8c                 | _do_load
0af8c     01 4A 05 F6 | 	mov	COUNT_, #1
0af90     A8 00 A0 FD | 	call	#pushregs_
0af94     A4 F0 07 F1 | 	add	ptra, #164
0af98     A0 4E 05 F1 | 	add	fp, #160
0af9c     A7 12 02 F6 | 	mov	arg01, fp
0afa0     80 4E 85 F1 | 	sub	fp, #128
0afa4     A7 14 02 F6 | 	mov	arg02, fp
0afa8     20 4E 85 F1 | 	sub	fp, #32
0afac     09 15 62 FC | 	wrlong	arg02, arg01
0afb0     DC F1 BF FD | 	call	#_pop
0afb4     FF 1A 02 F6 | 	mov	arg05, result3
0afb8     A7 FA 61 FC | 	wrlong	result1, fp
0afbc     04 4E 05 F1 | 	add	fp, #4
0afc0     A7 FC 61 FC | 	wrlong	result2, fp
0afc4     04 4E 05 F1 | 	add	fp, #4
0afc8     A7 1A 62 FC | 	wrlong	arg05, fp
0afcc                 | ' 
0afcc                 | ' lpoke varptr(line2$),varptr(line2)
0afcc                 | ' t1=pop() 
0afcc                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0afcc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0afcc     08 4E 85 F1 | 	sub	fp, #8
0afd0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0afd4     18 00 90 5D |  if_ne	jmp	#LR__0930
0afd8     A7 12 02 FB | 	rdlong	arg01, fp
0afdc     F8 30 B0 FD | 	call	#_convertstring
0afe0     A7 FA 61 FC | 	wrlong	result1, fp
0afe4     08 4E 05 F1 | 	add	fp, #8
0afe8     A7 3E 68 FC | 	wrlong	#31, fp
0afec     08 4E 85 F1 | 	sub	fp, #8
0aff0                 | LR__0930
0aff0                 | ' if t1.result_type=result_string then
0aff0     08 4E 05 F1 | 	add	fp, #8
0aff4     A7 1E 02 FB | 	rdlong	local01, fp
0aff8     08 4E 85 F1 | 	sub	fp, #8
0affc     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b000     40 03 90 5D |  if_ne	jmp	#LR__0937
0b004     48 2B B0 FD | 	call	#_do_new
0b008                 | '   do_new
0b008                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0b008     A7 12 02 FB | 	rdlong	arg01, fp
0b00c     5F 01 00 FF 
0b010     D4 15 06 F6 | 	mov	arg02, ##@LR__4913
0b014     5C 14 B1 FD | 	call	#__system___string_cmp
0b018     00 FA 0D F2 | 	cmp	result1, #0 wz
0b01c     5F 01 00 AF 
0b020     D5 1F 06 A6 |  if_e	mov	local01, ##@LR__4914
0b024     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b028                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b028     09 12 06 F6 | 	mov	arg01, #9
0b02c     E0 63 B1 FD | 	call	#__system__close
0b030     09 1E 06 F6 | 	mov	local01, #9
0b034     72 00 00 FF 
0b038     78 E4 05 F1 | 	add	objptr, ##58488
0b03c     F2 12 02 FB | 	rdlong	arg01, objptr
0b040     72 00 00 FF 
0b044     78 E4 85 F1 | 	sub	objptr, ##58488
0b048     5F 01 00 FF 
0b04c     E0 15 06 F6 | 	mov	arg02, ##@LR__4915
0b050     54 14 B1 FD | 	call	#__system___string_concat
0b054     FD 12 02 F6 | 	mov	arg01, result1
0b058     A7 14 02 FB | 	rdlong	arg02, fp
0b05c     48 14 B1 FD | 	call	#__system___string_concat
0b060     FD 14 02 F6 | 	mov	arg02, result1
0b064     0F 13 02 F6 | 	mov	arg01, local01
0b068     00 16 06 F6 | 	mov	arg03, #0
0b06c     DC 1F B1 FD | 	call	#__system___basic_open_string
0b070     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b074     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b078     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b07c     10 4E 05 F1 | 	add	fp, #16
0b080     A7 FA 61 FC | 	wrlong	result1, fp
0b084                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0b084     10 4E 85 F1 | 	sub	fp, #16
0b088     9C 00 90 AD |  if_e	jmp	#LR__0931
0b08c     00 12 06 F6 | 	mov	arg01, #0
0b090     48 6D B1 FD | 	call	#__system___getiolock_0474
0b094     FD 12 02 F6 | 	mov	arg01, result1
0b098     B0 13 B1 FD | 	call	#__system___lockmem
0b09c     5F 01 00 FF 
0b0a0     E2 15 06 F6 | 	mov	arg02, ##@LR__4916
0b0a4     00 12 06 F6 | 	mov	arg01, #0
0b0a8     00 16 06 F6 | 	mov	arg03, #0
0b0ac     A0 20 B1 FD | 	call	#__system___basic_print_string
0b0b0     10 4E 05 F1 | 	add	fp, #16
0b0b4     A7 14 02 FB | 	rdlong	arg02, fp
0b0b8     10 4E 85 F1 | 	sub	fp, #16
0b0bc     00 12 06 F6 | 	mov	arg01, #0
0b0c0     00 16 06 F6 | 	mov	arg03, #0
0b0c4     0A 18 06 F6 | 	mov	arg04, #10
0b0c8     C8 20 B1 FD | 	call	#__system___basic_print_integer
0b0cc     5F 01 00 FF 
0b0d0     F0 15 06 F6 | 	mov	arg02, ##@LR__4917
0b0d4     00 12 06 F6 | 	mov	arg01, #0
0b0d8     00 16 06 F6 | 	mov	arg03, #0
0b0dc     70 20 B1 FD | 	call	#__system___basic_print_string
0b0e0     10 4E 05 F1 | 	add	fp, #16
0b0e4     A7 12 02 FB | 	rdlong	arg01, fp
0b0e8     10 4E 85 F1 | 	sub	fp, #16
0b0ec     EC 39 B1 FD | 	call	#__system___strerror
0b0f0     FD 14 02 F6 | 	mov	arg02, result1
0b0f4     00 12 06 F6 | 	mov	arg01, #0
0b0f8     00 16 06 F6 | 	mov	arg03, #0
0b0fc     50 20 B1 FD | 	call	#__system___basic_print_string
0b100     00 12 06 F6 | 	mov	arg01, #0
0b104     0A 14 06 F6 | 	mov	arg02, #10
0b108     00 16 06 F6 | 	mov	arg03, #0
0b10c     E8 1F B1 FD | 	call	#__system___basic_print_char
0b110     00 12 06 F6 | 	mov	arg01, #0
0b114     C4 6C B1 FD | 	call	#__system___getiolock_0474
0b118     FD 00 68 FC | 	wrlong	#0, result1
0b11c     09 12 06 F6 | 	mov	arg01, #9
0b120     EC 62 B1 FD | 	call	#__system__close
0b124     24 02 90 FD | 	jmp	#LR__0939
0b128                 | LR__0931
0b128     0C 4E 05 F1 | 	add	fp, #12
0b12c     A7 0A 68 FC | 	wrlong	#5, fp
0b130                 | '   i=5
0b130                 | '   get #9,1,header,1
0b130     0C 4E 05 F1 | 	add	fp, #12
0b134     A7 16 02 F6 | 	mov	arg03, fp
0b138     18 4E 85 F1 | 	sub	fp, #24
0b13c     09 12 06 F6 | 	mov	arg01, #9
0b140     01 14 06 F6 | 	mov	arg02, #1
0b144     01 18 06 F6 | 	mov	arg04, #1
0b148     04 1A 06 F6 | 	mov	arg05, #4
0b14c     10 21 B1 FD | 	call	#__system___basic_get
0b150                 | '   
0b150                 | '   if header<>$0D616272 then 
0b150     18 4E 05 F1 | 	add	fp, #24
0b154     A7 1E 02 FB | 	rdlong	local01, fp
0b158     18 4E 85 F1 | 	sub	fp, #24
0b15c     B1 B0 06 FF 
0b160     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0b164     F0 00 90 AD |  if_e	jmp	#LR__0934
0b168                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b168     09 12 06 F6 | 	mov	arg01, #9
0b16c     A0 62 B1 FD | 	call	#__system__close
0b170     09 1E 06 F6 | 	mov	local01, #9
0b174     72 00 00 FF 
0b178     78 E4 05 F1 | 	add	objptr, ##58488
0b17c     F2 12 02 FB | 	rdlong	arg01, objptr
0b180     72 00 00 FF 
0b184     78 E4 85 F1 | 	sub	objptr, ##58488
0b188     5F 01 00 FF 
0b18c     F3 15 06 F6 | 	mov	arg02, ##@LR__4918
0b190     14 13 B1 FD | 	call	#__system___string_concat
0b194     FD 12 02 F6 | 	mov	arg01, result1
0b198     A7 14 02 FB | 	rdlong	arg02, fp
0b19c     08 13 B1 FD | 	call	#__system___string_concat
0b1a0     FD 14 02 F6 | 	mov	arg02, result1
0b1a4     0F 13 02 F6 | 	mov	arg01, local01
0b1a8     00 16 06 F6 | 	mov	arg03, #0
0b1ac     9C 1E B1 FD | 	call	#__system___basic_open_string
0b1b0                 | '     do
0b1b0                 | LR__0932
0b1b0     09 12 06 F6 | 	mov	arg01, #9
0b1b4     A0 14 B1 FD | 	call	#__system___basic_read_line
0b1b8     57 00 00 FF 
0b1bc     00 E4 05 F1 | 	add	objptr, ##44544
0b1c0     F2 FA 61 FC | 	wrlong	result1, objptr
0b1c4                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0b1c4     57 00 00 FF 
0b1c8     00 E4 85 F1 | 	sub	objptr, ##44544
0b1cc     FD 12 02 F6 | 	mov	arg01, result1
0b1d0     01 14 06 F6 | 	mov	arg02, #1
0b1d4     B8 32 B1 FD | 	call	#__system__Left_S
0b1d8     FD 12 02 F6 | 	mov	arg01, result1
0b1dc     5F 01 00 FF 
0b1e0     F5 15 06 F6 | 	mov	arg02, ##@LR__4919
0b1e4     8C 12 B1 FD | 	call	#__system___string_cmp
0b1e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0b1ec     34 00 90 CD |  if_b	jmp	#LR__0933
0b1f0     57 00 00 FF 
0b1f4     00 E4 05 F1 | 	add	objptr, ##44544
0b1f8     F2 12 02 FB | 	rdlong	arg01, objptr
0b1fc     57 00 00 FF 
0b200     00 E4 85 F1 | 	sub	objptr, ##44544
0b204     01 14 06 F6 | 	mov	arg02, #1
0b208     84 32 B1 FD | 	call	#__system__Left_S
0b20c     FD 12 02 F6 | 	mov	arg01, result1
0b210     5F 01 00 FF 
0b214     F7 15 06 F6 | 	mov	arg02, ##@LR__4920
0b218     58 12 B1 FD | 	call	#__system___string_cmp
0b21c     01 FA 55 F2 | 	cmps	result1, #1 wc
0b220     F8 57 BF CD |  if_b	call	#_interpret
0b224                 | LR__0933
0b224     57 00 00 FF 
0b228     00 E4 05 F1 | 	add	objptr, ##44544
0b22c     F2 12 02 FB | 	rdlong	arg01, objptr
0b230     57 00 00 FF 
0b234     00 E4 85 F1 | 	sub	objptr, ##44544
0b238     5F 01 00 FF 
0b23c     F9 15 06 F6 | 	mov	arg02, ##@LR__4921
0b240     30 12 B1 FD | 	call	#__system___string_cmp
0b244     00 FA 0D F2 | 	cmp	result1, #0 wz
0b248     64 FF 9F 5D |  if_ne	jmp	#LR__0932
0b24c                 | '     close #9
0b24c     09 12 06 F6 | 	mov	arg01, #9
0b250     BC 61 B1 FD | 	call	#__system__close
0b254     F4 00 90 FD | 	jmp	#LR__0938
0b258                 | LR__0934
0b258                 | '   'printerror(26) : close #9 : return
0b258                 | '     do
0b258                 | LR__0935
0b258                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0b258     0C 4E 05 F1 | 	add	fp, #12
0b25c     A7 14 02 FB | 	rdlong	arg02, fp
0b260     10 4E 05 F1 | 	add	fp, #16
0b264     A7 16 02 F6 | 	mov	arg03, fp
0b268     1C 4E 85 F1 | 	sub	fp, #28
0b26c     09 12 06 F6 | 	mov	arg01, #9
0b270     01 18 06 F6 | 	mov	arg04, #1
0b274     04 1A 06 F6 | 	mov	arg05, #4
0b278     E4 1F B1 FD | 	call	#__system___basic_get
0b27c     14 4E 05 F1 | 	add	fp, #20
0b280     A7 FA 61 FC | 	wrlong	result1, fp
0b284     08 4E 85 F1 | 	sub	fp, #8
0b288     A7 1E 02 FB | 	rdlong	local01, fp
0b28c     04 1E 06 F1 | 	add	local01, #4
0b290     A7 1E 62 FC | 	wrlong	local01, fp
0b294     10 4E 05 F1 | 	add	fp, #16
0b298     A7 1E 02 FB | 	rdlong	local01, fp
0b29c     04 4E 05 F1 | 	add	fp, #4
0b2a0     A7 1E 02 F1 | 	add	local01, fp
0b2a4     0F 01 48 FC | 	wrbyte	#0, local01
0b2a8                 | '       if amount=1 then  
0b2a8     0C 4E 85 F1 | 	sub	fp, #12
0b2ac     A7 1E 02 FB | 	rdlong	local01, fp
0b2b0     14 4E 85 F1 | 	sub	fp, #20
0b2b4     01 1E 0E F2 | 	cmp	local01, #1 wz
0b2b8     68 00 90 5D |  if_ne	jmp	#LR__0936
0b2bc                 | '         get #9,i,line2(0),linelength : i+=linelength
0b2bc     0C 4E 05 F1 | 	add	fp, #12
0b2c0     A7 14 02 FB | 	rdlong	arg02, fp
0b2c4     14 4E 05 F1 | 	add	fp, #20
0b2c8     A7 16 02 F6 | 	mov	arg03, fp
0b2cc     04 4E 85 F1 | 	sub	fp, #4
0b2d0     A7 18 02 FB | 	rdlong	arg04, fp
0b2d4     1C 4E 85 F1 | 	sub	fp, #28
0b2d8     09 12 06 F6 | 	mov	arg01, #9
0b2dc     01 1A 06 F6 | 	mov	arg05, #1
0b2e0     7C 1F B1 FD | 	call	#__system___basic_get
0b2e4     0C 4E 05 F1 | 	add	fp, #12
0b2e8     A7 1E 02 FB | 	rdlong	local01, fp
0b2ec     10 4E 05 F1 | 	add	fp, #16
0b2f0     A7 1A 02 FB | 	rdlong	arg05, fp
0b2f4     0D 1F 02 F1 | 	add	local01, arg05
0b2f8     10 4E 85 F1 | 	sub	fp, #16
0b2fc     A7 1E 62 FC | 	wrlong	local01, fp
0b300     94 4E 05 F1 | 	add	fp, #148
0b304     A7 1E 02 FB | 	rdlong	local01, fp
0b308     A0 4E 85 F1 | 	sub	fp, #160
0b30c     57 00 00 FF 
0b310     00 E4 05 F1 | 	add	objptr, ##44544
0b314     F2 1E 62 FC | 	wrlong	local01, objptr
0b318     57 00 00 FF 
0b31c     00 E4 85 F1 | 	sub	objptr, ##44544
0b320     F8 56 BF FD | 	call	#_interpret
0b324                 | LR__0936
0b324     14 4E 05 F1 | 	add	fp, #20
0b328     A7 1E 02 FB | 	rdlong	local01, fp
0b32c     14 4E 85 F1 | 	sub	fp, #20
0b330     01 1E 56 F2 | 	cmps	local01, #1 wc
0b334     20 FF 9F 3D |  if_ae	jmp	#LR__0935
0b338                 | '     close #9 
0b338     09 12 06 F6 | 	mov	arg01, #9
0b33c     D0 60 B1 FD | 	call	#__system__close
0b340     08 00 90 FD | 	jmp	#LR__0938
0b344                 | LR__0937
0b344     1E 12 06 F6 | 	mov	arg01, #30
0b348     18 D9 B0 FD | 	call	#_printerror
0b34c                 | LR__0938
0b34c                 | LR__0939
0b34c     A7 F0 03 F6 | 	mov	ptra, fp
0b350     B2 00 A0 FD | 	call	#popregs_
0b354                 | _do_load_ret
0b354     2D 00 64 FD | 	ret
0b358                 | 
0b358                 | ' 
0b358                 | ' '----------------- Run the program 
0b358                 | ' 
0b358                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0b358                 | ' 
0b358                 | ' sub do_run
0b358                 | _do_run
0b358     01 4A 05 F6 | 	mov	COUNT_, #1
0b35c     A8 00 A0 FD | 	call	#pushregs_
0b360     6A 00 00 FF 
0b364     68 E4 05 F1 | 	add	objptr, ##54376
0b368     F2 1C 02 FB | 	rdlong	arg06, objptr
0b36c     0F 00 00 FF 
0b370     2C E5 05 F1 | 	add	objptr, ##7980
0b374     F2 1C 62 FC | 	wrlong	arg06, objptr
0b378     04 E4 05 F1 | 	add	objptr, #4
0b37c     F2 00 68 FC | 	wrlong	#0, objptr
0b380     04 E4 05 F1 | 	add	objptr, #4
0b384     FF FF FF FF 
0b388     F2 FE 6B FC | 	wrlong	##-1, objptr
0b38c                 | ' if inrun>0 then 
0b38c     04 E4 05 F1 | 	add	objptr, #4
0b390     F2 1C 02 FB | 	rdlong	arg06, objptr
0b394     79 00 00 FF 
0b398     A0 E5 85 F1 | 	sub	objptr, ##62368
0b39c     01 1C 16 F2 | 	cmp	arg06, #1 wc
0b3a0     30 00 90 CD |  if_b	jmp	#LR__0940
0b3a4     79 00 00 FF 
0b3a8     A4 E5 05 F1 | 	add	objptr, ##62372
0b3ac     F2 12 02 F6 | 	mov	arg01, objptr
0b3b0     10 E4 85 F1 | 	sub	objptr, #16
0b3b4     F2 14 02 FB | 	rdlong	arg02, objptr
0b3b8     18 16 06 F6 | 	mov	arg03, #24
0b3bc     6E 00 00 FF 
0b3c0     D4 E4 85 F1 | 	sub	objptr, ##56532
0b3c4     80 04 B1 FD | 	call	#_psram_spin2_read1
0b3c8     0B 00 00 FF 
0b3cc     C0 E4 85 F1 | 	sub	objptr, ##5824
0b3d0                 | '   psram.read1(varptr(runheader),runptr,24)  
0b3d0                 | '   return
0b3d0     C4 02 90 FD | 	jmp	#LR__0947
0b3d4                 | LR__0940
0b3d4     79 00 00 FF 
0b3d8     A0 E5 05 F1 | 	add	objptr, ##62368
0b3dc     F2 02 68 FC | 	wrlong	#1, objptr
0b3e0     04 E4 05 F1 | 	add	objptr, #4
0b3e4     F2 12 02 F6 | 	mov	arg01, objptr
0b3e8     10 E4 85 F1 | 	sub	objptr, #16
0b3ec     F2 14 02 FB | 	rdlong	arg02, objptr
0b3f0     18 16 06 F6 | 	mov	arg03, #24
0b3f4     6E 00 00 FF 
0b3f8     D4 E4 85 F1 | 	sub	objptr, ##56532
0b3fc     48 04 B1 FD | 	call	#_psram_spin2_read1
0b400                 | ' inrun=1
0b400                 | ' psram.read1(varptr(runheader),runptr,24) 
0b400                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0b400     6E 00 00 FF 
0b404     E4 E4 05 F1 | 	add	objptr, ##56548
0b408     F2 1E 02 FB | 	rdlong	local01, objptr
0b40c     79 00 00 FF 
0b410     A4 E5 85 F1 | 	sub	objptr, ##62372
0b414     FF FF 7F FF 
0b418     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0b41c     79 00 00 AF 
0b420     A0 E5 05 A1 |  if_e	add	objptr, ##62368
0b424     F2 00 68 AC |  if_e	wrlong	#0, objptr
0b428     79 00 00 AF 
0b42c     A0 E5 85 A1 |  if_e	sub	objptr, ##62368
0b430     64 02 90 AD |  if_e	jmp	#LR__0947
0b434                 | ' do 
0b434                 | LR__0941
0b434                 | '   if runptr<>oldrunptr then
0b434     79 00 00 FF 
0b438     94 E5 05 F1 | 	add	objptr, ##62356
0b43c     F2 1E 02 FB | 	rdlong	local01, objptr
0b440     08 E4 05 F1 | 	add	objptr, #8
0b444     F2 1C 02 FB | 	rdlong	arg06, objptr
0b448     79 00 00 FF 
0b44c     9C E5 85 F1 | 	sub	objptr, ##62364
0b450     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0b454     CC 00 90 AD |  if_e	jmp	#LR__0942
0b458     79 00 00 FF 
0b45c     A4 E5 05 F1 | 	add	objptr, ##62372
0b460     F2 12 02 F6 | 	mov	arg01, objptr
0b464     10 E4 85 F1 | 	sub	objptr, #16
0b468     F2 14 02 FB | 	rdlong	arg02, objptr
0b46c     18 16 06 F6 | 	mov	arg03, #24
0b470     6E 00 00 FF 
0b474     D4 E4 85 F1 | 	sub	objptr, ##56532
0b478     CC 03 B1 FD | 	call	#_psram_spin2_read1
0b47c     5B 00 00 FF 
0b480     A0 E5 05 F1 | 	add	objptr, ##47008
0b484     F2 12 02 F6 | 	mov	arg01, objptr
0b488     12 00 00 FF 
0b48c     34 E5 05 F1 | 	add	objptr, ##9524
0b490     F2 14 02 FB | 	rdlong	arg02, objptr
0b494     14 00 00 FF 
0b498     4C E5 85 F1 | 	sub	objptr, ##10572
0b49c     F2 1E 02 FB | 	rdlong	local01, objptr
0b4a0     01 1E 66 F0 | 	shl	local01, #1
0b4a4     0F 15 02 F1 | 	add	arg02, local01
0b4a8     14 00 00 FF 
0b4ac     64 E5 05 F1 | 	add	objptr, ##10596
0b4b0     F2 16 02 FB | 	rdlong	arg03, objptr
0b4b4     18 E4 85 F1 | 	sub	objptr, #24
0b4b8     F2 1E 02 FB | 	rdlong	local01, objptr
0b4bc     0F 17 82 F1 | 	sub	arg03, local01
0b4c0     6E 00 00 FF 
0b4c4     D4 E4 85 F1 | 	sub	objptr, ##56532
0b4c8     7C 03 B1 FD | 	call	#_psram_spin2_read1
0b4cc     6E 00 00 FF 
0b4d0     EC E4 05 F1 | 	add	objptr, ##56556
0b4d4     F2 1E 02 FB | 	rdlong	local01, objptr
0b4d8     18 E4 85 F1 | 	sub	objptr, #24
0b4dc     F2 1C 02 FB | 	rdlong	arg06, objptr
0b4e0     0E 1F 82 F1 | 	sub	local01, arg06
0b4e4     14 00 00 FF 
0b4e8     4C E5 85 F1 | 	sub	objptr, ##10572
0b4ec     F2 1C 02 FB | 	rdlong	arg06, objptr
0b4f0     0E 1F 12 FD | 	qdiv	local01, arg06
0b4f4     05 00 00 FF 
0b4f8     18 E4 05 F1 | 	add	objptr, ##2584
0b4fc     18 1E 62 FD | 	getqx	local01
0b500     03 1E 86 F1 | 	sub	local01, #3
0b504     F2 1E 62 FC | 	wrlong	local01, objptr
0b508     0F 00 00 FF 
0b50c     34 E5 05 F1 | 	add	objptr, ##7988
0b510     F2 1E 02 FB | 	rdlong	local01, objptr
0b514     08 E4 05 F1 | 	add	objptr, #8
0b518     F2 1E 62 FC | 	wrlong	local01, objptr
0b51c     79 00 00 FF 
0b520     9C E5 85 F1 | 	sub	objptr, ##62364
0b524                 | LR__0942
0b524     79 00 00 FF 
0b528     B8 E5 05 F1 | 	add	objptr, ##62392
0b52c     F2 1E 02 FB | 	rdlong	local01, objptr
0b530     24 E4 85 F1 | 	sub	objptr, #36
0b534     F2 1E 62 FC | 	wrlong	local01, objptr
0b538     04 E4 05 F1 | 	add	objptr, #4
0b53c     F2 12 02 FB | 	rdlong	arg01, objptr
0b540     79 00 00 FF 
0b544     98 E5 85 F1 | 	sub	objptr, ##62360
0b548     40 EB BF FD | 	call	#_execute_line
0b54c     79 00 00 FF 
0b550     98 E5 05 F1 | 	add	objptr, ##62360
0b554     F2 FA 61 FC | 	wrlong	result1, objptr
0b558     04 E4 85 F1 | 	sub	objptr, #4
0b55c     F2 1E 02 FB | 	rdlong	local01, objptr
0b560     79 00 00 FF 
0b564     94 E5 85 F1 | 	sub	objptr, ##62356
0b568     FF FF 3F FF 
0b56c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b570     30 00 90 AD |  if_e	jmp	#LR__0944
0b574     E0 12 06 F6 | 	mov	arg01, #224
0b578     5C 06 B1 FD | 	call	#_usbnew_spin2_keystate
0b57c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b580     10 00 90 5D |  if_ne	jmp	#LR__0943
0b584     E4 12 06 F6 | 	mov	arg01, #228
0b588     4C 06 B1 FD | 	call	#_usbnew_spin2_keystate
0b58c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b590     A0 FE 9F AD |  if_e	jmp	#LR__0941
0b594                 | LR__0943
0b594     06 12 06 F6 | 	mov	arg01, #6
0b598     3C 06 B1 FD | 	call	#_usbnew_spin2_keystate
0b59c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b5a0     90 FE 9F AD |  if_e	jmp	#LR__0941
0b5a4                 | LR__0944
0b5a4                 | '   ''do whatever kbm.peek_latest_key()=$106 
0b5a4                 | ' if runheader(5)<>$7FFF_FFFF then 
0b5a4     79 00 00 FF 
0b5a8     B8 E5 05 F1 | 	add	objptr, ##62392
0b5ac     F2 1E 02 FB | 	rdlong	local01, objptr
0b5b0     79 00 00 FF 
0b5b4     B8 E5 85 F1 | 	sub	objptr, ##62392
0b5b8     FF FF 3F FF 
0b5bc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b5c0     C0 00 90 AD |  if_e	jmp	#LR__0946
0b5c4                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)  : kbm.get_key ' eat ctrl-c
0b5c4     79 00 00 FF 
0b5c8     C4 E5 05 F1 | 	add	objptr, ##62404
0b5cc     F2 1E 02 FB | 	rdlong	local01, objptr
0b5d0     79 00 00 FF 
0b5d4     C4 E5 85 F1 | 	sub	objptr, ##62404
0b5d8     01 1E 0E F2 | 	cmp	local01, #1 wz
0b5dc     40 00 90 5D |  if_ne	jmp	#LR__0945
0b5e0     7B 00 00 FF 
0b5e4     68 E4 05 F1 | 	add	objptr, ##63080
0b5e8     F2 14 02 FB | 	rdlong	arg02, objptr
0b5ec     04 E4 85 F1 | 	sub	objptr, #4
0b5f0     F2 1A 02 FB | 	rdlong	arg05, objptr
0b5f4     07 12 06 F6 | 	mov	arg01, #7
0b5f8     56 00 00 FF 
0b5fc     44 16 06 F6 | 	mov	arg03, ##44100
0b600     0C 18 C6 F9 | 	decod	arg04, #12
0b604     01 1C 66 F6 | 	neg	arg06, #1
0b608     6F 00 00 FF 
0b60c     A4 E5 85 F1 | 	sub	objptr, ##57252
0b610     E8 09 B1 FD | 	call	#_audio096_spin2_play
0b614     0B 00 00 FF 
0b618     C0 E4 85 F1 | 	sub	objptr, ##5824
0b61c     54 06 B1 FD | 	call	#_usbnew_spin2_get_key
0b620                 | LR__0945
0b620                 | '   print "Stopped at line ";runheader(0)
0b620     00 12 06 F6 | 	mov	arg01, #0
0b624     B4 67 B1 FD | 	call	#__system___getiolock_0474
0b628     FD 12 02 F6 | 	mov	arg01, result1
0b62c     1C 0E B1 FD | 	call	#__system___lockmem
0b630     5F 01 00 FF 
0b634     FA 15 06 F6 | 	mov	arg02, ##@LR__4922
0b638     00 12 06 F6 | 	mov	arg01, #0
0b63c     00 16 06 F6 | 	mov	arg03, #0
0b640     0C 1B B1 FD | 	call	#__system___basic_print_string
0b644     79 00 00 FF 
0b648     A4 E5 05 F1 | 	add	objptr, ##62372
0b64c     F2 14 02 FB | 	rdlong	arg02, objptr
0b650     79 00 00 FF 
0b654     A4 E5 85 F1 | 	sub	objptr, ##62372
0b658     00 12 06 F6 | 	mov	arg01, #0
0b65c     00 16 06 F6 | 	mov	arg03, #0
0b660     0A 18 06 F6 | 	mov	arg04, #10
0b664     6C 1B B1 FD | 	call	#__system___basic_print_unsigned
0b668     00 12 06 F6 | 	mov	arg01, #0
0b66c     0A 14 06 F6 | 	mov	arg02, #10
0b670     00 16 06 F6 | 	mov	arg03, #0
0b674     80 1A B1 FD | 	call	#__system___basic_print_char
0b678     00 12 06 F6 | 	mov	arg01, #0
0b67c     5C 67 B1 FD | 	call	#__system___getiolock_0474
0b680     FD 00 68 FC | 	wrlong	#0, result1
0b684                 | LR__0946
0b684     79 00 00 FF 
0b688     A0 E5 05 F1 | 	add	objptr, ##62368
0b68c     F2 00 68 FC | 	wrlong	#0, objptr
0b690     79 00 00 FF 
0b694     A0 E5 85 F1 | 	sub	objptr, ##62368
0b698                 | LR__0947
0b698     A7 F0 03 F6 | 	mov	ptra, fp
0b69c     B2 00 A0 FD | 	call	#popregs_
0b6a0                 | _do_run_ret
0b6a0     2D 00 64 FD | 	ret
0b6a4                 | 
0b6a4                 | ' 
0b6a4                 | ' 
0b6a4                 | ' 
0b6a4                 | ' 
0b6a4                 | ' 
0b6a4                 | ' 
0b6a4                 | ' 
0b6a4                 | ' sub do_defenv
0b6a4                 | _do_defenv
0b6a4     09 4A 05 F6 | 	mov	COUNT_, #9
0b6a8     A8 00 A0 FD | 	call	#pushregs_
0b6ac     B4 F0 07 F1 | 	add	ptra, #180
0b6b0     6A 00 00 FF 
0b6b4     64 E4 05 F1 | 	add	objptr, ##54372
0b6b8     F2 1E 02 FB | 	rdlong	local01, objptr
0b6bc     0F 1B 02 F6 | 	mov	arg05, local01
0b6c0     01 1A 66 F0 | 	shl	arg05, #1
0b6c4     0F 1B 02 F1 | 	add	arg05, local01
0b6c8     02 1A 66 F0 | 	shl	arg05, #2
0b6cc     03 00 00 FF 
0b6d0     04 E4 85 F1 | 	sub	objptr, ##1540
0b6d4     F2 20 02 F6 | 	mov	local02, objptr
0b6d8     F2 1A 02 F1 | 	add	arg05, objptr
0b6dc     0D 1B 02 FB | 	rdlong	arg05, arg05
0b6e0     10 4E 05 F1 | 	add	fp, #16
0b6e4     A7 1A 62 FC | 	wrlong	arg05, fp
0b6e8                 | ' 
0b6e8                 | ' numpar=compiledline(lineptr_e).result.uresult
0b6e8                 | ' 
0b6e8                 | ' 
0b6e8                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0b6e8                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0b6e8                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0b6e8                 | ' 
0b6e8                 | ' 
0b6e8                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0b6e8     10 4E 85 F1 | 	sub	fp, #16
0b6ec     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b6f0     67 00 00 FF 
0b6f4     60 E4 85 F1 | 	sub	objptr, ##52832
0b6f8     10 4E 05 51 |  if_ne	add	fp, #16
0b6fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b700     10 4E 85 51 |  if_ne	sub	fp, #16
0b704     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0b708     10 4E 05 51 |  if_ne	add	fp, #16
0b70c     0F 21 02 56 |  if_ne	mov	local02, local01
0b710     10 4E 85 51 |  if_ne	sub	fp, #16
0b714     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0b718     24 0C 90 5D |  if_ne	jmp	#LR__0971
0b71c                 | ' 
0b71c                 | '  
0b71c                 | ' if numpar=2 then
0b71c     10 4E 05 F1 | 	add	fp, #16
0b720     A7 20 02 FB | 	rdlong	local02, fp
0b724     10 4E 85 F1 | 	sub	fp, #16
0b728     02 20 0E F2 | 	cmp	local02, #2 wz
0b72c     CC 03 90 5D |  if_ne	jmp	#LR__0962
0b730     5C EA BF FD | 	call	#_pop
0b734     FF 1A 02 F6 | 	mov	arg05, result3
0b738     5C 4E 05 F1 | 	add	fp, #92
0b73c     A7 FA 61 FC | 	wrlong	result1, fp
0b740     04 4E 05 F1 | 	add	fp, #4
0b744     A7 FC 61 FC | 	wrlong	result2, fp
0b748     04 4E 05 F1 | 	add	fp, #4
0b74c     A7 1A 62 FC | 	wrlong	arg05, fp
0b750                 | '   t1=pop()
0b750                 | '   if t1.result_type=result_string2 then 
0b750     64 4E 85 F1 | 	sub	fp, #100
0b754     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b758     20 00 90 5D |  if_ne	jmp	#LR__0950
0b75c     5C 4E 05 F1 | 	add	fp, #92
0b760     A7 12 02 FB | 	rdlong	arg01, fp
0b764     5C 4E 85 F1 | 	sub	fp, #92
0b768     6C 29 B0 FD | 	call	#_convertstring
0b76c     68 4E 05 F1 | 	add	fp, #104
0b770     A7 FA 61 FC | 	wrlong	result1, fp
0b774     68 4E 85 F1 | 	sub	fp, #104
0b778     58 00 90 FD | 	jmp	#LR__0953
0b77c                 | LR__0950
0b77c     64 4E 05 F1 | 	add	fp, #100
0b780     A7 20 02 FB | 	rdlong	local02, fp
0b784     64 4E 85 F1 | 	sub	fp, #100
0b788     1F 20 0E F2 | 	cmp	local02, #31 wz
0b78c     18 00 90 5D |  if_ne	jmp	#LR__0951
0b790     5C 4E 05 F1 | 	add	fp, #92
0b794     A7 20 02 FB | 	rdlong	local02, fp
0b798     0C 4E 05 F1 | 	add	fp, #12
0b79c     A7 20 62 FC | 	wrlong	local02, fp
0b7a0     68 4E 85 F1 | 	sub	fp, #104
0b7a4     2C 00 90 FD | 	jmp	#LR__0952
0b7a8                 | LR__0951
0b7a8     60 01 00 FF 
0b7ac     0B 20 06 F6 | 	mov	local02, ##@LR__4923
0b7b0     68 4E 05 F1 | 	add	fp, #104
0b7b4     A7 20 62 FC | 	wrlong	local02, fp
0b7b8     0C 4E 85 F1 | 	sub	fp, #12
0b7bc     A7 12 02 F6 | 	mov	arg01, fp
0b7c0     5C 4E 85 F1 | 	sub	fp, #92
0b7c4     C0 72 B0 FD | 	call	#_converttoint
0b7c8     24 4E 05 F1 | 	add	fp, #36
0b7cc     A7 FA 61 FC | 	wrlong	result1, fp
0b7d0     24 4E 85 F1 | 	sub	fp, #36
0b7d4                 | LR__0952
0b7d4                 | LR__0953
0b7d4                 | ' 
0b7d4                 | '     
0b7d4                 | '   if s1<>"" then 
0b7d4     68 4E 05 F1 | 	add	fp, #104
0b7d8     A7 12 02 FB | 	rdlong	arg01, fp
0b7dc     68 4E 85 F1 | 	sub	fp, #104
0b7e0     60 01 00 FF 
0b7e4     0C 14 06 F6 | 	mov	arg02, ##@LR__4924
0b7e8     88 0C B1 FD | 	call	#__system___string_cmp
0b7ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0b7f0     F8 01 90 AD |  if_e	jmp	#LR__0957
0b7f4     98 E9 BF FD | 	call	#_pop
0b7f8     FF 1E 02 F6 | 	mov	local01, result3
0b7fc     5C 4E 05 F1 | 	add	fp, #92
0b800     A7 FA 61 FC | 	wrlong	result1, fp
0b804     04 4E 05 F1 | 	add	fp, #4
0b808     A7 FC 61 FC | 	wrlong	result2, fp
0b80c     04 4E 05 F1 | 	add	fp, #4
0b810     A7 1E 62 FC | 	wrlong	local01, fp
0b814     08 4E 85 F1 | 	sub	fp, #8
0b818     A7 12 02 F6 | 	mov	arg01, fp
0b81c     5C 4E 85 F1 | 	sub	fp, #92
0b820     64 72 B0 FD | 	call	#_converttoint
0b824     20 4E 05 F1 | 	add	fp, #32
0b828     A7 FA 61 FC | 	wrlong	result1, fp
0b82c     20 4E 85 F1 | 	sub	fp, #32
0b830                 | '     t1=pop()
0b830                 | '     channel=converttoint(t1) 
0b830                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0b830     09 12 06 F6 | 	mov	arg01, #9
0b834     D8 5B B1 FD | 	call	#__system__close
0b838     09 20 06 F6 | 	mov	local02, #9
0b83c     60 01 00 FF 
0b840     0D 12 06 F6 | 	mov	arg01, ##@LR__4925
0b844     68 4E 05 F1 | 	add	fp, #104
0b848     A7 14 02 FB | 	rdlong	arg02, fp
0b84c     68 4E 85 F1 | 	sub	fp, #104
0b850     54 0C B1 FD | 	call	#__system___string_concat
0b854     FD 14 02 F6 | 	mov	arg02, result1
0b858     10 13 02 F6 | 	mov	arg01, local02
0b85c     00 16 06 F6 | 	mov	arg03, #0
0b860     E8 17 B1 FD | 	call	#__system___basic_open_string
0b864     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b868     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b86c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b870     0C 4E 05 F1 | 	add	fp, #12
0b874     A7 FA 61 FC | 	wrlong	result1, fp
0b878                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b878     0C 4E 85 F1 | 	sub	fp, #12
0b87c     A0 00 90 AD |  if_e	jmp	#LR__0954
0b880     00 12 06 F6 | 	mov	arg01, #0
0b884     54 65 B1 FD | 	call	#__system___getiolock_0474
0b888     FD 12 02 F6 | 	mov	arg01, result1
0b88c     BC 0B B1 FD | 	call	#__system___lockmem
0b890     60 01 00 FF 
0b894     1A 14 06 F6 | 	mov	arg02, ##@LR__4926
0b898     00 12 06 F6 | 	mov	arg01, #0
0b89c     00 16 06 F6 | 	mov	arg03, #0
0b8a0     AC 18 B1 FD | 	call	#__system___basic_print_string
0b8a4     0C 4E 05 F1 | 	add	fp, #12
0b8a8     A7 14 02 FB | 	rdlong	arg02, fp
0b8ac     0C 4E 85 F1 | 	sub	fp, #12
0b8b0     00 12 06 F6 | 	mov	arg01, #0
0b8b4     00 16 06 F6 | 	mov	arg03, #0
0b8b8     0A 18 06 F6 | 	mov	arg04, #10
0b8bc     D4 18 B1 FD | 	call	#__system___basic_print_integer
0b8c0     60 01 00 FF 
0b8c4     28 14 06 F6 | 	mov	arg02, ##@LR__4927
0b8c8     00 12 06 F6 | 	mov	arg01, #0
0b8cc     00 16 06 F6 | 	mov	arg03, #0
0b8d0     7C 18 B1 FD | 	call	#__system___basic_print_string
0b8d4     00 20 06 F6 | 	mov	local02, #0
0b8d8     0C 4E 05 F1 | 	add	fp, #12
0b8dc     A7 12 02 FB | 	rdlong	arg01, fp
0b8e0     0C 4E 85 F1 | 	sub	fp, #12
0b8e4     F4 31 B1 FD | 	call	#__system___strerror
0b8e8     FD 14 02 F6 | 	mov	arg02, result1
0b8ec     10 13 02 F6 | 	mov	arg01, local02
0b8f0     00 16 06 F6 | 	mov	arg03, #0
0b8f4     58 18 B1 FD | 	call	#__system___basic_print_string
0b8f8     00 12 06 F6 | 	mov	arg01, #0
0b8fc     0A 14 06 F6 | 	mov	arg02, #10
0b900     00 16 06 F6 | 	mov	arg03, #0
0b904     F0 17 B1 FD | 	call	#__system___basic_print_char
0b908     00 12 06 F6 | 	mov	arg01, #0
0b90c     CC 64 B1 FD | 	call	#__system___getiolock_0474
0b910     FD 00 68 FC | 	wrlong	#0, result1
0b914     09 12 06 F6 | 	mov	arg01, #9
0b918     F4 5A B1 FD | 	call	#__system__close
0b91c     20 0A 90 FD | 	jmp	#LR__0971
0b920                 | LR__0954
0b920                 | '     get #9,17,envbuf8(channel,0),256
0b920     20 4E 05 F1 | 	add	fp, #32
0b924     A7 1A 02 FB | 	rdlong	arg05, fp
0b928     20 4E 85 F1 | 	sub	fp, #32
0b92c     0D 17 02 F6 | 	mov	arg03, arg05
0b930     09 16 66 F0 | 	shl	arg03, #9
0b934     0D 17 02 F1 | 	add	arg03, arg05
0b938     2C 00 00 FF 
0b93c     CC E4 05 F1 | 	add	objptr, ##22732
0b940     F2 16 02 F1 | 	add	arg03, objptr
0b944     09 12 06 F6 | 	mov	arg01, #9
0b948     11 14 06 F6 | 	mov	arg02, #17
0b94c     00 19 06 F6 | 	mov	arg04, #256
0b950     01 1A 06 F6 | 	mov	arg05, #1
0b954     2C 00 00 FF 
0b958     CC E4 85 F1 | 	sub	objptr, ##22732
0b95c     00 19 B1 FD | 	call	#__system___basic_get
0b960                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b960     14 4E 05 F1 | 	add	fp, #20
0b964     A7 FE 69 FC | 	wrlong	#255, fp
0b968     14 4E 85 F1 | 	sub	fp, #20
0b96c     2C 00 00 FF 
0b970     CC E4 05 F1 | 	add	objptr, ##22732
0b974     97 30 48 FB | 	callpa	#(@LR__0956-@LR__0955)>>2,fcache_load_ptr_
0b978                 | LR__0955
0b978     20 4E 05 F1 | 	add	fp, #32
0b97c     A7 18 02 FB | 	rdlong	arg04, fp
0b980     0C 21 02 F6 | 	mov	local02, arg04
0b984     09 20 66 F0 | 	shl	local02, #9
0b988     F2 20 02 F1 | 	add	local02, objptr
0b98c     0C 4E 85 F1 | 	sub	fp, #12
0b990     A7 1E 02 FB | 	rdlong	local01, fp
0b994     0F 1B 02 F6 | 	mov	arg05, local01
0b998     01 1A 66 F0 | 	shl	arg05, #1
0b99c     10 1B 02 F1 | 	add	arg05, local02
0b9a0     0C 21 02 F6 | 	mov	local02, arg04
0b9a4     09 20 66 F0 | 	shl	local02, #9
0b9a8     0C 21 02 F1 | 	add	local02, arg04
0b9ac     F2 20 02 F1 | 	add	local02, objptr
0b9b0     10 1F 02 F1 | 	add	local01, local02
0b9b4     0F 21 C2 FA | 	rdbyte	local02, local01
0b9b8     00 21 06 FA | 	mul	local02, #256
0b9bc     0D 21 52 FC | 	wrword	local02, arg05
0b9c0     A7 20 02 FB | 	rdlong	local02, fp
0b9c4     01 20 86 F1 | 	sub	local02, #1
0b9c8     A7 20 62 FC | 	wrlong	local02, fp
0b9cc     14 4E 85 F1 | 	sub	fp, #20
0b9d0     00 20 56 F2 | 	cmps	local02, #0 wc
0b9d4     A0 FF 9F 3D |  if_ae	jmp	#LR__0955
0b9d8                 | LR__0956
0b9d8     2C 00 00 FF 
0b9dc     CC E4 85 F1 | 	sub	objptr, ##22732
0b9e0                 | '     close #9
0b9e0     09 12 06 F6 | 	mov	arg01, #9
0b9e4     28 5A B1 FD | 	call	#__system__close
0b9e8                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b9e8                 | '     return
0b9e8     54 09 90 FD | 	jmp	#LR__0971
0b9ec                 | LR__0957
0b9ec                 | '     if wptr < ($80000 - 2048) then 
0b9ec     24 4E 05 F1 | 	add	fp, #36
0b9f0     A7 22 02 FB | 	rdlong	local03, fp
0b9f4     24 4E 85 F1 | 	sub	fp, #36
0b9f8     FC 03 00 FF 
0b9fc     00 22 56 F2 | 	cmps	local03, ##522240 wc
0ba00     7C 00 90 3D |  if_ae	jmp	#LR__0960
0ba04                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0ba04     14 4E 05 F1 | 	add	fp, #20
0ba08     A7 00 68 FC | 	wrlong	#0, fp
0ba0c     14 4E 85 F1 | 	sub	fp, #20
0ba10     2C 00 00 FF 
0ba14     CC E4 05 F1 | 	add	objptr, ##22732
0ba18     97 2C 48 FB | 	callpa	#(@LR__0959-@LR__0958)>>2,fcache_load_ptr_
0ba1c                 | LR__0958
0ba1c     20 4E 05 F1 | 	add	fp, #32
0ba20     A7 22 02 FB | 	rdlong	local03, fp
0ba24     09 22 66 F0 | 	shl	local03, #9
0ba28     F2 22 02 F1 | 	add	local03, objptr
0ba2c     0C 4E 85 F1 | 	sub	fp, #12
0ba30     A7 20 02 FB | 	rdlong	local02, fp
0ba34     10 1F 02 F6 | 	mov	local01, local02
0ba38     01 1E 66 F0 | 	shl	local01, #1
0ba3c     11 1F 02 F1 | 	add	local01, local03
0ba40     10 4E 05 F1 | 	add	fp, #16
0ba44     A7 12 02 FB | 	rdlong	arg01, fp
0ba48     01 20 66 F0 | 	shl	local02, #1
0ba4c     10 13 02 F1 | 	add	arg01, local02
0ba50     09 FB E1 FA | 	rdword	result1, arg01
0ba54     0F FB 51 FC | 	wrword	result1, local01
0ba58     10 4E 85 F1 | 	sub	fp, #16
0ba5c     A7 22 02 FB | 	rdlong	local03, fp
0ba60     01 22 06 F1 | 	add	local03, #1
0ba64     A7 22 62 FC | 	wrlong	local03, fp
0ba68     14 4E 85 F1 | 	sub	fp, #20
0ba6c     00 23 56 F2 | 	cmps	local03, #256 wc
0ba70     A8 FF 9F CD |  if_b	jmp	#LR__0958
0ba74                 | LR__0959
0ba74     2C 00 00 FF 
0ba78     CC E4 85 F1 | 	sub	objptr, ##22732
0ba7c     C0 08 90 FD | 	jmp	#LR__0971
0ba80                 | LR__0960
0ba80                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0ba80     14 4E 05 F1 | 	add	fp, #20
0ba84     A7 00 68 FC | 	wrlong	#0, fp
0ba88     14 4E 85 F1 | 	sub	fp, #20
0ba8c                 | LR__0961
0ba8c     20 4E 05 F1 | 	add	fp, #32
0ba90     A7 22 02 FB | 	rdlong	local03, fp
0ba94     09 22 66 F0 | 	shl	local03, #9
0ba98     2C 00 00 FF 
0ba9c     CC E4 05 F1 | 	add	objptr, ##22732
0baa0     F2 22 02 F1 | 	add	local03, objptr
0baa4     0C 4E 85 F1 | 	sub	fp, #12
0baa8     A7 20 02 FB | 	rdlong	local02, fp
0baac     10 1F 02 F6 | 	mov	local01, local02
0bab0     01 1E 66 F0 | 	shl	local01, #1
0bab4     11 1F 02 F1 | 	add	local01, local03
0bab8     10 4E 05 F1 | 	add	fp, #16
0babc     A7 12 02 FB | 	rdlong	arg01, fp
0bac0     24 4E 85 F1 | 	sub	fp, #36
0bac4     01 20 66 F0 | 	shl	local02, #1
0bac8     10 13 02 F1 | 	add	arg01, local02
0bacc     2C 00 00 FF 
0bad0     CC E4 85 F1 | 	sub	objptr, ##22732
0bad4     78 D4 B0 FD | 	call	#_psdpeek
0bad8     0F FB 51 FC | 	wrword	result1, local01
0badc     14 4E 05 F1 | 	add	fp, #20
0bae0     A7 24 02 FB | 	rdlong	local04, fp
0bae4     01 24 06 F1 | 	add	local04, #1
0bae8     A7 24 62 FC | 	wrlong	local04, fp
0baec     14 4E 85 F1 | 	sub	fp, #20
0baf0     00 25 56 F2 | 	cmps	local04, #256 wc
0baf4     94 FF 9F CD |  if_b	jmp	#LR__0961
0baf8                 | '     return   
0baf8     44 08 90 FD | 	jmp	#LR__0971
0bafc                 | LR__0962
0bafc                 | ' 
0bafc                 | ' if numpar=5 then    'simple adsr
0bafc     10 4E 05 F1 | 	add	fp, #16
0bb00     A7 22 02 FB | 	rdlong	local03, fp
0bb04     10 4E 85 F1 | 	sub	fp, #16
0bb08     05 22 0E F2 | 	cmp	local03, #5 wz
0bb0c     30 08 90 5D |  if_ne	jmp	#LR__0970
0bb10     7C E6 BF FD | 	call	#_pop
0bb14     FF 1E 02 F6 | 	mov	local01, result3
0bb18     5C 4E 05 F1 | 	add	fp, #92
0bb1c     A7 FA 61 FC | 	wrlong	result1, fp
0bb20     04 4E 05 F1 | 	add	fp, #4
0bb24     A7 FC 61 FC | 	wrlong	result2, fp
0bb28     04 4E 05 F1 | 	add	fp, #4
0bb2c     A7 1E 62 FC | 	wrlong	local01, fp
0bb30     08 4E 85 F1 | 	sub	fp, #8
0bb34     A7 12 02 F6 | 	mov	arg01, fp
0bb38     5C 4E 85 F1 | 	sub	fp, #92
0bb3c     F4 6F B0 FD | 	call	#_converttofloat
0bb40     FD 22 02 F6 | 	mov	local03, result1
0bb44     34 4E 05 F1 | 	add	fp, #52
0bb48     A7 22 62 FC | 	wrlong	local03, fp
0bb4c     34 4E 85 F1 | 	sub	fp, #52
0bb50     3C E6 BF FD | 	call	#_pop
0bb54     FF 1E 02 F6 | 	mov	local01, result3
0bb58     5C 4E 05 F1 | 	add	fp, #92
0bb5c     A7 FA 61 FC | 	wrlong	result1, fp
0bb60     04 4E 05 F1 | 	add	fp, #4
0bb64     A7 FC 61 FC | 	wrlong	result2, fp
0bb68     04 4E 05 F1 | 	add	fp, #4
0bb6c     A7 1E 62 FC | 	wrlong	local01, fp
0bb70     08 4E 85 F1 | 	sub	fp, #8
0bb74     A7 12 02 F6 | 	mov	arg01, fp
0bb78     5C 4E 85 F1 | 	sub	fp, #92
0bb7c     B4 6F B0 FD | 	call	#_converttofloat
0bb80     FD 22 02 F6 | 	mov	local03, result1
0bb84     30 4E 05 F1 | 	add	fp, #48
0bb88     A7 22 62 FC | 	wrlong	local03, fp
0bb8c     30 4E 85 F1 | 	sub	fp, #48
0bb90     FC E5 BF FD | 	call	#_pop
0bb94     FF 1E 02 F6 | 	mov	local01, result3
0bb98     5C 4E 05 F1 | 	add	fp, #92
0bb9c     A7 FA 61 FC | 	wrlong	result1, fp
0bba0     04 4E 05 F1 | 	add	fp, #4
0bba4     A7 FC 61 FC | 	wrlong	result2, fp
0bba8     04 4E 05 F1 | 	add	fp, #4
0bbac     A7 1E 62 FC | 	wrlong	local01, fp
0bbb0     08 4E 85 F1 | 	sub	fp, #8
0bbb4     A7 12 02 F6 | 	mov	arg01, fp
0bbb8     5C 4E 85 F1 | 	sub	fp, #92
0bbbc     74 6F B0 FD | 	call	#_converttofloat
0bbc0     FD 22 02 F6 | 	mov	local03, result1
0bbc4     2C 4E 05 F1 | 	add	fp, #44
0bbc8     A7 22 62 FC | 	wrlong	local03, fp
0bbcc     2C 4E 85 F1 | 	sub	fp, #44
0bbd0     BC E5 BF FD | 	call	#_pop
0bbd4     FF 1E 02 F6 | 	mov	local01, result3
0bbd8     5C 4E 05 F1 | 	add	fp, #92
0bbdc     A7 FA 61 FC | 	wrlong	result1, fp
0bbe0     04 4E 05 F1 | 	add	fp, #4
0bbe4     A7 FC 61 FC | 	wrlong	result2, fp
0bbe8     04 4E 05 F1 | 	add	fp, #4
0bbec     A7 1E 62 FC | 	wrlong	local01, fp
0bbf0     08 4E 85 F1 | 	sub	fp, #8
0bbf4     A7 12 02 F6 | 	mov	arg01, fp
0bbf8     5C 4E 85 F1 | 	sub	fp, #92
0bbfc     34 6F B0 FD | 	call	#_converttofloat
0bc00     FD 22 02 F6 | 	mov	local03, result1
0bc04     28 4E 05 F1 | 	add	fp, #40
0bc08     A7 22 62 FC | 	wrlong	local03, fp
0bc0c     28 4E 85 F1 | 	sub	fp, #40
0bc10     7C E5 BF FD | 	call	#_pop
0bc14     FF 1E 02 F6 | 	mov	local01, result3
0bc18     5C 4E 05 F1 | 	add	fp, #92
0bc1c     A7 FA 61 FC | 	wrlong	result1, fp
0bc20     04 4E 05 F1 | 	add	fp, #4
0bc24     A7 FC 61 FC | 	wrlong	result2, fp
0bc28     04 4E 05 F1 | 	add	fp, #4
0bc2c     A7 1E 62 FC | 	wrlong	local01, fp
0bc30     08 4E 85 F1 | 	sub	fp, #8
0bc34     A7 12 02 F6 | 	mov	arg01, fp
0bc38     5C 4E 85 F1 | 	sub	fp, #92
0bc3c     48 6E B0 FD | 	call	#_converttoint
0bc40     20 4E 05 F1 | 	add	fp, #32
0bc44     A7 FA 61 FC | 	wrlong	result1, fp
0bc48                 | ' 
0bc48                 | '   t1=pop() : rr=converttofloat(t1)
0bc48                 | '   t1=pop() : ss=converttofloat(t1) 
0bc48                 | '   t1=pop() : dd=converttofloat(t1)
0bc48                 | '   t1=pop() : aa=converttofloat(t1)
0bc48                 | '   t1=pop() : channel=converttoint(t1)
0bc48                 | '   if ss<0.0 then ss=0.0 
0bc48     10 4E 05 F1 | 	add	fp, #16
0bc4c     A7 12 02 FB | 	rdlong	arg01, fp
0bc50     30 4E 85 F1 | 	sub	fp, #48
0bc54     00 14 06 F6 | 	mov	arg02, #0
0bc58     01 16 06 F6 | 	mov	arg03, #1
0bc5c     9C 37 B1 FD | 	call	#__system___float_cmp
0bc60     00 FA 55 F2 | 	cmps	result1, #0 wc
0bc64     30 4E 05 C1 |  if_b	add	fp, #48
0bc68     A7 00 68 CC |  if_b	wrlong	#0, fp
0bc6c     30 4E 85 C1 |  if_b	sub	fp, #48
0bc70                 | '   if ss>1.0 then ss=1.0
0bc70     30 4E 05 F1 | 	add	fp, #48
0bc74     A7 12 02 FB | 	rdlong	arg01, fp
0bc78     30 4E 85 F1 | 	sub	fp, #48
0bc7c     00 C0 1F FF 
0bc80     00 14 06 F6 | 	mov	arg02, ##1065353216
0bc84     01 16 66 F6 | 	neg	arg03, #1
0bc88     70 37 B1 FD | 	call	#__system___float_cmp
0bc8c     01 FA 55 F2 | 	cmps	result1, #1 wc
0bc90     30 4E 05 31 |  if_ae	add	fp, #48
0bc94     00 C0 9F 3F 
0bc98     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0bc9c     30 4E 85 31 |  if_ae	sub	fp, #48
0bca0     28 4E 05 F1 | 	add	fp, #40
0bca4     A7 12 02 FB | 	rdlong	arg01, fp
0bca8     04 4E 05 F1 | 	add	fp, #4
0bcac     A7 14 02 FB | 	rdlong	arg02, fp
0bcb0     2C 4E 85 F1 | 	sub	fp, #44
0bcb4     40 2F B1 FD | 	call	#__system___float_add
0bcb8     FD 12 02 F6 | 	mov	arg01, result1
0bcbc     34 4E 05 F1 | 	add	fp, #52
0bcc0     A7 14 02 FB | 	rdlong	arg02, fp
0bcc4     34 4E 85 F1 | 	sub	fp, #52
0bcc8     2C 2F B1 FD | 	call	#__system___float_add
0bccc     4C 4E 05 F1 | 	add	fp, #76
0bcd0     A7 FA 61 FC | 	wrlong	result1, fp
0bcd4     FD 14 02 F6 | 	mov	arg02, result1
0bcd8     4C 4E 85 F1 | 	sub	fp, #76
0bcdc     00 C0 21 FF 
0bce0     00 12 06 F6 | 	mov	arg01, ##1132462080
0bce4     E4 34 B1 FD | 	call	#__system___float_div
0bce8     50 4E 05 F1 | 	add	fp, #80
0bcec     A7 FA 61 FC | 	wrlong	result1, fp
0bcf0     28 4E 85 F1 | 	sub	fp, #40
0bcf4     A7 12 02 FB | 	rdlong	arg01, fp
0bcf8     FD 14 02 F6 | 	mov	arg02, result1
0bcfc     28 4E 85 F1 | 	sub	fp, #40
0bd00     C4 32 B1 FD | 	call	#__system___float_mul
0bd04     FD 12 02 F6 | 	mov	arg01, result1
0bd08     01 14 06 F6 | 	mov	arg02, #1
0bd0c     80 37 B1 FD | 	call	#__system___float_tointeger
0bd10     A7 FA 61 FC | 	wrlong	result1, fp
0bd14     2C 4E 05 F1 | 	add	fp, #44
0bd18     A7 12 02 FB | 	rdlong	arg01, fp
0bd1c     24 4E 05 F1 | 	add	fp, #36
0bd20     A7 14 02 FB | 	rdlong	arg02, fp
0bd24     50 4E 85 F1 | 	sub	fp, #80
0bd28     9C 32 B1 FD | 	call	#__system___float_mul
0bd2c     FD 12 02 F6 | 	mov	arg01, result1
0bd30     01 14 06 F6 | 	mov	arg02, #1
0bd34     58 37 B1 FD | 	call	#__system___float_tointeger
0bd38     04 4E 05 F1 | 	add	fp, #4
0bd3c     A7 FA 61 FC | 	wrlong	result1, fp
0bd40     30 4E 05 F1 | 	add	fp, #48
0bd44     A7 12 02 FB | 	rdlong	arg01, fp
0bd48     1C 4E 05 F1 | 	add	fp, #28
0bd4c     A7 14 02 FB | 	rdlong	arg02, fp
0bd50     50 4E 85 F1 | 	sub	fp, #80
0bd54     70 32 B1 FD | 	call	#__system___float_mul
0bd58     FD 12 02 F6 | 	mov	arg01, result1
0bd5c     01 14 06 F6 | 	mov	arg02, #1
0bd60     2C 37 B1 FD | 	call	#__system___float_tointeger
0bd64     FD 22 02 F6 | 	mov	local03, result1
0bd68     0C 4E 05 F1 | 	add	fp, #12
0bd6c     A7 22 62 FC | 	wrlong	local03, fp
0bd70     0C 4E 85 F1 | 	sub	fp, #12
0bd74                 | '   fulltime=aa+dd+rr
0bd74                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0bd74     00 12 06 F6 | 	mov	arg01, #0
0bd78     60 60 B1 FD | 	call	#__system___getiolock_0474
0bd7c     FD 12 02 F6 | 	mov	arg01, result1
0bd80     C8 06 B1 FD | 	call	#__system___lockmem
0bd84     A7 14 02 FB | 	rdlong	arg02, fp
0bd88     00 12 06 F6 | 	mov	arg01, #0
0bd8c     00 16 06 F6 | 	mov	arg03, #0
0bd90     0A 18 06 F6 | 	mov	arg04, #10
0bd94     FC 13 B1 FD | 	call	#__system___basic_print_integer
0bd98     00 12 06 F6 | 	mov	arg01, #0
0bd9c     09 14 06 F6 | 	mov	arg02, #9
0bda0     00 16 06 F6 | 	mov	arg03, #0
0bda4     50 13 B1 FD | 	call	#__system___basic_print_char
0bda8     04 4E 05 F1 | 	add	fp, #4
0bdac     A7 14 02 FB | 	rdlong	arg02, fp
0bdb0     04 4E 85 F1 | 	sub	fp, #4
0bdb4     00 12 06 F6 | 	mov	arg01, #0
0bdb8     00 16 06 F6 | 	mov	arg03, #0
0bdbc     0A 18 06 F6 | 	mov	arg04, #10
0bdc0     D0 13 B1 FD | 	call	#__system___basic_print_integer
0bdc4     00 12 06 F6 | 	mov	arg01, #0
0bdc8     09 14 06 F6 | 	mov	arg02, #9
0bdcc     00 16 06 F6 | 	mov	arg03, #0
0bdd0     24 13 B1 FD | 	call	#__system___basic_print_char
0bdd4     0C 4E 05 F1 | 	add	fp, #12
0bdd8     A7 14 02 FB | 	rdlong	arg02, fp
0bddc     0C 4E 85 F1 | 	sub	fp, #12
0bde0     00 12 06 F6 | 	mov	arg01, #0
0bde4     00 16 06 F6 | 	mov	arg03, #0
0bde8     0A 18 06 F6 | 	mov	arg04, #10
0bdec     A4 13 B1 FD | 	call	#__system___basic_print_integer
0bdf0     00 12 06 F6 | 	mov	arg01, #0
0bdf4     09 14 06 F6 | 	mov	arg02, #9
0bdf8     00 16 06 F6 | 	mov	arg03, #0
0bdfc     F8 12 B1 FD | 	call	#__system___basic_print_char
0be00     A7 14 02 FB | 	rdlong	arg02, fp
0be04     04 4E 05 F1 | 	add	fp, #4
0be08     A7 22 02 FB | 	rdlong	local03, fp
0be0c     11 15 02 F1 | 	add	arg02, local03
0be10     08 4E 05 F1 | 	add	fp, #8
0be14     A7 22 02 FB | 	rdlong	local03, fp
0be18     0C 4E 85 F1 | 	sub	fp, #12
0be1c     11 15 02 F1 | 	add	arg02, local03
0be20     00 12 06 F6 | 	mov	arg01, #0
0be24     00 16 06 F6 | 	mov	arg03, #0
0be28     0A 18 06 F6 | 	mov	arg04, #10
0be2c     64 13 B1 FD | 	call	#__system___basic_print_integer
0be30     00 12 06 F6 | 	mov	arg01, #0
0be34     0A 14 06 F6 | 	mov	arg02, #10
0be38     00 16 06 F6 | 	mov	arg03, #0
0be3c     B8 12 B1 FD | 	call	#__system___basic_print_char
0be40     00 12 06 F6 | 	mov	arg01, #0
0be44     94 5F B1 FD | 	call	#__system___getiolock_0474
0be48     FD 00 68 FC | 	wrlong	#0, result1
0be4c     F8 BF 23 FF 
0be50     00 22 06 F6 | 	mov	local03, ##1199566848
0be54     A7 12 02 FB | 	rdlong	arg01, fp
0be58     09 13 52 F6 | 	abs	arg01, arg01 wc
0be5c     1F 26 C6 C9 |  if_b	decod	local05, #31
0be60     00 26 06 36 |  if_ae	mov	local05, #0
0be64     5C 2D B1 FD | 	call	#__system___float_fromuns
0be68     13 FB 61 F5 | 	xor	result1, local05
0be6c     FD 14 02 F6 | 	mov	arg02, result1
0be70     11 13 02 F6 | 	mov	arg01, local03
0be74     54 33 B1 FD | 	call	#__system___float_div
0be78     54 4E 05 F1 | 	add	fp, #84
0be7c     A7 FA 61 FC | 	wrlong	result1, fp
0be80     F8 BF 23 FF 
0be84     00 22 06 F6 | 	mov	local03, ##1199566848
0be88     24 4E 85 F1 | 	sub	fp, #36
0be8c     A7 14 02 FB | 	rdlong	arg02, fp
0be90     30 4E 85 F1 | 	sub	fp, #48
0be94     F8 BF 23 FF 
0be98     00 12 06 F6 | 	mov	arg01, ##1199566848
0be9c     28 31 B1 FD | 	call	#__system___float_mul
0bea0     FD 14 02 F6 | 	mov	arg02, result1
0bea4     11 13 02 F6 | 	mov	arg01, local03
0bea8     1F 14 E6 F4 | 	bitnot	arg02, #31
0beac     48 2D B1 FD | 	call	#__system___float_add
0beb0     FD 22 02 F6 | 	mov	local03, result1
0beb4     04 4E 05 F1 | 	add	fp, #4
0beb8     A7 12 02 FB | 	rdlong	arg01, fp
0bebc     04 4E 85 F1 | 	sub	fp, #4
0bec0     09 13 52 F6 | 	abs	arg01, arg01 wc
0bec4     1F 26 C6 C9 |  if_b	decod	local05, #31
0bec8     00 26 06 36 |  if_ae	mov	local05, #0
0becc     F4 2C B1 FD | 	call	#__system___float_fromuns
0bed0     13 FB 61 F5 | 	xor	result1, local05
0bed4     FD 14 02 F6 | 	mov	arg02, result1
0bed8     11 13 02 F6 | 	mov	arg01, local03
0bedc     EC 32 B1 FD | 	call	#__system___float_div
0bee0     2C 4E 05 F1 | 	add	fp, #44
0bee4     A7 FA 61 FC | 	wrlong	result1, fp
0bee8     04 4E 05 F1 | 	add	fp, #4
0beec     A7 14 02 FB | 	rdlong	arg02, fp
0bef0     30 4E 85 F1 | 	sub	fp, #48
0bef4     F8 BF 23 FF 
0bef8     00 12 06 F6 | 	mov	arg01, ##1199566848
0befc     C8 30 B1 FD | 	call	#__system___float_mul
0bf00     FD 22 02 F6 | 	mov	local03, result1
0bf04     0C 4E 05 F1 | 	add	fp, #12
0bf08     A7 12 02 FB | 	rdlong	arg01, fp
0bf0c     0C 4E 85 F1 | 	sub	fp, #12
0bf10     09 13 52 F6 | 	abs	arg01, arg01 wc
0bf14     1F 26 C6 C9 |  if_b	decod	local05, #31
0bf18     00 26 06 36 |  if_ae	mov	local05, #0
0bf1c     A4 2C B1 FD | 	call	#__system___float_fromuns
0bf20     13 FB 61 F5 | 	xor	result1, local05
0bf24     FD 14 02 F6 | 	mov	arg02, result1
0bf28     11 13 02 F6 | 	mov	arg01, local03
0bf2c     9C 32 B1 FD | 	call	#__system___float_div
0bf30     FD 22 02 F6 | 	mov	local03, result1
0bf34     58 4E 05 F1 | 	add	fp, #88
0bf38     A7 22 62 FC | 	wrlong	local03, fp
0bf3c     58 4E 85 F1 | 	sub	fp, #88
0bf40                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0bf40     00 12 06 F6 | 	mov	arg01, #0
0bf44     94 5E B1 FD | 	call	#__system___getiolock_0474
0bf48     FD 12 02 F6 | 	mov	arg01, result1
0bf4c     FC 04 B1 FD | 	call	#__system___lockmem
0bf50     54 4E 05 F1 | 	add	fp, #84
0bf54     A7 14 02 FB | 	rdlong	arg02, fp
0bf58     54 4E 85 F1 | 	sub	fp, #84
0bf5c     00 12 06 F6 | 	mov	arg01, #0
0bf60     00 16 06 F6 | 	mov	arg03, #0
0bf64     23 18 06 F6 | 	mov	arg04, #35
0bf68     74 36 B1 FD | 	call	#__system___basic_print_float
0bf6c     00 12 06 F6 | 	mov	arg01, #0
0bf70     09 14 06 F6 | 	mov	arg02, #9
0bf74     00 16 06 F6 | 	mov	arg03, #0
0bf78     7C 11 B1 FD | 	call	#__system___basic_print_char
0bf7c     2C 4E 05 F1 | 	add	fp, #44
0bf80     A7 14 02 FB | 	rdlong	arg02, fp
0bf84     2C 4E 85 F1 | 	sub	fp, #44
0bf88     00 12 06 F6 | 	mov	arg01, #0
0bf8c     00 16 06 F6 | 	mov	arg03, #0
0bf90     23 18 06 F6 | 	mov	arg04, #35
0bf94     48 36 B1 FD | 	call	#__system___basic_print_float
0bf98     00 12 06 F6 | 	mov	arg01, #0
0bf9c     09 14 06 F6 | 	mov	arg02, #9
0bfa0     00 16 06 F6 | 	mov	arg03, #0
0bfa4     50 11 B1 FD | 	call	#__system___basic_print_char
0bfa8     58 4E 05 F1 | 	add	fp, #88
0bfac     A7 14 02 FB | 	rdlong	arg02, fp
0bfb0     58 4E 85 F1 | 	sub	fp, #88
0bfb4     00 12 06 F6 | 	mov	arg01, #0
0bfb8     00 16 06 F6 | 	mov	arg03, #0
0bfbc     23 18 06 F6 | 	mov	arg04, #35
0bfc0     1C 36 B1 FD | 	call	#__system___basic_print_float
0bfc4     00 12 06 F6 | 	mov	arg01, #0
0bfc8     0A 14 06 F6 | 	mov	arg02, #10
0bfcc     00 16 06 F6 | 	mov	arg03, #0
0bfd0     24 11 B1 FD | 	call	#__system___basic_print_char
0bfd4     00 12 06 F6 | 	mov	arg01, #0
0bfd8     00 5E B1 FD | 	call	#__system___getiolock_0474
0bfdc     FD 00 68 FC | 	wrlong	#0, result1
0bfe0     20 4E 05 F1 | 	add	fp, #32
0bfe4     A7 28 02 FB | 	rdlong	local06, fp
0bfe8     20 4E 85 F1 | 	sub	fp, #32
0bfec     01 28 66 F0 | 	shl	local06, #1
0bff0     7B 00 00 FF 
0bff4     78 E4 05 F1 | 	add	objptr, ##63096
0bff8     F2 28 02 F1 | 	add	local06, objptr
0bffc     A7 2A 02 FB | 	rdlong	local07, fp
0c000     04 4E 05 F1 | 	add	fp, #4
0c004     A7 22 02 FB | 	rdlong	local03, fp
0c008     11 2B 02 F1 | 	add	local07, local03
0c00c     14 2B 52 FC | 	wrword	local07, local06
0c010     24 4E 05 F1 | 	add	fp, #36
0c014     A7 00 68 FC | 	wrlong	#0, fp
0c018                 | '   suspoints(channel)=a+d
0c018                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0c018     14 4E 85 F1 | 	sub	fp, #20
0c01c     A7 00 68 FC | 	wrlong	#0, fp
0c020     14 4E 85 F1 | 	sub	fp, #20
0c024     A7 2C 02 FB | 	rdlong	local08, fp
0c028     7B 00 00 FF 
0c02c     78 E4 85 F1 | 	sub	objptr, ##63096
0c030                 | LR__0963
0c030     14 4E 05 F1 | 	add	fp, #20
0c034     A7 22 02 FB | 	rdlong	local03, fp
0c038     14 4E 85 F1 | 	sub	fp, #20
0c03c     16 23 52 F2 | 	cmps	local03, local08 wc
0c040     80 00 90 3D |  if_ae	jmp	#LR__0964
0c044     20 4E 05 F1 | 	add	fp, #32
0c048     A7 28 02 FB | 	rdlong	local06, fp
0c04c     09 28 66 F0 | 	shl	local06, #9
0c050     2C 00 00 FF 
0c054     CC E4 05 F1 | 	add	objptr, ##22732
0c058     F2 28 02 F1 | 	add	local06, objptr
0c05c     0C 4E 85 F1 | 	sub	fp, #12
0c060     A7 22 02 FB | 	rdlong	local03, fp
0c064     01 22 66 F0 | 	shl	local03, #1
0c068     14 23 02 F1 | 	add	local03, local06
0c06c     14 4E 05 F1 | 	add	fp, #20
0c070     A7 12 02 FB | 	rdlong	arg01, fp
0c074     28 4E 85 F1 | 	sub	fp, #40
0c078     2C 00 00 FF 
0c07c     CC E4 85 F1 | 	sub	objptr, ##22732
0c080     01 14 06 F6 | 	mov	arg02, #1
0c084     08 34 B1 FD | 	call	#__system___float_tointeger
0c088     11 FB 51 FC | 	wrword	result1, local03
0c08c     28 4E 05 F1 | 	add	fp, #40
0c090     A7 12 02 FB | 	rdlong	arg01, fp
0c094     2C 4E 05 F1 | 	add	fp, #44
0c098     A7 14 02 FB | 	rdlong	arg02, fp
0c09c     54 4E 85 F1 | 	sub	fp, #84
0c0a0     54 2B B1 FD | 	call	#__system___float_add
0c0a4     28 4E 05 F1 | 	add	fp, #40
0c0a8     A7 FA 61 FC | 	wrlong	result1, fp
0c0ac     14 4E 85 F1 | 	sub	fp, #20
0c0b0     A7 20 02 FB | 	rdlong	local02, fp
0c0b4     01 20 06 F1 | 	add	local02, #1
0c0b8     A7 20 62 FC | 	wrlong	local02, fp
0c0bc     14 4E 85 F1 | 	sub	fp, #20
0c0c0     6C FF 9F FD | 	jmp	#LR__0963
0c0c4                 | LR__0964
0c0c4                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0c0c4     A7 22 02 FB | 	rdlong	local03, fp
0c0c8     14 4E 05 F1 | 	add	fp, #20
0c0cc     A7 22 62 FC | 	wrlong	local03, fp
0c0d0     14 4E 85 F1 | 	sub	fp, #20
0c0d4     A7 2E 02 FB | 	rdlong	local09, fp
0c0d8     04 4E 05 F1 | 	add	fp, #4
0c0dc     A7 22 02 FB | 	rdlong	local03, fp
0c0e0     04 4E 85 F1 | 	sub	fp, #4
0c0e4     11 2F 02 F1 | 	add	local09, local03
0c0e8                 | LR__0965
0c0e8     14 4E 05 F1 | 	add	fp, #20
0c0ec     A7 22 02 FB | 	rdlong	local03, fp
0c0f0     14 4E 85 F1 | 	sub	fp, #20
0c0f4     17 23 52 F2 | 	cmps	local03, local09 wc
0c0f8     A8 00 90 3D |  if_ae	jmp	#LR__0966
0c0fc     20 4E 05 F1 | 	add	fp, #32
0c100     A7 2C 02 FB | 	rdlong	local08, fp
0c104     09 2C 66 F0 | 	shl	local08, #9
0c108     2C 00 00 FF 
0c10c     CC E4 05 F1 | 	add	objptr, ##22732
0c110     F2 2C 02 F1 | 	add	local08, objptr
0c114     0C 4E 85 F1 | 	sub	fp, #12
0c118     A7 2A 02 FB | 	rdlong	local07, fp
0c11c     01 2A 66 F0 | 	shl	local07, #1
0c120     16 2B 02 F1 | 	add	local07, local08
0c124     14 4E 05 F1 | 	add	fp, #20
0c128     A7 12 02 FB | 	rdlong	arg01, fp
0c12c     28 4E 85 F1 | 	sub	fp, #40
0c130     2C 00 00 FF 
0c134     CC E4 85 F1 | 	sub	objptr, ##22732
0c138     01 14 06 F6 | 	mov	arg02, #1
0c13c     50 33 B1 FD | 	call	#__system___float_tointeger
0c140     15 FB 51 FC | 	wrword	result1, local07
0c144     28 4E 05 F1 | 	add	fp, #40
0c148     A7 12 02 FB | 	rdlong	arg01, fp
0c14c     04 4E 05 F1 | 	add	fp, #4
0c150     A7 14 02 FB | 	rdlong	arg02, fp
0c154     2C 4E 85 F1 | 	sub	fp, #44
0c158     1F 14 E6 F4 | 	bitnot	arg02, #31
0c15c     98 2A B1 FD | 	call	#__system___float_add
0c160     28 4E 05 F1 | 	add	fp, #40
0c164     A7 FA 61 FC | 	wrlong	result1, fp
0c168     28 4E 85 F1 | 	sub	fp, #40
0c16c     FD 12 02 F6 | 	mov	arg01, result1
0c170     00 14 06 F6 | 	mov	arg02, #0
0c174     01 16 06 F6 | 	mov	arg03, #1
0c178     80 32 B1 FD | 	call	#__system___float_cmp
0c17c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c180     28 4E 05 C1 |  if_b	add	fp, #40
0c184     A7 00 68 CC |  if_b	wrlong	#0, fp
0c188     28 4E 85 C1 |  if_b	sub	fp, #40
0c18c     14 4E 05 F1 | 	add	fp, #20
0c190     A7 20 02 FB | 	rdlong	local02, fp
0c194     01 20 06 F1 | 	add	local02, #1
0c198     A7 20 62 FC | 	wrlong	local02, fp
0c19c     14 4E 85 F1 | 	sub	fp, #20
0c1a0     44 FF 9F FD | 	jmp	#LR__0965
0c1a4                 | LR__0966
0c1a4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0c1a4     A7 22 02 FB | 	rdlong	local03, fp
0c1a8     04 4E 05 F1 | 	add	fp, #4
0c1ac     A7 2E 02 FB | 	rdlong	local09, fp
0c1b0     17 23 02 F1 | 	add	local03, local09
0c1b4     10 4E 05 F1 | 	add	fp, #16
0c1b8     A7 22 62 FC | 	wrlong	local03, fp
0c1bc     14 4E 85 F1 | 	sub	fp, #20
0c1c0                 | LR__0967
0c1c0     14 4E 05 F1 | 	add	fp, #20
0c1c4     A7 28 02 FB | 	rdlong	local06, fp
0c1c8     14 4E 85 F1 | 	sub	fp, #20
0c1cc     00 29 56 F2 | 	cmps	local06, #256 wc
0c1d0     A8 00 90 3D |  if_ae	jmp	#LR__0968
0c1d4     20 4E 05 F1 | 	add	fp, #32
0c1d8     A7 2E 02 FB | 	rdlong	local09, fp
0c1dc     09 2E 66 F0 | 	shl	local09, #9
0c1e0     2C 00 00 FF 
0c1e4     CC E4 05 F1 | 	add	objptr, ##22732
0c1e8     F2 2E 02 F1 | 	add	local09, objptr
0c1ec     0C 4E 85 F1 | 	sub	fp, #12
0c1f0     A7 2C 02 FB | 	rdlong	local08, fp
0c1f4     01 2C 66 F0 | 	shl	local08, #1
0c1f8     17 2D 02 F1 | 	add	local08, local09
0c1fc     14 4E 05 F1 | 	add	fp, #20
0c200     A7 12 02 FB | 	rdlong	arg01, fp
0c204     28 4E 85 F1 | 	sub	fp, #40
0c208     2C 00 00 FF 
0c20c     CC E4 85 F1 | 	sub	objptr, ##22732
0c210     01 14 06 F6 | 	mov	arg02, #1
0c214     78 32 B1 FD | 	call	#__system___float_tointeger
0c218     16 FB 51 FC | 	wrword	result1, local08
0c21c     28 4E 05 F1 | 	add	fp, #40
0c220     A7 12 02 FB | 	rdlong	arg01, fp
0c224     30 4E 05 F1 | 	add	fp, #48
0c228     A7 14 02 FB | 	rdlong	arg02, fp
0c22c     58 4E 85 F1 | 	sub	fp, #88
0c230     1F 14 E6 F4 | 	bitnot	arg02, #31
0c234     C0 29 B1 FD | 	call	#__system___float_add
0c238     28 4E 05 F1 | 	add	fp, #40
0c23c     A7 FA 61 FC | 	wrlong	result1, fp
0c240     28 4E 85 F1 | 	sub	fp, #40
0c244     FD 12 02 F6 | 	mov	arg01, result1
0c248     00 14 06 F6 | 	mov	arg02, #0
0c24c     01 16 06 F6 | 	mov	arg03, #1
0c250     A8 31 B1 FD | 	call	#__system___float_cmp
0c254     00 FA 55 F2 | 	cmps	result1, #0 wc
0c258     28 4E 05 C1 |  if_b	add	fp, #40
0c25c     A7 00 68 CC |  if_b	wrlong	#0, fp
0c260     28 4E 85 C1 |  if_b	sub	fp, #40
0c264     14 4E 05 F1 | 	add	fp, #20
0c268     A7 2E 02 FB | 	rdlong	local09, fp
0c26c     01 2E 06 F1 | 	add	local09, #1
0c270     A7 2E 62 FC | 	wrlong	local09, fp
0c274     14 4E 85 F1 | 	sub	fp, #20
0c278     44 FF 9F FD | 	jmp	#LR__0967
0c27c                 | LR__0968
0c27c     20 4E 05 F1 | 	add	fp, #32
0c280     A7 28 02 FB | 	rdlong	local06, fp
0c284     09 28 66 F0 | 	shl	local06, #9
0c288     2C 00 00 FF 
0c28c     CC E4 05 F1 | 	add	objptr, ##22732
0c290     F2 28 02 F1 | 	add	local06, objptr
0c294     FE 29 06 F1 | 	add	local06, #510
0c298     14 01 58 FC | 	wrword	#0, local06
0c29c                 | '   envbuf(channel,255)=0
0c29c                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0c29c     0C 4E 85 F1 | 	sub	fp, #12
0c2a0     A7 00 68 FC | 	wrlong	#0, fp
0c2a4     14 4E 85 F1 | 	sub	fp, #20
0c2a8     2C 00 00 FF 
0c2ac     CC E4 85 F1 | 	sub	objptr, ##22732
0c2b0                 | LR__0969
0c2b0     00 12 06 F6 | 	mov	arg01, #0
0c2b4     24 5B B1 FD | 	call	#__system___getiolock_0474
0c2b8     FD 12 02 F6 | 	mov	arg01, result1
0c2bc     8C 01 B1 FD | 	call	#__system___lockmem
0c2c0     20 4E 05 F1 | 	add	fp, #32
0c2c4     A7 2E 02 FB | 	rdlong	local09, fp
0c2c8     09 2E 66 F0 | 	shl	local09, #9
0c2cc     2C 00 00 FF 
0c2d0     CC E4 05 F1 | 	add	objptr, ##22732
0c2d4     F2 2E 02 F1 | 	add	local09, objptr
0c2d8     0C 4E 85 F1 | 	sub	fp, #12
0c2dc     A7 2C 02 FB | 	rdlong	local08, fp
0c2e0     14 4E 85 F1 | 	sub	fp, #20
0c2e4     01 2C 66 F0 | 	shl	local08, #1
0c2e8     17 2D 02 F1 | 	add	local08, local09
0c2ec     16 15 E2 FA | 	rdword	arg02, local08
0c2f0     00 12 06 F6 | 	mov	arg01, #0
0c2f4     00 16 06 F6 | 	mov	arg03, #0
0c2f8     0A 18 06 F6 | 	mov	arg04, #10
0c2fc     2C 00 00 FF 
0c300     CC E4 85 F1 | 	sub	objptr, ##22732
0c304     CC 0E B1 FD | 	call	#__system___basic_print_unsigned
0c308     00 12 06 F6 | 	mov	arg01, #0
0c30c     09 14 06 F6 | 	mov	arg02, #9
0c310     00 16 06 F6 | 	mov	arg03, #0
0c314     E0 0D B1 FD | 	call	#__system___basic_print_char
0c318     00 12 06 F6 | 	mov	arg01, #0
0c31c     BC 5A B1 FD | 	call	#__system___getiolock_0474
0c320     FD 00 68 FC | 	wrlong	#0, result1
0c324     14 4E 05 F1 | 	add	fp, #20
0c328     A7 2E 02 FB | 	rdlong	local09, fp
0c32c     01 2E 06 F1 | 	add	local09, #1
0c330     A7 2E 62 FC | 	wrlong	local09, fp
0c334     14 4E 85 F1 | 	sub	fp, #20
0c338     00 2F 56 F2 | 	cmps	local09, #256 wc
0c33c     70 FF 9F CD |  if_b	jmp	#LR__0969
0c340                 | LR__0970
0c340                 | LR__0971
0c340     A7 F0 03 F6 | 	mov	ptra, fp
0c344     B2 00 A0 FD | 	call	#popregs_
0c348                 | _do_defenv_ret
0c348     2D 00 64 FD | 	ret
0c34c                 | 
0c34c                 | ' 
0c34c                 | ' 
0c34c                 | ' sub do_play
0c34c                 | _do_play
0c34c     05 4A 05 F6 | 	mov	COUNT_, #5
0c350     A8 00 A0 FD | 	call	#pushregs_
0c354     74 F0 07 F1 | 	add	ptra, #116
0c358     60 4E 05 F1 | 	add	fp, #96
0c35c     F5 25 A2 FF 
0c360     A7 AA 68 FC | 	wrlong	##1145825877, fp
0c364                 | ' speed_coeff=815.6614449376854599406528189911
0c364                 | ' 
0c364                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0c364     5C 4E 85 F1 | 	sub	fp, #92
0c368     A7 00 68 FC | 	wrlong	#0, fp
0c36c     97 18 48 FB | 	callpa	#(@LR__0981-@LR__0980)>>2,fcache_load_ptr_
0c370                 | LR__0980
0c370     A7 16 02 FB | 	rdlong	arg03, fp
0c374     02 16 66 F0 | 	shl	arg03, #2
0c378     2C 4E 05 F1 | 	add	fp, #44
0c37c     A7 16 02 F1 | 	add	arg03, fp
0c380     00 00 E0 FF 
0c384     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0c388     2C 4E 85 F1 | 	sub	fp, #44
0c38c     A7 1E 02 FB | 	rdlong	local01, fp
0c390     01 1E 06 F1 | 	add	local01, #1
0c394     A7 1E 62 FC | 	wrlong	local01, fp
0c398     09 1E 56 F2 | 	cmps	local01, #9 wc
0c39c     D0 FF 9F CD |  if_b	jmp	#LR__0980
0c3a0                 | LR__0981
0c3a0     04 4E 85 F1 | 	sub	fp, #4
0c3a4     6A 00 00 FF 
0c3a8     64 E4 05 F1 | 	add	objptr, ##54372
0c3ac     F2 20 02 FB | 	rdlong	local02, objptr
0c3b0     10 23 02 F6 | 	mov	local03, local02
0c3b4     01 22 66 F0 | 	shl	local03, #1
0c3b8     10 23 02 F1 | 	add	local03, local02
0c3bc     02 22 66 F0 | 	shl	local03, #2
0c3c0     03 00 00 FF 
0c3c4     04 E4 85 F1 | 	sub	objptr, ##1540
0c3c8     F2 22 02 F1 | 	add	local03, objptr
0c3cc     11 25 02 FB | 	rdlong	local04, local03
0c3d0     A7 24 62 FC | 	wrlong	local04, fp
0c3d4                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0c3d4                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0c3d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c3d4                 | ' for i=numpar to 1 step -1 
0c3d4     04 4E 05 F1 | 	add	fp, #4
0c3d8     A7 24 62 FC | 	wrlong	local04, fp
0c3dc     04 4E 85 F1 | 	sub	fp, #4
0c3e0     67 00 00 FF 
0c3e4     60 E4 85 F1 | 	sub	objptr, ##52832
0c3e8                 | LR__0982
0c3e8     A4 DD BF FD | 	call	#_pop
0c3ec     54 4E 05 F1 | 	add	fp, #84
0c3f0     A7 FA 61 FC | 	wrlong	result1, fp
0c3f4     04 4E 05 F1 | 	add	fp, #4
0c3f8     A7 FC 61 FC | 	wrlong	result2, fp
0c3fc     04 4E 05 F1 | 	add	fp, #4
0c400     A7 FE 61 FC | 	wrlong	result3, fp
0c404     58 4E 85 F1 | 	sub	fp, #88
0c408     A7 22 02 FB | 	rdlong	local03, fp
0c40c     01 22 86 F1 | 	sub	local03, #1
0c410     02 22 66 F0 | 	shl	local03, #2
0c414     2C 4E 05 F1 | 	add	fp, #44
0c418     A7 22 02 F1 | 	add	local03, fp
0c41c     24 4E 05 F1 | 	add	fp, #36
0c420     A7 26 02 F6 | 	mov	local05, fp
0c424     13 13 02 F6 | 	mov	arg01, local05
0c428     54 4E 85 F1 | 	sub	fp, #84
0c42c     04 67 B0 FD | 	call	#_converttofloat
0c430     11 FB 61 FC | 	wrlong	result1, local03
0c434     04 4E 05 F1 | 	add	fp, #4
0c438     A7 1E 02 FB | 	rdlong	local01, fp
0c43c     01 1E 86 F1 | 	sub	local01, #1
0c440     A7 1E 62 FC | 	wrlong	local01, fp
0c444     04 4E 85 F1 | 	sub	fp, #4
0c448     01 1E 56 F2 | 	cmps	local01, #1 wc
0c44c     98 FF 9F 3D |  if_ae	jmp	#LR__0982
0c450                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0c450     30 4E 05 F1 | 	add	fp, #48
0c454     A7 12 02 FB | 	rdlong	arg01, fp
0c458     30 4E 85 F1 | 	sub	fp, #48
0c45c     00 14 06 F6 | 	mov	arg02, #0
0c460     01 16 06 F6 | 	mov	arg03, #1
0c464     94 2F B1 FD | 	call	#__system___float_cmp
0c468     00 FA 55 F2 | 	cmps	result1, #0 wc
0c46c     0C 4E 05 C1 |  if_b	add	fp, #12
0c470     A7 00 68 CC |  if_b	wrlong	#0, fp
0c474     0C 4E 85 C1 |  if_b	sub	fp, #12
0c478     20 00 90 CD |  if_b	jmp	#LR__0983
0c47c     30 4E 05 F1 | 	add	fp, #48
0c480     A7 12 02 FB | 	rdlong	arg01, fp
0c484     30 4E 85 F1 | 	sub	fp, #48
0c488     01 14 06 F6 | 	mov	arg02, #1
0c48c     00 30 B1 FD | 	call	#__system___float_tointeger
0c490     0C 4E 05 F1 | 	add	fp, #12
0c494     A7 FA 61 FC | 	wrlong	result1, fp
0c498     0C 4E 85 F1 | 	sub	fp, #12
0c49c                 | LR__0983
0c49c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0c49c     34 4E 05 F1 | 	add	fp, #52
0c4a0     A7 12 02 FB | 	rdlong	arg01, fp
0c4a4     34 4E 85 F1 | 	sub	fp, #52
0c4a8     00 14 06 F6 | 	mov	arg02, #0
0c4ac     01 16 06 F6 | 	mov	arg03, #1
0c4b0     48 2F B1 FD | 	call	#__system___float_cmp
0c4b4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c4b8     40 00 90 3D |  if_ae	jmp	#LR__0984
0c4bc     0C 4E 05 F1 | 	add	fp, #12
0c4c0     A7 20 02 FB | 	rdlong	local02, fp
0c4c4     10 23 02 F6 | 	mov	local03, local02
0c4c8     01 22 66 F0 | 	shl	local03, #1
0c4cc     10 23 02 F1 | 	add	local03, local02
0c4d0     03 22 66 F0 | 	shl	local03, #3
0c4d4     34 00 00 FF 
0c4d8     2C E5 05 F1 | 	add	objptr, ##26924
0c4dc     F2 22 02 F1 | 	add	local03, objptr
0c4e0     11 23 02 FB | 	rdlong	local03, local03
0c4e4     58 4E 05 F1 | 	add	fp, #88
0c4e8     A7 22 62 FC | 	wrlong	local03, fp
0c4ec     64 4E 85 F1 | 	sub	fp, #100
0c4f0     34 00 00 FF 
0c4f4     2C E5 85 F1 | 	sub	objptr, ##26924
0c4f8     44 00 90 FD | 	jmp	#LR__0985
0c4fc                 | LR__0984
0c4fc     34 4E 05 F1 | 	add	fp, #52
0c500     A7 24 02 FB | 	rdlong	local04, fp
0c504     30 4E 05 F1 | 	add	fp, #48
0c508     A7 24 62 FC | 	wrlong	local04, fp
0c50c     58 4E 85 F1 | 	sub	fp, #88
0c510     A7 20 02 FB | 	rdlong	local02, fp
0c514     10 23 02 F6 | 	mov	local03, local02
0c518     01 22 66 F0 | 	shl	local03, #1
0c51c     10 23 02 F1 | 	add	local03, local02
0c520     03 22 66 F0 | 	shl	local03, #3
0c524     34 00 00 FF 
0c528     2C E5 05 F1 | 	add	objptr, ##26924
0c52c     F2 22 02 F1 | 	add	local03, objptr
0c530     0C 4E 85 F1 | 	sub	fp, #12
0c534     11 25 62 FC | 	wrlong	local04, local03
0c538     34 00 00 FF 
0c53c     2C E5 85 F1 | 	sub	objptr, ##26924
0c540                 | LR__0985
0c540                 | ' if params(2)<0 orelse params(2)>16.384 then vol=channels(channel).vol else vol=params(2) : channels(channel).vol=vol
0c540     38 4E 05 F1 | 	add	fp, #56
0c544     A7 12 02 FB | 	rdlong	arg01, fp
0c548     38 4E 85 F1 | 	sub	fp, #56
0c54c     00 14 06 F6 | 	mov	arg02, #0
0c550     01 16 06 F6 | 	mov	arg03, #1
0c554     A4 2E B1 FD | 	call	#__system___float_cmp
0c558     00 FA 55 F2 | 	cmps	result1, #0 wc
0c55c     24 00 90 CD |  if_b	jmp	#LR__0986
0c560     38 4E 05 F1 | 	add	fp, #56
0c564     A7 12 02 FB | 	rdlong	arg01, fp
0c568     38 4E 85 F1 | 	sub	fp, #56
0c56c     89 C1 20 FF 
0c570     6F 14 06 F6 | 	mov	arg02, ##1099108975
0c574     01 16 66 F6 | 	neg	arg03, #1
0c578     80 2E B1 FD | 	call	#__system___float_cmp
0c57c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c580     44 00 90 CD |  if_b	jmp	#LR__0987
0c584                 | LR__0986
0c584     0C 4E 05 F1 | 	add	fp, #12
0c588     A7 20 02 FB | 	rdlong	local02, fp
0c58c     10 23 02 F6 | 	mov	local03, local02
0c590     01 22 66 F0 | 	shl	local03, #1
0c594     10 23 02 F1 | 	add	local03, local02
0c598     03 22 66 F0 | 	shl	local03, #3
0c59c     34 00 00 FF 
0c5a0     2C E5 05 F1 | 	add	objptr, ##26924
0c5a4     F2 22 02 F1 | 	add	local03, objptr
0c5a8     0C 22 06 F1 | 	add	local03, #12
0c5ac     11 23 02 FB | 	rdlong	local03, local03
0c5b0     60 4E 05 F1 | 	add	fp, #96
0c5b4     A7 22 62 FC | 	wrlong	local03, fp
0c5b8     6C 4E 85 F1 | 	sub	fp, #108
0c5bc     34 00 00 FF 
0c5c0     2C E5 85 F1 | 	sub	objptr, ##26924
0c5c4     48 00 90 FD | 	jmp	#LR__0988
0c5c8                 | LR__0987
0c5c8     38 4E 05 F1 | 	add	fp, #56
0c5cc     A7 24 02 FB | 	rdlong	local04, fp
0c5d0     34 4E 05 F1 | 	add	fp, #52
0c5d4     A7 24 62 FC | 	wrlong	local04, fp
0c5d8     60 4E 85 F1 | 	sub	fp, #96
0c5dc     A7 20 02 FB | 	rdlong	local02, fp
0c5e0     10 23 02 F6 | 	mov	local03, local02
0c5e4     01 22 66 F0 | 	shl	local03, #1
0c5e8     10 23 02 F1 | 	add	local03, local02
0c5ec     03 22 66 F0 | 	shl	local03, #3
0c5f0     34 00 00 FF 
0c5f4     2C E5 05 F1 | 	add	objptr, ##26924
0c5f8     F2 22 02 F1 | 	add	local03, objptr
0c5fc     0C 4E 85 F1 | 	sub	fp, #12
0c600     0C 22 06 F1 | 	add	local03, #12
0c604     11 25 62 FC | 	wrlong	local04, local03
0c608     34 00 00 FF 
0c60c     2C E5 85 F1 | 	sub	objptr, ##26924
0c610                 | LR__0988
0c610                 | ' if params(3)<0 orelse params(3)>8.0 then wave=channels(channel).wave else wave=round(params(3)) : channels(channel).wave=wave
0c610     3C 4E 05 F1 | 	add	fp, #60
0c614     A7 12 02 FB | 	rdlong	arg01, fp
0c618     3C 4E 85 F1 | 	sub	fp, #60
0c61c     00 14 06 F6 | 	mov	arg02, #0
0c620     01 16 06 F6 | 	mov	arg03, #1
0c624     D4 2D B1 FD | 	call	#__system___float_cmp
0c628     00 FA 55 F2 | 	cmps	result1, #0 wc
0c62c     24 00 90 CD |  if_b	jmp	#LR__0989
0c630     3C 4E 05 F1 | 	add	fp, #60
0c634     A7 12 02 FB | 	rdlong	arg01, fp
0c638     3C 4E 85 F1 | 	sub	fp, #60
0c63c     00 80 20 FF 
0c640     00 14 06 F6 | 	mov	arg02, ##1090519040
0c644     01 16 66 F6 | 	neg	arg03, #1
0c648     B0 2D B1 FD | 	call	#__system___float_cmp
0c64c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c650     48 00 90 CD |  if_b	jmp	#LR__0990
0c654                 | LR__0989
0c654     0C 4E 05 F1 | 	add	fp, #12
0c658     A7 22 02 FB | 	rdlong	local03, fp
0c65c     11 27 02 F6 | 	mov	local05, local03
0c660     01 26 66 F0 | 	shl	local05, #1
0c664     11 27 02 F1 | 	add	local05, local03
0c668     03 26 66 F0 | 	shl	local05, #3
0c66c     34 00 00 FF 
0c670     2C E5 05 F1 | 	add	objptr, ##26924
0c674     F2 26 02 F1 | 	add	local05, objptr
0c678     04 26 06 F1 | 	add	local05, #4
0c67c     13 27 C2 FA | 	rdbyte	local05, local05
0c680     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c684     14 4E 05 F1 | 	add	fp, #20
0c688     A7 24 62 FC | 	wrlong	local04, fp
0c68c     20 4E 85 F1 | 	sub	fp, #32
0c690     34 00 00 FF 
0c694     2C E5 85 F1 | 	sub	objptr, ##26924
0c698     54 00 90 FD | 	jmp	#LR__0991
0c69c                 | LR__0990
0c69c     3C 4E 05 F1 | 	add	fp, #60
0c6a0     A7 12 02 FB | 	rdlong	arg01, fp
0c6a4     3C 4E 85 F1 | 	sub	fp, #60
0c6a8     01 14 06 F6 | 	mov	arg02, #1
0c6ac     E0 2D B1 FD | 	call	#__system___float_tointeger
0c6b0     20 4E 05 F1 | 	add	fp, #32
0c6b4     A7 FA 61 FC | 	wrlong	result1, fp
0c6b8     14 4E 85 F1 | 	sub	fp, #20
0c6bc     A7 20 02 FB | 	rdlong	local02, fp
0c6c0     10 23 02 F6 | 	mov	local03, local02
0c6c4     01 22 66 F0 | 	shl	local03, #1
0c6c8     10 23 02 F1 | 	add	local03, local02
0c6cc     03 22 66 F0 | 	shl	local03, #3
0c6d0     34 00 00 FF 
0c6d4     2C E5 05 F1 | 	add	objptr, ##26924
0c6d8     F2 22 02 F1 | 	add	local03, objptr
0c6dc     0C 4E 85 F1 | 	sub	fp, #12
0c6e0     04 22 06 F1 | 	add	local03, #4
0c6e4     11 FB 41 FC | 	wrbyte	result1, local03
0c6e8     34 00 00 FF 
0c6ec     2C E5 85 F1 | 	sub	objptr, ##26924
0c6f0                 | LR__0991
0c6f0                 | ' if params(4)<0 orelse params(4)>8.0 then env=channels(channel).env else env=round(params(4)) : channels(channel).env=env
0c6f0     40 4E 05 F1 | 	add	fp, #64
0c6f4     A7 12 02 FB | 	rdlong	arg01, fp
0c6f8     40 4E 85 F1 | 	sub	fp, #64
0c6fc     00 14 06 F6 | 	mov	arg02, #0
0c700     01 16 06 F6 | 	mov	arg03, #1
0c704     F4 2C B1 FD | 	call	#__system___float_cmp
0c708     00 FA 55 F2 | 	cmps	result1, #0 wc
0c70c     24 00 90 CD |  if_b	jmp	#LR__0992
0c710     40 4E 05 F1 | 	add	fp, #64
0c714     A7 12 02 FB | 	rdlong	arg01, fp
0c718     40 4E 85 F1 | 	sub	fp, #64
0c71c     00 80 20 FF 
0c720     00 14 06 F6 | 	mov	arg02, ##1090519040
0c724     01 16 66 F6 | 	neg	arg03, #1
0c728     D0 2C B1 FD | 	call	#__system___float_cmp
0c72c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c730     48 00 90 CD |  if_b	jmp	#LR__0993
0c734                 | LR__0992
0c734     0C 4E 05 F1 | 	add	fp, #12
0c738     A7 22 02 FB | 	rdlong	local03, fp
0c73c     11 27 02 F6 | 	mov	local05, local03
0c740     01 26 66 F0 | 	shl	local05, #1
0c744     11 27 02 F1 | 	add	local05, local03
0c748     03 26 66 F0 | 	shl	local05, #3
0c74c     34 00 00 FF 
0c750     2C E5 05 F1 | 	add	objptr, ##26924
0c754     F2 26 02 F1 | 	add	local05, objptr
0c758     05 26 06 F1 | 	add	local05, #5
0c75c     13 27 C2 FA | 	rdbyte	local05, local05
0c760     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c764     18 4E 05 F1 | 	add	fp, #24
0c768     A7 24 62 FC | 	wrlong	local04, fp
0c76c     24 4E 85 F1 | 	sub	fp, #36
0c770     34 00 00 FF 
0c774     2C E5 85 F1 | 	sub	objptr, ##26924
0c778     54 00 90 FD | 	jmp	#LR__0994
0c77c                 | LR__0993
0c77c     40 4E 05 F1 | 	add	fp, #64
0c780     A7 12 02 FB | 	rdlong	arg01, fp
0c784     40 4E 85 F1 | 	sub	fp, #64
0c788     01 14 06 F6 | 	mov	arg02, #1
0c78c     00 2D B1 FD | 	call	#__system___float_tointeger
0c790     24 4E 05 F1 | 	add	fp, #36
0c794     A7 FA 61 FC | 	wrlong	result1, fp
0c798     18 4E 85 F1 | 	sub	fp, #24
0c79c     A7 20 02 FB | 	rdlong	local02, fp
0c7a0     10 23 02 F6 | 	mov	local03, local02
0c7a4     01 22 66 F0 | 	shl	local03, #1
0c7a8     10 23 02 F1 | 	add	local03, local02
0c7ac     03 22 66 F0 | 	shl	local03, #3
0c7b0     34 00 00 FF 
0c7b4     2C E5 05 F1 | 	add	objptr, ##26924
0c7b8     F2 22 02 F1 | 	add	local03, objptr
0c7bc     0C 4E 85 F1 | 	sub	fp, #12
0c7c0     05 22 06 F1 | 	add	local03, #5
0c7c4     11 FB 41 FC | 	wrbyte	result1, local03
0c7c8     34 00 00 FF 
0c7cc     2C E5 85 F1 | 	sub	objptr, ##26924
0c7d0                 | LR__0994
0c7d0                 | ' if params(5)<0 orelse params(5)>1000.0 then slen=channels(channel).length else slen=params(5) : channels(channel).length=slen
0c7d0     44 4E 05 F1 | 	add	fp, #68
0c7d4     A7 12 02 FB | 	rdlong	arg01, fp
0c7d8     44 4E 85 F1 | 	sub	fp, #68
0c7dc     00 14 06 F6 | 	mov	arg02, #0
0c7e0     01 16 06 F6 | 	mov	arg03, #1
0c7e4     14 2C B1 FD | 	call	#__system___float_cmp
0c7e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c7ec     24 00 90 CD |  if_b	jmp	#LR__0995
0c7f0     44 4E 05 F1 | 	add	fp, #68
0c7f4     A7 12 02 FB | 	rdlong	arg01, fp
0c7f8     44 4E 85 F1 | 	sub	fp, #68
0c7fc     00 3D 22 FF 
0c800     00 14 06 F6 | 	mov	arg02, ##1148846080
0c804     01 16 66 F6 | 	neg	arg03, #1
0c808     F0 2B B1 FD | 	call	#__system___float_cmp
0c80c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c810     44 00 90 CD |  if_b	jmp	#LR__0996
0c814                 | LR__0995
0c814     0C 4E 05 F1 | 	add	fp, #12
0c818     A7 20 02 FB | 	rdlong	local02, fp
0c81c     10 23 02 F6 | 	mov	local03, local02
0c820     01 22 66 F0 | 	shl	local03, #1
0c824     10 23 02 F1 | 	add	local03, local02
0c828     03 22 66 F0 | 	shl	local03, #3
0c82c     34 00 00 FF 
0c830     2C E5 05 F1 | 	add	objptr, ##26924
0c834     F2 22 02 F1 | 	add	local03, objptr
0c838     08 22 06 F1 | 	add	local03, #8
0c83c     11 25 02 FB | 	rdlong	local04, local03
0c840     64 4E 05 F1 | 	add	fp, #100
0c844     A7 24 62 FC | 	wrlong	local04, fp
0c848     70 4E 85 F1 | 	sub	fp, #112
0c84c     34 00 00 FF 
0c850     2C E5 85 F1 | 	sub	objptr, ##26924
0c854     48 00 90 FD | 	jmp	#LR__0997
0c858                 | LR__0996
0c858     44 4E 05 F1 | 	add	fp, #68
0c85c     A7 24 02 FB | 	rdlong	local04, fp
0c860     2C 4E 05 F1 | 	add	fp, #44
0c864     A7 24 62 FC | 	wrlong	local04, fp
0c868     64 4E 85 F1 | 	sub	fp, #100
0c86c     A7 20 02 FB | 	rdlong	local02, fp
0c870     10 23 02 F6 | 	mov	local03, local02
0c874     01 22 66 F0 | 	shl	local03, #1
0c878     10 23 02 F1 | 	add	local03, local02
0c87c     03 22 66 F0 | 	shl	local03, #3
0c880     34 00 00 FF 
0c884     2C E5 05 F1 | 	add	objptr, ##26924
0c888     F2 22 02 F1 | 	add	local03, objptr
0c88c     0C 4E 85 F1 | 	sub	fp, #12
0c890     08 22 06 F1 | 	add	local03, #8
0c894     11 25 62 FC | 	wrlong	local04, local03
0c898     34 00 00 FF 
0c89c     2C E5 85 F1 | 	sub	objptr, ##26924
0c8a0                 | LR__0997
0c8a0                 | ' if params(6)<0 orelse params(6)>10000.0 then delay=channels(channel).delay else delay=round(params(6)) : channels(channel).delay=delay
0c8a0     48 4E 05 F1 | 	add	fp, #72
0c8a4     A7 12 02 FB | 	rdlong	arg01, fp
0c8a8     48 4E 85 F1 | 	sub	fp, #72
0c8ac     00 14 06 F6 | 	mov	arg02, #0
0c8b0     01 16 06 F6 | 	mov	arg03, #1
0c8b4     44 2B B1 FD | 	call	#__system___float_cmp
0c8b8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c8bc     24 00 90 CD |  if_b	jmp	#LR__0998
0c8c0     48 4E 05 F1 | 	add	fp, #72
0c8c4     A7 12 02 FB | 	rdlong	arg01, fp
0c8c8     48 4E 85 F1 | 	sub	fp, #72
0c8cc     20 0E 23 FF 
0c8d0     00 14 06 F6 | 	mov	arg02, ##1176256512
0c8d4     01 16 66 F6 | 	neg	arg03, #1
0c8d8     20 2B B1 FD | 	call	#__system___float_cmp
0c8dc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c8e0     48 00 90 CD |  if_b	jmp	#LR__0999
0c8e4                 | LR__0998
0c8e4     0C 4E 05 F1 | 	add	fp, #12
0c8e8     A7 22 02 FB | 	rdlong	local03, fp
0c8ec     11 27 02 F6 | 	mov	local05, local03
0c8f0     01 26 66 F0 | 	shl	local05, #1
0c8f4     11 27 02 F1 | 	add	local05, local03
0c8f8     03 26 66 F0 | 	shl	local05, #3
0c8fc     34 00 00 FF 
0c900     2C E5 05 F1 | 	add	objptr, ##26924
0c904     F2 26 02 F1 | 	add	local05, objptr
0c908     06 26 06 F1 | 	add	local05, #6
0c90c     13 27 E2 FA | 	rdword	local05, local05
0c910     13 25 32 F9 | 	getword	local04, local05, #0
0c914     1C 4E 05 F1 | 	add	fp, #28
0c918     A7 24 62 FC | 	wrlong	local04, fp
0c91c     28 4E 85 F1 | 	sub	fp, #40
0c920     34 00 00 FF 
0c924     2C E5 85 F1 | 	sub	objptr, ##26924
0c928     54 00 90 FD | 	jmp	#LR__1000
0c92c                 | LR__0999
0c92c     48 4E 05 F1 | 	add	fp, #72
0c930     A7 12 02 FB | 	rdlong	arg01, fp
0c934     48 4E 85 F1 | 	sub	fp, #72
0c938     01 14 06 F6 | 	mov	arg02, #1
0c93c     50 2B B1 FD | 	call	#__system___float_tointeger
0c940     28 4E 05 F1 | 	add	fp, #40
0c944     A7 FA 61 FC | 	wrlong	result1, fp
0c948     1C 4E 85 F1 | 	sub	fp, #28
0c94c     A7 20 02 FB | 	rdlong	local02, fp
0c950     10 23 02 F6 | 	mov	local03, local02
0c954     01 22 66 F0 | 	shl	local03, #1
0c958     10 23 02 F1 | 	add	local03, local02
0c95c     03 22 66 F0 | 	shl	local03, #3
0c960     34 00 00 FF 
0c964     2C E5 05 F1 | 	add	objptr, ##26924
0c968     F2 22 02 F1 | 	add	local03, objptr
0c96c     0C 4E 85 F1 | 	sub	fp, #12
0c970     06 22 06 F1 | 	add	local03, #6
0c974     11 FB 51 FC | 	wrword	result1, local03
0c978     34 00 00 FF 
0c97c     2C E5 85 F1 | 	sub	objptr, ##26924
0c980                 | LR__1000
0c980                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0c980     4C 4E 05 F1 | 	add	fp, #76
0c984     A7 12 02 FB | 	rdlong	arg01, fp
0c988     4C 4E 85 F1 | 	sub	fp, #76
0c98c     00 C0 5F FF 
0c990     00 14 06 F6 | 	mov	arg02, ##-1082130432
0c994     01 16 06 F6 | 	mov	arg03, #1
0c998     60 2A B1 FD | 	call	#__system___float_cmp
0c99c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c9a0     24 00 90 CD |  if_b	jmp	#LR__1001
0c9a4     4C 4E 05 F1 | 	add	fp, #76
0c9a8     A7 12 02 FB | 	rdlong	arg01, fp
0c9ac     4C 4E 85 F1 | 	sub	fp, #76
0c9b0     00 C0 1F FF 
0c9b4     00 14 06 F6 | 	mov	arg02, ##1065353216
0c9b8     01 16 66 F6 | 	neg	arg03, #1
0c9bc     3C 2A B1 FD | 	call	#__system___float_cmp
0c9c0     01 FA 55 F2 | 	cmps	result1, #1 wc
0c9c4     44 00 90 CD |  if_b	jmp	#LR__1002
0c9c8                 | LR__1001
0c9c8     0C 4E 05 F1 | 	add	fp, #12
0c9cc     A7 20 02 FB | 	rdlong	local02, fp
0c9d0     10 23 02 F6 | 	mov	local03, local02
0c9d4     01 22 66 F0 | 	shl	local03, #1
0c9d8     10 23 02 F1 | 	add	local03, local02
0c9dc     03 22 66 F0 | 	shl	local03, #3
0c9e0     34 00 00 FF 
0c9e4     2C E5 05 F1 | 	add	objptr, ##26924
0c9e8     F2 22 02 F1 | 	add	local03, objptr
0c9ec     10 22 06 F1 | 	add	local03, #16
0c9f0     11 27 02 FB | 	rdlong	local05, local03
0c9f4     5C 4E 05 F1 | 	add	fp, #92
0c9f8     A7 26 62 FC | 	wrlong	local05, fp
0c9fc     68 4E 85 F1 | 	sub	fp, #104
0ca00     34 00 00 FF 
0ca04     2C E5 85 F1 | 	sub	objptr, ##26924
0ca08     48 00 90 FD | 	jmp	#LR__1003
0ca0c                 | LR__1002
0ca0c     4C 4E 05 F1 | 	add	fp, #76
0ca10     A7 26 02 FB | 	rdlong	local05, fp
0ca14     1C 4E 05 F1 | 	add	fp, #28
0ca18     A7 26 62 FC | 	wrlong	local05, fp
0ca1c     5C 4E 85 F1 | 	sub	fp, #92
0ca20     A7 20 02 FB | 	rdlong	local02, fp
0ca24     10 23 02 F6 | 	mov	local03, local02
0ca28     01 22 66 F0 | 	shl	local03, #1
0ca2c     10 23 02 F1 | 	add	local03, local02
0ca30     03 22 66 F0 | 	shl	local03, #3
0ca34     34 00 00 FF 
0ca38     2C E5 05 F1 | 	add	objptr, ##26924
0ca3c     F2 22 02 F1 | 	add	local03, objptr
0ca40     0C 4E 85 F1 | 	sub	fp, #12
0ca44     10 22 06 F1 | 	add	local03, #16
0ca48     11 27 62 FC | 	wrlong	local05, local03
0ca4c     34 00 00 FF 
0ca50     2C E5 85 F1 | 	sub	objptr, ##26924
0ca54                 | LR__1003
0ca54                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0ca54     50 4E 05 F1 | 	add	fp, #80
0ca58     A7 12 02 FB | 	rdlong	arg01, fp
0ca5c     50 4E 85 F1 | 	sub	fp, #80
0ca60     00 14 06 F6 | 	mov	arg02, #0
0ca64     01 16 06 F6 | 	mov	arg03, #1
0ca68     90 29 B1 FD | 	call	#__system___float_cmp
0ca6c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ca70     24 00 90 CD |  if_b	jmp	#LR__1004
0ca74     50 4E 05 F1 | 	add	fp, #80
0ca78     A7 12 02 FB | 	rdlong	arg01, fp
0ca7c     50 4E 85 F1 | 	sub	fp, #80
0ca80     80 BF 21 FF 
0ca84     00 14 06 F6 | 	mov	arg02, ##1132396544
0ca88     01 16 66 F6 | 	neg	arg03, #1
0ca8c     6C 29 B1 FD | 	call	#__system___float_cmp
0ca90     01 FA 55 F2 | 	cmps	result1, #1 wc
0ca94     44 00 90 CD |  if_b	jmp	#LR__1005
0ca98                 | LR__1004
0ca98     0C 4E 05 F1 | 	add	fp, #12
0ca9c     A7 22 02 FB | 	rdlong	local03, fp
0caa0     11 27 02 F6 | 	mov	local05, local03
0caa4     01 26 66 F0 | 	shl	local05, #1
0caa8     11 27 02 F1 | 	add	local05, local03
0caac     03 26 66 F0 | 	shl	local05, #3
0cab0     34 00 00 FF 
0cab4     2C E5 05 F1 | 	add	objptr, ##26924
0cab8     F2 26 02 F1 | 	add	local05, objptr
0cabc     14 26 06 F1 | 	add	local05, #20
0cac0     13 25 E2 FA | 	rdword	local04, local05
0cac4     20 4E 05 F1 | 	add	fp, #32
0cac8     A7 24 62 FC | 	wrlong	local04, fp
0cacc     2C 4E 85 F1 | 	sub	fp, #44
0cad0     34 00 00 FF 
0cad4     2C E5 85 F1 | 	sub	objptr, ##26924
0cad8     54 00 90 FD | 	jmp	#LR__1006
0cadc                 | LR__1005
0cadc     50 4E 05 F1 | 	add	fp, #80
0cae0     A7 12 02 FB | 	rdlong	arg01, fp
0cae4     50 4E 85 F1 | 	sub	fp, #80
0cae8     01 14 06 F6 | 	mov	arg02, #1
0caec     A0 29 B1 FD | 	call	#__system___float_tointeger
0caf0     2C 4E 05 F1 | 	add	fp, #44
0caf4     A7 FA 61 FC | 	wrlong	result1, fp
0caf8     20 4E 85 F1 | 	sub	fp, #32
0cafc     A7 20 02 FB | 	rdlong	local02, fp
0cb00     10 23 02 F6 | 	mov	local03, local02
0cb04     01 22 66 F0 | 	shl	local03, #1
0cb08     10 23 02 F1 | 	add	local03, local02
0cb0c     03 22 66 F0 | 	shl	local03, #3
0cb10     34 00 00 FF 
0cb14     2C E5 05 F1 | 	add	objptr, ##26924
0cb18     F2 22 02 F1 | 	add	local03, objptr
0cb1c     0C 4E 85 F1 | 	sub	fp, #12
0cb20     14 22 06 F1 | 	add	local03, #20
0cb24     11 FB 51 FC | 	wrword	result1, local03
0cb28     34 00 00 FF 
0cb2c     2C E5 85 F1 | 	sub	objptr, ##26924
0cb30                 | LR__1006
0cb30     60 4E 05 F1 | 	add	fp, #96
0cb34     A7 12 02 FB | 	rdlong	arg01, fp
0cb38     10 4E 05 F1 | 	add	fp, #16
0cb3c     A7 14 02 FB | 	rdlong	arg02, fp
0cb40     70 4E 85 F1 | 	sub	fp, #112
0cb44     84 26 B1 FD | 	call	#__system___float_div
0cb48     FD 12 02 F6 | 	mov	arg01, result1
0cb4c     01 14 06 F6 | 	mov	arg02, #1
0cb50     3C 29 B1 FD | 	call	#__system___float_tointeger
0cb54     FD 24 02 F6 | 	mov	local04, result1
0cb58     14 4E 05 F1 | 	add	fp, #20
0cb5c     A7 24 62 FC | 	wrlong	local04, fp
0cb60     54 4E 05 F1 | 	add	fp, #84
0cb64     A7 14 02 FB | 	rdlong	arg02, fp
0cb68     68 4E 85 F1 | 	sub	fp, #104
0cb6c     00 00 23 FF 
0cb70     00 12 06 F6 | 	mov	arg01, ##1174405120
0cb74     50 24 B1 FD | 	call	#__system___float_mul
0cb78     FD 12 02 F6 | 	mov	arg01, result1
0cb7c     01 14 06 F6 | 	mov	arg02, #1
0cb80     0C 29 B1 FD | 	call	#__system___float_tointeger
0cb84     0D 24 C6 F9 | 	decod	local04, #13
0cb88     FD 24 02 F1 | 	add	local04, result1
0cb8c     18 4E 05 F1 | 	add	fp, #24
0cb90     A7 24 62 FC | 	wrlong	local04, fp
0cb94     54 4E 05 F1 | 	add	fp, #84
0cb98     A7 14 02 FB | 	rdlong	arg02, fp
0cb9c     6C 4E 85 F1 | 	sub	fp, #108
0cba0     00 3D 22 FF 
0cba4     00 12 06 F6 | 	mov	arg01, ##1148846080
0cba8     1C 24 B1 FD | 	call	#__system___float_mul
0cbac     FD 12 02 F6 | 	mov	arg01, result1
0cbb0     01 14 06 F6 | 	mov	arg02, #1
0cbb4     D8 28 B1 FD | 	call	#__system___float_tointeger
0cbb8     1C 4E 05 F1 | 	add	fp, #28
0cbbc     A7 FA 61 FC | 	wrlong	result1, fp
0cbc0     56 00 00 FF 
0cbc4     F4 E5 05 F1 | 	add	objptr, ##44532
0cbc8     F2 24 02 FB | 	rdlong	local04, objptr
0cbcc     56 00 00 FF 
0cbd0     F4 E5 85 F1 | 	sub	objptr, ##44532
0cbd4     10 4E 85 F1 | 	sub	fp, #16
0cbd8     A7 20 02 FB | 	rdlong	local02, fp
0cbdc     06 20 66 F0 | 	shl	local02, #6
0cbe0     10 25 02 F1 | 	add	local04, local02
0cbe4     04 4E 85 F1 | 	sub	fp, #4
0cbe8     A7 24 62 FC | 	wrlong	local04, fp
0cbec     5C 4E 05 F1 | 	add	fp, #92
0cbf0     A7 12 02 FB | 	rdlong	arg01, fp
0cbf4     64 4E 85 F1 | 	sub	fp, #100
0cbf8     72 3F 20 FF 
0cbfc     EA 14 06 F6 | 	mov	arg02, ##1082057962
0cc00     C4 23 B1 FD | 	call	#__system___float_mul
0cc04     FD 12 02 F6 | 	mov	arg01, result1
0cc08     01 14 06 F6 | 	mov	arg02, #1
0cc0c     80 28 B1 FD | 	call	#__system___float_tointeger
0cc10     10 4E 05 F1 | 	add	fp, #16
0cc14     A7 FA 61 FC | 	wrlong	result1, fp
0cc18                 | ' 
0cc18                 | ' speed=round(speed_coeff/slen)
0cc18                 | ' ipan=8192+round(8192*pan)
0cc18                 | ' ivol=round(1000.0*vol)
0cc18                 | ' base2=base+64*channel
0cc18                 | ' skip=round(freq*3.9827219) 
0cc18                 | ' if wave <8 then 
0cc18     10 4E 05 F1 | 	add	fp, #16
0cc1c     A7 24 02 FB | 	rdlong	local04, fp
0cc20     20 4E 85 F1 | 	sub	fp, #32
0cc24     08 24 56 F2 | 	cmps	local04, #8 wc
0cc28     40 00 90 3D |  if_ae	jmp	#LR__1007
0cc2c     08 4E 05 F1 | 	add	fp, #8
0cc30     A7 12 02 FB | 	rdlong	arg01, fp
0cc34     08 12 06 F1 | 	add	arg01, #8
0cc38     18 4E 05 F1 | 	add	fp, #24
0cc3c     A7 14 02 FB | 	rdlong	arg02, fp
0cc40     20 4E 85 F1 | 	sub	fp, #32
0cc44     0B 14 66 F0 | 	shl	arg02, #11
0cc48     0C 00 00 FF 
0cc4c     CC E4 05 F1 | 	add	objptr, ##6348
0cc50     F2 14 02 F1 | 	add	arg02, objptr
0cc54     0C 00 00 FF 
0cc58     CC E4 85 F1 | 	sub	objptr, ##6348
0cc5c     00 00 60 FF 
0cc60     00 14 06 F1 | 	add	arg02, ##-1073741824
0cc64     09 15 62 FC | 	wrlong	arg02, arg01
0cc68     18 00 90 FD | 	jmp	#LR__1008
0cc6c                 | LR__1007
0cc6c     08 4E 05 F1 | 	add	fp, #8
0cc70     A7 12 02 FB | 	rdlong	arg01, fp
0cc74     08 4E 85 F1 | 	sub	fp, #8
0cc78     08 12 06 F1 | 	add	arg01, #8
0cc7c     00 00 E4 FF 
0cc80     09 01 68 FC | 	wrlong	##-939524096, arg01
0cc84                 | LR__1008
0cc84     08 4E 05 F1 | 	add	fp, #8
0cc88     A7 12 02 FB | 	rdlong	arg01, fp
0cc8c     10 12 06 F1 | 	add	arg01, #16
0cc90     04 00 80 FF 
0cc94     09 01 68 FC | 	wrlong	##2048, arg01
0cc98     A7 12 02 FB | 	rdlong	arg01, fp
0cc9c     0C 12 06 F1 | 	add	arg01, #12
0cca0     09 01 68 FC | 	wrlong	#0, arg01
0cca4     A7 12 02 FB | 	rdlong	arg01, fp
0cca8     14 12 06 F1 | 	add	arg01, #20
0ccac     14 4E 05 F1 | 	add	fp, #20
0ccb0     A7 14 02 FB | 	rdlong	arg02, fp
0ccb4     09 15 52 FC | 	wrword	arg02, arg01
0ccb8     14 4E 85 F1 | 	sub	fp, #20
0ccbc     A7 12 02 FB | 	rdlong	arg01, fp
0ccc0     16 12 06 F1 | 	add	arg01, #22
0ccc4     10 4E 05 F1 | 	add	fp, #16
0ccc8     A7 14 02 FB | 	rdlong	arg02, fp
0cccc     09 15 52 FC | 	wrword	arg02, arg01
0ccd0                 | '   
0ccd0                 | ' lpoke base2+16,2048
0ccd0                 | ' lpoke base2+12,0
0ccd0                 | ' dpoke base2+20,ivol 
0ccd0                 | ' dpoke base2+22,ipan 
0ccd0                 | ' if wave<8 then
0ccd0     08 4E 05 F1 | 	add	fp, #8
0ccd4     A7 24 02 FB | 	rdlong	local04, fp
0ccd8     20 4E 85 F1 | 	sub	fp, #32
0ccdc     08 24 56 F2 | 	cmps	local04, #8 wc
0cce0     2C 00 90 3D |  if_ae	jmp	#LR__1009
0cce4     08 4E 05 F1 | 	add	fp, #8
0cce8     A7 12 02 FB | 	rdlong	arg01, fp
0ccec     18 12 06 F1 | 	add	arg01, #24
0ccf0     09 29 58 FC | 	wrword	#20, arg01
0ccf4     A7 12 02 FB | 	rdlong	arg01, fp
0ccf8     1A 12 06 F1 | 	add	arg01, #26
0ccfc     08 4E 05 F1 | 	add	fp, #8
0cd00     A7 14 02 FB | 	rdlong	arg02, fp
0cd04     10 4E 85 F1 | 	sub	fp, #16
0cd08     09 15 52 FC | 	wrword	arg02, arg01
0cd0c     48 00 90 FD | 	jmp	#LR__1010
0cd10                 | LR__1009
0cd10     08 4E 05 F1 | 	add	fp, #8
0cd14     A7 24 02 FB | 	rdlong	local04, fp
0cd18     18 24 06 F1 | 	add	local04, #24
0cd1c     5C 4E 05 F1 | 	add	fp, #92
0cd20     A7 14 02 FB | 	rdlong	arg02, fp
0cd24     64 4E 85 F1 | 	sub	fp, #100
0cd28     58 D0 24 FF 
0cd2c     B0 13 06 F6 | 	mov	arg01, ##1235268016
0cd30     98 24 B1 FD | 	call	#__system___float_div
0cd34     FD 12 02 F6 | 	mov	arg01, result1
0cd38     01 14 06 F6 | 	mov	arg02, #1
0cd3c     50 27 B1 FD | 	call	#__system___float_tointeger
0cd40     12 FB 51 FC | 	wrword	result1, local04
0cd44     08 4E 05 F1 | 	add	fp, #8
0cd48     A7 12 02 FB | 	rdlong	arg01, fp
0cd4c     08 4E 85 F1 | 	sub	fp, #8
0cd50     1A 12 06 F1 | 	add	arg01, #26
0cd54     09 01 5A FC | 	wrword	#256, arg01
0cd58                 | LR__1010
0cd58     08 4E 05 F1 | 	add	fp, #8
0cd5c     A7 12 02 FB | 	rdlong	arg01, fp
0cd60     20 12 06 F1 | 	add	arg01, #32
0cd64     09 01 68 FC | 	wrlong	#0, arg01
0cd68                 | ' 'dpoke base2+28,$4000_0000
0cd68                 | ' lpoke base2+32,0 
0cd68                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0cd68     1C 4E 05 F1 | 	add	fp, #28
0cd6c     A7 24 02 FB | 	rdlong	local04, fp
0cd70     24 4E 85 F1 | 	sub	fp, #36
0cd74     08 24 0E F2 | 	cmp	local04, #8 wz
0cd78     18 00 90 5D |  if_ne	jmp	#LR__1011
0cd7c     08 4E 05 F1 | 	add	fp, #8
0cd80     A7 12 02 FB | 	rdlong	arg01, fp
0cd84     08 4E 85 F1 | 	sub	fp, #8
0cd88     24 12 06 F1 | 	add	arg01, #36
0cd8c     09 01 68 FC | 	wrlong	#0, arg01
0cd90     34 00 90 FD | 	jmp	#LR__1012
0cd94                 | LR__1011
0cd94     08 4E 05 F1 | 	add	fp, #8
0cd98     A7 12 02 FB | 	rdlong	arg01, fp
0cd9c     24 12 06 F1 | 	add	arg01, #36
0cda0     1C 4E 05 F1 | 	add	fp, #28
0cda4     A7 14 02 FB | 	rdlong	arg02, fp
0cda8     24 4E 85 F1 | 	sub	fp, #36
0cdac     09 14 66 F0 | 	shl	arg02, #9
0cdb0     2C 00 00 FF 
0cdb4     CC E4 05 F1 | 	add	objptr, ##22732
0cdb8     F2 14 02 F1 | 	add	arg02, objptr
0cdbc     2C 00 00 FF 
0cdc0     CC E4 85 F1 | 	sub	objptr, ##22732
0cdc4     09 15 62 FC | 	wrlong	arg02, arg01
0cdc8                 | LR__1012
0cdc8     08 4E 05 F1 | 	add	fp, #8
0cdcc     A7 12 02 FB | 	rdlong	arg01, fp
0cdd0     28 12 06 F1 | 	add	arg01, #40
0cdd4     0C 4E 05 F1 | 	add	fp, #12
0cdd8     A7 14 02 FB | 	rdlong	arg02, fp
0cddc     09 15 62 FC | 	wrlong	arg02, arg01
0cde0     0C 4E 85 F1 | 	sub	fp, #12
0cde4     A7 12 02 FB | 	rdlong	arg01, fp
0cde8     2C 12 06 F1 | 	add	arg01, #44
0cdec     24 4E 05 F1 | 	add	fp, #36
0cdf0     A7 14 02 FB | 	rdlong	arg02, fp
0cdf4     09 15 62 FC | 	wrlong	arg02, arg01
0cdf8                 | ' lpoke base2+40,speed' speed
0cdf8                 | ' lpoke base2+44,sus 'len
0cdf8                 | ' 
0cdf8                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0cdf8     04 4E 85 F1 | 	sub	fp, #4
0cdfc     A7 24 02 FB | 	rdlong	local04, fp
0ce00     28 4E 85 F1 | 	sub	fp, #40
0ce04     01 24 56 F2 | 	cmps	local04, #1 wc
0ce08     28 4E 05 31 |  if_ae	add	fp, #40
0ce0c     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0ce10     28 4E 85 31 |  if_ae	sub	fp, #40
0ce14     28 F9 B0 3D |  if_ae	call	#__system___waitms
0ce18     A7 F0 03 F6 | 	mov	ptra, fp
0ce1c     B2 00 A0 FD | 	call	#popregs_
0ce20                 | _do_play_ret
0ce20     2D 00 64 FD | 	ret
0ce24                 | 
0ce24                 | ' 
0ce24                 | ' sub do_release
0ce24                 | _do_release
0ce24     00 4A 05 F6 | 	mov	COUNT_, #0
0ce28     A8 00 A0 FD | 	call	#pushregs_
0ce2c     10 F0 07 F1 | 	add	ptra, #16
0ce30     5C D3 BF FD | 	call	#_pop
0ce34     FF 14 02 F6 | 	mov	arg02, result3
0ce38     A7 FA 61 FC | 	wrlong	result1, fp
0ce3c     04 4E 05 F1 | 	add	fp, #4
0ce40     A7 FC 61 FC | 	wrlong	result2, fp
0ce44     04 4E 05 F1 | 	add	fp, #4
0ce48     A7 14 62 FC | 	wrlong	arg02, fp
0ce4c     08 4E 85 F1 | 	sub	fp, #8
0ce50     A7 12 02 F6 | 	mov	arg01, fp
0ce54     30 5C B0 FD | 	call	#_converttoint
0ce58     0C 4E 05 F1 | 	add	fp, #12
0ce5c     A7 FA 61 FC | 	wrlong	result1, fp
0ce60                 | ' t1=pop()
0ce60                 | ' channel=converttoint(t1)
0ce60                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0ce60     0C 4E 85 F1 | 	sub	fp, #12
0ce64     00 FA 55 F2 | 	cmps	result1, #0 wc
0ce68     44 00 90 CD |  if_b	jmp	#LR__1020
0ce6c     0C 4E 05 F1 | 	add	fp, #12
0ce70     A7 14 02 FB | 	rdlong	arg02, fp
0ce74     0C 4E 85 F1 | 	sub	fp, #12
0ce78     08 14 56 F2 | 	cmps	arg02, #8 wc
0ce7c     30 00 90 3D |  if_ae	jmp	#LR__1020
0ce80     56 00 00 FF 
0ce84     F4 E5 05 F1 | 	add	objptr, ##44532
0ce88     F2 12 02 FB | 	rdlong	arg01, objptr
0ce8c     56 00 00 FF 
0ce90     F4 E5 85 F1 | 	sub	objptr, ##44532
0ce94     0C 4E 05 F1 | 	add	fp, #12
0ce98     A7 14 02 FB | 	rdlong	arg02, fp
0ce9c     0C 4E 85 F1 | 	sub	fp, #12
0cea0     06 14 66 F0 | 	shl	arg02, #6
0cea4     0A 13 02 F1 | 	add	arg01, arg02
0cea8     2C 12 06 F1 | 	add	arg01, #44
0ceac     09 FF 69 FC | 	wrlong	#255, arg01
0ceb0                 | LR__1020
0ceb0     A7 F0 03 F6 | 	mov	ptra, fp
0ceb4     B2 00 A0 FD | 	call	#popregs_
0ceb8                 | _do_release_ret
0ceb8     2D 00 64 FD | 	ret
0cebc                 | 
0cebc                 | ' 
0cebc                 | ' 
0cebc                 | ' sub do_defsnd
0cebc                 | _do_defsnd
0cebc     05 4A 05 F6 | 	mov	COUNT_, #5
0cec0     A8 00 A0 FD | 	call	#pushregs_
0cec4     88 F0 07 F1 | 	add	ptra, #136
0cec8     6A 00 00 FF 
0cecc     64 E4 05 F1 | 	add	objptr, ##54372
0ced0     F2 1A 02 FB | 	rdlong	arg05, objptr
0ced4     0D 19 02 F6 | 	mov	arg04, arg05
0ced8     01 18 66 F0 | 	shl	arg04, #1
0cedc     0D 19 02 F1 | 	add	arg04, arg05
0cee0     02 18 66 F0 | 	shl	arg04, #2
0cee4     03 00 00 FF 
0cee8     04 E4 85 F1 | 	sub	objptr, ##1540
0ceec     F2 18 02 F1 | 	add	arg04, objptr
0cef0     0C 1B 02 FB | 	rdlong	arg05, arg04
0cef4     A7 1A 62 FC | 	wrlong	arg05, fp
0cef8                 | ' 
0cef8                 | ' numpar=compiledline(lineptr_e).result.uresult
0cef8                 | ' 
0cef8                 | ' 
0cef8                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0cef8                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0cef8                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0cef8                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0cef8                 | ' 
0cef8                 | ' if numpar<2 then return
0cef8     02 1A 56 F2 | 	cmps	arg05, #2 wc
0cefc     67 00 00 FF 
0cf00     60 E4 85 F1 | 	sub	objptr, ##52832
0cf04     A0 09 90 CD |  if_b	jmp	#LR__1058
0cf08                 | ' 
0cf08                 | '   
0cf08                 | ' if numpar=2 then
0cf08     A7 1A 02 FB | 	rdlong	arg05, fp
0cf0c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0cf10     0C 04 90 5D |  if_ne	jmp	#LR__1041
0cf14     78 D2 BF FD | 	call	#_pop
0cf18     FF 1A 02 F6 | 	mov	arg05, result3
0cf1c     2C 4E 05 F1 | 	add	fp, #44
0cf20     A7 FA 61 FC | 	wrlong	result1, fp
0cf24     04 4E 05 F1 | 	add	fp, #4
0cf28     A7 FC 61 FC | 	wrlong	result2, fp
0cf2c     04 4E 05 F1 | 	add	fp, #4
0cf30     A7 1A 62 FC | 	wrlong	arg05, fp
0cf34                 | '   t1=pop()
0cf34                 | '   if t1.result_type=result_string2 then 
0cf34     34 4E 85 F1 | 	sub	fp, #52
0cf38     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0cf3c     20 00 90 5D |  if_ne	jmp	#LR__1030
0cf40     2C 4E 05 F1 | 	add	fp, #44
0cf44     A7 12 02 FB | 	rdlong	arg01, fp
0cf48     2C 4E 85 F1 | 	sub	fp, #44
0cf4c     88 11 B0 FD | 	call	#_convertstring
0cf50     38 4E 05 F1 | 	add	fp, #56
0cf54     A7 FA 61 FC | 	wrlong	result1, fp
0cf58     38 4E 85 F1 | 	sub	fp, #56
0cf5c     58 00 90 FD | 	jmp	#LR__1033
0cf60                 | LR__1030
0cf60     34 4E 05 F1 | 	add	fp, #52
0cf64     A7 1A 02 FB | 	rdlong	arg05, fp
0cf68     34 4E 85 F1 | 	sub	fp, #52
0cf6c     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0cf70     18 00 90 5D |  if_ne	jmp	#LR__1031
0cf74     2C 4E 05 F1 | 	add	fp, #44
0cf78     A7 1A 02 FB | 	rdlong	arg05, fp
0cf7c     0C 4E 05 F1 | 	add	fp, #12
0cf80     A7 1A 62 FC | 	wrlong	arg05, fp
0cf84     38 4E 85 F1 | 	sub	fp, #56
0cf88     2C 00 90 FD | 	jmp	#LR__1032
0cf8c                 | LR__1031
0cf8c     60 01 00 FF 
0cf90     2B 1A 06 F6 | 	mov	arg05, ##@LR__4928
0cf94     38 4E 05 F1 | 	add	fp, #56
0cf98     A7 1A 62 FC | 	wrlong	arg05, fp
0cf9c     0C 4E 85 F1 | 	sub	fp, #12
0cfa0     A7 12 02 F6 | 	mov	arg01, fp
0cfa4     2C 4E 85 F1 | 	sub	fp, #44
0cfa8     DC 5A B0 FD | 	call	#_converttoint
0cfac     14 4E 05 F1 | 	add	fp, #20
0cfb0     A7 FA 61 FC | 	wrlong	result1, fp
0cfb4     14 4E 85 F1 | 	sub	fp, #20
0cfb8                 | LR__1032
0cfb8                 | LR__1033
0cfb8                 | ' 
0cfb8                 | '     
0cfb8                 | '   if s<>"" then 
0cfb8     38 4E 05 F1 | 	add	fp, #56
0cfbc     A7 12 02 FB | 	rdlong	arg01, fp
0cfc0     38 4E 85 F1 | 	sub	fp, #56
0cfc4     60 01 00 FF 
0cfc8     2C 14 06 F6 | 	mov	arg02, ##@LR__4929
0cfcc     A4 F4 B0 FD | 	call	#__system___string_cmp
0cfd0     00 FA 0D F2 | 	cmp	result1, #0 wz
0cfd4     88 01 90 AD |  if_e	jmp	#LR__1035
0cfd8     B4 D1 BF FD | 	call	#_pop
0cfdc     FF 1A 02 F6 | 	mov	arg05, result3
0cfe0     2C 4E 05 F1 | 	add	fp, #44
0cfe4     A7 FA 61 FC | 	wrlong	result1, fp
0cfe8     04 4E 05 F1 | 	add	fp, #4
0cfec     A7 FC 61 FC | 	wrlong	result2, fp
0cff0     04 4E 05 F1 | 	add	fp, #4
0cff4     A7 1A 62 FC | 	wrlong	arg05, fp
0cff8     08 4E 85 F1 | 	sub	fp, #8
0cffc     A7 12 02 F6 | 	mov	arg01, fp
0d000     2C 4E 85 F1 | 	sub	fp, #44
0d004     80 5A B0 FD | 	call	#_converttoint
0d008     10 4E 05 F1 | 	add	fp, #16
0d00c     A7 FA 61 FC | 	wrlong	result1, fp
0d010     10 4E 85 F1 | 	sub	fp, #16
0d014                 | '     t1=pop()
0d014                 | '     channel=converttoint(t1) 
0d014                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0d014     09 12 06 F6 | 	mov	arg01, #9
0d018     F4 43 B1 FD | 	call	#__system__close
0d01c     09 1E 06 F6 | 	mov	local01, #9
0d020     60 01 00 FF 
0d024     2D 12 06 F6 | 	mov	arg01, ##@LR__4930
0d028     38 4E 05 F1 | 	add	fp, #56
0d02c     A7 14 02 FB | 	rdlong	arg02, fp
0d030     38 4E 85 F1 | 	sub	fp, #56
0d034     70 F4 B0 FD | 	call	#__system___string_concat
0d038     FD 14 02 F6 | 	mov	arg02, result1
0d03c     0F 13 02 F6 | 	mov	arg01, local01
0d040     00 16 06 F6 | 	mov	arg03, #0
0d044     04 00 B1 FD | 	call	#__system___basic_open_string
0d048     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d04c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d050     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d054     7B 00 00 FF 
0d058     F8 E4 05 F1 | 	add	objptr, ##63224
0d05c     F2 FA 61 FC | 	wrlong	result1, objptr
0d060                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d060     7B 00 00 FF 
0d064     F8 E4 85 F1 | 	sub	objptr, ##63224
0d068     B0 00 90 AD |  if_e	jmp	#LR__1034
0d06c     00 12 06 F6 | 	mov	arg01, #0
0d070     68 4D B1 FD | 	call	#__system___getiolock_0474
0d074     FD 12 02 F6 | 	mov	arg01, result1
0d078     D0 F3 B0 FD | 	call	#__system___lockmem
0d07c     60 01 00 FF 
0d080     3A 14 06 F6 | 	mov	arg02, ##@LR__4931
0d084     00 12 06 F6 | 	mov	arg01, #0
0d088     00 16 06 F6 | 	mov	arg03, #0
0d08c     C0 00 B1 FD | 	call	#__system___basic_print_string
0d090     7B 00 00 FF 
0d094     F8 E4 05 F1 | 	add	objptr, ##63224
0d098     F2 14 02 FB | 	rdlong	arg02, objptr
0d09c     7B 00 00 FF 
0d0a0     F8 E4 85 F1 | 	sub	objptr, ##63224
0d0a4     00 12 06 F6 | 	mov	arg01, #0
0d0a8     00 16 06 F6 | 	mov	arg03, #0
0d0ac     0A 18 06 F6 | 	mov	arg04, #10
0d0b0     E0 00 B1 FD | 	call	#__system___basic_print_integer
0d0b4     60 01 00 FF 
0d0b8     48 14 06 F6 | 	mov	arg02, ##@LR__4932
0d0bc     00 12 06 F6 | 	mov	arg01, #0
0d0c0     00 16 06 F6 | 	mov	arg03, #0
0d0c4     88 00 B1 FD | 	call	#__system___basic_print_string
0d0c8     00 1E 06 F6 | 	mov	local01, #0
0d0cc     7B 00 00 FF 
0d0d0     F8 E4 05 F1 | 	add	objptr, ##63224
0d0d4     F2 12 02 FB | 	rdlong	arg01, objptr
0d0d8     7B 00 00 FF 
0d0dc     F8 E4 85 F1 | 	sub	objptr, ##63224
0d0e0     F8 19 B1 FD | 	call	#__system___strerror
0d0e4     FD 14 02 F6 | 	mov	arg02, result1
0d0e8     0F 13 02 F6 | 	mov	arg01, local01
0d0ec     00 16 06 F6 | 	mov	arg03, #0
0d0f0     5C 00 B1 FD | 	call	#__system___basic_print_string
0d0f4     00 12 06 F6 | 	mov	arg01, #0
0d0f8     0A 14 06 F6 | 	mov	arg02, #10
0d0fc     00 16 06 F6 | 	mov	arg03, #0
0d100     F4 FF B0 FD | 	call	#__system___basic_print_char
0d104     00 12 06 F6 | 	mov	arg01, #0
0d108     D0 4C B1 FD | 	call	#__system___getiolock_0474
0d10c     FD 00 68 FC | 	wrlong	#0, result1
0d110     09 12 06 F6 | 	mov	arg01, #9
0d114     F8 42 B1 FD | 	call	#__system__close
0d118     8C 07 90 FD | 	jmp	#LR__1058
0d11c                 | LR__1034
0d11c                 | '     get #9,17,samplebuf(channel,0),1024
0d11c     10 4E 05 F1 | 	add	fp, #16
0d120     A7 16 02 FB | 	rdlong	arg03, fp
0d124     10 4E 85 F1 | 	sub	fp, #16
0d128     0B 16 66 F0 | 	shl	arg03, #11
0d12c     0C 00 00 FF 
0d130     CC E4 05 F1 | 	add	objptr, ##6348
0d134     F2 16 02 F1 | 	add	arg03, objptr
0d138     09 12 06 F6 | 	mov	arg01, #9
0d13c     11 14 06 F6 | 	mov	arg02, #17
0d140     0A 18 C6 F9 | 	decod	arg04, #10
0d144     02 1A 06 F6 | 	mov	arg05, #2
0d148     0C 00 00 FF 
0d14c     CC E4 85 F1 | 	sub	objptr, ##6348
0d150     0C 01 B1 FD | 	call	#__system___basic_get
0d154                 | '     close #9
0d154     09 12 06 F6 | 	mov	arg01, #9
0d158     B4 42 B1 FD | 	call	#__system__close
0d15c                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d15c                 | '     return
0d15c     48 07 90 FD | 	jmp	#LR__1058
0d160                 | LR__1035
0d160                 | '     if wptr < ($80000 - 2048) then 
0d160     14 4E 05 F1 | 	add	fp, #20
0d164     A7 1E 02 FB | 	rdlong	local01, fp
0d168     14 4E 85 F1 | 	sub	fp, #20
0d16c     FC 03 00 FF 
0d170     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0d174     80 00 90 3D |  if_ae	jmp	#LR__1038
0d178                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0d178     04 4E 05 F1 | 	add	fp, #4
0d17c     A7 00 68 FC | 	wrlong	#0, fp
0d180     04 4E 85 F1 | 	sub	fp, #4
0d184     0C 00 00 FF 
0d188     CC E4 05 F1 | 	add	objptr, ##6348
0d18c     97 2E 48 FB | 	callpa	#(@LR__1037-@LR__1036)>>2,fcache_load_ptr_
0d190                 | LR__1036
0d190     10 4E 05 F1 | 	add	fp, #16
0d194     A7 1E 02 FB | 	rdlong	local01, fp
0d198     0B 1E 66 F0 | 	shl	local01, #11
0d19c     F2 1E 02 F1 | 	add	local01, objptr
0d1a0     0C 4E 85 F1 | 	sub	fp, #12
0d1a4     A7 1A 02 FB | 	rdlong	arg05, fp
0d1a8     0D 19 02 F6 | 	mov	arg04, arg05
0d1ac     01 18 66 F0 | 	shl	arg04, #1
0d1b0     0F 19 02 F1 | 	add	arg04, local01
0d1b4     10 4E 05 F1 | 	add	fp, #16
0d1b8     A7 12 02 FB | 	rdlong	arg01, fp
0d1bc     01 1A 66 F0 | 	shl	arg05, #1
0d1c0     0D 13 02 F1 | 	add	arg01, arg05
0d1c4     09 FB E1 FA | 	rdword	result1, arg01
0d1c8     0C FB 51 FC | 	wrword	result1, arg04
0d1cc     10 4E 85 F1 | 	sub	fp, #16
0d1d0     A7 1E 02 FB | 	rdlong	local01, fp
0d1d4     01 1E 06 F1 | 	add	local01, #1
0d1d8     A7 1E 62 FC | 	wrlong	local01, fp
0d1dc     04 4E 85 F1 | 	sub	fp, #4
0d1e0     02 00 00 FF 
0d1e4     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0d1e8     A4 FF 9F CD |  if_b	jmp	#LR__1036
0d1ec                 | LR__1037
0d1ec     0C 00 00 FF 
0d1f0     CC E4 85 F1 | 	sub	objptr, ##6348
0d1f4     B0 06 90 FD | 	jmp	#LR__1058
0d1f8                 | LR__1038
0d1f8                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0d1f8     04 4E 05 F1 | 	add	fp, #4
0d1fc     A7 00 68 FC | 	wrlong	#0, fp
0d200     04 4E 85 F1 | 	sub	fp, #4
0d204                 | LR__1039
0d204     10 4E 05 F1 | 	add	fp, #16
0d208     A7 1A 02 FB | 	rdlong	arg05, fp
0d20c     0B 1A 66 F0 | 	shl	arg05, #11
0d210     0C 00 00 FF 
0d214     CC E4 05 F1 | 	add	objptr, ##6348
0d218     F2 1A 02 F1 | 	add	arg05, objptr
0d21c     0C 4E 85 F1 | 	sub	fp, #12
0d220     A7 18 02 FB | 	rdlong	arg04, fp
0d224     0C 21 02 F6 | 	mov	local02, arg04
0d228     01 20 66 F0 | 	shl	local02, #1
0d22c     0D 21 02 F1 | 	add	local02, arg05
0d230     10 4E 05 F1 | 	add	fp, #16
0d234     A7 12 02 FB | 	rdlong	arg01, fp
0d238     14 4E 85 F1 | 	sub	fp, #20
0d23c     01 18 66 F0 | 	shl	arg04, #1
0d240     0C 13 02 F1 | 	add	arg01, arg04
0d244     0C 00 00 FF 
0d248     CC E4 85 F1 | 	sub	objptr, ##6348
0d24c     00 BD B0 FD | 	call	#_psdpeek
0d250     10 FB 51 FC | 	wrword	result1, local02
0d254     04 4E 05 F1 | 	add	fp, #4
0d258     A7 22 02 FB | 	rdlong	local03, fp
0d25c     01 22 06 F1 | 	add	local03, #1
0d260     A7 22 62 FC | 	wrlong	local03, fp
0d264     04 4E 85 F1 | 	sub	fp, #4
0d268     02 00 00 FF 
0d26c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d270     90 FF 9F CD |  if_b	jmp	#LR__1039
0d274                 | '     return 
0d274     30 06 90 FD | 	jmp	#LR__1058
0d278                 | '   
0d278                 | '   par=converttoint(t1)  : print par
0d278                 | '   t1=pop()
0d278                 | '   channel=converttoint(t1)  
0d278                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0d278                 | LR__1040
0d278     10 4E 05 F1 | 	add	fp, #16
0d27c     A7 22 02 FB | 	rdlong	local03, fp
0d280     0B 22 66 F0 | 	shl	local03, #11
0d284     0C 00 00 FF 
0d288     CC E4 05 F1 | 	add	objptr, ##6348
0d28c     F2 22 02 F1 | 	add	local03, objptr
0d290     0C 4E 85 F1 | 	sub	fp, #12
0d294     A7 12 02 FB | 	rdlong	arg01, fp
0d298     09 21 02 F6 | 	mov	local02, arg01
0d29c     01 20 66 F0 | 	shl	local02, #1
0d2a0     11 21 02 F1 | 	add	local02, local03
0d2a4     04 4E 85 F1 | 	sub	fp, #4
0d2a8     0C 00 00 FF 
0d2ac     CC E4 85 F1 | 	sub	objptr, ##6348
0d2b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d2b4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d2b8     00 24 06 36 |  if_ae	mov	local04, #0
0d2bc     04 19 B1 FD | 	call	#__system___float_fromuns
0d2c0     12 FB 61 F5 | 	xor	result1, local04
0d2c4     FD 14 02 F6 | 	mov	arg02, result1
0d2c8     87 E4 1D FF 
0d2cc     DB 13 06 F6 | 	mov	arg01, ##1003032539
0d2d0     F4 1C B1 FD | 	call	#__system___float_mul
0d2d4     FD 12 02 F6 | 	mov	arg01, result1
0d2d8     28 26 B1 FD | 	call	#__system____builtin_sinf
0d2dc     FD 14 02 F6 | 	mov	arg02, result1
0d2e0     58 7F 23 FF 
0d2e4     00 12 06 F6 | 	mov	arg01, ##1191096320
0d2e8     DC 1C B1 FD | 	call	#__system___float_mul
0d2ec     FD 12 02 F6 | 	mov	arg01, result1
0d2f0     01 14 06 F6 | 	mov	arg02, #1
0d2f4     98 21 B1 FD | 	call	#__system___float_tointeger
0d2f8     10 FB 51 FC | 	wrword	result1, local02
0d2fc     04 4E 05 F1 | 	add	fp, #4
0d300     A7 22 02 FB | 	rdlong	local03, fp
0d304     01 22 06 F1 | 	add	local03, #1
0d308     A7 22 62 FC | 	wrlong	local03, fp
0d30c     04 4E 85 F1 | 	sub	fp, #4
0d310     02 00 00 FF 
0d314     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d318     5C FF 9F CD |  if_b	jmp	#LR__1040
0d31c                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d31c                 | '   return
0d31c     88 05 90 FD | 	jmp	#LR__1058
0d320                 | LR__1041
0d320                 | ' for i=0 to 15 : harm(i)=0: next i  
0d320     04 4E 05 F1 | 	add	fp, #4
0d324     A7 00 68 FC | 	wrlong	#0, fp
0d328     97 16 48 FB | 	callpa	#(@LR__1043-@LR__1042)>>2,fcache_load_ptr_
0d32c                 | LR__1042
0d32c     A7 22 02 FB | 	rdlong	local03, fp
0d330     02 22 66 F0 | 	shl	local03, #2
0d334     38 4E 05 F1 | 	add	fp, #56
0d338     A7 22 02 F1 | 	add	local03, fp
0d33c     11 01 68 FC | 	wrlong	#0, local03
0d340     38 4E 85 F1 | 	sub	fp, #56
0d344     A7 22 02 FB | 	rdlong	local03, fp
0d348     01 22 06 F1 | 	add	local03, #1
0d34c     A7 22 62 FC | 	wrlong	local03, fp
0d350     10 22 56 F2 | 	cmps	local03, #16 wc
0d354     D4 FF 9F CD |  if_b	jmp	#LR__1042
0d358                 | LR__1043
0d358     04 4E 85 F1 | 	sub	fp, #4
0d35c                 | ' for i=numpar to 2 step -1 
0d35c     A7 1E 02 FB | 	rdlong	local01, fp
0d360     04 4E 05 F1 | 	add	fp, #4
0d364     A7 1E 62 FC | 	wrlong	local01, fp
0d368     04 4E 85 F1 | 	sub	fp, #4
0d36c                 | LR__1044
0d36c     20 CE BF FD | 	call	#_pop
0d370     2C 4E 05 F1 | 	add	fp, #44
0d374     A7 FA 61 FC | 	wrlong	result1, fp
0d378     04 4E 05 F1 | 	add	fp, #4
0d37c     A7 FC 61 FC | 	wrlong	result2, fp
0d380     04 4E 05 F1 | 	add	fp, #4
0d384     A7 FE 61 FC | 	wrlong	result3, fp
0d388     30 4E 85 F1 | 	sub	fp, #48
0d38c     A7 22 02 FB | 	rdlong	local03, fp
0d390     02 22 86 F1 | 	sub	local03, #2
0d394     02 22 66 F0 | 	shl	local03, #2
0d398     38 4E 05 F1 | 	add	fp, #56
0d39c     A7 22 02 F1 | 	add	local03, fp
0d3a0     10 4E 85 F1 | 	sub	fp, #16
0d3a4     A7 12 02 F6 | 	mov	arg01, fp
0d3a8     2C 4E 85 F1 | 	sub	fp, #44
0d3ac     84 57 B0 FD | 	call	#_converttofloat
0d3b0     11 FB 61 FC | 	wrlong	result1, local03
0d3b4     04 4E 05 F1 | 	add	fp, #4
0d3b8     A7 22 02 FB | 	rdlong	local03, fp
0d3bc     01 22 86 F1 | 	sub	local03, #1
0d3c0     A7 22 62 FC | 	wrlong	local03, fp
0d3c4     04 4E 85 F1 | 	sub	fp, #4
0d3c8     02 22 56 F2 | 	cmps	local03, #2 wc
0d3cc     9C FF 9F 3D |  if_ae	jmp	#LR__1044
0d3d0     BC CD BF FD | 	call	#_pop
0d3d4     FF 1E 02 F6 | 	mov	local01, result3
0d3d8     2C 4E 05 F1 | 	add	fp, #44
0d3dc     A7 FA 61 FC | 	wrlong	result1, fp
0d3e0     04 4E 05 F1 | 	add	fp, #4
0d3e4     A7 FC 61 FC | 	wrlong	result2, fp
0d3e8     04 4E 05 F1 | 	add	fp, #4
0d3ec     A7 1E 62 FC | 	wrlong	local01, fp
0d3f0     08 4E 85 F1 | 	sub	fp, #8
0d3f4     A7 12 02 F6 | 	mov	arg01, fp
0d3f8     2C 4E 85 F1 | 	sub	fp, #44
0d3fc     88 56 B0 FD | 	call	#_converttoint
0d400     FD 1E 02 F6 | 	mov	local01, result1
0d404     10 4E 05 F1 | 	add	fp, #16
0d408     A7 1E 62 FC | 	wrlong	local01, fp
0d40c     10 4E 85 F1 | 	sub	fp, #16
0d410                 | ' t1=pop()
0d410                 | ' channel=converttoint(t1) : print channel
0d410     00 12 06 F6 | 	mov	arg01, #0
0d414     C4 49 B1 FD | 	call	#__system___getiolock_0474
0d418     FD 12 02 F6 | 	mov	arg01, result1
0d41c     2C F0 B0 FD | 	call	#__system___lockmem
0d420     10 4E 05 F1 | 	add	fp, #16
0d424     A7 14 02 FB | 	rdlong	arg02, fp
0d428     10 4E 85 F1 | 	sub	fp, #16
0d42c     00 12 06 F6 | 	mov	arg01, #0
0d430     00 16 06 F6 | 	mov	arg03, #0
0d434     0A 18 06 F6 | 	mov	arg04, #10
0d438     58 FD B0 FD | 	call	#__system___basic_print_integer
0d43c     00 12 06 F6 | 	mov	arg01, #0
0d440     0A 14 06 F6 | 	mov	arg02, #10
0d444     00 16 06 F6 | 	mov	arg03, #0
0d448     AC FC B0 FD | 	call	#__system___basic_print_char
0d44c     00 12 06 F6 | 	mov	arg01, #0
0d450     88 49 B1 FD | 	call	#__system___getiolock_0474
0d454     FD 00 68 FC | 	wrlong	#0, result1
0d458                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0d458     08 4E 05 F1 | 	add	fp, #8
0d45c     02 00 80 FF 
0d460     A7 00 68 FC | 	wrlong	##1024, fp
0d464     08 4E 85 F1 | 	sub	fp, #8
0d468     0C 00 00 FF 
0d46c     CC E4 05 F1 | 	add	objptr, ##6348
0d470     97 18 48 FB | 	callpa	#(@LR__1047-@LR__1045)>>2,fcache_load_ptr_
0d474                 | LR__1045
0d474     02 00 00 FF 
0d478     00 14 DC FC | 	rep	@LR__1048, ##1024
0d47c                 | LR__1046
0d47c     10 4E 05 F1 | 	add	fp, #16
0d480     A7 20 02 FB | 	rdlong	local02, fp
0d484     0B 20 66 F0 | 	shl	local02, #11
0d488     F2 20 02 F1 | 	add	local02, objptr
0d48c     0C 4E 85 F1 | 	sub	fp, #12
0d490     A7 22 02 FB | 	rdlong	local03, fp
0d494     04 4E 85 F1 | 	sub	fp, #4
0d498     01 22 66 F0 | 	shl	local03, #1
0d49c     10 23 02 F1 | 	add	local03, local02
0d4a0     11 01 58 FC | 	wrword	#0, local03
0d4a4                 | LR__1047
0d4a4                 | LR__1048
0d4a4     0C 00 00 FF 
0d4a8     CC E4 85 F1 | 	sub	objptr, ##6348
0d4ac     20 4E 05 F1 | 	add	fp, #32
0d4b0     A7 00 68 FC | 	wrlong	#0, fp
0d4b4                 | ' max=0
0d4b4                 | ' if harm(0)<0 then
0d4b4     1C 4E 05 F1 | 	add	fp, #28
0d4b8     A7 12 02 FB | 	rdlong	arg01, fp
0d4bc     3C 4E 85 F1 | 	sub	fp, #60
0d4c0     00 14 06 F6 | 	mov	arg02, #0
0d4c4     01 16 06 F6 | 	mov	arg03, #1
0d4c8     30 1F B1 FD | 	call	#__system___float_cmp
0d4cc     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4d0     04 01 90 3D |  if_ae	jmp	#LR__1051
0d4d4     3C 4E 05 F1 | 	add	fp, #60
0d4d8     A7 FA 01 FB | 	rdlong	result1, fp
0d4dc     1F FA 05 F4 | 	bitl	result1, #31
0d4e0     24 4E 85 F1 | 	sub	fp, #36
0d4e4     A7 FA 61 FC | 	wrlong	result1, fp
0d4e8     28 4E 05 F1 | 	add	fp, #40
0d4ec     A7 FA 01 FB | 	rdlong	result1, fp
0d4f0     1F FA 05 F4 | 	bitl	result1, #31
0d4f4     24 4E 85 F1 | 	sub	fp, #36
0d4f8     A7 FA 61 FC | 	wrlong	result1, fp
0d4fc     20 4E 05 F1 | 	add	fp, #32
0d500     00 C0 9F FF 
0d504     A7 00 68 FC | 	wrlong	##1065353216, fp
0d508     24 4E 85 F1 | 	sub	fp, #36
0d50c     A7 1E 02 FB | 	rdlong	local01, fp
0d510     28 4E 05 F1 | 	add	fp, #40
0d514     A7 1E 62 FC | 	wrlong	local01, fp
0d518     24 4E 85 F1 | 	sub	fp, #36
0d51c     A7 1E 02 FB | 	rdlong	local01, fp
0d520     28 4E 05 F1 | 	add	fp, #40
0d524     A7 1E 62 FC | 	wrlong	local01, fp
0d528                 | '   harm(0)=1
0d528                 | '   harm(1)=even
0d528                 | '   harm(2)=odd
0d528                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0d528     40 4E 85 F1 | 	sub	fp, #64
0d52c     A7 06 68 FC | 	wrlong	#3, fp
0d530                 | LR__1049
0d530     A7 22 02 FB | 	rdlong	local03, fp
0d534     11 27 02 F6 | 	mov	local05, local03
0d538     02 26 66 F0 | 	shl	local05, #2
0d53c     38 4E 05 F1 | 	add	fp, #56
0d540     A7 26 02 F1 | 	add	local05, fp
0d544     02 22 86 F1 | 	sub	local03, #2
0d548     02 22 66 F0 | 	shl	local03, #2
0d54c     A7 22 02 F1 | 	add	local03, fp
0d550     11 13 02 FB | 	rdlong	arg01, local03
0d554     24 4E 85 F1 | 	sub	fp, #36
0d558     A7 14 02 FB | 	rdlong	arg02, fp
0d55c     18 4E 85 F1 | 	sub	fp, #24
0d560     64 1A B1 FD | 	call	#__system___float_mul
0d564     13 FB 61 FC | 	wrlong	result1, local05
0d568     04 4E 05 F1 | 	add	fp, #4
0d56c     A7 22 02 FB | 	rdlong	local03, fp
0d570     02 22 06 F1 | 	add	local03, #2
0d574     A7 22 62 FC | 	wrlong	local03, fp
0d578     10 22 56 F2 | 	cmps	local03, #16 wc
0d57c     B0 FF 9F CD |  if_b	jmp	#LR__1049
0d580                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0d580     A7 08 68 FC | 	wrlong	#4, fp
0d584                 | LR__1050
0d584     A7 22 02 FB | 	rdlong	local03, fp
0d588     11 27 02 F6 | 	mov	local05, local03
0d58c     02 26 66 F0 | 	shl	local05, #2
0d590     38 4E 05 F1 | 	add	fp, #56
0d594     A7 26 02 F1 | 	add	local05, fp
0d598     02 22 86 F1 | 	sub	local03, #2
0d59c     02 22 66 F0 | 	shl	local03, #2
0d5a0     A7 22 02 F1 | 	add	local03, fp
0d5a4     11 13 02 FB | 	rdlong	arg01, local03
0d5a8     20 4E 85 F1 | 	sub	fp, #32
0d5ac     A7 14 02 FB | 	rdlong	arg02, fp
0d5b0     1C 4E 85 F1 | 	sub	fp, #28
0d5b4     10 1A B1 FD | 	call	#__system___float_mul
0d5b8     13 FB 61 FC | 	wrlong	result1, local05
0d5bc     04 4E 05 F1 | 	add	fp, #4
0d5c0     A7 22 02 FB | 	rdlong	local03, fp
0d5c4     02 22 06 F1 | 	add	local03, #2
0d5c8     A7 22 62 FC | 	wrlong	local03, fp
0d5cc     0F 22 56 F2 | 	cmps	local03, #15 wc
0d5d0     B0 FF 9F CD |  if_b	jmp	#LR__1050
0d5d4     04 4E 85 F1 | 	sub	fp, #4
0d5d8                 | LR__1051
0d5d8                 | ' if harm(0)>=0 then ' synthesize with harmonics
0d5d8     3C 4E 05 F1 | 	add	fp, #60
0d5dc     A7 12 02 FB | 	rdlong	arg01, fp
0d5e0     3C 4E 85 F1 | 	sub	fp, #60
0d5e4     00 14 06 F6 | 	mov	arg02, #0
0d5e8     01 16 66 F6 | 	neg	arg03, #1
0d5ec     0C 1E B1 FD | 	call	#__system___float_cmp
0d5f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0d5f4     B0 02 90 CD |  if_b	jmp	#LR__1057
0d5f8                 | '   for i=0 to 1023
0d5f8     04 4E 05 F1 | 	add	fp, #4
0d5fc     A7 00 68 FC | 	wrlong	#0, fp
0d600     04 4E 85 F1 | 	sub	fp, #4
0d604                 | LR__1052
0d604     24 4E 05 F1 | 	add	fp, #36
0d608     A7 00 68 FC | 	wrlong	#0, fp
0d60c                 | '     spl=0
0d60c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0d60c     1C 4E 85 F1 | 	sub	fp, #28
0d610     A7 00 68 FC | 	wrlong	#0, fp
0d614                 | LR__1053
0d614     A7 26 02 FB | 	rdlong	local05, fp
0d618     02 26 66 F0 | 	shl	local05, #2
0d61c     34 4E 05 F1 | 	add	fp, #52
0d620     A7 26 02 F1 | 	add	local05, fp
0d624     13 23 02 FB | 	rdlong	local03, local05
0d628     87 E4 1D FF 
0d62c     DB 27 06 F6 | 	mov	local05, ##1003032539
0d630     38 4E 85 F1 | 	sub	fp, #56
0d634     A7 12 02 FB | 	rdlong	arg01, fp
0d638     04 4E 85 F1 | 	sub	fp, #4
0d63c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d640     1F 24 C6 C9 |  if_b	decod	local04, #31
0d644     00 24 06 36 |  if_ae	mov	local04, #0
0d648     78 15 B1 FD | 	call	#__system___float_fromuns
0d64c     12 FB 61 F5 | 	xor	result1, local04
0d650     FD 14 02 F6 | 	mov	arg02, result1
0d654     13 13 02 F6 | 	mov	arg01, local05
0d658     6C 19 B1 FD | 	call	#__system___float_mul
0d65c     FD 26 02 F6 | 	mov	local05, result1
0d660     08 4E 05 F1 | 	add	fp, #8
0d664     A7 12 02 FB | 	rdlong	arg01, fp
0d668     08 4E 85 F1 | 	sub	fp, #8
0d66c     01 12 06 F1 | 	add	arg01, #1
0d670     09 13 52 F6 | 	abs	arg01, arg01 wc
0d674     1F 24 C6 C9 |  if_b	decod	local04, #31
0d678     00 24 06 36 |  if_ae	mov	local04, #0
0d67c     44 15 B1 FD | 	call	#__system___float_fromuns
0d680     12 FB 61 F5 | 	xor	result1, local04
0d684     FD 14 02 F6 | 	mov	arg02, result1
0d688     13 13 02 F6 | 	mov	arg01, local05
0d68c     38 19 B1 FD | 	call	#__system___float_mul
0d690     FD 12 02 F6 | 	mov	arg01, result1
0d694     6C 22 B1 FD | 	call	#__system____builtin_sinf
0d698     FD 14 02 F6 | 	mov	arg02, result1
0d69c     11 13 02 F6 | 	mov	arg01, local03
0d6a0     24 19 B1 FD | 	call	#__system___float_mul
0d6a4     FD 14 02 F6 | 	mov	arg02, result1
0d6a8     24 4E 05 F1 | 	add	fp, #36
0d6ac     A7 12 02 FB | 	rdlong	arg01, fp
0d6b0     24 4E 85 F1 | 	sub	fp, #36
0d6b4     40 15 B1 FD | 	call	#__system___float_add
0d6b8     24 4E 05 F1 | 	add	fp, #36
0d6bc     A7 FA 61 FC | 	wrlong	result1, fp
0d6c0     1C 4E 85 F1 | 	sub	fp, #28
0d6c4     A7 16 02 FB | 	rdlong	arg03, fp
0d6c8     01 16 06 F1 | 	add	arg03, #1
0d6cc     A7 16 62 FC | 	wrlong	arg03, fp
0d6d0     10 16 56 F2 | 	cmps	arg03, #16 wc
0d6d4     3C FF 9F CD |  if_b	jmp	#LR__1053
0d6d8                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0d6d8     1C 4E 05 F1 | 	add	fp, #28
0d6dc     A7 12 02 FB | 	rdlong	arg01, fp
0d6e0     1F 12 06 F4 | 	bitl	arg01, #31
0d6e4     04 4E 85 F1 | 	sub	fp, #4
0d6e8     A7 14 02 FB | 	rdlong	arg02, fp
0d6ec     20 4E 85 F1 | 	sub	fp, #32
0d6f0     01 16 66 F6 | 	neg	arg03, #1
0d6f4     04 1D B1 FD | 	call	#__system___float_cmp
0d6f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d6fc     18 00 90 CD |  if_b	jmp	#LR__1054
0d700     24 4E 05 F1 | 	add	fp, #36
0d704     A7 FA 01 FB | 	rdlong	result1, fp
0d708     1F FA 05 F4 | 	bitl	result1, #31
0d70c     04 4E 85 F1 | 	sub	fp, #4
0d710     A7 FA 61 FC | 	wrlong	result1, fp
0d714     20 4E 85 F1 | 	sub	fp, #32
0d718                 | LR__1054
0d718     04 4E 05 F1 | 	add	fp, #4
0d71c     A7 22 02 FB | 	rdlong	local03, fp
0d720     01 22 06 F1 | 	add	local03, #1
0d724     A7 22 62 FC | 	wrlong	local03, fp
0d728     04 4E 85 F1 | 	sub	fp, #4
0d72c     02 00 00 FF 
0d730     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d734     CC FE 9F CD |  if_b	jmp	#LR__1052
0d738                 | '   for i=0 to 1023
0d738     04 4E 05 F1 | 	add	fp, #4
0d73c     A7 00 68 FC | 	wrlong	#0, fp
0d740     04 4E 85 F1 | 	sub	fp, #4
0d744                 | LR__1055
0d744     24 4E 05 F1 | 	add	fp, #36
0d748     A7 00 68 FC | 	wrlong	#0, fp
0d74c                 | '     spl=0
0d74c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0d74c     1C 4E 85 F1 | 	sub	fp, #28
0d750     A7 00 68 FC | 	wrlong	#0, fp
0d754                 | LR__1056
0d754     A7 26 02 FB | 	rdlong	local05, fp
0d758     02 26 66 F0 | 	shl	local05, #2
0d75c     34 4E 05 F1 | 	add	fp, #52
0d760     A7 26 02 F1 | 	add	local05, fp
0d764     13 27 02 FB | 	rdlong	local05, local05
0d768     1C 4E 85 F1 | 	sub	fp, #28
0d76c     A7 14 02 FB | 	rdlong	arg02, fp
0d770     20 4E 85 F1 | 	sub	fp, #32
0d774     58 7F 23 FF 
0d778     00 12 06 F6 | 	mov	arg01, ##1191096320
0d77c     4C 1A B1 FD | 	call	#__system___float_div
0d780     FD 14 02 F6 | 	mov	arg02, result1
0d784     13 13 02 F6 | 	mov	arg01, local05
0d788     3C 18 B1 FD | 	call	#__system___float_mul
0d78c     FD 22 02 F6 | 	mov	local03, result1
0d790     87 E4 1D FF 
0d794     DB 27 06 F6 | 	mov	local05, ##1003032539
0d798     04 4E 05 F1 | 	add	fp, #4
0d79c     A7 12 02 FB | 	rdlong	arg01, fp
0d7a0     04 4E 85 F1 | 	sub	fp, #4
0d7a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d7a8     1F 24 C6 C9 |  if_b	decod	local04, #31
0d7ac     00 24 06 36 |  if_ae	mov	local04, #0
0d7b0     10 14 B1 FD | 	call	#__system___float_fromuns
0d7b4     12 FB 61 F5 | 	xor	result1, local04
0d7b8     FD 14 02 F6 | 	mov	arg02, result1
0d7bc     13 13 02 F6 | 	mov	arg01, local05
0d7c0     04 18 B1 FD | 	call	#__system___float_mul
0d7c4     FD 26 02 F6 | 	mov	local05, result1
0d7c8     08 4E 05 F1 | 	add	fp, #8
0d7cc     A7 12 02 FB | 	rdlong	arg01, fp
0d7d0     08 4E 85 F1 | 	sub	fp, #8
0d7d4     01 12 06 F1 | 	add	arg01, #1
0d7d8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d7dc     1F 24 C6 C9 |  if_b	decod	local04, #31
0d7e0     00 24 06 36 |  if_ae	mov	local04, #0
0d7e4     DC 13 B1 FD | 	call	#__system___float_fromuns
0d7e8     12 FB 61 F5 | 	xor	result1, local04
0d7ec     FD 14 02 F6 | 	mov	arg02, result1
0d7f0     13 13 02 F6 | 	mov	arg01, local05
0d7f4     D0 17 B1 FD | 	call	#__system___float_mul
0d7f8     FD 12 02 F6 | 	mov	arg01, result1
0d7fc     04 21 B1 FD | 	call	#__system____builtin_sinf
0d800     FD 14 02 F6 | 	mov	arg02, result1
0d804     11 13 02 F6 | 	mov	arg01, local03
0d808     BC 17 B1 FD | 	call	#__system___float_mul
0d80c     FD 14 02 F6 | 	mov	arg02, result1
0d810     24 4E 05 F1 | 	add	fp, #36
0d814     A7 12 02 FB | 	rdlong	arg01, fp
0d818     24 4E 85 F1 | 	sub	fp, #36
0d81c     D8 13 B1 FD | 	call	#__system___float_add
0d820     24 4E 05 F1 | 	add	fp, #36
0d824     A7 FA 61 FC | 	wrlong	result1, fp
0d828     1C 4E 85 F1 | 	sub	fp, #28
0d82c     A7 26 02 FB | 	rdlong	local05, fp
0d830     01 26 06 F1 | 	add	local05, #1
0d834     A7 26 62 FC | 	wrlong	local05, fp
0d838     10 26 56 F2 | 	cmps	local05, #16 wc
0d83c     14 FF 9F CD |  if_b	jmp	#LR__1056
0d840     08 4E 05 F1 | 	add	fp, #8
0d844     A7 26 02 FB | 	rdlong	local05, fp
0d848     0B 26 66 F0 | 	shl	local05, #11
0d84c     0C 00 00 FF 
0d850     CC E4 05 F1 | 	add	objptr, ##6348
0d854     F2 26 02 F1 | 	add	local05, objptr
0d858     0C 4E 85 F1 | 	sub	fp, #12
0d85c     A7 20 02 FB | 	rdlong	local02, fp
0d860     01 20 66 F0 | 	shl	local02, #1
0d864     13 21 02 F1 | 	add	local02, local05
0d868     20 4E 05 F1 | 	add	fp, #32
0d86c     A7 12 02 FB | 	rdlong	arg01, fp
0d870     24 4E 85 F1 | 	sub	fp, #36
0d874     0C 00 00 FF 
0d878     CC E4 85 F1 | 	sub	objptr, ##6348
0d87c     01 14 06 F6 | 	mov	arg02, #1
0d880     0C 1C B1 FD | 	call	#__system___float_tointeger
0d884     10 FB 51 FC | 	wrword	result1, local02
0d888     04 4E 05 F1 | 	add	fp, #4
0d88c     A7 22 02 FB | 	rdlong	local03, fp
0d890     01 22 06 F1 | 	add	local03, #1
0d894     A7 22 62 FC | 	wrlong	local03, fp
0d898     04 4E 85 F1 | 	sub	fp, #4
0d89c     02 00 00 FF 
0d8a0     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d8a4     9C FE 9F CD |  if_b	jmp	#LR__1055
0d8a8                 | LR__1057
0d8a8                 | LR__1058
0d8a8     A7 F0 03 F6 | 	mov	ptra, fp
0d8ac     B2 00 A0 FD | 	call	#popregs_
0d8b0                 | _do_defsnd_ret
0d8b0     2D 00 64 FD | 	ret
0d8b4                 | 
0d8b4                 | ' 
0d8b4                 | ' ' ---------------  List the program. 
0d8b4                 | ' 
0d8b4                 | ' sub do_list
0d8b4                 | _do_list
0d8b4     02 4A 05 F6 | 	mov	COUNT_, #2
0d8b8     A8 00 A0 FD | 	call	#pushregs_
0d8bc     B8 F0 07 F1 | 	add	ptra, #184
0d8c0     04 4E 05 F1 | 	add	fp, #4
0d8c4     A7 00 68 FC | 	wrlong	#0, fp
0d8c8     04 4E 05 F1 | 	add	fp, #4
0d8cc     FF FF BF FF 
0d8d0     A7 FE 6B FC | 	wrlong	##2147483647, fp
0d8d4     08 4E 85 F1 | 	sub	fp, #8
0d8d8     6A 00 00 FF 
0d8dc     64 E4 05 F1 | 	add	objptr, ##54372
0d8e0     F2 1E 02 FB | 	rdlong	local01, objptr
0d8e4     0F 17 02 F6 | 	mov	arg03, local01
0d8e8     01 16 66 F0 | 	shl	arg03, #1
0d8ec     0F 17 02 F1 | 	add	arg03, local01
0d8f0     02 16 66 F0 | 	shl	arg03, #2
0d8f4     03 00 00 FF 
0d8f8     04 E4 85 F1 | 	sub	objptr, ##1540
0d8fc     F2 16 02 F1 | 	add	arg03, objptr
0d900     0B 17 02 FB | 	rdlong	arg03, arg03
0d904     A7 16 62 FC | 	wrlong	arg03, fp
0d908                 | ' 
0d908                 | ' startline=0 : endline=$7FFFFFFF
0d908                 | ' numpar=compiledline(lineptr_e).result.uresult
0d908                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0d908     01 16 0E F2 | 	cmp	arg03, #1 wz
0d90c     67 00 00 FF 
0d910     60 E4 85 F1 | 	sub	objptr, ##52832
0d914     3C 00 90 5D |  if_ne	jmp	#LR__1060
0d918     74 C8 BF FD | 	call	#_pop
0d91c     FF 1E 02 F6 | 	mov	local01, result3
0d920     0C 4E 05 F1 | 	add	fp, #12
0d924     A7 FA 61 FC | 	wrlong	result1, fp
0d928     04 4E 05 F1 | 	add	fp, #4
0d92c     A7 FC 61 FC | 	wrlong	result2, fp
0d930     04 4E 05 F1 | 	add	fp, #4
0d934     A7 1E 62 FC | 	wrlong	local01, fp
0d938     08 4E 85 F1 | 	sub	fp, #8
0d93c     A7 12 02 F6 | 	mov	arg01, fp
0d940     0C 4E 85 F1 | 	sub	fp, #12
0d944     40 51 B0 FD | 	call	#_converttoint
0d948     04 4E 05 F1 | 	add	fp, #4
0d94c     A7 FA 61 FC | 	wrlong	result1, fp
0d950     04 4E 85 F1 | 	sub	fp, #4
0d954                 | LR__1060
0d954                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0d954     A7 16 02 FB | 	rdlong	arg03, fp
0d958     02 16 0E F2 | 	cmp	arg03, #2 wz
0d95c     7C 00 90 5D |  if_ne	jmp	#LR__1061
0d960     2C C8 BF FD | 	call	#_pop
0d964     FF 1E 02 F6 | 	mov	local01, result3
0d968     0C 4E 05 F1 | 	add	fp, #12
0d96c     A7 FA 61 FC | 	wrlong	result1, fp
0d970     04 4E 05 F1 | 	add	fp, #4
0d974     A7 FC 61 FC | 	wrlong	result2, fp
0d978     04 4E 05 F1 | 	add	fp, #4
0d97c     A7 1E 62 FC | 	wrlong	local01, fp
0d980     08 4E 85 F1 | 	sub	fp, #8
0d984     A7 12 02 F6 | 	mov	arg01, fp
0d988     0C 4E 85 F1 | 	sub	fp, #12
0d98c     F8 50 B0 FD | 	call	#_converttoint
0d990     FD 1E 02 F6 | 	mov	local01, result1
0d994     08 4E 05 F1 | 	add	fp, #8
0d998     A7 1E 62 FC | 	wrlong	local01, fp
0d99c     08 4E 85 F1 | 	sub	fp, #8
0d9a0     EC C7 BF FD | 	call	#_pop
0d9a4     FF 1E 02 F6 | 	mov	local01, result3
0d9a8     0C 4E 05 F1 | 	add	fp, #12
0d9ac     A7 FA 61 FC | 	wrlong	result1, fp
0d9b0     04 4E 05 F1 | 	add	fp, #4
0d9b4     A7 FC 61 FC | 	wrlong	result2, fp
0d9b8     04 4E 05 F1 | 	add	fp, #4
0d9bc     A7 1E 62 FC | 	wrlong	local01, fp
0d9c0     08 4E 85 F1 | 	sub	fp, #8
0d9c4     A7 12 02 F6 | 	mov	arg01, fp
0d9c8     0C 4E 85 F1 | 	sub	fp, #12
0d9cc     B8 50 B0 FD | 	call	#_converttoint
0d9d0     04 4E 05 F1 | 	add	fp, #4
0d9d4     A7 FA 61 FC | 	wrlong	result1, fp
0d9d8     04 4E 85 F1 | 	sub	fp, #4
0d9dc                 | LR__1061
0d9dc                 | ' 
0d9dc                 | ' 
0d9dc                 | ' print
0d9dc     00 12 06 F6 | 	mov	arg01, #0
0d9e0     F8 43 B1 FD | 	call	#__system___getiolock_0474
0d9e4     FD 12 02 F6 | 	mov	arg01, result1
0d9e8     60 EA B0 FD | 	call	#__system___lockmem
0d9ec     00 12 06 F6 | 	mov	arg01, #0
0d9f0     0A 14 06 F6 | 	mov	arg02, #10
0d9f4     00 16 06 F6 | 	mov	arg03, #0
0d9f8     FC F6 B0 FD | 	call	#__system___basic_print_char
0d9fc     00 12 06 F6 | 	mov	arg01, #0
0da00     D8 43 B1 FD | 	call	#__system___getiolock_0474
0da04     FD 00 68 FC | 	wrlong	#0, result1
0da08     6A 00 00 FF 
0da0c     68 E4 05 F1 | 	add	objptr, ##54376
0da10     F2 20 02 FB | 	rdlong	local02, objptr
0da14     11 00 00 FF 
0da18     88 E4 05 F1 | 	add	objptr, ##8840
0da1c     F2 20 62 FC | 	wrlong	local02, objptr
0da20     7B 00 00 FF 
0da24     F0 E4 85 F1 | 	sub	objptr, ##63216
0da28                 | ' do 
0da28                 | LR__1062
0da28     20 4E 05 F1 | 	add	fp, #32
0da2c     A7 12 02 F6 | 	mov	arg01, fp
0da30     20 4E 85 F1 | 	sub	fp, #32
0da34     7B 00 00 FF 
0da38     F0 E4 05 F1 | 	add	objptr, ##63216
0da3c     F2 14 02 FB | 	rdlong	arg02, objptr
0da40     18 16 06 F6 | 	mov	arg03, #24
0da44     70 00 00 FF 
0da48     30 E4 85 F1 | 	sub	objptr, ##57392
0da4c     F8 DD B0 FD | 	call	#_psram_spin2_read1
0da50     0B 00 00 FF 
0da54     C0 E4 85 F1 | 	sub	objptr, ##5824
0da58                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0da58                 | '   
0da58                 | '   if header(0)<> $FFFFFFFF then
0da58     20 4E 05 F1 | 	add	fp, #32
0da5c     A7 20 02 FB | 	rdlong	local02, fp
0da60     20 4E 85 F1 | 	sub	fp, #32
0da64     FF FF 7F FF 
0da68     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0da6c     A8 00 90 AD |  if_e	jmp	#LR__1064
0da70     38 4E 05 F1 | 	add	fp, #56
0da74     3F 16 06 F6 | 	mov	arg03, #63
0da78     28 16 62 FD | 	setq	arg03
0da7c     A7 00 68 FC | 	wrlong	#0, fp
0da80     A7 12 02 F6 | 	mov	arg01, fp
0da84     10 4E 85 F1 | 	sub	fp, #16
0da88     A7 14 02 FB | 	rdlong	arg02, fp
0da8c     04 4E 05 F1 | 	add	fp, #4
0da90     A7 16 02 FB | 	rdlong	arg03, fp
0da94     2C 4E 85 F1 | 	sub	fp, #44
0da98     0B 00 00 FF 
0da9c     C0 E4 05 F1 | 	add	objptr, ##5824
0daa0     A4 DD B0 FD | 	call	#_psram_spin2_read1
0daa4     0B 00 00 FF 
0daa8     C0 E4 85 F1 | 	sub	objptr, ##5824
0daac                 | '     longfill(linebuf,0,64)
0daac                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0daac                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0daac     20 4E 05 F1 | 	add	fp, #32
0dab0     A7 20 02 FB | 	rdlong	local02, fp
0dab4     1C 4E 85 F1 | 	sub	fp, #28
0dab8     A7 1E 02 FB | 	rdlong	local01, fp
0dabc     04 4E 85 F1 | 	sub	fp, #4
0dac0     0F 21 52 F2 | 	cmps	local02, local01 wc
0dac4     30 00 90 CD |  if_b	jmp	#LR__1063
0dac8     20 4E 05 F1 | 	add	fp, #32
0dacc     A7 20 02 FB | 	rdlong	local02, fp
0dad0     18 4E 85 F1 | 	sub	fp, #24
0dad4     A7 16 02 FB | 	rdlong	arg03, fp
0dad8     08 4E 85 F1 | 	sub	fp, #8
0dadc     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0dae0     14 00 90 1D |  if_a	jmp	#LR__1063
0dae4     38 4E 05 F1 | 	add	fp, #56
0dae8     A7 12 02 F6 | 	mov	arg01, fp
0daec     38 4E 85 F1 | 	sub	fp, #56
0daf0                 | ' 
0daf0                 | ' write(text)
0daf0     1C D8 B0 FD | 	call	#_hg010b_spin2_write
0daf4                 | ' crlf
0daf4     78 D9 B0 FD | 	call	#_hg010b_spin2_crlf
0daf8                 | LR__1063
0daf8     34 4E 05 F1 | 	add	fp, #52
0dafc     A7 20 02 FB | 	rdlong	local02, fp
0db00     34 4E 85 F1 | 	sub	fp, #52
0db04     7B 00 00 FF 
0db08     F0 E4 05 F1 | 	add	objptr, ##63216
0db0c     F2 20 62 FC | 	wrlong	local02, objptr
0db10     7B 00 00 FF 
0db14     F0 E4 85 F1 | 	sub	objptr, ##63216
0db18                 | LR__1064
0db18     34 4E 05 F1 | 	add	fp, #52
0db1c     A7 20 02 FB | 	rdlong	local02, fp
0db20     34 4E 85 F1 | 	sub	fp, #52
0db24     FF FF 3F FF 
0db28     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0db2c     20 4E 05 51 |  if_ne	add	fp, #32
0db30     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0db34     20 4E 85 51 |  if_ne	sub	fp, #32
0db38     FF FF 7F 5F 
0db3c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0db40     E4 FE 9F 5D |  if_ne	jmp	#LR__1062
0db44     A7 F0 03 F6 | 	mov	ptra, fp
0db48     B2 00 A0 FD | 	call	#popregs_
0db4c                 | _do_list_ret
0db4c     2D 00 64 FD | 	ret
0db50                 | 
0db50                 | ' 
0db50                 | ' '---------------- Clear the program
0db50                 | ' 
0db50                 | ' sub do_new
0db50                 | _do_new
0db50     03 4A 05 F6 | 	mov	COUNT_, #3
0db54     A8 00 A0 FD | 	call	#pushregs_
0db58     00 12 06 F6 | 	mov	arg01, #0
0db5c     01 14 66 F6 | 	neg	arg02, #1
0db60     64 B2 B0 FD | 	call	#_pslpoke
0db64     54 00 00 FF 
0db68     EC E5 05 F1 | 	add	objptr, ##43500
0db6c     F2 00 68 FC | 	wrlong	#0, objptr
0db70     15 00 00 FF 
0db74     7C E4 05 F1 | 	add	objptr, ##10876
0db78     F2 00 68 FC | 	wrlong	#0, objptr
0db7c     0F 00 00 FF 
0db80     2C E5 05 F1 | 	add	objptr, ##7980
0db84     F2 00 68 FC | 	wrlong	#0, objptr
0db88     04 E4 05 F1 | 	add	objptr, #4
0db8c     F2 00 68 FC | 	wrlong	#0, objptr
0db90     16 00 00 FF 
0db94     5C E5 85 F1 | 	sub	objptr, ##11612
0db98     F2 00 68 FC | 	wrlong	#0, objptr
0db9c     07 00 00 FF 
0dba0     24 E4 05 F1 | 	add	objptr, ##3620
0dba4     F2 00 68 FC | 	wrlong	#0, objptr
0dba8     07 00 00 FF 
0dbac     20 E4 85 F1 | 	sub	objptr, ##3616
0dbb0     F2 00 68 FC | 	wrlong	#0, objptr
0dbb4     0F 00 00 FF 
0dbb8     34 E4 05 F1 | 	add	objptr, ##7732
0dbbc     F2 00 68 FC | 	wrlong	#0, objptr
0dbc0     08 00 00 FF 
0dbc4     08 E4 85 F1 | 	sub	objptr, ##4104
0dbc8     F2 00 68 FC | 	wrlong	#0, objptr
0dbcc     04 E4 05 F1 | 	add	objptr, #4
0dbd0     FF FF FF FF 
0dbd4     F2 FE 6B FC | 	wrlong	##-1, objptr
0dbd8     0F 00 00 FF 
0dbdc     4C E5 05 F1 | 	add	objptr, ##8012
0dbe0     F2 00 68 FC | 	wrlong	#0, objptr
0dbe4                 | ' 
0dbe4                 | ' pslpoke(0,$FFFFFFFF)
0dbe4                 | ' varnum=0
0dbe4                 | ' programstart=0 :runptr=0 : runptr2=0
0dbe4                 | ' stackpointer=0
0dbe4                 | ' lineptr=0 
0dbe4                 | ' programptr=0 : stringptr=0
0dbe4                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0dbe4                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0dbe4     00 1E 06 F6 | 	mov	local01, #0
0dbe8     07 00 00 FF 
0dbec     40 E5 85 F1 | 	sub	objptr, ##3904
0dbf0     97 16 48 FB | 	callpa	#(@LR__1071-@LR__1070)>>2,fcache_load_ptr_
0dbf4                 | LR__1070
0dbf4     0F 21 02 F6 | 	mov	local02, local01
0dbf8     02 20 66 F0 | 	shl	local02, #2
0dbfc     0F 21 02 F1 | 	add	local02, local01
0dc00     02 20 66 F0 | 	shl	local02, #2
0dc04     F2 20 02 F1 | 	add	local02, objptr
0dc08     08 20 06 F1 | 	add	local02, #8
0dc0c     FF FF FF FF 
0dc10     10 FF 6B FC | 	wrlong	##-1, local02
0dc14     01 1E 06 F1 | 	add	local01, #1
0dc18     81 1E 56 F2 | 	cmps	local01, #129 wc
0dc1c     D4 FF 9F CD |  if_b	jmp	#LR__1070
0dc20                 | LR__1071
0dc20     72 00 00 FF 
0dc24     7C E4 85 F1 | 	sub	objptr, ##58492
0dc28                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0dc28     00 1E 06 F6 | 	mov	local01, #0
0dc2c                 | LR__1072
0dc2c     0F 21 02 F6 | 	mov	local02, local01
0dc30     02 20 66 F0 | 	shl	local02, #2
0dc34     7B 00 00 FF 
0dc38     18 E4 05 F1 | 	add	objptr, ##63000
0dc3c     F2 20 02 F1 | 	add	local02, objptr
0dc40     10 21 0A FB | 	rdlong	local02, local02 wz
0dc44     7B 00 00 FF 
0dc48     18 E4 85 F1 | 	sub	objptr, ##63000
0dc4c     34 00 90 AD |  if_e	jmp	#LR__1073
0dc50     0F 13 02 F6 | 	mov	arg01, local01
0dc54     00 14 06 F6 | 	mov	arg02, #0
0dc58     00 16 06 F6 | 	mov	arg03, #0
0dc5c     10 C7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dc60     0F 21 02 F6 | 	mov	local02, local01
0dc64     02 20 66 F0 | 	shl	local02, #2
0dc68     7B 00 00 FF 
0dc6c     18 E4 05 F1 | 	add	objptr, ##63000
0dc70     F2 20 02 F1 | 	add	local02, objptr
0dc74     10 13 02 FB | 	rdlong	arg01, local02
0dc78     7B 00 00 FF 
0dc7c     18 E4 85 F1 | 	sub	objptr, ##63000
0dc80     4C 27 B1 FD | 	call	#__system___gc_free
0dc84                 | LR__1073
0dc84     7B 00 00 FF 
0dc88     6C E4 05 F1 | 	add	objptr, ##63084
0dc8c     00 C0 9F FF 
0dc90     F2 00 68 FC | 	wrlong	##1065353216, objptr
0dc94     04 E4 05 F1 | 	add	objptr, #4
0dc98     00 C0 9F FF 
0dc9c     F2 00 68 FC | 	wrlong	##1065353216, objptr
0dca0     7B 00 00 FF 
0dca4     70 E4 85 F1 | 	sub	objptr, ##63088
0dca8     F2 22 02 FB | 	rdlong	local03, objptr
0dcac     7B 00 00 FF 
0dcb0     5C E4 05 F1 | 	add	objptr, ##63068
0dcb4     F2 22 62 FC | 	wrlong	local03, objptr
0dcb8     7B 00 00 FF 
0dcbc     5C E4 85 F1 | 	sub	objptr, ##63068
0dcc0     11 12 06 F6 | 	mov	arg01, #17
0dcc4     08 14 06 F6 | 	mov	arg02, #8
0dcc8     10 16 06 F6 | 	mov	arg03, #16
0dccc     A0 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dcd0     10 12 06 F6 | 	mov	arg01, #16
0dcd4     20 14 06 F6 | 	mov	arg02, #32
0dcd8     20 16 06 F6 | 	mov	arg03, #32
0dcdc     90 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dce0     F0 A3 B0 FD | 	call	#_init_audio
0dce4     01 1E 06 F1 | 	add	local01, #1
0dce8     10 1E 56 F2 | 	cmps	local01, #16 wc
0dcec     3C FF 9F CD |  if_b	jmp	#LR__1072
0dcf0     A7 F0 03 F6 | 	mov	ptra, fp
0dcf4     B2 00 A0 FD | 	call	#popregs_
0dcf8                 | _do_new_ret
0dcf8     2D 00 64 FD | 	ret
0dcfc                 | 
0dcfc                 | ' 
0dcfc                 | ' '----------------------- goto
0dcfc                 | ' sub do_fast_goto
0dcfc                 | _do_fast_goto
0dcfc     02 4A 05 F6 | 	mov	COUNT_, #2
0dd00     A8 00 A0 FD | 	call	#pushregs_
0dd04                 | _do_fast_goto_enter
0dd04     6A 00 00 FF 
0dd08     64 E4 05 F1 | 	add	objptr, ##54372
0dd0c     F2 12 02 FB | 	rdlong	arg01, objptr
0dd10     09 1F 02 F6 | 	mov	local01, arg01
0dd14     01 1E 66 F0 | 	shl	local01, #1
0dd18     09 1F 02 F1 | 	add	local01, arg01
0dd1c     02 1E 66 F0 | 	shl	local01, #2
0dd20     03 00 00 FF 
0dd24     04 E4 85 F1 | 	sub	objptr, ##1540
0dd28     F2 1E 02 F1 | 	add	local01, objptr
0dd2c     0F 21 02 FB | 	rdlong	local02, local01
0dd30     10 13 02 F6 | 	mov	arg01, local02
0dd34     67 00 00 FF 
0dd38     60 E4 85 F1 | 	sub	objptr, ##52832
0dd3c     B8 B1 B0 FD | 	call	#_pslpeek
0dd40     FD 12 02 F6 | 	mov	arg01, result1
0dd44                 | ' 
0dd44                 | ' testptr=compiledline(lineptr_e).result.uresult
0dd44                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0dd44                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0dd44     6A 00 00 FF 
0dd48     64 E4 05 F1 | 	add	objptr, ##54372
0dd4c     F2 FA 01 FB | 	rdlong	result1, objptr
0dd50     FD 1E 02 F6 | 	mov	local01, result1
0dd54     01 1E 66 F0 | 	shl	local01, #1
0dd58     FD 1E 02 F1 | 	add	local01, result1
0dd5c     02 1E 66 F0 | 	shl	local01, #2
0dd60     03 00 00 FF 
0dd64     04 E4 85 F1 | 	sub	objptr, ##1540
0dd68     F2 1E 02 F1 | 	add	local01, objptr
0dd6c     04 1E 06 F1 | 	add	local01, #4
0dd70     0F 1F 02 FB | 	rdlong	local01, local01
0dd74     0F 13 0A F2 | 	cmp	arg01, local01 wz
0dd78     67 00 00 FF 
0dd7c     60 E4 85 F1 | 	sub	objptr, ##52832
0dd80     58 00 90 5D |  if_ne	jmp	#LR__1080
0dd84     79 00 00 FF 
0dd88     94 E5 05 F1 | 	add	objptr, ##62356
0dd8c     F2 20 62 FC | 	wrlong	local02, objptr
0dd90     0F 00 00 FF 
0dd94     34 E5 85 F1 | 	sub	objptr, ##7988
0dd98     F2 20 02 FB | 	rdlong	local02, objptr
0dd9c     01 20 86 F1 | 	sub	local02, #1
0dda0     04 E4 05 F1 | 	add	objptr, #4
0dda4     F2 20 62 FC | 	wrlong	local02, objptr
0dda8                 | '   runptr=testptr
0dda8                 | '   lineptr_e=lineptr-1
0dda8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0dda8     0F 00 00 FF 
0ddac     54 E5 05 F1 | 	add	objptr, ##8020
0ddb0     F2 20 02 FB | 	rdlong	local02, objptr
0ddb4     79 00 00 FF 
0ddb8     B8 E5 85 F1 | 	sub	objptr, ##62392
0ddbc     FF FF 3F FF 
0ddc0     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0ddc4     79 00 00 AF 
0ddc8     B8 E5 05 A1 |  if_e	add	objptr, ##62392
0ddcc     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ddd0     79 00 00 AF 
0ddd4     B8 E5 85 A1 |  if_e	sub	objptr, ##62392
0ddd8     04 00 90 FD | 	jmp	#LR__1081
0dddc                 | LR__1080
0dddc     0C 00 B0 FD | 	call	#_do_find_goto
0dde0                 | LR__1081
0dde0     A7 F0 03 F6 | 	mov	ptra, fp
0dde4     B2 00 A0 FD | 	call	#popregs_
0dde8                 | _do_fast_goto_ret
0dde8     2D 00 64 FD | 	ret
0ddec                 | 
0ddec                 | ' 
0ddec                 | ' 
0ddec                 | ' 
0ddec                 | ' 
0ddec                 | ' sub do_find_goto
0ddec                 | _do_find_goto
0ddec     03 4A 05 F6 | 	mov	COUNT_, #3
0ddf0     A8 00 A0 FD | 	call	#pushregs_
0ddf4     24 F0 07 F1 | 	add	ptra, #36
0ddf8                 | _do_find_goto_enter
0ddf8     6A 00 00 FF 
0ddfc     64 E4 05 F1 | 	add	objptr, ##54372
0de00     F2 1E 02 FB | 	rdlong	local01, objptr
0de04     0F 21 02 F6 | 	mov	local02, local01
0de08     01 20 66 F0 | 	shl	local02, #1
0de0c     0F 21 02 F1 | 	add	local02, local01
0de10     02 20 66 F0 | 	shl	local02, #2
0de14     03 00 00 FF 
0de18     04 E4 85 F1 | 	sub	objptr, ##1540
0de1c     F2 20 02 F1 | 	add	local02, objptr
0de20     04 20 06 F1 | 	add	local02, #4
0de24     10 21 02 FB | 	rdlong	local02, local02
0de28     A7 20 62 FC | 	wrlong	local02, fp
0de2c     03 00 00 FF 
0de30     08 E4 05 F1 | 	add	objptr, ##1544
0de34     F2 22 02 FB | 	rdlong	local03, objptr
0de38     6A 00 00 FF 
0de3c     68 E4 85 F1 | 	sub	objptr, ##54376
0de40     04 4E 05 F1 | 	add	fp, #4
0de44     A7 22 62 FC | 	wrlong	local03, fp
0de48     04 4E 85 F1 | 	sub	fp, #4
0de4c                 | ' 
0de4c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0de4c                 | '  ' print "find goto"                                                                     'print gotoline 
0de4c                 | ' gotoptr=programstart
0de4c                 | ' do
0de4c                 | LR__1090
0de4c     0C 4E 05 F1 | 	add	fp, #12
0de50     A7 12 02 F6 | 	mov	arg01, fp
0de54     08 4E 85 F1 | 	sub	fp, #8
0de58     A7 14 02 FB | 	rdlong	arg02, fp
0de5c     04 4E 85 F1 | 	sub	fp, #4
0de60     18 16 06 F6 | 	mov	arg03, #24
0de64     0B 00 00 FF 
0de68     C0 E4 05 F1 | 	add	objptr, ##5824
0de6c     D8 D9 B0 FD | 	call	#_psram_spin2_read1
0de70     0B 00 00 FF 
0de74     C0 E4 85 F1 | 	sub	objptr, ##5824
0de78                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0de78                 | '   if gotoheader(0)<>$FFFFFFFF then
0de78     0C 4E 05 F1 | 	add	fp, #12
0de7c     A7 22 02 FB | 	rdlong	local03, fp
0de80     0C 4E 85 F1 | 	sub	fp, #12
0de84     FF FF 7F FF 
0de88     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0de8c     24 00 90 AD |  if_e	jmp	#LR__1091
0de90     04 4E 05 F1 | 	add	fp, #4
0de94     A7 22 02 FB | 	rdlong	local03, fp
0de98     04 4E 05 F1 | 	add	fp, #4
0de9c     A7 22 62 FC | 	wrlong	local03, fp
0dea0     18 4E 05 F1 | 	add	fp, #24
0dea4     A7 22 02 FB | 	rdlong	local03, fp
0dea8     1C 4E 85 F1 | 	sub	fp, #28
0deac     A7 22 62 FC | 	wrlong	local03, fp
0deb0     04 4E 85 F1 | 	sub	fp, #4
0deb4                 | LR__1091
0deb4     20 4E 05 F1 | 	add	fp, #32
0deb8     A7 22 02 FB | 	rdlong	local03, fp
0debc     20 4E 85 F1 | 	sub	fp, #32
0dec0     FF FF 3F FF 
0dec4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0dec8     0C 4E 05 51 |  if_ne	add	fp, #12
0decc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ded0     0C 4E 85 51 |  if_ne	sub	fp, #12
0ded4     FF FF 7F 5F 
0ded8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0dedc     18 00 90 AD |  if_e	jmp	#LR__1092
0dee0     0C 4E 05 F1 | 	add	fp, #12
0dee4     A7 22 02 FB | 	rdlong	local03, fp
0dee8     0C 4E 85 F1 | 	sub	fp, #12
0deec     A7 20 02 FB | 	rdlong	local02, fp
0def0     10 23 0A F2 | 	cmp	local03, local02 wz
0def4     54 FF 9F 5D |  if_ne	jmp	#LR__1090
0def8                 | LR__1092
0def8                 | ' 
0def8                 | ' if gotoheader(0)=gotoline then
0def8     0C 4E 05 F1 | 	add	fp, #12
0defc     A7 22 02 FB | 	rdlong	local03, fp
0df00     0C 4E 85 F1 | 	sub	fp, #12
0df04     A7 1E 02 FB | 	rdlong	local01, fp
0df08     0F 23 0A F2 | 	cmp	local03, local01 wz
0df0c     D8 00 90 5D |  if_ne	jmp	#LR__1093
0df10     6A 00 00 FF 
0df14     64 E4 05 F1 | 	add	objptr, ##54372
0df18     F2 1E 02 FB | 	rdlong	local01, objptr
0df1c     0F 21 02 F6 | 	mov	local02, local01
0df20     01 20 66 F0 | 	shl	local02, #1
0df24     0F 21 02 F1 | 	add	local02, local01
0df28     02 20 66 F0 | 	shl	local02, #2
0df2c     03 00 00 FF 
0df30     04 E4 85 F1 | 	sub	objptr, ##1540
0df34     F2 20 02 F1 | 	add	local02, objptr
0df38     08 4E 05 F1 | 	add	fp, #8
0df3c     A7 22 02 FB | 	rdlong	local03, fp
0df40     10 23 62 FC | 	wrlong	local03, local02
0df44     03 00 00 FF 
0df48     04 E4 05 F1 | 	add	objptr, ##1540
0df4c     F2 1E 02 FB | 	rdlong	local01, objptr
0df50     0F 21 02 F6 | 	mov	local02, local01
0df54     01 20 66 F0 | 	shl	local02, #1
0df58     0F 21 02 F1 | 	add	local02, local01
0df5c     02 20 66 F0 | 	shl	local02, #2
0df60     03 00 00 FF 
0df64     04 E4 85 F1 | 	sub	objptr, ##1540
0df68     F2 20 02 F1 | 	add	local02, objptr
0df6c     08 20 06 F1 | 	add	local02, #8
0df70     10 9D 68 FC | 	wrlong	#78, local02
0df74     03 00 00 FF 
0df78     04 E4 05 F1 | 	add	objptr, ##1540
0df7c     F2 20 02 FB | 	rdlong	local02, objptr
0df80     10 13 02 F6 | 	mov	arg01, local02
0df84     01 12 66 F0 | 	shl	arg01, #1
0df88     10 13 02 F1 | 	add	arg01, local02
0df8c     02 12 66 F0 | 	shl	arg01, #2
0df90     03 00 00 FF 
0df94     04 E4 85 F1 | 	sub	objptr, ##1540
0df98     F2 12 02 F1 | 	add	arg01, objptr
0df9c     12 00 00 FF 
0dfa0     3C E5 05 F1 | 	add	objptr, ##9532
0dfa4     F2 14 02 FB | 	rdlong	arg02, objptr
0dfa8     02 22 06 F6 | 	mov	local03, #2
0dfac     10 23 02 F1 | 	add	local03, local02
0dfb0     14 00 00 FF 
0dfb4     54 E5 85 F1 | 	sub	objptr, ##10580
0dfb8     F2 16 02 FB | 	rdlong	arg03, objptr
0dfbc     0B 23 02 FD | 	qmul	local03, arg03
0dfc0     08 4E 85 F1 | 	sub	fp, #8
0dfc4     59 00 00 FF 
0dfc8     88 E5 85 F1 | 	sub	objptr, ##45960
0dfcc     18 22 62 FD | 	getqx	local03
0dfd0     11 15 02 F1 | 	add	arg02, local03
0dfd4     0C D9 B0 FD | 	call	#_psram_spin2_write
0dfd8     0B 00 00 FF 
0dfdc     C0 E4 85 F1 | 	sub	objptr, ##5824
0dfe0     18 FD BF FD | 	call	#_do_fast_goto
0dfe4     08 00 90 FD | 	jmp	#LR__1094
0dfe8                 | LR__1093
0dfe8     26 12 06 F6 | 	mov	arg01, #38
0dfec     74 AC B0 FD | 	call	#_printerror
0dff0                 | LR__1094
0dff0     A7 F0 03 F6 | 	mov	ptra, fp
0dff4     B2 00 A0 FD | 	call	#popregs_
0dff8                 | _do_find_goto_ret
0dff8     2D 00 64 FD | 	ret
0dffc                 | 
0dffc                 | ' 
0dffc                 | ' sub do_slow_goto
0dffc                 | _do_slow_goto
0dffc                 | _do_slow_goto_ret
0dffc     2D 00 64 FD | 	ret
0e000                 | 
0e000                 | ' 
0e000                 | ' '----------------------- Error processing
0e000                 | ' 
0e000                 | ' sub do_error
0e000                 | _do_error
0e000     01 4A 05 F6 | 	mov	COUNT_, #1
0e004     A8 00 A0 FD | 	call	#pushregs_
0e008     6A 00 00 FF 
0e00c     64 E4 05 F1 | 	add	objptr, ##54372
0e010     F2 18 02 FB | 	rdlong	arg04, objptr
0e014     0C 17 02 F6 | 	mov	arg03, arg04
0e018     01 16 66 F0 | 	shl	arg03, #1
0e01c     0C 17 02 F1 | 	add	arg03, arg04
0e020     02 16 66 F0 | 	shl	arg03, #2
0e024     03 00 00 FF 
0e028     04 E4 85 F1 | 	sub	objptr, ##1540
0e02c     F2 16 02 F1 | 	add	arg03, objptr
0e030     0B 1F 02 FB | 	rdlong	local01, arg03
0e034                 | ' r=compiledline(lineptr_e).result.uresult
0e034                 | ' print "Error ";r;": ";errors$(r)
0e034     00 12 06 F6 | 	mov	arg01, #0
0e038     67 00 00 FF 
0e03c     60 E4 85 F1 | 	sub	objptr, ##52832
0e040     98 3D B1 FD | 	call	#__system___getiolock_0474
0e044     FD 12 02 F6 | 	mov	arg01, result1
0e048     00 E4 B0 FD | 	call	#__system___lockmem
0e04c     60 01 00 FF 
0e050     4B 14 06 F6 | 	mov	arg02, ##@LR__4933
0e054     00 12 06 F6 | 	mov	arg01, #0
0e058     00 16 06 F6 | 	mov	arg03, #0
0e05c     F0 F0 B0 FD | 	call	#__system___basic_print_string
0e060     00 12 06 F6 | 	mov	arg01, #0
0e064     0F 15 02 F6 | 	mov	arg02, local01
0e068     00 16 06 F6 | 	mov	arg03, #0
0e06c     0A 18 06 F6 | 	mov	arg04, #10
0e070     60 F1 B0 FD | 	call	#__system___basic_print_unsigned
0e074     60 01 00 FF 
0e078     52 14 06 F6 | 	mov	arg02, ##@LR__4934
0e07c     00 12 06 F6 | 	mov	arg01, #0
0e080     00 16 06 F6 | 	mov	arg03, #0
0e084     C8 F0 B0 FD | 	call	#__system___basic_print_string
0e088     02 1E 66 F0 | 	shl	local01, #2
0e08c     65 00 00 FF 
0e090     60 E4 05 F1 | 	add	objptr, ##51808
0e094     F2 1E 02 F1 | 	add	local01, objptr
0e098     0F 15 02 FB | 	rdlong	arg02, local01
0e09c     00 12 06 F6 | 	mov	arg01, #0
0e0a0     00 16 06 F6 | 	mov	arg03, #0
0e0a4     65 00 00 FF 
0e0a8     60 E4 85 F1 | 	sub	objptr, ##51808
0e0ac     A0 F0 B0 FD | 	call	#__system___basic_print_string
0e0b0     00 12 06 F6 | 	mov	arg01, #0
0e0b4     0A 14 06 F6 | 	mov	arg02, #10
0e0b8     00 16 06 F6 | 	mov	arg03, #0
0e0bc     38 F0 B0 FD | 	call	#__system___basic_print_char
0e0c0     00 12 06 F6 | 	mov	arg01, #0
0e0c4     14 3D B1 FD | 	call	#__system___getiolock_0474
0e0c8     FD 00 68 FC | 	wrlong	#0, result1
0e0cc     A7 F0 03 F6 | 	mov	ptra, fp
0e0d0     B2 00 A0 FD | 	call	#popregs_
0e0d4                 | _do_error_ret
0e0d4     2D 00 64 FD | 	ret
0e0d8                 | 
0e0d8                 | ' 
0e0d8                 | ' 
0e0d8                 | ' '------------------ Assigning to a variable  
0e0d8                 | ' 
0e0d8                 | ' function  convertstring(psaddr as ulong) as string
0e0d8                 | _convertstring
0e0d8     04 4A 05 F6 | 	mov	COUNT_, #4
0e0dc     A8 00 A0 FD | 	call	#pushregs_
0e0e0     09 1F 02 F6 | 	mov	local01, arg01
0e0e4     10 AE B0 FD | 	call	#_pslpeek
0e0e8     FD 20 02 F6 | 	mov	local02, result1
0e0ec     60 01 00 FF 
0e0f0     55 22 06 F6 | 	mov	local03, ##@LR__4935
0e0f4                 | ' 'print "in convertstring: psaddr=";psaddr
0e0f4                 | ' l=pslpeek(psaddr)
0e0f4                 | ' 'print "in convertstring: len=";l
0e0f4                 | ' s="" 
0e0f4                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0e0f4     01 24 06 F6 | 	mov	local04, #1
0e0f8     01 20 06 F1 | 	add	local02, #1
0e0fc                 | LR__1100
0e0fc     10 25 52 F2 | 	cmps	local04, local02 wc
0e100     30 00 90 3D |  if_ae	jmp	#LR__1101
0e104     0F 13 02 F6 | 	mov	arg01, local01
0e108     03 12 06 F1 | 	add	arg01, #3
0e10c     12 13 02 F1 | 	add	arg01, local04
0e110     8C AD B0 FD | 	call	#_pspeek
0e114     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0e118     38 05 B1 FD | 	call	#__system__Chr_S
0e11c     FD 14 02 F6 | 	mov	arg02, result1
0e120     11 13 02 F6 | 	mov	arg01, local03
0e124     80 E3 B0 FD | 	call	#__system___string_concat
0e128     FD 22 02 F6 | 	mov	local03, result1
0e12c     01 24 06 F1 | 	add	local04, #1
0e130     C8 FF 9F FD | 	jmp	#LR__1100
0e134                 | LR__1101
0e134                 | ' 'print "in convertstring: str=";s
0e134                 | ' return s
0e134     11 FB 01 F6 | 	mov	result1, local03
0e138     A7 F0 03 F6 | 	mov	ptra, fp
0e13c     B2 00 A0 FD | 	call	#popregs_
0e140                 | _convertstring_ret
0e140     2D 00 64 FD | 	ret
0e144                 | 
0e144                 | ' 
0e144                 | ' sub do_assign
0e144                 | _do_assign
0e144     05 4A 05 F6 | 	mov	COUNT_, #5
0e148     A8 00 A0 FD | 	call	#pushregs_
0e14c     44 F0 07 F1 | 	add	ptra, #68
0e150     6A 00 00 FF 
0e154     64 E4 05 F1 | 	add	objptr, ##54372
0e158     F2 16 02 FB | 	rdlong	arg03, objptr
0e15c     0B 15 02 F6 | 	mov	arg02, arg03
0e160     01 14 66 F0 | 	shl	arg02, #1
0e164     0B 15 02 F1 | 	add	arg02, arg03
0e168     02 14 66 F0 | 	shl	arg02, #2
0e16c     03 00 00 FF 
0e170     04 E4 85 F1 | 	sub	objptr, ##1540
0e174     F2 14 02 F1 | 	add	arg02, objptr
0e178     0A 15 02 FB | 	rdlong	arg02, arg02
0e17c     18 4E 05 F1 | 	add	fp, #24
0e180     A7 14 62 FC | 	wrlong	arg02, fp
0e184                 | ' 
0e184                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0e184                 | ' 
0e184                 | ' if variables(varnum).vartype<array_no_type then 
0e184     18 4E 85 F1 | 	sub	fp, #24
0e188     04 14 66 F0 | 	shl	arg02, #4
0e18c     32 00 00 FF 
0e190     74 E4 85 F1 | 	sub	objptr, ##25716
0e194     F2 14 02 F1 | 	add	arg02, objptr
0e198     0C 14 06 F1 | 	add	arg02, #12
0e19c     0A 17 02 FB | 	rdlong	arg03, arg02
0e1a0     00 17 16 F2 | 	cmp	arg03, #256 wc
0e1a4     34 00 00 FF 
0e1a8     EC E5 85 F1 | 	sub	objptr, ##27116
0e1ac     18 01 90 3D |  if_ae	jmp	#LR__1110
0e1b0     DC BF BF FD | 	call	#_pop
0e1b4     A7 FA 61 FC | 	wrlong	result1, fp
0e1b8     04 4E 05 F1 | 	add	fp, #4
0e1bc     A7 FC 61 FC | 	wrlong	result2, fp
0e1c0     04 4E 05 F1 | 	add	fp, #4
0e1c4     A7 FE 61 FC | 	wrlong	result3, fp
0e1c8     08 4E 85 F1 | 	sub	fp, #8
0e1cc     A7 16 02 FB | 	rdlong	arg03, fp
0e1d0     04 4E 05 F1 | 	add	fp, #4
0e1d4     A7 14 02 FB | 	rdlong	arg02, fp
0e1d8     14 4E 05 F1 | 	add	fp, #20
0e1dc     A7 12 02 FB | 	rdlong	arg01, fp
0e1e0     04 12 66 F0 | 	shl	arg01, #4
0e1e4     34 00 00 FF 
0e1e8     EC E5 05 F1 | 	add	objptr, ##27116
0e1ec     F2 12 02 F1 | 	add	arg01, objptr
0e1f0     04 12 06 F1 | 	add	arg01, #4
0e1f4     09 17 62 FC | 	wrlong	arg03, arg01
0e1f8     A7 16 02 FB | 	rdlong	arg03, fp
0e1fc     04 16 66 F0 | 	shl	arg03, #4
0e200     F2 16 02 F1 | 	add	arg03, objptr
0e204     08 16 06 F1 | 	add	arg03, #8
0e208     0B 15 62 FC | 	wrlong	arg02, arg03
0e20c     A7 16 02 FB | 	rdlong	arg03, fp
0e210     04 16 66 F0 | 	shl	arg03, #4
0e214     F2 16 02 F1 | 	add	arg03, objptr
0e218     10 4E 85 F1 | 	sub	fp, #16
0e21c     A7 14 02 FB | 	rdlong	arg02, fp
0e220     0C 16 06 F1 | 	add	arg03, #12
0e224     0B 15 62 FC | 	wrlong	arg02, arg03
0e228                 | '   t1=pop() 
0e228                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0e228                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0e228                 | '   if variables(varnum).vartype<>result_string2 then return
0e228     10 4E 05 F1 | 	add	fp, #16
0e22c     A7 16 02 FB | 	rdlong	arg03, fp
0e230     18 4E 85 F1 | 	sub	fp, #24
0e234     04 16 66 F0 | 	shl	arg03, #4
0e238     F2 16 02 F1 | 	add	arg03, objptr
0e23c     0C 16 06 F1 | 	add	arg03, #12
0e240     0B 17 02 FB | 	rdlong	arg03, arg03
0e244     2B 16 0E F2 | 	cmp	arg03, #43 wz
0e248     34 00 00 FF 
0e24c     EC E5 85 F1 | 	sub	objptr, ##27116
0e250     E4 04 90 5D |  if_ne	jmp	#LR__1133
0e254     18 4E 05 F1 | 	add	fp, #24
0e258     A7 16 02 FB | 	rdlong	arg03, fp
0e25c     0B 1F 02 F6 | 	mov	local01, arg03
0e260     04 1E 66 F0 | 	shl	local01, #4
0e264     34 00 00 FF 
0e268     EC E5 05 F1 | 	add	objptr, ##27116
0e26c     F2 1E 02 F1 | 	add	local01, objptr
0e270     18 4E 85 F1 | 	sub	fp, #24
0e274     04 16 66 F0 | 	shl	arg03, #4
0e278     F2 16 02 F1 | 	add	arg03, objptr
0e27c     04 16 06 F1 | 	add	arg03, #4
0e280     0B 13 02 FB | 	rdlong	arg01, arg03
0e284     34 00 00 FF 
0e288     EC E5 85 F1 | 	sub	objptr, ##27116
0e28c     48 FE BF FD | 	call	#_convertstring
0e290     04 1E 06 F1 | 	add	local01, #4
0e294     0F FB 61 FC | 	wrlong	result1, local01
0e298     18 4E 05 F1 | 	add	fp, #24
0e29c     A7 1E 02 FB | 	rdlong	local01, fp
0e2a0     18 4E 85 F1 | 	sub	fp, #24
0e2a4     04 1E 66 F0 | 	shl	local01, #4
0e2a8     34 00 00 FF 
0e2ac     EC E5 05 F1 | 	add	objptr, ##27116
0e2b0     F2 1E 02 F1 | 	add	local01, objptr
0e2b4     0C 1E 06 F1 | 	add	local01, #12
0e2b8     0F 3F 68 FC | 	wrlong	#31, local01
0e2bc                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0e2bc                 | '   variables(varnum).vartype=result_string
0e2bc                 | '   return
0e2bc     34 00 00 FF 
0e2c0     EC E5 85 F1 | 	sub	objptr, ##27116
0e2c4     70 04 90 FD | 	jmp	#LR__1133
0e2c8                 | LR__1110
0e2c8                 | ' for i=0 to 2 : arrid(i)=0 : next i
0e2c8     1C 4E 05 F1 | 	add	fp, #28
0e2cc     A7 00 68 FC | 	wrlong	#0, fp
0e2d0     97 16 48 FB | 	callpa	#(@LR__1112-@LR__1111)>>2,fcache_load_ptr_
0e2d4                 | LR__1111
0e2d4     A7 1E 02 FB | 	rdlong	local01, fp
0e2d8     02 1E 66 F0 | 	shl	local01, #2
0e2dc     18 4E 05 F1 | 	add	fp, #24
0e2e0     A7 1E 02 F1 | 	add	local01, fp
0e2e4     0F 01 68 FC | 	wrlong	#0, local01
0e2e8     18 4E 85 F1 | 	sub	fp, #24
0e2ec     A7 1E 02 FB | 	rdlong	local01, fp
0e2f0     01 1E 06 F1 | 	add	local01, #1
0e2f4     A7 1E 62 FC | 	wrlong	local01, fp
0e2f8     03 1E 16 F2 | 	cmp	local01, #3 wc
0e2fc     D4 FF 9F CD |  if_b	jmp	#LR__1111
0e300                 | LR__1112
0e300     6A 00 00 FF 
0e304     64 E4 05 F1 | 	add	objptr, ##54372
0e308     F2 16 02 FB | 	rdlong	arg03, objptr
0e30c     0B 1F 02 F6 | 	mov	local01, arg03
0e310     01 1E 66 F0 | 	shl	local01, #1
0e314     0B 1F 02 F1 | 	add	local01, arg03
0e318     02 1E 66 F0 | 	shl	local01, #2
0e31c     03 00 00 FF 
0e320     04 E4 85 F1 | 	sub	objptr, ##1540
0e324     F2 1E 02 F1 | 	add	local01, objptr
0e328     04 1E 06 F1 | 	add	local01, #4
0e32c     0F 21 02 FB | 	rdlong	local02, local01
0e330     04 4E 05 F1 | 	add	fp, #4
0e334     A7 20 62 FC | 	wrlong	local02, fp
0e338     20 4E 85 F1 | 	sub	fp, #32
0e33c     67 00 00 FF 
0e340     60 E4 85 F1 | 	sub	objptr, ##52832
0e344     48 BE BF FD | 	call	#_pop
0e348     A7 FA 61 FC | 	wrlong	result1, fp
0e34c     04 4E 05 F1 | 	add	fp, #4
0e350     A7 FC 61 FC | 	wrlong	result2, fp
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 FE 61 FC | 	wrlong	result3, fp
0e35c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0e35c                 | ' t1=pop() ' var value
0e35c                 | ' if numpar>0 then
0e35c     18 4E 05 F1 | 	add	fp, #24
0e360     A7 22 02 FB | 	rdlong	local03, fp
0e364     20 4E 85 F1 | 	sub	fp, #32
0e368     01 22 16 F2 | 	cmp	local03, #1 wc
0e36c     78 00 90 CD |  if_b	jmp	#LR__1115
0e370                 | '   for i=numpar to 1 step -1
0e370     20 4E 05 F1 | 	add	fp, #32
0e374     A7 24 0A FB | 	rdlong	local04, fp wz
0e378     04 4E 85 F1 | 	sub	fp, #4
0e37c     A7 24 62 FC | 	wrlong	local04, fp
0e380     1C 4E 85 F1 | 	sub	fp, #28
0e384     60 00 90 AD |  if_e	jmp	#LR__1114
0e388                 | LR__1113
0e388     04 BE BF FD | 	call	#_pop
0e38c     0C 4E 05 F1 | 	add	fp, #12
0e390     A7 FA 61 FC | 	wrlong	result1, fp
0e394     04 4E 05 F1 | 	add	fp, #4
0e398     A7 FC 61 FC | 	wrlong	result2, fp
0e39c     04 4E 05 F1 | 	add	fp, #4
0e3a0     A7 FE 61 FC | 	wrlong	result3, fp
0e3a4     08 4E 05 F1 | 	add	fp, #8
0e3a8     A7 22 02 FB | 	rdlong	local03, fp
0e3ac     01 22 86 F1 | 	sub	local03, #1
0e3b0     02 22 66 F0 | 	shl	local03, #2
0e3b4     18 4E 05 F1 | 	add	fp, #24
0e3b8     A7 22 02 F1 | 	add	local03, fp
0e3bc     28 4E 85 F1 | 	sub	fp, #40
0e3c0     A7 12 02 F6 | 	mov	arg01, fp
0e3c4     0C 4E 85 F1 | 	sub	fp, #12
0e3c8     BC 46 B0 FD | 	call	#_converttoint
0e3cc     11 FB 61 FC | 	wrlong	result1, local03
0e3d0     1C 4E 05 F1 | 	add	fp, #28
0e3d4     A7 24 02 FB | 	rdlong	local04, fp
0e3d8     01 24 8E F1 | 	sub	local04, #1 wz
0e3dc     A7 24 62 FC | 	wrlong	local04, fp
0e3e0     1C 4E 85 F1 | 	sub	fp, #28
0e3e4     A0 FF 9F 5D |  if_ne	jmp	#LR__1113
0e3e8                 | LR__1114
0e3e8                 | LR__1115
0e3e8     18 4E 05 F1 | 	add	fp, #24
0e3ec     A7 1E 02 FB | 	rdlong	local01, fp
0e3f0     04 1E 66 F0 | 	shl	local01, #4
0e3f4     34 00 00 FF 
0e3f8     EC E5 05 F1 | 	add	objptr, ##27116
0e3fc     F2 1E 02 F1 | 	add	local01, objptr
0e400     04 1E 06 F1 | 	add	local01, #4
0e404     0F 13 02 FB | 	rdlong	arg01, local01
0e408     0C 4E 05 F1 | 	add	fp, #12
0e40c     A7 12 62 FC | 	wrlong	arg01, fp
0e410     24 4E 85 F1 | 	sub	fp, #36
0e414     34 00 00 FF 
0e418     EC E5 85 F1 | 	sub	objptr, ##27116
0e41c     D8 AA B0 FD | 	call	#_pslpeek
0e420     FD 24 32 F9 | 	getword	local04, result1, #0
0e424     28 4E 05 F1 | 	add	fp, #40
0e428     A7 24 62 FC | 	wrlong	local04, fp
0e42c     04 4E 85 F1 | 	sub	fp, #4
0e430     A7 12 02 FB | 	rdlong	arg01, fp
0e434     24 4E 85 F1 | 	sub	fp, #36
0e438     02 12 06 F1 | 	add	arg01, #2
0e43c     60 AA B0 FD | 	call	#_pspeek
0e440     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e444     2C 4E 05 F1 | 	add	fp, #44
0e448     A7 FA 61 FC | 	wrlong	result1, fp
0e44c                 | ' esize=pspeek(arrptr+2)
0e44c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0e44c     08 4E 85 F1 | 	sub	fp, #8
0e450     A7 12 02 FB | 	rdlong	arg01, fp
0e454     24 4E 85 F1 | 	sub	fp, #36
0e458     04 12 06 F1 | 	add	arg01, #4
0e45c     98 AA B0 FD | 	call	#_pslpeek
0e460     FD 24 02 F6 | 	mov	local04, result1
0e464     34 4E 05 F1 | 	add	fp, #52
0e468     A7 1E 02 FB | 	rdlong	local01, fp
0e46c     34 4E 85 F1 | 	sub	fp, #52
0e470     12 1F 12 F2 | 	cmp	local01, local04 wc
0e474     54 00 90 3D |  if_ae	jmp	#LR__1116
0e478     24 4E 05 F1 | 	add	fp, #36
0e47c     A7 12 02 FB | 	rdlong	arg01, fp
0e480     24 4E 85 F1 | 	sub	fp, #36
0e484     08 12 06 F1 | 	add	arg01, #8
0e488     6C AA B0 FD | 	call	#_pslpeek
0e48c     FD 1E 02 F6 | 	mov	local01, result1
0e490     38 4E 05 F1 | 	add	fp, #56
0e494     A7 24 02 FB | 	rdlong	local04, fp
0e498     38 4E 85 F1 | 	sub	fp, #56
0e49c     0F 25 12 F2 | 	cmp	local04, local01 wc
0e4a0     28 00 90 3D |  if_ae	jmp	#LR__1116
0e4a4     24 4E 05 F1 | 	add	fp, #36
0e4a8     A7 12 02 FB | 	rdlong	arg01, fp
0e4ac     24 4E 85 F1 | 	sub	fp, #36
0e4b0     0C 12 06 F1 | 	add	arg01, #12
0e4b4     40 AA B0 FD | 	call	#_pslpeek
0e4b8     3C 4E 05 F1 | 	add	fp, #60
0e4bc     A7 24 02 FB | 	rdlong	local04, fp
0e4c0     3C 4E 85 F1 | 	sub	fp, #60
0e4c4     FD 24 12 F2 | 	cmp	local04, result1 wc
0e4c8     0C 00 90 CD |  if_b	jmp	#LR__1117
0e4cc                 | LR__1116
0e4cc     31 12 06 F6 | 	mov	arg01, #49
0e4d0     90 A7 B0 FD | 	call	#_printerror
0e4d4     60 02 90 FD | 	jmp	#LR__1133
0e4d8                 | LR__1117
0e4d8     24 4E 05 F1 | 	add	fp, #36
0e4dc     A7 12 02 FB | 	rdlong	arg01, fp
0e4e0     09 25 02 F6 | 	mov	local04, arg01
0e4e4     10 24 06 F1 | 	add	local04, #16
0e4e8     24 4E 85 F1 | 	sub	fp, #36
0e4ec     04 12 06 F1 | 	add	arg01, #4
0e4f0     04 AA B0 FD | 	call	#_pslpeek
0e4f4     FD 1E 02 F6 | 	mov	local01, result1
0e4f8     38 4E 05 F1 | 	add	fp, #56
0e4fc     A7 20 02 FB | 	rdlong	local02, fp
0e500     10 1F 02 FD | 	qmul	local01, local02
0e504     04 4E 85 F1 | 	sub	fp, #4
0e508     A7 22 02 FB | 	rdlong	local03, fp
0e50c     10 4E 85 F1 | 	sub	fp, #16
0e510     A7 12 02 FB | 	rdlong	arg01, fp
0e514     24 4E 85 F1 | 	sub	fp, #36
0e518     08 12 06 F1 | 	add	arg01, #8
0e51c     18 20 62 FD | 	getqx	local02
0e520     10 23 02 F1 | 	add	local03, local02
0e524     D0 A9 B0 FD | 	call	#_pslpeek
0e528     FD 20 02 F6 | 	mov	local02, result1
0e52c     24 4E 05 F1 | 	add	fp, #36
0e530     A7 12 02 FB | 	rdlong	arg01, fp
0e534     24 4E 85 F1 | 	sub	fp, #36
0e538     04 12 06 F1 | 	add	arg01, #4
0e53c     B8 A9 B0 FD | 	call	#_pslpeek
0e540     FD 20 02 FD | 	qmul	local02, result1
0e544     3C 4E 05 F1 | 	add	fp, #60
0e548     A7 20 02 FB | 	rdlong	local02, fp
0e54c     18 1E 62 FD | 	getqx	local01
0e550     10 1F 02 FD | 	qmul	local01, local02
0e554     10 4E 85 F1 | 	sub	fp, #16
0e558     A7 20 02 FB | 	rdlong	local02, fp
0e55c     18 1E 62 FD | 	getqx	local01
0e560     0F 23 02 F1 | 	add	local03, local01
0e564     11 21 02 FD | 	qmul	local02, local03
0e568     04 4E 05 F1 | 	add	fp, #4
0e56c                 | ' 
0e56c                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0e56c                 | ' select case arrtype
0e56c     18 22 62 FD | 	getqx	local03
0e570     11 25 02 F1 | 	add	local04, local03
0e574     A7 24 62 FC | 	wrlong	local04, fp
0e578     08 4E 85 F1 | 	sub	fp, #8
0e57c     A7 26 02 FB | 	rdlong	local05, fp
0e580     28 4E 85 F1 | 	sub	fp, #40
0e584     00 27 86 F1 | 	sub	local05, #256
0e588     0C 26 26 F3 | 	fle	local05, #12
0e58c     30 26 62 FD | 	jmprel	local05
0e590                 | LR__1118
0e590     30 00 90 FD | 	jmp	#LR__1119
0e594     58 00 90 FD | 	jmp	#LR__1120
0e598     6C 00 90 FD | 	jmp	#LR__1121
0e59c     80 00 90 FD | 	jmp	#LR__1122
0e5a0     B0 00 90 FD | 	jmp	#LR__1123
0e5a4     E0 00 90 FD | 	jmp	#LR__1124
0e5a8     F4 00 90 FD | 	jmp	#LR__1125
0e5ac     08 01 90 FD | 	jmp	#LR__1126
0e5b0     1C 01 90 FD | 	jmp	#LR__1127
0e5b4     30 01 90 FD | 	jmp	#LR__1128
0e5b8     44 01 90 FD | 	jmp	#LR__1129
0e5bc     58 01 90 FD | 	jmp	#LR__1130
0e5c0     6C 01 90 FD | 	jmp	#LR__1131
0e5c4                 | LR__1119
0e5c4     A7 12 02 F6 | 	mov	arg01, fp
0e5c8     30 4E 05 F1 | 	add	fp, #48
0e5cc     A7 14 02 FB | 	rdlong	arg02, fp
0e5d0     30 4E 85 F1 | 	sub	fp, #48
0e5d4     0C 16 06 F6 | 	mov	arg03, #12
0e5d8     0B 00 00 FF 
0e5dc     C0 E4 05 F1 | 	add	objptr, ##5824
0e5e0     00 D3 B0 FD | 	call	#_psram_spin2_write
0e5e4     0B 00 00 FF 
0e5e8     C0 E4 85 F1 | 	sub	objptr, ##5824
0e5ec     48 01 90 FD | 	jmp	#LR__1132
0e5f0                 | LR__1120
0e5f0     30 4E 05 F1 | 	add	fp, #48
0e5f4     A7 12 02 FB | 	rdlong	arg01, fp
0e5f8     30 4E 85 F1 | 	sub	fp, #48
0e5fc     A7 14 02 FB | 	rdlong	arg02, fp
0e600     54 A8 B0 FD | 	call	#_pspoke
0e604     30 01 90 FD | 	jmp	#LR__1132
0e608                 | LR__1121
0e608     30 4E 05 F1 | 	add	fp, #48
0e60c     A7 12 02 FB | 	rdlong	arg01, fp
0e610     30 4E 85 F1 | 	sub	fp, #48
0e614     A7 14 02 FB | 	rdlong	arg02, fp
0e618     3C A8 B0 FD | 	call	#_pspoke
0e61c     18 01 90 FD | 	jmp	#LR__1132
0e620                 | LR__1122
0e620     30 4E 05 F1 | 	add	fp, #48
0e624     A7 12 02 FB | 	rdlong	arg01, fp
0e628     30 4E 85 F1 | 	sub	fp, #48
0e62c     A7 14 02 FB | 	rdlong	arg02, fp
0e630     24 A8 B0 FD | 	call	#_pspoke
0e634     30 4E 05 F1 | 	add	fp, #48
0e638     A7 12 02 FB | 	rdlong	arg01, fp
0e63c     30 4E 85 F1 | 	sub	fp, #48
0e640     01 12 06 F1 | 	add	arg01, #1
0e644     A7 14 02 FB | 	rdlong	arg02, fp
0e648     08 14 46 F0 | 	shr	arg02, #8
0e64c     08 A8 B0 FD | 	call	#_pspoke
0e650     E4 00 90 FD | 	jmp	#LR__1132
0e654                 | LR__1123
0e654     30 4E 05 F1 | 	add	fp, #48
0e658     A7 12 02 FB | 	rdlong	arg01, fp
0e65c     30 4E 85 F1 | 	sub	fp, #48
0e660     A7 14 02 FB | 	rdlong	arg02, fp
0e664     F0 A7 B0 FD | 	call	#_pspoke
0e668     30 4E 05 F1 | 	add	fp, #48
0e66c     A7 12 02 FB | 	rdlong	arg01, fp
0e670     30 4E 85 F1 | 	sub	fp, #48
0e674     01 12 06 F1 | 	add	arg01, #1
0e678     A7 14 02 FB | 	rdlong	arg02, fp
0e67c     08 14 46 F0 | 	shr	arg02, #8
0e680     D4 A7 B0 FD | 	call	#_pspoke
0e684     B0 00 90 FD | 	jmp	#LR__1132
0e688                 | LR__1124
0e688     30 4E 05 F1 | 	add	fp, #48
0e68c     A7 12 02 FB | 	rdlong	arg01, fp
0e690     30 4E 85 F1 | 	sub	fp, #48
0e694     A7 14 02 FB | 	rdlong	arg02, fp
0e698     2C A7 B0 FD | 	call	#_pslpoke
0e69c     98 00 90 FD | 	jmp	#LR__1132
0e6a0                 | LR__1125
0e6a0     30 4E 05 F1 | 	add	fp, #48
0e6a4     A7 12 02 FB | 	rdlong	arg01, fp
0e6a8     30 4E 85 F1 | 	sub	fp, #48
0e6ac     A7 14 02 FB | 	rdlong	arg02, fp
0e6b0     14 A7 B0 FD | 	call	#_pslpoke
0e6b4     80 00 90 FD | 	jmp	#LR__1132
0e6b8                 | LR__1126
0e6b8     30 4E 05 F1 | 	add	fp, #48
0e6bc     A7 12 02 FB | 	rdlong	arg01, fp
0e6c0     30 4E 85 F1 | 	sub	fp, #48
0e6c4     A7 14 02 FB | 	rdlong	arg02, fp
0e6c8     FC A6 B0 FD | 	call	#_pslpoke
0e6cc     68 00 90 FD | 	jmp	#LR__1132
0e6d0                 | LR__1127
0e6d0     30 4E 05 F1 | 	add	fp, #48
0e6d4     A7 12 02 FB | 	rdlong	arg01, fp
0e6d8     30 4E 85 F1 | 	sub	fp, #48
0e6dc     A7 14 02 FB | 	rdlong	arg02, fp
0e6e0     E4 A6 B0 FD | 	call	#_pslpoke
0e6e4     50 00 90 FD | 	jmp	#LR__1132
0e6e8                 | LR__1128
0e6e8     30 4E 05 F1 | 	add	fp, #48
0e6ec     A7 12 02 FB | 	rdlong	arg01, fp
0e6f0     30 4E 85 F1 | 	sub	fp, #48
0e6f4     A7 14 02 FB | 	rdlong	arg02, fp
0e6f8     CC A6 B0 FD | 	call	#_pslpoke
0e6fc     38 00 90 FD | 	jmp	#LR__1132
0e700                 | LR__1129
0e700     30 4E 05 F1 | 	add	fp, #48
0e704     A7 12 02 FB | 	rdlong	arg01, fp
0e708     30 4E 85 F1 | 	sub	fp, #48
0e70c     A7 14 02 FB | 	rdlong	arg02, fp
0e710     B4 A6 B0 FD | 	call	#_pslpoke
0e714     20 00 90 FD | 	jmp	#LR__1132
0e718                 | LR__1130
0e718     30 4E 05 F1 | 	add	fp, #48
0e71c     A7 12 02 FB | 	rdlong	arg01, fp
0e720     30 4E 85 F1 | 	sub	fp, #48
0e724     A7 14 02 FB | 	rdlong	arg02, fp
0e728     9C A6 B0 FD | 	call	#_pslpoke
0e72c     08 00 90 FD | 	jmp	#LR__1132
0e730                 | LR__1131
0e730     2F 12 06 F6 | 	mov	arg01, #47
0e734     2C A5 B0 FD | 	call	#_printerror
0e738                 | LR__1132
0e738                 | LR__1133
0e738     A7 F0 03 F6 | 	mov	ptra, fp
0e73c     B2 00 A0 FD | 	call	#popregs_
0e740                 | _do_assign_ret
0e740     2D 00 64 FD | 	ret
0e744                 | 
0e744                 | ' 
0e744                 | ' 
0e744                 | ' ' --------------------- Read a variable and push to the stack
0e744                 | ' 
0e744                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0e744                 | ' 
0e744                 | ' sub do_getvar
0e744                 | _do_getvar
0e744     04 4A 05 F6 | 	mov	COUNT_, #4
0e748     A8 00 A0 FD | 	call	#pushregs_
0e74c     3C F0 07 F1 | 	add	ptra, #60
0e750                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0e750                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0e750     6A 00 00 FF 
0e754     64 E4 05 F1 | 	add	objptr, ##54372
0e758     F2 1E 02 FB | 	rdlong	local01, objptr
0e75c     0F 17 02 F6 | 	mov	arg03, local01
0e760     01 16 66 F0 | 	shl	arg03, #1
0e764     0F 17 02 F1 | 	add	arg03, local01
0e768     02 16 66 F0 | 	shl	arg03, #2
0e76c     03 00 00 FF 
0e770     04 E4 85 F1 | 	sub	objptr, ##1540
0e774     F2 16 02 F1 | 	add	arg03, objptr
0e778     04 16 06 F1 | 	add	arg03, #4
0e77c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0e780     67 00 00 FF 
0e784     60 E4 85 F1 | 	sub	objptr, ##52832
0e788     C4 00 90 5D |  if_ne	jmp	#LR__1141
0e78c     6A 00 00 FF 
0e790     64 E4 05 F1 | 	add	objptr, ##54372
0e794     F2 1E 02 FB | 	rdlong	local01, objptr
0e798     0F 13 02 F6 | 	mov	arg01, local01
0e79c     01 12 66 F0 | 	shl	arg01, #1
0e7a0     0F 13 02 F1 | 	add	arg01, local01
0e7a4     02 12 66 F0 | 	shl	arg01, #2
0e7a8     03 00 00 FF 
0e7ac     04 E4 85 F1 | 	sub	objptr, ##1540
0e7b0     F2 12 02 F1 | 	add	arg01, objptr
0e7b4     09 1F 02 FB | 	rdlong	local01, arg01
0e7b8     04 1E 66 F0 | 	shl	local01, #4
0e7bc     32 00 00 FF 
0e7c0     74 E4 85 F1 | 	sub	objptr, ##25716
0e7c4     F2 1E 02 F1 | 	add	local01, objptr
0e7c8     04 1E 06 F1 | 	add	local01, #4
0e7cc     0F 13 02 FB | 	rdlong	arg01, local01
0e7d0     04 1E 06 F1 | 	add	local01, #4
0e7d4     0F 1F 02 FB | 	rdlong	local01, local01
0e7d8     A7 12 62 FC | 	wrlong	arg01, fp
0e7dc     04 4E 05 F1 | 	add	fp, #4
0e7e0     A7 1E 62 FC | 	wrlong	local01, fp
0e7e4     35 00 00 FF 
0e7e8     78 E4 05 F1 | 	add	objptr, ##27256
0e7ec     F2 1E 02 FB | 	rdlong	local01, objptr
0e7f0     0F 13 02 F6 | 	mov	arg01, local01
0e7f4     01 12 66 F0 | 	shl	arg01, #1
0e7f8     0F 13 02 F1 | 	add	arg01, local01
0e7fc     02 12 66 F0 | 	shl	arg01, #2
0e800     03 00 00 FF 
0e804     04 E4 85 F1 | 	sub	objptr, ##1540
0e808     F2 12 02 F1 | 	add	arg01, objptr
0e80c     09 1F 02 FB | 	rdlong	local01, arg01
0e810     04 1E 66 F0 | 	shl	local01, #4
0e814     32 00 00 FF 
0e818     74 E4 85 F1 | 	sub	objptr, ##25716
0e81c     F2 1E 02 F1 | 	add	local01, objptr
0e820     0C 1E 06 F1 | 	add	local01, #12
0e824     0F 1F 02 FB | 	rdlong	local01, local01
0e828     04 4E 05 F1 | 	add	fp, #4
0e82c     A7 1E 62 FC | 	wrlong	local01, fp
0e830                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0e830                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0e830                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0e830     08 4E 85 F1 | 	sub	fp, #8
0e834     00 1F 16 F2 | 	cmp	local01, #256 wc
0e838     34 00 00 FF 
0e83c     EC E5 85 F1 | 	sub	objptr, ##27116
0e840     0C 00 90 3D |  if_ae	jmp	#LR__1140
0e844     A7 12 02 F6 | 	mov	arg01, fp
0e848     DC B9 BF FD | 	call	#_push
0e84c     A0 04 90 FD | 	jmp	#LR__1162
0e850                 | LR__1140
0e850                 | LR__1141
0e850     6A 00 00 FF 
0e854     64 E4 05 F1 | 	add	objptr, ##54372
0e858     F2 16 02 FB | 	rdlong	arg03, objptr
0e85c     0B 15 02 F6 | 	mov	arg02, arg03
0e860     01 14 66 F0 | 	shl	arg02, #1
0e864     0B 15 02 F1 | 	add	arg02, arg03
0e868     02 14 66 F0 | 	shl	arg02, #2
0e86c     03 00 00 FF 
0e870     04 E4 85 F1 | 	sub	objptr, ##1540
0e874     F2 14 02 F1 | 	add	arg02, objptr
0e878     0A 17 02 FB | 	rdlong	arg03, arg02
0e87c     04 16 66 F0 | 	shl	arg03, #4
0e880     32 00 00 FF 
0e884     74 E4 85 F1 | 	sub	objptr, ##25716
0e888     F2 16 02 F1 | 	add	arg03, objptr
0e88c     04 16 06 F1 | 	add	arg03, #4
0e890     0B 13 02 FB | 	rdlong	arg01, arg03
0e894     0C 4E 05 F1 | 	add	fp, #12
0e898     A7 12 62 FC | 	wrlong	arg01, fp
0e89c     0C 4E 85 F1 | 	sub	fp, #12
0e8a0     34 00 00 FF 
0e8a4     EC E5 85 F1 | 	sub	objptr, ##27116
0e8a8     4C A6 B0 FD | 	call	#_pslpeek
0e8ac     FD FA 31 F9 | 	getword	result1, result1, #0
0e8b0     10 4E 05 F1 | 	add	fp, #16
0e8b4     A7 FA 61 FC | 	wrlong	result1, fp
0e8b8     6A 00 00 FF 
0e8bc     64 E4 05 F1 | 	add	objptr, ##54372
0e8c0     F2 16 02 FB | 	rdlong	arg03, objptr
0e8c4     0B 15 02 F6 | 	mov	arg02, arg03
0e8c8     01 14 66 F0 | 	shl	arg02, #1
0e8cc     0B 15 02 F1 | 	add	arg02, arg03
0e8d0     02 14 66 F0 | 	shl	arg02, #2
0e8d4     03 00 00 FF 
0e8d8     04 E4 85 F1 | 	sub	objptr, ##1540
0e8dc     F2 14 02 F1 | 	add	arg02, objptr
0e8e0     04 14 06 F1 | 	add	arg02, #4
0e8e4     0A 17 02 FB | 	rdlong	arg03, arg02
0e8e8     04 4E 05 F1 | 	add	fp, #4
0e8ec     A7 16 62 FC | 	wrlong	arg03, fp
0e8f0     08 4E 85 F1 | 	sub	fp, #8
0e8f4     A7 12 02 FB | 	rdlong	arg01, fp
0e8f8     0C 4E 85 F1 | 	sub	fp, #12
0e8fc     02 12 06 F1 | 	add	arg01, #2
0e900     67 00 00 FF 
0e904     60 E4 85 F1 | 	sub	objptr, ##52832
0e908     94 A5 B0 FD | 	call	#_pspeek
0e90c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e910     18 4E 05 F1 | 	add	fp, #24
0e914     A7 FA 61 FC | 	wrlong	result1, fp
0e918     0C 4E 85 F1 | 	sub	fp, #12
0e91c     A7 12 02 FB | 	rdlong	arg01, fp
0e920     0C 4E 85 F1 | 	sub	fp, #12
0e924     04 12 06 F1 | 	add	arg01, #4
0e928     CC A5 B0 FD | 	call	#_pslpeek
0e92c     1C 4E 05 F1 | 	add	fp, #28
0e930     A7 FA 61 FC | 	wrlong	result1, fp
0e934     10 4E 85 F1 | 	sub	fp, #16
0e938     A7 12 02 FB | 	rdlong	arg01, fp
0e93c     0C 4E 85 F1 | 	sub	fp, #12
0e940     08 12 06 F1 | 	add	arg01, #8
0e944     B0 A5 B0 FD | 	call	#_pslpeek
0e948     20 4E 05 F1 | 	add	fp, #32
0e94c     A7 FA 61 FC | 	wrlong	result1, fp
0e950     14 4E 85 F1 | 	sub	fp, #20
0e954     A7 12 02 FB | 	rdlong	arg01, fp
0e958     0C 4E 85 F1 | 	sub	fp, #12
0e95c     0C 12 06 F1 | 	add	arg01, #12
0e960     94 A5 B0 FD | 	call	#_pslpeek
0e964     24 4E 05 F1 | 	add	fp, #36
0e968     A7 FA 61 FC | 	wrlong	result1, fp
0e96c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0e96c                 | ' esize=pspeek(arrptr+2)
0e96c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0e96c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0e96c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0e96c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0e96c     10 4E 85 F1 | 	sub	fp, #16
0e970     A7 16 02 FB | 	rdlong	arg03, fp
0e974     14 4E 85 F1 | 	sub	fp, #20
0e978     03 16 16 F2 | 	cmp	arg03, #3 wc
0e97c     38 00 90 CD |  if_b	jmp	#LR__1142
0e980     0C B8 BF FD | 	call	#_pop
0e984     FF 16 02 F6 | 	mov	arg03, result3
0e988     A7 FA 61 FC | 	wrlong	result1, fp
0e98c     04 4E 05 F1 | 	add	fp, #4
0e990     A7 FC 61 FC | 	wrlong	result2, fp
0e994     04 4E 05 F1 | 	add	fp, #4
0e998     A7 16 62 FC | 	wrlong	arg03, fp
0e99c     08 4E 85 F1 | 	sub	fp, #8
0e9a0     A7 12 02 F6 | 	mov	arg01, fp
0e9a4     E0 40 B0 FD | 	call	#_converttoint
0e9a8     30 4E 05 F1 | 	add	fp, #48
0e9ac     A7 FA 61 FC | 	wrlong	result1, fp
0e9b0     30 4E 85 F1 | 	sub	fp, #48
0e9b4     0C 00 90 FD | 	jmp	#LR__1143
0e9b8                 | LR__1142
0e9b8     30 4E 05 F1 | 	add	fp, #48
0e9bc     A7 00 68 FC | 	wrlong	#0, fp
0e9c0     30 4E 85 F1 | 	sub	fp, #48
0e9c4                 | LR__1143
0e9c4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0e9c4     14 4E 05 F1 | 	add	fp, #20
0e9c8     A7 16 02 FB | 	rdlong	arg03, fp
0e9cc     14 4E 85 F1 | 	sub	fp, #20
0e9d0     02 16 16 F2 | 	cmp	arg03, #2 wc
0e9d4     38 00 90 CD |  if_b	jmp	#LR__1144
0e9d8     B4 B7 BF FD | 	call	#_pop
0e9dc     FF 16 02 F6 | 	mov	arg03, result3
0e9e0     A7 FA 61 FC | 	wrlong	result1, fp
0e9e4     04 4E 05 F1 | 	add	fp, #4
0e9e8     A7 FC 61 FC | 	wrlong	result2, fp
0e9ec     04 4E 05 F1 | 	add	fp, #4
0e9f0     A7 16 62 FC | 	wrlong	arg03, fp
0e9f4     08 4E 85 F1 | 	sub	fp, #8
0e9f8     A7 12 02 F6 | 	mov	arg01, fp
0e9fc     88 40 B0 FD | 	call	#_converttoint
0ea00     2C 4E 05 F1 | 	add	fp, #44
0ea04     A7 FA 61 FC | 	wrlong	result1, fp
0ea08     2C 4E 85 F1 | 	sub	fp, #44
0ea0c     0C 00 90 FD | 	jmp	#LR__1145
0ea10                 | LR__1144
0ea10     2C 4E 05 F1 | 	add	fp, #44
0ea14     A7 00 68 FC | 	wrlong	#0, fp
0ea18     2C 4E 85 F1 | 	sub	fp, #44
0ea1c                 | LR__1145
0ea1c                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0ea1c     14 4E 05 F1 | 	add	fp, #20
0ea20     A7 16 02 FB | 	rdlong	arg03, fp
0ea24     14 4E 85 F1 | 	sub	fp, #20
0ea28     01 16 16 F2 | 	cmp	arg03, #1 wc
0ea2c     38 00 90 CD |  if_b	jmp	#LR__1146
0ea30     5C B7 BF FD | 	call	#_pop
0ea34     FF 16 02 F6 | 	mov	arg03, result3
0ea38     A7 FA 61 FC | 	wrlong	result1, fp
0ea3c     04 4E 05 F1 | 	add	fp, #4
0ea40     A7 FC 61 FC | 	wrlong	result2, fp
0ea44     04 4E 05 F1 | 	add	fp, #4
0ea48     A7 16 62 FC | 	wrlong	arg03, fp
0ea4c     08 4E 85 F1 | 	sub	fp, #8
0ea50     A7 12 02 F6 | 	mov	arg01, fp
0ea54     30 40 B0 FD | 	call	#_converttoint
0ea58     28 4E 05 F1 | 	add	fp, #40
0ea5c     A7 FA 61 FC | 	wrlong	result1, fp
0ea60     28 4E 85 F1 | 	sub	fp, #40
0ea64     0C 00 90 FD | 	jmp	#LR__1147
0ea68                 | LR__1146
0ea68     28 4E 05 F1 | 	add	fp, #40
0ea6c     A7 00 68 FC | 	wrlong	#0, fp
0ea70     28 4E 85 F1 | 	sub	fp, #40
0ea74                 | LR__1147
0ea74     0C 4E 05 F1 | 	add	fp, #12
0ea78     A7 20 02 FB | 	rdlong	local02, fp
0ea7c     1C 4E 05 F1 | 	add	fp, #28
0ea80     A7 22 02 FB | 	rdlong	local03, fp
0ea84     04 4E 05 F1 | 	add	fp, #4
0ea88     A7 FC 01 FB | 	rdlong	result2, fp
0ea8c     10 4E 85 F1 | 	sub	fp, #16
0ea90     A7 FE 01 FB | 	rdlong	result3, fp
0ea94     FF FC 01 FD | 	qmul	result2, result3
0ea98     10 20 06 F1 | 	add	local02, #16
0ea9c     14 4E 05 F1 | 	add	fp, #20
0eaa0     A7 FC 01 FB | 	rdlong	result2, fp
0eaa4     18 FA 61 FD | 	getqx	result1
0eaa8     FF FC 01 FD | 	qmul	result2, result3
0eaac     FD 22 02 F1 | 	add	local03, result1
0eab0     10 4E 85 F1 | 	sub	fp, #16
0eab4     A7 FE 01 FB | 	rdlong	result3, fp
0eab8     18 FC 61 FD | 	getqx	result2
0eabc     FF FC 01 FD | 	qmul	result2, result3
0eac0     08 4E 85 F1 | 	sub	fp, #8
0eac4     A7 FE 01 FB | 	rdlong	result3, fp
0eac8     18 FC 61 FD | 	getqx	result2
0eacc     FE 22 02 F1 | 	add	local03, result2
0ead0     FF 22 02 FD | 	qmul	local03, result3
0ead4     1C 4E 05 F1 | 	add	fp, #28
0ead8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ead8                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0ead8                 | ' 
0ead8                 | ' select case vartype
0ead8     18 FC 61 FD | 	getqx	result2
0eadc     FE 20 02 F1 | 	add	local02, result2
0eae0     A7 20 62 FC | 	wrlong	local02, fp
0eae4     24 4E 85 F1 | 	sub	fp, #36
0eae8     A7 24 02 FB | 	rdlong	local04, fp
0eaec     10 4E 85 F1 | 	sub	fp, #16
0eaf0     00 25 86 F1 | 	sub	local04, #256
0eaf4     0C 24 26 F3 | 	fle	local04, #12
0eaf8     30 24 62 FD | 	jmprel	local04
0eafc                 | LR__1148
0eafc     30 00 90 FD | 	jmp	#LR__1149
0eb00     58 00 90 FD | 	jmp	#LR__1150
0eb04     8C 00 90 FD | 	jmp	#LR__1151
0eb08     AC 00 90 FD | 	jmp	#LR__1152
0eb0c     E8 00 90 FD | 	jmp	#LR__1153
0eb10     08 01 90 FD | 	jmp	#LR__1154
0eb14     24 01 90 FD | 	jmp	#LR__1155
0eb18     40 01 90 FD | 	jmp	#LR__1156
0eb1c     50 01 90 FD | 	jmp	#LR__1157
0eb20     60 01 90 FD | 	jmp	#LR__1158
0eb24     7C 01 90 FD | 	jmp	#LR__1159
0eb28     8C 01 90 FD | 	jmp	#LR__1160
0eb2c     B8 01 90 FD | 	jmp	#LR__1161
0eb30                 | LR__1149
0eb30     A7 12 02 F6 | 	mov	arg01, fp
0eb34     34 4E 05 F1 | 	add	fp, #52
0eb38     A7 14 02 FB | 	rdlong	arg02, fp
0eb3c     34 4E 85 F1 | 	sub	fp, #52
0eb40     0C 16 06 F6 | 	mov	arg03, #12
0eb44     0B 00 00 FF 
0eb48     C0 E4 05 F1 | 	add	objptr, ##5824
0eb4c     F8 CC B0 FD | 	call	#_psram_spin2_read1
0eb50     0B 00 00 FF 
0eb54     C0 E4 85 F1 | 	sub	objptr, ##5824
0eb58     8C 01 90 FD | 	jmp	#LR__1161
0eb5c                 | LR__1150
0eb5c     08 4E 05 F1 | 	add	fp, #8
0eb60     A7 38 68 FC | 	wrlong	#28, fp
0eb64     2C 4E 05 F1 | 	add	fp, #44
0eb68     A7 12 02 FB | 	rdlong	arg01, fp
0eb6c     34 4E 85 F1 | 	sub	fp, #52
0eb70     2C A3 B0 FD | 	call	#_pspeek
0eb74     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eb78     A7 FA 61 FC | 	wrlong	result1, fp
0eb7c     80 FA 15 F2 | 	cmp	result1, #128 wc
0eb80     00 1F 66 36 |  if_ae	neg	local01, #256
0eb84     A7 22 02 3B |  if_ae	rdlong	local03, fp
0eb88     11 1F 42 35 |  if_ae	or	local01, local03
0eb8c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0eb90     54 01 90 FD | 	jmp	#LR__1161
0eb94                 | LR__1151
0eb94     08 4E 05 F1 | 	add	fp, #8
0eb98     A7 3A 68 FC | 	wrlong	#29, fp
0eb9c     2C 4E 05 F1 | 	add	fp, #44
0eba0     A7 12 02 FB | 	rdlong	arg01, fp
0eba4     34 4E 85 F1 | 	sub	fp, #52
0eba8     F4 A2 B0 FD | 	call	#_pspeek
0ebac     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ebb0     A7 FA 61 FC | 	wrlong	result1, fp
0ebb4     30 01 90 FD | 	jmp	#LR__1161
0ebb8                 | LR__1152
0ebb8     08 4E 05 F1 | 	add	fp, #8
0ebbc     A7 38 68 FC | 	wrlong	#28, fp
0ebc0     2C 4E 05 F1 | 	add	fp, #44
0ebc4     A7 12 02 FB | 	rdlong	arg01, fp
0ebc8     34 4E 85 F1 | 	sub	fp, #52
0ebcc     28 A3 B0 FD | 	call	#_pslpeek
0ebd0     FD FA 31 F9 | 	getword	result1, result1, #0
0ebd4     A7 FA 61 FC | 	wrlong	result1, fp
0ebd8     40 00 00 FF 
0ebdc     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0ebe0     FF 7F 00 3F 
0ebe4     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0ebe8     A7 22 02 3B |  if_ae	rdlong	local03, fp
0ebec     11 1F 42 35 |  if_ae	or	local01, local03
0ebf0     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0ebf4     F0 00 90 FD | 	jmp	#LR__1161
0ebf8                 | LR__1153
0ebf8     08 4E 05 F1 | 	add	fp, #8
0ebfc     A7 3A 68 FC | 	wrlong	#29, fp
0ec00     2C 4E 05 F1 | 	add	fp, #44
0ec04     A7 12 02 FB | 	rdlong	arg01, fp
0ec08     34 4E 85 F1 | 	sub	fp, #52
0ec0c     E8 A2 B0 FD | 	call	#_pslpeek
0ec10     FD FA 31 F9 | 	getword	result1, result1, #0
0ec14     A7 FA 61 FC | 	wrlong	result1, fp
0ec18     CC 00 90 FD | 	jmp	#LR__1161
0ec1c                 | LR__1154
0ec1c     08 4E 05 F1 | 	add	fp, #8
0ec20     A7 38 68 FC | 	wrlong	#28, fp
0ec24     2C 4E 05 F1 | 	add	fp, #44
0ec28     A7 12 02 FB | 	rdlong	arg01, fp
0ec2c     34 4E 85 F1 | 	sub	fp, #52
0ec30     C4 A2 B0 FD | 	call	#_pslpeek
0ec34     A7 FA 61 FC | 	wrlong	result1, fp
0ec38     AC 00 90 FD | 	jmp	#LR__1161
0ec3c                 | LR__1155
0ec3c     08 4E 05 F1 | 	add	fp, #8
0ec40     A7 3A 68 FC | 	wrlong	#29, fp
0ec44     2C 4E 05 F1 | 	add	fp, #44
0ec48     A7 12 02 FB | 	rdlong	arg01, fp
0ec4c     34 4E 85 F1 | 	sub	fp, #52
0ec50     A4 A2 B0 FD | 	call	#_pslpeek
0ec54     A7 FA 61 FC | 	wrlong	result1, fp
0ec58     8C 00 90 FD | 	jmp	#LR__1161
0ec5c                 | LR__1156
0ec5c     08 4E 05 F1 | 	add	fp, #8
0ec60     A7 FE 69 FC | 	wrlong	#255, fp
0ec64     08 4E 85 F1 | 	sub	fp, #8
0ec68     A7 60 68 FC | 	wrlong	#48, fp
0ec6c     78 00 90 FD | 	jmp	#LR__1161
0ec70                 | LR__1157
0ec70     08 4E 05 F1 | 	add	fp, #8
0ec74     A7 FE 69 FC | 	wrlong	#255, fp
0ec78     08 4E 85 F1 | 	sub	fp, #8
0ec7c     A7 60 68 FC | 	wrlong	#48, fp
0ec80     64 00 90 FD | 	jmp	#LR__1161
0ec84                 | LR__1158
0ec84     08 4E 05 F1 | 	add	fp, #8
0ec88     A7 3C 68 FC | 	wrlong	#30, fp
0ec8c     2C 4E 05 F1 | 	add	fp, #44
0ec90     A7 12 02 FB | 	rdlong	arg01, fp
0ec94     34 4E 85 F1 | 	sub	fp, #52
0ec98     5C A2 B0 FD | 	call	#_pslpeek
0ec9c     A7 FA 61 FC | 	wrlong	result1, fp
0eca0     44 00 90 FD | 	jmp	#LR__1161
0eca4                 | LR__1159
0eca4     08 4E 05 F1 | 	add	fp, #8
0eca8     A7 FE 69 FC | 	wrlong	#255, fp
0ecac     08 4E 85 F1 | 	sub	fp, #8
0ecb0     A7 60 68 FC | 	wrlong	#48, fp
0ecb4     30 00 90 FD | 	jmp	#LR__1161
0ecb8                 | LR__1160
0ecb8     08 4E 05 F1 | 	add	fp, #8
0ecbc     A7 3E 68 FC | 	wrlong	#31, fp
0ecc0     2C 4E 05 F1 | 	add	fp, #44
0ecc4     A7 12 02 FB | 	rdlong	arg01, fp
0ecc8     34 4E 85 F1 | 	sub	fp, #52
0eccc     28 A2 B0 FD | 	call	#_pslpeek
0ecd0     A7 FA 61 FC | 	wrlong	result1, fp
0ecd4     00 04 00 FF 
0ecd8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0ecdc     08 4E 05 31 |  if_ae	add	fp, #8
0ece0     A7 56 68 3C |  if_ae	wrlong	#43, fp
0ece4     08 4E 85 31 |  if_ae	sub	fp, #8
0ece8                 | LR__1161
0ece8     A7 12 02 F6 | 	mov	arg01, fp
0ecec     38 B5 BF FD | 	call	#_push
0ecf0                 | LR__1162
0ecf0     A7 F0 03 F6 | 	mov	ptra, fp
0ecf4     B2 00 A0 FD | 	call	#popregs_
0ecf8                 | _do_getvar_ret
0ecf8     2D 00 64 FD | 	ret
0ecfc                 | 
0ecfc                 | ' 
0ecfc                 | ' 
0ecfc                 | ' sub do_getaddr
0ecfc                 | _do_getaddr
0ecfc     01 4A 05 F6 | 	mov	COUNT_, #1
0ed00     A8 00 A0 FD | 	call	#pushregs_
0ed04     38 F0 07 F1 | 	add	ptra, #56
0ed08                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0ed08                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0ed08     6A 00 00 FF 
0ed0c     64 E4 05 F1 | 	add	objptr, ##54372
0ed10     F2 12 02 FB | 	rdlong	arg01, objptr
0ed14     09 FD 01 F6 | 	mov	result2, arg01
0ed18     01 FC 65 F0 | 	shl	result2, #1
0ed1c     09 FD 01 F1 | 	add	result2, arg01
0ed20     02 FC 65 F0 | 	shl	result2, #2
0ed24     03 00 00 FF 
0ed28     04 E4 85 F1 | 	sub	objptr, ##1540
0ed2c     F2 FC 01 F1 | 	add	result2, objptr
0ed30     04 FC 05 F1 | 	add	result2, #4
0ed34     FE FC 09 FB | 	rdlong	result2, result2 wz
0ed38     67 00 00 FF 
0ed3c     60 E4 85 F1 | 	sub	objptr, ##52832
0ed40     C4 00 90 5D |  if_ne	jmp	#LR__1170
0ed44     6A 00 00 FF 
0ed48     64 E4 05 F1 | 	add	objptr, ##54372
0ed4c     F2 12 02 FB | 	rdlong	arg01, objptr
0ed50     09 FD 01 F6 | 	mov	result2, arg01
0ed54     01 FC 65 F0 | 	shl	result2, #1
0ed58     09 FD 01 F1 | 	add	result2, arg01
0ed5c     02 FC 65 F0 | 	shl	result2, #2
0ed60     03 00 00 FF 
0ed64     04 E4 85 F1 | 	sub	objptr, ##1540
0ed68     F2 FC 01 F1 | 	add	result2, objptr
0ed6c     FE 12 02 FB | 	rdlong	arg01, result2
0ed70     04 12 66 F0 | 	shl	arg01, #4
0ed74     32 00 00 FF 
0ed78     74 E4 85 F1 | 	sub	objptr, ##25716
0ed7c     F2 12 02 F1 | 	add	arg01, objptr
0ed80     0C 12 06 F1 | 	add	arg01, #12
0ed84     09 13 02 FB | 	rdlong	arg01, arg01
0ed88     08 4E 05 F1 | 	add	fp, #8
0ed8c     A7 12 62 FC | 	wrlong	arg01, fp
0ed90                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ed90                 | '    if t1.result_type>=array_no_type then goto 2200
0ed90     08 4E 85 F1 | 	sub	fp, #8
0ed94     00 13 16 F2 | 	cmp	arg01, #256 wc
0ed98     34 00 00 FF 
0ed9c     EC E5 85 F1 | 	sub	objptr, ##27116
0eda0     64 00 90 3D |  if_ae	jmp	#LR__1171
0eda4     6A 00 00 FF 
0eda8     64 E4 05 F1 | 	add	objptr, ##54372
0edac     F2 12 02 FB | 	rdlong	arg01, objptr
0edb0     09 FB 01 F6 | 	mov	result1, arg01
0edb4     01 FA 65 F0 | 	shl	result1, #1
0edb8     09 FB 01 F1 | 	add	result1, arg01
0edbc     02 FA 65 F0 | 	shl	result1, #2
0edc0     03 00 00 FF 
0edc4     04 E4 85 F1 | 	sub	objptr, ##1540
0edc8     F2 FA 01 F1 | 	add	result1, objptr
0edcc     FD FA 01 FB | 	rdlong	result1, result1
0edd0     04 FA 65 F0 | 	shl	result1, #4
0edd4     32 00 00 FF 
0edd8     74 E4 85 F1 | 	sub	objptr, ##25716
0eddc     F2 FA 01 F1 | 	add	result1, objptr
0ede0     04 FA 05 F1 | 	add	result1, #4
0ede4     34 00 00 FF 
0ede8     EC E5 85 F1 | 	sub	objptr, ##27116
0edec     A7 FA 61 FC | 	wrlong	result1, fp
0edf0     08 4E 05 F1 | 	add	fp, #8
0edf4     A7 3A 68 FC | 	wrlong	#29, fp
0edf8     08 4E 85 F1 | 	sub	fp, #8
0edfc     A7 12 02 F6 | 	mov	arg01, fp
0ee00     24 B4 BF FD | 	call	#_push
0ee04                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0ee04                 | '   t1.result_type=result_uint
0ee04                 | '   push t1 : return
0ee04     D8 02 90 FD | 	jmp	#LR__1180
0ee08                 | LR__1170
0ee08                 | LR__1171
0ee08     6A 00 00 FF 
0ee0c     64 E4 05 F1 | 	add	objptr, ##54372
0ee10     F2 FE 01 FB | 	rdlong	result3, objptr
0ee14     FF 12 02 F6 | 	mov	arg01, result3
0ee18     01 12 66 F0 | 	shl	arg01, #1
0ee1c     FF 12 02 F1 | 	add	arg01, result3
0ee20     02 12 66 F0 | 	shl	arg01, #2
0ee24     03 00 00 FF 
0ee28     04 E4 85 F1 | 	sub	objptr, ##1540
0ee2c     F2 12 02 F1 | 	add	arg01, objptr
0ee30     09 13 02 FB | 	rdlong	arg01, arg01
0ee34     04 12 66 F0 | 	shl	arg01, #4
0ee38     32 00 00 FF 
0ee3c     74 E4 85 F1 | 	sub	objptr, ##25716
0ee40     F2 12 02 F1 | 	add	arg01, objptr
0ee44     04 12 06 F1 | 	add	arg01, #4
0ee48     09 13 02 FB | 	rdlong	arg01, arg01
0ee4c     0C 4E 05 F1 | 	add	fp, #12
0ee50     A7 12 62 FC | 	wrlong	arg01, fp
0ee54     0C 4E 85 F1 | 	sub	fp, #12
0ee58     34 00 00 FF 
0ee5c     EC E5 85 F1 | 	sub	objptr, ##27116
0ee60     94 A0 B0 FD | 	call	#_pslpeek
0ee64     FD FA 31 F9 | 	getword	result1, result1, #0
0ee68     10 4E 05 F1 | 	add	fp, #16
0ee6c     A7 FA 61 FC | 	wrlong	result1, fp
0ee70     6A 00 00 FF 
0ee74     64 E4 05 F1 | 	add	objptr, ##54372
0ee78     F2 FE 01 FB | 	rdlong	result3, objptr
0ee7c     FF 12 02 F6 | 	mov	arg01, result3
0ee80     01 12 66 F0 | 	shl	arg01, #1
0ee84     FF 12 02 F1 | 	add	arg01, result3
0ee88     02 12 66 F0 | 	shl	arg01, #2
0ee8c     03 00 00 FF 
0ee90     04 E4 85 F1 | 	sub	objptr, ##1540
0ee94     F2 12 02 F1 | 	add	arg01, objptr
0ee98     04 12 06 F1 | 	add	arg01, #4
0ee9c     09 13 02 FB | 	rdlong	arg01, arg01
0eea0     04 4E 05 F1 | 	add	fp, #4
0eea4     A7 12 62 FC | 	wrlong	arg01, fp
0eea8     08 4E 85 F1 | 	sub	fp, #8
0eeac     A7 12 02 FB | 	rdlong	arg01, fp
0eeb0     0C 4E 85 F1 | 	sub	fp, #12
0eeb4     02 12 06 F1 | 	add	arg01, #2
0eeb8     67 00 00 FF 
0eebc     60 E4 85 F1 | 	sub	objptr, ##52832
0eec0     DC 9F B0 FD | 	call	#_pspeek
0eec4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eec8     18 4E 05 F1 | 	add	fp, #24
0eecc     A7 FA 61 FC | 	wrlong	result1, fp
0eed0     0C 4E 85 F1 | 	sub	fp, #12
0eed4     A7 12 02 FB | 	rdlong	arg01, fp
0eed8     0C 4E 85 F1 | 	sub	fp, #12
0eedc     04 12 06 F1 | 	add	arg01, #4
0eee0     14 A0 B0 FD | 	call	#_pslpeek
0eee4     1C 4E 05 F1 | 	add	fp, #28
0eee8     A7 FA 61 FC | 	wrlong	result1, fp
0eeec     10 4E 85 F1 | 	sub	fp, #16
0eef0     A7 12 02 FB | 	rdlong	arg01, fp
0eef4     0C 4E 85 F1 | 	sub	fp, #12
0eef8     08 12 06 F1 | 	add	arg01, #8
0eefc     F8 9F B0 FD | 	call	#_pslpeek
0ef00     20 4E 05 F1 | 	add	fp, #32
0ef04     A7 FA 61 FC | 	wrlong	result1, fp
0ef08     14 4E 85 F1 | 	sub	fp, #20
0ef0c     A7 12 02 FB | 	rdlong	arg01, fp
0ef10     0C 4E 85 F1 | 	sub	fp, #12
0ef14     0C 12 06 F1 | 	add	arg01, #12
0ef18     DC 9F B0 FD | 	call	#_pslpeek
0ef1c     24 4E 05 F1 | 	add	fp, #36
0ef20     A7 FA 61 FC | 	wrlong	result1, fp
0ef24                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0ef24                 | ' esize=pspeek(arrptr+2)
0ef24                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0ef24                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0ef24                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0ef24                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0ef24     10 4E 85 F1 | 	sub	fp, #16
0ef28     A7 12 02 FB | 	rdlong	arg01, fp
0ef2c     14 4E 85 F1 | 	sub	fp, #20
0ef30     03 12 16 F2 | 	cmp	arg01, #3 wc
0ef34     34 00 90 CD |  if_b	jmp	#LR__1172
0ef38     54 B2 BF FD | 	call	#_pop
0ef3c     A7 FA 61 FC | 	wrlong	result1, fp
0ef40     04 4E 05 F1 | 	add	fp, #4
0ef44     A7 FC 61 FC | 	wrlong	result2, fp
0ef48     04 4E 05 F1 | 	add	fp, #4
0ef4c     A7 FE 61 FC | 	wrlong	result3, fp
0ef50     08 4E 85 F1 | 	sub	fp, #8
0ef54     A7 12 02 F6 | 	mov	arg01, fp
0ef58     2C 3B B0 FD | 	call	#_converttoint
0ef5c     30 4E 05 F1 | 	add	fp, #48
0ef60     A7 FA 61 FC | 	wrlong	result1, fp
0ef64     30 4E 85 F1 | 	sub	fp, #48
0ef68     0C 00 90 FD | 	jmp	#LR__1173
0ef6c                 | LR__1172
0ef6c     30 4E 05 F1 | 	add	fp, #48
0ef70     A7 00 68 FC | 	wrlong	#0, fp
0ef74     30 4E 85 F1 | 	sub	fp, #48
0ef78                 | LR__1173
0ef78                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0ef78     14 4E 05 F1 | 	add	fp, #20
0ef7c     A7 12 02 FB | 	rdlong	arg01, fp
0ef80     14 4E 85 F1 | 	sub	fp, #20
0ef84     02 12 16 F2 | 	cmp	arg01, #2 wc
0ef88     34 00 90 CD |  if_b	jmp	#LR__1174
0ef8c     00 B2 BF FD | 	call	#_pop
0ef90     A7 FA 61 FC | 	wrlong	result1, fp
0ef94     04 4E 05 F1 | 	add	fp, #4
0ef98     A7 FC 61 FC | 	wrlong	result2, fp
0ef9c     04 4E 05 F1 | 	add	fp, #4
0efa0     A7 FE 61 FC | 	wrlong	result3, fp
0efa4     08 4E 85 F1 | 	sub	fp, #8
0efa8     A7 12 02 F6 | 	mov	arg01, fp
0efac     D8 3A B0 FD | 	call	#_converttoint
0efb0     2C 4E 05 F1 | 	add	fp, #44
0efb4     A7 FA 61 FC | 	wrlong	result1, fp
0efb8     2C 4E 85 F1 | 	sub	fp, #44
0efbc     0C 00 90 FD | 	jmp	#LR__1175
0efc0                 | LR__1174
0efc0     2C 4E 05 F1 | 	add	fp, #44
0efc4     A7 00 68 FC | 	wrlong	#0, fp
0efc8     2C 4E 85 F1 | 	sub	fp, #44
0efcc                 | LR__1175
0efcc                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0efcc     14 4E 05 F1 | 	add	fp, #20
0efd0     A7 12 02 FB | 	rdlong	arg01, fp
0efd4     14 4E 85 F1 | 	sub	fp, #20
0efd8     01 12 16 F2 | 	cmp	arg01, #1 wc
0efdc     34 00 90 CD |  if_b	jmp	#LR__1176
0efe0     AC B1 BF FD | 	call	#_pop
0efe4     A7 FA 61 FC | 	wrlong	result1, fp
0efe8     04 4E 05 F1 | 	add	fp, #4
0efec     A7 FC 61 FC | 	wrlong	result2, fp
0eff0     04 4E 05 F1 | 	add	fp, #4
0eff4     A7 FE 61 FC | 	wrlong	result3, fp
0eff8     08 4E 85 F1 | 	sub	fp, #8
0effc     A7 12 02 F6 | 	mov	arg01, fp
0f000     84 3A B0 FD | 	call	#_converttoint
0f004     28 4E 05 F1 | 	add	fp, #40
0f008     A7 FA 61 FC | 	wrlong	result1, fp
0f00c     28 4E 85 F1 | 	sub	fp, #40
0f010     0C 00 90 FD | 	jmp	#LR__1177
0f014                 | LR__1176
0f014     28 4E 05 F1 | 	add	fp, #40
0f018     A7 00 68 FC | 	wrlong	#0, fp
0f01c     28 4E 85 F1 | 	sub	fp, #40
0f020                 | LR__1177
0f020                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f020                 | ' if numpar>0 then
0f020     14 4E 05 F1 | 	add	fp, #20
0f024     A7 FE 01 FB | 	rdlong	result3, fp
0f028     14 4E 85 F1 | 	sub	fp, #20
0f02c     01 FE 15 F2 | 	cmp	result3, #1 wc
0f030     8C 00 90 CD |  if_b	jmp	#LR__1178
0f034     0C 4E 05 F1 | 	add	fp, #12
0f038     A7 FC 01 FB | 	rdlong	result2, fp
0f03c     1C 4E 05 F1 | 	add	fp, #28
0f040     A7 FE 01 FB | 	rdlong	result3, fp
0f044     04 4E 05 F1 | 	add	fp, #4
0f048     A7 12 02 FB | 	rdlong	arg01, fp
0f04c     10 4E 85 F1 | 	sub	fp, #16
0f050     A7 FA 01 FB | 	rdlong	result1, fp
0f054     FD 12 02 FD | 	qmul	arg01, result1
0f058     10 FC 05 F1 | 	add	result2, #16
0f05c     14 4E 05 F1 | 	add	fp, #20
0f060     A7 1E 02 FB | 	rdlong	local01, fp
0f064     18 12 62 FD | 	getqx	arg01
0f068     FD 1E 02 FD | 	qmul	local01, result1
0f06c     09 FF 01 F1 | 	add	result3, arg01
0f070     10 4E 85 F1 | 	sub	fp, #16
0f074     A7 1E 02 FB | 	rdlong	local01, fp
0f078     18 FA 61 FD | 	getqx	result1
0f07c     0F FB 01 FD | 	qmul	result1, local01
0f080     08 4E 85 F1 | 	sub	fp, #8
0f084     A7 1E 02 FB | 	rdlong	local01, fp
0f088     18 FA 61 FD | 	getqx	result1
0f08c     FD FE 01 F1 | 	add	result3, result1
0f090     0F FF 01 FD | 	qmul	result3, local01
0f094     1C 4E 05 F1 | 	add	fp, #28
0f098     18 1E 62 FD | 	getqx	local01
0f09c     0F FD 01 F1 | 	add	result2, local01
0f0a0     A7 FC 61 FC | 	wrlong	result2, fp
0f0a4     2C 4E 85 F1 | 	sub	fp, #44
0f0a8     A7 3A 68 FC | 	wrlong	#29, fp
0f0ac     2C 4E 05 F1 | 	add	fp, #44
0f0b0     A7 1E 02 FB | 	rdlong	local01, fp
0f0b4     34 4E 85 F1 | 	sub	fp, #52
0f0b8     A7 1E 62 FC | 	wrlong	local01, fp
0f0bc     18 00 90 FD | 	jmp	#LR__1179
0f0c0                 | LR__1178
0f0c0     08 4E 05 F1 | 	add	fp, #8
0f0c4     A7 3A 68 FC | 	wrlong	#29, fp
0f0c8     04 4E 05 F1 | 	add	fp, #4
0f0cc     A7 1E 02 FB | 	rdlong	local01, fp
0f0d0     0C 4E 85 F1 | 	sub	fp, #12
0f0d4     A7 1E 62 FC | 	wrlong	local01, fp
0f0d8                 | LR__1179
0f0d8     A7 12 02 F6 | 	mov	arg01, fp
0f0dc     48 B1 BF FD | 	call	#_push
0f0e0                 | LR__1180
0f0e0     A7 F0 03 F6 | 	mov	ptra, fp
0f0e4     B2 00 A0 FD | 	call	#popregs_
0f0e8                 | _do_getaddr_ret
0f0e8     2D 00 64 FD | 	ret
0f0ec                 | 
0f0ec                 | ' 
0f0ec                 | ' 
0f0ec                 | ' sub do_inkey
0f0ec                 | _do_inkey
0f0ec     02 4A 05 F6 | 	mov	COUNT_, #2
0f0f0     A8 00 A0 FD | 	call	#pushregs_
0f0f4     0C F0 07 F1 | 	add	ptra, #12
0f0f8     78 CB B0 FD | 	call	#_usbnew_spin2_get_key
0f0fc     65 00 00 FF 
0f100     58 E4 05 F1 | 	add	objptr, ##51800
0f104     F2 FA 61 FC | 	wrlong	result1, objptr
0f108                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0f108     65 00 00 FF 
0f10c     58 E4 85 F1 | 	sub	objptr, ##51800
0f110     00 FA 0D F2 | 	cmp	result1, #0 wz
0f114     94 00 90 AD |  if_e	jmp	#LR__1191
0f118     65 00 00 FF 
0f11c     58 E4 05 F1 | 	add	objptr, ##51800
0f120     F2 1C 02 FB | 	rdlong	arg06, objptr
0f124     65 00 00 FF 
0f128     58 E4 85 F1 | 	sub	objptr, ##51800
0f12c     00 00 40 FF 
0f130     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f134     65 00 00 CF 
0f138     58 E4 05 C1 |  if_b	add	objptr, ##51800
0f13c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f140     65 00 00 CF 
0f144     58 E4 85 C1 |  if_b	sub	objptr, ##51800
0f148     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f14c     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f150     58 00 90 3D |  if_ae	jmp	#LR__1191
0f154                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0f154     79 00 00 FF 
0f158     C4 E5 05 F1 | 	add	objptr, ##62404
0f15c     F2 1C 02 FB | 	rdlong	arg06, objptr
0f160     79 00 00 FF 
0f164     C4 E5 85 F1 | 	sub	objptr, ##62404
0f168     01 1C 0E F2 | 	cmp	arg06, #1 wz
0f16c     3C 00 90 5D |  if_ne	jmp	#LR__1190
0f170     7B 00 00 FF 
0f174     68 E4 05 F1 | 	add	objptr, ##63080
0f178     F2 14 02 FB | 	rdlong	arg02, objptr
0f17c     04 E4 85 F1 | 	sub	objptr, #4
0f180     F2 1A 02 FB | 	rdlong	arg05, objptr
0f184     07 12 06 F6 | 	mov	arg01, #7
0f188     56 00 00 FF 
0f18c     44 16 06 F6 | 	mov	arg03, ##44100
0f190     0C 18 C6 F9 | 	decod	arg04, #12
0f194     01 1C 66 F6 | 	neg	arg06, #1
0f198     6F 00 00 FF 
0f19c     A4 E5 85 F1 | 	sub	objptr, ##57252
0f1a0     58 CE B0 FD | 	call	#_audio096_spin2_play
0f1a4     0B 00 00 FF 
0f1a8     C0 E4 85 F1 | 	sub	objptr, ##5824
0f1ac                 | LR__1190
0f1ac                 | LR__1191
0f1ac                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0f1ac     65 00 00 FF 
0f1b0     58 E4 05 F1 | 	add	objptr, ##51800
0f1b4     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0f1b8     65 00 00 FF 
0f1bc     58 E4 85 F1 | 	sub	objptr, ##51800
0f1c0     D4 01 90 AD |  if_e	jmp	#LR__1200
0f1c4     65 00 00 FF 
0f1c8     58 E4 05 F1 | 	add	objptr, ##51800
0f1cc     F2 1C 02 FB | 	rdlong	arg06, objptr
0f1d0     65 00 00 FF 
0f1d4     58 E4 85 F1 | 	sub	objptr, ##51800
0f1d8     00 00 40 FF 
0f1dc     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f1e0     65 00 00 CF 
0f1e4     58 E4 05 C1 |  if_b	add	objptr, ##51800
0f1e8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f1ec     65 00 00 CF 
0f1f0     58 E4 85 C1 |  if_b	sub	objptr, ##51800
0f1f4     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f1f8     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f1fc     98 01 90 3D |  if_ae	jmp	#LR__1200
0f200                 | '   if leds and 2 = 2 then 
0f200     7B 00 00 FF 
0f204     8C E4 05 F1 | 	add	objptr, ##63116
0f208     F2 1E 0A FB | 	rdlong	local01, objptr wz
0f20c     7B 00 00 FF 
0f210     8C E4 85 F1 | 	sub	objptr, ##63116
0f214     58 01 90 AD |  if_e	jmp	#LR__1199
0f218                 | '     if key>96 andalso key<123 then
0f218     65 00 00 FF 
0f21c     58 E4 05 F1 | 	add	objptr, ##51800
0f220     F2 1E 02 FB | 	rdlong	local01, objptr
0f224     65 00 00 FF 
0f228     58 E4 85 F1 | 	sub	objptr, ##51800
0f22c     61 1E 16 F2 | 	cmp	local01, #97 wc
0f230     3C 00 90 CD |  if_b	jmp	#LR__1192
0f234     65 00 00 FF 
0f238     58 E4 05 F1 | 	add	objptr, ##51800
0f23c     F2 1E 02 FB | 	rdlong	local01, objptr
0f240     65 00 00 FF 
0f244     58 E4 85 F1 | 	sub	objptr, ##51800
0f248     7B 1E 16 F2 | 	cmp	local01, #123 wc
0f24c     20 00 90 3D |  if_ae	jmp	#LR__1192
0f250     65 00 00 FF 
0f254     58 E4 05 F1 | 	add	objptr, ##51800
0f258     F2 1E 02 FB | 	rdlong	local01, objptr
0f25c     20 1E 86 F1 | 	sub	local01, #32
0f260     F2 1E 62 FC | 	wrlong	local01, objptr
0f264     65 00 00 FF 
0f268     58 E4 85 F1 | 	sub	objptr, ##51800
0f26c     00 01 90 FD | 	jmp	#LR__1198
0f270                 | LR__1192
0f270     65 00 00 FF 
0f274     58 E4 05 F1 | 	add	objptr, ##51800
0f278     F2 1E 02 FB | 	rdlong	local01, objptr
0f27c     65 00 00 FF 
0f280     58 E4 85 F1 | 	sub	objptr, ##51800
0f284     41 1E 16 F2 | 	cmp	local01, #65 wc
0f288     3C 00 90 CD |  if_b	jmp	#LR__1193
0f28c     65 00 00 FF 
0f290     58 E4 05 F1 | 	add	objptr, ##51800
0f294     F2 1E 02 FB | 	rdlong	local01, objptr
0f298     65 00 00 FF 
0f29c     58 E4 85 F1 | 	sub	objptr, ##51800
0f2a0     5B 1E 16 F2 | 	cmp	local01, #91 wc
0f2a4     20 00 90 3D |  if_ae	jmp	#LR__1193
0f2a8     65 00 00 FF 
0f2ac     58 E4 05 F1 | 	add	objptr, ##51800
0f2b0     F2 1E 02 FB | 	rdlong	local01, objptr
0f2b4     20 1E 06 F1 | 	add	local01, #32
0f2b8     F2 1E 62 FC | 	wrlong	local01, objptr
0f2bc     65 00 00 FF 
0f2c0     58 E4 85 F1 | 	sub	objptr, ##51800
0f2c4     A8 00 90 FD | 	jmp	#LR__1197
0f2c8                 | LR__1193
0f2c8     65 00 00 FF 
0f2cc     58 E4 05 F1 | 	add	objptr, ##51800
0f2d0     F2 1E 02 FB | 	rdlong	local01, objptr
0f2d4     65 00 00 FF 
0f2d8     58 E4 85 F1 | 	sub	objptr, ##51800
0f2dc     17 1E 16 F2 | 	cmp	local01, #23 wc
0f2e0     3C 00 90 CD |  if_b	jmp	#LR__1194
0f2e4     65 00 00 FF 
0f2e8     58 E4 05 F1 | 	add	objptr, ##51800
0f2ec     F2 1E 02 FB | 	rdlong	local01, objptr
0f2f0     65 00 00 FF 
0f2f4     58 E4 85 F1 | 	sub	objptr, ##51800
0f2f8     20 1E 16 F2 | 	cmp	local01, #32 wc
0f2fc     20 00 90 3D |  if_ae	jmp	#LR__1194
0f300     65 00 00 FF 
0f304     58 E4 05 F1 | 	add	objptr, ##51800
0f308     F2 1E 02 FB | 	rdlong	local01, objptr
0f30c     09 1E 86 F1 | 	sub	local01, #9
0f310     F2 1E 62 FC | 	wrlong	local01, objptr
0f314     65 00 00 FF 
0f318     58 E4 85 F1 | 	sub	objptr, ##51800
0f31c     50 00 90 FD | 	jmp	#LR__1196
0f320                 | LR__1194
0f320     65 00 00 FF 
0f324     58 E4 05 F1 | 	add	objptr, ##51800
0f328     F2 20 02 FB | 	rdlong	local02, objptr
0f32c     65 00 00 FF 
0f330     58 E4 85 F1 | 	sub	objptr, ##51800
0f334     0E 20 16 F2 | 	cmp	local02, #14 wc
0f338     34 00 90 CD |  if_b	jmp	#LR__1195
0f33c     65 00 00 FF 
0f340     58 E4 05 F1 | 	add	objptr, ##51800
0f344     F2 1E 02 FB | 	rdlong	local01, objptr
0f348     65 00 00 FF 
0f34c     58 E4 85 F1 | 	sub	objptr, ##51800
0f350     17 1E 16 F2 | 	cmp	local01, #23 wc
0f354     7B 00 00 CF 
0f358     9C E4 05 C1 |  if_b	add	objptr, ##63132
0f35c     F2 20 02 CB |  if_b	rdlong	local02, objptr
0f360     27 20 06 C1 |  if_b	add	local02, #39
0f364     F2 20 62 CC |  if_b	wrlong	local02, objptr
0f368     7B 00 00 CF 
0f36c     9C E4 85 C1 |  if_b	sub	objptr, ##63132
0f370                 | LR__1195
0f370                 | LR__1196
0f370                 | LR__1197
0f370                 | LR__1198
0f370                 | LR__1199
0f370     65 00 00 FF 
0f374     58 E4 05 F1 | 	add	objptr, ##51800
0f378     F2 12 02 FB | 	rdlong	arg01, objptr
0f37c     65 00 00 FF 
0f380     58 E4 85 F1 | 	sub	objptr, ##51800
0f384     20 9C B0 FD | 	call	#_scantochar
0f388     FD 12 02 F6 | 	mov	arg01, result1
0f38c     C4 F2 B0 FD | 	call	#__system__Chr_S
0f390     A7 FA 61 FC | 	wrlong	result1, fp
0f394     0C 00 90 FD | 	jmp	#LR__1201
0f398                 | LR__1200
0f398     60 01 00 FF 
0f39c     56 20 06 F6 | 	mov	local02, ##@LR__4936
0f3a0     A7 20 62 FC | 	wrlong	local02, fp
0f3a4                 | LR__1201
0f3a4     08 4E 05 F1 | 	add	fp, #8
0f3a8     A7 3E 68 FC | 	wrlong	#31, fp
0f3ac     08 4E 85 F1 | 	sub	fp, #8
0f3b0     A7 12 02 F6 | 	mov	arg01, fp
0f3b4     70 AE BF FD | 	call	#_push
0f3b8     A7 F0 03 F6 | 	mov	ptra, fp
0f3bc     B2 00 A0 FD | 	call	#popregs_
0f3c0                 | _do_inkey_ret
0f3c0     2D 00 64 FD | 	ret
0f3c4                 | 
0f3c4                 | '  
0f3c4                 | ' '------------------------ Operators 
0f3c4                 | ' 
0f3c4                 | ' sub do_plus 
0f3c4                 | _do_plus
0f3c4     05 4A 05 F6 | 	mov	COUNT_, #5
0f3c8     A8 00 A0 FD | 	call	#pushregs_
0f3cc     18 F0 07 F1 | 	add	ptra, #24
0f3d0     BC AD BF FD | 	call	#_pop
0f3d4     FD 1E 02 F6 | 	mov	local01, result1
0f3d8     FE 20 02 F6 | 	mov	local02, result2
0f3dc     FF 22 02 F6 | 	mov	local03, result3
0f3e0     0C 4E 05 F1 | 	add	fp, #12
0f3e4     A7 1E 62 FC | 	wrlong	local01, fp
0f3e8     04 4E 05 F1 | 	add	fp, #4
0f3ec     A7 20 62 FC | 	wrlong	local02, fp
0f3f0     04 4E 05 F1 | 	add	fp, #4
0f3f4     A7 22 62 FC | 	wrlong	local03, fp
0f3f8     14 4E 85 F1 | 	sub	fp, #20
0f3fc     90 AD BF FD | 	call	#_pop
0f400     FF 22 02 F6 | 	mov	local03, result3
0f404     A7 FA 61 FC | 	wrlong	result1, fp
0f408     04 4E 05 F1 | 	add	fp, #4
0f40c     A7 FC 61 FC | 	wrlong	result2, fp
0f410     04 4E 05 F1 | 	add	fp, #4
0f414     A7 22 62 FC | 	wrlong	local03, fp
0f418                 | ' 
0f418                 | ' t2=pop()
0f418                 | ' t1=pop()
0f418                 | ' 
0f418                 | ' 
0f418                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0f418     08 4E 85 F1 | 	sub	fp, #8
0f41c     1D 22 0E F2 | 	cmp	local03, #29 wz
0f420     14 4E 05 A1 |  if_e	add	fp, #20
0f424     A7 24 02 AB |  if_e	rdlong	local04, fp
0f428     14 4E 85 A1 |  if_e	sub	fp, #20
0f42c     12 23 02 A6 |  if_e	mov	local03, local04
0f430     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f434     1C 00 90 5D |  if_ne	jmp	#LR__1210
0f438     A7 1E 02 FB | 	rdlong	local01, fp
0f43c     0C 4E 05 F1 | 	add	fp, #12
0f440     A7 20 02 FB | 	rdlong	local02, fp
0f444     0C 4E 85 F1 | 	sub	fp, #12
0f448     10 1F 02 F1 | 	add	local01, local02
0f44c     A7 1E 62 FC | 	wrlong	local01, fp
0f450     48 04 90 FD | 	jmp	#LR__1225
0f454                 | LR__1210
0f454                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0f454     08 4E 05 F1 | 	add	fp, #8
0f458     A7 1E 02 FB | 	rdlong	local01, fp
0f45c     08 4E 85 F1 | 	sub	fp, #8
0f460     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f464     14 4E 05 A1 |  if_e	add	fp, #20
0f468     A7 24 02 AB |  if_e	rdlong	local04, fp
0f46c     14 4E 85 A1 |  if_e	sub	fp, #20
0f470     12 23 02 A6 |  if_e	mov	local03, local04
0f474     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f478     28 00 90 5D |  if_ne	jmp	#LR__1211
0f47c     A7 1E 02 FB | 	rdlong	local01, fp
0f480     0C 4E 05 F1 | 	add	fp, #12
0f484     A7 20 02 FB | 	rdlong	local02, fp
0f488     0C 4E 85 F1 | 	sub	fp, #12
0f48c     10 1F 02 F1 | 	add	local01, local02
0f490     A7 1E 62 FC | 	wrlong	local01, fp
0f494     08 4E 05 F1 | 	add	fp, #8
0f498     A7 38 68 FC | 	wrlong	#28, fp
0f49c     08 4E 85 F1 | 	sub	fp, #8
0f4a0     F8 03 90 FD | 	jmp	#LR__1225
0f4a4                 | LR__1211
0f4a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f4a4     08 4E 05 F1 | 	add	fp, #8
0f4a8     A7 1E 02 FB | 	rdlong	local01, fp
0f4ac     08 4E 85 F1 | 	sub	fp, #8
0f4b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f4b4     14 4E 05 A1 |  if_e	add	fp, #20
0f4b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f4c0     12 23 02 A6 |  if_e	mov	local03, local04
0f4c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f4c8     30 00 90 5D |  if_ne	jmp	#LR__1212
0f4cc     A7 12 02 FB | 	rdlong	arg01, fp
0f4d0     F0 F6 B0 FD | 	call	#__system___float_fromuns
0f4d4     FD 12 02 F6 | 	mov	arg01, result1
0f4d8     0C 4E 05 F1 | 	add	fp, #12
0f4dc     A7 14 02 FB | 	rdlong	arg02, fp
0f4e0     0C 4E 85 F1 | 	sub	fp, #12
0f4e4     10 F7 B0 FD | 	call	#__system___float_add
0f4e8     A7 FA 61 FC | 	wrlong	result1, fp
0f4ec     08 4E 05 F1 | 	add	fp, #8
0f4f0     A7 3C 68 FC | 	wrlong	#30, fp
0f4f4     08 4E 85 F1 | 	sub	fp, #8
0f4f8     A0 03 90 FD | 	jmp	#LR__1225
0f4fc                 | LR__1212
0f4fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0f4fc     08 4E 05 F1 | 	add	fp, #8
0f500     A7 1E 02 FB | 	rdlong	local01, fp
0f504     08 4E 85 F1 | 	sub	fp, #8
0f508     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f50c     14 4E 05 A1 |  if_e	add	fp, #20
0f510     A7 24 02 AB |  if_e	rdlong	local04, fp
0f514     14 4E 85 A1 |  if_e	sub	fp, #20
0f518     12 23 02 A6 |  if_e	mov	local03, local04
0f51c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f520     1C 00 90 5D |  if_ne	jmp	#LR__1213
0f524     A7 1E 02 FB | 	rdlong	local01, fp
0f528     0C 4E 05 F1 | 	add	fp, #12
0f52c     A7 20 02 FB | 	rdlong	local02, fp
0f530     0C 4E 85 F1 | 	sub	fp, #12
0f534     10 1F 02 F1 | 	add	local01, local02
0f538     A7 1E 62 FC | 	wrlong	local01, fp
0f53c     5C 03 90 FD | 	jmp	#LR__1225
0f540                 | LR__1213
0f540                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0f540     08 4E 05 F1 | 	add	fp, #8
0f544     A7 1E 02 FB | 	rdlong	local01, fp
0f548     08 4E 85 F1 | 	sub	fp, #8
0f54c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f550     14 4E 05 A1 |  if_e	add	fp, #20
0f554     A7 24 02 AB |  if_e	rdlong	local04, fp
0f558     14 4E 85 A1 |  if_e	sub	fp, #20
0f55c     12 23 02 A6 |  if_e	mov	local03, local04
0f560     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f564     1C 00 90 5D |  if_ne	jmp	#LR__1214
0f568     A7 1E 02 FB | 	rdlong	local01, fp
0f56c     0C 4E 05 F1 | 	add	fp, #12
0f570     A7 20 02 FB | 	rdlong	local02, fp
0f574     0C 4E 85 F1 | 	sub	fp, #12
0f578     10 1F 02 F1 | 	add	local01, local02
0f57c     A7 1E 62 FC | 	wrlong	local01, fp
0f580     18 03 90 FD | 	jmp	#LR__1225
0f584                 | LR__1214
0f584                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f584     08 4E 05 F1 | 	add	fp, #8
0f588     A7 1E 02 FB | 	rdlong	local01, fp
0f58c     08 4E 85 F1 | 	sub	fp, #8
0f590     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f594     14 4E 05 A1 |  if_e	add	fp, #20
0f598     A7 24 02 AB |  if_e	rdlong	local04, fp
0f59c     14 4E 85 A1 |  if_e	sub	fp, #20
0f5a0     12 23 02 A6 |  if_e	mov	local03, local04
0f5a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f5a8     40 00 90 5D |  if_ne	jmp	#LR__1215
0f5ac     A7 12 02 FB | 	rdlong	arg01, fp
0f5b0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f5b4     1F 26 C6 C9 |  if_b	decod	local05, #31
0f5b8     00 26 06 36 |  if_ae	mov	local05, #0
0f5bc     04 F6 B0 FD | 	call	#__system___float_fromuns
0f5c0     13 FB 61 F5 | 	xor	result1, local05
0f5c4     FD 12 02 F6 | 	mov	arg01, result1
0f5c8     0C 4E 05 F1 | 	add	fp, #12
0f5cc     A7 14 02 FB | 	rdlong	arg02, fp
0f5d0     0C 4E 85 F1 | 	sub	fp, #12
0f5d4     20 F6 B0 FD | 	call	#__system___float_add
0f5d8     A7 FA 61 FC | 	wrlong	result1, fp
0f5dc     08 4E 05 F1 | 	add	fp, #8
0f5e0     A7 3C 68 FC | 	wrlong	#30, fp
0f5e4     08 4E 85 F1 | 	sub	fp, #8
0f5e8     B0 02 90 FD | 	jmp	#LR__1225
0f5ec                 | LR__1215
0f5ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0f5ec     08 4E 05 F1 | 	add	fp, #8
0f5f0     A7 1E 02 FB | 	rdlong	local01, fp
0f5f4     08 4E 85 F1 | 	sub	fp, #8
0f5f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5fc     14 4E 05 A1 |  if_e	add	fp, #20
0f600     A7 24 02 AB |  if_e	rdlong	local04, fp
0f604     14 4E 85 A1 |  if_e	sub	fp, #20
0f608     12 23 02 A6 |  if_e	mov	local03, local04
0f60c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f610     28 00 90 5D |  if_ne	jmp	#LR__1216
0f614     A7 1E 02 FB | 	rdlong	local01, fp
0f618     0C 4E 05 F1 | 	add	fp, #12
0f61c     A7 12 02 FB | 	rdlong	arg01, fp
0f620     0C 4E 85 F1 | 	sub	fp, #12
0f624     9C F5 B0 FD | 	call	#__system___float_fromuns
0f628     FD 14 02 F6 | 	mov	arg02, result1
0f62c     0F 13 02 F6 | 	mov	arg01, local01
0f630     C4 F5 B0 FD | 	call	#__system___float_add
0f634     A7 FA 61 FC | 	wrlong	result1, fp
0f638     60 02 90 FD | 	jmp	#LR__1225
0f63c                 | LR__1216
0f63c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0f63c     08 4E 05 F1 | 	add	fp, #8
0f640     A7 1E 02 FB | 	rdlong	local01, fp
0f644     08 4E 85 F1 | 	sub	fp, #8
0f648     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f64c     14 4E 05 A1 |  if_e	add	fp, #20
0f650     A7 24 02 AB |  if_e	rdlong	local04, fp
0f654     14 4E 85 A1 |  if_e	sub	fp, #20
0f658     12 23 02 A6 |  if_e	mov	local03, local04
0f65c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f660     38 00 90 5D |  if_ne	jmp	#LR__1217
0f664     A7 1E 02 FB | 	rdlong	local01, fp
0f668     0C 4E 05 F1 | 	add	fp, #12
0f66c     A7 12 02 FB | 	rdlong	arg01, fp
0f670     0C 4E 85 F1 | 	sub	fp, #12
0f674     09 13 52 F6 | 	abs	arg01, arg01 wc
0f678     1F 26 C6 C9 |  if_b	decod	local05, #31
0f67c     00 26 06 36 |  if_ae	mov	local05, #0
0f680     40 F5 B0 FD | 	call	#__system___float_fromuns
0f684     13 FB 61 F5 | 	xor	result1, local05
0f688     FD 14 02 F6 | 	mov	arg02, result1
0f68c     0F 13 02 F6 | 	mov	arg01, local01
0f690     64 F5 B0 FD | 	call	#__system___float_add
0f694     A7 FA 61 FC | 	wrlong	result1, fp
0f698     00 02 90 FD | 	jmp	#LR__1225
0f69c                 | LR__1217
0f69c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0f69c     08 4E 05 F1 | 	add	fp, #8
0f6a0     A7 1E 02 FB | 	rdlong	local01, fp
0f6a4     08 4E 85 F1 | 	sub	fp, #8
0f6a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f6ac     14 4E 05 A1 |  if_e	add	fp, #20
0f6b0     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6b4     14 4E 85 A1 |  if_e	sub	fp, #20
0f6b8     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0f6bc     1C 00 90 5D |  if_ne	jmp	#LR__1218
0f6c0     A7 12 02 FB | 	rdlong	arg01, fp
0f6c4     0C 4E 05 F1 | 	add	fp, #12
0f6c8     A7 14 02 FB | 	rdlong	arg02, fp
0f6cc     0C 4E 85 F1 | 	sub	fp, #12
0f6d0     24 F5 B0 FD | 	call	#__system___float_add
0f6d4     A7 FA 61 FC | 	wrlong	result1, fp
0f6d8     C0 01 90 FD | 	jmp	#LR__1225
0f6dc                 | LR__1218
0f6dc                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0f6dc     08 4E 05 F1 | 	add	fp, #8
0f6e0     A7 1E 02 FB | 	rdlong	local01, fp
0f6e4     08 4E 85 F1 | 	sub	fp, #8
0f6e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f6ec     24 00 90 5D |  if_ne	jmp	#LR__1219
0f6f0     14 4E 05 F1 | 	add	fp, #20
0f6f4     A7 22 02 FB | 	rdlong	local03, fp
0f6f8     14 4E 85 F1 | 	sub	fp, #20
0f6fc     1F 22 0E F2 | 	cmp	local03, #31 wz
0f700     A7 04 68 5C |  if_ne	wrlong	#2, fp
0f704     08 4E 05 51 |  if_ne	add	fp, #8
0f708     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f70c     08 4E 85 51 |  if_ne	sub	fp, #8
0f710     88 01 90 5D |  if_ne	jmp	#LR__1225
0f714                 | LR__1219
0f714                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0f714     14 4E 05 F1 | 	add	fp, #20
0f718     A7 1E 02 FB | 	rdlong	local01, fp
0f71c     14 4E 85 F1 | 	sub	fp, #20
0f720     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f724     24 00 90 5D |  if_ne	jmp	#LR__1220
0f728     08 4E 05 F1 | 	add	fp, #8
0f72c     A7 22 02 FB | 	rdlong	local03, fp
0f730     08 4E 85 F1 | 	sub	fp, #8
0f734     1F 22 0E F2 | 	cmp	local03, #31 wz
0f738     A7 04 68 5C |  if_ne	wrlong	#2, fp
0f73c     08 4E 05 51 |  if_ne	add	fp, #8
0f740     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f744     08 4E 85 51 |  if_ne	sub	fp, #8
0f748     50 01 90 5D |  if_ne	jmp	#LR__1225
0f74c                 | LR__1220
0f74c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0f74c     08 4E 05 F1 | 	add	fp, #8
0f750     A7 1E 02 FB | 	rdlong	local01, fp
0f754     08 4E 85 F1 | 	sub	fp, #8
0f758     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f75c     14 4E 05 A1 |  if_e	add	fp, #20
0f760     A7 22 02 AB |  if_e	rdlong	local03, fp
0f764     14 4E 85 A1 |  if_e	sub	fp, #20
0f768     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f76c     1C 00 90 5D |  if_ne	jmp	#LR__1221
0f770     A7 12 02 FB | 	rdlong	arg01, fp
0f774     0C 4E 05 F1 | 	add	fp, #12
0f778     A7 14 02 FB | 	rdlong	arg02, fp
0f77c     0C 4E 85 F1 | 	sub	fp, #12
0f780     24 CD B0 FD | 	call	#__system___string_concat
0f784     A7 FA 61 FC | 	wrlong	result1, fp
0f788     10 01 90 FD | 	jmp	#LR__1225
0f78c                 | LR__1221
0f78c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0f78c     08 4E 05 F1 | 	add	fp, #8
0f790     A7 1E 02 FB | 	rdlong	local01, fp
0f794     08 4E 85 F1 | 	sub	fp, #8
0f798     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f79c     14 4E 05 A1 |  if_e	add	fp, #20
0f7a0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7a4     14 4E 85 A1 |  if_e	sub	fp, #20
0f7a8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f7ac     30 00 90 5D |  if_ne	jmp	#LR__1222
0f7b0     A7 12 02 FB | 	rdlong	arg01, fp
0f7b4     20 E9 BF FD | 	call	#_convertstring
0f7b8     FD 12 02 F6 | 	mov	arg01, result1
0f7bc     0C 4E 05 F1 | 	add	fp, #12
0f7c0     A7 14 02 FB | 	rdlong	arg02, fp
0f7c4     0C 4E 85 F1 | 	sub	fp, #12
0f7c8     DC CC B0 FD | 	call	#__system___string_concat
0f7cc     A7 FA 61 FC | 	wrlong	result1, fp
0f7d0     08 4E 05 F1 | 	add	fp, #8
0f7d4     A7 3E 68 FC | 	wrlong	#31, fp
0f7d8     08 4E 85 F1 | 	sub	fp, #8
0f7dc     BC 00 90 FD | 	jmp	#LR__1225
0f7e0                 | LR__1222
0f7e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0f7e0     08 4E 05 F1 | 	add	fp, #8
0f7e4     A7 1E 02 FB | 	rdlong	local01, fp
0f7e8     08 4E 85 F1 | 	sub	fp, #8
0f7ec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f7f0     14 4E 05 A1 |  if_e	add	fp, #20
0f7f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7f8     14 4E 85 A1 |  if_e	sub	fp, #20
0f7fc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f800     28 00 90 5D |  if_ne	jmp	#LR__1223
0f804     A7 1E 02 FB | 	rdlong	local01, fp
0f808     0C 4E 05 F1 | 	add	fp, #12
0f80c     A7 12 02 FB | 	rdlong	arg01, fp
0f810     0C 4E 85 F1 | 	sub	fp, #12
0f814     C0 E8 BF FD | 	call	#_convertstring
0f818     FD 14 02 F6 | 	mov	arg02, result1
0f81c     0F 13 02 F6 | 	mov	arg01, local01
0f820     84 CC B0 FD | 	call	#__system___string_concat
0f824     A7 FA 61 FC | 	wrlong	result1, fp
0f828     70 00 90 FD | 	jmp	#LR__1225
0f82c                 | LR__1223
0f82c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0f82c     08 4E 05 F1 | 	add	fp, #8
0f830     A7 1E 02 FB | 	rdlong	local01, fp
0f834     08 4E 85 F1 | 	sub	fp, #8
0f838     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f83c     14 4E 05 A1 |  if_e	add	fp, #20
0f840     A7 22 02 AB |  if_e	rdlong	local03, fp
0f844     14 4E 85 A1 |  if_e	sub	fp, #20
0f848     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f84c     3C 00 90 5D |  if_ne	jmp	#LR__1224
0f850     A7 12 02 FB | 	rdlong	arg01, fp
0f854     80 E8 BF FD | 	call	#_convertstring
0f858     FD 1E 02 F6 | 	mov	local01, result1
0f85c     0C 4E 05 F1 | 	add	fp, #12
0f860     A7 12 02 FB | 	rdlong	arg01, fp
0f864     0C 4E 85 F1 | 	sub	fp, #12
0f868     6C E8 BF FD | 	call	#_convertstring
0f86c     FD 14 02 F6 | 	mov	arg02, result1
0f870     0F 13 02 F6 | 	mov	arg01, local01
0f874     30 CC B0 FD | 	call	#__system___string_concat
0f878     A7 FA 61 FC | 	wrlong	result1, fp
0f87c     08 4E 05 F1 | 	add	fp, #8
0f880     A7 3E 68 FC | 	wrlong	#31, fp
0f884     08 4E 85 F1 | 	sub	fp, #8
0f888     10 00 90 FD | 	jmp	#LR__1225
0f88c                 | LR__1224
0f88c     A7 08 68 FC | 	wrlong	#4, fp
0f890     08 4E 05 F1 | 	add	fp, #8
0f894     A7 FE 69 FC | 	wrlong	#255, fp
0f898     08 4E 85 F1 | 	sub	fp, #8
0f89c                 | LR__1225
0f89c     A7 12 02 F6 | 	mov	arg01, fp
0f8a0     84 A9 BF FD | 	call	#_push
0f8a4     A7 F0 03 F6 | 	mov	ptra, fp
0f8a8     B2 00 A0 FD | 	call	#popregs_
0f8ac                 | _do_plus_ret
0f8ac     2D 00 64 FD | 	ret
0f8b0                 | 
0f8b0                 | ' 
0f8b0                 | ' sub do_minus
0f8b0                 | _do_minus
0f8b0     05 4A 05 F6 | 	mov	COUNT_, #5
0f8b4     A8 00 A0 FD | 	call	#pushregs_
0f8b8     18 F0 07 F1 | 	add	ptra, #24
0f8bc     D0 A8 BF FD | 	call	#_pop
0f8c0     FD 1E 02 F6 | 	mov	local01, result1
0f8c4     FE 20 02 F6 | 	mov	local02, result2
0f8c8     FF 22 02 F6 | 	mov	local03, result3
0f8cc     0C 4E 05 F1 | 	add	fp, #12
0f8d0     A7 1E 62 FC | 	wrlong	local01, fp
0f8d4     04 4E 05 F1 | 	add	fp, #4
0f8d8     A7 20 62 FC | 	wrlong	local02, fp
0f8dc     04 4E 05 F1 | 	add	fp, #4
0f8e0     A7 22 62 FC | 	wrlong	local03, fp
0f8e4     14 4E 85 F1 | 	sub	fp, #20
0f8e8     A4 A8 BF FD | 	call	#_pop
0f8ec     FF 22 02 F6 | 	mov	local03, result3
0f8f0     A7 FA 61 FC | 	wrlong	result1, fp
0f8f4     04 4E 05 F1 | 	add	fp, #4
0f8f8     A7 FC 61 FC | 	wrlong	result2, fp
0f8fc     04 4E 05 F1 | 	add	fp, #4
0f900     A7 22 62 FC | 	wrlong	local03, fp
0f904                 | ' 
0f904                 | ' t2=pop()
0f904                 | ' t1=pop()
0f904                 | ' 
0f904                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0f904     08 4E 85 F1 | 	sub	fp, #8
0f908     1D 22 0E F2 | 	cmp	local03, #29 wz
0f90c     14 4E 05 A1 |  if_e	add	fp, #20
0f910     A7 24 02 AB |  if_e	rdlong	local04, fp
0f914     14 4E 85 A1 |  if_e	sub	fp, #20
0f918     12 23 02 A6 |  if_e	mov	local03, local04
0f91c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f920     5C 00 90 5D |  if_ne	jmp	#LR__1231
0f924                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0f924     0C 4E 05 F1 | 	add	fp, #12
0f928     A7 1E 02 FB | 	rdlong	local01, fp
0f92c     0C 4E 85 F1 | 	sub	fp, #12
0f930     A7 22 02 FB | 	rdlong	local03, fp
0f934     11 1F 12 F2 | 	cmp	local01, local03 wc
0f938     1C 00 90 3D |  if_ae	jmp	#LR__1230
0f93c     A7 1E 02 FB | 	rdlong	local01, fp
0f940     0C 4E 05 F1 | 	add	fp, #12
0f944     A7 20 02 FB | 	rdlong	local02, fp
0f948     0C 4E 85 F1 | 	sub	fp, #12
0f94c     10 1F 82 F1 | 	sub	local01, local02
0f950     A7 1E 62 FC | 	wrlong	local01, fp
0f954     F4 02 90 FD | 	jmp	#LR__1240
0f958                 | LR__1230
0f958     A7 1E 02 FB | 	rdlong	local01, fp
0f95c     0C 4E 05 F1 | 	add	fp, #12
0f960     A7 20 02 FB | 	rdlong	local02, fp
0f964     0C 4E 85 F1 | 	sub	fp, #12
0f968     10 1F 82 F1 | 	sub	local01, local02
0f96c     A7 1E 62 FC | 	wrlong	local01, fp
0f970     08 4E 05 F1 | 	add	fp, #8
0f974     A7 38 68 FC | 	wrlong	#28, fp
0f978     08 4E 85 F1 | 	sub	fp, #8
0f97c     CC 02 90 FD | 	jmp	#LR__1240
0f980                 | LR__1231
0f980                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0f980     08 4E 05 F1 | 	add	fp, #8
0f984     A7 1E 02 FB | 	rdlong	local01, fp
0f988     08 4E 85 F1 | 	sub	fp, #8
0f98c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f990     14 4E 05 A1 |  if_e	add	fp, #20
0f994     A7 24 02 AB |  if_e	rdlong	local04, fp
0f998     14 4E 85 A1 |  if_e	sub	fp, #20
0f99c     12 23 02 A6 |  if_e	mov	local03, local04
0f9a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f9a4     28 00 90 5D |  if_ne	jmp	#LR__1232
0f9a8     A7 1E 02 FB | 	rdlong	local01, fp
0f9ac     0C 4E 05 F1 | 	add	fp, #12
0f9b0     A7 20 02 FB | 	rdlong	local02, fp
0f9b4     0C 4E 85 F1 | 	sub	fp, #12
0f9b8     10 1F 82 F1 | 	sub	local01, local02
0f9bc     A7 1E 62 FC | 	wrlong	local01, fp
0f9c0     08 4E 05 F1 | 	add	fp, #8
0f9c4     A7 38 68 FC | 	wrlong	#28, fp
0f9c8     08 4E 85 F1 | 	sub	fp, #8
0f9cc     7C 02 90 FD | 	jmp	#LR__1240
0f9d0                 | LR__1232
0f9d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0f9d0     08 4E 05 F1 | 	add	fp, #8
0f9d4     A7 1E 02 FB | 	rdlong	local01, fp
0f9d8     08 4E 85 F1 | 	sub	fp, #8
0f9dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f9e0     14 4E 05 A1 |  if_e	add	fp, #20
0f9e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f9ec     12 23 02 A6 |  if_e	mov	local03, local04
0f9f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f9f4     34 00 90 5D |  if_ne	jmp	#LR__1233
0f9f8     A7 12 02 FB | 	rdlong	arg01, fp
0f9fc     C4 F1 B0 FD | 	call	#__system___float_fromuns
0fa00     FD 12 02 F6 | 	mov	arg01, result1
0fa04     0C 4E 05 F1 | 	add	fp, #12
0fa08     A7 14 02 FB | 	rdlong	arg02, fp
0fa0c     0C 4E 85 F1 | 	sub	fp, #12
0fa10     1F 14 E6 F4 | 	bitnot	arg02, #31
0fa14     E0 F1 B0 FD | 	call	#__system___float_add
0fa18     A7 FA 61 FC | 	wrlong	result1, fp
0fa1c     08 4E 05 F1 | 	add	fp, #8
0fa20     A7 3C 68 FC | 	wrlong	#30, fp
0fa24     08 4E 85 F1 | 	sub	fp, #8
0fa28     20 02 90 FD | 	jmp	#LR__1240
0fa2c                 | LR__1233
0fa2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0fa2c     08 4E 05 F1 | 	add	fp, #8
0fa30     A7 1E 02 FB | 	rdlong	local01, fp
0fa34     08 4E 85 F1 | 	sub	fp, #8
0fa38     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa3c     14 4E 05 A1 |  if_e	add	fp, #20
0fa40     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa44     14 4E 85 A1 |  if_e	sub	fp, #20
0fa48     12 23 02 A6 |  if_e	mov	local03, local04
0fa4c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fa50     1C 00 90 5D |  if_ne	jmp	#LR__1234
0fa54     A7 1E 02 FB | 	rdlong	local01, fp
0fa58     0C 4E 05 F1 | 	add	fp, #12
0fa5c     A7 20 02 FB | 	rdlong	local02, fp
0fa60     0C 4E 85 F1 | 	sub	fp, #12
0fa64     10 1F 82 F1 | 	sub	local01, local02
0fa68     A7 1E 62 FC | 	wrlong	local01, fp
0fa6c     DC 01 90 FD | 	jmp	#LR__1240
0fa70                 | LR__1234
0fa70                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0fa70     08 4E 05 F1 | 	add	fp, #8
0fa74     A7 1E 02 FB | 	rdlong	local01, fp
0fa78     08 4E 85 F1 | 	sub	fp, #8
0fa7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa80     14 4E 05 A1 |  if_e	add	fp, #20
0fa84     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa88     14 4E 85 A1 |  if_e	sub	fp, #20
0fa8c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0fa90     1C 00 90 5D |  if_ne	jmp	#LR__1235
0fa94     A7 1E 02 FB | 	rdlong	local01, fp
0fa98     0C 4E 05 F1 | 	add	fp, #12
0fa9c     A7 20 02 FB | 	rdlong	local02, fp
0faa0     0C 4E 85 F1 | 	sub	fp, #12
0faa4     10 1F 82 F1 | 	sub	local01, local02
0faa8     A7 1E 62 FC | 	wrlong	local01, fp
0faac     9C 01 90 FD | 	jmp	#LR__1240
0fab0                 | LR__1235
0fab0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0fab0     08 4E 05 F1 | 	add	fp, #8
0fab4     A7 1E 02 FB | 	rdlong	local01, fp
0fab8     08 4E 85 F1 | 	sub	fp, #8
0fabc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fac0     14 4E 05 A1 |  if_e	add	fp, #20
0fac4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fac8     14 4E 85 A1 |  if_e	sub	fp, #20
0facc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fad0     44 00 90 5D |  if_ne	jmp	#LR__1236
0fad4     A7 12 02 FB | 	rdlong	arg01, fp
0fad8     09 13 52 F6 | 	abs	arg01, arg01 wc
0fadc     1F 26 C6 C9 |  if_b	decod	local05, #31
0fae0     00 26 06 36 |  if_ae	mov	local05, #0
0fae4     DC F0 B0 FD | 	call	#__system___float_fromuns
0fae8     13 FB 61 F5 | 	xor	result1, local05
0faec     FD 12 02 F6 | 	mov	arg01, result1
0faf0     0C 4E 05 F1 | 	add	fp, #12
0faf4     A7 14 02 FB | 	rdlong	arg02, fp
0faf8     0C 4E 85 F1 | 	sub	fp, #12
0fafc     1F 14 E6 F4 | 	bitnot	arg02, #31
0fb00     F4 F0 B0 FD | 	call	#__system___float_add
0fb04     A7 FA 61 FC | 	wrlong	result1, fp
0fb08     08 4E 05 F1 | 	add	fp, #8
0fb0c     A7 3C 68 FC | 	wrlong	#30, fp
0fb10     08 4E 85 F1 | 	sub	fp, #8
0fb14     34 01 90 FD | 	jmp	#LR__1240
0fb18                 | LR__1236
0fb18                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0fb18     08 4E 05 F1 | 	add	fp, #8
0fb1c     A7 1E 02 FB | 	rdlong	local01, fp
0fb20     08 4E 85 F1 | 	sub	fp, #8
0fb24     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fb28     14 4E 05 A1 |  if_e	add	fp, #20
0fb2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb30     14 4E 85 A1 |  if_e	sub	fp, #20
0fb34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fb38     2C 00 90 5D |  if_ne	jmp	#LR__1237
0fb3c     A7 1E 02 FB | 	rdlong	local01, fp
0fb40     0C 4E 05 F1 | 	add	fp, #12
0fb44     A7 12 02 FB | 	rdlong	arg01, fp
0fb48     0C 4E 85 F1 | 	sub	fp, #12
0fb4c     74 F0 B0 FD | 	call	#__system___float_fromuns
0fb50     FD 14 02 F6 | 	mov	arg02, result1
0fb54     0F 13 02 F6 | 	mov	arg01, local01
0fb58     1F 14 E6 F4 | 	bitnot	arg02, #31
0fb5c     98 F0 B0 FD | 	call	#__system___float_add
0fb60     A7 FA 61 FC | 	wrlong	result1, fp
0fb64     E4 00 90 FD | 	jmp	#LR__1240
0fb68                 | LR__1237
0fb68                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0fb68     08 4E 05 F1 | 	add	fp, #8
0fb6c     A7 1E 02 FB | 	rdlong	local01, fp
0fb70     08 4E 85 F1 | 	sub	fp, #8
0fb74     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fb78     14 4E 05 A1 |  if_e	add	fp, #20
0fb7c     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb80     14 4E 85 A1 |  if_e	sub	fp, #20
0fb84     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fb88     3C 00 90 5D |  if_ne	jmp	#LR__1238
0fb8c     A7 1E 02 FB | 	rdlong	local01, fp
0fb90     0C 4E 05 F1 | 	add	fp, #12
0fb94     A7 12 02 FB | 	rdlong	arg01, fp
0fb98     0C 4E 85 F1 | 	sub	fp, #12
0fb9c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fba0     1F 26 C6 C9 |  if_b	decod	local05, #31
0fba4     00 26 06 36 |  if_ae	mov	local05, #0
0fba8     18 F0 B0 FD | 	call	#__system___float_fromuns
0fbac     13 FB 61 F5 | 	xor	result1, local05
0fbb0     FD 14 02 F6 | 	mov	arg02, result1
0fbb4     0F 13 02 F6 | 	mov	arg01, local01
0fbb8     1F 14 E6 F4 | 	bitnot	arg02, #31
0fbbc     38 F0 B0 FD | 	call	#__system___float_add
0fbc0     A7 FA 61 FC | 	wrlong	result1, fp
0fbc4     84 00 90 FD | 	jmp	#LR__1240
0fbc8                 | LR__1238
0fbc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0fbc8     08 4E 05 F1 | 	add	fp, #8
0fbcc     A7 1E 02 FB | 	rdlong	local01, fp
0fbd0     08 4E 85 F1 | 	sub	fp, #8
0fbd4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fbd8     14 4E 05 A1 |  if_e	add	fp, #20
0fbdc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fbe0     14 4E 85 A1 |  if_e	sub	fp, #20
0fbe4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fbe8     20 00 90 5D |  if_ne	jmp	#LR__1239
0fbec     A7 12 02 FB | 	rdlong	arg01, fp
0fbf0     0C 4E 05 F1 | 	add	fp, #12
0fbf4     A7 14 02 FB | 	rdlong	arg02, fp
0fbf8     0C 4E 85 F1 | 	sub	fp, #12
0fbfc     1F 14 E6 F4 | 	bitnot	arg02, #31
0fc00     F4 EF B0 FD | 	call	#__system___float_add
0fc04     A7 FA 61 FC | 	wrlong	result1, fp
0fc08     40 00 90 FD | 	jmp	#LR__1240
0fc0c                 | LR__1239
0fc0c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0fc0c     08 4E 05 F1 | 	add	fp, #8
0fc10     A7 1E 02 FB | 	rdlong	local01, fp
0fc14     08 4E 85 F1 | 	sub	fp, #8
0fc18     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fc1c     14 4E 05 51 |  if_ne	add	fp, #20
0fc20     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fc24     14 4E 85 51 |  if_ne	sub	fp, #20
0fc28     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0fc2c     A7 06 68 AC |  if_e	wrlong	#3, fp
0fc30     08 4E 05 A1 |  if_e	add	fp, #8
0fc34     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fc38     08 4E 85 A1 |  if_e	sub	fp, #8
0fc3c     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0fc40     08 4E 05 51 |  if_ne	add	fp, #8
0fc44     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fc48     08 4E 85 51 |  if_ne	sub	fp, #8
0fc4c                 | LR__1240
0fc4c     A7 12 02 F6 | 	mov	arg01, fp
0fc50     D4 A5 BF FD | 	call	#_push
0fc54     A7 F0 03 F6 | 	mov	ptra, fp
0fc58     B2 00 A0 FD | 	call	#popregs_
0fc5c                 | _do_minus_ret
0fc5c     2D 00 64 FD | 	ret
0fc60                 | 
0fc60                 | ' 
0fc60                 | ' sub do_and 
0fc60                 | _do_and
0fc60     03 4A 05 F6 | 	mov	COUNT_, #3
0fc64     A8 00 A0 FD | 	call	#pushregs_
0fc68     18 F0 07 F1 | 	add	ptra, #24
0fc6c     20 A5 BF FD | 	call	#_pop
0fc70     FD 12 02 F6 | 	mov	arg01, result1
0fc74     FE 1E 02 F6 | 	mov	local01, result2
0fc78     FF 20 02 F6 | 	mov	local02, result3
0fc7c     0C 4E 05 F1 | 	add	fp, #12
0fc80     A7 12 62 FC | 	wrlong	arg01, fp
0fc84     04 4E 05 F1 | 	add	fp, #4
0fc88     A7 1E 62 FC | 	wrlong	local01, fp
0fc8c     04 4E 05 F1 | 	add	fp, #4
0fc90     A7 20 62 FC | 	wrlong	local02, fp
0fc94     14 4E 85 F1 | 	sub	fp, #20
0fc98     F4 A4 BF FD | 	call	#_pop
0fc9c     FF 22 02 F6 | 	mov	local03, result3
0fca0     A7 FA 61 FC | 	wrlong	result1, fp
0fca4     04 4E 05 F1 | 	add	fp, #4
0fca8     A7 FC 61 FC | 	wrlong	result2, fp
0fcac     04 4E 05 F1 | 	add	fp, #4
0fcb0     A7 22 62 FC | 	wrlong	local03, fp
0fcb4                 | ' 
0fcb4                 | ' t2=pop()
0fcb4                 | ' t1=pop()
0fcb4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fcb4     08 4E 85 F1 | 	sub	fp, #8
0fcb8     1C 22 0E F2 | 	cmp	local03, #28 wz
0fcbc     A7 22 02 AB |  if_e	rdlong	local03, fp
0fcc0     A7 22 62 AC |  if_e	wrlong	local03, fp
0fcc4     08 4E 05 A1 |  if_e	add	fp, #8
0fcc8     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fccc     08 4E 85 A1 |  if_e	sub	fp, #8
0fcd0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fcd0     14 4E 05 F1 | 	add	fp, #20
0fcd4     A7 22 02 FB | 	rdlong	local03, fp
0fcd8     14 4E 85 F1 | 	sub	fp, #20
0fcdc     1C 22 0E F2 | 	cmp	local03, #28 wz
0fce0     18 00 90 5D |  if_ne	jmp	#LR__1250
0fce4     0C 4E 05 F1 | 	add	fp, #12
0fce8     A7 22 02 FB | 	rdlong	local03, fp
0fcec     A7 22 62 FC | 	wrlong	local03, fp
0fcf0     08 4E 05 F1 | 	add	fp, #8
0fcf4     A7 3A 68 FC | 	wrlong	#29, fp
0fcf8     14 4E 85 F1 | 	sub	fp, #20
0fcfc                 | LR__1250
0fcfc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0fcfc     08 4E 05 F1 | 	add	fp, #8
0fd00     A7 22 02 FB | 	rdlong	local03, fp
0fd04     08 4E 85 F1 | 	sub	fp, #8
0fd08     1F 22 0E F2 | 	cmp	local03, #31 wz
0fd0c     14 4E 05 51 |  if_ne	add	fp, #20
0fd10     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fd14     14 4E 85 51 |  if_ne	sub	fp, #20
0fd18     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fd1c     08 4E 05 51 |  if_ne	add	fp, #8
0fd20     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fd24     08 4E 85 51 |  if_ne	sub	fp, #8
0fd28     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fd2c     14 4E 05 51 |  if_ne	add	fp, #20
0fd30     14 4E 85 51 |  if_ne	sub	fp, #20
0fd34     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fd38     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fd3c     08 4E 05 A1 |  if_e	add	fp, #8
0fd40     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fd44     08 4E 85 A1 |  if_e	sub	fp, #8
0fd48     18 00 90 AD |  if_e	jmp	#LR__1251
0fd4c     A7 22 02 FB | 	rdlong	local03, fp
0fd50     0C 4E 05 F1 | 	add	fp, #12
0fd54     A7 1E 02 FB | 	rdlong	local01, fp
0fd58     0C 4E 85 F1 | 	sub	fp, #12
0fd5c     0F 23 02 F5 | 	and	local03, local01
0fd60     A7 22 62 FC | 	wrlong	local03, fp
0fd64                 | LR__1251
0fd64     A7 12 02 F6 | 	mov	arg01, fp
0fd68     BC A4 BF FD | 	call	#_push
0fd6c     A7 F0 03 F6 | 	mov	ptra, fp
0fd70     B2 00 A0 FD | 	call	#popregs_
0fd74                 | _do_and_ret
0fd74     2D 00 64 FD | 	ret
0fd78                 | 
0fd78                 | ' 
0fd78                 | ' sub do_or 
0fd78                 | _do_or
0fd78     03 4A 05 F6 | 	mov	COUNT_, #3
0fd7c     A8 00 A0 FD | 	call	#pushregs_
0fd80     18 F0 07 F1 | 	add	ptra, #24
0fd84     08 A4 BF FD | 	call	#_pop
0fd88     FD 12 02 F6 | 	mov	arg01, result1
0fd8c     FE 1E 02 F6 | 	mov	local01, result2
0fd90     FF 20 02 F6 | 	mov	local02, result3
0fd94     0C 4E 05 F1 | 	add	fp, #12
0fd98     A7 12 62 FC | 	wrlong	arg01, fp
0fd9c     04 4E 05 F1 | 	add	fp, #4
0fda0     A7 1E 62 FC | 	wrlong	local01, fp
0fda4     04 4E 05 F1 | 	add	fp, #4
0fda8     A7 20 62 FC | 	wrlong	local02, fp
0fdac     14 4E 85 F1 | 	sub	fp, #20
0fdb0     DC A3 BF FD | 	call	#_pop
0fdb4     FF 22 02 F6 | 	mov	local03, result3
0fdb8     A7 FA 61 FC | 	wrlong	result1, fp
0fdbc     04 4E 05 F1 | 	add	fp, #4
0fdc0     A7 FC 61 FC | 	wrlong	result2, fp
0fdc4     04 4E 05 F1 | 	add	fp, #4
0fdc8     A7 22 62 FC | 	wrlong	local03, fp
0fdcc                 | ' 
0fdcc                 | ' t2=pop()
0fdcc                 | ' t1=pop()
0fdcc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fdcc     08 4E 85 F1 | 	sub	fp, #8
0fdd0     1C 22 0E F2 | 	cmp	local03, #28 wz
0fdd4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fdd8     A7 22 62 AC |  if_e	wrlong	local03, fp
0fddc     08 4E 05 A1 |  if_e	add	fp, #8
0fde0     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fde4     08 4E 85 A1 |  if_e	sub	fp, #8
0fde8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fde8     14 4E 05 F1 | 	add	fp, #20
0fdec     A7 22 02 FB | 	rdlong	local03, fp
0fdf0     14 4E 85 F1 | 	sub	fp, #20
0fdf4     1C 22 0E F2 | 	cmp	local03, #28 wz
0fdf8     18 00 90 5D |  if_ne	jmp	#LR__1260
0fdfc     0C 4E 05 F1 | 	add	fp, #12
0fe00     A7 22 02 FB | 	rdlong	local03, fp
0fe04     A7 22 62 FC | 	wrlong	local03, fp
0fe08     08 4E 05 F1 | 	add	fp, #8
0fe0c     A7 3A 68 FC | 	wrlong	#29, fp
0fe10     14 4E 85 F1 | 	sub	fp, #20
0fe14                 | LR__1260
0fe14                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0fe14     08 4E 05 F1 | 	add	fp, #8
0fe18     A7 22 02 FB | 	rdlong	local03, fp
0fe1c     08 4E 85 F1 | 	sub	fp, #8
0fe20     1F 22 0E F2 | 	cmp	local03, #31 wz
0fe24     14 4E 05 51 |  if_ne	add	fp, #20
0fe28     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fe2c     14 4E 85 51 |  if_ne	sub	fp, #20
0fe30     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fe34     08 4E 05 51 |  if_ne	add	fp, #8
0fe38     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fe3c     08 4E 85 51 |  if_ne	sub	fp, #8
0fe40     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fe44     14 4E 05 51 |  if_ne	add	fp, #20
0fe48     14 4E 85 51 |  if_ne	sub	fp, #20
0fe4c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fe50     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fe54     08 4E 05 A1 |  if_e	add	fp, #8
0fe58     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fe5c     08 4E 85 A1 |  if_e	sub	fp, #8
0fe60     18 00 90 AD |  if_e	jmp	#LR__1261
0fe64     A7 22 02 FB | 	rdlong	local03, fp
0fe68     0C 4E 05 F1 | 	add	fp, #12
0fe6c     A7 1E 02 FB | 	rdlong	local01, fp
0fe70     0C 4E 85 F1 | 	sub	fp, #12
0fe74     0F 23 42 F5 | 	or	local03, local01
0fe78     A7 22 62 FC | 	wrlong	local03, fp
0fe7c                 | LR__1261
0fe7c     A7 12 02 F6 | 	mov	arg01, fp
0fe80     A4 A3 BF FD | 	call	#_push
0fe84     A7 F0 03 F6 | 	mov	ptra, fp
0fe88     B2 00 A0 FD | 	call	#popregs_
0fe8c                 | _do_or_ret
0fe8c     2D 00 64 FD | 	ret
0fe90                 | 
0fe90                 | ' 
0fe90                 | ' sub do_mul
0fe90                 | _do_mul
0fe90     05 4A 05 F6 | 	mov	COUNT_, #5
0fe94     A8 00 A0 FD | 	call	#pushregs_
0fe98     18 F0 07 F1 | 	add	ptra, #24
0fe9c     F0 A2 BF FD | 	call	#_pop
0fea0     FD 1E 02 F6 | 	mov	local01, result1
0fea4     FE 20 02 F6 | 	mov	local02, result2
0fea8     FF 22 02 F6 | 	mov	local03, result3
0feac     0C 4E 05 F1 | 	add	fp, #12
0feb0     A7 1E 62 FC | 	wrlong	local01, fp
0feb4     04 4E 05 F1 | 	add	fp, #4
0feb8     A7 20 62 FC | 	wrlong	local02, fp
0febc     04 4E 05 F1 | 	add	fp, #4
0fec0     A7 22 62 FC | 	wrlong	local03, fp
0fec4     14 4E 85 F1 | 	sub	fp, #20
0fec8     C4 A2 BF FD | 	call	#_pop
0fecc     FF 22 02 F6 | 	mov	local03, result3
0fed0     A7 FA 61 FC | 	wrlong	result1, fp
0fed4     04 4E 05 F1 | 	add	fp, #4
0fed8     A7 FC 61 FC | 	wrlong	result2, fp
0fedc     04 4E 05 F1 | 	add	fp, #4
0fee0     A7 22 62 FC | 	wrlong	local03, fp
0fee4                 | ' 
0fee4                 | ' t2=pop()
0fee4                 | ' t1=pop()
0fee4                 | ' 
0fee4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0fee4     08 4E 85 F1 | 	sub	fp, #8
0fee8     1D 22 0E F2 | 	cmp	local03, #29 wz
0feec     14 4E 05 A1 |  if_e	add	fp, #20
0fef0     A7 24 02 AB |  if_e	rdlong	local04, fp
0fef4     14 4E 85 A1 |  if_e	sub	fp, #20
0fef8     12 23 02 A6 |  if_e	mov	local03, local04
0fefc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ff00     20 00 90 5D |  if_ne	jmp	#LR__1270
0ff04     A7 20 02 FB | 	rdlong	local02, fp
0ff08     0C 4E 05 F1 | 	add	fp, #12
0ff0c     A7 22 02 FB | 	rdlong	local03, fp
0ff10     11 21 02 FD | 	qmul	local02, local03
0ff14     0C 4E 85 F1 | 	sub	fp, #12
0ff18     18 1E 62 FD | 	getqx	local01
0ff1c     A7 1E 62 FC | 	wrlong	local01, fp
0ff20     C4 02 90 FD | 	jmp	#LR__1279
0ff24                 | LR__1270
0ff24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0ff24     08 4E 05 F1 | 	add	fp, #8
0ff28     A7 1E 02 FB | 	rdlong	local01, fp
0ff2c     08 4E 85 F1 | 	sub	fp, #8
0ff30     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff34     14 4E 05 A1 |  if_e	add	fp, #20
0ff38     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff3c     14 4E 85 A1 |  if_e	sub	fp, #20
0ff40     12 23 02 A6 |  if_e	mov	local03, local04
0ff44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff48     2C 00 90 5D |  if_ne	jmp	#LR__1271
0ff4c     A7 20 02 FB | 	rdlong	local02, fp
0ff50     0C 4E 05 F1 | 	add	fp, #12
0ff54     A7 22 02 FB | 	rdlong	local03, fp
0ff58     11 21 02 FD | 	qmul	local02, local03
0ff5c     0C 4E 85 F1 | 	sub	fp, #12
0ff60     18 1E 62 FD | 	getqx	local01
0ff64     A7 1E 62 FC | 	wrlong	local01, fp
0ff68     08 4E 05 F1 | 	add	fp, #8
0ff6c     A7 38 68 FC | 	wrlong	#28, fp
0ff70     08 4E 85 F1 | 	sub	fp, #8
0ff74     70 02 90 FD | 	jmp	#LR__1279
0ff78                 | LR__1271
0ff78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0ff78     08 4E 05 F1 | 	add	fp, #8
0ff7c     A7 1E 02 FB | 	rdlong	local01, fp
0ff80     08 4E 85 F1 | 	sub	fp, #8
0ff84     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff88     14 4E 05 A1 |  if_e	add	fp, #20
0ff8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff90     14 4E 85 A1 |  if_e	sub	fp, #20
0ff94     12 23 02 A6 |  if_e	mov	local03, local04
0ff98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff9c     30 00 90 5D |  if_ne	jmp	#LR__1272
0ffa0     A7 12 02 FB | 	rdlong	arg01, fp
0ffa4     1C EC B0 FD | 	call	#__system___float_fromuns
0ffa8     FD 12 02 F6 | 	mov	arg01, result1
0ffac     0C 4E 05 F1 | 	add	fp, #12
0ffb0     A7 14 02 FB | 	rdlong	arg02, fp
0ffb4     0C 4E 85 F1 | 	sub	fp, #12
0ffb8     0C F0 B0 FD | 	call	#__system___float_mul
0ffbc     A7 FA 61 FC | 	wrlong	result1, fp
0ffc0     08 4E 05 F1 | 	add	fp, #8
0ffc4     A7 3C 68 FC | 	wrlong	#30, fp
0ffc8     08 4E 85 F1 | 	sub	fp, #8
0ffcc     18 02 90 FD | 	jmp	#LR__1279
0ffd0                 | LR__1272
0ffd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0ffd0     08 4E 05 F1 | 	add	fp, #8
0ffd4     A7 1E 02 FB | 	rdlong	local01, fp
0ffd8     08 4E 85 F1 | 	sub	fp, #8
0ffdc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ffe0     14 4E 05 A1 |  if_e	add	fp, #20
0ffe4     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffe8     14 4E 85 A1 |  if_e	sub	fp, #20
0ffec     12 23 02 A6 |  if_e	mov	local03, local04
0fff0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fff4     20 00 90 5D |  if_ne	jmp	#LR__1273
0fff8     A7 20 02 FB | 	rdlong	local02, fp
0fffc     0C 4E 05 F1 | 	add	fp, #12
10000     A7 22 02 FB | 	rdlong	local03, fp
10004     11 21 02 FD | 	qmul	local02, local03
10008     0C 4E 85 F1 | 	sub	fp, #12
1000c     18 1E 62 FD | 	getqx	local01
10010     A7 1E 62 FC | 	wrlong	local01, fp
10014     D0 01 90 FD | 	jmp	#LR__1279
10018                 | LR__1273
10018                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
10018     08 4E 05 F1 | 	add	fp, #8
1001c     A7 1E 02 FB | 	rdlong	local01, fp
10020     08 4E 85 F1 | 	sub	fp, #8
10024     1C 1E 0E F2 | 	cmp	local01, #28 wz
10028     14 4E 05 A1 |  if_e	add	fp, #20
1002c     A7 24 02 AB |  if_e	rdlong	local04, fp
10030     14 4E 85 A1 |  if_e	sub	fp, #20
10034     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
10038     20 00 90 5D |  if_ne	jmp	#LR__1274
1003c     A7 20 02 FB | 	rdlong	local02, fp
10040     0C 4E 05 F1 | 	add	fp, #12
10044     A7 22 02 FB | 	rdlong	local03, fp
10048     11 21 02 FD | 	qmul	local02, local03
1004c     0C 4E 85 F1 | 	sub	fp, #12
10050     18 1E 62 FD | 	getqx	local01
10054     A7 1E 62 FC | 	wrlong	local01, fp
10058     8C 01 90 FD | 	jmp	#LR__1279
1005c                 | LR__1274
1005c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1005c     08 4E 05 F1 | 	add	fp, #8
10060     A7 1E 02 FB | 	rdlong	local01, fp
10064     08 4E 85 F1 | 	sub	fp, #8
10068     1C 1E 0E F2 | 	cmp	local01, #28 wz
1006c     14 4E 05 A1 |  if_e	add	fp, #20
10070     A7 22 02 AB |  if_e	rdlong	local03, fp
10074     14 4E 85 A1 |  if_e	sub	fp, #20
10078     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1007c     40 00 90 5D |  if_ne	jmp	#LR__1275
10080     A7 12 02 FB | 	rdlong	arg01, fp
10084     09 13 52 F6 | 	abs	arg01, arg01 wc
10088     1F 26 C6 C9 |  if_b	decod	local05, #31
1008c     00 26 06 36 |  if_ae	mov	local05, #0
10090     30 EB B0 FD | 	call	#__system___float_fromuns
10094     13 FB 61 F5 | 	xor	result1, local05
10098     FD 12 02 F6 | 	mov	arg01, result1
1009c     0C 4E 05 F1 | 	add	fp, #12
100a0     A7 14 02 FB | 	rdlong	arg02, fp
100a4     0C 4E 85 F1 | 	sub	fp, #12
100a8     1C EF B0 FD | 	call	#__system___float_mul
100ac     A7 FA 61 FC | 	wrlong	result1, fp
100b0     08 4E 05 F1 | 	add	fp, #8
100b4     A7 3C 68 FC | 	wrlong	#30, fp
100b8     08 4E 85 F1 | 	sub	fp, #8
100bc     28 01 90 FD | 	jmp	#LR__1279
100c0                 | LR__1275
100c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
100c0     08 4E 05 F1 | 	add	fp, #8
100c4     A7 1E 02 FB | 	rdlong	local01, fp
100c8     08 4E 85 F1 | 	sub	fp, #8
100cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
100d0     14 4E 05 A1 |  if_e	add	fp, #20
100d4     A7 22 02 AB |  if_e	rdlong	local03, fp
100d8     14 4E 85 A1 |  if_e	sub	fp, #20
100dc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
100e0     28 00 90 5D |  if_ne	jmp	#LR__1276
100e4     A7 1E 02 FB | 	rdlong	local01, fp
100e8     0C 4E 05 F1 | 	add	fp, #12
100ec     A7 12 02 FB | 	rdlong	arg01, fp
100f0     0C 4E 85 F1 | 	sub	fp, #12
100f4     CC EA B0 FD | 	call	#__system___float_fromuns
100f8     FD 14 02 F6 | 	mov	arg02, result1
100fc     0F 13 02 F6 | 	mov	arg01, local01
10100     C4 EE B0 FD | 	call	#__system___float_mul
10104     A7 FA 61 FC | 	wrlong	result1, fp
10108     DC 00 90 FD | 	jmp	#LR__1279
1010c                 | LR__1276
1010c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1010c     08 4E 05 F1 | 	add	fp, #8
10110     A7 1E 02 FB | 	rdlong	local01, fp
10114     08 4E 85 F1 | 	sub	fp, #8
10118     1E 1E 0E F2 | 	cmp	local01, #30 wz
1011c     14 4E 05 A1 |  if_e	add	fp, #20
10120     A7 22 02 AB |  if_e	rdlong	local03, fp
10124     14 4E 85 A1 |  if_e	sub	fp, #20
10128     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1012c     38 00 90 5D |  if_ne	jmp	#LR__1277
10130     A7 1E 02 FB | 	rdlong	local01, fp
10134     0C 4E 05 F1 | 	add	fp, #12
10138     A7 12 02 FB | 	rdlong	arg01, fp
1013c     0C 4E 85 F1 | 	sub	fp, #12
10140     09 13 52 F6 | 	abs	arg01, arg01 wc
10144     1F 26 C6 C9 |  if_b	decod	local05, #31
10148     00 26 06 36 |  if_ae	mov	local05, #0
1014c     74 EA B0 FD | 	call	#__system___float_fromuns
10150     13 FB 61 F5 | 	xor	result1, local05
10154     FD 14 02 F6 | 	mov	arg02, result1
10158     0F 13 02 F6 | 	mov	arg01, local01
1015c     68 EE B0 FD | 	call	#__system___float_mul
10160     A7 FA 61 FC | 	wrlong	result1, fp
10164     80 00 90 FD | 	jmp	#LR__1279
10168                 | LR__1277
10168                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
10168     08 4E 05 F1 | 	add	fp, #8
1016c     A7 1E 02 FB | 	rdlong	local01, fp
10170     08 4E 85 F1 | 	sub	fp, #8
10174     1E 1E 0E F2 | 	cmp	local01, #30 wz
10178     14 4E 05 A1 |  if_e	add	fp, #20
1017c     A7 22 02 AB |  if_e	rdlong	local03, fp
10180     14 4E 85 A1 |  if_e	sub	fp, #20
10184     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10188     1C 00 90 5D |  if_ne	jmp	#LR__1278
1018c     A7 12 02 FB | 	rdlong	arg01, fp
10190     0C 4E 05 F1 | 	add	fp, #12
10194     A7 14 02 FB | 	rdlong	arg02, fp
10198     0C 4E 85 F1 | 	sub	fp, #12
1019c     28 EE B0 FD | 	call	#__system___float_mul
101a0     A7 FA 61 FC | 	wrlong	result1, fp
101a4     40 00 90 FD | 	jmp	#LR__1279
101a8                 | LR__1278
101a8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
101a8     08 4E 05 F1 | 	add	fp, #8
101ac     A7 1E 02 FB | 	rdlong	local01, fp
101b0     08 4E 85 F1 | 	sub	fp, #8
101b4     1F 1E 0E F2 | 	cmp	local01, #31 wz
101b8     14 4E 05 51 |  if_ne	add	fp, #20
101bc     A7 22 02 5B |  if_ne	rdlong	local03, fp
101c0     14 4E 85 51 |  if_ne	sub	fp, #20
101c4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
101c8     A7 10 68 AC |  if_e	wrlong	#8, fp
101cc     08 4E 05 A1 |  if_e	add	fp, #8
101d0     A7 FE 69 AC |  if_e	wrlong	#255, fp
101d4     08 4E 85 A1 |  if_e	sub	fp, #8
101d8     A7 12 68 5C |  if_ne	wrlong	#9, fp
101dc     08 4E 05 51 |  if_ne	add	fp, #8
101e0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
101e4     08 4E 85 51 |  if_ne	sub	fp, #8
101e8                 | LR__1279
101e8     A7 12 02 F6 | 	mov	arg01, fp
101ec     38 A0 BF FD | 	call	#_push
101f0     A7 F0 03 F6 | 	mov	ptra, fp
101f4     B2 00 A0 FD | 	call	#popregs_
101f8                 | _do_mul_ret
101f8     2D 00 64 FD | 	ret
101fc                 | 
101fc                 | ' 
101fc                 | ' sub do_div 
101fc                 | _do_div
101fc     01 4A 05 F6 | 	mov	COUNT_, #1
10200     A8 00 A0 FD | 	call	#pushregs_
10204     18 F0 07 F1 | 	add	ptra, #24
10208     84 9F BF FD | 	call	#_pop
1020c     FD 66 02 F6 | 	mov	muldivb_, result1
10210     FE 64 02 F6 | 	mov	muldiva_, result2
10214     FF 1E 02 F6 | 	mov	local01, result3
10218     0C 4E 05 F1 | 	add	fp, #12
1021c     A7 66 62 FC | 	wrlong	muldivb_, fp
10220     04 4E 05 F1 | 	add	fp, #4
10224     A7 64 62 FC | 	wrlong	muldiva_, fp
10228     04 4E 05 F1 | 	add	fp, #4
1022c     A7 1E 62 FC | 	wrlong	local01, fp
10230     14 4E 85 F1 | 	sub	fp, #20
10234     58 9F BF FD | 	call	#_pop
10238     A7 FA 61 FC | 	wrlong	result1, fp
1023c     04 4E 05 F1 | 	add	fp, #4
10240     A7 FC 61 FC | 	wrlong	result2, fp
10244     04 4E 05 F1 | 	add	fp, #4
10248     A7 FE 61 FC | 	wrlong	result3, fp
1024c                 | ' 
1024c                 | ' t2=pop()
1024c                 | ' t1=pop()
1024c                 | ' 
1024c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1024c     08 4E 85 F1 | 	sub	fp, #8
10250     1F FE 0D F2 | 	cmp	result3, #31 wz
10254     14 4E 05 51 |  if_ne	add	fp, #20
10258     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1025c     14 4E 85 51 |  if_ne	sub	fp, #20
10260     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
10264     A7 14 68 AC |  if_e	wrlong	#10, fp
10268     08 4E 05 A1 |  if_e	add	fp, #8
1026c     A7 FE 69 AC |  if_e	wrlong	#255, fp
10270     08 4E 85 A1 |  if_e	sub	fp, #8
10274     90 01 90 AD |  if_e	jmp	#LR__1286
10278                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
10278     08 4E 05 F1 | 	add	fp, #8
1027c     A7 66 02 FB | 	rdlong	muldivb_, fp
10280     08 4E 85 F1 | 	sub	fp, #8
10284     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10288     1C 00 90 5D |  if_ne	jmp	#LR__1280
1028c     08 4E 05 F1 | 	add	fp, #8
10290     A7 38 68 FC | 	wrlong	#28, fp
10294     08 4E 85 F1 | 	sub	fp, #8
10298     A7 12 02 FB | 	rdlong	arg01, fp
1029c     00 14 06 F6 | 	mov	arg02, #0
102a0     EC F1 B0 FD | 	call	#__system___float_tointeger
102a4     A7 FA 61 FC | 	wrlong	result1, fp
102a8                 | LR__1280
102a8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
102a8     14 4E 05 F1 | 	add	fp, #20
102ac     A7 66 02 FB | 	rdlong	muldivb_, fp
102b0     14 4E 85 F1 | 	sub	fp, #20
102b4     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
102b8     28 00 90 5D |  if_ne	jmp	#LR__1281
102bc     14 4E 05 F1 | 	add	fp, #20
102c0     A7 38 68 FC | 	wrlong	#28, fp
102c4     08 4E 85 F1 | 	sub	fp, #8
102c8     A7 12 02 FB | 	rdlong	arg01, fp
102cc     0C 4E 85 F1 | 	sub	fp, #12
102d0     00 14 06 F6 | 	mov	arg02, #0
102d4     B8 F1 B0 FD | 	call	#__system___float_tointeger
102d8     0C 4E 05 F1 | 	add	fp, #12
102dc     A7 FA 61 FC | 	wrlong	result1, fp
102e0     0C 4E 85 F1 | 	sub	fp, #12
102e4                 | LR__1281
102e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
102e4     08 4E 05 F1 | 	add	fp, #8
102e8     A7 66 02 FB | 	rdlong	muldivb_, fp
102ec     08 4E 85 F1 | 	sub	fp, #8
102f0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
102f4     14 4E 05 A1 |  if_e	add	fp, #20
102f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
102fc     14 4E 85 A1 |  if_e	sub	fp, #20
10300     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10304     20 00 90 5D |  if_ne	jmp	#LR__1282
10308     0C 4E 05 F1 | 	add	fp, #12
1030c     A7 1E 02 FB | 	rdlong	local01, fp
10310     0C 4E 85 F1 | 	sub	fp, #12
10314     A7 66 02 FB | 	rdlong	muldivb_, fp
10318     0F 67 12 FD | 	qdiv	muldivb_, local01
1031c     18 1E 62 FD | 	getqx	local01
10320     A7 1E 62 FC | 	wrlong	local01, fp
10324     E0 00 90 FD | 	jmp	#LR__1286
10328                 | LR__1282
10328                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
10328     08 4E 05 F1 | 	add	fp, #8
1032c     A7 66 02 FB | 	rdlong	muldivb_, fp
10330     08 4E 85 F1 | 	sub	fp, #8
10334     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10338     14 4E 05 A1 |  if_e	add	fp, #20
1033c     A7 1E 02 AB |  if_e	rdlong	local01, fp
10340     14 4E 85 A1 |  if_e	sub	fp, #20
10344     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10348     2C 00 90 5D |  if_ne	jmp	#LR__1283
1034c     0C 4E 05 F1 | 	add	fp, #12
10350     A7 1E 02 FB | 	rdlong	local01, fp
10354     0C 4E 85 F1 | 	sub	fp, #12
10358     A7 66 02 FB | 	rdlong	muldivb_, fp
1035c     0F 67 12 FD | 	qdiv	muldivb_, local01
10360     18 1E 62 FD | 	getqx	local01
10364     A7 1E 62 FC | 	wrlong	local01, fp
10368     08 4E 05 F1 | 	add	fp, #8
1036c     A7 38 68 FC | 	wrlong	#28, fp
10370     08 4E 85 F1 | 	sub	fp, #8
10374     90 00 90 FD | 	jmp	#LR__1286
10378                 | LR__1283
10378                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
10378     08 4E 05 F1 | 	add	fp, #8
1037c     A7 66 02 FB | 	rdlong	muldivb_, fp
10380     08 4E 85 F1 | 	sub	fp, #8
10384     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10388     14 4E 05 A1 |  if_e	add	fp, #20
1038c     A7 1E 02 AB |  if_e	rdlong	local01, fp
10390     14 4E 85 A1 |  if_e	sub	fp, #20
10394     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10398     1C 00 90 5D |  if_ne	jmp	#LR__1284
1039c     A7 64 02 FB | 	rdlong	muldiva_, fp
103a0     0C 4E 05 F1 | 	add	fp, #12
103a4     A7 66 02 FB | 	rdlong	muldivb_, fp
103a8     0C 4E 85 F1 | 	sub	fp, #12
103ac     BA 00 A0 FD | 	call	#divide_
103b0     A7 66 62 FC | 	wrlong	muldivb_, fp
103b4     50 00 90 FD | 	jmp	#LR__1286
103b8                 | LR__1284
103b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
103b8     08 4E 05 F1 | 	add	fp, #8
103bc     A7 66 02 FB | 	rdlong	muldivb_, fp
103c0     08 4E 85 F1 | 	sub	fp, #8
103c4     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
103c8     14 4E 05 A1 |  if_e	add	fp, #20
103cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
103d0     14 4E 85 A1 |  if_e	sub	fp, #20
103d4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
103d8     1C 00 90 5D |  if_ne	jmp	#LR__1285
103dc     A7 64 02 FB | 	rdlong	muldiva_, fp
103e0     0C 4E 05 F1 | 	add	fp, #12
103e4     A7 66 02 FB | 	rdlong	muldivb_, fp
103e8     0C 4E 85 F1 | 	sub	fp, #12
103ec     BA 00 A0 FD | 	call	#divide_
103f0     A7 66 62 FC | 	wrlong	muldivb_, fp
103f4     10 00 90 FD | 	jmp	#LR__1286
103f8                 | LR__1285
103f8     A7 16 68 FC | 	wrlong	#11, fp
103fc     08 4E 05 F1 | 	add	fp, #8
10400     A7 FE 69 FC | 	wrlong	#255, fp
10404     08 4E 85 F1 | 	sub	fp, #8
10408                 | LR__1286
10408     A7 12 02 F6 | 	mov	arg01, fp
1040c     18 9E BF FD | 	call	#_push
10410     A7 F0 03 F6 | 	mov	ptra, fp
10414     B2 00 A0 FD | 	call	#popregs_
10418                 | _do_div_ret
10418     2D 00 64 FD | 	ret
1041c                 | 
1041c                 | ' 
1041c                 | ' sub do_fdiv 
1041c                 | _do_fdiv
1041c     02 4A 05 F6 | 	mov	COUNT_, #2
10420     A8 00 A0 FD | 	call	#pushregs_
10424     18 F0 07 F1 | 	add	ptra, #24
10428     64 9D BF FD | 	call	#_pop
1042c     FD 14 02 F6 | 	mov	arg02, result1
10430     FE 12 02 F6 | 	mov	arg01, result2
10434     FF 1E 02 F6 | 	mov	local01, result3
10438     0C 4E 05 F1 | 	add	fp, #12
1043c     A7 14 62 FC | 	wrlong	arg02, fp
10440     04 4E 05 F1 | 	add	fp, #4
10444     A7 12 62 FC | 	wrlong	arg01, fp
10448     04 4E 05 F1 | 	add	fp, #4
1044c     A7 1E 62 FC | 	wrlong	local01, fp
10450     14 4E 85 F1 | 	sub	fp, #20
10454     38 9D BF FD | 	call	#_pop
10458     A7 FA 61 FC | 	wrlong	result1, fp
1045c     04 4E 05 F1 | 	add	fp, #4
10460     A7 FC 61 FC | 	wrlong	result2, fp
10464     04 4E 05 F1 | 	add	fp, #4
10468     A7 FE 61 FC | 	wrlong	result3, fp
1046c                 | ' 
1046c                 | ' t2=pop()
1046c                 | ' t1=pop()
1046c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1046c     08 4E 85 F1 | 	sub	fp, #8
10470     1F FE 0D F2 | 	cmp	result3, #31 wz
10474     14 4E 05 51 |  if_ne	add	fp, #20
10478     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1047c     14 4E 85 51 |  if_ne	sub	fp, #20
10480     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10484     A7 14 68 AC |  if_e	wrlong	#10, fp
10488     08 4E 05 A1 |  if_e	add	fp, #8
1048c     A7 FE 69 AC |  if_e	wrlong	#255, fp
10490     08 4E 85 A1 |  if_e	sub	fp, #8
10494     38 01 90 AD |  if_e	jmp	#LR__1295
10498                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10498     08 4E 05 F1 | 	add	fp, #8
1049c     A7 14 02 FB | 	rdlong	arg02, fp
104a0     08 4E 85 F1 | 	sub	fp, #8
104a4     1C 14 0E F2 | 	cmp	arg02, #28 wz
104a8     28 00 90 5D |  if_ne	jmp	#LR__1290
104ac     08 4E 05 F1 | 	add	fp, #8
104b0     A7 3C 68 FC | 	wrlong	#30, fp
104b4     08 4E 85 F1 | 	sub	fp, #8
104b8     A7 12 02 FB | 	rdlong	arg01, fp
104bc     09 13 52 F6 | 	abs	arg01, arg01 wc
104c0     1F 20 C6 C9 |  if_b	decod	local02, #31
104c4     00 20 06 36 |  if_ae	mov	local02, #0
104c8     F8 E6 B0 FD | 	call	#__system___float_fromuns
104cc     10 FB 61 F5 | 	xor	result1, local02
104d0     A7 FA 61 FC | 	wrlong	result1, fp
104d4                 | LR__1290
104d4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
104d4     08 4E 05 F1 | 	add	fp, #8
104d8     A7 14 02 FB | 	rdlong	arg02, fp
104dc     08 4E 85 F1 | 	sub	fp, #8
104e0     1D 14 0E F2 | 	cmp	arg02, #29 wz
104e4     18 00 90 5D |  if_ne	jmp	#LR__1291
104e8     08 4E 05 F1 | 	add	fp, #8
104ec     A7 3C 68 FC | 	wrlong	#30, fp
104f0     08 4E 85 F1 | 	sub	fp, #8
104f4     A7 12 02 FB | 	rdlong	arg01, fp
104f8     C8 E6 B0 FD | 	call	#__system___float_fromuns
104fc     A7 FA 61 FC | 	wrlong	result1, fp
10500                 | LR__1291
10500                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10500     14 4E 05 F1 | 	add	fp, #20
10504     A7 14 02 FB | 	rdlong	arg02, fp
10508     14 4E 85 F1 | 	sub	fp, #20
1050c     1C 14 0E F2 | 	cmp	arg02, #28 wz
10510     34 00 90 5D |  if_ne	jmp	#LR__1292
10514     14 4E 05 F1 | 	add	fp, #20
10518     A7 3C 68 FC | 	wrlong	#30, fp
1051c     08 4E 85 F1 | 	sub	fp, #8
10520     A7 12 02 FB | 	rdlong	arg01, fp
10524     0C 4E 85 F1 | 	sub	fp, #12
10528     09 13 52 F6 | 	abs	arg01, arg01 wc
1052c     1F 20 C6 C9 |  if_b	decod	local02, #31
10530     00 20 06 36 |  if_ae	mov	local02, #0
10534     8C E6 B0 FD | 	call	#__system___float_fromuns
10538     10 FB 61 F5 | 	xor	result1, local02
1053c     0C 4E 05 F1 | 	add	fp, #12
10540     A7 FA 61 FC | 	wrlong	result1, fp
10544     0C 4E 85 F1 | 	sub	fp, #12
10548                 | LR__1292
10548                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
10548     14 4E 05 F1 | 	add	fp, #20
1054c     A7 14 02 FB | 	rdlong	arg02, fp
10550     14 4E 85 F1 | 	sub	fp, #20
10554     1D 14 0E F2 | 	cmp	arg02, #29 wz
10558     24 00 90 5D |  if_ne	jmp	#LR__1293
1055c     14 4E 05 F1 | 	add	fp, #20
10560     A7 3C 68 FC | 	wrlong	#30, fp
10564     08 4E 85 F1 | 	sub	fp, #8
10568     A7 12 02 FB | 	rdlong	arg01, fp
1056c     0C 4E 85 F1 | 	sub	fp, #12
10570     50 E6 B0 FD | 	call	#__system___float_fromuns
10574     0C 4E 05 F1 | 	add	fp, #12
10578     A7 FA 61 FC | 	wrlong	result1, fp
1057c     0C 4E 85 F1 | 	sub	fp, #12
10580                 | LR__1293
10580                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
10580     08 4E 05 F1 | 	add	fp, #8
10584     A7 14 02 FB | 	rdlong	arg02, fp
10588     08 4E 85 F1 | 	sub	fp, #8
1058c     1E 14 0E F2 | 	cmp	arg02, #30 wz
10590     14 4E 05 A1 |  if_e	add	fp, #20
10594     A7 1E 02 AB |  if_e	rdlong	local01, fp
10598     14 4E 85 A1 |  if_e	sub	fp, #20
1059c     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
105a0     1C 00 90 5D |  if_ne	jmp	#LR__1294
105a4     A7 12 02 FB | 	rdlong	arg01, fp
105a8     0C 4E 05 F1 | 	add	fp, #12
105ac     A7 14 02 FB | 	rdlong	arg02, fp
105b0     0C 4E 85 F1 | 	sub	fp, #12
105b4     14 EC B0 FD | 	call	#__system___float_div
105b8     A7 FA 61 FC | 	wrlong	result1, fp
105bc     10 00 90 FD | 	jmp	#LR__1295
105c0                 | LR__1294
105c0     A7 16 68 FC | 	wrlong	#11, fp
105c4     08 4E 05 F1 | 	add	fp, #8
105c8     A7 FE 69 FC | 	wrlong	#255, fp
105cc     08 4E 85 F1 | 	sub	fp, #8
105d0                 | LR__1295
105d0     A7 12 02 F6 | 	mov	arg01, fp
105d4     50 9C BF FD | 	call	#_push
105d8     A7 F0 03 F6 | 	mov	ptra, fp
105dc     B2 00 A0 FD | 	call	#popregs_
105e0                 | _do_fdiv_ret
105e0     2D 00 64 FD | 	ret
105e4                 | 
105e4                 | ' 
105e4                 | ' 
105e4                 | ' sub do_mod 
105e4                 | _do_mod
105e4     01 4A 05 F6 | 	mov	COUNT_, #1
105e8     A8 00 A0 FD | 	call	#pushregs_
105ec     18 F0 07 F1 | 	add	ptra, #24
105f0     9C 9B BF FD | 	call	#_pop
105f4     FD 66 02 F6 | 	mov	muldivb_, result1
105f8     FE 64 02 F6 | 	mov	muldiva_, result2
105fc     FF 1E 02 F6 | 	mov	local01, result3
10600     0C 4E 05 F1 | 	add	fp, #12
10604     A7 66 62 FC | 	wrlong	muldivb_, fp
10608     04 4E 05 F1 | 	add	fp, #4
1060c     A7 64 62 FC | 	wrlong	muldiva_, fp
10610     04 4E 05 F1 | 	add	fp, #4
10614     A7 1E 62 FC | 	wrlong	local01, fp
10618     14 4E 85 F1 | 	sub	fp, #20
1061c     70 9B BF FD | 	call	#_pop
10620     A7 FA 61 FC | 	wrlong	result1, fp
10624     04 4E 05 F1 | 	add	fp, #4
10628     A7 FC 61 FC | 	wrlong	result2, fp
1062c     04 4E 05 F1 | 	add	fp, #4
10630     A7 FE 61 FC | 	wrlong	result3, fp
10634                 | ' 
10634                 | ' t2=pop()
10634                 | ' t1=pop()
10634                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
10634     08 4E 85 F1 | 	sub	fp, #8
10638     1F FE 0D F2 | 	cmp	result3, #31 wz
1063c     14 4E 05 51 |  if_ne	add	fp, #20
10640     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10644     14 4E 85 51 |  if_ne	sub	fp, #20
10648     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1064c     A7 14 68 AC |  if_e	wrlong	#10, fp
10650     08 4E 05 A1 |  if_e	add	fp, #8
10654     A7 FE 69 AC |  if_e	wrlong	#255, fp
10658     08 4E 85 A1 |  if_e	sub	fp, #8
1065c     90 01 90 AD |  if_e	jmp	#LR__1306
10660                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
10660     08 4E 05 F1 | 	add	fp, #8
10664     A7 66 02 FB | 	rdlong	muldivb_, fp
10668     08 4E 85 F1 | 	sub	fp, #8
1066c     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10670     1C 00 90 5D |  if_ne	jmp	#LR__1300
10674     08 4E 05 F1 | 	add	fp, #8
10678     A7 38 68 FC | 	wrlong	#28, fp
1067c     08 4E 85 F1 | 	sub	fp, #8
10680     A7 12 02 FB | 	rdlong	arg01, fp
10684     00 14 06 F6 | 	mov	arg02, #0
10688     04 EE B0 FD | 	call	#__system___float_tointeger
1068c     A7 FA 61 FC | 	wrlong	result1, fp
10690                 | LR__1300
10690                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10690     14 4E 05 F1 | 	add	fp, #20
10694     A7 66 02 FB | 	rdlong	muldivb_, fp
10698     14 4E 85 F1 | 	sub	fp, #20
1069c     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
106a0     28 00 90 5D |  if_ne	jmp	#LR__1301
106a4     14 4E 05 F1 | 	add	fp, #20
106a8     A7 38 68 FC | 	wrlong	#28, fp
106ac     08 4E 85 F1 | 	sub	fp, #8
106b0     A7 12 02 FB | 	rdlong	arg01, fp
106b4     0C 4E 85 F1 | 	sub	fp, #12
106b8     00 14 06 F6 | 	mov	arg02, #0
106bc     D0 ED B0 FD | 	call	#__system___float_tointeger
106c0     0C 4E 05 F1 | 	add	fp, #12
106c4     A7 FA 61 FC | 	wrlong	result1, fp
106c8     0C 4E 85 F1 | 	sub	fp, #12
106cc                 | LR__1301
106cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
106cc     08 4E 05 F1 | 	add	fp, #8
106d0     A7 66 02 FB | 	rdlong	muldivb_, fp
106d4     08 4E 85 F1 | 	sub	fp, #8
106d8     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
106dc     14 4E 05 A1 |  if_e	add	fp, #20
106e0     A7 1E 02 AB |  if_e	rdlong	local01, fp
106e4     14 4E 85 A1 |  if_e	sub	fp, #20
106e8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
106ec     20 00 90 5D |  if_ne	jmp	#LR__1302
106f0     0C 4E 05 F1 | 	add	fp, #12
106f4     A7 1E 02 FB | 	rdlong	local01, fp
106f8     0C 4E 85 F1 | 	sub	fp, #12
106fc     A7 66 02 FB | 	rdlong	muldivb_, fp
10700     0F 67 12 FD | 	qdiv	muldivb_, local01
10704     19 1E 62 FD | 	getqy	local01
10708     A7 1E 62 FC | 	wrlong	local01, fp
1070c     E0 00 90 FD | 	jmp	#LR__1306
10710                 | LR__1302
10710                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
10710     08 4E 05 F1 | 	add	fp, #8
10714     A7 66 02 FB | 	rdlong	muldivb_, fp
10718     08 4E 85 F1 | 	sub	fp, #8
1071c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10720     14 4E 05 A1 |  if_e	add	fp, #20
10724     A7 1E 02 AB |  if_e	rdlong	local01, fp
10728     14 4E 85 A1 |  if_e	sub	fp, #20
1072c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10730     2C 00 90 5D |  if_ne	jmp	#LR__1303
10734     0C 4E 05 F1 | 	add	fp, #12
10738     A7 1E 02 FB | 	rdlong	local01, fp
1073c     0C 4E 85 F1 | 	sub	fp, #12
10740     A7 66 02 FB | 	rdlong	muldivb_, fp
10744     0F 67 12 FD | 	qdiv	muldivb_, local01
10748     19 1E 62 FD | 	getqy	local01
1074c     A7 1E 62 FC | 	wrlong	local01, fp
10750     08 4E 05 F1 | 	add	fp, #8
10754     A7 38 68 FC | 	wrlong	#28, fp
10758     08 4E 85 F1 | 	sub	fp, #8
1075c     90 00 90 FD | 	jmp	#LR__1306
10760                 | LR__1303
10760                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
10760     08 4E 05 F1 | 	add	fp, #8
10764     A7 66 02 FB | 	rdlong	muldivb_, fp
10768     08 4E 85 F1 | 	sub	fp, #8
1076c     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10770     14 4E 05 A1 |  if_e	add	fp, #20
10774     A7 1E 02 AB |  if_e	rdlong	local01, fp
10778     14 4E 85 A1 |  if_e	sub	fp, #20
1077c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10780     1C 00 90 5D |  if_ne	jmp	#LR__1304
10784     A7 64 02 FB | 	rdlong	muldiva_, fp
10788     0C 4E 05 F1 | 	add	fp, #12
1078c     A7 66 02 FB | 	rdlong	muldivb_, fp
10790     0C 4E 85 F1 | 	sub	fp, #12
10794     BA 00 A0 FD | 	call	#divide_
10798     A7 64 62 FC | 	wrlong	muldiva_, fp
1079c     50 00 90 FD | 	jmp	#LR__1306
107a0                 | LR__1304
107a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
107a0     08 4E 05 F1 | 	add	fp, #8
107a4     A7 66 02 FB | 	rdlong	muldivb_, fp
107a8     08 4E 85 F1 | 	sub	fp, #8
107ac     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
107b0     14 4E 05 A1 |  if_e	add	fp, #20
107b4     A7 1E 02 AB |  if_e	rdlong	local01, fp
107b8     14 4E 85 A1 |  if_e	sub	fp, #20
107bc     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
107c0     1C 00 90 5D |  if_ne	jmp	#LR__1305
107c4     A7 64 02 FB | 	rdlong	muldiva_, fp
107c8     0C 4E 05 F1 | 	add	fp, #12
107cc     A7 66 02 FB | 	rdlong	muldivb_, fp
107d0     0C 4E 85 F1 | 	sub	fp, #12
107d4     BA 00 A0 FD | 	call	#divide_
107d8     A7 64 62 FC | 	wrlong	muldiva_, fp
107dc     10 00 90 FD | 	jmp	#LR__1306
107e0                 | LR__1305
107e0     A7 16 68 FC | 	wrlong	#11, fp
107e4     08 4E 05 F1 | 	add	fp, #8
107e8     A7 FE 69 FC | 	wrlong	#255, fp
107ec     08 4E 85 F1 | 	sub	fp, #8
107f0                 | LR__1306
107f0     A7 12 02 F6 | 	mov	arg01, fp
107f4     30 9A BF FD | 	call	#_push
107f8     A7 F0 03 F6 | 	mov	ptra, fp
107fc     B2 00 A0 FD | 	call	#popregs_
10800                 | _do_mod_ret
10800     2D 00 64 FD | 	ret
10804                 | 
10804                 | ' 
10804                 | ' sub do_shl 
10804                 | _do_shl
10804     03 4A 05 F6 | 	mov	COUNT_, #3
10808     A8 00 A0 FD | 	call	#pushregs_
1080c     18 F0 07 F1 | 	add	ptra, #24
10810     7C 99 BF FD | 	call	#_pop
10814     FD 12 02 F6 | 	mov	arg01, result1
10818     FE 1E 02 F6 | 	mov	local01, result2
1081c     FF 20 02 F6 | 	mov	local02, result3
10820     0C 4E 05 F1 | 	add	fp, #12
10824     A7 12 62 FC | 	wrlong	arg01, fp
10828     04 4E 05 F1 | 	add	fp, #4
1082c     A7 1E 62 FC | 	wrlong	local01, fp
10830     04 4E 05 F1 | 	add	fp, #4
10834     A7 20 62 FC | 	wrlong	local02, fp
10838     14 4E 85 F1 | 	sub	fp, #20
1083c     50 99 BF FD | 	call	#_pop
10840     FF 22 02 F6 | 	mov	local03, result3
10844     A7 FA 61 FC | 	wrlong	result1, fp
10848     04 4E 05 F1 | 	add	fp, #4
1084c     A7 FC 61 FC | 	wrlong	result2, fp
10850     04 4E 05 F1 | 	add	fp, #4
10854     A7 22 62 FC | 	wrlong	local03, fp
10858                 | ' 
10858                 | ' t2=pop()
10858                 | ' t1=pop()
10858                 | ' 
10858                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10858     08 4E 85 F1 | 	sub	fp, #8
1085c     1C 22 0E F2 | 	cmp	local03, #28 wz
10860     A7 22 02 AB |  if_e	rdlong	local03, fp
10864     A7 22 62 AC |  if_e	wrlong	local03, fp
10868     08 4E 05 A1 |  if_e	add	fp, #8
1086c     A7 3A 68 AC |  if_e	wrlong	#29, fp
10870     08 4E 85 A1 |  if_e	sub	fp, #8
10874                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10874     14 4E 05 F1 | 	add	fp, #20
10878     A7 22 02 FB | 	rdlong	local03, fp
1087c     14 4E 85 F1 | 	sub	fp, #20
10880     1C 22 0E F2 | 	cmp	local03, #28 wz
10884     18 00 90 5D |  if_ne	jmp	#LR__1310
10888     0C 4E 05 F1 | 	add	fp, #12
1088c     A7 22 02 FB | 	rdlong	local03, fp
10890     A7 22 62 FC | 	wrlong	local03, fp
10894     08 4E 05 F1 | 	add	fp, #8
10898     A7 3A 68 FC | 	wrlong	#29, fp
1089c     14 4E 85 F1 | 	sub	fp, #20
108a0                 | LR__1310
108a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
108a0     08 4E 05 F1 | 	add	fp, #8
108a4     A7 22 02 FB | 	rdlong	local03, fp
108a8     08 4E 85 F1 | 	sub	fp, #8
108ac     1F 22 0E F2 | 	cmp	local03, #31 wz
108b0     14 4E 05 51 |  if_ne	add	fp, #20
108b4     A7 20 02 5B |  if_ne	rdlong	local02, fp
108b8     14 4E 85 51 |  if_ne	sub	fp, #20
108bc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
108c0     08 4E 05 51 |  if_ne	add	fp, #8
108c4     A7 22 02 5B |  if_ne	rdlong	local03, fp
108c8     08 4E 85 51 |  if_ne	sub	fp, #8
108cc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
108d0     14 4E 05 51 |  if_ne	add	fp, #20
108d4     14 4E 85 51 |  if_ne	sub	fp, #20
108d8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
108dc     A7 0C 68 AC |  if_e	wrlong	#6, fp
108e0     08 4E 05 A1 |  if_e	add	fp, #8
108e4     A7 FE 69 AC |  if_e	wrlong	#255, fp
108e8     08 4E 85 A1 |  if_e	sub	fp, #8
108ec     18 00 90 AD |  if_e	jmp	#LR__1311
108f0     A7 22 02 FB | 	rdlong	local03, fp
108f4     0C 4E 05 F1 | 	add	fp, #12
108f8     A7 1E 02 FB | 	rdlong	local01, fp
108fc     0C 4E 85 F1 | 	sub	fp, #12
10900     0F 23 62 F0 | 	shl	local03, local01
10904     A7 22 62 FC | 	wrlong	local03, fp
10908                 | LR__1311
10908     A7 12 02 F6 | 	mov	arg01, fp
1090c     18 99 BF FD | 	call	#_push
10910     A7 F0 03 F6 | 	mov	ptra, fp
10914     B2 00 A0 FD | 	call	#popregs_
10918                 | _do_shl_ret
10918     2D 00 64 FD | 	ret
1091c                 | 
1091c                 | ' 
1091c                 | ' sub do_shr 
1091c                 | _do_shr
1091c     03 4A 05 F6 | 	mov	COUNT_, #3
10920     A8 00 A0 FD | 	call	#pushregs_
10924     18 F0 07 F1 | 	add	ptra, #24
10928     64 98 BF FD | 	call	#_pop
1092c     FD 12 02 F6 | 	mov	arg01, result1
10930     FE 1E 02 F6 | 	mov	local01, result2
10934     FF 20 02 F6 | 	mov	local02, result3
10938     0C 4E 05 F1 | 	add	fp, #12
1093c     A7 12 62 FC | 	wrlong	arg01, fp
10940     04 4E 05 F1 | 	add	fp, #4
10944     A7 1E 62 FC | 	wrlong	local01, fp
10948     04 4E 05 F1 | 	add	fp, #4
1094c     A7 20 62 FC | 	wrlong	local02, fp
10950     14 4E 85 F1 | 	sub	fp, #20
10954     38 98 BF FD | 	call	#_pop
10958     FF 22 02 F6 | 	mov	local03, result3
1095c     A7 FA 61 FC | 	wrlong	result1, fp
10960     04 4E 05 F1 | 	add	fp, #4
10964     A7 FC 61 FC | 	wrlong	result2, fp
10968     04 4E 05 F1 | 	add	fp, #4
1096c     A7 22 62 FC | 	wrlong	local03, fp
10970                 | ' t2=pop()
10970                 | ' t1=pop()
10970                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10970     08 4E 85 F1 | 	sub	fp, #8
10974     1C 22 0E F2 | 	cmp	local03, #28 wz
10978     A7 22 02 AB |  if_e	rdlong	local03, fp
1097c     A7 22 62 AC |  if_e	wrlong	local03, fp
10980     08 4E 05 A1 |  if_e	add	fp, #8
10984     A7 3A 68 AC |  if_e	wrlong	#29, fp
10988     08 4E 85 A1 |  if_e	sub	fp, #8
1098c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1098c     14 4E 05 F1 | 	add	fp, #20
10990     A7 22 02 FB | 	rdlong	local03, fp
10994     14 4E 85 F1 | 	sub	fp, #20
10998     1C 22 0E F2 | 	cmp	local03, #28 wz
1099c     18 00 90 5D |  if_ne	jmp	#LR__1320
109a0     0C 4E 05 F1 | 	add	fp, #12
109a4     A7 22 02 FB | 	rdlong	local03, fp
109a8     A7 22 62 FC | 	wrlong	local03, fp
109ac     08 4E 05 F1 | 	add	fp, #8
109b0     A7 3A 68 FC | 	wrlong	#29, fp
109b4     14 4E 85 F1 | 	sub	fp, #20
109b8                 | LR__1320
109b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
109b8     08 4E 05 F1 | 	add	fp, #8
109bc     A7 22 02 FB | 	rdlong	local03, fp
109c0     08 4E 85 F1 | 	sub	fp, #8
109c4     1F 22 0E F2 | 	cmp	local03, #31 wz
109c8     14 4E 05 51 |  if_ne	add	fp, #20
109cc     A7 20 02 5B |  if_ne	rdlong	local02, fp
109d0     14 4E 85 51 |  if_ne	sub	fp, #20
109d4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
109d8     08 4E 05 51 |  if_ne	add	fp, #8
109dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
109e0     08 4E 85 51 |  if_ne	sub	fp, #8
109e4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
109e8     14 4E 05 51 |  if_ne	add	fp, #20
109ec     14 4E 85 51 |  if_ne	sub	fp, #20
109f0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
109f4     A7 0C 68 AC |  if_e	wrlong	#6, fp
109f8     08 4E 05 A1 |  if_e	add	fp, #8
109fc     A7 FE 69 AC |  if_e	wrlong	#255, fp
10a00     08 4E 85 A1 |  if_e	sub	fp, #8
10a04     18 00 90 AD |  if_e	jmp	#LR__1321
10a08     A7 22 02 FB | 	rdlong	local03, fp
10a0c     0C 4E 05 F1 | 	add	fp, #12
10a10     A7 1E 02 FB | 	rdlong	local01, fp
10a14     0C 4E 85 F1 | 	sub	fp, #12
10a18     0F 23 42 F0 | 	shr	local03, local01
10a1c     A7 22 62 FC | 	wrlong	local03, fp
10a20                 | LR__1321
10a20     A7 12 02 F6 | 	mov	arg01, fp
10a24     00 98 BF FD | 	call	#_push
10a28     A7 F0 03 F6 | 	mov	ptra, fp
10a2c     B2 00 A0 FD | 	call	#popregs_
10a30                 | _do_shr_ret
10a30     2D 00 64 FD | 	ret
10a34                 | 
10a34                 | ' 
10a34                 | ' sub do_power 
10a34                 | _do_power
10a34     02 4A 05 F6 | 	mov	COUNT_, #2
10a38     A8 00 A0 FD | 	call	#pushregs_
10a3c     18 F0 07 F1 | 	add	ptra, #24
10a40     4C 97 BF FD | 	call	#_pop
10a44     FD 14 02 F6 | 	mov	arg02, result1
10a48     FE 12 02 F6 | 	mov	arg01, result2
10a4c     FF 1E 02 F6 | 	mov	local01, result3
10a50     0C 4E 05 F1 | 	add	fp, #12
10a54     A7 14 62 FC | 	wrlong	arg02, fp
10a58     04 4E 05 F1 | 	add	fp, #4
10a5c     A7 12 62 FC | 	wrlong	arg01, fp
10a60     04 4E 05 F1 | 	add	fp, #4
10a64     A7 1E 62 FC | 	wrlong	local01, fp
10a68     14 4E 85 F1 | 	sub	fp, #20
10a6c     20 97 BF FD | 	call	#_pop
10a70     A7 FA 61 FC | 	wrlong	result1, fp
10a74     04 4E 05 F1 | 	add	fp, #4
10a78     A7 FC 61 FC | 	wrlong	result2, fp
10a7c     04 4E 05 F1 | 	add	fp, #4
10a80     A7 FE 61 FC | 	wrlong	result3, fp
10a84                 | ' t2=pop()
10a84                 | ' t1=pop()
10a84                 | ' 
10a84                 | ' 
10a84                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
10a84     08 4E 85 F1 | 	sub	fp, #8
10a88     1F FE 0D F2 | 	cmp	result3, #31 wz
10a8c     14 4E 05 51 |  if_ne	add	fp, #20
10a90     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10a94     14 4E 85 51 |  if_ne	sub	fp, #20
10a98     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10a9c     A7 18 68 AC |  if_e	wrlong	#12, fp
10aa0     08 4E 05 A1 |  if_e	add	fp, #8
10aa4     A7 FE 69 AC |  if_e	wrlong	#255, fp
10aa8     08 4E 85 A1 |  if_e	sub	fp, #8
10aac     38 01 90 AD |  if_e	jmp	#LR__1335
10ab0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10ab0     08 4E 05 F1 | 	add	fp, #8
10ab4     A7 14 02 FB | 	rdlong	arg02, fp
10ab8     08 4E 85 F1 | 	sub	fp, #8
10abc     1C 14 0E F2 | 	cmp	arg02, #28 wz
10ac0     28 00 90 5D |  if_ne	jmp	#LR__1330
10ac4     08 4E 05 F1 | 	add	fp, #8
10ac8     A7 3C 68 FC | 	wrlong	#30, fp
10acc     08 4E 85 F1 | 	sub	fp, #8
10ad0     A7 12 02 FB | 	rdlong	arg01, fp
10ad4     09 13 52 F6 | 	abs	arg01, arg01 wc
10ad8     1F 20 C6 C9 |  if_b	decod	local02, #31
10adc     00 20 06 36 |  if_ae	mov	local02, #0
10ae0     E0 E0 B0 FD | 	call	#__system___float_fromuns
10ae4     10 FB 61 F5 | 	xor	result1, local02
10ae8     A7 FA 61 FC | 	wrlong	result1, fp
10aec                 | LR__1330
10aec                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
10aec     08 4E 05 F1 | 	add	fp, #8
10af0     A7 14 02 FB | 	rdlong	arg02, fp
10af4     08 4E 85 F1 | 	sub	fp, #8
10af8     1D 14 0E F2 | 	cmp	arg02, #29 wz
10afc     18 00 90 5D |  if_ne	jmp	#LR__1331
10b00     08 4E 05 F1 | 	add	fp, #8
10b04     A7 3C 68 FC | 	wrlong	#30, fp
10b08     08 4E 85 F1 | 	sub	fp, #8
10b0c     A7 12 02 FB | 	rdlong	arg01, fp
10b10     B0 E0 B0 FD | 	call	#__system___float_fromuns
10b14     A7 FA 61 FC | 	wrlong	result1, fp
10b18                 | LR__1331
10b18                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10b18     14 4E 05 F1 | 	add	fp, #20
10b1c     A7 14 02 FB | 	rdlong	arg02, fp
10b20     14 4E 85 F1 | 	sub	fp, #20
10b24     1C 14 0E F2 | 	cmp	arg02, #28 wz
10b28     34 00 90 5D |  if_ne	jmp	#LR__1332
10b2c     14 4E 05 F1 | 	add	fp, #20
10b30     A7 3C 68 FC | 	wrlong	#30, fp
10b34     08 4E 85 F1 | 	sub	fp, #8
10b38     A7 12 02 FB | 	rdlong	arg01, fp
10b3c     0C 4E 85 F1 | 	sub	fp, #12
10b40     09 13 52 F6 | 	abs	arg01, arg01 wc
10b44     1F 20 C6 C9 |  if_b	decod	local02, #31
10b48     00 20 06 36 |  if_ae	mov	local02, #0
10b4c     74 E0 B0 FD | 	call	#__system___float_fromuns
10b50     10 FB 61 F5 | 	xor	result1, local02
10b54     0C 4E 05 F1 | 	add	fp, #12
10b58     A7 FA 61 FC | 	wrlong	result1, fp
10b5c     0C 4E 85 F1 | 	sub	fp, #12
10b60                 | LR__1332
10b60                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
10b60     14 4E 05 F1 | 	add	fp, #20
10b64     A7 14 02 FB | 	rdlong	arg02, fp
10b68     14 4E 85 F1 | 	sub	fp, #20
10b6c     1D 14 0E F2 | 	cmp	arg02, #29 wz
10b70     24 00 90 5D |  if_ne	jmp	#LR__1333
10b74     14 4E 05 F1 | 	add	fp, #20
10b78     A7 3C 68 FC | 	wrlong	#30, fp
10b7c     08 4E 85 F1 | 	sub	fp, #8
10b80     A7 12 02 FB | 	rdlong	arg01, fp
10b84     0C 4E 85 F1 | 	sub	fp, #12
10b88     38 E0 B0 FD | 	call	#__system___float_fromuns
10b8c     0C 4E 05 F1 | 	add	fp, #12
10b90     A7 FA 61 FC | 	wrlong	result1, fp
10b94     0C 4E 85 F1 | 	sub	fp, #12
10b98                 | LR__1333
10b98                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
10b98     08 4E 05 F1 | 	add	fp, #8
10b9c     A7 14 02 FB | 	rdlong	arg02, fp
10ba0     08 4E 85 F1 | 	sub	fp, #8
10ba4     1E 14 0E F2 | 	cmp	arg02, #30 wz
10ba8     14 4E 05 A1 |  if_e	add	fp, #20
10bac     A7 1E 02 AB |  if_e	rdlong	local01, fp
10bb0     14 4E 85 A1 |  if_e	sub	fp, #20
10bb4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10bb8     1C 00 90 5D |  if_ne	jmp	#LR__1334
10bbc     A7 12 02 FB | 	rdlong	arg01, fp
10bc0     0C 4E 05 F1 | 	add	fp, #12
10bc4     A7 14 02 FB | 	rdlong	arg02, fp
10bc8     0C 4E 85 F1 | 	sub	fp, #12
10bcc     DC F2 B0 FD | 	call	#__system____builtin_powf
10bd0     A7 FA 61 FC | 	wrlong	result1, fp
10bd4     10 00 90 FD | 	jmp	#LR__1335
10bd8                 | LR__1334
10bd8     A7 1A 68 FC | 	wrlong	#13, fp
10bdc     08 4E 05 F1 | 	add	fp, #8
10be0     A7 FE 69 FC | 	wrlong	#255, fp
10be4     08 4E 85 F1 | 	sub	fp, #8
10be8                 | LR__1335
10be8     A7 12 02 F6 | 	mov	arg01, fp
10bec     38 96 BF FD | 	call	#_push
10bf0     A7 F0 03 F6 | 	mov	ptra, fp
10bf4     B2 00 A0 FD | 	call	#popregs_
10bf8                 | _do_power_ret
10bf8     2D 00 64 FD | 	ret
10bfc                 | 
10bfc                 | ' 
10bfc                 | ' 
10bfc                 | ' sub do_eq
10bfc                 | _do_eq
10bfc     05 4A 05 F6 | 	mov	COUNT_, #5
10c00     A8 00 A0 FD | 	call	#pushregs_
10c04     18 F0 07 F1 | 	add	ptra, #24
10c08     84 95 BF FD | 	call	#_pop
10c0c     FD 1E 02 F6 | 	mov	local01, result1
10c10     FE 20 02 F6 | 	mov	local02, result2
10c14     FF 22 02 F6 | 	mov	local03, result3
10c18     0C 4E 05 F1 | 	add	fp, #12
10c1c     A7 1E 62 FC | 	wrlong	local01, fp
10c20     04 4E 05 F1 | 	add	fp, #4
10c24     A7 20 62 FC | 	wrlong	local02, fp
10c28     04 4E 05 F1 | 	add	fp, #4
10c2c     A7 22 62 FC | 	wrlong	local03, fp
10c30     14 4E 85 F1 | 	sub	fp, #20
10c34     58 95 BF FD | 	call	#_pop
10c38     FF 22 02 F6 | 	mov	local03, result3
10c3c     A7 FA 61 FC | 	wrlong	result1, fp
10c40     04 4E 05 F1 | 	add	fp, #4
10c44     A7 FC 61 FC | 	wrlong	result2, fp
10c48     04 4E 05 F1 | 	add	fp, #4
10c4c     A7 22 62 FC | 	wrlong	local03, fp
10c50                 | ' t2=pop()
10c50                 | ' t1=pop()
10c50                 | ' 
10c50                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
10c50     08 4E 85 F1 | 	sub	fp, #8
10c54     1F 22 0E F2 | 	cmp	local03, #31 wz
10c58     14 4E 05 A1 |  if_e	add	fp, #20
10c5c     A7 24 02 AB |  if_e	rdlong	local04, fp
10c60     14 4E 85 A1 |  if_e	sub	fp, #20
10c64     12 23 02 A6 |  if_e	mov	local03, local04
10c68     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10c6c     28 00 90 5D |  if_ne	jmp	#LR__1340
10c70     00 1E 06 F6 | 	mov	local01, #0
10c74     A7 12 02 FB | 	rdlong	arg01, fp
10c78     0C 4E 05 F1 | 	add	fp, #12
10c7c     A7 14 02 FB | 	rdlong	arg02, fp
10c80     0C 4E 85 F1 | 	sub	fp, #12
10c84     EC B7 B0 FD | 	call	#__system___string_cmp
10c88     00 FA 0D F2 | 	cmp	result1, #0 wz
10c8c     00 1E 26 A6 |  if_e	not	local01, #0
10c90     A7 1E 62 FC | 	wrlong	local01, fp
10c94     1C 04 90 FD | 	jmp	#LR__1353
10c98                 | LR__1340
10c98                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
10c98     08 4E 05 F1 | 	add	fp, #8
10c9c     A7 1E 02 FB | 	rdlong	local01, fp
10ca0     08 4E 85 F1 | 	sub	fp, #8
10ca4     1E 1E 0E F2 | 	cmp	local01, #30 wz
10ca8     14 4E 05 A1 |  if_e	add	fp, #20
10cac     A7 24 02 AB |  if_e	rdlong	local04, fp
10cb0     14 4E 85 A1 |  if_e	sub	fp, #20
10cb4     12 23 02 A6 |  if_e	mov	local03, local04
10cb8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10cbc     2C 00 90 5D |  if_ne	jmp	#LR__1341
10cc0     00 1E 06 F6 | 	mov	local01, #0
10cc4     A7 12 02 FB | 	rdlong	arg01, fp
10cc8     0C 4E 05 F1 | 	add	fp, #12
10ccc     A7 14 02 FB | 	rdlong	arg02, fp
10cd0     0C 4E 85 F1 | 	sub	fp, #12
10cd4     01 16 06 F6 | 	mov	arg03, #1
10cd8     20 E7 B0 FD | 	call	#__system___float_cmp
10cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
10ce0     00 1E 26 A6 |  if_e	not	local01, #0
10ce4     A7 1E 62 FC | 	wrlong	local01, fp
10ce8     C8 03 90 FD | 	jmp	#LR__1353
10cec                 | LR__1341
10cec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
10cec     08 4E 05 F1 | 	add	fp, #8
10cf0     A7 1E 02 FB | 	rdlong	local01, fp
10cf4     08 4E 85 F1 | 	sub	fp, #8
10cf8     1E 1E 0E F2 | 	cmp	local01, #30 wz
10cfc     14 4E 05 A1 |  if_e	add	fp, #20
10d00     A7 24 02 AB |  if_e	rdlong	local04, fp
10d04     14 4E 85 A1 |  if_e	sub	fp, #20
10d08     12 23 02 A6 |  if_e	mov	local03, local04
10d0c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10d10     48 00 90 5D |  if_ne	jmp	#LR__1342
10d14     00 1E 06 F6 | 	mov	local01, #0
10d18     A7 20 02 FB | 	rdlong	local02, fp
10d1c     0C 4E 05 F1 | 	add	fp, #12
10d20     A7 12 02 FB | 	rdlong	arg01, fp
10d24     0C 4E 85 F1 | 	sub	fp, #12
10d28     09 13 52 F6 | 	abs	arg01, arg01 wc
10d2c     1F 26 C6 C9 |  if_b	decod	local05, #31
10d30     00 26 06 36 |  if_ae	mov	local05, #0
10d34     8C DE B0 FD | 	call	#__system___float_fromuns
10d38     13 FB 61 F5 | 	xor	result1, local05
10d3c     FD 14 02 F6 | 	mov	arg02, result1
10d40     10 13 02 F6 | 	mov	arg01, local02
10d44     01 16 06 F6 | 	mov	arg03, #1
10d48     B0 E6 B0 FD | 	call	#__system___float_cmp
10d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
10d50     00 1E 26 A6 |  if_e	not	local01, #0
10d54     A7 1E 62 FC | 	wrlong	local01, fp
10d58     58 03 90 FD | 	jmp	#LR__1353
10d5c                 | LR__1342
10d5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
10d5c     08 4E 05 F1 | 	add	fp, #8
10d60     A7 1E 02 FB | 	rdlong	local01, fp
10d64     08 4E 85 F1 | 	sub	fp, #8
10d68     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d6c     14 4E 05 A1 |  if_e	add	fp, #20
10d70     A7 24 02 AB |  if_e	rdlong	local04, fp
10d74     14 4E 85 A1 |  if_e	sub	fp, #20
10d78     12 23 02 A6 |  if_e	mov	local03, local04
10d7c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10d80     38 00 90 5D |  if_ne	jmp	#LR__1343
10d84     00 1E 06 F6 | 	mov	local01, #0
10d88     A7 20 02 FB | 	rdlong	local02, fp
10d8c     0C 4E 05 F1 | 	add	fp, #12
10d90     A7 12 02 FB | 	rdlong	arg01, fp
10d94     0C 4E 85 F1 | 	sub	fp, #12
10d98     28 DE B0 FD | 	call	#__system___float_fromuns
10d9c     FD 14 02 F6 | 	mov	arg02, result1
10da0     10 13 02 F6 | 	mov	arg01, local02
10da4     01 16 06 F6 | 	mov	arg03, #1
10da8     50 E6 B0 FD | 	call	#__system___float_cmp
10dac     00 FA 0D F2 | 	cmp	result1, #0 wz
10db0     00 1E 26 A6 |  if_e	not	local01, #0
10db4     A7 1E 62 FC | 	wrlong	local01, fp
10db8     F8 02 90 FD | 	jmp	#LR__1353
10dbc                 | LR__1343
10dbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
10dbc     08 4E 05 F1 | 	add	fp, #8
10dc0     A7 1E 02 FB | 	rdlong	local01, fp
10dc4     08 4E 85 F1 | 	sub	fp, #8
10dc8     1C 1E 0E F2 | 	cmp	local01, #28 wz
10dcc     14 4E 05 A1 |  if_e	add	fp, #20
10dd0     A7 24 02 AB |  if_e	rdlong	local04, fp
10dd4     14 4E 85 A1 |  if_e	sub	fp, #20
10dd8     12 23 02 A6 |  if_e	mov	local03, local04
10ddc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10de0     44 00 90 5D |  if_ne	jmp	#LR__1344
10de4     00 1E 06 F6 | 	mov	local01, #0
10de8     A7 12 02 FB | 	rdlong	arg01, fp
10dec     09 13 52 F6 | 	abs	arg01, arg01 wc
10df0     1F 26 C6 C9 |  if_b	decod	local05, #31
10df4     00 26 06 36 |  if_ae	mov	local05, #0
10df8     C8 DD B0 FD | 	call	#__system___float_fromuns
10dfc     13 FB 61 F5 | 	xor	result1, local05
10e00     FD 12 02 F6 | 	mov	arg01, result1
10e04     0C 4E 05 F1 | 	add	fp, #12
10e08     A7 14 02 FB | 	rdlong	arg02, fp
10e0c     0C 4E 85 F1 | 	sub	fp, #12
10e10     01 16 06 F6 | 	mov	arg03, #1
10e14     E4 E5 B0 FD | 	call	#__system___float_cmp
10e18     00 FA 0D F2 | 	cmp	result1, #0 wz
10e1c     00 1E 26 A6 |  if_e	not	local01, #0
10e20     A7 1E 62 FC | 	wrlong	local01, fp
10e24     8C 02 90 FD | 	jmp	#LR__1353
10e28                 | LR__1344
10e28                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
10e28     08 4E 05 F1 | 	add	fp, #8
10e2c     A7 1E 02 FB | 	rdlong	local01, fp
10e30     08 4E 85 F1 | 	sub	fp, #8
10e34     1C 1E 0E F2 | 	cmp	local01, #28 wz
10e38     14 4E 05 A1 |  if_e	add	fp, #20
10e3c     A7 24 02 AB |  if_e	rdlong	local04, fp
10e40     14 4E 85 A1 |  if_e	sub	fp, #20
10e44     12 23 02 A6 |  if_e	mov	local03, local04
10e48     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10e4c     24 00 90 5D |  if_ne	jmp	#LR__1345
10e50     00 1E 06 F6 | 	mov	local01, #0
10e54     A7 20 02 FB | 	rdlong	local02, fp
10e58     0C 4E 05 F1 | 	add	fp, #12
10e5c     A7 22 02 FB | 	rdlong	local03, fp
10e60     0C 4E 85 F1 | 	sub	fp, #12
10e64     11 21 0A F2 | 	cmp	local02, local03 wz
10e68     01 1E 66 A6 |  if_e	neg	local01, #1
10e6c     A7 1E 62 FC | 	wrlong	local01, fp
10e70     40 02 90 FD | 	jmp	#LR__1353
10e74                 | LR__1345
10e74                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
10e74     08 4E 05 F1 | 	add	fp, #8
10e78     A7 1E 02 FB | 	rdlong	local01, fp
10e7c     08 4E 85 F1 | 	sub	fp, #8
10e80     1C 1E 0E F2 | 	cmp	local01, #28 wz
10e84     14 4E 05 A1 |  if_e	add	fp, #20
10e88     A7 24 02 AB |  if_e	rdlong	local04, fp
10e8c     14 4E 85 A1 |  if_e	sub	fp, #20
10e90     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10e94     24 00 90 5D |  if_ne	jmp	#LR__1346
10e98     00 1E 06 F6 | 	mov	local01, #0
10e9c     A7 20 02 FB | 	rdlong	local02, fp
10ea0     0C 4E 05 F1 | 	add	fp, #12
10ea4     A7 22 02 FB | 	rdlong	local03, fp
10ea8     0C 4E 85 F1 | 	sub	fp, #12
10eac     11 21 0A F2 | 	cmp	local02, local03 wz
10eb0     01 1E 66 A6 |  if_e	neg	local01, #1
10eb4     A7 1E 62 FC | 	wrlong	local01, fp
10eb8     F8 01 90 FD | 	jmp	#LR__1353
10ebc                 | LR__1346
10ebc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
10ebc     08 4E 05 F1 | 	add	fp, #8
10ec0     A7 1E 02 FB | 	rdlong	local01, fp
10ec4     08 4E 85 F1 | 	sub	fp, #8
10ec8     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ecc     14 4E 05 A1 |  if_e	add	fp, #20
10ed0     A7 22 02 AB |  if_e	rdlong	local03, fp
10ed4     14 4E 85 A1 |  if_e	sub	fp, #20
10ed8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10edc     34 00 90 5D |  if_ne	jmp	#LR__1347
10ee0     00 1E 06 F6 | 	mov	local01, #0
10ee4     A7 12 02 FB | 	rdlong	arg01, fp
10ee8     D8 DC B0 FD | 	call	#__system___float_fromuns
10eec     FD 12 02 F6 | 	mov	arg01, result1
10ef0     0C 4E 05 F1 | 	add	fp, #12
10ef4     A7 14 02 FB | 	rdlong	arg02, fp
10ef8     0C 4E 85 F1 | 	sub	fp, #12
10efc     01 16 06 F6 | 	mov	arg03, #1
10f00     F8 E4 B0 FD | 	call	#__system___float_cmp
10f04     00 FA 0D F2 | 	cmp	result1, #0 wz
10f08     00 1E 26 A6 |  if_e	not	local01, #0
10f0c     A7 1E 62 FC | 	wrlong	local01, fp
10f10     A0 01 90 FD | 	jmp	#LR__1353
10f14                 | LR__1347
10f14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
10f14     08 4E 05 F1 | 	add	fp, #8
10f18     A7 1E 02 FB | 	rdlong	local01, fp
10f1c     08 4E 85 F1 | 	sub	fp, #8
10f20     1D 1E 0E F2 | 	cmp	local01, #29 wz
10f24     14 4E 05 A1 |  if_e	add	fp, #20
10f28     A7 22 02 AB |  if_e	rdlong	local03, fp
10f2c     14 4E 85 A1 |  if_e	sub	fp, #20
10f30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10f34     24 00 90 5D |  if_ne	jmp	#LR__1348
10f38     00 1E 06 F6 | 	mov	local01, #0
10f3c     A7 20 02 FB | 	rdlong	local02, fp
10f40     0C 4E 05 F1 | 	add	fp, #12
10f44     A7 22 02 FB | 	rdlong	local03, fp
10f48     0C 4E 85 F1 | 	sub	fp, #12
10f4c     11 21 0A F2 | 	cmp	local02, local03 wz
10f50     01 1E 66 A6 |  if_e	neg	local01, #1
10f54     A7 1E 62 FC | 	wrlong	local01, fp
10f58     58 01 90 FD | 	jmp	#LR__1353
10f5c                 | LR__1348
10f5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
10f5c     08 4E 05 F1 | 	add	fp, #8
10f60     A7 1E 02 FB | 	rdlong	local01, fp
10f64     08 4E 85 F1 | 	sub	fp, #8
10f68     1D 1E 0E F2 | 	cmp	local01, #29 wz
10f6c     14 4E 05 A1 |  if_e	add	fp, #20
10f70     A7 22 02 AB |  if_e	rdlong	local03, fp
10f74     14 4E 85 A1 |  if_e	sub	fp, #20
10f78     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10f7c     24 00 90 5D |  if_ne	jmp	#LR__1349
10f80     00 1E 06 F6 | 	mov	local01, #0
10f84     A7 20 02 FB | 	rdlong	local02, fp
10f88     0C 4E 05 F1 | 	add	fp, #12
10f8c     A7 22 02 FB | 	rdlong	local03, fp
10f90     0C 4E 85 F1 | 	sub	fp, #12
10f94     11 21 0A F2 | 	cmp	local02, local03 wz
10f98     01 1E 66 A6 |  if_e	neg	local01, #1
10f9c     A7 1E 62 FC | 	wrlong	local01, fp
10fa0     10 01 90 FD | 	jmp	#LR__1353
10fa4                 | LR__1349
10fa4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
10fa4     08 4E 05 F1 | 	add	fp, #8
10fa8     A7 1E 02 FB | 	rdlong	local01, fp
10fac     08 4E 85 F1 | 	sub	fp, #8
10fb0     2B 1E 0E F2 | 	cmp	local01, #43 wz
10fb4     14 4E 05 A1 |  if_e	add	fp, #20
10fb8     A7 22 02 AB |  if_e	rdlong	local03, fp
10fbc     14 4E 85 A1 |  if_e	sub	fp, #20
10fc0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10fc4     30 00 90 5D |  if_ne	jmp	#LR__1350
10fc8     00 1E 06 F6 | 	mov	local01, #0
10fcc     A7 12 02 FB | 	rdlong	arg01, fp
10fd0     04 D1 BF FD | 	call	#_convertstring
10fd4     FD 12 02 F6 | 	mov	arg01, result1
10fd8     0C 4E 05 F1 | 	add	fp, #12
10fdc     A7 14 02 FB | 	rdlong	arg02, fp
10fe0     0C 4E 85 F1 | 	sub	fp, #12
10fe4     8C B4 B0 FD | 	call	#__system___string_cmp
10fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
10fec     00 1E 26 A6 |  if_e	not	local01, #0
10ff0     A7 1E 62 FC | 	wrlong	local01, fp
10ff4     BC 00 90 FD | 	jmp	#LR__1353
10ff8                 | LR__1350
10ff8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
10ff8     08 4E 05 F1 | 	add	fp, #8
10ffc     A7 1E 02 FB | 	rdlong	local01, fp
11000     08 4E 85 F1 | 	sub	fp, #8
11004     1F 1E 0E F2 | 	cmp	local01, #31 wz
11008     14 4E 05 A1 |  if_e	add	fp, #20
1100c     A7 22 02 AB |  if_e	rdlong	local03, fp
11010     14 4E 85 A1 |  if_e	sub	fp, #20
11014     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11018     34 00 90 5D |  if_ne	jmp	#LR__1351
1101c     00 1E 06 F6 | 	mov	local01, #0
11020     A7 20 02 FB | 	rdlong	local02, fp
11024     0C 4E 05 F1 | 	add	fp, #12
11028     A7 12 02 FB | 	rdlong	arg01, fp
1102c     0C 4E 85 F1 | 	sub	fp, #12
11030     A4 D0 BF FD | 	call	#_convertstring
11034     FD 14 02 F6 | 	mov	arg02, result1
11038     10 13 02 F6 | 	mov	arg01, local02
1103c     34 B4 B0 FD | 	call	#__system___string_cmp
11040     00 FA 0D F2 | 	cmp	result1, #0 wz
11044     00 1E 26 A6 |  if_e	not	local01, #0
11048     A7 1E 62 FC | 	wrlong	local01, fp
1104c     64 00 90 FD | 	jmp	#LR__1353
11050                 | LR__1351
11050                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
11050     08 4E 05 F1 | 	add	fp, #8
11054     A7 1E 02 FB | 	rdlong	local01, fp
11058     08 4E 85 F1 | 	sub	fp, #8
1105c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11060     14 4E 05 A1 |  if_e	add	fp, #20
11064     A7 22 02 AB |  if_e	rdlong	local03, fp
11068     14 4E 85 A1 |  if_e	sub	fp, #20
1106c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11070     3C 00 90 5D |  if_ne	jmp	#LR__1352
11074     00 1E 06 F6 | 	mov	local01, #0
11078     A7 12 02 FB | 	rdlong	arg01, fp
1107c     58 D0 BF FD | 	call	#_convertstring
11080     FD 20 02 F6 | 	mov	local02, result1
11084     0C 4E 05 F1 | 	add	fp, #12
11088     A7 12 02 FB | 	rdlong	arg01, fp
1108c     0C 4E 85 F1 | 	sub	fp, #12
11090     44 D0 BF FD | 	call	#_convertstring
11094     FD 14 02 F6 | 	mov	arg02, result1
11098     10 13 02 F6 | 	mov	arg01, local02
1109c     D4 B3 B0 FD | 	call	#__system___string_cmp
110a0     00 FA 0D F2 | 	cmp	result1, #0 wz
110a4     00 1E 26 A6 |  if_e	not	local01, #0
110a8     A7 1E 62 FC | 	wrlong	local01, fp
110ac     04 00 90 FD | 	jmp	#LR__1353
110b0                 | LR__1352
110b0     A7 00 68 FC | 	wrlong	#0, fp
110b4                 | LR__1353
110b4     08 4E 05 F1 | 	add	fp, #8
110b8     A7 38 68 FC | 	wrlong	#28, fp
110bc     08 4E 85 F1 | 	sub	fp, #8
110c0     A7 12 02 F6 | 	mov	arg01, fp
110c4     60 91 BF FD | 	call	#_push
110c8     A7 F0 03 F6 | 	mov	ptra, fp
110cc     B2 00 A0 FD | 	call	#popregs_
110d0                 | _do_eq_ret
110d0     2D 00 64 FD | 	ret
110d4                 | 
110d4                 | ' 
110d4                 | ' sub do_gt
110d4                 | _do_gt
110d4     05 4A 05 F6 | 	mov	COUNT_, #5
110d8     A8 00 A0 FD | 	call	#pushregs_
110dc     18 F0 07 F1 | 	add	ptra, #24
110e0     AC 90 BF FD | 	call	#_pop
110e4     FD 1E 02 F6 | 	mov	local01, result1
110e8     FE 20 02 F6 | 	mov	local02, result2
110ec     FF 22 02 F6 | 	mov	local03, result3
110f0     0C 4E 05 F1 | 	add	fp, #12
110f4     A7 1E 62 FC | 	wrlong	local01, fp
110f8     04 4E 05 F1 | 	add	fp, #4
110fc     A7 20 62 FC | 	wrlong	local02, fp
11100     04 4E 05 F1 | 	add	fp, #4
11104     A7 22 62 FC | 	wrlong	local03, fp
11108     14 4E 85 F1 | 	sub	fp, #20
1110c     80 90 BF FD | 	call	#_pop
11110     FF 22 02 F6 | 	mov	local03, result3
11114     A7 FA 61 FC | 	wrlong	result1, fp
11118     04 4E 05 F1 | 	add	fp, #4
1111c     A7 FC 61 FC | 	wrlong	result2, fp
11120     04 4E 05 F1 | 	add	fp, #4
11124     A7 22 62 FC | 	wrlong	local03, fp
11128                 | ' t2=pop()
11128                 | ' t1=pop()
11128                 | ' 
11128                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
11128     08 4E 85 F1 | 	sub	fp, #8
1112c     1F 22 0E F2 | 	cmp	local03, #31 wz
11130     14 4E 05 A1 |  if_e	add	fp, #20
11134     A7 24 02 AB |  if_e	rdlong	local04, fp
11138     14 4E 85 A1 |  if_e	sub	fp, #20
1113c     12 23 02 A6 |  if_e	mov	local03, local04
11140     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11144     28 00 90 5D |  if_ne	jmp	#LR__1360
11148     00 1E 06 F6 | 	mov	local01, #0
1114c     A7 12 02 FB | 	rdlong	arg01, fp
11150     0C 4E 05 F1 | 	add	fp, #12
11154     A7 14 02 FB | 	rdlong	arg02, fp
11158     0C 4E 85 F1 | 	sub	fp, #12
1115c     14 B3 B0 FD | 	call	#__system___string_cmp
11160     01 FA 55 F2 | 	cmps	result1, #1 wc
11164     00 1E 26 36 |  if_ae	not	local01, #0
11168     A7 1E 62 FC | 	wrlong	local01, fp
1116c     1C 04 90 FD | 	jmp	#LR__1373
11170                 | LR__1360
11170                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
11170     08 4E 05 F1 | 	add	fp, #8
11174     A7 1E 02 FB | 	rdlong	local01, fp
11178     08 4E 85 F1 | 	sub	fp, #8
1117c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11180     14 4E 05 A1 |  if_e	add	fp, #20
11184     A7 24 02 AB |  if_e	rdlong	local04, fp
11188     14 4E 85 A1 |  if_e	sub	fp, #20
1118c     12 23 02 A6 |  if_e	mov	local03, local04
11190     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11194     2C 00 90 5D |  if_ne	jmp	#LR__1361
11198     00 1E 06 F6 | 	mov	local01, #0
1119c     A7 12 02 FB | 	rdlong	arg01, fp
111a0     0C 4E 05 F1 | 	add	fp, #12
111a4     A7 14 02 FB | 	rdlong	arg02, fp
111a8     0C 4E 85 F1 | 	sub	fp, #12
111ac     01 16 66 F6 | 	neg	arg03, #1
111b0     48 E2 B0 FD | 	call	#__system___float_cmp
111b4     01 FA 55 F2 | 	cmps	result1, #1 wc
111b8     00 1E 26 36 |  if_ae	not	local01, #0
111bc     A7 1E 62 FC | 	wrlong	local01, fp
111c0     C8 03 90 FD | 	jmp	#LR__1373
111c4                 | LR__1361
111c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
111c4     08 4E 05 F1 | 	add	fp, #8
111c8     A7 1E 02 FB | 	rdlong	local01, fp
111cc     08 4E 85 F1 | 	sub	fp, #8
111d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
111d4     14 4E 05 A1 |  if_e	add	fp, #20
111d8     A7 24 02 AB |  if_e	rdlong	local04, fp
111dc     14 4E 85 A1 |  if_e	sub	fp, #20
111e0     12 23 02 A6 |  if_e	mov	local03, local04
111e4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
111e8     48 00 90 5D |  if_ne	jmp	#LR__1362
111ec     00 1E 06 F6 | 	mov	local01, #0
111f0     A7 20 02 FB | 	rdlong	local02, fp
111f4     0C 4E 05 F1 | 	add	fp, #12
111f8     A7 12 02 FB | 	rdlong	arg01, fp
111fc     0C 4E 85 F1 | 	sub	fp, #12
11200     09 13 52 F6 | 	abs	arg01, arg01 wc
11204     1F 26 C6 C9 |  if_b	decod	local05, #31
11208     00 26 06 36 |  if_ae	mov	local05, #0
1120c     B4 D9 B0 FD | 	call	#__system___float_fromuns
11210     13 FB 61 F5 | 	xor	result1, local05
11214     FD 14 02 F6 | 	mov	arg02, result1
11218     10 13 02 F6 | 	mov	arg01, local02
1121c     01 16 66 F6 | 	neg	arg03, #1
11220     D8 E1 B0 FD | 	call	#__system___float_cmp
11224     01 FA 55 F2 | 	cmps	result1, #1 wc
11228     00 1E 26 36 |  if_ae	not	local01, #0
1122c     A7 1E 62 FC | 	wrlong	local01, fp
11230     58 03 90 FD | 	jmp	#LR__1373
11234                 | LR__1362
11234                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
11234     08 4E 05 F1 | 	add	fp, #8
11238     A7 1E 02 FB | 	rdlong	local01, fp
1123c     08 4E 85 F1 | 	sub	fp, #8
11240     1E 1E 0E F2 | 	cmp	local01, #30 wz
11244     14 4E 05 A1 |  if_e	add	fp, #20
11248     A7 24 02 AB |  if_e	rdlong	local04, fp
1124c     14 4E 85 A1 |  if_e	sub	fp, #20
11250     12 23 02 A6 |  if_e	mov	local03, local04
11254     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11258     38 00 90 5D |  if_ne	jmp	#LR__1363
1125c     00 1E 06 F6 | 	mov	local01, #0
11260     A7 20 02 FB | 	rdlong	local02, fp
11264     0C 4E 05 F1 | 	add	fp, #12
11268     A7 12 02 FB | 	rdlong	arg01, fp
1126c     0C 4E 85 F1 | 	sub	fp, #12
11270     50 D9 B0 FD | 	call	#__system___float_fromuns
11274     FD 14 02 F6 | 	mov	arg02, result1
11278     10 13 02 F6 | 	mov	arg01, local02
1127c     01 16 66 F6 | 	neg	arg03, #1
11280     78 E1 B0 FD | 	call	#__system___float_cmp
11284     01 FA 55 F2 | 	cmps	result1, #1 wc
11288     00 1E 26 36 |  if_ae	not	local01, #0
1128c     A7 1E 62 FC | 	wrlong	local01, fp
11290     F8 02 90 FD | 	jmp	#LR__1373
11294                 | LR__1363
11294                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11294     08 4E 05 F1 | 	add	fp, #8
11298     A7 1E 02 FB | 	rdlong	local01, fp
1129c     08 4E 85 F1 | 	sub	fp, #8
112a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
112a4     14 4E 05 A1 |  if_e	add	fp, #20
112a8     A7 24 02 AB |  if_e	rdlong	local04, fp
112ac     14 4E 85 A1 |  if_e	sub	fp, #20
112b0     12 23 02 A6 |  if_e	mov	local03, local04
112b4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
112b8     44 00 90 5D |  if_ne	jmp	#LR__1364
112bc     00 1E 06 F6 | 	mov	local01, #0
112c0     A7 12 02 FB | 	rdlong	arg01, fp
112c4     09 13 52 F6 | 	abs	arg01, arg01 wc
112c8     1F 26 C6 C9 |  if_b	decod	local05, #31
112cc     00 26 06 36 |  if_ae	mov	local05, #0
112d0     F0 D8 B0 FD | 	call	#__system___float_fromuns
112d4     13 FB 61 F5 | 	xor	result1, local05
112d8     FD 12 02 F6 | 	mov	arg01, result1
112dc     0C 4E 05 F1 | 	add	fp, #12
112e0     A7 14 02 FB | 	rdlong	arg02, fp
112e4     0C 4E 85 F1 | 	sub	fp, #12
112e8     01 16 66 F6 | 	neg	arg03, #1
112ec     0C E1 B0 FD | 	call	#__system___float_cmp
112f0     01 FA 55 F2 | 	cmps	result1, #1 wc
112f4     00 1E 26 36 |  if_ae	not	local01, #0
112f8     A7 1E 62 FC | 	wrlong	local01, fp
112fc     8C 02 90 FD | 	jmp	#LR__1373
11300                 | LR__1364
11300                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11300     08 4E 05 F1 | 	add	fp, #8
11304     A7 1E 02 FB | 	rdlong	local01, fp
11308     08 4E 85 F1 | 	sub	fp, #8
1130c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11310     14 4E 05 A1 |  if_e	add	fp, #20
11314     A7 24 02 AB |  if_e	rdlong	local04, fp
11318     14 4E 85 A1 |  if_e	sub	fp, #20
1131c     12 23 02 A6 |  if_e	mov	local03, local04
11320     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11324     24 00 90 5D |  if_ne	jmp	#LR__1365
11328     00 1E 06 F6 | 	mov	local01, #0
1132c     A7 20 02 FB | 	rdlong	local02, fp
11330     0C 4E 05 F1 | 	add	fp, #12
11334     A7 22 02 FB | 	rdlong	local03, fp
11338     0C 4E 85 F1 | 	sub	fp, #12
1133c     11 21 5A F2 | 	cmps	local02, local03 wcz
11340     01 1E 66 16 |  if_a	neg	local01, #1
11344     A7 1E 62 FC | 	wrlong	local01, fp
11348     40 02 90 FD | 	jmp	#LR__1373
1134c                 | LR__1365
1134c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1134c     08 4E 05 F1 | 	add	fp, #8
11350     A7 1E 02 FB | 	rdlong	local01, fp
11354     08 4E 85 F1 | 	sub	fp, #8
11358     1C 1E 0E F2 | 	cmp	local01, #28 wz
1135c     14 4E 05 A1 |  if_e	add	fp, #20
11360     A7 24 02 AB |  if_e	rdlong	local04, fp
11364     14 4E 85 A1 |  if_e	sub	fp, #20
11368     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1136c     24 00 90 5D |  if_ne	jmp	#LR__1366
11370     00 1E 06 F6 | 	mov	local01, #0
11374     A7 20 02 FB | 	rdlong	local02, fp
11378     0C 4E 05 F1 | 	add	fp, #12
1137c     A7 22 02 FB | 	rdlong	local03, fp
11380     0C 4E 85 F1 | 	sub	fp, #12
11384     11 21 5A F2 | 	cmps	local02, local03 wcz
11388     01 1E 66 16 |  if_a	neg	local01, #1
1138c     A7 1E 62 FC | 	wrlong	local01, fp
11390     F8 01 90 FD | 	jmp	#LR__1373
11394                 | LR__1366
11394                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11394     08 4E 05 F1 | 	add	fp, #8
11398     A7 1E 02 FB | 	rdlong	local01, fp
1139c     08 4E 85 F1 | 	sub	fp, #8
113a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
113a4     14 4E 05 A1 |  if_e	add	fp, #20
113a8     A7 22 02 AB |  if_e	rdlong	local03, fp
113ac     14 4E 85 A1 |  if_e	sub	fp, #20
113b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
113b4     34 00 90 5D |  if_ne	jmp	#LR__1367
113b8     00 1E 06 F6 | 	mov	local01, #0
113bc     A7 12 02 FB | 	rdlong	arg01, fp
113c0     00 D8 B0 FD | 	call	#__system___float_fromuns
113c4     FD 12 02 F6 | 	mov	arg01, result1
113c8     0C 4E 05 F1 | 	add	fp, #12
113cc     A7 14 02 FB | 	rdlong	arg02, fp
113d0     0C 4E 85 F1 | 	sub	fp, #12
113d4     01 16 66 F6 | 	neg	arg03, #1
113d8     20 E0 B0 FD | 	call	#__system___float_cmp
113dc     01 FA 55 F2 | 	cmps	result1, #1 wc
113e0     00 1E 26 36 |  if_ae	not	local01, #0
113e4     A7 1E 62 FC | 	wrlong	local01, fp
113e8     A0 01 90 FD | 	jmp	#LR__1373
113ec                 | LR__1367
113ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
113ec     08 4E 05 F1 | 	add	fp, #8
113f0     A7 1E 02 FB | 	rdlong	local01, fp
113f4     08 4E 85 F1 | 	sub	fp, #8
113f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
113fc     14 4E 05 A1 |  if_e	add	fp, #20
11400     A7 22 02 AB |  if_e	rdlong	local03, fp
11404     14 4E 85 A1 |  if_e	sub	fp, #20
11408     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1140c     24 00 90 5D |  if_ne	jmp	#LR__1368
11410     00 1E 06 F6 | 	mov	local01, #0
11414     A7 20 02 FB | 	rdlong	local02, fp
11418     0C 4E 05 F1 | 	add	fp, #12
1141c     A7 22 02 FB | 	rdlong	local03, fp
11420     0C 4E 85 F1 | 	sub	fp, #12
11424     11 21 5A F2 | 	cmps	local02, local03 wcz
11428     01 1E 66 16 |  if_a	neg	local01, #1
1142c     A7 1E 62 FC | 	wrlong	local01, fp
11430     58 01 90 FD | 	jmp	#LR__1373
11434                 | LR__1368
11434                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
11434     08 4E 05 F1 | 	add	fp, #8
11438     A7 1E 02 FB | 	rdlong	local01, fp
1143c     08 4E 85 F1 | 	sub	fp, #8
11440     1D 1E 0E F2 | 	cmp	local01, #29 wz
11444     14 4E 05 A1 |  if_e	add	fp, #20
11448     A7 22 02 AB |  if_e	rdlong	local03, fp
1144c     14 4E 85 A1 |  if_e	sub	fp, #20
11450     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11454     24 00 90 5D |  if_ne	jmp	#LR__1369
11458     00 1E 06 F6 | 	mov	local01, #0
1145c     A7 20 02 FB | 	rdlong	local02, fp
11460     0C 4E 05 F1 | 	add	fp, #12
11464     A7 22 02 FB | 	rdlong	local03, fp
11468     0C 4E 85 F1 | 	sub	fp, #12
1146c     11 21 1A F2 | 	cmp	local02, local03 wcz
11470     01 1E 66 16 |  if_a	neg	local01, #1
11474     A7 1E 62 FC | 	wrlong	local01, fp
11478     10 01 90 FD | 	jmp	#LR__1373
1147c                 | LR__1369
1147c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1147c     08 4E 05 F1 | 	add	fp, #8
11480     A7 1E 02 FB | 	rdlong	local01, fp
11484     08 4E 85 F1 | 	sub	fp, #8
11488     2B 1E 0E F2 | 	cmp	local01, #43 wz
1148c     14 4E 05 A1 |  if_e	add	fp, #20
11490     A7 22 02 AB |  if_e	rdlong	local03, fp
11494     14 4E 85 A1 |  if_e	sub	fp, #20
11498     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1149c     30 00 90 5D |  if_ne	jmp	#LR__1370
114a0     00 1E 06 F6 | 	mov	local01, #0
114a4     A7 12 02 FB | 	rdlong	arg01, fp
114a8     2C CC BF FD | 	call	#_convertstring
114ac     FD 12 02 F6 | 	mov	arg01, result1
114b0     0C 4E 05 F1 | 	add	fp, #12
114b4     A7 14 02 FB | 	rdlong	arg02, fp
114b8     0C 4E 85 F1 | 	sub	fp, #12
114bc     B4 AF B0 FD | 	call	#__system___string_cmp
114c0     01 FA 55 F2 | 	cmps	result1, #1 wc
114c4     00 1E 26 36 |  if_ae	not	local01, #0
114c8     A7 1E 62 FC | 	wrlong	local01, fp
114cc     BC 00 90 FD | 	jmp	#LR__1373
114d0                 | LR__1370
114d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
114d0     08 4E 05 F1 | 	add	fp, #8
114d4     A7 1E 02 FB | 	rdlong	local01, fp
114d8     08 4E 85 F1 | 	sub	fp, #8
114dc     1F 1E 0E F2 | 	cmp	local01, #31 wz
114e0     14 4E 05 A1 |  if_e	add	fp, #20
114e4     A7 22 02 AB |  if_e	rdlong	local03, fp
114e8     14 4E 85 A1 |  if_e	sub	fp, #20
114ec     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
114f0     34 00 90 5D |  if_ne	jmp	#LR__1371
114f4     00 1E 06 F6 | 	mov	local01, #0
114f8     A7 20 02 FB | 	rdlong	local02, fp
114fc     0C 4E 05 F1 | 	add	fp, #12
11500     A7 12 02 FB | 	rdlong	arg01, fp
11504     0C 4E 85 F1 | 	sub	fp, #12
11508     CC CB BF FD | 	call	#_convertstring
1150c     FD 14 02 F6 | 	mov	arg02, result1
11510     10 13 02 F6 | 	mov	arg01, local02
11514     5C AF B0 FD | 	call	#__system___string_cmp
11518     01 FA 55 F2 | 	cmps	result1, #1 wc
1151c     00 1E 26 36 |  if_ae	not	local01, #0
11520     A7 1E 62 FC | 	wrlong	local01, fp
11524     64 00 90 FD | 	jmp	#LR__1373
11528                 | LR__1371
11528                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
11528     08 4E 05 F1 | 	add	fp, #8
1152c     A7 1E 02 FB | 	rdlong	local01, fp
11530     08 4E 85 F1 | 	sub	fp, #8
11534     2B 1E 0E F2 | 	cmp	local01, #43 wz
11538     14 4E 05 A1 |  if_e	add	fp, #20
1153c     A7 22 02 AB |  if_e	rdlong	local03, fp
11540     14 4E 85 A1 |  if_e	sub	fp, #20
11544     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11548     3C 00 90 5D |  if_ne	jmp	#LR__1372
1154c     00 1E 06 F6 | 	mov	local01, #0
11550     A7 12 02 FB | 	rdlong	arg01, fp
11554     80 CB BF FD | 	call	#_convertstring
11558     FD 20 02 F6 | 	mov	local02, result1
1155c     0C 4E 05 F1 | 	add	fp, #12
11560     A7 12 02 FB | 	rdlong	arg01, fp
11564     0C 4E 85 F1 | 	sub	fp, #12
11568     6C CB BF FD | 	call	#_convertstring
1156c     FD 14 02 F6 | 	mov	arg02, result1
11570     10 13 02 F6 | 	mov	arg01, local02
11574     FC AE B0 FD | 	call	#__system___string_cmp
11578     01 FA 55 F2 | 	cmps	result1, #1 wc
1157c     00 1E 26 36 |  if_ae	not	local01, #0
11580     A7 1E 62 FC | 	wrlong	local01, fp
11584     04 00 90 FD | 	jmp	#LR__1373
11588                 | LR__1372
11588     A7 00 68 FC | 	wrlong	#0, fp
1158c                 | LR__1373
1158c     08 4E 05 F1 | 	add	fp, #8
11590     A7 38 68 FC | 	wrlong	#28, fp
11594     08 4E 85 F1 | 	sub	fp, #8
11598     A7 12 02 F6 | 	mov	arg01, fp
1159c     88 8C BF FD | 	call	#_push
115a0     A7 F0 03 F6 | 	mov	ptra, fp
115a4     B2 00 A0 FD | 	call	#popregs_
115a8                 | _do_gt_ret
115a8     2D 00 64 FD | 	ret
115ac                 | 
115ac                 | ' 
115ac                 | ' sub do_lt
115ac                 | _do_lt
115ac     05 4A 05 F6 | 	mov	COUNT_, #5
115b0     A8 00 A0 FD | 	call	#pushregs_
115b4     18 F0 07 F1 | 	add	ptra, #24
115b8     D4 8B BF FD | 	call	#_pop
115bc     FD 1E 02 F6 | 	mov	local01, result1
115c0     FE 20 02 F6 | 	mov	local02, result2
115c4     FF 22 02 F6 | 	mov	local03, result3
115c8     0C 4E 05 F1 | 	add	fp, #12
115cc     A7 1E 62 FC | 	wrlong	local01, fp
115d0     04 4E 05 F1 | 	add	fp, #4
115d4     A7 20 62 FC | 	wrlong	local02, fp
115d8     04 4E 05 F1 | 	add	fp, #4
115dc     A7 22 62 FC | 	wrlong	local03, fp
115e0     14 4E 85 F1 | 	sub	fp, #20
115e4     A8 8B BF FD | 	call	#_pop
115e8     FF 22 02 F6 | 	mov	local03, result3
115ec     A7 FA 61 FC | 	wrlong	result1, fp
115f0     04 4E 05 F1 | 	add	fp, #4
115f4     A7 FC 61 FC | 	wrlong	result2, fp
115f8     04 4E 05 F1 | 	add	fp, #4
115fc     A7 22 62 FC | 	wrlong	local03, fp
11600                 | ' t2=pop()
11600                 | ' t1=pop()
11600                 | ' 
11600                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
11600     08 4E 85 F1 | 	sub	fp, #8
11604     1F 22 0E F2 | 	cmp	local03, #31 wz
11608     14 4E 05 A1 |  if_e	add	fp, #20
1160c     A7 24 02 AB |  if_e	rdlong	local04, fp
11610     14 4E 85 A1 |  if_e	sub	fp, #20
11614     12 23 02 A6 |  if_e	mov	local03, local04
11618     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1161c     28 00 90 5D |  if_ne	jmp	#LR__1380
11620     00 1E 06 F6 | 	mov	local01, #0
11624     A7 12 02 FB | 	rdlong	arg01, fp
11628     0C 4E 05 F1 | 	add	fp, #12
1162c     A7 14 02 FB | 	rdlong	arg02, fp
11630     0C 4E 85 F1 | 	sub	fp, #12
11634     3C AE B0 FD | 	call	#__system___string_cmp
11638     00 FA 55 F2 | 	cmps	result1, #0 wc
1163c     00 1E 26 C6 |  if_b	not	local01, #0
11640     A7 1E 62 FC | 	wrlong	local01, fp
11644     0C 04 90 FD | 	jmp	#LR__1393
11648                 | LR__1380
11648                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
11648     08 4E 05 F1 | 	add	fp, #8
1164c     A7 1E 02 FB | 	rdlong	local01, fp
11650     08 4E 85 F1 | 	sub	fp, #8
11654     1E 1E 0E F2 | 	cmp	local01, #30 wz
11658     14 4E 05 A1 |  if_e	add	fp, #20
1165c     A7 24 02 AB |  if_e	rdlong	local04, fp
11660     14 4E 85 A1 |  if_e	sub	fp, #20
11664     12 23 02 A6 |  if_e	mov	local03, local04
11668     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1166c     2C 00 90 5D |  if_ne	jmp	#LR__1381
11670     00 1E 06 F6 | 	mov	local01, #0
11674     A7 12 02 FB | 	rdlong	arg01, fp
11678     0C 4E 05 F1 | 	add	fp, #12
1167c     A7 14 02 FB | 	rdlong	arg02, fp
11680     0C 4E 85 F1 | 	sub	fp, #12
11684     01 16 06 F6 | 	mov	arg03, #1
11688     70 DD B0 FD | 	call	#__system___float_cmp
1168c     00 FA 55 F2 | 	cmps	result1, #0 wc
11690     00 1E 26 C6 |  if_b	not	local01, #0
11694     A7 1E 62 FC | 	wrlong	local01, fp
11698     B8 03 90 FD | 	jmp	#LR__1393
1169c                 | LR__1381
1169c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1169c     08 4E 05 F1 | 	add	fp, #8
116a0     A7 1E 02 FB | 	rdlong	local01, fp
116a4     08 4E 85 F1 | 	sub	fp, #8
116a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
116ac     14 4E 05 A1 |  if_e	add	fp, #20
116b0     A7 24 02 AB |  if_e	rdlong	local04, fp
116b4     14 4E 85 A1 |  if_e	sub	fp, #20
116b8     12 23 02 A6 |  if_e	mov	local03, local04
116bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
116c0     48 00 90 5D |  if_ne	jmp	#LR__1382
116c4     00 1E 06 F6 | 	mov	local01, #0
116c8     A7 20 02 FB | 	rdlong	local02, fp
116cc     0C 4E 05 F1 | 	add	fp, #12
116d0     A7 12 02 FB | 	rdlong	arg01, fp
116d4     0C 4E 85 F1 | 	sub	fp, #12
116d8     09 13 52 F6 | 	abs	arg01, arg01 wc
116dc     1F 26 C6 C9 |  if_b	decod	local05, #31
116e0     00 26 06 36 |  if_ae	mov	local05, #0
116e4     DC D4 B0 FD | 	call	#__system___float_fromuns
116e8     13 FB 61 F5 | 	xor	result1, local05
116ec     FD 14 02 F6 | 	mov	arg02, result1
116f0     10 13 02 F6 | 	mov	arg01, local02
116f4     01 16 06 F6 | 	mov	arg03, #1
116f8     00 DD B0 FD | 	call	#__system___float_cmp
116fc     00 FA 55 F2 | 	cmps	result1, #0 wc
11700     00 1E 26 C6 |  if_b	not	local01, #0
11704     A7 1E 62 FC | 	wrlong	local01, fp
11708     48 03 90 FD | 	jmp	#LR__1393
1170c                 | LR__1382
1170c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1170c     08 4E 05 F1 | 	add	fp, #8
11710     A7 1E 02 FB | 	rdlong	local01, fp
11714     08 4E 85 F1 | 	sub	fp, #8
11718     1E 1E 0E F2 | 	cmp	local01, #30 wz
1171c     14 4E 05 A1 |  if_e	add	fp, #20
11720     A7 24 02 AB |  if_e	rdlong	local04, fp
11724     14 4E 85 A1 |  if_e	sub	fp, #20
11728     12 23 02 A6 |  if_e	mov	local03, local04
1172c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11730     38 00 90 5D |  if_ne	jmp	#LR__1383
11734     00 1E 06 F6 | 	mov	local01, #0
11738     A7 20 02 FB | 	rdlong	local02, fp
1173c     0C 4E 05 F1 | 	add	fp, #12
11740     A7 12 02 FB | 	rdlong	arg01, fp
11744     0C 4E 85 F1 | 	sub	fp, #12
11748     78 D4 B0 FD | 	call	#__system___float_fromuns
1174c     FD 14 02 F6 | 	mov	arg02, result1
11750     10 13 02 F6 | 	mov	arg01, local02
11754     01 16 06 F6 | 	mov	arg03, #1
11758     A0 DC B0 FD | 	call	#__system___float_cmp
1175c     00 FA 55 F2 | 	cmps	result1, #0 wc
11760     00 1E 26 C6 |  if_b	not	local01, #0
11764     A7 1E 62 FC | 	wrlong	local01, fp
11768     E8 02 90 FD | 	jmp	#LR__1393
1176c                 | LR__1383
1176c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1176c     08 4E 05 F1 | 	add	fp, #8
11770     A7 1E 02 FB | 	rdlong	local01, fp
11774     08 4E 85 F1 | 	sub	fp, #8
11778     1C 1E 0E F2 | 	cmp	local01, #28 wz
1177c     14 4E 05 A1 |  if_e	add	fp, #20
11780     A7 24 02 AB |  if_e	rdlong	local04, fp
11784     14 4E 85 A1 |  if_e	sub	fp, #20
11788     12 23 02 A6 |  if_e	mov	local03, local04
1178c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11790     44 00 90 5D |  if_ne	jmp	#LR__1384
11794     00 1E 06 F6 | 	mov	local01, #0
11798     A7 12 02 FB | 	rdlong	arg01, fp
1179c     09 13 52 F6 | 	abs	arg01, arg01 wc
117a0     1F 26 C6 C9 |  if_b	decod	local05, #31
117a4     00 26 06 36 |  if_ae	mov	local05, #0
117a8     18 D4 B0 FD | 	call	#__system___float_fromuns
117ac     13 FB 61 F5 | 	xor	result1, local05
117b0     FD 12 02 F6 | 	mov	arg01, result1
117b4     0C 4E 05 F1 | 	add	fp, #12
117b8     A7 14 02 FB | 	rdlong	arg02, fp
117bc     0C 4E 85 F1 | 	sub	fp, #12
117c0     01 16 06 F6 | 	mov	arg03, #1
117c4     34 DC B0 FD | 	call	#__system___float_cmp
117c8     00 FA 55 F2 | 	cmps	result1, #0 wc
117cc     00 1E 26 C6 |  if_b	not	local01, #0
117d0     A7 1E 62 FC | 	wrlong	local01, fp
117d4     7C 02 90 FD | 	jmp	#LR__1393
117d8                 | LR__1384
117d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
117d8     08 4E 05 F1 | 	add	fp, #8
117dc     A7 1E 02 FB | 	rdlong	local01, fp
117e0     08 4E 85 F1 | 	sub	fp, #8
117e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
117e8     14 4E 05 A1 |  if_e	add	fp, #20
117ec     A7 24 02 AB |  if_e	rdlong	local04, fp
117f0     14 4E 85 A1 |  if_e	sub	fp, #20
117f4     12 23 02 A6 |  if_e	mov	local03, local04
117f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
117fc     20 00 90 5D |  if_ne	jmp	#LR__1385
11800     A7 20 02 FB | 	rdlong	local02, fp
11804     0C 4E 05 F1 | 	add	fp, #12
11808     A7 22 02 FB | 	rdlong	local03, fp
1180c     0C 4E 85 F1 | 	sub	fp, #12
11810     11 21 52 F2 | 	cmps	local02, local03 wc
11814     0F 1F A2 F1 | 	subx	local01, local01
11818     A7 1E 62 FC | 	wrlong	local01, fp
1181c     34 02 90 FD | 	jmp	#LR__1393
11820                 | LR__1385
11820                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
11820     08 4E 05 F1 | 	add	fp, #8
11824     A7 1E 02 FB | 	rdlong	local01, fp
11828     08 4E 85 F1 | 	sub	fp, #8
1182c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11830     14 4E 05 A1 |  if_e	add	fp, #20
11834     A7 24 02 AB |  if_e	rdlong	local04, fp
11838     14 4E 85 A1 |  if_e	sub	fp, #20
1183c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11840     20 00 90 5D |  if_ne	jmp	#LR__1386
11844     A7 20 02 FB | 	rdlong	local02, fp
11848     0C 4E 05 F1 | 	add	fp, #12
1184c     A7 22 02 FB | 	rdlong	local03, fp
11850     0C 4E 85 F1 | 	sub	fp, #12
11854     11 21 52 F2 | 	cmps	local02, local03 wc
11858     0F 1F A2 F1 | 	subx	local01, local01
1185c     A7 1E 62 FC | 	wrlong	local01, fp
11860     F0 01 90 FD | 	jmp	#LR__1393
11864                 | LR__1386
11864                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
11864     08 4E 05 F1 | 	add	fp, #8
11868     A7 1E 02 FB | 	rdlong	local01, fp
1186c     08 4E 85 F1 | 	sub	fp, #8
11870     1D 1E 0E F2 | 	cmp	local01, #29 wz
11874     14 4E 05 A1 |  if_e	add	fp, #20
11878     A7 22 02 AB |  if_e	rdlong	local03, fp
1187c     14 4E 85 A1 |  if_e	sub	fp, #20
11880     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11884     34 00 90 5D |  if_ne	jmp	#LR__1387
11888     00 1E 06 F6 | 	mov	local01, #0
1188c     A7 12 02 FB | 	rdlong	arg01, fp
11890     30 D3 B0 FD | 	call	#__system___float_fromuns
11894     FD 12 02 F6 | 	mov	arg01, result1
11898     0C 4E 05 F1 | 	add	fp, #12
1189c     A7 14 02 FB | 	rdlong	arg02, fp
118a0     0C 4E 85 F1 | 	sub	fp, #12
118a4     01 16 06 F6 | 	mov	arg03, #1
118a8     50 DB B0 FD | 	call	#__system___float_cmp
118ac     00 FA 55 F2 | 	cmps	result1, #0 wc
118b0     00 1E 26 C6 |  if_b	not	local01, #0
118b4     A7 1E 62 FC | 	wrlong	local01, fp
118b8     98 01 90 FD | 	jmp	#LR__1393
118bc                 | LR__1387
118bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
118bc     08 4E 05 F1 | 	add	fp, #8
118c0     A7 1E 02 FB | 	rdlong	local01, fp
118c4     08 4E 85 F1 | 	sub	fp, #8
118c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
118cc     14 4E 05 A1 |  if_e	add	fp, #20
118d0     A7 22 02 AB |  if_e	rdlong	local03, fp
118d4     14 4E 85 A1 |  if_e	sub	fp, #20
118d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
118dc     20 00 90 5D |  if_ne	jmp	#LR__1388
118e0     A7 20 02 FB | 	rdlong	local02, fp
118e4     0C 4E 05 F1 | 	add	fp, #12
118e8     A7 22 02 FB | 	rdlong	local03, fp
118ec     0C 4E 85 F1 | 	sub	fp, #12
118f0     11 21 52 F2 | 	cmps	local02, local03 wc
118f4     0F 1F A2 F1 | 	subx	local01, local01
118f8     A7 1E 62 FC | 	wrlong	local01, fp
118fc     54 01 90 FD | 	jmp	#LR__1393
11900                 | LR__1388
11900                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
11900     08 4E 05 F1 | 	add	fp, #8
11904     A7 1E 02 FB | 	rdlong	local01, fp
11908     08 4E 85 F1 | 	sub	fp, #8
1190c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11910     14 4E 05 A1 |  if_e	add	fp, #20
11914     A7 22 02 AB |  if_e	rdlong	local03, fp
11918     14 4E 85 A1 |  if_e	sub	fp, #20
1191c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11920     20 00 90 5D |  if_ne	jmp	#LR__1389
11924     A7 20 02 FB | 	rdlong	local02, fp
11928     0C 4E 05 F1 | 	add	fp, #12
1192c     A7 22 02 FB | 	rdlong	local03, fp
11930     0C 4E 85 F1 | 	sub	fp, #12
11934     11 21 12 F2 | 	cmp	local02, local03 wc
11938     0F 1F A2 F1 | 	subx	local01, local01
1193c     A7 1E 62 FC | 	wrlong	local01, fp
11940     10 01 90 FD | 	jmp	#LR__1393
11944                 | LR__1389
11944                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
11944     08 4E 05 F1 | 	add	fp, #8
11948     A7 1E 02 FB | 	rdlong	local01, fp
1194c     08 4E 85 F1 | 	sub	fp, #8
11950     2B 1E 0E F2 | 	cmp	local01, #43 wz
11954     14 4E 05 A1 |  if_e	add	fp, #20
11958     A7 22 02 AB |  if_e	rdlong	local03, fp
1195c     14 4E 85 A1 |  if_e	sub	fp, #20
11960     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11964     30 00 90 5D |  if_ne	jmp	#LR__1390
11968     00 1E 06 F6 | 	mov	local01, #0
1196c     A7 12 02 FB | 	rdlong	arg01, fp
11970     64 C7 BF FD | 	call	#_convertstring
11974     FD 12 02 F6 | 	mov	arg01, result1
11978     0C 4E 05 F1 | 	add	fp, #12
1197c     A7 14 02 FB | 	rdlong	arg02, fp
11980     0C 4E 85 F1 | 	sub	fp, #12
11984     EC AA B0 FD | 	call	#__system___string_cmp
11988     00 FA 55 F2 | 	cmps	result1, #0 wc
1198c     00 1E 26 C6 |  if_b	not	local01, #0
11990     A7 1E 62 FC | 	wrlong	local01, fp
11994     BC 00 90 FD | 	jmp	#LR__1393
11998                 | LR__1390
11998                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
11998     08 4E 05 F1 | 	add	fp, #8
1199c     A7 1E 02 FB | 	rdlong	local01, fp
119a0     08 4E 85 F1 | 	sub	fp, #8
119a4     1F 1E 0E F2 | 	cmp	local01, #31 wz
119a8     14 4E 05 A1 |  if_e	add	fp, #20
119ac     A7 22 02 AB |  if_e	rdlong	local03, fp
119b0     14 4E 85 A1 |  if_e	sub	fp, #20
119b4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
119b8     34 00 90 5D |  if_ne	jmp	#LR__1391
119bc     00 1E 06 F6 | 	mov	local01, #0
119c0     A7 20 02 FB | 	rdlong	local02, fp
119c4     0C 4E 05 F1 | 	add	fp, #12
119c8     A7 12 02 FB | 	rdlong	arg01, fp
119cc     0C 4E 85 F1 | 	sub	fp, #12
119d0     04 C7 BF FD | 	call	#_convertstring
119d4     FD 14 02 F6 | 	mov	arg02, result1
119d8     10 13 02 F6 | 	mov	arg01, local02
119dc     94 AA B0 FD | 	call	#__system___string_cmp
119e0     00 FA 55 F2 | 	cmps	result1, #0 wc
119e4     00 1E 26 C6 |  if_b	not	local01, #0
119e8     A7 1E 62 FC | 	wrlong	local01, fp
119ec     64 00 90 FD | 	jmp	#LR__1393
119f0                 | LR__1391
119f0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
119f0     08 4E 05 F1 | 	add	fp, #8
119f4     A7 1E 02 FB | 	rdlong	local01, fp
119f8     08 4E 85 F1 | 	sub	fp, #8
119fc     2B 1E 0E F2 | 	cmp	local01, #43 wz
11a00     14 4E 05 A1 |  if_e	add	fp, #20
11a04     A7 22 02 AB |  if_e	rdlong	local03, fp
11a08     14 4E 85 A1 |  if_e	sub	fp, #20
11a0c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11a10     3C 00 90 5D |  if_ne	jmp	#LR__1392
11a14     00 1E 06 F6 | 	mov	local01, #0
11a18     A7 12 02 FB | 	rdlong	arg01, fp
11a1c     B8 C6 BF FD | 	call	#_convertstring
11a20     FD 20 02 F6 | 	mov	local02, result1
11a24     0C 4E 05 F1 | 	add	fp, #12
11a28     A7 12 02 FB | 	rdlong	arg01, fp
11a2c     0C 4E 85 F1 | 	sub	fp, #12
11a30     A4 C6 BF FD | 	call	#_convertstring
11a34     FD 14 02 F6 | 	mov	arg02, result1
11a38     10 13 02 F6 | 	mov	arg01, local02
11a3c     34 AA B0 FD | 	call	#__system___string_cmp
11a40     00 FA 55 F2 | 	cmps	result1, #0 wc
11a44     00 1E 26 C6 |  if_b	not	local01, #0
11a48     A7 1E 62 FC | 	wrlong	local01, fp
11a4c     04 00 90 FD | 	jmp	#LR__1393
11a50                 | LR__1392
11a50     A7 00 68 FC | 	wrlong	#0, fp
11a54                 | LR__1393
11a54     08 4E 05 F1 | 	add	fp, #8
11a58     A7 38 68 FC | 	wrlong	#28, fp
11a5c     08 4E 85 F1 | 	sub	fp, #8
11a60     A7 12 02 F6 | 	mov	arg01, fp
11a64     C0 87 BF FD | 	call	#_push
11a68     A7 F0 03 F6 | 	mov	ptra, fp
11a6c     B2 00 A0 FD | 	call	#popregs_
11a70                 | _do_lt_ret
11a70     2D 00 64 FD | 	ret
11a74                 | 
11a74                 | ' 
11a74                 | ' sub do_ge
11a74                 | _do_ge
11a74     05 4A 05 F6 | 	mov	COUNT_, #5
11a78     A8 00 A0 FD | 	call	#pushregs_
11a7c     18 F0 07 F1 | 	add	ptra, #24
11a80     0C 87 BF FD | 	call	#_pop
11a84     FD 1E 02 F6 | 	mov	local01, result1
11a88     FE 20 02 F6 | 	mov	local02, result2
11a8c     FF 22 02 F6 | 	mov	local03, result3
11a90     0C 4E 05 F1 | 	add	fp, #12
11a94     A7 1E 62 FC | 	wrlong	local01, fp
11a98     04 4E 05 F1 | 	add	fp, #4
11a9c     A7 20 62 FC | 	wrlong	local02, fp
11aa0     04 4E 05 F1 | 	add	fp, #4
11aa4     A7 22 62 FC | 	wrlong	local03, fp
11aa8     14 4E 85 F1 | 	sub	fp, #20
11aac     E0 86 BF FD | 	call	#_pop
11ab0     FF 22 02 F6 | 	mov	local03, result3
11ab4     A7 FA 61 FC | 	wrlong	result1, fp
11ab8     04 4E 05 F1 | 	add	fp, #4
11abc     A7 FC 61 FC | 	wrlong	result2, fp
11ac0     04 4E 05 F1 | 	add	fp, #4
11ac4     A7 22 62 FC | 	wrlong	local03, fp
11ac8                 | ' t2=pop()
11ac8                 | ' t1=pop()
11ac8                 | ' 
11ac8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
11ac8     08 4E 85 F1 | 	sub	fp, #8
11acc     1F 22 0E F2 | 	cmp	local03, #31 wz
11ad0     14 4E 05 A1 |  if_e	add	fp, #20
11ad4     A7 24 02 AB |  if_e	rdlong	local04, fp
11ad8     14 4E 85 A1 |  if_e	sub	fp, #20
11adc     12 23 02 A6 |  if_e	mov	local03, local04
11ae0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11ae4     28 00 90 5D |  if_ne	jmp	#LR__1400
11ae8     00 1E 06 F6 | 	mov	local01, #0
11aec     A7 12 02 FB | 	rdlong	arg01, fp
11af0     0C 4E 05 F1 | 	add	fp, #12
11af4     A7 14 02 FB | 	rdlong	arg02, fp
11af8     0C 4E 85 F1 | 	sub	fp, #12
11afc     74 A9 B0 FD | 	call	#__system___string_cmp
11b00     00 FA 55 F2 | 	cmps	result1, #0 wc
11b04     00 1E 26 36 |  if_ae	not	local01, #0
11b08     A7 1E 62 FC | 	wrlong	local01, fp
11b0c     1C 04 90 FD | 	jmp	#LR__1413
11b10                 | LR__1400
11b10                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
11b10     08 4E 05 F1 | 	add	fp, #8
11b14     A7 1E 02 FB | 	rdlong	local01, fp
11b18     08 4E 85 F1 | 	sub	fp, #8
11b1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11b20     14 4E 05 A1 |  if_e	add	fp, #20
11b24     A7 24 02 AB |  if_e	rdlong	local04, fp
11b28     14 4E 85 A1 |  if_e	sub	fp, #20
11b2c     12 23 02 A6 |  if_e	mov	local03, local04
11b30     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11b34     2C 00 90 5D |  if_ne	jmp	#LR__1401
11b38     00 1E 06 F6 | 	mov	local01, #0
11b3c     A7 12 02 FB | 	rdlong	arg01, fp
11b40     0C 4E 05 F1 | 	add	fp, #12
11b44     A7 14 02 FB | 	rdlong	arg02, fp
11b48     0C 4E 85 F1 | 	sub	fp, #12
11b4c     01 16 66 F6 | 	neg	arg03, #1
11b50     A8 D8 B0 FD | 	call	#__system___float_cmp
11b54     00 FA 55 F2 | 	cmps	result1, #0 wc
11b58     00 1E 26 36 |  if_ae	not	local01, #0
11b5c     A7 1E 62 FC | 	wrlong	local01, fp
11b60     C8 03 90 FD | 	jmp	#LR__1413
11b64                 | LR__1401
11b64                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
11b64     08 4E 05 F1 | 	add	fp, #8
11b68     A7 1E 02 FB | 	rdlong	local01, fp
11b6c     08 4E 85 F1 | 	sub	fp, #8
11b70     1E 1E 0E F2 | 	cmp	local01, #30 wz
11b74     14 4E 05 A1 |  if_e	add	fp, #20
11b78     A7 24 02 AB |  if_e	rdlong	local04, fp
11b7c     14 4E 85 A1 |  if_e	sub	fp, #20
11b80     12 23 02 A6 |  if_e	mov	local03, local04
11b84     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b88     48 00 90 5D |  if_ne	jmp	#LR__1402
11b8c     00 1E 06 F6 | 	mov	local01, #0
11b90     A7 20 02 FB | 	rdlong	local02, fp
11b94     0C 4E 05 F1 | 	add	fp, #12
11b98     A7 12 02 FB | 	rdlong	arg01, fp
11b9c     0C 4E 85 F1 | 	sub	fp, #12
11ba0     09 13 52 F6 | 	abs	arg01, arg01 wc
11ba4     1F 26 C6 C9 |  if_b	decod	local05, #31
11ba8     00 26 06 36 |  if_ae	mov	local05, #0
11bac     14 D0 B0 FD | 	call	#__system___float_fromuns
11bb0     13 FB 61 F5 | 	xor	result1, local05
11bb4     FD 14 02 F6 | 	mov	arg02, result1
11bb8     10 13 02 F6 | 	mov	arg01, local02
11bbc     01 16 66 F6 | 	neg	arg03, #1
11bc0     38 D8 B0 FD | 	call	#__system___float_cmp
11bc4     00 FA 55 F2 | 	cmps	result1, #0 wc
11bc8     00 1E 26 36 |  if_ae	not	local01, #0
11bcc     A7 1E 62 FC | 	wrlong	local01, fp
11bd0     58 03 90 FD | 	jmp	#LR__1413
11bd4                 | LR__1402
11bd4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
11bd4     08 4E 05 F1 | 	add	fp, #8
11bd8     A7 1E 02 FB | 	rdlong	local01, fp
11bdc     08 4E 85 F1 | 	sub	fp, #8
11be0     1E 1E 0E F2 | 	cmp	local01, #30 wz
11be4     14 4E 05 A1 |  if_e	add	fp, #20
11be8     A7 24 02 AB |  if_e	rdlong	local04, fp
11bec     14 4E 85 A1 |  if_e	sub	fp, #20
11bf0     12 23 02 A6 |  if_e	mov	local03, local04
11bf4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11bf8     38 00 90 5D |  if_ne	jmp	#LR__1403
11bfc     00 1E 06 F6 | 	mov	local01, #0
11c00     A7 20 02 FB | 	rdlong	local02, fp
11c04     0C 4E 05 F1 | 	add	fp, #12
11c08     A7 12 02 FB | 	rdlong	arg01, fp
11c0c     0C 4E 85 F1 | 	sub	fp, #12
11c10     B0 CF B0 FD | 	call	#__system___float_fromuns
11c14     FD 14 02 F6 | 	mov	arg02, result1
11c18     10 13 02 F6 | 	mov	arg01, local02
11c1c     01 16 66 F6 | 	neg	arg03, #1
11c20     D8 D7 B0 FD | 	call	#__system___float_cmp
11c24     00 FA 55 F2 | 	cmps	result1, #0 wc
11c28     00 1E 26 36 |  if_ae	not	local01, #0
11c2c     A7 1E 62 FC | 	wrlong	local01, fp
11c30     F8 02 90 FD | 	jmp	#LR__1413
11c34                 | LR__1403
11c34                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
11c34     08 4E 05 F1 | 	add	fp, #8
11c38     A7 1E 02 FB | 	rdlong	local01, fp
11c3c     08 4E 85 F1 | 	sub	fp, #8
11c40     1C 1E 0E F2 | 	cmp	local01, #28 wz
11c44     14 4E 05 A1 |  if_e	add	fp, #20
11c48     A7 24 02 AB |  if_e	rdlong	local04, fp
11c4c     14 4E 85 A1 |  if_e	sub	fp, #20
11c50     12 23 02 A6 |  if_e	mov	local03, local04
11c54     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11c58     44 00 90 5D |  if_ne	jmp	#LR__1404
11c5c     00 1E 06 F6 | 	mov	local01, #0
11c60     A7 12 02 FB | 	rdlong	arg01, fp
11c64     09 13 52 F6 | 	abs	arg01, arg01 wc
11c68     1F 26 C6 C9 |  if_b	decod	local05, #31
11c6c     00 26 06 36 |  if_ae	mov	local05, #0
11c70     50 CF B0 FD | 	call	#__system___float_fromuns
11c74     13 FB 61 F5 | 	xor	result1, local05
11c78     FD 12 02 F6 | 	mov	arg01, result1
11c7c     0C 4E 05 F1 | 	add	fp, #12
11c80     A7 14 02 FB | 	rdlong	arg02, fp
11c84     0C 4E 85 F1 | 	sub	fp, #12
11c88     01 16 66 F6 | 	neg	arg03, #1
11c8c     6C D7 B0 FD | 	call	#__system___float_cmp
11c90     00 FA 55 F2 | 	cmps	result1, #0 wc
11c94     00 1E 26 36 |  if_ae	not	local01, #0
11c98     A7 1E 62 FC | 	wrlong	local01, fp
11c9c     8C 02 90 FD | 	jmp	#LR__1413
11ca0                 | LR__1404
11ca0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
11ca0     08 4E 05 F1 | 	add	fp, #8
11ca4     A7 1E 02 FB | 	rdlong	local01, fp
11ca8     08 4E 85 F1 | 	sub	fp, #8
11cac     1C 1E 0E F2 | 	cmp	local01, #28 wz
11cb0     14 4E 05 A1 |  if_e	add	fp, #20
11cb4     A7 24 02 AB |  if_e	rdlong	local04, fp
11cb8     14 4E 85 A1 |  if_e	sub	fp, #20
11cbc     12 23 02 A6 |  if_e	mov	local03, local04
11cc0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11cc4     24 00 90 5D |  if_ne	jmp	#LR__1405
11cc8     00 1E 06 F6 | 	mov	local01, #0
11ccc     A7 20 02 FB | 	rdlong	local02, fp
11cd0     0C 4E 05 F1 | 	add	fp, #12
11cd4     A7 22 02 FB | 	rdlong	local03, fp
11cd8     0C 4E 85 F1 | 	sub	fp, #12
11cdc     11 21 52 F2 | 	cmps	local02, local03 wc
11ce0     01 1E 66 36 |  if_ae	neg	local01, #1
11ce4     A7 1E 62 FC | 	wrlong	local01, fp
11ce8     40 02 90 FD | 	jmp	#LR__1413
11cec                 | LR__1405
11cec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
11cec     08 4E 05 F1 | 	add	fp, #8
11cf0     A7 1E 02 FB | 	rdlong	local01, fp
11cf4     08 4E 85 F1 | 	sub	fp, #8
11cf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11cfc     14 4E 05 A1 |  if_e	add	fp, #20
11d00     A7 24 02 AB |  if_e	rdlong	local04, fp
11d04     14 4E 85 A1 |  if_e	sub	fp, #20
11d08     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11d0c     24 00 90 5D |  if_ne	jmp	#LR__1406
11d10     00 1E 06 F6 | 	mov	local01, #0
11d14     A7 20 02 FB | 	rdlong	local02, fp
11d18     0C 4E 05 F1 | 	add	fp, #12
11d1c     A7 22 02 FB | 	rdlong	local03, fp
11d20     0C 4E 85 F1 | 	sub	fp, #12
11d24     11 21 52 F2 | 	cmps	local02, local03 wc
11d28     01 1E 66 36 |  if_ae	neg	local01, #1
11d2c     A7 1E 62 FC | 	wrlong	local01, fp
11d30     F8 01 90 FD | 	jmp	#LR__1413
11d34                 | LR__1406
11d34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
11d34     08 4E 05 F1 | 	add	fp, #8
11d38     A7 1E 02 FB | 	rdlong	local01, fp
11d3c     08 4E 85 F1 | 	sub	fp, #8
11d40     1D 1E 0E F2 | 	cmp	local01, #29 wz
11d44     14 4E 05 A1 |  if_e	add	fp, #20
11d48     A7 22 02 AB |  if_e	rdlong	local03, fp
11d4c     14 4E 85 A1 |  if_e	sub	fp, #20
11d50     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11d54     34 00 90 5D |  if_ne	jmp	#LR__1407
11d58     00 1E 06 F6 | 	mov	local01, #0
11d5c     A7 12 02 FB | 	rdlong	arg01, fp
11d60     60 CE B0 FD | 	call	#__system___float_fromuns
11d64     FD 12 02 F6 | 	mov	arg01, result1
11d68     0C 4E 05 F1 | 	add	fp, #12
11d6c     A7 14 02 FB | 	rdlong	arg02, fp
11d70     0C 4E 85 F1 | 	sub	fp, #12
11d74     01 16 66 F6 | 	neg	arg03, #1
11d78     80 D6 B0 FD | 	call	#__system___float_cmp
11d7c     00 FA 55 F2 | 	cmps	result1, #0 wc
11d80     00 1E 26 36 |  if_ae	not	local01, #0
11d84     A7 1E 62 FC | 	wrlong	local01, fp
11d88     A0 01 90 FD | 	jmp	#LR__1413
11d8c                 | LR__1407
11d8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
11d8c     08 4E 05 F1 | 	add	fp, #8
11d90     A7 1E 02 FB | 	rdlong	local01, fp
11d94     08 4E 85 F1 | 	sub	fp, #8
11d98     1D 1E 0E F2 | 	cmp	local01, #29 wz
11d9c     14 4E 05 A1 |  if_e	add	fp, #20
11da0     A7 22 02 AB |  if_e	rdlong	local03, fp
11da4     14 4E 85 A1 |  if_e	sub	fp, #20
11da8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11dac     24 00 90 5D |  if_ne	jmp	#LR__1408
11db0     00 1E 06 F6 | 	mov	local01, #0
11db4     A7 20 02 FB | 	rdlong	local02, fp
11db8     0C 4E 05 F1 | 	add	fp, #12
11dbc     A7 22 02 FB | 	rdlong	local03, fp
11dc0     0C 4E 85 F1 | 	sub	fp, #12
11dc4     11 21 52 F2 | 	cmps	local02, local03 wc
11dc8     01 1E 66 36 |  if_ae	neg	local01, #1
11dcc     A7 1E 62 FC | 	wrlong	local01, fp
11dd0     58 01 90 FD | 	jmp	#LR__1413
11dd4                 | LR__1408
11dd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
11dd4     08 4E 05 F1 | 	add	fp, #8
11dd8     A7 1E 02 FB | 	rdlong	local01, fp
11ddc     08 4E 85 F1 | 	sub	fp, #8
11de0     1D 1E 0E F2 | 	cmp	local01, #29 wz
11de4     14 4E 05 A1 |  if_e	add	fp, #20
11de8     A7 22 02 AB |  if_e	rdlong	local03, fp
11dec     14 4E 85 A1 |  if_e	sub	fp, #20
11df0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11df4     24 00 90 5D |  if_ne	jmp	#LR__1409
11df8     00 1E 06 F6 | 	mov	local01, #0
11dfc     A7 20 02 FB | 	rdlong	local02, fp
11e00     0C 4E 05 F1 | 	add	fp, #12
11e04     A7 22 02 FB | 	rdlong	local03, fp
11e08     0C 4E 85 F1 | 	sub	fp, #12
11e0c     11 21 12 F2 | 	cmp	local02, local03 wc
11e10     01 1E 66 36 |  if_ae	neg	local01, #1
11e14     A7 1E 62 FC | 	wrlong	local01, fp
11e18     10 01 90 FD | 	jmp	#LR__1413
11e1c                 | LR__1409
11e1c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
11e1c     08 4E 05 F1 | 	add	fp, #8
11e20     A7 1E 02 FB | 	rdlong	local01, fp
11e24     08 4E 85 F1 | 	sub	fp, #8
11e28     2B 1E 0E F2 | 	cmp	local01, #43 wz
11e2c     14 4E 05 A1 |  if_e	add	fp, #20
11e30     A7 22 02 AB |  if_e	rdlong	local03, fp
11e34     14 4E 85 A1 |  if_e	sub	fp, #20
11e38     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11e3c     30 00 90 5D |  if_ne	jmp	#LR__1410
11e40     00 1E 06 F6 | 	mov	local01, #0
11e44     A7 12 02 FB | 	rdlong	arg01, fp
11e48     8C C2 BF FD | 	call	#_convertstring
11e4c     FD 12 02 F6 | 	mov	arg01, result1
11e50     0C 4E 05 F1 | 	add	fp, #12
11e54     A7 14 02 FB | 	rdlong	arg02, fp
11e58     0C 4E 85 F1 | 	sub	fp, #12
11e5c     14 A6 B0 FD | 	call	#__system___string_cmp
11e60     00 FA 55 F2 | 	cmps	result1, #0 wc
11e64     00 1E 26 36 |  if_ae	not	local01, #0
11e68     A7 1E 62 FC | 	wrlong	local01, fp
11e6c     BC 00 90 FD | 	jmp	#LR__1413
11e70                 | LR__1410
11e70                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
11e70     08 4E 05 F1 | 	add	fp, #8
11e74     A7 1E 02 FB | 	rdlong	local01, fp
11e78     08 4E 85 F1 | 	sub	fp, #8
11e7c     1F 1E 0E F2 | 	cmp	local01, #31 wz
11e80     14 4E 05 A1 |  if_e	add	fp, #20
11e84     A7 22 02 AB |  if_e	rdlong	local03, fp
11e88     14 4E 85 A1 |  if_e	sub	fp, #20
11e8c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11e90     34 00 90 5D |  if_ne	jmp	#LR__1411
11e94     00 1E 06 F6 | 	mov	local01, #0
11e98     A7 20 02 FB | 	rdlong	local02, fp
11e9c     0C 4E 05 F1 | 	add	fp, #12
11ea0     A7 12 02 FB | 	rdlong	arg01, fp
11ea4     0C 4E 85 F1 | 	sub	fp, #12
11ea8     2C C2 BF FD | 	call	#_convertstring
11eac     FD 14 02 F6 | 	mov	arg02, result1
11eb0     10 13 02 F6 | 	mov	arg01, local02
11eb4     BC A5 B0 FD | 	call	#__system___string_cmp
11eb8     00 FA 55 F2 | 	cmps	result1, #0 wc
11ebc     00 1E 26 36 |  if_ae	not	local01, #0
11ec0     A7 1E 62 FC | 	wrlong	local01, fp
11ec4     64 00 90 FD | 	jmp	#LR__1413
11ec8                 | LR__1411
11ec8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
11ec8     08 4E 05 F1 | 	add	fp, #8
11ecc     A7 1E 02 FB | 	rdlong	local01, fp
11ed0     08 4E 85 F1 | 	sub	fp, #8
11ed4     2B 1E 0E F2 | 	cmp	local01, #43 wz
11ed8     14 4E 05 A1 |  if_e	add	fp, #20
11edc     A7 22 02 AB |  if_e	rdlong	local03, fp
11ee0     14 4E 85 A1 |  if_e	sub	fp, #20
11ee4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11ee8     3C 00 90 5D |  if_ne	jmp	#LR__1412
11eec     00 1E 06 F6 | 	mov	local01, #0
11ef0     A7 12 02 FB | 	rdlong	arg01, fp
11ef4     E0 C1 BF FD | 	call	#_convertstring
11ef8     FD 20 02 F6 | 	mov	local02, result1
11efc     0C 4E 05 F1 | 	add	fp, #12
11f00     A7 12 02 FB | 	rdlong	arg01, fp
11f04     0C 4E 85 F1 | 	sub	fp, #12
11f08     CC C1 BF FD | 	call	#_convertstring
11f0c     FD 14 02 F6 | 	mov	arg02, result1
11f10     10 13 02 F6 | 	mov	arg01, local02
11f14     5C A5 B0 FD | 	call	#__system___string_cmp
11f18     00 FA 55 F2 | 	cmps	result1, #0 wc
11f1c     00 1E 26 36 |  if_ae	not	local01, #0
11f20     A7 1E 62 FC | 	wrlong	local01, fp
11f24     04 00 90 FD | 	jmp	#LR__1413
11f28                 | LR__1412
11f28     A7 00 68 FC | 	wrlong	#0, fp
11f2c                 | LR__1413
11f2c     08 4E 05 F1 | 	add	fp, #8
11f30     A7 38 68 FC | 	wrlong	#28, fp
11f34     08 4E 85 F1 | 	sub	fp, #8
11f38     A7 12 02 F6 | 	mov	arg01, fp
11f3c     E8 82 BF FD | 	call	#_push
11f40     A7 F0 03 F6 | 	mov	ptra, fp
11f44     B2 00 A0 FD | 	call	#popregs_
11f48                 | _do_ge_ret
11f48     2D 00 64 FD | 	ret
11f4c                 | 
11f4c                 | ' 
11f4c                 | ' sub do_le
11f4c                 | _do_le
11f4c     05 4A 05 F6 | 	mov	COUNT_, #5
11f50     A8 00 A0 FD | 	call	#pushregs_
11f54     18 F0 07 F1 | 	add	ptra, #24
11f58     34 82 BF FD | 	call	#_pop
11f5c     FD 1E 02 F6 | 	mov	local01, result1
11f60     FE 20 02 F6 | 	mov	local02, result2
11f64     FF 22 02 F6 | 	mov	local03, result3
11f68     0C 4E 05 F1 | 	add	fp, #12
11f6c     A7 1E 62 FC | 	wrlong	local01, fp
11f70     04 4E 05 F1 | 	add	fp, #4
11f74     A7 20 62 FC | 	wrlong	local02, fp
11f78     04 4E 05 F1 | 	add	fp, #4
11f7c     A7 22 62 FC | 	wrlong	local03, fp
11f80     14 4E 85 F1 | 	sub	fp, #20
11f84     08 82 BF FD | 	call	#_pop
11f88     FF 22 02 F6 | 	mov	local03, result3
11f8c     A7 FA 61 FC | 	wrlong	result1, fp
11f90     04 4E 05 F1 | 	add	fp, #4
11f94     A7 FC 61 FC | 	wrlong	result2, fp
11f98     04 4E 05 F1 | 	add	fp, #4
11f9c     A7 22 62 FC | 	wrlong	local03, fp
11fa0                 | ' t2=pop()
11fa0                 | ' t1=pop()
11fa0                 | ' 
11fa0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
11fa0     08 4E 85 F1 | 	sub	fp, #8
11fa4     1F 22 0E F2 | 	cmp	local03, #31 wz
11fa8     14 4E 05 A1 |  if_e	add	fp, #20
11fac     A7 24 02 AB |  if_e	rdlong	local04, fp
11fb0     14 4E 85 A1 |  if_e	sub	fp, #20
11fb4     12 23 02 A6 |  if_e	mov	local03, local04
11fb8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11fbc     28 00 90 5D |  if_ne	jmp	#LR__1420
11fc0     00 1E 06 F6 | 	mov	local01, #0
11fc4     A7 12 02 FB | 	rdlong	arg01, fp
11fc8     0C 4E 05 F1 | 	add	fp, #12
11fcc     A7 14 02 FB | 	rdlong	arg02, fp
11fd0     0C 4E 85 F1 | 	sub	fp, #12
11fd4     9C A4 B0 FD | 	call	#__system___string_cmp
11fd8     01 FA 55 F2 | 	cmps	result1, #1 wc
11fdc     00 1E 26 C6 |  if_b	not	local01, #0
11fe0     A7 1E 62 FC | 	wrlong	local01, fp
11fe4     1C 04 90 FD | 	jmp	#LR__1433
11fe8                 | LR__1420
11fe8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
11fe8     08 4E 05 F1 | 	add	fp, #8
11fec     A7 1E 02 FB | 	rdlong	local01, fp
11ff0     08 4E 85 F1 | 	sub	fp, #8
11ff4     1E 1E 0E F2 | 	cmp	local01, #30 wz
11ff8     14 4E 05 A1 |  if_e	add	fp, #20
11ffc     A7 24 02 AB |  if_e	rdlong	local04, fp
12000     14 4E 85 A1 |  if_e	sub	fp, #20
12004     12 23 02 A6 |  if_e	mov	local03, local04
12008     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1200c     2C 00 90 5D |  if_ne	jmp	#LR__1421
12010     00 1E 06 F6 | 	mov	local01, #0
12014     A7 12 02 FB | 	rdlong	arg01, fp
12018     0C 4E 05 F1 | 	add	fp, #12
1201c     A7 14 02 FB | 	rdlong	arg02, fp
12020     0C 4E 85 F1 | 	sub	fp, #12
12024     01 16 06 F6 | 	mov	arg03, #1
12028     D0 D3 B0 FD | 	call	#__system___float_cmp
1202c     01 FA 55 F2 | 	cmps	result1, #1 wc
12030     00 1E 26 C6 |  if_b	not	local01, #0
12034     A7 1E 62 FC | 	wrlong	local01, fp
12038     C8 03 90 FD | 	jmp	#LR__1433
1203c                 | LR__1421
1203c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1203c     08 4E 05 F1 | 	add	fp, #8
12040     A7 1E 02 FB | 	rdlong	local01, fp
12044     08 4E 85 F1 | 	sub	fp, #8
12048     1E 1E 0E F2 | 	cmp	local01, #30 wz
1204c     14 4E 05 A1 |  if_e	add	fp, #20
12050     A7 24 02 AB |  if_e	rdlong	local04, fp
12054     14 4E 85 A1 |  if_e	sub	fp, #20
12058     12 23 02 A6 |  if_e	mov	local03, local04
1205c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12060     48 00 90 5D |  if_ne	jmp	#LR__1422
12064     00 1E 06 F6 | 	mov	local01, #0
12068     A7 20 02 FB | 	rdlong	local02, fp
1206c     0C 4E 05 F1 | 	add	fp, #12
12070     A7 12 02 FB | 	rdlong	arg01, fp
12074     0C 4E 85 F1 | 	sub	fp, #12
12078     09 13 52 F6 | 	abs	arg01, arg01 wc
1207c     1F 26 C6 C9 |  if_b	decod	local05, #31
12080     00 26 06 36 |  if_ae	mov	local05, #0
12084     3C CB B0 FD | 	call	#__system___float_fromuns
12088     13 FB 61 F5 | 	xor	result1, local05
1208c     FD 14 02 F6 | 	mov	arg02, result1
12090     10 13 02 F6 | 	mov	arg01, local02
12094     01 16 06 F6 | 	mov	arg03, #1
12098     60 D3 B0 FD | 	call	#__system___float_cmp
1209c     01 FA 55 F2 | 	cmps	result1, #1 wc
120a0     00 1E 26 C6 |  if_b	not	local01, #0
120a4     A7 1E 62 FC | 	wrlong	local01, fp
120a8     58 03 90 FD | 	jmp	#LR__1433
120ac                 | LR__1422
120ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
120ac     08 4E 05 F1 | 	add	fp, #8
120b0     A7 1E 02 FB | 	rdlong	local01, fp
120b4     08 4E 85 F1 | 	sub	fp, #8
120b8     1E 1E 0E F2 | 	cmp	local01, #30 wz
120bc     14 4E 05 A1 |  if_e	add	fp, #20
120c0     A7 24 02 AB |  if_e	rdlong	local04, fp
120c4     14 4E 85 A1 |  if_e	sub	fp, #20
120c8     12 23 02 A6 |  if_e	mov	local03, local04
120cc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
120d0     38 00 90 5D |  if_ne	jmp	#LR__1423
120d4     00 1E 06 F6 | 	mov	local01, #0
120d8     A7 20 02 FB | 	rdlong	local02, fp
120dc     0C 4E 05 F1 | 	add	fp, #12
120e0     A7 12 02 FB | 	rdlong	arg01, fp
120e4     0C 4E 85 F1 | 	sub	fp, #12
120e8     D8 CA B0 FD | 	call	#__system___float_fromuns
120ec     FD 14 02 F6 | 	mov	arg02, result1
120f0     10 13 02 F6 | 	mov	arg01, local02
120f4     01 16 06 F6 | 	mov	arg03, #1
120f8     00 D3 B0 FD | 	call	#__system___float_cmp
120fc     01 FA 55 F2 | 	cmps	result1, #1 wc
12100     00 1E 26 C6 |  if_b	not	local01, #0
12104     A7 1E 62 FC | 	wrlong	local01, fp
12108     F8 02 90 FD | 	jmp	#LR__1433
1210c                 | LR__1423
1210c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1210c     08 4E 05 F1 | 	add	fp, #8
12110     A7 1E 02 FB | 	rdlong	local01, fp
12114     08 4E 85 F1 | 	sub	fp, #8
12118     1C 1E 0E F2 | 	cmp	local01, #28 wz
1211c     14 4E 05 A1 |  if_e	add	fp, #20
12120     A7 24 02 AB |  if_e	rdlong	local04, fp
12124     14 4E 85 A1 |  if_e	sub	fp, #20
12128     12 23 02 A6 |  if_e	mov	local03, local04
1212c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12130     44 00 90 5D |  if_ne	jmp	#LR__1424
12134     00 1E 06 F6 | 	mov	local01, #0
12138     A7 12 02 FB | 	rdlong	arg01, fp
1213c     09 13 52 F6 | 	abs	arg01, arg01 wc
12140     1F 26 C6 C9 |  if_b	decod	local05, #31
12144     00 26 06 36 |  if_ae	mov	local05, #0
12148     78 CA B0 FD | 	call	#__system___float_fromuns
1214c     13 FB 61 F5 | 	xor	result1, local05
12150     FD 12 02 F6 | 	mov	arg01, result1
12154     0C 4E 05 F1 | 	add	fp, #12
12158     A7 14 02 FB | 	rdlong	arg02, fp
1215c     0C 4E 85 F1 | 	sub	fp, #12
12160     01 16 06 F6 | 	mov	arg03, #1
12164     94 D2 B0 FD | 	call	#__system___float_cmp
12168     01 FA 55 F2 | 	cmps	result1, #1 wc
1216c     00 1E 26 C6 |  if_b	not	local01, #0
12170     A7 1E 62 FC | 	wrlong	local01, fp
12174     8C 02 90 FD | 	jmp	#LR__1433
12178                 | LR__1424
12178                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
12178     08 4E 05 F1 | 	add	fp, #8
1217c     A7 1E 02 FB | 	rdlong	local01, fp
12180     08 4E 85 F1 | 	sub	fp, #8
12184     1C 1E 0E F2 | 	cmp	local01, #28 wz
12188     14 4E 05 A1 |  if_e	add	fp, #20
1218c     A7 24 02 AB |  if_e	rdlong	local04, fp
12190     14 4E 85 A1 |  if_e	sub	fp, #20
12194     12 23 02 A6 |  if_e	mov	local03, local04
12198     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1219c     24 00 90 5D |  if_ne	jmp	#LR__1425
121a0     00 1E 06 F6 | 	mov	local01, #0
121a4     A7 20 02 FB | 	rdlong	local02, fp
121a8     0C 4E 05 F1 | 	add	fp, #12
121ac     A7 22 02 FB | 	rdlong	local03, fp
121b0     0C 4E 85 F1 | 	sub	fp, #12
121b4     11 21 5A F2 | 	cmps	local02, local03 wcz
121b8     01 1E 66 E6 |  if_be	neg	local01, #1
121bc     A7 1E 62 FC | 	wrlong	local01, fp
121c0     40 02 90 FD | 	jmp	#LR__1433
121c4                 | LR__1425
121c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
121c4     08 4E 05 F1 | 	add	fp, #8
121c8     A7 1E 02 FB | 	rdlong	local01, fp
121cc     08 4E 85 F1 | 	sub	fp, #8
121d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
121d4     14 4E 05 A1 |  if_e	add	fp, #20
121d8     A7 24 02 AB |  if_e	rdlong	local04, fp
121dc     14 4E 85 A1 |  if_e	sub	fp, #20
121e0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
121e4     24 00 90 5D |  if_ne	jmp	#LR__1426
121e8     00 1E 06 F6 | 	mov	local01, #0
121ec     A7 20 02 FB | 	rdlong	local02, fp
121f0     0C 4E 05 F1 | 	add	fp, #12
121f4     A7 22 02 FB | 	rdlong	local03, fp
121f8     0C 4E 85 F1 | 	sub	fp, #12
121fc     11 21 5A F2 | 	cmps	local02, local03 wcz
12200     01 1E 66 E6 |  if_be	neg	local01, #1
12204     A7 1E 62 FC | 	wrlong	local01, fp
12208     F8 01 90 FD | 	jmp	#LR__1433
1220c                 | LR__1426
1220c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1220c     08 4E 05 F1 | 	add	fp, #8
12210     A7 1E 02 FB | 	rdlong	local01, fp
12214     08 4E 85 F1 | 	sub	fp, #8
12218     1D 1E 0E F2 | 	cmp	local01, #29 wz
1221c     14 4E 05 A1 |  if_e	add	fp, #20
12220     A7 22 02 AB |  if_e	rdlong	local03, fp
12224     14 4E 85 A1 |  if_e	sub	fp, #20
12228     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1222c     34 00 90 5D |  if_ne	jmp	#LR__1427
12230     00 1E 06 F6 | 	mov	local01, #0
12234     A7 12 02 FB | 	rdlong	arg01, fp
12238     88 C9 B0 FD | 	call	#__system___float_fromuns
1223c     FD 12 02 F6 | 	mov	arg01, result1
12240     0C 4E 05 F1 | 	add	fp, #12
12244     A7 14 02 FB | 	rdlong	arg02, fp
12248     0C 4E 85 F1 | 	sub	fp, #12
1224c     01 16 06 F6 | 	mov	arg03, #1
12250     A8 D1 B0 FD | 	call	#__system___float_cmp
12254     01 FA 55 F2 | 	cmps	result1, #1 wc
12258     00 1E 26 C6 |  if_b	not	local01, #0
1225c     A7 1E 62 FC | 	wrlong	local01, fp
12260     A0 01 90 FD | 	jmp	#LR__1433
12264                 | LR__1427
12264                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
12264     08 4E 05 F1 | 	add	fp, #8
12268     A7 1E 02 FB | 	rdlong	local01, fp
1226c     08 4E 85 F1 | 	sub	fp, #8
12270     1D 1E 0E F2 | 	cmp	local01, #29 wz
12274     14 4E 05 A1 |  if_e	add	fp, #20
12278     A7 22 02 AB |  if_e	rdlong	local03, fp
1227c     14 4E 85 A1 |  if_e	sub	fp, #20
12280     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12284     24 00 90 5D |  if_ne	jmp	#LR__1428
12288     00 1E 06 F6 | 	mov	local01, #0
1228c     A7 20 02 FB | 	rdlong	local02, fp
12290     0C 4E 05 F1 | 	add	fp, #12
12294     A7 22 02 FB | 	rdlong	local03, fp
12298     0C 4E 85 F1 | 	sub	fp, #12
1229c     11 21 5A F2 | 	cmps	local02, local03 wcz
122a0     01 1E 66 E6 |  if_be	neg	local01, #1
122a4     A7 1E 62 FC | 	wrlong	local01, fp
122a8     58 01 90 FD | 	jmp	#LR__1433
122ac                 | LR__1428
122ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
122ac     08 4E 05 F1 | 	add	fp, #8
122b0     A7 1E 02 FB | 	rdlong	local01, fp
122b4     08 4E 85 F1 | 	sub	fp, #8
122b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
122bc     14 4E 05 A1 |  if_e	add	fp, #20
122c0     A7 22 02 AB |  if_e	rdlong	local03, fp
122c4     14 4E 85 A1 |  if_e	sub	fp, #20
122c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
122cc     24 00 90 5D |  if_ne	jmp	#LR__1429
122d0     00 1E 06 F6 | 	mov	local01, #0
122d4     A7 20 02 FB | 	rdlong	local02, fp
122d8     0C 4E 05 F1 | 	add	fp, #12
122dc     A7 22 02 FB | 	rdlong	local03, fp
122e0     0C 4E 85 F1 | 	sub	fp, #12
122e4     11 21 1A F2 | 	cmp	local02, local03 wcz
122e8     01 1E 66 E6 |  if_be	neg	local01, #1
122ec     A7 1E 62 FC | 	wrlong	local01, fp
122f0     10 01 90 FD | 	jmp	#LR__1433
122f4                 | LR__1429
122f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
122f4     08 4E 05 F1 | 	add	fp, #8
122f8     A7 1E 02 FB | 	rdlong	local01, fp
122fc     08 4E 85 F1 | 	sub	fp, #8
12300     2B 1E 0E F2 | 	cmp	local01, #43 wz
12304     14 4E 05 A1 |  if_e	add	fp, #20
12308     A7 22 02 AB |  if_e	rdlong	local03, fp
1230c     14 4E 85 A1 |  if_e	sub	fp, #20
12310     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12314     30 00 90 5D |  if_ne	jmp	#LR__1430
12318     00 1E 06 F6 | 	mov	local01, #0
1231c     A7 12 02 FB | 	rdlong	arg01, fp
12320     B4 BD BF FD | 	call	#_convertstring
12324     FD 12 02 F6 | 	mov	arg01, result1
12328     0C 4E 05 F1 | 	add	fp, #12
1232c     A7 14 02 FB | 	rdlong	arg02, fp
12330     0C 4E 85 F1 | 	sub	fp, #12
12334     3C A1 B0 FD | 	call	#__system___string_cmp
12338     01 FA 55 F2 | 	cmps	result1, #1 wc
1233c     00 1E 26 C6 |  if_b	not	local01, #0
12340     A7 1E 62 FC | 	wrlong	local01, fp
12344     BC 00 90 FD | 	jmp	#LR__1433
12348                 | LR__1430
12348                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
12348     08 4E 05 F1 | 	add	fp, #8
1234c     A7 1E 02 FB | 	rdlong	local01, fp
12350     08 4E 85 F1 | 	sub	fp, #8
12354     1F 1E 0E F2 | 	cmp	local01, #31 wz
12358     14 4E 05 A1 |  if_e	add	fp, #20
1235c     A7 22 02 AB |  if_e	rdlong	local03, fp
12360     14 4E 85 A1 |  if_e	sub	fp, #20
12364     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12368     34 00 90 5D |  if_ne	jmp	#LR__1431
1236c     00 1E 06 F6 | 	mov	local01, #0
12370     A7 20 02 FB | 	rdlong	local02, fp
12374     0C 4E 05 F1 | 	add	fp, #12
12378     A7 12 02 FB | 	rdlong	arg01, fp
1237c     0C 4E 85 F1 | 	sub	fp, #12
12380     54 BD BF FD | 	call	#_convertstring
12384     FD 14 02 F6 | 	mov	arg02, result1
12388     10 13 02 F6 | 	mov	arg01, local02
1238c     E4 A0 B0 FD | 	call	#__system___string_cmp
12390     01 FA 55 F2 | 	cmps	result1, #1 wc
12394     00 1E 26 C6 |  if_b	not	local01, #0
12398     A7 1E 62 FC | 	wrlong	local01, fp
1239c     64 00 90 FD | 	jmp	#LR__1433
123a0                 | LR__1431
123a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
123a0     08 4E 05 F1 | 	add	fp, #8
123a4     A7 1E 02 FB | 	rdlong	local01, fp
123a8     08 4E 85 F1 | 	sub	fp, #8
123ac     2B 1E 0E F2 | 	cmp	local01, #43 wz
123b0     14 4E 05 A1 |  if_e	add	fp, #20
123b4     A7 22 02 AB |  if_e	rdlong	local03, fp
123b8     14 4E 85 A1 |  if_e	sub	fp, #20
123bc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
123c0     3C 00 90 5D |  if_ne	jmp	#LR__1432
123c4     00 1E 06 F6 | 	mov	local01, #0
123c8     A7 12 02 FB | 	rdlong	arg01, fp
123cc     08 BD BF FD | 	call	#_convertstring
123d0     FD 20 02 F6 | 	mov	local02, result1
123d4     0C 4E 05 F1 | 	add	fp, #12
123d8     A7 12 02 FB | 	rdlong	arg01, fp
123dc     0C 4E 85 F1 | 	sub	fp, #12
123e0     F4 BC BF FD | 	call	#_convertstring
123e4     FD 14 02 F6 | 	mov	arg02, result1
123e8     10 13 02 F6 | 	mov	arg01, local02
123ec     84 A0 B0 FD | 	call	#__system___string_cmp
123f0     01 FA 55 F2 | 	cmps	result1, #1 wc
123f4     00 1E 26 C6 |  if_b	not	local01, #0
123f8     A7 1E 62 FC | 	wrlong	local01, fp
123fc     04 00 90 FD | 	jmp	#LR__1433
12400                 | LR__1432
12400     A7 00 68 FC | 	wrlong	#0, fp
12404                 | LR__1433
12404     08 4E 05 F1 | 	add	fp, #8
12408     A7 38 68 FC | 	wrlong	#28, fp
1240c     08 4E 85 F1 | 	sub	fp, #8
12410     A7 12 02 F6 | 	mov	arg01, fp
12414     10 7E BF FD | 	call	#_push
12418     A7 F0 03 F6 | 	mov	ptra, fp
1241c     B2 00 A0 FD | 	call	#popregs_
12420                 | _do_le_ret
12420     2D 00 64 FD | 	ret
12424                 | 
12424                 | ' 
12424                 | ' 
12424                 | ' sub do_ne
12424                 | _do_ne
12424     05 4A 05 F6 | 	mov	COUNT_, #5
12428     A8 00 A0 FD | 	call	#pushregs_
1242c     18 F0 07 F1 | 	add	ptra, #24
12430     5C 7D BF FD | 	call	#_pop
12434     FD 1E 02 F6 | 	mov	local01, result1
12438     FE 20 02 F6 | 	mov	local02, result2
1243c     FF 22 02 F6 | 	mov	local03, result3
12440     0C 4E 05 F1 | 	add	fp, #12
12444     A7 1E 62 FC | 	wrlong	local01, fp
12448     04 4E 05 F1 | 	add	fp, #4
1244c     A7 20 62 FC | 	wrlong	local02, fp
12450     04 4E 05 F1 | 	add	fp, #4
12454     A7 22 62 FC | 	wrlong	local03, fp
12458     14 4E 85 F1 | 	sub	fp, #20
1245c     30 7D BF FD | 	call	#_pop
12460     FF 22 02 F6 | 	mov	local03, result3
12464     A7 FA 61 FC | 	wrlong	result1, fp
12468     04 4E 05 F1 | 	add	fp, #4
1246c     A7 FC 61 FC | 	wrlong	result2, fp
12470     04 4E 05 F1 | 	add	fp, #4
12474     A7 22 62 FC | 	wrlong	local03, fp
12478                 | ' t2=pop()
12478                 | ' t1=pop()
12478                 | ' 
12478                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
12478     08 4E 85 F1 | 	sub	fp, #8
1247c     1F 22 0E F2 | 	cmp	local03, #31 wz
12480     14 4E 05 A1 |  if_e	add	fp, #20
12484     A7 24 02 AB |  if_e	rdlong	local04, fp
12488     14 4E 85 A1 |  if_e	sub	fp, #20
1248c     12 23 02 A6 |  if_e	mov	local03, local04
12490     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12494     28 00 90 5D |  if_ne	jmp	#LR__1440
12498     00 1E 06 F6 | 	mov	local01, #0
1249c     A7 12 02 FB | 	rdlong	arg01, fp
124a0     0C 4E 05 F1 | 	add	fp, #12
124a4     A7 14 02 FB | 	rdlong	arg02, fp
124a8     0C 4E 85 F1 | 	sub	fp, #12
124ac     C4 9F B0 FD | 	call	#__system___string_cmp
124b0     00 FA 0D F2 | 	cmp	result1, #0 wz
124b4     00 1E 26 56 |  if_ne	not	local01, #0
124b8     A7 1E 62 FC | 	wrlong	local01, fp
124bc     1C 04 90 FD | 	jmp	#LR__1453
124c0                 | LR__1440
124c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
124c0     08 4E 05 F1 | 	add	fp, #8
124c4     A7 1E 02 FB | 	rdlong	local01, fp
124c8     08 4E 85 F1 | 	sub	fp, #8
124cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
124d0     14 4E 05 A1 |  if_e	add	fp, #20
124d4     A7 24 02 AB |  if_e	rdlong	local04, fp
124d8     14 4E 85 A1 |  if_e	sub	fp, #20
124dc     12 23 02 A6 |  if_e	mov	local03, local04
124e0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
124e4     2C 00 90 5D |  if_ne	jmp	#LR__1441
124e8     00 1E 06 F6 | 	mov	local01, #0
124ec     A7 12 02 FB | 	rdlong	arg01, fp
124f0     0C 4E 05 F1 | 	add	fp, #12
124f4     A7 14 02 FB | 	rdlong	arg02, fp
124f8     0C 4E 85 F1 | 	sub	fp, #12
124fc     01 16 06 F6 | 	mov	arg03, #1
12500     F8 CE B0 FD | 	call	#__system___float_cmp
12504     00 FA 0D F2 | 	cmp	result1, #0 wz
12508     00 1E 26 56 |  if_ne	not	local01, #0
1250c     A7 1E 62 FC | 	wrlong	local01, fp
12510     C8 03 90 FD | 	jmp	#LR__1453
12514                 | LR__1441
12514                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
12514     08 4E 05 F1 | 	add	fp, #8
12518     A7 1E 02 FB | 	rdlong	local01, fp
1251c     08 4E 85 F1 | 	sub	fp, #8
12520     1E 1E 0E F2 | 	cmp	local01, #30 wz
12524     14 4E 05 A1 |  if_e	add	fp, #20
12528     A7 24 02 AB |  if_e	rdlong	local04, fp
1252c     14 4E 85 A1 |  if_e	sub	fp, #20
12530     12 23 02 A6 |  if_e	mov	local03, local04
12534     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12538     48 00 90 5D |  if_ne	jmp	#LR__1442
1253c     00 1E 06 F6 | 	mov	local01, #0
12540     A7 20 02 FB | 	rdlong	local02, fp
12544     0C 4E 05 F1 | 	add	fp, #12
12548     A7 12 02 FB | 	rdlong	arg01, fp
1254c     0C 4E 85 F1 | 	sub	fp, #12
12550     09 13 52 F6 | 	abs	arg01, arg01 wc
12554     1F 26 C6 C9 |  if_b	decod	local05, #31
12558     00 26 06 36 |  if_ae	mov	local05, #0
1255c     64 C6 B0 FD | 	call	#__system___float_fromuns
12560     13 FB 61 F5 | 	xor	result1, local05
12564     FD 14 02 F6 | 	mov	arg02, result1
12568     10 13 02 F6 | 	mov	arg01, local02
1256c     01 16 06 F6 | 	mov	arg03, #1
12570     88 CE B0 FD | 	call	#__system___float_cmp
12574     00 FA 0D F2 | 	cmp	result1, #0 wz
12578     00 1E 26 56 |  if_ne	not	local01, #0
1257c     A7 1E 62 FC | 	wrlong	local01, fp
12580     58 03 90 FD | 	jmp	#LR__1453
12584                 | LR__1442
12584                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
12584     08 4E 05 F1 | 	add	fp, #8
12588     A7 1E 02 FB | 	rdlong	local01, fp
1258c     08 4E 85 F1 | 	sub	fp, #8
12590     1E 1E 0E F2 | 	cmp	local01, #30 wz
12594     14 4E 05 A1 |  if_e	add	fp, #20
12598     A7 24 02 AB |  if_e	rdlong	local04, fp
1259c     14 4E 85 A1 |  if_e	sub	fp, #20
125a0     12 23 02 A6 |  if_e	mov	local03, local04
125a4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
125a8     38 00 90 5D |  if_ne	jmp	#LR__1443
125ac     00 1E 06 F6 | 	mov	local01, #0
125b0     A7 20 02 FB | 	rdlong	local02, fp
125b4     0C 4E 05 F1 | 	add	fp, #12
125b8     A7 12 02 FB | 	rdlong	arg01, fp
125bc     0C 4E 85 F1 | 	sub	fp, #12
125c0     00 C6 B0 FD | 	call	#__system___float_fromuns
125c4     FD 14 02 F6 | 	mov	arg02, result1
125c8     10 13 02 F6 | 	mov	arg01, local02
125cc     01 16 06 F6 | 	mov	arg03, #1
125d0     28 CE B0 FD | 	call	#__system___float_cmp
125d4     00 FA 0D F2 | 	cmp	result1, #0 wz
125d8     00 1E 26 56 |  if_ne	not	local01, #0
125dc     A7 1E 62 FC | 	wrlong	local01, fp
125e0     F8 02 90 FD | 	jmp	#LR__1453
125e4                 | LR__1443
125e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
125e4     08 4E 05 F1 | 	add	fp, #8
125e8     A7 1E 02 FB | 	rdlong	local01, fp
125ec     08 4E 85 F1 | 	sub	fp, #8
125f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
125f4     14 4E 05 A1 |  if_e	add	fp, #20
125f8     A7 24 02 AB |  if_e	rdlong	local04, fp
125fc     14 4E 85 A1 |  if_e	sub	fp, #20
12600     12 23 02 A6 |  if_e	mov	local03, local04
12604     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12608     44 00 90 5D |  if_ne	jmp	#LR__1444
1260c     00 1E 06 F6 | 	mov	local01, #0
12610     A7 12 02 FB | 	rdlong	arg01, fp
12614     09 13 52 F6 | 	abs	arg01, arg01 wc
12618     1F 26 C6 C9 |  if_b	decod	local05, #31
1261c     00 26 06 36 |  if_ae	mov	local05, #0
12620     A0 C5 B0 FD | 	call	#__system___float_fromuns
12624     13 FB 61 F5 | 	xor	result1, local05
12628     FD 12 02 F6 | 	mov	arg01, result1
1262c     0C 4E 05 F1 | 	add	fp, #12
12630     A7 14 02 FB | 	rdlong	arg02, fp
12634     0C 4E 85 F1 | 	sub	fp, #12
12638     01 16 06 F6 | 	mov	arg03, #1
1263c     BC CD B0 FD | 	call	#__system___float_cmp
12640     00 FA 0D F2 | 	cmp	result1, #0 wz
12644     00 1E 26 56 |  if_ne	not	local01, #0
12648     A7 1E 62 FC | 	wrlong	local01, fp
1264c     8C 02 90 FD | 	jmp	#LR__1453
12650                 | LR__1444
12650                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
12650     08 4E 05 F1 | 	add	fp, #8
12654     A7 1E 02 FB | 	rdlong	local01, fp
12658     08 4E 85 F1 | 	sub	fp, #8
1265c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12660     14 4E 05 A1 |  if_e	add	fp, #20
12664     A7 24 02 AB |  if_e	rdlong	local04, fp
12668     14 4E 85 A1 |  if_e	sub	fp, #20
1266c     12 23 02 A6 |  if_e	mov	local03, local04
12670     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12674     24 00 90 5D |  if_ne	jmp	#LR__1445
12678     00 1E 06 F6 | 	mov	local01, #0
1267c     A7 20 02 FB | 	rdlong	local02, fp
12680     0C 4E 05 F1 | 	add	fp, #12
12684     A7 22 02 FB | 	rdlong	local03, fp
12688     0C 4E 85 F1 | 	sub	fp, #12
1268c     11 21 0A F2 | 	cmp	local02, local03 wz
12690     01 1E 66 56 |  if_ne	neg	local01, #1
12694     A7 1E 62 FC | 	wrlong	local01, fp
12698     40 02 90 FD | 	jmp	#LR__1453
1269c                 | LR__1445
1269c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1269c     08 4E 05 F1 | 	add	fp, #8
126a0     A7 1E 02 FB | 	rdlong	local01, fp
126a4     08 4E 85 F1 | 	sub	fp, #8
126a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
126ac     14 4E 05 A1 |  if_e	add	fp, #20
126b0     A7 24 02 AB |  if_e	rdlong	local04, fp
126b4     14 4E 85 A1 |  if_e	sub	fp, #20
126b8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
126bc     24 00 90 5D |  if_ne	jmp	#LR__1446
126c0     00 1E 06 F6 | 	mov	local01, #0
126c4     A7 20 02 FB | 	rdlong	local02, fp
126c8     0C 4E 05 F1 | 	add	fp, #12
126cc     A7 22 02 FB | 	rdlong	local03, fp
126d0     0C 4E 85 F1 | 	sub	fp, #12
126d4     11 21 0A F2 | 	cmp	local02, local03 wz
126d8     01 1E 66 56 |  if_ne	neg	local01, #1
126dc     A7 1E 62 FC | 	wrlong	local01, fp
126e0     F8 01 90 FD | 	jmp	#LR__1453
126e4                 | LR__1446
126e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
126e4     08 4E 05 F1 | 	add	fp, #8
126e8     A7 1E 02 FB | 	rdlong	local01, fp
126ec     08 4E 85 F1 | 	sub	fp, #8
126f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
126f4     14 4E 05 A1 |  if_e	add	fp, #20
126f8     A7 22 02 AB |  if_e	rdlong	local03, fp
126fc     14 4E 85 A1 |  if_e	sub	fp, #20
12700     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12704     34 00 90 5D |  if_ne	jmp	#LR__1447
12708     00 1E 06 F6 | 	mov	local01, #0
1270c     A7 12 02 FB | 	rdlong	arg01, fp
12710     B0 C4 B0 FD | 	call	#__system___float_fromuns
12714     FD 12 02 F6 | 	mov	arg01, result1
12718     0C 4E 05 F1 | 	add	fp, #12
1271c     A7 14 02 FB | 	rdlong	arg02, fp
12720     0C 4E 85 F1 | 	sub	fp, #12
12724     01 16 06 F6 | 	mov	arg03, #1
12728     D0 CC B0 FD | 	call	#__system___float_cmp
1272c     00 FA 0D F2 | 	cmp	result1, #0 wz
12730     00 1E 26 56 |  if_ne	not	local01, #0
12734     A7 1E 62 FC | 	wrlong	local01, fp
12738     A0 01 90 FD | 	jmp	#LR__1453
1273c                 | LR__1447
1273c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1273c     08 4E 05 F1 | 	add	fp, #8
12740     A7 1E 02 FB | 	rdlong	local01, fp
12744     08 4E 85 F1 | 	sub	fp, #8
12748     1D 1E 0E F2 | 	cmp	local01, #29 wz
1274c     14 4E 05 A1 |  if_e	add	fp, #20
12750     A7 22 02 AB |  if_e	rdlong	local03, fp
12754     14 4E 85 A1 |  if_e	sub	fp, #20
12758     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1275c     24 00 90 5D |  if_ne	jmp	#LR__1448
12760     00 1E 06 F6 | 	mov	local01, #0
12764     A7 20 02 FB | 	rdlong	local02, fp
12768     0C 4E 05 F1 | 	add	fp, #12
1276c     A7 22 02 FB | 	rdlong	local03, fp
12770     0C 4E 85 F1 | 	sub	fp, #12
12774     11 21 0A F2 | 	cmp	local02, local03 wz
12778     01 1E 66 56 |  if_ne	neg	local01, #1
1277c     A7 1E 62 FC | 	wrlong	local01, fp
12780     58 01 90 FD | 	jmp	#LR__1453
12784                 | LR__1448
12784                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
12784     08 4E 05 F1 | 	add	fp, #8
12788     A7 1E 02 FB | 	rdlong	local01, fp
1278c     08 4E 85 F1 | 	sub	fp, #8
12790     1D 1E 0E F2 | 	cmp	local01, #29 wz
12794     14 4E 05 A1 |  if_e	add	fp, #20
12798     A7 22 02 AB |  if_e	rdlong	local03, fp
1279c     14 4E 85 A1 |  if_e	sub	fp, #20
127a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
127a4     24 00 90 5D |  if_ne	jmp	#LR__1449
127a8     00 1E 06 F6 | 	mov	local01, #0
127ac     A7 20 02 FB | 	rdlong	local02, fp
127b0     0C 4E 05 F1 | 	add	fp, #12
127b4     A7 22 02 FB | 	rdlong	local03, fp
127b8     0C 4E 85 F1 | 	sub	fp, #12
127bc     11 21 0A F2 | 	cmp	local02, local03 wz
127c0     01 1E 66 56 |  if_ne	neg	local01, #1
127c4     A7 1E 62 FC | 	wrlong	local01, fp
127c8     10 01 90 FD | 	jmp	#LR__1453
127cc                 | LR__1449
127cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
127cc     08 4E 05 F1 | 	add	fp, #8
127d0     A7 1E 02 FB | 	rdlong	local01, fp
127d4     08 4E 85 F1 | 	sub	fp, #8
127d8     2B 1E 0E F2 | 	cmp	local01, #43 wz
127dc     14 4E 05 A1 |  if_e	add	fp, #20
127e0     A7 22 02 AB |  if_e	rdlong	local03, fp
127e4     14 4E 85 A1 |  if_e	sub	fp, #20
127e8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
127ec     30 00 90 5D |  if_ne	jmp	#LR__1450
127f0     00 1E 06 F6 | 	mov	local01, #0
127f4     A7 12 02 FB | 	rdlong	arg01, fp
127f8     DC B8 BF FD | 	call	#_convertstring
127fc     FD 12 02 F6 | 	mov	arg01, result1
12800     0C 4E 05 F1 | 	add	fp, #12
12804     A7 14 02 FB | 	rdlong	arg02, fp
12808     0C 4E 85 F1 | 	sub	fp, #12
1280c     64 9C B0 FD | 	call	#__system___string_cmp
12810     00 FA 0D F2 | 	cmp	result1, #0 wz
12814     00 1E 26 56 |  if_ne	not	local01, #0
12818     A7 1E 62 FC | 	wrlong	local01, fp
1281c     BC 00 90 FD | 	jmp	#LR__1453
12820                 | LR__1450
12820                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
12820     08 4E 05 F1 | 	add	fp, #8
12824     A7 1E 02 FB | 	rdlong	local01, fp
12828     08 4E 85 F1 | 	sub	fp, #8
1282c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12830     14 4E 05 A1 |  if_e	add	fp, #20
12834     A7 22 02 AB |  if_e	rdlong	local03, fp
12838     14 4E 85 A1 |  if_e	sub	fp, #20
1283c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12840     34 00 90 5D |  if_ne	jmp	#LR__1451
12844     00 1E 06 F6 | 	mov	local01, #0
12848     A7 20 02 FB | 	rdlong	local02, fp
1284c     0C 4E 05 F1 | 	add	fp, #12
12850     A7 12 02 FB | 	rdlong	arg01, fp
12854     0C 4E 85 F1 | 	sub	fp, #12
12858     7C B8 BF FD | 	call	#_convertstring
1285c     FD 14 02 F6 | 	mov	arg02, result1
12860     10 13 02 F6 | 	mov	arg01, local02
12864     0C 9C B0 FD | 	call	#__system___string_cmp
12868     00 FA 0D F2 | 	cmp	result1, #0 wz
1286c     00 1E 26 56 |  if_ne	not	local01, #0
12870     A7 1E 62 FC | 	wrlong	local01, fp
12874     64 00 90 FD | 	jmp	#LR__1453
12878                 | LR__1451
12878                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
12878     08 4E 05 F1 | 	add	fp, #8
1287c     A7 1E 02 FB | 	rdlong	local01, fp
12880     08 4E 85 F1 | 	sub	fp, #8
12884     2B 1E 0E F2 | 	cmp	local01, #43 wz
12888     14 4E 05 A1 |  if_e	add	fp, #20
1288c     A7 22 02 AB |  if_e	rdlong	local03, fp
12890     14 4E 85 A1 |  if_e	sub	fp, #20
12894     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12898     3C 00 90 5D |  if_ne	jmp	#LR__1452
1289c     00 1E 06 F6 | 	mov	local01, #0
128a0     A7 12 02 FB | 	rdlong	arg01, fp
128a4     30 B8 BF FD | 	call	#_convertstring
128a8     FD 20 02 F6 | 	mov	local02, result1
128ac     0C 4E 05 F1 | 	add	fp, #12
128b0     A7 12 02 FB | 	rdlong	arg01, fp
128b4     0C 4E 85 F1 | 	sub	fp, #12
128b8     1C B8 BF FD | 	call	#_convertstring
128bc     FD 14 02 F6 | 	mov	arg02, result1
128c0     10 13 02 F6 | 	mov	arg01, local02
128c4     AC 9B B0 FD | 	call	#__system___string_cmp
128c8     00 FA 0D F2 | 	cmp	result1, #0 wz
128cc     00 1E 26 56 |  if_ne	not	local01, #0
128d0     A7 1E 62 FC | 	wrlong	local01, fp
128d4     04 00 90 FD | 	jmp	#LR__1453
128d8                 | LR__1452
128d8     A7 00 68 FC | 	wrlong	#0, fp
128dc                 | LR__1453
128dc     08 4E 05 F1 | 	add	fp, #8
128e0     A7 38 68 FC | 	wrlong	#28, fp
128e4     08 4E 85 F1 | 	sub	fp, #8
128e8     A7 12 02 F6 | 	mov	arg01, fp
128ec     38 79 BF FD | 	call	#_push
128f0     A7 F0 03 F6 | 	mov	ptra, fp
128f4     B2 00 A0 FD | 	call	#popregs_
128f8                 | _do_ne_ret
128f8     2D 00 64 FD | 	ret
128fc                 | 
128fc                 | ' 
128fc                 | ' 
128fc                 | ' 
128fc                 | ' ' -------------------   convert a variable on the top of stack to integer
128fc                 | ' 
128fc                 | ' sub do_converttoint
128fc                 | _do_converttoint
128fc     02 4A 05 F6 | 	mov	COUNT_, #2
12900     A8 00 A0 FD | 	call	#pushregs_
12904     18 F0 07 F1 | 	add	ptra, #24
12908     84 78 BF FD | 	call	#_pop
1290c     FE 1E 02 F6 | 	mov	local01, result2
12910     FF 20 02 F6 | 	mov	local02, result3
12914     A7 FA 61 FC | 	wrlong	result1, fp
12918     04 4E 05 F1 | 	add	fp, #4
1291c     A7 1E 62 FC | 	wrlong	local01, fp
12920     04 4E 05 F1 | 	add	fp, #4
12924     A7 20 62 FC | 	wrlong	local02, fp
12928                 | ' t1=pop() 
12928                 | ' select case t1.result_type
12928     08 4E 85 F1 | 	sub	fp, #8
1292c     1C 20 0E F2 | 	cmp	local02, #28 wz
12930     2C 00 90 AD |  if_e	jmp	#LR__1460
12934     1D 20 0E F2 | 	cmp	local02, #29 wz
12938     40 00 90 AD |  if_e	jmp	#LR__1461
1293c     1E 20 0E F2 | 	cmp	local02, #30 wz
12940     54 00 90 AD |  if_e	jmp	#LR__1462
12944     1F 20 0E F2 | 	cmp	local02, #31 wz
12948     70 00 90 AD |  if_e	jmp	#LR__1463
1294c     2B 20 0E F2 | 	cmp	local02, #43 wz
12950     94 00 90 AD |  if_e	jmp	#LR__1464
12954     FF 20 0E F2 | 	cmp	local02, #255 wz
12958     C0 00 90 AD |  if_e	jmp	#LR__1465
1295c     DC 00 90 FD | 	jmp	#LR__1466
12960                 | LR__1460
12960     A7 20 02 FB | 	rdlong	local02, fp
12964     0C 4E 05 F1 | 	add	fp, #12
12968     A7 20 62 FC | 	wrlong	local02, fp
1296c     04 4E 05 F1 | 	add	fp, #4
12970     A7 38 68 FC | 	wrlong	#28, fp
12974     10 4E 85 F1 | 	sub	fp, #16
12978     D4 00 90 FD | 	jmp	#LR__1467
1297c                 | LR__1461
1297c     A7 20 02 FB | 	rdlong	local02, fp
12980     0C 4E 05 F1 | 	add	fp, #12
12984     A7 20 62 FC | 	wrlong	local02, fp
12988     04 4E 05 F1 | 	add	fp, #4
1298c     A7 38 68 FC | 	wrlong	#28, fp
12990     10 4E 85 F1 | 	sub	fp, #16
12994     B8 00 90 FD | 	jmp	#LR__1467
12998                 | LR__1462
12998     A7 12 02 FB | 	rdlong	arg01, fp
1299c     01 14 06 F6 | 	mov	arg02, #1
129a0     EC CA B0 FD | 	call	#__system___float_tointeger
129a4     0C 4E 05 F1 | 	add	fp, #12
129a8     A7 FA 61 FC | 	wrlong	result1, fp
129ac     04 4E 05 F1 | 	add	fp, #4
129b0     A7 38 68 FC | 	wrlong	#28, fp
129b4     10 4E 85 F1 | 	sub	fp, #16
129b8     94 00 90 FD | 	jmp	#LR__1467
129bc                 | LR__1463
129bc     A7 12 02 FB | 	rdlong	arg01, fp
129c0     EC CD B0 FD | 	call	#__system____builtin_atof
129c4     FD 12 02 F6 | 	mov	arg01, result1
129c8     00 14 06 F6 | 	mov	arg02, #0
129cc     C0 CA B0 FD | 	call	#__system___float_tointeger
129d0     0C 4E 05 F1 | 	add	fp, #12
129d4     A7 FA 61 FC | 	wrlong	result1, fp
129d8     04 4E 05 F1 | 	add	fp, #4
129dc     A7 38 68 FC | 	wrlong	#28, fp
129e0     10 4E 85 F1 | 	sub	fp, #16
129e4     68 00 90 FD | 	jmp	#LR__1467
129e8                 | LR__1464
129e8     A7 12 02 FB | 	rdlong	arg01, fp
129ec     E8 B6 BF FD | 	call	#_convertstring
129f0     FD 12 02 F6 | 	mov	arg01, result1
129f4     B8 CD B0 FD | 	call	#__system____builtin_atof
129f8     FD 12 02 F6 | 	mov	arg01, result1
129fc     00 14 06 F6 | 	mov	arg02, #0
12a00     8C CA B0 FD | 	call	#__system___float_tointeger
12a04     0C 4E 05 F1 | 	add	fp, #12
12a08     A7 FA 61 FC | 	wrlong	result1, fp
12a0c     04 4E 05 F1 | 	add	fp, #4
12a10     A7 38 68 FC | 	wrlong	#28, fp
12a14     10 4E 85 F1 | 	sub	fp, #16
12a18     34 00 90 FD | 	jmp	#LR__1467
12a1c                 | LR__1465
12a1c     0C 4E 05 F1 | 	add	fp, #12
12a20     A7 00 68 FC | 	wrlong	#0, fp
12a24     0C 4E 85 F1 | 	sub	fp, #12
12a28     A7 20 02 FB | 	rdlong	local02, fp
12a2c     10 4E 05 F1 | 	add	fp, #16
12a30     A7 20 62 FC | 	wrlong	local02, fp
12a34     10 4E 85 F1 | 	sub	fp, #16
12a38     14 00 90 FD | 	jmp	#LR__1467
12a3c                 | LR__1466
12a3c     0C 4E 05 F1 | 	add	fp, #12
12a40     A7 00 68 FC | 	wrlong	#0, fp
12a44     04 4E 05 F1 | 	add	fp, #4
12a48     A7 02 68 FC | 	wrlong	#1, fp
12a4c     10 4E 85 F1 | 	sub	fp, #16
12a50                 | LR__1467
12a50     0C 4E 05 F1 | 	add	fp, #12
12a54     A7 20 02 FB | 	rdlong	local02, fp
12a58     0C 4E 85 F1 | 	sub	fp, #12
12a5c     A7 20 62 FC | 	wrlong	local02, fp
12a60     10 4E 05 F1 | 	add	fp, #16
12a64     A7 20 02 FB | 	rdlong	local02, fp
12a68     08 4E 85 F1 | 	sub	fp, #8
12a6c     A7 20 62 FC | 	wrlong	local02, fp
12a70     08 4E 85 F1 | 	sub	fp, #8
12a74     A7 12 02 F6 | 	mov	arg01, fp
12a78     AC 77 BF FD | 	call	#_push
12a7c     A7 F0 03 F6 | 	mov	ptra, fp
12a80     B2 00 A0 FD | 	call	#popregs_
12a84                 | _do_converttoint_ret
12a84     2D 00 64 FD | 	ret
12a88                 | 
12a88                 | ' 
12a88                 | ' function converttoint (t1 as expr_result) as integer
12a88                 | _converttoint
12a88     02 4A 05 F6 | 	mov	COUNT_, #2
12a8c     A8 00 A0 FD | 	call	#pushregs_
12a90     09 1F 02 F6 | 	mov	local01, arg01
12a94                 | ' 
12a94                 | ' select case t1.result_type
12a94     08 1E 06 F1 | 	add	local01, #8
12a98     0F 21 02 FB | 	rdlong	local02, local01
12a9c     08 1E 86 F1 | 	sub	local01, #8
12aa0     1C 20 0E F2 | 	cmp	local02, #28 wz
12aa4     24 00 90 AD |  if_e	jmp	#LR__1470
12aa8     1D 20 0E F2 | 	cmp	local02, #29 wz
12aac     24 00 90 AD |  if_e	jmp	#LR__1471
12ab0     1E 20 0E F2 | 	cmp	local02, #30 wz
12ab4     24 00 90 AD |  if_e	jmp	#LR__1472
12ab8     1F 20 0E F2 | 	cmp	local02, #31 wz
12abc     2C 00 90 AD |  if_e	jmp	#LR__1473
12ac0     2B 20 0E F2 | 	cmp	local02, #43 wz
12ac4     3C 00 90 AD |  if_e	jmp	#LR__1474
12ac8     58 00 90 FD | 	jmp	#LR__1475
12acc                 | LR__1470
12acc     0F FB 01 FB | 	rdlong	result1, local01
12ad0     54 00 90 FD | 	jmp	#LR__1476
12ad4                 | LR__1471
12ad4     0F FB 01 FB | 	rdlong	result1, local01
12ad8     4C 00 90 FD | 	jmp	#LR__1476
12adc                 | LR__1472
12adc     0F 13 02 FB | 	rdlong	arg01, local01
12ae0     01 14 06 F6 | 	mov	arg02, #1
12ae4     A8 C9 B0 FD | 	call	#__system___float_tointeger
12ae8     3C 00 90 FD | 	jmp	#LR__1476
12aec                 | LR__1473
12aec     0F 13 02 FB | 	rdlong	arg01, local01
12af0     BC CC B0 FD | 	call	#__system____builtin_atof
12af4     FD 12 02 F6 | 	mov	arg01, result1
12af8     00 14 06 F6 | 	mov	arg02, #0
12afc     90 C9 B0 FD | 	call	#__system___float_tointeger
12b00     24 00 90 FD | 	jmp	#LR__1476
12b04                 | LR__1474
12b04     0F 13 02 FB | 	rdlong	arg01, local01
12b08     CC B5 BF FD | 	call	#_convertstring
12b0c     FD 12 02 F6 | 	mov	arg01, result1
12b10     9C CC B0 FD | 	call	#__system____builtin_atof
12b14     FD 12 02 F6 | 	mov	arg01, result1
12b18     00 14 06 F6 | 	mov	arg02, #0
12b1c     70 C9 B0 FD | 	call	#__system___float_tointeger
12b20     04 00 90 FD | 	jmp	#LR__1476
12b24                 | LR__1475
12b24     00 FA 05 F6 | 	mov	result1, #0
12b28                 | LR__1476
12b28     A7 F0 03 F6 | 	mov	ptra, fp
12b2c     B2 00 A0 FD | 	call	#popregs_
12b30                 | _converttoint_ret
12b30     2D 00 64 FD | 	ret
12b34                 | 
12b34                 | ' 
12b34                 | ' function converttofloat (t1 as expr_result) as single
12b34                 | _converttofloat
12b34     03 4A 05 F6 | 	mov	COUNT_, #3
12b38     A8 00 A0 FD | 	call	#pushregs_
12b3c     09 1F 02 F6 | 	mov	local01, arg01
12b40                 | ' 
12b40                 | ' select case t1.result_type
12b40     08 1E 06 F1 | 	add	local01, #8
12b44     0F 21 02 FB | 	rdlong	local02, local01
12b48     08 1E 86 F1 | 	sub	local01, #8
12b4c     1C 20 0E F2 | 	cmp	local02, #28 wz
12b50     24 00 90 AD |  if_e	jmp	#LR__1480
12b54     1D 20 0E F2 | 	cmp	local02, #29 wz
12b58     38 00 90 AD |  if_e	jmp	#LR__1481
12b5c     1E 20 0E F2 | 	cmp	local02, #30 wz
12b60     3C 00 90 AD |  if_e	jmp	#LR__1482
12b64     1F 20 0E F2 | 	cmp	local02, #31 wz
12b68     3C 00 90 AD |  if_e	jmp	#LR__1483
12b6c     2B 20 0E F2 | 	cmp	local02, #43 wz
12b70     40 00 90 AD |  if_e	jmp	#LR__1484
12b74     50 00 90 FD | 	jmp	#LR__1485
12b78                 | LR__1480
12b78     0F 13 02 FB | 	rdlong	arg01, local01
12b7c     09 13 52 F6 | 	abs	arg01, arg01 wc
12b80     1F 22 C6 C9 |  if_b	decod	local03, #31
12b84     00 22 06 36 |  if_ae	mov	local03, #0
12b88     38 C0 B0 FD | 	call	#__system___float_fromuns
12b8c     11 FB 61 F5 | 	xor	result1, local03
12b90     38 00 90 FD | 	jmp	#LR__1486
12b94                 | LR__1481
12b94     0F 13 02 FB | 	rdlong	arg01, local01
12b98     28 C0 B0 FD | 	call	#__system___float_fromuns
12b9c     2C 00 90 FD | 	jmp	#LR__1486
12ba0                 | LR__1482
12ba0     0F FB 01 FB | 	rdlong	result1, local01
12ba4     24 00 90 FD | 	jmp	#LR__1486
12ba8                 | LR__1483
12ba8     0F 13 02 FB | 	rdlong	arg01, local01
12bac     00 CC B0 FD | 	call	#__system____builtin_atof
12bb0     18 00 90 FD | 	jmp	#LR__1486
12bb4                 | LR__1484
12bb4     0F 13 02 FB | 	rdlong	arg01, local01
12bb8     1C B5 BF FD | 	call	#_convertstring
12bbc     FD 12 02 F6 | 	mov	arg01, result1
12bc0     EC CB B0 FD | 	call	#__system____builtin_atof
12bc4     04 00 90 FD | 	jmp	#LR__1486
12bc8                 | LR__1485
12bc8     00 FA 05 F6 | 	mov	result1, #0
12bcc                 | LR__1486
12bcc     A7 F0 03 F6 | 	mov	ptra, fp
12bd0     B2 00 A0 FD | 	call	#popregs_
12bd4                 | _converttofloat_ret
12bd4     2D 00 64 FD | 	ret
12bd8                 | 
12bd8                 | ' 
12bd8                 | ' sub do_rnd
12bd8                 | _do_rnd
12bd8     01 4A 05 F6 | 	mov	COUNT_, #1
12bdc     A8 00 A0 FD | 	call	#pushregs_
12be0     10 F0 07 F1 | 	add	ptra, #16
12be4     6A 00 00 FF 
12be8     64 E4 05 F1 | 	add	objptr, ##54372
12bec     F2 1E 02 FB | 	rdlong	local01, objptr
12bf0     0F 17 02 F6 | 	mov	arg03, local01
12bf4     01 16 66 F0 | 	shl	arg03, #1
12bf8     0F 17 02 F1 | 	add	arg03, local01
12bfc     02 16 66 F0 | 	shl	arg03, #2
12c00     03 00 00 FF 
12c04     04 E4 85 F1 | 	sub	objptr, ##1540
12c08     F2 16 02 F1 | 	add	arg03, objptr
12c0c     0B 17 02 FB | 	rdlong	arg03, arg03
12c10     0C 4E 05 F1 | 	add	fp, #12
12c14     A7 16 62 FC | 	wrlong	arg03, fp
12c18                 | ' 
12c18                 | ' numpar=compiledline(lineptr_e).result.uresult
12c18                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
12c18     0C 4E 85 F1 | 	sub	fp, #12
12c1c     02 16 16 F2 | 	cmp	arg03, #2 wc
12c20     67 00 00 FF 
12c24     60 E4 85 F1 | 	sub	objptr, ##52832
12c28     3C 00 90 CD |  if_b	jmp	#LR__1490
12c2c     00 12 06 F6 | 	mov	arg01, #0
12c30     A8 F1 B0 FD | 	call	#__system___getiolock_0474
12c34     FD 12 02 F6 | 	mov	arg01, result1
12c38     10 98 B0 FD | 	call	#__system___lockmem
12c3c     60 01 00 FF 
12c40     57 14 06 F6 | 	mov	arg02, ##@LR__4937
12c44     00 12 06 F6 | 	mov	arg01, #0
12c48     00 16 06 F6 | 	mov	arg03, #0
12c4c     00 A5 B0 FD | 	call	#__system___basic_print_string
12c50     00 12 06 F6 | 	mov	arg01, #0
12c54     84 F1 B0 FD | 	call	#__system___getiolock_0474
12c58     FD 00 68 FC | 	wrlong	#0, result1
12c5c     27 12 06 F6 | 	mov	arg01, #39
12c60     00 60 B0 FD | 	call	#_printerror
12c64     2C 01 90 FD | 	jmp	#LR__1497
12c68                 | LR__1490
12c68                 | ' if numpar=0 then
12c68     0C 4E 05 F1 | 	add	fp, #12
12c6c     A7 FE 09 FB | 	rdlong	result3, fp wz
12c70     0C 4E 85 F1 | 	sub	fp, #12
12c74     20 00 90 5D |  if_ne	jmp	#LR__1491
12c78     08 4E 05 F1 | 	add	fp, #8
12c7c     A7 3A 68 FC | 	wrlong	#29, fp
12c80     08 4E 85 F1 | 	sub	fp, #8
12c84     1B FA 61 FD | 	getrnd	result1
12c88     A7 FA 61 FC | 	wrlong	result1, fp
12c8c     A7 12 02 F6 | 	mov	arg01, fp
12c90     94 75 BF FD | 	call	#_push
12c94     FC 00 90 FD | 	jmp	#LR__1496
12c98                 | LR__1491
12c98     F4 74 BF FD | 	call	#_pop
12c9c     A7 FA 61 FC | 	wrlong	result1, fp
12ca0     04 4E 05 F1 | 	add	fp, #4
12ca4     A7 FC 61 FC | 	wrlong	result2, fp
12ca8     04 4E 05 F1 | 	add	fp, #4
12cac     A7 FE 61 FC | 	wrlong	result3, fp
12cb0                 | '   t1=pop()
12cb0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
12cb0     08 4E 85 F1 | 	sub	fp, #8
12cb4     1C FE 0D F2 | 	cmp	result3, #28 wz
12cb8     08 4E 05 51 |  if_ne	add	fp, #8
12cbc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12cc0     08 4E 85 51 |  if_ne	sub	fp, #8
12cc4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12cc8     2C 00 90 5D |  if_ne	jmp	#LR__1492
12ccc     1B FA 61 FD | 	getrnd	result1
12cd0     A7 1E 02 FB | 	rdlong	local01, fp
12cd4     0F FB 11 FD | 	qdiv	result1, local01
12cd8     A7 12 02 F6 | 	mov	arg01, fp
12cdc     19 1E 62 FD | 	getqy	local01
12ce0     A7 1E 62 FC | 	wrlong	local01, fp
12ce4     08 4E 05 F1 | 	add	fp, #8
12ce8     A7 3A 68 FC | 	wrlong	#29, fp
12cec     08 4E 85 F1 | 	sub	fp, #8
12cf0     34 75 BF FD | 	call	#_push
12cf4     9C 00 90 FD | 	jmp	#LR__1495
12cf8                 | LR__1492
12cf8     08 4E 05 F1 | 	add	fp, #8
12cfc     A7 1E 02 FB | 	rdlong	local01, fp
12d00     08 4E 85 F1 | 	sub	fp, #8
12d04     1E 1E 0E F2 | 	cmp	local01, #30 wz
12d08     48 00 90 5D |  if_ne	jmp	#LR__1493
12d0c     A7 12 02 FB | 	rdlong	arg01, fp
12d10     00 C0 24 FF 
12d14     00 14 06 F6 | 	mov	arg02, ##1233125376
12d18     B0 C4 B0 FD | 	call	#__system___float_div
12d1c     FD 1E 02 F6 | 	mov	local01, result1
12d20     1B 12 62 FD | 	getrnd	arg01
12d24     74 13 06 F4 | 	bitl	arg01, #372
12d28     98 BE B0 FD | 	call	#__system___float_fromuns
12d2c     FD 14 02 F6 | 	mov	arg02, result1
12d30     0F 13 02 F6 | 	mov	arg01, local01
12d34     90 C2 B0 FD | 	call	#__system___float_mul
12d38     A7 FA 61 FC | 	wrlong	result1, fp
12d3c     08 4E 05 F1 | 	add	fp, #8
12d40     A7 3C 68 FC | 	wrlong	#30, fp
12d44     08 4E 85 F1 | 	sub	fp, #8
12d48     A7 12 02 F6 | 	mov	arg01, fp
12d4c     D8 74 BF FD | 	call	#_push
12d50     40 00 90 FD | 	jmp	#LR__1494
12d54                 | LR__1493
12d54                 | '     print "rnd: "; : printerror(40) 
12d54     00 12 06 F6 | 	mov	arg01, #0
12d58     80 F0 B0 FD | 	call	#__system___getiolock_0474
12d5c     FD 12 02 F6 | 	mov	arg01, result1
12d60     E8 96 B0 FD | 	call	#__system___lockmem
12d64     60 01 00 FF 
12d68     5D 14 06 F6 | 	mov	arg02, ##@LR__4938
12d6c     00 12 06 F6 | 	mov	arg01, #0
12d70     00 16 06 F6 | 	mov	arg03, #0
12d74     D8 A3 B0 FD | 	call	#__system___basic_print_string
12d78     00 12 06 F6 | 	mov	arg01, #0
12d7c     5C F0 B0 FD | 	call	#__system___getiolock_0474
12d80     FD 00 68 FC | 	wrlong	#0, result1
12d84     28 12 06 F6 | 	mov	arg01, #40
12d88     D8 5E B0 FD | 	call	#_printerror
12d8c     A7 12 02 F6 | 	mov	arg01, fp
12d90     94 74 BF FD | 	call	#_push
12d94                 | LR__1494
12d94                 | LR__1495
12d94                 | LR__1496
12d94                 | LR__1497
12d94     A7 F0 03 F6 | 	mov	ptra, fp
12d98     B2 00 A0 FD | 	call	#popregs_
12d9c                 | _do_rnd_ret
12d9c     2D 00 64 FD | 	ret
12da0                 | 
12da0                 | ' 
12da0                 | ' sub do_getenvsustain
12da0                 | _do_getenvsustain
12da0     01 4A 05 F6 | 	mov	COUNT_, #1
12da4     A8 00 A0 FD | 	call	#pushregs_
12da8     10 F0 07 F1 | 	add	ptra, #16
12dac     6A 00 00 FF 
12db0     64 E4 05 F1 | 	add	objptr, ##54372
12db4     F2 1E 02 FB | 	rdlong	local01, objptr
12db8     0F 17 02 F6 | 	mov	arg03, local01
12dbc     01 16 66 F0 | 	shl	arg03, #1
12dc0     0F 17 02 F1 | 	add	arg03, local01
12dc4     02 16 66 F0 | 	shl	arg03, #2
12dc8     03 00 00 FF 
12dcc     04 E4 85 F1 | 	sub	objptr, ##1540
12dd0     F2 16 02 F1 | 	add	arg03, objptr
12dd4     0B 17 02 FB | 	rdlong	arg03, arg03
12dd8     0C 4E 05 F1 | 	add	fp, #12
12ddc     A7 16 62 FC | 	wrlong	arg03, fp
12de0                 | ' 
12de0                 | ' numpar=compiledline(lineptr_e).result.uresult
12de0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12de0     0C 4E 85 F1 | 	sub	fp, #12
12de4     02 16 16 F2 | 	cmp	arg03, #2 wc
12de8     67 00 00 FF 
12dec     60 E4 85 F1 | 	sub	objptr, ##52832
12df0     0C 4E 05 C1 |  if_b	add	fp, #12
12df4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12df8     0C 4E 85 C1 |  if_b	sub	fp, #12
12dfc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12e00     00 12 06 F6 | 	mov	arg01, #0
12e04     D4 EF B0 FD | 	call	#__system___getiolock_0474
12e08     FD 12 02 F6 | 	mov	arg01, result1
12e0c     3C 96 B0 FD | 	call	#__system___lockmem
12e10     60 01 00 FF 
12e14     63 14 06 F6 | 	mov	arg02, ##@LR__4939
12e18     00 12 06 F6 | 	mov	arg01, #0
12e1c     00 16 06 F6 | 	mov	arg03, #0
12e20     2C A3 B0 FD | 	call	#__system___basic_print_string
12e24     00 12 06 F6 | 	mov	arg01, #0
12e28     B0 EF B0 FD | 	call	#__system___getiolock_0474
12e2c     FD 00 68 FC | 	wrlong	#0, result1
12e30     27 12 06 F6 | 	mov	arg01, #39
12e34     2C 5E B0 FD | 	call	#_printerror
12e38     64 00 90 FD | 	jmp	#LR__1501
12e3c                 | LR__1500
12e3c     50 73 BF FD | 	call	#_pop
12e40     FD 1E 02 F6 | 	mov	local01, result1
12e44     FE 16 02 F6 | 	mov	arg03, result2
12e48     A7 1E 62 FC | 	wrlong	local01, fp
12e4c     04 4E 05 F1 | 	add	fp, #4
12e50     A7 16 62 FC | 	wrlong	arg03, fp
12e54     04 4E 05 F1 | 	add	fp, #4
12e58     A7 FE 61 FC | 	wrlong	result3, fp
12e5c     08 4E 85 F1 | 	sub	fp, #8
12e60     A7 12 02 F6 | 	mov	arg01, fp
12e64     20 FC BF FD | 	call	#_converttoint
12e68     FD 1E 02 F6 | 	mov	local01, result1
12e6c     01 1E 66 F0 | 	shl	local01, #1
12e70     7B 00 00 FF 
12e74     78 E4 05 F1 | 	add	objptr, ##63096
12e78     F2 1E 02 F1 | 	add	local01, objptr
12e7c     0F 1F E2 FA | 	rdword	local01, local01
12e80     A7 1E 62 FC | 	wrlong	local01, fp
12e84     08 4E 05 F1 | 	add	fp, #8
12e88     A7 38 68 FC | 	wrlong	#28, fp
12e8c     08 4E 85 F1 | 	sub	fp, #8
12e90     A7 12 02 F6 | 	mov	arg01, fp
12e94     7B 00 00 FF 
12e98     78 E4 85 F1 | 	sub	objptr, ##63096
12e9c     88 73 BF FD | 	call	#_push
12ea0                 | LR__1501
12ea0     A7 F0 03 F6 | 	mov	ptra, fp
12ea4     B2 00 A0 FD | 	call	#popregs_
12ea8                 | _do_getenvsustain_ret
12ea8     2D 00 64 FD | 	ret
12eac                 | 
12eac                 | ' 
12eac                 | ' sub do_sin
12eac                 | _do_sin
12eac     01 4A 05 F6 | 	mov	COUNT_, #1
12eb0     A8 00 A0 FD | 	call	#pushregs_
12eb4     10 F0 07 F1 | 	add	ptra, #16
12eb8     6A 00 00 FF 
12ebc     64 E4 05 F1 | 	add	objptr, ##54372
12ec0     F2 1E 02 FB | 	rdlong	local01, objptr
12ec4     0F 17 02 F6 | 	mov	arg03, local01
12ec8     01 16 66 F0 | 	shl	arg03, #1
12ecc     0F 17 02 F1 | 	add	arg03, local01
12ed0     02 16 66 F0 | 	shl	arg03, #2
12ed4     03 00 00 FF 
12ed8     04 E4 85 F1 | 	sub	objptr, ##1540
12edc     F2 16 02 F1 | 	add	arg03, objptr
12ee0     0B 17 02 FB | 	rdlong	arg03, arg03
12ee4     0C 4E 05 F1 | 	add	fp, #12
12ee8     A7 16 62 FC | 	wrlong	arg03, fp
12eec                 | ' 
12eec                 | ' numpar=compiledline(lineptr_e).result.uresult
12eec                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
12eec     0C 4E 85 F1 | 	sub	fp, #12
12ef0     02 16 16 F2 | 	cmp	arg03, #2 wc
12ef4     67 00 00 FF 
12ef8     60 E4 85 F1 | 	sub	objptr, ##52832
12efc     0C 4E 05 C1 |  if_b	add	fp, #12
12f00     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12f04     0C 4E 85 C1 |  if_b	sub	fp, #12
12f08     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1510
12f0c     00 12 06 F6 | 	mov	arg01, #0
12f10     C8 EE B0 FD | 	call	#__system___getiolock_0474
12f14     FD 12 02 F6 | 	mov	arg01, result1
12f18     30 95 B0 FD | 	call	#__system___lockmem
12f1c     60 01 00 FF 
12f20     73 14 06 F6 | 	mov	arg02, ##@LR__4940
12f24     00 12 06 F6 | 	mov	arg01, #0
12f28     00 16 06 F6 | 	mov	arg03, #0
12f2c     20 A2 B0 FD | 	call	#__system___basic_print_string
12f30     00 12 06 F6 | 	mov	arg01, #0
12f34     A4 EE B0 FD | 	call	#__system___getiolock_0474
12f38     FD 00 68 FC | 	wrlong	#0, result1
12f3c     27 12 06 F6 | 	mov	arg01, #39
12f40     20 5D B0 FD | 	call	#_printerror
12f44     64 00 90 FD | 	jmp	#LR__1511
12f48                 | LR__1510
12f48     44 72 BF FD | 	call	#_pop
12f4c     A7 FA 61 FC | 	wrlong	result1, fp
12f50     04 4E 05 F1 | 	add	fp, #4
12f54     A7 FC 61 FC | 	wrlong	result2, fp
12f58     04 4E 05 F1 | 	add	fp, #4
12f5c     A7 FE 61 FC | 	wrlong	result3, fp
12f60     08 4E 85 F1 | 	sub	fp, #8
12f64     7B 00 00 FF 
12f68     6C E4 05 F1 | 	add	objptr, ##63084
12f6c     F2 1E 02 FB | 	rdlong	local01, objptr
12f70     7B 00 00 FF 
12f74     6C E4 85 F1 | 	sub	objptr, ##63084
12f78     A7 12 02 F6 | 	mov	arg01, fp
12f7c     B4 FB BF FD | 	call	#_converttofloat
12f80     FD 14 02 F6 | 	mov	arg02, result1
12f84     0F 13 02 F6 | 	mov	arg01, local01
12f88     3C C0 B0 FD | 	call	#__system___float_mul
12f8c     FD 12 02 F6 | 	mov	arg01, result1
12f90     70 C9 B0 FD | 	call	#__system____builtin_sinf
12f94     A7 FA 61 FC | 	wrlong	result1, fp
12f98     08 4E 05 F1 | 	add	fp, #8
12f9c     A7 3C 68 FC | 	wrlong	#30, fp
12fa0     08 4E 85 F1 | 	sub	fp, #8
12fa4     A7 12 02 F6 | 	mov	arg01, fp
12fa8     7C 72 BF FD | 	call	#_push
12fac                 | LR__1511
12fac     A7 F0 03 F6 | 	mov	ptra, fp
12fb0     B2 00 A0 FD | 	call	#popregs_
12fb4                 | _do_sin_ret
12fb4     2D 00 64 FD | 	ret
12fb8                 | 
12fb8                 | ' 
12fb8                 | ' sub do_cos
12fb8                 | _do_cos
12fb8     01 4A 05 F6 | 	mov	COUNT_, #1
12fbc     A8 00 A0 FD | 	call	#pushregs_
12fc0     10 F0 07 F1 | 	add	ptra, #16
12fc4     6A 00 00 FF 
12fc8     64 E4 05 F1 | 	add	objptr, ##54372
12fcc     F2 1E 02 FB | 	rdlong	local01, objptr
12fd0     0F 17 02 F6 | 	mov	arg03, local01
12fd4     01 16 66 F0 | 	shl	arg03, #1
12fd8     0F 17 02 F1 | 	add	arg03, local01
12fdc     02 16 66 F0 | 	shl	arg03, #2
12fe0     03 00 00 FF 
12fe4     04 E4 85 F1 | 	sub	objptr, ##1540
12fe8     F2 16 02 F1 | 	add	arg03, objptr
12fec     0B 17 02 FB | 	rdlong	arg03, arg03
12ff0     0C 4E 05 F1 | 	add	fp, #12
12ff4     A7 16 62 FC | 	wrlong	arg03, fp
12ff8                 | ' 
12ff8                 | ' numpar=compiledline(lineptr_e).result.uresult
12ff8                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
12ff8     0C 4E 85 F1 | 	sub	fp, #12
12ffc     02 16 16 F2 | 	cmp	arg03, #2 wc
13000     67 00 00 FF 
13004     60 E4 85 F1 | 	sub	objptr, ##52832
13008     0C 4E 05 C1 |  if_b	add	fp, #12
1300c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13010     0C 4E 85 C1 |  if_b	sub	fp, #12
13014     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1520
13018     00 12 06 F6 | 	mov	arg01, #0
1301c     BC ED B0 FD | 	call	#__system___getiolock_0474
13020     FD 12 02 F6 | 	mov	arg01, result1
13024     24 94 B0 FD | 	call	#__system___lockmem
13028     60 01 00 FF 
1302c     79 14 06 F6 | 	mov	arg02, ##@LR__4941
13030     00 12 06 F6 | 	mov	arg01, #0
13034     00 16 06 F6 | 	mov	arg03, #0
13038     14 A1 B0 FD | 	call	#__system___basic_print_string
1303c     00 12 06 F6 | 	mov	arg01, #0
13040     98 ED B0 FD | 	call	#__system___getiolock_0474
13044     FD 00 68 FC | 	wrlong	#0, result1
13048     27 12 06 F6 | 	mov	arg01, #39
1304c     14 5C B0 FD | 	call	#_printerror
13050     78 00 90 FD | 	jmp	#LR__1521
13054                 | LR__1520
13054     38 71 BF FD | 	call	#_pop
13058     A7 FA 61 FC | 	wrlong	result1, fp
1305c     04 4E 05 F1 | 	add	fp, #4
13060     A7 FC 61 FC | 	wrlong	result2, fp
13064     04 4E 05 F1 | 	add	fp, #4
13068     A7 FE 61 FC | 	wrlong	result3, fp
1306c     08 4E 85 F1 | 	sub	fp, #8
13070     7B 00 00 FF 
13074     6C E4 05 F1 | 	add	objptr, ##63084
13078     F2 1E 02 FB | 	rdlong	local01, objptr
1307c     7B 00 00 FF 
13080     6C E4 85 F1 | 	sub	objptr, ##63084
13084     A7 12 02 F6 | 	mov	arg01, fp
13088     A8 FA BF FD | 	call	#_converttofloat
1308c     FD 14 02 F6 | 	mov	arg02, result1
13090     0F 13 02 F6 | 	mov	arg01, local01
13094     30 BF B0 FD | 	call	#__system___float_mul
13098     FD 14 02 F6 | 	mov	arg02, result1
1309c     87 E4 1F FF 
130a0     DB 13 06 F6 | 	mov	arg01, ##1070141403
130a4     1F 14 E6 F4 | 	bitnot	arg02, #31
130a8     4C BB B0 FD | 	call	#__system___float_add
130ac     FD 12 02 F6 | 	mov	arg01, result1
130b0     50 C8 B0 FD | 	call	#__system____builtin_sinf
130b4     A7 FA 61 FC | 	wrlong	result1, fp
130b8     08 4E 05 F1 | 	add	fp, #8
130bc     A7 3C 68 FC | 	wrlong	#30, fp
130c0     08 4E 85 F1 | 	sub	fp, #8
130c4     A7 12 02 F6 | 	mov	arg01, fp
130c8     5C 71 BF FD | 	call	#_push
130cc                 | LR__1521
130cc     A7 F0 03 F6 | 	mov	ptra, fp
130d0     B2 00 A0 FD | 	call	#popregs_
130d4                 | _do_cos_ret
130d4     2D 00 64 FD | 	ret
130d8                 | 
130d8                 | ' 
130d8                 | ' sub do_tan
130d8                 | _do_tan
130d8     01 4A 05 F6 | 	mov	COUNT_, #1
130dc     A8 00 A0 FD | 	call	#pushregs_
130e0     10 F0 07 F1 | 	add	ptra, #16
130e4     6A 00 00 FF 
130e8     64 E4 05 F1 | 	add	objptr, ##54372
130ec     F2 1E 02 FB | 	rdlong	local01, objptr
130f0     0F 17 02 F6 | 	mov	arg03, local01
130f4     01 16 66 F0 | 	shl	arg03, #1
130f8     0F 17 02 F1 | 	add	arg03, local01
130fc     02 16 66 F0 | 	shl	arg03, #2
13100     03 00 00 FF 
13104     04 E4 85 F1 | 	sub	objptr, ##1540
13108     F2 16 02 F1 | 	add	arg03, objptr
1310c     0B 17 02 FB | 	rdlong	arg03, arg03
13110     0C 4E 05 F1 | 	add	fp, #12
13114     A7 16 62 FC | 	wrlong	arg03, fp
13118                 | ' 
13118                 | ' numpar=compiledline(lineptr_e).result.uresult
13118                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
13118     0C 4E 85 F1 | 	sub	fp, #12
1311c     02 16 16 F2 | 	cmp	arg03, #2 wc
13120     67 00 00 FF 
13124     60 E4 85 F1 | 	sub	objptr, ##52832
13128     0C 4E 05 C1 |  if_b	add	fp, #12
1312c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13130     0C 4E 85 C1 |  if_b	sub	fp, #12
13134     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1530
13138     00 12 06 F6 | 	mov	arg01, #0
1313c     9C EC B0 FD | 	call	#__system___getiolock_0474
13140     FD 12 02 F6 | 	mov	arg01, result1
13144     04 93 B0 FD | 	call	#__system___lockmem
13148     60 01 00 FF 
1314c     7F 14 06 F6 | 	mov	arg02, ##@LR__4942
13150     00 12 06 F6 | 	mov	arg01, #0
13154     00 16 06 F6 | 	mov	arg03, #0
13158     F4 9F B0 FD | 	call	#__system___basic_print_string
1315c     00 12 06 F6 | 	mov	arg01, #0
13160     78 EC B0 FD | 	call	#__system___getiolock_0474
13164     FD 00 68 FC | 	wrlong	#0, result1
13168     27 12 06 F6 | 	mov	arg01, #39
1316c     F4 5A B0 FD | 	call	#_printerror
13170     64 00 90 FD | 	jmp	#LR__1531
13174                 | LR__1530
13174     18 70 BF FD | 	call	#_pop
13178     A7 FA 61 FC | 	wrlong	result1, fp
1317c     04 4E 05 F1 | 	add	fp, #4
13180     A7 FC 61 FC | 	wrlong	result2, fp
13184     04 4E 05 F1 | 	add	fp, #4
13188     A7 FE 61 FC | 	wrlong	result3, fp
1318c     08 4E 85 F1 | 	sub	fp, #8
13190     7B 00 00 FF 
13194     6C E4 05 F1 | 	add	objptr, ##63084
13198     F2 1E 02 FB | 	rdlong	local01, objptr
1319c     7B 00 00 FF 
131a0     6C E4 85 F1 | 	sub	objptr, ##63084
131a4     A7 12 02 F6 | 	mov	arg01, fp
131a8     88 F9 BF FD | 	call	#_converttofloat
131ac     FD 14 02 F6 | 	mov	arg02, result1
131b0     0F 13 02 F6 | 	mov	arg01, local01
131b4     10 BE B0 FD | 	call	#__system___float_mul
131b8     FD 12 02 F6 | 	mov	arg01, result1
131bc     90 C8 B0 FD | 	call	#__system____builtin_tanf
131c0     A7 FA 61 FC | 	wrlong	result1, fp
131c4     08 4E 05 F1 | 	add	fp, #8
131c8     A7 3C 68 FC | 	wrlong	#30, fp
131cc     08 4E 85 F1 | 	sub	fp, #8
131d0     A7 12 02 F6 | 	mov	arg01, fp
131d4     50 70 BF FD | 	call	#_push
131d8                 | LR__1531
131d8     A7 F0 03 F6 | 	mov	ptra, fp
131dc     B2 00 A0 FD | 	call	#popregs_
131e0                 | _do_tan_ret
131e0     2D 00 64 FD | 	ret
131e4                 | 
131e4                 | ' 
131e4                 | ' sub do_asin
131e4                 | _do_asin
131e4     01 4A 05 F6 | 	mov	COUNT_, #1
131e8     A8 00 A0 FD | 	call	#pushregs_
131ec     10 F0 07 F1 | 	add	ptra, #16
131f0     6A 00 00 FF 
131f4     64 E4 05 F1 | 	add	objptr, ##54372
131f8     F2 1E 02 FB | 	rdlong	local01, objptr
131fc     0F 17 02 F6 | 	mov	arg03, local01
13200     01 16 66 F0 | 	shl	arg03, #1
13204     0F 17 02 F1 | 	add	arg03, local01
13208     02 16 66 F0 | 	shl	arg03, #2
1320c     03 00 00 FF 
13210     04 E4 85 F1 | 	sub	objptr, ##1540
13214     F2 16 02 F1 | 	add	arg03, objptr
13218     0B 17 02 FB | 	rdlong	arg03, arg03
1321c     0C 4E 05 F1 | 	add	fp, #12
13220     A7 16 62 FC | 	wrlong	arg03, fp
13224                 | ' 
13224                 | ' numpar=compiledline(lineptr_e).result.uresult
13224                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
13224     0C 4E 85 F1 | 	sub	fp, #12
13228     02 16 16 F2 | 	cmp	arg03, #2 wc
1322c     67 00 00 FF 
13230     60 E4 85 F1 | 	sub	objptr, ##52832
13234     0C 4E 05 C1 |  if_b	add	fp, #12
13238     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1323c     0C 4E 85 C1 |  if_b	sub	fp, #12
13240     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
13244     00 12 06 F6 | 	mov	arg01, #0
13248     90 EB B0 FD | 	call	#__system___getiolock_0474
1324c     FD 12 02 F6 | 	mov	arg01, result1
13250     F8 91 B0 FD | 	call	#__system___lockmem
13254     60 01 00 FF 
13258     85 14 06 F6 | 	mov	arg02, ##@LR__4943
1325c     00 12 06 F6 | 	mov	arg01, #0
13260     00 16 06 F6 | 	mov	arg03, #0
13264     E8 9E B0 FD | 	call	#__system___basic_print_string
13268     00 12 06 F6 | 	mov	arg01, #0
1326c     6C EB B0 FD | 	call	#__system___getiolock_0474
13270     FD 00 68 FC | 	wrlong	#0, result1
13274     27 12 06 F6 | 	mov	arg01, #39
13278     E8 59 B0 FD | 	call	#_printerror
1327c     64 00 90 FD | 	jmp	#LR__1541
13280                 | LR__1540
13280     0C 6F BF FD | 	call	#_pop
13284     FF 1E 02 F6 | 	mov	local01, result3
13288     A7 FA 61 FC | 	wrlong	result1, fp
1328c     04 4E 05 F1 | 	add	fp, #4
13290     A7 FC 61 FC | 	wrlong	result2, fp
13294     04 4E 05 F1 | 	add	fp, #4
13298     A7 1E 62 FC | 	wrlong	local01, fp
1329c     08 4E 85 F1 | 	sub	fp, #8
132a0     A7 12 02 F6 | 	mov	arg01, fp
132a4     8C F8 BF FD | 	call	#_converttofloat
132a8     FD 12 02 F6 | 	mov	arg01, result1
132ac     E8 C7 B0 FD | 	call	#__system____builtin_asinf
132b0     FD 12 02 F6 | 	mov	arg01, result1
132b4     7B 00 00 FF 
132b8     70 E4 05 F1 | 	add	objptr, ##63088
132bc     F2 14 02 FB | 	rdlong	arg02, objptr
132c0     7B 00 00 FF 
132c4     70 E4 85 F1 | 	sub	objptr, ##63088
132c8     FC BC B0 FD | 	call	#__system___float_mul
132cc     A7 FA 61 FC | 	wrlong	result1, fp
132d0     08 4E 05 F1 | 	add	fp, #8
132d4     A7 3C 68 FC | 	wrlong	#30, fp
132d8     08 4E 85 F1 | 	sub	fp, #8
132dc     A7 12 02 F6 | 	mov	arg01, fp
132e0     44 6F BF FD | 	call	#_push
132e4                 | LR__1541
132e4     A7 F0 03 F6 | 	mov	ptra, fp
132e8     B2 00 A0 FD | 	call	#popregs_
132ec                 | _do_asin_ret
132ec     2D 00 64 FD | 	ret
132f0                 | 
132f0                 | ' 
132f0                 | ' sub do_acos
132f0                 | _do_acos
132f0     01 4A 05 F6 | 	mov	COUNT_, #1
132f4     A8 00 A0 FD | 	call	#pushregs_
132f8     10 F0 07 F1 | 	add	ptra, #16
132fc     6A 00 00 FF 
13300     64 E4 05 F1 | 	add	objptr, ##54372
13304     F2 1E 02 FB | 	rdlong	local01, objptr
13308     0F 17 02 F6 | 	mov	arg03, local01
1330c     01 16 66 F0 | 	shl	arg03, #1
13310     0F 17 02 F1 | 	add	arg03, local01
13314     02 16 66 F0 | 	shl	arg03, #2
13318     03 00 00 FF 
1331c     04 E4 85 F1 | 	sub	objptr, ##1540
13320     F2 16 02 F1 | 	add	arg03, objptr
13324     0B 17 02 FB | 	rdlong	arg03, arg03
13328     0C 4E 05 F1 | 	add	fp, #12
1332c     A7 16 62 FC | 	wrlong	arg03, fp
13330                 | ' 
13330                 | ' numpar=compiledline(lineptr_e).result.uresult
13330                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
13330     0C 4E 85 F1 | 	sub	fp, #12
13334     02 16 16 F2 | 	cmp	arg03, #2 wc
13338     67 00 00 FF 
1333c     60 E4 85 F1 | 	sub	objptr, ##52832
13340     0C 4E 05 C1 |  if_b	add	fp, #12
13344     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13348     0C 4E 85 C1 |  if_b	sub	fp, #12
1334c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1550
13350     00 12 06 F6 | 	mov	arg01, #0
13354     84 EA B0 FD | 	call	#__system___getiolock_0474
13358     FD 12 02 F6 | 	mov	arg01, result1
1335c     EC 90 B0 FD | 	call	#__system___lockmem
13360     60 01 00 FF 
13364     8C 14 06 F6 | 	mov	arg02, ##@LR__4944
13368     00 12 06 F6 | 	mov	arg01, #0
1336c     00 16 06 F6 | 	mov	arg03, #0
13370     DC 9D B0 FD | 	call	#__system___basic_print_string
13374     00 12 06 F6 | 	mov	arg01, #0
13378     60 EA B0 FD | 	call	#__system___getiolock_0474
1337c     FD 00 68 FC | 	wrlong	#0, result1
13380     27 12 06 F6 | 	mov	arg01, #39
13384     DC 58 B0 FD | 	call	#_printerror
13388     64 00 90 FD | 	jmp	#LR__1551
1338c                 | LR__1550
1338c     00 6E BF FD | 	call	#_pop
13390     FF 1E 02 F6 | 	mov	local01, result3
13394     A7 FA 61 FC | 	wrlong	result1, fp
13398     04 4E 05 F1 | 	add	fp, #4
1339c     A7 FC 61 FC | 	wrlong	result2, fp
133a0     04 4E 05 F1 | 	add	fp, #4
133a4     A7 1E 62 FC | 	wrlong	local01, fp
133a8     08 4E 85 F1 | 	sub	fp, #8
133ac     A7 12 02 F6 | 	mov	arg01, fp
133b0     80 F7 BF FD | 	call	#_converttofloat
133b4     FD 12 02 F6 | 	mov	arg01, result1
133b8     28 C7 B0 FD | 	call	#__system____builtin_acosf
133bc     FD 12 02 F6 | 	mov	arg01, result1
133c0     7B 00 00 FF 
133c4     70 E4 05 F1 | 	add	objptr, ##63088
133c8     F2 14 02 FB | 	rdlong	arg02, objptr
133cc     7B 00 00 FF 
133d0     70 E4 85 F1 | 	sub	objptr, ##63088
133d4     F0 BB B0 FD | 	call	#__system___float_mul
133d8     A7 FA 61 FC | 	wrlong	result1, fp
133dc     08 4E 05 F1 | 	add	fp, #8
133e0     A7 3C 68 FC | 	wrlong	#30, fp
133e4     08 4E 85 F1 | 	sub	fp, #8
133e8     A7 12 02 F6 | 	mov	arg01, fp
133ec     38 6E BF FD | 	call	#_push
133f0                 | LR__1551
133f0     A7 F0 03 F6 | 	mov	ptra, fp
133f4     B2 00 A0 FD | 	call	#popregs_
133f8                 | _do_acos_ret
133f8     2D 00 64 FD | 	ret
133fc                 | 
133fc                 | ' 
133fc                 | ' sub do_atn
133fc                 | _do_atn
133fc     01 4A 05 F6 | 	mov	COUNT_, #1
13400     A8 00 A0 FD | 	call	#pushregs_
13404     10 F0 07 F1 | 	add	ptra, #16
13408     6A 00 00 FF 
1340c     64 E4 05 F1 | 	add	objptr, ##54372
13410     F2 1E 02 FB | 	rdlong	local01, objptr
13414     0F 17 02 F6 | 	mov	arg03, local01
13418     01 16 66 F0 | 	shl	arg03, #1
1341c     0F 17 02 F1 | 	add	arg03, local01
13420     02 16 66 F0 | 	shl	arg03, #2
13424     03 00 00 FF 
13428     04 E4 85 F1 | 	sub	objptr, ##1540
1342c     F2 16 02 F1 | 	add	arg03, objptr
13430     0B 17 02 FB | 	rdlong	arg03, arg03
13434     0C 4E 05 F1 | 	add	fp, #12
13438     A7 16 62 FC | 	wrlong	arg03, fp
1343c                 | ' 
1343c                 | ' numpar=compiledline(lineptr_e).result.uresult
1343c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
1343c     0C 4E 85 F1 | 	sub	fp, #12
13440     02 16 16 F2 | 	cmp	arg03, #2 wc
13444     67 00 00 FF 
13448     60 E4 85 F1 | 	sub	objptr, ##52832
1344c     0C 4E 05 C1 |  if_b	add	fp, #12
13450     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13454     0C 4E 85 C1 |  if_b	sub	fp, #12
13458     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
1345c     00 12 06 F6 | 	mov	arg01, #0
13460     78 E9 B0 FD | 	call	#__system___getiolock_0474
13464     FD 12 02 F6 | 	mov	arg01, result1
13468     E0 8F B0 FD | 	call	#__system___lockmem
1346c     60 01 00 FF 
13470     93 14 06 F6 | 	mov	arg02, ##@LR__4945
13474     00 12 06 F6 | 	mov	arg01, #0
13478     00 16 06 F6 | 	mov	arg03, #0
1347c     D0 9C B0 FD | 	call	#__system___basic_print_string
13480     00 12 06 F6 | 	mov	arg01, #0
13484     54 E9 B0 FD | 	call	#__system___getiolock_0474
13488     FD 00 68 FC | 	wrlong	#0, result1
1348c     27 12 06 F6 | 	mov	arg01, #39
13490     D0 57 B0 FD | 	call	#_printerror
13494     6C 00 90 FD | 	jmp	#LR__1561
13498                 | LR__1560
13498     F4 6C BF FD | 	call	#_pop
1349c     FF 1E 02 F6 | 	mov	local01, result3
134a0     A7 FA 61 FC | 	wrlong	result1, fp
134a4     04 4E 05 F1 | 	add	fp, #4
134a8     A7 FC 61 FC | 	wrlong	result2, fp
134ac     04 4E 05 F1 | 	add	fp, #4
134b0     A7 1E 62 FC | 	wrlong	local01, fp
134b4     08 4E 85 F1 | 	sub	fp, #8
134b8     A7 12 02 F6 | 	mov	arg01, fp
134bc     74 F6 BF FD | 	call	#_converttofloat
134c0     FD 12 02 F6 | 	mov	arg01, result1
134c4     00 C0 1F FF 
134c8     00 14 06 F6 | 	mov	arg02, ##1065353216
134cc     60 C6 B0 FD | 	call	#__system____builtin_atan2f
134d0     FD 12 02 F6 | 	mov	arg01, result1
134d4     7B 00 00 FF 
134d8     70 E4 05 F1 | 	add	objptr, ##63088
134dc     F2 14 02 FB | 	rdlong	arg02, objptr
134e0     7B 00 00 FF 
134e4     70 E4 85 F1 | 	sub	objptr, ##63088
134e8     DC BA B0 FD | 	call	#__system___float_mul
134ec     A7 FA 61 FC | 	wrlong	result1, fp
134f0     08 4E 05 F1 | 	add	fp, #8
134f4     A7 3C 68 FC | 	wrlong	#30, fp
134f8     08 4E 85 F1 | 	sub	fp, #8
134fc     A7 12 02 F6 | 	mov	arg01, fp
13500     24 6D BF FD | 	call	#_push
13504                 | LR__1561
13504     A7 F0 03 F6 | 	mov	ptra, fp
13508     B2 00 A0 FD | 	call	#popregs_
1350c                 | _do_atn_ret
1350c     2D 00 64 FD | 	ret
13510                 | 
13510                 | ' 
13510                 | ' sub do_sqr
13510                 | _do_sqr
13510     01 4A 05 F6 | 	mov	COUNT_, #1
13514     A8 00 A0 FD | 	call	#pushregs_
13518     10 F0 07 F1 | 	add	ptra, #16
1351c     6A 00 00 FF 
13520     64 E4 05 F1 | 	add	objptr, ##54372
13524     F2 1E 02 FB | 	rdlong	local01, objptr
13528     0F 17 02 F6 | 	mov	arg03, local01
1352c     01 16 66 F0 | 	shl	arg03, #1
13530     0F 17 02 F1 | 	add	arg03, local01
13534     02 16 66 F0 | 	shl	arg03, #2
13538     03 00 00 FF 
1353c     04 E4 85 F1 | 	sub	objptr, ##1540
13540     F2 16 02 F1 | 	add	arg03, objptr
13544     0B 17 02 FB | 	rdlong	arg03, arg03
13548     0C 4E 05 F1 | 	add	fp, #12
1354c     A7 16 62 FC | 	wrlong	arg03, fp
13550                 | ' 
13550                 | ' numpar=compiledline(lineptr_e).result.uresult
13550                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
13550     0C 4E 85 F1 | 	sub	fp, #12
13554     02 16 16 F2 | 	cmp	arg03, #2 wc
13558     67 00 00 FF 
1355c     60 E4 85 F1 | 	sub	objptr, ##52832
13560     0C 4E 05 C1 |  if_b	add	fp, #12
13564     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13568     0C 4E 85 C1 |  if_b	sub	fp, #12
1356c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
13570     00 12 06 F6 | 	mov	arg01, #0
13574     64 E8 B0 FD | 	call	#__system___getiolock_0474
13578     FD 12 02 F6 | 	mov	arg01, result1
1357c     CC 8E B0 FD | 	call	#__system___lockmem
13580     60 01 00 FF 
13584     99 14 06 F6 | 	mov	arg02, ##@LR__4946
13588     00 12 06 F6 | 	mov	arg01, #0
1358c     00 16 06 F6 | 	mov	arg03, #0
13590     BC 9B B0 FD | 	call	#__system___basic_print_string
13594     00 12 06 F6 | 	mov	arg01, #0
13598     40 E8 B0 FD | 	call	#__system___getiolock_0474
1359c     FD 00 68 FC | 	wrlong	#0, result1
135a0     27 12 06 F6 | 	mov	arg01, #39
135a4     BC 56 B0 FD | 	call	#_printerror
135a8     48 00 90 FD | 	jmp	#LR__1571
135ac                 | LR__1570
135ac     E0 6B BF FD | 	call	#_pop
135b0     FF 1E 02 F6 | 	mov	local01, result3
135b4     A7 FA 61 FC | 	wrlong	result1, fp
135b8     04 4E 05 F1 | 	add	fp, #4
135bc     A7 FC 61 FC | 	wrlong	result2, fp
135c0     04 4E 05 F1 | 	add	fp, #4
135c4     A7 1E 62 FC | 	wrlong	local01, fp
135c8     08 4E 85 F1 | 	sub	fp, #8
135cc     A7 12 02 F6 | 	mov	arg01, fp
135d0     60 F5 BF FD | 	call	#_converttofloat
135d4     FD 12 02 F6 | 	mov	arg01, result1
135d8     14 B9 B0 FD | 	call	#__system___float_sqrt
135dc     A7 FA 61 FC | 	wrlong	result1, fp
135e0     08 4E 05 F1 | 	add	fp, #8
135e4     A7 3C 68 FC | 	wrlong	#30, fp
135e8     08 4E 85 F1 | 	sub	fp, #8
135ec     A7 12 02 F6 | 	mov	arg01, fp
135f0     34 6C BF FD | 	call	#_push
135f4                 | LR__1571
135f4     A7 F0 03 F6 | 	mov	ptra, fp
135f8     B2 00 A0 FD | 	call	#popregs_
135fc                 | _do_sqr_ret
135fc     2D 00 64 FD | 	ret
13600                 | 
13600                 | ' 
13600                 | ' sub do_stick
13600                 | _do_stick
13600     01 4A 05 F6 | 	mov	COUNT_, #1
13604     A8 00 A0 FD | 	call	#pushregs_
13608     10 F0 07 F1 | 	add	ptra, #16
1360c     6A 00 00 FF 
13610     64 E4 05 F1 | 	add	objptr, ##54372
13614     F2 1E 02 FB | 	rdlong	local01, objptr
13618     0F 17 02 F6 | 	mov	arg03, local01
1361c     01 16 66 F0 | 	shl	arg03, #1
13620     0F 17 02 F1 | 	add	arg03, local01
13624     02 16 66 F0 | 	shl	arg03, #2
13628     03 00 00 FF 
1362c     04 E4 85 F1 | 	sub	objptr, ##1540
13630     F2 16 02 F1 | 	add	arg03, objptr
13634     0B 17 02 FB | 	rdlong	arg03, arg03
13638     0C 4E 05 F1 | 	add	fp, #12
1363c     A7 16 62 FC | 	wrlong	arg03, fp
13640                 | ' 
13640                 | ' numpar=compiledline(lineptr_e).result.uresult
13640                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
13640     0C 4E 85 F1 | 	sub	fp, #12
13644     02 16 16 F2 | 	cmp	arg03, #2 wc
13648     67 00 00 FF 
1364c     60 E4 85 F1 | 	sub	objptr, ##52832
13650     3C 00 90 CD |  if_b	jmp	#LR__1580
13654     00 12 06 F6 | 	mov	arg01, #0
13658     80 E7 B0 FD | 	call	#__system___getiolock_0474
1365c     FD 12 02 F6 | 	mov	arg01, result1
13660     E8 8D B0 FD | 	call	#__system___lockmem
13664     60 01 00 FF 
13668     9F 14 06 F6 | 	mov	arg02, ##@LR__4947
1366c     00 12 06 F6 | 	mov	arg01, #0
13670     00 16 06 F6 | 	mov	arg03, #0
13674     D8 9A B0 FD | 	call	#__system___basic_print_string
13678     00 12 06 F6 | 	mov	arg01, #0
1367c     5C E7 B0 FD | 	call	#__system___getiolock_0474
13680     FD 00 68 FC | 	wrlong	#0, result1
13684     27 12 06 F6 | 	mov	arg01, #39
13688     D8 55 B0 FD | 	call	#_printerror
1368c     E8 00 90 FD | 	jmp	#LR__1584
13690                 | LR__1580
13690                 | ' 
13690                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
13690     0C 4E 05 F1 | 	add	fp, #12
13694     A7 FE 09 FB | 	rdlong	result3, fp wz
13698     0C 4E 85 F1 | 	sub	fp, #12
1369c     30 00 90 5D |  if_ne	jmp	#LR__1581
136a0     7A 00 00 FF 
136a4     E0 E5 05 F1 | 	add	objptr, ##62944
136a8     F2 1E 02 FB | 	rdlong	local01, objptr
136ac     7A 00 00 FF 
136b0     E0 E5 85 F1 | 	sub	objptr, ##62944
136b4     A7 1E 62 FC | 	wrlong	local01, fp
136b8     08 4E 05 F1 | 	add	fp, #8
136bc     A7 3A 68 FC | 	wrlong	#29, fp
136c0     08 4E 85 F1 | 	sub	fp, #8
136c4     A7 12 02 F6 | 	mov	arg01, fp
136c8     5C 6B BF FD | 	call	#_push
136cc     A8 00 90 FD | 	jmp	#LR__1584
136d0                 | LR__1581
136d0     BC 6A BF FD | 	call	#_pop
136d4     A7 FA 61 FC | 	wrlong	result1, fp
136d8     04 4E 05 F1 | 	add	fp, #4
136dc     A7 FC 61 FC | 	wrlong	result2, fp
136e0     04 4E 05 F1 | 	add	fp, #4
136e4     A7 FE 61 FC | 	wrlong	result3, fp
136e8                 | ' 
136e8                 | ' t1=pop()
136e8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
136e8     08 4E 85 F1 | 	sub	fp, #8
136ec     1C FE 0D F2 | 	cmp	result3, #28 wz
136f0     08 4E 05 51 |  if_ne	add	fp, #8
136f4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
136f8     08 4E 85 51 |  if_ne	sub	fp, #8
136fc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13700     6C 00 90 5D |  if_ne	jmp	#LR__1583
13704     A7 1E 02 FB | 	rdlong	local01, fp
13708     7B 00 00 FF 
1370c     CC E4 05 F1 | 	add	objptr, ##63180
13710     F2 1E 62 FC | 	wrlong	local01, objptr
13714                 | '   q=t1.result.uresult
13714                 | '   if q<7 then 
13714     7B 00 00 FF 
13718     CC E4 85 F1 | 	sub	objptr, ##63180
1371c     07 1E 56 F2 | 	cmps	local01, #7 wc
13720     40 00 90 3D |  if_ae	jmp	#LR__1582
13724     7B 00 00 FF 
13728     CC E4 05 F1 | 	add	objptr, ##63180
1372c     F2 1E 02 FB | 	rdlong	local01, objptr
13730     02 1E 66 F0 | 	shl	local01, #2
13734     EC E4 85 F1 | 	sub	objptr, #236
13738     F2 1E 02 F1 | 	add	local01, objptr
1373c     0F 1F 02 FB | 	rdlong	local01, local01
13740     A7 1E 62 FC | 	wrlong	local01, fp
13744     08 4E 05 F1 | 	add	fp, #8
13748     A7 3A 68 FC | 	wrlong	#29, fp
1374c     08 4E 85 F1 | 	sub	fp, #8
13750     A7 12 02 F6 | 	mov	arg01, fp
13754     7A 00 00 FF 
13758     E0 E5 85 F1 | 	sub	objptr, ##62944
1375c     C8 6A BF FD | 	call	#_push
13760                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
13760     14 00 90 FD | 	jmp	#LR__1584
13764                 | LR__1582
13764     29 12 06 F6 | 	mov	arg01, #41
13768     F8 54 B0 FD | 	call	#_printerror
1376c                 | '      printerror(41) : return
1376c     08 00 90 FD | 	jmp	#LR__1584
13770                 | LR__1583
13770     29 12 06 F6 | 	mov	arg01, #41
13774     EC 54 B0 FD | 	call	#_printerror
13778                 | LR__1584
13778     A7 F0 03 F6 | 	mov	ptra, fp
1377c     B2 00 A0 FD | 	call	#popregs_
13780                 | _do_stick_ret
13780     2D 00 64 FD | 	ret
13784                 | 
13784                 | ' 
13784                 | ' sub do_strig
13784                 | _do_strig
13784     01 4A 05 F6 | 	mov	COUNT_, #1
13788     A8 00 A0 FD | 	call	#pushregs_
1378c     10 F0 07 F1 | 	add	ptra, #16
13790     6A 00 00 FF 
13794     64 E4 05 F1 | 	add	objptr, ##54372
13798     F2 1E 02 FB | 	rdlong	local01, objptr
1379c     0F 17 02 F6 | 	mov	arg03, local01
137a0     01 16 66 F0 | 	shl	arg03, #1
137a4     0F 17 02 F1 | 	add	arg03, local01
137a8     02 16 66 F0 | 	shl	arg03, #2
137ac     03 00 00 FF 
137b0     04 E4 85 F1 | 	sub	objptr, ##1540
137b4     F2 16 02 F1 | 	add	arg03, objptr
137b8     0B 17 02 FB | 	rdlong	arg03, arg03
137bc     0C 4E 05 F1 | 	add	fp, #12
137c0     A7 16 62 FC | 	wrlong	arg03, fp
137c4                 | ' 
137c4                 | ' numpar=compiledline(lineptr_e).result.uresult
137c4                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
137c4     0C 4E 85 F1 | 	sub	fp, #12
137c8     02 16 16 F2 | 	cmp	arg03, #2 wc
137cc     67 00 00 FF 
137d0     60 E4 85 F1 | 	sub	objptr, ##52832
137d4     3C 00 90 CD |  if_b	jmp	#LR__1590
137d8     00 12 06 F6 | 	mov	arg01, #0
137dc     FC E5 B0 FD | 	call	#__system___getiolock_0474
137e0     FD 12 02 F6 | 	mov	arg01, result1
137e4     64 8C B0 FD | 	call	#__system___lockmem
137e8     60 01 00 FF 
137ec     A7 14 06 F6 | 	mov	arg02, ##@LR__4948
137f0     00 12 06 F6 | 	mov	arg01, #0
137f4     00 16 06 F6 | 	mov	arg03, #0
137f8     54 99 B0 FD | 	call	#__system___basic_print_string
137fc     00 12 06 F6 | 	mov	arg01, #0
13800     D8 E5 B0 FD | 	call	#__system___getiolock_0474
13804     FD 00 68 FC | 	wrlong	#0, result1
13808     27 12 06 F6 | 	mov	arg01, #39
1380c     54 54 B0 FD | 	call	#_printerror
13810     E8 00 90 FD | 	jmp	#LR__1594
13814                 | LR__1590
13814                 | ' 
13814                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
13814     0C 4E 05 F1 | 	add	fp, #12
13818     A7 FE 09 FB | 	rdlong	result3, fp wz
1381c     0C 4E 85 F1 | 	sub	fp, #12
13820     30 00 90 5D |  if_ne	jmp	#LR__1591
13824     7A 00 00 FF 
13828     FC E5 05 F1 | 	add	objptr, ##62972
1382c     F2 1E 02 FB | 	rdlong	local01, objptr
13830     7A 00 00 FF 
13834     FC E5 85 F1 | 	sub	objptr, ##62972
13838     A7 1E 62 FC | 	wrlong	local01, fp
1383c     08 4E 05 F1 | 	add	fp, #8
13840     A7 3A 68 FC | 	wrlong	#29, fp
13844     08 4E 85 F1 | 	sub	fp, #8
13848     A7 12 02 F6 | 	mov	arg01, fp
1384c     D8 69 BF FD | 	call	#_push
13850     A8 00 90 FD | 	jmp	#LR__1594
13854                 | LR__1591
13854     38 69 BF FD | 	call	#_pop
13858     A7 FA 61 FC | 	wrlong	result1, fp
1385c     04 4E 05 F1 | 	add	fp, #4
13860     A7 FC 61 FC | 	wrlong	result2, fp
13864     04 4E 05 F1 | 	add	fp, #4
13868     A7 FE 61 FC | 	wrlong	result3, fp
1386c                 | ' 
1386c                 | ' t1=pop()
1386c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1386c     08 4E 85 F1 | 	sub	fp, #8
13870     1C FE 0D F2 | 	cmp	result3, #28 wz
13874     08 4E 05 51 |  if_ne	add	fp, #8
13878     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1387c     08 4E 85 51 |  if_ne	sub	fp, #8
13880     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13884     6C 00 90 5D |  if_ne	jmp	#LR__1593
13888     A7 1E 02 FB | 	rdlong	local01, fp
1388c     7B 00 00 FF 
13890     CC E4 05 F1 | 	add	objptr, ##63180
13894     F2 1E 62 FC | 	wrlong	local01, objptr
13898                 | '   q=t1.result.uresult
13898                 | '   if q<7 then 
13898     7B 00 00 FF 
1389c     CC E4 85 F1 | 	sub	objptr, ##63180
138a0     07 1E 56 F2 | 	cmps	local01, #7 wc
138a4     40 00 90 3D |  if_ae	jmp	#LR__1592
138a8     7B 00 00 FF 
138ac     CC E4 05 F1 | 	add	objptr, ##63180
138b0     F2 1E 02 FB | 	rdlong	local01, objptr
138b4     02 1E 66 F0 | 	shl	local01, #2
138b8     D0 E4 85 F1 | 	sub	objptr, #208
138bc     F2 1E 02 F1 | 	add	local01, objptr
138c0     0F 1F 02 FB | 	rdlong	local01, local01
138c4     A7 1E 62 FC | 	wrlong	local01, fp
138c8     08 4E 05 F1 | 	add	fp, #8
138cc     A7 3A 68 FC | 	wrlong	#29, fp
138d0     08 4E 85 F1 | 	sub	fp, #8
138d4     A7 12 02 F6 | 	mov	arg01, fp
138d8     7A 00 00 FF 
138dc     FC E5 85 F1 | 	sub	objptr, ##62972
138e0     44 69 BF FD | 	call	#_push
138e4                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
138e4     14 00 90 FD | 	jmp	#LR__1594
138e8                 | LR__1592
138e8     29 12 06 F6 | 	mov	arg01, #41
138ec     74 53 B0 FD | 	call	#_printerror
138f0                 | '      printerror(41) : return
138f0     08 00 90 FD | 	jmp	#LR__1594
138f4                 | LR__1593
138f4     29 12 06 F6 | 	mov	arg01, #41
138f8     68 53 B0 FD | 	call	#_printerror
138fc                 | LR__1594
138fc     A7 F0 03 F6 | 	mov	ptra, fp
13900     B2 00 A0 FD | 	call	#popregs_
13904                 | _do_strig_ret
13904     2D 00 64 FD | 	ret
13908                 | 
13908                 | ' 
13908                 | ' sub do_getpixel
13908                 | _do_getpixel
13908     00 4A 05 F6 | 	mov	COUNT_, #0
1390c     A8 00 A0 FD | 	call	#pushregs_
13910     24 F0 07 F1 | 	add	ptra, #36
13914     6A 00 00 FF 
13918     64 E4 05 F1 | 	add	objptr, ##54372
1391c     F2 16 02 FB | 	rdlong	arg03, objptr
13920     0B 15 02 F6 | 	mov	arg02, arg03
13924     01 14 66 F0 | 	shl	arg02, #1
13928     0B 15 02 F1 | 	add	arg02, arg03
1392c     02 14 66 F0 | 	shl	arg02, #2
13930     03 00 00 FF 
13934     04 E4 85 F1 | 	sub	objptr, ##1540
13938     F2 14 02 F1 | 	add	arg02, objptr
1393c     0A 17 02 FB | 	rdlong	arg03, arg02
13940     18 4E 05 F1 | 	add	fp, #24
13944     A7 16 62 FC | 	wrlong	arg03, fp
13948                 | ' 
13948                 | ' numpar=compiledline(lineptr_e).result.uresult
13948                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
13948     18 4E 85 F1 | 	sub	fp, #24
1394c     02 16 0E F2 | 	cmp	arg03, #2 wz
13950     67 00 00 FF 
13954     60 E4 85 F1 | 	sub	objptr, ##52832
13958     3C 00 90 AD |  if_e	jmp	#LR__1600
1395c     00 12 06 F6 | 	mov	arg01, #0
13960     78 E4 B0 FD | 	call	#__system___getiolock_0474
13964     FD 12 02 F6 | 	mov	arg01, result1
13968     E0 8A B0 FD | 	call	#__system___lockmem
1396c     60 01 00 FF 
13970     AF 14 06 F6 | 	mov	arg02, ##@LR__4949
13974     00 12 06 F6 | 	mov	arg01, #0
13978     00 16 06 F6 | 	mov	arg03, #0
1397c     D0 97 B0 FD | 	call	#__system___basic_print_string
13980     00 12 06 F6 | 	mov	arg01, #0
13984     54 E4 B0 FD | 	call	#__system___getiolock_0474
13988     FD 00 68 FC | 	wrlong	#0, result1
1398c     27 12 06 F6 | 	mov	arg01, #39
13990     D0 52 B0 FD | 	call	#_printerror
13994     B4 00 90 FD | 	jmp	#LR__1601
13998                 | LR__1600
13998     F4 67 BF FD | 	call	#_pop
1399c     FD 16 02 F6 | 	mov	arg03, result1
139a0     FE 14 02 F6 | 	mov	arg02, result2
139a4     FF 12 02 F6 | 	mov	arg01, result3
139a8     0C 4E 05 F1 | 	add	fp, #12
139ac     A7 16 62 FC | 	wrlong	arg03, fp
139b0     04 4E 05 F1 | 	add	fp, #4
139b4     A7 14 62 FC | 	wrlong	arg02, fp
139b8     04 4E 05 F1 | 	add	fp, #4
139bc     A7 12 62 FC | 	wrlong	arg01, fp
139c0     14 4E 85 F1 | 	sub	fp, #20
139c4     C8 67 BF FD | 	call	#_pop
139c8     FF 16 02 F6 | 	mov	arg03, result3
139cc     A7 FA 61 FC | 	wrlong	result1, fp
139d0     04 4E 05 F1 | 	add	fp, #4
139d4     A7 FC 61 FC | 	wrlong	result2, fp
139d8     04 4E 05 F1 | 	add	fp, #4
139dc     A7 16 62 FC | 	wrlong	arg03, fp
139e0     08 4E 85 F1 | 	sub	fp, #8
139e4     A7 12 02 F6 | 	mov	arg01, fp
139e8     9C F0 BF FD | 	call	#_converttoint
139ec     1C 4E 05 F1 | 	add	fp, #28
139f0     A7 FA 61 FC | 	wrlong	result1, fp
139f4     10 4E 85 F1 | 	sub	fp, #16
139f8     A7 12 02 F6 | 	mov	arg01, fp
139fc     0C 4E 85 F1 | 	sub	fp, #12
13a00     84 F0 BF FD | 	call	#_converttoint
13a04     FD 16 02 F6 | 	mov	arg03, result1
13a08     20 4E 05 F1 | 	add	fp, #32
13a0c     A7 16 62 FC | 	wrlong	arg03, fp
13a10     F2 12 02 FB | 	rdlong	arg01, objptr
13a14     04 4E 85 F1 | 	sub	fp, #4
13a18     A7 FE 01 FB | 	rdlong	result3, fp
13a1c     FF 12 02 F1 | 	add	arg01, result3
13a20     1C 4E 85 F1 | 	sub	fp, #28
13a24     0A 16 66 F0 | 	shl	arg03, #10
13a28     0B 13 02 F1 | 	add	arg01, arg03
13a2c     70 54 B0 FD | 	call	#_pspeek
13a30     FD FA E1 F8 | 	getbyte	result1, result1, #0
13a34     A7 FA 61 FC | 	wrlong	result1, fp
13a38     08 4E 05 F1 | 	add	fp, #8
13a3c     A7 3A 68 FC | 	wrlong	#29, fp
13a40     08 4E 85 F1 | 	sub	fp, #8
13a44     A7 12 02 F6 | 	mov	arg01, fp
13a48     DC 67 BF FD | 	call	#_push
13a4c                 | LR__1601
13a4c     A7 F0 03 F6 | 	mov	ptra, fp
13a50     B2 00 A0 FD | 	call	#popregs_
13a54                 | _do_getpixel_ret
13a54     2D 00 64 FD | 	ret
13a58                 | 
13a58                 | ' 
13a58                 | ' 
13a58                 | ' 
13a58                 | ' sub do_defsprite
13a58                 | _do_defsprite
13a58     07 4A 05 F6 | 	mov	COUNT_, #7
13a5c     A8 00 A0 FD | 	call	#pushregs_
13a60     5C F0 07 F1 | 	add	ptra, #92
13a64     28 67 BF FD | 	call	#_pop
13a68     FD 16 02 F6 | 	mov	arg03, result1
13a6c     FE 14 02 F6 | 	mov	arg02, result2
13a70     FF 12 02 F6 | 	mov	arg01, result3
13a74     30 4E 05 F1 | 	add	fp, #48
13a78     A7 16 62 FC | 	wrlong	arg03, fp
13a7c     04 4E 05 F1 | 	add	fp, #4
13a80     A7 14 62 FC | 	wrlong	arg02, fp
13a84     04 4E 05 F1 | 	add	fp, #4
13a88     A7 12 62 FC | 	wrlong	arg01, fp
13a8c     38 4E 85 F1 | 	sub	fp, #56
13a90     FC 66 BF FD | 	call	#_pop
13a94     FD 16 02 F6 | 	mov	arg03, result1
13a98     FE 14 02 F6 | 	mov	arg02, result2
13a9c     FF 12 02 F6 | 	mov	arg01, result3
13aa0     24 4E 05 F1 | 	add	fp, #36
13aa4     A7 16 62 FC | 	wrlong	arg03, fp
13aa8     04 4E 05 F1 | 	add	fp, #4
13aac     A7 14 62 FC | 	wrlong	arg02, fp
13ab0     04 4E 05 F1 | 	add	fp, #4
13ab4     A7 12 62 FC | 	wrlong	arg01, fp
13ab8     2C 4E 85 F1 | 	sub	fp, #44
13abc     D0 66 BF FD | 	call	#_pop
13ac0     FD 16 02 F6 | 	mov	arg03, result1
13ac4     FE 14 02 F6 | 	mov	arg02, result2
13ac8     FF 12 02 F6 | 	mov	arg01, result3
13acc     18 4E 05 F1 | 	add	fp, #24
13ad0     A7 16 62 FC | 	wrlong	arg03, fp
13ad4     04 4E 05 F1 | 	add	fp, #4
13ad8     A7 14 62 FC | 	wrlong	arg02, fp
13adc     04 4E 05 F1 | 	add	fp, #4
13ae0     A7 12 62 FC | 	wrlong	arg01, fp
13ae4     20 4E 85 F1 | 	sub	fp, #32
13ae8     A4 66 BF FD | 	call	#_pop
13aec     FD 16 02 F6 | 	mov	arg03, result1
13af0     FE 14 02 F6 | 	mov	arg02, result2
13af4     FF 12 02 F6 | 	mov	arg01, result3
13af8     0C 4E 05 F1 | 	add	fp, #12
13afc     A7 16 62 FC | 	wrlong	arg03, fp
13b00     04 4E 05 F1 | 	add	fp, #4
13b04     A7 14 62 FC | 	wrlong	arg02, fp
13b08     04 4E 05 F1 | 	add	fp, #4
13b0c     A7 12 62 FC | 	wrlong	arg01, fp
13b10     14 4E 85 F1 | 	sub	fp, #20
13b14     78 66 BF FD | 	call	#_pop
13b18     FF 16 02 F6 | 	mov	arg03, result3
13b1c     A7 FA 61 FC | 	wrlong	result1, fp
13b20     04 4E 05 F1 | 	add	fp, #4
13b24     A7 FC 61 FC | 	wrlong	result2, fp
13b28     04 4E 05 F1 | 	add	fp, #4
13b2c     A7 16 62 FC | 	wrlong	arg03, fp
13b30     08 4E 85 F1 | 	sub	fp, #8
13b34     A7 12 02 F6 | 	mov	arg01, fp
13b38     4C EF BF FD | 	call	#_converttoint
13b3c     3C 4E 05 F1 | 	add	fp, #60
13b40     A7 FA 61 FC | 	wrlong	result1, fp
13b44     30 4E 85 F1 | 	sub	fp, #48
13b48     A7 12 02 F6 | 	mov	arg01, fp
13b4c     0C 4E 85 F1 | 	sub	fp, #12
13b50     34 EF BF FD | 	call	#_converttoint
13b54     40 4E 05 F1 | 	add	fp, #64
13b58     A7 FA 61 FC | 	wrlong	result1, fp
13b5c     28 4E 85 F1 | 	sub	fp, #40
13b60     A7 12 02 F6 | 	mov	arg01, fp
13b64     18 4E 85 F1 | 	sub	fp, #24
13b68     1C EF BF FD | 	call	#_converttoint
13b6c     44 4E 05 F1 | 	add	fp, #68
13b70     A7 FA 61 FC | 	wrlong	result1, fp
13b74     20 4E 85 F1 | 	sub	fp, #32
13b78     A7 12 02 F6 | 	mov	arg01, fp
13b7c     24 4E 85 F1 | 	sub	fp, #36
13b80     04 EF BF FD | 	call	#_converttoint
13b84     48 4E 05 F1 | 	add	fp, #72
13b88     A7 FA 61 FC | 	wrlong	result1, fp
13b8c     18 4E 85 F1 | 	sub	fp, #24
13b90     A7 12 02 F6 | 	mov	arg01, fp
13b94     30 4E 85 F1 | 	sub	fp, #48
13b98     EC EE BF FD | 	call	#_converttoint
13b9c     4C 4E 05 F1 | 	add	fp, #76
13ba0     A7 FA 61 FC | 	wrlong	result1, fp
13ba4                 | ' 
13ba4                 | ' t5=pop()
13ba4                 | ' t4=pop()
13ba4                 | ' t3=pop()
13ba4                 | ' t2=pop()
13ba4                 | ' t1=pop()
13ba4                 | ' 
13ba4                 | ' ' do convert, defsprite is not a racing command
13ba4                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
13ba4                 | '  
13ba4                 | ' ' todo: check parameters for linits
13ba4                 | ' if sprite(a1)<> nil then delete(sprite(a1))
13ba4     10 4E 85 F1 | 	sub	fp, #16
13ba8     A7 16 02 FB | 	rdlong	arg03, fp
13bac     3C 4E 85 F1 | 	sub	fp, #60
13bb0     02 16 66 F0 | 	shl	arg03, #2
13bb4     7B 00 00 FF 
13bb8     18 E4 05 F1 | 	add	objptr, ##63000
13bbc     F2 16 02 F1 | 	add	arg03, objptr
13bc0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
13bc4     7B 00 00 FF 
13bc8     18 E4 85 F1 | 	sub	objptr, ##63000
13bcc     2C 00 90 AD |  if_e	jmp	#LR__1610
13bd0     3C 4E 05 F1 | 	add	fp, #60
13bd4     A7 16 02 FB | 	rdlong	arg03, fp
13bd8     3C 4E 85 F1 | 	sub	fp, #60
13bdc     02 16 66 F0 | 	shl	arg03, #2
13be0     7B 00 00 FF 
13be4     18 E4 05 F1 | 	add	objptr, ##63000
13be8     F2 16 02 F1 | 	add	arg03, objptr
13bec     0B 13 02 FB | 	rdlong	arg01, arg03
13bf0     7B 00 00 FF 
13bf4     18 E4 85 F1 | 	sub	objptr, ##63000
13bf8     D4 C7 B0 FD | 	call	#__system___gc_free
13bfc                 | LR__1610
13bfc     3C 4E 05 F1 | 	add	fp, #60
13c00     A7 1E 02 FB | 	rdlong	local01, fp
13c04     0C 4E 05 F1 | 	add	fp, #12
13c08     A7 16 02 FB | 	rdlong	arg03, fp
13c0c     04 4E 05 F1 | 	add	fp, #4
13c10     A7 14 02 FB | 	rdlong	arg02, fp
13c14     0A 17 02 FD | 	qmul	arg03, arg02
13c18     02 1E 66 F0 | 	shl	local01, #2
13c1c     7B 00 00 FF 
13c20     18 E4 05 F1 | 	add	objptr, ##63000
13c24     F2 1E 02 F1 | 	add	local01, objptr
13c28     4C 4E 85 F1 | 	sub	fp, #76
13c2c     7B 00 00 FF 
13c30     18 E4 85 F1 | 	sub	objptr, ##63000
13c34     18 12 62 FD | 	getqx	arg01
13c38     58 C6 B0 FD | 	call	#__system___gc_alloc_managed
13c3c     0F FB 61 FC | 	wrlong	result1, local01
13c40                 | ' for y=a3 to a3+a5-1
13c40     44 4E 05 F1 | 	add	fp, #68
13c44     A7 20 02 FB | 	rdlong	local02, fp
13c48     0C 4E 05 F1 | 	add	fp, #12
13c4c     A7 20 62 FC | 	wrlong	local02, fp
13c50     0C 4E 85 F1 | 	sub	fp, #12
13c54     A7 22 02 FB | 	rdlong	local03, fp
13c58     08 4E 05 F1 | 	add	fp, #8
13c5c     A7 24 02 FB | 	rdlong	local04, fp
13c60     4C 4E 85 F1 | 	sub	fp, #76
13c64     12 23 02 F1 | 	add	local03, local04
13c68                 | LR__1611
13c68     50 4E 05 F1 | 	add	fp, #80
13c6c     A7 20 02 FB | 	rdlong	local02, fp
13c70     50 4E 85 F1 | 	sub	fp, #80
13c74     11 21 52 F2 | 	cmps	local02, local03 wc
13c78     10 01 90 3D |  if_ae	jmp	#LR__1614
13c7c                 | '   for x=a2 to a4+a2-1
13c7c     40 4E 05 F1 | 	add	fp, #64
13c80     A7 1E 02 FB | 	rdlong	local01, fp
13c84     7B 00 00 FF 
13c88     A0 E4 05 F1 | 	add	objptr, ##63136
13c8c     F2 1E 62 FC | 	wrlong	local01, objptr
13c90     7B 00 00 FF 
13c94     A0 E4 85 F1 | 	sub	objptr, ##63136
13c98     08 4E 05 F1 | 	add	fp, #8
13c9c     A7 26 02 FB | 	rdlong	local05, fp
13ca0     08 4E 85 F1 | 	sub	fp, #8
13ca4     A7 28 02 FB | 	rdlong	local06, fp
13ca8     40 4E 85 F1 | 	sub	fp, #64
13cac     14 27 02 F1 | 	add	local05, local06
13cb0                 | LR__1612
13cb0     7B 00 00 FF 
13cb4     A0 E4 05 F1 | 	add	objptr, ##63136
13cb8     F2 1E 02 FB | 	rdlong	local01, objptr
13cbc     7B 00 00 FF 
13cc0     A0 E4 85 F1 | 	sub	objptr, ##63136
13cc4     13 1F 52 F2 | 	cmps	local01, local05 wc
13cc8     A8 00 90 3D |  if_ae	jmp	#LR__1613
13ccc     3C 4E 05 F1 | 	add	fp, #60
13cd0     A7 28 02 FB | 	rdlong	local06, fp
13cd4     04 4E 05 F1 | 	add	fp, #4
13cd8     A7 24 02 FB | 	rdlong	local04, fp
13cdc     10 4E 05 F1 | 	add	fp, #16
13ce0     A7 20 02 FB | 	rdlong	local02, fp
13ce4     10 1F 02 F6 | 	mov	local01, local02
13ce8     0C 4E 85 F1 | 	sub	fp, #12
13cec     A7 16 02 FB | 	rdlong	arg03, fp
13cf0     0B 1F 82 F1 | 	sub	local01, arg03
13cf4     04 4E 05 F1 | 	add	fp, #4
13cf8     A7 16 02 FB | 	rdlong	arg03, fp
13cfc     0B 1F 02 FD | 	qmul	local01, arg03
13d00     02 28 66 F0 | 	shl	local06, #2
13d04     7B 00 00 FF 
13d08     18 E4 05 F1 | 	add	objptr, ##63000
13d0c     F2 28 02 F1 | 	add	local06, objptr
13d10     14 29 02 FB | 	rdlong	local06, local06
13d14     88 E4 05 F1 | 	add	objptr, #136
13d18     F2 1E 02 FB | 	rdlong	local01, objptr
13d1c     7B 00 00 FF 
13d20     A0 E4 85 F1 | 	sub	objptr, ##63136
13d24     0F 2B 02 F6 | 	mov	local07, local01
13d28     12 2B 82 F1 | 	sub	local07, local04
13d2c     F2 12 02 FB | 	rdlong	arg01, objptr
13d30     0F 13 02 F1 | 	add	arg01, local01
13d34     48 4E 85 F1 | 	sub	fp, #72
13d38     0A 20 66 F0 | 	shl	local02, #10
13d3c     10 13 02 F1 | 	add	arg01, local02
13d40     18 24 62 FD | 	getqx	local04
13d44     12 2B 02 F1 | 	add	local07, local04
13d48     14 2B 02 F1 | 	add	local07, local06
13d4c     50 51 B0 FD | 	call	#_pspeek
13d50     15 FB 41 FC | 	wrbyte	result1, local07
13d54     7B 00 00 FF 
13d58     A0 E4 05 F1 | 	add	objptr, ##63136
13d5c     F2 2A 02 FB | 	rdlong	local07, objptr
13d60     01 2A 06 F1 | 	add	local07, #1
13d64     F2 2A 62 FC | 	wrlong	local07, objptr
13d68     7B 00 00 FF 
13d6c     A0 E4 85 F1 | 	sub	objptr, ##63136
13d70     3C FF 9F FD | 	jmp	#LR__1612
13d74                 | LR__1613
13d74     50 4E 05 F1 | 	add	fp, #80
13d78     A7 2A 02 FB | 	rdlong	local07, fp
13d7c     01 2A 06 F1 | 	add	local07, #1
13d80     A7 2A 62 FC | 	wrlong	local07, fp
13d84     50 4E 85 F1 | 	sub	fp, #80
13d88     DC FE 9F FD | 	jmp	#LR__1611
13d8c                 | LR__1614
13d8c     3C 4E 05 F1 | 	add	fp, #60
13d90     A7 2A 02 FB | 	rdlong	local07, fp
13d94     15 13 02 F6 | 	mov	arg01, local07
13d98     3C 4E 85 F1 | 	sub	fp, #60
13d9c     02 2A 66 F0 | 	shl	local07, #2
13da0     7B 00 00 FF 
13da4     18 E4 05 F1 | 	add	objptr, ##63000
13da8     F2 2A 02 F1 | 	add	local07, objptr
13dac     15 15 02 FB | 	rdlong	arg02, local07
13db0     7B 00 00 FF 
13db4     18 E4 85 F1 | 	sub	objptr, ##63000
13db8     24 65 B0 FD | 	call	#_hg010b_spin2_setspriteptr
13dbc     3C 4E 05 F1 | 	add	fp, #60
13dc0     A7 12 02 FB | 	rdlong	arg01, fp
13dc4     0C 4E 05 F1 | 	add	fp, #12
13dc8     A7 14 02 FB | 	rdlong	arg02, fp
13dcc     04 4E 05 F1 | 	add	fp, #4
13dd0     A7 16 02 FB | 	rdlong	arg03, fp
13dd4     4C 4E 85 F1 | 	sub	fp, #76
13dd8     94 65 B0 FD | 	call	#_hg010b_spin2_setspritesize
13ddc     A7 F0 03 F6 | 	mov	ptra, fp
13de0     B2 00 A0 FD | 	call	#popregs_
13de4                 | _do_defsprite_ret
13de4     2D 00 64 FD | 	ret
13de8                 | 
13de8                 | ' 
13de8                 | ' sub do_sprite
13de8                 | _do_sprite
13de8     00 4A 05 F6 | 	mov	COUNT_, #0
13dec     A8 00 A0 FD | 	call	#pushregs_
13df0     30 F0 07 F1 | 	add	ptra, #48
13df4     98 63 BF FD | 	call	#_pop
13df8     FD 16 02 F6 | 	mov	arg03, result1
13dfc     FE 14 02 F6 | 	mov	arg02, result2
13e00     FF 12 02 F6 | 	mov	arg01, result3
13e04     18 4E 05 F1 | 	add	fp, #24
13e08     A7 16 62 FC | 	wrlong	arg03, fp
13e0c     04 4E 05 F1 | 	add	fp, #4
13e10     A7 14 62 FC | 	wrlong	arg02, fp
13e14     04 4E 05 F1 | 	add	fp, #4
13e18     A7 12 62 FC | 	wrlong	arg01, fp
13e1c     20 4E 85 F1 | 	sub	fp, #32
13e20     6C 63 BF FD | 	call	#_pop
13e24     FD 16 02 F6 | 	mov	arg03, result1
13e28     FE 14 02 F6 | 	mov	arg02, result2
13e2c     FF 12 02 F6 | 	mov	arg01, result3
13e30     0C 4E 05 F1 | 	add	fp, #12
13e34     A7 16 62 FC | 	wrlong	arg03, fp
13e38     04 4E 05 F1 | 	add	fp, #4
13e3c     A7 14 62 FC | 	wrlong	arg02, fp
13e40     04 4E 05 F1 | 	add	fp, #4
13e44     A7 12 62 FC | 	wrlong	arg01, fp
13e48     14 4E 85 F1 | 	sub	fp, #20
13e4c     40 63 BF FD | 	call	#_pop
13e50     FF 16 02 F6 | 	mov	arg03, result3
13e54     A7 FA 61 FC | 	wrlong	result1, fp
13e58     04 4E 05 F1 | 	add	fp, #4
13e5c     A7 FC 61 FC | 	wrlong	result2, fp
13e60     04 4E 05 F1 | 	add	fp, #4
13e64     A7 16 62 FC | 	wrlong	arg03, fp
13e68     08 4E 85 F1 | 	sub	fp, #8
13e6c     A7 12 02 F6 | 	mov	arg01, fp
13e70     14 EC BF FD | 	call	#_converttoint
13e74     24 4E 05 F1 | 	add	fp, #36
13e78     A7 FA 61 FC | 	wrlong	result1, fp
13e7c     18 4E 85 F1 | 	sub	fp, #24
13e80     A7 12 02 F6 | 	mov	arg01, fp
13e84     0C 4E 85 F1 | 	sub	fp, #12
13e88     FC EB BF FD | 	call	#_converttoint
13e8c     28 4E 05 F1 | 	add	fp, #40
13e90     A7 FA 61 FC | 	wrlong	result1, fp
13e94     10 4E 85 F1 | 	sub	fp, #16
13e98     A7 12 02 F6 | 	mov	arg01, fp
13e9c     18 4E 85 F1 | 	sub	fp, #24
13ea0     E4 EB BF FD | 	call	#_converttoint
13ea4     2C 4E 05 F1 | 	add	fp, #44
13ea8     A7 FA 61 FC | 	wrlong	result1, fp
13eac     08 4E 85 F1 | 	sub	fp, #8
13eb0     A7 12 02 FB | 	rdlong	arg01, fp
13eb4     04 4E 05 F1 | 	add	fp, #4
13eb8     A7 14 02 FB | 	rdlong	arg02, fp
13ebc     FD 16 02 F6 | 	mov	arg03, result1
13ec0     28 4E 85 F1 | 	sub	fp, #40
13ec4     40 64 B0 FD | 	call	#_hg010b_spin2_setspritepos
13ec8     A7 F0 03 F6 | 	mov	ptra, fp
13ecc     B2 00 A0 FD | 	call	#popregs_
13ed0                 | _do_sprite_ret
13ed0     2D 00 64 FD | 	ret
13ed4                 | 
13ed4                 | ' 
13ed4                 | ' sub do_mousex
13ed4                 | _do_mousex
13ed4     00 4A 05 F6 | 	mov	COUNT_, #0
13ed8     A8 00 A0 FD | 	call	#pushregs_
13edc     0C F0 07 F1 | 	add	ptra, #12
13ee0     08 4E 05 F1 | 	add	fp, #8
13ee4     A7 3A 68 FC | 	wrlong	#29, fp
13ee8     08 4E 85 F1 | 	sub	fp, #8
13eec     7A 00 00 FF 
13ef0     D0 E5 05 F1 | 	add	objptr, ##62928
13ef4     F2 12 02 FB | 	rdlong	arg01, objptr
13ef8     7A 00 00 FF 
13efc     D0 E5 85 F1 | 	sub	objptr, ##62928
13f00     A7 12 62 FC | 	wrlong	arg01, fp
13f04     A7 12 02 F6 | 	mov	arg01, fp
13f08     1C 63 BF FD | 	call	#_push
13f0c     A7 F0 03 F6 | 	mov	ptra, fp
13f10     B2 00 A0 FD | 	call	#popregs_
13f14                 | _do_mousex_ret
13f14     2D 00 64 FD | 	ret
13f18                 | 
13f18                 | ' 
13f18                 | ' sub do_mousey
13f18                 | _do_mousey
13f18     00 4A 05 F6 | 	mov	COUNT_, #0
13f1c     A8 00 A0 FD | 	call	#pushregs_
13f20     0C F0 07 F1 | 	add	ptra, #12
13f24     08 4E 05 F1 | 	add	fp, #8
13f28     A7 3A 68 FC | 	wrlong	#29, fp
13f2c     08 4E 85 F1 | 	sub	fp, #8
13f30     7A 00 00 FF 
13f34     D4 E5 05 F1 | 	add	objptr, ##62932
13f38     F2 12 02 FB | 	rdlong	arg01, objptr
13f3c     7A 00 00 FF 
13f40     D4 E5 85 F1 | 	sub	objptr, ##62932
13f44     A7 12 62 FC | 	wrlong	arg01, fp
13f48     A7 12 02 F6 | 	mov	arg01, fp
13f4c     D8 62 BF FD | 	call	#_push
13f50     A7 F0 03 F6 | 	mov	ptra, fp
13f54     B2 00 A0 FD | 	call	#popregs_
13f58                 | _do_mousey_ret
13f58     2D 00 64 FD | 	ret
13f5c                 | 
13f5c                 | ' 
13f5c                 | ' sub do_mousew
13f5c                 | _do_mousew
13f5c     00 4A 05 F6 | 	mov	COUNT_, #0
13f60     A8 00 A0 FD | 	call	#pushregs_
13f64     0C F0 07 F1 | 	add	ptra, #12
13f68     08 4E 05 F1 | 	add	fp, #8
13f6c     A7 38 68 FC | 	wrlong	#28, fp
13f70     08 4E 85 F1 | 	sub	fp, #8
13f74     7A 00 00 FF 
13f78     DC E5 05 F1 | 	add	objptr, ##62940
13f7c     F2 12 02 FB | 	rdlong	arg01, objptr
13f80     7A 00 00 FF 
13f84     DC E5 85 F1 | 	sub	objptr, ##62940
13f88     A7 12 62 FC | 	wrlong	arg01, fp
13f8c     A7 12 02 F6 | 	mov	arg01, fp
13f90     94 62 BF FD | 	call	#_push
13f94     A7 F0 03 F6 | 	mov	ptra, fp
13f98     B2 00 A0 FD | 	call	#popregs_
13f9c                 | _do_mousew_ret
13f9c     2D 00 64 FD | 	ret
13fa0                 | 
13fa0                 | ' 
13fa0                 | ' sub do_mousek
13fa0                 | _do_mousek
13fa0     00 4A 05 F6 | 	mov	COUNT_, #0
13fa4     A8 00 A0 FD | 	call	#pushregs_
13fa8     0C F0 07 F1 | 	add	ptra, #12
13fac     08 4E 05 F1 | 	add	fp, #8
13fb0     A7 3A 68 FC | 	wrlong	#29, fp
13fb4     08 4E 85 F1 | 	sub	fp, #8
13fb8     7A 00 00 FF 
13fbc     D8 E5 05 F1 | 	add	objptr, ##62936
13fc0     F2 12 02 FB | 	rdlong	arg01, objptr
13fc4     7A 00 00 FF 
13fc8     D8 E5 85 F1 | 	sub	objptr, ##62936
13fcc     A7 12 62 FC | 	wrlong	arg01, fp
13fd0     A7 12 02 F6 | 	mov	arg01, fp
13fd4     50 62 BF FD | 	call	#_push
13fd8     A7 F0 03 F6 | 	mov	ptra, fp
13fdc     B2 00 A0 FD | 	call	#popregs_
13fe0                 | _do_mousek_ret
13fe0     2D 00 64 FD | 	ret
13fe4                 | 
13fe4                 | ' 
13fe4                 | ' 
13fe4                 | ' sub do_rdpin
13fe4                 | _do_rdpin
13fe4     00 4A 05 F6 | 	mov	COUNT_, #0
13fe8     A8 00 A0 FD | 	call	#pushregs_
13fec     0C F0 07 F1 | 	add	ptra, #12
13ff0     9C 61 BF FD | 	call	#_pop
13ff4     A7 FA 61 FC | 	wrlong	result1, fp
13ff8     04 4E 05 F1 | 	add	fp, #4
13ffc     A7 FC 61 FC | 	wrlong	result2, fp
14000     04 4E 05 F1 | 	add	fp, #4
14004     A7 FE 61 FC | 	wrlong	result3, fp
14008     08 4E 85 F1 | 	sub	fp, #8
1400c     A7 12 02 F6 | 	mov	arg01, fp
14010     74 EA BF FD | 	call	#_converttoint
14014     FD FA 89 FA | 	rdpin	result1, result1
14018     7B 00 00 FF 
1401c     F8 E4 05 F1 | 	add	objptr, ##63224
14020     F2 FA 61 FC | 	wrlong	result1, objptr
14024     7B 00 00 FF 
14028     F8 E4 85 F1 | 	sub	objptr, ##63224
1402c     08 4E 05 F1 | 	add	fp, #8
14030     A7 3A 68 FC | 	wrlong	#29, fp
14034     08 4E 85 F1 | 	sub	fp, #8
14038     A7 08 68 FC | 	wrlong	#4, fp
1403c     A7 12 02 F6 | 	mov	arg01, fp
14040     E4 61 BF FD | 	call	#_push
14044     A7 F0 03 F6 | 	mov	ptra, fp
14048     B2 00 A0 FD | 	call	#popregs_
1404c                 | _do_rdpin_ret
1404c     2D 00 64 FD | 	ret
14050                 | 
14050                 | ' 
14050                 | ' sub do_rqpin
14050                 | _do_rqpin
14050     00 4A 05 F6 | 	mov	COUNT_, #0
14054     A8 00 A0 FD | 	call	#pushregs_
14058     0C F0 07 F1 | 	add	ptra, #12
1405c     30 61 BF FD | 	call	#_pop
14060     A7 FA 61 FC | 	wrlong	result1, fp
14064     04 4E 05 F1 | 	add	fp, #4
14068     A7 FC 61 FC | 	wrlong	result2, fp
1406c     04 4E 05 F1 | 	add	fp, #4
14070     A7 FE 61 FC | 	wrlong	result3, fp
14074     08 4E 85 F1 | 	sub	fp, #8
14078     A7 12 02 F6 | 	mov	arg01, fp
1407c     08 EA BF FD | 	call	#_converttoint
14080     FD 12 02 F6 | 	mov	arg01, result1
14084     00 FA 05 F6 | 	mov	result1, #0
14088     09 FB 81 FA | 	rqpin	result1, arg01
1408c     7B 00 00 FF 
14090     F8 E4 05 F1 | 	add	objptr, ##63224
14094     F2 FA 61 FC | 	wrlong	result1, objptr
14098     7B 00 00 FF 
1409c     F8 E4 85 F1 | 	sub	objptr, ##63224
140a0     08 4E 05 F1 | 	add	fp, #8
140a4     A7 3A 68 FC | 	wrlong	#29, fp
140a8     08 4E 85 F1 | 	sub	fp, #8
140ac     A7 08 68 FC | 	wrlong	#4, fp
140b0     A7 12 02 F6 | 	mov	arg01, fp
140b4     70 61 BF FD | 	call	#_push
140b8     A7 F0 03 F6 | 	mov	ptra, fp
140bc     B2 00 A0 FD | 	call	#popregs_
140c0                 | _do_rqpin_ret
140c0     2D 00 64 FD | 	ret
140c4                 | 
140c4                 | ' 
140c4                 | ' sub do_pinread
140c4                 | _do_pinread
140c4     00 4A 05 F6 | 	mov	COUNT_, #0
140c8     A8 00 A0 FD | 	call	#pushregs_
140cc     0C F0 07 F1 | 	add	ptra, #12
140d0     BC 60 BF FD | 	call	#_pop
140d4     A7 FA 61 FC | 	wrlong	result1, fp
140d8     04 4E 05 F1 | 	add	fp, #4
140dc     A7 FC 61 FC | 	wrlong	result2, fp
140e0     04 4E 05 F1 | 	add	fp, #4
140e4     A7 FE 61 FC | 	wrlong	result3, fp
140e8     08 4E 85 F1 | 	sub	fp, #8
140ec     A7 12 02 F6 | 	mov	arg01, fp
140f0     94 E9 BF FD | 	call	#_converttoint
140f4     FD 12 02 F6 | 	mov	arg01, result1
140f8     20 12 CE F7 | 	test	arg01, #32 wz
140fc     FF FB 01 56 |  if_ne	mov	result1, inb
14100     FE FB 01 A6 |  if_e	mov	result1, ina
14104     09 FB 41 F0 | 	shr	result1, arg01
14108     06 12 46 F0 | 	shr	arg01, #6
1410c     09 FB 41 F7 | 	zerox	result1, arg01
14110     7B 00 00 FF 
14114     F8 E4 05 F1 | 	add	objptr, ##63224
14118     F2 FA 61 FC | 	wrlong	result1, objptr
1411c     7B 00 00 FF 
14120     F8 E4 85 F1 | 	sub	objptr, ##63224
14124     08 4E 05 F1 | 	add	fp, #8
14128     A7 3A 68 FC | 	wrlong	#29, fp
1412c     08 4E 85 F1 | 	sub	fp, #8
14130     A7 08 68 FC | 	wrlong	#4, fp
14134     A7 12 02 F6 | 	mov	arg01, fp
14138     EC 60 BF FD | 	call	#_push
1413c     A7 F0 03 F6 | 	mov	ptra, fp
14140     B2 00 A0 FD | 	call	#popregs_
14144                 | _do_pinread_ret
14144     2D 00 64 FD | 	ret
14148                 | 
14148                 | ' 
14148                 | ' sub do_gettime
14148                 | _do_gettime
14148     02 4A 05 F6 | 	mov	COUNT_, #2
1414c     A8 00 A0 FD | 	call	#pushregs_
14150     14 F0 07 F1 | 	add	ptra, #20
14154                 | ' 
14154                 | ' const asm 
14154     1A 1E 72 FD | 	getct	local01 wc
14158     1A 20 62 FD | 	getct	local02
1415c                 | ' 
1415c                 | ' return hi1, lo1
1415c     10 FD 01 F6 | 	mov	result2, local02
14160     A7 1E 62 FC | 	wrlong	local01, fp
14164     04 4E 05 F1 | 	add	fp, #4
14168     A7 FC 61 FC | 	wrlong	result2, fp
1416c     0C 4E 05 F1 | 	add	fp, #12
14170     A7 3A 68 FC | 	wrlong	#29, fp
14174     0C 4E 85 F1 | 	sub	fp, #12
14178     A7 12 02 FB | 	rdlong	arg01, fp
1417c     04 4E 05 F1 | 	add	fp, #4
14180     A7 12 62 FC | 	wrlong	arg01, fp
14184     08 4E 85 F1 | 	sub	fp, #8
14188     A7 12 02 FB | 	rdlong	arg01, fp
1418c     0C 4E 05 F1 | 	add	fp, #12
14190     A7 12 62 FC | 	wrlong	arg01, fp
14194     04 4E 85 F1 | 	sub	fp, #4
14198     A7 12 02 F6 | 	mov	arg01, fp
1419c     08 4E 85 F1 | 	sub	fp, #8
141a0     84 60 BF FD | 	call	#_push
141a4     A7 F0 03 F6 | 	mov	ptra, fp
141a8     B2 00 A0 FD | 	call	#popregs_
141ac                 | _do_gettime_ret
141ac     2D 00 64 FD | 	ret
141b0                 | 
141b0                 | '    
141b0                 | ' 
141b0                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
141b0                 | ' 
141b0                 | ' '' ----------------------------- Clear the screen
141b0                 | ' 
141b0                 | ' sub do_cls
141b0                 | _do_cls
141b0     57 00 00 FF 
141b4     20 E4 05 F1 | 	add	objptr, ##44576
141b8     F2 12 02 FB | 	rdlong	arg01, objptr
141bc     04 E4 85 F1 | 	sub	objptr, #4
141c0     F2 14 02 FB | 	rdlong	arg02, objptr
141c4     57 00 00 FF 
141c8     1C E4 85 F1 | 	sub	objptr, ##44572
141cc     84 6E B0 FD | 	call	#_hg010b_spin2_cls
141d0     57 00 00 FF 
141d4     20 E4 05 F1 | 	add	objptr, ##44576
141d8     F2 14 02 FB | 	rdlong	arg02, objptr
141dc     14 E4 85 F1 | 	sub	objptr, #20
141e0     F2 14 62 FC | 	wrlong	arg02, objptr
141e4     57 00 00 FF 
141e8     0C E4 85 F1 | 	sub	objptr, ##44556
141ec                 | ' cls(ink,paper): plot_color=ink: print
141ec     00 12 06 F6 | 	mov	arg01, #0
141f0     E8 DB B0 FD | 	call	#__system___getiolock_0474
141f4     FD 12 02 F6 | 	mov	arg01, result1
141f8     50 82 B0 FD | 	call	#__system___lockmem
141fc     00 12 06 F6 | 	mov	arg01, #0
14200     0A 14 06 F6 | 	mov	arg02, #10
14204     00 16 06 F6 | 	mov	arg03, #0
14208     EC 8E B0 FD | 	call	#__system___basic_print_char
1420c     00 12 06 F6 | 	mov	arg01, #0
14210     C8 DB B0 FD | 	call	#__system___getiolock_0474
14214     FD 00 68 FC | 	wrlong	#0, result1
14218                 | _do_cls_ret
14218     2D 00 64 FD | 	ret
1421c                 | 
1421c                 | ' 
1421c                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
1421c                 | ' 
1421c                 | ' sub do_color
1421c                 | _do_color
1421c     03 4A 05 F6 | 	mov	COUNT_, #3
14220     A8 00 A0 FD | 	call	#pushregs_
14224     68 5F BF FD | 	call	#_pop
14228     FD 1E 02 F6 | 	mov	local01, result1
1422c     FE 20 02 F6 | 	mov	local02, result2
14230     FF 22 02 F6 | 	mov	local03, result3
14234     57 00 00 FF 
14238     0C E4 05 F1 | 	add	objptr, ##44556
1423c     F2 1E 62 FC | 	wrlong	local01, objptr
14240     57 00 00 FF 
14244     0C E4 85 F1 | 	sub	objptr, ##44556
14248     A7 F0 03 F6 | 	mov	ptra, fp
1424c     B2 00 A0 FD | 	call	#popregs_
14250                 | _do_color_ret
14250     2D 00 64 FD | 	ret
14254                 | 
14254                 | ' 
14254                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
14254                 | ' 
14254                 | ' sub do_plot
14254                 | _do_plot
14254     00 4A 05 F6 | 	mov	COUNT_, #0
14258     A8 00 A0 FD | 	call	#pushregs_
1425c     20 F0 07 F1 | 	add	ptra, #32
14260     2C 5F BF FD | 	call	#_pop
14264     FD 16 02 F6 | 	mov	arg03, result1
14268     FE 14 02 F6 | 	mov	arg02, result2
1426c     FF 12 02 F6 | 	mov	arg01, result3
14270     0C 4E 05 F1 | 	add	fp, #12
14274     A7 16 62 FC | 	wrlong	arg03, fp
14278     04 4E 05 F1 | 	add	fp, #4
1427c     A7 14 62 FC | 	wrlong	arg02, fp
14280     04 4E 05 F1 | 	add	fp, #4
14284     A7 12 62 FC | 	wrlong	arg01, fp
14288     14 4E 85 F1 | 	sub	fp, #20
1428c     00 5F BF FD | 	call	#_pop
14290     FF 16 02 F6 | 	mov	arg03, result3
14294     A7 FA 61 FC | 	wrlong	result1, fp
14298     04 4E 05 F1 | 	add	fp, #4
1429c     A7 FC 61 FC | 	wrlong	result2, fp
142a0     04 4E 05 F1 | 	add	fp, #4
142a4     A7 16 62 FC | 	wrlong	arg03, fp
142a8     08 4E 85 F1 | 	sub	fp, #8
142ac     A7 12 02 F6 | 	mov	arg01, fp
142b0     D4 E7 BF FD | 	call	#_converttoint
142b4     18 4E 05 F1 | 	add	fp, #24
142b8     A7 FA 61 FC | 	wrlong	result1, fp
142bc     0C 4E 85 F1 | 	sub	fp, #12
142c0     A7 12 02 F6 | 	mov	arg01, fp
142c4     0C 4E 85 F1 | 	sub	fp, #12
142c8     BC E7 BF FD | 	call	#_converttoint
142cc     1C 4E 05 F1 | 	add	fp, #28
142d0     A7 FA 61 FC | 	wrlong	result1, fp
142d4     04 4E 85 F1 | 	sub	fp, #4
142d8     A7 16 02 FB | 	rdlong	arg03, fp
142dc     57 00 00 FF 
142e0     10 E4 05 F1 | 	add	objptr, ##44560
142e4     F2 16 62 FC | 	wrlong	arg03, objptr
142e8     04 4E 05 F1 | 	add	fp, #4
142ec     A7 14 02 FB | 	rdlong	arg02, fp
142f0     1C 4E 85 F1 | 	sub	fp, #28
142f4     04 E4 05 F1 | 	add	objptr, #4
142f8     F2 14 62 FC | 	wrlong	arg02, objptr
142fc     04 E4 85 F1 | 	sub	objptr, #4
14300     F2 12 02 FB | 	rdlong	arg01, objptr
14304     04 E4 85 F1 | 	sub	objptr, #4
14308     F2 16 02 FB | 	rdlong	arg03, objptr
1430c     57 00 00 FF 
14310     0C E4 85 F1 | 	sub	objptr, ##44556
14314     A4 60 B0 FD | 	call	#_hg010b_spin2_putpixel
14318     A7 F0 03 F6 | 	mov	ptra, fp
1431c     B2 00 A0 FD | 	call	#popregs_
14320                 | _do_plot_ret
14320     2D 00 64 FD | 	ret
14324                 | 
14324                 | ' 
14324                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
14324                 | ' 
14324                 | ' sub do_draw
14324                 | _do_draw
14324     00 4A 05 F6 | 	mov	COUNT_, #0
14328     A8 00 A0 FD | 	call	#pushregs_
1432c     20 F0 07 F1 | 	add	ptra, #32
14330     5C 5E BF FD | 	call	#_pop
14334     FD 1A 02 F6 | 	mov	arg05, result1
14338     FE 18 02 F6 | 	mov	arg04, result2
1433c     FF 16 02 F6 | 	mov	arg03, result3
14340     0C 4E 05 F1 | 	add	fp, #12
14344     A7 1A 62 FC | 	wrlong	arg05, fp
14348     04 4E 05 F1 | 	add	fp, #4
1434c     A7 18 62 FC | 	wrlong	arg04, fp
14350     04 4E 05 F1 | 	add	fp, #4
14354     A7 16 62 FC | 	wrlong	arg03, fp
14358     14 4E 85 F1 | 	sub	fp, #20
1435c     30 5E BF FD | 	call	#_pop
14360     FF 1A 02 F6 | 	mov	arg05, result3
14364     A7 FA 61 FC | 	wrlong	result1, fp
14368     04 4E 05 F1 | 	add	fp, #4
1436c     A7 FC 61 FC | 	wrlong	result2, fp
14370     04 4E 05 F1 | 	add	fp, #4
14374     A7 1A 62 FC | 	wrlong	arg05, fp
14378     08 4E 85 F1 | 	sub	fp, #8
1437c     A7 12 02 F6 | 	mov	arg01, fp
14380     04 E7 BF FD | 	call	#_converttoint
14384     18 4E 05 F1 | 	add	fp, #24
14388     A7 FA 61 FC | 	wrlong	result1, fp
1438c     0C 4E 85 F1 | 	sub	fp, #12
14390     A7 12 02 F6 | 	mov	arg01, fp
14394     0C 4E 85 F1 | 	sub	fp, #12
14398     EC E6 BF FD | 	call	#_converttoint
1439c     1C 4E 05 F1 | 	add	fp, #28
143a0     A7 FA 61 FC | 	wrlong	result1, fp
143a4     57 00 00 FF 
143a8     10 E4 05 F1 | 	add	objptr, ##44560
143ac     F2 12 02 FB | 	rdlong	arg01, objptr
143b0     04 E4 05 F1 | 	add	objptr, #4
143b4     F2 14 02 FB | 	rdlong	arg02, objptr
143b8     04 4E 85 F1 | 	sub	fp, #4
143bc     A7 16 02 FB | 	rdlong	arg03, fp
143c0     FD 18 02 F6 | 	mov	arg04, result1
143c4     18 4E 85 F1 | 	sub	fp, #24
143c8     08 E4 85 F1 | 	sub	objptr, #8
143cc     F2 1A 02 FB | 	rdlong	arg05, objptr
143d0     57 00 00 FF 
143d4     0C E4 85 F1 | 	sub	objptr, ##44556
143d8     90 62 B0 FD | 	call	#_hg010b_spin2_draw
143dc     18 4E 05 F1 | 	add	fp, #24
143e0     A7 1A 02 FB | 	rdlong	arg05, fp
143e4     57 00 00 FF 
143e8     10 E4 05 F1 | 	add	objptr, ##44560
143ec     F2 1A 62 FC | 	wrlong	arg05, objptr
143f0     04 4E 05 F1 | 	add	fp, #4
143f4     A7 1A 02 FB | 	rdlong	arg05, fp
143f8     1C 4E 85 F1 | 	sub	fp, #28
143fc     04 E4 05 F1 | 	add	objptr, #4
14400     F2 1A 62 FC | 	wrlong	arg05, objptr
14404     57 00 00 FF 
14408     14 E4 85 F1 | 	sub	objptr, ##44564
1440c     A7 F0 03 F6 | 	mov	ptra, fp
14410     B2 00 A0 FD | 	call	#popregs_
14414                 | _do_draw_ret
14414     2D 00 64 FD | 	ret
14418                 | 
14418                 | ' 
14418                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
14418                 | ' 
14418                 | ' sub do_fcircle
14418                 | _do_fcircle
14418     02 4A 05 F6 | 	mov	COUNT_, #2
1441c     A8 00 A0 FD | 	call	#pushregs_
14420     24 F0 07 F1 | 	add	ptra, #36
14424     68 5D BF FD | 	call	#_pop
14428     FD 18 02 F6 | 	mov	arg04, result1
1442c     FE 16 02 F6 | 	mov	arg03, result2
14430     FF 14 02 F6 | 	mov	arg02, result3
14434     18 4E 05 F1 | 	add	fp, #24
14438     A7 18 62 FC | 	wrlong	arg04, fp
1443c     04 4E 05 F1 | 	add	fp, #4
14440     A7 16 62 FC | 	wrlong	arg03, fp
14444     04 4E 05 F1 | 	add	fp, #4
14448     A7 14 62 FC | 	wrlong	arg02, fp
1444c     20 4E 85 F1 | 	sub	fp, #32
14450     3C 5D BF FD | 	call	#_pop
14454     FD 18 02 F6 | 	mov	arg04, result1
14458     FE 16 02 F6 | 	mov	arg03, result2
1445c     FF 1E 02 F6 | 	mov	local01, result3
14460     0C 4E 05 F1 | 	add	fp, #12
14464     A7 18 62 FC | 	wrlong	arg04, fp
14468     04 4E 05 F1 | 	add	fp, #4
1446c     A7 16 62 FC | 	wrlong	arg03, fp
14470     04 4E 05 F1 | 	add	fp, #4
14474     A7 1E 62 FC | 	wrlong	local01, fp
14478     14 4E 85 F1 | 	sub	fp, #20
1447c     10 5D BF FD | 	call	#_pop
14480     A7 FA 61 FC | 	wrlong	result1, fp
14484     04 4E 05 F1 | 	add	fp, #4
14488     A7 FC 61 FC | 	wrlong	result2, fp
1448c     04 4E 05 F1 | 	add	fp, #4
14490     A7 FE 61 FC | 	wrlong	result3, fp
14494                 | ' 
14494                 | ' t3=pop()
14494                 | ' t2=pop()
14494                 | ' t1=pop()
14494                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
14494     FF 18 02 F6 | 	mov	arg04, result3
14498     08 4E 85 F1 | 	sub	fp, #8
1449c     1C 18 0E F2 | 	cmp	arg04, #28 wz
144a0     08 4E 05 51 |  if_ne	add	fp, #8
144a4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
144a8     08 4E 85 51 |  if_ne	sub	fp, #8
144ac     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
144b0     7C 00 90 5D |  if_ne	jmp	#LR__1620
144b4     14 4E 05 F1 | 	add	fp, #20
144b8     A7 1E 02 FB | 	rdlong	local01, fp
144bc     14 4E 85 F1 | 	sub	fp, #20
144c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
144c4     14 4E 05 51 |  if_ne	add	fp, #20
144c8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
144cc     14 4E 85 51 |  if_ne	sub	fp, #20
144d0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
144d4     58 00 90 5D |  if_ne	jmp	#LR__1620
144d8     20 4E 05 F1 | 	add	fp, #32
144dc     A7 1E 02 FB | 	rdlong	local01, fp
144e0     20 4E 85 F1 | 	sub	fp, #32
144e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
144e8     20 4E 05 51 |  if_ne	add	fp, #32
144ec     A7 18 02 5B |  if_ne	rdlong	arg04, fp
144f0     20 4E 85 51 |  if_ne	sub	fp, #32
144f4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
144f8     34 00 90 5D |  if_ne	jmp	#LR__1620
144fc     A7 12 02 FB | 	rdlong	arg01, fp
14500     0C 4E 05 F1 | 	add	fp, #12
14504     A7 14 02 FB | 	rdlong	arg02, fp
14508     0C 4E 05 F1 | 	add	fp, #12
1450c     A7 16 02 FB | 	rdlong	arg03, fp
14510     18 4E 85 F1 | 	sub	fp, #24
14514     57 00 00 FF 
14518     0C E4 05 F1 | 	add	objptr, ##44556
1451c     F2 18 02 FB | 	rdlong	arg04, objptr
14520     57 00 00 FF 
14524     0C E4 85 F1 | 	sub	objptr, ##44556
14528     C4 65 B0 FD | 	call	#_hg010b_spin2_fcircle
1452c                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
1452c     54 00 90 FD | 	jmp	#LR__1621
14530                 | LR__1620
14530     A7 12 02 F6 | 	mov	arg01, fp
14534     50 E5 BF FD | 	call	#_converttoint
14538     FD 1E 02 F6 | 	mov	local01, result1
1453c     0C 4E 05 F1 | 	add	fp, #12
14540     A7 12 02 F6 | 	mov	arg01, fp
14544     0C 4E 85 F1 | 	sub	fp, #12
14548     3C E5 BF FD | 	call	#_converttoint
1454c     FD 20 02 F6 | 	mov	local02, result1
14550     18 4E 05 F1 | 	add	fp, #24
14554     A7 12 02 F6 | 	mov	arg01, fp
14558     18 4E 85 F1 | 	sub	fp, #24
1455c     28 E5 BF FD | 	call	#_converttoint
14560     FD 16 02 F6 | 	mov	arg03, result1
14564     57 00 00 FF 
14568     0C E4 05 F1 | 	add	objptr, ##44556
1456c     F2 18 02 FB | 	rdlong	arg04, objptr
14570     57 00 00 FF 
14574     0C E4 85 F1 | 	sub	objptr, ##44556
14578     0F 13 02 F6 | 	mov	arg01, local01
1457c     10 15 02 F6 | 	mov	arg02, local02
14580     6C 65 B0 FD | 	call	#_hg010b_spin2_fcircle
14584                 | LR__1621
14584     A7 F0 03 F6 | 	mov	ptra, fp
14588     B2 00 A0 FD | 	call	#popregs_
1458c                 | _do_fcircle_ret
1458c     2D 00 64 FD | 	ret
14590                 | 
14590                 | ' 
14590                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
14590                 | ' 
14590                 | ' sub do_circle
14590                 | _do_circle
14590     02 4A 05 F6 | 	mov	COUNT_, #2
14594     A8 00 A0 FD | 	call	#pushregs_
14598     24 F0 07 F1 | 	add	ptra, #36
1459c     F0 5B BF FD | 	call	#_pop
145a0     FD 18 02 F6 | 	mov	arg04, result1
145a4     FE 16 02 F6 | 	mov	arg03, result2
145a8     FF 14 02 F6 | 	mov	arg02, result3
145ac     18 4E 05 F1 | 	add	fp, #24
145b0     A7 18 62 FC | 	wrlong	arg04, fp
145b4     04 4E 05 F1 | 	add	fp, #4
145b8     A7 16 62 FC | 	wrlong	arg03, fp
145bc     04 4E 05 F1 | 	add	fp, #4
145c0     A7 14 62 FC | 	wrlong	arg02, fp
145c4     20 4E 85 F1 | 	sub	fp, #32
145c8     C4 5B BF FD | 	call	#_pop
145cc     FD 18 02 F6 | 	mov	arg04, result1
145d0     FE 16 02 F6 | 	mov	arg03, result2
145d4     FF 1E 02 F6 | 	mov	local01, result3
145d8     0C 4E 05 F1 | 	add	fp, #12
145dc     A7 18 62 FC | 	wrlong	arg04, fp
145e0     04 4E 05 F1 | 	add	fp, #4
145e4     A7 16 62 FC | 	wrlong	arg03, fp
145e8     04 4E 05 F1 | 	add	fp, #4
145ec     A7 1E 62 FC | 	wrlong	local01, fp
145f0     14 4E 85 F1 | 	sub	fp, #20
145f4     98 5B BF FD | 	call	#_pop
145f8     A7 FA 61 FC | 	wrlong	result1, fp
145fc     04 4E 05 F1 | 	add	fp, #4
14600     A7 FC 61 FC | 	wrlong	result2, fp
14604     04 4E 05 F1 | 	add	fp, #4
14608     A7 FE 61 FC | 	wrlong	result3, fp
1460c                 | ' 
1460c                 | ' t3=pop()
1460c                 | ' t2=pop()
1460c                 | ' t1=pop()
1460c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1460c     FF 18 02 F6 | 	mov	arg04, result3
14610     08 4E 85 F1 | 	sub	fp, #8
14614     1C 18 0E F2 | 	cmp	arg04, #28 wz
14618     08 4E 05 51 |  if_ne	add	fp, #8
1461c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14620     08 4E 85 51 |  if_ne	sub	fp, #8
14624     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14628     7C 00 90 5D |  if_ne	jmp	#LR__1630
1462c     14 4E 05 F1 | 	add	fp, #20
14630     A7 1E 02 FB | 	rdlong	local01, fp
14634     14 4E 85 F1 | 	sub	fp, #20
14638     1C 1E 0E F2 | 	cmp	local01, #28 wz
1463c     14 4E 05 51 |  if_ne	add	fp, #20
14640     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14644     14 4E 85 51 |  if_ne	sub	fp, #20
14648     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1464c     58 00 90 5D |  if_ne	jmp	#LR__1630
14650     20 4E 05 F1 | 	add	fp, #32
14654     A7 1E 02 FB | 	rdlong	local01, fp
14658     20 4E 85 F1 | 	sub	fp, #32
1465c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14660     20 4E 05 51 |  if_ne	add	fp, #32
14664     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14668     20 4E 85 51 |  if_ne	sub	fp, #32
1466c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14670     34 00 90 5D |  if_ne	jmp	#LR__1630
14674     A7 12 02 FB | 	rdlong	arg01, fp
14678     0C 4E 05 F1 | 	add	fp, #12
1467c     A7 14 02 FB | 	rdlong	arg02, fp
14680     0C 4E 05 F1 | 	add	fp, #12
14684     A7 16 02 FB | 	rdlong	arg03, fp
14688     18 4E 85 F1 | 	sub	fp, #24
1468c     57 00 00 FF 
14690     0C E4 05 F1 | 	add	objptr, ##44556
14694     F2 18 02 FB | 	rdlong	arg04, objptr
14698     57 00 00 FF 
1469c     0C E4 85 F1 | 	sub	objptr, ##44556
146a0     58 65 B0 FD | 	call	#_hg010b_spin2_circle
146a4                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
146a4     54 00 90 FD | 	jmp	#LR__1631
146a8                 | LR__1630
146a8     A7 12 02 F6 | 	mov	arg01, fp
146ac     D8 E3 BF FD | 	call	#_converttoint
146b0     FD 1E 02 F6 | 	mov	local01, result1
146b4     0C 4E 05 F1 | 	add	fp, #12
146b8     A7 12 02 F6 | 	mov	arg01, fp
146bc     0C 4E 85 F1 | 	sub	fp, #12
146c0     C4 E3 BF FD | 	call	#_converttoint
146c4     FD 20 02 F6 | 	mov	local02, result1
146c8     18 4E 05 F1 | 	add	fp, #24
146cc     A7 12 02 F6 | 	mov	arg01, fp
146d0     18 4E 85 F1 | 	sub	fp, #24
146d4     B0 E3 BF FD | 	call	#_converttoint
146d8     FD 16 02 F6 | 	mov	arg03, result1
146dc     57 00 00 FF 
146e0     0C E4 05 F1 | 	add	objptr, ##44556
146e4     F2 18 02 FB | 	rdlong	arg04, objptr
146e8     57 00 00 FF 
146ec     0C E4 85 F1 | 	sub	objptr, ##44556
146f0     0F 13 02 F6 | 	mov	arg01, local01
146f4     10 15 02 F6 | 	mov	arg02, local02
146f8     00 65 B0 FD | 	call	#_hg010b_spin2_circle
146fc                 | LR__1631
146fc     A7 F0 03 F6 | 	mov	ptra, fp
14700     B2 00 A0 FD | 	call	#popregs_
14704                 | _do_circle_ret
14704     2D 00 64 FD | 	ret
14708                 | 
14708                 | ' 
14708                 | ' ' -------------------------- Draw a rectangle
14708                 | ' 
14708                 | ' sub do_box
14708                 | _do_box
14708     03 4A 05 F6 | 	mov	COUNT_, #3
1470c     A8 00 A0 FD | 	call	#pushregs_
14710     30 F0 07 F1 | 	add	ptra, #48
14714     78 5A BF FD | 	call	#_pop
14718     FD 1A 02 F6 | 	mov	arg05, result1
1471c     FE 18 02 F6 | 	mov	arg04, result2
14720     FF 16 02 F6 | 	mov	arg03, result3
14724     24 4E 05 F1 | 	add	fp, #36
14728     A7 1A 62 FC | 	wrlong	arg05, fp
1472c     04 4E 05 F1 | 	add	fp, #4
14730     A7 18 62 FC | 	wrlong	arg04, fp
14734     04 4E 05 F1 | 	add	fp, #4
14738     A7 16 62 FC | 	wrlong	arg03, fp
1473c     2C 4E 85 F1 | 	sub	fp, #44
14740     4C 5A BF FD | 	call	#_pop
14744     FD 1A 02 F6 | 	mov	arg05, result1
14748     FE 18 02 F6 | 	mov	arg04, result2
1474c     FF 16 02 F6 | 	mov	arg03, result3
14750     18 4E 05 F1 | 	add	fp, #24
14754     A7 1A 62 FC | 	wrlong	arg05, fp
14758     04 4E 05 F1 | 	add	fp, #4
1475c     A7 18 62 FC | 	wrlong	arg04, fp
14760     04 4E 05 F1 | 	add	fp, #4
14764     A7 16 62 FC | 	wrlong	arg03, fp
14768     20 4E 85 F1 | 	sub	fp, #32
1476c     20 5A BF FD | 	call	#_pop
14770     FD 1A 02 F6 | 	mov	arg05, result1
14774     FE 18 02 F6 | 	mov	arg04, result2
14778     FF 1E 02 F6 | 	mov	local01, result3
1477c     0C 4E 05 F1 | 	add	fp, #12
14780     A7 1A 62 FC | 	wrlong	arg05, fp
14784     04 4E 05 F1 | 	add	fp, #4
14788     A7 18 62 FC | 	wrlong	arg04, fp
1478c     04 4E 05 F1 | 	add	fp, #4
14790     A7 1E 62 FC | 	wrlong	local01, fp
14794     14 4E 85 F1 | 	sub	fp, #20
14798     F4 59 BF FD | 	call	#_pop
1479c     A7 FA 61 FC | 	wrlong	result1, fp
147a0     04 4E 05 F1 | 	add	fp, #4
147a4     A7 FC 61 FC | 	wrlong	result2, fp
147a8     04 4E 05 F1 | 	add	fp, #4
147ac     A7 FE 61 FC | 	wrlong	result3, fp
147b0                 | ' 
147b0                 | ' t4=pop()
147b0                 | ' t3=pop()
147b0                 | ' t2=pop()
147b0                 | ' t1=pop()
147b0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
147b0     FF 1A 02 F6 | 	mov	arg05, result3
147b4     08 4E 85 F1 | 	sub	fp, #8
147b8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
147bc     08 4E 05 51 |  if_ne	add	fp, #8
147c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
147c4     08 4E 85 51 |  if_ne	sub	fp, #8
147c8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
147cc     A8 00 90 5D |  if_ne	jmp	#LR__1640
147d0     14 4E 05 F1 | 	add	fp, #20
147d4     A7 1E 02 FB | 	rdlong	local01, fp
147d8     14 4E 85 F1 | 	sub	fp, #20
147dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
147e0     14 4E 05 51 |  if_ne	add	fp, #20
147e4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
147e8     14 4E 85 51 |  if_ne	sub	fp, #20
147ec     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
147f0     84 00 90 5D |  if_ne	jmp	#LR__1640
147f4     20 4E 05 F1 | 	add	fp, #32
147f8     A7 1E 02 FB | 	rdlong	local01, fp
147fc     20 4E 85 F1 | 	sub	fp, #32
14800     1C 1E 0E F2 | 	cmp	local01, #28 wz
14804     20 4E 05 51 |  if_ne	add	fp, #32
14808     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1480c     20 4E 85 51 |  if_ne	sub	fp, #32
14810     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14814     60 00 90 5D |  if_ne	jmp	#LR__1640
14818     2C 4E 05 F1 | 	add	fp, #44
1481c     A7 1E 02 FB | 	rdlong	local01, fp
14820     2C 4E 85 F1 | 	sub	fp, #44
14824     1C 1E 0E F2 | 	cmp	local01, #28 wz
14828     2C 4E 05 51 |  if_ne	add	fp, #44
1482c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14830     2C 4E 85 51 |  if_ne	sub	fp, #44
14834     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14838     3C 00 90 5D |  if_ne	jmp	#LR__1640
1483c     A7 12 02 FB | 	rdlong	arg01, fp
14840     0C 4E 05 F1 | 	add	fp, #12
14844     A7 14 02 FB | 	rdlong	arg02, fp
14848     0C 4E 05 F1 | 	add	fp, #12
1484c     A7 16 02 FB | 	rdlong	arg03, fp
14850     0C 4E 05 F1 | 	add	fp, #12
14854     A7 18 02 FB | 	rdlong	arg04, fp
14858     24 4E 85 F1 | 	sub	fp, #36
1485c     57 00 00 FF 
14860     0C E4 05 F1 | 	add	objptr, ##44556
14864     F2 1A 02 FB | 	rdlong	arg05, objptr
14868     57 00 00 FF 
1486c     0C E4 85 F1 | 	sub	objptr, ##44556
14870     54 65 B0 FD | 	call	#_hg010b_spin2_box
14874                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14874     6C 00 90 FD | 	jmp	#LR__1641
14878                 | LR__1640
14878     A7 12 02 F6 | 	mov	arg01, fp
1487c     08 E2 BF FD | 	call	#_converttoint
14880     FD 20 02 F6 | 	mov	local02, result1
14884     0C 4E 05 F1 | 	add	fp, #12
14888     A7 12 02 F6 | 	mov	arg01, fp
1488c     0C 4E 85 F1 | 	sub	fp, #12
14890     F4 E1 BF FD | 	call	#_converttoint
14894     FD 22 02 F6 | 	mov	local03, result1
14898     18 4E 05 F1 | 	add	fp, #24
1489c     A7 12 02 F6 | 	mov	arg01, fp
148a0     18 4E 85 F1 | 	sub	fp, #24
148a4     E0 E1 BF FD | 	call	#_converttoint
148a8     FD 1E 02 F6 | 	mov	local01, result1
148ac     24 4E 05 F1 | 	add	fp, #36
148b0     A7 12 02 F6 | 	mov	arg01, fp
148b4     24 4E 85 F1 | 	sub	fp, #36
148b8     CC E1 BF FD | 	call	#_converttoint
148bc     FD 18 02 F6 | 	mov	arg04, result1
148c0     57 00 00 FF 
148c4     0C E4 05 F1 | 	add	objptr, ##44556
148c8     F2 1A 02 FB | 	rdlong	arg05, objptr
148cc     57 00 00 FF 
148d0     0C E4 85 F1 | 	sub	objptr, ##44556
148d4     10 13 02 F6 | 	mov	arg01, local02
148d8     11 15 02 F6 | 	mov	arg02, local03
148dc     0F 17 02 F6 | 	mov	arg03, local01
148e0     E4 64 B0 FD | 	call	#_hg010b_spin2_box
148e4                 | LR__1641
148e4     A7 F0 03 F6 | 	mov	ptra, fp
148e8     B2 00 A0 FD | 	call	#popregs_
148ec                 | _do_box_ret
148ec     2D 00 64 FD | 	ret
148f0                 | 
148f0                 | ' 
148f0                 | ' sub do_fill
148f0                 | _do_fill
148f0     03 4A 05 F6 | 	mov	COUNT_, #3
148f4     A8 00 A0 FD | 	call	#pushregs_
148f8     30 F0 07 F1 | 	add	ptra, #48
148fc     90 58 BF FD | 	call	#_pop
14900     FD 18 02 F6 | 	mov	arg04, result1
14904     FE 16 02 F6 | 	mov	arg03, result2
14908     FF 14 02 F6 | 	mov	arg02, result3
1490c     24 4E 05 F1 | 	add	fp, #36
14910     A7 18 62 FC | 	wrlong	arg04, fp
14914     04 4E 05 F1 | 	add	fp, #4
14918     A7 16 62 FC | 	wrlong	arg03, fp
1491c     04 4E 05 F1 | 	add	fp, #4
14920     A7 14 62 FC | 	wrlong	arg02, fp
14924     2C 4E 85 F1 | 	sub	fp, #44
14928     64 58 BF FD | 	call	#_pop
1492c     FD 18 02 F6 | 	mov	arg04, result1
14930     FE 16 02 F6 | 	mov	arg03, result2
14934     FF 14 02 F6 | 	mov	arg02, result3
14938     18 4E 05 F1 | 	add	fp, #24
1493c     A7 18 62 FC | 	wrlong	arg04, fp
14940     04 4E 05 F1 | 	add	fp, #4
14944     A7 16 62 FC | 	wrlong	arg03, fp
14948     04 4E 05 F1 | 	add	fp, #4
1494c     A7 14 62 FC | 	wrlong	arg02, fp
14950     20 4E 85 F1 | 	sub	fp, #32
14954     38 58 BF FD | 	call	#_pop
14958     FD 18 02 F6 | 	mov	arg04, result1
1495c     FE 16 02 F6 | 	mov	arg03, result2
14960     FF 1E 02 F6 | 	mov	local01, result3
14964     0C 4E 05 F1 | 	add	fp, #12
14968     A7 18 62 FC | 	wrlong	arg04, fp
1496c     04 4E 05 F1 | 	add	fp, #4
14970     A7 16 62 FC | 	wrlong	arg03, fp
14974     04 4E 05 F1 | 	add	fp, #4
14978     A7 1E 62 FC | 	wrlong	local01, fp
1497c     14 4E 85 F1 | 	sub	fp, #20
14980     0C 58 BF FD | 	call	#_pop
14984     A7 FA 61 FC | 	wrlong	result1, fp
14988     04 4E 05 F1 | 	add	fp, #4
1498c     A7 FC 61 FC | 	wrlong	result2, fp
14990     04 4E 05 F1 | 	add	fp, #4
14994     A7 FE 61 FC | 	wrlong	result3, fp
14998                 | ' 
14998                 | ' t4=pop()
14998                 | ' t3=pop()
14998                 | ' t2=pop()
14998                 | ' t1=pop()
14998                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14998     FF 18 02 F6 | 	mov	arg04, result3
1499c     08 4E 85 F1 | 	sub	fp, #8
149a0     1C 18 0E F2 | 	cmp	arg04, #28 wz
149a4     08 4E 05 51 |  if_ne	add	fp, #8
149a8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
149ac     08 4E 85 51 |  if_ne	sub	fp, #8
149b0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
149b4     94 00 90 5D |  if_ne	jmp	#LR__1650
149b8     14 4E 05 F1 | 	add	fp, #20
149bc     A7 1E 02 FB | 	rdlong	local01, fp
149c0     14 4E 85 F1 | 	sub	fp, #20
149c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
149c8     14 4E 05 51 |  if_ne	add	fp, #20
149cc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149d0     14 4E 85 51 |  if_ne	sub	fp, #20
149d4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
149d8     70 00 90 5D |  if_ne	jmp	#LR__1650
149dc     20 4E 05 F1 | 	add	fp, #32
149e0     A7 1E 02 FB | 	rdlong	local01, fp
149e4     20 4E 85 F1 | 	sub	fp, #32
149e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
149ec     20 4E 05 51 |  if_ne	add	fp, #32
149f0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149f4     20 4E 85 51 |  if_ne	sub	fp, #32
149f8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
149fc     4C 00 90 5D |  if_ne	jmp	#LR__1650
14a00     2C 4E 05 F1 | 	add	fp, #44
14a04     A7 1E 02 FB | 	rdlong	local01, fp
14a08     2C 4E 85 F1 | 	sub	fp, #44
14a0c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a10     2C 4E 05 51 |  if_ne	add	fp, #44
14a14     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14a18     2C 4E 85 51 |  if_ne	sub	fp, #44
14a1c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14a20     28 00 90 5D |  if_ne	jmp	#LR__1650
14a24     A7 12 02 FB | 	rdlong	arg01, fp
14a28     0C 4E 05 F1 | 	add	fp, #12
14a2c     A7 14 02 FB | 	rdlong	arg02, fp
14a30     0C 4E 05 F1 | 	add	fp, #12
14a34     A7 16 02 FB | 	rdlong	arg03, fp
14a38     0C 4E 05 F1 | 	add	fp, #12
14a3c     A7 18 02 FB | 	rdlong	arg04, fp
14a40     24 4E 85 F1 | 	sub	fp, #36
14a44     14 5E B0 FD | 	call	#_hg010b_spin2_fill
14a48                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
14a48     58 00 90 FD | 	jmp	#LR__1651
14a4c                 | LR__1650
14a4c     A7 12 02 F6 | 	mov	arg01, fp
14a50     34 E0 BF FD | 	call	#_converttoint
14a54     FD 20 02 F6 | 	mov	local02, result1
14a58     0C 4E 05 F1 | 	add	fp, #12
14a5c     A7 12 02 F6 | 	mov	arg01, fp
14a60     0C 4E 85 F1 | 	sub	fp, #12
14a64     20 E0 BF FD | 	call	#_converttoint
14a68     FD 22 02 F6 | 	mov	local03, result1
14a6c     18 4E 05 F1 | 	add	fp, #24
14a70     A7 12 02 F6 | 	mov	arg01, fp
14a74     18 4E 85 F1 | 	sub	fp, #24
14a78     0C E0 BF FD | 	call	#_converttoint
14a7c     FD 1E 02 F6 | 	mov	local01, result1
14a80     24 4E 05 F1 | 	add	fp, #36
14a84     A7 12 02 F6 | 	mov	arg01, fp
14a88     24 4E 85 F1 | 	sub	fp, #36
14a8c     F8 DF BF FD | 	call	#_converttoint
14a90     FD 18 02 F6 | 	mov	arg04, result1
14a94     10 13 02 F6 | 	mov	arg01, local02
14a98     11 15 02 F6 | 	mov	arg02, local03
14a9c     0F 17 02 F6 | 	mov	arg03, local01
14aa0     B8 5D B0 FD | 	call	#_hg010b_spin2_fill
14aa4                 | LR__1651
14aa4     A7 F0 03 F6 | 	mov	ptra, fp
14aa8     B2 00 A0 FD | 	call	#popregs_
14aac                 | _do_fill_ret
14aac     2D 00 64 FD | 	ret
14ab0                 | 
14ab0                 | ' 
14ab0                 | ' ' -------------------------- Draw a frane
14ab0                 | ' 
14ab0                 | ' sub do_frame
14ab0                 | _do_frame
14ab0     03 4A 05 F6 | 	mov	COUNT_, #3
14ab4     A8 00 A0 FD | 	call	#pushregs_
14ab8     30 F0 07 F1 | 	add	ptra, #48
14abc     D0 56 BF FD | 	call	#_pop
14ac0     FD 1A 02 F6 | 	mov	arg05, result1
14ac4     FE 18 02 F6 | 	mov	arg04, result2
14ac8     FF 16 02 F6 | 	mov	arg03, result3
14acc     24 4E 05 F1 | 	add	fp, #36
14ad0     A7 1A 62 FC | 	wrlong	arg05, fp
14ad4     04 4E 05 F1 | 	add	fp, #4
14ad8     A7 18 62 FC | 	wrlong	arg04, fp
14adc     04 4E 05 F1 | 	add	fp, #4
14ae0     A7 16 62 FC | 	wrlong	arg03, fp
14ae4     2C 4E 85 F1 | 	sub	fp, #44
14ae8     A4 56 BF FD | 	call	#_pop
14aec     FD 1A 02 F6 | 	mov	arg05, result1
14af0     FE 18 02 F6 | 	mov	arg04, result2
14af4     FF 16 02 F6 | 	mov	arg03, result3
14af8     18 4E 05 F1 | 	add	fp, #24
14afc     A7 1A 62 FC | 	wrlong	arg05, fp
14b00     04 4E 05 F1 | 	add	fp, #4
14b04     A7 18 62 FC | 	wrlong	arg04, fp
14b08     04 4E 05 F1 | 	add	fp, #4
14b0c     A7 16 62 FC | 	wrlong	arg03, fp
14b10     20 4E 85 F1 | 	sub	fp, #32
14b14     78 56 BF FD | 	call	#_pop
14b18     FD 1A 02 F6 | 	mov	arg05, result1
14b1c     FE 18 02 F6 | 	mov	arg04, result2
14b20     FF 1E 02 F6 | 	mov	local01, result3
14b24     0C 4E 05 F1 | 	add	fp, #12
14b28     A7 1A 62 FC | 	wrlong	arg05, fp
14b2c     04 4E 05 F1 | 	add	fp, #4
14b30     A7 18 62 FC | 	wrlong	arg04, fp
14b34     04 4E 05 F1 | 	add	fp, #4
14b38     A7 1E 62 FC | 	wrlong	local01, fp
14b3c     14 4E 85 F1 | 	sub	fp, #20
14b40     4C 56 BF FD | 	call	#_pop
14b44     A7 FA 61 FC | 	wrlong	result1, fp
14b48     04 4E 05 F1 | 	add	fp, #4
14b4c     A7 FC 61 FC | 	wrlong	result2, fp
14b50     04 4E 05 F1 | 	add	fp, #4
14b54     A7 FE 61 FC | 	wrlong	result3, fp
14b58                 | ' 
14b58                 | ' t4=pop()
14b58                 | ' t3=pop()
14b58                 | ' t2=pop()
14b58                 | ' t1=pop()
14b58                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14b58     FF 1A 02 F6 | 	mov	arg05, result3
14b5c     08 4E 85 F1 | 	sub	fp, #8
14b60     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14b64     08 4E 05 51 |  if_ne	add	fp, #8
14b68     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14b6c     08 4E 85 51 |  if_ne	sub	fp, #8
14b70     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14b74     A8 00 90 5D |  if_ne	jmp	#LR__1660
14b78     14 4E 05 F1 | 	add	fp, #20
14b7c     A7 1E 02 FB | 	rdlong	local01, fp
14b80     14 4E 85 F1 | 	sub	fp, #20
14b84     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b88     14 4E 05 51 |  if_ne	add	fp, #20
14b8c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b90     14 4E 85 51 |  if_ne	sub	fp, #20
14b94     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b98     84 00 90 5D |  if_ne	jmp	#LR__1660
14b9c     20 4E 05 F1 | 	add	fp, #32
14ba0     A7 1E 02 FB | 	rdlong	local01, fp
14ba4     20 4E 85 F1 | 	sub	fp, #32
14ba8     1C 1E 0E F2 | 	cmp	local01, #28 wz
14bac     20 4E 05 51 |  if_ne	add	fp, #32
14bb0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14bb4     20 4E 85 51 |  if_ne	sub	fp, #32
14bb8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14bbc     60 00 90 5D |  if_ne	jmp	#LR__1660
14bc0     2C 4E 05 F1 | 	add	fp, #44
14bc4     A7 1E 02 FB | 	rdlong	local01, fp
14bc8     2C 4E 85 F1 | 	sub	fp, #44
14bcc     1C 1E 0E F2 | 	cmp	local01, #28 wz
14bd0     2C 4E 05 51 |  if_ne	add	fp, #44
14bd4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14bd8     2C 4E 85 51 |  if_ne	sub	fp, #44
14bdc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14be0     3C 00 90 5D |  if_ne	jmp	#LR__1660
14be4     A7 12 02 FB | 	rdlong	arg01, fp
14be8     0C 4E 05 F1 | 	add	fp, #12
14bec     A7 14 02 FB | 	rdlong	arg02, fp
14bf0     0C 4E 05 F1 | 	add	fp, #12
14bf4     A7 16 02 FB | 	rdlong	arg03, fp
14bf8     0C 4E 05 F1 | 	add	fp, #12
14bfc     A7 18 02 FB | 	rdlong	arg04, fp
14c00     24 4E 85 F1 | 	sub	fp, #36
14c04     57 00 00 FF 
14c08     0C E4 05 F1 | 	add	objptr, ##44556
14c0c     F2 1A 02 FB | 	rdlong	arg05, objptr
14c10     57 00 00 FF 
14c14     0C E4 85 F1 | 	sub	objptr, ##44556
14c18     2C 61 B0 FD | 	call	#_hg010b_spin2_frame
14c1c                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14c1c     6C 00 90 FD | 	jmp	#LR__1661
14c20                 | LR__1660
14c20     A7 12 02 F6 | 	mov	arg01, fp
14c24     60 DE BF FD | 	call	#_converttoint
14c28     FD 20 02 F6 | 	mov	local02, result1
14c2c     0C 4E 05 F1 | 	add	fp, #12
14c30     A7 12 02 F6 | 	mov	arg01, fp
14c34     0C 4E 85 F1 | 	sub	fp, #12
14c38     4C DE BF FD | 	call	#_converttoint
14c3c     FD 22 02 F6 | 	mov	local03, result1
14c40     18 4E 05 F1 | 	add	fp, #24
14c44     A7 12 02 F6 | 	mov	arg01, fp
14c48     18 4E 85 F1 | 	sub	fp, #24
14c4c     38 DE BF FD | 	call	#_converttoint
14c50     FD 1E 02 F6 | 	mov	local01, result1
14c54     24 4E 05 F1 | 	add	fp, #36
14c58     A7 12 02 F6 | 	mov	arg01, fp
14c5c     24 4E 85 F1 | 	sub	fp, #36
14c60     24 DE BF FD | 	call	#_converttoint
14c64     FD 18 02 F6 | 	mov	arg04, result1
14c68     57 00 00 FF 
14c6c     0C E4 05 F1 | 	add	objptr, ##44556
14c70     F2 1A 02 FB | 	rdlong	arg05, objptr
14c74     57 00 00 FF 
14c78     0C E4 85 F1 | 	sub	objptr, ##44556
14c7c     10 13 02 F6 | 	mov	arg01, local02
14c80     11 15 02 F6 | 	mov	arg02, local03
14c84     0F 17 02 F6 | 	mov	arg03, local01
14c88     BC 60 B0 FD | 	call	#_hg010b_spin2_frame
14c8c                 | LR__1661
14c8c     A7 F0 03 F6 | 	mov	ptra, fp
14c90     B2 00 A0 FD | 	call	#popregs_
14c94                 | _do_frame_ret
14c94     2D 00 64 FD | 	ret
14c98                 | 
14c98                 | ' 
14c98                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
14c98                 | ' 
14c98                 | ' ' ------------------------- Print to the screem
14c98                 | ' 
14c98                 | ' sub do_print  
14c98                 | _do_print
14c98     0A 4A 05 F6 | 	mov	COUNT_, #10
14c9c     A8 00 A0 FD | 	call	#pushregs_
14ca0     00 24 06 F6 | 	mov	local04, #0
14ca4     E8 54 BF FD | 	call	#_pop
14ca8     FD 26 02 F6 | 	mov	local05, result1
14cac     FE 28 02 F6 | 	mov	local06, result2
14cb0     FF 2A 02 F6 | 	mov	local07, result3
14cb4     13 1F 02 F6 | 	mov	local01, local05
14cb8     14 21 02 F6 | 	mov	local02, local06
14cbc     15 23 02 F6 | 	mov	local03, local07
14cc0                 | '  
14cc0                 | ' r=0
14cc0                 | ' t1=pop() 
14cc0                 | ' 'print t1.result_type,t1.result.uresult
14cc0                 | ' 
14cc0                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
14cc0     21 22 0E F2 | 	cmp	local03, #33 wz
14cc4     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
14cc8     20 00 90 5D |  if_ne	jmp	#LR__1670
14ccc     11 25 02 F6 | 	mov	local04, local03
14cd0     BC 54 BF FD | 	call	#_pop
14cd4     FD 26 02 F6 | 	mov	local05, result1
14cd8     FE 28 02 F6 | 	mov	local06, result2
14cdc     FF 2A 02 F6 | 	mov	local07, result3
14ce0     13 1F 02 F6 | 	mov	local01, local05
14ce4     14 21 02 F6 | 	mov	local02, local06
14ce8     15 23 02 F6 | 	mov	local03, local07
14cec                 | LR__1670
14cec                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14cec     20 22 0E F2 | 	cmp	local03, #32 wz
14cf0     11 25 02 A6 |  if_e	mov	local04, local03
14cf4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
14cf4     FF 22 0E F2 | 	cmp	local03, #255 wz
14cf8     0C 00 90 5D |  if_ne	jmp	#LR__1671
14cfc     0F 13 02 F6 | 	mov	arg01, local01
14d00     60 3F B0 FD | 	call	#_printerror
14d04     4C 04 90 FD | 	jmp	#LR__1689
14d08                 | LR__1671
14d08                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
14d08     2B 22 0E F2 | 	cmp	local03, #43 wz
14d0c     14 00 90 5D |  if_ne	jmp	#LR__1672
14d10     0F 13 02 F6 | 	mov	arg01, local01
14d14     C0 93 BF FD | 	call	#_convertstring
14d18     FD 26 02 F6 | 	mov	local05, result1
14d1c     13 1F 02 F6 | 	mov	local01, local05
14d20     1F 22 06 F6 | 	mov	local03, #31
14d24                 | LR__1672
14d24                 | ' 
14d24                 | ' if r=print_mod_comma  then
14d24     21 24 0E F2 | 	cmp	local04, #33 wz
14d28     AC 01 90 5D |  if_ne	jmp	#LR__1677
14d2c                 | '   if t1.result_type=result_int then print t1.result.iresult,
14d2c     1C 22 0E F2 | 	cmp	local03, #28 wz
14d30     64 00 90 5D |  if_ne	jmp	#LR__1673
14d34     00 12 06 F6 | 	mov	arg01, #0
14d38     A0 D0 B0 FD | 	call	#__system___getiolock_0474
14d3c     FD 12 02 F6 | 	mov	arg01, result1
14d40     08 77 B0 FD | 	call	#__system___lockmem
14d44     00 28 06 F6 | 	mov	local06, #0
14d48     00 12 06 F6 | 	mov	arg01, #0
14d4c     0F 15 02 F6 | 	mov	arg02, local01
14d50     00 16 06 F6 | 	mov	arg03, #0
14d54     0A 18 06 F6 | 	mov	arg04, #10
14d58     38 84 B0 FD | 	call	#__system___basic_print_integer
14d5c     FD 2A 02 F6 | 	mov	local07, result1
14d60     14 27 02 F6 | 	mov	local05, local06
14d64     15 27 02 F1 | 	add	local05, local07
14d68     00 2C 06 F6 | 	mov	local08, #0
14d6c     00 12 06 F6 | 	mov	arg01, #0
14d70     09 14 06 F6 | 	mov	arg02, #9
14d74     00 16 06 F6 | 	mov	arg03, #0
14d78     7C 83 B0 FD | 	call	#__system___basic_print_char
14d7c     FD 2E 02 F6 | 	mov	local09, result1
14d80     FD 26 02 F1 | 	add	local05, result1
14d84     00 12 06 F6 | 	mov	arg01, #0
14d88     50 D0 B0 FD | 	call	#__system___getiolock_0474
14d8c     FD 00 68 FC | 	wrlong	#0, result1
14d90     00 FA 05 F6 | 	mov	result1, #0
14d94     00 30 06 F6 | 	mov	local10, #0
14d98                 | LR__1673
14d98                 | '   if t1.result_type=result_uint then print t1.result.uresult,
14d98     1D 22 0E F2 | 	cmp	local03, #29 wz
14d9c     64 00 90 5D |  if_ne	jmp	#LR__1674
14da0     00 12 06 F6 | 	mov	arg01, #0
14da4     34 D0 B0 FD | 	call	#__system___getiolock_0474
14da8     FD 12 02 F6 | 	mov	arg01, result1
14dac     9C 76 B0 FD | 	call	#__system___lockmem
14db0     00 28 06 F6 | 	mov	local06, #0
14db4     00 12 06 F6 | 	mov	arg01, #0
14db8     0F 15 02 F6 | 	mov	arg02, local01
14dbc     00 16 06 F6 | 	mov	arg03, #0
14dc0     0A 18 06 F6 | 	mov	arg04, #10
14dc4     0C 84 B0 FD | 	call	#__system___basic_print_unsigned
14dc8     FD 2A 02 F6 | 	mov	local07, result1
14dcc     14 27 02 F6 | 	mov	local05, local06
14dd0     15 27 02 F1 | 	add	local05, local07
14dd4     00 2C 06 F6 | 	mov	local08, #0
14dd8     00 12 06 F6 | 	mov	arg01, #0
14ddc     09 14 06 F6 | 	mov	arg02, #9
14de0     00 16 06 F6 | 	mov	arg03, #0
14de4     10 83 B0 FD | 	call	#__system___basic_print_char
14de8     FD 2E 02 F6 | 	mov	local09, result1
14dec     FD 26 02 F1 | 	add	local05, result1
14df0     00 12 06 F6 | 	mov	arg01, #0
14df4     E4 CF B0 FD | 	call	#__system___getiolock_0474
14df8     FD 00 68 FC | 	wrlong	#0, result1
14dfc     00 FA 05 F6 | 	mov	result1, #0
14e00     00 30 06 F6 | 	mov	local10, #0
14e04                 | LR__1674
14e04                 | '   if t1.result_type=result_float then print t1.result.fresult,
14e04     1E 22 0E F2 | 	cmp	local03, #30 wz
14e08     64 00 90 5D |  if_ne	jmp	#LR__1675
14e0c     00 12 06 F6 | 	mov	arg01, #0
14e10     C8 CF B0 FD | 	call	#__system___getiolock_0474
14e14     FD 12 02 F6 | 	mov	arg01, result1
14e18     30 76 B0 FD | 	call	#__system___lockmem
14e1c     00 28 06 F6 | 	mov	local06, #0
14e20     00 12 06 F6 | 	mov	arg01, #0
14e24     0F 15 02 F6 | 	mov	arg02, local01
14e28     00 16 06 F6 | 	mov	arg03, #0
14e2c     23 18 06 F6 | 	mov	arg04, #35
14e30     AC A7 B0 FD | 	call	#__system___basic_print_float
14e34     FD 2A 02 F6 | 	mov	local07, result1
14e38     14 27 02 F6 | 	mov	local05, local06
14e3c     15 27 02 F1 | 	add	local05, local07
14e40     00 2C 06 F6 | 	mov	local08, #0
14e44     00 12 06 F6 | 	mov	arg01, #0
14e48     09 14 06 F6 | 	mov	arg02, #9
14e4c     00 16 06 F6 | 	mov	arg03, #0
14e50     A4 82 B0 FD | 	call	#__system___basic_print_char
14e54     FD 2E 02 F6 | 	mov	local09, result1
14e58     FD 26 02 F1 | 	add	local05, result1
14e5c     00 12 06 F6 | 	mov	arg01, #0
14e60     78 CF B0 FD | 	call	#__system___getiolock_0474
14e64     FD 00 68 FC | 	wrlong	#0, result1
14e68     00 FA 05 F6 | 	mov	result1, #0
14e6c     00 30 06 F6 | 	mov	local10, #0
14e70                 | LR__1675
14e70                 | '   if t1.result_type=result_string then print t1.result.sresult,
14e70     1F 22 0E F2 | 	cmp	local03, #31 wz
14e74     60 00 90 5D |  if_ne	jmp	#LR__1676
14e78     00 12 06 F6 | 	mov	arg01, #0
14e7c     5C CF B0 FD | 	call	#__system___getiolock_0474
14e80     FD 12 02 F6 | 	mov	arg01, result1
14e84     C4 75 B0 FD | 	call	#__system___lockmem
14e88     00 28 06 F6 | 	mov	local06, #0
14e8c     00 12 06 F6 | 	mov	arg01, #0
14e90     0F 15 02 F6 | 	mov	arg02, local01
14e94     00 16 06 F6 | 	mov	arg03, #0
14e98     B4 82 B0 FD | 	call	#__system___basic_print_string
14e9c     FD 2A 02 F6 | 	mov	local07, result1
14ea0     14 27 02 F6 | 	mov	local05, local06
14ea4     15 27 02 F1 | 	add	local05, local07
14ea8     00 2C 06 F6 | 	mov	local08, #0
14eac     00 12 06 F6 | 	mov	arg01, #0
14eb0     09 14 06 F6 | 	mov	arg02, #9
14eb4     00 16 06 F6 | 	mov	arg03, #0
14eb8     3C 82 B0 FD | 	call	#__system___basic_print_char
14ebc     FD 2E 02 F6 | 	mov	local09, result1
14ec0     FD 26 02 F1 | 	add	local05, result1
14ec4     00 12 06 F6 | 	mov	arg01, #0
14ec8     10 CF B0 FD | 	call	#__system___getiolock_0474
14ecc     FD 00 68 FC | 	wrlong	#0, result1
14ed0     00 FA 05 F6 | 	mov	result1, #0
14ed4     00 30 06 F6 | 	mov	local10, #0
14ed8                 | LR__1676
14ed8                 | LR__1677
14ed8                 | ' if r=print_mod_semicolon then 
14ed8     22 24 0E F2 | 	cmp	local04, #34 wz
14edc     1C 01 90 5D |  if_ne	jmp	#LR__1682
14ee0                 | '   if t1.result_type=result_int then print t1.result.iresult;
14ee0     1C 22 0E F2 | 	cmp	local03, #28 wz
14ee4     50 00 90 5D |  if_ne	jmp	#LR__1678
14ee8     00 12 06 F6 | 	mov	arg01, #0
14eec     EC CE B0 FD | 	call	#__system___getiolock_0474
14ef0     FD 12 02 F6 | 	mov	arg01, result1
14ef4     54 75 B0 FD | 	call	#__system___lockmem
14ef8     00 28 06 F6 | 	mov	local06, #0
14efc     00 30 06 F6 | 	mov	local10, #0
14f00     0A 2C 06 F6 | 	mov	local08, #10
14f04     00 12 06 F6 | 	mov	arg01, #0
14f08     0F 15 02 F6 | 	mov	arg02, local01
14f0c     00 16 06 F6 | 	mov	arg03, #0
14f10     0A 18 06 F6 | 	mov	arg04, #10
14f14     7C 82 B0 FD | 	call	#__system___basic_print_integer
14f18     FD 2A 02 F6 | 	mov	local07, result1
14f1c     14 27 02 F6 | 	mov	local05, local06
14f20     15 27 02 F1 | 	add	local05, local07
14f24     00 12 06 F6 | 	mov	arg01, #0
14f28     B0 CE B0 FD | 	call	#__system___getiolock_0474
14f2c     FD 00 68 FC | 	wrlong	#0, result1
14f30     00 FA 05 F6 | 	mov	result1, #0
14f34     00 2E 06 F6 | 	mov	local09, #0
14f38                 | LR__1678
14f38                 | '   if t1.result_type=result_uint then print t1.result.uresult;
14f38     1D 22 0E F2 | 	cmp	local03, #29 wz
14f3c     50 00 90 5D |  if_ne	jmp	#LR__1679
14f40     00 12 06 F6 | 	mov	arg01, #0
14f44     94 CE B0 FD | 	call	#__system___getiolock_0474
14f48     FD 12 02 F6 | 	mov	arg01, result1
14f4c     FC 74 B0 FD | 	call	#__system___lockmem
14f50     00 28 06 F6 | 	mov	local06, #0
14f54     00 30 06 F6 | 	mov	local10, #0
14f58     0A 2C 06 F6 | 	mov	local08, #10
14f5c     00 12 06 F6 | 	mov	arg01, #0
14f60     0F 15 02 F6 | 	mov	arg02, local01
14f64     00 16 06 F6 | 	mov	arg03, #0
14f68     0A 18 06 F6 | 	mov	arg04, #10
14f6c     64 82 B0 FD | 	call	#__system___basic_print_unsigned
14f70     FD 2A 02 F6 | 	mov	local07, result1
14f74     14 27 02 F6 | 	mov	local05, local06
14f78     15 27 02 F1 | 	add	local05, local07
14f7c     00 12 06 F6 | 	mov	arg01, #0
14f80     58 CE B0 FD | 	call	#__system___getiolock_0474
14f84     FD 00 68 FC | 	wrlong	#0, result1
14f88     00 FA 05 F6 | 	mov	result1, #0
14f8c     00 2E 06 F6 | 	mov	local09, #0
14f90                 | LR__1679
14f90                 | '   if t1.result_type=result_float then print t1.result.fresult;
14f90     1E 22 0E F2 | 	cmp	local03, #30 wz
14f94     30 00 90 5D |  if_ne	jmp	#LR__1680
14f98     00 12 06 F6 | 	mov	arg01, #0
14f9c     3C CE B0 FD | 	call	#__system___getiolock_0474
14fa0     FD 12 02 F6 | 	mov	arg01, result1
14fa4     A4 74 B0 FD | 	call	#__system___lockmem
14fa8     00 12 06 F6 | 	mov	arg01, #0
14fac     0F 15 02 F6 | 	mov	arg02, local01
14fb0     00 16 06 F6 | 	mov	arg03, #0
14fb4     23 18 06 F6 | 	mov	arg04, #35
14fb8     24 A6 B0 FD | 	call	#__system___basic_print_float
14fbc     00 12 06 F6 | 	mov	arg01, #0
14fc0     18 CE B0 FD | 	call	#__system___getiolock_0474
14fc4     FD 00 68 FC | 	wrlong	#0, result1
14fc8                 | LR__1680
14fc8                 | '   if t1.result_type=result_string then print t1.result.sresult;
14fc8     1F 22 0E F2 | 	cmp	local03, #31 wz
14fcc     2C 00 90 5D |  if_ne	jmp	#LR__1681
14fd0     00 12 06 F6 | 	mov	arg01, #0
14fd4     04 CE B0 FD | 	call	#__system___getiolock_0474
14fd8     FD 12 02 F6 | 	mov	arg01, result1
14fdc     6C 74 B0 FD | 	call	#__system___lockmem
14fe0     00 12 06 F6 | 	mov	arg01, #0
14fe4     0F 15 02 F6 | 	mov	arg02, local01
14fe8     00 16 06 F6 | 	mov	arg03, #0
14fec     60 81 B0 FD | 	call	#__system___basic_print_string
14ff0     00 12 06 F6 | 	mov	arg01, #0
14ff4     E4 CD B0 FD | 	call	#__system___getiolock_0474
14ff8     FD 00 68 FC | 	wrlong	#0, result1
14ffc                 | LR__1681
14ffc                 | LR__1682
14ffc                 | ' if r=0 then 
14ffc     00 24 0E F2 | 	cmp	local04, #0 wz
15000     1C 01 90 5D |  if_ne	jmp	#LR__1687
15004                 | '   if t1.result_type=result_int then print t1.result.iresult
15004     1C 22 0E F2 | 	cmp	local03, #28 wz
15008     40 00 90 5D |  if_ne	jmp	#LR__1683
1500c     00 12 06 F6 | 	mov	arg01, #0
15010     C8 CD B0 FD | 	call	#__system___getiolock_0474
15014     FD 12 02 F6 | 	mov	arg01, result1
15018     30 74 B0 FD | 	call	#__system___lockmem
1501c     00 12 06 F6 | 	mov	arg01, #0
15020     0F 15 02 F6 | 	mov	arg02, local01
15024     00 16 06 F6 | 	mov	arg03, #0
15028     0A 18 06 F6 | 	mov	arg04, #10
1502c     64 81 B0 FD | 	call	#__system___basic_print_integer
15030     00 12 06 F6 | 	mov	arg01, #0
15034     0A 14 06 F6 | 	mov	arg02, #10
15038     00 16 06 F6 | 	mov	arg03, #0
1503c     B8 80 B0 FD | 	call	#__system___basic_print_char
15040     00 12 06 F6 | 	mov	arg01, #0
15044     94 CD B0 FD | 	call	#__system___getiolock_0474
15048     FD 00 68 FC | 	wrlong	#0, result1
1504c                 | LR__1683
1504c                 | '   if t1.result_type=result_uint then print t1.result.uresult
1504c     1D 22 0E F2 | 	cmp	local03, #29 wz
15050     40 00 90 5D |  if_ne	jmp	#LR__1684
15054     00 12 06 F6 | 	mov	arg01, #0
15058     80 CD B0 FD | 	call	#__system___getiolock_0474
1505c     FD 12 02 F6 | 	mov	arg01, result1
15060     E8 73 B0 FD | 	call	#__system___lockmem
15064     00 12 06 F6 | 	mov	arg01, #0
15068     0F 15 02 F6 | 	mov	arg02, local01
1506c     00 16 06 F6 | 	mov	arg03, #0
15070     0A 18 06 F6 | 	mov	arg04, #10
15074     5C 81 B0 FD | 	call	#__system___basic_print_unsigned
15078     00 12 06 F6 | 	mov	arg01, #0
1507c     0A 14 06 F6 | 	mov	arg02, #10
15080     00 16 06 F6 | 	mov	arg03, #0
15084     70 80 B0 FD | 	call	#__system___basic_print_char
15088     00 12 06 F6 | 	mov	arg01, #0
1508c     4C CD B0 FD | 	call	#__system___getiolock_0474
15090     FD 00 68 FC | 	wrlong	#0, result1
15094                 | LR__1684
15094                 | '   if t1.result_type=result_float then print t1.result.fresult
15094     1E 22 0E F2 | 	cmp	local03, #30 wz
15098     40 00 90 5D |  if_ne	jmp	#LR__1685
1509c     00 12 06 F6 | 	mov	arg01, #0
150a0     38 CD B0 FD | 	call	#__system___getiolock_0474
150a4     FD 12 02 F6 | 	mov	arg01, result1
150a8     A0 73 B0 FD | 	call	#__system___lockmem
150ac     00 12 06 F6 | 	mov	arg01, #0
150b0     0F 15 02 F6 | 	mov	arg02, local01
150b4     00 16 06 F6 | 	mov	arg03, #0
150b8     23 18 06 F6 | 	mov	arg04, #35
150bc     20 A5 B0 FD | 	call	#__system___basic_print_float
150c0     00 12 06 F6 | 	mov	arg01, #0
150c4     0A 14 06 F6 | 	mov	arg02, #10
150c8     00 16 06 F6 | 	mov	arg03, #0
150cc     28 80 B0 FD | 	call	#__system___basic_print_char
150d0     00 12 06 F6 | 	mov	arg01, #0
150d4     04 CD B0 FD | 	call	#__system___getiolock_0474
150d8     FD 00 68 FC | 	wrlong	#0, result1
150dc                 | LR__1685
150dc                 | '   if t1.result_type=result_string then print t1.result.sresult
150dc     1F 22 0E F2 | 	cmp	local03, #31 wz
150e0     3C 00 90 5D |  if_ne	jmp	#LR__1686
150e4     00 12 06 F6 | 	mov	arg01, #0
150e8     F0 CC B0 FD | 	call	#__system___getiolock_0474
150ec     FD 12 02 F6 | 	mov	arg01, result1
150f0     58 73 B0 FD | 	call	#__system___lockmem
150f4     00 12 06 F6 | 	mov	arg01, #0
150f8     0F 15 02 F6 | 	mov	arg02, local01
150fc     00 16 06 F6 | 	mov	arg03, #0
15100     4C 80 B0 FD | 	call	#__system___basic_print_string
15104     00 12 06 F6 | 	mov	arg01, #0
15108     0A 14 06 F6 | 	mov	arg02, #10
1510c     00 16 06 F6 | 	mov	arg03, #0
15110     E4 7F B0 FD | 	call	#__system___basic_print_char
15114     00 12 06 F6 | 	mov	arg01, #0
15118     C0 CC B0 FD | 	call	#__system___getiolock_0474
1511c     FD 00 68 FC | 	wrlong	#0, result1
15120                 | LR__1686
15120                 | LR__1687
15120                 | ' if r=print_mod_empty then print
15120     20 24 0E F2 | 	cmp	local04, #32 wz
15124     2C 00 90 5D |  if_ne	jmp	#LR__1688
15128     00 12 06 F6 | 	mov	arg01, #0
1512c     AC CC B0 FD | 	call	#__system___getiolock_0474
15130     FD 12 02 F6 | 	mov	arg01, result1
15134     14 73 B0 FD | 	call	#__system___lockmem
15138     00 12 06 F6 | 	mov	arg01, #0
1513c     0A 14 06 F6 | 	mov	arg02, #10
15140     00 16 06 F6 | 	mov	arg03, #0
15144     B0 7F B0 FD | 	call	#__system___basic_print_char
15148     00 12 06 F6 | 	mov	arg01, #0
1514c     8C CC B0 FD | 	call	#__system___getiolock_0474
15150     FD 00 68 FC | 	wrlong	#0, result1
15154                 | LR__1688
15154                 | LR__1689
15154     A7 F0 03 F6 | 	mov	ptra, fp
15158     B2 00 A0 FD | 	call	#popregs_
1515c                 | _do_print_ret
1515c     2D 00 64 FD | 	ret
15160                 | 
15160                 | ' 
15160                 | ' 
15160                 | ' sub do_paper
15160                 | _do_paper
15160     03 4A 05 F6 | 	mov	COUNT_, #3
15164     A8 00 A0 FD | 	call	#pushregs_
15168     24 50 BF FD | 	call	#_pop
1516c     FD 1E 02 F6 | 	mov	local01, result1
15170     FE 20 02 F6 | 	mov	local02, result2
15174     FF 22 02 F6 | 	mov	local03, result3
15178                 | ' t1=pop() 
15178                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15178     1E 22 0E F2 | 	cmp	local03, #30 wz
1517c     10 00 90 5D |  if_ne	jmp	#LR__1690
15180     0F 13 02 F6 | 	mov	arg01, local01
15184     00 14 06 F6 | 	mov	arg02, #0
15188     04 A3 B0 FD | 	call	#__system___float_tointeger
1518c     FD 1E 02 F6 | 	mov	local01, result1
15190                 | LR__1690
15190                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15190     1F 22 0E F2 | 	cmp	local03, #31 wz
15194     18 00 90 5D |  if_ne	jmp	#LR__1691
15198     0F 13 02 F6 | 	mov	arg01, local01
1519c     10 A6 B0 FD | 	call	#__system____builtin_atof
151a0     FD 12 02 F6 | 	mov	arg01, result1
151a4     00 14 06 F6 | 	mov	arg02, #0
151a8     E4 A2 B0 FD | 	call	#__system___float_tointeger
151ac     FD 1E 02 F6 | 	mov	local01, result1
151b0                 | LR__1691
151b0     57 00 00 FF 
151b4     1C E4 05 F1 | 	add	objptr, ##44572
151b8     F2 1E 62 FC | 	wrlong	local01, objptr
151bc     04 E4 05 F1 | 	add	objptr, #4
151c0     F2 12 02 FB | 	rdlong	arg01, objptr
151c4                 | ' 
151c4                 | ' write_color:=ff
151c4     56 00 00 FF 
151c8     E3 E5 85 F1 | 	sub	objptr, ##44515
151cc     F2 12 62 FC | 	wrlong	arg01, objptr
151d0                 | ' write_background:=bb
151d0     04 E4 05 F1 | 	add	objptr, #4
151d4     F2 1E 62 FC | 	wrlong	local01, objptr
151d8     41 E4 85 F1 | 	sub	objptr, #65
151dc     A7 F0 03 F6 | 	mov	ptra, fp
151e0     B2 00 A0 FD | 	call	#popregs_
151e4                 | _do_paper_ret
151e4     2D 00 64 FD | 	ret
151e8                 | 
151e8                 | ' 
151e8                 | ' sub do_ink
151e8                 | _do_ink
151e8     03 4A 05 F6 | 	mov	COUNT_, #3
151ec     A8 00 A0 FD | 	call	#pushregs_
151f0     9C 4F BF FD | 	call	#_pop
151f4     FD 1E 02 F6 | 	mov	local01, result1
151f8     FE 20 02 F6 | 	mov	local02, result2
151fc     FF 22 02 F6 | 	mov	local03, result3
15200                 | ' t1=pop() 
15200                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15200     1E 22 0E F2 | 	cmp	local03, #30 wz
15204     10 00 90 5D |  if_ne	jmp	#LR__1700
15208     0F 13 02 F6 | 	mov	arg01, local01
1520c     00 14 06 F6 | 	mov	arg02, #0
15210     7C A2 B0 FD | 	call	#__system___float_tointeger
15214     FD 1E 02 F6 | 	mov	local01, result1
15218                 | LR__1700
15218                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15218     1F 22 0E F2 | 	cmp	local03, #31 wz
1521c     18 00 90 5D |  if_ne	jmp	#LR__1701
15220     0F 13 02 F6 | 	mov	arg01, local01
15224     88 A5 B0 FD | 	call	#__system____builtin_atof
15228     FD 12 02 F6 | 	mov	arg01, result1
1522c     00 14 06 F6 | 	mov	arg02, #0
15230     5C A2 B0 FD | 	call	#__system___float_tointeger
15234     FD 1E 02 F6 | 	mov	local01, result1
15238                 | LR__1701
15238     57 00 00 FF 
1523c     20 E4 05 F1 | 	add	objptr, ##44576
15240     F2 1E 62 FC | 	wrlong	local01, objptr
15244     04 E4 85 F1 | 	sub	objptr, #4
15248     F2 14 02 FB | 	rdlong	arg02, objptr
1524c                 | ' 
1524c                 | ' write_color:=ff
1524c     56 00 00 FF 
15250     DF E5 85 F1 | 	sub	objptr, ##44511
15254     F2 1E 62 FC | 	wrlong	local01, objptr
15258                 | ' write_background:=bb
15258     04 E4 05 F1 | 	add	objptr, #4
1525c     F2 14 62 FC | 	wrlong	arg02, objptr
15260     56 00 00 FF 
15264     DF E5 05 F1 | 	add	objptr, ##44511
15268     F2 12 02 FB | 	rdlong	arg01, objptr
1526c     57 00 00 FF 
15270     20 E4 85 F1 | 	sub	objptr, ##44576
15274     4C 4D B0 FD | 	call	#_hg010b_spin2_setcursorcolor
15278     A7 F0 03 F6 | 	mov	ptra, fp
1527c     B2 00 A0 FD | 	call	#popregs_
15280                 | _do_ink_ret
15280     2D 00 64 FD | 	ret
15284                 | 
15284                 | ' 
15284                 | ' 
15284                 | ' sub do_font
15284                 | _do_font
15284     03 4A 05 F6 | 	mov	COUNT_, #3
15288     A8 00 A0 FD | 	call	#pushregs_
1528c     00 4F BF FD | 	call	#_pop
15290     FD 1E 02 F6 | 	mov	local01, result1
15294     FE 20 02 F6 | 	mov	local02, result2
15298     FF 22 02 F6 | 	mov	local03, result3
1529c                 | ' t1=pop() 
1529c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1529c     1E 22 0E F2 | 	cmp	local03, #30 wz
152a0     10 00 90 5D |  if_ne	jmp	#LR__1710
152a4     0F 13 02 F6 | 	mov	arg01, local01
152a8     00 14 06 F6 | 	mov	arg02, #0
152ac     E0 A1 B0 FD | 	call	#__system___float_tointeger
152b0     FD 1E 02 F6 | 	mov	local01, result1
152b4                 | LR__1710
152b4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
152b4     1F 22 0E F2 | 	cmp	local03, #31 wz
152b8     18 00 90 5D |  if_ne	jmp	#LR__1711
152bc     0F 13 02 F6 | 	mov	arg01, local01
152c0     EC A4 B0 FD | 	call	#__system____builtin_atof
152c4     FD 12 02 F6 | 	mov	arg01, result1
152c8     00 14 06 F6 | 	mov	arg02, #0
152cc     C0 A1 B0 FD | 	call	#__system___float_tointeger
152d0     FD 1E 02 F6 | 	mov	local01, result1
152d4                 | LR__1711
152d4     57 00 00 FF 
152d8     24 E4 05 F1 | 	add	objptr, ##44580
152dc     F2 1E 62 FC | 	wrlong	local01, objptr
152e0     57 00 00 FF 
152e4     24 E4 85 F1 | 	sub	objptr, ##44580
152e8     02 1E 66 F0 | 	shl	local01, #2
152ec     0F 13 02 F6 | 	mov	arg01, local01
152f0     4C 5C B0 FD | 	call	#_hg010b_spin2_setfontfamily
152f4     A7 F0 03 F6 | 	mov	ptra, fp
152f8     B2 00 A0 FD | 	call	#popregs_
152fc                 | _do_font_ret
152fc     2D 00 64 FD | 	ret
15300                 | 
15300                 | ' 
15300                 | ' sub do_mode
15300                 | _do_mode
15300     04 4A 05 F6 | 	mov	COUNT_, #4
15304     A8 00 A0 FD | 	call	#pushregs_
15308     84 4E BF FD | 	call	#_pop
1530c     FD 1E 02 F6 | 	mov	local01, result1
15310     FE 20 02 F6 | 	mov	local02, result2
15314     FF 22 02 F6 | 	mov	local03, result3
15318                 | ' t1=pop() 
15318                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15318     1E 22 0E F2 | 	cmp	local03, #30 wz
1531c     10 00 90 5D |  if_ne	jmp	#LR__1720
15320     0F 13 02 F6 | 	mov	arg01, local01
15324     00 14 06 F6 | 	mov	arg02, #0
15328     64 A1 B0 FD | 	call	#__system___float_tointeger
1532c     FD 1E 02 F6 | 	mov	local01, result1
15330                 | LR__1720
15330                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15330     1F 22 0E F2 | 	cmp	local03, #31 wz
15334     18 00 90 5D |  if_ne	jmp	#LR__1721
15338     0F 13 02 F6 | 	mov	arg01, local01
1533c     70 A4 B0 FD | 	call	#__system____builtin_atof
15340     FD 12 02 F6 | 	mov	arg01, result1
15344     00 14 06 F6 | 	mov	arg02, #0
15348     44 A1 B0 FD | 	call	#__system___float_tointeger
1534c     FD 1E 02 F6 | 	mov	local01, result1
15350                 | LR__1721
15350                 | ' select case t1.result.iresult
15350     0F 25 02 F6 | 	mov	local04, local01
15354     05 24 26 F3 | 	fle	local04, #5
15358     30 24 62 FD | 	jmprel	local04
1535c                 | LR__1722
1535c     14 00 90 FD | 	jmp	#LR__1723
15360     A8 00 90 FD | 	jmp	#LR__1724
15364     10 01 90 FD | 	jmp	#LR__1725
15368     78 01 90 FD | 	jmp	#LR__1726
1536c     E0 01 90 FD | 	jmp	#LR__1727
15370     70 02 90 FD | 	jmp	#LR__1728
15374                 | LR__1723
15374     57 00 00 FF 
15378     24 E4 05 F1 | 	add	objptr, ##44580
1537c     F2 02 68 FC | 	wrlong	#1, objptr
15380     04 E4 85 F1 | 	sub	objptr, #4
15384     F2 34 69 FC | 	wrlong	#154, objptr
15388     22 00 00 FF 
1538c     A4 E5 05 F1 | 	add	objptr, ##17828
15390     F2 02 68 FC | 	wrlong	#1, objptr
15394     22 00 00 FF 
15398     A8 E5 85 F1 | 	sub	objptr, ##17832
1539c     F2 26 69 FC | 	wrlong	#147, objptr
153a0     57 00 00 FF 
153a4     1C E4 85 F1 | 	sub	objptr, ##44572
153a8     04 12 06 F6 | 	mov	arg01, #4
153ac     90 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
153b0     57 00 00 FF 
153b4     20 E4 05 F1 | 	add	objptr, ##44576
153b8     F2 12 02 FB | 	rdlong	arg01, objptr
153bc     04 E4 85 F1 | 	sub	objptr, #4
153c0     F2 14 02 FB | 	rdlong	arg02, objptr
153c4                 | ' 
153c4                 | ' write_color:=ff
153c4     56 00 00 FF 
153c8     DF E5 85 F1 | 	sub	objptr, ##44511
153cc     F2 12 62 FC | 	wrlong	arg01, objptr
153d0                 | ' write_background:=bb
153d0     04 E4 05 F1 | 	add	objptr, #4
153d4     F2 14 62 FC | 	wrlong	arg02, objptr
153d8     01 00 00 FF 
153dc     00 EA 05 F1 | 	add	ptr__dat__, ##512
153e0     7B 00 00 FF 
153e4     27 E4 05 F1 | 	add	objptr, ##63015
153e8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
153ec     04 E4 85 F1 | 	sub	objptr, #4
153f0     03 00 80 FF 
153f4     F2 30 69 FC | 	wrlong	##1688, objptr
153f8     7B 00 00 FF 
153fc     64 E4 85 F1 | 	sub	objptr, ##63076
15400     01 00 00 FF 
15404     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15408     D8 01 90 FD | 	jmp	#LR__1728
1540c                 | LR__1724
1540c     57 00 00 FF 
15410     24 E4 05 F1 | 	add	objptr, ##44580
15414     F2 00 68 FC | 	wrlong	#0, objptr
15418     04 E4 85 F1 | 	sub	objptr, #4
1541c     F2 2E 68 FC | 	wrlong	#23, objptr
15420     22 00 00 FF 
15424     A4 E5 05 F1 | 	add	objptr, ##17828
15428     F2 00 68 FC | 	wrlong	#0, objptr
1542c     22 00 00 FF 
15430     A8 E5 85 F1 | 	sub	objptr, ##17832
15434     F2 00 68 FC | 	wrlong	#0, objptr
15438     57 00 00 FF 
1543c     1C E4 85 F1 | 	sub	objptr, ##44572
15440     00 12 06 F6 | 	mov	arg01, #0
15444     F8 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
15448     57 00 00 FF 
1544c     20 E4 05 F1 | 	add	objptr, ##44576
15450     F2 12 02 FB | 	rdlong	arg01, objptr
15454     04 E4 85 F1 | 	sub	objptr, #4
15458     F2 14 02 FB | 	rdlong	arg02, objptr
1545c                 | ' 
1545c                 | ' write_color:=ff
1545c     56 00 00 FF 
15460     DF E5 85 F1 | 	sub	objptr, ##44511
15464     F2 12 62 FC | 	wrlong	arg01, objptr
15468                 | ' write_background:=bb
15468     04 E4 05 F1 | 	add	objptr, #4
1546c     F2 14 62 FC | 	wrlong	arg02, objptr
15470     41 E4 85 F1 | 	sub	objptr, #65
15474     6C 01 90 FD | 	jmp	#LR__1728
15478                 | LR__1725
15478     57 00 00 FF 
1547c     24 E4 05 F1 | 	add	objptr, ##44580
15480     F2 00 68 FC | 	wrlong	#0, objptr
15484     04 E4 85 F1 | 	sub	objptr, #4
15488     F2 6A 69 FC | 	wrlong	#181, objptr
1548c     22 00 00 FF 
15490     A4 E5 05 F1 | 	add	objptr, ##17828
15494     F2 00 68 FC | 	wrlong	#0, objptr
15498     22 00 00 FF 
1549c     A8 E5 85 F1 | 	sub	objptr, ##17832
154a0     F2 00 68 FC | 	wrlong	#0, objptr
154a4     57 00 00 FF 
154a8     1C E4 85 F1 | 	sub	objptr, ##44572
154ac     00 12 06 F6 | 	mov	arg01, #0
154b0     8C 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
154b4     57 00 00 FF 
154b8     20 E4 05 F1 | 	add	objptr, ##44576
154bc     F2 12 02 FB | 	rdlong	arg01, objptr
154c0     04 E4 85 F1 | 	sub	objptr, #4
154c4     F2 14 02 FB | 	rdlong	arg02, objptr
154c8                 | ' 
154c8                 | ' write_color:=ff
154c8     56 00 00 FF 
154cc     DF E5 85 F1 | 	sub	objptr, ##44511
154d0     F2 12 62 FC | 	wrlong	arg01, objptr
154d4                 | ' write_background:=bb
154d4     04 E4 05 F1 | 	add	objptr, #4
154d8     F2 14 62 FC | 	wrlong	arg02, objptr
154dc     41 E4 85 F1 | 	sub	objptr, #65
154e0     00 01 90 FD | 	jmp	#LR__1728
154e4                 | LR__1726
154e4     57 00 00 FF 
154e8     24 E4 05 F1 | 	add	objptr, ##44580
154ec     F2 00 68 FC | 	wrlong	#0, objptr
154f0     04 E4 85 F1 | 	sub	objptr, #4
154f4     F2 1E 68 FC | 	wrlong	#15, objptr
154f8     22 00 00 FF 
154fc     A4 E5 05 F1 | 	add	objptr, ##17828
15500     F2 00 68 FC | 	wrlong	#0, objptr
15504     22 00 00 FF 
15508     A8 E5 85 F1 | 	sub	objptr, ##17832
1550c     F2 00 68 FC | 	wrlong	#0, objptr
15510     57 00 00 FF 
15514     1C E4 85 F1 | 	sub	objptr, ##44572
15518     00 12 06 F6 | 	mov	arg01, #0
1551c     20 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
15520     57 00 00 FF 
15524     20 E4 05 F1 | 	add	objptr, ##44576
15528     F2 12 02 FB | 	rdlong	arg01, objptr
1552c     04 E4 85 F1 | 	sub	objptr, #4
15530     F2 14 02 FB | 	rdlong	arg02, objptr
15534                 | ' 
15534                 | ' write_color:=ff
15534     56 00 00 FF 
15538     DF E5 85 F1 | 	sub	objptr, ##44511
1553c     F2 12 62 FC | 	wrlong	arg01, objptr
15540                 | ' write_background:=bb
15540     04 E4 05 F1 | 	add	objptr, #4
15544     F2 14 62 FC | 	wrlong	arg02, objptr
15548     41 E4 85 F1 | 	sub	objptr, #65
1554c     94 00 90 FD | 	jmp	#LR__1728
15550                 | LR__1727
15550     57 00 00 FF 
15554     24 E4 05 F1 | 	add	objptr, ##44580
15558     F2 02 68 FC | 	wrlong	#1, objptr
1555c     04 E4 85 F1 | 	sub	objptr, #4
15560     F2 02 68 FC | 	wrlong	#1, objptr
15564     22 00 00 FF 
15568     A4 E5 05 F1 | 	add	objptr, ##17828
1556c     F2 02 68 FC | 	wrlong	#1, objptr
15570     22 00 00 FF 
15574     A8 E5 85 F1 | 	sub	objptr, ##17832
15578     F2 1C 68 FC | 	wrlong	#14, objptr
1557c     57 00 00 FF 
15580     1C E4 85 F1 | 	sub	objptr, ##44572
15584     04 12 06 F6 | 	mov	arg01, #4
15588     B4 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1558c     57 00 00 FF 
15590     20 E4 05 F1 | 	add	objptr, ##44576
15594     F2 12 02 FB | 	rdlong	arg01, objptr
15598     04 E4 85 F1 | 	sub	objptr, #4
1559c     F2 14 02 FB | 	rdlong	arg02, objptr
155a0                 | ' 
155a0                 | ' write_color:=ff
155a0     56 00 00 FF 
155a4     DF E5 85 F1 | 	sub	objptr, ##44511
155a8     F2 12 62 FC | 	wrlong	arg01, objptr
155ac                 | ' write_background:=bb
155ac     04 E4 05 F1 | 	add	objptr, #4
155b0     F2 14 62 FC | 	wrlong	arg02, objptr
155b4     07 00 00 FF 
155b8     8A EB 05 F1 | 	add	ptr__dat__, ##3978
155bc     7B 00 00 FF 
155c0     27 E4 05 F1 | 	add	objptr, ##63015
155c4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
155c8     04 E4 85 F1 | 	sub	objptr, #4
155cc     03 00 80 FF 
155d0     F2 30 69 FC | 	wrlong	##1688, objptr
155d4     7B 00 00 FF 
155d8     64 E4 85 F1 | 	sub	objptr, ##63076
155dc     07 00 00 FF 
155e0     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
155e4                 | LR__1728
155e4     7B 00 00 FF 
155e8     60 E4 05 F1 | 	add	objptr, ##63072
155ec     F2 1E 62 FC | 	wrlong	local01, objptr
155f0     24 00 00 FF 
155f4     40 E4 85 F1 | 	sub	objptr, ##18496
155f8     F2 12 02 FB | 	rdlong	arg01, objptr
155fc     04 E4 85 F1 | 	sub	objptr, #4
15600     F2 14 02 FB | 	rdlong	arg02, objptr
15604     57 00 00 FF 
15608     1C E4 85 F1 | 	sub	objptr, ##44572
1560c     44 5A B0 FD | 	call	#_hg010b_spin2_cls
15610     60 01 00 FF 
15614     BA 12 06 F6 | 	mov	arg01, ##@LR__4950
15618                 | ' 
15618                 | ' write(text)
15618     F4 5C B0 FD | 	call	#_hg010b_spin2_write
1561c                 | ' crlf
1561c     50 5E B0 FD | 	call	#_hg010b_spin2_crlf
15620     18 00 00 FF 
15624     4C EB 05 F1 | 	add	ptr__dat__, ##12620
15628     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1562c     18 00 00 FF 
15630     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
15634                 | ' 
15634                 | ' write(text)
15634     D8 5C B0 FD | 	call	#_hg010b_spin2_write
15638                 | ' crlf
15638     34 5E B0 FD | 	call	#_hg010b_spin2_crlf
1563c     79 00 00 FF 
15640     C0 E5 05 F1 | 	add	objptr, ##62400
15644     F2 12 02 FB | 	rdlong	arg01, objptr
15648     79 00 00 FF 
1564c     C0 E5 85 F1 | 	sub	objptr, ##62400
15650                 | ' 
15650                 | ' write(text)
15650     BC 5C B0 FD | 	call	#_hg010b_spin2_write
15654                 | ' crlf
15654     18 5E B0 FD | 	call	#_hg010b_spin2_crlf
15658     A7 F0 03 F6 | 	mov	ptra, fp
1565c     B2 00 A0 FD | 	call	#popregs_
15660                 | _do_mode_ret
15660     2D 00 64 FD | 	ret
15664                 | 
15664                 | ' 
15664                 | ' sub do_setwave
15664                 | _do_setwave
15664     02 4A 05 F6 | 	mov	COUNT_, #2
15668     A8 00 A0 FD | 	call	#pushregs_
1566c     18 F0 07 F1 | 	add	ptra, #24
15670     1C 4B BF FD | 	call	#_pop
15674     FD 12 02 F6 | 	mov	arg01, result1
15678     FE 1E 02 F6 | 	mov	local01, result2
1567c     FF 20 02 F6 | 	mov	local02, result3
15680     A7 12 62 FC | 	wrlong	arg01, fp
15684     04 4E 05 F1 | 	add	fp, #4
15688     A7 1E 62 FC | 	wrlong	local01, fp
1568c     04 4E 05 F1 | 	add	fp, #4
15690     A7 20 62 FC | 	wrlong	local02, fp
15694     08 4E 85 F1 | 	sub	fp, #8
15698     F4 4A BF FD | 	call	#_pop
1569c     FD 20 02 F6 | 	mov	local02, result1
156a0     0C 4E 05 F1 | 	add	fp, #12
156a4     A7 20 62 FC | 	wrlong	local02, fp
156a8     04 4E 05 F1 | 	add	fp, #4
156ac     A7 FC 61 FC | 	wrlong	result2, fp
156b0     04 4E 05 F1 | 	add	fp, #4
156b4     A7 FE 61 FC | 	wrlong	result3, fp
156b8     08 4E 85 F1 | 	sub	fp, #8
156bc     A7 12 02 F6 | 	mov	arg01, fp
156c0     0C 4E 85 F1 | 	sub	fp, #12
156c4     C0 D3 BF FD | 	call	#_converttoint
156c8     FD 20 02 F6 | 	mov	local02, result1
156cc     10 1F 02 F6 | 	mov	local01, local02
156d0     01 1E 66 F0 | 	shl	local01, #1
156d4     10 1F 02 F1 | 	add	local01, local02
156d8     03 1E 66 F0 | 	shl	local01, #3
156dc     34 00 00 FF 
156e0     2C E5 05 F1 | 	add	objptr, ##26924
156e4     F2 1E 02 F1 | 	add	local01, objptr
156e8     A7 12 02 F6 | 	mov	arg01, fp
156ec     34 00 00 FF 
156f0     2C E5 85 F1 | 	sub	objptr, ##26924
156f4     90 D3 BF FD | 	call	#_converttoint
156f8     04 1E 06 F1 | 	add	local01, #4
156fc     0F FB 41 FC | 	wrbyte	result1, local01
15700     A7 F0 03 F6 | 	mov	ptra, fp
15704     B2 00 A0 FD | 	call	#popregs_
15708                 | _do_setwave_ret
15708     2D 00 64 FD | 	ret
1570c                 | 
1570c                 | ' 
1570c                 | ' sub do_setsustain
1570c                 | _do_setsustain
1570c     02 4A 05 F6 | 	mov	COUNT_, #2
15710     A8 00 A0 FD | 	call	#pushregs_
15714     18 F0 07 F1 | 	add	ptra, #24
15718     74 4A BF FD | 	call	#_pop
1571c     FD 12 02 F6 | 	mov	arg01, result1
15720     FE 1E 02 F6 | 	mov	local01, result2
15724     FF 20 02 F6 | 	mov	local02, result3
15728     A7 12 62 FC | 	wrlong	arg01, fp
1572c     04 4E 05 F1 | 	add	fp, #4
15730     A7 1E 62 FC | 	wrlong	local01, fp
15734     04 4E 05 F1 | 	add	fp, #4
15738     A7 20 62 FC | 	wrlong	local02, fp
1573c     08 4E 85 F1 | 	sub	fp, #8
15740     4C 4A BF FD | 	call	#_pop
15744     FD 20 02 F6 | 	mov	local02, result1
15748     0C 4E 05 F1 | 	add	fp, #12
1574c     A7 20 62 FC | 	wrlong	local02, fp
15750     04 4E 05 F1 | 	add	fp, #4
15754     A7 FC 61 FC | 	wrlong	result2, fp
15758     04 4E 05 F1 | 	add	fp, #4
1575c     A7 FE 61 FC | 	wrlong	result3, fp
15760     08 4E 85 F1 | 	sub	fp, #8
15764     A7 12 02 F6 | 	mov	arg01, fp
15768     0C 4E 85 F1 | 	sub	fp, #12
1576c     18 D3 BF FD | 	call	#_converttoint
15770     FD 20 02 F6 | 	mov	local02, result1
15774     10 1F 02 F6 | 	mov	local01, local02
15778     01 1E 66 F0 | 	shl	local01, #1
1577c     10 1F 02 F1 | 	add	local01, local02
15780     03 1E 66 F0 | 	shl	local01, #3
15784     34 00 00 FF 
15788     2C E5 05 F1 | 	add	objptr, ##26924
1578c     F2 1E 02 F1 | 	add	local01, objptr
15790     A7 12 02 F6 | 	mov	arg01, fp
15794     34 00 00 FF 
15798     2C E5 85 F1 | 	sub	objptr, ##26924
1579c     E8 D2 BF FD | 	call	#_converttoint
157a0     14 1E 06 F1 | 	add	local01, #20
157a4     0F FB 51 FC | 	wrword	result1, local01
157a8     A7 F0 03 F6 | 	mov	ptra, fp
157ac     B2 00 A0 FD | 	call	#popregs_
157b0                 | _do_setsustain_ret
157b0     2D 00 64 FD | 	ret
157b4                 | 
157b4                 | ' 
157b4                 | ' sub do_setenv
157b4                 | _do_setenv
157b4     02 4A 05 F6 | 	mov	COUNT_, #2
157b8     A8 00 A0 FD | 	call	#pushregs_
157bc     18 F0 07 F1 | 	add	ptra, #24
157c0     CC 49 BF FD | 	call	#_pop
157c4     FD 12 02 F6 | 	mov	arg01, result1
157c8     FE 1E 02 F6 | 	mov	local01, result2
157cc     FF 20 02 F6 | 	mov	local02, result3
157d0     A7 12 62 FC | 	wrlong	arg01, fp
157d4     04 4E 05 F1 | 	add	fp, #4
157d8     A7 1E 62 FC | 	wrlong	local01, fp
157dc     04 4E 05 F1 | 	add	fp, #4
157e0     A7 20 62 FC | 	wrlong	local02, fp
157e4     08 4E 85 F1 | 	sub	fp, #8
157e8     A4 49 BF FD | 	call	#_pop
157ec     FD 20 02 F6 | 	mov	local02, result1
157f0     0C 4E 05 F1 | 	add	fp, #12
157f4     A7 20 62 FC | 	wrlong	local02, fp
157f8     04 4E 05 F1 | 	add	fp, #4
157fc     A7 FC 61 FC | 	wrlong	result2, fp
15800     04 4E 05 F1 | 	add	fp, #4
15804     A7 FE 61 FC | 	wrlong	result3, fp
15808     08 4E 85 F1 | 	sub	fp, #8
1580c     A7 12 02 F6 | 	mov	arg01, fp
15810     0C 4E 85 F1 | 	sub	fp, #12
15814     70 D2 BF FD | 	call	#_converttoint
15818     FD 20 02 F6 | 	mov	local02, result1
1581c     10 1F 02 F6 | 	mov	local01, local02
15820     01 1E 66 F0 | 	shl	local01, #1
15824     10 1F 02 F1 | 	add	local01, local02
15828     03 1E 66 F0 | 	shl	local01, #3
1582c     34 00 00 FF 
15830     2C E5 05 F1 | 	add	objptr, ##26924
15834     F2 1E 02 F1 | 	add	local01, objptr
15838     A7 12 02 F6 | 	mov	arg01, fp
1583c     34 00 00 FF 
15840     2C E5 85 F1 | 	sub	objptr, ##26924
15844     40 D2 BF FD | 	call	#_converttoint
15848     05 1E 06 F1 | 	add	local01, #5
1584c     0F FB 41 FC | 	wrbyte	result1, local01
15850     A7 F0 03 F6 | 	mov	ptra, fp
15854     B2 00 A0 FD | 	call	#popregs_
15858                 | _do_setenv_ret
15858     2D 00 64 FD | 	ret
1585c                 | 
1585c                 | ' 
1585c                 | ' sub do_setdelay
1585c                 | _do_setdelay
1585c     02 4A 05 F6 | 	mov	COUNT_, #2
15860     A8 00 A0 FD | 	call	#pushregs_
15864     18 F0 07 F1 | 	add	ptra, #24
15868     24 49 BF FD | 	call	#_pop
1586c     FD 12 02 F6 | 	mov	arg01, result1
15870     FE 1E 02 F6 | 	mov	local01, result2
15874     FF 20 02 F6 | 	mov	local02, result3
15878     A7 12 62 FC | 	wrlong	arg01, fp
1587c     04 4E 05 F1 | 	add	fp, #4
15880     A7 1E 62 FC | 	wrlong	local01, fp
15884     04 4E 05 F1 | 	add	fp, #4
15888     A7 20 62 FC | 	wrlong	local02, fp
1588c     08 4E 85 F1 | 	sub	fp, #8
15890     FC 48 BF FD | 	call	#_pop
15894     FD 20 02 F6 | 	mov	local02, result1
15898     0C 4E 05 F1 | 	add	fp, #12
1589c     A7 20 62 FC | 	wrlong	local02, fp
158a0     04 4E 05 F1 | 	add	fp, #4
158a4     A7 FC 61 FC | 	wrlong	result2, fp
158a8     04 4E 05 F1 | 	add	fp, #4
158ac     A7 FE 61 FC | 	wrlong	result3, fp
158b0     08 4E 85 F1 | 	sub	fp, #8
158b4     A7 12 02 F6 | 	mov	arg01, fp
158b8     0C 4E 85 F1 | 	sub	fp, #12
158bc     C8 D1 BF FD | 	call	#_converttoint
158c0     FD 20 02 F6 | 	mov	local02, result1
158c4     10 1F 02 F6 | 	mov	local01, local02
158c8     01 1E 66 F0 | 	shl	local01, #1
158cc     10 1F 02 F1 | 	add	local01, local02
158d0     03 1E 66 F0 | 	shl	local01, #3
158d4     34 00 00 FF 
158d8     2C E5 05 F1 | 	add	objptr, ##26924
158dc     F2 1E 02 F1 | 	add	local01, objptr
158e0     A7 12 02 F6 | 	mov	arg01, fp
158e4     34 00 00 FF 
158e8     2C E5 85 F1 | 	sub	objptr, ##26924
158ec     98 D1 BF FD | 	call	#_converttoint
158f0     06 1E 06 F1 | 	add	local01, #6
158f4     0F FB 51 FC | 	wrword	result1, local01
158f8     A7 F0 03 F6 | 	mov	ptra, fp
158fc     B2 00 A0 FD | 	call	#popregs_
15900                 | _do_setdelay_ret
15900     2D 00 64 FD | 	ret
15904                 | 
15904                 | ' 
15904                 | ' sub do_setlen
15904                 | _do_setlen
15904     02 4A 05 F6 | 	mov	COUNT_, #2
15908     A8 00 A0 FD | 	call	#pushregs_
1590c     18 F0 07 F1 | 	add	ptra, #24
15910     7C 48 BF FD | 	call	#_pop
15914     FD 12 02 F6 | 	mov	arg01, result1
15918     FE 1E 02 F6 | 	mov	local01, result2
1591c     FF 20 02 F6 | 	mov	local02, result3
15920     A7 12 62 FC | 	wrlong	arg01, fp
15924     04 4E 05 F1 | 	add	fp, #4
15928     A7 1E 62 FC | 	wrlong	local01, fp
1592c     04 4E 05 F1 | 	add	fp, #4
15930     A7 20 62 FC | 	wrlong	local02, fp
15934     08 4E 85 F1 | 	sub	fp, #8
15938     54 48 BF FD | 	call	#_pop
1593c     FD 20 02 F6 | 	mov	local02, result1
15940     0C 4E 05 F1 | 	add	fp, #12
15944     A7 20 62 FC | 	wrlong	local02, fp
15948     04 4E 05 F1 | 	add	fp, #4
1594c     A7 FC 61 FC | 	wrlong	result2, fp
15950     04 4E 05 F1 | 	add	fp, #4
15954     A7 FE 61 FC | 	wrlong	result3, fp
15958     08 4E 85 F1 | 	sub	fp, #8
1595c     A7 12 02 F6 | 	mov	arg01, fp
15960     0C 4E 85 F1 | 	sub	fp, #12
15964     20 D1 BF FD | 	call	#_converttoint
15968     FD 20 02 F6 | 	mov	local02, result1
1596c     10 1F 02 F6 | 	mov	local01, local02
15970     01 1E 66 F0 | 	shl	local01, #1
15974     10 1F 02 F1 | 	add	local01, local02
15978     03 1E 66 F0 | 	shl	local01, #3
1597c     34 00 00 FF 
15980     2C E5 05 F1 | 	add	objptr, ##26924
15984     F2 1E 02 F1 | 	add	local01, objptr
15988     A7 12 02 F6 | 	mov	arg01, fp
1598c     34 00 00 FF 
15990     2C E5 85 F1 | 	sub	objptr, ##26924
15994     9C D1 BF FD | 	call	#_converttofloat
15998     08 1E 06 F1 | 	add	local01, #8
1599c     0F FB 61 FC | 	wrlong	result1, local01
159a0     A7 F0 03 F6 | 	mov	ptra, fp
159a4     B2 00 A0 FD | 	call	#popregs_
159a8                 | _do_setlen_ret
159a8     2D 00 64 FD | 	ret
159ac                 | 
159ac                 | ' 
159ac                 | ' sub do_setvol
159ac                 | _do_setvol
159ac     02 4A 05 F6 | 	mov	COUNT_, #2
159b0     A8 00 A0 FD | 	call	#pushregs_
159b4     18 F0 07 F1 | 	add	ptra, #24
159b8     D4 47 BF FD | 	call	#_pop
159bc     FD 12 02 F6 | 	mov	arg01, result1
159c0     FE 1E 02 F6 | 	mov	local01, result2
159c4     FF 20 02 F6 | 	mov	local02, result3
159c8     A7 12 62 FC | 	wrlong	arg01, fp
159cc     04 4E 05 F1 | 	add	fp, #4
159d0     A7 1E 62 FC | 	wrlong	local01, fp
159d4     04 4E 05 F1 | 	add	fp, #4
159d8     A7 20 62 FC | 	wrlong	local02, fp
159dc     08 4E 85 F1 | 	sub	fp, #8
159e0     AC 47 BF FD | 	call	#_pop
159e4     FD 20 02 F6 | 	mov	local02, result1
159e8     0C 4E 05 F1 | 	add	fp, #12
159ec     A7 20 62 FC | 	wrlong	local02, fp
159f0     04 4E 05 F1 | 	add	fp, #4
159f4     A7 FC 61 FC | 	wrlong	result2, fp
159f8     04 4E 05 F1 | 	add	fp, #4
159fc     A7 FE 61 FC | 	wrlong	result3, fp
15a00     08 4E 85 F1 | 	sub	fp, #8
15a04     A7 12 02 F6 | 	mov	arg01, fp
15a08     0C 4E 85 F1 | 	sub	fp, #12
15a0c     78 D0 BF FD | 	call	#_converttoint
15a10     FD 20 02 F6 | 	mov	local02, result1
15a14     10 1F 02 F6 | 	mov	local01, local02
15a18     01 1E 66 F0 | 	shl	local01, #1
15a1c     10 1F 02 F1 | 	add	local01, local02
15a20     03 1E 66 F0 | 	shl	local01, #3
15a24     34 00 00 FF 
15a28     2C E5 05 F1 | 	add	objptr, ##26924
15a2c     F2 1E 02 F1 | 	add	local01, objptr
15a30     A7 12 02 F6 | 	mov	arg01, fp
15a34     34 00 00 FF 
15a38     2C E5 85 F1 | 	sub	objptr, ##26924
15a3c     F4 D0 BF FD | 	call	#_converttofloat
15a40     0C 1E 06 F1 | 	add	local01, #12
15a44     0F FB 61 FC | 	wrlong	result1, local01
15a48     A7 F0 03 F6 | 	mov	ptra, fp
15a4c     B2 00 A0 FD | 	call	#popregs_
15a50                 | _do_setvol_ret
15a50     2D 00 64 FD | 	ret
15a54                 | 
15a54                 | ' 
15a54                 | ' sub do_setpan
15a54                 | _do_setpan
15a54     02 4A 05 F6 | 	mov	COUNT_, #2
15a58     A8 00 A0 FD | 	call	#pushregs_
15a5c     18 F0 07 F1 | 	add	ptra, #24
15a60     2C 47 BF FD | 	call	#_pop
15a64     FD 12 02 F6 | 	mov	arg01, result1
15a68     FE 1E 02 F6 | 	mov	local01, result2
15a6c     FF 20 02 F6 | 	mov	local02, result3
15a70     A7 12 62 FC | 	wrlong	arg01, fp
15a74     04 4E 05 F1 | 	add	fp, #4
15a78     A7 1E 62 FC | 	wrlong	local01, fp
15a7c     04 4E 05 F1 | 	add	fp, #4
15a80     A7 20 62 FC | 	wrlong	local02, fp
15a84     08 4E 85 F1 | 	sub	fp, #8
15a88     04 47 BF FD | 	call	#_pop
15a8c     FD 20 02 F6 | 	mov	local02, result1
15a90     0C 4E 05 F1 | 	add	fp, #12
15a94     A7 20 62 FC | 	wrlong	local02, fp
15a98     04 4E 05 F1 | 	add	fp, #4
15a9c     A7 FC 61 FC | 	wrlong	result2, fp
15aa0     04 4E 05 F1 | 	add	fp, #4
15aa4     A7 FE 61 FC | 	wrlong	result3, fp
15aa8     08 4E 85 F1 | 	sub	fp, #8
15aac     A7 12 02 F6 | 	mov	arg01, fp
15ab0     0C 4E 85 F1 | 	sub	fp, #12
15ab4     D0 CF BF FD | 	call	#_converttoint
15ab8     FD 20 02 F6 | 	mov	local02, result1
15abc     10 1F 02 F6 | 	mov	local01, local02
15ac0     01 1E 66 F0 | 	shl	local01, #1
15ac4     10 1F 02 F1 | 	add	local01, local02
15ac8     03 1E 66 F0 | 	shl	local01, #3
15acc     34 00 00 FF 
15ad0     2C E5 05 F1 | 	add	objptr, ##26924
15ad4     F2 1E 02 F1 | 	add	local01, objptr
15ad8     A7 12 02 F6 | 	mov	arg01, fp
15adc     34 00 00 FF 
15ae0     2C E5 85 F1 | 	sub	objptr, ##26924
15ae4     4C D0 BF FD | 	call	#_converttofloat
15ae8     10 1E 06 F1 | 	add	local01, #16
15aec     0F FB 61 FC | 	wrlong	result1, local01
15af0     A7 F0 03 F6 | 	mov	ptra, fp
15af4     B2 00 A0 FD | 	call	#popregs_
15af8                 | _do_setpan_ret
15af8     2D 00 64 FD | 	ret
15afc                 | 
15afc                 | ' 
15afc                 | ' 
15afc                 | ' sub do_pinwrite
15afc                 | _do_pinwrite
15afc     01 4A 05 F6 | 	mov	COUNT_, #1
15b00     A8 00 A0 FD | 	call	#pushregs_
15b04     18 F0 07 F1 | 	add	ptra, #24
15b08     84 46 BF FD | 	call	#_pop
15b0c     FD 14 02 F6 | 	mov	arg02, result1
15b10     FE 12 02 F6 | 	mov	arg01, result2
15b14     FF 1E 02 F6 | 	mov	local01, result3
15b18     A7 14 62 FC | 	wrlong	arg02, fp
15b1c     04 4E 05 F1 | 	add	fp, #4
15b20     A7 12 62 FC | 	wrlong	arg01, fp
15b24     04 4E 05 F1 | 	add	fp, #4
15b28     A7 1E 62 FC | 	wrlong	local01, fp
15b2c     08 4E 85 F1 | 	sub	fp, #8
15b30     5C 46 BF FD | 	call	#_pop
15b34     FF 1E 02 F6 | 	mov	local01, result3
15b38     0C 4E 05 F1 | 	add	fp, #12
15b3c     A7 FA 61 FC | 	wrlong	result1, fp
15b40     04 4E 05 F1 | 	add	fp, #4
15b44     A7 FC 61 FC | 	wrlong	result2, fp
15b48     04 4E 05 F1 | 	add	fp, #4
15b4c     A7 1E 62 FC | 	wrlong	local01, fp
15b50     08 4E 85 F1 | 	sub	fp, #8
15b54     A7 12 02 F6 | 	mov	arg01, fp
15b58     0C 4E 85 F1 | 	sub	fp, #12
15b5c     28 CF BF FD | 	call	#_converttoint
15b60     FD 1E 02 F6 | 	mov	local01, result1
15b64     A7 12 02 F6 | 	mov	arg01, fp
15b68     1C CF BF FD | 	call	#_converttoint
15b6c     FD 14 02 F6 | 	mov	arg02, result1
15b70     0F 13 02 F6 | 	mov	arg01, local01
15b74     88 6A B0 FD | 	call	#__system___pinwrite
15b78     A7 F0 03 F6 | 	mov	ptra, fp
15b7c     B2 00 A0 FD | 	call	#popregs_
15b80                 | _do_pinwrite_ret
15b80     2D 00 64 FD | 	ret
15b84                 | 
15b84                 | ' 
15b84                 | ' sub do_pinfloat
15b84                 | _do_pinfloat
15b84     00 4A 05 F6 | 	mov	COUNT_, #0
15b88     A8 00 A0 FD | 	call	#pushregs_
15b8c     0C F0 07 F1 | 	add	ptra, #12
15b90     FC 45 BF FD | 	call	#_pop
15b94     A7 FA 61 FC | 	wrlong	result1, fp
15b98     04 4E 05 F1 | 	add	fp, #4
15b9c     A7 FC 61 FC | 	wrlong	result2, fp
15ba0     04 4E 05 F1 | 	add	fp, #4
15ba4     A7 FE 61 FC | 	wrlong	result3, fp
15ba8     08 4E 85 F1 | 	sub	fp, #8
15bac     A7 12 02 F6 | 	mov	arg01, fp
15bb0     D4 CE BF FD | 	call	#_converttoint
15bb4     50 FA 61 FD | 	fltl	result1
15bb8     A7 F0 03 F6 | 	mov	ptra, fp
15bbc     B2 00 A0 FD | 	call	#popregs_
15bc0                 | _do_pinfloat_ret
15bc0     2D 00 64 FD | 	ret
15bc4                 | 
15bc4                 | ' 
15bc4                 | ' sub do_pinlo
15bc4                 | _do_pinlo
15bc4     00 4A 05 F6 | 	mov	COUNT_, #0
15bc8     A8 00 A0 FD | 	call	#pushregs_
15bcc     0C F0 07 F1 | 	add	ptra, #12
15bd0     BC 45 BF FD | 	call	#_pop
15bd4     A7 FA 61 FC | 	wrlong	result1, fp
15bd8     04 4E 05 F1 | 	add	fp, #4
15bdc     A7 FC 61 FC | 	wrlong	result2, fp
15be0     04 4E 05 F1 | 	add	fp, #4
15be4     A7 FE 61 FC | 	wrlong	result3, fp
15be8     08 4E 85 F1 | 	sub	fp, #8
15bec     A7 12 02 F6 | 	mov	arg01, fp
15bf0     94 CE BF FD | 	call	#_converttoint
15bf4     58 FA 61 FD | 	drvl	result1
15bf8     A7 F0 03 F6 | 	mov	ptra, fp
15bfc     B2 00 A0 FD | 	call	#popregs_
15c00                 | _do_pinlo_ret
15c00     2D 00 64 FD | 	ret
15c04                 | 
15c04                 | ' 
15c04                 | ' sub do_pinhi
15c04                 | _do_pinhi
15c04     00 4A 05 F6 | 	mov	COUNT_, #0
15c08     A8 00 A0 FD | 	call	#pushregs_
15c0c     0C F0 07 F1 | 	add	ptra, #12
15c10     7C 45 BF FD | 	call	#_pop
15c14     A7 FA 61 FC | 	wrlong	result1, fp
15c18     04 4E 05 F1 | 	add	fp, #4
15c1c     A7 FC 61 FC | 	wrlong	result2, fp
15c20     04 4E 05 F1 | 	add	fp, #4
15c24     A7 FE 61 FC | 	wrlong	result3, fp
15c28     08 4E 85 F1 | 	sub	fp, #8
15c2c     A7 12 02 F6 | 	mov	arg01, fp
15c30     54 CE BF FD | 	call	#_converttoint
15c34     59 FA 61 FD | 	drvh	result1
15c38     A7 F0 03 F6 | 	mov	ptra, fp
15c3c     B2 00 A0 FD | 	call	#popregs_
15c40                 | _do_pinhi_ret
15c40     2D 00 64 FD | 	ret
15c44                 | 
15c44                 | ' 
15c44                 | ' sub do_pintoggle
15c44                 | _do_pintoggle
15c44     00 4A 05 F6 | 	mov	COUNT_, #0
15c48     A8 00 A0 FD | 	call	#pushregs_
15c4c     0C F0 07 F1 | 	add	ptra, #12
15c50     3C 45 BF FD | 	call	#_pop
15c54     A7 FA 61 FC | 	wrlong	result1, fp
15c58     04 4E 05 F1 | 	add	fp, #4
15c5c     A7 FC 61 FC | 	wrlong	result2, fp
15c60     04 4E 05 F1 | 	add	fp, #4
15c64     A7 FE 61 FC | 	wrlong	result3, fp
15c68     08 4E 85 F1 | 	sub	fp, #8
15c6c     A7 12 02 F6 | 	mov	arg01, fp
15c70     14 CE BF FD | 	call	#_converttoint
15c74     5F FA 61 FD | 	drvnot	result1
15c78     A7 F0 03 F6 | 	mov	ptra, fp
15c7c     B2 00 A0 FD | 	call	#popregs_
15c80                 | _do_pintoggle_ret
15c80     2D 00 64 FD | 	ret
15c84                 | 
15c84                 | ' 
15c84                 | ' 
15c84                 | ' sub do_pinstart
15c84                 | _do_pinstart
15c84     03 4A 05 F6 | 	mov	COUNT_, #3
15c88     A8 00 A0 FD | 	call	#pushregs_
15c8c     30 F0 07 F1 | 	add	ptra, #48
15c90     FC 44 BF FD | 	call	#_pop
15c94     FD 16 02 F6 | 	mov	arg03, result1
15c98     FE 14 02 F6 | 	mov	arg02, result2
15c9c     FF 18 02 F6 | 	mov	arg04, result3
15ca0     A7 16 62 FC | 	wrlong	arg03, fp
15ca4     04 4E 05 F1 | 	add	fp, #4
15ca8     A7 14 62 FC | 	wrlong	arg02, fp
15cac     04 4E 05 F1 | 	add	fp, #4
15cb0     A7 18 62 FC | 	wrlong	arg04, fp
15cb4     08 4E 85 F1 | 	sub	fp, #8
15cb8     D4 44 BF FD | 	call	#_pop
15cbc     FD 16 02 F6 | 	mov	arg03, result1
15cc0     FE 14 02 F6 | 	mov	arg02, result2
15cc4     FF 18 02 F6 | 	mov	arg04, result3
15cc8     0C 4E 05 F1 | 	add	fp, #12
15ccc     A7 16 62 FC | 	wrlong	arg03, fp
15cd0     04 4E 05 F1 | 	add	fp, #4
15cd4     A7 14 62 FC | 	wrlong	arg02, fp
15cd8     04 4E 05 F1 | 	add	fp, #4
15cdc     A7 18 62 FC | 	wrlong	arg04, fp
15ce0     14 4E 85 F1 | 	sub	fp, #20
15ce4     A8 44 BF FD | 	call	#_pop
15ce8     FD 16 02 F6 | 	mov	arg03, result1
15cec     FE 14 02 F6 | 	mov	arg02, result2
15cf0     FF 18 02 F6 | 	mov	arg04, result3
15cf4     18 4E 05 F1 | 	add	fp, #24
15cf8     A7 16 62 FC | 	wrlong	arg03, fp
15cfc     04 4E 05 F1 | 	add	fp, #4
15d00     A7 14 62 FC | 	wrlong	arg02, fp
15d04     04 4E 05 F1 | 	add	fp, #4
15d08     A7 18 62 FC | 	wrlong	arg04, fp
15d0c     20 4E 85 F1 | 	sub	fp, #32
15d10     7C 44 BF FD | 	call	#_pop
15d14     FF 16 02 F6 | 	mov	arg03, result3
15d18     24 4E 05 F1 | 	add	fp, #36
15d1c     A7 FA 61 FC | 	wrlong	result1, fp
15d20     04 4E 05 F1 | 	add	fp, #4
15d24     A7 FC 61 FC | 	wrlong	result2, fp
15d28     04 4E 05 F1 | 	add	fp, #4
15d2c     A7 16 62 FC | 	wrlong	arg03, fp
15d30     08 4E 85 F1 | 	sub	fp, #8
15d34     A7 12 02 F6 | 	mov	arg01, fp
15d38     24 4E 85 F1 | 	sub	fp, #36
15d3c     48 CD BF FD | 	call	#_converttoint
15d40     FD 1E 02 F6 | 	mov	local01, result1
15d44     18 4E 05 F1 | 	add	fp, #24
15d48     A7 12 02 F6 | 	mov	arg01, fp
15d4c     18 4E 85 F1 | 	sub	fp, #24
15d50     34 CD BF FD | 	call	#_converttoint
15d54     FD 20 02 F6 | 	mov	local02, result1
15d58     0C 4E 05 F1 | 	add	fp, #12
15d5c     A7 12 02 F6 | 	mov	arg01, fp
15d60     0C 4E 85 F1 | 	sub	fp, #12
15d64     20 CD BF FD | 	call	#_converttoint
15d68     FD 22 02 F6 | 	mov	local03, result1
15d6c     A7 12 02 F6 | 	mov	arg01, fp
15d70     14 CD BF FD | 	call	#_converttoint
15d74     40 1E 62 FD | 	dirl	local01
15d78     0F 21 02 FC | 	wrpin	local02, local01
15d7c     0F 23 12 FC | 	wxpin	local03, local01
15d80     0F FB 21 FC | 	wypin	result1, local01
15d84     41 1E 62 FD | 	dirh	local01
15d88     A7 F0 03 F6 | 	mov	ptra, fp
15d8c     B2 00 A0 FD | 	call	#popregs_
15d90                 | _do_pinstart_ret
15d90     2D 00 64 FD | 	ret
15d94                 | 
15d94                 | ' 
15d94                 | ' 
15d94                 | ' sub do_wrpin
15d94                 | _do_wrpin
15d94     01 4A 05 F6 | 	mov	COUNT_, #1
15d98     A8 00 A0 FD | 	call	#pushregs_
15d9c     18 F0 07 F1 | 	add	ptra, #24
15da0     EC 43 BF FD | 	call	#_pop
15da4     FD 14 02 F6 | 	mov	arg02, result1
15da8     FE 12 02 F6 | 	mov	arg01, result2
15dac     FF 1E 02 F6 | 	mov	local01, result3
15db0     A7 14 62 FC | 	wrlong	arg02, fp
15db4     04 4E 05 F1 | 	add	fp, #4
15db8     A7 12 62 FC | 	wrlong	arg01, fp
15dbc     04 4E 05 F1 | 	add	fp, #4
15dc0     A7 1E 62 FC | 	wrlong	local01, fp
15dc4     08 4E 85 F1 | 	sub	fp, #8
15dc8     C4 43 BF FD | 	call	#_pop
15dcc     FF 1E 02 F6 | 	mov	local01, result3
15dd0     0C 4E 05 F1 | 	add	fp, #12
15dd4     A7 FA 61 FC | 	wrlong	result1, fp
15dd8     04 4E 05 F1 | 	add	fp, #4
15ddc     A7 FC 61 FC | 	wrlong	result2, fp
15de0     04 4E 05 F1 | 	add	fp, #4
15de4     A7 1E 62 FC | 	wrlong	local01, fp
15de8     08 4E 85 F1 | 	sub	fp, #8
15dec     A7 12 02 F6 | 	mov	arg01, fp
15df0     0C 4E 85 F1 | 	sub	fp, #12
15df4     90 CC BF FD | 	call	#_converttoint
15df8     FD 1E 02 F6 | 	mov	local01, result1
15dfc     A7 12 02 F6 | 	mov	arg01, fp
15e00     84 CC BF FD | 	call	#_converttoint
15e04     0F FB 01 FC | 	wrpin	result1, local01
15e08     A7 F0 03 F6 | 	mov	ptra, fp
15e0c     B2 00 A0 FD | 	call	#popregs_
15e10                 | _do_wrpin_ret
15e10     2D 00 64 FD | 	ret
15e14                 | 
15e14                 | ' 
15e14                 | ' sub do_wxpin
15e14                 | _do_wxpin
15e14     01 4A 05 F6 | 	mov	COUNT_, #1
15e18     A8 00 A0 FD | 	call	#pushregs_
15e1c     18 F0 07 F1 | 	add	ptra, #24
15e20     6C 43 BF FD | 	call	#_pop
15e24     FD 14 02 F6 | 	mov	arg02, result1
15e28     FE 12 02 F6 | 	mov	arg01, result2
15e2c     FF 1E 02 F6 | 	mov	local01, result3
15e30     A7 14 62 FC | 	wrlong	arg02, fp
15e34     04 4E 05 F1 | 	add	fp, #4
15e38     A7 12 62 FC | 	wrlong	arg01, fp
15e3c     04 4E 05 F1 | 	add	fp, #4
15e40     A7 1E 62 FC | 	wrlong	local01, fp
15e44     08 4E 85 F1 | 	sub	fp, #8
15e48     44 43 BF FD | 	call	#_pop
15e4c     FF 1E 02 F6 | 	mov	local01, result3
15e50     0C 4E 05 F1 | 	add	fp, #12
15e54     A7 FA 61 FC | 	wrlong	result1, fp
15e58     04 4E 05 F1 | 	add	fp, #4
15e5c     A7 FC 61 FC | 	wrlong	result2, fp
15e60     04 4E 05 F1 | 	add	fp, #4
15e64     A7 1E 62 FC | 	wrlong	local01, fp
15e68     08 4E 85 F1 | 	sub	fp, #8
15e6c     A7 12 02 F6 | 	mov	arg01, fp
15e70     0C 4E 85 F1 | 	sub	fp, #12
15e74     10 CC BF FD | 	call	#_converttoint
15e78     FD 1E 02 F6 | 	mov	local01, result1
15e7c     A7 12 02 F6 | 	mov	arg01, fp
15e80     04 CC BF FD | 	call	#_converttoint
15e84     0F FB 11 FC | 	wxpin	result1, local01
15e88     A7 F0 03 F6 | 	mov	ptra, fp
15e8c     B2 00 A0 FD | 	call	#popregs_
15e90                 | _do_wxpin_ret
15e90     2D 00 64 FD | 	ret
15e94                 | 
15e94                 | ' 
15e94                 | ' sub do_wypin
15e94                 | _do_wypin
15e94     01 4A 05 F6 | 	mov	COUNT_, #1
15e98     A8 00 A0 FD | 	call	#pushregs_
15e9c     18 F0 07 F1 | 	add	ptra, #24
15ea0     EC 42 BF FD | 	call	#_pop
15ea4     FD 14 02 F6 | 	mov	arg02, result1
15ea8     FE 12 02 F6 | 	mov	arg01, result2
15eac     FF 1E 02 F6 | 	mov	local01, result3
15eb0     A7 14 62 FC | 	wrlong	arg02, fp
15eb4     04 4E 05 F1 | 	add	fp, #4
15eb8     A7 12 62 FC | 	wrlong	arg01, fp
15ebc     04 4E 05 F1 | 	add	fp, #4
15ec0     A7 1E 62 FC | 	wrlong	local01, fp
15ec4     08 4E 85 F1 | 	sub	fp, #8
15ec8     C4 42 BF FD | 	call	#_pop
15ecc     FF 1E 02 F6 | 	mov	local01, result3
15ed0     0C 4E 05 F1 | 	add	fp, #12
15ed4     A7 FA 61 FC | 	wrlong	result1, fp
15ed8     04 4E 05 F1 | 	add	fp, #4
15edc     A7 FC 61 FC | 	wrlong	result2, fp
15ee0     04 4E 05 F1 | 	add	fp, #4
15ee4     A7 1E 62 FC | 	wrlong	local01, fp
15ee8     08 4E 85 F1 | 	sub	fp, #8
15eec     A7 12 02 F6 | 	mov	arg01, fp
15ef0     0C 4E 85 F1 | 	sub	fp, #12
15ef4     90 CB BF FD | 	call	#_converttoint
15ef8     FD 1E 02 F6 | 	mov	local01, result1
15efc     A7 12 02 F6 | 	mov	arg01, fp
15f00     84 CB BF FD | 	call	#_converttoint
15f04     0F FB 21 FC | 	wypin	result1, local01
15f08     A7 F0 03 F6 | 	mov	ptra, fp
15f0c     B2 00 A0 FD | 	call	#popregs_
15f10                 | _do_wypin_ret
15f10     2D 00 64 FD | 	ret
15f14                 | 
15f14                 | ' 
15f14                 | ' sub do_position
15f14                 | _do_position
15f14     01 4A 05 F6 | 	mov	COUNT_, #1
15f18     A8 00 A0 FD | 	call	#pushregs_
15f1c     18 F0 07 F1 | 	add	ptra, #24
15f20     6C 42 BF FD | 	call	#_pop
15f24     FD 14 02 F6 | 	mov	arg02, result1
15f28     FE 12 02 F6 | 	mov	arg01, result2
15f2c     FF 1E 02 F6 | 	mov	local01, result3
15f30     A7 14 62 FC | 	wrlong	arg02, fp
15f34     04 4E 05 F1 | 	add	fp, #4
15f38     A7 12 62 FC | 	wrlong	arg01, fp
15f3c     04 4E 05 F1 | 	add	fp, #4
15f40     A7 1E 62 FC | 	wrlong	local01, fp
15f44     08 4E 85 F1 | 	sub	fp, #8
15f48     44 42 BF FD | 	call	#_pop
15f4c     FF 1E 02 F6 | 	mov	local01, result3
15f50     0C 4E 05 F1 | 	add	fp, #12
15f54     A7 FA 61 FC | 	wrlong	result1, fp
15f58     04 4E 05 F1 | 	add	fp, #4
15f5c     A7 FC 61 FC | 	wrlong	result2, fp
15f60     04 4E 05 F1 | 	add	fp, #4
15f64     A7 1E 62 FC | 	wrlong	local01, fp
15f68     08 4E 85 F1 | 	sub	fp, #8
15f6c     A7 12 02 F6 | 	mov	arg01, fp
15f70     0C 4E 85 F1 | 	sub	fp, #12
15f74     10 CB BF FD | 	call	#_converttoint
15f78     FD 1E 02 F6 | 	mov	local01, result1
15f7c     A7 12 02 F6 | 	mov	arg01, fp
15f80     04 CB BF FD | 	call	#_converttoint
15f84     FD 14 02 F6 | 	mov	arg02, result1
15f88     0F 13 02 F6 | 	mov	arg01, local01
15f8c     F0 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
15f90     A7 F0 03 F6 | 	mov	ptra, fp
15f94     B2 00 A0 FD | 	call	#popregs_
15f98                 | _do_position_ret
15f98     2D 00 64 FD | 	ret
15f9c                 | 
15f9c                 | ' 
15f9c                 | ' sub do_poke
15f9c                 | _do_poke
15f9c     01 4A 05 F6 | 	mov	COUNT_, #1
15fa0     A8 00 A0 FD | 	call	#pushregs_
15fa4     20 F0 07 F1 | 	add	ptra, #32
15fa8     E4 41 BF FD | 	call	#_pop
15fac     FD 14 02 F6 | 	mov	arg02, result1
15fb0     FE 12 02 F6 | 	mov	arg01, result2
15fb4     FF 1E 02 F6 | 	mov	local01, result3
15fb8     A7 14 62 FC | 	wrlong	arg02, fp
15fbc     04 4E 05 F1 | 	add	fp, #4
15fc0     A7 12 62 FC | 	wrlong	arg01, fp
15fc4     04 4E 05 F1 | 	add	fp, #4
15fc8     A7 1E 62 FC | 	wrlong	local01, fp
15fcc     08 4E 85 F1 | 	sub	fp, #8
15fd0     BC 41 BF FD | 	call	#_pop
15fd4     FF 1E 02 F6 | 	mov	local01, result3
15fd8     0C 4E 05 F1 | 	add	fp, #12
15fdc     A7 FA 61 FC | 	wrlong	result1, fp
15fe0     04 4E 05 F1 | 	add	fp, #4
15fe4     A7 FC 61 FC | 	wrlong	result2, fp
15fe8     04 4E 05 F1 | 	add	fp, #4
15fec     A7 1E 62 FC | 	wrlong	local01, fp
15ff0     08 4E 85 F1 | 	sub	fp, #8
15ff4     A7 12 02 F6 | 	mov	arg01, fp
15ff8     0C 4E 85 F1 | 	sub	fp, #12
15ffc     88 CA BF FD | 	call	#_converttoint
16000     18 4E 05 F1 | 	add	fp, #24
16004     A7 FA 61 FC | 	wrlong	result1, fp
16008     18 4E 85 F1 | 	sub	fp, #24
1600c     A7 12 02 F6 | 	mov	arg01, fp
16010     74 CA BF FD | 	call	#_converttoint
16014     1C 4E 05 F1 | 	add	fp, #28
16018     A7 FA 61 FC | 	wrlong	result1, fp
1601c                 | ' t1=pop() 'value
1601c                 | ' t2=pop() 
1601c                 | ' a=converttoint(t2) : v=converttoint(t1)
1601c                 | ' if a<$80000 then poke a,v else pspoke a,v
1601c     04 4E 85 F1 | 	sub	fp, #4
16020     A7 1E 02 FB | 	rdlong	local01, fp
16024     18 4E 85 F1 | 	sub	fp, #24
16028     00 04 00 FF 
1602c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
16030     1C 00 90 3D |  if_ae	jmp	#LR__1730
16034     18 4E 05 F1 | 	add	fp, #24
16038     A7 12 02 FB | 	rdlong	arg01, fp
1603c     04 4E 05 F1 | 	add	fp, #4
16040     A7 14 02 FB | 	rdlong	arg02, fp
16044     1C 4E 85 F1 | 	sub	fp, #28
16048     09 15 42 FC | 	wrbyte	arg02, arg01
1604c     18 00 90 FD | 	jmp	#LR__1731
16050                 | LR__1730
16050     18 4E 05 F1 | 	add	fp, #24
16054     A7 12 02 FB | 	rdlong	arg01, fp
16058     04 4E 05 F1 | 	add	fp, #4
1605c     A7 14 02 FB | 	rdlong	arg02, fp
16060     1C 4E 85 F1 | 	sub	fp, #28
16064     F0 2D B0 FD | 	call	#_pspoke
16068                 | LR__1731
16068     A7 F0 03 F6 | 	mov	ptra, fp
1606c     B2 00 A0 FD | 	call	#popregs_
16070                 | _do_poke_ret
16070     2D 00 64 FD | 	ret
16074                 | 
16074                 | ' 
16074                 | ' sub do_dpoke
16074                 | _do_dpoke
16074     01 4A 05 F6 | 	mov	COUNT_, #1
16078     A8 00 A0 FD | 	call	#pushregs_
1607c     20 F0 07 F1 | 	add	ptra, #32
16080     0C 41 BF FD | 	call	#_pop
16084     FD 14 02 F6 | 	mov	arg02, result1
16088     FE 12 02 F6 | 	mov	arg01, result2
1608c     FF 1E 02 F6 | 	mov	local01, result3
16090     A7 14 62 FC | 	wrlong	arg02, fp
16094     04 4E 05 F1 | 	add	fp, #4
16098     A7 12 62 FC | 	wrlong	arg01, fp
1609c     04 4E 05 F1 | 	add	fp, #4
160a0     A7 1E 62 FC | 	wrlong	local01, fp
160a4     08 4E 85 F1 | 	sub	fp, #8
160a8     E4 40 BF FD | 	call	#_pop
160ac     FF 1E 02 F6 | 	mov	local01, result3
160b0     0C 4E 05 F1 | 	add	fp, #12
160b4     A7 FA 61 FC | 	wrlong	result1, fp
160b8     04 4E 05 F1 | 	add	fp, #4
160bc     A7 FC 61 FC | 	wrlong	result2, fp
160c0     04 4E 05 F1 | 	add	fp, #4
160c4     A7 1E 62 FC | 	wrlong	local01, fp
160c8     08 4E 85 F1 | 	sub	fp, #8
160cc     A7 12 02 F6 | 	mov	arg01, fp
160d0     0C 4E 85 F1 | 	sub	fp, #12
160d4     B0 C9 BF FD | 	call	#_converttoint
160d8     18 4E 05 F1 | 	add	fp, #24
160dc     A7 FA 61 FC | 	wrlong	result1, fp
160e0     18 4E 85 F1 | 	sub	fp, #24
160e4     A7 12 02 F6 | 	mov	arg01, fp
160e8     9C C9 BF FD | 	call	#_converttoint
160ec     1C 4E 05 F1 | 	add	fp, #28
160f0     A7 FA 61 FC | 	wrlong	result1, fp
160f4                 | ' t1=pop() 'value
160f4                 | ' t2=pop() 
160f4                 | ' a=converttoint(t2) : v=converttoint(t1)
160f4                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
160f4     04 4E 85 F1 | 	sub	fp, #4
160f8     A7 1E 02 FB | 	rdlong	local01, fp
160fc     18 4E 85 F1 | 	sub	fp, #24
16100     00 04 00 FF 
16104     00 1E 16 F2 | 	cmp	local01, ##524288 wc
16108     1C 00 90 3D |  if_ae	jmp	#LR__1740
1610c     18 4E 05 F1 | 	add	fp, #24
16110     A7 12 02 FB | 	rdlong	arg01, fp
16114     04 4E 05 F1 | 	add	fp, #4
16118     A7 14 02 FB | 	rdlong	arg02, fp
1611c     1C 4E 85 F1 | 	sub	fp, #28
16120     09 15 52 FC | 	wrword	arg02, arg01
16124     18 00 90 FD | 	jmp	#LR__1741
16128                 | LR__1740
16128     18 4E 05 F1 | 	add	fp, #24
1612c     A7 12 02 FB | 	rdlong	arg01, fp
16130     04 4E 05 F1 | 	add	fp, #4
16134     A7 14 02 FB | 	rdlong	arg02, fp
16138     1C 4E 85 F1 | 	sub	fp, #28
1613c     D0 2C B0 FD | 	call	#_psdpoke
16140                 | LR__1741
16140     A7 F0 03 F6 | 	mov	ptra, fp
16144     B2 00 A0 FD | 	call	#popregs_
16148                 | _do_dpoke_ret
16148     2D 00 64 FD | 	ret
1614c                 | 
1614c                 | ' 
1614c                 | ' sub do_lpoke
1614c                 | _do_lpoke
1614c     01 4A 05 F6 | 	mov	COUNT_, #1
16150     A8 00 A0 FD | 	call	#pushregs_
16154     20 F0 07 F1 | 	add	ptra, #32
16158     34 40 BF FD | 	call	#_pop
1615c     FD 14 02 F6 | 	mov	arg02, result1
16160     FE 12 02 F6 | 	mov	arg01, result2
16164     FF 1E 02 F6 | 	mov	local01, result3
16168     A7 14 62 FC | 	wrlong	arg02, fp
1616c     04 4E 05 F1 | 	add	fp, #4
16170     A7 12 62 FC | 	wrlong	arg01, fp
16174     04 4E 05 F1 | 	add	fp, #4
16178     A7 1E 62 FC | 	wrlong	local01, fp
1617c     08 4E 85 F1 | 	sub	fp, #8
16180     0C 40 BF FD | 	call	#_pop
16184     FF 1E 02 F6 | 	mov	local01, result3
16188     0C 4E 05 F1 | 	add	fp, #12
1618c     A7 FA 61 FC | 	wrlong	result1, fp
16190     04 4E 05 F1 | 	add	fp, #4
16194     A7 FC 61 FC | 	wrlong	result2, fp
16198     04 4E 05 F1 | 	add	fp, #4
1619c     A7 1E 62 FC | 	wrlong	local01, fp
161a0     08 4E 85 F1 | 	sub	fp, #8
161a4     A7 12 02 F6 | 	mov	arg01, fp
161a8     0C 4E 85 F1 | 	sub	fp, #12
161ac     D8 C8 BF FD | 	call	#_converttoint
161b0     18 4E 05 F1 | 	add	fp, #24
161b4     A7 FA 61 FC | 	wrlong	result1, fp
161b8     18 4E 85 F1 | 	sub	fp, #24
161bc     A7 12 02 F6 | 	mov	arg01, fp
161c0     C4 C8 BF FD | 	call	#_converttoint
161c4     1C 4E 05 F1 | 	add	fp, #28
161c8     A7 FA 61 FC | 	wrlong	result1, fp
161cc                 | ' t1=pop() 'value
161cc                 | ' t2=pop() 
161cc                 | ' a=converttoint(t2) : v=converttoint(t1)
161cc                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
161cc     04 4E 85 F1 | 	sub	fp, #4
161d0     A7 1E 02 FB | 	rdlong	local01, fp
161d4     18 4E 85 F1 | 	sub	fp, #24
161d8     00 04 00 FF 
161dc     00 1E 16 F2 | 	cmp	local01, ##524288 wc
161e0     1C 00 90 3D |  if_ae	jmp	#LR__1750
161e4     18 4E 05 F1 | 	add	fp, #24
161e8     A7 12 02 FB | 	rdlong	arg01, fp
161ec     04 4E 05 F1 | 	add	fp, #4
161f0     A7 14 02 FB | 	rdlong	arg02, fp
161f4     1C 4E 85 F1 | 	sub	fp, #28
161f8     09 15 62 FC | 	wrlong	arg02, arg01
161fc     18 00 90 FD | 	jmp	#LR__1751
16200                 | LR__1750
16200     18 4E 05 F1 | 	add	fp, #24
16204     A7 12 02 FB | 	rdlong	arg01, fp
16208     04 4E 05 F1 | 	add	fp, #4
1620c     A7 14 02 FB | 	rdlong	arg02, fp
16210     1C 4E 85 F1 | 	sub	fp, #28
16214     B0 2B B0 FD | 	call	#_pslpoke
16218                 | LR__1751
16218     A7 F0 03 F6 | 	mov	ptra, fp
1621c     B2 00 A0 FD | 	call	#popregs_
16220                 | _do_lpoke_ret
16220     2D 00 64 FD | 	ret
16224                 | 
16224                 | ' 
16224                 | ' sub do_peek
16224                 | _do_peek
16224     00 4A 05 F6 | 	mov	COUNT_, #0
16228     A8 00 A0 FD | 	call	#pushregs_
1622c     14 F0 07 F1 | 	add	ptra, #20
16230     5C 3F BF FD | 	call	#_pop
16234     A7 FA 61 FC | 	wrlong	result1, fp
16238     04 4E 05 F1 | 	add	fp, #4
1623c     A7 FC 61 FC | 	wrlong	result2, fp
16240     04 4E 05 F1 | 	add	fp, #4
16244     A7 FE 61 FC | 	wrlong	result3, fp
16248     08 4E 85 F1 | 	sub	fp, #8
1624c     A7 12 02 F6 | 	mov	arg01, fp
16250     34 C8 BF FD | 	call	#_converttoint
16254     0C 4E 05 F1 | 	add	fp, #12
16258     A7 FA 61 FC | 	wrlong	result1, fp
1625c                 | ' t1=pop()
1625c                 | ' a=converttoint(t1)
1625c                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1625c     0C 4E 85 F1 | 	sub	fp, #12
16260     00 04 00 FF 
16264     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16268     1C 00 90 3D |  if_ae	jmp	#LR__1760
1626c     0C 4E 05 F1 | 	add	fp, #12
16270     A7 12 02 FB | 	rdlong	arg01, fp
16274     09 FB C1 FA | 	rdbyte	result1, arg01
16278     04 4E 05 F1 | 	add	fp, #4
1627c     A7 FA 61 FC | 	wrlong	result1, fp
16280     10 4E 85 F1 | 	sub	fp, #16
16284     20 00 90 FD | 	jmp	#LR__1761
16288                 | LR__1760
16288     0C 4E 05 F1 | 	add	fp, #12
1628c     A7 12 02 FB | 	rdlong	arg01, fp
16290     0C 4E 85 F1 | 	sub	fp, #12
16294     08 2C B0 FD | 	call	#_pspeek
16298     FD FA E1 F8 | 	getbyte	result1, result1, #0
1629c     10 4E 05 F1 | 	add	fp, #16
162a0     A7 FA 61 FC | 	wrlong	result1, fp
162a4     10 4E 85 F1 | 	sub	fp, #16
162a8                 | LR__1761
162a8     08 4E 05 F1 | 	add	fp, #8
162ac     A7 3A 68 FC | 	wrlong	#29, fp
162b0     08 4E 05 F1 | 	add	fp, #8
162b4     A7 12 02 FB | 	rdlong	arg01, fp
162b8     10 4E 85 F1 | 	sub	fp, #16
162bc     A7 12 62 FC | 	wrlong	arg01, fp
162c0     A7 12 02 F6 | 	mov	arg01, fp
162c4     60 3F BF FD | 	call	#_push
162c8     A7 F0 03 F6 | 	mov	ptra, fp
162cc     B2 00 A0 FD | 	call	#popregs_
162d0                 | _do_peek_ret
162d0     2D 00 64 FD | 	ret
162d4                 | 
162d4                 | ' 
162d4                 | ' sub do_dpeek
162d4                 | _do_dpeek
162d4     00 4A 05 F6 | 	mov	COUNT_, #0
162d8     A8 00 A0 FD | 	call	#pushregs_
162dc     14 F0 07 F1 | 	add	ptra, #20
162e0     AC 3E BF FD | 	call	#_pop
162e4     A7 FA 61 FC | 	wrlong	result1, fp
162e8     04 4E 05 F1 | 	add	fp, #4
162ec     A7 FC 61 FC | 	wrlong	result2, fp
162f0     04 4E 05 F1 | 	add	fp, #4
162f4     A7 FE 61 FC | 	wrlong	result3, fp
162f8     08 4E 85 F1 | 	sub	fp, #8
162fc     A7 12 02 F6 | 	mov	arg01, fp
16300     84 C7 BF FD | 	call	#_converttoint
16304     0C 4E 05 F1 | 	add	fp, #12
16308     A7 FA 61 FC | 	wrlong	result1, fp
1630c                 | ' t1=pop()
1630c                 | ' a=converttoint(t1)
1630c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1630c     0C 4E 85 F1 | 	sub	fp, #12
16310     00 04 00 FF 
16314     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16318     1C 00 90 3D |  if_ae	jmp	#LR__1770
1631c     0C 4E 05 F1 | 	add	fp, #12
16320     A7 12 02 FB | 	rdlong	arg01, fp
16324     09 FB E1 FA | 	rdword	result1, arg01
16328     04 4E 05 F1 | 	add	fp, #4
1632c     A7 FA 61 FC | 	wrlong	result1, fp
16330     10 4E 85 F1 | 	sub	fp, #16
16334     1C 00 90 FD | 	jmp	#LR__1771
16338                 | LR__1770
16338     0C 4E 05 F1 | 	add	fp, #12
1633c     A7 12 02 FB | 	rdlong	arg01, fp
16340     0C 4E 85 F1 | 	sub	fp, #12
16344     08 2C B0 FD | 	call	#_psdpeek
16348     10 4E 05 F1 | 	add	fp, #16
1634c     A7 FA 61 FC | 	wrlong	result1, fp
16350     10 4E 85 F1 | 	sub	fp, #16
16354                 | LR__1771
16354     08 4E 05 F1 | 	add	fp, #8
16358     A7 3A 68 FC | 	wrlong	#29, fp
1635c     08 4E 05 F1 | 	add	fp, #8
16360     A7 12 02 FB | 	rdlong	arg01, fp
16364     10 4E 85 F1 | 	sub	fp, #16
16368     A7 12 62 FC | 	wrlong	arg01, fp
1636c     A7 12 02 F6 | 	mov	arg01, fp
16370     B4 3E BF FD | 	call	#_push
16374     A7 F0 03 F6 | 	mov	ptra, fp
16378     B2 00 A0 FD | 	call	#popregs_
1637c                 | _do_dpeek_ret
1637c     2D 00 64 FD | 	ret
16380                 | 
16380                 | ' 
16380                 | ' 
16380                 | ' sub do_lpeek
16380                 | _do_lpeek
16380     00 4A 05 F6 | 	mov	COUNT_, #0
16384     A8 00 A0 FD | 	call	#pushregs_
16388     14 F0 07 F1 | 	add	ptra, #20
1638c     00 3E BF FD | 	call	#_pop
16390     A7 FA 61 FC | 	wrlong	result1, fp
16394     04 4E 05 F1 | 	add	fp, #4
16398     A7 FC 61 FC | 	wrlong	result2, fp
1639c     04 4E 05 F1 | 	add	fp, #4
163a0     A7 FE 61 FC | 	wrlong	result3, fp
163a4     08 4E 85 F1 | 	sub	fp, #8
163a8     A7 12 02 F6 | 	mov	arg01, fp
163ac     D8 C6 BF FD | 	call	#_converttoint
163b0     0C 4E 05 F1 | 	add	fp, #12
163b4     A7 FA 61 FC | 	wrlong	result1, fp
163b8                 | ' t1=pop()
163b8                 | ' a=converttoint(t1)
163b8                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
163b8     0C 4E 85 F1 | 	sub	fp, #12
163bc     00 04 00 FF 
163c0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
163c4     1C 00 90 3D |  if_ae	jmp	#LR__1780
163c8     0C 4E 05 F1 | 	add	fp, #12
163cc     A7 12 02 FB | 	rdlong	arg01, fp
163d0     09 FB 01 FB | 	rdlong	result1, arg01
163d4     04 4E 05 F1 | 	add	fp, #4
163d8     A7 FA 61 FC | 	wrlong	result1, fp
163dc     10 4E 85 F1 | 	sub	fp, #16
163e0     1C 00 90 FD | 	jmp	#LR__1781
163e4                 | LR__1780
163e4     0C 4E 05 F1 | 	add	fp, #12
163e8     A7 12 02 FB | 	rdlong	arg01, fp
163ec     0C 4E 85 F1 | 	sub	fp, #12
163f0     04 2B B0 FD | 	call	#_pslpeek
163f4     10 4E 05 F1 | 	add	fp, #16
163f8     A7 FA 61 FC | 	wrlong	result1, fp
163fc     10 4E 85 F1 | 	sub	fp, #16
16400                 | LR__1781
16400     08 4E 05 F1 | 	add	fp, #8
16404     A7 3A 68 FC | 	wrlong	#29, fp
16408     08 4E 05 F1 | 	add	fp, #8
1640c     A7 12 02 FB | 	rdlong	arg01, fp
16410     10 4E 85 F1 | 	sub	fp, #16
16414     A7 12 62 FC | 	wrlong	arg01, fp
16418     A7 12 02 F6 | 	mov	arg01, fp
1641c     08 3E BF FD | 	call	#_push
16420     A7 F0 03 F6 | 	mov	ptra, fp
16424     B2 00 A0 FD | 	call	#popregs_
16428                 | _do_lpeek_ret
16428     2D 00 64 FD | 	ret
1642c                 | 
1642c                 | ' 
1642c                 | ' sub do_fre
1642c                 | _do_fre
1642c     01 4A 05 F6 | 	mov	COUNT_, #1
16430     A8 00 A0 FD | 	call	#pushregs_
16434     0C F0 07 F1 | 	add	ptra, #12
16438     7B 00 00 FF 
1643c     5C E4 05 F1 | 	add	objptr, ##63068
16440     F2 12 02 FB | 	rdlong	arg01, objptr
16444     18 00 00 FF 
16448     1C E4 85 F1 | 	sub	objptr, ##12316
1644c     F2 1E 02 FB | 	rdlong	local01, objptr
16450     0F 13 82 F1 | 	sub	arg01, local01
16454     18 00 00 FF 
16458     B8 E4 05 F1 | 	add	objptr, ##12472
1645c     F2 12 62 FC | 	wrlong	arg01, objptr
16460     08 4E 05 F1 | 	add	fp, #8
16464     A7 3A 68 FC | 	wrlong	#29, fp
16468     08 4E 85 F1 | 	sub	fp, #8
1646c     F2 1E 02 FB | 	rdlong	local01, objptr
16470     7B 00 00 FF 
16474     F8 E4 85 F1 | 	sub	objptr, ##63224
16478     A7 1E 62 FC | 	wrlong	local01, fp
1647c     A7 12 02 F6 | 	mov	arg01, fp
16480     A4 3D BF FD | 	call	#_push
16484     A7 F0 03 F6 | 	mov	ptra, fp
16488     B2 00 A0 FD | 	call	#popregs_
1648c                 | _do_fre_ret
1648c     2D 00 64 FD | 	ret
16490                 | 
16490                 | ' 
16490                 | ' sub do_adr
16490                 | _do_adr
16490                 | _do_adr_ret
16490     2D 00 64 FD | 	ret
16494                 | 
16494                 | ' 
16494                 | ' sub do_getnotevalue
16494                 | _do_getnotevalue
16494     01 4A 05 F6 | 	mov	COUNT_, #1
16498     A8 00 A0 FD | 	call	#pushregs_
1649c     1C F0 07 F1 | 	add	ptra, #28
164a0     EC 3C BF FD | 	call	#_pop
164a4     FF 14 02 F6 | 	mov	arg02, result3
164a8     10 4E 05 F1 | 	add	fp, #16
164ac     A7 FA 61 FC | 	wrlong	result1, fp
164b0     04 4E 05 F1 | 	add	fp, #4
164b4     A7 FC 61 FC | 	wrlong	result2, fp
164b8     04 4E 05 F1 | 	add	fp, #4
164bc     A7 14 62 FC | 	wrlong	arg02, fp
164c0     08 4E 85 F1 | 	sub	fp, #8
164c4     A7 12 02 F6 | 	mov	arg01, fp
164c8     10 4E 85 F1 | 	sub	fp, #16
164cc     B8 C5 BF FD | 	call	#_converttoint
164d0     FD 14 52 F6 | 	abs	arg02, result1 wc
164d4     0C 14 16 FD | 	qdiv	arg02, #12
164d8     0C 4E 05 F1 | 	add	fp, #12
164dc     A7 FA 61 FC | 	wrlong	result1, fp
164e0     34 00 00 FF 
164e4     CC E4 05 F1 | 	add	objptr, ##26828
164e8     08 4E 85 F1 | 	sub	fp, #8
164ec     19 14 62 FD | 	getqy	arg02
164f0     0A 15 82 F6 | 	negc	arg02, arg02
164f4     02 14 66 F0 | 	shl	arg02, #2
164f8     F2 14 02 F1 | 	add	arg02, objptr
164fc     0A 15 02 FB | 	rdlong	arg02, arg02
16500     A7 14 62 FC | 	wrlong	arg02, fp
16504     08 4E 05 F1 | 	add	fp, #8
16508     A7 14 02 FB | 	rdlong	arg02, fp
1650c     0A 15 52 F6 | 	abs	arg02, arg02 wc
16510     0C 14 16 FD | 	qdiv	arg02, #12
16514     0C 4E 85 F1 | 	sub	fp, #12
16518     34 00 00 FF 
1651c     CC E4 85 F1 | 	sub	objptr, ##26828
16520     18 14 62 FD | 	getqx	arg02
16524     0A 13 82 F6 | 	negc	arg01, arg02
16528     09 13 52 F6 | 	abs	arg01, arg01 wc
1652c     1F 1E C6 C9 |  if_b	decod	local01, #31
16530     00 1E 06 36 |  if_ae	mov	local01, #0
16534     8C 86 B0 FD | 	call	#__system___float_fromuns
16538     0F FB 61 F5 | 	xor	result1, local01
1653c     08 4E 05 F1 | 	add	fp, #8
16540     A7 FA 61 FC | 	wrlong	result1, fp
16544     FD 14 02 F6 | 	mov	arg02, result1
16548     08 4E 85 F1 | 	sub	fp, #8
1654c     1E 12 C6 F9 | 	decod	arg01, #30
16550     58 99 B0 FD | 	call	#__system____builtin_powf
16554     FD 12 02 F6 | 	mov	arg01, result1
16558     04 4E 05 F1 | 	add	fp, #4
1655c     A7 14 02 FB | 	rdlong	arg02, fp
16560     04 4E 85 F1 | 	sub	fp, #4
16564     60 8A B0 FD | 	call	#__system___float_mul
16568     A7 FA 61 FC | 	wrlong	result1, fp
1656c     10 4E 05 F1 | 	add	fp, #16
16570     A7 FA 61 FC | 	wrlong	result1, fp
16574     08 4E 05 F1 | 	add	fp, #8
16578     A7 3C 68 FC | 	wrlong	#30, fp
1657c     08 4E 85 F1 | 	sub	fp, #8
16580     A7 12 02 F6 | 	mov	arg01, fp
16584     10 4E 85 F1 | 	sub	fp, #16
16588     9C 3C BF FD | 	call	#_push
1658c     A7 F0 03 F6 | 	mov	ptra, fp
16590     B2 00 A0 FD | 	call	#popregs_
16594                 | _do_getnotevalue_ret
16594     2D 00 64 FD | 	ret
16598                 | 
16598                 | ' 
16598                 | ' 
16598                 | ' sub do_waitms
16598                 | _do_waitms
16598     01 4A 05 F6 | 	mov	COUNT_, #1
1659c     A8 00 A0 FD | 	call	#pushregs_
165a0     18 F0 07 F1 | 	add	ptra, #24
165a4     E8 3B BF FD | 	call	#_pop
165a8     A7 FA 61 FC | 	wrlong	result1, fp
165ac     04 4E 05 F1 | 	add	fp, #4
165b0     A7 FC 61 FC | 	wrlong	result2, fp
165b4     04 4E 05 F1 | 	add	fp, #4
165b8     A7 FE 61 FC | 	wrlong	result3, fp
165bc                 | ' 
165bc                 | ' t1=pop() 'value
165bc                 | ' 
165bc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
165bc     08 4E 85 F1 | 	sub	fp, #8
165c0     1C FE 0D F2 | 	cmp	result3, #28 wz
165c4     08 4E 05 51 |  if_ne	add	fp, #8
165c8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
165cc     08 4E 85 51 |  if_ne	sub	fp, #8
165d0     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
165d4     A7 12 02 AB |  if_e	rdlong	arg01, fp
165d8     0C 4E 05 A1 |  if_e	add	fp, #12
165dc     A7 12 62 AC |  if_e	wrlong	arg01, fp
165e0     0C 4E 85 A1 |  if_e	sub	fp, #12
165e4     14 00 90 AD |  if_e	jmp	#LR__1790
165e8     A7 12 02 F6 | 	mov	arg01, fp
165ec     98 C4 BF FD | 	call	#_converttoint
165f0     0C 4E 05 F1 | 	add	fp, #12
165f4     A7 FA 61 FC | 	wrlong	result1, fp
165f8     0C 4E 85 F1 | 	sub	fp, #12
165fc                 | LR__1790
165fc                 | ' if t<0 then return
165fc     0C 4E 05 F1 | 	add	fp, #12
16600     A7 12 02 FB | 	rdlong	arg01, fp
16604     0C 4E 85 F1 | 	sub	fp, #12
16608     00 12 56 F2 | 	cmps	arg01, #0 wc
1660c     B8 00 90 CD |  if_b	jmp	#LR__1795
16610                 | ' if t < 5000 then 
16610     0C 4E 05 F1 | 	add	fp, #12
16614     A7 12 02 FB | 	rdlong	arg01, fp
16618     0C 4E 85 F1 | 	sub	fp, #12
1661c     09 00 00 FF 
16620     88 13 56 F2 | 	cmps	arg01, ##5000 wc
16624     14 00 90 3D |  if_ae	jmp	#LR__1791
16628     0C 4E 05 F1 | 	add	fp, #12
1662c     A7 12 02 FB | 	rdlong	arg01, fp
16630     0C 4E 85 F1 | 	sub	fp, #12
16634     08 61 B0 FD | 	call	#__system___waitms
16638     8C 00 90 FD | 	jmp	#LR__1794
1663c                 | LR__1791
1663c     10 4E 05 F1 | 	add	fp, #16
16640     A7 02 68 FC | 	wrlong	#1, fp
16644     04 4E 85 F1 | 	sub	fp, #4
16648     A7 12 02 FB | 	rdlong	arg01, fp
1664c     09 13 52 F6 | 	abs	arg01, arg01 wc
16650     09 00 00 FF 
16654     88 13 16 FD | 	qdiv	arg01, ##5000
16658                 | '   for i=1 to t/5000
16658     0C 4E 85 F1 | 	sub	fp, #12
1665c     18 1E 62 FD | 	getqx	local01
16660     0F 1F 82 F6 | 	negc	local01, local01
16664     01 1E 06 F1 | 	add	local01, #1
16668                 | LR__1792
16668     10 4E 05 F1 | 	add	fp, #16
1666c     A7 12 02 FB | 	rdlong	arg01, fp
16670     10 4E 85 F1 | 	sub	fp, #16
16674     0F 13 52 F2 | 	cmps	arg01, local01 wc
16678     28 00 90 3D |  if_ae	jmp	#LR__1793
1667c     0C 4E 05 F1 | 	add	fp, #12
16680     A7 12 02 FB | 	rdlong	arg01, fp
16684     0C 4E 85 F1 | 	sub	fp, #12
16688     B4 60 B0 FD | 	call	#__system___waitms
1668c     10 4E 05 F1 | 	add	fp, #16
16690     A7 12 02 FB | 	rdlong	arg01, fp
16694     01 12 06 F1 | 	add	arg01, #1
16698     A7 12 62 FC | 	wrlong	arg01, fp
1669c     10 4E 85 F1 | 	sub	fp, #16
166a0     C4 FF 9F FD | 	jmp	#LR__1792
166a4                 | LR__1793
166a4     0C 4E 05 F1 | 	add	fp, #12
166a8     A7 1E 02 FB | 	rdlong	local01, fp
166ac     0F 1F 52 F6 | 	abs	local01, local01 wc
166b0     09 00 00 FF 
166b4     88 1F 16 FD | 	qdiv	local01, ##5000
166b8     0C 4E 85 F1 | 	sub	fp, #12
166bc     19 1E 62 FD | 	getqy	local01
166c0     0F 13 82 F6 | 	negc	arg01, local01
166c4     78 60 B0 FD | 	call	#__system___waitms
166c8                 | LR__1794
166c8                 | LR__1795
166c8     A7 F0 03 F6 | 	mov	ptra, fp
166cc     B2 00 A0 FD | 	call	#popregs_
166d0                 | _do_waitms_ret
166d0     2D 00 64 FD | 	ret
166d4                 | 
166d4                 | ' 
166d4                 | ' sub do_waitvbl
166d4                 | _do_waitvbl
166d4     01 12 06 F6 | 	mov	arg01, #1
166d8     08 49 B0 FD | 	call	#_hg010b_spin2_waitvbl
166dc                 | _do_waitvbl_ret
166dc     2D 00 64 FD | 	ret
166e0                 | 
166e0                 | ' 
166e0                 | ' sub do_waitclock
166e0                 | _do_waitclock
166e0     7B 00 00 FF 
166e4     58 E4 05 F1 | 	add	objptr, ##63064
166e8     F2 00 02 FB | 	rdlong	_var01, objptr
166ec                 | ' c=hkcnt
166ec                 | ' do: loop until hkcnt<>c
166ec                 | LR__1800
166ec     F2 02 02 FB | 	rdlong	_var02, objptr
166f0     00 03 0A F2 | 	cmp	_var02, _var01 wz
166f4     F4 FF 9F AD |  if_e	jmp	#LR__1800
166f8     7B 00 00 FF 
166fc     58 E4 85 F1 | 	sub	objptr, ##63064
16700                 | _do_waitclock_ret
16700     2D 00 64 FD | 	ret
16704                 | 
16704                 | ' 
16704                 | ' sub do_dir
16704                 | _do_dir
16704     05 4A 05 F6 | 	mov	COUNT_, #5
16708     A8 00 A0 FD | 	call	#pushregs_
1670c     60 01 00 FF 
16710     BB 12 06 F6 | 	mov	arg01, ##@LR__4951
16714     C0 63 B0 FD | 	call	#__system___chdir
16718                 | ' chdir("/sd/bas")       ' set working directory
16718                 | ' print "Working directory: "; currentdir$ 
16718     00 12 06 F6 | 	mov	arg01, #0
1671c     BC B6 B0 FD | 	call	#__system___getiolock_0474
16720     FD 12 02 F6 | 	mov	arg01, result1
16724     24 5D B0 FD | 	call	#__system___lockmem
16728     60 01 00 FF 
1672c     C3 14 06 F6 | 	mov	arg02, ##@LR__4952
16730     00 12 06 F6 | 	mov	arg01, #0
16734     00 16 06 F6 | 	mov	arg03, #0
16738     14 6A B0 FD | 	call	#__system___basic_print_string
1673c     72 00 00 FF 
16740     78 E4 05 F1 | 	add	objptr, ##58488
16744     F2 14 02 FB | 	rdlong	arg02, objptr
16748     72 00 00 FF 
1674c     78 E4 85 F1 | 	sub	objptr, ##58488
16750     00 12 06 F6 | 	mov	arg01, #0
16754     00 16 06 F6 | 	mov	arg03, #0
16758     F4 69 B0 FD | 	call	#__system___basic_print_string
1675c     00 12 06 F6 | 	mov	arg01, #0
16760     0A 14 06 F6 | 	mov	arg02, #10
16764     00 16 06 F6 | 	mov	arg03, #0
16768     8C 69 B0 FD | 	call	#__system___basic_print_char
1676c     00 12 06 F6 | 	mov	arg01, #0
16770     68 B6 B0 FD | 	call	#__system___getiolock_0474
16774     FD 00 68 FC | 	wrlong	#0, result1
16778     00 1E 06 F6 | 	mov	local01, #0
1677c     60 01 00 FF 
16780     D7 12 06 F6 | 	mov	arg01, ##@LR__4953
16784     10 14 06 F6 | 	mov	arg02, #16
16788     88 B7 B0 FD | 	call	#__system___basic_dir
1678c     FD 20 02 F6 | 	mov	local02, result1
16790                 | ' px=0:
16790                 | ' filename=dir$("*", fbDirectory)
16790                 | ' while filename <> "" and filename <> nil
16790                 | LR__1810
16790     00 22 06 F6 | 	mov	local03, #0
16794     60 01 00 FF 
16798     D9 14 06 F6 | 	mov	arg02, ##@LR__4954
1679c     10 13 02 F6 | 	mov	arg01, local02
167a0     D0 5C B0 FD | 	call	#__system___string_cmp
167a4     00 FA 0D F2 | 	cmp	result1, #0 wz
167a8     00 22 26 56 |  if_ne	not	local03, #0
167ac     00 24 06 F6 | 	mov	local04, #0
167b0     10 13 02 F6 | 	mov	arg01, local02
167b4     00 14 06 F6 | 	mov	arg02, #0
167b8     B8 5C B0 FD | 	call	#__system___string_cmp
167bc     00 FA 0D F2 | 	cmp	result1, #0 wz
167c0     00 24 26 56 |  if_ne	not	local04, #0
167c4     12 23 CA F7 | 	test	local03, local04 wz
167c8     9C 00 90 AD |  if_e	jmp	#LR__1812
167cc                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
167cc     00 12 06 F6 | 	mov	arg01, #0
167d0     08 B6 B0 FD | 	call	#__system___getiolock_0474
167d4     FD 12 02 F6 | 	mov	arg01, result1
167d8     70 5C B0 FD | 	call	#__system___lockmem
167dc     60 01 00 FF 
167e0     DA 14 06 F6 | 	mov	arg02, ##@LR__4955
167e4     00 12 06 F6 | 	mov	arg01, #0
167e8     00 16 06 F6 | 	mov	arg03, #0
167ec     60 69 B0 FD | 	call	#__system___basic_print_string
167f0     00 26 06 F6 | 	mov	local05, #0
167f4     00 12 06 F6 | 	mov	arg01, #0
167f8     10 15 02 F6 | 	mov	arg02, local02
167fc     00 16 06 F6 | 	mov	arg03, #0
16800     4C 69 B0 FD | 	call	#__system___basic_print_string
16804     00 12 06 F6 | 	mov	arg01, #0
16808     D0 B5 B0 FD | 	call	#__system___getiolock_0474
1680c     FD 00 68 FC | 	wrlong	#0, result1
16810     40 1E 06 F1 | 	add	local01, #64
16814     0F 13 02 F6 | 	mov	arg01, local01
16818     9C 47 B0 FD | 	call	#_hg010b_spin2_setcursorx
1681c     00 1F 56 F2 | 	cmps	local01, #256 wc
16820     30 00 90 CD |  if_b	jmp	#LR__1811
16824     00 1E 06 F6 | 	mov	local01, #0
16828     00 12 06 F6 | 	mov	arg01, #0
1682c     AC B5 B0 FD | 	call	#__system___getiolock_0474
16830     FD 12 02 F6 | 	mov	arg01, result1
16834     14 5C B0 FD | 	call	#__system___lockmem
16838     00 12 06 F6 | 	mov	arg01, #0
1683c     0A 14 06 F6 | 	mov	arg02, #10
16840     00 16 06 F6 | 	mov	arg03, #0
16844     B0 68 B0 FD | 	call	#__system___basic_print_char
16848     00 12 06 F6 | 	mov	arg01, #0
1684c     8C B5 B0 FD | 	call	#__system___getiolock_0474
16850     FD 00 68 FC | 	wrlong	#0, result1
16854                 | LR__1811
16854     00 12 06 F6 | 	mov	arg01, #0
16858     00 14 06 F6 | 	mov	arg02, #0
1685c     B4 B6 B0 FD | 	call	#__system___basic_dir
16860     FD 20 02 F6 | 	mov	local02, result1
16864     28 FF 9F FD | 	jmp	#LR__1810
16868                 | LR__1812
16868                 | ' print
16868     00 12 06 F6 | 	mov	arg01, #0
1686c     6C B5 B0 FD | 	call	#__system___getiolock_0474
16870     FD 12 02 F6 | 	mov	arg01, result1
16874     D4 5B B0 FD | 	call	#__system___lockmem
16878     00 12 06 F6 | 	mov	arg01, #0
1687c     0A 14 06 F6 | 	mov	arg02, #10
16880     00 16 06 F6 | 	mov	arg03, #0
16884     70 68 B0 FD | 	call	#__system___basic_print_char
16888     00 12 06 F6 | 	mov	arg01, #0
1688c     4C B5 B0 FD | 	call	#__system___getiolock_0474
16890     FD 00 68 FC | 	wrlong	#0, result1
16894     00 1E 06 F6 | 	mov	local01, #0
16898                 | ' return cursor_y
16898     60 01 00 FF 
1689c     E1 12 06 F6 | 	mov	arg01, ##@LR__4956
168a0     21 14 06 F6 | 	mov	arg02, #33
168a4     6C B6 B0 FD | 	call	#__system___basic_dir
168a8     FD 20 02 F6 | 	mov	local02, result1
168ac                 | ' px=0: py=v.getcursory()
168ac                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
168ac                 | ' do while filename <> "" and filename <> nil
168ac                 | LR__1813
168ac     00 22 06 F6 | 	mov	local03, #0
168b0     60 01 00 FF 
168b4     E3 14 06 F6 | 	mov	arg02, ##@LR__4957
168b8     10 13 02 F6 | 	mov	arg01, local02
168bc     B4 5B B0 FD | 	call	#__system___string_cmp
168c0     00 FA 0D F2 | 	cmp	result1, #0 wz
168c4     00 22 26 56 |  if_ne	not	local03, #0
168c8     00 24 06 F6 | 	mov	local04, #0
168cc     10 13 02 F6 | 	mov	arg01, local02
168d0     00 14 06 F6 | 	mov	arg02, #0
168d4     9C 5B B0 FD | 	call	#__system___string_cmp
168d8     00 FA 0D F2 | 	cmp	result1, #0 wz
168dc     00 24 26 56 |  if_ne	not	local04, #0
168e0     12 23 CA F7 | 	test	local03, local04 wz
168e4     80 01 90 AD |  if_e	jmp	#LR__1818
168e8                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
168e8     00 12 06 F6 | 	mov	arg01, #0
168ec     EC B4 B0 FD | 	call	#__system___getiolock_0474
168f0     FD 12 02 F6 | 	mov	arg01, result1
168f4     54 5B B0 FD | 	call	#__system___lockmem
168f8     00 12 06 F6 | 	mov	arg01, #0
168fc     10 15 02 F6 | 	mov	arg02, local02
16900     00 16 06 F6 | 	mov	arg03, #0
16904     48 68 B0 FD | 	call	#__system___basic_print_string
16908     00 12 06 F6 | 	mov	arg01, #0
1690c     CC B4 B0 FD | 	call	#__system___getiolock_0474
16910     FD 00 68 FC | 	wrlong	#0, result1
16914     40 1E 06 F1 | 	add	local01, #64
16918     0F 13 02 F6 | 	mov	arg01, local01
1691c     98 46 B0 FD | 	call	#_hg010b_spin2_setcursorx
16920     00 1F 56 F2 | 	cmps	local01, #256 wc
16924     30 00 90 CD |  if_b	jmp	#LR__1814
16928     00 1E 06 F6 | 	mov	local01, #0
1692c     00 12 06 F6 | 	mov	arg01, #0
16930     A8 B4 B0 FD | 	call	#__system___getiolock_0474
16934     FD 12 02 F6 | 	mov	arg01, result1
16938     10 5B B0 FD | 	call	#__system___lockmem
1693c     00 12 06 F6 | 	mov	arg01, #0
16940     0A 14 06 F6 | 	mov	arg02, #10
16944     00 16 06 F6 | 	mov	arg03, #0
16948     AC 67 B0 FD | 	call	#__system___basic_print_char
1694c     00 12 06 F6 | 	mov	arg01, #0
16950     88 B4 B0 FD | 	call	#__system___getiolock_0474
16954     FD 00 68 FC | 	wrlong	#0, result1
16958                 | LR__1814
16958     00 12 06 F6 | 	mov	arg01, #0
1695c     00 14 06 F6 | 	mov	arg02, #0
16960     B0 B5 B0 FD | 	call	#__system___basic_dir
16964     FD 20 02 F6 | 	mov	local02, result1
16968                 | '   filename = dir$()      ' continue scan
16968                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
16968                 | ' return cursor_y
16968     3A E4 05 F1 | 	add	objptr, #58
1696c     F2 FA C1 FA | 	rdbyte	result1, objptr
16970     3A E4 85 F1 | 	sub	objptr, #58
16974     22 FA 0D F2 | 	cmp	result1, #34 wz
16978     30 FF 9F 5D |  if_ne	jmp	#LR__1813
1697c                 | '     print "-----more, press any key";
1697c     00 12 06 F6 | 	mov	arg01, #0
16980     58 B4 B0 FD | 	call	#__system___getiolock_0474
16984     FD 12 02 F6 | 	mov	arg01, result1
16988     C0 5A B0 FD | 	call	#__system___lockmem
1698c     60 01 00 FF 
16990     E4 14 06 F6 | 	mov	arg02, ##@LR__4958
16994     00 12 06 F6 | 	mov	arg01, #0
16998     00 16 06 F6 | 	mov	arg03, #0
1699c     B0 67 B0 FD | 	call	#__system___basic_print_string
169a0     00 12 06 F6 | 	mov	arg01, #0
169a4     34 B4 B0 FD | 	call	#__system___getiolock_0474
169a8     FD 00 68 FC | 	wrlong	#0, result1
169ac                 | '     do 
169ac                 | LR__1815
169ac     C4 52 B0 FD | 	call	#_usbnew_spin2_get_key
169b0     00 FA 0D F2 | 	cmp	result1, #0 wz
169b4     F4 FF 9F 5D |  if_ne	jmp	#LR__1815
169b8                 | '     do
169b8                 | LR__1816
169b8     B8 52 B0 FD | 	call	#_usbnew_spin2_get_key
169bc     00 FA 0D F2 | 	cmp	result1, #0 wz
169c0     F4 FF 9F AD |  if_e	jmp	#LR__1816
169c4                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
169c4     79 00 00 FF 
169c8     C4 E5 05 F1 | 	add	objptr, ##62404
169cc     F2 22 02 FB | 	rdlong	local03, objptr
169d0     79 00 00 FF 
169d4     C4 E5 85 F1 | 	sub	objptr, ##62404
169d8     01 22 0E F2 | 	cmp	local03, #1 wz
169dc     3C 00 90 5D |  if_ne	jmp	#LR__1817
169e0     7B 00 00 FF 
169e4     68 E4 05 F1 | 	add	objptr, ##63080
169e8     F2 14 02 FB | 	rdlong	arg02, objptr
169ec     04 E4 85 F1 | 	sub	objptr, #4
169f0     F2 1A 02 FB | 	rdlong	arg05, objptr
169f4     07 12 06 F6 | 	mov	arg01, #7
169f8     56 00 00 FF 
169fc     44 16 06 F6 | 	mov	arg03, ##44100
16a00     0C 18 C6 F9 | 	decod	arg04, #12
16a04     01 1C 66 F6 | 	neg	arg06, #1
16a08     6F 00 00 FF 
16a0c     A4 E5 85 F1 | 	sub	objptr, ##57252
16a10     E8 55 B0 FD | 	call	#_audio096_spin2_play
16a14     0B 00 00 FF 
16a18     C0 E4 85 F1 | 	sub	objptr, ##5824
16a1c                 | LR__1817
16a1c     00 12 06 F6 | 	mov	arg01, #0
16a20     23 14 06 F6 | 	mov	arg02, #35
16a24     58 45 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16a28                 | '     position 0,35: print "                             ";: position 4,35  
16a28     00 12 06 F6 | 	mov	arg01, #0
16a2c     AC B3 B0 FD | 	call	#__system___getiolock_0474
16a30     FD 12 02 F6 | 	mov	arg01, result1
16a34     14 5A B0 FD | 	call	#__system___lockmem
16a38     60 01 00 FF 
16a3c     FD 14 06 F6 | 	mov	arg02, ##@LR__4959
16a40     00 12 06 F6 | 	mov	arg01, #0
16a44     00 16 06 F6 | 	mov	arg03, #0
16a48     04 67 B0 FD | 	call	#__system___basic_print_string
16a4c     00 12 06 F6 | 	mov	arg01, #0
16a50     88 B3 B0 FD | 	call	#__system___getiolock_0474
16a54     FD 00 68 FC | 	wrlong	#0, result1
16a58     04 12 06 F6 | 	mov	arg01, #4
16a5c     23 14 06 F6 | 	mov	arg02, #35
16a60     1C 45 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16a64     44 FE 9F FD | 	jmp	#LR__1813
16a68                 | LR__1818
16a68     A7 F0 03 F6 | 	mov	ptra, fp
16a6c     B2 00 A0 FD | 	call	#popregs_
16a70                 | _do_dir_ret
16a70     2D 00 64 FD | 	ret
16a74                 | 
16a74                 | ' 
16a74                 | ' sub do_if
16a74                 | _do_if
16a74     05 4A 05 F6 | 	mov	COUNT_, #5
16a78     A8 00 A0 FD | 	call	#pushregs_
16a7c     10 37 BF FD | 	call	#_pop
16a80     FD 1E 0A F6 | 	mov	local01, result1 wz
16a84     FE 20 02 F6 | 	mov	local02, result2
16a88     FF 22 02 F6 | 	mov	local03, result3
16a8c                 | ' t1=pop()
16a8c                 | ' ' if uresult=0, jump over else
16a8c                 | ' if t1.result.uresult = 0 then 
16a8c     BC 00 90 5D |  if_ne	jmp	#LR__1822
16a90                 | '   for i=lineptr_e to lineptr-1
16a90     6A 00 00 FF 
16a94     64 E4 05 F1 | 	add	objptr, ##54372
16a98     F2 24 02 FB | 	rdlong	local04, objptr
16a9c     04 E4 85 F1 | 	sub	objptr, #4
16aa0     F2 26 02 FB | 	rdlong	local05, objptr
16aa4     6A 00 00 FF 
16aa8     60 E4 85 F1 | 	sub	objptr, ##54368
16aac                 | LR__1820
16aac     13 25 52 F2 | 	cmps	local04, local05 wc
16ab0     78 00 90 3D |  if_ae	jmp	#LR__1821
16ab4     12 FF 01 F6 | 	mov	result3, local04
16ab8     01 FE 65 F0 | 	shl	result3, #1
16abc     12 FF 01 F1 | 	add	result3, local04
16ac0     02 FE 65 F0 | 	shl	result3, #2
16ac4     67 00 00 FF 
16ac8     60 E4 05 F1 | 	add	objptr, ##52832
16acc     F2 FE 01 F1 | 	add	result3, objptr
16ad0     FF 1E 02 FB | 	rdlong	local01, result3
16ad4     04 FE 05 F1 | 	add	result3, #4
16ad8     FF FC 01 FB | 	rdlong	result2, result3
16adc     12 FF 01 F6 | 	mov	result3, local04
16ae0     01 FE 65 F0 | 	shl	result3, #1
16ae4     12 FF 01 F1 | 	add	result3, local04
16ae8     02 FE 65 F0 | 	shl	result3, #2
16aec     F2 FE 01 F1 | 	add	result3, objptr
16af0     08 FE 05 F1 | 	add	result3, #8
16af4     FF FE 01 FB | 	rdlong	result3, result3
16af8     FE 20 02 F6 | 	mov	local02, result2
16afc     FF 22 02 F6 | 	mov	local03, result3
16b00                 | '     t1=compiledline(i)
16b00                 | '     if t1.result_type=token_else then lineptr_e=i : return
16b00     5A 22 0E F2 | 	cmp	local03, #90 wz
16b04     67 00 00 FF 
16b08     60 E4 85 F1 | 	sub	objptr, ##52832
16b0c     6A 00 00 AF 
16b10     64 E4 05 A1 |  if_e	add	objptr, ##54372
16b14     F2 24 62 AC |  if_e	wrlong	local04, objptr
16b18     6A 00 00 AF 
16b1c     64 E4 85 A1 |  if_e	sub	objptr, ##54372
16b20     28 00 90 AD |  if_e	jmp	#LR__1823
16b24     01 24 06 F1 | 	add	local04, #1
16b28     80 FF 9F FD | 	jmp	#LR__1820
16b2c                 | LR__1821
16b2c     6A 00 00 FF 
16b30     60 E4 05 F1 | 	add	objptr, ##54368
16b34     F2 26 02 FB | 	rdlong	local05, objptr
16b38     01 26 86 F1 | 	sub	local05, #1
16b3c     04 E4 05 F1 | 	add	objptr, #4
16b40     F2 26 62 FC | 	wrlong	local05, objptr
16b44     6A 00 00 FF 
16b48     64 E4 85 F1 | 	sub	objptr, ##54372
16b4c                 | LR__1822
16b4c                 | LR__1823
16b4c     A7 F0 03 F6 | 	mov	ptra, fp
16b50     B2 00 A0 FD | 	call	#popregs_
16b54                 | _do_if_ret
16b54     2D 00 64 FD | 	ret
16b58                 | 
16b58                 | ' 
16b58                 | ' sub do_else
16b58                 | _do_else
16b58     6A 00 00 FF 
16b5c     60 E4 05 F1 | 	add	objptr, ##54368
16b60     F2 00 02 FB | 	rdlong	_var01, objptr
16b64     01 00 86 F1 | 	sub	_var01, #1
16b68     04 E4 05 F1 | 	add	objptr, #4
16b6c     F2 00 62 FC | 	wrlong	_var01, objptr
16b70     6A 00 00 FF 
16b74     64 E4 85 F1 | 	sub	objptr, ##54372
16b78                 | _do_else_ret
16b78     2D 00 64 FD | 	ret
16b7c                 | 
16b7c                 | ' 
16b7c                 | ' sub do_rad
16b7c                 | _do_rad
16b7c     7B 00 00 FF 
16b80     6C E4 05 F1 | 	add	objptr, ##63084
16b84     00 C0 9F FF 
16b88     F2 00 68 FC | 	wrlong	##1065353216, objptr
16b8c     04 E4 05 F1 | 	add	objptr, #4
16b90     00 C0 9F FF 
16b94     F2 00 68 FC | 	wrlong	##1065353216, objptr
16b98     7B 00 00 FF 
16b9c     70 E4 85 F1 | 	sub	objptr, ##63088
16ba0                 | _do_rad_ret
16ba0     2D 00 64 FD | 	ret
16ba4                 | 
16ba4                 | ' 
16ba4                 | ' sub do_deg
16ba4                 | _do_deg
16ba4     7B 00 00 FF 
16ba8     6C E4 05 F1 | 	add	objptr, ##63084
16bac     7D 47 9E FF 
16bb0     F2 6A 68 FC | 	wrlong	##1016003125, objptr
16bb4     04 E4 05 F1 | 	add	objptr, #4
16bb8     97 32 A1 FF 
16bbc     F2 C2 69 FC | 	wrlong	##1113927393, objptr
16bc0     7B 00 00 FF 
16bc4     70 E4 85 F1 | 	sub	objptr, ##63088
16bc8                 | _do_deg_ret
16bc8     2D 00 64 FD | 	ret
16bcc                 | 
16bcc                 | ' 
16bcc                 | ' sub do_int
16bcc                 | _do_int
16bcc     00 4A 05 F6 | 	mov	COUNT_, #0
16bd0     A8 00 A0 FD | 	call	#pushregs_
16bd4     0C F0 07 F1 | 	add	ptra, #12
16bd8     B4 35 BF FD | 	call	#_pop
16bdc     A7 FA 61 FC | 	wrlong	result1, fp
16be0     04 4E 05 F1 | 	add	fp, #4
16be4     A7 FC 61 FC | 	wrlong	result2, fp
16be8     04 4E 05 F1 | 	add	fp, #4
16bec     A7 FE 61 FC | 	wrlong	result3, fp
16bf0     08 4E 85 F1 | 	sub	fp, #8
16bf4     A7 12 02 F6 | 	mov	arg01, fp
16bf8     8C BE BF FD | 	call	#_converttoint
16bfc     A7 FA 61 FC | 	wrlong	result1, fp
16c00     08 4E 05 F1 | 	add	fp, #8
16c04     A7 38 68 FC | 	wrlong	#28, fp
16c08     08 4E 85 F1 | 	sub	fp, #8
16c0c     A7 12 02 F6 | 	mov	arg01, fp
16c10     14 36 BF FD | 	call	#_push
16c14     A7 F0 03 F6 | 	mov	ptra, fp
16c18     B2 00 A0 FD | 	call	#popregs_
16c1c                 | _do_int_ret
16c1c     2D 00 64 FD | 	ret
16c20                 | 
16c20                 | ' 
16c20                 | ' sub do_nothing
16c20                 | _do_nothing
16c20                 | _do_nothing_ret
16c20     2D 00 64 FD | 	ret
16c24                 | 
16c24                 | ' 
16c24                 | ' sub do_brun
16c24                 | _do_brun
16c24     08 4A 05 F6 | 	mov	COUNT_, #8
16c28     A8 00 A0 FD | 	call	#pushregs_
16c2c     60 35 BF FD | 	call	#_pop
16c30     FE 1A 02 F6 | 	mov	arg05, result2
16c34     FF 18 02 F6 | 	mov	arg04, result3
16c38     FD 1E 02 F6 | 	mov	local01, result1
16c3c     0D 21 02 F6 | 	mov	local02, arg05
16c40     0C 23 02 F6 | 	mov	local03, arg04
16c44                 | ' 
16c44                 | ' t1=pop() 
16c44                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
16c44     2B 22 0E F2 | 	cmp	local03, #43 wz
16c48     10 00 90 5D |  if_ne	jmp	#LR__1830
16c4c     0F 13 02 F6 | 	mov	arg01, local01
16c50     84 74 BF FD | 	call	#_convertstring
16c54     FD 1E 02 F6 | 	mov	local01, result1
16c58     1F 22 06 F6 | 	mov	local03, #31
16c5c                 | LR__1830
16c5c                 | ' if t1.result_type=result_string then
16c5c     1F 22 0E F2 | 	cmp	local03, #31 wz
16c60     EC 01 90 5D |  if_ne	jmp	#LR__1834
16c64     0F 25 02 F6 | 	mov	local04, local01
16c68                 | '   filename=t1.result.sresult
16c68                 | '   if left$(filename,1)="/" then 
16c68     12 13 02 F6 | 	mov	arg01, local04
16c6c     01 14 06 F6 | 	mov	arg02, #1
16c70     1C 78 B0 FD | 	call	#__system__Left_S
16c74     FD 12 02 F6 | 	mov	arg01, result1
16c78     60 01 00 FF 
16c7c     1B 15 06 F6 | 	mov	arg02, ##@LR__4960
16c80     F0 57 B0 FD | 	call	#__system___string_cmp
16c84     00 FA 0D F2 | 	cmp	result1, #0 wz
16c88     12 27 02 A6 |  if_e	mov	local05, local04
16c8c     14 00 90 AD |  if_e	jmp	#LR__1831
16c90     60 01 00 FF 
16c94     1D 13 06 F6 | 	mov	arg01, ##@LR__4961
16c98     12 15 02 F6 | 	mov	arg02, local04
16c9c     08 58 B0 FD | 	call	#__system___string_concat
16ca0     FD 26 02 F6 | 	mov	local05, result1
16ca4                 | LR__1831
16ca4                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
16ca4                 | '   open fullfilename for input as #9
16ca4     09 12 06 F6 | 	mov	arg01, #9
16ca8     13 15 02 F6 | 	mov	arg02, local05
16cac     00 16 06 F6 | 	mov	arg03, #0
16cb0     98 63 B0 FD | 	call	#__system___basic_open_string
16cb4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
16cb8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
16cbc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
16cc0     FD 28 0A F6 | 	mov	local06, result1 wz
16cc4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
16cc4     8C 00 90 AD |  if_e	jmp	#LR__1832
16cc8     00 12 06 F6 | 	mov	arg01, #0
16ccc     0C B1 B0 FD | 	call	#__system___getiolock_0474
16cd0     FD 12 02 F6 | 	mov	arg01, result1
16cd4     74 57 B0 FD | 	call	#__system___lockmem
16cd8     60 01 00 FF 
16cdc     26 15 06 F6 | 	mov	arg02, ##@LR__4962
16ce0     00 12 06 F6 | 	mov	arg01, #0
16ce4     00 16 06 F6 | 	mov	arg03, #0
16ce8     64 64 B0 FD | 	call	#__system___basic_print_string
16cec     00 12 06 F6 | 	mov	arg01, #0
16cf0     14 15 02 F6 | 	mov	arg02, local06
16cf4     00 16 06 F6 | 	mov	arg03, #0
16cf8     0A 18 06 F6 | 	mov	arg04, #10
16cfc     94 64 B0 FD | 	call	#__system___basic_print_integer
16d00     60 01 00 FF 
16d04     34 15 06 F6 | 	mov	arg02, ##@LR__4963
16d08     00 12 06 F6 | 	mov	arg01, #0
16d0c     00 16 06 F6 | 	mov	arg03, #0
16d10     3C 64 B0 FD | 	call	#__system___basic_print_string
16d14     14 13 02 F6 | 	mov	arg01, local06
16d18     C0 7D B0 FD | 	call	#__system___strerror
16d1c     FD 14 02 F6 | 	mov	arg02, result1
16d20     00 12 06 F6 | 	mov	arg01, #0
16d24     00 16 06 F6 | 	mov	arg03, #0
16d28     24 64 B0 FD | 	call	#__system___basic_print_string
16d2c     00 12 06 F6 | 	mov	arg01, #0
16d30     0A 14 06 F6 | 	mov	arg02, #10
16d34     00 16 06 F6 | 	mov	arg03, #0
16d38     BC 63 B0 FD | 	call	#__system___basic_print_char
16d3c     00 12 06 F6 | 	mov	arg01, #0
16d40     98 B0 B0 FD | 	call	#__system___getiolock_0474
16d44     FD 00 68 FC | 	wrlong	#0, result1
16d48     09 12 06 F6 | 	mov	arg01, #9
16d4c     C0 A6 B0 FD | 	call	#__system__close
16d50     FC 00 90 FD | 	jmp	#LR__1835
16d54                 | LR__1832
16d54     01 2A 06 F6 | 	mov	local07, #1
16d58     00 2C 06 F6 | 	mov	local08, #0
16d5c                 | '   do
16d5c                 | LR__1833
16d5c                 | '     get #9,pos,block(0),1024,r : pos+=r	
16d5c     77 00 00 FF 
16d60     90 E5 05 F1 | 	add	objptr, ##61328
16d64     F2 16 02 F6 | 	mov	arg03, objptr
16d68     77 00 00 FF 
16d6c     90 E5 85 F1 | 	sub	objptr, ##61328
16d70     09 12 06 F6 | 	mov	arg01, #9
16d74     15 15 02 F6 | 	mov	arg02, local07
16d78     0A 18 C6 F9 | 	decod	arg04, #10
16d7c     01 1A 06 F6 | 	mov	arg05, #1
16d80     DC 64 B0 FD | 	call	#__system___basic_get
16d84     FD 28 02 F6 | 	mov	local06, result1
16d88     FD 2A 02 F1 | 	add	local07, result1
16d8c     77 00 00 FF 
16d90     90 E5 05 F1 | 	add	objptr, ##61328
16d94     F2 12 02 F6 | 	mov	arg01, objptr
16d98     16 15 02 F6 | 	mov	arg02, local08
16d9c     0A 16 C6 F9 | 	decod	arg03, #10
16da0     6C 00 00 FF 
16da4     D0 E4 85 F1 | 	sub	objptr, ##55504
16da8     38 4B B0 FD | 	call	#_psram_spin2_write
16dac     0B 00 00 FF 
16db0     C0 E4 85 F1 | 	sub	objptr, ##5824
16db4     14 2D 02 F1 | 	add	local08, local06
16db8     02 00 00 FF 
16dbc     00 28 0E F2 | 	cmp	local06, ##1024 wz
16dc0     E0 03 00 AF 
16dc4     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
16dc8     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1833
16dcc     56 00 00 FF 
16dd0     E0 E5 05 F1 | 	add	objptr, ##44512
16dd4     F2 12 02 FB | 	rdlong	arg01, objptr
16dd8     03 12 62 FD | 	cogstop	arg01
16ddc     04 E4 05 F1 | 	add	objptr, #4
16de0     F2 12 02 FB | 	rdlong	arg01, objptr
16de4     03 12 62 FD | 	cogstop	arg01
16de8     04 E4 05 F1 | 	add	objptr, #4
16dec     F2 12 02 FB | 	rdlong	arg01, objptr
16df0     03 12 62 FD | 	cogstop	arg01
16df4     22 00 00 FF 
16df8     E0 E5 05 F1 | 	add	objptr, ##17888
16dfc     F2 12 02 FB | 	rdlong	arg01, objptr
16e00     03 12 62 FD | 	cogstop	arg01
16e04     18 00 00 FF 
16e08     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
16e0c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16e10     18 00 00 FF 
16e14     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
16e18     22 00 00 FF 
16e1c     D8 E5 85 F1 | 	sub	objptr, ##17880
16e20     1E 2C 06 F6 | 	mov	local08, #30
16e24     28 E4 61 FD | 	setq	objptr
16e28     0A 2D F2 FC | 	coginit	local08, arg02 wc
16e2c     01 2C 66 C6 |  if_b	neg	local08, #1
16e30     24 00 00 FF 
16e34     10 E5 05 F1 | 	add	objptr, ##18704
16e38     F2 2C 62 FC | 	wrlong	local08, objptr
16e3c     7B 00 00 FF 
16e40     00 E5 85 F1 | 	sub	objptr, ##63232
16e44     00 12 06 F6 | 	mov	arg01, #0
16e48     01 12 62 FD | 	cogid	arg01
16e4c     03 12 62 FD | 	cogstop	arg01
16e50                 | LR__1834
16e50                 | LR__1835
16e50     A7 F0 03 F6 | 	mov	ptra, fp
16e54     B2 00 A0 FD | 	call	#popregs_
16e58                 | _do_brun_ret
16e58     2D 00 64 FD | 	ret
16e5c                 | 
16e5c                 | ' 
16e5c                 | ' 
16e5c                 | ' sub do_mouse
16e5c                 | _do_mouse
16e5c     30 33 BF FD | 	call	#_pop
16e60     00 FA 4D F2 | 	cmps	result1, #0 wz
16e64                 | ' t1=pop()
16e64                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
16e64     14 00 90 5D |  if_ne	jmp	#LR__1840
16e68     10 12 06 F6 | 	mov	arg01, #16
16e6c     00 14 06 F6 | 	mov	arg02, #0
16e70     00 16 06 F6 | 	mov	arg03, #0
16e74     F8 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16e78     10 00 90 FD | 	jmp	#LR__1841
16e7c                 | LR__1840
16e7c     10 12 06 F6 | 	mov	arg01, #16
16e80     20 14 06 F6 | 	mov	arg02, #32
16e84     20 16 06 F6 | 	mov	arg03, #32
16e88     E4 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16e8c                 | LR__1841
16e8c                 | _do_mouse_ret
16e8c     2D 00 64 FD | 	ret
16e90                 | 
16e90                 | ' 
16e90                 | ' sub do_cursor
16e90                 | _do_cursor
16e90     FC 32 BF FD | 	call	#_pop
16e94     00 FA 4D F2 | 	cmps	result1, #0 wz
16e98                 | ' t1=pop()
16e98                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
16e98     14 00 90 5D |  if_ne	jmp	#LR__1850
16e9c     11 12 06 F6 | 	mov	arg01, #17
16ea0     00 14 06 F6 | 	mov	arg02, #0
16ea4     00 16 06 F6 | 	mov	arg03, #0
16ea8     C4 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16eac     10 00 90 FD | 	jmp	#LR__1851
16eb0                 | LR__1850
16eb0     11 12 06 F6 | 	mov	arg01, #17
16eb4     08 14 06 F6 | 	mov	arg02, #8
16eb8     10 16 06 F6 | 	mov	arg03, #16
16ebc     B0 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16ec0                 | LR__1851
16ec0                 | _do_cursor_ret
16ec0     2D 00 64 FD | 	ret
16ec4                 | 
16ec4                 | ' 
16ec4                 | ' 
16ec4                 | ' sub do_click
16ec4                 | _do_click
16ec4     C8 32 BF FD | 	call	#_pop
16ec8     00 FA 4D F2 | 	cmps	result1, #0 wz
16ecc                 | ' t1=pop()
16ecc                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
16ecc     79 00 00 AF 
16ed0     C4 E5 05 A1 |  if_e	add	objptr, ##62404
16ed4     F2 00 68 AC |  if_e	wrlong	#0, objptr
16ed8     79 00 00 FF 
16edc     C4 E5 C5 F3 | 	sumz	objptr, ##62404
16ee0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
16ee4     79 00 00 5F 
16ee8     C4 E5 85 51 |  if_ne	sub	objptr, ##62404
16eec                 | _do_click_ret
16eec     2D 00 64 FD | 	ret
16ef0                 | 
16ef0                 | ' 
16ef0                 | ' 
16ef0                 | ' sub do_beep
16ef0                 | _do_beep
16ef0     02 4A 05 F6 | 	mov	COUNT_, #2
16ef4     A8 00 A0 FD | 	call	#pushregs_
16ef8     20 F0 07 F1 | 	add	ptra, #32
16efc     90 32 BF FD | 	call	#_pop
16f00     FD 1E 02 F6 | 	mov	local01, result1
16f04     FE 1C 02 F6 | 	mov	arg06, result2
16f08     FF 20 02 F6 | 	mov	local02, result3
16f0c     0C 4E 05 F1 | 	add	fp, #12
16f10     A7 1E 62 FC | 	wrlong	local01, fp
16f14     04 4E 05 F1 | 	add	fp, #4
16f18     A7 1C 62 FC | 	wrlong	arg06, fp
16f1c     04 4E 05 F1 | 	add	fp, #4
16f20     A7 20 62 FC | 	wrlong	local02, fp
16f24     14 4E 85 F1 | 	sub	fp, #20
16f28     64 32 BF FD | 	call	#_pop
16f2c     A7 FA 61 FC | 	wrlong	result1, fp
16f30     04 4E 05 F1 | 	add	fp, #4
16f34     A7 FC 61 FC | 	wrlong	result2, fp
16f38     04 4E 05 F1 | 	add	fp, #4
16f3c     A7 FE 61 FC | 	wrlong	result3, fp
16f40                 | ' 
16f40                 | ' t2=pop()
16f40                 | ' t1=pop()
16f40                 | ' 
16f40                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
16f40     08 4E 85 F1 | 	sub	fp, #8
16f44     1C FE 0D F2 | 	cmp	result3, #28 wz
16f48     08 4E 05 51 |  if_ne	add	fp, #8
16f4c     A7 20 02 5B |  if_ne	rdlong	local02, fp
16f50     08 4E 85 51 |  if_ne	sub	fp, #8
16f54     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
16f58     A7 1E 02 AB |  if_e	rdlong	local01, fp
16f5c     18 4E 05 A1 |  if_e	add	fp, #24
16f60     A7 1E 62 AC |  if_e	wrlong	local01, fp
16f64     18 4E 85 A1 |  if_e	sub	fp, #24
16f68     14 00 90 AD |  if_e	jmp	#LR__1860
16f6c     A7 12 02 F6 | 	mov	arg01, fp
16f70     14 BB BF FD | 	call	#_converttoint
16f74     18 4E 05 F1 | 	add	fp, #24
16f78     A7 FA 61 FC | 	wrlong	result1, fp
16f7c     18 4E 85 F1 | 	sub	fp, #24
16f80                 | LR__1860
16f80     1C 4E 05 F1 | 	add	fp, #28
16f84     A7 FE 48 FC | 	wrbyte	#127, fp
16f88     01 4E 05 F1 | 	add	fp, #1
16f8c     A7 00 49 FC | 	wrbyte	#128, fp
16f90     01 4E 85 F1 | 	sub	fp, #1
16f94     A7 14 02 F6 | 	mov	arg02, fp
16f98     04 4E 85 F1 | 	sub	fp, #4
16f9c     A7 16 02 FB | 	rdlong	arg03, fp
16fa0     18 4E 85 F1 | 	sub	fp, #24
16fa4     01 16 66 F0 | 	shl	arg03, #1
16fa8     07 12 06 F6 | 	mov	arg01, #7
16fac     0E 18 C6 F9 | 	decod	arg04, #14
16fb0     02 1A 06 F6 | 	mov	arg05, #2
16fb4     00 1C 06 F6 | 	mov	arg06, #0
16fb8     0B 00 00 FF 
16fbc     C0 E4 05 F1 | 	add	objptr, ##5824
16fc0     D4 50 B0 FD | 	call	#_audio096_spin2_play8
16fc4     0B 00 00 FF 
16fc8     C0 E4 85 F1 | 	sub	objptr, ##5824
16fcc     0C 4E 05 F1 | 	add	fp, #12
16fd0     A7 12 02 F6 | 	mov	arg01, fp
16fd4     0C 4E 85 F1 | 	sub	fp, #12
16fd8     4C 32 BF FD | 	call	#_push
16fdc     B8 F5 BF FD | 	call	#_do_waitms
16fe0     07 12 06 F6 | 	mov	arg01, #7
16fe4     0B 00 00 FF 
16fe8     C0 E4 05 F1 | 	add	objptr, ##5824
16fec     5C 51 B0 FD | 	call	#_audio096_spin2_stop
16ff0     0B 00 00 FF 
16ff4     C0 E4 85 F1 | 	sub	objptr, ##5824
16ff8     A7 F0 03 F6 | 	mov	ptra, fp
16ffc     B2 00 A0 FD | 	call	#popregs_
17000                 | _do_beep_ret
17000     2D 00 64 FD | 	ret
17004                 | 
17004                 | ' 
17004                 | ' sub do_no_command
17004                 | _do_no_command
17004     17 12 06 F6 | 	mov	arg01, #23
17008     58 1C B0 FD | 	call	#_printerror
1700c                 | _do_no_command_ret
1700c     2D 00 64 FD | 	ret
17010                 | 
17010                 | ' 
17010                 | ' sub do_negative
17010                 | _do_negative
17010     02 4A 05 F6 | 	mov	COUNT_, #2
17014     A8 00 A0 FD | 	call	#pushregs_
17018     0C F0 07 F1 | 	add	ptra, #12
1701c     70 31 BF FD | 	call	#_pop
17020     FF 1E 02 F6 | 	mov	local01, result3
17024     A7 FA 61 FC | 	wrlong	result1, fp
17028     04 4E 05 F1 | 	add	fp, #4
1702c     A7 FC 61 FC | 	wrlong	result2, fp
17030     04 4E 05 F1 | 	add	fp, #4
17034     A7 1E 62 FC | 	wrlong	local01, fp
17038                 | ' t1=pop()
17038                 | ' if t1.result_type=result_int then 
17038     08 4E 85 F1 | 	sub	fp, #8
1703c     1C 1E 0E F2 | 	cmp	local01, #28 wz
17040     A7 20 02 AB |  if_e	rdlong	local02, fp
17044     10 1F 62 A6 |  if_e	neg	local01, local02
17048     A7 1E 62 AC |  if_e	wrlong	local01, fp
1704c     5C 00 90 AD |  if_e	jmp	#LR__1872
17050     08 4E 05 F1 | 	add	fp, #8
17054     A7 1E 02 FB | 	rdlong	local01, fp
17058     08 4E 85 F1 | 	sub	fp, #8
1705c     1D 1E 0E F2 | 	cmp	local01, #29 wz
17060     1C 00 90 5D |  if_ne	jmp	#LR__1870
17064     A7 20 02 FB | 	rdlong	local02, fp
17068     10 1F 62 F6 | 	neg	local01, local02
1706c     A7 1E 62 FC | 	wrlong	local01, fp
17070     08 4E 05 F1 | 	add	fp, #8
17074     A7 38 68 FC | 	wrlong	#28, fp
17078     08 4E 85 F1 | 	sub	fp, #8
1707c     2C 00 90 FD | 	jmp	#LR__1871
17080                 | LR__1870
17080     08 4E 05 F1 | 	add	fp, #8
17084     A7 1E 02 FB | 	rdlong	local01, fp
17088     08 4E 85 F1 | 	sub	fp, #8
1708c     1E 1E 0E F2 | 	cmp	local01, #30 wz
17090     A7 FA 01 AB |  if_e	rdlong	result1, fp
17094     1F FA E5 A4 |  if_e	bitnot	result1, #31
17098     A7 FA 61 AC |  if_e	wrlong	result1, fp
1709c     08 4E 05 51 |  if_ne	add	fp, #8
170a0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
170a4     08 4E 85 51 |  if_ne	sub	fp, #8
170a8     A7 50 68 5C |  if_ne	wrlong	#40, fp
170ac                 | LR__1871
170ac                 | LR__1872
170ac     A7 12 02 F6 | 	mov	arg01, fp
170b0     74 31 BF FD | 	call	#_push
170b4     A7 F0 03 F6 | 	mov	ptra, fp
170b8     B2 00 A0 FD | 	call	#popregs_
170bc                 | _do_negative_ret
170bc     2D 00 64 FD | 	ret
170c0                 | 
170c0                 | ' 
170c0                 | ' sub do_abs
170c0                 | _do_abs
170c0     01 4A 05 F6 | 	mov	COUNT_, #1
170c4     A8 00 A0 FD | 	call	#pushregs_
170c8     0C F0 07 F1 | 	add	ptra, #12
170cc     C0 30 BF FD | 	call	#_pop
170d0     FF 1E 02 F6 | 	mov	local01, result3
170d4     A7 FA 61 FC | 	wrlong	result1, fp
170d8     04 4E 05 F1 | 	add	fp, #4
170dc     A7 FC 61 FC | 	wrlong	result2, fp
170e0     04 4E 05 F1 | 	add	fp, #4
170e4     A7 1E 62 FC | 	wrlong	local01, fp
170e8                 | ' t1=pop()
170e8                 | ' if t1.result_type=result_int then 
170e8     08 4E 85 F1 | 	sub	fp, #8
170ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
170f0     A7 12 02 AB |  if_e	rdlong	arg01, fp
170f4     09 1F 42 A6 |  if_e	abs	local01, arg01
170f8     A7 1E 62 AC |  if_e	wrlong	local01, fp
170fc     2C 00 90 AD |  if_e	jmp	#LR__1880
17100     08 4E 05 F1 | 	add	fp, #8
17104     A7 1E 02 FB | 	rdlong	local01, fp
17108     08 4E 85 F1 | 	sub	fp, #8
1710c     1E 1E 0E F2 | 	cmp	local01, #30 wz
17110     A7 FA 01 AB |  if_e	rdlong	result1, fp
17114     1F FA 05 A4 |  if_e	bitl	result1, #31
17118     A7 FA 61 AC |  if_e	wrlong	result1, fp
1711c     08 4E 05 51 |  if_ne	add	fp, #8
17120     A7 FE 69 5C |  if_ne	wrlong	#255, fp
17124     08 4E 85 51 |  if_ne	sub	fp, #8
17128     A7 50 68 5C |  if_ne	wrlong	#40, fp
1712c                 | LR__1880
1712c     A7 12 02 F6 | 	mov	arg01, fp
17130     F4 30 BF FD | 	call	#_push
17134     A7 F0 03 F6 | 	mov	ptra, fp
17138     B2 00 A0 FD | 	call	#popregs_
1713c                 | _do_abs_ret
1713c     2D 00 64 FD | 	ret
17140                 | 
17140                 | ' 
17140                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
17140                 | ' 
17140                 | ' ''----------------------------------------------------------------------------------------------------
17140                 | ' ''------------------ Initialization procedures -------------------------------------------------------
17140                 | ' ''----------------------------------------------------------------------------------------------------
17140                 | ' 
17140                 | ' ''--------------------------- Command function pointers
17140                 | ' 
17140                 | ' sub init_commands
17140                 | _init_commands
17140                 | ' 
17140                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
17140     00 00 06 F6 | 	mov	_var01, #0
17144     97 16 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
17148                 | LR__1890
17148     00 FB 01 F6 | 	mov	result1, _var01
1714c     02 FA 65 F0 | 	shl	result1, #2
17150     63 00 00 FF 
17154     44 E4 05 F1 | 	add	objptr, ##50756
17158     F2 FA 01 F1 | 	add	result1, objptr
1715c     63 00 00 FF 
17160     44 E4 85 F1 | 	sub	objptr, ##50756
17164     FD E4 61 FC | 	wrlong	objptr, result1
17168     01 00 06 F1 | 	add	_var01, #1
1716c     00 01 56 F2 | 	cmps	_var01, #256 wc
17170     D4 FF 9F CD |  if_b	jmp	#LR__1890
17174                 | LR__1891
17174     F2 FA 01 F6 | 	mov	result1, objptr
17178     14 FA 25 F4 | 	bith	result1, #20
1717c     63 00 00 FF 
17180     48 E4 05 F1 | 	add	objptr, ##50760
17184     F2 FA 61 FC | 	wrlong	result1, objptr
17188     63 00 00 FF 
1718c     48 E4 85 F1 | 	sub	objptr, ##50760
17190     F2 FA 01 F6 | 	mov	result1, objptr
17194     15 FA 25 F4 | 	bith	result1, #21
17198     63 00 00 FF 
1719c     4C E4 05 F1 | 	add	objptr, ##50764
171a0     F2 FA 61 FC | 	wrlong	result1, objptr
171a4     63 00 00 FF 
171a8     4C E4 85 F1 | 	sub	objptr, ##50764
171ac     F2 FA 01 F6 | 	mov	result1, objptr
171b0     34 FA 25 F4 | 	bith	result1, #52
171b4     63 00 00 FF 
171b8     50 E4 05 F1 | 	add	objptr, ##50768
171bc     F2 FA 61 FC | 	wrlong	result1, objptr
171c0     63 00 00 FF 
171c4     50 E4 85 F1 | 	sub	objptr, ##50768
171c8     F2 FA 01 F6 | 	mov	result1, objptr
171cc     16 FA 25 F4 | 	bith	result1, #22
171d0     63 00 00 FF 
171d4     58 E4 05 F1 | 	add	objptr, ##50776
171d8     F2 FA 61 FC | 	wrlong	result1, objptr
171dc     63 00 00 FF 
171e0     58 E4 85 F1 | 	sub	objptr, ##50776
171e4     F2 FA 01 F6 | 	mov	result1, objptr
171e8     00 28 00 FF 
171ec     00 FA 45 F5 | 	or	result1, ##5242880
171f0     63 00 00 FF 
171f4     5C E4 05 F1 | 	add	objptr, ##50780
171f8     F2 FA 61 FC | 	wrlong	result1, objptr
171fc     63 00 00 FF 
17200     5C E4 85 F1 | 	sub	objptr, ##50780
17204     F2 FA 01 F6 | 	mov	result1, objptr
17208     35 FA 25 F4 | 	bith	result1, #53
1720c     63 00 00 FF 
17210     60 E4 05 F1 | 	add	objptr, ##50784
17214     F2 FA 61 FC | 	wrlong	result1, objptr
17218     63 00 00 FF 
1721c     60 E4 85 F1 | 	sub	objptr, ##50784
17220     F2 FA 01 F6 | 	mov	result1, objptr
17224     54 FA 25 F4 | 	bith	result1, #84
17228     63 00 00 FF 
1722c     64 E4 05 F1 | 	add	objptr, ##50788
17230     F2 FA 61 FC | 	wrlong	result1, objptr
17234     63 00 00 FF 
17238     64 E4 85 F1 | 	sub	objptr, ##50788
1723c     F2 FA 01 F6 | 	mov	result1, objptr
17240     17 FA 25 F4 | 	bith	result1, #23
17244     63 00 00 FF 
17248     68 E4 05 F1 | 	add	objptr, ##50792
1724c     F2 FA 61 FC | 	wrlong	result1, objptr
17250     63 00 00 FF 
17254     68 E4 85 F1 | 	sub	objptr, ##50792
17258     F2 FA 01 F6 | 	mov	result1, objptr
1725c     00 48 00 FF 
17260     00 FA 45 F5 | 	or	result1, ##9437184
17264     63 00 00 FF 
17268     6C E4 05 F1 | 	add	objptr, ##50796
1726c     F2 FA 61 FC | 	wrlong	result1, objptr
17270     63 00 00 FF 
17274     6C E4 85 F1 | 	sub	objptr, ##50796
17278     F2 FA 01 F6 | 	mov	result1, objptr
1727c     00 50 00 FF 
17280     00 FA 45 F5 | 	or	result1, ##10485760
17284     63 00 00 FF 
17288     70 E4 05 F1 | 	add	objptr, ##50800
1728c     F2 FA 61 FC | 	wrlong	result1, objptr
17290     63 00 00 FF 
17294     70 E4 85 F1 | 	sub	objptr, ##50800
17298     F2 FA 01 F6 | 	mov	result1, objptr
1729c     00 58 00 FF 
172a0     00 FA 45 F5 | 	or	result1, ##11534336
172a4     63 00 00 FF 
172a8     74 E4 05 F1 | 	add	objptr, ##50804
172ac     F2 FA 61 FC | 	wrlong	result1, objptr
172b0     63 00 00 FF 
172b4     74 E4 85 F1 | 	sub	objptr, ##50804
172b8     F2 FA 01 F6 | 	mov	result1, objptr
172bc     36 FA 25 F4 | 	bith	result1, #54
172c0     63 00 00 FF 
172c4     88 E4 05 F1 | 	add	objptr, ##50824
172c8     F2 FA 61 FC | 	wrlong	result1, objptr
172cc     63 00 00 FF 
172d0     88 E4 85 F1 | 	sub	objptr, ##50824
172d4     F2 FA 01 F6 | 	mov	result1, objptr
172d8     00 68 00 FF 
172dc     00 FA 45 F5 | 	or	result1, ##13631488
172e0     63 00 00 FF 
172e4     B8 E4 05 F1 | 	add	objptr, ##50872
172e8     F2 FA 61 FC | 	wrlong	result1, objptr
172ec     63 00 00 FF 
172f0     B8 E4 85 F1 | 	sub	objptr, ##50872
172f4     F2 FA 01 F6 | 	mov	result1, objptr
172f8     00 68 00 FF 
172fc     00 FA 45 F5 | 	or	result1, ##13631488
17300     63 00 00 FF 
17304     B4 E4 05 F1 | 	add	objptr, ##50868
17308     F2 FA 61 FC | 	wrlong	result1, objptr
1730c     63 00 00 FF 
17310     B4 E4 85 F1 | 	sub	objptr, ##50868
17314     F2 FA 01 F6 | 	mov	result1, objptr
17318     00 68 00 FF 
1731c     00 FA 45 F5 | 	or	result1, ##13631488
17320     63 00 00 FF 
17324     BC E4 05 F1 | 	add	objptr, ##50876
17328     F2 FA 61 FC | 	wrlong	result1, objptr
1732c     63 00 00 FF 
17330     BC E4 85 F1 | 	sub	objptr, ##50876
17334     F2 FA 01 F6 | 	mov	result1, objptr
17338     00 68 00 FF 
1733c     00 FA 45 F5 | 	or	result1, ##13631488
17340     63 00 00 FF 
17344     C0 E4 05 F1 | 	add	objptr, ##50880
17348     F2 FA 61 FC | 	wrlong	result1, objptr
1734c     63 00 00 FF 
17350     C0 E4 85 F1 | 	sub	objptr, ##50880
17354     F2 FA 01 F6 | 	mov	result1, objptr
17358     00 68 00 FF 
1735c     00 FA 45 F5 | 	or	result1, ##13631488
17360     63 00 00 FF 
17364     F0 E4 05 F1 | 	add	objptr, ##50928
17368     F2 FA 61 FC | 	wrlong	result1, objptr
1736c     63 00 00 FF 
17370     F0 E4 85 F1 | 	sub	objptr, ##50928
17374     F2 FA 01 F6 | 	mov	result1, objptr
17378     55 FA 25 F4 | 	bith	result1, #85
1737c     63 00 00 FF 
17380     A0 E4 05 F1 | 	add	objptr, ##50848
17384     F2 FA 61 FC | 	wrlong	result1, objptr
17388     63 00 00 FF 
1738c     A0 E4 85 F1 | 	sub	objptr, ##50848
17390     F2 FA 01 F6 | 	mov	result1, objptr
17394     00 68 00 FF 
17398     00 FA 45 F5 | 	or	result1, ##13631488
1739c     63 00 00 FF 
173a0     C4 E4 05 F1 | 	add	objptr, ##50884
173a4     F2 FA 61 FC | 	wrlong	result1, objptr
173a8     63 00 00 FF 
173ac     C4 E4 85 F1 | 	sub	objptr, ##50884
173b0     F2 FA 01 F6 | 	mov	result1, objptr
173b4     00 68 00 FF 
173b8     00 FA 45 F5 | 	or	result1, ##13631488
173bc     63 00 00 FF 
173c0     C8 E4 05 F1 | 	add	objptr, ##50888
173c4     F2 FA 61 FC | 	wrlong	result1, objptr
173c8     63 00 00 FF 
173cc     C8 E4 85 F1 | 	sub	objptr, ##50888
173d0     F2 FA 01 F6 | 	mov	result1, objptr
173d4     00 68 00 FF 
173d8     00 FA 45 F5 | 	or	result1, ##13631488
173dc     63 00 00 FF 
173e0     CC E4 05 F1 | 	add	objptr, ##50892
173e4     F2 FA 61 FC | 	wrlong	result1, objptr
173e8     63 00 00 FF 
173ec     CC E4 85 F1 | 	sub	objptr, ##50892
173f0     F2 FA 01 F6 | 	mov	result1, objptr
173f4     74 FA 25 F4 | 	bith	result1, #116
173f8     63 00 00 FF 
173fc     44 E5 05 F1 | 	add	objptr, ##51012
17400     F2 FA 61 FC | 	wrlong	result1, objptr
17404     63 00 00 FF 
17408     44 E5 85 F1 | 	sub	objptr, ##51012
1740c     F2 FA 01 F6 | 	mov	result1, objptr
17410     18 FA 25 F4 | 	bith	result1, #24
17414     63 00 00 FF 
17418     48 E5 05 F1 | 	add	objptr, ##51016
1741c     F2 FA 61 FC | 	wrlong	result1, objptr
17420     63 00 00 FF 
17424     48 E5 85 F1 | 	sub	objptr, ##51016
17428     F2 FA 01 F6 | 	mov	result1, objptr
1742c     00 88 00 FF 
17430     00 FA 45 F5 | 	or	result1, ##17825792
17434     63 00 00 FF 
17438     4C E5 05 F1 | 	add	objptr, ##51020
1743c     F2 FA 61 FC | 	wrlong	result1, objptr
17440     63 00 00 FF 
17444     4C E5 85 F1 | 	sub	objptr, ##51020
17448     F2 FA 01 F6 | 	mov	result1, objptr
1744c     00 90 00 FF 
17450     00 FA 45 F5 | 	or	result1, ##18874368
17454     63 00 00 FF 
17458     50 E5 05 F1 | 	add	objptr, ##51024
1745c     F2 FA 61 FC | 	wrlong	result1, objptr
17460     63 00 00 FF 
17464     50 E5 85 F1 | 	sub	objptr, ##51024
17468     F2 FA 01 F6 | 	mov	result1, objptr
1746c     00 98 00 FF 
17470     00 FA 45 F5 | 	or	result1, ##19922944
17474     63 00 00 FF 
17478     54 E5 05 F1 | 	add	objptr, ##51028
1747c     F2 FA 61 FC | 	wrlong	result1, objptr
17480     63 00 00 FF 
17484     54 E5 85 F1 | 	sub	objptr, ##51028
17488     F2 FA 01 F6 | 	mov	result1, objptr
1748c     00 A0 00 FF 
17490     00 FA 45 F5 | 	or	result1, ##20971520
17494     63 00 00 FF 
17498     58 E5 05 F1 | 	add	objptr, ##51032
1749c     F2 FA 61 FC | 	wrlong	result1, objptr
174a0     63 00 00 FF 
174a4     58 E5 85 F1 | 	sub	objptr, ##51032
174a8     F2 FA 01 F6 | 	mov	result1, objptr
174ac     00 A8 00 FF 
174b0     00 FA 45 F5 | 	or	result1, ##22020096
174b4     63 00 00 FF 
174b8     5C E5 05 F1 | 	add	objptr, ##51036
174bc     F2 FA 61 FC | 	wrlong	result1, objptr
174c0     63 00 00 FF 
174c4     5C E5 85 F1 | 	sub	objptr, ##51036
174c8     F2 FA 01 F6 | 	mov	result1, objptr
174cc     00 B0 00 FF 
174d0     00 FA 45 F5 | 	or	result1, ##23068672
174d4     63 00 00 FF 
174d8     60 E5 05 F1 | 	add	objptr, ##51040
174dc     F2 FA 61 FC | 	wrlong	result1, objptr
174e0     63 00 00 FF 
174e4     60 E5 85 F1 | 	sub	objptr, ##51040
174e8     F2 FA 01 F6 | 	mov	result1, objptr
174ec     00 B8 00 FF 
174f0     00 FA 45 F5 | 	or	result1, ##24117248
174f4     63 00 00 FF 
174f8     64 E5 05 F1 | 	add	objptr, ##51044
174fc     F2 FA 61 FC | 	wrlong	result1, objptr
17500     63 00 00 FF 
17504     64 E5 85 F1 | 	sub	objptr, ##51044
17508     F2 FA 01 F6 | 	mov	result1, objptr
1750c     37 FA 25 F4 | 	bith	result1, #55
17510     63 00 00 FF 
17514     68 E5 05 F1 | 	add	objptr, ##51048
17518     F2 FA 61 FC | 	wrlong	result1, objptr
1751c     63 00 00 FF 
17520     68 E5 85 F1 | 	sub	objptr, ##51048
17524     F2 FA 01 F6 | 	mov	result1, objptr
17528     00 C8 00 FF 
1752c     00 FA 45 F5 | 	or	result1, ##26214400
17530     63 00 00 FF 
17534     6C E5 05 F1 | 	add	objptr, ##51052
17538     F2 FA 61 FC | 	wrlong	result1, objptr
1753c     63 00 00 FF 
17540     6C E5 85 F1 | 	sub	objptr, ##51052
17544     F2 FA 01 F6 | 	mov	result1, objptr
17548     00 D0 00 FF 
1754c     00 FA 45 F5 | 	or	result1, ##27262976
17550     63 00 00 FF 
17554     70 E5 05 F1 | 	add	objptr, ##51056
17558     F2 FA 61 FC | 	wrlong	result1, objptr
1755c     63 00 00 FF 
17560     70 E5 85 F1 | 	sub	objptr, ##51056
17564     F2 FA 01 F6 | 	mov	result1, objptr
17568     00 D8 00 FF 
1756c     00 FA 45 F5 | 	or	result1, ##28311552
17570     63 00 00 FF 
17574     74 E5 05 F1 | 	add	objptr, ##51060
17578     F2 FA 61 FC | 	wrlong	result1, objptr
1757c     63 00 00 FF 
17580     74 E5 85 F1 | 	sub	objptr, ##51060
17584     F2 FA 01 F6 | 	mov	result1, objptr
17588     56 FA 25 F4 | 	bith	result1, #86
1758c     63 00 00 FF 
17590     78 E5 05 F1 | 	add	objptr, ##51064
17594     F2 FA 61 FC | 	wrlong	result1, objptr
17598     63 00 00 FF 
1759c     78 E5 85 F1 | 	sub	objptr, ##51064
175a0     F2 FA 01 F6 | 	mov	result1, objptr
175a4     00 E8 00 FF 
175a8     00 FA 45 F5 | 	or	result1, ##30408704
175ac     65 00 00 FF 
175b0     40 E4 05 F1 | 	add	objptr, ##51776
175b4     F2 FA 61 FC | 	wrlong	result1, objptr
175b8     65 00 00 FF 
175bc     40 E4 85 F1 | 	sub	objptr, ##51776
175c0     F2 FA 01 F6 | 	mov	result1, objptr
175c4     75 FA 25 F4 | 	bith	result1, #117
175c8     63 00 00 FF 
175cc     7C E5 05 F1 | 	add	objptr, ##51068
175d0     F2 FA 61 FC | 	wrlong	result1, objptr
175d4     63 00 00 FF 
175d8     7C E5 85 F1 | 	sub	objptr, ##51068
175dc     F2 FA 01 F6 | 	mov	result1, objptr
175e0     94 FA 25 F4 | 	bith	result1, #148
175e4     63 00 00 FF 
175e8     90 E5 05 F1 | 	add	objptr, ##51088
175ec     F2 FA 61 FC | 	wrlong	result1, objptr
175f0     63 00 00 FF 
175f4     90 E5 85 F1 | 	sub	objptr, ##51088
175f8     F2 FA 01 F6 | 	mov	result1, objptr
175fc     19 FA 25 F4 | 	bith	result1, #25
17600     63 00 00 FF 
17604     80 E5 05 F1 | 	add	objptr, ##51072
17608     F2 FA 61 FC | 	wrlong	result1, objptr
1760c     63 00 00 FF 
17610     80 E5 85 F1 | 	sub	objptr, ##51072
17614     F2 FA 01 F6 | 	mov	result1, objptr
17618     00 08 01 FF 
1761c     00 FA 45 F5 | 	or	result1, ##34603008
17620     63 00 00 FF 
17624     9C E4 05 F1 | 	add	objptr, ##50844
17628     F2 FA 61 FC | 	wrlong	result1, objptr
1762c     63 00 00 FF 
17630     9C E4 85 F1 | 	sub	objptr, ##50844
17634     F2 FA 01 F6 | 	mov	result1, objptr
17638     00 10 01 FF 
1763c     00 FA 45 F5 | 	or	result1, ##35651584
17640     63 00 00 FF 
17644     84 E5 05 F1 | 	add	objptr, ##51076
17648     F2 FA 61 FC | 	wrlong	result1, objptr
1764c     63 00 00 FF 
17650     84 E5 85 F1 | 	sub	objptr, ##51076
17654     F2 FA 01 F6 | 	mov	result1, objptr
17658     00 18 01 FF 
1765c     00 FA 45 F5 | 	or	result1, ##36700160
17660     63 00 00 FF 
17664     88 E5 05 F1 | 	add	objptr, ##51080
17668     F2 FA 61 FC | 	wrlong	result1, objptr
1766c     63 00 00 FF 
17670     88 E5 85 F1 | 	sub	objptr, ##51080
17674     F2 FA 01 F6 | 	mov	result1, objptr
17678     00 20 01 FF 
1767c     00 FA 45 F5 | 	or	result1, ##37748736
17680     63 00 00 FF 
17684     8C E5 05 F1 | 	add	objptr, ##51084
17688     F2 FA 61 FC | 	wrlong	result1, objptr
1768c     63 00 00 FF 
17690     8C E5 85 F1 | 	sub	objptr, ##51084
17694     F2 FA 01 F6 | 	mov	result1, objptr
17698     00 28 01 FF 
1769c     00 FA 45 F5 | 	or	result1, ##38797312
176a0     63 00 00 FF 
176a4     98 E5 05 F1 | 	add	objptr, ##51096
176a8     F2 FA 61 FC | 	wrlong	result1, objptr
176ac     63 00 00 FF 
176b0     98 E5 85 F1 | 	sub	objptr, ##51096
176b4     F2 FA 01 F6 | 	mov	result1, objptr
176b8     00 30 01 FF 
176bc     00 FA 45 F5 | 	or	result1, ##39845888
176c0     63 00 00 FF 
176c4     9C E5 05 F1 | 	add	objptr, ##51100
176c8     F2 FA 61 FC | 	wrlong	result1, objptr
176cc     63 00 00 FF 
176d0     9C E5 85 F1 | 	sub	objptr, ##51100
176d4     F2 FA 01 F6 | 	mov	result1, objptr
176d8     00 38 01 FF 
176dc     00 FA 45 F5 | 	or	result1, ##40894464
176e0     63 00 00 FF 
176e4     A0 E5 05 F1 | 	add	objptr, ##51104
176e8     F2 FA 61 FC | 	wrlong	result1, objptr
176ec     63 00 00 FF 
176f0     A0 E5 85 F1 | 	sub	objptr, ##51104
176f4     F2 FA 01 F6 | 	mov	result1, objptr
176f8     00 40 01 FF 
176fc     00 FA 45 F5 | 	or	result1, ##41943040
17700     63 00 00 FF 
17704     A4 E5 05 F1 | 	add	objptr, ##51108
17708     F2 FA 61 FC | 	wrlong	result1, objptr
1770c     63 00 00 FF 
17710     A4 E5 85 F1 | 	sub	objptr, ##51108
17714     F2 FA 01 F6 | 	mov	result1, objptr
17718     00 48 01 FF 
1771c     00 FA 45 F5 | 	or	result1, ##42991616
17720     63 00 00 FF 
17724     AC E5 05 F1 | 	add	objptr, ##51116
17728     F2 FA 61 FC | 	wrlong	result1, objptr
1772c     63 00 00 FF 
17730     AC E5 85 F1 | 	sub	objptr, ##51116
17734     F2 FA 01 F6 | 	mov	result1, objptr
17738     00 50 01 FF 
1773c     00 FA 45 F5 | 	or	result1, ##44040192
17740     63 00 00 FF 
17744     B0 E5 05 F1 | 	add	objptr, ##51120
17748     F2 FA 61 FC | 	wrlong	result1, objptr
1774c     63 00 00 FF 
17750     B0 E5 85 F1 | 	sub	objptr, ##51120
17754     F2 FA 01 F6 | 	mov	result1, objptr
17758     00 58 01 FF 
1775c     00 FA 45 F5 | 	or	result1, ##45088768
17760     63 00 00 FF 
17764     B0 E4 05 F1 | 	add	objptr, ##50864
17768     F2 FA 61 FC | 	wrlong	result1, objptr
1776c     63 00 00 FF 
17770     B0 E4 85 F1 | 	sub	objptr, ##50864
17774     F2 FA 01 F6 | 	mov	result1, objptr
17778     00 60 01 FF 
1777c     00 FA 45 F5 | 	or	result1, ##46137344
17780     63 00 00 FF 
17784     E0 E4 05 F1 | 	add	objptr, ##50912
17788     F2 FA 61 FC | 	wrlong	result1, objptr
1778c     63 00 00 FF 
17790     E0 E4 85 F1 | 	sub	objptr, ##50912
17794     F2 FA 01 F6 | 	mov	result1, objptr
17798     00 68 01 FF 
1779c     00 FA 45 F5 | 	or	result1, ##47185920
177a0     63 00 00 FF 
177a4     DC E4 05 F1 | 	add	objptr, ##50908
177a8     F2 FA 61 FC | 	wrlong	result1, objptr
177ac     63 00 00 FF 
177b0     DC E4 85 F1 | 	sub	objptr, ##50908
177b4     F2 FA 01 F6 | 	mov	result1, objptr
177b8     00 70 01 FF 
177bc     00 FA 45 F5 | 	or	result1, ##48234496
177c0     63 00 00 FF 
177c4     80 E4 05 F1 | 	add	objptr, ##50816
177c8     F2 FA 61 FC | 	wrlong	result1, objptr
177cc     63 00 00 FF 
177d0     80 E4 85 F1 | 	sub	objptr, ##50816
177d4     F2 FA 01 F6 | 	mov	result1, objptr
177d8     00 78 01 FF 
177dc     00 FA 45 F5 | 	or	result1, ##49283072
177e0     63 00 00 FF 
177e4     84 E4 05 F1 | 	add	objptr, ##50820
177e8     F2 FA 61 FC | 	wrlong	result1, objptr
177ec     63 00 00 FF 
177f0     84 E4 85 F1 | 	sub	objptr, ##50820
177f4     F2 FA 01 F6 | 	mov	result1, objptr
177f8     38 FA 25 F4 | 	bith	result1, #56
177fc     63 00 00 FF 
17800     EC E4 05 F1 | 	add	objptr, ##50924
17804     F2 FA 61 FC | 	wrlong	result1, objptr
17808     63 00 00 FF 
1780c     EC E4 85 F1 | 	sub	objptr, ##50924
17810     F2 FA 01 F6 | 	mov	result1, objptr
17814     00 88 01 FF 
17818     00 FA 45 F5 | 	or	result1, ##51380224
1781c     63 00 00 FF 
17820     94 E5 05 F1 | 	add	objptr, ##51092
17824     F2 FA 61 FC | 	wrlong	result1, objptr
17828     63 00 00 FF 
1782c     94 E5 85 F1 | 	sub	objptr, ##51092
17830     F2 FA 01 F6 | 	mov	result1, objptr
17834     00 90 01 FF 
17838     00 FA 45 F5 | 	or	result1, ##52428800
1783c     63 00 00 FF 
17840     A8 E5 05 F1 | 	add	objptr, ##51112
17844     F2 FA 61 FC | 	wrlong	result1, objptr
17848     63 00 00 FF 
1784c     A8 E5 85 F1 | 	sub	objptr, ##51112
17850     F2 FA 01 F6 | 	mov	result1, objptr
17854     00 98 01 FF 
17858     00 FA 45 F5 | 	or	result1, ##53477376
1785c     63 00 00 FF 
17860     B4 E5 05 F1 | 	add	objptr, ##51124
17864     F2 FA 61 FC | 	wrlong	result1, objptr
17868     63 00 00 FF 
1786c     B4 E5 85 F1 | 	sub	objptr, ##51124
17870     F2 FA 01 F6 | 	mov	result1, objptr
17874     00 A0 01 FF 
17878     00 FA 45 F5 | 	or	result1, ##54525952
1787c     63 00 00 FF 
17880     B8 E5 05 F1 | 	add	objptr, ##51128
17884     F2 FA 61 FC | 	wrlong	result1, objptr
17888     63 00 00 FF 
1788c     B8 E5 85 F1 | 	sub	objptr, ##51128
17890     F2 FA 01 F6 | 	mov	result1, objptr
17894     00 A8 01 FF 
17898     00 FA 45 F5 | 	or	result1, ##55574528
1789c     63 00 00 FF 
178a0     BC E5 05 F1 | 	add	objptr, ##51132
178a4     F2 FA 61 FC | 	wrlong	result1, objptr
178a8     63 00 00 FF 
178ac     BC E5 85 F1 | 	sub	objptr, ##51132
178b0     F2 FA 01 F6 | 	mov	result1, objptr
178b4     00 B0 01 FF 
178b8     00 FA 45 F5 | 	or	result1, ##56623104
178bc     63 00 00 FF 
178c0     C0 E5 05 F1 | 	add	objptr, ##51136
178c4     F2 FA 61 FC | 	wrlong	result1, objptr
178c8     63 00 00 FF 
178cc     C0 E5 85 F1 | 	sub	objptr, ##51136
178d0     F2 FA 01 F6 | 	mov	result1, objptr
178d4     00 B8 01 FF 
178d8     00 FA 45 F5 | 	or	result1, ##57671680
178dc     63 00 00 FF 
178e0     C4 E5 05 F1 | 	add	objptr, ##51140
178e4     F2 FA 61 FC | 	wrlong	result1, objptr
178e8     63 00 00 FF 
178ec     C4 E5 85 F1 | 	sub	objptr, ##51140
178f0     F2 FA 01 F6 | 	mov	result1, objptr
178f4     57 FA 25 F4 | 	bith	result1, #87
178f8     63 00 00 FF 
178fc     C8 E5 05 F1 | 	add	objptr, ##51144
17900     F2 FA 61 FC | 	wrlong	result1, objptr
17904     63 00 00 FF 
17908     C8 E5 85 F1 | 	sub	objptr, ##51144
1790c     F2 FA 01 F6 | 	mov	result1, objptr
17910     94 FA 25 F4 | 	bith	result1, #148
17914     63 00 00 FF 
17918     90 E5 05 F1 | 	add	objptr, ##51088
1791c     F2 FA 61 FC | 	wrlong	result1, objptr
17920     63 00 00 FF 
17924     90 E5 85 F1 | 	sub	objptr, ##51088
17928     F2 FA 01 F6 | 	mov	result1, objptr
1792c     00 C8 01 FF 
17930     00 FA 45 F5 | 	or	result1, ##59768832
17934     63 00 00 FF 
17938     D0 E5 05 F1 | 	add	objptr, ##51152
1793c     F2 FA 61 FC | 	wrlong	result1, objptr
17940     63 00 00 FF 
17944     D0 E5 85 F1 | 	sub	objptr, ##51152
17948     F2 FA 01 F6 | 	mov	result1, objptr
1794c     00 D0 01 FF 
17950     00 FA 45 F5 | 	or	result1, ##60817408
17954     63 00 00 FF 
17958     CC E5 05 F1 | 	add	objptr, ##51148
1795c     F2 FA 61 FC | 	wrlong	result1, objptr
17960     63 00 00 FF 
17964     CC E5 85 F1 | 	sub	objptr, ##51148
17968     F2 FA 01 F6 | 	mov	result1, objptr
1796c     00 D8 01 FF 
17970     00 FA 45 F5 | 	or	result1, ##61865984
17974     63 00 00 FF 
17978     E4 E5 05 F1 | 	add	objptr, ##51172
1797c     F2 FA 61 FC | 	wrlong	result1, objptr
17980     63 00 00 FF 
17984     E4 E5 85 F1 | 	sub	objptr, ##51172
17988     F2 FA 01 F6 | 	mov	result1, objptr
1798c     76 FA 25 F4 | 	bith	result1, #118
17990     63 00 00 FF 
17994     E8 E5 05 F1 | 	add	objptr, ##51176
17998     F2 FA 61 FC | 	wrlong	result1, objptr
1799c     63 00 00 FF 
179a0     E8 E5 85 F1 | 	sub	objptr, ##51176
179a4     F2 FA 01 F6 | 	mov	result1, objptr
179a8     00 E8 01 FF 
179ac     00 FA 45 F5 | 	or	result1, ##63963136
179b0     63 00 00 FF 
179b4     D4 E5 05 F1 | 	add	objptr, ##51156
179b8     F2 FA 61 FC | 	wrlong	result1, objptr
179bc     63 00 00 FF 
179c0     D4 E5 85 F1 | 	sub	objptr, ##51156
179c4     F2 FA 01 F6 | 	mov	result1, objptr
179c8     95 FA 25 F4 | 	bith	result1, #149
179cc     63 00 00 FF 
179d0     D8 E5 05 F1 | 	add	objptr, ##51160
179d4     F2 FA 61 FC | 	wrlong	result1, objptr
179d8     63 00 00 FF 
179dc     D8 E5 85 F1 | 	sub	objptr, ##51160
179e0     F2 FA 01 F6 | 	mov	result1, objptr
179e4     B4 FA 25 F4 | 	bith	result1, #180
179e8     63 00 00 FF 
179ec     DC E5 05 F1 | 	add	objptr, ##51164
179f0     F2 FA 61 FC | 	wrlong	result1, objptr
179f4     63 00 00 FF 
179f8     DC E5 85 F1 | 	sub	objptr, ##51164
179fc     F2 FA 01 F6 | 	mov	result1, objptr
17a00     1A FA 25 F4 | 	bith	result1, #26
17a04     63 00 00 FF 
17a08     E0 E5 05 F1 | 	add	objptr, ##51168
17a0c     F2 FA 61 FC | 	wrlong	result1, objptr
17a10     63 00 00 FF 
17a14     E0 E5 85 F1 | 	sub	objptr, ##51168
17a18     F2 FA 01 F6 | 	mov	result1, objptr
17a1c     00 08 02 FF 
17a20     00 FA 45 F5 | 	or	result1, ##68157440
17a24     63 00 00 FF 
17a28     F0 E5 05 F1 | 	add	objptr, ##51184
17a2c     F2 FA 61 FC | 	wrlong	result1, objptr
17a30     63 00 00 FF 
17a34     F0 E5 85 F1 | 	sub	objptr, ##51184
17a38     F2 FA 01 F6 | 	mov	result1, objptr
17a3c     00 10 02 FF 
17a40     00 FA 45 F5 | 	or	result1, ##69206016
17a44     63 00 00 FF 
17a48     EC E5 05 F1 | 	add	objptr, ##51180
17a4c     F2 FA 61 FC | 	wrlong	result1, objptr
17a50     63 00 00 FF 
17a54     EC E5 85 F1 | 	sub	objptr, ##51180
17a58     F2 FA 01 F6 | 	mov	result1, objptr
17a5c     00 18 02 FF 
17a60     00 FA 45 F5 | 	or	result1, ##70254592
17a64     63 00 00 FF 
17a68     FC E5 05 F1 | 	add	objptr, ##51196
17a6c     F2 FA 61 FC | 	wrlong	result1, objptr
17a70     63 00 00 FF 
17a74     FC E5 85 F1 | 	sub	objptr, ##51196
17a78     F2 FA 01 F6 | 	mov	result1, objptr
17a7c     00 20 02 FF 
17a80     00 FA 45 F5 | 	or	result1, ##71303168
17a84     63 00 00 FF 
17a88     F8 E5 05 F1 | 	add	objptr, ##51192
17a8c     F2 FA 61 FC | 	wrlong	result1, objptr
17a90     63 00 00 FF 
17a94     F8 E5 85 F1 | 	sub	objptr, ##51192
17a98     F2 FA 01 F6 | 	mov	result1, objptr
17a9c     00 28 02 FF 
17aa0     00 FA 45 F5 | 	or	result1, ##72351744
17aa4     63 00 00 FF 
17aa8     F4 E5 05 F1 | 	add	objptr, ##51188
17aac     F2 FA 61 FC | 	wrlong	result1, objptr
17ab0     63 00 00 FF 
17ab4     F4 E5 85 F1 | 	sub	objptr, ##51188
17ab8     F2 FA 01 F6 | 	mov	result1, objptr
17abc     00 30 02 FF 
17ac0     00 FA 45 F5 | 	or	result1, ##73400320
17ac4     64 00 00 FF 
17ac8     00 E4 05 F1 | 	add	objptr, ##51200
17acc     F2 FA 61 FC | 	wrlong	result1, objptr
17ad0     64 00 00 FF 
17ad4     00 E4 85 F1 | 	sub	objptr, ##51200
17ad8     F2 FA 01 F6 | 	mov	result1, objptr
17adc     00 38 02 FF 
17ae0     00 FA 45 F5 | 	or	result1, ##74448896
17ae4     64 00 00 FF 
17ae8     04 E4 05 F1 | 	add	objptr, ##51204
17aec     F2 FA 61 FC | 	wrlong	result1, objptr
17af0     64 00 00 FF 
17af4     04 E4 85 F1 | 	sub	objptr, ##51204
17af8     F2 FA 01 F6 | 	mov	result1, objptr
17afc     00 40 02 FF 
17b00     00 FA 45 F5 | 	or	result1, ##75497472
17b04     63 00 00 FF 
17b08     98 E4 05 F1 | 	add	objptr, ##50840
17b0c     F2 FA 61 FC | 	wrlong	result1, objptr
17b10     63 00 00 FF 
17b14     98 E4 85 F1 | 	sub	objptr, ##50840
17b18     F2 FA 01 F6 | 	mov	result1, objptr
17b1c     00 48 02 FF 
17b20     00 FA 45 F5 | 	or	result1, ##76546048
17b24     64 00 00 FF 
17b28     1C E4 05 F1 | 	add	objptr, ##51228
17b2c     F2 FA 61 FC | 	wrlong	result1, objptr
17b30     64 00 00 FF 
17b34     1C E4 85 F1 | 	sub	objptr, ##51228
17b38     F2 FA 01 F6 | 	mov	result1, objptr
17b3c     00 50 02 FF 
17b40     00 FA 45 F5 | 	or	result1, ##77594624
17b44     64 00 00 FF 
17b48     2C E4 05 F1 | 	add	objptr, ##51244
17b4c     F2 FA 61 FC | 	wrlong	result1, objptr
17b50     64 00 00 FF 
17b54     2C E4 85 F1 | 	sub	objptr, ##51244
17b58     F2 FA 01 F6 | 	mov	result1, objptr
17b5c     00 58 02 FF 
17b60     00 FA 45 F5 | 	or	result1, ##78643200
17b64     64 00 00 FF 
17b68     30 E4 05 F1 | 	add	objptr, ##51248
17b6c     F2 FA 61 FC | 	wrlong	result1, objptr
17b70     64 00 00 FF 
17b74     30 E4 85 F1 | 	sub	objptr, ##51248
17b78     F2 FA 01 F6 | 	mov	result1, objptr
17b7c     00 60 02 FF 
17b80     00 FA 45 F5 | 	or	result1, ##79691776
17b84     64 00 00 FF 
17b88     28 E4 05 F1 | 	add	objptr, ##51240
17b8c     F2 FA 61 FC | 	wrlong	result1, objptr
17b90     64 00 00 FF 
17b94     28 E4 85 F1 | 	sub	objptr, ##51240
17b98     F2 FA 01 F6 | 	mov	result1, objptr
17b9c     00 68 02 FF 
17ba0     00 FA 45 F5 | 	or	result1, ##80740352
17ba4     64 00 00 FF 
17ba8     20 E4 05 F1 | 	add	objptr, ##51232
17bac     F2 FA 61 FC | 	wrlong	result1, objptr
17bb0     64 00 00 FF 
17bb4     20 E4 85 F1 | 	sub	objptr, ##51232
17bb8     F2 FA 01 F6 | 	mov	result1, objptr
17bbc     00 70 02 FF 
17bc0     00 FA 45 F5 | 	or	result1, ##81788928
17bc4     64 00 00 FF 
17bc8     24 E4 05 F1 | 	add	objptr, ##51236
17bcc     F2 FA 61 FC | 	wrlong	result1, objptr
17bd0     64 00 00 FF 
17bd4     24 E4 85 F1 | 	sub	objptr, ##51236
17bd8     F2 FA 01 F6 | 	mov	result1, objptr
17bdc     00 78 02 FF 
17be0     00 FA 45 F5 | 	or	result1, ##82837504
17be4     64 00 00 FF 
17be8     34 E4 05 F1 | 	add	objptr, ##51252
17bec     F2 FA 61 FC | 	wrlong	result1, objptr
17bf0     64 00 00 FF 
17bf4     34 E4 85 F1 | 	sub	objptr, ##51252
17bf8     F2 FA 01 F6 | 	mov	result1, objptr
17bfc     00 80 02 FF 
17c00     00 FA 45 F5 | 	or	result1, ##83886080
17c04     64 00 00 FF 
17c08     38 E4 05 F1 | 	add	objptr, ##51256
17c0c     F2 FA 61 FC | 	wrlong	result1, objptr
17c10     64 00 00 FF 
17c14     38 E4 85 F1 | 	sub	objptr, ##51256
17c18     F2 FA 01 F6 | 	mov	result1, objptr
17c1c     00 88 02 FF 
17c20     00 FA 45 F5 | 	or	result1, ##84934656
17c24     64 00 00 FF 
17c28     3C E4 05 F1 | 	add	objptr, ##51260
17c2c     F2 FA 61 FC | 	wrlong	result1, objptr
17c30     64 00 00 FF 
17c34     3C E4 85 F1 | 	sub	objptr, ##51260
17c38     F2 FA 01 F6 | 	mov	result1, objptr
17c3c     00 90 02 FF 
17c40     00 FA 45 F5 | 	or	result1, ##85983232
17c44     64 00 00 FF 
17c48     40 E4 05 F1 | 	add	objptr, ##51264
17c4c     F2 FA 61 FC | 	wrlong	result1, objptr
17c50     64 00 00 FF 
17c54     40 E4 85 F1 | 	sub	objptr, ##51264
17c58     F2 FA 01 F6 | 	mov	result1, objptr
17c5c     00 98 02 FF 
17c60     00 FA 45 F5 | 	or	result1, ##87031808
17c64     64 00 00 FF 
17c68     44 E4 05 F1 | 	add	objptr, ##51268
17c6c     F2 FA 61 FC | 	wrlong	result1, objptr
17c70     64 00 00 FF 
17c74     44 E4 85 F1 | 	sub	objptr, ##51268
17c78     F2 FA 01 F6 | 	mov	result1, objptr
17c7c     00 A0 02 FF 
17c80     00 FA 45 F5 | 	or	result1, ##88080384
17c84     64 00 00 FF 
17c88     48 E4 05 F1 | 	add	objptr, ##51272
17c8c     F2 FA 61 FC | 	wrlong	result1, objptr
17c90     64 00 00 FF 
17c94     48 E4 85 F1 | 	sub	objptr, ##51272
17c98     F2 FA 01 F6 | 	mov	result1, objptr
17c9c     00 A8 02 FF 
17ca0     00 FA 45 F5 | 	or	result1, ##89128960
17ca4     64 00 00 FF 
17ca8     4C E4 05 F1 | 	add	objptr, ##51276
17cac     F2 FA 61 FC | 	wrlong	result1, objptr
17cb0     64 00 00 FF 
17cb4     4C E4 85 F1 | 	sub	objptr, ##51276
17cb8     F2 FA 01 F6 | 	mov	result1, objptr
17cbc     00 B0 02 FF 
17cc0     00 FA 45 F5 | 	or	result1, ##90177536
17cc4     64 00 00 FF 
17cc8     50 E4 05 F1 | 	add	objptr, ##51280
17ccc     F2 FA 61 FC | 	wrlong	result1, objptr
17cd0     64 00 00 FF 
17cd4     50 E4 85 F1 | 	sub	objptr, ##51280
17cd8     F2 FA 01 F6 | 	mov	result1, objptr
17cdc     00 B8 02 FF 
17ce0     00 FA 45 F5 | 	or	result1, ##91226112
17ce4     64 00 00 FF 
17ce8     5C E4 05 F1 | 	add	objptr, ##51292
17cec     F2 FA 61 FC | 	wrlong	result1, objptr
17cf0     64 00 00 FF 
17cf4     5C E4 85 F1 | 	sub	objptr, ##51292
17cf8     F2 FA 01 F6 | 	mov	result1, objptr
17cfc     00 C0 02 FF 
17d00     00 FA 45 F5 | 	or	result1, ##92274688
17d04     64 00 00 FF 
17d08     54 E4 05 F1 | 	add	objptr, ##51284
17d0c     F2 FA 61 FC | 	wrlong	result1, objptr
17d10     64 00 00 FF 
17d14     54 E4 85 F1 | 	sub	objptr, ##51284
17d18     F2 FA 01 F6 | 	mov	result1, objptr
17d1c     00 C8 02 FF 
17d20     00 FA 45 F5 | 	or	result1, ##93323264
17d24     64 00 00 FF 
17d28     58 E4 05 F1 | 	add	objptr, ##51288
17d2c     F2 FA 61 FC | 	wrlong	result1, objptr
17d30     64 00 00 FF 
17d34     58 E4 85 F1 | 	sub	objptr, ##51288
17d38     F2 FA 01 F6 | 	mov	result1, objptr
17d3c     00 D0 02 FF 
17d40     00 FA 45 F5 | 	or	result1, ##94371840
17d44     64 00 00 FF 
17d48     60 E4 05 F1 | 	add	objptr, ##51296
17d4c     F2 FA 61 FC | 	wrlong	result1, objptr
17d50     64 00 00 FF 
17d54     60 E4 85 F1 | 	sub	objptr, ##51296
17d58     F2 FA 01 F6 | 	mov	result1, objptr
17d5c     00 D8 02 FF 
17d60     00 FA 45 F5 | 	or	result1, ##95420416
17d64     64 00 00 FF 
17d68     08 E4 05 F1 | 	add	objptr, ##51208
17d6c     F2 FA 61 FC | 	wrlong	result1, objptr
17d70     64 00 00 FF 
17d74     08 E4 85 F1 | 	sub	objptr, ##51208
17d78     F2 FA 01 F6 | 	mov	result1, objptr
17d7c     00 E0 02 FF 
17d80     00 FA 45 F5 | 	or	result1, ##96468992
17d84     64 00 00 FF 
17d88     10 E4 05 F1 | 	add	objptr, ##51216
17d8c     F2 FA 61 FC | 	wrlong	result1, objptr
17d90     64 00 00 FF 
17d94     10 E4 85 F1 | 	sub	objptr, ##51216
17d98     F2 FA 01 F6 | 	mov	result1, objptr
17d9c     00 E8 02 FF 
17da0     00 FA 45 F5 | 	or	result1, ##97517568
17da4     64 00 00 FF 
17da8     14 E4 05 F1 | 	add	objptr, ##51220
17dac     F2 FA 61 FC | 	wrlong	result1, objptr
17db0     64 00 00 FF 
17db4     14 E4 85 F1 | 	sub	objptr, ##51220
17db8     F2 FA 01 F6 | 	mov	result1, objptr
17dbc     00 F0 02 FF 
17dc0     00 FA 45 F5 | 	or	result1, ##98566144
17dc4     64 00 00 FF 
17dc8     64 E4 05 F1 | 	add	objptr, ##51300
17dcc     F2 FA 61 FC | 	wrlong	result1, objptr
17dd0     64 00 00 FF 
17dd4     64 E4 85 F1 | 	sub	objptr, ##51300
17dd8     F2 FA 01 F6 | 	mov	result1, objptr
17ddc     00 F8 02 FF 
17de0     00 FA 45 F5 | 	or	result1, ##99614720
17de4     64 00 00 FF 
17de8     68 E4 05 F1 | 	add	objptr, ##51304
17dec     F2 FA 61 FC | 	wrlong	result1, objptr
17df0     64 00 00 FF 
17df4     68 E4 85 F1 | 	sub	objptr, ##51304
17df8     F2 FA 01 F6 | 	mov	result1, objptr
17dfc     39 FA 25 F4 | 	bith	result1, #57
17e00     64 00 00 FF 
17e04     6C E4 05 F1 | 	add	objptr, ##51308
17e08     F2 FA 61 FC | 	wrlong	result1, objptr
17e0c     64 00 00 FF 
17e10     6C E4 85 F1 | 	sub	objptr, ##51308
17e14     F2 FA 01 F6 | 	mov	result1, objptr
17e18     00 08 03 FF 
17e1c     00 FA 45 F5 | 	or	result1, ##101711872
17e20     64 00 00 FF 
17e24     18 E4 05 F1 | 	add	objptr, ##51224
17e28     F2 FA 61 FC | 	wrlong	result1, objptr
17e2c     64 00 00 FF 
17e30     18 E4 85 F1 | 	sub	objptr, ##51224
17e34     F2 FA 01 F6 | 	mov	result1, objptr
17e38     00 10 03 FF 
17e3c     00 FA 45 F5 | 	or	result1, ##102760448
17e40     64 00 00 FF 
17e44     7C E4 05 F1 | 	add	objptr, ##51324
17e48     F2 FA 61 FC | 	wrlong	result1, objptr
17e4c     64 00 00 FF 
17e50     7C E4 85 F1 | 	sub	objptr, ##51324
17e54     F2 FA 01 F6 | 	mov	result1, objptr
17e58     00 18 03 FF 
17e5c     00 FA 45 F5 | 	or	result1, ##103809024
17e60     64 00 00 FF 
17e64     84 E4 05 F1 | 	add	objptr, ##51332
17e68     F2 FA 61 FC | 	wrlong	result1, objptr
17e6c     64 00 00 FF 
17e70     84 E4 85 F1 | 	sub	objptr, ##51332
17e74     F2 FA 01 F6 | 	mov	result1, objptr
17e78     00 20 03 FF 
17e7c     00 FA 45 F5 | 	or	result1, ##104857600
17e80     64 00 00 FF 
17e84     78 E4 05 F1 | 	add	objptr, ##51320
17e88     F2 FA 61 FC | 	wrlong	result1, objptr
17e8c     64 00 00 FF 
17e90     78 E4 85 F1 | 	sub	objptr, ##51320
17e94     F2 FA 01 F6 | 	mov	result1, objptr
17e98     00 28 03 FF 
17e9c     00 FA 45 F5 | 	or	result1, ##105906176
17ea0     64 00 00 FF 
17ea4     74 E4 05 F1 | 	add	objptr, ##51316
17ea8     F2 FA 61 FC | 	wrlong	result1, objptr
17eac     64 00 00 FF 
17eb0     74 E4 85 F1 | 	sub	objptr, ##51316
17eb4     F2 FA 01 F6 | 	mov	result1, objptr
17eb8     00 30 03 FF 
17ebc     00 FA 45 F5 | 	or	result1, ##106954752
17ec0     64 00 00 FF 
17ec4     70 E4 05 F1 | 	add	objptr, ##51312
17ec8     F2 FA 61 FC | 	wrlong	result1, objptr
17ecc     64 00 00 FF 
17ed0     70 E4 85 F1 | 	sub	objptr, ##51312
17ed4     F2 FA 01 F6 | 	mov	result1, objptr
17ed8     00 38 03 FF 
17edc     00 FA 45 F5 | 	or	result1, ##108003328
17ee0     64 00 00 FF 
17ee4     80 E4 05 F1 | 	add	objptr, ##51328
17ee8     F2 FA 61 FC | 	wrlong	result1, objptr
17eec     64 00 00 FF 
17ef0     80 E4 85 F1 | 	sub	objptr, ##51328
17ef4     F2 FA 01 F6 | 	mov	result1, objptr
17ef8     00 40 03 FF 
17efc     00 FA 45 F5 | 	or	result1, ##109051904
17f00     64 00 00 FF 
17f04     88 E4 05 F1 | 	add	objptr, ##51336
17f08     F2 FA 61 FC | 	wrlong	result1, objptr
17f0c     64 00 00 FF 
17f10     88 E4 85 F1 | 	sub	objptr, ##51336
17f14     F2 FA 01 F6 | 	mov	result1, objptr
17f18     00 48 03 FF 
17f1c     00 FA 45 F5 | 	or	result1, ##110100480
17f20     64 00 00 FF 
17f24     8C E4 05 F1 | 	add	objptr, ##51340
17f28     F2 FA 61 FC | 	wrlong	result1, objptr
17f2c     64 00 00 FF 
17f30     8C E4 85 F1 | 	sub	objptr, ##51340
17f34     F2 FA 01 F6 | 	mov	result1, objptr
17f38     00 50 03 FF 
17f3c     00 FA 45 F5 | 	or	result1, ##111149056
17f40     64 00 00 FF 
17f44     90 E4 05 F1 | 	add	objptr, ##51344
17f48     F2 FA 61 FC | 	wrlong	result1, objptr
17f4c     64 00 00 FF 
17f50     90 E4 85 F1 | 	sub	objptr, ##51344
17f54     F2 FA 01 F6 | 	mov	result1, objptr
17f58     00 58 03 FF 
17f5c     00 FA 45 F5 | 	or	result1, ##112197632
17f60     64 00 00 FF 
17f64     98 E4 05 F1 | 	add	objptr, ##51352
17f68     F2 FA 61 FC | 	wrlong	result1, objptr
17f6c     64 00 00 FF 
17f70     98 E4 85 F1 | 	sub	objptr, ##51352
17f74     F2 FA 01 F6 | 	mov	result1, objptr
17f78     00 60 03 FF 
17f7c     00 FA 45 F5 | 	or	result1, ##113246208
17f80     64 00 00 FF 
17f84     9C E4 05 F1 | 	add	objptr, ##51356
17f88     F2 FA 61 FC | 	wrlong	result1, objptr
17f8c     64 00 00 FF 
17f90     9C E4 85 F1 | 	sub	objptr, ##51356
17f94     F2 FA 01 F6 | 	mov	result1, objptr
17f98     00 68 03 FF 
17f9c     00 FA 45 F5 | 	or	result1, ##114294784
17fa0     64 00 00 FF 
17fa4     A0 E4 05 F1 | 	add	objptr, ##51360
17fa8     F2 FA 61 FC | 	wrlong	result1, objptr
17fac     64 00 00 FF 
17fb0     A0 E4 85 F1 | 	sub	objptr, ##51360
17fb4     F2 FA 01 F6 | 	mov	result1, objptr
17fb8     00 70 03 FF 
17fbc     00 FA 45 F5 | 	or	result1, ##115343360
17fc0     64 00 00 FF 
17fc4     A4 E4 05 F1 | 	add	objptr, ##51364
17fc8     F2 FA 61 FC | 	wrlong	result1, objptr
17fcc     64 00 00 FF 
17fd0     A4 E4 85 F1 | 	sub	objptr, ##51364
17fd4     F2 FA 01 F6 | 	mov	result1, objptr
17fd8     00 78 03 FF 
17fdc     00 FA 45 F5 | 	or	result1, ##116391936
17fe0     64 00 00 FF 
17fe4     A8 E4 05 F1 | 	add	objptr, ##51368
17fe8     F2 FA 61 FC | 	wrlong	result1, objptr
17fec     64 00 00 FF 
17ff0     A8 E4 85 F1 | 	sub	objptr, ##51368
17ff4     F2 FA 01 F6 | 	mov	result1, objptr
17ff8     58 FA 25 F4 | 	bith	result1, #88
17ffc     64 00 00 FF 
18000     AC E4 05 F1 | 	add	objptr, ##51372
18004     F2 FA 61 FC | 	wrlong	result1, objptr
18008     64 00 00 FF 
1800c     AC E4 85 F1 | 	sub	objptr, ##51372
18010     F2 FA 01 F6 | 	mov	result1, objptr
18014     00 88 03 FF 
18018     00 FA 45 F5 | 	or	result1, ##118489088
1801c     64 00 00 FF 
18020     B0 E4 05 F1 | 	add	objptr, ##51376
18024     F2 FA 61 FC | 	wrlong	result1, objptr
18028     64 00 00 FF 
1802c     B0 E4 85 F1 | 	sub	objptr, ##51376
18030     F2 FA 01 F6 | 	mov	result1, objptr
18034     00 90 03 FF 
18038     00 FA 45 F5 | 	or	result1, ##119537664
1803c     64 00 00 FF 
18040     B4 E4 05 F1 | 	add	objptr, ##51380
18044     F2 FA 61 FC | 	wrlong	result1, objptr
18048     64 00 00 FF 
1804c     B4 E4 85 F1 | 	sub	objptr, ##51380
18050     F2 FA 01 F6 | 	mov	result1, objptr
18054     00 98 03 FF 
18058     00 FA 45 F5 | 	or	result1, ##120586240
1805c     64 00 00 FF 
18060     94 E4 05 F1 | 	add	objptr, ##51348
18064     F2 FA 61 FC | 	wrlong	result1, objptr
18068     64 00 00 FF 
1806c     94 E4 85 F1 | 	sub	objptr, ##51348
18070     F2 FA 01 F6 | 	mov	result1, objptr
18074     00 A0 03 FF 
18078     00 FA 45 F5 | 	or	result1, ##121634816
1807c     63 00 00 FF 
18080     8C E4 05 F1 | 	add	objptr, ##50828
18084     F2 FA 61 FC | 	wrlong	result1, objptr
18088     63 00 00 FF 
1808c     8C E4 85 F1 | 	sub	objptr, ##50828
18090     F2 FA 01 F6 | 	mov	result1, objptr
18094     00 A8 03 FF 
18098     00 FA 45 F5 | 	or	result1, ##122683392
1809c     64 00 00 FF 
180a0     B8 E4 05 F1 | 	add	objptr, ##51384
180a4     F2 FA 61 FC | 	wrlong	result1, objptr
180a8     64 00 00 FF 
180ac     B8 E4 85 F1 | 	sub	objptr, ##51384
180b0     F2 FA 01 F6 | 	mov	result1, objptr
180b4     00 B0 03 FF 
180b8     00 FA 45 F5 | 	or	result1, ##123731968
180bc     64 00 00 FF 
180c0     BC E4 05 F1 | 	add	objptr, ##51388
180c4     F2 FA 61 FC | 	wrlong	result1, objptr
180c8     64 00 00 FF 
180cc     BC E4 85 F1 | 	sub	objptr, ##51388
180d0                 | _init_commands_ret
180d0     2D 00 64 FD | 	ret
180d4                 | 
180d4                 | ' 
180d4                 | ' ''--------------------------------Error strings -------------------------------------
180d4                 | ' sub init_audio
180d4                 | _init_audio
180d4     05 4A 05 F6 | 	mov	COUNT_, #5
180d8     A8 00 A0 FD | 	call	#pushregs_
180dc     00 C0 1F FF 
180e0     00 1E 06 F6 | 	mov	local01, ##1065353216
180e4                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
180e4     00 20 06 F6 | 	mov	local02, #0
180e8                 | LR__1900
180e8     10 23 02 F6 | 	mov	local03, local02
180ec     01 22 66 F0 | 	shl	local03, #1
180f0     0C 00 00 FF 
180f4     CC E4 05 F1 | 	add	objptr, ##6348
180f8     F2 22 02 F1 | 	add	local03, objptr
180fc     58 7F 23 FF 
18100     00 24 06 F6 | 	mov	local04, ##1191096320
18104     0C 00 00 FF 
18108     CC E4 85 F1 | 	sub	objptr, ##6348
1810c     10 13 52 F6 | 	abs	arg01, local02 wc
18110     1F 26 C6 C9 |  if_b	decod	local05, #31
18114     00 26 06 36 |  if_ae	mov	local05, #0
18118     A8 6A B0 FD | 	call	#__system___float_fromuns
1811c     13 FB 61 F5 | 	xor	result1, local05
18120     FD 12 02 F6 | 	mov	arg01, result1
18124     87 24 20 FF 
18128     DB 15 06 F6 | 	mov	arg02, ##1078530011
1812c     98 6E B0 FD | 	call	#__system___float_mul
18130     FD 12 02 F6 | 	mov	arg01, result1
18134     00 00 22 FF 
18138     00 14 06 F6 | 	mov	arg02, ##1140850688
1813c     8C 70 B0 FD | 	call	#__system___float_div
18140     FD 12 02 F6 | 	mov	arg01, result1
18144     BC 77 B0 FD | 	call	#__system____builtin_sinf
18148     FD 14 02 F6 | 	mov	arg02, result1
1814c     12 13 02 F6 | 	mov	arg01, local04
18150     74 6E B0 FD | 	call	#__system___float_mul
18154     FD 12 02 F6 | 	mov	arg01, result1
18158     01 14 06 F6 | 	mov	arg02, #1
1815c     30 73 B0 FD | 	call	#__system___float_tointeger
18160     11 FB 51 FC | 	wrword	result1, local03
18164     01 20 06 F1 | 	add	local02, #1
18168     02 00 00 FF 
1816c     00 20 56 F2 | 	cmps	local02, ##1024 wc
18170     74 FF 9F CD |  if_b	jmp	#LR__1900
18174                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
18174     00 20 06 F6 | 	mov	local02, #0
18178     10 00 00 FF 
1817c     CC E4 05 F1 | 	add	objptr, ##8396
18180     97 6A 48 FB | 	callpa	#(@LR__1904-@LR__1901)>>2,fcache_load_ptr_
18184                 | LR__1901
18184     10 23 02 F6 | 	mov	local03, local02
18188     01 22 66 F0 | 	shl	local03, #1
1818c     F2 22 02 F1 | 	add	local03, objptr
18190     10 27 02 F6 | 	mov	local05, local02
18194     07 26 66 F0 | 	shl	local05, #7
18198     10 27 82 F1 | 	sub	local05, local02
1819c     C0 FF 7F FF 
181a0     00 25 06 F6 | 	mov	local04, ##-32512
181a4     13 25 02 F1 | 	add	local04, local05
181a8     11 25 52 FC | 	wrword	local04, local03
181ac     09 22 C6 F9 | 	decod	local03, #9
181b0     10 23 02 F1 | 	add	local03, local02
181b4     01 22 66 F0 | 	shl	local03, #1
181b8     F2 22 02 F1 | 	add	local03, objptr
181bc     10 25 02 F6 | 	mov	local04, local02
181c0     01 24 66 F0 | 	shl	local04, #1
181c4     F2 24 02 F1 | 	add	local04, objptr
181c8     12 25 E2 FA | 	rdword	local04, local04
181cc     0F 24 66 F7 | 	signx	local04, #15
181d0     12 25 62 F6 | 	neg	local04, local04
181d4     11 25 52 FC | 	wrword	local04, local03
181d8     01 20 06 F1 | 	add	local02, #1
181dc     01 00 00 FF 
181e0     00 20 56 F2 | 	cmps	local02, ##512 wc
181e4     9C FF 9F CD |  if_b	jmp	#LR__1901
181e8                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
181e8     00 20 06 F6 | 	mov	local02, #0
181ec     04 00 00 FF 
181f0     00 E4 05 F1 | 	add	objptr, ##2048
181f4                 | LR__1902
181f4     10 23 02 F6 | 	mov	local03, local02
181f8     01 22 66 F0 | 	shl	local03, #1
181fc     F2 22 02 F1 | 	add	local03, objptr
18200     10 27 02 F6 | 	mov	local05, local02
18204     06 26 66 F0 | 	shl	local05, #6
18208     10 27 82 F1 | 	sub	local05, local02
1820c     C1 FF 7F FF 
18210     00 24 06 F6 | 	mov	local04, ##-32256
18214     13 25 02 F1 | 	add	local04, local05
18218     11 25 52 FC | 	wrword	local04, local03
1821c     01 20 06 F1 | 	add	local02, #1
18220     02 00 00 FF 
18224     00 20 56 F2 | 	cmps	local02, ##1024 wc
18228     C8 FF 9F CD |  if_b	jmp	#LR__1902
1822c                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1822c     00 20 06 F6 | 	mov	local02, #0
18230     04 00 00 FF 
18234     00 E4 05 F1 | 	add	objptr, ##2048
18238                 | LR__1903
18238     10 23 02 F6 | 	mov	local03, local02
1823c     01 22 66 F0 | 	shl	local03, #1
18240     F2 22 02 F1 | 	add	local03, objptr
18244     40 00 80 FF 
18248     11 51 59 FC | 	wrword	##32936, local03
1824c     01 20 06 F1 | 	add	local02, #1
18250     80 20 56 F2 | 	cmps	local02, #128 wc
18254     E0 FF 9F CD |  if_b	jmp	#LR__1903
18258                 | LR__1904
18258     80 20 06 F6 | 	mov	local02, #128
1825c     97 68 48 FB | 	callpa	#(@LR__1910-@LR__1905)>>2,fcache_load_ptr_
18260                 | LR__1905
18260     10 23 02 F6 | 	mov	local03, local02
18264     01 22 66 F0 | 	shl	local03, #1
18268     F2 22 02 F1 | 	add	local03, objptr
1826c     3F 00 80 FF 
18270     11 B1 5A FC | 	wrword	##32600, local03
18274     01 20 06 F1 | 	add	local02, #1
18278     02 00 00 FF 
1827c     00 20 16 F2 | 	cmp	local02, ##1024 wc
18280     DC FF 9F CD |  if_b	jmp	#LR__1905
18284                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
18284     00 20 06 F6 | 	mov	local02, #0
18288     04 00 00 FF 
1828c     00 E4 05 F1 | 	add	objptr, ##2048
18290                 | LR__1906
18290     10 23 02 F6 | 	mov	local03, local02
18294     01 22 66 F0 | 	shl	local03, #1
18298     F2 22 02 F1 | 	add	local03, objptr
1829c     40 00 80 FF 
182a0     11 51 59 FC | 	wrword	##32936, local03
182a4     01 20 06 F1 | 	add	local02, #1
182a8     01 00 00 FF 
182ac     00 20 56 F2 | 	cmps	local02, ##512 wc
182b0     DC FF 9F CD |  if_b	jmp	#LR__1906
182b4     09 20 C6 F9 | 	decod	local02, #9
182b8                 | LR__1907
182b8     10 23 02 F6 | 	mov	local03, local02
182bc     01 22 66 F0 | 	shl	local03, #1
182c0     F2 22 02 F1 | 	add	local03, objptr
182c4     3F 00 80 FF 
182c8     11 B1 5A FC | 	wrword	##32600, local03
182cc     01 20 06 F1 | 	add	local02, #1
182d0     02 00 00 FF 
182d4     00 20 16 F2 | 	cmp	local02, ##1024 wc
182d8     DC FF 9F CD |  if_b	jmp	#LR__1907
182dc                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
182dc     00 20 06 F6 | 	mov	local02, #0
182e0     04 00 00 FF 
182e4     00 E4 05 F1 | 	add	objptr, ##2048
182e8                 | LR__1908
182e8     10 23 02 F6 | 	mov	local03, local02
182ec     01 22 66 F0 | 	shl	local03, #1
182f0     F2 22 02 F1 | 	add	local03, objptr
182f4     40 00 80 FF 
182f8     11 51 59 FC | 	wrword	##32936, local03
182fc     01 20 06 F1 | 	add	local02, #1
18300     00 21 56 F2 | 	cmps	local02, #256 wc
18304     E0 FF 9F CD |  if_b	jmp	#LR__1908
18308     00 21 06 F6 | 	mov	local02, #256
1830c                 | LR__1909
1830c     10 23 02 F6 | 	mov	local03, local02
18310     01 22 66 F0 | 	shl	local03, #1
18314     F2 22 02 F1 | 	add	local03, objptr
18318     3F 00 80 FF 
1831c     11 B1 5A FC | 	wrword	##32600, local03
18320     01 20 06 F1 | 	add	local02, #1
18324     02 00 00 FF 
18328     00 20 16 F2 | 	cmp	local02, ##1024 wc
1832c     DC FF 9F CD |  if_b	jmp	#LR__1909
18330                 | LR__1910
18330                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
18330     00 20 06 F6 | 	mov	local02, #0
18334     04 00 00 FF 
18338     00 E4 05 F1 | 	add	objptr, ##2048
1833c     14 00 00 FF 
18340     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
18344     97 1C 48 FB | 	callpa	#(@LR__1912-@LR__1911)>>2,fcache_load_ptr_
18348                 | LR__1911
18348     10 23 02 F6 | 	mov	local03, local02
1834c     01 22 66 F0 | 	shl	local03, #1
18350     F2 22 02 F1 | 	add	local03, objptr
18354     F5 12 02 F6 | 	mov	arg01, ptr__dat__
18358     10 12 06 F1 | 	add	arg01, #16
1835c     10 FB 01 F6 | 	mov	result1, local02
18360     01 FA 65 F0 | 	shl	result1, #1
18364     FD 12 02 F1 | 	add	arg01, result1
18368     09 FB E1 FA | 	rdword	result1, arg01
1836c     11 FB 51 FC | 	wrword	result1, local03
18370     01 20 06 F1 | 	add	local02, #1
18374     02 00 00 FF 
18378     00 20 56 F2 | 	cmps	local02, ##1024 wc
1837c     C8 FF 9F CD |  if_b	jmp	#LR__1911
18380                 | LR__1912
18380                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
18380     00 20 06 F6 | 	mov	local02, #0
18384     04 00 00 FF 
18388     00 E4 05 F1 | 	add	objptr, ##2048
1838c     04 00 00 FF 
18390     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
18394     97 1C 48 FB | 	callpa	#(@LR__1914-@LR__1913)>>2,fcache_load_ptr_
18398                 | LR__1913
18398     10 23 02 F6 | 	mov	local03, local02
1839c     01 22 66 F0 | 	shl	local03, #1
183a0     F2 22 02 F1 | 	add	local03, objptr
183a4     F5 12 02 F6 | 	mov	arg01, ptr__dat__
183a8     10 12 06 F1 | 	add	arg01, #16
183ac     10 FB 01 F6 | 	mov	result1, local02
183b0     01 FA 65 F0 | 	shl	result1, #1
183b4     FD 12 02 F1 | 	add	arg01, result1
183b8     09 FB E1 FA | 	rdword	result1, arg01
183bc     11 FB 51 FC | 	wrword	result1, local03
183c0     01 20 06 F1 | 	add	local02, #1
183c4     02 00 00 FF 
183c8     00 20 56 F2 | 	cmps	local02, ##1024 wc
183cc     C8 FF 9F CD |  if_b	jmp	#LR__1913
183d0                 | LR__1914
183d0     10 00 00 FF 
183d4     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
183d8                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
183d8     00 20 06 F6 | 	mov	local02, #0
183dc     04 00 00 FF 
183e0     00 E4 05 F1 | 	add	objptr, ##2048
183e4     97 18 48 FB | 	callpa	#(@LR__1916-@LR__1915)>>2,fcache_load_ptr_
183e8                 | LR__1915
183e8     10 23 02 F6 | 	mov	local03, local02
183ec     01 22 66 F0 | 	shl	local03, #1
183f0     F2 22 02 F1 | 	add	local03, objptr
183f4     10 27 02 F6 | 	mov	local05, local02
183f8     08 26 66 F0 | 	shl	local05, #8
183fc     7F 00 00 FF 
18400     00 25 06 F6 | 	mov	local04, ##65280
18404     13 25 82 F1 | 	sub	local04, local05
18408     11 25 52 FC | 	wrword	local04, local03
1840c     01 20 06 F1 | 	add	local02, #1
18410     00 21 56 F2 | 	cmps	local02, #256 wc
18414     D0 FF 9F CD |  if_b	jmp	#LR__1915
18418                 | LR__1916
18418     2C 00 00 FF 
1841c     CC E4 85 F1 | 	sub	objptr, ##22732
18420                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
18420     00 20 06 F6 | 	mov	local02, #0
18424                 | LR__1917
18424     10 23 02 F6 | 	mov	local03, local02
18428     01 22 66 F0 | 	shl	local03, #1
1842c     2D 00 00 FF 
18430     CC E4 05 F1 | 	add	objptr, ##23244
18434     F2 22 02 F1 | 	add	local03, objptr
18438     80 BF 23 FF 
1843c     00 12 06 F6 | 	mov	arg01, ##1199505408
18440     0F 15 02 F6 | 	mov	arg02, local01
18444     2D 00 00 FF 
18448     CC E4 85 F1 | 	sub	objptr, ##23244
1844c     78 6B B0 FD | 	call	#__system___float_mul
18450     FD 12 02 F6 | 	mov	arg01, result1
18454     01 14 06 F6 | 	mov	arg02, #1
18458     34 70 B0 FD | 	call	#__system___float_tointeger
1845c     11 FB 51 FC | 	wrword	result1, local03
18460     0F 13 02 F6 | 	mov	arg01, local01
18464     CC BC 1F FF 
18468     9A 15 06 F6 | 	mov	arg02, ##1064933786
1846c     58 6B B0 FD | 	call	#__system___float_mul
18470     FD 1E 02 F6 | 	mov	local01, result1
18474     01 20 06 F1 | 	add	local02, #1
18478     00 21 56 F2 | 	cmps	local02, #256 wc
1847c     A4 FF 9F CD |  if_b	jmp	#LR__1917
18480     2E 00 00 FF 
18484     CA E4 05 F1 | 	add	objptr, ##23754
18488     F2 00 58 FC | 	wrword	#0, objptr
1848c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1848c     00 20 06 F6 | 	mov	local02, #0
18490     02 E4 05 F1 | 	add	objptr, #2
18494     97 10 48 FB | 	callpa	#(@LR__1919-@LR__1918)>>2,fcache_load_ptr_
18498                 | LR__1918
18498     10 23 02 F6 | 	mov	local03, local02
1849c     01 22 66 F0 | 	shl	local03, #1
184a0     F2 22 02 F1 | 	add	local03, objptr
184a4     7F 00 80 FF 
184a8     11 01 5A FC | 	wrword	##65280, local03
184ac     01 20 06 F1 | 	add	local02, #1
184b0     FF 20 56 F2 | 	cmps	local02, #255 wc
184b4     E0 FF 9F CD |  if_b	jmp	#LR__1918
184b8                 | LR__1919
184b8     FE E5 05 F1 | 	add	objptr, #510
184bc     F2 00 58 FC | 	wrword	#0, objptr
184c0                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
184c0     00 20 06 F6 | 	mov	local02, #0
184c4     02 E4 05 F1 | 	add	objptr, #2
184c8     97 52 48 FB | 	callpa	#(@LR__1924-@LR__1920)>>2,fcache_load_ptr_
184cc                 | LR__1920
184cc     10 23 02 F6 | 	mov	local03, local02
184d0     01 22 66 F0 | 	shl	local03, #1
184d4     F2 22 02 F1 | 	add	local03, objptr
184d8     10 25 02 F6 | 	mov	local04, local02
184dc     0C 24 66 F0 | 	shl	local04, #12
184e0     11 25 52 FC | 	wrword	local04, local03
184e4     01 20 06 F1 | 	add	local02, #1
184e8     10 20 56 F2 | 	cmps	local02, #16 wc
184ec     DC FF 9F CD |  if_b	jmp	#LR__1920
184f0                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
184f0     10 20 06 F6 | 	mov	local02, #16
184f4                 | LR__1921
184f4     10 23 02 F6 | 	mov	local03, local02
184f8     01 22 66 F0 | 	shl	local03, #1
184fc     F2 22 02 F1 | 	add	local03, objptr
18500     7F 00 80 FF 
18504     11 01 5A FC | 	wrword	##65280, local03
18508     01 20 06 F1 | 	add	local02, #1
1850c     F0 20 16 F2 | 	cmp	local02, #240 wc
18510     E0 FF 9F CD |  if_b	jmp	#LR__1921
18514                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
18514     F0 20 06 F6 | 	mov	local02, #240
18518                 | LR__1922
18518     10 23 02 F6 | 	mov	local03, local02
1851c     01 22 66 F0 | 	shl	local03, #1
18520     F2 22 02 F1 | 	add	local03, objptr
18524     FF 26 06 F6 | 	mov	local05, #255
18528     10 27 82 F1 | 	sub	local05, local02
1852c     0C 26 66 F0 | 	shl	local05, #12
18530     11 27 52 FC | 	wrword	local05, local03
18534     01 20 06 F1 | 	add	local02, #1
18538     00 21 16 F2 | 	cmp	local02, #256 wc
1853c     D8 FF 9F CD |  if_b	jmp	#LR__1922
18540                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
18540     00 20 06 F6 | 	mov	local02, #0
18544     01 00 00 FF 
18548     00 E4 05 F1 | 	add	objptr, ##512
1854c                 | LR__1923
1854c     10 23 02 F6 | 	mov	local03, local02
18550     01 22 66 F0 | 	shl	local03, #1
18554     F2 22 02 F1 | 	add	local03, objptr
18558     10 25 02 F6 | 	mov	local04, local02
1855c     08 24 66 F0 | 	shl	local04, #8
18560     11 25 52 FC | 	wrword	local04, local03
18564     01 20 06 F1 | 	add	local02, #1
18568     00 21 56 F2 | 	cmps	local02, #256 wc
1856c     DC FF 9F CD |  if_b	jmp	#LR__1923
18570                 | LR__1924
18570     FE E5 05 F1 | 	add	objptr, #510
18574     F2 00 58 FC | 	wrword	#0, objptr
18578                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
18578     00 20 06 F6 | 	mov	local02, #0
1857c     02 E4 05 F1 | 	add	objptr, #2
18580     97 6A 48 FB | 	callpa	#(@LR__1929-@LR__1925)>>2,fcache_load_ptr_
18584                 | LR__1925
18584     10 23 02 F6 | 	mov	local03, local02
18588     01 22 66 F0 | 	shl	local03, #1
1858c     F2 22 02 F1 | 	add	local03, objptr
18590     10 25 02 F6 | 	mov	local04, local02
18594     04 24 66 F0 | 	shl	local04, #4
18598     10 25 02 F1 | 	add	local04, local02
1859c     04 24 66 F0 | 	shl	local04, #4
185a0     11 25 52 FC | 	wrword	local04, local03
185a4     01 20 06 F1 | 	add	local02, #1
185a8     F0 20 56 F2 | 	cmps	local02, #240 wc
185ac     D4 FF 9F CD |  if_b	jmp	#LR__1925
185b0     F0 20 06 F6 | 	mov	local02, #240
185b4                 | LR__1926
185b4     10 23 02 F6 | 	mov	local03, local02
185b8     01 22 66 F0 | 	shl	local03, #1
185bc     F2 22 02 F1 | 	add	local03, objptr
185c0     FF 26 06 F6 | 	mov	local05, #255
185c4     10 27 82 F1 | 	sub	local05, local02
185c8     0C 26 66 F0 | 	shl	local05, #12
185cc     11 27 52 FC | 	wrword	local05, local03
185d0     01 20 06 F1 | 	add	local02, #1
185d4     00 21 16 F2 | 	cmp	local02, #256 wc
185d8     D8 FF 9F CD |  if_b	jmp	#LR__1926
185dc                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
185dc     00 20 06 F6 | 	mov	local02, #0
185e0     01 00 00 FF 
185e4     00 E4 05 F1 | 	add	objptr, ##512
185e8                 | LR__1927
185e8     10 23 02 F6 | 	mov	local03, local02
185ec     01 22 66 F0 | 	shl	local03, #1
185f0     F2 22 02 F1 | 	add	local03, objptr
185f4     10 25 02 F6 | 	mov	local04, local02
185f8     09 24 66 F0 | 	shl	local04, #9
185fc     11 25 52 FC | 	wrword	local04, local03
18600     FF 22 06 F6 | 	mov	local03, #255
18604     10 23 82 F1 | 	sub	local03, local02
18608     01 22 66 F0 | 	shl	local03, #1
1860c     F2 22 02 F1 | 	add	local03, objptr
18610     10 25 02 F6 | 	mov	local04, local02
18614     09 24 66 F0 | 	shl	local04, #9
18618     11 25 52 FC | 	wrword	local04, local03
1861c     01 20 06 F1 | 	add	local02, #1
18620     80 20 56 F2 | 	cmps	local02, #128 wc
18624     C0 FF 9F CD |  if_b	jmp	#LR__1927
18628                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
18628     00 20 06 F6 | 	mov	local02, #0
1862c     01 00 00 FF 
18630     00 E4 05 F1 | 	add	objptr, ##512
18634                 | LR__1928
18634     10 23 02 F6 | 	mov	local03, local02
18638     01 22 66 F0 | 	shl	local03, #1
1863c     F2 22 02 F1 | 	add	local03, objptr
18640     10 25 02 F6 | 	mov	local04, local02
18644     0D 24 66 F0 | 	shl	local04, #13
18648     11 25 52 FC | 	wrword	local04, local03
1864c     01 20 06 F1 | 	add	local02, #1
18650     08 20 56 F2 | 	cmps	local02, #8 wc
18654     DC FF 9F CD |  if_b	jmp	#LR__1928
18658                 | LR__1929
18658                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
18658     08 20 06 F6 | 	mov	local02, #8
1865c     97 42 48 FB | 	callpa	#(@LR__1933-@LR__1930)>>2,fcache_load_ptr_
18660                 | LR__1930
18660     10 23 02 F6 | 	mov	local03, local02
18664     01 22 66 F0 | 	shl	local03, #1
18668     F2 22 02 F1 | 	add	local03, objptr
1866c     10 1F 02 F6 | 	mov	local01, local02
18670     08 1E 86 F1 | 	sub	local01, #8
18674     0B 1E 66 F0 | 	shl	local01, #11
18678     7F 00 00 FF 
1867c     00 25 06 F6 | 	mov	local04, ##65280
18680     0F 25 82 F1 | 	sub	local04, local01
18684     11 25 52 FC | 	wrword	local04, local03
18688     01 20 06 F1 | 	add	local02, #1
1868c     18 20 16 F2 | 	cmp	local02, #24 wc
18690     CC FF 9F CD |  if_b	jmp	#LR__1930
18694                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
18694     18 20 06 F6 | 	mov	local02, #24
18698                 | LR__1931
18698     10 23 02 F6 | 	mov	local03, local02
1869c     01 22 66 F0 | 	shl	local03, #1
186a0     F2 22 02 F1 | 	add	local03, objptr
186a4     40 00 80 FF 
186a8     11 01 58 FC | 	wrword	##32768, local03
186ac     01 20 06 F1 | 	add	local02, #1
186b0     81 20 16 F2 | 	cmp	local02, #129 wc
186b4     E0 FF 9F CD |  if_b	jmp	#LR__1931
186b8                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
186b8     81 20 06 F6 | 	mov	local02, #129
186bc                 | LR__1932
186bc     10 23 02 F6 | 	mov	local03, local02
186c0     01 22 66 F0 | 	shl	local03, #1
186c4     F2 22 02 F1 | 	add	local03, objptr
186c8     FF 26 06 F6 | 	mov	local05, #255
186cc     10 27 82 F1 | 	sub	local05, local02
186d0     08 26 66 F0 | 	shl	local05, #8
186d4     11 27 52 FC | 	wrword	local05, local03
186d8     01 20 06 F1 | 	add	local02, #1
186dc     00 21 16 F2 | 	cmp	local02, #256 wc
186e0     D8 FF 9F CD |  if_b	jmp	#LR__1932
186e4                 | LR__1933
186e4     47 00 00 FF 
186e8     BA E5 05 F1 | 	add	objptr, ##36794
186ec     F2 00 59 FC | 	wrword	#128, objptr
186f0     7B 00 00 FF 
186f4     86 E4 85 F1 | 	sub	objptr, ##63110
186f8                 | ' for i=0 to 7
186f8     00 20 06 F6 | 	mov	local02, #0
186fc     97 8E 48 FB | 	callpa	#(@LR__1935-@LR__1934)>>2,fcache_load_ptr_
18700                 | LR__1934
18700     10 23 02 F6 | 	mov	local03, local02
18704     01 22 66 F0 | 	shl	local03, #1
18708     10 23 02 F1 | 	add	local03, local02
1870c     03 22 66 F0 | 	shl	local03, #3
18710     34 00 00 FF 
18714     2C E5 05 F1 | 	add	objptr, ##26924
18718     F2 22 02 F1 | 	add	local03, objptr
1871c     00 EE A1 FF 
18720     11 01 68 FC | 	wrlong	##1138491392, local03
18724     10 23 02 F6 | 	mov	local03, local02
18728     01 22 66 F0 | 	shl	local03, #1
1872c     10 23 02 F1 | 	add	local03, local02
18730     03 22 66 F0 | 	shl	local03, #3
18734     F2 22 02 F1 | 	add	local03, objptr
18738     04 22 06 F1 | 	add	local03, #4
1873c     11 21 42 FC | 	wrbyte	local02, local03
18740     10 23 02 F6 | 	mov	local03, local02
18744     01 22 66 F0 | 	shl	local03, #1
18748     10 23 02 F1 | 	add	local03, local02
1874c     03 22 66 F0 | 	shl	local03, #3
18750     F2 22 02 F1 | 	add	local03, objptr
18754     05 22 06 F1 | 	add	local03, #5
18758     11 21 42 FC | 	wrbyte	local02, local03
1875c     10 23 02 F6 | 	mov	local03, local02
18760     01 22 66 F0 | 	shl	local03, #1
18764     10 23 02 F1 | 	add	local03, local02
18768     03 22 66 F0 | 	shl	local03, #3
1876c     F2 22 02 F1 | 	add	local03, objptr
18770     06 22 06 F1 | 	add	local03, #6
18774     11 01 58 FC | 	wrword	#0, local03
18778     10 23 02 F6 | 	mov	local03, local02
1877c     01 22 66 F0 | 	shl	local03, #1
18780     10 23 02 F1 | 	add	local03, local02
18784     03 22 66 F0 | 	shl	local03, #3
18788     F2 22 02 F1 | 	add	local03, objptr
1878c     08 22 06 F1 | 	add	local03, #8
18790     00 C0 9F FF 
18794     11 01 68 FC | 	wrlong	##1065353216, local03
18798     10 23 02 F6 | 	mov	local03, local02
1879c     01 22 66 F0 | 	shl	local03, #1
187a0     10 23 02 F1 | 	add	local03, local02
187a4     03 22 66 F0 | 	shl	local03, #3
187a8     F2 22 02 F1 | 	add	local03, objptr
187ac     0C 22 06 F1 | 	add	local03, #12
187b0     00 40 A0 FF 
187b4     11 01 68 FC | 	wrlong	##1082130432, local03
187b8     10 23 02 F6 | 	mov	local03, local02
187bc     01 22 66 F0 | 	shl	local03, #1
187c0     10 23 02 F1 | 	add	local03, local02
187c4     03 22 66 F0 | 	shl	local03, #3
187c8     F2 22 02 F1 | 	add	local03, objptr
187cc     10 22 06 F1 | 	add	local03, #16
187d0     11 01 68 FC | 	wrlong	#0, local03
187d4     10 23 02 F6 | 	mov	local03, local02
187d8     01 22 66 F0 | 	shl	local03, #1
187dc     10 23 02 F1 | 	add	local03, local02
187e0     03 22 66 F0 | 	shl	local03, #3
187e4     F2 22 02 F1 | 	add	local03, objptr
187e8     14 22 06 F1 | 	add	local03, #20
187ec     11 FF 59 FC | 	wrword	#255, local03
187f0     10 23 02 F6 | 	mov	local03, local02
187f4     01 22 66 F0 | 	shl	local03, #1
187f8     46 00 00 FF 
187fc     4C E5 05 F1 | 	add	objptr, ##36172
18800     F2 22 02 F1 | 	add	local03, objptr
18804     11 FF 59 FC | 	wrword	#255, local03
18808     01 20 06 F1 | 	add	local02, #1
1880c     08 20 56 F2 | 	cmps	local02, #8 wc
18810     7B 00 00 FF 
18814     78 E4 85 F1 | 	sub	objptr, ##63096
18818     E4 FE 9F CD |  if_b	jmp	#LR__1934
1881c                 | LR__1935
1881c     00 6E 20 FF 
18820     00 1E 06 F6 | 	mov	local01, ##1088159744
18824                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
18824     03 26 06 F6 | 	mov	local05, #3
18828                 | LR__1936
18828     0F 13 02 F6 | 	mov	arg01, local01
1882c     CE C3 1F FF 
18830     7D 14 06 F6 | 	mov	arg02, ##1065852029
18834     90 67 B0 FD | 	call	#__system___float_mul
18838     FD 1E 02 F6 | 	mov	local01, result1
1883c     FA 27 6E FB | 	djnz	local05, #LR__1936
18840     00 20 06 F6 | 	mov	local02, #0
18844                 | LR__1937
18844     10 27 02 F6 | 	mov	local05, local02
18848     02 26 66 F0 | 	shl	local05, #2
1884c     34 00 00 FF 
18850     CC E4 05 F1 | 	add	objptr, ##26828
18854     F2 26 02 F1 | 	add	local05, objptr
18858     13 1F 62 FC | 	wrlong	local01, local05
1885c     0F 13 02 F6 | 	mov	arg01, local01
18860     CE C3 1F FF 
18864     7D 14 06 F6 | 	mov	arg02, ##1065852029
18868     34 00 00 FF 
1886c     CC E4 85 F1 | 	sub	objptr, ##26828
18870     54 67 B0 FD | 	call	#__system___float_mul
18874     FD 1E 02 F6 | 	mov	local01, result1
18878     01 20 06 F1 | 	add	local02, #1
1887c     0C 20 56 F2 | 	cmps	local02, #12 wc
18880     C0 FF 9F CD |  if_b	jmp	#LR__1937
18884     7B 00 00 FF 
18888     86 E4 05 F1 | 	add	objptr, ##63110
1888c     F2 00 59 FC | 	wrword	#128, objptr
18890     02 E4 85 F1 | 	sub	objptr, #2
18894     F2 00 59 FC | 	wrword	#128, objptr
18898     7B 00 00 FF 
1889c     84 E4 85 F1 | 	sub	objptr, ##63108
188a0     A7 F0 03 F6 | 	mov	ptra, fp
188a4     B2 00 A0 FD | 	call	#popregs_
188a8                 | _init_audio_ret
188a8     2D 00 64 FD | 	ret
188ac                 | 
188ac                 | ' 
188ac                 | ' 
188ac                 | ' function getnoteval(token) as single
188ac                 | _getnoteval
188ac     02 4A 05 F6 | 	mov	COUNT_, #2
188b0     A8 00 A0 FD | 	call	#pushregs_
188b4     01 00 00 FF 
188b8     00 13 86 F1 | 	sub	arg01, ##768
188bc     09 15 52 F6 | 	abs	arg02, arg01 wc
188c0     0C 14 16 FD | 	qdiv	arg02, #12
188c4     34 00 00 FF 
188c8     CC E4 05 F1 | 	add	objptr, ##26828
188cc     19 14 62 FD | 	getqy	arg02
188d0     0A 15 82 F6 | 	negc	arg02, arg02
188d4     02 14 66 F0 | 	shl	arg02, #2
188d8     F2 14 02 F1 | 	add	arg02, objptr
188dc     0A 1F 02 FB | 	rdlong	local01, arg02
188e0     09 15 52 F6 | 	abs	arg02, arg01 wc
188e4     0C 14 16 FD | 	qdiv	arg02, #12
188e8     34 00 00 FF 
188ec     CC E4 85 F1 | 	sub	objptr, ##26828
188f0     01 12 06 F6 | 	mov	arg01, #1
188f4                 | ' noteexp=1+(note/12) 
188f4                 | ' return (2.0^noteexp)*notebase
188f4     18 14 62 FD | 	getqx	arg02
188f8     0A 13 82 F3 | 	sumc	arg01, arg02
188fc     09 13 52 F6 | 	abs	arg01, arg01 wc
18900     1F 20 C6 C9 |  if_b	decod	local02, #31
18904     00 20 06 36 |  if_ae	mov	local02, #0
18908     B8 62 B0 FD | 	call	#__system___float_fromuns
1890c     10 FB 61 F5 | 	xor	result1, local02
18910     FD 14 02 F6 | 	mov	arg02, result1
18914     1E 12 C6 F9 | 	decod	arg01, #30
18918     90 75 B0 FD | 	call	#__system____builtin_powf
1891c     FD 12 02 F6 | 	mov	arg01, result1
18920     0F 15 02 F6 | 	mov	arg02, local01
18924     A0 66 B0 FD | 	call	#__system___float_mul
18928     A7 F0 03 F6 | 	mov	ptra, fp
1892c     B2 00 A0 FD | 	call	#popregs_
18930                 | _getnoteval_ret
18930     2D 00 64 FD | 	ret
18934                 | 
18934                 | ' 
18934                 | ' 
18934                 | ' 
18934                 | ' sub init_error_strings
18934                 | _init_error_strings
18934     60 01 00 FF 
18938     37 01 06 F6 | 	mov	_var01, ##@LR__4964
1893c     65 00 00 FF 
18940     60 E4 05 F1 | 	add	objptr, ##51808
18944     F2 00 62 FC | 	wrlong	_var01, objptr
18948     60 01 00 FF 
1894c     38 01 06 F6 | 	mov	_var01, ##@LR__4965
18950     04 E4 05 F1 | 	add	objptr, #4
18954     F2 00 62 FC | 	wrlong	_var01, objptr
18958     60 01 00 FF 
1895c     5D 01 06 F6 | 	mov	_var01, ##@LR__4966
18960     04 E4 05 F1 | 	add	objptr, #4
18964     F2 00 62 FC | 	wrlong	_var01, objptr
18968     60 01 00 FF 
1896c     7E 01 06 F6 | 	mov	_var01, ##@LR__4967
18970     04 E4 05 F1 | 	add	objptr, #4
18974     F2 00 62 FC | 	wrlong	_var01, objptr
18978     60 01 00 FF 
1897c     98 01 06 F6 | 	mov	_var01, ##@LR__4968
18980     04 E4 05 F1 | 	add	objptr, #4
18984     F2 00 62 FC | 	wrlong	_var01, objptr
18988     60 01 00 FF 
1898c     B4 01 06 F6 | 	mov	_var01, ##@LR__4969
18990     04 E4 05 F1 | 	add	objptr, #4
18994     F2 00 62 FC | 	wrlong	_var01, objptr
18998     60 01 00 FF 
1899c     D6 01 06 F6 | 	mov	_var01, ##@LR__4970
189a0     04 E4 05 F1 | 	add	objptr, #4
189a4     F2 00 62 FC | 	wrlong	_var01, objptr
189a8     61 01 00 FF 
189ac     04 00 06 F6 | 	mov	_var01, ##@LR__4971
189b0     04 E4 05 F1 | 	add	objptr, #4
189b4     F2 00 62 FC | 	wrlong	_var01, objptr
189b8     61 01 00 FF 
189bc     2F 00 06 F6 | 	mov	_var01, ##@LR__4972
189c0     04 E4 05 F1 | 	add	objptr, #4
189c4     F2 00 62 FC | 	wrlong	_var01, objptr
189c8     61 01 00 FF 
189cc     48 00 06 F6 | 	mov	_var01, ##@LR__4973
189d0     04 E4 05 F1 | 	add	objptr, #4
189d4     F2 00 62 FC | 	wrlong	_var01, objptr
189d8     61 01 00 FF 
189dc     69 00 06 F6 | 	mov	_var01, ##@LR__4974
189e0     04 E4 05 F1 | 	add	objptr, #4
189e4     F2 00 62 FC | 	wrlong	_var01, objptr
189e8     61 01 00 FF 
189ec     80 00 06 F6 | 	mov	_var01, ##@LR__4975
189f0     04 E4 05 F1 | 	add	objptr, #4
189f4     F2 00 62 FC | 	wrlong	_var01, objptr
189f8     61 01 00 FF 
189fc     9E 00 06 F6 | 	mov	_var01, ##@LR__4976
18a00     04 E4 05 F1 | 	add	objptr, #4
18a04     F2 00 62 FC | 	wrlong	_var01, objptr
18a08     61 01 00 FF 
18a0c     C2 00 06 F6 | 	mov	_var01, ##@LR__4977
18a10     04 E4 05 F1 | 	add	objptr, #4
18a14     F2 00 62 FC | 	wrlong	_var01, objptr
18a18     61 01 00 FF 
18a1c     E9 00 06 F6 | 	mov	_var01, ##@LR__4978
18a20     04 E4 05 F1 | 	add	objptr, #4
18a24     F2 00 62 FC | 	wrlong	_var01, objptr
18a28     61 01 00 FF 
18a2c     05 01 06 F6 | 	mov	_var01, ##@LR__4979
18a30     04 E4 05 F1 | 	add	objptr, #4
18a34     F2 00 62 FC | 	wrlong	_var01, objptr
18a38     61 01 00 FF 
18a3c     16 01 06 F6 | 	mov	_var01, ##@LR__4980
18a40     04 E4 05 F1 | 	add	objptr, #4
18a44     F2 00 62 FC | 	wrlong	_var01, objptr
18a48     61 01 00 FF 
18a4c     26 01 06 F6 | 	mov	_var01, ##@LR__4981
18a50     04 E4 05 F1 | 	add	objptr, #4
18a54     F2 00 62 FC | 	wrlong	_var01, objptr
18a58     61 01 00 FF 
18a5c     41 01 06 F6 | 	mov	_var01, ##@LR__4982
18a60     04 E4 05 F1 | 	add	objptr, #4
18a64     F2 00 62 FC | 	wrlong	_var01, objptr
18a68     61 01 00 FF 
18a6c     53 01 06 F6 | 	mov	_var01, ##@LR__4983
18a70     04 E4 05 F1 | 	add	objptr, #4
18a74     F2 00 62 FC | 	wrlong	_var01, objptr
18a78     61 01 00 FF 
18a7c     6B 01 06 F6 | 	mov	_var01, ##@LR__4984
18a80     04 E4 05 F1 | 	add	objptr, #4
18a84     F2 00 62 FC | 	wrlong	_var01, objptr
18a88     61 01 00 FF 
18a8c     7F 01 06 F6 | 	mov	_var01, ##@LR__4985
18a90     04 E4 05 F1 | 	add	objptr, #4
18a94     F2 00 62 FC | 	wrlong	_var01, objptr
18a98     61 01 00 FF 
18a9c     8F 01 06 F6 | 	mov	_var01, ##@LR__4986
18aa0     04 E4 05 F1 | 	add	objptr, #4
18aa4     F2 00 62 FC | 	wrlong	_var01, objptr
18aa8     61 01 00 FF 
18aac     AC 01 06 F6 | 	mov	_var01, ##@LR__4987
18ab0     04 E4 05 F1 | 	add	objptr, #4
18ab4     F2 00 62 FC | 	wrlong	_var01, objptr
18ab8     61 01 00 FF 
18abc     BD 01 06 F6 | 	mov	_var01, ##@LR__4988
18ac0     04 E4 05 F1 | 	add	objptr, #4
18ac4     F2 00 62 FC | 	wrlong	_var01, objptr
18ac8     61 01 00 FF 
18acc     CE 01 06 F6 | 	mov	_var01, ##@LR__4989
18ad0     04 E4 05 F1 | 	add	objptr, #4
18ad4     F2 00 62 FC | 	wrlong	_var01, objptr
18ad8     61 01 00 FF 
18adc     F9 01 06 F6 | 	mov	_var01, ##@LR__4990
18ae0     04 E4 05 F1 | 	add	objptr, #4
18ae4     F2 00 62 FC | 	wrlong	_var01, objptr
18ae8     62 01 00 FF 
18aec     15 00 06 F6 | 	mov	_var01, ##@LR__4991
18af0     04 E4 05 F1 | 	add	objptr, #4
18af4     F2 00 62 FC | 	wrlong	_var01, objptr
18af8     62 01 00 FF 
18afc     2B 00 06 F6 | 	mov	_var01, ##@LR__4992
18b00     04 E4 05 F1 | 	add	objptr, #4
18b04     F2 00 62 FC | 	wrlong	_var01, objptr
18b08     62 01 00 FF 
18b0c     38 00 06 F6 | 	mov	_var01, ##@LR__4993
18b10     04 E4 05 F1 | 	add	objptr, #4
18b14     F2 00 62 FC | 	wrlong	_var01, objptr
18b18     62 01 00 FF 
18b1c     4A 00 06 F6 | 	mov	_var01, ##@LR__4994
18b20     04 E4 05 F1 | 	add	objptr, #4
18b24     F2 00 62 FC | 	wrlong	_var01, objptr
18b28     62 01 00 FF 
18b2c     5B 00 06 F6 | 	mov	_var01, ##@LR__4995
18b30     04 E4 05 F1 | 	add	objptr, #4
18b34     F2 00 62 FC | 	wrlong	_var01, objptr
18b38     62 01 00 FF 
18b3c     77 00 06 F6 | 	mov	_var01, ##@LR__4996
18b40     04 E4 05 F1 | 	add	objptr, #4
18b44     F2 00 62 FC | 	wrlong	_var01, objptr
18b48     62 01 00 FF 
18b4c     88 00 06 F6 | 	mov	_var01, ##@LR__4997
18b50     04 E4 05 F1 | 	add	objptr, #4
18b54     F2 00 62 FC | 	wrlong	_var01, objptr
18b58     62 01 00 FF 
18b5c     97 00 06 F6 | 	mov	_var01, ##@LR__4998
18b60     04 E4 05 F1 | 	add	objptr, #4
18b64     F2 00 62 FC | 	wrlong	_var01, objptr
18b68     62 01 00 FF 
18b6c     B2 00 06 F6 | 	mov	_var01, ##@LR__4999
18b70     04 E4 05 F1 | 	add	objptr, #4
18b74     F2 00 62 FC | 	wrlong	_var01, objptr
18b78     62 01 00 FF 
18b7c     E6 00 06 F6 | 	mov	_var01, ##@LR__5000
18b80     04 E4 05 F1 | 	add	objptr, #4
18b84     F2 00 62 FC | 	wrlong	_var01, objptr
18b88     62 01 00 FF 
18b8c     FF 00 06 F6 | 	mov	_var01, ##@LR__5001
18b90     04 E4 05 F1 | 	add	objptr, #4
18b94     F2 00 62 FC | 	wrlong	_var01, objptr
18b98     62 01 00 FF 
18b9c     1B 01 06 F6 | 	mov	_var01, ##@LR__5002
18ba0     04 E4 05 F1 | 	add	objptr, #4
18ba4     F2 00 62 FC | 	wrlong	_var01, objptr
18ba8     62 01 00 FF 
18bac     39 01 06 F6 | 	mov	_var01, ##@LR__5003
18bb0     04 E4 05 F1 | 	add	objptr, #4
18bb4     F2 00 62 FC | 	wrlong	_var01, objptr
18bb8     62 01 00 FF 
18bbc     52 01 06 F6 | 	mov	_var01, ##@LR__5004
18bc0     04 E4 05 F1 | 	add	objptr, #4
18bc4     F2 00 62 FC | 	wrlong	_var01, objptr
18bc8     62 01 00 FF 
18bcc     71 01 06 F6 | 	mov	_var01, ##@LR__5005
18bd0     04 E4 05 F1 | 	add	objptr, #4
18bd4     F2 00 62 FC | 	wrlong	_var01, objptr
18bd8     62 01 00 FF 
18bdc     80 01 06 F6 | 	mov	_var01, ##@LR__5006
18be0     04 E4 05 F1 | 	add	objptr, #4
18be4     F2 00 62 FC | 	wrlong	_var01, objptr
18be8     62 01 00 FF 
18bec     AE 01 06 F6 | 	mov	_var01, ##@LR__5007
18bf0     04 E4 05 F1 | 	add	objptr, #4
18bf4     F2 00 62 FC | 	wrlong	_var01, objptr
18bf8     62 01 00 FF 
18bfc     BC 01 06 F6 | 	mov	_var01, ##@LR__5008
18c00     04 E4 05 F1 | 	add	objptr, #4
18c04     F2 00 62 FC | 	wrlong	_var01, objptr
18c08     62 01 00 FF 
18c0c     D1 01 06 F6 | 	mov	_var01, ##@LR__5009
18c10     04 E4 05 F1 | 	add	objptr, #4
18c14     F2 00 62 FC | 	wrlong	_var01, objptr
18c18     62 01 00 FF 
18c1c     F5 01 06 F6 | 	mov	_var01, ##@LR__5010
18c20     04 E4 05 F1 | 	add	objptr, #4
18c24     F2 00 62 FC | 	wrlong	_var01, objptr
18c28     63 01 00 FF 
18c2c     0C 00 06 F6 | 	mov	_var01, ##@LR__5011
18c30     04 E4 05 F1 | 	add	objptr, #4
18c34     F2 00 62 FC | 	wrlong	_var01, objptr
18c38     63 01 00 FF 
18c3c     1F 00 06 F6 | 	mov	_var01, ##@LR__5012
18c40     04 E4 05 F1 | 	add	objptr, #4
18c44     F2 00 62 FC | 	wrlong	_var01, objptr
18c48     63 01 00 FF 
18c4c     36 00 06 F6 | 	mov	_var01, ##@LR__5013
18c50     04 E4 05 F1 | 	add	objptr, #4
18c54     F2 00 62 FC | 	wrlong	_var01, objptr
18c58     65 00 00 FF 
18c5c     24 E5 85 F1 | 	sub	objptr, ##52004
18c60                 | _init_error_strings_ret
18c60     2D 00 64 FD | 	ret
18c64                 | 
18c64                 | '         
18c64                 | ' sub printerror(err as integer)
18c64                 | _printerror
18c64     01 4A 05 F6 | 	mov	COUNT_, #1
18c68     A8 00 A0 FD | 	call	#pushregs_
18c6c     09 1F 02 F6 | 	mov	local01, arg01
18c70     63 01 00 FF 
18c74     4F 12 06 F6 | 	mov	arg01, ##@LR__5014
18c78     94 26 B0 FD | 	call	#_hg010b_spin2_write
18c7c     0F 13 02 F6 | 	mov	arg01, local01
18c80     8C 28 B0 FD | 	call	#_hg010b_spin2_inttostr
18c84     FD 12 02 F6 | 	mov	arg01, result1
18c88     84 26 B0 FD | 	call	#_hg010b_spin2_write
18c8c     63 01 00 FF 
18c90     56 12 06 F6 | 	mov	arg01, ##@LR__5015
18c94     78 26 B0 FD | 	call	#_hg010b_spin2_write
18c98     02 1E 66 F0 | 	shl	local01, #2
18c9c     65 00 00 FF 
18ca0     60 E4 05 F1 | 	add	objptr, ##51808
18ca4     F2 1E 02 F1 | 	add	local01, objptr
18ca8     0F 13 02 FB | 	rdlong	arg01, local01
18cac     65 00 00 FF 
18cb0     60 E4 85 F1 | 	sub	objptr, ##51808
18cb4                 | ' 
18cb4                 | ' write(text)
18cb4     58 26 B0 FD | 	call	#_hg010b_spin2_write
18cb8                 | ' crlf
18cb8     B4 27 B0 FD | 	call	#_hg010b_spin2_crlf
18cbc     A7 F0 03 F6 | 	mov	ptra, fp
18cc0     B2 00 A0 FD | 	call	#popregs_
18cc4                 | _printerror_ret
18cc4     2D 00 64 FD | 	ret
18cc8                 | 
18cc8                 | ' 
18cc8                 | ' '' ------------------------------- Hardware start/stop/initialization 
18cc8                 | ' 
18cc8                 | ' sub startpsram
18cc8                 | _startpsram
18cc8     00 12 06 F6 | 	mov	arg01, #0
18ccc     0A 14 C6 F9 | 	decod	arg02, #10
18cd0     0B 16 06 F6 | 	mov	arg03, #11
18cd4     07 18 06 F6 | 	mov	arg04, #7
18cd8     0B 00 00 FF 
18cdc     C0 E4 05 F1 | 	add	objptr, ##5824
18ce0     38 29 B0 FD | 	call	#_psram_spin2_startx
18ce4     4B 00 00 FF 
18ce8     2C E5 05 F1 | 	add	objptr, ##38700
18cec     F2 FA 61 FC | 	wrlong	result1, objptr
18cf0                 | '     return $7FF00 + cog*12
18cf0     0C E4 05 F1 | 	add	objptr, #12
18cf4     FF 03 80 FF 
18cf8     F2 00 6A FC | 	wrlong	##524032, objptr
18cfc     56 00 00 FF 
18d00     F8 E5 85 F1 | 	sub	objptr, ##44536
18d04                 | _startpsram_ret
18d04     2D 00 64 FD | 	ret
18d08                 | 
18d08                 | ' 
18d08                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
18d08                 | _startvideo
18d08     01 4A 05 F6 | 	mov	COUNT_, #1
18d0c     A8 00 A0 FD | 	call	#pushregs_
18d10     56 00 00 FF 
18d14     F8 E5 05 F1 | 	add	objptr, ##44536
18d18     F2 18 02 FB | 	rdlong	arg04, objptr
18d1c     56 00 00 FF 
18d20     F8 E5 85 F1 | 	sub	objptr, ##44536
18d24     0A 13 02 F6 | 	mov	arg01, arg02
18d28     0C 15 02 F6 | 	mov	arg02, arg04
18d2c     B8 10 B0 FD | 	call	#_hg010b_spin2_start
18d30     56 00 00 FF 
18d34     E4 E5 05 F1 | 	add	objptr, ##44516
18d38     F2 FA 61 FC | 	wrlong	result1, objptr
18d3c                 | ' 
18d3c                 | ' videocog=v.start(pin,mbox)
18d3c                 | ' 
18d3c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
18d3c     00 1E 06 F6 | 	mov	local01, #0
18d40     4B 00 00 FF 
18d44     24 E5 85 F1 | 	sub	objptr, ##38692
18d48                 | LR__1940
18d48     0F 13 02 F6 | 	mov	arg01, local01
18d4c     00 28 00 FF 
18d50     00 14 06 F6 | 	mov	arg02, ##5242880
18d54     1C 2D B0 FD | 	call	#_psram_spin2_setQos
18d58     01 1E 06 F1 | 	add	local01, #1
18d5c     08 1E 56 F2 | 	cmps	local01, #8 wc
18d60     E4 FF 9F CD |  if_b	jmp	#LR__1940
18d64     4B 00 00 FF 
18d68     24 E5 05 F1 | 	add	objptr, ##38692
18d6c     F2 12 02 FB | 	rdlong	arg01, objptr
18d70     7A 00 02 FF 
18d74     00 14 06 F6 | 	mov	arg02, ##67171328
18d78     4B 00 00 FF 
18d7c     24 E5 85 F1 | 	sub	objptr, ##38692
18d80     F0 2C B0 FD | 	call	#_psram_spin2_setQos
18d84     0B 00 00 FF 
18d88     C0 E4 85 F1 | 	sub	objptr, ##5824
18d8c                 | ' psram.setQoS(videocog, $0400f400) 
18d8c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
18d8c     F2 14 02 F6 | 	mov	arg02, objptr
18d90     00 B8 03 FF 
18d94     00 14 46 F5 | 	or	arg02, ##124780544
18d98     00 16 06 F6 | 	mov	arg03, #0
18d9c     00 18 06 F6 | 	mov	arg04, #0
18da0     00 12 06 F6 | 	mov	arg01, #0
18da4     4C 41 B0 FD | 	call	#__system___basic_open
18da8                 | ' return videocog
18da8     56 00 00 FF 
18dac     E4 E5 05 F1 | 	add	objptr, ##44516
18db0     F2 FA 01 FB | 	rdlong	result1, objptr
18db4     56 00 00 FF 
18db8     E4 E5 85 F1 | 	sub	objptr, ##44516
18dbc     A7 F0 03 F6 | 	mov	ptra, fp
18dc0     B2 00 A0 FD | 	call	#popregs_
18dc4                 | _startvideo_ret
18dc4     2D 00 64 FD | 	ret
18dc8                 | 
18dc8                 | ' 
18dc8                 | ' 
18dc8                 | ' 
18dc8                 | ' 
18dc8                 | ' '' ------------------------------- Convenient psram peek/poke
18dc8                 | ' 
18dc8                 | ' sub pslpoke(addr as ulong,value as ulong)
18dc8                 | _pslpoke
18dc8     00 4A 05 F6 | 	mov	COUNT_, #0
18dcc     A8 00 A0 FD | 	call	#pushregs_
18dd0     08 F0 07 F1 | 	add	ptra, #8
18dd4     A7 12 62 FC | 	wrlong	arg01, fp
18dd8     04 4E 05 F1 | 	add	fp, #4
18ddc     A7 14 62 FC | 	wrlong	arg02, fp
18de0     A7 12 02 F6 | 	mov	arg01, fp
18de4     04 4E 85 F1 | 	sub	fp, #4
18de8     A7 14 02 FB | 	rdlong	arg02, fp
18dec     04 16 06 F6 | 	mov	arg03, #4
18df0     0B 00 00 FF 
18df4     C0 E4 05 F1 | 	add	objptr, ##5824
18df8     E8 2A B0 FD | 	call	#_psram_spin2_write
18dfc     0B 00 00 FF 
18e00     C0 E4 85 F1 | 	sub	objptr, ##5824
18e04     A7 F0 03 F6 | 	mov	ptra, fp
18e08     B2 00 A0 FD | 	call	#popregs_
18e0c                 | _pslpoke_ret
18e0c     2D 00 64 FD | 	ret
18e10                 | 
18e10                 | ' 
18e10                 | ' sub psdpoke(addr as ulong,value as ulong)
18e10                 | _psdpoke
18e10     00 4A 05 F6 | 	mov	COUNT_, #0
18e14     A8 00 A0 FD | 	call	#pushregs_
18e18     08 F0 07 F1 | 	add	ptra, #8
18e1c     A7 12 62 FC | 	wrlong	arg01, fp
18e20     04 4E 05 F1 | 	add	fp, #4
18e24     A7 14 62 FC | 	wrlong	arg02, fp
18e28     A7 12 02 F6 | 	mov	arg01, fp
18e2c     04 4E 85 F1 | 	sub	fp, #4
18e30     A7 14 02 FB | 	rdlong	arg02, fp
18e34     02 16 06 F6 | 	mov	arg03, #2
18e38     0B 00 00 FF 
18e3c     C0 E4 05 F1 | 	add	objptr, ##5824
18e40     A0 2A B0 FD | 	call	#_psram_spin2_write
18e44     0B 00 00 FF 
18e48     C0 E4 85 F1 | 	sub	objptr, ##5824
18e4c     A7 F0 03 F6 | 	mov	ptra, fp
18e50     B2 00 A0 FD | 	call	#popregs_
18e54                 | _psdpoke_ret
18e54     2D 00 64 FD | 	ret
18e58                 | 
18e58                 | ' 
18e58                 | ' sub pspoke(addr as ulong,value as ulong)
18e58                 | _pspoke
18e58     00 4A 05 F6 | 	mov	COUNT_, #0
18e5c     A8 00 A0 FD | 	call	#pushregs_
18e60     08 F0 07 F1 | 	add	ptra, #8
18e64     A7 12 62 FC | 	wrlong	arg01, fp
18e68     04 4E 05 F1 | 	add	fp, #4
18e6c     A7 14 62 FC | 	wrlong	arg02, fp
18e70     A7 12 02 F6 | 	mov	arg01, fp
18e74     04 4E 85 F1 | 	sub	fp, #4
18e78     A7 14 02 FB | 	rdlong	arg02, fp
18e7c     01 16 06 F6 | 	mov	arg03, #1
18e80     0B 00 00 FF 
18e84     C0 E4 05 F1 | 	add	objptr, ##5824
18e88     58 2A B0 FD | 	call	#_psram_spin2_write
18e8c     0B 00 00 FF 
18e90     C0 E4 85 F1 | 	sub	objptr, ##5824
18e94     A7 F0 03 F6 | 	mov	ptra, fp
18e98     B2 00 A0 FD | 	call	#popregs_
18e9c                 | _pspoke_ret
18e9c     2D 00 64 FD | 	ret
18ea0                 | 
18ea0                 | ' 
18ea0                 | ' function pspeek(adr as ulong) as ubyte
18ea0                 | _pspeek
18ea0     00 4A 05 F6 | 	mov	COUNT_, #0
18ea4     A8 00 A0 FD | 	call	#pushregs_
18ea8     0C F0 07 F1 | 	add	ptra, #12
18eac     04 4E 05 F1 | 	add	fp, #4
18eb0     A7 12 62 FC | 	wrlong	arg01, fp
18eb4     04 4E 05 F1 | 	add	fp, #4
18eb8     A7 12 02 F6 | 	mov	arg01, fp
18ebc     04 4E 85 F1 | 	sub	fp, #4
18ec0     A7 14 02 FB | 	rdlong	arg02, fp
18ec4     04 4E 85 F1 | 	sub	fp, #4
18ec8     01 16 06 F6 | 	mov	arg03, #1
18ecc     0B 00 00 FF 
18ed0     C0 E4 05 F1 | 	add	objptr, ##5824
18ed4     70 29 B0 FD | 	call	#_psram_spin2_read1
18ed8     0B 00 00 FF 
18edc     C0 E4 85 F1 | 	sub	objptr, ##5824
18ee0                 | ' psram.read1(varptr(res),adr,1)
18ee0                 | ' return res
18ee0     08 4E 05 F1 | 	add	fp, #8
18ee4     A7 FA C1 FA | 	rdbyte	result1, fp
18ee8     08 4E 85 F1 | 	sub	fp, #8
18eec     A7 F0 03 F6 | 	mov	ptra, fp
18ef0     B2 00 A0 FD | 	call	#popregs_
18ef4                 | _pspeek_ret
18ef4     2D 00 64 FD | 	ret
18ef8                 | 
18ef8                 | ' 
18ef8                 | ' function pslpeek(adr as ulong) as ulong
18ef8                 | _pslpeek
18ef8     00 4A 05 F6 | 	mov	COUNT_, #0
18efc     A8 00 A0 FD | 	call	#pushregs_
18f00     0C F0 07 F1 | 	add	ptra, #12
18f04     04 4E 05 F1 | 	add	fp, #4
18f08     A7 12 62 FC | 	wrlong	arg01, fp
18f0c     04 4E 05 F1 | 	add	fp, #4
18f10     A7 12 02 F6 | 	mov	arg01, fp
18f14     04 4E 85 F1 | 	sub	fp, #4
18f18     A7 14 02 FB | 	rdlong	arg02, fp
18f1c     04 4E 85 F1 | 	sub	fp, #4
18f20     04 16 06 F6 | 	mov	arg03, #4
18f24     0B 00 00 FF 
18f28     C0 E4 05 F1 | 	add	objptr, ##5824
18f2c     18 29 B0 FD | 	call	#_psram_spin2_read1
18f30     0B 00 00 FF 
18f34     C0 E4 85 F1 | 	sub	objptr, ##5824
18f38                 | ' psram.read1(varptr(res),adr,4)
18f38                 | ' return res
18f38     08 4E 05 F1 | 	add	fp, #8
18f3c     A7 FA 01 FB | 	rdlong	result1, fp
18f40     08 4E 85 F1 | 	sub	fp, #8
18f44     A7 F0 03 F6 | 	mov	ptra, fp
18f48     B2 00 A0 FD | 	call	#popregs_
18f4c                 | _pslpeek_ret
18f4c     2D 00 64 FD | 	ret
18f50                 | 
18f50                 | ' 
18f50                 | ' function psdpeek(adr as ulong) as ulong
18f50                 | _psdpeek
18f50     00 4A 05 F6 | 	mov	COUNT_, #0
18f54     A8 00 A0 FD | 	call	#pushregs_
18f58     0C F0 07 F1 | 	add	ptra, #12
18f5c     04 4E 05 F1 | 	add	fp, #4
18f60     A7 12 62 FC | 	wrlong	arg01, fp
18f64     04 4E 05 F1 | 	add	fp, #4
18f68     A7 12 02 F6 | 	mov	arg01, fp
18f6c     04 4E 85 F1 | 	sub	fp, #4
18f70     A7 14 02 FB | 	rdlong	arg02, fp
18f74     04 4E 85 F1 | 	sub	fp, #4
18f78     02 16 06 F6 | 	mov	arg03, #2
18f7c     0B 00 00 FF 
18f80     C0 E4 05 F1 | 	add	objptr, ##5824
18f84     C0 28 B0 FD | 	call	#_psram_spin2_read1
18f88     0B 00 00 FF 
18f8c     C0 E4 85 F1 | 	sub	objptr, ##5824
18f90                 | ' psram.read1(varptr(res),adr,2)
18f90                 | ' return res
18f90     08 4E 05 F1 | 	add	fp, #8
18f94     A7 FA E1 FA | 	rdword	result1, fp
18f98     08 4E 85 F1 | 	sub	fp, #8
18f9c     A7 F0 03 F6 | 	mov	ptra, fp
18fa0     B2 00 A0 FD | 	call	#popregs_
18fa4                 | _psdpeek_ret
18fa4     2D 00 64 FD | 	ret
18fa8                 | 
18fa8                 | ' 
18fa8                 | ' '' ------------------------------- USB keyboard scan to char translator
18fa8                 | ' 
18fa8                 | ' function scantochar(key)
18fa8                 | _scantochar
18fa8                 | ' 
18fa8                 | ' select case (key shr 8) and 255
18fa8     09 01 02 F6 | 	mov	_var01, arg01
18fac     08 00 C6 F0 | 	sar	_var01, #8
18fb0     FF 00 0E F5 | 	and	_var01, #255 wz
18fb4     24 00 90 AD |  if_e	jmp	#LR__1950
18fb8     02 00 0E F2 | 	cmp	_var01, #2 wz
18fbc     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
18fc0     30 00 90 AD |  if_e	jmp	#LR__1951
18fc4     40 00 0E F2 | 	cmp	_var01, #64 wz
18fc8     44 00 90 AD |  if_e	jmp	#LR__1952
18fcc     42 00 0E F2 | 	cmp	_var01, #66 wz
18fd0     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
18fd4     70 00 90 5D |  if_ne	jmp	#LR__1954
18fd8     50 00 90 FD | 	jmp	#LR__1953
18fdc                 | LR__1950
18fdc     09 FB 01 F6 | 	mov	result1, arg01
18fe0     7F FA 05 F5 | 	and	result1, #127
18fe4     02 FA 65 F0 | 	shl	result1, #2
18fe8     F5 FA 01 F1 | 	add	result1, ptr__dat__
18fec     FD FA C1 FA | 	rdbyte	result1, result1
18ff0     54 00 90 FD | 	jmp	#_scantochar_ret
18ff4                 | LR__1951
18ff4     09 FB 01 F6 | 	mov	result1, arg01
18ff8     7F FA 05 F5 | 	and	result1, #127
18ffc     02 FA 65 F0 | 	shl	result1, #2
19000     01 FA 05 F1 | 	add	result1, #1
19004     F5 FA 01 F1 | 	add	result1, ptr__dat__
19008     FD FA C1 FA | 	rdbyte	result1, result1
1900c     38 00 90 FD | 	jmp	#_scantochar_ret
19010                 | LR__1952
19010     09 FB 01 F6 | 	mov	result1, arg01
19014     7F FA 05 F5 | 	and	result1, #127
19018     02 FA 65 F0 | 	shl	result1, #2
1901c     02 FA 05 F1 | 	add	result1, #2
19020     F5 FA 01 F1 | 	add	result1, ptr__dat__
19024     FD FA C1 FA | 	rdbyte	result1, result1
19028     1C 00 90 FD | 	jmp	#_scantochar_ret
1902c                 | LR__1953
1902c     09 FB 01 F6 | 	mov	result1, arg01
19030     7F FA 05 F5 | 	and	result1, #127
19034     02 FA 65 F0 | 	shl	result1, #2
19038     03 FA 05 F1 | 	add	result1, #3
1903c     F5 FA 01 F1 | 	add	result1, ptr__dat__
19040     FD FA C1 FA | 	rdbyte	result1, result1
19044     00 00 90 FD | 	jmp	#_scantochar_ret
19048                 | LR__1954
19048                 | _scantochar_ret
19048     2D 00 64 FD | 	ret
1904c                 | 
1904c                 | _program
1904c     0B 4A 05 F6 | 	mov	COUNT_, #11
19050     A8 00 A0 FD | 	call	#pushregs_
19054     70 FC BF FD | 	call	#_startpsram
19058     40 12 06 F6 | 	mov	arg01, #64
1905c     00 14 06 F6 | 	mov	arg02, #0
19060     00 16 06 F6 | 	mov	arg03, #0
19064     A0 FC BF FD | 	call	#_startvideo
19068     00 12 06 F6 | 	mov	arg01, #0
1906c     00 14 06 F6 | 	mov	arg02, #0
19070     00 16 06 F6 | 	mov	arg03, #0
19074     0B 00 00 FF 
19078     C0 E4 05 F1 | 	add	objptr, ##5824
1907c     A4 2D B0 FD | 	call	#_audio096_spin2_start
19080     FE 1C 02 F6 | 	mov	arg06, result2
19084     4B 00 00 FF 
19088     20 E5 05 F1 | 	add	objptr, ##38688
1908c     F2 FA 61 FC | 	wrlong	result1, objptr
19090     14 E4 05 F1 | 	add	objptr, #20
19094     F2 1C 62 FC | 	wrlong	arg06, objptr
19098     56 00 00 FF 
1909c     F4 E5 85 F1 | 	sub	objptr, ##44532
190a0     32 12 06 F6 | 	mov	arg01, #50
190a4     98 36 B0 FD | 	call	#__system___waitms
190a8     56 00 00 FF 
190ac     F4 E5 05 F1 | 	add	objptr, ##44532
190b0     F2 12 02 FB | 	rdlong	arg01, objptr
190b4     56 00 00 FF 
190b8     F4 E5 85 F1 | 	sub	objptr, ##44532
190bc     14 12 06 F1 | 	add	arg01, #20
190c0     20 00 80 FF 
190c4     09 01 58 FC | 	wrword	##16384, arg01
190c8     B0 2A B0 FD | 	call	#_usbnew_spin2_start
190cc     56 00 00 FF 
190d0     E8 E5 05 F1 | 	add	objptr, ##44520
190d4     F2 FA 61 FC | 	wrlong	result1, objptr
190d8                 | '   mouse_limits[0] := xlim
190d8     0F 00 00 FF 
190dc     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
190e0     01 00 80 FF 
190e4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
190e8                 | '   mouse_limits[1] := ylim
190e8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
190ec     01 00 80 FF 
190f0     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
190f4     56 00 00 FF 
190f8     DB E4 85 F1 | 	sub	objptr, ##44251
190fc     F2 12 02 F6 | 	mov	arg01, objptr
19100     0D E5 85 F1 | 	sub	objptr, #269
19104     C4 12 06 F1 | 	add	arg01, #196
19108                 | '   mouse_outptr := ptr
19108     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1910c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
19110     0F 00 00 FF 
19114     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
19118     0E 00 00 FF 
1911c     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
19120     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19124     0E 00 00 FF 
19128     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1912c     10 12 06 F6 | 	mov	arg01, #16
19130     AC 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
19134     10 12 06 F6 | 	mov	arg01, #16
19138     20 14 06 F6 | 	mov	arg02, #32
1913c     20 16 06 F6 | 	mov	arg03, #32
19140     2C 12 B0 FD | 	call	#_hg010b_spin2_setspritesize
19144     09 12 C6 F9 | 	decod	arg01, #9
19148     20 15 06 F6 | 	mov	arg02, #288
1914c     84 2B B0 FD | 	call	#_usbnew_spin2_mouse_move
19150     F2 1C 02 F6 | 	mov	arg06, objptr
19154     79 00 00 FF 
19158     CC E5 05 F1 | 	add	objptr, ##62412
1915c     F2 1A 02 F6 | 	mov	arg05, objptr
19160     0D 1D 62 FC | 	wrlong	arg06, arg05
19164     04 1A 06 F1 | 	add	arg05, #4
19168     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1916c     EF 14 02 F6 | 	mov	arg02, entryptr__
19170     F2 1E 02 F6 | 	mov	local01, objptr
19174     1E FA 05 F6 | 	mov	result1, #30
19178     28 1E 62 FD | 	setq	local01
1917c     0A FB F1 FC | 	coginit	result1, arg02 wc
19180     01 FA 65 C6 |  if_b	neg	result1, #1
19184     04 E4 85 F1 | 	sub	objptr, #4
19188     F2 FA 61 FC | 	wrlong	result1, objptr
1918c     01 00 00 FF 
19190     90 E4 05 F1 | 	add	objptr, ##656
19194     F2 00 68 FC | 	wrlong	#0, objptr
19198     24 00 00 FF 
1919c     40 E4 85 F1 | 	sub	objptr, ##18496
191a0     F2 04 68 FC | 	wrlong	#2, objptr
191a4     04 E4 05 F1 | 	add	objptr, #4
191a8     F2 26 69 FC | 	wrlong	#147, objptr
191ac     04 E4 05 F1 | 	add	objptr, #4
191b0     F2 34 69 FC | 	wrlong	#154, objptr
191b4     04 E4 05 F1 | 	add	objptr, #4
191b8     F2 08 68 FC | 	wrlong	#4, objptr
191bc     04 E4 85 F1 | 	sub	objptr, #4
191c0     F2 1C 02 FB | 	rdlong	arg06, objptr
191c4     14 E4 85 F1 | 	sub	objptr, #20
191c8     F2 1C 62 FC | 	wrlong	arg06, objptr
191cc     04 E4 05 F1 | 	add	objptr, #4
191d0     F2 00 68 FC | 	wrlong	#0, objptr
191d4     04 E4 05 F1 | 	add	objptr, #4
191d8     F2 00 68 FC | 	wrlong	#0, objptr
191dc     22 00 00 FF 
191e0     B0 E5 05 F1 | 	add	objptr, ##17840
191e4     F2 02 68 FC | 	wrlong	#1, objptr
191e8     01 00 00 FF 
191ec     9C E4 05 F1 | 	add	objptr, ##668
191f0     F2 00 68 FC | 	wrlong	#0, objptr
191f4     01 00 00 FF 
191f8     00 EA 05 F1 | 	add	ptr__dat__, ##512
191fc     08 E4 05 F1 | 	add	objptr, #8
19200     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
19204     04 E4 85 F1 | 	sub	objptr, #4
19208     03 00 80 FF 
1920c     F2 3C 69 FC | 	wrlong	##1694, objptr
19210     16 00 00 FF 
19214     1C E4 85 F1 | 	sub	objptr, ##11292
19218     F2 18 68 FC | 	wrlong	#12, objptr
1921c     65 00 00 FF 
19220     48 E4 85 F1 | 	sub	objptr, ##51784
19224     01 00 00 FF 
19228     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1922c     10 DF BF FD | 	call	#_init_commands
19230     00 F7 BF FD | 	call	#_init_error_strings
19234     9C EE BF FD | 	call	#_init_audio
19238     14 49 BF FD | 	call	#_do_new
1923c     57 00 00 FF 
19240     20 E4 05 F1 | 	add	objptr, ##44576
19244     F2 12 02 FB | 	rdlong	arg01, objptr
19248     04 E4 85 F1 | 	sub	objptr, #4
1924c     F2 14 02 FB | 	rdlong	arg02, objptr
19250     57 00 00 FF 
19254     1C E4 85 F1 | 	sub	objptr, ##44572
19258     F8 1D B0 FD | 	call	#_hg010b_spin2_cls
1925c     57 00 00 FF 
19260     24 E4 05 F1 | 	add	objptr, ##44580
19264     F2 12 02 FB | 	rdlong	arg01, objptr
19268     57 00 00 FF 
1926c     24 E4 85 F1 | 	sub	objptr, ##44580
19270     CC 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
19274                 | ' 
19274                 | ' leading_spaces:=amount
19274     01 00 00 FF 
19278     B2 E4 05 F1 | 	add	objptr, ##690
1927c     F2 04 68 FC | 	wrlong	#2, objptr
19280     01 00 00 FF 
19284     B2 E4 85 F1 | 	sub	objptr, ##690
19288     63 01 00 FF 
1928c     59 20 06 F6 | 	mov	local02, ##@LR__5016
19290     3D 12 06 F6 | 	mov	arg01, #61
19294     3C 14 06 F6 | 	mov	arg02, #60
19298     3B 16 06 F6 | 	mov	arg03, #59
1929c     3A 18 06 F6 | 	mov	arg04, #58
192a0     D4 7B B0 FD | 	call	#__system___vfs_open_sdcardx
192a4     FD 14 02 F6 | 	mov	arg02, result1
192a8     10 13 02 F6 | 	mov	arg01, local02
192ac     68 35 B0 FD | 	call	#__system___mount
192b0     63 01 00 FF 
192b4     5D 12 06 F6 | 	mov	arg01, ##@LR__5017
192b8     1C 38 B0 FD | 	call	#__system___chdir
192bc     63 01 00 FF 
192c0     65 20 06 F6 | 	mov	local02, ##@LR__5018
192c4     72 00 00 FF 
192c8     78 E4 05 F1 | 	add	objptr, ##58488
192cc     F2 20 62 FC | 	wrlong	local02, objptr
192d0     1B 00 00 FF 
192d4     60 E4 85 F1 | 	sub	objptr, ##13920
192d8     F2 12 02 FB | 	rdlong	arg01, objptr
192dc     57 00 00 FF 
192e0     18 E4 85 F1 | 	sub	objptr, ##44568
192e4     01 12 66 F0 | 	shl	arg01, #1
192e8     01 14 06 F6 | 	mov	arg02, #1
192ec     90 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
192f0                 | ' 
192f0                 | ' init_commands
192f0                 | ' init_error_strings
192f0                 | ' init_audio
192f0                 | ' do_new
192f0                 | ' 
192f0                 | ' 
192f0                 | ' cls(ink, paper)
192f0                 | ' v.setfontfamily(font) 				' use ST Mono font
192f0                 | ' v.setleadingspaces(2)
192f0                 | ' mount "/sd", _vfs_open_sdcard()
192f0                 | ' chdir "/sd/bas"
192f0                 | ' 
192f0                 | ' currentdir$="/sd/bas"
192f0                 | ' 
192f0                 | ' position 2*editor_spaces,1 : print ver$
192f0     00 12 06 F6 | 	mov	arg01, #0
192f4     E4 8A B0 FD | 	call	#__system___getiolock_0474
192f8     FD 12 02 F6 | 	mov	arg01, result1
192fc     4C 31 B0 FD | 	call	#__system___lockmem
19300     18 00 00 FF 
19304     4C EB 05 F1 | 	add	ptr__dat__, ##12620
19308     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1930c     18 00 00 FF 
19310     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
19314     00 12 06 F6 | 	mov	arg01, #0
19318     00 16 06 F6 | 	mov	arg03, #0
1931c     30 3E B0 FD | 	call	#__system___basic_print_string
19320     00 12 06 F6 | 	mov	arg01, #0
19324     0A 14 06 F6 | 	mov	arg02, #10
19328     00 16 06 F6 | 	mov	arg03, #0
1932c     C8 3D B0 FD | 	call	#__system___basic_print_char
19330     00 12 06 F6 | 	mov	arg01, #0
19334     A4 8A B0 FD | 	call	#__system___getiolock_0474
19338     FD 00 68 FC | 	wrlong	#0, result1
1933c     F2 12 02 FB | 	rdlong	arg01, objptr
19340     00 14 06 F6 | 	mov	arg02, #0
19344     0A 16 06 F6 | 	mov	arg03, #10
19348     98 53 B0 FD | 	call	#__system__Number_S
1934c     FD 12 02 F6 | 	mov	arg01, result1
19350     63 01 00 FF 
19354     6D 14 06 F6 | 	mov	arg02, ##@LR__5019
19358     4C 31 B0 FD | 	call	#__system___string_concat
1935c     FD 20 02 F6 | 	mov	local02, result1
19360     79 00 00 FF 
19364     C0 E5 05 F1 | 	add	objptr, ##62400
19368     F2 20 62 FC | 	wrlong	local02, objptr
1936c     79 00 00 FF 
19370     C0 E5 85 F1 | 	sub	objptr, ##62400
19374                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
19374     00 12 06 F6 | 	mov	arg01, #0
19378     60 8A B0 FD | 	call	#__system___getiolock_0474
1937c     FD 12 02 F6 | 	mov	arg01, result1
19380     C8 30 B0 FD | 	call	#__system___lockmem
19384     79 00 00 FF 
19388     C0 E5 05 F1 | 	add	objptr, ##62400
1938c     F2 14 02 FB | 	rdlong	arg02, objptr
19390     79 00 00 FF 
19394     C0 E5 85 F1 | 	sub	objptr, ##62400
19398     00 12 06 F6 | 	mov	arg01, #0
1939c     00 16 06 F6 | 	mov	arg03, #0
193a0     AC 3D B0 FD | 	call	#__system___basic_print_string
193a4     00 12 06 F6 | 	mov	arg01, #0
193a8     0A 14 06 F6 | 	mov	arg02, #10
193ac     00 16 06 F6 | 	mov	arg03, #0
193b0     44 3D B0 FD | 	call	#__system___basic_print_char
193b4     00 12 06 F6 | 	mov	arg01, #0
193b8     20 8A B0 FD | 	call	#__system___getiolock_0474
193bc     FD 00 68 FC | 	wrlong	#0, result1
193c0     57 00 00 FF 
193c4     18 E4 05 F1 | 	add	objptr, ##44568
193c8     F2 12 02 FB | 	rdlong	arg01, objptr
193cc     57 00 00 FF 
193d0     18 E4 85 F1 | 	sub	objptr, ##44568
193d4     01 12 66 F0 | 	shl	arg01, #1
193d8     04 14 06 F6 | 	mov	arg02, #4
193dc     A0 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
193e0                 | ' position 2*editor_spaces,4 : print "Ready"
193e0     00 12 06 F6 | 	mov	arg01, #0
193e4     F4 89 B0 FD | 	call	#__system___getiolock_0474
193e8     FD 12 02 F6 | 	mov	arg01, result1
193ec     5C 30 B0 FD | 	call	#__system___lockmem
193f0     63 01 00 FF 
193f4     7F 14 06 F6 | 	mov	arg02, ##@LR__5020
193f8     00 12 06 F6 | 	mov	arg01, #0
193fc     00 16 06 F6 | 	mov	arg03, #0
19400     4C 3D B0 FD | 	call	#__system___basic_print_string
19404     FD 22 02 F6 | 	mov	local03, result1
19408     00 12 06 F6 | 	mov	arg01, #0
1940c     0A 14 06 F6 | 	mov	arg02, #10
19410     00 16 06 F6 | 	mov	arg03, #0
19414     E0 3C B0 FD | 	call	#__system___basic_print_char
19418     01 24 06 F6 | 	mov	local04, #1
1941c     00 12 06 F6 | 	mov	arg01, #0
19420     B8 89 B0 FD | 	call	#__system___getiolock_0474
19424     FD 00 68 FC | 	wrlong	#0, result1
19428     00 26 06 F6 | 	mov	local05, #0
1942c     00 14 06 F6 | 	mov	arg02, #0
19430     01 14 D6 F7 | 	test	arg02, #1 wc
19434     5A 4C 64 FD | 	drvc	#38
19438     01 14 D6 F7 | 	test	arg02, #1 wc
1943c     5A 4E 64 FD | 	drvc	#39
19440     63 01 00 FF 
19444     85 20 06 F6 | 	mov	local02, ##@LR__5021
19448     7B 00 00 FF 
1944c     88 E4 05 F1 | 	add	objptr, ##63112
19450     F2 20 62 FC | 	wrlong	local02, objptr
19454     7B 00 00 FF 
19458     88 E4 85 F1 | 	sub	objptr, ##63112
1945c                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1945c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1945c                 | ' 
1945c                 | ' loadname="noname.bas"
1945c                 | ' 
1945c                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
1945c                 | ' 
1945c                 | ' 'base2:=@channel1[0]+64*channel
1945c                 | ' 'long[base2+8]:=sample+$C0000000 
1945c                 | ' 'long[base2+12]:= len
1945c                 | ' 'if loop >=0 
1945c                 | ' '  long[base2+16]:= loop
1945c                 | ' 'else
1945c                 | ' '  long[base2+16]:= len+2
1945c                 | ' 'word[base2+20]:=vol
1945c                 | ' 'word[base2+24]:= 3546911/splfreq 
1945c                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1945c                 | ' 'long[base2+28]:=$40000000
1945c                 | ' 
1945c                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
1945c                 | ' 'lpoke base+16,2048
1945c                 | ' 'lpoke base+12,0
1945c                 | ' 'dpoke base+20,16383
1945c                 | ' 'dpoke base+22,8192
1945c                 | ' 'dpoke base+24,60
1945c                 | ' 'dpoke base+26,256 ' todo: use skip to make accurate sample rate
1945c                 | ' 'dpoke base+28,$4000_0000
1945c                 | ' 'lpoke base+32,0 
1945c                 | ' 'lpoke base+36, 0
1945c                 | ' 'lpoke base+40,25600' speed
1945c                 | ' 'lpoke base+44,1023 'len
1945c                 | ' 
1945c                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
1945c                 | ' 
1945c                 | ' '-------------------------------------------------------------------------------------------------------- 
1945c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1945c                 | ' '--------------------------------------------------------------------------------------------------------
1945c                 | ' 
1945c                 | ' do
1945c                 | LR__1960
1945c     01 12 06 F6 | 	mov	arg01, #1
19460     80 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
19464     07 12 06 F6 | 	mov	arg01, #7
19468     0B 00 00 FF 
1946c     C0 E4 05 F1 | 	add	objptr, ##5824
19470     D8 2C B0 FD | 	call	#_audio096_spin2_stop
19474     0B 00 00 FF 
19478     C0 E4 85 F1 | 	sub	objptr, ##5824
1947c     F4 27 B0 FD | 	call	#_usbnew_spin2_get_key
19480     65 00 00 FF 
19484     58 E4 05 F1 | 	add	objptr, ##51800
19488     F2 FA 61 FC | 	wrlong	result1, objptr
1948c                 | '   return hkbd_led_rep
1948c     13 00 00 FF 
19490     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
19494     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
19498     13 00 00 FF 
1949c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
194a0     16 00 00 FF 
194a4     34 E4 05 F1 | 	add	objptr, ##11316
194a8     F2 FA 61 FC | 	wrlong	result1, objptr
194ac                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
194ac     16 00 00 FF 
194b0     34 E4 85 F1 | 	sub	objptr, ##11316
194b4     F2 20 02 FB | 	rdlong	local02, objptr
194b8     65 00 00 FF 
194bc     58 E4 85 F1 | 	sub	objptr, ##51800
194c0     01 20 16 F2 | 	cmp	local02, #1 wc
194c4     BC 00 90 CD |  if_b	jmp	#LR__1961
194c8     65 00 00 FF 
194cc     58 E4 05 F1 | 	add	objptr, ##51800
194d0     F2 24 02 FB | 	rdlong	local04, objptr
194d4     65 00 00 FF 
194d8     58 E4 85 F1 | 	sub	objptr, ##51800
194dc     12 23 02 F6 | 	mov	local03, local04
194e0     04 22 16 F2 | 	cmp	local03, #4 wc
194e4     9C 00 90 3D |  if_ae	jmp	#LR__1961
194e8     79 00 00 FF 
194ec     C4 E5 05 F1 | 	add	objptr, ##62404
194f0     F2 1E 02 FB | 	rdlong	local01, objptr
194f4     79 00 00 FF 
194f8     C4 E5 85 F1 | 	sub	objptr, ##62404
194fc     0F 27 02 F6 | 	mov	local05, local01
19500     01 26 0E F2 | 	cmp	local05, #1 wz
19504     7C 00 90 5D |  if_ne	jmp	#LR__1961
19508     04 00 00 FF 
1950c     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19510     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19514     04 00 00 FF 
19518     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1951c     56 00 00 FF 
19520     44 22 06 F6 | 	mov	local03, ##44100
19524     0C 24 C6 F9 | 	decod	local04, #12
19528     00 26 06 F6 | 	mov	local05, #0
1952c     03 00 00 FF 
19530     DE 1E 06 F6 | 	mov	local01, ##1758
19534     07 12 06 F6 | 	mov	arg01, #7
19538     56 00 00 FF 
1953c     44 16 06 F6 | 	mov	arg03, ##44100
19540     0C 18 C6 F9 | 	decod	arg04, #12
19544     00 1A 06 F6 | 	mov	arg05, #0
19548     03 00 00 FF 
1954c     DE 1C 06 F6 | 	mov	arg06, ##1758
19550     0B 00 00 FF 
19554     C0 E4 05 F1 | 	add	objptr, ##5824
19558     A0 2A B0 FD | 	call	#_audio096_spin2_play
1955c     0B 00 00 FF 
19560     C0 E4 85 F1 | 	sub	objptr, ##5824
19564     0A 12 06 F6 | 	mov	arg01, #10
19568     D4 31 B0 FD | 	call	#__system___waitms
1956c     07 12 06 F6 | 	mov	arg01, #7
19570     0B 00 00 FF 
19574     C0 E4 05 F1 | 	add	objptr, ##5824
19578     D0 2B B0 FD | 	call	#_audio096_spin2_stop
1957c     0B 00 00 FF 
19580     C0 E4 85 F1 | 	sub	objptr, ##5824
19584                 | LR__1961
19584                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
19584     65 00 00 FF 
19588     58 E4 05 F1 | 	add	objptr, ##51800
1958c     F2 20 02 FB | 	rdlong	local02, objptr
19590     65 00 00 FF 
19594     58 E4 85 F1 | 	sub	objptr, ##51800
19598     04 20 16 F2 | 	cmp	local02, #4 wc
1959c     80 00 90 CD |  if_b	jmp	#LR__1962
195a0     65 00 00 FF 
195a4     58 E4 05 F1 | 	add	objptr, ##51800
195a8     F2 24 02 FB | 	rdlong	local04, objptr
195ac     65 00 00 FF 
195b0     58 E4 85 F1 | 	sub	objptr, ##51800
195b4     12 23 02 F6 | 	mov	local03, local04
195b8     00 00 40 FF 
195bc     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
195c0     65 00 00 CF 
195c4     58 E4 05 C1 |  if_b	add	objptr, ##51800
195c8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
195cc     65 00 00 CF 
195d0     58 E4 85 C1 |  if_b	sub	objptr, ##51800
195d4     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
195d8     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
195dc     40 00 90 3D |  if_ae	jmp	#LR__1962
195e0     65 00 00 FF 
195e4     58 E4 05 F1 | 	add	objptr, ##51800
195e8     F2 20 02 FB | 	rdlong	local02, objptr
195ec     04 E4 05 F1 | 	add	objptr, #4
195f0     F2 20 62 FC | 	wrlong	local02, objptr
195f4     16 00 00 FF 
195f8     34 E4 05 F1 | 	add	objptr, ##11316
195fc     F2 02 68 FC | 	wrlong	#1, objptr
19600     16 00 00 FF 
19604     34 E4 85 F1 | 	sub	objptr, ##11316
19608     F2 20 02 FB | 	rdlong	local02, objptr
1960c     16 00 00 FF 
19610     38 E4 05 F1 | 	add	objptr, ##11320
19614     F2 20 62 FC | 	wrlong	local02, objptr
19618     7B 00 00 FF 
1961c     94 E4 85 F1 | 	sub	objptr, ##63124
19620                 | LR__1962
19620                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
19620     65 00 00 FF 
19624     58 E4 05 F1 | 	add	objptr, ##51800
19628     F2 20 02 FB | 	rdlong	local02, objptr
1962c     65 00 00 FF 
19630     58 E4 85 F1 | 	sub	objptr, ##51800
19634     00 00 40 FF 
19638     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1963c     7B 00 00 3F 
19640     98 E4 05 31 |  if_ae	add	objptr, ##63128
19644     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19648     08 E4 85 31 |  if_ae	sub	objptr, #8
1964c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19650     7B 00 00 3F 
19654     90 E4 85 31 |  if_ae	sub	objptr, ##63120
19658                 | ' if key=0 andalso rpt=1 then rptcnt+=1
19658     65 00 00 FF 
1965c     58 E4 05 F1 | 	add	objptr, ##51800
19660     F2 20 0A FB | 	rdlong	local02, objptr wz
19664     65 00 00 FF 
19668     58 E4 85 F1 | 	sub	objptr, ##51800
1966c     7B 00 00 AF 
19670     90 E4 05 A1 |  if_e	add	objptr, ##63120
19674     F2 24 02 AB |  if_e	rdlong	local04, objptr
19678     7B 00 00 AF 
1967c     90 E4 85 A1 |  if_e	sub	objptr, ##63120
19680     12 23 02 A6 |  if_e	mov	local03, local04
19684     01 22 0E A2 |  if_e	cmp	local03, #1 wz
19688     7B 00 00 AF 
1968c     98 E4 05 A1 |  if_e	add	objptr, ##63128
19690     F2 20 02 AB |  if_e	rdlong	local02, objptr
19694     01 20 06 A1 |  if_e	add	local02, #1
19698     F2 20 62 AC |  if_e	wrlong	local02, objptr
1969c     7B 00 00 AF 
196a0     98 E4 85 A1 |  if_e	sub	objptr, ##63128
196a4                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
196a4     65 00 00 FF 
196a8     58 E4 05 F1 | 	add	objptr, ##51800
196ac     F2 20 02 FB | 	rdlong	local02, objptr
196b0     65 00 00 FF 
196b4     58 E4 85 F1 | 	sub	objptr, ##51800
196b8     00 00 40 FF 
196bc     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
196c0     44 00 90 3D |  if_ae	jmp	#LR__1964
196c4     7B 00 00 FF 
196c8     98 E4 05 F1 | 	add	objptr, ##63128
196cc     F2 20 02 FB | 	rdlong	local02, objptr
196d0     7B 00 00 FF 
196d4     98 E4 85 F1 | 	sub	objptr, ##63128
196d8     19 20 0E F2 | 	cmp	local02, #25 wz
196dc     28 00 90 5D |  if_ne	jmp	#LR__1963
196e0     65 00 00 FF 
196e4     5C E4 05 F1 | 	add	objptr, ##51804
196e8     F2 20 02 FB | 	rdlong	local02, objptr
196ec     16 00 00 FF 
196f0     38 E4 05 F1 | 	add	objptr, ##11320
196f4     F2 20 62 FC | 	wrlong	local02, objptr
196f8     04 E4 05 F1 | 	add	objptr, #4
196fc     F2 2A 68 FC | 	wrlong	#21, objptr
19700     7B 00 00 FF 
19704     98 E4 85 F1 | 	sub	objptr, ##63128
19708                 | LR__1963
19708                 | LR__1964
19708                 | ' 
19708                 | ' 
19708                 | ' if key3<>0 then
19708     7B 00 00 FF 
1970c     94 E4 05 F1 | 	add	objptr, ##63124
19710     F2 28 0A FB | 	rdlong	local06, objptr wz
19714     7B 00 00 FF 
19718     94 E4 85 F1 | 	sub	objptr, ##63124
1971c     3C FD 9F AD |  if_e	jmp	#LR__1960
19720                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
19720     79 00 00 FF 
19724     C4 E5 05 F1 | 	add	objptr, ##62404
19728     F2 20 02 FB | 	rdlong	local02, objptr
1972c     79 00 00 FF 
19730     C4 E5 85 F1 | 	sub	objptr, ##62404
19734     01 20 0E F2 | 	cmp	local02, #1 wz
19738     50 00 90 5D |  if_ne	jmp	#LR__1965
1973c     7B 00 00 FF 
19740     68 E4 05 F1 | 	add	objptr, ##63080
19744     F2 14 02 FB | 	rdlong	arg02, objptr
19748     56 00 00 FF 
1974c     44 22 06 F6 | 	mov	local03, ##44100
19750     0C 24 C6 F9 | 	decod	local04, #12
19754     04 E4 85 F1 | 	sub	objptr, #4
19758     F2 26 02 FB | 	rdlong	local05, objptr
1975c     01 1E 66 F6 | 	neg	local01, #1
19760     07 12 06 F6 | 	mov	arg01, #7
19764     56 00 00 FF 
19768     44 16 06 F6 | 	mov	arg03, ##44100
1976c     0C 18 C6 F9 | 	decod	arg04, #12
19770     13 1B 02 F6 | 	mov	arg05, local05
19774     01 1C 66 F6 | 	neg	arg06, #1
19778     6F 00 00 FF 
1977c     A4 E5 85 F1 | 	sub	objptr, ##57252
19780     78 28 B0 FD | 	call	#_audio096_spin2_play
19784     0B 00 00 FF 
19788     C0 E4 85 F1 | 	sub	objptr, ##5824
1978c                 | LR__1965
1978c     7B 00 00 FF 
19790     94 E4 05 F1 | 	add	objptr, ##63124
19794     F2 12 02 FB | 	rdlong	arg01, objptr
19798     7B 00 00 FF 
1979c     94 E4 85 F1 | 	sub	objptr, ##63124
197a0     04 F8 BF FD | 	call	#_scantochar
197a4     7B 00 00 FF 
197a8     9C E4 05 F1 | 	add	objptr, ##63132
197ac     F2 FA 61 FC | 	wrlong	result1, objptr
197b0                 | '   if leds and 2 = 2 then 
197b0     10 E4 85 F1 | 	sub	objptr, #16
197b4     F2 20 0A FB | 	rdlong	local02, objptr wz
197b8     7B 00 00 FF 
197bc     8C E4 85 F1 | 	sub	objptr, ##63116
197c0     68 01 90 AD |  if_e	jmp	#LR__1973
197c4                 | '     if key4>96 andalso key4<123 then
197c4     7B 00 00 FF 
197c8     9C E4 05 F1 | 	add	objptr, ##63132
197cc     F2 20 02 FB | 	rdlong	local02, objptr
197d0     7B 00 00 FF 
197d4     9C E4 85 F1 | 	sub	objptr, ##63132
197d8     61 20 56 F2 | 	cmps	local02, #97 wc
197dc     40 00 90 CD |  if_b	jmp	#LR__1966
197e0     7B 00 00 FF 
197e4     9C E4 05 F1 | 	add	objptr, ##63132
197e8     F2 24 02 FB | 	rdlong	local04, objptr
197ec     7B 00 00 FF 
197f0     9C E4 85 F1 | 	sub	objptr, ##63132
197f4     12 23 02 F6 | 	mov	local03, local04
197f8     7B 22 56 F2 | 	cmps	local03, #123 wc
197fc     20 00 90 3D |  if_ae	jmp	#LR__1966
19800     7B 00 00 FF 
19804     9C E4 05 F1 | 	add	objptr, ##63132
19808     F2 20 02 FB | 	rdlong	local02, objptr
1980c     20 20 86 F1 | 	sub	local02, #32
19810     F2 20 62 FC | 	wrlong	local02, objptr
19814     7B 00 00 FF 
19818     9C E4 85 F1 | 	sub	objptr, ##63132
1981c     0C 01 90 FD | 	jmp	#LR__1972
19820                 | LR__1966
19820     7B 00 00 FF 
19824     9C E4 05 F1 | 	add	objptr, ##63132
19828     F2 20 02 FB | 	rdlong	local02, objptr
1982c     7B 00 00 FF 
19830     9C E4 85 F1 | 	sub	objptr, ##63132
19834     41 20 56 F2 | 	cmps	local02, #65 wc
19838     40 00 90 CD |  if_b	jmp	#LR__1967
1983c     7B 00 00 FF 
19840     9C E4 05 F1 | 	add	objptr, ##63132
19844     F2 24 02 FB | 	rdlong	local04, objptr
19848     7B 00 00 FF 
1984c     9C E4 85 F1 | 	sub	objptr, ##63132
19850     12 23 02 F6 | 	mov	local03, local04
19854     5B 22 56 F2 | 	cmps	local03, #91 wc
19858     20 00 90 3D |  if_ae	jmp	#LR__1967
1985c     7B 00 00 FF 
19860     9C E4 05 F1 | 	add	objptr, ##63132
19864     F2 20 02 FB | 	rdlong	local02, objptr
19868     20 20 06 F1 | 	add	local02, #32
1986c     F2 20 62 FC | 	wrlong	local02, objptr
19870     7B 00 00 FF 
19874     9C E4 85 F1 | 	sub	objptr, ##63132
19878     B0 00 90 FD | 	jmp	#LR__1971
1987c                 | LR__1967
1987c     7B 00 00 FF 
19880     9C E4 05 F1 | 	add	objptr, ##63132
19884     F2 20 02 FB | 	rdlong	local02, objptr
19888     7B 00 00 FF 
1988c     9C E4 85 F1 | 	sub	objptr, ##63132
19890     17 20 56 F2 | 	cmps	local02, #23 wc
19894     40 00 90 CD |  if_b	jmp	#LR__1968
19898     7B 00 00 FF 
1989c     9C E4 05 F1 | 	add	objptr, ##63132
198a0     F2 24 02 FB | 	rdlong	local04, objptr
198a4     7B 00 00 FF 
198a8     9C E4 85 F1 | 	sub	objptr, ##63132
198ac     12 23 02 F6 | 	mov	local03, local04
198b0     20 22 56 F2 | 	cmps	local03, #32 wc
198b4     20 00 90 3D |  if_ae	jmp	#LR__1968
198b8     7B 00 00 FF 
198bc     9C E4 05 F1 | 	add	objptr, ##63132
198c0     F2 20 02 FB | 	rdlong	local02, objptr
198c4     09 20 86 F1 | 	sub	local02, #9
198c8     F2 20 62 FC | 	wrlong	local02, objptr
198cc     7B 00 00 FF 
198d0     9C E4 85 F1 | 	sub	objptr, ##63132
198d4     54 00 90 FD | 	jmp	#LR__1970
198d8                 | LR__1968
198d8     7B 00 00 FF 
198dc     9C E4 05 F1 | 	add	objptr, ##63132
198e0     F2 20 02 FB | 	rdlong	local02, objptr
198e4     7B 00 00 FF 
198e8     9C E4 85 F1 | 	sub	objptr, ##63132
198ec     0E 20 56 F2 | 	cmps	local02, #14 wc
198f0     38 00 90 CD |  if_b	jmp	#LR__1969
198f4     7B 00 00 FF 
198f8     9C E4 05 F1 | 	add	objptr, ##63132
198fc     F2 24 02 FB | 	rdlong	local04, objptr
19900     7B 00 00 FF 
19904     9C E4 85 F1 | 	sub	objptr, ##63132
19908     12 23 02 F6 | 	mov	local03, local04
1990c     17 22 56 F2 | 	cmps	local03, #23 wc
19910     7B 00 00 CF 
19914     9C E4 05 C1 |  if_b	add	objptr, ##63132
19918     F2 20 02 CB |  if_b	rdlong	local02, objptr
1991c     27 20 06 C1 |  if_b	add	local02, #39
19920     F2 20 62 CC |  if_b	wrlong	local02, objptr
19924     7B 00 00 CF 
19928     9C E4 85 C1 |  if_b	sub	objptr, ##63132
1992c                 | LR__1969
1992c                 | LR__1970
1992c                 | LR__1971
1992c                 | LR__1972
1992c                 | LR__1973
1992c                 | '  
1992c                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
1992c     7B 00 00 FF 
19930     9C E4 05 F1 | 	add	objptr, ##63132
19934     F2 20 02 FB | 	rdlong	local02, objptr
19938     7B 00 00 FF 
1993c     9C E4 85 F1 | 	sub	objptr, ##63132
19940     01 20 56 F2 | 	cmps	local02, #1 wc
19944     90 00 90 CD |  if_b	jmp	#LR__1974
19948     7B 00 00 FF 
1994c     9C E4 05 F1 | 	add	objptr, ##63132
19950     F2 24 02 FB | 	rdlong	local04, objptr
19954     7B 00 00 FF 
19958     9C E4 85 F1 | 	sub	objptr, ##63132
1995c     12 23 02 F6 | 	mov	local03, local04
19960     7F 22 56 F2 | 	cmps	local03, #127 wc
19964     38 E4 05 C1 |  if_b	add	objptr, #56
19968     F2 1E E2 CA |  if_b	rdword	local01, objptr
1996c     38 E4 85 C1 |  if_b	sub	objptr, #56
19970     0F 27 32 C9 |  if_b	getword	local05, local01, #0
19974     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
19978     5C 00 90 3D |  if_ae	jmp	#LR__1974
1997c     7B 00 00 FF 
19980     9C E4 05 F1 | 	add	objptr, ##63132
19984     F2 12 02 FB | 	rdlong	arg01, objptr
19988     7B 00 00 FF 
1998c     9C E4 85 F1 | 	sub	objptr, ##63132
19990     C0 4C B0 FD | 	call	#__system__Chr_S
19994     FD 2A 02 F6 | 	mov	local07, result1
19998     57 00 00 FF 
1999c     00 E4 05 F1 | 	add	objptr, ##44544
199a0     F2 12 02 FB | 	rdlong	arg01, objptr
199a4     57 00 00 FF 
199a8     00 E4 85 F1 | 	sub	objptr, ##44544
199ac     15 15 02 F6 | 	mov	arg02, local07
199b0     F4 2A B0 FD | 	call	#__system___string_concat
199b4     57 00 00 FF 
199b8     00 E4 05 F1 | 	add	objptr, ##44544
199bc     F2 FA 61 FC | 	wrlong	result1, objptr
199c0     24 00 00 FF 
199c4     9C E4 05 F1 | 	add	objptr, ##18588
199c8     F2 12 02 FB | 	rdlong	arg01, objptr
199cc     7B 00 00 FF 
199d0     9C E4 85 F1 | 	sub	objptr, ##63132
199d4     1C 17 B0 FD | 	call	#_hg010b_spin2_putchar
199d8                 | LR__1974
199d8                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
199d8     7B 00 00 FF 
199dc     9C E4 05 F1 | 	add	objptr, ##63132
199e0     F2 20 02 FB | 	rdlong	local02, objptr
199e4     7B 00 00 FF 
199e8     9C E4 85 F1 | 	sub	objptr, ##63132
199ec     01 20 56 F2 | 	cmps	local02, #1 wc
199f0     D0 00 90 CD |  if_b	jmp	#LR__1975
199f4     7B 00 00 FF 
199f8     9C E4 05 F1 | 	add	objptr, ##63132
199fc     F2 24 02 FB | 	rdlong	local04, objptr
19a00     7B 00 00 FF 
19a04     9C E4 85 F1 | 	sub	objptr, ##63132
19a08     12 23 02 F6 | 	mov	local03, local04
19a0c     7F 22 56 F2 | 	cmps	local03, #127 wc
19a10     B0 00 90 3D |  if_ae	jmp	#LR__1975
19a14     38 E4 05 F1 | 	add	objptr, #56
19a18     F2 1E E2 FA | 	rdword	local01, objptr
19a1c     38 E4 85 F1 | 	sub	objptr, #56
19a20     0F 27 32 F9 | 	getword	local05, local01, #0
19a24     FE 26 0E F2 | 	cmp	local05, #254 wz
19a28     79 00 00 AF 
19a2c     C4 E5 05 A1 |  if_e	add	objptr, ##62404
19a30     F2 2C 02 AB |  if_e	rdlong	local08, objptr
19a34     79 00 00 AF 
19a38     C4 E5 85 A1 |  if_e	sub	objptr, ##62404
19a3c     16 2F 02 A6 |  if_e	mov	local09, local08
19a40     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
19a44     7C 00 90 5D |  if_ne	jmp	#LR__1975
19a48     04 00 00 FF 
19a4c     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19a50     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19a54     04 00 00 FF 
19a58     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19a5c     56 00 00 FF 
19a60     44 22 06 F6 | 	mov	local03, ##44100
19a64     0C 24 C6 F9 | 	decod	local04, #12
19a68     00 26 06 F6 | 	mov	local05, #0
19a6c     03 00 00 FF 
19a70     DE 1E 06 F6 | 	mov	local01, ##1758
19a74     07 12 06 F6 | 	mov	arg01, #7
19a78     56 00 00 FF 
19a7c     44 16 06 F6 | 	mov	arg03, ##44100
19a80     0C 18 C6 F9 | 	decod	arg04, #12
19a84     00 1A 06 F6 | 	mov	arg05, #0
19a88     03 00 00 FF 
19a8c     DE 1C 06 F6 | 	mov	arg06, ##1758
19a90     0B 00 00 FF 
19a94     C0 E4 05 F1 | 	add	objptr, ##5824
19a98     60 25 B0 FD | 	call	#_audio096_spin2_play
19a9c     0B 00 00 FF 
19aa0     C0 E4 85 F1 | 	sub	objptr, ##5824
19aa4     2C 13 06 F6 | 	mov	arg01, #300
19aa8     94 2C B0 FD | 	call	#__system___waitms
19aac     07 12 06 F6 | 	mov	arg01, #7
19ab0     0B 00 00 FF 
19ab4     C0 E4 05 F1 | 	add	objptr, ##5824
19ab8     90 26 B0 FD | 	call	#_audio096_spin2_stop
19abc     0B 00 00 FF 
19ac0     C0 E4 85 F1 | 	sub	objptr, ##5824
19ac4                 | LR__1975
19ac4                 | '  
19ac4                 | '   'tab
19ac4                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
19ac4     7B 00 00 FF 
19ac8     94 E4 05 F1 | 	add	objptr, ##63124
19acc     F2 20 02 FB | 	rdlong	local02, objptr
19ad0     7B 00 00 FF 
19ad4     94 E4 85 F1 | 	sub	objptr, ##63124
19ad8     10 21 E2 F8 | 	getbyte	local02, local02, #0
19adc     2B 20 0E F2 | 	cmp	local02, #43 wz
19ae0     B4 00 90 5D |  if_ne	jmp	#LR__1976
19ae4     38 E4 05 F1 | 	add	objptr, #56
19ae8     F2 24 E2 FA | 	rdword	local04, objptr
19aec     38 E4 85 F1 | 	sub	objptr, #56
19af0     12 23 32 F9 | 	getword	local03, local04, #0
19af4     F0 22 16 F2 | 	cmp	local03, #240 wc
19af8     9C 00 90 CD |  if_b	jmp	#LR__1976
19afc     79 00 00 FF 
19b00     C4 E5 05 F1 | 	add	objptr, ##62404
19b04     F2 1E 02 FB | 	rdlong	local01, objptr
19b08     79 00 00 FF 
19b0c     C4 E5 85 F1 | 	sub	objptr, ##62404
19b10     0F 27 02 F6 | 	mov	local05, local01
19b14     01 26 0E F2 | 	cmp	local05, #1 wz
19b18     7C 00 90 5D |  if_ne	jmp	#LR__1976
19b1c     04 00 00 FF 
19b20     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19b24     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19b28     04 00 00 FF 
19b2c     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19b30     56 00 00 FF 
19b34     44 22 06 F6 | 	mov	local03, ##44100
19b38     0E 24 C6 F9 | 	decod	local04, #14
19b3c     00 26 06 F6 | 	mov	local05, #0
19b40     03 00 00 FF 
19b44     DE 1E 06 F6 | 	mov	local01, ##1758
19b48     00 12 06 F6 | 	mov	arg01, #0
19b4c     56 00 00 FF 
19b50     44 16 06 F6 | 	mov	arg03, ##44100
19b54     0E 18 C6 F9 | 	decod	arg04, #14
19b58     00 1A 06 F6 | 	mov	arg05, #0
19b5c     03 00 00 FF 
19b60     DE 1C 06 F6 | 	mov	arg06, ##1758
19b64     0B 00 00 FF 
19b68     C0 E4 05 F1 | 	add	objptr, ##5824
19b6c     8C 24 B0 FD | 	call	#_audio096_spin2_play
19b70     0B 00 00 FF 
19b74     C0 E4 85 F1 | 	sub	objptr, ##5824
19b78     2C 13 06 F6 | 	mov	arg01, #300
19b7c     C0 2B B0 FD | 	call	#__system___waitms
19b80     00 12 06 F6 | 	mov	arg01, #0
19b84     0B 00 00 FF 
19b88     C0 E4 05 F1 | 	add	objptr, ##5824
19b8c     BC 25 B0 FD | 	call	#_audio096_spin2_stop
19b90     0B 00 00 FF 
19b94     C0 E4 85 F1 | 	sub	objptr, ##5824
19b98                 | LR__1976
19b98                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
19b98     7B 00 00 FF 
19b9c     94 E4 05 F1 | 	add	objptr, ##63124
19ba0     F2 20 02 FB | 	rdlong	local02, objptr
19ba4     7B 00 00 FF 
19ba8     94 E4 85 F1 | 	sub	objptr, ##63124
19bac     10 21 E2 F8 | 	getbyte	local02, local02, #0
19bb0     2B 20 0E F2 | 	cmp	local02, #43 wz
19bb4     AC 00 90 5D |  if_ne	jmp	#LR__1979
19bb8     38 E4 05 F1 | 	add	objptr, #56
19bbc     F2 24 E2 FA | 	rdword	local04, objptr
19bc0     38 E4 85 F1 | 	sub	objptr, #56
19bc4     12 23 32 F9 | 	getword	local03, local04, #0
19bc8     F0 22 16 F2 | 	cmp	local03, #240 wc
19bcc     94 00 90 3D |  if_ae	jmp	#LR__1979
19bd0     38 E4 05 F1 | 	add	objptr, #56
19bd4     F2 20 E2 FA | 	rdword	local02, objptr
19bd8     10 23 52 F6 | 	abs	local03, local02 wc
19bdc     11 23 42 F8 | 	getnib	local03, local03, #0
19be0     11 23 82 F6 | 	negc	local03, local03
19be4     11 25 52 F6 | 	abs	local04, local03 wc
19be8     01 24 46 F0 | 	shr	local04, #1
19bec     12 25 82 F6 | 	negc	local04, local04
19bf0     7B 00 00 FF 
19bf4     68 E4 05 F1 | 	add	objptr, ##63080
19bf8     F2 24 62 FC | 	wrlong	local04, objptr
19bfc     12 31 02 F6 | 	mov	local10, local04
19c00     7B 00 00 FF 
19c04     A0 E4 85 F1 | 	sub	objptr, ##63136
19c08                 | LR__1977
19c08     08 30 56 F2 | 	cmps	local10, #8 wc
19c0c     54 00 90 3D |  if_ae	jmp	#LR__1978
19c10     57 00 00 FF 
19c14     00 E4 05 F1 | 	add	objptr, ##44544
19c18     F2 12 02 FB | 	rdlong	arg01, objptr
19c1c     57 00 00 FF 
19c20     00 E4 85 F1 | 	sub	objptr, ##44544
19c24     63 01 00 FF 
19c28     90 24 06 F6 | 	mov	local04, ##@LR__5022
19c2c     12 15 02 F6 | 	mov	arg02, local04
19c30     74 28 B0 FD | 	call	#__system___string_concat
19c34     57 00 00 FF 
19c38     00 E4 05 F1 | 	add	objptr, ##44544
19c3c     F2 FA 61 FC | 	wrlong	result1, objptr
19c40     57 00 00 FF 
19c44     00 E4 85 F1 | 	sub	objptr, ##44544
19c48     63 01 00 FF 
19c4c     92 12 06 F6 | 	mov	arg01, ##@LR__5023
19c50     BC 16 B0 FD | 	call	#_hg010b_spin2_write
19c54     18 23 02 F6 | 	mov	local03, local10
19c58     01 22 06 F1 | 	add	local03, #1
19c5c     11 31 02 F6 | 	mov	local10, local03
19c60     A4 FF 9F FD | 	jmp	#LR__1977
19c64                 | LR__1978
19c64                 | LR__1979
19c64                 | '  
19c64                 | '   'backspace
19c64                 | '   if (key3 and 255) = 42 then 
19c64     7B 00 00 FF 
19c68     94 E4 05 F1 | 	add	objptr, ##63124
19c6c     F2 20 02 FB | 	rdlong	local02, objptr
19c70     7B 00 00 FF 
19c74     94 E4 85 F1 | 	sub	objptr, ##63124
19c78     10 21 E2 F8 | 	getbyte	local02, local02, #0
19c7c     2A 20 0E F2 | 	cmp	local02, #42 wz
19c80     D4 00 90 5D |  if_ne	jmp	#LR__1984
19c84                 | '       if v.cursor_x>4 then 
19c84     38 E4 05 F1 | 	add	objptr, #56
19c88     F2 20 E2 FA | 	rdword	local02, objptr
19c8c     38 E4 85 F1 | 	sub	objptr, #56
19c90     05 20 16 F2 | 	cmp	local02, #5 wc
19c94     9C 00 90 CD |  if_b	jmp	#LR__1982
19c98     57 00 00 FF 
19c9c     00 E4 05 F1 | 	add	objptr, ##44544
19ca0     F2 26 02 FB | 	rdlong	local05, objptr
19ca4     57 00 00 FF 
19ca8     00 E4 85 F1 | 	sub	objptr, ##44544
19cac     13 13 02 F6 | 	mov	arg01, local05
19cb0     09 33 02 F6 | 	mov	local11, arg01
19cb4     97 06 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
19cb8                 | LR__1980
19cb8     19 FB C9 FA | 	rdbyte	result1, local11 wz
19cbc     01 32 06 51 |  if_ne	add	local11, #1
19cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__1980
19cc4                 | LR__1981
19cc4     09 33 82 F1 | 	sub	local11, arg01
19cc8     19 15 02 F6 | 	mov	arg02, local11
19ccc     01 14 86 F1 | 	sub	arg02, #1
19cd0     13 13 02 F6 | 	mov	arg01, local05
19cd4     B8 47 B0 FD | 	call	#__system__Left_S
19cd8     57 00 00 FF 
19cdc     00 E4 05 F1 | 	add	objptr, ##44544
19ce0     F2 FA 61 FC | 	wrlong	result1, objptr
19ce4     56 00 00 FF 
19ce8     C8 E5 85 F1 | 	sub	objptr, ##44488
19cec     F2 12 E2 FA | 	rdword	arg01, objptr
19cf0     02 12 86 F1 | 	sub	arg01, #2
19cf4     02 E4 05 F1 | 	add	objptr, #2
19cf8     F2 14 C2 FA | 	rdbyte	arg02, objptr
19cfc     3A E4 85 F1 | 	sub	objptr, #58
19d00     7C 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19d04     20 12 06 F6 | 	mov	arg01, #32
19d08     E8 13 B0 FD | 	call	#_hg010b_spin2_putchar
19d0c     38 E4 05 F1 | 	add	objptr, #56
19d10     F2 12 E2 FA | 	rdword	arg01, objptr
19d14     02 12 86 F1 | 	sub	arg01, #2
19d18     02 E4 05 F1 | 	add	objptr, #2
19d1c     F2 24 C2 FA | 	rdbyte	local04, objptr
19d20     3A E4 85 F1 | 	sub	objptr, #58
19d24     12 23 E2 F8 | 	getbyte	local03, local04, #0
19d28     11 15 02 F6 | 	mov	arg02, local03
19d2c     50 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19d30     24 00 90 FD | 	jmp	#LR__1983
19d34                 | LR__1982
19d34     63 01 00 FF 
19d38     94 20 06 F6 | 	mov	local02, ##@LR__5024
19d3c     57 00 00 FF 
19d40     00 E4 05 F1 | 	add	objptr, ##44544
19d44     F2 20 62 FC | 	wrlong	local02, objptr
19d48     56 00 00 FF 
19d4c     C8 E5 85 F1 | 	sub	objptr, ##44488
19d50     F2 08 58 FC | 	wrword	#4, objptr
19d54     38 E4 85 F1 | 	sub	objptr, #56
19d58                 | LR__1983
19d58                 | LR__1984
19d58                 | '    
19d58                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
19d58                 | '  
19d58                 | '   if key4=key_enter then 
19d58     7B 00 00 FF 
19d5c     9C E4 05 F1 | 	add	objptr, ##63132
19d60     F2 28 02 FB | 	rdlong	local06, objptr
19d64     7B 00 00 FF 
19d68     9C E4 85 F1 | 	sub	objptr, ##63132
19d6c     8D 28 0E F2 | 	cmp	local06, #141 wz
19d70     50 00 90 5D |  if_ne	jmp	#LR__1985
19d74     F8 16 B0 FD | 	call	#_hg010b_spin2_crlf
19d78     A0 6C BE FD | 	call	#_interpret
19d7c     63 01 00 FF 
19d80     95 20 06 F6 | 	mov	local02, ##@LR__5025
19d84     57 00 00 FF 
19d88     00 E4 05 F1 | 	add	objptr, ##44544
19d8c     F2 20 62 FC | 	wrlong	local02, objptr
19d90     1A FA 61 FD | 	getct	result1
19d94     24 00 00 FF 
19d98     A4 E4 05 F1 | 	add	objptr, ##18596
19d9c     F2 24 02 FB | 	rdlong	local04, objptr
19da0     12 23 02 F6 | 	mov	local03, local04
19da4     11 FB 81 F1 | 	sub	result1, local03
19da8     F2 FA 61 FC | 	wrlong	result1, objptr
19dac     14 E4 85 F1 | 	sub	objptr, #20
19db0     F2 00 68 FC | 	wrlong	#0, objptr
19db4     08 E4 05 F1 | 	add	objptr, #8
19db8     F2 00 68 FC | 	wrlong	#0, objptr
19dbc     7B 00 00 FF 
19dc0     98 E4 85 F1 | 	sub	objptr, ##63128
19dc4                 | LR__1985
19dc4     7B 00 00 FF 
19dc8     94 E4 05 F1 | 	add	objptr, ##63124
19dcc     F2 00 68 FC | 	wrlong	#0, objptr
19dd0     7B 00 00 FF 
19dd4     94 E4 85 F1 | 	sub	objptr, ##63124
19dd8     80 F6 9F FD | 	jmp	#LR__1960
19ddc     A7 F0 03 F6 | 	mov	ptra, fp
19de0     B2 00 A0 FD | 	call	#popregs_
19de4                 | _program_ret
19de4     2D 00 64 FD | 	ret
19de8                 | 
19de8                 | ' '' this is not a main program.
19de8                 | ' 
19de8                 | ' '****************************************************************************************************************
19de8                 | ' '                                                                                                             	*
19de8                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
19de8                 | ' '                                                                                                            	*
19de8                 | ' ' mode - mode #, see below											*
19de8                 | ' ' base - HDMI base pin												*
19de8                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
19de8                 | ' '														*
19de8                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
19de8                 | ' '' set bit #15 for custom timings														*
19de8                 | ' '' p - 1 - psram, 0 - hub											*
19de8                 | ' '' t - 1 - graphics, 0 - text											*
19de8                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
19de8                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
19de8                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
19de8                 | ' '														*
19de8                 | ' '****************************************************************************************************************
19de8                 | ' 
19de8                 | ' pub start(base,mb):result |i
19de8                 | _hg010b_spin2_start
19de8                 | ' 
19de8                 | ' '--------------------------- initialize pointers and variables
19de8                 | ' 
19de8                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
19de8     30 E4 05 F1 | 	add	objptr, #48
19dec     F2 FA 01 F6 | 	mov	result1, objptr
19df0     28 E4 85 F1 | 	sub	objptr, #40
19df4     F2 FA 61 FC | 	wrlong	result1, objptr
19df8                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
19df8                 | ' hdmibase:=base							' HDMI base pin, 8*n
19df8     18 E4 05 F1 | 	add	objptr, #24
19dfc     F2 12 62 FC | 	wrlong	arg01, objptr
19e00                 | ' mailbox_ptr:=mb		
19e00     04 E4 05 F1 | 	add	objptr, #4
19e04     F2 14 62 FC | 	wrlong	arg02, objptr
19e08                 | ' mailbox0:=mb				' PSRAM mailbox pointer
19e08     C1 E5 05 F1 | 	add	objptr, #449
19e0c     F2 14 62 FC | 	wrlong	arg02, objptr
19e10                 | ' sprite_ptr:=@spr1ptr
19e10     D8 E4 85 F1 | 	sub	objptr, #216
19e14     F2 FA 01 F6 | 	mov	result1, objptr
19e18     E5 E4 85 F1 | 	sub	objptr, #229
19e1c     F2 FA 61 FC | 	wrlong	result1, objptr
19e20                 | ' 
19e20                 | ' 		'
19e20                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
19e20     E5 E4 05 F1 | 	add	objptr, #229
19e24     F2 FA 01 FB | 	rdlong	result1, objptr
19e28     D0 FA 05 F1 | 	add	result1, #208
19e2c     FD 10 58 FC | 	wrword	#8, result1
19e30                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
19e30     F2 16 02 FB | 	rdlong	arg03, objptr
19e34     D2 16 06 F1 | 	add	arg03, #210
19e38     0B 21 58 FC | 	wrword	#16, arg03
19e3c                 | ' leading_spaces:=0				'
19e3c     A5 E5 05 F1 | 	add	objptr, #421
19e40     F2 00 68 FC | 	wrlong	#0, objptr
19e44                 | ' 
19e44                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
19e44     99 E4 85 F1 | 	sub	objptr, #153
19e48     00 00 A0 FF 
19e4c     F2 0E 68 FC | 	wrlong	##1073741831, objptr
19e50                 | ' emptydl[1]:=0
19e50     04 E4 05 F1 | 	add	objptr, #4
19e54     F2 00 68 FC | 	wrlong	#0, objptr
19e58                 | ' 
19e58                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
19e58                 | ' 
19e58                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
19e58     28 E5 85 F1 | 	sub	objptr, #296
19e5c     F2 02 68 FC | 	wrlong	#1, objptr
19e60                 | ' if s_debug<>0
19e60                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
19e60     20 00 80 FF 
19e64     F2 00 68 FC | 	wrlong	##16384, objptr
19e68     F5 E4 85 F1 | 	sub	objptr, #245
19e6c                 | ' setmode()							' set the mode, see below
19e6c     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
19e70                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
19e70     45 E4 05 F1 | 	add	objptr, #69
19e74     F2 FA 01 F6 | 	mov	result1, objptr
19e78     35 E4 85 F1 | 	sub	objptr, #53
19e7c     F2 FA 61 FC | 	wrlong	result1, objptr
19e80                 | ' cursor_ptr:=@cursor_x						
19e80     28 E4 05 F1 | 	add	objptr, #40
19e84     F2 16 02 F6 | 	mov	arg03, objptr
19e88     2C E4 85 F1 | 	sub	objptr, #44
19e8c     F2 16 62 FC | 	wrlong	arg03, objptr
19e90                 | ' fontnum:=0  							' start with a PC type font 
19e90     55 E4 05 F1 | 	add	objptr, #85
19e94     F2 00 68 FC | 	wrlong	#0, objptr
19e98                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
19e98     1C E4 05 F1 | 	add	objptr, #28
19e9c     F2 12 02 F6 | 	mov	arg01, objptr
19ea0     7D E4 85 F1 | 	sub	objptr, #125
19ea4     10 00 00 FF 
19ea8     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
19eac     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
19eb0     10 00 00 FF 
19eb4     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
19eb8     10 16 06 F6 | 	mov	arg03, #16
19ebc     AC 24 B0 FD | 	call	#__system____builtin_memmove
19ec0                 | ' leading_spaces:=0
19ec0     01 00 00 FF 
19ec4     B2 E4 05 F1 | 	add	objptr, ##690
19ec8     F2 00 68 FC | 	wrlong	#0, objptr
19ecc     01 00 00 FF 
19ed0     B2 E4 85 F1 | 	sub	objptr, ##690
19ed4                 | ' '---------------------------- initialize a cursor (MSDOS type)
19ed4                 | ' 
19ed4                 | ' initcursor(154)
19ed4     9A 12 06 F6 | 	mov	arg01, #154
19ed8     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
19edc                 | ' 
19edc                 | ' '---------------------------- start the cog
19edc                 | ' 
19edc                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
19edc     10 00 00 FF 
19ee0     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
19ee4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
19ee8     10 00 00 FF 
19eec     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
19ef0     10 E4 05 F1 | 	add	objptr, #16
19ef4     10 FA 05 F6 | 	mov	result1, #16
19ef8     28 E4 61 FD | 	setq	objptr
19efc     0A FB F1 FC | 	coginit	result1, arg02 wc
19f00     01 FA 65 C6 |  if_b	neg	result1, #1
19f04     1C E4 05 F1 | 	add	objptr, #28
19f08     F2 FA 61 FC | 	wrlong	result1, objptr
19f0c     2C E4 85 F1 | 	sub	objptr, #44
19f10                 | ' waitms(40)							' wait for stabilize
19f10     28 12 06 F6 | 	mov	arg01, #40
19f14     28 28 B0 FD | 	call	#__system___waitms
19f18                 | ' return cog							' return the driver's cog #
19f18     2C E4 05 F1 | 	add	objptr, #44
19f1c     F2 FA 01 FB | 	rdlong	result1, objptr
19f20     2C E4 85 F1 | 	sub	objptr, #44
19f24                 | _hg010b_spin2_start_ret
19f24     2D 00 64 FD | 	ret
19f28                 | 
19f28                 | ' 
19f28                 | ' 
19f28                 | ' '**************************************************************************************************************** 
19f28                 | ' '                                                                                                             	*
19f28                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
19f28                 | ' '  Mode number - see start() above or bits below								*
19f28                 | ' '                                                                                                             	*
19f28                 | ' '****************************************************************************************************************
19f28                 | ' 
19f28                 | ' '---------------------------- initialize a cursor (MSDOS type)
19f28                 | ' pub initcursor(color) |i
19f28                 | _hg010b_spin2_initcursor
19f28     03 4A 05 F6 | 	mov	COUNT_, #3
19f2c     A8 00 A0 FD | 	call	#pushregs_
19f30     09 1F 02 F6 | 	mov	local01, arg01
19f34                 | ' 
19f34                 | ' cursor_x:=0							' place the cursor at 0:0
19f34     38 E4 05 F1 | 	add	objptr, #56
19f38     F2 00 58 FC | 	wrword	#0, objptr
19f3c                 | ' cursor_y:=0
19f3c     02 E4 05 F1 | 	add	objptr, #2
19f40     F2 00 48 FC | 	wrbyte	#0, objptr
19f44                 | ' repeat i from 0 to 111
19f44     00 20 06 F6 | 	mov	local02, #0
19f48     F8 E5 05 F1 | 	add	objptr, #504
19f4c     97 1A 48 FB | 	callpa	#(@LR__1992-@LR__1990)>>2,fcache_load_ptr_
19f50                 | LR__1990
19f50                 | '   cursor[i]:=0
19f50     10 23 02 F6 | 	mov	local03, local02
19f54     F2 22 02 F1 | 	add	local03, objptr
19f58     11 01 48 FC | 	wrbyte	#0, local03
19f5c     01 20 06 F1 | 	add	local02, #1
19f60     70 20 56 F2 | 	cmps	local02, #112 wc
19f64     E8 FF 9F CD |  if_b	jmp	#LR__1990
19f68                 | ' repeat i from 112 to 127
19f68     70 20 06 F6 | 	mov	local02, #112
19f6c                 | LR__1991
19f6c                 | '   cursor[i]:=color  
19f6c     10 23 02 F6 | 	mov	local03, local02
19f70     F2 22 02 F1 | 	add	local03, objptr
19f74     11 1F 42 FC | 	wrbyte	local01, local03
19f78     01 20 06 F1 | 	add	local02, #1
19f7c     80 20 16 F2 | 	cmp	local02, #128 wc
19f80     E8 FF 9F CD |  if_b	jmp	#LR__1991
19f84                 | LR__1992
19f84                 | ' 'repeat i from 0 to 127
19f84                 | ' '  if ((i/8)//2)
19f84                 | ' '    cursor[i]:=15
19f84                 | ' '  else
19f84                 | ' '    cursor[i]:=0
19f84                 | ' '  if i>=120    
19f84                 | ' '    cursor[i]:=40
19f84                 | ' setspriteptr(17,@cursor)
19f84     F2 14 02 F6 | 	mov	arg02, objptr
19f88     01 00 00 FF 
19f8c     32 E4 85 F1 | 	sub	objptr, ##562
19f90     11 12 06 F6 | 	mov	arg01, #17
19f94     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
19f98                 | ' setspritesize(17,8,16)
19f98     11 12 06 F6 | 	mov	arg01, #17
19f9c     08 14 06 F6 | 	mov	arg02, #8
19fa0     10 16 06 F6 | 	mov	arg03, #16
19fa4     C8 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
19fa8                 | ' setspritepos(17,0,0)
19fa8     11 12 06 F6 | 	mov	arg01, #17
19fac     00 14 06 F6 | 	mov	arg02, #0
19fb0     00 16 06 F6 | 	mov	arg03, #0
19fb4     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
19fb8     A7 F0 03 F6 | 	mov	ptra, fp
19fbc     B2 00 A0 FD | 	call	#popregs_
19fc0                 | _hg010b_spin2_initcursor_ret
19fc0     2D 00 64 FD | 	ret
19fc4                 | 
19fc4                 | ' 
19fc4                 | '  
19fc4                 | ' pub setcursorcolor(color) |i
19fc4                 | _hg010b_spin2_setcursorcolor
19fc4                 | ' 
19fc4                 | ' 
19fc4                 | ' repeat i from 0 to 111
19fc4     00 00 06 F6 | 	mov	_var01, #0
19fc8     01 00 00 FF 
19fcc     32 E4 05 F1 | 	add	objptr, ##562
19fd0     97 1A 48 FB | 	callpa	#(@LR__2002-@LR__2000)>>2,fcache_load_ptr_
19fd4                 | LR__2000
19fd4                 | '   cursor[i]:=0
19fd4     00 03 02 F6 | 	mov	_var02, _var01
19fd8     F2 02 02 F1 | 	add	_var02, objptr
19fdc     01 01 48 FC | 	wrbyte	#0, _var02
19fe0     01 00 06 F1 | 	add	_var01, #1
19fe4     70 00 56 F2 | 	cmps	_var01, #112 wc
19fe8     E8 FF 9F CD |  if_b	jmp	#LR__2000
19fec                 | ' repeat i from 112 to 127
19fec     70 00 06 F6 | 	mov	_var01, #112
19ff0                 | LR__2001
19ff0                 | '   cursor[i]:=color  
19ff0     00 03 02 F6 | 	mov	_var02, _var01
19ff4     F2 02 02 F1 | 	add	_var02, objptr
19ff8     01 13 42 FC | 	wrbyte	arg01, _var02
19ffc     01 00 06 F1 | 	add	_var01, #1
1a000     80 00 16 F2 | 	cmp	_var01, #128 wc
1a004     E8 FF 9F CD |  if_b	jmp	#LR__2001
1a008                 | LR__2002
1a008     01 00 00 FF 
1a00c     32 E4 85 F1 | 	sub	objptr, ##562
1a010                 | _hg010b_spin2_setcursorcolor_ret
1a010     2D 00 64 FD | 	ret
1a014                 | 
1a014                 | '  
1a014                 | ' 
1a014                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1a014                 | _hg010b_spin2_setmode
1a014     02 4A 05 F6 | 	mov	COUNT_, #2
1a018     A8 00 A0 FD | 	call	#pushregs_
1a01c                 | ' 
1a01c                 | ' 
1a01c                 | ' dl_ptr:=@emptydl[0]
1a01c     01 00 00 FF 
1a020     19 E4 05 F1 | 	add	objptr, ##537
1a024     F2 66 02 F6 | 	mov	muldivb_, objptr
1a028     FD E5 85 F1 | 	sub	objptr, #509
1a02c     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a030                 | ' 
1a030                 | ' if cog>0 
1a030     10 E4 05 F1 | 	add	objptr, #16
1a034     F2 66 02 FB | 	rdlong	muldivb_, objptr
1a038     2C E4 85 F1 | 	sub	objptr, #44
1a03c     01 66 56 F2 | 	cmps	muldivb_, #1 wc
1a040                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1a040     01 12 06 36 |  if_ae	mov	arg01, #1
1a044     9C 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1a048                 | ' xres:=1024
1a048     01 00 00 FF 
1a04c     22 E4 05 F1 | 	add	objptr, ##546
1a050     02 00 80 FF 
1a054     F2 00 68 FC | 	wrlong	##1024, objptr
1a058                 | ' yres:=576  
1a058     04 E4 05 F1 | 	add	objptr, #4
1a05c     01 00 80 FF 
1a060     F2 80 68 FC | 	wrlong	##576, objptr
1a064                 | ' ppl:=(timings[3])
1a064     10 00 00 FF 
1a068     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1a06c     F7 66 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
1a070     51 E5 85 F1 | 	sub	objptr, #337
1a074     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a078                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1a078     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1a07c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1a080     01 1E 66 F0 | 	shl	local01, #1
1a084     80 E4 85 F1 | 	sub	objptr, #128
1a088     F2 1E 62 FC | 	wrlong	local01, objptr
1a08c                 | ' cpl1:=cpl '' todo remove
1a08c     04 E4 05 F1 | 	add	objptr, #4
1a090     F2 1E 62 FC | 	wrlong	local01, objptr
1a094                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1a094     02 00 00 FF 
1a098     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1a09c     41 E4 85 F1 | 	sub	objptr, #65
1a0a0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1a0a4                 | ' repeat i from 0 to 3
1a0a4     00 20 06 F6 | 	mov	local02, #0
1a0a8     02 00 00 FF 
1a0ac     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1a0b0     08 E4 05 F1 | 	add	objptr, #8
1a0b4     97 20 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
1a0b8                 | LR__2010
1a0b8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1a0b8     10 1F 02 F6 | 	mov	local01, local02
1a0bc     02 1E 66 F0 | 	shl	local01, #2
1a0c0     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1a0c4     F2 66 02 FB | 	rdlong	muldivb_, objptr
1a0c8     11 66 66 F0 | 	shl	muldivb_, #17
1a0cc     0F 1F 02 FB | 	rdlong	local01, local01
1a0d0     33 1F 02 F1 | 	add	local01, muldivb_
1a0d4     80 40 38 FF 
1a0d8     00 1E 06 F1 | 	add	local01, ##1887502336
1a0dc     10 67 02 F6 | 	mov	muldivb_, local02
1a0e0     02 66 66 F0 | 	shl	muldivb_, #2
1a0e4     F7 66 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
1a0e8     33 1F 62 FC | 	wrlong	local01, muldivb_
1a0ec     01 20 06 F1 | 	add	local02, #1
1a0f0     04 20 56 F2 | 	cmps	local02, #4 wc
1a0f4     C0 FF 9F CD |  if_b	jmp	#LR__2010
1a0f8                 | LR__2011
1a0f8     20 E4 85 F1 | 	sub	objptr, #32
1a0fc                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1a0fc     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1a100     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1a104     14 1E 66 FC | 	wrlong	local01, #20
1a108                 | ' hubset(timings[10])
1a108     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1a10c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1a110     10 00 00 FF 
1a114     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1a118     00 12 62 FD | 	hubset	arg01
1a11c                 | ' waitms(1)                                                   	' wait for stabilization
1a11c     01 12 06 F6 | 	mov	arg01, #1
1a120     1C 26 B0 FD | 	call	#__system___waitms
1a124     10 00 00 FF 
1a128     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1a12c     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1a130     5D E4 05 F1 | 	add	objptr, #93
1a134     F2 20 62 FC | 	wrlong	local02, objptr
1a138     10 1F 52 F6 | 	abs	local01, local02 wc
1a13c     04 1E 46 F0 | 	shr	local01, #4
1a140     0F 1F 82 F6 | 	negc	local01, local01
1a144     9C E4 05 F1 | 	add	objptr, #156
1a148     F2 1E 62 FC | 	wrlong	local01, objptr
1a14c     A4 E4 85 F1 | 	sub	objptr, #164
1a150     F2 20 02 FB | 	rdlong	local02, objptr
1a154     08 E4 05 F1 | 	add	objptr, #8
1a158     F2 1E 02 FB | 	rdlong	local01, objptr
1a15c     0F 21 02 FD | 	qmul	local02, local01
1a160                 | ' lines:=timings[11]
1a160                 | ' t_lines:=lines/16
1a160                 | ' buflen:=cpl*lines						' framebuffer length in longs
1a160     29 E4 85 F1 | 	sub	objptr, #41
1a164                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1a164     19 1E C6 F9 | 	decod	local01, #25
1a168                 | ' mode_ptr:=@timings						' set pointers to timings
1a168     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
1a16c                 | ' graphmode:=1024+512+192+48							' det global variable
1a16c                 | ' makedl(graphmode)							' make a DL for the mode
1a16c     03 00 00 FF 
1a170     F0 12 06 F6 | 	mov	arg01, ##1776
1a174     18 20 62 FD | 	getqx	local02
1a178     F2 20 62 FC | 	wrlong	local02, objptr
1a17c     34 E4 85 F1 | 	sub	objptr, #52
1a180     02 20 66 F0 | 	shl	local02, #2
1a184     10 1F 82 F1 | 	sub	local01, local02
1a188     F2 1E 62 FC | 	wrlong	local01, objptr
1a18c     14 E4 05 F1 | 	add	objptr, #20
1a190     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1a194     79 E4 05 F1 | 	add	objptr, #121
1a198     03 00 80 FF 
1a19c     F2 E0 69 FC | 	wrlong	##1776, objptr
1a1a0     8D E4 85 F1 | 	sub	objptr, #141
1a1a4     10 00 00 FF 
1a1a8     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1a1ac     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
1a1b0                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1a1b0     F2 1E 02 FB | 	rdlong	local01, objptr
1a1b4     D9 E4 05 F1 | 	add	objptr, #217
1a1b8     F2 1E 62 FC | 	wrlong	local01, objptr
1a1bc                 | ' s_font_ptr:=font_ptr
1a1bc     D5 E4 85 F1 | 	sub	objptr, #213
1a1c0     F2 1E 02 FB | 	rdlong	local01, objptr
1a1c4     D9 E4 05 F1 | 	add	objptr, #217
1a1c8     F2 1E 62 FC | 	wrlong	local01, objptr
1a1cc                 | ' s_lines:=lines
1a1cc     80 E4 85 F1 | 	sub	objptr, #128
1a1d0     F2 1E 02 FB | 	rdlong	local01, objptr
1a1d4     84 E4 05 F1 | 	add	objptr, #132
1a1d8     F2 1E 62 FC | 	wrlong	local01, objptr
1a1dc                 | ' s_buflen:=buflen
1a1dc     AD E4 85 F1 | 	sub	objptr, #173
1a1e0     F2 1E 02 FB | 	rdlong	local01, objptr
1a1e4     B5 E4 05 F1 | 	add	objptr, #181
1a1e8     F2 1E 62 FC | 	wrlong	local01, objptr
1a1ec                 | ' s_cpl:=cpl
1a1ec     94 E4 85 F1 | 	sub	objptr, #148
1a1f0     F2 1E 02 FB | 	rdlong	local01, objptr
1a1f4     90 E4 05 F1 | 	add	objptr, #144
1a1f8     F2 1E 62 FC | 	wrlong	local01, objptr
1a1fc                 | ' s_cpl1:=cpl
1a1fc     90 E4 85 F1 | 	sub	objptr, #144
1a200     F2 1E 02 FB | 	rdlong	local01, objptr
1a204     98 E4 05 F1 | 	add	objptr, #152
1a208     F2 1E 62 FC | 	wrlong	local01, objptr
1a20c                 | ' st_lines:=t_lines
1a20c     0C E4 05 F1 | 	add	objptr, #12
1a210     F2 1E 02 FB | 	rdlong	local01, objptr
1a214     04 E4 05 F1 | 	add	objptr, #4
1a218     F2 1E 62 FC | 	wrlong	local01, objptr
1a21c                 | ' ppl:=ppl/xzoom  
1a21c     28 E4 85 F1 | 	sub	objptr, #40
1a220     F2 64 02 FB | 	rdlong	muldiva_, objptr
1a224     2C E4 05 F1 | 	add	objptr, #44
1a228     F2 66 02 FB | 	rdlong	muldivb_, objptr
1a22c     01 E5 85 F1 | 	sub	objptr, #257
1a230     BA 00 A0 FD | 	call	#divide_
1a234     D5 E4 05 F1 | 	add	objptr, #213
1a238     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a23c                 | ' s_ppl:=ppl
1a23c     1C E4 05 F1 | 	add	objptr, #28
1a240     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a244     F1 E4 85 F1 | 	sub	objptr, #241
1a248                 | ' waitms(20)							' wait 
1a248     14 12 06 F6 | 	mov	arg01, #20
1a24c     F0 24 B0 FD | 	call	#__system___waitms
1a250     A7 F0 03 F6 | 	mov	ptra, fp
1a254     B2 00 A0 FD | 	call	#popregs_
1a258                 | _hg010b_spin2_setmode_ret
1a258     2D 00 64 FD | 	ret
1a25c                 | 
1a25c                 | ' 
1a25c                 | ' 
1a25c                 | ' '****************************************************************************************************************
1a25c                 | ' '                                                                                                             	*
1a25c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1a25c                 | ' '                                                                                                             	*
1a25c                 | ' '****************************************************************************************************************
1a25c                 | ' 
1a25c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1a25c                 | _hg010b_spin2_makedl
1a25c                 | ' 
1a25c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1a25c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1a25c                 | ' repeat i from 0 to 11                                                           ' clear DL
1a25c     00 00 06 F6 | 	mov	_var01, #0
1a260     E9 E5 05 F1 | 	add	objptr, #489
1a264     97 0E 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
1a268                 | LR__2020
1a268                 | '   displaylist[i]:=0 
1a268     00 03 02 F6 | 	mov	_var02, _var01
1a26c     02 02 66 F0 | 	shl	_var02, #2
1a270     F2 02 02 F1 | 	add	_var02, objptr
1a274     01 01 68 FC | 	wrlong	#0, _var02
1a278     01 00 06 F1 | 	add	_var01, #1
1a27c     0C 00 56 F2 | 	cmps	_var01, #12 wc
1a280     E4 FF 9F CD |  if_b	jmp	#LR__2020
1a284                 | LR__2021
1a284                 | '                         ' 
1a284                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1a284     8C E5 85 F1 | 	sub	objptr, #396
1a288     F2 02 02 FB | 	rdlong	_var02, objptr
1a28c     14 02 66 F0 | 	shl	_var02, #20
1a290     01 02 06 F1 | 	add	_var02, #1
1a294     04 E4 85 F1 | 	sub	objptr, #4
1a298     F2 00 02 FB | 	rdlong	_var01, objptr
1a29c     02 00 66 F0 | 	shl	_var01, #2
1a2a0     04 00 66 F0 | 	shl	_var01, #4
1a2a4     00 03 02 F1 | 	add	_var02, _var01
1a2a8     90 E5 05 F1 | 	add	objptr, #400
1a2ac     F2 02 62 FC | 	wrlong	_var02, objptr
1a2b0     E9 E5 85 F1 | 	sub	objptr, #489
1a2b4                 | ' displaylist[1]:=buf_ptr<<4+%10  
1a2b4     F2 02 02 FB | 	rdlong	_var02, objptr
1a2b8     04 02 66 F0 | 	shl	_var02, #4
1a2bc     02 02 06 F1 | 	add	_var02, #2
1a2c0     ED E5 05 F1 | 	add	objptr, #493
1a2c4     F2 02 62 FC | 	wrlong	_var02, objptr
1a2c8                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1a2c8     04 E4 85 F1 | 	sub	objptr, #4
1a2cc     F2 02 02 F6 | 	mov	_var02, objptr
1a2d0     CD E5 85 F1 | 	sub	objptr, #461
1a2d4     F2 02 62 FC | 	wrlong	_var02, objptr
1a2d8     1C E4 85 F1 | 	sub	objptr, #28
1a2dc                 | _hg010b_spin2_makedl_ret
1a2dc     2D 00 64 FD | 	ret
1a2e0                 | 
1a2e0                 | ' 
1a2e0                 | ' 
1a2e0                 | ' '****************************************************************************************************************
1a2e0                 | ' '                                                                        					*
1a2e0                 | ' '  Graphic primitives                                                    					*
1a2e0                 | ' '                                                                        					*
1a2e0                 | ' '****************************************************************************************************************
1a2e0                 | ' 
1a2e0                 | ' pub setspriteptr(num,ptr)
1a2e0                 | _hg010b_spin2_setspriteptr
1a2e0                 | ' long[@spr1ptr+12*num]:=ptr
1a2e0     0D E5 05 F1 | 	add	objptr, #269
1a2e4     F2 00 02 F6 | 	mov	_var01, objptr
1a2e8     09 03 02 F6 | 	mov	_var02, arg01
1a2ec     01 02 66 F0 | 	shl	_var02, #1
1a2f0     09 03 02 F1 | 	add	_var02, arg01
1a2f4     02 02 66 F0 | 	shl	_var02, #2
1a2f8     01 01 02 F1 | 	add	_var01, _var02
1a2fc     00 15 62 FC | 	wrlong	arg02, _var01
1a300     0D E5 85 F1 | 	sub	objptr, #269
1a304                 | _hg010b_spin2_setspriteptr_ret
1a304     2D 00 64 FD | 	ret
1a308                 | 
1a308                 | ' 
1a308                 | ' pub setspritepos(num,x,y)
1a308                 | _hg010b_spin2_setspritepos
1a308                 | ' if y>601
1a308     01 00 00 FF 
1a30c     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1a310                 | '   y:=601
1a310     01 00 00 3F 
1a314     59 16 06 36 |  if_ae	mov	arg03, ##601
1a318                 | ' if x>1024
1a318     02 00 00 FF 
1a31c     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1a320                 | '   x:=1024
1a320     0A 14 C6 39 |  if_ae	decod	arg02, #10
1a324                 | ' word[@spr1ptr+12*num+4]:=x
1a324     0D E5 05 F1 | 	add	objptr, #269
1a328     F2 00 02 F6 | 	mov	_var01, objptr
1a32c     09 03 02 F6 | 	mov	_var02, arg01
1a330     01 02 66 F0 | 	shl	_var02, #1
1a334     09 03 02 F1 | 	add	_var02, arg01
1a338     02 02 66 F0 | 	shl	_var02, #2
1a33c     01 01 02 F1 | 	add	_var01, _var02
1a340     04 00 06 F1 | 	add	_var01, #4
1a344     00 15 52 FC | 	wrword	arg02, _var01
1a348                 | ' word[@spr1ptr+12*num+6]:=y
1a348     F2 00 02 F6 | 	mov	_var01, objptr
1a34c     09 03 02 F6 | 	mov	_var02, arg01
1a350     01 02 66 F0 | 	shl	_var02, #1
1a354     09 03 02 F1 | 	add	_var02, arg01
1a358     02 02 66 F0 | 	shl	_var02, #2
1a35c     01 01 02 F1 | 	add	_var01, _var02
1a360     06 00 06 F1 | 	add	_var01, #6
1a364     00 17 52 FC | 	wrword	arg03, _var01
1a368     0D E5 85 F1 | 	sub	objptr, #269
1a36c                 | _hg010b_spin2_setspritepos_ret
1a36c     2D 00 64 FD | 	ret
1a370                 | 
1a370                 | ' 
1a370                 | ' pub setspritesize(num,w,h)
1a370                 | _hg010b_spin2_setspritesize
1a370                 | ' word[@spr1ptr+12*num+8]:=w
1a370     0D E5 05 F1 | 	add	objptr, #269
1a374     F2 00 02 F6 | 	mov	_var01, objptr
1a378     09 03 02 F6 | 	mov	_var02, arg01
1a37c     01 02 66 F0 | 	shl	_var02, #1
1a380     09 03 02 F1 | 	add	_var02, arg01
1a384     02 02 66 F0 | 	shl	_var02, #2
1a388     01 01 02 F1 | 	add	_var01, _var02
1a38c     08 00 06 F1 | 	add	_var01, #8
1a390     00 15 52 FC | 	wrword	arg02, _var01
1a394                 | ' word[@spr1ptr+12*num+10]:=h
1a394     F2 00 02 F6 | 	mov	_var01, objptr
1a398     09 03 02 F6 | 	mov	_var02, arg01
1a39c     01 02 66 F0 | 	shl	_var02, #1
1a3a0     09 03 02 F1 | 	add	_var02, arg01
1a3a4     02 02 66 F0 | 	shl	_var02, #2
1a3a8     01 01 02 F1 | 	add	_var01, _var02
1a3ac     0A 00 06 F1 | 	add	_var01, #10
1a3b0     00 17 52 FC | 	wrword	arg03, _var01
1a3b4     0D E5 85 F1 | 	sub	objptr, #269
1a3b8                 | _hg010b_spin2_setspritesize_ret
1a3b8     2D 00 64 FD | 	ret
1a3bc                 | 
1a3bc                 | ' 
1a3bc                 | ' 
1a3bc                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1a3bc                 | ' 
1a3bc                 | ' 
1a3bc                 | ' pub putpixel(x,y,c)
1a3bc                 | _hg010b_spin2_putpixel
1a3bc     04 4A 05 F6 | 	mov	COUNT_, #4
1a3c0     A8 00 A0 FD | 	call	#pushregs_
1a3c4     09 1F 02 F6 | 	mov	local01, arg01
1a3c8                 | ' 
1a3c8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1a3c8     00 20 06 F6 | 	mov	local02, #0
1a3cc     00 1E 56 F2 | 	cmps	local01, #0 wc
1a3d0     01 20 66 36 |  if_ae	neg	local02, #1
1a3d4     E5 E4 05 F1 | 	add	objptr, #229
1a3d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1a3dc     02 1A 66 F0 | 	shl	arg05, #2
1a3e0     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1a3e4     11 23 A2 F1 | 	subx	local03, local03
1a3e8     11 21 02 F5 | 	and	local02, local03
1a3ec     00 22 06 F6 | 	mov	local03, #0
1a3f0     00 14 56 F2 | 	cmps	arg02, #0 wc
1a3f4     01 22 66 36 |  if_ae	neg	local03, #1
1a3f8     11 21 02 F5 | 	and	local02, local03
1a3fc     04 E4 85 F1 | 	sub	objptr, #4
1a400     F2 22 02 FB | 	rdlong	local03, objptr
1a404     E1 E4 85 F1 | 	sub	objptr, #225
1a408     11 15 52 F2 | 	cmps	arg02, local03 wc
1a40c     12 25 A2 F1 | 	subx	local04, local04
1a410     12 21 CA F7 | 	test	local02, local04 wz
1a414     48 00 90 AD |  if_e	jmp	#LR__2030
1a418     D9 E4 05 F1 | 	add	objptr, #217
1a41c     F2 12 02 FB | 	rdlong	arg01, objptr
1a420     14 E4 05 F1 | 	add	objptr, #20
1a424     F2 24 02 FB | 	rdlong	local04, objptr
1a428     02 24 66 F0 | 	shl	local04, #2
1a42c     0A 25 02 FD | 	qmul	local04, arg02
1a430                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1a430     0B 15 02 F6 | 	mov	arg02, arg03
1a434     01 16 06 F6 | 	mov	arg03, #1
1a438     00 18 06 F6 | 	mov	arg04, #0
1a43c     01 1A 06 F6 | 	mov	arg05, #1
1a440     0A 00 00 FF 
1a444     D3 E5 05 F1 | 	add	objptr, ##5587
1a448     18 24 62 FD | 	getqx	local04
1a44c     0F 25 02 F1 | 	add	local04, local01
1a450     12 13 02 F1 | 	add	arg01, local04
1a454     28 15 B0 FD | 	call	#_psram_spin2_fill
1a458     0B 00 00 FF 
1a45c     C0 E4 85 F1 | 	sub	objptr, ##5824
1a460                 | LR__2030
1a460     A7 F0 03 F6 | 	mov	ptra, fp
1a464     B2 00 A0 FD | 	call	#popregs_
1a468                 | _hg010b_spin2_putpixel_ret
1a468     2D 00 64 FD | 	ret
1a46c                 | 
1a46c                 | ' 
1a46c                 | ' pub putpixel2(x,y,c)
1a46c                 | _hg010b_spin2_putpixel2
1a46c     02 4A 05 F6 | 	mov	COUNT_, #2
1a470     A8 00 A0 FD | 	call	#pushregs_
1a474     D9 E4 05 F1 | 	add	objptr, #217
1a478     F2 1E 02 FB | 	rdlong	local01, objptr
1a47c     14 E4 05 F1 | 	add	objptr, #20
1a480     F2 1A 02 FB | 	rdlong	arg05, objptr
1a484     02 1A 66 F0 | 	shl	arg05, #2
1a488     0A 1B 02 FD | 	qmul	arg05, arg02
1a48c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1a48c     0B 15 02 F6 | 	mov	arg02, arg03
1a490     01 16 06 F6 | 	mov	arg03, #1
1a494     00 18 06 F6 | 	mov	arg04, #0
1a498     01 1A 06 F6 | 	mov	arg05, #1
1a49c     0A 00 00 FF 
1a4a0     D3 E5 05 F1 | 	add	objptr, ##5587
1a4a4     18 20 62 FD | 	getqx	local02
1a4a8     09 21 02 F1 | 	add	local02, arg01
1a4ac     10 1F 02 F1 | 	add	local01, local02
1a4b0     0F 13 02 F6 | 	mov	arg01, local01
1a4b4     C8 14 B0 FD | 	call	#_psram_spin2_fill
1a4b8     0B 00 00 FF 
1a4bc     C0 E4 85 F1 | 	sub	objptr, ##5824
1a4c0     A7 F0 03 F6 | 	mov	ptra, fp
1a4c4     B2 00 A0 FD | 	call	#popregs_
1a4c8                 | _hg010b_spin2_putpixel2_ret
1a4c8     2D 00 64 FD | 	ret
1a4cc                 | 
1a4cc                 | ' 
1a4cc                 | ' pub getpixel2(x,y): c 
1a4cc                 | _hg010b_spin2_getpixel2
1a4cc     02 4A 05 F6 | 	mov	COUNT_, #2
1a4d0     A8 00 A0 FD | 	call	#pushregs_
1a4d4     0C F0 07 F1 | 	add	ptra, #12
1a4d8     04 4E 05 F1 | 	add	fp, #4
1a4dc     A7 12 62 FC | 	wrlong	arg01, fp
1a4e0     04 4E 05 F1 | 	add	fp, #4
1a4e4     A7 14 62 FC | 	wrlong	arg02, fp
1a4e8     08 4E 85 F1 | 	sub	fp, #8
1a4ec     A7 00 68 FC | 	wrlong	#0, fp
1a4f0     A7 12 02 F6 | 	mov	arg01, fp
1a4f4     D9 E4 05 F1 | 	add	objptr, #217
1a4f8     F2 14 02 FB | 	rdlong	arg02, objptr
1a4fc     14 E4 05 F1 | 	add	objptr, #20
1a500     F2 16 02 FB | 	rdlong	arg03, objptr
1a504     02 16 66 F0 | 	shl	arg03, #2
1a508     08 4E 05 F1 | 	add	fp, #8
1a50c     A7 FA 01 FB | 	rdlong	result1, fp
1a510     FD 16 02 FD | 	qmul	arg03, result1
1a514                 | ' 
1a514                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1a514     04 4E 85 F1 | 	sub	fp, #4
1a518     A7 1E 02 FB | 	rdlong	local01, fp
1a51c     04 4E 85 F1 | 	sub	fp, #4
1a520     01 16 06 F6 | 	mov	arg03, #1
1a524     0A 00 00 FF 
1a528     D3 E5 05 F1 | 	add	objptr, ##5587
1a52c     18 20 62 FD | 	getqx	local02
1a530     0F 21 02 F1 | 	add	local02, local01
1a534     10 15 02 F1 | 	add	arg02, local02
1a538     0C 13 B0 FD | 	call	#_psram_spin2_read1
1a53c     0B 00 00 FF 
1a540     C0 E4 85 F1 | 	sub	objptr, ##5824
1a544                 | ' return c
1a544     A7 FA 01 FB | 	rdlong	result1, fp
1a548     A7 F0 03 F6 | 	mov	ptra, fp
1a54c     B2 00 A0 FD | 	call	#popregs_
1a550                 | _hg010b_spin2_getpixel2_ret
1a550     2D 00 64 FD | 	ret
1a554                 | 
1a554                 | '   
1a554                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1a554                 | ' 
1a554                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1a554                 | _hg010b_spin2_fastline
1a554     02 4A 05 F6 | 	mov	COUNT_, #2
1a558     A8 00 A0 FD | 	call	#pushregs_
1a55c     09 1F 02 F6 | 	mov	local01, arg01
1a560     0A 21 02 F6 | 	mov	local02, arg02
1a564                 | ' 
1a564                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1a564     00 16 56 F2 | 	cmps	arg03, #0 wc
1a568     F4 00 90 CD |  if_b	jmp	#LR__2040
1a56c     01 00 00 FF 
1a570     26 E4 05 F1 | 	add	objptr, ##550
1a574     F2 1A 02 FB | 	rdlong	arg05, objptr
1a578     01 00 00 FF 
1a57c     26 E4 85 F1 | 	sub	objptr, ##550
1a580     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1a584     D8 00 90 3D |  if_ae	jmp	#LR__2040
1a588     00 1E 56 F2 | 	cmps	local01, #0 wc
1a58c     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1a590     CC 00 90 CD |  if_b	jmp	#LR__2040
1a594     01 00 00 FF 
1a598     22 E4 05 F1 | 	add	objptr, ##546
1a59c     F2 1A 02 FB | 	rdlong	arg05, objptr
1a5a0     01 00 00 FF 
1a5a4     22 E4 85 F1 | 	sub	objptr, ##546
1a5a8     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1a5ac     01 00 00 1F 
1a5b0     22 E4 05 11 |  if_a	add	objptr, ##546
1a5b4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1a5b8     01 00 00 1F 
1a5bc     22 E4 85 11 |  if_a	sub	objptr, ##546
1a5c0     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1a5c4                 | '   return
1a5c4     98 00 90 1D |  if_a	jmp	#LR__2040
1a5c8     10 1F 5A F2 | 	cmps	local01, local02 wcz
1a5cc     0F 1B 02 16 |  if_a	mov	arg05, local01
1a5d0     10 1F 02 16 |  if_a	mov	local01, local02
1a5d4     0D 21 02 16 |  if_a	mov	local02, arg05
1a5d8     00 1E 56 F2 | 	cmps	local01, #0 wc
1a5dc     00 1E 06 C6 |  if_b	mov	local01, #0
1a5e0     01 00 00 FF 
1a5e4     22 E4 05 F1 | 	add	objptr, ##546
1a5e8     F2 1A 02 FB | 	rdlong	arg05, objptr
1a5ec     01 00 00 FF 
1a5f0     22 E4 85 F1 | 	sub	objptr, ##546
1a5f4     0D 21 52 F2 | 	cmps	local02, arg05 wc
1a5f8     01 00 00 3F 
1a5fc     22 E4 05 31 |  if_ae	add	objptr, ##546
1a600     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1a604     01 00 00 3F 
1a608     22 E4 85 31 |  if_ae	sub	objptr, ##546
1a60c     D9 E4 05 F1 | 	add	objptr, #217
1a610     F2 12 02 FB | 	rdlong	arg01, objptr
1a614     14 E4 05 F1 | 	add	objptr, #20
1a618     F2 1A 02 FB | 	rdlong	arg05, objptr
1a61c     02 1A 66 F0 | 	shl	arg05, #2
1a620     0B 1B 02 FD | 	qmul	arg05, arg03
1a624                 | ' if x1>x2
1a624                 | '   x1,x2:=x2,x1
1a624                 | ' if x1<0 
1a624                 | '   x1:=0
1a624                 | ' if x2>=xres
1a624                 | '   x2:=xres-1  
1a624     01 20 86 31 |  if_ae	sub	local02, #1
1a628                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1a628     01 16 06 F6 | 	mov	arg03, #1
1a62c     10 17 02 F1 | 	add	arg03, local02
1a630     0F 17 82 F1 | 	sub	arg03, local01
1a634     0C 15 02 F6 | 	mov	arg02, arg04
1a638     00 18 06 F6 | 	mov	arg04, #0
1a63c     01 1A 06 F6 | 	mov	arg05, #1
1a640     0A 00 00 FF 
1a644     D3 E5 05 F1 | 	add	objptr, ##5587
1a648     18 20 62 FD | 	getqx	local02
1a64c     0F 21 02 F1 | 	add	local02, local01
1a650     10 13 02 F1 | 	add	arg01, local02
1a654     28 13 B0 FD | 	call	#_psram_spin2_fill
1a658     0B 00 00 FF 
1a65c     C0 E4 85 F1 | 	sub	objptr, ##5824
1a660                 | LR__2040
1a660     A7 F0 03 F6 | 	mov	ptra, fp
1a664     B2 00 A0 FD | 	call	#popregs_
1a668                 | _hg010b_spin2_fastline_ret
1a668     2D 00 64 FD | 	ret
1a66c                 | 
1a66c                 | ' 
1a66c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1a66c                 | _hg010b_spin2_draw
1a66c     0E 4A 05 F6 | 	mov	COUNT_, #14
1a670     A8 00 A0 FD | 	call	#pushregs_
1a674     09 1F 02 F6 | 	mov	local01, arg01
1a678     0A 21 02 F6 | 	mov	local02, arg02
1a67c     0B 23 02 F6 | 	mov	local03, arg03
1a680     0C 25 02 F6 | 	mov	local04, arg04
1a684     0D 27 02 F6 | 	mov	local05, arg05
1a688                 | ' 
1a688                 | ' if (y1==y2)
1a688     12 21 0A F2 | 	cmp	local02, local04 wz
1a68c     18 00 90 5D |  if_ne	jmp	#LR__2050
1a690                 | '   fastline(x1,x2,y1,c)
1a690     0F 13 02 F6 | 	mov	arg01, local01
1a694     11 15 02 F6 | 	mov	arg02, local03
1a698     10 17 02 F6 | 	mov	arg03, local02
1a69c     13 19 02 F6 | 	mov	arg04, local05
1a6a0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1a6a4     F8 00 90 FD | 	jmp	#LR__2056
1a6a8                 | LR__2050
1a6a8                 | ' else  
1a6a8                 | '   x:=x1
1a6a8     0F 29 02 F6 | 	mov	local06, local01
1a6ac                 | '   y:=y1
1a6ac     10 2B 02 F6 | 	mov	local07, local02
1a6b0                 | ' 
1a6b0                 | '   if (x1<x2) 
1a6b0     11 1F 52 F2 | 	cmps	local01, local03 wc
1a6b4                 | '     xi:=1
1a6b4     01 2C 06 C6 |  if_b	mov	local08, #1
1a6b8                 | '     dx:=x2-x1
1a6b8     11 2F 02 C6 |  if_b	mov	local09, local03
1a6bc     0F 2F 82 C1 |  if_b	sub	local09, local01
1a6c0                 | '   else
1a6c0                 | '     xi:=-1
1a6c0     01 2C 66 36 |  if_ae	neg	local08, #1
1a6c4                 | '     dx:=x1-x2
1a6c4     11 1F 82 31 |  if_ae	sub	local01, local03
1a6c8     0F 2F 02 36 |  if_ae	mov	local09, local01
1a6cc                 | '   
1a6cc                 | '   if (y1<y2) 
1a6cc     12 21 52 F2 | 	cmps	local02, local04 wc
1a6d0                 | '     yi:=1
1a6d0     01 30 06 C6 |  if_b	mov	local10, #1
1a6d4                 | '     dy:=y2-y1
1a6d4     12 33 02 C6 |  if_b	mov	local11, local04
1a6d8     10 33 82 C1 |  if_b	sub	local11, local02
1a6dc                 | '   else
1a6dc                 | '     yi:=-1
1a6dc     01 30 66 36 |  if_ae	neg	local10, #1
1a6e0                 | '     dy:=y1-y2
1a6e0     12 21 82 31 |  if_ae	sub	local02, local04
1a6e4     10 33 02 36 |  if_ae	mov	local11, local02
1a6e8                 | ' 
1a6e8                 | '   putpixel(x,y,c)
1a6e8     13 17 02 F6 | 	mov	arg03, local05
1a6ec     14 13 02 F6 | 	mov	arg01, local06
1a6f0     15 15 02 F6 | 	mov	arg02, local07
1a6f4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a6f8                 | ' 
1a6f8                 | '   if (dx>dy)
1a6f8     19 2F 5A F2 | 	cmps	local09, local11 wcz
1a6fc     50 00 90 ED |  if_be	jmp	#LR__2052
1a700                 | '     ai:=(dy-dx)*2
1a700     19 35 02 F6 | 	mov	local12, local11
1a704     17 35 82 F1 | 	sub	local12, local09
1a708     01 34 66 F0 | 	shl	local12, #1
1a70c                 | '     bi:=dy*2
1a70c     01 32 66 F0 | 	shl	local11, #1
1a710     19 37 02 F6 | 	mov	local13, local11
1a714                 | '     d:= bi-dx
1a714     1B 39 02 F6 | 	mov	local14, local13
1a718     17 39 82 F1 | 	sub	local14, local09
1a71c                 | '     repeat while (x<>x2) 
1a71c                 | LR__2051
1a71c     11 29 0A F2 | 	cmp	local06, local03 wz
1a720     7C 00 90 AD |  if_e	jmp	#LR__2055
1a724                 | '       if (d>=0) 
1a724     00 38 56 F2 | 	cmps	local14, #0 wc
1a728                 | '         x+=xi
1a728     16 29 02 31 |  if_ae	add	local06, local08
1a72c                 | '         y+=yi
1a72c     18 2B 02 31 |  if_ae	add	local07, local10
1a730                 | '         d+=ai
1a730     1A 39 02 31 |  if_ae	add	local14, local12
1a734                 | '       else
1a734                 | '         d+=bi
1a734     1B 39 02 C1 |  if_b	add	local14, local13
1a738                 | '         x+=xi
1a738     16 29 02 C1 |  if_b	add	local06, local08
1a73c                 | '       putpixel(x,y,c)
1a73c     14 13 02 F6 | 	mov	arg01, local06
1a740     15 15 02 F6 | 	mov	arg02, local07
1a744     13 17 02 F6 | 	mov	arg03, local05
1a748     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a74c     CC FF 9F FD | 	jmp	#LR__2051
1a750                 | LR__2052
1a750                 | '   else
1a750                 | '     ai:=(dx-dy)*2
1a750     17 35 02 F6 | 	mov	local12, local09
1a754     19 35 82 F1 | 	sub	local12, local11
1a758     01 34 66 F0 | 	shl	local12, #1
1a75c                 | '     bi:=dx*2
1a75c     01 2E 66 F0 | 	shl	local09, #1
1a760     17 37 02 F6 | 	mov	local13, local09
1a764                 | '     d:=bi-dy
1a764     1B 39 02 F6 | 	mov	local14, local13
1a768     19 39 82 F1 | 	sub	local14, local11
1a76c                 | '     repeat while (y<>y2)
1a76c                 | LR__2053
1a76c     12 2B 0A F2 | 	cmp	local07, local04 wz
1a770     2C 00 90 AD |  if_e	jmp	#LR__2054
1a774                 | '       if (d>=0)
1a774     00 38 56 F2 | 	cmps	local14, #0 wc
1a778                 | '         x+=xi
1a778     16 29 02 31 |  if_ae	add	local06, local08
1a77c                 | '         y+=yi
1a77c     18 2B 02 31 |  if_ae	add	local07, local10
1a780                 | '         d+=ai
1a780     1A 39 02 31 |  if_ae	add	local14, local12
1a784                 | '       else
1a784                 | '         d+=bi
1a784     1B 39 02 C1 |  if_b	add	local14, local13
1a788                 | '         y+=yi
1a788     18 2B 02 C1 |  if_b	add	local07, local10
1a78c                 | '       putpixel(x, y,c)
1a78c     14 13 02 F6 | 	mov	arg01, local06
1a790     15 15 02 F6 | 	mov	arg02, local07
1a794     13 17 02 F6 | 	mov	arg03, local05
1a798     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a79c     CC FF 9F FD | 	jmp	#LR__2053
1a7a0                 | LR__2054
1a7a0                 | LR__2055
1a7a0                 | LR__2056
1a7a0     A7 F0 03 F6 | 	mov	ptra, fp
1a7a4     B2 00 A0 FD | 	call	#popregs_
1a7a8                 | _hg010b_spin2_draw_ret
1a7a8     2D 00 64 FD | 	ret
1a7ac                 | 
1a7ac                 | '  
1a7ac                 | ' pub fillpush(val) 
1a7ac                 | _hg010b_spin2_fillpush
1a7ac                 | ' fillstack[fillptr]:=val
1a7ac     0B 00 00 FF 
1a7b0     B6 E4 05 F1 | 	add	objptr, ##5814
1a7b4     F2 00 02 FB | 	rdlong	_var01, objptr
1a7b8     02 00 66 F0 | 	shl	_var01, #2
1a7bc     0A 00 00 FF 
1a7c0     00 E4 85 F1 | 	sub	objptr, ##5120
1a7c4     F2 00 02 F1 | 	add	_var01, objptr
1a7c8     00 13 62 FC | 	wrlong	arg01, _var01
1a7cc                 | ' fillptr+=1   
1a7cc     0A 00 00 FF 
1a7d0     00 E4 05 F1 | 	add	objptr, ##5120
1a7d4     F2 00 02 FB | 	rdlong	_var01, objptr
1a7d8     01 00 06 F1 | 	add	_var01, #1
1a7dc     F2 00 62 FC | 	wrlong	_var01, objptr
1a7e0     0B 00 00 FF 
1a7e4     B6 E4 85 F1 | 	sub	objptr, ##5814
1a7e8                 | _hg010b_spin2_fillpush_ret
1a7e8     2D 00 64 FD | 	ret
1a7ec                 | 
1a7ec                 | ' 
1a7ec                 | '     
1a7ec                 | ' pub fillpop() : val
1a7ec                 | _hg010b_spin2_fillpop
1a7ec                 | ' 
1a7ec                 | ' fillptr-=1
1a7ec     0B 00 00 FF 
1a7f0     B6 E4 05 F1 | 	add	objptr, ##5814
1a7f4     F2 FA 01 FB | 	rdlong	result1, objptr
1a7f8     01 FA 85 F1 | 	sub	result1, #1
1a7fc     F2 FA 61 FC | 	wrlong	result1, objptr
1a800                 | ' if fillptr<0
1a800     0B 00 00 FF 
1a804     B6 E4 85 F1 | 	sub	objptr, ##5814
1a808     00 FA 55 F2 | 	cmps	result1, #0 wc
1a80c                 | '   fillptr:=0
1a80c     0B 00 00 CF 
1a810     B6 E4 05 C1 |  if_b	add	objptr, ##5814
1a814     F2 00 68 CC |  if_b	wrlong	#0, objptr
1a818     0B 00 00 CF 
1a81c     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
1a820                 | '   val:=-12345
1a820     E7 FF 7F CF 
1a824     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1a828     28 00 90 CD |  if_b	jmp	#LR__2060
1a82c                 | ' else 
1a82c                 | '   val:=fillstack[fillptr]
1a82c     0B 00 00 FF 
1a830     B6 E4 05 F1 | 	add	objptr, ##5814
1a834     F2 00 02 FB | 	rdlong	_var01, objptr
1a838     02 00 66 F0 | 	shl	_var01, #2
1a83c     0A 00 00 FF 
1a840     00 E4 85 F1 | 	sub	objptr, ##5120
1a844     F2 00 02 F1 | 	add	_var01, objptr
1a848     00 01 02 FB | 	rdlong	_var01, _var01
1a84c     01 00 00 FF 
1a850     B6 E4 85 F1 | 	sub	objptr, ##694
1a854                 | LR__2060
1a854                 | ' return val
1a854     00 FB 01 F6 | 	mov	result1, _var01
1a858                 | _hg010b_spin2_fillpop_ret
1a858     2D 00 64 FD | 	ret
1a85c                 | 
1a85c                 | ' 
1a85c                 | '       
1a85c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1a85c                 | _hg010b_spin2_fill
1a85c     0B 4A 05 F6 | 	mov	COUNT_, #11
1a860     A8 00 A0 FD | 	call	#pushregs_
1a864                 | ' 
1a864                 | ' newcolor:=newcolor & 255
1a864     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1a868                 | ' oldcolor:=oldcolor & 255
1a868     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1a86c                 | ' 
1a86c                 | ' if (oldcolor == newcolor) 
1a86c     0F 21 0A F2 | 	cmp	local02, local01 wz
1a870                 | '   return
1a870     70 02 90 AD |  if_e	jmp	#LR__2079
1a874                 | ' 
1a874                 | ' fillptr:=0
1a874     0B 00 00 FF 
1a878     B6 E4 05 F1 | 	add	objptr, ##5814
1a87c     F2 00 68 FC | 	wrlong	#0, objptr
1a880                 | ' fillmax:=0
1a880     04 E4 05 F1 | 	add	objptr, #4
1a884     F2 00 68 FC | 	wrlong	#0, objptr
1a888     0B 00 00 FF 
1a88c     BA E4 85 F1 | 	sub	objptr, ##5818
1a890                 | ' fillpush(x)
1a890     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1a894                 | ' fillpush(y)
1a894     0A 13 02 F6 | 	mov	arg01, arg02
1a898     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1a89c                 | ' y:=fillpop()
1a89c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1a8a0     FD 22 02 F6 | 	mov	local03, result1
1a8a4                 | ' x:=fillpop()
1a8a4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1a8a8     FD 24 02 F6 | 	mov	local04, result1
1a8ac                 | ' 'pinhigh(38)
1a8ac                 | ' repeat while (x>-1)       
1a8ac                 | LR__2070
1a8ac     00 24 56 F2 | 	cmps	local04, #0 wc
1a8b0     30 02 90 CD |  if_b	jmp	#LR__2078
1a8b4                 | '  ' pintoggle(39)
1a8b4                 | '   x1 := x
1a8b4     12 27 02 F6 | 	mov	local05, local04
1a8b8                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1a8b8                 | LR__2071
1a8b8     00 28 06 F6 | 	mov	local06, #0
1a8bc     00 2A 06 F6 | 	mov	local07, #0
1a8c0     00 26 56 F2 | 	cmps	local05, #0 wc
1a8c4     01 2A 66 36 |  if_ae	neg	local07, #1
1a8c8     00 2A 0E F2 | 	cmp	local07, #0 wz
1a8cc     00 28 26 56 |  if_ne	not	local06, #0
1a8d0     00 2C 06 F6 | 	mov	local08, #0
1a8d4     00 2E 06 F6 | 	mov	local09, #0
1a8d8     11 15 02 F6 | 	mov	arg02, local03
1a8dc     13 13 02 F6 | 	mov	arg01, local05
1a8e0     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a8e4     10 FB 09 F2 | 	cmp	result1, local02 wz
1a8e8     00 2E 26 A6 |  if_e	not	local09, #0
1a8ec     00 2E 0E F2 | 	cmp	local09, #0 wz
1a8f0     00 2C 26 56 |  if_ne	not	local08, #0
1a8f4     16 29 CA F7 | 	test	local06, local08 wz
1a8f8                 | '     x1--
1a8f8     01 26 86 51 |  if_ne	sub	local05, #1
1a8fc     B8 FF 9F 5D |  if_ne	jmp	#LR__2071
1a900                 | '   x1++
1a900     01 26 06 F1 | 	add	local05, #1
1a904                 | '   spanabove := 0
1a904     00 30 06 F6 | 	mov	local10, #0
1a908                 | '   spanbelow := 0
1a908     00 32 06 F6 | 	mov	local11, #0
1a90c                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1a90c                 | LR__2072
1a90c     00 28 06 F6 | 	mov	local06, #0
1a910     02 00 00 FF 
1a914     00 26 56 F2 | 	cmps	local05, ##1024 wc
1a918     00 28 26 C6 |  if_b	not	local06, #0
1a91c     00 2C 06 F6 | 	mov	local08, #0
1a920     00 2E 06 F6 | 	mov	local09, #0
1a924     11 15 02 F6 | 	mov	arg02, local03
1a928     13 13 02 F6 | 	mov	arg01, local05
1a92c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a930     10 FB 09 F2 | 	cmp	result1, local02 wz
1a934     00 2E 26 A6 |  if_e	not	local09, #0
1a938     00 2E 0E F2 | 	cmp	local09, #0 wz
1a93c     00 2C 26 56 |  if_ne	not	local08, #0
1a940     16 29 CA F7 | 	test	local06, local08 wz
1a944     88 01 90 AD |  if_e	jmp	#LR__2077
1a948                 | '     putpixel2 (x1,y, newcolor & 255)
1a948     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1a94c     13 13 02 F6 | 	mov	arg01, local05
1a950     11 15 02 F6 | 	mov	arg02, local03
1a954     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1a958                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1a958     00 28 06 F6 | 	mov	local06, #0
1a95c     00 2A 06 F6 | 	mov	local07, #0
1a960     00 30 0E F2 | 	cmp	local10, #0 wz
1a964     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1a968     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1a96c     00 2A 0E F2 | 	cmp	local07, #0 wz
1a970     00 28 26 56 |  if_ne	not	local06, #0
1a974     00 2C 06 F6 | 	mov	local08, #0
1a978     00 2E 06 F6 | 	mov	local09, #0
1a97c     11 15 02 F6 | 	mov	arg02, local03
1a980     01 14 86 F1 | 	sub	arg02, #1
1a984     13 13 02 F6 | 	mov	arg01, local05
1a988     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a98c     10 FB 09 F2 | 	cmp	result1, local02 wz
1a990     00 2E 26 A6 |  if_e	not	local09, #0
1a994     00 2E 0E F2 | 	cmp	local09, #0 wz
1a998     00 2C 26 56 |  if_ne	not	local08, #0
1a99c     16 29 CA F7 | 	test	local06, local08 wz
1a9a0     1C 00 90 AD |  if_e	jmp	#LR__2073
1a9a4                 | '       fillpush(x1)
1a9a4     13 13 02 F6 | 	mov	arg01, local05
1a9a8     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1a9ac                 | '       fillpush(y-1)
1a9ac     11 13 02 F6 | 	mov	arg01, local03
1a9b0     01 12 86 F1 | 	sub	arg01, #1
1a9b4     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1a9b8                 | '       spanabove := 1 
1a9b8     01 30 06 F6 | 	mov	local10, #1
1a9bc     4C 00 90 FD | 	jmp	#LR__2074
1a9c0                 | LR__2073
1a9c0                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1a9c0     00 28 06 F6 | 	mov	local06, #0
1a9c4     00 2A 06 F6 | 	mov	local07, #0
1a9c8     00 30 0E F2 | 	cmp	local10, #0 wz
1a9cc     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1a9d0     01 2A 66 16 |  if_a	neg	local07, #1
1a9d4     00 2A 0E F2 | 	cmp	local07, #0 wz
1a9d8     00 28 26 56 |  if_ne	not	local06, #0
1a9dc     00 2C 06 F6 | 	mov	local08, #0
1a9e0     00 2E 06 F6 | 	mov	local09, #0
1a9e4     11 15 02 F6 | 	mov	arg02, local03
1a9e8     01 14 86 F1 | 	sub	arg02, #1
1a9ec     13 13 02 F6 | 	mov	arg01, local05
1a9f0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a9f4     10 FB 09 F2 | 	cmp	result1, local02 wz
1a9f8     00 2E 26 56 |  if_ne	not	local09, #0
1a9fc     00 2E 0E F2 | 	cmp	local09, #0 wz
1aa00     00 2C 26 56 |  if_ne	not	local08, #0
1aa04     16 29 CA F7 | 	test	local06, local08 wz
1aa08                 | '       spanabove := 0 
1aa08     00 30 06 56 |  if_ne	mov	local10, #0
1aa0c                 | LR__2074
1aa0c                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1aa0c     00 28 06 F6 | 	mov	local06, #0
1aa10     00 2A 06 F6 | 	mov	local07, #0
1aa14     00 32 0E F2 | 	cmp	local11, #0 wz
1aa18     01 00 00 AF 
1aa1c     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1aa20     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1aa24     00 2A 0E F2 | 	cmp	local07, #0 wz
1aa28     00 28 26 56 |  if_ne	not	local06, #0
1aa2c     00 2C 06 F6 | 	mov	local08, #0
1aa30     00 2E 06 F6 | 	mov	local09, #0
1aa34     11 15 02 F6 | 	mov	arg02, local03
1aa38     01 14 06 F1 | 	add	arg02, #1
1aa3c     13 13 02 F6 | 	mov	arg01, local05
1aa40     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1aa44     10 FB 09 F2 | 	cmp	result1, local02 wz
1aa48     00 2E 26 A6 |  if_e	not	local09, #0
1aa4c     00 2E 0E F2 | 	cmp	local09, #0 wz
1aa50     00 2C 26 56 |  if_ne	not	local08, #0
1aa54     16 29 CA F7 | 	test	local06, local08 wz
1aa58     1C 00 90 AD |  if_e	jmp	#LR__2075
1aa5c                 | '       fillpush(x1)
1aa5c     13 13 02 F6 | 	mov	arg01, local05
1aa60     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1aa64                 | '       fillpush(y + 1)
1aa64     11 13 02 F6 | 	mov	arg01, local03
1aa68     01 12 06 F1 | 	add	arg01, #1
1aa6c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1aa70                 | '       spanBelow := 1
1aa70     01 32 06 F6 | 	mov	local11, #1
1aa74     50 00 90 FD | 	jmp	#LR__2076
1aa78                 | LR__2075
1aa78                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1aa78     00 28 06 F6 | 	mov	local06, #0
1aa7c     00 2A 06 F6 | 	mov	local07, #0
1aa80     00 32 0E F2 | 	cmp	local11, #0 wz
1aa84     01 00 00 5F 
1aa88     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1aa8c     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1aa90     00 2A 0E F2 | 	cmp	local07, #0 wz
1aa94     00 28 26 56 |  if_ne	not	local06, #0
1aa98     00 2C 06 F6 | 	mov	local08, #0
1aa9c     00 2E 06 F6 | 	mov	local09, #0
1aaa0     11 15 02 F6 | 	mov	arg02, local03
1aaa4     01 14 06 F1 | 	add	arg02, #1
1aaa8     13 13 02 F6 | 	mov	arg01, local05
1aaac     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1aab0     10 FB 09 F2 | 	cmp	result1, local02 wz
1aab4     00 2E 26 56 |  if_ne	not	local09, #0
1aab8     00 2E 0E F2 | 	cmp	local09, #0 wz
1aabc     00 2C 26 56 |  if_ne	not	local08, #0
1aac0     16 29 CA F7 | 	test	local06, local08 wz
1aac4                 | '       spanbelow := 0
1aac4     00 32 06 56 |  if_ne	mov	local11, #0
1aac8                 | LR__2076
1aac8                 | '     x1++
1aac8     01 26 06 F1 | 	add	local05, #1
1aacc     3C FE 9F FD | 	jmp	#LR__2072
1aad0                 | LR__2077
1aad0                 | '   y:=fillpop()
1aad0     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1aad4     FD 22 02 F6 | 	mov	local03, result1
1aad8                 | '   x:=fillpop()
1aad8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1aadc     FD 24 02 F6 | 	mov	local04, result1
1aae0     C8 FD 9F FD | 	jmp	#LR__2070
1aae4                 | LR__2078
1aae4                 | LR__2079
1aae4     A7 F0 03 F6 | 	mov	ptra, fp
1aae8     B2 00 A0 FD | 	call	#popregs_
1aaec                 | _hg010b_spin2_fill_ret
1aaec     2D 00 64 FD | 	ret
1aaf0                 | 
1aaf0                 | ' 'pinlow(38)    
1aaf0                 | ' 
1aaf0                 | ' '-- A filled circle -----------------------------------------------------
1aaf0                 | ' 
1aaf0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1aaf0                 | _hg010b_spin2_fcircle
1aaf0     08 4A 05 F6 | 	mov	COUNT_, #8
1aaf4     A8 00 A0 FD | 	call	#pushregs_
1aaf8     0B 1F 02 F6 | 	mov	local01, arg03
1aafc     FF FF 7F FF 
1ab00     FE 1F 06 FD | 	qmul	local01, ##-2
1ab04     09 21 02 F6 | 	mov	local02, arg01
1ab08     0A 23 02 F6 | 	mov	local03, arg02
1ab0c     0C 25 02 F6 | 	mov	local04, arg04
1ab10                 | ' 
1ab10                 | ' d:=5-4*r
1ab10     0F 19 02 F6 | 	mov	arg04, local01
1ab14     02 18 66 F0 | 	shl	arg04, #2
1ab18     05 26 06 F6 | 	mov	local05, #5
1ab1c     0C 27 82 F1 | 	sub	local05, arg04
1ab20                 | ' x:=0
1ab20     00 28 06 F6 | 	mov	local06, #0
1ab24                 | ' y:=r
1ab24                 | ' da:=(-2*r+5)*4
1ab24                 | ' db:=3*4
1ab24     0C 2A 06 F6 | 	mov	local07, #12
1ab28                 | ' repeat while (x<=y) 
1ab28     18 2C 62 FD | 	getqx	local08
1ab2c     05 2C 06 F1 | 	add	local08, #5
1ab30     02 2C 66 F0 | 	shl	local08, #2
1ab34                 | LR__2080
1ab34     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ab38     B4 00 90 1D |  if_a	jmp	#LR__2082
1ab3c                 | '   fastline(x0-x,x0+x,y0-y,c)
1ab3c     10 13 02 F6 | 	mov	arg01, local02
1ab40     14 13 82 F1 | 	sub	arg01, local06
1ab44     10 15 02 F6 | 	mov	arg02, local02
1ab48     14 15 02 F1 | 	add	arg02, local06
1ab4c     11 17 02 F6 | 	mov	arg03, local03
1ab50     0F 17 82 F1 | 	sub	arg03, local01
1ab54     12 19 02 F6 | 	mov	arg04, local04
1ab58     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ab5c                 | '   fastline(x0-x,x0+x,y0+y,c)
1ab5c     10 13 02 F6 | 	mov	arg01, local02
1ab60     14 13 82 F1 | 	sub	arg01, local06
1ab64     10 15 02 F6 | 	mov	arg02, local02
1ab68     14 15 02 F1 | 	add	arg02, local06
1ab6c     11 17 02 F6 | 	mov	arg03, local03
1ab70     0F 17 02 F1 | 	add	arg03, local01
1ab74     12 19 02 F6 | 	mov	arg04, local04
1ab78     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ab7c                 | '   fastline(x0-y,x0+y,y0-x,c)
1ab7c     10 13 02 F6 | 	mov	arg01, local02
1ab80     0F 13 82 F1 | 	sub	arg01, local01
1ab84     10 15 02 F6 | 	mov	arg02, local02
1ab88     0F 15 02 F1 | 	add	arg02, local01
1ab8c     11 17 02 F6 | 	mov	arg03, local03
1ab90     14 17 82 F1 | 	sub	arg03, local06
1ab94     12 19 02 F6 | 	mov	arg04, local04
1ab98     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ab9c                 | '   fastline(x0-y,x0+y,y0+x,c)
1ab9c     10 13 02 F6 | 	mov	arg01, local02
1aba0     0F 13 82 F1 | 	sub	arg01, local01
1aba4     10 15 02 F6 | 	mov	arg02, local02
1aba8     0F 15 02 F1 | 	add	arg02, local01
1abac     11 17 02 F6 | 	mov	arg03, local03
1abb0     14 17 02 F1 | 	add	arg03, local06
1abb4     12 19 02 F6 | 	mov	arg04, local04
1abb8     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1abbc                 | '   if d>0 
1abbc     01 26 56 F2 | 	cmps	local05, #1 wc
1abc0     18 00 90 CD |  if_b	jmp	#LR__2081
1abc4                 | '     d+=da
1abc4     16 27 02 F1 | 	add	local05, local08
1abc8                 | '     y-=1
1abc8     01 1E 86 F1 | 	sub	local01, #1
1abcc                 | '     x+=1
1abcc     01 28 06 F1 | 	add	local06, #1
1abd0                 | '     da+=4*4
1abd0     10 2C 06 F1 | 	add	local08, #16
1abd4                 | '     db+=2*4
1abd4     08 2A 06 F1 | 	add	local07, #8
1abd8     58 FF 9F FD | 	jmp	#LR__2080
1abdc                 | LR__2081
1abdc                 | '   else
1abdc                 | '     d+=db
1abdc     15 27 02 F1 | 	add	local05, local07
1abe0                 | '     x+=1
1abe0     01 28 06 F1 | 	add	local06, #1
1abe4                 | '     da+=2*4
1abe4     08 2C 06 F1 | 	add	local08, #8
1abe8                 | '     db+=2*4
1abe8     08 2A 06 F1 | 	add	local07, #8
1abec     44 FF 9F FD | 	jmp	#LR__2080
1abf0                 | LR__2082
1abf0     A7 F0 03 F6 | 	mov	ptra, fp
1abf4     B2 00 A0 FD | 	call	#popregs_
1abf8                 | _hg010b_spin2_fcircle_ret
1abf8     2D 00 64 FD | 	ret
1abfc                 | 
1abfc                 | '  
1abfc                 | ' '-- A circle ------------------------------------------------------------ 
1abfc                 | '  
1abfc                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1abfc                 | _hg010b_spin2_circle
1abfc     08 4A 05 F6 | 	mov	COUNT_, #8
1ac00     A8 00 A0 FD | 	call	#pushregs_
1ac04     0B 1F 02 F6 | 	mov	local01, arg03
1ac08     FF FF 7F FF 
1ac0c     FE 1F 06 FD | 	qmul	local01, ##-2
1ac10     09 21 02 F6 | 	mov	local02, arg01
1ac14     0A 23 02 F6 | 	mov	local03, arg02
1ac18     0C 25 02 F6 | 	mov	local04, arg04
1ac1c                 | ' 
1ac1c                 | '  
1ac1c                 | ' d:=5-4*r
1ac1c     0F 19 02 F6 | 	mov	arg04, local01
1ac20     02 18 66 F0 | 	shl	arg04, #2
1ac24     05 26 06 F6 | 	mov	local05, #5
1ac28     0C 27 82 F1 | 	sub	local05, arg04
1ac2c                 | ' x:=0
1ac2c     00 28 06 F6 | 	mov	local06, #0
1ac30                 | ' y:=r
1ac30                 | ' da:=(-2*r+5)*4
1ac30                 | ' db:=3*4
1ac30     0C 2A 06 F6 | 	mov	local07, #12
1ac34                 | ' repeat while (x<=y) 
1ac34     18 2C 62 FD | 	getqx	local08
1ac38     05 2C 06 F1 | 	add	local08, #5
1ac3c     02 2C 66 F0 | 	shl	local08, #2
1ac40                 | LR__2090
1ac40     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ac44     F4 00 90 1D |  if_a	jmp	#LR__2092
1ac48                 | '   putpixel(x0-x,y0-y,c)
1ac48     10 13 02 F6 | 	mov	arg01, local02
1ac4c     14 13 82 F1 | 	sub	arg01, local06
1ac50     11 15 02 F6 | 	mov	arg02, local03
1ac54     0F 15 82 F1 | 	sub	arg02, local01
1ac58     12 17 02 F6 | 	mov	arg03, local04
1ac5c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ac60                 | '   putpixel(x0-x,y0+y,c)
1ac60     10 13 02 F6 | 	mov	arg01, local02
1ac64     14 13 82 F1 | 	sub	arg01, local06
1ac68     11 15 02 F6 | 	mov	arg02, local03
1ac6c     0F 15 02 F1 | 	add	arg02, local01
1ac70     12 17 02 F6 | 	mov	arg03, local04
1ac74     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ac78                 | '   putpixel(x0+x,y0-y,c)
1ac78     10 13 02 F6 | 	mov	arg01, local02
1ac7c     14 13 02 F1 | 	add	arg01, local06
1ac80     11 15 02 F6 | 	mov	arg02, local03
1ac84     0F 15 82 F1 | 	sub	arg02, local01
1ac88     12 17 02 F6 | 	mov	arg03, local04
1ac8c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ac90                 | '   putpixel(x0+x,y0+y,c)
1ac90     10 13 02 F6 | 	mov	arg01, local02
1ac94     14 13 02 F1 | 	add	arg01, local06
1ac98     11 15 02 F6 | 	mov	arg02, local03
1ac9c     0F 15 02 F1 | 	add	arg02, local01
1aca0     12 17 02 F6 | 	mov	arg03, local04
1aca4     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1aca8                 | '   putpixel(x0-y,y0-x,c)
1aca8     10 13 02 F6 | 	mov	arg01, local02
1acac     0F 13 82 F1 | 	sub	arg01, local01
1acb0     11 15 02 F6 | 	mov	arg02, local03
1acb4     14 15 82 F1 | 	sub	arg02, local06
1acb8     12 17 02 F6 | 	mov	arg03, local04
1acbc     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1acc0                 | '   putpixel(x0-y,y0+x,c)
1acc0     10 13 02 F6 | 	mov	arg01, local02
1acc4     0F 13 82 F1 | 	sub	arg01, local01
1acc8     11 15 02 F6 | 	mov	arg02, local03
1accc     14 15 02 F1 | 	add	arg02, local06
1acd0     12 17 02 F6 | 	mov	arg03, local04
1acd4     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1acd8                 | '   putpixel(x0+y,y0-x,c)
1acd8     10 13 02 F6 | 	mov	arg01, local02
1acdc     0F 13 02 F1 | 	add	arg01, local01
1ace0     11 15 02 F6 | 	mov	arg02, local03
1ace4     14 15 82 F1 | 	sub	arg02, local06
1ace8     12 17 02 F6 | 	mov	arg03, local04
1acec     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1acf0                 | '   putpixel(x0+y,y0+x,c)
1acf0     10 13 02 F6 | 	mov	arg01, local02
1acf4     0F 13 02 F1 | 	add	arg01, local01
1acf8     11 15 02 F6 | 	mov	arg02, local03
1acfc     14 15 02 F1 | 	add	arg02, local06
1ad00     12 17 02 F6 | 	mov	arg03, local04
1ad04     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ad08                 | '   if d>0 
1ad08     01 26 56 F2 | 	cmps	local05, #1 wc
1ad0c     18 00 90 CD |  if_b	jmp	#LR__2091
1ad10                 | '     d+=da
1ad10     16 27 02 F1 | 	add	local05, local08
1ad14                 | '     y-=1
1ad14     01 1E 86 F1 | 	sub	local01, #1
1ad18                 | '     x+=1
1ad18     01 28 06 F1 | 	add	local06, #1
1ad1c                 | '     da+=4*4
1ad1c     10 2C 06 F1 | 	add	local08, #16
1ad20                 | '     db+=2*4
1ad20     08 2A 06 F1 | 	add	local07, #8
1ad24     18 FF 9F FD | 	jmp	#LR__2090
1ad28                 | LR__2091
1ad28                 | '   else
1ad28                 | '     d+=db
1ad28     15 27 02 F1 | 	add	local05, local07
1ad2c                 | '     x+=1
1ad2c     01 28 06 F1 | 	add	local06, #1
1ad30                 | '     da+=2*4
1ad30     08 2C 06 F1 | 	add	local08, #8
1ad34                 | '     db+=2*4
1ad34     08 2A 06 F1 | 	add	local07, #8
1ad38     04 FF 9F FD | 	jmp	#LR__2090
1ad3c                 | LR__2092
1ad3c     A7 F0 03 F6 | 	mov	ptra, fp
1ad40     B2 00 A0 FD | 	call	#popregs_
1ad44                 | _hg010b_spin2_circle_ret
1ad44     2D 00 64 FD | 	ret
1ad48                 | 
1ad48                 | '     
1ad48                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ad48                 | ' 
1ad48                 | ' pub frame(x1,y1,x2,y2,c)
1ad48                 | _hg010b_spin2_frame
1ad48     05 4A 05 F6 | 	mov	COUNT_, #5
1ad4c     A8 00 A0 FD | 	call	#pushregs_
1ad50     09 1F 02 F6 | 	mov	local01, arg01
1ad54     0A 21 02 F6 | 	mov	local02, arg02
1ad58     0B 23 02 F6 | 	mov	local03, arg03
1ad5c     0C 25 02 F6 | 	mov	local04, arg04
1ad60     0D 27 02 F6 | 	mov	local05, arg05
1ad64                 | ' 
1ad64                 | ' fastline(x1,x2,y1,c)
1ad64     0F 13 02 F6 | 	mov	arg01, local01
1ad68     11 15 02 F6 | 	mov	arg02, local03
1ad6c     10 17 02 F6 | 	mov	arg03, local02
1ad70     13 19 02 F6 | 	mov	arg04, local05
1ad74     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ad78                 | ' fastline(x1,x2,y2,c)
1ad78     0F 13 02 F6 | 	mov	arg01, local01
1ad7c     11 15 02 F6 | 	mov	arg02, local03
1ad80     12 17 02 F6 | 	mov	arg03, local04
1ad84     13 19 02 F6 | 	mov	arg04, local05
1ad88     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ad8c                 | ' line(x1,y1,x1,y2,c)
1ad8c     0F 13 02 F6 | 	mov	arg01, local01
1ad90     10 15 02 F6 | 	mov	arg02, local02
1ad94     0F 17 02 F6 | 	mov	arg03, local01
1ad98     12 19 02 F6 | 	mov	arg04, local04
1ad9c     13 1B 02 F6 | 	mov	arg05, local05
1ada0                 | ' draw(x1,y1,x2,y2,c)
1ada0     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ada4                 | ' line(x2,y1,x2,y2,c)
1ada4     11 13 02 F6 | 	mov	arg01, local03
1ada8     10 15 02 F6 | 	mov	arg02, local02
1adac     11 17 02 F6 | 	mov	arg03, local03
1adb0     12 19 02 F6 | 	mov	arg04, local04
1adb4     13 1B 02 F6 | 	mov	arg05, local05
1adb8                 | ' draw(x1,y1,x2,y2,c)
1adb8     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1adbc     A7 F0 03 F6 | 	mov	ptra, fp
1adc0     B2 00 A0 FD | 	call	#popregs_
1adc4                 | _hg010b_spin2_frame_ret
1adc4     2D 00 64 FD | 	ret
1adc8                 | 
1adc8                 | ' 
1adc8                 | ' '-- A box (a filled rectangle) ----------------------------------------
1adc8                 | ' 
1adc8                 | ' pub box(x1,y1,x2,y2,c) |yy
1adc8                 | _hg010b_spin2_box
1adc8     06 4A 05 F6 | 	mov	COUNT_, #6
1adcc     A8 00 A0 FD | 	call	#pushregs_
1add0     09 1F 02 F6 | 	mov	local01, arg01
1add4     0A 21 02 F6 | 	mov	local02, arg02
1add8     0B 23 02 F6 | 	mov	local03, arg03
1addc     0C 25 02 F6 | 	mov	local04, arg04
1ade0     0D 27 02 F6 | 	mov	local05, arg05
1ade4                 | ' 
1ade4                 | ' repeat yy from y1 to y2
1ade4     10 25 52 F2 | 	cmps	local04, local02 wc
1ade8     01 28 86 F6 | 	negc	local06, #1
1adec     14 25 02 F1 | 	add	local04, local06
1adf0                 | LR__2100
1adf0                 | '   fastline(x1,x2,yy,c)
1adf0     0F 13 02 F6 | 	mov	arg01, local01
1adf4     11 15 02 F6 | 	mov	arg02, local03
1adf8     13 19 02 F6 | 	mov	arg04, local05
1adfc     10 17 02 F6 | 	mov	arg03, local02
1ae00     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ae04     14 21 02 F1 | 	add	local02, local06
1ae08     12 21 0A F2 | 	cmp	local02, local04 wz
1ae0c     E0 FF 9F 5D |  if_ne	jmp	#LR__2100
1ae10     A7 F0 03 F6 | 	mov	ptra, fp
1ae14     B2 00 A0 FD | 	call	#popregs_
1ae18                 | _hg010b_spin2_box_ret
1ae18     2D 00 64 FD | 	ret
1ae1c                 | 
1ae1c                 | '       
1ae1c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1ae1c                 | _hg010b_spin2_putcharxycgf
1ae1c                 | ' 
1ae1c                 | '  
1ae1c                 | ' repeat yy from 0 to 15
1ae1c     00 00 06 F6 | 	mov	_var01, #0
1ae20     97 8C 48 FB | 	callpa	#(@LR__2112-@LR__2110)>>2,fcache_load_ptr_
1ae24                 | LR__2110
1ae24                 | ' 
1ae24                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1ae24     91 E4 05 F1 | 	add	objptr, #145
1ae28     F2 02 02 FB | 	rdlong	_var02, objptr
1ae2c     0A 02 66 F0 | 	shl	_var02, #10
1ae30     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1ae34     01 05 02 F1 | 	add	_var03, _var02
1ae38     0B 03 02 F6 | 	mov	_var02, arg03
1ae3c     04 02 66 F0 | 	shl	_var02, #4
1ae40     01 05 02 F1 | 	add	_var03, _var02
1ae44     00 05 02 F1 | 	add	_var03, _var01
1ae48     02 05 C2 FA | 	rdbyte	_var03, _var03
1ae4c                 | '   asm
1ae4c     00 04 0E F4 | 	testb	_var03, #0 wz
1ae50     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ae54     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ae58     01 04 0E F4 | 	testb	_var03, #1 wz
1ae5c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ae60     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ae64     02 04 0E F4 | 	testb	_var03, #2 wz
1ae68     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ae6c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ae70     03 04 0E F4 | 	testb	_var03, #3 wz
1ae74     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ae78     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ae7c     04 04 0E F4 | 	testb	_var03, #4 wz
1ae80     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ae84     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ae88     05 04 0E F4 | 	testb	_var03, #5 wz
1ae8c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ae90     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ae94     06 04 0E F4 | 	testb	_var03, #6 wz
1ae98     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ae9c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1aea0     07 04 0E F4 | 	testb	_var03, #7 wz
1aea4     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1aea8     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1aeac                 | '   
1aeac                 | '   ccc[0]:=c1
1aeac     99 E5 05 F1 | 	add	objptr, #409
1aeb0     F2 06 62 FC | 	wrlong	_var04, objptr
1aeb4                 | '   ccc[1]:=c2 
1aeb4     04 E4 05 F1 | 	add	objptr, #4
1aeb8     F2 08 62 FC | 	wrlong	_var05, objptr
1aebc                 | '   long[mailbox0][2]:=8
1aebc     49 E4 85 F1 | 	sub	objptr, #73
1aec0     F2 04 02 FB | 	rdlong	_var03, objptr
1aec4     08 04 06 F1 | 	add	_var03, #8
1aec8     02 11 68 FC | 	wrlong	#8, _var03
1aecc                 | '   long[mailbox0][1]:=@ccc
1aecc     45 E4 05 F1 | 	add	objptr, #69
1aed0     F2 04 02 F6 | 	mov	_var03, objptr
1aed4     45 E4 85 F1 | 	sub	objptr, #69
1aed8     F2 02 02 FB | 	rdlong	_var02, objptr
1aedc     04 02 06 F1 | 	add	_var02, #4
1aee0     01 05 62 FC | 	wrlong	_var03, _var02
1aee4                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1aee4     0C E5 85 F1 | 	sub	objptr, #268
1aee8     F2 04 02 FB | 	rdlong	_var03, objptr
1aeec     0A 03 02 F6 | 	mov	_var02, arg02
1aef0     00 03 02 F1 | 	add	_var02, _var01
1aef4     0A 02 66 F0 | 	shl	_var02, #10
1aef8     09 0B 02 F6 | 	mov	_var06, arg01
1aefc     02 0A 66 F0 | 	shl	_var06, #2
1af00     05 03 02 F1 | 	add	_var02, _var06
1af04     01 05 02 F1 | 	add	_var03, _var02
1af08     00 00 78 FF 
1af0c     00 04 06 F1 | 	add	_var03, ##-268435456
1af10     0C E5 05 F1 | 	add	objptr, #268
1af14     F2 0A 02 FB | 	rdlong	_var06, objptr
1af18     05 05 62 FC | 	wrlong	_var03, _var06
1af1c                 | '   repeat
1af1c                 | LR__2111
1af1c     F2 04 02 FB | 	rdlong	_var03, objptr
1af20     02 03 02 FB | 	rdlong	_var02, _var03
1af24     00 02 56 F2 | 	cmps	_var02, #0 wc
1af28     F0 FF 9F CD |  if_b	jmp	#LR__2111
1af2c     E5 E5 85 F1 | 	sub	objptr, #485
1af30     01 00 06 F1 | 	add	_var01, #1
1af34     10 00 56 F2 | 	cmps	_var01, #16 wc
1af38     E8 FE 9F CD |  if_b	jmp	#LR__2110
1af3c                 | LR__2112
1af3c                 | _hg010b_spin2_putcharxycgf_ret
1af3c     2D 00 64 FD | 	ret
1af40                 | 
1af40                 | ' 
1af40                 | ' 
1af40                 | ' '**********************************************************************r***
1af40                 | ' '                                                                        *
1af40                 | ' ' Font related functions                                                 *
1af40                 | ' '                                                                        *
1af40                 | ' '*************************************************************************
1af40                 | ' 
1af40                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1af40                 | ' 
1af40                 | ' pub setfontfamily(afontnum)
1af40                 | _hg010b_spin2_setfontfamily
1af40                 | ' 
1af40                 | ' font_family:=afontnum
1af40     91 E4 05 F1 | 	add	objptr, #145
1af44     F2 12 62 FC | 	wrlong	arg01, objptr
1af48     91 E4 85 F1 | 	sub	objptr, #145
1af4c                 | ' 'if afontnum==8
1af4c                 | ' '  font_ptr:=@amiga_font
1af4c                 | ' 
1af4c                 | ' if afontnum==4
1af4c     04 12 0E F2 | 	cmp	arg01, #4 wz
1af50                 | '   font_ptr:=@st_font
1af50     08 00 00 AF 
1af54     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1af58     04 E4 05 A1 |  if_e	add	objptr, #4
1af5c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1af60     04 E4 85 A1 |  if_e	sub	objptr, #4
1af64     08 00 00 AF 
1af68     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1af6c                 | ' if afontnum==0
1af6c     00 12 0E F2 | 	cmp	arg01, #0 wz
1af70                 | '   font_ptr:=@vga_font
1af70     04 E4 05 A1 |  if_e	add	objptr, #4
1af74     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1af78     04 E4 85 A1 |  if_e	sub	objptr, #4
1af7c                 | _hg010b_spin2_setfontfamily_ret
1af7c     2D 00 64 FD | 	ret
1af80                 | 
1af80                 | ' 
1af80                 | ' '*************************************************************************
1af80                 | ' '                                                                        *
1af80                 | ' '  Cursor functions                                                      *
1af80                 | ' '                                                                        *
1af80                 | ' '*************************************************************************
1af80                 | ' 
1af80                 | ' 
1af80                 | ' pub setcursorpos(x,y)
1af80                 | _hg010b_spin2_setcursorpos
1af80                 | ' 
1af80                 | ' ''---------- Set the (x,y) position of cursor
1af80                 | ' 
1af80                 | ' cursor_x:=x
1af80     38 E4 05 F1 | 	add	objptr, #56
1af84     F2 12 52 FC | 	wrword	arg01, objptr
1af88                 | ' cursor_y:=y
1af88     02 E4 05 F1 | 	add	objptr, #2
1af8c     F2 14 42 FC | 	wrbyte	arg02, objptr
1af90                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1af90     02 E4 85 F1 | 	sub	objptr, #2
1af94     F2 14 E2 FA | 	rdword	arg02, objptr
1af98     02 14 66 F0 | 	shl	arg02, #2
1af9c     02 E4 05 F1 | 	add	objptr, #2
1afa0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1afa4     3A E4 85 F1 | 	sub	objptr, #58
1afa8     04 16 66 F0 | 	shl	arg03, #4
1afac     11 12 06 F6 | 	mov	arg01, #17
1afb0     54 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1afb4                 | _hg010b_spin2_setcursorpos_ret
1afb4     2D 00 64 FD | 	ret
1afb8                 | 
1afb8                 | ' 
1afb8                 | ' pub setcursorx(x)
1afb8                 | _hg010b_spin2_setcursorx
1afb8                 | ' cursor_x:=x
1afb8     38 E4 05 F1 | 	add	objptr, #56
1afbc     F2 12 52 FC | 	wrword	arg01, objptr
1afc0                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1afc0     F2 14 E2 FA | 	rdword	arg02, objptr
1afc4     02 14 66 F0 | 	shl	arg02, #2
1afc8     02 E4 05 F1 | 	add	objptr, #2
1afcc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1afd0     3A E4 85 F1 | 	sub	objptr, #58
1afd4     04 16 66 F0 | 	shl	arg03, #4
1afd8     11 12 06 F6 | 	mov	arg01, #17
1afdc     28 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1afe0                 | _hg010b_spin2_setcursorx_ret
1afe0     2D 00 64 FD | 	ret
1afe4                 | 
1afe4                 | ' 
1afe4                 | ' '*************************************************************************
1afe4                 | ' '                                                                        *
1afe4                 | ' '  VBlank functions                                                      *
1afe4                 | ' '                                                                        *
1afe4                 | ' '*************************************************************************
1afe4                 | ' 
1afe4                 | ' pub waitvbl(amount) | i
1afe4                 | _hg010b_spin2_waitvbl
1afe4     03 4A 05 F6 | 	mov	COUNT_, #3
1afe8     A8 00 A0 FD | 	call	#pushregs_
1afec     09 1F 02 F6 | 	mov	local01, arg01
1aff0                 | ' 
1aff0                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1aff0                 | ' 
1aff0                 | ' repeat i from 1 to amount
1aff0     01 20 06 F6 | 	mov	local02, #1
1aff4     01 1E 56 F2 | 	cmps	local01, #1 wc
1aff8     01 22 86 F6 | 	negc	local03, #1
1affc     11 1F 02 F1 | 	add	local01, local03
1b000                 | LR__2120
1b000                 | '   repeat until vblank==0
1b000                 | LR__2121
1b000     45 E4 05 F1 | 	add	objptr, #69
1b004     F2 12 0A FB | 	rdlong	arg01, objptr wz
1b008     45 E4 85 F1 | 	sub	objptr, #69
1b00c     0C 00 90 AD |  if_e	jmp	#LR__2122
1b010                 | '     waitus(100)
1b010     64 12 06 F6 | 	mov	arg01, #100
1b014     94 17 B0 FD | 	call	#__system___waitus
1b018     E4 FF 9F FD | 	jmp	#LR__2121
1b01c                 | LR__2122
1b01c                 | '   repeat until vblank==1
1b01c                 | LR__2123
1b01c     45 E4 05 F1 | 	add	objptr, #69
1b020     F2 12 02 FB | 	rdlong	arg01, objptr
1b024     45 E4 85 F1 | 	sub	objptr, #69
1b028     01 12 0E F2 | 	cmp	arg01, #1 wz
1b02c     0C 00 90 AD |  if_e	jmp	#LR__2124
1b030                 | '     waitus(100)
1b030     64 12 06 F6 | 	mov	arg01, #100
1b034     74 17 B0 FD | 	call	#__system___waitus
1b038     E0 FF 9F FD | 	jmp	#LR__2123
1b03c                 | LR__2124
1b03c     11 21 02 F1 | 	add	local02, local03
1b040     0F 21 0A F2 | 	cmp	local02, local01 wz
1b044     B8 FF 9F 5D |  if_ne	jmp	#LR__2120
1b048     A7 F0 03 F6 | 	mov	ptra, fp
1b04c     B2 00 A0 FD | 	call	#popregs_
1b050                 | _hg010b_spin2_waitvbl_ret
1b050     2D 00 64 FD | 	ret
1b054                 | 
1b054                 | ' 
1b054                 | ' 
1b054                 | ' pub cls(fc,bc)   :c,i
1b054                 | _hg010b_spin2_cls
1b054     02 4A 05 F6 | 	mov	COUNT_, #2
1b058     A8 00 A0 FD | 	call	#pushregs_
1b05c     09 1F 02 F6 | 	mov	local01, arg01
1b060     0A 21 02 F6 | 	mov	local02, arg02
1b064                 | ' 
1b064                 | ' c:=bc
1b064                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1b064     D9 E4 05 F1 | 	add	objptr, #217
1b068     F2 12 02 FB | 	rdlong	arg01, objptr
1b06c     A5 E4 85 F1 | 	sub	objptr, #165
1b070     F2 16 02 FB | 	rdlong	arg03, objptr
1b074     02 16 66 F0 | 	shl	arg03, #2
1b078     10 15 02 F6 | 	mov	arg02, local02
1b07c     00 18 06 F6 | 	mov	arg04, #0
1b080     01 1A 06 F6 | 	mov	arg05, #1
1b084     0B 00 00 FF 
1b088     8C E4 05 F1 | 	add	objptr, ##5772
1b08c     F0 08 B0 FD | 	call	#_psram_spin2_fill
1b090                 | ' setwritecolors(fc,bc)
1b090                 | ' 
1b090                 | ' write_color:=ff
1b090     0B 00 00 FF 
1b094     83 E4 85 F1 | 	sub	objptr, ##5763
1b098     F2 1E 62 FC | 	wrlong	local01, objptr
1b09c                 | ' write_background:=bb
1b09c     04 E4 05 F1 | 	add	objptr, #4
1b0a0     F2 20 62 FC | 	wrlong	local02, objptr
1b0a4                 | ' cursor_x:=0
1b0a4     09 E4 85 F1 | 	sub	objptr, #9
1b0a8     F2 00 58 FC | 	wrword	#0, objptr
1b0ac                 | ' cursor_y:=0
1b0ac     02 E4 05 F1 | 	add	objptr, #2
1b0b0     F2 00 48 FC | 	wrbyte	#0, objptr
1b0b4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1b0b4     02 E4 85 F1 | 	sub	objptr, #2
1b0b8     F2 14 E2 FA | 	rdword	arg02, objptr
1b0bc     02 14 66 F0 | 	shl	arg02, #2
1b0c0     02 E4 05 F1 | 	add	objptr, #2
1b0c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b0c8     3A E4 85 F1 | 	sub	objptr, #58
1b0cc     04 16 66 F0 | 	shl	arg03, #4
1b0d0     11 12 06 F6 | 	mov	arg01, #17
1b0d4     30 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1b0d8                 | ' setcursorcolor(fc)
1b0d8     0F 13 02 F6 | 	mov	arg01, local01
1b0dc     E4 EE BF FD | 	call	#_hg010b_spin2_setcursorcolor
1b0e0     10 FB 01 F6 | 	mov	result1, local02
1b0e4     00 FC 05 F6 | 	mov	result2, #0
1b0e8     A7 F0 03 F6 | 	mov	ptra, fp
1b0ec     B2 00 A0 FD | 	call	#popregs_
1b0f0                 | _hg010b_spin2_cls_ret
1b0f0     2D 00 64 FD | 	ret
1b0f4                 | 
1b0f4                 | ' 
1b0f4                 | ' ''---------- Output a char at the cursor position, move the cursor 
1b0f4                 | ' 
1b0f4                 | ' pub putchar(achar) | c,x,y,l,newcpl
1b0f4                 | _hg010b_spin2_putchar
1b0f4     01 4A 05 F6 | 	mov	COUNT_, #1
1b0f8     A8 00 A0 FD | 	call	#pushregs_
1b0fc     09 1F 02 F6 | 	mov	local01, arg01
1b100                 | ' 
1b100                 | ' if achar==10
1b100     0A 1E 0E F2 | 	cmp	local01, #10 wz
1b104                 | '   crlf()
1b104     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1b108                 | ' if achar==9
1b108     09 1E 0E F2 | 	cmp	local01, #9 wz
1b10c     18 00 90 5D |  if_ne	jmp	#LR__2130
1b110                 | '   cursor_x:=(cursor_x& %11110000)+16
1b110     38 E4 05 F1 | 	add	objptr, #56
1b114     F2 16 E2 FA | 	rdword	arg03, objptr
1b118     F0 16 06 F5 | 	and	arg03, #240
1b11c     10 16 06 F1 | 	add	arg03, #16
1b120     F2 16 52 FC | 	wrword	arg03, objptr
1b124     38 E4 85 F1 | 	sub	objptr, #56
1b128                 | LR__2130
1b128                 | '   
1b128                 | ' if (achar<>9) && (achar<>10) 
1b128     09 1E 0E F2 | 	cmp	local01, #9 wz
1b12c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1b130     44 00 90 AD |  if_e	jmp	#LR__2131
1b134                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1b134     38 E4 05 F1 | 	add	objptr, #56
1b138     F2 12 E2 FA | 	rdword	arg01, objptr
1b13c     02 E4 05 F1 | 	add	objptr, #2
1b140     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b144     04 14 66 F0 | 	shl	arg02, #4
1b148     03 E4 05 F1 | 	add	objptr, #3
1b14c     F2 18 02 FB | 	rdlong	arg04, objptr
1b150     04 E4 05 F1 | 	add	objptr, #4
1b154     F2 1A 02 FB | 	rdlong	arg05, objptr
1b158     41 E4 85 F1 | 	sub	objptr, #65
1b15c     0F 17 02 F6 | 	mov	arg03, local01
1b160     B8 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1b164                 | '   cursor_x+=2
1b164     38 E4 05 F1 | 	add	objptr, #56
1b168     F2 1E E2 FA | 	rdword	local01, objptr
1b16c     02 1E 06 F1 | 	add	local01, #2
1b170     F2 1E 52 FC | 	wrword	local01, objptr
1b174     38 E4 85 F1 | 	sub	objptr, #56
1b178                 | LR__2131
1b178                 | ' 
1b178                 | ' if cursor_x>=256
1b178     38 E4 05 F1 | 	add	objptr, #56
1b17c     F2 1E E2 FA | 	rdword	local01, objptr
1b180     38 E4 85 F1 | 	sub	objptr, #56
1b184     00 1F 56 F2 | 	cmps	local01, #256 wc
1b188     64 00 90 CD |  if_b	jmp	#LR__2133
1b18c                 | '   cursor_x:=0
1b18c     38 E4 05 F1 | 	add	objptr, #56
1b190     F2 00 58 FC | 	wrword	#0, objptr
1b194                 | '   cursor_y+=1
1b194     02 E4 05 F1 | 	add	objptr, #2
1b198     F2 1E C2 FA | 	rdbyte	local01, objptr
1b19c     01 1E 06 F1 | 	add	local01, #1
1b1a0     F2 1E 42 FC | 	wrbyte	local01, objptr
1b1a4                 | '   if cursor_y>st_lines-1
1b1a4     C3 E4 05 F1 | 	add	objptr, #195
1b1a8     F2 1E 02 FB | 	rdlong	local01, objptr
1b1ac     01 1E 86 F1 | 	sub	local01, #1
1b1b0     C3 E4 85 F1 | 	sub	objptr, #195
1b1b4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b1b8     3A E4 85 F1 | 	sub	objptr, #58
1b1bc     0F 17 5A F2 | 	cmps	arg03, local01 wcz
1b1c0     2C 00 90 ED |  if_be	jmp	#LR__2132
1b1c4                 | '     scrollup()
1b1c4     00 12 06 F6 | 	mov	arg01, #0
1b1c8     01 00 00 FF 
1b1cc     40 14 06 F6 | 	mov	arg02, ##576
1b1d0     10 16 06 F6 | 	mov	arg03, #16
1b1d4     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
1b1d8                 | '     cursor_y:=st_lines-1
1b1d8     FD E4 05 F1 | 	add	objptr, #253
1b1dc     F2 1E 02 FB | 	rdlong	local01, objptr
1b1e0     01 1E 86 F1 | 	sub	local01, #1
1b1e4     C3 E4 85 F1 | 	sub	objptr, #195
1b1e8     F2 1E 42 FC | 	wrbyte	local01, objptr
1b1ec     3A E4 85 F1 | 	sub	objptr, #58
1b1f0                 | LR__2132
1b1f0                 | LR__2133
1b1f0                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1b1f0     38 E4 05 F1 | 	add	objptr, #56
1b1f4     F2 14 E2 FA | 	rdword	arg02, objptr
1b1f8     02 14 66 F0 | 	shl	arg02, #2
1b1fc     02 E4 05 F1 | 	add	objptr, #2
1b200     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b204     3A E4 85 F1 | 	sub	objptr, #58
1b208     04 16 66 F0 | 	shl	arg03, #4
1b20c     11 12 06 F6 | 	mov	arg01, #17
1b210     F4 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1b214     A7 F0 03 F6 | 	mov	ptra, fp
1b218     B2 00 A0 FD | 	call	#popregs_
1b21c                 | _hg010b_spin2_putchar_ret
1b21c     2D 00 64 FD | 	ret
1b220                 | 
1b220                 | '     
1b220                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1b220                 | ' 
1b220                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1b220                 | _hg010b_spin2_putchar2
1b220     01 4A 05 F6 | 	mov	COUNT_, #1
1b224     A8 00 A0 FD | 	call	#pushregs_
1b228                 | ' 
1b228                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1b228     38 E4 05 F1 | 	add	objptr, #56
1b22c     F2 1E E2 FA | 	rdword	local01, objptr
1b230     02 E4 05 F1 | 	add	objptr, #2
1b234     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b238     04 14 66 F0 | 	shl	arg02, #4
1b23c     09 17 02 F6 | 	mov	arg03, arg01
1b240     03 E4 05 F1 | 	add	objptr, #3
1b244     F2 18 02 FB | 	rdlong	arg04, objptr
1b248     04 E4 05 F1 | 	add	objptr, #4
1b24c     F2 1A 02 FB | 	rdlong	arg05, objptr
1b250     41 E4 85 F1 | 	sub	objptr, #65
1b254     0F 13 02 F6 | 	mov	arg01, local01
1b258     C0 FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
1b25c                 | ' cursor_x+=2
1b25c     38 E4 05 F1 | 	add	objptr, #56
1b260     F2 1E E2 FA | 	rdword	local01, objptr
1b264     02 1E 06 F1 | 	add	local01, #2
1b268     F2 1E 52 FC | 	wrword	local01, objptr
1b26c                 | ' if cursor_x>=256
1b26c     F2 1E E2 FA | 	rdword	local01, objptr
1b270     38 E4 85 F1 | 	sub	objptr, #56
1b274     00 1F 56 F2 | 	cmps	local01, #256 wc
1b278     64 00 90 CD |  if_b	jmp	#LR__2141
1b27c                 | '   cursor_x:=0
1b27c     38 E4 05 F1 | 	add	objptr, #56
1b280     F2 00 58 FC | 	wrword	#0, objptr
1b284                 | '   cursor_y+=1
1b284     02 E4 05 F1 | 	add	objptr, #2
1b288     F2 1E C2 FA | 	rdbyte	local01, objptr
1b28c     01 1E 06 F1 | 	add	local01, #1
1b290     F2 1E 42 FC | 	wrbyte	local01, objptr
1b294                 | '   if cursor_y>st_lines-1
1b294     C3 E4 05 F1 | 	add	objptr, #195
1b298     F2 1E 02 FB | 	rdlong	local01, objptr
1b29c     01 1E 86 F1 | 	sub	local01, #1
1b2a0     C3 E4 85 F1 | 	sub	objptr, #195
1b2a4     F2 1A C2 FA | 	rdbyte	arg05, objptr
1b2a8     3A E4 85 F1 | 	sub	objptr, #58
1b2ac     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
1b2b0     2C 00 90 ED |  if_be	jmp	#LR__2140
1b2b4                 | '     scrollup()
1b2b4     00 12 06 F6 | 	mov	arg01, #0
1b2b8     01 00 00 FF 
1b2bc     40 14 06 F6 | 	mov	arg02, ##576
1b2c0     10 16 06 F6 | 	mov	arg03, #16
1b2c4     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
1b2c8                 | '     cursor_y:=st_lines-1
1b2c8     FD E4 05 F1 | 	add	objptr, #253
1b2cc     F2 1E 02 FB | 	rdlong	local01, objptr
1b2d0     01 1E 86 F1 | 	sub	local01, #1
1b2d4     C3 E4 85 F1 | 	sub	objptr, #195
1b2d8     F2 1E 42 FC | 	wrbyte	local01, objptr
1b2dc     3A E4 85 F1 | 	sub	objptr, #58
1b2e0                 | LR__2140
1b2e0                 | LR__2141
1b2e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
1b2e0     38 E4 05 F1 | 	add	objptr, #56
1b2e4     F2 14 E2 FA | 	rdword	arg02, objptr
1b2e8     02 14 66 F0 | 	shl	arg02, #2
1b2ec     02 E4 05 F1 | 	add	objptr, #2
1b2f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b2f4     3A E4 85 F1 | 	sub	objptr, #58
1b2f8     04 16 66 F0 | 	shl	arg03, #4
1b2fc     11 12 06 F6 | 	mov	arg01, #17
1b300     04 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1b304     A7 F0 03 F6 | 	mov	ptra, fp
1b308     B2 00 A0 FD | 	call	#popregs_
1b30c                 | _hg010b_spin2_putchar2_ret
1b30c     2D 00 64 FD | 	ret
1b310                 | 
1b310                 | ' ''--------- Output a string at the cursor position, move the cursor  
1b310                 | ' 
1b310                 | ' pub write(text) | iii,c,ncx,ncy
1b310                 | _hg010b_spin2_write
1b310     04 4A 05 F6 | 	mov	COUNT_, #4
1b314     A8 00 A0 FD | 	call	#pushregs_
1b318     09 1F 02 F6 | 	mov	local01, arg01
1b31c                 | ' 
1b31c                 | ' repeat iii from 0 to strsize(text)-1
1b31c     00 20 06 F6 | 	mov	local02, #0
1b320     0F 13 02 F6 | 	mov	arg01, local01
1b324     09 23 02 F6 | 	mov	local03, arg01
1b328     97 06 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
1b32c                 | LR__2150
1b32c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b330     01 22 06 51 |  if_ne	add	local03, #1
1b334     F4 FF 9F 5D |  if_ne	jmp	#LR__2150
1b338                 | LR__2151
1b338     09 23 82 F1 | 	sub	local03, arg01
1b33c     01 22 86 F1 | 	sub	local03, #1
1b340     00 22 56 F2 | 	cmps	local03, #0 wc
1b344     01 24 86 F6 | 	negc	local04, #1
1b348     12 23 02 F1 | 	add	local03, local04
1b34c                 | LR__2152
1b34c                 | '   putchar2(byte[text+iii])
1b34c     0F 13 02 F6 | 	mov	arg01, local01
1b350     10 13 02 F1 | 	add	arg01, local02
1b354     09 13 C2 FA | 	rdbyte	arg01, arg01
1b358     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
1b35c     12 21 02 F1 | 	add	local02, local04
1b360     11 21 0A F2 | 	cmp	local02, local03 wz
1b364     E4 FF 9F 5D |  if_ne	jmp	#LR__2152
1b368     A7 F0 03 F6 | 	mov	ptra, fp
1b36c     B2 00 A0 FD | 	call	#popregs_
1b370                 | _hg010b_spin2_write_ret
1b370     2D 00 64 FD | 	ret
1b374                 | 
1b374                 | ' 
1b374                 | ' ''-----------  Scroll the screen one line up
1b374                 | ' 
1b374                 | ' pub scrollup(start=0, end=576 , amount=16) | i
1b374                 | _hg010b_spin2_scrollup
1b374     01 4A 05 F6 | 	mov	COUNT_, #1
1b378     A8 00 A0 FD | 	call	#pushregs_
1b37c                 | ' 	
1b37c                 | ' repeat i from 0 to 559 
1b37c     00 1E 06 F6 | 	mov	local01, #0
1b380                 | LR__2160
1b380     F5 E4 05 F1 | 	add	objptr, #245
1b384     F2 18 02 FB | 	rdlong	arg04, objptr
1b388     1C E4 85 F1 | 	sub	objptr, #28
1b38c     F2 14 02 FB | 	rdlong	arg02, objptr
1b390     0F 13 02 F6 | 	mov	arg01, local01
1b394     10 12 06 F1 | 	add	arg01, #16
1b398     02 12 66 F0 | 	shl	arg01, #2
1b39c     14 E4 05 F1 | 	add	objptr, #20
1b3a0     F2 16 02 FB | 	rdlong	arg03, objptr
1b3a4     0B 13 02 FD | 	qmul	arg01, arg03
1b3a8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1b3a8     F6 03 00 FF 
1b3ac     00 12 06 F6 | 	mov	arg01, ##519168
1b3b0     0C 13 82 F1 | 	sub	arg01, arg04
1b3b4     02 16 66 F0 | 	shl	arg03, #2
1b3b8     0A 00 00 FF 
1b3bc     D3 E5 05 F1 | 	add	objptr, ##5587
1b3c0     18 18 62 FD | 	getqx	arg04
1b3c4     0C 15 02 F1 | 	add	arg02, arg04
1b3c8     7C 04 B0 FD | 	call	#_psram_spin2_read1
1b3cc     0A 00 00 FF 
1b3d0     CB E5 85 F1 | 	sub	objptr, ##5579
1b3d4     F2 18 02 FB | 	rdlong	arg04, objptr
1b3d8     1C E4 85 F1 | 	sub	objptr, #28
1b3dc     F2 14 02 FB | 	rdlong	arg02, objptr
1b3e0     0F 13 02 F6 | 	mov	arg01, local01
1b3e4     02 12 66 F0 | 	shl	arg01, #2
1b3e8     14 E4 05 F1 | 	add	objptr, #20
1b3ec     F2 16 02 FB | 	rdlong	arg03, objptr
1b3f0     0B 13 02 FD | 	qmul	arg01, arg03
1b3f4                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1b3f4     F6 03 00 FF 
1b3f8     00 12 06 F6 | 	mov	arg01, ##519168
1b3fc     0C 13 82 F1 | 	sub	arg01, arg04
1b400     02 16 66 F0 | 	shl	arg03, #2
1b404     0A 00 00 FF 
1b408     D3 E5 05 F1 | 	add	objptr, ##5587
1b40c     18 18 62 FD | 	getqx	arg04
1b410     0C 15 02 F1 | 	add	arg02, arg04
1b414     CC 04 B0 FD | 	call	#_psram_spin2_write
1b418     0B 00 00 FF 
1b41c     C0 E4 85 F1 | 	sub	objptr, ##5824
1b420     01 1E 06 F1 | 	add	local01, #1
1b424     01 00 00 FF 
1b428     30 1E 56 F2 | 	cmps	local01, ##560 wc
1b42c     50 FF 9F CD |  if_b	jmp	#LR__2160
1b430                 | ' 
1b430                 | ' repeat i from 560 to 575
1b430     01 00 00 FF 
1b434     30 1E 06 F6 | 	mov	local01, ##560
1b438                 | LR__2161
1b438                 | '    fastline(0,1023,i,write_background)   
1b438     41 E4 05 F1 | 	add	objptr, #65
1b43c     F2 18 02 FB | 	rdlong	arg04, objptr
1b440     41 E4 85 F1 | 	sub	objptr, #65
1b444     00 12 06 F6 | 	mov	arg01, #0
1b448     09 14 CE F9 | 	bmask	arg02, #9
1b44c     0F 17 02 F6 | 	mov	arg03, local01
1b450     00 F1 BF FD | 	call	#_hg010b_spin2_fastline
1b454     01 1E 06 F1 | 	add	local01, #1
1b458     01 00 00 FF 
1b45c     40 1E 16 F2 | 	cmp	local01, ##576 wc
1b460     D4 FF 9F CD |  if_b	jmp	#LR__2161
1b464     A7 F0 03 F6 | 	mov	ptra, fp
1b468     B2 00 A0 FD | 	call	#popregs_
1b46c                 | _hg010b_spin2_scrollup_ret
1b46c     2D 00 64 FD | 	ret
1b470                 | 
1b470                 | ' 
1b470                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1b470                 | ' 
1b470                 | ' pub crlf()
1b470                 | _hg010b_spin2_crlf
1b470                 | ' 
1b470                 | ' cursor_x:=leading_spaces*2
1b470     01 00 00 FF 
1b474     B2 E4 05 F1 | 	add	objptr, ##690
1b478     F2 16 02 FB | 	rdlong	arg03, objptr
1b47c     01 16 66 F0 | 	shl	arg03, #1
1b480     01 00 00 FF 
1b484     7A E4 85 F1 | 	sub	objptr, ##634
1b488     F2 16 52 FC | 	wrword	arg03, objptr
1b48c                 | ' cursor_y+=1
1b48c     02 E4 05 F1 | 	add	objptr, #2
1b490     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b494     01 16 06 F1 | 	add	arg03, #1
1b498     F2 16 42 FC | 	wrbyte	arg03, objptr
1b49c                 | ' if cursor_y>st_lines-1
1b49c     C3 E4 05 F1 | 	add	objptr, #195
1b4a0     F2 16 02 FB | 	rdlong	arg03, objptr
1b4a4     01 16 86 F1 | 	sub	arg03, #1
1b4a8     C3 E4 85 F1 | 	sub	objptr, #195
1b4ac     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b4b0     3A E4 85 F1 | 	sub	objptr, #58
1b4b4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1b4b8     2C 00 90 ED |  if_be	jmp	#LR__2170
1b4bc                 | '   scrollup()
1b4bc     00 12 06 F6 | 	mov	arg01, #0
1b4c0     01 00 00 FF 
1b4c4     40 14 06 F6 | 	mov	arg02, ##576
1b4c8     10 16 06 F6 | 	mov	arg03, #16
1b4cc     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
1b4d0                 | '   cursor_y:=st_lines-1
1b4d0     FD E4 05 F1 | 	add	objptr, #253
1b4d4     F2 16 02 FB | 	rdlong	arg03, objptr
1b4d8     01 16 86 F1 | 	sub	arg03, #1
1b4dc     C3 E4 85 F1 | 	sub	objptr, #195
1b4e0     F2 16 42 FC | 	wrbyte	arg03, objptr
1b4e4     3A E4 85 F1 | 	sub	objptr, #58
1b4e8                 | LR__2170
1b4e8                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
1b4e8     38 E4 05 F1 | 	add	objptr, #56
1b4ec     F2 14 E2 FA | 	rdword	arg02, objptr
1b4f0     02 14 66 F0 | 	shl	arg02, #2
1b4f4     02 E4 05 F1 | 	add	objptr, #2
1b4f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b4fc     3A E4 85 F1 | 	sub	objptr, #58
1b500     04 16 66 F0 | 	shl	arg03, #4
1b504     11 12 06 F6 | 	mov	arg01, #17
1b508     FC ED BF FD | 	call	#_hg010b_spin2_setspritepos
1b50c                 | _hg010b_spin2_crlf_ret
1b50c     2D 00 64 FD | 	ret
1b510                 | 
1b510                 | ' 
1b510                 | ' 
1b510                 | ' '*************************************************************************
1b510                 | ' '                                                                        *
1b510                 | ' '  Conversions                                                           *
1b510                 | ' '                                                                        *
1b510                 | ' '*************************************************************************
1b510                 | ' 
1b510                 | ' ''---------- Convert a integer to dec string, return a pointer
1b510                 | ' 
1b510                 | ' pub inttostr(i):result |q,pos,k,j
1b510                 | _hg010b_spin2_inttostr
1b510     03 4A 05 F6 | 	mov	COUNT_, #3
1b514     A8 00 A0 FD | 	call	#pushregs_
1b518     09 1F 0A F6 | 	mov	local01, arg01 wz
1b51c                 | ' 
1b51c                 | ' j:=i
1b51c                 | ' pos:=10
1b51c     0A 20 06 F6 | 	mov	local02, #10
1b520                 | ' k:=0
1b520     00 22 06 F6 | 	mov	local03, #0
1b524                 | ' 
1b524                 | ' if (j==0)
1b524     18 00 90 5D |  if_ne	jmp	#LR__2180
1b528                 | '   n_string[0]:=48
1b528     49 E4 05 F1 | 	add	objptr, #73
1b52c     F2 60 48 FC | 	wrbyte	#48, objptr
1b530                 | '   n_string[1]:=0
1b530     01 E4 05 F1 | 	add	objptr, #1
1b534     F2 00 48 FC | 	wrbyte	#0, objptr
1b538     4A E4 85 F1 | 	sub	objptr, #74
1b53c     C4 00 90 FD | 	jmp	#LR__2187
1b540                 | LR__2180
1b540                 | ' 
1b540                 | ' else
1b540                 | '   if (j<0)
1b540     0F 1F 52 F6 | 	abs	local01, local01 wc
1b544                 | '     j:=0-j
1b544                 | '     k:=45
1b544     2D 22 06 C6 |  if_b	mov	local03, #45
1b548                 | ' 
1b548                 | '   n_string[11]:=0
1b548     54 E4 05 F1 | 	add	objptr, #84
1b54c     F2 00 48 FC | 	wrbyte	#0, objptr
1b550     54 E4 85 F1 | 	sub	objptr, #84
1b554     97 24 48 FB | 	callpa	#(@LR__2182-@LR__2181)>>2,fcache_load_ptr_
1b558                 | '   repeat while (pos>-1)
1b558                 | LR__2181
1b558     00 20 56 F2 | 	cmps	local02, #0 wc
1b55c     40 00 90 CD |  if_b	jmp	#LR__2183
1b560     0F FB 51 F6 | 	abs	result1, local01 wc
1b564     0A FA 15 FD | 	qdiv	result1, #10
1b568                 | '     q:=j//10
1b568     19 FA 61 FD | 	getqy	result1
1b56c     FD FA 81 F6 | 	negc	result1, result1
1b570     0F 1F 52 F6 | 	abs	local01, local01 wc
1b574     0A 1E 16 FD | 	qdiv	local01, #10
1b578                 | '     q:=48+q
1b578     30 FA 05 F1 | 	add	result1, #48
1b57c                 | '     n_string[pos]:=q
1b57c     10 1F 02 F6 | 	mov	local01, local02
1b580     49 E4 05 F1 | 	add	objptr, #73
1b584     F2 1E 02 F1 | 	add	local01, objptr
1b588     0F FB 41 FC | 	wrbyte	result1, local01
1b58c                 | '     j:=j/10
1b58c     49 E4 85 F1 | 	sub	objptr, #73
1b590                 | '     pos-=1
1b590     01 20 86 F1 | 	sub	local02, #1
1b594     18 1E 62 FD | 	getqx	local01
1b598     0F 1F 82 F6 | 	negc	local01, local01
1b59c     B8 FF 9F FD | 	jmp	#LR__2181
1b5a0                 | LR__2182
1b5a0                 | LR__2183
1b5a0                 | '   repeat while n_string[0]==48
1b5a0                 | LR__2184
1b5a0     49 E4 05 F1 | 	add	objptr, #73
1b5a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b5a8     49 E4 85 F1 | 	sub	objptr, #73
1b5ac     30 16 0E F2 | 	cmp	arg03, #48 wz
1b5b0     20 00 90 5D |  if_ne	jmp	#LR__2185
1b5b4                 | '     bytemove(@n_string,@n_string+1,12)
1b5b4     49 E4 05 F1 | 	add	objptr, #73
1b5b8     F2 12 02 F6 | 	mov	arg01, objptr
1b5bc     F2 14 02 F6 | 	mov	arg02, objptr
1b5c0     49 E4 85 F1 | 	sub	objptr, #73
1b5c4     01 14 06 F1 | 	add	arg02, #1
1b5c8     0C 16 06 F6 | 	mov	arg03, #12
1b5cc     9C 0D B0 FD | 	call	#__system____builtin_memmove
1b5d0     CC FF 9F FD | 	jmp	#LR__2184
1b5d4                 | LR__2185
1b5d4                 | ' 
1b5d4                 | '   if k==45
1b5d4     2D 22 0E F2 | 	cmp	local03, #45 wz
1b5d8     28 00 90 5D |  if_ne	jmp	#LR__2186
1b5dc                 | '      bytemove(@n_string+1,@n_string,12)
1b5dc     49 E4 05 F1 | 	add	objptr, #73
1b5e0     F2 12 02 F6 | 	mov	arg01, objptr
1b5e4     01 12 06 F1 | 	add	arg01, #1
1b5e8     F2 14 02 F6 | 	mov	arg02, objptr
1b5ec     49 E4 85 F1 | 	sub	objptr, #73
1b5f0     0C 16 06 F6 | 	mov	arg03, #12
1b5f4     74 0D B0 FD | 	call	#__system____builtin_memmove
1b5f8                 | '      n_string[0]:=k
1b5f8     49 E4 05 F1 | 	add	objptr, #73
1b5fc     F2 22 42 FC | 	wrbyte	local03, objptr
1b600     49 E4 85 F1 | 	sub	objptr, #73
1b604                 | LR__2186
1b604                 | LR__2187
1b604                 | ' 
1b604                 | ' q:=@n_string
1b604     49 E4 05 F1 | 	add	objptr, #73
1b608     F2 FA 01 F6 | 	mov	result1, objptr
1b60c     49 E4 85 F1 | 	sub	objptr, #73
1b610                 | ' return q
1b610     A7 F0 03 F6 | 	mov	ptra, fp
1b614     B2 00 A0 FD | 	call	#popregs_
1b618                 | _hg010b_spin2_inttostr_ret
1b618     2D 00 64 FD | 	ret
1b61c                 | 
1b61c                 | ' 
1b61c                 | ' '..............................................................................
1b61c                 | ' 
1b61c                 | ' {{
1b61c                 | ' }}
1b61c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1b61c                 | _psram_spin2_startx
1b61c     04 4A 05 F6 | 	mov	COUNT_, #4
1b620     A8 00 A0 FD | 	call	#pushregs_
1b624     09 1F 02 F6 | 	mov	local01, arg01
1b628     0B 21 02 F6 | 	mov	local02, arg03
1b62c     0C 23 02 F6 | 	mov	local03, arg04
1b630                 | '     stop() ' restart driver if required
1b630     54 01 B0 FD | 	call	#_psram_spin2_stop
1b634     00 1E 0E F2 | 	cmp	local01, #0 wz
1b638     14 1E 06 AB |  if_e	rdlong	local01, #20
1b63c     0F 15 52 F6 | 	abs	arg02, local01 wc
1b640     A1 07 00 FF 
1b644     40 14 16 FD | 	qdiv	arg02, ##1000000
1b648                 | ' 
1b648                 | '     ' use current frequency if none specified
1b648                 | ' 
1b648                 | '     if freq == 0 
1b648                 | '         freq := clkfreq 
1b648                 | ' 
1b648                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1b648                 | ' 
1b648                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1b648                 | '     if burst < 0
1b648                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1b648     18 14 62 FD | 	getqx	arg02
1b64c     0A 19 82 F6 | 	negc	arg04, arg02
1b650     03 18 66 F0 | 	shl	arg04, #3
1b654     84 18 86 F1 | 	sub	arg04, #132
1b658     04 18 46 F0 | 	shr	arg04, #4
1b65c     04 18 66 F0 | 	shl	arg04, #4
1b660     00 18 56 F2 | 	cmps	arg04, #0 wc
1b664     0E FA 65 C6 |  if_b	neg	result1, #14
1b668     10 01 90 CD |  if_b	jmp	#LR__2193
1b66c                 | ' 
1b66c                 | '     ' compute the input delay
1b66c                 | ' 
1b66c                 | '     if delay <= 0
1b66c     01 20 56 F2 | 	cmps	local02, #1 wc
1b670     10 00 90 3D |  if_ae	jmp	#LR__2190
1b674                 | '         delay := lookupDelay(freq)
1b674     0F 13 02 F6 | 	mov	arg01, local01
1b678     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1b67c     FD 20 02 F6 | 	mov	local02, result1
1b680     04 00 90 FD | 	jmp	#LR__2191
1b684                 | LR__2190
1b684                 | '     else
1b684                 | '         delay <#= $f ' limit to 15
1b684     0F 20 66 F3 | 	fles	local02, #15
1b688                 | LR__2191
1b688                 | ' 
1b688                 | '     ' create our lock
1b688                 | ' 
1b688                 | '     driverlock := LOCKNEW()  
1b688     00 FA 05 F6 | 	mov	result1, #0
1b68c     04 FA 61 FD | 	locknew	result1
1b690     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b694     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1b698                 | '     if driverlock == -1
1b698     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b69c     FF FF 7F FF 
1b6a0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b6a4                 | '         return ERR_NO_LOCK
1b6a4     1A FA 65 A6 |  if_e	neg	result1, #26
1b6a8     D0 00 90 AD |  if_e	jmp	#LR__2193
1b6ac                 | ' 
1b6ac                 | '     ' patch in the proper data and HUB addresses to the startup structure
1b6ac                 | ' 
1b6ac                 | '     long[@startupData][0]:=clkfreq
1b6ac     14 1E 06 FB | 	rdlong	local01, #20
1b6b0     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1b6b4     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1b6b8                 | ' '    long[@startupData][1]:=$1000_0000
1b6b8                 | '     long[@startupData][5]:=@deviceData
1b6b8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1b6bc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b6c0     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1b6c4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1b6c8     14 14 06 F1 | 	add	arg02, #20
1b6cc     0A 1F 62 FC | 	wrlong	local01, arg02
1b6d0                 | '     long[@startupData][6]:=@qosData
1b6d0     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1b6d4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b6d8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1b6dc     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1b6e0     18 14 06 F1 | 	add	arg02, #24
1b6e4     0A 1F 62 FC | 	wrlong	local01, arg02
1b6e8                 | '     long[@startupData][7]:=$7FF00
1b6e8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b6ec     1C 1E 06 F1 | 	add	local01, #28
1b6f0     FF 03 80 FF 
1b6f4     0F 01 6A FC | 	wrlong	##524032, local01
1b6f8                 | ' 
1b6f8                 | '     ' setup some default bank and QoS parameter values
1b6f8                 | ' 
1b6f8                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1b6f8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1b6fc     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1b700     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1b704     10 18 66 F0 | 	shl	arg04, #16
1b708     0C 20 66 F0 | 	shl	local02, #12
1b70c     10 19 42 F5 | 	or	arg04, local02
1b710     18 18 46 F5 | 	or	arg04, #24
1b714     0C 15 02 F6 | 	mov	arg02, arg04
1b718     02 16 06 F6 | 	mov	arg03, #2
1b71c     A0 00 A0 FD | 	call	#\builtin_longfill_
1b720                 | '     longfill(@qosData, $FFFF0000, 8)
1b720     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1b724     07 16 06 F6 | 	mov	arg03, #7
1b728     28 16 62 FD | 	setq	arg03
1b72c     80 FF FF FF 
1b730     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1b734                 | ' 
1b734                 | '     ' get the address of the PSRAM memory driver so we can start it
1b734                 | ' 
1b734                 | '     driverAddr:= driver.getDriverAddr()
1b734                 | '     return @driver_start
1b734     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1b738     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1b73c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1b740                 | ' 
1b740                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1b740                 | ' 
1b740                 | '     if desiredcog < 0
1b740     00 22 56 F2 | 	cmps	local03, #0 wc
1b744                 | '         desiredcog := NEWCOG
1b744     10 22 06 C6 |  if_b	mov	local03, #16
1b748                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1b748     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1b74c     11 25 02 F6 | 	mov	local04, local03
1b750     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1b754     0A 25 F2 FC | 	coginit	local04, arg02 wc
1b758     01 24 66 C6 |  if_b	neg	local04, #1
1b75c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1b760     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1b764                 | '     repeat until long[@startupData] == 0 
1b764     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1b768                 | LR__2192
1b768     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1b76c     F8 FF 9F 5D |  if_ne	jmp	#LR__2192
1b770                 | ' 
1b770                 | '     return drivercog
1b770     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1b774     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1b778     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b77c                 | LR__2193
1b77c     A7 F0 03 F6 | 	mov	ptra, fp
1b780     B2 00 A0 FD | 	call	#popregs_
1b784                 | _psram_spin2_startx_ret
1b784     2D 00 64 FD | 	ret
1b788                 | 
1b788                 | ' 
1b788                 | ' '..............................................................................
1b788                 | ' 
1b788                 | ' {{
1b788                 | ' }}
1b788                 | ' PUB stop() : i
1b788                 | _psram_spin2_stop
1b788     00 00 06 F6 | 	mov	_var01, #0
1b78c                 | '     if drivercog <> -1
1b78c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b790     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b794     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b798     FF FF 7F FF 
1b79c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1b7a0     70 00 90 AD |  if_e	jmp	#LR__2203
1b7a4                 | '         cogstop(drivercog) ' a rather brutal stop
1b7a4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b7a8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b7ac     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b7b0     03 12 62 FD | 	cogstop	arg01
1b7b4     97 26 48 FB | 	callpa	#(@LR__2202-@LR__2200)>>2,fcache_load_ptr_
1b7b8                 | '         repeat i from 0 to 7
1b7b8                 | LR__2200
1b7b8                 | '             if long[$7FF00][i*3] < 0
1b7b8     00 FB 01 F6 | 	mov	result1, _var01
1b7bc     01 FA 65 F0 | 	shl	result1, #1
1b7c0     00 FB 01 F1 | 	add	result1, _var01
1b7c4     02 FA 65 F0 | 	shl	result1, #2
1b7c8     FF 03 00 FF 
1b7cc     00 FB 05 F1 | 	add	result1, ##524032
1b7d0     FD FA 01 FB | 	rdlong	result1, result1
1b7d4     00 FA 55 F2 | 	cmps	result1, #0 wc
1b7d8     1C 00 90 3D |  if_ae	jmp	#LR__2201
1b7dc                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1b7dc     00 FB 01 F6 | 	mov	result1, _var01
1b7e0     01 FA 65 F0 | 	shl	result1, #1
1b7e4     00 FB 01 F1 | 	add	result1, _var01
1b7e8     02 FA 65 F0 | 	shl	result1, #2
1b7ec     FF 03 00 FF 
1b7f0     00 FB 05 F1 | 	add	result1, ##524032
1b7f4     FD 20 68 FC | 	wrlong	#16, result1
1b7f8                 | LR__2201
1b7f8     01 00 06 F1 | 	add	_var01, #1
1b7fc     08 00 56 F2 | 	cmps	_var01, #8 wc
1b800     B4 FF 9F CD |  if_b	jmp	#LR__2200
1b804                 | LR__2202
1b804                 | '         drivercog := -1
1b804     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b808     FF FF FF FF 
1b80c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1b810     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b814                 | LR__2203
1b814                 | '     if driverlock <> -1
1b814     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b818     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1b81c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b820     FF FF 7F FF 
1b824     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1b828                 | '         LOCKRET(driverlock)
1b828     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1b82c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1b830     05 12 62 5D |  if_ne	lockret	arg01
1b834                 | '         driverlock := -1
1b834     FF FF FF 5F 
1b838     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1b83c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1b840     00 FB 01 F6 | 	mov	result1, _var01
1b844                 | _psram_spin2_stop_ret
1b844     2D 00 64 FD | 	ret
1b848                 | 
1b848                 | ' 
1b848                 | ' '..............................................................................
1b848                 | ' 
1b848                 | ' {{
1b848                 | ' }}
1b848                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1b848                 | _psram_spin2_read1
1b848                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1b848                 | '     if drivercog == -1 ' driver must be running
1b848     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b84c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1b850     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b854     FF FF 7F FF 
1b858     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1b85c                 | '         return ERR_INACTIVE
1b85c     0F FA 65 A6 |  if_e	neg	result1, #15
1b860     7C 00 90 AD |  if_e	jmp	#LR__2211
1b864                 | '     if count == 0 ' don't even bother reading
1b864     00 16 0E F2 | 	cmp	arg03, #0 wz
1b868                 | '         return 0
1b868     00 FA 05 A6 |  if_e	mov	result1, #0
1b86c     70 00 90 AD |  if_e	jmp	#LR__2211
1b870                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1b870     00 FA 05 F6 | 	mov	result1, #0
1b874     01 FA 61 FD | 	cogid	result1
1b878     FD 00 02 F6 | 	mov	_var01, result1
1b87c     01 00 66 F0 | 	shl	_var01, #1
1b880     FD 00 02 F1 | 	add	_var01, result1
1b884     02 00 66 F0 | 	shl	_var01, #2
1b888     FF 03 00 FF 
1b88c     00 03 06 F6 | 	mov	_var02, ##524032
1b890     00 03 02 F1 | 	add	_var02, _var01
1b894                 | '     if long[mailbox] < 0
1b894     01 01 02 FB | 	rdlong	_var01, _var02
1b898     00 00 56 F2 | 	cmps	_var01, #0 wc
1b89c                 | '         return ERR_MAILBOX_BUSY
1b89c     1C FA 65 C6 |  if_b	neg	result1, #28
1b8a0     3C 00 90 CD |  if_b	jmp	#LR__2211
1b8a4                 | '     long[mailbox][2] := count
1b8a4     08 02 06 F1 | 	add	_var02, #8
1b8a8     01 17 62 FC | 	wrlong	arg03, _var02
1b8ac                 | '     long[mailbox][1] := dstHubAddr
1b8ac     04 02 86 F1 | 	sub	_var02, #4
1b8b0     01 13 62 FC | 	wrlong	arg01, _var02
1b8b4     04 02 86 F1 | 	sub	_var02, #4
1b8b8                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1b8b8     0A 05 02 F6 | 	mov	_var03, arg02
1b8bc     D9 04 06 F4 | 	bitl	_var03, #217
1b8c0     00 00 58 FF 
1b8c4     00 00 06 F6 | 	mov	_var01, ##-1342177280
1b8c8     02 01 02 F1 | 	add	_var01, _var03
1b8cc     01 01 62 FC | 	wrlong	_var01, _var02
1b8d0                 | '     repeat
1b8d0                 | LR__2210
1b8d0                 | '         result := long[mailbox]    
1b8d0     01 05 02 FB | 	rdlong	_var03, _var02
1b8d4     00 04 56 F2 | 	cmps	_var03, #0 wc
1b8d8     F4 FF 9F CD |  if_b	jmp	#LR__2210
1b8dc                 | '     while result < 0   
1b8dc                 | '     return -result                       'return success or error
1b8dc     02 FB 61 F6 | 	neg	result1, _var03
1b8e0                 | LR__2211
1b8e0                 | _psram_spin2_read1_ret
1b8e0     2D 00 64 FD | 	ret
1b8e4                 | 
1b8e4                 | ' 
1b8e4                 | ' '..............................................................................
1b8e4                 | ' 
1b8e4                 | ' {{
1b8e4                 | ' }}
1b8e4                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1b8e4                 | _psram_spin2_write
1b8e4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1b8e4                 | '     if drivercog == -1 ' driver must be running
1b8e4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b8e8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1b8ec     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b8f0     FF FF 7F FF 
1b8f4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1b8f8                 | '         return ERR_INACTIVE
1b8f8     0F FA 65 A6 |  if_e	neg	result1, #15
1b8fc     7C 00 90 AD |  if_e	jmp	#LR__2221
1b900                 | '     if count == 0 ' don't even bother writing
1b900     00 16 0E F2 | 	cmp	arg03, #0 wz
1b904                 | '         return 0
1b904     00 FA 05 A6 |  if_e	mov	result1, #0
1b908     70 00 90 AD |  if_e	jmp	#LR__2221
1b90c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1b90c     00 FA 05 F6 | 	mov	result1, #0
1b910     01 FA 61 FD | 	cogid	result1
1b914     FD 00 02 F6 | 	mov	_var01, result1
1b918     01 00 66 F0 | 	shl	_var01, #1
1b91c     FD 00 02 F1 | 	add	_var01, result1
1b920     02 00 66 F0 | 	shl	_var01, #2
1b924     FF 03 00 FF 
1b928     00 03 06 F6 | 	mov	_var02, ##524032
1b92c     00 03 02 F1 | 	add	_var02, _var01
1b930                 | '     if long[mailbox] < 0
1b930     01 01 02 FB | 	rdlong	_var01, _var02
1b934     00 00 56 F2 | 	cmps	_var01, #0 wc
1b938                 | '         return ERR_MAILBOX_BUSY
1b938     1C FA 65 C6 |  if_b	neg	result1, #28
1b93c     3C 00 90 CD |  if_b	jmp	#LR__2221
1b940                 | '     long[mailbox][2] := count
1b940     08 02 06 F1 | 	add	_var02, #8
1b944     01 17 62 FC | 	wrlong	arg03, _var02
1b948                 | '     long[mailbox][1] := srcHubAddr
1b948     04 02 86 F1 | 	sub	_var02, #4
1b94c     01 13 62 FC | 	wrlong	arg01, _var02
1b950     04 02 86 F1 | 	sub	_var02, #4
1b954                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1b954     0A 05 02 F6 | 	mov	_var03, arg02
1b958     D9 04 06 F4 | 	bitl	_var03, #217
1b95c     00 00 78 FF 
1b960     00 00 06 F6 | 	mov	_var01, ##-268435456
1b964     02 01 02 F1 | 	add	_var01, _var03
1b968     01 01 62 FC | 	wrlong	_var01, _var02
1b96c                 | '     repeat
1b96c                 | LR__2220
1b96c                 | '         result := long[mailbox]    
1b96c     01 05 02 FB | 	rdlong	_var03, _var02
1b970     00 04 56 F2 | 	cmps	_var03, #0 wc
1b974     F4 FF 9F CD |  if_b	jmp	#LR__2220
1b978                 | '     while result < 0   
1b978                 | '     return -result                       'return success or error
1b978     02 FB 61 F6 | 	neg	result1, _var03
1b97c                 | LR__2221
1b97c                 | _psram_spin2_write_ret
1b97c     2D 00 64 FD | 	ret
1b980                 | 
1b980                 | ' 
1b980                 | ' ' generalized fill
1b980                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1b980                 | _psram_spin2_fill
1b980     09 01 02 F6 | 	mov	_var01, arg01
1b984     0A 03 02 F6 | 	mov	_var02, arg02
1b988     0B 05 02 F6 | 	mov	_var03, arg03
1b98c     0D 07 02 F6 | 	mov	_var04, arg05
1b990                 | '     case datasize 
1b990     01 06 86 F1 | 	sub	_var04, #1
1b994     04 06 26 F3 | 	fle	_var04, #4
1b998     30 06 62 FD | 	jmprel	_var04
1b99c                 | LR__2230
1b99c     10 00 90 FD | 	jmp	#LR__2231
1b9a0     18 00 90 FD | 	jmp	#LR__2232
1b9a4     2C 00 90 FD | 	jmp	#LR__2234
1b9a8     1C 00 90 FD | 	jmp	#LR__2233
1b9ac     24 00 90 FD | 	jmp	#LR__2234
1b9b0                 | LR__2231
1b9b0                 | '         1: req := driver.R_WRITEBYTE
1b9b0     00 00 60 FF 
1b9b4     00 08 06 F6 | 	mov	_var05, ##-1073741824
1b9b8     20 00 90 FD | 	jmp	#LR__2235
1b9bc                 | LR__2232
1b9bc                 | '         2: req := driver.R_WRITEWORD
1b9bc     00 00 68 FF 
1b9c0     00 08 06 F6 | 	mov	_var05, ##-805306368
1b9c4     14 00 90 FD | 	jmp	#LR__2235
1b9c8                 | LR__2233
1b9c8                 | '         4: req := driver.R_WRITELONG
1b9c8     00 00 70 FF 
1b9cc     00 08 06 F6 | 	mov	_var05, ##-536870912
1b9d0     08 00 90 FD | 	jmp	#LR__2235
1b9d4                 | LR__2234
1b9d4                 | '         other : return ERR_INVALID
1b9d4     06 FA 65 F6 | 	neg	result1, #6
1b9d8     94 00 90 FD | 	jmp	#LR__2237
1b9dc                 | LR__2235
1b9dc                 | '     if count == 0   ' nothing to do
1b9dc     00 04 0E F2 | 	cmp	_var03, #0 wz
1b9e0                 | '         return 0
1b9e0     00 FA 05 A6 |  if_e	mov	result1, #0
1b9e4     88 00 90 AD |  if_e	jmp	#LR__2237
1b9e8                 | '     if drivercog == -1
1b9e8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b9ec     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1b9f0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b9f4     FF FF 7F FF 
1b9f8     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1b9fc                 | '         return ERR_INACTIVE
1b9fc     0F FA 65 A6 |  if_e	neg	result1, #15
1ba00     6C 00 90 AD |  if_e	jmp	#LR__2237
1ba04                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1ba04     00 FA 05 F6 | 	mov	result1, #0
1ba08     01 FA 61 FD | 	cogid	result1
1ba0c     FD 06 02 F6 | 	mov	_var04, result1
1ba10     01 06 66 F0 | 	shl	_var04, #1
1ba14     FD 06 02 F1 | 	add	_var04, result1
1ba18     02 06 66 F0 | 	shl	_var04, #2
1ba1c     FF 03 00 FF 
1ba20     00 0B 06 F6 | 	mov	_var06, ##524032
1ba24     03 0B 02 F1 | 	add	_var06, _var04
1ba28                 | '     if long[mailbox] < 0
1ba28     05 07 02 FB | 	rdlong	_var04, _var06
1ba2c     00 06 56 F2 | 	cmps	_var04, #0 wc
1ba30                 | '         return ERR_MAILBOX_BUSY
1ba30     1C FA 65 C6 |  if_b	neg	result1, #28
1ba34     38 00 90 CD |  if_b	jmp	#LR__2237
1ba38                 | '     long[mailbox][2] := count
1ba38     08 0A 06 F1 | 	add	_var06, #8
1ba3c     05 05 62 FC | 	wrlong	_var03, _var06
1ba40                 | '     long[mailbox][1] := pattern
1ba40     04 0A 86 F1 | 	sub	_var06, #4
1ba44     05 03 62 FC | 	wrlong	_var02, _var06
1ba48     04 0A 86 F1 | 	sub	_var06, #4
1ba4c                 | '     long[mailbox] := req + (addr & $1ffffff)
1ba4c     04 0D 02 F6 | 	mov	_var07, _var05
1ba50     00 0F 02 F6 | 	mov	_var08, _var01
1ba54     D9 0E 06 F4 | 	bitl	_var08, #217
1ba58     07 0D 02 F1 | 	add	_var07, _var08
1ba5c     05 0D 62 FC | 	wrlong	_var07, _var06
1ba60                 | '     repeat
1ba60                 | LR__2236
1ba60                 | '         r := long[mailbox]
1ba60     05 0F 02 FB | 	rdlong	_var08, _var06
1ba64     00 0E 56 F2 | 	cmps	_var08, #0 wc
1ba68     F4 FF 9F CD |  if_b	jmp	#LR__2236
1ba6c                 | '     while r < 0
1ba6c                 | '     return -r                  ' return 0 for success or negated error code
1ba6c     07 FB 61 F6 | 	neg	result1, _var08
1ba70                 | LR__2237
1ba70                 | _psram_spin2_fill_ret
1ba70     2D 00 64 FD | 	ret
1ba74                 | 
1ba74                 | ' 
1ba74                 | ' '..............................................................................
1ba74                 | ' 
1ba74                 | ' {{
1ba74                 | ' }}
1ba74                 | ' PUB setQos(cog, qos) : result | mailbox
1ba74                 | _psram_spin2_setQos
1ba74     09 01 02 F6 | 	mov	_var01, arg01
1ba78                 | '     if drivercog == -1 ' driver must be running
1ba78     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ba7c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1ba80     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ba84     FF FF 7F FF 
1ba88     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1ba8c                 | '         return ERR_INACTIVE
1ba8c     0F FA 65 A6 |  if_e	neg	result1, #15
1ba90     9C 00 90 AD |  if_e	jmp	#LR__2244
1ba94                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1ba94     00 00 56 F2 | 	cmps	_var01, #0 wc
1ba98     08 00 90 CD |  if_b	jmp	#LR__2240
1ba9c     08 00 56 F2 | 	cmps	_var01, #8 wc
1baa0     08 00 90 CD |  if_b	jmp	#LR__2241
1baa4                 | LR__2240
1baa4                 | '         return ERR_INVALID
1baa4     06 FA 65 F6 | 	neg	result1, #6
1baa8     84 00 90 FD | 	jmp	#LR__2244
1baac                 | LR__2241
1baac                 | '     long[@qosData][cog] := qos & !$1ff
1baac     FF 15 26 F5 | 	andn	arg02, #511
1bab0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1bab4     02 00 66 F0 | 	shl	_var01, #2
1bab8     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1babc     00 15 62 FC | 	wrlong	arg02, _var01
1bac0                 | '     mailbox := $7FF00 + drivercog*12
1bac0     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1bac4     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1bac8     02 07 02 F6 | 	mov	_var04, _var03
1bacc     01 06 66 F0 | 	shl	_var04, #1
1bad0     02 07 02 F1 | 	add	_var04, _var03
1bad4     02 06 66 F0 | 	shl	_var04, #2
1bad8     FF 03 00 FF 
1badc     00 09 06 F6 | 	mov	_var05, ##524032
1bae0     03 09 02 F1 | 	add	_var05, _var04
1bae4                 | '     repeat until LOCKTRY(driverlock)
1bae4     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1bae8                 | LR__2242
1bae8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1baec     06 12 72 FD | 	locktry	arg01 wc
1baf0     F4 FF 9F 3D |  if_ae	jmp	#LR__2242
1baf4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1baf8                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1baf8     00 06 06 F6 | 	mov	_var04, #0
1bafc     01 06 62 FD | 	cogid	_var04
1bb00     00 00 78 FF 
1bb04     00 02 06 F6 | 	mov	_var02, ##-268435456
1bb08     03 03 02 F1 | 	add	_var02, _var04
1bb0c     04 03 62 FC | 	wrlong	_var02, _var05
1bb10                 | '     repeat while long[mailbox] < 0
1bb10                 | LR__2243
1bb10     04 03 02 FB | 	rdlong	_var02, _var05
1bb14     00 02 56 F2 | 	cmps	_var02, #0 wc
1bb18     F4 FF 9F CD |  if_b	jmp	#LR__2243
1bb1c                 | '     LOCKREL(driverlock)
1bb1c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1bb20     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1bb24     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1bb28     07 12 72 FD | 	lockrel	arg01 wc
1bb2c     00 FA 05 F6 | 	mov	result1, #0
1bb30                 | LR__2244
1bb30                 | _psram_spin2_setQos_ret
1bb30     2D 00 64 FD | 	ret
1bb34                 | 
1bb34                 | ' 
1bb34                 | ' '..............................................................................
1bb34                 | ' 
1bb34                 | ' {{
1bb34                 | ' }}
1bb34                 | ' PRI lookupDelay(freq) : delay | profile
1bb34                 | _psram_spin2_lookupDelay
1bb34                 | '     profile := @delayTable
1bb34     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1bb38     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1bb3c                 | '     delay := long[profile][0]
1bb3c     00 03 02 FB | 	rdlong	_var02, _var01
1bb40                 | '     repeat while long[profile][1] 
1bb40     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1bb44     97 16 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
1bb48                 | LR__2250
1bb48     04 00 06 F1 | 	add	_var01, #4
1bb4c     00 FB 09 FB | 	rdlong	result1, _var01 wz
1bb50     04 00 86 F1 | 	sub	_var01, #4
1bb54     1C 00 90 AD |  if_e	jmp	#LR__2252
1bb58                 | '         if freq +< long[profile][1] 
1bb58     04 00 06 F1 | 	add	_var01, #4
1bb5c     00 FB 01 FB | 	rdlong	result1, _var01
1bb60     04 00 86 F1 | 	sub	_var01, #4
1bb64     FD 12 12 F2 | 	cmp	arg01, result1 wc
1bb68                 | '             quit
1bb68                 | '         profile += 4
1bb68     04 00 06 31 |  if_ae	add	_var01, #4
1bb6c                 | '         delay++
1bb6c     01 02 06 31 |  if_ae	add	_var02, #1
1bb70     D4 FF 9F 3D |  if_ae	jmp	#LR__2250
1bb74                 | LR__2251
1bb74                 | LR__2252
1bb74     01 FB 01 F6 | 	mov	result1, _var02
1bb78                 | _psram_spin2_lookupDelay_ret
1bb78     2D 00 64 FD | 	ret
1bb7c                 | 
1bb7c                 | ' 
1bb7c                 | ' PUB start() : r
1bb7c                 | _usbnew_spin2_start
1bb7c     00 00 06 F6 | 	mov	_var01, #0
1bb80                 | '   ifnot driver_cog
1bb80     15 00 00 FF 
1bb84     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1bb88     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1bb8c     15 00 00 FF 
1bb90     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1bb94     38 00 90 5D |  if_ne	jmp	#LR__2260
1bb98                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1bb98     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1bb9c     10 00 06 F6 | 	mov	_var01, #16
1bba0     00 16 06 F6 | 	mov	arg03, #0
1bba4     28 16 62 FD | 	setq	arg03
1bba8     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1bbac     01 00 66 C6 |  if_b	neg	_var01, #1
1bbb0                 | '     if r >= 0
1bbb0     00 00 56 F2 | 	cmps	_var01, #0 wc
1bbb4                 | '       driver_cog := r+1
1bbb4     00 03 02 36 |  if_ae	mov	_var02, _var01
1bbb8     01 02 06 31 |  if_ae	add	_var02, #1
1bbbc     15 00 00 3F 
1bbc0     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1bbc4     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1bbc8     15 00 00 3F 
1bbcc     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1bbd0                 | LR__2260
1bbd0     00 FB 01 F6 | 	mov	result1, _var01
1bbd4                 | _usbnew_spin2_start_ret
1bbd4     2D 00 64 FD | 	ret
1bbd8                 | 
1bbd8                 | '     '' (Always enabled)
1bbd8                 | ' 
1bbd8                 | ' '' Get current pressed state of a keyboard key
1bbd8                 | ' PUB keystate(key) : r | buf[2],tmp
1bbd8                 | _usbnew_spin2_keystate
1bbd8     00 04 06 F6 | 	mov	_var03, #0
1bbdc                 | '   if key >= $E0 && key < $E8
1bbdc     E0 12 56 F2 | 	cmps	arg01, #224 wc
1bbe0     34 00 90 CD |  if_b	jmp	#LR__2270
1bbe4     E8 12 56 F2 | 	cmps	arg01, #232 wc
1bbe8     2C 00 90 3D |  if_ae	jmp	#LR__2270
1bbec                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1bbec     00 FA 05 F6 | 	mov	result1, #0
1bbf0     13 00 00 FF 
1bbf4     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1bbf8     09 07 02 F6 | 	mov	_var04, arg01
1bbfc     E0 06 86 F1 | 	sub	_var04, #224
1bc00     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1bc04     03 09 4A F0 | 	shr	_var05, _var04 wz
1bc08     13 00 00 FF 
1bc0c     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1bc10     01 FA 65 56 |  if_ne	neg	result1, #1
1bc14     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1bc18                 | LR__2270
1bc18                 | '   else
1bc18                 | '     '' Do this in inline ASM to ensure atomicity
1bc18                 | '     tmp := @hkbd_report
1bc18     13 00 00 FF 
1bc1c     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1bc20     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1bc24                 | '     org
1bc24     13 00 00 FF 
1bc28     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1bc2c     97 1E 48 FB | 	callpa	#(@LR__2272-@LR__2271)>>2,fcache_load_ptr_
1bc30                 | LR__2271
1bc30 000             | 	org	0
1bc30 000 28 02 64 FD | 	setq	#1
1bc34 001 04 01 02 FB | 	rdlong	_var01, _var05
1bc38 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1bc3c 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1bc40 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1bc44 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bc48 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1bc4c 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bc50 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1bc54 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bc58 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1bc5c 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bc60 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1bc64 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bc68 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1bc6c 00f             | LR__2272
1bc6c                 | 	orgh
1bc6c     02 FB 01 F6 | 	mov	result1, _var03
1bc70                 | _usbnew_spin2_keystate_ret
1bc70     2D 00 64 FD | 	ret
1bc74                 | 
1bc74                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1bc74                 | ' 
1bc74                 | ' '' Return key event from buffer if there is one
1bc74                 | ' PUB get_key() : r | tail
1bc74                 | _usbnew_spin2_get_key
1bc74                 | '   tail := keyq_tail
1bc74     0F 00 00 FF 
1bc78     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1bc7c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1bc80                 | '   if keyq_head == tail
1bc80     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1bc84     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1bc88     0F 00 00 FF 
1bc8c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1bc90     00 03 0A F2 | 	cmp	_var02, _var01 wz
1bc94                 | '     return 0 ' No event
1bc94     00 FA 05 A6 |  if_e	mov	result1, #0
1bc98     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1bc9c                 | '   r := keyq_data[tail]
1bc9c     00 03 02 F6 | 	mov	_var02, _var01
1bca0     02 02 66 F0 | 	shl	_var02, #2
1bca4     0F 00 00 FF 
1bca8     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1bcac     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1bcb0     01 FB 01 FB | 	rdlong	result1, _var02
1bcb4                 | '   if ++tail == KEYQUEUE_SIZE
1bcb4     01 00 06 F1 | 	add	_var01, #1
1bcb8     80 00 0E F2 | 	cmp	_var01, #128 wz
1bcbc                 | '     tail := 0
1bcbc     00 00 06 A6 |  if_e	mov	_var01, #0
1bcc0                 | '   keyq_tail := tail
1bcc0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1bcc4     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1bcc8     0F 00 00 FF 
1bccc     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1bcd0                 | _usbnew_spin2_get_key_ret
1bcd0     2D 00 64 FD | 	ret
1bcd4                 | 
1bcd4                 | ' 
1bcd4                 | ' '' Emulate mouse movement
1bcd4                 | ' PUB mouse_move(x,y)
1bcd4                 | _usbnew_spin2_mouse_move
1bcd4     02 4A 05 F6 | 	mov	COUNT_, #2
1bcd8     A8 00 A0 FD | 	call	#pushregs_
1bcdc     09 1F 02 F6 | 	mov	local01, arg01
1bce0     0A 21 02 F6 | 	mov	local02, arg02
1bce4                 | '   mouse_lock := 1
1bce4     14 00 00 FF 
1bce8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1bcec     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1bcf0     14 00 00 FF 
1bcf4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1bcf8                 | '   waitus(2) ' hope driver is now done
1bcf8     02 12 06 F6 | 	mov	arg01, #2
1bcfc     AC 0A B0 FD | 	call	#__system___waitus
1bd00                 | '   mouse_xacc := x
1bd00     14 00 00 FF 
1bd04     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1bd08     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1bd0c                 | '   mouse_yacc := y
1bd0c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1bd10     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1bd14                 | '   if mouse_outptr
1bd14     04 00 00 FF 
1bd18     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1bd1c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1bd20     0F 00 00 FF 
1bd24     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1bd28     24 00 90 AD |  if_e	jmp	#LR__2280
1bd2c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1bd2c     10 20 66 F0 | 	shl	local02, #16
1bd30     0F 1F 32 F9 | 	getword	local01, local01, #0
1bd34     0F 21 42 F5 | 	or	local02, local01
1bd38     0F 00 00 FF 
1bd3c     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1bd40     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1bd44     0F 00 00 FF 
1bd48     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1bd4c     0F 21 62 FC | 	wrlong	local02, local01
1bd50                 | LR__2280
1bd50                 | '   mouse_lock := 0
1bd50     14 00 00 FF 
1bd54     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1bd58     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1bd5c     14 00 00 FF 
1bd60     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1bd64     A7 F0 03 F6 | 	mov	ptra, fp
1bd68     B2 00 A0 FD | 	call	#popregs_
1bd6c                 | _usbnew_spin2_mouse_move_ret
1bd6c     2D 00 64 FD | 	ret
1bd70                 | 
1bd70                 | '     '' Set HAVE_HIDPAD to enable.
1bd70                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1bd70                 | ' 
1bd70                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1bd70                 | ' PUB hidpad_id(dev) : r
1bd70                 | _usbnew_spin2_hidpad_id
1bd70                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1bd70     13 00 00 FF 
1bd74     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1bd78     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1bd7c     09 01 02 F6 | 	mov	_var01, arg01
1bd80     03 00 66 F0 | 	shl	_var01, #3
1bd84     09 01 82 F1 | 	sub	_var01, arg01
1bd88     02 00 66 F0 | 	shl	_var01, #2
1bd8c     00 FB 01 F1 | 	add	result1, _var01
1bd90     FD FA 01 FB | 	rdlong	result1, result1
1bd94     13 00 00 FF 
1bd98     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1bd9c                 | _usbnew_spin2_hidpad_id_ret
1bd9c     2D 00 64 FD | 	ret
1bda0                 | 
1bda0                 | ' 
1bda0                 | ' '' Get all button states for a device
1bda0                 | ' PUB hidpad_buttons(dev) : r 
1bda0                 | _usbnew_spin2_hidpad_buttons
1bda0                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1bda0     13 00 00 FF 
1bda4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1bda8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1bdac     09 01 02 F6 | 	mov	_var01, arg01
1bdb0     03 00 66 F0 | 	shl	_var01, #3
1bdb4     09 01 82 F1 | 	sub	_var01, arg01
1bdb8     02 00 66 F0 | 	shl	_var01, #2
1bdbc     00 FB 01 F1 | 	add	result1, _var01
1bdc0     14 FA 05 F1 | 	add	result1, #20
1bdc4     FD FA 01 FB | 	rdlong	result1, result1
1bdc8     13 00 00 FF 
1bdcc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1bdd0                 | _usbnew_spin2_hidpad_buttons_ret
1bdd0     2D 00 64 FD | 	ret
1bdd4                 | 
1bdd4                 | ' 
1bdd4                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1bdd4                 | ' PUB hidpad_axis(dev,axnum) : r
1bdd4                 | _usbnew_spin2_hidpad_axis
1bdd4                 | '   if axnum +>= 6
1bdd4     06 14 16 F2 | 	cmp	arg02, #6 wc
1bdd8                 | '     return 0
1bdd8     00 FA 05 36 |  if_ae	mov	result1, #0
1bddc     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1bde0                 | '   else 
1bde0                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1bde0     13 00 00 FF 
1bde4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1bde8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1bdec     09 01 02 F6 | 	mov	_var01, arg01
1bdf0     03 00 66 F0 | 	shl	_var01, #3
1bdf4     09 01 82 F1 | 	sub	_var01, arg01
1bdf8     02 00 66 F0 | 	shl	_var01, #2
1bdfc     00 FB 01 F1 | 	add	result1, _var01
1be00     04 00 06 F6 | 	mov	_var01, #4
1be04     0A 01 02 F1 | 	add	_var01, arg02
1be08     01 00 66 F0 | 	shl	_var01, #1
1be0c     FD 00 02 F1 | 	add	_var01, result1
1be10     00 FB E1 FA | 	rdword	result1, _var01
1be14     0F FA 65 F7 | 	signx	result1, #15
1be18     13 00 00 FF 
1be1c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1be20                 | _usbnew_spin2_hidpad_axis_ret
1be20     2D 00 64 FD | 	ret
1be24                 | 
1be24                 | ' 
1be24                 | ' 
1be24                 | ' '--------------------------------------------------------------
1be24                 | ' '---------- Init the variables, start the cog. ----------------
1be24                 | ' '--------------------------------------------------------------
1be24                 | ' 
1be24                 | ' pub start(mbox,scope,cache) :cog,base | iii
1be24                 | _audio096_spin2_start
1be24     04 4A 05 F6 | 	mov	COUNT_, #4
1be28     A8 00 A0 FD | 	call	#pushregs_
1be2c     09 1F 02 F6 | 	mov	local01, arg01
1be30                 | ' 
1be30                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1be30                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1be30                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1be30                 | ' 
1be30                 | ' mailboxaddr:=mbox 
1be30     F2 1E 62 FC | 	wrlong	local01, objptr
1be34                 | ' scope_ptr:=scope
1be34     04 E4 05 F1 | 	add	objptr, #4
1be38     F2 14 62 FC | 	wrlong	arg02, objptr
1be3c                 | ' cache_ptr:=cache
1be3c     04 E4 05 F1 | 	add	objptr, #4
1be40     F2 16 62 FC | 	wrlong	arg03, objptr
1be44                 | ' base:=@channel1[0]
1be44     04 E4 05 F1 | 	add	objptr, #4
1be48     F2 20 02 F6 | 	mov	local02, objptr
1be4c                 | ' 
1be4c                 | ' repeat iii from 0 to 7
1be4c     00 22 06 F6 | 	mov	local03, #0
1be50     02 00 00 FF 
1be54     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1be58     0C E4 85 F1 | 	sub	objptr, #12
1be5c     97 B0 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
1be60                 | LR__2290
1be60                 | '   long[base+64*iii]:=0
1be60     10 1F 02 F6 | 	mov	local01, local02
1be64     11 FD 01 F6 | 	mov	result2, local03
1be68     06 FC 65 F0 | 	shl	result2, #6
1be6c     FE 1E 02 F1 | 	add	local01, result2
1be70     0F 01 68 FC | 	wrlong	#0, local01
1be74                 | '   long[base+64*iii+4]:=0
1be74     10 1F 02 F6 | 	mov	local01, local02
1be78     11 FD 01 F6 | 	mov	result2, local03
1be7c     06 FC 65 F0 | 	shl	result2, #6
1be80     FE 1E 02 F1 | 	add	local01, result2
1be84     04 1E 06 F1 | 	add	local01, #4
1be88     0F 01 68 FC | 	wrlong	#0, local01
1be8c                 | '   long[base+64*iii+12]:=0
1be8c     10 25 02 F6 | 	mov	local04, local02
1be90     11 1F 02 F6 | 	mov	local01, local03
1be94     06 1E 66 F0 | 	shl	local01, #6
1be98     0F 25 02 F1 | 	add	local04, local01
1be9c     0C 24 06 F1 | 	add	local04, #12
1bea0     12 01 68 FC | 	wrlong	#0, local04
1bea4                 | '   long[base+64*iii+16]:=2 
1bea4     10 25 02 F6 | 	mov	local04, local02
1bea8     11 1F 02 F6 | 	mov	local01, local03
1beac     06 1E 66 F0 | 	shl	local01, #6
1beb0     0F 25 02 F1 | 	add	local04, local01
1beb4     10 24 06 F1 | 	add	local04, #16
1beb8     12 05 68 FC | 	wrlong	#2, local04
1bebc                 | '   word[base+64*iii+20]:=0
1bebc     10 25 02 F6 | 	mov	local04, local02
1bec0     11 1F 02 F6 | 	mov	local01, local03
1bec4     06 1E 66 F0 | 	shl	local01, #6
1bec8     0F 25 02 F1 | 	add	local04, local01
1becc     14 24 06 F1 | 	add	local04, #20
1bed0     12 01 58 FC | 	wrword	#0, local04
1bed4                 | '   word[base+64*iii+22]:=8192
1bed4     10 25 02 F6 | 	mov	local04, local02
1bed8     11 1F 02 F6 | 	mov	local01, local03
1bedc     06 1E 66 F0 | 	shl	local01, #6
1bee0     0F 25 02 F1 | 	add	local04, local01
1bee4     16 24 06 F1 | 	add	local04, #22
1bee8     10 00 80 FF 
1beec     12 01 58 FC | 	wrword	##8192, local04
1bef0                 | '   word[base+64*iii+24]:=4000+2*iii
1bef0     11 25 02 F6 | 	mov	local04, local03
1bef4     01 24 66 F0 | 	shl	local04, #1
1bef8     07 00 00 FF 
1befc     A0 1F 06 F6 | 	mov	local01, ##4000
1bf00     12 1F 02 F1 | 	add	local01, local04
1bf04     10 25 02 F6 | 	mov	local04, local02
1bf08     11 FD 01 F6 | 	mov	result2, local03
1bf0c     06 FC 65 F0 | 	shl	result2, #6
1bf10     FE 24 02 F1 | 	add	local04, result2
1bf14     18 24 06 F1 | 	add	local04, #24
1bf18     12 1F 52 FC | 	wrword	local01, local04
1bf1c                 | '   word[base+64*iii+26]:=2
1bf1c     10 25 02 F6 | 	mov	local04, local02
1bf20     11 1F 02 F6 | 	mov	local01, local03
1bf24     06 1E 66 F0 | 	shl	local01, #6
1bf28     0F 25 02 F1 | 	add	local04, local01
1bf2c     1A 24 06 F1 | 	add	local04, #26
1bf30     12 05 58 FC | 	wrword	#2, local04
1bf34                 | '   long [base+64*iii+8]:=@null | $C0000000
1bf34     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1bf38     3E 1E 26 F4 | 	bith	local01, #62
1bf3c     10 25 02 F6 | 	mov	local04, local02
1bf40     11 17 02 F6 | 	mov	arg03, local03
1bf44     06 16 66 F0 | 	shl	arg03, #6
1bf48     0B 25 02 F1 | 	add	local04, arg03
1bf4c     08 24 06 F1 | 	add	local04, #8
1bf50     12 1F 62 FC | 	wrlong	local01, local04
1bf54                 | '   long[base+64*iii+32]:=0
1bf54     10 25 02 F6 | 	mov	local04, local02
1bf58     11 1F 02 F6 | 	mov	local01, local03
1bf5c     06 1E 66 F0 | 	shl	local01, #6
1bf60     0F 25 02 F1 | 	add	local04, local01
1bf64     20 24 06 F1 | 	add	local04, #32
1bf68     12 01 68 FC | 	wrlong	#0, local04
1bf6c                 | '   long[base+64*iii+36]:=0
1bf6c     10 25 02 F6 | 	mov	local04, local02
1bf70     11 1F 02 F6 | 	mov	local01, local03
1bf74     06 1E 66 F0 | 	shl	local01, #6
1bf78     0F 25 02 F1 | 	add	local04, local01
1bf7c     24 24 06 F1 | 	add	local04, #36
1bf80     12 01 68 FC | 	wrlong	#0, local04
1bf84                 | '   long[base+64*iii+40]:=0
1bf84     10 25 02 F6 | 	mov	local04, local02
1bf88     11 1F 02 F6 | 	mov	local01, local03
1bf8c     06 1E 66 F0 | 	shl	local01, #6
1bf90     0F 25 02 F1 | 	add	local04, local01
1bf94     28 24 06 F1 | 	add	local04, #40
1bf98     12 01 68 FC | 	wrlong	#0, local04
1bf9c                 | '   long[base+64*iii+44]:=0
1bf9c     10 25 02 F6 | 	mov	local04, local02
1bfa0     11 1F 02 F6 | 	mov	local01, local03
1bfa4     06 1E 66 F0 | 	shl	local01, #6
1bfa8     0F 25 02 F1 | 	add	local04, local01
1bfac     2C 24 06 F1 | 	add	local04, #44
1bfb0     12 01 68 FC | 	wrlong	#0, local04
1bfb4     01 22 06 F1 | 	add	local03, #1
1bfb8     08 22 56 F2 | 	cmps	local03, #8 wc
1bfbc     A0 FE 9F CD |  if_b	jmp	#LR__2290
1bfc0                 | LR__2291
1bfc0     02 00 00 FF 
1bfc4     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1bfc8                 | '   
1bfc8                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1bfc8     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1bfcc     F2 16 02 F6 | 	mov	arg03, objptr
1bfd0     10 24 06 F6 | 	mov	local04, #16
1bfd4     28 16 62 FD | 	setq	arg03
1bfd8     0A 25 F2 FC | 	coginit	local04, arg02 wc
1bfdc     01 24 66 C6 |  if_b	neg	local04, #1
1bfe0                 | ' waitms(100)
1bfe0     64 12 06 F6 | 	mov	arg01, #100
1bfe4     58 07 B0 FD | 	call	#__system___waitms
1bfe8                 | ' return cog,base
1bfe8     10 FD 01 F6 | 	mov	result2, local02
1bfec     12 FB 01 F6 | 	mov	result1, local04
1bff0     A7 F0 03 F6 | 	mov	ptra, fp
1bff4     B2 00 A0 FD | 	call	#popregs_
1bff8                 | _audio096_spin2_start_ret
1bff8     2D 00 64 FD | 	ret
1bffc                 | 
1bffc                 | ' 
1bffc                 | ' ' a simple play procedure to not poke everything. 
1bffc                 | ' 
1bffc                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1bffc                 | _audio096_spin2_play
1bffc     0C E4 05 F1 | 	add	objptr, #12
1c000     F2 00 02 F6 | 	mov	_var01, objptr
1c004     06 12 66 F0 | 	shl	arg01, #6
1c008     09 01 02 F1 | 	add	_var01, arg01
1c00c     00 13 02 F6 | 	mov	arg01, _var01
1c010     0C 12 06 F1 | 	add	arg01, #12
1c014     09 1B 62 FC | 	wrlong	arg05, arg01
1c018     00 1C 56 F2 | 	cmps	arg06, #0 wc
1c01c     00 13 02 36 |  if_ae	mov	arg01, _var01
1c020     10 12 06 31 |  if_ae	add	arg01, #16
1c024     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1c028     02 1A 06 C1 |  if_b	add	arg05, #2
1c02c     00 13 02 C6 |  if_b	mov	arg01, _var01
1c030     10 12 06 C1 |  if_b	add	arg01, #16
1c034     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1c038     0B 13 52 F6 | 	abs	arg01, arg03 wc
1c03c     0B 0A 80 FF 
1c040     09 6D 18 FD | 	qdiv	##1316406, arg01
1c044                 | ' 
1c044                 | ' base2:=@channel1[0]+64*channel
1c044                 | ' 
1c044                 | ' 
1c044                 | ' long[base2+12]:= len
1c044                 | ' if loop >=0 
1c044                 | '   long[base2+16]:= loop
1c044     0C E4 85 F1 | 	sub	objptr, #12
1c048                 | ' else
1c048                 | '   long[base2+16]:= len+2
1c048                 | ' word[base2+20]:=vol
1c048     00 13 02 F6 | 	mov	arg01, _var01
1c04c     14 12 06 F1 | 	add	arg01, #20
1c050     09 19 52 FC | 	wrword	arg04, arg01
1c054                 | ' word[base2+24]:= 1316406/splfreq 
1c054     00 19 02 F6 | 	mov	arg04, _var01
1c058     18 18 06 F1 | 	add	arg04, #24
1c05c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1c05c                 | ' long[base2+28]:=$40000000
1c05c                 | ' long[base2+8]:=sample+$C0000000 
1c05c     00 00 60 FF 
1c060     00 14 06 F1 | 	add	arg02, ##-1073741824
1c064     18 12 62 FD | 	getqx	arg01
1c068     09 13 82 F6 | 	negc	arg01, arg01
1c06c     0C 13 52 FC | 	wrword	arg01, arg04
1c070     00 13 02 F6 | 	mov	arg01, _var01
1c074     1A 12 06 F1 | 	add	arg01, #26
1c078     09 01 5A FC | 	wrword	#256, arg01
1c07c     00 13 02 F6 | 	mov	arg01, _var01
1c080     1C 12 06 F1 | 	add	arg01, #28
1c084     00 00 A0 FF 
1c088     09 01 68 FC | 	wrlong	##1073741824, arg01
1c08c     08 00 06 F1 | 	add	_var01, #8
1c090     00 15 62 FC | 	wrlong	arg02, _var01
1c094                 | _audio096_spin2_play_ret
1c094     2D 00 64 FD | 	ret
1c098                 | 
1c098                 | ' 
1c098                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1c098                 | _audio096_spin2_play8
1c098                 | ' 
1c098                 | ' base2:=@channel1[0]+64*channel
1c098     0C E4 05 F1 | 	add	objptr, #12
1c09c     F2 00 02 F6 | 	mov	_var01, objptr
1c0a0     06 12 66 F0 | 	shl	arg01, #6
1c0a4     09 01 02 F1 | 	add	_var01, arg01
1c0a8                 | ' long[base2]:=0
1c0a8     00 01 68 FC | 	wrlong	#0, _var01
1c0ac                 | ' long[base2+8]:=sample+$40000000 
1c0ac     00 00 20 FF 
1c0b0     00 14 06 F1 | 	add	arg02, ##1073741824
1c0b4     00 13 02 F6 | 	mov	arg01, _var01
1c0b8     08 12 06 F1 | 	add	arg01, #8
1c0bc     09 15 62 FC | 	wrlong	arg02, arg01
1c0c0                 | ' if loop>=0
1c0c0     00 1C 56 F2 | 	cmps	arg06, #0 wc
1c0c4     0C E4 85 F1 | 	sub	objptr, #12
1c0c8     1C 00 90 CD |  if_b	jmp	#LR__2300
1c0cc                 | '   long[base2+12]:=loop
1c0cc     00 15 02 F6 | 	mov	arg02, _var01
1c0d0     0C 14 06 F1 | 	add	arg02, #12
1c0d4     0A 1D 62 FC | 	wrlong	arg06, arg02
1c0d8                 | '   long[base2+16]:= len
1c0d8     00 1D 02 F6 | 	mov	arg06, _var01
1c0dc     10 1C 06 F1 | 	add	arg06, #16
1c0e0     0E 1B 62 FC | 	wrlong	arg05, arg06
1c0e4     1C 00 90 FD | 	jmp	#LR__2301
1c0e8                 | LR__2300
1c0e8                 | ' else
1c0e8                 | '   long[base2+12]:= len
1c0e8     00 1D 02 F6 | 	mov	arg06, _var01
1c0ec     0C 1C 06 F1 | 	add	arg06, #12
1c0f0     0E 1B 62 FC | 	wrlong	arg05, arg06
1c0f4                 | '   long[base2+16]:= len+1
1c0f4     01 1A 06 F1 | 	add	arg05, #1
1c0f8     00 13 02 F6 | 	mov	arg01, _var01
1c0fc     10 12 06 F1 | 	add	arg01, #16
1c100     09 1B 62 FC | 	wrlong	arg05, arg01
1c104                 | LR__2301
1c104     0B 17 52 F6 | 	abs	arg03, arg03 wc
1c108     0B 0A 80 FF 
1c10c     0B 6D 18 FD | 	qdiv	##1316406, arg03
1c110                 | ' word[base2+20]:=vol
1c110     00 17 02 F6 | 	mov	arg03, _var01
1c114     14 16 06 F1 | 	add	arg03, #20
1c118     0B 19 52 FC | 	wrword	arg04, arg03
1c11c                 | ' word[base2+24]:= 1316406 /splfreq 
1c11c     00 13 02 F6 | 	mov	arg01, _var01
1c120     18 12 06 F1 | 	add	arg01, #24
1c124                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1c124                 | ' long[base2+28]:=$40000000
1c124     18 18 62 FD | 	getqx	arg04
1c128     0C 19 82 F6 | 	negc	arg04, arg04
1c12c     09 19 52 FC | 	wrword	arg04, arg01
1c130     00 19 02 F6 | 	mov	arg04, _var01
1c134     1A 18 06 F1 | 	add	arg04, #26
1c138     0C 01 5A FC | 	wrword	#256, arg04
1c13c     1C 00 06 F1 | 	add	_var01, #28
1c140     00 00 A0 FF 
1c144     00 01 68 FC | 	wrlong	##1073741824, _var01
1c148                 | _audio096_spin2_play8_ret
1c148     2D 00 64 FD | 	ret
1c14c                 | 
1c14c                 | ' 
1c14c                 | '     
1c14c                 | ' pub stop(channel) 'silence it
1c14c                 | _audio096_spin2_stop
1c14c                 | ' 
1c14c                 | ' word[@channel1[0]+64*channel+20]:=0
1c14c     0C E4 05 F1 | 	add	objptr, #12
1c150     F2 00 02 F6 | 	mov	_var01, objptr
1c154     09 03 02 F6 | 	mov	_var02, arg01
1c158     06 02 66 F0 | 	shl	_var02, #6
1c15c     01 01 02 F1 | 	add	_var01, _var02
1c160     14 00 06 F1 | 	add	_var01, #20
1c164     00 01 58 FC | 	wrword	#0, _var01
1c168                 | ' word[@channel1[0]+64*channel+20]:=0
1c168     F2 00 02 F6 | 	mov	_var01, objptr
1c16c     06 12 66 F0 | 	shl	arg01, #6
1c170     09 01 02 F1 | 	add	_var01, arg01
1c174     14 00 06 F1 | 	add	_var01, #20
1c178     00 01 58 FC | 	wrword	#0, _var01
1c17c     0C E4 85 F1 | 	sub	objptr, #12
1c180                 | _audio096_spin2_stop_ret
1c180     2D 00 64 FD | 	ret
1c184                 | hubexit
1c184     81 00 80 FD | 	jmp	#cogexit
1c188                 | 
1c188                 | __system___setbaud
1c188     14 64 06 FB | 	rdlong	muldiva_, #20
1c18c     09 67 02 F6 | 	mov	muldivb_, arg01
1c190     BA 00 A0 FD | 	call	#divide_
1c194     97 06 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1c198                 | LR__2310
1c198     3E FA 9D FA | 	rdpin	result1, #62 wc
1c19c     FE FC A1 F1 | 	subx	result2, result2
1c1a0     F4 FF 9F CD |  if_b	jmp	#LR__2310
1c1a4                 | LR__2311
1c1a4     40 7C 64 FD | 	dirl	#62
1c1a8     40 7E 64 FD | 	dirl	#63
1c1ac     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1c1b0     10 66 66 F0 | 	shl	muldivb_, #16
1c1b4     07 14 06 F6 | 	mov	arg02, #7
1c1b8     33 15 02 F1 | 	add	arg02, muldivb_
1c1bc     3E F8 0C FC | 	wrpin	#124, #62
1c1c0     3E 14 16 FC | 	wxpin	arg02, #62
1c1c4     3F 7C 0C FC | 	wrpin	#62, #63
1c1c8     14 14 06 F1 | 	add	arg02, #20
1c1cc     3F 14 16 FC | 	wxpin	arg02, #63
1c1d0     41 7C 64 FD | 	dirh	#62
1c1d4     41 7E 64 FD | 	dirh	#63
1c1d8                 | __system___setbaud_ret
1c1d8     2D 00 64 FD | 	ret
1c1dc                 | 
1c1dc                 | __system___txraw
1c1dc     01 4A 05 F6 | 	mov	COUNT_, #1
1c1e0     A8 00 A0 FD | 	call	#pushregs_
1c1e4     09 1F 02 F6 | 	mov	local01, arg01
1c1e8     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1c1ec                 | LR__2320
1c1ec     3E FA 9D FA | 	rdpin	result1, #62 wc
1c1f0     FE FC A1 F1 | 	subx	result2, result2
1c1f4     F4 FF 9F CD |  if_b	jmp	#LR__2320
1c1f8                 | LR__2321
1c1f8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1c1fc     C2 01 00 AF 
1c200     00 12 06 A6 |  if_e	mov	arg01, ##230400
1c204     80 FF BF AD |  if_e	call	#__system___setbaud
1c208     58 7C 64 FD | 	drvl	#62
1c20c     3E 1E 26 FC | 	wypin	local01, #62
1c210     01 FA 05 F6 | 	mov	result1, #1
1c214     A7 F0 03 F6 | 	mov	ptra, fp
1c218     B2 00 A0 FD | 	call	#popregs_
1c21c                 | __system___txraw_ret
1c21c     2D 00 64 FD | 	ret
1c220                 | 
1c220                 | __system___rxraw
1c220     0D 4A 05 F6 | 	mov	COUNT_, #13
1c224     A8 00 A0 FD | 	call	#pushregs_
1c228     09 1F 02 F6 | 	mov	local01, arg01
1c22c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1c230     C2 01 00 AF 
1c234     00 12 06 A6 |  if_e	mov	arg01, ##230400
1c238     4C FF BF AD |  if_e	call	#__system___setbaud
1c23c     00 1E 0E F2 | 	cmp	local01, #0 wz
1c240     20 00 90 AD |  if_e	jmp	#LR__2330
1c244     14 22 06 FB | 	rdlong	local03, #20
1c248     0A 22 46 F0 | 	shr	local03, #10
1c24c     11 1F 02 FD | 	qmul	local01, local03
1c250     1A FA 61 FD | 	getct	result1
1c254     18 24 62 FD | 	getqx	local04
1c258     12 FB 01 F1 | 	add	result1, local04
1c25c     FD 26 02 F6 | 	mov	local05, result1
1c260     04 00 90 FD | 	jmp	#LR__2331
1c264                 | LR__2330
1c264     00 26 06 F6 | 	mov	local05, #0
1c268                 | LR__2331
1c268     01 28 66 F6 | 	neg	local06, #1
1c26c     3F 2A 06 F6 | 	mov	local07, #63
1c270     00 2C 06 F6 | 	mov	local08, #0
1c274     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1c278     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1c27c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1c280                 | LR__2332
1c280     08 2E 16 F4 | 	testb	local09, #8 wc
1c284     09 2E 76 F4 | 	testbn	local09, #9 andc
1c288     0A 2E 46 F0 | 	shr	local09, #10
1c28c     01 2C 06 C6 |  if_b	mov	local08, #1
1c290     40 7E 6C 3D |  if_ae	testp	#63 wz
1c294     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1c298     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1c29c     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1c2a0                 | LR__2333
1c2a0     00 20 06 F6 | 	mov	local02, #0
1c2a4     00 2C 0E F2 | 	cmp	local08, #0 wz
1c2a8     01 20 66 56 |  if_ne	neg	local02, #1
1c2ac     00 30 06 F6 | 	mov	local10, #0
1c2b0     00 22 06 F6 | 	mov	local03, #0
1c2b4     00 1E 0E F2 | 	cmp	local01, #0 wz
1c2b8     01 22 66 56 |  if_ne	neg	local03, #1
1c2bc     00 24 06 F6 | 	mov	local04, #0
1c2c0     00 32 06 F6 | 	mov	local11, #0
1c2c4     1A FA 61 FD | 	getct	result1
1c2c8     FD 34 02 F6 | 	mov	local12, result1
1c2cc     1A 37 02 F6 | 	mov	local13, local12
1c2d0     13 37 82 F1 | 	sub	local13, local05
1c2d4     00 36 56 F2 | 	cmps	local13, #0 wc
1c2d8     00 32 26 C6 |  if_b	not	local11, #0
1c2dc     00 32 0E F2 | 	cmp	local11, #0 wz
1c2e0     00 24 26 56 |  if_ne	not	local04, #0
1c2e4     12 23 CA F7 | 	test	local03, local04 wz
1c2e8     00 30 26 56 |  if_ne	not	local10, #0
1c2ec     18 21 4A F5 | 	or	local02, local10 wz
1c2f0     8C FF 9F AD |  if_e	jmp	#LR__2332
1c2f4     00 2C 0E F2 | 	cmp	local08, #0 wz
1c2f8     17 29 02 56 |  if_ne	mov	local06, local09
1c2fc     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1c300     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1c304     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1c308     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1c30c     14 FB 01 F6 | 	mov	result1, local06
1c310     A7 F0 03 F6 | 	mov	ptra, fp
1c314     B2 00 A0 FD | 	call	#popregs_
1c318                 | __system___rxraw_ret
1c318     2D 00 64 FD | 	ret
1c31c                 | 
1c31c                 | __system___getus
1c31c     1A FC 71 FD | 	getct	result2 wc
1c320     1A 00 62 FD | 	getct	_var01
1c324     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1c328     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1c32c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c330     20 00 90 5D |  if_ne	jmp	#LR__2340
1c334     14 02 06 FB | 	rdlong	_var02, #20
1c338     A1 07 00 FF 
1c33c     40 02 16 FD | 	qdiv	_var02, ##1000000
1c340     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1c344     18 FA 61 FD | 	getqx	result1
1c348     FD 02 02 F6 | 	mov	_var02, result1
1c34c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1c350     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c354                 | LR__2340
1c354     01 FD 11 FD | 	qdiv	result2, _var02
1c358     19 FC 61 FD | 	getqy	result2
1c35c     28 FC 61 FD | 	setq	result2
1c360     01 01 12 FD | 	qdiv	_var01, _var02
1c364     18 FA 61 FD | 	getqx	result1
1c368                 | __system___getus_ret
1c368     2D 00 64 FD | 	ret
1c36c                 | 
1c36c                 | __system____builtin_memmove
1c36c     09 01 02 F6 | 	mov	_var01, arg01
1c370     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1c374     10 00 90 CD |  if_b	jmp	#LR__2350
1c378     0A 03 02 F6 | 	mov	_var02, arg02
1c37c     0B 03 02 F1 | 	add	_var02, arg03
1c380     01 13 52 F2 | 	cmps	arg01, _var02 wc
1c384     48 00 90 CD |  if_b	jmp	#LR__2356
1c388                 | LR__2350
1c388     0B 05 02 F6 | 	mov	_var03, arg03
1c38c     02 04 4E F0 | 	shr	_var03, #2 wz
1c390     18 00 90 AD |  if_e	jmp	#LR__2355
1c394     97 0A 48 FB | 	callpa	#(@LR__2353-@LR__2351)>>2,fcache_load_ptr_
1c398                 | LR__2351
1c398     02 09 D8 FC | 	rep	@LR__2354, _var03
1c39c                 | LR__2352
1c39c     0A 05 02 FB | 	rdlong	_var03, arg02
1c3a0     09 05 62 FC | 	wrlong	_var03, arg01
1c3a4     04 12 06 F1 | 	add	arg01, #4
1c3a8     04 14 06 F1 | 	add	arg02, #4
1c3ac                 | LR__2353
1c3ac                 | LR__2354
1c3ac                 | LR__2355
1c3ac     02 16 CE F7 | 	test	arg03, #2 wz
1c3b0     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1c3b4     09 03 52 5C |  if_ne	wrword	_var02, arg01
1c3b8     02 12 06 51 |  if_ne	add	arg01, #2
1c3bc     02 14 06 51 |  if_ne	add	arg02, #2
1c3c0     01 16 CE F7 | 	test	arg03, #1 wz
1c3c4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1c3c8     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1c3cc     28 00 90 FD | 	jmp	#LR__2362
1c3d0                 | LR__2356
1c3d0     0B 13 02 F1 | 	add	arg01, arg03
1c3d4     0B 15 02 F1 | 	add	arg02, arg03
1c3d8     0B 07 0A F6 | 	mov	_var04, arg03 wz
1c3dc     18 00 90 AD |  if_e	jmp	#LR__2361
1c3e0     97 0A 48 FB | 	callpa	#(@LR__2359-@LR__2357)>>2,fcache_load_ptr_
1c3e4                 | LR__2357
1c3e4     03 09 D8 FC | 	rep	@LR__2360, _var04
1c3e8                 | LR__2358
1c3e8     01 12 86 F1 | 	sub	arg01, #1
1c3ec     01 14 86 F1 | 	sub	arg02, #1
1c3f0     0A 03 C2 FA | 	rdbyte	_var02, arg02
1c3f4     09 03 42 FC | 	wrbyte	_var02, arg01
1c3f8                 | LR__2359
1c3f8                 | LR__2360
1c3f8                 | LR__2361
1c3f8                 | LR__2362
1c3f8     00 FB 01 F6 | 	mov	result1, _var01
1c3fc                 | __system____builtin_memmove_ret
1c3fc     2D 00 64 FD | 	ret
1c400                 | 
1c400                 | __system____builtin_strcpy
1c400     09 01 02 F6 | 	mov	_var01, arg01
1c404     97 0A 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
1c408                 | LR__2370
1c408     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1c40c     09 FB 41 FC | 	wrbyte	result1, arg01
1c410     01 14 06 F1 | 	add	arg02, #1
1c414     01 12 06 F1 | 	add	arg01, #1
1c418     EC FF 9F 5D |  if_ne	jmp	#LR__2370
1c41c                 | LR__2371
1c41c     00 FB 01 F6 | 	mov	result1, _var01
1c420                 | __system____builtin_strcpy_ret
1c420     2D 00 64 FD | 	ret
1c424                 | 
1c424                 | __system____topofstack
1c424     00 4A 05 F6 | 	mov	COUNT_, #0
1c428     A8 00 A0 FD | 	call	#pushregs_
1c42c     08 F0 07 F1 | 	add	ptra, #8
1c430     04 4E 05 F1 | 	add	fp, #4
1c434     A7 12 62 FC | 	wrlong	arg01, fp
1c438     A7 FA 01 F6 | 	mov	result1, fp
1c43c     04 4E 85 F1 | 	sub	fp, #4
1c440     A7 F0 03 F6 | 	mov	ptra, fp
1c444     B2 00 A0 FD | 	call	#popregs_
1c448                 | __system____topofstack_ret
1c448     2D 00 64 FD | 	ret
1c44c                 | 
1c44c                 | __system___lockmem
1c44c     00 FA 05 F6 | 	mov	result1, #0
1c450     01 FA 61 FD | 	cogid	result1
1c454     00 FB 05 F1 | 	add	result1, #256
1c458                 | LR__2380
1c458     09 01 0A FB | 	rdlong	_var01, arg01 wz
1c45c     09 FB 61 AC |  if_e	wrlong	result1, arg01
1c460     09 01 02 AB |  if_e	rdlong	_var01, arg01
1c464     09 01 02 AB |  if_e	rdlong	_var01, arg01
1c468     FD 00 0A F2 | 	cmp	_var01, result1 wz
1c46c     E8 FF 9F 5D |  if_ne	jmp	#LR__2380
1c470                 | __system___lockmem_ret
1c470     2D 00 64 FD | 	ret
1c474                 | 
1c474                 | __system___string_cmp
1c474     97 14 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1c478                 | LR__2390
1c478     09 01 C2 FA | 	rdbyte	_var01, arg01
1c47c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1c480     00 05 02 F6 | 	mov	_var03, _var01
1c484     01 05 8A F1 | 	sub	_var03, _var02 wz
1c488     01 12 06 F1 | 	add	arg01, #1
1c48c     01 14 06 F1 | 	add	arg02, #1
1c490     0C 00 90 5D |  if_ne	jmp	#LR__2392
1c494     00 00 0E F2 | 	cmp	_var01, #0 wz
1c498     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1c49c     D8 FF 9F 5D |  if_ne	jmp	#LR__2390
1c4a0                 | LR__2391
1c4a0                 | LR__2392
1c4a0     02 FB 01 F6 | 	mov	result1, _var03
1c4a4                 | __system___string_cmp_ret
1c4a4     2D 00 64 FD | 	ret
1c4a8                 | 
1c4a8                 | __system___string_concat
1c4a8     05 4A 05 F6 | 	mov	COUNT_, #5
1c4ac     A8 00 A0 FD | 	call	#pushregs_
1c4b0     09 1F 02 F6 | 	mov	local01, arg01
1c4b4     0A 21 02 F6 | 	mov	local02, arg02
1c4b8     0F 13 02 F6 | 	mov	arg01, local01
1c4bc     09 23 02 F6 | 	mov	local03, arg01
1c4c0     97 06 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1c4c4                 | LR__2400
1c4c4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1c4c8     01 22 06 51 |  if_ne	add	local03, #1
1c4cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2400
1c4d0                 | LR__2401
1c4d0     09 23 82 F1 | 	sub	local03, arg01
1c4d4     11 25 02 F6 | 	mov	local04, local03
1c4d8     10 13 02 F6 | 	mov	arg01, local02
1c4dc     09 23 02 F6 | 	mov	local03, arg01
1c4e0     97 06 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1c4e4                 | LR__2402
1c4e4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1c4e8     01 22 06 51 |  if_ne	add	local03, #1
1c4ec     F4 FF 9F 5D |  if_ne	jmp	#LR__2402
1c4f0                 | LR__2403
1c4f0     09 23 82 F1 | 	sub	local03, arg01
1c4f4     12 13 02 F6 | 	mov	arg01, local04
1c4f8     11 13 02 F1 | 	add	arg01, local03
1c4fc     01 12 06 F1 | 	add	arg01, #1
1c500     90 3D B0 FD | 	call	#__system___gc_alloc_managed
1c504     FD 26 0A F6 | 	mov	local05, result1 wz
1c508     28 00 90 AD |  if_e	jmp	#LR__2404
1c50c     13 13 02 F6 | 	mov	arg01, local05
1c510     0F 15 02 F6 | 	mov	arg02, local01
1c514     12 17 02 F6 | 	mov	arg03, local04
1c518     50 FE BF FD | 	call	#__system____builtin_memmove
1c51c     13 13 02 F6 | 	mov	arg01, local05
1c520     12 13 02 F1 | 	add	arg01, local04
1c524     01 22 06 F1 | 	add	local03, #1
1c528     10 15 02 F6 | 	mov	arg02, local02
1c52c     11 17 02 F6 | 	mov	arg03, local03
1c530     38 FE BF FD | 	call	#__system____builtin_memmove
1c534                 | LR__2404
1c534     13 FB 01 F6 | 	mov	result1, local05
1c538     A7 F0 03 F6 | 	mov	ptra, fp
1c53c     B2 00 A0 FD | 	call	#popregs_
1c540                 | __system___string_concat_ret
1c540     2D 00 64 FD | 	ret
1c544                 | 
1c544                 | __system___tx
1c544     02 4A 05 F6 | 	mov	COUNT_, #2
1c548     A8 00 A0 FD | 	call	#pushregs_
1c54c     09 1F 02 F6 | 	mov	local01, arg01
1c550     0A 1E 0E F2 | 	cmp	local01, #10 wz
1c554     18 00 90 5D |  if_ne	jmp	#LR__2410
1c558     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c55c     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1c560     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c564     02 20 CE F7 | 	test	local02, #2 wz
1c568     0D 12 06 56 |  if_ne	mov	arg01, #13
1c56c     6C FC BF 5D |  if_ne	call	#__system___txraw
1c570                 | LR__2410
1c570     0F 13 02 F6 | 	mov	arg01, local01
1c574     64 FC BF FD | 	call	#__system___txraw
1c578     A7 F0 03 F6 | 	mov	ptra, fp
1c57c     B2 00 A0 FD | 	call	#popregs_
1c580                 | __system___tx_ret
1c580     2D 00 64 FD | 	ret
1c584                 | 
1c584                 | __system___rx
1c584     01 4A 05 F6 | 	mov	COUNT_, #1
1c588     A8 00 A0 FD | 	call	#pushregs_
1c58c                 | LR__2420
1c58c     00 12 06 F6 | 	mov	arg01, #0
1c590     8C FC BF FD | 	call	#__system___rxraw
1c594     FD 1E 02 F6 | 	mov	local01, result1
1c598     FF FF 7F FF 
1c59c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1c5a0     E8 FF 9F AD |  if_e	jmp	#LR__2420
1c5a4     0D 1E 0E F2 | 	cmp	local01, #13 wz
1c5a8     14 00 90 5D |  if_ne	jmp	#LR__2421
1c5ac     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c5b0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1c5b4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c5b8     02 FA CD F7 | 	test	result1, #2 wz
1c5bc     0A 1E 06 56 |  if_ne	mov	local01, #10
1c5c0                 | LR__2421
1c5c0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c5c4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1c5c8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c5cc     01 12 CE F7 | 	test	arg01, #1 wz
1c5d0     1C 00 90 AD |  if_e	jmp	#LR__2424
1c5d4     7F 1E 0E F2 | 	cmp	local01, #127 wz
1c5d8     0C 00 90 5D |  if_ne	jmp	#LR__2422
1c5dc     08 12 06 F6 | 	mov	arg01, #8
1c5e0     60 FF BF FD | 	call	#__system___tx
1c5e4     08 00 90 FD | 	jmp	#LR__2423
1c5e8                 | LR__2422
1c5e8     0F 13 02 F6 | 	mov	arg01, local01
1c5ec     54 FF BF FD | 	call	#__system___tx
1c5f0                 | LR__2423
1c5f0                 | LR__2424
1c5f0     0F FB 01 F6 | 	mov	result1, local01
1c5f4     A7 F0 03 F6 | 	mov	ptra, fp
1c5f8     B2 00 A0 FD | 	call	#popregs_
1c5fc                 | __system___rx_ret
1c5fc     2D 00 64 FD | 	ret
1c600                 | 
1c600                 | __system___pinwrite
1c600     09 01 02 F6 | 	mov	_var01, arg01
1c604     1F 00 06 F5 | 	and	_var01, #31
1c608     20 12 CE F7 | 	test	arg01, #32 wz
1c60c     06 12 46 F0 | 	shr	arg01, #6
1c610     09 13 CA F9 | 	bmask	arg01, arg01
1c614     00 13 62 F0 | 	shl	arg01, _var01
1c618     00 15 62 F0 | 	shl	arg02, _var01
1c61c     1C 00 90 AD |  if_e	jmp	#LR__2430
1c620     09 F7 43 F5 | 	or	dirb, arg01
1c624     FD 01 02 F6 | 	mov	_var01, outb
1c628     09 01 22 F5 | 	andn	_var01, arg01
1c62c     09 15 02 F5 | 	and	arg02, arg01
1c630     0A 01 42 F5 | 	or	_var01, arg02
1c634     00 FB 03 F6 | 	mov	outb, _var01
1c638     18 00 90 FD | 	jmp	#LR__2431
1c63c                 | LR__2430
1c63c     09 F5 43 F5 | 	or	dira, arg01
1c640     FC 01 02 F6 | 	mov	_var01, outa
1c644     09 01 22 F5 | 	andn	_var01, arg01
1c648     09 15 02 F5 | 	and	arg02, arg01
1c64c     0A 01 42 F5 | 	or	_var01, arg02
1c650     00 F9 03 F6 | 	mov	outa, _var01
1c654                 | LR__2431
1c654                 | __system___pinwrite_ret
1c654     2D 00 64 FD | 	ret
1c658                 | 
1c658                 | __system___basic_read_line
1c658     06 4A 05 F6 | 	mov	COUNT_, #6
1c65c     A8 00 A0 FD | 	call	#pushregs_
1c660     09 1F 02 F6 | 	mov	local01, arg01
1c664     00 20 06 F6 | 	mov	local02, #0
1c668     18 22 06 F6 | 	mov	local03, #24
1c66c     00 24 06 F6 | 	mov	local04, #0
1c670     18 12 06 F6 | 	mov	arg01, #24
1c674     1C 3C B0 FD | 	call	#__system___gc_alloc_managed
1c678     FD 26 0A F6 | 	mov	local05, result1 wz
1c67c     13 FB 01 A6 |  if_e	mov	result1, local05
1c680     B0 00 90 AD |  if_e	jmp	#LR__2443
1c684                 | LR__2440
1c684     0F 13 02 F6 | 	mov	arg01, local01
1c688     88 0B B0 FD | 	call	#__system___basic_get_char
1c68c     FD 28 02 F6 | 	mov	local06, result1
1c690     01 28 56 F2 | 	cmps	local06, #1 wc
1c694     8C 00 90 CD |  if_b	jmp	#LR__2442
1c698     0A 28 0E F2 | 	cmp	local06, #10 wz
1c69c     10 00 90 5D |  if_ne	jmp	#LR__2441
1c6a0     00 24 0E F2 | 	cmp	local04, #0 wz
1c6a4     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1c6a8     01 20 86 11 |  if_a	sub	local02, #1
1c6ac     74 00 90 FD | 	jmp	#LR__2442
1c6b0                 | LR__2441
1c6b0     0D 28 0E F2 | 	cmp	local06, #13 wz
1c6b4     01 24 06 A6 |  if_e	mov	local04, #1
1c6b8     00 24 06 56 |  if_ne	mov	local04, #0
1c6bc     08 28 0E F2 | 	cmp	local06, #8 wz
1c6c0     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1c6c4     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1c6c8     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1c6cc     B4 FF 9F AD |  if_e	jmp	#LR__2440
1c6d0     13 17 02 F6 | 	mov	arg03, local05
1c6d4     10 17 02 F1 | 	add	arg03, local02
1c6d8     0B 29 42 FC | 	wrbyte	local06, arg03
1c6dc     01 20 06 F1 | 	add	local02, #1
1c6e0     11 21 0A F2 | 	cmp	local02, local03 wz
1c6e4     9C FF 9F 5D |  if_ne	jmp	#LR__2440
1c6e8     11 13 02 F6 | 	mov	arg01, local03
1c6ec     20 12 06 F1 | 	add	arg01, #32
1c6f0     A0 3B B0 FD | 	call	#__system___gc_alloc_managed
1c6f4     FD 28 0A F6 | 	mov	local06, result1 wz
1c6f8     14 FB 01 A6 |  if_e	mov	result1, local06
1c6fc     34 00 90 AD |  if_e	jmp	#LR__2443
1c700     14 13 02 F6 | 	mov	arg01, local06
1c704     13 15 02 F6 | 	mov	arg02, local05
1c708     11 17 02 F6 | 	mov	arg03, local03
1c70c     5C FC BF FD | 	call	#__system____builtin_memmove
1c710     20 22 06 F1 | 	add	local03, #32
1c714     13 13 02 F6 | 	mov	arg01, local05
1c718     B4 3C B0 FD | 	call	#__system___gc_free
1c71c     14 27 02 F6 | 	mov	local05, local06
1c720     60 FF 9F FD | 	jmp	#LR__2440
1c724                 | LR__2442
1c724     13 29 02 F6 | 	mov	local06, local05
1c728     10 29 02 F1 | 	add	local06, local02
1c72c     14 01 48 FC | 	wrbyte	#0, local06
1c730     13 FB 01 F6 | 	mov	result1, local05
1c734                 | LR__2443
1c734     A7 F0 03 F6 | 	mov	ptra, fp
1c738     B2 00 A0 FD | 	call	#popregs_
1c73c                 | __system___basic_read_line_ret
1c73c     2D 00 64 FD | 	ret
1c740                 | 
1c740                 | __system___waitms
1c740     09 01 02 F6 | 	mov	_var01, arg01
1c744     1A 02 62 FD | 	getct	_var02
1c748     14 04 06 FB | 	rdlong	_var03, #20
1c74c     97 14 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1c750                 | LR__2450
1c750     01 00 00 FF 
1c754     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1c758     1C 00 90 CD |  if_b	jmp	#LR__2452
1c75c     02 03 02 F1 | 	add	_var02, _var03
1c760     01 13 02 F6 | 	mov	arg01, _var02
1c764     00 12 66 FA | 	addct1	arg01, #0
1c768     24 22 60 FD | 	waitct1
1c76c     01 00 00 FF 
1c770     E8 01 86 F1 | 	sub	_var01, ##1000
1c774     D8 FF 9F FD | 	jmp	#LR__2450
1c778                 | LR__2451
1c778                 | LR__2452
1c778     01 00 56 F2 | 	cmps	_var01, #1 wc
1c77c     28 00 90 CD |  if_b	jmp	#LR__2453
1c780     02 01 02 FD | 	qmul	_var01, _var03
1c784     01 00 00 FF 
1c788     E8 17 06 F6 | 	mov	arg03, ##1000
1c78c     19 FA 61 FD | 	getqy	result1
1c790     18 12 62 FD | 	getqx	arg01
1c794     28 FA 61 FD | 	setq	result1
1c798     0B 13 12 FD | 	qdiv	arg01, arg03
1c79c     18 12 62 FD | 	getqx	arg01
1c7a0     01 13 62 FA | 	addct1	arg01, _var02
1c7a4     24 22 60 FD | 	waitct1
1c7a8                 | LR__2453
1c7a8                 | __system___waitms_ret
1c7a8     2D 00 64 FD | 	ret
1c7ac                 | 
1c7ac                 | __system___waitus
1c7ac     09 01 02 F6 | 	mov	_var01, arg01
1c7b0     1A 02 62 FD | 	getct	_var02
1c7b4     14 04 06 FB | 	rdlong	_var03, #20
1c7b8     97 14 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1c7bc                 | LR__2460
1c7bc     A1 07 00 FF 
1c7c0     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1c7c4     1C 00 90 CD |  if_b	jmp	#LR__2462
1c7c8     02 03 02 F1 | 	add	_var02, _var03
1c7cc     01 13 02 F6 | 	mov	arg01, _var02
1c7d0     00 12 66 FA | 	addct1	arg01, #0
1c7d4     24 22 60 FD | 	waitct1
1c7d8     A1 07 00 FF 
1c7dc     40 00 86 F1 | 	sub	_var01, ##1000000
1c7e0     D8 FF 9F FD | 	jmp	#LR__2460
1c7e4                 | LR__2461
1c7e4                 | LR__2462
1c7e4     01 00 56 F2 | 	cmps	_var01, #1 wc
1c7e8     28 00 90 CD |  if_b	jmp	#LR__2463
1c7ec     02 01 02 FD | 	qmul	_var01, _var03
1c7f0     A1 07 00 FF 
1c7f4     40 16 06 F6 | 	mov	arg03, ##1000000
1c7f8     19 FA 61 FD | 	getqy	result1
1c7fc     18 12 62 FD | 	getqx	arg01
1c800     28 FA 61 FD | 	setq	result1
1c804     0B 13 12 FD | 	qdiv	arg01, arg03
1c808     18 FA 61 FD | 	getqx	result1
1c80c     FD 02 62 FA | 	addct1	_var02, result1
1c810     24 22 60 FD | 	waitct1
1c814                 | LR__2463
1c814                 | __system___waitus_ret
1c814     2D 00 64 FD | 	ret
1c818                 | 
1c818                 | __system___mount
1c818     0B 4A 05 F6 | 	mov	COUNT_, #11
1c81c     A8 00 A0 FD | 	call	#pushregs_
1c820     09 1F 02 F6 | 	mov	local01, arg01
1c824     0A 21 0A F6 | 	mov	local02, arg02 wz
1c828     01 22 66 F6 | 	neg	local03, #1
1c82c     01 FA 65 A6 |  if_e	neg	result1, #1
1c830     98 02 90 AD |  if_e	jmp	#LR__2485
1c834     0F FB C1 FA | 	rdbyte	result1, local01
1c838     2F FA 0D F2 | 	cmp	result1, #47 wz
1c83c     28 00 90 5D |  if_ne	jmp	#LR__2472
1c840     0F 13 02 F6 | 	mov	arg01, local01
1c844     09 25 02 F6 | 	mov	local04, arg01
1c848     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1c84c                 | LR__2470
1c84c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1c850     01 24 06 51 |  if_ne	add	local04, #1
1c854     F4 FF 9F 5D |  if_ne	jmp	#LR__2470
1c858                 | LR__2471
1c858     09 25 82 F1 | 	sub	local04, arg01
1c85c     12 FB 01 F6 | 	mov	result1, local04
1c860     10 FA 55 F2 | 	cmps	result1, #16 wc
1c864     14 00 90 CD |  if_b	jmp	#LR__2473
1c868                 | LR__2472
1c868     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1c86c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1c870     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1c874     01 FA 65 F6 | 	neg	result1, #1
1c878     50 02 90 FD | 	jmp	#LR__2485
1c87c                 | LR__2473
1c87c     00 26 06 F6 | 	mov	local05, #0
1c880                 | LR__2474
1c880     04 26 56 F2 | 	cmps	local05, #4 wc
1c884     B0 00 90 3D |  if_ae	jmp	#LR__2479
1c888     13 13 02 F6 | 	mov	arg01, local05
1c88c     02 12 66 F0 | 	shl	arg01, #2
1c890     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c894     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1c898     09 FB 09 FB | 	rdlong	result1, arg01 wz
1c89c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c8a0     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1c8a4     13 23 02 86 |  if_c_and_z	mov	local03, local05
1c8a8     84 00 90 8D |  if_c_and_z	jmp	#LR__2478
1c8ac     13 13 02 F6 | 	mov	arg01, local05
1c8b0     02 12 66 F0 | 	shl	arg01, #2
1c8b4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c8b8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1c8bc     09 13 02 FB | 	rdlong	arg01, arg01
1c8c0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c8c4     09 25 02 F6 | 	mov	local04, arg01
1c8c8     97 06 48 FB | 	callpa	#(@LR__2476-@LR__2475)>>2,fcache_load_ptr_
1c8cc                 | LR__2475
1c8cc     12 FB C9 FA | 	rdbyte	result1, local04 wz
1c8d0     01 24 06 51 |  if_ne	add	local04, #1
1c8d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2475
1c8d8                 | LR__2476
1c8d8     09 25 82 F1 | 	sub	local04, arg01
1c8dc     12 29 02 F6 | 	mov	local06, local04
1c8e0     14 13 02 F6 | 	mov	arg01, local06
1c8e4     0F 13 02 F1 | 	add	arg01, local01
1c8e8     09 FB C1 FA | 	rdbyte	result1, arg01
1c8ec     2F FA 0D F2 | 	cmp	result1, #47 wz
1c8f0     14 2B 02 56 |  if_ne	mov	local07, local06
1c8f4     0F 2B 02 51 |  if_ne	add	local07, local01
1c8f8     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1c8fc     30 00 90 5D |  if_ne	jmp	#LR__2477
1c900     13 17 02 F6 | 	mov	arg03, local05
1c904     02 16 66 F0 | 	shl	arg03, #2
1c908     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c90c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1c910     0B 15 02 FB | 	rdlong	arg02, arg03
1c914     0F 13 02 F6 | 	mov	arg01, local01
1c918     14 17 02 F6 | 	mov	arg03, local06
1c91c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c920     B4 4D B0 FD | 	call	#__system__strncmp
1c924     00 FA 0D F2 | 	cmp	result1, #0 wz
1c928     13 23 02 A6 |  if_e	mov	local03, local05
1c92c     08 00 90 AD |  if_e	jmp	#LR__2479
1c930                 | LR__2477
1c930                 | LR__2478
1c930     01 26 06 F1 | 	add	local05, #1
1c934     48 FF 9F FD | 	jmp	#LR__2474
1c938                 | LR__2479
1c938     FF FF 7F FF 
1c93c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1c940     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1c944     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1c948     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1c94c     01 FA 65 A6 |  if_e	neg	result1, #1
1c950     78 01 90 AD |  if_e	jmp	#LR__2485
1c954     11 27 02 F6 | 	mov	local05, local03
1c958     13 2B 02 F6 | 	mov	local07, local05
1c95c     02 2A 66 F0 | 	shl	local07, #2
1c960     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c964     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1c968     15 29 0A FB | 	rdlong	local06, local07 wz
1c96c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1c970     58 00 90 AD |  if_e	jmp	#LR__2480
1c974     4C 28 06 F1 | 	add	local06, #76
1c978     14 2B 0A FB | 	rdlong	local07, local06 wz
1c97c     4C 28 86 F1 | 	sub	local06, #76
1c980     48 00 90 AD |  if_e	jmp	#LR__2480
1c984     4C 28 06 F1 | 	add	local06, #76
1c988     14 2B 02 FB | 	rdlong	local07, local06
1c98c     15 23 02 F6 | 	mov	local03, local07
1c990     13 2A 46 F7 | 	zerox	local07, #19
1c994     14 22 46 F0 | 	shr	local03, #20
1c998     02 22 66 F0 | 	shl	local03, #2
1c99c     ED 22 02 F1 | 	add	local03, __methods__
1c9a0     11 23 02 FB | 	rdlong	local03, local03
1c9a4     13 29 02 F6 | 	mov	local06, local05
1c9a8     02 28 66 F0 | 	shl	local06, #2
1c9ac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c9b0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1c9b4     14 13 02 FB | 	rdlong	arg01, local06
1c9b8     F2 28 02 F6 | 	mov	local06, objptr
1c9bc     15 E5 01 F6 | 	mov	objptr, local07
1c9c0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c9c4     2D 22 62 FD | 	call	local03
1c9c8     14 E5 01 F6 | 	mov	objptr, local06
1c9cc                 | LR__2480
1c9cc     13 2D 02 F6 | 	mov	local08, local05
1c9d0     02 2C 66 F0 | 	shl	local08, #2
1c9d4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c9d8     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1c9dc     16 21 62 FC | 	wrlong	local02, local08
1c9e0     00 20 0E F2 | 	cmp	local02, #0 wz
1c9e4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1c9e8     18 00 90 5D |  if_ne	jmp	#LR__2481
1c9ec     02 26 66 F0 | 	shl	local05, #2
1c9f0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c9f4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c9f8     13 01 68 FC | 	wrlong	#0, local05
1c9fc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ca00     C4 00 90 FD | 	jmp	#LR__2484
1ca04                 | LR__2481
1ca04     13 2F 02 F6 | 	mov	local09, local05
1ca08     04 2E 66 F0 | 	shl	local09, #4
1ca0c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1ca10     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1ca14     17 13 02 F6 | 	mov	arg01, local09
1ca18     0F 15 02 F6 | 	mov	arg02, local01
1ca1c     10 16 06 F6 | 	mov	arg03, #16
1ca20     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1ca24     04 4C B0 FD | 	call	#__system__strncpy
1ca28     48 20 06 F1 | 	add	local02, #72
1ca2c     10 2D 0A FB | 	rdlong	local08, local02 wz
1ca30     48 20 86 F1 | 	sub	local02, #72
1ca34     7C 00 90 AD |  if_e	jmp	#LR__2483
1ca38     48 20 06 F1 | 	add	local02, #72
1ca3c     10 2D 02 FB | 	rdlong	local08, local02
1ca40     16 31 02 F6 | 	mov	local10, local08
1ca44     13 2C 46 F7 | 	zerox	local08, #19
1ca48     14 30 46 F0 | 	shr	local10, #20
1ca4c     02 30 66 F0 | 	shl	local10, #2
1ca50     ED 30 02 F1 | 	add	local10, __methods__
1ca54     18 31 02 FB | 	rdlong	local10, local10
1ca58     17 13 02 F6 | 	mov	arg01, local09
1ca5c     F2 32 02 F6 | 	mov	local11, objptr
1ca60     16 E5 01 F6 | 	mov	objptr, local08
1ca64     2D 30 62 FD | 	call	local10
1ca68     19 E5 01 F6 | 	mov	objptr, local11
1ca6c     FD 12 0A F6 | 	mov	arg01, result1 wz
1ca70     40 00 90 AD |  if_e	jmp	#LR__2482
1ca74     13 2D 02 F6 | 	mov	local08, local05
1ca78     02 2C 66 F0 | 	shl	local08, #2
1ca7c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1ca80     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1ca84     16 01 68 FC | 	wrlong	#0, local08
1ca88     02 26 66 F0 | 	shl	local05, #2
1ca8c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ca90     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1ca94     13 01 68 FC | 	wrlong	#0, local05
1ca98     09 13 6A F6 | 	neg	arg01, arg01 wz
1ca9c     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1caa0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1caa4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1caa8     01 FA 65 56 |  if_ne	neg	result1, #1
1caac     00 FA 05 A6 |  if_e	mov	result1, #0
1cab0     18 00 90 FD | 	jmp	#LR__2485
1cab4                 | LR__2482
1cab4                 | LR__2483
1cab4     02 26 66 F0 | 	shl	local05, #2
1cab8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cabc     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1cac0     13 2F 62 FC | 	wrlong	local09, local05
1cac4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cac8                 | LR__2484
1cac8     00 FA 05 F6 | 	mov	result1, #0
1cacc                 | LR__2485
1cacc     A7 F0 03 F6 | 	mov	ptra, fp
1cad0     B2 00 A0 FD | 	call	#popregs_
1cad4                 | __system___mount_ret
1cad4     2D 00 64 FD | 	ret
1cad8                 | 
1cad8                 | __system___chdir
1cad8     00 4A 05 F6 | 	mov	COUNT_, #0
1cadc     A8 00 A0 FD | 	call	#pushregs_
1cae0     40 F0 07 F1 | 	add	ptra, #64
1cae4     04 4E 05 F1 | 	add	fp, #4
1cae8     A7 12 62 FC | 	wrlong	arg01, fp
1caec     04 4E 05 F1 | 	add	fp, #4
1caf0     A7 14 02 F6 | 	mov	arg02, fp
1caf4     08 4E 85 F1 | 	sub	fp, #8
1caf8     10 48 B0 FD | 	call	#__system__stat
1cafc     3C 4E 05 F1 | 	add	fp, #60
1cb00     A7 FA 61 FC | 	wrlong	result1, fp
1cb04     3C 4E 85 F1 | 	sub	fp, #60
1cb08     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb0c     3C 4E 05 51 |  if_ne	add	fp, #60
1cb10     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1cb14     3C 4E 85 51 |  if_ne	sub	fp, #60
1cb18     BC 00 90 5D |  if_ne	jmp	#LR__2492
1cb1c     10 4E 05 F1 | 	add	fp, #16
1cb20     A7 12 02 FB | 	rdlong	arg01, fp
1cb24     10 4E 85 F1 | 	sub	fp, #16
1cb28     78 00 00 FF 
1cb2c     00 12 06 F5 | 	and	arg01, ##61440
1cb30     08 00 00 FF 
1cb34     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1cb38     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1cb3c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1cb40     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1cb44     01 FA 65 56 |  if_ne	neg	result1, #1
1cb48     8C 00 90 5D |  if_ne	jmp	#LR__2492
1cb4c     04 4E 05 F1 | 	add	fp, #4
1cb50     A7 16 02 FB | 	rdlong	arg03, fp
1cb54     04 4E 85 F1 | 	sub	fp, #4
1cb58     0B 17 C2 FA | 	rdbyte	arg03, arg03
1cb5c     2F 16 0E F2 | 	cmp	arg03, #47 wz
1cb60     24 00 90 5D |  if_ne	jmp	#LR__2490
1cb64     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1cb68     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cb6c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1cb70     04 4E 05 F1 | 	add	fp, #4
1cb74     A7 14 02 FB | 	rdlong	arg02, fp
1cb78     04 4E 85 F1 | 	sub	fp, #4
1cb7c     00 17 06 F6 | 	mov	arg03, #256
1cb80     A8 4A B0 FD | 	call	#__system__strncpy
1cb84     4C 00 90 FD | 	jmp	#LR__2491
1cb88                 | LR__2490
1cb88     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1cb8c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1cb90     38 4E 05 F1 | 	add	fp, #56
1cb94     A7 12 62 FC | 	wrlong	arg01, fp
1cb98     38 4E 85 F1 | 	sub	fp, #56
1cb9c     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1cba0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1cba4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1cba8     00 17 06 F6 | 	mov	arg03, #256
1cbac     7C 4A B0 FD | 	call	#__system__strncpy
1cbb0     38 4E 05 F1 | 	add	fp, #56
1cbb4     A7 12 02 FB | 	rdlong	arg01, fp
1cbb8     34 4E 85 F1 | 	sub	fp, #52
1cbbc     A7 14 02 FB | 	rdlong	arg02, fp
1cbc0     04 4E 85 F1 | 	sub	fp, #4
1cbc4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1cbc8     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1cbcc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1cbd0     10 00 B0 FD | 	call	#__system____getvfsforfile
1cbd4                 | LR__2491
1cbd4     00 FA 05 F6 | 	mov	result1, #0
1cbd8                 | LR__2492
1cbd8     A7 F0 03 F6 | 	mov	ptra, fp
1cbdc     B2 00 A0 FD | 	call	#popregs_
1cbe0                 | __system___chdir_ret
1cbe0     2D 00 64 FD | 	ret
1cbe4                 | 
1cbe4                 | __system____getvfsforfile
1cbe4     0E 4A 05 F6 | 	mov	COUNT_, #14
1cbe8     A8 00 A0 FD | 	call	#pushregs_
1cbec     09 1F 02 F6 | 	mov	local01, arg01
1cbf0     0A 21 02 F6 | 	mov	local02, arg02
1cbf4     0B 23 02 F6 | 	mov	local03, arg03
1cbf8     97 10 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1cbfc                 | LR__2500
1cbfc     10 FB C1 FA | 	rdbyte	result1, local02
1cc00     2F FA 0D F2 | 	cmp	result1, #47 wz
1cc04     01 20 06 A1 |  if_e	add	local02, #1
1cc08     10 25 C2 AA |  if_e	rdbyte	local04, local02
1cc0c     01 20 86 A1 |  if_e	sub	local02, #1
1cc10     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1cc14     01 20 06 A1 |  if_e	add	local02, #1
1cc18     E0 FF 9F AD |  if_e	jmp	#LR__2500
1cc1c                 | LR__2501
1cc1c     10 25 C2 FA | 	rdbyte	local04, local02
1cc20     2F 24 0E F2 | 	cmp	local04, #47 wz
1cc24     14 00 90 5D |  if_ne	jmp	#LR__2502
1cc28     0F 13 02 F6 | 	mov	arg01, local01
1cc2c     10 15 02 F6 | 	mov	arg02, local02
1cc30     00 17 06 F6 | 	mov	arg03, #256
1cc34     F4 49 B0 FD | 	call	#__system__strncpy
1cc38     7C 00 90 FD | 	jmp	#LR__2504
1cc3c                 | LR__2502
1cc3c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1cc40     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1cc44     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1cc48     0F 13 02 F6 | 	mov	arg01, local01
1cc4c     00 17 06 F6 | 	mov	arg03, #256
1cc50     D8 49 B0 FD | 	call	#__system__strncpy
1cc54     10 25 CA FA | 	rdbyte	local04, local02 wz
1cc58     5C 00 90 AD |  if_e	jmp	#LR__2503
1cc5c     10 25 C2 FA | 	rdbyte	local04, local02
1cc60     2E 24 0E F2 | 	cmp	local04, #46 wz
1cc64     01 20 06 A1 |  if_e	add	local02, #1
1cc68     10 27 C2 AA |  if_e	rdbyte	local05, local02
1cc6c     01 20 86 A1 |  if_e	sub	local02, #1
1cc70     13 29 02 A6 |  if_e	mov	local06, local05
1cc74     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1cc78     3C 00 90 AD |  if_e	jmp	#LR__2503
1cc7c     0F 27 C2 FA | 	rdbyte	local05, local01
1cc80     2F 26 0E F2 | 	cmp	local05, #47 wz
1cc84     01 1E 06 A1 |  if_e	add	local01, #1
1cc88     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1cc8c     01 1E 86 A1 |  if_e	sub	local01, #1
1cc90     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1cc94     5C 01 00 5F 
1cc98     F8 15 06 56 |  if_ne	mov	arg02, ##@LR__4560
1cc9c     0F 13 02 56 |  if_ne	mov	arg01, local01
1cca0     00 17 06 56 |  if_ne	mov	arg03, #256
1cca4     D0 49 B0 5D |  if_ne	call	#__system__strncat
1cca8     0F 13 02 F6 | 	mov	arg01, local01
1ccac     10 15 02 F6 | 	mov	arg02, local02
1ccb0     00 17 06 F6 | 	mov	arg03, #256
1ccb4     C0 49 B0 FD | 	call	#__system__strncat
1ccb8                 | LR__2503
1ccb8                 | LR__2504
1ccb8     0F 13 02 F6 | 	mov	arg01, local01
1ccbc     78 4B B0 FD | 	call	#__system___normalizeName
1ccc0     0F 25 CA FA | 	rdbyte	local04, local01 wz
1ccc4     1C 00 90 AD |  if_e	jmp	#LR__2505
1ccc8     0F 25 C2 FA | 	rdbyte	local04, local01
1cccc     2F 24 0E F2 | 	cmp	local04, #47 wz
1ccd0     01 1E 06 A1 |  if_e	add	local01, #1
1ccd4     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1ccd8     01 1E 86 A1 |  if_e	sub	local01, #1
1ccdc     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1cce0     18 00 90 5D |  if_ne	jmp	#LR__2506
1cce4                 | LR__2505
1cce4     01 00 00 FF 
1cce8     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1ccec     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1ccf0     01 00 00 FF 
1ccf4     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1ccf8     EC 01 90 FD | 	jmp	#LR__2520
1ccfc                 | LR__2506
1ccfc     00 2A 06 F6 | 	mov	local07, #0
1cd00                 | LR__2507
1cd00     04 2A 56 F2 | 	cmps	local07, #4 wc
1cd04     CC 01 90 3D |  if_ae	jmp	#LR__2519
1cd08     15 29 02 F6 | 	mov	local06, local07
1cd0c     02 28 66 F0 | 	shl	local06, #2
1cd10     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cd14     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1cd18     14 29 0A FB | 	rdlong	local06, local06 wz
1cd1c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cd20     A8 01 90 AD |  if_e	jmp	#LR__2518
1cd24     15 25 02 F6 | 	mov	local04, local07
1cd28     02 24 66 F0 | 	shl	local04, #2
1cd2c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cd30     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1cd34     12 13 02 FB | 	rdlong	arg01, local04
1cd38     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cd3c     09 2D 02 F6 | 	mov	local08, arg01
1cd40     97 06 48 FB | 	callpa	#(@LR__2509-@LR__2508)>>2,fcache_load_ptr_
1cd44                 | LR__2508
1cd44     16 FB C9 FA | 	rdbyte	result1, local08 wz
1cd48     01 2C 06 51 |  if_ne	add	local08, #1
1cd4c     F4 FF 9F 5D |  if_ne	jmp	#LR__2508
1cd50                 | LR__2509
1cd50     09 2D 82 F1 | 	sub	local08, arg01
1cd54     16 2F 02 F6 | 	mov	local09, local08
1cd58     17 25 02 F6 | 	mov	local04, local09
1cd5c     0F 25 02 F1 | 	add	local04, local01
1cd60     12 29 C2 FA | 	rdbyte	local06, local04
1cd64     2F 28 0E F2 | 	cmp	local06, #47 wz
1cd68     17 31 02 56 |  if_ne	mov	local10, local09
1cd6c     0F 31 02 51 |  if_ne	add	local10, local01
1cd70     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1cd74     54 01 90 5D |  if_ne	jmp	#LR__2517
1cd78     15 17 02 F6 | 	mov	arg03, local07
1cd7c     02 16 66 F0 | 	shl	arg03, #2
1cd80     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cd84     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1cd88     0B 15 02 FB | 	rdlong	arg02, arg03
1cd8c     17 17 02 F6 | 	mov	arg03, local09
1cd90     0F 13 02 F6 | 	mov	arg01, local01
1cd94     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cd98     3C 49 B0 FD | 	call	#__system__strncmp
1cd9c     00 FA 4D F2 | 	cmps	result1, #0 wz
1cda0     28 01 90 5D |  if_ne	jmp	#LR__2517
1cda4     15 33 02 F6 | 	mov	local11, local07
1cda8     02 32 66 F0 | 	shl	local11, #2
1cdac     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1cdb0     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1cdb4     19 35 02 FB | 	rdlong	local12, local11
1cdb8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1cdbc     97 22 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1cdc0                 | LR__2510
1cdc0     17 29 02 F6 | 	mov	local06, local09
1cdc4     01 28 06 F1 | 	add	local06, #1
1cdc8     0F 29 02 F1 | 	add	local06, local01
1cdcc     14 33 C2 FA | 	rdbyte	local11, local06
1cdd0     2E 32 0E F2 | 	cmp	local11, #46 wz
1cdd4     2C 00 90 5D |  if_ne	jmp	#LR__2512
1cdd8     17 33 02 F6 | 	mov	local11, local09
1cddc     02 32 06 F1 | 	add	local11, #2
1cde0     0F 33 02 F1 | 	add	local11, local01
1cde4     19 31 C2 FA | 	rdbyte	local10, local11
1cde8     2F 30 0E F2 | 	cmp	local10, #47 wz
1cdec     17 37 02 56 |  if_ne	mov	local13, local09
1cdf0     02 36 06 51 |  if_ne	add	local13, #2
1cdf4     0F 37 02 51 |  if_ne	add	local13, local01
1cdf8     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1cdfc     01 2E 06 A1 |  if_e	add	local09, #1
1ce00     BC FF 9F AD |  if_e	jmp	#LR__2510
1ce04                 | LR__2511
1ce04                 | LR__2512
1ce04     00 22 0E F2 | 	cmp	local03, #0 wz
1ce08     11 13 02 56 |  if_ne	mov	arg01, local03
1ce0c     0F 15 02 56 |  if_ne	mov	arg02, local01
1ce10     00 17 06 56 |  if_ne	mov	arg03, #256
1ce14     14 48 B0 5D |  if_ne	call	#__system__strncpy
1ce18     0F 15 02 F6 | 	mov	arg02, local01
1ce1c     17 15 02 F1 | 	add	arg02, local09
1ce20     01 14 06 F1 | 	add	arg02, #1
1ce24     0F 13 02 F6 | 	mov	arg01, local01
1ce28     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1ce2c     0F 13 02 F6 | 	mov	arg01, local01
1ce30     09 2D 02 F6 | 	mov	local08, arg01
1ce34     97 06 48 FB | 	callpa	#(@LR__2514-@LR__2513)>>2,fcache_load_ptr_
1ce38                 | LR__2513
1ce38     16 FB C9 FA | 	rdbyte	result1, local08 wz
1ce3c     01 2C 06 51 |  if_ne	add	local08, #1
1ce40     F4 FF 9F 5D |  if_ne	jmp	#LR__2513
1ce44                 | LR__2514
1ce44     09 2D 82 F1 | 	sub	local08, arg01
1ce48     16 2F 02 F6 | 	mov	local09, local08
1ce4c                 | LR__2515
1ce4c     01 2E 56 F2 | 	cmps	local09, #1 wc
1ce50     70 00 90 CD |  if_b	jmp	#LR__2516
1ce54     17 25 02 F6 | 	mov	local04, local09
1ce58     0F 25 02 F1 | 	add	local04, local01
1ce5c     12 33 C2 FA | 	rdbyte	local11, local04
1ce60     2F 32 0E F2 | 	cmp	local11, #47 wz
1ce64     17 33 02 A6 |  if_e	mov	local11, local09
1ce68     0F 33 02 A1 |  if_e	add	local11, local01
1ce6c     19 01 48 AC |  if_e	wrbyte	#0, local11
1ce70     01 2E 86 A1 |  if_e	sub	local09, #1
1ce74     D4 FF 9F AD |  if_e	jmp	#LR__2515
1ce78     17 25 02 F6 | 	mov	local04, local09
1ce7c     0F 25 02 F1 | 	add	local04, local01
1ce80     12 33 C2 FA | 	rdbyte	local11, local04
1ce84     2E 32 0E F2 | 	cmp	local11, #46 wz
1ce88     38 00 90 5D |  if_ne	jmp	#LR__2516
1ce8c     02 2E 56 F2 | 	cmps	local09, #2 wc
1ce90     30 00 90 CD |  if_b	jmp	#LR__2516
1ce94     17 39 02 F6 | 	mov	local14, local09
1ce98     01 38 86 F1 | 	sub	local14, #1
1ce9c     0F 39 02 F1 | 	add	local14, local01
1cea0     1C 27 C2 FA | 	rdbyte	local05, local14
1cea4     2F 26 0E F2 | 	cmp	local05, #47 wz
1cea8     18 00 90 5D |  if_ne	jmp	#LR__2516
1ceac     17 25 02 F6 | 	mov	local04, local09
1ceb0     01 24 86 F1 | 	sub	local04, #1
1ceb4     0F 25 02 F1 | 	add	local04, local01
1ceb8     12 01 48 FC | 	wrbyte	#0, local04
1cebc     02 2E 86 F1 | 	sub	local09, #2
1cec0     88 FF 9F FD | 	jmp	#LR__2515
1cec4                 | LR__2516
1cec4     1A FB 01 F6 | 	mov	result1, local12
1cec8     1C 00 90 FD | 	jmp	#LR__2520
1cecc                 | LR__2517
1cecc                 | LR__2518
1cecc     01 2A 06 F1 | 	add	local07, #1
1ced0     2C FE 9F FD | 	jmp	#LR__2507
1ced4                 | LR__2519
1ced4     03 00 00 FF 
1ced8     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1cedc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1cee0     03 00 00 FF 
1cee4     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1cee8                 | LR__2520
1cee8     A7 F0 03 F6 | 	mov	ptra, fp
1ceec     B2 00 A0 FD | 	call	#popregs_
1cef0                 | __system____getvfsforfile_ret
1cef0     2D 00 64 FD | 	ret
1cef4                 | 
1cef4                 | __system___basic_open
1cef4     05 4A 05 F6 | 	mov	COUNT_, #5
1cef8     A8 00 A0 FD | 	call	#pushregs_
1cefc     0A 1F 02 F6 | 	mov	local01, arg02
1cf00     0B 21 02 F6 | 	mov	local02, arg03
1cf04     0C 23 02 F6 | 	mov	local03, arg04
1cf08     00 24 06 F6 | 	mov	local04, #0
1cf0c     F4 46 B0 FD | 	call	#__system____getftab
1cf10     FD 26 0A F6 | 	mov	local05, result1 wz
1cf14     18 00 90 5D |  if_ne	jmp	#LR__2530
1cf18     EE 12 02 F6 | 	mov	arg01, abortchain
1cf1c     0C 14 06 F6 | 	mov	arg02, #12
1cf20     01 16 06 F6 | 	mov	arg03, #1
1cf24     DA 00 A0 FD | 	call	#__longjmp
1cf28     01 FA 65 F6 | 	neg	result1, #1
1cf2c     10 01 90 FD | 	jmp	#LR__2539
1cf30                 | LR__2530
1cf30     08 26 06 F1 | 	add	local05, #8
1cf34     13 FB 09 FB | 	rdlong	result1, local05 wz
1cf38     08 26 86 F1 | 	sub	local05, #8
1cf3c     13 13 02 56 |  if_ne	mov	arg01, local05
1cf40     50 3E B0 5D |  if_ne	call	#__system___closeraw
1cf44     00 1E 0E F2 | 	cmp	local01, #0 wz
1cf48     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1cf4c     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1cf50     3C 00 90 AD |  if_e	jmp	#LR__2532
1cf54     0C 12 06 F6 | 	mov	arg01, #12
1cf58     38 33 B0 FD | 	call	#__system___gc_alloc_managed
1cf5c     FD 24 0A F6 | 	mov	local04, result1 wz
1cf60     18 00 90 5D |  if_ne	jmp	#LR__2531
1cf64     EE 12 02 F6 | 	mov	arg01, abortchain
1cf68     07 14 06 F6 | 	mov	arg02, #7
1cf6c     01 16 06 F6 | 	mov	arg03, #1
1cf70     DA 00 A0 FD | 	call	#__longjmp
1cf74     01 FA 65 F6 | 	neg	result1, #1
1cf78     C4 00 90 FD | 	jmp	#LR__2539
1cf7c                 | LR__2531
1cf7c     12 01 68 FC | 	wrlong	#0, local04
1cf80     04 24 06 F1 | 	add	local04, #4
1cf84     12 01 68 FC | 	wrlong	#0, local04
1cf88     04 24 86 F1 | 	sub	local04, #4
1cf8c     13 25 62 FC | 	wrlong	local04, local05
1cf90                 | LR__2532
1cf90     00 1E 0E F2 | 	cmp	local01, #0 wz
1cf94     1C 00 90 AD |  if_e	jmp	#LR__2533
1cf98     12 1F 62 FC | 	wrlong	local01, local04
1cf9c     12 FB 01 F6 | 	mov	result1, local04
1cfa0     77 FA 25 F4 | 	bith	result1, #119
1cfa4     1C 26 06 F1 | 	add	local05, #28
1cfa8     13 FB 61 FC | 	wrlong	result1, local05
1cfac     1C 26 86 F1 | 	sub	local05, #28
1cfb0     0C 00 90 FD | 	jmp	#LR__2534
1cfb4                 | LR__2533
1cfb4     1C 26 06 F1 | 	add	local05, #28
1cfb8     13 01 68 FC | 	wrlong	#0, local05
1cfbc     1C 26 86 F1 | 	sub	local05, #28
1cfc0                 | LR__2534
1cfc0     00 20 0E F2 | 	cmp	local02, #0 wz
1cfc4     28 00 90 AD |  if_e	jmp	#LR__2535
1cfc8     04 24 06 F1 | 	add	local04, #4
1cfcc     12 21 62 FC | 	wrlong	local02, local04
1cfd0     04 24 86 F1 | 	sub	local04, #4
1cfd4     12 FB 01 F6 | 	mov	result1, local04
1cfd8     00 C8 03 FF 
1cfdc     00 FA 45 F5 | 	or	result1, ##126877696
1cfe0     20 26 06 F1 | 	add	local05, #32
1cfe4     13 FB 61 FC | 	wrlong	result1, local05
1cfe8     20 26 86 F1 | 	sub	local05, #32
1cfec     0C 00 90 FD | 	jmp	#LR__2536
1cff0                 | LR__2535
1cff0     20 26 06 F1 | 	add	local05, #32
1cff4     13 01 68 FC | 	wrlong	#0, local05
1cff8     20 26 86 F1 | 	sub	local05, #32
1cffc                 | LR__2536
1cffc     00 22 0E F2 | 	cmp	local03, #0 wz
1d000     24 00 90 AD |  if_e	jmp	#LR__2537
1d004     08 24 06 F1 | 	add	local04, #8
1d008     12 23 62 FC | 	wrlong	local03, local04
1d00c     08 24 86 F1 | 	sub	local04, #8
1d010     00 D0 03 FF 
1d014     00 24 46 F5 | 	or	local04, ##127926272
1d018     24 26 06 F1 | 	add	local05, #36
1d01c     13 25 62 FC | 	wrlong	local04, local05
1d020     24 26 86 F1 | 	sub	local05, #36
1d024     0C 00 90 FD | 	jmp	#LR__2538
1d028                 | LR__2537
1d028     24 26 06 F1 | 	add	local05, #36
1d02c     13 01 68 FC | 	wrlong	#0, local05
1d030     24 26 86 F1 | 	sub	local05, #36
1d034                 | LR__2538
1d034     08 26 06 F1 | 	add	local05, #8
1d038     13 0F 68 FC | 	wrlong	#7, local05
1d03c     00 FA 05 F6 | 	mov	result1, #0
1d040                 | LR__2539
1d040     A7 F0 03 F6 | 	mov	ptra, fp
1d044     B2 00 A0 FD | 	call	#popregs_
1d048                 | __system___basic_open_ret
1d048     2D 00 64 FD | 	ret
1d04c                 | 
1d04c                 | __system___basic_open_string
1d04c     04 4A 05 F6 | 	mov	COUNT_, #4
1d050     A8 00 A0 FD | 	call	#pushregs_
1d054     0A 1F 02 F6 | 	mov	local01, arg02
1d058     0B 21 02 F6 | 	mov	local02, arg03
1d05c     A4 45 B0 FD | 	call	#__system____getftab
1d060     FD 22 0A F6 | 	mov	local03, result1 wz
1d064     18 00 90 5D |  if_ne	jmp	#LR__2540
1d068     EE 12 02 F6 | 	mov	arg01, abortchain
1d06c     0C 14 06 F6 | 	mov	arg02, #12
1d070     01 16 06 F6 | 	mov	arg03, #1
1d074     DA 00 A0 FD | 	call	#__longjmp
1d078     01 FA 65 F6 | 	neg	result1, #1
1d07c     58 00 90 FD | 	jmp	#LR__2542
1d080                 | LR__2540
1d080     08 22 06 F1 | 	add	local03, #8
1d084     11 19 0A FB | 	rdlong	arg04, local03 wz
1d088     08 22 86 F1 | 	sub	local03, #8
1d08c     11 13 02 56 |  if_ne	mov	arg01, local03
1d090     00 3D B0 5D |  if_ne	call	#__system___closeraw
1d094     0F 15 02 F6 | 	mov	arg02, local01
1d098     10 17 02 F6 | 	mov	arg03, local02
1d09c     11 13 02 F6 | 	mov	arg01, local03
1d0a0     B6 19 06 F6 | 	mov	arg04, #438
1d0a4     E8 39 B0 FD | 	call	#__system___openraw
1d0a8     FD 24 02 F6 | 	mov	local04, result1
1d0ac     00 24 56 F2 | 	cmps	local04, #0 wc
1d0b0     20 00 90 3D |  if_ae	jmp	#LR__2541
1d0b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1d0b8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1d0bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1d0c0     EE 12 02 F6 | 	mov	arg01, abortchain
1d0c4     01 16 06 F6 | 	mov	arg03, #1
1d0c8     DA 00 A0 FD | 	call	#__longjmp
1d0cc     01 FA 65 F6 | 	neg	result1, #1
1d0d0     04 00 90 FD | 	jmp	#LR__2542
1d0d4                 | LR__2541
1d0d4     12 FB 01 F6 | 	mov	result1, local04
1d0d8                 | LR__2542
1d0d8     A7 F0 03 F6 | 	mov	ptra, fp
1d0dc     B2 00 A0 FD | 	call	#popregs_
1d0e0                 | __system___basic_open_string_ret
1d0e0     2D 00 64 FD | 	ret
1d0e4                 | 
1d0e4                 | __system___basic_print_nl
1d0e4     0A 14 06 F6 | 	mov	arg02, #10
1d0e8     00 16 06 F6 | 	mov	arg03, #0
1d0ec     08 00 B0 FD | 	call	#__system___basic_print_char
1d0f0     01 FA 05 F6 | 	mov	result1, #1
1d0f4                 | __system___basic_print_nl_ret
1d0f4     2D 00 64 FD | 	ret
1d0f8                 | 
1d0f8                 | __system___basic_print_char
1d0f8     03 4A 05 F6 | 	mov	COUNT_, #3
1d0fc     A8 00 A0 FD | 	call	#pushregs_
1d100     0A 1F 02 F6 | 	mov	local01, arg02
1d104     50 4C B0 FD | 	call	#__system___gettxfunc
1d108     FD 20 0A F6 | 	mov	local02, result1 wz
1d10c     00 FA 05 A6 |  if_e	mov	result1, #0
1d110     30 00 90 AD |  if_e	jmp	#LR__2550
1d114     10 23 02 F6 | 	mov	local03, local02
1d118     13 20 46 F7 | 	zerox	local02, #19
1d11c     14 22 46 F0 | 	shr	local03, #20
1d120     02 22 66 F0 | 	shl	local03, #2
1d124     ED 22 02 F1 | 	add	local03, __methods__
1d128     11 23 02 FB | 	rdlong	local03, local03
1d12c     0F 13 02 F6 | 	mov	arg01, local01
1d130     F2 1E 02 F6 | 	mov	local01, objptr
1d134     10 E5 01 F6 | 	mov	objptr, local02
1d138     2D 22 62 FD | 	call	local03
1d13c     0F E5 01 F6 | 	mov	objptr, local01
1d140     01 FA 05 F6 | 	mov	result1, #1
1d144                 | LR__2550
1d144     A7 F0 03 F6 | 	mov	ptra, fp
1d148     B2 00 A0 FD | 	call	#popregs_
1d14c                 | __system___basic_print_char_ret
1d14c     2D 00 64 FD | 	ret
1d150                 | 
1d150                 | __system___basic_print_string
1d150     03 4A 05 F6 | 	mov	COUNT_, #3
1d154     A8 00 A0 FD | 	call	#pushregs_
1d158     0A 1F 02 F6 | 	mov	local01, arg02
1d15c     0B 21 02 F6 | 	mov	local02, arg03
1d160     F4 4B B0 FD | 	call	#__system___gettxfunc
1d164     FD 22 0A F6 | 	mov	local03, result1 wz
1d168     00 FA 05 A6 |  if_e	mov	result1, #0
1d16c     18 00 90 AD |  if_e	jmp	#LR__2560
1d170     00 1E 0E F2 | 	cmp	local01, #0 wz
1d174     00 FA 05 A6 |  if_e	mov	result1, #0
1d178     11 13 02 56 |  if_ne	mov	arg01, local03
1d17c     10 15 02 56 |  if_ne	mov	arg02, local02
1d180     0F 17 02 56 |  if_ne	mov	arg03, local01
1d184     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1d188                 | LR__2560
1d188     A7 F0 03 F6 | 	mov	ptra, fp
1d18c     B2 00 A0 FD | 	call	#popregs_
1d190                 | __system___basic_print_string_ret
1d190     2D 00 64 FD | 	ret
1d194                 | 
1d194                 | __system___basic_print_integer
1d194     04 4A 05 F6 | 	mov	COUNT_, #4
1d198     A8 00 A0 FD | 	call	#pushregs_
1d19c     0A 1F 02 F6 | 	mov	local01, arg02
1d1a0     0B 21 02 F6 | 	mov	local02, arg03
1d1a4     0C 23 02 F6 | 	mov	local03, arg04
1d1a8     AC 4B B0 FD | 	call	#__system___gettxfunc
1d1ac     FD 24 0A F6 | 	mov	local04, result1 wz
1d1b0     00 FA 05 A6 |  if_e	mov	result1, #0
1d1b4     12 13 02 56 |  if_ne	mov	arg01, local04
1d1b8     10 15 02 56 |  if_ne	mov	arg02, local02
1d1bc     0F 17 02 56 |  if_ne	mov	arg03, local01
1d1c0     11 19 02 56 |  if_ne	mov	arg04, local03
1d1c4     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1d1c8     A7 F0 03 F6 | 	mov	ptra, fp
1d1cc     B2 00 A0 FD | 	call	#popregs_
1d1d0                 | __system___basic_print_integer_ret
1d1d0     2D 00 64 FD | 	ret
1d1d4                 | 
1d1d4                 | __system___basic_print_unsigned
1d1d4     03 4A 05 F6 | 	mov	COUNT_, #3
1d1d8     A8 00 A0 FD | 	call	#pushregs_
1d1dc     0A 1F 02 F6 | 	mov	local01, arg02
1d1e0     0B 21 02 F6 | 	mov	local02, arg03
1d1e4     0C 23 02 F6 | 	mov	local03, arg04
1d1e8     6C 4B B0 FD | 	call	#__system___gettxfunc
1d1ec     FD 12 0A F6 | 	mov	arg01, result1 wz
1d1f0     00 FA 05 A6 |  if_e	mov	result1, #0
1d1f4     3A 20 26 54 |  if_ne	bith	local02, #58
1d1f8     10 15 02 56 |  if_ne	mov	arg02, local02
1d1fc     0F 17 02 56 |  if_ne	mov	arg03, local01
1d200     11 19 02 56 |  if_ne	mov	arg04, local03
1d204     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1d208     A7 F0 03 F6 | 	mov	ptra, fp
1d20c     B2 00 A0 FD | 	call	#popregs_
1d210                 | __system___basic_print_unsigned_ret
1d210     2D 00 64 FD | 	ret
1d214                 | 
1d214                 | __system___basic_get_char
1d214     03 4A 05 F6 | 	mov	COUNT_, #3
1d218     A8 00 A0 FD | 	call	#pushregs_
1d21c     7C 4B B0 FD | 	call	#__system___getrxfunc
1d220     FD 1E 0A F6 | 	mov	local01, result1 wz
1d224     01 FA 65 A6 |  if_e	neg	result1, #1
1d228     28 00 90 AD |  if_e	jmp	#LR__2570
1d22c     0F 21 02 F6 | 	mov	local02, local01
1d230     13 1E 46 F7 | 	zerox	local01, #19
1d234     14 20 46 F0 | 	shr	local02, #20
1d238     02 20 66 F0 | 	shl	local02, #2
1d23c     ED 20 02 F1 | 	add	local02, __methods__
1d240     10 21 02 FB | 	rdlong	local02, local02
1d244     F2 22 02 F6 | 	mov	local03, objptr
1d248     0F E5 01 F6 | 	mov	objptr, local01
1d24c     2D 20 62 FD | 	call	local02
1d250     11 E5 01 F6 | 	mov	objptr, local03
1d254                 | LR__2570
1d254     A7 F0 03 F6 | 	mov	ptra, fp
1d258     B2 00 A0 FD | 	call	#popregs_
1d25c                 | __system___basic_get_char_ret
1d25c     2D 00 64 FD | 	ret
1d260                 | 
1d260                 | __system___basic_get
1d260     04 4A 05 F6 | 	mov	COUNT_, #4
1d264     A8 00 A0 FD | 	call	#pushregs_
1d268     0D 1F 02 F6 | 	mov	local01, arg05
1d26c     0F 19 02 FD | 	qmul	arg04, local01
1d270     09 21 02 F6 | 	mov	local02, arg01
1d274     0B 23 02 F6 | 	mov	local03, arg03
1d278     00 14 0E F2 | 	cmp	arg02, #0 wz
1d27c     01 14 86 51 |  if_ne	sub	arg02, #1
1d280     10 13 02 56 |  if_ne	mov	arg01, local02
1d284     00 16 06 56 |  if_ne	mov	arg03, #0
1d288     18 24 62 FD | 	getqx	local04
1d28c     BC 41 B0 5D |  if_ne	call	#__system__lseek
1d290     11 15 02 F6 | 	mov	arg02, local03
1d294     12 17 02 F6 | 	mov	arg03, local04
1d298     10 13 02 F6 | 	mov	arg01, local02
1d29c     34 41 B0 FD | 	call	#__system__read
1d2a0     FD 24 02 F6 | 	mov	local04, result1
1d2a4     01 24 56 F2 | 	cmps	local04, #1 wc
1d2a8     10 00 90 CD |  if_b	jmp	#LR__2580
1d2ac     12 65 02 F6 | 	mov	muldiva_, local04
1d2b0     0F 67 02 F6 | 	mov	muldivb_, local01
1d2b4     BA 00 A0 FD | 	call	#divide_
1d2b8     33 25 02 F6 | 	mov	local04, muldivb_
1d2bc                 | LR__2580
1d2bc     12 FB 01 F6 | 	mov	result1, local04
1d2c0     A7 F0 03 F6 | 	mov	ptra, fp
1d2c4     B2 00 A0 FD | 	call	#popregs_
1d2c8                 | __system___basic_get_ret
1d2c8     2D 00 64 FD | 	ret
1d2cc                 | 
1d2cc                 | __system____lockio
1d2cc     0C 4B B0 FD | 	call	#__system___getiolock_0474
1d2d0     FD 12 02 F6 | 	mov	arg01, result1
1d2d4     74 F1 BF FD | 	call	#__system___lockmem
1d2d8     00 FA 05 F6 | 	mov	result1, #0
1d2dc                 | __system____lockio_ret
1d2dc     2D 00 64 FD | 	ret
1d2e0                 | 
1d2e0                 | __system____unlockio
1d2e0     F8 4A B0 FD | 	call	#__system___getiolock_0474
1d2e4     FD 00 68 FC | 	wrlong	#0, result1
1d2e8     00 FA 05 F6 | 	mov	result1, #0
1d2ec                 | __system____unlockio_ret
1d2ec     2D 00 64 FD | 	ret
1d2f0                 | 
1d2f0                 | __system___fmtchar
1d2f0     00 4A 05 F6 | 	mov	COUNT_, #0
1d2f4     A8 00 A0 FD | 	call	#pushregs_
1d2f8     10 F0 07 F1 | 	add	ptra, #16
1d2fc     04 4E 05 F1 | 	add	fp, #4
1d300     A7 12 62 FC | 	wrlong	arg01, fp
1d304     04 4E 05 F1 | 	add	fp, #4
1d308     A7 14 62 FC | 	wrlong	arg02, fp
1d30c     04 4E 05 F1 | 	add	fp, #4
1d310     A7 16 62 FC | 	wrlong	arg03, fp
1d314     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1d318     A7 16 62 FC | 	wrlong	arg03, fp
1d31c     08 4E 85 F1 | 	sub	fp, #8
1d320     A7 12 02 FB | 	rdlong	arg01, fp
1d324     04 4E 05 F1 | 	add	fp, #4
1d328     A7 14 02 FB | 	rdlong	arg02, fp
1d32c     04 4E 05 F1 | 	add	fp, #4
1d330     A7 16 02 F6 | 	mov	arg03, fp
1d334     0C 4E 85 F1 | 	sub	fp, #12
1d338     0C 00 B0 FD | 	call	#__system___fmtstr
1d33c     A7 F0 03 F6 | 	mov	ptra, fp
1d340     B2 00 A0 FD | 	call	#popregs_
1d344                 | __system___fmtchar_ret
1d344     2D 00 64 FD | 	ret
1d348                 | 
1d348                 | __system___fmtstr
1d348     09 4A 05 F6 | 	mov	COUNT_, #9
1d34c     A8 00 A0 FD | 	call	#pushregs_
1d350     09 1F 02 F6 | 	mov	local01, arg01
1d354     0A 21 02 F6 | 	mov	local02, arg02
1d358     0B 23 02 F6 | 	mov	local03, arg03
1d35c     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1d360     11 13 02 F6 | 	mov	arg01, local03
1d364     09 25 02 F6 | 	mov	local04, arg01
1d368     97 06 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1d36c                 | LR__2590
1d36c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d370     01 24 06 51 |  if_ne	add	local04, #1
1d374     F4 FF 9F 5D |  if_ne	jmp	#LR__2590
1d378                 | LR__2591
1d378     09 25 82 F1 | 	sub	local04, arg01
1d37c     00 18 0E F2 | 	cmp	arg04, #0 wz
1d380     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1d384     10 15 02 F6 | 	mov	arg02, local02
1d388     12 17 02 F6 | 	mov	arg03, local04
1d38c     0F 13 02 F6 | 	mov	arg01, local01
1d390     02 18 06 F6 | 	mov	arg04, #2
1d394     60 46 B0 FD | 	call	#__system___fmtpad
1d398     FD 26 02 F6 | 	mov	local05, result1
1d39c     00 26 56 F2 | 	cmps	local05, #0 wc
1d3a0     13 FB 01 C6 |  if_b	mov	result1, local05
1d3a4     80 00 90 CD |  if_b	jmp	#LR__2594
1d3a8     01 24 56 F2 | 	cmps	local04, #1 wc
1d3ac     50 00 90 CD |  if_b	jmp	#LR__2593
1d3b0     12 29 02 F6 | 	mov	local06, local04
1d3b4                 | LR__2592
1d3b4     0F 2B 02 F6 | 	mov	local07, local01
1d3b8     0F 2D 02 F6 | 	mov	local08, local01
1d3bc     13 2A 46 F7 | 	zerox	local07, #19
1d3c0     14 2C 46 F0 | 	shr	local08, #20
1d3c4     02 2C 66 F0 | 	shl	local08, #2
1d3c8     ED 2C 02 F1 | 	add	local08, __methods__
1d3cc     16 2D 02 FB | 	rdlong	local08, local08
1d3d0     11 13 C2 FA | 	rdbyte	arg01, local03
1d3d4     F2 2E 02 F6 | 	mov	local09, objptr
1d3d8     15 E5 01 F6 | 	mov	objptr, local07
1d3dc     01 22 06 F1 | 	add	local03, #1
1d3e0     2D 2C 62 FD | 	call	local08
1d3e4     17 E5 01 F6 | 	mov	objptr, local09
1d3e8     FD 2E 02 F6 | 	mov	local09, result1
1d3ec     00 2E 56 F2 | 	cmps	local09, #0 wc
1d3f0     17 FB 01 C6 |  if_b	mov	result1, local09
1d3f4     30 00 90 CD |  if_b	jmp	#LR__2594
1d3f8     17 27 02 F1 | 	add	local05, local09
1d3fc     ED 29 6E FB | 	djnz	local06, #LR__2592
1d400                 | LR__2593
1d400     10 15 02 F6 | 	mov	arg02, local02
1d404     12 17 02 F6 | 	mov	arg03, local04
1d408     0F 13 02 F6 | 	mov	arg01, local01
1d40c     01 18 06 F6 | 	mov	arg04, #1
1d410     E4 45 B0 FD | 	call	#__system___fmtpad
1d414     FD 2E 02 F6 | 	mov	local09, result1
1d418     00 2E 56 F2 | 	cmps	local09, #0 wc
1d41c     17 FB 01 C6 |  if_b	mov	result1, local09
1d420     17 27 02 31 |  if_ae	add	local05, local09
1d424     13 FB 01 36 |  if_ae	mov	result1, local05
1d428                 | LR__2594
1d428     A7 F0 03 F6 | 	mov	ptra, fp
1d42c     B2 00 A0 FD | 	call	#popregs_
1d430                 | __system___fmtstr_ret
1d430     2D 00 64 FD | 	ret
1d434                 | 
1d434                 | __system___fmtnum
1d434     0B 4A 05 F6 | 	mov	COUNT_, #11
1d438     A8 00 A0 FD | 	call	#pushregs_
1d43c     09 1F 02 F6 | 	mov	local01, arg01
1d440     0A 21 02 F6 | 	mov	local02, arg02
1d444     0B 23 02 F6 | 	mov	local03, arg03
1d448     0C 25 02 F6 | 	mov	local04, arg04
1d44c     F8 27 02 F6 | 	mov	local05, ptra
1d450     13 29 02 F6 | 	mov	local06, local05
1d454     00 2A 06 F6 | 	mov	local07, #0
1d458     10 2D 02 F6 | 	mov	local08, local02
1d45c     10 2C 46 F0 | 	shr	local08, #16
1d460     3F 2C 06 F5 | 	and	local08, #63
1d464     10 2F E2 F8 | 	getbyte	local09, local02, #0
1d468     10 31 02 F6 | 	mov	local10, local02
1d46c     1A 30 46 F0 | 	shr	local10, #26
1d470     03 30 06 F5 | 	and	local10, #3
1d474     18 33 02 F6 | 	mov	local11, local10
1d478     01 2C 56 F2 | 	cmps	local08, #1 wc
1d47c     44 F0 07 F1 | 	add	ptra, #68
1d480     01 2C 86 31 |  if_ae	sub	local08, #1
1d484     41 2E 56 F2 | 	cmps	local09, #65 wc
1d488     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1d48c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1d490     03 32 0E F2 | 	cmp	local11, #3 wz
1d494     00 32 06 A6 |  if_e	mov	local11, #0
1d498     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1d49c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1d4a0     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1d4a4     00 32 0E F2 | 	cmp	local11, #0 wz
1d4a8     4C 00 90 AD |  if_e	jmp	#LR__2603
1d4ac     01 2A 06 F6 | 	mov	local07, #1
1d4b0     17 2D 0A F2 | 	cmp	local08, local09 wz
1d4b4     18 00 90 5D |  if_ne	jmp	#LR__2601
1d4b8     05 2C 6E FB | 	djnz	local08, #LR__2600
1d4bc     0F 13 02 F6 | 	mov	arg01, local01
1d4c0     10 15 02 F6 | 	mov	arg02, local02
1d4c4     23 16 06 F6 | 	mov	arg03, #35
1d4c8     24 FE BF FD | 	call	#__system___fmtchar
1d4cc     88 00 90 FD | 	jmp	#LR__2607
1d4d0                 | LR__2600
1d4d0                 | LR__2601
1d4d0     02 32 0E F2 | 	cmp	local11, #2 wz
1d4d4     14 31 02 A6 |  if_e	mov	local10, local06
1d4d8     01 28 06 A1 |  if_e	add	local06, #1
1d4dc     18 41 48 AC |  if_e	wrbyte	#32, local10
1d4e0     14 00 90 AD |  if_e	jmp	#LR__2602
1d4e4     04 32 0E F2 | 	cmp	local11, #4 wz
1d4e8     14 5B 48 AC |  if_e	wrbyte	#45, local06
1d4ec     01 28 06 A1 |  if_e	add	local06, #1
1d4f0     14 57 48 5C |  if_ne	wrbyte	#43, local06
1d4f4     01 28 06 51 |  if_ne	add	local06, #1
1d4f8                 | LR__2602
1d4f8                 | LR__2603
1d4f8     14 13 02 F6 | 	mov	arg01, local06
1d4fc     11 15 02 F6 | 	mov	arg02, local03
1d500     12 17 02 F6 | 	mov	arg03, local04
1d504     16 19 02 F6 | 	mov	arg04, local08
1d508     00 1A 06 F6 | 	mov	arg05, #0
1d50c     1D 20 2E F4 | 	testbn	local02, #29 wz
1d510     01 1A 06 56 |  if_ne	mov	arg05, #1
1d514     A8 45 B0 FD | 	call	#__system___uitoa
1d518     FD 2A 02 F1 | 	add	local07, result1
1d51c     17 2B 5A F2 | 	cmps	local07, local09 wcz
1d520     24 00 90 ED |  if_be	jmp	#LR__2606
1d524     97 0E 48 FB | 	callpa	#(@LR__2605-@LR__2604)>>2,fcache_load_ptr_
1d528                 | LR__2604
1d528     17 31 02 F6 | 	mov	local10, local09
1d52c     01 30 56 F2 | 	cmps	local10, #1 wc
1d530     01 2E 86 F1 | 	sub	local09, #1
1d534     14 31 02 36 |  if_ae	mov	local10, local06
1d538     01 28 06 31 |  if_ae	add	local06, #1
1d53c     18 47 48 3C |  if_ae	wrbyte	#35, local10
1d540     E4 FF 9F 3D |  if_ae	jmp	#LR__2604
1d544                 | LR__2605
1d544     14 01 48 FC | 	wrbyte	#0, local06
1d548                 | LR__2606
1d548     0F 13 02 F6 | 	mov	arg01, local01
1d54c     10 15 02 F6 | 	mov	arg02, local02
1d550     13 17 02 F6 | 	mov	arg03, local05
1d554     F0 FD BF FD | 	call	#__system___fmtstr
1d558                 | LR__2607
1d558     A7 F0 03 F6 | 	mov	ptra, fp
1d55c     B2 00 A0 FD | 	call	#popregs_
1d560                 | __system___fmtnum_ret
1d560     2D 00 64 FD | 	ret
1d564                 | 
1d564                 | __system___fmtfloat
1d564     10 4A 05 F6 | 	mov	COUNT_, #16
1d568     A8 00 A0 FD | 	call	#pushregs_
1d56c     24 F1 07 F1 | 	add	ptra, #292
1d570     04 4E 05 F1 | 	add	fp, #4
1d574     A7 12 62 FC | 	wrlong	arg01, fp
1d578     04 4E 05 F1 | 	add	fp, #4
1d57c     A7 14 62 FC | 	wrlong	arg02, fp
1d580     04 4E 05 F1 | 	add	fp, #4
1d584     A7 16 62 FC | 	wrlong	arg03, fp
1d588     04 4E 05 F1 | 	add	fp, #4
1d58c     A7 18 62 FC | 	wrlong	arg04, fp
1d590     0C 4E 05 F1 | 	add	fp, #12
1d594     A7 14 68 FC | 	wrlong	#10, fp
1d598     08 4E 05 F1 | 	add	fp, #8
1d59c     A7 00 68 FC | 	wrlong	#0, fp
1d5a0     08 4E 05 F1 | 	add	fp, #8
1d5a4     A7 00 68 FC | 	wrlong	#0, fp
1d5a8     08 4E 05 F1 | 	add	fp, #8
1d5ac     A7 00 68 FC | 	wrlong	#0, fp
1d5b0     04 4E 05 F1 | 	add	fp, #4
1d5b4     A7 04 68 FC | 	wrlong	#2, fp
1d5b8     04 4E 05 F1 | 	add	fp, #4
1d5bc     A7 00 68 FC | 	wrlong	#0, fp
1d5c0     04 4E 05 F1 | 	add	fp, #4
1d5c4     A7 00 68 FC | 	wrlong	#0, fp
1d5c8     04 4E 05 F1 | 	add	fp, #4
1d5cc     A7 00 68 FC | 	wrlong	#0, fp
1d5d0     04 4E 05 F1 | 	add	fp, #4
1d5d4     A7 00 68 FC | 	wrlong	#0, fp
1d5d8     18 4E 05 F1 | 	add	fp, #24
1d5dc     A7 00 68 FC | 	wrlong	#0, fp
1d5e0     68 4E 05 F1 | 	add	fp, #104
1d5e4     A7 1E 02 F6 | 	mov	local01, fp
1d5e8     08 4E 85 F1 | 	sub	fp, #8
1d5ec     A7 1E 62 FC | 	wrlong	local01, fp
1d5f0     04 4E 05 F1 | 	add	fp, #4
1d5f4     A7 1E 62 FC | 	wrlong	local01, fp
1d5f8     BC 4E 85 F1 | 	sub	fp, #188
1d5fc     A7 1E 02 FB | 	rdlong	local01, fp
1d600     10 1E 46 F0 | 	shr	local01, #16
1d604     3F 1E 06 F5 | 	and	local01, #63
1d608     B0 4E 05 F1 | 	add	fp, #176
1d60c     A7 1E 62 FC | 	wrlong	local01, fp
1d610     B0 4E 85 F1 | 	sub	fp, #176
1d614     A7 1E 02 FB | 	rdlong	local01, fp
1d618     1C 1E 46 F0 | 	shr	local01, #28
1d61c     01 1E 06 F5 | 	and	local01, #1
1d620     08 4F 05 F1 | 	add	fp, #264
1d624     A7 1E 62 FC | 	wrlong	local01, fp
1d628     58 4E 85 F1 | 	sub	fp, #88
1d62c     A7 1E 0A FB | 	rdlong	local01, fp wz
1d630     B8 4E 85 F1 | 	sub	fp, #184
1d634     3C 00 90 5D |  if_ne	jmp	#LR__2611
1d638     10 4E 05 F1 | 	add	fp, #16
1d63c     A7 1E 02 FB | 	rdlong	local01, fp
1d640     10 4E 85 F1 | 	sub	fp, #16
1d644     61 1E 0E F2 | 	cmp	local01, #97 wz
1d648     18 00 90 5D |  if_ne	jmp	#LR__2610
1d64c     B8 4E 05 F1 | 	add	fp, #184
1d650     A7 1A 68 FC | 	wrlong	#13, fp
1d654     84 4E 85 F1 | 	sub	fp, #132
1d658     A7 02 68 FC | 	wrlong	#1, fp
1d65c     34 4E 85 F1 | 	sub	fp, #52
1d660     24 00 90 FD | 	jmp	#LR__2612
1d664                 | LR__2610
1d664     B8 4E 05 F1 | 	add	fp, #184
1d668     A7 0C 68 FC | 	wrlong	#6, fp
1d66c     B8 4E 85 F1 | 	sub	fp, #184
1d670     14 00 90 FD | 	jmp	#LR__2612
1d674                 | LR__2611
1d674     B8 4E 05 F1 | 	add	fp, #184
1d678     A7 1E 02 FB | 	rdlong	local01, fp
1d67c     01 1E 86 F1 | 	sub	local01, #1
1d680     A7 1E 62 FC | 	wrlong	local01, fp
1d684     B8 4E 85 F1 | 	sub	fp, #184
1d688                 | LR__2612
1d688     08 4E 05 F1 | 	add	fp, #8
1d68c     A7 1E 02 FB | 	rdlong	local01, fp
1d690     16 1E 46 F0 | 	shr	local01, #22
1d694     03 1E 06 F5 | 	and	local01, #3
1d698     04 4F 05 F1 | 	add	fp, #260
1d69c     A7 1E 62 FC | 	wrlong	local01, fp
1d6a0     04 4F 85 F1 | 	sub	fp, #260
1d6a4     A7 1E 02 FB | 	rdlong	local01, fp
1d6a8     1D 1E 46 F0 | 	shr	local01, #29
1d6ac     01 1E 06 F5 | 	and	local01, #1
1d6b0     B4 4E 05 F1 | 	add	fp, #180
1d6b4     A7 1E 62 FC | 	wrlong	local01, fp
1d6b8     B4 4E 85 F1 | 	sub	fp, #180
1d6bc     A7 1E 02 FB | 	rdlong	local01, fp
1d6c0     0F 1F EA F8 | 	getbyte	local01, local01, #1
1d6c4     60 4E 05 F1 | 	add	fp, #96
1d6c8     A7 1E 62 FC | 	wrlong	local01, fp
1d6cc     60 4E 85 F1 | 	sub	fp, #96
1d6d0     A7 1E 02 FB | 	rdlong	local01, fp
1d6d4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d6d8     64 4E 05 F1 | 	add	fp, #100
1d6dc     A7 1E 62 FC | 	wrlong	local01, fp
1d6e0     00 1E 06 F6 | 	mov	local01, #0
1d6e4     5C 4E 85 F1 | 	sub	fp, #92
1d6e8     A7 1A 02 FB | 	rdlong	arg05, fp
1d6ec     65 1A 0E F2 | 	cmp	arg05, #101 wz
1d6f0     01 1E 06 A6 |  if_e	mov	local01, #1
1d6f4     14 4E 05 F1 | 	add	fp, #20
1d6f8     A7 1E 62 FC | 	wrlong	local01, fp
1d6fc     98 4E 05 F1 | 	add	fp, #152
1d700     A7 20 0A FB | 	rdlong	local02, fp wz
1d704     45 1E 06 56 |  if_ne	mov	local01, #69
1d708     65 1E 06 A6 |  if_e	mov	local01, #101
1d70c     8C 4E 85 F1 | 	sub	fp, #140
1d710     A7 1E 62 FC | 	wrlong	local01, fp
1d714     20 4E 85 F1 | 	sub	fp, #32
1d718     A7 1E 02 FB | 	rdlong	local01, fp
1d71c     10 4E 85 F1 | 	sub	fp, #16
1d720     61 1E 0E F2 | 	cmp	local01, #97 wz
1d724     4C 00 90 5D |  if_ne	jmp	#LR__2613
1d728     24 4E 05 F1 | 	add	fp, #36
1d72c     A7 02 68 FC | 	wrlong	#1, fp
1d730     98 4E 05 F1 | 	add	fp, #152
1d734     A7 20 0A FB | 	rdlong	local02, fp wz
1d738     50 1E 06 56 |  if_ne	mov	local01, #80
1d73c     70 1E 06 A6 |  if_e	mov	local01, #112
1d740     8C 4E 85 F1 | 	sub	fp, #140
1d744     A7 1E 62 FC | 	wrlong	local01, fp
1d748     14 4E 85 F1 | 	sub	fp, #20
1d74c     A7 04 68 FC | 	wrlong	#2, fp
1d750     1C 4E 05 F1 | 	add	fp, #28
1d754     A7 02 68 FC | 	wrlong	#1, fp
1d758     84 4E 05 F1 | 	add	fp, #132
1d75c     A7 20 0A FB | 	rdlong	local02, fp wz
1d760     58 1E 06 56 |  if_ne	mov	local01, #88
1d764     78 1E 06 A6 |  if_e	mov	local01, #120
1d768     7C 4E 85 F1 | 	sub	fp, #124
1d76c     A7 1E 62 FC | 	wrlong	local01, fp
1d770     40 4E 85 F1 | 	sub	fp, #64
1d774                 | LR__2613
1d774     10 4E 05 F1 | 	add	fp, #16
1d778     A7 1E 02 FB | 	rdlong	local01, fp
1d77c     10 4E 85 F1 | 	sub	fp, #16
1d780     23 1E 0E F2 | 	cmp	local01, #35 wz
1d784     3C 00 90 5D |  if_ne	jmp	#LR__2616
1d788     48 4E 05 F1 | 	add	fp, #72
1d78c     A7 02 68 FC | 	wrlong	#1, fp
1d790     C8 4E 05 F1 | 	add	fp, #200
1d794     A7 1E 0A FB | 	rdlong	local01, fp wz
1d798     10 4F 85 F1 | 	sub	fp, #272
1d79c     18 00 90 AD |  if_e	jmp	#LR__2614
1d7a0     10 4E 05 F1 | 	add	fp, #16
1d7a4     A7 CC 68 FC | 	wrlong	#102, fp
1d7a8     00 4F 05 F1 | 	add	fp, #256
1d7ac     A7 00 68 FC | 	wrlong	#0, fp
1d7b0     10 4F 85 F1 | 	sub	fp, #272
1d7b4     0C 00 90 FD | 	jmp	#LR__2615
1d7b8                 | LR__2614
1d7b8     10 4F 05 F1 | 	add	fp, #272
1d7bc     A7 02 68 FC | 	wrlong	#1, fp
1d7c0     10 4F 85 F1 | 	sub	fp, #272
1d7c4                 | LR__2615
1d7c4                 | LR__2616
1d7c4     08 4E 05 F1 | 	add	fp, #8
1d7c8     A7 1E 02 FB | 	rdlong	local01, fp
1d7cc     1A 1E 46 F0 | 	shr	local01, #26
1d7d0     03 1E 06 F5 | 	and	local01, #3
1d7d4     5C 4E 05 F1 | 	add	fp, #92
1d7d8     A7 1E 62 FC | 	wrlong	local01, fp
1d7dc     58 4E 85 F1 | 	sub	fp, #88
1d7e0     A7 FA 01 FB | 	rdlong	result1, fp
1d7e4     0C 4E 85 F1 | 	sub	fp, #12
1d7e8     1F FA 4D F0 | 	shr	result1, #31 wz
1d7ec     20 00 90 AD |  if_e	jmp	#LR__2617
1d7f0     2C 4E 05 F1 | 	add	fp, #44
1d7f4     A7 5A 68 FC | 	wrlong	#45, fp
1d7f8     20 4E 85 F1 | 	sub	fp, #32
1d7fc     A7 FA 01 FB | 	rdlong	result1, fp
1d800     1F FA E5 F4 | 	bitnot	result1, #31
1d804     A7 FA 61 FC | 	wrlong	result1, fp
1d808     0C 4E 85 F1 | 	sub	fp, #12
1d80c     3C 00 90 FD | 	jmp	#LR__2619
1d810                 | LR__2617
1d810     64 4E 05 F1 | 	add	fp, #100
1d814     A7 1E 02 FB | 	rdlong	local01, fp
1d818     64 4E 85 F1 | 	sub	fp, #100
1d81c     01 1E 0E F2 | 	cmp	local01, #1 wz
1d820     2C 4E 05 A1 |  if_e	add	fp, #44
1d824     A7 56 68 AC |  if_e	wrlong	#43, fp
1d828     2C 4E 85 A1 |  if_e	sub	fp, #44
1d82c     1C 00 90 AD |  if_e	jmp	#LR__2618
1d830     64 4E 05 F1 | 	add	fp, #100
1d834     A7 1E 02 FB | 	rdlong	local01, fp
1d838     64 4E 85 F1 | 	sub	fp, #100
1d83c     02 1E 0E F2 | 	cmp	local01, #2 wz
1d840     2C 4E 05 A1 |  if_e	add	fp, #44
1d844     A7 40 68 AC |  if_e	wrlong	#32, fp
1d848     2C 4E 85 A1 |  if_e	sub	fp, #44
1d84c                 | LR__2618
1d84c                 | LR__2619
1d84c     08 4E 05 F1 | 	add	fp, #8
1d850     A7 1E 02 FB | 	rdlong	local01, fp
1d854     18 1E 46 F0 | 	shr	local01, #24
1d858     03 1E 06 F5 | 	and	local01, #3
1d85c     3C 4E 05 F1 | 	add	fp, #60
1d860     A7 1E 62 FC | 	wrlong	local01, fp
1d864     00 1E 06 F6 | 	mov	local01, #0
1d868     18 4E 85 F1 | 	sub	fp, #24
1d86c     A7 22 0A FB | 	rdlong	local03, fp wz
1d870     2C 4E 85 F1 | 	sub	fp, #44
1d874     18 00 90 5D |  if_ne	jmp	#LR__2620
1d878     1C 4E 05 F1 | 	add	fp, #28
1d87c     A7 24 02 FB | 	rdlong	local04, fp
1d880     1C 4E 85 F1 | 	sub	fp, #28
1d884     12 27 02 F6 | 	mov	local05, local04
1d888     0A 26 0E F2 | 	cmp	local05, #10 wz
1d88c     04 00 90 AD |  if_e	jmp	#LR__2621
1d890                 | LR__2620
1d890     01 1E 66 F5 | 	xor	local01, #1
1d894                 | LR__2621
1d894     3C 4E 05 F1 | 	add	fp, #60
1d898     A7 1E 62 FC | 	wrlong	local01, fp
1d89c     3C 4E 85 F1 | 	sub	fp, #60
1d8a0     00 1E 0E F2 | 	cmp	local01, #0 wz
1d8a4     0C 01 90 AD |  if_e	jmp	#LR__2623
1d8a8     44 4E 05 F1 | 	add	fp, #68
1d8ac     A7 26 02 FB | 	rdlong	local05, fp
1d8b0     44 4E 85 F1 | 	sub	fp, #68
1d8b4     13 23 02 F6 | 	mov	local03, local05
1d8b8     02 22 0E F2 | 	cmp	local03, #2 wz
1d8bc     F4 00 90 5D |  if_ne	jmp	#LR__2623
1d8c0     0C 4F 05 F1 | 	add	fp, #268
1d8c4     A7 28 02 FB | 	rdlong	local06, fp
1d8c8     0C 4F 85 F1 | 	sub	fp, #268
1d8cc     14 25 02 F6 | 	mov	local04, local06
1d8d0     02 24 0E F2 | 	cmp	local04, #2 wz
1d8d4     DC 00 90 AD |  if_e	jmp	#LR__2623
1d8d8     C0 4E 05 F1 | 	add	fp, #192
1d8dc     A7 12 02 FB | 	rdlong	arg01, fp
1d8e0     94 4E 85 F1 | 	sub	fp, #148
1d8e4     A7 14 02 FB | 	rdlong	arg02, fp
1d8e8     14 4E 05 F1 | 	add	fp, #20
1d8ec     A7 16 02 FB | 	rdlong	arg03, fp
1d8f0     40 4E 85 F1 | 	sub	fp, #64
1d8f4     30 44 B0 FD | 	call	#__system__emitsign_0434
1d8f8     14 4F 05 F1 | 	add	fp, #276
1d8fc     A7 FA 61 FC | 	wrlong	result1, fp
1d900     14 4F 85 F1 | 	sub	fp, #276
1d904     00 FA 55 F2 | 	cmps	result1, #0 wc
1d908     14 4F 05 C1 |  if_b	add	fp, #276
1d90c     A7 FA 01 CB |  if_b	rdlong	result1, fp
1d910     14 4F 85 C1 |  if_b	sub	fp, #276
1d914     6C 0B 90 CD |  if_b	jmp	#LR__2673
1d918     C0 4E 05 F1 | 	add	fp, #192
1d91c     A7 1E 02 FB | 	rdlong	local01, fp
1d920     54 4E 05 F1 | 	add	fp, #84
1d924     A7 26 02 FB | 	rdlong	local05, fp
1d928     13 23 02 F6 | 	mov	local03, local05
1d92c     13 1F 02 F1 | 	add	local01, local05
1d930     54 4E 85 F1 | 	sub	fp, #84
1d934     A7 1E 62 FC | 	wrlong	local01, fp
1d938     58 4E 85 F1 | 	sub	fp, #88
1d93c     A7 1E 0A FB | 	rdlong	local01, fp wz
1d940     68 4E 85 F1 | 	sub	fp, #104
1d944     60 00 90 AD |  if_e	jmp	#LR__2622
1d948     68 4E 05 F1 | 	add	fp, #104
1d94c     A7 1E 02 FB | 	rdlong	local01, fp
1d950     AC 4E 05 F1 | 	add	fp, #172
1d954     A7 22 02 FB | 	rdlong	local03, fp
1d958     11 1F 82 F1 | 	sub	local01, local03
1d95c     AC 4E 85 F1 | 	sub	fp, #172
1d960     A7 1E 62 FC | 	wrlong	local01, fp
1d964     68 4E 85 F1 | 	sub	fp, #104
1d968     00 1E 56 F2 | 	cmps	local01, #0 wc
1d96c     68 4E 05 C1 |  if_b	add	fp, #104
1d970     A7 00 68 CC |  if_b	wrlong	#0, fp
1d974     68 4E 85 C1 |  if_b	sub	fp, #104
1d978     08 4E 05 F1 | 	add	fp, #8
1d97c     A7 1E 02 FB | 	rdlong	local01, fp
1d980     E8 1E 06 F4 | 	bitl	local01, #232
1d984     A7 1E 62 FC | 	wrlong	local01, fp
1d988     60 4E 05 F1 | 	add	fp, #96
1d98c     A7 26 02 FB | 	rdlong	local05, fp
1d990     13 23 02 F6 | 	mov	local03, local05
1d994     08 22 66 F0 | 	shl	local03, #8
1d998     11 1F 42 F5 | 	or	local01, local03
1d99c     60 4E 85 F1 | 	sub	fp, #96
1d9a0     A7 1E 62 FC | 	wrlong	local01, fp
1d9a4     08 4E 85 F1 | 	sub	fp, #8
1d9a8                 | LR__2622
1d9a8     3C 4E 05 F1 | 	add	fp, #60
1d9ac     A7 00 68 FC | 	wrlong	#0, fp
1d9b0     3C 4E 85 F1 | 	sub	fp, #60
1d9b4                 | LR__2623
1d9b4     0C 4E 05 F1 | 	add	fp, #12
1d9b8     A7 12 02 FB | 	rdlong	arg01, fp
1d9bc     0C 4E 85 F1 | 	sub	fp, #12
1d9c0     04 1F B0 FD | 	call	#__system____builtin_ilogb
1d9c4     FF FF 3F FF 
1d9c8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1d9cc     50 00 90 5D |  if_ne	jmp	#LR__2625
1d9d0     2C 4E 05 F1 | 	add	fp, #44
1d9d4     A7 1E 0A FB | 	rdlong	local01, fp wz
1d9d8     2C 4E 85 F1 | 	sub	fp, #44
1d9dc     24 00 90 AD |  if_e	jmp	#LR__2624
1d9e0     C0 4E 05 F1 | 	add	fp, #192
1d9e4     A7 20 02 FB | 	rdlong	local02, fp
1d9e8     10 23 02 F6 | 	mov	local03, local02
1d9ec     01 22 06 F1 | 	add	local03, #1
1d9f0     A7 22 62 FC | 	wrlong	local03, fp
1d9f4     94 4E 85 F1 | 	sub	fp, #148
1d9f8     A7 24 02 FB | 	rdlong	local04, fp
1d9fc     2C 4E 85 F1 | 	sub	fp, #44
1da00     10 25 42 FC | 	wrbyte	local04, local02
1da04                 | LR__2624
1da04     C0 4E 05 F1 | 	add	fp, #192
1da08     A7 12 02 FB | 	rdlong	arg01, fp
1da0c     C0 4E 85 F1 | 	sub	fp, #192
1da10     5C 01 00 FF 
1da14     FA 15 06 F6 | 	mov	arg02, ##@LR__4561
1da18     E4 E9 BF FD | 	call	#__system____builtin_strcpy
1da1c     A4 08 90 FD | 	jmp	#LR__2661
1da20                 | LR__2625
1da20     0C 4E 05 F1 | 	add	fp, #12
1da24     A7 20 02 FB | 	rdlong	local02, fp
1da28     0C 4E 85 F1 | 	sub	fp, #12
1da2c     10 13 02 F6 | 	mov	arg01, local02
1da30     94 1E B0 FD | 	call	#__system____builtin_ilogb
1da34     00 00 40 FF 
1da38     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1da3c     50 00 90 5D |  if_ne	jmp	#LR__2627
1da40     2C 4E 05 F1 | 	add	fp, #44
1da44     A7 1E 0A FB | 	rdlong	local01, fp wz
1da48     2C 4E 85 F1 | 	sub	fp, #44
1da4c     24 00 90 AD |  if_e	jmp	#LR__2626
1da50     C0 4E 05 F1 | 	add	fp, #192
1da54     A7 20 02 FB | 	rdlong	local02, fp
1da58     10 23 02 F6 | 	mov	local03, local02
1da5c     01 22 06 F1 | 	add	local03, #1
1da60     A7 22 62 FC | 	wrlong	local03, fp
1da64     94 4E 85 F1 | 	sub	fp, #148
1da68     A7 24 02 FB | 	rdlong	local04, fp
1da6c     2C 4E 85 F1 | 	sub	fp, #44
1da70     10 25 42 FC | 	wrbyte	local04, local02
1da74                 | LR__2626
1da74     C0 4E 05 F1 | 	add	fp, #192
1da78     A7 12 02 FB | 	rdlong	arg01, fp
1da7c     C0 4E 85 F1 | 	sub	fp, #192
1da80     5C 01 00 FF 
1da84     FE 15 06 F6 | 	mov	arg02, ##@LR__4562
1da88     74 E9 BF FD | 	call	#__system____builtin_strcpy
1da8c     34 08 90 FD | 	jmp	#LR__2661
1da90                 | LR__2627
1da90     10 4E 05 F1 | 	add	fp, #16
1da94     A7 1E 02 FB | 	rdlong	local01, fp
1da98     10 4E 85 F1 | 	sub	fp, #16
1da9c     67 1E 0E F2 | 	cmp	local01, #103 wz
1daa0     10 4E 05 51 |  if_ne	add	fp, #16
1daa4     A7 22 02 5B |  if_ne	rdlong	local03, fp
1daa8     10 4E 85 51 |  if_ne	sub	fp, #16
1daac     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1dab0     94 01 90 5D |  if_ne	jmp	#LR__2632
1dab4     0C 4E 05 F1 | 	add	fp, #12
1dab8     A7 12 02 FB | 	rdlong	arg01, fp
1dabc     08 4E 05 F1 | 	add	fp, #8
1dac0     A7 14 02 F6 | 	mov	arg02, fp
1dac4     0C 4E 05 F1 | 	add	fp, #12
1dac8     A7 16 02 F6 | 	mov	arg03, fp
1dacc     98 4E 05 F1 | 	add	fp, #152
1dad0     A7 18 02 FB | 	rdlong	arg04, fp
1dad4     9C 4E 85 F1 | 	sub	fp, #156
1dad8     A7 1A 02 FB | 	rdlong	arg05, fp
1dadc     1C 4E 85 F1 | 	sub	fp, #28
1dae0     50 40 B0 FD | 	call	#__system__disassemble_0432
1dae4     10 4E 05 F1 | 	add	fp, #16
1dae8     A7 1E 02 FB | 	rdlong	local01, fp
1daec     10 4E 85 F1 | 	sub	fp, #16
1daf0     23 1E 0E F2 | 	cmp	local01, #35 wz
1daf4     A0 00 90 5D |  if_ne	jmp	#LR__2629
1daf8     20 4E 05 F1 | 	add	fp, #32
1dafc     A7 1E 02 FB | 	rdlong	local01, fp
1db00     98 4E 05 F1 | 	add	fp, #152
1db04     A7 22 02 FB | 	rdlong	local03, fp
1db08     B8 4E 85 F1 | 	sub	fp, #184
1db0c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1db10     24 4E 05 11 |  if_a	add	fp, #36
1db14     A7 02 68 1C |  if_a	wrlong	#1, fp
1db18     24 4E 85 11 |  if_a	sub	fp, #36
1db1c     A4 01 90 1D |  if_a	jmp	#LR__2635
1db20     20 4E 05 F1 | 	add	fp, #32
1db24     A7 1E 02 FB | 	rdlong	local01, fp
1db28     20 4E 85 F1 | 	sub	fp, #32
1db2c     00 1E 56 F2 | 	cmps	local01, #0 wc
1db30     2C 00 90 3D |  if_ae	jmp	#LR__2628
1db34     B8 4E 05 F1 | 	add	fp, #184
1db38     A7 1E 02 FB | 	rdlong	local01, fp
1db3c     0F 1F 62 F6 | 	neg	local01, local01
1db40     98 4E 85 F1 | 	sub	fp, #152
1db44     A7 22 02 FB | 	rdlong	local03, fp
1db48     20 4E 85 F1 | 	sub	fp, #32
1db4c     0F 23 5A F2 | 	cmps	local03, local01 wcz
1db50     24 4E 05 E1 |  if_be	add	fp, #36
1db54     A7 02 68 EC |  if_be	wrlong	#1, fp
1db58     24 4E 85 E1 |  if_be	sub	fp, #36
1db5c     64 01 90 FD | 	jmp	#LR__2635
1db60                 | LR__2628
1db60     20 4E 05 F1 | 	add	fp, #32
1db64     A7 1E 02 FB | 	rdlong	local01, fp
1db68     20 4E 85 F1 | 	sub	fp, #32
1db6c     01 1E 56 F2 | 	cmps	local01, #1 wc
1db70     50 01 90 CD |  if_b	jmp	#LR__2635
1db74     B8 4E 05 F1 | 	add	fp, #184
1db78     A7 1E 02 FB | 	rdlong	local01, fp
1db7c     98 4E 85 F1 | 	sub	fp, #152
1db80     A7 22 02 FB | 	rdlong	local03, fp
1db84     11 1F 82 F1 | 	sub	local01, local03
1db88     98 4E 05 F1 | 	add	fp, #152
1db8c     A7 1E 62 FC | 	wrlong	local01, fp
1db90     B8 4E 85 F1 | 	sub	fp, #184
1db94     2C 01 90 FD | 	jmp	#LR__2635
1db98                 | LR__2629
1db98     00 1E 06 F6 | 	mov	local01, #0
1db9c     08 4E 05 F1 | 	add	fp, #8
1dba0     A7 20 02 FB | 	rdlong	local02, fp
1dba4     1C 20 46 F0 | 	shr	local02, #28
1dba8     01 20 0E F5 | 	and	local02, #1 wz
1dbac     01 1E 06 A6 |  if_e	mov	local01, #1
1dbb0     2C 4E 05 F1 | 	add	fp, #44
1dbb4     A7 1E 62 FC | 	wrlong	local01, fp
1dbb8     14 4E 85 F1 | 	sub	fp, #20
1dbbc     A7 1E 02 FB | 	rdlong	local01, fp
1dbc0     98 4E 05 F1 | 	add	fp, #152
1dbc4     A7 22 02 FB | 	rdlong	local03, fp
1dbc8     B8 4E 85 F1 | 	sub	fp, #184
1dbcc     11 1F 52 F2 | 	cmps	local01, local03 wc
1dbd0     18 00 90 3D |  if_ae	jmp	#LR__2630
1dbd4     20 4E 05 F1 | 	add	fp, #32
1dbd8     A7 24 02 FB | 	rdlong	local04, fp
1dbdc     20 4E 85 F1 | 	sub	fp, #32
1dbe0     FF FF 7F FF 
1dbe4     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1dbe8     10 00 90 3D |  if_ae	jmp	#LR__2631
1dbec                 | LR__2630
1dbec     24 4E 05 F1 | 	add	fp, #36
1dbf0     A7 02 68 FC | 	wrlong	#1, fp
1dbf4     24 4E 85 F1 | 	sub	fp, #36
1dbf8     C8 00 90 FD | 	jmp	#LR__2635
1dbfc                 | LR__2631
1dbfc     B8 4E 05 F1 | 	add	fp, #184
1dc00     A7 24 02 FB | 	rdlong	local04, fp
1dc04     98 4E 85 F1 | 	sub	fp, #152
1dc08     A7 22 02 FB | 	rdlong	local03, fp
1dc0c     11 25 82 F1 | 	sub	local04, local03
1dc10     98 4E 05 F1 | 	add	fp, #152
1dc14     A7 24 62 FC | 	wrlong	local04, fp
1dc18     AC 4E 85 F1 | 	sub	fp, #172
1dc1c     A7 12 02 FB | 	rdlong	arg01, fp
1dc20     08 4E 05 F1 | 	add	fp, #8
1dc24     A7 14 02 F6 | 	mov	arg02, fp
1dc28     0C 4E 05 F1 | 	add	fp, #12
1dc2c     A7 16 02 F6 | 	mov	arg03, fp
1dc30     12 19 62 F6 | 	neg	arg04, local04
1dc34     04 4E 85 F1 | 	sub	fp, #4
1dc38     A7 1A 02 FB | 	rdlong	arg05, fp
1dc3c     1C 4E 85 F1 | 	sub	fp, #28
1dc40     F0 3E B0 FD | 	call	#__system__disassemble_0432
1dc44     7C 00 90 FD | 	jmp	#LR__2635
1dc48                 | LR__2632
1dc48     24 4E 05 F1 | 	add	fp, #36
1dc4c     A7 1E 0A FB | 	rdlong	local01, fp wz
1dc50     24 4E 85 F1 | 	sub	fp, #36
1dc54     34 00 90 AD |  if_e	jmp	#LR__2633
1dc58     0C 4E 05 F1 | 	add	fp, #12
1dc5c     A7 12 02 FB | 	rdlong	arg01, fp
1dc60     08 4E 05 F1 | 	add	fp, #8
1dc64     A7 14 02 F6 | 	mov	arg02, fp
1dc68     0C 4E 05 F1 | 	add	fp, #12
1dc6c     A7 16 02 F6 | 	mov	arg03, fp
1dc70     98 4E 05 F1 | 	add	fp, #152
1dc74     A7 18 02 FB | 	rdlong	arg04, fp
1dc78     9C 4E 85 F1 | 	sub	fp, #156
1dc7c     A7 1A 02 FB | 	rdlong	arg05, fp
1dc80     1C 4E 85 F1 | 	sub	fp, #28
1dc84     AC 3E B0 FD | 	call	#__system__disassemble_0432
1dc88     38 00 90 FD | 	jmp	#LR__2634
1dc8c                 | LR__2633
1dc8c     0C 4E 05 F1 | 	add	fp, #12
1dc90     A7 12 02 FB | 	rdlong	arg01, fp
1dc94     08 4E 05 F1 | 	add	fp, #8
1dc98     A7 14 02 F6 | 	mov	arg02, fp
1dc9c     0C 4E 05 F1 | 	add	fp, #12
1dca0     A7 16 02 F6 | 	mov	arg03, fp
1dca4     98 4E 05 F1 | 	add	fp, #152
1dca8     A7 24 02 FB | 	rdlong	local04, fp
1dcac     01 24 06 F1 | 	add	local04, #1
1dcb0     12 19 62 F6 | 	neg	arg04, local04
1dcb4     9C 4E 85 F1 | 	sub	fp, #156
1dcb8     A7 1A 02 FB | 	rdlong	arg05, fp
1dcbc     1C 4E 85 F1 | 	sub	fp, #28
1dcc0     70 3E B0 FD | 	call	#__system__disassemble_0432
1dcc4                 | LR__2634
1dcc4                 | LR__2635
1dcc4     1C 4E 05 F1 | 	add	fp, #28
1dcc8     A7 1E 02 FB | 	rdlong	local01, fp
1dccc     1C 4E 85 F1 | 	sub	fp, #28
1dcd0     02 1E 0E F2 | 	cmp	local01, #2 wz
1dcd4     4C 00 90 5D |  if_ne	jmp	#LR__2638
1dcd8     1C 4E 05 F1 | 	add	fp, #28
1dcdc     A7 20 68 FC | 	wrlong	#16, fp
1dce0     1C 4E 85 F1 | 	sub	fp, #28
1dce4                 | LR__2636
1dce4     14 4E 05 F1 | 	add	fp, #20
1dce8     A7 1E 0A FB | 	rdlong	local01, fp wz
1dcec     14 4E 85 F1 | 	sub	fp, #20
1dcf0     30 00 90 AD |  if_e	jmp	#LR__2637
1dcf4     14 4E 05 F1 | 	add	fp, #20
1dcf8     A7 22 02 FB | 	rdlong	local03, fp
1dcfc     14 4E 85 F1 | 	sub	fp, #20
1dd00     00 80 00 FF 
1dd04     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1dd08     18 00 90 3D |  if_ae	jmp	#LR__2637
1dd0c     14 4E 05 F1 | 	add	fp, #20
1dd10     A7 1E 02 FB | 	rdlong	local01, fp
1dd14     01 1E 66 F0 | 	shl	local01, #1
1dd18     A7 1E 62 FC | 	wrlong	local01, fp
1dd1c     14 4E 85 F1 | 	sub	fp, #20
1dd20     C0 FF 9F FD | 	jmp	#LR__2636
1dd24                 | LR__2637
1dd24                 | LR__2638
1dd24     70 4E 05 F1 | 	add	fp, #112
1dd28     A7 12 02 F6 | 	mov	arg01, fp
1dd2c     5C 4E 85 F1 | 	sub	fp, #92
1dd30     A7 14 02 FB | 	rdlong	arg02, fp
1dd34     08 4E 05 F1 | 	add	fp, #8
1dd38     A7 16 02 FB | 	rdlong	arg03, fp
1dd3c     A0 4E 05 F1 | 	add	fp, #160
1dd40     A7 1A 02 FB | 	rdlong	arg05, fp
1dd44     BC 4E 85 F1 | 	sub	fp, #188
1dd48     01 18 06 F6 | 	mov	arg04, #1
1dd4c     70 3D B0 FD | 	call	#__system___uitoa
1dd50     58 4E 05 F1 | 	add	fp, #88
1dd54     A7 FA 61 FC | 	wrlong	result1, fp
1dd58     38 4E 85 F1 | 	sub	fp, #56
1dd5c     A7 1E 02 FB | 	rdlong	local01, fp
1dd60     20 4E 85 F1 | 	sub	fp, #32
1dd64     00 1E 56 F2 | 	cmps	local01, #0 wc
1dd68     50 00 90 3D |  if_ae	jmp	#LR__2639
1dd6c     60 4E 05 F1 | 	add	fp, #96
1dd70     A7 5A 68 FC | 	wrlong	#45, fp
1dd74     50 4E 05 F1 | 	add	fp, #80
1dd78     A7 12 02 F6 | 	mov	arg01, fp
1dd7c     90 4E 85 F1 | 	sub	fp, #144
1dd80     A7 22 02 FB | 	rdlong	local03, fp
1dd84     11 15 62 F6 | 	neg	arg02, local03
1dd88     18 4E 05 F1 | 	add	fp, #24
1dd8c     A7 18 02 FB | 	rdlong	arg04, fp
1dd90     84 4E 05 F1 | 	add	fp, #132
1dd94     A7 28 02 FB | 	rdlong	local06, fp
1dd98     BC 4E 85 F1 | 	sub	fp, #188
1dd9c     14 25 02 F6 | 	mov	local04, local06
1dda0     0A 16 06 F6 | 	mov	arg03, #10
1dda4     12 1B 02 F6 | 	mov	arg05, local04
1dda8     14 3D B0 FD | 	call	#__system___uitoa
1ddac     5C 4E 05 F1 | 	add	fp, #92
1ddb0     A7 FA 61 FC | 	wrlong	result1, fp
1ddb4     5C 4E 85 F1 | 	sub	fp, #92
1ddb8     48 00 90 FD | 	jmp	#LR__2640
1ddbc                 | LR__2639
1ddbc     60 4E 05 F1 | 	add	fp, #96
1ddc0     A7 56 68 FC | 	wrlong	#43, fp
1ddc4     50 4E 05 F1 | 	add	fp, #80
1ddc8     A7 12 02 F6 | 	mov	arg01, fp
1ddcc     90 4E 85 F1 | 	sub	fp, #144
1ddd0     A7 14 02 FB | 	rdlong	arg02, fp
1ddd4     18 4E 05 F1 | 	add	fp, #24
1ddd8     A7 18 02 FB | 	rdlong	arg04, fp
1dddc     84 4E 05 F1 | 	add	fp, #132
1dde0     A7 28 02 FB | 	rdlong	local06, fp
1dde4     BC 4E 85 F1 | 	sub	fp, #188
1dde8     14 25 02 F6 | 	mov	local04, local06
1ddec     0A 16 06 F6 | 	mov	arg03, #10
1ddf0     12 1B 02 F6 | 	mov	arg05, local04
1ddf4     C8 3C B0 FD | 	call	#__system___uitoa
1ddf8     5C 4E 05 F1 | 	add	fp, #92
1ddfc     A7 FA 61 FC | 	wrlong	result1, fp
1de00     5C 4E 85 F1 | 	sub	fp, #92
1de04                 | LR__2640
1de04     24 4E 05 F1 | 	add	fp, #36
1de08     A7 1E 0A FB | 	rdlong	local01, fp wz
1de0c     24 4E 85 F1 | 	sub	fp, #36
1de10     2C 00 90 AD |  if_e	jmp	#LR__2641
1de14     50 4E 05 F1 | 	add	fp, #80
1de18     A7 00 68 FC | 	wrlong	#0, fp
1de1c     04 4E 85 F1 | 	sub	fp, #4
1de20     A7 00 68 FC | 	wrlong	#0, fp
1de24     6C 4E 05 F1 | 	add	fp, #108
1de28     A7 1E 02 FB | 	rdlong	local01, fp
1de2c     01 1E 06 F1 | 	add	local01, #1
1de30     64 4E 85 F1 | 	sub	fp, #100
1de34     A7 1E 62 FC | 	wrlong	local01, fp
1de38     54 4E 85 F1 | 	sub	fp, #84
1de3c     88 00 90 FD | 	jmp	#LR__2644
1de40                 | LR__2641
1de40     20 4E 05 F1 | 	add	fp, #32
1de44     A7 1E 02 FB | 	rdlong	local01, fp
1de48     20 4E 85 F1 | 	sub	fp, #32
1de4c     00 1E 56 F2 | 	cmps	local01, #0 wc
1de50     40 00 90 3D |  if_ae	jmp	#LR__2642
1de54     20 4E 05 F1 | 	add	fp, #32
1de58     A7 20 02 FB | 	rdlong	local02, fp
1de5c     30 4E 05 F1 | 	add	fp, #48
1de60     A7 20 62 FC | 	wrlong	local02, fp
1de64     04 4E 85 F1 | 	sub	fp, #4
1de68     A7 20 62 FC | 	wrlong	local02, fp
1de6c     2C 4E 85 F1 | 	sub	fp, #44
1de70     A7 1E 02 FB | 	rdlong	local01, fp
1de74     98 4E 05 F1 | 	add	fp, #152
1de78     A7 22 02 FB | 	rdlong	local03, fp
1de7c     11 1F 02 F1 | 	add	local01, local03
1de80     01 1E 06 F1 | 	add	local01, #1
1de84     64 4E 85 F1 | 	sub	fp, #100
1de88     A7 1E 62 FC | 	wrlong	local01, fp
1de8c     54 4E 85 F1 | 	sub	fp, #84
1de90     34 00 90 FD | 	jmp	#LR__2643
1de94                 | LR__2642
1de94     4C 4E 05 F1 | 	add	fp, #76
1de98     A7 00 68 FC | 	wrlong	#0, fp
1de9c     2C 4E 85 F1 | 	sub	fp, #44
1dea0     A7 1E 02 FB | 	rdlong	local01, fp
1dea4     30 4E 05 F1 | 	add	fp, #48
1dea8     A7 1E 62 FC | 	wrlong	local01, fp
1deac     68 4E 05 F1 | 	add	fp, #104
1deb0     A7 22 02 FB | 	rdlong	local03, fp
1deb4     11 1F 02 F1 | 	add	local01, local03
1deb8     01 1E 06 F1 | 	add	local01, #1
1debc     64 4E 85 F1 | 	sub	fp, #100
1dec0     A7 1E 62 FC | 	wrlong	local01, fp
1dec4     54 4E 85 F1 | 	sub	fp, #84
1dec8                 | LR__2643
1dec8                 | LR__2644
1dec8     54 4E 05 F1 | 	add	fp, #84
1decc     A7 1E 02 FB | 	rdlong	local01, fp
1ded0     08 4E 85 F1 | 	sub	fp, #8
1ded4     A7 22 02 FB | 	rdlong	local03, fp
1ded8     11 1F 82 F1 | 	sub	local01, local03
1dedc     01 1E 06 F1 | 	add	local01, #1
1dee0     24 4E 85 F1 | 	sub	fp, #36
1dee4     A7 1E 62 FC | 	wrlong	local01, fp
1dee8     04 4E 05 F1 | 	add	fp, #4
1deec     A7 1E 0A FB | 	rdlong	local01, fp wz
1def0     2C 4E 85 F1 | 	sub	fp, #44
1def4     28 4E 05 51 |  if_ne	add	fp, #40
1def8     A7 22 02 5B |  if_ne	rdlong	local03, fp
1defc     01 22 06 51 |  if_ne	add	local03, #1
1df00     A7 22 62 5C |  if_ne	wrlong	local03, fp
1df04     28 4E 85 51 |  if_ne	sub	fp, #40
1df08     1C 4E 05 F1 | 	add	fp, #28
1df0c     A7 1E 02 FB | 	rdlong	local01, fp
1df10     1C 4E 85 F1 | 	sub	fp, #28
1df14     10 1E 0E F2 | 	cmp	local01, #16 wz
1df18     28 4E 05 A1 |  if_e	add	fp, #40
1df1c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1df20     02 1E 06 A1 |  if_e	add	local01, #2
1df24     A7 1E 62 AC |  if_e	wrlong	local01, fp
1df28     28 4E 85 A1 |  if_e	sub	fp, #40
1df2c     24 4E 05 F1 | 	add	fp, #36
1df30     A7 1E 0A FB | 	rdlong	local01, fp wz
1df34     24 4E 85 F1 | 	sub	fp, #36
1df38     28 00 90 AD |  if_e	jmp	#LR__2645
1df3c     28 4E 05 F1 | 	add	fp, #40
1df40     A7 1E 02 FB | 	rdlong	local01, fp
1df44     02 22 06 F6 | 	mov	local03, #2
1df48     34 4E 05 F1 | 	add	fp, #52
1df4c     A7 26 02 FB | 	rdlong	local05, fp
1df50     13 23 02 F1 | 	add	local03, local05
1df54     11 1F 02 F1 | 	add	local01, local03
1df58     34 4E 85 F1 | 	sub	fp, #52
1df5c     A7 1E 62 FC | 	wrlong	local01, fp
1df60     28 4E 85 F1 | 	sub	fp, #40
1df64                 | LR__2645
1df64     28 4E 05 F1 | 	add	fp, #40
1df68     A7 1E 02 FB | 	rdlong	local01, fp
1df6c     28 4E 85 F1 | 	sub	fp, #40
1df70     41 1E 56 F2 | 	cmps	local01, #65 wc
1df74     01 FA 65 36 |  if_ae	neg	result1, #1
1df78     08 05 90 3D |  if_ae	jmp	#LR__2673
1df7c     3C 4E 05 F1 | 	add	fp, #60
1df80     A7 1E 0A FB | 	rdlong	local01, fp wz
1df84     3C 4E 85 F1 | 	sub	fp, #60
1df88     60 00 90 AD |  if_e	jmp	#LR__2646
1df8c     C0 4E 05 F1 | 	add	fp, #192
1df90     A7 12 02 FB | 	rdlong	arg01, fp
1df94     94 4E 85 F1 | 	sub	fp, #148
1df98     A7 14 02 FB | 	rdlong	arg02, fp
1df9c     14 4E 05 F1 | 	add	fp, #20
1dfa0     A7 16 02 FB | 	rdlong	arg03, fp
1dfa4     40 4E 85 F1 | 	sub	fp, #64
1dfa8     7C 3D B0 FD | 	call	#__system__emitsign_0434
1dfac     18 4F 05 F1 | 	add	fp, #280
1dfb0     A7 FA 61 FC | 	wrlong	result1, fp
1dfb4     18 4F 85 F1 | 	sub	fp, #280
1dfb8     00 FA 55 F2 | 	cmps	result1, #0 wc
1dfbc     18 4F 05 C1 |  if_b	add	fp, #280
1dfc0     A7 FA 01 CB |  if_b	rdlong	result1, fp
1dfc4     18 4F 85 C1 |  if_b	sub	fp, #280
1dfc8     B8 04 90 CD |  if_b	jmp	#LR__2673
1dfcc     C0 4E 05 F1 | 	add	fp, #192
1dfd0     A7 1E 02 FB | 	rdlong	local01, fp
1dfd4     58 4E 05 F1 | 	add	fp, #88
1dfd8     A7 22 02 FB | 	rdlong	local03, fp
1dfdc     11 1F 02 F1 | 	add	local01, local03
1dfe0     58 4E 85 F1 | 	sub	fp, #88
1dfe4     A7 1E 62 FC | 	wrlong	local01, fp
1dfe8     C0 4E 85 F1 | 	sub	fp, #192
1dfec                 | LR__2646
1dfec     4C 4E 05 F1 | 	add	fp, #76
1dff0     A7 1E 02 FB | 	rdlong	local01, fp
1dff4     34 4E 85 F1 | 	sub	fp, #52
1dff8     A7 1E 62 FC | 	wrlong	local01, fp
1dffc     18 4E 85 F1 | 	sub	fp, #24
1e000     97 9E 48 FB | 	callpa	#(@LR__2652-@LR__2647)>>2,fcache_load_ptr_
1e004                 | LR__2647
1e004     18 4E 05 F1 | 	add	fp, #24
1e008     A7 20 02 FB | 	rdlong	local02, fp
1e00c     3C 4E 05 F1 | 	add	fp, #60
1e010     A7 26 02 FB | 	rdlong	local05, fp
1e014     54 4E 85 F1 | 	sub	fp, #84
1e018     13 21 52 F2 | 	cmps	local02, local05 wc
1e01c     20 01 90 3D |  if_ae	jmp	#LR__2653
1e020     18 4E 05 F1 | 	add	fp, #24
1e024     A7 28 02 FB | 	rdlong	local06, fp
1e028     18 4E 85 F1 | 	sub	fp, #24
1e02c     00 28 56 F2 | 	cmps	local06, #0 wc
1e030     58 00 90 CD |  if_b	jmp	#LR__2648
1e034     18 4E 05 F1 | 	add	fp, #24
1e038     A7 28 02 FB | 	rdlong	local06, fp
1e03c     40 4E 05 F1 | 	add	fp, #64
1e040     A7 2A 02 FB | 	rdlong	local07, fp
1e044     58 4E 85 F1 | 	sub	fp, #88
1e048     15 29 52 F2 | 	cmps	local06, local07 wc
1e04c     3C 00 90 3D |  if_ae	jmp	#LR__2648
1e050     C0 4E 05 F1 | 	add	fp, #192
1e054     A7 2C 02 FB | 	rdlong	local08, fp
1e058     16 2B 02 F6 | 	mov	local07, local08
1e05c     01 2A 06 F1 | 	add	local07, #1
1e060     A7 2A 62 FC | 	wrlong	local07, fp
1e064     A8 4E 85 F1 | 	sub	fp, #168
1e068     A7 2A 02 FB | 	rdlong	local07, fp
1e06c     15 2F 02 F6 | 	mov	local09, local07
1e070     58 4E 05 F1 | 	add	fp, #88
1e074     A7 30 02 F6 | 	mov	local10, fp
1e078     A7 2E 02 F1 | 	add	local09, fp
1e07c     17 33 C2 FA | 	rdbyte	local11, local09
1e080     16 33 42 FC | 	wrbyte	local11, local08
1e084     70 4E 85 F1 | 	sub	fp, #112
1e088     20 00 90 FD | 	jmp	#LR__2649
1e08c                 | LR__2648
1e08c     C0 4E 05 F1 | 	add	fp, #192
1e090     A7 2C 02 FB | 	rdlong	local08, fp
1e094     16 2F 02 F6 | 	mov	local09, local08
1e098     01 2E 06 F1 | 	add	local09, #1
1e09c     A7 2E 62 FC | 	wrlong	local09, fp
1e0a0     C0 4E 85 F1 | 	sub	fp, #192
1e0a4     30 2E 06 F6 | 	mov	local09, #48
1e0a8     16 61 48 FC | 	wrbyte	#48, local08
1e0ac                 | LR__2649
1e0ac     18 4E 05 F1 | 	add	fp, #24
1e0b0     A7 28 02 FB | 	rdlong	local06, fp
1e0b4     38 4E 05 F1 | 	add	fp, #56
1e0b8     A7 34 02 FB | 	rdlong	local12, fp
1e0bc     50 4E 85 F1 | 	sub	fp, #80
1e0c0     1A 29 0A F2 | 	cmp	local06, local12 wz
1e0c4     5C 00 90 5D |  if_ne	jmp	#LR__2651
1e0c8     10 4F 05 F1 | 	add	fp, #272
1e0cc     A7 2A 02 FB | 	rdlong	local07, fp
1e0d0     10 4F 85 F1 | 	sub	fp, #272
1e0d4     15 2F 0A F6 | 	mov	local09, local07 wz
1e0d8     28 00 90 5D |  if_ne	jmp	#LR__2650
1e0dc     54 4E 05 F1 | 	add	fp, #84
1e0e0     A7 32 02 FB | 	rdlong	local11, fp
1e0e4     19 31 02 F6 | 	mov	local10, local11
1e0e8     01 30 86 F1 | 	sub	local10, #1
1e0ec     3C 4E 85 F1 | 	sub	fp, #60
1e0f0     A7 36 02 FB | 	rdlong	local13, fp
1e0f4     18 4E 85 F1 | 	sub	fp, #24
1e0f8     1B 39 02 F6 | 	mov	local14, local13
1e0fc     18 39 52 F2 | 	cmps	local14, local10 wc
1e100     20 00 90 3D |  if_ae	jmp	#LR__2651
1e104                 | LR__2650
1e104     C0 4E 05 F1 | 	add	fp, #192
1e108     A7 2C 02 FB | 	rdlong	local08, fp
1e10c     16 35 02 F6 | 	mov	local12, local08
1e110     01 34 06 F1 | 	add	local12, #1
1e114     A7 34 62 FC | 	wrlong	local12, fp
1e118     C0 4E 85 F1 | 	sub	fp, #192
1e11c     2E 2E 06 F6 | 	mov	local09, #46
1e120     16 5D 48 FC | 	wrbyte	#46, local08
1e124                 | LR__2651
1e124     18 4E 05 F1 | 	add	fp, #24
1e128     A7 3A 02 FB | 	rdlong	local15, fp
1e12c     1D 35 02 F6 | 	mov	local12, local15
1e130     01 34 06 F1 | 	add	local12, #1
1e134     A7 34 62 FC | 	wrlong	local12, fp
1e138     18 4E 85 F1 | 	sub	fp, #24
1e13c     C4 FE 9F FD | 	jmp	#LR__2647
1e140                 | LR__2652
1e140                 | LR__2653
1e140     34 4E 05 F1 | 	add	fp, #52
1e144     A7 1E 0A FB | 	rdlong	local01, fp wz
1e148     34 4E 85 F1 | 	sub	fp, #52
1e14c     A0 00 90 AD |  if_e	jmp	#LR__2657
1e150     C0 4E 05 F1 | 	add	fp, #192
1e154     A7 1E 02 FB | 	rdlong	local01, fp
1e158     01 1E 86 F1 | 	sub	local01, #1
1e15c     A7 1E 62 FC | 	wrlong	local01, fp
1e160     C0 4E 85 F1 | 	sub	fp, #192
1e164     97 26 48 FB | 	callpa	#(@LR__2655-@LR__2654)>>2,fcache_load_ptr_
1e168                 | LR__2654
1e168     C0 4E 05 F1 | 	add	fp, #192
1e16c     A7 1E 02 FB | 	rdlong	local01, fp
1e170     04 4E 05 F1 | 	add	fp, #4
1e174     A7 22 02 FB | 	rdlong	local03, fp
1e178     C4 4E 85 F1 | 	sub	fp, #196
1e17c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1e180     30 00 90 ED |  if_be	jmp	#LR__2656
1e184     C0 4E 05 F1 | 	add	fp, #192
1e188     A7 28 02 FB | 	rdlong	local06, fp
1e18c     C0 4E 85 F1 | 	sub	fp, #192
1e190     14 25 C2 FA | 	rdbyte	local04, local06
1e194     30 24 0E F2 | 	cmp	local04, #48 wz
1e198     18 00 90 5D |  if_ne	jmp	#LR__2656
1e19c     C0 4E 05 F1 | 	add	fp, #192
1e1a0     A7 1E 02 FB | 	rdlong	local01, fp
1e1a4     01 1E 86 F1 | 	sub	local01, #1
1e1a8     A7 1E 62 FC | 	wrlong	local01, fp
1e1ac     C0 4E 85 F1 | 	sub	fp, #192
1e1b0     B4 FF 9F FD | 	jmp	#LR__2654
1e1b4                 | LR__2655
1e1b4                 | LR__2656
1e1b4     C0 4E 05 F1 | 	add	fp, #192
1e1b8     A7 20 02 FB | 	rdlong	local02, fp
1e1bc     C0 4E 85 F1 | 	sub	fp, #192
1e1c0     10 1F C2 FA | 	rdbyte	local01, local02
1e1c4     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e1c8     C0 4E 05 A1 |  if_e	add	fp, #192
1e1cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
1e1d0     01 1E 86 A1 |  if_e	sub	local01, #1
1e1d4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1e1d8     C0 4E 85 A1 |  if_e	sub	fp, #192
1e1dc     C0 4E 05 F1 | 	add	fp, #192
1e1e0     A7 22 02 FB | 	rdlong	local03, fp
1e1e4     01 22 06 F1 | 	add	local03, #1
1e1e8     A7 22 62 FC | 	wrlong	local03, fp
1e1ec     C0 4E 85 F1 | 	sub	fp, #192
1e1f0                 | LR__2657
1e1f0     24 4E 05 F1 | 	add	fp, #36
1e1f4     A7 1E 0A FB | 	rdlong	local01, fp wz
1e1f8     24 4E 85 F1 | 	sub	fp, #36
1e1fc     B4 00 90 AD |  if_e	jmp	#LR__2660
1e200     C0 4E 05 F1 | 	add	fp, #192
1e204     A7 20 02 FB | 	rdlong	local02, fp
1e208     10 23 02 F6 | 	mov	local03, local02
1e20c     01 22 06 F1 | 	add	local03, #1
1e210     A7 22 62 FC | 	wrlong	local03, fp
1e214     90 4E 85 F1 | 	sub	fp, #144
1e218     A7 24 02 FB | 	rdlong	local04, fp
1e21c     10 25 42 FC | 	wrbyte	local04, local02
1e220     90 4E 05 F1 | 	add	fp, #144
1e224     A7 20 02 FB | 	rdlong	local02, fp
1e228     10 23 02 F6 | 	mov	local03, local02
1e22c     01 22 06 F1 | 	add	local03, #1
1e230     A7 22 62 FC | 	wrlong	local03, fp
1e234     60 4E 85 F1 | 	sub	fp, #96
1e238     A7 24 02 FB | 	rdlong	local04, fp
1e23c     10 25 42 FC | 	wrbyte	local04, local02
1e240     48 4E 85 F1 | 	sub	fp, #72
1e244     A7 00 68 FC | 	wrlong	#0, fp
1e248     18 4E 85 F1 | 	sub	fp, #24
1e24c                 | LR__2658
1e24c     18 4E 05 F1 | 	add	fp, #24
1e250     A7 20 02 FB | 	rdlong	local02, fp
1e254     44 4E 05 F1 | 	add	fp, #68
1e258     A7 26 02 FB | 	rdlong	local05, fp
1e25c     5C 4E 85 F1 | 	sub	fp, #92
1e260     13 21 52 F2 | 	cmps	local02, local05 wc
1e264     4C 00 90 3D |  if_ae	jmp	#LR__2659
1e268     C0 4E 05 F1 | 	add	fp, #192
1e26c     A7 2C 02 FB | 	rdlong	local08, fp
1e270     16 35 02 F6 | 	mov	local12, local08
1e274     01 34 06 F1 | 	add	local12, #1
1e278     A7 34 62 FC | 	wrlong	local12, fp
1e27c     A8 4E 85 F1 | 	sub	fp, #168
1e280     A7 2A 02 FB | 	rdlong	local07, fp
1e284     15 2F 02 F6 | 	mov	local09, local07
1e288     98 4E 05 F1 | 	add	fp, #152
1e28c     A7 30 02 F6 | 	mov	local10, fp
1e290     A7 2E 02 F1 | 	add	local09, fp
1e294     17 33 C2 FA | 	rdbyte	local11, local09
1e298     16 33 42 FC | 	wrbyte	local11, local08
1e29c     98 4E 85 F1 | 	sub	fp, #152
1e2a0     A7 34 02 FB | 	rdlong	local12, fp
1e2a4     01 34 06 F1 | 	add	local12, #1
1e2a8     A7 34 62 FC | 	wrlong	local12, fp
1e2ac     18 4E 85 F1 | 	sub	fp, #24
1e2b0     98 FF 9F FD | 	jmp	#LR__2658
1e2b4                 | LR__2659
1e2b4                 | LR__2660
1e2b4     C0 4E 05 F1 | 	add	fp, #192
1e2b8     A7 1E 02 FB | 	rdlong	local01, fp
1e2bc     C0 4E 85 F1 | 	sub	fp, #192
1e2c0     0F 01 48 FC | 	wrbyte	#0, local01
1e2c4                 | LR__2661
1e2c4     6C 4E 05 F1 | 	add	fp, #108
1e2c8     A7 1E 0A FB | 	rdlong	local01, fp wz
1e2cc     6C 4E 85 F1 | 	sub	fp, #108
1e2d0     90 01 90 AD |  if_e	jmp	#LR__2672
1e2d4     48 4E 05 F1 | 	add	fp, #72
1e2d8     A7 22 0A FB | 	rdlong	local03, fp wz
1e2dc     48 4E 85 F1 | 	sub	fp, #72
1e2e0     80 01 90 AD |  if_e	jmp	#LR__2672
1e2e4     C4 4E 05 F1 | 	add	fp, #196
1e2e8     A7 12 02 FB | 	rdlong	arg01, fp
1e2ec     C4 4E 85 F1 | 	sub	fp, #196
1e2f0     09 3D 02 F6 | 	mov	local16, arg01
1e2f4     97 06 48 FB | 	callpa	#(@LR__2663-@LR__2662)>>2,fcache_load_ptr_
1e2f8                 | LR__2662
1e2f8     1E FB C9 FA | 	rdbyte	result1, local16 wz
1e2fc     01 3C 06 51 |  if_ne	add	local16, #1
1e300     F4 FF 9F 5D |  if_ne	jmp	#LR__2662
1e304                 | LR__2663
1e304     09 3D 82 F1 | 	sub	local16, arg01
1e308     1E 25 02 F6 | 	mov	local04, local16
1e30c     6C 4E 05 F1 | 	add	fp, #108
1e310     A7 28 02 FB | 	rdlong	local06, fp
1e314     6C 4E 85 F1 | 	sub	fp, #108
1e318     14 25 5A F2 | 	cmps	local04, local06 wcz
1e31c     44 01 90 ED |  if_be	jmp	#LR__2672
1e320     C4 4E 05 F1 | 	add	fp, #196
1e324     A7 1E 02 FB | 	rdlong	local01, fp
1e328     5C 4E 05 F1 | 	add	fp, #92
1e32c     A7 1E 62 FC | 	wrlong	local01, fp
1e330     FC 4E 85 F1 | 	sub	fp, #252
1e334     A7 1E 0A FB | 	rdlong	local01, fp wz
1e338     24 4E 85 F1 | 	sub	fp, #36
1e33c     20 00 90 AD |  if_e	jmp	#LR__2664
1e340     B8 4E 05 F1 | 	add	fp, #184
1e344     A7 00 68 FC | 	wrlong	#0, fp
1e348     4C 4E 85 F1 | 	sub	fp, #76
1e34c     A7 1E 02 FB | 	rdlong	local01, fp
1e350     B0 4E 05 F1 | 	add	fp, #176
1e354     A7 1E 62 FC | 	wrlong	local01, fp
1e358     1C 4F 85 F1 | 	sub	fp, #284
1e35c     24 00 90 FD | 	jmp	#LR__2665
1e360                 | LR__2664
1e360     6C 4E 05 F1 | 	add	fp, #108
1e364     A7 1E 02 FB | 	rdlong	local01, fp
1e368     01 1E 86 F1 | 	sub	local01, #1
1e36c     4C 4E 05 F1 | 	add	fp, #76
1e370     A7 22 02 FB | 	rdlong	local03, fp
1e374     11 1F 82 F1 | 	sub	local01, local03
1e378     64 4E 05 F1 | 	add	fp, #100
1e37c     A7 1E 62 FC | 	wrlong	local01, fp
1e380     1C 4F 85 F1 | 	sub	fp, #284
1e384                 | LR__2665
1e384     97 20 48 FB | 	callpa	#(@LR__2667-@LR__2666)>>2,fcache_load_ptr_
1e388                 | LR__2666
1e388     1C 4F 05 F1 | 	add	fp, #284
1e38c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e390     1C 4F 85 F1 | 	sub	fp, #284
1e394     30 00 90 AD |  if_e	jmp	#LR__2668
1e398     20 4F 05 F1 | 	add	fp, #288
1e39c     A7 20 02 FB | 	rdlong	local02, fp
1e3a0     10 23 02 F6 | 	mov	local03, local02
1e3a4     01 22 06 F1 | 	add	local03, #1
1e3a8     A7 22 62 FC | 	wrlong	local03, fp
1e3ac     10 55 48 FC | 	wrbyte	#42, local02
1e3b0     04 4E 85 F1 | 	sub	fp, #4
1e3b4     A7 1E 02 FB | 	rdlong	local01, fp
1e3b8     01 1E 86 F1 | 	sub	local01, #1
1e3bc     A7 1E 62 FC | 	wrlong	local01, fp
1e3c0     1C 4F 85 F1 | 	sub	fp, #284
1e3c4     C0 FF 9F FD | 	jmp	#LR__2666
1e3c8                 | LR__2667
1e3c8                 | LR__2668
1e3c8     B8 4E 05 F1 | 	add	fp, #184
1e3cc     A7 1E 0A FB | 	rdlong	local01, fp wz
1e3d0     B8 4E 85 F1 | 	sub	fp, #184
1e3d4     70 00 90 AD |  if_e	jmp	#LR__2671
1e3d8     20 4F 05 F1 | 	add	fp, #288
1e3dc     A7 20 02 FB | 	rdlong	local02, fp
1e3e0     10 23 02 F6 | 	mov	local03, local02
1e3e4     01 22 06 F1 | 	add	local03, #1
1e3e8     A7 22 62 FC | 	wrlong	local03, fp
1e3ec     10 5D 48 FC | 	wrbyte	#46, local02
1e3f0     04 4E 85 F1 | 	sub	fp, #4
1e3f4     A7 00 68 FC | 	wrlong	#0, fp
1e3f8     1C 4F 85 F1 | 	sub	fp, #284
1e3fc                 | LR__2669
1e3fc     1C 4F 05 F1 | 	add	fp, #284
1e400     A7 20 02 FB | 	rdlong	local02, fp
1e404     64 4E 85 F1 | 	sub	fp, #100
1e408     A7 26 02 FB | 	rdlong	local05, fp
1e40c     B8 4E 85 F1 | 	sub	fp, #184
1e410     13 21 52 F2 | 	cmps	local02, local05 wc
1e414     30 00 90 3D |  if_ae	jmp	#LR__2670
1e418     20 4F 05 F1 | 	add	fp, #288
1e41c     A7 2C 02 FB | 	rdlong	local08, fp
1e420     16 35 02 F6 | 	mov	local12, local08
1e424     01 34 06 F1 | 	add	local12, #1
1e428     A7 34 62 FC | 	wrlong	local12, fp
1e42c     16 55 48 FC | 	wrbyte	#42, local08
1e430     04 4E 85 F1 | 	sub	fp, #4
1e434     A7 34 02 FB | 	rdlong	local12, fp
1e438     01 34 06 F1 | 	add	local12, #1
1e43c     A7 34 62 FC | 	wrlong	local12, fp
1e440     1C 4F 85 F1 | 	sub	fp, #284
1e444     B4 FF 9F FD | 	jmp	#LR__2669
1e448                 | LR__2670
1e448                 | LR__2671
1e448     20 4F 05 F1 | 	add	fp, #288
1e44c     A7 20 02 FB | 	rdlong	local02, fp
1e450     10 23 02 F6 | 	mov	local03, local02
1e454     01 22 06 F1 | 	add	local03, #1
1e458     A7 22 62 FC | 	wrlong	local03, fp
1e45c     20 4F 85 F1 | 	sub	fp, #288
1e460     10 01 48 FC | 	wrbyte	#0, local02
1e464                 | LR__2672
1e464     04 4E 05 F1 | 	add	fp, #4
1e468     A7 12 02 FB | 	rdlong	arg01, fp
1e46c     04 4E 05 F1 | 	add	fp, #4
1e470     A7 14 02 FB | 	rdlong	arg02, fp
1e474     BC 4E 05 F1 | 	add	fp, #188
1e478     A7 16 02 FB | 	rdlong	arg03, fp
1e47c     C4 4E 85 F1 | 	sub	fp, #196
1e480     C4 EE BF FD | 	call	#__system___fmtstr
1e484                 | LR__2673
1e484     A7 F0 03 F6 | 	mov	ptra, fp
1e488     B2 00 A0 FD | 	call	#popregs_
1e48c                 | __system___fmtfloat_ret
1e48c     2D 00 64 FD | 	ret
1e490                 | 
1e490                 | __system__Left_S
1e490     04 4A 05 F6 | 	mov	COUNT_, #4
1e494     A8 00 A0 FD | 	call	#pushregs_
1e498     09 1F 02 F6 | 	mov	local01, arg01
1e49c     0A 21 02 F6 | 	mov	local02, arg02
1e4a0     01 20 56 F2 | 	cmps	local02, #1 wc
1e4a4     5D 01 00 CF 
1e4a8     02 FA 05 C6 |  if_b	mov	result1, ##@LR__4563
1e4ac     5C 00 90 CD |  if_b	jmp	#LR__2683
1e4b0     0F 13 02 F6 | 	mov	arg01, local01
1e4b4     09 23 02 F6 | 	mov	local03, arg01
1e4b8     97 06 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
1e4bc                 | LR__2680
1e4bc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e4c0     01 22 06 51 |  if_ne	add	local03, #1
1e4c4     F4 FF 9F 5D |  if_ne	jmp	#LR__2680
1e4c8                 | LR__2681
1e4c8     09 23 82 F1 | 	sub	local03, arg01
1e4cc     11 FB 01 F6 | 	mov	result1, local03
1e4d0     10 FB 59 F2 | 	cmps	result1, local02 wcz
1e4d4     0F FB 01 E6 |  if_be	mov	result1, local01
1e4d8     30 00 90 ED |  if_be	jmp	#LR__2683
1e4dc     10 13 02 F6 | 	mov	arg01, local02
1e4e0     02 12 06 F1 | 	add	arg01, #2
1e4e4     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
1e4e8     FD 24 0A F6 | 	mov	local04, result1 wz
1e4ec     18 00 90 AD |  if_e	jmp	#LR__2682
1e4f0     12 13 02 F6 | 	mov	arg01, local04
1e4f4     0F 15 02 F6 | 	mov	arg02, local01
1e4f8     10 17 02 F6 | 	mov	arg03, local02
1e4fc     6C DE BF FD | 	call	#__system____builtin_memmove
1e500     12 21 02 F1 | 	add	local02, local04
1e504     10 01 48 FC | 	wrbyte	#0, local02
1e508                 | LR__2682
1e508     12 FB 01 F6 | 	mov	result1, local04
1e50c                 | LR__2683
1e50c     A7 F0 03 F6 | 	mov	ptra, fp
1e510     B2 00 A0 FD | 	call	#popregs_
1e514                 | __system__Left_S_ret
1e514     2D 00 64 FD | 	ret
1e518                 | 
1e518                 | __system__Right_S
1e518     05 4A 05 F6 | 	mov	COUNT_, #5
1e51c     A8 00 A0 FD | 	call	#pushregs_
1e520     09 1F 02 F6 | 	mov	local01, arg01
1e524     0A 21 02 F6 | 	mov	local02, arg02
1e528     01 20 56 F2 | 	cmps	local02, #1 wc
1e52c     5D 01 00 CF 
1e530     03 FA 05 C6 |  if_b	mov	result1, ##@LR__4564
1e534     64 00 90 CD |  if_b	jmp	#LR__2693
1e538     0F 13 02 F6 | 	mov	arg01, local01
1e53c     09 23 02 F6 | 	mov	local03, arg01
1e540     97 06 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1e544                 | LR__2690
1e544     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e548     01 22 06 51 |  if_ne	add	local03, #1
1e54c     F4 FF 9F 5D |  if_ne	jmp	#LR__2690
1e550                 | LR__2691
1e550     09 23 82 F1 | 	sub	local03, arg01
1e554     11 FB 01 F6 | 	mov	result1, local03
1e558     FD 24 02 F6 | 	mov	local04, result1
1e55c     10 25 5A F2 | 	cmps	local04, local02 wcz
1e560     0F FB 01 E6 |  if_be	mov	result1, local01
1e564     34 00 90 ED |  if_be	jmp	#LR__2693
1e568     10 13 02 F6 | 	mov	arg01, local02
1e56c     02 12 06 F1 | 	add	arg01, #2
1e570     20 1D B0 FD | 	call	#__system___gc_alloc_managed
1e574     FD 26 0A F6 | 	mov	local05, result1 wz
1e578     1C 00 90 AD |  if_e	jmp	#LR__2692
1e57c     10 25 82 F1 | 	sub	local04, local02
1e580     0F 25 02 F1 | 	add	local04, local01
1e584     01 20 06 F1 | 	add	local02, #1
1e588     13 13 02 F6 | 	mov	arg01, local05
1e58c     12 15 02 F6 | 	mov	arg02, local04
1e590     10 17 02 F6 | 	mov	arg03, local02
1e594     D4 DD BF FD | 	call	#__system____builtin_memmove
1e598                 | LR__2692
1e598     13 FB 01 F6 | 	mov	result1, local05
1e59c                 | LR__2693
1e59c     A7 F0 03 F6 | 	mov	ptra, fp
1e5a0     B2 00 A0 FD | 	call	#popregs_
1e5a4                 | __system__Right_S_ret
1e5a4     2D 00 64 FD | 	ret
1e5a8                 | 
1e5a8                 | __system__Mid_S
1e5a8     05 4A 05 F6 | 	mov	COUNT_, #5
1e5ac     A8 00 A0 FD | 	call	#pushregs_
1e5b0     09 1F 02 F6 | 	mov	local01, arg01
1e5b4     0A 21 02 F6 | 	mov	local02, arg02
1e5b8     01 16 56 F2 | 	cmps	arg03, #1 wc
1e5bc     5D 01 00 CF 
1e5c0     04 FA 05 C6 |  if_b	mov	result1, ##@LR__4565
1e5c4     80 00 90 CD |  if_b	jmp	#LR__2703
1e5c8     01 20 86 F1 | 	sub	local02, #1
1e5cc     00 20 56 F3 | 	fges	local02, #0 wc
1e5d0     0F 13 02 F6 | 	mov	arg01, local01
1e5d4     09 23 02 F6 | 	mov	local03, arg01
1e5d8     97 06 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1e5dc                 | LR__2700
1e5dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e5e0     01 22 06 51 |  if_ne	add	local03, #1
1e5e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2700
1e5e8                 | LR__2701
1e5e8     09 23 82 F1 | 	sub	local03, arg01
1e5ec     11 FB 01 F6 | 	mov	result1, local03
1e5f0     FD 14 02 F6 | 	mov	arg02, result1
1e5f4     10 15 52 F2 | 	cmps	arg02, local02 wc
1e5f8     5D 01 00 CF 
1e5fc     05 FA 05 C6 |  if_b	mov	result1, ##@LR__4566
1e600     44 00 90 CD |  if_b	jmp	#LR__2703
1e604     0A 25 02 F6 | 	mov	local04, arg02
1e608     10 25 82 F1 | 	sub	local04, local02
1e60c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1e610     0B 25 02 16 |  if_a	mov	local04, arg03
1e614     12 13 02 F6 | 	mov	arg01, local04
1e618     02 12 06 F1 | 	add	arg01, #2
1e61c     74 1C B0 FD | 	call	#__system___gc_alloc_managed
1e620     FD 26 0A F6 | 	mov	local05, result1 wz
1e624     1C 00 90 AD |  if_e	jmp	#LR__2702
1e628     0F 21 02 F1 | 	add	local02, local01
1e62c     13 13 02 F6 | 	mov	arg01, local05
1e630     10 15 02 F6 | 	mov	arg02, local02
1e634     12 17 02 F6 | 	mov	arg03, local04
1e638     30 DD BF FD | 	call	#__system____builtin_memmove
1e63c     13 25 02 F1 | 	add	local04, local05
1e640     12 01 48 FC | 	wrbyte	#0, local04
1e644                 | LR__2702
1e644     13 FB 01 F6 | 	mov	result1, local05
1e648                 | LR__2703
1e648     A7 F0 03 F6 | 	mov	ptra, fp
1e64c     B2 00 A0 FD | 	call	#popregs_
1e650                 | __system__Mid_S_ret
1e650     2D 00 64 FD | 	ret
1e654                 | 
1e654                 | __system__Chr_S
1e654     01 4A 05 F6 | 	mov	COUNT_, #1
1e658     A8 00 A0 FD | 	call	#pushregs_
1e65c     09 1F 02 F6 | 	mov	local01, arg01
1e660     03 12 06 F6 | 	mov	arg01, #3
1e664     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
1e668     00 FA 4D F2 | 	cmps	result1, #0 wz
1e66c     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1e670     01 FA 05 51 |  if_ne	add	result1, #1
1e674     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1e678     01 FA 85 51 |  if_ne	sub	result1, #1
1e67c     A7 F0 03 F6 | 	mov	ptra, fp
1e680     B2 00 A0 FD | 	call	#popregs_
1e684                 | __system__Chr_S_ret
1e684     2D 00 64 FD | 	ret
1e688                 | 
1e688                 | __system__str_S
1e688     02 4A 05 F6 | 	mov	COUNT_, #2
1e68c     A8 00 A0 FD | 	call	#pushregs_
1e690     09 1F 02 F6 | 	mov	local01, arg01
1e694     10 12 06 F6 | 	mov	arg01, #16
1e698     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
1e69c     FD 20 0A F6 | 	mov	local02, result1 wz
1e6a0     30 00 90 AD |  if_e	jmp	#LR__2710
1e6a4     F8 13 02 F6 | 	mov	arg01, ptra
1e6a8     08 F0 07 F1 | 	add	ptra, #8
1e6ac     09 21 62 FC | 	wrlong	local02, arg01
1e6b0     04 12 06 F1 | 	add	arg01, #4
1e6b4     09 01 68 FC | 	wrlong	#0, arg01
1e6b8     04 12 86 F1 | 	sub	arg01, #4
1e6bc     00 E8 03 FF 
1e6c0     00 12 46 F5 | 	or	arg01, ##131072000
1e6c4     00 14 06 F6 | 	mov	arg02, #0
1e6c8     0F 17 02 F6 | 	mov	arg03, local01
1e6cc     67 18 06 F6 | 	mov	arg04, #103
1e6d0     90 EE BF FD | 	call	#__system___fmtfloat
1e6d4                 | LR__2710
1e6d4     10 FB 01 F6 | 	mov	result1, local02
1e6d8     A7 F0 03 F6 | 	mov	ptra, fp
1e6dc     B2 00 A0 FD | 	call	#popregs_
1e6e0                 | __system__str_S_ret
1e6e0     2D 00 64 FD | 	ret
1e6e4                 | 
1e6e4                 | __system__Number_S
1e6e4     08 4A 05 F6 | 	mov	COUNT_, #8
1e6e8     A8 00 A0 FD | 	call	#pushregs_
1e6ec     09 1F 02 F6 | 	mov	local01, arg01
1e6f0     0A 21 0A F6 | 	mov	local02, arg02 wz
1e6f4     0B 23 02 F6 | 	mov	local03, arg03
1e6f8     3C 00 90 5D |  if_ne	jmp	#LR__2722
1e6fc     01 20 06 F6 | 	mov	local02, #1
1e700     11 25 02 F6 | 	mov	local04, local03
1e704     01 26 06 F6 | 	mov	local05, #1
1e708     97 16 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
1e70c                 | LR__2720
1e70c     00 28 06 F6 | 	mov	local06, #0
1e710     0F 25 1A F2 | 	cmp	local04, local01 wcz
1e714     01 28 66 E6 |  if_be	neg	local06, #1
1e718     12 27 12 F2 | 	cmp	local05, local04 wc
1e71c     15 2B A2 F1 | 	subx	local07, local07
1e720     15 29 CA F7 | 	test	local06, local07 wz
1e724     11 25 02 5D |  if_ne	qmul	local04, local03
1e728     12 27 02 56 |  if_ne	mov	local05, local04
1e72c     01 20 06 51 |  if_ne	add	local02, #1
1e730     18 24 62 5D |  if_ne	getqx	local04
1e734     D4 FF 9F 5D |  if_ne	jmp	#LR__2720
1e738                 | LR__2721
1e738                 | LR__2722
1e738     20 20 36 F3 | 	fle	local02, #32 wc
1e73c     10 13 02 F6 | 	mov	arg01, local02
1e740     02 12 06 F1 | 	add	arg01, #2
1e744     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1e748     FD 28 02 F6 | 	mov	local06, result1
1e74c     10 2B 02 F6 | 	mov	local07, local02
1e750     14 2B 02 F1 | 	add	local07, local06
1e754     15 01 48 FC | 	wrbyte	#0, local07
1e758     97 1A 48 FB | 	callpa	#(@LR__2724-@LR__2723)>>2,fcache_load_ptr_
1e75c                 | LR__2723
1e75c     01 20 16 F2 | 	cmp	local02, #1 wc
1e760     2C 00 90 CD |  if_b	jmp	#LR__2725
1e764     11 1F 12 FD | 	qdiv	local01, local03
1e768     01 20 86 F1 | 	sub	local02, #1
1e76c     10 2B 02 F6 | 	mov	local07, local02
1e770     14 2B 02 F1 | 	add	local07, local06
1e774     19 2C 62 FD | 	getqy	local08
1e778     0A 2C 16 F2 | 	cmp	local08, #10 wc
1e77c     30 2C 06 C1 |  if_b	add	local08, #48
1e780     37 2C 06 31 |  if_ae	add	local08, #55
1e784     15 2D 42 FC | 	wrbyte	local08, local07
1e788     18 1E 62 FD | 	getqx	local01
1e78c     CC FF 9F FD | 	jmp	#LR__2723
1e790                 | LR__2724
1e790                 | LR__2725
1e790     14 FB 01 F6 | 	mov	result1, local06
1e794     A7 F0 03 F6 | 	mov	ptra, fp
1e798     B2 00 A0 FD | 	call	#popregs_
1e79c                 | __system__Number_S_ret
1e79c     2D 00 64 FD | 	ret
1e7a0                 | 
1e7a0                 | __system__LCase_S
1e7a0     07 4A 05 F6 | 	mov	COUNT_, #7
1e7a4     A8 00 A0 FD | 	call	#pushregs_
1e7a8     09 1F 02 F6 | 	mov	local01, arg01
1e7ac     09 21 02 F6 | 	mov	local02, arg01
1e7b0     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
1e7b4                 | LR__2730
1e7b4     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e7b8     01 20 06 51 |  if_ne	add	local02, #1
1e7bc     F4 FF 9F 5D |  if_ne	jmp	#LR__2730
1e7c0                 | LR__2731
1e7c0     09 21 82 F1 | 	sub	local02, arg01
1e7c4     10 FB 01 F6 | 	mov	result1, local02
1e7c8     FD 20 0A F6 | 	mov	local02, result1 wz
1e7cc     5D 01 00 AF 
1e7d0     06 FA 05 A6 |  if_e	mov	result1, ##@LR__4567
1e7d4     7C 00 90 AD |  if_e	jmp	#LR__2737
1e7d8     10 13 02 F6 | 	mov	arg01, local02
1e7dc     02 12 06 F1 | 	add	arg01, #2
1e7e0     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1e7e4     FD 22 0A F6 | 	mov	local03, result1 wz
1e7e8     64 00 90 AD |  if_e	jmp	#LR__2736
1e7ec     01 24 66 F6 | 	neg	local04, #1
1e7f0     97 26 48 FB | 	callpa	#(@LR__2735-@LR__2732)>>2,fcache_load_ptr_
1e7f4                 | LR__2732
1e7f4     01 24 06 F1 | 	add	local04, #1
1e7f8     12 27 02 F6 | 	mov	local05, local04
1e7fc     0F 27 02 F1 | 	add	local05, local01
1e800     13 29 C2 FA | 	rdbyte	local06, local05
1e804     41 28 56 F2 | 	cmps	local06, #65 wc
1e808     18 00 90 CD |  if_b	jmp	#LR__2733
1e80c     5B 28 56 F2 | 	cmps	local06, #91 wc
1e810     12 2B 02 C6 |  if_b	mov	local07, local04
1e814     11 2B 02 C1 |  if_b	add	local07, local03
1e818     20 28 06 C1 |  if_b	add	local06, #32
1e81c     15 29 42 CC |  if_b	wrbyte	local06, local07
1e820     0C 00 90 CD |  if_b	jmp	#LR__2734
1e824                 | LR__2733
1e824     12 2B 02 F6 | 	mov	local07, local04
1e828     11 2B 02 F1 | 	add	local07, local03
1e82c     15 29 42 FC | 	wrbyte	local06, local07
1e830                 | LR__2734
1e830     10 29 02 F6 | 	mov	local06, local02
1e834     01 28 86 F1 | 	sub	local06, #1
1e838     14 25 0A F2 | 	cmp	local04, local06 wz
1e83c     B4 FF 9F 5D |  if_ne	jmp	#LR__2732
1e840                 | LR__2735
1e840     11 21 02 F1 | 	add	local02, local03
1e844     10 01 48 FC | 	wrbyte	#0, local02
1e848     11 FB 01 F6 | 	mov	result1, local03
1e84c     04 00 90 FD | 	jmp	#LR__2737
1e850                 | LR__2736
1e850     11 FB 01 F6 | 	mov	result1, local03
1e854                 | LR__2737
1e854     A7 F0 03 F6 | 	mov	ptra, fp
1e858     B2 00 A0 FD | 	call	#popregs_
1e85c                 | __system__LCase_S_ret
1e85c     2D 00 64 FD | 	ret
1e860                 | 
1e860                 | __system__LTrim_S
1e860     05 4A 05 F6 | 	mov	COUNT_, #5
1e864     A8 00 A0 FD | 	call	#pushregs_
1e868     09 1F 02 F6 | 	mov	local01, arg01
1e86c     09 21 02 F6 | 	mov	local02, arg01
1e870     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1e874                 | LR__2740
1e874     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e878     01 20 06 51 |  if_ne	add	local02, #1
1e87c     F4 FF 9F 5D |  if_ne	jmp	#LR__2740
1e880                 | LR__2741
1e880     09 21 82 F1 | 	sub	local02, arg01
1e884     10 FB 01 F6 | 	mov	result1, local02
1e888     FD 20 0A F6 | 	mov	local02, result1 wz
1e88c     5D 01 00 AF 
1e890     07 FA 05 A6 |  if_e	mov	result1, ##@LR__4568
1e894     7C 00 90 AD |  if_e	jmp	#LR__2746
1e898     00 22 06 F6 | 	mov	local03, #0
1e89c     10 25 02 F6 | 	mov	local04, local02
1e8a0                 | LR__2742
1e8a0     12 23 52 F2 | 	cmps	local03, local04 wc
1e8a4     68 00 90 3D |  if_ae	jmp	#LR__2745
1e8a8     11 17 02 F6 | 	mov	arg03, local03
1e8ac     0F 17 02 F1 | 	add	arg03, local01
1e8b0     0B 17 C2 FA | 	rdbyte	arg03, arg03
1e8b4     20 16 0E F2 | 	cmp	arg03, #32 wz
1e8b8     4C 00 90 AD |  if_e	jmp	#LR__2744
1e8bc     10 13 02 F6 | 	mov	arg01, local02
1e8c0     11 13 82 F1 | 	sub	arg01, local03
1e8c4     02 12 06 F1 | 	add	arg01, #2
1e8c8     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1e8cc     FD 26 0A F6 | 	mov	local05, result1 wz
1e8d0     2C 00 90 AD |  if_e	jmp	#LR__2743
1e8d4     11 15 02 F6 | 	mov	arg02, local03
1e8d8     0F 15 02 F1 | 	add	arg02, local01
1e8dc     10 17 02 F6 | 	mov	arg03, local02
1e8e0     11 17 82 F1 | 	sub	arg03, local03
1e8e4     13 13 02 F6 | 	mov	arg01, local05
1e8e8     80 DA BF FD | 	call	#__system____builtin_memmove
1e8ec     11 21 82 F1 | 	sub	local02, local03
1e8f0     13 21 02 F1 | 	add	local02, local05
1e8f4     10 01 48 FC | 	wrbyte	#0, local02
1e8f8     13 FB 01 F6 | 	mov	result1, local05
1e8fc     14 00 90 FD | 	jmp	#LR__2746
1e900                 | LR__2743
1e900     13 FB 01 F6 | 	mov	result1, local05
1e904     0C 00 90 FD | 	jmp	#LR__2746
1e908                 | LR__2744
1e908     01 22 06 F1 | 	add	local03, #1
1e90c     90 FF 9F FD | 	jmp	#LR__2742
1e910                 | LR__2745
1e910     0F FB 01 F6 | 	mov	result1, local01
1e914                 | LR__2746
1e914     A7 F0 03 F6 | 	mov	ptra, fp
1e918     B2 00 A0 FD | 	call	#popregs_
1e91c                 | __system__LTrim_S_ret
1e91c     2D 00 64 FD | 	ret
1e920                 | 
1e920                 | __system__RTrim_S
1e920     04 4A 05 F6 | 	mov	COUNT_, #4
1e924     A8 00 A0 FD | 	call	#pushregs_
1e928     09 1F 02 F6 | 	mov	local01, arg01
1e92c     09 21 02 F6 | 	mov	local02, arg01
1e930     97 06 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
1e934                 | LR__2750
1e934     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e938     01 20 06 51 |  if_ne	add	local02, #1
1e93c     F4 FF 9F 5D |  if_ne	jmp	#LR__2750
1e940                 | LR__2751
1e940     09 21 82 F1 | 	sub	local02, arg01
1e944     10 FB 01 F6 | 	mov	result1, local02
1e948     FD 20 0A F6 | 	mov	local02, result1 wz
1e94c     5D 01 00 AF 
1e950     08 FA 05 A6 |  if_e	mov	result1, ##@LR__4569
1e954     74 00 90 AD |  if_e	jmp	#LR__2755
1e958     10 23 02 F6 | 	mov	local03, local02
1e95c     01 22 86 F1 | 	sub	local03, #1
1e960                 | LR__2752
1e960     11 15 02 F6 | 	mov	arg02, local03
1e964     0F 15 02 F1 | 	add	arg02, local01
1e968     0A 21 C2 FA | 	rdbyte	local02, arg02
1e96c     20 20 0E F2 | 	cmp	local02, #32 wz
1e970     44 00 90 AD |  if_e	jmp	#LR__2754
1e974     11 13 02 F6 | 	mov	arg01, local03
1e978     02 12 06 F1 | 	add	arg01, #2
1e97c     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1e980     FD 24 0A F6 | 	mov	local04, result1 wz
1e984     28 00 90 AD |  if_e	jmp	#LR__2753
1e988     11 17 02 F6 | 	mov	arg03, local03
1e98c     01 16 06 F1 | 	add	arg03, #1
1e990     12 13 02 F6 | 	mov	arg01, local04
1e994     0F 15 02 F6 | 	mov	arg02, local01
1e998     D0 D9 BF FD | 	call	#__system____builtin_memmove
1e99c     01 22 06 F1 | 	add	local03, #1
1e9a0     12 23 02 F1 | 	add	local03, local04
1e9a4     11 01 48 FC | 	wrbyte	#0, local03
1e9a8     12 FB 01 F6 | 	mov	result1, local04
1e9ac     1C 00 90 FD | 	jmp	#LR__2755
1e9b0                 | LR__2753
1e9b0     12 FB 01 F6 | 	mov	result1, local04
1e9b4     14 00 90 FD | 	jmp	#LR__2755
1e9b8                 | LR__2754
1e9b8     01 22 86 F1 | 	sub	local03, #1
1e9bc     00 22 56 F2 | 	cmps	local03, #0 wc
1e9c0     9C FF 9F 3D |  if_ae	jmp	#LR__2752
1e9c4     5D 01 00 FF 
1e9c8     09 FA 05 F6 | 	mov	result1, ##@LR__4570
1e9cc                 | LR__2755
1e9cc     A7 F0 03 F6 | 	mov	ptra, fp
1e9d0     B2 00 A0 FD | 	call	#popregs_
1e9d4                 | __system__RTrim_S_ret
1e9d4     2D 00 64 FD | 	ret
1e9d8                 | 
1e9d8                 | __system__Instr
1e9d8     07 4A 05 F6 | 	mov	COUNT_, #7
1e9dc     A8 00 A0 FD | 	call	#pushregs_
1e9e0     09 1F 02 F6 | 	mov	local01, arg01
1e9e4     0A 21 02 F6 | 	mov	local02, arg02
1e9e8     0B 23 02 F6 | 	mov	local03, arg03
1e9ec     11 13 02 F6 | 	mov	arg01, local03
1e9f0     09 25 02 F6 | 	mov	local04, arg01
1e9f4     97 06 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1e9f8                 | LR__2760
1e9f8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e9fc     01 24 06 51 |  if_ne	add	local04, #1
1ea00     F4 FF 9F 5D |  if_ne	jmp	#LR__2760
1ea04                 | LR__2761
1ea04     09 25 82 F1 | 	sub	local04, arg01
1ea08     12 27 02 F6 | 	mov	local05, local04
1ea0c     10 13 02 F6 | 	mov	arg01, local02
1ea10     09 25 02 F6 | 	mov	local04, arg01
1ea14     97 06 48 FB | 	callpa	#(@LR__2763-@LR__2762)>>2,fcache_load_ptr_
1ea18                 | LR__2762
1ea18     12 FB C9 FA | 	rdbyte	result1, local04 wz
1ea1c     01 24 06 51 |  if_ne	add	local04, #1
1ea20     F4 FF 9F 5D |  if_ne	jmp	#LR__2762
1ea24                 | LR__2763
1ea24     09 25 82 F1 | 	sub	local04, arg01
1ea28     12 FB 01 F6 | 	mov	result1, local04
1ea2c     FD 18 0A F6 | 	mov	arg04, result1 wz
1ea30     00 FA 05 A6 |  if_e	mov	result1, #0
1ea34     98 00 90 AD |  if_e	jmp	#LR__2767
1ea38     00 26 0E F2 | 	cmp	local05, #0 wz
1ea3c     00 FA 05 A6 |  if_e	mov	result1, #0
1ea40     8C 00 90 AD |  if_e	jmp	#LR__2767
1ea44     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1ea48     00 FA 05 16 |  if_a	mov	result1, #0
1ea4c     80 00 90 1D |  if_a	jmp	#LR__2767
1ea50     01 1E 56 F2 | 	cmps	local01, #1 wc
1ea54     01 1E 06 C6 |  if_b	mov	local01, #1
1ea58     11 29 C2 FA | 	rdbyte	local06, local03
1ea5c     01 26 0E F2 | 	cmp	local05, #1 wz
1ea60     18 00 90 5D |  if_ne	jmp	#LR__2764
1ea64     10 13 02 F6 | 	mov	arg01, local02
1ea68     14 15 02 F6 | 	mov	arg02, local06
1ea6c     0F 17 02 F6 | 	mov	arg03, local01
1ea70     00 18 06 F6 | 	mov	arg04, #0
1ea74     B4 33 B0 FD | 	call	#__system____ScanForChar
1ea78     54 00 90 FD | 	jmp	#LR__2767
1ea7c                 | LR__2764
1ea7c     0F 2B 02 F6 | 	mov	local07, local01
1ea80                 | LR__2765
1ea80     10 13 02 F6 | 	mov	arg01, local02
1ea84     14 15 02 F6 | 	mov	arg02, local06
1ea88     15 17 02 F6 | 	mov	arg03, local07
1ea8c     00 18 06 F6 | 	mov	arg04, #0
1ea90     98 33 B0 FD | 	call	#__system____ScanForChar
1ea94     FD 2A 0A F6 | 	mov	local07, result1 wz
1ea98     30 00 90 AD |  if_e	jmp	#LR__2766
1ea9c     13 17 02 F6 | 	mov	arg03, local05
1eaa0     10 13 02 F6 | 	mov	arg01, local02
1eaa4     15 15 02 F6 | 	mov	arg02, local07
1eaa8     FC FA BF FD | 	call	#__system__Mid_S
1eaac     FD 12 02 F6 | 	mov	arg01, result1
1eab0     11 15 02 F6 | 	mov	arg02, local03
1eab4     BC D9 BF FD | 	call	#__system___string_cmp
1eab8     00 FA 0D F2 | 	cmp	result1, #0 wz
1eabc     15 FB 01 A6 |  if_e	mov	result1, local07
1eac0     0C 00 90 AD |  if_e	jmp	#LR__2767
1eac4     13 2B 02 F1 | 	add	local07, local05
1eac8     B4 FF 9F FD | 	jmp	#LR__2765
1eacc                 | LR__2766
1eacc     00 FA 05 F6 | 	mov	result1, #0
1ead0                 | LR__2767
1ead0     A7 F0 03 F6 | 	mov	ptra, fp
1ead4     B2 00 A0 FD | 	call	#popregs_
1ead8                 | __system__Instr_ret
1ead8     2D 00 64 FD | 	ret
1eadc                 | 
1eadc                 | __system___strerror
1eadc     00 12 56 F2 | 	cmps	arg01, #0 wc
1eae0     08 00 90 CD |  if_b	jmp	#LR__2770
1eae4     1A 12 56 F2 | 	cmps	arg01, #26 wc
1eae8     04 00 90 CD |  if_b	jmp	#LR__2771
1eaec                 | LR__2770
1eaec     19 12 06 F6 | 	mov	arg01, #25
1eaf0                 | LR__2771
1eaf0     02 12 66 F0 | 	shl	arg01, #2
1eaf4     01 00 00 FF 
1eaf8     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
1eafc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1eb00     09 FB 01 FB | 	rdlong	result1, arg01
1eb04     01 00 00 FF 
1eb08     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
1eb0c                 | __system___strerror_ret
1eb0c     2D 00 64 FD | 	ret
1eb10                 | 
1eb10                 | __system___int64_shl
1eb10     20 16 CE F7 | 	test	arg03, #32 wz
1eb14     09 15 02 56 |  if_ne	mov	arg02, arg01
1eb18     00 12 06 56 |  if_ne	mov	arg01, #0
1eb1c     1F 16 CE F7 | 	test	arg03, #31 wz
1eb20     18 00 90 AD |  if_e	jmp	#LR__2780
1eb24     0B 15 62 F0 | 	shl	arg02, arg03
1eb28     09 FB 01 F6 | 	mov	result1, arg01
1eb2c     0B FD 61 F6 | 	neg	result2, arg03
1eb30     FE FA 41 F0 | 	shr	result1, result2
1eb34     FD 14 42 F5 | 	or	arg02, result1
1eb38     0B 13 62 F0 | 	shl	arg01, arg03
1eb3c                 | LR__2780
1eb3c     0A FD 01 F6 | 	mov	result2, arg02
1eb40     09 FB 01 F6 | 	mov	result1, arg01
1eb44                 | __system___int64_shl_ret
1eb44     2D 00 64 FD | 	ret
1eb48                 | 
1eb48                 | __system___usepins
1eb48     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1eb4c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1eb50     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
1eb54     00 13 CA F7 | 	test	arg01, _var01 wz
1eb58     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
1eb5c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1eb60     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
1eb64     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1eb68     00 FA 05 56 |  if_ne	mov	result1, #0
1eb6c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1eb70     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1eb74     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1eb78     09 03 42 F5 | 	or	_var02, arg01
1eb7c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1eb80     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1eb84     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1eb88     0A 03 42 F5 | 	or	_var02, arg02
1eb8c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1eb90     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1eb94     01 FA 65 F6 | 	neg	result1, #1
1eb98                 | __system___usepins_ret
1eb98     2D 00 64 FD | 	ret
1eb9c                 | 
1eb9c                 | __system___freepins
1eb9c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1eba0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1eba4     09 01 22 F5 | 	andn	_var01, arg01
1eba8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ebac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ebb0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ebb4     0A 01 22 F5 | 	andn	_var01, arg02
1ebb8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ebbc     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1ebc0                 | __system___freepins_ret
1ebc0     2D 00 64 FD | 	ret
1ebc4                 | 
1ebc4                 | __system___float_fromuns
1ebc4     09 17 0A F6 | 	mov	arg03, arg01 wz
1ebc8     0B FB 01 A6 |  if_e	mov	result1, arg03
1ebcc     24 00 90 AD |  if_e	jmp	#LR__2790
1ebd0     0B 15 92 F7 | 	encod	arg02, arg03 wc
1ebd4     01 14 06 C1 |  if_b	add	arg02, #1
1ebd8     01 14 86 F1 | 	sub	arg02, #1
1ebdc     1F 12 06 F6 | 	mov	arg01, #31
1ebe0     0A 13 82 F1 | 	sub	arg01, arg02
1ebe4     09 17 62 F0 | 	shl	arg03, arg01
1ebe8     02 16 46 F0 | 	shr	arg03, #2
1ebec     00 12 06 F6 | 	mov	arg01, #0
1ebf0     4C 09 B0 FD | 	call	#__system___float_Pack
1ebf4                 | LR__2790
1ebf4                 | __system___float_fromuns_ret
1ebf4     2D 00 64 FD | 	ret
1ebf8                 | 
1ebf8                 | __system___float_add
1ebf8     0F 4A 05 F6 | 	mov	COUNT_, #15
1ebfc     A8 00 A0 FD | 	call	#pushregs_
1ec00     09 1F 02 F6 | 	mov	local01, arg01
1ec04     0A 21 02 F6 | 	mov	local02, arg02
1ec08     00 22 06 F6 | 	mov	local03, #0
1ec0c     0F 25 02 F6 | 	mov	local04, local01
1ec10     12 27 02 F6 | 	mov	local05, local04
1ec14     16 26 46 F7 | 	zerox	local05, #22
1ec18     12 29 02 F6 | 	mov	local06, local04
1ec1c     01 28 66 F0 | 	shl	local06, #1
1ec20     18 28 46 F0 | 	shr	local06, #24
1ec24     1F 24 46 F0 | 	shr	local04, #31
1ec28     10 13 02 F6 | 	mov	arg01, local02
1ec2c     09 FB 01 F6 | 	mov	result1, arg01
1ec30     FD 2A 02 F6 | 	mov	local07, result1
1ec34     15 2D 02 F6 | 	mov	local08, local07
1ec38     16 2C 46 F7 | 	zerox	local08, #22
1ec3c     15 2F 02 F6 | 	mov	local09, local07
1ec40     01 2E 66 F0 | 	shl	local09, #1
1ec44     18 2E 46 F0 | 	shr	local09, #24
1ec48     17 31 02 F6 | 	mov	local10, local09
1ec4c     1F 2A 46 F0 | 	shr	local07, #31
1ec50     00 32 06 F6 | 	mov	local11, #0
1ec54     00 34 06 F6 | 	mov	local12, #0
1ec58     18 29 12 F2 | 	cmp	local06, local10 wc
1ec5c     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1ec60     2C 00 90 1D |  if_a	jmp	#LR__2800
1ec64     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1ec68     24 00 90 3D |  if_ae	jmp	#LR__2800
1ec6c     13 37 02 F6 | 	mov	local13, local05
1ec70     16 27 02 F6 | 	mov	local05, local08
1ec74     1B 2D 02 F6 | 	mov	local08, local13
1ec78     14 37 02 F6 | 	mov	local13, local06
1ec7c     18 29 02 F6 | 	mov	local06, local10
1ec80     1B 31 02 F6 | 	mov	local10, local13
1ec84     12 37 02 F6 | 	mov	local13, local04
1ec88     15 25 02 F6 | 	mov	local04, local07
1ec8c     1B 2B 02 F6 | 	mov	local07, local13
1ec90                 | LR__2800
1ec90     FF 28 0E F2 | 	cmp	local06, #255 wz
1ec94     70 01 90 AD |  if_e	jmp	#LR__2815
1ec98     00 28 0E F2 | 	cmp	local06, #0 wz
1ec9c     AC 01 90 AD |  if_e	jmp	#LR__2817
1eca0     17 26 26 F4 | 	bith	local05, #23
1eca4                 | LR__2801
1eca4     00 30 0E F2 | 	cmp	local10, #0 wz
1eca8     F0 01 90 AD |  if_e	jmp	#LR__2821
1ecac     17 2C 26 F4 | 	bith	local08, #23
1ecb0                 | LR__2802
1ecb0     7F 28 86 F1 | 	sub	local06, #127
1ecb4     7F 30 86 F1 | 	sub	local10, #127
1ecb8     14 39 02 F6 | 	mov	local14, local06
1ecbc     18 39 82 F1 | 	sub	local14, local10
1ecc0     97 14 48 FB | 	callpa	#(@LR__2804-@LR__2803)>>2,fcache_load_ptr_
1ecc4                 | LR__2803
1ecc4     20 38 56 F2 | 	cmps	local14, #32 wc
1ecc8     20 00 90 CD |  if_b	jmp	#LR__2805
1eccc     16 2F 02 F6 | 	mov	local09, local08
1ecd0     00 32 0E F2 | 	cmp	local11, #0 wz
1ecd4     6F 32 62 FD | 	wrnz	local11
1ecd8     19 2F 42 F5 | 	or	local09, local11
1ecdc     17 33 02 F6 | 	mov	local11, local09
1ece0     00 2C 06 F6 | 	mov	local08, #0
1ece4     20 38 86 F1 | 	sub	local14, #32
1ece8     D8 FF 9F FD | 	jmp	#LR__2803
1ecec                 | LR__2804
1ecec                 | LR__2805
1ecec     00 38 0E F2 | 	cmp	local14, #0 wz
1ecf0     38 00 90 AD |  if_e	jmp	#LR__2806
1ecf4     16 37 02 F6 | 	mov	local13, local08
1ecf8     20 30 06 F6 | 	mov	local10, #32
1ecfc     1C 31 82 F1 | 	sub	local10, local14
1ed00     18 37 62 F0 | 	shl	local13, local10
1ed04     19 31 02 F6 | 	mov	local10, local11
1ed08     20 2E 06 F6 | 	mov	local09, #32
1ed0c     1C 2F 82 F1 | 	sub	local09, local14
1ed10     17 31 6A F0 | 	shl	local10, local09 wz
1ed14     1C 33 42 F0 | 	shr	local11, local14
1ed18     1C 2D 42 F0 | 	shr	local08, local14
1ed1c     1B 33 42 F5 | 	or	local11, local13
1ed20     00 3A 06 F6 | 	mov	local15, #0
1ed24     01 3A 06 56 |  if_ne	mov	local15, #1
1ed28     1D 33 42 F5 | 	or	local11, local15
1ed2c                 | LR__2806
1ed2c     12 3B 02 F6 | 	mov	local15, local04
1ed30     15 3B 62 F5 | 	xor	local15, local07
1ed34     01 3A CE F7 | 	test	local15, #1 wz
1ed38     18 00 90 AD |  if_e	jmp	#LR__2807
1ed3c     16 2D 22 F6 | 	not	local08, local08
1ed40     19 33 22 F6 | 	not	local11, local11
1ed44     01 32 0E F1 | 	add	local11, #1 wz
1ed48     00 3A 06 F6 | 	mov	local15, #0
1ed4c     01 3A 06 A6 |  if_e	mov	local15, #1
1ed50     1D 2D 02 F1 | 	add	local08, local15
1ed54                 | LR__2807
1ed54     19 35 12 F1 | 	add	local12, local11 wc
1ed58     16 27 22 F1 | 	addx	local05, local08
1ed5c     00 26 56 F2 | 	cmps	local05, #0 wc
1ed60     1C 00 90 3D |  if_ae	jmp	#LR__2808
1ed64     01 24 66 F5 | 	xor	local04, #1
1ed68     13 27 22 F6 | 	not	local05, local05
1ed6c     1A 35 22 F6 | 	not	local12, local12
1ed70     01 34 0E F1 | 	add	local12, #1 wz
1ed74     00 3A 06 F6 | 	mov	local15, #0
1ed78     01 3A 06 A6 |  if_e	mov	local15, #1
1ed7c     1D 27 02 F1 | 	add	local05, local15
1ed80                 | LR__2808
1ed80     00 80 00 FF 
1ed84     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1ed88     28 00 90 CD |  if_b	jmp	#LR__2809
1ed8c     01 28 06 F1 | 	add	local06, #1
1ed90     1A 39 02 F6 | 	mov	local14, local12
1ed94     01 38 06 F5 | 	and	local14, #1
1ed98     01 34 46 F0 | 	shr	local12, #1
1ed9c     13 3B 02 F6 | 	mov	local15, local05
1eda0     1F 3A 66 F0 | 	shl	local15, #31
1eda4     1D 35 42 F5 | 	or	local12, local15
1eda8     1C 35 42 F5 | 	or	local12, local14
1edac     01 26 46 F0 | 	shr	local05, #1
1edb0     3C 00 90 FD | 	jmp	#LR__2814
1edb4                 | LR__2809
1edb4     00 40 00 FF 
1edb8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1edbc     30 00 90 3D |  if_ae	jmp	#LR__2813
1edc0     00 26 0E F2 | 	cmp	local05, #0 wz
1edc4     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1edc8     08 24 46 A5 |  if_e	or	local04, #8
1edcc     01 24 26 A5 |  if_e	andn	local04, #1
1edd0     1C 00 90 AD |  if_e	jmp	#LR__2812
1edd4                 | LR__2810
1edd4     00 40 00 FF 
1edd8     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1eddc     10 00 90 3D |  if_ae	jmp	#LR__2811
1ede0     1A 35 12 F1 | 	add	local12, local12 wc
1ede4     13 27 22 F1 | 	addx	local05, local05
1ede8     01 28 86 F1 | 	sub	local06, #1
1edec     E4 FF 9F FD | 	jmp	#LR__2810
1edf0                 | LR__2811
1edf0                 | LR__2812
1edf0                 | LR__2813
1edf0                 | LR__2814
1edf0     13 13 02 F6 | 	mov	arg01, local05
1edf4     1A 15 02 F6 | 	mov	arg02, local12
1edf8     14 17 02 F6 | 	mov	arg03, local06
1edfc     12 19 02 F6 | 	mov	arg04, local04
1ee00     6C 34 B0 FD | 	call	#__system__pack_0540
1ee04     DC 00 90 FD | 	jmp	#LR__2825
1ee08                 | LR__2815
1ee08     FF 30 0E F2 | 	cmp	local10, #255 wz
1ee0c     10 00 90 5D |  if_ne	jmp	#LR__2816
1ee10     12 2B 0A F2 | 	cmp	local07, local04 wz
1ee14     00 F8 3F 5F 
1ee18     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ee1c     C4 00 90 5D |  if_ne	jmp	#LR__2825
1ee20                 | LR__2816
1ee20     00 26 0E F2 | 	cmp	local05, #0 wz
1ee24     00 F8 3F 5F 
1ee28     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ee2c     B4 00 90 5D |  if_ne	jmp	#LR__2825
1ee30     1A 15 02 F6 | 	mov	arg02, local12
1ee34     14 17 02 F6 | 	mov	arg03, local06
1ee38     12 19 02 F6 | 	mov	arg04, local04
1ee3c     02 18 46 F5 | 	or	arg04, #2
1ee40     13 13 02 F6 | 	mov	arg01, local05
1ee44     28 34 B0 FD | 	call	#__system__pack_0540
1ee48     98 00 90 FD | 	jmp	#LR__2825
1ee4c                 | LR__2817
1ee4c     00 26 0E F2 | 	cmp	local05, #0 wz
1ee50     28 00 90 AD |  if_e	jmp	#LR__2820
1ee54     01 26 66 F0 | 	shl	local05, #1
1ee58     97 0E 48 FB | 	callpa	#(@LR__2819-@LR__2818)>>2,fcache_load_ptr_
1ee5c                 | LR__2818
1ee5c     00 40 00 FF 
1ee60     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ee64     14 3B 02 C6 |  if_b	mov	local15, local06
1ee68     01 3A 86 C1 |  if_b	sub	local15, #1
1ee6c     1D 29 02 C6 |  if_b	mov	local06, local15
1ee70     01 26 66 C0 |  if_b	shl	local05, #1
1ee74     E4 FF 9F CD |  if_b	jmp	#LR__2818
1ee78                 | LR__2819
1ee78     28 FE 9F FD | 	jmp	#LR__2801
1ee7c                 | LR__2820
1ee7c     15 25 02 F5 | 	and	local04, local07
1ee80     12 19 02 F6 | 	mov	arg04, local04
1ee84     08 18 46 F5 | 	or	arg04, #8
1ee88     00 12 06 F6 | 	mov	arg01, #0
1ee8c     00 14 06 F6 | 	mov	arg02, #0
1ee90     00 16 06 F6 | 	mov	arg03, #0
1ee94     D8 33 B0 FD | 	call	#__system__pack_0540
1ee98     48 00 90 FD | 	jmp	#LR__2825
1ee9c                 | LR__2821
1ee9c     00 2C 0E F2 | 	cmp	local08, #0 wz
1eea0     28 00 90 AD |  if_e	jmp	#LR__2824
1eea4     01 2C 66 F0 | 	shl	local08, #1
1eea8     97 0E 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
1eeac                 | LR__2822
1eeac     00 40 00 FF 
1eeb0     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1eeb4     18 3B 02 C6 |  if_b	mov	local15, local10
1eeb8     01 3A 86 C1 |  if_b	sub	local15, #1
1eebc     1D 31 02 C6 |  if_b	mov	local10, local15
1eec0     01 2C 66 C0 |  if_b	shl	local08, #1
1eec4     E4 FF 9F CD |  if_b	jmp	#LR__2822
1eec8                 | LR__2823
1eec8     E4 FD 9F FD | 	jmp	#LR__2802
1eecc                 | LR__2824
1eecc     7F 28 86 F1 | 	sub	local06, #127
1eed0     13 13 02 F6 | 	mov	arg01, local05
1eed4     1A 15 02 F6 | 	mov	arg02, local12
1eed8     14 17 02 F6 | 	mov	arg03, local06
1eedc     12 19 02 F6 | 	mov	arg04, local04
1eee0     8C 33 B0 FD | 	call	#__system__pack_0540
1eee4                 | LR__2825
1eee4     A7 F0 03 F6 | 	mov	ptra, fp
1eee8     B2 00 A0 FD | 	call	#popregs_
1eeec                 | __system___float_add_ret
1eeec     2D 00 64 FD | 	ret
1eef0                 | 
1eef0                 | __system___float_sqrt
1eef0     04 4A 05 F6 | 	mov	COUNT_, #4
1eef4     A8 00 A0 FD | 	call	#pushregs_
1eef8     09 1F 02 F6 | 	mov	local01, arg01
1eefc     09 FB 01 F6 | 	mov	result1, arg01
1ef00     FD 20 02 F6 | 	mov	local02, result1
1ef04     10 23 02 F6 | 	mov	local03, local02
1ef08     16 22 46 F7 | 	zerox	local03, #22
1ef0c     10 25 02 F6 | 	mov	local04, local02
1ef10     01 24 66 F0 | 	shl	local04, #1
1ef14     18 24 4E F0 | 	shr	local04, #24 wz
1ef18     1F 20 46 F0 | 	shr	local02, #31
1ef1c     70 00 90 AD |  if_e	jmp	#LR__2831
1ef20     17 22 26 F4 | 	bith	local03, #23
1ef24                 | LR__2830
1ef24     00 20 0E F2 | 	cmp	local02, #0 wz
1ef28     00 F8 3F 5F 
1ef2c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ef30     88 00 90 5D |  if_ne	jmp	#LR__2834
1ef34     FF 24 0E F2 | 	cmp	local04, #255 wz
1ef38     0F FB 01 A6 |  if_e	mov	result1, local01
1ef3c     7C 00 90 AD |  if_e	jmp	#LR__2834
1ef40     7F 24 86 F1 | 	sub	local04, #127
1ef44     01 24 CE F7 | 	test	local04, #1 wz
1ef48     01 22 66 50 |  if_ne	shl	local03, #1
1ef4c     05 22 66 F0 | 	shl	local03, #5
1ef50     11 01 38 FD | 	qsqrt	#0, local03
1ef54     01 24 86 51 |  if_ne	sub	local04, #1
1ef58     12 25 52 F6 | 	abs	local04, local04 wc
1ef5c     01 24 46 F0 | 	shr	local04, #1
1ef60     12 17 82 F6 | 	negc	arg03, local04
1ef64     10 19 02 F6 | 	mov	arg04, local02
1ef68     18 12 62 FD | 	getqx	arg01
1ef6c     09 15 02 F6 | 	mov	arg02, arg01
1ef70     19 14 66 F0 | 	shl	arg02, #25
1ef74     07 12 46 F0 | 	shr	arg01, #7
1ef78     00 80 00 FF 
1ef7c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1ef80     01 16 06 31 |  if_ae	add	arg03, #1
1ef84     01 12 46 30 |  if_ae	shr	arg01, #1
1ef88     E4 32 B0 FD | 	call	#__system__pack_0540
1ef8c     2C 00 90 FD | 	jmp	#LR__2834
1ef90                 | LR__2831
1ef90     00 22 0E F2 | 	cmp	local03, #0 wz
1ef94     0F FB 01 A6 |  if_e	mov	result1, local01
1ef98     20 00 90 AD |  if_e	jmp	#LR__2834
1ef9c     01 22 66 F0 | 	shl	local03, #1
1efa0     97 0A 48 FB | 	callpa	#(@LR__2833-@LR__2832)>>2,fcache_load_ptr_
1efa4                 | LR__2832
1efa4     00 40 00 FF 
1efa8     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1efac     01 24 86 C1 |  if_b	sub	local04, #1
1efb0     01 22 66 C0 |  if_b	shl	local03, #1
1efb4     EC FF 9F CD |  if_b	jmp	#LR__2832
1efb8                 | LR__2833
1efb8     68 FF 9F FD | 	jmp	#LR__2830
1efbc                 | LR__2834
1efbc     A7 F0 03 F6 | 	mov	ptra, fp
1efc0     B2 00 A0 FD | 	call	#popregs_
1efc4                 | __system___float_sqrt_ret
1efc4     2D 00 64 FD | 	ret
1efc8                 | 
1efc8                 | __system___float_mul
1efc8     0B 4A 05 F6 | 	mov	COUNT_, #11
1efcc     A8 00 A0 FD | 	call	#pushregs_
1efd0     09 1F 02 F6 | 	mov	local01, arg01
1efd4     0A 21 02 F6 | 	mov	local02, arg02
1efd8     0F 23 02 F6 | 	mov	local03, local01
1efdc     11 25 02 F6 | 	mov	local04, local03
1efe0     16 24 46 F7 | 	zerox	local04, #22
1efe4     11 27 02 F6 | 	mov	local05, local03
1efe8     01 26 66 F0 | 	shl	local05, #1
1efec     18 26 46 F0 | 	shr	local05, #24
1eff0     1F 22 46 F0 | 	shr	local03, #31
1eff4     10 FB 01 F6 | 	mov	result1, local02
1eff8     FD 28 02 F6 | 	mov	local06, result1
1effc     14 2B 02 F6 | 	mov	local07, local06
1f000     16 2A 46 F7 | 	zerox	local07, #22
1f004     14 2D 02 F6 | 	mov	local08, local06
1f008     01 2C 66 F0 | 	shl	local08, #1
1f00c     18 2C 46 F0 | 	shr	local08, #24
1f010     1F 28 46 F0 | 	shr	local06, #31
1f014     14 23 62 F5 | 	xor	local03, local06
1f018     FF 26 0E F2 | 	cmp	local05, #255 wz
1f01c     90 00 90 AD |  if_e	jmp	#LR__2843
1f020     FF 2C 0E F2 | 	cmp	local08, #255 wz
1f024     D8 00 90 AD |  if_e	jmp	#LR__2845
1f028     00 26 0E F2 | 	cmp	local05, #0 wz
1f02c     0C 01 90 AD |  if_e	jmp	#LR__2846
1f030     17 24 26 F4 | 	bith	local04, #23
1f034                 | LR__2840
1f034     00 2C 0E F2 | 	cmp	local08, #0 wz
1f038     44 01 90 AD |  if_e	jmp	#LR__2850
1f03c     17 2A 26 F4 | 	bith	local07, #23
1f040                 | LR__2841
1f040     12 21 02 F6 | 	mov	local02, local04
1f044     04 20 66 F0 | 	shl	local02, #4
1f048     15 29 02 F6 | 	mov	local06, local07
1f04c     05 28 66 F0 | 	shl	local06, #5
1f050     14 21 02 FD | 	qmul	local02, local06
1f054     16 27 02 F1 | 	add	local05, local08
1f058     FE 26 86 F1 | 	sub	local05, #254
1f05c     13 2F 02 F6 | 	mov	local09, local05
1f060     04 24 66 F0 | 	shl	local04, #4
1f064     05 2A 66 F0 | 	shl	local07, #5
1f068     18 30 62 FD | 	getqx	local10
1f06c     15 25 02 FD | 	qmul	local04, local07
1f070     19 32 62 FD | 	getqy	local11
1f074     00 80 00 FF 
1f078     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1f07c     18 00 90 CD |  if_b	jmp	#LR__2842
1f080     01 2E 06 F1 | 	add	local09, #1
1f084     01 30 46 F0 | 	shr	local10, #1
1f088     19 2D 02 F6 | 	mov	local08, local11
1f08c     1F 2C 66 F0 | 	shl	local08, #31
1f090     16 31 42 F5 | 	or	local10, local08
1f094     01 32 46 F0 | 	shr	local11, #1
1f098                 | LR__2842
1f098     19 13 02 F6 | 	mov	arg01, local11
1f09c     18 15 02 F6 | 	mov	arg02, local10
1f0a0     17 17 02 F6 | 	mov	arg03, local09
1f0a4     11 19 02 F6 | 	mov	arg04, local03
1f0a8     C4 31 B0 FD | 	call	#__system__pack_0540
1f0ac     10 01 90 FD | 	jmp	#LR__2854
1f0b0                 | LR__2843
1f0b0     00 24 0E F2 | 	cmp	local04, #0 wz
1f0b4     0F FB 01 56 |  if_ne	mov	result1, local01
1f0b8     04 01 90 5D |  if_ne	jmp	#LR__2854
1f0bc     FF 2C 56 F2 | 	cmps	local08, #255 wc
1f0c0     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1f0c4     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1f0c8     18 00 90 4D |  if_c_and_nz	jmp	#LR__2844
1f0cc     00 F8 3F CF 
1f0d0     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1f0d4     E8 00 90 CD |  if_b	jmp	#LR__2854
1f0d8     00 2A 0E F2 | 	cmp	local07, #0 wz
1f0dc     10 FB 01 56 |  if_ne	mov	result1, local02
1f0e0     DC 00 90 5D |  if_ne	jmp	#LR__2854
1f0e4                 | LR__2844
1f0e4     02 22 46 F5 | 	or	local03, #2
1f0e8     00 12 06 F6 | 	mov	arg01, #0
1f0ec     00 14 06 F6 | 	mov	arg02, #0
1f0f0     13 17 02 F6 | 	mov	arg03, local05
1f0f4     11 19 02 F6 | 	mov	arg04, local03
1f0f8     74 31 B0 FD | 	call	#__system__pack_0540
1f0fc     C0 00 90 FD | 	jmp	#LR__2854
1f100                 | LR__2845
1f100     00 26 0E F2 | 	cmp	local05, #0 wz
1f104     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1f108     00 F8 3F AF 
1f10c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f110     AC 00 90 AD |  if_e	jmp	#LR__2854
1f114     00 2A 0E F2 | 	cmp	local07, #0 wz
1f118     10 FB 01 56 |  if_ne	mov	result1, local02
1f11c     A0 00 90 5D |  if_ne	jmp	#LR__2854
1f120     16 17 02 F6 | 	mov	arg03, local08
1f124     11 19 02 F6 | 	mov	arg04, local03
1f128     02 18 46 F5 | 	or	arg04, #2
1f12c     00 12 06 F6 | 	mov	arg01, #0
1f130     00 14 06 F6 | 	mov	arg02, #0
1f134     38 31 B0 FD | 	call	#__system__pack_0540
1f138     84 00 90 FD | 	jmp	#LR__2854
1f13c                 | LR__2846
1f13c     00 24 0E F2 | 	cmp	local04, #0 wz
1f140     20 00 90 AD |  if_e	jmp	#LR__2849
1f144     01 24 66 F0 | 	shl	local04, #1
1f148     97 0A 48 FB | 	callpa	#(@LR__2848-@LR__2847)>>2,fcache_load_ptr_
1f14c                 | LR__2847
1f14c     00 40 00 FF 
1f150     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1f154     01 26 86 C1 |  if_b	sub	local05, #1
1f158     01 24 66 C0 |  if_b	shl	local04, #1
1f15c     EC FF 9F CD |  if_b	jmp	#LR__2847
1f160                 | LR__2848
1f160     D0 FE 9F FD | 	jmp	#LR__2840
1f164                 | LR__2849
1f164     08 22 46 F5 | 	or	local03, #8
1f168     00 12 06 F6 | 	mov	arg01, #0
1f16c     00 14 06 F6 | 	mov	arg02, #0
1f170     00 16 06 F6 | 	mov	arg03, #0
1f174     11 19 02 F6 | 	mov	arg04, local03
1f178     F4 30 B0 FD | 	call	#__system__pack_0540
1f17c     40 00 90 FD | 	jmp	#LR__2854
1f180                 | LR__2850
1f180     00 2A 0E F2 | 	cmp	local07, #0 wz
1f184     20 00 90 AD |  if_e	jmp	#LR__2853
1f188     01 2A 66 F0 | 	shl	local07, #1
1f18c     97 0A 48 FB | 	callpa	#(@LR__2852-@LR__2851)>>2,fcache_load_ptr_
1f190                 | LR__2851
1f190     00 40 00 FF 
1f194     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1f198     01 2C 86 C1 |  if_b	sub	local08, #1
1f19c     01 2A 66 C0 |  if_b	shl	local07, #1
1f1a0     EC FF 9F CD |  if_b	jmp	#LR__2851
1f1a4                 | LR__2852
1f1a4     98 FE 9F FD | 	jmp	#LR__2841
1f1a8                 | LR__2853
1f1a8     08 22 46 F5 | 	or	local03, #8
1f1ac     00 12 06 F6 | 	mov	arg01, #0
1f1b0     00 14 06 F6 | 	mov	arg02, #0
1f1b4     00 16 06 F6 | 	mov	arg03, #0
1f1b8     11 19 02 F6 | 	mov	arg04, local03
1f1bc     B0 30 B0 FD | 	call	#__system__pack_0540
1f1c0                 | LR__2854
1f1c0     A7 F0 03 F6 | 	mov	ptra, fp
1f1c4     B2 00 A0 FD | 	call	#popregs_
1f1c8                 | __system___float_mul_ret
1f1c8     2D 00 64 FD | 	ret
1f1cc                 | 
1f1cc                 | __system___float_div
1f1cc     0E 4A 05 F6 | 	mov	COUNT_, #14
1f1d0     A8 00 A0 FD | 	call	#pushregs_
1f1d4     09 23 02 F6 | 	mov	local03, arg01
1f1d8     0A 25 02 F6 | 	mov	local04, arg02
1f1dc     11 27 02 F6 | 	mov	local05, local03
1f1e0     13 29 02 F6 | 	mov	local06, local05
1f1e4     16 28 46 F7 | 	zerox	local06, #22
1f1e8     13 2B 02 F6 | 	mov	local07, local05
1f1ec     01 2A 66 F0 | 	shl	local07, #1
1f1f0     18 2A 46 F0 | 	shr	local07, #24
1f1f4     1F 26 46 F0 | 	shr	local05, #31
1f1f8     12 FB 01 F6 | 	mov	result1, local04
1f1fc     FD 2C 02 F6 | 	mov	local08, result1
1f200     16 2F 02 F6 | 	mov	local09, local08
1f204     16 2E 46 F7 | 	zerox	local09, #22
1f208     16 31 02 F6 | 	mov	local10, local08
1f20c     01 30 66 F0 | 	shl	local10, #1
1f210     18 30 46 F0 | 	shr	local10, #24
1f214     1F 2C 46 F0 | 	shr	local08, #31
1f218     16 27 62 F5 | 	xor	local05, local08
1f21c     FF 2A 0E F2 | 	cmp	local07, #255 wz
1f220     D4 00 90 AD |  if_e	jmp	#LR__2865
1f224     FF 30 0E F2 | 	cmp	local10, #255 wz
1f228     04 01 90 AD |  if_e	jmp	#LR__2866
1f22c     00 2A 0E F2 | 	cmp	local07, #0 wz
1f230     24 01 90 AD |  if_e	jmp	#LR__2867
1f234     17 28 26 F4 | 	bith	local06, #23
1f238                 | LR__2860
1f238     00 30 0E F2 | 	cmp	local10, #0 wz
1f23c     70 01 90 AD |  if_e	jmp	#LR__2871
1f240     17 2E 26 F4 | 	bith	local09, #23
1f244                 | LR__2861
1f244     18 2B 82 F1 | 	sub	local07, local10
1f248     15 33 02 F6 | 	mov	local11, local07
1f24c     14 13 02 F6 | 	mov	arg01, local06
1f250     02 12 46 F0 | 	shr	arg01, #2
1f254     1E 28 66 F0 | 	shl	local06, #30
1f258     14 15 02 F6 | 	mov	arg02, local06
1f25c     17 17 02 F6 | 	mov	arg03, local09
1f260     28 12 62 FD | 	setq	arg01
1f264     0B 15 12 FD | 	qdiv	arg02, arg03
1f268     00 34 06 F6 | 	mov	local12, #0
1f26c     18 1E 62 FD | 	getqx	local01
1f270     19 FC 61 FD | 	getqy	result2
1f274     FE 20 02 F6 | 	mov	local02, result2
1f278     0F 37 02 F6 | 	mov	local13, local01
1f27c     00 20 4E F2 | 	cmps	local02, #0 wz
1f280     1B 39 02 F6 | 	mov	local14, local13
1f284     19 38 66 F0 | 	shl	local14, #25
1f288     01 34 06 56 |  if_ne	mov	local12, #1
1f28c     1A 39 42 F5 | 	or	local14, local12
1f290     07 36 46 F0 | 	shr	local13, #7
1f294     00 80 00 FF 
1f298     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1f29c     1C 00 90 CD |  if_b	jmp	#LR__2862
1f2a0     01 32 06 F1 | 	add	local11, #1
1f2a4     01 38 46 F0 | 	shr	local14, #1
1f2a8     1B 35 02 F6 | 	mov	local12, local13
1f2ac     1F 34 66 F0 | 	shl	local12, #31
1f2b0     1A 39 42 F5 | 	or	local14, local12
1f2b4     01 36 46 F0 | 	shr	local13, #1
1f2b8     24 00 90 FD | 	jmp	#LR__2864
1f2bc                 | LR__2862
1f2bc     00 40 00 FF 
1f2c0     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1f2c4     18 00 90 3D |  if_ae	jmp	#LR__2863
1f2c8     01 32 86 F1 | 	sub	local11, #1
1f2cc     01 36 66 F0 | 	shl	local13, #1
1f2d0     1C 35 02 F6 | 	mov	local12, local14
1f2d4     1F 34 46 F0 | 	shr	local12, #31
1f2d8     1A 37 42 F5 | 	or	local13, local12
1f2dc     01 38 66 F0 | 	shl	local14, #1
1f2e0                 | LR__2863
1f2e0                 | LR__2864
1f2e0     1B 13 02 F6 | 	mov	arg01, local13
1f2e4     1C 15 02 F6 | 	mov	arg02, local14
1f2e8     19 17 02 F6 | 	mov	arg03, local11
1f2ec     13 19 02 F6 | 	mov	arg04, local05
1f2f0     7C 2F B0 FD | 	call	#__system__pack_0540
1f2f4     F8 00 90 FD | 	jmp	#LR__2875
1f2f8                 | LR__2865
1f2f8     00 28 0E F2 | 	cmp	local06, #0 wz
1f2fc     11 FB 01 56 |  if_ne	mov	result1, local03
1f300     EC 00 90 5D |  if_ne	jmp	#LR__2875
1f304     FF 30 0E F2 | 	cmp	local10, #255 wz
1f308     00 F8 3F AF 
1f30c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f310     DC 00 90 AD |  if_e	jmp	#LR__2875
1f314     02 26 46 F5 | 	or	local05, #2
1f318     00 12 06 F6 | 	mov	arg01, #0
1f31c     00 14 06 F6 | 	mov	arg02, #0
1f320     15 17 02 F6 | 	mov	arg03, local07
1f324     13 19 02 F6 | 	mov	arg04, local05
1f328     44 2F B0 FD | 	call	#__system__pack_0540
1f32c     C0 00 90 FD | 	jmp	#LR__2875
1f330                 | LR__2866
1f330     00 2E 0E F2 | 	cmp	local09, #0 wz
1f334     12 FB 01 56 |  if_ne	mov	result1, local04
1f338     B4 00 90 5D |  if_ne	jmp	#LR__2875
1f33c     13 19 02 F6 | 	mov	arg04, local05
1f340     08 18 46 F5 | 	or	arg04, #8
1f344     00 12 06 F6 | 	mov	arg01, #0
1f348     00 14 06 F6 | 	mov	arg02, #0
1f34c     00 16 06 F6 | 	mov	arg03, #0
1f350     1C 2F B0 FD | 	call	#__system__pack_0540
1f354     98 00 90 FD | 	jmp	#LR__2875
1f358                 | LR__2867
1f358     00 28 0E F2 | 	cmp	local06, #0 wz
1f35c     20 00 90 AD |  if_e	jmp	#LR__2870
1f360     01 28 66 F0 | 	shl	local06, #1
1f364     97 0A 48 FB | 	callpa	#(@LR__2869-@LR__2868)>>2,fcache_load_ptr_
1f368                 | LR__2868
1f368     00 40 00 FF 
1f36c     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1f370     01 2A 86 C1 |  if_b	sub	local07, #1
1f374     01 28 66 C0 |  if_b	shl	local06, #1
1f378     EC FF 9F CD |  if_b	jmp	#LR__2868
1f37c                 | LR__2869
1f37c     B8 FE 9F FD | 	jmp	#LR__2860
1f380                 | LR__2870
1f380     00 30 0E F2 | 	cmp	local10, #0 wz
1f384     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1f388     00 F8 3F AF 
1f38c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f390     5C 00 90 AD |  if_e	jmp	#LR__2875
1f394     13 19 02 F6 | 	mov	arg04, local05
1f398     08 18 46 F5 | 	or	arg04, #8
1f39c     00 12 06 F6 | 	mov	arg01, #0
1f3a0     00 14 06 F6 | 	mov	arg02, #0
1f3a4     00 16 06 F6 | 	mov	arg03, #0
1f3a8     C4 2E B0 FD | 	call	#__system__pack_0540
1f3ac     40 00 90 FD | 	jmp	#LR__2875
1f3b0                 | LR__2871
1f3b0     00 2E 0E F2 | 	cmp	local09, #0 wz
1f3b4     20 00 90 AD |  if_e	jmp	#LR__2874
1f3b8     01 2E 66 F0 | 	shl	local09, #1
1f3bc     97 0A 48 FB | 	callpa	#(@LR__2873-@LR__2872)>>2,fcache_load_ptr_
1f3c0                 | LR__2872
1f3c0     00 40 00 FF 
1f3c4     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1f3c8     01 30 86 C1 |  if_b	sub	local10, #1
1f3cc     01 2E 66 C0 |  if_b	shl	local09, #1
1f3d0     EC FF 9F CD |  if_b	jmp	#LR__2872
1f3d4                 | LR__2873
1f3d4     6C FE 9F FD | 	jmp	#LR__2861
1f3d8                 | LR__2874
1f3d8     02 26 46 F5 | 	or	local05, #2
1f3dc     00 12 06 F6 | 	mov	arg01, #0
1f3e0     00 14 06 F6 | 	mov	arg02, #0
1f3e4     00 16 06 F6 | 	mov	arg03, #0
1f3e8     13 19 02 F6 | 	mov	arg04, local05
1f3ec     80 2E B0 FD | 	call	#__system__pack_0540
1f3f0                 | LR__2875
1f3f0     A7 F0 03 F6 | 	mov	ptra, fp
1f3f4     B2 00 A0 FD | 	call	#popregs_
1f3f8                 | __system___float_div_ret
1f3f8     2D 00 64 FD | 	ret
1f3fc                 | 
1f3fc                 | __system___float_cmp
1f3fc     00 C0 3F FF 
1f400     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1f404     00 C0 3F CF 
1f408     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1f40c     0B FB 01 36 |  if_ae	mov	result1, arg03
1f410     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1f414     00 C0 7F FF 
1f418     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1f41c     00 C0 7F CF 
1f420     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1f424     0B FB 01 36 |  if_ae	mov	result1, arg03
1f428     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1f42c     00 12 56 F2 | 	cmps	arg01, #0 wc
1f430     2C 00 90 3D |  if_ae	jmp	#LR__2880
1f434     00 14 56 F2 | 	cmps	arg02, #0 wc
1f438     0A FB 01 C6 |  if_b	mov	result1, arg02
1f43c     09 FB 81 C1 |  if_b	sub	result1, arg01
1f440     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1f444     00 14 0E F2 | 	cmp	arg02, #0 wz
1f448     00 00 40 AF 
1f44c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1f450     00 FA 05 A6 |  if_e	mov	result1, #0
1f454     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1f458     01 FA 65 F6 | 	neg	result1, #1
1f45c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1f460                 | LR__2880
1f460     00 14 56 F2 | 	cmps	arg02, #0 wc
1f464     1C 00 90 3D |  if_ae	jmp	#LR__2881
1f468     00 12 0E F2 | 	cmp	arg01, #0 wz
1f46c     00 00 40 AF 
1f470     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1f474     00 FA 05 A6 |  if_e	mov	result1, #0
1f478     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1f47c     01 FA 05 F6 | 	mov	result1, #1
1f480     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1f484                 | LR__2881
1f484     0A 13 82 F1 | 	sub	arg01, arg02
1f488     09 FB 01 F6 | 	mov	result1, arg01
1f48c                 | __system___float_cmp_ret
1f48c     2D 00 64 FD | 	ret
1f490                 | 
1f490                 | __system___float_tointeger
1f490     02 4A 05 F6 | 	mov	COUNT_, #2
1f494     A8 00 A0 FD | 	call	#pushregs_
1f498     50 00 B0 FD | 	call	#__system___float_Unpack
1f49c     FF FF 7F FF 
1f4a0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1f4a4     34 00 90 CD |  if_b	jmp	#LR__2890
1f4a8     1F FC 55 F2 | 	cmps	result2, #31 wc
1f4ac     2C 00 90 3D |  if_ae	jmp	#LR__2890
1f4b0     02 FE 65 F0 | 	shl	result3, #2
1f4b4     1E 1E 06 F6 | 	mov	local01, #30
1f4b8     FE 1E 82 F1 | 	sub	local01, result2
1f4bc     0F FF 41 F0 | 	shr	result3, local01
1f4c0     FF 20 02 F6 | 	mov	local02, result3
1f4c4     0A 21 02 F1 | 	add	local02, arg02
1f4c8     01 20 46 F0 | 	shr	local02, #1
1f4cc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f4d0     10 21 62 56 |  if_ne	neg	local02, local02
1f4d4     10 FB 01 F6 | 	mov	result1, local02
1f4d8     04 00 90 FD | 	jmp	#LR__2891
1f4dc                 | LR__2890
1f4dc     00 FA 05 F6 | 	mov	result1, #0
1f4e0                 | LR__2891
1f4e0     A7 F0 03 F6 | 	mov	ptra, fp
1f4e4     B2 00 A0 FD | 	call	#popregs_
1f4e8                 | __system___float_tointeger_ret
1f4e8     2D 00 64 FD | 	ret
1f4ec                 | 
1f4ec                 | __system___float_Unpack
1f4ec     09 01 02 F6 | 	mov	_var01, arg01
1f4f0     1F 00 46 F0 | 	shr	_var01, #31
1f4f4     09 03 02 F6 | 	mov	_var02, arg01
1f4f8     01 02 66 F0 | 	shl	_var02, #1
1f4fc     18 02 4E F0 | 	shr	_var02, #24 wz
1f500     17 13 06 F4 | 	bitl	arg01, #279
1f504     06 12 66 50 |  if_ne	shl	arg01, #6
1f508     1D 12 26 54 |  if_ne	bith	arg01, #29
1f50c     1C 00 90 5D |  if_ne	jmp	#LR__2900
1f510     09 05 92 F7 | 	encod	_var03, arg01 wc
1f514     01 04 06 C1 |  if_b	add	_var03, #1
1f518     17 04 86 F1 | 	sub	_var03, #23
1f51c     02 03 02 F6 | 	mov	_var02, _var03
1f520     07 FC 05 F6 | 	mov	result2, #7
1f524     02 FD 81 F1 | 	sub	result2, _var03
1f528     FE 12 62 F0 | 	shl	arg01, result2
1f52c                 | LR__2900
1f52c     7F 02 86 F1 | 	sub	_var02, #127
1f530     09 FF 01 F6 | 	mov	result3, arg01
1f534     00 FB 01 F6 | 	mov	result1, _var01
1f538     01 FD 01 F6 | 	mov	result2, _var02
1f53c                 | __system___float_Unpack_ret
1f53c     2D 00 64 FD | 	ret
1f540                 | 
1f540                 | __system___float_Pack
1f540     00 00 06 F6 | 	mov	_var01, #0
1f544     00 16 0E F2 | 	cmp	arg03, #0 wz
1f548     8C 00 90 AD |  if_e	jmp	#LR__2911
1f54c     0B 03 92 F7 | 	encod	_var02, arg03 wc
1f550     01 02 06 C1 |  if_b	add	_var02, #1
1f554     21 00 06 F6 | 	mov	_var01, #33
1f558     01 01 82 F1 | 	sub	_var01, _var02
1f55c     00 17 62 F0 | 	shl	arg03, _var01
1f560     03 02 06 F6 | 	mov	_var02, #3
1f564     00 03 82 F1 | 	sub	_var02, _var01
1f568     01 15 02 F1 | 	add	arg02, _var02
1f56c     0A 05 02 F6 | 	mov	_var03, arg02
1f570     00 17 06 F1 | 	add	arg03, #256
1f574     0B 03 02 F6 | 	mov	_var02, arg03
1f578     FF 02 2E F5 | 	andn	_var02, #255 wz
1f57c     01 04 06 A1 |  if_e	add	_var03, #1
1f580     7F 04 06 F1 | 	add	_var03, #127
1f584     FF FF 7F FF 
1f588     E9 05 46 F3 | 	fges	_var03, ##-23
1f58c     FF 04 66 F3 | 	fles	_var03, #255
1f590     01 04 56 F2 | 	cmps	_var03, #1 wc
1f594     1C 00 90 3D |  if_ae	jmp	#LR__2910
1f598     01 16 46 F0 | 	shr	arg03, #1
1f59c     1F 02 C6 F9 | 	decod	_var02, #31
1f5a0     0B 03 02 F1 | 	add	_var02, arg03
1f5a4     02 05 62 F6 | 	neg	_var03, _var03
1f5a8     02 03 42 F0 | 	shr	_var02, _var03
1f5ac     01 17 02 F6 | 	mov	arg03, _var02
1f5b0     00 04 06 F6 | 	mov	_var03, #0
1f5b4                 | LR__2910
1f5b4     09 FB 01 F6 | 	mov	result1, arg01
1f5b8     1F FA 65 F0 | 	shl	result1, #31
1f5bc     02 03 02 F6 | 	mov	_var02, _var03
1f5c0     17 02 66 F0 | 	shl	_var02, #23
1f5c4     01 FB 41 F5 | 	or	result1, _var02
1f5c8     0B 07 02 F6 | 	mov	_var04, arg03
1f5cc     09 06 46 F0 | 	shr	_var04, #9
1f5d0     03 FB 41 F5 | 	or	result1, _var04
1f5d4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1f5d8                 | LR__2911
1f5d8     00 FB 01 F6 | 	mov	result1, _var01
1f5dc                 | __system___float_Pack_ret
1f5dc     2D 00 64 FD | 	ret
1f5e0                 | 
1f5e0                 | __system___basic_print_float
1f5e0     05 4A 05 F6 | 	mov	COUNT_, #5
1f5e4     A8 00 A0 FD | 	call	#pushregs_
1f5e8     09 1F 02 F6 | 	mov	local01, arg01
1f5ec     0A 21 02 F6 | 	mov	local02, arg02
1f5f0     0B 23 0A F6 | 	mov	local03, arg03 wz
1f5f4     0C 25 02 F6 | 	mov	local04, arg04
1f5f8     14 00 90 5D |  if_ne	jmp	#LR__2920
1f5fc     23 24 0E F2 | 	cmp	local04, #35 wz
1f600     80 02 10 AF 
1f604     00 26 06 A6 |  if_e	mov	local05, ##537198592
1f608     1D 26 C6 59 |  if_ne	decod	local05, #29
1f60c     13 23 02 F6 | 	mov	local03, local05
1f610                 | LR__2920
1f610     0F 13 02 F6 | 	mov	arg01, local01
1f614     40 27 B0 FD | 	call	#__system___gettxfunc
1f618     FD 26 0A F6 | 	mov	local05, result1 wz
1f61c     00 FA 05 A6 |  if_e	mov	result1, #0
1f620     13 13 02 56 |  if_ne	mov	arg01, local05
1f624     11 15 02 56 |  if_ne	mov	arg02, local03
1f628     10 17 02 56 |  if_ne	mov	arg03, local02
1f62c     12 19 02 56 |  if_ne	mov	arg04, local04
1f630     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
1f634     A7 F0 03 F6 | 	mov	ptra, fp
1f638     B2 00 A0 FD | 	call	#popregs_
1f63c                 | __system___basic_print_float_ret
1f63c     2D 00 64 FD | 	ret
1f640                 | 
1f640                 | __system____builtin_atoi
1f640     07 4A 05 F6 | 	mov	COUNT_, #7
1f644     A8 00 A0 FD | 	call	#pushregs_
1f648                 | __system____builtin_atoi_enter
1f648     09 1F 02 F6 | 	mov	local01, arg01
1f64c     0A 21 02 F6 | 	mov	local02, arg02
1f650     00 22 06 F6 | 	mov	local03, #0
1f654     00 24 06 F6 | 	mov	local04, #0
1f658     00 26 06 F6 | 	mov	local05, #0
1f65c     97 08 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
1f660                 | LR__2930
1f660     0F 29 C2 FA | 	rdbyte	local06, local01
1f664     20 28 0E F2 | 	cmp	local06, #32 wz
1f668     01 1E 06 A1 |  if_e	add	local01, #1
1f66c     F0 FF 9F AD |  if_e	jmp	#LR__2930
1f670                 | LR__2931
1f670     0F 2B C2 FA | 	rdbyte	local07, local01
1f674                 | LR__2932
1f674     2D 2A 0E F2 | 	cmp	local07, #45 wz
1f678     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1f67c     18 00 90 5D |  if_ne	jmp	#LR__2933
1f680     01 1E 06 F1 | 	add	local01, #1
1f684     2D 2A 0E F2 | 	cmp	local07, #45 wz
1f688     01 28 06 A6 |  if_e	mov	local06, #1
1f68c     14 27 C2 A2 |  if_e	subr	local05, local06
1f690     0F 2B C2 FA | 	rdbyte	local07, local01
1f694     DC FF 9F FD | 	jmp	#LR__2932
1f698                 | LR__2933
1f698     97 48 48 FB | 	callpa	#(@LR__2941-@LR__2934)>>2,fcache_load_ptr_
1f69c                 | LR__2934
1f69c                 | LR__2935
1f69c     0F 2B C2 FA | 	rdbyte	local07, local01
1f6a0     5F 2A 0E F2 | 	cmp	local07, #95 wz
1f6a4     01 1E 06 F1 | 	add	local01, #1
1f6a8     F0 FF 9F AD |  if_e	jmp	#LR__2935
1f6ac     30 2A 0E F2 | 	cmp	local07, #48 wz
1f6b0     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1f6b4     00 24 06 A6 |  if_e	mov	local04, #0
1f6b8     60 00 90 AD |  if_e	jmp	#LR__2940
1f6bc     31 2A 56 F2 | 	cmps	local07, #49 wc
1f6c0     18 00 90 CD |  if_b	jmp	#LR__2936
1f6c4     3A 2A 56 F2 | 	cmps	local07, #58 wc
1f6c8     15 25 02 C6 |  if_b	mov	local04, local07
1f6cc     30 24 86 C1 |  if_b	sub	local04, #48
1f6d0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1f6d4     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1f6d8     40 00 90 CD |  if_b	jmp	#LR__2939
1f6dc                 | LR__2936
1f6dc     0B 20 56 F2 | 	cmps	local02, #11 wc
1f6e0     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1f6e4     14 00 90 CD |  if_b	jmp	#LR__2937
1f6e8     67 2A 56 F2 | 	cmps	local07, #103 wc
1f6ec     61 2A 86 C1 |  if_b	sub	local07, #97
1f6f0     0A 24 06 C6 |  if_b	mov	local04, #10
1f6f4     15 25 02 C1 |  if_b	add	local04, local07
1f6f8     20 00 90 CD |  if_b	jmp	#LR__2938
1f6fc                 | LR__2937
1f6fc     0B 20 56 F2 | 	cmps	local02, #11 wc
1f700     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1f704     24 00 90 CD |  if_b	jmp	#LR__2942
1f708     47 2A 56 F2 | 	cmps	local07, #71 wc
1f70c     41 2A 86 C1 |  if_b	sub	local07, #65
1f710     0A 24 06 C6 |  if_b	mov	local04, #10
1f714     15 25 02 C1 |  if_b	add	local04, local07
1f718     10 00 90 3D |  if_ae	jmp	#LR__2942
1f71c                 | LR__2938
1f71c                 | LR__2939
1f71c                 | LR__2940
1f71c     11 21 02 FD | 	qmul	local02, local03
1f720     18 22 62 FD | 	getqx	local03
1f724     12 23 02 F1 | 	add	local03, local04
1f728     70 FF 9F FD | 	jmp	#LR__2934
1f72c                 | LR__2941
1f72c                 | LR__2942
1f72c     00 20 0E F2 | 	cmp	local02, #0 wz
1f730     64 00 90 5D |  if_ne	jmp	#LR__2948
1f734     78 2A 0E F2 | 	cmp	local07, #120 wz
1f738     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1f73c     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1f740     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1f744     14 00 90 5D |  if_ne	jmp	#LR__2943
1f748     0F 13 02 F6 | 	mov	arg01, local01
1f74c     10 14 06 F6 | 	mov	arg02, #16
1f750     EC FE BF FD | 	call	#__system____builtin_atoi
1f754     FD 22 02 F6 | 	mov	local03, result1
1f758     3C 00 90 FD | 	jmp	#LR__2947
1f75c                 | LR__2943
1f75c     62 2A 0E F2 | 	cmp	local07, #98 wz
1f760     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1f764     14 00 90 5D |  if_ne	jmp	#LR__2944
1f768     0F 13 02 F6 | 	mov	arg01, local01
1f76c     02 14 06 F6 | 	mov	arg02, #2
1f770     CC FE BF FD | 	call	#__system____builtin_atoi
1f774     FD 22 02 F6 | 	mov	local03, result1
1f778     1C 00 90 FD | 	jmp	#LR__2946
1f77c                 | LR__2944
1f77c     6F 2A 0E F2 | 	cmp	local07, #111 wz
1f780     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1f784     10 00 90 5D |  if_ne	jmp	#LR__2945
1f788     0F 13 02 F6 | 	mov	arg01, local01
1f78c     08 14 06 F6 | 	mov	arg02, #8
1f790     AC FE BF FD | 	call	#__system____builtin_atoi
1f794     FD 22 02 F6 | 	mov	local03, result1
1f798                 | LR__2945
1f798                 | LR__2946
1f798                 | LR__2947
1f798                 | LR__2948
1f798     00 26 0E F2 | 	cmp	local05, #0 wz
1f79c     11 23 62 56 |  if_ne	neg	local03, local03
1f7a0     11 FB 01 F6 | 	mov	result1, local03
1f7a4     A7 F0 03 F6 | 	mov	ptra, fp
1f7a8     B2 00 A0 FD | 	call	#popregs_
1f7ac                 | __system____builtin_atoi_ret
1f7ac     2D 00 64 FD | 	ret
1f7b0                 | 
1f7b0                 | __system____builtin_atof
1f7b0     07 4A 05 F6 | 	mov	COUNT_, #7
1f7b4     A8 00 A0 FD | 	call	#pushregs_
1f7b8     09 1F 02 F6 | 	mov	local01, arg01
1f7bc     00 20 06 F6 | 	mov	local02, #0
1f7c0     00 22 06 F6 | 	mov	local03, #0
1f7c4     00 24 06 F6 | 	mov	local04, #0
1f7c8     00 26 06 F6 | 	mov	local05, #0
1f7cc     97 08 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
1f7d0                 | LR__2950
1f7d0     0F 17 C2 FA | 	rdbyte	arg03, local01
1f7d4     20 16 0E F2 | 	cmp	arg03, #32 wz
1f7d8     01 1E 06 A1 |  if_e	add	local01, #1
1f7dc     F0 FF 9F AD |  if_e	jmp	#LR__2950
1f7e0                 | LR__2951
1f7e0     0F 29 C2 FA | 	rdbyte	local06, local01
1f7e4                 | LR__2952
1f7e4     2B 28 0E F2 | 	cmp	local06, #43 wz
1f7e8     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1f7ec     14 00 90 5D |  if_ne	jmp	#LR__2953
1f7f0     2D 28 0E F2 | 	cmp	local06, #45 wz
1f7f4     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1f7f8     01 1E 06 F1 | 	add	local01, #1
1f7fc     0F 29 C2 FA | 	rdbyte	local06, local01
1f800     E0 FF 9F FD | 	jmp	#LR__2952
1f804                 | LR__2953
1f804                 | LR__2954
1f804     97 08 48 FB | 	callpa	#(@LR__2956-@LR__2955)>>2,fcache_load_ptr_
1f808                 | LR__2955
1f808     0F 29 C2 FA | 	rdbyte	local06, local01
1f80c     5F 28 0E F2 | 	cmp	local06, #95 wz
1f810     01 1E 06 F1 | 	add	local01, #1
1f814     F0 FF 9F AD |  if_e	jmp	#LR__2955
1f818                 | LR__2956
1f818     00 28 0E F2 | 	cmp	local06, #0 wz
1f81c     5C 00 90 AD |  if_e	jmp	#LR__2958
1f820     30 28 56 F2 | 	cmps	local06, #48 wc
1f824     44 00 90 CD |  if_b	jmp	#LR__2957
1f828     3A 28 56 F2 | 	cmps	local06, #58 wc
1f82c     3C 00 90 3D |  if_ae	jmp	#LR__2957
1f830     10 13 02 F6 | 	mov	arg01, local02
1f834     00 90 20 FF 
1f838     00 14 06 F6 | 	mov	arg02, ##1092616192
1f83c     88 F7 BF FD | 	call	#__system___float_mul
1f840     FD 20 02 F6 | 	mov	local02, result1
1f844     30 28 86 F1 | 	sub	local06, #48
1f848     14 13 02 F6 | 	mov	arg01, local06
1f84c     74 F3 BF FD | 	call	#__system___float_fromuns
1f850     FD 14 02 F6 | 	mov	arg02, result1
1f854     10 13 02 F6 | 	mov	arg01, local02
1f858     9C F3 BF FD | 	call	#__system___float_add
1f85c     FD 20 02 F6 | 	mov	local02, result1
1f860     00 26 0E F2 | 	cmp	local05, #0 wz
1f864     01 22 86 51 |  if_ne	sub	local03, #1
1f868     98 FF 9F FD | 	jmp	#LR__2954
1f86c                 | LR__2957
1f86c     2E 28 0E F2 | 	cmp	local06, #46 wz
1f870     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1f874     01 26 06 A6 |  if_e	mov	local05, #1
1f878     88 FF 9F AD |  if_e	jmp	#LR__2954
1f87c                 | LR__2958
1f87c     45 28 0E F2 | 	cmp	local06, #69 wz
1f880     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1f884     18 00 90 5D |  if_ne	jmp	#LR__2959
1f888     0F 13 02 F6 | 	mov	arg01, local01
1f88c     00 14 06 F6 | 	mov	arg02, #0
1f890     AC FD BF FD | 	call	#__system____builtin_atoi
1f894     11 FB 01 F1 | 	add	result1, local03
1f898     FD 2A 02 F6 | 	mov	local07, result1
1f89c     04 00 90 FD | 	jmp	#LR__2960
1f8a0                 | LR__2959
1f8a0     11 2B 02 F6 | 	mov	local07, local03
1f8a4                 | LR__2960
1f8a4     15 17 02 F6 | 	mov	arg03, local07
1f8a8     10 13 02 F6 | 	mov	arg01, local02
1f8ac     00 90 20 FF 
1f8b0     00 14 06 F6 | 	mov	arg02, ##1092616192
1f8b4     BC 06 B0 FD | 	call	#__system___float_pow_n
1f8b8     12 FB 61 F5 | 	xor	result1, local04
1f8bc     A7 F0 03 F6 | 	mov	ptra, fp
1f8c0     B2 00 A0 FD | 	call	#popregs_
1f8c4                 | __system____builtin_atof_ret
1f8c4     2D 00 64 FD | 	ret
1f8c8                 | 
1f8c8                 | __system____builtin_ilogb
1f8c8     20 FC BF FD | 	call	#__system___float_Unpack
1f8cc     00 FE 0D F2 | 	cmp	result3, #0 wz
1f8d0     00 00 40 AF 
1f8d4     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1f8d8     24 00 90 AD |  if_e	jmp	#LR__2971
1f8dc     80 FC 0D F2 | 	cmp	result2, #128 wz
1f8e0     18 00 90 5D |  if_ne	jmp	#LR__2970
1f8e4     00 00 10 FF 
1f8e8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1f8ec     1E FA CD A9 |  if_e	bmask	result1, #30
1f8f0     0C 00 90 AD |  if_e	jmp	#LR__2971
1f8f4     1F FA C5 F9 | 	decod	result1, #31
1f8f8     04 00 90 FD | 	jmp	#LR__2971
1f8fc                 | LR__2970
1f8fc     FE FA 01 F6 | 	mov	result1, result2
1f900                 | LR__2971
1f900                 | __system____builtin_ilogb_ret
1f900     2D 00 64 FD | 	ret
1f904                 | 
1f904                 | __system____builtin_sinf
1f904     03 4A 05 F6 | 	mov	COUNT_, #3
1f908     A8 00 A0 FD | 	call	#pushregs_
1f90c     09 1F 02 F6 | 	mov	local01, arg01
1f910     87 64 20 FF 
1f914     DB 15 06 F6 | 	mov	arg02, ##1086918619
1f918     B0 F8 BF FD | 	call	#__system___float_div
1f91c     FD 12 02 F6 | 	mov	arg01, result1
1f920     00 14 06 F6 | 	mov	arg02, #0
1f924     68 FB BF FD | 	call	#__system___float_tointeger
1f928     FD 16 0A F6 | 	mov	arg03, result1 wz
1f92c     44 00 90 AD |  if_e	jmp	#LR__2980
1f930     0B 13 52 F6 | 	abs	arg01, arg03 wc
1f934     1F 20 C6 C9 |  if_b	decod	local02, #31
1f938     00 20 06 36 |  if_ae	mov	local02, #0
1f93c     84 F2 BF FD | 	call	#__system___float_fromuns
1f940     10 FB 61 F5 | 	xor	result1, local02
1f944     FD 12 02 F6 | 	mov	arg01, result1
1f948     1E 14 C6 F9 | 	decod	arg02, #30
1f94c     78 F6 BF FD | 	call	#__system___float_mul
1f950     FD 12 02 F6 | 	mov	arg01, result1
1f954     87 24 20 FF 
1f958     DB 15 06 F6 | 	mov	arg02, ##1078530011
1f95c     68 F6 BF FD | 	call	#__system___float_mul
1f960     FD 14 02 F6 | 	mov	arg02, result1
1f964     0F 13 02 F6 | 	mov	arg01, local01
1f968     1F 14 E6 F4 | 	bitnot	arg02, #31
1f96c     88 F2 BF FD | 	call	#__system___float_add
1f970     FD 1E 02 F6 | 	mov	local01, result1
1f974                 | LR__2980
1f974     0F 13 02 F6 | 	mov	arg01, local01
1f978     66 E6 1E FF 
1f97c     CD 14 06 F6 | 	mov	arg02, ##1036831949
1f980     01 16 06 F6 | 	mov	arg03, #1
1f984     74 FA BF FD | 	call	#__system___float_cmp
1f988     00 FA 55 F2 | 	cmps	result1, #0 wc
1f98c     5C 00 90 3D |  if_ae	jmp	#LR__2981
1f990     0F 13 02 F6 | 	mov	arg01, local01
1f994     66 E6 5E FF 
1f998     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1f99c     01 16 66 F6 | 	neg	arg03, #1
1f9a0     58 FA BF FD | 	call	#__system___float_cmp
1f9a4     01 FA 55 F2 | 	cmps	result1, #1 wc
1f9a8     40 00 90 CD |  if_b	jmp	#LR__2981
1f9ac     0F 13 02 F6 | 	mov	arg01, local01
1f9b0     0F 15 02 F6 | 	mov	arg02, local01
1f9b4     10 F6 BF FD | 	call	#__system___float_mul
1f9b8     FD 12 02 F6 | 	mov	arg01, result1
1f9bc     0F 15 02 F6 | 	mov	arg02, local01
1f9c0     04 F6 BF FD | 	call	#__system___float_mul
1f9c4     FD 12 02 F6 | 	mov	arg01, result1
1f9c8     00 60 20 FF 
1f9cc     00 14 06 F6 | 	mov	arg02, ##1086324736
1f9d0     F8 F7 BF FD | 	call	#__system___float_div
1f9d4     FD 14 02 F6 | 	mov	arg02, result1
1f9d8     0F 13 02 F6 | 	mov	arg01, local01
1f9dc     1F 14 E6 F4 | 	bitnot	arg02, #31
1f9e0     14 F2 BF FD | 	call	#__system___float_add
1f9e4     FD 22 02 F6 | 	mov	local03, result1
1f9e8     54 00 90 FD | 	jmp	#LR__2982
1f9ec                 | LR__2981
1f9ec     0F 13 02 F6 | 	mov	arg01, local01
1f9f0     7C 91 26 FF 
1f9f4     83 15 06 F6 | 	mov	arg02, ##1294137731
1f9f8     CC F5 BF FD | 	call	#__system___float_mul
1f9fc     FD 12 02 F6 | 	mov	arg01, result1
1fa00     00 14 06 F6 | 	mov	arg02, #0
1fa04     88 FA BF FD | 	call	#__system___float_tointeger
1fa08     02 FA 65 F0 | 	shl	result1, #2
1fa0c     00 00 A0 FF 
1fa10     FD 00 48 FD | 	qrotate	##1073741824, result1
1fa14     19 12 62 FD | 	getqy	arg01
1fa18     09 13 52 F6 | 	abs	arg01, arg01 wc
1fa1c     1F 20 C6 C9 |  if_b	decod	local02, #31
1fa20     00 20 06 36 |  if_ae	mov	local02, #0
1fa24     9C F1 BF FD | 	call	#__system___float_fromuns
1fa28     10 FB 61 F5 | 	xor	result1, local02
1fa2c     FD 12 02 F6 | 	mov	arg01, result1
1fa30     00 40 27 FF 
1fa34     00 14 06 F6 | 	mov	arg02, ##1317011456
1fa38     90 F7 BF FD | 	call	#__system___float_div
1fa3c     FD 22 02 F6 | 	mov	local03, result1
1fa40                 | LR__2982
1fa40     11 FB 01 F6 | 	mov	result1, local03
1fa44     A7 F0 03 F6 | 	mov	ptra, fp
1fa48     B2 00 A0 FD | 	call	#popregs_
1fa4c                 | __system____builtin_sinf_ret
1fa4c     2D 00 64 FD | 	ret
1fa50                 | 
1fa50                 | __system____builtin_tanf
1fa50     02 4A 05 F6 | 	mov	COUNT_, #2
1fa54     A8 00 A0 FD | 	call	#pushregs_
1fa58     09 1F 02 F6 | 	mov	local01, arg01
1fa5c     A4 FE BF FD | 	call	#__system____builtin_sinf
1fa60     FD 20 02 F6 | 	mov	local02, result1
1fa64     0F 15 02 F6 | 	mov	arg02, local01
1fa68     87 E4 1F FF 
1fa6c     DB 13 06 F6 | 	mov	arg01, ##1070141403
1fa70     1F 14 E6 F4 | 	bitnot	arg02, #31
1fa74     80 F1 BF FD | 	call	#__system___float_add
1fa78     FD 12 02 F6 | 	mov	arg01, result1
1fa7c     84 FE BF FD | 	call	#__system____builtin_sinf
1fa80     FD 14 02 F6 | 	mov	arg02, result1
1fa84     10 13 02 F6 | 	mov	arg01, local02
1fa88     40 F7 BF FD | 	call	#__system___float_div
1fa8c     A7 F0 03 F6 | 	mov	ptra, fp
1fa90     B2 00 A0 FD | 	call	#popregs_
1fa94                 | __system____builtin_tanf_ret
1fa94     2D 00 64 FD | 	ret
1fa98                 | 
1fa98                 | __system____builtin_asinf
1fa98     01 4A 05 F6 | 	mov	COUNT_, #1
1fa9c     A8 00 A0 FD | 	call	#pushregs_
1faa0     09 1F 02 F6 | 	mov	local01, arg01
1faa4     0F 15 02 F6 | 	mov	arg02, local01
1faa8     0F 13 02 F6 | 	mov	arg01, local01
1faac     18 F5 BF FD | 	call	#__system___float_mul
1fab0     FD 14 02 F6 | 	mov	arg02, result1
1fab4     00 C0 1F FF 
1fab8     00 12 06 F6 | 	mov	arg01, ##1065353216
1fabc     1F 14 E6 F4 | 	bitnot	arg02, #31
1fac0     34 F1 BF FD | 	call	#__system___float_add
1fac4     FD 12 02 F6 | 	mov	arg01, result1
1fac8     24 F4 BF FD | 	call	#__system___float_sqrt
1facc     FD 14 02 F6 | 	mov	arg02, result1
1fad0     0F 13 02 F6 | 	mov	arg01, local01
1fad4     58 00 B0 FD | 	call	#__system____builtin_atan2f
1fad8     A7 F0 03 F6 | 	mov	ptra, fp
1fadc     B2 00 A0 FD | 	call	#popregs_
1fae0                 | __system____builtin_asinf_ret
1fae0     2D 00 64 FD | 	ret
1fae4                 | 
1fae4                 | __system____builtin_acosf
1fae4     01 4A 05 F6 | 	mov	COUNT_, #1
1fae8     A8 00 A0 FD | 	call	#pushregs_
1faec     09 1F 02 F6 | 	mov	local01, arg01
1faf0     0F 15 02 F6 | 	mov	arg02, local01
1faf4     0F 13 02 F6 | 	mov	arg01, local01
1faf8     CC F4 BF FD | 	call	#__system___float_mul
1fafc     FD 14 02 F6 | 	mov	arg02, result1
1fb00     00 C0 1F FF 
1fb04     00 12 06 F6 | 	mov	arg01, ##1065353216
1fb08     1F 14 E6 F4 | 	bitnot	arg02, #31
1fb0c     E8 F0 BF FD | 	call	#__system___float_add
1fb10     FD 12 02 F6 | 	mov	arg01, result1
1fb14     D8 F3 BF FD | 	call	#__system___float_sqrt
1fb18     FD 12 02 F6 | 	mov	arg01, result1
1fb1c     0F 15 02 F6 | 	mov	arg02, local01
1fb20     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1fb24     A7 F0 03 F6 | 	mov	ptra, fp
1fb28     B2 00 A0 FD | 	call	#popregs_
1fb2c                 | __system____builtin_acosf_ret
1fb2c     2D 00 64 FD | 	ret
1fb30                 | 
1fb30                 | __system____builtin_atan2f
1fb30     04 4A 05 F6 | 	mov	COUNT_, #4
1fb34     A8 00 A0 FD | 	call	#pushregs_
1fb38     09 1F 02 F6 | 	mov	local01, arg01
1fb3c     0A 21 02 F6 | 	mov	local02, arg02
1fb40     0F 13 02 F6 | 	mov	arg01, local01
1fb44     00 14 06 F6 | 	mov	arg02, #0
1fb48     01 16 06 F6 | 	mov	arg03, #1
1fb4c     AC F8 BF FD | 	call	#__system___float_cmp
1fb50     00 FA 0D F2 | 	cmp	result1, #0 wz
1fb54     28 00 90 5D |  if_ne	jmp	#LR__2990
1fb58     10 13 02 F6 | 	mov	arg01, local02
1fb5c     00 14 06 F6 | 	mov	arg02, #0
1fb60     01 16 06 F6 | 	mov	arg03, #1
1fb64     94 F8 BF FD | 	call	#__system___float_cmp
1fb68     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb6c     87 24 60 CF 
1fb70     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1fb74     DC 00 90 CD |  if_b	jmp	#LR__2991
1fb78     00 FA 05 F6 | 	mov	result1, #0
1fb7c     D4 00 90 FD | 	jmp	#LR__2991
1fb80                 | LR__2990
1fb80     10 13 02 F6 | 	mov	arg01, local02
1fb84     10 15 02 F6 | 	mov	arg02, local02
1fb88     3C F4 BF FD | 	call	#__system___float_mul
1fb8c     FD 22 02 F6 | 	mov	local03, result1
1fb90     0F 13 02 F6 | 	mov	arg01, local01
1fb94     0F 15 02 F6 | 	mov	arg02, local01
1fb98     2C F4 BF FD | 	call	#__system___float_mul
1fb9c     FD 14 02 F6 | 	mov	arg02, result1
1fba0     11 13 02 F6 | 	mov	arg01, local03
1fba4     50 F0 BF FD | 	call	#__system___float_add
1fba8     FD 12 02 F6 | 	mov	arg01, result1
1fbac     40 F3 BF FD | 	call	#__system___float_sqrt
1fbb0     FD 22 02 F6 | 	mov	local03, result1
1fbb4     10 13 02 F6 | 	mov	arg01, local02
1fbb8     11 15 02 F6 | 	mov	arg02, local03
1fbbc     0C F6 BF FD | 	call	#__system___float_div
1fbc0     FD 20 02 F6 | 	mov	local02, result1
1fbc4     0F 13 02 F6 | 	mov	arg01, local01
1fbc8     11 15 02 F6 | 	mov	arg02, local03
1fbcc     FC F5 BF FD | 	call	#__system___float_div
1fbd0     FD 1E 02 F6 | 	mov	local01, result1
1fbd4     00 40 27 FF 
1fbd8     00 12 06 F6 | 	mov	arg01, ##1317011456
1fbdc     10 15 02 F6 | 	mov	arg02, local02
1fbe0     E4 F3 BF FD | 	call	#__system___float_mul
1fbe4     FD 12 02 F6 | 	mov	arg01, result1
1fbe8     00 14 06 F6 | 	mov	arg02, #0
1fbec     A0 F8 BF FD | 	call	#__system___float_tointeger
1fbf0     FD 22 02 F6 | 	mov	local03, result1
1fbf4     00 40 27 FF 
1fbf8     00 12 06 F6 | 	mov	arg01, ##1317011456
1fbfc     0F 15 02 F6 | 	mov	arg02, local01
1fc00     C4 F3 BF FD | 	call	#__system___float_mul
1fc04     FD 12 02 F6 | 	mov	arg01, result1
1fc08     00 14 06 F6 | 	mov	arg02, #0
1fc0c     80 F8 BF FD | 	call	#__system___float_tointeger
1fc10     FD 22 52 FD | 	qvector	local03, result1
1fc14     87 24 20 FF 
1fc18     DB 23 06 F6 | 	mov	local03, ##1078530011
1fc1c     19 12 62 FD | 	getqy	arg01
1fc20     01 12 C6 F0 | 	sar	arg01, #1
1fc24     09 13 52 F6 | 	abs	arg01, arg01 wc
1fc28     1F 24 C6 C9 |  if_b	decod	local04, #31
1fc2c     00 24 06 36 |  if_ae	mov	local04, #0
1fc30     90 EF BF FD | 	call	#__system___float_fromuns
1fc34     12 FB 61 F5 | 	xor	result1, local04
1fc38     FD 12 02 F6 | 	mov	arg01, result1
1fc3c     00 40 27 FF 
1fc40     00 14 06 F6 | 	mov	arg02, ##1317011456
1fc44     84 F5 BF FD | 	call	#__system___float_div
1fc48     FD 14 02 F6 | 	mov	arg02, result1
1fc4c     11 13 02 F6 | 	mov	arg01, local03
1fc50     74 F3 BF FD | 	call	#__system___float_mul
1fc54                 | LR__2991
1fc54     A7 F0 03 F6 | 	mov	ptra, fp
1fc58     B2 00 A0 FD | 	call	#popregs_
1fc5c                 | __system____builtin_atan2f_ret
1fc5c     2D 00 64 FD | 	ret
1fc60                 | 
1fc60                 | __system____builtin_exp2f
1fc60     04 4A 05 F6 | 	mov	COUNT_, #4
1fc64     A8 00 A0 FD | 	call	#pushregs_
1fc68     09 1F 02 F6 | 	mov	local01, arg01
1fc6c     00 7F 21 FF 
1fc70     00 14 06 F6 | 	mov	arg02, ##1123942400
1fc74     01 16 66 F6 | 	neg	arg03, #1
1fc78     80 F7 BF FD | 	call	#__system___float_cmp
1fc7c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc80     00 C0 3F 3F 
1fc84     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1fc88     DC 00 90 3D |  if_ae	jmp	#LR__3001
1fc8c     0F 13 02 F6 | 	mov	arg01, local01
1fc90     00 7F 61 FF 
1fc94     00 14 06 F6 | 	mov	arg02, ##-1023541248
1fc98     01 16 06 F6 | 	mov	arg03, #1
1fc9c     5C F7 BF FD | 	call	#__system___float_cmp
1fca0     00 FA 55 F2 | 	cmps	result1, #0 wc
1fca4     00 FA 05 C6 |  if_b	mov	result1, #0
1fca8     BC 00 90 CD |  if_b	jmp	#LR__3001
1fcac     0F 13 02 F6 | 	mov	arg01, local01
1fcb0     00 14 06 F6 | 	mov	arg02, #0
1fcb4     D8 F7 BF FD | 	call	#__system___float_tointeger
1fcb8     FD 20 02 F6 | 	mov	local02, result1
1fcbc     10 13 52 F6 | 	abs	arg01, local02 wc
1fcc0     1F 22 C6 C9 |  if_b	decod	local03, #31
1fcc4     00 22 06 36 |  if_ae	mov	local03, #0
1fcc8     F8 EE BF FD | 	call	#__system___float_fromuns
1fccc     11 FB 61 F5 | 	xor	result1, local03
1fcd0     FD 14 02 F6 | 	mov	arg02, result1
1fcd4     0F 13 02 F6 | 	mov	arg01, local01
1fcd8     1F 14 E6 F4 | 	bitnot	arg02, #31
1fcdc     18 EF BF FD | 	call	#__system___float_add
1fce0     FD 24 02 F6 | 	mov	local04, result1
1fce4     12 13 02 F6 | 	mov	arg01, local04
1fce8     00 14 06 F6 | 	mov	arg02, #0
1fcec     01 16 06 F6 | 	mov	arg03, #1
1fcf0     08 F7 BF FD | 	call	#__system___float_cmp
1fcf4     00 FA 55 F2 | 	cmps	result1, #0 wc
1fcf8     18 00 90 3D |  if_ae	jmp	#LR__3000
1fcfc     12 13 02 F6 | 	mov	arg01, local04
1fd00     00 C0 1F FF 
1fd04     00 14 06 F6 | 	mov	arg02, ##1065353216
1fd08     EC EE BF FD | 	call	#__system___float_add
1fd0c     FD 24 02 F6 | 	mov	local04, result1
1fd10     01 20 86 F1 | 	sub	local02, #1
1fd14                 | LR__3000
1fd14     7F 20 06 F1 | 	add	local02, #127
1fd18     17 20 66 F0 | 	shl	local02, #23
1fd1c     12 13 02 F6 | 	mov	arg01, local04
1fd20     00 80 26 FF 
1fd24     00 14 06 F6 | 	mov	arg02, ##1291845632
1fd28     9C F2 BF FD | 	call	#__system___float_mul
1fd2c     FD 12 02 F6 | 	mov	arg01, result1
1fd30     00 14 06 F6 | 	mov	arg02, #0
1fd34     58 F7 BF FD | 	call	#__system___float_tointeger
1fd38     FD 24 0A F6 | 	mov	local04, result1 wz
1fd3c     10 FB 01 A6 |  if_e	mov	result1, local02
1fd40     24 00 90 AD |  if_e	jmp	#LR__3001
1fd44     3E 24 26 F4 | 	bith	local04, #62
1fd48     0F 24 62 FD | 	qexp	local04
1fd4c     10 13 02 F6 | 	mov	arg01, local02
1fd50     18 14 62 FD | 	getqx	arg02
1fd54     01 14 06 F1 | 	add	arg02, #1
1fd58     01 14 46 F0 | 	shr	arg02, #1
1fd5c     00 80 1F FF 
1fd60     00 14 06 F1 | 	add	arg02, ##1056964608
1fd64     60 F2 BF FD | 	call	#__system___float_mul
1fd68                 | LR__3001
1fd68     A7 F0 03 F6 | 	mov	ptra, fp
1fd6c     B2 00 A0 FD | 	call	#popregs_
1fd70                 | __system____builtin_exp2f_ret
1fd70     2D 00 64 FD | 	ret
1fd74                 | 
1fd74                 | __system____builtin_log2f
1fd74     06 4A 05 F6 | 	mov	COUNT_, #6
1fd78     A8 00 A0 FD | 	call	#pushregs_
1fd7c     09 1F 02 F6 | 	mov	local01, arg01
1fd80     09 21 0A F6 | 	mov	local02, arg01 wz
1fd84     00 00 40 5F 
1fd88     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1fd8c     00 40 00 AF 
1fd90     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1fd94     08 01 90 AD |  if_e	jmp	#LR__3014
1fd98     00 20 56 F2 | 	cmps	local02, #0 wc
1fd9c     00 E0 3F CF 
1fda0     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1fda4     F8 00 90 CD |  if_b	jmp	#LR__3014
1fda8     0F 13 02 F6 | 	mov	arg01, local01
1fdac     00 90 20 FF 
1fdb0     00 14 06 F6 | 	mov	arg02, ##1092616192
1fdb4     01 16 06 F6 | 	mov	arg03, #1
1fdb8     40 F6 BF FD | 	call	#__system___float_cmp
1fdbc     00 FA 0D F2 | 	cmp	result1, #0 wz
1fdc0     4D 2A 20 AF 
1fdc4     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1fdc8     D4 00 90 AD |  if_e	jmp	#LR__3014
1fdcc     0F 13 02 F6 | 	mov	arg01, local01
1fdd0     FC 16 20 FF 
1fdd4     54 14 06 F6 | 	mov	arg02, ##1076754516
1fdd8     01 16 06 F6 | 	mov	arg03, #1
1fddc     1C F6 BF FD | 	call	#__system___float_cmp
1fde0     00 FA 0D F2 | 	cmp	result1, #0 wz
1fde4     55 DC 1F AF 
1fde8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1fdec     B0 00 90 AD |  if_e	jmp	#LR__3014
1fdf0     10 23 02 F6 | 	mov	local03, local02
1fdf4     17 22 46 F0 | 	shr	local03, #23
1fdf8     11 23 E2 F8 | 	getbyte	local03, local03, #0
1fdfc     17 21 06 F4 | 	bitl	local02, #279
1fe00     10 25 02 F6 | 	mov	local04, local02
1fe04     FF 22 0E F2 | 	cmp	local03, #255 wz
1fe08     1C 00 90 5D |  if_ne	jmp	#LR__3010
1fe0c     00 24 0E F2 | 	cmp	local04, #0 wz
1fe10     00 C0 3F 5F 
1fe14     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1fe18     00 E0 3F AF 
1fe1c     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1fe20     13 FB 01 F6 | 	mov	result1, local05
1fe24     78 00 90 FD | 	jmp	#LR__3014
1fe28                 | LR__3010
1fe28     00 22 0E F2 | 	cmp	local03, #0 wz
1fe2c     17 24 26 54 |  if_ne	bith	local04, #23
1fe30     7F 22 86 51 |  if_ne	sub	local03, #127
1fe34     28 00 90 5D |  if_ne	jmp	#LR__3013
1fe38     00 24 0E F2 | 	cmp	local04, #0 wz
1fe3c     00 40 00 AF 
1fe40     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1fe44     58 00 90 AD |  if_e	jmp	#LR__3014
1fe48     7E 22 66 F6 | 	neg	local03, #126
1fe4c     97 08 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
1fe50                 | LR__3011
1fe50     17 24 2E F4 | 	testbn	local04, #23 wz
1fe54     01 24 66 A0 |  if_e	shl	local04, #1
1fe58     01 22 06 A1 |  if_e	add	local03, #1
1fe5c     F0 FF 9F AD |  if_e	jmp	#LR__3011
1fe60                 | LR__3012
1fe60                 | LR__3013
1fe60     0E 24 62 FD | 	qlog	local04
1fe64     01 22 86 F1 | 	sub	local03, #1
1fe68     11 13 52 F6 | 	abs	arg01, local03 wc
1fe6c     1F 28 C6 C9 |  if_b	decod	local06, #31
1fe70     00 28 06 36 |  if_ae	mov	local06, #0
1fe74     18 26 62 FD | 	getqx	local05
1fe78     9B 26 06 F4 | 	bitl	local05, #155
1fe7c     08 26 06 F1 | 	add	local05, #8
1fe80     04 26 46 F0 | 	shr	local05, #4
1fe84     00 C0 1F FF 
1fe88     00 26 06 F1 | 	add	local05, ##1065353216
1fe8c     34 ED BF FD | 	call	#__system___float_fromuns
1fe90     14 FB 61 F5 | 	xor	result1, local06
1fe94     FD 14 02 F6 | 	mov	arg02, result1
1fe98     13 13 02 F6 | 	mov	arg01, local05
1fe9c     58 ED BF FD | 	call	#__system___float_add
1fea0                 | LR__3014
1fea0     A7 F0 03 F6 | 	mov	ptra, fp
1fea4     B2 00 A0 FD | 	call	#popregs_
1fea8                 | __system____builtin_log2f_ret
1fea8     2D 00 64 FD | 	ret
1feac                 | 
1feac                 | __system____builtin_powf
1feac     04 4A 05 F6 | 	mov	COUNT_, #4
1feb0     A8 00 A0 FD | 	call	#pushregs_
1feb4     09 1F 02 F6 | 	mov	local01, arg01
1feb8     0A 21 02 F6 | 	mov	local02, arg02
1febc     10 13 02 F6 | 	mov	arg01, local02
1fec0     00 14 06 F6 | 	mov	arg02, #0
1fec4     C8 F5 BF FD | 	call	#__system___float_tointeger
1fec8     FD 22 02 F6 | 	mov	local03, result1
1fecc     11 13 52 F6 | 	abs	arg01, local03 wc
1fed0     1F 24 C6 C9 |  if_b	decod	local04, #31
1fed4     00 24 06 36 |  if_ae	mov	local04, #0
1fed8     E8 EC BF FD | 	call	#__system___float_fromuns
1fedc     12 FB 61 F5 | 	xor	result1, local04
1fee0     FD 12 02 F6 | 	mov	arg01, result1
1fee4     10 15 02 F6 | 	mov	arg02, local02
1fee8     01 16 06 F6 | 	mov	arg03, #1
1feec     0C F5 BF FD | 	call	#__system___float_cmp
1fef0     00 FA 0D F2 | 	cmp	result1, #0 wz
1fef4     18 00 90 5D |  if_ne	jmp	#LR__3020
1fef8     00 C0 1F FF 
1fefc     00 12 06 F6 | 	mov	arg01, ##1065353216
1ff00     0F 15 02 F6 | 	mov	arg02, local01
1ff04     11 17 02 F6 | 	mov	arg03, local03
1ff08     68 00 B0 FD | 	call	#__system___float_pow_n
1ff0c     58 00 90 FD | 	jmp	#LR__3021
1ff10                 | LR__3020
1ff10     0F 13 02 F6 | 	mov	arg01, local01
1ff14     00 14 06 F6 | 	mov	arg02, #0
1ff18     01 16 06 F6 | 	mov	arg03, #1
1ff1c     DC F4 BF FD | 	call	#__system___float_cmp
1ff20     00 FA 55 F2 | 	cmps	result1, #0 wc
1ff24     00 E0 3F CF 
1ff28     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1ff2c     38 00 90 CD |  if_b	jmp	#LR__3021
1ff30     0F 13 02 F6 | 	mov	arg01, local01
1ff34     00 14 06 F6 | 	mov	arg02, #0
1ff38     01 16 06 F6 | 	mov	arg03, #1
1ff3c     BC F4 BF FD | 	call	#__system___float_cmp
1ff40     00 FA 0D F2 | 	cmp	result1, #0 wz
1ff44     00 FA 05 A6 |  if_e	mov	result1, #0
1ff48     1C 00 90 AD |  if_e	jmp	#LR__3021
1ff4c     0F 13 02 F6 | 	mov	arg01, local01
1ff50     20 FE BF FD | 	call	#__system____builtin_log2f
1ff54     FD 12 02 F6 | 	mov	arg01, result1
1ff58     10 15 02 F6 | 	mov	arg02, local02
1ff5c     68 F0 BF FD | 	call	#__system___float_mul
1ff60     FD 12 02 F6 | 	mov	arg01, result1
1ff64     F8 FC BF FD | 	call	#__system____builtin_exp2f
1ff68                 | LR__3021
1ff68     A7 F0 03 F6 | 	mov	ptra, fp
1ff6c     B2 00 A0 FD | 	call	#popregs_
1ff70                 | __system____builtin_powf_ret
1ff70     2D 00 64 FD | 	ret
1ff74                 | 
1ff74                 | __system___float_pow_n
1ff74     05 4A 05 F6 | 	mov	COUNT_, #5
1ff78     A8 00 A0 FD | 	call	#pushregs_
1ff7c     09 1F 02 F6 | 	mov	local01, arg01
1ff80     0A 21 02 F6 | 	mov	local02, arg02
1ff84     0B 23 02 F6 | 	mov	local03, arg03
1ff88     00 22 56 F2 | 	cmps	local03, #0 wc
1ff8c     18 00 90 3D |  if_ae	jmp	#LR__3030
1ff90     01 24 06 F6 | 	mov	local04, #1
1ff94     11 23 62 F6 | 	neg	local03, local03
1ff98     00 22 56 F2 | 	cmps	local03, #0 wc
1ff9c     00 FA 05 C6 |  if_b	mov	result1, #0
1ffa0     94 00 90 CD |  if_b	jmp	#LR__3038
1ffa4     04 00 90 FD | 	jmp	#LR__3031
1ffa8                 | LR__3030
1ffa8     00 24 06 F6 | 	mov	local04, #0
1ffac                 | LR__3031
1ffac     00 C0 1F FF 
1ffb0     00 26 06 F6 | 	mov	local05, ##1065353216
1ffb4                 | LR__3032
1ffb4     01 22 56 F2 | 	cmps	local03, #1 wc
1ffb8     30 00 90 CD |  if_b	jmp	#LR__3034
1ffbc     01 22 CE F7 | 	test	local03, #1 wz
1ffc0     10 00 90 AD |  if_e	jmp	#LR__3033
1ffc4     13 13 02 F6 | 	mov	arg01, local05
1ffc8     10 15 02 F6 | 	mov	arg02, local02
1ffcc     F8 EF BF FD | 	call	#__system___float_mul
1ffd0     FD 26 02 F6 | 	mov	local05, result1
1ffd4                 | LR__3033
1ffd4     01 22 C6 F0 | 	sar	local03, #1
1ffd8     10 13 02 F6 | 	mov	arg01, local02
1ffdc     10 15 02 F6 | 	mov	arg02, local02
1ffe0     E4 EF BF FD | 	call	#__system___float_mul
1ffe4     FD 20 02 F6 | 	mov	local02, result1
1ffe8     C8 FF 9F FD | 	jmp	#LR__3032
1ffec                 | LR__3034
1ffec     00 24 0E F2 | 	cmp	local04, #0 wz
1fff0     14 00 90 AD |  if_e	jmp	#LR__3035
1fff4     0F 13 02 F6 | 	mov	arg01, local01
1fff8     13 15 02 F6 | 	mov	arg02, local05
1fffc     CC F1 BF FD | 	call	#__system___float_div
20000     FD 26 02 F6 | 	mov	local05, result1
20004     2C 00 90 FD | 	jmp	#LR__3037
20008                 | LR__3035
20008     0F 13 02 F6 | 	mov	arg01, local01
2000c     00 C0 1F FF 
20010     00 14 06 F6 | 	mov	arg02, ##1065353216
20014     01 16 06 F6 | 	mov	arg03, #1
20018     E0 F3 BF FD | 	call	#__system___float_cmp
2001c     00 FA 0D F2 | 	cmp	result1, #0 wz
20020     10 00 90 AD |  if_e	jmp	#LR__3036
20024     0F 13 02 F6 | 	mov	arg01, local01
20028     13 15 02 F6 | 	mov	arg02, local05
2002c     98 EF BF FD | 	call	#__system___float_mul
20030     FD 26 02 F6 | 	mov	local05, result1
20034                 | LR__3036
20034                 | LR__3037
20034     13 FB 01 F6 | 	mov	result1, local05
20038                 | LR__3038
20038     A7 F0 03 F6 | 	mov	ptra, fp
2003c     B2 00 A0 FD | 	call	#popregs_
20040                 | __system___float_pow_n_ret
20040     2D 00 64 FD | 	ret
20044                 | 
20044                 | __system___gc_ptrs
20044     EC 00 02 F6 | 	mov	_var01, __heap_ptr
20048     00 03 02 F6 | 	mov	_var02, _var01
2004c     76 01 00 FF 
20050     F8 03 06 F1 | 	add	_var02, ##191992
20054     00 FD 09 FB | 	rdlong	result2, _var01 wz
20058     74 00 90 5D |  if_ne	jmp	#LR__3040
2005c     01 FD 01 F6 | 	mov	result2, _var02
20060     00 FD 81 F1 | 	sub	result2, _var01
20064     00 03 58 FC | 	wrword	#1, _var01
20068     00 FB 01 F6 | 	mov	result1, _var01
2006c     02 FA 05 F1 | 	add	result1, #2
20070     36 00 80 FF 
20074     FD 20 59 FC | 	wrword	##27792, result1
20078     00 FB 01 F6 | 	mov	result1, _var01
2007c     04 FA 05 F1 | 	add	result1, #4
20080     FD 00 58 FC | 	wrword	#0, result1
20084     00 FB 01 F6 | 	mov	result1, _var01
20088     06 FA 05 F1 | 	add	result1, #6
2008c     FD 02 58 FC | 	wrword	#1, result1
20090     10 00 06 F1 | 	add	_var01, #16
20094     FE FC 51 F6 | 	abs	result2, result2 wc
20098     04 FC 45 F0 | 	shr	result2, #4
2009c     FE FC 81 F6 | 	negc	result2, result2
200a0     00 FD 51 FC | 	wrword	result2, _var01
200a4     00 FD 01 F6 | 	mov	result2, _var01
200a8     02 FC 05 F1 | 	add	result2, #2
200ac     36 00 80 FF 
200b0     FE 1E 59 FC | 	wrword	##27791, result2
200b4     00 FD 01 F6 | 	mov	result2, _var01
200b8     04 FC 05 F1 | 	add	result2, #4
200bc     FE 00 58 FC | 	wrword	#0, result2
200c0     00 FD 01 F6 | 	mov	result2, _var01
200c4     06 FC 05 F1 | 	add	result2, #6
200c8     FE 00 58 FC | 	wrword	#0, result2
200cc     10 00 86 F1 | 	sub	_var01, #16
200d0                 | LR__3040
200d0     00 FB 01 F6 | 	mov	result1, _var01
200d4     01 FD 01 F6 | 	mov	result2, _var02
200d8                 | __system___gc_ptrs_ret
200d8     2D 00 64 FD | 	ret
200dc                 | 
200dc                 | __system___gc_tryalloc
200dc     0B 4A 05 F6 | 	mov	COUNT_, #11
200e0     A8 00 A0 FD | 	call	#pushregs_
200e4     09 1F 02 F6 | 	mov	local01, arg01
200e8     0A 21 02 F6 | 	mov	local02, arg02
200ec     54 FF BF FD | 	call	#__system___gc_ptrs
200f0     FD 22 02 F6 | 	mov	local03, result1
200f4     FE 24 02 F6 | 	mov	local04, result2
200f8     11 27 02 F6 | 	mov	local05, local03
200fc     00 28 06 F6 | 	mov	local06, #0
20100     97 1E 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
20104                 | LR__3050
20104     13 2B 02 F6 | 	mov	local07, local05
20108     06 26 06 F1 | 	add	local05, #6
2010c     13 15 EA FA | 	rdword	arg02, local05 wz
20110     11 13 02 F6 | 	mov	arg01, local03
20114     00 FA 05 A6 |  if_e	mov	result1, #0
20118     04 14 66 50 |  if_ne	shl	arg02, #4
2011c     0A 13 02 51 |  if_ne	add	arg01, arg02
20120     09 FB 01 56 |  if_ne	mov	result1, arg01
20124     FD 26 0A F6 | 	mov	local05, result1 wz
20128     13 29 E2 5A |  if_ne	rdword	local06, local05
2012c     00 26 0E F2 | 	cmp	local05, #0 wz
20130     12 27 52 52 |  if_ne	cmps	local05, local04 wc
20134     08 00 90 1D |  if_a	jmp	#LR__3052
20138     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
2013c     C4 FF 9F 1D |  if_a	jmp	#LR__3050
20140                 | LR__3051
20140                 | LR__3052
20140     00 26 0E F2 | 	cmp	local05, #0 wz
20144     13 FB 01 A6 |  if_e	mov	result1, local05
20148     3C 01 90 AD |  if_e	jmp	#LR__3055
2014c     13 FD 01 F6 | 	mov	result2, local05
20150     06 FC 05 F1 | 	add	result2, #6
20154     FE 2C E2 FA | 	rdword	local08, result2
20158     14 1F 52 F2 | 	cmps	local01, local06 wc
2015c     C0 00 90 3D |  if_ae	jmp	#LR__3054
20160     13 1F 52 FC | 	wrword	local01, local05
20164     13 13 02 F6 | 	mov	arg01, local05
20168     0F 2D 02 F6 | 	mov	local08, local01
2016c     04 2C 66 F0 | 	shl	local08, #4
20170     16 13 02 F1 | 	add	arg01, local08
20174     0F 29 82 F1 | 	sub	local06, local01
20178     09 29 52 FC | 	wrword	local06, arg01
2017c     09 2D 02 F6 | 	mov	local08, arg01
20180     02 2C 06 F1 | 	add	local08, #2
20184     36 00 80 FF 
20188     16 1F 59 FC | 	wrword	##27791, local08
2018c     13 15 0A F6 | 	mov	arg02, local05 wz
20190     00 FA 05 A6 |  if_e	mov	result1, #0
20194     11 15 82 51 |  if_ne	sub	arg02, local03
20198     04 14 46 50 |  if_ne	shr	arg02, #4
2019c     0A FB 01 56 |  if_ne	mov	result1, arg02
201a0     09 2D 02 F6 | 	mov	local08, arg01
201a4     04 2C 06 F1 | 	add	local08, #4
201a8     16 FB 51 FC | 	wrword	result1, local08
201ac     13 2D 02 F6 | 	mov	local08, local05
201b0     06 2C 06 F1 | 	add	local08, #6
201b4     09 15 02 F6 | 	mov	arg02, arg01
201b8     16 2D E2 FA | 	rdword	local08, local08
201bc     06 14 06 F1 | 	add	arg02, #6
201c0     0A 2D 52 FC | 	wrword	local08, arg02
201c4     09 2F 02 F6 | 	mov	local09, arg01
201c8     17 15 0A F6 | 	mov	arg02, local09 wz
201cc     00 FA 05 A6 |  if_e	mov	result1, #0
201d0     11 15 82 51 |  if_ne	sub	arg02, local03
201d4     04 14 46 50 |  if_ne	shr	arg02, #4
201d8     0A FB 01 56 |  if_ne	mov	result1, arg02
201dc     FD 2C 02 F6 | 	mov	local08, result1
201e0     09 31 EA FA | 	rdword	local10, arg01 wz
201e4     00 FA 05 A6 |  if_e	mov	result1, #0
201e8     04 30 66 50 |  if_ne	shl	local10, #4
201ec     18 13 02 51 |  if_ne	add	arg01, local10
201f0     09 FB 01 56 |  if_ne	mov	result1, arg01
201f4     FD 32 0A F6 | 	mov	local11, result1 wz
201f8     24 00 90 AD |  if_e	jmp	#LR__3053
201fc     12 33 52 F2 | 	cmps	local11, local04 wc
20200     1C 00 90 3D |  if_ae	jmp	#LR__3053
20204     17 15 0A F6 | 	mov	arg02, local09 wz
20208     00 FA 05 A6 |  if_e	mov	result1, #0
2020c     11 15 82 51 |  if_ne	sub	arg02, local03
20210     04 14 46 50 |  if_ne	shr	arg02, #4
20214     0A FB 01 56 |  if_ne	mov	result1, arg02
20218     04 32 06 F1 | 	add	local11, #4
2021c     19 FB 51 FC | 	wrword	result1, local11
20220                 | LR__3053
20220                 | LR__3054
20220     06 2A 06 F1 | 	add	local07, #6
20224     15 2D 52 FC | 	wrword	local08, local07
20228     36 00 00 FF 
2022c     80 2E 06 F6 | 	mov	local09, ##27776
20230     10 2F 42 F5 | 	or	local09, local02
20234     00 FA 05 F6 | 	mov	result1, #0
20238     01 FA 61 FD | 	cogid	result1
2023c     FD 2E 42 F5 | 	or	local09, result1
20240     13 33 02 F6 | 	mov	local11, local05
20244     02 32 06 F1 | 	add	local11, #2
20248     19 2F 52 FC | 	wrword	local09, local11
2024c     11 2F 02 F6 | 	mov	local09, local03
20250     08 2E 06 F1 | 	add	local09, #8
20254     13 33 02 F6 | 	mov	local11, local05
20258     17 2F E2 FA | 	rdword	local09, local09
2025c     06 32 06 F1 | 	add	local11, #6
20260     19 2F 52 FC | 	wrword	local09, local11
20264     13 15 0A F6 | 	mov	arg02, local05 wz
20268     00 FA 05 A6 |  if_e	mov	result1, #0
2026c     11 15 82 51 |  if_ne	sub	arg02, local03
20270     04 14 46 50 |  if_ne	shr	arg02, #4
20274     0A FB 01 56 |  if_ne	mov	result1, arg02
20278     08 22 06 F1 | 	add	local03, #8
2027c     11 FB 51 FC | 	wrword	result1, local03
20280     08 26 06 F1 | 	add	local05, #8
20284     13 FB 01 F6 | 	mov	result1, local05
20288                 | LR__3055
20288     A7 F0 03 F6 | 	mov	ptra, fp
2028c     B2 00 A0 FD | 	call	#popregs_
20290                 | __system___gc_tryalloc_ret
20290     2D 00 64 FD | 	ret
20294                 | 
20294                 | __system___gc_alloc_managed
20294     01 4A 05 F6 | 	mov	COUNT_, #1
20298     A8 00 A0 FD | 	call	#pushregs_
2029c     09 1F 02 F6 | 	mov	local01, arg01
202a0     00 14 06 F6 | 	mov	arg02, #0
202a4     1C 00 B0 FD | 	call	#__system___gc_doalloc
202a8     FD 14 0A F6 | 	mov	arg02, result1 wz
202ac     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
202b0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
202b4     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
202b8     A7 F0 03 F6 | 	mov	ptra, fp
202bc     B2 00 A0 FD | 	call	#popregs_
202c0                 | __system___gc_alloc_managed_ret
202c0     2D 00 64 FD | 	ret
202c4                 | 
202c4                 | __system___gc_doalloc
202c4     06 4A 05 F6 | 	mov	COUNT_, #6
202c8     A8 00 A0 FD | 	call	#pushregs_
202cc     09 1F 0A F6 | 	mov	local01, arg01 wz
202d0     0A 21 02 F6 | 	mov	local02, arg02
202d4     00 FA 05 A6 |  if_e	mov	result1, #0
202d8     8C 00 90 AD |  if_e	jmp	#LR__3067
202dc     17 1E 06 F1 | 	add	local01, #23
202e0     0F 1E 26 F5 | 	andn	local01, #15
202e4     04 1E 46 F0 | 	shr	local01, #4
202e8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
202ec     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
202f0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
202f4     54 C1 BF FD | 	call	#__system___lockmem
202f8     0F 13 02 F6 | 	mov	arg01, local01
202fc     10 15 02 F6 | 	mov	arg02, local02
20300     D8 FD BF FD | 	call	#__system___gc_tryalloc
20304     FD 22 0A F6 | 	mov	local03, result1 wz
20308     14 00 90 5D |  if_ne	jmp	#LR__3060
2030c     70 03 B0 FD | 	call	#__system___gc_docollect
20310     0F 13 02 F6 | 	mov	arg01, local01
20314     10 15 02 F6 | 	mov	arg02, local02
20318     C0 FD BF FD | 	call	#__system___gc_tryalloc
2031c     FD 22 02 F6 | 	mov	local03, result1
20320                 | LR__3060
20320     1C E6 05 F1 | 	add	ptr___system__dat__, #28
20324     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20328     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2032c     09 01 68 FC | 	wrlong	#0, arg01
20330     00 22 0E F2 | 	cmp	local03, #0 wz
20334     2C 00 90 AD |  if_e	jmp	#LR__3066
20338     04 1E 66 F0 | 	shl	local01, #4
2033c     08 1E 86 F1 | 	sub	local01, #8
20340     0F 25 52 F6 | 	abs	local04, local01 wc
20344     02 24 46 F0 | 	shr	local04, #2
20348     12 27 8A F6 | 	negc	local05, local04 wz
2034c     11 29 02 F6 | 	mov	local06, local03
20350     10 00 90 AD |  if_e	jmp	#LR__3065
20354     97 06 48 FB | 	callpa	#(@LR__3063-@LR__3061)>>2,fcache_load_ptr_
20358                 | LR__3061
20358     13 05 D8 FC | 	rep	@LR__3064, local05
2035c                 | LR__3062
2035c     14 01 68 FC | 	wrlong	#0, local06
20360     04 28 06 F1 | 	add	local06, #4
20364                 | LR__3063
20364                 | LR__3064
20364                 | LR__3065
20364                 | LR__3066
20364     11 FB 01 F6 | 	mov	result1, local03
20368                 | LR__3067
20368     A7 F0 03 F6 | 	mov	ptra, fp
2036c     B2 00 A0 FD | 	call	#popregs_
20370                 | __system___gc_doalloc_ret
20370     2D 00 64 FD | 	ret
20374                 | 
20374                 | __system___gc_isvalidptr
20374     F8 16 06 F4 | 	bitl	arg03, #248
20378     08 16 86 F1 | 	sub	arg03, #8
2037c     09 17 52 F2 | 	cmps	arg03, arg01 wc
20380     08 00 90 CD |  if_b	jmp	#LR__3070
20384     0A 17 52 F2 | 	cmps	arg03, arg02 wc
20388     08 00 90 CD |  if_b	jmp	#LR__3071
2038c                 | LR__3070
2038c     00 FA 05 F6 | 	mov	result1, #0
20390     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
20394                 | LR__3071
20394     0B 01 02 F6 | 	mov	_var01, arg03
20398     09 01 62 F5 | 	xor	_var01, arg01
2039c     0F 00 CE F7 | 	test	_var01, #15 wz
203a0     00 FA 05 56 |  if_ne	mov	result1, #0
203a4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
203a8     0B 01 02 F6 | 	mov	_var01, arg03
203ac     02 00 06 F1 | 	add	_var01, #2
203b0     00 01 E2 FA | 	rdword	_var01, _var01
203b4     7F 00 00 FF 
203b8     C0 01 06 F5 | 	and	_var01, ##65472
203bc     36 00 00 FF 
203c0     80 00 0E F2 | 	cmp	_var01, ##27776 wz
203c4     00 FA 05 56 |  if_ne	mov	result1, #0
203c8     0B FB 01 A6 |  if_e	mov	result1, arg03
203cc                 | __system___gc_isvalidptr_ret
203cc     2D 00 64 FD | 	ret
203d0                 | 
203d0                 | __system___gc_free
203d0     09 17 02 F6 | 	mov	arg03, arg01
203d4     6C FC BF FD | 	call	#__system___gc_ptrs
203d8     FD 12 02 F6 | 	mov	arg01, result1
203dc     FE 14 02 F6 | 	mov	arg02, result2
203e0     90 FF BF FD | 	call	#__system___gc_isvalidptr
203e4     FD 14 0A F6 | 	mov	arg02, result1 wz
203e8     28 00 90 AD |  if_e	jmp	#LR__3080
203ec     1C E6 05 F1 | 	add	ptr___system__dat__, #28
203f0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
203f4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
203f8     50 C0 BF FD | 	call	#__system___lockmem
203fc     0A 13 02 F6 | 	mov	arg01, arg02
20400     14 00 B0 FD | 	call	#__system___gc_dofree
20404     1C E6 05 F1 | 	add	ptr___system__dat__, #28
20408     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2040c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
20410     09 01 68 FC | 	wrlong	#0, arg01
20414                 | LR__3080
20414                 | __system___gc_free_ret
20414     2D 00 64 FD | 	ret
20418                 | 
20418                 | __system___gc_dofree
20418     06 4A 05 F6 | 	mov	COUNT_, #6
2041c     A8 00 A0 FD | 	call	#pushregs_
20420     09 1F 02 F6 | 	mov	local01, arg01
20424     1C FC BF FD | 	call	#__system___gc_ptrs
20428     FD 20 02 F6 | 	mov	local02, result1
2042c     FE 22 02 F6 | 	mov	local03, result2
20430     0F 15 02 F6 | 	mov	arg02, local01
20434     02 14 06 F1 | 	add	arg02, #2
20438     36 00 80 FF 
2043c     0A 1F 59 FC | 	wrword	##27791, arg02
20440     0F 25 02 F6 | 	mov	local04, local01
20444     0F 13 02 F6 | 	mov	arg01, local01
20448     09 27 EA FA | 	rdword	local05, arg01 wz
2044c     00 FA 05 A6 |  if_e	mov	result1, #0
20450     04 26 66 50 |  if_ne	shl	local05, #4
20454     13 13 02 51 |  if_ne	add	arg01, local05
20458     09 FB 01 56 |  if_ne	mov	result1, arg01
2045c     FD 28 02 F6 | 	mov	local06, result1
20460     97 24 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
20464                 | LR__3090
20464     04 24 06 F1 | 	add	local04, #4
20468     12 15 EA FA | 	rdword	arg02, local04 wz
2046c     10 13 02 F6 | 	mov	arg01, local02
20470     00 FA 05 A6 |  if_e	mov	result1, #0
20474     04 14 66 50 |  if_ne	shl	arg02, #4
20478     0A 13 02 51 |  if_ne	add	arg01, arg02
2047c     09 FB 01 56 |  if_ne	mov	result1, arg01
20480     FD 24 0A F6 | 	mov	local04, result1 wz
20484     24 00 90 AD |  if_e	jmp	#LR__3092
20488     12 13 02 F6 | 	mov	arg01, local04
2048c     00 FA 05 F6 | 	mov	result1, #0
20490     02 12 06 F1 | 	add	arg01, #2
20494     09 13 E2 FA | 	rdword	arg01, arg01
20498     36 00 00 FF 
2049c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
204a0     01 FA 65 A6 |  if_e	neg	result1, #1
204a4     00 FA 0D F2 | 	cmp	result1, #0 wz
204a8     B8 FF 9F AD |  if_e	jmp	#LR__3090
204ac                 | LR__3091
204ac                 | LR__3092
204ac     00 24 0E F2 | 	cmp	local04, #0 wz
204b0     10 25 02 A6 |  if_e	mov	local04, local02
204b4     12 15 02 F6 | 	mov	arg02, local04
204b8     06 14 06 F1 | 	add	arg02, #6
204bc     0F 13 02 F6 | 	mov	arg01, local01
204c0     0A 15 E2 FA | 	rdword	arg02, arg02
204c4     06 12 06 F1 | 	add	arg01, #6
204c8     09 15 52 FC | 	wrword	arg02, arg01
204cc     0F 15 0A F6 | 	mov	arg02, local01 wz
204d0     00 FA 05 A6 |  if_e	mov	result1, #0
204d4     10 15 82 51 |  if_ne	sub	arg02, local02
204d8     04 14 46 50 |  if_ne	shr	arg02, #4
204dc     0A FB 01 56 |  if_ne	mov	result1, arg02
204e0     12 15 02 F6 | 	mov	arg02, local04
204e4     06 14 06 F1 | 	add	arg02, #6
204e8     0A FB 51 FC | 	wrword	result1, arg02
204ec     10 25 0A F2 | 	cmp	local04, local02 wz
204f0     A4 00 90 AD |  if_e	jmp	#LR__3095
204f4     12 13 02 F6 | 	mov	arg01, local04
204f8     09 27 EA FA | 	rdword	local05, arg01 wz
204fc     00 FA 05 A6 |  if_e	mov	result1, #0
20500     04 26 66 50 |  if_ne	shl	local05, #4
20504     13 13 02 51 |  if_ne	add	arg01, local05
20508     09 FB 01 56 |  if_ne	mov	result1, arg01
2050c     0F FB 09 F2 | 	cmp	result1, local01 wz
20510     84 00 90 5D |  if_ne	jmp	#LR__3094
20514     12 29 E2 FA | 	rdword	local06, local04
20518     0F 15 E2 FA | 	rdword	arg02, local01
2051c     0A 29 02 F1 | 	add	local06, arg02
20520     12 29 52 FC | 	wrword	local06, local04
20524     0F 29 02 F6 | 	mov	local06, local01
20528     02 28 06 F1 | 	add	local06, #2
2052c     14 01 58 FC | 	wrword	#0, local06
20530     0F 13 02 F6 | 	mov	arg01, local01
20534     09 27 EA FA | 	rdword	local05, arg01 wz
20538     00 FA 05 A6 |  if_e	mov	result1, #0
2053c     04 26 66 50 |  if_ne	shl	local05, #4
20540     13 13 02 51 |  if_ne	add	arg01, local05
20544     09 FB 01 56 |  if_ne	mov	result1, arg01
20548     FD 28 02 F6 | 	mov	local06, result1
2054c     11 29 52 F2 | 	cmps	local06, local03 wc
20550     20 00 90 3D |  if_ae	jmp	#LR__3093
20554     12 15 0A F6 | 	mov	arg02, local04 wz
20558     00 FA 05 A6 |  if_e	mov	result1, #0
2055c     10 15 82 51 |  if_ne	sub	arg02, local02
20560     04 14 46 50 |  if_ne	shr	arg02, #4
20564     0A FB 01 56 |  if_ne	mov	result1, arg02
20568     14 15 02 F6 | 	mov	arg02, local06
2056c     04 14 06 F1 | 	add	arg02, #4
20570     0A FB 51 FC | 	wrword	result1, arg02
20574                 | LR__3093
20574     0F 15 02 F6 | 	mov	arg02, local01
20578     06 14 06 F1 | 	add	arg02, #6
2057c     12 FD 01 F6 | 	mov	result2, local04
20580     0A 15 E2 FA | 	rdword	arg02, arg02
20584     06 FC 05 F1 | 	add	result2, #6
20588     FE 14 52 FC | 	wrword	arg02, result2
2058c     06 1E 06 F1 | 	add	local01, #6
20590     0F 01 58 FC | 	wrword	#0, local01
20594     12 1F 02 F6 | 	mov	local01, local04
20598                 | LR__3094
20598                 | LR__3095
20598     0F 13 02 F6 | 	mov	arg01, local01
2059c     09 27 EA FA | 	rdword	local05, arg01 wz
205a0     00 FA 05 A6 |  if_e	mov	result1, #0
205a4     04 26 66 50 |  if_ne	shl	local05, #4
205a8     13 13 02 51 |  if_ne	add	arg01, local05
205ac     09 FB 01 56 |  if_ne	mov	result1, arg01
205b0     FD 14 0A F6 | 	mov	arg02, result1 wz
205b4     B8 00 90 AD |  if_e	jmp	#LR__3097
205b8     11 15 52 F2 | 	cmps	arg02, local03 wc
205bc     B0 00 90 3D |  if_ae	jmp	#LR__3097
205c0     0A 13 02 F6 | 	mov	arg01, arg02
205c4     00 FA 05 F6 | 	mov	result1, #0
205c8     02 12 06 F1 | 	add	arg01, #2
205cc     09 13 E2 FA | 	rdword	arg01, arg01
205d0     36 00 00 FF 
205d4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
205d8     01 FA 65 A6 |  if_e	neg	result1, #1
205dc     00 FA 0D F2 | 	cmp	result1, #0 wz
205e0     8C 00 90 AD |  if_e	jmp	#LR__3097
205e4     0F 25 02 F6 | 	mov	local04, local01
205e8     12 29 E2 FA | 	rdword	local06, local04
205ec     0A 13 02 F6 | 	mov	arg01, arg02
205f0     09 1F E2 FA | 	rdword	local01, arg01
205f4     0F 29 02 F1 | 	add	local06, local01
205f8     12 29 52 FC | 	wrword	local06, local04
205fc     09 29 02 F6 | 	mov	local06, arg01
20600     06 28 06 F1 | 	add	local06, #6
20604     12 1F 02 F6 | 	mov	local01, local04
20608     14 29 E2 FA | 	rdword	local06, local06
2060c     06 1E 06 F1 | 	add	local01, #6
20610     0F 29 52 FC | 	wrword	local06, local01
20614     09 29 02 F6 | 	mov	local06, arg01
20618     02 28 06 F1 | 	add	local06, #2
2061c     14 55 59 FC | 	wrword	#170, local06
20620     09 29 02 F6 | 	mov	local06, arg01
20624     06 28 06 F1 | 	add	local06, #6
20628     14 01 58 FC | 	wrword	#0, local06
2062c     09 27 EA FA | 	rdword	local05, arg01 wz
20630     00 FA 05 A6 |  if_e	mov	result1, #0
20634     04 26 66 50 |  if_ne	shl	local05, #4
20638     13 13 02 51 |  if_ne	add	arg01, local05
2063c     09 FB 01 56 |  if_ne	mov	result1, arg01
20640     FD 28 0A F6 | 	mov	local06, result1 wz
20644     28 00 90 AD |  if_e	jmp	#LR__3096
20648     11 29 52 F2 | 	cmps	local06, local03 wc
2064c     20 00 90 3D |  if_ae	jmp	#LR__3096
20650     12 15 0A F6 | 	mov	arg02, local04 wz
20654     00 FA 05 A6 |  if_e	mov	result1, #0
20658     10 15 82 51 |  if_ne	sub	arg02, local02
2065c     04 14 46 50 |  if_ne	shr	arg02, #4
20660     0A FB 01 56 |  if_ne	mov	result1, arg02
20664     14 25 02 F6 | 	mov	local04, local06
20668     04 24 06 F1 | 	add	local04, #4
2066c     12 FB 51 FC | 	wrword	result1, local04
20670                 | LR__3096
20670                 | LR__3097
20670     14 FB 01 F6 | 	mov	result1, local06
20674     A7 F0 03 F6 | 	mov	ptra, fp
20678     B2 00 A0 FD | 	call	#popregs_
2067c                 | __system___gc_dofree_ret
2067c     2D 00 64 FD | 	ret
20680                 | 
20680                 | __system___gc_docollect
20680     05 4A 05 F6 | 	mov	COUNT_, #5
20684     A8 00 A0 FD | 	call	#pushregs_
20688     B8 F9 BF FD | 	call	#__system___gc_ptrs
2068c     FE 1E 02 F6 | 	mov	local01, result2
20690     FD 20 02 F6 | 	mov	local02, result1
20694     10 13 02 F6 | 	mov	arg01, local02
20698     09 23 EA FA | 	rdword	local03, arg01 wz
2069c     00 FA 05 A6 |  if_e	mov	result1, #0
206a0     04 22 66 50 |  if_ne	shl	local03, #4
206a4     11 13 02 51 |  if_ne	add	arg01, local03
206a8     09 FB 01 56 |  if_ne	mov	result1, arg01
206ac     FD 24 0A F6 | 	mov	local04, result1 wz
206b0     00 FA 05 F6 | 	mov	result1, #0
206b4     01 FA 61 FD | 	cogid	result1
206b8     FD 26 02 F6 | 	mov	local05, result1
206bc     48 00 90 AD |  if_e	jmp	#LR__3102
206c0     97 22 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
206c4                 | LR__3100
206c4     0F 25 52 F2 | 	cmps	local04, local01 wc
206c8     3C 00 90 3D |  if_ae	jmp	#LR__3102
206cc     12 15 02 F6 | 	mov	arg02, local04
206d0     02 14 06 F1 | 	add	arg02, #2
206d4     0A 15 E2 FA | 	rdword	arg02, arg02
206d8     20 14 26 F5 | 	andn	arg02, #32
206dc     12 13 02 F6 | 	mov	arg01, local04
206e0     02 12 06 F1 | 	add	arg01, #2
206e4     09 15 52 FC | 	wrword	arg02, arg01
206e8     12 13 02 F6 | 	mov	arg01, local04
206ec     09 23 EA FA | 	rdword	local03, arg01 wz
206f0     00 FA 05 A6 |  if_e	mov	result1, #0
206f4     04 22 66 50 |  if_ne	shl	local03, #4
206f8     11 13 02 51 |  if_ne	add	arg01, local03
206fc     09 FB 01 56 |  if_ne	mov	result1, arg01
20700     FD 24 0A F6 | 	mov	local04, result1 wz
20704     BC FF 9F 5D |  if_ne	jmp	#LR__3100
20708                 | LR__3101
20708                 | LR__3102
20708     00 22 06 F6 | 	mov	local03, #0
2070c     00 12 06 F6 | 	mov	arg01, #0
20710     10 BD BF FD | 	call	#__system____topofstack
20714     FD 14 02 F6 | 	mov	arg02, result1
20718     11 13 02 F6 | 	mov	arg01, local03
2071c     90 00 B0 FD | 	call	#__system___gc_markhub
20720     1C 01 B0 FD | 	call	#__system___gc_markcog
20724     10 13 02 F6 | 	mov	arg01, local02
20728     09 23 EA FA | 	rdword	local03, arg01 wz
2072c     00 FA 05 A6 |  if_e	mov	result1, #0
20730     04 22 66 50 |  if_ne	shl	local03, #4
20734     11 13 02 51 |  if_ne	add	arg01, local03
20738     09 FB 01 56 |  if_ne	mov	result1, arg01
2073c     FD 20 0A F6 | 	mov	local02, result1 wz
20740     60 00 90 AD |  if_e	jmp	#LR__3106
20744                 | LR__3103
20744     10 25 02 F6 | 	mov	local04, local02
20748     12 13 02 F6 | 	mov	arg01, local04
2074c     09 23 EA FA | 	rdword	local03, arg01 wz
20750     00 FA 05 A6 |  if_e	mov	result1, #0
20754     04 22 66 50 |  if_ne	shl	local03, #4
20758     11 13 02 51 |  if_ne	add	arg01, local03
2075c     09 FB 01 56 |  if_ne	mov	result1, arg01
20760     FD 20 02 F6 | 	mov	local02, result1
20764     12 15 02 F6 | 	mov	arg02, local04
20768     02 14 06 F1 | 	add	arg02, #2
2076c     0A 15 E2 FA | 	rdword	arg02, arg02
20770     20 14 CE F7 | 	test	arg02, #32 wz
20774     10 14 CE A7 |  if_e	test	arg02, #16 wz
20778     1C 00 90 5D |  if_ne	jmp	#LR__3105
2077c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
20780     13 15 0A F2 | 	cmp	arg02, local05 wz
20784     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
20788     0C 00 90 5D |  if_ne	jmp	#LR__3104
2078c     12 13 02 F6 | 	mov	arg01, local04
20790     84 FC BF FD | 	call	#__system___gc_dofree
20794     FD 20 02 F6 | 	mov	local02, result1
20798                 | LR__3104
20798                 | LR__3105
20798     00 20 0E F2 | 	cmp	local02, #0 wz
2079c     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
207a0     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3103
207a4                 | LR__3106
207a4     A7 F0 03 F6 | 	mov	ptra, fp
207a8     B2 00 A0 FD | 	call	#popregs_
207ac                 | __system___gc_docollect_ret
207ac     2D 00 64 FD | 	ret
207b0                 | 
207b0                 | __system___gc_markhub
207b0     04 4A 05 F6 | 	mov	COUNT_, #4
207b4     A8 00 A0 FD | 	call	#pushregs_
207b8     09 1F 02 F6 | 	mov	local01, arg01
207bc     0A 21 02 F6 | 	mov	local02, arg02
207c0     80 F8 BF FD | 	call	#__system___gc_ptrs
207c4     FD 22 02 F6 | 	mov	local03, result1
207c8     FE 24 02 F6 | 	mov	local04, result2
207cc                 | LR__3110
207cc     10 1F 52 F2 | 	cmps	local01, local02 wc
207d0     60 00 90 3D |  if_ae	jmp	#LR__3111
207d4     0F 17 02 FB | 	rdlong	arg03, local01
207d8     04 1E 06 F1 | 	add	local01, #4
207dc     12 15 02 F6 | 	mov	arg02, local04
207e0     11 13 02 F6 | 	mov	arg01, local03
207e4     8C FB BF FD | 	call	#__system___gc_isvalidptr
207e8     FD 16 0A F6 | 	mov	arg03, result1 wz
207ec     DC FF 9F AD |  if_e	jmp	#LR__3110
207f0     0B 13 02 F6 | 	mov	arg01, arg03
207f4     00 FA 05 F6 | 	mov	result1, #0
207f8     02 12 06 F1 | 	add	arg01, #2
207fc     09 13 E2 FA | 	rdword	arg01, arg01
20800     36 00 00 FF 
20804     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
20808     01 FA 65 A6 |  if_e	neg	result1, #1
2080c     00 FA 0D F2 | 	cmp	result1, #0 wz
20810     B8 FF 9F 5D |  if_ne	jmp	#LR__3110
20814     0B FD 01 F6 | 	mov	result2, arg03
20818     02 FC 05 F1 | 	add	result2, #2
2081c     FE FC E1 FA | 	rdword	result2, result2
20820     0F FC 25 F5 | 	andn	result2, #15
20824     2E FC 45 F5 | 	or	result2, #46
20828     02 16 06 F1 | 	add	arg03, #2
2082c     0B FD 51 FC | 	wrword	result2, arg03
20830     98 FF 9F FD | 	jmp	#LR__3110
20834                 | LR__3111
20834     A7 F0 03 F6 | 	mov	ptra, fp
20838     B2 00 A0 FD | 	call	#popregs_
2083c                 | __system___gc_markhub_ret
2083c     2D 00 64 FD | 	ret
20840                 | 
20840                 | __system___gc_markcog
20840     04 4A 05 F6 | 	mov	COUNT_, #4
20844     A8 00 A0 FD | 	call	#pushregs_
20848     F8 F7 BF FD | 	call	#__system___gc_ptrs
2084c     FD 1E 02 F6 | 	mov	local01, result1
20850     FE 20 02 F6 | 	mov	local02, result2
20854     EF 23 06 F6 | 	mov	local03, #495
20858                 | LR__3120
20858                 | 	'.live	local03
20858     00 22 96 F9 | 	alts	local03, #0
2085c     11 25 02 F6 | 	mov	local04, local03
20860     0F 13 02 F6 | 	mov	arg01, local01
20864     10 15 02 F6 | 	mov	arg02, local02
20868     12 17 02 F6 | 	mov	arg03, local04
2086c     04 FB BF FD | 	call	#__system___gc_isvalidptr
20870     00 FA 0D F2 | 	cmp	result1, #0 wz
20874     18 00 90 AD |  if_e	jmp	#LR__3121
20878     FD 24 02 F6 | 	mov	local04, result1
2087c     02 24 06 F1 | 	add	local04, #2
20880     12 25 E2 FA | 	rdword	local04, local04
20884     20 24 46 F5 | 	or	local04, #32
20888     02 FA 05 F1 | 	add	result1, #2
2088c     FD 24 52 FC | 	wrword	local04, result1
20890                 | LR__3121
20890     01 22 86 F1 | 	sub	local03, #1
20894     00 22 56 F2 | 	cmps	local03, #0 wc
20898     BC FF 9F 3D |  if_ae	jmp	#LR__3120
2089c     A7 F0 03 F6 | 	mov	ptra, fp
208a0     B2 00 A0 FD | 	call	#popregs_
208a4                 | __system___gc_markcog_ret
208a4     2D 00 64 FD | 	ret
208a8                 | 
208a8                 | __system__opendir
208a8     06 4A 05 F6 | 	mov	COUNT_, #6
208ac     A8 00 A0 FD | 	call	#pushregs_
208b0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
208b4     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
208b8     09 15 02 F6 | 	mov	arg02, arg01
208bc     0F 13 02 F6 | 	mov	arg01, local01
208c0     00 16 06 F6 | 	mov	arg03, #0
208c4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
208c8     18 C3 BF FD | 	call	#__system____getvfsforfile
208cc     FD 20 0A F6 | 	mov	local02, result1 wz
208d0     10 00 90 AD |  if_e	jmp	#LR__3130
208d4     28 20 06 F1 | 	add	local02, #40
208d8     10 17 0A FB | 	rdlong	arg03, local02 wz
208dc     28 20 86 F1 | 	sub	local02, #40
208e0     14 00 90 5D |  if_ne	jmp	#LR__3131
208e4                 | LR__3130
208e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
208e8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
208ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
208f0     00 FA 05 F6 | 	mov	result1, #0
208f4     90 00 90 FD | 	jmp	#LR__3133
208f8                 | LR__3131
208f8     5C 12 06 F6 | 	mov	arg01, #92
208fc     10 14 06 F6 | 	mov	arg02, #16
20900     C0 F9 BF FD | 	call	#__system___gc_doalloc
20904     FD 22 0A F6 | 	mov	local03, result1 wz
20908     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2090c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
20910     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20914     00 FA 05 A6 |  if_e	mov	result1, #0
20918     6C 00 90 AD |  if_e	jmp	#LR__3133
2091c     28 20 06 F1 | 	add	local02, #40
20920     10 25 02 FB | 	rdlong	local04, local02
20924     12 27 02 F6 | 	mov	local05, local04
20928     28 20 86 F1 | 	sub	local02, #40
2092c     13 26 46 F7 | 	zerox	local05, #19
20930     14 24 46 F0 | 	shr	local04, #20
20934     02 24 66 F0 | 	shl	local04, #2
20938     ED 24 02 F1 | 	add	local04, __methods__
2093c     12 25 02 FB | 	rdlong	local04, local04
20940     11 13 02 F6 | 	mov	arg01, local03
20944     0F 15 02 F6 | 	mov	arg02, local01
20948     F2 28 02 F6 | 	mov	local06, objptr
2094c     13 E5 01 F6 | 	mov	objptr, local05
20950     2D 24 62 FD | 	call	local04
20954     14 E5 01 F6 | 	mov	objptr, local06
20958     FD 16 0A F6 | 	mov	arg03, result1 wz
2095c     20 00 90 AD |  if_e	jmp	#LR__3132
20960     00 16 4E F2 | 	cmps	arg03, #0 wz
20964     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20968     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2096c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20970     11 13 02 F6 | 	mov	arg01, local03
20974     58 FA BF FD | 	call	#__system___gc_free
20978     00 FA 05 F6 | 	mov	result1, #0
2097c     08 00 90 FD | 	jmp	#LR__3133
20980                 | LR__3132
20980     11 21 62 FC | 	wrlong	local02, local03
20984     11 FB 01 F6 | 	mov	result1, local03
20988                 | LR__3133
20988     A7 F0 03 F6 | 	mov	ptra, fp
2098c     B2 00 A0 FD | 	call	#popregs_
20990                 | __system__opendir_ret
20990     2D 00 64 FD | 	ret
20994                 | 
20994                 | __system__closedir
20994     04 4A 05 F6 | 	mov	COUNT_, #4
20998     A8 00 A0 FD | 	call	#pushregs_
2099c     09 1F 02 F6 | 	mov	local01, arg01
209a0     0F 13 02 FB | 	rdlong	arg01, local01
209a4     2C 12 06 F1 | 	add	arg01, #44
209a8     09 21 02 FB | 	rdlong	local02, arg01
209ac     10 23 02 F6 | 	mov	local03, local02
209b0     13 22 46 F7 | 	zerox	local03, #19
209b4     14 20 46 F0 | 	shr	local02, #20
209b8     02 20 66 F0 | 	shl	local02, #2
209bc     ED 20 02 F1 | 	add	local02, __methods__
209c0     10 21 02 FB | 	rdlong	local02, local02
209c4     0F 13 02 F6 | 	mov	arg01, local01
209c8     F2 24 02 F6 | 	mov	local04, objptr
209cc     11 E5 01 F6 | 	mov	objptr, local03
209d0     2D 20 62 FD | 	call	local02
209d4     12 E5 01 F6 | 	mov	objptr, local04
209d8     FD 24 02 F6 | 	mov	local04, result1
209dc     0F 13 02 F6 | 	mov	arg01, local01
209e0     EC F9 BF FD | 	call	#__system___gc_free
209e4     00 24 4E F2 | 	cmps	local04, #0 wz
209e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
209ec     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
209f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
209f4     01 FA 65 56 |  if_ne	neg	result1, #1
209f8     00 FA 05 A6 |  if_e	mov	result1, #0
209fc     A7 F0 03 F6 | 	mov	ptra, fp
20a00     B2 00 A0 FD | 	call	#popregs_
20a04                 | __system__closedir_ret
20a04     2D 00 64 FD | 	ret
20a08                 | 
20a08                 | __system__readdir
20a08     04 4A 05 F6 | 	mov	COUNT_, #4
20a0c     A8 00 A0 FD | 	call	#pushregs_
20a10     09 15 0A FB | 	rdlong	arg02, arg01 wz
20a14     08 12 06 F1 | 	add	arg01, #8
20a18     09 1F 02 F6 | 	mov	local01, arg01
20a1c     08 12 86 F1 | 	sub	arg01, #8
20a20     00 FA 05 A6 |  if_e	mov	result1, #0
20a24     5C 00 90 AD |  if_e	jmp	#LR__3141
20a28     30 14 06 F1 | 	add	arg02, #48
20a2c     0A 21 02 FB | 	rdlong	local02, arg02
20a30     10 23 02 F6 | 	mov	local03, local02
20a34     13 22 46 F7 | 	zerox	local03, #19
20a38     14 20 46 F0 | 	shr	local02, #20
20a3c     02 20 66 F0 | 	shl	local02, #2
20a40     ED 20 02 F1 | 	add	local02, __methods__
20a44     10 21 02 FB | 	rdlong	local02, local02
20a48     0F 15 02 F6 | 	mov	arg02, local01
20a4c     F2 24 02 F6 | 	mov	local04, objptr
20a50     11 E5 01 F6 | 	mov	objptr, local03
20a54     2D 20 62 FD | 	call	local02
20a58     12 E5 01 F6 | 	mov	objptr, local04
20a5c     00 FA 4D F2 | 	cmps	result1, #0 wz
20a60     1C 00 90 AD |  if_e	jmp	#LR__3140
20a64     01 FA 55 F2 | 	cmps	result1, #1 wc
20a68     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
20a6c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
20a70     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
20a74     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
20a78     00 FA 05 F6 | 	mov	result1, #0
20a7c     04 00 90 FD | 	jmp	#LR__3141
20a80                 | LR__3140
20a80     0F FB 01 F6 | 	mov	result1, local01
20a84                 | LR__3141
20a84     A7 F0 03 F6 | 	mov	ptra, fp
20a88     B2 00 A0 FD | 	call	#popregs_
20a8c                 | __system__readdir_ret
20a8c     2D 00 64 FD | 	ret
20a90                 | 
20a90                 | __system___openraw
20a90     15 4A 05 F6 | 	mov	COUNT_, #21
20a94     A8 00 A0 FD | 	call	#pushregs_
20a98     09 1F 02 F6 | 	mov	local01, arg01
20a9c     0A 21 02 F6 | 	mov	local02, arg02
20aa0     0B 23 02 F6 | 	mov	local03, arg03
20aa4     0C 25 02 F6 | 	mov	local04, arg04
20aa8     04 26 06 F6 | 	mov	local05, #4
20aac     0F 29 02 F6 | 	mov	local06, local01
20ab0     00 2A 06 F6 | 	mov	local07, #0
20ab4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20ab8     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
20abc     16 13 02 F6 | 	mov	arg01, local08
20ac0     10 15 02 F6 | 	mov	arg02, local02
20ac4     00 16 06 F6 | 	mov	arg03, #0
20ac8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
20acc     14 C1 BF FD | 	call	#__system____getvfsforfile
20ad0     FD 2E 0A F6 | 	mov	local09, result1 wz
20ad4     10 00 90 AD |  if_e	jmp	#LR__3150
20ad8     20 2E 06 F1 | 	add	local09, #32
20adc     17 FB 09 FB | 	rdlong	result1, local09 wz
20ae0     20 2E 86 F1 | 	sub	local09, #32
20ae4     14 00 90 5D |  if_ne	jmp	#LR__3151
20ae8                 | LR__3150
20ae8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20aec     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
20af0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20af4     01 FA 65 F6 | 	neg	result1, #1
20af8     8C 02 90 FD | 	jmp	#LR__3164
20afc                 | LR__3151
20afc     14 13 02 F6 | 	mov	arg01, local06
20b00     00 14 06 F6 | 	mov	arg02, #0
20b04     34 16 06 F6 | 	mov	arg03, #52
20b08     09 31 02 F6 | 	mov	local10, arg01
20b0c     98 00 A0 FD | 	call	#\builtin_bytefill_
20b10     20 2E 06 F1 | 	add	local09, #32
20b14     17 33 02 FB | 	rdlong	local11, local09
20b18     19 35 02 F6 | 	mov	local12, local11
20b1c     19 37 02 F6 | 	mov	local13, local11
20b20     20 2E 86 F1 | 	sub	local09, #32
20b24     1B 39 02 F6 | 	mov	local14, local13
20b28     13 34 46 F7 | 	zerox	local12, #19
20b2c     14 38 46 F0 | 	shr	local14, #20
20b30     02 38 66 F0 | 	shl	local14, #2
20b34     ED 38 02 F1 | 	add	local14, __methods__
20b38     1C 39 02 FB | 	rdlong	local14, local14
20b3c     14 3B 02 F6 | 	mov	local15, local06
20b40     16 3D 02 F6 | 	mov	local16, local08
20b44     11 3F 02 F6 | 	mov	local17, local03
20b48     1D 13 02 F6 | 	mov	arg01, local15
20b4c     1E 15 02 F6 | 	mov	arg02, local16
20b50     1F 17 02 F6 | 	mov	arg03, local17
20b54     F2 40 02 F6 | 	mov	local18, objptr
20b58     1A E5 01 F6 | 	mov	objptr, local12
20b5c     2D 38 62 FD | 	call	local14
20b60     20 E5 01 F6 | 	mov	objptr, local18
20b64     FD 42 0A F6 | 	mov	local19, result1 wz
20b68     04 22 CE 57 |  if_ne	test	local03, #4 wz
20b6c     58 00 90 AD |  if_e	jmp	#LR__3152
20b70     24 2E 06 F1 | 	add	local09, #36
20b74     17 33 02 FB | 	rdlong	local11, local09
20b78     19 35 02 F6 | 	mov	local12, local11
20b7c     19 37 02 F6 | 	mov	local13, local11
20b80     24 2E 86 F1 | 	sub	local09, #36
20b84     1B 39 02 F6 | 	mov	local14, local13
20b88     13 34 46 F7 | 	zerox	local12, #19
20b8c     14 38 46 F0 | 	shr	local14, #20
20b90     02 38 66 F0 | 	shl	local14, #2
20b94     ED 38 02 F1 | 	add	local14, __methods__
20b98     1C 39 02 FB | 	rdlong	local14, local14
20b9c     14 3B 02 F6 | 	mov	local15, local06
20ba0     16 3D 02 F6 | 	mov	local16, local08
20ba4     12 3F 02 F6 | 	mov	local17, local04
20ba8     1D 13 02 F6 | 	mov	arg01, local15
20bac     1E 15 02 F6 | 	mov	arg02, local16
20bb0     1F 17 02 F6 | 	mov	arg03, local17
20bb4     F2 40 02 F6 | 	mov	local18, objptr
20bb8     1A E5 01 F6 | 	mov	objptr, local12
20bbc     2D 38 62 FD | 	call	local14
20bc0     20 E5 01 F6 | 	mov	objptr, local18
20bc4     FD 42 02 F6 | 	mov	local19, result1
20bc8                 | LR__3152
20bc8     00 42 0E F2 | 	cmp	local19, #0 wz
20bcc     8C 01 90 5D |  if_ne	jmp	#LR__3162
20bd0     11 45 02 F6 | 	mov	local20, local03
20bd4     03 44 0E F5 | 	and	local20, #3 wz
20bd8     02 26 46 55 |  if_ne	or	local05, #2
20bdc     01 44 0E F2 | 	cmp	local20, #1 wz
20be0     01 26 46 55 |  if_ne	or	local05, #1
20be4     20 22 CE F7 | 	test	local03, #32 wz
20be8     C0 26 46 55 |  if_ne	or	local05, #192
20bec     08 28 06 F1 | 	add	local06, #8
20bf0     14 27 62 FC | 	wrlong	local05, local06
20bf4     0C 28 06 F1 | 	add	local06, #12
20bf8     14 47 0A FB | 	rdlong	local21, local06 wz
20bfc     14 28 86 F1 | 	sub	local06, #20
20c00     18 00 90 5D |  if_ne	jmp	#LR__3153
20c04     04 2E 06 F1 | 	add	local09, #4
20c08     17 47 02 FB | 	rdlong	local21, local09
20c0c     04 2E 86 F1 | 	sub	local09, #4
20c10     14 28 06 F1 | 	add	local06, #20
20c14     14 47 62 FC | 	wrlong	local21, local06
20c18     14 28 86 F1 | 	sub	local06, #20
20c1c                 | LR__3153
20c1c     18 28 06 F1 | 	add	local06, #24
20c20     14 47 0A FB | 	rdlong	local21, local06 wz
20c24     18 28 86 F1 | 	sub	local06, #24
20c28     18 00 90 5D |  if_ne	jmp	#LR__3154
20c2c     08 2E 06 F1 | 	add	local09, #8
20c30     17 47 02 FB | 	rdlong	local21, local09
20c34     08 2E 86 F1 | 	sub	local09, #8
20c38     18 28 06 F1 | 	add	local06, #24
20c3c     14 47 62 FC | 	wrlong	local21, local06
20c40     18 28 86 F1 | 	sub	local06, #24
20c44                 | LR__3154
20c44     24 28 06 F1 | 	add	local06, #36
20c48     14 47 0A FB | 	rdlong	local21, local06 wz
20c4c     24 28 86 F1 | 	sub	local06, #36
20c50     17 47 02 AB |  if_e	rdlong	local21, local09
20c54     24 28 06 A1 |  if_e	add	local06, #36
20c58     14 47 62 AC |  if_e	wrlong	local21, local06
20c5c     24 28 86 A1 |  if_e	sub	local06, #36
20c60     28 28 06 F1 | 	add	local06, #40
20c64     14 47 0A FB | 	rdlong	local21, local06 wz
20c68     28 28 86 F1 | 	sub	local06, #40
20c6c     18 00 90 5D |  if_ne	jmp	#LR__3155
20c70     10 2E 06 F1 | 	add	local09, #16
20c74     17 47 02 FB | 	rdlong	local21, local09
20c78     10 2E 86 F1 | 	sub	local09, #16
20c7c     28 28 06 F1 | 	add	local06, #40
20c80     14 47 62 FC | 	wrlong	local21, local06
20c84     28 28 86 F1 | 	sub	local06, #40
20c88                 | LR__3155
20c88     30 28 06 F1 | 	add	local06, #48
20c8c     14 47 0A FB | 	rdlong	local21, local06 wz
20c90     30 28 86 F1 | 	sub	local06, #48
20c94     18 00 90 5D |  if_ne	jmp	#LR__3156
20c98     0C 2E 06 F1 | 	add	local09, #12
20c9c     17 47 02 FB | 	rdlong	local21, local09
20ca0     0C 2E 86 F1 | 	sub	local09, #12
20ca4     30 28 06 F1 | 	add	local06, #48
20ca8     14 47 62 FC | 	wrlong	local21, local06
20cac     30 28 86 F1 | 	sub	local06, #48
20cb0                 | LR__3156
20cb0     1C 28 06 F1 | 	add	local06, #28
20cb4     14 47 0A FB | 	rdlong	local21, local06 wz
20cb8     1C 28 86 F1 | 	sub	local06, #28
20cbc     1C 00 90 5D |  if_ne	jmp	#LR__3157
20cc0     01 2A 06 F6 | 	mov	local07, #1
20cc4     F2 12 02 F6 | 	mov	arg01, objptr
20cc8     00 10 04 FF 
20ccc     00 12 46 F5 | 	or	arg01, ##136314880
20cd0     1C 28 06 F1 | 	add	local06, #28
20cd4     14 13 62 FC | 	wrlong	arg01, local06
20cd8     1C 28 86 F1 | 	sub	local06, #28
20cdc                 | LR__3157
20cdc     20 28 06 F1 | 	add	local06, #32
20ce0     14 47 0A FB | 	rdlong	local21, local06 wz
20ce4     20 28 86 F1 | 	sub	local06, #32
20ce8     1C 00 90 5D |  if_ne	jmp	#LR__3158
20cec     01 2A 06 F6 | 	mov	local07, #1
20cf0     F2 12 02 F6 | 	mov	arg01, objptr
20cf4     00 18 04 FF 
20cf8     00 12 46 F5 | 	or	arg01, ##137363456
20cfc     20 28 06 F1 | 	add	local06, #32
20d00     14 13 62 FC | 	wrlong	arg01, local06
20d04     20 28 86 F1 | 	sub	local06, #32
20d08                 | LR__3158
20d08     2C 28 06 F1 | 	add	local06, #44
20d0c     14 47 0A FB | 	rdlong	local21, local06 wz
20d10     2C 28 86 F1 | 	sub	local06, #44
20d14     44 00 90 5D |  if_ne	jmp	#LR__3161
20d18     14 2E 06 F1 | 	add	local09, #20
20d1c     17 47 0A FB | 	rdlong	local21, local09 wz
20d20     14 2E 86 F1 | 	sub	local09, #20
20d24     18 00 90 AD |  if_e	jmp	#LR__3159
20d28     14 2E 06 F1 | 	add	local09, #20
20d2c     17 47 02 FB | 	rdlong	local21, local09
20d30     2C 28 06 F1 | 	add	local06, #44
20d34     14 47 62 FC | 	wrlong	local21, local06
20d38     2C 28 86 F1 | 	sub	local06, #44
20d3c     1C 00 90 FD | 	jmp	#LR__3160
20d40                 | LR__3159
20d40     01 2A 06 F6 | 	mov	local07, #1
20d44     F2 12 02 F6 | 	mov	arg01, objptr
20d48     00 20 04 FF 
20d4c     00 12 46 F5 | 	or	arg01, ##138412032
20d50     2C 28 06 F1 | 	add	local06, #44
20d54     14 13 62 FC | 	wrlong	arg01, local06
20d58     2C 28 86 F1 | 	sub	local06, #44
20d5c                 | LR__3160
20d5c                 | LR__3161
20d5c                 | LR__3162
20d5c     00 2A 0E F2 | 	cmp	local07, #0 wz
20d60     14 13 02 56 |  if_ne	mov	arg01, local06
20d64     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
20d68     00 42 0E F2 | 	cmp	local19, #0 wz
20d6c     00 12 06 A6 |  if_e	mov	arg01, #0
20d70     10 00 90 5D |  if_ne	jmp	#LR__3163
20d74     00 12 4E F2 | 	cmps	arg01, #0 wz
20d78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20d7c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20d80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20d84                 | LR__3163
20d84     21 FB 01 F6 | 	mov	result1, local19
20d88                 | LR__3164
20d88     A7 F0 03 F6 | 	mov	ptra, fp
20d8c     B2 00 A0 FD | 	call	#popregs_
20d90                 | __system___openraw_ret
20d90     2D 00 64 FD | 	ret
20d94                 | 
20d94                 | __system___closeraw
20d94     05 4A 05 F6 | 	mov	COUNT_, #5
20d98     A8 00 A0 FD | 	call	#pushregs_
20d9c     09 1F 02 F6 | 	mov	local01, arg01
20da0     00 20 06 F6 | 	mov	local02, #0
20da4     08 1E 06 F1 | 	add	local01, #8
20da8     0F FB 09 FB | 	rdlong	result1, local01 wz
20dac     08 1E 86 F1 | 	sub	local01, #8
20db0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20db4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
20db8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20dbc     01 FA 65 A6 |  if_e	neg	result1, #1
20dc0     A8 00 90 AD |  if_e	jmp	#LR__3172
20dc4     2C 1E 06 F1 | 	add	local01, #44
20dc8     0F FB 09 FB | 	rdlong	result1, local01 wz
20dcc     2C 1E 86 F1 | 	sub	local01, #44
20dd0     38 00 90 AD |  if_e	jmp	#LR__3170
20dd4     2C 1E 06 F1 | 	add	local01, #44
20dd8     0F 23 02 FB | 	rdlong	local03, local01
20ddc     11 25 02 F6 | 	mov	local04, local03
20de0     2C 1E 86 F1 | 	sub	local01, #44
20de4     13 24 46 F7 | 	zerox	local04, #19
20de8     14 22 46 F0 | 	shr	local03, #20
20dec     02 22 66 F0 | 	shl	local03, #2
20df0     ED 22 02 F1 | 	add	local03, __methods__
20df4     11 23 02 FB | 	rdlong	local03, local03
20df8     0F 13 02 F6 | 	mov	arg01, local01
20dfc     F2 26 02 F6 | 	mov	local05, objptr
20e00     12 E5 01 F6 | 	mov	objptr, local04
20e04     2D 22 62 FD | 	call	local03
20e08     13 E5 01 F6 | 	mov	objptr, local05
20e0c                 | LR__3170
20e0c     24 1E 06 F1 | 	add	local01, #36
20e10     0F 27 0A FB | 	rdlong	local05, local01 wz
20e14     24 1E 86 F1 | 	sub	local01, #36
20e18     3C 00 90 AD |  if_e	jmp	#LR__3171
20e1c     24 1E 06 F1 | 	add	local01, #36
20e20     0F 23 02 FB | 	rdlong	local03, local01
20e24     11 25 02 F6 | 	mov	local04, local03
20e28     24 1E 86 F1 | 	sub	local01, #36
20e2c     13 24 46 F7 | 	zerox	local04, #19
20e30     14 22 46 F0 | 	shr	local03, #20
20e34     02 22 66 F0 | 	shl	local03, #2
20e38     ED 22 02 F1 | 	add	local03, __methods__
20e3c     11 23 02 FB | 	rdlong	local03, local03
20e40     0F 13 02 F6 | 	mov	arg01, local01
20e44     F2 26 02 F6 | 	mov	local05, objptr
20e48     12 E5 01 F6 | 	mov	objptr, local04
20e4c     2D 22 62 FD | 	call	local03
20e50     13 E5 01 F6 | 	mov	objptr, local05
20e54     FD 20 02 F6 | 	mov	local02, result1
20e58                 | LR__3171
20e58     0F 13 02 F6 | 	mov	arg01, local01
20e5c     00 14 06 F6 | 	mov	arg02, #0
20e60     34 16 06 F6 | 	mov	arg03, #52
20e64     98 00 A0 FD | 	call	#\builtin_bytefill_
20e68     10 FB 01 F6 | 	mov	result1, local02
20e6c                 | LR__3172
20e6c     A7 F0 03 F6 | 	mov	ptra, fp
20e70     B2 00 A0 FD | 	call	#popregs_
20e74                 | __system___closeraw_ret
20e74     2D 00 64 FD | 	ret
20e78                 | 
20e78                 | __system___vfs_open_sdcardx
20e78     0B 4A 05 F6 | 	mov	COUNT_, #11
20e7c     A8 00 A0 FD | 	call	#pushregs_
20e80     09 23 02 F6 | 	mov	local03, arg01
20e84     0A 25 02 F6 | 	mov	local04, arg02
20e88     0B 27 02 F6 | 	mov	local05, arg03
20e8c     0C 29 02 F6 | 	mov	local06, arg04
20e90     01 00 00 FF 
20e94     24 12 06 F6 | 	mov	arg01, ##548
20e98     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
20e9c     FD 2A 02 F6 | 	mov	local07, result1
20ea0     01 00 00 FF 
20ea4     34 12 06 F6 | 	mov	arg01, ##564
20ea8     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
20eac     FD 2C 02 F6 | 	mov	local08, result1
20eb0     11 19 02 F6 | 	mov	arg04, local03
20eb4     1F 18 C6 F0 | 	sar	arg04, #31
20eb8     11 17 02 F6 | 	mov	arg03, local03
20ebc     01 12 06 F6 | 	mov	arg01, #1
20ec0     00 14 06 F6 | 	mov	arg02, #0
20ec4     48 DC BF FD | 	call	#__system___int64_shl
20ec8     FD 1E 02 F6 | 	mov	local01, result1
20ecc     FE 2E 02 F6 | 	mov	local09, result2
20ed0     12 19 02 F6 | 	mov	arg04, local04
20ed4     1F 18 C6 F0 | 	sar	arg04, #31
20ed8     12 17 02 F6 | 	mov	arg03, local04
20edc     01 12 06 F6 | 	mov	arg01, #1
20ee0     00 14 06 F6 | 	mov	arg02, #0
20ee4     28 DC BF FD | 	call	#__system___int64_shl
20ee8     FD 1E 42 F5 | 	or	local01, result1
20eec     FE 2E 42 F5 | 	or	local09, result2
20ef0     13 19 02 F6 | 	mov	arg04, local05
20ef4     1F 18 C6 F0 | 	sar	arg04, #31
20ef8     13 17 02 F6 | 	mov	arg03, local05
20efc     01 12 06 F6 | 	mov	arg01, #1
20f00     00 14 06 F6 | 	mov	arg02, #0
20f04     08 DC BF FD | 	call	#__system___int64_shl
20f08     FD 1E 42 F5 | 	or	local01, result1
20f0c     FE 2E 42 F5 | 	or	local09, result2
20f10     14 19 02 F6 | 	mov	arg04, local06
20f14     1F 18 C6 F0 | 	sar	arg04, #31
20f18     14 17 02 F6 | 	mov	arg03, local06
20f1c     01 12 06 F6 | 	mov	arg01, #1
20f20     00 14 06 F6 | 	mov	arg02, #0
20f24     E8 DB BF FD | 	call	#__system___int64_shl
20f28     17 15 02 F6 | 	mov	arg02, local09
20f2c     FD 1E 42 F5 | 	or	local01, result1
20f30     0A FD 41 F5 | 	or	result2, arg02
20f34     FE 20 02 F6 | 	mov	local02, result2
20f38     0F 13 02 F6 | 	mov	arg01, local01
20f3c     10 15 02 F6 | 	mov	arg02, local02
20f40     04 DC BF FD | 	call	#__system___usepins
20f44     00 FA 0D F2 | 	cmp	result1, #0 wz
20f48     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20f4c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
20f50     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20f54     00 FA 05 A6 |  if_e	mov	result1, #0
20f58     B4 00 90 AD |  if_e	jmp	#LR__3182
20f5c     0F 31 02 F6 | 	mov	local10, local01
20f60     10 2F 02 F6 | 	mov	local09, local02
20f64     01 00 00 FF 
20f68     08 2A 06 F1 | 	add	local07, ##520
20f6c     15 31 62 FC | 	wrlong	local10, local07
20f70     04 2A 06 F1 | 	add	local07, #4
20f74     15 2F 62 FC | 	wrlong	local09, local07
20f78     01 00 00 FF 
20f7c     0C 2A 86 F1 | 	sub	local07, ##524
20f80     14 1B 02 F6 | 	mov	arg05, local06
20f84     00 12 06 F6 | 	mov	arg01, #0
20f88     11 15 02 F6 | 	mov	arg02, local03
20f8c     12 17 02 F6 | 	mov	arg03, local04
20f90     13 19 02 F6 | 	mov	arg04, local05
20f94     F2 30 02 F6 | 	mov	local10, objptr
20f98     15 E5 01 F6 | 	mov	objptr, local07
20f9c     78 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
20fa0     18 E5 01 F6 | 	mov	objptr, local10
20fa4     FD 32 0A F6 | 	mov	local11, result1 wz
20fa8     24 00 90 5D |  if_ne	jmp	#LR__3180
20fac     5D 01 00 FF 
20fb0     62 14 06 F6 | 	mov	arg02, ##@LR__4577
20fb4     16 13 02 F6 | 	mov	arg01, local08
20fb8     00 16 06 F6 | 	mov	arg03, #0
20fbc     F2 32 02 F6 | 	mov	local11, objptr
20fc0     15 E5 01 F6 | 	mov	objptr, local07
20fc4     A8 5E B0 FD | 	call	#_fatfs_cc_f_mount
20fc8     19 E5 01 F6 | 	mov	objptr, local11
20fcc     FD 32 02 F6 | 	mov	local11, result1
20fd0                 | LR__3180
20fd0     00 32 0E F2 | 	cmp	local11, #0 wz
20fd4     24 00 90 AD |  if_e	jmp	#LR__3181
20fd8     0F 13 02 F6 | 	mov	arg01, local01
20fdc     10 15 02 F6 | 	mov	arg02, local02
20fe0     B8 DB BF FD | 	call	#__system___freepins
20fe4     19 13 6A F6 | 	neg	arg01, local11 wz
20fe8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20fec     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20ff0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20ff4     00 FA 05 F6 | 	mov	result1, #0
20ff8     14 00 90 FD | 	jmp	#LR__3182
20ffc                 | LR__3181
20ffc     15 13 02 F6 | 	mov	arg01, local07
21000     F2 32 02 F6 | 	mov	local11, objptr
21004     15 E5 01 F6 | 	mov	objptr, local07
21008     44 9B B0 FD | 	call	#_fatfs_cc_get_vfs
2100c     19 E5 01 F6 | 	mov	objptr, local11
21010                 | LR__3182
21010     A7 F0 03 F6 | 	mov	ptra, fp
21014     B2 00 A0 FD | 	call	#popregs_
21018                 | __system___vfs_open_sdcardx_ret
21018     2D 00 64 FD | 	ret
2101c                 | 
2101c                 | __system____default_getc
2101c     03 4A 05 F6 | 	mov	COUNT_, #3
21020     A8 00 A0 FD | 	call	#pushregs_
21024     09 1F 02 F6 | 	mov	local01, arg01
21028     0F 21 02 FB | 	rdlong	local02, local01
2102c     08 20 06 F1 | 	add	local02, #8
21030     10 23 02 FB | 	rdlong	local03, local02
21034     02 22 CE F7 | 	test	local03, #2 wz
21038     0F 13 02 56 |  if_ne	mov	arg01, local01
2103c     00 01 B0 5D |  if_ne	call	#__system____default_flush
21040     10 23 02 FB | 	rdlong	local03, local02
21044     01 22 46 F5 | 	or	local03, #1
21048     10 23 62 FC | 	wrlong	local03, local02
2104c     08 20 86 F1 | 	sub	local02, #8
21050     10 23 0A FB | 	rdlong	local03, local02 wz
21054     0C 00 90 5D |  if_ne	jmp	#LR__3190
21058     0F 13 02 F6 | 	mov	arg01, local01
2105c     60 16 B0 FD | 	call	#__system____default_filbuf
21060     FD 22 02 F6 | 	mov	local03, result1
21064                 | LR__3190
21064     01 22 56 F2 | 	cmps	local03, #1 wc
21068     01 FA 65 C6 |  if_b	neg	result1, #1
2106c     1C 00 90 CD |  if_b	jmp	#LR__3191
21070     01 22 86 F1 | 	sub	local03, #1
21074     10 23 62 FC | 	wrlong	local03, local02
21078     04 20 06 F1 | 	add	local02, #4
2107c     10 23 02 FB | 	rdlong	local03, local02
21080     11 FB C1 FA | 	rdbyte	result1, local03
21084     01 22 06 F1 | 	add	local03, #1
21088     10 23 62 FC | 	wrlong	local03, local02
2108c                 | LR__3191
2108c     A7 F0 03 F6 | 	mov	ptra, fp
21090     B2 00 A0 FD | 	call	#popregs_
21094                 | __system____default_getc_ret
21094     2D 00 64 FD | 	ret
21098                 | 
21098                 | __system____default_putc
21098     06 4A 05 F6 | 	mov	COUNT_, #6
2109c     A8 00 A0 FD | 	call	#pushregs_
210a0     09 1F 02 F6 | 	mov	local01, arg01
210a4     0A 21 02 F6 | 	mov	local02, arg02
210a8     10 23 02 FB | 	rdlong	local03, local02
210ac     08 22 06 F1 | 	add	local03, #8
210b0     11 FB 01 FB | 	rdlong	result1, local03
210b4     01 FA CD F7 | 	test	result1, #1 wz
210b8     10 13 02 56 |  if_ne	mov	arg01, local02
210bc     80 00 B0 5D |  if_ne	call	#__system____default_flush
210c0     11 25 02 FB | 	rdlong	local04, local03
210c4     02 24 46 F5 | 	or	local04, #2
210c8     11 25 62 FC | 	wrlong	local04, local03
210cc     08 22 86 F1 | 	sub	local03, #8
210d0     11 27 02 FB | 	rdlong	local05, local03
210d4     10 22 06 F1 | 	add	local03, #16
210d8     11 15 02 FB | 	rdlong	arg02, local03
210dc     10 22 86 F1 | 	sub	local03, #16
210e0     13 FB 01 F6 | 	mov	result1, local05
210e4     0A FB 01 F1 | 	add	result1, arg02
210e8     FD 1E 42 FC | 	wrbyte	local01, result1
210ec     0F 1F E2 F8 | 	getbyte	local01, local01, #0
210f0     01 26 06 F1 | 	add	local05, #1
210f4     11 27 62 FC | 	wrlong	local05, local03
210f8     06 20 06 F1 | 	add	local02, #6
210fc     10 29 EA FA | 	rdword	local06, local02 wz
21100     06 20 86 F1 | 	sub	local02, #6
21104     0C 22 06 51 |  if_ne	add	local03, #12
21108     11 25 02 5B |  if_ne	rdlong	local04, local03
2110c     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
21110     0C 00 90 AD |  if_e	jmp	#LR__3200
21114     0A 1E 0E F2 | 	cmp	local01, #10 wz
21118     01 28 0E A2 |  if_e	cmp	local06, #1 wz
2111c     10 00 90 5D |  if_ne	jmp	#LR__3201
21120                 | LR__3200
21120     10 13 02 F6 | 	mov	arg01, local02
21124     18 00 B0 FD | 	call	#__system____default_flush
21128     00 FA 0D F2 | 	cmp	result1, #0 wz
2112c     01 1E 66 56 |  if_ne	neg	local01, #1
21130                 | LR__3201
21130     0F FB 01 F6 | 	mov	result1, local01
21134     A7 F0 03 F6 | 	mov	ptra, fp
21138     B2 00 A0 FD | 	call	#popregs_
2113c                 | __system____default_putc_ret
2113c     2D 00 64 FD | 	ret
21140                 | 
21140                 | __system____default_flush
21140     06 4A 05 F6 | 	mov	COUNT_, #6
21144     A8 00 A0 FD | 	call	#pushregs_
21148     09 1F 02 F6 | 	mov	local01, arg01
2114c     0F 21 02 FB | 	rdlong	local02, local01
21150     10 23 02 FB | 	rdlong	local03, local02
21154     08 20 06 F1 | 	add	local02, #8
21158     10 FB 01 FB | 	rdlong	result1, local02
2115c     08 20 86 F1 | 	sub	local02, #8
21160     02 FA CD F7 | 	test	result1, #2 wz
21164     D0 00 90 AD |  if_e	jmp	#LR__3212
21168     01 22 56 F2 | 	cmps	local03, #1 wc
2116c     20 01 90 CD |  if_b	jmp	#LR__3214
21170     08 1E 06 F1 | 	add	local01, #8
21174     0F FB 01 FB | 	rdlong	result1, local01
21178     08 1E 86 F1 | 	sub	local01, #8
2117c     40 FA CD F7 | 	test	result1, #64 wz
21180     68 00 90 AD |  if_e	jmp	#LR__3211
21184     08 1E 06 F1 | 	add	local01, #8
21188     0F 17 02 FB | 	rdlong	arg03, local01
2118c     08 1E 86 F1 | 	sub	local01, #8
21190     80 16 CE F7 | 	test	arg03, #128 wz
21194     54 00 90 AD |  if_e	jmp	#LR__3210
21198     30 1E 06 F1 | 	add	local01, #48
2119c     0F 25 02 FB | 	rdlong	local04, local01
211a0     12 27 02 F6 | 	mov	local05, local04
211a4     30 1E 86 F1 | 	sub	local01, #48
211a8     13 26 46 F7 | 	zerox	local05, #19
211ac     14 24 46 F0 | 	shr	local04, #20
211b0     02 24 66 F0 | 	shl	local04, #2
211b4     ED 24 02 F1 | 	add	local04, __methods__
211b8     12 25 02 FB | 	rdlong	local04, local04
211bc     0F 13 02 F6 | 	mov	arg01, local01
211c0     00 14 06 F6 | 	mov	arg02, #0
211c4     02 16 06 F6 | 	mov	arg03, #2
211c8     F2 28 02 F6 | 	mov	local06, objptr
211cc     13 E5 01 F6 | 	mov	objptr, local05
211d0     2D 24 62 FD | 	call	local04
211d4     14 E5 01 F6 | 	mov	objptr, local06
211d8     08 1E 06 F1 | 	add	local01, #8
211dc     0F 29 02 FB | 	rdlong	local06, local01
211e0     80 28 26 F5 | 	andn	local06, #128
211e4     0F 29 62 FC | 	wrlong	local06, local01
211e8     08 1E 86 F1 | 	sub	local01, #8
211ec                 | LR__3210
211ec                 | LR__3211
211ec     18 1E 06 F1 | 	add	local01, #24
211f0     0F 25 02 FB | 	rdlong	local04, local01
211f4     12 27 02 F6 | 	mov	local05, local04
211f8     18 1E 86 F1 | 	sub	local01, #24
211fc     13 26 46 F7 | 	zerox	local05, #19
21200     14 24 46 F0 | 	shr	local04, #20
21204     02 24 66 F0 | 	shl	local04, #2
21208     ED 24 02 F1 | 	add	local04, __methods__
2120c     12 25 02 FB | 	rdlong	local04, local04
21210     10 20 06 F1 | 	add	local02, #16
21214     10 15 02 FB | 	rdlong	arg02, local02
21218     10 20 86 F1 | 	sub	local02, #16
2121c     0F 13 02 F6 | 	mov	arg01, local01
21220     11 17 02 F6 | 	mov	arg03, local03
21224     F2 28 02 F6 | 	mov	local06, objptr
21228     13 E5 01 F6 | 	mov	objptr, local05
2122c     2D 24 62 FD | 	call	local04
21230     14 E5 01 F6 | 	mov	objptr, local06
21234     58 00 90 FD | 	jmp	#LR__3214
21238                 | LR__3212
21238     08 20 06 F1 | 	add	local02, #8
2123c     10 29 02 FB | 	rdlong	local06, local02
21240     08 20 86 F1 | 	sub	local02, #8
21244     01 28 CE F7 | 	test	local06, #1 wz
21248     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2124c     40 00 90 AD |  if_e	jmp	#LR__3213
21250     30 1E 06 F1 | 	add	local01, #48
21254     0F 25 02 FB | 	rdlong	local04, local01
21258     12 27 02 F6 | 	mov	local05, local04
2125c     30 1E 86 F1 | 	sub	local01, #48
21260     13 26 46 F7 | 	zerox	local05, #19
21264     14 24 46 F0 | 	shr	local04, #20
21268     02 24 66 F0 | 	shl	local04, #2
2126c     ED 24 02 F1 | 	add	local04, __methods__
21270     12 25 02 FB | 	rdlong	local04, local04
21274     0F 13 02 F6 | 	mov	arg01, local01
21278     11 15 62 F6 | 	neg	arg02, local03
2127c     01 16 06 F6 | 	mov	arg03, #1
21280     F2 28 02 F6 | 	mov	local06, objptr
21284     13 E5 01 F6 | 	mov	objptr, local05
21288     2D 24 62 FD | 	call	local04
2128c     14 E5 01 F6 | 	mov	objptr, local06
21290                 | LR__3213
21290                 | LR__3214
21290     10 01 68 FC | 	wrlong	#0, local02
21294     04 20 06 F1 | 	add	local02, #4
21298     10 01 68 FC | 	wrlong	#0, local02
2129c     04 20 06 F1 | 	add	local02, #4
212a0     10 01 68 FC | 	wrlong	#0, local02
212a4     00 FA 05 F6 | 	mov	result1, #0
212a8     A7 F0 03 F6 | 	mov	ptra, fp
212ac     B2 00 A0 FD | 	call	#popregs_
212b0                 | __system____default_flush_ret
212b0     2D 00 64 FD | 	ret
212b4                 | 
212b4                 | __system____default_buffer_init
212b4     02 4A 05 F6 | 	mov	COUNT_, #2
212b8     A8 00 A0 FD | 	call	#pushregs_
212bc     09 1F 02 F6 | 	mov	local01, arg01
212c0     0F 21 02 FB | 	rdlong	local02, local01
212c4     0F 13 02 F6 | 	mov	arg01, local01
212c8     F8 02 B0 FD | 	call	#__system___isatty
212cc     00 FA 0D F2 | 	cmp	result1, #0 wz
212d0     06 1E 06 51 |  if_ne	add	local01, #6
212d4     0F 0B 58 5C |  if_ne	wrword	#5, local01
212d8     06 1E 06 A1 |  if_e	add	local01, #6
212dc     0F 0D 58 AC |  if_e	wrword	#6, local01
212e0     14 20 06 F1 | 	add	local02, #20
212e4     10 1F 02 F6 | 	mov	local01, local02
212e8     04 20 86 F1 | 	sub	local02, #4
212ec     10 1F 62 FC | 	wrlong	local01, local02
212f0     04 20 86 F1 | 	sub	local02, #4
212f4     02 00 80 FF 
212f8     10 01 68 FC | 	wrlong	##1024, local02
212fc     00 FA 05 F6 | 	mov	result1, #0
21300     A7 F0 03 F6 | 	mov	ptra, fp
21304     B2 00 A0 FD | 	call	#popregs_
21308                 | __system____default_buffer_init_ret
21308     2D 00 64 FD | 	ret
2130c                 | 
2130c                 | __system__stat
2130c     04 4A 05 F6 | 	mov	COUNT_, #4
21310     A8 00 A0 FD | 	call	#pushregs_
21314     0A 1F 02 F6 | 	mov	local01, arg02
21318     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2131c     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
21320     09 15 02 F6 | 	mov	arg02, arg01
21324     10 13 02 F6 | 	mov	arg01, local02
21328     00 16 06 F6 | 	mov	arg03, #0
2132c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
21330     B0 B8 BF FD | 	call	#__system____getvfsforfile
21334     FD 22 0A F6 | 	mov	local03, result1 wz
21338     10 00 90 AD |  if_e	jmp	#LR__3220
2133c     34 22 06 F1 | 	add	local03, #52
21340     11 17 0A FB | 	rdlong	arg03, local03 wz
21344     34 22 86 F1 | 	sub	local03, #52
21348     14 00 90 5D |  if_ne	jmp	#LR__3221
2134c                 | LR__3220
2134c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21350     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
21354     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21358     01 FA 65 F6 | 	neg	result1, #1
2135c     68 00 90 FD | 	jmp	#LR__3222
21360                 | LR__3221
21360     0F 13 02 F6 | 	mov	arg01, local01
21364     00 14 06 F6 | 	mov	arg02, #0
21368     30 16 06 F6 | 	mov	arg03, #48
2136c     09 25 02 F6 | 	mov	local04, arg01
21370     98 00 A0 FD | 	call	#\builtin_bytefill_
21374     12 FB 01 F6 | 	mov	result1, local04
21378     10 13 CA FA | 	rdbyte	arg01, local02 wz
2137c     08 1E 06 A1 |  if_e	add	local01, #8
21380     08 00 80 AF 
21384     0F FF 6B AC |  if_e	wrlong	##4607, local01
21388     00 FA 05 A6 |  if_e	mov	result1, #0
2138c     38 00 90 AD |  if_e	jmp	#LR__3222
21390     34 22 06 F1 | 	add	local03, #52
21394     11 23 02 FB | 	rdlong	local03, local03
21398     11 25 02 F6 | 	mov	local04, local03
2139c     13 22 46 F7 | 	zerox	local03, #19
213a0     14 24 46 F0 | 	shr	local04, #20
213a4     02 24 66 F0 | 	shl	local04, #2
213a8     ED 24 02 F1 | 	add	local04, __methods__
213ac     12 25 02 FB | 	rdlong	local04, local04
213b0     10 13 02 F6 | 	mov	arg01, local02
213b4     0F 15 02 F6 | 	mov	arg02, local01
213b8     F2 20 02 F6 | 	mov	local02, objptr
213bc     11 E5 01 F6 | 	mov	objptr, local03
213c0     2D 24 62 FD | 	call	local04
213c4     10 E5 01 F6 | 	mov	objptr, local02
213c8                 | LR__3222
213c8     A7 F0 03 F6 | 	mov	ptra, fp
213cc     B2 00 A0 FD | 	call	#popregs_
213d0                 | __system__stat_ret
213d0     2D 00 64 FD | 	ret
213d4                 | 
213d4                 | __system__read
213d4     0A 12 16 F2 | 	cmp	arg01, #10 wc
213d8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
213dc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
213e0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
213e4     01 FA 65 36 |  if_ae	neg	result1, #1
213e8     20 00 90 3D |  if_ae	jmp	#LR__3230
213ec     34 12 06 FD | 	qmul	arg01, #52
213f0     02 00 00 FF 
213f4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
213f8     18 12 62 FD | 	getqx	arg01
213fc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
21400     02 00 00 FF 
21404     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
21408     CC 0F B0 FD | 	call	#__system___vfsread
2140c                 | LR__3230
2140c                 | __system__read_ret
2140c     2D 00 64 FD | 	ret
21410                 | 
21410                 | __system__close
21410     0A 12 16 F2 | 	cmp	arg01, #10 wc
21414     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
21418     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2141c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
21420     01 FA 65 36 |  if_ae	neg	result1, #1
21424     20 00 90 3D |  if_ae	jmp	#LR__3240
21428     34 12 06 FD | 	qmul	arg01, #52
2142c     02 00 00 FF 
21430     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
21434     18 12 62 FD | 	getqx	arg01
21438     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2143c     02 00 00 FF 
21440     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
21444     4C F9 BF FD | 	call	#__system___closeraw
21448                 | LR__3240
21448                 | __system__close_ret
21448     2D 00 64 FD | 	ret
2144c                 | 
2144c                 | __system__lseek
2144c     06 4A 05 F6 | 	mov	COUNT_, #6
21450     A8 00 A0 FD | 	call	#pushregs_
21454     0A 12 16 F2 | 	cmp	arg01, #10 wc
21458     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2145c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
21460     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
21464     01 FA 65 36 |  if_ae	neg	result1, #1
21468     C4 00 90 3D |  if_ae	jmp	#LR__3251
2146c     34 12 06 FD | 	qmul	arg01, #52
21470     02 00 00 FF 
21474     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
21478     18 1E 62 FD | 	getqx	local01
2147c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
21480     30 1E 06 F1 | 	add	local01, #48
21484     0F 13 0A FB | 	rdlong	arg01, local01 wz
21488     30 1E 86 F1 | 	sub	local01, #48
2148c     02 00 00 FF 
21490     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
21494     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21498     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2149c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
214a0     01 FA 65 A6 |  if_e	neg	result1, #1
214a4     88 00 90 AD |  if_e	jmp	#LR__3251
214a8     08 1E 06 F1 | 	add	local01, #8
214ac     0F 21 02 FB | 	rdlong	local02, local01
214b0     08 1E 86 F1 | 	sub	local01, #8
214b4     40 20 CE F7 | 	test	local02, #64 wz
214b8     08 1E 06 51 |  if_ne	add	local01, #8
214bc     0F 21 02 5B |  if_ne	rdlong	local02, local01
214c0     80 20 46 55 |  if_ne	or	local02, #128
214c4     0F 21 62 5C |  if_ne	wrlong	local02, local01
214c8     08 1E 86 51 |  if_ne	sub	local01, #8
214cc     30 1E 06 F1 | 	add	local01, #48
214d0     0F 23 02 FB | 	rdlong	local03, local01
214d4     11 25 02 F6 | 	mov	local04, local03
214d8     30 1E 86 F1 | 	sub	local01, #48
214dc     13 24 46 F7 | 	zerox	local04, #19
214e0     14 22 46 F0 | 	shr	local03, #20
214e4     02 22 66 F0 | 	shl	local03, #2
214e8     ED 22 02 F1 | 	add	local03, __methods__
214ec     11 23 02 FB | 	rdlong	local03, local03
214f0     0F 13 02 F6 | 	mov	arg01, local01
214f4     F2 26 02 F6 | 	mov	local05, objptr
214f8     12 E5 01 F6 | 	mov	objptr, local04
214fc     2D 22 62 FD | 	call	local03
21500     13 E5 01 F6 | 	mov	objptr, local05
21504     FD 28 02 F6 | 	mov	local06, result1
21508     00 28 56 F2 | 	cmps	local06, #0 wc
2150c     1C 00 90 3D |  if_ae	jmp	#LR__3250
21510     14 13 6A F6 | 	neg	arg01, local06 wz
21514     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21518     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2151c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21520     01 FA 65 56 |  if_ne	neg	result1, #1
21524     00 FA 05 A6 |  if_e	mov	result1, #0
21528     04 00 90 FD | 	jmp	#LR__3251
2152c                 | LR__3250
2152c     14 FB 01 F6 | 	mov	result1, local06
21530                 | LR__3251
21530     A7 F0 03 F6 | 	mov	ptra, fp
21534     B2 00 A0 FD | 	call	#popregs_
21538                 | __system__lseek_ret
21538     2D 00 64 FD | 	ret
2153c                 | 
2153c                 | __system___ioctl
2153c     03 4A 05 F6 | 	mov	COUNT_, #3
21540     A8 00 A0 FD | 	call	#pushregs_
21544     00 12 4E F2 | 	cmps	arg01, #0 wz
21548     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2154c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
21550     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21554     01 FA 65 A6 |  if_e	neg	result1, #1
21558     5C 00 90 AD |  if_e	jmp	#LR__3261
2155c     28 12 06 F1 | 	add	arg01, #40
21560     09 1F 02 FB | 	rdlong	local01, arg01
21564     0F 21 02 F6 | 	mov	local02, local01
21568     28 12 86 F1 | 	sub	arg01, #40
2156c     13 20 46 F7 | 	zerox	local02, #19
21570     14 1E 46 F0 | 	shr	local01, #20
21574     02 1E 66 F0 | 	shl	local01, #2
21578     ED 1E 02 F1 | 	add	local01, __methods__
2157c     0F 1F 02 FB | 	rdlong	local01, local01
21580     F2 22 02 F6 | 	mov	local03, objptr
21584     10 E5 01 F6 | 	mov	objptr, local02
21588     2D 1E 62 FD | 	call	local01
2158c     11 E5 01 F6 | 	mov	objptr, local03
21590     FD 12 0A F6 | 	mov	arg01, result1 wz
21594     1C 00 90 AD |  if_e	jmp	#LR__3260
21598     00 12 4E F2 | 	cmps	arg01, #0 wz
2159c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
215a0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
215a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
215a8     01 FA 65 56 |  if_ne	neg	result1, #1
215ac     00 FA 05 A6 |  if_e	mov	result1, #0
215b0     04 00 90 FD | 	jmp	#LR__3261
215b4                 | LR__3260
215b4     00 FA 05 F6 | 	mov	result1, #0
215b8                 | LR__3261
215b8     A7 F0 03 F6 | 	mov	ptra, fp
215bc     B2 00 A0 FD | 	call	#popregs_
215c0                 | __system___ioctl_ret
215c0     2D 00 64 FD | 	ret
215c4                 | 
215c4                 | __system___isatty
215c4     00 4A 05 F6 | 	mov	COUNT_, #0
215c8     A8 00 A0 FD | 	call	#pushregs_
215cc     0C F0 07 F1 | 	add	ptra, #12
215d0     04 4E 05 F1 | 	add	fp, #4
215d4     A7 12 62 FC | 	wrlong	arg01, fp
215d8     04 4E 05 F1 | 	add	fp, #4
215dc     A7 16 02 F6 | 	mov	arg03, fp
215e0     08 4E 85 F1 | 	sub	fp, #8
215e4     00 15 06 F6 | 	mov	arg02, #256
215e8     50 FF BF FD | 	call	#__system___ioctl
215ec     00 FA 0D F2 | 	cmp	result1, #0 wz
215f0     01 FA 05 A6 |  if_e	mov	result1, #1
215f4     00 FA 05 56 |  if_ne	mov	result1, #0
215f8     A7 F0 03 F6 | 	mov	ptra, fp
215fc     B2 00 A0 FD | 	call	#popregs_
21600                 | __system___isatty_ret
21600     2D 00 64 FD | 	ret
21604                 | 
21604                 | __system____getftab
21604     0A 12 16 F2 | 	cmp	arg01, #10 wc
21608     34 12 06 CD |  if_b	qmul	arg01, #52
2160c     00 FA 05 36 |  if_ae	mov	result1, #0
21610     02 00 00 CF 
21614     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
21618     18 FA 61 CD |  if_b	getqx	result1
2161c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
21620     02 00 00 CF 
21624     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
21628                 | __system____getftab_ret
21628     2D 00 64 FD | 	ret
2162c                 | 
2162c                 | __system__strncpy
2162c     09 01 02 F6 | 	mov	_var01, arg01
21630                 | LR__3270
21630     01 16 86 F1 | 	sub	arg03, #1
21634     00 16 56 F2 | 	cmps	arg03, #0 wc
21638     18 00 90 CD |  if_b	jmp	#LR__3271
2163c     0A FB C1 FA | 	rdbyte	result1, arg02
21640     00 FB 41 FC | 	wrbyte	result1, _var01
21644     01 14 06 F1 | 	add	arg02, #1
21648     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2164c     01 00 06 F1 | 	add	_var01, #1
21650     DC FF 9F 5D |  if_ne	jmp	#LR__3270
21654                 | LR__3271
21654     97 0C 48 FB | 	callpa	#(@LR__3273-@LR__3272)>>2,fcache_load_ptr_
21658                 | LR__3272
21658     01 16 86 F1 | 	sub	arg03, #1
2165c     00 16 56 F2 | 	cmps	arg03, #0 wc
21660     00 03 02 36 |  if_ae	mov	_var02, _var01
21664     01 00 06 31 |  if_ae	add	_var01, #1
21668     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2166c     E8 FF 9F 3D |  if_ae	jmp	#LR__3272
21670                 | LR__3273
21670     09 FB 01 F6 | 	mov	result1, arg01
21674                 | __system__strncpy_ret
21674     2D 00 64 FD | 	ret
21678                 | 
21678                 | __system__strncat
21678     00 14 4E F2 | 	cmps	arg02, #0 wz
2167c     50 00 90 AD |  if_e	jmp	#LR__3284
21680     01 16 16 F2 | 	cmp	arg03, #1 wc
21684     48 00 90 CD |  if_b	jmp	#LR__3284
21688     09 01 02 F6 | 	mov	_var01, arg01
2168c     97 1E 48 FB | 	callpa	#(@LR__3282-@LR__3280)>>2,fcache_load_ptr_
21690                 | LR__3280
21690     00 FB C9 FA | 	rdbyte	result1, _var01 wz
21694     01 00 06 51 |  if_ne	add	_var01, #1
21698     F4 FF 9F 5D |  if_ne	jmp	#LR__3280
2169c     0B 03 02 F6 | 	mov	_var02, arg03
216a0                 | LR__3281
216a0     0A 05 C2 FA | 	rdbyte	_var03, arg02
216a4     02 07 02 F6 | 	mov	_var04, _var03
216a8     07 06 4E F7 | 	zerox	_var04, #7 wz
216ac     01 14 06 F1 | 	add	arg02, #1
216b0     18 00 90 AD |  if_e	jmp	#LR__3283
216b4     01 02 86 F1 | 	sub	_var02, #1
216b8     00 02 56 F2 | 	cmps	_var02, #0 wc
216bc     00 07 02 36 |  if_ae	mov	_var04, _var01
216c0     01 00 06 31 |  if_ae	add	_var01, #1
216c4     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
216c8     D4 FF 9F 3D |  if_ae	jmp	#LR__3281
216cc                 | LR__3282
216cc                 | LR__3283
216cc     00 01 48 FC | 	wrbyte	#0, _var01
216d0                 | LR__3284
216d0     09 FB 01 F6 | 	mov	result1, arg01
216d4                 | __system__strncat_ret
216d4     2D 00 64 FD | 	ret
216d8                 | 
216d8                 | __system__strncmp
216d8     09 01 0A F6 | 	mov	_var01, arg01 wz
216dc     14 00 90 5D |  if_ne	jmp	#LR__3290
216e0     00 14 0E F2 | 	cmp	arg02, #0 wz
216e4     01 02 66 56 |  if_ne	neg	_var02, #1
216e8     00 02 06 A6 |  if_e	mov	_var02, #0
216ec     01 FB 01 F6 | 	mov	result1, _var02
216f0     74 00 90 FD | 	jmp	#__system__strncmp_ret
216f4                 | LR__3290
216f4     00 14 0E F2 | 	cmp	arg02, #0 wz
216f8     01 FA 05 A6 |  if_e	mov	result1, #1
216fc     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
21700     0B 05 02 F6 | 	mov	_var03, arg03
21704     97 16 48 FB | 	callpa	#(@LR__3292-@LR__3291)>>2,fcache_load_ptr_
21708                 | LR__3291
21708     00 07 C2 FA | 	rdbyte	_var04, _var01
2170c     0A 09 02 F6 | 	mov	_var05, arg02
21710     04 0B C2 FA | 	rdbyte	_var06, _var05
21714     01 04 86 F1 | 	sub	_var03, #1
21718     00 04 56 F2 | 	cmps	_var03, #0 wc
2171c     01 00 06 F1 | 	add	_var01, #1
21720     01 14 06 F1 | 	add	arg02, #1
21724     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
21728     08 00 90 2D |  if_nc_and_z	jmp	#LR__3293
2172c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
21730     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3291
21734                 | LR__3292
21734                 | LR__3293
21734     00 04 56 F2 | 	cmps	_var03, #0 wc
21738     00 FA 05 C6 |  if_b	mov	result1, #0
2173c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
21740     05 07 0A F2 | 	cmp	_var04, _var06 wz
21744     00 FA 05 A6 |  if_e	mov	result1, #0
21748     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2174c     00 06 0E F2 | 	cmp	_var04, #0 wz
21750     01 FA 65 A6 |  if_e	neg	result1, #1
21754     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
21758     00 0A 0E F2 | 	cmp	_var06, #0 wz
2175c     01 FA 05 A6 |  if_e	mov	result1, #1
21760     03 FB 01 56 |  if_ne	mov	result1, _var04
21764     05 FB 81 51 |  if_ne	sub	result1, _var06
21768                 | __system__strncmp_ret
21768     2D 00 64 FD | 	ret
2176c                 | 
2176c                 | __system____root_opendir
2176c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21770     04 12 06 F1 | 	add	arg01, #4
21774     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
21778     00 FA 05 F6 | 	mov	result1, #0
2177c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21780                 | __system____root_opendir_ret
21780     2D 00 64 FD | 	ret
21784                 | 
21784                 | __system____root_readdir
21784     03 4A 05 F6 | 	mov	COUNT_, #3
21788     A8 00 A0 FD | 	call	#pushregs_
2178c     09 1F 02 F6 | 	mov	local01, arg01
21790     0A 21 02 F6 | 	mov	local02, arg02
21794     04 1E 06 F1 | 	add	local01, #4
21798     0F 23 02 FB | 	rdlong	local03, local01
2179c     04 1E 86 F1 | 	sub	local01, #4
217a0                 | LR__3300
217a0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
217a4     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
217a8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
217ac     01 FA 65 A6 |  if_e	neg	result1, #1
217b0     48 00 90 AD |  if_e	jmp	#LR__3301
217b4     11 17 0A FB | 	rdlong	arg03, local03 wz
217b8     04 22 06 A1 |  if_e	add	local03, #4
217bc     E0 FF 9F AD |  if_e	jmp	#LR__3300
217c0     11 15 02 FB | 	rdlong	arg02, local03
217c4     01 14 06 F1 | 	add	arg02, #1
217c8     10 13 02 F6 | 	mov	arg01, local02
217cc     40 16 06 F6 | 	mov	arg03, #64
217d0     58 FE BF FD | 	call	#__system__strncpy
217d4     50 20 06 F1 | 	add	local02, #80
217d8     10 03 48 FC | 	wrbyte	#1, local02
217dc     08 20 86 F1 | 	sub	local02, #8
217e0     10 01 68 FC | 	wrlong	#0, local02
217e4     04 20 06 F1 | 	add	local02, #4
217e8     10 01 68 FC | 	wrlong	#0, local02
217ec     04 22 06 F1 | 	add	local03, #4
217f0     04 1E 06 F1 | 	add	local01, #4
217f4     0F 23 62 FC | 	wrlong	local03, local01
217f8     00 FA 05 F6 | 	mov	result1, #0
217fc                 | LR__3301
217fc     A7 F0 03 F6 | 	mov	ptra, fp
21800     B2 00 A0 FD | 	call	#popregs_
21804                 | __system____root_readdir_ret
21804     2D 00 64 FD | 	ret
21808                 | 
21808                 | __system____root_closedir
21808     00 FA 05 F6 | 	mov	result1, #0
2180c                 | __system____root_closedir_ret
2180c     2D 00 64 FD | 	ret
21810                 | 
21810                 | __system____root_stat
21810     0A 01 02 F6 | 	mov	_var01, arg02
21814     00 13 02 F6 | 	mov	arg01, _var01
21818     00 14 06 F6 | 	mov	arg02, #0
2181c     30 16 06 F6 | 	mov	arg03, #48
21820     98 00 A0 FD | 	call	#\builtin_bytefill_
21824     08 00 06 F1 | 	add	_var01, #8
21828     08 00 80 FF 
2182c     00 FF 6B FC | 	wrlong	##4607, _var01
21830     00 FA 05 F6 | 	mov	result1, #0
21834                 | __system____root_stat_ret
21834     2D 00 64 FD | 	ret
21838                 | 
21838                 | __system___normalizeName
21838     00 00 06 F6 | 	mov	_var01, #0
2183c     09 03 02 F6 | 	mov	_var02, arg01
21840     01 05 02 F6 | 	mov	_var03, _var02
21844                 | LR__3310
21844     01 07 CA FA | 	rdbyte	_var04, _var02 wz
21848     5C 01 90 AD |  if_e	jmp	#LR__3329
2184c     00 00 0E F2 | 	cmp	_var01, #0 wz
21850     02 07 02 56 |  if_ne	mov	_var04, _var03
21854     01 04 06 51 |  if_ne	add	_var03, #1
21858     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2185c     00 00 06 56 |  if_ne	mov	_var01, #0
21860     01 07 C2 FA | 	rdbyte	_var04, _var02
21864     2E 06 0E F2 | 	cmp	_var04, #46 wz
21868     D8 00 90 5D |  if_ne	jmp	#LR__3322
2186c     01 02 06 F1 | 	add	_var02, #1
21870     01 07 C2 FA | 	rdbyte	_var04, _var02
21874     01 02 86 F1 | 	sub	_var02, #1
21878     2F 06 0E F2 | 	cmp	_var04, #47 wz
2187c     18 00 90 AD |  if_e	jmp	#LR__3311
21880     01 02 06 F1 | 	add	_var02, #1
21884     01 09 C2 FA | 	rdbyte	_var05, _var02
21888     01 02 86 F1 | 	sub	_var02, #1
2188c     04 0B 02 F6 | 	mov	_var06, _var05
21890     07 0A 4E F7 | 	zerox	_var06, #7 wz
21894     10 00 90 5D |  if_ne	jmp	#LR__3312
21898                 | LR__3311
21898     01 0D 02 F6 | 	mov	_var07, _var02
2189c     01 0C 06 F1 | 	add	_var07, #1
218a0     06 03 02 F6 | 	mov	_var02, _var07
218a4     E0 00 90 FD | 	jmp	#LR__3326
218a8                 | LR__3312
218a8     01 02 06 F1 | 	add	_var02, #1
218ac     01 0D C2 FA | 	rdbyte	_var07, _var02
218b0     01 02 86 F1 | 	sub	_var02, #1
218b4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
218b8     2E 06 0E F2 | 	cmp	_var04, #46 wz
218bc     84 00 90 5D |  if_ne	jmp	#LR__3321
218c0     02 02 06 F1 | 	add	_var02, #2
218c4     01 0D C2 FA | 	rdbyte	_var07, _var02
218c8     02 02 86 F1 | 	sub	_var02, #2
218cc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
218d0     2F 06 0E F2 | 	cmp	_var04, #47 wz
218d4     18 00 90 AD |  if_e	jmp	#LR__3313
218d8     02 02 06 F1 | 	add	_var02, #2
218dc     01 09 C2 FA | 	rdbyte	_var05, _var02
218e0     02 02 86 F1 | 	sub	_var02, #2
218e4     04 0B 02 F6 | 	mov	_var06, _var05
218e8     07 0A 4E F7 | 	zerox	_var06, #7 wz
218ec     54 00 90 5D |  if_ne	jmp	#LR__3320
218f0                 | LR__3313
218f0     02 02 06 F1 | 	add	_var02, #2
218f4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
218f8     40 00 90 ED |  if_be	jmp	#LR__3319
218fc     02 0F 02 F6 | 	mov	_var08, _var03
21900     01 0E 86 F1 | 	sub	_var08, #1
21904                 | LR__3314
21904     07 07 C2 FA | 	rdbyte	_var04, _var08
21908     2F 06 0E F2 | 	cmp	_var04, #47 wz
2190c     0C 00 90 5D |  if_ne	jmp	#LR__3315
21910     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
21914     01 0E 86 11 |  if_a	sub	_var08, #1
21918     E8 FF 9F 1D |  if_a	jmp	#LR__3314
2191c                 | LR__3315
2191c     97 0C 48 FB | 	callpa	#(@LR__3317-@LR__3316)>>2,fcache_load_ptr_
21920                 | LR__3316
21920     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
21924     10 00 90 ED |  if_be	jmp	#LR__3318
21928     07 07 C2 FA | 	rdbyte	_var04, _var08
2192c     2F 06 0E F2 | 	cmp	_var04, #47 wz
21930     01 0E 86 51 |  if_ne	sub	_var08, #1
21934     E8 FF 9F 5D |  if_ne	jmp	#LR__3316
21938                 | LR__3317
21938                 | LR__3318
21938     07 05 02 F6 | 	mov	_var03, _var08
2193c                 | LR__3319
2193c     01 00 06 F6 | 	mov	_var01, #1
21940     44 00 90 FD | 	jmp	#LR__3326
21944                 | LR__3320
21944                 | LR__3321
21944                 | LR__3322
21944     97 18 48 FB | 	callpa	#(@LR__3324-@LR__3323)>>2,fcache_load_ptr_
21948                 | LR__3323
21948     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2194c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
21950     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
21954     20 00 90 AD |  if_e	jmp	#LR__3325
21958     01 0B 02 F6 | 	mov	_var06, _var02
2195c     01 09 02 F6 | 	mov	_var05, _var02
21960     01 08 06 F1 | 	add	_var05, #1
21964     05 11 C2 FA | 	rdbyte	_var09, _var06
21968     04 03 02 F6 | 	mov	_var02, _var05
2196c     02 11 42 FC | 	wrbyte	_var09, _var03
21970     01 04 06 F1 | 	add	_var03, #1
21974     D0 FF 9F FD | 	jmp	#LR__3323
21978                 | LR__3324
21978                 | LR__3325
21978     01 07 C2 FA | 	rdbyte	_var04, _var02
2197c     2F 06 0E F2 | 	cmp	_var04, #47 wz
21980     C0 FE 9F 5D |  if_ne	jmp	#LR__3310
21984     01 00 06 F6 | 	mov	_var01, #1
21988                 | LR__3326
21988     97 0C 48 FB | 	callpa	#(@LR__3328-@LR__3327)>>2,fcache_load_ptr_
2198c                 | LR__3327
2198c     01 07 C2 FA | 	rdbyte	_var04, _var02
21990     2F 06 0E F2 | 	cmp	_var04, #47 wz
21994     01 0D 02 A6 |  if_e	mov	_var07, _var02
21998     01 0C 06 A1 |  if_e	add	_var07, #1
2199c     06 03 02 A6 |  if_e	mov	_var02, _var07
219a0     E8 FF 9F AD |  if_e	jmp	#LR__3327
219a4                 | LR__3328
219a4     9C FE 9F FD | 	jmp	#LR__3310
219a8                 | LR__3329
219a8     02 01 48 FC | 	wrbyte	#0, _var03
219ac                 | __system___normalizeName_ret
219ac     2D 00 64 FD | 	ret
219b0                 | 
219b0                 | __system___strrev
219b0     09 01 CA FA | 	rdbyte	_var01, arg01 wz
219b4     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
219b8     09 03 02 F6 | 	mov	_var02, arg01
219bc     97 1A 48 FB | 	callpa	#(@LR__3332-@LR__3330)>>2,fcache_load_ptr_
219c0                 | LR__3330
219c0     01 01 CA FA | 	rdbyte	_var01, _var02 wz
219c4     01 02 06 51 |  if_ne	add	_var02, #1
219c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3330
219cc     01 02 86 F1 | 	sub	_var02, #1
219d0                 | LR__3331
219d0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
219d4     1C 00 90 ED |  if_be	jmp	#LR__3333
219d8     09 01 C2 FA | 	rdbyte	_var01, arg01
219dc     01 05 C2 FA | 	rdbyte	_var03, _var02
219e0     09 05 42 FC | 	wrbyte	_var03, arg01
219e4     01 01 42 FC | 	wrbyte	_var01, _var02
219e8     01 12 06 F1 | 	add	arg01, #1
219ec     01 02 86 F1 | 	sub	_var02, #1
219f0     DC FF 9F FD | 	jmp	#LR__3331
219f4                 | LR__3332
219f4                 | LR__3333
219f4                 | __system___strrev_ret
219f4     2D 00 64 FD | 	ret
219f8                 | 
219f8                 | __system___fmtpad
219f8     06 4A 05 F6 | 	mov	COUNT_, #6
219fc     A8 00 A0 FD | 	call	#pushregs_
21a00     09 1F 02 F6 | 	mov	local01, arg01
21a04     0A 21 02 F6 | 	mov	local02, arg02
21a08     0B 23 02 F6 | 	mov	local03, arg03
21a0c     10 13 EA F8 | 	getbyte	arg01, local02, #1
21a10     16 20 46 F0 | 	shr	local02, #22
21a14     03 20 0E F5 | 	and	local02, #3 wz
21a18     00 24 06 F6 | 	mov	local04, #0
21a1c     01 20 06 A6 |  if_e	mov	local02, #1
21a20     0C 21 CA F7 | 	test	local02, arg04 wz
21a24     00 FA 05 A6 |  if_e	mov	result1, #0
21a28     88 00 90 AD |  if_e	jmp	#LR__3343
21a2c     09 23 C2 F2 | 	subr	local03, arg01
21a30     01 22 56 F2 | 	cmps	local03, #1 wc
21a34     00 FA 05 C6 |  if_b	mov	result1, #0
21a38     78 00 90 CD |  if_b	jmp	#LR__3343
21a3c     03 20 0E F2 | 	cmp	local02, #3 wz
21a40     18 00 90 5D |  if_ne	jmp	#LR__3340
21a44     01 18 0E F2 | 	cmp	arg04, #1 wz
21a48     6E 20 62 FD | 	wrz	local02
21a4c     10 23 02 F1 | 	add	local03, local02
21a50     11 23 52 F6 | 	abs	local03, local03 wc
21a54     01 22 46 F0 | 	shr	local03, #1
21a58     11 23 82 F6 | 	negc	local03, local03
21a5c                 | LR__3340
21a5c     01 22 56 F2 | 	cmps	local03, #1 wc
21a60     4C 00 90 CD |  if_b	jmp	#LR__3342
21a64     11 27 02 F6 | 	mov	local05, local03
21a68                 | LR__3341
21a68     0F 21 02 F6 | 	mov	local02, local01
21a6c     0F 29 02 F6 | 	mov	local06, local01
21a70     13 20 46 F7 | 	zerox	local02, #19
21a74     14 28 46 F0 | 	shr	local06, #20
21a78     02 28 66 F0 | 	shl	local06, #2
21a7c     ED 28 02 F1 | 	add	local06, __methods__
21a80     14 29 02 FB | 	rdlong	local06, local06
21a84     20 12 06 F6 | 	mov	arg01, #32
21a88     F2 22 02 F6 | 	mov	local03, objptr
21a8c     10 E5 01 F6 | 	mov	objptr, local02
21a90     2D 28 62 FD | 	call	local06
21a94     11 E5 01 F6 | 	mov	objptr, local03
21a98     FD 28 02 F6 | 	mov	local06, result1
21a9c     00 28 56 F2 | 	cmps	local06, #0 wc
21aa0     14 FB 01 C6 |  if_b	mov	result1, local06
21aa4     0C 00 90 CD |  if_b	jmp	#LR__3343
21aa8     14 25 02 F1 | 	add	local04, local06
21aac     EE 27 6E FB | 	djnz	local05, #LR__3341
21ab0                 | LR__3342
21ab0     12 FB 01 F6 | 	mov	result1, local04
21ab4                 | LR__3343
21ab4     A7 F0 03 F6 | 	mov	ptra, fp
21ab8     B2 00 A0 FD | 	call	#popregs_
21abc                 | __system___fmtpad_ret
21abc     2D 00 64 FD | 	ret
21ac0                 | 
21ac0                 | __system___uitoa
21ac0     04 4A 05 F6 | 	mov	COUNT_, #4
21ac4     A8 00 A0 FD | 	call	#pushregs_
21ac8     09 1F 02 F6 | 	mov	local01, arg01
21acc     00 1A 4E F2 | 	cmps	arg05, #0 wz
21ad0     0F 1B 02 F6 | 	mov	arg05, local01
21ad4     00 20 06 F6 | 	mov	local02, #0
21ad8     37 22 06 56 |  if_ne	mov	local03, #55
21adc     57 22 06 A6 |  if_e	mov	local03, #87
21ae0                 | LR__3350
21ae0     0B 15 12 FD | 	qdiv	arg02, arg03
21ae4     19 24 62 FD | 	getqy	local04
21ae8     0B 15 12 FD | 	qdiv	arg02, arg03
21aec     0A 24 16 F2 | 	cmp	local04, #10 wc
21af0     30 24 06 C1 |  if_b	add	local04, #48
21af4     11 25 02 31 |  if_ae	add	local04, local03
21af8     0D 25 42 FC | 	wrbyte	local04, arg05
21afc     01 1A 06 F1 | 	add	arg05, #1
21b00     01 20 06 F1 | 	add	local02, #1
21b04     18 14 62 FD | 	getqx	arg02
21b08     00 14 0E F2 | 	cmp	arg02, #0 wz
21b0c     D0 FF 9F 5D |  if_ne	jmp	#LR__3350
21b10     0C 21 12 F2 | 	cmp	local02, arg04 wc
21b14     C8 FF 9F CD |  if_b	jmp	#LR__3350
21b18     0D 01 48 FC | 	wrbyte	#0, arg05
21b1c     0F 13 02 F6 | 	mov	arg01, local01
21b20     8C FE BF FD | 	call	#__system___strrev
21b24     10 FB 01 F6 | 	mov	result1, local02
21b28     A7 F0 03 F6 | 	mov	ptra, fp
21b2c     B2 00 A0 FD | 	call	#popregs_
21b30                 | __system___uitoa_ret
21b30     2D 00 64 FD | 	ret
21b34                 | 
21b34                 | __system__disassemble_0432
21b34     10 4A 05 F6 | 	mov	COUNT_, #16
21b38     A8 00 A0 FD | 	call	#pushregs_
21b3c     09 1F 02 F6 | 	mov	local01, arg01
21b40     0A 21 02 F6 | 	mov	local02, arg02
21b44     0B 23 02 F6 | 	mov	local03, arg03
21b48     0C 25 02 F6 | 	mov	local04, arg04
21b4c     0D 27 02 F6 | 	mov	local05, arg05
21b50     13 13 52 F6 | 	abs	arg01, local05 wc
21b54     1F 28 C6 C9 |  if_b	decod	local06, #31
21b58     00 28 06 36 |  if_ae	mov	local06, #0
21b5c     64 D0 BF FD | 	call	#__system___float_fromuns
21b60     14 FB 61 F5 | 	xor	result1, local06
21b64     FD 2A 02 F6 | 	mov	local07, result1
21b68     00 2C 06 F6 | 	mov	local08, #0
21b6c     0F 13 02 F6 | 	mov	arg01, local01
21b70     00 14 06 F6 | 	mov	arg02, #0
21b74     01 16 06 F6 | 	mov	arg03, #1
21b78     80 D8 BF FD | 	call	#__system___float_cmp
21b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
21b80     00 2E 06 A6 |  if_e	mov	local09, #0
21b84     10 01 68 AC |  if_e	wrlong	#0, local02
21b88     11 2F 62 AC |  if_e	wrlong	local09, local03
21b8c     8C 01 90 AD |  if_e	jmp	#LR__3372
21b90     0F 13 02 F6 | 	mov	arg01, local01
21b94     30 DD BF FD | 	call	#__system____builtin_ilogb
21b98     FD 30 02 F6 | 	mov	local10, result1
21b9c     0A 26 0E F2 | 	cmp	local05, #10 wz
21ba0     24 00 90 5D |  if_ne	jmp	#LR__3360
21ba4     18 2F 02 F6 | 	mov	local09, local10
21ba8     01 2E 66 F0 | 	shl	local09, #1
21bac     18 2F 02 F1 | 	add	local09, local10
21bb0     17 31 52 F6 | 	abs	local10, local09 wc
21bb4     0A 30 16 FD | 	qdiv	local10, #10
21bb8     09 32 06 F6 | 	mov	local11, #9
21bbc     18 30 62 FD | 	getqx	local10
21bc0     18 31 82 F6 | 	negc	local10, local10
21bc4     04 00 90 FD | 	jmp	#LR__3361
21bc8                 | LR__3360
21bc8     18 32 06 F6 | 	mov	local11, #24
21bcc                 | LR__3361
21bcc                 | LR__3362
21bcc     08 2C 56 F2 | 	cmps	local08, #8 wc
21bd0     01 2C 06 F1 | 	add	local08, #1
21bd4     60 00 90 3D |  if_ae	jmp	#LR__3363
21bd8     00 C0 1F FF 
21bdc     00 12 06 F6 | 	mov	arg01, ##1065353216
21be0     15 15 02 F6 | 	mov	arg02, local07
21be4     18 17 02 F6 | 	mov	arg03, local10
21be8     88 E3 BF FD | 	call	#__system___float_pow_n
21bec     FD 14 02 F6 | 	mov	arg02, result1
21bf0     0F 13 02 F6 | 	mov	arg01, local01
21bf4     D4 D5 BF FD | 	call	#__system___float_div
21bf8     FD 34 02 F6 | 	mov	local12, result1
21bfc     1A 13 02 F6 | 	mov	arg01, local12
21c00     00 C0 1F FF 
21c04     00 14 06 F6 | 	mov	arg02, ##1065353216
21c08     01 16 06 F6 | 	mov	arg03, #1
21c0c     EC D7 BF FD | 	call	#__system___float_cmp
21c10     00 FA 55 F2 | 	cmps	result1, #0 wc
21c14     01 30 86 C1 |  if_b	sub	local10, #1
21c18     B0 FF 9F CD |  if_b	jmp	#LR__3362
21c1c     15 15 02 F6 | 	mov	arg02, local07
21c20     1A 13 02 F6 | 	mov	arg01, local12
21c24     01 16 66 F6 | 	neg	arg03, #1
21c28     D0 D7 BF FD | 	call	#__system___float_cmp
21c2c     00 FA 55 F2 | 	cmps	result1, #0 wc
21c30     01 30 06 31 |  if_ae	add	local10, #1
21c34     94 FF 9F 3D |  if_ae	jmp	#LR__3362
21c38                 | LR__3363
21c38     1A 13 02 F6 | 	mov	arg01, local12
21c3c     88 DC BF FD | 	call	#__system____builtin_ilogb
21c40     FD 36 02 F6 | 	mov	local13, result1
21c44     1A 39 02 F6 | 	mov	local14, local12
21c48     17 39 06 F4 | 	bitl	local14, #279
21c4c     17 38 26 F4 | 	bith	local14, #23
21c50     1B 39 62 F0 | 	shl	local14, local13
21c54     02 26 0E F2 | 	cmp	local05, #2 wz
21c58     02 24 66 A0 |  if_e	shl	local04, #2
21c5c     00 3A 06 F6 | 	mov	local15, #0
21c60     00 24 56 F2 | 	cmps	local04, #0 wc
21c64     10 00 90 3D |  if_ae	jmp	#LR__3364
21c68     18 25 C2 F2 | 	subr	local04, local10
21c6c     00 24 56 F2 | 	cmps	local04, #0 wc
21c70     A0 00 90 CD |  if_b	jmp	#LR__3371
21c74     04 00 90 FD | 	jmp	#LR__3365
21c78                 | LR__3364
21c78     01 24 06 F1 | 	add	local04, #1
21c7c                 | LR__3365
21c7c     19 25 7A F3 | 	fles	local04, local11 wcz
21c80     01 3C 06 F6 | 	mov	local16, #1
21c84     97 22 48 FB | 	callpa	#(@LR__3367-@LR__3366)>>2,fcache_load_ptr_
21c88                 | LR__3366
21c88     00 40 00 FF 
21c8c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
21c90     38 00 90 3D |  if_ae	jmp	#LR__3368
21c94     01 24 56 F2 | 	cmps	local04, #1 wc
21c98     01 24 86 F1 | 	sub	local04, #1
21c9c     2C 00 90 CD |  if_b	jmp	#LR__3368
21ca0     13 3B 02 FD | 	qmul	local15, local05
21ca4     1C 37 02 F6 | 	mov	local13, local14
21ca8     17 36 46 F0 | 	shr	local13, #23
21cac     17 39 06 F4 | 	bitl	local14, #279
21cb0     18 3A 62 FD | 	getqx	local15
21cb4     13 3D 02 FD | 	qmul	local16, local05
21cb8     18 3C 62 FD | 	getqx	local16
21cbc     13 39 02 FD | 	qmul	local14, local05
21cc0     1B 3B 02 F1 | 	add	local15, local13
21cc4     18 38 62 FD | 	getqx	local14
21cc8     BC FF 9F FD | 	jmp	#LR__3366
21ccc                 | LR__3367
21ccc                 | LR__3368
21ccc     13 2F 02 F6 | 	mov	local09, local05
21cd0     17 2E 66 F0 | 	shl	local09, #23
21cd4     17 37 52 F6 | 	abs	local13, local09 wc
21cd8     01 36 46 F0 | 	shr	local13, #1
21cdc     1B 37 82 F6 | 	negc	local13, local13
21ce0     1B 39 1A F2 | 	cmp	local14, local13 wcz
21ce4     20 00 90 1D |  if_a	jmp	#LR__3369
21ce8     17 26 66 F0 | 	shl	local05, #23
21cec     13 37 52 F6 | 	abs	local13, local05 wc
21cf0     01 36 46 F0 | 	shr	local13, #1
21cf4     1B 37 82 F6 | 	negc	local13, local13
21cf8     1B 39 0A F2 | 	cmp	local14, local13 wz
21cfc     14 00 90 5D |  if_ne	jmp	#LR__3370
21d00     01 3A CE F7 | 	test	local15, #1 wz
21d04     0C 00 90 AD |  if_e	jmp	#LR__3370
21d08                 | LR__3369
21d08     01 3A 06 F1 | 	add	local15, #1
21d0c     1E 3B 0A F2 | 	cmp	local15, local16 wz
21d10     01 30 06 A1 |  if_e	add	local10, #1
21d14                 | LR__3370
21d14                 | LR__3371
21d14     10 3B 62 FC | 	wrlong	local15, local02
21d18     11 31 62 FC | 	wrlong	local10, local03
21d1c                 | LR__3372
21d1c     A7 F0 03 F6 | 	mov	ptra, fp
21d20     B2 00 A0 FD | 	call	#popregs_
21d24                 | __system__disassemble_0432_ret
21d24     2D 00 64 FD | 	ret
21d28                 | 
21d28                 | __system__emitsign_0434
21d28     00 FA 05 F6 | 	mov	result1, #0
21d2c     00 14 0E F2 | 	cmp	arg02, #0 wz
21d30     09 01 02 56 |  if_ne	mov	_var01, arg01
21d34     01 12 06 51 |  if_ne	add	arg01, #1
21d38     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
21d3c     01 FA 05 56 |  if_ne	mov	result1, #1
21d40     00 16 0E F2 | 	cmp	arg03, #0 wz
21d44     09 61 48 5C |  if_ne	wrbyte	#48, arg01
21d48     01 12 06 51 |  if_ne	add	arg01, #1
21d4c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
21d50     02 FA 05 51 |  if_ne	add	result1, #2
21d54                 | __system__emitsign_0434_ret
21d54     2D 00 64 FD | 	ret
21d58                 | 
21d58                 | __system___gettxfunc
21d58     01 4A 05 F6 | 	mov	COUNT_, #1
21d5c     A8 00 A0 FD | 	call	#pushregs_
21d60     A0 F8 BF FD | 	call	#__system____getftab
21d64     FD 1E 0A F6 | 	mov	local01, result1 wz
21d68     10 00 90 AD |  if_e	jmp	#LR__3380
21d6c     08 1E 06 F1 | 	add	local01, #8
21d70     0F 15 0A FB | 	rdlong	arg02, local01 wz
21d74     08 1E 86 F1 | 	sub	local01, #8
21d78     08 00 90 5D |  if_ne	jmp	#LR__3381
21d7c                 | LR__3380
21d7c     00 FA 05 F6 | 	mov	result1, #0
21d80     0C 00 90 FD | 	jmp	#LR__3382
21d84                 | LR__3381
21d84     00 D8 03 FF 
21d88     00 1E 46 F5 | 	or	local01, ##128974848
21d8c     0F FB 01 F6 | 	mov	result1, local01
21d90                 | LR__3382
21d90     A7 F0 03 F6 | 	mov	ptra, fp
21d94     B2 00 A0 FD | 	call	#popregs_
21d98                 | __system___gettxfunc_ret
21d98     2D 00 64 FD | 	ret
21d9c                 | 
21d9c                 | __system___getrxfunc
21d9c     01 4A 05 F6 | 	mov	COUNT_, #1
21da0     A8 00 A0 FD | 	call	#pushregs_
21da4     5C F8 BF FD | 	call	#__system____getftab
21da8     FD 1E 0A F6 | 	mov	local01, result1 wz
21dac     10 00 90 AD |  if_e	jmp	#LR__3390
21db0     08 1E 06 F1 | 	add	local01, #8
21db4     0F 15 0A FB | 	rdlong	arg02, local01 wz
21db8     08 1E 86 F1 | 	sub	local01, #8
21dbc     08 00 90 5D |  if_ne	jmp	#LR__3391
21dc0                 | LR__3390
21dc0     00 FA 05 F6 | 	mov	result1, #0
21dc4     08 00 90 FD | 	jmp	#LR__3392
21dc8                 | LR__3391
21dc8     96 1E 26 F4 | 	bith	local01, #150
21dcc     0F FB 01 F6 | 	mov	result1, local01
21dd0                 | LR__3392
21dd0     A7 F0 03 F6 | 	mov	ptra, fp
21dd4     B2 00 A0 FD | 	call	#popregs_
21dd8                 | __system___getrxfunc_ret
21dd8     2D 00 64 FD | 	ret
21ddc                 | 
21ddc                 | __system___getiolock_0474
21ddc     01 4A 05 F6 | 	mov	COUNT_, #1
21de0     A8 00 A0 FD | 	call	#pushregs_
21de4     1C F8 BF FD | 	call	#__system____getftab
21de8     FD 1E 0A F6 | 	mov	local01, result1 wz
21dec     10 00 90 AD |  if_e	jmp	#LR__3400
21df0     08 1E 06 F1 | 	add	local01, #8
21df4     0F FB 09 FB | 	rdlong	result1, local01 wz
21df8     08 1E 86 F1 | 	sub	local01, #8
21dfc     18 00 90 5D |  if_ne	jmp	#LR__3401
21e00                 | LR__3400
21e00     01 00 00 FF 
21e04     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
21e08     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
21e0c     01 00 00 FF 
21e10     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
21e14     08 00 90 FD | 	jmp	#LR__3402
21e18                 | LR__3401
21e18     0C 1E 06 F1 | 	add	local01, #12
21e1c     0F FB 01 F6 | 	mov	result1, local01
21e20                 | LR__3402
21e20     A7 F0 03 F6 | 	mov	ptra, fp
21e24     B2 00 A0 FD | 	call	#popregs_
21e28                 | __system___getiolock_0474_ret
21e28     2D 00 64 FD | 	ret
21e2c                 | 
21e2c                 | __system____ScanForChar
21e2c     09 01 02 F6 | 	mov	_var01, arg01
21e30     09 03 02 F6 | 	mov	_var02, arg01
21e34     97 06 48 FB | 	callpa	#(@LR__3411-@LR__3410)>>2,fcache_load_ptr_
21e38                 | LR__3410
21e38     01 FB C9 FA | 	rdbyte	result1, _var02 wz
21e3c     01 02 06 51 |  if_ne	add	_var02, #1
21e40     F4 FF 9F 5D |  if_ne	jmp	#LR__3410
21e44                 | LR__3411
21e44     09 03 82 F1 | 	sub	_var02, arg01
21e48     01 FB 01 F6 | 	mov	result1, _var02
21e4c     FD 12 0A F6 | 	mov	arg01, result1 wz
21e50     00 FA 05 A6 |  if_e	mov	result1, #0
21e54     B8 00 90 AD |  if_e	jmp	#LR__3418
21e58     0A 05 02 F6 | 	mov	_var03, arg02
21e5c     07 04 4E F7 | 	zerox	_var03, #7 wz
21e60     00 FA 05 A6 |  if_e	mov	result1, #0
21e64     A8 00 90 AD |  if_e	jmp	#LR__3418
21e68     01 16 16 F2 | 	cmp	arg03, #1 wc
21e6c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
21e70     01 16 06 86 |  if_c_and_z	mov	arg03, #1
21e74     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
21e78     94 00 90 4D |  if_c_and_nz	jmp	#LR__3418
21e7c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
21e80     10 00 90 ED |  if_be	jmp	#LR__3412
21e84     00 18 0E F2 | 	cmp	arg04, #0 wz
21e88     00 FA 05 A6 |  if_e	mov	result1, #0
21e8c     80 00 90 AD |  if_e	jmp	#LR__3418
21e90     09 17 02 F6 | 	mov	arg03, arg01
21e94                 | LR__3412
21e94     01 16 86 F1 | 	sub	arg03, #1
21e98     00 18 0E F2 | 	cmp	arg04, #0 wz
21e9c     38 00 90 5D |  if_ne	jmp	#LR__3414
21ea0     0B 07 02 F6 | 	mov	_var04, arg03
21ea4     09 09 02 F6 | 	mov	_var05, arg01
21ea8                 | LR__3413
21ea8     04 07 12 F2 | 	cmp	_var04, _var05 wc
21eac     5C 00 90 3D |  if_ae	jmp	#LR__3417
21eb0     03 05 02 F6 | 	mov	_var03, _var04
21eb4     00 05 02 F1 | 	add	_var03, _var01
21eb8     02 05 C2 FA | 	rdbyte	_var03, _var03
21ebc     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
21ec0     0C 05 0A F2 | 	cmp	_var03, arg04 wz
21ec4     01 06 06 A1 |  if_e	add	_var04, #1
21ec8     03 FB 01 A6 |  if_e	mov	result1, _var04
21ecc     40 00 90 AD |  if_e	jmp	#LR__3418
21ed0     01 06 06 F1 | 	add	_var04, #1
21ed4     D0 FF 9F FD | 	jmp	#LR__3413
21ed8                 | LR__3414
21ed8     0B 07 02 F6 | 	mov	_var04, arg03
21edc                 | LR__3415
21edc     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
21ee0     28 00 90 1D |  if_a	jmp	#LR__3416
21ee4     03 09 02 F6 | 	mov	_var05, _var04
21ee8     00 09 02 F1 | 	add	_var05, _var01
21eec     04 05 C2 FA | 	rdbyte	_var03, _var05
21ef0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
21ef4     04 05 0A F2 | 	cmp	_var03, _var05 wz
21ef8     01 06 06 A1 |  if_e	add	_var04, #1
21efc     03 FB 01 A6 |  if_e	mov	result1, _var04
21f00     0C 00 90 AD |  if_e	jmp	#LR__3418
21f04     01 06 86 F1 | 	sub	_var04, #1
21f08     D0 FF 9F FD | 	jmp	#LR__3415
21f0c                 | LR__3416
21f0c                 | LR__3417
21f0c     00 FA 05 F6 | 	mov	result1, #0
21f10                 | LR__3418
21f10                 | __system____ScanForChar_ret
21f10     2D 00 64 FD | 	ret
21f14                 | 
21f14                 | __system___basic_dir
21f14     05 4A 05 F6 | 	mov	COUNT_, #5
21f18     A8 00 A0 FD | 	call	#pushregs_
21f1c     4C F0 07 F1 | 	add	ptra, #76
21f20     04 4E 05 F1 | 	add	fp, #4
21f24     A7 12 62 FC | 	wrlong	arg01, fp
21f28     04 4E 05 F1 | 	add	fp, #4
21f2c     A7 14 62 FC | 	wrlong	arg02, fp
21f30     04 4E 85 F1 | 	sub	fp, #4
21f34     A7 14 0A FB | 	rdlong	arg02, fp wz
21f38     04 4E 85 F1 | 	sub	fp, #4
21f3c     04 4E 05 51 |  if_ne	add	fp, #4
21f40     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21f44     04 4E 85 51 |  if_ne	sub	fp, #4
21f48     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
21f4c     70 00 90 AD |  if_e	jmp	#LR__3420
21f50     03 00 00 FF 
21f54     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21f58     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21f5c     03 00 00 FF 
21f60     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21f64     03 00 00 5F 
21f68     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
21f6c     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
21f70     03 00 00 5F 
21f74     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
21f78     18 EA BF 5D |  if_ne	call	#__system__closedir
21f7c     5D 01 00 FF 
21f80     64 12 06 F6 | 	mov	arg01, ##@LR__4578
21f84     20 E9 BF FD | 	call	#__system__opendir
21f88     03 00 00 FF 
21f8c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21f90     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
21f94     08 4E 05 F1 | 	add	fp, #8
21f98     A7 20 02 FB | 	rdlong	local02, fp
21f9c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21fa0     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
21fa4     04 4E 85 F1 | 	sub	fp, #4
21fa8     A7 20 02 FB | 	rdlong	local02, fp
21fac     04 4E 85 F1 | 	sub	fp, #4
21fb0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21fb4     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
21fb8     03 00 00 FF 
21fbc     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
21fc0                 | LR__3420
21fc0     03 00 00 FF 
21fc4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21fc8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21fcc     03 00 00 FF 
21fd0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21fd4     5D 01 00 AF 
21fd8     66 FA 05 A6 |  if_e	mov	result1, ##@LR__4579
21fdc     84 02 90 AD |  if_e	jmp	#LR__3433
21fe0                 | LR__3421
21fe0     03 00 00 FF 
21fe4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21fe8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21fec     03 00 00 FF 
21ff0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21ff4     10 EA BF FD | 	call	#__system__readdir
21ff8     0C 4E 05 F1 | 	add	fp, #12
21ffc     A7 FA 61 FC | 	wrlong	result1, fp
22000     0C 4E 85 F1 | 	sub	fp, #12
22004     00 FA 0D F2 | 	cmp	result1, #0 wz
22008     38 00 90 5D |  if_ne	jmp	#LR__3422
2200c     03 00 00 FF 
22010     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
22014     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
22018     03 00 00 FF 
2201c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22020     70 E9 BF FD | 	call	#__system__closedir
22024     03 00 00 FF 
22028     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2202c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
22030     03 00 00 FF 
22034     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
22038     5D 01 00 FF 
2203c     68 FA 05 F6 | 	mov	result1, ##@LR__4580
22040     20 02 90 FD | 	jmp	#LR__3433
22044                 | LR__3422
22044     0C 4E 05 F1 | 	add	fp, #12
22048     A7 12 02 FB | 	rdlong	arg01, fp
2204c     0C 4E 85 F1 | 	sub	fp, #12
22050     03 00 00 FF 
22054     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
22058     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2205c     03 00 00 FF 
22060     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
22064     48 07 B0 FD | 	call	#__system___pat_match
22068     00 FA 0D F2 | 	cmp	result1, #0 wz
2206c     70 FF 9F AD |  if_e	jmp	#LR__3421
22070     03 00 00 FF 
22074     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
22078     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2207c     03 00 00 FF 
22080     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
22084     78 01 90 AD |  if_e	jmp	#LR__3429
22088     0C 4E 05 F1 | 	add	fp, #12
2208c     A7 12 02 FB | 	rdlong	arg01, fp
22090     04 4E 05 F1 | 	add	fp, #4
22094     A7 14 02 F6 | 	mov	arg02, fp
22098     10 4E 85 F1 | 	sub	fp, #16
2209c     6C F2 BF FD | 	call	#__system__stat
220a0     40 4E 05 F1 | 	add	fp, #64
220a4     A7 FA 61 FC | 	wrlong	result1, fp
220a8     40 4E 85 F1 | 	sub	fp, #64
220ac     00 FA 0D F2 | 	cmp	result1, #0 wz
220b0     5D 01 00 5F 
220b4     6A FA 05 56 |  if_ne	mov	result1, ##@LR__4581
220b8     A8 01 90 5D |  if_ne	jmp	#LR__3433
220bc     18 4E 05 F1 | 	add	fp, #24
220c0     A7 20 02 FB | 	rdlong	local02, fp
220c4     78 00 00 FF 
220c8     00 20 06 F5 | 	and	local02, ##61440
220cc     2C 4E 05 F1 | 	add	fp, #44
220d0     A7 20 62 FC | 	wrlong	local02, fp
220d4     38 4E 85 F1 | 	sub	fp, #56
220d8     A7 20 02 FB | 	rdlong	local02, fp
220dc     0C 4E 85 F1 | 	sub	fp, #12
220e0     10 21 C2 FA | 	rdbyte	local02, local02
220e4     2E 20 0E F2 | 	cmp	local02, #46 wz
220e8     08 4E 05 A1 |  if_e	add	fp, #8
220ec     A7 04 68 AC |  if_e	wrlong	#2, fp
220f0     08 4E C5 F3 | 	sumz	fp, #8
220f4     A7 00 68 5C |  if_ne	wrlong	#0, fp
220f8     08 4E 85 51 |  if_ne	sub	fp, #8
220fc     44 4E 05 F1 | 	add	fp, #68
22100     A7 20 02 FB | 	rdlong	local02, fp
22104     44 4E 85 F1 | 	sub	fp, #68
22108     08 00 00 FF 
2210c     00 20 0E F2 | 	cmp	local02, ##4096 wz
22110     18 00 90 5D |  if_ne	jmp	#LR__3423
22114     08 4E 05 F1 | 	add	fp, #8
22118     A7 20 02 FB | 	rdlong	local02, fp
2211c     10 20 46 F5 | 	or	local02, #16
22120     A7 20 62 FC | 	wrlong	local02, fp
22124     08 4E 85 F1 | 	sub	fp, #8
22128     AC 00 90 FD | 	jmp	#LR__3428
2212c                 | LR__3423
2212c     44 4E 05 F1 | 	add	fp, #68
22130     A7 20 02 FB | 	rdlong	local02, fp
22134     44 4E 85 F1 | 	sub	fp, #68
22138     10 00 00 FF 
2213c     00 20 0E F2 | 	cmp	local02, ##8192 wz
22140     44 4E 05 51 |  if_ne	add	fp, #68
22144     A7 1E 02 5B |  if_ne	rdlong	local01, fp
22148     44 4E 85 51 |  if_ne	sub	fp, #68
2214c     18 00 00 5F 
22150     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
22154     44 4E 05 51 |  if_ne	add	fp, #68
22158     0F 23 02 56 |  if_ne	mov	local03, local01
2215c     44 4E 85 51 |  if_ne	sub	fp, #68
22160     20 00 00 5F 
22164     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
22168     18 00 90 5D |  if_ne	jmp	#LR__3424
2216c     08 4E 05 F1 | 	add	fp, #8
22170     A7 20 02 FB | 	rdlong	local02, fp
22174     04 20 46 F5 | 	or	local02, #4
22178     A7 20 62 FC | 	wrlong	local02, fp
2217c     08 4E 85 F1 | 	sub	fp, #8
22180     54 00 90 FD | 	jmp	#LR__3427
22184                 | LR__3424
22184     18 4E 05 F1 | 	add	fp, #24
22188     A7 20 02 FB | 	rdlong	local02, fp
2218c     18 4E 85 F1 | 	sub	fp, #24
22190     92 20 CE F7 | 	test	local02, #146 wz
22194     18 00 90 5D |  if_ne	jmp	#LR__3425
22198     08 4E 05 F1 | 	add	fp, #8
2219c     A7 20 02 FB | 	rdlong	local02, fp
221a0     01 20 46 F5 | 	or	local02, #1
221a4     A7 20 62 FC | 	wrlong	local02, fp
221a8     08 4E 85 F1 | 	sub	fp, #8
221ac     28 00 90 FD | 	jmp	#LR__3426
221b0                 | LR__3425
221b0     44 4E 05 F1 | 	add	fp, #68
221b4     A7 24 02 FB | 	rdlong	local04, fp
221b8     44 4E 85 F1 | 	sub	fp, #68
221bc     08 00 00 FF 
221c0     00 24 0E F2 | 	cmp	local04, ##4096 wz
221c4     08 4E 05 51 |  if_ne	add	fp, #8
221c8     A7 24 02 5B |  if_ne	rdlong	local04, fp
221cc     20 24 46 55 |  if_ne	or	local04, #32
221d0     A7 24 62 5C |  if_ne	wrlong	local04, fp
221d4     08 4E 85 51 |  if_ne	sub	fp, #8
221d8                 | LR__3426
221d8                 | LR__3427
221d8                 | LR__3428
221d8     08 4E 05 F1 | 	add	fp, #8
221dc     A7 24 02 FB | 	rdlong	local04, fp
221e0     08 4E 85 F1 | 	sub	fp, #8
221e4     03 00 00 FF 
221e8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
221ec     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
221f0     03 00 00 FF 
221f4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
221f8     0F 25 CA F7 | 	test	local04, local01 wz
221fc     E0 FD 9F AD |  if_e	jmp	#LR__3421
22200                 | LR__3429
22200     0C 4E 05 F1 | 	add	fp, #12
22204     A7 12 02 FB | 	rdlong	arg01, fp
22208     0C 4E 85 F1 | 	sub	fp, #12
2220c     09 27 02 F6 | 	mov	local05, arg01
22210     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
22214                 | LR__3430
22214     13 FB C9 FA | 	rdbyte	result1, local05 wz
22218     01 26 06 51 |  if_ne	add	local05, #1
2221c     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
22220                 | LR__3431
22220     13 13 C2 F2 | 	subr	arg01, local05
22224     01 12 06 F1 | 	add	arg01, #1
22228     68 E0 BF FD | 	call	#__system___gc_alloc_managed
2222c     48 4E 05 F1 | 	add	fp, #72
22230     A7 FA 61 FC | 	wrlong	result1, fp
22234     48 4E 85 F1 | 	sub	fp, #72
22238     00 FA 0D F2 | 	cmp	result1, #0 wz
2223c     18 00 90 AD |  if_e	jmp	#LR__3432
22240     48 4E 05 F1 | 	add	fp, #72
22244     A7 12 02 FB | 	rdlong	arg01, fp
22248     3C 4E 85 F1 | 	sub	fp, #60
2224c     A7 14 02 FB | 	rdlong	arg02, fp
22250     0C 4E 85 F1 | 	sub	fp, #12
22254     A8 A1 BF FD | 	call	#__system____builtin_strcpy
22258                 | LR__3432
22258     48 4E 05 F1 | 	add	fp, #72
2225c     A7 FA 01 FB | 	rdlong	result1, fp
22260     48 4E 85 F1 | 	sub	fp, #72
22264                 | LR__3433
22264     A7 F0 03 F6 | 	mov	ptra, fp
22268     B2 00 A0 FD | 	call	#popregs_
2226c                 | __system___basic_dir_ret
2226c     2D 00 64 FD | 	ret
22270                 | 
22270                 | __system__pack_0540
22270     09 01 02 F6 | 	mov	_var01, arg01
22274     7F 16 06 F1 | 	add	arg03, #127
22278     04 18 CE F7 | 	test	arg04, #4 wz
2227c     10 00 90 AD |  if_e	jmp	#LR__3440
22280     00 00 0E F2 | 	cmp	_var01, #0 wz
22284     16 00 C6 A9 |  if_e	decod	_var01, #22
22288     F7 00 26 F4 | 	bith	_var01, #247
2228c     B4 00 90 FD | 	jmp	#LR__3449
22290                 | LR__3440
22290     02 18 CE F7 | 	test	arg04, #2 wz
22294     00 C0 3F 5F 
22298     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2229c     00 14 06 56 |  if_ne	mov	arg02, #0
222a0     A0 00 90 5D |  if_ne	jmp	#LR__3448
222a4     08 18 CE F7 | 	test	arg04, #8 wz
222a8     00 00 06 56 |  if_ne	mov	_var01, #0
222ac     94 00 90 5D |  if_ne	jmp	#LR__3447
222b0     FF 16 56 F2 | 	cmps	arg03, #255 wc
222b4     00 C0 3F 3F 
222b8     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
222bc     00 14 06 36 |  if_ae	mov	arg02, #0
222c0     80 00 90 3D |  if_ae	jmp	#LR__3446
222c4     01 16 56 F2 | 	cmps	arg03, #1 wc
222c8     6C 00 90 3D |  if_ae	jmp	#LR__3444
222cc     01 14 46 F0 | 	shr	arg02, #1
222d0     00 03 02 F6 | 	mov	_var02, _var01
222d4     01 02 06 F5 | 	and	_var02, #1
222d8     1F 02 66 F0 | 	shl	_var02, #31
222dc     01 15 42 F5 | 	or	arg02, _var02
222e0     01 00 46 F0 | 	shr	_var01, #1
222e4     97 1E 48 FB | 	callpa	#(@LR__3442-@LR__3441)>>2,fcache_load_ptr_
222e8                 | LR__3441
222e8     00 16 56 F2 | 	cmps	arg03, #0 wc
222ec     34 00 90 3D |  if_ae	jmp	#LR__3443
222f0     00 00 0E F2 | 	cmp	_var01, #0 wz
222f4     2C 00 90 AD |  if_e	jmp	#LR__3443
222f8     0A 13 02 F6 | 	mov	arg01, arg02
222fc     01 12 06 F5 | 	and	arg01, #1
22300     01 16 06 F1 | 	add	arg03, #1
22304     01 14 46 F0 | 	shr	arg02, #1
22308     00 03 02 F6 | 	mov	_var02, _var01
2230c     01 02 06 F5 | 	and	_var02, #1
22310     1F 02 66 F0 | 	shl	_var02, #31
22314     01 15 42 F5 | 	or	arg02, _var02
22318     09 15 42 F5 | 	or	arg02, arg01
2231c     01 00 46 F0 | 	shr	_var01, #1
22320     C4 FF 9F FD | 	jmp	#LR__3441
22324                 | LR__3442
22324                 | LR__3443
22324     00 16 56 F2 | 	cmps	arg03, #0 wc
22328     18 00 90 3D |  if_ae	jmp	#LR__3445
2232c     00 14 0E F2 | 	cmp	arg02, #0 wz
22330     6F 14 62 FD | 	wrnz	arg02
22334     0C 00 90 FD | 	jmp	#LR__3445
22338                 | LR__3444
22338     17 01 06 F4 | 	bitl	_var01, #279
2233c     17 16 66 F0 | 	shl	arg03, #23
22340     0B 01 42 F5 | 	or	_var01, arg03
22344                 | LR__3445
22344                 | LR__3446
22344                 | LR__3447
22344                 | LR__3448
22344                 | LR__3449
22344     01 00 CE F7 | 	test	_var01, #1 wz
22348     01 14 46 55 |  if_ne	or	arg02, #1
2234c     0A 17 02 F6 | 	mov	arg03, arg02
22350     00 02 06 F6 | 	mov	_var02, #0
22354     FF FF 3F FF 
22358     FF 15 06 F1 | 	add	arg02, ##2147483647
2235c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
22360     01 02 06 C6 |  if_b	mov	_var02, #1
22364     01 01 02 F1 | 	add	_var01, _var02
22368     01 18 CE F7 | 	test	arg04, #1 wz
2236c     1F 00 26 54 |  if_ne	bith	_var01, #31
22370     00 FB 01 F6 | 	mov	result1, _var01
22374                 | __system__pack_0540_ret
22374     2D 00 64 FD | 	ret
22378                 | 
22378                 | __system___rxtxioctl_0630
22378     00 15 0E F2 | 	cmp	arg02, #256 wz
2237c     0C 00 90 AD |  if_e	jmp	#LR__3450
22380     01 15 0E F2 | 	cmp	arg02, #257 wz
22384     1C 00 90 AD |  if_e	jmp	#LR__3451
22388     30 00 90 FD | 	jmp	#LR__3452
2238c                 | LR__3450
2238c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22390     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22394     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22398     0B FB 61 FC | 	wrlong	result1, arg03
2239c     00 FA 05 F6 | 	mov	result1, #0
223a0     28 00 90 FD | 	jmp	#LR__3453
223a4                 | LR__3451
223a4     0B 13 02 FB | 	rdlong	arg01, arg03
223a8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
223ac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
223b0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
223b4     00 FA 05 F6 | 	mov	result1, #0
223b8     10 00 90 FD | 	jmp	#LR__3453
223bc                 | LR__3452
223bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
223c0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
223c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
223c8     01 FA 65 F6 | 	neg	result1, #1
223cc                 | LR__3453
223cc                 | __system___rxtxioctl_0630_ret
223cc     2D 00 64 FD | 	ret
223d0                 | 
223d0                 | __system____dummy_flush_0631
223d0     00 FA 05 F6 | 	mov	result1, #0
223d4                 | __system____dummy_flush_0631_ret
223d4     2D 00 64 FD | 	ret
223d8                 | 
223d8                 | __system___vfsread
223d8     03 4A 05 F6 | 	mov	COUNT_, #3
223dc     A8 00 A0 FD | 	call	#pushregs_
223e0     28 F0 07 F1 | 	add	ptra, #40
223e4     04 4E 05 F1 | 	add	fp, #4
223e8     A7 12 62 FC | 	wrlong	arg01, fp
223ec     04 4E 05 F1 | 	add	fp, #4
223f0     A7 14 62 FC | 	wrlong	arg02, fp
223f4     04 4E 05 F1 | 	add	fp, #4
223f8     A7 16 62 FC | 	wrlong	arg03, fp
223fc     04 4E 85 F1 | 	sub	fp, #4
22400     A7 FA 01 FB | 	rdlong	result1, fp
22404     14 4E 05 F1 | 	add	fp, #20
22408     A7 FA 61 FC | 	wrlong	result1, fp
2240c     04 4E 05 F1 | 	add	fp, #4
22410     A7 00 68 FC | 	wrlong	#0, fp
22414     1C 4E 85 F1 | 	sub	fp, #28
22418     A7 12 02 FB | 	rdlong	arg01, fp
2241c     04 4E 85 F1 | 	sub	fp, #4
22420     08 12 06 F1 | 	add	arg01, #8
22424     09 FB 01 FB | 	rdlong	result1, arg01
22428     01 FA CD F7 | 	test	result1, #1 wz
2242c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22430     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
22434     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22438     01 FA 65 A6 |  if_e	neg	result1, #1
2243c     74 02 90 AD |  if_e	jmp	#LR__3466
22440     04 4E 05 F1 | 	add	fp, #4
22444     A7 12 02 FB | 	rdlong	arg01, fp
22448     04 4E 85 F1 | 	sub	fp, #4
2244c     14 12 06 F1 | 	add	arg01, #20
22450     09 FB 09 FB | 	rdlong	result1, arg01 wz
22454     B8 00 90 AD |  if_e	jmp	#LR__3461
22458     04 4E 05 F1 | 	add	fp, #4
2245c     A7 12 02 FB | 	rdlong	arg01, fp
22460     09 17 02 F6 | 	mov	arg03, arg01
22464     14 16 06 F1 | 	add	arg03, #20
22468     0B 1F 02 FB | 	rdlong	local01, arg03
2246c     0F 21 02 F6 | 	mov	local02, local01
22470     13 1E 46 F7 | 	zerox	local01, #19
22474     14 20 46 F0 | 	shr	local02, #20
22478     02 20 66 F0 | 	shl	local02, #2
2247c     ED 20 02 F1 | 	add	local02, __methods__
22480     10 21 02 FB | 	rdlong	local02, local02
22484     04 4E 05 F1 | 	add	fp, #4
22488     A7 14 02 FB | 	rdlong	arg02, fp
2248c     04 4E 05 F1 | 	add	fp, #4
22490     A7 16 02 FB | 	rdlong	arg03, fp
22494     0C 4E 85 F1 | 	sub	fp, #12
22498     F2 22 02 F6 | 	mov	local03, objptr
2249c     0F E5 01 F6 | 	mov	objptr, local01
224a0     2D 20 62 FD | 	call	local02
224a4     11 E5 01 F6 | 	mov	objptr, local03
224a8     10 4E 05 F1 | 	add	fp, #16
224ac     A7 FA 61 FC | 	wrlong	result1, fp
224b0     10 4E 85 F1 | 	sub	fp, #16
224b4     00 FA 55 F2 | 	cmps	result1, #0 wc
224b8     44 00 90 3D |  if_ae	jmp	#LR__3460
224bc     04 4E 05 F1 | 	add	fp, #4
224c0     A7 22 02 FB | 	rdlong	local03, fp
224c4     11 1F 02 F6 | 	mov	local01, local03
224c8     08 22 06 F1 | 	add	local03, #8
224cc     11 21 02 FB | 	rdlong	local02, local03
224d0     20 20 46 F5 | 	or	local02, #32
224d4     08 1E 06 F1 | 	add	local01, #8
224d8     0F 21 62 FC | 	wrlong	local02, local01
224dc     0C 4E 05 F1 | 	add	fp, #12
224e0     A7 12 0A FB | 	rdlong	arg01, fp wz
224e4     10 4E 85 F1 | 	sub	fp, #16
224e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
224ec     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
224f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
224f4     01 FA 65 56 |  if_ne	neg	result1, #1
224f8     00 FA 05 A6 |  if_e	mov	result1, #0
224fc     B4 01 90 FD | 	jmp	#LR__3466
22500                 | LR__3460
22500     10 4E 05 F1 | 	add	fp, #16
22504     A7 FA 01 FB | 	rdlong	result1, fp
22508     10 4E 85 F1 | 	sub	fp, #16
2250c     A4 01 90 FD | 	jmp	#LR__3466
22510                 | LR__3461
22510     04 4E 05 F1 | 	add	fp, #4
22514     A7 12 02 FB | 	rdlong	arg01, fp
22518     20 12 06 F1 | 	add	arg01, #32
2251c     09 13 0A FB | 	rdlong	arg01, arg01 wz
22520     14 4E 05 F1 | 	add	fp, #20
22524     A7 12 62 FC | 	wrlong	arg01, fp
22528     18 4E 85 F1 | 	sub	fp, #24
2252c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22530     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
22534     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22538     01 FA 65 A6 |  if_e	neg	result1, #1
2253c     74 01 90 AD |  if_e	jmp	#LR__3466
22540     04 4E 05 F1 | 	add	fp, #4
22544     A7 22 02 FB | 	rdlong	local03, fp
22548     04 4E 85 F1 | 	sub	fp, #4
2254c     28 22 06 F1 | 	add	local03, #40
22550     11 21 0A FB | 	rdlong	local02, local03 wz
22554     7C 00 90 AD |  if_e	jmp	#LR__3463
22558     04 4E 05 F1 | 	add	fp, #4
2255c     A7 12 02 FB | 	rdlong	arg01, fp
22560     09 23 02 F6 | 	mov	local03, arg01
22564     28 22 06 F1 | 	add	local03, #40
22568     11 1F 02 FB | 	rdlong	local01, local03
2256c     0F 21 02 F6 | 	mov	local02, local01
22570     13 1E 46 F7 | 	zerox	local01, #19
22574     14 20 46 F0 | 	shr	local02, #20
22578     02 20 66 F0 | 	shl	local02, #2
2257c     ED 20 02 F1 | 	add	local02, __methods__
22580     10 21 02 FB | 	rdlong	local02, local02
22584     20 4E 05 F1 | 	add	fp, #32
22588     A7 16 02 F6 | 	mov	arg03, fp
2258c     24 4E 85 F1 | 	sub	fp, #36
22590     00 15 06 F6 | 	mov	arg02, #256
22594     F2 22 02 F6 | 	mov	local03, objptr
22598     0F E5 01 F6 | 	mov	objptr, local01
2259c     2D 20 62 FD | 	call	local02
225a0     11 E5 01 F6 | 	mov	objptr, local03
225a4     10 4E 05 F1 | 	add	fp, #16
225a8     A7 FA 61 FC | 	wrlong	result1, fp
225ac     00 FA 4D F2 | 	cmps	result1, #0 wz
225b0     10 4E 85 F1 | 	sub	fp, #16
225b4     1C 00 90 5D |  if_ne	jmp	#LR__3462
225b8     24 4E 05 F1 | 	add	fp, #36
225bc     A7 20 02 FB | 	rdlong	local02, fp
225c0     24 4E 85 F1 | 	sub	fp, #36
225c4     02 20 CE F7 | 	test	local02, #2 wz
225c8     20 4E 05 51 |  if_ne	add	fp, #32
225cc     A7 02 68 5C |  if_ne	wrlong	#1, fp
225d0     20 4E 85 51 |  if_ne	sub	fp, #32
225d4                 | LR__3462
225d4                 | LR__3463
225d4     10 4E 05 F1 | 	add	fp, #16
225d8     A7 00 68 FC | 	wrlong	#0, fp
225dc     10 4E 85 F1 | 	sub	fp, #16
225e0                 | LR__3464
225e0     0C 4E 05 F1 | 	add	fp, #12
225e4     A7 22 02 FB | 	rdlong	local03, fp
225e8     0C 4E 85 F1 | 	sub	fp, #12
225ec     01 22 16 F2 | 	cmp	local03, #1 wc
225f0     B4 00 90 CD |  if_b	jmp	#LR__3465
225f4     18 4E 05 F1 | 	add	fp, #24
225f8     A7 20 02 FB | 	rdlong	local02, fp
225fc     10 23 02 F6 | 	mov	local03, local02
22600     13 22 46 F7 | 	zerox	local03, #19
22604     14 20 46 F0 | 	shr	local02, #20
22608     02 20 66 F0 | 	shl	local02, #2
2260c     ED 20 02 F1 | 	add	local02, __methods__
22610     10 21 02 FB | 	rdlong	local02, local02
22614     14 4E 85 F1 | 	sub	fp, #20
22618     A7 12 02 FB | 	rdlong	arg01, fp
2261c     04 4E 85 F1 | 	sub	fp, #4
22620     F2 1E 02 F6 | 	mov	local01, objptr
22624     11 E5 01 F6 | 	mov	objptr, local03
22628     2D 20 62 FD | 	call	local02
2262c     0F E5 01 F6 | 	mov	objptr, local01
22630     14 4E 05 F1 | 	add	fp, #20
22634     A7 FA 61 FC | 	wrlong	result1, fp
22638     14 4E 85 F1 | 	sub	fp, #20
2263c     00 FA 55 F2 | 	cmps	result1, #0 wc
22640     64 00 90 CD |  if_b	jmp	#LR__3465
22644     1C 4E 05 F1 | 	add	fp, #28
22648     A7 22 02 FB | 	rdlong	local03, fp
2264c     11 21 02 F6 | 	mov	local02, local03
22650     01 20 06 F1 | 	add	local02, #1
22654     A7 20 62 FC | 	wrlong	local02, fp
22658     08 4E 85 F1 | 	sub	fp, #8
2265c     A7 20 02 FB | 	rdlong	local02, fp
22660     11 21 42 FC | 	wrbyte	local02, local03
22664     04 4E 85 F1 | 	sub	fp, #4
22668     A7 22 02 FB | 	rdlong	local03, fp
2266c     01 22 06 F1 | 	add	local03, #1
22670     A7 22 62 FC | 	wrlong	local03, fp
22674     04 4E 85 F1 | 	sub	fp, #4
22678     A7 22 02 FB | 	rdlong	local03, fp
2267c     01 22 86 F1 | 	sub	local03, #1
22680     A7 22 62 FC | 	wrlong	local03, fp
22684     14 4E 05 F1 | 	add	fp, #20
22688     A7 22 0A FB | 	rdlong	local03, fp wz
2268c     20 4E 85 F1 | 	sub	fp, #32
22690     4C FF 9F AD |  if_e	jmp	#LR__3464
22694     14 4E 05 F1 | 	add	fp, #20
22698     A7 20 02 FB | 	rdlong	local02, fp
2269c     14 4E 85 F1 | 	sub	fp, #20
226a0     0A 20 0E F2 | 	cmp	local02, #10 wz
226a4     38 FF 9F 5D |  if_ne	jmp	#LR__3464
226a8                 | LR__3465
226a8     10 4E 05 F1 | 	add	fp, #16
226ac     A7 FA 01 FB | 	rdlong	result1, fp
226b0     10 4E 85 F1 | 	sub	fp, #16
226b4                 | LR__3466
226b4     A7 F0 03 F6 | 	mov	ptra, fp
226b8     B2 00 A0 FD | 	call	#popregs_
226bc                 | __system___vfsread_ret
226bc     2D 00 64 FD | 	ret
226c0                 | 
226c0                 | __system____default_filbuf
226c0     04 4A 05 F6 | 	mov	COUNT_, #4
226c4     A8 00 A0 FD | 	call	#pushregs_
226c8     09 1F 02 F6 | 	mov	local01, arg01
226cc     0F 21 02 FB | 	rdlong	local02, local01
226d0     0C 20 06 F1 | 	add	local02, #12
226d4     10 FB 09 FB | 	rdlong	result1, local02 wz
226d8     0C 20 86 F1 | 	sub	local02, #12
226dc     20 00 90 5D |  if_ne	jmp	#LR__3470
226e0     14 20 06 F1 | 	add	local02, #20
226e4     10 FB 01 F6 | 	mov	result1, local02
226e8     04 20 86 F1 | 	sub	local02, #4
226ec     10 FB 61 FC | 	wrlong	result1, local02
226f0     04 20 86 F1 | 	sub	local02, #4
226f4     02 00 80 FF 
226f8     10 01 68 FC | 	wrlong	##1024, local02
226fc     0C 20 86 F1 | 	sub	local02, #12
22700                 | LR__3470
22700     14 1E 06 F1 | 	add	local01, #20
22704     0F 23 02 FB | 	rdlong	local03, local01
22708     11 25 02 F6 | 	mov	local04, local03
2270c     14 1E 86 F1 | 	sub	local01, #20
22710     13 24 46 F7 | 	zerox	local04, #19
22714     14 22 46 F0 | 	shr	local03, #20
22718     02 22 66 F0 | 	shl	local03, #2
2271c     ED 22 02 F1 | 	add	local03, __methods__
22720     11 23 02 FB | 	rdlong	local03, local03
22724     10 20 06 F1 | 	add	local02, #16
22728     10 15 02 FB | 	rdlong	arg02, local02
2272c     04 20 86 F1 | 	sub	local02, #4
22730     10 17 02 FB | 	rdlong	arg03, local02
22734     0C 20 86 F1 | 	sub	local02, #12
22738     0F 13 02 F6 | 	mov	arg01, local01
2273c     F2 1E 02 F6 | 	mov	local01, objptr
22740     12 E5 01 F6 | 	mov	objptr, local04
22744     2D 22 62 FD | 	call	local03
22748     0F E5 01 F6 | 	mov	objptr, local01
2274c     FD 24 02 F6 | 	mov	local04, result1
22750     00 24 56 F2 | 	cmps	local04, #0 wc
22754     01 FA 65 C6 |  if_b	neg	result1, #1
22758     28 00 90 CD |  if_b	jmp	#LR__3471
2275c     10 25 62 FC | 	wrlong	local04, local02
22760     10 20 06 F1 | 	add	local02, #16
22764     10 23 02 FB | 	rdlong	local03, local02
22768     0C 20 86 F1 | 	sub	local02, #12
2276c     10 23 62 FC | 	wrlong	local03, local02
22770     04 20 06 F1 | 	add	local02, #4
22774     10 23 02 FB | 	rdlong	local03, local02
22778     01 22 46 F5 | 	or	local03, #1
2277c     10 23 62 FC | 	wrlong	local03, local02
22780     12 FB 01 F6 | 	mov	result1, local04
22784                 | LR__3471
22784     A7 F0 03 F6 | 	mov	ptra, fp
22788     B2 00 A0 FD | 	call	#popregs_
2278c                 | __system____default_filbuf_ret
2278c     2D 00 64 FD | 	ret
22790                 | 
22790                 | __system__getlower_1016
22790     41 12 56 F2 | 	cmps	arg01, #65 wc
22794     10 00 90 CD |  if_b	jmp	#LR__3480
22798     5B 12 56 F2 | 	cmps	arg01, #91 wc
2279c     09 FB 01 C6 |  if_b	mov	result1, arg01
227a0     20 FA 05 C1 |  if_b	add	result1, #32
227a4     04 00 90 CD |  if_b	jmp	#__system__getlower_1016_ret
227a8                 | LR__3480
227a8     09 FB 01 F6 | 	mov	result1, arg01
227ac                 | __system__getlower_1016_ret
227ac     2D 00 64 FD | 	ret
227b0                 | 
227b0                 | __system___pat_match
227b0     08 4A 05 F6 | 	mov	COUNT_, #8
227b4     A8 00 A0 FD | 	call	#pushregs_
227b8     09 1F 02 F6 | 	mov	local01, arg01
227bc                 | LR__3490
227bc     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
227c0     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
227c4     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
227c8     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
227cc     2C 00 90 AD |  if_e	jmp	#LR__3491
227d0     0A 13 C2 FA | 	rdbyte	arg01, arg02
227d4     B8 FF BF FD | 	call	#__system__getlower_1016
227d8     FD 22 02 F6 | 	mov	local03, result1
227dc     0F 13 C2 FA | 	rdbyte	arg01, local01
227e0     AC FF BF FD | 	call	#__system__getlower_1016
227e4     11 FB 09 F2 | 	cmp	result1, local03 wz
227e8     00 FA 05 56 |  if_ne	mov	result1, #0
227ec     FC 00 90 5D |  if_ne	jmp	#LR__3499
227f0     01 1E 06 F1 | 	add	local01, #1
227f4     01 14 06 F1 | 	add	arg02, #1
227f8     C0 FF 9F FD | 	jmp	#LR__3490
227fc                 | LR__3491
227fc     0A 23 C2 FA | 	rdbyte	local03, arg02
22800     2A 22 0E F2 | 	cmp	local03, #42 wz
22804     D4 00 90 5D |  if_ne	jmp	#LR__3498
22808     01 14 06 F1 | 	add	arg02, #1
2280c     0A 21 C2 FA | 	rdbyte	local02, arg02
22810     01 14 86 F1 | 	sub	arg02, #1
22814     2E 20 0E F2 | 	cmp	local02, #46 wz
22818     28 00 90 5D |  if_ne	jmp	#LR__3492
2281c     02 14 06 F1 | 	add	arg02, #2
22820     0A 21 C2 FA | 	rdbyte	local02, arg02
22824     02 14 86 F1 | 	sub	arg02, #2
22828     2A 20 0E F2 | 	cmp	local02, #42 wz
2282c     03 14 06 A1 |  if_e	add	arg02, #3
22830     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
22834     03 14 86 A1 |  if_e	sub	arg02, #3
22838     12 27 0A A6 |  if_e	mov	local05, local04 wz
2283c     01 FA 05 A6 |  if_e	mov	result1, #1
22840     A8 00 90 AD |  if_e	jmp	#LR__3499
22844                 | LR__3492
22844     01 14 06 F1 | 	add	arg02, #1
22848     00 28 06 F6 | 	mov	local06, #0
2284c     97 1E 48 FB | 	callpa	#(@LR__3495-@LR__3493)>>2,fcache_load_ptr_
22850                 | LR__3493
22850     14 2B 02 F6 | 	mov	local07, local06
22854     0A 2B 02 F1 | 	add	local07, arg02
22858     15 2B CA FA | 	rdbyte	local07, local07 wz
2285c     14 27 02 56 |  if_ne	mov	local05, local06
22860     01 26 06 51 |  if_ne	add	local05, #1
22864     13 29 02 56 |  if_ne	mov	local06, local05
22868     E4 FF 9F 5D |  if_ne	jmp	#LR__3493
2286c     00 2C 06 F6 | 	mov	local08, #0
22870                 | LR__3494
22870     16 2B 02 F6 | 	mov	local07, local08
22874     0F 2B 02 F1 | 	add	local07, local01
22878     15 2B CA FA | 	rdbyte	local07, local07 wz
2287c     16 27 02 56 |  if_ne	mov	local05, local08
22880     01 26 06 51 |  if_ne	add	local05, #1
22884     13 2D 02 56 |  if_ne	mov	local08, local05
22888     E4 FF 9F 5D |  if_ne	jmp	#LR__3494
2288c                 | LR__3495
2288c     14 2D 52 F2 | 	cmps	local08, local06 wc
22890     00 FA 05 C6 |  if_b	mov	result1, #0
22894     54 00 90 CD |  if_b	jmp	#LR__3499
22898     16 21 02 F6 | 	mov	local02, local08
2289c     14 21 82 F1 | 	sub	local02, local06
228a0     10 1F 02 F1 | 	add	local01, local02
228a4                 | LR__3496
228a4     01 28 56 F2 | 	cmps	local06, #1 wc
228a8     30 00 90 CD |  if_b	jmp	#LR__3497
228ac     0F 13 C2 FA | 	rdbyte	arg01, local01
228b0     DC FE BF FD | 	call	#__system__getlower_1016
228b4     FD 2C 02 F6 | 	mov	local08, result1
228b8     0A 13 C2 FA | 	rdbyte	arg01, arg02
228bc     D0 FE BF FD | 	call	#__system__getlower_1016
228c0     FD 2C 0A F2 | 	cmp	local08, result1 wz
228c4     00 FA 05 56 |  if_ne	mov	result1, #0
228c8     20 00 90 5D |  if_ne	jmp	#LR__3499
228cc     01 1E 06 F1 | 	add	local01, #1
228d0     01 14 06 F1 | 	add	arg02, #1
228d4     01 28 86 F1 | 	sub	local06, #1
228d8     C8 FF 9F FD | 	jmp	#LR__3496
228dc                 | LR__3497
228dc                 | LR__3498
228dc     0A 2D CA FA | 	rdbyte	local08, arg02 wz
228e0     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
228e4     01 FA 05 A6 |  if_e	mov	result1, #1
228e8     00 FA 05 56 |  if_ne	mov	result1, #0
228ec                 | LR__3499
228ec     A7 F0 03 F6 | 	mov	ptra, fp
228f0     B2 00 A0 FD | 	call	#popregs_
228f4                 | __system___pat_match_ret
228f4     2D 00 64 FD | 	ret
228f8                 | 
228f8                 | _fatfs_cc_ff_uni2oem
228f8     00 00 06 F6 | 	mov	_var01, #0
228fc     80 12 16 F2 | 	cmp	arg01, #128 wc
22900     09 01 02 C6 |  if_b	mov	_var01, arg01
22904     58 00 90 CD |  if_b	jmp	#LR__3504
22908     80 00 00 FF 
2290c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
22910     4C 00 90 3D |  if_ae	jmp	#LR__3503
22914     0A FB 31 F9 | 	getword	result1, arg02, #0
22918     01 00 00 FF 
2291c     52 FB 0D F2 | 	cmp	result1, ##850 wz
22920     3C 00 90 5D |  if_ne	jmp	#LR__3503
22924                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
22924     00 00 06 F6 | 	mov	_var01, #0
22928     97 14 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
2292c                 | LR__3500
2292c     00 FB 31 F9 | 	getword	result1, _var01, #0
22930     80 FA 15 F2 | 	cmp	result1, #128 wc
22934     1C 00 90 3D |  if_ae	jmp	#LR__3502
22938     00 FB 31 F9 | 	getword	result1, _var01, #0
2293c     01 FA 65 F0 | 	shl	result1, #1
22940     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
22944     FD FA E1 FA | 	rdword	result1, result1
22948     FD 12 0A F2 | 	cmp	arg01, result1 wz
2294c     01 00 06 51 |  if_ne	add	_var01, #1
22950     D8 FF 9F 5D |  if_ne	jmp	#LR__3500
22954                 | LR__3501
22954                 | LR__3502
22954     00 01 32 F9 | 	getword	_var01, _var01, #0
22958     80 00 06 F1 | 	add	_var01, #128
2295c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
22960                 | LR__3503
22960                 | LR__3504
22960                 | ' 			c = (c + 0x80) & 0xFF;
22960                 | ' 		}
22960                 | ' 	}
22960                 | ' 
22960                 | ' 	return c;
22960     00 FB 01 F6 | 	mov	result1, _var01
22964                 | _fatfs_cc_ff_uni2oem_ret
22964     2D 00 64 FD | 	ret
22968                 | 
22968                 | _fatfs_cc_ff_oem2uni
22968     00 00 06 F6 | 	mov	_var01, #0
2296c     09 FB 31 F9 | 	getword	result1, arg01, #0
22970     80 FA 15 F2 | 	cmp	result1, #128 wc
22974     09 01 02 C6 |  if_b	mov	_var01, arg01
22978     2C 00 90 CD |  if_b	jmp	#LR__3511
2297c     0A 15 32 F9 | 	getword	arg02, arg02, #0
22980     01 00 00 FF 
22984     52 15 0E F2 | 	cmp	arg02, ##850 wz
22988     1C 00 90 5D |  if_ne	jmp	#LR__3510
2298c     09 FB 31 F9 | 	getword	result1, arg01, #0
22990     00 FB 15 F2 | 	cmp	result1, #256 wc
22994     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
22998     80 12 86 C1 |  if_b	sub	arg01, #128
2299c     01 12 66 C0 |  if_b	shl	arg01, #1
229a0     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
229a4     09 01 E2 CA |  if_b	rdword	_var01, arg01
229a8                 | LR__3510
229a8                 | LR__3511
229a8                 | ' 		}
229a8                 | ' 	}
229a8                 | ' 
229a8                 | ' 	return c;
229a8     00 FB 01 F6 | 	mov	result1, _var01
229ac                 | _fatfs_cc_ff_oem2uni_ret
229ac     2D 00 64 FD | 	ret
229b0                 | 
229b0                 | _fatfs_cc_ff_wtoupper
229b0     09 01 02 F6 | 	mov	_var01, arg01
229b4     80 00 00 FF 
229b8     00 00 16 F2 | 	cmp	_var01, ##65536 wc
229bc     60 01 90 3D |  if_ae	jmp	#LR__3533
229c0     00 03 02 F6 | 	mov	_var02, _var01
229c4     01 01 32 F9 | 	getword	_var01, _var02, #0
229c8     08 00 00 FF 
229cc     00 00 16 F2 | 	cmp	_var01, ##4096 wc
229d0     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
229d4     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
229d8     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
229dc     01 00 00 3F 
229e0     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
229e4     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
229e8     01 00 00 3F 
229ec     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
229f0     02 07 02 F6 | 	mov	_var04, _var03
229f4                 | ' 		uc = (WORD)uni;
229f4                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
229f4                 | ' 		for (;;) {
229f4                 | LR__3520
229f4     03 09 E2 FA | 	rdword	_var05, _var04
229f8     04 05 02 F6 | 	mov	_var03, _var05
229fc     0F 04 4E F7 | 	zerox	_var03, #15 wz
22a00     02 06 06 F1 | 	add	_var04, #2
22a04     14 01 90 AD |  if_e	jmp	#LR__3532
22a08     01 05 32 F9 | 	getword	_var03, _var02, #0
22a0c     04 01 32 F9 | 	getword	_var01, _var05, #0
22a10     00 05 12 F2 | 	cmp	_var03, _var01 wc
22a14     04 01 90 CD |  if_b	jmp	#LR__3532
22a18     03 0B E2 FA | 	rdword	_var06, _var04
22a1c     05 0D 32 F9 | 	getword	_var07, _var06, #0
22a20     08 0C 46 F0 | 	shr	_var07, #8
22a24     05 0B 32 F9 | 	getword	_var06, _var06, #0
22a28     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
22a2c     01 05 32 F9 | 	getword	_var03, _var02, #0
22a30     04 0F 32 F9 | 	getword	_var08, _var05, #0
22a34     05 01 32 F9 | 	getword	_var01, _var06, #0
22a38     00 0F 02 F1 | 	add	_var08, _var01
22a3c     07 05 52 F2 | 	cmps	_var03, _var08 wc
22a40     02 06 06 F1 | 	add	_var04, #2
22a44     C4 00 90 3D |  if_ae	jmp	#LR__3531
22a48                 | ' 				switch (cmd) {
22a48     06 11 32 F9 | 	getword	_var09, _var07, #0
22a4c     09 10 26 F3 | 	fle	_var09, #9
22a50     30 10 62 FD | 	jmprel	_var09
22a54                 | LR__3521
22a54     24 00 90 FD | 	jmp	#LR__3522
22a58     3C 00 90 FD | 	jmp	#LR__3523
22a5c     54 00 90 FD | 	jmp	#LR__3524
22a60     5C 00 90 FD | 	jmp	#LR__3525
22a64     64 00 90 FD | 	jmp	#LR__3526
22a68     6C 00 90 FD | 	jmp	#LR__3527
22a6c     74 00 90 FD | 	jmp	#LR__3528
22a70     7C 00 90 FD | 	jmp	#LR__3529
22a74     84 00 90 FD | 	jmp	#LR__3530
22a78     A0 00 90 FD | 	jmp	#LR__3532
22a7c                 | LR__3522
22a7c     01 03 32 F9 | 	getword	_var02, _var02, #0
22a80     04 09 32 F9 | 	getword	_var05, _var05, #0
22a84     04 03 82 F1 | 	sub	_var02, _var05
22a88     01 02 66 F0 | 	shl	_var02, #1
22a8c     03 03 02 F1 | 	add	_var02, _var04
22a90     01 03 E2 FA | 	rdword	_var02, _var02
22a94     84 00 90 FD | 	jmp	#LR__3532
22a98                 | LR__3523
22a98     01 05 32 F9 | 	getword	_var03, _var02, #0
22a9c     01 03 32 F9 | 	getword	_var02, _var02, #0
22aa0     04 09 32 F9 | 	getword	_var05, _var05, #0
22aa4     04 03 82 F1 | 	sub	_var02, _var05
22aa8     01 02 06 F5 | 	and	_var02, #1
22aac     02 03 C2 F2 | 	subr	_var02, _var03
22ab0     68 00 90 FD | 	jmp	#LR__3532
22ab4                 | LR__3524
22ab4     01 03 32 F9 | 	getword	_var02, _var02, #0
22ab8     10 02 86 F1 | 	sub	_var02, #16
22abc     5C 00 90 FD | 	jmp	#LR__3532
22ac0                 | LR__3525
22ac0     01 03 32 F9 | 	getword	_var02, _var02, #0
22ac4     20 02 86 F1 | 	sub	_var02, #32
22ac8     50 00 90 FD | 	jmp	#LR__3532
22acc                 | LR__3526
22acc     01 03 32 F9 | 	getword	_var02, _var02, #0
22ad0     30 02 86 F1 | 	sub	_var02, #48
22ad4     44 00 90 FD | 	jmp	#LR__3532
22ad8                 | LR__3527
22ad8     01 03 32 F9 | 	getword	_var02, _var02, #0
22adc     1A 02 86 F1 | 	sub	_var02, #26
22ae0     38 00 90 FD | 	jmp	#LR__3532
22ae4                 | LR__3528
22ae4     01 03 32 F9 | 	getword	_var02, _var02, #0
22ae8     08 02 06 F1 | 	add	_var02, #8
22aec     2C 00 90 FD | 	jmp	#LR__3532
22af0                 | LR__3529
22af0     01 03 32 F9 | 	getword	_var02, _var02, #0
22af4     50 02 86 F1 | 	sub	_var02, #80
22af8     20 00 90 FD | 	jmp	#LR__3532
22afc                 | LR__3530
22afc     01 03 32 F9 | 	getword	_var02, _var02, #0
22b00     0E 00 00 FF 
22b04     60 02 86 F1 | 	sub	_var02, ##7264
22b08                 | ' 				}
22b08                 | ' 				break;
22b08     10 00 90 FD | 	jmp	#LR__3532
22b0c                 | LR__3531
22b0c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
22b10     02 0A 06 AA |  if_e	mul	_var06, #2
22b14     05 07 02 A1 |  if_e	add	_var04, _var06
22b18     D8 FE 9F FD | 	jmp	#LR__3520
22b1c                 | LR__3532
22b1c     01 01 32 F9 | 	getword	_var01, _var02, #0
22b20                 | LR__3533
22b20                 | ' 		}
22b20                 | ' 		uni = uc;
22b20                 | ' 	}
22b20                 | ' 
22b20                 | ' 	return uni;
22b20     00 FB 01 F6 | 	mov	result1, _var01
22b24                 | _fatfs_cc_ff_wtoupper_ret
22b24     2D 00 64 FD | 	ret
22b28                 | 
22b28                 | _fatfs_cc_strncpy
22b28     09 01 02 F6 | 	mov	_var01, arg01
22b2c     97 12 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
22b30                 | ' 
22b30                 | ' 	dscan = dst;
22b30                 | ' 	sscan = src;
22b30                 | ' 	count = n;
22b30                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
22b30                 | LR__3540
22b30     01 16 86 F1 | 	sub	arg03, #1
22b34     00 16 56 F2 | 	cmps	arg03, #0 wc
22b38     18 00 90 CD |  if_b	jmp	#LR__3542
22b3c     0A FB C1 FA | 	rdbyte	result1, arg02
22b40     00 FB 41 FC | 	wrbyte	result1, _var01
22b44     01 14 06 F1 | 	add	arg02, #1
22b48     00 FB C9 FA | 	rdbyte	result1, _var01 wz
22b4c                 | ' 		continue;
22b4c     01 00 06 F1 | 	add	_var01, #1
22b50     DC FF 9F 5D |  if_ne	jmp	#LR__3540
22b54                 | LR__3541
22b54                 | LR__3542
22b54     97 0C 48 FB | 	callpa	#(@LR__3544-@LR__3543)>>2,fcache_load_ptr_
22b58                 | ' 	while (--count >= 0)
22b58                 | LR__3543
22b58     01 16 86 F1 | 	sub	arg03, #1
22b5c     00 16 56 F2 | 	cmps	arg03, #0 wc
22b60     00 03 02 36 |  if_ae	mov	_var02, _var01
22b64     01 00 06 31 |  if_ae	add	_var01, #1
22b68     01 01 48 3C |  if_ae	wrbyte	#0, _var02
22b6c     E8 FF 9F 3D |  if_ae	jmp	#LR__3543
22b70                 | LR__3544
22b70                 | ' 		*dscan++ = '\0';
22b70                 | ' 	return(dst);
22b70     09 FB 01 F6 | 	mov	result1, arg01
22b74                 | _fatfs_cc_strncpy_ret
22b74     2D 00 64 FD | 	ret
22b78                 | 
22b78                 | _fatfs_cc_memcmp
22b78                 | ' 	for (n = size; n > 0; n--)
22b78     00 16 0E F2 | 	cmp	arg03, #0 wz
22b7c     28 00 90 AD |  if_e	jmp	#LR__3551
22b80                 | LR__3550
22b80     09 01 C2 FA | 	rdbyte	_var01, arg01
22b84     0A 03 C2 FA | 	rdbyte	_var02, arg02
22b88     01 01 0A F2 | 	cmp	_var01, _var02 wz
22b8c     01 12 06 A1 |  if_e	add	arg01, #1
22b90     01 14 06 A1 |  if_e	add	arg02, #1
22b94                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
22b94     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
22b98     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
22b9c     01 FB 81 51 |  if_ne	sub	result1, _var02
22ba0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
22ba4     F6 17 6E FB | 	djnz	arg03, #LR__3550
22ba8                 | LR__3551
22ba8                 | ' 
22ba8                 | ' 	return(0);
22ba8     00 FA 05 F6 | 	mov	result1, #0
22bac                 | _fatfs_cc_memcmp_ret
22bac     2D 00 64 FD | 	ret
22bb0                 | 
22bb0                 | _fatfs_cc_strncmp
22bb0     09 01 0A F6 | 	mov	_var01, arg01 wz
22bb4     14 00 90 5D |  if_ne	jmp	#LR__3560
22bb8                 | ' 		return scan2 ? -1 : 0;
22bb8     00 14 0E F2 | 	cmp	arg02, #0 wz
22bbc     01 02 66 56 |  if_ne	neg	_var02, #1
22bc0     00 02 06 A6 |  if_e	mov	_var02, #0
22bc4     01 FB 01 F6 | 	mov	result1, _var02
22bc8     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
22bcc                 | LR__3560
22bcc     00 14 0E F2 | 	cmp	arg02, #0 wz
22bd0     01 FA 05 A6 |  if_e	mov	result1, #1
22bd4     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22bd8     0B 05 02 F6 | 	mov	_var03, arg03
22bdc     97 16 48 FB | 	callpa	#(@LR__3562-@LR__3561)>>2,fcache_load_ptr_
22be0                 | ' 	count = n;
22be0                 | ' 	do {
22be0                 | LR__3561
22be0     00 07 C2 FA | 	rdbyte	_var04, _var01
22be4     0A 09 02 F6 | 	mov	_var05, arg02
22be8     04 0B C2 FA | 	rdbyte	_var06, _var05
22bec     01 04 86 F1 | 	sub	_var03, #1
22bf0     00 04 56 F2 | 	cmps	_var03, #0 wc
22bf4     01 00 06 F1 | 	add	_var01, #1
22bf8     01 14 06 F1 | 	add	arg02, #1
22bfc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
22c00     08 00 90 2D |  if_nc_and_z	jmp	#LR__3563
22c04     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
22c08     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3561
22c0c                 | LR__3562
22c0c                 | LR__3563
22c0c     00 04 56 F2 | 	cmps	_var03, #0 wc
22c10                 | ' 		return(0);
22c10     00 FA 05 C6 |  if_b	mov	result1, #0
22c14     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
22c18     05 07 0A F2 | 	cmp	_var04, _var06 wz
22c1c                 | ' 		return(0);
22c1c     00 FA 05 A6 |  if_e	mov	result1, #0
22c20     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22c24     00 06 0E F2 | 	cmp	_var04, #0 wz
22c28                 | ' 		return(-1);
22c28     01 FA 65 A6 |  if_e	neg	result1, #1
22c2c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22c30     00 0A 0E F2 | 	cmp	_var06, #0 wz
22c34                 | ' 		return(1);
22c34     01 FA 05 A6 |  if_e	mov	result1, #1
22c38                 | ' 		return(c1 - c2);
22c38     03 FB 01 56 |  if_ne	mov	result1, _var04
22c3c     05 FB 81 51 |  if_ne	sub	result1, _var06
22c40                 | _fatfs_cc_strncmp_ret
22c40     2D 00 64 FD | 	ret
22c44                 | 
22c44                 | _fatfs_cc_strchr
22c44                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
22c44                 | ' 	while ((c = *s++) != (char) charwanted)
22c44                 | LR__3570
22c44     09 01 02 F6 | 	mov	_var01, arg01
22c48     00 03 C2 FA | 	rdbyte	_var02, _var01
22c4c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
22c50     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
22c54     03 05 0A F2 | 	cmp	_var03, _var04 wz
22c58     01 12 06 F1 | 	add	arg01, #1
22c5c     14 00 90 AD |  if_e	jmp	#LR__3571
22c60     01 05 02 F6 | 	mov	_var03, _var02
22c64     07 04 4E F7 | 	zerox	_var03, #7 wz
22c68     00 FA 05 A6 |  if_e	mov	result1, #0
22c6c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
22c70     D0 FF 9F FD | 	jmp	#LR__3570
22c74                 | LR__3571
22c74                 | ' 	return((char *)--s);
22c74     01 12 86 F1 | 	sub	arg01, #1
22c78     09 FB 01 F6 | 	mov	result1, arg01
22c7c                 | _fatfs_cc_strchr_ret
22c7c     2D 00 64 FD | 	ret
22c80                 | 
22c80                 | _fatfs_cc_disk_initialize
22c80     04 4A 05 F6 | 	mov	COUNT_, #4
22c84     A8 00 A0 FD | 	call	#pushregs_
22c88     40 F0 07 F1 | 	add	ptra, #64
22c8c     04 4E 05 F1 | 	add	fp, #4
22c90     A7 12 42 FC | 	wrbyte	arg01, fp
22c94     01 00 00 FF 
22c98     14 E4 05 F1 | 	add	objptr, ##532
22c9c     F2 18 02 FB | 	rdlong	arg04, objptr
22ca0     2C 4E 05 F1 | 	add	fp, #44
22ca4     A7 18 62 FC | 	wrlong	arg04, fp
22ca8     04 E4 85 F1 | 	sub	objptr, #4
22cac     F2 18 02 FB | 	rdlong	arg04, objptr
22cb0     04 4E 05 F1 | 	add	fp, #4
22cb4     A7 18 62 FC | 	wrlong	arg04, fp
22cb8     08 E4 05 F1 | 	add	objptr, #8
22cbc     F2 18 02 FB | 	rdlong	arg04, objptr
22cc0     04 4E 05 F1 | 	add	fp, #4
22cc4     A7 18 62 FC | 	wrlong	arg04, fp
22cc8     04 E4 05 F1 | 	add	objptr, #4
22ccc     F2 18 02 FB | 	rdlong	arg04, objptr
22cd0     04 4E 05 F1 | 	add	fp, #4
22cd4     A7 18 62 FC | 	wrlong	arg04, fp
22cd8     04 E4 05 F1 | 	add	objptr, #4
22cdc     F2 02 48 FC | 	wrbyte	#1, objptr
22ce0     01 00 00 FF 
22ce4     20 E4 85 F1 | 	sub	objptr, ##544
22ce8     38 4E 85 F1 | 	sub	fp, #56
22cec     A7 18 CA FA | 	rdbyte	arg04, fp wz
22cf0     04 4E 85 F1 | 	sub	fp, #4
22cf4                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
22cf4                 | '             return RES_NOTRDY;
22cf4     03 FA 05 56 |  if_ne	mov	result1, #3
22cf8     D8 05 90 5D |  if_ne	jmp	#LR__3598
22cfc     13 00 00 FF 
22d00     10 13 06 F6 | 	mov	arg01, ##10000
22d04     A4 9A BF FD | 	call	#__system___waitus
22d08     30 4E 05 F1 | 	add	fp, #48
22d0c     A7 12 02 FB | 	rdlong	arg01, fp
22d10     09 01 08 FC | 	wrpin	#0, arg01
22d14     04 4E 05 F1 | 	add	fp, #4
22d18     A7 12 02 FB | 	rdlong	arg01, fp
22d1c     09 01 08 FC | 	wrpin	#0, arg01
22d20     04 4E 05 F1 | 	add	fp, #4
22d24     A7 12 02 FB | 	rdlong	arg01, fp
22d28     09 01 08 FC | 	wrpin	#0, arg01
22d2c     04 4E 05 F1 | 	add	fp, #4
22d30     A7 12 02 FB | 	rdlong	arg01, fp
22d34     09 00 80 FF 
22d38     09 01 08 FC | 	wrpin	##4608, arg01
22d3c     0C 4E 85 F1 | 	sub	fp, #12
22d40     A7 12 02 FB | 	rdlong	arg01, fp
22d44     59 12 62 FD | 	drvh	arg01
22d48     04 4E 05 F1 | 	add	fp, #4
22d4c     A7 12 02 FB | 	rdlong	arg01, fp
22d50     59 12 62 FD | 	drvh	arg01
22d54     04 4E 05 F1 | 	add	fp, #4
22d58     A7 12 02 FB | 	rdlong	arg01, fp
22d5c     59 12 62 FD | 	drvh	arg01
22d60     04 4E 05 F1 | 	add	fp, #4
22d64     A7 12 02 FB | 	rdlong	arg01, fp
22d68     59 12 62 FD | 	drvh	arg01
22d6c     20 4E 85 F1 | 	sub	fp, #32
22d70     00 04 80 FF 
22d74     A7 20 68 FC | 	wrlong	##524304, fp
22d78     04 4E 05 F1 | 	add	fp, #4
22d7c     20 03 80 FF 
22d80     A7 90 68 FC | 	wrlong	##409672, fp
22d84     14 4E 05 F1 | 	add	fp, #20
22d88     A7 1E 02 FB | 	rdlong	local01, fp
22d8c     18 4E 85 F1 | 	sub	fp, #24
22d90     A7 16 02 FB | 	rdlong	arg03, fp
22d94     40 1E 62 FD | 	dirl	local01
22d98     A0 03 80 FF 
22d9c     0F 91 08 FC | 	wrpin	##475208, local01
22da0     0F 17 12 FC | 	wxpin	arg03, local01
22da4     0F 01 28 FC | 	wypin	#0, local01
22da8     41 1E 62 FD | 	dirh	local01
22dac     1C 4E 05 F1 | 	add	fp, #28
22db0     A7 20 02 FB | 	rdlong	local02, fp
22db4     10 1F 82 F1 | 	sub	local01, local02
22db8     07 1E 06 F5 | 	and	local01, #7
22dbc     18 1E 66 F0 | 	shl	local01, #24
22dc0     78 14 06 F6 | 	mov	arg02, #120
22dc4     0F 15 42 F5 | 	or	arg02, local01
22dc8     14 4E 85 F1 | 	sub	fp, #20
22dcc     A7 14 62 FC | 	wrlong	arg02, fp
22dd0     14 4E 05 F1 | 	add	fp, #20
22dd4     A7 12 02 FB | 	rdlong	arg01, fp
22dd8     10 14 26 F4 | 	bith	arg02, #16
22ddc     40 12 62 FD | 	dirl	arg01
22de0     09 15 02 FC | 	wrpin	arg02, arg01
22de4     09 3F 18 FC | 	wxpin	#31, arg01
22de8     FF FF FF FF 
22dec     09 FF 2B FC | 	wypin	##-1, arg01
22df0     41 12 62 FD | 	dirh	arg01
22df4     04 4E 85 F1 | 	sub	fp, #4
22df8     A7 14 02 FB | 	rdlong	arg02, fp
22dfc     08 4E 05 F1 | 	add	fp, #8
22e00     A7 22 02 FB | 	rdlong	local03, fp
22e04     11 15 82 F1 | 	sub	arg02, local03
22e08     07 14 06 F5 | 	and	arg02, #7
22e0c     18 14 66 F0 | 	shl	arg02, #24
22e10     14 4E 85 F1 | 	sub	fp, #20
22e14     A7 14 62 FC | 	wrlong	arg02, fp
22e18     29 00 00 FF 
22e1c     7A 14 46 F5 | 	or	arg02, ##21114
22e20     A7 14 62 FC | 	wrlong	arg02, fp
22e24     14 4E 05 F1 | 	add	fp, #20
22e28     A7 12 02 FB | 	rdlong	arg01, fp
22e2c     40 12 62 FD | 	dirl	arg01
22e30     09 15 02 FC | 	wrpin	arg02, arg01
22e34     09 4F 18 FC | 	wxpin	#39, arg01
22e38     09 01 28 FC | 	wypin	#0, arg01
22e3c     41 12 62 FD | 	dirh	arg01
22e40     28 4E 85 F1 | 	sub	fp, #40
22e44     A7 12 02 F6 | 	mov	arg01, fp
22e48     14 4E 85 F1 | 	sub	fp, #20
22e4c     0A 14 06 F6 | 	mov	arg02, #10
22e50     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22e54     00 12 06 F6 | 	mov	arg01, #0
22e58     00 14 06 F6 | 	mov	arg02, #0
22e5c     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22e60     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1060
22e64     64 12 06 F6 | 	mov	arg01, #100
22e68     40 99 BF FD | 	call	#__system___waitus
22e6c     14 4E 05 F1 | 	add	fp, #20
22e70     A7 12 02 F6 | 	mov	arg01, fp
22e74     14 4E 85 F1 | 	sub	fp, #20
22e78     0A 14 06 F6 | 	mov	arg02, #10
22e7c     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22e80     0C 4E 05 F1 | 	add	fp, #12
22e84     A7 00 48 FC | 	wrbyte	#0, fp
22e88     0C 4E 85 F1 | 	sub	fp, #12
22e8c     00 12 06 F6 | 	mov	arg01, #0
22e90     00 14 06 F6 | 	mov	arg02, #0
22e94     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22e98     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
22e9c     01 18 0E F2 | 	cmp	arg04, #1 wz
22ea0     B8 03 90 5D |  if_ne	jmp	#LR__3597
22ea4     08 12 06 F6 | 	mov	arg01, #8
22ea8     AA 15 06 F6 | 	mov	arg02, #426
22eac     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22eb0     FD FA E1 F8 | 	getbyte	result1, result1, #0
22eb4     01 FA 0D F2 | 	cmp	result1, #1 wz
22eb8     98 01 90 5D |  if_ne	jmp	#LR__3583
22ebc     14 4E 05 F1 | 	add	fp, #20
22ec0     A7 12 02 F6 | 	mov	arg01, fp
22ec4     14 4E 85 F1 | 	sub	fp, #20
22ec8     04 14 06 F6 | 	mov	arg02, #4
22ecc     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22ed0     16 4E 05 F1 | 	add	fp, #22
22ed4     A7 24 C2 FA | 	rdbyte	local04, fp
22ed8     16 4E 85 F1 | 	sub	fp, #22
22edc     01 24 0E F2 | 	cmp	local04, #1 wz
22ee0     17 4E 05 A1 |  if_e	add	fp, #23
22ee4     A7 22 C2 AA |  if_e	rdbyte	local03, fp
22ee8     17 4E 85 A1 |  if_e	sub	fp, #23
22eec     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
22ef0     68 03 90 5D |  if_ne	jmp	#LR__3596
22ef4                 | ' 				for (tmr = 1000; tmr; tmr--) {
22ef4     18 4E 05 F1 | 	add	fp, #24
22ef8     01 00 80 FF 
22efc     A7 D0 6B FC | 	wrlong	##1000, fp
22f00     18 4E 85 F1 | 	sub	fp, #24
22f04                 | LR__3580
22f04     18 4E 05 F1 | 	add	fp, #24
22f08     A7 1E 0A FB | 	rdlong	local01, fp wz
22f0c     18 4E 85 F1 | 	sub	fp, #24
22f10     3C 00 90 AD |  if_e	jmp	#LR__3581
22f14     A9 12 06 F6 | 	mov	arg01, #169
22f18     1E 14 C6 F9 | 	decod	arg02, #30
22f1c     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22f20     FD 24 02 F6 | 	mov	local04, result1
22f24     07 24 4E F7 | 	zerox	local04, #7 wz
22f28     24 00 90 AD |  if_e	jmp	#LR__3581
22f2c     01 00 00 FF 
22f30     E8 13 06 F6 | 	mov	arg01, ##1000
22f34     74 98 BF FD | 	call	#__system___waitus
22f38     18 4E 05 F1 | 	add	fp, #24
22f3c     A7 24 02 FB | 	rdlong	local04, fp
22f40     01 24 86 F1 | 	sub	local04, #1
22f44     A7 24 62 FC | 	wrlong	local04, fp
22f48     18 4E 85 F1 | 	sub	fp, #24
22f4c     B4 FF 9F FD | 	jmp	#LR__3580
22f50                 | LR__3581
22f50     18 4E 05 F1 | 	add	fp, #24
22f54     A7 24 0A FB | 	rdlong	local04, fp wz
22f58     18 4E 85 F1 | 	sub	fp, #24
22f5c     4C 00 90 AD |  if_e	jmp	#LR__3582
22f60     3A 12 06 F6 | 	mov	arg01, #58
22f64     00 14 06 F6 | 	mov	arg02, #0
22f68     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22f6c     FD 22 02 F6 | 	mov	local03, result1
22f70     07 22 4E F7 | 	zerox	local03, #7 wz
22f74     34 00 90 5D |  if_ne	jmp	#LR__3582
22f78     14 4E 05 F1 | 	add	fp, #20
22f7c     A7 12 02 F6 | 	mov	arg01, fp
22f80     14 4E 85 F1 | 	sub	fp, #20
22f84     04 14 06 F6 | 	mov	arg02, #4
22f88     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22f8c     14 4E 05 F1 | 	add	fp, #20
22f90     A7 1E C2 FA | 	rdbyte	local01, fp
22f94     40 1E CE F7 | 	test	local01, #64 wz
22f98     0C 24 06 56 |  if_ne	mov	local04, #12
22f9c     04 24 06 A6 |  if_e	mov	local04, #4
22fa0     08 4E 85 F1 | 	sub	fp, #8
22fa4     A7 24 42 FC | 	wrbyte	local04, fp
22fa8     0C 4E 85 F1 | 	sub	fp, #12
22fac                 | LR__3582
22fac     14 24 06 FB | 	rdlong	local04, #20
22fb0     18 4E 05 F1 | 	add	fp, #24
22fb4     A7 24 62 FC | 	wrlong	local04, fp
22fb8     0C 4E 05 F1 | 	add	fp, #12
22fbc     A7 24 02 FB | 	rdlong	local04, fp
22fc0     1B 24 26 F4 | 	bith	local04, #27
22fc4     A7 24 62 FC | 	wrlong	local04, fp
22fc8     0C 4E 85 F1 | 	sub	fp, #12
22fcc     A7 24 02 FB | 	rdlong	local04, fp
22fd0     18 4E 85 F1 | 	sub	fp, #24
22fd4     68 78 04 FF 
22fd8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
22fdc     1C 4E 05 C1 |  if_b	add	fp, #28
22fe0     00 01 80 CF 
22fe4     A7 08 68 CC |  if_b	wrlong	##131076, fp
22fe8     1C 4E 85 C1 |  if_b	sub	fp, #28
22fec     6C 02 90 CD |  if_b	jmp	#LR__3596
22ff0     18 4E 05 F1 | 	add	fp, #24
22ff4     A7 24 02 FB | 	rdlong	local04, fp
22ff8     18 4E 85 F1 | 	sub	fp, #24
22ffc     E1 F5 05 FF 
23000     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23004     1C 4E 05 C1 |  if_b	add	fp, #28
23008     00 01 80 CF 
2300c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
23010     1C 4E 85 C1 |  if_b	sub	fp, #28
23014     44 02 90 CD |  if_b	jmp	#LR__3596
23018     18 4E 05 F1 | 	add	fp, #24
2301c     A7 24 02 FB | 	rdlong	local04, fp
23020     18 4E 85 F1 | 	sub	fp, #24
23024     3B 58 08 FF 
23028     01 24 16 F2 | 	cmp	local04, ##280000001 wc
2302c     1C 4E 05 C1 |  if_b	add	fp, #28
23030     00 01 80 CF 
23034     A7 0C 68 CC |  if_b	wrlong	##131078, fp
23038     1C 4E 85 C1 |  if_b	sub	fp, #28
2303c     1C 02 90 CD |  if_b	jmp	#LR__3596
23040     1C 4E 05 F1 | 	add	fp, #28
23044     80 01 80 FF 
23048     A7 10 68 FC | 	wrlong	##196616, fp
2304c     1C 4E 85 F1 | 	sub	fp, #28
23050     08 02 90 FD | 	jmp	#LR__3596
23054                 | LR__3583
23054     A9 12 06 F6 | 	mov	arg01, #169
23058     00 14 06 F6 | 	mov	arg02, #0
2305c     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23060     FD 24 E2 F8 | 	getbyte	local04, result1, #0
23064     02 24 16 F2 | 	cmp	local04, #2 wc
23068     18 00 90 3D |  if_ae	jmp	#LR__3584
2306c     0C 4E 05 F1 | 	add	fp, #12
23070     A7 04 48 FC | 	wrbyte	#2, fp
23074     04 4E 05 F1 | 	add	fp, #4
23078     A7 52 49 FC | 	wrbyte	#169, fp
2307c     10 4E 85 F1 | 	sub	fp, #16
23080     14 00 90 FD | 	jmp	#LR__3585
23084                 | LR__3584
23084     0C 4E 05 F1 | 	add	fp, #12
23088     A7 02 48 FC | 	wrbyte	#1, fp
2308c     04 4E 05 F1 | 	add	fp, #4
23090     A7 02 48 FC | 	wrbyte	#1, fp
23094     10 4E 85 F1 | 	sub	fp, #16
23098                 | LR__3585
23098                 | ' 				ty =  0x01 ; cmd =  (1) ;
23098                 | ' 			}
23098                 | ' 			for (tmr = 1000; tmr; tmr--) {
23098     18 4E 05 F1 | 	add	fp, #24
2309c     01 00 80 FF 
230a0     A7 D0 6B FC | 	wrlong	##1000, fp
230a4     18 4E 85 F1 | 	sub	fp, #24
230a8                 | LR__3586
230a8     18 4E 05 F1 | 	add	fp, #24
230ac     A7 22 0A FB | 	rdlong	local03, fp wz
230b0     18 4E 85 F1 | 	sub	fp, #24
230b4     44 00 90 AD |  if_e	jmp	#LR__3587
230b8     10 4E 05 F1 | 	add	fp, #16
230bc     A7 12 C2 FA | 	rdbyte	arg01, fp
230c0     10 4E 85 F1 | 	sub	fp, #16
230c4     00 14 06 F6 | 	mov	arg02, #0
230c8     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
230cc     FD 24 02 F6 | 	mov	local04, result1
230d0     07 24 4E F7 | 	zerox	local04, #7 wz
230d4     24 00 90 AD |  if_e	jmp	#LR__3587
230d8     01 00 00 FF 
230dc     E8 13 06 F6 | 	mov	arg01, ##1000
230e0     C8 96 BF FD | 	call	#__system___waitus
230e4     18 4E 05 F1 | 	add	fp, #24
230e8     A7 24 02 FB | 	rdlong	local04, fp
230ec     01 24 86 F1 | 	sub	local04, #1
230f0     A7 24 62 FC | 	wrlong	local04, fp
230f4     18 4E 85 F1 | 	sub	fp, #24
230f8     AC FF 9F FD | 	jmp	#LR__3586
230fc                 | LR__3587
230fc     18 4E 05 F1 | 	add	fp, #24
23100     A7 24 0A FB | 	rdlong	local04, fp wz
23104     18 4E 85 F1 | 	sub	fp, #24
23108     14 00 90 AD |  if_e	jmp	#LR__3588
2310c     10 12 06 F6 | 	mov	arg01, #16
23110     09 14 C6 F9 | 	decod	arg02, #9
23114     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23118     07 FA 4D F7 | 	zerox	result1, #7 wz
2311c     0C 00 90 AD |  if_e	jmp	#LR__3589
23120                 | LR__3588
23120     0C 4E 05 F1 | 	add	fp, #12
23124     A7 00 48 FC | 	wrbyte	#0, fp
23128     0C 4E 85 F1 | 	sub	fp, #12
2312c                 | LR__3589
2312c     14 24 06 FB | 	rdlong	local04, #20
23130     18 4E 05 F1 | 	add	fp, #24
23134     A7 24 62 FC | 	wrlong	local04, fp
23138     18 4E 85 F1 | 	sub	fp, #24
2313c     F0 FA 02 FF 
23140     01 25 16 F2 | 	cmp	local04, ##100000001 wc
23144     18 00 90 3D |  if_ae	jmp	#LR__3590
23148     24 4E 05 F1 | 	add	fp, #36
2314c     A7 24 02 FB | 	rdlong	local04, fp
23150     1B 24 26 F4 | 	bith	local04, #27
23154     A7 24 62 FC | 	wrlong	local04, fp
23158     24 4E 85 F1 | 	sub	fp, #36
2315c     2C 00 90 FD | 	jmp	#LR__3591
23160                 | LR__3590
23160     18 4E 05 F1 | 	add	fp, #24
23164     A7 24 02 FB | 	rdlong	local04, fp
23168     18 4E 85 F1 | 	sub	fp, #24
2316c     E1 F5 05 FF 
23170     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23174     24 4E 05 C1 |  if_b	add	fp, #36
23178     A7 24 02 CB |  if_b	rdlong	local04, fp
2317c     80 00 04 CF 
23180     00 24 46 C5 |  if_b	or	local04, ##134283264
23184     A7 24 62 CC |  if_b	wrlong	local04, fp
23188     24 4E 85 C1 |  if_b	sub	fp, #36
2318c                 | LR__3591
2318c     18 4E 05 F1 | 	add	fp, #24
23190     A7 24 02 FB | 	rdlong	local04, fp
23194     18 4E 85 F1 | 	sub	fp, #24
23198     F0 FA 02 FF 
2319c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
231a0     1C 4E 05 C1 |  if_b	add	fp, #28
231a4     00 01 80 CF 
231a8     A7 08 68 CC |  if_b	wrlong	##131076, fp
231ac     1C 4E 85 C1 |  if_b	sub	fp, #28
231b0     A8 00 90 CD |  if_b	jmp	#LR__3595
231b4     18 4E 05 F1 | 	add	fp, #24
231b8     A7 24 02 FB | 	rdlong	local04, fp
231bc     18 4E 85 F1 | 	sub	fp, #24
231c0     68 78 04 FF 
231c4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
231c8     1C 4E 05 C1 |  if_b	add	fp, #28
231cc     80 01 80 CF 
231d0     A7 0C 68 CC |  if_b	wrlong	##196614, fp
231d4     1C 4E 85 C1 |  if_b	sub	fp, #28
231d8     80 00 90 CD |  if_b	jmp	#LR__3594
231dc     18 4E 05 F1 | 	add	fp, #24
231e0     A7 24 02 FB | 	rdlong	local04, fp
231e4     18 4E 85 F1 | 	sub	fp, #24
231e8     E1 F5 05 FF 
231ec     01 24 16 F2 | 	cmp	local04, ##200000001 wc
231f0     1C 4E 05 C1 |  if_b	add	fp, #28
231f4     00 02 80 CF 
231f8     A7 10 68 CC |  if_b	wrlong	##262152, fp
231fc     1C 4E 85 C1 |  if_b	sub	fp, #28
23200     58 00 90 CD |  if_b	jmp	#LR__3593
23204     18 4E 05 F1 | 	add	fp, #24
23208     A7 24 02 FB | 	rdlong	local04, fp
2320c     18 4E 85 F1 | 	sub	fp, #24
23210     59 73 07 FF 
23214     81 24 16 F2 | 	cmp	local04, ##250000001 wc
23218     1C 4E 05 C1 |  if_b	add	fp, #28
2321c     80 02 80 CF 
23220     A7 14 68 CC |  if_b	wrlong	##327690, fp
23224     1C 4E 85 C1 |  if_b	sub	fp, #28
23228     30 00 90 CD |  if_b	jmp	#LR__3592
2322c     18 4E 05 F1 | 	add	fp, #24
23230     A7 24 02 FB | 	rdlong	local04, fp
23234     18 4E 85 F1 | 	sub	fp, #24
23238     D1 F0 08 FF 
2323c     01 25 16 F2 | 	cmp	local04, ##300000001 wc
23240     1C 4E 05 C1 |  if_b	add	fp, #28
23244     00 03 80 CF 
23248     A7 18 68 CC |  if_b	wrlong	##393228, fp
2324c     1C 4E 85 F3 | 	sumc	fp, #28
23250     80 03 80 3F 
23254     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
23258     1C 4E 85 31 |  if_ae	sub	fp, #28
2325c                 | LR__3592
2325c                 | LR__3593
2325c                 | LR__3594
2325c                 | LR__3595
2325c                 | LR__3596
2325c                 | LR__3597
2325c     0C 4E 05 F1 | 	add	fp, #12
23260     A7 24 C2 FA | 	rdbyte	local04, fp
23264     01 00 00 FF 
23268     21 E4 05 F1 | 	add	objptr, ##545
2326c     F2 24 42 FC | 	wrbyte	local04, objptr
23270     A7 1E CA FA | 	rdbyte	local01, fp wz
23274     00 24 06 56 |  if_ne	mov	local04, #0
23278     01 24 06 A6 |  if_e	mov	local04, #1
2327c     20 4E 05 F1 | 	add	fp, #32
23280     A7 24 42 FC | 	wrbyte	local04, fp
23284     A7 24 C2 FA | 	rdbyte	local04, fp
23288     2C 4E 85 F1 | 	sub	fp, #44
2328c     01 E4 85 F1 | 	sub	objptr, #1
23290     F2 24 42 FC | 	wrbyte	local04, objptr
23294     01 00 00 FF 
23298     20 E4 85 F1 | 	sub	objptr, ##544
2329c     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1060
232a0     34 4E 05 F1 | 	add	fp, #52
232a4     A7 12 02 FB | 	rdlong	arg01, fp
232a8     18 4E 85 F1 | 	sub	fp, #24
232ac     A7 14 02 FB | 	rdlong	arg02, fp
232b0     09 15 12 FC | 	wxpin	arg02, arg01
232b4     1C 4E 05 F1 | 	add	fp, #28
232b8     A7 12 02 FB | 	rdlong	arg01, fp
232bc     14 4E 85 F1 | 	sub	fp, #20
232c0     A7 14 02 FB | 	rdlong	arg02, fp
232c4     09 15 02 FC | 	wrpin	arg02, arg01
232c8                 | ' 
232c8                 | ' 		}
232c8                 | ' 	}
232c8                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
232c8                 | ' 	CardType = ty;
232c8                 | ' 	s = ty ? 0 :  0x01 ;
232c8                 | ' 	Stat = s;
232c8                 | ' 
232c8                 | ' 	deselect();
232c8                 | ' 
232c8                 | ' 
232c8                 | ' 	_wxpin( PIN_CLK, ck_div );
232c8                 | ' 	_wrpin( PIN_DI, spm_tx );
232c8                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
232c8                 | ' 	return s;
232c8     08 4E 05 F1 | 	add	fp, #8
232cc     A7 FA C1 FA | 	rdbyte	result1, fp
232d0     2C 4E 85 F1 | 	sub	fp, #44
232d4                 | LR__3598
232d4     A7 F0 03 F6 | 	mov	ptra, fp
232d8     B2 00 A0 FD | 	call	#popregs_
232dc                 | _fatfs_cc_disk_initialize_ret
232dc     2D 00 64 FD | 	ret
232e0                 | 
232e0                 | _fatfs_cc_disk_read
232e0     05 4A 05 F6 | 	mov	COUNT_, #5
232e4     A8 00 A0 FD | 	call	#pushregs_
232e8     0A 1F 02 F6 | 	mov	local01, arg02
232ec     0B 21 02 F6 | 	mov	local02, arg03
232f0     0C 23 02 F6 | 	mov	local03, arg04
232f4     00 12 0E F2 | 	cmp	arg01, #0 wz
232f8     01 FA 05 56 |  if_ne	mov	result1, #1
232fc                 | ' 
232fc                 | ' 	return Stat;
232fc     01 00 00 AF 
23300     20 E4 05 A1 |  if_e	add	objptr, ##544
23304     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23308     01 00 00 AF 
2330c     20 E4 85 A1 |  if_e	sub	objptr, ##544
23310     FD FA E1 F8 | 	getbyte	result1, result1, #0
23314     01 FA CD F7 | 	test	result1, #1 wz
23318     03 FA 05 56 |  if_ne	mov	result1, #3
2331c     84 00 90 5D |  if_ne	jmp	#LR__3602
23320     01 00 00 FF 
23324     21 E4 05 F1 | 	add	objptr, ##545
23328     F2 24 C2 FA | 	rdbyte	local04, objptr
2332c     01 00 00 FF 
23330     21 E4 85 F1 | 	sub	objptr, ##545
23334     08 24 CE F7 | 	test	local04, #8 wz
23338     09 20 66 A0 |  if_e	shl	local02, #9
2333c     02 22 16 F2 | 	cmp	local03, #2 wc
23340     12 24 06 36 |  if_ae	mov	local04, #18
23344     11 24 06 C6 |  if_b	mov	local04, #17
23348     10 15 02 F6 | 	mov	arg02, local02
2334c     12 13 02 F6 | 	mov	arg01, local04
23350     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23354     FD 26 02 F6 | 	mov	local05, result1
23358     07 26 4E F7 | 	zerox	local05, #7 wz
2335c     30 00 90 5D |  if_ne	jmp	#LR__3601
23360                 | ' 		do {
23360                 | LR__3600
23360     0F 13 02 F6 | 	mov	arg01, local01
23364     09 14 C6 F9 | 	decod	arg02, #9
23368     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
2336c     00 FA 0D F2 | 	cmp	result1, #0 wz
23370     01 00 00 5F 
23374     00 1E 06 51 |  if_ne	add	local01, ##512
23378     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3600
2337c     12 25 E2 F8 | 	getbyte	local04, local04, #0
23380     12 24 0E F2 | 	cmp	local04, #18 wz
23384     0C 12 06 A6 |  if_e	mov	arg01, #12
23388     00 14 06 A6 |  if_e	mov	arg02, #0
2338c     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1074
23390                 | LR__3601
23390     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1060
23394                 | ' 	}
23394                 | ' 	deselect();
23394                 | ' 
23394                 | ' 	return count ? RES_ERROR : RES_OK;
23394     00 22 0E F2 | 	cmp	local03, #0 wz
23398     01 26 06 56 |  if_ne	mov	local05, #1
2339c     00 26 06 A6 |  if_e	mov	local05, #0
233a0     13 FB 01 F6 | 	mov	result1, local05
233a4                 | LR__3602
233a4     A7 F0 03 F6 | 	mov	ptra, fp
233a8     B2 00 A0 FD | 	call	#popregs_
233ac                 | _fatfs_cc_disk_read_ret
233ac     2D 00 64 FD | 	ret
233b0                 | 
233b0                 | _fatfs_cc_disk_write
233b0     04 4A 05 F6 | 	mov	COUNT_, #4
233b4     A8 00 A0 FD | 	call	#pushregs_
233b8     0A 1F 02 F6 | 	mov	local01, arg02
233bc     0C 21 02 F6 | 	mov	local02, arg04
233c0     0B 23 02 F6 | 	mov	local03, arg03
233c4     00 12 0E F2 | 	cmp	arg01, #0 wz
233c8     01 FA 05 56 |  if_ne	mov	result1, #1
233cc                 | ' 
233cc                 | ' 	return Stat;
233cc     01 00 00 AF 
233d0     20 E4 05 A1 |  if_e	add	objptr, ##544
233d4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
233d8     01 00 00 AF 
233dc     20 E4 85 A1 |  if_e	sub	objptr, ##544
233e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
233e4     01 FA CD F7 | 	test	result1, #1 wz
233e8     03 FA 05 56 |  if_ne	mov	result1, #3
233ec     D4 00 90 5D |  if_ne	jmp	#LR__3614
233f0     01 00 00 FF 
233f4     21 E4 05 F1 | 	add	objptr, ##545
233f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
233fc     01 00 00 FF 
23400     21 E4 85 F1 | 	sub	objptr, ##545
23404     08 16 CE F7 | 	test	arg03, #8 wz
23408     09 22 66 A0 |  if_e	shl	local03, #9
2340c     01 20 0E F2 | 	cmp	local02, #1 wz
23410     30 00 90 5D |  if_ne	jmp	#LR__3610
23414     18 12 06 F6 | 	mov	arg01, #24
23418     11 15 02 F6 | 	mov	arg02, local03
2341c     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23420     FD 24 02 F6 | 	mov	local04, result1
23424     07 24 4E F7 | 	zerox	local04, #7 wz
23428     84 00 90 5D |  if_ne	jmp	#LR__3613
2342c     0F 13 02 F6 | 	mov	arg01, local01
23430     FE 14 06 F6 | 	mov	arg02, #254
23434     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
23438     00 FA 0D F2 | 	cmp	result1, #0 wz
2343c     00 20 06 56 |  if_ne	mov	local02, #0
23440     6C 00 90 FD | 	jmp	#LR__3613
23444                 | LR__3610
23444     01 00 00 FF 
23448     21 E4 05 F1 | 	add	objptr, ##545
2344c     F2 24 C2 FA | 	rdbyte	local04, objptr
23450     01 00 00 FF 
23454     21 E4 85 F1 | 	sub	objptr, ##545
23458     06 24 CE F7 | 	test	local04, #6 wz
2345c     97 12 06 56 |  if_ne	mov	arg01, #151
23460     10 15 02 56 |  if_ne	mov	arg02, local02
23464     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1074
23468     11 15 02 F6 | 	mov	arg02, local03
2346c     19 12 06 F6 | 	mov	arg01, #25
23470     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23474     FD 24 02 F6 | 	mov	local04, result1
23478     07 24 4E F7 | 	zerox	local04, #7 wz
2347c     30 00 90 5D |  if_ne	jmp	#LR__3612
23480                 | ' 			do {
23480                 | LR__3611
23480     0F 13 02 F6 | 	mov	arg01, local01
23484     FC 14 06 F6 | 	mov	arg02, #252
23488     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
2348c     00 FA 0D F2 | 	cmp	result1, #0 wz
23490     01 00 00 5F 
23494     00 1E 06 51 |  if_ne	add	local01, ##512
23498     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3611
2349c     00 12 06 F6 | 	mov	arg01, #0
234a0     FD 14 06 F6 | 	mov	arg02, #253
234a4     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
234a8     00 FA 0D F2 | 	cmp	result1, #0 wz
234ac     01 20 06 A6 |  if_e	mov	local02, #1
234b0                 | LR__3612
234b0                 | LR__3613
234b0     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1060
234b4                 | ' 				count = 1;
234b4                 | ' 		}
234b4                 | ' 	}
234b4                 | ' 	deselect();
234b4                 | ' 
234b4                 | ' 	return count ? RES_ERROR : RES_OK;
234b4     00 20 0E F2 | 	cmp	local02, #0 wz
234b8     01 24 06 56 |  if_ne	mov	local04, #1
234bc     00 24 06 A6 |  if_e	mov	local04, #0
234c0     12 FB 01 F6 | 	mov	result1, local04
234c4                 | LR__3614
234c4     A7 F0 03 F6 | 	mov	ptra, fp
234c8     B2 00 A0 FD | 	call	#popregs_
234cc                 | _fatfs_cc_disk_write_ret
234cc     2D 00 64 FD | 	ret
234d0                 | 
234d0                 | _fatfs_cc_disk_ioctl
234d0     01 4A 05 F6 | 	mov	COUNT_, #1
234d4     A8 00 A0 FD | 	call	#pushregs_
234d8     30 F0 07 F1 | 	add	ptra, #48
234dc     04 4E 05 F1 | 	add	fp, #4
234e0     A7 12 42 FC | 	wrbyte	arg01, fp
234e4     04 4E 05 F1 | 	add	fp, #4
234e8     A7 14 42 FC | 	wrbyte	arg02, fp
234ec     04 4E 05 F1 | 	add	fp, #4
234f0     A7 16 62 FC | 	wrlong	arg03, fp
234f4     08 4E 85 F1 | 	sub	fp, #8
234f8     A7 12 CA FA | 	rdbyte	arg01, fp wz
234fc     04 4E 85 F1 | 	sub	fp, #4
23500     01 FA 05 56 |  if_ne	mov	result1, #1
23504                 | ' 
23504                 | ' 	return Stat;
23504     01 00 00 AF 
23508     20 E4 05 A1 |  if_e	add	objptr, ##544
2350c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23510     01 00 00 AF 
23514     20 E4 85 A1 |  if_e	sub	objptr, ##544
23518     FD FA E1 F8 | 	getbyte	result1, result1, #0
2351c     01 FA CD F7 | 	test	result1, #1 wz
23520     03 FA 05 56 |  if_ne	mov	result1, #3
23524     E4 01 90 5D |  if_ne	jmp	#LR__3628
23528     10 4E 05 F1 | 	add	fp, #16
2352c     A7 02 68 FC | 	wrlong	#1, fp
23530                 | ' 
23530                 | ' 	res = RES_ERROR;
23530                 | ' 	switch (ctrl) {
23530     08 4E 85 F1 | 	sub	fp, #8
23534     A7 1E C2 FA | 	rdbyte	local01, fp
23538     08 4E 85 F1 | 	sub	fp, #8
2353c     04 1E 26 F3 | 	fle	local01, #4
23540     30 1E 62 FD | 	jmprel	local01
23544                 | LR__3620
23544     10 00 90 FD | 	jmp	#LR__3621
23548     24 00 90 FD | 	jmp	#LR__3622
2354c     A0 01 90 FD | 	jmp	#LR__3626
23550     80 01 90 FD | 	jmp	#LR__3625
23554     98 01 90 FD | 	jmp	#LR__3626
23558                 | LR__3621
23558     B4 79 B0 FD | 	call	#_fatfs_cc_select_1064
2355c     00 FA 0D F2 | 	cmp	result1, #0 wz
23560     10 4E 05 51 |  if_ne	add	fp, #16
23564     A7 00 68 5C |  if_ne	wrlong	#0, fp
23568     10 4E 85 51 |  if_ne	sub	fp, #16
2356c                 | ' 			break;
2356c     8C 01 90 FD | 	jmp	#LR__3627
23570                 | LR__3622
23570     09 12 06 F6 | 	mov	arg01, #9
23574     00 14 06 F6 | 	mov	arg02, #0
23578     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1074
2357c     FD 1E 02 F6 | 	mov	local01, result1
23580     07 1E 4E F7 | 	zerox	local01, #7 wz
23584     74 01 90 5D |  if_ne	jmp	#LR__3627
23588     18 4E 05 F1 | 	add	fp, #24
2358c     A7 12 02 F6 | 	mov	arg01, fp
23590     18 4E 85 F1 | 	sub	fp, #24
23594     10 14 06 F6 | 	mov	arg02, #16
23598     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
2359c     00 FA 0D F2 | 	cmp	result1, #0 wz
235a0     58 01 90 AD |  if_e	jmp	#LR__3627
235a4     18 4E 05 F1 | 	add	fp, #24
235a8     A7 1E C2 FA | 	rdbyte	local01, fp
235ac     18 4E 85 F1 | 	sub	fp, #24
235b0     06 1E 46 F0 | 	shr	local01, #6
235b4     01 1E 0E F2 | 	cmp	local01, #1 wz
235b8     5C 00 90 5D |  if_ne	jmp	#LR__3623
235bc     21 4E 05 F1 | 	add	fp, #33
235c0     A7 1E C2 FA | 	rdbyte	local01, fp
235c4     01 4E 85 F1 | 	sub	fp, #1
235c8     A7 FA C1 FA | 	rdbyte	result1, fp
235cc     FD FA 31 F9 | 	getword	result1, result1, #0
235d0     08 FA 65 F0 | 	shl	result1, #8
235d4     FD 1E 02 F1 | 	add	local01, result1
235d8     01 4E 85 F1 | 	sub	fp, #1
235dc     A7 FA C1 FA | 	rdbyte	result1, fp
235e0     3F FA 05 F5 | 	and	result1, #63
235e4     10 FA 65 F0 | 	shl	result1, #16
235e8     FD 1E 02 F1 | 	add	local01, result1
235ec     01 1E 06 F1 | 	add	local01, #1
235f0     09 4E 05 F1 | 	add	fp, #9
235f4     A7 1E 62 FC | 	wrlong	local01, fp
235f8     1C 4E 85 F1 | 	sub	fp, #28
235fc     A7 1E 02 FB | 	rdlong	local01, fp
23600     1C 4E 05 F1 | 	add	fp, #28
23604     A7 FA 01 FB | 	rdlong	result1, fp
23608     28 4E 85 F1 | 	sub	fp, #40
2360c     0A FA 65 F0 | 	shl	result1, #10
23610     0F FB 61 FC | 	wrlong	result1, local01
23614     AC 00 90 FD | 	jmp	#LR__3624
23618                 | LR__3623
23618     1D 4E 05 F1 | 	add	fp, #29
2361c     A7 1E C2 FA | 	rdbyte	local01, fp
23620     0F 1F 42 F8 | 	getnib	local01, local01, #0
23624     05 4E 05 F1 | 	add	fp, #5
23628     A7 FA C1 FA | 	rdbyte	result1, fp
2362c     80 FA 05 F5 | 	and	result1, #128
23630     07 FA C5 F0 | 	sar	result1, #7
23634     FD 1E 02 F1 | 	add	local01, result1
23638     01 4E 85 F1 | 	sub	fp, #1
2363c     A7 FA C1 FA | 	rdbyte	result1, fp
23640     03 FA 05 F5 | 	and	result1, #3
23644     01 FA 65 F0 | 	shl	result1, #1
23648     FD 1E 02 F1 | 	add	local01, result1
2364c     02 1E 06 F1 | 	add	local01, #2
23650     0D 4E 85 F1 | 	sub	fp, #13
23654     A7 1E 42 FC | 	wrbyte	local01, fp
23658     0C 4E 05 F1 | 	add	fp, #12
2365c     A7 1E C2 FA | 	rdbyte	local01, fp
23660     06 1E 46 F0 | 	shr	local01, #6
23664     01 4E 85 F1 | 	sub	fp, #1
23668     A7 FA C1 FA | 	rdbyte	result1, fp
2366c     FD FA 31 F9 | 	getword	result1, result1, #0
23670     02 FA 65 F0 | 	shl	result1, #2
23674     FD 1E 02 F1 | 	add	local01, result1
23678     01 4E 85 F1 | 	sub	fp, #1
2367c     A7 FA C1 FA | 	rdbyte	result1, fp
23680     03 FA 05 F5 | 	and	result1, #3
23684     FD FA 31 F9 | 	getword	result1, result1, #0
23688     0A FA 65 F0 | 	shl	result1, #10
2368c     FD 1E 02 F1 | 	add	local01, result1
23690     01 1E 06 F1 | 	add	local01, #1
23694     0A 4E 05 F1 | 	add	fp, #10
23698     A7 1E 62 FC | 	wrlong	local01, fp
2369c     1C 4E 85 F1 | 	sub	fp, #28
236a0     A7 1E 02 FB | 	rdlong	local01, fp
236a4     1C 4E 05 F1 | 	add	fp, #28
236a8     A7 FA 01 FB | 	rdlong	result1, fp
236ac     14 4E 85 F1 | 	sub	fp, #20
236b0     A7 16 C2 FA | 	rdbyte	arg03, fp
236b4     14 4E 85 F1 | 	sub	fp, #20
236b8     09 16 86 F1 | 	sub	arg03, #9
236bc     0B FB 61 F0 | 	shl	result1, arg03
236c0     0F FB 61 FC | 	wrlong	result1, local01
236c4                 | LR__3624
236c4     10 4E 05 F1 | 	add	fp, #16
236c8     A7 00 68 FC | 	wrlong	#0, fp
236cc     10 4E 85 F1 | 	sub	fp, #16
236d0                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
236d0                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
236d0                 | ' 					*(LBA_t*)buff = cs << (n - 9);
236d0                 | ' 				}
236d0                 | ' 				res = RES_OK;
236d0                 | ' 			}
236d0                 | ' 			break;
236d0     28 00 90 FD | 	jmp	#LR__3627
236d4                 | LR__3625
236d4     0C 4E 05 F1 | 	add	fp, #12
236d8     A7 1E 02 FB | 	rdlong	local01, fp
236dc     0F 01 69 FC | 	wrlong	#128, local01
236e0     04 4E 05 F1 | 	add	fp, #4
236e4     A7 00 68 FC | 	wrlong	#0, fp
236e8     10 4E 85 F1 | 	sub	fp, #16
236ec                 | ' 			*(DWORD*)buff = 128;
236ec                 | ' 			res = RES_OK;
236ec                 | ' 			break;
236ec     0C 00 90 FD | 	jmp	#LR__3627
236f0                 | LR__3626
236f0     10 4E 05 F1 | 	add	fp, #16
236f4     A7 08 68 FC | 	wrlong	#4, fp
236f8     10 4E 85 F1 | 	sub	fp, #16
236fc                 | LR__3627
236fc     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1060
23700                 | ' 			res = RES_PARERR;
23700                 | ' 	}
23700                 | ' 
23700                 | ' 	deselect();
23700                 | ' 
23700                 | ' 	return res;
23700     10 4E 05 F1 | 	add	fp, #16
23704     A7 FA 01 FB | 	rdlong	result1, fp
23708     10 4E 85 F1 | 	sub	fp, #16
2370c                 | LR__3628
2370c     A7 F0 03 F6 | 	mov	ptra, fp
23710     B2 00 A0 FD | 	call	#popregs_
23714                 | _fatfs_cc_disk_ioctl_ret
23714     2D 00 64 FD | 	ret
23718                 | 
23718                 | _fatfs_cc_disk_setpins
23718     00 12 0E F2 | 	cmp	arg01, #0 wz
2371c     01 FA 65 56 |  if_ne	neg	result1, #1
23720     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
23724     01 00 00 FF 
23728     10 E4 05 F1 | 	add	objptr, ##528
2372c     F2 14 62 FC | 	wrlong	arg02, objptr
23730     04 E4 05 F1 | 	add	objptr, #4
23734     F2 16 62 FC | 	wrlong	arg03, objptr
23738     04 E4 05 F1 | 	add	objptr, #4
2373c     F2 18 62 FC | 	wrlong	arg04, objptr
23740     04 E4 05 F1 | 	add	objptr, #4
23744     F2 1A 62 FC | 	wrlong	arg05, objptr
23748     01 00 00 FF 
2374c     1C E4 85 F1 | 	sub	objptr, ##540
23750     00 FA 05 F6 | 	mov	result1, #0
23754                 | _fatfs_cc_disk_setpins_ret
23754     2D 00 64 FD | 	ret
23758                 | 
23758                 | _fatfs_cc_tchar2uni
23758     09 01 02 FB | 	rdlong	_var01, arg01
2375c     00 03 02 F6 | 	mov	_var02, _var01
23760     01 00 06 F1 | 	add	_var01, #1
23764     00 05 02 F6 | 	mov	_var03, _var01
23768     01 07 C2 FA | 	rdbyte	_var04, _var02
2376c     80 06 CE F7 | 	test	_var04, #128 wz
23770     E8 00 90 AD |  if_e	jmp	#LR__3637
23774     03 09 02 F6 | 	mov	_var05, _var04
23778     E0 08 06 F5 | 	and	_var05, #224
2377c     C0 08 0E F2 | 	cmp	_var05, #192 wz
23780     1F 06 06 A5 |  if_e	and	_var04, #31
23784     01 0A 06 A6 |  if_e	mov	_var06, #1
23788     34 00 90 AD |  if_e	jmp	#LR__3631
2378c     03 09 02 F6 | 	mov	_var05, _var04
23790     F0 08 06 F5 | 	and	_var05, #240
23794     E0 08 0E F2 | 	cmp	_var05, #224 wz
23798     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2379c     02 0A 06 A6 |  if_e	mov	_var06, #2
237a0     1C 00 90 AD |  if_e	jmp	#LR__3630
237a4     03 09 02 F6 | 	mov	_var05, _var04
237a8     F8 08 06 F5 | 	and	_var05, #248
237ac     F0 08 0E F2 | 	cmp	_var05, #240 wz
237b0     07 06 06 A5 |  if_e	and	_var04, #7
237b4     03 0A 06 A6 |  if_e	mov	_var06, #3
237b8                 | ' 			return 0xFFFFFFFF;
237b8     01 FA 65 56 |  if_ne	neg	result1, #1
237bc     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
237c0                 | LR__3630
237c0                 | LR__3631
237c0                 | ' 		}
237c0                 | ' 		do {
237c0                 | LR__3632
237c0     02 0D C2 FA | 	rdbyte	_var07, _var03
237c4     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
237c8     C0 08 06 F5 | 	and	_var05, #192
237cc     80 08 0E F2 | 	cmp	_var05, #128 wz
237d0     01 04 06 F1 | 	add	_var03, #1
237d4     01 FA 65 56 |  if_ne	neg	result1, #1
237d8     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
237dc     06 06 66 F0 | 	shl	_var04, #6
237e0     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
237e4     3F 02 06 F5 | 	and	_var02, #63
237e8     01 07 42 F5 | 	or	_var04, _var02
237ec     F4 0B 6E FB | 	djnz	_var06, #LR__3632
237f0     80 06 16 F2 | 	cmp	_var04, #128 wc
237f4     24 00 90 CD |  if_b	jmp	#LR__3634
237f8     6C 00 00 FF 
237fc     00 06 16 F2 | 	cmp	_var04, ##55296 wc
23800     0C 00 90 CD |  if_b	jmp	#LR__3633
23804     70 00 00 FF 
23808     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2380c     0C 00 90 CD |  if_b	jmp	#LR__3634
23810                 | LR__3633
23810     80 08 00 FF 
23814     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
23818     08 00 90 CD |  if_b	jmp	#LR__3635
2381c                 | LR__3634
2381c     01 FA 65 F6 | 	neg	result1, #1
23820     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
23824                 | LR__3635
23824     80 00 00 FF 
23828     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2382c     2C 00 90 CD |  if_b	jmp	#LR__3636
23830     03 03 02 F6 | 	mov	_var02, _var04
23834     80 00 00 FF 
23838     00 02 86 F1 | 	sub	_var02, ##65536
2383c     06 02 66 F0 | 	shl	_var02, #6
23840     80 FF 01 FF 
23844     00 02 06 F5 | 	and	_var02, ##67043328
23848     6E 00 6C FF 
2384c     00 08 06 F6 | 	mov	_var05, ##-671032320
23850     01 09 42 F5 | 	or	_var05, _var02
23854     09 06 46 F7 | 	zerox	_var04, #9
23858     04 07 42 F5 | 	or	_var04, _var05
2385c                 | LR__3636
2385c                 | LR__3637
2385c     09 05 62 FC | 	wrlong	_var03, arg01
23860                 | ' 	}
23860                 | ' #line 811 "ff.c"
23860                 | ' 	*str = p;
23860                 | ' 	return uc;
23860     03 FB 01 F6 | 	mov	result1, _var04
23864                 | _fatfs_cc_tchar2uni_ret
23864     2D 00 64 FD | 	ret
23868                 | 
23868                 | _fatfs_cc_put_utf
23868     80 12 16 F2 | 	cmp	arg01, #128 wc
2386c     18 00 90 3D |  if_ae	jmp	#LR__3640
23870     01 16 16 F2 | 	cmp	arg03, #1 wc
23874     00 FA 05 C6 |  if_b	mov	result1, #0
23878     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2387c     0A 13 42 FC | 	wrbyte	arg01, arg02
23880                 | ' 		*buf = (TCHAR)chr;
23880                 | ' 		return 1;
23880     01 FA 05 F6 | 	mov	result1, #1
23884     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23888                 | LR__3640
23888     04 00 00 FF 
2388c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
23890     40 00 90 3D |  if_ae	jmp	#LR__3641
23894     02 16 16 F2 | 	cmp	arg03, #2 wc
23898     00 FA 05 C6 |  if_b	mov	result1, #0
2389c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
238a0     09 FB 01 F6 | 	mov	result1, arg01
238a4     06 FA 45 F0 | 	shr	result1, #6
238a8     1F FA 05 F5 | 	and	result1, #31
238ac     C0 16 06 F6 | 	mov	arg03, #192
238b0     FD 16 42 F5 | 	or	arg03, result1
238b4     0A 17 42 FC | 	wrbyte	arg03, arg02
238b8     01 14 06 F1 | 	add	arg02, #1
238bc     3F 12 06 F5 | 	and	arg01, #63
238c0     80 FA 05 F6 | 	mov	result1, #128
238c4     09 FB 41 F5 | 	or	result1, arg01
238c8     0A FB 41 FC | 	wrbyte	result1, arg02
238cc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
238cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
238cc                 | ' 		return 2;
238cc     02 FA 05 F6 | 	mov	result1, #2
238d0     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
238d4                 | LR__3641
238d4     80 00 00 FF 
238d8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
238dc     70 00 90 3D |  if_ae	jmp	#LR__3644
238e0     03 16 16 F2 | 	cmp	arg03, #3 wc
238e4     18 00 90 CD |  if_b	jmp	#LR__3642
238e8     6C 00 00 FF 
238ec     00 12 16 F2 | 	cmp	arg01, ##55296 wc
238f0     14 00 90 CD |  if_b	jmp	#LR__3643
238f4     70 00 00 FF 
238f8     00 12 16 F2 | 	cmp	arg01, ##57344 wc
238fc     08 00 90 3D |  if_ae	jmp	#LR__3643
23900                 | LR__3642
23900     00 FA 05 F6 | 	mov	result1, #0
23904     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23908                 | LR__3643
23908     09 FB 59 F8 | 	getnib	result1, arg01, #3
2390c     E0 16 06 F6 | 	mov	arg03, #224
23910     FD 16 42 F5 | 	or	arg03, result1
23914     0A 17 42 FC | 	wrbyte	arg03, arg02
23918     01 14 06 F1 | 	add	arg02, #1
2391c     09 FB 01 F6 | 	mov	result1, arg01
23920     06 FA 45 F0 | 	shr	result1, #6
23924     3F FA 05 F5 | 	and	result1, #63
23928     80 16 06 F6 | 	mov	arg03, #128
2392c     FD 16 42 F5 | 	or	arg03, result1
23930     0A 17 42 FC | 	wrbyte	arg03, arg02
23934     01 14 06 F1 | 	add	arg02, #1
23938     3F 12 06 F5 | 	and	arg01, #63
2393c     80 FA 05 F6 | 	mov	result1, #128
23940     09 FB 41 F5 | 	or	result1, arg01
23944     0A FB 41 FC | 	wrbyte	result1, arg02
23948                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
23948                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
23948                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
23948                 | ' 		return 3;
23948     03 FA 05 F6 | 	mov	result1, #3
2394c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23950                 | LR__3644
23950     04 16 16 F2 | 	cmp	arg03, #4 wc
23954     00 FA 05 C6 |  if_b	mov	result1, #0
23958     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2395c     09 01 02 F6 | 	mov	_var01, arg01
23960     E0 01 06 F4 | 	bitl	_var01, #480
23964     00 00 6C FF 
23968     00 00 86 F1 | 	sub	_var01, ##-671088640
2396c     06 00 46 F0 | 	shr	_var01, #6
23970     09 13 32 F9 | 	getword	arg01, arg01, #0
23974     6E 00 00 FF 
23978     00 12 86 F1 | 	sub	arg01, ##56320
2397c     00 08 00 FF 
23980     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
23984     02 00 00 CF 
23988     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2398c     00 FA 05 36 |  if_ae	mov	result1, #0
23990     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
23994     09 01 42 F5 | 	or	_var01, arg01
23998     80 00 00 FF 
2399c     00 00 06 F1 | 	add	_var01, ##65536
239a0     00 FB 01 F6 | 	mov	result1, _var01
239a4     12 FA 45 F0 | 	shr	result1, #18
239a8     07 FA 05 F5 | 	and	result1, #7
239ac     F0 16 06 F6 | 	mov	arg03, #240
239b0     FD 16 42 F5 | 	or	arg03, result1
239b4     0A 17 42 FC | 	wrbyte	arg03, arg02
239b8     01 14 06 F1 | 	add	arg02, #1
239bc     00 FB 01 F6 | 	mov	result1, _var01
239c0     0C FA 45 F0 | 	shr	result1, #12
239c4     3F FA 05 F5 | 	and	result1, #63
239c8     80 16 06 F6 | 	mov	arg03, #128
239cc     FD 16 42 F5 | 	or	arg03, result1
239d0     0A 17 42 FC | 	wrbyte	arg03, arg02
239d4     01 14 06 F1 | 	add	arg02, #1
239d8     00 FB 01 F6 | 	mov	result1, _var01
239dc     06 FA 45 F0 | 	shr	result1, #6
239e0     3F FA 05 F5 | 	and	result1, #63
239e4     80 16 06 F6 | 	mov	arg03, #128
239e8     FD 16 42 F5 | 	or	arg03, result1
239ec     0A 17 42 FC | 	wrbyte	arg03, arg02
239f0     01 14 06 F1 | 	add	arg02, #1
239f4     3F 00 06 F5 | 	and	_var01, #63
239f8     80 FA 05 F6 | 	mov	result1, #128
239fc     00 FB 41 F5 | 	or	result1, _var01
23a00     0A FB 41 FC | 	wrbyte	result1, arg02
23a04                 | ' 	chr = (hc | chr) + 0x10000;
23a04                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
23a04                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
23a04                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
23a04                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
23a04                 | ' 	return 4;
23a04     04 FA 05 F6 | 	mov	result1, #4
23a08                 | _fatfs_cc_put_utf_ret
23a08     2D 00 64 FD | 	ret
23a0c                 | 
23a0c                 | _fatfs_cc_sync_window
23a0c     02 4A 05 F6 | 	mov	COUNT_, #2
23a10     A8 00 A0 FD | 	call	#pushregs_
23a14     09 1F 02 F6 | 	mov	local01, arg01
23a18     00 20 06 F6 | 	mov	local02, #0
23a1c     03 1E 06 F1 | 	add	local01, #3
23a20     0F FB C9 FA | 	rdbyte	result1, local01 wz
23a24     03 1E 86 F1 | 	sub	local01, #3
23a28     A4 00 90 AD |  if_e	jmp	#LR__3652
23a2c     01 1E 06 F1 | 	add	local01, #1
23a30     0F 13 C2 FA | 	rdbyte	arg01, local01
23a34     33 1E 06 F1 | 	add	local01, #51
23a38     0F 15 02 F6 | 	mov	arg02, local01
23a3c     04 1E 86 F1 | 	sub	local01, #4
23a40     0F 17 02 FB | 	rdlong	arg03, local01
23a44     30 1E 86 F1 | 	sub	local01, #48
23a48     01 18 06 F6 | 	mov	arg04, #1
23a4c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
23a50     00 FA 0D F2 | 	cmp	result1, #0 wz
23a54     74 00 90 5D |  if_ne	jmp	#LR__3650
23a58     03 1E 06 F1 | 	add	local01, #3
23a5c     0F 01 48 FC | 	wrbyte	#0, local01
23a60     2D 1E 06 F1 | 	add	local01, #45
23a64     0F FB 01 FB | 	rdlong	result1, local01
23a68     0C 1E 86 F1 | 	sub	local01, #12
23a6c     0F 19 02 FB | 	rdlong	arg04, local01
23a70     0C FB 81 F1 | 	sub	result1, arg04
23a74     08 1E 86 F1 | 	sub	local01, #8
23a78     0F 19 02 FB | 	rdlong	arg04, local01
23a7c     1C 1E 86 F1 | 	sub	local01, #28
23a80     0C FB 11 F2 | 	cmp	result1, arg04 wc
23a84     48 00 90 3D |  if_ae	jmp	#LR__3651
23a88     02 1E 06 F1 | 	add	local01, #2
23a8c     0F 19 C2 FA | 	rdbyte	arg04, local01
23a90     02 1E 86 F1 | 	sub	local01, #2
23a94     02 18 0E F2 | 	cmp	arg04, #2 wz
23a98     34 00 90 5D |  if_ne	jmp	#LR__3651
23a9c     01 1E 06 F1 | 	add	local01, #1
23aa0     0F 13 C2 FA | 	rdbyte	arg01, local01
23aa4     33 1E 06 F1 | 	add	local01, #51
23aa8     0F 15 02 F6 | 	mov	arg02, local01
23aac     04 1E 86 F1 | 	sub	local01, #4
23ab0     0F 17 02 FB | 	rdlong	arg03, local01
23ab4     14 1E 86 F1 | 	sub	local01, #20
23ab8     0F 1F 02 FB | 	rdlong	local01, local01
23abc     0F 17 02 F1 | 	add	arg03, local01
23ac0     01 18 06 F6 | 	mov	arg04, #1
23ac4     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
23ac8     04 00 90 FD | 	jmp	#LR__3651
23acc                 | LR__3650
23acc     01 20 06 F6 | 	mov	local02, #1
23ad0                 | LR__3651
23ad0                 | LR__3652
23ad0                 | ' 			res = FR_DISK_ERR;
23ad0                 | ' 		}
23ad0                 | ' 	}
23ad0                 | ' 	return res;
23ad0     10 FB 01 F6 | 	mov	result1, local02
23ad4     A7 F0 03 F6 | 	mov	ptra, fp
23ad8     B2 00 A0 FD | 	call	#popregs_
23adc                 | _fatfs_cc_sync_window_ret
23adc     2D 00 64 FD | 	ret
23ae0                 | 
23ae0                 | _fatfs_cc_move_window
23ae0     03 4A 05 F6 | 	mov	COUNT_, #3
23ae4     A8 00 A0 FD | 	call	#pushregs_
23ae8     09 1F 02 F6 | 	mov	local01, arg01
23aec     0A 21 02 F6 | 	mov	local02, arg02
23af0     00 22 06 F6 | 	mov	local03, #0
23af4     30 1E 06 F1 | 	add	local01, #48
23af8     0F 19 02 FB | 	rdlong	arg04, local01
23afc     30 1E 86 F1 | 	sub	local01, #48
23b00     0C 21 0A F2 | 	cmp	local02, arg04 wz
23b04     40 00 90 AD |  if_e	jmp	#LR__3661
23b08     0F 13 02 F6 | 	mov	arg01, local01
23b0c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
23b10     FD 22 0A F6 | 	mov	local03, result1 wz
23b14     30 00 90 5D |  if_ne	jmp	#LR__3660
23b18     01 1E 06 F1 | 	add	local01, #1
23b1c     0F 13 C2 FA | 	rdbyte	arg01, local01
23b20     33 1E 06 F1 | 	add	local01, #51
23b24     0F 15 02 F6 | 	mov	arg02, local01
23b28     10 17 02 F6 | 	mov	arg03, local02
23b2c     01 18 06 F6 | 	mov	arg04, #1
23b30     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
23b34     00 FA 0D F2 | 	cmp	result1, #0 wz
23b38     01 20 66 56 |  if_ne	neg	local02, #1
23b3c     01 22 06 56 |  if_ne	mov	local03, #1
23b40     04 1E 86 F1 | 	sub	local01, #4
23b44     0F 21 62 FC | 	wrlong	local02, local01
23b48                 | LR__3660
23b48                 | LR__3661
23b48                 | ' 				sect = (LBA_t)0 - 1;
23b48                 | ' 				res = FR_DISK_ERR;
23b48                 | ' 			}
23b48                 | ' 			fs->winsect = sect;
23b48                 | ' 		}
23b48                 | ' 	}
23b48                 | ' 	return res;
23b48     11 FB 01 F6 | 	mov	result1, local03
23b4c     A7 F0 03 F6 | 	mov	ptra, fp
23b50     B2 00 A0 FD | 	call	#popregs_
23b54                 | _fatfs_cc_move_window_ret
23b54     2D 00 64 FD | 	ret
23b58                 | 
23b58                 | _fatfs_cc_sync_fs
23b58     02 4A 05 F6 | 	mov	COUNT_, #2
23b5c     A8 00 A0 FD | 	call	#pushregs_
23b60     09 1F 02 F6 | 	mov	local01, arg01
23b64     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
23b68     FD 20 0A F6 | 	mov	local02, result1 wz
23b6c     D8 00 90 5D |  if_ne	jmp	#LR__3671
23b70     0F 19 C2 FA | 	rdbyte	arg04, local01
23b74     03 18 0E F2 | 	cmp	arg04, #3 wz
23b78     04 1E 06 A1 |  if_e	add	local01, #4
23b7c     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
23b80     04 1E 86 A1 |  if_e	sub	local01, #4
23b84     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
23b88     A0 00 90 5D |  if_ne	jmp	#LR__3670
23b8c     34 1E 06 F1 | 	add	local01, #52
23b90     0F 13 02 F6 | 	mov	arg01, local01
23b94     00 14 06 F6 | 	mov	arg02, #0
23b98     09 16 C6 F9 | 	decod	arg03, #9
23b9c     98 00 A0 FD | 	call	#\builtin_bytefill_
23ba0     0F 13 02 F6 | 	mov	arg01, local01
23ba4     FE 13 06 F1 | 	add	arg01, #510
23ba8     55 00 80 FF 
23bac     09 AB 58 FC | 	wrword	##43605, arg01
23bb0     A9 B0 A0 FF 
23bb4     0F A5 68 FC | 	wrlong	##1096897106, local01
23bb8     0F 13 02 F6 | 	mov	arg01, local01
23bbc     E4 13 06 F1 | 	add	arg01, #484
23bc0     B9 A0 B0 FF 
23bc4     09 E5 68 FC | 	wrlong	##1631679090, arg01
23bc8     0F 13 02 F6 | 	mov	arg01, local01
23bcc     E8 13 06 F1 | 	add	arg01, #488
23bd0     20 1E 86 F1 | 	sub	local01, #32
23bd4     0F 15 02 FB | 	rdlong	arg02, local01
23bd8     09 15 62 FC | 	wrlong	arg02, arg01
23bdc     20 1E 06 F1 | 	add	local01, #32
23be0     0F 13 02 F6 | 	mov	arg01, local01
23be4     EC 13 06 F1 | 	add	arg01, #492
23be8     24 1E 86 F1 | 	sub	local01, #36
23bec     0F 15 02 FB | 	rdlong	arg02, local01
23bf0     09 15 62 FC | 	wrlong	arg02, arg01
23bf4     10 1E 06 F1 | 	add	local01, #16
23bf8     0F 17 02 FB | 	rdlong	arg03, local01
23bfc     01 16 06 F1 | 	add	arg03, #1
23c00     10 1E 06 F1 | 	add	local01, #16
23c04     0F 17 62 FC | 	wrlong	arg03, local01
23c08     2F 1E 86 F1 | 	sub	local01, #47
23c0c     0F 13 C2 FA | 	rdbyte	arg01, local01
23c10     33 1E 06 F1 | 	add	local01, #51
23c14     0F 15 02 F6 | 	mov	arg02, local01
23c18     01 18 06 F6 | 	mov	arg04, #1
23c1c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
23c20     30 1E 86 F1 | 	sub	local01, #48
23c24     0F 01 48 FC | 	wrbyte	#0, local01
23c28     04 1E 86 F1 | 	sub	local01, #4
23c2c                 | LR__3670
23c2c     01 1E 06 F1 | 	add	local01, #1
23c30     0F 13 C2 FA | 	rdbyte	arg01, local01
23c34     00 14 06 F6 | 	mov	arg02, #0
23c38     00 16 06 F6 | 	mov	arg03, #0
23c3c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
23c40     00 FA 0D F2 | 	cmp	result1, #0 wz
23c44     01 20 06 56 |  if_ne	mov	local02, #1
23c48                 | LR__3671
23c48                 | ' 	}
23c48                 | ' 
23c48                 | ' 	return res;
23c48     10 FB 01 F6 | 	mov	result1, local02
23c4c     A7 F0 03 F6 | 	mov	ptra, fp
23c50     B2 00 A0 FD | 	call	#popregs_
23c54                 | _fatfs_cc_sync_fs_ret
23c54     2D 00 64 FD | 	ret
23c58                 | 
23c58                 | _fatfs_cc_clst2sect
23c58     02 14 86 F1 | 	sub	arg02, #2
23c5c     18 12 06 F1 | 	add	arg01, #24
23c60     09 01 02 FB | 	rdlong	_var01, arg01
23c64     18 12 86 F1 | 	sub	arg01, #24
23c68     02 00 86 F1 | 	sub	_var01, #2
23c6c     00 15 12 F2 | 	cmp	arg02, _var01 wc
23c70     00 FA 05 36 |  if_ae	mov	result1, #0
23c74     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
23c78     0A 12 06 F1 | 	add	arg01, #10
23c7c     09 01 E2 FA | 	rdword	_var01, arg01
23c80     0A 01 02 FD | 	qmul	_var01, arg02
23c84                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
23c84     22 12 06 F1 | 	add	arg01, #34
23c88     09 FB 01 FB | 	rdlong	result1, arg01
23c8c     18 00 62 FD | 	getqx	_var01
23c90     00 FB 01 F1 | 	add	result1, _var01
23c94                 | _fatfs_cc_clst2sect_ret
23c94     2D 00 64 FD | 	ret
23c98                 | 
23c98                 | _fatfs_cc_get_fat
23c98     07 4A 05 F6 | 	mov	COUNT_, #7
23c9c     A8 00 A0 FD | 	call	#pushregs_
23ca0     0A 1F 02 F6 | 	mov	local01, arg02
23ca4     09 21 02 FB | 	rdlong	local02, arg01
23ca8     02 1E 16 F2 | 	cmp	local01, #2 wc
23cac     14 00 90 CD |  if_b	jmp	#LR__3680
23cb0     18 20 06 F1 | 	add	local02, #24
23cb4     10 23 02 FB | 	rdlong	local03, local02
23cb8     18 20 86 F1 | 	sub	local02, #24
23cbc     11 1F 12 F2 | 	cmp	local01, local03 wc
23cc0     08 00 90 CD |  if_b	jmp	#LR__3681
23cc4                 | LR__3680
23cc4     01 24 06 F6 | 	mov	local04, #1
23cc8     60 01 90 FD | 	jmp	#LR__3688
23ccc                 | LR__3681
23ccc     01 24 66 F6 | 	neg	local04, #1
23cd0                 | ' 		val = 0xFFFFFFFF;
23cd0                 | ' 
23cd0                 | ' 		switch (fs->fs_type) {
23cd0     10 27 C2 FA | 	rdbyte	local05, local02
23cd4     01 26 86 F1 | 	sub	local05, #1
23cd8     03 26 26 F3 | 	fle	local05, #3
23cdc     30 26 62 FD | 	jmprel	local05
23ce0                 | LR__3682
23ce0     0C 00 90 FD | 	jmp	#LR__3683
23ce4     B8 00 90 FD | 	jmp	#LR__3684
23ce8     F8 00 90 FD | 	jmp	#LR__3685
23cec     38 01 90 FD | 	jmp	#LR__3686
23cf0                 | LR__3683
23cf0     0F 27 02 F6 | 	mov	local05, local01
23cf4     0F 13 02 F6 | 	mov	arg01, local01
23cf8     01 12 46 F0 | 	shr	arg01, #1
23cfc     09 27 02 F1 | 	add	local05, arg01
23d00     10 13 02 F6 | 	mov	arg01, local02
23d04     13 29 02 F6 | 	mov	local06, local05
23d08     09 28 46 F0 | 	shr	local06, #9
23d0c     24 20 06 F1 | 	add	local02, #36
23d10     10 15 02 FB | 	rdlong	arg02, local02
23d14     24 20 86 F1 | 	sub	local02, #36
23d18     14 15 02 F1 | 	add	arg02, local06
23d1c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
23d20     00 FA 0D F2 | 	cmp	result1, #0 wz
23d24     04 01 90 5D |  if_ne	jmp	#LR__3687
23d28     13 29 02 F6 | 	mov	local06, local05
23d2c     FF 29 06 F5 | 	and	local06, #511
23d30     34 20 06 F1 | 	add	local02, #52
23d34     10 29 02 F1 | 	add	local06, local02
23d38     14 2B C2 FA | 	rdbyte	local07, local06
23d3c     34 20 86 F1 | 	sub	local02, #52
23d40     10 13 02 F6 | 	mov	arg01, local02
23d44     01 26 06 F1 | 	add	local05, #1
23d48     13 29 02 F6 | 	mov	local06, local05
23d4c     09 28 46 F0 | 	shr	local06, #9
23d50     24 20 06 F1 | 	add	local02, #36
23d54     10 15 02 FB | 	rdlong	arg02, local02
23d58     24 20 86 F1 | 	sub	local02, #36
23d5c     14 15 02 F1 | 	add	arg02, local06
23d60     7C FD BF FD | 	call	#_fatfs_cc_move_window
23d64     00 FA 0D F2 | 	cmp	result1, #0 wz
23d68     C0 00 90 5D |  if_ne	jmp	#LR__3687
23d6c     FF 27 06 F5 | 	and	local05, #511
23d70     34 20 06 F1 | 	add	local02, #52
23d74     10 27 02 F1 | 	add	local05, local02
23d78     13 29 C2 FA | 	rdbyte	local06, local05
23d7c     08 28 66 F0 | 	shl	local06, #8
23d80     14 2B 42 F5 | 	or	local07, local06
23d84     01 1E CE F7 | 	test	local01, #1 wz
23d88     04 2A 46 50 |  if_ne	shr	local07, #4
23d8c     15 23 02 56 |  if_ne	mov	local03, local07
23d90     0B 2A 46 A7 |  if_e	zerox	local07, #11
23d94     15 23 02 A6 |  if_e	mov	local03, local07
23d98     11 25 02 F6 | 	mov	local04, local03
23d9c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
23d9c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
23d9c                 | ' 			break;
23d9c     8C 00 90 FD | 	jmp	#LR__3687
23da0                 | LR__3684
23da0     10 13 02 F6 | 	mov	arg01, local02
23da4     0F 29 02 F6 | 	mov	local06, local01
23da8     08 28 46 F0 | 	shr	local06, #8
23dac     24 20 06 F1 | 	add	local02, #36
23db0     10 15 02 FB | 	rdlong	arg02, local02
23db4     24 20 86 F1 | 	sub	local02, #36
23db8     14 15 02 F1 | 	add	arg02, local06
23dbc     20 FD BF FD | 	call	#_fatfs_cc_move_window
23dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
23dc4     64 00 90 5D |  if_ne	jmp	#LR__3687
23dc8     34 20 06 F1 | 	add	local02, #52
23dcc     01 1E 66 F0 | 	shl	local01, #1
23dd0     FF 1F 06 F5 | 	and	local01, #511
23dd4     0F 21 02 F1 | 	add	local02, local01
23dd8                 | ' {
23dd8                 | ' 
23dd8                 | ' 	return *((WORD*)ptr);
23dd8     10 FB E1 FA | 	rdword	result1, local02
23ddc     FD 24 32 F9 | 	getword	local04, result1, #0
23de0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
23de0                 | ' 			break;
23de0     48 00 90 FD | 	jmp	#LR__3687
23de4                 | LR__3685
23de4     10 13 02 F6 | 	mov	arg01, local02
23de8     0F 29 02 F6 | 	mov	local06, local01
23dec     07 28 46 F0 | 	shr	local06, #7
23df0     24 20 06 F1 | 	add	local02, #36
23df4     10 15 02 FB | 	rdlong	arg02, local02
23df8     24 20 86 F1 | 	sub	local02, #36
23dfc     14 15 02 F1 | 	add	arg02, local06
23e00     DC FC BF FD | 	call	#_fatfs_cc_move_window
23e04     00 FA 0D F2 | 	cmp	result1, #0 wz
23e08     20 00 90 5D |  if_ne	jmp	#LR__3687
23e0c     34 20 06 F1 | 	add	local02, #52
23e10     02 1E 66 F0 | 	shl	local01, #2
23e14     FF 1F 06 F5 | 	and	local01, #511
23e18     0F 21 02 F1 | 	add	local02, local01
23e1c                 | ' {
23e1c                 | ' 
23e1c                 | ' 	return *((DWORD*)ptr);
23e1c     10 25 02 FB | 	rdlong	local04, local02
23e20     7C 24 06 F4 | 	bitl	local04, #124
23e24                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
23e24                 | ' 			break;
23e24     04 00 90 FD | 	jmp	#LR__3687
23e28                 | LR__3686
23e28     01 24 06 F6 | 	mov	local04, #1
23e2c                 | LR__3687
23e2c                 | LR__3688
23e2c                 | ' 			val = 1;
23e2c                 | ' 		}
23e2c                 | ' 	}
23e2c                 | ' 
23e2c                 | ' 	return val;
23e2c     12 FB 01 F6 | 	mov	result1, local04
23e30     A7 F0 03 F6 | 	mov	ptra, fp
23e34     B2 00 A0 FD | 	call	#popregs_
23e38                 | _fatfs_cc_get_fat_ret
23e38     2D 00 64 FD | 	ret
23e3c                 | 
23e3c                 | _fatfs_cc_put_fat
23e3c     08 4A 05 F6 | 	mov	COUNT_, #8
23e40     A8 00 A0 FD | 	call	#pushregs_
23e44     09 1F 02 F6 | 	mov	local01, arg01
23e48     0A 21 02 F6 | 	mov	local02, arg02
23e4c     0B 23 02 F6 | 	mov	local03, arg03
23e50     02 24 06 F6 | 	mov	local04, #2
23e54     02 20 16 F2 | 	cmp	local02, #2 wc
23e58     E0 01 90 CD |  if_b	jmp	#LR__3697
23e5c     18 1E 06 F1 | 	add	local01, #24
23e60     0F 27 02 FB | 	rdlong	local05, local01
23e64     18 1E 86 F1 | 	sub	local01, #24
23e68     13 21 12 F2 | 	cmp	local02, local05 wc
23e6c     CC 01 90 3D |  if_ae	jmp	#LR__3697
23e70                 | ' 		switch (fs->fs_type) {
23e70     0F 29 C2 FA | 	rdbyte	local06, local01
23e74     01 28 86 F1 | 	sub	local06, #1
23e78     03 28 26 F3 | 	fle	local06, #3
23e7c     30 28 62 FD | 	jmprel	local06
23e80                 | LR__3690
23e80     0C 00 90 FD | 	jmp	#LR__3691
23e84     F8 00 90 FD | 	jmp	#LR__3694
23e88     40 01 90 FD | 	jmp	#LR__3695
23e8c     AC 01 90 FD | 	jmp	#LR__3696
23e90                 | LR__3691
23e90     10 2B 02 F6 | 	mov	local07, local02
23e94     10 27 02 F6 | 	mov	local05, local02
23e98     01 26 46 F0 | 	shr	local05, #1
23e9c     13 2B 02 F1 | 	add	local07, local05
23ea0     0F 13 02 F6 | 	mov	arg01, local01
23ea4     15 29 02 F6 | 	mov	local06, local07
23ea8     09 28 46 F0 | 	shr	local06, #9
23eac     24 1E 06 F1 | 	add	local01, #36
23eb0     0F 15 02 FB | 	rdlong	arg02, local01
23eb4     24 1E 86 F1 | 	sub	local01, #36
23eb8     14 15 02 F1 | 	add	arg02, local06
23ebc     20 FC BF FD | 	call	#_fatfs_cc_move_window
23ec0     FD 24 0A F6 | 	mov	local04, result1 wz
23ec4     74 01 90 5D |  if_ne	jmp	#LR__3696
23ec8     34 1E 06 F1 | 	add	local01, #52
23ecc     0F 2D 02 F6 | 	mov	local08, local01
23ed0     15 27 02 F6 | 	mov	local05, local07
23ed4     FF 27 06 F5 | 	and	local05, #511
23ed8     13 2D 02 F1 | 	add	local08, local05
23edc     01 20 CE F7 | 	test	local02, #1 wz
23ee0     34 1E 86 F1 | 	sub	local01, #52
23ee4     01 2A 06 F1 | 	add	local07, #1
23ee8     18 00 90 AD |  if_e	jmp	#LR__3692
23eec     16 27 C2 FA | 	rdbyte	local05, local08
23ef0     13 27 42 F8 | 	getnib	local05, local05, #0
23ef4     11 29 E2 F8 | 	getbyte	local06, local03, #0
23ef8     04 28 66 F0 | 	shl	local06, #4
23efc     14 27 42 F5 | 	or	local05, local06
23f00     04 00 90 FD | 	jmp	#LR__3693
23f04                 | LR__3692
23f04     11 27 02 F6 | 	mov	local05, local03
23f08                 | LR__3693
23f08     16 27 42 FC | 	wrbyte	local05, local08
23f0c     03 1E 06 F1 | 	add	local01, #3
23f10     0F 03 48 FC | 	wrbyte	#1, local01
23f14     03 1E 86 F1 | 	sub	local01, #3
23f18     0F 13 02 F6 | 	mov	arg01, local01
23f1c     15 2D 02 F6 | 	mov	local08, local07
23f20     09 2C 46 F0 | 	shr	local08, #9
23f24     24 1E 06 F1 | 	add	local01, #36
23f28     0F 15 02 FB | 	rdlong	arg02, local01
23f2c     24 1E 86 F1 | 	sub	local01, #36
23f30     16 15 02 F1 | 	add	arg02, local08
23f34     A8 FB BF FD | 	call	#_fatfs_cc_move_window
23f38     FD 24 0A F6 | 	mov	local04, result1 wz
23f3c     FC 00 90 5D |  if_ne	jmp	#LR__3696
23f40     34 1E 06 F1 | 	add	local01, #52
23f44     0F 2D 02 F6 | 	mov	local08, local01
23f48     FF 2B 06 F5 | 	and	local07, #511
23f4c     15 2D 02 F1 | 	add	local08, local07
23f50     01 20 CE F7 | 	test	local02, #1 wz
23f54     04 22 46 50 |  if_ne	shr	local03, #4
23f58     11 27 02 56 |  if_ne	mov	local05, local03
23f5c     16 27 C2 AA |  if_e	rdbyte	local05, local08
23f60     F0 26 06 A5 |  if_e	and	local05, #240
23f64     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
23f68     11 23 42 A8 |  if_e	getnib	local03, local03, #0
23f6c     11 27 42 A5 |  if_e	or	local05, local03
23f70     16 27 42 FC | 	wrbyte	local05, local08
23f74     31 1E 86 F1 | 	sub	local01, #49
23f78     0F 03 48 FC | 	wrbyte	#1, local01
23f7c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
23f7c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
23f7c                 | ' 			fs->wflag = 1;
23f7c                 | ' 			break;
23f7c     BC 00 90 FD | 	jmp	#LR__3696
23f80                 | LR__3694
23f80     0F 13 02 F6 | 	mov	arg01, local01
23f84     10 2D 02 F6 | 	mov	local08, local02
23f88     08 2C 46 F0 | 	shr	local08, #8
23f8c     24 1E 06 F1 | 	add	local01, #36
23f90     0F 15 02 FB | 	rdlong	arg02, local01
23f94     24 1E 86 F1 | 	sub	local01, #36
23f98     16 15 02 F1 | 	add	arg02, local08
23f9c     40 FB BF FD | 	call	#_fatfs_cc_move_window
23fa0     FD 24 0A F6 | 	mov	local04, result1 wz
23fa4     94 00 90 5D |  if_ne	jmp	#LR__3696
23fa8     34 1E 06 F1 | 	add	local01, #52
23fac     0F 13 02 F6 | 	mov	arg01, local01
23fb0     01 20 66 F0 | 	shl	local02, #1
23fb4     FF 21 06 F5 | 	and	local02, #511
23fb8     10 13 02 F1 | 	add	arg01, local02
23fbc     09 23 52 FC | 	wrword	local03, arg01
23fc0     31 1E 86 F1 | 	sub	local01, #49
23fc4     0F 03 48 FC | 	wrbyte	#1, local01
23fc8                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
23fc8                 | ' 			fs->wflag = 1;
23fc8                 | ' 			break;
23fc8     70 00 90 FD | 	jmp	#LR__3696
23fcc                 | LR__3695
23fcc     0F 13 02 F6 | 	mov	arg01, local01
23fd0     10 2D 02 F6 | 	mov	local08, local02
23fd4     07 2C 46 F0 | 	shr	local08, #7
23fd8     24 1E 06 F1 | 	add	local01, #36
23fdc     0F 15 02 FB | 	rdlong	arg02, local01
23fe0     24 1E 86 F1 | 	sub	local01, #36
23fe4     16 15 02 F1 | 	add	arg02, local08
23fe8     F4 FA BF FD | 	call	#_fatfs_cc_move_window
23fec     FD 24 0A F6 | 	mov	local04, result1 wz
23ff0     48 00 90 5D |  if_ne	jmp	#LR__3696
23ff4     7C 22 06 F4 | 	bitl	local03, #124
23ff8     34 1E 06 F1 | 	add	local01, #52
23ffc     10 2D 02 F6 | 	mov	local08, local02
24000     02 2C 66 F0 | 	shl	local08, #2
24004     FF 2D 06 F5 | 	and	local08, #511
24008     0F 13 02 F6 | 	mov	arg01, local01
2400c     16 13 02 F1 | 	add	arg01, local08
24010                 | ' {
24010                 | ' 
24010                 | ' 	return *((DWORD*)ptr);
24010     09 2D 02 FB | 	rdlong	local08, arg01
24014     00 00 78 FF 
24018     00 2C 06 F5 | 	and	local08, ##-268435456
2401c     16 23 42 F5 | 	or	local03, local08
24020     0F 13 02 F6 | 	mov	arg01, local01
24024     02 20 66 F0 | 	shl	local02, #2
24028     FF 21 06 F5 | 	and	local02, #511
2402c     10 13 02 F1 | 	add	arg01, local02
24030     09 23 62 FC | 	wrlong	local03, arg01
24034     31 1E 86 F1 | 	sub	local01, #49
24038     0F 03 48 FC | 	wrbyte	#1, local01
2403c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2403c                 | ' 			}
2403c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2403c                 | ' 			fs->wflag = 1;
2403c                 | ' 			break;
2403c                 | LR__3696
2403c                 | LR__3697
2403c                 | ' 		}
2403c                 | ' 	}
2403c                 | ' 	return res;
2403c     12 FB 01 F6 | 	mov	result1, local04
24040     A7 F0 03 F6 | 	mov	ptra, fp
24044     B2 00 A0 FD | 	call	#popregs_
24048                 | _fatfs_cc_put_fat_ret
24048     2D 00 64 FD | 	ret
2404c                 | 
2404c                 | _fatfs_cc_remove_chain
2404c     05 4A 05 F6 | 	mov	COUNT_, #5
24050     A8 00 A0 FD | 	call	#pushregs_
24054     09 1F 02 F6 | 	mov	local01, arg01
24058     0A 21 02 F6 | 	mov	local02, arg02
2405c     0B 23 02 F6 | 	mov	local03, arg03
24060     0F 25 02 FB | 	rdlong	local04, local01
24064     02 20 16 F2 | 	cmp	local02, #2 wc
24068     14 00 90 CD |  if_b	jmp	#LR__3700
2406c     18 24 06 F1 | 	add	local04, #24
24070     12 FB 01 FB | 	rdlong	result1, local04
24074     18 24 86 F1 | 	sub	local04, #24
24078     FD 20 12 F2 | 	cmp	local02, result1 wc
2407c     08 00 90 CD |  if_b	jmp	#LR__3701
24080                 | LR__3700
24080     02 FA 05 F6 | 	mov	result1, #2
24084     CC 00 90 FD | 	jmp	#LR__3706
24088                 | LR__3701
24088     00 22 0E F2 | 	cmp	local03, #0 wz
2408c     18 00 90 AD |  if_e	jmp	#LR__3702
24090     11 15 02 F6 | 	mov	arg02, local03
24094     12 13 02 F6 | 	mov	arg01, local04
24098     01 16 66 F6 | 	neg	arg03, #1
2409c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
240a0     00 FA 0D F2 | 	cmp	result1, #0 wz
240a4     AC 00 90 5D |  if_ne	jmp	#LR__3706
240a8                 | LR__3702
240a8                 | ' 	}
240a8                 | ' 
240a8                 | ' 
240a8                 | ' 	do {
240a8                 | LR__3703
240a8     10 15 02 F6 | 	mov	arg02, local02
240ac     0F 13 02 F6 | 	mov	arg01, local01
240b0     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
240b4     FD 26 0A F6 | 	mov	local05, result1 wz
240b8     94 00 90 AD |  if_e	jmp	#LR__3705
240bc     01 26 0E F2 | 	cmp	local05, #1 wz
240c0     02 FA 05 A6 |  if_e	mov	result1, #2
240c4     8C 00 90 AD |  if_e	jmp	#LR__3706
240c8     FF FF 7F FF 
240cc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
240d0     01 FA 05 A6 |  if_e	mov	result1, #1
240d4     7C 00 90 AD |  if_e	jmp	#LR__3706
240d8     10 15 02 F6 | 	mov	arg02, local02
240dc     12 13 02 F6 | 	mov	arg01, local04
240e0     00 16 06 F6 | 	mov	arg03, #0
240e4     54 FD BF FD | 	call	#_fatfs_cc_put_fat
240e8     FD 22 0A F6 | 	mov	local03, result1 wz
240ec     11 FB 01 56 |  if_ne	mov	result1, local03
240f0     60 00 90 5D |  if_ne	jmp	#LR__3706
240f4     18 24 06 F1 | 	add	local04, #24
240f8     12 23 02 FB | 	rdlong	local03, local04
240fc     02 22 86 F1 | 	sub	local03, #2
24100     04 24 86 F1 | 	sub	local04, #4
24104     12 21 02 FB | 	rdlong	local02, local04
24108     14 24 86 F1 | 	sub	local04, #20
2410c     11 21 12 F2 | 	cmp	local02, local03 wc
24110     24 00 90 3D |  if_ae	jmp	#LR__3704
24114     14 24 06 F1 | 	add	local04, #20
24118     12 23 02 FB | 	rdlong	local03, local04
2411c     01 22 06 F1 | 	add	local03, #1
24120     12 23 62 FC | 	wrlong	local03, local04
24124     10 24 86 F1 | 	sub	local04, #16
24128     12 23 C2 FA | 	rdbyte	local03, local04
2412c     01 22 46 F5 | 	or	local03, #1
24130     12 23 42 FC | 	wrbyte	local03, local04
24134     04 24 86 F1 | 	sub	local04, #4
24138                 | LR__3704
24138     13 21 02 F6 | 	mov	local02, local05
2413c     18 24 06 F1 | 	add	local04, #24
24140     12 27 02 FB | 	rdlong	local05, local04
24144     18 24 86 F1 | 	sub	local04, #24
24148     13 21 12 F2 | 	cmp	local02, local05 wc
2414c     58 FF 9F CD |  if_b	jmp	#LR__3703
24150                 | LR__3705
24150                 | ' #line 1500 "ff.c"
24150                 | ' 	return FR_OK;
24150     00 FA 05 F6 | 	mov	result1, #0
24154                 | LR__3706
24154     A7 F0 03 F6 | 	mov	ptra, fp
24158     B2 00 A0 FD | 	call	#popregs_
2415c                 | _fatfs_cc_remove_chain_ret
2415c     2D 00 64 FD | 	ret
24160                 | 
24160                 | _fatfs_cc_create_chain
24160     09 4A 05 F6 | 	mov	COUNT_, #9
24164     A8 00 A0 FD | 	call	#pushregs_
24168     09 1F 02 F6 | 	mov	local01, arg01
2416c     0A 21 0A F6 | 	mov	local02, arg02 wz
24170     0F 23 02 FB | 	rdlong	local03, local01
24174     28 00 90 5D |  if_ne	jmp	#LR__3710
24178     10 22 06 F1 | 	add	local03, #16
2417c     11 25 0A FB | 	rdlong	local04, local03 wz
24180     10 22 86 F1 | 	sub	local03, #16
24184     18 22 06 51 |  if_ne	add	local03, #24
24188     11 27 02 5B |  if_ne	rdlong	local05, local03
2418c     18 22 86 51 |  if_ne	sub	local03, #24
24190     13 25 12 52 |  if_ne	cmp	local04, local05 wc
24194     50 00 90 4D |  if_c_and_nz	jmp	#LR__3711
24198     01 24 06 F6 | 	mov	local04, #1
2419c     48 00 90 FD | 	jmp	#LR__3711
241a0                 | LR__3710
241a0     10 15 02 F6 | 	mov	arg02, local02
241a4     0F 13 02 F6 | 	mov	arg01, local01
241a8     EC FA BF FD | 	call	#_fatfs_cc_get_fat
241ac     FD 24 02 F6 | 	mov	local04, result1
241b0     02 24 16 F2 | 	cmp	local04, #2 wc
241b4     01 FA 05 C6 |  if_b	mov	result1, #1
241b8     BC 01 90 CD |  if_b	jmp	#LR__3721
241bc     FF FF 7F FF 
241c0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
241c4     12 FB 01 A6 |  if_e	mov	result1, local04
241c8     AC 01 90 AD |  if_e	jmp	#LR__3721
241cc     18 22 06 F1 | 	add	local03, #24
241d0     11 27 02 FB | 	rdlong	local05, local03
241d4     18 22 86 F1 | 	sub	local03, #24
241d8     13 25 12 F2 | 	cmp	local04, local05 wc
241dc     12 FB 01 C6 |  if_b	mov	result1, local04
241e0     94 01 90 CD |  if_b	jmp	#LR__3721
241e4     10 25 02 F6 | 	mov	local04, local02
241e8                 | LR__3711
241e8     14 22 06 F1 | 	add	local03, #20
241ec     11 27 0A FB | 	rdlong	local05, local03 wz
241f0     14 22 86 F1 | 	sub	local03, #20
241f4     00 FA 05 A6 |  if_e	mov	result1, #0
241f8     7C 01 90 AD |  if_e	jmp	#LR__3721
241fc     00 28 06 F6 | 	mov	local06, #0
24200     10 25 0A F2 | 	cmp	local04, local02 wz
24204     74 00 90 5D |  if_ne	jmp	#LR__3714
24208     12 29 02 F6 | 	mov	local06, local04
2420c     01 28 06 F1 | 	add	local06, #1
24210     18 22 06 F1 | 	add	local03, #24
24214     11 27 02 FB | 	rdlong	local05, local03
24218     18 22 86 F1 | 	sub	local03, #24
2421c     13 29 12 F2 | 	cmp	local06, local05 wc
24220     02 28 06 36 |  if_ae	mov	local06, #2
24224     14 15 02 F6 | 	mov	arg02, local06
24228     0F 13 02 F6 | 	mov	arg01, local01
2422c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
24230     FD 26 02 F6 | 	mov	local05, result1
24234     01 26 0E F2 | 	cmp	local05, #1 wz
24238     FF FF 7F 5F 
2423c     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
24240     13 FB 01 A6 |  if_e	mov	result1, local05
24244     30 01 90 AD |  if_e	jmp	#LR__3721
24248     00 26 0E F2 | 	cmp	local05, #0 wz
2424c     2C 00 90 AD |  if_e	jmp	#LR__3713
24250     10 22 06 F1 | 	add	local03, #16
24254     11 2B 02 FB | 	rdlong	local07, local03
24258     10 22 86 F1 | 	sub	local03, #16
2425c     02 2A 16 F2 | 	cmp	local07, #2 wc
24260     14 00 90 CD |  if_b	jmp	#LR__3712
24264     18 22 06 F1 | 	add	local03, #24
24268     11 27 02 FB | 	rdlong	local05, local03
2426c     18 22 86 F1 | 	sub	local03, #24
24270     13 2B 12 F2 | 	cmp	local07, local05 wc
24274     15 25 02 C6 |  if_b	mov	local04, local07
24278                 | LR__3712
24278     00 28 06 F6 | 	mov	local06, #0
2427c                 | LR__3713
2427c                 | LR__3714
2427c     00 28 0E F2 | 	cmp	local06, #0 wz
24280     60 00 90 5D |  if_ne	jmp	#LR__3717
24284     12 29 02 F6 | 	mov	local06, local04
24288                 | ' 			ncl = scl;
24288                 | ' 			for (;;) {
24288                 | LR__3715
24288     01 28 06 F1 | 	add	local06, #1
2428c     18 22 06 F1 | 	add	local03, #24
24290     11 27 02 FB | 	rdlong	local05, local03
24294     18 22 86 F1 | 	sub	local03, #24
24298     13 29 12 F2 | 	cmp	local06, local05 wc
2429c     02 28 06 36 |  if_ae	mov	local06, #2
242a0     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
242a4     00 FA 05 16 |  if_a	mov	result1, #0
242a8     CC 00 90 1D |  if_a	jmp	#LR__3721
242ac     14 15 02 F6 | 	mov	arg02, local06
242b0     0F 13 02 F6 | 	mov	arg01, local01
242b4     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
242b8     FD 2A 0A F6 | 	mov	local07, result1 wz
242bc     24 00 90 AD |  if_e	jmp	#LR__3716
242c0     01 2A 0E F2 | 	cmp	local07, #1 wz
242c4     FF FF 7F 5F 
242c8     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
242cc     15 FB 01 A6 |  if_e	mov	result1, local07
242d0     A4 00 90 AD |  if_e	jmp	#LR__3721
242d4     12 29 0A F2 | 	cmp	local06, local04 wz
242d8     00 FA 05 A6 |  if_e	mov	result1, #0
242dc     98 00 90 AD |  if_e	jmp	#LR__3721
242e0     A4 FF 9F FD | 	jmp	#LR__3715
242e4                 | LR__3716
242e4                 | LR__3717
242e4     11 13 02 F6 | 	mov	arg01, local03
242e8     14 15 02 F6 | 	mov	arg02, local06
242ec     01 16 66 F6 | 	neg	arg03, #1
242f0     48 FB BF FD | 	call	#_fatfs_cc_put_fat
242f4     FD 2C 0A F6 | 	mov	local08, result1 wz
242f8     1C 00 90 5D |  if_ne	jmp	#LR__3718
242fc     00 20 0E F2 | 	cmp	local02, #0 wz
24300     14 00 90 AD |  if_e	jmp	#LR__3718
24304     11 13 02 F6 | 	mov	arg01, local03
24308     10 15 02 F6 | 	mov	arg02, local02
2430c     14 17 02 F6 | 	mov	arg03, local06
24310     28 FB BF FD | 	call	#_fatfs_cc_put_fat
24314     FD 2C 02 F6 | 	mov	local08, result1
24318                 | LR__3718
24318     00 2C 0E F2 | 	cmp	local08, #0 wz
2431c     4C 00 90 5D |  if_ne	jmp	#LR__3719
24320     10 22 06 F1 | 	add	local03, #16
24324     11 29 62 FC | 	wrlong	local06, local03
24328     08 22 06 F1 | 	add	local03, #8
2432c     11 27 02 FB | 	rdlong	local05, local03
24330     02 26 86 F1 | 	sub	local05, #2
24334     04 22 86 F1 | 	sub	local03, #4
24338     11 2F 02 FB | 	rdlong	local09, local03
2433c     14 22 86 F1 | 	sub	local03, #20
24340     13 2F 1A F2 | 	cmp	local09, local05 wcz
24344     14 22 06 E1 |  if_be	add	local03, #20
24348     11 2F 02 EB |  if_be	rdlong	local09, local03
2434c     01 2E 86 E1 |  if_be	sub	local09, #1
24350     11 2F 62 EC |  if_be	wrlong	local09, local03
24354     14 22 86 E1 |  if_be	sub	local03, #20
24358     04 22 06 F1 | 	add	local03, #4
2435c     11 27 C2 FA | 	rdbyte	local05, local03
24360     01 26 46 F5 | 	or	local05, #1
24364     11 27 42 FC | 	wrbyte	local05, local03
24368     08 00 90 FD | 	jmp	#LR__3720
2436c                 | LR__3719
2436c     01 2C 0E F2 | 	cmp	local08, #1 wz
24370     01 28 C6 F6 | 	negz	local06, #1
24374                 | LR__3720
24374                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
24374                 | ' 	}
24374                 | ' 
24374                 | ' 	return ncl;
24374     14 FB 01 F6 | 	mov	result1, local06
24378                 | LR__3721
24378     A7 F0 03 F6 | 	mov	ptra, fp
2437c     B2 00 A0 FD | 	call	#popregs_
24380                 | _fatfs_cc_create_chain_ret
24380     2D 00 64 FD | 	ret
24384                 | 
24384                 | _fatfs_cc_dir_clear
24384     06 4A 05 F6 | 	mov	COUNT_, #6
24388     A8 00 A0 FD | 	call	#pushregs_
2438c     09 1F 02 F6 | 	mov	local01, arg01
24390     0A 21 02 F6 | 	mov	local02, arg02
24394     0F 13 02 F6 | 	mov	arg01, local01
24398     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2439c     00 FA 0D F2 | 	cmp	result1, #0 wz
243a0     01 FA 05 56 |  if_ne	mov	result1, #1
243a4     90 00 90 5D |  if_ne	jmp	#LR__3732
243a8     0F 13 02 F6 | 	mov	arg01, local01
243ac     10 15 02 F6 | 	mov	arg02, local02
243b0     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
243b4     FD 22 02 F6 | 	mov	local03, result1
243b8     30 1E 06 F1 | 	add	local01, #48
243bc     0F 23 62 FC | 	wrlong	local03, local01
243c0     04 1E 06 F1 | 	add	local01, #4
243c4     0F 13 02 F6 | 	mov	arg01, local01
243c8     00 14 06 F6 | 	mov	arg02, #0
243cc     09 16 C6 F9 | 	decod	arg03, #9
243d0     98 00 A0 FD | 	call	#\builtin_bytefill_
243d4     0F 25 02 F6 | 	mov	local04, local01
243d8                 | ' #line 1667 "ff.c"
243d8                 | ' 	{
243d8                 | ' 		ibuf = fs->win; szb = 1;
243d8                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
243d8     00 26 06 F6 | 	mov	local05, #0
243dc     34 1E 86 F1 | 	sub	local01, #52
243e0                 | LR__3730
243e0     0A 1E 06 F1 | 	add	local01, #10
243e4     0F 29 E2 FA | 	rdword	local06, local01
243e8     0A 1E 86 F1 | 	sub	local01, #10
243ec     14 27 12 F2 | 	cmp	local05, local06 wc
243f0     2C 00 90 3D |  if_ae	jmp	#LR__3731
243f4     01 1E 06 F1 | 	add	local01, #1
243f8     0F 13 C2 FA | 	rdbyte	arg01, local01
243fc     01 1E 86 F1 | 	sub	local01, #1
24400     12 15 02 F6 | 	mov	arg02, local04
24404     11 17 02 F6 | 	mov	arg03, local03
24408     13 17 02 F1 | 	add	arg03, local05
2440c     01 18 06 F6 | 	mov	arg04, #1
24410     9C EF BF FD | 	call	#_fatfs_cc_disk_write
24414     00 FA 0D F2 | 	cmp	result1, #0 wz
24418     01 26 06 A1 |  if_e	add	local05, #1
2441c     C0 FF 9F AD |  if_e	jmp	#LR__3730
24420                 | LR__3731
24420                 | ' 	}
24420                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
24420     0A 1E 06 F1 | 	add	local01, #10
24424     0F 25 E2 FA | 	rdword	local04, local01
24428     12 27 0A F2 | 	cmp	local05, local04 wz
2442c     00 28 06 A6 |  if_e	mov	local06, #0
24430     01 28 06 56 |  if_ne	mov	local06, #1
24434     14 FB 01 F6 | 	mov	result1, local06
24438                 | LR__3732
24438     A7 F0 03 F6 | 	mov	ptra, fp
2443c     B2 00 A0 FD | 	call	#popregs_
24440                 | _fatfs_cc_dir_clear_ret
24440     2D 00 64 FD | 	ret
24444                 | 
24444                 | _fatfs_cc_dir_sdi
24444     06 4A 05 F6 | 	mov	COUNT_, #6
24448     A8 00 A0 FD | 	call	#pushregs_
2444c     09 1F 02 F6 | 	mov	local01, arg01
24450     0A 21 02 F6 | 	mov	local02, arg02
24454     0F 23 02 FB | 	rdlong	local03, local01
24458     00 10 00 FF 
2445c     00 20 16 F2 | 	cmp	local02, ##2097152 wc
24460     1F 20 CE C7 |  if_b	test	local02, #31 wz
24464                 | ' 		return FR_INT_ERR;
24464     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
24468     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3746
2446c     10 1E 06 F1 | 	add	local01, #16
24470     0F 21 62 FC | 	wrlong	local02, local01
24474     08 1E 86 F1 | 	sub	local01, #8
24478     0F 25 0A FB | 	rdlong	local04, local01 wz
2447c     08 1E 86 F1 | 	sub	local01, #8
24480     11 27 C2 AA |  if_e	rdbyte	local05, local03
24484     03 26 16 A2 |  if_e	cmp	local05, #3 wc
24488     28 22 06 21 |  if_nc_and_z	add	local03, #40
2448c     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
24490     28 22 86 21 |  if_nc_and_z	sub	local03, #40
24494     00 24 0E F2 | 	cmp	local04, #0 wz
24498     3C 00 90 5D |  if_ne	jmp	#LR__3740
2449c     10 27 02 F6 | 	mov	local05, local02
244a0     05 26 46 F0 | 	shr	local05, #5
244a4     08 22 06 F1 | 	add	local03, #8
244a8     11 15 E2 FA | 	rdword	arg02, local03
244ac     08 22 86 F1 | 	sub	local03, #8
244b0     0A 27 12 F2 | 	cmp	local05, arg02 wc
244b4     02 FA 05 36 |  if_ae	mov	result1, #2
244b8     E4 00 90 3D |  if_ae	jmp	#LR__3746
244bc     28 22 06 F1 | 	add	local03, #40
244c0     11 27 02 FB | 	rdlong	local05, local03
244c4     28 22 86 F1 | 	sub	local03, #40
244c8     18 1E 06 F1 | 	add	local01, #24
244cc     0F 27 62 FC | 	wrlong	local05, local01
244d0     18 1E 86 F1 | 	sub	local01, #24
244d4     7C 00 90 FD | 	jmp	#LR__3745
244d8                 | LR__3740
244d8     0A 22 06 F1 | 	add	local03, #10
244dc     11 29 E2 FA | 	rdword	local06, local03
244e0     0A 22 86 F1 | 	sub	local03, #10
244e4     09 28 66 F0 | 	shl	local06, #9
244e8                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
244e8                 | ' 		while (ofs >= csz) {
244e8                 | LR__3741
244e8     14 21 12 F2 | 	cmp	local02, local06 wc
244ec     4C 00 90 CD |  if_b	jmp	#LR__3744
244f0     0F 13 02 F6 | 	mov	arg01, local01
244f4     12 15 02 F6 | 	mov	arg02, local04
244f8     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
244fc     FD 24 02 F6 | 	mov	local04, result1
24500     FF FF 7F FF 
24504     FF 25 0E F2 | 	cmp	local04, ##-1 wz
24508     01 FA 05 A6 |  if_e	mov	result1, #1
2450c     90 00 90 AD |  if_e	jmp	#LR__3746
24510     02 24 16 F2 | 	cmp	local04, #2 wc
24514     14 00 90 CD |  if_b	jmp	#LR__3742
24518     18 22 06 F1 | 	add	local03, #24
2451c     11 27 02 FB | 	rdlong	local05, local03
24520     18 22 86 F1 | 	sub	local03, #24
24524     13 25 12 F2 | 	cmp	local04, local05 wc
24528     08 00 90 CD |  if_b	jmp	#LR__3743
2452c                 | LR__3742
2452c     02 FA 05 F6 | 	mov	result1, #2
24530     6C 00 90 FD | 	jmp	#LR__3746
24534                 | LR__3743
24534     14 21 82 F1 | 	sub	local02, local06
24538     AC FF 9F FD | 	jmp	#LR__3741
2453c                 | LR__3744
2453c     11 13 02 F6 | 	mov	arg01, local03
24540     12 15 02 F6 | 	mov	arg02, local04
24544     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
24548     18 1E 06 F1 | 	add	local01, #24
2454c     0F FB 61 FC | 	wrlong	result1, local01
24550     18 1E 86 F1 | 	sub	local01, #24
24554                 | LR__3745
24554     14 1E 06 F1 | 	add	local01, #20
24558     0F 25 62 FC | 	wrlong	local04, local01
2455c     04 1E 06 F1 | 	add	local01, #4
24560     0F 27 0A FB | 	rdlong	local05, local01 wz
24564     18 1E 86 F1 | 	sub	local01, #24
24568     02 FA 05 A6 |  if_e	mov	result1, #2
2456c     30 00 90 AD |  if_e	jmp	#LR__3746
24570     10 29 02 F6 | 	mov	local06, local02
24574     09 28 46 F0 | 	shr	local06, #9
24578     18 1E 06 F1 | 	add	local01, #24
2457c     0F 27 02 FB | 	rdlong	local05, local01
24580     14 27 02 F1 | 	add	local05, local06
24584     0F 27 62 FC | 	wrlong	local05, local01
24588     34 22 06 F1 | 	add	local03, #52
2458c     FF 21 06 F5 | 	and	local02, #511
24590     10 23 02 F1 | 	add	local03, local02
24594     04 1E 06 F1 | 	add	local01, #4
24598     0F 23 62 FC | 	wrlong	local03, local01
2459c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2459c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2459c                 | ' 
2459c                 | ' 	return FR_OK;
2459c     00 FA 05 F6 | 	mov	result1, #0
245a0                 | LR__3746
245a0     A7 F0 03 F6 | 	mov	ptra, fp
245a4     B2 00 A0 FD | 	call	#popregs_
245a8                 | _fatfs_cc_dir_sdi_ret
245a8     2D 00 64 FD | 	ret
245ac                 | 
245ac                 | _fatfs_cc_dir_next
245ac     05 4A 05 F6 | 	mov	COUNT_, #5
245b0     A8 00 A0 FD | 	call	#pushregs_
245b4     09 1F 02 F6 | 	mov	local01, arg01
245b8     0A 21 02 F6 | 	mov	local02, arg02
245bc     0F 23 02 FB | 	rdlong	local03, local01
245c0     10 1E 06 F1 | 	add	local01, #16
245c4     0F 25 02 FB | 	rdlong	local04, local01
245c8     10 1E 86 F1 | 	sub	local01, #16
245cc     20 24 06 F1 | 	add	local04, #32
245d0     00 10 00 FF 
245d4     00 24 16 F2 | 	cmp	local04, ##2097152 wc
245d8     18 1E 06 31 |  if_ae	add	local01, #24
245dc     0F 01 68 3C |  if_ae	wrlong	#0, local01
245e0     18 1E 86 31 |  if_ae	sub	local01, #24
245e4     18 1E 06 F1 | 	add	local01, #24
245e8     0F 15 0A FB | 	rdlong	arg02, local01 wz
245ec     18 1E 86 F1 | 	sub	local01, #24
245f0     04 FA 05 A6 |  if_e	mov	result1, #4
245f4     64 01 90 AD |  if_e	jmp	#LR__3755
245f8     FF 25 CE F7 | 	test	local04, #511 wz
245fc     3C 01 90 5D |  if_ne	jmp	#LR__3754
24600     18 1E 06 F1 | 	add	local01, #24
24604     0F 15 02 FB | 	rdlong	arg02, local01
24608     01 14 06 F1 | 	add	arg02, #1
2460c     0F 15 62 FC | 	wrlong	arg02, local01
24610     04 1E 86 F1 | 	sub	local01, #4
24614     0F 15 0A FB | 	rdlong	arg02, local01 wz
24618     14 1E 86 F1 | 	sub	local01, #20
2461c     2C 00 90 5D |  if_ne	jmp	#LR__3750
24620     12 15 02 F6 | 	mov	arg02, local04
24624     05 14 46 F0 | 	shr	arg02, #5
24628     08 22 06 F1 | 	add	local03, #8
2462c     11 21 E2 FA | 	rdword	local02, local03
24630     08 22 86 F1 | 	sub	local03, #8
24634     10 15 12 F2 | 	cmp	arg02, local02 wc
24638     18 1E 06 31 |  if_ae	add	local01, #24
2463c     0F 01 68 3C |  if_ae	wrlong	#0, local01
24640                 | ' 				dp->sect = 0; return FR_NO_FILE;
24640     04 FA 05 36 |  if_ae	mov	result1, #4
24644     14 01 90 3D |  if_ae	jmp	#LR__3755
24648     F0 00 90 FD | 	jmp	#LR__3753
2464c                 | LR__3750
2464c     12 13 02 F6 | 	mov	arg01, local04
24650     09 12 46 F0 | 	shr	arg01, #9
24654     0A 22 06 F1 | 	add	local03, #10
24658     11 15 E2 FA | 	rdword	arg02, local03
2465c     0A 22 86 F1 | 	sub	local03, #10
24660     01 14 86 F1 | 	sub	arg02, #1
24664     0A 13 CA F7 | 	test	arg01, arg02 wz
24668     D0 00 90 5D |  if_ne	jmp	#LR__3752
2466c     0F 13 02 F6 | 	mov	arg01, local01
24670     14 1E 06 F1 | 	add	local01, #20
24674     0F 15 02 FB | 	rdlong	arg02, local01
24678     14 1E 86 F1 | 	sub	local01, #20
2467c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
24680     FD 26 02 F6 | 	mov	local05, result1
24684     02 26 16 F2 | 	cmp	local05, #2 wc
24688     02 FA 05 C6 |  if_b	mov	result1, #2
2468c     CC 00 90 CD |  if_b	jmp	#LR__3755
24690     FF FF 7F FF 
24694     FF 27 0E F2 | 	cmp	local05, ##-1 wz
24698     01 FA 05 A6 |  if_e	mov	result1, #1
2469c     BC 00 90 AD |  if_e	jmp	#LR__3755
246a0     18 22 06 F1 | 	add	local03, #24
246a4     11 15 02 FB | 	rdlong	arg02, local03
246a8     18 22 86 F1 | 	sub	local03, #24
246ac     0A 27 12 F2 | 	cmp	local05, arg02 wc
246b0     68 00 90 CD |  if_b	jmp	#LR__3751
246b4     00 20 0E F2 | 	cmp	local02, #0 wz
246b8     18 1E 06 A1 |  if_e	add	local01, #24
246bc     0F 01 68 AC |  if_e	wrlong	#0, local01
246c0                 | ' 						dp->sect = 0; return FR_NO_FILE;
246c0     04 FA 05 A6 |  if_e	mov	result1, #4
246c4     94 00 90 AD |  if_e	jmp	#LR__3755
246c8     0F 13 02 F6 | 	mov	arg01, local01
246cc     14 1E 06 F1 | 	add	local01, #20
246d0     0F 15 02 FB | 	rdlong	arg02, local01
246d4     14 1E 86 F1 | 	sub	local01, #20
246d8     84 FA BF FD | 	call	#_fatfs_cc_create_chain
246dc     FD 26 0A F6 | 	mov	local05, result1 wz
246e0     07 FA 05 A6 |  if_e	mov	result1, #7
246e4     74 00 90 AD |  if_e	jmp	#LR__3755
246e8     01 26 0E F2 | 	cmp	local05, #1 wz
246ec     02 FA 05 A6 |  if_e	mov	result1, #2
246f0     68 00 90 AD |  if_e	jmp	#LR__3755
246f4     FF FF 7F FF 
246f8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
246fc     01 FA 05 A6 |  if_e	mov	result1, #1
24700     58 00 90 AD |  if_e	jmp	#LR__3755
24704     13 15 02 F6 | 	mov	arg02, local05
24708     11 13 02 F6 | 	mov	arg01, local03
2470c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
24710     00 FA 0D F2 | 	cmp	result1, #0 wz
24714     01 FA 05 56 |  if_ne	mov	result1, #1
24718     40 00 90 5D |  if_ne	jmp	#LR__3755
2471c                 | LR__3751
2471c     14 1E 06 F1 | 	add	local01, #20
24720     0F 27 62 FC | 	wrlong	local05, local01
24724     11 13 02 F6 | 	mov	arg01, local03
24728     13 15 02 F6 | 	mov	arg02, local05
2472c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
24730     04 1E 06 F1 | 	add	local01, #4
24734     0F FB 61 FC | 	wrlong	result1, local01
24738     18 1E 86 F1 | 	sub	local01, #24
2473c                 | LR__3752
2473c                 | LR__3753
2473c                 | LR__3754
2473c     10 1E 06 F1 | 	add	local01, #16
24740     0F 25 62 FC | 	wrlong	local04, local01
24744     34 22 06 F1 | 	add	local03, #52
24748     FF 25 06 F5 | 	and	local04, #511
2474c     12 23 02 F1 | 	add	local03, local04
24750     0C 1E 06 F1 | 	add	local01, #12
24754     0F 23 62 FC | 	wrlong	local03, local01
24758                 | ' #line 1771 "ff.c"
24758                 | ' 				}
24758                 | ' 				dp->clust = clst;
24758                 | ' 				dp->sect = clst2sect(fs, clst);
24758                 | ' 			}
24758                 | ' 		}
24758                 | ' 	}
24758                 | ' 	dp->dptr = ofs;
24758                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
24758                 | ' 
24758                 | ' 	return FR_OK;
24758     00 FA 05 F6 | 	mov	result1, #0
2475c                 | LR__3755
2475c     A7 F0 03 F6 | 	mov	ptra, fp
24760     B2 00 A0 FD | 	call	#popregs_
24764                 | _fatfs_cc_dir_next_ret
24764     2D 00 64 FD | 	ret
24768                 | 
24768                 | _fatfs_cc_dir_alloc
24768     08 4A 05 F6 | 	mov	COUNT_, #8
2476c     A8 00 A0 FD | 	call	#pushregs_
24770     09 1F 02 F6 | 	mov	local01, arg01
24774     0A 21 02 F6 | 	mov	local02, arg02
24778     0F 23 02 FB | 	rdlong	local03, local01
2477c     0F 13 02 F6 | 	mov	arg01, local01
24780     00 14 06 F6 | 	mov	arg02, #0
24784     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
24788     FD 24 0A F6 | 	mov	local04, result1 wz
2478c     70 00 90 5D |  if_ne	jmp	#LR__3764
24790     00 26 06 F6 | 	mov	local05, #0
24794                 | ' 		n = 0;
24794                 | ' 		do {
24794                 | LR__3760
24794     18 1E 06 F1 | 	add	local01, #24
24798     0F 15 02 FB | 	rdlong	arg02, local01
2479c     18 1E 86 F1 | 	sub	local01, #24
247a0     11 13 02 F6 | 	mov	arg01, local03
247a4     38 F3 BF FD | 	call	#_fatfs_cc_move_window
247a8     FD 24 0A F6 | 	mov	local04, result1 wz
247ac     50 00 90 5D |  if_ne	jmp	#LR__3763
247b0     1C 1E 06 F1 | 	add	local01, #28
247b4     0F 29 02 FB | 	rdlong	local06, local01
247b8     1C 1E 86 F1 | 	sub	local01, #28
247bc     14 29 C2 FA | 	rdbyte	local06, local06
247c0     E5 28 0E F2 | 	cmp	local06, #229 wz
247c4     1C 1E 06 51 |  if_ne	add	local01, #28
247c8     0F 2B 02 5B |  if_ne	rdlong	local07, local01
247cc     1C 1E 86 51 |  if_ne	sub	local01, #28
247d0     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
247d4     10 00 90 5D |  if_ne	jmp	#LR__3761
247d8     01 26 06 F1 | 	add	local05, #1
247dc     10 27 0A F2 | 	cmp	local05, local02 wz
247e0     1C 00 90 AD |  if_e	jmp	#LR__3763
247e4     04 00 90 FD | 	jmp	#LR__3762
247e8                 | LR__3761
247e8     00 26 06 F6 | 	mov	local05, #0
247ec                 | LR__3762
247ec     0F 13 02 F6 | 	mov	arg01, local01
247f0     01 14 06 F6 | 	mov	arg02, #1
247f4     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
247f8     FD 24 0A F6 | 	mov	local04, result1 wz
247fc     94 FF 9F AD |  if_e	jmp	#LR__3760
24800                 | LR__3763
24800                 | LR__3764
24800     04 24 0E F2 | 	cmp	local04, #4 wz
24804     07 24 06 A6 |  if_e	mov	local04, #7
24808                 | ' 	return res;
24808     12 FB 01 F6 | 	mov	result1, local04
2480c     A7 F0 03 F6 | 	mov	ptra, fp
24810     B2 00 A0 FD | 	call	#popregs_
24814                 | _fatfs_cc_dir_alloc_ret
24814     2D 00 64 FD | 	ret
24818                 | 
24818                 | _fatfs_cc_ld_clust
24818     09 01 02 F6 | 	mov	_var01, arg01
2481c     0A 13 02 F6 | 	mov	arg01, arg02
24820     1A 12 06 F1 | 	add	arg01, #26
24824                 | ' {
24824                 | ' 
24824                 | ' 	return *((WORD*)ptr);
24824     09 FB E1 FA | 	rdword	result1, arg01
24828     FD 12 32 F9 | 	getword	arg01, result1, #0
2482c     00 01 C2 FA | 	rdbyte	_var01, _var01
24830     03 00 0E F2 | 	cmp	_var01, #3 wz
24834     14 14 06 A1 |  if_e	add	arg02, #20
24838                 | ' {
24838                 | ' 
24838                 | ' 	return *((WORD*)ptr);
24838     0A FB E1 AA |  if_e	rdword	result1, arg02
2483c     10 FA 65 A0 |  if_e	shl	result1, #16
24840     FD 12 42 A5 |  if_e	or	arg01, result1
24844                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
24844                 | ' 	}
24844                 | ' 
24844                 | ' 	return cl;
24844     09 FB 01 F6 | 	mov	result1, arg01
24848                 | _fatfs_cc_ld_clust_ret
24848     2D 00 64 FD | 	ret
2484c                 | 
2484c                 | _fatfs_cc_st_clust
2484c     09 01 02 F6 | 	mov	_var01, arg01
24850     0A 13 02 F6 | 	mov	arg01, arg02
24854     1A 12 06 F1 | 	add	arg01, #26
24858     09 17 52 FC | 	wrword	arg03, arg01
2485c     00 01 C2 FA | 	rdbyte	_var01, _var01
24860     03 00 0E F2 | 	cmp	_var01, #3 wz
24864     14 14 06 A1 |  if_e	add	arg02, #20
24868     10 16 46 A0 |  if_e	shr	arg03, #16
2486c     0A 17 52 AC |  if_e	wrword	arg03, arg02
24870                 | _fatfs_cc_st_clust_ret
24870     2D 00 64 FD | 	ret
24874                 | 
24874                 | _fatfs_cc_cmp_lfn
24874     07 4A 05 F6 | 	mov	COUNT_, #7
24878     A8 00 A0 FD | 	call	#pushregs_
2487c     09 1F 02 F6 | 	mov	local01, arg01
24880     0A 13 02 F6 | 	mov	arg01, arg02
24884     1A 12 06 F1 | 	add	arg01, #26
24888                 | ' {
24888                 | ' 
24888                 | ' 	return *((WORD*)ptr);
24888     09 FB E9 FA | 	rdword	result1, arg01 wz
2488c     00 FA 05 56 |  if_ne	mov	result1, #0
24890     E0 00 90 5D |  if_ne	jmp	#LR__3776
24894     0A 21 C2 FA | 	rdbyte	local02, arg02
24898     3F 20 06 F5 | 	and	local02, #63
2489c     01 20 86 F1 | 	sub	local02, #1
248a0     0D 20 06 FD | 	qmul	local02, #13
248a4                 | ' 
248a4                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
248a4                 | ' 
248a4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
248a4     01 22 06 F6 | 	mov	local03, #1
248a8     00 24 06 F6 | 	mov	local04, #0
248ac     18 26 62 FD | 	getqx	local05
248b0                 | LR__3770
248b0     0D 24 16 F2 | 	cmp	local04, #13 wc
248b4     9C 00 90 3D |  if_ae	jmp	#LR__3775
248b8     0A 13 02 F6 | 	mov	arg01, arg02
248bc     12 21 02 F6 | 	mov	local02, local04
248c0     01 00 00 FF 
248c4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
248c8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
248cc     10 21 C2 FA | 	rdbyte	local02, local02
248d0     01 20 06 FA | 	mul	local02, #1
248d4     10 13 02 F1 | 	add	arg01, local02
248d8     01 00 00 FF 
248dc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
248e0                 | ' {
248e0                 | ' 
248e0                 | ' 	return *((WORD*)ptr);
248e0     09 FB E1 FA | 	rdword	result1, arg01
248e4     FD 28 02 F6 | 	mov	local06, result1
248e8     11 21 02 F6 | 	mov	local02, local03
248ec     0F 20 4E F7 | 	zerox	local02, #15 wz
248f0     44 00 90 AD |  if_e	jmp	#LR__3773
248f4     00 27 16 F2 | 	cmp	local05, #256 wc
248f8     2C 00 90 3D |  if_ae	jmp	#LR__3771
248fc     14 13 32 F9 | 	getword	arg01, local06, #0
24900     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
24904     FD 20 02 F6 | 	mov	local02, result1
24908     13 23 02 F6 | 	mov	local03, local05
2490c     01 22 66 F0 | 	shl	local03, #1
24910     0F 23 02 F1 | 	add	local03, local01
24914     11 13 E2 FA | 	rdword	arg01, local03
24918     01 26 06 F1 | 	add	local05, #1
2491c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
24920     FD 20 0A F2 | 	cmp	local02, result1 wz
24924     08 00 90 AD |  if_e	jmp	#LR__3772
24928                 | LR__3771
24928                 | ' 				return 0;
24928     00 FA 05 F6 | 	mov	result1, #0
2492c     44 00 90 FD | 	jmp	#LR__3776
24930                 | LR__3772
24930     14 23 02 F6 | 	mov	local03, local06
24934     14 00 90 FD | 	jmp	#LR__3774
24938                 | LR__3773
24938     14 29 32 F9 | 	getword	local06, local06, #0
2493c     7F 00 00 FF 
24940     FF 29 0E F2 | 	cmp	local06, ##65535 wz
24944     00 FA 05 56 |  if_ne	mov	result1, #0
24948     28 00 90 5D |  if_ne	jmp	#LR__3776
2494c                 | LR__3774
2494c     01 24 06 F1 | 	add	local04, #1
24950     5C FF 9F FD | 	jmp	#LR__3770
24954                 | LR__3775
24954     0A 21 C2 FA | 	rdbyte	local02, arg02
24958     40 20 CE F7 | 	test	local02, #64 wz
2495c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
24960     01 26 66 50 |  if_ne	shl	local05, #1
24964     0F 27 02 51 |  if_ne	add	local05, local01
24968     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
2496c     00 FA 05 56 |  if_ne	mov	result1, #0
24970                 | ' 
24970                 | ' 	return 1;
24970     01 FA 05 A6 |  if_e	mov	result1, #1
24974                 | LR__3776
24974     A7 F0 03 F6 | 	mov	ptra, fp
24978     B2 00 A0 FD | 	call	#popregs_
2497c                 | _fatfs_cc_cmp_lfn_ret
2497c     2D 00 64 FD | 	ret
24980                 | 
24980                 | _fatfs_cc_pick_lfn
24980     09 01 02 F6 | 	mov	_var01, arg01
24984     0A 13 02 F6 | 	mov	arg01, arg02
24988     1A 12 06 F1 | 	add	arg01, #26
2498c                 | ' {
2498c                 | ' 
2498c                 | ' 	return *((WORD*)ptr);
2498c     09 FB E9 FA | 	rdword	result1, arg01 wz
24990     00 FA 05 56 |  if_ne	mov	result1, #0
24994     D4 00 90 5D |  if_ne	jmp	#LR__3785
24998     0A 03 C2 FA | 	rdbyte	_var02, arg02
2499c     40 02 26 F5 | 	andn	_var02, #64
249a0     01 02 86 F1 | 	sub	_var02, #1
249a4     0D 02 06 FD | 	qmul	_var02, #13
249a8                 | ' 
249a8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
249a8                 | ' 
249a8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
249a8     01 04 06 F6 | 	mov	_var03, #1
249ac     00 06 06 F6 | 	mov	_var04, #0
249b0     18 08 62 FD | 	getqx	_var05
249b4                 | LR__3780
249b4     0D 06 16 F2 | 	cmp	_var04, #13 wc
249b8     80 00 90 3D |  if_ae	jmp	#LR__3783
249bc     0A 13 02 F6 | 	mov	arg01, arg02
249c0     03 03 02 F6 | 	mov	_var02, _var04
249c4     01 00 00 FF 
249c8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
249cc     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
249d0     01 03 C2 FA | 	rdbyte	_var02, _var02
249d4     01 02 06 FA | 	mul	_var02, #1
249d8     01 13 02 F1 | 	add	arg01, _var02
249dc     01 00 00 FF 
249e0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
249e4                 | ' {
249e4                 | ' 
249e4                 | ' 	return *((WORD*)ptr);
249e4     09 FB E1 FA | 	rdword	result1, arg01
249e8     FD 0A 02 F6 | 	mov	_var06, result1
249ec     02 03 02 F6 | 	mov	_var02, _var03
249f0     0F 02 4E F7 | 	zerox	_var02, #15 wz
249f4     28 00 90 AD |  if_e	jmp	#LR__3781
249f8     00 09 16 F2 | 	cmp	_var05, #256 wc
249fc     00 FA 05 36 |  if_ae	mov	result1, #0
24a00     68 00 90 3D |  if_ae	jmp	#LR__3785
24a04     04 03 02 F6 | 	mov	_var02, _var05
24a08     01 02 66 F0 | 	shl	_var02, #1
24a0c     00 03 02 F1 | 	add	_var02, _var01
24a10     05 05 02 F6 | 	mov	_var03, _var06
24a14     01 05 52 FC | 	wrword	_var03, _var02
24a18     01 08 06 F1 | 	add	_var05, #1
24a1c     14 00 90 FD | 	jmp	#LR__3782
24a20                 | LR__3781
24a20     05 0B 32 F9 | 	getword	_var06, _var06, #0
24a24     7F 00 00 FF 
24a28     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
24a2c     00 FA 05 56 |  if_ne	mov	result1, #0
24a30     38 00 90 5D |  if_ne	jmp	#LR__3785
24a34                 | LR__3782
24a34     01 06 06 F1 | 	add	_var04, #1
24a38     78 FF 9F FD | 	jmp	#LR__3780
24a3c                 | LR__3783
24a3c     0A 03 C2 FA | 	rdbyte	_var02, arg02
24a40     40 02 CE F7 | 	test	_var02, #64 wz
24a44     02 0D 02 56 |  if_ne	mov	_var07, _var03
24a48     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
24a4c     18 00 90 AD |  if_e	jmp	#LR__3784
24a50     00 09 16 F2 | 	cmp	_var05, #256 wc
24a54     00 FA 05 36 |  if_ae	mov	result1, #0
24a58     10 00 90 3D |  if_ae	jmp	#LR__3785
24a5c     01 08 66 F0 | 	shl	_var05, #1
24a60     00 09 02 F1 | 	add	_var05, _var01
24a64     04 01 58 FC | 	wrword	#0, _var05
24a68                 | LR__3784
24a68                 | ' 		lfnbuf[i] = 0;
24a68                 | ' 	}
24a68                 | ' 
24a68                 | ' 	return 1;
24a68     01 FA 05 F6 | 	mov	result1, #1
24a6c                 | LR__3785
24a6c                 | _fatfs_cc_pick_lfn_ret
24a6c     2D 00 64 FD | 	ret
24a70                 | 
24a70                 | _fatfs_cc_put_lfn
24a70     0D 14 06 F1 | 	add	arg02, #13
24a74     0A 19 42 FC | 	wrbyte	arg04, arg02
24a78     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
24a7c     01 18 86 F1 | 	sub	arg04, #1
24a80     0D 18 06 FD | 	qmul	arg04, #13
24a84     09 01 02 F6 | 	mov	_var01, arg01
24a88     02 14 86 F1 | 	sub	arg02, #2
24a8c     0A 1F 48 FC | 	wrbyte	#15, arg02
24a90     01 14 06 F1 | 	add	arg02, #1
24a94     0A 01 48 FC | 	wrbyte	#0, arg02
24a98     0C 14 86 F1 | 	sub	arg02, #12
24a9c     0A 13 02 F6 | 	mov	arg01, arg02
24aa0     1A 12 06 F1 | 	add	arg01, #26
24aa4     09 01 58 FC | 	wrword	#0, arg01
24aa8     00 02 06 F6 | 	mov	_var02, #0
24aac     00 04 06 F6 | 	mov	_var03, #0
24ab0                 | ' 	BYTE* dir,
24ab0                 | ' 	BYTE ord,
24ab0                 | ' 	BYTE sum
24ab0                 | ' )
24ab0                 | ' {
24ab0                 | ' 	UINT i, s;
24ab0                 | ' 	WCHAR wc;
24ab0                 | ' 
24ab0                 | ' 
24ab0                 | ' 	dir[ 13 ] = sum;
24ab0                 | ' 	dir[ 11 ] =  0x0F ;
24ab0                 | ' 	dir[ 12 ] = 0;
24ab0                 | ' 	st_word(dir +  26 , 0);
24ab0                 | ' 
24ab0                 | ' 	i = (ord - 1) * 13;
24ab0                 | ' 	s = wc = 0;
24ab0                 | ' 	do {
24ab0     01 00 00 FF 
24ab4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
24ab8     18 06 62 FD | 	getqx	_var04
24abc     97 2A 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
24ac0                 | LR__3790
24ac0     01 19 32 F9 | 	getword	arg04, _var02, #0
24ac4     7F 00 00 FF 
24ac8     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
24acc     03 13 02 56 |  if_ne	mov	arg01, _var04
24ad0     01 06 06 51 |  if_ne	add	_var04, #1
24ad4     01 12 66 50 |  if_ne	shl	arg01, #1
24ad8     00 13 02 51 |  if_ne	add	arg01, _var01
24adc     09 03 E2 5A |  if_ne	rdword	_var02, arg01
24ae0     0A 13 02 F6 | 	mov	arg01, arg02
24ae4     02 19 02 F6 | 	mov	arg04, _var03
24ae8     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
24aec     0C 19 C2 FA | 	rdbyte	arg04, arg04
24af0     01 18 06 FA | 	mul	arg04, #1
24af4     0C 13 02 F1 | 	add	arg01, arg04
24af8     09 03 52 FC | 	wrword	_var02, arg01
24afc     01 19 02 F6 | 	mov	arg04, _var02
24b00     0F 18 4E F7 | 	zerox	arg04, #15 wz
24b04     0F 02 CE A9 |  if_e	bmask	_var02, #15
24b08     01 04 06 F1 | 	add	_var03, #1
24b0c     0D 04 16 F2 | 	cmp	_var03, #13 wc
24b10     AC FF 9F CD |  if_b	jmp	#LR__3790
24b14                 | LR__3791
24b14     01 00 00 FF 
24b18     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
24b1c     01 03 32 F9 | 	getword	_var02, _var02, #0
24b20     7F 00 00 FF 
24b24     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
24b28     01 06 66 50 |  if_ne	shl	_var04, #1
24b2c     00 07 02 51 |  if_ne	add	_var04, _var01
24b30     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
24b34     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
24b38     40 16 46 A5 |  if_e	or	arg03, #64
24b3c     0A 17 42 FC | 	wrbyte	arg03, arg02
24b40                 | _fatfs_cc_put_lfn_ret
24b40     2D 00 64 FD | 	ret
24b44                 | 
24b44                 | _fatfs_cc_gen_numname
24b44     08 4A 05 F6 | 	mov	COUNT_, #8
24b48     A8 00 A0 FD | 	call	#pushregs_
24b4c     2C F0 07 F1 | 	add	ptra, #44
24b50     09 1F 02 F6 | 	mov	local01, arg01
24b54     0A 21 02 F6 | 	mov	local02, arg02
24b58     0B 23 02 F6 | 	mov	local03, arg03
24b5c     0C 25 02 F6 | 	mov	local04, arg04
24b60     0F 13 02 F6 | 	mov	arg01, local01
24b64     10 15 02 F6 | 	mov	arg02, local02
24b68     0B 16 06 F6 | 	mov	arg03, #11
24b6c     FC 77 BF FD | 	call	#__system____builtin_memmove
24b70     06 24 16 F2 | 	cmp	local04, #6 wc
24b74     48 00 90 CD |  if_b	jmp	#LR__3805
24b78     12 27 02 F6 | 	mov	local05, local04
24b7c     97 1E 48 FB | 	callpa	#(@LR__3803-@LR__3800)>>2,fcache_load_ptr_
24b80                 | ' 		sreg = seq;
24b80                 | ' 		while (*lfn) {
24b80                 | LR__3800
24b80     11 29 EA FA | 	rdword	local06, local03 wz
24b84     34 00 90 AD |  if_e	jmp	#LR__3804
24b88     11 2B E2 FA | 	rdword	local07, local03
24b8c                 | ' 			wc = *lfn++;
24b8c                 | ' 			for (i = 0; i < 16; i++) {
24b8c     02 22 06 F1 | 	add	local03, #2
24b90     10 12 DC FC | 	rep	@LR__3802, #16
24b94                 | LR__3801
24b94     01 26 66 F0 | 	shl	local05, #1
24b98     15 29 32 F9 | 	getword	local06, local07, #0
24b9c     01 28 06 F5 | 	and	local06, #1
24ba0     14 27 02 F1 | 	add	local05, local06
24ba4     15 2B 32 F9 | 	getword	local07, local07, #0
24ba8     01 2A 46 F0 | 	shr	local07, #1
24bac     10 26 2E F4 | 	testbn	local05, #16 wz
24bb0     88 00 00 5F 
24bb4     21 26 66 55 |  if_ne	xor	local05, ##69665
24bb8                 | LR__3802
24bb8     C4 FF 9F FD | 	jmp	#LR__3800
24bbc                 | LR__3803
24bbc                 | LR__3804
24bbc     13 25 02 F6 | 	mov	local04, local05
24bc0                 | LR__3805
24bc0     07 2A 06 F6 | 	mov	local07, #7
24bc4                 | ' 			}
24bc4                 | ' 		}
24bc4                 | ' 		seq = (UINT)sreg;
24bc4                 | ' 	}
24bc4                 | ' 
24bc4                 | ' 
24bc4                 | ' 	i = 7;
24bc4                 | ' 	do {
24bc4     10 4E 05 F1 | 	add	fp, #16
24bc8     97 1A 48 FB | 	callpa	#(@LR__3807-@LR__3806)>>2,fcache_load_ptr_
24bcc                 | LR__3806
24bcc     12 27 42 F8 | 	getnib	local05, local04, #0
24bd0     30 26 06 F1 | 	add	local05, #48
24bd4     04 24 46 F0 | 	shr	local04, #4
24bd8     13 29 E2 F8 | 	getbyte	local06, local05, #0
24bdc     3A 28 16 F2 | 	cmp	local06, #58 wc
24be0     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
24be4     07 26 06 31 |  if_ae	add	local05, #7
24be8     15 29 02 F6 | 	mov	local06, local07
24bec     01 2A 8E F1 | 	sub	local07, #1 wz
24bf0     A7 28 02 F1 | 	add	local06, fp
24bf4     14 27 42 FC | 	wrbyte	local05, local06
24bf8     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
24bfc     CC FF 9F 5D |  if_ne	jmp	#LR__3806
24c00                 | LR__3807
24c00     15 29 02 F6 | 	mov	local06, local07
24c04     A7 28 02 F1 | 	add	local06, fp
24c08     14 FD 48 FC | 	wrbyte	#126, local06
24c0c                 | ' 	ns[i] = '~';
24c0c                 | ' 
24c0c                 | ' 
24c0c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
24c0c     00 26 06 F6 | 	mov	local05, #0
24c10     10 4E 85 F1 | 	sub	fp, #16
24c14     97 2A 48 FB | 	callpa	#(@LR__3810-@LR__3808)>>2,fcache_load_ptr_
24c18                 | LR__3808
24c18     15 27 12 F2 | 	cmp	local05, local07 wc
24c1c     4C 00 90 3D |  if_ae	jmp	#LR__3811
24c20     13 29 02 F6 | 	mov	local06, local05
24c24     0F 29 02 F1 | 	add	local06, local01
24c28     14 29 C2 FA | 	rdbyte	local06, local06
24c2c     20 28 0E F2 | 	cmp	local06, #32 wz
24c30     38 00 90 AD |  if_e	jmp	#LR__3811
24c34     13 13 02 F6 | 	mov	arg01, local05
24c38     0F 13 02 F1 | 	add	arg01, local01
24c3c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
24c40     00 FA 05 56 |  if_ne	mov	result1, #0
24c44                 | ' 
24c44                 | ' 	return 0;
24c44     00 FA 05 A6 |  if_e	mov	result1, #0
24c48     00 FA 0D F2 | 	cmp	result1, #0 wz
24c4c     14 00 90 AD |  if_e	jmp	#LR__3809
24c50     15 29 02 F6 | 	mov	local06, local07
24c54     01 28 86 F1 | 	sub	local06, #1
24c58     14 27 0A F2 | 	cmp	local05, local06 wz
24c5c     0C 00 90 AD |  if_e	jmp	#LR__3811
24c60     01 26 06 F1 | 	add	local05, #1
24c64                 | LR__3809
24c64     01 26 06 F1 | 	add	local05, #1
24c68     AC FF 9F FD | 	jmp	#LR__3808
24c6c                 | LR__3810
24c6c                 | LR__3811
24c6c     97 20 48 FB | 	callpa	#(@LR__3815-@LR__3812)>>2,fcache_load_ptr_
24c70                 | ' 			j++;
24c70                 | ' 		}
24c70                 | ' 	}
24c70                 | ' 	do {
24c70                 | LR__3812
24c70     13 29 02 F6 | 	mov	local06, local05
24c74     0F 29 02 F1 | 	add	local06, local01
24c78     08 2A 16 F2 | 	cmp	local07, #8 wc
24c7c     01 26 06 F1 | 	add	local05, #1
24c80     1C 00 90 3D |  if_ae	jmp	#LR__3813
24c84     15 25 02 F6 | 	mov	local04, local07
24c88     10 4E 05 F1 | 	add	fp, #16
24c8c     A7 24 02 F1 | 	add	local04, fp
24c90     12 2D C2 FA | 	rdbyte	local08, local04
24c94     01 2A 06 F1 | 	add	local07, #1
24c98     10 4E 85 F1 | 	sub	fp, #16
24c9c     04 00 90 FD | 	jmp	#LR__3814
24ca0                 | LR__3813
24ca0     20 2C 06 F6 | 	mov	local08, #32
24ca4                 | LR__3814
24ca4     14 2D 42 FC | 	wrbyte	local08, local06
24ca8     08 26 16 F2 | 	cmp	local05, #8 wc
24cac     C0 FF 9F CD |  if_b	jmp	#LR__3812
24cb0                 | LR__3815
24cb0     A7 F0 03 F6 | 	mov	ptra, fp
24cb4     B2 00 A0 FD | 	call	#popregs_
24cb8                 | _fatfs_cc_gen_numname_ret
24cb8     2D 00 64 FD | 	ret
24cbc                 | 
24cbc                 | _fatfs_cc_sum_sfn
24cbc     00 00 06 F6 | 	mov	_var01, #0
24cc0                 | ' )
24cc0                 | ' {
24cc0                 | ' 	BYTE sum = 0;
24cc0                 | ' 	UINT n = 11;
24cc0                 | ' 
24cc0                 | ' 	do {
24cc0     97 12 48 FB | 	callpa	#(@LR__3822-@LR__3820)>>2,fcache_load_ptr_
24cc4                 | LR__3820
24cc4     0B 10 DC FC | 	rep	@LR__3823, #11
24cc8                 | LR__3821
24cc8     00 FB E1 F8 | 	getbyte	result1, _var01, #0
24ccc     01 FA 45 F0 | 	shr	result1, #1
24cd0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
24cd4     07 00 66 F0 | 	shl	_var01, #7
24cd8     00 FB 01 F1 | 	add	result1, _var01
24cdc     09 01 C2 FA | 	rdbyte	_var01, arg01
24ce0     FD 00 02 F1 | 	add	_var01, result1
24ce4     01 12 06 F1 | 	add	arg01, #1
24ce8                 | LR__3822
24ce8                 | LR__3823
24ce8                 | ' 	return sum;
24ce8     00 FB 01 F6 | 	mov	result1, _var01
24cec                 | _fatfs_cc_sum_sfn_ret
24cec     2D 00 64 FD | 	ret
24cf0                 | 
24cf0                 | _fatfs_cc_dir_read
24cf0     0C 4A 05 F6 | 	mov	COUNT_, #12
24cf4     A8 00 A0 FD | 	call	#pushregs_
24cf8     09 1F 02 F6 | 	mov	local01, arg01
24cfc     0A 21 02 F6 | 	mov	local02, arg02
24d00     04 22 06 F6 | 	mov	local03, #4
24d04     0F 25 02 FB | 	rdlong	local04, local01
24d08     FF 26 06 F6 | 	mov	local05, #255
24d0c     FF 28 06 F6 | 	mov	local06, #255
24d10                 | ' )
24d10                 | ' {
24d10                 | ' 	FRESULT res = FR_NO_FILE;
24d10                 | ' 	FATFS *fs = dp->obj.fs;
24d10                 | ' 	BYTE attr, b;
24d10                 | ' 
24d10                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
24d10                 | ' 
24d10                 | ' 
24d10                 | ' 	while (dp->sect) {
24d10                 | LR__3830
24d10     18 1E 06 F1 | 	add	local01, #24
24d14     0F FB 09 FB | 	rdlong	result1, local01 wz
24d18     18 1E 86 F1 | 	sub	local01, #24
24d1c     AC 01 90 AD |  if_e	jmp	#LR__3840
24d20     18 1E 06 F1 | 	add	local01, #24
24d24     0F 15 02 FB | 	rdlong	arg02, local01
24d28     18 1E 86 F1 | 	sub	local01, #24
24d2c     12 13 02 F6 | 	mov	arg01, local04
24d30     AC ED BF FD | 	call	#_fatfs_cc_move_window
24d34     FD 22 0A F6 | 	mov	local03, result1 wz
24d38     90 01 90 5D |  if_ne	jmp	#LR__3840
24d3c     1C 1E 06 F1 | 	add	local01, #28
24d40     0F FB 01 FB | 	rdlong	result1, local01
24d44     1C 1E 86 F1 | 	sub	local01, #28
24d48     FD 2A C2 FA | 	rdbyte	local07, result1
24d4c     15 FB 01 F6 | 	mov	result1, local07
24d50     07 FA 4D F7 | 	zerox	result1, #7 wz
24d54     04 22 06 A6 |  if_e	mov	local03, #4
24d58                 | ' 			res = FR_NO_FILE; break;
24d58     70 01 90 AD |  if_e	jmp	#LR__3840
24d5c     1C 1E 06 F1 | 	add	local01, #28
24d60     0F 2D 02 FB | 	rdlong	local08, local01
24d64     0B 2C 06 F1 | 	add	local08, #11
24d68     16 2F C2 FA | 	rdbyte	local09, local08
24d6c     3F 2E 06 F5 | 	and	local09, #63
24d70     16 1E 86 F1 | 	sub	local01, #22
24d74     0F 2F 42 FC | 	wrbyte	local09, local01
24d78     06 1E 86 F1 | 	sub	local01, #6
24d7c     15 FB E1 F8 | 	getbyte	result1, local07, #0
24d80     E5 FA 0D F2 | 	cmp	result1, #229 wz
24d84     15 2D 02 56 |  if_ne	mov	local08, local07
24d88     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
24d8c     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
24d90     1C 00 90 AD |  if_e	jmp	#LR__3831
24d94     00 30 06 F6 | 	mov	local10, #0
24d98     17 2D E2 F8 | 	getbyte	local08, local09, #0
24d9c     20 2C 26 F5 | 	andn	local08, #32
24da0     08 2C 0E F2 | 	cmp	local08, #8 wz
24da4     01 30 06 A6 |  if_e	mov	local10, #1
24da8     10 31 0A F2 | 	cmp	local10, local02 wz
24dac     08 00 90 AD |  if_e	jmp	#LR__3832
24db0                 | LR__3831
24db0     FF 26 06 F6 | 	mov	local05, #255
24db4     00 01 90 FD | 	jmp	#LR__3839
24db8                 | LR__3832
24db8     17 2F E2 F8 | 	getbyte	local09, local09, #0
24dbc     0F 2E 0E F2 | 	cmp	local09, #15 wz
24dc0     B4 00 90 5D |  if_ne	jmp	#LR__3836
24dc4     15 33 E2 F8 | 	getbyte	local11, local07, #0
24dc8     40 32 CE F7 | 	test	local11, #64 wz
24dcc     30 00 90 AD |  if_e	jmp	#LR__3833
24dd0     1C 1E 06 F1 | 	add	local01, #28
24dd4     0F 33 02 FB | 	rdlong	local11, local01
24dd8     0D 32 06 F1 | 	add	local11, #13
24ddc     19 29 C2 FA | 	rdbyte	local06, local11
24de0     15 2B E2 F8 | 	getbyte	local07, local07, #0
24de4     BF 2A 06 F5 | 	and	local07, #191
24de8     15 27 02 F6 | 	mov	local05, local07
24dec     0C 1E 86 F1 | 	sub	local01, #12
24df0     0F 33 02 FB | 	rdlong	local11, local01
24df4     1C 1E 06 F1 | 	add	local01, #28
24df8     0F 33 62 FC | 	wrlong	local11, local01
24dfc     2C 1E 86 F1 | 	sub	local01, #44
24e00                 | LR__3833
24e00     15 2D E2 F8 | 	getbyte	local08, local07, #0
24e04     13 31 E2 F8 | 	getbyte	local10, local05, #0
24e08     18 2D 0A F2 | 	cmp	local08, local10 wz
24e0c     5C 00 90 5D |  if_ne	jmp	#LR__3834
24e10     14 31 E2 F8 | 	getbyte	local10, local06, #0
24e14     1C 1E 06 F1 | 	add	local01, #28
24e18     0F 2F 02 FB | 	rdlong	local09, local01
24e1c     1C 1E 86 F1 | 	sub	local01, #28
24e20     0D 2E 06 F1 | 	add	local09, #13
24e24     17 2D C2 FA | 	rdbyte	local08, local09
24e28     16 2F E2 F8 | 	getbyte	local09, local08, #0
24e2c     17 31 0A F2 | 	cmp	local10, local09 wz
24e30     38 00 90 5D |  if_ne	jmp	#LR__3834
24e34     0C 24 06 F1 | 	add	local04, #12
24e38     12 13 02 FB | 	rdlong	arg01, local04
24e3c     0C 24 86 F1 | 	sub	local04, #12
24e40     1C 1E 06 F1 | 	add	local01, #28
24e44     0F 35 02 FB | 	rdlong	local12, local01
24e48     1C 1E 86 F1 | 	sub	local01, #28
24e4c     1A 15 02 F6 | 	mov	arg02, local12
24e50     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
24e54     00 FA 4D F2 | 	cmps	result1, #0 wz
24e58     13 35 02 56 |  if_ne	mov	local12, local05
24e5c     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
24e60     01 34 86 51 |  if_ne	sub	local12, #1
24e64     1A 33 02 56 |  if_ne	mov	local11, local12
24e68     04 00 90 5D |  if_ne	jmp	#LR__3835
24e6c                 | LR__3834
24e6c     FF 32 06 F6 | 	mov	local11, #255
24e70                 | LR__3835
24e70     19 27 02 F6 | 	mov	local05, local11
24e74     40 00 90 FD | 	jmp	#LR__3838
24e78                 | LR__3836
24e78     13 33 02 F6 | 	mov	local11, local05
24e7c     07 32 4E F7 | 	zerox	local11, #7 wz
24e80     20 00 90 5D |  if_ne	jmp	#LR__3837
24e84     14 29 E2 F8 | 	getbyte	local06, local06, #0
24e88     1C 1E 06 F1 | 	add	local01, #28
24e8c     0F 13 02 FB | 	rdlong	arg01, local01
24e90     1C 1E 86 F1 | 	sub	local01, #28
24e94     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
24e98     FD FA E1 F8 | 	getbyte	result1, result1, #0
24e9c     FD 28 0A F2 | 	cmp	local06, result1 wz
24ea0     28 00 90 AD |  if_e	jmp	#LR__3840
24ea4                 | LR__3837
24ea4     2C 1E 06 F1 | 	add	local01, #44
24ea8     FF FF FF FF 
24eac     0F FF 6B FC | 	wrlong	##-1, local01
24eb0     2C 1E 86 F1 | 	sub	local01, #44
24eb4                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
24eb4                 | ' 					}
24eb4                 | ' 					break;
24eb4     14 00 90 FD | 	jmp	#LR__3840
24eb8                 | LR__3838
24eb8                 | LR__3839
24eb8     0F 13 02 F6 | 	mov	arg01, local01
24ebc     00 14 06 F6 | 	mov	arg02, #0
24ec0     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
24ec4     FD 22 0A F6 | 	mov	local03, result1 wz
24ec8     44 FE 9F AD |  if_e	jmp	#LR__3830
24ecc                 | LR__3840
24ecc     00 22 0E F2 | 	cmp	local03, #0 wz
24ed0     18 1E 06 51 |  if_ne	add	local01, #24
24ed4     0F 01 68 5C |  if_ne	wrlong	#0, local01
24ed8                 | ' 	return res;
24ed8     11 FB 01 F6 | 	mov	result1, local03
24edc     A7 F0 03 F6 | 	mov	ptra, fp
24ee0     B2 00 A0 FD | 	call	#popregs_
24ee4                 | _fatfs_cc_dir_read_ret
24ee4     2D 00 64 FD | 	ret
24ee8                 | 
24ee8                 | _fatfs_cc_dir_find
24ee8     0B 4A 05 F6 | 	mov	COUNT_, #11
24eec     A8 00 A0 FD | 	call	#pushregs_
24ef0     09 1F 02 F6 | 	mov	local01, arg01
24ef4     0F 21 02 FB | 	rdlong	local02, local01
24ef8     0F 13 02 F6 | 	mov	arg01, local01
24efc     00 14 06 F6 | 	mov	arg02, #0
24f00     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
24f04     00 FA 0D F2 | 	cmp	result1, #0 wz
24f08     18 02 90 5D |  if_ne	jmp	#LR__3862
24f0c     FF 22 06 F6 | 	mov	local03, #255
24f10     FF 24 06 F6 | 	mov	local04, #255
24f14     2C 1E 06 F1 | 	add	local01, #44
24f18     FF FF FF FF 
24f1c     0F FF 6B FC | 	wrlong	##-1, local01
24f20     2C 1E 86 F1 | 	sub	local01, #44
24f24                 | ' #line 2404 "ff.c"
24f24                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
24f24                 | ' 
24f24                 | ' 	do {
24f24                 | LR__3850
24f24     18 1E 06 F1 | 	add	local01, #24
24f28     0F 15 02 FB | 	rdlong	arg02, local01
24f2c     18 1E 86 F1 | 	sub	local01, #24
24f30     10 13 02 F6 | 	mov	arg01, local02
24f34     A8 EB BF FD | 	call	#_fatfs_cc_move_window
24f38     FD 26 0A F6 | 	mov	local05, result1 wz
24f3c     E0 01 90 5D |  if_ne	jmp	#LR__3861
24f40     1C 1E 06 F1 | 	add	local01, #28
24f44     0F 17 02 FB | 	rdlong	arg03, local01
24f48     1C 1E 86 F1 | 	sub	local01, #28
24f4c     0B 29 C2 FA | 	rdbyte	local06, arg03
24f50     14 17 02 F6 | 	mov	arg03, local06
24f54     07 16 4E F7 | 	zerox	arg03, #7 wz
24f58     04 26 06 A6 |  if_e	mov	local05, #4
24f5c     C0 01 90 AD |  if_e	jmp	#LR__3861
24f60     1C 1E 06 F1 | 	add	local01, #28
24f64     0F 2B 02 FB | 	rdlong	local07, local01
24f68     15 17 02 F6 | 	mov	arg03, local07
24f6c     0B 16 06 F1 | 	add	arg03, #11
24f70     0B 2D C2 FA | 	rdbyte	local08, arg03
24f74     3F 2C 06 F5 | 	and	local08, #63
24f78     16 1E 86 F1 | 	sub	local01, #22
24f7c     0F 2D 42 FC | 	wrbyte	local08, local01
24f80     06 1E 86 F1 | 	sub	local01, #6
24f84     14 17 E2 F8 | 	getbyte	arg03, local06, #0
24f88     E5 16 0E F2 | 	cmp	arg03, #229 wz
24f8c     18 00 90 AD |  if_e	jmp	#LR__3851
24f90     16 17 E2 F8 | 	getbyte	arg03, local08, #0
24f94     08 16 CE F7 | 	test	arg03, #8 wz
24f98     16 2B 02 56 |  if_ne	mov	local07, local08
24f9c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
24fa0     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
24fa4     18 00 90 AD |  if_e	jmp	#LR__3852
24fa8                 | LR__3851
24fa8     FF 24 06 F6 | 	mov	local04, #255
24fac     2C 1E 06 F1 | 	add	local01, #44
24fb0     FF FF FF FF 
24fb4     0F FF 6B FC | 	wrlong	##-1, local01
24fb8     2C 1E 86 F1 | 	sub	local01, #44
24fbc     4C 01 90 FD | 	jmp	#LR__3860
24fc0                 | LR__3852
24fc0     16 2D E2 F8 | 	getbyte	local08, local08, #0
24fc4     0F 2C 0E F2 | 	cmp	local08, #15 wz
24fc8     C8 00 90 5D |  if_ne	jmp	#LR__3856
24fcc     2B 1E 06 F1 | 	add	local01, #43
24fd0     0F 2D C2 FA | 	rdbyte	local08, local01
24fd4     2B 1E 86 F1 | 	sub	local01, #43
24fd8     40 2C CE F7 | 	test	local08, #64 wz
24fdc     2C 01 90 5D |  if_ne	jmp	#LR__3859
24fe0     14 2F E2 F8 | 	getbyte	local09, local06, #0
24fe4     40 2E CE F7 | 	test	local09, #64 wz
24fe8     30 00 90 AD |  if_e	jmp	#LR__3853
24fec     1C 1E 06 F1 | 	add	local01, #28
24ff0     0F 2F 02 FB | 	rdlong	local09, local01
24ff4     0D 2E 06 F1 | 	add	local09, #13
24ff8     17 23 C2 FA | 	rdbyte	local03, local09
24ffc     14 29 E2 F8 | 	getbyte	local06, local06, #0
25000     BF 28 06 F5 | 	and	local06, #191
25004     14 25 02 F6 | 	mov	local04, local06
25008     0C 1E 86 F1 | 	sub	local01, #12
2500c     0F 2F 02 FB | 	rdlong	local09, local01
25010     1C 1E 06 F1 | 	add	local01, #28
25014     0F 2F 62 FC | 	wrlong	local09, local01
25018     2C 1E 86 F1 | 	sub	local01, #44
2501c                 | LR__3853
2501c     14 31 E2 F8 | 	getbyte	local10, local06, #0
25020     12 2B E2 F8 | 	getbyte	local07, local04, #0
25024     15 31 0A F2 | 	cmp	local10, local07 wz
25028     5C 00 90 5D |  if_ne	jmp	#LR__3854
2502c     11 2D E2 F8 | 	getbyte	local08, local03, #0
25030     1C 1E 06 F1 | 	add	local01, #28
25034     0F 2B 02 FB | 	rdlong	local07, local01
25038     1C 1E 86 F1 | 	sub	local01, #28
2503c     0D 2A 06 F1 | 	add	local07, #13
25040     15 29 C2 FA | 	rdbyte	local06, local07
25044     14 2B E2 F8 | 	getbyte	local07, local06, #0
25048     15 2D 0A F2 | 	cmp	local08, local07 wz
2504c     38 00 90 5D |  if_ne	jmp	#LR__3854
25050     0C 20 06 F1 | 	add	local02, #12
25054     10 13 02 FB | 	rdlong	arg01, local02
25058     0C 20 86 F1 | 	sub	local02, #12
2505c     1C 1E 06 F1 | 	add	local01, #28
25060     0F 33 02 FB | 	rdlong	local11, local01
25064     1C 1E 86 F1 | 	sub	local01, #28
25068     19 15 02 F6 | 	mov	arg02, local11
2506c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
25070     00 FA 4D F2 | 	cmps	result1, #0 wz
25074     12 33 02 56 |  if_ne	mov	local11, local04
25078     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2507c     01 32 86 51 |  if_ne	sub	local11, #1
25080     19 2F 02 56 |  if_ne	mov	local09, local11
25084     04 00 90 5D |  if_ne	jmp	#LR__3855
25088                 | LR__3854
25088     FF 2E 06 F6 | 	mov	local09, #255
2508c                 | LR__3855
2508c     17 25 02 F6 | 	mov	local04, local09
25090     78 00 90 FD | 	jmp	#LR__3859
25094                 | LR__3856
25094     12 2F 02 F6 | 	mov	local09, local04
25098     07 2E 4E F7 | 	zerox	local09, #7 wz
2509c     20 00 90 5D |  if_ne	jmp	#LR__3857
250a0     11 31 E2 F8 | 	getbyte	local10, local03, #0
250a4     1C 1E 06 F1 | 	add	local01, #28
250a8     0F 13 02 FB | 	rdlong	arg01, local01
250ac     1C 1E 86 F1 | 	sub	local01, #28
250b0     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
250b4     FD FA E1 F8 | 	getbyte	result1, result1, #0
250b8     FD 30 0A F2 | 	cmp	local10, result1 wz
250bc     60 00 90 AD |  if_e	jmp	#LR__3861
250c0                 | LR__3857
250c0     2B 1E 06 F1 | 	add	local01, #43
250c4     0F 2F C2 FA | 	rdbyte	local09, local01
250c8     2B 1E 86 F1 | 	sub	local01, #43
250cc     01 2E CE F7 | 	test	local09, #1 wz
250d0     24 00 90 5D |  if_ne	jmp	#LR__3858
250d4     1C 1E 06 F1 | 	add	local01, #28
250d8     0F 13 02 FB | 	rdlong	arg01, local01
250dc     04 1E 06 F1 | 	add	local01, #4
250e0     0F 15 02 F6 | 	mov	arg02, local01
250e4     20 1E 86 F1 | 	sub	local01, #32
250e8     0B 16 06 F6 | 	mov	arg03, #11
250ec     88 DA BF FD | 	call	#_fatfs_cc_memcmp
250f0     00 FA 0D F2 | 	cmp	result1, #0 wz
250f4     28 00 90 AD |  if_e	jmp	#LR__3861
250f8                 | LR__3858
250f8     FF 24 06 F6 | 	mov	local04, #255
250fc     2C 1E 06 F1 | 	add	local01, #44
25100     FF FF FF FF 
25104     0F FF 6B FC | 	wrlong	##-1, local01
25108     2C 1E 86 F1 | 	sub	local01, #44
2510c                 | LR__3859
2510c                 | LR__3860
2510c     0F 13 02 F6 | 	mov	arg01, local01
25110     00 14 06 F6 | 	mov	arg02, #0
25114     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
25118     FD 26 0A F6 | 	mov	local05, result1 wz
2511c     04 FE 9F AD |  if_e	jmp	#LR__3850
25120                 | LR__3861
25120                 | ' 
25120                 | ' 	return res;
25120     13 FB 01 F6 | 	mov	result1, local05
25124                 | LR__3862
25124     A7 F0 03 F6 | 	mov	ptra, fp
25128     B2 00 A0 FD | 	call	#popregs_
2512c                 | _fatfs_cc_dir_find_ret
2512c     2D 00 64 FD | 	ret
25130                 | 
25130                 | _fatfs_cc_dir_register
25130     0A 4A 05 F6 | 	mov	COUNT_, #10
25134     A8 00 A0 FD | 	call	#pushregs_
25138     2C F0 07 F1 | 	add	ptra, #44
2513c     04 4E 05 F1 | 	add	fp, #4
25140     A7 12 62 FC | 	wrlong	arg01, fp
25144     09 1F 02 FB | 	rdlong	local01, arg01
25148     08 4E 05 F1 | 	add	fp, #8
2514c     A7 1E 62 FC | 	wrlong	local01, fp
25150     08 4E 85 F1 | 	sub	fp, #8
25154     A7 20 02 FB | 	rdlong	local02, fp
25158     04 4E 85 F1 | 	sub	fp, #4
2515c     2B 20 06 F1 | 	add	local02, #43
25160     10 21 C2 FA | 	rdbyte	local02, local02
25164     A0 20 CE F7 | 	test	local02, #160 wz
25168     06 FA 05 56 |  if_ne	mov	result1, #6
2516c     F8 03 90 5D |  if_ne	jmp	#LR__3885
25170                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
25170     14 4E 05 F1 | 	add	fp, #20
25174     A7 00 68 FC | 	wrlong	#0, fp
25178     14 4E 85 F1 | 	sub	fp, #20
2517c     97 28 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
25180                 | LR__3870
25180     0C 4E 05 F1 | 	add	fp, #12
25184     A7 20 02 FB | 	rdlong	local02, fp
25188     0C 20 06 F1 | 	add	local02, #12
2518c     10 23 02 FB | 	rdlong	local03, local02
25190     08 4E 05 F1 | 	add	fp, #8
25194     A7 24 02 FB | 	rdlong	local04, fp
25198     14 4E 85 F1 | 	sub	fp, #20
2519c     01 24 66 F0 | 	shl	local04, #1
251a0     11 25 02 F1 | 	add	local04, local03
251a4     12 21 EA FA | 	rdword	local02, local04 wz
251a8     24 00 90 AD |  if_e	jmp	#LR__3872
251ac     14 4E 05 F1 | 	add	fp, #20
251b0     A7 26 02 FB | 	rdlong	local05, fp
251b4     13 29 02 F6 | 	mov	local06, local05
251b8     13 2B 02 F6 | 	mov	local07, local05
251bc     15 2D 02 F6 | 	mov	local08, local07
251c0     01 2C 06 F1 | 	add	local08, #1
251c4     A7 2C 62 FC | 	wrlong	local08, fp
251c8     14 4E 85 F1 | 	sub	fp, #20
251cc     B0 FF 9F FD | 	jmp	#LR__3870
251d0                 | LR__3871
251d0                 | LR__3872
251d0     1C 4E 05 F1 | 	add	fp, #28
251d4     A7 12 02 F6 | 	mov	arg01, fp
251d8     18 4E 85 F1 | 	sub	fp, #24
251dc     A7 14 02 FB | 	rdlong	arg02, fp
251e0     04 4E 85 F1 | 	sub	fp, #4
251e4     20 14 06 F1 | 	add	arg02, #32
251e8     0C 16 06 F6 | 	mov	arg03, #12
251ec     7C 71 BF FD | 	call	#__system____builtin_memmove
251f0     27 4E 05 F1 | 	add	fp, #39
251f4     A7 2E C2 FA | 	rdbyte	local09, fp
251f8     27 4E 85 F1 | 	sub	fp, #39
251fc     01 2E CE F7 | 	test	local09, #1 wz
25200     F4 00 90 AD |  if_e	jmp	#LR__3875
25204     04 4E 05 F1 | 	add	fp, #4
25208     A7 30 02 FB | 	rdlong	local10, fp
2520c     2B 30 06 F1 | 	add	local10, #43
25210     18 81 48 FC | 	wrbyte	#64, local10
25214                 | ' 		dp->fn[ 11 ] =  0x40 ;
25214                 | ' 		for (n = 1; n < 100; n++) {
25214     0C 4E 05 F1 | 	add	fp, #12
25218     A7 02 68 FC | 	wrlong	#1, fp
2521c     10 4E 85 F1 | 	sub	fp, #16
25220                 | LR__3873
25220     10 4E 05 F1 | 	add	fp, #16
25224     A7 20 02 FB | 	rdlong	local02, fp
25228     10 4E 85 F1 | 	sub	fp, #16
2522c     64 20 16 F2 | 	cmp	local02, #100 wc
25230     70 00 90 3D |  if_ae	jmp	#LR__3874
25234     04 4E 05 F1 | 	add	fp, #4
25238     A7 12 02 FB | 	rdlong	arg01, fp
2523c     20 12 06 F1 | 	add	arg01, #32
25240     18 4E 05 F1 | 	add	fp, #24
25244     A7 14 02 F6 | 	mov	arg02, fp
25248     10 4E 85 F1 | 	sub	fp, #16
2524c     A7 30 02 FB | 	rdlong	local10, fp
25250     0C 30 06 F1 | 	add	local10, #12
25254     18 17 02 FB | 	rdlong	arg03, local10
25258     04 4E 05 F1 | 	add	fp, #4
2525c     A7 18 02 FB | 	rdlong	arg04, fp
25260     10 4E 85 F1 | 	sub	fp, #16
25264     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
25268     04 4E 05 F1 | 	add	fp, #4
2526c     A7 12 02 FB | 	rdlong	arg01, fp
25270     04 4E 85 F1 | 	sub	fp, #4
25274     70 FC BF FD | 	call	#_fatfs_cc_dir_find
25278     08 4E 05 F1 | 	add	fp, #8
2527c     A7 FA 61 FC | 	wrlong	result1, fp
25280     00 FA 4D F2 | 	cmps	result1, #0 wz
25284     08 4E 85 F1 | 	sub	fp, #8
25288     18 00 90 5D |  if_ne	jmp	#LR__3874
2528c     10 4E 05 F1 | 	add	fp, #16
25290     A7 30 02 FB | 	rdlong	local10, fp
25294     01 30 06 F1 | 	add	local10, #1
25298     A7 30 62 FC | 	wrlong	local10, fp
2529c     10 4E 85 F1 | 	sub	fp, #16
252a0     7C FF 9F FD | 	jmp	#LR__3873
252a4                 | LR__3874
252a4     10 4E 05 F1 | 	add	fp, #16
252a8     A7 30 02 FB | 	rdlong	local10, fp
252ac     10 4E 85 F1 | 	sub	fp, #16
252b0     64 30 0E F2 | 	cmp	local10, #100 wz
252b4     07 FA 05 A6 |  if_e	mov	result1, #7
252b8     AC 02 90 AD |  if_e	jmp	#LR__3885
252bc     08 4E 05 F1 | 	add	fp, #8
252c0     A7 30 02 FB | 	rdlong	local10, fp
252c4     08 4E 85 F1 | 	sub	fp, #8
252c8     04 30 0E F2 | 	cmp	local10, #4 wz
252cc     08 4E 05 51 |  if_ne	add	fp, #8
252d0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
252d4     08 4E 85 51 |  if_ne	sub	fp, #8
252d8     8C 02 90 5D |  if_ne	jmp	#LR__3885
252dc     04 4E 05 F1 | 	add	fp, #4
252e0     A7 30 02 FB | 	rdlong	local10, fp
252e4     23 4E 05 F1 | 	add	fp, #35
252e8     A7 1E C2 FA | 	rdbyte	local01, fp
252ec     27 4E 85 F1 | 	sub	fp, #39
252f0     2B 30 06 F1 | 	add	local10, #43
252f4     18 1F 42 FC | 	wrbyte	local01, local10
252f8                 | LR__3875
252f8     27 4E 05 F1 | 	add	fp, #39
252fc     A7 20 C2 FA | 	rdbyte	local02, fp
25300     27 4E 85 F1 | 	sub	fp, #39
25304     02 20 CE F7 | 	test	local02, #2 wz
25308     20 00 90 AD |  if_e	jmp	#LR__3876
2530c     14 4E 05 F1 | 	add	fp, #20
25310     A7 30 02 FB | 	rdlong	local10, fp
25314     0C 30 06 F1 | 	add	local10, #12
25318     0D 30 16 FD | 	qdiv	local10, #13
2531c     14 4E 85 F1 | 	sub	fp, #20
25320     18 30 62 FD | 	getqx	local10
25324     01 30 06 F1 | 	add	local10, #1
25328     04 00 90 FD | 	jmp	#LR__3877
2532c                 | LR__3876
2532c     01 30 06 F6 | 	mov	local10, #1
25330                 | LR__3877
25330     18 4E 05 F1 | 	add	fp, #24
25334     A7 30 62 FC | 	wrlong	local10, fp
25338     14 4E 85 F1 | 	sub	fp, #20
2533c     A7 12 02 FB | 	rdlong	arg01, fp
25340     18 15 02 F6 | 	mov	arg02, local10
25344     04 4E 85 F1 | 	sub	fp, #4
25348     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2534c     08 4E 05 F1 | 	add	fp, #8
25350     A7 FA 61 FC | 	wrlong	result1, fp
25354     08 4E 85 F1 | 	sub	fp, #8
25358     00 FA 0D F2 | 	cmp	result1, #0 wz
2535c     38 01 90 5D |  if_ne	jmp	#LR__3882
25360     18 4E 05 F1 | 	add	fp, #24
25364     A7 30 02 FB | 	rdlong	local10, fp
25368     01 30 8E F1 | 	sub	local10, #1 wz
2536c     A7 30 62 FC | 	wrlong	local10, fp
25370     18 4E 85 F1 | 	sub	fp, #24
25374     20 01 90 AD |  if_e	jmp	#LR__3882
25378     04 4E 05 F1 | 	add	fp, #4
2537c     A7 30 02 FB | 	rdlong	local10, fp
25380     18 13 02 F6 | 	mov	arg01, local10
25384     14 4E 05 F1 | 	add	fp, #20
25388     A7 18 02 FB | 	rdlong	arg04, fp
2538c     18 4E 85 F1 | 	sub	fp, #24
25390     05 18 66 F0 | 	shl	arg04, #5
25394     10 30 06 F1 | 	add	local10, #16
25398     18 15 02 FB | 	rdlong	arg02, local10
2539c     0C 15 82 F1 | 	sub	arg02, arg04
253a0     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
253a4     08 4E 05 F1 | 	add	fp, #8
253a8     A7 FA 61 FC | 	wrlong	result1, fp
253ac     08 4E 85 F1 | 	sub	fp, #8
253b0     00 FA 0D F2 | 	cmp	result1, #0 wz
253b4     E0 00 90 5D |  if_ne	jmp	#LR__3881
253b8     04 4E 05 F1 | 	add	fp, #4
253bc     A7 12 02 FB | 	rdlong	arg01, fp
253c0     04 4E 85 F1 | 	sub	fp, #4
253c4     20 12 06 F1 | 	add	arg01, #32
253c8     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
253cc     FD 30 02 F6 | 	mov	local10, result1
253d0     28 4E 05 F1 | 	add	fp, #40
253d4     A7 30 42 FC | 	wrbyte	local10, fp
253d8     28 4E 85 F1 | 	sub	fp, #40
253dc                 | ' 			sum = sum_sfn(dp->fn);
253dc                 | ' 			do {
253dc                 | LR__3878
253dc     0C 4E 05 F1 | 	add	fp, #12
253e0     A7 12 02 FB | 	rdlong	arg01, fp
253e4     08 4E 85 F1 | 	sub	fp, #8
253e8     A7 1E 02 FB | 	rdlong	local01, fp
253ec     04 4E 85 F1 | 	sub	fp, #4
253f0     18 1E 06 F1 | 	add	local01, #24
253f4     0F 15 02 FB | 	rdlong	arg02, local01
253f8     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
253fc     08 4E 05 F1 | 	add	fp, #8
25400     A7 FA 61 FC | 	wrlong	result1, fp
25404     00 FA 4D F2 | 	cmps	result1, #0 wz
25408     08 4E 85 F1 | 	sub	fp, #8
2540c     88 00 90 5D |  if_ne	jmp	#LR__3880
25410     0C 4E 05 F1 | 	add	fp, #12
25414     A7 20 02 FB | 	rdlong	local02, fp
25418     0C 20 06 F1 | 	add	local02, #12
2541c     10 13 02 FB | 	rdlong	arg01, local02
25420     08 4E 85 F1 | 	sub	fp, #8
25424     A7 1E 02 FB | 	rdlong	local01, fp
25428     1C 1E 06 F1 | 	add	local01, #28
2542c     0F 15 02 FB | 	rdlong	arg02, local01
25430     14 4E 05 F1 | 	add	fp, #20
25434     A7 16 02 FB | 	rdlong	arg03, fp
25438     10 4E 05 F1 | 	add	fp, #16
2543c     A7 18 C2 FA | 	rdbyte	arg04, fp
25440     28 4E 85 F1 | 	sub	fp, #40
25444     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
25448     0C 4E 05 F1 | 	add	fp, #12
2544c     A7 30 02 FB | 	rdlong	local10, fp
25450     03 30 06 F1 | 	add	local10, #3
25454     18 03 48 FC | 	wrbyte	#1, local10
25458     08 4E 85 F1 | 	sub	fp, #8
2545c     A7 12 02 FB | 	rdlong	arg01, fp
25460     04 4E 85 F1 | 	sub	fp, #4
25464     00 14 06 F6 | 	mov	arg02, #0
25468     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2546c     08 4E 05 F1 | 	add	fp, #8
25470     A7 FA 61 FC | 	wrlong	result1, fp
25474     00 FA 4D F2 | 	cmps	result1, #0 wz
25478     08 4E 85 F1 | 	sub	fp, #8
2547c     18 00 90 5D |  if_ne	jmp	#LR__3879
25480     18 4E 05 F1 | 	add	fp, #24
25484     A7 30 02 FB | 	rdlong	local10, fp
25488     01 30 8E F1 | 	sub	local10, #1 wz
2548c     A7 30 62 FC | 	wrlong	local10, fp
25490     18 4E 85 F1 | 	sub	fp, #24
25494     44 FF 9F 5D |  if_ne	jmp	#LR__3878
25498                 | LR__3879
25498                 | LR__3880
25498                 | LR__3881
25498                 | LR__3882
25498     08 4E 05 F1 | 	add	fp, #8
2549c     A7 30 0A FB | 	rdlong	local10, fp wz
254a0     08 4E 85 F1 | 	sub	fp, #8
254a4     B4 00 90 5D |  if_ne	jmp	#LR__3884
254a8     0C 4E 05 F1 | 	add	fp, #12
254ac     A7 12 02 FB | 	rdlong	arg01, fp
254b0     08 4E 85 F1 | 	sub	fp, #8
254b4     A7 1E 02 FB | 	rdlong	local01, fp
254b8     04 4E 85 F1 | 	sub	fp, #4
254bc     18 1E 06 F1 | 	add	local01, #24
254c0     0F 15 02 FB | 	rdlong	arg02, local01
254c4     18 E6 BF FD | 	call	#_fatfs_cc_move_window
254c8     08 4E 05 F1 | 	add	fp, #8
254cc     A7 FA 61 FC | 	wrlong	result1, fp
254d0     08 4E 85 F1 | 	sub	fp, #8
254d4     00 FA 0D F2 | 	cmp	result1, #0 wz
254d8     80 00 90 5D |  if_ne	jmp	#LR__3883
254dc     04 4E 05 F1 | 	add	fp, #4
254e0     A7 20 02 FB | 	rdlong	local02, fp
254e4     04 4E 85 F1 | 	sub	fp, #4
254e8     1C 20 06 F1 | 	add	local02, #28
254ec     10 13 02 FB | 	rdlong	arg01, local02
254f0     00 14 06 F6 | 	mov	arg02, #0
254f4     20 16 06 F6 | 	mov	arg03, #32
254f8     98 00 A0 FD | 	call	#\builtin_bytefill_
254fc     04 4E 05 F1 | 	add	fp, #4
25500     A7 14 02 FB | 	rdlong	arg02, fp
25504     0A 1F 02 F6 | 	mov	local01, arg02
25508     1C 1E 06 F1 | 	add	local01, #28
2550c     0F 13 02 FB | 	rdlong	arg01, local01
25510     04 4E 85 F1 | 	sub	fp, #4
25514     20 14 06 F1 | 	add	arg02, #32
25518     0B 16 06 F6 | 	mov	arg03, #11
2551c     4C 6E BF FD | 	call	#__system____builtin_memmove
25520     04 4E 05 F1 | 	add	fp, #4
25524     A7 2E 02 FB | 	rdlong	local09, fp
25528     17 31 02 F6 | 	mov	local10, local09
2552c     1C 30 06 F1 | 	add	local10, #28
25530     18 1F 02 FB | 	rdlong	local01, local10
25534     2B 2E 06 F1 | 	add	local09, #43
25538     17 31 C2 FA | 	rdbyte	local10, local09
2553c     18 30 06 F5 | 	and	local10, #24
25540     0C 1E 06 F1 | 	add	local01, #12
25544     0F 31 42 FC | 	wrbyte	local10, local01
25548     08 4E 05 F1 | 	add	fp, #8
2554c     A7 30 02 FB | 	rdlong	local10, fp
25550     0C 4E 85 F1 | 	sub	fp, #12
25554     03 30 06 F1 | 	add	local10, #3
25558     18 03 48 FC | 	wrbyte	#1, local10
2555c                 | LR__3883
2555c                 | LR__3884
2555c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2555c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2555c                 | ' 
2555c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2555c                 | ' 
2555c                 | ' 			fs->wflag = 1;
2555c                 | ' 		}
2555c                 | ' 	}
2555c                 | ' 
2555c                 | ' 	return res;
2555c     08 4E 05 F1 | 	add	fp, #8
25560     A7 FA 01 FB | 	rdlong	result1, fp
25564     08 4E 85 F1 | 	sub	fp, #8
25568                 | LR__3885
25568     A7 F0 03 F6 | 	mov	ptra, fp
2556c     B2 00 A0 FD | 	call	#popregs_
25570                 | _fatfs_cc_dir_register_ret
25570     2D 00 64 FD | 	ret
25574                 | 
25574                 | _fatfs_cc_dir_remove
25574     05 4A 05 F6 | 	mov	COUNT_, #5
25578     A8 00 A0 FD | 	call	#pushregs_
2557c     09 1F 02 F6 | 	mov	local01, arg01
25580     0F 21 02 FB | 	rdlong	local02, local01
25584     10 1E 06 F1 | 	add	local01, #16
25588     0F 23 02 FB | 	rdlong	local03, local01
2558c     1C 1E 06 F1 | 	add	local01, #28
25590     0F 15 02 FB | 	rdlong	arg02, local01
25594     2C 1E 86 F1 | 	sub	local01, #44
25598     FF FF 7F FF 
2559c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
255a0     00 24 06 A6 |  if_e	mov	local04, #0
255a4     18 00 90 AD |  if_e	jmp	#LR__3890
255a8     0F 13 02 F6 | 	mov	arg01, local01
255ac     2C 1E 06 F1 | 	add	local01, #44
255b0     0F 15 02 FB | 	rdlong	arg02, local01
255b4     2C 1E 86 F1 | 	sub	local01, #44
255b8     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
255bc     FD 24 02 F6 | 	mov	local04, result1
255c0                 | LR__3890
255c0     12 27 0A F6 | 	mov	local05, local04 wz
255c4     64 00 90 5D |  if_ne	jmp	#LR__3893
255c8                 | ' 		do {
255c8                 | LR__3891
255c8     18 1E 06 F1 | 	add	local01, #24
255cc     0F 15 02 FB | 	rdlong	arg02, local01
255d0     18 1E 86 F1 | 	sub	local01, #24
255d4     10 13 02 F6 | 	mov	arg01, local02
255d8     04 E5 BF FD | 	call	#_fatfs_cc_move_window
255dc     FD 26 0A F6 | 	mov	local05, result1 wz
255e0     40 00 90 5D |  if_ne	jmp	#LR__3892
255e4     1C 1E 06 F1 | 	add	local01, #28
255e8     0F 25 02 FB | 	rdlong	local04, local01
255ec     12 CB 49 FC | 	wrbyte	#229, local04
255f0     03 20 06 F1 | 	add	local02, #3
255f4     10 03 48 FC | 	wrbyte	#1, local02
255f8     03 20 86 F1 | 	sub	local02, #3
255fc     0C 1E 86 F1 | 	sub	local01, #12
25600     0F 25 02 FB | 	rdlong	local04, local01
25604     10 1E 86 F1 | 	sub	local01, #16
25608     11 25 12 F2 | 	cmp	local04, local03 wc
2560c     14 00 90 3D |  if_ae	jmp	#LR__3892
25610     0F 13 02 F6 | 	mov	arg01, local01
25614     00 14 06 F6 | 	mov	arg02, #0
25618     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2561c     FD 26 0A F6 | 	mov	local05, result1 wz
25620     A4 FF 9F AD |  if_e	jmp	#LR__3891
25624                 | LR__3892
25624     04 26 0E F2 | 	cmp	local05, #4 wz
25628     02 26 06 A6 |  if_e	mov	local05, #2
2562c                 | LR__3893
2562c                 | ' 	}
2562c                 | ' #line 2590 "ff.c"
2562c                 | ' 	return res;
2562c     13 FB 01 F6 | 	mov	result1, local05
25630     A7 F0 03 F6 | 	mov	ptra, fp
25634     B2 00 A0 FD | 	call	#popregs_
25638                 | _fatfs_cc_dir_remove_ret
25638     2D 00 64 FD | 	ret
2563c                 | 
2563c                 | _fatfs_cc_get_fileinfo
2563c     0F 4A 05 F6 | 	mov	COUNT_, #15
25640     A8 00 A0 FD | 	call	#pushregs_
25644     09 1F 02 F6 | 	mov	local01, arg01
25648     0A 21 02 F6 | 	mov	local02, arg02
2564c     0F 23 02 FB | 	rdlong	local03, local01
25650     1C 20 06 F1 | 	add	local02, #28
25654     10 01 48 FC | 	wrbyte	#0, local02
25658     1C 20 86 F1 | 	sub	local02, #28
2565c     18 1E 06 F1 | 	add	local01, #24
25660     0F 25 0A FB | 	rdlong	local04, local01 wz
25664     18 1E 86 F1 | 	sub	local01, #24
25668     90 03 90 AD |  if_e	jmp	#LR__3914
2566c     2C 1E 06 F1 | 	add	local01, #44
25670     0F 25 02 FB | 	rdlong	local04, local01
25674     2C 1E 86 F1 | 	sub	local01, #44
25678     FF FF 7F FF 
2567c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
25680     D8 00 90 AD |  if_e	jmp	#LR__3903
25684     00 26 06 F6 | 	mov	local05, #0
25688     00 28 06 F6 | 	mov	local06, #0
2568c     00 2A 06 F6 | 	mov	local07, #0
25690                 | ' 			si = di = 0;
25690                 | ' 			hs = 0;
25690                 | ' 			while (fs->lfnbuf[si] != 0) {
25690                 | LR__3900
25690     0C 22 06 F1 | 	add	local03, #12
25694     11 25 02 FB | 	rdlong	local04, local03
25698     0C 22 86 F1 | 	sub	local03, #12
2569c     14 2D 02 F6 | 	mov	local08, local06
256a0     01 2C 66 F0 | 	shl	local08, #1
256a4     12 2D 02 F1 | 	add	local08, local04
256a8     16 25 EA FA | 	rdword	local04, local08 wz
256ac     90 00 90 AD |  if_e	jmp	#LR__3902
256b0     0C 22 06 F1 | 	add	local03, #12
256b4     11 2F 02 FB | 	rdlong	local09, local03
256b8     0C 22 86 F1 | 	sub	local03, #12
256bc     14 31 02 F6 | 	mov	local10, local06
256c0     01 30 66 F0 | 	shl	local10, #1
256c4     17 31 02 F1 | 	add	local10, local09
256c8     18 33 E2 FA | 	rdword	local11, local10
256cc     15 25 02 F6 | 	mov	local04, local07
256d0     0F 24 4E F7 | 	zerox	local04, #15 wz
256d4     01 28 06 F1 | 	add	local06, #1
256d8     24 00 90 5D |  if_ne	jmp	#LR__3901
256dc     19 35 32 F9 | 	getword	local12, local11, #0
256e0     6C 00 00 FF 
256e4     00 34 16 F2 | 	cmp	local12, ##55296 wc
256e8     14 00 90 CD |  if_b	jmp	#LR__3901
256ec     19 37 32 F9 | 	getword	local13, local11, #0
256f0     70 00 00 FF 
256f4     00 36 16 F2 | 	cmp	local13, ##57344 wc
256f8     19 2B 02 C6 |  if_b	mov	local07, local11
256fc                 | ' 					hs = wc; continue;
256fc     90 FF 9F CD |  if_b	jmp	#LR__3900
25700                 | LR__3901
25700     15 13 32 F9 | 	getword	arg01, local07, #0
25704     10 12 66 F0 | 	shl	arg01, #16
25708     19 33 32 F9 | 	getword	local11, local11, #0
2570c     19 13 42 F5 | 	or	arg01, local11
25710     13 15 02 F6 | 	mov	arg02, local05
25714     1C 20 06 F1 | 	add	local02, #28
25718     10 15 02 F1 | 	add	arg02, local02
2571c     FF 16 06 F6 | 	mov	arg03, #255
25720     13 17 82 F1 | 	sub	arg03, local05
25724     1C 20 86 F1 | 	sub	local02, #28
25728     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2572c     FD 38 0A F6 | 	mov	local14, result1 wz
25730     00 26 06 A6 |  if_e	mov	local05, #0
25734     1C 27 02 51 |  if_ne	add	local05, local14
25738     00 2A 06 56 |  if_ne	mov	local07, #0
2573c     50 FF 9F 5D |  if_ne	jmp	#LR__3900
25740                 | LR__3902
25740     15 25 02 F6 | 	mov	local04, local07
25744     0F 24 4E F7 | 	zerox	local04, #15 wz
25748     00 26 06 56 |  if_ne	mov	local05, #0
2574c     1C 20 06 F1 | 	add	local02, #28
25750     10 27 02 F1 | 	add	local05, local02
25754     13 01 48 FC | 	wrbyte	#0, local05
25758     1C 20 86 F1 | 	sub	local02, #28
2575c                 | LR__3903
2575c     00 26 06 F6 | 	mov	local05, #0
25760     00 28 06 F6 | 	mov	local06, #0
25764                 | ' 			fno->fname[di] = 0;
25764                 | ' 		}
25764                 | ' 	}
25764                 | ' 
25764                 | ' 	si = di = 0;
25764                 | ' 	while (si < 11) {
25764                 | LR__3904
25764     0B 28 16 F2 | 	cmp	local06, #11 wc
25768     20 01 90 3D |  if_ae	jmp	#LR__3907
2576c     1C 1E 06 F1 | 	add	local01, #28
25770     0F 2F 02 FB | 	rdlong	local09, local01
25774     1C 1E 86 F1 | 	sub	local01, #28
25778     14 31 02 F6 | 	mov	local10, local06
2577c     17 31 02 F1 | 	add	local10, local09
25780     18 33 C2 FA | 	rdbyte	local11, local10
25784     19 25 32 F9 | 	getword	local04, local11, #0
25788     20 24 0E F2 | 	cmp	local04, #32 wz
2578c     01 28 06 F1 | 	add	local06, #1
25790     D0 FF 9F AD |  if_e	jmp	#LR__3904
25794     19 25 32 F9 | 	getword	local04, local11, #0
25798     05 24 0E F2 | 	cmp	local04, #5 wz
2579c     E5 32 06 A6 |  if_e	mov	local11, #229
257a0     09 28 0E F2 | 	cmp	local06, #9 wz
257a4     20 00 90 5D |  if_ne	jmp	#LR__3905
257a8     0C 26 16 F2 | 	cmp	local05, #12 wc
257ac     18 00 90 3D |  if_ae	jmp	#LR__3905
257b0     13 37 02 F6 | 	mov	local13, local05
257b4     0C 20 06 F1 | 	add	local02, #12
257b8     10 37 02 F1 | 	add	local13, local02
257bc     1B 5D 48 FC | 	wrbyte	#46, local13
257c0     01 26 06 F1 | 	add	local05, #1
257c4     0C 20 86 F1 | 	sub	local02, #12
257c8                 | LR__3905
257c8     19 13 32 F9 | 	getword	arg01, local11, #0
257cc     07 12 4E F7 | 	zerox	arg01, #7 wz
257d0     00 FA 05 56 |  if_ne	mov	result1, #0
257d4                 | ' 
257d4                 | ' 	return 0;
257d4     00 FA 05 A6 |  if_e	mov	result1, #0
257d8     00 FA 0D F2 | 	cmp	result1, #0 wz
257dc     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
257e0     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
257e4     50 00 90 AD |  if_e	jmp	#LR__3906
257e8     1C 1E 06 F1 | 	add	local01, #28
257ec     0F 31 02 FB | 	rdlong	local10, local01
257f0     1C 1E 86 F1 | 	sub	local01, #28
257f4     14 2D 02 F6 | 	mov	local08, local06
257f8     18 2D 02 F1 | 	add	local08, local10
257fc     16 13 CA FA | 	rdbyte	arg01, local08 wz
25800     00 FA 05 56 |  if_ne	mov	result1, #0
25804                 | ' 
25804                 | ' 	return 0;
25804     00 FA 05 A6 |  if_e	mov	result1, #0
25808     00 FA 0D F2 | 	cmp	result1, #0 wz
2580c     28 00 90 AD |  if_e	jmp	#LR__3906
25810     19 33 32 F9 | 	getword	local11, local11, #0
25814     08 32 66 F0 | 	shl	local11, #8
25818     1C 1E 06 F1 | 	add	local01, #28
2581c     0F 39 02 FB | 	rdlong	local14, local01
25820     1C 1E 86 F1 | 	sub	local01, #28
25824     14 2F 02 F6 | 	mov	local09, local06
25828     1C 2F 02 F1 | 	add	local09, local14
2582c     17 35 C2 FA | 	rdbyte	local12, local09
25830     1A 33 42 F5 | 	or	local11, local12
25834     01 28 06 F1 | 	add	local06, #1
25838                 | LR__3906
25838     19 13 02 F6 | 	mov	arg01, local11
2583c     01 00 00 FF 
25840     52 15 06 F6 | 	mov	arg02, ##850
25844     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
25848     FD 32 02 F6 | 	mov	local11, result1
2584c     19 25 02 F6 | 	mov	local04, local11
25850     0F 24 4E F7 | 	zerox	local04, #15 wz
25854     00 26 06 A6 |  if_e	mov	local05, #0
25858     30 00 90 AD |  if_e	jmp	#LR__3907
2585c     19 13 32 F9 | 	getword	arg01, local11, #0
25860     13 15 02 F6 | 	mov	arg02, local05
25864     0C 20 06 F1 | 	add	local02, #12
25868     10 15 02 F1 | 	add	arg02, local02
2586c     0C 16 06 F6 | 	mov	arg03, #12
25870     13 17 82 F1 | 	sub	arg03, local05
25874     0C 20 86 F1 | 	sub	local02, #12
25878     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2587c     FD 38 0A F6 | 	mov	local14, result1 wz
25880     00 26 06 A6 |  if_e	mov	local05, #0
25884     1C 27 02 51 |  if_ne	add	local05, local14
25888     D8 FE 9F 5D |  if_ne	jmp	#LR__3904
2588c                 | LR__3907
2588c     13 25 02 F6 | 	mov	local04, local05
25890     0C 20 06 F1 | 	add	local02, #12
25894     10 25 02 F1 | 	add	local04, local02
25898     12 01 48 FC | 	wrbyte	#0, local04
2589c     10 20 06 F1 | 	add	local02, #16
258a0     10 25 CA FA | 	rdbyte	local04, local02 wz
258a4     1C 20 86 F1 | 	sub	local02, #28
258a8     F8 00 90 5D |  if_ne	jmp	#LR__3913
258ac     00 26 0E F2 | 	cmp	local05, #0 wz
258b0     1C 00 90 5D |  if_ne	jmp	#LR__3908
258b4     13 37 02 F6 | 	mov	local13, local05
258b8     1C 20 06 F1 | 	add	local02, #28
258bc     10 37 02 F1 | 	add	local13, local02
258c0     1B 7F 48 FC | 	wrbyte	#63, local13
258c4     01 26 06 F1 | 	add	local05, #1
258c8     1C 20 86 F1 | 	sub	local02, #28
258cc     A4 00 90 FD | 	jmp	#LR__3912
258d0                 | LR__3908
258d0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
258d0     00 26 06 F6 | 	mov	local05, #0
258d4     00 28 06 F6 | 	mov	local06, #0
258d8     08 3A 06 F6 | 	mov	local15, #8
258dc                 | LR__3909
258dc     14 25 02 F6 | 	mov	local04, local06
258e0     0C 20 06 F1 | 	add	local02, #12
258e4     10 25 02 F1 | 	add	local04, local02
258e8     12 37 CA FA | 	rdbyte	local13, local04 wz
258ec     0C 20 86 F1 | 	sub	local02, #12
258f0     80 00 90 AD |  if_e	jmp	#LR__3911
258f4     14 2D 02 F6 | 	mov	local08, local06
258f8     0C 20 06 F1 | 	add	local02, #12
258fc     10 2D 02 F1 | 	add	local08, local02
25900     16 33 C2 FA | 	rdbyte	local11, local08
25904     19 39 32 F9 | 	getword	local14, local11, #0
25908     2E 38 0E F2 | 	cmp	local14, #46 wz
2590c     0C 20 86 F1 | 	sub	local02, #12
25910     10 3A 06 A6 |  if_e	mov	local15, #16
25914     19 39 32 F9 | 	getword	local14, local11, #0
25918     41 38 16 F2 | 	cmp	local14, #65 wc
2591c     30 00 90 CD |  if_b	jmp	#LR__3910
25920     19 2D 32 F9 | 	getword	local08, local11, #0
25924     5B 2C 16 F2 | 	cmp	local08, #91 wc
25928     24 00 90 3D |  if_ae	jmp	#LR__3910
2592c     1C 1E 06 F1 | 	add	local01, #28
25930     0F 2F 02 FB | 	rdlong	local09, local01
25934     1C 1E 86 F1 | 	sub	local01, #28
25938     0C 2E 06 F1 | 	add	local09, #12
2593c     17 31 C2 FA | 	rdbyte	local10, local09
25940     1D 39 E2 F8 | 	getbyte	local14, local15, #0
25944     1C 31 CA F7 | 	test	local10, local14 wz
25948     19 33 32 59 |  if_ne	getword	local11, local11, #0
2594c     20 32 06 51 |  if_ne	add	local11, #32
25950                 | LR__3910
25950     13 39 02 F6 | 	mov	local14, local05
25954     1C 20 06 F1 | 	add	local02, #28
25958     10 39 02 F1 | 	add	local14, local02
2595c     19 33 32 F9 | 	getword	local11, local11, #0
25960     1C 33 42 FC | 	wrbyte	local11, local14
25964     01 28 06 F1 | 	add	local06, #1
25968     01 26 06 F1 | 	add	local05, #1
2596c     1C 20 86 F1 | 	sub	local02, #28
25970     68 FF 9F FD | 	jmp	#LR__3909
25974                 | LR__3911
25974                 | LR__3912
25974     1C 20 06 F1 | 	add	local02, #28
25978     10 27 02 F1 | 	add	local05, local02
2597c     13 01 48 FC | 	wrbyte	#0, local05
25980     1C 1E 06 F1 | 	add	local01, #28
25984     0F 25 02 FB | 	rdlong	local04, local01
25988     1C 1E 86 F1 | 	sub	local01, #28
2598c     0C 24 06 F1 | 	add	local04, #12
25990     12 37 CA FA | 	rdbyte	local13, local04 wz
25994     1C 20 86 F1 | 	sub	local02, #28
25998     0C 20 06 A1 |  if_e	add	local02, #12
2599c     10 01 48 AC |  if_e	wrbyte	#0, local02
259a0     0C 20 86 A1 |  if_e	sub	local02, #12
259a4                 | LR__3913
259a4     1C 1E 06 F1 | 	add	local01, #28
259a8     0F 35 02 FB | 	rdlong	local12, local01
259ac     0B 34 06 F1 | 	add	local12, #11
259b0     1A 25 C2 FA | 	rdbyte	local04, local12
259b4     3F 24 06 F5 | 	and	local04, #63
259b8     08 20 06 F1 | 	add	local02, #8
259bc     10 25 42 FC | 	wrbyte	local04, local02
259c0     08 20 86 F1 | 	sub	local02, #8
259c4     0F 13 02 FB | 	rdlong	arg01, local01
259c8     1C 12 06 F1 | 	add	arg01, #28
259cc                 | ' {
259cc                 | ' 
259cc                 | ' 	return *((DWORD*)ptr);
259cc     09 FB 01 FB | 	rdlong	result1, arg01
259d0     10 FB 61 FC | 	wrlong	result1, local02
259d4     0F 13 02 FB | 	rdlong	arg01, local01
259d8     16 12 06 F1 | 	add	arg01, #22
259dc                 | ' {
259dc                 | ' 
259dc                 | ' 	return *((WORD*)ptr);
259dc     09 FB E1 FA | 	rdword	result1, arg01
259e0     06 20 06 F1 | 	add	local02, #6
259e4     10 FB 51 FC | 	wrword	result1, local02
259e8     0F 13 02 FB | 	rdlong	arg01, local01
259ec     18 12 06 F1 | 	add	arg01, #24
259f0                 | ' {
259f0                 | ' 
259f0                 | ' 	return *((WORD*)ptr);
259f0     09 FB E1 FA | 	rdword	result1, arg01
259f4     02 20 86 F1 | 	sub	local02, #2
259f8     10 FB 51 FC | 	wrword	result1, local02
259fc                 | LR__3914
259fc     A7 F0 03 F6 | 	mov	ptra, fp
25a00     B2 00 A0 FD | 	call	#popregs_
25a04                 | _fatfs_cc_get_fileinfo_ret
25a04     2D 00 64 FD | 	ret
25a08                 | 
25a08                 | _fatfs_cc_create_name
25a08     0D 4A 05 F6 | 	mov	COUNT_, #13
25a0c     A8 00 A0 FD | 	call	#pushregs_
25a10     34 F0 07 F1 | 	add	ptra, #52
25a14     04 4E 05 F1 | 	add	fp, #4
25a18     A7 12 62 FC | 	wrlong	arg01, fp
25a1c     04 4E 05 F1 | 	add	fp, #4
25a20     A7 14 62 FC | 	wrlong	arg02, fp
25a24     0A FB 01 FB | 	rdlong	result1, arg02
25a28     28 4E 05 F1 | 	add	fp, #40
25a2c     A7 FA 61 FC | 	wrlong	result1, fp
25a30     2C 4E 85 F1 | 	sub	fp, #44
25a34     A7 FA 01 FB | 	rdlong	result1, fp
25a38     FD 1E 02 FB | 	rdlong	local01, result1
25a3c     0C 1E 06 F1 | 	add	local01, #12
25a40     0F 21 02 FB | 	rdlong	local02, local01
25a44     14 4E 05 F1 | 	add	fp, #20
25a48     A7 20 62 FC | 	wrlong	local02, fp
25a4c     14 4E 05 F1 | 	add	fp, #20
25a50     A7 00 68 FC | 	wrlong	#0, fp
25a54     2C 4E 85 F1 | 	sub	fp, #44
25a58                 | ' 
25a58                 | ' 
25a58                 | ' 
25a58                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
25a58                 | ' 	for (;;) {
25a58                 | LR__3920
25a58     30 4E 05 F1 | 	add	fp, #48
25a5c     A7 12 02 F6 | 	mov	arg01, fp
25a60     30 4E 85 F1 | 	sub	fp, #48
25a64     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
25a68     1C 4E 05 F1 | 	add	fp, #28
25a6c     A7 FA 61 FC | 	wrlong	result1, fp
25a70     1C 4E 85 F1 | 	sub	fp, #28
25a74     FF FF 7F FF 
25a78     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25a7c     06 FA 05 A6 |  if_e	mov	result1, #6
25a80     74 08 90 AD |  if_e	jmp	#LR__3960
25a84     1C 4E 05 F1 | 	add	fp, #28
25a88     A7 1E 02 FB | 	rdlong	local01, fp
25a8c     1C 4E 85 F1 | 	sub	fp, #28
25a90     80 00 00 FF 
25a94     00 1E 16 F2 | 	cmp	local01, ##65536 wc
25a98     3C 00 90 CD |  if_b	jmp	#LR__3921
25a9c     18 4E 05 F1 | 	add	fp, #24
25aa0     A7 22 02 FB | 	rdlong	local03, fp
25aa4     14 4E 05 F1 | 	add	fp, #20
25aa8     A7 1E 02 FB | 	rdlong	local01, fp
25aac     0F 25 02 F6 | 	mov	local04, local01
25ab0     01 24 06 F1 | 	add	local04, #1
25ab4     A7 24 62 FC | 	wrlong	local04, fp
25ab8     01 1E 66 F0 | 	shl	local01, #1
25abc     11 1F 02 F1 | 	add	local01, local03
25ac0     10 4E 85 F1 | 	sub	fp, #16
25ac4     A7 26 02 FB | 	rdlong	local05, fp
25ac8     1C 4E 85 F1 | 	sub	fp, #28
25acc     13 29 02 F6 | 	mov	local06, local05
25ad0     10 28 46 F0 | 	shr	local06, #16
25ad4     0F 29 52 FC | 	wrword	local06, local01
25ad8                 | LR__3921
25ad8     1C 4E 05 F1 | 	add	fp, #28
25adc     A7 1E 02 FB | 	rdlong	local01, fp
25ae0     08 4E 85 F1 | 	sub	fp, #8
25ae4     A7 1E 52 FC | 	wrword	local01, fp
25ae8     A7 1E E2 FA | 	rdword	local01, fp
25aec     14 4E 85 F1 | 	sub	fp, #20
25af0     20 1E 16 F2 | 	cmp	local01, #32 wc
25af4     B0 00 90 CD |  if_b	jmp	#LR__3923
25af8     14 4E 05 F1 | 	add	fp, #20
25afc     A7 1E E2 FA | 	rdword	local01, fp
25b00     14 4E 85 F1 | 	sub	fp, #20
25b04     2F 1E 0E F2 | 	cmp	local01, #47 wz
25b08     14 4E 05 51 |  if_ne	add	fp, #20
25b0c     A7 24 E2 5A |  if_ne	rdword	local04, fp
25b10     14 4E 85 51 |  if_ne	sub	fp, #20
25b14     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
25b18     8C 00 90 AD |  if_e	jmp	#LR__3923
25b1c     14 4E 05 F1 | 	add	fp, #20
25b20     A7 12 E2 FA | 	rdword	arg01, fp
25b24     14 4E 85 F1 | 	sub	fp, #20
25b28     80 12 16 F2 | 	cmp	arg01, #128 wc
25b2c     24 00 90 3D |  if_ae	jmp	#LR__3922
25b30     5D 01 00 FF 
25b34     6C 12 06 F6 | 	mov	arg01, ##@LR__4582
25b38     14 4E 05 F1 | 	add	fp, #20
25b3c     A7 14 E2 FA | 	rdword	arg02, fp
25b40     14 4E 85 F1 | 	sub	fp, #20
25b44     FC D0 BF FD | 	call	#_fatfs_cc_strchr
25b48     00 FA 0D F2 | 	cmp	result1, #0 wz
25b4c     06 FA 05 56 |  if_ne	mov	result1, #6
25b50     A4 07 90 5D |  if_ne	jmp	#LR__3960
25b54                 | LR__3922
25b54     2C 4E 05 F1 | 	add	fp, #44
25b58     A7 28 02 FB | 	rdlong	local06, fp
25b5c     2C 4E 85 F1 | 	sub	fp, #44
25b60     FF 28 16 F2 | 	cmp	local06, #255 wc
25b64     06 FA 05 36 |  if_ae	mov	result1, #6
25b68     8C 07 90 3D |  if_ae	jmp	#LR__3960
25b6c     18 4E 05 F1 | 	add	fp, #24
25b70     A7 22 02 FB | 	rdlong	local03, fp
25b74     14 4E 05 F1 | 	add	fp, #20
25b78     A7 20 02 FB | 	rdlong	local02, fp
25b7c     10 25 02 F6 | 	mov	local04, local02
25b80     01 24 06 F1 | 	add	local04, #1
25b84     A7 24 62 FC | 	wrlong	local04, fp
25b88     10 1F 02 F6 | 	mov	local01, local02
25b8c     01 1E 66 F0 | 	shl	local01, #1
25b90     11 1F 02 F1 | 	add	local01, local03
25b94     18 4E 85 F1 | 	sub	fp, #24
25b98     A7 28 E2 FA | 	rdword	local06, fp
25b9c     14 4E 85 F1 | 	sub	fp, #20
25ba0     0F 29 52 FC | 	wrword	local06, local01
25ba4     B0 FE 9F FD | 	jmp	#LR__3920
25ba8                 | LR__3923
25ba8     14 4E 05 F1 | 	add	fp, #20
25bac     A7 2A E2 FA | 	rdword	local07, fp
25bb0     14 4E 85 F1 | 	sub	fp, #20
25bb4     20 2A 16 F2 | 	cmp	local07, #32 wc
25bb8     10 4E 05 C1 |  if_b	add	fp, #16
25bbc     A7 08 48 CC |  if_b	wrbyte	#4, fp
25bc0     10 4E 85 C1 |  if_b	sub	fp, #16
25bc4     74 00 90 CD |  if_b	jmp	#LR__3928
25bc8     97 24 48 FB | 	callpa	#(@LR__3926-@LR__3924)>>2,fcache_load_ptr_
25bcc                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
25bcc                 | LR__3924
25bcc     30 4E 05 F1 | 	add	fp, #48
25bd0     A7 24 02 FB | 	rdlong	local04, fp
25bd4     30 4E 85 F1 | 	sub	fp, #48
25bd8     12 2B C2 FA | 	rdbyte	local07, local04
25bdc     2F 2A 0E F2 | 	cmp	local07, #47 wz
25be0     18 00 90 AD |  if_e	jmp	#LR__3925
25be4     30 4E 05 F1 | 	add	fp, #48
25be8     A7 24 02 FB | 	rdlong	local04, fp
25bec     30 4E 85 F1 | 	sub	fp, #48
25bf0     12 21 C2 FA | 	rdbyte	local02, local04
25bf4     5C 20 0E F2 | 	cmp	local02, #92 wz
25bf8     18 00 90 5D |  if_ne	jmp	#LR__3927
25bfc                 | LR__3925
25bfc     30 4E 05 F1 | 	add	fp, #48
25c00     A7 1E 02 FB | 	rdlong	local01, fp
25c04     01 1E 06 F1 | 	add	local01, #1
25c08     A7 1E 62 FC | 	wrlong	local01, fp
25c0c     30 4E 85 F1 | 	sub	fp, #48
25c10     B8 FF 9F FD | 	jmp	#LR__3924
25c14                 | LR__3926
25c14                 | LR__3927
25c14     10 4E 05 F1 | 	add	fp, #16
25c18     A7 00 48 FC | 	wrbyte	#0, fp
25c1c     20 4E 05 F1 | 	add	fp, #32
25c20     A7 28 02 FB | 	rdlong	local06, fp
25c24     30 4E 85 F1 | 	sub	fp, #48
25c28     14 2B C2 FA | 	rdbyte	local07, local06
25c2c     20 2A 16 F2 | 	cmp	local07, #32 wc
25c30     10 4E 05 C1 |  if_b	add	fp, #16
25c34     A7 08 48 CC |  if_b	wrbyte	#4, fp
25c38     10 4E 85 C1 |  if_b	sub	fp, #16
25c3c                 | LR__3928
25c3c     08 4E 05 F1 | 	add	fp, #8
25c40     A7 2A 02 FB | 	rdlong	local07, fp
25c44     28 4E 05 F1 | 	add	fp, #40
25c48     A7 1E 02 FB | 	rdlong	local01, fp
25c4c     30 4E 85 F1 | 	sub	fp, #48
25c50     15 1F 62 FC | 	wrlong	local01, local07
25c54     97 38 48 FB | 	callpa	#(@LR__3930-@LR__3929)>>2,fcache_load_ptr_
25c58                 | ' 	}
25c58                 | ' 	*path = p;
25c58                 | ' #line 2862 "ff.c"
25c58                 | ' 	while (di) {
25c58                 | LR__3929
25c58     2C 4E 05 F1 | 	add	fp, #44
25c5c     A7 2A 0A FB | 	rdlong	local07, fp wz
25c60     2C 4E 85 F1 | 	sub	fp, #44
25c64     60 00 90 AD |  if_e	jmp	#LR__3931
25c68     18 4E 05 F1 | 	add	fp, #24
25c6c     A7 28 02 FB | 	rdlong	local06, fp
25c70     14 4E 05 F1 | 	add	fp, #20
25c74     A7 24 02 FB | 	rdlong	local04, fp
25c78     01 24 86 F1 | 	sub	local04, #1
25c7c     01 24 66 F0 | 	shl	local04, #1
25c80     14 25 02 F1 | 	add	local04, local06
25c84     12 29 E2 FA | 	rdword	local06, local04
25c88     18 4E 85 F1 | 	sub	fp, #24
25c8c     A7 28 52 FC | 	wrword	local06, fp
25c90     A7 2A E2 FA | 	rdword	local07, fp
25c94     14 4E 85 F1 | 	sub	fp, #20
25c98     20 2A 0E F2 | 	cmp	local07, #32 wz
25c9c     14 4E 05 51 |  if_ne	add	fp, #20
25ca0     A7 1E E2 5A |  if_ne	rdword	local01, fp
25ca4     14 4E 85 51 |  if_ne	sub	fp, #20
25ca8     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
25cac     18 00 90 5D |  if_ne	jmp	#LR__3931
25cb0     2C 4E 05 F1 | 	add	fp, #44
25cb4     A7 1E 02 FB | 	rdlong	local01, fp
25cb8     01 1E 86 F1 | 	sub	local01, #1
25cbc     A7 1E 62 FC | 	wrlong	local01, fp
25cc0     2C 4E 85 F1 | 	sub	fp, #44
25cc4     90 FF 9F FD | 	jmp	#LR__3929
25cc8                 | LR__3930
25cc8                 | LR__3931
25cc8     18 4E 05 F1 | 	add	fp, #24
25ccc     A7 2C 02 FB | 	rdlong	local08, fp
25cd0     14 4E 05 F1 | 	add	fp, #20
25cd4     A7 24 02 FB | 	rdlong	local04, fp
25cd8     01 24 66 F0 | 	shl	local04, #1
25cdc     16 25 02 F1 | 	add	local04, local08
25ce0     12 01 58 FC | 	wrword	#0, local04
25ce4     A7 2A 0A FB | 	rdlong	local07, fp wz
25ce8     2C 4E 85 F1 | 	sub	fp, #44
25cec     06 FA 05 A6 |  if_e	mov	result1, #6
25cf0     04 06 90 AD |  if_e	jmp	#LR__3960
25cf4                 | ' 
25cf4                 | ' 
25cf4                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
25cf4     28 4E 05 F1 | 	add	fp, #40
25cf8     A7 00 68 FC | 	wrlong	#0, fp
25cfc     28 4E 85 F1 | 	sub	fp, #40
25d00     97 22 48 FB | 	callpa	#(@LR__3933-@LR__3932)>>2,fcache_load_ptr_
25d04                 | LR__3932
25d04     18 4E 05 F1 | 	add	fp, #24
25d08     A7 2E 02 FB | 	rdlong	local09, fp
25d0c     10 4E 05 F1 | 	add	fp, #16
25d10     A7 30 02 FB | 	rdlong	local10, fp
25d14     28 4E 85 F1 | 	sub	fp, #40
25d18     01 30 66 F0 | 	shl	local10, #1
25d1c     17 31 02 F1 | 	add	local10, local09
25d20     18 33 E2 FA | 	rdword	local11, local10
25d24     20 32 0E F2 | 	cmp	local11, #32 wz
25d28     1C 00 90 5D |  if_ne	jmp	#LR__3934
25d2c     28 4E 05 F1 | 	add	fp, #40
25d30     A7 34 02 FB | 	rdlong	local12, fp
25d34     1A 27 02 F6 | 	mov	local05, local12
25d38     01 26 06 F1 | 	add	local05, #1
25d3c     A7 26 62 FC | 	wrlong	local05, fp
25d40     28 4E 85 F1 | 	sub	fp, #40
25d44     BC FF 9F FD | 	jmp	#LR__3932
25d48                 | LR__3933
25d48                 | LR__3934
25d48     28 4E 05 F1 | 	add	fp, #40
25d4c     A7 2A 02 FB | 	rdlong	local07, fp
25d50     28 4E 85 F1 | 	sub	fp, #40
25d54     01 2A 16 F2 | 	cmp	local07, #1 wc
25d58     28 00 90 3D |  if_ae	jmp	#LR__3935
25d5c     18 4E 05 F1 | 	add	fp, #24
25d60     A7 22 02 FB | 	rdlong	local03, fp
25d64     10 4E 05 F1 | 	add	fp, #16
25d68     A7 2E 02 FB | 	rdlong	local09, fp
25d6c     28 4E 85 F1 | 	sub	fp, #40
25d70     01 2E 66 F0 | 	shl	local09, #1
25d74     11 2F 02 F1 | 	add	local09, local03
25d78     17 1F E2 FA | 	rdword	local01, local09
25d7c     2E 1E 0E F2 | 	cmp	local01, #46 wz
25d80     14 00 90 5D |  if_ne	jmp	#LR__3936
25d84                 | LR__3935
25d84     10 4E 05 F1 | 	add	fp, #16
25d88     A7 2A C2 FA | 	rdbyte	local07, fp
25d8c     03 2A 46 F5 | 	or	local07, #3
25d90     A7 2A 42 FC | 	wrbyte	local07, fp
25d94     10 4E 85 F1 | 	sub	fp, #16
25d98                 | LR__3936
25d98     97 2C 48 FB | 	callpa	#(@LR__3938-@LR__3937)>>2,fcache_load_ptr_
25d9c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
25d9c                 | LR__3937
25d9c     2C 4E 05 F1 | 	add	fp, #44
25da0     A7 2A 02 FB | 	rdlong	local07, fp
25da4     2C 4E 85 F1 | 	sub	fp, #44
25da8     01 2A 16 F2 | 	cmp	local07, #1 wc
25dac     44 00 90 CD |  if_b	jmp	#LR__3939
25db0     18 4E 05 F1 | 	add	fp, #24
25db4     A7 28 02 FB | 	rdlong	local06, fp
25db8     14 4E 05 F1 | 	add	fp, #20
25dbc     A7 22 02 FB | 	rdlong	local03, fp
25dc0     2C 4E 85 F1 | 	sub	fp, #44
25dc4     01 22 86 F1 | 	sub	local03, #1
25dc8     01 22 66 F0 | 	shl	local03, #1
25dcc     14 23 02 F1 | 	add	local03, local06
25dd0     11 1F E2 FA | 	rdword	local01, local03
25dd4     2E 1E 0E F2 | 	cmp	local01, #46 wz
25dd8     18 00 90 AD |  if_e	jmp	#LR__3939
25ddc     2C 4E 05 F1 | 	add	fp, #44
25de0     A7 1E 02 FB | 	rdlong	local01, fp
25de4     01 1E 86 F1 | 	sub	local01, #1
25de8     A7 1E 62 FC | 	wrlong	local01, fp
25dec     2C 4E 85 F1 | 	sub	fp, #44
25df0     A8 FF 9F FD | 	jmp	#LR__3937
25df4                 | LR__3938
25df4                 | LR__3939
25df4     04 4E 05 F1 | 	add	fp, #4
25df8     A7 12 02 FB | 	rdlong	arg01, fp
25dfc     04 4E 85 F1 | 	sub	fp, #4
25e00     20 12 06 F1 | 	add	arg01, #32
25e04     20 14 06 F6 | 	mov	arg02, #32
25e08     0B 16 06 F6 | 	mov	arg03, #11
25e0c     09 37 02 F6 | 	mov	local13, arg01
25e10     98 00 A0 FD | 	call	#\builtin_bytefill_
25e14     1B FB 01 F6 | 	mov	result1, local13
25e18     0C 4E 05 F1 | 	add	fp, #12
25e1c     A7 00 48 FC | 	wrbyte	#0, fp
25e20     A7 2A C2 FA | 	rdbyte	local07, fp
25e24     14 4E 05 F1 | 	add	fp, #20
25e28     A7 2A 62 FC | 	wrlong	local07, fp
25e2c     04 4E 05 F1 | 	add	fp, #4
25e30     A7 10 68 FC | 	wrlong	#8, fp
25e34     24 4E 85 F1 | 	sub	fp, #36
25e38                 | ' 
25e38                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
25e38                 | ' 	i = b = 0; ni = 8;
25e38                 | ' 	for (;;) {
25e38                 | LR__3940
25e38     18 4E 05 F1 | 	add	fp, #24
25e3c     A7 22 02 FB | 	rdlong	local03, fp
25e40     10 4E 05 F1 | 	add	fp, #16
25e44     A7 2E 02 FB | 	rdlong	local09, fp
25e48     17 25 02 F6 | 	mov	local04, local09
25e4c     01 24 06 F1 | 	add	local04, #1
25e50     A7 24 62 FC | 	wrlong	local04, fp
25e54     01 2E 66 F0 | 	shl	local09, #1
25e58     11 2F 02 F1 | 	add	local09, local03
25e5c     17 29 E2 FA | 	rdword	local06, local09
25e60     14 4E 85 F1 | 	sub	fp, #20
25e64     A7 28 52 FC | 	wrword	local06, fp
25e68     A7 2A EA FA | 	rdword	local07, fp wz
25e6c     14 4E 85 F1 | 	sub	fp, #20
25e70     74 03 90 AD |  if_e	jmp	#LR__3956
25e74     14 4E 05 F1 | 	add	fp, #20
25e78     A7 2A E2 FA | 	rdword	local07, fp
25e7c     14 4E 85 F1 | 	sub	fp, #20
25e80     20 2A 0E F2 | 	cmp	local07, #32 wz
25e84     30 00 90 AD |  if_e	jmp	#LR__3941
25e88     14 4E 05 F1 | 	add	fp, #20
25e8c     A7 1E E2 FA | 	rdword	local01, fp
25e90     14 4E 85 F1 | 	sub	fp, #20
25e94     2E 1E 0E F2 | 	cmp	local01, #46 wz
25e98     34 00 90 5D |  if_ne	jmp	#LR__3942
25e9c     28 4E 05 F1 | 	add	fp, #40
25ea0     A7 24 02 FB | 	rdlong	local04, fp
25ea4     04 4E 05 F1 | 	add	fp, #4
25ea8     A7 30 02 FB | 	rdlong	local10, fp
25eac     2C 4E 85 F1 | 	sub	fp, #44
25eb0     18 25 0A F2 | 	cmp	local04, local10 wz
25eb4     18 00 90 AD |  if_e	jmp	#LR__3942
25eb8                 | LR__3941
25eb8     10 4E 05 F1 | 	add	fp, #16
25ebc     A7 2A C2 FA | 	rdbyte	local07, fp
25ec0     03 2A 46 F5 | 	or	local07, #3
25ec4     A7 2A 42 FC | 	wrbyte	local07, fp
25ec8     10 4E 85 F1 | 	sub	fp, #16
25ecc                 | ' 			cf |=  0x01  |  0x02 ;
25ecc                 | ' 			continue;
25ecc     68 FF 9F FD | 	jmp	#LR__3940
25ed0                 | LR__3942
25ed0     20 4E 05 F1 | 	add	fp, #32
25ed4     A7 2A 02 FB | 	rdlong	local07, fp
25ed8     04 4E 05 F1 | 	add	fp, #4
25edc     A7 1E 02 FB | 	rdlong	local01, fp
25ee0     24 4E 85 F1 | 	sub	fp, #36
25ee4     0F 2B 12 F2 | 	cmp	local07, local01 wc
25ee8     1C 00 90 3D |  if_ae	jmp	#LR__3943
25eec     28 4E 05 F1 | 	add	fp, #40
25ef0     A7 2C 02 FB | 	rdlong	local08, fp
25ef4     04 4E 05 F1 | 	add	fp, #4
25ef8     A7 30 02 FB | 	rdlong	local10, fp
25efc     2C 4E 85 F1 | 	sub	fp, #44
25f00     18 2D 0A F2 | 	cmp	local08, local10 wz
25f04     B0 00 90 5D |  if_ne	jmp	#LR__3945
25f08                 | LR__3943
25f08     24 4E 05 F1 | 	add	fp, #36
25f0c     A7 2A 02 FB | 	rdlong	local07, fp
25f10     24 4E 85 F1 | 	sub	fp, #36
25f14     0B 2A 0E F2 | 	cmp	local07, #11 wz
25f18     18 00 90 5D |  if_ne	jmp	#LR__3944
25f1c     10 4E 05 F1 | 	add	fp, #16
25f20     A7 2A C2 FA | 	rdbyte	local07, fp
25f24     03 2A 46 F5 | 	or	local07, #3
25f28     A7 2A 42 FC | 	wrbyte	local07, fp
25f2c     10 4E 85 F1 | 	sub	fp, #16
25f30                 | ' 				cf |=  0x01  |  0x02 ;
25f30                 | ' 				break;
25f30     B4 02 90 FD | 	jmp	#LR__3956
25f34                 | LR__3944
25f34     28 4E 05 F1 | 	add	fp, #40
25f38     A7 2A 02 FB | 	rdlong	local07, fp
25f3c     04 4E 05 F1 | 	add	fp, #4
25f40     A7 1E 02 FB | 	rdlong	local01, fp
25f44     2C 4E 85 F1 | 	sub	fp, #44
25f48     0F 2B 0A F2 | 	cmp	local07, local01 wz
25f4c     10 4E 05 51 |  if_ne	add	fp, #16
25f50     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
25f54     03 2A 46 55 |  if_ne	or	local07, #3
25f58     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
25f5c     10 4E 85 51 |  if_ne	sub	fp, #16
25f60     28 4E 05 F1 | 	add	fp, #40
25f64     A7 2A 02 FB | 	rdlong	local07, fp
25f68     04 4E 05 F1 | 	add	fp, #4
25f6c     A7 20 02 FB | 	rdlong	local02, fp
25f70     2C 4E 85 F1 | 	sub	fp, #44
25f74     10 2B 1A F2 | 	cmp	local07, local02 wcz
25f78     6C 02 90 1D |  if_a	jmp	#LR__3956
25f7c     2C 4E 05 F1 | 	add	fp, #44
25f80     A7 2A 02 FB | 	rdlong	local07, fp
25f84     04 4E 85 F1 | 	sub	fp, #4
25f88     A7 2A 62 FC | 	wrlong	local07, fp
25f8c     08 4E 85 F1 | 	sub	fp, #8
25f90     A7 10 68 FC | 	wrlong	#8, fp
25f94     04 4E 05 F1 | 	add	fp, #4
25f98     A7 16 68 FC | 	wrlong	#11, fp
25f9c     18 4E 85 F1 | 	sub	fp, #24
25fa0     A7 32 C2 FA | 	rdbyte	local11, fp
25fa4     19 2B E2 F8 | 	getbyte	local07, local11, #0
25fa8     02 2A 66 F0 | 	shl	local07, #2
25fac     A7 2A 42 FC | 	wrbyte	local07, fp
25fb0     0C 4E 85 F1 | 	sub	fp, #12
25fb4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
25fb4                 | ' 			continue;
25fb4     80 FE 9F FD | 	jmp	#LR__3940
25fb8                 | LR__3945
25fb8     14 4E 05 F1 | 	add	fp, #20
25fbc     A7 2A E2 FA | 	rdword	local07, fp
25fc0     14 4E 85 F1 | 	sub	fp, #20
25fc4     80 2A 16 F2 | 	cmp	local07, #128 wc
25fc8     6C 00 90 CD |  if_b	jmp	#LR__3947
25fcc     10 4E 05 F1 | 	add	fp, #16
25fd0     A7 2A C2 FA | 	rdbyte	local07, fp
25fd4     02 2A 46 F5 | 	or	local07, #2
25fd8     A7 2A 42 FC | 	wrbyte	local07, fp
25fdc     04 4E 05 F1 | 	add	fp, #4
25fe0     A7 12 E2 FA | 	rdword	arg01, fp
25fe4     14 4E 85 F1 | 	sub	fp, #20
25fe8     01 00 00 FF 
25fec     52 15 06 F6 | 	mov	arg02, ##850
25ff0     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
25ff4     14 4E 05 F1 | 	add	fp, #20
25ff8     A7 FA 51 FC | 	wrword	result1, fp
25ffc     A7 2A E2 FA | 	rdword	local07, fp
26000     14 4E 85 F1 | 	sub	fp, #20
26004     80 2A CE F7 | 	test	local07, #128 wz
26008     2C 00 90 AD |  if_e	jmp	#LR__3946
2600c     14 4E 05 F1 | 	add	fp, #20
26010     A7 20 E2 FA | 	rdword	local02, fp
26014     7F 20 06 F5 | 	and	local02, #127
26018     01 00 00 FF 
2601c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
26020     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
26024     10 2B C2 FA | 	rdbyte	local07, local02
26028     A7 2A 52 FC | 	wrword	local07, fp
2602c     14 4E 85 F1 | 	sub	fp, #20
26030     01 00 00 FF 
26034     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
26038                 | LR__3946
26038                 | LR__3947
26038     14 4E 05 F1 | 	add	fp, #20
2603c     A7 2A E2 FA | 	rdword	local07, fp
26040     14 4E 85 F1 | 	sub	fp, #20
26044     00 2B 16 F2 | 	cmp	local07, #256 wc
26048     88 00 90 CD |  if_b	jmp	#LR__3949
2604c     24 4E 05 F1 | 	add	fp, #36
26050     A7 2A 02 FB | 	rdlong	local07, fp
26054     01 2A 86 F1 | 	sub	local07, #1
26058     04 4E 85 F1 | 	sub	fp, #4
2605c     A7 20 02 FB | 	rdlong	local02, fp
26060     20 4E 85 F1 | 	sub	fp, #32
26064     15 21 12 F2 | 	cmp	local02, local07 wc
26068     2C 00 90 CD |  if_b	jmp	#LR__3948
2606c     10 4E 05 F1 | 	add	fp, #16
26070     A7 32 C2 FA | 	rdbyte	local11, fp
26074     19 2B E2 F8 | 	getbyte	local07, local11, #0
26078     03 2A 46 F5 | 	or	local07, #3
2607c     A7 2A 42 FC | 	wrbyte	local07, fp
26080     14 4E 05 F1 | 	add	fp, #20
26084     A7 2A 02 FB | 	rdlong	local07, fp
26088     04 4E 85 F1 | 	sub	fp, #4
2608c     A7 2A 62 FC | 	wrlong	local07, fp
26090     20 4E 85 F1 | 	sub	fp, #32
26094                 | ' 				cf |=  0x01  |  0x02 ;
26094                 | ' 				i = ni; continue;
26094     A0 FD 9F FD | 	jmp	#LR__3940
26098                 | LR__3948
26098     04 4E 05 F1 | 	add	fp, #4
2609c     A7 2E 02 FB | 	rdlong	local09, fp
260a0     1C 4E 05 F1 | 	add	fp, #28
260a4     A7 30 02 FB | 	rdlong	local10, fp
260a8     18 25 02 F6 | 	mov	local04, local10
260ac     01 24 06 F1 | 	add	local04, #1
260b0     A7 24 62 FC | 	wrlong	local04, fp
260b4     20 2E 06 F1 | 	add	local09, #32
260b8     17 31 02 F1 | 	add	local10, local09
260bc     0C 4E 85 F1 | 	sub	fp, #12
260c0     A7 22 E2 FA | 	rdword	local03, fp
260c4     14 4E 85 F1 | 	sub	fp, #20
260c8     08 22 46 F0 | 	shr	local03, #8
260cc     18 23 42 FC | 	wrbyte	local03, local10
260d0     D4 00 90 FD | 	jmp	#LR__3955
260d4                 | LR__3949
260d4     14 4E 05 F1 | 	add	fp, #20
260d8     A7 2A EA FA | 	rdword	local07, fp wz
260dc     14 4E 85 F1 | 	sub	fp, #20
260e0     20 00 90 AD |  if_e	jmp	#LR__3950
260e4     5D 01 00 FF 
260e8     75 12 06 F6 | 	mov	arg01, ##@LR__4583
260ec     14 4E 05 F1 | 	add	fp, #20
260f0     A7 14 E2 FA | 	rdword	arg02, fp
260f4     14 4E 85 F1 | 	sub	fp, #20
260f8     48 CB BF FD | 	call	#_fatfs_cc_strchr
260fc     00 FA 0D F2 | 	cmp	result1, #0 wz
26100     20 00 90 AD |  if_e	jmp	#LR__3951
26104                 | LR__3950
26104     14 4E 05 F1 | 	add	fp, #20
26108     A7 BE 58 FC | 	wrword	#95, fp
2610c     04 4E 85 F1 | 	sub	fp, #4
26110     A7 2A C2 FA | 	rdbyte	local07, fp
26114     03 2A 46 F5 | 	or	local07, #3
26118     A7 2A 42 FC | 	wrbyte	local07, fp
2611c     10 4E 85 F1 | 	sub	fp, #16
26120     84 00 90 FD | 	jmp	#LR__3954
26124                 | LR__3951
26124     14 4E 05 F1 | 	add	fp, #20
26128     A7 2A E2 FA | 	rdword	local07, fp
2612c     14 4E 85 F1 | 	sub	fp, #20
26130     41 2A 16 F2 | 	cmp	local07, #65 wc
26134     24 00 90 CD |  if_b	jmp	#LR__3952
26138     14 4E 05 F1 | 	add	fp, #20
2613c     A7 1E E2 FA | 	rdword	local01, fp
26140     14 4E 85 F1 | 	sub	fp, #20
26144     5B 1E 16 F2 | 	cmp	local01, #91 wc
26148     0C 4E 05 C1 |  if_b	add	fp, #12
2614c     A7 2A C2 CA |  if_b	rdbyte	local07, fp
26150     02 2A 46 C5 |  if_b	or	local07, #2
26154     A7 2A 42 CC |  if_b	wrbyte	local07, fp
26158     0C 4E 85 C1 |  if_b	sub	fp, #12
2615c                 | LR__3952
2615c     14 4E 05 F1 | 	add	fp, #20
26160     A7 2A E2 FA | 	rdword	local07, fp
26164     14 4E 85 F1 | 	sub	fp, #20
26168     61 2A 16 F2 | 	cmp	local07, #97 wc
2616c     38 00 90 CD |  if_b	jmp	#LR__3953
26170     14 4E 05 F1 | 	add	fp, #20
26174     A7 1E E2 FA | 	rdword	local01, fp
26178     14 4E 85 F1 | 	sub	fp, #20
2617c     7B 1E 16 F2 | 	cmp	local01, #123 wc
26180     24 00 90 3D |  if_ae	jmp	#LR__3953
26184     0C 4E 05 F1 | 	add	fp, #12
26188     A7 2A C2 FA | 	rdbyte	local07, fp
2618c     01 2A 46 F5 | 	or	local07, #1
26190     A7 2A 42 FC | 	wrbyte	local07, fp
26194     08 4E 05 F1 | 	add	fp, #8
26198     A7 2A E2 FA | 	rdword	local07, fp
2619c     20 2A 86 F1 | 	sub	local07, #32
261a0     A7 2A 52 FC | 	wrword	local07, fp
261a4     14 4E 85 F1 | 	sub	fp, #20
261a8                 | LR__3953
261a8                 | LR__3954
261a8                 | LR__3955
261a8     04 4E 05 F1 | 	add	fp, #4
261ac     A7 32 02 FB | 	rdlong	local11, fp
261b0     19 2F 02 F6 | 	mov	local09, local11
261b4     1C 4E 05 F1 | 	add	fp, #28
261b8     A7 20 02 FB | 	rdlong	local02, fp
261bc     10 25 02 F6 | 	mov	local04, local02
261c0     01 24 06 F1 | 	add	local04, #1
261c4     A7 24 62 FC | 	wrlong	local04, fp
261c8     10 31 02 F6 | 	mov	local10, local02
261cc     20 2E 06 F1 | 	add	local09, #32
261d0     17 31 02 F1 | 	add	local10, local09
261d4     0C 4E 85 F1 | 	sub	fp, #12
261d8     A7 22 E2 FA | 	rdword	local03, fp
261dc     14 4E 85 F1 | 	sub	fp, #20
261e0     18 23 42 FC | 	wrbyte	local03, local10
261e4     50 FC 9F FD | 	jmp	#LR__3940
261e8                 | LR__3956
261e8     04 4E 05 F1 | 	add	fp, #4
261ec     A7 32 02 FB | 	rdlong	local11, fp
261f0     04 4E 85 F1 | 	sub	fp, #4
261f4     20 32 06 F1 | 	add	local11, #32
261f8     19 2B C2 FA | 	rdbyte	local07, local11
261fc     E5 2A 0E F2 | 	cmp	local07, #229 wz
26200     04 4E 05 A1 |  if_e	add	fp, #4
26204     A7 2A 02 AB |  if_e	rdlong	local07, fp
26208     04 4E 85 A1 |  if_e	sub	fp, #4
2620c     20 2A 06 A1 |  if_e	add	local07, #32
26210     15 0B 48 AC |  if_e	wrbyte	#5, local07
26214     24 4E 05 F1 | 	add	fp, #36
26218     A7 2A 02 FB | 	rdlong	local07, fp
2621c     24 4E 85 F1 | 	sub	fp, #36
26220     08 2A 0E F2 | 	cmp	local07, #8 wz
26224     0C 4E 05 A1 |  if_e	add	fp, #12
26228     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2622c     02 2A 66 A0 |  if_e	shl	local07, #2
26230     A7 2A 42 AC |  if_e	wrbyte	local07, fp
26234     0C 4E 85 A1 |  if_e	sub	fp, #12
26238     0C 4E 05 F1 | 	add	fp, #12
2623c     A7 2A C2 FA | 	rdbyte	local07, fp
26240     0C 4E 85 F1 | 	sub	fp, #12
26244     0C 2A 06 F5 | 	and	local07, #12
26248     0C 2A 0E F2 | 	cmp	local07, #12 wz
2624c     18 00 90 AD |  if_e	jmp	#LR__3957
26250     0C 4E 05 F1 | 	add	fp, #12
26254     A7 1E C2 FA | 	rdbyte	local01, fp
26258     0C 4E 85 F1 | 	sub	fp, #12
2625c     03 1E 06 F5 | 	and	local01, #3
26260     03 1E 0E F2 | 	cmp	local01, #3 wz
26264     14 00 90 5D |  if_ne	jmp	#LR__3958
26268                 | LR__3957
26268     10 4E 05 F1 | 	add	fp, #16
2626c     A7 2A C2 FA | 	rdbyte	local07, fp
26270     02 2A 46 F5 | 	or	local07, #2
26274     A7 2A 42 FC | 	wrbyte	local07, fp
26278     10 4E 85 F1 | 	sub	fp, #16
2627c                 | LR__3958
2627c     10 4E 05 F1 | 	add	fp, #16
26280     A7 2A C2 FA | 	rdbyte	local07, fp
26284     10 4E 85 F1 | 	sub	fp, #16
26288     02 2A CE F7 | 	test	local07, #2 wz
2628c     48 00 90 5D |  if_ne	jmp	#LR__3959
26290     0C 4E 05 F1 | 	add	fp, #12
26294     A7 2A C2 FA | 	rdbyte	local07, fp
26298     0C 4E 85 F1 | 	sub	fp, #12
2629c     01 2A CE F7 | 	test	local07, #1 wz
262a0     10 4E 05 51 |  if_ne	add	fp, #16
262a4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
262a8     10 2A 46 55 |  if_ne	or	local07, #16
262ac     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
262b0     10 4E 85 51 |  if_ne	sub	fp, #16
262b4     0C 4E 05 F1 | 	add	fp, #12
262b8     A7 2A C2 FA | 	rdbyte	local07, fp
262bc     0C 4E 85 F1 | 	sub	fp, #12
262c0     04 2A CE F7 | 	test	local07, #4 wz
262c4     10 4E 05 51 |  if_ne	add	fp, #16
262c8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
262cc     08 2A 46 55 |  if_ne	or	local07, #8
262d0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
262d4     10 4E 85 51 |  if_ne	sub	fp, #16
262d8                 | LR__3959
262d8     04 4E 05 F1 | 	add	fp, #4
262dc     A7 2A 02 FB | 	rdlong	local07, fp
262e0     0C 4E 05 F1 | 	add	fp, #12
262e4     A7 1E C2 FA | 	rdbyte	local01, fp
262e8     10 4E 85 F1 | 	sub	fp, #16
262ec     2B 2A 06 F1 | 	add	local07, #43
262f0     15 1F 42 FC | 	wrbyte	local01, local07
262f4                 | ' 	}
262f4                 | ' 
262f4                 | ' 	dp->fn[ 11 ] = cf;
262f4                 | ' 
262f4                 | ' 	return FR_OK;
262f4     00 FA 05 F6 | 	mov	result1, #0
262f8                 | LR__3960
262f8     A7 F0 03 F6 | 	mov	ptra, fp
262fc     B2 00 A0 FD | 	call	#popregs_
26300                 | _fatfs_cc_create_name_ret
26300     2D 00 64 FD | 	ret
26304                 | 
26304                 | _fatfs_cc_follow_path
26304     02 4A 05 F6 | 	mov	COUNT_, #2
26308     A8 00 A0 FD | 	call	#pushregs_
2630c     18 F0 07 F1 | 	add	ptra, #24
26310     04 4E 05 F1 | 	add	fp, #4
26314     A7 12 62 FC | 	wrlong	arg01, fp
26318     04 4E 05 F1 | 	add	fp, #4
2631c     A7 14 62 FC | 	wrlong	arg02, fp
26320     04 4E 85 F1 | 	sub	fp, #4
26324     A7 FA 01 FB | 	rdlong	result1, fp
26328     FD 1E 02 FB | 	rdlong	local01, result1
2632c     10 4E 05 F1 | 	add	fp, #16
26330     A7 1E 62 FC | 	wrlong	local01, fp
26334     14 4E 85 F1 | 	sub	fp, #20
26338     97 24 48 FB | 	callpa	#(@LR__3972-@LR__3970)>>2,fcache_load_ptr_
2633c                 | ' )
2633c                 | ' {
2633c                 | ' 	FRESULT res;
2633c                 | ' 	BYTE ns;
2633c                 | ' 	FATFS *fs = dp->obj.fs;
2633c                 | ' #line 3034 "ff.c"
2633c                 | ' 	{
2633c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2633c                 | LR__3970
2633c     08 4E 05 F1 | 	add	fp, #8
26340     A7 1E 02 FB | 	rdlong	local01, fp
26344     08 4E 85 F1 | 	sub	fp, #8
26348     0F 1F C2 FA | 	rdbyte	local01, local01
2634c     2F 1E 0E F2 | 	cmp	local01, #47 wz
26350     18 00 90 AD |  if_e	jmp	#LR__3971
26354     08 4E 05 F1 | 	add	fp, #8
26358     A7 1E 02 FB | 	rdlong	local01, fp
2635c     08 4E 85 F1 | 	sub	fp, #8
26360     0F 1F C2 FA | 	rdbyte	local01, local01
26364     5C 1E 0E F2 | 	cmp	local01, #92 wz
26368     18 00 90 5D |  if_ne	jmp	#LR__3973
2636c                 | LR__3971
2636c     08 4E 05 F1 | 	add	fp, #8
26370     A7 1E 02 FB | 	rdlong	local01, fp
26374     01 1E 06 F1 | 	add	local01, #1
26378     A7 1E 62 FC | 	wrlong	local01, fp
2637c     08 4E 85 F1 | 	sub	fp, #8
26380     B8 FF 9F FD | 	jmp	#LR__3970
26384                 | LR__3972
26384                 | LR__3973
26384     04 4E 05 F1 | 	add	fp, #4
26388     A7 1E 02 FB | 	rdlong	local01, fp
2638c     08 1E 06 F1 | 	add	local01, #8
26390     0F 01 68 FC | 	wrlong	#0, local01
26394     04 4E 05 F1 | 	add	fp, #4
26398     A7 1E 02 FB | 	rdlong	local01, fp
2639c     08 4E 85 F1 | 	sub	fp, #8
263a0     0F 1F C2 FA | 	rdbyte	local01, local01
263a4     20 1E 16 F2 | 	cmp	local01, #32 wc
263a8     30 00 90 3D |  if_ae	jmp	#LR__3974
263ac     04 4E 05 F1 | 	add	fp, #4
263b0     A7 1E 02 FB | 	rdlong	local01, fp
263b4     2B 1E 06 F1 | 	add	local01, #43
263b8     0F 01 49 FC | 	wrbyte	#128, local01
263bc     A7 12 02 FB | 	rdlong	arg01, fp
263c0     04 4E 85 F1 | 	sub	fp, #4
263c4     00 14 06 F6 | 	mov	arg02, #0
263c8     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
263cc     0C 4E 05 F1 | 	add	fp, #12
263d0     A7 FA 61 FC | 	wrlong	result1, fp
263d4     0C 4E 85 F1 | 	sub	fp, #12
263d8     1C 01 90 FD | 	jmp	#LR__3978
263dc                 | LR__3974
263dc                 | ' 		for (;;) {
263dc                 | LR__3975
263dc     04 4E 05 F1 | 	add	fp, #4
263e0     A7 12 02 FB | 	rdlong	arg01, fp
263e4     04 4E 05 F1 | 	add	fp, #4
263e8     A7 14 02 F6 | 	mov	arg02, fp
263ec     08 4E 85 F1 | 	sub	fp, #8
263f0     14 F6 BF FD | 	call	#_fatfs_cc_create_name
263f4     0C 4E 05 F1 | 	add	fp, #12
263f8     A7 FA 61 FC | 	wrlong	result1, fp
263fc     00 FA 4D F2 | 	cmps	result1, #0 wz
26400     0C 4E 85 F1 | 	sub	fp, #12
26404     F0 00 90 5D |  if_ne	jmp	#LR__3977
26408     04 4E 05 F1 | 	add	fp, #4
2640c     A7 12 02 FB | 	rdlong	arg01, fp
26410     04 4E 85 F1 | 	sub	fp, #4
26414     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
26418     0C 4E 05 F1 | 	add	fp, #12
2641c     A7 FA 61 FC | 	wrlong	result1, fp
26420     08 4E 85 F1 | 	sub	fp, #8
26424     A7 1E 02 FB | 	rdlong	local01, fp
26428     2B 1E 06 F1 | 	add	local01, #43
2642c     0F 1F C2 FA | 	rdbyte	local01, local01
26430     0C 4E 05 F1 | 	add	fp, #12
26434     A7 1E 42 FC | 	wrbyte	local01, fp
26438     04 4E 85 F1 | 	sub	fp, #4
2643c     A7 1E 0A FB | 	rdlong	local01, fp wz
26440     0C 4E 85 F1 | 	sub	fp, #12
26444     34 00 90 AD |  if_e	jmp	#LR__3976
26448     0C 4E 05 F1 | 	add	fp, #12
2644c     A7 1E 02 FB | 	rdlong	local01, fp
26450     0C 4E 85 F1 | 	sub	fp, #12
26454     04 1E 0E F2 | 	cmp	local01, #4 wz
26458     9C 00 90 5D |  if_ne	jmp	#LR__3977
2645c     10 4E 05 F1 | 	add	fp, #16
26460     A7 1E C2 FA | 	rdbyte	local01, fp
26464     10 4E 85 F1 | 	sub	fp, #16
26468     04 1E CE F7 | 	test	local01, #4 wz
2646c     0C 4E 05 A1 |  if_e	add	fp, #12
26470     A7 0A 68 AC |  if_e	wrlong	#5, fp
26474     0C 4E 85 A1 |  if_e	sub	fp, #12
26478                 | ' 					}
26478                 | ' 				}
26478                 | ' 				break;
26478     7C 00 90 FD | 	jmp	#LR__3977
2647c                 | LR__3976
2647c     10 4E 05 F1 | 	add	fp, #16
26480     A7 1E C2 FA | 	rdbyte	local01, fp
26484     10 4E 85 F1 | 	sub	fp, #16
26488     04 1E CE F7 | 	test	local01, #4 wz
2648c     68 00 90 5D |  if_ne	jmp	#LR__3977
26490     04 4E 05 F1 | 	add	fp, #4
26494     A7 1E 02 FB | 	rdlong	local01, fp
26498     04 4E 85 F1 | 	sub	fp, #4
2649c     06 1E 06 F1 | 	add	local01, #6
264a0     0F 1F C2 FA | 	rdbyte	local01, local01
264a4     10 1E CE F7 | 	test	local01, #16 wz
264a8     0C 4E 05 A1 |  if_e	add	fp, #12
264ac     A7 0A 68 AC |  if_e	wrlong	#5, fp
264b0     0C 4E 85 A1 |  if_e	sub	fp, #12
264b4                 | ' 				res = FR_NO_PATH; break;
264b4     40 00 90 AD |  if_e	jmp	#LR__3977
264b8     04 4E 05 F1 | 	add	fp, #4
264bc     A7 20 02 FB | 	rdlong	local02, fp
264c0     10 1F 02 F6 | 	mov	local01, local02
264c4     10 4E 05 F1 | 	add	fp, #16
264c8     A7 14 02 FB | 	rdlong	arg02, fp
264cc     0A 13 02 F6 | 	mov	arg01, arg02
264d0     34 14 06 F1 | 	add	arg02, #52
264d4     14 4E 85 F1 | 	sub	fp, #20
264d8     10 20 06 F1 | 	add	local02, #16
264dc     10 21 02 FB | 	rdlong	local02, local02
264e0     FF 21 06 F5 | 	and	local02, #511
264e4     10 15 02 F1 | 	add	arg02, local02
264e8     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
264ec     08 1E 06 F1 | 	add	local01, #8
264f0     0F FB 61 FC | 	wrlong	result1, local01
264f4     E4 FE 9F FD | 	jmp	#LR__3975
264f8                 | LR__3977
264f8                 | LR__3978
264f8                 | ' 			}
264f8                 | ' #line 3090 "ff.c"
264f8                 | ' 			{
264f8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
264f8                 | ' 			}
264f8                 | ' 		}
264f8                 | ' 	}
264f8                 | ' 
264f8                 | ' 	return res;
264f8     0C 4E 05 F1 | 	add	fp, #12
264fc     A7 FA 01 FB | 	rdlong	result1, fp
26500     0C 4E 85 F1 | 	sub	fp, #12
26504     A7 F0 03 F6 | 	mov	ptra, fp
26508     B2 00 A0 FD | 	call	#popregs_
2650c                 | _fatfs_cc_follow_path_ret
2650c     2D 00 64 FD | 	ret
26510                 | 
26510                 | _fatfs_cc_get_ldnumber
26510     01 00 66 F6 | 	neg	_var01, #1
26514     09 03 0A FB | 	rdlong	_var02, arg01 wz
26518     01 05 02 F6 | 	mov	_var03, _var02
2651c     01 FA 65 A6 |  if_e	neg	result1, #1
26520     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
26524     97 10 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
26528                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
26528                 | LR__3980
26528     02 07 C2 FA | 	rdbyte	_var04, _var03
2652c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
26530     20 FA 15 F2 | 	cmp	result1, #32 wc
26534     01 04 06 F1 | 	add	_var03, #1
26538     03 09 02 36 |  if_ae	mov	_var05, _var04
2653c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
26540     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
26544     E0 FF 9F 1D |  if_a	jmp	#LR__3980
26548                 | LR__3981
26548     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2654c     3A 06 0E F2 | 	cmp	_var04, #58 wz
26550     40 00 90 5D |  if_ne	jmp	#LR__3983
26554     01 0A 06 F6 | 	mov	_var06, #1
26558     01 09 C2 FA | 	rdbyte	_var05, _var02
2655c     30 08 16 F2 | 	cmp	_var05, #48 wc
26560     1C 00 90 CD |  if_b	jmp	#LR__3982
26564     01 09 C2 FA | 	rdbyte	_var05, _var02
26568     3A 08 16 F2 | 	cmp	_var05, #58 wc
2656c     01 0D 02 C6 |  if_b	mov	_var07, _var02
26570     02 0C 06 C1 |  if_b	add	_var07, #2
26574     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
26578     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2657c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
26580                 | LR__3982
26580     01 0A 56 F2 | 	cmps	_var06, #1 wc
26584     05 01 02 C6 |  if_b	mov	_var01, _var06
26588     09 05 62 CC |  if_b	wrlong	_var03, arg01
2658c                 | ' 			vol = i;
2658c                 | ' 			*path = tt;
2658c                 | ' 		}
2658c                 | ' 		return vol;
2658c     00 FB 01 F6 | 	mov	result1, _var01
26590     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
26594                 | LR__3983
26594                 | ' 	}
26594                 | ' #line 3170 "ff.c"
26594                 | ' 	vol = 0;
26594                 | ' 
26594                 | ' 	return vol;
26594     00 FA 05 F6 | 	mov	result1, #0
26598                 | _fatfs_cc_get_ldnumber_ret
26598     2D 00 64 FD | 	ret
2659c                 | 
2659c                 | _fatfs_cc_check_fs
2659c     04 4A 05 F6 | 	mov	COUNT_, #4
265a0     A8 00 A0 FD | 	call	#pushregs_
265a4     09 1F 02 F6 | 	mov	local01, arg01
265a8     03 1E 06 F1 | 	add	local01, #3
265ac     0F 01 48 FC | 	wrbyte	#0, local01
265b0     2D 1E 06 F1 | 	add	local01, #45
265b4     FF FF FF FF 
265b8     0F FF 6B FC | 	wrlong	##-1, local01
265bc     30 1E 86 F1 | 	sub	local01, #48
265c0     0F 13 02 F6 | 	mov	arg01, local01
265c4     18 D5 BF FD | 	call	#_fatfs_cc_move_window
265c8     00 FA 0D F2 | 	cmp	result1, #0 wz
265cc     04 FA 05 56 |  if_ne	mov	result1, #4
265d0     94 01 90 5D |  if_ne	jmp	#LR__3994
265d4     34 1E 06 F1 | 	add	local01, #52
265d8     0F 13 02 F6 | 	mov	arg01, local01
265dc     FE 13 06 F1 | 	add	arg01, #510
265e0                 | ' {
265e0                 | ' 
265e0                 | ' 	return *((WORD*)ptr);
265e0     09 21 E2 FA | 	rdword	local02, arg01
265e4     0F 23 C2 FA | 	rdbyte	local03, local01
265e8     34 1E 86 F1 | 	sub	local01, #52
265ec     11 25 E2 F8 | 	getbyte	local04, local03, #0
265f0     EB 24 0E F2 | 	cmp	local04, #235 wz
265f4     11 17 02 56 |  if_ne	mov	arg03, local03
265f8     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
265fc     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
26600     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
26604     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
26608     44 01 90 5D |  if_ne	jmp	#LR__3993
2660c     10 25 32 F9 | 	getword	local04, local02, #0
26610     55 00 00 FF 
26614     55 24 0E F2 | 	cmp	local04, ##43605 wz
26618     2C 00 90 5D |  if_ne	jmp	#LR__3990
2661c     34 1E 06 F1 | 	add	local01, #52
26620     0F 13 02 F6 | 	mov	arg01, local01
26624     34 1E 86 F1 | 	sub	local01, #52
26628     52 12 06 F1 | 	add	arg01, #82
2662c     5D 01 00 FF 
26630     7C 14 06 F6 | 	mov	arg02, ##@LR__4584
26634     08 16 06 F6 | 	mov	arg03, #8
26638     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2663c     00 FA 0D F2 | 	cmp	result1, #0 wz
26640                 | ' 			return 0;
26640     00 FA 05 A6 |  if_e	mov	result1, #0
26644     20 01 90 AD |  if_e	jmp	#LR__3994
26648                 | LR__3990
26648     34 1E 06 F1 | 	add	local01, #52
2664c     0F 13 02 F6 | 	mov	arg01, local01
26650     0B 12 06 F1 | 	add	arg01, #11
26654                 | ' {
26654                 | ' 
26654                 | ' 	return *((WORD*)ptr);
26654     09 FB E1 FA | 	rdword	result1, arg01
26658     0D 1E 06 F1 | 	add	local01, #13
2665c     0F 23 C2 FA | 	rdbyte	local03, local01
26660     41 1E 86 F1 | 	sub	local01, #65
26664     FD 24 32 F9 | 	getword	local04, result1, #0
26668     FD 14 32 F9 | 	getword	arg02, result1, #0
2666c     01 14 86 F1 | 	sub	arg02, #1
26670     0A 25 CA F7 | 	test	local04, arg02 wz
26674     D8 00 90 5D |  if_ne	jmp	#LR__3992
26678     FD 14 32 F9 | 	getword	arg02, result1, #0
2667c     01 00 00 FF 
26680     00 14 16 F2 | 	cmp	arg02, ##512 wc
26684     C8 00 90 CD |  if_b	jmp	#LR__3992
26688     FD 14 32 F9 | 	getword	arg02, result1, #0
2668c     01 00 00 FF 
26690     01 14 16 F2 | 	cmp	arg02, ##513 wc
26694     B8 00 90 3D |  if_ae	jmp	#LR__3992
26698     11 13 02 F6 | 	mov	arg01, local03
2669c     07 12 4E F7 | 	zerox	arg01, #7 wz
266a0     AC 00 90 AD |  if_e	jmp	#LR__3992
266a4     11 13 E2 F8 | 	getbyte	arg01, local03, #0
266a8     11 23 E2 F8 | 	getbyte	local03, local03, #0
266ac     01 22 86 F1 | 	sub	local03, #1
266b0     11 13 CA F7 | 	test	arg01, local03 wz
266b4     98 00 90 5D |  if_ne	jmp	#LR__3992
266b8     34 1E 06 F1 | 	add	local01, #52
266bc     0F 13 02 F6 | 	mov	arg01, local01
266c0     34 1E 86 F1 | 	sub	local01, #52
266c4     0E 12 06 F1 | 	add	arg01, #14
266c8                 | ' {
266c8                 | ' 
266c8                 | ' 	return *((WORD*)ptr);
266c8     09 FB E9 FA | 	rdword	result1, arg01 wz
266cc     80 00 90 AD |  if_e	jmp	#LR__3992
266d0     44 1E 06 F1 | 	add	local01, #68
266d4     0F 13 C2 FA | 	rdbyte	arg01, local01
266d8     44 1E 86 F1 | 	sub	local01, #68
266dc     01 12 86 F1 | 	sub	arg01, #1
266e0     02 12 16 F2 | 	cmp	arg01, #2 wc
266e4     68 00 90 3D |  if_ae	jmp	#LR__3992
266e8     34 1E 06 F1 | 	add	local01, #52
266ec     0F 13 02 F6 | 	mov	arg01, local01
266f0     34 1E 86 F1 | 	sub	local01, #52
266f4     11 12 06 F1 | 	add	arg01, #17
266f8                 | ' {
266f8                 | ' 
266f8                 | ' 	return *((WORD*)ptr);
266f8     09 FB E9 FA | 	rdword	result1, arg01 wz
266fc     50 00 90 AD |  if_e	jmp	#LR__3992
26700     34 1E 06 F1 | 	add	local01, #52
26704     0F 13 02 F6 | 	mov	arg01, local01
26708     34 1E 86 F1 | 	sub	local01, #52
2670c     13 12 06 F1 | 	add	arg01, #19
26710                 | ' {
26710                 | ' 
26710                 | ' 	return *((WORD*)ptr);
26710     09 FB E1 FA | 	rdword	result1, arg01
26714     FD 22 32 F9 | 	getword	local03, result1, #0
26718     80 22 16 F2 | 	cmp	local03, #128 wc
2671c     20 00 90 3D |  if_ae	jmp	#LR__3991
26720     34 1E 06 F1 | 	add	local01, #52
26724     0F 13 02 F6 | 	mov	arg01, local01
26728     34 1E 86 F1 | 	sub	local01, #52
2672c     20 12 06 F1 | 	add	arg01, #32
26730                 | ' {
26730                 | ' 
26730                 | ' 	return *((DWORD*)ptr);
26730     09 FB 01 FB | 	rdlong	result1, arg01
26734     80 00 00 FF 
26738     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2673c     10 00 90 CD |  if_b	jmp	#LR__3992
26740                 | LR__3991
26740     4A 1E 06 F1 | 	add	local01, #74
26744                 | ' {
26744                 | ' 
26744                 | ' 	return *((WORD*)ptr);
26744     0F FB E9 FA | 	rdword	result1, local01 wz
26748                 | ' 			&& b != 0 && (b & (b - 1)) == 0
26748                 | ' 			&& ld_word(fs->win +  14 ) != 0
26748                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
26748                 | ' 			&& ld_word(fs->win +  17 ) != 0
26748                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
26748                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
26748                 | ' 				return 0;
26748     00 FA 05 56 |  if_ne	mov	result1, #0
2674c     18 00 90 5D |  if_ne	jmp	#LR__3994
26750                 | LR__3992
26750                 | LR__3993
26750                 | ' 		}
26750                 | ' 	}
26750                 | ' 	return sign == 0xAA55 ? 2 : 3;
26750     10 23 32 F9 | 	getword	local03, local02, #0
26754     55 00 00 FF 
26758     55 22 0E F2 | 	cmp	local03, ##43605 wz
2675c     02 24 06 A6 |  if_e	mov	local04, #2
26760     03 24 06 56 |  if_ne	mov	local04, #3
26764     12 FB 01 F6 | 	mov	result1, local04
26768                 | LR__3994
26768     A7 F0 03 F6 | 	mov	ptra, fp
2676c     B2 00 A0 FD | 	call	#popregs_
26770                 | _fatfs_cc_check_fs_ret
26770     2D 00 64 FD | 	ret
26774                 | 
26774                 | _fatfs_cc_find_volume
26774     05 4A 05 F6 | 	mov	COUNT_, #5
26778     A8 00 A0 FD | 	call	#pushregs_
2677c     24 F0 07 F1 | 	add	ptra, #36
26780     09 1F 02 F6 | 	mov	local01, arg01
26784     0A 21 02 F6 | 	mov	local02, arg02
26788     0F 13 02 F6 | 	mov	arg01, local01
2678c     00 14 06 F6 | 	mov	arg02, #0
26790     08 FE BF FD | 	call	#_fatfs_cc_check_fs
26794     02 FA 0D F2 | 	cmp	result1, #2 wz
26798     0C 00 90 AD |  if_e	jmp	#LR__4000
2679c     03 FA 15 F2 | 	cmp	result1, #3 wc
267a0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
267a4     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4008
267a8                 | LR__4000
267a8                 | ' 	for (i = 0; i < 4; i++) {
267a8     00 22 06 F6 | 	mov	local03, #0
267ac     97 26 48 FB | 	callpa	#(@LR__4002-@LR__4001)>>2,fcache_load_ptr_
267b0                 | LR__4001
267b0     04 22 16 F2 | 	cmp	local03, #4 wc
267b4     44 00 90 3D |  if_ae	jmp	#LR__4003
267b8     11 25 02 F6 | 	mov	local04, local03
267bc     02 24 66 F0 | 	shl	local04, #2
267c0     14 4E 05 F1 | 	add	fp, #20
267c4     A7 24 02 F1 | 	add	local04, fp
267c8     34 1E 06 F1 | 	add	local01, #52
267cc     0F 13 02 F6 | 	mov	arg01, local01
267d0     34 1E 86 F1 | 	sub	local01, #52
267d4     BE 13 06 F1 | 	add	arg01, #446
267d8     11 15 02 F6 | 	mov	arg02, local03
267dc     04 14 66 F0 | 	shl	arg02, #4
267e0     0A 13 02 F1 | 	add	arg01, arg02
267e4     08 12 06 F1 | 	add	arg01, #8
267e8                 | ' {
267e8                 | ' 
267e8                 | ' 	return *((DWORD*)ptr);
267e8     09 FB 01 FB | 	rdlong	result1, arg01
267ec     14 4E 85 F1 | 	sub	fp, #20
267f0     12 FB 61 FC | 	wrlong	result1, local04
267f4     01 22 06 F1 | 	add	local03, #1
267f8     B4 FF 9F FD | 	jmp	#LR__4001
267fc                 | LR__4002
267fc                 | LR__4003
267fc     00 20 0E F2 | 	cmp	local02, #0 wz
26800     10 25 02 56 |  if_ne	mov	local04, local02
26804     01 24 86 51 |  if_ne	sub	local04, #1
26808     00 24 06 A6 |  if_e	mov	local04, #0
2680c     12 23 02 F6 | 	mov	local03, local04
26810                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
26810                 | ' 	}
26810                 | ' 	i = part ? part - 1 : 0;
26810                 | ' 	do {
26810                 | LR__4004
26810     11 25 02 F6 | 	mov	local04, local03
26814     02 24 66 F0 | 	shl	local04, #2
26818     14 4E 05 F1 | 	add	fp, #20
2681c     A7 24 02 F1 | 	add	local04, fp
26820     12 25 0A FB | 	rdlong	local04, local04 wz
26824     14 4E 85 F1 | 	sub	fp, #20
26828     28 00 90 AD |  if_e	jmp	#LR__4005
2682c     11 25 02 F6 | 	mov	local04, local03
26830     02 24 66 F0 | 	shl	local04, #2
26834     14 4E 05 F1 | 	add	fp, #20
26838     A7 24 02 F1 | 	add	local04, fp
2683c     12 15 02 FB | 	rdlong	arg02, local04
26840     0F 13 02 F6 | 	mov	arg01, local01
26844     14 4E 85 F1 | 	sub	fp, #20
26848     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2684c     FD 24 02 F6 | 	mov	local04, result1
26850     04 00 90 FD | 	jmp	#LR__4006
26854                 | LR__4005
26854     03 24 06 F6 | 	mov	local04, #3
26858                 | LR__4006
26858     12 27 02 F6 | 	mov	local05, local04
2685c     00 20 0E F2 | 	cmp	local02, #0 wz
26860     02 26 16 A2 |  if_e	cmp	local05, #2 wc
26864     0C 00 90 8D |  if_c_and_z	jmp	#LR__4007
26868     01 22 06 A1 |  if_e	add	local03, #1
2686c     04 22 16 A2 |  if_e	cmp	local03, #4 wc
26870     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4004
26874                 | LR__4007
26874                 | ' 	return fmt;
26874     13 FB 01 F6 | 	mov	result1, local05
26878                 | LR__4008
26878     A7 F0 03 F6 | 	mov	ptra, fp
2687c     B2 00 A0 FD | 	call	#popregs_
26880                 | _fatfs_cc_find_volume_ret
26880     2D 00 64 FD | 	ret
26884                 | 
26884                 | _fatfs_cc_mount_volume
26884     0B 4A 05 F6 | 	mov	COUNT_, #11
26888     A8 00 A0 FD | 	call	#pushregs_
2688c     0A 1F 02 F6 | 	mov	local01, arg02
26890     0B 21 02 F6 | 	mov	local02, arg03
26894     0F 01 68 FC | 	wrlong	#0, local01
26898     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2689c     FD 22 02 F6 | 	mov	local03, result1
268a0     00 22 56 F2 | 	cmps	local03, #0 wc
268a4     0B FA 05 C6 |  if_b	mov	result1, #11
268a8     3C 05 90 CD |  if_b	jmp	#LR__4020
268ac     11 17 02 F6 | 	mov	arg03, local03
268b0     02 16 66 F0 | 	shl	arg03, #2
268b4     F2 16 02 F1 | 	add	arg03, objptr
268b8     0B 25 0A FB | 	rdlong	local04, arg03 wz
268bc     0C FA 05 A6 |  if_e	mov	result1, #12
268c0     24 05 90 AD |  if_e	jmp	#LR__4020
268c4     0F 25 62 FC | 	wrlong	local04, local01
268c8     10 21 E2 F8 | 	getbyte	local02, local02, #0
268cc     FE 20 06 F5 | 	and	local02, #254
268d0     12 17 CA FA | 	rdbyte	arg03, local04 wz
268d4     4C 00 90 AD |  if_e	jmp	#LR__4011
268d8     01 24 06 F1 | 	add	local04, #1
268dc     12 13 CA FA | 	rdbyte	arg01, local04 wz
268e0     01 24 86 F1 | 	sub	local04, #1
268e4     01 FA 05 56 |  if_ne	mov	result1, #1
268e8                 | ' 
268e8                 | ' 	return Stat;
268e8     01 00 00 AF 
268ec     20 E4 05 A1 |  if_e	add	objptr, ##544
268f0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
268f4     01 00 00 AF 
268f8     20 E4 85 A1 |  if_e	sub	objptr, ##544
268fc     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
26900     01 16 CE F7 | 	test	arg03, #1 wz
26904     1C 00 90 5D |  if_ne	jmp	#LR__4010
26908     00 20 0E F2 | 	cmp	local02, #0 wz
2690c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
26910     04 FA CD 57 |  if_ne	test	result1, #4 wz
26914                 | ' 				return FR_WRITE_PROTECTED;
26914     0A FA 05 56 |  if_ne	mov	result1, #10
26918     CC 04 90 5D |  if_ne	jmp	#LR__4020
2691c                 | ' 			}
2691c                 | ' 			return FR_OK;
2691c     00 FA 05 F6 | 	mov	result1, #0
26920     C4 04 90 FD | 	jmp	#LR__4020
26924                 | LR__4010
26924                 | LR__4011
26924     12 01 48 FC | 	wrbyte	#0, local04
26928     01 24 06 F1 | 	add	local04, #1
2692c     12 23 42 FC | 	wrbyte	local03, local04
26930     12 13 C2 FA | 	rdbyte	arg01, local04
26934     01 24 86 F1 | 	sub	local04, #1
26938     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2693c     FD 16 02 F6 | 	mov	arg03, result1
26940     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
26944     01 26 CE F7 | 	test	local05, #1 wz
26948                 | ' 		return FR_NOT_READY;
26948     03 FA 05 56 |  if_ne	mov	result1, #3
2694c     98 04 90 5D |  if_ne	jmp	#LR__4020
26950     00 20 0E F2 | 	cmp	local02, #0 wz
26954     0B 27 02 56 |  if_ne	mov	local05, arg03
26958     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2695c     04 26 CE 57 |  if_ne	test	local05, #4 wz
26960                 | ' 		return FR_WRITE_PROTECTED;
26960     0A FA 05 56 |  if_ne	mov	result1, #10
26964     80 04 90 5D |  if_ne	jmp	#LR__4020
26968     12 13 02 F6 | 	mov	arg01, local04
2696c     00 14 06 F6 | 	mov	arg02, #0
26970     00 FE BF FD | 	call	#_fatfs_cc_find_volume
26974     FD 12 02 F6 | 	mov	arg01, result1
26978     04 12 0E F2 | 	cmp	arg01, #4 wz
2697c     01 FA 05 A6 |  if_e	mov	result1, #1
26980     64 04 90 AD |  if_e	jmp	#LR__4020
26984     02 12 16 F2 | 	cmp	arg01, #2 wc
26988     0D FA 05 36 |  if_ae	mov	result1, #13
2698c     58 04 90 3D |  if_ae	jmp	#LR__4020
26990     30 24 06 F1 | 	add	local04, #48
26994     12 29 02 FB | 	rdlong	local06, local04
26998     04 24 06 F1 | 	add	local04, #4
2699c     12 13 02 F6 | 	mov	arg01, local04
269a0     34 24 86 F1 | 	sub	local04, #52
269a4     0B 12 06 F1 | 	add	arg01, #11
269a8                 | ' {
269a8                 | ' 
269a8                 | ' 	return *((WORD*)ptr);
269a8     09 FB E1 FA | 	rdword	result1, arg01
269ac     01 00 00 FF 
269b0     00 FA 0D F2 | 	cmp	result1, ##512 wz
269b4     0D FA 05 56 |  if_ne	mov	result1, #13
269b8     2C 04 90 5D |  if_ne	jmp	#LR__4020
269bc     34 24 06 F1 | 	add	local04, #52
269c0     12 13 02 F6 | 	mov	arg01, local04
269c4     34 24 86 F1 | 	sub	local04, #52
269c8     16 12 06 F1 | 	add	arg01, #22
269cc                 | ' {
269cc                 | ' 
269cc                 | ' 	return *((WORD*)ptr);
269cc     09 FB E1 FA | 	rdword	result1, arg01
269d0     FD 2A 0A F6 | 	mov	local07, result1 wz
269d4     18 00 90 5D |  if_ne	jmp	#LR__4012
269d8     34 24 06 F1 | 	add	local04, #52
269dc     12 13 02 F6 | 	mov	arg01, local04
269e0     34 24 86 F1 | 	sub	local04, #52
269e4     24 12 06 F1 | 	add	arg01, #36
269e8                 | ' {
269e8                 | ' 
269e8                 | ' 	return *((DWORD*)ptr);
269e8     09 FB 01 FB | 	rdlong	result1, arg01
269ec     FD 2A 02 F6 | 	mov	local07, result1
269f0                 | LR__4012
269f0     1C 24 06 F1 | 	add	local04, #28
269f4     12 2B 62 FC | 	wrlong	local07, local04
269f8     28 24 06 F1 | 	add	local04, #40
269fc     12 27 C2 FA | 	rdbyte	local05, local04
26a00     42 24 86 F1 | 	sub	local04, #66
26a04     12 27 42 FC | 	wrbyte	local05, local04
26a08     12 27 C2 FA | 	rdbyte	local05, local04
26a0c     02 24 86 F1 | 	sub	local04, #2
26a10     01 26 0E F2 | 	cmp	local05, #1 wz
26a14     02 24 06 51 |  if_ne	add	local04, #2
26a18     12 27 C2 5A |  if_ne	rdbyte	local05, local04
26a1c     02 24 86 51 |  if_ne	sub	local04, #2
26a20     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
26a24     0D FA 05 56 |  if_ne	mov	result1, #13
26a28     BC 03 90 5D |  if_ne	jmp	#LR__4020
26a2c     02 24 06 F1 | 	add	local04, #2
26a30     12 27 C2 FA | 	rdbyte	local05, local04
26a34     13 2B 02 FD | 	qmul	local07, local05
26a38     3F 24 06 F1 | 	add	local04, #63
26a3c     12 27 C2 FA | 	rdbyte	local05, local04
26a40     37 24 86 F1 | 	sub	local04, #55
26a44     12 27 52 FC | 	wrword	local05, local04
26a48     12 27 EA FA | 	rdword	local05, local04 wz
26a4c     0A 24 86 F1 | 	sub	local04, #10
26a50     18 2A 62 FD | 	getqx	local07
26a54     20 00 90 AD |  if_e	jmp	#LR__4013
26a58     0A 24 06 F1 | 	add	local04, #10
26a5c     12 27 E2 FA | 	rdword	local05, local04
26a60     13 23 32 F9 | 	getword	local03, local05, #0
26a64     0A 24 86 F1 | 	sub	local04, #10
26a68     13 27 32 F9 | 	getword	local05, local05, #0
26a6c     01 26 86 F1 | 	sub	local05, #1
26a70     13 23 CA F7 | 	test	local03, local05 wz
26a74     08 00 90 AD |  if_e	jmp	#LR__4014
26a78                 | LR__4013
26a78     0D FA 05 F6 | 	mov	result1, #13
26a7c     68 03 90 FD | 	jmp	#LR__4020
26a80                 | LR__4014
26a80     34 24 06 F1 | 	add	local04, #52
26a84     12 13 02 F6 | 	mov	arg01, local04
26a88     11 12 06 F1 | 	add	arg01, #17
26a8c                 | ' {
26a8c                 | ' 
26a8c                 | ' 	return *((WORD*)ptr);
26a8c     09 FB E1 FA | 	rdword	result1, arg01
26a90     2C 24 86 F1 | 	sub	local04, #44
26a94     12 FB 51 FC | 	wrword	result1, local04
26a98     12 27 E2 FA | 	rdword	local05, local04
26a9c     08 24 86 F1 | 	sub	local04, #8
26aa0     13 13 52 F6 | 	abs	arg01, local05 wc
26aa4     09 13 42 F8 | 	getnib	arg01, arg01, #0
26aa8     09 13 8A F6 | 	negc	arg01, arg01 wz
26aac     0D FA 05 56 |  if_ne	mov	result1, #13
26ab0     34 03 90 5D |  if_ne	jmp	#LR__4020
26ab4     34 24 06 F1 | 	add	local04, #52
26ab8     12 13 02 F6 | 	mov	arg01, local04
26abc     34 24 86 F1 | 	sub	local04, #52
26ac0     13 12 06 F1 | 	add	arg01, #19
26ac4                 | ' {
26ac4                 | ' 
26ac4                 | ' 	return *((WORD*)ptr);
26ac4     09 FB E1 FA | 	rdword	result1, arg01
26ac8     FD 2C 0A F6 | 	mov	local08, result1 wz
26acc     34 24 06 A1 |  if_e	add	local04, #52
26ad0     12 13 02 A6 |  if_e	mov	arg01, local04
26ad4     34 24 86 A1 |  if_e	sub	local04, #52
26ad8     20 12 06 A1 |  if_e	add	arg01, #32
26adc                 | ' {
26adc                 | ' 
26adc                 | ' 	return *((DWORD*)ptr);
26adc     09 2D 02 AB |  if_e	rdlong	local08, arg01
26ae0     34 24 06 F1 | 	add	local04, #52
26ae4     12 13 02 F6 | 	mov	arg01, local04
26ae8     34 24 86 F1 | 	sub	local04, #52
26aec     0E 12 06 F1 | 	add	arg01, #14
26af0                 | ' {
26af0                 | ' 
26af0                 | ' 	return *((WORD*)ptr);
26af0     09 FB E1 FA | 	rdword	result1, arg01
26af4     FD 12 02 F6 | 	mov	arg01, result1
26af8     09 27 02 F6 | 	mov	local05, arg01
26afc     0F 26 4E F7 | 	zerox	local05, #15 wz
26b00     0D FA 05 A6 |  if_e	mov	result1, #13
26b04     E0 02 90 AD |  if_e	jmp	#LR__4020
26b08     09 2F 32 F9 | 	getword	local09, arg01, #0
26b0c     15 2F 02 F1 | 	add	local09, local07
26b10     08 24 06 F1 | 	add	local04, #8
26b14     12 27 E2 FA | 	rdword	local05, local04
26b18     08 24 86 F1 | 	sub	local04, #8
26b1c     13 27 52 F6 | 	abs	local05, local05 wc
26b20     04 26 46 F0 | 	shr	local05, #4
26b24     13 2F 82 F3 | 	sumc	local09, local05
26b28     17 2D 12 F2 | 	cmp	local08, local09 wc
26b2c     0D FA 05 C6 |  if_b	mov	result1, #13
26b30     B4 02 90 CD |  if_b	jmp	#LR__4020
26b34     17 2D 82 F1 | 	sub	local08, local09
26b38     0A 24 06 F1 | 	add	local04, #10
26b3c     12 27 E2 FA | 	rdword	local05, local04
26b40     13 2D 12 FD | 	qdiv	local08, local05
26b44     0A 24 86 F1 | 	sub	local04, #10
26b48     18 26 62 FD | 	getqx	local05
26b4c     00 26 0E F2 | 	cmp	local05, #0 wz
26b50     0D FA 05 A6 |  if_e	mov	result1, #13
26b54     90 02 90 AD |  if_e	jmp	#LR__4020
26b58     00 30 06 F6 | 	mov	local10, #0
26b5c     FF FF 07 FF 
26b60     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
26b64     03 30 06 C6 |  if_b	mov	local10, #3
26b68     7F 00 00 FF 
26b6c     F6 27 16 F2 | 	cmp	local05, ##65526 wc
26b70     02 30 06 C6 |  if_b	mov	local10, #2
26b74     07 00 00 FF 
26b78     F6 27 16 F2 | 	cmp	local05, ##4086 wc
26b7c     01 30 06 C6 |  if_b	mov	local10, #1
26b80     00 30 0E F2 | 	cmp	local10, #0 wz
26b84     0D FA 05 A6 |  if_e	mov	result1, #13
26b88     5C 02 90 AD |  if_e	jmp	#LR__4020
26b8c     02 26 06 F1 | 	add	local05, #2
26b90     18 24 06 F1 | 	add	local04, #24
26b94     12 27 62 FC | 	wrlong	local05, local04
26b98     08 24 06 F1 | 	add	local04, #8
26b9c     12 29 62 FC | 	wrlong	local06, local04
26ba0     14 27 02 F6 | 	mov	local05, local06
26ba4     09 13 32 F9 | 	getword	arg01, arg01, #0
26ba8     09 27 02 F1 | 	add	local05, arg01
26bac     04 24 06 F1 | 	add	local04, #4
26bb0     12 27 62 FC | 	wrlong	local05, local04
26bb4     14 27 02 F6 | 	mov	local05, local06
26bb8     17 27 02 F1 | 	add	local05, local09
26bbc     08 24 06 F1 | 	add	local04, #8
26bc0     12 27 62 FC | 	wrlong	local05, local04
26bc4     2C 24 86 F1 | 	sub	local04, #44
26bc8     03 30 0E F2 | 	cmp	local10, #3 wz
26bcc     5C 00 90 5D |  if_ne	jmp	#LR__4015
26bd0     34 24 06 F1 | 	add	local04, #52
26bd4     12 13 02 F6 | 	mov	arg01, local04
26bd8     34 24 86 F1 | 	sub	local04, #52
26bdc     2A 12 06 F1 | 	add	arg01, #42
26be0                 | ' {
26be0                 | ' 
26be0                 | ' 	return *((WORD*)ptr);
26be0     09 FB E9 FA | 	rdword	result1, arg01 wz
26be4     0D FA 05 56 |  if_ne	mov	result1, #13
26be8     FC 01 90 5D |  if_ne	jmp	#LR__4020
26bec     08 24 06 F1 | 	add	local04, #8
26bf0     12 27 EA FA | 	rdword	local05, local04 wz
26bf4     08 24 86 F1 | 	sub	local04, #8
26bf8     0D FA 05 56 |  if_ne	mov	result1, #13
26bfc     E8 01 90 5D |  if_ne	jmp	#LR__4020
26c00     34 24 06 F1 | 	add	local04, #52
26c04     12 13 02 F6 | 	mov	arg01, local04
26c08     2C 12 06 F1 | 	add	arg01, #44
26c0c                 | ' {
26c0c                 | ' 
26c0c                 | ' 	return *((DWORD*)ptr);
26c0c     09 FB 01 FB | 	rdlong	result1, arg01
26c10     0C 24 86 F1 | 	sub	local04, #12
26c14     12 FB 61 FC | 	wrlong	result1, local04
26c18     10 24 86 F1 | 	sub	local04, #16
26c1c     12 33 02 FB | 	rdlong	local11, local04
26c20     18 24 86 F1 | 	sub	local04, #24
26c24     02 32 66 F0 | 	shl	local11, #2
26c28     6C 00 90 FD | 	jmp	#LR__4017
26c2c                 | LR__4015
26c2c     08 24 06 F1 | 	add	local04, #8
26c30     12 27 EA FA | 	rdword	local05, local04 wz
26c34     08 24 86 F1 | 	sub	local04, #8
26c38     0D FA 05 A6 |  if_e	mov	result1, #13
26c3c     A8 01 90 AD |  if_e	jmp	#LR__4020
26c40     24 24 06 F1 | 	add	local04, #36
26c44     12 27 02 FB | 	rdlong	local05, local04
26c48     15 27 02 F1 | 	add	local05, local07
26c4c     04 24 06 F1 | 	add	local04, #4
26c50     12 27 62 FC | 	wrlong	local05, local04
26c54     28 24 86 F1 | 	sub	local04, #40
26c58     02 30 0E F2 | 	cmp	local10, #2 wz
26c5c     18 24 06 A1 |  if_e	add	local04, #24
26c60     12 27 02 AB |  if_e	rdlong	local05, local04
26c64     18 24 86 A1 |  if_e	sub	local04, #24
26c68     01 26 66 A0 |  if_e	shl	local05, #1
26c6c     24 00 90 AD |  if_e	jmp	#LR__4016
26c70     18 24 06 F1 | 	add	local04, #24
26c74     12 33 02 FB | 	rdlong	local11, local04
26c78     19 27 02 F6 | 	mov	local05, local11
26c7c     01 26 66 F0 | 	shl	local05, #1
26c80     19 27 02 F1 | 	add	local05, local11
26c84     01 26 46 F0 | 	shr	local05, #1
26c88     18 24 86 F1 | 	sub	local04, #24
26c8c     01 32 06 F5 | 	and	local11, #1
26c90     19 27 02 F1 | 	add	local05, local11
26c94                 | LR__4016
26c94     13 33 02 F6 | 	mov	local11, local05
26c98                 | LR__4017
26c98     FF 33 06 F1 | 	add	local11, #511
26c9c     09 32 46 F0 | 	shr	local11, #9
26ca0     1C 24 06 F1 | 	add	local04, #28
26ca4     12 17 02 FB | 	rdlong	arg03, local04
26ca8     1C 24 86 F1 | 	sub	local04, #28
26cac     19 17 12 F2 | 	cmp	arg03, local11 wc
26cb0     0D FA 05 C6 |  if_b	mov	result1, #13
26cb4     30 01 90 CD |  if_b	jmp	#LR__4020
26cb8     14 24 06 F1 | 	add	local04, #20
26cbc     FF FF FF FF 
26cc0     12 FF 6B FC | 	wrlong	##-1, local04
26cc4     04 24 86 F1 | 	sub	local04, #4
26cc8     FF FF FF FF 
26ccc     12 FF 6B FC | 	wrlong	##-1, local04
26cd0     0C 24 86 F1 | 	sub	local04, #12
26cd4     12 01 49 FC | 	wrbyte	#128, local04
26cd8     04 24 86 F1 | 	sub	local04, #4
26cdc     03 30 0E F2 | 	cmp	local10, #3 wz
26ce0     D0 00 90 5D |  if_ne	jmp	#LR__4019
26ce4     34 24 06 F1 | 	add	local04, #52
26ce8     12 13 02 F6 | 	mov	arg01, local04
26cec     34 24 86 F1 | 	sub	local04, #52
26cf0     30 12 06 F1 | 	add	arg01, #48
26cf4                 | ' {
26cf4                 | ' 
26cf4                 | ' 	return *((WORD*)ptr);
26cf4     09 FB E1 FA | 	rdword	result1, arg01
26cf8     FD 26 32 F9 | 	getword	local05, result1, #0
26cfc     01 26 0E F2 | 	cmp	local05, #1 wz
26d00     B0 00 90 5D |  if_ne	jmp	#LR__4019
26d04     01 28 06 F1 | 	add	local06, #1
26d08     12 13 02 F6 | 	mov	arg01, local04
26d0c     14 15 02 F6 | 	mov	arg02, local06
26d10     CC CD BF FD | 	call	#_fatfs_cc_move_window
26d14     00 FA 0D F2 | 	cmp	result1, #0 wz
26d18     98 00 90 5D |  if_ne	jmp	#LR__4019
26d1c     04 24 06 F1 | 	add	local04, #4
26d20     12 01 48 FC | 	wrbyte	#0, local04
26d24     30 24 06 F1 | 	add	local04, #48
26d28     12 13 02 F6 | 	mov	arg01, local04
26d2c     34 24 86 F1 | 	sub	local04, #52
26d30     FE 13 06 F1 | 	add	arg01, #510
26d34                 | ' {
26d34                 | ' 
26d34                 | ' 	return *((WORD*)ptr);
26d34     09 FB E1 FA | 	rdword	result1, arg01
26d38     FD 26 32 F9 | 	getword	local05, result1, #0
26d3c     55 00 00 FF 
26d40     55 26 0E F2 | 	cmp	local05, ##43605 wz
26d44     34 24 06 A1 |  if_e	add	local04, #52
26d48     12 13 02 A6 |  if_e	mov	arg01, local04
26d4c     34 24 86 A1 |  if_e	sub	local04, #52
26d50                 | ' {
26d50                 | ' 
26d50                 | ' 	return *((DWORD*)ptr);
26d50     09 FB 01 AB |  if_e	rdlong	result1, arg01
26d54     A9 B0 20 AF 
26d58     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
26d5c     54 00 90 5D |  if_ne	jmp	#LR__4018
26d60     34 24 06 F1 | 	add	local04, #52
26d64     12 13 02 F6 | 	mov	arg01, local04
26d68     34 24 86 F1 | 	sub	local04, #52
26d6c     E4 13 06 F1 | 	add	arg01, #484
26d70                 | ' {
26d70                 | ' 
26d70                 | ' 	return *((DWORD*)ptr);
26d70     09 FB 01 FB | 	rdlong	result1, arg01
26d74     B9 A0 30 FF 
26d78     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
26d7c     34 00 90 5D |  if_ne	jmp	#LR__4018
26d80     34 24 06 F1 | 	add	local04, #52
26d84     12 13 02 F6 | 	mov	arg01, local04
26d88     E8 13 06 F1 | 	add	arg01, #488
26d8c                 | ' {
26d8c                 | ' 
26d8c                 | ' 	return *((DWORD*)ptr);
26d8c     09 FB 01 FB | 	rdlong	result1, arg01
26d90     20 24 86 F1 | 	sub	local04, #32
26d94     12 FB 61 FC | 	wrlong	result1, local04
26d98     20 24 06 F1 | 	add	local04, #32
26d9c     12 13 02 F6 | 	mov	arg01, local04
26da0     EC 13 06 F1 | 	add	arg01, #492
26da4                 | ' {
26da4                 | ' 
26da4                 | ' 	return *((DWORD*)ptr);
26da4     09 FB 01 FB | 	rdlong	result1, arg01
26da8     24 24 86 F1 | 	sub	local04, #36
26dac     12 FB 61 FC | 	wrlong	result1, local04
26db0     10 24 86 F1 | 	sub	local04, #16
26db4                 | LR__4018
26db4                 | LR__4019
26db4     12 31 42 FC | 	wrbyte	local10, local04
26db8     04 E4 05 F1 | 	add	objptr, #4
26dbc     F2 26 E2 FA | 	rdword	local05, objptr
26dc0     01 26 06 F1 | 	add	local05, #1
26dc4     F2 26 52 FC | 	wrword	local05, objptr
26dc8     F2 32 E2 FA | 	rdword	local11, objptr
26dcc     06 24 06 F1 | 	add	local04, #6
26dd0     12 33 52 FC | 	wrword	local11, local04
26dd4     04 E4 05 F1 | 	add	objptr, #4
26dd8     06 24 06 F1 | 	add	local04, #6
26ddc     12 E5 61 FC | 	wrlong	objptr, local04
26de0                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
26de0                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
26de0                 | ' 			{
26de0                 | ' 
26de0                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
26de0                 | ' 
26de0                 | ' 
26de0                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
26de0                 | ' 
26de0                 | ' 			}
26de0                 | ' 		}
26de0                 | ' 
26de0                 | ' 
26de0                 | ' 	}
26de0                 | ' 
26de0                 | ' 	fs->fs_type = (BYTE)fmt;
26de0                 | ' 	fs->id = ++Fsid;
26de0                 | ' 
26de0                 | ' 	fs->lfnbuf = LfnBuf;
26de0                 | ' #line 3567 "ff.c"
26de0                 | ' 	return FR_OK;
26de0     00 FA 05 F6 | 	mov	result1, #0
26de4     08 E4 85 F1 | 	sub	objptr, #8
26de8                 | LR__4020
26de8     A7 F0 03 F6 | 	mov	ptra, fp
26dec     B2 00 A0 FD | 	call	#popregs_
26df0                 | _fatfs_cc_mount_volume_ret
26df0     2D 00 64 FD | 	ret
26df4                 | 
26df4                 | _fatfs_cc_validate
26df4     09 01 0A F6 | 	mov	_var01, arg01 wz
26df8     09 02 06 F6 | 	mov	_var02, #9
26dfc     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
26e00     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
26e04     50 00 90 AD |  if_e	jmp	#LR__4030
26e08     04 00 06 F1 | 	add	_var01, #4
26e0c     00 07 E2 FA | 	rdword	_var04, _var01
26e10     04 00 86 F1 | 	sub	_var01, #4
26e14     00 13 02 FB | 	rdlong	arg01, _var01
26e18     06 12 06 F1 | 	add	arg01, #6
26e1c     09 FB E1 FA | 	rdword	result1, arg01
26e20     FD 06 0A F2 | 	cmp	_var04, result1 wz
26e24     30 00 90 5D |  if_ne	jmp	#LR__4030
26e28     00 07 02 FB | 	rdlong	_var04, _var01
26e2c     01 06 06 F1 | 	add	_var04, #1
26e30     03 13 CA FA | 	rdbyte	arg01, _var04 wz
26e34     01 FA 05 56 |  if_ne	mov	result1, #1
26e38                 | ' 
26e38                 | ' 	return Stat;
26e38     01 00 00 AF 
26e3c     20 E4 05 A1 |  if_e	add	objptr, ##544
26e40     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
26e44     01 00 00 AF 
26e48     20 E4 85 A1 |  if_e	sub	objptr, ##544
26e4c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
26e50     01 04 CE F7 | 	test	_var03, #1 wz
26e54     00 02 06 A6 |  if_e	mov	_var02, #0
26e58                 | LR__4030
26e58     00 02 0E F2 | 	cmp	_var02, #0 wz
26e5c     00 05 02 AB |  if_e	rdlong	_var03, _var01
26e60     00 04 06 56 |  if_ne	mov	_var03, #0
26e64     0A 05 62 FC | 	wrlong	_var03, arg02
26e68                 | ' 			res = FR_OK;
26e68                 | ' 		}
26e68                 | ' 
26e68                 | ' 	}
26e68                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
26e68                 | ' 	return res;
26e68     01 FB 01 F6 | 	mov	result1, _var02
26e6c                 | _fatfs_cc_validate_ret
26e6c     2D 00 64 FD | 	ret
26e70                 | 
26e70                 | _fatfs_cc_f_mount
26e70     01 4A 05 F6 | 	mov	COUNT_, #1
26e74     A8 00 A0 FD | 	call	#pushregs_
26e78     20 F0 07 F1 | 	add	ptra, #32
26e7c     04 4E 05 F1 | 	add	fp, #4
26e80     A7 12 62 FC | 	wrlong	arg01, fp
26e84     04 4E 05 F1 | 	add	fp, #4
26e88     A7 14 62 FC | 	wrlong	arg02, fp
26e8c     04 4E 05 F1 | 	add	fp, #4
26e90     A7 16 42 FC | 	wrbyte	arg03, fp
26e94     04 4E 85 F1 | 	sub	fp, #4
26e98     A7 16 02 FB | 	rdlong	arg03, fp
26e9c     14 4E 05 F1 | 	add	fp, #20
26ea0     A7 16 62 FC | 	wrlong	arg03, fp
26ea4     A7 12 02 F6 | 	mov	arg01, fp
26ea8     1C 4E 85 F1 | 	sub	fp, #28
26eac     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
26eb0     14 4E 05 F1 | 	add	fp, #20
26eb4     A7 FA 61 FC | 	wrlong	result1, fp
26eb8     14 4E 85 F1 | 	sub	fp, #20
26ebc     00 FA 55 F2 | 	cmps	result1, #0 wc
26ec0     0B FA 05 C6 |  if_b	mov	result1, #11
26ec4     C0 00 90 CD |  if_b	jmp	#LR__4041
26ec8     14 4E 05 F1 | 	add	fp, #20
26ecc     A7 16 02 FB | 	rdlong	arg03, fp
26ed0     02 16 66 F0 | 	shl	arg03, #2
26ed4     F2 16 02 F1 | 	add	arg03, objptr
26ed8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
26edc     04 4E 85 F1 | 	sub	fp, #4
26ee0     A7 16 62 FC | 	wrlong	arg03, fp
26ee4     10 4E 85 F1 | 	sub	fp, #16
26ee8     28 00 90 AD |  if_e	jmp	#LR__4040
26eec     10 4E 05 F1 | 	add	fp, #16
26ef0     A7 16 02 FB | 	rdlong	arg03, fp
26ef4     10 4E 85 F1 | 	sub	fp, #16
26ef8     01 16 06 F1 | 	add	arg03, #1
26efc     0B 13 C2 FA | 	rdbyte	arg01, arg03
26f00     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
26f04     10 4E 05 F1 | 	add	fp, #16
26f08     A7 16 02 FB | 	rdlong	arg03, fp
26f0c     10 4E 85 F1 | 	sub	fp, #16
26f10     0B 01 48 FC | 	wrbyte	#0, arg03
26f14                 | LR__4040
26f14     04 4E 05 F1 | 	add	fp, #4
26f18     A7 1E 0A FB | 	rdlong	local01, fp wz
26f1c     04 4E 85 F1 | 	sub	fp, #4
26f20     04 4E 05 51 |  if_ne	add	fp, #4
26f24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26f28     04 4E 85 51 |  if_ne	sub	fp, #4
26f2c     0F 01 48 5C |  if_ne	wrbyte	#0, local01
26f30     14 4E 05 F1 | 	add	fp, #20
26f34     A7 1E 02 FB | 	rdlong	local01, fp
26f38     02 1E 66 F0 | 	shl	local01, #2
26f3c     F2 1E 02 F1 | 	add	local01, objptr
26f40     10 4E 85 F1 | 	sub	fp, #16
26f44     A7 16 02 FB | 	rdlong	arg03, fp
26f48     0F 17 62 FC | 	wrlong	arg03, local01
26f4c     08 4E 05 F1 | 	add	fp, #8
26f50     A7 1E CA FA | 	rdbyte	local01, fp wz
26f54     0C 4E 85 F1 | 	sub	fp, #12
26f58     00 FA 05 A6 |  if_e	mov	result1, #0
26f5c     28 00 90 AD |  if_e	jmp	#LR__4041
26f60     08 4E 05 F1 | 	add	fp, #8
26f64     A7 12 02 F6 | 	mov	arg01, fp
26f68     04 4E 85 F1 | 	sub	fp, #4
26f6c     A7 14 02 F6 | 	mov	arg02, fp
26f70     04 4E 85 F1 | 	sub	fp, #4
26f74     00 16 06 F6 | 	mov	arg03, #0
26f78     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
26f7c     18 4E 05 F1 | 	add	fp, #24
26f80     A7 FA 61 FC | 	wrlong	result1, fp
26f84                 | ' 
26f84                 | ' 	res = mount_volume(&path, &fs, 0);
26f84                 | ' 	return res ;
26f84     18 4E 85 F1 | 	sub	fp, #24
26f88                 | LR__4041
26f88     A7 F0 03 F6 | 	mov	ptra, fp
26f8c     B2 00 A0 FD | 	call	#popregs_
26f90                 | _fatfs_cc_f_mount_ret
26f90     2D 00 64 FD | 	ret
26f94                 | 
26f94                 | _fatfs_cc_f_open
26f94     02 4A 05 F6 | 	mov	COUNT_, #2
26f98     A8 00 A0 FD | 	call	#pushregs_
26f9c     60 F0 07 F1 | 	add	ptra, #96
26fa0     04 4E 05 F1 | 	add	fp, #4
26fa4     A7 12 62 FC | 	wrlong	arg01, fp
26fa8     04 4E 05 F1 | 	add	fp, #4
26fac     A7 14 62 FC | 	wrlong	arg02, fp
26fb0     04 4E 05 F1 | 	add	fp, #4
26fb4     A7 16 42 FC | 	wrbyte	arg03, fp
26fb8     08 4E 85 F1 | 	sub	fp, #8
26fbc     A7 18 0A FB | 	rdlong	arg04, fp wz
26fc0     04 4E 85 F1 | 	sub	fp, #4
26fc4     09 FA 05 A6 |  if_e	mov	result1, #9
26fc8     98 06 90 AD |  if_e	jmp	#LR__4067
26fcc     0C 4E 05 F1 | 	add	fp, #12
26fd0     A7 18 C2 FA | 	rdbyte	arg04, fp
26fd4     3F 18 06 F5 | 	and	arg04, #63
26fd8     A7 18 42 FC | 	wrbyte	arg04, fp
26fdc     04 4E 85 F1 | 	sub	fp, #4
26fe0     A7 12 02 F6 | 	mov	arg01, fp
26fe4     3C 4E 05 F1 | 	add	fp, #60
26fe8     A7 14 02 F6 | 	mov	arg02, fp
26fec     38 4E 85 F1 | 	sub	fp, #56
26ff0     A7 16 C2 FA | 	rdbyte	arg03, fp
26ff4     0C 4E 85 F1 | 	sub	fp, #12
26ff8     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
26ffc     10 4E 05 F1 | 	add	fp, #16
27000     A7 FA 61 FC | 	wrlong	result1, fp
27004     10 4E 85 F1 | 	sub	fp, #16
27008     00 FA 0D F2 | 	cmp	result1, #0 wz
2700c     2C 06 90 5D |  if_ne	jmp	#LR__4066
27010     44 4E 05 F1 | 	add	fp, #68
27014     A7 18 02 FB | 	rdlong	arg04, fp
27018     30 4E 85 F1 | 	sub	fp, #48
2701c     A7 18 62 FC | 	wrlong	arg04, fp
27020     A7 12 02 F6 | 	mov	arg01, fp
27024     0C 4E 85 F1 | 	sub	fp, #12
27028     A7 1E 02 FB | 	rdlong	local01, fp
2702c     08 4E 85 F1 | 	sub	fp, #8
27030     0F 15 02 F6 | 	mov	arg02, local01
27034     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
27038     10 4E 05 F1 | 	add	fp, #16
2703c     A7 FA 61 FC | 	wrlong	result1, fp
27040     10 4E 85 F1 | 	sub	fp, #16
27044     00 FA 0D F2 | 	cmp	result1, #0 wz
27048     1C 00 90 5D |  if_ne	jmp	#LR__4050
2704c     3F 4E 05 F1 | 	add	fp, #63
27050     A7 18 C2 FA | 	rdbyte	arg04, fp
27054     3F 4E 85 F1 | 	sub	fp, #63
27058     80 18 CE F7 | 	test	arg04, #128 wz
2705c     10 4E 05 51 |  if_ne	add	fp, #16
27060     A7 0C 68 5C |  if_ne	wrlong	#6, fp
27064     10 4E 85 51 |  if_ne	sub	fp, #16
27068                 | LR__4050
27068     0C 4E 05 F1 | 	add	fp, #12
2706c     A7 18 C2 FA | 	rdbyte	arg04, fp
27070     0C 4E 85 F1 | 	sub	fp, #12
27074     1C 18 CE F7 | 	test	arg04, #28 wz
27078     F0 01 90 AD |  if_e	jmp	#LR__4055
2707c     10 4E 05 F1 | 	add	fp, #16
27080     A7 1E 0A FB | 	rdlong	local01, fp wz
27084     10 4E 85 F1 | 	sub	fp, #16
27088     48 00 90 AD |  if_e	jmp	#LR__4052
2708c     10 4E 05 F1 | 	add	fp, #16
27090     A7 18 02 FB | 	rdlong	arg04, fp
27094     10 4E 85 F1 | 	sub	fp, #16
27098     04 18 0E F2 | 	cmp	arg04, #4 wz
2709c     1C 00 90 5D |  if_ne	jmp	#LR__4051
270a0     14 4E 05 F1 | 	add	fp, #20
270a4     A7 12 02 F6 | 	mov	arg01, fp
270a8     14 4E 85 F1 | 	sub	fp, #20
270ac     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
270b0     10 4E 05 F1 | 	add	fp, #16
270b4     A7 FA 61 FC | 	wrlong	result1, fp
270b8     10 4E 85 F1 | 	sub	fp, #16
270bc                 | LR__4051
270bc     0C 4E 05 F1 | 	add	fp, #12
270c0     A7 1E C2 FA | 	rdbyte	local01, fp
270c4     08 1E 46 F5 | 	or	local01, #8
270c8     A7 1E 42 FC | 	wrbyte	local01, fp
270cc     0C 4E 85 F1 | 	sub	fp, #12
270d0     3C 00 90 FD | 	jmp	#LR__4054
270d4                 | LR__4052
270d4     1A 4E 05 F1 | 	add	fp, #26
270d8     A7 1E C2 FA | 	rdbyte	local01, fp
270dc     1A 4E 85 F1 | 	sub	fp, #26
270e0     11 1E CE F7 | 	test	local01, #17 wz
270e4     10 4E 05 51 |  if_ne	add	fp, #16
270e8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
270ec     10 4E 85 51 |  if_ne	sub	fp, #16
270f0     1C 00 90 5D |  if_ne	jmp	#LR__4053
270f4     0C 4E 05 F1 | 	add	fp, #12
270f8     A7 1E C2 FA | 	rdbyte	local01, fp
270fc     0C 4E 85 F1 | 	sub	fp, #12
27100     04 1E CE F7 | 	test	local01, #4 wz
27104     10 4E 05 51 |  if_ne	add	fp, #16
27108     A7 10 68 5C |  if_ne	wrlong	#8, fp
2710c     10 4E 85 51 |  if_ne	sub	fp, #16
27110                 | LR__4053
27110                 | LR__4054
27110     10 4E 05 F1 | 	add	fp, #16
27114     A7 1E 0A FB | 	rdlong	local01, fp wz
27118     10 4E 85 F1 | 	sub	fp, #16
2711c     A8 01 90 5D |  if_ne	jmp	#LR__4058
27120     0C 4E 05 F1 | 	add	fp, #12
27124     A7 1E C2 FA | 	rdbyte	local01, fp
27128     0C 4E 85 F1 | 	sub	fp, #12
2712c     08 1E CE F7 | 	test	local01, #8 wz
27130     94 01 90 AD |  if_e	jmp	#LR__4058
27134     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
27138     54 4E 05 F1 | 	add	fp, #84
2713c     A7 FA 61 FC | 	wrlong	result1, fp
27140     24 4E 85 F1 | 	sub	fp, #36
27144     A7 12 02 FB | 	rdlong	arg01, fp
27148     0E 12 06 F1 | 	add	arg01, #14
2714c     09 FB 61 FC | 	wrlong	result1, arg01
27150     A7 12 02 FB | 	rdlong	arg01, fp
27154     16 12 06 F1 | 	add	arg01, #22
27158     24 4E 05 F1 | 	add	fp, #36
2715c     A7 14 02 FB | 	rdlong	arg02, fp
27160     09 15 62 FC | 	wrlong	arg02, arg01
27164     10 4E 85 F1 | 	sub	fp, #16
27168     A7 12 02 FB | 	rdlong	arg01, fp
2716c     14 4E 85 F1 | 	sub	fp, #20
27170     A7 14 02 FB | 	rdlong	arg02, fp
27174     30 4E 85 F1 | 	sub	fp, #48
27178     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2717c     48 4E 05 F1 | 	add	fp, #72
27180     A7 FA 61 FC | 	wrlong	result1, fp
27184     18 4E 85 F1 | 	sub	fp, #24
27188     A7 1E 02 FB | 	rdlong	local01, fp
2718c     0B 1E 06 F1 | 	add	local01, #11
27190     0F 41 48 FC | 	wrbyte	#32, local01
27194     14 4E 05 F1 | 	add	fp, #20
27198     A7 12 02 FB | 	rdlong	arg01, fp
2719c     14 4E 85 F1 | 	sub	fp, #20
271a0     A7 14 02 FB | 	rdlong	arg02, fp
271a4     30 4E 85 F1 | 	sub	fp, #48
271a8     00 16 06 F6 | 	mov	arg03, #0
271ac     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
271b0     30 4E 05 F1 | 	add	fp, #48
271b4     A7 12 02 FB | 	rdlong	arg01, fp
271b8     1C 12 06 F1 | 	add	arg01, #28
271bc     09 01 68 FC | 	wrlong	#0, arg01
271c0     14 4E 05 F1 | 	add	fp, #20
271c4     A7 1E 02 FB | 	rdlong	local01, fp
271c8     03 1E 06 F1 | 	add	local01, #3
271cc     0F 03 48 FC | 	wrbyte	#1, local01
271d0     04 4E 05 F1 | 	add	fp, #4
271d4     A7 1E 0A FB | 	rdlong	local01, fp wz
271d8     48 4E 85 F1 | 	sub	fp, #72
271dc     E8 00 90 AD |  if_e	jmp	#LR__4058
271e0     44 4E 05 F1 | 	add	fp, #68
271e4     A7 1E 02 FB | 	rdlong	local01, fp
271e8     30 1E 06 F1 | 	add	local01, #48
271ec     0F 1F 02 FB | 	rdlong	local01, local01
271f0     14 4E 05 F1 | 	add	fp, #20
271f4     A7 1E 62 FC | 	wrlong	local01, fp
271f8     44 4E 85 F1 | 	sub	fp, #68
271fc     A7 12 02 F6 | 	mov	arg01, fp
27200     34 4E 05 F1 | 	add	fp, #52
27204     A7 14 02 FB | 	rdlong	arg02, fp
27208     48 4E 85 F1 | 	sub	fp, #72
2720c     00 16 06 F6 | 	mov	arg03, #0
27210     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
27214     10 4E 05 F1 | 	add	fp, #16
27218     A7 FA 61 FC | 	wrlong	result1, fp
2721c     10 4E 85 F1 | 	sub	fp, #16
27220     00 FA 0D F2 | 	cmp	result1, #0 wz
27224     A0 00 90 5D |  if_ne	jmp	#LR__4058
27228     44 4E 05 F1 | 	add	fp, #68
2722c     A7 12 02 FB | 	rdlong	arg01, fp
27230     14 4E 05 F1 | 	add	fp, #20
27234     A7 14 02 FB | 	rdlong	arg02, fp
27238     58 4E 85 F1 | 	sub	fp, #88
2723c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
27240     10 4E 05 F1 | 	add	fp, #16
27244     A7 FA 61 FC | 	wrlong	result1, fp
27248     34 4E 05 F1 | 	add	fp, #52
2724c     A7 18 02 FB | 	rdlong	arg04, fp
27250     04 4E 05 F1 | 	add	fp, #4
27254     A7 1E 02 FB | 	rdlong	local01, fp
27258     48 4E 85 F1 | 	sub	fp, #72
2725c     01 1E 86 F1 | 	sub	local01, #1
27260     10 18 06 F1 | 	add	arg04, #16
27264     0C 1F 62 FC | 	wrlong	local01, arg04
27268     5C 00 90 FD | 	jmp	#LR__4058
2726c                 | LR__4055
2726c     10 4E 05 F1 | 	add	fp, #16
27270     A7 18 0A FB | 	rdlong	arg04, fp wz
27274     10 4E 85 F1 | 	sub	fp, #16
27278     4C 00 90 5D |  if_ne	jmp	#LR__4057
2727c     1A 4E 05 F1 | 	add	fp, #26
27280     A7 18 C2 FA | 	rdbyte	arg04, fp
27284     1A 4E 85 F1 | 	sub	fp, #26
27288     10 18 CE F7 | 	test	arg04, #16 wz
2728c     10 4E 05 51 |  if_ne	add	fp, #16
27290     A7 08 68 5C |  if_ne	wrlong	#4, fp
27294     10 4E 85 51 |  if_ne	sub	fp, #16
27298     2C 00 90 5D |  if_ne	jmp	#LR__4056
2729c     0C 4E 05 F1 | 	add	fp, #12
272a0     A7 18 C2 FA | 	rdbyte	arg04, fp
272a4     0C 4E 85 F1 | 	sub	fp, #12
272a8     02 18 CE F7 | 	test	arg04, #2 wz
272ac     1A 4E 05 51 |  if_ne	add	fp, #26
272b0     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
272b4     1A 4E 85 51 |  if_ne	sub	fp, #26
272b8     01 1E CE 57 |  if_ne	test	local01, #1 wz
272bc     10 4E 05 51 |  if_ne	add	fp, #16
272c0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
272c4     10 4E 85 51 |  if_ne	sub	fp, #16
272c8                 | LR__4056
272c8                 | LR__4057
272c8                 | LR__4058
272c8     10 4E 05 F1 | 	add	fp, #16
272cc     A7 1E 0A FB | 	rdlong	local01, fp wz
272d0     10 4E 85 F1 | 	sub	fp, #16
272d4     60 00 90 5D |  if_ne	jmp	#LR__4059
272d8     0C 4E 05 F1 | 	add	fp, #12
272dc     A7 20 C2 FA | 	rdbyte	local02, fp
272e0     0C 4E 85 F1 | 	sub	fp, #12
272e4     08 20 CE F7 | 	test	local02, #8 wz
272e8     0C 4E 05 51 |  if_ne	add	fp, #12
272ec     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
272f0     40 20 46 55 |  if_ne	or	local02, #64
272f4     A7 20 42 5C |  if_ne	wrbyte	local02, fp
272f8     0C 4E 85 51 |  if_ne	sub	fp, #12
272fc     04 4E 05 F1 | 	add	fp, #4
27300     A7 20 02 FB | 	rdlong	local02, fp
27304     40 4E 05 F1 | 	add	fp, #64
27308     A7 1E 02 FB | 	rdlong	local01, fp
2730c     30 1E 06 F1 | 	add	local01, #48
27310     0F 1F 02 FB | 	rdlong	local01, local01
27314     20 20 06 F1 | 	add	local02, #32
27318     10 1F 62 FC | 	wrlong	local01, local02
2731c     40 4E 85 F1 | 	sub	fp, #64
27320     A7 20 02 FB | 	rdlong	local02, fp
27324     2C 4E 05 F1 | 	add	fp, #44
27328     A7 1E 02 FB | 	rdlong	local01, fp
2732c     30 4E 85 F1 | 	sub	fp, #48
27330     24 20 06 F1 | 	add	local02, #36
27334     10 1F 62 FC | 	wrlong	local01, local02
27338                 | LR__4059
27338     10 4E 05 F1 | 	add	fp, #16
2733c     A7 20 0A FB | 	rdlong	local02, fp wz
27340     10 4E 85 F1 | 	sub	fp, #16
27344     F4 02 90 5D |  if_ne	jmp	#LR__4065
27348     04 4E 05 F1 | 	add	fp, #4
2734c     A7 20 02 FB | 	rdlong	local02, fp
27350     40 4E 05 F1 | 	add	fp, #64
27354     A7 12 02 FB | 	rdlong	arg01, fp
27358     14 4E 85 F1 | 	sub	fp, #20
2735c     A7 14 02 FB | 	rdlong	arg02, fp
27360     30 4E 85 F1 | 	sub	fp, #48
27364     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
27368     08 20 06 F1 | 	add	local02, #8
2736c     10 FB 61 FC | 	wrlong	result1, local02
27370     04 4E 05 F1 | 	add	fp, #4
27374     A7 20 02 FB | 	rdlong	local02, fp
27378     2C 4E 05 F1 | 	add	fp, #44
2737c     A7 12 02 FB | 	rdlong	arg01, fp
27380     1C 12 06 F1 | 	add	arg01, #28
27384                 | ' {
27384                 | ' 
27384                 | ' 	return *((DWORD*)ptr);
27384     09 FB 01 FB | 	rdlong	result1, arg01
27388     0C 20 06 F1 | 	add	local02, #12
2738c     10 FB 61 FC | 	wrlong	result1, local02
27390     2C 4E 85 F1 | 	sub	fp, #44
27394     A7 20 02 FB | 	rdlong	local02, fp
27398     40 4E 05 F1 | 	add	fp, #64
2739c     A7 1E 02 FB | 	rdlong	local01, fp
273a0     10 1F 62 FC | 	wrlong	local01, local02
273a4     40 4E 85 F1 | 	sub	fp, #64
273a8     A7 20 02 FB | 	rdlong	local02, fp
273ac     40 4E 05 F1 | 	add	fp, #64
273b0     A7 1E 02 FB | 	rdlong	local01, fp
273b4     06 1E 06 F1 | 	add	local01, #6
273b8     0F 1F E2 FA | 	rdword	local01, local01
273bc     04 20 06 F1 | 	add	local02, #4
273c0     10 1F 52 FC | 	wrword	local01, local02
273c4     40 4E 85 F1 | 	sub	fp, #64
273c8     A7 20 02 FB | 	rdlong	local02, fp
273cc     08 4E 05 F1 | 	add	fp, #8
273d0     A7 1E C2 FA | 	rdbyte	local01, fp
273d4     10 20 06 F1 | 	add	local02, #16
273d8     10 1F 42 FC | 	wrbyte	local01, local02
273dc     08 4E 85 F1 | 	sub	fp, #8
273e0     A7 20 02 FB | 	rdlong	local02, fp
273e4     11 20 06 F1 | 	add	local02, #17
273e8     10 01 48 FC | 	wrbyte	#0, local02
273ec     A7 20 02 FB | 	rdlong	local02, fp
273f0     1C 20 06 F1 | 	add	local02, #28
273f4     10 01 68 FC | 	wrlong	#0, local02
273f8     A7 20 02 FB | 	rdlong	local02, fp
273fc     14 20 06 F1 | 	add	local02, #20
27400     10 01 68 FC | 	wrlong	#0, local02
27404     A7 12 02 FB | 	rdlong	arg01, fp
27408     04 4E 85 F1 | 	sub	fp, #4
2740c     28 12 06 F1 | 	add	arg01, #40
27410     00 14 06 F6 | 	mov	arg02, #0
27414     09 16 C6 F9 | 	decod	arg03, #9
27418     98 00 A0 FD | 	call	#\builtin_bytefill_
2741c     0C 4E 05 F1 | 	add	fp, #12
27420     A7 20 C2 FA | 	rdbyte	local02, fp
27424     0C 4E 85 F1 | 	sub	fp, #12
27428     20 20 CE F7 | 	test	local02, #32 wz
2742c     0C 02 90 AD |  if_e	jmp	#LR__4064
27430     04 4E 05 F1 | 	add	fp, #4
27434     A7 1E 02 FB | 	rdlong	local01, fp
27438     04 4E 85 F1 | 	sub	fp, #4
2743c     0C 1E 06 F1 | 	add	local01, #12
27440     0F 21 02 FB | 	rdlong	local02, local01
27444     01 20 16 F2 | 	cmp	local02, #1 wc
27448     F0 01 90 CD |  if_b	jmp	#LR__4064
2744c     04 4E 05 F1 | 	add	fp, #4
27450     A7 1E 02 FB | 	rdlong	local01, fp
27454     0F 21 02 F6 | 	mov	local02, local01
27458     0C 1E 06 F1 | 	add	local01, #12
2745c     0F 1F 02 FB | 	rdlong	local01, local01
27460     14 20 06 F1 | 	add	local02, #20
27464     10 1F 62 FC | 	wrlong	local01, local02
27468     40 4E 05 F1 | 	add	fp, #64
2746c     A7 20 02 FB | 	rdlong	local02, fp
27470     0A 20 06 F1 | 	add	local02, #10
27474     10 21 E2 FA | 	rdword	local02, local02
27478     09 20 66 F0 | 	shl	local02, #9
2747c     08 4E 05 F1 | 	add	fp, #8
27480     A7 20 62 FC | 	wrlong	local02, fp
27484     48 4E 85 F1 | 	sub	fp, #72
27488     A7 20 02 FB | 	rdlong	local02, fp
2748c     08 20 06 F1 | 	add	local02, #8
27490     10 1F 02 FB | 	rdlong	local01, local02
27494     4C 4E 05 F1 | 	add	fp, #76
27498     A7 1E 62 FC | 	wrlong	local01, fp
2749c                 | ' 				fp->fptr = fp->obj.objsize;
2749c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2749c                 | ' 				clst = fp->obj.sclust;
2749c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2749c     4C 4E 85 F1 | 	sub	fp, #76
274a0     A7 20 02 FB | 	rdlong	local02, fp
274a4     0C 20 06 F1 | 	add	local02, #12
274a8     10 1F 02 FB | 	rdlong	local01, local02
274ac     58 4E 05 F1 | 	add	fp, #88
274b0     A7 1E 62 FC | 	wrlong	local01, fp
274b4     5C 4E 85 F1 | 	sub	fp, #92
274b8                 | LR__4060
274b8     10 4E 05 F1 | 	add	fp, #16
274bc     A7 20 0A FB | 	rdlong	local02, fp wz
274c0     10 4E 85 F1 | 	sub	fp, #16
274c4     94 00 90 5D |  if_ne	jmp	#LR__4061
274c8     5C 4E 05 F1 | 	add	fp, #92
274cc     A7 20 02 FB | 	rdlong	local02, fp
274d0     10 4E 85 F1 | 	sub	fp, #16
274d4     A7 1E 02 FB | 	rdlong	local01, fp
274d8     4C 4E 85 F1 | 	sub	fp, #76
274dc     0F 21 1A F2 | 	cmp	local02, local01 wcz
274e0     78 00 90 ED |  if_be	jmp	#LR__4061
274e4     04 4E 05 F1 | 	add	fp, #4
274e8     A7 12 02 FB | 	rdlong	arg01, fp
274ec     4C 4E 05 F1 | 	add	fp, #76
274f0     A7 14 02 FB | 	rdlong	arg02, fp
274f4     50 4E 85 F1 | 	sub	fp, #80
274f8     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
274fc     50 4E 05 F1 | 	add	fp, #80
27500     A7 FA 61 FC | 	wrlong	result1, fp
27504     50 4E 85 F1 | 	sub	fp, #80
27508     02 FA 15 F2 | 	cmp	result1, #2 wc
2750c     10 4E 05 C1 |  if_b	add	fp, #16
27510     A7 04 68 CC |  if_b	wrlong	#2, fp
27514     10 4E 85 C1 |  if_b	sub	fp, #16
27518     50 4E 05 F1 | 	add	fp, #80
2751c     A7 20 02 FB | 	rdlong	local02, fp
27520     50 4E 85 F1 | 	sub	fp, #80
27524     FF FF 7F FF 
27528     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2752c     10 4E 05 A1 |  if_e	add	fp, #16
27530     A7 02 68 AC |  if_e	wrlong	#1, fp
27534     10 4E 85 A1 |  if_e	sub	fp, #16
27538     5C 4E 05 F1 | 	add	fp, #92
2753c     A7 20 02 FB | 	rdlong	local02, fp
27540     10 4E 85 F1 | 	sub	fp, #16
27544     A7 1E 02 FB | 	rdlong	local01, fp
27548     0F 21 82 F1 | 	sub	local02, local01
2754c     10 4E 05 F1 | 	add	fp, #16
27550     A7 20 62 FC | 	wrlong	local02, fp
27554     5C 4E 85 F1 | 	sub	fp, #92
27558     5C FF 9F FD | 	jmp	#LR__4060
2755c                 | LR__4061
2755c     04 4E 05 F1 | 	add	fp, #4
27560     A7 20 02 FB | 	rdlong	local02, fp
27564     4C 4E 05 F1 | 	add	fp, #76
27568     A7 1E 02 FB | 	rdlong	local01, fp
2756c     18 20 06 F1 | 	add	local02, #24
27570     10 1F 62 FC | 	wrlong	local01, local02
27574     40 4E 85 F1 | 	sub	fp, #64
27578     A7 20 0A FB | 	rdlong	local02, fp wz
2757c     10 4E 85 F1 | 	sub	fp, #16
27580     B8 00 90 5D |  if_ne	jmp	#LR__4063
27584     5C 4E 05 F1 | 	add	fp, #92
27588     A7 1E 02 FB | 	rdlong	local01, fp
2758c     5C 4E 85 F1 | 	sub	fp, #92
27590     FF 1F CE F7 | 	test	local01, #511 wz
27594     A4 00 90 AD |  if_e	jmp	#LR__4063
27598     44 4E 05 F1 | 	add	fp, #68
2759c     A7 12 02 FB | 	rdlong	arg01, fp
275a0     0C 4E 05 F1 | 	add	fp, #12
275a4     A7 14 02 FB | 	rdlong	arg02, fp
275a8     50 4E 85 F1 | 	sub	fp, #80
275ac     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
275b0     58 4E 05 F1 | 	add	fp, #88
275b4     A7 FA 61 FC | 	wrlong	result1, fp
275b8     00 FA 4D F2 | 	cmps	result1, #0 wz
275bc     58 4E 85 F1 | 	sub	fp, #88
275c0     10 4E 05 A1 |  if_e	add	fp, #16
275c4     A7 04 68 AC |  if_e	wrlong	#2, fp
275c8     10 4E 85 A1 |  if_e	sub	fp, #16
275cc     6C 00 90 AD |  if_e	jmp	#LR__4062
275d0     04 4E 05 F1 | 	add	fp, #4
275d4     A7 20 02 FB | 	rdlong	local02, fp
275d8     54 4E 05 F1 | 	add	fp, #84
275dc     A7 1E 02 FB | 	rdlong	local01, fp
275e0     04 4E 05 F1 | 	add	fp, #4
275e4     A7 18 02 FB | 	rdlong	arg04, fp
275e8     09 18 46 F0 | 	shr	arg04, #9
275ec     0C 1F 02 F1 | 	add	local01, arg04
275f0     1C 20 06 F1 | 	add	local02, #28
275f4     10 1F 62 FC | 	wrlong	local01, local02
275f8     18 4E 85 F1 | 	sub	fp, #24
275fc     A7 20 02 FB | 	rdlong	local02, fp
27600     01 20 06 F1 | 	add	local02, #1
27604     10 13 C2 FA | 	rdbyte	arg01, local02
27608     40 4E 85 F1 | 	sub	fp, #64
2760c     A7 20 02 FB | 	rdlong	local02, fp
27610     10 15 02 F6 | 	mov	arg02, local02
27614     28 14 06 F1 | 	add	arg02, #40
27618     04 4E 85 F1 | 	sub	fp, #4
2761c     1C 20 06 F1 | 	add	local02, #28
27620     10 17 02 FB | 	rdlong	arg03, local02
27624     01 18 06 F6 | 	mov	arg04, #1
27628     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2762c     00 FA 0D F2 | 	cmp	result1, #0 wz
27630     10 4E 05 51 |  if_ne	add	fp, #16
27634     A7 02 68 5C |  if_ne	wrlong	#1, fp
27638     10 4E 85 51 |  if_ne	sub	fp, #16
2763c                 | LR__4062
2763c                 | LR__4063
2763c                 | LR__4064
2763c                 | LR__4065
2763c                 | LR__4066
2763c     10 4E 05 F1 | 	add	fp, #16
27640     A7 20 0A FB | 	rdlong	local02, fp wz
27644     10 4E 85 F1 | 	sub	fp, #16
27648     04 4E 05 51 |  if_ne	add	fp, #4
2764c     A7 20 02 5B |  if_ne	rdlong	local02, fp
27650     04 4E 85 51 |  if_ne	sub	fp, #4
27654     10 01 68 5C |  if_ne	wrlong	#0, local02
27658                 | ' 
27658                 | ' 	return res ;
27658     10 4E 05 F1 | 	add	fp, #16
2765c     A7 FA 01 FB | 	rdlong	result1, fp
27660     10 4E 85 F1 | 	sub	fp, #16
27664                 | LR__4067
27664     A7 F0 03 F6 | 	mov	ptra, fp
27668     B2 00 A0 FD | 	call	#popregs_
2766c                 | _fatfs_cc_f_open_ret
2766c     2D 00 64 FD | 	ret
27670                 | 
27670                 | _fatfs_cc_f_read
27670     0E 4A 05 F6 | 	mov	COUNT_, #14
27674     A8 00 A0 FD | 	call	#pushregs_
27678     38 F0 07 F1 | 	add	ptra, #56
2767c     04 4E 05 F1 | 	add	fp, #4
27680     A7 12 62 FC | 	wrlong	arg01, fp
27684     04 4E 05 F1 | 	add	fp, #4
27688     A7 14 62 FC | 	wrlong	arg02, fp
2768c     04 4E 05 F1 | 	add	fp, #4
27690     A7 16 62 FC | 	wrlong	arg03, fp
27694     04 4E 05 F1 | 	add	fp, #4
27698     A7 18 62 FC | 	wrlong	arg04, fp
2769c     08 4E 85 F1 | 	sub	fp, #8
276a0     A7 FA 01 FB | 	rdlong	result1, fp
276a4     2C 4E 05 F1 | 	add	fp, #44
276a8     A7 FA 61 FC | 	wrlong	result1, fp
276ac     24 4E 85 F1 | 	sub	fp, #36
276b0     A7 FA 01 FB | 	rdlong	result1, fp
276b4     FD 00 68 FC | 	wrlong	#0, result1
276b8     0C 4E 85 F1 | 	sub	fp, #12
276bc     A7 12 02 FB | 	rdlong	arg01, fp
276c0     14 4E 05 F1 | 	add	fp, #20
276c4     A7 14 02 F6 | 	mov	arg02, fp
276c8     18 4E 85 F1 | 	sub	fp, #24
276cc     24 F7 BF FD | 	call	#_fatfs_cc_validate
276d0     14 4E 05 F1 | 	add	fp, #20
276d4     A7 FA 61 FC | 	wrlong	result1, fp
276d8     00 FA 4D F2 | 	cmps	result1, #0 wz
276dc     14 4E 85 F1 | 	sub	fp, #20
276e0     20 00 90 5D |  if_ne	jmp	#LR__4070
276e4     04 4E 05 F1 | 	add	fp, #4
276e8     A7 14 02 FB | 	rdlong	arg02, fp
276ec     11 14 06 F1 | 	add	arg02, #17
276f0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
276f4     10 4E 05 F1 | 	add	fp, #16
276f8     A7 14 62 FC | 	wrlong	arg02, fp
276fc     14 4E 85 F1 | 	sub	fp, #20
27700     10 00 90 AD |  if_e	jmp	#LR__4071
27704                 | LR__4070
27704     14 4E 05 F1 | 	add	fp, #20
27708     A7 FA 01 FB | 	rdlong	result1, fp
2770c     14 4E 85 F1 | 	sub	fp, #20
27710     EC 05 90 FD | 	jmp	#LR__4090
27714                 | LR__4071
27714     04 4E 05 F1 | 	add	fp, #4
27718     A7 18 02 FB | 	rdlong	arg04, fp
2771c     04 4E 85 F1 | 	sub	fp, #4
27720     10 18 06 F1 | 	add	arg04, #16
27724     0C 19 C2 FA | 	rdbyte	arg04, arg04
27728     01 18 CE F7 | 	test	arg04, #1 wz
2772c     07 FA 05 A6 |  if_e	mov	result1, #7
27730     CC 05 90 AD |  if_e	jmp	#LR__4090
27734     04 4E 05 F1 | 	add	fp, #4
27738     A7 1E 02 FB | 	rdlong	local01, fp
2773c     0F 21 02 F6 | 	mov	local02, local01
27740     0C 20 06 F1 | 	add	local02, #12
27744     10 23 02 FB | 	rdlong	local03, local02
27748     14 1E 06 F1 | 	add	local01, #20
2774c     0F 1F 02 FB | 	rdlong	local01, local01
27750     0F 23 82 F1 | 	sub	local03, local01
27754     20 4E 05 F1 | 	add	fp, #32
27758     A7 22 62 FC | 	wrlong	local03, fp
2775c     18 4E 85 F1 | 	sub	fp, #24
27760     A7 24 02 FB | 	rdlong	local04, fp
27764     0C 4E 85 F1 | 	sub	fp, #12
27768     11 25 1A F2 | 	cmp	local04, local03 wcz
2776c     24 4E 05 11 |  if_a	add	fp, #36
27770     A7 24 02 1B |  if_a	rdlong	local04, fp
27774     18 4E 85 11 |  if_a	sub	fp, #24
27778     A7 24 62 1C |  if_a	wrlong	local04, fp
2777c     0C 4E 85 11 |  if_a	sub	fp, #12
27780                 | ' 
27780                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
27780                 | LR__4072
27780     0C 4E 05 F1 | 	add	fp, #12
27784     A7 20 02 FB | 	rdlong	local02, fp
27788     0C 4E 85 F1 | 	sub	fp, #12
2778c     10 25 02 F6 | 	mov	local04, local02
27790     01 24 16 F2 | 	cmp	local04, #1 wc
27794     64 05 90 CD |  if_b	jmp	#LR__4089
27798     04 4E 05 F1 | 	add	fp, #4
2779c     A7 22 02 FB | 	rdlong	local03, fp
277a0     04 4E 85 F1 | 	sub	fp, #4
277a4     14 22 06 F1 | 	add	local03, #20
277a8     11 23 02 FB | 	rdlong	local03, local03
277ac     FF 23 CE F7 | 	test	local03, #511 wz
277b0     3C 04 90 5D |  if_ne	jmp	#LR__4087
277b4     04 4E 05 F1 | 	add	fp, #4
277b8     A7 1E 02 FB | 	rdlong	local01, fp
277bc     14 1E 06 F1 | 	add	local01, #20
277c0     0F 23 02 FB | 	rdlong	local03, local01
277c4     09 22 46 F0 | 	shr	local03, #9
277c8     14 4E 05 F1 | 	add	fp, #20
277cc     A7 26 02 FB | 	rdlong	local05, fp
277d0     13 29 02 F6 | 	mov	local06, local05
277d4     0A 28 06 F1 | 	add	local06, #10
277d8     14 2B E2 FA | 	rdword	local07, local06
277dc     0A 28 86 F1 | 	sub	local06, #10
277e0     15 2D 32 F9 | 	getword	local08, local07, #0
277e4     01 2C 86 F1 | 	sub	local08, #1
277e8     16 23 0A F5 | 	and	local03, local08 wz
277ec     18 4E 05 F1 | 	add	fp, #24
277f0     A7 22 62 FC | 	wrlong	local03, fp
277f4     30 4E 85 F1 | 	sub	fp, #48
277f8     E0 00 90 5D |  if_ne	jmp	#LR__4077
277fc     04 4E 05 F1 | 	add	fp, #4
27800     A7 22 02 FB | 	rdlong	local03, fp
27804     04 4E 85 F1 | 	sub	fp, #4
27808     14 22 06 F1 | 	add	local03, #20
2780c     11 23 0A FB | 	rdlong	local03, local03 wz
27810     20 00 90 5D |  if_ne	jmp	#LR__4073
27814     04 4E 05 F1 | 	add	fp, #4
27818     A7 22 02 FB | 	rdlong	local03, fp
2781c     08 22 06 F1 | 	add	local03, #8
27820     11 23 02 FB | 	rdlong	local03, local03
27824     18 4E 05 F1 | 	add	fp, #24
27828     A7 22 62 FC | 	wrlong	local03, fp
2782c     1C 4E 85 F1 | 	sub	fp, #28
27830     28 00 90 FD | 	jmp	#LR__4074
27834                 | LR__4073
27834     04 4E 05 F1 | 	add	fp, #4
27838     A7 2C 02 FB | 	rdlong	local08, fp
2783c     16 13 02 F6 | 	mov	arg01, local08
27840     04 4E 85 F1 | 	sub	fp, #4
27844     18 2C 06 F1 | 	add	local08, #24
27848     16 15 02 FB | 	rdlong	arg02, local08
2784c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
27850     1C 4E 05 F1 | 	add	fp, #28
27854     A7 FA 61 FC | 	wrlong	result1, fp
27858     1C 4E 85 F1 | 	sub	fp, #28
2785c                 | LR__4074
2785c     1C 4E 05 F1 | 	add	fp, #28
27860     A7 22 02 FB | 	rdlong	local03, fp
27864     1C 4E 85 F1 | 	sub	fp, #28
27868     02 22 16 F2 | 	cmp	local03, #2 wc
2786c     1C 00 90 3D |  if_ae	jmp	#LR__4075
27870     04 4E 05 F1 | 	add	fp, #4
27874     A7 22 02 FB | 	rdlong	local03, fp
27878     04 4E 85 F1 | 	sub	fp, #4
2787c     11 22 06 F1 | 	add	local03, #17
27880     11 05 48 FC | 	wrbyte	#2, local03
27884     02 FA 05 F6 | 	mov	result1, #2
27888     74 04 90 FD | 	jmp	#LR__4090
2788c                 | LR__4075
2788c     1C 4E 05 F1 | 	add	fp, #28
27890     A7 22 02 FB | 	rdlong	local03, fp
27894     1C 4E 85 F1 | 	sub	fp, #28
27898     FF FF 7F FF 
2789c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
278a0     1C 00 90 5D |  if_ne	jmp	#LR__4076
278a4     04 4E 05 F1 | 	add	fp, #4
278a8     A7 22 02 FB | 	rdlong	local03, fp
278ac     04 4E 85 F1 | 	sub	fp, #4
278b0     11 22 06 F1 | 	add	local03, #17
278b4     11 03 48 FC | 	wrbyte	#1, local03
278b8     01 FA 05 F6 | 	mov	result1, #1
278bc     40 04 90 FD | 	jmp	#LR__4090
278c0                 | LR__4076
278c0     04 4E 05 F1 | 	add	fp, #4
278c4     A7 22 02 FB | 	rdlong	local03, fp
278c8     18 4E 05 F1 | 	add	fp, #24
278cc     A7 2C 02 FB | 	rdlong	local08, fp
278d0     1C 4E 85 F1 | 	sub	fp, #28
278d4     18 22 06 F1 | 	add	local03, #24
278d8     11 2D 62 FC | 	wrlong	local08, local03
278dc                 | LR__4077
278dc     18 4E 05 F1 | 	add	fp, #24
278e0     A7 12 02 FB | 	rdlong	arg01, fp
278e4     14 4E 85 F1 | 	sub	fp, #20
278e8     A7 22 02 FB | 	rdlong	local03, fp
278ec     04 4E 85 F1 | 	sub	fp, #4
278f0     18 22 06 F1 | 	add	local03, #24
278f4     11 15 02 FB | 	rdlong	arg02, local03
278f8     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
278fc     20 4E 05 F1 | 	add	fp, #32
27900     A7 FA 61 FC | 	wrlong	result1, fp
27904     20 4E 85 F1 | 	sub	fp, #32
27908     00 FA 0D F2 | 	cmp	result1, #0 wz
2790c     1C 00 90 5D |  if_ne	jmp	#LR__4078
27910     04 4E 05 F1 | 	add	fp, #4
27914     A7 22 02 FB | 	rdlong	local03, fp
27918     04 4E 85 F1 | 	sub	fp, #4
2791c     11 22 06 F1 | 	add	local03, #17
27920     11 05 48 FC | 	wrbyte	#2, local03
27924     02 FA 05 F6 | 	mov	result1, #2
27928     D4 03 90 FD | 	jmp	#LR__4090
2792c                 | LR__4078
2792c     20 4E 05 F1 | 	add	fp, #32
27930     A7 22 02 FB | 	rdlong	local03, fp
27934     10 4E 05 F1 | 	add	fp, #16
27938     A7 2C 02 FB | 	rdlong	local08, fp
2793c     16 23 02 F1 | 	add	local03, local08
27940     10 4E 85 F1 | 	sub	fp, #16
27944     A7 22 62 FC | 	wrlong	local03, fp
27948     14 4E 85 F1 | 	sub	fp, #20
2794c     A7 22 02 FB | 	rdlong	local03, fp
27950     09 22 46 F0 | 	shr	local03, #9
27954     20 4E 05 F1 | 	add	fp, #32
27958     A7 22 62 FC | 	wrlong	local03, fp
2795c     2C 4E 85 F1 | 	sub	fp, #44
27960     01 22 16 F2 | 	cmp	local03, #1 wc
27964     5C 01 90 CD |  if_b	jmp	#LR__4082
27968     30 4E 05 F1 | 	add	fp, #48
2796c     A7 22 02 FB | 	rdlong	local03, fp
27970     04 4E 85 F1 | 	sub	fp, #4
27974     A7 2C 02 FB | 	rdlong	local08, fp
27978     16 23 02 F1 | 	add	local03, local08
2797c     14 4E 85 F1 | 	sub	fp, #20
27980     A7 2C 02 FB | 	rdlong	local08, fp
27984     18 4E 85 F1 | 	sub	fp, #24
27988     0A 2C 06 F1 | 	add	local08, #10
2798c     16 2D E2 FA | 	rdword	local08, local08
27990     16 23 1A F2 | 	cmp	local03, local08 wcz
27994     28 00 90 ED |  if_be	jmp	#LR__4079
27998     18 4E 05 F1 | 	add	fp, #24
2799c     A7 1E 02 FB | 	rdlong	local01, fp
279a0     0A 1E 06 F1 | 	add	local01, #10
279a4     0F 23 E2 FA | 	rdword	local03, local01
279a8     18 4E 05 F1 | 	add	fp, #24
279ac     A7 2C 02 FB | 	rdlong	local08, fp
279b0     16 23 82 F1 | 	sub	local03, local08
279b4     04 4E 85 F1 | 	sub	fp, #4
279b8     A7 22 62 FC | 	wrlong	local03, fp
279bc     2C 4E 85 F1 | 	sub	fp, #44
279c0                 | LR__4079
279c0     18 4E 05 F1 | 	add	fp, #24
279c4     A7 1E 02 FB | 	rdlong	local01, fp
279c8     01 1E 06 F1 | 	add	local01, #1
279cc     0F 13 C2 FA | 	rdbyte	arg01, local01
279d0     1C 4E 05 F1 | 	add	fp, #28
279d4     A7 14 02 FB | 	rdlong	arg02, fp
279d8     14 4E 85 F1 | 	sub	fp, #20
279dc     A7 16 02 FB | 	rdlong	arg03, fp
279e0     0C 4E 05 F1 | 	add	fp, #12
279e4     A7 18 02 FB | 	rdlong	arg04, fp
279e8     2C 4E 85 F1 | 	sub	fp, #44
279ec     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
279f0     00 FA 0D F2 | 	cmp	result1, #0 wz
279f4     1C 00 90 AD |  if_e	jmp	#LR__4080
279f8     04 4E 05 F1 | 	add	fp, #4
279fc     A7 22 02 FB | 	rdlong	local03, fp
27a00     04 4E 85 F1 | 	sub	fp, #4
27a04     11 22 06 F1 | 	add	local03, #17
27a08     11 03 48 FC | 	wrbyte	#1, local03
27a0c     01 FA 05 F6 | 	mov	result1, #1
27a10     EC 02 90 FD | 	jmp	#LR__4090
27a14                 | LR__4080
27a14     04 4E 05 F1 | 	add	fp, #4
27a18     A7 1E 02 FB | 	rdlong	local01, fp
27a1c     04 4E 85 F1 | 	sub	fp, #4
27a20     10 1E 06 F1 | 	add	local01, #16
27a24     0F 23 C2 FA | 	rdbyte	local03, local01
27a28     80 22 CE F7 | 	test	local03, #128 wz
27a2c     78 00 90 AD |  if_e	jmp	#LR__4081
27a30     04 4E 05 F1 | 	add	fp, #4
27a34     A7 2C 02 FB | 	rdlong	local08, fp
27a38     1C 2C 06 F1 | 	add	local08, #28
27a3c     16 2D 02 FB | 	rdlong	local08, local08
27a40     1C 4E 05 F1 | 	add	fp, #28
27a44     A7 2E 02 FB | 	rdlong	local09, fp
27a48     17 2D 82 F1 | 	sub	local08, local09
27a4c     0C 4E 05 F1 | 	add	fp, #12
27a50     A7 30 02 FB | 	rdlong	local10, fp
27a54     2C 4E 85 F1 | 	sub	fp, #44
27a58     18 33 02 F6 | 	mov	local11, local10
27a5c     19 2D 12 F2 | 	cmp	local08, local11 wc
27a60     44 00 90 3D |  if_ae	jmp	#LR__4081
27a64     34 4E 05 F1 | 	add	fp, #52
27a68     A7 12 02 FB | 	rdlong	arg01, fp
27a6c     30 4E 85 F1 | 	sub	fp, #48
27a70     A7 14 02 FB | 	rdlong	arg02, fp
27a74     0A 33 02 F6 | 	mov	local11, arg02
27a78     1C 32 06 F1 | 	add	local11, #28
27a7c     19 2F 02 FB | 	rdlong	local09, local11
27a80     1C 4E 05 F1 | 	add	fp, #28
27a84     A7 26 02 FB | 	rdlong	local05, fp
27a88     13 2F 82 F1 | 	sub	local09, local05
27a8c     09 2E 66 F0 | 	shl	local09, #9
27a90     17 33 02 F6 | 	mov	local11, local09
27a94     17 13 02 F1 | 	add	arg01, local09
27a98     20 4E 85 F1 | 	sub	fp, #32
27a9c     28 14 06 F1 | 	add	arg02, #40
27aa0     09 16 C6 F9 | 	decod	arg03, #9
27aa4     C4 48 BF FD | 	call	#__system____builtin_memmove
27aa8                 | LR__4081
27aa8     2C 4E 05 F1 | 	add	fp, #44
27aac     A7 22 02 FB | 	rdlong	local03, fp
27ab0     09 22 66 F0 | 	shl	local03, #9
27ab4     04 4E 85 F1 | 	sub	fp, #4
27ab8     A7 22 62 FC | 	wrlong	local03, fp
27abc     28 4E 85 F1 | 	sub	fp, #40
27ac0                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
27ac0                 | ' 				}
27ac0                 | ' 
27ac0                 | ' 
27ac0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
27ac0                 | ' 				continue;
27ac0     B4 01 90 FD | 	jmp	#LR__4088
27ac4                 | LR__4082
27ac4     04 4E 05 F1 | 	add	fp, #4
27ac8     A7 22 02 FB | 	rdlong	local03, fp
27acc     1C 22 06 F1 | 	add	local03, #28
27ad0     11 23 02 FB | 	rdlong	local03, local03
27ad4     1C 4E 05 F1 | 	add	fp, #28
27ad8     A7 1E 02 FB | 	rdlong	local01, fp
27adc     20 4E 85 F1 | 	sub	fp, #32
27ae0     0F 23 0A F2 | 	cmp	local03, local01 wz
27ae4     EC 00 90 AD |  if_e	jmp	#LR__4086
27ae8     04 4E 05 F1 | 	add	fp, #4
27aec     A7 1E 02 FB | 	rdlong	local01, fp
27af0     04 4E 85 F1 | 	sub	fp, #4
27af4     10 1E 06 F1 | 	add	local01, #16
27af8     0F 23 C2 FA | 	rdbyte	local03, local01
27afc     80 22 CE F7 | 	test	local03, #128 wz
27b00     7C 00 90 AD |  if_e	jmp	#LR__4084
27b04     18 4E 05 F1 | 	add	fp, #24
27b08     A7 1E 02 FB | 	rdlong	local01, fp
27b0c     01 1E 06 F1 | 	add	local01, #1
27b10     0F 13 C2 FA | 	rdbyte	arg01, local01
27b14     14 4E 85 F1 | 	sub	fp, #20
27b18     A7 22 02 FB | 	rdlong	local03, fp
27b1c     11 15 02 F6 | 	mov	arg02, local03
27b20     28 14 06 F1 | 	add	arg02, #40
27b24     04 4E 85 F1 | 	sub	fp, #4
27b28     1C 22 06 F1 | 	add	local03, #28
27b2c     11 17 02 FB | 	rdlong	arg03, local03
27b30     01 18 06 F6 | 	mov	arg04, #1
27b34     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
27b38     00 FA 0D F2 | 	cmp	result1, #0 wz
27b3c     1C 00 90 AD |  if_e	jmp	#LR__4083
27b40     04 4E 05 F1 | 	add	fp, #4
27b44     A7 22 02 FB | 	rdlong	local03, fp
27b48     04 4E 85 F1 | 	sub	fp, #4
27b4c     11 22 06 F1 | 	add	local03, #17
27b50     11 03 48 FC | 	wrbyte	#1, local03
27b54     01 FA 05 F6 | 	mov	result1, #1
27b58     A4 01 90 FD | 	jmp	#LR__4090
27b5c                 | LR__4083
27b5c     04 4E 05 F1 | 	add	fp, #4
27b60     A7 32 02 FB | 	rdlong	local11, fp
27b64     19 23 02 F6 | 	mov	local03, local11
27b68     04 4E 85 F1 | 	sub	fp, #4
27b6c     10 32 06 F1 | 	add	local11, #16
27b70     19 33 C2 FA | 	rdbyte	local11, local11
27b74     7F 32 06 F5 | 	and	local11, #127
27b78     10 22 06 F1 | 	add	local03, #16
27b7c     11 33 42 FC | 	wrbyte	local11, local03
27b80                 | LR__4084
27b80     18 4E 05 F1 | 	add	fp, #24
27b84     A7 1E 02 FB | 	rdlong	local01, fp
27b88     01 1E 06 F1 | 	add	local01, #1
27b8c     0F 13 C2 FA | 	rdbyte	arg01, local01
27b90     14 4E 85 F1 | 	sub	fp, #20
27b94     A7 14 02 FB | 	rdlong	arg02, fp
27b98     28 14 06 F1 | 	add	arg02, #40
27b9c     1C 4E 05 F1 | 	add	fp, #28
27ba0     A7 16 02 FB | 	rdlong	arg03, fp
27ba4     20 4E 85 F1 | 	sub	fp, #32
27ba8     01 18 06 F6 | 	mov	arg04, #1
27bac     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
27bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
27bb4     1C 00 90 AD |  if_e	jmp	#LR__4085
27bb8     04 4E 05 F1 | 	add	fp, #4
27bbc     A7 22 02 FB | 	rdlong	local03, fp
27bc0     04 4E 85 F1 | 	sub	fp, #4
27bc4     11 22 06 F1 | 	add	local03, #17
27bc8     11 03 48 FC | 	wrbyte	#1, local03
27bcc     01 FA 05 F6 | 	mov	result1, #1
27bd0     2C 01 90 FD | 	jmp	#LR__4090
27bd4                 | LR__4085
27bd4                 | LR__4086
27bd4     04 4E 05 F1 | 	add	fp, #4
27bd8     A7 22 02 FB | 	rdlong	local03, fp
27bdc     1C 4E 05 F1 | 	add	fp, #28
27be0     A7 32 02 FB | 	rdlong	local11, fp
27be4     20 4E 85 F1 | 	sub	fp, #32
27be8     1C 22 06 F1 | 	add	local03, #28
27bec     11 33 62 FC | 	wrlong	local11, local03
27bf0                 | LR__4087
27bf0     04 4E 05 F1 | 	add	fp, #4
27bf4     A7 1E 02 FB | 	rdlong	local01, fp
27bf8     14 1E 06 F1 | 	add	local01, #20
27bfc     0F 33 02 FB | 	rdlong	local11, local01
27c00     FF 33 06 F5 | 	and	local11, #511
27c04     09 22 C6 F9 | 	decod	local03, #9
27c08     19 23 82 F1 | 	sub	local03, local11
27c0c     24 4E 05 F1 | 	add	fp, #36
27c10     A7 22 62 FC | 	wrlong	local03, fp
27c14     1C 4E 85 F1 | 	sub	fp, #28
27c18     A7 32 02 FB | 	rdlong	local11, fp
27c1c     0C 4E 85 F1 | 	sub	fp, #12
27c20     19 23 1A F2 | 	cmp	local03, local11 wcz
27c24     0C 4E 05 11 |  if_a	add	fp, #12
27c28     A7 22 02 1B |  if_a	rdlong	local03, fp
27c2c     1C 4E 05 11 |  if_a	add	fp, #28
27c30     A7 22 62 1C |  if_a	wrlong	local03, fp
27c34     28 4E 85 11 |  if_a	sub	fp, #40
27c38     34 4E 05 F1 | 	add	fp, #52
27c3c     A7 12 02 FB | 	rdlong	arg01, fp
27c40     30 4E 85 F1 | 	sub	fp, #48
27c44     A7 28 02 FB | 	rdlong	local06, fp
27c48     14 15 02 F6 | 	mov	arg02, local06
27c4c     28 14 06 F1 | 	add	arg02, #40
27c50     14 28 06 F1 | 	add	local06, #20
27c54     14 33 02 FB | 	rdlong	local11, local06
27c58     19 2F 02 F6 | 	mov	local09, local11
27c5c     17 31 02 F6 | 	mov	local10, local09
27c60     FF 31 06 F5 | 	and	local10, #511
27c64     18 15 02 F1 | 	add	arg02, local10
27c68     24 4E 05 F1 | 	add	fp, #36
27c6c     A7 16 02 FB | 	rdlong	arg03, fp
27c70     28 4E 85 F1 | 	sub	fp, #40
27c74     F4 46 BF FD | 	call	#__system____builtin_memmove
27c78                 | LR__4088
27c78     0C 4E 05 F1 | 	add	fp, #12
27c7c     A7 22 02 FB | 	rdlong	local03, fp
27c80     1C 4E 05 F1 | 	add	fp, #28
27c84     A7 2C 02 FB | 	rdlong	local08, fp
27c88     16 23 82 F1 | 	sub	local03, local08
27c8c     1C 4E 85 F1 | 	sub	fp, #28
27c90     A7 22 62 FC | 	wrlong	local03, fp
27c94     04 4E 05 F1 | 	add	fp, #4
27c98     A7 1E 02 FB | 	rdlong	local01, fp
27c9c     0F 2B 02 FB | 	rdlong	local07, local01
27ca0     18 4E 05 F1 | 	add	fp, #24
27ca4     A7 2C 02 FB | 	rdlong	local08, fp
27ca8     16 2B 02 F1 | 	add	local07, local08
27cac     0F 2B 62 FC | 	wrlong	local07, local01
27cb0     0C 4E 05 F1 | 	add	fp, #12
27cb4     A7 22 02 FB | 	rdlong	local03, fp
27cb8     0C 4E 85 F1 | 	sub	fp, #12
27cbc     A7 34 02 FB | 	rdlong	local12, fp
27cc0     1A 23 02 F1 | 	add	local03, local12
27cc4     0C 4E 05 F1 | 	add	fp, #12
27cc8     A7 22 62 FC | 	wrlong	local03, fp
27ccc     30 4E 85 F1 | 	sub	fp, #48
27cd0     A7 36 02 FB | 	rdlong	local13, fp
27cd4     1B 23 02 F6 | 	mov	local03, local13
27cd8     14 36 06 F1 | 	add	local13, #20
27cdc     1B 39 02 FB | 	rdlong	local14, local13
27ce0     24 4E 05 F1 | 	add	fp, #36
27ce4     A7 28 02 FB | 	rdlong	local06, fp
27ce8     28 4E 85 F1 | 	sub	fp, #40
27cec     14 39 02 F1 | 	add	local14, local06
27cf0     14 22 06 F1 | 	add	local03, #20
27cf4     11 39 62 FC | 	wrlong	local14, local03
27cf8     84 FA 9F FD | 	jmp	#LR__4072
27cfc                 | LR__4089
27cfc                 | ' 
27cfc                 | ' 
27cfc                 | ' 
27cfc                 | ' 
27cfc                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
27cfc                 | ' 
27cfc                 | ' 	}
27cfc                 | ' 
27cfc                 | ' 	return FR_OK ;
27cfc     00 FA 05 F6 | 	mov	result1, #0
27d00                 | LR__4090
27d00     A7 F0 03 F6 | 	mov	ptra, fp
27d04     B2 00 A0 FD | 	call	#popregs_
27d08                 | _fatfs_cc_f_read_ret
27d08     2D 00 64 FD | 	ret
27d0c                 | 
27d0c                 | _fatfs_cc_f_write
27d0c     15 4A 05 F6 | 	mov	COUNT_, #21
27d10     A8 00 A0 FD | 	call	#pushregs_
27d14     34 F0 07 F1 | 	add	ptra, #52
27d18     04 4E 05 F1 | 	add	fp, #4
27d1c     A7 12 62 FC | 	wrlong	arg01, fp
27d20     04 4E 05 F1 | 	add	fp, #4
27d24     A7 14 62 FC | 	wrlong	arg02, fp
27d28     04 4E 05 F1 | 	add	fp, #4
27d2c     A7 16 62 FC | 	wrlong	arg03, fp
27d30     04 4E 05 F1 | 	add	fp, #4
27d34     A7 18 62 FC | 	wrlong	arg04, fp
27d38     08 4E 85 F1 | 	sub	fp, #8
27d3c     A7 FA 01 FB | 	rdlong	result1, fp
27d40     28 4E 05 F1 | 	add	fp, #40
27d44     A7 FA 61 FC | 	wrlong	result1, fp
27d48     20 4E 85 F1 | 	sub	fp, #32
27d4c     A7 FA 01 FB | 	rdlong	result1, fp
27d50     FD 00 68 FC | 	wrlong	#0, result1
27d54     0C 4E 85 F1 | 	sub	fp, #12
27d58     A7 12 02 FB | 	rdlong	arg01, fp
27d5c     14 4E 05 F1 | 	add	fp, #20
27d60     A7 14 02 F6 | 	mov	arg02, fp
27d64     18 4E 85 F1 | 	sub	fp, #24
27d68     88 F0 BF FD | 	call	#_fatfs_cc_validate
27d6c     14 4E 05 F1 | 	add	fp, #20
27d70     A7 FA 61 FC | 	wrlong	result1, fp
27d74     00 FA 4D F2 | 	cmps	result1, #0 wz
27d78     14 4E 85 F1 | 	sub	fp, #20
27d7c     20 00 90 5D |  if_ne	jmp	#LR__4100
27d80     04 4E 05 F1 | 	add	fp, #4
27d84     A7 14 02 FB | 	rdlong	arg02, fp
27d88     11 14 06 F1 | 	add	arg02, #17
27d8c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
27d90     10 4E 05 F1 | 	add	fp, #16
27d94     A7 14 62 FC | 	wrlong	arg02, fp
27d98     14 4E 85 F1 | 	sub	fp, #20
27d9c     10 00 90 AD |  if_e	jmp	#LR__4101
27da0                 | LR__4100
27da0     14 4E 05 F1 | 	add	fp, #20
27da4     A7 FA 01 FB | 	rdlong	result1, fp
27da8     14 4E 85 F1 | 	sub	fp, #20
27dac     44 07 90 FD | 	jmp	#LR__4123
27db0                 | LR__4101
27db0     04 4E 05 F1 | 	add	fp, #4
27db4     A7 14 02 FB | 	rdlong	arg02, fp
27db8     04 4E 85 F1 | 	sub	fp, #4
27dbc     10 14 06 F1 | 	add	arg02, #16
27dc0     0A 15 C2 FA | 	rdbyte	arg02, arg02
27dc4     02 14 CE F7 | 	test	arg02, #2 wz
27dc8     07 FA 05 A6 |  if_e	mov	result1, #7
27dcc     24 07 90 AD |  if_e	jmp	#LR__4123
27dd0     04 4E 05 F1 | 	add	fp, #4
27dd4     A7 14 02 FB | 	rdlong	arg02, fp
27dd8     0A 13 02 F6 | 	mov	arg01, arg02
27ddc     14 12 06 F1 | 	add	arg01, #20
27de0     09 13 02 FB | 	rdlong	arg01, arg01
27de4     08 4E 05 F1 | 	add	fp, #8
27de8     A7 FA 01 FB | 	rdlong	result1, fp
27dec     FD 12 02 F1 | 	add	arg01, result1
27df0     0C 4E 85 F1 | 	sub	fp, #12
27df4     14 14 06 F1 | 	add	arg02, #20
27df8     0A FB 01 FB | 	rdlong	result1, arg02
27dfc     FD 12 12 F2 | 	cmp	arg01, result1 wc
27e00     24 00 90 3D |  if_ae	jmp	#LR__4102
27e04     04 4E 05 F1 | 	add	fp, #4
27e08     A7 14 02 FB | 	rdlong	arg02, fp
27e0c     01 FA 65 F6 | 	neg	result1, #1
27e10     14 14 06 F1 | 	add	arg02, #20
27e14     0A 15 02 FB | 	rdlong	arg02, arg02
27e18     0A FB 81 F1 | 	sub	result1, arg02
27e1c     08 4E 05 F1 | 	add	fp, #8
27e20     A7 FA 61 FC | 	wrlong	result1, fp
27e24     0C 4E 85 F1 | 	sub	fp, #12
27e28                 | LR__4102
27e28                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
27e28                 | ' 	}
27e28                 | ' 
27e28                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
27e28                 | LR__4103
27e28     0C 4E 05 F1 | 	add	fp, #12
27e2c     A7 FA 01 FB | 	rdlong	result1, fp
27e30     0C 4E 85 F1 | 	sub	fp, #12
27e34     01 FA 15 F2 | 	cmp	result1, #1 wc
27e38     90 06 90 CD |  if_b	jmp	#LR__4122
27e3c     04 4E 05 F1 | 	add	fp, #4
27e40     A7 FA 01 FB | 	rdlong	result1, fp
27e44     04 4E 85 F1 | 	sub	fp, #4
27e48     14 FA 05 F1 | 	add	result1, #20
27e4c     FD FA 01 FB | 	rdlong	result1, result1
27e50     FF FB CD F7 | 	test	result1, #511 wz
27e54     D8 04 90 5D |  if_ne	jmp	#LR__4118
27e58     04 4E 05 F1 | 	add	fp, #4
27e5c     A7 FA 01 FB | 	rdlong	result1, fp
27e60     14 FA 05 F1 | 	add	result1, #20
27e64     FD FA 01 FB | 	rdlong	result1, result1
27e68     09 FA 45 F0 | 	shr	result1, #9
27e6c     14 4E 05 F1 | 	add	fp, #20
27e70     A7 14 02 FB | 	rdlong	arg02, fp
27e74     0A 14 06 F1 | 	add	arg02, #10
27e78     0A 19 E2 FA | 	rdword	arg04, arg02
27e7c     0C 15 32 F9 | 	getword	arg02, arg04, #0
27e80     01 14 86 F1 | 	sub	arg02, #1
27e84     0A FB 09 F5 | 	and	result1, arg02 wz
27e88     14 4E 05 F1 | 	add	fp, #20
27e8c     A7 FA 61 FC | 	wrlong	result1, fp
27e90     2C 4E 85 F1 | 	sub	fp, #44
27e94     44 01 90 5D |  if_ne	jmp	#LR__4109
27e98     04 4E 05 F1 | 	add	fp, #4
27e9c     A7 FA 01 FB | 	rdlong	result1, fp
27ea0     04 4E 85 F1 | 	sub	fp, #4
27ea4     14 FA 05 F1 | 	add	result1, #20
27ea8     FD 14 0A FB | 	rdlong	arg02, result1 wz
27eac     44 00 90 5D |  if_ne	jmp	#LR__4104
27eb0     04 4E 05 F1 | 	add	fp, #4
27eb4     A7 14 02 FB | 	rdlong	arg02, fp
27eb8     08 14 06 F1 | 	add	arg02, #8
27ebc     0A 15 0A FB | 	rdlong	arg02, arg02 wz
27ec0     18 4E 05 F1 | 	add	fp, #24
27ec4     A7 14 62 FC | 	wrlong	arg02, fp
27ec8     1C 4E 85 F1 | 	sub	fp, #28
27ecc     4C 00 90 5D |  if_ne	jmp	#LR__4105
27ed0     04 4E 05 F1 | 	add	fp, #4
27ed4     A7 12 02 FB | 	rdlong	arg01, fp
27ed8     04 4E 85 F1 | 	sub	fp, #4
27edc     00 14 06 F6 | 	mov	arg02, #0
27ee0     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
27ee4     1C 4E 05 F1 | 	add	fp, #28
27ee8     A7 FA 61 FC | 	wrlong	result1, fp
27eec     1C 4E 85 F1 | 	sub	fp, #28
27ef0     28 00 90 FD | 	jmp	#LR__4105
27ef4                 | LR__4104
27ef4     04 4E 05 F1 | 	add	fp, #4
27ef8     A7 18 02 FB | 	rdlong	arg04, fp
27efc     0C 13 02 F6 | 	mov	arg01, arg04
27f00     04 4E 85 F1 | 	sub	fp, #4
27f04     18 18 06 F1 | 	add	arg04, #24
27f08     0C 15 02 FB | 	rdlong	arg02, arg04
27f0c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
27f10     1C 4E 05 F1 | 	add	fp, #28
27f14     A7 FA 61 FC | 	wrlong	result1, fp
27f18     1C 4E 85 F1 | 	sub	fp, #28
27f1c                 | LR__4105
27f1c     1C 4E 05 F1 | 	add	fp, #28
27f20     A7 FA 09 FB | 	rdlong	result1, fp wz
27f24     1C 4E 85 F1 | 	sub	fp, #28
27f28     A0 05 90 AD |  if_e	jmp	#LR__4122
27f2c     1C 4E 05 F1 | 	add	fp, #28
27f30     A7 FA 01 FB | 	rdlong	result1, fp
27f34     1C 4E 85 F1 | 	sub	fp, #28
27f38     01 FA 0D F2 | 	cmp	result1, #1 wz
27f3c     1C 00 90 5D |  if_ne	jmp	#LR__4106
27f40     04 4E 05 F1 | 	add	fp, #4
27f44     A7 FA 01 FB | 	rdlong	result1, fp
27f48     04 4E 85 F1 | 	sub	fp, #4
27f4c     11 FA 05 F1 | 	add	result1, #17
27f50     FD 04 48 FC | 	wrbyte	#2, result1
27f54     02 FA 05 F6 | 	mov	result1, #2
27f58     98 05 90 FD | 	jmp	#LR__4123
27f5c                 | LR__4106
27f5c     1C 4E 05 F1 | 	add	fp, #28
27f60     A7 FA 01 FB | 	rdlong	result1, fp
27f64     1C 4E 85 F1 | 	sub	fp, #28
27f68     FF FF 7F FF 
27f6c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
27f70     1C 00 90 5D |  if_ne	jmp	#LR__4107
27f74     04 4E 05 F1 | 	add	fp, #4
27f78     A7 FA 01 FB | 	rdlong	result1, fp
27f7c     04 4E 85 F1 | 	sub	fp, #4
27f80     11 FA 05 F1 | 	add	result1, #17
27f84     FD 02 48 FC | 	wrbyte	#1, result1
27f88     01 FA 05 F6 | 	mov	result1, #1
27f8c     64 05 90 FD | 	jmp	#LR__4123
27f90                 | LR__4107
27f90     04 4E 05 F1 | 	add	fp, #4
27f94     A7 FA 01 FB | 	rdlong	result1, fp
27f98     18 4E 05 F1 | 	add	fp, #24
27f9c     A7 18 02 FB | 	rdlong	arg04, fp
27fa0     18 FA 05 F1 | 	add	result1, #24
27fa4     FD 18 62 FC | 	wrlong	arg04, result1
27fa8     18 4E 85 F1 | 	sub	fp, #24
27fac     A7 FA 01 FB | 	rdlong	result1, fp
27fb0     04 4E 85 F1 | 	sub	fp, #4
27fb4     08 FA 05 F1 | 	add	result1, #8
27fb8     FD FA 09 FB | 	rdlong	result1, result1 wz
27fbc     1C 00 90 5D |  if_ne	jmp	#LR__4108
27fc0     04 4E 05 F1 | 	add	fp, #4
27fc4     A7 18 02 FB | 	rdlong	arg04, fp
27fc8     18 4E 05 F1 | 	add	fp, #24
27fcc     A7 FA 01 FB | 	rdlong	result1, fp
27fd0     1C 4E 85 F1 | 	sub	fp, #28
27fd4     08 18 06 F1 | 	add	arg04, #8
27fd8     0C FB 61 FC | 	wrlong	result1, arg04
27fdc                 | LR__4108
27fdc                 | LR__4109
27fdc     04 4E 05 F1 | 	add	fp, #4
27fe0     A7 18 02 FB | 	rdlong	arg04, fp
27fe4     04 4E 85 F1 | 	sub	fp, #4
27fe8     10 18 06 F1 | 	add	arg04, #16
27fec     0C 19 C2 FA | 	rdbyte	arg04, arg04
27ff0     80 18 CE F7 | 	test	arg04, #128 wz
27ff4     7C 00 90 AD |  if_e	jmp	#LR__4111
27ff8     18 4E 05 F1 | 	add	fp, #24
27ffc     A7 18 02 FB | 	rdlong	arg04, fp
28000     01 18 06 F1 | 	add	arg04, #1
28004     0C 13 C2 FA | 	rdbyte	arg01, arg04
28008     14 4E 85 F1 | 	sub	fp, #20
2800c     A7 18 02 FB | 	rdlong	arg04, fp
28010     0C 15 02 F6 | 	mov	arg02, arg04
28014     28 14 06 F1 | 	add	arg02, #40
28018     04 4E 85 F1 | 	sub	fp, #4
2801c     1C 18 06 F1 | 	add	arg04, #28
28020     0C 17 02 FB | 	rdlong	arg03, arg04
28024     01 18 06 F6 | 	mov	arg04, #1
28028     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2802c     00 FA 0D F2 | 	cmp	result1, #0 wz
28030     1C 00 90 AD |  if_e	jmp	#LR__4110
28034     04 4E 05 F1 | 	add	fp, #4
28038     A7 FA 01 FB | 	rdlong	result1, fp
2803c     04 4E 85 F1 | 	sub	fp, #4
28040     11 FA 05 F1 | 	add	result1, #17
28044     FD 02 48 FC | 	wrbyte	#1, result1
28048     01 FA 05 F6 | 	mov	result1, #1
2804c     A4 04 90 FD | 	jmp	#LR__4123
28050                 | LR__4110
28050     04 4E 05 F1 | 	add	fp, #4
28054     A7 18 02 FB | 	rdlong	arg04, fp
28058     0C FB 01 F6 | 	mov	result1, arg04
2805c     04 4E 85 F1 | 	sub	fp, #4
28060     10 18 06 F1 | 	add	arg04, #16
28064     0C 19 C2 FA | 	rdbyte	arg04, arg04
28068     7F 18 06 F5 | 	and	arg04, #127
2806c     10 FA 05 F1 | 	add	result1, #16
28070     FD 18 42 FC | 	wrbyte	arg04, result1
28074                 | LR__4111
28074     18 4E 05 F1 | 	add	fp, #24
28078     A7 12 02 FB | 	rdlong	arg01, fp
2807c     14 4E 85 F1 | 	sub	fp, #20
28080     A7 14 02 FB | 	rdlong	arg02, fp
28084     04 4E 85 F1 | 	sub	fp, #4
28088     18 14 06 F1 | 	add	arg02, #24
2808c     0A 15 02 FB | 	rdlong	arg02, arg02
28090     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
28094     20 4E 05 F1 | 	add	fp, #32
28098     A7 FA 61 FC | 	wrlong	result1, fp
2809c     20 4E 85 F1 | 	sub	fp, #32
280a0     00 FA 0D F2 | 	cmp	result1, #0 wz
280a4     1C 00 90 5D |  if_ne	jmp	#LR__4112
280a8     04 4E 05 F1 | 	add	fp, #4
280ac     A7 FA 01 FB | 	rdlong	result1, fp
280b0     04 4E 85 F1 | 	sub	fp, #4
280b4     11 FA 05 F1 | 	add	result1, #17
280b8     FD 04 48 FC | 	wrbyte	#2, result1
280bc     02 FA 05 F6 | 	mov	result1, #2
280c0     30 04 90 FD | 	jmp	#LR__4123
280c4                 | LR__4112
280c4     20 4E 05 F1 | 	add	fp, #32
280c8     A7 FA 01 FB | 	rdlong	result1, fp
280cc     0C 4E 05 F1 | 	add	fp, #12
280d0     A7 1E 02 FB | 	rdlong	local01, fp
280d4     0F FB 01 F1 | 	add	result1, local01
280d8     0C 4E 85 F1 | 	sub	fp, #12
280dc     A7 FA 61 FC | 	wrlong	result1, fp
280e0     14 4E 85 F1 | 	sub	fp, #20
280e4     A7 FA 01 FB | 	rdlong	result1, fp
280e8     09 FA 45 F0 | 	shr	result1, #9
280ec     1C 4E 05 F1 | 	add	fp, #28
280f0     A7 FA 61 FC | 	wrlong	result1, fp
280f4     28 4E 85 F1 | 	sub	fp, #40
280f8     01 FA 15 F2 | 	cmp	result1, #1 wc
280fc     60 01 90 CD |  if_b	jmp	#LR__4116
28100     2C 4E 05 F1 | 	add	fp, #44
28104     A7 FA 01 FB | 	rdlong	result1, fp
28108     04 4E 85 F1 | 	sub	fp, #4
2810c     A7 18 02 FB | 	rdlong	arg04, fp
28110     0C FB 01 F1 | 	add	result1, arg04
28114     10 4E 85 F1 | 	sub	fp, #16
28118     A7 18 02 FB | 	rdlong	arg04, fp
2811c     18 4E 85 F1 | 	sub	fp, #24
28120     0A 18 06 F1 | 	add	arg04, #10
28124     0C 19 E2 FA | 	rdword	arg04, arg04
28128     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2812c     28 00 90 ED |  if_be	jmp	#LR__4113
28130     18 4E 05 F1 | 	add	fp, #24
28134     A7 FA 01 FB | 	rdlong	result1, fp
28138     0A FA 05 F1 | 	add	result1, #10
2813c     FD FA E1 FA | 	rdword	result1, result1
28140     14 4E 05 F1 | 	add	fp, #20
28144     A7 18 02 FB | 	rdlong	arg04, fp
28148     0C FB 81 F1 | 	sub	result1, arg04
2814c     04 4E 85 F1 | 	sub	fp, #4
28150     A7 FA 61 FC | 	wrlong	result1, fp
28154     28 4E 85 F1 | 	sub	fp, #40
28158                 | LR__4113
28158     18 4E 05 F1 | 	add	fp, #24
2815c     A7 18 02 FB | 	rdlong	arg04, fp
28160     01 18 06 F1 | 	add	arg04, #1
28164     0C 13 C2 FA | 	rdbyte	arg01, arg04
28168     18 4E 05 F1 | 	add	fp, #24
2816c     A7 14 02 FB | 	rdlong	arg02, fp
28170     10 4E 85 F1 | 	sub	fp, #16
28174     A7 16 02 FB | 	rdlong	arg03, fp
28178     08 4E 05 F1 | 	add	fp, #8
2817c     A7 18 02 FB | 	rdlong	arg04, fp
28180     28 4E 85 F1 | 	sub	fp, #40
28184     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
28188     00 FA 0D F2 | 	cmp	result1, #0 wz
2818c     1C 00 90 AD |  if_e	jmp	#LR__4114
28190     04 4E 05 F1 | 	add	fp, #4
28194     A7 1E 02 FB | 	rdlong	local01, fp
28198     04 4E 85 F1 | 	sub	fp, #4
2819c     11 1E 06 F1 | 	add	local01, #17
281a0     0F 03 48 FC | 	wrbyte	#1, local01
281a4     01 FA 05 F6 | 	mov	result1, #1
281a8     48 03 90 FD | 	jmp	#LR__4123
281ac                 | LR__4114
281ac     04 4E 05 F1 | 	add	fp, #4
281b0     A7 FA 01 FB | 	rdlong	result1, fp
281b4     1C FA 05 F1 | 	add	result1, #28
281b8     FD FA 01 FB | 	rdlong	result1, result1
281bc     1C 4E 05 F1 | 	add	fp, #28
281c0     A7 20 02 FB | 	rdlong	local02, fp
281c4     10 FB 81 F1 | 	sub	result1, local02
281c8     08 4E 05 F1 | 	add	fp, #8
281cc     A7 18 02 FB | 	rdlong	arg04, fp
281d0     28 4E 85 F1 | 	sub	fp, #40
281d4     0C FB 11 F2 | 	cmp	result1, arg04 wc
281d8     68 00 90 3D |  if_ae	jmp	#LR__4115
281dc     04 4E 05 F1 | 	add	fp, #4
281e0     A7 12 02 FB | 	rdlong	arg01, fp
281e4     28 12 06 F1 | 	add	arg01, #40
281e8     2C 4E 05 F1 | 	add	fp, #44
281ec     A7 14 02 FB | 	rdlong	arg02, fp
281f0     2C 4E 85 F1 | 	sub	fp, #44
281f4     A7 FA 01 FB | 	rdlong	result1, fp
281f8     1C FA 05 F1 | 	add	result1, #28
281fc     FD 22 02 FB | 	rdlong	local03, result1
28200     1C 4E 05 F1 | 	add	fp, #28
28204     A7 18 02 FB | 	rdlong	arg04, fp
28208     20 4E 85 F1 | 	sub	fp, #32
2820c     0C 23 82 F1 | 	sub	local03, arg04
28210     09 22 66 F0 | 	shl	local03, #9
28214     11 15 02 F1 | 	add	arg02, local03
28218     09 16 C6 F9 | 	decod	arg03, #9
2821c     4C 41 BF FD | 	call	#__system____builtin_memmove
28220     04 4E 05 F1 | 	add	fp, #4
28224     A7 18 02 FB | 	rdlong	arg04, fp
28228     0C FB 01 F6 | 	mov	result1, arg04
2822c     04 4E 85 F1 | 	sub	fp, #4
28230     10 18 06 F1 | 	add	arg04, #16
28234     0C 19 C2 FA | 	rdbyte	arg04, arg04
28238     7F 18 06 F5 | 	and	arg04, #127
2823c     10 FA 05 F1 | 	add	result1, #16
28240     FD 18 42 FC | 	wrbyte	arg04, result1
28244                 | LR__4115
28244     28 4E 05 F1 | 	add	fp, #40
28248     A7 FA 01 FB | 	rdlong	result1, fp
2824c     09 FA 65 F0 | 	shl	result1, #9
28250     04 4E 85 F1 | 	sub	fp, #4
28254     A7 FA 61 FC | 	wrlong	result1, fp
28258     24 4E 85 F1 | 	sub	fp, #36
2825c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2825c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2825c                 | ' 				}
2825c                 | ' 
2825c                 | ' 
2825c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2825c                 | ' 				continue;
2825c     74 01 90 FD | 	jmp	#LR__4119
28260                 | LR__4116
28260     04 4E 05 F1 | 	add	fp, #4
28264     A7 20 02 FB | 	rdlong	local02, fp
28268     1C 20 06 F1 | 	add	local02, #28
2826c     10 FB 01 FB | 	rdlong	result1, local02
28270     1C 4E 05 F1 | 	add	fp, #28
28274     A7 20 02 FB | 	rdlong	local02, fp
28278     20 4E 85 F1 | 	sub	fp, #32
2827c     10 FB 09 F2 | 	cmp	result1, local02 wz
28280     90 00 90 AD |  if_e	jmp	#LR__4117
28284     04 4E 05 F1 | 	add	fp, #4
28288     A7 FA 01 FB | 	rdlong	result1, fp
2828c     FD 22 02 F6 | 	mov	local03, result1
28290     04 4E 85 F1 | 	sub	fp, #4
28294     14 22 06 F1 | 	add	local03, #20
28298     11 23 02 FB | 	rdlong	local03, local03
2829c     0C FA 05 F1 | 	add	result1, #12
282a0     FD 24 02 FB | 	rdlong	local04, result1
282a4     12 27 02 F6 | 	mov	local05, local04
282a8     13 23 12 F2 | 	cmp	local03, local05 wc
282ac     64 00 90 3D |  if_ae	jmp	#LR__4117
282b0     18 4E 05 F1 | 	add	fp, #24
282b4     A7 18 02 FB | 	rdlong	arg04, fp
282b8     01 18 06 F1 | 	add	arg04, #1
282bc     0C 13 C2 FA | 	rdbyte	arg01, arg04
282c0     14 4E 85 F1 | 	sub	fp, #20
282c4     A7 28 02 FB | 	rdlong	local06, fp
282c8     28 28 06 F1 | 	add	local06, #40
282cc     14 2B 02 F6 | 	mov	local07, local06
282d0     1C 4E 05 F1 | 	add	fp, #28
282d4     A7 2C 02 FB | 	rdlong	local08, fp
282d8     20 4E 85 F1 | 	sub	fp, #32
282dc     01 2E 06 F6 | 	mov	local09, #1
282e0     15 15 02 F6 | 	mov	arg02, local07
282e4     16 17 02 F6 | 	mov	arg03, local08
282e8     01 18 06 F6 | 	mov	arg04, #1
282ec     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
282f0     FD 30 0A F6 | 	mov	local10, result1 wz
282f4     1C 00 90 AD |  if_e	jmp	#LR__4117
282f8     04 4E 05 F1 | 	add	fp, #4
282fc     A7 30 02 FB | 	rdlong	local10, fp
28300     04 4E 85 F1 | 	sub	fp, #4
28304     11 30 06 F1 | 	add	local10, #17
28308     18 03 48 FC | 	wrbyte	#1, local10
2830c                 | ' 				fp->fptr < fp->obj.objsize &&
2830c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2830c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2830c     01 FA 05 F6 | 	mov	result1, #1
28310     E0 01 90 FD | 	jmp	#LR__4123
28314                 | LR__4117
28314     04 4E 05 F1 | 	add	fp, #4
28318     A7 18 02 FB | 	rdlong	arg04, fp
2831c     1C 4E 05 F1 | 	add	fp, #28
28320     A7 FA 01 FB | 	rdlong	result1, fp
28324     20 4E 85 F1 | 	sub	fp, #32
28328     1C 18 06 F1 | 	add	arg04, #28
2832c     0C FB 61 FC | 	wrlong	result1, arg04
28330                 | LR__4118
28330     04 4E 05 F1 | 	add	fp, #4
28334     A7 FA 01 FB | 	rdlong	result1, fp
28338     14 FA 05 F1 | 	add	result1, #20
2833c     FD FA 01 FB | 	rdlong	result1, result1
28340     FF FB 05 F5 | 	and	result1, #511
28344     09 32 C6 F9 | 	decod	local11, #9
28348     FD 32 82 F1 | 	sub	local11, result1
2834c     20 4E 05 F1 | 	add	fp, #32
28350     A7 32 62 FC | 	wrlong	local11, fp
28354     18 4E 85 F1 | 	sub	fp, #24
28358     A7 FA 01 FB | 	rdlong	result1, fp
2835c     0C 4E 85 F1 | 	sub	fp, #12
28360     FD 32 1A F2 | 	cmp	local11, result1 wcz
28364     0C 4E 05 11 |  if_a	add	fp, #12
28368     A7 32 02 1B |  if_a	rdlong	local11, fp
2836c     18 4E 05 11 |  if_a	add	fp, #24
28370     A7 32 62 1C |  if_a	wrlong	local11, fp
28374     24 4E 85 11 |  if_a	sub	fp, #36
28378     04 4E 05 F1 | 	add	fp, #4
2837c     A7 32 02 FB | 	rdlong	local11, fp
28380     19 13 02 F6 | 	mov	arg01, local11
28384     28 12 06 F1 | 	add	arg01, #40
28388     14 32 06 F1 | 	add	local11, #20
2838c     19 33 02 FB | 	rdlong	local11, local11
28390     FF 33 06 F5 | 	and	local11, #511
28394     19 13 02 F1 | 	add	arg01, local11
28398     2C 4E 05 F1 | 	add	fp, #44
2839c     A7 14 02 FB | 	rdlong	arg02, fp
283a0     0C 4E 85 F1 | 	sub	fp, #12
283a4     A7 16 02 FB | 	rdlong	arg03, fp
283a8     24 4E 85 F1 | 	sub	fp, #36
283ac     BC 3F BF FD | 	call	#__system____builtin_memmove
283b0     04 4E 05 F1 | 	add	fp, #4
283b4     A7 FA 01 FB | 	rdlong	result1, fp
283b8     FD 32 02 F6 | 	mov	local11, result1
283bc     04 4E 85 F1 | 	sub	fp, #4
283c0     10 FA 05 F1 | 	add	result1, #16
283c4     FD FA C1 FA | 	rdbyte	result1, result1
283c8     80 FA 45 F5 | 	or	result1, #128
283cc     10 32 06 F1 | 	add	local11, #16
283d0     19 FB 41 FC | 	wrbyte	result1, local11
283d4                 | LR__4119
283d4     0C 4E 05 F1 | 	add	fp, #12
283d8     A7 32 02 FB | 	rdlong	local11, fp
283dc     18 4E 05 F1 | 	add	fp, #24
283e0     A7 FA 01 FB | 	rdlong	result1, fp
283e4     FD 32 82 F1 | 	sub	local11, result1
283e8     18 4E 85 F1 | 	sub	fp, #24
283ec     A7 32 62 FC | 	wrlong	local11, fp
283f0     04 4E 05 F1 | 	add	fp, #4
283f4     A7 34 02 FB | 	rdlong	local12, fp
283f8     1A 33 02 FB | 	rdlong	local11, local12
283fc     14 4E 05 F1 | 	add	fp, #20
28400     A7 36 02 FB | 	rdlong	local13, fp
28404     1B 33 02 F1 | 	add	local11, local13
28408     1A 33 62 FC | 	wrlong	local11, local12
2840c     0C 4E 05 F1 | 	add	fp, #12
28410     A7 32 02 FB | 	rdlong	local11, fp
28414     0C 4E 85 F1 | 	sub	fp, #12
28418     A7 38 02 FB | 	rdlong	local14, fp
2841c     1C 33 02 F1 | 	add	local11, local14
28420     0C 4E 05 F1 | 	add	fp, #12
28424     A7 32 62 FC | 	wrlong	local11, fp
28428     2C 4E 85 F1 | 	sub	fp, #44
2842c     A7 3A 02 FB | 	rdlong	local15, fp
28430     1D 33 02 F6 | 	mov	local11, local15
28434     14 3A 06 F1 | 	add	local15, #20
28438     1D 3B 02 FB | 	rdlong	local15, local15
2843c     20 4E 05 F1 | 	add	fp, #32
28440     A7 3C 02 FB | 	rdlong	local16, fp
28444     1E 3B 02 F1 | 	add	local15, local16
28448     14 32 06 F1 | 	add	local11, #20
2844c     19 3B 62 FC | 	wrlong	local15, local11
28450     20 4E 85 F1 | 	sub	fp, #32
28454     A7 3E 02 FB | 	rdlong	local17, fp
28458     1F 33 02 F6 | 	mov	local11, local17
2845c     1F 41 02 F6 | 	mov	local18, local17
28460     04 4E 85 F1 | 	sub	fp, #4
28464     14 3E 06 F1 | 	add	local17, #20
28468     1F 43 02 FB | 	rdlong	local19, local17
2846c     0C 40 06 F1 | 	add	local18, #12
28470     20 45 02 FB | 	rdlong	local20, local18
28474     22 43 1A F2 | 	cmp	local19, local20 wcz
28478     24 00 90 ED |  if_be	jmp	#LR__4120
2847c     04 4E 05 F1 | 	add	fp, #4
28480     A7 26 02 FB | 	rdlong	local05, fp
28484     04 4E 85 F1 | 	sub	fp, #4
28488     13 23 02 F6 | 	mov	local03, local05
2848c     14 22 06 F1 | 	add	local03, #20
28490     11 25 02 FB | 	rdlong	local04, local03
28494     14 22 86 F1 | 	sub	local03, #20
28498     12 47 02 F6 | 	mov	local21, local04
2849c     20 00 90 FD | 	jmp	#LR__4121
284a0                 | LR__4120
284a0     04 4E 05 F1 | 	add	fp, #4
284a4     A7 2A 02 FB | 	rdlong	local07, fp
284a8     04 4E 85 F1 | 	sub	fp, #4
284ac     15 31 02 F6 | 	mov	local10, local07
284b0     0C 30 06 F1 | 	add	local10, #12
284b4     18 2D 02 FB | 	rdlong	local08, local10
284b8     0C 30 86 F1 | 	sub	local10, #12
284bc     16 47 02 F6 | 	mov	local21, local08
284c0                 | LR__4121
284c0     0C 32 06 F1 | 	add	local11, #12
284c4     19 47 62 FC | 	wrlong	local21, local11
284c8     5C F9 9F FD | 	jmp	#LR__4103
284cc                 | LR__4122
284cc     04 4E 05 F1 | 	add	fp, #4
284d0     A7 34 02 FB | 	rdlong	local12, fp
284d4     1A 1F 02 F6 | 	mov	local01, local12
284d8     04 4E 85 F1 | 	sub	fp, #4
284dc     10 34 06 F1 | 	add	local12, #16
284e0     1A 33 C2 FA | 	rdbyte	local11, local12
284e4     40 32 46 F5 | 	or	local11, #64
284e8     10 1E 06 F1 | 	add	local01, #16
284ec     0F 33 42 FC | 	wrbyte	local11, local01
284f0                 | ' 
284f0                 | ' 
284f0                 | ' 
284f0                 | ' 
284f0                 | ' 
284f0                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
284f0                 | ' 		fp->flag |=  0x80 ;
284f0                 | ' 
284f0                 | ' 	}
284f0                 | ' 
284f0                 | ' 	fp->flag |=  0x40 ;
284f0                 | ' 
284f0                 | ' 	return FR_OK ;
284f0     00 FA 05 F6 | 	mov	result1, #0
284f4                 | LR__4123
284f4     A7 F0 03 F6 | 	mov	ptra, fp
284f8     B2 00 A0 FD | 	call	#popregs_
284fc                 | _fatfs_cc_f_write_ret
284fc     2D 00 64 FD | 	ret
28500                 | 
28500                 | _fatfs_cc_f_sync
28500     00 4A 05 F6 | 	mov	COUNT_, #0
28504     A8 00 A0 FD | 	call	#pushregs_
28508     18 F0 07 F1 | 	add	ptra, #24
2850c     04 4E 05 F1 | 	add	fp, #4
28510     A7 12 62 FC | 	wrlong	arg01, fp
28514     08 4E 05 F1 | 	add	fp, #8
28518     A7 14 02 F6 | 	mov	arg02, fp
2851c     0C 4E 85 F1 | 	sub	fp, #12
28520     D0 E8 BF FD | 	call	#_fatfs_cc_validate
28524     08 4E 05 F1 | 	add	fp, #8
28528     A7 FA 61 FC | 	wrlong	result1, fp
2852c     08 4E 85 F1 | 	sub	fp, #8
28530     00 FA 0D F2 | 	cmp	result1, #0 wz
28534     C0 01 90 5D |  if_ne	jmp	#LR__4133
28538     04 4E 05 F1 | 	add	fp, #4
2853c     A7 18 02 FB | 	rdlong	arg04, fp
28540     04 4E 85 F1 | 	sub	fp, #4
28544     10 18 06 F1 | 	add	arg04, #16
28548     0C 19 C2 FA | 	rdbyte	arg04, arg04
2854c     40 18 CE F7 | 	test	arg04, #64 wz
28550     A4 01 90 AD |  if_e	jmp	#LR__4132
28554     04 4E 05 F1 | 	add	fp, #4
28558     A7 18 02 FB | 	rdlong	arg04, fp
2855c     04 4E 85 F1 | 	sub	fp, #4
28560     10 18 06 F1 | 	add	arg04, #16
28564     0C 19 C2 FA | 	rdbyte	arg04, arg04
28568     80 18 CE F7 | 	test	arg04, #128 wz
2856c     64 00 90 AD |  if_e	jmp	#LR__4130
28570     0C 4E 05 F1 | 	add	fp, #12
28574     A7 18 02 FB | 	rdlong	arg04, fp
28578     01 18 06 F1 | 	add	arg04, #1
2857c     0C 13 C2 FA | 	rdbyte	arg01, arg04
28580     08 4E 85 F1 | 	sub	fp, #8
28584     A7 18 02 FB | 	rdlong	arg04, fp
28588     0C 15 02 F6 | 	mov	arg02, arg04
2858c     28 14 06 F1 | 	add	arg02, #40
28590     04 4E 85 F1 | 	sub	fp, #4
28594     1C 18 06 F1 | 	add	arg04, #28
28598     0C 17 02 FB | 	rdlong	arg03, arg04
2859c     01 18 06 F6 | 	mov	arg04, #1
285a0     0C AE BF FD | 	call	#_fatfs_cc_disk_write
285a4     00 FA 0D F2 | 	cmp	result1, #0 wz
285a8     01 FA 05 56 |  if_ne	mov	result1, #1
285ac     54 01 90 5D |  if_ne	jmp	#LR__4134
285b0     04 4E 05 F1 | 	add	fp, #4
285b4     A7 18 02 FB | 	rdlong	arg04, fp
285b8     0C 17 02 F6 | 	mov	arg03, arg04
285bc     04 4E 85 F1 | 	sub	fp, #4
285c0     10 18 06 F1 | 	add	arg04, #16
285c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
285c8     7F 18 06 F5 | 	and	arg04, #127
285cc     10 16 06 F1 | 	add	arg03, #16
285d0     0B 19 42 FC | 	wrbyte	arg04, arg03
285d4                 | LR__4130
285d4     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
285d8     10 4E 05 F1 | 	add	fp, #16
285dc     A7 FA 61 FC | 	wrlong	result1, fp
285e0     04 4E 85 F1 | 	sub	fp, #4
285e4     A7 12 02 FB | 	rdlong	arg01, fp
285e8     08 4E 85 F1 | 	sub	fp, #8
285ec     A7 18 02 FB | 	rdlong	arg04, fp
285f0     04 4E 85 F1 | 	sub	fp, #4
285f4     20 18 06 F1 | 	add	arg04, #32
285f8     0C 15 02 FB | 	rdlong	arg02, arg04
285fc     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
28600     08 4E 05 F1 | 	add	fp, #8
28604     A7 FA 61 FC | 	wrlong	result1, fp
28608     08 4E 85 F1 | 	sub	fp, #8
2860c     00 FA 0D F2 | 	cmp	result1, #0 wz
28610     E4 00 90 5D |  if_ne	jmp	#LR__4131
28614     04 4E 05 F1 | 	add	fp, #4
28618     A7 18 02 FB | 	rdlong	arg04, fp
2861c     24 18 06 F1 | 	add	arg04, #36
28620     0C 19 02 FB | 	rdlong	arg04, arg04
28624     10 4E 05 F1 | 	add	fp, #16
28628     A7 18 62 FC | 	wrlong	arg04, fp
2862c     0C 17 02 F6 | 	mov	arg03, arg04
28630     0B 16 06 F1 | 	add	arg03, #11
28634     0B 17 C2 FA | 	rdbyte	arg03, arg03
28638     20 16 46 F5 | 	or	arg03, #32
2863c     0B 18 06 F1 | 	add	arg04, #11
28640     0C 17 42 FC | 	wrbyte	arg03, arg04
28644     10 4E 85 F1 | 	sub	fp, #16
28648     A7 18 02 FB | 	rdlong	arg04, fp
2864c     0C 13 02 FB | 	rdlong	arg01, arg04
28650     10 4E 05 F1 | 	add	fp, #16
28654     A7 14 02 FB | 	rdlong	arg02, fp
28658     14 4E 85 F1 | 	sub	fp, #20
2865c     08 18 06 F1 | 	add	arg04, #8
28660     0C 17 02 FB | 	rdlong	arg03, arg04
28664     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
28668     14 4E 05 F1 | 	add	fp, #20
2866c     A7 12 02 FB | 	rdlong	arg01, fp
28670     1C 12 06 F1 | 	add	arg01, #28
28674     10 4E 85 F1 | 	sub	fp, #16
28678     A7 18 02 FB | 	rdlong	arg04, fp
2867c     0C 18 06 F1 | 	add	arg04, #12
28680     0C 15 02 FB | 	rdlong	arg02, arg04
28684     09 15 62 FC | 	wrlong	arg02, arg01
28688     10 4E 05 F1 | 	add	fp, #16
2868c     A7 12 02 FB | 	rdlong	arg01, fp
28690     16 12 06 F1 | 	add	arg01, #22
28694     04 4E 85 F1 | 	sub	fp, #4
28698     A7 14 02 FB | 	rdlong	arg02, fp
2869c     09 15 62 FC | 	wrlong	arg02, arg01
286a0     04 4E 05 F1 | 	add	fp, #4
286a4     A7 12 02 FB | 	rdlong	arg01, fp
286a8     12 12 06 F1 | 	add	arg01, #18
286ac     09 01 58 FC | 	wrword	#0, arg01
286b0     08 4E 85 F1 | 	sub	fp, #8
286b4     A7 18 02 FB | 	rdlong	arg04, fp
286b8     03 18 06 F1 | 	add	arg04, #3
286bc     0C 03 48 FC | 	wrbyte	#1, arg04
286c0     A7 12 02 FB | 	rdlong	arg01, fp
286c4     0C 4E 85 F1 | 	sub	fp, #12
286c8     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
286cc     08 4E 05 F1 | 	add	fp, #8
286d0     A7 FA 61 FC | 	wrlong	result1, fp
286d4     04 4E 85 F1 | 	sub	fp, #4
286d8     A7 18 02 FB | 	rdlong	arg04, fp
286dc     0C 17 02 F6 | 	mov	arg03, arg04
286e0     04 4E 85 F1 | 	sub	fp, #4
286e4     10 18 06 F1 | 	add	arg04, #16
286e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
286ec     BF 18 06 F5 | 	and	arg04, #191
286f0     10 16 06 F1 | 	add	arg03, #16
286f4     0B 19 42 FC | 	wrbyte	arg04, arg03
286f8                 | LR__4131
286f8                 | LR__4132
286f8                 | LR__4133
286f8                 | ' 					dir = fp->dir_ptr;
286f8                 | ' 					dir[ 11 ] |=  0x20 ;
286f8                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
286f8                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
286f8                 | ' 					st_dword(dir +  22 , tm);
286f8                 | ' 					st_word(dir +  18 , 0);
286f8                 | ' 					fs->wflag = 1;
286f8                 | ' 					res = sync_fs(fs);
286f8                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
286f8                 | ' 				}
286f8                 | ' 			}
286f8                 | ' 		}
286f8                 | ' 	}
286f8                 | ' 
286f8                 | ' 	return res ;
286f8     08 4E 05 F1 | 	add	fp, #8
286fc     A7 FA 01 FB | 	rdlong	result1, fp
28700     08 4E 85 F1 | 	sub	fp, #8
28704                 | LR__4134
28704     A7 F0 03 F6 | 	mov	ptra, fp
28708     B2 00 A0 FD | 	call	#popregs_
2870c                 | _fatfs_cc_f_sync_ret
2870c     2D 00 64 FD | 	ret
28710                 | 
28710                 | _fatfs_cc_f_close
28710     01 4A 05 F6 | 	mov	COUNT_, #1
28714     A8 00 A0 FD | 	call	#pushregs_
28718     10 F0 07 F1 | 	add	ptra, #16
2871c     04 4E 05 F1 | 	add	fp, #4
28720     A7 12 62 FC | 	wrlong	arg01, fp
28724     04 4E 85 F1 | 	sub	fp, #4
28728     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2872c     08 4E 05 F1 | 	add	fp, #8
28730     A7 FA 61 FC | 	wrlong	result1, fp
28734     08 4E 85 F1 | 	sub	fp, #8
28738     00 FA 0D F2 | 	cmp	result1, #0 wz
2873c     38 00 90 5D |  if_ne	jmp	#LR__4140
28740     04 4E 05 F1 | 	add	fp, #4
28744     A7 12 02 FB | 	rdlong	arg01, fp
28748     08 4E 05 F1 | 	add	fp, #8
2874c     A7 14 02 F6 | 	mov	arg02, fp
28750     0C 4E 85 F1 | 	sub	fp, #12
28754     9C E6 BF FD | 	call	#_fatfs_cc_validate
28758     08 4E 05 F1 | 	add	fp, #8
2875c     A7 FA 61 FC | 	wrlong	result1, fp
28760     08 4E 85 F1 | 	sub	fp, #8
28764     00 FA 0D F2 | 	cmp	result1, #0 wz
28768     04 4E 05 A1 |  if_e	add	fp, #4
2876c     A7 1E 02 AB |  if_e	rdlong	local01, fp
28770     04 4E 85 A1 |  if_e	sub	fp, #4
28774     0F 01 68 AC |  if_e	wrlong	#0, local01
28778                 | LR__4140
28778                 | ' 
28778                 | ' 
28778                 | ' 
28778                 | ' 
28778                 | ' 			fp->obj.fs = 0;
28778                 | ' #line 4192 "ff.c"
28778                 | ' 		}
28778                 | ' 	}
28778                 | ' 	return res;
28778     08 4E 05 F1 | 	add	fp, #8
2877c     A7 FA 01 FB | 	rdlong	result1, fp
28780     08 4E 85 F1 | 	sub	fp, #8
28784     A7 F0 03 F6 | 	mov	ptra, fp
28788     B2 00 A0 FD | 	call	#popregs_
2878c                 | _fatfs_cc_f_close_ret
2878c     2D 00 64 FD | 	ret
28790                 | 
28790                 | _fatfs_cc_f_lseek
28790     00 4A 05 F6 | 	mov	COUNT_, #0
28794     A8 00 A0 FD | 	call	#pushregs_
28798     24 F0 07 F1 | 	add	ptra, #36
2879c     04 4E 05 F1 | 	add	fp, #4
287a0     A7 12 62 FC | 	wrlong	arg01, fp
287a4     04 4E 05 F1 | 	add	fp, #4
287a8     A7 14 62 FC | 	wrlong	arg02, fp
287ac     04 4E 85 F1 | 	sub	fp, #4
287b0     A7 12 02 FB | 	rdlong	arg01, fp
287b4     0C 4E 05 F1 | 	add	fp, #12
287b8     A7 14 02 F6 | 	mov	arg02, fp
287bc     10 4E 85 F1 | 	sub	fp, #16
287c0     30 E6 BF FD | 	call	#_fatfs_cc_validate
287c4     0C 4E 05 F1 | 	add	fp, #12
287c8     A7 FA 61 FC | 	wrlong	result1, fp
287cc     0C 4E 85 F1 | 	sub	fp, #12
287d0     00 FA 0D F2 | 	cmp	result1, #0 wz
287d4     1C 00 90 5D |  if_ne	jmp	#LR__4150
287d8     04 4E 05 F1 | 	add	fp, #4
287dc     A7 18 02 FB | 	rdlong	arg04, fp
287e0     11 18 06 F1 | 	add	arg04, #17
287e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
287e8     08 4E 05 F1 | 	add	fp, #8
287ec     A7 18 62 FC | 	wrlong	arg04, fp
287f0     0C 4E 85 F1 | 	sub	fp, #12
287f4                 | LR__4150
287f4     0C 4E 05 F1 | 	add	fp, #12
287f8     A7 18 0A FB | 	rdlong	arg04, fp wz
287fc     0C 4E 85 F1 | 	sub	fp, #12
28800     0C 4E 05 51 |  if_ne	add	fp, #12
28804     A7 FA 01 5B |  if_ne	rdlong	result1, fp
28808     0C 4E 85 51 |  if_ne	sub	fp, #12
2880c     40 06 90 5D |  if_ne	jmp	#LR__4173
28810     04 4E 05 F1 | 	add	fp, #4
28814     A7 18 02 FB | 	rdlong	arg04, fp
28818     04 4E 05 F1 | 	add	fp, #4
2881c     A7 16 02 FB | 	rdlong	arg03, fp
28820     08 4E 85 F1 | 	sub	fp, #8
28824     0C 18 06 F1 | 	add	arg04, #12
28828     0C 19 02 FB | 	rdlong	arg04, arg04
2882c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
28830     3C 00 90 ED |  if_be	jmp	#LR__4151
28834     04 4E 05 F1 | 	add	fp, #4
28838     A7 16 02 FB | 	rdlong	arg03, fp
2883c     04 4E 85 F1 | 	sub	fp, #4
28840     10 16 06 F1 | 	add	arg03, #16
28844     0B 17 C2 FA | 	rdbyte	arg03, arg03
28848     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2884c     02 16 CE F7 | 	test	arg03, #2 wz
28850     1C 00 90 5D |  if_ne	jmp	#LR__4151
28854     04 4E 05 F1 | 	add	fp, #4
28858     A7 16 02 FB | 	rdlong	arg03, fp
2885c     0C 16 06 F1 | 	add	arg03, #12
28860     0B 17 02 FB | 	rdlong	arg03, arg03
28864     04 4E 05 F1 | 	add	fp, #4
28868     A7 16 62 FC | 	wrlong	arg03, fp
2886c     08 4E 85 F1 | 	sub	fp, #8
28870                 | LR__4151
28870     04 4E 05 F1 | 	add	fp, #4
28874     A7 16 02 FB | 	rdlong	arg03, fp
28878     14 16 06 F1 | 	add	arg03, #20
2887c     0B 17 02 FB | 	rdlong	arg03, arg03
28880     1C 4E 05 F1 | 	add	fp, #28
28884     A7 16 62 FC | 	wrlong	arg03, fp
28888     1C 4E 85 F1 | 	sub	fp, #28
2888c     A7 16 02 FB | 	rdlong	arg03, fp
28890     18 4E 05 F1 | 	add	fp, #24
28894     A7 00 68 FC | 	wrlong	#0, fp
28898     14 16 06 F1 | 	add	arg03, #20
2889c     0B 01 68 FC | 	wrlong	#0, arg03
288a0     14 4E 85 F1 | 	sub	fp, #20
288a4     A7 16 02 FB | 	rdlong	arg03, fp
288a8     08 4E 85 F1 | 	sub	fp, #8
288ac     01 16 16 F2 | 	cmp	arg03, #1 wc
288b0     E4 03 90 CD |  if_b	jmp	#LR__4167
288b4     10 4E 05 F1 | 	add	fp, #16
288b8     A7 16 02 FB | 	rdlong	arg03, fp
288bc     0A 16 06 F1 | 	add	arg03, #10
288c0     0B 19 E2 FA | 	rdword	arg04, arg03
288c4     09 18 66 F0 | 	shl	arg04, #9
288c8     08 4E 05 F1 | 	add	fp, #8
288cc     A7 18 62 FC | 	wrlong	arg04, fp
288d0     08 4E 05 F1 | 	add	fp, #8
288d4     A7 18 02 FB | 	rdlong	arg04, fp
288d8     20 4E 85 F1 | 	sub	fp, #32
288dc     01 18 16 F2 | 	cmp	arg04, #1 wc
288e0     AC 00 90 CD |  if_b	jmp	#LR__4152
288e4     08 4E 05 F1 | 	add	fp, #8
288e8     A7 18 02 FB | 	rdlong	arg04, fp
288ec     01 18 86 F1 | 	sub	arg04, #1
288f0     10 4E 05 F1 | 	add	fp, #16
288f4     A7 16 02 FB | 	rdlong	arg03, fp
288f8     0B 19 12 FD | 	qdiv	arg04, arg03
288fc     08 4E 05 F1 | 	add	fp, #8
28900     A7 FA 01 FB | 	rdlong	result1, fp
28904     01 FA 85 F1 | 	sub	result1, #1
28908     18 18 62 FD | 	getqx	arg04
2890c     0B FB 11 FD | 	qdiv	result1, arg03
28910     20 4E 85 F1 | 	sub	fp, #32
28914     18 16 62 FD | 	getqx	arg03
28918     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2891c     70 00 90 CD |  if_b	jmp	#LR__4152
28920     04 4E 05 F1 | 	add	fp, #4
28924     A7 16 02 FB | 	rdlong	arg03, fp
28928     1C 4E 05 F1 | 	add	fp, #28
2892c     A7 FA 01 FB | 	rdlong	result1, fp
28930     01 FA 85 F1 | 	sub	result1, #1
28934     08 4E 85 F1 | 	sub	fp, #8
28938     A7 18 02 FB | 	rdlong	arg04, fp
2893c     01 18 86 F1 | 	sub	arg04, #1
28940     0C FB 21 F5 | 	andn	result1, arg04
28944     14 16 06 F1 | 	add	arg03, #20
28948     0B FB 61 FC | 	wrlong	result1, arg03
2894c     10 4E 85 F1 | 	sub	fp, #16
28950     A7 16 02 FB | 	rdlong	arg03, fp
28954     04 4E 85 F1 | 	sub	fp, #4
28958     A7 18 02 FB | 	rdlong	arg04, fp
2895c     14 18 06 F1 | 	add	arg04, #20
28960     0C 19 02 FB | 	rdlong	arg04, arg04
28964     0C 17 82 F1 | 	sub	arg03, arg04
28968     04 4E 05 F1 | 	add	fp, #4
2896c     A7 16 62 FC | 	wrlong	arg03, fp
28970     04 4E 85 F1 | 	sub	fp, #4
28974     A7 16 02 FB | 	rdlong	arg03, fp
28978     18 16 06 F1 | 	add	arg03, #24
2897c     0B 17 02 FB | 	rdlong	arg03, arg03
28980     10 4E 05 F1 | 	add	fp, #16
28984     A7 16 62 FC | 	wrlong	arg03, fp
28988     14 4E 85 F1 | 	sub	fp, #20
2898c     D0 00 90 FD | 	jmp	#LR__4156
28990                 | LR__4152
28990     04 4E 05 F1 | 	add	fp, #4
28994     A7 16 02 FB | 	rdlong	arg03, fp
28998     08 16 06 F1 | 	add	arg03, #8
2899c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
289a0     10 4E 05 F1 | 	add	fp, #16
289a4     A7 16 62 FC | 	wrlong	arg03, fp
289a8     14 4E 85 F1 | 	sub	fp, #20
289ac     94 00 90 5D |  if_ne	jmp	#LR__4155
289b0     04 4E 05 F1 | 	add	fp, #4
289b4     A7 12 02 FB | 	rdlong	arg01, fp
289b8     04 4E 85 F1 | 	sub	fp, #4
289bc     00 14 06 F6 | 	mov	arg02, #0
289c0     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
289c4     14 4E 05 F1 | 	add	fp, #20
289c8     A7 FA 61 FC | 	wrlong	result1, fp
289cc     14 4E 85 F1 | 	sub	fp, #20
289d0     01 FA 0D F2 | 	cmp	result1, #1 wz
289d4     1C 00 90 5D |  if_ne	jmp	#LR__4153
289d8     04 4E 05 F1 | 	add	fp, #4
289dc     A7 16 02 FB | 	rdlong	arg03, fp
289e0     04 4E 85 F1 | 	sub	fp, #4
289e4     11 16 06 F1 | 	add	arg03, #17
289e8     0B 05 48 FC | 	wrbyte	#2, arg03
289ec     02 FA 05 F6 | 	mov	result1, #2
289f0     5C 04 90 FD | 	jmp	#LR__4173
289f4                 | LR__4153
289f4     14 4E 05 F1 | 	add	fp, #20
289f8     A7 FA 01 FB | 	rdlong	result1, fp
289fc     14 4E 85 F1 | 	sub	fp, #20
28a00     FF FF 7F FF 
28a04     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28a08     1C 00 90 5D |  if_ne	jmp	#LR__4154
28a0c     04 4E 05 F1 | 	add	fp, #4
28a10     A7 16 02 FB | 	rdlong	arg03, fp
28a14     04 4E 85 F1 | 	sub	fp, #4
28a18     11 16 06 F1 | 	add	arg03, #17
28a1c     0B 03 48 FC | 	wrbyte	#1, arg03
28a20     01 FA 05 F6 | 	mov	result1, #1
28a24     28 04 90 FD | 	jmp	#LR__4173
28a28                 | LR__4154
28a28     04 4E 05 F1 | 	add	fp, #4
28a2c     A7 16 02 FB | 	rdlong	arg03, fp
28a30     10 4E 05 F1 | 	add	fp, #16
28a34     A7 18 02 FB | 	rdlong	arg04, fp
28a38     14 4E 85 F1 | 	sub	fp, #20
28a3c     08 16 06 F1 | 	add	arg03, #8
28a40     0B 19 62 FC | 	wrlong	arg04, arg03
28a44                 | LR__4155
28a44     04 4E 05 F1 | 	add	fp, #4
28a48     A7 16 02 FB | 	rdlong	arg03, fp
28a4c     10 4E 05 F1 | 	add	fp, #16
28a50     A7 18 02 FB | 	rdlong	arg04, fp
28a54     14 4E 85 F1 | 	sub	fp, #20
28a58     18 16 06 F1 | 	add	arg03, #24
28a5c     0B 19 62 FC | 	wrlong	arg04, arg03
28a60                 | LR__4156
28a60     14 4E 05 F1 | 	add	fp, #20
28a64     A7 16 0A FB | 	rdlong	arg03, fp wz
28a68     14 4E 85 F1 | 	sub	fp, #20
28a6c     28 02 90 AD |  if_e	jmp	#LR__4166
28a70                 | ' 				while (ofs > bcs) {
28a70                 | LR__4157
28a70     08 4E 05 F1 | 	add	fp, #8
28a74     A7 18 02 FB | 	rdlong	arg04, fp
28a78     10 4E 05 F1 | 	add	fp, #16
28a7c     A7 16 02 FB | 	rdlong	arg03, fp
28a80     18 4E 85 F1 | 	sub	fp, #24
28a84     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
28a88     68 01 90 ED |  if_be	jmp	#LR__4163
28a8c     08 4E 05 F1 | 	add	fp, #8
28a90     A7 18 02 FB | 	rdlong	arg04, fp
28a94     10 4E 05 F1 | 	add	fp, #16
28a98     A7 16 02 FB | 	rdlong	arg03, fp
28a9c     0B 19 82 F1 | 	sub	arg04, arg03
28aa0     10 4E 85 F1 | 	sub	fp, #16
28aa4     A7 18 62 FC | 	wrlong	arg04, fp
28aa8     04 4E 85 F1 | 	sub	fp, #4
28aac     A7 18 02 FB | 	rdlong	arg04, fp
28ab0     0C FB 01 F6 | 	mov	result1, arg04
28ab4     14 18 06 F1 | 	add	arg04, #20
28ab8     0C 19 02 FB | 	rdlong	arg04, arg04
28abc     14 4E 05 F1 | 	add	fp, #20
28ac0     A7 16 02 FB | 	rdlong	arg03, fp
28ac4     0B 19 02 F1 | 	add	arg04, arg03
28ac8     14 FA 05 F1 | 	add	result1, #20
28acc     FD 18 62 FC | 	wrlong	arg04, result1
28ad0     14 4E 85 F1 | 	sub	fp, #20
28ad4     A7 16 02 FB | 	rdlong	arg03, fp
28ad8     04 4E 85 F1 | 	sub	fp, #4
28adc     10 16 06 F1 | 	add	arg03, #16
28ae0     0B 17 C2 FA | 	rdbyte	arg03, arg03
28ae4     02 16 CE F7 | 	test	arg03, #2 wz
28ae8     3C 00 90 AD |  if_e	jmp	#LR__4158
28aec     04 4E 05 F1 | 	add	fp, #4
28af0     A7 12 02 FB | 	rdlong	arg01, fp
28af4     10 4E 05 F1 | 	add	fp, #16
28af8     A7 14 02 FB | 	rdlong	arg02, fp
28afc     14 4E 85 F1 | 	sub	fp, #20
28b00     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
28b04     14 4E 05 F1 | 	add	fp, #20
28b08     A7 FA 61 FC | 	wrlong	result1, fp
28b0c     00 FA 4D F2 | 	cmps	result1, #0 wz
28b10     14 4E 85 F1 | 	sub	fp, #20
28b14     08 4E 05 A1 |  if_e	add	fp, #8
28b18     A7 00 68 AC |  if_e	wrlong	#0, fp
28b1c     08 4E 85 A1 |  if_e	sub	fp, #8
28b20                 | ' 							ofs = 0; break;
28b20     D0 00 90 AD |  if_e	jmp	#LR__4163
28b24     24 00 90 FD | 	jmp	#LR__4159
28b28                 | LR__4158
28b28     04 4E 05 F1 | 	add	fp, #4
28b2c     A7 12 02 FB | 	rdlong	arg01, fp
28b30     10 4E 05 F1 | 	add	fp, #16
28b34     A7 14 02 FB | 	rdlong	arg02, fp
28b38     14 4E 85 F1 | 	sub	fp, #20
28b3c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
28b40     14 4E 05 F1 | 	add	fp, #20
28b44     A7 FA 61 FC | 	wrlong	result1, fp
28b48     14 4E 85 F1 | 	sub	fp, #20
28b4c                 | LR__4159
28b4c     14 4E 05 F1 | 	add	fp, #20
28b50     A7 16 02 FB | 	rdlong	arg03, fp
28b54     14 4E 85 F1 | 	sub	fp, #20
28b58     FF FF 7F FF 
28b5c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
28b60     1C 00 90 5D |  if_ne	jmp	#LR__4160
28b64     04 4E 05 F1 | 	add	fp, #4
28b68     A7 16 02 FB | 	rdlong	arg03, fp
28b6c     04 4E 85 F1 | 	sub	fp, #4
28b70     11 16 06 F1 | 	add	arg03, #17
28b74     0B 03 48 FC | 	wrbyte	#1, arg03
28b78     01 FA 05 F6 | 	mov	result1, #1
28b7c     D0 02 90 FD | 	jmp	#LR__4173
28b80                 | LR__4160
28b80     14 4E 05 F1 | 	add	fp, #20
28b84     A7 16 02 FB | 	rdlong	arg03, fp
28b88     14 4E 85 F1 | 	sub	fp, #20
28b8c     02 16 16 F2 | 	cmp	arg03, #2 wc
28b90     24 00 90 CD |  if_b	jmp	#LR__4161
28b94     10 4E 05 F1 | 	add	fp, #16
28b98     A7 18 02 FB | 	rdlong	arg04, fp
28b9c     04 4E 05 F1 | 	add	fp, #4
28ba0     A7 16 02 FB | 	rdlong	arg03, fp
28ba4     14 4E 85 F1 | 	sub	fp, #20
28ba8     18 18 06 F1 | 	add	arg04, #24
28bac     0C 19 02 FB | 	rdlong	arg04, arg04
28bb0     0C 17 12 F2 | 	cmp	arg03, arg04 wc
28bb4     1C 00 90 CD |  if_b	jmp	#LR__4162
28bb8                 | LR__4161
28bb8     04 4E 05 F1 | 	add	fp, #4
28bbc     A7 16 02 FB | 	rdlong	arg03, fp
28bc0     04 4E 85 F1 | 	sub	fp, #4
28bc4     11 16 06 F1 | 	add	arg03, #17
28bc8     0B 05 48 FC | 	wrbyte	#2, arg03
28bcc     02 FA 05 F6 | 	mov	result1, #2
28bd0     7C 02 90 FD | 	jmp	#LR__4173
28bd4                 | LR__4162
28bd4     04 4E 05 F1 | 	add	fp, #4
28bd8     A7 18 02 FB | 	rdlong	arg04, fp
28bdc     10 4E 05 F1 | 	add	fp, #16
28be0     A7 16 02 FB | 	rdlong	arg03, fp
28be4     14 4E 85 F1 | 	sub	fp, #20
28be8     18 18 06 F1 | 	add	arg04, #24
28bec     0C 17 62 FC | 	wrlong	arg03, arg04
28bf0     7C FE 9F FD | 	jmp	#LR__4157
28bf4                 | LR__4163
28bf4     04 4E 05 F1 | 	add	fp, #4
28bf8     A7 16 02 FB | 	rdlong	arg03, fp
28bfc     0B 13 02 F6 | 	mov	arg01, arg03
28c00     14 16 06 F1 | 	add	arg03, #20
28c04     0B 15 02 FB | 	rdlong	arg02, arg03
28c08     04 4E 05 F1 | 	add	fp, #4
28c0c     A7 16 02 FB | 	rdlong	arg03, fp
28c10     0B 15 02 F1 | 	add	arg02, arg03
28c14     14 12 06 F1 | 	add	arg01, #20
28c18     09 15 62 FC | 	wrlong	arg02, arg01
28c1c     A7 16 02 FB | 	rdlong	arg03, fp
28c20     08 4E 85 F1 | 	sub	fp, #8
28c24     FF 17 CE F7 | 	test	arg03, #511 wz
28c28     6C 00 90 AD |  if_e	jmp	#LR__4165
28c2c     10 4E 05 F1 | 	add	fp, #16
28c30     A7 12 02 FB | 	rdlong	arg01, fp
28c34     04 4E 05 F1 | 	add	fp, #4
28c38     A7 14 02 FB | 	rdlong	arg02, fp
28c3c     14 4E 85 F1 | 	sub	fp, #20
28c40     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
28c44     1C 4E 05 F1 | 	add	fp, #28
28c48     A7 FA 61 FC | 	wrlong	result1, fp
28c4c     1C 4E 85 F1 | 	sub	fp, #28
28c50     00 FA 0D F2 | 	cmp	result1, #0 wz
28c54     1C 00 90 5D |  if_ne	jmp	#LR__4164
28c58     04 4E 05 F1 | 	add	fp, #4
28c5c     A7 16 02 FB | 	rdlong	arg03, fp
28c60     04 4E 85 F1 | 	sub	fp, #4
28c64     11 16 06 F1 | 	add	arg03, #17
28c68     0B 05 48 FC | 	wrbyte	#2, arg03
28c6c     02 FA 05 F6 | 	mov	result1, #2
28c70     DC 01 90 FD | 	jmp	#LR__4173
28c74                 | LR__4164
28c74     1C 4E 05 F1 | 	add	fp, #28
28c78     A7 18 02 FB | 	rdlong	arg04, fp
28c7c     14 4E 85 F1 | 	sub	fp, #20
28c80     A7 16 02 FB | 	rdlong	arg03, fp
28c84     09 16 46 F0 | 	shr	arg03, #9
28c88     0B 19 02 F1 | 	add	arg04, arg03
28c8c     14 4E 05 F1 | 	add	fp, #20
28c90     A7 18 62 FC | 	wrlong	arg04, fp
28c94     1C 4E 85 F1 | 	sub	fp, #28
28c98                 | LR__4165
28c98                 | LR__4166
28c98                 | LR__4167
28c98     04 4E 05 F1 | 	add	fp, #4
28c9c     A7 18 02 FB | 	rdlong	arg04, fp
28ca0     0C 17 02 F6 | 	mov	arg03, arg04
28ca4     04 4E 85 F1 | 	sub	fp, #4
28ca8     14 16 06 F1 | 	add	arg03, #20
28cac     0B 17 02 FB | 	rdlong	arg03, arg03
28cb0     0C 18 06 F1 | 	add	arg04, #12
28cb4     0C 19 02 FB | 	rdlong	arg04, arg04
28cb8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
28cbc     3C 00 90 ED |  if_be	jmp	#LR__4168
28cc0     04 4E 05 F1 | 	add	fp, #4
28cc4     A7 18 02 FB | 	rdlong	arg04, fp
28cc8     0C 17 02 F6 | 	mov	arg03, arg04
28ccc     14 18 06 F1 | 	add	arg04, #20
28cd0     0C 19 02 FB | 	rdlong	arg04, arg04
28cd4     0C 16 06 F1 | 	add	arg03, #12
28cd8     0B 19 62 FC | 	wrlong	arg04, arg03
28cdc     A7 18 02 FB | 	rdlong	arg04, fp
28ce0     0C 17 02 F6 | 	mov	arg03, arg04
28ce4     04 4E 85 F1 | 	sub	fp, #4
28ce8     10 18 06 F1 | 	add	arg04, #16
28cec     0C 19 C2 FA | 	rdbyte	arg04, arg04
28cf0     40 18 46 F5 | 	or	arg04, #64
28cf4     10 16 06 F1 | 	add	arg03, #16
28cf8     0B 19 42 FC | 	wrbyte	arg04, arg03
28cfc                 | LR__4168
28cfc     04 4E 05 F1 | 	add	fp, #4
28d00     A7 16 02 FB | 	rdlong	arg03, fp
28d04     04 4E 85 F1 | 	sub	fp, #4
28d08     14 16 06 F1 | 	add	arg03, #20
28d0c     0B 17 02 FB | 	rdlong	arg03, arg03
28d10     FF 17 CE F7 | 	test	arg03, #511 wz
28d14     2C 01 90 AD |  if_e	jmp	#LR__4172
28d18     04 4E 05 F1 | 	add	fp, #4
28d1c     A7 18 02 FB | 	rdlong	arg04, fp
28d20     18 4E 05 F1 | 	add	fp, #24
28d24     A7 16 02 FB | 	rdlong	arg03, fp
28d28     1C 4E 85 F1 | 	sub	fp, #28
28d2c     1C 18 06 F1 | 	add	arg04, #28
28d30     0C 19 02 FB | 	rdlong	arg04, arg04
28d34     0C 17 0A F2 | 	cmp	arg03, arg04 wz
28d38     08 01 90 AD |  if_e	jmp	#LR__4172
28d3c     04 4E 05 F1 | 	add	fp, #4
28d40     A7 16 02 FB | 	rdlong	arg03, fp
28d44     04 4E 85 F1 | 	sub	fp, #4
28d48     10 16 06 F1 | 	add	arg03, #16
28d4c     0B 17 C2 FA | 	rdbyte	arg03, arg03
28d50     80 16 CE F7 | 	test	arg03, #128 wz
28d54     7C 00 90 AD |  if_e	jmp	#LR__4170
28d58     10 4E 05 F1 | 	add	fp, #16
28d5c     A7 16 02 FB | 	rdlong	arg03, fp
28d60     01 16 06 F1 | 	add	arg03, #1
28d64     0B 13 C2 FA | 	rdbyte	arg01, arg03
28d68     0C 4E 85 F1 | 	sub	fp, #12
28d6c     A7 16 02 FB | 	rdlong	arg03, fp
28d70     0B 15 02 F6 | 	mov	arg02, arg03
28d74     28 14 06 F1 | 	add	arg02, #40
28d78     04 4E 85 F1 | 	sub	fp, #4
28d7c     1C 16 06 F1 | 	add	arg03, #28
28d80     0B 17 02 FB | 	rdlong	arg03, arg03
28d84     01 18 06 F6 | 	mov	arg04, #1
28d88     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
28d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
28d90     1C 00 90 AD |  if_e	jmp	#LR__4169
28d94     04 4E 05 F1 | 	add	fp, #4
28d98     A7 16 02 FB | 	rdlong	arg03, fp
28d9c     04 4E 85 F1 | 	sub	fp, #4
28da0     11 16 06 F1 | 	add	arg03, #17
28da4     0B 03 48 FC | 	wrbyte	#1, arg03
28da8     01 FA 05 F6 | 	mov	result1, #1
28dac     A0 00 90 FD | 	jmp	#LR__4173
28db0                 | LR__4169
28db0     04 4E 05 F1 | 	add	fp, #4
28db4     A7 18 02 FB | 	rdlong	arg04, fp
28db8     0C 17 02 F6 | 	mov	arg03, arg04
28dbc     04 4E 85 F1 | 	sub	fp, #4
28dc0     10 18 06 F1 | 	add	arg04, #16
28dc4     0C 19 C2 FA | 	rdbyte	arg04, arg04
28dc8     7F 18 06 F5 | 	and	arg04, #127
28dcc     10 16 06 F1 | 	add	arg03, #16
28dd0     0B 19 42 FC | 	wrbyte	arg04, arg03
28dd4                 | LR__4170
28dd4     10 4E 05 F1 | 	add	fp, #16
28dd8     A7 16 02 FB | 	rdlong	arg03, fp
28ddc     01 16 06 F1 | 	add	arg03, #1
28de0     0B 13 C2 FA | 	rdbyte	arg01, arg03
28de4     0C 4E 85 F1 | 	sub	fp, #12
28de8     A7 14 02 FB | 	rdlong	arg02, fp
28dec     28 14 06 F1 | 	add	arg02, #40
28df0     18 4E 05 F1 | 	add	fp, #24
28df4     A7 16 02 FB | 	rdlong	arg03, fp
28df8     1C 4E 85 F1 | 	sub	fp, #28
28dfc     01 18 06 F6 | 	mov	arg04, #1
28e00     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
28e04     00 FA 0D F2 | 	cmp	result1, #0 wz
28e08     1C 00 90 AD |  if_e	jmp	#LR__4171
28e0c     04 4E 05 F1 | 	add	fp, #4
28e10     A7 16 02 FB | 	rdlong	arg03, fp
28e14     04 4E 85 F1 | 	sub	fp, #4
28e18     11 16 06 F1 | 	add	arg03, #17
28e1c     0B 03 48 FC | 	wrbyte	#1, arg03
28e20     01 FA 05 F6 | 	mov	result1, #1
28e24     28 00 90 FD | 	jmp	#LR__4173
28e28                 | LR__4171
28e28     04 4E 05 F1 | 	add	fp, #4
28e2c     A7 18 02 FB | 	rdlong	arg04, fp
28e30     18 4E 05 F1 | 	add	fp, #24
28e34     A7 16 02 FB | 	rdlong	arg03, fp
28e38     1C 4E 85 F1 | 	sub	fp, #28
28e3c     1C 18 06 F1 | 	add	arg04, #28
28e40     0C 17 62 FC | 	wrlong	arg03, arg04
28e44                 | LR__4172
28e44                 | ' 
28e44                 | ' 			fp->sect = nsect;
28e44                 | ' 		}
28e44                 | ' 	}
28e44                 | ' 
28e44                 | ' 	return res ;
28e44     0C 4E 05 F1 | 	add	fp, #12
28e48     A7 FA 01 FB | 	rdlong	result1, fp
28e4c     0C 4E 85 F1 | 	sub	fp, #12
28e50                 | LR__4173
28e50     A7 F0 03 F6 | 	mov	ptra, fp
28e54     B2 00 A0 FD | 	call	#popregs_
28e58                 | _fatfs_cc_f_lseek_ret
28e58     2D 00 64 FD | 	ret
28e5c                 | 
28e5c                 | _fatfs_cc_f_opendir
28e5c     01 4A 05 F6 | 	mov	COUNT_, #1
28e60     A8 00 A0 FD | 	call	#pushregs_
28e64     14 F0 07 F1 | 	add	ptra, #20
28e68     04 4E 05 F1 | 	add	fp, #4
28e6c     A7 12 62 FC | 	wrlong	arg01, fp
28e70     04 4E 05 F1 | 	add	fp, #4
28e74     A7 14 62 FC | 	wrlong	arg02, fp
28e78     04 4E 85 F1 | 	sub	fp, #4
28e7c     A7 16 0A FB | 	rdlong	arg03, fp wz
28e80     04 4E 85 F1 | 	sub	fp, #4
28e84     09 FA 05 A6 |  if_e	mov	result1, #9
28e88     78 01 90 AD |  if_e	jmp	#LR__4186
28e8c     08 4E 05 F1 | 	add	fp, #8
28e90     A7 12 02 F6 | 	mov	arg01, fp
28e94     08 4E 05 F1 | 	add	fp, #8
28e98     A7 14 02 F6 | 	mov	arg02, fp
28e9c     10 4E 85 F1 | 	sub	fp, #16
28ea0     00 16 06 F6 | 	mov	arg03, #0
28ea4     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
28ea8     0C 4E 05 F1 | 	add	fp, #12
28eac     A7 FA 61 FC | 	wrlong	result1, fp
28eb0     0C 4E 85 F1 | 	sub	fp, #12
28eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
28eb8     20 01 90 5D |  if_ne	jmp	#LR__4185
28ebc     04 4E 05 F1 | 	add	fp, #4
28ec0     A7 16 02 FB | 	rdlong	arg03, fp
28ec4     0C 4E 05 F1 | 	add	fp, #12
28ec8     A7 FA 01 FB | 	rdlong	result1, fp
28ecc     0B FB 61 FC | 	wrlong	result1, arg03
28ed0     0C 4E 85 F1 | 	sub	fp, #12
28ed4     A7 12 02 FB | 	rdlong	arg01, fp
28ed8     04 4E 05 F1 | 	add	fp, #4
28edc     A7 14 02 FB | 	rdlong	arg02, fp
28ee0     08 4E 85 F1 | 	sub	fp, #8
28ee4     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
28ee8     0C 4E 05 F1 | 	add	fp, #12
28eec     A7 FA 61 FC | 	wrlong	result1, fp
28ef0     0C 4E 85 F1 | 	sub	fp, #12
28ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
28ef8     C4 00 90 5D |  if_ne	jmp	#LR__4184
28efc     04 4E 05 F1 | 	add	fp, #4
28f00     A7 16 02 FB | 	rdlong	arg03, fp
28f04     04 4E 85 F1 | 	sub	fp, #4
28f08     2B 16 06 F1 | 	add	arg03, #43
28f0c     0B 17 C2 FA | 	rdbyte	arg03, arg03
28f10     80 16 CE F7 | 	test	arg03, #128 wz
28f14     58 00 90 5D |  if_ne	jmp	#LR__4182
28f18     04 4E 05 F1 | 	add	fp, #4
28f1c     A7 16 02 FB | 	rdlong	arg03, fp
28f20     04 4E 85 F1 | 	sub	fp, #4
28f24     06 16 06 F1 | 	add	arg03, #6
28f28     0B 17 C2 FA | 	rdbyte	arg03, arg03
28f2c     10 16 CE F7 | 	test	arg03, #16 wz
28f30     30 00 90 AD |  if_e	jmp	#LR__4180
28f34     04 4E 05 F1 | 	add	fp, #4
28f38     A7 16 02 FB | 	rdlong	arg03, fp
28f3c     0B 1F 02 F6 | 	mov	local01, arg03
28f40     0C 4E 05 F1 | 	add	fp, #12
28f44     A7 12 02 FB | 	rdlong	arg01, fp
28f48     10 4E 85 F1 | 	sub	fp, #16
28f4c     1C 16 06 F1 | 	add	arg03, #28
28f50     0B 15 02 FB | 	rdlong	arg02, arg03
28f54     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
28f58     08 1E 06 F1 | 	add	local01, #8
28f5c     0F FB 61 FC | 	wrlong	result1, local01
28f60     0C 00 90 FD | 	jmp	#LR__4181
28f64                 | LR__4180
28f64     0C 4E 05 F1 | 	add	fp, #12
28f68     A7 0A 68 FC | 	wrlong	#5, fp
28f6c     0C 4E 85 F1 | 	sub	fp, #12
28f70                 | LR__4181
28f70                 | LR__4182
28f70     0C 4E 05 F1 | 	add	fp, #12
28f74     A7 1E 0A FB | 	rdlong	local01, fp wz
28f78     0C 4E 85 F1 | 	sub	fp, #12
28f7c     40 00 90 5D |  if_ne	jmp	#LR__4183
28f80     04 4E 05 F1 | 	add	fp, #4
28f84     A7 1E 02 FB | 	rdlong	local01, fp
28f88     0C 4E 05 F1 | 	add	fp, #12
28f8c     A7 16 02 FB | 	rdlong	arg03, fp
28f90     06 16 06 F1 | 	add	arg03, #6
28f94     0B 17 E2 FA | 	rdword	arg03, arg03
28f98     04 1E 06 F1 | 	add	local01, #4
28f9c     0F 17 52 FC | 	wrword	arg03, local01
28fa0     0C 4E 85 F1 | 	sub	fp, #12
28fa4     A7 12 02 FB | 	rdlong	arg01, fp
28fa8     04 4E 85 F1 | 	sub	fp, #4
28fac     00 14 06 F6 | 	mov	arg02, #0
28fb0     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
28fb4     0C 4E 05 F1 | 	add	fp, #12
28fb8     A7 FA 61 FC | 	wrlong	result1, fp
28fbc     0C 4E 85 F1 | 	sub	fp, #12
28fc0                 | LR__4183
28fc0                 | LR__4184
28fc0     0C 4E 05 F1 | 	add	fp, #12
28fc4     A7 1E 02 FB | 	rdlong	local01, fp
28fc8     0C 4E 85 F1 | 	sub	fp, #12
28fcc     04 1E 0E F2 | 	cmp	local01, #4 wz
28fd0     0C 4E 05 A1 |  if_e	add	fp, #12
28fd4     A7 0A 68 AC |  if_e	wrlong	#5, fp
28fd8     0C 4E 85 A1 |  if_e	sub	fp, #12
28fdc                 | LR__4185
28fdc     0C 4E 05 F1 | 	add	fp, #12
28fe0     A7 1E 0A FB | 	rdlong	local01, fp wz
28fe4     0C 4E 85 F1 | 	sub	fp, #12
28fe8     04 4E 05 51 |  if_ne	add	fp, #4
28fec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
28ff0     04 4E 85 51 |  if_ne	sub	fp, #4
28ff4     0F 01 68 5C |  if_ne	wrlong	#0, local01
28ff8                 | ' 
28ff8                 | ' 	return res ;
28ff8     0C 4E 05 F1 | 	add	fp, #12
28ffc     A7 FA 01 FB | 	rdlong	result1, fp
29000     0C 4E 85 F1 | 	sub	fp, #12
29004                 | LR__4186
29004     A7 F0 03 F6 | 	mov	ptra, fp
29008     B2 00 A0 FD | 	call	#popregs_
2900c                 | _fatfs_cc_f_opendir_ret
2900c     2D 00 64 FD | 	ret
29010                 | 
29010                 | _fatfs_cc_f_closedir
29010     00 4A 05 F6 | 	mov	COUNT_, #0
29014     A8 00 A0 FD | 	call	#pushregs_
29018     10 F0 07 F1 | 	add	ptra, #16
2901c     04 4E 05 F1 | 	add	fp, #4
29020     A7 12 62 FC | 	wrlong	arg01, fp
29024     08 4E 05 F1 | 	add	fp, #8
29028     A7 14 02 F6 | 	mov	arg02, fp
2902c     0C 4E 85 F1 | 	sub	fp, #12
29030     C0 DD BF FD | 	call	#_fatfs_cc_validate
29034     08 4E 05 F1 | 	add	fp, #8
29038     A7 FA 61 FC | 	wrlong	result1, fp
2903c     08 4E 85 F1 | 	sub	fp, #8
29040     00 FA 0D F2 | 	cmp	result1, #0 wz
29044     04 4E 05 A1 |  if_e	add	fp, #4
29048     A7 FA 01 AB |  if_e	rdlong	result1, fp
2904c     04 4E 85 A1 |  if_e	sub	fp, #4
29050     FD 00 68 AC |  if_e	wrlong	#0, result1
29054                 | ' 
29054                 | ' 
29054                 | ' 
29054                 | ' 
29054                 | ' 		dp->obj.fs = 0;
29054                 | ' #line 4633 "ff.c"
29054                 | ' 	}
29054                 | ' 	return res;
29054     08 4E 05 F1 | 	add	fp, #8
29058     A7 FA 01 FB | 	rdlong	result1, fp
2905c     08 4E 85 F1 | 	sub	fp, #8
29060     A7 F0 03 F6 | 	mov	ptra, fp
29064     B2 00 A0 FD | 	call	#popregs_
29068                 | _fatfs_cc_f_closedir_ret
29068     2D 00 64 FD | 	ret
2906c                 | 
2906c                 | _fatfs_cc_f_readdir
2906c     00 4A 05 F6 | 	mov	COUNT_, #0
29070     A8 00 A0 FD | 	call	#pushregs_
29074     14 F0 07 F1 | 	add	ptra, #20
29078     04 4E 05 F1 | 	add	fp, #4
2907c     A7 12 62 FC | 	wrlong	arg01, fp
29080     04 4E 05 F1 | 	add	fp, #4
29084     A7 14 62 FC | 	wrlong	arg02, fp
29088     04 4E 85 F1 | 	sub	fp, #4
2908c     A7 12 02 FB | 	rdlong	arg01, fp
29090     0C 4E 05 F1 | 	add	fp, #12
29094     A7 14 02 F6 | 	mov	arg02, fp
29098     10 4E 85 F1 | 	sub	fp, #16
2909c     54 DD BF FD | 	call	#_fatfs_cc_validate
290a0     0C 4E 05 F1 | 	add	fp, #12
290a4     A7 FA 61 FC | 	wrlong	result1, fp
290a8     0C 4E 85 F1 | 	sub	fp, #12
290ac     00 FA 0D F2 | 	cmp	result1, #0 wz
290b0     BC 00 90 5D |  if_ne	jmp	#LR__4193
290b4     08 4E 05 F1 | 	add	fp, #8
290b8     A7 FA 09 FB | 	rdlong	result1, fp wz
290bc     08 4E 85 F1 | 	sub	fp, #8
290c0     24 00 90 5D |  if_ne	jmp	#LR__4190
290c4     04 4E 05 F1 | 	add	fp, #4
290c8     A7 12 02 FB | 	rdlong	arg01, fp
290cc     04 4E 85 F1 | 	sub	fp, #4
290d0     00 14 06 F6 | 	mov	arg02, #0
290d4     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
290d8     0C 4E 05 F1 | 	add	fp, #12
290dc     A7 FA 61 FC | 	wrlong	result1, fp
290e0     0C 4E 85 F1 | 	sub	fp, #12
290e4     88 00 90 FD | 	jmp	#LR__4192
290e8                 | LR__4190
290e8     04 4E 05 F1 | 	add	fp, #4
290ec     A7 12 02 FB | 	rdlong	arg01, fp
290f0     04 4E 85 F1 | 	sub	fp, #4
290f4     00 14 06 F6 | 	mov	arg02, #0
290f8     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
290fc     0C 4E 05 F1 | 	add	fp, #12
29100     A7 FA 61 FC | 	wrlong	result1, fp
29104     0C 4E 85 F1 | 	sub	fp, #12
29108     04 FA 0D F2 | 	cmp	result1, #4 wz
2910c     0C 4E 05 A1 |  if_e	add	fp, #12
29110     A7 00 68 AC |  if_e	wrlong	#0, fp
29114     0C 4E 85 A1 |  if_e	sub	fp, #12
29118     0C 4E 05 F1 | 	add	fp, #12
2911c     A7 FA 09 FB | 	rdlong	result1, fp wz
29120     0C 4E 85 F1 | 	sub	fp, #12
29124     48 00 90 5D |  if_ne	jmp	#LR__4191
29128     04 4E 05 F1 | 	add	fp, #4
2912c     A7 12 02 FB | 	rdlong	arg01, fp
29130     04 4E 05 F1 | 	add	fp, #4
29134     A7 14 02 FB | 	rdlong	arg02, fp
29138     08 4E 85 F1 | 	sub	fp, #8
2913c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
29140     04 4E 05 F1 | 	add	fp, #4
29144     A7 12 02 FB | 	rdlong	arg01, fp
29148     04 4E 85 F1 | 	sub	fp, #4
2914c     00 14 06 F6 | 	mov	arg02, #0
29150     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
29154     0C 4E 05 F1 | 	add	fp, #12
29158     A7 FA 61 FC | 	wrlong	result1, fp
2915c     0C 4E 85 F1 | 	sub	fp, #12
29160     04 FA 0D F2 | 	cmp	result1, #4 wz
29164     0C 4E 05 A1 |  if_e	add	fp, #12
29168     A7 00 68 AC |  if_e	wrlong	#0, fp
2916c     0C 4E 85 A1 |  if_e	sub	fp, #12
29170                 | LR__4191
29170                 | LR__4192
29170                 | LR__4193
29170                 | ' 			}
29170                 | ' 			;
29170                 | ' 		}
29170                 | ' 	}
29170                 | ' 	return res ;
29170     0C 4E 05 F1 | 	add	fp, #12
29174     A7 FA 01 FB | 	rdlong	result1, fp
29178     0C 4E 85 F1 | 	sub	fp, #12
2917c     A7 F0 03 F6 | 	mov	ptra, fp
29180     B2 00 A0 FD | 	call	#popregs_
29184                 | _fatfs_cc_f_readdir_ret
29184     2D 00 64 FD | 	ret
29188                 | 
29188                 | _fatfs_cc_f_stat
29188     00 4A 05 F6 | 	mov	COUNT_, #0
2918c     A8 00 A0 FD | 	call	#pushregs_
29190     40 F0 07 F1 | 	add	ptra, #64
29194     04 4E 05 F1 | 	add	fp, #4
29198     A7 12 62 FC | 	wrlong	arg01, fp
2919c     04 4E 05 F1 | 	add	fp, #4
291a0     A7 14 62 FC | 	wrlong	arg02, fp
291a4     04 4E 85 F1 | 	sub	fp, #4
291a8     A7 12 02 F6 | 	mov	arg01, fp
291ac     0C 4E 05 F1 | 	add	fp, #12
291b0     A7 14 02 F6 | 	mov	arg02, fp
291b4     10 4E 85 F1 | 	sub	fp, #16
291b8     00 16 06 F6 | 	mov	arg03, #0
291bc     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
291c0     0C 4E 05 F1 | 	add	fp, #12
291c4     A7 FA 61 FC | 	wrlong	result1, fp
291c8     0C 4E 85 F1 | 	sub	fp, #12
291cc     00 FA 0D F2 | 	cmp	result1, #0 wz
291d0     74 00 90 5D |  if_ne	jmp	#LR__4203
291d4     10 4E 05 F1 | 	add	fp, #16
291d8     A7 12 02 F6 | 	mov	arg01, fp
291dc     0C 4E 85 F1 | 	sub	fp, #12
291e0     A7 14 02 FB | 	rdlong	arg02, fp
291e4     04 4E 85 F1 | 	sub	fp, #4
291e8     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
291ec     0C 4E 05 F1 | 	add	fp, #12
291f0     A7 FA 61 FC | 	wrlong	result1, fp
291f4     0C 4E 85 F1 | 	sub	fp, #12
291f8     00 FA 0D F2 | 	cmp	result1, #0 wz
291fc     48 00 90 5D |  if_ne	jmp	#LR__4202
29200     3B 4E 05 F1 | 	add	fp, #59
29204     A7 FA C1 FA | 	rdbyte	result1, fp
29208     3B 4E 85 F1 | 	sub	fp, #59
2920c     80 FA CD F7 | 	test	result1, #128 wz
29210     0C 4E 05 51 |  if_ne	add	fp, #12
29214     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29218     0C 4E 85 51 |  if_ne	sub	fp, #12
2921c     28 00 90 5D |  if_ne	jmp	#LR__4201
29220     08 4E 05 F1 | 	add	fp, #8
29224     A7 FA 09 FB | 	rdlong	result1, fp wz
29228     08 4E 85 F1 | 	sub	fp, #8
2922c     18 00 90 AD |  if_e	jmp	#LR__4200
29230     10 4E 05 F1 | 	add	fp, #16
29234     A7 12 02 F6 | 	mov	arg01, fp
29238     08 4E 85 F1 | 	sub	fp, #8
2923c     A7 14 02 FB | 	rdlong	arg02, fp
29240     08 4E 85 F1 | 	sub	fp, #8
29244     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
29248                 | LR__4200
29248                 | LR__4201
29248                 | LR__4202
29248                 | LR__4203
29248                 | ' 			}
29248                 | ' 		}
29248                 | ' 		;
29248                 | ' 	}
29248                 | ' 
29248                 | ' 	return res ;
29248     0C 4E 05 F1 | 	add	fp, #12
2924c     A7 FA 01 FB | 	rdlong	result1, fp
29250     0C 4E 85 F1 | 	sub	fp, #12
29254     A7 F0 03 F6 | 	mov	ptra, fp
29258     B2 00 A0 FD | 	call	#popregs_
2925c                 | _fatfs_cc_f_stat_ret
2925c     2D 00 64 FD | 	ret
29260                 | 
29260                 | _fatfs_cc_f_unlink
29260     00 4A 05 F6 | 	mov	COUNT_, #0
29264     A8 00 A0 FD | 	call	#pushregs_
29268     74 F0 07 F1 | 	add	ptra, #116
2926c     04 4E 05 F1 | 	add	fp, #4
29270     A7 12 62 FC | 	wrlong	arg01, fp
29274     68 4E 05 F1 | 	add	fp, #104
29278     A7 00 68 FC | 	wrlong	#0, fp
2927c     68 4E 85 F1 | 	sub	fp, #104
29280     A7 12 02 F6 | 	mov	arg01, fp
29284     6C 4E 05 F1 | 	add	fp, #108
29288     A7 14 02 F6 | 	mov	arg02, fp
2928c     70 4E 85 F1 | 	sub	fp, #112
29290     02 16 06 F6 | 	mov	arg03, #2
29294     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
29298     08 4E 05 F1 | 	add	fp, #8
2929c     A7 FA 61 FC | 	wrlong	result1, fp
292a0     08 4E 85 F1 | 	sub	fp, #8
292a4     00 FA 0D F2 | 	cmp	result1, #0 wz
292a8     E4 01 90 5D |  if_ne	jmp	#LR__4218
292ac     70 4E 05 F1 | 	add	fp, #112
292b0     A7 16 02 FB | 	rdlong	arg03, fp
292b4     64 4E 85 F1 | 	sub	fp, #100
292b8     A7 16 62 FC | 	wrlong	arg03, fp
292bc     A7 12 02 F6 | 	mov	arg01, fp
292c0     08 4E 85 F1 | 	sub	fp, #8
292c4     A7 14 02 FB | 	rdlong	arg02, fp
292c8     04 4E 85 F1 | 	sub	fp, #4
292cc     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
292d0     08 4E 05 F1 | 	add	fp, #8
292d4     A7 FA 61 FC | 	wrlong	result1, fp
292d8     00 FA 4D F2 | 	cmps	result1, #0 wz
292dc     08 4E 85 F1 | 	sub	fp, #8
292e0     AC 01 90 5D |  if_ne	jmp	#LR__4217
292e4     37 4E 05 F1 | 	add	fp, #55
292e8     A7 FA C1 FA | 	rdbyte	result1, fp
292ec     37 4E 85 F1 | 	sub	fp, #55
292f0     80 FA CD F7 | 	test	result1, #128 wz
292f4     08 4E 05 51 |  if_ne	add	fp, #8
292f8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
292fc     08 4E 85 51 |  if_ne	sub	fp, #8
29300     1C 00 90 5D |  if_ne	jmp	#LR__4210
29304     12 4E 05 F1 | 	add	fp, #18
29308     A7 FA C1 FA | 	rdbyte	result1, fp
2930c     12 4E 85 F1 | 	sub	fp, #18
29310     01 FA CD F7 | 	test	result1, #1 wz
29314     08 4E 05 51 |  if_ne	add	fp, #8
29318     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2931c     08 4E 85 51 |  if_ne	sub	fp, #8
29320                 | LR__4210
29320     08 4E 05 F1 | 	add	fp, #8
29324     A7 FA 09 FB | 	rdlong	result1, fp wz
29328     08 4E 85 F1 | 	sub	fp, #8
2932c     C8 00 90 5D |  if_ne	jmp	#LR__4213
29330     70 4E 05 F1 | 	add	fp, #112
29334     A7 12 02 FB | 	rdlong	arg01, fp
29338     48 4E 85 F1 | 	sub	fp, #72
2933c     A7 14 02 FB | 	rdlong	arg02, fp
29340     28 4E 85 F1 | 	sub	fp, #40
29344     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
29348     6C 4E 05 F1 | 	add	fp, #108
2934c     A7 FA 61 FC | 	wrlong	result1, fp
29350     5A 4E 85 F1 | 	sub	fp, #90
29354     A7 FA C1 FA | 	rdbyte	result1, fp
29358     12 4E 85 F1 | 	sub	fp, #18
2935c     10 FA CD F7 | 	test	result1, #16 wz
29360     94 00 90 AD |  if_e	jmp	#LR__4212
29364     70 4E 05 F1 | 	add	fp, #112
29368     A7 FA 01 FB | 	rdlong	result1, fp
2936c     34 4E 85 F1 | 	sub	fp, #52
29370     A7 FA 61 FC | 	wrlong	result1, fp
29374     30 4E 05 F1 | 	add	fp, #48
29378     A7 16 02 FB | 	rdlong	arg03, fp
2937c     28 4E 85 F1 | 	sub	fp, #40
29380     A7 16 62 FC | 	wrlong	arg03, fp
29384     08 4E 85 F1 | 	sub	fp, #8
29388     A7 12 02 F6 | 	mov	arg01, fp
2938c     3C 4E 85 F1 | 	sub	fp, #60
29390     00 14 06 F6 | 	mov	arg02, #0
29394     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
29398     08 4E 05 F1 | 	add	fp, #8
2939c     A7 FA 61 FC | 	wrlong	result1, fp
293a0     08 4E 85 F1 | 	sub	fp, #8
293a4     00 FA 0D F2 | 	cmp	result1, #0 wz
293a8     4C 00 90 5D |  if_ne	jmp	#LR__4211
293ac     3C 4E 05 F1 | 	add	fp, #60
293b0     A7 12 02 F6 | 	mov	arg01, fp
293b4     3C 4E 85 F1 | 	sub	fp, #60
293b8     00 14 06 F6 | 	mov	arg02, #0
293bc     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
293c0     08 4E 05 F1 | 	add	fp, #8
293c4     A7 FA 61 FC | 	wrlong	result1, fp
293c8     00 FA 4D F2 | 	cmps	result1, #0 wz
293cc     08 4E 85 F1 | 	sub	fp, #8
293d0     08 4E 05 A1 |  if_e	add	fp, #8
293d4     A7 0E 68 AC |  if_e	wrlong	#7, fp
293d8     08 4E 85 A1 |  if_e	sub	fp, #8
293dc     08 4E 05 F1 | 	add	fp, #8
293e0     A7 FA 01 FB | 	rdlong	result1, fp
293e4     08 4E 85 F1 | 	sub	fp, #8
293e8     04 FA 0D F2 | 	cmp	result1, #4 wz
293ec     08 4E 05 A1 |  if_e	add	fp, #8
293f0     A7 00 68 AC |  if_e	wrlong	#0, fp
293f4     08 4E 85 A1 |  if_e	sub	fp, #8
293f8                 | LR__4211
293f8                 | LR__4212
293f8                 | LR__4213
293f8     08 4E 05 F1 | 	add	fp, #8
293fc     A7 FA 09 FB | 	rdlong	result1, fp wz
29400     08 4E 85 F1 | 	sub	fp, #8
29404     88 00 90 5D |  if_ne	jmp	#LR__4216
29408     0C 4E 05 F1 | 	add	fp, #12
2940c     A7 12 02 F6 | 	mov	arg01, fp
29410     0C 4E 85 F1 | 	sub	fp, #12
29414     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
29418     08 4E 05 F1 | 	add	fp, #8
2941c     A7 FA 61 FC | 	wrlong	result1, fp
29420     08 4E 85 F1 | 	sub	fp, #8
29424     00 FA 0D F2 | 	cmp	result1, #0 wz
29428     38 00 90 5D |  if_ne	jmp	#LR__4214
2942c     6C 4E 05 F1 | 	add	fp, #108
29430     A7 FA 09 FB | 	rdlong	result1, fp wz
29434     6C 4E 85 F1 | 	sub	fp, #108
29438     28 00 90 AD |  if_e	jmp	#LR__4214
2943c     0C 4E 05 F1 | 	add	fp, #12
29440     A7 12 02 F6 | 	mov	arg01, fp
29444     60 4E 05 F1 | 	add	fp, #96
29448     A7 14 02 FB | 	rdlong	arg02, fp
2944c     6C 4E 85 F1 | 	sub	fp, #108
29450     00 16 06 F6 | 	mov	arg03, #0
29454     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
29458     08 4E 05 F1 | 	add	fp, #8
2945c     A7 FA 61 FC | 	wrlong	result1, fp
29460     08 4E 85 F1 | 	sub	fp, #8
29464                 | LR__4214
29464     08 4E 05 F1 | 	add	fp, #8
29468     A7 FA 09 FB | 	rdlong	result1, fp wz
2946c     08 4E 85 F1 | 	sub	fp, #8
29470     1C 00 90 5D |  if_ne	jmp	#LR__4215
29474     70 4E 05 F1 | 	add	fp, #112
29478     A7 12 02 FB | 	rdlong	arg01, fp
2947c     70 4E 85 F1 | 	sub	fp, #112
29480     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
29484     08 4E 05 F1 | 	add	fp, #8
29488     A7 FA 61 FC | 	wrlong	result1, fp
2948c     08 4E 85 F1 | 	sub	fp, #8
29490                 | LR__4215
29490                 | LR__4216
29490                 | LR__4217
29490                 | LR__4218
29490                 | ' 			}
29490                 | ' 		}
29490                 | ' 		;
29490                 | ' 	}
29490                 | ' 
29490                 | ' 	return res ;
29490     08 4E 05 F1 | 	add	fp, #8
29494     A7 FA 01 FB | 	rdlong	result1, fp
29498     08 4E 85 F1 | 	sub	fp, #8
2949c     A7 F0 03 F6 | 	mov	ptra, fp
294a0     B2 00 A0 FD | 	call	#popregs_
294a4                 | _fatfs_cc_f_unlink_ret
294a4     2D 00 64 FD | 	ret
294a8                 | 
294a8                 | _fatfs_cc_f_mkdir
294a8     00 4A 05 F6 | 	mov	COUNT_, #0
294ac     A8 00 A0 FD | 	call	#pushregs_
294b0     5C F0 07 F1 | 	add	ptra, #92
294b4     04 4E 05 F1 | 	add	fp, #4
294b8     A7 12 62 FC | 	wrlong	arg01, fp
294bc     A7 12 02 F6 | 	mov	arg01, fp
294c0     48 4E 05 F1 | 	add	fp, #72
294c4     A7 14 02 F6 | 	mov	arg02, fp
294c8     4C 4E 85 F1 | 	sub	fp, #76
294cc     02 16 06 F6 | 	mov	arg03, #2
294d0     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
294d4     08 4E 05 F1 | 	add	fp, #8
294d8     A7 FA 61 FC | 	wrlong	result1, fp
294dc     08 4E 85 F1 | 	sub	fp, #8
294e0     00 FA 0D F2 | 	cmp	result1, #0 wz
294e4     C4 02 90 5D |  if_ne	jmp	#LR__4225
294e8     4C 4E 05 F1 | 	add	fp, #76
294ec     A7 16 02 FB | 	rdlong	arg03, fp
294f0     40 4E 85 F1 | 	sub	fp, #64
294f4     A7 16 62 FC | 	wrlong	arg03, fp
294f8     A7 12 02 F6 | 	mov	arg01, fp
294fc     08 4E 85 F1 | 	sub	fp, #8
29500     A7 14 02 FB | 	rdlong	arg02, fp
29504     04 4E 85 F1 | 	sub	fp, #4
29508     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2950c     08 4E 05 F1 | 	add	fp, #8
29510     A7 FA 61 FC | 	wrlong	result1, fp
29514     00 FA 4D F2 | 	cmps	result1, #0 wz
29518     08 4E 85 F1 | 	sub	fp, #8
2951c     08 4E 05 A1 |  if_e	add	fp, #8
29520     A7 10 68 AC |  if_e	wrlong	#8, fp
29524     08 4E 85 A1 |  if_e	sub	fp, #8
29528     08 4E 05 F1 | 	add	fp, #8
2952c     A7 FA 01 FB | 	rdlong	result1, fp
29530     08 4E 85 F1 | 	sub	fp, #8
29534     04 FA 0D F2 | 	cmp	result1, #4 wz
29538     70 02 90 5D |  if_ne	jmp	#LR__4224
2953c     4C 4E 05 F1 | 	add	fp, #76
29540     A7 16 02 FB | 	rdlong	arg03, fp
29544     10 4E 85 F1 | 	sub	fp, #16
29548     A7 16 62 FC | 	wrlong	arg03, fp
2954c     A7 12 02 F6 | 	mov	arg01, fp
29550     3C 4E 85 F1 | 	sub	fp, #60
29554     00 14 06 F6 | 	mov	arg02, #0
29558     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2955c     50 4E 05 F1 | 	add	fp, #80
29560     A7 FA 61 FC | 	wrlong	result1, fp
29564     48 4E 85 F1 | 	sub	fp, #72
29568     A7 00 68 FC | 	wrlong	#0, fp
2956c     48 4E 05 F1 | 	add	fp, #72
29570     A7 FA 09 FB | 	rdlong	result1, fp wz
29574     50 4E 85 F1 | 	sub	fp, #80
29578     08 4E 05 A1 |  if_e	add	fp, #8
2957c     A7 0E 68 AC |  if_e	wrlong	#7, fp
29580     08 4E 85 A1 |  if_e	sub	fp, #8
29584     50 4E 05 F1 | 	add	fp, #80
29588     A7 FA 01 FB | 	rdlong	result1, fp
2958c     50 4E 85 F1 | 	sub	fp, #80
29590     01 FA 0D F2 | 	cmp	result1, #1 wz
29594     08 4E 05 A1 |  if_e	add	fp, #8
29598     A7 04 68 AC |  if_e	wrlong	#2, fp
2959c     08 4E 85 A1 |  if_e	sub	fp, #8
295a0     50 4E 05 F1 | 	add	fp, #80
295a4     A7 16 02 FB | 	rdlong	arg03, fp
295a8     50 4E 85 F1 | 	sub	fp, #80
295ac     FF FF 7F FF 
295b0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
295b4     08 4E 05 A1 |  if_e	add	fp, #8
295b8     A7 02 68 AC |  if_e	wrlong	#1, fp
295bc     08 4E 85 A1 |  if_e	sub	fp, #8
295c0     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
295c4     58 4E 05 F1 | 	add	fp, #88
295c8     A7 FA 61 FC | 	wrlong	result1, fp
295cc     50 4E 85 F1 | 	sub	fp, #80
295d0     A7 FA 09 FB | 	rdlong	result1, fp wz
295d4     08 4E 85 F1 | 	sub	fp, #8
295d8     1C 01 90 5D |  if_ne	jmp	#LR__4221
295dc     4C 4E 05 F1 | 	add	fp, #76
295e0     A7 12 02 FB | 	rdlong	arg01, fp
295e4     04 4E 05 F1 | 	add	fp, #4
295e8     A7 14 02 FB | 	rdlong	arg02, fp
295ec     50 4E 85 F1 | 	sub	fp, #80
295f0     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
295f4     08 4E 05 F1 | 	add	fp, #8
295f8     A7 FA 61 FC | 	wrlong	result1, fp
295fc     00 FA 4D F2 | 	cmps	result1, #0 wz
29600     08 4E 85 F1 | 	sub	fp, #8
29604     F0 00 90 5D |  if_ne	jmp	#LR__4220
29608     4C 4E 05 F1 | 	add	fp, #76
2960c     A7 12 02 FB | 	rdlong	arg01, fp
29610     4C 4E 85 F1 | 	sub	fp, #76
29614     34 12 06 F1 | 	add	arg01, #52
29618     20 14 06 F6 | 	mov	arg02, #32
2961c     0B 16 06 F6 | 	mov	arg03, #11
29620     98 00 A0 FD | 	call	#\builtin_bytefill_
29624     4C 4E 05 F1 | 	add	fp, #76
29628     A7 FA 01 FB | 	rdlong	result1, fp
2962c     34 FA 05 F1 | 	add	result1, #52
29630     FD 5C 48 FC | 	wrbyte	#46, result1
29634     A7 16 02 FB | 	rdlong	arg03, fp
29638     3F 16 06 F1 | 	add	arg03, #63
2963c     0B 21 48 FC | 	wrbyte	#16, arg03
29640     A7 12 02 FB | 	rdlong	arg01, fp
29644     4A 12 06 F1 | 	add	arg01, #74
29648     0C 4E 05 F1 | 	add	fp, #12
2964c     A7 14 02 FB | 	rdlong	arg02, fp
29650     09 15 62 FC | 	wrlong	arg02, arg01
29654     0C 4E 85 F1 | 	sub	fp, #12
29658     A7 14 02 FB | 	rdlong	arg02, fp
2965c     0A 13 02 F6 | 	mov	arg01, arg02
29660     34 14 06 F1 | 	add	arg02, #52
29664     04 4E 05 F1 | 	add	fp, #4
29668     A7 16 02 FB | 	rdlong	arg03, fp
2966c     50 4E 85 F1 | 	sub	fp, #80
29670     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
29674     4C 4E 05 F1 | 	add	fp, #76
29678     A7 14 02 FB | 	rdlong	arg02, fp
2967c     0A 13 02 F6 | 	mov	arg01, arg02
29680     54 12 06 F1 | 	add	arg01, #84
29684     4C 4E 85 F1 | 	sub	fp, #76
29688     34 14 06 F1 | 	add	arg02, #52
2968c     20 16 06 F6 | 	mov	arg03, #32
29690     D8 2C BF FD | 	call	#__system____builtin_memmove
29694     4C 4E 05 F1 | 	add	fp, #76
29698     A7 16 02 FB | 	rdlong	arg03, fp
2969c     55 16 06 F1 | 	add	arg03, #85
296a0     0B 5D 48 FC | 	wrbyte	#46, arg03
296a4     38 4E 85 F1 | 	sub	fp, #56
296a8     A7 16 02 FB | 	rdlong	arg03, fp
296ac     40 4E 05 F1 | 	add	fp, #64
296b0     A7 16 62 FC | 	wrlong	arg03, fp
296b4     08 4E 85 F1 | 	sub	fp, #8
296b8     A7 14 02 FB | 	rdlong	arg02, fp
296bc     0A 13 02 F6 | 	mov	arg01, arg02
296c0     54 14 06 F1 | 	add	arg02, #84
296c4     4C 4E 85 F1 | 	sub	fp, #76
296c8     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
296cc     4C 4E 05 F1 | 	add	fp, #76
296d0     A7 16 02 FB | 	rdlong	arg03, fp
296d4     03 16 06 F1 | 	add	arg03, #3
296d8     0B 03 48 FC | 	wrbyte	#1, arg03
296dc     40 4E 85 F1 | 	sub	fp, #64
296e0     A7 12 02 F6 | 	mov	arg01, fp
296e4     0C 4E 85 F1 | 	sub	fp, #12
296e8     44 BA BF FD | 	call	#_fatfs_cc_dir_register
296ec     08 4E 05 F1 | 	add	fp, #8
296f0     A7 FA 61 FC | 	wrlong	result1, fp
296f4     08 4E 85 F1 | 	sub	fp, #8
296f8                 | LR__4220
296f8                 | LR__4221
296f8     08 4E 05 F1 | 	add	fp, #8
296fc     A7 FA 09 FB | 	rdlong	result1, fp wz
29700     08 4E 85 F1 | 	sub	fp, #8
29704     88 00 90 5D |  if_ne	jmp	#LR__4222
29708     28 4E 05 F1 | 	add	fp, #40
2970c     A7 12 02 FB | 	rdlong	arg01, fp
29710     16 12 06 F1 | 	add	arg01, #22
29714     30 4E 05 F1 | 	add	fp, #48
29718     A7 14 02 FB | 	rdlong	arg02, fp
2971c     09 15 62 FC | 	wrlong	arg02, arg01
29720     0C 4E 85 F1 | 	sub	fp, #12
29724     A7 12 02 FB | 	rdlong	arg01, fp
29728     24 4E 85 F1 | 	sub	fp, #36
2972c     A7 14 02 FB | 	rdlong	arg02, fp
29730     28 4E 05 F1 | 	add	fp, #40
29734     A7 16 02 FB | 	rdlong	arg03, fp
29738     50 4E 85 F1 | 	sub	fp, #80
2973c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
29740     28 4E 05 F1 | 	add	fp, #40
29744     A7 FA 01 FB | 	rdlong	result1, fp
29748     0B FA 05 F1 | 	add	result1, #11
2974c     FD 20 48 FC | 	wrbyte	#16, result1
29750     24 4E 05 F1 | 	add	fp, #36
29754     A7 FA 01 FB | 	rdlong	result1, fp
29758     03 FA 05 F1 | 	add	result1, #3
2975c     FD 02 48 FC | 	wrbyte	#1, result1
29760     44 4E 85 F1 | 	sub	fp, #68
29764     A7 FA 09 FB | 	rdlong	result1, fp wz
29768     08 4E 85 F1 | 	sub	fp, #8
2976c     3C 00 90 5D |  if_ne	jmp	#LR__4223
29770     4C 4E 05 F1 | 	add	fp, #76
29774     A7 12 02 FB | 	rdlong	arg01, fp
29778     4C 4E 85 F1 | 	sub	fp, #76
2977c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
29780     08 4E 05 F1 | 	add	fp, #8
29784     A7 FA 61 FC | 	wrlong	result1, fp
29788     08 4E 85 F1 | 	sub	fp, #8
2978c     1C 00 90 FD | 	jmp	#LR__4223
29790                 | LR__4222
29790     3C 4E 05 F1 | 	add	fp, #60
29794     A7 12 02 F6 | 	mov	arg01, fp
29798     14 4E 05 F1 | 	add	fp, #20
2979c     A7 14 02 FB | 	rdlong	arg02, fp
297a0     50 4E 85 F1 | 	sub	fp, #80
297a4     00 16 06 F6 | 	mov	arg03, #0
297a8     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
297ac                 | LR__4223
297ac                 | LR__4224
297ac                 | LR__4225
297ac                 | ' 				remove_chain(&sobj, dcl, 0);
297ac                 | ' 			}
297ac                 | ' 		}
297ac                 | ' 		;
297ac                 | ' 	}
297ac                 | ' 
297ac                 | ' 	return res ;
297ac     08 4E 05 F1 | 	add	fp, #8
297b0     A7 FA 01 FB | 	rdlong	result1, fp
297b4     08 4E 85 F1 | 	sub	fp, #8
297b8     A7 F0 03 F6 | 	mov	ptra, fp
297bc     B2 00 A0 FD | 	call	#popregs_
297c0                 | _fatfs_cc_f_mkdir_ret
297c0     2D 00 64 FD | 	ret
297c4                 | 
297c4                 | _fatfs_cc_f_rename
297c4     01 4A 05 F6 | 	mov	COUNT_, #1
297c8     A8 00 A0 FD | 	call	#pushregs_
297cc     9C F0 07 F1 | 	add	ptra, #156
297d0     04 4E 05 F1 | 	add	fp, #4
297d4     A7 12 62 FC | 	wrlong	arg01, fp
297d8     04 4E 05 F1 | 	add	fp, #4
297dc     A7 14 62 FC | 	wrlong	arg02, fp
297e0     A7 12 02 F6 | 	mov	arg01, fp
297e4     08 4E 85 F1 | 	sub	fp, #8
297e8     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
297ec     04 4E 05 F1 | 	add	fp, #4
297f0     A7 12 02 F6 | 	mov	arg01, fp
297f4     6C 4E 05 F1 | 	add	fp, #108
297f8     A7 14 02 F6 | 	mov	arg02, fp
297fc     70 4E 85 F1 | 	sub	fp, #112
29800     02 16 06 F6 | 	mov	arg03, #2
29804     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
29808     0C 4E 05 F1 | 	add	fp, #12
2980c     A7 FA 61 FC | 	wrlong	result1, fp
29810     0C 4E 85 F1 | 	sub	fp, #12
29814     00 FA 0D F2 | 	cmp	result1, #0 wz
29818     44 03 90 5D |  if_ne	jmp	#LR__4243
2981c     70 4E 05 F1 | 	add	fp, #112
29820     A7 16 02 FB | 	rdlong	arg03, fp
29824     60 4E 85 F1 | 	sub	fp, #96
29828     A7 16 62 FC | 	wrlong	arg03, fp
2982c     A7 12 02 F6 | 	mov	arg01, fp
29830     0C 4E 85 F1 | 	sub	fp, #12
29834     A7 14 02 FB | 	rdlong	arg02, fp
29838     04 4E 85 F1 | 	sub	fp, #4
2983c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
29840     0C 4E 05 F1 | 	add	fp, #12
29844     A7 FA 61 FC | 	wrlong	result1, fp
29848     00 FA 4D F2 | 	cmps	result1, #0 wz
2984c     0C 4E 85 F1 | 	sub	fp, #12
29850     1C 00 90 5D |  if_ne	jmp	#LR__4230
29854     3B 4E 05 F1 | 	add	fp, #59
29858     A7 FA C1 FA | 	rdbyte	result1, fp
2985c     3B 4E 85 F1 | 	sub	fp, #59
29860     A0 FA CD F7 | 	test	result1, #160 wz
29864     0C 4E 05 51 |  if_ne	add	fp, #12
29868     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2986c     0C 4E 85 51 |  if_ne	sub	fp, #12
29870                 | LR__4230
29870     0C 4E 05 F1 | 	add	fp, #12
29874     A7 1E 0A FB | 	rdlong	local01, fp wz
29878     0C 4E 85 F1 | 	sub	fp, #12
2987c     E0 02 90 5D |  if_ne	jmp	#LR__4242
29880     74 4E 05 F1 | 	add	fp, #116
29884     A7 12 02 F6 | 	mov	arg01, fp
29888     48 4E 85 F1 | 	sub	fp, #72
2988c     A7 14 02 FB | 	rdlong	arg02, fp
29890     2C 4E 85 F1 | 	sub	fp, #44
29894     20 16 06 F6 | 	mov	arg03, #32
29898     D0 2A BF FD | 	call	#__system____builtin_memmove
2989c     40 4E 05 F1 | 	add	fp, #64
298a0     A7 12 02 F6 | 	mov	arg01, fp
298a4     30 4E 85 F1 | 	sub	fp, #48
298a8     A7 14 02 F6 | 	mov	arg02, fp
298ac     10 4E 85 F1 | 	sub	fp, #16
298b0     30 16 06 F6 | 	mov	arg03, #48
298b4     B4 2A BF FD | 	call	#__system____builtin_memmove
298b8     40 4E 05 F1 | 	add	fp, #64
298bc     A7 12 02 F6 | 	mov	arg01, fp
298c0     38 4E 85 F1 | 	sub	fp, #56
298c4     A7 14 02 FB | 	rdlong	arg02, fp
298c8     08 4E 85 F1 | 	sub	fp, #8
298cc     34 CA BF FD | 	call	#_fatfs_cc_follow_path
298d0     0C 4E 05 F1 | 	add	fp, #12
298d4     A7 FA 61 FC | 	wrlong	result1, fp
298d8     0C 4E 85 F1 | 	sub	fp, #12
298dc     00 FA 0D F2 | 	cmp	result1, #0 wz
298e0     4C 00 90 5D |  if_ne	jmp	#LR__4233
298e4     48 4E 05 F1 | 	add	fp, #72
298e8     A7 FA 01 FB | 	rdlong	result1, fp
298ec     30 4E 85 F1 | 	sub	fp, #48
298f0     A7 16 02 FB | 	rdlong	arg03, fp
298f4     18 4E 85 F1 | 	sub	fp, #24
298f8     0B FB 09 F2 | 	cmp	result1, arg03 wz
298fc     20 00 90 5D |  if_ne	jmp	#LR__4231
29900     50 4E 05 F1 | 	add	fp, #80
29904     A7 FA 01 FB | 	rdlong	result1, fp
29908     30 4E 85 F1 | 	sub	fp, #48
2990c     A7 16 02 FB | 	rdlong	arg03, fp
29910     20 4E 85 F1 | 	sub	fp, #32
29914     0B FB 09 F2 | 	cmp	result1, arg03 wz
29918     04 1E 06 A6 |  if_e	mov	local01, #4
2991c     04 00 90 AD |  if_e	jmp	#LR__4232
29920                 | LR__4231
29920     08 1E 06 F6 | 	mov	local01, #8
29924                 | LR__4232
29924     0C 4E 05 F1 | 	add	fp, #12
29928     A7 1E 62 FC | 	wrlong	local01, fp
2992c     0C 4E 85 F1 | 	sub	fp, #12
29930                 | LR__4233
29930     0C 4E 05 F1 | 	add	fp, #12
29934     A7 1E 02 FB | 	rdlong	local01, fp
29938     0C 4E 85 F1 | 	sub	fp, #12
2993c     04 1E 0E F2 | 	cmp	local01, #4 wz
29940     CC 01 90 5D |  if_ne	jmp	#LR__4239
29944     40 4E 05 F1 | 	add	fp, #64
29948     A7 12 02 F6 | 	mov	arg01, fp
2994c     40 4E 85 F1 | 	sub	fp, #64
29950     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
29954     0C 4E 05 F1 | 	add	fp, #12
29958     A7 FA 61 FC | 	wrlong	result1, fp
2995c     0C 4E 85 F1 | 	sub	fp, #12
29960     00 FA 0D F2 | 	cmp	result1, #0 wz
29964     A8 01 90 5D |  if_ne	jmp	#LR__4238
29968     5C 4E 05 F1 | 	add	fp, #92
2996c     A7 12 02 FB | 	rdlong	arg01, fp
29970     38 4E 05 F1 | 	add	fp, #56
29974     A7 12 62 FC | 	wrlong	arg01, fp
29978     0D 12 06 F1 | 	add	arg01, #13
2997c     20 4E 85 F1 | 	sub	fp, #32
29980     A7 14 02 F6 | 	mov	arg02, fp
29984     74 4E 85 F1 | 	sub	fp, #116
29988     0D 14 06 F1 | 	add	arg02, #13
2998c     13 16 06 F6 | 	mov	arg03, #19
29990     D8 29 BF FD | 	call	#__system____builtin_memmove
29994     94 4E 05 F1 | 	add	fp, #148
29998     A7 1E 02 FB | 	rdlong	local01, fp
2999c     15 4E 85 F1 | 	sub	fp, #21
299a0     A7 FA C1 FA | 	rdbyte	result1, fp
299a4     0B 1E 06 F1 | 	add	local01, #11
299a8     0F FB 41 FC | 	wrbyte	result1, local01
299ac     15 4E 05 F1 | 	add	fp, #21
299b0     A7 1E 02 FB | 	rdlong	local01, fp
299b4     94 4E 85 F1 | 	sub	fp, #148
299b8     0B 1E 06 F1 | 	add	local01, #11
299bc     0F 1F C2 FA | 	rdbyte	local01, local01
299c0     10 1E CE F7 | 	test	local01, #16 wz
299c4     24 00 90 5D |  if_ne	jmp	#LR__4234
299c8     94 4E 05 F1 | 	add	fp, #148
299cc     A7 FA 01 FB | 	rdlong	result1, fp
299d0     FD 1E 02 F6 | 	mov	local01, result1
299d4     94 4E 85 F1 | 	sub	fp, #148
299d8     0B FA 05 F1 | 	add	result1, #11
299dc     FD FA C1 FA | 	rdbyte	result1, result1
299e0     20 FA 45 F5 | 	or	result1, #32
299e4     0B 1E 06 F1 | 	add	local01, #11
299e8     0F FB 41 FC | 	wrbyte	result1, local01
299ec                 | LR__4234
299ec     70 4E 05 F1 | 	add	fp, #112
299f0     A7 1E 02 FB | 	rdlong	local01, fp
299f4     03 1E 06 F1 | 	add	local01, #3
299f8     0F 03 48 FC | 	wrbyte	#1, local01
299fc     24 4E 05 F1 | 	add	fp, #36
29a00     A7 1E 02 FB | 	rdlong	local01, fp
29a04     94 4E 85 F1 | 	sub	fp, #148
29a08     0B 1E 06 F1 | 	add	local01, #11
29a0c     0F 1F C2 FA | 	rdbyte	local01, local01
29a10     10 1E CE F7 | 	test	local01, #16 wz
29a14     F8 00 90 AD |  if_e	jmp	#LR__4237
29a18     18 4E 05 F1 | 	add	fp, #24
29a1c     A7 16 02 FB | 	rdlong	arg03, fp
29a20     30 4E 05 F1 | 	add	fp, #48
29a24     A7 1E 02 FB | 	rdlong	local01, fp
29a28     48 4E 85 F1 | 	sub	fp, #72
29a2c     0F 17 0A F2 | 	cmp	arg03, local01 wz
29a30     DC 00 90 AD |  if_e	jmp	#LR__4237
29a34     70 4E 05 F1 | 	add	fp, #112
29a38     A7 12 02 FB | 	rdlong	arg01, fp
29a3c     09 1F 02 F6 | 	mov	local01, arg01
29a40     24 4E 05 F1 | 	add	fp, #36
29a44     A7 14 02 FB | 	rdlong	arg02, fp
29a48     94 4E 85 F1 | 	sub	fp, #148
29a4c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
29a50     FD 14 02 F6 | 	mov	arg02, result1
29a54     0F 13 02 F6 | 	mov	arg01, local01
29a58     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
29a5c     98 4E 05 F1 | 	add	fp, #152
29a60     A7 FA 61 FC | 	wrlong	result1, fp
29a64     00 FA 4D F2 | 	cmps	result1, #0 wz
29a68     98 4E 85 F1 | 	sub	fp, #152
29a6c     0C 4E 05 A1 |  if_e	add	fp, #12
29a70     A7 04 68 AC |  if_e	wrlong	#2, fp
29a74     0C 4E 85 A1 |  if_e	sub	fp, #12
29a78     94 00 90 AD |  if_e	jmp	#LR__4236
29a7c     70 4E 05 F1 | 	add	fp, #112
29a80     A7 12 02 FB | 	rdlong	arg01, fp
29a84     28 4E 05 F1 | 	add	fp, #40
29a88     A7 14 02 FB | 	rdlong	arg02, fp
29a8c     98 4E 85 F1 | 	sub	fp, #152
29a90     4C A0 BF FD | 	call	#_fatfs_cc_move_window
29a94     0C 4E 05 F1 | 	add	fp, #12
29a98     A7 FA 61 FC | 	wrlong	result1, fp
29a9c     64 4E 05 F1 | 	add	fp, #100
29aa0     A7 1E 02 FB | 	rdlong	local01, fp
29aa4     54 1E 06 F1 | 	add	local01, #84
29aa8     24 4E 05 F1 | 	add	fp, #36
29aac     A7 1E 62 FC | 	wrlong	local01, fp
29ab0     88 4E 85 F1 | 	sub	fp, #136
29ab4     A7 1E 0A FB | 	rdlong	local01, fp wz
29ab8     0C 4E 85 F1 | 	sub	fp, #12
29abc     50 00 90 5D |  if_ne	jmp	#LR__4235
29ac0     94 4E 05 F1 | 	add	fp, #148
29ac4     A7 1E 02 FB | 	rdlong	local01, fp
29ac8     94 4E 85 F1 | 	sub	fp, #148
29acc     01 1E 06 F1 | 	add	local01, #1
29ad0     0F 1F C2 FA | 	rdbyte	local01, local01
29ad4     2E 1E 0E F2 | 	cmp	local01, #46 wz
29ad8     34 00 90 5D |  if_ne	jmp	#LR__4235
29adc     70 4E 05 F1 | 	add	fp, #112
29ae0     A7 12 02 FB | 	rdlong	arg01, fp
29ae4     24 4E 05 F1 | 	add	fp, #36
29ae8     A7 14 02 FB | 	rdlong	arg02, fp
29aec     4C 4E 85 F1 | 	sub	fp, #76
29af0     A7 16 02 FB | 	rdlong	arg03, fp
29af4     48 4E 85 F1 | 	sub	fp, #72
29af8     50 AD BF FD | 	call	#_fatfs_cc_st_clust
29afc     70 4E 05 F1 | 	add	fp, #112
29b00     A7 1E 02 FB | 	rdlong	local01, fp
29b04     70 4E 85 F1 | 	sub	fp, #112
29b08     03 1E 06 F1 | 	add	local01, #3
29b0c     0F 03 48 FC | 	wrbyte	#1, local01
29b10                 | LR__4235
29b10                 | LR__4236
29b10                 | LR__4237
29b10                 | LR__4238
29b10                 | LR__4239
29b10     0C 4E 05 F1 | 	add	fp, #12
29b14     A7 1E 0A FB | 	rdlong	local01, fp wz
29b18     0C 4E 85 F1 | 	sub	fp, #12
29b1c     40 00 90 5D |  if_ne	jmp	#LR__4241
29b20     10 4E 05 F1 | 	add	fp, #16
29b24     A7 12 02 F6 | 	mov	arg01, fp
29b28     10 4E 85 F1 | 	sub	fp, #16
29b2c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
29b30     0C 4E 05 F1 | 	add	fp, #12
29b34     A7 FA 61 FC | 	wrlong	result1, fp
29b38     0C 4E 85 F1 | 	sub	fp, #12
29b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
29b40     1C 00 90 5D |  if_ne	jmp	#LR__4240
29b44     70 4E 05 F1 | 	add	fp, #112
29b48     A7 12 02 FB | 	rdlong	arg01, fp
29b4c     70 4E 85 F1 | 	sub	fp, #112
29b50     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
29b54     0C 4E 05 F1 | 	add	fp, #12
29b58     A7 FA 61 FC | 	wrlong	result1, fp
29b5c     0C 4E 85 F1 | 	sub	fp, #12
29b60                 | LR__4240
29b60                 | LR__4241
29b60                 | LR__4242
29b60                 | LR__4243
29b60                 | ' 					res = sync_fs(fs);
29b60                 | ' 				}
29b60                 | ' 			}
29b60                 | ' 
29b60                 | ' 		}
29b60                 | ' 		;
29b60                 | ' 	}
29b60                 | ' 
29b60                 | ' 	return res ;
29b60     0C 4E 05 F1 | 	add	fp, #12
29b64     A7 FA 01 FB | 	rdlong	result1, fp
29b68     0C 4E 85 F1 | 	sub	fp, #12
29b6c     A7 F0 03 F6 | 	mov	ptra, fp
29b70     B2 00 A0 FD | 	call	#popregs_
29b74                 | _fatfs_cc_f_rename_ret
29b74     2D 00 64 FD | 	ret
29b78                 | 
29b78                 | _fatfs_cc_time
29b78     00 4A 05 F6 | 	mov	COUNT_, #0
29b7c     A8 00 A0 FD | 	call	#pushregs_
29b80     14 F0 07 F1 | 	add	ptra, #20
29b84     04 4E 05 F1 | 	add	fp, #4
29b88     A7 12 62 FC | 	wrlong	arg01, fp
29b8c     04 4E 05 F1 | 	add	fp, #4
29b90     A7 12 02 F6 | 	mov	arg01, fp
29b94     08 4E 85 F1 | 	sub	fp, #8
29b98     00 14 06 F6 | 	mov	arg02, #0
29b9c     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
29ba0     08 4E 05 F1 | 	add	fp, #8
29ba4     A7 FA 01 FB | 	rdlong	result1, fp
29ba8     08 4E 05 F1 | 	add	fp, #8
29bac     A7 FA 61 FC | 	wrlong	result1, fp
29bb0     0C 4E 85 F1 | 	sub	fp, #12
29bb4     A7 FA 09 FB | 	rdlong	result1, fp wz
29bb8     04 4E 85 F1 | 	sub	fp, #4
29bbc     18 00 90 AD |  if_e	jmp	#LR__4250
29bc0     04 4E 05 F1 | 	add	fp, #4
29bc4     A7 FA 01 FB | 	rdlong	result1, fp
29bc8     0C 4E 05 F1 | 	add	fp, #12
29bcc     A7 14 02 FB | 	rdlong	arg02, fp
29bd0     10 4E 85 F1 | 	sub	fp, #16
29bd4     FD 14 62 FC | 	wrlong	arg02, result1
29bd8                 | LR__4250
29bd8                 | '         *tp = now;
29bd8                 | '     return now;
29bd8     10 4E 05 F1 | 	add	fp, #16
29bdc     A7 FA 01 FB | 	rdlong	result1, fp
29be0     10 4E 85 F1 | 	sub	fp, #16
29be4     A7 F0 03 F6 | 	mov	ptra, fp
29be8     B2 00 A0 FD | 	call	#popregs_
29bec                 | _fatfs_cc_time_ret
29bec     2D 00 64 FD | 	ret
29bf0                 | 
29bf0                 | _fatfs_cc_mktime
29bf0     06 4A 05 F6 | 	mov	COUNT_, #6
29bf4     A8 00 A0 FD | 	call	#pushregs_
29bf8     09 1F 02 F6 | 	mov	local01, arg01
29bfc     14 1E 06 F1 | 	add	local01, #20
29c00     0F 13 02 FB | 	rdlong	arg01, local01
29c04     14 1E 86 F1 | 	sub	local01, #20
29c08     46 12 56 F2 | 	cmps	arg01, #70 wc
29c0c                 | '                 return (time_t) -1;
29c0c     01 FA 65 C6 |  if_b	neg	result1, #1
29c10     7C 01 90 CD |  if_b	jmp	#LR__4264
29c14     03 00 00 FF 
29c18     6C 21 06 F6 | 	mov	local02, ##1900
29c1c     14 1E 06 F1 | 	add	local01, #20
29c20     0F FB 01 FB | 	rdlong	result1, local01
29c24     FD 20 02 F1 | 	add	local02, result1
29c28     08 1E 86 F1 | 	sub	local01, #8
29c2c     0F 23 02 FB | 	rdlong	local03, local01
29c30     01 22 86 F1 | 	sub	local03, #1
29c34     04 1E 06 F1 | 	add	local01, #4
29c38     0F 13 02 FB | 	rdlong	arg01, local01
29c3c     10 1E 86 F1 | 	sub	local01, #16
29c40     02 12 66 F0 | 	shl	arg01, #2
29c44     02 00 00 FF 
29c48     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
29c4c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29c50     09 FB 01 FB | 	rdlong	result1, arg01
29c54     FD 22 02 F1 | 	add	local03, result1
29c58     10 13 02 F6 | 	mov	arg01, local02
29c5c     02 00 00 FF 
29c60     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
29c64     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
29c68     00 FA 0D F2 | 	cmp	result1, #0 wz
29c6c     1C 00 90 AD |  if_e	jmp	#LR__4260
29c70     00 24 06 F6 | 	mov	local04, #0
29c74     10 1E 06 F1 | 	add	local01, #16
29c78     0F FB 01 FB | 	rdlong	result1, local01
29c7c     10 1E 86 F1 | 	sub	local01, #16
29c80     02 FA 55 F2 | 	cmps	result1, #2 wc
29c84     01 24 06 36 |  if_ae	mov	local04, #1
29c88     04 00 90 FD | 	jmp	#LR__4261
29c8c                 | LR__4260
29c8c     00 24 06 F6 | 	mov	local04, #0
29c90                 | LR__4261
29c90     04 1E 06 F1 | 	add	local01, #4
29c94     0F FB 01 FB | 	rdlong	result1, local01
29c98     04 1E 86 F1 | 	sub	local01, #4
29c9c     0F 27 02 FB | 	rdlong	local05, local01
29ca0     08 1E 06 F1 | 	add	local01, #8
29ca4     0F 13 02 FB | 	rdlong	arg01, local01
29ca8     07 00 00 FF 
29cac     10 12 06 FD | 	qmul	arg01, ##3600
29cb0     12 23 02 F1 | 	add	local03, local04
29cb4     FD 24 02 F6 | 	mov	local04, result1
29cb8     04 24 66 F0 | 	shl	local04, #4
29cbc     FD 24 82 F1 | 	sub	local04, result1
29cc0     02 24 66 F0 | 	shl	local04, #2
29cc4     12 27 02 F1 | 	add	local05, local04
29cc8     08 1E 86 F1 | 	sub	local01, #8
29ccc     18 24 62 FD | 	getqx	local04
29cd0     A8 00 00 FF 
29cd4     80 23 06 FD | 	qmul	local03, ##86400
29cd8     12 27 02 F1 | 	add	local05, local04
29cdc     10 23 02 F6 | 	mov	local03, local02
29ce0     03 00 00 FF 
29ce4     B2 23 86 F1 | 	sub	local03, ##1970
29ce8     18 24 62 FD | 	getqx	local04
29cec     99 F0 00 FF 
29cf0     80 23 06 FD | 	qmul	local03, ##31536000
29cf4     12 27 02 F1 | 	add	local05, local04
29cf8     10 23 02 F6 | 	mov	local03, local02
29cfc     03 00 00 FF 
29d00     B1 23 86 F1 | 	sub	local03, ##1969
29d04     11 29 52 F6 | 	abs	local06, local03 wc
29d08     02 28 46 F0 | 	shr	local06, #2
29d0c     14 29 82 F6 | 	negc	local06, local06
29d10     03 00 00 FF 
29d14     D1 21 56 F2 | 	cmps	local02, ##2001 wc
29d18     18 24 62 FD | 	getqx	local04
29d1c     12 27 02 F1 | 	add	local05, local04
29d20     18 00 90 CD |  if_b	jmp	#LR__4262
29d24     03 00 00 FF 
29d28     D0 21 86 F1 | 	sub	local02, ##2000
29d2c     10 25 52 F6 | 	abs	local04, local02 wc
29d30     64 24 16 FD | 	qdiv	local04, #100
29d34     18 24 62 FD | 	getqx	local04
29d38     12 29 A2 F3 | 	sumnc	local06, local04
29d3c                 | LR__4262
29d3c     A8 00 00 FF 
29d40     80 29 06 FD | 	qmul	local06, ##86400
29d44     18 28 62 FD | 	getqx	local06
29d48     14 27 02 F1 | 	add	local05, local06
29d4c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
29d50     02 00 00 FF 
29d54     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
29d58     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
29d5c     14 27 02 F1 | 	add	local05, local06
29d60     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
29d64     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
29d68     02 00 00 FF 
29d6c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
29d70     01 22 0E F2 | 	cmp	local03, #1 wz
29d74     14 00 90 5D |  if_ne	jmp	#LR__4263
29d78     0F 13 02 F6 | 	mov	arg01, local01
29d7c     DC 19 B0 FD | 	call	#_fatfs_cc___indst
29d80     00 FA 0D F2 | 	cmp	result1, #0 wz
29d84     07 00 00 5F 
29d88     10 26 86 51 |  if_ne	sub	local05, ##3600
29d8c                 | LR__4263
29d8c                 | '                 s -=  (3600L) ;
29d8c                 | ' 
29d8c                 | '         return s;
29d8c     13 FB 01 F6 | 	mov	result1, local05
29d90                 | LR__4264
29d90     A7 F0 03 F6 | 	mov	ptra, fp
29d94     B2 00 A0 FD | 	call	#popregs_
29d98                 | _fatfs_cc_mktime_ret
29d98     2D 00 64 FD | 	ret
29d9c                 | 
29d9c                 | _fatfs_cc__gmtime_r
29d9c     03 4A 05 F6 | 	mov	COUNT_, #3
29da0     A8 00 A0 FD | 	call	#pushregs_
29da4     09 1F 02 FB | 	rdlong	local01, arg01
29da8     A8 00 00 FF 
29dac     80 1F 16 FD | 	qdiv	local01, ##86400
29db0     18 FA 61 FD | 	getqx	result1
29db4     04 FA 05 F1 | 	add	result1, #4
29db8     07 FA 15 FD | 	qdiv	result1, #7
29dbc     18 14 06 F1 | 	add	arg02, #24
29dc0     D1 7F 27 FF 
29dc4     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
29dc8     D1 7F 27 3F 
29dcc     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
29dd0     03 00 00 3F 
29dd4     DC 21 06 36 |  if_ae	mov	local02, ##2012
29dd8     03 00 00 CF 
29ddc     B2 21 06 C6 |  if_b	mov	local02, ##1970
29de0                 | ' 	  year = 1970;
29de0                 | ' 	}
29de0                 | ' 
29de0                 | ' 	for(;;) {
29de0     19 FA 61 FD | 	getqy	result1
29de4     0A FB 61 FC | 	wrlong	result1, arg02
29de8     18 14 86 F1 | 	sub	arg02, #24
29dec                 | LR__4270
29dec     10 13 02 F6 | 	mov	arg01, local02
29df0     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
29df4     00 FA 0D F2 | 	cmp	result1, #0 wz
29df8     42 F1 00 5F 
29dfc     00 23 06 56 |  if_ne	mov	local03, ##31622400
29e00     99 F0 00 AF 
29e04     80 23 06 A6 |  if_e	mov	local03, ##31536000
29e08     11 1F 12 F2 | 	cmp	local01, local03 wc
29e0c                 | ' 	    break;
29e0c     01 20 06 31 |  if_ae	add	local02, #1
29e10     11 1F 82 31 |  if_ae	sub	local01, local03
29e14     D4 FF 9F 3D |  if_ae	jmp	#LR__4270
29e18     A8 00 00 FF 
29e1c     80 1F 16 FD | 	qdiv	local01, ##86400
29e20     10 23 02 F6 | 	mov	local03, local02
29e24     03 00 00 FF 
29e28     6C 23 86 F1 | 	sub	local03, ##1900
29e2c     14 14 06 F1 | 	add	arg02, #20
29e30     0A 23 62 FC | 	wrlong	local03, arg02
29e34     08 14 06 F1 | 	add	arg02, #8
29e38     10 13 02 F6 | 	mov	arg01, local02
29e3c     18 20 62 FD | 	getqx	local02
29e40     0A 21 62 FC | 	wrlong	local02, arg02
29e44     1C 14 86 F1 | 	sub	arg02, #28
29e48     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
29e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
29e50     1D 22 06 56 |  if_ne	mov	local03, #29
29e54     1C 22 06 A6 |  if_e	mov	local03, #28
29e58     02 00 00 FF 
29e5c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
29e60     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
29e64     02 00 00 FF 
29e68     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
29e6c                 | ' 
29e6c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
29e6c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
29e6c     00 12 06 F6 | 	mov	arg01, #0
29e70     97 2A 48 FB | 	callpa	#(@LR__4272-@LR__4271)>>2,fcache_load_ptr_
29e74                 | LR__4271
29e74     09 23 02 F6 | 	mov	local03, arg01
29e78     02 22 66 F0 | 	shl	local03, #2
29e7c     02 00 00 FF 
29e80     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
29e84     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
29e88     11 23 02 FB | 	rdlong	local03, local03
29e8c     11 21 52 F2 | 	cmps	local02, local03 wc
29e90     02 00 00 FF 
29e94     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
29e98     2C 00 90 CD |  if_b	jmp	#LR__4273
29e9c     09 23 02 F6 | 	mov	local03, arg01
29ea0     02 22 66 F0 | 	shl	local03, #2
29ea4     02 00 00 FF 
29ea8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
29eac     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
29eb0     11 23 02 FB | 	rdlong	local03, local03
29eb4     11 21 82 F1 | 	sub	local02, local03
29eb8     01 12 06 F1 | 	add	arg01, #1
29ebc     02 00 00 FF 
29ec0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
29ec4     AC FF 9F FD | 	jmp	#LR__4271
29ec8                 | LR__4272
29ec8                 | LR__4273
29ec8     A8 00 00 FF 
29ecc     80 1F 16 FD | 	qdiv	local01, ##86400
29ed0     10 14 06 F1 | 	add	arg02, #16
29ed4     0A 13 62 FC | 	wrlong	arg01, arg02
29ed8     01 20 06 F1 | 	add	local02, #1
29edc     04 14 86 F1 | 	sub	arg02, #4
29ee0     0A 21 62 FC | 	wrlong	local02, arg02
29ee4     19 1E 62 FD | 	getqy	local01
29ee8     07 00 00 FF 
29eec     10 1E 16 FD | 	qdiv	local01, ##3600
29ef0     18 22 62 FD | 	getqx	local03
29ef4     07 00 00 FF 
29ef8     10 1E 16 FD | 	qdiv	local01, ##3600
29efc     04 14 86 F1 | 	sub	arg02, #4
29f00     0A 23 62 FC | 	wrlong	local03, arg02
29f04     19 1E 62 FD | 	getqy	local01
29f08     3C 1E 16 FD | 	qdiv	local01, #60
29f0c     18 22 62 FD | 	getqx	local03
29f10     3C 1E 16 FD | 	qdiv	local01, #60
29f14     04 14 86 F1 | 	sub	arg02, #4
29f18     0A 23 62 FC | 	wrlong	local03, arg02
29f1c     04 14 86 F1 | 	sub	arg02, #4
29f20                 | '         stm->tm_isdst = 0;
29f20                 | ' 
29f20                 | ' ;
29f20                 | '         return stm;
29f20     0A FB 01 F6 | 	mov	result1, arg02
29f24     19 22 62 FD | 	getqy	local03
29f28     0A 23 62 FC | 	wrlong	local03, arg02
29f2c     20 14 06 F1 | 	add	arg02, #32
29f30     0A 01 68 FC | 	wrlong	#0, arg02
29f34     A7 F0 03 F6 | 	mov	ptra, fp
29f38     B2 00 A0 FD | 	call	#popregs_
29f3c                 | _fatfs_cc__gmtime_r_ret
29f3c     2D 00 64 FD | 	ret
29f40                 | 
29f40                 | _fatfs_cc__tzset
29f40     5D 01 00 FF 
29f44     85 12 06 F6 | 	mov	arg01, ##@LR__4585
29f48     34 00 B0 FD | 	call	#_fatfs_cc_getenv
29f4c     FD 12 02 F6 | 	mov	arg01, result1
29f50     02 00 00 FF 
29f54     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
29f58     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
29f5c     02 00 00 FF 
29f60     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
29f64     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
29f68     02 00 00 FF 
29f6c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
29f70     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
29f74     02 00 00 FF 
29f78     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
29f7c                 | _fatfs_cc__tzset_ret
29f7c     2D 00 64 FD | 	ret
29f80                 | 
29f80                 | _fatfs_cc_getenv
29f80     06 4A 05 F6 | 	mov	COUNT_, #6
29f84     A8 00 A0 FD | 	call	#pushregs_
29f88     09 1F 02 F6 | 	mov	local01, arg01
29f8c     09 21 02 F6 | 	mov	local02, arg01
29f90     97 06 48 FB | 	callpa	#(@LR__4281-@LR__4280)>>2,fcache_load_ptr_
29f94                 | LR__4280
29f94     10 FB C9 FA | 	rdbyte	result1, local02 wz
29f98     01 20 06 51 |  if_ne	add	local02, #1
29f9c     F4 FF 9F 5D |  if_ne	jmp	#LR__4280
29fa0                 | LR__4281
29fa0     09 21 82 F1 | 	sub	local02, arg01
29fa4     10 FB 01 F6 | 	mov	result1, local02
29fa8     02 00 00 FF 
29fac     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
29fb0     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
29fb4     02 00 00 FF 
29fb8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
29fbc                 | '             return 0;
29fbc     00 FA 05 A6 |  if_e	mov	result1, #0
29fc0     5C 00 90 AD |  if_e	jmp	#LR__4284
29fc4                 | ' 
29fc4                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
29fc4     02 00 00 FF 
29fc8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
29fcc     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
29fd0     02 00 00 FF 
29fd4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
29fd8                 | LR__4282
29fd8     11 25 0A FB | 	rdlong	local04, local03 wz
29fdc     3C 00 90 AD |  if_e	jmp	#LR__4283
29fe0     12 13 02 F6 | 	mov	arg01, local04
29fe4     0F 15 02 F6 | 	mov	arg02, local01
29fe8     10 17 02 F6 | 	mov	arg03, local02
29fec     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
29ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ff4     10 27 02 A6 |  if_e	mov	local05, local02
29ff8     12 27 02 A1 |  if_e	add	local05, local04
29ffc     13 29 C2 AA |  if_e	rdbyte	local06, local05
2a000     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2a004                 | ' 			return name+len+1;
2a004     10 25 02 A1 |  if_e	add	local04, local02
2a008     01 24 06 A1 |  if_e	add	local04, #1
2a00c     12 FB 01 A6 |  if_e	mov	result1, local04
2a010     0C 00 90 AD |  if_e	jmp	#LR__4284
2a014     04 22 06 F1 | 	add	local03, #4
2a018     BC FF 9F FD | 	jmp	#LR__4282
2a01c                 | LR__4283
2a01c                 | ' 	}
2a01c                 | ' 	return 0;
2a01c     00 FA 05 F6 | 	mov	result1, #0
2a020                 | LR__4284
2a020     A7 F0 03 F6 | 	mov	ptra, fp
2a024     B2 00 A0 FD | 	call	#popregs_
2a028                 | _fatfs_cc_getenv_ret
2a028     2D 00 64 FD | 	ret
2a02c                 | 
2a02c                 | _fatfs_cc__get_fattime
2a02c     00 4A 05 F6 | 	mov	COUNT_, #0
2a030     A8 00 A0 FD | 	call	#pushregs_
2a034     34 F0 07 F1 | 	add	ptra, #52
2a038     00 12 06 F6 | 	mov	arg01, #0
2a03c     38 FB BF FD | 	call	#_fatfs_cc_time
2a040     04 4E 05 F1 | 	add	fp, #4
2a044     A7 FA 61 FC | 	wrlong	result1, fp
2a048     A7 12 02 F6 | 	mov	arg01, fp
2a04c     0C 4E 05 F1 | 	add	fp, #12
2a050     A7 14 02 F6 | 	mov	arg02, fp
2a054     10 4E 85 F1 | 	sub	fp, #16
2a058     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2a05c     24 4E 05 F1 | 	add	fp, #36
2a060     A7 14 02 FB | 	rdlong	arg02, fp
2a064     50 14 86 F1 | 	sub	arg02, #80
2a068     09 14 66 F0 | 	shl	arg02, #9
2a06c     04 4E 85 F1 | 	sub	fp, #4
2a070     A7 FA 01 FB | 	rdlong	result1, fp
2a074     01 FA 05 F1 | 	add	result1, #1
2a078     05 FA 65 F0 | 	shl	result1, #5
2a07c     FD 14 42 F5 | 	or	arg02, result1
2a080     04 4E 85 F1 | 	sub	fp, #4
2a084     A7 FA 01 FB | 	rdlong	result1, fp
2a088     FD 14 42 F5 | 	or	arg02, result1
2a08c     14 4E 85 F1 | 	sub	fp, #20
2a090     A7 14 62 FC | 	wrlong	arg02, fp
2a094     10 4E 05 F1 | 	add	fp, #16
2a098     A7 14 02 FB | 	rdlong	arg02, fp
2a09c     0B 14 66 F0 | 	shl	arg02, #11
2a0a0     04 4E 85 F1 | 	sub	fp, #4
2a0a4     A7 FA 01 FB | 	rdlong	result1, fp
2a0a8     05 FA 65 F0 | 	shl	result1, #5
2a0ac     FD 14 42 F5 | 	or	arg02, result1
2a0b0     04 4E 85 F1 | 	sub	fp, #4
2a0b4     A7 FA 01 FB | 	rdlong	result1, fp
2a0b8     FD 14 42 F5 | 	or	arg02, result1
2a0bc     04 4E 85 F1 | 	sub	fp, #4
2a0c0     A7 14 62 FC | 	wrlong	arg02, fp
2a0c4                 | ' 
2a0c4                 | '     now = time(0);
2a0c4                 | '     _gmtime_r (&now, &date);
2a0c4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2a0c4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2a0c4                 | '     return (ffdate << 16) | fftime;
2a0c4     04 4E 85 F1 | 	sub	fp, #4
2a0c8     A7 FA 01 FB | 	rdlong	result1, fp
2a0cc     10 FA 65 F0 | 	shl	result1, #16
2a0d0     08 4E 85 F1 | 	sub	fp, #8
2a0d4     0A FB 41 F5 | 	or	result1, arg02
2a0d8     A7 F0 03 F6 | 	mov	ptra, fp
2a0dc     B2 00 A0 FD | 	call	#popregs_
2a0e0                 | _fatfs_cc__get_fattime_ret
2a0e0     2D 00 64 FD | 	ret
2a0e4                 | 
2a0e4                 | _fatfs_cc_unixtime_0894
2a0e4     00 4A 05 F6 | 	mov	COUNT_, #0
2a0e8     A8 00 A0 FD | 	call	#pushregs_
2a0ec     34 F0 07 F1 | 	add	ptra, #52
2a0f0     04 4E 05 F1 | 	add	fp, #4
2a0f4     A7 12 62 FC | 	wrlong	arg01, fp
2a0f8     04 4E 05 F1 | 	add	fp, #4
2a0fc     A7 14 62 FC | 	wrlong	arg02, fp
2a100     04 4E 85 F1 | 	sub	fp, #4
2a104     A7 14 02 FB | 	rdlong	arg02, fp
2a108     09 14 46 F0 | 	shr	arg02, #9
2a10c     7F 14 06 F5 | 	and	arg02, #127
2a110     50 FA 05 F6 | 	mov	result1, #80
2a114     0A FB 01 F1 | 	add	result1, arg02
2a118     20 4E 05 F1 | 	add	fp, #32
2a11c     A7 FA 61 FC | 	wrlong	result1, fp
2a120     20 4E 85 F1 | 	sub	fp, #32
2a124     A7 FA 01 FB | 	rdlong	result1, fp
2a128     05 FA 45 F0 | 	shr	result1, #5
2a12c     FD FA 41 F8 | 	getnib	result1, result1, #0
2a130     01 FA 85 F1 | 	sub	result1, #1
2a134     1C 4E 05 F1 | 	add	fp, #28
2a138     A7 FA 61 FC | 	wrlong	result1, fp
2a13c     1C 4E 85 F1 | 	sub	fp, #28
2a140     A7 FA 01 FB | 	rdlong	result1, fp
2a144     1F FA 05 F5 | 	and	result1, #31
2a148     18 4E 05 F1 | 	add	fp, #24
2a14c     A7 FA 61 FC | 	wrlong	result1, fp
2a150     14 4E 85 F1 | 	sub	fp, #20
2a154     A7 FA 01 FB | 	rdlong	result1, fp
2a158     0B FA 45 F0 | 	shr	result1, #11
2a15c     1F FA 05 F5 | 	and	result1, #31
2a160     10 4E 05 F1 | 	add	fp, #16
2a164     A7 FA 61 FC | 	wrlong	result1, fp
2a168     10 4E 85 F1 | 	sub	fp, #16
2a16c     A7 FA 01 FB | 	rdlong	result1, fp
2a170     05 FA 45 F0 | 	shr	result1, #5
2a174     3F FA 05 F5 | 	and	result1, #63
2a178     0C 4E 05 F1 | 	add	fp, #12
2a17c     A7 FA 61 FC | 	wrlong	result1, fp
2a180     0C 4E 85 F1 | 	sub	fp, #12
2a184     A7 14 02 FB | 	rdlong	arg02, fp
2a188     1F 14 06 F5 | 	and	arg02, #31
2a18c     01 14 66 F0 | 	shl	arg02, #1
2a190     08 4E 05 F1 | 	add	fp, #8
2a194     A7 14 62 FC | 	wrlong	arg02, fp
2a198     A7 12 02 F6 | 	mov	arg01, fp
2a19c     10 4E 85 F1 | 	sub	fp, #16
2a1a0     4C FA BF FD | 	call	#_fatfs_cc_mktime
2a1a4     0C 4E 05 F1 | 	add	fp, #12
2a1a8     A7 FA 61 FC | 	wrlong	result1, fp
2a1ac                 | ' 
2a1ac                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2a1ac                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2a1ac                 | '     date.tm_mday = (dosdate & 0x1f);
2a1ac                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2a1ac                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2a1ac                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2a1ac                 | ' 
2a1ac                 | '     t = mktime(&date);
2a1ac                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a1ac                 | '     return t;
2a1ac     0C 4E 85 F1 | 	sub	fp, #12
2a1b0     A7 F0 03 F6 | 	mov	ptra, fp
2a1b4     B2 00 A0 FD | 	call	#popregs_
2a1b8                 | _fatfs_cc_unixtime_0894_ret
2a1b8     2D 00 64 FD | 	ret
2a1bc                 | 
2a1bc                 | _fatfs_cc__set_dos_error_0896
2a1bc     09 01 02 F6 | 	mov	_var01, arg01
2a1c0                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a1c0                 | '     switch (derr) {
2a1c0     14 00 26 F3 | 	fle	_var01, #20
2a1c4     30 00 62 FD | 	jmprel	_var01
2a1c8                 | LR__4290
2a1c8     50 00 90 FD | 	jmp	#LR__4291
2a1cc     84 00 90 FD | 	jmp	#LR__4305
2a1d0     80 00 90 FD | 	jmp	#LR__4306
2a1d4     7C 00 90 FD | 	jmp	#LR__4307
2a1d8     48 00 90 FD | 	jmp	#LR__4292
2a1dc     44 00 90 FD | 	jmp	#LR__4293
2a1e0     40 00 90 FD | 	jmp	#LR__4294
2a1e4     44 00 90 FD | 	jmp	#LR__4295
2a1e8     48 00 90 FD | 	jmp	#LR__4297
2a1ec     54 00 90 FD | 	jmp	#LR__4300
2a1f0     38 00 90 FD | 	jmp	#LR__4296
2a1f4     4C 00 90 FD | 	jmp	#LR__4301
2a1f8     48 00 90 FD | 	jmp	#LR__4302
2a1fc     44 00 90 FD | 	jmp	#LR__4303
2a200     50 00 90 FD | 	jmp	#LR__4308
2a204     4C 00 90 FD | 	jmp	#LR__4308
2a208     48 00 90 FD | 	jmp	#LR__4308
2a20c     2C 00 90 FD | 	jmp	#LR__4298
2a210     38 00 90 FD | 	jmp	#LR__4304
2a214     2C 00 90 FD | 	jmp	#LR__4299
2a218     38 00 90 FD | 	jmp	#LR__4308
2a21c                 | LR__4291
2a21c     00 02 06 F6 | 	mov	_var02, #0
2a220                 | '         r = 0;
2a220                 | '         break;
2a220     34 00 90 FD | 	jmp	#LR__4309
2a224                 | LR__4292
2a224                 | LR__4293
2a224                 | LR__4294
2a224     04 02 06 F6 | 	mov	_var02, #4
2a228                 | '         r =  4 ;
2a228                 | '         break;
2a228     2C 00 90 FD | 	jmp	#LR__4309
2a22c                 | LR__4295
2a22c                 | LR__4296
2a22c     06 02 06 F6 | 	mov	_var02, #6
2a230                 | '         r =  6 ;
2a230                 | '         break;
2a230     24 00 90 FD | 	jmp	#LR__4309
2a234                 | LR__4297
2a234     09 02 06 F6 | 	mov	_var02, #9
2a238                 | '         r =  9 ;
2a238                 | '         break;
2a238     1C 00 90 FD | 	jmp	#LR__4309
2a23c                 | LR__4298
2a23c     07 02 06 F6 | 	mov	_var02, #7
2a240                 | '         r =  7 ;
2a240                 | '         break;
2a240     14 00 90 FD | 	jmp	#LR__4309
2a244                 | LR__4299
2a244                 | LR__4300
2a244                 | LR__4301
2a244                 | LR__4302
2a244                 | LR__4303
2a244     0A 02 06 F6 | 	mov	_var02, #10
2a248                 | '         r =  10 ;
2a248                 | '         break;
2a248     0C 00 90 FD | 	jmp	#LR__4309
2a24c                 | LR__4304
2a24c     0B 02 06 F6 | 	mov	_var02, #11
2a250                 | '         r =  11 ;
2a250                 | '         break;
2a250     04 00 90 FD | 	jmp	#LR__4309
2a254                 | LR__4305
2a254                 | LR__4306
2a254                 | LR__4307
2a254                 | LR__4308
2a254     0C 02 06 F6 | 	mov	_var02, #12
2a258                 | '         r =  12 ;
2a258                 | '         break;
2a258                 | LR__4309
2a258                 | '     }
2a258                 | '     return _seterror(r);
2a258     00 02 4E F2 | 	cmps	_var02, #0 wz
2a25c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a260     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2a264     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a268     01 FA 65 56 |  if_ne	neg	result1, #1
2a26c     00 FA 05 A6 |  if_e	mov	result1, #0
2a270                 | _fatfs_cc__set_dos_error_0896_ret
2a270     2D 00 64 FD | 	ret
2a274                 | 
2a274                 | _fatfs_cc_v_creat
2a274     04 4A 05 F6 | 	mov	COUNT_, #4
2a278     A8 00 A0 FD | 	call	#pushregs_
2a27c     09 1F 02 F6 | 	mov	local01, arg01
2a280     0A 21 02 F6 | 	mov	local02, arg02
2a284     03 00 00 FF 
2a288     3C 12 06 F6 | 	mov	arg01, ##1596
2a28c                 | '     return _gc_alloc(size);
2a28c     10 14 06 F6 | 	mov	arg02, #16
2a290     30 60 BF FD | 	call	#__system___gc_doalloc
2a294     FD 22 0A F6 | 	mov	local03, result1 wz
2a298                 | '       return _seterror( 7 );
2a298     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a29c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a2a0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a2a4     01 FA 65 A6 |  if_e	neg	result1, #1
2a2a8     58 00 90 AD |  if_e	jmp	#LR__4311
2a2ac     11 13 02 F6 | 	mov	arg01, local03
2a2b0     00 14 06 F6 | 	mov	arg02, #0
2a2b4     03 00 00 FF 
2a2b8     3C 16 06 F6 | 	mov	arg03, ##1596
2a2bc     98 00 A0 FD | 	call	#\builtin_bytefill_
2a2c0     02 00 00 FF 
2a2c4     14 22 06 F1 | 	add	local03, ##1044
2a2c8     11 13 02 F6 | 	mov	arg01, local03
2a2cc     02 00 00 FF 
2a2d0     14 22 86 F1 | 	sub	local03, ##1044
2a2d4     10 15 02 F6 | 	mov	arg02, local02
2a2d8     07 16 06 F6 | 	mov	arg03, #7
2a2dc     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2a2e0     FD 24 0A F6 | 	mov	local04, result1 wz
2a2e4     14 00 90 AD |  if_e	jmp	#LR__4310
2a2e8     11 13 02 F6 | 	mov	arg01, local03
2a2ec                 | '     return _gc_free(ptr);
2a2ec     E0 60 BF FD | 	call	#__system___gc_free
2a2f0                 | '     free(f);
2a2f0                 | '     return _set_dos_error(r);
2a2f0     12 13 02 F6 | 	mov	arg01, local04
2a2f4     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a2f8     08 00 90 FD | 	jmp	#LR__4311
2a2fc                 | LR__4310
2a2fc     0F 23 62 FC | 	wrlong	local03, local01
2a300                 | '   }
2a300                 | '   fil->vfsdata = f;
2a300                 | '   return 0;
2a300     00 FA 05 F6 | 	mov	result1, #0
2a304                 | LR__4311
2a304     A7 F0 03 F6 | 	mov	ptra, fp
2a308     B2 00 A0 FD | 	call	#popregs_
2a30c                 | _fatfs_cc_v_creat_ret
2a30c     2D 00 64 FD | 	ret
2a310                 | 
2a310                 | _fatfs_cc_v_close
2a310     02 4A 05 F6 | 	mov	COUNT_, #2
2a314     A8 00 A0 FD | 	call	#pushregs_
2a318     09 1F 02 FB | 	rdlong	local01, arg01
2a31c     02 00 00 FF 
2a320     14 1E 06 F1 | 	add	local01, ##1044
2a324     0F 13 02 F6 | 	mov	arg01, local01
2a328     02 00 00 FF 
2a32c     14 1E 86 F1 | 	sub	local01, ##1044
2a330     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2a334     FD 20 02 F6 | 	mov	local02, result1
2a338     0F 13 02 F6 | 	mov	arg01, local01
2a33c                 | '     return _gc_free(ptr);
2a33c     90 60 BF FD | 	call	#__system___gc_free
2a340                 | '     FAT_FIL *f = fil->vfsdata;
2a340                 | '     r=f_close(&f->fil);
2a340                 | '     free(f);
2a340                 | '     return _set_dos_error(r);
2a340     10 13 02 F6 | 	mov	arg01, local02
2a344     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a348     A7 F0 03 F6 | 	mov	ptra, fp
2a34c     B2 00 A0 FD | 	call	#popregs_
2a350                 | _fatfs_cc_v_close_ret
2a350     2D 00 64 FD | 	ret
2a354                 | 
2a354                 | _fatfs_cc_v_opendir
2a354     04 4A 05 F6 | 	mov	COUNT_, #4
2a358     A8 00 A0 FD | 	call	#pushregs_
2a35c     09 1F 02 F6 | 	mov	local01, arg01
2a360     0A 21 02 F6 | 	mov	local02, arg02
2a364     30 12 06 F6 | 	mov	arg01, #48
2a368                 | '     return _gc_alloc(size);
2a368     10 14 06 F6 | 	mov	arg02, #16
2a36c     54 5F BF FD | 	call	#__system___gc_doalloc
2a370     FD 22 0A F6 | 	mov	local03, result1 wz
2a374                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a374                 | '       return _seterror( 7 );
2a374     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a378     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a37c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a380     01 FA 65 A6 |  if_e	neg	result1, #1
2a384     34 00 90 AD |  if_e	jmp	#LR__4321
2a388     10 15 02 F6 | 	mov	arg02, local02
2a38c     11 13 02 F6 | 	mov	arg01, local03
2a390     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2a394     FD 24 0A F6 | 	mov	local04, result1 wz
2a398     14 00 90 AD |  if_e	jmp	#LR__4320
2a39c     11 13 02 F6 | 	mov	arg01, local03
2a3a0                 | '     return _gc_free(ptr);
2a3a0     2C 60 BF FD | 	call	#__system___gc_free
2a3a4                 | '         free(f);
2a3a4                 | '         return _set_dos_error(r);
2a3a4     12 13 02 F6 | 	mov	arg01, local04
2a3a8     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a3ac     0C 00 90 FD | 	jmp	#LR__4321
2a3b0                 | LR__4320
2a3b0     04 1E 06 F1 | 	add	local01, #4
2a3b4     0F 23 62 FC | 	wrlong	local03, local01
2a3b8                 | '     }
2a3b8                 | '     dir->vfsdata = f;
2a3b8                 | '     return 0;
2a3b8     00 FA 05 F6 | 	mov	result1, #0
2a3bc                 | LR__4321
2a3bc     A7 F0 03 F6 | 	mov	ptra, fp
2a3c0     B2 00 A0 FD | 	call	#popregs_
2a3c4                 | _fatfs_cc_v_opendir_ret
2a3c4     2D 00 64 FD | 	ret
2a3c8                 | 
2a3c8                 | _fatfs_cc_v_closedir
2a3c8     02 4A 05 F6 | 	mov	COUNT_, #2
2a3cc     A8 00 A0 FD | 	call	#pushregs_
2a3d0     04 12 06 F1 | 	add	arg01, #4
2a3d4     09 1F 02 FB | 	rdlong	local01, arg01
2a3d8     0F 13 02 F6 | 	mov	arg01, local01
2a3dc     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2a3e0     FD 20 02 F6 | 	mov	local02, result1
2a3e4     0F 13 02 F6 | 	mov	arg01, local01
2a3e8                 | '     return _gc_free(ptr);
2a3e8     E4 5F BF FD | 	call	#__system___gc_free
2a3ec     00 20 0E F2 | 	cmp	local02, #0 wz
2a3f0     10 13 02 56 |  if_ne	mov	arg01, local02
2a3f4     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0896
2a3f8                 | '     return r;
2a3f8     10 FB 01 F6 | 	mov	result1, local02
2a3fc     A7 F0 03 F6 | 	mov	ptra, fp
2a400     B2 00 A0 FD | 	call	#popregs_
2a404                 | _fatfs_cc_v_closedir_ret
2a404     2D 00 64 FD | 	ret
2a408                 | 
2a408                 | _fatfs_cc_v_readdir
2a408     01 4A 05 F6 | 	mov	COUNT_, #1
2a40c     A8 00 A0 FD | 	call	#pushregs_
2a410     2C F1 07 F1 | 	add	ptra, #300
2a414     04 4E 05 F1 | 	add	fp, #4
2a418     A7 12 62 FC | 	wrlong	arg01, fp
2a41c     04 4E 05 F1 | 	add	fp, #4
2a420     A7 14 62 FC | 	wrlong	arg02, fp
2a424     04 4E 85 F1 | 	sub	fp, #4
2a428     A7 16 02 FB | 	rdlong	arg03, fp
2a42c     04 16 06 F1 | 	add	arg03, #4
2a430     0B 13 02 FB | 	rdlong	arg01, arg03
2a434     08 4E 05 F1 | 	add	fp, #8
2a438     A7 14 02 F6 | 	mov	arg02, fp
2a43c     0C 4E 85 F1 | 	sub	fp, #12
2a440     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2a444     28 4F 05 F1 | 	add	fp, #296
2a448     A7 FA 61 FC | 	wrlong	result1, fp
2a44c     28 4F 85 F1 | 	sub	fp, #296
2a450     00 FA 0D F2 | 	cmp	result1, #0 wz
2a454     14 00 90 AD |  if_e	jmp	#LR__4330
2a458                 | '         return _set_dos_error(r);
2a458     28 4F 05 F1 | 	add	fp, #296
2a45c     A7 12 02 FB | 	rdlong	arg01, fp
2a460     28 4F 85 F1 | 	sub	fp, #296
2a464     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a468     C4 00 90 FD | 	jmp	#LR__4333
2a46c                 | LR__4330
2a46c     28 4E 05 F1 | 	add	fp, #40
2a470     A7 16 CA FA | 	rdbyte	arg03, fp wz
2a474     28 4E 85 F1 | 	sub	fp, #40
2a478                 | '         return -1;
2a478     01 FA 65 A6 |  if_e	neg	result1, #1
2a47c     B0 00 90 AD |  if_e	jmp	#LR__4333
2a480     08 4E 05 F1 | 	add	fp, #8
2a484     A7 12 02 FB | 	rdlong	arg01, fp
2a488     20 4E 05 F1 | 	add	fp, #32
2a48c     A7 14 02 F6 | 	mov	arg02, fp
2a490     28 4E 85 F1 | 	sub	fp, #40
2a494     3F 16 06 F6 | 	mov	arg03, #63
2a498     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2a49c     08 4E 05 F1 | 	add	fp, #8
2a4a0     A7 16 02 FB | 	rdlong	arg03, fp
2a4a4     3F 16 06 F1 | 	add	arg03, #63
2a4a8     0B 01 48 FC | 	wrbyte	#0, arg03
2a4ac     0C 4E 05 F1 | 	add	fp, #12
2a4b0     A7 16 C2 FA | 	rdbyte	arg03, fp
2a4b4     14 4E 85 F1 | 	sub	fp, #20
2a4b8     10 16 CE F7 | 	test	arg03, #16 wz
2a4bc     18 00 90 AD |  if_e	jmp	#LR__4331
2a4c0     08 4E 05 F1 | 	add	fp, #8
2a4c4     A7 16 02 FB | 	rdlong	arg03, fp
2a4c8     08 4E 85 F1 | 	sub	fp, #8
2a4cc     50 16 06 F1 | 	add	arg03, #80
2a4d0     0B 03 48 FC | 	wrbyte	#1, arg03
2a4d4     14 00 90 FD | 	jmp	#LR__4332
2a4d8                 | LR__4331
2a4d8     08 4E 05 F1 | 	add	fp, #8
2a4dc     A7 16 02 FB | 	rdlong	arg03, fp
2a4e0     08 4E 85 F1 | 	sub	fp, #8
2a4e4     50 16 06 F1 | 	add	arg03, #80
2a4e8     0B 01 48 FC | 	wrbyte	#0, arg03
2a4ec                 | LR__4332
2a4ec     08 4E 05 F1 | 	add	fp, #8
2a4f0     A7 16 02 FB | 	rdlong	arg03, fp
2a4f4     04 4E 05 F1 | 	add	fp, #4
2a4f8     A7 14 02 FB | 	rdlong	arg02, fp
2a4fc     48 16 06 F1 | 	add	arg03, #72
2a500     0B 15 62 FC | 	wrlong	arg02, arg03
2a504     04 4E 85 F1 | 	sub	fp, #4
2a508     A7 1E 02 FB | 	rdlong	local01, fp
2a50c     08 4E 05 F1 | 	add	fp, #8
2a510     A7 12 E2 FA | 	rdword	arg01, fp
2a514     02 4E 05 F1 | 	add	fp, #2
2a518     A7 14 E2 FA | 	rdword	arg02, fp
2a51c     12 4E 85 F1 | 	sub	fp, #18
2a520     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0894
2a524     4C 1E 06 F1 | 	add	local01, #76
2a528     0F FB 61 FC | 	wrlong	result1, local01
2a52c                 | '         ent->d_type =  (0) ;
2a52c                 | '     }
2a52c                 | '     ent->d_size = finfo.fsize;
2a52c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2a52c                 | '     return 0;
2a52c     00 FA 05 F6 | 	mov	result1, #0
2a530                 | LR__4333
2a530     A7 F0 03 F6 | 	mov	ptra, fp
2a534     B2 00 A0 FD | 	call	#popregs_
2a538                 | _fatfs_cc_v_readdir_ret
2a538     2D 00 64 FD | 	ret
2a53c                 | 
2a53c                 | _fatfs_cc_v_stat
2a53c     03 4A 05 F6 | 	mov	COUNT_, #3
2a540     A8 00 A0 FD | 	call	#pushregs_
2a544     30 F1 07 F1 | 	add	ptra, #304
2a548     04 4E 05 F1 | 	add	fp, #4
2a54c     A7 12 62 FC | 	wrlong	arg01, fp
2a550     04 4E 05 F1 | 	add	fp, #4
2a554     A7 14 62 FC | 	wrlong	arg02, fp
2a558     08 4E 85 F1 | 	sub	fp, #8
2a55c     0A 13 02 F6 | 	mov	arg01, arg02
2a560     00 14 06 F6 | 	mov	arg02, #0
2a564     30 16 06 F6 | 	mov	arg03, #48
2a568     98 00 A0 FD | 	call	#\builtin_bytefill_
2a56c     04 4E 05 F1 | 	add	fp, #4
2a570     A7 FA 01 FB | 	rdlong	result1, fp
2a574     04 4E 85 F1 | 	sub	fp, #4
2a578     FD FA C9 FA | 	rdbyte	result1, result1 wz
2a57c     2C 00 90 AD |  if_e	jmp	#LR__4340
2a580     04 4E 05 F1 | 	add	fp, #4
2a584     A7 FA 01 FB | 	rdlong	result1, fp
2a588     04 4E 85 F1 | 	sub	fp, #4
2a58c     FD FA C1 FA | 	rdbyte	result1, result1
2a590     2E FA 0D F2 | 	cmp	result1, #46 wz
2a594     04 4E 05 A1 |  if_e	add	fp, #4
2a598     A7 1E 02 AB |  if_e	rdlong	local01, fp
2a59c     04 4E 85 A1 |  if_e	sub	fp, #4
2a5a0     01 1E 06 A1 |  if_e	add	local01, #1
2a5a4     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2a5a8     18 00 90 5D |  if_ne	jmp	#LR__4341
2a5ac                 | LR__4340
2a5ac     18 4E 05 F1 | 	add	fp, #24
2a5b0     A7 20 48 FC | 	wrbyte	#16, fp
2a5b4     0C 4E 85 F1 | 	sub	fp, #12
2a5b8     A7 00 68 FC | 	wrlong	#0, fp
2a5bc     0C 4E 85 F1 | 	sub	fp, #12
2a5c0     24 00 90 FD | 	jmp	#LR__4342
2a5c4                 | LR__4341
2a5c4     04 4E 05 F1 | 	add	fp, #4
2a5c8     A7 12 02 FB | 	rdlong	arg01, fp
2a5cc     0C 4E 05 F1 | 	add	fp, #12
2a5d0     A7 14 02 F6 | 	mov	arg02, fp
2a5d4     10 4E 85 F1 | 	sub	fp, #16
2a5d8     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2a5dc     0C 4E 05 F1 | 	add	fp, #12
2a5e0     A7 FA 61 FC | 	wrlong	result1, fp
2a5e4     0C 4E 85 F1 | 	sub	fp, #12
2a5e8                 | LR__4342
2a5e8     0C 4E 05 F1 | 	add	fp, #12
2a5ec     A7 20 0A FB | 	rdlong	local02, fp wz
2a5f0     0C 4E 85 F1 | 	sub	fp, #12
2a5f4     14 00 90 AD |  if_e	jmp	#LR__4343
2a5f8                 | '         return _set_dos_error(r);
2a5f8     0C 4E 05 F1 | 	add	fp, #12
2a5fc     A7 12 02 FB | 	rdlong	arg01, fp
2a600     0C 4E 85 F1 | 	sub	fp, #12
2a604     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a608     14 01 90 FD | 	jmp	#LR__4344
2a60c                 | LR__4343
2a60c     2C 4F 05 F1 | 	add	fp, #300
2a610     A7 48 6A FC | 	wrlong	#292, fp
2a614     14 4F 85 F1 | 	sub	fp, #276
2a618     A7 22 C2 FA | 	rdbyte	local03, fp
2a61c     18 4E 85 F1 | 	sub	fp, #24
2a620     01 22 CE F7 | 	test	local03, #1 wz
2a624     2C 4F 05 A1 |  if_e	add	fp, #300
2a628     A7 22 02 AB |  if_e	rdlong	local03, fp
2a62c     92 22 46 A5 |  if_e	or	local03, #146
2a630     A7 22 62 AC |  if_e	wrlong	local03, fp
2a634     2C 4F 85 A1 |  if_e	sub	fp, #300
2a638     18 4E 05 F1 | 	add	fp, #24
2a63c     A7 22 C2 FA | 	rdbyte	local03, fp
2a640     18 4E 85 F1 | 	sub	fp, #24
2a644     10 22 CE F7 | 	test	local03, #16 wz
2a648     2C 4F 05 51 |  if_ne	add	fp, #300
2a64c     A7 22 02 5B |  if_ne	rdlong	local03, fp
2a650     08 00 00 5F 
2a654     49 22 46 55 |  if_ne	or	local03, ##4169
2a658     A7 22 62 5C |  if_ne	wrlong	local03, fp
2a65c     2C 4F 85 51 |  if_ne	sub	fp, #300
2a660     08 4E 05 F1 | 	add	fp, #8
2a664     A7 22 02 FB | 	rdlong	local03, fp
2a668     24 4F 05 F1 | 	add	fp, #292
2a66c     A7 20 02 FB | 	rdlong	local02, fp
2a670     08 22 06 F1 | 	add	local03, #8
2a674     11 21 62 FC | 	wrlong	local02, local03
2a678     24 4F 85 F1 | 	sub	fp, #292
2a67c     A7 22 02 FB | 	rdlong	local03, fp
2a680     0C 22 06 F1 | 	add	local03, #12
2a684     11 03 68 FC | 	wrlong	#1, local03
2a688     A7 22 02 FB | 	rdlong	local03, fp
2a68c     08 4E 05 F1 | 	add	fp, #8
2a690     A7 20 02 FB | 	rdlong	local02, fp
2a694     18 22 06 F1 | 	add	local03, #24
2a698     11 21 62 FC | 	wrlong	local02, local03
2a69c     08 4E 85 F1 | 	sub	fp, #8
2a6a0     A7 22 02 FB | 	rdlong	local03, fp
2a6a4     1C 22 06 F1 | 	add	local03, #28
2a6a8     01 00 80 FF 
2a6ac     11 01 68 FC | 	wrlong	##512, local03
2a6b0     A7 20 02 FB | 	rdlong	local02, fp
2a6b4     10 23 02 F6 | 	mov	local03, local02
2a6b8     18 20 06 F1 | 	add	local02, #24
2a6bc     10 21 02 FB | 	rdlong	local02, local02
2a6c0     FF 21 06 F1 | 	add	local02, #511
2a6c4     10 21 52 F6 | 	abs	local02, local02 wc
2a6c8     09 20 46 F0 | 	shr	local02, #9
2a6cc     10 21 82 F6 | 	negc	local02, local02
2a6d0     20 22 06 F1 | 	add	local03, #32
2a6d4     11 21 62 FC | 	wrlong	local02, local03
2a6d8     A7 20 02 FB | 	rdlong	local02, fp
2a6dc     10 23 02 F6 | 	mov	local03, local02
2a6e0     10 1F 02 F6 | 	mov	local01, local02
2a6e4     0C 4E 05 F1 | 	add	fp, #12
2a6e8     A7 12 E2 FA | 	rdword	arg01, fp
2a6ec     02 4E 05 F1 | 	add	fp, #2
2a6f0     A7 14 E2 FA | 	rdword	arg02, fp
2a6f4     16 4E 85 F1 | 	sub	fp, #22
2a6f8     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0894
2a6fc     2C 1E 06 F1 | 	add	local01, #44
2a700     0F FB 61 FC | 	wrlong	result1, local01
2a704     28 20 06 F1 | 	add	local02, #40
2a708     10 FB 61 FC | 	wrlong	result1, local02
2a70c     24 22 06 F1 | 	add	local03, #36
2a710     11 FB 61 FC | 	wrlong	result1, local03
2a714                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2a714                 | '     }
2a714                 | '     buf->st_mode = mode;
2a714                 | '     buf->st_nlink = 1;
2a714                 | '     buf->st_size = finfo.fsize;
2a714                 | '     buf->st_blksize = 512;
2a714                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2a714                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2a714                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a714                 | '     return r;
2a714     0C 4E 05 F1 | 	add	fp, #12
2a718     A7 FA 01 FB | 	rdlong	result1, fp
2a71c     0C 4E 85 F1 | 	sub	fp, #12
2a720                 | LR__4344
2a720     A7 F0 03 F6 | 	mov	ptra, fp
2a724     B2 00 A0 FD | 	call	#popregs_
2a728                 | _fatfs_cc_v_stat_ret
2a728     2D 00 64 FD | 	ret
2a72c                 | 
2a72c                 | _fatfs_cc_v_read
2a72c     00 4A 05 F6 | 	mov	COUNT_, #0
2a730     A8 00 A0 FD | 	call	#pushregs_
2a734     1C F0 07 F1 | 	add	ptra, #28
2a738     04 4E 05 F1 | 	add	fp, #4
2a73c     A7 12 62 FC | 	wrlong	arg01, fp
2a740     04 4E 05 F1 | 	add	fp, #4
2a744     A7 14 62 FC | 	wrlong	arg02, fp
2a748     04 4E 05 F1 | 	add	fp, #4
2a74c     A7 16 62 FC | 	wrlong	arg03, fp
2a750     08 4E 85 F1 | 	sub	fp, #8
2a754     A7 12 02 FB | 	rdlong	arg01, fp
2a758     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a75c     0C 4E 05 F1 | 	add	fp, #12
2a760     A7 12 62 FC | 	wrlong	arg01, fp
2a764     10 4E 85 F1 | 	sub	fp, #16
2a768                 | '         return _seterror( 5 );
2a768     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a76c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a770     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a774     01 FA 65 A6 |  if_e	neg	result1, #1
2a778     B8 00 90 AD |  if_e	jmp	#LR__4352
2a77c     10 4E 05 F1 | 	add	fp, #16
2a780     A7 12 02 FB | 	rdlong	arg01, fp
2a784     02 00 00 FF 
2a788     14 12 06 F1 | 	add	arg01, ##1044
2a78c     08 4E 85 F1 | 	sub	fp, #8
2a790     A7 14 02 FB | 	rdlong	arg02, fp
2a794     04 4E 05 F1 | 	add	fp, #4
2a798     A7 16 02 FB | 	rdlong	arg03, fp
2a79c     0C 4E 05 F1 | 	add	fp, #12
2a7a0     A7 18 02 F6 | 	mov	arg04, fp
2a7a4     18 4E 85 F1 | 	sub	fp, #24
2a7a8     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2a7ac     14 4E 05 F1 | 	add	fp, #20
2a7b0     A7 FA 61 FC | 	wrlong	result1, fp
2a7b4     14 4E 85 F1 | 	sub	fp, #20
2a7b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a7bc     34 00 90 AD |  if_e	jmp	#LR__4350
2a7c0     04 4E 05 F1 | 	add	fp, #4
2a7c4     A7 18 02 FB | 	rdlong	arg04, fp
2a7c8     0C 17 02 F6 | 	mov	arg03, arg04
2a7cc     08 18 06 F1 | 	add	arg04, #8
2a7d0     0C 19 02 FB | 	rdlong	arg04, arg04
2a7d4     20 18 46 F5 | 	or	arg04, #32
2a7d8     08 16 06 F1 | 	add	arg03, #8
2a7dc     0B 19 62 FC | 	wrlong	arg04, arg03
2a7e0                 | '         fil->state |=  (0x20) ;
2a7e0                 | '         return _set_dos_error(r);
2a7e0     10 4E 05 F1 | 	add	fp, #16
2a7e4     A7 12 02 FB | 	rdlong	arg01, fp
2a7e8     14 4E 85 F1 | 	sub	fp, #20
2a7ec     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a7f0     40 00 90 FD | 	jmp	#LR__4352
2a7f4                 | LR__4350
2a7f4     18 4E 05 F1 | 	add	fp, #24
2a7f8     A7 FA 09 FB | 	rdlong	result1, fp wz
2a7fc     18 4E 85 F1 | 	sub	fp, #24
2a800     24 00 90 5D |  if_ne	jmp	#LR__4351
2a804     04 4E 05 F1 | 	add	fp, #4
2a808     A7 FA 01 FB | 	rdlong	result1, fp
2a80c     FD 18 02 F6 | 	mov	arg04, result1
2a810     04 4E 85 F1 | 	sub	fp, #4
2a814     08 FA 05 F1 | 	add	result1, #8
2a818     FD FA 01 FB | 	rdlong	result1, result1
2a81c     10 FA 45 F5 | 	or	result1, #16
2a820     08 18 06 F1 | 	add	arg04, #8
2a824     0C FB 61 FC | 	wrlong	result1, arg04
2a828                 | LR__4351
2a828                 | '         fil->state |=  (0x10) ;
2a828                 | '     }
2a828                 | '     return x;
2a828     18 4E 05 F1 | 	add	fp, #24
2a82c     A7 FA 01 FB | 	rdlong	result1, fp
2a830     18 4E 85 F1 | 	sub	fp, #24
2a834                 | LR__4352
2a834     A7 F0 03 F6 | 	mov	ptra, fp
2a838     B2 00 A0 FD | 	call	#popregs_
2a83c                 | _fatfs_cc_v_read_ret
2a83c     2D 00 64 FD | 	ret
2a840                 | 
2a840                 | _fatfs_cc_v_write
2a840     00 4A 05 F6 | 	mov	COUNT_, #0
2a844     A8 00 A0 FD | 	call	#pushregs_
2a848     1C F0 07 F1 | 	add	ptra, #28
2a84c     04 4E 05 F1 | 	add	fp, #4
2a850     A7 12 62 FC | 	wrlong	arg01, fp
2a854     04 4E 05 F1 | 	add	fp, #4
2a858     A7 14 62 FC | 	wrlong	arg02, fp
2a85c     04 4E 05 F1 | 	add	fp, #4
2a860     A7 16 62 FC | 	wrlong	arg03, fp
2a864     08 4E 85 F1 | 	sub	fp, #8
2a868     A7 12 02 FB | 	rdlong	arg01, fp
2a86c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a870     0C 4E 05 F1 | 	add	fp, #12
2a874     A7 12 62 FC | 	wrlong	arg01, fp
2a878     10 4E 85 F1 | 	sub	fp, #16
2a87c                 | '         return _seterror( 5 );
2a87c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a880     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a884     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a888     01 FA 65 A6 |  if_e	neg	result1, #1
2a88c     84 00 90 AD |  if_e	jmp	#LR__4361
2a890     10 4E 05 F1 | 	add	fp, #16
2a894     A7 12 02 FB | 	rdlong	arg01, fp
2a898     02 00 00 FF 
2a89c     14 12 06 F1 | 	add	arg01, ##1044
2a8a0     08 4E 85 F1 | 	sub	fp, #8
2a8a4     A7 14 02 FB | 	rdlong	arg02, fp
2a8a8     04 4E 05 F1 | 	add	fp, #4
2a8ac     A7 16 02 FB | 	rdlong	arg03, fp
2a8b0     0C 4E 05 F1 | 	add	fp, #12
2a8b4     A7 18 02 F6 | 	mov	arg04, fp
2a8b8     18 4E 85 F1 | 	sub	fp, #24
2a8bc     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2a8c0     14 4E 05 F1 | 	add	fp, #20
2a8c4     A7 FA 61 FC | 	wrlong	result1, fp
2a8c8     14 4E 85 F1 | 	sub	fp, #20
2a8cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2a8d0     34 00 90 AD |  if_e	jmp	#LR__4360
2a8d4     04 4E 05 F1 | 	add	fp, #4
2a8d8     A7 18 02 FB | 	rdlong	arg04, fp
2a8dc     0C 17 02 F6 | 	mov	arg03, arg04
2a8e0     08 18 06 F1 | 	add	arg04, #8
2a8e4     0C 19 02 FB | 	rdlong	arg04, arg04
2a8e8     20 18 46 F5 | 	or	arg04, #32
2a8ec     08 16 06 F1 | 	add	arg03, #8
2a8f0     0B 19 62 FC | 	wrlong	arg04, arg03
2a8f4                 | '         fil->state |=  (0x20) ;
2a8f4                 | '         return _set_dos_error(r);
2a8f4     10 4E 05 F1 | 	add	fp, #16
2a8f8     A7 12 02 FB | 	rdlong	arg01, fp
2a8fc     14 4E 85 F1 | 	sub	fp, #20
2a900     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a904     0C 00 90 FD | 	jmp	#LR__4361
2a908                 | LR__4360
2a908                 | '     }
2a908                 | '     return x;
2a908     18 4E 05 F1 | 	add	fp, #24
2a90c     A7 FA 01 FB | 	rdlong	result1, fp
2a910     18 4E 85 F1 | 	sub	fp, #24
2a914                 | LR__4361
2a914     A7 F0 03 F6 | 	mov	ptra, fp
2a918     B2 00 A0 FD | 	call	#popregs_
2a91c                 | _fatfs_cc_v_write_ret
2a91c     2D 00 64 FD | 	ret
2a920                 | 
2a920                 | _fatfs_cc_v_lseek
2a920     04 4A 05 F6 | 	mov	COUNT_, #4
2a924     A8 00 A0 FD | 	call	#pushregs_
2a928     0A 1F 02 F6 | 	mov	local01, arg02
2a92c     0B 21 02 F6 | 	mov	local02, arg03
2a930     09 23 02 FB | 	rdlong	local03, arg01
2a934     02 00 00 FF 
2a938     14 22 0E F1 | 	add	local03, ##1044 wz
2a93c                 | '         return _seterror( 5 );
2a93c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a940     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a944     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a948     01 FA 65 A6 |  if_e	neg	result1, #1
2a94c     4C 00 90 AD |  if_e	jmp	#LR__4372
2a950     00 20 0E F2 | 	cmp	local02, #0 wz
2a954     24 00 90 AD |  if_e	jmp	#LR__4370
2a958     01 20 0E F2 | 	cmp	local02, #1 wz
2a95c     14 22 06 A1 |  if_e	add	local03, #20
2a960     11 25 02 AB |  if_e	rdlong	local04, local03
2a964     14 22 86 A1 |  if_e	sub	local03, #20
2a968     12 1F 02 A1 |  if_e	add	local01, local04
2a96c     0C 22 06 51 |  if_ne	add	local03, #12
2a970     11 25 02 5B |  if_ne	rdlong	local04, local03
2a974     0C 22 86 51 |  if_ne	sub	local03, #12
2a978     12 1F 02 51 |  if_ne	add	local01, local04
2a97c                 | LR__4370
2a97c     0F 15 02 F6 | 	mov	arg02, local01
2a980     11 13 02 F6 | 	mov	arg01, local03
2a984     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2a988     FD 12 0A F6 | 	mov	arg01, result1 wz
2a98c     08 00 90 AD |  if_e	jmp	#LR__4371
2a990                 | '         return _set_dos_error(result);
2a990     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a994     04 00 90 FD | 	jmp	#LR__4372
2a998                 | LR__4371
2a998                 | '     }
2a998                 | '     return offset;
2a998     0F FB 01 F6 | 	mov	result1, local01
2a99c                 | LR__4372
2a99c     A7 F0 03 F6 | 	mov	ptra, fp
2a9a0     B2 00 A0 FD | 	call	#popregs_
2a9a4                 | _fatfs_cc_v_lseek_ret
2a9a4     2D 00 64 FD | 	ret
2a9a8                 | 
2a9a8                 | _fatfs_cc_v_ioctl
2a9a8                 | ' {
2a9a8                 | '     return _seterror( 10 );
2a9a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a9ac     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2a9b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a9b4     01 FA 65 F6 | 	neg	result1, #1
2a9b8                 | _fatfs_cc_v_ioctl_ret
2a9b8     2D 00 64 FD | 	ret
2a9bc                 | 
2a9bc                 | _fatfs_cc_v_mkdir
2a9bc     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2a9c0     FD 12 02 F6 | 	mov	arg01, result1
2a9c4                 | ' 
2a9c4                 | '     r = f_mkdir(name);
2a9c4                 | '     return _set_dos_error(r);
2a9c4     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a9c8                 | _fatfs_cc_v_mkdir_ret
2a9c8     2D 00 64 FD | 	ret
2a9cc                 | 
2a9cc                 | _fatfs_cc_v_remove
2a9cc     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2a9d0     FD 12 02 F6 | 	mov	arg01, result1
2a9d4                 | ' 
2a9d4                 | '     r = f_unlink(name);
2a9d4                 | '     return _set_dos_error(r);
2a9d4     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a9d8                 | _fatfs_cc_v_remove_ret
2a9d8     2D 00 64 FD | 	ret
2a9dc                 | 
2a9dc                 | _fatfs_cc_v_rmdir
2a9dc     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2a9e0     FD 12 02 F6 | 	mov	arg01, result1
2a9e4                 | ' 
2a9e4                 | '     r = f_unlink(name);
2a9e4                 | '     return _set_dos_error(r);
2a9e4     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a9e8                 | _fatfs_cc_v_rmdir_ret
2a9e8     2D 00 64 FD | 	ret
2a9ec                 | 
2a9ec                 | _fatfs_cc_v_rename
2a9ec     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2a9f0     FD 12 02 F6 | 	mov	arg01, result1
2a9f4                 | '     return _set_dos_error(r);
2a9f4     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a9f8                 | _fatfs_cc_v_rename_ret
2a9f8     2D 00 64 FD | 	ret
2a9fc                 | 
2a9fc                 | _fatfs_cc_v_open
2a9fc     07 4A 05 F6 | 	mov	COUNT_, #7
2aa00     A8 00 A0 FD | 	call	#pushregs_
2aa04     09 1F 02 F6 | 	mov	local01, arg01
2aa08     0A 21 02 F6 | 	mov	local02, arg02
2aa0c     0B 23 02 F6 | 	mov	local03, arg03
2aa10     03 00 00 FF 
2aa14     3C 12 06 F6 | 	mov	arg01, ##1596
2aa18                 | '     return _gc_alloc(size);
2aa18     10 14 06 F6 | 	mov	arg02, #16
2aa1c     A4 58 BF FD | 	call	#__system___gc_doalloc
2aa20     FD 24 0A F6 | 	mov	local04, result1 wz
2aa24                 | '       return _seterror( 7 );
2aa24     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2aa28     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2aa2c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2aa30     01 FA 65 A6 |  if_e	neg	result1, #1
2aa34     98 00 90 AD |  if_e	jmp	#LR__4386
2aa38     12 13 02 F6 | 	mov	arg01, local04
2aa3c     00 14 06 F6 | 	mov	arg02, #0
2aa40     03 00 00 FF 
2aa44     3C 16 06 F6 | 	mov	arg03, ##1596
2aa48     98 00 A0 FD | 	call	#\builtin_bytefill_
2aa4c                 | '   switch (flags & 3) {
2aa4c     11 27 02 F6 | 	mov	local05, local03
2aa50     03 26 0E F5 | 	and	local05, #3 wz
2aa54     0C 00 90 AD |  if_e	jmp	#LR__4380
2aa58     01 26 0E F2 | 	cmp	local05, #1 wz
2aa5c     0C 00 90 AD |  if_e	jmp	#LR__4381
2aa60     10 00 90 FD | 	jmp	#LR__4382
2aa64                 | LR__4380
2aa64     01 28 06 F6 | 	mov	local06, #1
2aa68                 | '       fs_flags =  0x01 ;
2aa68                 | '       break;
2aa68     0C 00 90 FD | 	jmp	#LR__4383
2aa6c                 | LR__4381
2aa6c     02 28 06 F6 | 	mov	local06, #2
2aa70                 | '       fs_flags =  0x02 ;
2aa70                 | '       break;
2aa70     04 00 90 FD | 	jmp	#LR__4383
2aa74                 | LR__4382
2aa74     03 28 06 F6 | 	mov	local06, #3
2aa78                 | '       fs_flags =  0x01  |  0x02 ;
2aa78                 | '       break;
2aa78                 | LR__4383
2aa78     08 22 CE F7 | 	test	local03, #8 wz
2aa7c     18 28 46 55 |  if_ne	or	local06, #24
2aa80     08 00 90 5D |  if_ne	jmp	#LR__4384
2aa84     20 22 CE F7 | 	test	local03, #32 wz
2aa88     30 28 46 55 |  if_ne	or	local06, #48
2aa8c                 | LR__4384
2aa8c     02 00 00 FF 
2aa90     14 24 06 F1 | 	add	local04, ##1044
2aa94     12 13 02 F6 | 	mov	arg01, local04
2aa98     02 00 00 FF 
2aa9c     14 24 86 F1 | 	sub	local04, ##1044
2aaa0     10 15 02 F6 | 	mov	arg02, local02
2aaa4     14 17 02 F6 | 	mov	arg03, local06
2aaa8     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2aaac     FD 2A 0A F6 | 	mov	local07, result1 wz
2aab0     14 00 90 AD |  if_e	jmp	#LR__4385
2aab4     12 13 02 F6 | 	mov	arg01, local04
2aab8                 | '     return _gc_free(ptr);
2aab8     14 59 BF FD | 	call	#__system___gc_free
2aabc                 | '     free(f);
2aabc                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2aabc                 | '     return _set_dos_error(r);
2aabc     15 13 02 F6 | 	mov	arg01, local07
2aac0     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2aac4     08 00 90 FD | 	jmp	#LR__4386
2aac8                 | LR__4385
2aac8     0F 25 62 FC | 	wrlong	local04, local01
2aacc                 | '   }
2aacc                 | '   fil->vfsdata = f;
2aacc                 | '   return 0;
2aacc     00 FA 05 F6 | 	mov	result1, #0
2aad0                 | LR__4386
2aad0     A7 F0 03 F6 | 	mov	ptra, fp
2aad4     B2 00 A0 FD | 	call	#popregs_
2aad8                 | _fatfs_cc_v_open_ret
2aad8     2D 00 64 FD | 	ret
2aadc                 | 
2aadc                 | _fatfs_cc_v_flush
2aadc     09 13 02 FB | 	rdlong	arg01, arg01
2aae0     02 00 00 FF 
2aae4     14 12 0E F1 | 	add	arg01, ##1044 wz
2aae8                 | '         return _seterror( 5 );
2aae8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2aaec     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2aaf0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2aaf4     01 FA 65 A6 |  if_e	neg	result1, #1
2aaf8     0C 00 90 AD |  if_e	jmp	#LR__4390
2aafc     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2ab00     FD 12 02 F6 | 	mov	arg01, result1
2ab04                 | '     }
2ab04                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ab04                 | '     result = f_sync(f);
2ab04                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ab04                 | '     return _set_dos_error(result);
2ab04     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2ab08                 | LR__4390
2ab08                 | _fatfs_cc_v_flush_ret
2ab08     2D 00 64 FD | 	ret
2ab0c                 | 
2ab0c                 | _fatfs_cc_v_init
2ab0c                 | ' {
2ab0c                 | '     return 0;
2ab0c     00 FA 05 F6 | 	mov	result1, #0
2ab10                 | _fatfs_cc_v_init_ret
2ab10     2D 00 64 FD | 	ret
2ab14                 | 
2ab14                 | _fatfs_cc_v_deinit
2ab14     5D 01 00 FF 
2ab18     88 14 06 F6 | 	mov	arg02, ##@LR__4586
2ab1c     00 12 06 F6 | 	mov	arg01, #0
2ab20     00 16 06 F6 | 	mov	arg03, #0
2ab24     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2ab28     01 00 00 FF 
2ab2c     08 E4 05 F1 | 	add	objptr, ##520
2ab30     F2 12 02 FB | 	rdlong	arg01, objptr
2ab34     04 E4 05 F1 | 	add	objptr, #4
2ab38     F2 14 02 FB | 	rdlong	arg02, objptr
2ab3c     01 00 00 FF 
2ab40     0C E4 85 F1 | 	sub	objptr, ##524
2ab44     54 40 BF FD | 	call	#__system___freepins
2ab48                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ab48                 | '     _freepins(f_pinmask);
2ab48                 | '     return 0;
2ab48     00 FA 05 F6 | 	mov	result1, #0
2ab4c                 | _fatfs_cc_v_deinit_ret
2ab4c     2D 00 64 FD | 	ret
2ab50                 | 
2ab50                 | _fatfs_cc_get_vfs
2ab50     01 4A 05 F6 | 	mov	COUNT_, #1
2ab54     A8 00 A0 FD | 	call	#pushregs_
2ab58     09 1F 02 F6 | 	mov	local01, arg01
2ab5c     50 12 06 F6 | 	mov	arg01, #80
2ab60     30 57 BF FD | 	call	#__system___gc_alloc_managed
2ab64     FD 12 02 F6 | 	mov	arg01, result1
2ab68     F2 FA 01 F6 | 	mov	result1, objptr
2ab6c     00 28 04 FF 
2ab70     00 FA 45 F5 | 	or	result1, ##139460608
2ab74     09 FB 61 FC | 	wrlong	result1, arg01
2ab78     F2 FA 01 F6 | 	mov	result1, objptr
2ab7c     00 30 04 FF 
2ab80     00 FA 45 F5 | 	or	result1, ##140509184
2ab84     04 12 06 F1 | 	add	arg01, #4
2ab88     09 FB 61 FC | 	wrlong	result1, arg01
2ab8c     F2 FA 01 F6 | 	mov	result1, objptr
2ab90     00 38 04 FF 
2ab94     00 FA 45 F5 | 	or	result1, ##141557760
2ab98     04 12 06 F1 | 	add	arg01, #4
2ab9c     09 FB 61 FC | 	wrlong	result1, arg01
2aba0     F2 FA 01 F6 | 	mov	result1, objptr
2aba4     00 40 04 FF 
2aba8     00 FA 45 F5 | 	or	result1, ##142606336
2abac     04 12 06 F1 | 	add	arg01, #4
2abb0     09 FB 61 FC | 	wrlong	result1, arg01
2abb4     F2 FA 01 F6 | 	mov	result1, objptr
2abb8     00 48 04 FF 
2abbc     00 FA 45 F5 | 	or	result1, ##143654912
2abc0     04 12 06 F1 | 	add	arg01, #4
2abc4     09 FB 61 FC | 	wrlong	result1, arg01
2abc8     04 12 06 F1 | 	add	arg01, #4
2abcc     09 01 68 FC | 	wrlong	#0, arg01
2abd0     04 12 06 F1 | 	add	arg01, #4
2abd4     09 1F 62 FC | 	wrlong	local01, arg01
2abd8     04 12 06 F1 | 	add	arg01, #4
2abdc     09 01 68 FC | 	wrlong	#0, arg01
2abe0     F2 FA 01 F6 | 	mov	result1, objptr
2abe4     00 50 04 FF 
2abe8     00 FA 45 F5 | 	or	result1, ##144703488
2abec     04 12 06 F1 | 	add	arg01, #4
2abf0     09 FB 61 FC | 	wrlong	result1, arg01
2abf4     F2 FA 01 F6 | 	mov	result1, objptr
2abf8     00 58 04 FF 
2abfc     00 FA 45 F5 | 	or	result1, ##145752064
2ac00     04 12 06 F1 | 	add	arg01, #4
2ac04     09 FB 61 FC | 	wrlong	result1, arg01
2ac08     F2 FA 01 F6 | 	mov	result1, objptr
2ac0c     00 60 04 FF 
2ac10     00 FA 45 F5 | 	or	result1, ##146800640
2ac14     04 12 06 F1 | 	add	arg01, #4
2ac18     09 FB 61 FC | 	wrlong	result1, arg01
2ac1c     F2 FA 01 F6 | 	mov	result1, objptr
2ac20     00 68 04 FF 
2ac24     00 FA 45 F5 | 	or	result1, ##147849216
2ac28     04 12 06 F1 | 	add	arg01, #4
2ac2c     09 FB 61 FC | 	wrlong	result1, arg01
2ac30     F2 FA 01 F6 | 	mov	result1, objptr
2ac34     00 70 04 FF 
2ac38     00 FA 45 F5 | 	or	result1, ##148897792
2ac3c     04 12 06 F1 | 	add	arg01, #4
2ac40     09 FB 61 FC | 	wrlong	result1, arg01
2ac44     F2 FA 01 F6 | 	mov	result1, objptr
2ac48     00 78 04 FF 
2ac4c     00 FA 45 F5 | 	or	result1, ##149946368
2ac50     04 12 06 F1 | 	add	arg01, #4
2ac54     09 FB 61 FC | 	wrlong	result1, arg01
2ac58     F2 FA 01 F6 | 	mov	result1, objptr
2ac5c     00 80 04 FF 
2ac60     00 FA 45 F5 | 	or	result1, ##150994944
2ac64     04 12 06 F1 | 	add	arg01, #4
2ac68     09 FB 61 FC | 	wrlong	result1, arg01
2ac6c     F2 FA 01 F6 | 	mov	result1, objptr
2ac70     00 88 04 FF 
2ac74     00 FA 45 F5 | 	or	result1, ##152043520
2ac78     04 12 06 F1 | 	add	arg01, #4
2ac7c     09 FB 61 FC | 	wrlong	result1, arg01
2ac80     F2 FA 01 F6 | 	mov	result1, objptr
2ac84     00 90 04 FF 
2ac88     00 FA 45 F5 | 	or	result1, ##153092096
2ac8c     04 12 06 F1 | 	add	arg01, #4
2ac90     09 FB 61 FC | 	wrlong	result1, arg01
2ac94     F2 FA 01 F6 | 	mov	result1, objptr
2ac98     00 98 04 FF 
2ac9c     00 FA 45 F5 | 	or	result1, ##154140672
2aca0     04 12 06 F1 | 	add	arg01, #4
2aca4     09 FB 61 FC | 	wrlong	result1, arg01
2aca8     F2 FA 01 F6 | 	mov	result1, objptr
2acac     00 A0 04 FF 
2acb0     00 FA 45 F5 | 	or	result1, ##155189248
2acb4     04 12 06 F1 | 	add	arg01, #4
2acb8     09 FB 61 FC | 	wrlong	result1, arg01
2acbc     F2 FA 01 F6 | 	mov	result1, objptr
2acc0     00 A8 04 FF 
2acc4     00 FA 45 F5 | 	or	result1, ##156237824
2acc8     04 12 06 F1 | 	add	arg01, #4
2accc     09 FB 61 FC | 	wrlong	result1, arg01
2acd0     4C 12 86 F1 | 	sub	arg01, #76
2acd4                 | ' 
2acd4                 | '     v->close = &v_close;
2acd4                 | '     v->read = &v_read;
2acd4                 | '     v->write = &v_write;
2acd4                 | '     v->lseek = &v_lseek;
2acd4                 | '     v->ioctl = &v_ioctl;
2acd4                 | '     v->flush = 0;
2acd4                 | '     v->vfs_data = ptr;
2acd4                 | '     v->reserved = 0;
2acd4                 | ' 
2acd4                 | '     v->open = &v_open;
2acd4                 | '     v->creat = &v_creat;
2acd4                 | '     v->opendir = &v_opendir;
2acd4                 | '     v->closedir = &v_closedir;
2acd4                 | '     v->readdir = &v_readdir;
2acd4                 | '     v->stat = &v_stat;
2acd4                 | ' 
2acd4                 | '     v->mkdir = &v_mkdir;
2acd4                 | '     v->rmdir = &v_rmdir;
2acd4                 | ' 
2acd4                 | '     v->remove = &v_remove;
2acd4                 | '     v->rename = &v_rename;
2acd4                 | ' 
2acd4                 | '     v->init = &v_init;
2acd4                 | '     v->deinit = &v_deinit;
2acd4                 | ' 
2acd4                 | '     return v;
2acd4     09 FB 01 F6 | 	mov	result1, arg01
2acd8     A7 F0 03 F6 | 	mov	ptra, fp
2acdc     B2 00 A0 FD | 	call	#popregs_
2ace0                 | _fatfs_cc_get_vfs_ret
2ace0     2D 00 64 FD | 	ret
2ace4                 | 
2ace4                 | _fatfs_cc_xmit_mmc_1043
2ace4     01 00 00 FF 
2ace8     10 E4 05 F1 | 	add	objptr, ##528
2acec     F2 00 02 FB | 	rdlong	_var01, objptr
2acf0     08 E4 05 F1 | 	add	objptr, #8
2acf4     F2 02 02 FB | 	rdlong	_var02, objptr
2acf8     01 00 00 FF 
2acfc     18 E4 85 F1 | 	sub	objptr, ##536
2ad00     40 02 62 FD | 	dirl	_var02
2ad04     28 02 64 FD | 	setq	#1
2ad08     09 05 02 FB | 	rdlong	_var03, arg01
2ad0c     69 04 62 FD | 	rev	_var03
2ad10     1B 04 FE F9 | 	movbyts	_var03, #27
2ad14     01 05 22 FC | 	wypin	_var03, _var02
2ad18     0A 05 02 F6 | 	mov	_var03, arg02
2ad1c     02 14 4E F0 | 	shr	arg02, #2 wz
2ad20     03 04 66 F0 | 	shl	_var03, #3
2ad24     00 05 22 FC | 	wypin	_var03, _var01
2ad28     41 02 62 FD | 	dirh	_var02
2ad2c     08 12 06 F1 | 	add	arg01, #8
2ad30     69 06 62 FD | 	rev	_var04
2ad34     1B 06 FE F9 | 	movbyts	_var04, #27
2ad38                 | LR__4400
2ad38     01 07 22 5C |  if_ne	wypin	_var04, _var02
2ad3c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2ad40     04 12 06 51 |  if_ne	add	arg01, #4
2ad44     69 06 62 5D |  if_ne	rev	_var04
2ad48     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2ad4c                 | LR__4401
2ad4c     40 02 72 5D |  if_ne	testp	_var02 wc
2ad50     F8 FF 9F 1D |  if_a	jmp	#LR__4401
2ad54     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4400
2ad58                 | LR__4402
2ad58     40 00 72 FD | 	testp	_var01 wc
2ad5c     F8 FF 9F 3D |  if_ae	jmp	#LR__4402
2ad60     40 02 62 FD | 	dirl	_var02
2ad64     FF FF FF FF 
2ad68     01 FF 2B FC | 	wypin	##-1, _var02
2ad6c     41 02 62 FD | 	dirh	_var02
2ad70                 | _fatfs_cc_xmit_mmc_1043_ret
2ad70     2D 00 64 FD | 	ret
2ad74                 | 
2ad74                 | _fatfs_cc_rcvr_mmc_1050
2ad74     01 00 00 FF 
2ad78     10 E4 05 F1 | 	add	objptr, ##528
2ad7c     F2 00 02 FB | 	rdlong	_var01, objptr
2ad80     0C E4 05 F1 | 	add	objptr, #12
2ad84     F2 02 02 FB | 	rdlong	_var02, objptr
2ad88     01 00 00 FF 
2ad8c     1C E4 85 F1 | 	sub	objptr, ##540
2ad90     01 03 08 FC | 	akpin	_var02
2ad94     0A 05 0A F6 | 	mov	_var03, arg02 wz
2ad98     02 04 4E F0 | 	shr	_var03, #2 wz
2ad9c     30 00 90 AD |  if_e	jmp	#LR__4412
2ada0     02 07 02 F6 | 	mov	_var04, _var03
2ada4     05 06 66 F0 | 	shl	_var04, #5
2ada8     00 07 22 FC | 	wypin	_var04, _var01
2adac     01 7F 18 FC | 	wxpin	#63, _var02
2adb0                 | LR__4410
2adb0                 | LR__4411
2adb0     40 02 72 FD | 	testp	_var02 wc
2adb4     F8 FF 9F 3D |  if_ae	jmp	#LR__4411
2adb8     01 07 8A FA | 	rdpin	_var04, _var02
2adbc     69 06 62 FD | 	rev	_var04
2adc0     1B 06 FE F9 | 	movbyts	_var04, #27
2adc4     09 07 62 FC | 	wrlong	_var04, arg01
2adc8     04 12 06 F1 | 	add	arg01, #4
2adcc     F8 05 6E FB | 	djnz	_var03, #LR__4410
2add0                 | LR__4412
2add0     03 14 0E F5 | 	and	arg02, #3 wz
2add4     24 00 90 AD |  if_e	jmp	#LR__4415
2add8     01 4F 18 FC | 	wxpin	#39, _var02
2addc                 | LR__4413
2addc     00 11 28 FC | 	wypin	#8, _var01
2ade0                 | LR__4414
2ade0     40 02 72 FD | 	testp	_var02 wc
2ade4     F8 FF 9F 3D |  if_ae	jmp	#LR__4414
2ade8     01 07 8A FA | 	rdpin	_var04, _var02
2adec     69 06 62 FD | 	rev	_var04
2adf0     09 07 42 FC | 	wrbyte	_var04, arg01
2adf4     01 12 06 F1 | 	add	arg01, #1
2adf8     F8 15 6E FB | 	djnz	arg02, #LR__4413
2adfc                 | LR__4415
2adfc                 | _fatfs_cc_rcvr_mmc_1050_ret
2adfc     2D 00 64 FD | 	ret
2ae00                 | 
2ae00                 | _fatfs_cc_wait_ready_1054
2ae00     01 4A 05 F6 | 	mov	COUNT_, #1
2ae04     A8 00 A0 FD | 	call	#pushregs_
2ae08     10 F0 07 F1 | 	add	ptra, #16
2ae0c     1A FA 61 FD | 	getct	result1
2ae10     08 4E 05 F1 | 	add	fp, #8
2ae14     A7 FA 61 FC | 	wrlong	result1, fp
2ae18     14 1E 06 FB | 	rdlong	local01, #20
2ae1c     01 1E 46 F0 | 	shr	local01, #1
2ae20     04 4E 05 F1 | 	add	fp, #4
2ae24     A7 1E 62 FC | 	wrlong	local01, fp
2ae28     0C 4E 85 F1 | 	sub	fp, #12
2ae2c                 | ' {
2ae2c                 | ' 	BYTE d;
2ae2c                 | ' 	UINT tmr, tmout;
2ae2c                 | ' 
2ae2c                 | ' 	tmr = _cnt();
2ae2c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2ae2c                 | ' 	for(;;) {
2ae2c                 | LR__4420
2ae2c     04 4E 05 F1 | 	add	fp, #4
2ae30     A7 12 02 F6 | 	mov	arg01, fp
2ae34     04 4E 85 F1 | 	sub	fp, #4
2ae38     01 14 06 F6 | 	mov	arg02, #1
2ae3c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2ae40     04 4E 05 F1 | 	add	fp, #4
2ae44     A7 1E C2 FA | 	rdbyte	local01, fp
2ae48     04 4E 85 F1 | 	sub	fp, #4
2ae4c     FF 1E 0E F2 | 	cmp	local01, #255 wz
2ae50     01 FA 05 A6 |  if_e	mov	result1, #1
2ae54     28 00 90 AD |  if_e	jmp	#LR__4421
2ae58     1A FA 61 FD | 	getct	result1
2ae5c     08 4E 05 F1 | 	add	fp, #8
2ae60     A7 1E 02 FB | 	rdlong	local01, fp
2ae64     0F FB 81 F1 | 	sub	result1, local01
2ae68     04 4E 05 F1 | 	add	fp, #4
2ae6c     A7 1E 02 FB | 	rdlong	local01, fp
2ae70     0C 4E 85 F1 | 	sub	fp, #12
2ae74     0F FB 11 F2 | 	cmp	result1, local01 wc
2ae78     00 FA 05 36 |  if_ae	mov	result1, #0
2ae7c     AC FF 9F CD |  if_b	jmp	#LR__4420
2ae80                 | LR__4421
2ae80     A7 F0 03 F6 | 	mov	ptra, fp
2ae84     B2 00 A0 FD | 	call	#popregs_
2ae88                 | _fatfs_cc_wait_ready_1054_ret
2ae88     2D 00 64 FD | 	ret
2ae8c                 | 
2ae8c                 | _fatfs_cc_deselect_1060
2ae8c     00 4A 05 F6 | 	mov	COUNT_, #0
2ae90     A8 00 A0 FD | 	call	#pushregs_
2ae94     14 F0 07 F1 | 	add	ptra, #20
2ae98     01 00 00 FF 
2ae9c     14 E4 05 F1 | 	add	objptr, ##532
2aea0     F2 14 02 FB | 	rdlong	arg02, objptr
2aea4     04 4E 05 F1 | 	add	fp, #4
2aea8     A7 14 62 FC | 	wrlong	arg02, fp
2aeac     04 E4 85 F1 | 	sub	objptr, #4
2aeb0     F2 14 02 FB | 	rdlong	arg02, objptr
2aeb4     04 4E 05 F1 | 	add	fp, #4
2aeb8     A7 14 62 FC | 	wrlong	arg02, fp
2aebc     08 E4 05 F1 | 	add	objptr, #8
2aec0     F2 14 02 FB | 	rdlong	arg02, objptr
2aec4     04 4E 05 F1 | 	add	fp, #4
2aec8     A7 14 62 FC | 	wrlong	arg02, fp
2aecc     04 E4 05 F1 | 	add	objptr, #4
2aed0     F2 14 02 FB | 	rdlong	arg02, objptr
2aed4     01 00 00 FF 
2aed8     1C E4 85 F1 | 	sub	objptr, ##540
2aedc     04 4E 05 F1 | 	add	fp, #4
2aee0     A7 14 62 FC | 	wrlong	arg02, fp
2aee4     0C 4E 85 F1 | 	sub	fp, #12
2aee8     A7 12 02 FB | 	rdlong	arg01, fp
2aeec     04 4E 85 F1 | 	sub	fp, #4
2aef0     59 12 62 FD | 	drvh	arg01
2aef4     1F 20 64 FD | 	waitx	#16
2aef8     A7 12 02 F6 | 	mov	arg01, fp
2aefc     01 14 06 F6 | 	mov	arg02, #1
2af00     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2af04     A7 F0 03 F6 | 	mov	ptra, fp
2af08     B2 00 A0 FD | 	call	#popregs_
2af0c                 | _fatfs_cc_deselect_1060_ret
2af0c     2D 00 64 FD | 	ret
2af10                 | 
2af10                 | _fatfs_cc_select_1064
2af10     00 4A 05 F6 | 	mov	COUNT_, #0
2af14     A8 00 A0 FD | 	call	#pushregs_
2af18     10 F0 07 F1 | 	add	ptra, #16
2af1c     01 00 00 FF 
2af20     14 E4 05 F1 | 	add	objptr, ##532
2af24     F2 14 02 FB | 	rdlong	arg02, objptr
2af28     08 4E 05 F1 | 	add	fp, #8
2af2c     A7 14 62 FC | 	wrlong	arg02, fp
2af30     08 E4 05 F1 | 	add	objptr, #8
2af34     F2 12 02 FB | 	rdlong	arg01, objptr
2af38     01 00 00 FF 
2af3c     1C E4 85 F1 | 	sub	objptr, ##540
2af40     04 4E 05 F1 | 	add	fp, #4
2af44     A7 12 62 FC | 	wrlong	arg01, fp
2af48     50 12 62 FD | 	fltl	arg01
2af4c     04 4E 85 F1 | 	sub	fp, #4
2af50     A7 12 02 FB | 	rdlong	arg01, fp
2af54     58 12 62 FD | 	drvl	arg01
2af58     1F 20 64 FD | 	waitx	#16
2af5c     04 4E 05 F1 | 	add	fp, #4
2af60     A7 12 02 FB | 	rdlong	arg01, fp
2af64     41 12 62 FD | 	dirh	arg01
2af68     08 4E 85 F1 | 	sub	fp, #8
2af6c     A7 12 02 F6 | 	mov	arg01, fp
2af70     04 4E 85 F1 | 	sub	fp, #4
2af74     01 14 06 F6 | 	mov	arg02, #1
2af78     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2af7c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1054
2af80     00 FA 0D F2 | 	cmp	result1, #0 wz
2af84     01 FA 05 56 |  if_ne	mov	result1, #1
2af88     08 00 90 5D |  if_ne	jmp	#LR__4430
2af8c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1060
2af90                 | ' 
2af90                 | ' 	deselect();
2af90                 | ' 	return 0;
2af90     00 FA 05 F6 | 	mov	result1, #0
2af94                 | LR__4430
2af94     A7 F0 03 F6 | 	mov	ptra, fp
2af98     B2 00 A0 FD | 	call	#popregs_
2af9c                 | _fatfs_cc_select_1064_ret
2af9c     2D 00 64 FD | 	ret
2afa0                 | 
2afa0                 | _fatfs_cc_rcvr_datablock_1068
2afa0     01 4A 05 F6 | 	mov	COUNT_, #1
2afa4     A8 00 A0 FD | 	call	#pushregs_
2afa8     18 F0 07 F1 | 	add	ptra, #24
2afac     04 4E 05 F1 | 	add	fp, #4
2afb0     A7 12 62 FC | 	wrlong	arg01, fp
2afb4     04 4E 05 F1 | 	add	fp, #4
2afb8     A7 14 62 FC | 	wrlong	arg02, fp
2afbc     1A FA 61 FD | 	getct	result1
2afc0     08 4E 05 F1 | 	add	fp, #8
2afc4     A7 FA 61 FC | 	wrlong	result1, fp
2afc8     14 1E 06 FB | 	rdlong	local01, #20
2afcc     03 1E 46 F0 | 	shr	local01, #3
2afd0     04 4E 05 F1 | 	add	fp, #4
2afd4     A7 1E 62 FC | 	wrlong	local01, fp
2afd8     14 4E 85 F1 | 	sub	fp, #20
2afdc                 | ' 	BYTE *buff,
2afdc                 | ' 	UINT btr
2afdc                 | ' )
2afdc                 | ' {
2afdc                 | ' 	BYTE d[2];
2afdc                 | ' 	UINT tmr, tmout;
2afdc                 | ' 
2afdc                 | ' 	tmr = _cnt();
2afdc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2afdc                 | ' 	for(;;) {
2afdc                 | LR__4440
2afdc     0C 4E 05 F1 | 	add	fp, #12
2afe0     A7 12 02 F6 | 	mov	arg01, fp
2afe4     0C 4E 85 F1 | 	sub	fp, #12
2afe8     01 14 06 F6 | 	mov	arg02, #1
2afec     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2aff0     0C 4E 05 F1 | 	add	fp, #12
2aff4     A7 1E C2 FA | 	rdbyte	local01, fp
2aff8     0C 4E 85 F1 | 	sub	fp, #12
2affc     FF 1E 0E F2 | 	cmp	local01, #255 wz
2b000     28 00 90 5D |  if_ne	jmp	#LR__4441
2b004     1A FA 61 FD | 	getct	result1
2b008     FD 1E 02 F6 | 	mov	local01, result1
2b00c     10 4E 05 F1 | 	add	fp, #16
2b010     A7 14 02 FB | 	rdlong	arg02, fp
2b014     0A 1F 82 F1 | 	sub	local01, arg02
2b018     04 4E 05 F1 | 	add	fp, #4
2b01c     A7 14 02 FB | 	rdlong	arg02, fp
2b020     14 4E 85 F1 | 	sub	fp, #20
2b024     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2b028     B0 FF 9F CD |  if_b	jmp	#LR__4440
2b02c                 | LR__4441
2b02c     0C 4E 05 F1 | 	add	fp, #12
2b030     A7 1E C2 FA | 	rdbyte	local01, fp
2b034     0C 4E 85 F1 | 	sub	fp, #12
2b038     FE 1E 0E F2 | 	cmp	local01, #254 wz
2b03c     00 FA 05 56 |  if_ne	mov	result1, #0
2b040     30 00 90 5D |  if_ne	jmp	#LR__4442
2b044     04 4E 05 F1 | 	add	fp, #4
2b048     A7 12 02 FB | 	rdlong	arg01, fp
2b04c     04 4E 05 F1 | 	add	fp, #4
2b050     A7 14 02 FB | 	rdlong	arg02, fp
2b054     08 4E 85 F1 | 	sub	fp, #8
2b058     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b05c     0C 4E 05 F1 | 	add	fp, #12
2b060     A7 12 02 F6 | 	mov	arg01, fp
2b064     0C 4E 85 F1 | 	sub	fp, #12
2b068     02 14 06 F6 | 	mov	arg02, #2
2b06c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b070                 | ' 
2b070                 | ' 	rcvr_mmc(buff, btr);
2b070                 | ' 	rcvr_mmc(d, 2);
2b070                 | ' 
2b070                 | ' 	return 1;
2b070     01 FA 05 F6 | 	mov	result1, #1
2b074                 | LR__4442
2b074     A7 F0 03 F6 | 	mov	ptra, fp
2b078     B2 00 A0 FD | 	call	#popregs_
2b07c                 | _fatfs_cc_rcvr_datablock_1068_ret
2b07c     2D 00 64 FD | 	ret
2b080                 | 
2b080                 | _fatfs_cc_xmit_datablock_1070
2b080     00 4A 05 F6 | 	mov	COUNT_, #0
2b084     A8 00 A0 FD | 	call	#pushregs_
2b088     10 F0 07 F1 | 	add	ptra, #16
2b08c     04 4E 05 F1 | 	add	fp, #4
2b090     A7 12 62 FC | 	wrlong	arg01, fp
2b094     04 4E 05 F1 | 	add	fp, #4
2b098     A7 14 42 FC | 	wrbyte	arg02, fp
2b09c     08 4E 85 F1 | 	sub	fp, #8
2b0a0     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1054
2b0a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b0a8     00 FA 05 A6 |  if_e	mov	result1, #0
2b0ac     90 00 90 AD |  if_e	jmp	#LR__4451
2b0b0     08 4E 05 F1 | 	add	fp, #8
2b0b4     A7 14 C2 FA | 	rdbyte	arg02, fp
2b0b8     04 4E 05 F1 | 	add	fp, #4
2b0bc     A7 14 42 FC | 	wrbyte	arg02, fp
2b0c0     A7 12 02 F6 | 	mov	arg01, fp
2b0c4     0C 4E 85 F1 | 	sub	fp, #12
2b0c8     01 14 06 F6 | 	mov	arg02, #1
2b0cc     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2b0d0     08 4E 05 F1 | 	add	fp, #8
2b0d4     A7 14 C2 FA | 	rdbyte	arg02, fp
2b0d8     08 4E 85 F1 | 	sub	fp, #8
2b0dc     FD 14 0E F2 | 	cmp	arg02, #253 wz
2b0e0     58 00 90 AD |  if_e	jmp	#LR__4450
2b0e4     04 4E 05 F1 | 	add	fp, #4
2b0e8     A7 12 02 FB | 	rdlong	arg01, fp
2b0ec     04 4E 85 F1 | 	sub	fp, #4
2b0f0     09 14 C6 F9 | 	decod	arg02, #9
2b0f4     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2b0f8     0C 4E 05 F1 | 	add	fp, #12
2b0fc     A7 12 02 F6 | 	mov	arg01, fp
2b100     0C 4E 85 F1 | 	sub	fp, #12
2b104     02 14 06 F6 | 	mov	arg02, #2
2b108     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b10c     0C 4E 05 F1 | 	add	fp, #12
2b110     A7 12 02 F6 | 	mov	arg01, fp
2b114     0C 4E 85 F1 | 	sub	fp, #12
2b118     01 14 06 F6 | 	mov	arg02, #1
2b11c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b120     0C 4E 05 F1 | 	add	fp, #12
2b124     A7 14 C2 FA | 	rdbyte	arg02, fp
2b128     0C 4E 85 F1 | 	sub	fp, #12
2b12c     1F 14 06 F5 | 	and	arg02, #31
2b130     05 14 0E F2 | 	cmp	arg02, #5 wz
2b134                 | ' 			return 0;
2b134     00 FA 05 56 |  if_ne	mov	result1, #0
2b138     04 00 90 5D |  if_ne	jmp	#LR__4451
2b13c                 | LR__4450
2b13c                 | ' 	}
2b13c                 | ' 
2b13c                 | ' 	return 1;
2b13c     01 FA 05 F6 | 	mov	result1, #1
2b140                 | LR__4451
2b140     A7 F0 03 F6 | 	mov	ptra, fp
2b144     B2 00 A0 FD | 	call	#popregs_
2b148                 | _fatfs_cc_xmit_datablock_1070_ret
2b148     2D 00 64 FD | 	ret
2b14c                 | 
2b14c                 | _fatfs_cc_send_cmd_1074
2b14c     01 4A 05 F6 | 	mov	COUNT_, #1
2b150     A8 00 A0 FD | 	call	#pushregs_
2b154     1C F0 07 F1 | 	add	ptra, #28
2b158                 | _fatfs_cc_send_cmd_1074_enter
2b158     04 4E 05 F1 | 	add	fp, #4
2b15c     A7 12 42 FC | 	wrbyte	arg01, fp
2b160     04 4E 05 F1 | 	add	fp, #4
2b164     A7 14 62 FC | 	wrlong	arg02, fp
2b168     04 4E 85 F1 | 	sub	fp, #4
2b16c     A7 FA C1 FA | 	rdbyte	result1, fp
2b170     04 4E 85 F1 | 	sub	fp, #4
2b174     80 FA CD F7 | 	test	result1, #128 wz
2b178     44 00 90 AD |  if_e	jmp	#LR__4460
2b17c     04 4E 05 F1 | 	add	fp, #4
2b180     A7 14 C2 FA | 	rdbyte	arg02, fp
2b184     7F 14 06 F5 | 	and	arg02, #127
2b188     A7 14 42 FC | 	wrbyte	arg02, fp
2b18c     04 4E 85 F1 | 	sub	fp, #4
2b190     37 12 06 F6 | 	mov	arg01, #55
2b194     00 14 06 F6 | 	mov	arg02, #0
2b198     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1074
2b19c     0C 4E 05 F1 | 	add	fp, #12
2b1a0     A7 FA 41 FC | 	wrbyte	result1, fp
2b1a4     A7 14 C2 FA | 	rdbyte	arg02, fp
2b1a8     0C 4E 85 F1 | 	sub	fp, #12
2b1ac     02 14 16 F2 | 	cmp	arg02, #2 wc
2b1b0     0C 4E 05 31 |  if_ae	add	fp, #12
2b1b4     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2b1b8     0C 4E 85 31 |  if_ae	sub	fp, #12
2b1bc     6C 01 90 3D |  if_ae	jmp	#LR__4464
2b1c0                 | LR__4460
2b1c0     04 4E 05 F1 | 	add	fp, #4
2b1c4     A7 14 C2 FA | 	rdbyte	arg02, fp
2b1c8     04 4E 85 F1 | 	sub	fp, #4
2b1cc     0C 14 0E F2 | 	cmp	arg02, #12 wz
2b1d0     14 00 90 AD |  if_e	jmp	#LR__4461
2b1d4     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1060
2b1d8     34 FD BF FD | 	call	#_fatfs_cc_select_1064
2b1dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b1e0     FF FA 05 A6 |  if_e	mov	result1, #255
2b1e4     44 01 90 AD |  if_e	jmp	#LR__4464
2b1e8                 | LR__4461
2b1e8     04 4E 05 F1 | 	add	fp, #4
2b1ec     A7 14 C2 FA | 	rdbyte	arg02, fp
2b1f0     40 FA 05 F6 | 	mov	result1, #64
2b1f4     0A FB 41 F5 | 	or	result1, arg02
2b1f8     10 4E 05 F1 | 	add	fp, #16
2b1fc     A7 FA 41 FC | 	wrbyte	result1, fp
2b200     0C 4E 85 F1 | 	sub	fp, #12
2b204     A7 FA 01 FB | 	rdlong	result1, fp
2b208     18 FA 45 F0 | 	shr	result1, #24
2b20c     0D 4E 05 F1 | 	add	fp, #13
2b210     A7 FA 41 FC | 	wrbyte	result1, fp
2b214     0D 4E 85 F1 | 	sub	fp, #13
2b218     A7 FA 01 FB | 	rdlong	result1, fp
2b21c     10 FA 45 F0 | 	shr	result1, #16
2b220     0E 4E 05 F1 | 	add	fp, #14
2b224     A7 FA 41 FC | 	wrbyte	result1, fp
2b228     0E 4E 85 F1 | 	sub	fp, #14
2b22c     A7 FA 01 FB | 	rdlong	result1, fp
2b230     08 FA 45 F0 | 	shr	result1, #8
2b234     0F 4E 05 F1 | 	add	fp, #15
2b238     A7 FA 41 FC | 	wrbyte	result1, fp
2b23c     0F 4E 85 F1 | 	sub	fp, #15
2b240     A7 FA 01 FB | 	rdlong	result1, fp
2b244     10 4E 05 F1 | 	add	fp, #16
2b248     A7 FA 41 FC | 	wrbyte	result1, fp
2b24c     0C 4E 85 F1 | 	sub	fp, #12
2b250     A7 02 48 FC | 	wrbyte	#1, fp
2b254     08 4E 85 F1 | 	sub	fp, #8
2b258     A7 FA C9 FA | 	rdbyte	result1, fp wz
2b25c     04 4E 85 F1 | 	sub	fp, #4
2b260     0C 4E 05 A1 |  if_e	add	fp, #12
2b264     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2b268     0C 4E 85 A1 |  if_e	sub	fp, #12
2b26c     04 4E 05 F1 | 	add	fp, #4
2b270     A7 FA C1 FA | 	rdbyte	result1, fp
2b274     04 4E 85 F1 | 	sub	fp, #4
2b278     08 FA 0D F2 | 	cmp	result1, #8 wz
2b27c     0C 4E 05 A1 |  if_e	add	fp, #12
2b280     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2b284     0C 4E 85 A1 |  if_e	sub	fp, #12
2b288     0C 4E 05 F1 | 	add	fp, #12
2b28c     A7 14 C2 FA | 	rdbyte	arg02, fp
2b290     0D 4E 05 F1 | 	add	fp, #13
2b294     A7 14 42 FC | 	wrbyte	arg02, fp
2b298     05 4E 85 F1 | 	sub	fp, #5
2b29c     A7 12 02 F6 | 	mov	arg01, fp
2b2a0     14 4E 85 F1 | 	sub	fp, #20
2b2a4     06 14 06 F6 | 	mov	arg02, #6
2b2a8     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2b2ac     04 4E 05 F1 | 	add	fp, #4
2b2b0     A7 1E C2 FA | 	rdbyte	local01, fp
2b2b4     04 4E 85 F1 | 	sub	fp, #4
2b2b8     0C 1E 0E F2 | 	cmp	local01, #12 wz
2b2bc     10 4E 05 A1 |  if_e	add	fp, #16
2b2c0     A7 12 02 A6 |  if_e	mov	arg01, fp
2b2c4     10 4E 85 A1 |  if_e	sub	fp, #16
2b2c8     01 14 06 A6 |  if_e	mov	arg02, #1
2b2cc     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1050
2b2d0     0C 4E 05 F1 | 	add	fp, #12
2b2d4     A7 14 48 FC | 	wrbyte	#10, fp
2b2d8     0C 4E 85 F1 | 	sub	fp, #12
2b2dc                 | ' 	n = 10;
2b2dc                 | ' 	do
2b2dc                 | LR__4462
2b2dc     10 4E 05 F1 | 	add	fp, #16
2b2e0     A7 12 02 F6 | 	mov	arg01, fp
2b2e4     10 4E 85 F1 | 	sub	fp, #16
2b2e8     01 14 06 F6 | 	mov	arg02, #1
2b2ec     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b2f0     10 4E 05 F1 | 	add	fp, #16
2b2f4     A7 1E C2 FA | 	rdbyte	local01, fp
2b2f8     10 4E 85 F1 | 	sub	fp, #16
2b2fc     80 1E CE F7 | 	test	local01, #128 wz
2b300     1C 00 90 AD |  if_e	jmp	#LR__4463
2b304     0C 4E 05 F1 | 	add	fp, #12
2b308     A7 1E C2 FA | 	rdbyte	local01, fp
2b30c     01 1E 86 F1 | 	sub	local01, #1
2b310     A7 1E 42 FC | 	wrbyte	local01, fp
2b314     A7 1E CA FA | 	rdbyte	local01, fp wz
2b318     0C 4E 85 F1 | 	sub	fp, #12
2b31c     BC FF 9F 5D |  if_ne	jmp	#LR__4462
2b320                 | LR__4463
2b320                 | ' 
2b320                 | ' 	return d;
2b320     10 4E 05 F1 | 	add	fp, #16
2b324     A7 FA C1 FA | 	rdbyte	result1, fp
2b328     10 4E 85 F1 | 	sub	fp, #16
2b32c                 | LR__4464
2b32c     A7 F0 03 F6 | 	mov	ptra, fp
2b330     B2 00 A0 FD | 	call	#popregs_
2b334                 | _fatfs_cc_send_cmd_1074_ret
2b334     2D 00 64 FD | 	ret
2b338                 | 
2b338                 | _fatfs_cc_disk_deinitialize
2b338     03 4A 05 F6 | 	mov	COUNT_, #3
2b33c     A8 00 A0 FD | 	call	#pushregs_
2b340     00 12 4E F2 | 	cmps	arg01, #0 wz
2b344     01 00 00 FF 
2b348     14 E4 05 F1 | 	add	objptr, ##532
2b34c     F2 12 02 FB | 	rdlong	arg01, objptr
2b350     04 E4 85 F1 | 	sub	objptr, #4
2b354     F2 1E 02 FB | 	rdlong	local01, objptr
2b358     08 E4 05 F1 | 	add	objptr, #8
2b35c     F2 20 02 FB | 	rdlong	local02, objptr
2b360     04 E4 05 F1 | 	add	objptr, #4
2b364     F2 22 02 FB | 	rdlong	local03, objptr
2b368     01 00 00 FF 
2b36c     1C E4 85 F1 | 	sub	objptr, ##540
2b370                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b370                 | '         return RES_NOTRDY;
2b370     03 FA 05 56 |  if_ne	mov	result1, #3
2b374     2C 00 90 5D |  if_ne	jmp	#LR__4470
2b378     50 12 62 FD | 	fltl	arg01
2b37c     09 01 08 FC | 	wrpin	#0, arg01
2b380     50 1E 62 FD | 	fltl	local01
2b384     0F 01 08 FC | 	wrpin	#0, local01
2b388     50 20 62 FD | 	fltl	local02
2b38c     10 01 08 FC | 	wrpin	#0, local02
2b390     50 22 62 FD | 	fltl	local03
2b394     11 01 08 FC | 	wrpin	#0, local03
2b398     0A 12 06 F6 | 	mov	arg01, #10
2b39c     A0 13 BF FD | 	call	#__system___waitms
2b3a0                 | '     }
2b3a0                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b3a0                 | '     _pinclear(PIN_SS);
2b3a0                 | '     _pinclear(PIN_CLK);
2b3a0                 | '     _pinclear(PIN_DI);
2b3a0                 | '     _pinclear(PIN_DO);
2b3a0                 | ' 
2b3a0                 | '     _waitms(10);
2b3a0                 | ' 
2b3a0                 | '     return 0;
2b3a0     00 FA 05 F6 | 	mov	result1, #0
2b3a4                 | LR__4470
2b3a4     A7 F0 03 F6 | 	mov	ptra, fp
2b3a8     B2 00 A0 FD | 	call	#popregs_
2b3ac                 | _fatfs_cc_disk_deinitialize_ret
2b3ac     2D 00 64 FD | 	ret
2b3b0                 | 
2b3b0                 | _fatfs_cc_gettimeofday
2b3b0     04 4A 05 F6 | 	mov	COUNT_, #4
2b3b4     A8 00 A0 FD | 	call	#pushregs_
2b3b8     09 1F 02 F6 | 	mov	local01, arg01
2b3bc     5C 0F BF FD | 	call	#__system___getus
2b3c0     FD 12 02 F6 | 	mov	arg01, result1
2b3c4     02 00 00 FF 
2b3c8     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2b3cc     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2b3d0     09 FB 01 F6 | 	mov	result1, arg01
2b3d4     10 FB 81 F1 | 	sub	result1, local02
2b3d8     A1 07 00 FF 
2b3dc     40 FA 15 FD | 	qdiv	result1, ##1000000
2b3e0     02 00 00 FF 
2b3e4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2b3e8     18 20 62 FD | 	getqx	local02
2b3ec     A1 07 00 FF 
2b3f0     40 FA 15 FD | 	qdiv	result1, ##1000000
2b3f4     00 20 0E F2 | 	cmp	local02, #0 wz
2b3f8     19 22 62 FD | 	getqy	local03
2b3fc     28 00 90 AD |  if_e	jmp	#LR__4480
2b400     02 00 00 FF 
2b404     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2b408     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2b40c     10 25 02 F1 | 	add	local04, local02
2b410     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2b414     11 13 82 F1 | 	sub	arg01, local03
2b418     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2b41c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2b420     02 00 00 FF 
2b424     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2b428                 | LR__4480
2b428     02 00 00 FF 
2b42c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2b430     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2b434     02 00 00 FF 
2b438     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2b43c     0F 25 62 FC | 	wrlong	local04, local01
2b440     04 1E 06 F1 | 	add	local01, #4
2b444     0F 23 62 FC | 	wrlong	local03, local01
2b448                 | '         lastsec += secs;
2b448                 | '         lastus = now - leftover;
2b448                 | '     }
2b448                 | '     tv->tv_sec = lastsec;
2b448                 | '     tv->tv_usec = leftover;
2b448                 | '     return 0;
2b448     00 FA 05 F6 | 	mov	result1, #0
2b44c     A7 F0 03 F6 | 	mov	ptra, fp
2b450     B2 00 A0 FD | 	call	#popregs_
2b454                 | _fatfs_cc_gettimeofday_ret
2b454     2D 00 64 FD | 	ret
2b458                 | 
2b458                 | _fatfs_cc__is_leap_year
2b458     09 FB 51 F6 | 	abs	result1, arg01 wc
2b45c     03 FA 05 F5 | 	and	result1, #3
2b460     FD FA 89 F6 | 	negc	result1, result1 wz
2b464     38 00 90 5D |  if_ne	jmp	#LR__4491
2b468     09 FB 51 F6 | 	abs	result1, arg01 wc
2b46c     64 FA 15 FD | 	qdiv	result1, #100
2b470     19 FA 61 FD | 	getqy	result1
2b474     FD FA 89 F6 | 	negc	result1, result1 wz
2b478     1C 00 90 5D |  if_ne	jmp	#LR__4490
2b47c     09 FB 51 F6 | 	abs	result1, arg01 wc
2b480     90 FB 15 FD | 	qdiv	result1, #400
2b484                 | '       return (0 == y % 400);
2b484     00 FA 05 F6 | 	mov	result1, #0
2b488     19 00 62 FD | 	getqy	_var01
2b48c     00 01 8A F6 | 	negc	_var01, _var01 wz
2b490     01 FA 05 A6 |  if_e	mov	result1, #1
2b494     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2b498                 | LR__4490
2b498                 | '     return 1;
2b498     01 FA 05 F6 | 	mov	result1, #1
2b49c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2b4a0                 | LR__4491
2b4a0                 | '   }
2b4a0                 | '   return 0;
2b4a0     00 FA 05 F6 | 	mov	result1, #0
2b4a4                 | _fatfs_cc__is_leap_year_ret
2b4a4     2D 00 64 FD | 	ret
2b4a8                 | 
2b4a8                 | _fatfs_cc___tzoffset
2b4a8     09 01 0A F6 | 	mov	_var01, arg01 wz
2b4ac     FF FF FF FF 
2b4b0     0A FF 6B FC | 	wrlong	##-1, arg02
2b4b4     01 02 06 F6 | 	mov	_var02, #1
2b4b8     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2b4bc                 | '                 return 0;
2b4bc     00 FA 05 A6 |  if_e	mov	result1, #0
2b4c0     94 02 90 AD |  if_e	jmp	#LR__4517
2b4c4     0A 01 68 FC | 	wrlong	#0, arg02
2b4c8     02 00 00 FF 
2b4cc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b4d0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2b4d4                 | ' 
2b4d4                 | '        *hasdst = 0;
2b4d4                 | ' 
2b4d4                 | ' 	n = stdname;
2b4d4                 | '         while (*s && isalpha(*s)) {
2b4d4     02 00 00 FF 
2b4d8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2b4dc     97 28 48 FB | 	callpa	#(@LR__4501-@LR__4500)>>2,fcache_load_ptr_
2b4e0                 | LR__4500
2b4e0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2b4e4     48 00 90 AD |  if_e	jmp	#LR__4502
2b4e8     00 13 C2 FA | 	rdbyte	arg01, _var01
2b4ec                 | ' {
2b4ec                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b4ec     80 12 36 F3 | 	fle	arg01, #128 wc
2b4f0                 | '     return __ctype[c];
2b4f0     02 00 00 FF 
2b4f4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b4f8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b4fc     09 FB C1 FA | 	rdbyte	result1, arg01
2b500     02 00 00 FF 
2b504     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b508     0C FA CD F7 | 	test	result1, #12 wz
2b50c     20 00 90 AD |  if_e	jmp	#LR__4502
2b510     00 09 02 F6 | 	mov	_var05, _var01
2b514     00 0B 02 F6 | 	mov	_var06, _var01
2b518     01 0A 06 F1 | 	add	_var06, #1
2b51c     04 0D C2 FA | 	rdbyte	_var07, _var05
2b520     05 01 02 F6 | 	mov	_var01, _var06
2b524     03 0D 42 FC | 	wrbyte	_var07, _var04
2b528     01 06 06 F1 | 	add	_var04, #1
2b52c     B0 FF 9F FD | 	jmp	#LR__4500
2b530                 | LR__4501
2b530                 | LR__4502
2b530     03 01 48 FC | 	wrbyte	#0, _var04
2b534     00 0E 06 F6 | 	mov	_var08, #0
2b538     00 05 C2 FA | 	rdbyte	_var03, _var01
2b53c     2D 04 0E F2 | 	cmp	_var03, #45 wz
2b540     01 02 66 A6 |  if_e	neg	_var02, #1
2b544     01 00 06 A1 |  if_e	add	_var01, #1
2b548     97 28 48 FB | 	callpa	#(@LR__4504-@LR__4503)>>2,fcache_load_ptr_
2b54c                 | '                 sgn = -1;
2b54c                 | '                 s++;
2b54c                 | '         }
2b54c                 | '         while (isdigit(*s)) {
2b54c                 | LR__4503
2b54c     00 13 C2 FA | 	rdbyte	arg01, _var01
2b550                 | ' {
2b550                 | '   return  (__ctype_get(c) & 0x02 ) ;
2b550     80 12 36 F3 | 	fle	arg01, #128 wc
2b554                 | '     return __ctype[c];
2b554     02 00 00 FF 
2b558     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b55c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b560     09 FB C1 FA | 	rdbyte	result1, arg01
2b564     02 00 00 FF 
2b568     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b56c     02 FA CD F7 | 	test	result1, #2 wz
2b570     28 00 90 AD |  if_e	jmp	#LR__4505
2b574     07 05 02 F6 | 	mov	_var03, _var08
2b578     02 04 66 F0 | 	shl	_var03, #2
2b57c     07 05 02 F1 | 	add	_var03, _var08
2b580     01 04 66 F0 | 	shl	_var03, #1
2b584     00 09 C2 FA | 	rdbyte	_var05, _var01
2b588     30 08 86 F1 | 	sub	_var05, #48
2b58c     04 05 02 F1 | 	add	_var03, _var05
2b590     02 0F 02 F6 | 	mov	_var08, _var03
2b594     01 00 06 F1 | 	add	_var01, #1
2b598     B0 FF 9F FD | 	jmp	#LR__4503
2b59c                 | LR__4504
2b59c                 | LR__4505
2b59c     07 00 00 FF 
2b5a0     10 0E 06 FD | 	qmul	_var08, ##3600
2b5a4     00 05 C2 FA | 	rdbyte	_var03, _var01
2b5a8     3A 04 0E F2 | 	cmp	_var03, #58 wz
2b5ac     18 10 62 FD | 	getqx	_var09
2b5b0     70 00 90 5D |  if_ne	jmp	#LR__4509
2b5b4     00 0E 06 F6 | 	mov	_var08, #0
2b5b8     01 00 06 F1 | 	add	_var01, #1
2b5bc     97 28 48 FB | 	callpa	#(@LR__4507-@LR__4506)>>2,fcache_load_ptr_
2b5c0                 | '                 x = 0;
2b5c0                 | '                 s++;
2b5c0                 | '                 while (isdigit(*s)) {
2b5c0                 | LR__4506
2b5c0     00 13 C2 FA | 	rdbyte	arg01, _var01
2b5c4                 | ' {
2b5c4                 | '   return  (__ctype_get(c) & 0x02 ) ;
2b5c4     80 12 36 F3 | 	fle	arg01, #128 wc
2b5c8                 | '     return __ctype[c];
2b5c8     02 00 00 FF 
2b5cc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b5d0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b5d4     09 FB C1 FA | 	rdbyte	result1, arg01
2b5d8     02 00 00 FF 
2b5dc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b5e0     02 FA CD F7 | 	test	result1, #2 wz
2b5e4     28 00 90 AD |  if_e	jmp	#LR__4508
2b5e8     07 05 02 F6 | 	mov	_var03, _var08
2b5ec     02 04 66 F0 | 	shl	_var03, #2
2b5f0     07 05 02 F1 | 	add	_var03, _var08
2b5f4     01 04 66 F0 | 	shl	_var03, #1
2b5f8     00 09 C2 FA | 	rdbyte	_var05, _var01
2b5fc     30 08 86 F1 | 	sub	_var05, #48
2b600     04 05 02 F1 | 	add	_var03, _var05
2b604     02 0F 02 F6 | 	mov	_var08, _var03
2b608     01 00 06 F1 | 	add	_var01, #1
2b60c     B0 FF 9F FD | 	jmp	#LR__4506
2b610                 | LR__4507
2b610                 | LR__4508
2b610     07 0D 02 F6 | 	mov	_var07, _var08
2b614     04 0C 66 F0 | 	shl	_var07, #4
2b618     07 0D 82 F1 | 	sub	_var07, _var08
2b61c     02 0C 66 F0 | 	shl	_var07, #2
2b620     06 11 02 F1 | 	add	_var09, _var07
2b624                 | LR__4509
2b624     02 00 00 FF 
2b628     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b62c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2b630     00 13 C2 FA | 	rdbyte	arg01, _var01
2b634                 | ' {
2b634                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b634     80 12 36 F3 | 	fle	arg01, #128 wc
2b638                 | '     return __ctype[c];
2b638     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2b63c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b640     09 FB C1 FA | 	rdbyte	result1, arg01
2b644     02 00 00 FF 
2b648     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b64c     0C FA CD F7 | 	test	result1, #12 wz
2b650     50 00 90 AD |  if_e	jmp	#LR__4512
2b654     0A 03 68 FC | 	wrlong	#1, arg02
2b658                 | '                 *hasdst = 1;
2b658                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2b658                 | LR__4510
2b658     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2b65c     44 00 90 AD |  if_e	jmp	#LR__4511
2b660     00 13 C2 FA | 	rdbyte	arg01, _var01
2b664                 | ' {
2b664                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b664     80 12 36 F3 | 	fle	arg01, #128 wc
2b668                 | '     return __ctype[c];
2b668     02 00 00 FF 
2b66c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b670     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b674     09 FB C1 FA | 	rdbyte	result1, arg01
2b678     02 00 00 FF 
2b67c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b680     0C FA CD F7 | 	test	result1, #12 wz
2b684     1C 00 90 AD |  if_e	jmp	#LR__4511
2b688     00 0B 02 F6 | 	mov	_var06, _var01
2b68c     01 0A 06 F1 | 	add	_var06, #1
2b690     00 0D C2 FA | 	rdbyte	_var07, _var01
2b694     05 01 02 F6 | 	mov	_var01, _var06
2b698     03 0D 42 FC | 	wrbyte	_var07, _var04
2b69c     01 06 06 F1 | 	add	_var04, #1
2b6a0     B4 FF 9F FD | 	jmp	#LR__4510
2b6a4                 | LR__4511
2b6a4                 | LR__4512
2b6a4     03 01 48 FC | 	wrbyte	#0, _var04
2b6a8     02 00 00 FF 
2b6ac     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b6b0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2b6b4     02 00 00 FF 
2b6b8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2b6bc     20 00 90 AD |  if_e	jmp	#LR__4513
2b6c0     02 00 00 FF 
2b6c4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b6c8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b6cc     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2b6d0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b6d4     02 00 00 FF 
2b6d8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2b6dc     1C 00 90 FD | 	jmp	#LR__4514
2b6e0                 | LR__4513
2b6e0     02 00 00 FF 
2b6e4     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2b6e8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b6ec     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2b6f0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b6f4     02 00 00 FF 
2b6f8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2b6fc                 | LR__4514
2b6fc     02 00 00 FF 
2b700     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b704     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2b708     02 00 00 FF 
2b70c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2b710     20 00 90 AD |  if_e	jmp	#LR__4515
2b714     02 00 00 FF 
2b718     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b71c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b720     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2b724     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b728     02 00 00 FF 
2b72c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2b730     1C 00 90 FD | 	jmp	#LR__4516
2b734                 | LR__4515
2b734     02 00 00 FF 
2b738     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b73c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b740     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2b744     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b748     02 00 00 FF 
2b74c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2b750                 | LR__4516
2b750     08 03 02 FD | 	qmul	_var02, _var09
2b754                 | ' 		_tzname[1] = stdname;
2b754                 | ' 
2b754                 | '         return sgn * off;
2b754     18 FA 61 FD | 	getqx	result1
2b758                 | LR__4517
2b758                 | _fatfs_cc___tzoffset_ret
2b758     2D 00 64 FD | 	ret
2b75c                 | 
2b75c                 | _fatfs_cc___indst
2b75c     10 12 06 F1 | 	add	arg01, #16
2b760     09 01 02 FB | 	rdlong	_var01, arg01
2b764     10 12 86 F1 | 	sub	arg01, #16
2b768     02 00 0E F2 | 	cmp	_var01, #2 wz
2b76c     30 00 90 5D |  if_ne	jmp	#LR__4520
2b770     07 00 06 F6 | 	mov	_var01, #7
2b774     18 12 06 F1 | 	add	arg01, #24
2b778     09 03 02 FB | 	rdlong	_var02, arg01
2b77c     01 01 02 F1 | 	add	_var01, _var02
2b780     0C 12 86 F1 | 	sub	arg01, #12
2b784     09 05 02 FB | 	rdlong	_var03, arg01
2b788     02 01 82 F1 | 	sub	_var01, _var03
2b78c     00 00 56 F2 | 	cmps	_var01, #0 wc
2b790                 | '                         return 1;
2b790     01 FA 05 C6 |  if_b	mov	result1, #1
2b794     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2b798                 | '                 return 0;
2b798     00 FA 05 F6 | 	mov	result1, #0
2b79c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2b7a0                 | LR__4520
2b7a0     10 12 06 F1 | 	add	arg01, #16
2b7a4     09 01 02 FB | 	rdlong	_var01, arg01
2b7a8     10 12 86 F1 | 	sub	arg01, #16
2b7ac     0A 00 0E F2 | 	cmp	_var01, #10 wz
2b7b0     28 00 90 5D |  if_ne	jmp	#LR__4521
2b7b4     18 12 06 F1 | 	add	arg01, #24
2b7b8     09 01 02 FB | 	rdlong	_var01, arg01
2b7bc     0C 12 86 F1 | 	sub	arg01, #12
2b7c0     09 07 02 FB | 	rdlong	_var04, arg01
2b7c4     03 01 82 F1 | 	sub	_var01, _var04
2b7c8     00 00 56 F2 | 	cmps	_var01, #0 wc
2b7cc                 | '                         return 0;
2b7cc     00 FA 05 C6 |  if_b	mov	result1, #0
2b7d0     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2b7d4                 | '                 return 1;
2b7d4     01 FA 05 F6 | 	mov	result1, #1
2b7d8     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2b7dc                 | LR__4521
2b7dc                 | '         }
2b7dc                 | ' 
2b7dc                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2b7dc     00 00 06 F6 | 	mov	_var01, #0
2b7e0     10 12 06 F1 | 	add	arg01, #16
2b7e4     09 03 02 FB | 	rdlong	_var02, arg01
2b7e8     10 12 86 F1 | 	sub	arg01, #16
2b7ec     03 02 56 F2 | 	cmps	_var02, #3 wc
2b7f0     10 00 90 CD |  if_b	jmp	#LR__4522
2b7f4     10 12 06 F1 | 	add	arg01, #16
2b7f8     09 05 02 FB | 	rdlong	_var03, arg01
2b7fc     0A 04 56 F2 | 	cmps	_var03, #10 wc
2b800     01 00 06 C6 |  if_b	mov	_var01, #1
2b804                 | LR__4522
2b804     00 FB 01 F6 | 	mov	result1, _var01
2b808                 | _fatfs_cc___indst_ret
2b808     2D 00 64 FD | 	ret
2b80c                 | 
2b80c                 | ' 	
2b80c                 | ' 	FUNCTION pfunc(c as integer) as integer
2b80c                 | ___strs_cl_pfunc
2b80c                 | ' 		if (i < 16) then
2b80c     04 E4 05 F1 | 	add	objptr, #4
2b810     F2 FA 01 FB | 	rdlong	result1, objptr
2b814     04 E4 85 F1 | 	sub	objptr, #4
2b818     10 FA 55 F2 | 	cmps	result1, #16 wc
2b81c     2C 00 90 3D |  if_ae	jmp	#LR__4530
2b820     F2 FA 01 FB | 	rdlong	result1, objptr
2b824     04 E4 05 F1 | 	add	objptr, #4
2b828     F2 00 02 FB | 	rdlong	_var01, objptr
2b82c     FD 00 02 F1 | 	add	_var01, result1
2b830     00 13 42 FC | 	wrbyte	arg01, _var01
2b834     F2 FA 01 FB | 	rdlong	result1, objptr
2b838     01 FA 05 F1 | 	add	result1, #1
2b83c     F2 FA 61 FC | 	wrlong	result1, objptr
2b840     04 E4 85 F1 | 	sub	objptr, #4
2b844                 | ' 			p(i) = c
2b844                 | ' 			i = i+1
2b844                 | ' 			return 1
2b844     01 FA 05 F6 | 	mov	result1, #1
2b848     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2b84c                 | LR__4530
2b84c                 | ' 			return -1
2b84c     01 FA 65 F6 | 	neg	result1, #1
2b850                 | ___strs_cl_pfunc_ret
2b850     2D 00 64 FD | 	ret
2b854                 | 
2b854                 | __struct__s_vfs_file_t_putchar
2b854     04 4A 05 F6 | 	mov	COUNT_, #4
2b858     A8 00 A0 FD | 	call	#pushregs_
2b85c     1C E4 05 F1 | 	add	objptr, #28
2b860     F2 1E 0A FB | 	rdlong	local01, objptr wz
2b864     1C E4 85 F1 | 	sub	objptr, #28
2b868     00 FA 05 A6 |  if_e	mov	result1, #0
2b86c     48 00 90 AD |  if_e	jmp	#LR__4540
2b870     1C E4 05 F1 | 	add	objptr, #28
2b874     F2 20 02 FB | 	rdlong	local02, objptr
2b878     10 23 02 F6 | 	mov	local03, local02
2b87c     1C E4 85 F1 | 	sub	objptr, #28
2b880     13 22 46 F7 | 	zerox	local03, #19
2b884     14 20 46 F0 | 	shr	local02, #20
2b888     02 20 66 F0 | 	shl	local02, #2
2b88c     ED 20 02 F1 | 	add	local02, __methods__
2b890     10 21 02 FB | 	rdlong	local02, local02
2b894     F2 14 02 F6 | 	mov	arg02, objptr
2b898     F2 24 02 F6 | 	mov	local04, objptr
2b89c     11 E5 01 F6 | 	mov	objptr, local03
2b8a0     2D 20 62 FD | 	call	local02
2b8a4     12 E5 01 F6 | 	mov	objptr, local04
2b8a8                 | '     return (i < 0) ? 0 : 1;
2b8a8     00 FA 55 F2 | 	cmps	result1, #0 wc
2b8ac     00 1E 06 C6 |  if_b	mov	local01, #0
2b8b0     01 1E 06 36 |  if_ae	mov	local01, #1
2b8b4     0F FB 01 F6 | 	mov	result1, local01
2b8b8                 | LR__4540
2b8b8     A7 F0 03 F6 | 	mov	ptra, fp
2b8bc     B2 00 A0 FD | 	call	#popregs_
2b8c0                 | __struct__s_vfs_file_t_putchar_ret
2b8c0     2D 00 64 FD | 	ret
2b8c4                 | 
2b8c4                 | __struct__s_vfs_file_t_getchar
2b8c4     03 4A 05 F6 | 	mov	COUNT_, #3
2b8c8     A8 00 A0 FD | 	call	#pushregs_
2b8cc     20 E4 05 F1 | 	add	objptr, #32
2b8d0     F2 12 0A FB | 	rdlong	arg01, objptr wz
2b8d4     20 E4 85 F1 | 	sub	objptr, #32
2b8d8     01 FA 65 A6 |  if_e	neg	result1, #1
2b8dc     38 00 90 AD |  if_e	jmp	#LR__4550
2b8e0                 | '     return getcf(__this);
2b8e0     20 E4 05 F1 | 	add	objptr, #32
2b8e4     F2 1E 02 FB | 	rdlong	local01, objptr
2b8e8     0F 21 02 F6 | 	mov	local02, local01
2b8ec     20 E4 85 F1 | 	sub	objptr, #32
2b8f0     13 20 46 F7 | 	zerox	local02, #19
2b8f4     14 1E 46 F0 | 	shr	local01, #20
2b8f8     02 1E 66 F0 | 	shl	local01, #2
2b8fc     ED 1E 02 F1 | 	add	local01, __methods__
2b900     0F 1F 02 FB | 	rdlong	local01, local01
2b904     F2 12 02 F6 | 	mov	arg01, objptr
2b908     F2 22 02 F6 | 	mov	local03, objptr
2b90c     10 E5 01 F6 | 	mov	objptr, local02
2b910     2D 1E 62 FD | 	call	local01
2b914     11 E5 01 F6 | 	mov	objptr, local03
2b918                 | LR__4550
2b918     A7 F0 03 F6 | 	mov	ptra, fp
2b91c     B2 00 A0 FD | 	call	#popregs_
2b920                 | __struct__s_vfs_file_t_getchar_ret
2b920     2D 00 64 FD | 	ret
2b924                 | 
2b924                 | __struct___bas_wrap_sender_tx
2b924     03 4A 05 F6 | 	mov	COUNT_, #3
2b928     A8 00 A0 FD | 	call	#pushregs_
2b92c     F2 1E 02 FB | 	rdlong	local01, objptr
2b930     0F 21 02 F6 | 	mov	local02, local01
2b934     13 1E 46 F7 | 	zerox	local01, #19
2b938     14 20 46 F0 | 	shr	local02, #20
2b93c     02 20 66 F0 | 	shl	local02, #2
2b940     ED 20 02 F1 | 	add	local02, __methods__
2b944     10 21 02 FB | 	rdlong	local02, local02
2b948     F2 22 02 F6 | 	mov	local03, objptr
2b94c     0F E5 01 F6 | 	mov	objptr, local01
2b950     2D 20 62 FD | 	call	local02
2b954     11 E5 01 F6 | 	mov	objptr, local03
2b958     01 FA 05 F6 | 	mov	result1, #1
2b95c     A7 F0 03 F6 | 	mov	ptra, fp
2b960     B2 00 A0 FD | 	call	#popregs_
2b964                 | __struct___bas_wrap_sender_tx_ret
2b964     2D 00 64 FD | 	ret
2b968                 | 
2b968                 | __struct___bas_wrap_sender_rx
2b968     03 4A 05 F6 | 	mov	COUNT_, #3
2b96c     A8 00 A0 FD | 	call	#pushregs_
2b970     04 E4 05 F1 | 	add	objptr, #4
2b974     F2 1E 02 FB | 	rdlong	local01, objptr
2b978     0F 21 02 F6 | 	mov	local02, local01
2b97c     04 E4 85 F1 | 	sub	objptr, #4
2b980     13 20 46 F7 | 	zerox	local02, #19
2b984     14 1E 46 F0 | 	shr	local01, #20
2b988     02 1E 66 F0 | 	shl	local01, #2
2b98c     ED 1E 02 F1 | 	add	local01, __methods__
2b990     0F 1F 02 FB | 	rdlong	local01, local01
2b994     F2 22 02 F6 | 	mov	local03, objptr
2b998     10 E5 01 F6 | 	mov	objptr, local02
2b99c     2D 1E 62 FD | 	call	local01
2b9a0     11 E5 01 F6 | 	mov	objptr, local03
2b9a4     A7 F0 03 F6 | 	mov	ptra, fp
2b9a8     B2 00 A0 FD | 	call	#popregs_
2b9ac                 | __struct___bas_wrap_sender_rx_ret
2b9ac     2D 00 64 FD | 	ret
2b9b0                 | 
2b9b0                 | __struct___bas_wrap_sender_close
2b9b0     03 4A 05 F6 | 	mov	COUNT_, #3
2b9b4     A8 00 A0 FD | 	call	#pushregs_
2b9b8     08 E4 05 F1 | 	add	objptr, #8
2b9bc     F2 1E 02 FB | 	rdlong	local01, objptr
2b9c0     0F 21 02 F6 | 	mov	local02, local01
2b9c4     08 E4 85 F1 | 	sub	objptr, #8
2b9c8     13 20 46 F7 | 	zerox	local02, #19
2b9cc     14 1E 46 F0 | 	shr	local01, #20
2b9d0     02 1E 66 F0 | 	shl	local01, #2
2b9d4     ED 1E 02 F1 | 	add	local01, __methods__
2b9d8     0F 1F 02 FB | 	rdlong	local01, local01
2b9dc     F2 22 02 F6 | 	mov	local03, objptr
2b9e0     10 E5 01 F6 | 	mov	objptr, local02
2b9e4     2D 1E 62 FD | 	call	local01
2b9e8     11 E5 01 F6 | 	mov	objptr, local03
2b9ec     A7 F0 03 F6 | 	mov	ptra, fp
2b9f0     B2 00 A0 FD | 	call	#popregs_
2b9f4                 | __struct___bas_wrap_sender_close_ret
2b9f4     2D 00 64 FD | 	ret
2b9f8                 | 
2b9f8                 | LR__4560
2b9f8     2F          | 	byte	"/"
2b9f9     00          | 	byte	0
2b9fa                 | LR__4561
2b9fa     69 6E 66    | 	byte	"inf"
2b9fd     00          | 	byte	0
2b9fe                 | LR__4562
2b9fe     6E 61 6E    | 	byte	"nan"
2ba01     00          | 	byte	0
2ba02                 | LR__4563
2ba02                 | 	byte	
2ba02     00          | 	byte	0
2ba03                 | LR__4564
2ba03                 | 	byte	
2ba03     00          | 	byte	0
2ba04                 | LR__4565
2ba04                 | 	byte	
2ba04     00          | 	byte	0
2ba05                 | LR__4566
2ba05                 | 	byte	
2ba05     00          | 	byte	0
2ba06                 | LR__4567
2ba06                 | 	byte	
2ba06     00          | 	byte	0
2ba07                 | LR__4568
2ba07                 | 	byte	
2ba07     00          | 	byte	0
2ba08                 | LR__4569
2ba08                 | 	byte	
2ba08     00          | 	byte	0
2ba09                 | LR__4570
2ba09                 | 	byte	
2ba09     00          | 	byte	0
2ba0a                 | LR__4571
2ba0a     00          | 	byte	0
2ba0b     00          | 	byte	0
2ba0c                 | LR__4572
2ba0c     00          | 	byte	0
2ba0d     00          | 	byte	0
2ba0e                 | LR__4573
2ba0e     00          | 	byte	0
2ba0f     00          | 	byte	0
2ba10                 | LR__4574
2ba10     20 21 21 21 
2ba14     20 63 6F 72 
2ba18     72 75 70 74 
2ba1c     65 64 20 68 
2ba20     65 61 70 3F 
2ba24     3F 3F 20 21 
2ba28     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2ba2b     00          | 	byte	0
2ba2c                 | LR__4575
2ba2c     20 21 21 21 
2ba30     20 6F 75 74 
2ba34     20 6F 66 20 
2ba38     68 65 61 70 
2ba3c     20 6D 65 6D 
2ba40     6F 72 79 20 
2ba44     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2ba48     00          | 	byte	0
2ba49                 | LR__4576
2ba49     20 21 21 21 
2ba4d     20 63 6F 72 
2ba51     72 75 70 74 
2ba55     65 64 20 68 
2ba59     65 61 70 20 
2ba5d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2ba61     00          | 	byte	0
2ba62                 | LR__4577
2ba62     00          | 	byte	0
2ba63     00          | 	byte	0
2ba64                 | LR__4578
2ba64     2E          | 	byte	"."
2ba65     00          | 	byte	0
2ba66                 | LR__4579
2ba66     00          | 	byte	0
2ba67     00          | 	byte	0
2ba68                 | LR__4580
2ba68     00          | 	byte	0
2ba69     00          | 	byte	0
2ba6a                 | LR__4581
2ba6a     00          | 	byte	0
2ba6b     00          | 	byte	0
2ba6c                 | LR__4582
2ba6c     2A 3A 3C 3E 
2ba70     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2ba74     00          | 	byte	0
2ba75                 | LR__4583
2ba75     2B 2C 3B 3D 
2ba79     5B 5D       | 	byte	"+,;=[]"
2ba7b     00          | 	byte	0
2ba7c                 | LR__4584
2ba7c     46 41 54 33 
2ba80     32 20 20 20 | 	byte	"FAT32   "
2ba84     00          | 	byte	0
2ba85                 | LR__4585
2ba85     54 5A       | 	byte	"TZ"
2ba87     00          | 	byte	0
2ba88                 | LR__4586
2ba88     00          | 	byte	0
2ba89     00          | 	byte	0
2ba8a                 | LR__4587
2ba8a                 | 	byte	
2ba8a     00          | 	byte	0
2ba8b                 | LR__4588
2ba8b                 | 	byte	
2ba8b     00          | 	byte	0
2ba8c                 | LR__4589
2ba8c     22          | 	byte	34
2ba8d     00          | 	byte	0
2ba8e                 | LR__4590
2ba8e     22          | 	byte	34
2ba8f     00          | 	byte	0
2ba90                 | LR__4591
2ba90     3A          | 	byte	":"
2ba91     00          | 	byte	0
2ba92                 | LR__4592
2ba92                 | 	byte	
2ba92     00          | 	byte	0
2ba93                 | LR__4593
2ba93                 | 	byte	
2ba93     00          | 	byte	0
2ba94                 | LR__4594
2ba94                 | 	byte	
2ba94     00          | 	byte	0
2ba95                 | LR__4595
2ba95                 | 	byte	
2ba95     00          | 	byte	0
2ba96                 | LR__4596
2ba96                 | 	byte	
2ba96     00          | 	byte	0
2ba97                 | LR__4597
2ba97                 | 	byte	
2ba97     00          | 	byte	0
2ba98                 | LR__4598
2ba98                 | 	byte	
2ba98     00          | 	byte	0
2ba99                 | LR__4599
2ba99     22          | 	byte	34
2ba9a     00          | 	byte	0
2ba9b                 | LR__4600
2ba9b     22          | 	byte	34
2ba9c     00          | 	byte	0
2ba9d                 | LR__4601
2ba9d     22          | 	byte	34
2ba9e     00          | 	byte	0
2ba9f                 | LR__4602
2ba9f     22          | 	byte	34
2baa0     00          | 	byte	0
2baa1                 | LR__4603
2baa1     22          | 	byte	34
2baa2     00          | 	byte	0
2baa3                 | LR__4604
2baa3     3E          | 	byte	">"
2baa4     00          | 	byte	0
2baa5                 | LR__4605
2baa5     3C          | 	byte	"<"
2baa6     00          | 	byte	0
2baa7                 | LR__4606
2baa7     2B          | 	byte	"+"
2baa8     00          | 	byte	0
2baa9                 | LR__4607
2baa9     2D          | 	byte	"-"
2baaa     00          | 	byte	0
2baab                 | LR__4608
2baab     2A          | 	byte	"*"
2baac     00          | 	byte	0
2baad                 | LR__4609
2baad     2F          | 	byte	"/"
2baae     00          | 	byte	0
2baaf                 | LR__4610
2baaf     5E          | 	byte	"^"
2bab0     00          | 	byte	0
2bab1                 | LR__4611
2bab1     3D          | 	byte	"="
2bab2     00          | 	byte	0
2bab3                 | LR__4612
2bab3     2B          | 	byte	"+"
2bab4     00          | 	byte	0
2bab5                 | LR__4613
2bab5     2B          | 	byte	"+"
2bab6     00          | 	byte	0
2bab7                 | LR__4614
2bab7     2D          | 	byte	"-"
2bab8     00          | 	byte	0
2bab9                 | LR__4615
2bab9     2D          | 	byte	"-"
2baba     00          | 	byte	0
2babb                 | LR__4616
2babb     3C          | 	byte	"<"
2babc     00          | 	byte	0
2babd                 | LR__4617
2babd     3E          | 	byte	">"
2babe     00          | 	byte	0
2babf                 | LR__4618
2babf     22          | 	byte	34
2bac0     00          | 	byte	0
2bac1                 | LR__4619
2bac1     22          | 	byte	34
2bac2     00          | 	byte	0
2bac3                 | LR__4620
2bac3     2E          | 	byte	"."
2bac4     00          | 	byte	0
2bac5                 | LR__4621
2bac5     3F          | 	byte	"?"
2bac6     00          | 	byte	0
2bac7                 | LR__4622
2bac7     3F          | 	byte	"?"
2bac8     00          | 	byte	0
2bac9                 | LR__4623
2bac9     6D 6F 75 73 
2bacd     65          | 	byte	"mouse"
2bace     00          | 	byte	0
2bacf                 | LR__4624
2bacf     63 75 72 73 
2bad3     6F 72       | 	byte	"cursor"
2bad5     00          | 	byte	0
2bad6                 | LR__4625
2bad6     63 6C 69 63 
2bada     6B          | 	byte	"click"
2badb     00          | 	byte	0
2badc                 | LR__4626
2badc     6F 6E       | 	byte	"on"
2bade     00          | 	byte	0
2badf                 | LR__4627
2badf     31          | 	byte	"1"
2bae0     00          | 	byte	0
2bae1                 | LR__4628
2bae1     6F 66 66    | 	byte	"off"
2bae4     00          | 	byte	0
2bae5                 | LR__4629
2bae5     30          | 	byte	"0"
2bae6     00          | 	byte	0
2bae7                 | LR__4630
2bae7     6D 6F 64 65 | 	byte	"mode"
2baeb     00          | 	byte	0
2baec                 | LR__4631
2baec     6D 2E       | 	byte	"m."
2baee     00          | 	byte	0
2baef                 | LR__4632
2baef     61 74 61 72 
2baf3     69          | 	byte	"atari"
2baf4     00          | 	byte	0
2baf5                 | LR__4633
2baf5     30          | 	byte	"0"
2baf6     00          | 	byte	0
2baf7                 | LR__4634
2baf7     70 63 5F 61 
2bafb     6D 62 65 72 | 	byte	"pc_amber"
2baff     00          | 	byte	0
2bb00                 | LR__4635
2bb00     31          | 	byte	"1"
2bb01     00          | 	byte	0
2bb02                 | LR__4636
2bb02     70 63 5F 67 
2bb06     72 65 65 6E | 	byte	"pc_green"
2bb0a     00          | 	byte	0
2bb0b                 | LR__4637
2bb0b     32          | 	byte	"2"
2bb0c     00          | 	byte	0
2bb0d                 | LR__4638
2bb0d     70 63 5F 77 
2bb11     68 69 74 65 | 	byte	"pc_white"
2bb15     00          | 	byte	0
2bb16                 | LR__4639
2bb16     33          | 	byte	"3"
2bb17     00          | 	byte	0
2bb18                 | LR__4640
2bb18     73 74       | 	byte	"st"
2bb1a     00          | 	byte	0
2bb1b                 | LR__4641
2bb1b     34          | 	byte	"4"
2bb1c     00          | 	byte	0
2bb1d                 | LR__4642
2bb1d                 | 	byte	
2bb1d     00          | 	byte	0
2bb1e                 | LR__4643
2bb1e     6C 6F 61 64 | 	byte	"load"
2bb22     00          | 	byte	0
2bb23                 | LR__4644
2bb23     73 61 76 65 | 	byte	"save"
2bb27     00          | 	byte	0
2bb28                 | LR__4645
2bb28     62 72 75 6E | 	byte	"brun"
2bb2c     00          | 	byte	0
2bb2d                 | LR__4646
2bb2d     6C 6F 2E    | 	byte	"lo."
2bb30     00          | 	byte	0
2bb31                 | LR__4647
2bb31     73 2E       | 	byte	"s."
2bb33     00          | 	byte	0
2bb34                 | LR__4648
2bb34     62 72 2E    | 	byte	"br."
2bb37     00          | 	byte	0
2bb38                 | LR__4649
2bb38                 | 	byte	
2bb38     00          | 	byte	0
2bb39                 | LR__4650
2bb39                 | 	byte	
2bb39     00          | 	byte	0
2bb3a                 | LR__4651
2bb3a                 | 	byte	
2bb3a     00          | 	byte	0
2bb3b                 | LR__4652
2bb3b                 | 	byte	
2bb3b     00          | 	byte	0
2bb3c                 | LR__4653
2bb3c     20 55 73 65 
2bb40     72 20 66 75 
2bb44     6E 63 74 69 
2bb48     6F 6E 73 20 
2bb4c     61 6E 64 20 
2bb50     61 72 72 61 
2bb54     79 73 20 6E 
2bb58     6F 74 20 79 
2bb5c     65 74 20 69 
2bb60     6D 70 6C 65 
2bb64     6D 65 6E 74 
2bb68     65 64       | 	byte	" User functions and arrays not yet implemented"
2bb6a     00          | 	byte	0
2bb6b                 | LR__4654
2bb6b                 | 	byte	
2bb6b     00          | 	byte	0
2bb6c                 | LR__4655
2bb6c                 | 	byte	
2bb6c     00          | 	byte	0
2bb6d                 | LR__4656
2bb6d     52 65 61 64 
2bb71     79          | 	byte	"Ready"
2bb72     00          | 	byte	0
2bb73                 | LR__4657
2bb73     2B          | 	byte	"+"
2bb74     00          | 	byte	0
2bb75                 | LR__4658
2bb75     2D          | 	byte	"-"
2bb76     00          | 	byte	0
2bb77                 | LR__4659
2bb77     6F 72       | 	byte	"or"
2bb79     00          | 	byte	0
2bb7a                 | LR__4660
2bb7a     78 6F 72    | 	byte	"xor"
2bb7d     00          | 	byte	0
2bb7e                 | LR__4661
2bb7e     2A          | 	byte	"*"
2bb7f     00          | 	byte	0
2bb80                 | LR__4662
2bb80     2F          | 	byte	"/"
2bb81     00          | 	byte	0
2bb82                 | LR__4663
2bb82     61 6E 64    | 	byte	"and"
2bb85     00          | 	byte	0
2bb86                 | LR__4664
2bb86     64 69 76    | 	byte	"div"
2bb89     00          | 	byte	0
2bb8a                 | LR__4665
2bb8a     6D 6F 64    | 	byte	"mod"
2bb8d     00          | 	byte	0
2bb8e                 | LR__4666
2bb8e     73 68 6C    | 	byte	"shl"
2bb91     00          | 	byte	0
2bb92                 | LR__4667
2bb92     73 68 72    | 	byte	"shr"
2bb95     00          | 	byte	0
2bb96                 | LR__4668
2bb96     5E          | 	byte	"^"
2bb97     00          | 	byte	0
2bb98                 | LR__4669
2bb98     6E 6F 74    | 	byte	"not"
2bb9b     00          | 	byte	0
2bb9c                 | LR__4670
2bb9c     40          | 	byte	"@"
2bb9d     00          | 	byte	0
2bb9e                 | LR__4671
2bb9e     3D          | 	byte	"="
2bb9f     00          | 	byte	0
2bba0                 | LR__4672
2bba0     3E 3D       | 	byte	">="
2bba2     00          | 	byte	0
2bba3                 | LR__4673
2bba3     3C 3D       | 	byte	"<="
2bba5     00          | 	byte	0
2bba6                 | LR__4674
2bba6     3C          | 	byte	"<"
2bba7     00          | 	byte	0
2bba8                 | LR__4675
2bba8     3E          | 	byte	">"
2bba9     00          | 	byte	0
2bbaa                 | LR__4676
2bbaa     3C 3E       | 	byte	"<>"
2bbac     00          | 	byte	0
2bbad                 | LR__4677
2bbad     2B 2B       | 	byte	"++"
2bbaf     00          | 	byte	0
2bbb0                 | LR__4678
2bbb0     2D 2D       | 	byte	"--"
2bbb2     00          | 	byte	0
2bbb3                 | LR__4679
2bbb3     23          | 	byte	"#"
2bbb4     00          | 	byte	0
2bbb5                 | LR__4680
2bbb5     23          | 	byte	"#"
2bbb6     00          | 	byte	0
2bbb7                 | LR__4681
2bbb7     2D          | 	byte	"-"
2bbb8     00          | 	byte	0
2bbb9                 | LR__4682
2bbb9     30          | 	byte	"0"
2bbba     00          | 	byte	0
2bbbb                 | LR__4683
2bbbb     63          | 	byte	"c"
2bbbc     00          | 	byte	0
2bbbd                 | LR__4684
2bbbd     63 23       | 	byte	"c#"
2bbbf     00          | 	byte	0
2bbc0                 | LR__4685
2bbc0     64          | 	byte	"d"
2bbc1     00          | 	byte	0
2bbc2                 | LR__4686
2bbc2     64 23       | 	byte	"d#"
2bbc4     00          | 	byte	0
2bbc5                 | LR__4687
2bbc5     65          | 	byte	"e"
2bbc6     00          | 	byte	0
2bbc7                 | LR__4688
2bbc7     66          | 	byte	"f"
2bbc8     00          | 	byte	0
2bbc9                 | LR__4689
2bbc9     66 23       | 	byte	"f#"
2bbcb     00          | 	byte	0
2bbcc                 | LR__4690
2bbcc     67          | 	byte	"g"
2bbcd     00          | 	byte	0
2bbce                 | LR__4691
2bbce     67 23       | 	byte	"g#"
2bbd0     00          | 	byte	0
2bbd1                 | LR__4692
2bbd1     61          | 	byte	"a"
2bbd2     00          | 	byte	0
2bbd3                 | LR__4693
2bbd3     61 23       | 	byte	"a#"
2bbd5     00          | 	byte	0
2bbd6                 | LR__4694
2bbd6     68          | 	byte	"h"
2bbd7     00          | 	byte	0
2bbd8                 | LR__4695
2bbd8     62          | 	byte	"b"
2bbd9     00          | 	byte	0
2bbda                 | LR__4696
2bbda     2B          | 	byte	"+"
2bbdb     00          | 	byte	0
2bbdc                 | LR__4697
2bbdc     2D          | 	byte	"-"
2bbdd     00          | 	byte	0
2bbde                 | LR__4698
2bbde     3D          | 	byte	"="
2bbdf     00          | 	byte	0
2bbe0                 | LR__4699
2bbe0     2C          | 	byte	","
2bbe1     00          | 	byte	0
2bbe2                 | LR__4700
2bbe2     2A          | 	byte	"*"
2bbe3     00          | 	byte	0
2bbe4                 | LR__4701
2bbe4     2F          | 	byte	"/"
2bbe5     00          | 	byte	0
2bbe6                 | LR__4702
2bbe6     3B          | 	byte	";"
2bbe7     00          | 	byte	0
2bbe8                 | LR__4703
2bbe8     22          | 	byte	34
2bbe9     00          | 	byte	0
2bbea                 | LR__4704
2bbea     5E          | 	byte	"^"
2bbeb     00          | 	byte	0
2bbec                 | LR__4705
2bbec     29          | 	byte	")"
2bbed     00          | 	byte	0
2bbee                 | LR__4706
2bbee     28          | 	byte	"("
2bbef     00          | 	byte	0
2bbf0                 | LR__4707
2bbf0     3A          | 	byte	":"
2bbf1     00          | 	byte	0
2bbf2                 | LR__4708
2bbf2     20          | 	byte	" "
2bbf3     00          | 	byte	0
2bbf4                 | LR__4709
2bbf4     3E          | 	byte	">"
2bbf5     00          | 	byte	0
2bbf6                 | LR__4710
2bbf6     3C          | 	byte	"<"
2bbf7     00          | 	byte	0
2bbf8                 | LR__4711
2bbf8     3D          | 	byte	"="
2bbf9     00          | 	byte	0
2bbfa                 | LR__4712
2bbfa     62 65 65 70 | 	byte	"beep"
2bbfe     00          | 	byte	0
2bbff                 | LR__4713
2bbff     62 2E       | 	byte	"b."
2bc01     00          | 	byte	0
2bc02                 | LR__4714
2bc02     62 6F 78    | 	byte	"box"
2bc05     00          | 	byte	0
2bc06                 | LR__4715
2bc06     62 72 75 6E | 	byte	"brun"
2bc0a     00          | 	byte	0
2bc0b                 | LR__4716
2bc0b     62 72 2E    | 	byte	"br."
2bc0e     00          | 	byte	0
2bc0f                 | LR__4717
2bc0f     63 69 72 63 
2bc13     6C 65       | 	byte	"circle"
2bc15     00          | 	byte	0
2bc16                 | LR__4718
2bc16     63 69 2E    | 	byte	"ci."
2bc19     00          | 	byte	0
2bc1a                 | LR__4719
2bc1a     63 6C 69 63 
2bc1e     6B          | 	byte	"click"
2bc1f     00          | 	byte	0
2bc20                 | LR__4720
2bc20     63 6C 73    | 	byte	"cls"
2bc23     00          | 	byte	0
2bc24                 | LR__4721
2bc24     63 6F 6C 6F 
2bc28     72          | 	byte	"color"
2bc29     00          | 	byte	0
2bc2a                 | LR__4722
2bc2a     63 2E       | 	byte	"c."
2bc2c     00          | 	byte	0
2bc2d                 | LR__4723
2bc2d     63 73 61 76 
2bc31     65          | 	byte	"csave"
2bc32     00          | 	byte	0
2bc33                 | LR__4724
2bc33     63 73 2E    | 	byte	"cs."
2bc36     00          | 	byte	0
2bc37                 | LR__4725
2bc37     63 75 72 73 
2bc3b     6F 72       | 	byte	"cursor"
2bc3d     00          | 	byte	0
2bc3e                 | LR__4726
2bc3e     64 65 66 73 
2bc42     6E 64       | 	byte	"defsnd"
2bc44     00          | 	byte	0
2bc45                 | LR__4727
2bc45     64 65 66 65 
2bc49     6E 76       | 	byte	"defenv"
2bc4b     00          | 	byte	0
2bc4c                 | LR__4728
2bc4c     64 65 66 73 
2bc50     70 72 69 74 
2bc54     65          | 	byte	"defsprite"
2bc55     00          | 	byte	0
2bc56                 | LR__4729
2bc56     64 73 2E    | 	byte	"ds."
2bc59     00          | 	byte	0
2bc5a                 | LR__4730
2bc5a     64 65 67    | 	byte	"deg"
2bc5d     00          | 	byte	0
2bc5e                 | LR__4731
2bc5e     64 69 6D    | 	byte	"dim"
2bc61     00          | 	byte	0
2bc62                 | LR__4732
2bc62     64 69 72    | 	byte	"dir"
2bc65     00          | 	byte	0
2bc66                 | LR__4733
2bc66     64 70 6F 6B 
2bc6a     65          | 	byte	"dpoke"
2bc6b     00          | 	byte	0
2bc6c                 | LR__4734
2bc6c     64 72 61 77 | 	byte	"draw"
2bc70     00          | 	byte	0
2bc71                 | LR__4735
2bc71     64 72 2E    | 	byte	"dr."
2bc74     00          | 	byte	0
2bc75                 | LR__4736
2bc75     65 6C 73 65 | 	byte	"else"
2bc79     00          | 	byte	0
2bc7a                 | LR__4737
2bc7a     66 63 69 72 
2bc7e     63 6C 65    | 	byte	"fcircle"
2bc81     00          | 	byte	0
2bc82                 | LR__4738
2bc82     66 63 2E    | 	byte	"fc."
2bc85     00          | 	byte	0
2bc86                 | LR__4739
2bc86     66 69 6C 6C | 	byte	"fill"
2bc8a     00          | 	byte	0
2bc8b                 | LR__4740
2bc8b     66 69 2E    | 	byte	"fi."
2bc8e     00          | 	byte	0
2bc8f                 | LR__4741
2bc8f     66 6F 6E 74 | 	byte	"font"
2bc93     00          | 	byte	0
2bc94                 | LR__4742
2bc94     66 6F 72    | 	byte	"for"
2bc97     00          | 	byte	0
2bc98                 | LR__4743
2bc98     66 2E       | 	byte	"f."
2bc9a     00          | 	byte	0
2bc9b                 | LR__4744
2bc9b     66 72 61 6D 
2bc9f     65          | 	byte	"frame"
2bca0     00          | 	byte	0
2bca1                 | LR__4745
2bca1     66 72 2E    | 	byte	"fr."
2bca4     00          | 	byte	0
2bca5                 | LR__4746
2bca5     67 6F 74 6F | 	byte	"goto"
2bca9     00          | 	byte	0
2bcaa                 | LR__4747
2bcaa     67 2E       | 	byte	"g."
2bcac     00          | 	byte	0
2bcad                 | LR__4748
2bcad     69 66       | 	byte	"if"
2bcaf     00          | 	byte	0
2bcb0                 | LR__4749
2bcb0     69 6E 6B    | 	byte	"ink"
2bcb3     00          | 	byte	0
2bcb4                 | LR__4750
2bcb4     69 2E       | 	byte	"i."
2bcb6     00          | 	byte	0
2bcb7                 | LR__4751
2bcb7     69 6E 74    | 	byte	"int"
2bcba     00          | 	byte	0
2bcbb                 | LR__4752
2bcbb     6C 69 73 74 | 	byte	"list"
2bcbf     00          | 	byte	0
2bcc0                 | LR__4753
2bcc0     6C 2E       | 	byte	"l."
2bcc2     00          | 	byte	0
2bcc3                 | LR__4754
2bcc3     6C 6F 61 64 | 	byte	"load"
2bcc7     00          | 	byte	0
2bcc8                 | LR__4755
2bcc8     6C 6F 2E    | 	byte	"lo."
2bccb     00          | 	byte	0
2bccc                 | LR__4756
2bccc     6C 70 6F 6B 
2bcd0     65          | 	byte	"lpoke"
2bcd1     00          | 	byte	0
2bcd2                 | LR__4757
2bcd2     6D 6F 64 65 | 	byte	"mode"
2bcd6     00          | 	byte	0
2bcd7                 | LR__4758
2bcd7     6D 2E       | 	byte	"m."
2bcd9     00          | 	byte	0
2bcda                 | LR__4759
2bcda     6D 6F 75 73 
2bcde     65          | 	byte	"mouse"
2bcdf     00          | 	byte	0
2bce0                 | LR__4760
2bce0     6E 65 77    | 	byte	"new"
2bce3     00          | 	byte	0
2bce4                 | LR__4761
2bce4     6E 65 78 74 | 	byte	"next"
2bce8     00          | 	byte	0
2bce9                 | LR__4762
2bce9     6E 2E       | 	byte	"n."
2bceb     00          | 	byte	0
2bcec                 | LR__4763
2bcec     70 61 70 65 
2bcf0     72          | 	byte	"paper"
2bcf1     00          | 	byte	0
2bcf2                 | LR__4764
2bcf2     70 2E       | 	byte	"p."
2bcf4     00          | 	byte	0
2bcf5                 | LR__4765
2bcf5     70 69 6E 66 
2bcf9     6C 6F 61 74 | 	byte	"pinfloat"
2bcfd     00          | 	byte	0
2bcfe                 | LR__4766
2bcfe     70 69 6E 68 
2bd02     69          | 	byte	"pinhi"
2bd03     00          | 	byte	0
2bd04                 | LR__4767
2bd04     70 69 6E 6C 
2bd08     6F          | 	byte	"pinlo"
2bd09     00          | 	byte	0
2bd0a                 | LR__4768
2bd0a     70 69 6E 73 
2bd0e     74 61 72 74 | 	byte	"pinstart"
2bd12     00          | 	byte	0
2bd13                 | LR__4769
2bd13     70 69 6E 74 
2bd17     6F 67 67 6C 
2bd1b     65          | 	byte	"pintoggle"
2bd1c     00          | 	byte	0
2bd1d                 | LR__4770
2bd1d     70 69 6E 77 
2bd21     72 69 74 65 | 	byte	"pinwrite"
2bd25     00          | 	byte	0
2bd26                 | LR__4771
2bd26     70 6C 61 79 | 	byte	"play"
2bd2a     00          | 	byte	0
2bd2b                 | LR__4772
2bd2b     70 6C 6F 74 | 	byte	"plot"
2bd2f     00          | 	byte	0
2bd30                 | LR__4773
2bd30     70 6C 2E    | 	byte	"pl."
2bd33     00          | 	byte	0
2bd34                 | LR__4774
2bd34     70 6F 6B 65 | 	byte	"poke"
2bd38     00          | 	byte	0
2bd39                 | LR__4775
2bd39     70 6F 73 69 
2bd3d     74 69 6F 6E | 	byte	"position"
2bd41     00          | 	byte	0
2bd42                 | LR__4776
2bd42     70 6F 73 2E | 	byte	"pos."
2bd46     00          | 	byte	0
2bd47                 | LR__4777
2bd47     70 72 69 6E 
2bd4b     74          | 	byte	"print"
2bd4c     00          | 	byte	0
2bd4d                 | LR__4778
2bd4d     3F          | 	byte	"?"
2bd4e     00          | 	byte	0
2bd4f                 | LR__4779
2bd4f     72 61 64    | 	byte	"rad"
2bd52     00          | 	byte	0
2bd53                 | LR__4780
2bd53     72 65 6C 65 
2bd57     61 73 65    | 	byte	"release"
2bd5a     00          | 	byte	0
2bd5b                 | LR__4781
2bd5b     72 75 6E    | 	byte	"run"
2bd5e     00          | 	byte	0
2bd5f                 | LR__4782
2bd5f     73 61 76 65 | 	byte	"save"
2bd63     00          | 	byte	0
2bd64                 | LR__4783
2bd64     73 2E       | 	byte	"s."
2bd66     00          | 	byte	0
2bd67                 | LR__4784
2bd67     73 65 74 64 
2bd6b     65 6C 61 79 | 	byte	"setdelay"
2bd6f     00          | 	byte	0
2bd70                 | LR__4785
2bd70     73 65 74 65 
2bd74     6E 76       | 	byte	"setenv"
2bd76     00          | 	byte	0
2bd77                 | LR__4786
2bd77     73 65 74 6C 
2bd7b     65 6E       | 	byte	"setlen"
2bd7d     00          | 	byte	0
2bd7e                 | LR__4787
2bd7e     73 65 74 70 
2bd82     61 6E       | 	byte	"setpan"
2bd84     00          | 	byte	0
2bd85                 | LR__4788
2bd85     73 65 74 73 
2bd89     75 73 74 61 
2bd8d     69 6E       | 	byte	"setsustain"
2bd8f     00          | 	byte	0
2bd90                 | LR__4789
2bd90     73 65 74 76 
2bd94     6F 6C       | 	byte	"setvol"
2bd96     00          | 	byte	0
2bd97                 | LR__4790
2bd97     73 65 74 77 
2bd9b     61 76 65    | 	byte	"setwave"
2bd9e     00          | 	byte	0
2bd9f                 | LR__4791
2bd9f     73 6F 75 6E 
2bda3     64          | 	byte	"sound"
2bda4     00          | 	byte	0
2bda5                 | LR__4792
2bda5     73 6F 2E    | 	byte	"so."
2bda8     00          | 	byte	0
2bda9                 | LR__4793
2bda9     73 70 72 69 
2bdad     74 65       | 	byte	"sprite"
2bdaf     00          | 	byte	0
2bdb0                 | LR__4794
2bdb0     73 70 2E    | 	byte	"sp."
2bdb3     00          | 	byte	0
2bdb4                 | LR__4795
2bdb4     74 68 65 6E | 	byte	"then"
2bdb8     00          | 	byte	0
2bdb9                 | LR__4796
2bdb9     77 61 69 74 
2bdbd     6D 73       | 	byte	"waitms"
2bdbf     00          | 	byte	0
2bdc0                 | LR__4797
2bdc0     77 61 69 74 
2bdc4     63 6C 6F 63 
2bdc8     6B          | 	byte	"waitclock"
2bdc9     00          | 	byte	0
2bdca                 | LR__4798
2bdca     77 63 2E    | 	byte	"wc."
2bdcd     00          | 	byte	0
2bdce                 | LR__4799
2bdce     77 61 69 74 
2bdd2     76 62 6C    | 	byte	"waitvbl"
2bdd5     00          | 	byte	0
2bdd6                 | LR__4800
2bdd6     77 76 2E    | 	byte	"wv."
2bdd9     00          | 	byte	0
2bdda                 | LR__4801
2bdda     77 78 70 69 
2bdde     6E          | 	byte	"wxpin"
2bddf     00          | 	byte	0
2bde0                 | LR__4802
2bde0     77 79 70 69 
2bde4     6E          | 	byte	"wypin"
2bde5     00          | 	byte	0
2bde6                 | LR__4803
2bde6     61 62 73    | 	byte	"abs"
2bde9     00          | 	byte	0
2bdea                 | LR__4804
2bdea     61 63 6F 73 | 	byte	"acos"
2bdee     00          | 	byte	0
2bdef                 | LR__4805
2bdef     61 64 72    | 	byte	"adr"
2bdf2     00          | 	byte	0
2bdf3                 | LR__4806
2bdf3     61 64 64 72 | 	byte	"addr"
2bdf7     00          | 	byte	0
2bdf8                 | LR__4807
2bdf8     76 61 72 70 
2bdfc     74 72       | 	byte	"varptr"
2bdfe     00          | 	byte	0
2bdff                 | LR__4808
2bdff     61 73 69 6E | 	byte	"asin"
2be03     00          | 	byte	0
2be04                 | LR__4809
2be04     61 74 6E    | 	byte	"atn"
2be07     00          | 	byte	0
2be08                 | LR__4810
2be08     63 6F 73    | 	byte	"cos"
2be0b     00          | 	byte	0
2be0c                 | LR__4811
2be0c     64 70 65 65 
2be10     6B          | 	byte	"dpeek"
2be11     00          | 	byte	0
2be12                 | LR__4812
2be12     66 72 65    | 	byte	"fre"
2be15     00          | 	byte	0
2be16                 | LR__4813
2be16     67 65 74 70 
2be1a     69 78 65 6C | 	byte	"getpixel"
2be1e     00          | 	byte	0
2be1f                 | LR__4814
2be1f     67 65 2E    | 	byte	"ge."
2be22     00          | 	byte	0
2be23                 | LR__4815
2be23     67 65 74 65 
2be27     6E 76 73 75 
2be2b     73 74 61 69 
2be2f     6E          | 	byte	"getenvsustain"
2be30     00          | 	byte	0
2be31                 | LR__4816
2be31     67 65 74 6E 
2be35     6F 74 65 76 
2be39     61 6C 75 65 | 	byte	"getnotevalue"
2be3d     00          | 	byte	0
2be3e                 | LR__4817
2be3e     67 65 74 74 
2be42     69 6D 65    | 	byte	"gettime"
2be45     00          | 	byte	0
2be46                 | LR__4818
2be46     69 6E 6B 65 
2be4a     79 24       | 	byte	"inkey$"
2be4c     00          | 	byte	0
2be4d                 | LR__4819
2be4d     6C 70 65 65 
2be51     6B          | 	byte	"lpeek"
2be52     00          | 	byte	0
2be53                 | LR__4820
2be53     6D 6F 75 73 
2be57     65 6B       | 	byte	"mousek"
2be59     00          | 	byte	0
2be5a                 | LR__4821
2be5a     6D 6F 75 73 
2be5e     65 77       | 	byte	"mousew"
2be60     00          | 	byte	0
2be61                 | LR__4822
2be61     6D 6F 75 73 
2be65     65 78       | 	byte	"mousex"
2be67     00          | 	byte	0
2be68                 | LR__4823
2be68     6D 6F 75 73 
2be6c     65 79       | 	byte	"mousey"
2be6e     00          | 	byte	0
2be6f                 | LR__4824
2be6f     70 65 65 6B | 	byte	"peek"
2be73     00          | 	byte	0
2be74                 | LR__4825
2be74     70 69 6E 72 
2be78     65 61 64    | 	byte	"pinread"
2be7b     00          | 	byte	0
2be7c                 | LR__4826
2be7c     72 64 70 69 
2be80     6E          | 	byte	"rdpin"
2be81     00          | 	byte	0
2be82                 | LR__4827
2be82     72 71 70 69 
2be86     6E          | 	byte	"rqpin"
2be87     00          | 	byte	0
2be88                 | LR__4828
2be88     72 6E 64    | 	byte	"rnd"
2be8b     00          | 	byte	0
2be8c                 | LR__4829
2be8c     73 69 6E    | 	byte	"sin"
2be8f     00          | 	byte	0
2be90                 | LR__4830
2be90     73 71 72    | 	byte	"sqr"
2be93     00          | 	byte	0
2be94                 | LR__4831
2be94     73 74 69 63 
2be98     6B          | 	byte	"stick"
2be99     00          | 	byte	0
2be9a                 | LR__4832
2be9a     73 74 72 69 
2be9e     67          | 	byte	"strig"
2be9f     00          | 	byte	0
2bea0                 | LR__4833
2bea0     74 61 6E    | 	byte	"tan"
2bea3     00          | 	byte	0
2bea4                 | LR__4834
2bea4     61          | 	byte	"a"
2bea5     00          | 	byte	0
2bea6                 | LR__4835
2bea6     7A          | 	byte	"z"
2bea7     00          | 	byte	0
2bea8                 | LR__4836
2bea8     5F          | 	byte	"_"
2bea9     00          | 	byte	0
2beaa                 | LR__4837
2beaa     61          | 	byte	"a"
2beab     00          | 	byte	0
2beac                 | LR__4838
2beac     7A          | 	byte	"z"
2bead     00          | 	byte	0
2beae                 | LR__4839
2beae     30          | 	byte	"0"
2beaf     00          | 	byte	0
2beb0                 | LR__4840
2beb0     39          | 	byte	"9"
2beb1     00          | 	byte	0
2beb2                 | LR__4841
2beb2     5F          | 	byte	"_"
2beb3     00          | 	byte	0
2beb4                 | LR__4842
2beb4     2E          | 	byte	"."
2beb5     00          | 	byte	0
2beb6                 | LR__4843
2beb6     61          | 	byte	"a"
2beb7     00          | 	byte	0
2beb8                 | LR__4844
2beb8     7A          | 	byte	"z"
2beb9     00          | 	byte	0
2beba                 | LR__4845
2beba     30          | 	byte	"0"
2bebb     00          | 	byte	0
2bebc                 | LR__4846
2bebc     39          | 	byte	"9"
2bebd     00          | 	byte	0
2bebe                 | LR__4847
2bebe     5F          | 	byte	"_"
2bebf     00          | 	byte	0
2bec0                 | LR__4848
2bec0     24          | 	byte	"$"
2bec1     00          | 	byte	0
2bec2                 | LR__4849
2bec2     25          | 	byte	"%"
2bec3     00          | 	byte	0
2bec4                 | LR__4850
2bec4     21          | 	byte	"!"
2bec5     00          | 	byte	0
2bec6                 | LR__4851
2bec6     30          | 	byte	"0"
2bec7     00          | 	byte	0
2bec8                 | LR__4852
2bec8     39          | 	byte	"9"
2bec9     00          | 	byte	0
2beca                 | LR__4853
2beca     2E          | 	byte	"."
2becb     00          | 	byte	0
2becc                 | LR__4854
2becc     24          | 	byte	"$"
2becd     00          | 	byte	0
2bece                 | LR__4855
2bece     25          | 	byte	"%"
2becf     00          | 	byte	0
2bed0                 | LR__4856
2bed0     2D          | 	byte	"-"
2bed1     00          | 	byte	0
2bed2                 | LR__4857
2bed2     2E          | 	byte	"."
2bed3     00          | 	byte	0
2bed4                 | LR__4858
2bed4     30          | 	byte	"0"
2bed5     00          | 	byte	0
2bed6                 | LR__4859
2bed6     39          | 	byte	"9"
2bed7     00          | 	byte	0
2bed8                 | LR__4860
2bed8     5F          | 	byte	"_"
2bed9     00          | 	byte	0
2beda                 | LR__4861
2beda     2E          | 	byte	"."
2bedb     00          | 	byte	0
2bedc                 | LR__4862
2bedc     45          | 	byte	"E"
2bedd     00          | 	byte	0
2bede                 | LR__4863
2bede     65          | 	byte	"e"
2bedf     00          | 	byte	0
2bee0                 | LR__4864
2bee0     2D          | 	byte	"-"
2bee1     00          | 	byte	0
2bee2                 | LR__4865
2bee2     2D          | 	byte	"-"
2bee3     00          | 	byte	0
2bee4                 | LR__4866
2bee4     65          | 	byte	"e"
2bee5     00          | 	byte	0
2bee6                 | LR__4867
2bee6     2E          | 	byte	"."
2bee7     00          | 	byte	0
2bee8                 | LR__4868
2bee8     45          | 	byte	"E"
2bee9     00          | 	byte	0
2beea                 | LR__4869
2beea     65          | 	byte	"e"
2beeb     00          | 	byte	0
2beec                 | LR__4870
2beec     30          | 	byte	"0"
2beed     00          | 	byte	0
2beee                 | LR__4871
2beee     39          | 	byte	"9"
2beef     00          | 	byte	0
2bef0                 | LR__4872
2bef0     24          | 	byte	"$"
2bef1     00          | 	byte	0
2bef2                 | LR__4873
2bef2     25          | 	byte	"%"
2bef3     00          | 	byte	0
2bef4                 | LR__4874
2bef4     2D          | 	byte	"-"
2bef5     00          | 	byte	0
2bef6                 | LR__4875
2bef6     30          | 	byte	"0"
2bef7     00          | 	byte	0
2bef8                 | LR__4876
2bef8     39          | 	byte	"9"
2bef9     00          | 	byte	0
2befa                 | LR__4877
2befa     5F          | 	byte	"_"
2befb     00          | 	byte	0
2befc                 | LR__4878
2befc     30          | 	byte	"0"
2befd     00          | 	byte	0
2befe                 | LR__4879
2befe     39          | 	byte	"9"
2beff     00          | 	byte	0
2bf00                 | LR__4880
2bf00     5F          | 	byte	"_"
2bf01     00          | 	byte	0
2bf02                 | LR__4881
2bf02     22          | 	byte	34
2bf03     00          | 	byte	0
2bf04                 | LR__4882
2bf04     22          | 	byte	34
2bf05     00          | 	byte	0
2bf06                 | LR__4883
2bf06     44 69 6D 3A 
2bf0a     20 61 74 20 
2bf0e     6C 69 6E 65 
2bf12     20          | 	byte	"Dim: at line "
2bf13     00          | 	byte	0
2bf14                 | LR__4884
2bf14     3A 20 77 61 
2bf18     72 6E 69 6E 
2bf1c     67 3A 20 74 
2bf20     68 65 20 76 
2bf24     61 72 69 61 
2bf28     62 6C 65 20 
2bf2c     65 78 69 73 
2bf30     74 65 64 2E | 	byte	": warning: the variable existed."
2bf34     00          | 	byte	0
2bf35                 | LR__4885
2bf35     28          | 	byte	"("
2bf36     00          | 	byte	0
2bf37                 | LR__4886
2bf37     61 73       | 	byte	"as"
2bf39     00          | 	byte	0
2bf3a                 | LR__4887
2bf3a     61 73       | 	byte	"as"
2bf3c     00          | 	byte	0
2bf3d                 | LR__4888
2bf3d     2C          | 	byte	","
2bf3e     00          | 	byte	0
2bf3f                 | LR__4889
2bf3f     29          | 	byte	")"
2bf40     00          | 	byte	0
2bf41                 | LR__4890
2bf41     29          | 	byte	")"
2bf42     00          | 	byte	0
2bf43                 | LR__4891
2bf43     61 73       | 	byte	"as"
2bf45     00          | 	byte	0
2bf46                 | LR__4892
2bf46     62 79 74 65 | 	byte	"byte"
2bf4a     00          | 	byte	0
2bf4b                 | LR__4893
2bf4b     75 62 79 74 
2bf4f     65          | 	byte	"ubyte"
2bf50     00          | 	byte	0
2bf51                 | LR__4894
2bf51     73 68 6F 72 
2bf55     74          | 	byte	"short"
2bf56     00          | 	byte	0
2bf57                 | LR__4895
2bf57     75 73 68 6F 
2bf5b     72 74       | 	byte	"ushort"
2bf5d     00          | 	byte	0
2bf5e                 | LR__4896
2bf5e     6C 6F 6E 67 | 	byte	"long"
2bf62     00          | 	byte	0
2bf63                 | LR__4897
2bf63     69 6E 74 65 
2bf67     67 65 72    | 	byte	"integer"
2bf6a     00          | 	byte	0
2bf6b                 | LR__4898
2bf6b     75 6C 6F 6E 
2bf6f     67          | 	byte	"ulong"
2bf70     00          | 	byte	0
2bf71                 | LR__4899
2bf71     69 6E 74 36 
2bf75     34          | 	byte	"int64"
2bf76     00          | 	byte	0
2bf77                 | LR__4900
2bf77     75 69 6E 74 
2bf7b     36 34       | 	byte	"uint64"
2bf7d     00          | 	byte	0
2bf7e                 | LR__4901
2bf7e     73 69 6E 67 
2bf82     6C 65       | 	byte	"single"
2bf84     00          | 	byte	0
2bf85                 | LR__4902
2bf85     64 6F 75 62 
2bf89     6C 65       | 	byte	"double"
2bf8b     00          | 	byte	0
2bf8c                 | LR__4903
2bf8c     73 74 72 69 
2bf90     6E 67       | 	byte	"string"
2bf92     00          | 	byte	0
2bf93                 | LR__4904
2bf93     74 6F       | 	byte	"to"
2bf95     00          | 	byte	0
2bf96                 | LR__4905
2bf96     73 74 65 70 | 	byte	"step"
2bf9a     00          | 	byte	0
2bf9b                 | LR__4906
2bf9b     73 2E       | 	byte	"s."
2bf9d     00          | 	byte	0
2bf9e                 | LR__4907
2bf9e     57 65 20 68 
2bfa2     61 76 65 20 
2bfa6     61 20 73 6C 
2bfaa     6F 77 20 67 
2bfae     6F 74 6F 2C 
2bfb2     20 74 6F 64 
2bfb6     6F 20 20    | 	byte	"We have a slow goto, todo  "
2bfb9     00          | 	byte	0
2bfba                 | LR__4908
2bfba     6E 6F 6E 61 
2bfbe     6D 65 2E 62 
2bfc2     61 73       | 	byte	"noname.bas"
2bfc4     00          | 	byte	0
2bfc5                 | LR__4909
2bfc5                 | 	byte	
2bfc5     00          | 	byte	0
2bfc6                 | LR__4910
2bfc6     6E 6F 6E 61 
2bfca     6D 65 2E 62 
2bfce     61 73       | 	byte	"noname.bas"
2bfd0     00          | 	byte	0
2bfd1                 | LR__4911
2bfd1     2F          | 	byte	"/"
2bfd2     00          | 	byte	0
2bfd3                 | LR__4912
2bfd3                 | 	byte	
2bfd3     00          | 	byte	0
2bfd4                 | LR__4913
2bfd4                 | 	byte	
2bfd4     00          | 	byte	0
2bfd5                 | LR__4914
2bfd5     6E 6F 6E 61 
2bfd9     6D 65 2E 62 
2bfdd     61 73       | 	byte	"noname.bas"
2bfdf     00          | 	byte	0
2bfe0                 | LR__4915
2bfe0     2F          | 	byte	"/"
2bfe1     00          | 	byte	0
2bfe2                 | LR__4916
2bfe2     53 79 73 74 
2bfe6     65 6D 20 65 
2bfea     72 72 6F 72 
2bfee     20          | 	byte	"System error "
2bfef     00          | 	byte	0
2bff0                 | LR__4917
2bff0     3A 20       | 	byte	": "
2bff2     00          | 	byte	0
2bff3                 | LR__4918
2bff3     2F          | 	byte	"/"
2bff4     00          | 	byte	0
2bff5                 | LR__4919
2bff5     30          | 	byte	"0"
2bff6     00          | 	byte	0
2bff7                 | LR__4920
2bff7     39          | 	byte	"9"
2bff8     00          | 	byte	0
2bff9                 | LR__4921
2bff9                 | 	byte	
2bff9     00          | 	byte	0
2bffa                 | LR__4922
2bffa     53 74 6F 70 
2bffe     70 65 64 20 
2c002     61 74 20 6C 
2c006     69 6E 65 20 | 	byte	"Stopped at line "
2c00a     00          | 	byte	0
2c00b                 | LR__4923
2c00b                 | 	byte	
2c00b     00          | 	byte	0
2c00c                 | LR__4924
2c00c                 | 	byte	
2c00c     00          | 	byte	0
2c00d                 | LR__4925
2c00d     2F 73 64 2F 
2c011     6D 65 64 69 
2c015     61 2F 68 2F | 	byte	"/sd/media/h/"
2c019     00          | 	byte	0
2c01a                 | LR__4926
2c01a     53 79 73 74 
2c01e     65 6D 20 65 
2c022     72 72 6F 72 
2c026     20          | 	byte	"System error "
2c027     00          | 	byte	0
2c028                 | LR__4927
2c028     3A 20       | 	byte	": "
2c02a     00          | 	byte	0
2c02b                 | LR__4928
2c02b                 | 	byte	
2c02b     00          | 	byte	0
2c02c                 | LR__4929
2c02c                 | 	byte	
2c02c     00          | 	byte	0
2c02d                 | LR__4930
2c02d     2F 73 64 2F 
2c031     6D 65 64 69 
2c035     61 2F 73 2F | 	byte	"/sd/media/s/"
2c039     00          | 	byte	0
2c03a                 | LR__4931
2c03a     53 79 73 74 
2c03e     65 6D 20 65 
2c042     72 72 6F 72 
2c046     20          | 	byte	"System error "
2c047     00          | 	byte	0
2c048                 | LR__4932
2c048     3A 20       | 	byte	": "
2c04a     00          | 	byte	0
2c04b                 | LR__4933
2c04b     45 72 72 6F 
2c04f     72 20       | 	byte	"Error "
2c051     00          | 	byte	0
2c052                 | LR__4934
2c052     3A 20       | 	byte	": "
2c054     00          | 	byte	0
2c055                 | LR__4935
2c055                 | 	byte	
2c055     00          | 	byte	0
2c056                 | LR__4936
2c056                 | 	byte	
2c056     00          | 	byte	0
2c057                 | LR__4937
2c057     72 6E 64 3A 
2c05b     20          | 	byte	"rnd: "
2c05c     00          | 	byte	0
2c05d                 | LR__4938
2c05d     72 6E 64 3A 
2c061     20          | 	byte	"rnd: "
2c062     00          | 	byte	0
2c063                 | LR__4939
2c063     67 65 74 65 
2c067     6E 76 73 75 
2c06b     73 74 61 69 
2c06f     6E 3A 20    | 	byte	"getenvsustain: "
2c072     00          | 	byte	0
2c073                 | LR__4940
2c073     73 69 6E 3A 
2c077     20          | 	byte	"sin: "
2c078     00          | 	byte	0
2c079                 | LR__4941
2c079     63 6F 73 3A 
2c07d     20          | 	byte	"cos: "
2c07e     00          | 	byte	0
2c07f                 | LR__4942
2c07f     74 61 6E 3A 
2c083     20          | 	byte	"tan: "
2c084     00          | 	byte	0
2c085                 | LR__4943
2c085     61 73 69 6E 
2c089     3A 20       | 	byte	"asin: "
2c08b     00          | 	byte	0
2c08c                 | LR__4944
2c08c     61 63 6F 73 
2c090     3A 20       | 	byte	"acos: "
2c092     00          | 	byte	0
2c093                 | LR__4945
2c093     61 74 6E 3A 
2c097     20          | 	byte	"atn: "
2c098     00          | 	byte	0
2c099                 | LR__4946
2c099     73 71 72 3A 
2c09d     20          | 	byte	"sqr: "
2c09e     00          | 	byte	0
2c09f                 | LR__4947
2c09f     73 74 69 63 
2c0a3     6B 3A 20    | 	byte	"stick: "
2c0a6     00          | 	byte	0
2c0a7                 | LR__4948
2c0a7     73 74 72 69 
2c0ab     67 3A 20    | 	byte	"strig: "
2c0ae     00          | 	byte	0
2c0af                 | LR__4949
2c0af     67 65 74 70 
2c0b3     69 78 65 6C 
2c0b7     3A 20       | 	byte	"getpixel: "
2c0b9     00          | 	byte	0
2c0ba                 | LR__4950
2c0ba                 | 	byte	
2c0ba     00          | 	byte	0
2c0bb                 | LR__4951
2c0bb     2F 73 64 2F 
2c0bf     62 61 73    | 	byte	"/sd/bas"
2c0c2     00          | 	byte	0
2c0c3                 | LR__4952
2c0c3     57 6F 72 6B 
2c0c7     69 6E 67 20 
2c0cb     64 69 72 65 
2c0cf     63 74 6F 72 
2c0d3     79 3A 20    | 	byte	"Working directory: "
2c0d6     00          | 	byte	0
2c0d7                 | LR__4953
2c0d7     2A          | 	byte	"*"
2c0d8     00          | 	byte	0
2c0d9                 | LR__4954
2c0d9                 | 	byte	
2c0d9     00          | 	byte	0
2c0da                 | LR__4955
2c0da     5B 64 69 72 
2c0de     5D 20       | 	byte	"[dir] "
2c0e0     00          | 	byte	0
2c0e1                 | LR__4956
2c0e1     2A          | 	byte	"*"
2c0e2     00          | 	byte	0
2c0e3                 | LR__4957
2c0e3                 | 	byte	
2c0e3     00          | 	byte	0
2c0e4                 | LR__4958
2c0e4     2D 2D 2D 2D 
2c0e8     2D 6D 6F 72 
2c0ec     65 2C 20 70 
2c0f0     72 65 73 73 
2c0f4     20 61 6E 79 
2c0f8     20 6B 65 79 | 	byte	"-----more, press any key"
2c0fc     00          | 	byte	0
2c0fd                 | LR__4959
2c0fd     20 20 20 20 
      ...             
2c115     20 20 20 20 
2c119     20          | 	byte	"                             "
2c11a     00          | 	byte	0
2c11b                 | LR__4960
2c11b     2F          | 	byte	"/"
2c11c     00          | 	byte	0
2c11d                 | LR__4961
2c11d     2F 73 64 2F 
2c121     62 69 6E 2F | 	byte	"/sd/bin/"
2c125     00          | 	byte	0
2c126                 | LR__4962
2c126     53 79 73 74 
2c12a     65 6D 20 65 
2c12e     72 72 6F 72 
2c132     20          | 	byte	"System error "
2c133     00          | 	byte	0
2c134                 | LR__4963
2c134     3A 20       | 	byte	": "
2c136     00          | 	byte	0
2c137                 | LR__4964
2c137                 | 	byte	
2c137     00          | 	byte	0
2c138                 | LR__4965
2c138     45 78 70 65 
2c13c     63 74 65 64 
2c140     20 6E 75 6D 
2c144     62 65 72 2C 
2c148     20 67 6F 74 
2c14c     20 73 6F 6D 
2c150     65 74 68 69 
2c154     6E 67 20 65 
2c158     6C 73 65 2E | 	byte	"Expected number, got something else."
2c15c     00          | 	byte	0
2c15d                 | LR__4966
2c15d     43 61 6E 6E 
2c161     6F 74 20 61 
2c165     64 64 20 61 
2c169     20 6E 75 6D 
2c16d     62 65 72 20 
2c171     74 6F 20 61 
2c175     20 73 74 72 
2c179     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2c17d     00          | 	byte	0
2c17e                 | LR__4967
2c17e     43 61 6E 6E 
2c182     6F 74 20 73 
2c186     75 62 73 74 
2c18a     72 61 63 74 
2c18e     20 73 74 72 
2c192     69 6E 67 73 
2c196     2E          | 	byte	"Cannot substract strings."
2c197     00          | 	byte	0
2c198                 | LR__4968
2c198     55 6E 6B 6E 
2c19c     6F 77 6E 20 
2c1a0     65 72 72 6F 
2c1a4     72 20 77 68 
2c1a8     69 6C 65 20 
2c1ac     61 64 64 69 
2c1b0     6E 67 2E    | 	byte	"Unknown error while adding."
2c1b3     00          | 	byte	0
2c1b4                 | LR__4969
2c1b4     55 6E 6B 6E 
2c1b8     6F 77 6E 20 
2c1bc     65 72 72 6F 
2c1c0     72 20 77 68 
2c1c4     69 6C 65 20 
2c1c8     73 75 62 73 
2c1cc     74 72 61 63 
2c1d0     74 69 6E 67 
2c1d4     2E          | 	byte	"Unknown error while substracting."
2c1d5     00          | 	byte	0
2c1d6                 | LR__4970
2c1d6     43 61 6E 6E 
2c1da     6F 74 20 64 
2c1de     6F 20 6C 6F 
2c1e2     67 69 63 20 
2c1e6     6F 70 65 72 
2c1ea     61 74 69 6F 
2c1ee     6E 20 6F 6E 
2c1f2     20 73 74 72 
2c1f6     69 6E 67 20 
2c1fa     6F 72 20 66 
2c1fe     6C 6F 61 74 
2c202     2E          | 	byte	"Cannot do logic operation on string or float."
2c203     00          | 	byte	0
2c204                 | LR__4971
2c204     55 6E 6B 6E 
2c208     6F 77 6E 20 
2c20c     65 72 72 6F 
2c210     72 20 77 68 
2c214     69 6C 65 20 
2c218     64 6F 69 6E 
2c21c     67 20 6C 6F 
2c220     67 69 63 20 
2c224     6F 70 65 72 
2c228     61 74 69 6F 
2c22c     6E 2E       | 	byte	"Unknown error while doing logic operation."
2c22e     00          | 	byte	0
2c22f                 | LR__4972
2c22f     43 61 6E 6E 
2c233     6F 74 20 6D 
2c237     75 6C 74 69 
2c23b     70 6C 79 20 
2c23f     73 74 72 69 
2c243     6E 67 73 2E | 	byte	"Cannot multiply strings."
2c247     00          | 	byte	0
2c248                 | LR__4973
2c248     55 6E 6B 6E 
2c24c     6F 77 6E 20 
2c250     65 72 72 6F 
2c254     72 20 77 68 
2c258     69 6C 65 20 
2c25c     6D 75 6C 74 
2c260     69 70 6C 79 
2c264     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2c268     00          | 	byte	0
2c269                 | LR__4974
2c269     43 61 6E 6E 
2c26d     6F 74 20 64 
2c271     69 76 69 64 
2c275     65 20 73 74 
2c279     72 69 6E 67 
2c27d     73 2E       | 	byte	"Cannot divide strings."
2c27f     00          | 	byte	0
2c280                 | LR__4975
2c280     55 6E 6B 6E 
2c284     6F 77 6E 20 
2c288     65 72 72 6F 
2c28c     72 20 77 68 
2c290     69 6C 65 20 
2c294     64 69 76 69 
2c298     64 69 6E 67 
2c29c     2E          | 	byte	"Unknown error while dividing."
2c29d     00          | 	byte	0
2c29e                 | LR__4976
2c29e     43 61 6E 6E 
2c2a2     6F 74 20 63 
2c2a6     6F 6D 70 75 
2c2aa     74 65 20 61 
2c2ae     20 70 6F 77 
2c2b2     65 72 20 6F 
2c2b6     66 20 61 20 
2c2ba     73 74 72 69 
2c2be     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2c2c1     00          | 	byte	0
2c2c2                 | LR__4977
2c2c2     55 6E 6B 6E 
2c2c6     6F 77 6E 20 
2c2ca     65 72 72 6F 
2c2ce     72 20 77 68 
2c2d2     69 6C 65 20 
2c2d6     63 6F 6D 70 
2c2da     75 74 69 6E 
2c2de     67 20 61 20 
2c2e2     70 6F 77 65 
2c2e6     72 2E       | 	byte	"Unknown error while computing a power."
2c2e8     00          | 	byte	0
2c2e9                 | LR__4978
2c2e9     52 69 67 68 
2c2ed     74 20 70 61 
2c2f1     72 65 6E 74 
2c2f5     68 65 73 69 
2c2f9     73 20 65 78 
2c2fd     70 65 63 74 
2c301     65 64 2E    | 	byte	"Right parenthesis expected."
2c304     00          | 	byte	0
2c305                 | LR__4979
2c305     45 78 70 65 
2c309     63 74 65 64 
2c30d     20 73 74 72 
2c311     69 6E 67 2E | 	byte	"Expected string."
2c315     00          | 	byte	0
2c316                 | LR__4980
2c316     45 78 70 65 
2c31a     63 74 65 64 
2c31e     20 66 6C 6F 
2c322     61 74 2E    | 	byte	"Expected float."
2c325     00          | 	byte	0
2c326                 | LR__4981
2c326     45 78 70 65 
2c32a     63 74 65 64 
2c32e     20 75 6E 73 
2c332     69 67 6E 65 
2c336     64 20 69 6E 
2c33a     74 65 67 65 
2c33e     72 2E       | 	byte	"Expected unsigned integer."
2c340     00          | 	byte	0
2c341                 | LR__4982
2c341     45 78 70 65 
2c345     63 74 65 64 
2c349     20 69 6E 74 
2c34d     65 67 65 72 
2c351     2E          | 	byte	"Expected integer."
2c352     00          | 	byte	0
2c353                 | LR__4983
2c353     4E 6F 20 6D 
2c357     6F 72 65 20 
2c35b     76 61 72 69 
2c35f     61 62 6C 65 
2c363     20 73 6C 6F 
2c367     74 73 2E    | 	byte	"No more variable slots."
2c36a     00          | 	byte	0
2c36b                 | LR__4984
2c36b     56 61 72 69 
2c36f     61 62 6C 65 
2c373     20 6E 6F 74 
2c377     20 66 6F 75 
2c37b     6E 64 2E    | 	byte	"Variable not found."
2c37e     00          | 	byte	0
2c37f                 | LR__4985
2c37f     43 6F 6D 6D 
2c383     61 20 65 78 
2c387     70 65 63 74 
2c38b     65 64 2E    | 	byte	"Comma expected."
2c38e     00          | 	byte	0
2c38f                 | LR__4986
2c38f     43 6F 6D 6D 
2c393     61 20 6F 72 
2c397     20 73 65 6D 
2c39b     69 63 6F 6C 
2c39f     6F 6E 20 65 
2c3a3     78 70 65 63 
2c3a7     74 65 64 2E | 	byte	"Comma or semicolon expected."
2c3ab     00          | 	byte	0
2c3ac                 | LR__4987
2c3ac     55 6E 6B 6E 
2c3b0     6F 77 6E 20 
2c3b4     63 6F 6D 6D 
2c3b8     61 6E 64 2E | 	byte	"Unknown command."
2c3bc     00          | 	byte	0
2c3bd                 | LR__4988
2c3bd     53 74 61 63 
2c3c1     6B 20 75 6E 
2c3c5     64 65 72 66 
2c3c9     6C 6F 77 2E | 	byte	"Stack underflow."
2c3cd     00          | 	byte	0
2c3ce                 | LR__4989
2c3ce     43 61 6E 6E 
2c3d2     6F 74 20 65 
2c3d6     78 65 63 75 
2c3da     74 65 20 67 
2c3de     6F 74 6F 20 
2c3e2     69 6E 20 74 
2c3e6     68 65 20 69 
2c3ea     6D 6D 65 64 
2c3ee     69 61 74 65 
2c3f2     20 6D 6F 64 
2c3f6     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2c3f8     00          | 	byte	0
2c3f9                 | LR__4990
2c3f9     43 61 6E 6E 
2c3fd     6F 74 20 6C 
2c401     6F 61 64 20 
2c405     66 72 6F 6D 
2c409     20 74 68 69 
2c40d     73 20 66 69 
2c411     6C 65 2E    | 	byte	"Cannot load from this file."
2c414     00          | 	byte	0
2c415                 | LR__4991
2c415     54 68 65 20 
2c419     70 72 6F 67 
2c41d     72 61 6D 20 
2c421     69 73 20 65 
2c425     6D 70 74 79 
2c429     2E          | 	byte	"The program is empty."
2c42a     00          | 	byte	0
2c42b                 | LR__4992
2c42b     49 66 20 61 
2c42f     66 74 65 72 
2c433     20 69 66 2E | 	byte	"If after if."
2c437     00          | 	byte	0
2c438                 | LR__4993
2c438     45 6D 70 74 
2c43c     79 20 65 78 
2c440     70 72 65 73 
2c444     73 69 6F 6E 
2c448     2E          | 	byte	"Empty expression."
2c449     00          | 	byte	0
2c44a                 | LR__4994
2c44a     53 74 72 69 
2c44e     6E 67 20 65 
2c452     78 70 65 63 
2c456     74 65 64 2E | 	byte	"String expected."
2c45a     00          | 	byte	0
2c45b                 | LR__4995
2c45b     49 6E 74 65 
2c45f     72 70 72 65 
2c463     74 65 72 20 
2c467     69 6E 74 65 
2c46b     72 6E 61 6C 
2c46f     20 65 72 72 
2c473     6F 72 2E    | 	byte	"Interpreter internal error."
2c476     00          | 	byte	0
2c477                 | LR__4996
2c477     45 78 70 65 
2c47b     63 74 65 64 
2c47f     20 61 73 73 
2c483     69 67 6E 2E | 	byte	"Expected assign."
2c487     00          | 	byte	0
2c488                 | LR__4997
2c488     45 78 70 65 
2c48c     63 74 65 64 
2c490     20 27 74 6F 
2c494     27 2E       | 	byte	"Expected 'to'."
2c496     00          | 	byte	0
2c497                 | LR__4998
2c497     45 78 70 65 
2c49b     63 74 65 64 
2c49f     20 69 6E 74 
2c4a3     65 67 65 72 
2c4a7     20 76 61 72 
2c4ab     69 61 62 6C 
2c4af     65 2E       | 	byte	"Expected integer variable."
2c4b1     00          | 	byte	0
2c4b2                 | LR__4999
2c4b2     55 6E 69 6E 
2c4b6     69 74 69 61 
2c4ba     6C 69 7A 65 
2c4be     64 20 76 61 
2c4c2     72 69 61 62 
2c4c6     6C 65 20 69 
2c4ca     6E 20 27 6E 
2c4ce     65 78 74 27 
2c4d2     2C 20 75 73 
2c4d6     65 20 27 66 
2c4da     6F 72 27 20 
2c4de     62 65 66 6F 
2c4e2     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2c4e5     00          | 	byte	0
2c4e6                 | LR__5000
2c4e6     4E 6F 20 6D 
2c4ea     6F 72 65 20 
2c4ee     73 6C 6F 74 
2c4f2     73 20 66 6F 
2c4f6     72 20 27 66 
2c4fa     6F 72 27 2E | 	byte	"No more slots for 'for'."
2c4fe     00          | 	byte	0
2c4ff                 | LR__5001
2c4ff     27 4E 65 78 
2c503     74 27 20 64 
2c507     6F 65 73 6E 
2c50b     27 74 20 6D 
2c50f     61 74 63 68 
2c513     20 27 66 6F 
2c517     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2c51a     00          | 	byte	0
2c51b                 | LR__5002
2c51b     27 47 6F 74 
2c51f     6F 27 20 74 
2c523     61 72 67 65 
2c527     74 20 6C 69 
2c52b     6E 65 20 6E 
2c52f     6F 74 20 66 
2c533     6F 75 6E 64 
2c537     2E          | 	byte	"'Goto' target line not found."
2c538     00          | 	byte	0
2c539                 | LR__5003
2c539     42 61 64 20 
2c53d     6E 75 6D 62 
2c541     65 72 20 6F 
2c545     66 20 70 61 
2c549     72 61 6D 65 
2c54d     74 65 72 73 | 	byte	"Bad number of parameters"
2c551     00          | 	byte	0
2c552                 | LR__5004
2c552     46 75 6E 63 
2c556     74 69 6F 6E 
2c55a     20 75 6E 64 
2c55e     65 66 69 6E 
2c562     65 64 20 66 
2c566     6F 72 20 73 
2c56a     74 72 69 6E 
2c56e     67 73       | 	byte	"Function undefined for strings"
2c570     00          | 	byte	0
2c571                 | LR__5005
2c571     42 61 64 20 
2c575     70 61 72 61 
2c579     6D 65 74 65 
2c57d     72 2E       | 	byte	"Bad parameter."
2c57f     00          | 	byte	0
2c580                 | LR__5006
2c580     43 61 6E 6E 
2c584     6F 74 20 64 
2c588     65 63 6C 61 
2c58c     72 65 20 61 
2c590     6E 20 61 72 
2c594     72 61 79 3A 
2c598     20 74 68 65 
2c59c     20 76 61 72 
2c5a0     69 61 62 6C 
2c5a4     65 20 65 78 
2c5a8     69 73 74 73 
2c5ac     2E          | 	byte	"Cannot declare an array: the variable exists."
2c5ad     00          | 	byte	0
2c5ae                 | LR__5007
2c5ae     45 78 70 65 
2c5b2     63 74 65 64 
2c5b6     20 27 28 27 
2c5ba     2E          | 	byte	"Expected '('."
2c5bb     00          | 	byte	0
2c5bc                 | LR__5008
2c5bc     45 78 70 65 
2c5c0     63 74 65 64 
2c5c4     20 27 29 27 
2c5c8     20 6F 72 20 
2c5cc     27 2C 27 2E | 	byte	"Expected ')' or ','."
2c5d0     00          | 	byte	0
2c5d1                 | LR__5009
2c5d1     4E 6F 20 6D 
2c5d5     6F 72 65 20 
2c5d9     74 68 61 6E 
2c5dd     20 33 20 64 
2c5e1     69 6D 65 6E 
2c5e5     73 69 6F 6E 
2c5e9     73 20 73 75 
2c5ed     70 70 6F 72 
2c5f1     74 65 64    | 	byte	"No more than 3 dimensions supported"
2c5f4     00          | 	byte	0
2c5f5                 | LR__5010
2c5f5     56 61 72 69 
2c5f9     61 62 6C 65 
2c5fd     20 6E 61 6D 
2c601     65 20 65 78 
2c605     70 65 63 74 
2c609     65 64       | 	byte	"Variable name expected"
2c60b     00          | 	byte	0
2c60c                 | LR__5011
2c60c     54 79 70 65 
2c610     20 6E 61 6D 
2c614     65 20 65 78 
2c618     70 65 63 74 
2c61c     65 64       | 	byte	"Type name expected"
2c61e     00          | 	byte	0
2c61f                 | LR__5012
2c61f     54 79 70 65 
2c623     20 6E 6F 74 
2c627     20 73 75 70 
2c62b     70 6F 72 74 
2c62f     65 64 20 79 
2c633     65 74       | 	byte	"Type not supported yet"
2c635     00          | 	byte	0
2c636                 | LR__5013
2c636     41 72 72 61 
2c63a     79 20 69 6E 
2c63e     64 65 78 20 
2c642     6F 75 74 20 
2c646     6F 66 20 72 
2c64a     61 6E 67 65 | 	byte	"Array index out of range"
2c64e     00          | 	byte	0
2c64f                 | LR__5014
2c64f     45 72 72 6F 
2c653     72 20       | 	byte	"Error "
2c655     00          | 	byte	0
2c656                 | LR__5015
2c656     3A 20       | 	byte	": "
2c658     00          | 	byte	0
2c659                 | LR__5016
2c659     2F 73 64    | 	byte	"/sd"
2c65c     00          | 	byte	0
2c65d                 | LR__5017
2c65d     2F 73 64 2F 
2c661     62 61 73    | 	byte	"/sd/bas"
2c664     00          | 	byte	0
2c665                 | LR__5018
2c665     2F 73 64 2F 
2c669     62 61 73    | 	byte	"/sd/bas"
2c66c     00          | 	byte	0
2c66d                 | LR__5019
2c66d     20 42 41 53 
2c671     49 43 20 62 
2c675     79 74 65 73 
2c679     20 66 72 65 
2c67d     65          | 	byte	" BASIC bytes free"
2c67e     00          | 	byte	0
2c67f                 | LR__5020
2c67f     52 65 61 64 
2c683     79          | 	byte	"Ready"
2c684     00          | 	byte	0
2c685                 | LR__5021
2c685     6E 6F 6E 61 
2c689     6D 65 2E 62 
2c68d     61 73       | 	byte	"noname.bas"
2c68f     00          | 	byte	0
2c690                 | LR__5022
2c690     20          | 	byte	" "
2c691     00          | 	byte	0
2c692                 | LR__5023
2c692     20          | 	byte	" "
2c693     00          | 	byte	0
2c694                 | LR__5024
2c694                 | 	byte	
2c694     00          | 	byte	0
2c695                 | LR__5025
2c695                 | 	byte	
2c695     00          | 	byte	0
2c696     00 00       | 	alignl
2c698                 | _dat_
2c698     00 00 00 00 
2c69c     00 00 00 00 
2c6a0     00 00 00 00 
2c6a4     00 00 00 00 | 	byte	$00[16]
2c6a8     61 41 17 0E 
2c6ac     62 42 00 00 
2c6b0     63 43 19 10 
2c6b4     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2c6b8     65 45 18 0F 
2c6bc     66 46 00 00 
2c6c0     67 47 00 00 
2c6c4     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2c6c8     69 49 00 00 
2c6cc     6A 4A 00 00 
2c6d0     6B 4B 00 00 
2c6d4     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2c6d8     6D 4D 00 00 
2c6dc     6E 4E 1A 11 
2c6e0     6F 4F 1E 15 
2c6e4     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2c6e8     71 51 00 00 
2c6ec     72 52 00 00 
2c6f0     73 53 1B 12 
2c6f4     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2c6f8     75 55 00 00 
2c6fc     76 56 00 00 
2c700     77 57 00 00 
2c704     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2c708     79 59 00 00 
2c70c     7A 5A 1D 14 
2c710     31 21 04 00 
2c714     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2c718     33 23 06 00 
2c71c     34 24 07 00 
2c720     35 25 08 00 
2c724     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2c728     37 26 0A 00 
2c72c     38 2A 0B 00 
2c730     39 28 0C 00 
2c734     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2c738     8D 8D 00 00 
2c73c     9B 9B 00 00 
2c740     88 88 00 00 
2c744     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2c748     20 20 00 00 
2c74c     2D 5F 00 00 
2c750     3D 2B 00 00 
2c754     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2c758     5D 7D 00 00 
2c75c     5C 7C 00 00 
2c760     23 7E 00 00 
2c764     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2c768     27 22 00 00 
2c76c     60 7E 03 00 
2c770     2C 3C 00 00 
2c774     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2c778     2F 3F 00 00 
2c77c     B9 B9 00 00 
2c780     BA 00 00 00 
2c784     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2c788     BC 00 00 00 
2c78c     BD 00 00 00 
2c790     BE 00 00 00 
2c794     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2c798     C0 00 00 00 
2c79c     C1 00 00 00 
2c7a0     C2 00 00 00 
2c7a4     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2c7a8     C4 00 00 00 
2c7ac     C5 00 00 00 
2c7b0     C6 00 00 00 
2c7b4     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2c7b8     C8 00 00 00 
2c7bc     C9 00 00 00 
2c7c0     CA 00 00 00 
2c7c4     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2c7c8     7F 7F 00 00 
2c7cc     CC 00 00 00 
2c7d0     CD 00 00 00 
2c7d4     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2c7d8     CF 00 00 00 
2c7dc     D0 00 00 00 
2c7e0     D1 00 00 00 
2c7e4     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2c7e8     2F 2F 00 00 
2c7ec     2A 2A 00 00 
2c7f0     2D 2D 00 00 
2c7f4     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2c7f8     8D 8D 00 00 
2c7fc     31 31 00 00 
2c800     32 32 00 00 
2c804     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2c808     34 34 00 00 
2c80c     35 35 00 00 
2c810     36 36 00 00 
2c814     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2c818     38 38 00 00 
2c81c     39 39 00 00 
2c820     30 30 00 00 
2c824     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2c828     5C 7C 00 00 
2c82c     00 00 00 00 
2c830     00 00 00 00 
2c834     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2c838     00 00 00 00 
      ...             
2c890     00 00 00 00 
2c894     00 00 00 00 | 	byte	$00[96]
2c898     2B 00 A6 F2 
2c89c     24 A7 09 80 
2c8a0     5B 88 4D 89 
2c8a4     80 88 A5 88 | atari_spl file "atari.spl"
2c8a8     6D 88 B8 88 
2c8ac     80 88 CB 88 
2c8b0     92 88 A5 88 
2c8b4     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2c8b8     A5 88 CA 88 
2c8bc     A6 88 DD 88 
2c8c0     B8 88 AB 89 
2c8c4     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2c8c8     C8 AD C6 F1 
2c8cc     91 06 B6 FF 
2c8d0     13 00 4A 00 
2c8d4     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2c8d8     5D 00 5E 00 
2c8dc     5D 00 5E 00 
2c8e0     5E 00 5D 00 
2c8e4     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2c8e8     38 00 83 00 
2c8ec     25 00 83 00 
2c8f0     C3 FE D1 04 
2c8f4     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2c8f8     48 88 38 85 
2c8fc     41 8A CB 88 
2c900     28 89 B8 88 
2c904     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2c908     15 89 03 89 
2c90c     02 89 15 89 
2c910     16 89 15 89 
2c914     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2c918     15 89 3A 89 
2c91c     72 89 E3 89 
2c920     52 83 AD 97 
2c924     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2c928     0C 02 B6 FF 
2c92c     E1 00 A8 00 
2c930     F3 00 A8 00 
2c934     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2c938     CE 00 CD 00 
2c93c     CD 00 BA 00 
2c940     E1 00 BB 00 
2c944     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2c948     DF 00 C9 FF 
2c94c     E6 01 B6 06 
2c950     EE DD 8D 98 
2c954     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2c958     97 89 73 89 
2c95c     3B 89 60 89 
2c960     60 89 60 89 
2c964     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2c968     73 89 72 89 
2c96c     85 89 73 89 
2c970     AA 89 60 89 
2c974     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2c978     E8 8A 18 86 
2c97c     92 88 A5 C2 
2c980     E0 00 C3 05 
2c984     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2c988     F2 00 64 01 
2c98c     06 01 3E 01 
2c990     2B 01 2B 01 
2c994     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2c998     2B 01 2A 01 
2c99c     2B 01 2B 01 
2c9a0     2B 01 18 01 
2c9a4     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2c9a8     39 07 61 F3 
2c9ac     C0 AF 37 85 
2c9b0     0F 88 8B 8A 
2c9b4     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2c9b8     AB 89 D0 89 
2c9bc     AB 89 D0 89 
2c9c0     D0 89 CF 89 
2c9c4     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2c9c8     D0 89 F5 89 
2c9cc     BD 89 08 8A 
2c9d0     CF 89 E8 8A 
2c9d4     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2c9d8     53 B3 0D F8 
2c9dc     F4 07 38 00 
2c9e0     63 01 63 01 
2c9e4     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2c9e8     88 01 88 01 
2c9ec     76 01 88 01 
2c9f0     88 01 89 01 
2c9f4     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2c9f8     75 01 AE 01 
2c9fc     76 01 88 01 
2ca00     4A 00 46 06 
2ca04     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2ca08     08 8A 9A 86 
2ca0c     33 8B 08 8A 
2ca10     2D 8A F5 89 
2ca14     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2ca18     2D 8A 2D 8A 
2ca1c     2E 8A 1B 8A 
2ca20     40 8A 2D 8A 
2ca24     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2ca28     2E 8A 79 8A 
2ca2c     66 8A C8 8B 
2ca30     72 82 2B 97 
2ca34     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2ca38     1D 02 05 01 
2ca3c     F8 01 C0 01 
2ca40     0B 02 C0 01 
2ca44     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2ca48     F9 01 D3 01 
2ca4c     F8 01 D3 01 
2ca50     F8 01 D2 01 
2ca54     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2ca58     E6 01 2B 01 
2ca5c     8E 02 5F 07 
2ca60     F7 E2 ED 9C 
2ca64     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2ca68     E8 8A 78 8A 
2ca6c     78 8A 65 8A 
2ca70     8B 8A 78 8A 
2ca74     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2ca78     8B 8A 9D 8A 
2ca7c     9D 8A 8B 8A 
2ca80     C2 8A 78 8A 
2ca84     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2ca88     70 8C 18 86 
2ca8c     8B 8A 23 C9 
2ca90     CB 03 C4 05 
2ca94     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2ca98     0B 02 7B 02 
2ca9c     1E 02 55 02 
2caa0     30 02 43 02 
2caa4     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2caa8     43 02 44 02 
2caac     43 02 30 02 
2cab0     68 02 31 02 
2cab4     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2cab8     07 08 3F F7 
2cabc     73 B2 13 85 
2cac0     15 89 ED 8B 
2cac4     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2cac8     B0 8A FB 8A 
2cacc     D5 8A FA 8A 
2cad0     E8 8A FB 8A 
2cad4     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2cad8     E8 8A 21 8B 
2cadc     E7 8A 33 8B 
2cae0     E8 8A 26 8C 
2cae4     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2cae8     8D B0 27 F6 
2caec     9C 08 AD 01 
2caf0     7B 02 8D 02 
2caf4     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2caf8     A1 02 A0 02 
2cafc     A1 02 A0 02 
2cb00     A0 02 A0 02 
2cb04     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2cb08     7B 02 D8 02 
2cb0c     7B 02 C6 02 
2cb10     3E 01 C3 05 
2cb14     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2cb18     00 8C 2A 86 
2cb1c     E0 8C FA 8A 
2cb20     6A 8B FB 8A 
2cb24     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2cb28     45 8B 45 8B 
2cb2c     45 8B 6B 8B 
2cb30     46 8B 59 8B 
2cb34     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2cb38     6B 8B 6B 8B 
2cb3c     6B 8B 6B 8B 
2cb40     7D 8B 7D 8B 
2cb44     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2cb48     90 8B 91 8B 
2cb4c     90 8B 90 8B 
2cb50     A3 8B A3 8B 
2cb54     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2cb58     B5 8B B6 8B 
2cb5c     B5 8B B5 8B 
2cb60     B6 8B C8 8B 
2cb64     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2cb68     C8 8B DA 8B 
2cb6c     DB 8B DB 8B 
2cb70     DB 8B DC 8B 
2cb74     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2cb78     EE 8B EE 8B 
2cb7c     00 8C 01 8C 
2cb80     00 8C 01 8C 
2cb84     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2cb88     12 8C 13 8C 
2cb8c     13 8C 26 8C 
2cb90     26 8C 26 8C 
2cb94     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2cb98     38 8C 38 8C 
2cb9c     38 8C 38 8C 
2cba0     4B 8C 4B 8C 
2cba4     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2cba8     5E 8C 5E 8C 
2cbac     5E 8C 5E 8C 
2cbb0     70 8C 70 8C 
2cbb4     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2cbb8     70 8C 83 8C 
2cbbc     83 8C 83 8C 
2cbc0     83 8C 96 8C 
2cbc4     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2cbc8     95 8C A9 8C 
2cbcc     A9 8C A8 8C 
2cbd0     A8 8C A8 8C 
2cbd4     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2cbd8     BB 8C BB 8C 
2cbdc     BB 8C CE 8C 
2cbe0     CE 8C CE 8C 
2cbe4     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2cbe8     E0 8C E1 8C 
2cbec     E1 8C E0 8C 
2cbf0     F4 8C F2 8C 
2cbf4     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2cbf8     05 8D 05 8D 
2cbfc     06 8D 06 8D 
2cc00     19 8D 19 8D 
2cc04     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2cc08     18 8D 2B 8D 
2cc0c     2B 8D 2B 8D 
2cc10     2A 8D 3E 8D 
2cc14     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2cc18     3E 8D 51 8D 
2cc1c     50 8D 50 8D 
2cc20     50 8D 51 8D 
2cc24     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2cc28     63 8D 64 8D 
2cc2c     76 8D 75 8D 
2cc30     75 8D 76 8D 
2cc34     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2cc38     88 8D 88 8D 
2cc3c     89 8D 9B 8D 
2cc40     9A 8D 9B 8D 
2cc44     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2cc48     AD 8D AE 8D 
2cc4c     AD 8D AE 8D 
2cc50     C1 8D C1 8D 
2cc54     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2cc58     D3 8D D3 8D 
2cc5c     D3 8D D3 8D 
2cc60     D3 8D E6 8D 
2cc64     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2cc68     E6 8D E6 8D 
2cc6c     F9 8D F9 8D 
2cc70     F9 8D F8 8D 
2cc74     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2cc78     0B 8E 0B 8E 
2cc7c     1D 8E 1D 8E 
2cc80     1E 8E 1E 8E 
2cc84     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2cc88     31 8E 31 8E 
2cc8c     31 8E 42 8E 
2cc90     43 8E 43 8E 
2cc94     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2cc98     56 8E 56 8E 
2cc9c     55 8E 56 8E 
2cca0     68 8E 69 8E 
2cca4     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2cca8     69 8E 7B 8E 
2ccac     7C 8E 7B 8E 
2ccb0     7B 8E 8D 8E 
2ccb4     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2ccb8     8D 8E A1 8E 
2ccbc     A0 8E A1 8E 
2ccc0     A1 8E A0 8E 
2ccc4     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2ccc8     B3 8E B3 8E 
2cccc     C6 8E C5 8E 
2ccd0     C6 8E C6 8E 
2ccd4     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2ccd8     D8 8E D9 8E 
2ccdc     D8 8E EC 8E 
2cce0     EB 8E EC 8E 
2cce4     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2cce8     FE 8E FE 8E 
2ccec     FE 8E FE 8E 
2ccf0     10 8F 10 8F 
2ccf4     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2ccf8     11 8F 23 8F 
2ccfc     24 8F 23 8F 
2cd00     24 8F 37 8F 
2cd04     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2cd08     36 8F 36 8F 
2cd0c     48 8F 49 8F 
2cd10     49 8F 49 8F 
2cd14     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2cd18     5B 8F 5C 8F 
2cd1c     5B 8F 6E 8F 
2cd20     6E 8F 6E 8F 
2cd24     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2cd28     81 8F 81 8F 
2cd2c     81 8F 81 8F 
2cd30     93 8F 93 8F 
2cd34     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2cd38     93 8F A6 8F 
2cd3c     A6 8F A6 8F 
2cd40     A6 8F B9 8F 
2cd44     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2cd48     B9 8F B9 8F 
2cd4c     CC 8F CB 8F 
2cd50     CB 8F CC 8F 
2cd54     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2cd58     DF 8F DE 8F 
2cd5c     DE 8F F1 8F 
2cd60     F1 8F F1 8F 
2cd64     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2cd68     03 90 04 90 
2cd6c     04 90 04 90 
2cd70     16 90 17 90 
2cd74     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2cd78     29 90 28 90 
2cd7c     29 90 28 90 
2cd80     29 90 3C 90 
2cd84     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2cd88     3C 90 4F 90 
2cd8c     4E 90 4E 90 
2cd90     4E 90 4E 90 
2cd94     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2cd98     61 90 61 90 
2cd9c     73 90 74 90 
2cda0     74 90 74 90 
2cda4     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2cda8     87 90 86 90 
2cdac     87 90 86 90 
2cdb0     99 90 99 90 
2cdb4     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2cdb8     AB 90 AB 90 
2cdbc     AC 90 AB 90 
2cdc0     AB 90 BF 90 
2cdc4     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2cdc8     BE 90 D1 90 
2cdcc     D0 90 D1 90 
2cdd0     D1 90 D1 90 
2cdd4     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2cdd8     E3 90 E4 90 
2cddc     F6 90 F6 90 
2cde0     F6 90 F6 90 
2cde4     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2cde8     09 91 0A 91 
2cdec     0A 91 1C 91 
2cdf0     1C 91 1C 91 
2cdf4     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2cdf8     2F 91 2E 91 
2cdfc     2F 91 2F 91 
2ce00     2E 91 41 91 
2ce04     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2ce08     41 91 53 91 
2ce0c     54 91 54 91 
2ce10     53 91 54 91 
2ce14     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2ce18     67 91 67 91 
2ce1c     79 91 7A 91 
2ce20     79 91 78 91 
2ce24     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2ce28     8C 91 8B 91 
2ce2c     8C 91 8C 91 
2ce30     9E 91 9E 91 
2ce34     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2ce38     B1 91 B1 91 
2ce3c     B2 91 B1 91 
2ce40     B1 91 C4 91 
2ce44     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2ce48     C4 91 D6 91 
2ce4c     D7 91 D7 91 
2ce50     D7 91 D6 91 
2ce54     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2ce58     EA 91 EA 91 
2ce5c     EA 91 FC 91 
2ce60     FC 91 FB 91 
2ce64     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2ce68     0E 92 0F 92 
2ce6c     0F 92 0E 92 
2ce70     21 92 21 92 
2ce74     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2ce78     21 92 34 92 
2ce7c     33 92 34 92 
2ce80     34 92 47 92 
2ce84     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2ce88     46 92 47 92 
2ce8c     59 92 59 92 
2ce90     59 92 59 92 
2ce94     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2ce98     6C 92 6C 92 
2ce9c     6B 92 7E 92 
2cea0     7E 92 7E 92 
2cea4     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2cea8     92 92 91 92 
2ceac     91 92 90 92 
2ceb0     91 92 A4 92 
2ceb4     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2ceb8     A3 92 B6 92 
2cebc     B6 92 B7 92 
2cec0     B7 92 B6 92 
2cec4     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2cec8     CA 92 C9 92 
2cecc     CA 92 DC 92 
2ced0     DC 92 DC 92 
2ced4     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2ced8     EF 92 EF 92 
2cedc     EF 92 EF 92 
2cee0     01 93 01 93 
2cee4     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2cee8     15 93 14 93 
2ceec     14 93 14 93 
2cef0     14 93 27 93 
2cef4     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2cef8     27 93 39 93 
2cefc     3A 93 39 93 
2cf00     39 93 39 93 
2cf04     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2cf08     4B 93 4C 93 
2cf0c     5F 93 5F 93 
2cf10     5F 93 5E 93 
2cf14     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2cf18     5F 93 84 93 
2cf1c     4C 93 96 93 
2cf20     5F 93 AE 94 
2cf24     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2cf28     7B C1 00 00 
2cf2c     00 00 00 00 
2cf30     00 00 00 00 
2cf34     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cf38     00 00 00 00 | 	byte	$00, $00, $00, $00
2cf3c     00 00 00 00 | zero long 0
2cf40     7A D7 00 80 
2cf44     87 8A 48 8F 
2cf48     EC 8C 76 8D 
2cf4c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2cf50     3C 8D 82 8D 
2cf54     42 8D 88 8D 
2cf58     8C 8D 8E 8D 
2cf5c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2cf60     97 8D DE 8D 
2cf64     E1 8D F1 8E 
2cf68     D8 8C A3 83 
2cf6c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2cf70     65 71 C9 65 
2cf74     FC 64 C4 65 
2cf78     C1 65 BF 65 
2cf7c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2cf80     B6 65 B4 65 
2cf84     B2 65 AE 65 
2cf88     AC 65 ED 65 
2cf8c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2cf90     5E 65 25 66 
2cf94     FA 62 23 6B 
2cf98     B5 6C 61 0A 
2cf9c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2cfa0     5D 90 BE 8D 
2cfa4     47 8E C3 8D 
2cfa8     09 8E C9 8D 
2cfac     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2cfb0     15 8E 19 8E 
2cfb4     1B 8E 62 8E 
2cfb8     64 8E 68 8E 
2cfbc     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2cfc0     B5 8E 4C 90 
2cfc4     FA 84 3C 9D 
2cfc8     98 13 79 6D 
2cfcc     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2cfd0     D9 66 50 66 
2cfd4     D4 66 4B 66 
2cfd8     8C 66 46 66 
2cfdc     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2cfe0     81 66 3A 66 
2cfe4     7C 66 36 66 
2cfe8     76 66 30 66 
2cfec     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2cff0     6B 66 88 72 
2cff4     BF 37 E7 B7 
2cff8     75 83 8B 8E 
2cffc     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2d000     94 8E 96 8E 
2d004     DD 8E 9C 8E 
2d008     E2 8E A2 8E 
2d00c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2d010     EE 8E AE 8E 
2d014     38 8F B5 8E 
2d018     3F 8F FD 8E 
2d01c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2d020     A5 87 1E E3 
2d024     6D 5D FA 71 
2d028     41 64 25 67 
2d02c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2d030     D9 66 1A 67 
2d034     18 67 15 67 
2d038     12 67 0F 67 
2d03c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2d040     07 67 C0 66 
2d044     01 67 BC 66 
2d048     B8 66 DE 64 
2d04c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2d050     43 E5 1F 8B 
2d054     14 8A F1 90 
2d058     1C 8F 63 8F 
2d05c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2d060     29 8F 6E 8F 
2d064     72 8F 75 8F 
2d068     34 8F BE 8F 
2d06c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2d070     84 8F 87 8F 
2d074     CC 8F 56 90 
2d078     67 91 49 80 
2d07c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2d080     46 77 A6 66 
2d084     E8 66 B0 67 
2d088     AD 67 ED 67 
2d08c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2d090     A2 67 E3 67 
2d094     9D 67 9A 67 
2d098     98 67 94 67 
2d09c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2d0a0     49 67 CD 67 
2d0a4     28 65 5F 6E 
2d0a8     82 67 3A 01 
2d0ac     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2d0b0     C2 91 A9 8F 
2d0b4     EF 8F AE 8F 
2d0b8     F4 8F B5 8F 
2d0bc     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2d0c0     01 90 03 90 
2d0c4     07 90 09 90 
2d0c8     0C 90 53 90 
2d0cc     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2d0d0     18 90 44 93 
2d0d4     85 84 D6 9D 
2d0d8     87 1F 2F 75 
2d0dc     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2d0e0     C4 68 F6 67 
2d0e4     BE 68 F1 67 
2d0e8     76 68 2E 68 
2d0ec     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2d0f0     27 68 24 68 
2d0f4     64 68 1E 68 
2d0f8     5F 68 19 68 
2d0fc     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2d100     DC 68 56 72 
2d104     7E 36 C2 B8 
2d108     D7 84 73 90 
2d10c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2d110     7B 90 7F 90 
2d114     82 90 84 90 
2d118     CB 90 8B 90 
2d11c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2d120     D7 90 96 90 
2d124     20 91 59 90 
2d128     25 91 A2 90 
2d12c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2d130     D0 89 40 EE 
2d134     12 64 C4 71 
2d138     29 66 0C 69 
2d13c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2d140     C0 68 02 69 
2d144     FE 68 FB 68 
2d148     F9 68 F6 68 
2d14c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2d150     EE 68 A8 68 
2d154     2C 69 5F 68 
2d158     E2 68 81 66 
2d15c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2d160     1E EB A6 8A 
2d164     73 8B 5E 93 
2d168     7B 90 48 91 
2d16c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2d170     0D 91 11 91 
2d174     14 91 16 91 
2d178     5C 91 1C 91 
2d17c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2d180     68 91 AF 91 
2d184     2A 91 B5 91 
2d188     75 91 1A 94 
2d18c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2d190     70 0E CB 6C 
2d194     5D 6E C4 67 
2d198     99 69 54 69 
2d19c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2d1a0     D2 69 49 69 
2d1a4     89 69 86 69 
2d1a8     40 69 C4 69 
2d1ac     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2d1b0     35 69 76 69 
2d1b4     58 67 EB 6D 
2d1b8     E9 6D 89 0F 
2d1bc     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2d1c0     33 94 94 91 
2d1c4     D9 91 56 91 
2d1c8     E0 91 9F 91 
2d1cc     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2d1d0     EC 91 EE 91 
2d1d4     F1 91 F4 91 
2d1d8     F7 91 3D 92 
2d1dc     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2d1e0     46 92 21 94 
2d1e4     11 89 A4 9D 
2d1e8     FD 0E 8F 6C 
2d1ec     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2d1f0     28 6A E1 69 
2d1f4     65 6A 1F 6A 
2d1f8     5F 6A 1A 6A 
2d1fc     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2d200     54 6A 0F 6A 
2d204     4F 6A 09 6A 
2d208     06 6A 03 6A 
2d20c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2d210     23 68 69 77 
2d214     3A 4D 38 CA 
2d218     38 86 4E 91 
2d21c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2d220     64 92 24 92 
2d224     6A 92 2A 92 
2d228     70 92 30 92 
2d22c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2d230     7B 92 7E 92 
2d234     C5 92 84 92 
2d238     CB 92 8A 92 
2d23c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2d240     4D 8D F9 E2 
2d244     97 59 FE 74 
2d248     DB 68 6D 6A 
2d24c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2d250     A8 6A A5 6A 
2d254     A3 6A 9F 6A 
2d258     9D 6A 9B 6A 
2d25c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2d260     D6 6A 8F 6A 
2d264     CF 6A 46 6A 
2d268     CA 6A E1 67 
2d26c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2d270     D3 F7 15 92 
2d274     90 8C BF 94 
2d278     A6 92 EB 92 
2d27c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2d280     B1 92 F7 92 
2d284     FA 92 FD 92 
2d288     00 93 02 93 
2d28c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2d290     4F 93 52 93 
2d294     54 93 22 94 
2d298     5A 93 8F 88 
2d29c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2d2a0     1C 77 07 6C 
2d2a4     E8 69 7A 6B 
2d2a8     34 6B 75 6B 
2d2ac     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2d2b0     29 6B 26 6B 
2d2b4     24 6B 21 6B 
2d2b8     1D 6B 5E 6B 
2d2bc     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2d2c0     12 6B 52 6B 
2d2c4     34 69 34 6E 
2d2c8     BA 73 A4 24 
2d2cc     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2d2d0     7A 94 B3 93 
2d2d4     72 93 31 93 
2d2d8     78 93 7A 93 
2d2dc     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2d2e0     83 93 86 93 
2d2e4     89 93 D0 93 
2d2e8     D2 93 D5 93 
2d2ec     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2d2f0     DD 93 40 96 
2d2f4     30 8B 99 9C 
2d2f8     52 10 94 71 
2d2fc     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2d300     46 6C 79 6B 
2d304     40 6C B7 6B 
2d308     F7 6B B1 6B 
2d30c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2d310     EC 6B A5 6B 
2d314     A2 6B 9F 6B 
2d318     9D 6B 9A 6B 
2d31c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2d320     C8 6A E4 76 
2d324     20 4B F9 CE 
2d328     2E 8A 1A 92 
2d32c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2d330     FB 93 BA 93 
2d334     01 94 03 94 
2d338     4A 94 09 94 
2d33c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2d340     55 94 14 94 
2d344     9E 94 1A 94 
2d348     61 94 20 94 
2d34c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2d350     3E 87 E5 CD 
2d354     5F 50 6C 78 
2d358     B5 6A 04 6C 
2d35c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2d360     83 6C 7F 6C 
2d364     7C 6C 36 6C 
2d368     76 6C 74 6C 
2d36c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2d370     6B 6C 25 6C 
2d374     66 6C 1F 6C 
2d378     1D 6C 41 6A 
2d37c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2d380     BA FA FC 94 
2d384     5B 8D 97 96 
2d388     3B 94 C5 94 
2d38c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2d390     89 94 8C 94 
2d394     8F 94 92 94 
2d398     94 94 DB 94 
2d39c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2d3a0     E4 94 E7 94 
2d3a4     2D 95 74 95 
2d3a8     C8 96 15 89 
2d3ac     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2d3b0     CB 75 31 6F 
2d3b4     7E 6B 10 6D 
2d3b8     C9 6C 0A 6D 
2d3bc     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2d3c0     BD 6C FF 6C 
2d3c4     FB 6C F9 6C 
2d3c8     B2 6C F3 6C 
2d3cc     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2d3d0     A7 6C E8 6C 
2d3d4     0D 6B 85 6F 
2d3d8     C7 74 10 28 
2d3dc     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2d3e0     96 96 47 95 
2d3e4     06 95 0A 95 
2d3e8     0C 95 0F 95 
2d3ec     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2d3f0     17 95 5E 95 
2d3f4     61 95 63 95 
2d3f8     22 95 AC 95 
2d3fc     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2d400     72 95 17 98 
2d404     59 8E 01 96 
2d408     CF FC 5A 68 
2d40c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2d410     96 6D 50 6D 
2d414     D5 6D 4A 6D 
2d418     8C 6D 89 6D 
2d41c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2d420     80 6D 3A 6D 
2d424     7A 6D 77 6D 
2d428     75 6D 71 6D 
2d42c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2d430     18 6C BC 78 
2d434     9A 4F 7E CF 
2d438     1F 89 F1 93 
2d43c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2d440     D2 95 4E 95 
2d444     D7 95 53 95 
2d448     DD 95 E0 95 
2d44c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2d450     A5 95 EB 95 
2d454     EE 95 F0 95 
2d458     37 96 B3 95 
2d45c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2d460     1A 98 D5 8D 
2d464     C5 9F CD 0F 
2d468     0F 71 F3 73 
2d46c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2d470     D9 6D 5E 6E 
2d474     D3 6D 58 6E 
2d478     12 6E 0F 6E 
2d47c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2d480     49 6E BF 6D 
2d484     87 6E 76 6D 
2d488     81 6E 11 6B 
2d48c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2d490     3F 09 44 95 
2d494     E5 8D 3F 99 
2d498     D4 95 A2 96 
2d49c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2d4a0     23 96 69 96 
2d4a4     6B 96 6E 96 
2d4a8     71 96 74 96 
2d4ac     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2d4b0     BF 96 3C 96 
2d4b4     C6 96 C8 96 
2d4b8     A3 98 51 8D 
2d4bc     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2d4c0     CF 75 29 73 
2d4c4     90 6C EC 6E 
2d4c8     62 6E E7 6E 
2d4cc     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2d4d0     9A 6E 98 6E 
2d4d4     95 6E 91 6E 
2d4d8     8E 6E CF 6E 
2d4dc     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2d4e0     40 6E C3 6E 
2d4e4     E8 6C 45 6F 
2d4e8     A5 7B C9 35 
2d4ec     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2d4f0     2D 98 23 97 
2d4f4     E1 96 A0 96 
2d4f8     A4 96 EA 96 
2d4fc     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2d500     AF 96 F4 96 
2d504     F8 96 3E 97 
2d508     FD 96 43 97 
2d50c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2d510     08 97 6B 99 
2d514     D6 92 88 91 
2d518     D8 EE 84 66 
2d51c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2d520     2E 6F E7 6E 
2d524     6C 6F 24 6F 
2d528     21 6F 1F 6F 
2d52c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2d530     17 6F 13 6F 
2d534     54 6F 0E 6F 
2d538     0B 6F 4B 6F 
2d53c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2d540     27 6D 1C 7B 
2d544     19 59 9F DB 
2d548     66 8E BC 94 
2d54c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2d550     67 97 26 97 
2d554     6D 97 2B 97 
2d558     72 97 32 97 
2d55c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2d560     C1 97 7F 97 
2d564     C6 97 85 97 
2d568     CB 97 CE 97 
2d56c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2d570     EC 8A C4 C6 
2d574     68 4C F4 7D 
2d578     63 6E E8 6E 
2d57c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2d580     ED 6F A7 6F 
2d584     E7 6F A0 6F 
2d588     E1 6F 9B 6F 
2d58c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2d590     D5 6F 8F 6F 
2d594     CE 6F 45 6F 
2d598     86 6F 68 6D 
2d59c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2d5a0     C0 13 AD A2 
2d5a4     A7 8E 79 99 
2d5a8     E6 97 E8 97 
2d5ac     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2d5b0     F1 97 F3 97 
2d5b4     F6 97 F9 97 
2d5b8     FB 97 FE 97 
2d5bc     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2d5c0     4A 98 0A 98 
2d5c4     93 98 0F 98 
2d5c8     7F 9B BF 8C 
2d5cc     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2d5d0     91 7B 62 73 
2d5d4     1A 6E B9 70 
2d5d8     EB 6F B3 70 
2d5dc     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2d5e0     25 70 20 70 
2d5e4     1E 70 1B 70 
2d5e8     18 70 15 70 
2d5ec     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2d5f0     0D 70 09 70 
2d5f4     07 70 03 70 
2d5f8     01 70 FD 6F 
2d5fc     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2d600     F6 6F F2 6F 
2d604     EF 6F EC 6F 
2d608     2C 70 E6 6F 
2d60c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2d610     DD 6F 97 6F 
2d614     D7 6F 84 6E 
2d618     8F 6F 3F 7D 
2d61c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2d61e     00 00 00 00 | zero1 long 0
2d622     FF FF FF FF 
2d626     FF FF       | atarist_spl file "atarist.spl" '512
2d628     00 00 00 00 
2d62c     00 00 00 00 
2d630     00 00       | 	byte	$00[10]
2d632     17 7F F2 7F 
2d636     B2 7F 72 7F 
2d63a     33 7F F4 7E 
2d63e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2d642     36 7E F5 7D 
2d646     E9 51 F2 0D 
2d64a     8E 00 F3 FD 
2d64e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2d652     57 FD 58 FD 
2d656     5B FD 5C FD 
2d65a     5C FD 60 7D 
2d65e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2d662     D6 7C 98 7C 
2d666     59 7C 1A 7C 
2d66a     DC 7B 9E 7B 
2d66e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2d672     F3 05 00 FD 
2d676     41 FB EA FA 
2d67a     D9 FA DB FA 
2d67e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2d682     E4 FA 9B 36 
2d686     F8 7A C0 7A 
2d68a     84 7A 45 7A 
2d68e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2d692     8E 79 51 79 
2d696     15 79 D7 78 
2d69a     3C 1F EB FF 
2d69e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2d6a2     6D F8 65 F8 
2d6a6     68 F8 6D F8 
2d6aa     70 F8 74 F8 
2d6ae     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2d6b2     AB 60 79 60 
2d6b6     4B 60 1A 60 
2d6ba     E9 5F B9 5F 
2d6be     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2d6c2     FB 59 B2 0B 
2d6c6     92 FA 3A F7 
2d6ca     96 F6 79 F6 
2d6ce     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2d6d2     82 F6 86 F6 
2d6d6     8C F6 DB 5D 
2d6da     F1 5E C1 5E 
2d6de     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2d6e2     34 5E 04 5E 
2d6e6     D6 5D A6 5D 
2d6ea     78 5D D4 3E 
2d6ee     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2d6f2     27 F5 BA F4 
2d6f6     AB F4 AD F4 
2d6fa     B2 F4 B8 F4 
2d6fe     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2d702     26 5D 2B 5D 
2d706     FC 5C CD 5C 
2d70a     9F 5C 70 5C 
2d70e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2d712     E5 5B B8 5B 
2d716     DB 24 A7 FC 
2d71a     D1 F4 4D F3 
2d71e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2d722     04 F3 0B F3 
2d726     11 F3 16 F3 
2d72a     DE 18 98 5B 
2d72e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2d732     4E 4A 29 48 
2d736     A0 47 6A 47 
2d73a     43 47 20 47 
2d73e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2d742     E2 F6 98 F2 
2d746     C5 F1 A3 F1 
2d74a     A3 F1 A8 F1 
2d74e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2d752     BF F1 00 3D 
2d756     EF 46 CD 46 
2d75a     AA 46 86 46 
2d75e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2d762     1C 46 F9 45 
2d766     D7 45 EE 43 
2d76a     DE 02 E8 F3 
2d76e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2d772     61 F0 65 F0 
2d776     6D F0 74 F0 
2d77a     7C F0 84 F0 
2d77e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2d782     8E 45 6D 45 
2d786     49 45 27 45 
2d78a     05 45 E1 44 
2d78e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2d792     F1 2F A9 FB 
2d796     8B F1 9B EF 
2d79a     40 EF 36 EF 
2d79e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2d7a2     4D EF 56 EF 
2d7a6     5E EF 7B 44 
2d7aa     8C 44 69 44 
2d7ae     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2d7b2     03 44 E1 43 
2d7b6     C0 43 F5 37 
2d7ba     69 33 0F 11 
2d7be     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2d7c2     66 EE 37 EE 
2d7c6     38 EE 40 EE 
2d7ca     48 EE 51 EE 
2d7ce     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2d7d2     7D 32 6A 32 
2d7d6     51 32 37 32 
2d7da     1F 32 05 32 
2d7de     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2d7e2     B9 31 A1 31 
2d7e6     F1 04 F4 F1 
2d7ea     50 EE A0 ED 
2d7ee     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2d7f2     93 ED 9A ED 
2d7f6     A4 ED AD ED 
2d7fa     F4 27 C1 31 
2d7fe     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2d802     78 31 5F 31 
2d806     46 31 2E 31 
2d80a     15 31 FC 30 
2d80e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2d812     C4 EF 4A ED 
2d816     DC EC CB EC 
2d81a     D2 EC DA EC 
2d81e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2d822     F9 EC 64 2F 
2d826     0A 31 F1 30 
2d82a     D9 30 C0 30 
2d82e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2d832     78 30 5F 30 
2d836     46 30 38 23 
2d83a     A6 F6 19 EE 
2d83e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2d842     20 EC 28 EC 
2d846     32 EC 3C EC 
2d84a     47 EC 51 EC 
2d84e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2d852     A3 22 93 22 
2d856     7F 22 6E 22 
2d85a     5D 22 4C 22 
2d85e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2d862     77 09 76 F1 
2d866     CC EC F0 EB 
2d86a     CD EB CE EB 
2d86e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2d872     ED EB F5 EB 
2d876     3E F6 6B 22 
2d87a     5F 22 4E 22 
2d87e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2d882     1B 22 0B 22 
2d886     FA 21 E9 21 
2d88a     D8 21 4D FF 
2d88e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2d892     92 EB 7B EB 
2d896     82 EB 8C EB 
2d89a     97 EB A1 EB 
2d89e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2d8a2     15 22 04 22 
2d8a6     F3 21 E3 21 
2d8aa     D2 21 C0 21 
2d8ae     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2d8b2     8E 21 7D 21 
2d8b6     9A F8 A4 ED 
2d8ba     8E EB 2F EB 
2d8be     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2d8c2     37 EB 42 EB 
2d8c6     4C EB 57 EB 
2d8ca     B2 17 22 19 
2d8ce     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2d8d2     FD 18 EF 18 
2d8d6     E3 18 D6 18 
2d8da     CA 18 BD 18 
2d8de     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2d8e2     60 EC 35 EB 
2d8e6     01 EB 01 EB 
2d8ea     0C EB 16 EB 
2d8ee     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2d8f2     34 EB D0 18 
2d8f6     00 19 F4 18 
2d8fa     E8 18 DA 18 
2d8fe     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2d902     B6 18 A9 18 
2d906     9D 18 91 05 
2d90a     F0 EF CA EB 
2d90e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2d912     E8 EA F2 EA 
2d916     FE EA 07 EB 
2d91a     12 EB C2 EF 
2d91e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2d922     D9 18 CD 18 
2d926     C0 18 B3 18 
2d92a     A7 18 9B 18 
2d92e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2d932     B8 FC 30 EE 
2d936     61 EB DC EA 
2d93a     CD EA D2 EA 
2d93e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2d942     F3 EA FE EA 
2d946     D2 09 D1 18 
2d94a     C3 18 17 18 
2d94e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2d952     66 11 52 11 
2d956     49 11 41 11 
2d95a     38 11 E0 F4 
2d95e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2d962     C9 EA C5 EA 
2d966     CF EA DB EA 
2d96a     E6 EA EF EA 
2d96e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2d972     89 11 80 11 
2d976     78 11 6E 11 
2d97a     67 11 5D 11 
2d97e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2d982     43 11 32 0D 
2d986     9C F1 07 EC 
2d98a     F8 EA CD EA 
2d98e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2d992     E4 EA ED EA 
2d996     F8 EA 02 EB 
2d99a     55 11 91 11 
2d99e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2d9a2     75 11 6E 11 
2d9a6     64 11 5E 11 
2d9aa     54 11 4A 11 
2d9ae     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2d9b2     A8 EB F1 EA 
2d9b6     D9 EA DC EA 
2d9ba     E8 EA F1 EA 
2d9be     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2d9c2     A6 EB 9E 11 
2d9c6     A0 11 96 11 
2d9ca     8D 11 85 11 
2d9ce     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2d9d2     6A 11 CA 0D 
2d9d6     36 0B 57 F8 
2d9da     6C ED 57 EB 
2d9de     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2d9e2     F4 EA FF EA 
2d9e6     09 EB 15 EB 
2d9ea     1E EB 1A FD 
2d9ee     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2d9f2     ED 0A E8 0A 
2d9f6     E2 0A DC 0A 
2d9fa     D6 0A D1 0A 
2d9fe     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2da02     F8 F3 BC EC 
2da06     57 EB 1E EB 
2da0a     18 EB 24 EB 
2da0e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2da12     42 EB 4D EB 
2da16     08 09 20 0B 
2da1a     1A 0B 14 0B 
2da1e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2da22     04 0B FE 0A 
2da26     F9 0A F2 0A 
2da2a     84 08 3A F1 
2da2e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2da32     42 EB 42 EB 
2da36     4E EB 57 EB 
2da3a     62 EB 6B EB 
2da3e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2da42     48 0B 43 0B 
2da46     3C 0B 36 0B 
2da4a     31 0B 2C 0B 
2da4e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2da52     1B 0B 5C 00 
2da56     6A EF 1B EC 
2da5a     81 EB 6A EB 
2da5e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2da62     85 EB 8E EB 
2da66     99 EB A3 EB 
2da6a     DD 05 E5 05 
2da6e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2da72     DB 05 D8 05 
2da76     D5 05 D1 05 
2da7a     D0 05 CB 05 
2da7e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2da82     0C EC BB EB 
2da86     B3 EB BB EB 
2da8a     C5 EB D0 EB 
2da8e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2da92     E4 F7 2C 06 
2da96     28 06 24 06 
2da9a     22 06 1F 06 
2da9e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2daa2     16 06 14 06 
2daa6     0F 06 D0 F3 
2daaa     65 ED 2D EC 
2daae     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2dab2     01 EC 0A EC 
2dab6     14 EC 1E EC 
2daba     29 EC FB 03 
2dabe     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2dac2     63 06 60 06 
2dac6     5E 06 59 06 
2daca     58 06 54 06 
2dace     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2dad2     69 F1 21 ED 
2dad6     55 EC 33 EC 
2dada     36 EC 40 EC 
2dade     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2dae2     5C EC 68 EC 
2dae6     92 02 D9 02 
2daea     D7 02 D7 02 
2daee     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2daf2     D1 02 D1 02 
2daf6     CE 02 CD 02 
2dafa     5D FC 80 EF 
2dafe     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2db02     83 EC 8A EC 
2db06     93 EC 9C EC 
2db0a     A5 EC B1 EC 
2db0e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2db12     2B 03 2A 03 
2db16     29 03 26 03 
2db1a     25 03 24 03 
2db1e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2db22     1F 03 70 F7 
2db26     D0 EE 27 ED 
2db2a     DB EC D4 EC 
2db2e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2db32     F0 EC FA EC 
2db36     02 ED F9 F4 
2db3a     7B 03 7C 03 
2db3e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2db42     75 03 73 03 
2db46     72 03 70 03 
2db4a     6D 03 6C 03 
2db4e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2db52     54 ED 22 ED 
2db56     22 ED 2C ED 
2db5a     35 ED 3F ED 
2db5e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2db62     14 01 C3 03 
2db66     C1 03 C0 03 
2db6a     5F 01 A5 00 
2db6e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2db72     7B 00 7C 00 
2db76     20 00 85 F1 
2db7a     2A EE 89 ED 
2db7e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2db82     80 ED 87 ED 
2db86     90 ED 9A ED 
2db8a     A3 ED 73 00 
2db8e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2db92     D0 00 D0 00 
2db96     D0 00 D0 00 
2db9a     D0 00 CF 00 
2db9e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2dba2     80 F0 3D EE 
2dba6     D5 ED C7 ED 
2dbaa     CD ED D6 ED 
2dbae     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2dbb2     F2 ED FA ED 
2dbb6     1D 01 29 01 
2dbba     27 01 27 01 
2dbbe     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2dbc2     25 01 26 01 
2dbc6     26 01 23 01 
2dbca     D0 F7 EC EF 
2dbce     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2dbd2     1C EE 24 EE 
2dbd6     2D EE 37 EE 
2dbda     40 EE 47 EE 
2dbde     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2dbe2     7D 01 7B 01 
2dbe6     7A 01 7A 01 
2dbea     79 01 78 01 
2dbee     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2dbf2     84 FE DE F3 
2dbf6     6C EF 93 EE 
2dbfa     72 EE 72 EE 
2dbfe     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2dc02     8B EE 95 EE 
2dc06     9E EE 15 FC 
2dc0a     67 FE 67 FE 
2dc0e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2dc12     6B FE 6B FE 
2dc16     6D FE 6D FE 
2dc1a     6D FE 6F FE 
2dc1e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2dc22     DF EE CC EE 
2dc26     CF EE D9 EE 
2dc2a     E1 EE EA EE 
2dc2e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2dc32     5A FE C4 FE 
2dc36     C3 FE C5 FE 
2dc3a     C6 FE C6 FE 
2dc3e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2dc42     C8 FE C7 FE 
2dc46     DA FB 85 F1 
2dc4a     8D EF 31 EF 
2dc4e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2dc52     34 EF 3E EF 
2dc56     46 EF 4F EF 
2dc5a     57 EF 0D FF 
2dc5e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2dc62     1F FF 1F FF 
2dc66     21 FF 21 FF 
2dc6a     21 FF 21 FF 
2dc6e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2dc72     15 F1 BE EF 
2dc76     84 EF 7E EF 
2dc7a     88 EF 8F EF 
2dc7e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2dc82     A9 EF 06 F2 
2dc86     A6 FC AB FC 
2dc8a     AD FC AE FC 
2dc8e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2dc92     B2 FC B4 FC 
2dc96     B6 FC B7 FC 
2dc9a     8B F4 BD F0 
2dc9e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2dca2     E4 EF EE EF 
2dca6     F6 EF FD EF 
2dcaa     04 F0 0E F0 
2dcae     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2dcb2     0B FD 0D FD 
2dcb6     0F FD 11 FD 
2dcba     11 FD 13 FD 
2dcbe     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2dcc2     17 FD 64 F3 
2dcc6     CD F0 52 F0 
2dcca     41 F0 45 F0 
2dcce     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2dcd2     5B F0 64 F0 
2dcd6     6D F0 FB FC 
2dcda     65 FD 68 FD 
2dcde     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2dce2     6C FD 6D FD 
2dce6     6F FD 70 FD 
2dcea     72 FD B3 FB 
2dcee     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2dcf2     A4 F0 99 F0 
2dcf6     A0 F0 A8 F0 
2dcfa     AE F0 B9 F0 
2dcfe     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2dd02     CB FB DD FB 
2dd06     DE FB E0 FB 
2dd0a     E3 FB E3 FB 
2dd0e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2dd12     E9 FB EC FB 
2dd16     62 F7 27 F2 
2dd1a     2A F1 FF F0 
2dd1e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2dd22     0C F1 13 F1 
2dd26     1B F1 23 F1 
2dd2a     33 F2 3C FC 
2dd2e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2dd32     42 FC 45 FC 
2dd36     47 FC 48 FC 
2dd3a     4A FC 4C FC 
2dd3e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2dd42     20 F2 77 F1 
2dd46     5C F1 5F F1 
2dd4a     64 F1 6C F1 
2dd4e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2dd52     83 F1 DC F8 
2dd56     9A FC 9A FC 
2dd5a     9B FC 9E FC 
2dd5e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2dd62     A3 FC A4 FC 
2dd66     A6 FC A9 FC 
2dd6a     90 F4 33 F2 
2dd6e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2dd72     BA F1 BF F1 
2dd76     C7 F1 CE F1 
2dd7a     D6 F1 DC F1 
2dd7e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2dd82     F3 FC F5 FC 
2dd86     FE FB 79 FB 
2dd8a     62 FB 5F FB 
2dd8e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2dd92     6F FA AF F3 
2dd96     53 F2 12 F2 
2dd9a     0F F2 15 F2 
2dd9e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2dda2     2A F2 32 F2 
2dda6     38 F2 9A FB 
2ddaa     AF FB B1 FB 
2ddae     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2ddb2     B7 FB B8 FB 
2ddb6     BA FB BC FB 
2ddba     C1 FB 3B F8 
2ddbe     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2ddc2     6E F2 6C F2 
2ddc6     74 F2 7A F2 
2ddca     81 F2 87 F2 
2ddce     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2ddd2     06 FC 09 FC 
2ddd6     0C FC 0E FC 
2ddda     0F FC 12 FC 
2ddde     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2dde2     17 FC 1A FC 
2dde6     B2 F6 7B F3 
2ddea     DD F2 C5 F2 
2ddee     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2ddf2     D4 F2 DB F2 
2ddf6     E0 F2 E8 F2 
2ddfa     28 F8 60 FC 
2ddfe     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2de02     64 FC 66 FC 
2de06     68 FC 6A FC 
2de0a     6D FC 52 FC 
2de0e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2de12     78 F3 24 F3 
2de16     1A F3 1E F3 
2de1a     24 F3 2A F3 
2de1e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2de22     3D F3 80 FA 
2de26     0C FB 0F FB 
2de2a     10 FB 14 FB 
2de2e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2de32     1B FB 1D FB 
2de36     1F FB 92 FA 
2de3a     DE F4 AE F3 
2de3e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2de42     79 F3 7E F3 
2de46     84 F3 8C F3 
2de4a     92 F3 97 F3 
2de4e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2de52     67 FB 69 FB 
2de56     6B FB 6F FB 
2de5a     71 FB 72 FB 
2de5e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2de62     E3 F8 BA F4 
2de66     EE F3 CC F3 
2de6a     CA F3 CF F3 
2de6e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2de72     E2 F3 E8 F3 
2de76     ED F3 B7 FB 
2de7a     BC FB BE FB 
2de7e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2de82     C4 FB C6 FB 
2de86     C8 FB C9 FB 
2de8a     CC FB 8F F7 
2de8e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2de92     1E F4 1E F4 
2de96     24 F4 2A F4 
2de9a     30 F4 38 F4 
2de9e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2dea2     AD FA B1 FA 
2dea6     B4 FA B6 FA 
2deaa     BA FA BB FA 
2deae     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2deb2     C2 FA C6 FA 
2deb6     55 F6 C6 F4 
2deba     7D F4 72 F4 
2debe     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2dec2     83 F4 89 F4 
2dec6     8F F4 94 F4 
2deca     66 FA 03 FB 
2dece     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2ded2     0A FB 0E FB 
2ded6     10 FB 11 FB 
2deda     16 FB 18 FB 
2dede     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2dee2     F9 F4 CA F4 
2dee6     C5 F4 CB F4 
2deea     D1 F4 D7 F4 
2deee     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2def2     E8 F4 3F FB 
2def6     56 FB 58 FB 
2defa     5A FB 5E FB 
2defe     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2df02     64 FB 64 FB 
2df06     69 FB 99 F9 
2df0a     E9 F5 33 F5 
2df0e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2df12     1D F5 22 F5 
2df16     27 F5 2E F5 
2df1a     32 F5 37 F5 
2df1e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2df22     BC FA BC FA 
2df26     C1 FA C2 FA 
2df2a     C4 FA C8 FA 
2df2e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2df32     F9 F7 DB F5 
2df36     78 F5 69 F5 
2df3a     6A F5 70 F5 
2df3e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2df42     7F F5 85 F5 
2df46     6E F7 06 FB 
2df4a     0A FB 0B FB 
2df4e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2df52     14 FB 15 FB 
2df56     18 FB 1B FB 
2df5a     1D FB 70 F7 
2df5e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2df62     B6 F5 BB F5 
2df66     C0 F5 C6 F5 
2df6a     CA F5 CF F5 
2df6e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2df72     54 FB 56 FB 
2df76     5A FB 5B FB 
2df7a     5E FB 5F FB 
2df7e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2df82     67 FB 52 FB 
2df86     29 F7 33 F6 
2df8a     06 F6 02 F6 
2df8e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2df92     10 F6 16 F6 
2df96     1A F6 1F F6 
2df9a     81 FB 9F FB 
2df9e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2dfa2     51 FB F2 FA 
2dfa6     E3 FA E3 FA 
2dfaa     E5 FA E9 FA 
2dfae     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2dfb2     64 F6 4D F6 
2dfb6     4D F6 53 F6 
2dfba     57 F6 5C F6 
2dfbe     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2dfc2     6A F6 19 FB 
2dfc6     1E FB 22 FB 
2dfca     23 FB 24 FB 
2dfce     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2dfd2     2C FB 2E FB 
2dfd6     32 FB F0 F8 
2dfda     01 F7 A5 F6 
2dfde     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2dfe2     9F F6 A3 F6 
2dfe6     A6 F6 AC F6 
2dfea     B0 F6 EB F7 
2dfee     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2dff2     68 FB 6C FB 
2dff6     6E FB 71 FB 
2dffa     72 FB 74 FB 
2dffe     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2e002     71 F8 21 F7 
2e006     E5 F6 DD F6 
2e00a     E1 F6 E6 F6 
2e00e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2e012     F5 F6 F7 F6 
2e016     F7 FA AB FB 
2e01a     AD FB AF FB 
2e01e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2e022     B6 FB B9 FB 
2e026     BB FB BC FB 
2e02a     21 FB 07 F8 
2e02e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2e032     22 F7 26 F7 
2e036     2B F7 2E F7 
2e03a     34 F7 38 F7 
2e03e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2e042     13 FB 16 FB 
2e046     17 FB 1B FB 
2e04a     1E FB 20 FB 
2e04e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2e052     26 FB 77 FA 
2e056     F3 F7 7C F7 
2e05a     67 F7 6A F7 
2e05e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2e062     74 F7 7A F7 
2e066     7E F7 82 F7 
2e06a     53 FB 5A FB 
2e06e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2e072     5F FB 63 FB 
2e076     65 FB 67 FB 
2e07a     69 FB 6A FB 
2e07e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2e082     B5 F7 A9 F7 
2e086     AD F7 B0 F7 
2e08a     B5 F7 B8 F7 
2e08e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2e092     6E F8 99 FB 
2e096     9C FB 9D FB 
2e09a     9F FB A4 FB 
2e09e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2e0a2     A9 FB AB FB 
2e0a6     AD FB 46 F9 
2e0aa     26 F8 F0 F7 
2e0ae     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2e0b2     F4 F7 F8 F7 
2e0b6     FB F7 FF F7 
2e0ba     03 F8 65 FA 
2e0be     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2e0c2     2B FB 2F FB 
2e0c6     30 FB 32 FB 
2e0ca     34 FB 38 FB 
2e0ce     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2e0d2     E9 F8 4A F8 
2e0d6     2E F8 2C F8 
2e0da     2F F8 36 F8 
2e0de     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2e0e2     41 F8 44 F8 
2e0e6     4A FB 67 FB 
2e0ea     68 FB 6B FB 
2e0ee     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2e0f2     73 FB 74 FB 
2e0f6     78 FB 7A FB 
2e0fa     14 FB E7 F8 
2e0fe     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2e102     6D F8 70 F8 
2e106     73 F8 78 F8 
2e10a     7C F8 80 F8 
2e10e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2e112     A6 FB A7 FB 
2e116     A9 FB AC FB 
2e11a     AF FB B1 FB 
2e11e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2e122     B7 FB 73 FA 
2e126     F8 F8 B4 F8 
2e12a     A9 F8 AB F8 
2e12e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2e132     B4 F8 B8 F8 
2e136     BB F8 FA F8 
2e13a     64 FB 65 FB 
2e13e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2e142     6D FB 6F FB 
2e146     70 FB 74 FB 
2e14a     77 FB 77 FB 
2e14e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2e152     E9 F8 E4 F8 
2e156     E8 F8 EB F8 
2e15a     EE F8 F2 F8 
2e15e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2e162     B5 FA 9F FB 
2e166     A1 FB A4 FB 
2e16a     A5 FB A9 FB 
2e16e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2e172     AE FB B1 FB 
2e176     B2 FB C7 F9 
2e17a     39 F9 22 F9 
2e17e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2e182     26 F9 2A F9 
2e186     2E F9 32 F9 
2e18a     33 F9 BA FB 
2e18e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2e192     DE FB E1 FB 
2e196     E2 FB E4 FB 
2e19a     E5 FB E7 FB 
2e19e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2e1a2     C5 F9 67 F9 
2e1a6     57 F9 56 F9 
2e1aa     5B F9 5F F9 
2e1ae     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2e1b2     68 F9 6C F9 
2e1b6     0B FC 11 FC 
2e1ba     14 FC 15 FC 
2e1be     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2e1c2     B5 FB B5 FB 
2e1c6     B6 FB B8 FB 
2e1ca     E9 FA C8 F9 
2e1ce     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2e1d2     90 F9 94 F9 
2e1d6     95 F9 99 F9 
2e1da     9D F9 9F F9 
2e1de     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2e1e2     DE FB DF FB 
2e1e6     E2 FB E4 FB 
2e1ea     E6 FB E8 FB 
2e1ee     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2e1f2     EF FB AC FA 
2e1f6     E9 F9 C7 F9 
2e1fa     C3 F9 C8 F9 
2e1fe     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2e202     D0 F9 D4 F9 
2e206     D6 F9 0E FB 
2e20a     11 FC 13 FC 
2e20e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2e212     19 FC 1B FC 
2e216     1D FC 1E FC 
2e21a     21 FC 22 FC 
2e21e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2e222     F7 F9 F7 F9 
2e226     FB F9 FE F9 
2e22a     00 FA 03 FA 
2e22e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2e232     1B FC 45 FC 
2e236     46 FC 48 FC 
2e23a     4A FC 4B FC 
2e23e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2e242     52 FC 54 FC 
2e246     F3 FB 82 FA 
2e24a     35 FA 28 FA 
2e24e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2e252     31 FA 32 FA 
2e256     37 FA 37 FA 
2e25a     3C FA 00 FC 
2e25e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2e262     09 FC 0B FC 
2e266     0F FC 12 FC 
2e26a     12 FC 15 FC 
2e26e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2e272     8D FA 60 FA 
2e276     5B FA 5C FA 
2e27a     60 FA 61 FA 
2e27e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2e282     6C FA 6D FA 
2e286     37 FC 3A FC 
2e28a     3B FC 3D FC 
2e28e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2e292     43 FC 44 FC 
2e296     45 FC 47 FC 
2e29a     51 FB AB FA 
2e29e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2e2a2     8E FA 91 FA 
2e2a6     93 FA 95 FA 
2e2aa     98 FA 9B FA 
2e2ae     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2e2b2     68 FC 6A FC 
2e2b6     6C FC 6E FC 
2e2ba     70 FC 72 FC 
2e2be     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2e2c2     76 FC 3B FB 
2e2c6     D0 FA BB FA 
2e2ca     B9 FA BD FA 
2e2ce     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2e2d2     C4 FA C6 FA 
2e2d6     CA FA 13 FC 
2e2da     3A FC 3A FC 
2e2de     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2e2e2     41 FC 43 FC 
2e2e6     44 FC 47 FC 
2e2ea     48 FC 3C FC 
2e2ee     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2e2f2     E6 FA E8 FA 
2e2f6     EB FA EE FA 
2e2fa     F0 FA F2 FA 
2e2fe     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2e302     61 FC 66 FC 
2e306     68 FC 6B FC 
2e30a     6C FC 6E FC 
2e30e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2e312     73 FC 75 FC 
2e316     13 FC 3F FB 
2e31a     17 FB 12 FB 
2e31e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2e322     1A FB 1D FB 
2e326     1F FB 20 FB 
2e32a     23 FB 92 FC 
2e32e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2e332     96 FC 97 FC 
2e336     9A FC 9C FC 
2e33a     9E FC 9F FC 
2e33e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2e342     5A FB 41 FB 
2e346     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2e34a     00 00 00 00 | zero2 long 0
2e34e     01 00 00 00 
2e352     00 00 00 00 
2e356     00 00 00 00 
2e35a     00 00 00 00 | mouse  file "mouse2.def"
2e35e     00 00 00 00 
2e362     00 00 00 00 
2e366     00 00 00 00 
2e36a     00 00 00 00 | 	byte	$00[16]
2e36e     01 01 00 00 
2e372     00 00 00 00 
2e376     00 00 00 00 
2e37a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e37e     00 00 00 00 
2e382     00 00 00 00 
2e386     00 00 00 00 
2e38a     00 00 00 00 | 	byte	$00[16]
2e38e     01 0D 01 00 
2e392     00 00 00 00 
2e396     00 00 00 00 
2e39a     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e39e     00 00 00 00 
2e3a2     00 00 00 00 
2e3a6     00 00 00 00 
2e3aa     00 00 00 00 | 	byte	$00[16]
2e3ae     01 0D 0D 01 
2e3b2     00 00 00 00 
2e3b6     00 00 00 00 
2e3ba     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e3be     00 00 00 00 
2e3c2     00 00 00 00 
2e3c6     00 00 00 00 
2e3ca     00 00 00 00 | 	byte	$00[16]
2e3ce     01 0D 0D 0D 
2e3d2     01 00 00 00 
2e3d6     00 00 00 00 
2e3da     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e3de     00 00 00 00 
2e3e2     00 00 00 00 
2e3e6     00 00 00 00 
2e3ea     00 00 00 00 | 	byte	$00[16]
2e3ee     01 0D 0D 0D 
2e3f2     0D 01 00 00 
2e3f6     00 00 00 00 
2e3fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e3fe     00 00 00 00 
2e402     00 00 00 00 
2e406     00 00 00 00 
2e40a     00 00 00 00 | 	byte	$00[16]
2e40e     01 0D 0D 0D 
2e412     0D 0D 01 00 
2e416     00 00 00 00 
2e41a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e41e     00 00 00 00 
2e422     00 00 00 00 
2e426     00 00 00 00 
2e42a     00 00 00 00 | 	byte	$00[16]
2e42e     01 0D 0D 0D 
2e432     0D 0D 0D 01 
2e436     00 00 00 00 
2e43a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2e43e     00 00 00 00 
2e442     00 00 00 00 
2e446     00 00 00 00 
2e44a     00 00 00 00 | 	byte	$00[16]
2e44e     01 0D 0D 0D 
2e452     0D 0D 0D 0C 
2e456     01 00 00 00 
2e45a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2e45e     00 00 00 00 
2e462     00 00 00 00 
2e466     00 00 00 00 
2e46a     00 00 00 00 | 	byte	$00[16]
2e46e     01 0D 0D 0D 
2e472     0D 0D 0D 0D 
2e476     0C 01 00 00 
2e47a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2e47e     00 00 00 00 
2e482     00 00 00 00 
2e486     00 00 00 00 
2e48a     00 00 00 00 | 	byte	$00[16]
2e48e     01 0D 0D 0D 
2e492     0D 0D 0D 0D 
2e496     0D 0C 01 00 
2e49a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2e49e     00 00 00 00 
2e4a2     00 00 00 00 
2e4a6     00 00 00 00 
2e4aa     00 00 00 00 | 	byte	$00[16]
2e4ae     01 0D 0D 0D 
2e4b2     0D 0D 0D 0D 
2e4b6     0D 0D 0B 01 
2e4ba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2e4be     00 00 00 00 
2e4c2     00 00 00 00 
2e4c6     00 00 00 00 
2e4ca     00 00 00 00 | 	byte	$00[16]
2e4ce     01 0D 0D 0D 
2e4d2     0C 0D 0D 03 
2e4d6     01 01 01 01 
2e4da     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2e4de     00 00 00 00 
2e4e2     00 00 00 00 
2e4e6     00 00 00 00 
2e4ea     00 00 00 00 | 	byte	$00[16]
2e4ee     01 0D 0D 0C 
2e4f2     01 09 0D 03 
2e4f6     00 00 00 00 
2e4fa     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2e4fe     00 00 00 00 
2e502     00 00 00 00 
2e506     00 00 00 00 
2e50a     00 00 00 00 | 	byte	$00[16]
2e50e     01 0D 0C 01 
2e512     00 01 0D 0B 
2e516     01 00 00 00 
2e51a     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2e51e     00 00 00 00 
2e522     00 00 00 00 
2e526     00 00 00 00 
2e52a     00 00 00 00 | 	byte	$00[16]
2e52e     01 0C 01 00 
2e532     00 01 0A 0D 
2e536     01 00 00 00 
2e53a     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2e53e     00 00 00 00 
2e542     00 00 00 00 
2e546     00 00 00 00 
2e54a     00 00 00 00 | 	byte	$00[16]
2e54e     01 01 00 00 
2e552     00 00 01 0D 
2e556     0B 01 00 00 
2e55a     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2e55e     00 00 00 00 
2e562     00 00 00 00 
2e566     00 00 00 00 
2e56a     00 00 00 00 
2e56e     00 00 00 00 
2e572     00 00       | 	byte	$00[22]
2e574     01 0B 0D 01 
2e578     00 00 00 00 
2e57c     00 00 00 00 
2e580     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e584     00 00 00 00 
2e588     00 00 00 00 
2e58c     00 00 00 00 
2e590     00 00 00 00 
2e594     00          | 	byte	$00[17]
2e595     01 01 00 00 
2e599     00 00 00 00 
2e59d     00 00 00 00 
2e5a1     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e5a5     00 00 00 00 
      ...             
2e749     00 00 00 00 
2e74d     00          | 	byte	$00[425]
2e74e     73 32 00 04 
2e752     00 00 10 00 
2e756     00 00 00 00 
2e75a     00 00 00 00 | atari2 file "atari2.s2"
2e75e     43 87 43 87 
2e762     43 87 44 87 
2e766     43 87 44 87 
2e76a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e76e     43 87 43 87 
2e772     43 87 44 87 
2e776     43 87 43 87 
2e77a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e77e     44 87 43 87 
2e782     44 87 43 87 
2e786     43 87 43 87 
2e78a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e78e     43 87 43 87 
2e792     44 87 43 87 
2e796     44 87 44 87 
2e79a     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
2e79e     43 87 43 87 
2e7a2     44 87 43 87 
2e7a6     43 87 42 87 
2e7aa     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2e7ae     43 87 43 87 
2e7b2     43 87 43 87 
2e7b6     44 87 43 87 
2e7ba     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2e7be     44 87 44 87 
2e7c2     43 87 44 87 
2e7c6     43 87 44 87 
2e7ca     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e7ce     44 87 43 87 
2e7d2     44 87 44 87 
2e7d6     43 87 43 87 
2e7da     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e7de     43 87 44 87 
2e7e2     44 87 43 87 
2e7e6     43 87 44 87 
2e7ea     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e7ee     43 87 43 87 
2e7f2     43 87 43 87 
2e7f6     43 87 43 87 
2e7fa     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e7fe     42 87 43 87 
2e802     44 87 42 87 
2e806     43 87 43 87 
2e80a     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e80e     43 87 44 87 
2e812     44 87 43 87 
2e816     43 87 43 87 
2e81a     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e81e     43 87 5C 87 
2e822     EE 86 AC 87 
2e826     4C 7C A3 78 
2e82a     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
2e82e     BC 78 BB 78 
2e832     BD 78 BC 78 
2e836     BB 78 BD 78 
2e83a     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
2e83e     BB 78 BB 78 
2e842     BC 78 BC 78 
2e846     BC 78 BB 78 
2e84a     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e84e     BC 78 BC 78 
2e852     BC 78 BC 78 
2e856     BC 78 BC 78 
2e85a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e85e     BB 78 BC 78 
2e862     A0 78 4C 7C 
2e866     11 7A 29 89 
2e86a     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
2e86e     44 87 43 87 
2e872     44 87 43 87 
2e876     43 87 42 87 
2e87a     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2e87e     43 87 43 87 
2e882     44 87 ED 85 
2e886     71 85 52 79 
2e88a     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
2e88e     BC 78 BC 78 
2e892     BC 78 BC 78 
2e896     BC 78 BC 78 
2e89a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e89e     BC 78 BC 78 
2e8a2     BC 78 A0 78 
2e8a6     CF 7A B9 81 
2e8aa     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
2e8ae     44 87 43 87 
2e8b2     43 87 44 87 
2e8b6     43 87 44 87 
2e8ba     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e8be     43 87 43 87 
2e8c2     43 87 43 87 
2e8c6     44 87 43 87 
2e8ca     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2e8ce     43 87 43 87 
2e8d2     44 87 43 87 
2e8d6     44 87 43 87 
2e8da     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2e8de     44 87 43 87 
2e8e2     43 87 43 87 
2e8e6     5A 87 39 81 
2e8ea     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
2e8ee     A5 78 BC 78 
2e8f2     BB 78 BC 78 
2e8f6     BB 78 BC 78 
2e8fa     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
2e8fe     BC 78 BC 78 
2e902     BC 78 BC 78 
2e906     BC 78 8F 79 
2e90a     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
2e90e     09 85 47 87 
2e912     43 87 43 87 
2e916     42 87 42 87 
2e91a     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
2e91e     43 87 43 87 
2e922     43 87 43 87 
2e926     43 87 44 87 
2e92a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e92e     43 87 43 87 
2e932     44 87 43 87 
2e936     42 87 43 87 
2e93a     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
2e93e     44 87 43 87 
2e942     43 87 43 87 
2e946     44 87 44 87 
2e94a     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
2e94e     94 78 55 7A 
2e952     B9 78 BC 78 
2e956     BC 78 BC 78 
2e95a     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e95e     BC 78 BB 78 
2e962     BC 78 BC 78 
2e966     BC 78 BC 78 
2e96a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e96e     BB 78 BC 78 
2e972     BC 78 BC 78 
2e976     BB 78 BC 78 
2e97a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2e97e     BC 78 BC 78 
2e982     BD 78 BC 78 
2e986     BC 78 BB 78 
2e98a     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
2e98e     94 78 B3 84 
2e992     36 84 4A 87 
2e996     43 87 43 87 
2e99a     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e99e     43 87 44 87 
2e9a2     43 87 43 87 
2e9a6     43 87 43 87 
2e9aa     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e9ae     43 87 44 87 
2e9b2     43 87 44 87 
2e9b6     43 87 43 87 
2e9ba     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e9be     43 87 43 87 
2e9c2     43 87 45 87 
2e9c6     43 87 43 87 
2e9ca     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e9ce     43 87 44 87 
2e9d2     44 87 44 87 
2e9d6     43 87 43 87 
2e9da     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e9de     43 87 42 87 
2e9e2     43 87 43 87 
2e9e6     44 87 43 87 
2e9ea     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2e9ee     54 87 3C 82 
2e9f2     36 83 52 79 
2e9f6     C6 78 BC 78 
2e9fa     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
2e9fe     BB 78 BB 78 
2ea02     BC 78 BC 78 
2ea06     BC 78 BC 78 
2ea0a     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2ea0e     BD 78 ED 78 
2ea12     1B 79 F4 83 
2ea16     4D 83 4E 87 
2ea1a     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
2ea1e     44 87 43 87 
2ea22     42 87 44 87 
2ea26     43 87 42 87 
2ea2a     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
2ea2e     43 87 54 87 
2ea32     26 82 B3 84 
2ea36     D6 77 BB 78 
2ea3a     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
2ea3e     BC 78 BB 78 
2ea42     BB 78 BB 78 
2ea46     BB 78 BB 78 
2ea4a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
2ea4e     BC 78 BC 78 
2ea52     26 79 18 75 
2ea56     36 83 1F 84 
2ea5a     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
2ea5e     43 87 43 87 
2ea62     43 87 43 87 
2ea66     43 87 44 87 
2ea6a     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2ea6e     43 87 44 87 
2ea72     44 87 43 87 
2ea76     43 87 43 87 
2ea7a     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
2ea7e     43 87 43 87 
2ea82     43 87 43 87 
2ea86     44 87 44 87 
2ea8a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
2ea8e     44 87 43 87 
2ea92     43 87 43 87 
2ea96     43 87 44 87 
2ea9a     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2ea9e     44 87 44 87 
2eaa2     44 87 43 87 
2eaa6     44 87 43 87 
2eaaa     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2eaae     43 87 43 87 
2eab2     43 87 44 87 
2eab6     44 87 43 87 
2eaba     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2eabe     43 87 43 87 
2eac2     43 87 43 87 
2eac6     43 87 44 87 
2eaca     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2eace     43 87 44 87 
2ead2     43 87 44 87 
2ead6     19 87 7D 86 
2eada     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
2eade     B1 78 BC 78 
2eae2     BC 78 BC 78 
2eae6     BC 78 BC 78 
2eaea     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2eaee     BC 78 BC 78 
2eaf2     BD 78 BC 78 
2eaf6     B7 78 3B 7B 
2eafa     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
2eafe     96 86 44 87 
2eb02     43 87 43 87 
2eb06     43 87 43 87 
2eb0a     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
2eb0e     44 87 44 87 
2eb12     43 87 44 87 
2eb16     43 87 44 87 
2eb1a     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
2eb1e     43 87 44 87 
2eb22     43 87 44 87 
2eb26     43 87 44 87 
2eb2a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2eb2e     43 87 44 87 
2eb32     43 87 43 87 
2eb36     44 87 43 87 
2eb3a     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2eb3e     44 87 44 87 
2eb42     43 87 43 87 
2eb46     43 87 44 87 
2eb4a     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2eb4e     43 87 43 87 
2eb52     43 87 43 87 
2eb56     44 87 44 87 
2eb5a     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
2eb5e     36 83 CF 7A 
2eb62     AB 78 BB 78 
2eb66     BC 78 BC 78 
2eb6a     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
2eb6e     BB 78 BC 78 
2eb72     BC 78 BC 78 
2eb76     BC 78 BC 78 
2eb7a     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2eb7e     BC 78 BC 78 
2eb82     BC 78 BB 78 
2eb86     BC 78 BC 78 
2eb8a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2eb8e     BB 78 BC 78 
2eb92     BB 78 BC 78 
2eb96     BC 78 BD 78 
2eb9a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
2eb9e     BC 78 BC 78 
2eba2     BC 78 BC 78 
2eba6     BC 78 BD 78 
2ebaa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
2ebae     BC 78 BB 78 
2ebb2     BC 78 BB 78 
2ebb6     BB 78 BC 78 
2ebba     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
2ebbe     BC 78 BC 78 
2ebc2     BC 78 BC 78 
2ebc6     BC 78 BB 78 
2ebca     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
2ebce     BC 78 BC 78 
2ebd2     BC 78 BD 78 
2ebd6     BB 78 BC 78 
2ebda     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2ebde     BC 78 BC 78 
2ebe2     BC 78 BB 78 
2ebe6     BC 78 BB 78 
2ebea     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2ebee     BB 78 BC 78 
2ebf2     BC 78 BC 78 
2ebf6     BC 78 BB 78 
2ebfa     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ebfe     BC 78 BC 78 
2ec02     BC 78 BB 78 
2ec06     BC 78 BB 78 
2ec0a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ec0e     BC 78 BC 78 
2ec12     BC 78 BC 78 
2ec16     BB 78 BC 78 
2ec1a     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2ec1e     BC 78 9F 78 
2ec22     52 79 B3 84 
2ec26     2F 86 60 87 
2ec2a     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
2ec2e     44 87 43 87 
2ec32     43 87 43 87 
2ec36     43 87 43 87 
2ec3a     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2ec3e     43 87 43 87 
2ec42     43 87 44 87 
2ec46     43 87 43 87 
2ec4a     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2ec4e     43 87 43 87 
2ec52     43 87 43 87 
2ec56     43 87 44 87 
2ec5a     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2ec5e     44 87 44 87 
2ec62     5E 87 BC 80 
2ec66     FB 80 94 78 
2ec6a     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
2ec6e     BD 78 BC 78 
2ec72     BB 78 BC 78 
2ec76     BB 78 BB 78 
2ec7a     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
2ec7e     BC 78 BB 78 
2ec82     BB 78 6B 79 
2ec86     D6 77 AC 87 
2ec8a     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
2ec8e     43 87 44 87 
2ec92     43 87 43 87 
2ec96     44 87 43 87 
2ec9a     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2ec9e     43 87 44 87 
2eca2     43 87 5C 87 
2eca6     E7 80 00 80 
2ecaa     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
2ecae     BC 78 BD 78 
2ecb2     BC 78 BC 78 
2ecb6     BC 78 BB 78 
2ecba     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ecbe     BC 78 BC 78 
2ecc2     BB 78 BC 78 
2ecc6     BB 78 BC 78 
2ecca     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ecce     BB 78 BC 78 
2ecd2     BC 78 BC 78 
2ecd6     BC 78 BC 78 
2ecda     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2ecde     BC 78 BC 78 
2ece2     BC 78 BC 78 
2ece6     A0 78 8D 7B 
2ecea     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
2ecee     60 87 43 87 
2ecf2     44 87 44 87 
2ecf6     43 87 43 87 
2ecfa     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
2ecfe     44 87 43 87 
2ed02     43 87 43 87 
2ed06     44 87 73 86 
2ed0a     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
2ed0e     51 7B B6 78 
2ed12     BC 78 BD 78 
2ed16     BC 78 BC 78 
2ed1a     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2ed1e     BB 78 BC 78 
2ed22     BD 78 BB 78 
2ed26     BC 78 BB 78 
2ed2a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2ed2e     BC 78 BC 78 
2ed32     BC 78 BC 78 
2ed36     BB 78 BC 78 
2ed3a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ed3e     BC 78 BB 78 
2ed42     BB 78 BC 78 
2ed46     BC 78 BB 78 
2ed4a     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
2ed4e     22 8C AF 84 
2ed52     48 87 43 87 
2ed56     44 87 43 87 
2ed5a     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
2ed5e     43 87 42 87 
2ed62     43 87 43 87 
2ed66     44 87 43 87 
2ed6a     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2ed6e     43 87 43 87 
2ed72     44 87 44 87 
2ed76     43 87 43 87 
2ed7a     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2ed7e     43 87 43 87 
2ed82     43 87 43 87 
2ed86     44 87 43 87 
2ed8a     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
2ed8e     9F 8B D6 77 
2ed92     16 7C B3 78 
2ed96     BC 78 BB 78 
2ed9a     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2ed9e     BB 78 BC 78 
2eda2     BB 78 BC 78 
2eda6     BC 78 BC 78 
2edaa     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2edae     BC 78 BB 78 
2edb2     BB 78 BC 78 
2edb6     BB 78 BC 78 
2edba     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2edbe     BB 78 BB 78 
2edc2     BC 78 BC 78 
2edc6     BC 78 BB 78 
2edca     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2edce     BC 78 BC 78 
2edd2     BC 78 BD 78 
2edd6     BB 78 BC 78 
2edda     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
2edde     BC 78 BC 78 
2ede2     BC 78 BB 78 
2ede6     BC 78 BC 78 
2edea     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2edee     A8 78 54 7E 
2edf2     F4 83 17 82 
2edf6     50 87 43 87 
2edfa     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
2edfe     44 87 43 87 
2ee02     44 87 43 87 
2ee06     43 87 44 87 
2ee0a     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2ee0e     43 87 28 87 
2ee12     20 85 CF 7A 
2ee16     70 7D AD 78 
2ee1a     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
2ee1e     BB 78 BC 78 
2ee22     BC 78 BC 78 
2ee26     BB 78 BB 78 
2ee2a     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
2ee2e     BB 78 B2 78 
2ee32     9A 7C CF 7A 
2ee36     4A 87 0D 87 
2ee3a     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
2ee3e     43 87 44 87 
2ee42     43 87 44 87 
2ee46     43 87 43 87 
2ee4a     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
2ee4e     44 87 43 87 
2ee52     28 87 51 85 
2ee56     11 7A 1E 7D 
2ee5a     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
2ee5e     BC 78 BB 78 
2ee62     BC 78 BC 78 
2ee66     BC 78 BC 78 
2ee6a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2ee6e     BB 78 BC 78 
2ee72     BB 78 BC 78 
2ee76     BC 78 BC 78 
2ee7a     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2ee7e     BB 78 BC 78 
2ee82     BC 78 BC 78 
2ee86     BD 78 BB 78 
2ee8a     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
2ee8e     BC 78 BB 78 
2ee92     BC 78 BC 78 
2ee96     BC 78 BB 78 
2ee9a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ee9e     BC 78 BC 78 
2eea2     BC 78 BC 78 
2eea6     BB 78 BC 78 
2eeaa     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2eeae     BC 78 BD 78 
2eeb2     BC 78 BC 78 
2eeb6     BC 78 BB 78 
2eeba     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2eebe     BC 78 BB 78 
2eec2     BB 78 BC 78 
2eec6     BC 78 BB 78 
2eeca     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2eece     BB 78 BB 78 
2eed2     BB 78 BC 78 
2eed6     B6 78 48 7D 
2eeda     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
2eede     56 87 43 87 
2eee2     42 87 44 87 
2eee6     44 87 43 87 
2eeea     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2eeee     43 87 44 87 
2eef2     43 87 44 87 
2eef6     4C 87 7E 83 
2eefa     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
2eefe     F7 78 BC 78 
2ef02     BC 78 BB 78 
2ef06     BB 78 BC 78 
2ef0a     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ef0e     BC 78 BB 78 
2ef12     BC 78 BC 78 
2ef16     BB 78 BC 78 
2ef1a     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2ef1e     BB 78 BC 78 
2ef22     BC 78 BC 78 
2ef26     BC 78 BB 78 
2ef2a     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ef2e     BC 78 BC 78 
2ef32     BC 78 BC 78 
2ef36     BC 78 BB 78 
2ef3a     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ef3e     BC 78 BB 78 
2ef42     BB 78 BC 78 
2ef46     BC 78 BB 78 
2ef4a     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ef4e     BC 78 BC 78 
2ef52     BB 78 BC 78 
2ef56     BC 78 BC 78 
2ef5a     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
2ef5e     73 32 00 04 
2ef62     00 00 10 00 
2ef66     00 00 00 00 
2ef6a     00 00 00 00 | atari12 file "atari12.s2"
2ef6e     00 6D 00 6D 
2ef72     00 6D 00 6D 
2ef76     00 6D 00 6D 
2ef7a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ef7e     00 6D 00 6D 
2ef82     00 6D 00 6D 
2ef86     00 6D 00 6D 
2ef8a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ef8e     00 6D 00 6D 
2ef92     00 6D 00 6D 
2ef96     00 6D 00 6D 
2ef9a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ef9e     00 6D 00 6D 
2efa2     00 6D 00 6D 
2efa6     00 6D 00 6D 
2efaa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2efae     00 6D 00 6D 
2efb2     00 6D 00 6D 
2efb6     00 6D 00 6D 
2efba     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
2efbe     00 6C 00 6C 
2efc2     00 6C 00 6C 
2efc6     00 6C 00 6C 
2efca     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2efce     00 6C 00 6C 
2efd2     00 6C 00 6C 
2efd6     00 6C 00 6C 
2efda     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2efde     00 6C 00 6C 
2efe2     00 6C 00 6C 
2efe6     00 6C 00 6C 
2efea     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2efee     00 6C 00 6C 
2eff2     00 6C 00 6C 
2eff6     00 6C 00 6C 
2effa     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2effe     00 6C 00 6C 
2f002     00 6C 00 6C 
2f006     00 6C 00 6C 
2f00a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f00e     00 6C 00 6C 
2f012     00 6C 00 6C 
2f016     00 6C 00 6C 
2f01a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f01e     00 6C 00 6C 
2f022     00 6C 00 6C 
2f026     00 6C 00 6C 
2f02a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f02e     00 6C 00 6C 
2f032     00 6C 00 6C 
2f036     00 6C 00 6C 
2f03a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f03e     00 6C 00 6C 
2f042     00 6C 00 6C 
2f046     00 6C 00 6C 
2f04a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f04e     00 6C 00 6C 
2f052     00 6C 00 6C 
2f056     00 6C 00 6C 
2f05a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f05e     00 6C 00 6C 
2f062     00 6C 00 6C 
2f066     00 6C 00 6C 
2f06a     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f06e     00 6C 00 6B 
2f072     00 6B 00 6B 
2f076     00 6B 00 6B 
2f07a     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f07e     00 6B 00 6B 
2f082     00 6B 00 6B 
2f086     00 6B 00 6B 
2f08a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f08e     00 6B 00 6B 
2f092     00 6B 00 6B 
2f096     00 6B 00 6B 
2f09a     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f09e     00 6B 00 6B 
2f0a2     00 6B 00 6B 
2f0a6     00 6B 00 6B 
2f0aa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f0ae     00 6B 00 6B 
2f0b2     00 6B 00 6B 
2f0b6     00 6B 00 6B 
2f0ba     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f0be     00 6B 00 6B 
2f0c2     00 6B 00 6B 
2f0c6     00 6B 00 6B 
2f0ca     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f0ce     00 6B 00 6B 
2f0d2     00 6B 00 6B 
2f0d6     00 6B 00 6B 
2f0da     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f0de     00 6B 00 6B 
2f0e2     00 6B 00 6B 
2f0e6     00 6B 00 6B 
2f0ea     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f0ee     00 6B 00 6B 
2f0f2     00 6B 00 6B 
2f0f6     00 6B 00 6B 
2f0fa     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2f0fe     00 6B 00 6B 
2f102     00 6B 00 6B 
2f106     00 6A 00 9D 
2f10a     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
2f10e     00 9E 00 9E 
2f112     00 9E 00 9E 
2f116     00 9E 00 9E 
2f11a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f11e     00 9E 00 9E 
2f122     00 9E 00 9E 
2f126     00 9E 00 9E 
2f12a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f12e     00 9E 00 9E 
2f132     00 9E 00 9E 
2f136     00 9E 00 9E 
2f13a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f13e     00 9E 00 9E 
2f142     00 9E 00 9E 
2f146     00 9E 00 9E 
2f14a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f14e     00 9E 00 9E 
2f152     00 9E 00 9E 
2f156     00 9E 00 9E 
2f15a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f15e     00 9E 00 9E 
2f162     00 9E 00 9E 
2f166     00 9E 00 9E 
2f16a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f16e     00 9E 00 9E 
2f172     00 9E 00 9E 
2f176     00 9E 00 9E 
2f17a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f17e     00 9E 00 9E 
2f182     00 9E 00 9E 
2f186     00 9E 00 9E 
2f18a     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f18e     00 9E 00 9E 
2f192     00 9E 00 9E 
2f196     00 9E 00 9E 
2f19a     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
2f19e     00 9F 00 9F 
2f1a2     00 9F 00 9F 
2f1a6     00 9F 00 9F 
2f1aa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f1ae     00 9F 00 9F 
2f1b2     00 9F 00 9F 
2f1b6     00 9F 00 9F 
2f1ba     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f1be     00 9F 00 9F 
2f1c2     00 9F 00 9F 
2f1c6     00 9F 00 9F 
2f1ca     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f1ce     00 9F 00 9F 
2f1d2     00 9F 00 9F 
2f1d6     00 9F 00 9F 
2f1da     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f1de     00 9F 00 9F 
2f1e2     00 9F 00 9F 
2f1e6     00 9F 00 9F 
2f1ea     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f1ee     00 9F 00 9F 
2f1f2     00 9F 00 9F 
2f1f6     00 9F 00 9F 
2f1fa     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f1fe     00 9F 00 9F 
2f202     00 9F 00 9F 
2f206     00 9F 00 9F 
2f20a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f20e     00 9F 00 9F 
2f212     00 9F 00 9F 
2f216     00 9F 00 9F 
2f21a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f21e     00 9F 00 9F 
2f222     00 9F 00 9F 
2f226     00 9F 00 9F 
2f22a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f22e     00 9F 00 9F 
2f232     00 9F 00 9F 
2f236     00 9F 00 9F 
2f23a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f23e     00 9F 00 9F 
2f242     00 9F 00 9F 
2f246     00 9F 00 9F 
2f24a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f24e     00 9F 00 9F 
2f252     00 9F 00 9F 
2f256     00 9F 00 9F 
2f25a     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f25e     00 9F 00 9F 
2f262     00 9F 00 A0 
2f266     00 A0 00 A0 
2f26a     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f26e     00 A0 00 A0 
2f272     00 A0 00 A0 
2f276     00 A0 00 A0 
2f27a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f27e     00 A0 00 A0 
2f282     00 A0 00 A0 
2f286     00 A0 00 A0 
2f28a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f28e     00 A0 00 A0 
2f292     00 A0 00 A0 
2f296     00 A0 00 A0 
2f29a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f29e     00 A0 00 A0 
2f2a2     00 A0 00 A0 
2f2a6     00 A0 00 A0 
2f2aa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2ae     00 A0 00 A0 
2f2b2     00 A0 00 A0 
2f2b6     00 A0 00 A0 
2f2ba     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2be     00 A0 00 A0 
2f2c2     00 A0 00 A0 
2f2c6     00 A0 00 A0 
2f2ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2ce     00 A0 00 A0 
2f2d2     00 A0 00 A0 
2f2d6     00 A0 00 A0 
2f2da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2de     00 A0 00 A0 
2f2e2     00 A0 00 A0 
2f2e6     00 A0 00 A0 
2f2ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2ee     00 A0 00 A0 
2f2f2     00 A0 00 A0 
2f2f6     00 A0 00 A0 
2f2fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2fe     00 A0 00 A0 
2f302     00 A0 00 A0 
2f306     00 A0 00 A0 
2f30a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f30e     00 A0 00 A0 
2f312     00 A0 00 A0 
2f316     00 A0 00 A0 
2f31a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f31e     00 A0 00 A0 
2f322     00 A0 00 A0 
2f326     00 A0 00 A0 
2f32a     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
2f32e     00 6D 00 6D 
2f332     00 6D 00 6D 
2f336     00 6D 00 6D 
2f33a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f33e     00 6D 00 6D 
2f342     00 6D 00 6D 
2f346     00 6D 00 6D 
2f34a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f34e     00 6D 00 6D 
2f352     00 6D 00 6D 
2f356     00 6D 00 6D 
2f35a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f35e     00 6D 00 6D 
2f362     00 6D 00 6D 
2f366     00 6D 00 6D 
2f36a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f36e     00 6D 00 6D 
2f372     00 6D 00 6D 
2f376     00 6D 00 6D 
2f37a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f37e     00 6D 00 6D 
2f382     00 6D 00 6D 
2f386     00 6D 00 6D 
2f38a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f38e     00 6D 00 6D 
2f392     00 6D 00 6D 
2f396     00 6D 00 6D 
2f39a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f39e     00 6D 00 6D 
2f3a2     00 6D 00 6D 
2f3a6     00 6D 00 6D 
2f3aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f3ae     00 6D 00 6D 
2f3b2     00 A0 00 A0 
2f3b6     00 A0 00 A0 
2f3ba     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3be     00 A0 00 A0 
2f3c2     00 A0 00 A0 
2f3c6     00 A0 00 A0 
2f3ca     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3ce     00 A0 00 A0 
2f3d2     00 A0 00 A0 
2f3d6     00 A0 00 A0 
2f3da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3de     00 A0 00 A0 
2f3e2     00 A0 00 A0 
2f3e6     00 A0 00 A0 
2f3ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3ee     00 A0 00 A0 
2f3f2     00 A0 00 A0 
2f3f6     00 A0 00 A0 
2f3fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3fe     00 A0 00 A0 
2f402     00 A0 00 A0 
2f406     00 A0 00 A0 
2f40a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f40e     00 A0 00 A0 
2f412     00 A0 00 A0 
2f416     00 A0 00 A0 
2f41a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f41e     00 A0 00 A0 
2f422     00 A0 00 A0 
2f426     00 A0 00 A0 
2f42a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f42e     00 A0 00 A0 
2f432     00 A0 00 A0 
2f436     00 A0 00 A0 
2f43a     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
2f43e     00 6D 00 6D 
2f442     00 6D 00 6D 
2f446     00 6D 00 6D 
2f44a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f44e     00 6D 00 6D 
2f452     00 6D 00 6D 
2f456     00 6D 00 6D 
2f45a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f45e     00 6D 00 6D 
2f462     00 6D 00 6D 
2f466     00 6D 00 6D 
2f46a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f46e     00 6D 00 6D 
2f472     00 6D 00 6D 
2f476     00 6D 00 6D 
2f47a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f47e     00 6D 00 6D 
2f482     00 6D 00 6D 
2f486     00 6D 00 6D 
2f48a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f48e     00 6D 00 6D 
2f492     00 6D 00 6D 
2f496     00 6D 00 6D 
2f49a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f49e     00 6D 00 6D 
2f4a2     00 6D 00 6D 
2f4a6     00 6D 00 6D 
2f4aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4ae     00 6D 00 6D 
2f4b2     00 6D 00 6D 
2f4b6     00 6D 00 6D 
2f4ba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4be     00 6D 00 6D 
2f4c2     00 6C 00 A0 
2f4c6     00 9F 00 A0 
2f4ca     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
2f4ce     00 A0 00 A0 
2f4d2     00 A0 00 A0 
2f4d6     00 A0 00 A0 
2f4da     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f4de     00 A0 00 A0 
2f4e2     00 A0 00 A0 
2f4e6     00 A0 00 A0 
2f4ea     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f4ee     00 A0 00 A0 
2f4f2     00 A0 00 A0 
2f4f6     00 A0 00 A0 
2f4fa     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f4fe     00 A0 00 A0 
2f502     00 A0 00 A0 
2f506     00 A0 00 A0 
2f50a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f50e     00 A0 00 A0 
2f512     00 A0 00 A0 
2f516     00 A0 00 A0 
2f51a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f51e     00 A0 00 A0 
2f522     00 A0 00 A0 
2f526     00 A0 00 A0 
2f52a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f52e     00 A0 00 A0 
2f532     00 A0 00 A0 
2f536     00 A0 00 A0 
2f53a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f53e     00 A0 00 A0 
2f542     00 A0 00 A0 
2f546     00 A0 00 A0 
2f54a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f54e     00 A0 00 A0 
2f552     00 A0 00 A0 
2f556     00 A0 00 A0 
2f55a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f55e     00 A0 00 A0 
2f562     00 A0 00 A0 
2f566     00 A0 00 A0 
2f56a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f56e     00 A0 00 A0 
2f572     00 A0 00 A0 
2f576     00 A0 00 A0 
2f57a     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
2f57e     00 A1 00 A1 
2f582     00 A1 00 A1 
2f586     00 A1 00 A1 
2f58a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f58e     00 A1 00 A1 
2f592     00 A1 00 A1 
2f596     00 A1 00 A1 
2f59a     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f59e     00 A1 00 A1 
2f5a2     00 A1 00 A1 
2f5a6     00 A1 00 A1 
2f5aa     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f5ae     00 A1 00 A1 
2f5b2     00 A1 00 A1 
2f5b6     00 A1 00 A1 
2f5ba     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f5be     00 A1 00 A1 
2f5c2     00 A1 00 A1 
2f5c6     00 A1 00 A1 
2f5ca     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f5ce     00 A1 00 A1 
2f5d2     00 A1 00 A1 
2f5d6     00 6E 00 6E 
2f5da     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f5de     00 6E 00 6E 
2f5e2     00 6E 00 6E 
2f5e6     00 6E 00 6E 
2f5ea     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f5ee     00 6E 00 6E 
2f5f2     00 6E 00 6E 
2f5f6     00 6E 00 6E 
2f5fa     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f5fe     00 6E 00 6E 
2f602     00 6E 00 6E 
2f606     00 6E 00 6E 
2f60a     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f60e     00 6E 00 6D 
2f612     00 6D 00 6D 
2f616     00 6D 00 6D 
2f61a     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f61e     00 6D 00 6D 
2f622     00 6D 00 6D 
2f626     00 6D 00 6D 
2f62a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f62e     00 6D 00 6D 
2f632     00 6D 00 6D 
2f636     00 6D 00 6D 
2f63a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f63e     00 6D 00 6D 
2f642     00 6D 00 6D 
2f646     00 6D 00 6D 
2f64a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f64e     00 6D 00 6D 
2f652     00 6D 00 6D 
2f656     00 6D 00 6D 
2f65a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f65e     00 6D 00 6D 
2f662     00 6D 00 6D 
2f666     00 6D 00 6D 
2f66a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f66e     00 6D 00 6D 
2f672     00 6D 00 6D 
2f676     00 6D 00 6D 
2f67a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f67e     00 6D 00 6D 
2f682     00 6D 00 6D 
2f686     00 6D 00 6D 
2f68a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f68e     00 6D 00 6D 
2f692     00 6D 00 6D 
2f696     00 6D 00 6D 
2f69a     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f69e     00 6D 00 6D 
2f6a2     00 6D 00 6D 
2f6a6     00 6D 00 6D 
2f6aa     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f6ae     00 6D 00 6D 
2f6b2     00 6D 00 6D 
2f6b6     00 6D 00 6D 
2f6ba     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f6be     00 6D 00 6D 
2f6c2     00 6C 00 6C 
2f6c6     00 6C 00 6C 
2f6ca     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f6ce     00 6C 00 6C 
2f6d2     00 6C 00 6C 
2f6d6     00 6C 00 6C 
2f6da     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f6de     00 6C 00 6C 
2f6e2     00 6C 00 6C 
2f6e6     00 9D 00 9F 
2f6ea     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
2f6ee     00 9F 00 9F 
2f6f2     00 9F 00 9F 
2f6f6     00 A0 00 A0 
2f6fa     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f6fe     00 A0 00 A0 
2f702     00 A0 00 A0 
2f706     00 A0 00 A0 
2f70a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f70e     00 A0 00 A0 
2f712     00 A0 00 A0 
2f716     00 A0 00 A0 
2f71a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f71e     00 A0 00 A0 
2f722     00 A0 00 A0 
2f726     00 A0 00 A0 
2f72a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f72e     00 A0 00 A0 
2f732     00 A0 00 A0 
2f736     00 A0 00 A0 
2f73a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f73e     00 A0 00 A0 
2f742     00 A0 00 A0 
2f746     00 A0 00 A0 
2f74a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f74e     00 A0 00 A0 
2f752     00 A0 00 A0 
2f756     00 A0 00 A0 
2f75a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f75e     00 A0 00 A0 
2f762     00 A0 00 A0 
2f766     00 A0 00 A0 
2f76a     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f76e                 | 
2f76e     00 00       |              	org
2f770 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2f774 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2f778 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2f77c 003             | 
2f77c 003 00 30 04 F6 |                 mov     psramaddr,#0
2f780 004             | 
2f780 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2f784 005 20 00 00 FF 
2f788 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2f78c 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2f790 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2f794 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2f798 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2f79c 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2f7a0 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2f7a4 00d             | 
2f7a4 00d 20 00 00 FF 
2f7a8 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2f7ac 00f E0 03 00 FF 
2f7b0 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2f7b4 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2f7b8 012             | 
2f7b8 012             |                 
2f7b8 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2f7bc 013             |     
2f7bc 013 01 2C 60 FD |                 cogid 	t11				' get id
2f7c0 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2f7c4 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2f7c8 016             | 
2f7c8 016 00 00 00 00 | t11 		long 	0
2f7cc 017 00 FF 07 00 | mailbox 	long 	$7FF00
2f7d0 018 00 00 00 00 | psramaddr 	long 	0
2f7d4 019 00 00 00 00 | pslockval	long 	0
2f7d8 01a 00 00 00 00 | cmd             long    0
2f7dc 01b 00 00 00 00 | buf1            long    0
2f7e0 01c 00 40 00 00 | buf2            long    16384
2f7e4 01d E8 F7 02 00 | 	long	@@@_dat_ + 12624
2f7e8 01e 50 32 20 52 
2f7ec 01f 65 74 72 6F 
2f7f0 020 6D 61 63 68 
2f7f4 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2f7f8 022 42 41 53 49 
2f7fc 023 43 20 76 65 
2f800 024 72 73 69 6F 
2f804 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2f808 026 32 36 62 00 | 	byte	$32, $36, $62, $00
2f80c 027             | 	alignl
2f80c 027             | _hg010b_spin2_dat_
2f80c 027             | 
2f80c 027 00 00 00 00 
2f810 028 00 00 00 00 
2f814 029 00 00 00 00 
2f818 02a 00 00 00 00 
2f81c 02b 00 00 00    | vga_font       file "vgafont.def"
2f81f 02b 7E 81 A5 81 
2f823 02c 81 BD 99 81 
2f827 02d 81 7E 00 00 
2f82b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2f82f 02f 7E FF DB FF 
2f833 030 FF C3 E7 FF 
2f837 031 FF 7E 00 00 
2f83b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2f83f 033 00 36 7F 7F 
2f843 034 7F 7F 3E 1C 
2f847 035 08 00 00 00 
2f84b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2f84f 037 00 08 1C 3E 
2f853 038 7F 3E 1C 08 
2f857 039 00 00 00 00 
2f85b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2f85f 03b 18 3C 3C E7 
2f863 03c E7 E7 18 18 
2f867 03d 3C 00 00 00 
2f86b 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2f86f 03f 18 3C 7E FF 
2f873 040 FF 7E 18 18 
2f877 041 3C 00 00 00 
2f87b 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2f87f 043 00 00 00 18 
2f883 044 3C 3C 18 00 
2f887 045 00 00 00 00 
2f88b 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2f88f 047 FF FF FF E7 
2f893 048 C3 C3 E7 FF 
2f897 049 FF FF FF FF 
2f89b 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2f89f 04b 00 00 3C 66 
2f8a3 04c 42 42 66 3C 
2f8a7 04d 00 00 00 00 
2f8ab 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2f8af 04f FF FF C3 99 
2f8b3 050 BD BD 99 C3 
2f8b7 051 FF FF FF FF 
2f8bb 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2f8bf 053 78 70 58 4C 
2f8c3 054 1E 33 33 33 
2f8c7 055 33 1E 00 00 
2f8cb 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2f8cf 057 3C 66 66 66 
2f8d3 058 66 3C 18 7E 
2f8d7 059 18 18 00 00 
2f8db 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2f8df 05b FC CC FC 0C 
2f8e3 05c 0C 0C 0C 0E 
2f8e7 05d 0F 07 00 00 
2f8eb 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2f8ef 05f FE C6 FE C6 
2f8f3 060 C6 C6 C6 E6 
2f8f7 061 E7 67 03 00 
2f8fb 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2f8ff 063 18 18 DB 3C 
2f903 064 E7 3C DB 18 
2f907 065 18 00 00 00 
2f90b 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2f90f 067 03 07 0F 1F 
2f913 068 7F 1F 0F 07 
2f917 069 03 01 00 00 
2f91b 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2f91f 06b 60 70 78 7C 
2f923 06c 7F 7C 78 70 
2f927 06d 60 40 00 00 
2f92b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2f92f 06f 18 3C 7E 18 
2f933 070 18 18 7E 3C 
2f937 071 18 00 00 00 
2f93b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2f93f 073 66 66 66 66 
2f943 074 66 66 66    | 	byte	$66[7]
2f946 075 00 66 66 00 
2f94a 076 00 00 00 00 
2f94e 077 00 FE DB DB 
2f952 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2f956 079 D8 D8 D8 00 
2f95a 07a 00 00 00 3E 
2f95e 07b 63 06 1C 36 
2f962 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2f966 07d 30 63 3E 00 
2f96a 07e 00 00 00 00 
2f96e 07f 00 00 00 00 
2f972 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2f976 081 7F 7F 7F 00 
2f97a 082 00 00 00 00 
2f97e 083 00 18 3C 7E 
2f982 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2f986 085 3C 18 7E 00 
2f98a 086 00 00 00 00 
2f98e 087 00 18 3C 7E 
2f992 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2f996 089 18 18 18 00 
2f99a 08a 00 00 00 00 
2f99e 08b 00 18 18 18 
2f9a2 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f9a6 08d 7E 3C 18 00 
2f9aa 08e 00 00 00 00 
2f9ae 08f 00 00 00 18 
2f9b2 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2f9b6 091 00 00 00 00 
2f9ba 092 00 00 00 00 
2f9be 093 00 00 00    | 	byte	$00[11]
2f9c1 094 0C 06 7F 06 
2f9c5 095 0C 00 00 00 
2f9c9 096 00 00 00 00 
2f9cd 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f9d1 098 00 03 03 03 
2f9d5 099 7F 00 00 00 
2f9d9 09a 00 00 00 00 
2f9dd 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f9e1 09c 14 36 7F 36 
2f9e5 09d 14 00 00 00 
2f9e9 09e 00 00 00 00 
2f9ed 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2f9f1 0a0 1C 1C 3E 3E 
2f9f5 0a1 7F 7F 00 00 
2f9f9 0a2 00 00 00 00 
2f9fd 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2fa01 0a4 7F 3E 3E 1C 
2fa05 0a5 1C 08 00 00 
2fa09 0a6 00 00 00 00 
2fa0d 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fa11 0a8 00 00 00 00 
2fa15 0a9 00 00 00 00 
2fa19 0aa 00 00 00 00 
2fa1d 0ab 00 00       | 	byte	$00[14]
2fa1f 0ab 18 3C 3C 3C 
2fa23 0ac 18 18 18 00 
2fa27 0ad 18 18 00 00 
2fa2b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2fa2f 0af 66 24 00 00 
2fa33 0b0 00 00 00 00 
2fa37 0b1 00 00 00 00 
2fa3b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fa3f 0b3 00 36 36 7F 
2fa43 0b4 36 36 36 7F 
2fa47 0b5 36 36 00 00 
2fa4b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2fa4f 0b7 3E 63 43 03 
2fa53 0b8 3E 60 60 61 
2fa57 0b9 63 3E 18 18 
2fa5b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2fa5f 0bb 00 00 43 63 
2fa63 0bc 30 18 0C 06 
2fa67 0bd 63 61 00 00 
2fa6b 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2fa6f 0bf 1C 36 36 1C 
2fa73 0c0 6E 3B 33 33 
2fa77 0c1 33 6E 00 00 
2fa7b 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2fa7f 0c3 0C 0C 0C 06 
2fa83 0c4 00 00 00 00 
2fa87 0c5 00 00 00 00 
2fa8b 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fa8f 0c7 30 18 0C 0C 
2fa93 0c8 0C 0C 0C 0C 
2fa97 0c9 18 30 00 00 
2fa9b 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2fa9f 0cb 0C 18 30 30 
2faa3 0cc 30 30 30 30 
2faa7 0cd 18 0C 00 00 
2faab 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2faaf 0cf 00 00 00 66 
2fab3 0d0 3C FF 3C 66 
2fab7 0d1 00 00 00 00 
2fabb 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2fabf 0d3 00 00 00 18 
2fac3 0d4 18 7E 18 18 
2fac7 0d5 00 00 00 00 
2facb 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2facf 0d7 00 00 00 00 
2fad3 0d8 00 00 00 00 | 	byte	$00[8]
2fad7 0d9 18 18 18 0C 
2fadb 0da 00 00 00 00 
2fadf 0db 00 00 00 00 
2fae3 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2fae7 0dd 00 00 00 00 
2faeb 0de 00 00 00 00 
2faef 0df 00 00 00 00 
2faf3 0e0 00 00 00 00 | 	byte	$00[16]
2faf7 0e1 18 18 00 00 
2fafb 0e2 00 00 00 00 
2faff 0e3 00 00 40 60 
2fb03 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2fb07 0e5 03 01 00 00 
2fb0b 0e6 00 00 00 00 
2fb0f 0e7 1C 36 63 63 
2fb13 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2fb17 0e9 36 1C 00 00 
2fb1b 0ea 00 00 00 00 
2fb1f 0eb 18 1C 1E 18 
2fb23 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2fb27 0ed 18 7E 00 00 
2fb2b 0ee 00 00 00 00 
2fb2f 0ef 3E 63 60 30 
2fb33 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2fb37 0f1 63 7F 00 00 
2fb3b 0f2 00 00 00 00 
2fb3f 0f3 3E 63 60 60 
2fb43 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2fb47 0f5 63 3E 00 00 
2fb4b 0f6 00 00 00 00 
2fb4f 0f7 30 38 3C 36 
2fb53 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2fb57 0f9 30 78 00 00 
2fb5b 0fa 00 00 00 00 
2fb5f 0fb 7F 03 03 03 
2fb63 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2fb67 0fd 63 3E 00 00 
2fb6b 0fe 00 00 00 00 
2fb6f 0ff 1C 06 03 03 
2fb73 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2fb77 101 63 3E 00 00 
2fb7b 102 00 00 00 00 
2fb7f 103 7F 63 60 60 
2fb83 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2fb87 105 0C 0C 00 00 
2fb8b 106 00 00 00 00 
2fb8f 107 3E 63 63 63 
2fb93 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2fb97 109 63 3E 00 00 
2fb9b 10a 00 00 00 00 
2fb9f 10b 3E 63 63 63 
2fba3 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2fba7 10d 30 1E 00 00 
2fbab 10e 00 00 00 00 
2fbaf 10f 00 00 00 18 
2fbb3 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2fbb7 111 18 18 00 00 
2fbbb 112 00 00 00 00 
2fbbf 113 00 00 00 18 
2fbc3 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2fbc7 115 18 18 0C 00 
2fbcb 116 00 00 00 00 
2fbcf 117 00 60 30 18 
2fbd3 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2fbd7 119 30 60 00 00 
2fbdb 11a 00 00 00 00 
2fbdf 11b 00 00 00 7E 
2fbe3 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2fbe7 11d 00 00 00 00 
2fbeb 11e 00 00 00 00 
2fbef 11f 00          | 	byte	$00[9]
2fbf0 120 06 0C 18 30 
2fbf4 121 60 30 18 0C 
2fbf8 122 06 00 00 00 
2fbfc 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2fc00 124 63 63 30 18 
2fc04 125 18 18 00 18 
2fc08 126 18 00 00 00 
2fc0c 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2fc10 128 3E 63 63 7B 
2fc14 129 7B 7B 3B 03 
2fc18 12a 3E 00 00 00 
2fc1c 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2fc20 12c 1C 36 63 63 
2fc24 12d 7F 63 63 63 
2fc28 12e 63 00 00 00 
2fc2c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2fc30 130 66 66 66 3E 
2fc34 131 66 66 66 66 
2fc38 132 3F 00 00 00 
2fc3c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2fc40 134 66 43 03 03 
2fc44 135 03 03 43 66 
2fc48 136 3C 00 00 00 
2fc4c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2fc50 138 36 66 66 66 
2fc54 139 66 66 66 36 
2fc58 13a 1F 00 00 00 
2fc5c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2fc60 13c 66 46 16 1E 
2fc64 13d 16 06 46 66 
2fc68 13e 7F 00 00 00 
2fc6c 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2fc70 140 66 46 16 1E 
2fc74 141 16 06 06 06 
2fc78 142 0F 00 00 00 
2fc7c 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2fc80 144 66 43 03 03 
2fc84 145 7B 63 63 66 
2fc88 146 5C 00 00 00 
2fc8c 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2fc90 148 63 63 63 7F 
2fc94 149 63 63 63 63 
2fc98 14a 63 00 00 00 
2fc9c 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2fca0 14c 18 18 18 18 
2fca4 14d 18 18 18 18 | 	byte	$18[8]
2fca8 14e 3C 00 00 00 
2fcac 14f 00 00 00 78 
2fcb0 150 30 30 30 30 
2fcb4 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2fcb8 152 1E 00 00 00 
2fcbc 153 00 00 00 67 
2fcc0 154 66 66 36 1E 
2fcc4 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2fcc8 156 67 00 00 00 
2fccc 157 00 00 00 0F 
2fcd0 158 06 06 06 06 
2fcd4 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2fcd8 15a 7F 00 00 00 
2fcdc 15b 00 00 00 63 
2fce0 15c 77 7F 7F 6B 
2fce4 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2fce8 15e 63 00 00 00 
2fcec 15f 00 00 00 63 
2fcf0 160 67 6F 7F 7B 
2fcf4 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2fcf8 162 63 00 00 00 
2fcfc 163 00 00 00 3E 
2fd00 164 63 63 63 63 
2fd04 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2fd08 166 3E 00 00 00 
2fd0c 167 00 00 00 3F 
2fd10 168 66 66 66 3E 
2fd14 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2fd18 16a 0F 00 00 00 
2fd1c 16b 00 00 00 3E 
2fd20 16c 63 63 63 63 
2fd24 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2fd28 16e 3E 30 70 00 
2fd2c 16f 00 00 00 3F 
2fd30 170 66 66 66 3E 
2fd34 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2fd38 172 67 00 00 00 
2fd3c 173 00 00 00 3E 
2fd40 174 63 63 06 1C 
2fd44 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2fd48 176 3E 00 00 00 
2fd4c 177 00 00 00 7E 
2fd50 178 7E 5A 18 18 
2fd54 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2fd58 17a 3C 00 00 00 
2fd5c 17b 00 00 00 63 
2fd60 17c 63 63 63 63 
2fd64 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2fd68 17e 3E 00 00 00 
2fd6c 17f 00 00 00 63 
2fd70 180 63 63 63 63 
2fd74 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2fd78 182 08 00 00 00 
2fd7c 183 00 00 00 63 
2fd80 184 63 63 63 6B 
2fd84 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2fd88 186 36 00 00 00 
2fd8c 187 00 00 00 63 
2fd90 188 63 36 3E 1C 
2fd94 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2fd98 18a 63 00 00 00 
2fd9c 18b 00 00 00 66 
2fda0 18c 66 66 66 3C 
2fda4 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2fda8 18e 3C 00 00 00 
2fdac 18f 00 00 00 7F 
2fdb0 190 63 61 30 18 
2fdb4 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2fdb8 192 7F 00 00 00 
2fdbc 193 00 00 00 3C 
2fdc0 194 0C 0C 0C 0C 
2fdc4 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2fdc8 196 3C 00 00 00 
2fdcc 197 00 00 00 00 
2fdd0 198 01 03 07 0E 
2fdd4 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2fdd8 19a 40 00 00 00 
2fddc 19b 00 00 00 3C 
2fde0 19c 30 30 30 30 
2fde4 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2fde8 19e 3C 00 00 00 
2fdec 19f 1C 36 00 00 
2fdf0 1a0 00 00 00 00 
2fdf4 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fdf8 1a2 00 00 00 00 
2fdfc 1a3 00 00 00 00 
2fe00 1a4 00 00 00 00 
2fe04 1a5 00 00 00 00 
2fe08 1a6 00          | 	byte	$00[17]
2fe09 1a6 FF 00 00 0C 
2fe0d 1a7 18 00 00 00 
2fe11 1a8 00 00 00 00 
2fe15 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe19 1aa 00 00 00 00 
2fe1d 1ab 00 00 00 00 
2fe21 1ac 00          | 	byte	$00[9]
2fe22 1ac 1E 30 3E 33 
2fe26 1ad 33 33 6E 00 
2fe2a 1ae 00 00 00 00 
2fe2e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2fe32 1b0 1E 36 66 66 
2fe36 1b1 66 66 3E 00 
2fe3a 1b2 00 00 00 00 
2fe3e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe42 1b4 3E 63 03 03 
2fe46 1b5 03 63 3E 00 
2fe4a 1b6 00 00 00 00 
2fe4e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2fe52 1b8 3C 36 33 33 
2fe56 1b9 33 33 6E 00 
2fe5a 1ba 00 00 00 00 
2fe5e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe62 1bc 3E 63 7F 03 
2fe66 1bd 03 63 3E 00 
2fe6a 1be 00 00 00 00 
2fe6e 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2fe72 1c0 0C 1E 0C 0C 
2fe76 1c1 0C 0C 1E 00 
2fe7a 1c2 00 00 00 00 
2fe7e 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe82 1c4 6E 33 33 33 
2fe86 1c5 33 33 3E 30 
2fe8a 1c6 33 1E 00 00 
2fe8e 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2fe92 1c8 36 6E 66 66 
2fe96 1c9 66 66 67 00 
2fe9a 1ca 00 00 00 00 
2fe9e 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2fea2 1cc 1C 18 18 18 
2fea6 1cd 18 18 3C 00 
2feaa 1ce 00 00 00 00 
2feae 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2feb2 1d0 70 60 60 60 
2feb6 1d1 60 60 60 66 
2feba 1d2 66 3C 00 00 
2febe 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2fec2 1d4 66 36 1E 1E 
2fec6 1d5 36 66 67 00 
2feca 1d6 00 00 00 00 
2fece 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2fed2 1d8 18 18 18 18 
2fed6 1d9 18 18       | 	byte	$18[6]
2fed8 1da 3C 00 00 00 
2fedc 1db 00 00 00 00 
2fee0 1dc 00 00 37 7F 
2fee4 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2fee8 1de 63 00 00 00 
2feec 1df 00 00 00 00 
2fef0 1e0 00 00 3B 66 
2fef4 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2fef8 1e2 66 00 00 00 
2fefc 1e3 00 00 00 00 
2ff00 1e4 00 00 3E 63 
2ff04 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2ff08 1e6 3E 00 00 00 
2ff0c 1e7 00 00 00 00 
2ff10 1e8 00 00 3B 66 
2ff14 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2ff18 1ea 3E 06 06 0F 
2ff1c 1eb 00 00 00 00 
2ff20 1ec 00 00 6E 33 
2ff24 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2ff28 1ee 3E 30 30 78 
2ff2c 1ef 00 00 00 00 
2ff30 1f0 00 00 3B 6E 
2ff34 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2ff38 1f2 0F 00 00 00 
2ff3c 1f3 00 00 00 00 
2ff40 1f4 00 00 3E 63 
2ff44 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2ff48 1f6 3E 00 00 00 
2ff4c 1f7 00 00 00 08 
2ff50 1f8 0C 0C 3F 0C 
2ff54 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2ff58 1fa 38 00 00 00 
2ff5c 1fb 00 00 00 00 
2ff60 1fc 00 00 33 33 
2ff64 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2ff68 1fe 6E 00 00 00 
2ff6c 1ff 00 00 00 00 
2ff70 200 00 00 63 63 
2ff74 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2ff78 202 1C 00 00 00 
2ff7c 203 00 00 00 00 
2ff80 204 00 00 63 63 
2ff84 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2ff88 206 36 00 00 00 
2ff8c 207 00 00 00 00 
2ff90 208 00 00 63 36 
2ff94 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2ff98 20a 63 00 00 00 
2ff9c 20b 00 00 00 00 
2ffa0 20c 00 00 63 63 
2ffa4 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2ffa8 20e 7E 60 30 1F 
2ffac 20f 00 00 00 00 
2ffb0 210 00 00 7F 33 
2ffb4 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2ffb8 212 7F 00 00 00 
2ffbc 213 00 00 00 70 
2ffc0 214 18 18 18 0E 
2ffc4 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2ffc8 216 70 00 00 00 
2ffcc 217 00 00 00 18 
2ffd0 218 18 18 18 18 
2ffd4 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2ffd8 21a 18 00 00 00 
2ffdc 21b 00 00 00 0E 
2ffe0 21c 18 18 18 70 
2ffe4 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2ffe8 21e 0E 00 00 00 
2ffec 21f 6E 3B 00 00 
2fff0 220 00 00 00 00 
2fff4 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fff8 222 00 00 00 00 
2fffc 223 00 00 00 00 
30000 224 00 00       | 	byte	$00[10]
30002 224 08 1C 36 63 
30006 225 63 63 7F 00 
3000a 226 00 00 00 00 
3000e 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
30012 228 03 03 03 03 
30016 229 43 66 3C 18 
3001a 22a 30 1E 00 00 
3001e 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
30022 22c 33 33 33 33 
30026 22d 33 33       | 	byte	$33[6]
30028 22e 6E 00 00 00 
3002c 22f 00 00 60 30 
30030 230 18 00 3E 63 
30034 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
30038 232 3E 00 00 00 
3003c 233 00 00 08 1C 
30040 234 36 00 1E 30 
30044 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
30048 236 6E 00 00 00 
3004c 237 00 00 00 00 
30050 238 33 00 1E 30 
30054 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
30058 23a 6E 00 00 00 
3005c 23b 00 00 1C 36 
30060 23c 1C 00 33 33 
30064 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
30068 23e 6E 00 00 00 
3006c 23f 00 00 60 30 
30070 240 18 00 3E 63 
30074 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
30078 242 3E 00 00 00 
3007c 243 00 00 00 00 
30080 244 00 00 3E 63 
30084 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
30088 246 3E 18 30 1E 
3008c 247 00 00 00 1C 
30090 248 58 78 38 18 
30094 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
30098 24a 3C 00 00 00 
3009c 24b 00 00 00 00 
300a0 24c 63 00 3E 63 
300a4 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
300a8 24e 3E 00 00 00 
300ac 24f 66 33 00 3E 
300b0 250 63 63 63 63 
300b4 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
300b8 252 3E 00 00 00 
300bc 253 00 00 CC 66 
300c0 254 33 00 3E 63 
300c4 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
300c8 256 3E 00 00 00 
300cc 257 00 00 18 3C 
300d0 258 66 00 1C 18 
300d4 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
300d8 25a 3C 00 00 00 
300dc 25b 30 18 00 7F 
300e0 25c 63 61 30 18 
300e4 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
300e8 25e 7F 00 00 00 
300ec 25f 00 63 00 08 
300f0 260 1C 36 63 63 
300f4 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
300f8 262 63 00 00 00 
300fc 263 30 18 00 3C 
30100 264 66 43 03 03 
30104 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
30108 266 3C 00 00 00 
3010c 267 30 18 00 7F 
30110 268 66 46 16 1E 
30114 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
30118 26a 7F 00 00 00 
3011c 26b 0C 06 00 0F 
30120 26c 06 06 06 06 
30124 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
30128 26e 7F 00 00 00 
3012c 26f 30 18 00 1C 
30130 270 18 18 18 18 
30134 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
30138 272 3C 00 00 00 
3013c 273 00 00 08 1C 
30140 274 36 00 3E 63 
30144 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
30148 276 3E 00 00 00 
3014c 277 00 00 00 00 
30150 278 63 00 3E 63 
30154 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
30158 27a 3E 00 00 00 
3015c 27b 00 00 00 6F 
30160 27c 46 26 06 06 
30164 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
30168 27e 7F 00 00 00 
3016c 27f 00 00 00 6E 
30170 280 4C 2C 0C 0C 
30174 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
30178 282 1E 00 00 00 
3017c 283 30 18 00 3E 
30180 284 63 63 06 1C 
30184 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
30188 286 3E 00 00 00 
3018c 287 00 00 60 30 
30190 288 18 00 3E 63 
30194 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
30198 28a 3E 00 00 00 
3019c 28b 00 63 00 3E 
301a0 28c 63 63 63 63 
301a4 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
301a8 28e 3E 00 00 00 
301ac 28f 00 63 00 63 
301b0 290 63 63 63 63 
301b4 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
301b8 292 3E 00 00 00 
301bc 293 6C 38 00 7E 
301c0 294 7E 5A 18 18 
301c4 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
301c8 296 3C 00 00 00 
301cc 297 00 00 60 48 
301d0 298 2C 0C 3F 0C 
301d4 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
301d8 29a 38 00 00 00 
301dc 29b 00 00 00 0F 
301e0 29c 26 36 1E 0E 
301e4 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
301e8 29e 7F 00 00 00 
301ec 29f 00 00 00 00 
301f0 2a0 00 63 36 1C 
301f4 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
301f8 2a2 00 00 00 00 
301fc 2a3 00 00       | 	byte	$00[6]
301fe 2a3 36 1C 08 00 
30202 2a4 3E 63 03 03 
30206 2a5 03 63 3E 00 
3020a 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3020e 2a7 30 18 0C 00 
30212 2a8 1E 30 3E 33 
30216 2a9 33 33 6E 00 
3021a 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3021e 2ab 60 30 18 00 
30222 2ac 1C 18 18 18 
30226 2ad 18 18 3C 00 
3022a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3022e 2af 60 30 18 00 
30232 2b0 3E 63 63 63 
30236 2b1 63 63 3E 00 
3023a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3023e 2b3 30 18 0C 00 
30242 2b4 33 33 33 33 
30246 2b5 33 33 6E 00 
3024a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3024e 2b7 00 08 1C 36 
30252 2b8 63 63 7F 63 
30256 2b9 63 63 63 18 
3025a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3025e 2bb 00 00 00 00 
30262 2bc 1E 30 3E 33 
30266 2bd 33 33 6E 18 
3026a 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3026e 2bf 00 7F 63 61 
30272 2c0 30 18 0C 06 
30276 2c1 43 63 7F 00 
3027a 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3027e 2c3 36 1C 08 00 
30282 2c4 7F 33 18 0C 
30286 2c5 06 63 7F 00 
3028a 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3028e 2c7 00 7F 66 46 
30292 2c8 16 1E 16 06 
30296 2c9 46 66 7F 18 
3029a 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3029e 2cb 00 00 00 00 
302a2 2cc 3E 63 7F 03 
302a6 2cd 03 63 3E 18 
302aa 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
302ae 2cf 00 3C 66 03 
302b2 2d0 1F 03 0F 03 
302b6 2d1 03 66 3C 00 
302ba 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
302be 2d3 60 30 18 00 
302c2 2d4 7F 33 18 0C 
302c6 2d5 06 63 7F 00 
302ca 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
302ce 2d7 00 3C 66 43 
302d2 2d8 03 03 03 03 
302d6 2d9 43 66 3C 00 
302da 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
302de 2db 00 00 00 00 
302e2 2dc 3E 63 06 1C 
302e6 2dd 30 63 3E 18 
302ea 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
302ee 2df 00 00 00 00 
302f2 2e0 00 00       | 	byte	$00[6]
302f4 2e1 6C 36 1B 36 
302f8 2e2 6C 00 00 00 
302fc 2e3 00 00 00 00 
30300 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30304 2e5 1B 36 6C 36 
30308 2e6 1B 00 00 00 
3030c 2e7 88 22 88 22 
30310 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
30314 2e9 88 22 88 22 
30318 2ea 88 22 88 22 
3031c 2eb AA 55 AA 55 
30320 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
30324 2ed AA 55 AA 55 
30328 2ee AA 55 AA 55 
3032c 2ef BB EE BB EE 
30330 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
30334 2f1 BB EE BB EE 
30338 2f2 BB EE BB EE 
3033c 2f3 18 18 18 18 
30340 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
30344 2f5 18 18 18 18 
30348 2f6 18 18 18 18 
3034c 2f7 18 18 18 18 
30350 2f8 18 18 18    | 	byte	$18[15]
30353 2f8 1F 18 18 18 
30357 2f9 18 18 18 18 
3035b 2fa 18 30 18 00 
3035f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
30363 2fc 63 7F 63 63 
30367 2fd 63 63 00 00 
3036b 2fe 00 1C 36 00 
3036f 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
30373 300 63 7F 63 63 
30377 301 63 63 00 00 
3037b 302 00 36 1C 00 
3037f 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
30383 304 1E 16 06 46 
30387 305 66 7F 00 00 
3038b 306 00 00 00 00 
3038f 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
30393 308 1C 30 60 63 
30397 309 63 3E 18 30 
3039b 30a 1E 6C 6C 6C 
3039f 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
303a3 30c 6F 6C 6C 6C 
303a7 30d 6C 6C 6C 6C 
303ab 30e 6C 6C 6C 6C 
303af 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
303b3 310 6C 6C 6C 6C 
303b7 311 6C 6C 6C 6C 
303bb 312 6C          | 	byte	$6c[9]
303bc 313 00 00 00 00 
303c0 314 00          | 	byte	$00[5]
303c1 314 7F 60 6F 6C 
303c5 315 6C 6C 6C 6C 
303c9 316 6C 6C 6C 6C 
303cd 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
303d1 318 6F 60 7F 00 
303d5 319 00 00 00 00 
303d9 31a 00 00 00 18 
303dd 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
303e1 31c 61 30 18 0C 
303e5 31d 06 43 63 7F 
303e9 31e 00 00 00 00 
303ed 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
303f1 320 00 7F 33 18 
303f5 321 0C 06 63 7F 
303f9 322 00 00 00 00 
303fd 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
30401 324 00 00 1F 18 
30405 325 18 18 18 18 
30409 326 18 18 18 18 
3040d 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30411 328 18 18 F8 00 
30415 329 00 00 00 00 
30419 32a 00 00 00 18 
3041d 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
30421 32c 18 18 FF 00 
30425 32d 00 00 00 00 
30429 32e 00 00 00 00 
3042d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30431 330 00 00 FF 18 
30435 331 18 18 18 18 
30439 332 18 18 18 18 
3043d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30441 334 18 18 F8 18 
30445 335 18 18 18 18 
30449 336 18 18 18 00 
3044d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
30451 338 00 00 FF 00 
30455 339 00 00 00 00 
30459 33a 00 00 00 18 
3045d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
30461 33c 18 18 FF 18 
30465 33d 18 18 18 18 
30469 33e 18 18 18 63 
3046d 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
30471 340 36 63 63 7F 
30475 341 63 63 63 63 
30479 342 00 00 00 00 
3047d 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
30481 344 00 1E 30 3E 
30485 345 33 33 33 6E 
30489 346 00 00 00 6C 
3048d 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
30491 348 EC 0C FC 00 
30495 349 00 00 00 00 
30499 34a 00 00 00 00 
3049d 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
304a1 34c FC 0C EC 6C 
304a5 34d 6C 6C 6C 6C 
304a9 34e 6C 6C 6C 6C 
304ad 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
304b1 350 EF 00 FF 00 
304b5 351 00 00 00 00 
304b9 352 00 00 00 00 
304bd 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
304c1 354 FF 00 EF 6C 
304c5 355 6C 6C 6C 6C 
304c9 356 6C 6C 6C 6C 
304cd 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
304d1 358 EC 0C EC 6C 
304d5 359 6C 6C 6C 6C 
304d9 35a 6C 6C 6C 00 
304dd 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
304e1 35c FF 00 FF 00 
304e5 35d 00 00 00 00 
304e9 35e 00 00 00 6C 
304ed 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
304f1 360 EF 00 EF 6C 
304f5 361 6C 6C 6C 6C 
304f9 362 6C 6C 6C 00 
304fd 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
30501 364 63 3E 63 63 
30505 365 63 63 3E 63 
30509 366 00 00 00 00 
3050d 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
30511 368 30 3C 36 33 
30515 369 33 33 33 6E 
30519 36a 00 00 00 00 
3051d 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
30521 36c 66 66 6F 66 
30525 36d 66 66 36 1F 
30529 36e 00 00 00 36 
3052d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
30531 370 66 66 66 66 
30535 371 66 66       | 	byte	$66[6]
30537 371 36 1F 00 00 
3053b 372 00 00 63 00 
3053f 373 7F 66 46 16 
30543 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
30547 375 66 7F 00 00 
3054b 376 00 6C 38 00 
3054f 377 38 30 30 3C 
30553 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
30557 379 33 6E 00 00 
3055b 37a 00 36 1C 00 
3055f 37b 63 67 6F 7F 
30563 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
30567 37d 63 63 00 00 
3056b 37e 00 30 18 00 
3056f 37f 3C 18 18 18 
30573 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
30577 381 18 3C 00 00 
3057b 382 00 3C 66 00 
3057f 383 3C 18 18 18 
30583 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
30587 385 18 3C 00 00 
3058b 386 00 00 00 36 
3058f 387 1C 08 00 3E 
30593 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
30597 389 63 3E 00 00 
3059b 38a 00 18 18 18 
3059f 38b 18 18 18 18 
305a3 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
305a7 38d 00 00 00 00 
305ab 38e 00 00 00 00 
305af 38f 00 00 00 00 | 	byte	$00[12]
305b3 390 F8 18 18 18 
305b7 391 18 18 18 18 
305bb 392 18 FF FF FF 
305bf 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
305c3 394 FF FF FF FF 
305c7 395 FF FF FF FF 
305cb 396 FF          | 	byte	$ff[9]
305cc 397 00 00 00 00 
305d0 398 00 00 00    | 	byte	$00[7]
305d3 398 FF FF FF FF 
305d7 399 FF FF FF FF 
305db 39a FF          | 	byte	$ff[9]
305dc 39b 00 00 00 7E 
305e0 39c 7E 5A 18 18 
305e4 39d 18 18 18 18 
305e8 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
305ec 39f 1C 36 1C 63 
305f0 3a0 63 63 63 63 
305f4 3a1 63 63 63 63 
305f8 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
305fc 3a3 FF FF FF FF 
30600 3a4 FF FF FF    | 	byte	$ff[7]
30603 3a4 00 00 00 00 
30607 3a5 00 00 00 00 
3060b 3a6 00          | 	byte	$00[9]
3060c 3a7 30 18 00 3E 
30610 3a8 63 63 63 63 
30614 3a9 63 63 63 63 
30618 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3061c 3ab 00 00 00 1E 
30620 3ac 33 33 33 1B 
30624 3ad 33 63 63 63 
30628 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3062c 3af 1C 36 00 3E 
30630 3b0 63 63 63 63 
30634 3b1 63 63 63 63 
30638 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3063c 3b3 30 18 00 63 
30640 3b4 67 6F 7F 7B 
30644 3b5 73 63 63 63 
30648 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3064c 3b7 00 00 60 30 
30650 3b8 18 00 3B 66 
30654 3b9 66 66 66 66 
30658 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3065c 3bb 00 00 36 1C 
30660 3bc 08 00 3B 66 
30664 3bd 66 66 66 66 
30668 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3066c 3bf 36 1C 00 3E 
30670 3c0 63 63 06 1C 
30674 3c1 30 60 63 63 
30678 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3067c 3c3 00 00 36 1C 
30680 3c4 08 00 3E 63 
30684 3c5 06 1C 30 63 
30688 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3068c 3c7 30 18 00 3F 
30690 3c8 66 66 66 3E 
30694 3c9 36 66 66 66 
30698 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3069c 3cb 30 18 00 63 
306a0 3cc 63 63 63 63 
306a4 3cd 63 63 63 63 
306a8 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
306ac 3cf 00 00 60 30 
306b0 3d0 18 00 3B 6E 
306b4 3d1 66 06 06 06 
306b8 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
306bc 3d3 66 33 00 63 
306c0 3d4 63 63 63 63 
306c4 3d5 63 63 63 63 
306c8 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
306cc 3d7 00 00 60 30 
306d0 3d8 18 00 63 63 
306d4 3d9 63 63 63 63 
306d8 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
306dc 3db 30 18 00 66 
306e0 3dc 66 66 66 3C 
306e4 3dd 18 18 18 18 
306e8 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
306ec 3df 00 00 00 08 
306f0 3e0 0C 0C 3F 0C 
306f4 3e1 0C 0C 0C 6C 
306f8 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
306fc 3e3 30 18 00 00 
30700 3e4 00 00 00 00 
30704 3e5 00 00 00 00 
30708 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3070c 3e7 00 00 00 00 
30710 3e8 00 00 00 00 | 	byte	$00[8]
30714 3e9 7F 00 00 00 
30718 3ea 00 00 00 00 
3071c 3eb 66 33 00 00 
30720 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
30724 3ed 00 00 00 00 
30728 3ee 00 00 00 00 
3072c 3ef 00 00 00 00 
30730 3f0 00 00 00 00 
30734 3f1 00 00 00 00 
30738 3f2 00          | 	byte	$00[21]
30739 3f2 0C 06 3C 36 
3073d 3f3 1C 00 00 00 
30741 3f4 00 00 00 00 
30745 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30749 3f6 00 00 00 63 
3074d 3f7 3E 00 00 00 
30751 3f8 00 00 00 00 
30755 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30759 3fa 00 00 00 00 
3075d 3fb 3E 63 06 1C 
30761 3fc 36 63 63 36 
30765 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
30769 3fe 00 00 00 00 
3076d 3ff 00 00 00 00 | 	byte	$00[8]
30771 400 18 00 7E 00 
30775 401 18 00 00 00 
30779 402 00 00 00 00 
3077d 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30781 404 00 00 00 00 
30785 405 00 00 00 00 | 	byte	$00[8]
30789 406 18 30 1E 00 
3078d 407 00 00 1C 36 
30791 408 36 1C 00 00 
30795 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
30799 40a 00 00 00 00 
3079d 40b 63 00 00 00 
307a1 40c 00 00 00 00 
307a5 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
307a9 40e 00 00 00 18 
307ad 40f 18 00 00 00 
307b1 410 00 00 00 00 
307b5 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
307b9 412 00 00 00 00 
307bd 413 00          | 	byte	$00[5]
307be 413 CC 66 33 00 
307c2 414 33 33 33 33 
307c6 415 33 33 6E 00 
307ca 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
307ce 417 00 3F 66 66 
307d2 418 66 3E 36 66 
307d6 419 66 66 6F 00 
307da 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
307de 41b 36 1C 08 00 
307e2 41c 3B 6E 66 06 
307e6 41d 06 06 0F 00 
307ea 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
307ee 41f 00 00 00 7E 
307f2 420 7E 7E 7E 7E 
307f6 421 7E 7E 00 00 
307fa 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
307fe 423 00 00 00 00 
30802 424 00 00 00 00 
30806 425 00 00 00 00 
3080a 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3080c 427             | 'vga_font       file "vgafont.def"
3080c 427 00 00 00 00 
      ...             
3083c 433 00 00 00 00 
30840 434 00 00 00    | st_font        file "st4font.def"
30843 434 FF FF 00 00 
30847 435 00 00 00 00 
3084b 436 00 18 18 18 
3084f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30853 438 18 18 18 18 
30857 439 18 18 18 18 
3085b 43a 18          | 	byte	$18[9]
3085c 43b 00 00 00 00 
30860 43c 00 00 00    | 	byte	$00[7]
30863 43c FF FF 18 18 
30867 43d 18 18 18 18 
3086b 43e 18 18 18 18 
3086f 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30873 440 FF FF 00 00 
30877 441 00 00 00 00 
3087b 442 00 18 18 18 
3087f 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30883 444 1F 1F 18 18 
30887 445 18 18 18 18 
3088b 446 18 18 18 18 
3088f 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30893 448 F8 F8 18 18 
30897 449 18 18 18 18 
3089b 44a 18 00 00 00 
3089f 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
308a3 44c 1F 1F 18 18 
308a7 44d 18 18 18 18 
308ab 44e 18 00 00 00 
308af 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
308b3 450 F8 F8 18 18 
308b7 451 18 18 18 18 
308bb 452 18 18 18 18 
308bf 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
308c3 454 1F 1F 00 00 
308c7 455 00 00 00 00 
308cb 456 00 18 18 18 
308cf 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
308d3 458 F8 F8 00 00 
308d7 459 00 00 00 00 
308db 45a 00 18 18 18 
308df 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
308e3 45c FF FF 18 18 
308e7 45d 18 18 18 18 
308eb 45e 18 00 00 18 
308ef 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
308f3 460 66 7E 7E 66 
308f7 461 66 66 66 30 
308fb 462 18 00 00 7E 
308ff 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
30903 464 3E 06 06 06 
30907 465 06 7E 7E 18 
3090b 466 0C 30 18 3C 
3090f 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
30913 468 06 06 06 66 
30917 469 66 7E 3C 00 
3091b 46a 00 30 18 66 
3091f 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
30923 46c 7E 7E 76 76 
30927 46d 66 66 66 00 
3092b 46e 00 30 18 7C 
3092f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
30933 470 1C 38 70 60 
30937 471 60 7E 3E 00 
3093b 472 00 30 18 7E 
3093f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
30943 474 18 0C 0C 06 
30947 475 06 7E 7E 00 
3094b 476 00 18 18 00 
3094f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
30953 478 18 18 0C 0C 
30957 479 06 7E 7E 00 
3095b 47a 00 30 18 3C 
3095f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
30963 47c 66 66 66 66 
30967 47d 66          | 	byte	$66[5]
30968 47e 7E 3C 00 00 
3096c 47f 00 00 06 06 
30970 480 06 06 16 1E 
30974 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
30978 482 7E 7E 00 00 
3097c 483 00 00 00 00 
30980 484 00 3C 7C 60 
30984 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
30988 486 7E 7C 30 18 
3098c 487 00 00 00 00 
30990 488 00 3C 7E 66 
30994 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
30998 48a 7E 7C 18 0C 
3099c 48b 00 00 30 18 
309a0 48c 00 3C 3E 06 
309a4 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
309a8 48e 7E 7C 00 00 
309ac 48f 00 00 30 18 
309b0 490 00 3E 7E 66 
309b4 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
309b8 492 66 66 00 00 
309bc 493 00 00 30 18 
309c0 494 00 7C 7E 06 
309c4 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
309c8 496 7E 3E 00 00 
309cc 497 00 00 30 18 
309d0 498 00 7E 7E 30 
309d4 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
309d8 49a 7E 7E 00 00 
309dc 49b 00 00 18 18 
309e0 49c 00 7E 7E 30 
309e4 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
309e8 49e 7E 7E 00 00 
309ec 49f 00 00 30 18 
309f0 4a0 00 3C 7E 66 
309f4 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
309f8 4a2 7E 3C 00 00 
309fc 4a3 00 00 1C 1C 
30a00 4a4 18 18 38 3C 
30a04 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
30a08 4a6 3C 3C 00 00 
30a0c 4a7 00 00 00 00 
30a10 4a8 00 00 00 00 
30a14 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30a18 4aa 00 00 00 00 
30a1c 4ab 00 00       | 	byte	$00[6]
30a1e 4ab 18 18 18 18 
30a22 4ac 18 18 18 18 | 	byte	$18[8]
30a26 4ad 00 00 18 18 
30a2a 4ae 00 00 00 00 
30a2e 4af 66 66 66 66 
30a32 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
30a36 4b1 00 00 00 00 
30a3a 4b2 00 00 00 00 
30a3e 4b3 00          | 	byte	$00[9]
30a3f 4b3 66 66 FF FF 
30a43 4b4 66 66 FF FF 
30a47 4b5 66 66 00 00 
30a4b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
30a4f 4b7 7C 7E 06 06 
30a53 4b8 3E 7C 60 60 
30a57 4b9 7E 3E 18 18 
30a5b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
30a5f 4bb 66 30 30 18 
30a63 4bc 18 0C 0C 66 
30a67 4bd 66 00 00 00 
30a6b 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
30a6f 4bf 66 66 3C 1C 
30a73 4c0 1C FC FE 66 
30a77 4c1 66 FE FC 00 
30a7b 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
30a7f 4c3 18 18 18 18 
30a83 4c4 00 00 00 00 
30a87 4c5 00 00 00 00 
30a8b 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
30a8f 4c7 18 1C 0C 0C 
30a93 4c8 0C 0C 0C 0C 
30a97 4c9 1C 18 30 00 
30a9b 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
30a9f 4cb 18 38 30 30 
30aa3 4cc 30 30 30 30 
30aa7 4cd 38 18 0C 00 
30aab 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
30aaf 4cf 66 66 3C 3C 
30ab3 4d0 FF FF 3C 3C 
30ab7 4d1 66 66 00 00 
30abb 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
30abf 4d3 00 18 18 18 
30ac3 4d4 7E 7E 18 18 
30ac7 4d5 18 00 00 00 
30acb 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30acf 4d7 00 00 00 00 
30ad3 4d8 00 00       | 	byte	$00[6]
30ad5 4d9 18 18 18 18 
30ad9 4da 18          | 	byte	$18[5]
30ada 4da 0C 04 00 00 
30ade 4db 00 00 00 00 
30ae2 4dc 7E 7E 00 00 
30ae6 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
30aea 4de 00 00 00 00 
30aee 4df 00 00 00 00 
30af2 4e0 00 00 00 00 
30af6 4e1 00          | 	byte	$00[13]
30af7 4e1 18 18 18 00 
30afb 4e2 00 00 00 60 
30aff 4e3 60 60 30 30 
30b03 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
30b07 4e5 06 06 06 00 
30b0b 4e6 00 00 00 3C 
30b0f 4e7 7E 66 66 66 
30b13 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
30b17 4e9 66 7E 3C 00 
30b1b 4ea 00 00 00 18 
30b1f 4eb 18 1C 1C 18 
30b23 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
30b27 4ed 18 7E 7E 00 
30b2b 4ee 00 00 00 3C 
30b2f 4ef 7E 66 66 30 
30b33 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
30b37 4f1 0C 7E 7E 00 
30b3b 4f2 00 00 00 7E 
30b3f 4f3 7E 30 30 18 
30b43 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
30b47 4f5 66 7E 3C 00 
30b4b 4f6 00 00 00 30 
30b4f 4f7 30 38 38 3C 
30b53 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
30b57 4f9 7E 30 30 00 
30b5b 4fa 00 00 00 7E 
30b5f 4fb 7E 06 06 3E 
30b63 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
30b67 4fd 66 7E 3C 00 
30b6b 4fe 00 00 00 38 
30b6f 4ff 3C 0E 06 06 
30b73 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
30b77 501 66 7E 3C 00 
30b7b 502 00 00 00 7E 
30b7f 503 7E 60 60 30 
30b83 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
30b87 505 0C 0C 0C 00 
30b8b 506 00 00 00 3C 
30b8f 507 7E 66 66 3C 
30b93 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
30b97 509 66 7E 3C 00 
30b9b 50a 00 00 00 3C 
30b9f 50b 7E 66 66 7E 
30ba3 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
30ba7 50d 70 3C 1C 00 
30bab 50e 00 00 00 00 
30baf 50f 00 00 18 18 
30bb3 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
30bb7 511 18 18 18 00 
30bbb 512 00 00 00 00 
30bbf 513 00 00 18 18 
30bc3 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
30bc7 515 18 18 18 0C 
30bcb 516 04 00 00 00 
30bcf 517 70 38 1C 0E 
30bd3 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
30bd7 519 70 00 00 00 
30bdb 51a 00 00 00 00 
30bdf 51b 00 00 7E 7E 
30be3 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
30be7 51d 00 00 00 00 
30beb 51e 00 00 00 00 | 	byte	$00[8]
30bef 51f 0E 1C 38 70 
30bf3 520 E0 70 38 1C 
30bf7 521 0E 00 00 00 
30bfb 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
30bff 523 7E 66 66 30 
30c03 524 30 18 18 18 
30c07 525 00 18 18 00 
30c0b 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
30c0f 527 7E 66 66 66 
30c13 528 66 36 06 66 
30c17 529 66 7E 3C 00 
30c1b 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
30c1f 52b 3C 7E 66 66 
30c23 52c 66 7E 7E 66 
30c27 52d 66 66 66 00 
30c2b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
30c2f 52f 7E 66 66 7E 
30c33 530 3E 66 66 66 
30c37 531 66 7E 3E 00 
30c3b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
30c3f 533 7E 66 66 06 
30c43 534 06 06 06 66 
30c47 535 66 7E 3C 00 
30c4b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
30c4f 537 7E 66 66 66 
30c53 538 66 66 66 66 
30c57 539 66 7E 3E 00 
30c5b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
30c5f 53b 7E 06 06 3E 
30c63 53c 3E 06 06 06 
30c67 53d 06 7E 7E 00 
30c6b 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
30c6f 53f 7E 06 06 3E 
30c73 540 3E 06 06 06 
30c77 541 06 06 06 00 
30c7b 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
30c7f 543 7E 06 06 76 
30c83 544 76 66 66 66 
30c87 545 66 7E 3C 00 
30c8b 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
30c8f 547 66 66 66 7E 
30c93 548 7E 66 66 66 
30c97 549 66 66 66 00 
30c9b 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
30c9f 54b 7E 18 18 18 
30ca3 54c 18 18 18 18 
30ca7 54d 18 7E 7E 00 
30cab 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
30caf 54f 60 60 60 60 
30cb3 550 60 60 60    | 	byte	$60[7]
30cb6 551 66 66 7E 3C 
30cba 552 00 00 00 00 
30cbe 553 66 66 36 36 
30cc2 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
30cc6 555 66 66 C6 C6 
30cca 556 00 00 00 00 
30cce 557 06 06 06 06 
30cd2 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
30cd6 559 06 06 7E 7E 
30cda 55a 00 00 00 00 
30cde 55b C6 C6 EE EE 
30ce2 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
30ce6 55d C6 C6 C6 C6 
30cea 55e 00 00 00 00 
30cee 55f 66 66 66 6E 
30cf2 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
30cf6 561 76 66 66 66 
30cfa 562 00 00 00 00 
30cfe 563 3C 7E 66 66 
30d02 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
30d06 565 66 66 7E 3C 
30d0a 566 00 00 00 00 
30d0e 567 3E 7E 66 66 
30d12 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
30d16 569 06 06 06 06 
30d1a 56a 00 00 00 00 
30d1e 56b 3C 7E 66 66 
30d22 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
30d26 56d 66 56 3E 6C 
30d2a 56e 00 00 00 00 
30d2e 56f 3E 7E 66 66 
30d32 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
30d36 571 66 66 C6 C6 
30d3a 572 00 00 00 00 
30d3e 573 7C 7E 06 06 
30d42 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
30d46 575 60 60 7E 3E 
30d4a 576 00 00 00 00 
30d4e 577 7E 7E 18 18 
30d52 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
30d56 579 18 18 18 18 
30d5a 57a 00 00 00 00 
30d5e 57b 66 66 66 66 
30d62 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
30d66 57d 66 66 7E 3C 
30d6a 57e 00 00 00 00 
30d6e 57f 66 66 66 66 
30d72 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
30d76 581 3C 3C 18 18 
30d7a 582 00 00 00 00 
30d7e 583 C6 C6 C6 C6 
30d82 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
30d86 585 FE EE C6 82 
30d8a 586 00 00 00 00 
30d8e 587 66 66 66 3C 
30d92 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
30d96 589 3C 66 66 66 
30d9a 58a 00 00 00 00 
30d9e 58b 66 66 66 66 
30da2 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
30da6 58d 18 18 18 18 
30daa 58e 00 00 00 00 
30dae 58f 7E 7E 30 30 
30db2 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
30db6 591 06 06 7E 7E 
30dba 592 00 00 00 00 
30dbe 593 3C 3C 0C 0C 
30dc2 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
30dc6 595 0C 0C 3C 3C 
30dca 596 00 00 00 00 
30dce 597 06 06 0C 0C 
30dd2 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
30dd6 599 60 60 C0 C0 
30dda 59a 00 00 00 00 
30dde 59b 3C 3C 30 30 
30de2 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
30de6 59d 30 30 3C 3C 
30dea 59e 00 00 00 00 
30dee 59f 18 18 3C 3C 
30df2 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
30df6 5a1 00 00 00 00 
30dfa 5a2 00 00 00 00 
30dfe 5a3 00 00 00 00 
30e02 5a4 00 00 00 00 
30e06 5a5 00 00       | 	byte	$00[18]
30e08 5a6 FE FE 00 00 
30e0c 5a7 00 00 0C 0C 
30e10 5a8 18 18 00 00 
30e14 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
30e18 5aa 00 00 00 00 
30e1c 5ab 00 00 00 00 
30e20 5ac 00          | 	byte	$00[9]
30e21 5ac 3C 7C 60 7C 
30e25 5ad 7E 66 66 7E 
30e29 5ae 7C 00 00 00 
30e2d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
30e31 5b0 3E 7E 66 66 
30e35 5b1 66 66 66 7E 
30e39 5b2 3E 00 00 00 
30e3d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
30e41 5b4 3C 3E 06 06 
30e45 5b5 06 06 06 7E 
30e49 5b6 7C 00 00 00 
30e4d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
30e51 5b8 7C 7E 66 66 
30e55 5b9 66 66 66 7E 
30e59 5ba 7C 00 00 00 
30e5d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
30e61 5bc 3C 7E 66 66 
30e65 5bd 7E 06 06 7E 
30e69 5be 7C 00 00 00 
30e6d 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
30e71 5c0 18 7E 7E 18 
30e75 5c1 18 18 18 18 
30e79 5c2 18 00 00 00 
30e7d 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30e81 5c4 7C 7E 66 66 
30e85 5c5 66 66 7E 7C 
30e89 5c6 60 7E 3E 00 
30e8d 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
30e91 5c8 3E 7E 66 66 
30e95 5c9 66 66 66 66 
30e99 5ca 66 00 00 00 
30e9d 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
30ea1 5cc 1C 1C 18 18 
30ea5 5cd 18 18 18 3C 
30ea9 5ce 3C 00 00 00 
30ead 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
30eb1 5d0 30 30 30 30 
30eb5 5d1 30 30 30 30 
30eb9 5d2 30          | 	byte	$30[9]
30eba 5d2 3E 1E 00 00 
30ebe 5d3 06 06 06 36 
30ec2 5d4 36 1E 1E 1E 
30ec6 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
30eca 5d6 00 00 00 00 
30ece 5d7 1C 1C 18 18 
30ed2 5d8 18 18 18 18 
30ed6 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
30eda 5da 00 00 00 00 
30ede 5db 00 00 00    | 	byte	$00[7]
30ee1 5dc 6C FE FE D6 
30ee5 5dd D6 C6 C6 C6 
30ee9 5de C6 00 00 00 
30eed 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
30ef1 5e0 3E 7E 66 66 
30ef5 5e1 66 66 66 66 
30ef9 5e2 66 00 00 00 
30efd 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
30f01 5e4 3C 7E 66 66 
30f05 5e5 66 66 66 7E 
30f09 5e6 3C 00 00 00 
30f0d 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
30f11 5e8 3E 7E 66 66 
30f15 5e9 66 66 66 7E 
30f19 5ea 3E 06 06 00 
30f1d 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
30f21 5ec 7C 7E 66 66 
30f25 5ed 66 66 66 7E 
30f29 5ee 7C 60 60 00 
30f2d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
30f31 5f0 3E 7E 66 06 
30f35 5f1 06 06 06 06 
30f39 5f2 06 00 00 00 
30f3d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
30f41 5f4 7C 7E 06 0E 
30f45 5f5 3C 70 60 7E 
30f49 5f6 3E 00 00 00 
30f4d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
30f51 5f8 7E 7E 18 18 
30f55 5f9 18 18 18 78 
30f59 5fa 70 00 00 00 
30f5d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
30f61 5fc 66 66 66 66 
30f65 5fd 66 66 66    | 	byte	$66[7]
30f68 5fe 7E 7C 00 00 
30f6c 5ff 00 00 00 00 
30f70 600 00 66 66 66 
30f74 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
30f78 602 18 18 00 00 
30f7c 603 00 00 00 00 
30f80 604 00 C6 C6 D6 
30f84 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
30f88 606 C6 82 00 00 
30f8c 607 00 00 00 00 
30f90 608 00 66 66 3C 
30f94 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
30f98 60a 66 66 00 00 
30f9c 60b 00 00 00 00 
30fa0 60c 00 66 66 66 
30fa4 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
30fa8 60e 7C 60 7E 3E 
30fac 60f 00 00 00 00 
30fb0 610 00 7E 7E 30 
30fb4 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
30fb8 612 7E 7E 00 00 
30fbc 613 00 00 30 18 
30fc0 614 18 18 18 0C 
30fc4 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
30fc8 616 18 30 00 00 
30fcc 617 00 00 18 18 
30fd0 618 18 18 18 18 
30fd4 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30fd8 61a 18 18 00 00 
30fdc 61b 00 00 0C 18 
30fe0 61c 18 18 18 30 
30fe4 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
30fe8 61e 18 0C 00 00 
30fec 61f 00 00 6C 7E 
30ff0 620 36 00 00 00 
30ff4 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
30ff8 622 00 00 00 00 
30ffc 623 00 00 00 00 
31000 624 00          | 	byte	$00[9]
31001 624 18 18 18 18 
31005 625 18 18 00 00 
31009 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3100c 627             | 'amiga_font     file "amigafont.def"
3100c 627 00 6C FE FE 
31010 628 7C 38 10 00 
31014 629 18 18 18 F8 
31018 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3101c 62b C0 C0 C0 C0 
31020 62c C0 C0 C0 C0 | 	byte	$c0[8]
31024 62d 18 18 18 1F 
31028 62e 1F 00 00 00 
3102c 62f 18 18 18 1F 
31030 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
31034 631 00 00 00 1F 
31038 632 1F 18 18 18 
3103c 633 C0 E0 70 38 
31040 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
31044 635 03 07 0E 1C 
31048 636 38 70 E0 C0 
3104c 637 80 C0 E0 F0 
31050 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
31054 639 00 00 00 00 
31058 63a F0 F0 F0 F0 
3105c 63b 01 03 07 0F 
31060 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
31064 63d F0 F0 F0 F0 
31068 63e 00 00 00 00 
3106c 63f 0F 0F 0F 0F 
31070 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
31074 641 FF FF 00 00 
31078 642 00 00 00 00 
3107c 643 00 00 00 00 
31080 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
31084 645 00 00 00 00 
31088 646 0F 0F 0F 0F 
3108c 647 00 38 38 EE 
31090 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
31094 649 00 00 00 F8 
31098 64a F8 18 18 18 
3109c 64b 00 00 00 FF 
310a0 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
310a4 64d 18 18 18 FF 
310a8 64e FF 18 18 18 
310ac 64f 00 00 3C 7E 
310b0 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
310b4 651 00 00 00 00 
310b8 652 FF FF FF FF 
310bc 653 03 03 03 03 
310c0 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
310c4 655 00 00 00 FF 
310c8 656 FF 18 18 18 
310cc 657 18 18 18 FF 
310d0 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
310d4 659 0F 0F 0F 0F 
310d8 65a 0F 0F 0F 0F | 	byte	$0f[8]
310dc 65b 18 18 18 F8 
310e0 65c F8 00 00 00 
310e4 65d 1E 06 1E 06 
310e8 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
310ec 65f 00 18 3C 7E 
310f0 660 18 18 18 00 
310f4 661 00 18 18 18 
310f8 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
310fc 663 00 18 0C 7E 
31100 664 0C 18 00 00 
31104 665 00 18 30 7E 
31108 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3110c 667 00 00 00 00 
31110 668 00 00 00 00 
31114 669 00          | 	byte	$00[9]
31115 669 18 18 18 18 
31119 66a 00 18 00 00 
3111d 66b 66 66 66 00 
31121 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
31125 66d 66 FF 66 66 
31129 66e FF 66 00 18 
3112d 66f 7C 06 3C 60 
31131 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
31135 671 66 36 18 0C 
31139 672 66 62 00 38 
3113d 673 6C 38 1C F6 
31141 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
31145 675 18 18 18 00 
31149 676 00 00 00 00 
3114d 677 70 38 18 18 
31151 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
31155 679 0E 1C 18 18 
31159 67a 1C 0E 00 00 
3115d 67b 66 3C FF 3C 
31161 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
31165 67d 18 18 7E 18 
31169 67e 18 00 00 00 
3116d 67f 00 00 00 00 
31171 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
31175 681 00 00 7E 00 
31179 682 00 00 00 00 
3117d 683 00 00 00 00 
31181 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
31185 685 60 30 18 0C 
31189 686 06 02 00 00 
3118d 687 3C 66 76 6E 
31191 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
31195 689 18 1C 18 18 
31199 68a 18 7E 00 00 
3119d 68b 3C 66 30 18 
311a1 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
311a5 68d 7E 30 18 30 
311a9 68e 66 3C 00 00 
311ad 68f 30 38 3C 36 
311b1 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
311b5 691 7E 06 3E 60 
311b9 692 66 3C 00 00 
311bd 693 3C 06 3E 66 
311c1 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
311c5 695 7E 60 30 18 
311c9 696 0C 0C 00 00 
311cd 697 3C 66 3C 66 
311d1 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
311d5 699 3C 66 7C 60 
311d9 69a 30 1C 00 00 
311dd 69b 00 18 18 00 
311e1 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
311e5 69d 00 18 18 00 
311e9 69e 18 18 0C 60 
311ed 69f 30 18 0C 18 
311f1 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
311f5 6a1 00 7E 00 00 
311f9 6a2 7E 00 00 06 
311fd 6a3 0C 18 30 18 
31201 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
31205 6a5 3C 66 30 18 
31209 6a6 00 18 00 00 
3120d 6a7 3C 66 76 76 
31211 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
31215 6a9 18 3C 66 66 
31219 6aa 7E 66 00 00 
3121d 6ab 3E 66 3E 66 
31221 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
31225 6ad 3C 66 06 06 
31229 6ae 66 3C 00 00 
3122d 6af 1E 36 66 66 
31231 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
31235 6b1 7E 06 3E 06 
31239 6b2 06 7E 00 00 
3123d 6b3 7E 06 3E 06 
31241 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
31245 6b5 7C 06 06 76 
31249 6b6 66 7C 00 00 
3124d 6b7 66 66 7E 66 
31251 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
31255 6b9 7E 18 18 18 
31259 6ba 18 7E 00 00 
3125d 6bb 60 60 60 60 
31261 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
31265 6bd 66 36 1E 1E 
31269 6be 36 66 00 00 
3126d 6bf 06 06 06 06 
31271 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
31275 6c1 C6 EE FE D6 
31279 6c2 C6 C6 00 00 
3127d 6c3 66 6E 7E 7E 
31281 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
31285 6c5 3C 66 66 66 
31289 6c6 66 3C 00 00 
3128d 6c7 3E 66 66 3E 
31291 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
31295 6c9 3C 66 66 66 
31299 6ca 36 6C 00 00 
3129d 6cb 3E 66 66 3E 
312a1 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
312a5 6cd 3C 06 3C 60 
312a9 6ce 60 3C 00 00 
312ad 6cf 7E 18 18 18 
312b1 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
312b5 6d1 66 66 66 66 
312b9 6d2 66          | 	byte	$66[5]
312ba 6d2 7E 00 00 66 
312be 6d3 66 66 66 3C 
312c2 6d4 18 00 00 C6 
312c6 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
312ca 6d6 C6 00 00 66 
312ce 6d7 66 3C 3C 66 
312d2 6d8 66 00 00 66 
312d6 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
312da 6da 18 00 00 7E 
312de 6db 30 18 0C 06 
312e2 6dc 7E 00 00 78 
312e6 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
312ea 6de 78 00 00 02 
312ee 6df 06 0C 18 30 
312f2 6e0 60 00 00 1E 
312f6 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
312fa 6e2 1E 00 00 10 
312fe 6e3 38 6C C6 00 
31302 6e4 00 00 00 00 
31306 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3130a 6e6 FF 00 00 18 
3130e 6e7 3C 7E 7E 3C 
31312 6e8 18 00 00 00 
31316 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3131a 6ea 7C 00 00 06 
3131e 6eb 06 3E 66 66 
31322 6ec 3E 00 00 00 
31326 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3132a 6ee 3C 00 00 60 
3132e 6ef 60 7C 66 66 
31332 6f0 7C 00 00 00 
31336 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3133a 6f2 3C 00 00 70 
3133e 6f3 18 7C 18 18 
31342 6f4 18 00 00 00 
31346 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3134a 6f6 60 3E 00 06 
3134e 6f7 06 3E 66 66 
31352 6f8 66 00 00 18 
31356 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3135a 6fa 3C 00 00 60 
3135e 6fb 00 60 60 60 
31362 6fc 60 3C 00 06 
31366 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3136a 6fe 66 00 00 1C 
3136e 6ff 18 18 18 18 
31372 700 3C 00 00 00 
31376 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3137a 702 C6 00 00 00 
3137e 703 3E 66 66 66 
31382 704 66 00 00 00 
31386 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3138a 706 3C 00 00 00 
3138e 707 3E 66 66 3E 
31392 708 06 06 00 00 
31396 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3139a 70a 60 60 00 00 
3139e 70b 3E 66 06 06 
313a2 70c 06 00 00 00 
313a6 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
313aa 70e 3E 00 00 18 
313ae 70f 7E 18 18 18 
313b2 710 70 00 00 00 
313b6 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
313ba 712 7C 00 00 00 
313be 713 66 66 66 3C 
313c2 714 18 00 00 00 
313c6 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
313ca 716 6C 00 00 00 
313ce 717 66 3C 18 3C 
313d2 718 66 00 00 00 
313d6 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
313da 71a 30 1E 00 00 
313de 71b 7E 30 18 0C 
313e2 71c 7E 00 00 18 
313e6 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
313ea 71e 3C 00 18 18 
313ee 71f 18 18 18 18 
313f2 720 18 18 00 7E 
313f6 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
313fa 722 60 00 10 18 
313fe 723 1C 1E 1C 18 
31402 724 10 00 08 18 
31406 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3140a 726 08 00       | 	byte	$08, $00
3140c 727 00 00 00 00 
31410 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
31411 728 80 00 00 00 
31415 729 00 80 00 00 
31419 72a 80 80 00 00 
3141d 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
31421 72c 80 00 80 00 
31425 72d 00 40 80 00 
31429 72e AA AA AA 00 
3142d 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
31431 730 FF 00 00 00 
31435 731 00 FF 00 00 
31439 732 FF FF 00 00 
3143d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
31441 734 FF 00 FF 00 
31445 735 00 FF FF 00 
31449 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3144c 737 00 00 00 00 
31450 738 00          | ataripalette   file "ataripalettep2.def"
31451 738 11 11 11 00 
31455 739 22 22 22 00 
31459 73a 33 33 33 00 
3145d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
31461 73c 55 55 55 00 
31465 73d 66 66 66 00 
31469 73e 77 77 77 00 
3146d 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
31471 740 99 99 99 00 
31475 741 AA AA AA 00 
31479 742 BB BB BB 00 
3147d 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
31481 744 DD DD DD 00 
31485 745 EE EE EE 00 
31489 746 FF FF FF 00 
3148d 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
31491 748 00 14 40 00 
31495 749 00 1E 60 00 
31499 74a 00 28 80 00 
3149d 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
314a1 74c 00 3C BF 00 
314a5 74d 00 46 DF 00 
314a9 74e 00 50 FF 00 
314ad 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
314b1 750 39 77 FF 00 
314b5 751 55 8A FF 00 
314b9 752 71 9E FF 00 
314bd 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
314c1 754 AA C5 FF 00 
314c5 755 C6 D8 FF 00 
314c9 756 E3 EC FF 00 
314cd 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
314d1 758 00 00 40 00 
314d5 759 00 00 60 00 
314d9 75a 00 00 80 00 
314dd 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
314e1 75c 00 00 BF 00 
314e5 75d 00 00 DF 00 
314e9 75e 00 00 FF 00 
314ed 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
314f1 760 39 39 FF 00 
314f5 761 55 55 FF 00 
314f9 762 71 71 FF 00 
314fd 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
31501 764 AA AA FF 00 
31505 765 C6 C6 FF 00 
31509 766 E3 E3 FF 00 
3150d 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
31511 768 20 00 40 00 
31515 769 30 00 60 00 
31519 76a 40 00 80 00 
3151d 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
31521 76c 60 00 BF 00 
31525 76d 70 00 DF 00 
31529 76e 80 00 FF 00 
3152d 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
31531 770 9C 39 FF 00 
31535 771 AA 55 FF 00 
31539 772 B8 71 FF 00 
3153d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
31541 774 D5 AA FF 00 
31545 775 E3 C6 FF 00 
31549 776 F1 E3 FF 00 
3154d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
31551 778 40 00 40 00 
31555 779 60 00 60 00 
31559 77a 80 00 80 00 
3155d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
31561 77c BF 00 BF 00 
31565 77d DF 00 DF 00 
31569 77e FF 00 FF 00 
3156d 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
31571 780 FF 39 FF 00 
31575 781 FF 55 FF 00 
31579 782 FF 71 FF 00 
3157d 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
31581 784 FF AA FF 00 
31585 785 FF C6 FF 00 
31589 786 FF E3 FF 00 
3158d 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
31591 788 40 00 20 00 
31595 789 60 00 30 00 
31599 78a 80 00 40 00 
3159d 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
315a1 78c BF 00 60 00 
315a5 78d DF 00 70 00 
315a9 78e FF 00 80 00 
315ad 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
315b1 790 FF 39 9C 00 
315b5 791 FF 55 AA 00 
315b9 792 FF 71 B8 00 
315bd 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
315c1 794 FF AA D5 00 
315c5 795 FF C6 E3 00 
315c9 796 FF E3 F1 00 
315cd 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
315d1 798 40 00 00 00 
315d5 799 60 00 00 00 
315d9 79a 80 00 00 00 
315dd 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
315e1 79c BF 00 00 00 
315e5 79d DF 00 00 00 
315e9 79e FF 00 00 00 
315ed 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
315f1 7a0 FF 39 39 00 
315f5 7a1 FF 55 55 00 
315f9 7a2 FF 71 71 00 
315fd 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
31601 7a4 FF AA AA 00 
31605 7a5 FF C6 C6 00 
31609 7a6 FF E3 E3 00 
3160d 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
31611 7a8 40 10 00 00 
31615 7a9 60 18 00 00 
31619 7aa 80 20 00 00 
3161d 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
31621 7ac BF 30 00 00 
31625 7ad DF 38 00 00 
31629 7ae FF 40 00 00 
3162d 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
31631 7b0 FF 6A 39 00 
31635 7b1 FF 80 55 00 
31639 7b2 FF 95 71 00 
3163d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
31641 7b4 FF BF AA 00 
31645 7b5 FF D5 C6 00 
31649 7b6 FF EA E3 00 
3164d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
31651 7b8 40 20 00 00 
31655 7b9 60 30 00 00 
31659 7ba 80 40 00 00 
3165d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
31661 7bc BF 60 00 00 
31665 7bd DF 70 00 00 
31669 7be FF 80 00 00 
3166d 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
31671 7c0 FF 9C 39 00 
31675 7c1 FF AA 55 00 
31679 7c2 FF B8 71 00 
3167d 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
31681 7c4 FF D5 AA 00 
31685 7c5 FF E3 C6 00 
31689 7c6 FF F1 E3 00 
3168d 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
31691 7c8 40 30 00 00 
31695 7c9 60 48 00 00 
31699 7ca 80 60 00 00 
3169d 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
316a1 7cc BF 90 00 00 
316a5 7cd DF A8 00 00 
316a9 7ce FF C0 00 00 
316ad 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
316b1 7d0 FF CE 39 00 
316b5 7d1 FF D5 55 00 
316b9 7d2 FF DC 71 00 
316bd 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
316c1 7d4 FF EA AA 00 
316c5 7d5 FF F1 C6 00 
316c9 7d6 FF F8 E3 00 
316cd 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
316d1 7d8 30 40 00 00 
316d5 7d9 48 60 00 00 
316d9 7da 60 80 00 00 
316dd 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
316e1 7dc 90 BF 00 00 
316e5 7dd A8 DF 00 00 
316e9 7de C0 FF 00 00 
316ed 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
316f1 7e0 CE FF 39 00 
316f5 7e1 D5 FF 55 00 
316f9 7e2 DC FF 71 00 
316fd 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
31701 7e4 EA FF AA 00 
31705 7e5 F1 FF C6 00 
31709 7e6 F8 FF E3 00 
3170d 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
31711 7e8 00 40 00 00 
31715 7e9 00 60 00 00 
31719 7ea 00 80 00 00 
3171d 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
31721 7ec 00 BF 00 00 
31725 7ed 00 DF 00 00 
31729 7ee 00 FF 00 00 
3172d 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
31731 7f0 39 FF 39 00 
31735 7f1 55 FF 55 00 
31739 7f2 71 FF 71 00 
3173d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
31741 7f4 AA FF AA 00 
31745 7f5 C6 FF C6 00 
31749 7f6 E3 FF E3 00 
3174d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
31751 7f8 00 40 14 00 
31755 7f9 00 60 1E 00 
31759 7fa 00 80 28 00 
3175d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
31761 7fc 00 BF 3C 00 
31765 7fd 00 DF 46 00 
31769 7fe 00 FF 50 00 
3176d 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
31771 800 39 FF 77 00 
31775 801 55 FF 8A 00 
31779 802 71 FF 9E 00 
3177d 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
31781 804 AA FF C5 00 
31785 805 C6 FF D8 00 
31789 806 E3 FF EC 00 
3178d 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
31791 808 00 40 28 00 
31795 809 00 60 3C 00 
31799 80a 00 80 50 00 
3179d 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
317a1 80c 00 BF 78 00 
317a5 80d 00 DF 8C 00 
317a9 80e 00 FF A0 00 
317ad 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
317b1 810 39 FF B5 00 
317b5 811 55 FF C0 00 
317b9 812 71 FF CA 00 
317bd 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
317c1 814 AA FF DF 00 
317c5 815 C6 FF EA 00 
317c9 816 E3 FF F4 00 
317cd 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
317d1 818 00 40 40 00 
317d5 819 00 60 60 00 
317d9 81a 00 80 80 00 
317dd 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
317e1 81c 00 BF BF 00 
317e5 81d 00 DF DF 00 
317e9 81e 00 FF FF 00 
317ed 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
317f1 820 39 FF FF 00 
317f5 821 55 FF FF 00 
317f9 822 71 FF FF 00 
317fd 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
31801 824 AA FF FF 00 
31805 825 C6 FF FF 00 
31809 826 E3 FF FF 00 
3180d 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
31811 828 00 28 40 00 
31815 829 00 3C 60 00 
31819 82a 00 50 80 00 
3181d 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
31821 82c 00 78 BF 00 
31825 82d 00 8C DF 00 
31829 82e 00 A0 FF 00 
3182d 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
31831 830 39 B5 FF 00 
31835 831 55 C0 FF 00 
31839 832 71 CA FF 00 
3183d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
31841 834 AA DF FF 00 
31845 835 C6 EA FF 00 
31849 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3184c 837             | 
3184c 837             | '**********************************************************************************
3184c 837             | '
3184c 837             | '        Timings and colors definitions
3184c 837             | '
3184c 837             | '**********************************************************************************
3184c 837             | 
3184c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3184c 837 10 00 00 00 
31850 838 50 00 00 00 
31854 839 0C 00 00 00 
31858 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3185c 83b 08 00 00 00 
31860 83c 04 00 00 00 
31864 83d 08 00 00 00 
31868 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
3186c 83f 40 02 00 00 
31870 840 6A 8C 15 14 
31874 841 FB 06 B7 01 
31878 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
3187c 843 00 00 00 00 
31880 844 C0 00 00 00 
31884 845 00 00 00 00 
31888 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3188c 847 00 75 C7 97 
31890 848 27 47 F6 0A 
31894 849 05 79 CB 9B 
31898 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3189c 84b             | 
3189c 84b             | ''--------  Initialization  ----------------------------------------------------------------
3189c 84b             | 
3189c 84b 28 0C 64 FD | hdmi            setq    #6
318a0 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
318a4 84d 28 10 64 FD |                 setq    #8
318a8 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
318ac 84f             | 
318ac 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
318b0 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
318b4 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
318b8 852 D6 C6 01 F1 |                 add     t1,hbase
318bc 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
318c0 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
318c4 855 7B 0B 80 5F 
318c8 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
318cc 857 66 66 86 FF 
318d0 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
318d4 859             | '
318d4 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
318d8 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
318dc 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
318e0 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
318e4 85d             | 
318e4 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
318e8 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
318ec 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
318f0 860             | 
318f0 860             | ''--------  frame rendering main loop  ---------------------------------------------------
318f0 860             | 
318f0 860 28 06 64 FD | p101            setq 	#3
318f4 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
318f8 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
318fc 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
31900 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
31904 865 00 A0 05 F6 |                 mov     dlinum, #0
31908 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3190c 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
31910 868             | 
31910 868             | 
31910 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
31914 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
31918 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3191c 86b             |                 
3191c 86b             | 
3191c 86b             | 
3191c 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3191c 86b             |   
3191c 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
31920 86c 29 FE 65 3D |          if_nc  setq2   #255
31924 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
31928 86e             | 
31928 86e             | '' -----   up porch (before the picture)
31928 86e             | 
31928 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3192c 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
31930 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
31934 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
31938 872             |  
31938 872             |    
31938 872             |  
31938 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3193c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
31940 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
31944 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
31948 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3194c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
31950 878             | 
31950 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
31954 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
31958 87a 48 00 B0 FD | 		call    #dli
3195c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
31960 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
31964 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
31968 87e             |                 	
31968 87e             |                 
31968 87e             | 
31968 87e             |  
31968 87e             | '' ------- the main screen drawing starts here
31968 87e             | 
31968 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3196c 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
31970 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
31974 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
31978 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3197c 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
31980 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
31984 885             |               
31984 885             | 
31984 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
31988 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3198c 887             | 
3198c 887             | ' ---------------- All visible lines displayed now, start vblank  
3198c 887             | 
3198c 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
31990 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
31994 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
31998 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3199c 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
319a0 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
319a4 88d             | 
319a4 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
319a4 88d             | 
319a4 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
319a4 88d             | 
319a4 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
319a8 88e             | 
319a8 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
319ac 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
319b0 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
319b4 891             | 
319b4 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
319b8 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
319bc 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
319c0 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
319c4 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
319c8 896             | 
319c8 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
319cc 897 DD C6 41 F8 |                 getnib  t1,dl,#0
319d0 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
319d4 899 70 00 90 AD |     if_z        jmp     #preload
319d8 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
319dc 89b 94 00 90 AD |     if_z        jmp     #preload2
319e0 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
319e4 89d 0C 00 90 AD |     if_z        jmp     #p390
319e8 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
319ec 89f 28 00 90 AD |     if_z        jmp     #p391  
319f0 8a0             | 
319f0 8a0 2D 00 64 FD | p308            ret
319f4 8a1             |    
319f4 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
319f8 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
319fc 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
31a00 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
31a04 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
31a08 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
31a0c 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
31a10 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
31a14 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
31a18 8aa             |  
31a18 8aa             | '' --------  Reload palette. To do 
31a18 8aa             | 
31a18 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
31a1c 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
31a20 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
31a24 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
31a28 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
31a2c 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
31a30 8b0 70 FF 9F FD |         	jmp     #dli                
31a34 8b1             |       
31a34 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
31a34 8b1             | 
31a34 8b1             | 
31a34 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
31a34 8b1             | 
31a34 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
31a38 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
31a3c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
31a40 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
31a44 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
31a48 8b6             |         
31a48 8b6             | '' -------------- Preload a line from PSRAM        
31a48 8b6             |         
31a48 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
31a4c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
31a50 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
31a54 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
31a58 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
31a5c 8bb             | 
31a5c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
31a60 8bc 32 B7 01 F6 |                 mov     buf2,a1024
31a64 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
31a68 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
31a6c 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
31a70 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
31a74 8c1             |  
31a74 8c1             |  
31a74 8c1             | preload2      '  incmod  dlinum,#3
31a74 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
31a78 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
31a7c 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
31a80 8c4 28 02 64 FD |                 setq	#1
31a84 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
31a88 8c6             |                 
31a88 8c6             | 
31a88 8c6             | '' -------------- Draw sprites
31a88 8c6             | 
31a88 8c6 CF 5C 02 F6 | sprite          mov t8,frames
31a8c 8c7 10 5C 0E F5 | 		and t8,#16 wz
31a90 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
31a94 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
31a98 8ca             | 		
31a98 8ca             | 
31a98 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
31a9c 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
31aa0 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
31aa4 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
31aa8 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
31aac 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
31ab0 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
31ab4 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
31ab8 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
31abc 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
31ac0 8d4 01 52 86 F1 |                 sub     sprite_h,#1
31ac4 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
31ac8 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
31acc 8d7             | 
31acc 8d7             | 
31acc 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
31ad0 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
31ad4 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
31ad8 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
31adc 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
31ae0 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
31ae4 8dd 00 5E 06 F6 |                 mov 	t9,#0
31ae8 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
31aec 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
31af0 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
31af4 8e1             |      
31af4 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
31af8 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
31afc 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
31b00 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
31b04 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
31b08 8e6             |                 
31b08 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
31b0c 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
31b10 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
31b14 8e9             |   		
31b14 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
31b18 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
31b1c 8eb             | 
31b1c 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
31b20 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
31b24 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
31b28 8ee             |  
31b28 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
31b2c 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
31b30 8f0 10 00 90 CD |      if_c 	jmp     #p899		
31b34 8f1             | 	
31b34 8f1             | 	
31b34 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
31b38 8f2 28 CD 01 F1 | 		add	t4,sprite_w
31b3c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
31b40 8f4             | 
31b40 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
31b44 8f5             | 
31b44 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
31b48 8f6 01 58 86 F1 | 	 	sub     t6,#1
31b4c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
31b50 8f8             | 
31b50 8f8 28 58 62 FD |                 setq   	t6
31b54 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
31b58 8fa 28 5D 02 F6 |                 mov t8,sprite_w
31b5c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
31b60 8fc 24 00 90 AD |         if_z    jmp #p898
31b64 8fd             |          
31b64 8fd             |         
31b64 8fd 70 5F 06 F6 |                 mov  t9,#368
31b68 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
31b6c 8ff             | 
31b6c 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
31b70 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
31b74 901 FF FF 7F FF 
31b78 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
31b7c 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
31b80 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
31b84 905 2D 01 00 F5 |                 and 0-0, t7
31b88 906             |                
31b88 906             | 
31b88 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
31b8c 907 E5 E0 7A FA |                 wmlong 368,t3				
31b90 908             |                 
31b90 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
31b94 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
31b98 90a 2D 00 64 FD |                 ret
31b9c 90b             | 	
31b9c 90b             | 	
31b9c 90b             |                
31b9c 90b             |  
31b9c 90b             | '' -------------- Graphics line ------------------------------------------------------------
31b9c 90b             |  
31b9c 90b             | 
31b9c 90b             | '' consts and vars
31b9c 90b             | 
31b9c 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
31ba0 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
31ba4 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
31ba8 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
31bac 90f             | 
31bac 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
31bb0 910             | 
31bb0 910             | '------ these longs will be set by setmode function
31bb0 910             | 
31bb0 910 00 00 00 00 | m_bs            long    0        'blanks before sync
31bb4 911 00 00 00 00 | m_sn            long    0        'sync
31bb8 912 00 00 00 00 | m_bv            long    0        'blanks before visible
31bbc 913 00 00 00 00 | m_vi            long    0        'visible pixels #
31bc0 914             | 'm_border        long    0        'left/right borders
31bc0 914 00 00 00 00 | i_upporch       long    0        'up porch lines
31bc4 915 00 00 00 00 | i_vsync         long    0        'vsync lines
31bc8 916 00 00 00 00 | i_downporch     long    0        'down porch lines
31bcc 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
31bd0 918 00 00 00 00 | i_totalvis      long    0
31bd4 919             | 
31bd4 919             | '-------------------------------------
31bd4 919             |  
31bd4 919 00 00 00 00 | linenum         long    0
31bd8 91a 00 00 00 00 | frames          long    0
31bdc 91b 00 00 00 00 | dlinum long 0
31be0 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
31be4 91d             | 
31be4 91d 00 00 00 00 | vblankptr       long    0
31be8 91e 00 00 00 00 | modeptr         long    0
31bec 91f 00 00 00 00 | paletteptr      long    0
31bf0 920 00 00 00 00 | dlptr           long    0
31bf4 921 01 00 00 00 | hbase           long    1
31bf8 922 00 00 00 00 | mailbox         long    0
31bfc 923 00 00 00 00 | spriteptr          long 0
31c00 924             | 
31c00 924 00 00 00 00 | cmd             long    0
31c04 925 00 B0 07 00 | buf1            long    $80000-16384-4096
31c08 926 00 04 00 00 | buf2            long    1024
31c0c 927 01 00 00 00 | dlptr2          long    1
31c10 928 01 00 00 00 | dl              long    1
31c14 929             | 
31c14 929 00 00 00 00 | buf1c long 0
31c18 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
31c1c 92b 01 00 00 00 | framebuf2       long    1
31c20 92c 01 00 00 00 | hsync0          long    1
31c24 92d 01 00 00 00 | hsync1          long    1
31c28 92e             | 
31c28 92e 01 00 00 00 | t1              long    1
31c2c 92f 00 00 00 00 | t2 long 0
31c30 930 00 00 00 00 | t3 long 0
31c34 931 00 00 00 00 | t4 long 0
31c38 932             | 
31c38 932 00 00 00 00 | rcnt            long    0  'dl repeat count
31c3c 933 00 00 00 00 | rcnt2           long    0
31c40 934 00 00 00 00 | rcnt2a          long    0
31c44 935 00 00 00 00 | roffset         long    0
31c48 936 00 00 00 00 | rdl             long    0  'dl repeat line
31c4c 937 00 00 00 00 | dlc             long    0  'dl command
31c50 938             | 
31c50 938 FF FF FF FF | affffffff       long    $ffffffff
31c54 939 00 00 00 00 | sprite1pointer long 0
31c58 93a 00 00 00 00 | sprite1xy      long 0
31c5c 93b 00 00 00 00 | sprite1wh      long 0
31c60 93c 00 00 00 00 | sprite2pointer long 0
31c64 93d 00 00 00 00 | sprite2xy      long 0
31c68 93e 00 00 00 00 | sprite2wh      long 0
31c6c 93f 00 00 00 00 | sprite3pointer long 0
31c70 940 00 00 00 00 | sprite3xy      long 0
31c74 941 00 00 00 00 | sprite3wh      long 0
31c78 942 00 00 00 00 | sprite4pointer long 0
31c7c 943 00 00 00 00 | sprite4xy      long 0
31c80 944 00 00 00 00 | sprite4wh      long 0
31c84 945 00 00 00 00 | sprite5pointer long 0
31c88 946 00 00 00 00 | sprite5xy      long 0
31c8c 947 00 00 00 00 | sprite5wh      long 0
31c90 948 00 00 00 00 | sprite6pointer long 0
31c94 949 00 00 00 00 | sprite6xy      long 0
31c98 94a 00 00 00 00 | sprite6wh      long 0
31c9c 94b 00 00 00 00 | sprite7pointer long 0
31ca0 94c 00 00 00 00 | sprite7xy      long 0
31ca4 94d 00 00 00 00 | sprite7wh      long 0
31ca8 94e 00 00 00 00 | sprite8pointer long 0
31cac 94f 00 00 00 00 | sprite8xy      long 0
31cb0 950 00 00 00 00 | sprite8wh      long 0
31cb4 951 00 00 00 00 | sprite9pointer long 0
31cb8 952 00 00 00 00 | sprite9xy      long 0
31cbc 953 00 00 00 00 | sprite9wh      long 0
31cc0 954 00 00 00 00 | sprite10pointer long 0
31cc4 955 00 00 00 00 | sprite10xy      long 0
31cc8 956 00 00 00 00 | sprite10wh      long 0
31ccc 957 00 00 00 00 | sprite11pointer long 0
31cd0 958 00 00 00 00 | sprite11xy      long 0
31cd4 959 00 00 00 00 | sprite11wh      long 0
31cd8 95a 00 00 00 00 | sprite12pointer long 0
31cdc 95b 00 00 00 00 | sprite12xy      long 0
31ce0 95c 00 00 00 00 | sprite12wh      long 0
31ce4 95d 00 00 00 00 | sprite13pointer long 0
31ce8 95e 00 00 00 00 | sprite13xy      long 0
31cec 95f 00 00 00 00 | sprite13wh      long 0
31cf0 960 00 00 00 00 | sprite14pointer long 0
31cf4 961 00 00 00 00 | sprite14xy      long 0
31cf8 962 00 00 00 00 | sprite14wh      long 0
31cfc 963 00 00 00 00 | sprite15pointer long 0
31d00 964 00 00 00 00 | sprite15xy      long 0
31d04 965 00 00 00 00 | sprite15wh      long 0
31d08 966 00 00 00 00 | sprite16pointer long 0
31d0c 967 00 00 00 00 | sprite16xy      long 0
31d10 968 00 00 00 00 | sprite16wh      long 0
31d14 969 00 00 00 00 | sprite17pointer long 0
31d18 96a 00 00 00 00 | sprite17xy      long 0
31d1c 96b 00 00 00 00 | sprite17wh      long 0
31d20 96c 00 00 00 00 | sprite18pointer long 0
31d24 96d 00 00 00 00 | sprite18xy      long 0
31d28 96e 00 00 00 00 | sprite18wh      long 0
31d2c 96f 00 00 00 00 | spritenum long 0
31d30 970             | 
31d30 970 00 00 00 00 | spriteline long 0
31d34 971 84 03 00 00 | sprite_x long 900
31d38 972 00 00 00 00 | sprite_y long 0
31d3c 973 10 00 00 00 | sprite_w long 16
31d40 974 40 00 00 00 | sprite_h long 64
31d44 975 00 00 00 00 | l2 long 0
31d48 976 00 00 00 00 | t5 long 0
31d4c 977 00 00 00 00 | t6 long 0
31d50 978 00 00 00 00 | t7 long 0
31d54 979 00 00 00 00 | t8 long 0
31d58 97a 00 00 00 00 | t9 long 0
31d5c 97b 00 00 00 00 | preloadaddr long 0
31d60 97c 00 00 00 00 | preloadlineaddr long 0
31d64 97d 00 04 00 00 | a1024 long 1024
31d68 97e             | 
31d68 97e E0 03 00 00 | aa long 992
31d6c 97f FF 03 00 00 | a1023 long 1023
31d70 980 00 10 00 00 | a4096 long 4096
31d74 981             |  fit 368
31d74 981             | _psram_spin2_dat_
31d74 981 00 00 00 00 
      ...             
31e6c 9bf 00 00 00 00 
31e70 9c0 00 00 00 00 |     listdata long 0[8*8]
31e74 9c1             |             orgh
31e74                 | 
31e74                 | ' driver state
31e74     FF FF FF FF | drivercog   long    -1  ' COG id of driver
31e78     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
31e7c                 | 
31e7c                 | ' delay profile
31e7c     07 00 00 00 
31e80     00 CF 7B 05 
31e84     80 D1 F0 08 
31e88     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
31e8c     80 C4 60 0F 
31e90     80 39 7A 12 
31e94     40 2D D9 13 
31e98     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
31e9c                 | 
31e9c                 | ' data to be passed to driver when starting it
31e9c                 | startupData
31e9c     00 00 00 00 |     long    0           ' current frequency
31ea0     00 00 00 00 |     long    FLAGS       ' optional flags for driver
31ea4     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
31ea8     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
31eac     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
31eb0     BC 1E 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
31eb4     3C 1F 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
31eb8     5C 1F 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
31ebc                 | 
31ebc                 | ' data for memory
31ebc                 | deviceData
31ebc                 |     ' 16 bank parameters follow (16MB per bank)
31ebc     00 00 00 00 
      ...             
31ef4     00 00 00 00 
31ef8     00 00 00 00 |     long    0[16]                               ' banks 0-15
31efc                 |     ' 16 banks of pin parameters follow
31efc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
31f00     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
31f04     FF FF FF FF 
      ...             
31f34     FF FF FF FF 
31f38     FF FF FF FF |     long    -1[14]                              ' banks 2-15
31f3c                 | 
31f3c                 | ' data for COG polling
31f3c                 | qosData 
31f3c     00 00 FF FF 
31f40     00 00 FF FF 
31f44     00 00 FF FF 
31f48     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
31f4c     00 00 FF FF 
31f50     00 00 FF FF 
31f54     00 00 FF FF 
31f58     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
31f5c                 |     
31f5c                 | ' mailbox storage
31f5c                 | 
31f5c                 | mailboxes
31f5c     00 00 00 00 
      ...             
31fb4     00 00 00 00 
31fb8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
31fbc                 | 	alignl
31fbc                 | _psram16drv_spin2_dat_
31fbc                 |                             orgh
31fbc     00 00 00 00 
      ...             
31fd4     00 00 00 00 
31fd8     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
31fdc                 | 
31fdc                 | driver_start
31fdc                 |                             org
31fdc 000             | '..................................................................................................
31fdc 000             | ' Memory layout for COG RAM once operational:
31fdc 000             | '
31fdc 000             | '  COG RAM address      Usage
31fdc 000             | '  ---------------      ----
31fdc 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
31fdc 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
31fdc 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
31fdc 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
31fdc 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
31fdc 000             | '  ~$198-$1F3           State and register variables
31fdc 000             | '
31fdc 000             | ' Also during driver COG startup:
31fdc 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
31fdc 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
31fdc 000             | '..................................................................................................
31fdc 000             |                             
31fdc 000             | ' Mailbox storage after vector initialization
31fdc 000             | 
31fdc 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
31fe0 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
31fe4 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
31fe8 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
31fec 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
31ff0 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
31ff4 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
31ff8 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
31ffc 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
32000 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
32004 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
32008 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3200c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
32010 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
32014 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
32018 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3201c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
32020 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
32024 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
32028 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3202c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
32030 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
32034 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
32038 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3203c 018             | 
3203c 018             | ' Mailbox parameter addresses per COG once patched
3203c 018             |                             
3203c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
32040 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
32044 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
32048 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3204c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
32050 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
32054 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
32058 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3205c 020             | 
3205c 020             | '..................................................................................................
3205c 020             | ' Per COG request and state setup and service branching
3205c 020             |         
3205c 020             | cog0                 
3205c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
32060 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
32064 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
32068 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3206c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32070 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32074 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
32078 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3207c 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
32080 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32084 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32088 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3208c 02c             | cog1                        
3208c 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
32090 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
32094 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
32098 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3209c 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
320a0 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
320a4 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
320a8 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
320ac 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
320b0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
320b4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
320b8 037 33 CA 63 FD |                             execf   request-0               'jump to service
320bc 038             | cog2                         
320bc 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
320c0 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
320c4 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
320c8 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
320cc 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
320d0 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
320d4 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
320d8 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
320dc 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
320e0 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
320e4 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
320e8 043 33 CA 63 FD |                             execf   request-0               'jump to service
320ec 044             | cog3                        
320ec 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
320f0 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
320f4 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
320f8 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
320fc 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32100 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32104 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
32108 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3210c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
32110 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32114 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32118 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3211c 050             | cog4                        
3211c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
32120 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
32124 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
32128 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3212c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32130 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32134 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
32138 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3213c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
32140 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32144 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32148 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3214c 05c             | cog5                        
3214c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
32150 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
32154 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
32158 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3215c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32160 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32164 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
32168 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3216c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
32170 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32174 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
32178 067 33 CA 63 FD |                             execf   request-0               'jump to service
3217c 068             | cog6                        
3217c 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
32180 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
32184 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
32188 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3218c 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32190 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32194 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
32198 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3219c 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
321a0 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
321a4 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
321a8 073 33 CA 63 FD |                             execf   request-0               'jump to service
321ac 074             | cog7                        
321ac 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
321b0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
321b4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
321b8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
321bc 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
321c0 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
321c4 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
321c8 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
321cc 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
321d0 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
321d4 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
321d8 07f 33 CA 63 FD |                             execf   request-0               'jump to service
321dc 080             |                             fit     128
321dc 080             | 
321dc 080             |                             fit     128
321dc 080             | pad                         long    0[128-$]                'align init code to $80
321dc 080             | 
321dc 080             | '..................................................................................................
321dc 080             | 
321dc 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
321dc 080             | 
321dc 080             | init                        
321dc 080             |                             ' get driver scratch long address in hub
321dc 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
321e0 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
321e4 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
321e8 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
321ec 084             |                     
321ec 084             |                             ' read in the additional LUT RAM code
321ec 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
321f0 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
321f4 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
321f8 087             | 
321f8 087             |                             ' read the startup parameters
321f8 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
321fc 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
32200 089             | 
32200 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
32200 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
32204 08a             | 
32204 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
32208 08b 01 00 00 5F 
3220c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
32210 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
32214 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
32218 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3221c 090             | 
3221c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3221c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
32220 091 01 00 00 FF 
32224 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
32228 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3222c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
32230 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
32234 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
32238 097 08 DE 47 F5 |                             or      a, #8
3223c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
32240 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
32244 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
32248 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3224c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
32250 09d 01 DE 07 F1 |                             add     a, #1
32254 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
32258 09f             |  
32258 09f             |                             ' setup device control pin states
32258 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3225c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
32260 0a1 01 00 00 FF 
32264 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
32268 0a3             | 
32268 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3226c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
32270 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
32274 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
32278 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3227c 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
32280 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
32284 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
32288 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3228c 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
32290 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
32294 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
32298 0af             | pinloop
32298 0af             |                             ' generate minimum CE high time before access
32298 0af A1 07 00 FF 
3229c 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
322a0 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
322a4 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
322a8 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
322ac 0b4 1F DE 63 FD |                             waitx   a                       'delay
322b0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
322b4 0b6             | 
322b4 0b6             |                             ' setup the COG mailboxes and addresses 
322b4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
322b8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
322bc 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
322c0 0b9             | 
322c0 0b9 28 2E 64 FD |                             setq    #24-1
322c4 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
322c8 0bb             | 
322c8 0bb             |                             ' setup the polling loop for active COGs 
322c8 0bb 01 C2 63 FD |                             cogid   id
322cc 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
322d0 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
322d4 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
322d8 0bf 0A F0 07 F6 |                             mov     ptra, #10
322dc 0c0 E1 F1 03 FA |                             mul     ptra, id
322e0 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
322e4 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
322e8 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
322ec 0c4 03 C2 07 FA |                             mul     id, #3
322f0 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
322f4 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
322f8 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
322fc 0c8 D8 01 B0 FD |                             call    #reloadcogs
32300 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
32304 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
32308 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
32308 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3230c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
32310 0cd 08 04 DC FC |                             rep     #2, #8
32314 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
32318 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3231c 0d0             | 
3231c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3231c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3231c 0d0 01 C2 63 FD |                             cogid   id
32320 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
32324 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
32328 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3232c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
32330 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
32334 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
32338 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3233c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
32340 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
32344 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
32348 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3234c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
32350 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
32354 0de A5 E5 03 F1 |                             add     d, const512
32358 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3235c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
32360 0e1 00 00 00 F6 |                             mov     0-0, 0-0
32364 0e2             |                             
32364 0e2             |                             ' setup register values for control vector loop setup after we return
32364 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
32368 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3236c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
32370 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
32374 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
32378 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3237c 0e8 D0 C3 8F F9 |                             altd    id, #id0
32380 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
32384 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
32388 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3238c 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
32390 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
32394 0ee             |  
32394 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
32398 0ef 07 CA 07 F5 |                             and     request, #7
3239c 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
323a0 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
323a4 0f2             |                             fit     $100                    'ensure all init code fits this space
323a4 0f2             | 
323a4 0f2             |                             fit     $100                    'ensure all init code fits this space
323a4 0f2             | 
323a4 0f2 00 00 00 00 
      ...             
323d4 0fe 00 00 00 00 
323d8 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
323dc 100             | 
323dc 100             | '..................................................................................................
323dc 100             | ' Error result handling and COG notification of request completion
323dc 100             | 
323dc 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
323e0 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
323e4 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
323e8 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
323ec 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
323f0 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
323f4 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
323f8 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
323fc 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
32400 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
32404 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
32408 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3240c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
32410 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
32414 10e             | ' Poller re-starts here after a COG is serviced
32414 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
32418 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3241c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
32420 111             | ' Main dynamic polling loop repeats until a request arrives
32420 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
32424 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
32428 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3242c 114             | 
3242c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
32430 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
32434 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
32438 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3243c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
32440 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
32444 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
32448 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3244c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
32450 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
32454 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
32458 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3245c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
32460 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
32464 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
32468 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3246c 124             | 
3246c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
32470 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
32474 126             |  
32474 126             | '..................................................................................................
32474 126             | ' List handler                               
32474 126             | 
32474 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
32478 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3247c 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
32480 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
32484 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
32488 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3248c 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
32490 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
32494 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
32498 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3249c 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
324a0 131 33 00 60 FD |                             execf   0-0                     'process the request 
324a4 132             | 
324a4 132             | '..................................................................................................
324a4 132             | ' Restoring per COG state and resuming where we left off
324a4 132             | 
324a4 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
324a8 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
324ac 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
324b0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
324b4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
324b8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
324bc 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
324c0 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
324c4 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
324c8 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
324cc 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
324d0 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
324d4 13e             |                    
324d4 13e             | '..................................................................................................
324d4 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
324d4 13e             | 
324d4 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
324d8 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
324dc 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
324e0 141 D0 DF B7 F9 |                             setd    a, #id0
324e4 142 D8 DF BF F9 |                             sets    a, #addr1
324e8 143 FE FF FF FF 
324ec 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
324f0 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
324f4 146 3F DE A7 F9 |                             alti    a, #%111_111 
324f8 147 00 00 F0 F9 |                             muxq    0-0, 0-0
324fc 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
32500 149 01 E2 63 FD |                             cogid   c
32504 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
32508 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3250c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
32510 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
32514 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
32518 14f 00 E0 03 F6 |                             mov     b, 0-0
3251c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
32520 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
32524 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
32528 153 0C 00 90 AD |             if_z            jmp     #excluded               
3252c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
32530 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
32534 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
32538 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3253c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
32540 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
32544 15a             | 
32544 15a             | 'determine priority cogs and build instructions for the polling sequence
32544 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
32548 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3254c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
32550 15d             | 
32550 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
32554 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
32558 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3255c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
32560 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
32564 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
32568 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3256c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
32570 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
32574 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
32578 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3257c 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
32580 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
32584 16a             | endprioloop
32584 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
32588 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3258c 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
32590 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
32594 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
32598 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3259c 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
325a0 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
325a4 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
325a8 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
325ac 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
325b0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
325b4 176             | 
325b4 176             | ' populate the round robin COG polling instructions
325b4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
325b8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
325bc 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
325c0 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
325c4 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
325c8 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
325cc 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
325d0 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
325d4 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
325d8 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
325dc 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
325e0 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
325e4 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
325e8 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
325ec 184             | '..................................................................................................
325ec 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
325ec 184             | 
325ec 184             | set_latency                                                 '            (a) set latency
325ec 184             | get_latency                                                 '            (b) get latency
325ec 184             | set_burst                                                   '            (c) set burst size of bank
325ec 184             | get_burst                                                   '            (d) get burst size of bank
325ec 184             |                                                             '            (e) dump state
325ec 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
325f0 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
325f4 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
325f8 187             |                                                             ' | | | | e  account for following AUGS
325f8 187 04 00 00 FF 
325fc 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
32600 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
32604 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
32608 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3260c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
32610 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
32614 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
32618 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3261c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
32620 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
32624 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
32628 193             | 
32628 193             | '..................................................................................................
32628 193             | ' Misc EXECF code
32628 193             | 
32628 193 33 72 63 FD | start_read_exec             execf   newburstr
3262c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
32630 195 33 78 63 FD | continue_read_exec          execf   lockedreads
32634 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
32638 197             | 
32638 197             | '..................................................................................................
32638 197             | ' Variables
32638 197             | 
32638 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3263c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
32640 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
32644 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
32648 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3264c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
32650 19d             | 
32650 19d 00 00 00 80 | xfreq1          long    $80000000
32654 19e 00 00 00 40 | xfreq2          long    $40000000
32658 19f 03 00 00 00 | delay           long    3
3265c 1a0             | 
3265c 1a0             | lutcodeaddr                 
3265c 1a0             | startupparams
3265c 1a0             | excludedcogs                                    'careful: shared register use!
3265c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
32660 1a1 00 00 00 00 | flags           long    0
32664 1a2             | mask                                            'careful: shared register use!
32664 1a2 00 00 00 00 | resetmaskA      long    0
32668 1a3             | limit                                           'careful: shared register use!
32668 1a3 00 00 00 00 | resetmaskB      long    0
3266c 1a4 00 00 00 00 | datapins        long    0
32670 1a5             | const512                                        'careful: shared register use!
32670 1a5 00 00 00 00 | devicelist      long    0
32674 1a6 00 00 00 00 | coglist         long    0
32678 1a7 00 00 00 00 | mbox            long    0 
3267c 1a8             | 
3267c 1a8             | clkpin                                          'shared with code patched during init
3267c 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
32680 1a9             | cspin                                           'shared with code patched during init
32680 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
32684 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
32688 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3268c 1ac 01 00 00 00 | clkdelay        long    1
32690 1ad 00 00 00 00 | regdatabus      long    0
32694 1ae             | 
32694 1ae 10 00 00 00 | deviceaddr      long    $10
32698 1af             | rrcounter
32698 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3269c 1b0             | 
3269c 1b0             | ' jump addresses for the per COG handlers
3269c 1b0 20 00 00 00 | cog0_handler    long    cog0
326a0 1b1 2C 00 00 00 | cog1_handler    long    cog1
326a4 1b2 38 00 00 00 | cog2_handler    long    cog2
326a8 1b3 44 00 00 00 | cog3_handler    long    cog3
326ac 1b4 50 00 00 00 | cog4_handler    long    cog4
326b0 1b5 5C 00 00 00 | cog5_handler    long    cog5
326b4 1b6 68 00 00 00 | cog6_handler    long    cog6
326b8 1b7 74 00 00 00 | cog7_handler    long    cog7
326bc 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
326c0 1b9             | 
326c0 1b9             | ' EXECF sequences
326c0 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
326c4 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
326c8 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
326cc 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
326d0 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
326d4 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
326d8 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
326dc 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
326dc 1c0             | 
326dc 1c0             | 
326dc 1c0             | ' SKIPF sequences
326dc 1c0             | skiptable
326dc 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
326e0 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
326e4 1c2 00 00 00 00 |                 long    0                      ' read modify write long
326e8 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
326ec 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
326f0 1c5 00 00 00 00 | pattern2        long    0
326f4 1c6 00 00 00 00 | pattern3        long    0
326f8 1c7 77 02 00 00 | singlelong      long    %1001110111  
326fc 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
32700 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
32704 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
32708 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3270c 1cc             | 
3270c 1cc             | ' LUT RAM address values
3270c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
32710 1cd DD 02 00 00 | continue_read   long    continue_read_lut
32714 1ce DB 02 00 00 | continue_write  long    continue_write_lut
32718 1cf F6 02 00 00 | noread          long    noread_lut
3271c 1d0             | 
3271c 1d0 00 00 00 00 | id0             long    0
32720 1d1 01 00 00 00 | id1             long    1
32724 1d2 02 00 00 00 | id2             long    2
32728 1d3 03 00 00 00 | id3             long    3
3272c 1d4 04 00 00 00 | id4             long    4
32730 1d5 05 00 00 00 | id5             long    5
32734 1d6 06 00 00 00 | id6             long    6
32738 1d7 07 00 00 00 | id7             long    7
3273c 1d8             | 
3273c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3273c 1d8             | 'and COG updates and need to follow immediately after id0-id7
3273c 1d8 00 00 00 00 | addr1           long    0
32740 1d9 00 00 00 00 | hubdata         long    0
32744 1da 00 00 00 00 | count           long    0
32748 1db 00 00 00 00 | addr2           long    0
3274c 1dc 00 00 00 00 | total           long    0
32750 1dd 00 00 00 00 | offset1         long    0
32754 1de 00 00 00 00 | offset2         long    0
32758 1df 00 00 00 00 | link            long    0
3275c 1e0             | 
3275c 1e0             | burstwrite                                      'note shared register use during init
3275c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
32760 1e1 00 00 00 00 | id              long    0
32764 1e2             | 
32764 1e2 00 00 00 00 | header          long    0
32768 1e3 00 00 00 00 | trailer         long    0
3276c 1e4 00 00 00 00 | cmdaddr         long    0
32770 1e5 00 00 00 00 | request         long    0
32774 1e6 00 00 00 00 | rrlimit         long    0
32778 1e7 00 00 00 00 | pinconfig       long    0
3277c 1e8 00 00 00 00 | clks            long    0
32780 1e9 00 00 00 00 | resume          long    0
32784 1ea 00 00 00 00 | orighubsize     long    0
32788 1eb 00 00 00 00 | wrclks          long    0
3278c 1ec             | 
3278c 1ec 00 00 00 00 | pattern         long    0
32790 1ed 00 00 00 00 | hubscratch      long    0
32794 1ee 00 10 00 00 | val4k           long    4096
32798 1ef             | 
32798 1ef             | ' temporary general purpose regs
32798 1ef 00 00 00 00 | a               long    0
3279c 1f0 00 00 00 00 | b               long    0
327a0 1f1 00 00 00 00 | c               long    0
327a4 1f2 00 00 00 00 | d               long    0
327a8 1f3             |                 fit     502
327a8 1f3             | 
327a8 1f3             |                 fit     502
327a8 1f3             | 
327a8 1f3             | '..................................................................................................
327a8 1f3             | 
327a8 1f3             |             orgh
327a8                 | 
327a8                 | lut_code
327a8                 | 'HW init code up to 80 longs
327a8                 | 
327a8                 | '..................................................................................................
327a8                 | ' Memory layout for LUT RAM once operational:
327a8                 | '
327a8                 | '  LUT RAM address      Usage
327a8                 | '  ---------------      ----
327a8                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
327a8                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
327a8                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
327a8                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
327a8                 | '
327a8                 | ' Also during driver COG startup:
327a8                 | ' $230-$24F is used for HW init setup
327a8                 | ' $250-$26F is used as temporary vector storage 
327a8                 | '..................................................................................................
327a8                 | 
327a8                 |                 org $230    
327a8 230             | 
327a8 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
327a8 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
327ac 231 24 16 60 FD |                             pollxfi
327b0 232 FF AA 2A FF 
327b4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
327b8 234 28 00 B0 FD |                             call    #sendqspi
327bc 235 07 F8 07 FF 
327c0 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
327c4 237 28 00 B0 FD |                             call    #sendspi
327c8 238 F8 07 78 FF 
327cc 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
327d0 23a 1C 00 B0 FD |                             call    #sendspi
327d4 23b 7F 78 78 FF 
327d8 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
327dc 23d 10 00 B0 FD |                             call    #sendspi 
327e0 23e 2D 00 64 FD |                             ret
327e4 23f             | 
327e4 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
327e8 240 32 0C 64 FD |                             skipf   #%110
327ec 241 9C EF 03 F6 |                             mov     pb, xsendimm
327f0 242             | 
327f0 242 10 D0 07 F6 | sendspi                     mov     clks, #16
327f4 243 97 EF 03 F6 |                             mov     pb, ximm8lut
327f8 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
327fc 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
32800 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
32804 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
32808 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3280c 249 50 48 63 FD |                             fltl    datapins                'float data bus
32810 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
32814 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
32818 24c             | 
32818 24c 00 00 00 00 
3281c 24d 00 00 00 00 
32820 24e 00 00 00 00 
32824 24f 00 00 00 00 |                 long    0[$270-32-$]
32828 250             |                 fit     $270-32  ' keep room for 32 vector longs
32828 250             |     
32828 250             |                 fit     $270-32  ' keep room for 32 vector longs
32828 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
32828 250             | rw_vect ' PSRAM jump vectors
32828 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3282c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
32830 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
32834 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
32838 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3283c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
32840 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
32844 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
32848 258             | ro_vect ' R/O PSRAM jump vectors
32848 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3284c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
32850 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
32854 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
32858 25c 00 01 00 00 |                 long    unsupported
3285c 25d 00 01 00 00 |                 long    unsupported
32860 25e 00 01 00 00 |                 long    unsupported
32864 25f 00 01 00 00 |                 long    unsupported
32868 260             | ctrl_vect ' Control jump vectors
32868 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3286c 261 00 01 00 00 |                 long    unsupported
32870 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
32874 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
32878 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3287c 265 00 01 00 00 |                 long    unsupported
32880 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
32884 267 3E 01 00 00 |                 long    reconfig 
32888 268             | no_vect ' Invalid bank jump vectors
32888 268 01 01 00 00 |                 long    invalidbank
3288c 269 01 01 00 00 |                 long    invalidbank
32890 26a 01 01 00 00 |                 long    invalidbank
32894 26b 01 01 00 00 |                 long    invalidbank
32898 26c 01 01 00 00 |                 long    invalidbank
3289c 26d 01 01 00 00 |                 long    invalidbank
328a0 26e 01 01 00 00 |                 long    invalidbank
328a4 26f 01 01 00 00 |                 long    invalidbank
328a8 270             |                 fit     $270
328a8 270             | 
328a8 270             |                 fit     $270
328a8 270             | '..................................................................................................
328a8 270             | ' PSRAM READS
328a8 270             |                                                             ' a b c d e f
328a8 270             |                                                             ' B W L B R L  (a) byte read
328a8 270             |                                                             ' Y O O U E O  (b) word read
328a8 270             |                                                             ' T R N R S C  (c) long read
328a8 270             |                                                             ' E D G S U K  (d) new burst read
328a8 270             |                                                             '       T M E  (e) resumed sub-burst
328a8 270             |                                                             '         E D  (f) locked sub-burst
328a8 270             | 
328a8 270             | 
328a8 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
328ac 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
328b0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
328b4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
328b8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
328bc 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
328c0 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
328c4 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
328c8 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
328cc 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
328d0 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
328d4 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
328d8 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
328dc 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
328e0 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
328e4 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
328e8 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
328ec 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
328f0 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
328f4 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
328f8 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
328fc 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
32900 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
32904 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
32908 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3290c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
32910 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
32914 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
32918 28c             | 
32918 28c             |                             ' fall through to read bursts
32918 28c             |                         
32918 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
32918 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3291c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
32920 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
32924 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
32928 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3292c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
32930 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
32934 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
32938 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3293c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
32940 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
32944 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
32948 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3294c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
32950 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
32954 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
32958 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3295c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
32960 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
32964 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
32968 2a0 E8 D1 03 F1 |                             add     clks, clks
3296c 2a1             | readcommon
3296c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
32970 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
32974 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
32978 2a4             | 
32978 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3297c 2a5 69 C8 63 FD |                             rev     cmdaddr
32980 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
32984 2a7 61 C8 63 FD |                             mergeb  cmdaddr
32988 2a8             | 
32988 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3298c 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
32990 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
32990 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
32994 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
32998 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3299c 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
329a0 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
329a0 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
329a4 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
329a8 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
329ac 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
329b0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
329b4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
329b8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
329b8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
329bc 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
329c0 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
329c4 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
329c8 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
329cc 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
329d0 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
329d4 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
329d8 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
329dc 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
329e0 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
329e4 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
329e8 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
329ec 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
329f0 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
329f0 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
329f4 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
329f8 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
329fc 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
32a00 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
32a04 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
32a08 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
32a0c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
32a10 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
32a14 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
32a18 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
32a1c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
32a20 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
32a24 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
32a28 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
32a2c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
32a30 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
32a34 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
32a38 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
32a3c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
32a40 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
32a44 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
32a48 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
32a4c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
32a50 2da 10 03 90 FD |                             jmp     #writecommon
32a54 2db             | 
32a54 2db             | '..................................................................................................
32a54 2db             | ' Burst continuation testing
32a54 2db             | 
32a54 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
32a58 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
32a5c 2dd             | continue_read_lut          
32a5c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
32a60 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
32a64 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
32a68 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
32a6c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
32a70 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
32a74 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
32a78 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
32a7c 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
32a80 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
32a84 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
32a88 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
32a8c 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
32a90 2ea             | 
32a90 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
32a94 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
32a98 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
32a9c 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
32aa0 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
32aa4 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
32aa8 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
32aac 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
32ab0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
32ab4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
32ab8 2f4 2A 1C 66 0D |             _ret_           push    #poller
32abc 2f5             | 
32abc 2f5             | 
32abc 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
32ac0 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
32ac0 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
32ac4 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
32ac8 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
32acc 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
32ad0 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
32ad4 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
32ad8 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
32adc 2fd 2D 00 64 FD |                             ret                             ' | continue processing
32ae0 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
32ae4 2ff             | '..................................................................................................
32ae4 2ff             | ' Completion of requests
32ae4 2ff             | 
32ae4 2ff             | complete_rw_lut             
32ae4 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
32ae8 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
32aec 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
32af0 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
32af4 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
32af8 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
32afc 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
32b00 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
32b04 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
32b08 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
32b0c 309 32 62 64 AD |             if_z            skipf   #%110001
32b10 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
32b14 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
32b18 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
32b1c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
32b20 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
32b24 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
32b28 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
32b2c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
32b30 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
32b34 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
32b38 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
32b3c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
32b40 316             |                                                             ' skipcase (a) gfx copy to/from hub
32b40 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
32b40 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
32b40 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
32b44 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
32b48 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
32b4c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
32b50 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
32b54 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
32b58 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
32b5c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
32b60 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
32b64 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
32b68 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
32b6c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
32b70 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
32b74 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
32b78 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
32b7c 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
32b80 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
32b84 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
32b88 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
32b8c 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
32b90 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
32b94 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
32b98 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
32b9c 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
32ba0 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
32ba4 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
32ba8 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
32bac 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
32bb0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
32bb4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
32bb8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
32bbc 335 DF B7 03 A6 |             if_z            mov     addr2, link
32bc0 336 34 FF 9F AD |             if_z            jmp     #checknext
32bc4 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
32bc8 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
32bcc 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
32bd0 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
32bd4 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
32bd8 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
32bdc 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
32be0 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
32be4 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
32be8 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
32bec 341             | 
32bec 341             | '..................................................................................................
32bec 341             | ' PSRAM WRITES
32bec 341             |                                                             '  a b c d e f g h
32bec 341             | 
32bec 341             |                                                             '  B W L F B R L L (a) byte write(s)
32bec 341             |                                                             '  Y O O I U E O O (b) word write(s)
32bec 341             |                                                             '  T R N L R S C C (c) long write(s)
32bec 341             |                                                             '  E D G L S U K K (d) resumed fill
32bec 341             |                                                             '          T M E E (e) new burst write
32bec 341             |                                                             '            E D D (f) resumed burst
32bec 341             |                                                             '              F B (g) locked fill
32bec 341             |                                                             '              I U (h) locked burst write
32bec 341             |                                                             '              L R 
32bec 341             |                                                             '              L S 
32bec 341             |                                                             '                T 
32bec 341             | 
32bec 341             | w_single                   
32bec 341             | w_fill_cont           
32bec 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
32bf0 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
32bf4 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
32bf8 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
32bfc 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
32c00 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
32c04 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
32c08 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
32c0c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
32c10 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
32c14 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
32c18 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
32c1c 34d             |                ' disable call to r_resume_burst for single longs when z=0
32c1c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
32c20 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
32c24 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
32c28 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
32c2c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
32c30 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
32c34 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
32c38 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
32c3c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
32c40 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
32c44 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
32c48 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
32c4c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
32c50 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
32c54 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
32c58 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
32c5c 35d             |         
32c5c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
32c5c 35d             |             '
32c5c 35d             |             '  At least one of these 3 optional components will be sent
32c5c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
32c5c 35d             |             '     body - N x full longs of data
32c5c 35d             |             '     trailer - last partial long of data
32c5c 35d             |             '
32c5c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
32c5c 35d             |             '
32c5c 35d             |             'Case    Type                           Sends
32c5c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
32c5c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
32c5c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
32c5c 35d             |             ' 4)     Multiple long fill             body only
32c5c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
32c5c 35d             | 
32c5c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
32c5c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
32c60 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
32c64 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
32c68 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
32c6c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
32c70 362 13 8C 07 F6 |                             mov     pattern3, #%10011
32c74 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
32c78 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
32c7c 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
32c80 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
32c84 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
32c88 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
32c8c 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
32c90 36a             |                             
32c90 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
32c94 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
32c98 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
32c9c 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
32ca0 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
32ca4 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
32ca8 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
32cac 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
32cb0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
32cb4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
32cb8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
32cbc 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
32cc0 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
32cc4 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
32cc8 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
32ccc 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
32cd0 37a             | 
32cd0 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
32cd4 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
32cd8 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
32cdc 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
32ce0 37e             |                  
32ce0 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
32ce4 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
32ce8 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
32cec 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
32cf0 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
32cf4 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
32cf8 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
32cfc 385             | 
32cfc 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
32d00 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
32d04 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
32d08 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
32d0c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
32d10 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
32d14 38b             | 
32d14 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
32d14 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
32d18 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
32d1c 38d 2A B0 63 FD |                             push    addr1                   'save address
32d20 38e             | 
32d20 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
32d20 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
32d24 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
32d28 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
32d2c 391             |             
32d2c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
32d30 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
32d34 393 2B B0 63 FD |                             pop     addr1                   'restore address
32d38 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
32d3c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
32d40 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
32d44 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
32d48 398             | 
32d48 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
32d4c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
32d50 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
32d54 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
32d58 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
32d5c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
32d60 39e             | 
32d60 39e             |                             'trailer is done
32d60 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
32d64 39f             | 
32d64 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
32d68 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
32d6c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
32d70 3a2             | 
32d70 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
32d74 3a3 69 C8 63 FD |                             rev     cmdaddr                 
32d78 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
32d7c 3a5 61 C8 63 FD |                             mergeb  cmdaddr
32d80 3a6             |                             
32d80 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
32d84 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
32d88 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
32d8c 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
32d90 3aa             |                                                          
32d90 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
32d94 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
32d98 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
32d9c 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
32da0 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
32da4 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
32da8 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
32dac 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
32db0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
32db4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
32db8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
32dbc 3b5             |  
32dbc 3b5 59 52 63 FD |                             drvh    cspin
32dc0 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
32dc4 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
32dc8 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
32dcc 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
32dd0 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
32dd4 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
32dd8 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
32ddc 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
32de0 3be EA E5 03 F6 |                             mov     d, orighubsize
32de4 3bf EF E5 63 F0 |                             shl     d, a
32de8 3c0 F2 E3 83 F1 |                             sub     c, d
32dec 3c1 DD E3 03 F1 |                             add     c, offset1
32df0 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
32df4 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
32df8 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
32dfc 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
32e00 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
32e04 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
32e08 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
32e0c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
32e10 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
32e14 3cb BB D3 03 F6 |                             mov     resume, restorefill
32e18 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
32e1c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
32e20 3ce 6C FC BF CD |             if_c            call    #yield
32e24 3cf 2D 00 64 FD |                             ret
32e28 3d0             |                            
32e28 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
32e28 3d0             |                       '     rczl    pa                      'rotate left into address offset
32e28 3d0             |                       '     rczl    c wcz                   'restore count and flags
32e28 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
32e2c 3d1 02 EC 67 F0 |                             shl     pa, #2
32e30 3d2 28 06 64 AD |             if_z            setq    #3
32e34 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
32e38 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
32e3c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
32e40 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
32e44 3d7             | 
32e44 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
32e48 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
32e4c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
32e50 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
32e54 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
32e58 3dc             |                 fit 1024-32
32e58 3dc             |         
32e58 3dc             | 
32e58 3dc             | '..................................................................................................
32e58 3dc             | 
32e58 3dc             |                 fit 1024-32
32e58 3dc 00 00 00 00 
32e5c 3dd 00 00 00 00 
32e60 3de 00 00 00 00 
32e64 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
32e68 3e0             |                 org 1024-32
32e68 000             | 
32e68 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
32e68 000 00 00 00 00 |                 long $0000
32e6c 001 11 11 00 00 |                 long $1111
32e70 002 22 22 00 00 |                 long $2222
32e74 003 33 33 00 00 |                 long $3333
32e78 004 44 44 00 00 |                 long $4444
32e7c 005 55 55 00 00 |                 long $5555
32e80 006 66 66 00 00 |                 long $6666
32e84 007 77 77 00 00 |                 long $7777
32e88 008 88 88 00 00 |                 long $8888
32e8c 009 99 99 00 00 |                 long $9999
32e90 00a AA AA 00 00 |                 long $aaaa
32e94 00b BB BB 00 00 |                 long $bbbb
32e98 00c CC CC 00 00 |                 long $cccc
32e9c 00d DD DD 00 00 |                 long $dddd
32ea0 00e EE EE 00 00 |                 long $eeee
32ea4 00f FF FF 00 00 |                 long $ffff
32ea8 010             | 
32ea8 010             | 'masks
32ea8 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
32eac 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
32eb0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
32eb4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
32eb8 014             | 
32eb8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
32ebc 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
32ec0 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
32ec4 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
32ec8 018             | 
32ec8 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
32ecc 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
32ed0 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
32ed4 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
32ed8 01c             | 
32ed8 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
32edc 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
32ee0 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
32ee4 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
32ee8 020             |         fit 1024
32ee8 020             | 
32ee8 020             |         fit 1024
32ee8 020             | 
32ee8 020             | '--------------------------------------------------------------------------------------------------
32ee8 020             |         orgh
32ee8                 | 
32ee8                 | gfxexpansion
32ee8                 |                             'simple line drawing graphics expansion of memory driver
32ee8                 |                             'jmp     #donerepeats                'just return for now
32ee8                 | 
32ee8     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
32eec     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
32ef0     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
32ef4     DD E1 03 F6 |                             mov     b, offset1              'get error term
32ef8     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
32efc     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
32f00     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
32f04     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
32f08     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
32f0c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
32f10     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
32f14     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
32f18     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
32f1c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
32f20     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
32f24     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
32f28     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
32f2c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
32f30     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
32f34     DC E5 33 F9 |                             getword d, total, #0            'get line width
32f38     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
32f3c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
32f40     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
32f44     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
32f48     C3 03 80 FD |                             jmp     #readmask               'continue filling
32f4c                 | 	alignl
32f4c                 | _usbnew_spin2_dat_
32f4c                 |                 org     $000
32f4c 000             | 
32f4c 000             | usb_host_start
32f4c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
32f50 001             | 
32f50 001 03 00 00 FF 
32f54 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
32f58 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
32f5c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
32f60 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
32f64 006 29 70 63 FD |                 setq2   htmp
32f68 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
32f6c 008             | 
32f6c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
32f70 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
32f74 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
32f78 00b             | 
32f78 00b             | '------------------------------------------------------------------------------
32f78 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
32f78 00b             | ' special because the receiving function must not respond with either STALL or
32f78 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
32f78 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
32f78 00b             | ' corrupt packet, it must ignore the transaction
32f78 00b             | '------------------------------------------------------------------------------
32f78 00b             | ' On entry:
32f78 00b             | '   PTRA - start address of the SETUP data struct.
32f78 00b             | ' On exit:
32f78 00b             | '   retval - PID_ACK on success, otherwise error code.
32f78 00b             | '------------------------------------------------------------------------------
32f78 00b             | txn_setup
32f78 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
32f7c 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
32f80 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
32f84 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
32f88 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
32f8c 010             | .setup
32f8c 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
32f90 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32f94 012 2D 00 64 AD |         if_z    ret
32f98 013 7C 0B B0 FD |                 call    #retry_wait
32f9c 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
32fa0 015 2D 00 64 AD |         if_z    ret
32fa4 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
32fa8 017 E0 FF 9F FD |                 jmp     #.setup
32fac 018             | 
32fac 018             | '------------------------------------------------------------------------------
32fac 018             | ' IN/INTERRUPT transaction.
32fac 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
32fac 018             | '------------------------------------------------------------------------------
32fac 018             | ' On entry:
32fac 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
32fac 018             | '     CRC(b19..23).
32fac 018             | ' On exit:
32fac 018             | '------------------------------------------------------------------------------
32fac 018             | txn_in
32fac 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
32fb0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
32fb4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
32fb8 01b             | 
32fb8 01b             |                 ' Fall through to urx_packet
32fb8 01b             | 
32fb8 01b             | '------------------------------------------------------------------------------
32fb8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
32fb8 01b             | ' received are handshakes and IN DATAx.
32fb8 01b             | '------------------------------------------------------------------------------
32fb8 01b             | ' On entry:
32fb8 01b             | ' On exit:
32fb8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
32fb8 01b             | '     returned.
32fb8 01b             | '------------------------------------------------------------------------------
32fb8 01b             | urx_packet
32fb8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
32fbc 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32fc0 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
32fc4 01e 1A 92 63 FD |                 getct   hct2
32fc8 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
32fcc 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
32fd0 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
32fd4 022             | .wait_sop
32fd4 022 22 A7 8A FA |                 rdpin   urx, dm
32fd8 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32fdc 024 08 00 90 CD |         if_c    jmp     #.get_pid
32fe0 025 FC 25 CC FB |                 jnct2   #.wait_sop
32fe4 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
32fe8 027             | .get_pid
32fe8 027 28 02 B0 FD |                 call    #urx_next
32fec 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
32ff0 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
32ff4 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
32ff8 02b             | .chk_pid
32ff8 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32ffc 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
33000 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
33004 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
33008 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3300c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
33010 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
33014 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
33018 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3301c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
33020 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
33024 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
33028 037             | .ack_resend
33028 037 22 A7 82 FA |                 rqpin   urx, dm
3302c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
33030 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
33034 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
33038 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3303c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
33040 03d             | .chk_eop
33040 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
33044 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
33048 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3304c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
33050 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
33054 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
33058 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3305c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
33060 045 2D 00 64 FD |                 ret
33064 046             | .idle
33064 046 22 A7 82 FA |                 rqpin   urx, dm
33068 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3306c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
33070 049 2D 00 64 FD |                 ret
33074 04a             | 
33074 04a             | '------------------------------------------------------------------------------
33074 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
33074 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
33074 04a             | ' if one is required.
33074 04a             | '------------------------------------------------------------------------------
33074 04a             | ' On entry:
33074 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
33074 04a             | ' On exit:
33074 04a             | '------------------------------------------------------------------------------
33074 04a             | utx_token
33074 04a 22 A7 82 FA |                 rqpin   urx, dm
33078 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3307c 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
33080 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
33084 04e 34 0D B0 CD |         if_c    call    #utx_pre
33088 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3308c 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
33090 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
33094 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
33098 053             | .next_byte
33098 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3309c 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
330a0 055             | .wait
330a0 055 40 46 72 FD |                 testp   dp                      wc
330a4 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
330a8 057 23 03 08 FC |                 akpin   dp
330ac 058 22 A5 22 FC |                 wypin   utx, dm
330b0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
330b4 05a             | 
330b4 05a             | '------------------------------------------------------------------------------
330b4 05a             | ' SETUP/OUT/INTERRUPT transaction.
330b4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
330b4 05a             | '------------------------------------------------------------------------------
330b4 05a             | ' On entry:
330b4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
330b4 05a             | '     CRC(b19..23).
330b4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
330b4 05a             | '   pkt_data - count of DATAx payload bytes to send.
330b4 05a             | ' On exit:
330b4 05a             | '------------------------------------------------------------------------------
330b4 05a             | txn_out
330b4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
330b8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
330bc 05c 00 00 C0 FF 
330c0 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
330c4 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
330c8 05f             | 
330c8 05f             |                 ' Fall through to utx_data
330c8 05f             | 
330c8 05f             | '------------------------------------------------------------------------------
330c8 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
330c8 05f             | ' calculated while the data byte is being shifted out. Since data stage
330c8 05f             | ' success/fail is not determined until the status stage of the transaction,
330c8 05f             | ' this routine is only concerned about the current DATAx packet.
330c8 05f             | '------------------------------------------------------------------------------
330c8 05f             | ' On entry:
330c8 05f             | '   PTRA - hub start address of the data to read.
330c8 05f             | '   pkt_cnt - data payload size.
330c8 05f             | ' On exit:
330c8 05f             | '------------------------------------------------------------------------------
330c8 05f             | utx_data
330c8 05f 22 A7 82 FA |                 rqpin   urx, dm
330cc 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
330d0 061 F4 FF 9F CD |         if_c    jmp     #utx_data
330d4 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
330d8 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
330dc 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
330e0 065 D8 0C B0 CD |         if_c    call    #utx_pre
330e4 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
330e8 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
330ec 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
330f0 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
330f4 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
330f8 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
330fc 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
33100 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
33104 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
33108 06f             | .read_byte
33108 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3310c 070 F0 00 B0 FD |                 call    #utx_byte
33110 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
33114 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
33118 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3311c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
33120 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
33124 076             | .send_crc
33124 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
33128 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3312c 078 D0 00 B0 FD |                 call    #utx_byte
33130 079 5D A5 EA F8 |                 getbyte utx, crc, #1
33134 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
33138 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3313c 07c             | 
3313c 07c             | '------------------------------------------------------------------------------
3313c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3313c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3313c 07c             | ' expects that the packet includes at least the CRC word.
3313c 07c             | '
3313c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3313c 07c             | ' was requested, which makes it difficult to determine where the data stops
3313c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3313c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3313c 07c             | ' USB-16 expected residual value of 0xB001.
3313c 07c             | '
3313c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3313c 07c             | ' so the caller can verify IN success before writing the data to its final
3313c 07c             | ' destination.
3313c 07c             | '------------------------------------------------------------------------------
3313c 07c             | ' On entry:
3313c 07c             | '   pkt_data - max byte count expected to be in the packet.
3313c 07c             | '   newb_flg - signals new byte ready when toggled.
3313c 07c             | ' On exit:
3313c 07c             | '   pkt_cnt - actual number of bytes read.
3313c 07c             | '------------------------------------------------------------------------------
3313c 07c             | urx_data
3313c 07c F7 75 03 F6 |                 mov     htmp2, pb
33140 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
33144 07e 00 00 C0 FF 
33148 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3314c 080 BA EF 03 F6 |                 mov     pb, htmp2
33150 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
33154 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
33158 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3315c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
33160 085             | .wait_byte
33160 085             | ' In-line rx for max speed
33160 085 22 A7 82 FA |                 rqpin   urx, dm
33164 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
33168 087 53 A5 02 F5 |                 and     utx, urx
3316c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
33170 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
33174 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
33178 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3317c 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
33180 08d DC FF 9F FD |                 jmp     #.wait_byte
33184 08e             | .get_byte
33184 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
33188 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3318c 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
33190 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
33194 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
33198 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3319c 094             | .end_crc
3319c 094 01 B8 06 F1 |                 add     pkt_cnt, #1
331a0 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
331a4 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
331a8 097 2D 00 64 1D |         if_a    ret
331ac 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
331ac 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
331ac 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
331ac 098             | ' to miss it, so cheat a bit and look for SOP clear here.
331ac 098 22 A7 82 FA |                 rqpin   urx, dm
331b0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
331b4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
331b8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
331b8 09b             | .chk_crc
331b8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
331bc 09c 58 00 00 FF 
331c0 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
331c4 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
331c8 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
331cc 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
331d0 0a1 34 09 B0 FD |                 call    #poll_waitx
331d4 0a2             | 
331d4 0a2             |                 ' Fall through to utx_handshake
331d4 0a2             | 
331d4 0a2             | '------------------------------------------------------------------------------
331d4 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
331d4 0a2             | ' the appropriate IP delay has been inserted.
331d4 0a2             | '------------------------------------------------------------------------------
331d4 0a2             | ' On entry:
331d4 0a2             | '   retval - handshake PID to send.
331d4 0a2             | ' On exit:
331d4 0a2             | '   retval unchanged.
331d4 0a2             | '------------------------------------------------------------------------------
331d4 0a2             | utx_handshake
331d4 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
331d8 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
331dc 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
331e0 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
331e4 0a6 5F A5 02 F6 |                 mov     utx, retval
331e8 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
331ec 0a8             | .idle
331ec 0a8 22 A7 82 FA |                 rqpin   urx, dm
331f0 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
331f4 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
331f8 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
331fc 0ac 08 09 90 FD |                 jmp     #poll_waitx
33200 0ad             | 
33200 0ad             | '------------------------------------------------------------------------------
33200 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
33200 0ad             | '------------------------------------------------------------------------------
33200 0ad             | ' On entry:
33200 0ad             | '   utx - byte to transmit.
33200 0ad             | ' On exit:
33200 0ad             | '------------------------------------------------------------------------------
33200 0ad             | utx_byte
33200 0ad 40 46 72 FD |                 testp   dp                      wc
33204 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
33208 0af 23 03 08 FC |                 akpin   dp
3320c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
33210 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
33214 0b2             | 
33214 0b2             | '------------------------------------------------------------------------------
33214 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
33214 0b2             | '------------------------------------------------------------------------------
33214 0b2             | ' On entry:
33214 0b2             | ' On exit:
33214 0b2             | '   retval - the byte read.
33214 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
33214 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
33214 0b2             | '     received.
33214 0b2             | '------------------------------------------------------------------------------
33214 0b2             | urx_next
33214 0b2 22 A7 8A FA |                 rdpin   urx, dm
33218 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3321c 0b4 53 A5 02 F5 |                 and     utx, urx
33220 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
33224 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
33228 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3322c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
33230 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
33234 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
33238 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3323c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
33240 0bd 2D 00 64 FD |                 ret
33244 0be             | 
33244 0be             | '------------------------------------------------------------------------------
33244 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
33244 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
33244 0be             | ' length, and the PID is not included in the CRC calculation:
33244 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
33244 0be             | '  CRC5  ENDP ADDRESS PID
33244 0be             | ' %00000_1111_1111111_xxxxxxxx
33244 0be             | '------------------------------------------------------------------------------
33244 0be             | ' On entry:
33244 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
33244 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
33244 0be             | ' On exit:
33244 0be             | '   ep_addr_pid - CRC value appended to the packet.
33244 0be             | '------------------------------------------------------------------------------
33244 0be             | calc_crc5
33244 0be FF 03 00 FF 
33248 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3324c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
33250 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
33254 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
33258 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3325c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
33260 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
33264 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
33268 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3326c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
33270 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
33274 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
33278 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3327c 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
33280 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
33284 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
33288 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3328c 0d0             | 
3328c 0d0             | '------------------------------------------------------------------------------
3328c 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3328c 0d0             | '------------------------------------------------------------------------------
3328c 0d0             | isr1_fsframe
3328c 0d0 1A 92 62 FD |                 getct   iframe_ct_base
33290 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33294 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33298 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3329c 0d4             | .wait
3329c 0d4 40 46 72 FD |                 testp   dp                      wc
332a0 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
332a4 0d6 23 03 08 FC |                 akpin   dp
332a8 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
332ac 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
332b0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
332b4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
332b8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
332bc 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
332c0 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
332c4 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
332c8 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
332cc 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
332d0 0e1 2C FF BF FD |                 call    #utx_byte
332d4 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
332d8 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
332dc 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
332e0 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
332e4 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
332e8 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
332ec 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
332f0 0e9 5B A5 42 F5 |                 or      utx, icrc
332f4 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
332f8 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
332fc 0ec 20 00 90 FD |                 jmp     #isr1_wait
33300 0ed             | isr1_lsframe
33300 0ed 1A 92 62 FD |                 getct   iframe_ct_base
33304 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33308 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3330c 0f0             | .wait
3330c 0f0 40 46 72 FD |                 testp   dp                      wc
33310 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
33314 0f2 23 03 08 FC |                 akpin   dp
33318 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3331c 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
33320 0f5             | isr1_wait
33320 0f5 22 A5 82 FA |                 rqpin   utx, dm
33324 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
33328 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3332c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
33330 0f9 03 00 00 FF 
33334 0fa FF B3 06 F5 |                 and     frame, ##$7ff
33338 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3333c 0fc F5 FF 3B FB |                 reti1
33340 0fd             | 
33340 0fd             | '------------------------------------------------------------------------------
33340 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
33340 0fd             | ' transaction will complete before the next frame is triggered.
33340 0fd             | '------------------------------------------------------------------------------
33340 0fd             | ' On entry:
33340 0fd             | ' On exit:
33340 0fd             | '------------------------------------------------------------------------------
33340 0fd             | wait_txn_ok
33340 0fd 1A 74 63 FD |                 getct   htmp2
33344 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
33348 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3334c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
33350 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
33354 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
33358 103 2D 00 64 FD |                 ret
3335c 104             | 
3335c 104             | '------------------------------------------------------------------------------
3335c 104             | ' A device connection was detected, or a bus reset was requested by the USB
3335c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3335c 104             | ' and perform a reset sequence prior to device enumeration.
3335c 104             | '------------------------------------------------------------------------------
3335c 104             | dev_reset
3335c 104 22 A7 82 FA |                 rqpin   urx, dm
33360 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
33364 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
33368 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3336c 108             | reset
3336c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
33370 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
33374 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
33378 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3337c 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
33380 10d 1A 92 62 FD |                 getct   iframe_ct_base
33384 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33388 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3338c 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
33390 111 24 70 07 F1 |                 add     htmp, #36
33394 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
33398 113             | .framewait
33398 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3339c 114 F8 FF 9F CD |         if_b    jmp     #.framewait
333a0 115 2D 00 64 FD |                 ret
333a4 116             | 
333a4 116             | '------------------------------------------------------------------------------
333a4 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
333a4 116             | '------------------------------------------------------------------------------
333a4 116             | ' On entry:
333a4 116             | '   PTRA - source address.
333a4 116             | '   PB - destination address.
333a4 116             | '   hr0 - length of copy, in bytes.
333a4 116             | ' On exit:
333a4 116             | '------------------------------------------------------------------------------
333a4 116             | hmemcpy
333a4 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
333a8 117 F7 71 43 FC |                 wrbyte  htmp, pb
333ac 118 01 EE 07 F1 |                 add     pb, #1
333b0 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
333b4 11a             | 
333b4 11a             | '------------------------------------------------------------------------------
333b4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
333b4 11a             | ' loop until the errant device is disconnected.
333b4 11a             | '------------------------------------------------------------------------------
333b4 11a             | ' On entry:
333b4 11a             | ' On exit:
333b4 11a             | '------------------------------------------------------------------------------
333b4 11a             | host_error
333b4 11a             |           if ERROR_LED >= 0
333b4 11a             |           end
333b4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
333b8 11b             | 
333b8 11b             | '------------------------------------------------------------------------------
333b8 11b             | ' Get HID descriptor buffer for current port
333b8 11b             | '------------------------------------------------------------------------------
333b8 11b             | ' On entry:
333b8 11b             | ' On exit:
333b8 11b             | '   PB - HID descriptor buffer pointer
333b8 11b             | '------------------------------------------------------------------------------
333b8 11b             | get_hid_descr_buffer
333b8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
333bc 11c 01 EE E7 F2 |                 cmpsub  pb, #1
333c0 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
333c4 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
333c8 11f             | 
333c8 11f             | 
333c8 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
333cc 120             | 
333cc 120             | ' USB commands and error codes
333cc 120 00 00 00 00 | cmd_data        long    0
333d0 121 00 00 00 00 | usb_err_code    long    ERR_NONE
333d4 122             | 
333d4 122             | ' Parameters block assigned at cog startup
333d4 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
333d8 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
333dc 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
333e0 125             | if ACTIVITY_LED >= 0
333e0 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
333e0 125             | end
333e0 125             | if ERROR_LED >= 0
333e0 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
333e0 125             | end
333e0 125 00 00 00 00 | hid_descr_p     long    0
333e4 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
333e4 126             | 'hkbd_report_p   long    0
333e4 126 00 00 00 00 | hub_descr_p     long    0
333e8 127 00 00 00 00 | urx_buff_p      long    0
333ec 128 00 00 00 00 | dev_desc_buff_p long    0
333f0 129 00 00 00 00 | con_desc_buff_p long    0
333f4 12a 00 00 00 00 | cache_start_p   long    0
333f8 12b 00 00 00 00 | cache_end_p     long    0
333fc 12c             | if EMUPAD_MAX_PLAYER > 0
333fc 12c             | emupad_out_ptr  long    0
333fc 12c             | end
333fc 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
33400 12d             | 
33400 12d             | hdev_init_start
33400 12d             | hdev_port       res     1
33400 12d             | hdev_port       res     1
33400 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
33400 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
33400 12d             | kbm_next_datax  res     1
33400 12d             | kbm_next_datax  res     1
33400 12d             | hub_intf_num    res     1
33400 12d             | hub_intf_num    res     1
33400 12d             | hub_next_datax  res     1
33400 12d             | hub_next_datax  res     1
33400 12d             | hub_status_chg  res     1
33400 12d             | hub_status_chg  res     1
33400 12d             | hub_port_status res     1
33400 12d             | hub_port_status res     1
33400 12d             | if HAVE_MOUSE
33400 12d             | ms_intf_num     res     1
33400 12d             | ms_intf_num     res     1
33400 12d             | ms_in_max_pkt   res     1
33400 12d             | ms_in_max_pkt   res     1
33400 12d             | end
33400 12d             | kb_intf_num     res     1
33400 12d             | kb_intf_num     res     1
33400 12d             | kb_interval     res     1
33400 12d             | kb_interval     res     1
33400 12d             | kb_in_max_pkt   res     1
33400 12d             | kb_in_max_pkt   res     1
33400 12d             | kb_max_index    res     1
33400 12d             | kb_max_index    res     1
33400 12d             | kb_led_states   res     1
33400 12d             | kb_led_states   res     1
33400 12d             | gp_intf_num     res     1
33400 12d             | gp_intf_num     res     1
33400 12d             | gp_interval     res     1
33400 12d             | gp_interval     res     1
33400 12d             | gp_max_index    res     1
33400 12d             | gp_max_index    res     1
33400 12d             | gp_descr_len    res     1+MAX_DEVICES
33400 12d             | gp_descr_len    res     1+MAX_DEVICES
33400 12d             | hdev_init_end
33400 12d             | 
33400 12d             | ' Initialized at cog startup:
33400 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
33400 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
33400 12d             | iframe_ct_new   res     1
33400 12d             | iframe_ct_new   res     1
33400 12d             | iframe_ct_base  res     1
33400 12d             | iframe_ct_base  res     1
33400 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
33400 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
33400 12d             | 
33400 12d             | ' This register block is reset to zero when a USB device connects
33400 12d             | hreg_init_start
33400 12d             | hstatus         res     1         ' Host status flags
33400 12d             | hstatus         res     1         ' Host status flags
33400 12d             | hctwait         res     1         ' Poll-based wait clocks
33400 12d             | hctwait         res     1         ' Poll-based wait clocks
33400 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
33400 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
33400 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
33400 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
33400 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
33400 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
33400 12d             | xfer_retry      res     1         ' Control transfer retry count
33400 12d             | xfer_retry      res     1         ' Control transfer retry count
33400 12d             | retry           res     1         ' Transaction retry count
33400 12d             | retry           res     1         ' Transaction retry count
33400 12d             | utx             res     1         ' Byte to transmit on USB
33400 12d             | utx             res     1         ' Byte to transmit on USB
33400 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
33400 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
33400 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
33400 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
33400 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
33400 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
33400 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
33400 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
33400 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
33400 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
33400 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
33400 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
33400 12d             | frame           res     1         ' USB 1ms frame counter value
33400 12d             | frame           res     1         ' USB 1ms frame counter value
33400 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
33400 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
33400 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
33400 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
33400 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
33400 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
33400 12d             | crc             res     1         ' Used for CRC16 calculation
33400 12d             | crc             res     1         ' Used for CRC16 calculation
33400 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
33400 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
33400 12d             | retval          res     1         ' Global success/fail return parameter
33400 12d             | retval          res     1         ' Global success/fail return parameter
33400 12d             | context_retval  res     1         ' Operation contextual return parameter
33400 12d             | context_retval  res     1         ' Operation contextual return parameter
33400 12d             | ' Device stuff
33400 12d             | hdev_id         res     1+MAX_DEVICES
33400 12d             | hdev_id         res     1+MAX_DEVICES
33400 12d             | hdev_bcd        res     1
33400 12d             | hdev_bcd        res     1
33400 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
33400 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
33400 12d             | ' Keyboard/mouse stuff
33400 12d             | hctrl_ep_addr   res     1
33400 12d             | hctrl_ep_addr   res     1
33400 12d             | hctrl_max_pkt   res     1
33400 12d             | hctrl_max_pkt   res     1
33400 12d             | hconfig_base    res     1
33400 12d             | hconfig_base    res     1
33400 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
33400 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
33400 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
33400 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
33400 12d             | hdev_class      res     1
33400 12d             | hdev_class      res     1
33400 12d             | hdev_subclass   res     1
33400 12d             | hdev_subclass   res     1
33400 12d             | hdev_protocol   res     1
33400 12d             | hdev_protocol   res     1
33400 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
33400 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
33400 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
33400 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
33400 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
33400 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
33400 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
33400 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
33400 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
33400 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
33400 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
33400 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
33400 12d             | if HAVE_MOUSE
33400 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
33400 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
33400 12d             | end
33400 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
33400 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
33400 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
33400 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
33400 12d             | hdev_ep_addr    res     1+MAX_DEVICES
33400 12d             | hdev_ep_addr    res     1+MAX_DEVICES
33400 12d             | hdev_out_addr   res     1
33400 12d             | hdev_out_addr   res     1
33400 12d             | 
33400 12d             | if EMUPAD_MAX_PLAYER > 0
33400 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
33400 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
33400 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
33400 12d             | end
33400 12d             | 
33400 12d             | hreg_init_end
33400 12d             | 
33400 12d             | hidr_start
33400 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
33400 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
33400 12d             | hidr_flags      res     1
33400 12d             | hidr_flags      res     1
33400 12d             | hidr_axis       res     3
33400 12d             | hidr_axis       res     3
33400 12d             | hidr_buttons    res     1
33400 12d             | hidr_buttons    res     1
33400 12d             | hidr_hats       res     1
33400 12d             | hidr_hats       res     1
33400 12d             | '' Above are actually useful values, 6 longs
33400 12d             | hidr_id         res     1
33400 12d             | hidr_id         res     1
33400 12d             | hidr_state      res     1
33400 12d             | hidr_state      res     1
33400 12d             | hidr_size       res     1
33400 12d             | hidr_size       res     1
33400 12d             | hidr_count      res     1
33400 12d             | hidr_count      res     1
33400 12d             | hidr_offset     res     1
33400 12d             | hidr_offset     res     1
33400 12d             | hidr_usage_idx  res     1
33400 12d             | hidr_usage_idx  res     1
33400 12d             | hidr_lminmax    res     1
33400 12d             | hidr_lminmax    res     1
33400 12d             | hidr_pminmax    res     1
33400 12d             | hidr_pminmax    res     1
33400 12d             | hidr_type       res     1
33400 12d             | hidr_type       res     1
33400 12d             | hidr_end
33400 12d             | 
33400 12d             | ' Variables dependent on the system freqency
33400 12d             | _var_64_lower_  res     1
33400 12d             | _var_64_lower_  res     1
33400 12d             | _var_64_upper_  res     1
33400 12d             | _var_64_upper_  res     1
33400 12d             | _12Mbps_        res     1
33400 12d             | _12Mbps_        res     1
33400 12d             | _1_5Mbps_       res     1
33400 12d             | _1_5Mbps_       res     1
33400 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
33400 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
33400 12d             | _1us_           res     1         ' 1us
33400 12d             | _1us_           res     1         ' 1us
33400 12d             | _10us_          res     1         ' 10us
33400 12d             | _10us_          res     1         ' 10us
33400 12d             | _33us_          res     1         ' 33us
33400 12d             | _33us_          res     1         ' 33us
33400 12d             | _txn_err_       res     1         ' 250us
33400 12d             | _txn_err_       res     1         ' 250us
33400 12d             | _500us_         res     1         ' 500us
33400 12d             | _500us_         res     1         ' 500us
33400 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
33400 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
33400 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
33400 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
33400 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
33400 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
33400 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
33400 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
33400 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
33400 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
33400 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
33400 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
33400 12d             | _preamble_wait_ res     1
33400 12d             | _preamble_wait_ res     1
33400 12d             | _1ms_           res     1         ' 1ms
33400 12d             | _1ms_           res     1         ' 1ms
33400 12d             | _2ms_           res     1         ' 2ms
33400 12d             | _2ms_           res     1         ' 2ms
33400 12d             | _suspend_wait_  res     1         ' 3ms
33400 12d             | _suspend_wait_  res     1         ' 3ms
33400 12d             | _4ms_           res     1         ' 4ms
33400 12d             | _4ms_           res     1         ' 4ms
33400 12d             | _xfer_wait_     res     1         ' 5ms
33400 12d             | _xfer_wait_     res     1         ' 5ms
33400 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
33400 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
33400 12d             | _reset_hold_    res     1         ' 15ms
33400 12d             | _reset_hold_    res     1         ' 15ms
33400 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
33400 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
33400 12d             | _21ms_          res     1         ' 21ms
33400 12d             | _21ms_          res     1         ' 21ms
33400 12d             | _100ms_         res     1         ' 100ms
33400 12d             | _100ms_         res     1         ' 100ms
33400 12d             | _500ms_         res     1         ' 500ms
33400 12d             | _500ms_         res     1         ' 500ms
33400 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
33400 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
33400 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
33400 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
33400 12d             | '------------------------------------------------------------------------------
33400 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
33400 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
33400 12d             | _usb_d_ls_nco_  res     1
33400 12d             | _usb_d_ls_nco_  res     1
33400 12d             | _usb_h_fs_nco_  res     1
33400 12d             | _usb_h_fs_nco_  res     1
33400 12d             | _usb_d_fs_nco_  res     1
33400 12d             | _usb_d_fs_nco_  res     1
33400 12d             | '------------------------------------------------------------------------------
33400 12d             | ' Scratch registers
33400 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
33400 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
33400 12d             | htmp1           res     1
33400 12d             | htmp1           res     1
33400 12d             | htmp2           res     1
33400 12d             | htmp2           res     1
33400 12d             | htmp3           res     1
33400 12d             | htmp3           res     1
33400 12d             | hrep            res     1         ' Repeat count
33400 12d             | hrep            res     1         ' Repeat count
33400 12d             | hsave0          res     1         ' Subroutine parameter saves
33400 12d             | hsave0          res     1         ' Subroutine parameter saves
33400 12d             | hsave1          res     1
33400 12d             | hsave1          res     1
33400 12d             | hsave2          res     1
33400 12d             | hsave2          res     1
33400 12d             | isrtmp1         res     1
33400 12d             | isrtmp1         res     1
33400 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
33400 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
33400 12d             | hr0             res     1         ' Multi-purpose registers
33400 12d             | hr0             res     1         ' Multi-purpose registers
33400 12d             | hr1             res     1
33400 12d             | hr1             res     1
33400 12d             | hr2             res     1
33400 12d             | hr2             res     1
33400 12d             | hr3             res     1
33400 12d             | hr3             res     1
33400 12d             | hpar1           res     1         ' Routine entry/exit parameters
33400 12d             | hpar1           res     1         ' Routine entry/exit parameters
33400 12d             | hpar2           res     1
33400 12d             | hpar2           res     1
33400 12d             | hpar3           res     1
33400 12d             | hpar3           res     1
33400 12d             | hct2            res     1         ' Function response bus turn-around timer
33400 12d             | hct2            res     1         ' Function response bus turn-around timer
33400 12d             | hct3            res     1         ' Keyboard/mouse poll timer
33400 12d             | hct3            res     1         ' Keyboard/mouse poll timer
33400 12d             | mod_cnt         res     1         ' Used in idle loops
33400 12d             | mod_cnt         res     1         ' Used in idle loops
33400 12d             |                 fit     $1F0
33400 12d             |                 org     $200
33400 200             | hlut_start
33400 200             | 
33400 200             | '------------------------------------------------------------------------------
33400 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
33400 200             | ' settings to startup defaults.
33400 200             | '------------------------------------------------------------------------------
33400 200             | ' On entry:
33400 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
33400 200             | '------------------------------------------------------------------------------
33400 200             | set_speed_full
33400 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
33404 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
33408 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3340c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
33410 204             | '                ret                             wcz     ' Restore caller flags on exit
33410 204             | 
33410 204             | '------------------------------------------------------------------------------
33410 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
33410 204             | ' is a downstream hub connected (not yet implemented), the baud generator
33410 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
33410 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
33410 204             | ' putting the smart pins into reset.
33410 204             | '------------------------------------------------------------------------------
33410 204             | ' On entry:
33410 204             | ' On exit: CZ flags restored to caller states
33410 204             | '------------------------------------------------------------------------------
33410 204             | set_speed_low
33410 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
33414 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
33418 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3341c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
33420 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
33424 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
33428 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3342c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
33430 20c             | 
33430 20c             | '------------------------------------------------------------------------------
33430 20c             | ' Perform configuration stuff required when a device intitially connects.
33430 20c             | '------------------------------------------------------------------------------
33430 20c             | ' On entry:
33430 20c             | ' On exit:
33430 20c             | '------------------------------------------------------------------------------
33430 20c             | on_connect
33430 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
33434 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
33438 20e             | .retry
33438 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3343c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
33440 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
33444 211 00 08 00 FF 
33448 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3344c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
33450 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
33454 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
33458 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3345c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
33460 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33464 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
33468 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3346c 21b 4C 03 B0 FD |                 call    #poll_waitx
33470 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
33474 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
33478 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3347c 21f B8 FF 9F FD |                 jmp     #.retry
33480 220             | .get_dev_desc
33480 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
33484 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
33488 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3348c 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
33490 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
33494 225 88 FB BF FD |                 call    #reset
33498 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3349c 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
334a0 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
334a4 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
334a8 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
334ac 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
334b0 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
334b4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
334b8 22e 04 00 00 FF 
334bc 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
334c0 230 34 FA BF FD |                 call    #calc_crc5
334c4 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
334c8 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
334cc 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
334d0 234 F7 AD C2 FA |                 rdbyte  total_data, pb
334d4 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
334d8 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
334dc 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
334e0 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
334e4 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
334e8 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
334ec 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
334f0 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
334f4 23d C4 02 B0 FD |                 call    #poll_waitx
334f8 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
334fc 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
33500 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
33504 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
33508 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3350c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33510 244 2D 00 64 5D |         if_nz   ret
33514 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
33518 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3351c 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
33520 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
33524 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
33528 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3352c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
33530 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
33534 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
33538 24e 2C FB 9F CD |         if_b    jmp     #host_error
3353c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
33540 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
33544 251 2D EC 63 FD |                 call    pa
33548 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3354c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
33550 254 2C EC 63 FD |                 jmp     pa
33554 255             | 
33554 255             | '------------------------------------------------------------------------------
33554 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
33554 255             | ' Status reporting is always in the function-to-host direction.
33554 255             | '------------------------------------------------------------------------------
33554 255             | ' On entry:
33554 255             | '   PTRA - start address of the SETUP data in hub.
33554 255             | '   PB - start address of the buffer/struct to be written to during the IN data
33554 255             | '     stage.
33554 255             | '   ep_addr_pid - device address, endpoint and CRC5.
33554 255             | ' On exit:
33554 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
33554 255             | '     contains the count of data stage bytes actually received, which must
33554 255             | '     always be <= the count requested.
33554 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
33554 255             | '     more specific USB operation error code.
33554 255             | '------------------------------------------------------------------------------
33554 255             | control_read
33554 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
33558 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3355c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
33560 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
33564 259             | .xfer_start
33564 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
33568 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3356c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33570 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
33574 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
33578 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3357c 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
33580 260 61 00 00 FF 
33584 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
33588 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3358c 263             | .data
3358c 263 56 B1 02 F6 |                 mov     pkt_data, total_data
33590 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
33594 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
33598 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3359c 267             | .nak_retry
3359c 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
335a0 268             | .in_retry
335a0 268 BC F6 BF FD |                 call    #txn_in
335a4 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
335a8 26a 28 00 90 AD |         if_z    jmp     #.commit
335ac 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
335b0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
335b4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
335b8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
335bc 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
335c0 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
335c4 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
335c8 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
335cc 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
335d0 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
335d4 275             | .commit
335d4 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
335d8 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
335dc 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
335e0 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
335e4 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
335e8 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
335ec 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
335f0 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
335f4 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
335f8 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
335fc 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
33600 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
33604 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
33608 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3360c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
33610 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
33614 285             | .pre_status
33614 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
33618 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3361c 287 00 B0 06 F6 |                 mov     pkt_data, #0
33620 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
33624 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
33628 28a 61 00 00 FF 
3362c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
33630 28c             | .out_retry
33630 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
33634 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33638 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3363c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
33640 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
33644 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
33648 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3364c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
33650 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33654 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
33658 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3365c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3365c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3365c 297             | ' ControlRead() transfer gets things unstuck most of the time...
3365c 297             | .xfer_retry
3365c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
33660 298 58 01 B0 FD |                 call    #poll_waitx
33664 299 8C F9 BF FD |                 call    #wait_txn_ok
33668 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3366c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
33670 29c C8 EF 03 F6 |                 mov     pb, hpar3
33674 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
33678 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3367c 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
33680 2a0             | 
33680 2a0             | '------------------------------------------------------------------------------
33680 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
33680 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
33680 2a0             | ' the SETUP data struct is filled with the required values.
33680 2a0             | '------------------------------------------------------------------------------
33680 2a0             | ' On entry:
33680 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
33680 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
33680 2a0             | '     stage.
33680 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
33680 2a0             | ' On exit:
33680 2a0             | '   retval - used to convey the success/failure of each stage.
33680 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
33680 2a0             | '     more specific USB operation error code.
33680 2a0             | '------------------------------------------------------------------------------
33680 2a0             | control_write
33680 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33684 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
33688 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3368c 2a3             | 
3368c 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
33690 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
33694 2a5 F7 91 03 F6 |                 mov     hpar3, pb
33698 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3369c 2a7             | .xfer_start
3369c 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
336a0 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
336a4 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
336a8 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
336ac 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
336b0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
336b4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
336b8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
336bc 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
336c0 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
336c4 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
336c8 2b2             | .data
336c8 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
336cc 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
336d0 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
336d4 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
336d8 2b6             | .out_retry
336d8 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
336dc 2b7 88 F6 BF FD |                 call    #txn_out
336e0 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
336e4 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
336e8 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
336ec 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
336f0 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
336f4 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
336f8 2be             | .commit
336f8 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
336fc 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
33700 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
33704 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
33708 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3370c 2c3             | pre_status_in
3370c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
33710 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
33714 2c5             | .status_retry
33714 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
33718 2c6 44 F5 BF FD |                 call    #txn_in
3371c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
33720 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
33724 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
33728 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3372c 2cb 2D 00 64 AD |         if_z    ret
33730 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
33734 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33738 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3373c 2cf             | '               ret                                     ' Caller must handle transfer retirement
3373c 2cf             | 
3373c 2cf             | '------------------------------------------------------------------------------
3373c 2cf             | ' Execute an IN interrupt transaction.
3373c 2cf             | '------------------------------------------------------------------------------
3373c 2cf             | ' On entry:
3373c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3373c 2cf             | '   hpar2 - Address of the IN data buffer
3373c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3373c 2cf             | ' On exit:
3373c 2cf             | '   retval - the result of the operation.
3373c 2cf             | '   hpar3 - the count of IN data bytes actually received.
3373c 2cf             | '------------------------------------------------------------------------------
3373c 2cf             | do_int_in
3373c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33740 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
33744 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
33748 2d2             | 
33748 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3374c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
33750 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
33754 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
33758 2d6             | .retry
33758 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3375c 2d7 00 F5 BF FD |                 call    #txn_in
33760 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
33764 2d9 1C 00 90 AD |         if_z    jmp     #.commit
33768 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3376c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
33770 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
33774 2dd 54 00 B0 FD |                 call    #retry_wait
33778 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3377c 2df 18 00 90 AD |         if_z    jmp     #.post_ret
33780 2e0 D4 FF 9F FD |                 jmp     #.retry
33784 2e1             | .commit
33784 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
33788 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3378c 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
33790 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
33794 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
33798 2e6             | .post_ret
33798 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3379c 2e7             | 
3379c 2e7             | 
3379c 2e7             | '------------------------------------------------------------------------------
3379c 2e7             | ' Resets the downstream hub port to FS
3379c 2e7             | '------------------------------------------------------------------------------
3379c 2e7             | dwnstream_reset
3379c 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
337a0 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
337a4 2e9             | 
337a4 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
337a8 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
337ac 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
337b0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
337b4 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
337b8 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
337bc 2ef             | 
337bc 2ef             | '------------------------------------------------------------------------------
337bc 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
337bc 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
337bc 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
337bc 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
337bc 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
337bc 2ef             | '------------------------------------------------------------------------------
337bc 2ef             | ' On entry:
337bc 2ef             | '   hctwait - wait interval in sysclocks.
337bc 2ef             | ' On exit:
337bc 2ef             | '------------------------------------------------------------------------------
337bc 2ef             | poll_waitx
337bc 2ef 1A 92 63 FD |                 getct   hct2
337c0 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
337c4 2f1             | .wait
337c4 2f1 FF 25 CC FB |                 jnct2   #.wait
337c8 2f2 2D 00 64 FD |                 ret
337cc 2f3             | 
337cc 2f3             | '------------------------------------------------------------------------------
337cc 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
337cc 2f3             | '------------------------------------------------------------------------------
337cc 2f3             | ' On entry:
337cc 2f3             | '   retval - transaction response PID or error code.
337cc 2f3             | ' On exit:
337cc 2f3             | '------------------------------------------------------------------------------
337cc 2f3             | retry_wait
337cc 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
337d0 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
337d4 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
337d8 2f6 14 00 90 AD |         if_z    jmp     #.nak
337dc 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
337e0 2f8 D8 FF BF FD |                 call    #poll_waitx
337e4 2f9             | .dec
337e4 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
337e8 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
337ec 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
337f0 2fc             | .nak
337f0 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
337f4 2fd C4 FF BF FD |                 call    #poll_waitx
337f8 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
337fc 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
33800 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
33804 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
33808 302 2D 00 64 FD |                 ret
3380c 303             | 
3380c 303             | host_reset
3380c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
33810 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
33814 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
33814 305 BD 01 05 FF 
33818 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3381c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
33820 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
33824 309             | ' Check to see if the system clock has been changed.
33824 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
33828 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3382c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
33830 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
33834 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33838 30e 40 46 62 FD |                 dirl    dp
3383c 30f             | 
3383c 30f 28 02 64 FD |                 setq    #1
33840 310 80 00 80 FF 
33844 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
33848 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3384c 313             | .enable
3384c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
33850 314 41 46 62 FD |                 dirh    dp
33854 315 1F 36 63 FD |                 waitx   _1us_
33858 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3385c 317             | 
3385c 317             |                 ' Handle Port protection enable and startup delay
3385c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
33860 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
33864 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
33868 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3386c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
33870 31c             | 
33870 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
33874 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
33878 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3387c 31f 00 00 04 F6 |                 mov     0-0, #0
33880 320             | .regloop
33880 320             | 
33880 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
33880 320             | 
33880 320             | discon_entry
33880 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
33884 321             | 
33884 321             |               
33884 321             |         if HAVE_HIDPAD
33884 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
33888 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3388c 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
33890 324 F7 01 68 FC |                 wrlong  #0,pb
33894 325             |         end
33894 325             |         if EMUPAD_MAX_PLAYER > 0
33894 325             |         end
33894 325             | 
33894 325             |                 ' Fall through to disconnected loop
33894 325             | 
33894 325             | '-----------------------------------------------------------------------------------------------------------------
33894 325             | ' Device connect handling (Section 7.1.7.3).
33894 325             | '-----------------------------------------------------------------------------------------------------------------
33894 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
33894 325             | ' device to connect (Section 7.1.7.3).
33894 325             | '-----------------------------------------------------------------------------------------------------------------
33894 325             | disconnected
33894 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
33898 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3389c 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
338a0 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
338a4 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
338a8 32a             |         if ACTIVITY_LED >= 0
338a8 32a             |         end
338a8 32a 22 A7 82 FA |                 rqpin   urx, dm
338ac 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
338b0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
338b4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
338b8 32e             | .se1_test
338b8 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
338bc 32f FC FE BF FD |                 call    #poll_waitx
338c0 330 22 A7 82 FA |                 rqpin   urx, dm
338c4 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
338c8 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
338cc 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
338d0 334             | .se1            'SE1 is a fatal error condition
338d0 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
338d4 335 E4 FE BF FD |                 call    #poll_waitx
338d8 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
338dc 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
338e0 338             | .connect_test                                           ' Test lines until stable J/K state seen
338e0 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
338e4 339 22 A7 82 FA |                 rqpin   urx, dm
338e8 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
338ec 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
338f0 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
338f4 33d             | connected
338f4 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
338f8 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
338fc 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
33900 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
33904 341             | .set_pulse
33904 341 1A 64 63 FD |                 getct   _pulse_time_
33908 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3390c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3390c 343             | ' of 1ms and make a correction, if necessary.
3390c 343             | '                mov     htmp, _1ms_
3390c 343             | '                subs    htmp, iframe_delta
3390c 343             | '                adds    _frame1ms_clks_, htmp
3390c 343             | '                debug(udec(_frame1ms_clks_))
3390c 343             | 
3390c 343             |                 ' Fall through to idle/processing loop
3390c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
33910 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
33914 345             | 
33914 345             | hidle
33914 345 22 A7 82 FA |                 rqpin   urx, dm
33918 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3391c 347 98 00 90 CD |         if_c    jmp     #.se0_test
33920 348 24 06 70 FD |                 pollct3                         wc
33924 349 68 00 90 3D |         if_nc   jmp     #.nopoll
33928 34a 1A 94 63 FD |                 getct   hct3
3392c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
33930 34c             | 
33930 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
33934 34d 00 70 E3 F8 |                 getbyte htmp
33938 34e             | 
33938 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3393c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
33940 350 40 00 90 AD |         if_z    jmp     #.poll
33944 351             | 
33944 351             |         if _HAVE_GAMEPAD
33944 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
33948 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3394c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
33950 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
33954 355 2C 00 90 AD |         if_z    jmp     #.poll
33958 356             |         end
33958 356             | 
33958 356             |         if HAVE_MOUSE
33958 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3395c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
33960 358 20 00 90 AD |         if_z    jmp     #.poll
33964 359             |         end
33964 359             | 
33964 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
33968 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3396c 35b 14 00 90 AD |         if_z    jmp     #.poll
33970 35c             | 
33970 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
33974 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
33978 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3397c 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
33980 360             |         if HAVE_MOUSE
33980 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
33984 361             |         else
33984 361             |         end
33984 361             | 
33984 361             | .poll
33984 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
33988 362 2D EC 63 FD |                 call    pa
3398c 363             | .skip_poll
3398c 363             | 
3398c 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
33990 364             | 
33990 364             | .nopoll
33990 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
33994 365 44 00 90 AD |         if_z    jmp     #hsuspend
33998 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3399c 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
339a0 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
339a4 369 1A 84 63 FD |                 getct   hr0
339a8 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
339ac 36b             |         if ACTIVITY_LED >= 0
339ac 36b             |         end
339ac 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
339b0 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
339b4 36d 5C FF 9F FD |                 jmp     #hidle
339b8 36e             | ' Check for extended SE0 state on the bus
339b8 36e             | .se0_test
339b8 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
339bc 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
339c0 370 22 A7 82 FA |                 rqpin   urx, dm
339c4 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
339c8 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
339cc 373 24 F6 BF FD |                 call    #wait_txn_ok
339d0 374 00 00 80 FF 
339d4 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
339d8 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
339d8 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
339dc 377             | 
339dc 377             | hsuspend
339dc 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
339e0 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
339e4 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
339e8 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
339ec 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
339f0 37c 00 96 07 F6 |                 mov     mod_cnt, #0
339f4 37d             | 
339f4 37d             |                 ' Fall through to resume wait loop
339f4 37d             | 
339f4 37d             | hwait_resume
339f4 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
339f8 37e 02 86 47 F0 |                 shr     hr1, #2
339fc 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
33a00 380             |         if ACTIVITY_LED >= 0
33a00 380             |         end
33a00 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
33a04 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
33a08 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
33a0c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
33a10 384 18 00 90 AD |         if_z    jmp     #.resume
33a14 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
33a18 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
33a1c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
33a20 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
33a24 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
33a28 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
33a2c 38b             | .resume
33a2c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
33a30 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
33a34 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
33a38 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
33a3c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
33a40 390 1F 70 63 FD |                 waitx   htmp
33a44 391 22 07 28 FC |                 wypin   #OUT_J, dm
33a48 392 01 70 47 F0 |                 shr     htmp, #1
33a4c 393 1F 70 63 FD |                 waitx   htmp
33a50 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33a54 395 1A 92 62 FD |                 getct   iframe_ct_base
33a58 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33a5c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33a60 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
33a64 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
33a68 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
33a6c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
33a70 39c             | 
33a70 39c             | '------------------------------------------------------------------------------
33a70 39c             | ' Send preamble to enable low-speed HUB ports
33a70 39c             | '------------------------------------------------------------------------------
33a70 39c             | ' On entry:
33a70 39c             | ' On exit:
33a70 39c             | '   USB baud rate set to low-speed
33a70 39c             | '------------------------------------------------------------------------------
33a70 39c             | utx_pre
33a70 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33a74 39d 40 46 62 FD |                 dirl    dp
33a78 39e 28 02 64 FD |                 setq    #1
33a7c 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
33a80 3a0 58 44 62 FD |                 drvl    dm
33a84 3a1 59 46 62 FD |                 drvh    dp
33a88 3a2             | 
33a88 3a2 1E 00 00 FF 
33a8c 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
33a90 3a4             | 
33a90 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
33a94 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
33a98 3a6 28 02 64 3D |         if_nc   setq    #1
33a9c 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
33aa0 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
33aa4 3a9             | .l1
33aa4 3a9             | 
33aa4 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33aa8 3aa 40 46 62 FD |                 dirl    dp
33aac 3ab 28 02 64 FD |                 setq    #1
33ab0 3ac 80 00 80 FF 
33ab4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
33ab8 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
33abc 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
33ac0 3b0 41 46 62 FD |                 dirh    dp
33ac4 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33ac8 3b2             | 
33ac8 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
33acc 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
33ad0 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
33ad4 3b5             | 
33ad4 3b5             | hlut_end
33ad4 3b5             |                 fit     $400
33ad4 3b5             |                 orgh
33ad4                 | if OVERLAP_MEMORY
33ad4                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
33ad4                 | end
33ad4                 | '------------------------------------------------------------------------------
33ad4                 | ' Routines called from cog space.
33ad4                 | '------------------------------------------------------------------------------
33ad4                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
33ad4                 | '------------------------------------------------------------------------------
33ad4                 | 
33ad4                 | '------------------------------------------------------------------------------
33ad4                 | ' USB host cog initialization.
33ad4                 | '------------------------------------------------------------------------------
33ad4                 | usb_host_init
33ad4                 |                 ' Initialize buffer pointers
33ad4                 |         if OVERLAP_MEMORY
33ad4                 |         else
33ad4     40 15 B0 FE |                 loc     pb, #hid_descr
33ad8                 |         end
33ad8     F7 4B 02 F6 |                 mov     hid_descr_p, pb
33adc                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
33adc                 |                 {
33adc                 |                 }
33adc                 |         
33adc                 |                 {
33adc                 |                 }
33adc                 |                 'loc     pb,#hkbd_report
33adc                 |                 'mov     hkbd_report_p,pb
33adc                 | 
33adc     08 1D B0 FE |                 loc     pb, #hub_descr
33ae0     F7 4D 02 F6 |                 mov     hub_descr_p, pb
33ae4     1D 1D B0 FE |                 loc     pb, #urx_buff
33ae8     F7 4F 02 F6 |                 mov     urx_buff_p, pb
33aec     95 1D B0 FE |                 loc     pb, #dev_desc_buff
33af0     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
33af4     9F 1D B0 FE |                 loc     pb, #con_desc_buff
33af8     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
33afc     18 15 B0 FE |                 loc     pb, #usb_cache_start
33b00     F7 55 02 F6 |                 mov     cache_start_p, pb
33b04     E9 1C B0 FE |                 loc     pb, #usb_cache_end
33b08     F7 57 02 F6 |                 mov     cache_end_p, pb
33b0c                 | 
33b0c                 |         if ERROR_LED >= 0
33b0c                 |         end
33b0c                 | 
33b0c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
33b0c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
33b0c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
33b0c                 | ' Configure and enable the Serial Host USB port.
33b0c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
33b10                 | 
33b10                 | '------------------------------------------------------------------------------
33b10                 | ' Timing calculations happen before any interrupt(s) are enabled.
33b10                 | '------------------------------------------------------------------------------
33b10                 | ' On entry:
33b10                 | '   htmp - current CLKFREQ value.
33b10                 | '------------------------------------------------------------------------------
33b10                 | hinit_usb_timings
33b10                 | '                getct   htmp2
33b10     B8 59 02 F6 |                 mov     save_sysclk, htmp
33b14     8D 5B 80 FF 
33b18     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
33b1c     18 30 63 FD |                 getqx   _12Mbps_
33b20     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
33b24     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
33b28     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
33b2c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
33b30     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
33b34     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
33b38     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
33b3c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
33b40     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
33b44     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
33b48     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
33b4c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
33b50     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
33b54     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
33b58     80 00 00 FF 
33b5c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
33b60     18 2C 63 FD |                 getqx   _var_64_lower_
33b64     19 2E 63 FD |                 getqy   _var_64_upper_
33b68     28 2C 63 FD |                 setq    _var_64_lower_
33b6c     65 CD 1D FF 
33b70     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
33b74     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
33b78     01 00 00 FF 
33b7c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
33b80     18 2C 63 FD |                 getqx   _var_64_lower_
33b84     19 2E 63 FD |                 getqy   _var_64_upper_
33b88     28 2C 63 FD |                 setq    _var_64_lower_
33b8c     A1 07 00 FF 
33b90     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
33b94     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
33b98     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
33b9c     09 36 57 F0 |                 shr     _1us_, #9               wc
33ba0     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
33ba4     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
33ba8     18 38 63 FD |                 getqx   _10us_
33bac     09 38 57 F0 |                 shr     _10us_, #9              wc
33bb0     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
33bb4     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
33bb8     18 3A 63 FD |                 getqx   _33us_
33bbc     09 3A 57 F0 |                 shr     _33us_, #9              wc
33bc0     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
33bc4     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
33bc8     18 3C 63 FD |                 getqx   _txn_err_
33bcc     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
33bd0     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
33bd4     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
33bd8     18 3E 63 FD |                 getqx   _500us_
33bdc     09 3E 57 F0 |                 shr     _500us_, #9             wc
33be0     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
33be4     01 00 00 FF 
33be8     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
33bec     18 40 63 FD |                 getqx   _txn_ok_ls_
33bf0     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
33bf4     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
33bf8     01 00 00 FF 
33bfc     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
33c00     18 42 63 FD |                 getqx   _txn_ok_fs_
33c04     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
33c08     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
33c0c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
33c10     05 00 00 FF 
33c14     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
33c18     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
33c1c     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
33c20     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
33c24     1C 00 00 FF 
33c28     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
33c2c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
33c30     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
33c34     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
33c38     00 00 00 FF 
33c3c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
33c40     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
33c44     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
33c48     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
33c4c     04 00 00 FF 
33c50     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
33c54     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
33c58     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
33c5c     8D 5B 00 FF 
33c60     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
33c64     18 4C 63 FD |                 getqx   _preamble_wait_
33c68     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
33c6c     01 00 00 FF 
33c70     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
33c74     18 2C 63 FD |                 getqx   _var_64_lower_
33c78     19 2E 63 FD |                 getqy   _var_64_upper_
33c7c     28 2C 63 FD |                 setq    _var_64_lower_
33c80     01 00 00 FF 
33c84     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
33c88     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
33c8c     09 4E 57 F0 |                 shr     _1ms_, #9               wc
33c90     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
33c94     FF FF 7F FF 
33c98     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
33c9c     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
33ca0     A7 51 03 F6 |                 mov     _2ms_, _1ms_
33ca4     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
33ca8     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
33cac     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
33cb0     A7 55 03 F6 |                 mov     _4ms_, _1ms_
33cb4     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
33cb8     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
33cbc     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
33cc0     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
33cc4     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
33cc8     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
33ccc     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
33cd0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
33cd4     A7 59 03 F6 |                 mov     _8ms_, _1ms_
33cd8     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
33cdc     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
33ce0     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
33ce4     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
33ce8     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
33cec     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
33cf0     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
33cf4     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
33cf8     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
33cfc     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
33d00     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
33d04                 | '        _ret_   mov     _1sec_, save_sysclk
33d04                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
33d04                 | '                ret
33d04                 | {
33d04                 | }
33d04                 | 
33d04                 | '------------------------------------------------------------------------------
33d04                 | ' Parse a configuration descriptor chain to see if the device is a recognized
33d04                 | ' one. If it is, start the task progression that will configure the device for
33d04                 | ' use.
33d04                 | '------------------------------------------------------------------------------
33d04                 | ' On entry:
33d04                 | '   hconfig_base - start address of the cached config descriptor chain.
33d04                 | ' On exit:
33d04                 | '------------------------------------------------------------------------------
33d04                 | hparse_con_desc
33d04     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
33d08     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
33d0c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
33d10     4E 70 FF F9 |                 movbyts htmp,#%%1032
33d14     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
33d18                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
33d18                 | 
33d18     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
33d1c     6E ED 03 F1 |                 add     pa, hconfig_base
33d20     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
33d24                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
33d24                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
33d24                 | ' that defines a keyboard and/or mouse.
33d24     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
33d28                 | .next_intf
33d28     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
33d2c     BC 01 90 3D |         if_ae   jmp     #hset_config
33d30     6E F3 03 F6 |                 mov     ptrb, hconfig_base
33d34     75 F3 03 F1 |                 add     ptrb, hnext_desc
33d38     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
33d3c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
33d40     0C 00 90 AD |         if_z    jmp     #.intf
33d44     80 71 C7 FA |                 rdbyte  htmp, ptrb
33d48     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
33d4c     D8 FF 9F FD |                 jmp     #.next_intf
33d50                 | .intf
33d50     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
33d54     00 90 07 F6 |                 mov     hpar3, #0
33d58     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
33d5c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
33d60     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
33d64     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
33d68                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
33d68                 | 
33d68                 | .endp
33d68     80 71 C7 FA |                 rdbyte  htmp, ptrb
33d6c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
33d70     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
33d74     78 00 90 3D |         if_ae   jmp     #.get_device
33d78     6E F3 03 F6 |                 mov     ptrb, hconfig_base
33d7c     75 F3 03 F1 |                 add     ptrb, hnext_desc
33d80     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
33d84     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
33d88     64 00 90 AD |         if_z    jmp     #.get_device
33d8c     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
33d90     04 00 90 AD |         if_z    jmp     #.get_ep
33d94     D0 FF 9F FD |                 jmp     #.endp
33d98                 | .get_ep
33d98     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
33d9c     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
33da0     0F 86 67 F0 |                 shl     hr1, #8 + 7
33da4     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
33da8     3F 00 00 FF 
33dac     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
33db0     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
33db4     00 8E 0F F2 |                 cmp     hpar2, #0               wz
33db8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
33dbc     00 90 0F F2 |                 cmp     hpar3, #0               wz
33dc0     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
33dc4     A0 FF 9F FD |                 jmp     #.endp
33dc8                 | .in_ep
33dc8     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
33dcc     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
33dd0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
33dd0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
33dd4     C2 89 DB F8 |                 setbyte hr2, hr0, #3
33dd8     8C FF 9F FD |                 jmp     #.endp
33ddc                 | .out_ep
33ddc     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
33de0     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
33de4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
33de4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
33de8     C2 8B DB F8 |                 setbyte hr3, hr0, #3
33dec     78 FF 9F FD |                 jmp     #.endp
33df0                 | 
33df0                 | .get_device
33df0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
33df4     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
33df8     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
33dfc     68 00 90 AD |         if_z    jmp     #.gamepad
33e00     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
33e04     AC 00 90 AD |         if_z    jmp     #.hub
33e08     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
33e0c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
33e10     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
33e14     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
33e18     4C 00 90 AD |         if_z    jmp     #.gamepad
33e1c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
33e20     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
33e24                 | .keyboard
33e24     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
33e28                 |         if HAVE_MOUSE
33e28     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
33e2c                 |         else
33e2c                 |         end
33e2c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
33e30     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
33e34     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33e38     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
33e3c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
33e40     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
33e44                 |                 'debug(udec(kb_intf_num))
33e44                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
33e44     E0 FE 9F FD |                 jmp     #.next_intf
33e48                 | if HAVE_MOUSE
33e48                 | .mouse
33e48     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
33e4c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
33e50     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
33e54     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
33e58     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33e5c                 |                 'getbyte ms_interval, hr2, #3
33e5c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
33e60     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
33e64                 |                 'debug(udec(kb_intf_num))
33e64                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
33e64     C0 FE 9F FD |                 jmp     #.next_intf
33e68                 | end
33e68                 | .gamepad
33e68     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
33e6c     C7 71 63 F5 |                 xor     htmp, hpar2
33e70     3F 00 00 FF 
33e74     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33e78     AC FE 9F AD |         if_z    jmp     #.next_intf
33e7c                 |         if HAVE_MOUSE
33e7c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
33e80     C7 71 63 F5 |                 xor     htmp, hpar2
33e84     3F 00 00 FF 
33e88     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33e8c     98 FE 9F AD |         if_z    jmp     #.next_intf
33e90                 |         end
33e90     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
33e94     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
33e98     8C FE 9F 5D |         if_nz   jmp     #.next_intf
33e9c                 | 
33e9c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33ea0     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
33ea4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33ea8     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
33eac     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
33eb0                 |                 'debug(udec(gp_intf_num))
33eb0                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
33eb0     74 FE 9F FD |                 jmp     #.next_intf
33eb4                 | .hub
33eb4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
33eb8     6C FE 9F 5D |         if_nz   jmp     #.next_intf
33ebc     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
33ec0     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
33ec4     60 FE 9F 5D |         if_nz   jmp     #.next_intf
33ec8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
33ecc     58 FE 9F 5D |         if_nz   jmp     #.next_intf
33ed0     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
33ed4     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
33ed8     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
33edc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33ee0     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
33ee4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
33ee8                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
33ee8     3C FE 9F FD |                 jmp     #.next_intf
33eec                 | 
33eec                 | '------------------------------------------------------------------------------
33eec                 | ' If a newly-connected device is recognized, do whatever is needed to configure
33eec                 | ' it according to its function, or functions. In the case of this boot protocol
33eec                 | ' keyboard/mouse class driver:
33eec                 | ' - SetConfiguration(config_num)
33eec                 | ' - SetProtocol(boot)
33eec                 | ' - SetIdle(indefinite)
33eec                 | ' - Enter the device interrupt IN polling task stage.
33eec                 | '------------------------------------------------------------------------------
33eec                 | ' On entry:
33eec                 | ' On exit:
33eec                 | '------------------------------------------------------------------------------
33eec                 | hset_config
33eec                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
33eec                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
33eec     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
33ef0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33ef4     00 00 0C F2 |                 cmp     0-0, #0                 wz
33ef8     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
33efc                 |         if HAVE_MOUSE
33efc     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
33f00                 |         end
33f00     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
33f04     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
33f08                 | .set_config
33f08     6C 0E D0 FE |                 loc     ptra, #set_config
33f0c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
33f10     6E ED 03 F1 |                 add     pa, hconfig_base
33f14     F6 8D C3 FA |                 rdbyte  hpar1, pa
33f18     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
33f1c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
33f20     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
33f24     A0 02 A0 FD |                 call    #control_write
33f28     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33f2c     2D 00 64 5D |         if_nz   ret
33f30                 | .kbd_config
33f30     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
33f34     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
33f38                 | 
33f38     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
33f3c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33f40     3F 00 00 FF 
33f44     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33f48     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
33f4c                 | 
33f4c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
33f50     34 0E D0 FE |                 loc     ptra, #set_protocol
33f54     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
33f58     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33f5c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
33f60     A0 02 A0 FD |                 call    #control_write
33f64     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33f68     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
33f6c     E4 02 90 5D |         if_nz   jmp     #.notify_client
33f70     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
33f74     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
33f78     30 03 B0 FD |                 call    #hset_idle
33f7c                 |                 'cmp     retval, #PID_ACK        wz
33f7c                 |         'if_nz   mov     hkbd_ep_addr, #0
33f7c                 |         'if_nz   jmp     #.notify_client
33f7c     A8 99 02 F6 |                 mov     hctwait, _2ms_
33f80     EF 02 A0 FD |                 call    #poll_waitx
33f84     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
33f88     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
33f8c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
33f90     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
33f94     2C 03 B0 FD |                 call    #hset_kbdled_report
33f98     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33f9c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
33fa0     B0 02 90 5D |         if_nz   jmp     #.notify_client
33fa4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
33fa8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33fac     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33fb0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33fb4     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
33fb8     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
33fbc     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
33fc0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
33fc4     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
33fc8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
33fcc     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
33fd0                 |         if !!HAVE_MOUSE
33fd0                 |         end
33fd0                 | 
33fd0                 | .mouse_config
33fd0                 | if HAVE_MOUSE
33fd0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
33fd4     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
33fd8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
33fdc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33fe0     3F 00 00 FF 
33fe4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33fe8     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
33fec                 | 
33fec                 |                 debug("mouse passed addr check")
33fec                 | 
33fec     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
33ff0     00 00 80 FF 
33ff4     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
33ff8     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
33ffc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
34000     55 02 A0 FD |                 call    #control_read
34004     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34008     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3400c     44 02 90 5D |         if_nz   jmp     #.notify_client
34010     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
34014     56 01 00 F6 |                 mov     0-0, total_data
34018     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3401c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3401c                 | 
3401c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
34020     64 0D D0 FE |                 loc     ptra, #set_protocol
34024     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
34028     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3402c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
34030     A0 02 A0 FD |                 call    #control_write
34034     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34038     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3403c     14 02 90 5D |         if_nz   jmp     #.notify_client
34040                 |                 debug("mouse passed SetProtocol")
34040     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
34044     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
34048     60 02 B0 FD |                 call    #hset_idle
3404c                 |                 'cmp     retval, #PID_ACK        wz
3404c                 |         'if_nz   mov     hmouse_ep_addr, #0
3404c                 |         'if_nz   jmp     #.notify_client
3404c                 |                 debug("mouse passed SetIdle")
3404c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
34050     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
34054     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34058     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3405c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
34060     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
34064     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
34068     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3406c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
34070     3F 00 00 FF 
34074     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
34078     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3407c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
34080     D0 01 90 FD |                 jmp     #.notify_client
34084                 | end
34084                 | .gamepad_config
34084                 | if _HAVE_GAMEPAD
34084     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34088     00 00 0C F2 |                 cmp     0-0, #0                 wz
3408c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
34090     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
34094     00 70 03 F6 |                 mov     htmp, 0-0
34098     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3409c     3F 00 00 FF 
340a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
340a4     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
340a8                 | 
340a8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
340ac     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
340b0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
340b4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
340b8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
340bc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
340c0     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
340c4     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
340c8     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
340cc     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
340d0     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
340d4     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
340d8     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
340dc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
340e0                 | 
340e0                 |                 if EMUPAD_MAX_PLAYER > 0
340e0                 |                 
340e0                 | .rule_loop           
340e0                 |                 end
340e0                 | 
340e0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
340e4     5C 00 90 AD |         if_e    jmp     #.xinput
340e8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
340ec     00 70 03 F6 |                 mov     htmp,0-0
340f0     01 A6 02 FF 
340f4     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
340f8     7C 00 90 AD |         if_e    jmp     #.ps3
340fc                 | 
340fc     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
34100     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
34104     00 00 80 5F 
34108     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3410c     03 00 80 AF 
34110     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
34114     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
34118     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3411c     55 02 A0 FD |                 call    #control_read
34120     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34124     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
34128     00 00 04 56 |         if_nz   mov     0-0, #0
3412c     24 01 90 5D |         if_nz   jmp     #.notify_client
34130     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
34134     56 01 00 F6 |                 mov     0-0, total_data
34138     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3413c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3413c                 | 
3413c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
34140     10 01 90 FD |                 jmp     #.notify_client
34144                 | .xinput
34144     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
34148     2D EF 03 F6 |                 mov     pb,hdev_port
3414c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
34150     03 EE 27 F3 |                 fle     pb,#3
34154     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
34158     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3415c                 | 
3415c     03 B0 06 F6 |                 mov     pkt_data, #3
34160     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
34164     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
34168     5A 00 A0 FD |                 call    #txn_out
3416c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
34170                 | 
34170     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
34174     DC 00 90 FD |                 jmp     #.notify_client
34178                 | .ps3
34178     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3417c     2D EF 03 F6 |                 mov     pb,hdev_port
34180     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
34184     04 EE 27 F3 |                 fle     pb,#4
34188     F7 EF C3 F9 |                 decod   pb
3418c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
34190                 | 
34190     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
34194     00 0C D0 FE |                 loc     ptra, #set_report
34198     01 00 80 FF 
3419c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
341a0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
341a4     03 61 5C FC |                 wrword  #48, ptra[wLength]
341a8     20 0C B0 FE |                 loc     pb, #ps3_command_buff
341ac     A0 02 A0 FD |                 call    #control_write
341b0                 | 
341b0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
341b4     E0 0B D0 FE |                 loc     ptra, #set_report
341b8     01 00 80 FF 
341bc     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
341c0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
341c4     03 09 5C FC |                 wrword  #4, ptra[wLength]
341c8     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
341cc     A0 02 A0 FD |                 call    #control_write
341d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
341d4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
341d8     00 00 04 56 |         if_nz   mov     0-0, #0
341dc     74 00 90 5D |         if_nz   jmp     #.notify_client
341e0                 | 
341e0     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
341e4     6C 00 90 FD |                 jmp     #.notify_client
341e8                 | end
341e8                 | 
341e8                 | .hub_config
341e8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
341ec     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
341f0     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
341f4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
341f8     3F 00 00 FF 
341fc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34200     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
34204                 | 
34204     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
34208     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3420c     26 EF 03 F6 |                 mov     pb, hub_descr_p
34210     55 02 A0 FD |                 call    #control_read
34214     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34218     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3421c     34 00 90 5D |         if_nz   jmp     #.notify_client
34220                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
34220                 | 
34220     26 F1 03 F6 |                 mov     ptra, hub_descr_p
34224     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
34228     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3422c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3422c                 | .pwr_loop
3422c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
34230     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
34234     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
34238     A0 02 A0 FD |                 call    #control_write
3423c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
34240                 | 
34240     B1 99 02 F6 |                 mov     hctwait, _500ms_
34244     B0 99 02 F1 |                 add     hctwait, _100ms_
34248     EF 02 A0 FD |                 call    #poll_waitx
3424c                 | 
3424c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
34250     00 00 90 FD |                 jmp     #.notify_client
34254                 | 
34254                 | .notify_client
34254     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
34258     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3425c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3425c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3425c     2D 00 64 FD |                 ret
34260                 | 
34260                 | '------------------------------------------------------------------------------
34260                 | ' Initialize the keyboard/mouse data area to start-up values.
34260                 | '------------------------------------------------------------------------------
34260                 | ' On entry:
34260                 | ' On exit:
34260                 | '------------------------------------------------------------------------------
34260                 | init_kbdm_data
34260     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
34264     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
34268                 | 
34268     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3426c     2B ED 03 F6 |                 mov     pa, cache_end_p
34270                 | .loop
34270     61 01 4C FC |                 wrbyte  #0, ptra++
34274     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
34278     F4 FF 9F CD |         if_b    jmp     #.loop
3427c                 |         
3427c                 |         if EMUPAD_MAX_PLAYER > 0
3427c                 |         end
3427c                 | 
3427c                 | 
3427c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
34280                 | .regloop
34280     00 EC 8F F9 |                 altd    pa
34284     00 00 04 F6 |                 mov     0-0, #0
34288     01 EC 07 F1 |                 add     pa, #1
3428c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
34290     EC FF 9F 5D |         if_nz   jmp     #.regloop
34294                 | 
34294     E1 E1 61 FF 
34298     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3429c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
342a0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
342a4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
342a8                 | 
342a8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
342ac                 | 
342ac                 | '------------------------------------------------------------------------------
342ac                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
342ac                 | ' function.
342ac                 | '------------------------------------------------------------------------------
342ac                 | ' On entry:
342ac                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
342ac                 | '   hpar2 - index number of the target interface.
342ac                 | ' On exit:
342ac                 | '------------------------------------------------------------------------------
342ac                 | hset_idle
342ac     A8 99 02 F6 |                 mov     hctwait, _2ms_
342b0     EF 02 A0 FD |                 call    #poll_waitx
342b4     D8 0A D0 FE |                 loc     ptra, #set_idle
342b8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
342bc     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
342c0     A0 02 80 FD |                 jmp     #control_write
342c4                 | 
342c4                 | '------------------------------------------------------------------------------
342c4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
342c4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
342c4                 | '------------------------------------------------------------------------------
342c4                 | ' On entry:
342c4                 | '   ep_addr_pid - device address and enpoint for the request.
342c4                 | ' On exit:
342c4                 | '   retval - transaction result.
342c4                 | '------------------------------------------------------------------------------
342c4                 | hset_kbdled_report
342c4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
342c8     CC 0A D0 FE |                 loc     ptra, #set_report
342cc     01 00 80 FF 
342d0     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
342d4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
342d8     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
342dc     27 EF 03 F6 |                 mov     pb, urx_buff_p
342e0     F7 77 42 FC |                 wrbyte  kb_led_states, pb
342e4     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
342e8                 | 
342e8                 | '------------------------------------------------------------------------------
342e8                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
342e8                 | '------------------------------------------------------------------------------
342e8                 | ' On entry:
342e8                 | ' On exit:
342e8                 | '------------------------------------------------------------------------------
342e8                 | hget_kbd_in_report
342e8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
342ec     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
342f0     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
342f4     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
342f8     CF 02 A0 FD |                 call    #do_int_in
342fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34300     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
34304                 | 
34304     00 90 0F F2 |                 cmp     hpar3, #0               wz
34308     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3430c                 | 
3430c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
34310     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
34314     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
34318     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3431c                 | 
3431c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
34320     18 00 B0 FD |                 call    #hkbd_compare
34324                 |         if EMUPAD_MAX_PLAYER > 0
34324                 |         end
34324                 | 
34324                 | .led_check
34324     3B 71 03 F6 |                 mov     htmp, kb_led_states
34328     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3432c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
34330     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
34334     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
34338     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3433c                 | 
3433c                 | '------------------------------------------------------------------------------
3433c                 | ' Compare current and previous keyboard data buffers for keypress changes.
3433c                 | '------------------------------------------------------------------------------
3433c                 | hkbd_compare
3433c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
34340     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
34344     61 73 07 FB |                 rdlong  htmp1, ptra++
34348     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3434c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
34350     61 73 07 FB |                 rdlong  htmp1, ptra++
34354     E1 75 07 FB |                 rdlong  htmp2, ptrb++
34358     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3435c     2D 00 64 AD |         if_z    ret
34360                 | 
34360     B4 13 D0 FE |                 loc     ptra, #hkbd_report
34364                 | 
34364                 |                 ' Handle modifiers
34364     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
34368     00 87 C7 FA |                 rdbyte  hr1, ptra
3436c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
34370     63 86 63 FD |                 mergew  hr1
34374     08 EC 07 F6 |                 mov     pa,#8
34378                 | .modloop
34378     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3437c     E8 8C 07 F6 |                 mov     hpar1,#$E8
34380     F6 8D 83 F1 |                 sub     hpar1,pa
34384     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
34388     FB ED 6F FB |                 djnz    pa,#.modloop
3438c                 | 
3438c     6F E0 75 FD | .release        modc    _set    wc
34390                 |                 'alts    hdev_port, #hid_report_p
34390                 |                 'mov     ptra, hid_report_p
34390     02 F0 07 F1 |                 add     ptra, #2
34394     06 EC 07 F6 |                 mov     pa, #6
34398     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3439c     20 00 90 AD |         if_z    jmp     #.rl3
343a0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
343a4     02 F2 07 F1 |                 add     ptrb, #2
343a8     06 EE 07 F6 |                 mov     pb, #6
343ac     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
343b0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
343b4     08 00 90 AD |         if_z    jmp     #.rl3
343b8     FC EF 6F FB |                 djnz    pb, #.rl2
343bc     68 00 B0 FD |                 call    #hkbd_translate
343c0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
343c4                 | 
343c4     00 90 07 F6 |                 mov     hpar3, #0
343c8     1F 90 27 F4 |                 bith    hpar3, #31
343cc                 | 
343cc     6F 00 74 FD | .press          modc    _clr    wc
343d0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
343d4     02 F0 07 F1 |                 add     ptra, #2
343d8     06 EC 07 F6 |                 mov     pa, #6
343dc     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
343e0     20 00 90 AD |         if_z    jmp     #.pl3
343e4     30 13 F0 FE |                 loc     ptrb, #hkbd_report
343e8     02 F2 07 F1 |                 add     ptrb, #2
343ec     06 EE 07 F6 |                 mov     pb, #6
343f0     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
343f4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
343f8     08 00 90 AD |         if_z    jmp     #.pl3
343fc     FC EF 6F FB |                 djnz    pb, #.pl2
34400     24 00 B0 FD |                 call    #hkbd_translate
34404     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
34408                 | 
34408     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3440c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
34410     28 02 64 FD |                 setq #1
34414     61 73 07 FB |                 rdlong  htmp1, ptra++
34418     28 02 64 FD |                 setq #1
3441c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
34420     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
34424                 | 
34424     2D 00 64 FD |                 ret
34428                 | 
34428                 | '------------------------------------------------------------------------------
34428                 | ' Translate keyboard scancode to ASCII
34428                 | '------------------------------------------------------------------------------
34428                 | ' On entry:
34428                 | '   hpar1 - scancode
34428                 | '   hpar2 - key modifiers state
34428                 | '       c - pressed (0) or released (1) flag
34428                 | ' On exit:
34428                 | '   hpar1 - bit     31 = 0 pressed, 1 released
34428                 | '               30..17 = unused
34428                 | '                   18 = scroll-lock state 
34428                 | '                   17 = caps-lock state
34428                 | '                   16 = num-lock state 
34428                 | '                15..8 = key modifiers state
34428                 | '                 7..0 = scancode
34428                 | '------------------------------------------------------------------------------
34428                 | hkbd_translate
34428     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3442c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
34430     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
34434     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
34438     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3443c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
34440                 | 
34440                 |         if EMUPAD_MAX_PLAYER > 0
34440                 | 
34440                 |         if EMUPAD_BT0_BIT >= 0
34440                 |         end
34440                 |         if EMUPAD_BT1_BIT >= 0
34440                 |         end
34440                 |         if EMUPAD_BT2_BIT >= 0
34440                 |         end
34440                 |         if EMUPAD_BT3_BIT >= 0
34440                 |         end
34440                 |         if EMUPAD_BT4_BIT >= 0
34440                 |         end
34440                 |         if EMUPAD_BT5_BIT >= 0
34440                 |         end
34440                 |         if EMUPAD_BT6_BIT >= 0
34440                 |         end
34440                 |         if EMUPAD_BT7_BIT >= 0
34440                 |         end
34440                 |         if EMUPAD_BT8_BIT >= 0
34440                 |         end
34440                 |         if EMUPAD_BT9_BIT >= 0
34440                 |         end
34440                 | 
34440                 |         end
34440     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
34444     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
34448     1F 8C 47 F4 |                 bitc    hpar1, #31
3444c                 |         if KEYQUEUE_SIZE > 0
3444c     C4 09 B0 FE |                 loc pb,#keyq_head
34450     F7 71 E3 FA |                 rdword htmp,pb
34454     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
34458     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3445c     B8 75 03 F6 |                 mov htmp2,htmp
34460     04 74 07 FA |                 mul htmp2,#4
34464     F7 75 03 F1 |                 add htmp2,pb
34468     02 74 07 F1 |                 add htmp2,#2
3446c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
34470     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
34474     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
34478     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3447c                 |         end
3447c     2D 00 7C FD |                 ret wcz
34480                 | 
34480                 | if HAVE_MOUSE
34480                 | '------------------------------------------------------------------------------
34480                 | ' Execute an IN interrupt transaction to poll for mouse activity.
34480                 | '------------------------------------------------------------------------------
34480                 | ' On entry:
34480                 | ' On exit:
34480                 | '------------------------------------------------------------------------------
34480                 | hget_mouse_in_report
34480     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
34484     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34488     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3448c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
34490     CF 02 A0 FD |                 call    #do_int_in
34494     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34498     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3449c                 | 
3449c     00 90 0F F2 |                 cmp     hpar3, #0               wz
344a0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
344a4                 | 
344a4     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
344a8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
344ac     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
344b0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
344b4                 | 
344b4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
344b8     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
344bc     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
344c0     01 90 87 31 |         if_ae   sub     hpar3, #1
344c4                 | 
344c4     40 09 90 FE |                 loc     pa, #mouse_limits
344c8     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
344cc                 | 
344cc                 |                 ' load xacc,yacc,zacc
344cc     28 04 64 FD |                 setq    #3-1
344d0     80 87 07 FB |                 rdlong  hr1,ptrb
344d4                 |                 ' load limits and outptr
344d4     28 04 64 FD |                 setq    #3-1
344d8     F6 73 03 FB |                 rdlong  htmp1,pa
344dc                 | 
344dc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
344e0     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
344e4     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
344e8     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
344ec     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
344f0     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
344f4     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
344f8     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
344fc                 |               
344fc                 | 
344fc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
34500     07 70 67 F7 |                 signx   htmp, #7
34504     B8 87 03 F1 |                 add     hr1,htmp
34508     00 72 0F F2 |                 cmp     htmp1,#0 wz
3450c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
34510     00 86 47 53 |         if_ne   fges    hr1,#0
34514                 | 
34514     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
34518     07 70 67 F7 |                 signx   htmp, #7
3451c     B8 89 03 F1 |                 add     hr2,htmp
34520     00 74 0F F2 |                 cmp     htmp2,#0 wz
34524     BA 89 63 53 |         if_ne   fles    hr2,htmp2
34528     00 88 47 53 |         if_ne   fges    hr2,#0
3452c                 |                 
3452c                 | 
3452c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
34530     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
34534     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
34538     B8 8B 03 A1 |         if_z    add     hr3,htmp
3453c                 | 
3453c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
34540     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
34544                 | 
34544                 |                 ' write back accumulators
34544     28 04 64 FD |                 setq    #3-1
34548     80 87 67 FC |                 wrlong  hr1,ptrb
3454c                 |                 ' if outptr set, write X/Y words
3454c     00 76 0F F2 |                 cmp htmp3,#0                    wz
34550     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
34554     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
34558     2D 00 64 FD |                 ret
3455c                 | end
3455c                 | 
3455c                 | '------------------------------------------------------------------------------
3455c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3455c                 | '------------------------------------------------------------------------------
3455c                 | ' On entry:
3455c                 | ' On exit:
3455c                 | '------------------------------------------------------------------------------
3455c                 | if _HAVE_GAMEPAD
3455c                 | hget_gp_in_report
3455c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
34560     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
34564                 | 
34564     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34568     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3456c     00 90 E3 F8 |                 getbyte hpar3
34570     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
34574     CF 02 A0 FD |                 call    #do_int_in
34578     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3457c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
34580                 | 
34580     00 90 0F F2 |                 cmp     hpar3, #0               wz
34584     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34588                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
34588                 | 
34588     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3458c     00 70 E3 F8 |                 getbyte htmp                            ' |
34590     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
34594     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
34598     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3459c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
345a0     B8 01 C0 F8 |                 setbyte htmp                            ' |
345a4                 | 
345a4                 | ' Note: the following code compares the current and previous reports
345a4                 | ' and process the data if there are changes to ease the debug output.
345a4                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
345a4                 | ' gpPreReport buffer.
345a4                 | 
345a4                 |                 ' ----- start of block to remove
345a4                 |                 {
345a4                 |                 }
345a4                 |                 ' ----- end of block to remove
345a4     F4 04 90 FE |                 loc pa,#hpad_translate
345a8     2A EC 63 FD |                 push pa
345ac                 | 
345ac                 |                 ' FALL THROUGH !!!!
345ac                 | 
345ac                 | '------------------------------------------------------------------------------
345ac                 | ' Decode controller report
345ac                 | '------------------------------------------------------------------------------
345ac                 | hid_decode
345ac                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
345ac     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
345b0     00 04 00 FF 
345b4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
345b8                 | 
345b8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
345bc                 | 
345bc     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
345c0     00 2A E3 F8 |                 getbyte hidr_type
345c4     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
345c8     34 02 90 AD |         if_z    jmp     #hpad_xinput
345cc     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
345d0     1C 03 90 AD |         if_z    jmp     #hpad_ps3
345d4     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
345d8     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
345dc     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
345e0                 |                 
345e0                 | 
345e0                 | '------------------------------------------------------------------------------
345e0                 | ' Handle HID controller (or mouse now
345e0                 | ' On entry:
345e0                 | '   ptrb - controller report
345e0                 | '------------------------------------------------------------------------------
345e0                 | hpad_hid
345e0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
345e4     F7 F1 03 F6 |                 mov     ptra, pb
345e8     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
345ec     00 EC 03 F6 |                 mov     pa, 0-0
345f0                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
345f0     19 2A 3B FF 
345f4     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
345f8                 | 
345f8                 | .next
345f8     00 EC 5F F2 |                 cmps    pa, #0      wcz
345fc     2D 00 7C ED |         if_be   ret     wcz
34600                 | 
34600     61 8D C7 FA |                 rdbyte  hpar1, ptra++
34604     01 EC 87 F1 |                 sub     pa, #1
34608     00 8E 07 F6 |                 mov     hpar2, #0
3460c                 | 
3460c     C6 71 03 F6 |                 mov     htmp, hpar1
34610     03 70 07 F5 |                 and     htmp, #$03
34614     01 70 0F F2 |                 cmp     htmp, #1    wz
34618     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3461c     07 8E 67 A7 |         if_z    signx   hpar2,#7
34620     01 EC 87 A1 |         if_z    sub     pa, #1
34624     02 70 0F F2 |                 cmp     htmp, #2    wz
34628     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3462c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
34630     02 EC 87 A1 |         if_z    sub     pa, #2
34634     03 70 0F F2 |                 cmp     htmp, #3    wz
34638     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3463c     04 EC 87 A1 |         if_z    sub     pa, #4
34640                 | 
34640     FC 8C 07 F5 |                 and     hpar1, #$FC
34644                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
34644                 | 
34644     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
34648     0C 01 90 AD |         if_z    jmp     #.report_id
3464c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
34650     24 01 90 AD |         if_z    jmp     #.usage_page
34654     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
34658     2C 01 90 AD |         if_z    jmp     #.usage
3465c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
34660     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
34664     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
34668     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3466c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
34670     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
34674     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
34678     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3467c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
34680     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
34684     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
34688     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3468c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
34690     64 FF 9F 5D |         if_nz   jmp     #.next
34694                 | 
34694     D8 1D A7 FB |                 tjf     hidr_state,#.next
34698                 | 
34698     03 8E 07 F5 |                 and     hpar2, #$03
3469c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
346a0     18 00 90 5D |         if_nz   jmp     #.skip
346a4                 | 
346a4     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
346a8     20 00 90 AD |         if_z    jmp     #.axes
346ac     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
346b0     5C 00 90 AD |         if_z    jmp     #.hats
346b4     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
346b8     70 00 90 AD |         if_z    jmp     #.buttons
346bc                 | .skip
346bc     8F 71 03 F6 |                 mov     htmp, hidr_size
346c0     90 71 03 FA |                 mul     htmp, hidr_count
346c4     B8 23 03 F1 |                 add     hidr_offset, htmp
346c8     2C FF 9F FD |                 jmp     #.next
346cc                 | .axes
346cc                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
346cc     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
346d0     90 87 03 F6 |                 mov     hr1, hidr_count
346d4                 | .l1
346d4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
346d8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
346dc     04 03 B0 FD |                 call    #hpad_getbits
346e0     64 03 B0 FD |                 call    #hpad_normalize
346e4     06 84 1F F2 |                 cmp     hr0, #6         wcz
346e8     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
346ec     00 88 43 C8 |         if_b    getnib  hr2
346f0     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
346f4     5F 01 20 C9 |         if_b    setword retval
346f8     01 84 07 C1 |         if_b    add     hr0, #1
346fc     8F 23 03 F1 |                 add     hidr_offset, hidr_size
34700     F4 87 6F FB |                 djnz    hr1, #.l1
34704                 | 
34704     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
34708     01 1C 07 F6 |                 mov     hidr_state, #1
3470c     E8 FE 9F FD |                 jmp     #.next
34710                 | .hats
34710                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
34710     91 8D 03 F6 |                 mov     hpar1, hidr_offset
34714     8F 8F 03 F6 |                 mov     hpar2, hidr_size
34718     C8 02 B0 FD |                 call    #hpad_getbits
3471c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
34720     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
34724     01 1C 07 F6 |                 mov     hidr_state, #1
34728     90 FF 9F FD |                 jmp     #.skip
3472c                 | .buttons
3472c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3472c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
34730     8F 8F 03 F6 |                 mov     hpar2, hidr_size
34734     90 8F 03 FA |                 mul     hpar2, hidr_count
34738     A8 02 B0 FD |                 call    #hpad_getbits
3473c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
34740     B8 BF 62 F0 |                 shl     retval, htmp
34744     5F 17 43 F5 |                 or      hidr_buttons, retval
34748     90 71 03 F1 |                 add     htmp, hidr_count
3474c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
34750     01 1C 07 F6 |                 mov     hidr_state, #1
34754     64 FF 9F FD |                 jmp     #.skip
34758                 | .report_id
34758     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3475c     2D 00 7C 5D |         if_nz   ret     wcz
34760     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
34764     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
34768     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3476c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
34770     01 F2 87 51 |         if_nz   sub     ptrb,#1
34774     80 FE 9F FD |                 jmp     #.next
34778                 | .usage_page
34778     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3477c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
34780     04 1C 07 A6 |         if_z    mov     hidr_state, #4
34784     70 FE 9F FD |                 jmp     #.next
34788                 | .usage
34788     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3478c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
34790     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
34794     01 1C 07 A6 |         if_z    mov     hidr_state, #1
34798     5C FE 9F AD |         if_z    jmp     #.next
3479c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
347a0     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
347a4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
347a8     4C FE 9F AD |         if_z    jmp     #.next
347ac     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
347b0     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
347b4     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
347b8     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
347bc     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
347c0     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
347c4     10 00 90 AD |         if_z    jmp     #.usage_axis
347c8     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
347cc     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
347d0     03 1C 07 A6 |         if_z    mov     hidr_state, #3
347d4     20 FE 9F FD |                 jmp     #.next
347d8                 | .usage_axis
347d8     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
347dc     18 FE 9F CD |         if_b    jmp     #.next
347e0     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
347e4     C7 01 00 F8 |                 setnib  hpar2
347e8                 | 
347e8     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
347ec     C7 8F C3 F9 |                 decod   hpar2
347f0     C7 0F 43 F5 |                 or      hidr_flags, hpar2
347f4                 | 
347f4     01 24 07 F1 |                 add     hidr_usage_idx, #1
347f8     02 1C 07 F6 |                 mov     hidr_state, #2
347fc     F8 FD 9F FD |                 jmp     #.next
34800                 | 
34800                 | '------------------------------------------------------------------------------
34800                 | ' Handle XInput controller
34800                 | ' On entry:
34800                 | '   ptrb - controller report
34800                 | '------------------------------------------------------------------------------
34800                 | '   Default implementation translates the report to a pseudo-defacto hid
34800                 | '   standard and jumps to hpad_translate for actions.
34800                 | '   Implementors may take specific actions for this kind of controller.
34800                 | '------------------------------------------------------------------------------
34800                 | hpad_xinput
34800     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
34804     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
34808     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3480c     14 70 0F F2 |                 cmp     htmp, #$14      wz
34810     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
34814                 | 
34814                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
34814                 | 
34814     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
34818     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3481c                 | 
3481c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
34820     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
34824     5F BF 22 F6 |                 not     retval
34828     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3482c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
34830     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
34834     5F BF 22 F6 |                 not     retval
34838     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3483c                 | 
3483c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
34840     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
34844     C0 BE 1E F2 |                 cmp     retval, #192    wcz
34848     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3484c     F8 01 B0 FD |                 call    #hpad_normalize
34850     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
34854     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
34858     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3485c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
34860     E4 01 B0 FD |                 call    #hpad_normalize
34864     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
34868                 | 
34868     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3486c     81 BF E6 FA |                 rdword  retval, ptrb[1]
34870     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
34874     00 16 47 F4 |                 bitc    hidr_buttons, #0
34878     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3487c     01 16 47 F4 |                 bitc    hidr_buttons, #1
34880     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
34884     02 16 47 F4 |                 bitc    hidr_buttons, #2
34888     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3488c     03 16 47 F4 |                 bitc    hidr_buttons, #3
34890     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
34894     04 16 47 F4 |                 bitc    hidr_buttons, #4
34898     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3489c     05 16 47 F4 |                 bitc    hidr_buttons, #5
348a0     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
348a4     08 16 47 F4 |                 bitc    hidr_buttons, #8
348a8     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
348ac     09 16 47 F4 |                 bitc    hidr_buttons, #9
348b0     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
348b4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
348b8     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
348bc     0B 16 47 F4 |                 bitc    hidr_buttons, #11
348c0     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
348c4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
348c8                 | 
348c8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
348cc     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
348d0     7A BB 7A FF 
348d4     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
348d8     F9 FF 7F FF 
348dc     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
348e0     B9 71 5F F9 |                 altgn   htmp, #htmp1
348e4     00 70 43 F8 |                 getnib  htmp
348e8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
348ec                 | 
348ec     AC 01 90 FD |                 jmp     #hpad_translate
348f0                 | 
348f0                 | '------------------------------------------------------------------------------
348f0                 | ' Handle PS3 controller
348f0                 | ' On entry:
348f0                 | '   ptrb - controller report
348f0                 | '------------------------------------------------------------------------------
348f0                 | '   Default implementation translates the report to a pseudo-defacto hid
348f0                 | '   standard and jumps to hpad_translate for actions.
348f0                 | '   Implementors may take specific actions for this kind of controller.
348f0                 | '------------------------------------------------------------------------------
348f0                 | hpad_ps3
348f0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
348f4     01 70 0F F2 |                 cmp     htmp, #$01      wz
348f8     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
348fc                 | 
348fc                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
348fc                 | 
348fc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
34900     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
34904     40 01 B0 FD |                 call    #hpad_normalize
34908     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3490c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
34910     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
34914     30 01 B0 FD |                 call    #hpad_normalize
34918     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3491c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
34920     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
34924     20 01 B0 FD |                 call    #hpad_normalize
34928     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3492c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
34930     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
34934     10 01 B0 FD |                 call    #hpad_normalize
34938     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3493c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
34940     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
34944                 | 
34944     08 8C 07 F6 |                 mov     hpar1, #8
34948     13 8E 07 F6 |                 mov     hpar2, #19
3494c     94 00 B0 FD |                 call    #hpad_getbits
34950                 | 
34950     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
34954     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
34958     00 16 47 F4 |                 bitc    hidr_buttons, #0
3495c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
34960     01 16 47 F4 |                 bitc    hidr_buttons, #1
34964     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
34968     02 16 47 F4 |                 bitc    hidr_buttons, #2
3496c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
34970     03 16 47 F4 |                 bitc    hidr_buttons, #3
34974     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
34978     04 16 47 F4 |                 bitc    hidr_buttons, #4
3497c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
34980     05 16 47 F4 |                 bitc    hidr_buttons, #5
34984     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
34988     06 16 47 F4 |                 bitc    hidr_buttons, #6
3498c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
34990     07 16 47 F4 |                 bitc    hidr_buttons, #7
34994     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
34998     08 16 47 F4 |                 bitc    hidr_buttons, #8
3499c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
349a0     09 16 47 F4 |                 bitc    hidr_buttons, #9
349a4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
349a8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
349ac     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
349b0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
349b4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
349b8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
349bc                 | 
349bc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
349c0     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
349c4     09 FA 79 FF 
349c8     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
349cc     FF FA 7F FF 
349d0     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
349d4     B9 71 5F F9 |                 altgn   htmp, #htmp1
349d8     00 70 43 F8 |                 getnib  htmp
349dc     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
349e0                 | 
349e0     B8 00 90 FD |                 jmp     #hpad_translate
349e4                 | 
349e4                 | '------------------------------------------------------------------------------
349e4                 | ' Read bits from report data buffer
349e4                 | '------------------------------------------------------------------------------
349e4                 | ' On entry:
349e4                 | '   PTRB - report buffer
349e4                 | '   hpar1 - start bit
349e4                 | '   hpar2 - number of bits
349e4                 | ' On exit:
349e4                 | '   retval - bits
349e4                 | '------------------------------------------------------------------------------
349e4                 | hpad_getbits
349e4     C6 71 03 F6 |                 mov     htmp, hpar1
349e8     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
349ec     F9 71 03 F1 |                 add     htmp, ptrb
349f0     B8 BF 02 FB |                 rdlong  retval, htmp
349f4                 | 
349f4     C6 73 03 F6 |                 mov     htmp1, hpar1
349f8     07 72 07 F5 |                 and     htmp1, #$07     ' shift
349fc     B9 BF 42 F0 |                 shr     retval, htmp1
34a00                 | 
34a00     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
34a04     10 00 90 1D |         if_a    jmp     #.l1
34a08                 | 
34a08     C7 8F C3 F9 |                 decod   hpar2
34a0c     01 8E 87 F1 |                 sub     hpar2, #1
34a10     C7 BF 02 F5 |                 and     retval, hpar2
34a14     2D 00 64 FD |                 ret
34a18                 | .l1
34a18     FF 7F 00 FF 
34a1c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
34a20     03 70 07 F1 |                 add     htmp, #3
34a24     B8 75 03 FB |                 rdlong  htmp2, htmp
34a28     18 8E 87 F1 |                 sub     hpar2, #24
34a2c     C7 8F C3 F9 |                 decod   hpar2
34a30     01 8E 87 F1 |                 sub     hpar2, #1
34a34     B9 75 43 F0 |                 shr     htmp2, htmp1
34a38     C7 75 03 F5 |                 and     htmp2, hpar2
34a3c     18 74 67 F0 |                 shl     htmp2, #24
34a40     BA BF 42 F5 |                 or      retval, htmp2
34a44     2D 00 64 FD |                 ret
34a48                 | 
34a48                 | '------------------------------------------------------------------------------
34a48                 | ' Normalize value to signed word (-32768 / 32767)
34a48                 | '------------------------------------------------------------------------------
34a48                 | ' On entry:
34a48                 | '   retval - value to normalize
34a48                 | '   hidr_lminmax - min (word 1) max (word 0) value range
34a48                 | '   - or -
34a48                 | '   hidr_pminmax - min (word 1) max (word 0) value range
34a48                 | '   hidr_size - value bits length
34a48                 | ' On exit:
34a48                 | '   retval - normalized value
34a48                 | '------------------------------------------------------------------------------
34a48                 | hpad_normalize
34a48     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
34a4c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
34a50     2D 00 64 AD |         if_z    ret
34a54     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
34a58     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
34a5c     0F 72 77 F7 |                 signx   htmp1, #15      wc
34a60     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
34a64     00 BE 66 C7 |         if_c    signx   retval, #0-0
34a68     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
34a6c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
34a70     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
34a74     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
34a78     B8 71 53 F6 |                 abs     htmp            wc
34a7c     1F BE 0E F4 |                 testb   retval, #31     wz
34a80     5F BF 42 F6 |                 abs     retval
34a84     B8 BF 12 FD |                 qdiv    retval, htmp
34a88     18 BE 62 FD |                 getqx   retval
34a8c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
34a90     C0 FF 7F FF 
34a94     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
34a98     2D 00 64 FD |                 ret
34a9c                 | 
34a9c                 | '------------------------------------------------------------------------------
34a9c                 | ' Perform controller actions
34a9c                 | ' On entry:
34a9c                 | '    hidr_id        report id
34a9c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
34a9c                 | '                      X = hidr_axis+0, #0
34a9c                 | '                      Y = hidr_axis+0, #1
34a9c                 | '                      Z = hidr_axis+1, #0
34a9c                 | '                     RX = hidr_axis+1, #1
34a9c                 | '                     RY = hidr_axis+2, #0
34a9c                 | '                     RZ = hidr_axis+2, #1
34a9c                 | '    hidr_buttons   buttons state (bits 0 to 31)
34a9c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
34a9c                 | '
34a9c                 | '                     -------3 -------2 -------1 -------0 byte
34a9c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
34a9c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
34a9c                 | '                                zyx||| |||||||| ++++++++ n. buttons
34a9c                 | '                                |||||| ||||++++--------- n. axes
34a9c                 | '                                |||||| ++++------------- n. hats
34a9c                 | '                                ++++++------------------ valid axes
34a9c                 | '------------------------------------------------------------------------------
34a9c                 | hpad_translate
34a9c                 | 
34a9c                 | 
34a9c                 |         if HAVE_HIDPAD
34a9c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
34aa0     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
34aa4     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
34aa8     01 70 E7 F2 |                 cmpsub  htmp,#1
34aac     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
34ab0     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
34ab4     2D 00 7C 3D |         if_ae   ret     wcz
34ab8     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
34abc     B8 F3 03 F1 |                 add     ptrb,htmp
34ac0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
34ac4     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
34ac8     28 0C 64 FD |                 setq    #7-1
34acc     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
34ad0                 |         end
34ad0                 | 
34ad0                 | 
34ad0                 |         if EMUPAD_MAX_PLAYER > 0
34ad0                 | .emupad_no_hat
34ad0                 |         if EMUPAD_BT0_BIT >= 0
34ad0                 |         end
34ad0                 |         if EMUPAD_BT1_BIT >= 0
34ad0                 |         end
34ad0                 |         if EMUPAD_BT2_BIT >= 0
34ad0                 |         end
34ad0                 |         if EMUPAD_BT3_BIT >= 0
34ad0                 |         end
34ad0                 |         if EMUPAD_BT4_BIT >= 0
34ad0                 |         end
34ad0                 |         if EMUPAD_BT5_BIT >= 0
34ad0                 |         end
34ad0                 |         if EMUPAD_BT6_BIT >= 0
34ad0                 |         end
34ad0                 |         if EMUPAD_BT7_BIT >= 0
34ad0                 |         end
34ad0                 |         if EMUPAD_BT8_BIT >= 0
34ad0                 |         end
34ad0                 |         if EMUPAD_BT9_BIT >= 0
34ad0                 |         end
34ad0                 | .emupad_slot_over
34ad0                 |         end
34ad0                 | 
34ad0                 |         if 0
34ad0                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
34ad0                 | 
34ad0                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
34ad0                 | 
34ad0                 |         end
34ad0     2D 00 64 FD |                 ret
34ad4                 | end
34ad4                 | 
34ad4                 | if EMUPAD_MAX_PLAYER > 0
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | ' Clear EmuPad state
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | emupad_reset
34ad4                 | 
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | ' Get EmuPad Player number for current device (into retval)
34ad4                 | ' Z flag is also set if current device is valid
34ad4                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | emupad_getnum
34ad4                 | .loop
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | emupad_discon
34ad4                 | .loop         
34ad4                 |         
34ad4                 |         ' FALL THROUGH!!!
34ad4                 | 
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | ' Update EmuPad reports (all of them...)
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | emupad_write_reports
34ad4                 | .devloop
34ad4                 | 
34ad4                 | end
34ad4                 | 
34ad4                 | 
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | ' On entry:
34ad4                 | ' On exit:
34ad4                 | '------------------------------------------------------------------------------
34ad4                 | hget_hub_status
34ad4     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
34ad8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34adc     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
34ae0     01 90 2F F9 |                 setword hpar3, #1, #1
34ae4     CF 02 A0 FD |                 call    #do_int_in
34ae8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34aec     0C 00 90 AD |         if_z    jmp     #.data
34af0     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
34af4     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
34af8     2D 00 64 FD |                 ret
34afc                 | .data
34afc     00 90 0F F2 |                 cmp     hpar3, #0               wz
34b00     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34b04                 | 
34b04     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
34b08     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
34b0c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
34b10     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
34b14                 |                 debug(ubin_long(hub_status_chg))
34b14                 | 
34b14     01 5A 06 F6 |                 mov     hdev_port, #1
34b18                 | .loop
34b18     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
34b1c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
34b20     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
34b24     F0 FF 9F 3D |         if_nc   jmp     #.loop
34b28     2D 00 64 FD |                 ret
34b2c                 | 
34b2c                 | hub_port_handler
34b2c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
34b30     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34b34     27 EF 03 F6 |                 mov     pb, urx_buff_p
34b38     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34b3c     55 02 A0 FD |                 call    #control_read
34b40     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
34b44                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
34b44                 | 
34b44     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
34b48     50 01 90 5D |         if_x0   jmp     #.other
34b4c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
34b50     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
34b54     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34b58     A0 02 A0 FD |                 call    #control_write
34b5c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
34b60     7C 01 90 5D |         if_x0   jmp     #.disconnect
34b64     B0 99 02 F6 |                 mov     hctwait, _100ms_
34b68     EF 02 A0 FD |                 call    #poll_waitx
34b6c                 | 
34b6c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
34b70     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
34b74     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34b78     A0 02 A0 FD |                 call    #control_write
34b7c                 | 
34b7c     02 76 07 F6 |                 mov     htmp3, #2
34b80                 | .wait_reset
34b80     AC 99 02 F6 |                 mov     hctwait, _8ms_
34b84     EF 02 A0 FD |                 call    #poll_waitx
34b88     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34b8c     27 EF 03 F6 |                 mov     pb, urx_buff_p
34b90     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34b94     55 02 A0 FD |                 call    #control_read
34b98     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
34b9c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
34ba0     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
34ba4                 | 
34ba4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
34ba8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
34bac     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34bb0     A0 02 A0 FD |                 call    #control_write
34bb4                 | 
34bb4     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
34bb8                 | .wait_recover
34bb8     A7 99 02 F6 |                 mov     hctwait, _1ms_
34bbc     EF 02 A0 FD |                 call    #poll_waitx
34bc0     FD 71 6F FB |                 djnz    htmp,#.wait_recover
34bc4                 | 
34bc4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34bc8     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
34bcc     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
34bd0                 | 
34bd0     00 08 00 FF 
34bd4     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
34bd8     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
34bdc     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
34be0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
34be4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
34be8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34bec     48 01 90 5D |         if_nz   jmp     #.done
34bf0                 | .get_dev_desc
34bf0     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
34bf4     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
34bf8     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
34bfc     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
34c00     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
34c04     01 71 57 FC |                 wrword  htmp, ptra[wValue]
34c08     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
34c0c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34c10     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
34c14     AC 99 02 F6 |                 mov     hctwait, _8ms_
34c18     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
34c1c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
34c20     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
34c24     BE 00 A0 FD |                 call    #calc_crc5
34c28     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
34c2c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
34c30     F7 AD C2 FA |                 rdbyte  total_data, pb
34c34     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
34c38     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
34c3c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34c40     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
34c44     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
34c48     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
34c4c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
34c4c     9F 99 02 F6 |                 mov     hctwait, _500us_
34c50     EF 02 A0 FD |                 call    #poll_waitx
34c54     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
34c58     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
34c5c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
34c60     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
34c64     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34c68     CC 00 90 5D |         if_nz   jmp     #.done
34c6c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
34c70     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
34c74     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
34c78     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
34c7c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
34c80     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
34c84     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
34c88     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
34c8c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
34c90     A4 00 90 CD |         if_b    jmp     #.done
34c94     6C F0 BF FD |                 call    #hparse_con_desc
34c98     9C 00 90 FD |                 jmp     #.done
34c9c                 | 
34c9c                 | .other
34c9c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
34ca0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
34ca4     28 00 90 AD |         if_x1   jmp     #.reset_feature
34ca8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
34cac     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
34cb0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
34cb4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
34cb8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
34cbc     10 00 90 AD |         if_x1   jmp     #.reset_feature
34cc0     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
34cc4     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
34cc8     04 00 90 AD |         if_x1   jmp     #.reset_feature
34ccc     68 00 90 FD |                 jmp     #.done
34cd0                 | .reset_feature
34cd0     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
34cd4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34cd8     A0 02 A0 FD |                 call    #control_write
34cdc     58 00 90 FD |                 jmp     #.done
34ce0                 | .disconnect
34ce0                 | 
34ce0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
34ce4     00 70 E3 F8 |                 getbyte htmp
34ce8     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
34cec     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
34cf0     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
34cf4     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
34cf8     00 76 06 A6 |         if_z    mov     kb_led_states, #0
34cfc     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
34d00                 |         if EMUPAD_MAX_PLAYER > 0
34d00                 |         end
34d00                 |         if HAVE_MOUSE
34d00     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
34d04     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
34d08     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
34d0c                 |         end
34d0c                 |         if HAVE_HIDPAD
34d0c     14 0A F0 FE |                 loc ptrb,#hidpad_report
34d10     2D 71 03 F6 |                 mov htmp,hdev_port
34d14     01 70 E7 F2 |                 cmpsub htmp,#1
34d18     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
34d1c     B8 F3 03 F1 |                 add ptrb,htmp
34d20     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
34d24     80 01 6C FC |                 wrlong #0,ptrb
34d28                 |         end
34d28                 | 
34d28     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
34d2c     00 00 C4 F8 |                 setbyte #0
34d30     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34d34     00 00 04 F6 |                 mov     0-0, #0
34d38                 | 
34d38                 | .done
34d38     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
34d3c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
34d40     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
34d44     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
34d48     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
34d4c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
34d50                 | 
34d50     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34d54     27 EF 03 F6 |                 mov     pb, urx_buff_p
34d58     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34d5c     55 02 A0 FD |                 call    #control_read
34d60     00 69 06 FB |                 rdlong  hub_port_status, ptra
34d64                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
34d64     2D 00 64 FD |                 ret
34d68                 | 
34d68                 | '------------------------------------------------------------------------------
34d68                 | ' Partially populated SETUP packets
34d68                 | '------------------------------------------------------------------------------
34d68     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
34d69     06          |                 byte    REQ_GET_DESC
34d6a     00 01       |                 word    TYPE_DEVICE << 8
34d6c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34d6e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34d70     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
34d71     06          |                 byte    REQ_GET_DESC
34d72     00 02       |                 word    TYPE_CONFIG << 8
34d74     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34d76     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34d78     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
34d79     09          |                 byte    REQ_SET_CONFIG
34d7a     00 00       |                 word    0       ' Configuration value
34d7c     00 00       |                 word    0       ' Zero
34d7e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
34d80     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
34d81     05          |                 byte    REQ_SET_ADDR
34d82     00 00       |                 word    0       ' Zero
34d84     00 00       |                 word    0       ' Zero
34d86     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
34d88                 | '------------------------------------------------------------------------------
34d88                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
34d88                 | ' wValue field dictates which protocol should be used.
34d88                 | '
34d88                 | ' When initialized, all devices default to report protocol. However the host
34d88                 | ' should not make any assumptions about the device state and should set the
34d88                 | ' desired protocol whenever initializing a device.
34d88                 | '------------------------------------------------------------------------------
34d88     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34d89     0B          |                 byte    HID_SET_PROTO
34d8a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
34d8c                 |                                                 ' (HID 1.11 Section 7.2.6).
34d8c     00 00       |                 word    0               ' Interface index number.
34d8e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
34d90                 | '------------------------------------------------------------------------------
34d90     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34d91     0A          |                 byte    HID_SET_IDLE
34d92     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
34d94                 |                                         ' reporting until a change is detected in the report data
34d94                 | 
34d94                 |                                         ' (HID 1.11 Section 7.2.4).
34d94     00 00       |                 word    0       ' Interface index number.
34d96     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
34d98     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34d99     09          |                 byte    HID_SET_REPORT
34d9a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
34d9c                 |                                         ' (HID 1.11 Section 7.2.2).
34d9c     00 00       |                 word    0       ' Interface index number.
34d9e     00 00       |                 word    0       ' Size of the report, in bytes.
34da0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
34da1     06          |                 byte    REQ_GET_DESC
34da2     00 22       |                 word    TYPE_REPORT << 8
34da4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34da6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34da8                 | '------------------------------------------------------------------------------
34da8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
34da9     06          |                 byte    REQ_GET_DESC
34daa     00 29       |                 word    TYPE_HUB << 8
34dac     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34dae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34db0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
34db1     03          |                 byte    REQ_SET_FEATURE
34db2     00 00       |                 word    0       ' port power
34db4     01 00       |                 word    1       ' Port index number (1+)
34db6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34db8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
34db9     01          |                 byte    REQ_CLEAR_FEATURE
34dba     00 00       |                 word    0       ' port power
34dbc     01 00       |                 word    1       ' Port index number (1+)
34dbe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34dc0     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
34dc1     00          |                 byte    REQ_GET_STATUS
34dc2     00 00       |                 word    0
34dc4     01 00       |                 word    1       ' Port index number (1+)
34dc6     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
34dc8                 | '------------------------------------------------------------------------------
34dc8                 | if _HAVE_GAMEPAD
34dc8     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
34dcc                 | ps3_command_buff
34dcc     00 00 00 00 
34dd0     00          |                 byte    $00, $00, $00, $00, $00
34dd1     00 00 00 00 
34dd5     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
34dd6     FF 27 10 00 
34dda     32          |                 byte    $FF, $27, $10, $00, $32
34ddb     FF 27 10 00 
34ddf     32          |                 byte    $FF, $27, $10, $00, $32
34de0     FF 27 10 00 
34de4     32          |                 byte    $FF, $27, $10, $00, $32
34de5     FF 27 10 00 
34de9     32          |                 byte    $FF, $27, $10, $00, $32
34dea     00 00 00 00 
34dee     00          |                 byte    $00, $00, $00, $00, $00
34def     00 00 00 00 
34df3     00          |                 byte    $00, $00, $00, $00, $00
34df4     00 00 00 00 
34df8     00          |                 byte    $00, $00, $00, $00, $00
34df9     00 00 00    |                 byte    $00, $00, $00
34dfc                 | '------------------------------------------------------------------------------
34dfc     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
34dff                 |                                         ' 0x01 All blinking
34dff                 |                                         ' 0x02 1 flashes, then on
34dff                 |                                         ' 0x03 2 flashes, then on
34dff                 |                                         ' 0x04 3 flashes, then on
34dff                 |                                         ' 0x05 4 flashes, then on
34dff                 |                                         ' 0x06 1 on
34dff                 |                                         ' 0x07 2 on
34dff                 |                                         ' 0x08 3 on
34dff                 |                                         ' 0x09 4 on
34dff                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
34dff                 |                                         ' 0x0B Blinking*
34dff                 |                                         ' 0x0C Slow blinking*
34dff                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
34dff     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
34e02     00          |                 byte    $00             ' Left rumble
34e03     00          |                 byte    $00             ' Right rumble
34e04     00 00 00    |                 byte    $00, $00, $00
34e07     00          | end
34e08                 | alignl
34e08                 | 
34e08                 | if HAVE_MOUSE
34e08     00 00 00 00 
34e0c     00 00 00 00 | mouse_limits long 0[2]
34e10     00 00 00 00 | mouse_outptr long 0
34e14                 | end
34e14                 | 
34e14                 | if KEYQUEUE_SIZE > 0
34e14     00          | keyq_head byte 0
34e15     00          | keyq_tail byte 0
34e16     00 00 00 00 
      ...             
35012     00 00 00 00 
35016     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
35018                 | alignl
35018                 | end
35018                 | 
35018                 | if EMUPAD_MAX_PLAYER > 0
35018                 | emupad_rule_buffer
35018                 | if EMUPAD_BUILTIN_RULES
35018                 | file "padmap_builtin.dat"
35018                 | end
35018                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
35018                 | '' Default rule directly follows!
35018                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
35018                 | end
35018                 | 
35018                 | '------------------------------------------------------------------------------
35018                 | ' The USB data cache area gets zero-filled at every device disconnect
35018                 | '------------------------------------------------------------------------------
35018                 | usb_cache_start
35018                 | 
35018                 | ' HID descriptor and report buffers
35018                 | if !!OVERLAP_MEMORY
35018     00 00 00 00 
      ...             
35710     00 00 00 00 
35714     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
35718                 | end
35718     00 00 00 00 
3571c     00 00 00 00 | hkbd_report     byte    0[8]
35720     00 00 00 00 | hkbd_led_rep    byte    0
35724                 | alignl
35724                 | 
35724                 | if HAVE_HIDPAD
35724     00 00 00 00 
      ...             
357e0     00 00 00 00 
357e4     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
357e8                 | end
357e8                 | 
357e8                 | ' HUB descriptor
357e8     00          | hub_descr       byte    0   ' bDescLength
357e9     00          |                 byte    0   ' bDescriptorType
357ea     00          |                 byte    0   ' bNbrPorts
357eb     00 00       |                 word    0   ' wHubCharacteristics
357ed     00          |                 byte    0   ' bPwrOn2PwrGood
357ee     00          |                 byte    0   ' bHubContrCurrent
357ef     00          |                 byte    0   ' DeviceRemoveable
357f0     00          |                 byte    0   ' PortPwrCtrlMask
357f1                 | 
357f1                 | usb_cache_end
357f1                 | 
357f1                 | if HAVE_MOUSE
357f1     00 00 00 00 | mouse_xacc      long 0
357f5     00 00 00 00 | mouse_yacc      long 0
357f9     00 00 00 00 | mouse_zacc      long 0
357fd     00          | mouse_bstate    byte 0
357fe     00          | mouse_lpending  byte 0
357ff     00          | mouse_rpending  byte 0
35800     00          | mouse_mpending  byte 0
35801     00          | mouse_lock      byte 0
35802     00 00 00    |                 byte 0[3] ' padding
35805                 | end
35805                 | 
35805     00 00 00 00 
      ...             
3587d     00 00 00 00 
35881     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
35885     00 00 00 00 
35889     00 00 00 00 
3588d     00 00 00 00 
35891     00 00 00 00 
35895     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
35897     00 00 00 00 
      ...             
3598f     00 00 00 00 
35993     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
35997                 | 
35997     00          | driver_cog      byte    0                       ' Current driver cog + 1
35998                 | 	alignl
35998                 | _audio096_spin2_dat_
35998                 | 
35998                 | audio       org     0
35998                 | 
35998     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3599c     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
359a0     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
359a4                 | 
359a4     01 EC 63 FD |             cogid   pa                   ' compute cogid
359a8     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
359ac     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
359b0     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
359b4                 | 
359b4     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
359b8     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
359bc     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
359c0     0F 20 06 FC |             wrpin   dac2,#right
359c4     0F 00 1E FC |             wxpin   #256,#right    
359c8     41 9C 64 FD |             dirh    #left addpins 1
359cc     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
359d0     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
359d4     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
359d8                 |             
359d8                 | '---------------------------------------------------------------------------------        
359d8                 | '----------------- The main loop -------------------------------------------------
359d8                 | '---------------------------------------------------------------------------------
359d8                 | 
359d8     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
359dc     10 00 90 CD |       if_c  jmp     #loop1
359e0                 |   
359e0     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
359e4     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
359e8     D3 00 80 F1 |             sub     0-0,a40000000
359ec     FD FD 6D FB |             djnz    cn,#p402
359f0                 |     
359f0     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
359f4     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
359f8     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
359fc     01 FC 05 C6 |     if_c    mov     cn,#1
35a00     D8 FE 39 F3 |             fle     ct,time3 wcz
35a04     02 FC 05 C6 |     if_c    mov     cn,#2     
35a08     D9 FE 39 F3 |             fle     ct,time4 wcz
35a0c     03 FC 05 C6 |     if_c    mov     cn,#3
35a10     DA FE 39 F3 |             fle     ct,time5 wcz
35a14     04 FC 05 C6 |     if_c    mov     cn,#4
35a18     DB FE 39 F3 |             fle     ct,time6 wcz
35a1c     05 FC 05 C6 |     if_c    mov     cn,#5
35a20     DC FE 39 F3 |             fle     ct,time7 wcz
35a24     06 FC 05 C6 |     if_c    mov     cn,#6
35a28     DD FE 39 F3 |             fle     ct,time8 wcz
35a2c     07 FC 05 C6 |     if_c    mov     cn,#7
35a30                 | 
35a30                 | 
35a30                 | '----------------------------------------------------------------------------------
35a30                 | '------------- Compute channel samples --------------------------------------------
35a30                 | '----------------------------------------------------------------------------------
35a30                 | 
35a30                 | 
35a30     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
35a34     06 BC 65 F0 |             shl     channeladd,#6
35a38     DE F0 03 F1 |             add     ptra,channeladd
35a3c                 | 
35a3c     28 16 64 FD |             setq    #11                        	' read parameters
35a40     00 D3 05 FB |             rdlong  pointer0,ptra
35a44                 |     	    
35a44     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
35a48     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
35a4c     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
35a50     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
35a54     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
35a58     00 C0 0D F2 |             cmp     qq,#0 wz                         
35a5c     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
35a60     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
35a64                 |             
35a64     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
35a68     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
35a6c     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
35a70                 | 
35a70     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
35a74     EA 04 3A F9 |             getword oldrs,sample0,#1
35a78     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
35a7c     EE F6 31 F9 |     	    getword avol0,volpan0,#0
35a80     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
35a84     EF F2 31 F9 |             getword afreq0,freqskip0,#0
35a88                 | 
35a88     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
35a8c     00 00 02 F6 |             mov     dt0,0-0    
35a90     D5 00 82 F1 |             sub     dt0,time0
35a94                 |             
35a94     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
35a98     F9 00 00 F1 |             add     0-0,afreq0  	
35a9c                 |             
35a9c                 | '---- envelopes
35a9c                 |             
35a9c     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
35aa0     20 00 00 AF 
35aa4     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
35aa8     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
35aac                 | 
35aac     F9 44 02 F6 |             mov     envs1,afreq0
35ab0     F3 44 02 FA |             mul     envs1,envspd0
35ab4     22 E3 01 F1 |             add     envph0,envs1 
35ab8                 | 
35ab8     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
35abc     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
35ac0     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
35ac4     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
35ac8     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
35acc     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
35ad0     00 42 06 36 |     if_ge   mov     envlo,#0
35ad4     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
35ad8     16 E2 65 30 |     if_ge   shl     envph0,#22
35adc                 | 
35adc     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
35ae0     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
35ae4     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
35ae8     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
35aec     22 47 3A F9 |             getword envs2,envs1,#1		' next value
35af0     22 45 32 F9 |             getword envs1,envs1,#0		' current value
35af4     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
35af8     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
35afc     21 45 02 FA |             mul     envs1,envlo
35b00     23 45 02 F1 |             add     envs1,envs2
35b04     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
35b08                 |             
35b08     1B D6 0D F4 | p410        testb   sstart0, #27 wz
35b0c     1B C2 61 AD |     if_z    getrnd  spl
35b10     58 00 90 AD |     if_z    jmp     #p406
35b14                 |  
35b14     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
35b18     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
35b1c     08 D2 45 F0 |             shr     pointer0,#8
35b20                 |          
35b20     1F D6 0D F4 |             testb   sstart0,#31 wz            
35b24     01 D2 65 A0 |     if_z    shl     pointer0,#1        
35b28     1C D6 0D F4 |             testb   sstart0,#28 wz            
35b2c     01 D2 65 A0 |     if_z    shl     pointer0,#1        
35b30                 |         
35b30     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
35b34     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
35b38     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
35b3c                 |             
35b3c     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
35b40     EB C0 01 F1 |             add     qq,sstart0            
35b44                 | 
35b44     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
35b48     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
35b4c     14 01 B0 1D |     if_gt   call    #cache_read
35b50                 |          
35b50     1F D6 0D F4 |             testb   sstart0,#31 wz 
35b54     08 C2 65 50 |     if_nz   shl     spl,#8
35b58     08 D2 65 50 |     if_nz   shl     pointer0,#8
35b5c     07 D2 65 A0 |     if_z    shl     pointer0,#7
35b60     1C D6 0D F4 |             testb   sstart0,#28 wz            
35b64     01 D2 45 A0 |     if_z    shr     pointer0,#1    
35b68     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
35b6c                 | 
35b6c                 | 
35b6c     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
35b70     00 C2 01 F6 |             mov     spl,0-0
35b74     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
35b78     00 C2 01 F6 |             mov     spl,0-0
35b7c                 | 
35b7c     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
35b80     00 06 02 F6 |             mov     ls0,0-0
35b84     20 00 00 FF 
35b88     00 C0 05 F6 |             mov     qq,##16384
35b8c     FC C0 81 F1 |             sub     qq,apan0
35b90     E0 C2 31 FA |             scas    spl,qq
35b94     00 08 02 F6 |             mov     rs0, 0-0
35b98                 | 
35b98     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
35b9c     04 0D 02 F1 |             add     rs,rs0
35ba0     01 0B 82 F1 |             sub     ls,oldls
35ba4     03 0B 02 F1 |             add     ls,ls0
35ba8                 |    
35ba8     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
35bac     03 D5 21 F9 |             setword sample0,ls0,#0
35bb0                 |             
35bb0     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
35bb4     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
35bb8     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
35bbc                 |   '  if_z    mov     sample0,#0
35bbc     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
35bc0     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
35bc4     04 00 00 AF 
35bc8     00 AC 05 A1 |     if_z    add     time1,##2048
35bcc     D6 AE 01 A6 |     if_z    mov     time2,time1
35bd0     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
35bd4                 | 
35bd4     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
35bd8     00 D3 65 FC |             wrlong  pointer0,ptra
35bdc     08 E3 65 FC |             wrlong  envph0,ptra[8]
35be0     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
35be4                 |                       
35be4     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
35be8     FF BF 25 A7 |     if_z    decmod  front, #511          
35bec                 |          
35bec     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
35bf0     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
35bf4     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
35bf8     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
35bfc                 | 	    
35bfc                 | 		    
35bfc     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
35c00     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
35c04     02 11 02 F6 |             mov     newsample, oldrs       
35c08                 | 
35c08     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
35c0c     00 AB 01 F1 |             add     time0,dt0    
35c10                 |                                      
35c10     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
35c14     D8 FD 9F AD |     if_z    jmp     #loop1
35c18     00 C1 01 F6 |             mov     qq,dt0
35c1c                 |   
35c1c     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
35c20     00 BE 9D F2 |             cmpr    front, #0-0 wcz
35c24     F4 FF 9F AD |     if_e    jmp     #p301    
35c28                 | 		
35c28     00 16 0E F2 | 	    cmp     scbase,#0 wz
35c2c     20 00 90 AD |     if_z    jmp     #p302	   
35c30                 |   
35c30     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
35c34     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
35c38     02 1A 66 C0 |     if_c    shl     scptr2,#2
35c3c     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
35c40     60 1A 66 FC |             wrlong  scptr2,#$60
35c44     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
35c48     01 00 00 CF 
35c4c     7F 18 06 C7 |     if_c    incmod  scptr,##639
35c50                 | 			    
35c50     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
35c54     00 00 00 FF 
35c58     FF BF 05 F7 |             incmod  front, ##511
35c5c     EF C1 6D FB |             djnz    qq,#p301
35c60                 |             
35c60     74 FD 9F FD |             jmp     #loop            'loop
35c64                 | 
35c64                 | '----------------------------------------------------------------------------------
35c64                 | '------------- This is the end of the main loop -----------------------------------
35c64                 | '----------------------------------------------------------------------------------
35c64                 | 
35c64                 | '----------------------------------------------------------------------------------
35c64                 | '------------- PSRAM cache ----------- --------------------------------------------
35c64                 | '----------------------------------------------------------------------------------
35c64                 | 
35c64                 | ' There are 8 cache pointers for 8 channels
35c64                 | ' if 24 higher bits of address=cache, then get a word from the cache
35c64                 | ' else load the cache from PSRAM, update the pointer, then read a sample
35c64                 | 
35c64                 | 
35c64     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
35c68                 |             
35c68     E0 3C 02 F6 | 	    mov     addrhi,qq		
35c6c     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
35c70     12 FD 95 F9 | 	    alts    cn,#cache1            
35c74     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
35c78     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
35c7c                 | 	
35c7c     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
35c80     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
35c84     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
35c88     08 34 66 F0 | 	    shl     cmd,#8
35c8c     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
35c90     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
35c94     08 36 66 F0 |             shl     hubaddr,#8                  '
35c98     11 37 02 F1 |             add     hubaddr,hubptr 
35c9c     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
35ca0     28 04 64 FD |             setq    #2                          ' write 3 longs
35ca4     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
35ca8     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
35cac     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
35cb0                 |             
35cb0                 | 	
35cb0     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
35cb4     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
35cb8     11 C1 01 F1 | 	    add     qq,hubptr
35cbc     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
35cc0     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
35cc4                 |           
35cc4                 | 
35cc4                 | '--------------------------------------------------------------------------
35cc4                 | '------ Interrupt service -------------------------------------------------
35cc4                 | '------ Output the sample, get the next one if exists ---------------------
35cc4                 | '--------------------------------------------------------------------------
35cc4                 | 
35cc4     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
35cc8     0F CC 25 FC |             wypin   rsample,#right       '4
35ccc     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
35cd0     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
35cd4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
35cd8     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
35cdc     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
35ce0                 |     
35ce0     F5 FF 3B FB |             reti1                        '17/19 
35ce4                 |           
35ce4                 | '---------------------------------------------------------------------------
35ce4                 | '-------- End of interrupt -------------------------------------------------
35ce4                 | '---------------------------------------------------------------------------    
35ce4                 | 
35ce4                 | 
35ce4                 | '---------------------------------------------------------------------------
35ce4                 | '------- Variables ---------------------------------------------------------
35ce4                 | '---------------------------------------------------------------------------
35ce4                 | 
35ce4                 | ' constants
35ce4                 | 
35ce4     00 00 00 40 | a40000000   long $40000000
35ce8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
35cec                 | 
35cec                 | ' Time variables
35cec                 | 
35cec     00 00 00 00 | time0       long 0    ' Global sample computing time
35cf0     01 00 00 00 | time1       long 1    ' Local channels time
35cf4     02 00 00 00 | time2       long 2
35cf8     03 00 00 00 | time3       long 3
35cfc     04 00 00 00 | time4       long 4
35d00     05 00 00 00 | time5       long 5
35d04     06 00 00 00 | time6       long 6
35d08     07 00 00 00 | time7       long 7
35d0c     08 00 00 00 | time8       long 8
35d10                 | 
35d10     00 00 00 00 | channeladd long 0
35d14                 | 
35d14     00 00 00 00 | front       long 0
35d18                 | 
35d18                 | ' temporary variables 
35d18     00 00 00 00 | qq          long 0
35d1c     00 00 00 00 | spl         long 0
35d20     00 00 00 00 | zero        long 0
35d24     00 00 00 00 | mailbox     long 0
35d28     00 00 00 00 | mailbox2 long 0
35d2c                 | 
35d2c                 | ' Interrupt ISR variables
35d2c                 | 
35d2c     00 00 00 00 | lsample     long 0
35d30     00 00 00 00 | rsample     long 0
35d34     00 00 00 00 | lsnext      long 0
35d38     00 00 00 00 | rsnext      long 0 
35d3c                 | 
35d3c                 | ' channel parameter block
35d3c                 | 
35d3c     00 00 00 00 | pointer0    long 0     
35d40     00 00 00 00 | sample0     long 0
35d44     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
35d48     00 00 00 00 | lstart0     long 0
35d4c     00 00 00 00 | lend0       long 0
35d50     00 00 00 00 | volpan0     long 0
35d54     00 00 00 00 | freqskip0   long 0
35d58     00 00 00 00 | command0    long 0
35d5c     00 00 00 00 | envph0	    long 0
35d60     00 00 00 00 | envptr0	    long 0
35d64     00 00 00 00 | envspd0	    long 0
35d68     00 00 00 00 | envlen0	    long 0
35d6c     00 00 00 00 | res5	    long 0
35d70     00 00 00 00 | res6	    long 0
35d74     00 00 00 00 | res7	    long 0
35d78     00 00 00 00 | res8	    long 0
35d7c                 | 
35d7c     00 00 00 00 | afreq0      long 0
35d80     00 00 00 00 | askip0      long 0
35d84     00 00 00 00 | avol0       long 0
35d88     00 00 00 00 | apan0       long 0
35d8c                 | 
35d8c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
35d90     00 00 00 00 | cn          long 0
35d94     00 00 00 00 | ct          long 0
35d98     00 00 00 00 | dt0         long 0
35d9c                 | 
35d9c                 | ' Samples
35d9c     00 00 00 00 | oldls       long 0
35da0     00 00 00 00 | oldrs       long 0
35da4                 | 
35da4     00 00 00 00 | ls0         long 0
35da8     00 00 00 00 | rs0         long 0
35dac                 | 
35dac     00 00 00 00 | ls          long 0    
35db0     00 00 00 00 | rs          long 0
35db4                 | 
35db4     00 00 00 00 | oldsample   long 0
35db8     00 00 00 00 | newsample   long 0
35dbc                 | 
35dbc     00 00 00 00 | nrsample    long 0
35dc0     00 00 00 00 | nlsample    long 0
35dc4                 | 
35dc4     00 00 00 00 | scbase long 0
35dc8     00 00 00 00 | scptr long 0
35dcc     00 00 00 00 | scptr2 long 0
35dd0     00 00 00 00 | scope long 0
35dd4                 | 
35dd4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
35dd8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
35ddc                 | 
35ddc     00 18 07 00 | hubptr      long $71800
35de0     00 00 00 00 | cache1      long 0
35de4     00 00 00 00 | cache2      long 0
35de8     00 00 00 00 | cache3      long 0
35dec     00 00 00 00 | cache4      long 0
35df0     00 00 00 00 | cache5      long 0
35df4     00 00 00 00 | cache6      long 0
35df8     00 00 00 00 | cache7      long 0
35dfc     00 00 00 00 | cache8      long 0
35e00                 | 
35e00                 | 
35e00     00 00 00 00 | cmd         long 0
35e04     00 00 00 00 | hubaddr     long 0
35e08     00 01 00 00 | count       long 256
35e0c     00 00 00 00 | addrlo long 0
35e10     00 00 00 00 | addrhi long 0
35e14     00 00 00 00 | pointer00 long 0
35e18     00 00 00 00 | envhi long 0
35e1c     00 00 00 00 | envlo long 0
35e20     00 00 00 00 | envs1 long 0
35e24     00 00 00 00 | envs2 long 0
35e28     00 00 00 00 | noise0 long 0
35e2c     00 00 00 00 
35e30     00 00 00 00 | null  			long 	0,0           ' for channel reset
35e34                 | 	alignl
35e34                 | __system__dat_
35e34     00 00 00 00 
35e38     00 00 00 00 | 	byte	$00[8]
35e3c     03 00 00 00 
35e40     00 00 00 00 
35e44     00 00 00 00 
35e48     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e4c     00 00 00 00 
      ...             
360d8     00 00 00 00 
360dc     00 00 00 00 | 	byte	$00[660]
360e0     00 00 E0 07 | 	long	(126 {__system____root_opendir})<<20
360e4     00 00 F0 07 | 	long	(127 {__system____root_closedir})<<20
360e8     00 00 00 08 | 	long	(128 {__system____root_readdir})<<20
360ec     00 00 10 08 | 	long	(129 {__system____root_stat})<<20
360f0     00 00 00 00 
360f4     00 00 00 00 
360f8     00 00 00 00 
360fc     00 00 00 00 
36100     00 00 00 00 
36104     00 00 00 00 
36108     00 00 00 00 | 	byte	$00[28]
3610c     74 61 03 00 | 	long	@@@__system__dat_ + 832
36110     77 61 03 00 | 	long	@@@__system__dat_ + 835
36114     98 61 03 00 | 	long	@@@__system__dat_ + 868
36118     B1 61 03 00 | 	long	@@@__system__dat_ + 893
3611c     CC 61 03 00 | 	long	@@@__system__dat_ + 920
36120     E6 61 03 00 | 	long	@@@__system__dat_ + 946
36124     F6 61 03 00 | 	long	@@@__system__dat_ + 962
36128     08 62 03 00 | 	long	@@@__system__dat_ + 980
3612c     1A 62 03 00 | 	long	@@@__system__dat_ + 998
36130     2C 62 03 00 | 	long	@@@__system__dat_ + 1016
36134     38 62 03 00 | 	long	@@@__system__dat_ + 1028
36138     49 62 03 00 | 	long	@@@__system__dat_ + 1045
3613c     5D 62 03 00 | 	long	@@@__system__dat_ + 1065
36140     67 62 03 00 | 	long	@@@__system__dat_ + 1075
36144     77 62 03 00 | 	long	@@@__system__dat_ + 1091
36148     86 62 03 00 | 	long	@@@__system__dat_ + 1106
3614c     9C 62 03 00 | 	long	@@@__system__dat_ + 1128
36150     B5 62 03 00 | 	long	@@@__system__dat_ + 1153
36154     C9 62 03 00 | 	long	@@@__system__dat_ + 1173
36158     D7 62 03 00 | 	long	@@@__system__dat_ + 1187
3615c     EB 62 03 00 | 	long	@@@__system__dat_ + 1207
36160     F7 62 03 00 | 	long	@@@__system__dat_ + 1219
36164     09 63 03 00 | 	long	@@@__system__dat_ + 1237
36168     21 63 03 00 | 	long	@@@__system__dat_ + 1261
3616c     33 63 03 00 | 	long	@@@__system__dat_ + 1279
36170     46 63 03 00 | 	long	@@@__system__dat_ + 1298
36174     4F 4B 00 4E 
36178     75 6D 65 72 
3617c     69 63 61 6C 
36180     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
36184     75 6D 65 6E 
36188     74 20 6F 75 
3618c     74 20 6F 66 
36190     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
36194     61 69 6E 00 
36198     52 65 73 75 
3619c     6C 74 20 6E 
361a0     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
361a4     65 70 72 65 
361a8     73 65 6E 74 
361ac     61 62 6C 65 
361b0     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
361b4     65 67 61 6C 
361b8     20 6D 75 6C 
361bc     74 69 62 79 
361c0     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
361c4     65 71 75 65 
361c8     6E 63 65 00 
361cc     4E 6F 20 73 
361d0     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
361d4     66 69 6C 65 
361d8     20 6F 72 20 
361dc     64 69 72 65 
361e0     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
361e4     79 00 42 61 
361e8     64 20 66 69 
361ec     6C 65 20 6E 
361f0     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
361f4     72 00 50 65 
361f8     72 6D 69 73 
361fc     73 69 6F 6E 
36200     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
36204     69 65 64 00 
36208     4E 6F 74 20 
3620c     65 6E 6F 75 
36210     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
36214     65 6D 6F 72 
36218     79 00 54 65 
3621c     6D 70 6F 72 
36220     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
36224     66 61 69 6C 
36228     75 72 65 00 
3622c     46 69 6C 65 
36230     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
36234     73 74 73 00 
36238     49 6E 76 61 
3623c     6C 69 64 20 
36240     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
36244     6D 65 6E 74 
36248     00 54 6F 6F 
3624c     20 6D 61 6E 
36250     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
36254     65 6E 20 66 
36258     69 6C 65 73 
3625c     00 49 2F 4F 
36260     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
36264     6F 72 00 4E 
36268     6F 74 20 61 
3626c     20 64 69 72 
36270     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
36274     72 79 00 49 
36278     73 20 61 20 
3627c     64 69 72 65 
36280     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
36284     79 00 52 65 
36288     61 64 20 6F 
3628c     6E 6C 79 20 
36290     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
36294     20 73 79 73 
36298     74 65 6D 00 
3629c     46 75 6E 63 
362a0     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
362a4     20 6E 6F 74 
362a8     20 69 6D 70 
362ac     6C 65 6D 65 
362b0     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
362b4     00 44 69 72 
362b8     65 63 74 6F 
362bc     72 79 20 6E 
362c0     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
362c4     6D 70 74 79 
362c8     00 4E 61 6D 
362cc     65 20 74 6F 
362d0     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
362d4     6E 67 00 44 
362d8     65 76 69 63 
362dc     65 20 6E 6F 
362e0     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
362e4     65 6B 61 62 
362e8     6C 65 00 42 
362ec     61 64 20 61 
362f0     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
362f4     73 73 00 42 
362f8     72 6F 6B 65 
362fc     6E 20 63 6F 
36300     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
36304     74 69 6F 6E 
36308     00 44 65 76 
3630c     69 63 65 20 
36310     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
36314     65 73 6F 75 
36318     72 63 65 20 
3631c     62 75 73 79 
36320     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
36324     73 73 20 64 
36328     65 76 69 63 
3632c     65 20 6C 69 
36330     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
36334     6F 20 73 70 
36338     61 63 65 20 
3633c     6F 6E 20 64 
36340     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
36344     65 00 55 6E 
36348     6B 6E 6F 77 
3634c     6E 20 65 72 
36350     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
36354     00 00 00 00 
36358     00 00 00 00 | 	byte	$00[8]
3635c     05 00 00 00 
36360     00 00 00 00 
36364     00 00 00 00 
36368     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3636c     00 00 00 00 | 	byte	$00, $00, $00, $00
36370     00 00 60 09 | 	long	(150 {__system___tx})<<20
36374     00 00 70 09 | 	long	(151 {__system___rx})<<20
36378     00 00 00 00 | 	byte	$00, $00, $00, $00
3637c     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
36380     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
36384     00 00 00 00 
36388     00 00 00 00 | 	byte	$00[8]
3638c     01 00 00 00 
36390     06 00 00 00 
36394     00 00 00 00 
36398     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3639c     00 00 00 00 
363a0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
363a4     00 00 60 09 | 	long	(150 {__system___tx})<<20
363a8     00 00 70 09 | 	long	(151 {__system___rx})<<20
363ac     00 00 00 00 | 	byte	$00, $00, $00, $00
363b0     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
363b4     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
363b8     00 00 00 00 
363bc     00 00 00 00 | 	byte	$00[8]
363c0     01 00 00 00 
363c4     06 00 00 00 
363c8     00 00 00 00 
363cc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
363d0     00 00 00 00 
363d4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
363d8     00 00 60 09 | 	long	(150 {__system___tx})<<20
363dc     00 00 70 09 | 	long	(151 {__system___rx})<<20
363e0     00 00 00 00 | 	byte	$00, $00, $00, $00
363e4     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
363e8     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
363ec     00 00 00 00 
      ...             
3655c     00 00 00 00 
36560     00 00 00 00 | 	byte	$00[376]
36564     68 65 03 00 | 	long	@@@__system__dat_ + 1844
36568     00 00 00 00 
3656c     00 00 00 00 
36570     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36574                 | 	alignl
36574                 | _fatfs_cc_dat_
36574     C7 00 FC 00 
36578     E9 00 E2 00 
3657c     E4 00 E0 00 
36580     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
36584     EA 00 EB 00 
36588     E8 00 EF 00 
3658c     EE 00 EC 00 
36590     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
36594     C9 00 E6 00 
36598     C6 00 F4 00 
3659c     F6 00 F2 00 
365a0     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
365a4     FF 00 D6 00 
365a8     DC 00 F8 00 
365ac     A3 00 D8 00 
365b0     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
365b4     E1 00 ED 00 
365b8     F3 00 FA 00 
365bc     F1 00 D1 00 
365c0     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
365c4     BF 00 AE 00 
365c8     AC 00 BD 00 
365cc     BC 00 A1 00 
365d0     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
365d4     91 25 92 25 
365d8     93 25 02 25 
365dc     24 25 C1 00 
365e0     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
365e4     A9 00 63 25 
365e8     51 25 57 25 
365ec     5D 25 A2 00 
365f0     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
365f4     14 25 34 25 
365f8     2C 25 1C 25 
365fc     00 25 3C 25 
36600     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
36604     5A 25 54 25 
36608     69 25 66 25 
3660c     60 25 50 25 
36610     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
36614     F0 00 D0 00 
36618     CA 00 CB 00 
3661c     C8 00 31 01 
36620     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
36624     CF 00 18 25 
36628     0C 25 88 25 
3662c     84 25 A6 00 
36630     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
36634     D3 00 DF 00 
36638     D4 00 D2 00 
3663c     F5 00 D5 00 
36640     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
36644     DE 00 DA 00 
36648     DB 00 D9 00 
3664c     FD 00 DD 00 
36650     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
36654     AD 00 B1 00 
36658     17 20 BE 00 
3665c     B6 00 A7 00 
36660     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
36664     B0 00 A8 00 
36668     B7 00 B9 00 
3666c     B3 00 B2 00 
36670     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
36674     61 00 1A 03 
36678     E0 00 17 03 
3667c     F8 00 07 03 
36680     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
36684     78 01 00 01 
36688     30 01 32 01 
3668c     06 01 39 01 
36690     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
36694     2E 01 79 01 
36698     06 01 80 01 
3669c     4D 00 43 02 
366a0     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
366a4     82 01 84 01 
366a8     84 01 86 01 
366ac     87 01 87 01 
366b0     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
366b4     8B 01 8B 01 
366b8     8D 01 8E 01 
366bc     8F 01 90 01 
366c0     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
366c4     93 01 94 01 
366c8     F6 01 96 01 
366cc     97 01 98 01 
366d0     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
366d4     9B 01 9C 01 
366d8     9D 01 20 02 
366dc     9F 01 A0 01 
366e0     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
366e4     A2 01 A4 01 
366e8     A4 01 A6 01 
366ec     A7 01 A7 01 
366f0     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
366f4     AB 01 AC 01 
366f8     AC 01 AE 01 
366fc     AF 01 AF 01 
36700     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
36704     B3 01 B3 01 
36708     B5 01 B5 01 
3670c     B7 01 B8 01 
36710     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
36714     BB 01 BC 01 
36718     BC 01 BE 01 
3671c     F7 01 C0 01 
36720     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
36724     C3 01 C4 01 
36728     C5 01 C4 01 
3672c     C7 01 C8 01 
36730     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
36734     CB 01 CA 01 
36738     CD 01 10 01 
3673c     DD 01 01 00 
36740     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
36744     12 01 F3 01 
36748     03 00 F1 01 
3674c     F4 01 F4 01 
36750     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
36754     22 02 12 01 
36758     3A 02 09 00 
3675c     65 2C 3B 02 
36760     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
36764     66 2C 3F 02 
36768     40 02 41 02 
3676c     41 02 46 02 
36770     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
36774     40 00 81 01 
36778     86 01 55 02 
3677c     89 01 8A 01 
36780     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
36784     5A 02 90 01 
36788     5C 02 5D 02 
3678c     5E 02 5F 02 
36790     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
36794     62 02 94 01 
36798     64 02 65 02 
3679c     66 02 67 02 
367a0     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
367a4     6A 02 62 2C 
367a8     6C 02 6D 02 
367ac     6E 02 9C 01 
367b0     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
367b4     9D 01 73 02 
367b8     74 02 9F 01 
367bc     76 02 77 02 
367c0     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
367c4     7A 02 7B 02 
367c8     7C 02 64 2C 
367cc     7E 02 7F 02 
367d0     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
367d4     82 02 A9 01 
367d8     84 02 85 02 
367dc     86 02 87 02 
367e0     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
367e4     B1 01 B2 01 
367e8     45 02 8D 02 
367ec     8E 02 8F 02 
367f0     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
367f4     B7 01 7B 03 
367f8     03 00 FD 03 
367fc     FE 03 FF 03 
36800     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
36804     86 03 88 03 
36808     89 03 8A 03 
3680c     B1 03 11 03 
36810     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
36814     A3 03 A3 03 
36818     C4 03 08 03 
3681c     CC 03 03 00 
36820     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
36824     8F 03 D8 03 
36828     18 01 F2 03 
3682c     0A 00 F9 03 
36830     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
36834     F5 03 F6 03 
36838     F7 03 F7 03 
3683c     F9 03 FA 03 
36840     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
36844     20 03 50 04 
36848     10 07 60 04 
3684c     22 01 8A 04 
36850     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
36854     0E 01 CF 04 
36858     01 00 C0 04 
3685c     D0 04 44 01 
36860     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
36864     00 00 7D 1D 
36868     01 00 63 2C 
3686c     00 1E 96 01 
36870     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
36874     00 1F 08 06 
36878     10 1F 06 06 
3687c     20 1F 08 06 
36880     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
36884     40 1F 06 06 
36888     51 1F 07 00 
3688c     59 1F 52 1F 
36890     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
36894     5D 1F 56 1F 
36898     5F 1F 60 1F 
3689c     08 06 70 1F 
368a0     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
368a4     BB 1F C8 1F 
368a8     C9 1F CA 1F 
368ac     CB 1F DA 1F 
368b0     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
368b4     F9 1F EA 1F 
368b8     EB 1F FA 1F 
368bc     FB 1F 80 1F 
368c0     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
368c4     08 06 A0 1F 
368c8     08 06 B0 1F 
368cc     04 00 B8 1F 
368d0     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
368d4     BC 1F CC 1F 
368d8     01 00 C3 1F 
368dc     D0 1F 02 06 
368e0     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
368e4     E5 1F 01 00 
368e8     EC 1F F3 1F 
368ec     01 00 FC 1F 
368f0     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
368f4     32 21 70 21 
368f8     10 02 84 21 
368fc     01 00 83 21 
36900     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
36904     30 2C 2F 04 
36908     60 2C 02 01 
3690c     67 2C 06 01 
36910     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
36914     80 2C 64 01 
36918     00 2D 26 08 
3691c     41 FF 1A 03 
36920     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
36924     05 07 09 0E 
36928     10 12 14 16 
3692c     18 1C 1E 43 
36930     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
36934     41 41 43 45 
36938     45 45 49 49 
3693c     49 41 41 45 
36940     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
36944     4F 55 55 59 
36948     4F 55 4F 9C 
3694c     4F 9E 9F 41 
36950     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
36954     A5 A6 A7 A8 
36958     A9 AA AB AC 
3695c     AD AE AF B0 
36960     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
36964     41 41 41 B8 
36968     B9 BA BB BC 
3696c     BD BE BF C0 
36970     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
36974     C5 41 41 C8 
36978     C9 CA CB CC 
3697c     CD CE CF D1 
36980     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
36984     49 49 49 49 
36988     D9 DA DB DC 
3698c     DD 49 DF 4F 
36990     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
36994     4F E6 E8 E8 
36998     55 55 55 59 
3699c     59 EE EF F0 
369a0     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
369a4     F5 F6 F7 F8 
369a8     F9 FA FB FC 
369ac     FD FE FF 00 
369b0     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
369b4     00 00 00 00 | 	byte	$00, $00, $00, $00
369b8     00 00 50 08 | 	long	(133 {_fatfs_cc_v_close})<<20
369bc     00 00 60 08 | 	long	(134 {_fatfs_cc_v_read})<<20
369c0     00 00 70 08 | 	long	(135 {_fatfs_cc_v_write})<<20
369c4     00 00 80 08 | 	long	(136 {_fatfs_cc_v_lseek})<<20
369c8     00 00 90 08 | 	long	(137 {_fatfs_cc_v_ioctl})<<20
369cc     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_flush})<<20
369d0     00 00 00 00 
369d4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
369d8     00 00 A0 08 | 	long	(138 {_fatfs_cc_v_open})<<20
369dc     00 00 B0 08 | 	long	(139 {_fatfs_cc_v_creat})<<20
369e0     00 00 C0 08 | 	long	(140 {_fatfs_cc_v_opendir})<<20
369e4     00 00 D0 08 | 	long	(141 {_fatfs_cc_v_closedir})<<20
369e8     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_readdir})<<20
369ec     00 00 F0 08 | 	long	(143 {_fatfs_cc_v_stat})<<20
369f0     00 00 00 09 | 	long	(144 {_fatfs_cc_v_mkdir})<<20
369f4     00 00 10 09 | 	long	(145 {_fatfs_cc_v_rmdir})<<20
369f8     00 00 20 09 | 	long	(146 {_fatfs_cc_v_remove})<<20
369fc     00 00 30 09 | 	long	(147 {_fatfs_cc_v_rename})<<20
36a00     00 00 40 09 | 	long	(148 {_fatfs_cc_v_init})<<20
36a04     00 00 50 09 | 	long	(149 {_fatfs_cc_v_deinit})<<20
36a08     FF FF FF FF 
36a0c     1F 00 00 00 
36a10     1C 00 00 00 
36a14     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
36a18     1E 00 00 00 
36a1c     1F 00 00 00 
36a20     1E 00 00 00 
36a24     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
36a28     1F 00 00 00 
36a2c     1E 00 00 00 
36a30     1F 00 00 00 
36a34     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
36a38     1F 00 00 00 
36a3c     00 00 00 00 
36a40     1F 00 00 00 
36a44     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
36a48     5A 00 00 00 
36a4c     78 00 00 00 
36a50     97 00 00 00 
36a54     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
36a58     D4 00 00 00 
36a5c     F3 00 00 00 
36a60     11 01 00 00 
36a64     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
36a68     4E 01 00 00 
36a6c     6D 01 00 00 
36a70     FF FF FF FF 
36a74     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
36a78     00 00 00 00 
      ...             
36a90     00 00 00 00 
36a94     00 00 00 00 | 	byte	$00[32]
36a98     B6 6A 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
36a9c     BA 6A 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
36aa0     00 00 00 00 
36aa4     00 00 00 00 
36aa8     00 00 00 00 
36aac     00 00 00 00 
36ab0     00 00       | 	byte	$00[18]
36ab2     3F 3F 3F 00 
36ab6     55 43 54 00 
36aba     55 43 54 00 
36abe     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
36ac2     00 00 00 00 
36ac6     00 00 00    | 	byte	$00[7]
36ac9     CA 9A 3B 00 
36acd     00 00 00 01 
36ad1     01 01 01 01 
36ad5     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
36ad9     91 11 11 11 
36add     11 01 01 01 
36ae1     01 01 01 01 
36ae5     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
36ae9     01 01 01 01 
36aed     01 01 01    | 	byte	$01[7]
36af0     90 20 20 20 
36af4     20 20 20 20 
36af8     20 20 20 20 
36afc     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
36b00     42 42 42 42 
36b04     42 42 42 42 
36b08     42 42       | 	byte	$42[10]
36b0a     20 20 20 20 
36b0e     20 20 20    | 	byte	$20[7]
36b11     44 44 44 44 
36b15     44 44       | 	byte	$44[6]
36b17     04 04 04 04 
36b1b     04 04 04 04 
36b1f     04 04 04 04 
36b23     04 04 04 04 
36b27     04 04 04 04 | 	byte	$04[20]
36b2b     20 20 20 20 
36b2f     20 20       | 	byte	$20[6]
36b31     48 48 48 48 
36b35     48 48       | 	byte	$48[6]
36b37     08 08 08 08 
36b3b     08 08 08 08 
36b3f     08 08 08 08 
36b43     08 08 08 08 
36b47     08 08 08 08 | 	byte	$08[20]
36b4b     20 20 20 20 
36b4f     01 00 00 00 
36b53     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
36b54                 | __methodtable__
36b54     04 70 01 00 | 	long	@_do_no_command
36b58     C4 F3 00 00 | 	long	@_do_plus
36b5c     B0 F8 00 00 | 	long	@_do_minus
36b60     78 FD 00 00 | 	long	@_do_or
36b64     90 FE 00 00 | 	long	@_do_mul
36b68     1C 04 01 00 | 	long	@_do_fdiv
36b6c     60 FC 00 00 | 	long	@_do_and
36b70     FC 01 01 00 | 	long	@_do_div
36b74     E4 05 01 00 | 	long	@_do_mod
36b78     04 08 01 00 | 	long	@_do_shl
36b7c     1C 09 01 00 | 	long	@_do_shr
36b80     34 0A 01 00 | 	long	@_do_power
36b84     44 E7 00 00 | 	long	@_do_getvar
36b88     08 A3 00 00 | 	long	@_do_push
36b8c     44 E1 00 00 | 	long	@_do_assign
36b90     B0 41 01 00 | 	long	@_do_cls
36b94     50 DB 00 00 | 	long	@_do_new
36b98     54 42 01 00 | 	long	@_do_plot
36b9c     24 43 01 00 | 	long	@_do_draw
36ba0     98 4C 01 00 | 	long	@_do_print
36ba4     90 45 01 00 | 	long	@_do_circle
36ba8     18 44 01 00 | 	long	@_do_fcircle
36bac     08 47 01 00 | 	long	@_do_box
36bb0     B0 4A 01 00 | 	long	@_do_frame
36bb4     1C 42 01 00 | 	long	@_do_color
36bb8     6C 82 00 00 | 	long	@_do_for
36bbc     E0 84 00 00 | 	long	@_do_next
36bc0     B4 D8 00 00 | 	long	@_do_list
36bc4     58 B3 00 00 | 	long	@_do_run
36bc8     00 E0 00 00 | 	long	@_do_error
36bcc     FC DC 00 00 | 	long	@_do_fast_goto
36bd0     EC DD 00 00 | 	long	@_do_find_goto
36bd4     FC DF 00 00 | 	long	@_do_slow_goto
36bd8     FC 28 01 00 | 	long	@_do_converttoint
36bdc     4C A9 00 00 | 	long	@_test_csave
36be0     A0 AC 00 00 | 	long	@_do_save
36be4     8C AF 00 00 | 	long	@_do_load
36be8     FC 5A 01 00 | 	long	@_do_pinwrite
36bec     98 65 01 00 | 	long	@_do_waitms
36bf0     D4 66 01 00 | 	long	@_do_waitvbl
36bf4     74 6A 01 00 | 	long	@_do_if
36bf8     58 6B 01 00 | 	long	@_do_else
36bfc     20 6C 01 00 | 	long	@_do_nothing
36c00     FC 0B 01 00 | 	long	@_do_eq
36c04     74 1A 01 00 | 	long	@_do_ge
36c08     4C 1F 01 00 | 	long	@_do_le
36c0c     D4 10 01 00 | 	long	@_do_gt
36c10     AC 15 01 00 | 	long	@_do_lt
36c14     24 24 01 00 | 	long	@_do_ne
36c18     D8 2B 01 00 | 	long	@_do_rnd
36c1c     24 6C 01 00 | 	long	@_do_brun
36c20     F0 6E 01 00 | 	long	@_do_beep
36c24     04 67 01 00 | 	long	@_do_dir
36c28     60 51 01 00 | 	long	@_do_paper
36c2c     E8 51 01 00 | 	long	@_do_ink
36c30     84 52 01 00 | 	long	@_do_font
36c34     00 53 01 00 | 	long	@_do_mode
36c38     5C 6E 01 00 | 	long	@_do_mouse
36c3c     48 41 01 00 | 	long	@_do_gettime
36c40     90 6E 01 00 | 	long	@_do_cursor
36c44     C4 6E 01 00 | 	long	@_do_click
36c48     D4 3E 01 00 | 	long	@_do_mousex
36c4c     18 3F 01 00 | 	long	@_do_mousey
36c50     A0 3F 01 00 | 	long	@_do_mousek
36c54     5C 3F 01 00 | 	long	@_do_mousew
36c58     AC 2E 01 00 | 	long	@_do_sin
36c5c     00 36 01 00 | 	long	@_do_stick
36c60     84 37 01 00 | 	long	@_do_strig
36c64     E8 3D 01 00 | 	long	@_do_sprite
36c68     58 3A 01 00 | 	long	@_do_defsprite
36c6c     08 39 01 00 | 	long	@_do_getpixel
36c70     E0 66 01 00 | 	long	@_do_waitclock
36c74     10 70 01 00 | 	long	@_do_negative
36c78     E4 3F 01 00 | 	long	@_do_rdpin
36c7c     50 40 01 00 | 	long	@_do_rqpin
36c80     C4 40 01 00 | 	long	@_do_pinread
36c84     94 5D 01 00 | 	long	@_do_wrpin
36c88     14 5E 01 00 | 	long	@_do_wxpin
36c8c     94 5E 01 00 | 	long	@_do_wypin
36c90     84 5B 01 00 | 	long	@_do_pinfloat
36c94     C4 5B 01 00 | 	long	@_do_pinlo
36c98     04 5C 01 00 | 	long	@_do_pinhi
36c9c     84 5C 01 00 | 	long	@_do_pinstart
36ca0     44 5C 01 00 | 	long	@_do_pintoggle
36ca4     14 5F 01 00 | 	long	@_do_position
36ca8     B8 2F 01 00 | 	long	@_do_cos
36cac     D8 30 01 00 | 	long	@_do_tan
36cb0     FC 33 01 00 | 	long	@_do_atn
36cb4     E4 31 01 00 | 	long	@_do_asin
36cb8     F0 32 01 00 | 	long	@_do_acos
36cbc     10 35 01 00 | 	long	@_do_sqr
36cc0     F0 48 01 00 | 	long	@_do_fill
36cc4     BC CE 00 00 | 	long	@_do_defsnd
36cc8     A4 B6 00 00 | 	long	@_do_defenv
36ccc     7C 6B 01 00 | 	long	@_do_rad
36cd0     A4 6B 01 00 | 	long	@_do_deg
36cd4     CC 6B 01 00 | 	long	@_do_int
36cd8     4C C3 00 00 | 	long	@_do_play
36cdc     5C 58 01 00 | 	long	@_do_setdelay
36ce0     B4 57 01 00 | 	long	@_do_setenv
36ce4     04 59 01 00 | 	long	@_do_setlen
36ce8     54 5A 01 00 | 	long	@_do_setpan
36cec     AC 59 01 00 | 	long	@_do_setvol
36cf0     64 56 01 00 | 	long	@_do_setwave
36cf4     0C 57 01 00 | 	long	@_do_setsustain
36cf8     24 CE 00 00 | 	long	@_do_release
36cfc     A0 2D 01 00 | 	long	@_do_getenvsustain
36d00     9C 5F 01 00 | 	long	@_do_poke
36d04     74 60 01 00 | 	long	@_do_dpoke
36d08     4C 61 01 00 | 	long	@_do_lpoke
36d0c     24 62 01 00 | 	long	@_do_peek
36d10     D4 62 01 00 | 	long	@_do_dpeek
36d14     80 63 01 00 | 	long	@_do_lpeek
36d18     90 64 01 00 | 	long	@_do_adr
36d1c     2C 64 01 00 | 	long	@_do_fre
36d20     94 64 01 00 | 	long	@_do_getnotevalue
36d24     FC EC 00 00 | 	long	@_do_getaddr
36d28     EC F0 00 00 | 	long	@_do_inkey
36d2c     C0 70 01 00 | 	long	@_do_abs
36d30     F4 B0 01 00 | 	long	@_hg010b_spin2_putchar
36d34     24 B9 02 00 | 	long	@__struct___bas_wrap_sender_tx
36d38     68 B9 02 00 | 	long	@__struct___bas_wrap_sender_rx
36d3c     B0 B9 02 00 | 	long	@__struct___bas_wrap_sender_close
36d40     54 B8 02 00 | 	long	@__struct__s_vfs_file_t_putchar
36d44     C4 B8 02 00 | 	long	@__struct__s_vfs_file_t_getchar
36d48     0C B8 02 00 | 	long	@___strs_cl_pfunc
36d4c     6C 17 02 00 | 	long	@__system____root_opendir
36d50     08 18 02 00 | 	long	@__system____root_closedir
36d54     84 17 02 00 | 	long	@__system____root_readdir
36d58     10 18 02 00 | 	long	@__system____root_stat
36d5c     98 10 02 00 | 	long	@__system____default_putc
36d60     1C 10 02 00 | 	long	@__system____default_getc
36d64     40 11 02 00 | 	long	@__system____default_flush
36d68     10 A3 02 00 | 	long	@_fatfs_cc_v_close
36d6c     2C A7 02 00 | 	long	@_fatfs_cc_v_read
36d70     40 A8 02 00 | 	long	@_fatfs_cc_v_write
36d74     20 A9 02 00 | 	long	@_fatfs_cc_v_lseek
36d78     A8 A9 02 00 | 	long	@_fatfs_cc_v_ioctl
36d7c     FC A9 02 00 | 	long	@_fatfs_cc_v_open
36d80     74 A2 02 00 | 	long	@_fatfs_cc_v_creat
36d84     54 A3 02 00 | 	long	@_fatfs_cc_v_opendir
36d88     C8 A3 02 00 | 	long	@_fatfs_cc_v_closedir
36d8c     08 A4 02 00 | 	long	@_fatfs_cc_v_readdir
36d90     3C A5 02 00 | 	long	@_fatfs_cc_v_stat
36d94     BC A9 02 00 | 	long	@_fatfs_cc_v_mkdir
36d98     DC A9 02 00 | 	long	@_fatfs_cc_v_rmdir
36d9c     CC A9 02 00 | 	long	@_fatfs_cc_v_remove
36da0     EC A9 02 00 | 	long	@_fatfs_cc_v_rename
36da4     0C AB 02 00 | 	long	@_fatfs_cc_v_init
36da8     14 AB 02 00 | 	long	@_fatfs_cc_v_deinit
36dac     44 C5 01 00 | 	long	@__system___tx
36db0     84 C5 01 00 | 	long	@__system___rx
36db4     78 23 02 00 | 	long	@__system___rxtxioctl_0630
36db8     D0 23 02 00 | 	long	@__system____dummy_flush_0631
36dbc     DC AA 02 00 | 	long	@_fatfs_cc_v_flush
36dc0                 | __heap_base
36dc0     00 00 00 00 
      ...             
65bc0     00 00 00 00 
65bc4     00 00 00 00 | 	long	0[48002]
65bc8                 | objmem
65bc8     00 00 00 00 
      ...             
752c4     00 00 00 00 
752c8     00 00 00 00 | 	long	0[15809]
752cc                 | stackspace
752cc     00 00 00 00 | 	long	0[1]
752d0 100             | 	org	COG_BSS_START
752d0 100             | _var01
752d0 100             | 	res	1
752d0 101             | _var02
752d0 101             | 	res	1
752d0 102             | _var03
752d0 102             | 	res	1
752d0 103             | _var04
752d0 103             | 	res	1
752d0 104             | _var05
752d0 104             | 	res	1
752d0 105             | _var06
752d0 105             | 	res	1
752d0 106             | _var07
752d0 106             | 	res	1
752d0 107             | _var08
752d0 107             | 	res	1
752d0 108             | _var09
752d0 108             | 	res	1
752d0 109             | arg01
752d0 109             | 	res	1
752d0 10a             | arg02
752d0 10a             | 	res	1
752d0 10b             | arg03
752d0 10b             | 	res	1
752d0 10c             | arg04
752d0 10c             | 	res	1
752d0 10d             | arg05
752d0 10d             | 	res	1
752d0 10e             | arg06
752d0 10e             | 	res	1
752d0 10f             | local01
752d0 10f             | 	res	1
752d0 110             | local02
752d0 110             | 	res	1
752d0 111             | local03
752d0 111             | 	res	1
752d0 112             | local04
752d0 112             | 	res	1
752d0 113             | local05
752d0 113             | 	res	1
752d0 114             | local06
752d0 114             | 	res	1
752d0 115             | local07
752d0 115             | 	res	1
752d0 116             | local08
752d0 116             | 	res	1
752d0 117             | local09
752d0 117             | 	res	1
752d0 118             | local10
752d0 118             | 	res	1
752d0 119             | local11
752d0 119             | 	res	1
752d0 11a             | local12
752d0 11a             | 	res	1
752d0 11b             | local13
752d0 11b             | 	res	1
752d0 11c             | local14
752d0 11c             | 	res	1
752d0 11d             | local15
752d0 11d             | 	res	1
752d0 11e             | local16
752d0 11e             | 	res	1
752d0 11f             | local17
752d0 11f             | 	res	1
752d0 120             | local18
752d0 120             | 	res	1
752d0 121             | local19
752d0 121             | 	res	1
752d0 122             | local20
752d0 122             | 	res	1
752d0 123             | local21
752d0 123             | 	res	1
752d0 124             | local22
752d0 124             | 	res	1
752d0 125             | local23
752d0 125             | 	res	1
752d0 126             | local24
752d0 126             | 	res	1
752d0 127             | local25
752d0 127             | 	res	1
752d0 128             | local26
752d0 128             | 	res	1
752d0 129             | local27
752d0 129             | 	res	1
752d0 12a             | local28
752d0 12a             | 	res	1
752d0 12b             | local29
752d0 12b             | 	res	1
752d0 12c             | local30
752d0 12c             | 	res	1
752d0 12d             | local31
752d0 12d             | 	res	1
752d0 12e             | local32
752d0 12e             | 	res	1
752d0 12f             | local33
752d0 12f             | 	res	1
752d0 130             | local34
752d0 130             | 	res	1
752d0 131             | local35
752d0 131             | 	res	1
752d0 132             | muldiva_
752d0 132             | 	res	1
752d0 133             | muldivb_
752d0 133             | 	res	1
752d0 134             | 	fit	480
752d0 134             | 
