00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic026b.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 26
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 40 8F A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 44 6C 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed D8 69 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 4C 5A 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 B8 5C 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 1C 58 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 1C C5 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 F8 63 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 90 F6 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 40 1E 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa F8 1B 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb D0 2D 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 4C 51 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7B 00 00 FF 
00818     13 E4 05 F1 | 	add	objptr, ##62995
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7B 00 00 FF 
0082c     58 E4 85 F1 | 	sub	objptr, ##63064
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     94 BD B1 FD | 	call	#__system___waitms
0083c     7B 00 00 FF 
00840     58 E4 05 F1 | 	add	objptr, ##63064
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7B 00 00 FF 
00854     58 E4 85 F1 | 	sub	objptr, ##63064
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     6C BD B1 FD | 	call	#__system___waitms
00864     7B 00 00 FF 
00868     58 E4 05 F1 | 	add	objptr, ##63064
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7B 00 00 FF 
0087c     58 E4 85 F1 | 	sub	objptr, ##63064
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     44 BD B1 FD | 	call	#__system___waitms
0088c     7B 00 00 FF 
00890     58 E4 05 F1 | 	add	objptr, ##63064
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7B 00 00 FF 
008a4     58 E4 85 F1 | 	sub	objptr, ##63064
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     D0 E5 05 F1 | 	add	objptr, ##62928
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     D8 E5 85 F1 | 	sub	objptr, ##62936
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     D8 B2 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     28 B3 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     18 B3 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     E0 E5 05 F1 | 	add	objptr, ##62944
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     FC E5 85 F1 | 	sub	objptr, ##62972
009b0     7C B2 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     E0 E5 05 F1 | 	add	objptr, ##62944
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     FC E5 85 F1 | 	sub	objptr, ##62972
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     00 E4 05 F1 | 	add	objptr, ##44544
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     6A 00 00 FF 
00a68     60 E4 85 F1 | 	sub	objptr, ##54368
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     F0 E5 05 F1 | 	add	objptr, ##43504
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     5C 01 00 FF 
00abc     1A 17 06 F6 | 	mov	arg03, ##@LR__4587
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     57 00 00 FF 
00afc     00 E4 85 F1 | 	sub	objptr, ##44544
00b00     AC DC B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     E4 DB B1 FD | 	call	#__system__LTrim_S
00b0c     57 00 00 FF 
00b10     00 E4 05 F1 | 	add	objptr, ##44544
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     5C 01 00 FF 
00b1c     1B 1F 06 F6 | 	mov	local01, ##@LR__4588
00b20     24 00 00 FF 
00b24     A4 E4 05 F1 | 	add	objptr, ##18596
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     A4 E4 85 F1 | 	sub	objptr, ##18596
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     57 00 00 FF 
00b3c     00 E4 85 F1 | 	sub	objptr, ##44544
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7B 00 00 FF 
00b5c     A8 E4 05 F1 | 	add	objptr, ##63144
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7B 00 00 FF 
00b68     A8 E4 85 F1 | 	sub	objptr, ##63144
00b6c     C0 27 90 AD |  if_e	jmp	#LR__0149
00b70     7B 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##63148
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     AC E4 85 F1 | 	sub	objptr, ##18604
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     57 00 00 FF 
00b90     00 E4 85 F1 | 	sub	objptr, ##44544
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     57 00 00 FF 
00bc0     00 E4 05 F1 | 	add	objptr, ##44544
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     57 00 00 FF 
00bcc     00 E4 85 F1 | 	sub	objptr, ##44544
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     5C D8 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     5C 01 00 FF 
00be4     1C 15 06 F6 | 	mov	arg02, ##@LR__4589
00be8     18 B7 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7B 00 00 FF 
00bf8     AC E4 05 F1 | 	add	objptr, ##63148
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7B 00 00 FF 
00c04     AC E4 85 F1 | 	sub	objptr, ##63148
00c08     7B 00 00 AF 
00c0c     AC E4 05 A1 |  if_e	add	objptr, ##63148
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7B 00 00 AF 
00c18     AC E4 85 A1 |  if_e	sub	objptr, ##63148
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     57 00 00 FF 
00c24     00 E4 05 F1 | 	add	objptr, ##44544
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     57 00 00 FF 
00c30     00 E4 85 F1 | 	sub	objptr, ##44544
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     F8 D7 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     5C 01 00 FF 
00c48     1E 15 06 F6 | 	mov	arg02, ##@LR__4590
00c4c     B4 B6 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7B 00 00 AF 
00c58     AC E4 05 A1 |  if_e	add	objptr, ##63148
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7B 00 00 AF 
00c64     AC E4 85 A1 |  if_e	sub	objptr, ##63148
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7B 00 00 AF 
00c70     AC E4 05 A1 |  if_e	add	objptr, ##63148
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7B 00 00 AF 
00c7c     AC E4 85 A1 |  if_e	sub	objptr, ##63148
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     F0 E5 05 F1 | 	add	objptr, ##43504
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     BC E4 05 F1 | 	add	objptr, ##19644
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7B 00 00 FF 
00ca8     AC E4 85 F1 | 	sub	objptr, ##63148
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     57 00 00 FF 
00cc4     00 E4 05 F1 | 	add	objptr, ##44544
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     57 00 00 FF 
00cd0     00 E4 85 F1 | 	sub	objptr, ##44544
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     58 D7 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     5C 01 00 FF 
00ce8     20 2F 06 F6 | 	mov	local09, ##@LR__4591
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     10 B6 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     F0 E5 05 F1 | 	add	objptr, ##43504
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     F0 E5 85 F1 | 	sub	objptr, ##43504
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7B 00 00 FF 
00d34     A8 E4 05 F1 | 	add	objptr, ##63144
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7B 00 00 FF 
00d40     A8 E4 85 F1 | 	sub	objptr, ##63144
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7B 00 00 FF 
00d58     A8 E4 05 F1 | 	add	objptr, ##63144
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7B 00 00 FF 
00d64     A8 E4 85 F1 | 	sub	objptr, ##63144
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     57 00 00 FF 
00d74     00 E4 05 F1 | 	add	objptr, ##44544
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     57 00 00 FF 
00d80     00 E4 85 F1 | 	sub	objptr, ##44544
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     F8 D5 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     F8 D9 B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     30 D9 B1 FD | 	call	#__system__LTrim_S
00dc0     7B 00 00 FF 
00dc4     B0 E4 05 F1 | 	add	objptr, ##63152
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     B0 E4 85 F1 | 	sub	objptr, ##18608
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     57 00 00 FF 
00ddc     00 E4 85 F1 | 	sub	objptr, ##44544
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     34 D5 B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     BC D9 B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     F4 D8 B1 FD | 	call	#__system__LTrim_S
00dfc     57 00 00 FF 
00e00     00 E4 05 F1 | 	add	objptr, ##44544
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     57 00 00 FF 
00e0c     00 E4 85 F1 | 	sub	objptr, ##44544
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     5C 01 00 FF 
00e18     22 1F 06 F6 | 	mov	local01, ##@LR__4592
00e1c     7B 00 00 FF 
00e20     B0 E4 05 F1 | 	add	objptr, ##63152
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7B 00 00 FF 
00e2c     B0 E4 85 F1 | 	sub	objptr, ##63152
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     57 00 00 FF 
00e34     08 E4 05 F1 | 	add	objptr, ##44552
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     57 00 00 FF 
00e40     08 E4 85 F1 | 	sub	objptr, ##44552
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7B 00 00 FF 
00e54     B0 E4 05 F1 | 	add	objptr, ##63152
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7B 00 00 FF 
00e60     B0 E4 85 F1 | 	sub	objptr, ##63152
00e64     5C 01 00 FF 
00e68     23 15 06 F6 | 	mov	arg02, ##@LR__4593
00e6c     94 B4 B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     57 00 00 5F 
00e78     08 E4 05 51 |  if_ne	add	objptr, ##44552
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     57 00 00 5F 
00e84     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     57 00 00 FF 
00e90     08 E4 05 F1 | 	add	objptr, ##44552
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     57 00 00 FF 
00e9c     08 E4 85 F1 | 	sub	objptr, ##44552
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7B 00 00 FF 
00eb0     B0 E4 05 F1 | 	add	objptr, ##63152
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7B 00 00 FF 
00ebc     B0 E4 85 F1 | 	sub	objptr, ##63152
00ec0     5C 01 00 FF 
00ec4     24 15 06 F6 | 	mov	arg02, ##@LR__4594
00ec8     38 B4 B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     57 00 00 AF 
00ed4     08 E4 05 A1 |  if_e	add	objptr, ##44552
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     57 00 00 AF 
00ee0     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     57 00 00 FF 
00eec     08 E4 05 F1 | 	add	objptr, ##44552
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     57 00 00 FF 
00ef8     08 E4 85 F1 | 	sub	objptr, ##44552
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7B 00 00 FF 
00f08     B0 E4 05 F1 | 	add	objptr, ##63152
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7B 00 00 FF 
00f14     B0 E4 85 F1 | 	sub	objptr, ##63152
00f18     5C 01 00 FF 
00f1c     25 15 06 F6 | 	mov	arg02, ##@LR__4595
00f20     E0 B3 B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     57 00 00 5F 
00f2c     08 E4 05 51 |  if_ne	add	objptr, ##44552
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     57 00 00 5F 
00f38     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     57 00 00 FF 
00f44     08 E4 05 F1 | 	add	objptr, ##44552
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     57 00 00 FF 
00f50     08 E4 85 F1 | 	sub	objptr, ##44552
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7B 00 00 FF 
00f60     B0 E4 05 F1 | 	add	objptr, ##63152
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7B 00 00 FF 
00f6c     B0 E4 85 F1 | 	sub	objptr, ##63152
00f70     5C 01 00 FF 
00f74     26 15 06 F6 | 	mov	arg02, ##@LR__4596
00f78     88 B3 B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     57 00 00 AF 
00f84     08 E4 05 A1 |  if_e	add	objptr, ##44552
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     57 00 00 AF 
00f90     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     57 00 00 FF 
00fb0     00 E4 05 F1 | 	add	objptr, ##44544
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     57 00 00 FF 
00fbc     00 E4 85 F1 | 	sub	objptr, ##44544
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     6C D4 B1 FD | 	call	#__system__Mid_S
00fcc     7B 00 00 FF 
00fd0     B4 E4 05 F1 | 	add	objptr, ##63156
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7B 00 00 FF 
00fe0     B4 E4 85 F1 | 	sub	objptr, ##63156
00fe4     C0 29 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7B 00 00 FF 
01010     A8 E4 05 F1 | 	add	objptr, ##63144
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7B 00 00 FF 
0101c     A8 E4 85 F1 | 	sub	objptr, ##63144
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7B 00 00 FF 
0106c     BC E4 05 F1 | 	add	objptr, ##63164
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7B 00 00 FF 
010a0     BC E4 85 F1 | 	sub	objptr, ##63164
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     57 00 00 FF 
010b4     00 E4 05 F1 | 	add	objptr, ##44544
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     BC E4 05 F1 | 	add	objptr, ##18620
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7B 00 00 FF 
010cc     BC E4 85 F1 | 	sub	objptr, ##63164
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     60 D3 B1 FD | 	call	#__system__Mid_S
010d8     7B 00 00 FF 
010dc     C4 E4 05 F1 | 	add	objptr, ##63172
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7B 00 00 FF 
010e8     C4 E4 85 F1 | 	sub	objptr, ##63172
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     5C 01 00 FF 
010f4     27 15 06 F6 | 	mov	arg02, ##@LR__4597
010f8     08 B2 B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     F0 E5 05 F1 | 	add	objptr, ##43504
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     D4 E4 05 F1 | 	add	objptr, ##19668
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7B 00 00 FF 
01128     C4 E4 85 F1 | 	sub	objptr, ##63172
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     57 00 00 FF 
01138     00 E4 05 F1 | 	add	objptr, ##44544
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     BC E4 05 F1 | 	add	objptr, ##18620
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7B 00 00 FF 
01164     BC E4 85 F1 | 	sub	objptr, ##63164
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     C0 D2 B1 FD | 	call	#__system__Mid_S
01178     7B 00 00 FF 
0117c     C4 E4 05 F1 | 	add	objptr, ##63172
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7B 00 00 FF 
01188     C4 E4 85 F1 | 	sub	objptr, ##63172
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     5C 01 00 FF 
01194     28 15 06 F6 | 	mov	arg02, ##@LR__4598
01198     68 B1 B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     F0 E5 05 F1 | 	add	objptr, ##43504
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     D4 E4 05 F1 | 	add	objptr, ##19668
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7B 00 00 FF 
011c8     C4 E4 85 F1 | 	sub	objptr, ##63172
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     F0 E5 05 F1 | 	add	objptr, ##43504
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     5C 01 00 FF 
011fc     29 15 06 F6 | 	mov	arg02, ##@LR__4599
01200     54 00 00 FF 
01204     F0 E5 85 F1 | 	sub	objptr, ##43504
01208     F8 B0 B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     F0 E5 05 F1 | 	add	objptr, ##43504
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     D4 E4 05 F1 | 	add	objptr, ##19668
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     D4 E4 85 F1 | 	sub	objptr, ##19668
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     F0 E5 85 F1 | 	sub	objptr, ##43504
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     BC B0 B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     F0 E5 05 F1 | 	add	objptr, ##43504
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     F0 E5 85 F1 | 	sub	objptr, ##43504
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7B 00 00 FF 
01314     C4 E4 05 F1 | 	add	objptr, ##63172
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7B 00 00 FF 
01320     C4 E4 85 F1 | 	sub	objptr, ##63172
01324     5C 01 00 FF 
01328     2B 15 06 F6 | 	mov	arg02, ##@LR__4600
0132c     D4 AF B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7B 00 00 FF 
01340     C4 E4 05 F1 | 	add	objptr, ##63172
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7B 00 00 FF 
0134c     C4 E4 85 F1 | 	sub	objptr, ##63172
01350     5C 01 00 FF 
01354     2D 15 06 F6 | 	mov	arg02, ##@LR__4601
01358     A8 AF B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     F0 E5 05 F1 | 	add	objptr, ##43504
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     F0 E5 85 F1 | 	sub	objptr, ##43504
01398     0C D0 B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     5C 01 00 FF 
013a4     2F 15 06 F6 | 	mov	arg02, ##@LR__4602
013a8     58 AF B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     F0 E5 05 F1 | 	add	objptr, ##43504
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     F0 E5 85 F1 | 	sub	objptr, ##43504
013e0     3C CF B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     5C 01 00 FF 
013ec     31 15 06 F6 | 	mov	arg02, ##@LR__4603
013f0     10 AF B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     F0 E5 05 F1 | 	add	objptr, ##43504
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     F0 E5 85 F1 | 	sub	objptr, ##43504
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     24 CF B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     A4 AE B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     F0 E5 05 F1 | 	add	objptr, ##43504
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     F0 E5 85 F1 | 	sub	objptr, ##43504
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     F0 E5 05 F1 | 	add	objptr, ##43504
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     DC E4 05 F1 | 	add	objptr, ##19676
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     DC E4 85 F1 | 	sub	objptr, ##19676
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     E0 E4 05 F1 | 	add	objptr, ##19680
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7B 00 00 FF 
01594     CC E4 85 F1 | 	sub	objptr, ##63180
01598     5C 01 00 FF 
0159c     33 15 06 F6 | 	mov	arg02, ##@LR__4604
015a0     60 AD B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7B 00 00 FF 
015b0     CC E4 05 F1 | 	add	objptr, ##63180
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7B 00 00 FF 
015bc     CC E4 85 F1 | 	sub	objptr, ##63180
015c0     5C 01 00 FF 
015c4     35 15 06 F6 | 	mov	arg02, ##@LR__4605
015c8     38 AD B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7B 00 00 FF 
015d8     CC E4 05 F1 | 	add	objptr, ##63180
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7B 00 00 FF 
015e4     CC E4 85 F1 | 	sub	objptr, ##63180
015e8     5C 01 00 FF 
015ec     37 15 06 F6 | 	mov	arg02, ##@LR__4606
015f0     10 AD B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7B 00 00 FF 
01600     CC E4 05 F1 | 	add	objptr, ##63180
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7B 00 00 FF 
0160c     CC E4 85 F1 | 	sub	objptr, ##63180
01610     5C 01 00 FF 
01614     39 33 06 F6 | 	mov	local11, ##@LR__4607
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     E4 AC B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7B 00 00 FF 
0162c     CC E4 05 F1 | 	add	objptr, ##63180
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7B 00 00 FF 
01638     CC E4 85 F1 | 	sub	objptr, ##63180
0163c     5C 01 00 FF 
01640     3B 31 06 F6 | 	mov	local10, ##@LR__4608
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     B4 AC B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7B 00 00 FF 
0165c     CC E4 05 F1 | 	add	objptr, ##63180
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7B 00 00 FF 
01668     CC E4 85 F1 | 	sub	objptr, ##63180
0166c     5C 01 00 FF 
01670     3D 31 06 F6 | 	mov	local10, ##@LR__4609
01674     18 15 02 F6 | 	mov	arg02, local10
01678     88 AC B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7B 00 00 FF 
01688     CC E4 05 F1 | 	add	objptr, ##63180
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7B 00 00 FF 
01694     CC E4 85 F1 | 	sub	objptr, ##63180
01698     5C 01 00 FF 
0169c     3F 37 06 F6 | 	mov	local13, ##@LR__4610
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     5C AC B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7B 00 00 FF 
016b4     D0 E4 05 F1 | 	add	objptr, ##63184
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7B 00 00 FF 
016c0     D0 E4 85 F1 | 	sub	objptr, ##63184
016c4     5C 01 00 FF 
016c8     41 4B 06 F6 | 	mov	local23, ##@LR__4611
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     2C AC B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7B 00 00 FF 
016e4     CC E4 05 F1 | 	add	objptr, ##63180
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7B 00 00 FF 
016f0     CC E4 85 F1 | 	sub	objptr, ##63180
016f4     5C 01 00 FF 
016f8     43 4B 06 F6 | 	mov	local23, ##@LR__4612
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     00 AC B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7B 00 00 FF 
01710     D0 E4 05 F1 | 	add	objptr, ##63184
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7B 00 00 FF 
0171c     D0 E4 85 F1 | 	sub	objptr, ##63184
01720     5C 01 00 FF 
01724     45 45 06 F6 | 	mov	local20, ##@LR__4613
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     D0 AB B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7B 00 00 FF 
01740     CC E4 05 F1 | 	add	objptr, ##63180
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7B 00 00 FF 
0174c     CC E4 85 F1 | 	sub	objptr, ##63180
01750     5C 01 00 FF 
01754     47 45 06 F6 | 	mov	local20, ##@LR__4614
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     A4 AB B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7B 00 00 FF 
0176c     D0 E4 05 F1 | 	add	objptr, ##63184
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7B 00 00 FF 
01778     D0 E4 85 F1 | 	sub	objptr, ##63184
0177c     5C 01 00 FF 
01780     49 4D 06 F6 | 	mov	local24, ##@LR__4615
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     74 AB B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7B 00 00 FF 
0179c     CC E4 05 F1 | 	add	objptr, ##63180
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7B 00 00 FF 
017a8     CC E4 85 F1 | 	sub	objptr, ##63180
017ac     5C 01 00 FF 
017b0     4B 4F 06 F6 | 	mov	local25, ##@LR__4616
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     44 AB B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7B 00 00 FF 
017cc     D0 E4 05 F1 | 	add	objptr, ##63184
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7B 00 00 FF 
017d8     D0 E4 85 F1 | 	sub	objptr, ##63184
017dc     5C 01 00 FF 
017e0     4D 51 06 F6 | 	mov	local26, ##@LR__4617
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     14 AB B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     F0 E5 05 F1 | 	add	objptr, ##43504
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     DC E4 05 F1 | 	add	objptr, ##19676
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7B 00 00 FF 
01824     D0 E4 85 F1 | 	sub	objptr, ##63184
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     04 AB B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     F0 E5 05 F1 | 	add	objptr, ##43504
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     F0 E5 85 F1 | 	sub	objptr, ##43504
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     F0 E5 05 F1 | 	add	objptr, ##43504
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     F0 E5 85 F1 | 	sub	objptr, ##43504
01930     7C CE B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     B4 CD B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     F0 E5 05 F1 | 	add	objptr, ##43504
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     F0 E5 85 F1 | 	sub	objptr, ##43504
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     F0 E5 05 F1 | 	add	objptr, ##43504
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     F0 E5 85 F1 | 	sub	objptr, ##43504
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     F0 E5 05 F1 | 	add	objptr, ##43504
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     F0 E5 85 F1 | 	sub	objptr, ##43504
01a98     84 C8 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     5C 01 00 FF 
01aa4     4F 15 06 F6 | 	mov	arg02, ##@LR__4618
01aa8     58 A8 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     F0 E5 05 F1 | 	add	objptr, ##43504
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     F0 E5 85 F1 | 	sub	objptr, ##43504
01ad8     CC C8 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     5C 01 00 FF 
01ae4     51 15 06 F6 | 	mov	arg02, ##@LR__4619
01ae8     18 A8 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     F0 E5 05 F1 | 	add	objptr, ##43504
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     F0 E5 85 F1 | 	sub	objptr, ##43504
01b24     08 CB B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     F0 E5 05 F1 | 	add	objptr, ##43504
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     F0 E5 85 F1 | 	sub	objptr, ##43504
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     F0 E5 05 F1 | 	add	objptr, ##43504
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     F0 E5 85 F1 | 	sub	objptr, ##43504
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     84 17 90 AD |  if_e	jmp	#LR__0149
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     F0 E5 05 F1 | 	add	objptr, ##43504
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     F0 E5 85 F1 | 	sub	objptr, ##43504
01bc0     08 36 B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7B 00 00 5F 
01bcc     D4 E4 05 51 |  if_ne	add	objptr, ##63188
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7B 00 00 FF 
01bd8     D4 E4 E5 F3 | 	sumnz	objptr, ##63188
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7B 00 00 AF 
01be4     D4 E4 85 A1 |  if_e	sub	objptr, ##63188
01be8     7B 00 00 FF 
01bec     D4 E4 05 F1 | 	add	objptr, ##63188
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     E4 E4 85 F1 | 	sub	objptr, ##19684
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     E8 E4 05 F1 | 	add	objptr, ##19688
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     E4 E4 85 F1 | 	sub	objptr, ##19684
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     5C 01 00 FF 
01c38     53 17 06 F6 | 	mov	arg03, ##@LR__4620
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     F0 E5 85 F1 | 	sub	objptr, ##43504
01c48     1C CC B1 FD | 	call	#__system__Instr
01c4c     7B 00 00 FF 
01c50     DC E4 05 F1 | 	add	objptr, ##63196
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7B 00 00 FF 
01c60     DC E4 85 F1 | 	sub	objptr, ##63196
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7B 00 00 FF 
01c70     D4 E4 05 F1 | 	add	objptr, ##63188
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     E4 E4 85 F1 | 	sub	objptr, ##19684
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     F0 E5 85 F1 | 	sub	objptr, ##43504
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7B 00 00 FF 
01cb8     DC E4 05 F1 | 	add	objptr, ##63196
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7B 00 00 FF 
01cc4     DC E4 85 F1 | 	sub	objptr, ##63196
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7B 00 00 FF 
01cdc     D4 E4 05 F1 | 	add	objptr, ##63188
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     E4 E4 85 F1 | 	sub	objptr, ##19684
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     E4 E4 05 F1 | 	add	objptr, ##19684
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     E4 E4 85 F1 | 	sub	objptr, ##19684
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     E4 E4 05 F1 | 	add	objptr, ##19684
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     E4 E4 85 F1 | 	sub	objptr, ##19684
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     F0 E5 85 F1 | 	sub	objptr, ##43504
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7B 00 00 FF 
01dd0     DC E4 05 F1 | 	add	objptr, ##63196
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7B 00 00 FF 
01ddc     DC E4 85 F1 | 	sub	objptr, ##63196
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     BC C5 B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7B 00 00 FF 
01df4     D4 E4 05 F1 | 	add	objptr, ##63188
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     E4 E4 85 F1 | 	sub	objptr, ##19684
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     EC E4 05 F1 | 	add	objptr, ##19692
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7B 00 00 FF 
01e34     DC E4 85 F1 | 	sub	objptr, ##63196
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     DC C4 B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7B 00 00 FF 
01e4c     D4 E4 05 F1 | 	add	objptr, ##63188
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     E4 E4 85 F1 | 	sub	objptr, ##19684
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     F0 E5 85 F1 | 	sub	objptr, ##43504
01e74     A8 C4 B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     5C 01 00 FF 
01e80     55 15 06 F6 | 	mov	arg02, ##@LR__4621
01e84     7C A4 B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7B 00 00 FF 
01e94     D4 E4 05 F1 | 	add	objptr, ##63188
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     E4 E4 85 F1 | 	sub	objptr, ##19684
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     F0 E5 85 F1 | 	sub	objptr, ##43504
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7B 00 00 FF 
01ee8     D4 E4 05 F1 | 	add	objptr, ##63188
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     E4 E4 85 F1 | 	sub	objptr, ##19684
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     E4 E4 05 F1 | 	add	objptr, ##19684
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     E4 E4 85 F1 | 	sub	objptr, ##19684
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     E4 E4 05 F1 | 	add	objptr, ##19684
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     E4 E4 85 F1 | 	sub	objptr, ##19684
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     F0 E5 85 F1 | 	sub	objptr, ##43504
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     B0 C3 B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7B 00 00 FF 
02000     D4 E4 05 F1 | 	add	objptr, ##63188
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     E4 E4 85 F1 | 	sub	objptr, ##19684
02014     F2 26 02 F1 | 	add	local05, objptr
02018     5C 01 00 FF 
0201c     57 33 06 F6 | 	mov	local11, ##@LR__4622
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     F0 E5 85 F1 | 	sub	objptr, ##43504
0202c                 | LR__0107
0202c     7B 00 00 FF 
02030     D4 E4 05 F1 | 	add	objptr, ##63188
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     E4 E4 85 F1 | 	sub	objptr, ##19684
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     E8 E4 05 F1 | 	add	objptr, ##19688
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7B 00 00 FF 
0205c     D8 E4 85 F1 | 	sub	objptr, ##63192
02060     5C 01 00 FF 
02064     59 15 06 F6 | 	mov	arg02, ##@LR__4623
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     94 A2 B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7B 00 00 FF 
0207c     D8 E4 05 F1 | 	add	objptr, ##63192
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7B 00 00 FF 
02088     D8 E4 85 F1 | 	sub	objptr, ##63192
0208c     5C 01 00 FF 
02090     5F 15 06 F6 | 	mov	arg02, ##@LR__4624
02094     6C A2 B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7B 00 00 FF 
020a4     D8 E4 05 F1 | 	add	objptr, ##63192
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7B 00 00 FF 
020b0     D8 E4 85 F1 | 	sub	objptr, ##63192
020b4     5C 01 00 FF 
020b8     66 15 06 F6 | 	mov	arg02, ##@LR__4625
020bc     44 A2 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7B 00 00 FF 
020cc     D4 E4 05 F1 | 	add	objptr, ##63188
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     E4 E4 85 F1 | 	sub	objptr, ##19684
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     F0 E5 85 F1 | 	sub	objptr, ##43504
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7B 00 00 FF 
02118     D4 E4 05 F1 | 	add	objptr, ##63188
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     E4 E4 85 F1 | 	sub	objptr, ##19684
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     5C 01 00 FF 
0213c     6C 15 06 F6 | 	mov	arg02, ##@LR__4626
02140     54 00 00 FF 
02144     F0 E5 85 F1 | 	sub	objptr, ##43504
02148     B8 A1 B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7B 00 00 FF 
02158     D4 E4 05 F1 | 	add	objptr, ##63188
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     E4 E4 85 F1 | 	sub	objptr, ##19684
02170     F2 26 02 F1 | 	add	local05, objptr
02174     5C 01 00 FF 
02178     6F 33 06 F6 | 	mov	local11, ##@LR__4627
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     E4 E4 05 F1 | 	add	objptr, ##19684
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     E4 E4 85 F1 | 	sub	objptr, ##19684
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     F0 E5 85 F1 | 	sub	objptr, ##43504
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7B 00 00 FF 
021b8     D4 E4 05 F1 | 	add	objptr, ##63188
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     E4 E4 85 F1 | 	sub	objptr, ##19684
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     5C 01 00 FF 
021e0     71 15 06 F6 | 	mov	arg02, ##@LR__4628
021e4     54 00 00 FF 
021e8     F0 E5 85 F1 | 	sub	objptr, ##43504
021ec     14 A1 B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7B 00 00 FF 
021fc     D4 E4 05 F1 | 	add	objptr, ##63188
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     E4 E4 85 F1 | 	sub	objptr, ##19684
02214     F2 26 02 F1 | 	add	local05, objptr
02218     5C 01 00 FF 
0221c     75 33 06 F6 | 	mov	local11, ##@LR__4629
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     E4 E4 05 F1 | 	add	objptr, ##19684
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     E4 E4 85 F1 | 	sub	objptr, ##19684
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     F0 E5 85 F1 | 	sub	objptr, ##43504
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7B 00 00 FF 
02260     D8 E4 05 F1 | 	add	objptr, ##63192
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7B 00 00 FF 
0226c     D8 E4 85 F1 | 	sub	objptr, ##63192
02270     5C 01 00 FF 
02274     77 15 06 F6 | 	mov	arg02, ##@LR__4630
02278     88 A0 B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7B 00 00 FF 
02288     D8 E4 05 F1 | 	add	objptr, ##63192
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7B 00 00 FF 
02294     D8 E4 85 F1 | 	sub	objptr, ##63192
02298     5C 01 00 FF 
0229c     7C 15 06 F6 | 	mov	arg02, ##@LR__4631
022a0     60 A0 B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7B 00 00 FF 
022b0     D4 E4 05 F1 | 	add	objptr, ##63188
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     E4 E4 85 F1 | 	sub	objptr, ##19684
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     5C 01 00 FF 
022d4     7F 15 06 F6 | 	mov	arg02, ##@LR__4632
022d8     54 00 00 FF 
022dc     F0 E5 85 F1 | 	sub	objptr, ##43504
022e0     20 A0 B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7B 00 00 FF 
022f0     D4 E4 05 F1 | 	add	objptr, ##63188
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     E4 E4 85 F1 | 	sub	objptr, ##19684
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     5C 01 00 FF 
02310     85 33 06 F6 | 	mov	local11, ##@LR__4633
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     F0 E5 85 F1 | 	sub	objptr, ##43504
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7B 00 00 FF 
02324     D4 E4 05 F1 | 	add	objptr, ##63188
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     E4 E4 85 F1 | 	sub	objptr, ##19684
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     5C 01 00 FF 
02348     87 15 06 F6 | 	mov	arg02, ##@LR__4634
0234c     54 00 00 FF 
02350     F0 E5 85 F1 | 	sub	objptr, ##43504
02354     AC 9F B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7B 00 00 FF 
02364     D4 E4 05 F1 | 	add	objptr, ##63188
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     E4 E4 85 F1 | 	sub	objptr, ##19684
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     5C 01 00 FF 
02384     90 33 06 F6 | 	mov	local11, ##@LR__4635
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     F0 E5 85 F1 | 	sub	objptr, ##43504
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7B 00 00 FF 
02398     D4 E4 05 F1 | 	add	objptr, ##63188
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     E4 E4 85 F1 | 	sub	objptr, ##19684
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     5C 01 00 FF 
023bc     92 15 06 F6 | 	mov	arg02, ##@LR__4636
023c0     54 00 00 FF 
023c4     F0 E5 85 F1 | 	sub	objptr, ##43504
023c8     38 9F B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7B 00 00 FF 
023d8     D4 E4 05 F1 | 	add	objptr, ##63188
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     E4 E4 85 F1 | 	sub	objptr, ##19684
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     5C 01 00 FF 
023f8     9B 33 06 F6 | 	mov	local11, ##@LR__4637
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     F0 E5 85 F1 | 	sub	objptr, ##43504
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7B 00 00 FF 
0240c     D4 E4 05 F1 | 	add	objptr, ##63188
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     E4 E4 85 F1 | 	sub	objptr, ##19684
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     5C 01 00 FF 
02430     9D 15 06 F6 | 	mov	arg02, ##@LR__4638
02434     54 00 00 FF 
02438     F0 E5 85 F1 | 	sub	objptr, ##43504
0243c     C4 9E B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7B 00 00 FF 
0244c     D4 E4 05 F1 | 	add	objptr, ##63188
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     E4 E4 85 F1 | 	sub	objptr, ##19684
02464     F2 26 02 F1 | 	add	local05, objptr
02468     5C 01 00 FF 
0246c     A6 33 06 F6 | 	mov	local11, ##@LR__4639
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     F0 E5 85 F1 | 	sub	objptr, ##43504
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7B 00 00 FF 
02480     D4 E4 05 F1 | 	add	objptr, ##63188
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     E4 E4 85 F1 | 	sub	objptr, ##19684
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     5C 01 00 FF 
024a8     A8 15 06 F6 | 	mov	arg02, ##@LR__4640
024ac     54 00 00 FF 
024b0     F0 E5 85 F1 | 	sub	objptr, ##43504
024b4     4C 9E B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7B 00 00 FF 
024c4     D4 E4 05 F1 | 	add	objptr, ##63188
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     E4 E4 85 F1 | 	sub	objptr, ##19684
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     5C 01 00 FF 
024e4     AB 33 06 F6 | 	mov	local11, ##@LR__4641
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     F0 E5 85 F1 | 	sub	objptr, ##43504
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     60 06 90 3D |  if_ae	jmp	#LR__0129
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     F0 E5 05 F1 | 	add	objptr, ##43504
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     F0 E5 85 F1 | 	sub	objptr, ##43504
02534     70 14 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     F0 E5 05 F1 | 	add	objptr, ##43504
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     F0 E5 85 F1 | 	sub	objptr, ##43504
0256c     EC 05 90 3D |  if_ae	jmp	#LR__0128
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     F0 E5 05 F1 | 	add	objptr, ##43504
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     F0 E5 85 F1 | 	sub	objptr, ##43504
025a0     B8 0D B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     F0 E5 05 F1 | 	add	objptr, ##43504
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     F0 E5 85 F1 | 	sub	objptr, ##43504
025d8     80 05 90 3D |  if_ae	jmp	#LR__0128
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     F0 E5 05 F1 | 	add	objptr, ##43504
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     F0 E5 85 F1 | 	sub	objptr, ##43504
0260c                 | ' 
0260c                 | ' select case s
0260c     5D 01 00 FF 
02610     88 14 06 F6 | 	mov	arg02, ##@LR__4711
02614     EC 9C B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     F0 E5 05 F1 | 	add	objptr, ##43504
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     F0 E5 85 F1 | 	sub	objptr, ##43504
02658     00 05 90 3D |  if_ae	jmp	#LR__0128
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     F0 E5 05 F1 | 	add	objptr, ##43504
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     F0 E5 85 F1 | 	sub	objptr, ##43504
0268c     18 15 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     F0 E5 05 F1 | 	add	objptr, ##43504
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     F0 E5 85 F1 | 	sub	objptr, ##43504
026c4     94 04 90 3D |  if_ae	jmp	#LR__0128
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     F0 E5 05 F1 | 	add	objptr, ##43504
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 35 02 F6 | 	mov	local12, local03
026e0     03 34 66 F0 | 	shl	local12, #3
026e4     F2 4A 02 F6 | 	mov	local23, objptr
026e8     F2 34 02 F1 | 	add	local12, objptr
026ec     1A 13 02 FB | 	rdlong	arg01, local12
026f0     54 00 00 FF 
026f4     F0 E5 85 F1 | 	sub	objptr, ##43504
026f8     2C 20 B0 FD | 	call	#_isfunction
026fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02700     04 2E 06 F1 | 	add	local09, #4
02704     17 FB 61 FC | 	wrlong	result1, local09
02708                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02708     11 2F 02 F6 | 	mov	local09, local03
0270c     03 2E 66 F0 | 	shl	local09, #3
02710     54 00 00 FF 
02714     F0 E5 05 F1 | 	add	objptr, ##43504
02718     F2 2E 02 F1 | 	add	local09, objptr
0271c     04 2E 06 F1 | 	add	local09, #4
02720     17 33 02 FB | 	rdlong	local11, local09
02724     01 32 56 F2 | 	cmps	local11, #1 wc
02728     54 00 00 FF 
0272c     F0 E5 85 F1 | 	sub	objptr, ##43504
02730     28 04 90 3D |  if_ae	jmp	#LR__0128
02734     11 2F 02 F6 | 	mov	local09, local03
02738     03 2E 66 F0 | 	shl	local09, #3
0273c     54 00 00 FF 
02740     F0 E5 05 F1 | 	add	objptr, ##43504
02744     F2 2E 02 F1 | 	add	local09, objptr
02748     11 31 02 F6 | 	mov	local10, local03
0274c     18 37 02 F6 | 	mov	local13, local10
02750     03 36 66 F0 | 	shl	local13, #3
02754     F2 34 02 F6 | 	mov	local12, objptr
02758     F2 36 02 F1 | 	add	local13, objptr
0275c     1B 13 02 FB | 	rdlong	arg01, local13
02760     54 00 00 FF 
02764     F0 E5 85 F1 | 	sub	objptr, ##43504
02768     D0 0E B0 FD | 	call	#_isnotename
0276c     04 2E 06 F1 | 	add	local09, #4
02770     17 FB 61 FC | 	wrlong	result1, local09
02774                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02774                 | ' if lparts(i).token>0 then 
02774     11 2F 02 F6 | 	mov	local09, local03
02778     03 2E 66 F0 | 	shl	local09, #3
0277c     54 00 00 FF 
02780     F0 E5 05 F1 | 	add	objptr, ##43504
02784     F2 2E 02 F1 | 	add	local09, objptr
02788     04 2E 06 F1 | 	add	local09, #4
0278c     17 33 02 FB | 	rdlong	local11, local09
02790     01 32 56 F2 | 	cmps	local11, #1 wc
02794     54 00 00 FF 
02798     F0 E5 85 F1 | 	sub	objptr, ##43504
0279c     88 00 90 CD |  if_b	jmp	#LR__0120
027a0     11 27 02 F6 | 	mov	local05, local03
027a4     03 26 66 F0 | 	shl	local05, #3
027a8     54 00 00 FF 
027ac     F0 E5 05 F1 | 	add	objptr, ##43504
027b0     F2 26 02 F1 | 	add	local05, objptr
027b4     04 26 06 F1 | 	add	local05, #4
027b8     13 33 02 FB | 	rdlong	local11, local05
027bc     19 13 02 F6 | 	mov	arg01, local11
027c0     54 00 00 FF 
027c4     F0 E5 85 F1 | 	sub	objptr, ##43504
027c8     D4 5F B1 FD | 	call	#_getnoteval
027cc     FD 62 02 F6 | 	mov	local35, result1
027d0     11 2F 02 F6 | 	mov	local09, local03
027d4     03 2E 66 F0 | 	shl	local09, #3
027d8     54 00 00 FF 
027dc     F0 E5 05 F1 | 	add	objptr, ##43504
027e0     F2 2E 02 F1 | 	add	local09, objptr
027e4     31 13 02 F6 | 	mov	arg01, local35
027e8     54 00 00 FF 
027ec     F0 E5 85 F1 | 	sub	objptr, ##43504
027f0     24 BD B1 FD | 	call	#__system__str_S
027f4     17 FB 61 FC | 	wrlong	result1, local09
027f8     11 25 02 F6 | 	mov	local04, local03
027fc     12 2F 02 F6 | 	mov	local09, local04
02800     03 2E 66 F0 | 	shl	local09, #3
02804     54 00 00 FF 
02808     F0 E5 05 F1 | 	add	objptr, ##43504
0280c     F2 2E 02 F1 | 	add	local09, objptr
02810     04 2E 06 F1 | 	add	local09, #4
02814     01 00 80 FF 
02818     17 05 68 FC | 	wrlong	##514, local09
0281c     54 00 00 FF 
02820     F0 E5 85 F1 | 	sub	objptr, ##43504
02824     34 03 90 FD | 	jmp	#LR__0128
02828                 | LR__0120
02828     11 27 02 F6 | 	mov	local05, local03
0282c     03 26 66 F0 | 	shl	local05, #3
02830     54 00 00 FF 
02834     F0 E5 05 F1 | 	add	objptr, ##43504
02838     F2 26 02 F1 | 	add	local05, objptr
0283c     13 13 02 FB | 	rdlong	arg01, local05
02840     54 00 00 FF 
02844     F0 E5 85 F1 | 	sub	objptr, ##43504
02848     50 25 B0 FD | 	call	#_isnum
0284c     FD 1E 02 F6 | 	mov	local01, result1
02850     7B 00 00 FF 
02854     E0 E4 05 F1 | 	add	objptr, ##63200
02858     F2 1E 62 FC | 	wrlong	local01, objptr
0285c     11 27 02 F6 | 	mov	local05, local03
02860     03 26 66 F0 | 	shl	local05, #3
02864     26 00 00 FF 
02868     F0 E4 85 F1 | 	sub	objptr, ##19696
0286c     F2 26 02 F1 | 	add	local05, objptr
02870     13 13 02 FB | 	rdlong	arg01, local05
02874     54 00 00 FF 
02878     F0 E5 85 F1 | 	sub	objptr, ##43504
0287c     F4 27 B0 FD | 	call	#_isint
02880     FD 1E 02 F6 | 	mov	local01, result1
02884     7B 00 00 FF 
02888     E4 E4 05 F1 | 	add	objptr, ##63204
0288c     F2 1E 62 FC | 	wrlong	local01, objptr
02890     11 27 02 F6 | 	mov	local05, local03
02894     03 26 66 F0 | 	shl	local05, #3
02898     26 00 00 FF 
0289c     F4 E4 85 F1 | 	sub	objptr, ##19700
028a0     F2 28 02 F6 | 	mov	local06, objptr
028a4     F2 26 02 F1 | 	add	local05, objptr
028a8     13 13 02 FB | 	rdlong	arg01, local05
028ac     54 00 00 FF 
028b0     F0 E5 85 F1 | 	sub	objptr, ##43504
028b4     14 29 B0 FD | 	call	#_isdec
028b8     7B 00 00 FF 
028bc     E8 E4 05 F1 | 	add	objptr, ##63208
028c0     F2 FA 61 FC | 	wrlong	result1, objptr
028c4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028c4     08 E4 85 F1 | 	sub	objptr, #8
028c8     F2 1E 0A FB | 	rdlong	local01, objptr wz
028cc     7B 00 00 FF 
028d0     E0 E4 85 F1 | 	sub	objptr, ##63200
028d4     60 00 90 AD |  if_e	jmp	#LR__0121
028d8     7B 00 00 FF 
028dc     E4 E4 05 F1 | 	add	objptr, ##63204
028e0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028e4     7B 00 00 FF 
028e8     E4 E4 85 F1 | 	sub	objptr, ##63204
028ec     48 00 90 AD |  if_e	jmp	#LR__0121
028f0     7B 00 00 FF 
028f4     E8 E4 05 F1 | 	add	objptr, ##63208
028f8     F2 32 0A FB | 	rdlong	local11, objptr wz
028fc     7B 00 00 FF 
02900     E8 E4 85 F1 | 	sub	objptr, ##63208
02904     30 00 90 AD |  if_e	jmp	#LR__0121
02908     11 25 02 F6 | 	mov	local04, local03
0290c     12 2F 02 F6 | 	mov	local09, local04
02910     03 2E 66 F0 | 	shl	local09, #3
02914     54 00 00 FF 
02918     F0 E5 05 F1 | 	add	objptr, ##43504
0291c     F2 2E 02 F1 | 	add	local09, objptr
02920     04 2E 06 F1 | 	add	local09, #4
02924     01 00 80 FF 
02928     17 01 68 FC | 	wrlong	##512, local09
0292c     54 00 00 FF 
02930     F0 E5 85 F1 | 	sub	objptr, ##43504
02934     24 02 90 FD | 	jmp	#LR__0128
02938                 | LR__0121
02938                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02938     7B 00 00 FF 
0293c     E0 E4 05 F1 | 	add	objptr, ##63200
02940     F2 1E 0A FB | 	rdlong	local01, objptr wz
02944     7B 00 00 FF 
02948     E0 E4 85 F1 | 	sub	objptr, ##63200
0294c     64 00 90 AD |  if_e	jmp	#LR__0122
02950     7B 00 00 FF 
02954     E4 E4 05 F1 | 	add	objptr, ##63204
02958     F2 2E 0A FB | 	rdlong	local09, objptr wz
0295c     7B 00 00 FF 
02960     E4 E4 85 F1 | 	sub	objptr, ##63204
02964     7B 00 00 5F 
02968     E8 E4 05 51 |  if_ne	add	objptr, ##63208
0296c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02970     7B 00 00 5F 
02974     E8 E4 85 51 |  if_ne	sub	objptr, ##63208
02978     19 29 22 56 |  if_ne	not	local06, local11
0297c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02980     30 00 90 AD |  if_e	jmp	#LR__0122
02984     11 25 02 F6 | 	mov	local04, local03
02988     12 2F 02 F6 | 	mov	local09, local04
0298c     03 2E 66 F0 | 	shl	local09, #3
02990     54 00 00 FF 
02994     F0 E5 05 F1 | 	add	objptr, ##43504
02998     F2 2E 02 F1 | 	add	local09, objptr
0299c     04 2E 06 F1 | 	add	local09, #4
029a0     01 00 80 FF 
029a4     17 03 68 FC | 	wrlong	##513, local09
029a8     54 00 00 FF 
029ac     F0 E5 85 F1 | 	sub	objptr, ##43504
029b0     A8 01 90 FD | 	jmp	#LR__0128
029b4                 | LR__0122
029b4                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
029b4     7B 00 00 FF 
029b8     E0 E4 05 F1 | 	add	objptr, ##63200
029bc     F2 1E 0A FB | 	rdlong	local01, objptr wz
029c0     7B 00 00 FF 
029c4     E0 E4 85 F1 | 	sub	objptr, ##63200
029c8     7B 00 00 5F 
029cc     E4 E4 05 51 |  if_ne	add	objptr, ##63204
029d0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029d4     7B 00 00 5F 
029d8     E4 E4 85 51 |  if_ne	sub	objptr, ##63204
029dc     17 2F 22 56 |  if_ne	not	local09, local09
029e0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029e4     7B 00 00 5F 
029e8     E8 E4 05 51 |  if_ne	add	objptr, ##63208
029ec     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029f0     7B 00 00 5F 
029f4     E8 E4 85 51 |  if_ne	sub	objptr, ##63208
029f8     19 29 22 56 |  if_ne	not	local06, local11
029fc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02a00     30 00 90 AD |  if_e	jmp	#LR__0123
02a04     11 25 02 F6 | 	mov	local04, local03
02a08     12 2F 02 F6 | 	mov	local09, local04
02a0c     03 2E 66 F0 | 	shl	local09, #3
02a10     54 00 00 FF 
02a14     F0 E5 05 F1 | 	add	objptr, ##43504
02a18     F2 2E 02 F1 | 	add	local09, objptr
02a1c     04 2E 06 F1 | 	add	local09, #4
02a20     01 00 80 FF 
02a24     17 05 68 FC | 	wrlong	##514, local09
02a28     54 00 00 FF 
02a2c     F0 E5 85 F1 | 	sub	objptr, ##43504
02a30     28 01 90 FD | 	jmp	#LR__0128
02a34                 | LR__0123
02a34                 | ' 
02a34                 | ' if isstring(lparts(i).part$) then 
02a34     11 27 02 F6 | 	mov	local05, local03
02a38     03 26 66 F0 | 	shl	local05, #3
02a3c     54 00 00 FF 
02a40     F0 E5 05 F1 | 	add	objptr, ##43504
02a44     F2 26 02 F1 | 	add	local05, objptr
02a48     13 13 02 FB | 	rdlong	arg01, local05
02a4c     54 00 00 FF 
02a50     F0 E5 85 F1 | 	sub	objptr, ##43504
02a54     34 28 B0 FD | 	call	#_isstring
02a58     00 FA 0D F2 | 	cmp	result1, #0 wz
02a5c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a60     11 2F 02 F6 | 	mov	local09, local03
02a64     03 2E 66 F0 | 	shl	local09, #3
02a68     54 00 00 FF 
02a6c     F0 E5 05 F1 | 	add	objptr, ##43504
02a70     F2 2E 02 F1 | 	add	local09, objptr
02a74     04 2E 06 F1 | 	add	local09, #4
02a78     01 00 80 FF 
02a7c     17 07 68 FC | 	wrlong	##515, local09
02a80     11 25 02 F6 | 	mov	local04, local03
02a84     12 2F 02 F6 | 	mov	local09, local04
02a88     03 2E 66 F0 | 	shl	local09, #3
02a8c     F2 2E 02 F1 | 	add	local09, objptr
02a90     11 37 02 F6 | 	mov	local13, local03
02a94     03 36 66 F0 | 	shl	local13, #3
02a98     F2 36 02 F1 | 	add	local13, objptr
02a9c     1B 29 02 FB | 	rdlong	local06, local13
02aa0     02 32 06 F6 | 	mov	local11, #2
02aa4     11 4B 02 F6 | 	mov	local23, local03
02aa8     25 43 02 F6 | 	mov	local19, local23
02aac     21 45 02 F6 | 	mov	local20, local19
02ab0     03 44 66 F0 | 	shl	local20, #3
02ab4     F2 46 02 F6 | 	mov	local21, objptr
02ab8     F2 44 02 F1 | 	add	local20, objptr
02abc     22 13 02 FB | 	rdlong	arg01, local20
02ac0     54 00 00 FF 
02ac4     F0 E5 85 F1 | 	sub	objptr, ##43504
02ac8     09 2B 02 F6 | 	mov	local07, arg01
02acc     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ad0                 | LR__0124
02ad0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ad4     01 2A 06 51 |  if_ne	add	local07, #1
02ad8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02adc                 | LR__0125
02adc     09 2B 82 F1 | 	sub	local07, arg01
02ae0     15 35 02 F6 | 	mov	local12, local07
02ae4     1A 17 02 F6 | 	mov	arg03, local12
02ae8     02 16 86 F1 | 	sub	arg03, #2
02aec     14 13 02 F6 | 	mov	arg01, local06
02af0     19 15 02 F6 | 	mov	arg02, local11
02af4     40 B9 B1 FD | 	call	#__system__Mid_S
02af8     17 FB 61 FC | 	wrlong	result1, local09
02afc     5C 00 90 FD | 	jmp	#LR__0128
02b00                 | LR__0126
02b00                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02b00     11 25 02 F6 | 	mov	local04, local03
02b04     12 27 02 F6 | 	mov	local05, local04
02b08     03 26 66 F0 | 	shl	local05, #3
02b0c     54 00 00 FF 
02b10     F0 E5 05 F1 | 	add	objptr, ##43504
02b14     F2 26 02 F1 | 	add	local05, objptr
02b18     13 13 02 FB | 	rdlong	arg01, local05
02b1c     54 00 00 FF 
02b20     F0 E5 85 F1 | 	sub	objptr, ##43504
02b24     00 20 B0 FD | 	call	#_isname
02b28     00 FA 4D F2 | 	cmps	result1, #0 wz
02b2c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b30     11 25 02 F6 | 	mov	local04, local03
02b34     12 2F 02 F6 | 	mov	local09, local04
02b38     03 2E 66 F0 | 	shl	local09, #3
02b3c     54 00 00 FF 
02b40     F0 E5 05 F1 | 	add	objptr, ##43504
02b44     F2 2E 02 F1 | 	add	local09, objptr
02b48     04 2E 06 F1 | 	add	local09, #4
02b4c     01 00 80 FF 
02b50     17 09 68 FC | 	wrlong	##516, local09
02b54     54 00 00 FF 
02b58     F0 E5 85 F1 | 	sub	objptr, ##43504
02b5c                 | LR__0127
02b5c                 | LR__0128
02b5c     01 22 06 F1 | 	add	local03, #1
02b60     98 F9 9F FD | 	jmp	#LR__0119
02b64                 | LR__0129
02b64     1D 2F 02 F6 | 	mov	local09, local15
02b68     03 2E 66 F0 | 	shl	local09, #3
02b6c     54 00 00 FF 
02b70     F0 E5 05 F1 | 	add	objptr, ##43504
02b74     F2 2E 02 F1 | 	add	local09, objptr
02b78     04 2E 06 F1 | 	add	local09, #4
02b7c     17 FD 6B FC | 	wrlong	#510, local09
02b80     1D 2F 02 F6 | 	mov	local09, local15
02b84     03 2E 66 F0 | 	shl	local09, #3
02b88     F2 26 02 F6 | 	mov	local05, objptr
02b8c     F2 2E 02 F1 | 	add	local09, objptr
02b90     5C 01 00 FF 
02b94     AD 29 06 F6 | 	mov	local06, ##@LR__4642
02b98     17 29 62 FC | 	wrlong	local06, local09
02b9c     10 00 00 FF 
02ba0     54 E4 05 F1 | 	add	objptr, ##8276
02ba4     F2 3A 62 FC | 	wrlong	local15, objptr
02ba8                 | ' 
02ba8                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02ba8                 | ' 
02ba8                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02ba8                 | '  
02ba8                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02ba8     16 00 00 FF 
02bac     94 E4 05 F1 | 	add	objptr, ##11412
02bb0     F2 12 02 FB | 	rdlong	arg01, objptr
02bb4     7B 00 00 FF 
02bb8     D8 E4 85 F1 | 	sub	objptr, ##63192
02bbc     5C 01 00 FF 
02bc0     AE 2F 06 F6 | 	mov	local09, ##@LR__4643
02bc4     17 15 02 F6 | 	mov	arg02, local09
02bc8     38 97 B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     EC 00 90 AD |  if_e	jmp	#LR__0130
02bd4     7B 00 00 FF 
02bd8     D8 E4 05 F1 | 	add	objptr, ##63192
02bdc     F2 12 02 FB | 	rdlong	arg01, objptr
02be0     7B 00 00 FF 
02be4     D8 E4 85 F1 | 	sub	objptr, ##63192
02be8     5C 01 00 FF 
02bec     B3 27 06 F6 | 	mov	local05, ##@LR__4644
02bf0     13 2F 02 F6 | 	mov	local09, local05
02bf4     17 15 02 F6 | 	mov	arg02, local09
02bf8     08 97 B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     BC 00 90 AD |  if_e	jmp	#LR__0130
02c04     7B 00 00 FF 
02c08     D8 E4 05 F1 | 	add	objptr, ##63192
02c0c     F2 12 02 FB | 	rdlong	arg01, objptr
02c10     7B 00 00 FF 
02c14     D8 E4 85 F1 | 	sub	objptr, ##63192
02c18     5C 01 00 FF 
02c1c     B8 29 06 F6 | 	mov	local06, ##@LR__4645
02c20     14 27 02 F6 | 	mov	local05, local06
02c24     13 15 02 F6 | 	mov	arg02, local05
02c28     D8 96 B1 FD | 	call	#__system___string_cmp
02c2c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c30     8C 00 90 AD |  if_e	jmp	#LR__0130
02c34     7B 00 00 FF 
02c38     D8 E4 05 F1 | 	add	objptr, ##63192
02c3c     F2 12 02 FB | 	rdlong	arg01, objptr
02c40     7B 00 00 FF 
02c44     D8 E4 85 F1 | 	sub	objptr, ##63192
02c48     5C 01 00 FF 
02c4c     BD 33 06 F6 | 	mov	local11, ##@LR__4646
02c50     19 29 02 F6 | 	mov	local06, local11
02c54     14 15 02 F6 | 	mov	arg02, local06
02c58     A8 96 B1 FD | 	call	#__system___string_cmp
02c5c     FD 26 0A F6 | 	mov	local05, result1 wz
02c60     5C 00 90 AD |  if_e	jmp	#LR__0130
02c64     7B 00 00 FF 
02c68     D8 E4 05 F1 | 	add	objptr, ##63192
02c6c     F2 12 02 FB | 	rdlong	arg01, objptr
02c70     7B 00 00 FF 
02c74     D8 E4 85 F1 | 	sub	objptr, ##63192
02c78     5C 01 00 FF 
02c7c     C1 33 06 F6 | 	mov	local11, ##@LR__4647
02c80     19 15 02 F6 | 	mov	arg02, local11
02c84     7C 96 B1 FD | 	call	#__system___string_cmp
02c88     FD 28 0A F6 | 	mov	local06, result1 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0130
02c90     7B 00 00 FF 
02c94     D8 E4 05 F1 | 	add	objptr, ##63192
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     7B 00 00 FF 
02ca0     D8 E4 85 F1 | 	sub	objptr, ##63192
02ca4     5C 01 00 FF 
02ca8     C4 37 06 F6 | 	mov	local13, ##@LR__4648
02cac     1B 31 02 F6 | 	mov	local10, local13
02cb0     18 15 02 F6 | 	mov	arg02, local10
02cb4     4C 96 B1 FD | 	call	#__system___string_cmp
02cb8     FD 32 0A F6 | 	mov	local11, result1 wz
02cbc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cc0                 | LR__0130
02cc0     7B 00 00 FF 
02cc4     D4 E4 05 F1 | 	add	objptr, ##63188
02cc8     F2 36 02 FB | 	rdlong	local13, objptr
02ccc     1B 31 02 F6 | 	mov	local10, local13
02cd0     01 30 06 F1 | 	add	local10, #1
02cd4     18 35 02 F6 | 	mov	local12, local10
02cd8     1A 4B 02 F6 | 	mov	local23, local12
02cdc     03 4A 66 F0 | 	shl	local23, #3
02ce0     26 00 00 FF 
02ce4     E4 E4 85 F1 | 	sub	objptr, ##19684
02ce8     F2 42 02 F6 | 	mov	local19, objptr
02cec     F2 4A 02 F1 | 	add	local23, objptr
02cf0     04 4A 06 F1 | 	add	local23, #4
02cf4     25 47 02 FB | 	rdlong	local21, local23
02cf8     04 4A 86 F1 | 	sub	local23, #4
02cfc     23 45 02 F6 | 	mov	local20, local21
02d00     01 00 00 FF 
02d04     04 44 0E F2 | 	cmp	local20, ##516 wz
02d08     54 00 00 FF 
02d0c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d10     48 00 90 5D |  if_ne	jmp	#LR__0131
02d14     7B 00 00 FF 
02d18     D4 E4 05 F1 | 	add	objptr, ##63188
02d1c     F2 2E 02 FB | 	rdlong	local09, objptr
02d20     01 2E 06 F1 | 	add	local09, #1
02d24     17 27 02 F6 | 	mov	local05, local09
02d28     03 26 66 F0 | 	shl	local05, #3
02d2c     26 00 00 FF 
02d30     E4 E4 85 F1 | 	sub	objptr, ##19684
02d34     F2 28 02 F6 | 	mov	local06, objptr
02d38     F2 26 02 F1 | 	add	local05, objptr
02d3c     01 00 00 FF 
02d40     03 32 06 F6 | 	mov	local11, ##515
02d44     04 26 06 F1 | 	add	local05, #4
02d48     01 00 80 FF 
02d4c     13 07 68 FC | 	wrlong	##515, local05
02d50     04 26 86 F1 | 	sub	local05, #4
02d54     54 00 00 FF 
02d58     F0 E5 85 F1 | 	sub	objptr, ##43504
02d5c                 | LR__0131
02d5c                 | ' 
02d5c                 | ' ' abbreviated command has to be at the position addptr
02d5c                 | ' 
02d5c                 | ' 
02d5c                 | ' 
02d5c                 | ' '2b determine a type of the line
02d5c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d5c     54 00 00 FF 
02d60     F0 E5 05 F1 | 	add	objptr, ##43504
02d64     F2 12 02 FB | 	rdlong	arg01, objptr
02d68     54 00 00 FF 
02d6c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d70     58 24 B0 FD | 	call	#_isdec
02d74     00 FA 0D F2 | 	cmp	result1, #0 wz
02d78     30 00 90 AD |  if_e	jmp	#LR__0132
02d7c     54 00 00 FF 
02d80     F0 E5 05 F1 | 	add	objptr, ##43504
02d84     F2 12 02 FB | 	rdlong	arg01, objptr
02d88     54 00 00 FF 
02d8c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d90     00 14 06 F6 | 	mov	arg02, #0
02d94     38 C7 B1 FD | 	call	#__system____builtin_atoi
02d98     7B 00 00 FF 
02d9c     74 E4 05 F1 | 	add	objptr, ##63092
02da0     F2 FA 61 FC | 	wrlong	result1, objptr
02da4     7B 00 00 FF 
02da8     74 E4 85 F1 | 	sub	objptr, ##63092
02dac                 | LR__0132
02dac                 | ' 
02dac                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dac     7B 00 00 FF 
02db0     74 E4 05 F1 | 	add	objptr, ##63092
02db4     F2 1E 02 FB | 	rdlong	local01, objptr
02db8     7B 00 00 FF 
02dbc     74 E4 85 F1 | 	sub	objptr, ##63092
02dc0     01 1E 16 F2 | 	cmp	local01, #1 wc
02dc4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dc8     01 3A 0E F2 | 	cmp	local15, #1 wz
02dcc     57 00 00 AF 
02dd0     08 E4 05 A1 |  if_e	add	objptr, ##44552
02dd4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02dd8     57 00 00 AF 
02ddc     08 E4 85 A1 |  if_e	sub	objptr, ##44552
02de0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02de4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02de8     7B 00 00 FF 
02dec     74 E4 05 F1 | 	add	objptr, ##63092
02df0     F2 12 02 FB | 	rdlong	arg01, objptr
02df4     7B 00 00 FF 
02df8     74 E4 85 F1 | 	sub	objptr, ##63092
02dfc     F0 24 B0 FD | 	call	#_deleteline
02e00     4C 05 90 FD | 	jmp	#LR__0150
02e04                 | LR__0133
02e04                 | ' 
02e04                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e04     7B 00 00 FF 
02e08     74 E4 05 F1 | 	add	objptr, ##63092
02e0c     F2 1E 02 FB | 	rdlong	local01, objptr
02e10     7B 00 00 FF 
02e14     74 E4 85 F1 | 	sub	objptr, ##63092
02e18     01 1E 16 F2 | 	cmp	local01, #1 wc
02e1c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e20     57 00 00 FF 
02e24     08 E4 05 F1 | 	add	objptr, ##44552
02e28     F2 26 02 FB | 	rdlong	local05, objptr
02e2c     57 00 00 FF 
02e30     08 E4 85 F1 | 	sub	objptr, ##44552
02e34     13 2F 0A F6 | 	mov	local09, local05 wz
02e38     20 00 90 AD |  if_e	jmp	#LR__0134
02e3c     57 00 00 FF 
02e40     08 E4 05 F1 | 	add	objptr, ##44552
02e44     F2 32 02 FB | 	rdlong	local11, objptr
02e48     57 00 00 FF 
02e4c     08 E4 85 F1 | 	sub	objptr, ##44552
02e50     19 29 02 F6 | 	mov	local06, local11
02e54     03 28 0E F2 | 	cmp	local06, #3 wz
02e58     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e5c                 | LR__0134
02e5c     55 00 00 FF 
02e60     04 E4 05 F1 | 	add	objptr, ##43524
02e64     F2 36 02 FB | 	rdlong	local13, objptr
02e68     55 00 00 FF 
02e6c     04 E4 85 F1 | 	sub	objptr, ##43524
02e70     1B 31 02 F6 | 	mov	local10, local13
02e74     1B 30 0E F2 | 	cmp	local10, #27 wz
02e78     90 00 90 AD |  if_e	jmp	#LR__0136
02e7c     7B 00 00 FF 
02e80     74 E4 05 F1 | 	add	objptr, ##63092
02e84     F2 12 02 FB | 	rdlong	arg01, objptr
02e88     24 00 00 FF 
02e8c     6C E4 85 F1 | 	sub	objptr, ##18540
02e90     F2 16 02 FB | 	rdlong	arg03, objptr
02e94     57 00 00 FF 
02e98     08 E4 85 F1 | 	sub	objptr, ##44552
02e9c     00 14 06 F6 | 	mov	arg02, #0
02ea0     80 38 B0 FD | 	call	#_compile
02ea4     FD 20 0A F6 | 	mov	local02, result1 wz
02ea8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ea8                 | '   if err<>0 then printerror(err): goto 104
02ea8     0C 00 90 AD |  if_e	jmp	#LR__0135
02eac     10 13 02 F6 | 	mov	arg01, local02
02eb0     A4 5C B1 FD | 	call	#_printerror
02eb4     98 04 90 FD | 	jmp	#LR__0150
02eb8                 | LR__0135
02eb8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02eb8     7B 00 00 FF 
02ebc     B0 E4 05 F1 | 	add	objptr, ##63152
02ec0     F2 12 02 FB | 	rdlong	arg01, objptr
02ec4     7B 00 00 FF 
02ec8     B0 E4 85 F1 | 	sub	objptr, ##63152
02ecc     5C 01 00 FF 
02ed0     C8 15 06 F6 | 	mov	arg02, ##@LR__4649
02ed4     2C 94 B1 FD | 	call	#__system___string_cmp
02ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
02edc     70 04 90 AD |  if_e	jmp	#LR__0150
02ee0     7B 00 00 FF 
02ee4     B0 E4 05 F1 | 	add	objptr, ##63152
02ee8     F2 1E 02 FB | 	rdlong	local01, objptr
02eec     24 00 00 FF 
02ef0     B0 E4 85 F1 | 	sub	objptr, ##18608
02ef4     F2 1E 62 FC | 	wrlong	local01, objptr
02ef8     08 E4 05 F1 | 	add	objptr, #8
02efc     F2 08 68 FC | 	wrlong	#4, objptr
02f00     57 00 00 FF 
02f04     08 E4 85 F1 | 	sub	objptr, ##44552
02f08     64 DB 9F FD | 	jmp	#LR__0020
02f0c                 | LR__0136
02f0c                 | '       							
02f0c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f0c     7B 00 00 FF 
02f10     74 E4 05 F1 | 	add	objptr, ##63092
02f14     F2 1E 02 FB | 	rdlong	local01, objptr
02f18     7B 00 00 FF 
02f1c     74 E4 85 F1 | 	sub	objptr, ##63092
02f20     01 1E 16 F2 | 	cmp	local01, #1 wc
02f24     EC 00 90 CD |  if_b	jmp	#LR__0139
02f28     57 00 00 FF 
02f2c     08 E4 05 F1 | 	add	objptr, ##44552
02f30     F2 26 02 FB | 	rdlong	local05, objptr
02f34     57 00 00 FF 
02f38     08 E4 85 F1 | 	sub	objptr, ##44552
02f3c     01 26 0E F2 | 	cmp	local05, #1 wz
02f40     20 00 90 AD |  if_e	jmp	#LR__0137
02f44     57 00 00 FF 
02f48     08 E4 05 F1 | 	add	objptr, ##44552
02f4c     F2 32 02 FB | 	rdlong	local11, objptr
02f50     57 00 00 FF 
02f54     08 E4 85 F1 | 	sub	objptr, ##44552
02f58     19 29 02 F6 | 	mov	local06, local11
02f5c     02 28 0E F2 | 	cmp	local06, #2 wz
02f60     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f64                 | LR__0137
02f64     54 00 00 FF 
02f68     FC E5 05 F1 | 	add	objptr, ##43516
02f6c     F2 36 02 FB | 	rdlong	local13, objptr
02f70     54 00 00 FF 
02f74     FC E5 85 F1 | 	sub	objptr, ##43516
02f78     1B 31 02 F6 | 	mov	local10, local13
02f7c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f80     90 00 90 AD |  if_e	jmp	#LR__0139
02f84     7B 00 00 FF 
02f88     74 E4 05 F1 | 	add	objptr, ##63092
02f8c     F2 12 02 FB | 	rdlong	arg01, objptr
02f90     24 00 00 FF 
02f94     6C E4 85 F1 | 	sub	objptr, ##18540
02f98     F2 16 02 FB | 	rdlong	arg03, objptr
02f9c     57 00 00 FF 
02fa0     08 E4 85 F1 | 	sub	objptr, ##44552
02fa4     00 14 06 F6 | 	mov	arg02, #0
02fa8     78 37 B0 FD | 	call	#_compile
02fac     FD 20 0A F6 | 	mov	local02, result1 wz
02fb0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fb0                 | '   if err<>0 then printerror(err): goto 104
02fb0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fb4     10 13 02 F6 | 	mov	arg01, local02
02fb8     9C 5B B1 FD | 	call	#_printerror
02fbc     90 03 90 FD | 	jmp	#LR__0150
02fc0                 | LR__0138
02fc0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fc0     7B 00 00 FF 
02fc4     B0 E4 05 F1 | 	add	objptr, ##63152
02fc8     F2 12 02 FB | 	rdlong	arg01, objptr
02fcc     7B 00 00 FF 
02fd0     B0 E4 85 F1 | 	sub	objptr, ##63152
02fd4     5C 01 00 FF 
02fd8     C9 15 06 F6 | 	mov	arg02, ##@LR__4650
02fdc     24 93 B1 FD | 	call	#__system___string_cmp
02fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe4     68 03 90 AD |  if_e	jmp	#LR__0150
02fe8     7B 00 00 FF 
02fec     B0 E4 05 F1 | 	add	objptr, ##63152
02ff0     F2 1E 02 FB | 	rdlong	local01, objptr
02ff4     24 00 00 FF 
02ff8     B0 E4 85 F1 | 	sub	objptr, ##18608
02ffc     F2 1E 62 FC | 	wrlong	local01, objptr
03000     08 E4 05 F1 | 	add	objptr, #8
03004     F2 08 68 FC | 	wrlong	#4, objptr
03008     57 00 00 FF 
0300c     08 E4 85 F1 | 	sub	objptr, ##44552
03010     5C DA 9F FD | 	jmp	#LR__0020
03014                 | LR__0139
03014                 | ' 							 
03014                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03014     7B 00 00 FF 
03018     74 E4 05 F1 | 	add	objptr, ##63092
0301c     F2 1E 02 FB | 	rdlong	local01, objptr
03020     7B 00 00 FF 
03024     74 E4 85 F1 | 	sub	objptr, ##63092
03028     01 1E 16 F2 | 	cmp	local01, #1 wc
0302c     D4 00 90 CD |  if_b	jmp	#LR__0141
03030     57 00 00 FF 
03034     08 E4 05 F1 | 	add	objptr, ##44552
03038     F2 26 0A FB | 	rdlong	local05, objptr wz
0303c     57 00 00 FF 
03040     08 E4 85 F1 | 	sub	objptr, ##44552
03044     20 00 90 AD |  if_e	jmp	#LR__0140
03048     57 00 00 FF 
0304c     08 E4 05 F1 | 	add	objptr, ##44552
03050     F2 32 02 FB | 	rdlong	local11, objptr
03054     57 00 00 FF 
03058     08 E4 85 F1 | 	sub	objptr, ##44552
0305c     19 29 02 F6 | 	mov	local06, local11
03060     03 28 0E F2 | 	cmp	local06, #3 wz
03064     9C 00 90 5D |  if_ne	jmp	#LR__0141
03068                 | LR__0140
03068     55 00 00 FF 
0306c     04 E4 05 F1 | 	add	objptr, ##43524
03070     F2 36 02 FB | 	rdlong	local13, objptr
03074     55 00 00 FF 
03078     04 E4 85 F1 | 	sub	objptr, ##43524
0307c     1B 31 02 F6 | 	mov	local10, local13
03080     1B 30 0E F2 | 	cmp	local10, #27 wz
03084     7C 00 90 5D |  if_ne	jmp	#LR__0141
03088     7B 00 00 FF 
0308c     74 E4 05 F1 | 	add	objptr, ##63092
03090     F2 12 02 FB | 	rdlong	arg01, objptr
03094     24 00 00 FF 
03098     6C E4 85 F1 | 	sub	objptr, ##18540
0309c     F2 16 02 FB | 	rdlong	arg03, objptr
030a0     57 00 00 FF 
030a4     08 E4 85 F1 | 	sub	objptr, ##44552
030a8     00 14 06 F6 | 	mov	arg02, #0
030ac     44 37 B0 FD | 	call	#_compile_assign
030b0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030b0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030b0     7B 00 00 FF 
030b4     B0 E4 05 F1 | 	add	objptr, ##63152
030b8     F2 12 02 FB | 	rdlong	arg01, objptr
030bc     7B 00 00 FF 
030c0     B0 E4 85 F1 | 	sub	objptr, ##63152
030c4     5C 01 00 FF 
030c8     CA 15 06 F6 | 	mov	arg02, ##@LR__4651
030cc     34 92 B1 FD | 	call	#__system___string_cmp
030d0     00 FA 0D F2 | 	cmp	result1, #0 wz
030d4     78 02 90 AD |  if_e	jmp	#LR__0150
030d8     7B 00 00 FF 
030dc     B0 E4 05 F1 | 	add	objptr, ##63152
030e0     F2 1E 02 FB | 	rdlong	local01, objptr
030e4     24 00 00 FF 
030e8     B0 E4 85 F1 | 	sub	objptr, ##18608
030ec     F2 1E 62 FC | 	wrlong	local01, objptr
030f0     08 E4 05 F1 | 	add	objptr, #8
030f4     F2 08 68 FC | 	wrlong	#4, objptr
030f8     57 00 00 FF 
030fc     08 E4 85 F1 | 	sub	objptr, ##44552
03100     6C D9 9F FD | 	jmp	#LR__0020
03104                 | LR__0141
03104                 | '     							 
03104                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03104     7B 00 00 FF 
03108     74 E4 05 F1 | 	add	objptr, ##63092
0310c     F2 1E 02 FB | 	rdlong	local01, objptr
03110     7B 00 00 FF 
03114     74 E4 85 F1 | 	sub	objptr, ##63092
03118     01 1E 16 F2 | 	cmp	local01, #1 wc
0311c     CC 00 90 CD |  if_b	jmp	#LR__0142
03120     57 00 00 FF 
03124     08 E4 05 F1 | 	add	objptr, ##44552
03128     F2 26 02 FB | 	rdlong	local05, objptr
0312c     57 00 00 FF 
03130     08 E4 85 F1 | 	sub	objptr, ##44552
03134     01 26 0E F2 | 	cmp	local05, #1 wz
03138     57 00 00 5F 
0313c     08 E4 05 51 |  if_ne	add	objptr, ##44552
03140     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03144     57 00 00 5F 
03148     08 E4 85 51 |  if_ne	sub	objptr, ##44552
0314c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03150     54 00 00 AF 
03154     FC E5 05 A1 |  if_e	add	objptr, ##43516
03158     F2 36 02 AB |  if_e	rdlong	local13, objptr
0315c     54 00 00 AF 
03160     FC E5 85 A1 |  if_e	sub	objptr, ##43516
03164     1B 31 02 A6 |  if_e	mov	local10, local13
03168     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0316c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03170     7B 00 00 FF 
03174     74 E4 05 F1 | 	add	objptr, ##63092
03178     F2 12 02 FB | 	rdlong	arg01, objptr
0317c     24 00 00 FF 
03180     6C E4 85 F1 | 	sub	objptr, ##18540
03184     F2 16 02 FB | 	rdlong	arg03, objptr
03188     57 00 00 FF 
0318c     08 E4 85 F1 | 	sub	objptr, ##44552
03190     00 14 06 F6 | 	mov	arg02, #0
03194     5C 36 B0 FD | 	call	#_compile_assign
03198                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
03198                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
03198     7B 00 00 FF 
0319c     B0 E4 05 F1 | 	add	objptr, ##63152
031a0     F2 12 02 FB | 	rdlong	arg01, objptr
031a4     7B 00 00 FF 
031a8     B0 E4 85 F1 | 	sub	objptr, ##63152
031ac     5C 01 00 FF 
031b0     CB 15 06 F6 | 	mov	arg02, ##@LR__4652
031b4     4C 91 B1 FD | 	call	#__system___string_cmp
031b8     00 FA 0D F2 | 	cmp	result1, #0 wz
031bc     90 01 90 AD |  if_e	jmp	#LR__0150
031c0     7B 00 00 FF 
031c4     B0 E4 05 F1 | 	add	objptr, ##63152
031c8     F2 1E 02 FB | 	rdlong	local01, objptr
031cc     24 00 00 FF 
031d0     B0 E4 85 F1 | 	sub	objptr, ##18608
031d4     F2 1E 62 FC | 	wrlong	local01, objptr
031d8     08 E4 05 F1 | 	add	objptr, #8
031dc     F2 08 68 FC | 	wrlong	#4, objptr
031e0     57 00 00 FF 
031e4     08 E4 85 F1 | 	sub	objptr, ##44552
031e8     84 D8 9F FD | 	jmp	#LR__0020
031ec                 | LR__0142
031ec                 | ' 
031ec                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031ec     54 00 00 FF 
031f0     F4 E5 05 F1 | 	add	objptr, ##43508
031f4     F2 1E 02 FB | 	rdlong	local01, objptr
031f8     54 00 00 FF 
031fc     F4 E5 85 F1 | 	sub	objptr, ##43508
03200     01 00 00 FF 
03204     04 1E 0E F2 | 	cmp	local01, ##516 wz
03208     54 00 00 AF 
0320c     FC E5 05 A1 |  if_e	add	objptr, ##43516
03210     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03214     54 00 00 AF 
03218     FC E5 85 A1 |  if_e	sub	objptr, ##43516
0321c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03220     14 00 90 5D |  if_ne	jmp	#LR__0143
03224     00 12 06 F6 | 	mov	arg01, #0
03228     00 14 06 F6 | 	mov	arg02, #0
0322c     00 16 06 F6 | 	mov	arg03, #0
03230     C0 35 B0 FD | 	call	#_compile_assign
03234     90 00 90 FD | 	jmp	#LR__0145
03238                 | LR__0143
03238                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03238     54 00 00 FF 
0323c     F4 E5 05 F1 | 	add	objptr, ##43508
03240     F2 1E 02 FB | 	rdlong	local01, objptr
03244     54 00 00 FF 
03248     F4 E5 85 F1 | 	sub	objptr, ##43508
0324c     01 00 00 FF 
03250     04 1E 0E F2 | 	cmp	local01, ##516 wz
03254     54 00 00 AF 
03258     FC E5 05 A1 |  if_e	add	objptr, ##43516
0325c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03260     54 00 00 AF 
03264     FC E5 85 A1 |  if_e	sub	objptr, ##43516
03268     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0326c     44 00 90 5D |  if_ne	jmp	#LR__0144
03270     00 12 06 F6 | 	mov	arg01, #0
03274     F4 E9 B1 FD | 	call	#__system___getiolock_0474
03278     FD 12 02 F6 | 	mov	arg01, result1
0327c     5C 90 B1 FD | 	call	#__system___lockmem
03280     5C 01 00 FF 
03284     CC 15 06 F6 | 	mov	arg02, ##@LR__4653
03288     00 12 06 F6 | 	mov	arg01, #0
0328c     00 16 06 F6 | 	mov	arg03, #0
03290     4C 9D B1 FD | 	call	#__system___basic_print_string
03294     00 12 06 F6 | 	mov	arg01, #0
03298     0A 14 06 F6 | 	mov	arg02, #10
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     E4 9C B1 FD | 	call	#__system___basic_print_char
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     C0 E9 B1 FD | 	call	#__system___getiolock_0474
032ac     FD 00 68 FC | 	wrlong	#0, result1
032b0     7C 00 90 FD | 	jmp	#LR__0149
032b4                 | LR__0144
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     00 14 06 F6 | 	mov	arg02, #0
032bc     00 16 06 F6 | 	mov	arg03, #0
032c0     60 34 B0 FD | 	call	#_compile
032c4     FD 20 02 F6 | 	mov	local02, result1
032c8                 | LR__0145
032c8                 | ' 
032c8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032c8                 | ' 
032c8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032c8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032c8                 | ' if err=0 then execute_line() else printerror(err)
032c8     00 20 0E F2 | 	cmp	local02, #0 wz
032cc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032d0     00 12 06 F6 | 	mov	arg01, #0
032d4     EC 6C B0 FD | 	call	#_execute_line
032d8     08 00 90 FD | 	jmp	#LR__0147
032dc                 | LR__0146
032dc     10 13 02 F6 | 	mov	arg01, local02
032e0     74 58 B1 FD | 	call	#_printerror
032e4                 | LR__0147
032e4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032e4     7B 00 00 FF 
032e8     B0 E4 05 F1 | 	add	objptr, ##63152
032ec     F2 12 02 FB | 	rdlong	arg01, objptr
032f0     7B 00 00 FF 
032f4     B0 E4 85 F1 | 	sub	objptr, ##63152
032f8     5C 01 00 FF 
032fc     FB 15 06 F6 | 	mov	arg02, ##@LR__4654
03300     00 90 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     24 00 90 AD |  if_e	jmp	#LR__0148
0330c     7B 00 00 FF 
03310     B0 E4 05 F1 | 	add	objptr, ##63152
03314     F2 1E 02 FB | 	rdlong	local01, objptr
03318     24 00 00 FF 
0331c     B0 E4 85 F1 | 	sub	objptr, ##18608
03320     F2 1E 62 FC | 	wrlong	local01, objptr
03324     57 00 00 FF 
03328     00 E4 85 F1 | 	sub	objptr, ##44544
0332c     40 D7 9F FD | 	jmp	#LR__0020
03330                 | LR__0148
03330                 | LR__0149
03330     5C 01 00 FF 
03334     FC 13 06 F6 | 	mov	arg01, ##@LR__4655
03338                 | ' 
03338                 | ' write(text)
03338     64 7E B1 FD | 	call	#_hg010b_spin2_write
0333c                 | ' crlf
0333c     C0 7F B1 FD | 	call	#_hg010b_spin2_crlf
03340     5C 01 00 FF 
03344     FD 13 06 F6 | 	mov	arg01, ##@LR__4656
03348                 | ' 
03348                 | ' write(text)
03348     54 7E B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     B0 7F B1 FD | 	call	#_hg010b_spin2_crlf
03350                 | LR__0150
03350     A7 F0 03 F6 | 	mov	ptra, fp
03354     B2 00 A0 FD | 	call	#popregs_
03358                 | _interpret_ret
03358     2D 00 64 FD | 	ret
0335c                 | 
0335c                 | ' 
0335c                 | ' 
0335c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0335c                 | ' 
0335c                 | ' function isoperator(s as string) as ubyte
0335c                 | _isoperator
0335c     01 4A 05 F6 | 	mov	COUNT_, #1
03360     A8 00 A0 FD | 	call	#pushregs_
03364                 | ' 
03364                 | ' select case s
03364     09 1F 02 F6 | 	mov	local01, arg01
03368     5D 01 00 FF 
0336c     03 14 06 F6 | 	mov	arg02, ##@LR__4657
03370     0F 13 02 F6 | 	mov	arg01, local01
03374     8C 8F B1 FD | 	call	#__system___string_cmp
03378     00 FA 0D F2 | 	cmp	result1, #0 wz
0337c     FC 01 90 AD |  if_e	jmp	#LR__0160
03380     5D 01 00 FF 
03384     05 14 06 F6 | 	mov	arg02, ##@LR__4658
03388     0F 13 02 F6 | 	mov	arg01, local01
0338c     74 8F B1 FD | 	call	#__system___string_cmp
03390     00 FA 0D F2 | 	cmp	result1, #0 wz
03394     EC 01 90 AD |  if_e	jmp	#LR__0161
03398     5D 01 00 FF 
0339c     07 14 06 F6 | 	mov	arg02, ##@LR__4659
033a0     0F 13 02 F6 | 	mov	arg01, local01
033a4     5C 8F B1 FD | 	call	#__system___string_cmp
033a8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ac     DC 01 90 AD |  if_e	jmp	#LR__0162
033b0     5D 01 00 FF 
033b4     0A 14 06 F6 | 	mov	arg02, ##@LR__4660
033b8     0F 13 02 F6 | 	mov	arg01, local01
033bc     44 8F B1 FD | 	call	#__system___string_cmp
033c0     00 FA 0D F2 | 	cmp	result1, #0 wz
033c4     CC 01 90 AD |  if_e	jmp	#LR__0163
033c8     5D 01 00 FF 
033cc     0E 14 06 F6 | 	mov	arg02, ##@LR__4661
033d0     0F 13 02 F6 | 	mov	arg01, local01
033d4     2C 8F B1 FD | 	call	#__system___string_cmp
033d8     00 FA 0D F2 | 	cmp	result1, #0 wz
033dc     BC 01 90 AD |  if_e	jmp	#LR__0164
033e0     5D 01 00 FF 
033e4     10 14 06 F6 | 	mov	arg02, ##@LR__4662
033e8     0F 13 02 F6 | 	mov	arg01, local01
033ec     14 8F B1 FD | 	call	#__system___string_cmp
033f0     00 FA 0D F2 | 	cmp	result1, #0 wz
033f4     AC 01 90 AD |  if_e	jmp	#LR__0165
033f8     5D 01 00 FF 
033fc     12 14 06 F6 | 	mov	arg02, ##@LR__4663
03400     0F 13 02 F6 | 	mov	arg01, local01
03404     FC 8E B1 FD | 	call	#__system___string_cmp
03408     00 FA 0D F2 | 	cmp	result1, #0 wz
0340c     9C 01 90 AD |  if_e	jmp	#LR__0166
03410     5D 01 00 FF 
03414     16 14 06 F6 | 	mov	arg02, ##@LR__4664
03418     0F 13 02 F6 | 	mov	arg01, local01
0341c     E4 8E B1 FD | 	call	#__system___string_cmp
03420     00 FA 0D F2 | 	cmp	result1, #0 wz
03424     8C 01 90 AD |  if_e	jmp	#LR__0167
03428     5D 01 00 FF 
0342c     1A 14 06 F6 | 	mov	arg02, ##@LR__4665
03430     0F 13 02 F6 | 	mov	arg01, local01
03434     CC 8E B1 FD | 	call	#__system___string_cmp
03438     00 FA 0D F2 | 	cmp	result1, #0 wz
0343c     7C 01 90 AD |  if_e	jmp	#LR__0168
03440     5D 01 00 FF 
03444     1E 14 06 F6 | 	mov	arg02, ##@LR__4666
03448     0F 13 02 F6 | 	mov	arg01, local01
0344c     B4 8E B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     6C 01 90 AD |  if_e	jmp	#LR__0169
03458     5D 01 00 FF 
0345c     22 14 06 F6 | 	mov	arg02, ##@LR__4667
03460     0F 13 02 F6 | 	mov	arg01, local01
03464     9C 8E B1 FD | 	call	#__system___string_cmp
03468     00 FA 0D F2 | 	cmp	result1, #0 wz
0346c     5C 01 90 AD |  if_e	jmp	#LR__0170
03470     5D 01 00 FF 
03474     26 14 06 F6 | 	mov	arg02, ##@LR__4668
03478     0F 13 02 F6 | 	mov	arg01, local01
0347c     84 8E B1 FD | 	call	#__system___string_cmp
03480     00 FA 0D F2 | 	cmp	result1, #0 wz
03484     4C 01 90 AD |  if_e	jmp	#LR__0171
03488     5D 01 00 FF 
0348c     28 14 06 F6 | 	mov	arg02, ##@LR__4669
03490     0F 13 02 F6 | 	mov	arg01, local01
03494     6C 8E B1 FD | 	call	#__system___string_cmp
03498     00 FA 0D F2 | 	cmp	result1, #0 wz
0349c     3C 01 90 AD |  if_e	jmp	#LR__0172
034a0     5D 01 00 FF 
034a4     2C 14 06 F6 | 	mov	arg02, ##@LR__4670
034a8     0F 13 02 F6 | 	mov	arg01, local01
034ac     54 8E B1 FD | 	call	#__system___string_cmp
034b0     00 FA 0D F2 | 	cmp	result1, #0 wz
034b4     2C 01 90 AD |  if_e	jmp	#LR__0173
034b8     5D 01 00 FF 
034bc     2E 14 06 F6 | 	mov	arg02, ##@LR__4671
034c0     0F 13 02 F6 | 	mov	arg01, local01
034c4     3C 8E B1 FD | 	call	#__system___string_cmp
034c8     00 FA 0D F2 | 	cmp	result1, #0 wz
034cc     1C 01 90 AD |  if_e	jmp	#LR__0174
034d0     5D 01 00 FF 
034d4     30 14 06 F6 | 	mov	arg02, ##@LR__4672
034d8     0F 13 02 F6 | 	mov	arg01, local01
034dc     24 8E B1 FD | 	call	#__system___string_cmp
034e0     00 FA 0D F2 | 	cmp	result1, #0 wz
034e4     0C 01 90 AD |  if_e	jmp	#LR__0175
034e8     5D 01 00 FF 
034ec     33 14 06 F6 | 	mov	arg02, ##@LR__4673
034f0     0F 13 02 F6 | 	mov	arg01, local01
034f4     0C 8E B1 FD | 	call	#__system___string_cmp
034f8     00 FA 0D F2 | 	cmp	result1, #0 wz
034fc     FC 00 90 AD |  if_e	jmp	#LR__0176
03500     5D 01 00 FF 
03504     36 14 06 F6 | 	mov	arg02, ##@LR__4674
03508     0F 13 02 F6 | 	mov	arg01, local01
0350c     F4 8D B1 FD | 	call	#__system___string_cmp
03510     00 FA 0D F2 | 	cmp	result1, #0 wz
03514     EC 00 90 AD |  if_e	jmp	#LR__0177
03518     5D 01 00 FF 
0351c     38 14 06 F6 | 	mov	arg02, ##@LR__4675
03520     0F 13 02 F6 | 	mov	arg01, local01
03524     DC 8D B1 FD | 	call	#__system___string_cmp
03528     00 FA 0D F2 | 	cmp	result1, #0 wz
0352c     DC 00 90 AD |  if_e	jmp	#LR__0178
03530     5D 01 00 FF 
03534     3A 14 06 F6 | 	mov	arg02, ##@LR__4676
03538     0F 13 02 F6 | 	mov	arg01, local01
0353c     C4 8D B1 FD | 	call	#__system___string_cmp
03540     00 FA 0D F2 | 	cmp	result1, #0 wz
03544     CC 00 90 AD |  if_e	jmp	#LR__0179
03548     5D 01 00 FF 
0354c     3D 14 06 F6 | 	mov	arg02, ##@LR__4677
03550     0F 13 02 F6 | 	mov	arg01, local01
03554     AC 8D B1 FD | 	call	#__system___string_cmp
03558     00 FA 0D F2 | 	cmp	result1, #0 wz
0355c     BC 00 90 AD |  if_e	jmp	#LR__0180
03560     5D 01 00 FF 
03564     40 14 06 F6 | 	mov	arg02, ##@LR__4678
03568     0F 13 02 F6 | 	mov	arg01, local01
0356c     94 8D B1 FD | 	call	#__system___string_cmp
03570     00 FA 0D F2 | 	cmp	result1, #0 wz
03574     AC 00 90 AD |  if_e	jmp	#LR__0181
03578     B0 00 90 FD | 	jmp	#LR__0182
0357c                 | LR__0160
0357c     01 FA 05 F6 | 	mov	result1, #1
03580     AC 00 90 FD | 	jmp	#LR__0183
03584                 | LR__0161
03584     02 FA 05 F6 | 	mov	result1, #2
03588     A4 00 90 FD | 	jmp	#LR__0183
0358c                 | LR__0162
0358c     03 FA 05 F6 | 	mov	result1, #3
03590     9C 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0163
03594     04 FA 05 F6 | 	mov	result1, #4
03598     94 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0164
0359c     05 FA 05 F6 | 	mov	result1, #5
035a0     8C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0165
035a4     06 FA 05 F6 | 	mov	result1, #6
035a8     84 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0166
035ac     07 FA 05 F6 | 	mov	result1, #7
035b0     7C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0167
035b4     08 FA 05 F6 | 	mov	result1, #8
035b8     74 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0168
035bc     09 FA 05 F6 | 	mov	result1, #9
035c0     6C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0169
035c4     0A FA 05 F6 | 	mov	result1, #10
035c8     64 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0170
035cc     0B FA 05 F6 | 	mov	result1, #11
035d0     5C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0171
035d4     0C FA 05 F6 | 	mov	result1, #12
035d8     54 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0172
035dc     0D FA 05 F6 | 	mov	result1, #13
035e0     4C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0173
035e4     0E FA 05 F6 | 	mov	result1, #14
035e8     44 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0174
035ec     1B FA 05 F6 | 	mov	result1, #27
035f0     3C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0175
035f4     27 FA 05 F6 | 	mov	result1, #39
035f8     34 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0176
035fc     26 FA 05 F6 | 	mov	result1, #38
03600     2C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0177
03604     10 FA 05 F6 | 	mov	result1, #16
03608     24 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0178
0360c     0F FA 05 F6 | 	mov	result1, #15
03610     1C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0179
03614     2A FA 05 F6 | 	mov	result1, #42
03618     14 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0180
0361c     28 FA 05 F6 | 	mov	result1, #40
03620     0C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0181
03624     29 FA 05 F6 | 	mov	result1, #41
03628     04 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0182
0362c     00 FA 05 F6 | 	mov	result1, #0
03630                 | LR__0183
03630     A7 F0 03 F6 | 	mov	ptra, fp
03634     B2 00 A0 FD | 	call	#popregs_
03638                 | _isoperator_ret
03638     2D 00 64 FD | 	ret
0363c                 | 
0363c                 | ' 
0363c                 | ' 
0363c                 | ' function isnotename(s as string) as ulong
0363c                 | _isnotename
0363c     07 4A 05 F6 | 	mov	COUNT_, #7
03640     A8 00 A0 FD | 	call	#pushregs_
03644                 | ' if left$(s,1)<>"#" then return 0
03644     09 1F 02 F6 | 	mov	local01, arg01
03648     01 14 06 F6 | 	mov	arg02, #1
0364c     D0 AC B1 FD | 	call	#__system__Left_S
03650     FD 12 02 F6 | 	mov	arg01, result1
03654     5D 01 00 FF 
03658     43 14 06 F6 | 	mov	arg02, ##@LR__4679
0365c     A4 8C B1 FD | 	call	#__system___string_cmp
03660     00 FA 0D F2 | 	cmp	result1, #0 wz
03664     00 FA 05 56 |  if_ne	mov	result1, #0
03668     30 03 90 5D |  if_ne	jmp	#LR__0213
0366c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     03 14 06 F6 | 	mov	arg02, #3
03674     01 16 06 F6 | 	mov	arg03, #1
03678     BC AD B1 FD | 	call	#__system__Mid_S
0367c     FD 12 02 F6 | 	mov	arg01, result1
03680     5D 01 00 FF 
03684     45 14 06 F6 | 	mov	arg02, ##@LR__4680
03688     78 8C B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     18 00 90 5D |  if_ne	jmp	#LR__0190
03694     0F 13 02 F6 | 	mov	arg01, local01
03698     02 14 06 F6 | 	mov	arg02, #2
0369c     02 16 06 F6 | 	mov	arg03, #2
036a0     94 AD B1 FD | 	call	#__system__Mid_S
036a4     FD 20 02 F6 | 	mov	local02, result1
036a8     14 00 90 FD | 	jmp	#LR__0191
036ac                 | LR__0190
036ac     0F 13 02 F6 | 	mov	arg01, local01
036b0     02 14 06 F6 | 	mov	arg02, #2
036b4     01 16 06 F6 | 	mov	arg03, #1
036b8     7C AD B1 FD | 	call	#__system__Mid_S
036bc     FD 20 02 F6 | 	mov	local02, result1
036c0                 | LR__0191
036c0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036c0     0F 13 02 F6 | 	mov	arg01, local01
036c4     09 23 02 F6 | 	mov	local03, arg01
036c8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036cc                 | LR__0192
036cc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036d0     01 22 06 51 |  if_ne	add	local03, #1
036d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036d8                 | LR__0193
036d8     09 23 82 F1 | 	sub	local03, arg01
036dc     11 15 02 F6 | 	mov	arg02, local03
036e0     01 14 86 F1 | 	sub	arg02, #1
036e4     0F 13 02 F6 | 	mov	arg01, local01
036e8     01 16 06 F6 | 	mov	arg03, #1
036ec     48 AD B1 FD | 	call	#__system__Mid_S
036f0     FD 12 02 F6 | 	mov	arg01, result1
036f4     5D 01 00 FF 
036f8     47 14 06 F6 | 	mov	arg02, ##@LR__4681
036fc     04 8C B1 FD | 	call	#__system___string_cmp
03700     00 FA 0D F2 | 	cmp	result1, #0 wz
03704     28 00 90 AD |  if_e	jmp	#LR__0194
03708     0F 13 02 F6 | 	mov	arg01, local01
0370c     01 14 06 F6 | 	mov	arg02, #1
03710     94 AC B1 FD | 	call	#__system__Right_S
03714     FD 12 02 F6 | 	mov	arg01, result1
03718     24 BF B1 FD | 	call	#__system____builtin_atof
0371c     FD 12 02 F6 | 	mov	arg01, result1
03720     00 14 06 F6 | 	mov	arg02, #0
03724     F8 BB B1 FD | 	call	#__system___float_tointeger
03728     FD 24 02 F6 | 	mov	local04, result1
0372c     34 00 90 FD | 	jmp	#LR__0195
03730                 | LR__0194
03730     0F 13 02 F6 | 	mov	arg01, local01
03734     01 14 06 F6 | 	mov	arg02, #1
03738     6C AC B1 FD | 	call	#__system__Right_S
0373c     FD 12 02 F6 | 	mov	arg01, result1
03740     FC BE B1 FD | 	call	#__system____builtin_atof
03744     FD 14 02 F6 | 	mov	arg02, result1
03748     00 C0 5F FF 
0374c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03750     04 B7 B1 FD | 	call	#__system___float_mul
03754     FD 12 02 F6 | 	mov	arg01, result1
03758     00 14 06 F6 | 	mov	arg02, #0
0375c     C0 BB B1 FD | 	call	#__system___float_tointeger
03760     FD 24 02 F6 | 	mov	local04, result1
03764                 | LR__0195
03764                 | ' 
03764                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03764     00 24 0E F2 | 	cmp	local04, #0 wz
03768     24 00 90 5D |  if_ne	jmp	#LR__0196
0376c     0F 13 02 F6 | 	mov	arg01, local01
03770     01 14 06 F6 | 	mov	arg02, #1
03774     30 AC B1 FD | 	call	#__system__Right_S
03778     FD 12 02 F6 | 	mov	arg01, result1
0377c     5D 01 00 FF 
03780     49 14 06 F6 | 	mov	arg02, ##@LR__4682
03784     7C 8B B1 FD | 	call	#__system___string_cmp
03788     00 FA 0D F2 | 	cmp	result1, #0 wz
0378c     04 24 06 56 |  if_ne	mov	local04, #4
03790                 | LR__0196
03790                 | ' 
03790                 | ' select case s1
03790     10 27 02 F6 | 	mov	local05, local02
03794     5D 01 00 FF 
03798     4B 14 06 F6 | 	mov	arg02, ##@LR__4683
0379c     13 13 02 F6 | 	mov	arg01, local05
037a0     60 8B B1 FD | 	call	#__system___string_cmp
037a4     00 FA 0D F2 | 	cmp	result1, #0 wz
037a8     24 01 90 AD |  if_e	jmp	#LR__0197
037ac     5D 01 00 FF 
037b0     4D 14 06 F6 | 	mov	arg02, ##@LR__4684
037b4     13 13 02 F6 | 	mov	arg01, local05
037b8     48 8B B1 FD | 	call	#__system___string_cmp
037bc     00 FA 0D F2 | 	cmp	result1, #0 wz
037c0     18 01 90 AD |  if_e	jmp	#LR__0198
037c4     5D 01 00 FF 
037c8     50 14 06 F6 | 	mov	arg02, ##@LR__4685
037cc     13 13 02 F6 | 	mov	arg01, local05
037d0     30 8B B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     0C 01 90 AD |  if_e	jmp	#LR__0199
037dc     5D 01 00 FF 
037e0     52 14 06 F6 | 	mov	arg02, ##@LR__4686
037e4     13 13 02 F6 | 	mov	arg01, local05
037e8     18 8B B1 FD | 	call	#__system___string_cmp
037ec     00 FA 0D F2 | 	cmp	result1, #0 wz
037f0     00 01 90 AD |  if_e	jmp	#LR__0200
037f4     5D 01 00 FF 
037f8     55 14 06 F6 | 	mov	arg02, ##@LR__4687
037fc     13 13 02 F6 | 	mov	arg01, local05
03800     00 8B B1 FD | 	call	#__system___string_cmp
03804     00 FA 0D F2 | 	cmp	result1, #0 wz
03808     F4 00 90 AD |  if_e	jmp	#LR__0201
0380c     5D 01 00 FF 
03810     57 14 06 F6 | 	mov	arg02, ##@LR__4688
03814     13 13 02 F6 | 	mov	arg01, local05
03818     E8 8A B1 FD | 	call	#__system___string_cmp
0381c     00 FA 0D F2 | 	cmp	result1, #0 wz
03820     E8 00 90 AD |  if_e	jmp	#LR__0202
03824     5D 01 00 FF 
03828     59 14 06 F6 | 	mov	arg02, ##@LR__4689
0382c     13 13 02 F6 | 	mov	arg01, local05
03830     D0 8A B1 FD | 	call	#__system___string_cmp
03834     00 FA 0D F2 | 	cmp	result1, #0 wz
03838     DC 00 90 AD |  if_e	jmp	#LR__0203
0383c     5D 01 00 FF 
03840     5C 14 06 F6 | 	mov	arg02, ##@LR__4690
03844     13 13 02 F6 | 	mov	arg01, local05
03848     B8 8A B1 FD | 	call	#__system___string_cmp
0384c     00 FA 0D F2 | 	cmp	result1, #0 wz
03850     D0 00 90 AD |  if_e	jmp	#LR__0204
03854     5D 01 00 FF 
03858     5E 14 06 F6 | 	mov	arg02, ##@LR__4691
0385c     13 13 02 F6 | 	mov	arg01, local05
03860     A0 8A B1 FD | 	call	#__system___string_cmp
03864     00 FA 0D F2 | 	cmp	result1, #0 wz
03868     C4 00 90 AD |  if_e	jmp	#LR__0205
0386c     5D 01 00 FF 
03870     61 14 06 F6 | 	mov	arg02, ##@LR__4692
03874     13 13 02 F6 | 	mov	arg01, local05
03878     88 8A B1 FD | 	call	#__system___string_cmp
0387c     00 FA 0D F2 | 	cmp	result1, #0 wz
03880     B8 00 90 AD |  if_e	jmp	#LR__0206
03884     5D 01 00 FF 
03888     63 14 06 F6 | 	mov	arg02, ##@LR__4693
0388c     13 13 02 F6 | 	mov	arg01, local05
03890     70 8A B1 FD | 	call	#__system___string_cmp
03894     00 FA 0D F2 | 	cmp	result1, #0 wz
03898     AC 00 90 AD |  if_e	jmp	#LR__0207
0389c     5D 01 00 FF 
038a0     66 14 06 F6 | 	mov	arg02, ##@LR__4694
038a4     13 13 02 F6 | 	mov	arg01, local05
038a8     58 8A B1 FD | 	call	#__system___string_cmp
038ac     00 FA 0D F2 | 	cmp	result1, #0 wz
038b0     A0 00 90 AD |  if_e	jmp	#LR__0208
038b4     5D 01 00 FF 
038b8     68 14 06 F6 | 	mov	arg02, ##@LR__4695
038bc     13 13 02 F6 | 	mov	arg01, local05
038c0     40 8A B1 FD | 	call	#__system___string_cmp
038c4     00 FA 0D F2 | 	cmp	result1, #0 wz
038c8     94 00 90 AD |  if_e	jmp	#LR__0209
038cc     9C 00 90 FD | 	jmp	#LR__0210
038d0                 | LR__0197
038d0     01 00 00 FF 
038d4     00 29 06 F6 | 	mov	local06, ##768
038d8     98 00 90 FD | 	jmp	#LR__0211
038dc                 | LR__0198
038dc     01 00 00 FF 
038e0     01 29 06 F6 | 	mov	local06, ##769
038e4     8C 00 90 FD | 	jmp	#LR__0211
038e8                 | LR__0199
038e8     01 00 00 FF 
038ec     02 29 06 F6 | 	mov	local06, ##770
038f0     80 00 90 FD | 	jmp	#LR__0211
038f4                 | LR__0200
038f4     01 00 00 FF 
038f8     03 29 06 F6 | 	mov	local06, ##771
038fc     74 00 90 FD | 	jmp	#LR__0211
03900                 | LR__0201
03900     01 00 00 FF 
03904     04 29 06 F6 | 	mov	local06, ##772
03908     68 00 90 FD | 	jmp	#LR__0211
0390c                 | LR__0202
0390c     01 00 00 FF 
03910     05 29 06 F6 | 	mov	local06, ##773
03914     5C 00 90 FD | 	jmp	#LR__0211
03918                 | LR__0203
03918     01 00 00 FF 
0391c     06 29 06 F6 | 	mov	local06, ##774
03920     50 00 90 FD | 	jmp	#LR__0211
03924                 | LR__0204
03924     01 00 00 FF 
03928     07 29 06 F6 | 	mov	local06, ##775
0392c     44 00 90 FD | 	jmp	#LR__0211
03930                 | LR__0205
03930     01 00 00 FF 
03934     08 29 06 F6 | 	mov	local06, ##776
03938     38 00 90 FD | 	jmp	#LR__0211
0393c                 | LR__0206
0393c     01 00 00 FF 
03940     09 29 06 F6 | 	mov	local06, ##777
03944     2C 00 90 FD | 	jmp	#LR__0211
03948                 | LR__0207
03948     01 00 00 FF 
0394c     0A 29 06 F6 | 	mov	local06, ##778
03950     20 00 90 FD | 	jmp	#LR__0211
03954                 | LR__0208
03954     01 00 00 FF 
03958     0B 29 06 F6 | 	mov	local06, ##779
0395c     14 00 90 FD | 	jmp	#LR__0211
03960                 | LR__0209
03960     01 00 00 FF 
03964     0B 29 06 F6 | 	mov	local06, ##779
03968     08 00 90 FD | 	jmp	#LR__0211
0396c                 | LR__0210
0396c     00 FA 05 F6 | 	mov	result1, #0
03970     28 00 90 FD | 	jmp	#LR__0213
03974                 | LR__0211
03974                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03974     FF FF 7F FF 
03978     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0397c     18 00 90 CD |  if_b	jmp	#LR__0212
03980     0A 24 56 F2 | 	cmps	local04, #10 wc
03984     12 2B 02 C6 |  if_b	mov	local07, local04
03988     01 2A 66 C0 |  if_b	shl	local07, #1
0398c     12 2B 02 C1 |  if_b	add	local07, local04
03990     02 2A 66 C0 |  if_b	shl	local07, #2
03994     15 29 02 C1 |  if_b	add	local06, local07
03998                 | LR__0212
03998                 | ' return token
03998     14 FB 01 F6 | 	mov	result1, local06
0399c                 | LR__0213
0399c     A7 F0 03 F6 | 	mov	ptra, fp
039a0     B2 00 A0 FD | 	call	#popregs_
039a4                 | _isnotename_ret
039a4     2D 00 64 FD | 	ret
039a8                 | 
039a8                 | ' 
039a8                 | ' 
039a8                 | ' function isseparator(s as string) as ubyte
039a8                 | _isseparator
039a8     01 4A 05 F6 | 	mov	COUNT_, #1
039ac     A8 00 A0 FD | 	call	#pushregs_
039b0                 | ' 
039b0                 | ' select case s
039b0     09 1F 02 F6 | 	mov	local01, arg01
039b4     5D 01 00 FF 
039b8     6A 14 06 F6 | 	mov	arg02, ##@LR__4696
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     40 89 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     54 01 90 AD |  if_e	jmp	#LR__0220
039cc     5D 01 00 FF 
039d0     6C 14 06 F6 | 	mov	arg02, ##@LR__4697
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     28 89 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     44 01 90 AD |  if_e	jmp	#LR__0221
039e4     5D 01 00 FF 
039e8     6E 14 06 F6 | 	mov	arg02, ##@LR__4698
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     10 89 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     34 01 90 AD |  if_e	jmp	#LR__0222
039fc     5D 01 00 FF 
03a00     70 14 06 F6 | 	mov	arg02, ##@LR__4699
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     F8 88 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     24 01 90 AD |  if_e	jmp	#LR__0223
03a14     5D 01 00 FF 
03a18     72 14 06 F6 | 	mov	arg02, ##@LR__4700
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     E0 88 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     14 01 90 AD |  if_e	jmp	#LR__0224
03a2c     5D 01 00 FF 
03a30     74 14 06 F6 | 	mov	arg02, ##@LR__4701
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     C8 88 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     04 01 90 AD |  if_e	jmp	#LR__0225
03a44     5D 01 00 FF 
03a48     76 14 06 F6 | 	mov	arg02, ##@LR__4702
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     B0 88 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     F4 00 90 AD |  if_e	jmp	#LR__0226
03a5c     5D 01 00 FF 
03a60     78 14 06 F6 | 	mov	arg02, ##@LR__4703
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     98 88 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     E4 00 90 AD |  if_e	jmp	#LR__0227
03a74     5D 01 00 FF 
03a78     7A 14 06 F6 | 	mov	arg02, ##@LR__4704
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     80 88 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     D4 00 90 AD |  if_e	jmp	#LR__0228
03a8c     5D 01 00 FF 
03a90     7C 14 06 F6 | 	mov	arg02, ##@LR__4705
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     68 88 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     C4 00 90 AD |  if_e	jmp	#LR__0229
03aa4     5D 01 00 FF 
03aa8     7E 14 06 F6 | 	mov	arg02, ##@LR__4706
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     50 88 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     B4 00 90 AD |  if_e	jmp	#LR__0230
03abc     5D 01 00 FF 
03ac0     80 14 06 F6 | 	mov	arg02, ##@LR__4707
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     38 88 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ad4     5D 01 00 FF 
03ad8     82 14 06 F6 | 	mov	arg02, ##@LR__4708
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     20 88 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     94 00 90 AD |  if_e	jmp	#LR__0232
03aec     5D 01 00 FF 
03af0     84 14 06 F6 | 	mov	arg02, ##@LR__4709
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     08 88 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     84 00 90 AD |  if_e	jmp	#LR__0233
03b04     5D 01 00 FF 
03b08     86 14 06 F6 | 	mov	arg02, ##@LR__4710
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     F0 87 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     74 00 90 AD |  if_e	jmp	#LR__0234
03b1c     78 00 90 FD | 	jmp	#LR__0235
03b20                 | LR__0220
03b20     01 FA 05 F6 | 	mov	result1, #1
03b24     74 00 90 FD | 	jmp	#LR__0236
03b28                 | LR__0221
03b28     02 FA 05 F6 | 	mov	result1, #2
03b2c     6C 00 90 FD | 	jmp	#LR__0236
03b30                 | LR__0222
03b30     1B FA 05 F6 | 	mov	result1, #27
03b34     64 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0223
03b38     11 FA 05 F6 | 	mov	result1, #17
03b3c     5C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0224
03b40     05 FA 05 F6 | 	mov	result1, #5
03b44     54 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0225
03b48     06 FA 05 F6 | 	mov	result1, #6
03b4c     4C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0226
03b50     12 FA 05 F6 | 	mov	result1, #18
03b54     44 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0227
03b58     13 FA 05 F6 | 	mov	result1, #19
03b5c     3C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0228
03b60     0C FA 05 F6 | 	mov	result1, #12
03b64     34 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0229
03b68     14 FA 05 F6 | 	mov	result1, #20
03b6c     2C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0230
03b70     15 FA 05 F6 | 	mov	result1, #21
03b74     24 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0231
03b78     16 FA 05 F6 | 	mov	result1, #22
03b7c     1C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0232
03b80     FF FB 05 F6 | 	mov	result1, #511
03b84     14 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0233
03b88     0F FA 05 F6 | 	mov	result1, #15
03b8c     0C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0234
03b90     10 FA 05 F6 | 	mov	result1, #16
03b94     04 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0235
03b98     00 FA 05 F6 | 	mov	result1, #0
03b9c                 | LR__0236
03b9c     A7 F0 03 F6 | 	mov	ptra, fp
03ba0     B2 00 A0 FD | 	call	#popregs_
03ba4                 | _isseparator_ret
03ba4     2D 00 64 FD | 	ret
03ba8                 | 
03ba8                 | ' 
03ba8                 | ' 
03ba8                 | ' function iscommand(s as string) as ubyte
03ba8                 | _iscommand
03ba8     01 4A 05 F6 | 	mov	COUNT_, #1
03bac     A8 00 A0 FD | 	call	#pushregs_
03bb0                 | ' 
03bb0                 | ' select case s
03bb0     09 1F 02 F6 | 	mov	local01, arg01
03bb4     5D 01 00 FF 
03bb8     8A 14 06 F6 | 	mov	arg02, ##@LR__4712
03bbc     0F 13 02 F6 | 	mov	arg01, local01
03bc0     40 87 B1 FD | 	call	#__system___string_cmp
03bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc8     74 08 90 AD |  if_e	jmp	#LR__0240
03bcc     5D 01 00 FF 
03bd0     8F 14 06 F6 | 	mov	arg02, ##@LR__4713
03bd4     0F 13 02 F6 | 	mov	arg01, local01
03bd8     28 87 B1 FD | 	call	#__system___string_cmp
03bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03be0     64 08 90 AD |  if_e	jmp	#LR__0241
03be4     5D 01 00 FF 
03be8     92 14 06 F6 | 	mov	arg02, ##@LR__4714
03bec     0F 13 02 F6 | 	mov	arg01, local01
03bf0     10 87 B1 FD | 	call	#__system___string_cmp
03bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf8     54 08 90 AD |  if_e	jmp	#LR__0242
03bfc     5D 01 00 FF 
03c00     96 14 06 F6 | 	mov	arg02, ##@LR__4715
03c04     0F 13 02 F6 | 	mov	arg01, local01
03c08     F8 86 B1 FD | 	call	#__system___string_cmp
03c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c10     44 08 90 AD |  if_e	jmp	#LR__0243
03c14     5D 01 00 FF 
03c18     9B 14 06 F6 | 	mov	arg02, ##@LR__4716
03c1c     0F 13 02 F6 | 	mov	arg01, local01
03c20     E0 86 B1 FD | 	call	#__system___string_cmp
03c24     00 FA 0D F2 | 	cmp	result1, #0 wz
03c28     34 08 90 AD |  if_e	jmp	#LR__0244
03c2c     5D 01 00 FF 
03c30     9F 14 06 F6 | 	mov	arg02, ##@LR__4717
03c34     0F 13 02 F6 | 	mov	arg01, local01
03c38     C8 86 B1 FD | 	call	#__system___string_cmp
03c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c40     24 08 90 AD |  if_e	jmp	#LR__0245
03c44     5D 01 00 FF 
03c48     A6 14 06 F6 | 	mov	arg02, ##@LR__4718
03c4c     0F 13 02 F6 | 	mov	arg01, local01
03c50     B0 86 B1 FD | 	call	#__system___string_cmp
03c54     00 FA 0D F2 | 	cmp	result1, #0 wz
03c58     14 08 90 AD |  if_e	jmp	#LR__0246
03c5c     5D 01 00 FF 
03c60     AA 14 06 F6 | 	mov	arg02, ##@LR__4719
03c64     0F 13 02 F6 | 	mov	arg01, local01
03c68     98 86 B1 FD | 	call	#__system___string_cmp
03c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c70     04 08 90 AD |  if_e	jmp	#LR__0247
03c74     5D 01 00 FF 
03c78     B0 14 06 F6 | 	mov	arg02, ##@LR__4720
03c7c     0F 13 02 F6 | 	mov	arg01, local01
03c80     80 86 B1 FD | 	call	#__system___string_cmp
03c84     00 FA 0D F2 | 	cmp	result1, #0 wz
03c88     F4 07 90 AD |  if_e	jmp	#LR__0248
03c8c     5D 01 00 FF 
03c90     B4 14 06 F6 | 	mov	arg02, ##@LR__4721
03c94     0F 13 02 F6 | 	mov	arg01, local01
03c98     68 86 B1 FD | 	call	#__system___string_cmp
03c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03ca0     E4 07 90 AD |  if_e	jmp	#LR__0249
03ca4     5D 01 00 FF 
03ca8     BA 14 06 F6 | 	mov	arg02, ##@LR__4722
03cac     0F 13 02 F6 | 	mov	arg01, local01
03cb0     50 86 B1 FD | 	call	#__system___string_cmp
03cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb8     D4 07 90 AD |  if_e	jmp	#LR__0250
03cbc     5D 01 00 FF 
03cc0     BD 14 06 F6 | 	mov	arg02, ##@LR__4723
03cc4     0F 13 02 F6 | 	mov	arg01, local01
03cc8     38 86 B1 FD | 	call	#__system___string_cmp
03ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
03cd0     C4 07 90 AD |  if_e	jmp	#LR__0251
03cd4     5D 01 00 FF 
03cd8     C3 14 06 F6 | 	mov	arg02, ##@LR__4724
03cdc     0F 13 02 F6 | 	mov	arg01, local01
03ce0     20 86 B1 FD | 	call	#__system___string_cmp
03ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce8     B4 07 90 AD |  if_e	jmp	#LR__0252
03cec     5D 01 00 FF 
03cf0     C7 14 06 F6 | 	mov	arg02, ##@LR__4725
03cf4     0F 13 02 F6 | 	mov	arg01, local01
03cf8     08 86 B1 FD | 	call	#__system___string_cmp
03cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03d00     A4 07 90 AD |  if_e	jmp	#LR__0253
03d04     5D 01 00 FF 
03d08     CE 14 06 F6 | 	mov	arg02, ##@LR__4726
03d0c     0F 13 02 F6 | 	mov	arg01, local01
03d10     F0 85 B1 FD | 	call	#__system___string_cmp
03d14     00 FA 0D F2 | 	cmp	result1, #0 wz
03d18     94 07 90 AD |  if_e	jmp	#LR__0254
03d1c     5D 01 00 FF 
03d20     D5 14 06 F6 | 	mov	arg02, ##@LR__4727
03d24     0F 13 02 F6 | 	mov	arg01, local01
03d28     D8 85 B1 FD | 	call	#__system___string_cmp
03d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d30     84 07 90 AD |  if_e	jmp	#LR__0255
03d34     5D 01 00 FF 
03d38     DC 14 06 F6 | 	mov	arg02, ##@LR__4728
03d3c     0F 13 02 F6 | 	mov	arg01, local01
03d40     C0 85 B1 FD | 	call	#__system___string_cmp
03d44     00 FA 0D F2 | 	cmp	result1, #0 wz
03d48     74 07 90 AD |  if_e	jmp	#LR__0256
03d4c     5D 01 00 FF 
03d50     E6 14 06 F6 | 	mov	arg02, ##@LR__4729
03d54     0F 13 02 F6 | 	mov	arg01, local01
03d58     A8 85 B1 FD | 	call	#__system___string_cmp
03d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d60     64 07 90 AD |  if_e	jmp	#LR__0257
03d64     5D 01 00 FF 
03d68     EA 14 06 F6 | 	mov	arg02, ##@LR__4730
03d6c     0F 13 02 F6 | 	mov	arg01, local01
03d70     90 85 B1 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     54 07 90 AD |  if_e	jmp	#LR__0258
03d7c     5D 01 00 FF 
03d80     EE 14 06 F6 | 	mov	arg02, ##@LR__4731
03d84     0F 13 02 F6 | 	mov	arg01, local01
03d88     78 85 B1 FD | 	call	#__system___string_cmp
03d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d90     44 07 90 AD |  if_e	jmp	#LR__0259
03d94     5D 01 00 FF 
03d98     F2 14 06 F6 | 	mov	arg02, ##@LR__4732
03d9c     0F 13 02 F6 | 	mov	arg01, local01
03da0     60 85 B1 FD | 	call	#__system___string_cmp
03da4     00 FA 0D F2 | 	cmp	result1, #0 wz
03da8     34 07 90 AD |  if_e	jmp	#LR__0260
03dac     5D 01 00 FF 
03db0     F6 14 06 F6 | 	mov	arg02, ##@LR__4733
03db4     0F 13 02 F6 | 	mov	arg01, local01
03db8     48 85 B1 FD | 	call	#__system___string_cmp
03dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc0     24 07 90 AD |  if_e	jmp	#LR__0261
03dc4     5D 01 00 FF 
03dc8     FC 14 06 F6 | 	mov	arg02, ##@LR__4734
03dcc     0F 13 02 F6 | 	mov	arg01, local01
03dd0     30 85 B1 FD | 	call	#__system___string_cmp
03dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd8     14 07 90 AD |  if_e	jmp	#LR__0262
03ddc     5D 01 00 FF 
03de0     01 15 06 F6 | 	mov	arg02, ##@LR__4735
03de4     0F 13 02 F6 | 	mov	arg01, local01
03de8     18 85 B1 FD | 	call	#__system___string_cmp
03dec     00 FA 0D F2 | 	cmp	result1, #0 wz
03df0     04 07 90 AD |  if_e	jmp	#LR__0263
03df4     5D 01 00 FF 
03df8     05 15 06 F6 | 	mov	arg02, ##@LR__4736
03dfc     0F 13 02 F6 | 	mov	arg01, local01
03e00     00 85 B1 FD | 	call	#__system___string_cmp
03e04     00 FA 0D F2 | 	cmp	result1, #0 wz
03e08     F4 06 90 AD |  if_e	jmp	#LR__0264
03e0c     5D 01 00 FF 
03e10     0A 15 06 F6 | 	mov	arg02, ##@LR__4737
03e14     0F 13 02 F6 | 	mov	arg01, local01
03e18     E8 84 B1 FD | 	call	#__system___string_cmp
03e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e20     E4 06 90 AD |  if_e	jmp	#LR__0265
03e24     5D 01 00 FF 
03e28     12 15 06 F6 | 	mov	arg02, ##@LR__4738
03e2c     0F 13 02 F6 | 	mov	arg01, local01
03e30     D0 84 B1 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     D4 06 90 AD |  if_e	jmp	#LR__0266
03e3c     5D 01 00 FF 
03e40     16 15 06 F6 | 	mov	arg02, ##@LR__4739
03e44     0F 13 02 F6 | 	mov	arg01, local01
03e48     B8 84 B1 FD | 	call	#__system___string_cmp
03e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e50     C4 06 90 AD |  if_e	jmp	#LR__0267
03e54     5D 01 00 FF 
03e58     1B 15 06 F6 | 	mov	arg02, ##@LR__4740
03e5c     0F 13 02 F6 | 	mov	arg01, local01
03e60     A0 84 B1 FD | 	call	#__system___string_cmp
03e64     00 FA 0D F2 | 	cmp	result1, #0 wz
03e68     B4 06 90 AD |  if_e	jmp	#LR__0268
03e6c     5D 01 00 FF 
03e70     1F 15 06 F6 | 	mov	arg02, ##@LR__4741
03e74     0F 13 02 F6 | 	mov	arg01, local01
03e78     88 84 B1 FD | 	call	#__system___string_cmp
03e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e80     A4 06 90 AD |  if_e	jmp	#LR__0269
03e84     5D 01 00 FF 
03e88     24 15 06 F6 | 	mov	arg02, ##@LR__4742
03e8c     0F 13 02 F6 | 	mov	arg01, local01
03e90     70 84 B1 FD | 	call	#__system___string_cmp
03e94     00 FA 0D F2 | 	cmp	result1, #0 wz
03e98     94 06 90 AD |  if_e	jmp	#LR__0270
03e9c     5D 01 00 FF 
03ea0     28 15 06 F6 | 	mov	arg02, ##@LR__4743
03ea4     0F 13 02 F6 | 	mov	arg01, local01
03ea8     58 84 B1 FD | 	call	#__system___string_cmp
03eac     00 FA 0D F2 | 	cmp	result1, #0 wz
03eb0     84 06 90 AD |  if_e	jmp	#LR__0271
03eb4     5D 01 00 FF 
03eb8     2B 15 06 F6 | 	mov	arg02, ##@LR__4744
03ebc     0F 13 02 F6 | 	mov	arg01, local01
03ec0     40 84 B1 FD | 	call	#__system___string_cmp
03ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec8     74 06 90 AD |  if_e	jmp	#LR__0272
03ecc     5D 01 00 FF 
03ed0     31 15 06 F6 | 	mov	arg02, ##@LR__4745
03ed4     0F 13 02 F6 | 	mov	arg01, local01
03ed8     28 84 B1 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     64 06 90 AD |  if_e	jmp	#LR__0273
03ee4     5D 01 00 FF 
03ee8     35 15 06 F6 | 	mov	arg02, ##@LR__4746
03eec     0F 13 02 F6 | 	mov	arg01, local01
03ef0     10 84 B1 FD | 	call	#__system___string_cmp
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     54 06 90 AD |  if_e	jmp	#LR__0274
03efc     5D 01 00 FF 
03f00     3A 15 06 F6 | 	mov	arg02, ##@LR__4747
03f04     0F 13 02 F6 | 	mov	arg01, local01
03f08     F8 83 B1 FD | 	call	#__system___string_cmp
03f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f10     44 06 90 AD |  if_e	jmp	#LR__0275
03f14     5D 01 00 FF 
03f18     3D 15 06 F6 | 	mov	arg02, ##@LR__4748
03f1c     0F 13 02 F6 | 	mov	arg01, local01
03f20     E0 83 B1 FD | 	call	#__system___string_cmp
03f24     00 FA 0D F2 | 	cmp	result1, #0 wz
03f28     34 06 90 AD |  if_e	jmp	#LR__0276
03f2c     5D 01 00 FF 
03f30     40 15 06 F6 | 	mov	arg02, ##@LR__4749
03f34     0F 13 02 F6 | 	mov	arg01, local01
03f38     C8 83 B1 FD | 	call	#__system___string_cmp
03f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f40     24 06 90 AD |  if_e	jmp	#LR__0277
03f44     5D 01 00 FF 
03f48     44 15 06 F6 | 	mov	arg02, ##@LR__4750
03f4c     0F 13 02 F6 | 	mov	arg01, local01
03f50     B0 83 B1 FD | 	call	#__system___string_cmp
03f54     00 FA 0D F2 | 	cmp	result1, #0 wz
03f58     14 06 90 AD |  if_e	jmp	#LR__0278
03f5c     5D 01 00 FF 
03f60     47 15 06 F6 | 	mov	arg02, ##@LR__4751
03f64     0F 13 02 F6 | 	mov	arg01, local01
03f68     98 83 B1 FD | 	call	#__system___string_cmp
03f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f70     04 06 90 AD |  if_e	jmp	#LR__0279
03f74     5D 01 00 FF 
03f78     4B 15 06 F6 | 	mov	arg02, ##@LR__4752
03f7c     0F 13 02 F6 | 	mov	arg01, local01
03f80     80 83 B1 FD | 	call	#__system___string_cmp
03f84     00 FA 0D F2 | 	cmp	result1, #0 wz
03f88     F4 05 90 AD |  if_e	jmp	#LR__0280
03f8c     5D 01 00 FF 
03f90     50 15 06 F6 | 	mov	arg02, ##@LR__4753
03f94     0F 13 02 F6 | 	mov	arg01, local01
03f98     68 83 B1 FD | 	call	#__system___string_cmp
03f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03fa0     E4 05 90 AD |  if_e	jmp	#LR__0281
03fa4     5D 01 00 FF 
03fa8     53 15 06 F6 | 	mov	arg02, ##@LR__4754
03fac     0F 13 02 F6 | 	mov	arg01, local01
03fb0     50 83 B1 FD | 	call	#__system___string_cmp
03fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb8     D4 05 90 AD |  if_e	jmp	#LR__0282
03fbc     5D 01 00 FF 
03fc0     58 15 06 F6 | 	mov	arg02, ##@LR__4755
03fc4     0F 13 02 F6 | 	mov	arg01, local01
03fc8     38 83 B1 FD | 	call	#__system___string_cmp
03fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fd0     C4 05 90 AD |  if_e	jmp	#LR__0283
03fd4     5D 01 00 FF 
03fd8     5C 15 06 F6 | 	mov	arg02, ##@LR__4756
03fdc     0F 13 02 F6 | 	mov	arg01, local01
03fe0     20 83 B1 FD | 	call	#__system___string_cmp
03fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe8     B4 05 90 AD |  if_e	jmp	#LR__0284
03fec     5D 01 00 FF 
03ff0     62 15 06 F6 | 	mov	arg02, ##@LR__4757
03ff4     0F 13 02 F6 | 	mov	arg01, local01
03ff8     08 83 B1 FD | 	call	#__system___string_cmp
03ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
04000     A4 05 90 AD |  if_e	jmp	#LR__0285
04004     5D 01 00 FF 
04008     67 15 06 F6 | 	mov	arg02, ##@LR__4758
0400c     0F 13 02 F6 | 	mov	arg01, local01
04010     F0 82 B1 FD | 	call	#__system___string_cmp
04014     00 FA 0D F2 | 	cmp	result1, #0 wz
04018     94 05 90 AD |  if_e	jmp	#LR__0286
0401c     5D 01 00 FF 
04020     6A 15 06 F6 | 	mov	arg02, ##@LR__4759
04024     0F 13 02 F6 | 	mov	arg01, local01
04028     D8 82 B1 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     84 05 90 AD |  if_e	jmp	#LR__0287
04034     5D 01 00 FF 
04038     70 15 06 F6 | 	mov	arg02, ##@LR__4760
0403c     0F 13 02 F6 | 	mov	arg01, local01
04040     C0 82 B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     74 05 90 AD |  if_e	jmp	#LR__0288
0404c     5D 01 00 FF 
04050     74 15 06 F6 | 	mov	arg02, ##@LR__4761
04054     0F 13 02 F6 | 	mov	arg01, local01
04058     A8 82 B1 FD | 	call	#__system___string_cmp
0405c     00 FA 0D F2 | 	cmp	result1, #0 wz
04060     64 05 90 AD |  if_e	jmp	#LR__0289
04064     5D 01 00 FF 
04068     79 15 06 F6 | 	mov	arg02, ##@LR__4762
0406c     0F 13 02 F6 | 	mov	arg01, local01
04070     90 82 B1 FD | 	call	#__system___string_cmp
04074     00 FA 0D F2 | 	cmp	result1, #0 wz
04078     54 05 90 AD |  if_e	jmp	#LR__0290
0407c     5D 01 00 FF 
04080     7C 15 06 F6 | 	mov	arg02, ##@LR__4763
04084     0F 13 02 F6 | 	mov	arg01, local01
04088     78 82 B1 FD | 	call	#__system___string_cmp
0408c     00 FA 0D F2 | 	cmp	result1, #0 wz
04090     44 05 90 AD |  if_e	jmp	#LR__0291
04094     5D 01 00 FF 
04098     82 15 06 F6 | 	mov	arg02, ##@LR__4764
0409c     0F 13 02 F6 | 	mov	arg01, local01
040a0     60 82 B1 FD | 	call	#__system___string_cmp
040a4     00 FA 0D F2 | 	cmp	result1, #0 wz
040a8     34 05 90 AD |  if_e	jmp	#LR__0292
040ac     5D 01 00 FF 
040b0     85 15 06 F6 | 	mov	arg02, ##@LR__4765
040b4     0F 13 02 F6 | 	mov	arg01, local01
040b8     48 82 B1 FD | 	call	#__system___string_cmp
040bc     00 FA 0D F2 | 	cmp	result1, #0 wz
040c0     24 05 90 AD |  if_e	jmp	#LR__0293
040c4     5D 01 00 FF 
040c8     8E 15 06 F6 | 	mov	arg02, ##@LR__4766
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     30 82 B1 FD | 	call	#__system___string_cmp
040d4     00 FA 0D F2 | 	cmp	result1, #0 wz
040d8     14 05 90 AD |  if_e	jmp	#LR__0294
040dc     5D 01 00 FF 
040e0     94 15 06 F6 | 	mov	arg02, ##@LR__4767
040e4     0F 13 02 F6 | 	mov	arg01, local01
040e8     18 82 B1 FD | 	call	#__system___string_cmp
040ec     00 FA 0D F2 | 	cmp	result1, #0 wz
040f0     04 05 90 AD |  if_e	jmp	#LR__0295
040f4     5D 01 00 FF 
040f8     9A 15 06 F6 | 	mov	arg02, ##@LR__4768
040fc     0F 13 02 F6 | 	mov	arg01, local01
04100     00 82 B1 FD | 	call	#__system___string_cmp
04104     00 FA 0D F2 | 	cmp	result1, #0 wz
04108     F4 04 90 AD |  if_e	jmp	#LR__0296
0410c     5D 01 00 FF 
04110     A3 15 06 F6 | 	mov	arg02, ##@LR__4769
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     E8 81 B1 FD | 	call	#__system___string_cmp
0411c     00 FA 0D F2 | 	cmp	result1, #0 wz
04120     E4 04 90 AD |  if_e	jmp	#LR__0297
04124     5D 01 00 FF 
04128     AD 15 06 F6 | 	mov	arg02, ##@LR__4770
0412c     0F 13 02 F6 | 	mov	arg01, local01
04130     D0 81 B1 FD | 	call	#__system___string_cmp
04134     00 FA 0D F2 | 	cmp	result1, #0 wz
04138     D4 04 90 AD |  if_e	jmp	#LR__0298
0413c     5D 01 00 FF 
04140     B6 15 06 F6 | 	mov	arg02, ##@LR__4771
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     B8 81 B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     C4 04 90 AD |  if_e	jmp	#LR__0299
04154     5D 01 00 FF 
04158     BB 15 06 F6 | 	mov	arg02, ##@LR__4772
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     A0 81 B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     B4 04 90 AD |  if_e	jmp	#LR__0300
0416c     5D 01 00 FF 
04170     C0 15 06 F6 | 	mov	arg02, ##@LR__4773
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     88 81 B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     A4 04 90 AD |  if_e	jmp	#LR__0301
04184     5D 01 00 FF 
04188     C4 15 06 F6 | 	mov	arg02, ##@LR__4774
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     70 81 B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     94 04 90 AD |  if_e	jmp	#LR__0302
0419c     5D 01 00 FF 
041a0     C9 15 06 F6 | 	mov	arg02, ##@LR__4775
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     58 81 B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     84 04 90 AD |  if_e	jmp	#LR__0303
041b4     5D 01 00 FF 
041b8     D2 15 06 F6 | 	mov	arg02, ##@LR__4776
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     40 81 B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     74 04 90 AD |  if_e	jmp	#LR__0304
041cc     5D 01 00 FF 
041d0     D7 15 06 F6 | 	mov	arg02, ##@LR__4777
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     28 81 B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     64 04 90 AD |  if_e	jmp	#LR__0305
041e4     5D 01 00 FF 
041e8     DD 15 06 F6 | 	mov	arg02, ##@LR__4778
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     10 81 B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     54 04 90 AD |  if_e	jmp	#LR__0306
041fc     5D 01 00 FF 
04200     DF 15 06 F6 | 	mov	arg02, ##@LR__4779
04204     0F 13 02 F6 | 	mov	arg01, local01
04208     F8 80 B1 FD | 	call	#__system___string_cmp
0420c     00 FA 0D F2 | 	cmp	result1, #0 wz
04210     44 04 90 AD |  if_e	jmp	#LR__0307
04214     5D 01 00 FF 
04218     E3 15 06 F6 | 	mov	arg02, ##@LR__4780
0421c     0F 13 02 F6 | 	mov	arg01, local01
04220     E0 80 B1 FD | 	call	#__system___string_cmp
04224     00 FA 0D F2 | 	cmp	result1, #0 wz
04228     34 04 90 AD |  if_e	jmp	#LR__0308
0422c     5D 01 00 FF 
04230     EB 15 06 F6 | 	mov	arg02, ##@LR__4781
04234     0F 13 02 F6 | 	mov	arg01, local01
04238     C8 80 B1 FD | 	call	#__system___string_cmp
0423c     00 FA 0D F2 | 	cmp	result1, #0 wz
04240     24 04 90 AD |  if_e	jmp	#LR__0309
04244     5D 01 00 FF 
04248     EF 15 06 F6 | 	mov	arg02, ##@LR__4782
0424c     0F 13 02 F6 | 	mov	arg01, local01
04250     B0 80 B1 FD | 	call	#__system___string_cmp
04254     00 FA 0D F2 | 	cmp	result1, #0 wz
04258     14 04 90 AD |  if_e	jmp	#LR__0310
0425c     5D 01 00 FF 
04260     F4 15 06 F6 | 	mov	arg02, ##@LR__4783
04264     0F 13 02 F6 | 	mov	arg01, local01
04268     98 80 B1 FD | 	call	#__system___string_cmp
0426c     00 FA 0D F2 | 	cmp	result1, #0 wz
04270     04 04 90 AD |  if_e	jmp	#LR__0311
04274     5D 01 00 FF 
04278     F7 15 06 F6 | 	mov	arg02, ##@LR__4784
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     80 80 B1 FD | 	call	#__system___string_cmp
04284     00 FA 0D F2 | 	cmp	result1, #0 wz
04288     F4 03 90 AD |  if_e	jmp	#LR__0312
0428c     5E 01 00 FF 
04290     00 14 06 F6 | 	mov	arg02, ##@LR__4785
04294     0F 13 02 F6 | 	mov	arg01, local01
04298     68 80 B1 FD | 	call	#__system___string_cmp
0429c     00 FA 0D F2 | 	cmp	result1, #0 wz
042a0     E4 03 90 AD |  if_e	jmp	#LR__0313
042a4     5E 01 00 FF 
042a8     07 14 06 F6 | 	mov	arg02, ##@LR__4786
042ac     0F 13 02 F6 | 	mov	arg01, local01
042b0     50 80 B1 FD | 	call	#__system___string_cmp
042b4     00 FA 0D F2 | 	cmp	result1, #0 wz
042b8     D4 03 90 AD |  if_e	jmp	#LR__0314
042bc     5E 01 00 FF 
042c0     0E 14 06 F6 | 	mov	arg02, ##@LR__4787
042c4     0F 13 02 F6 | 	mov	arg01, local01
042c8     38 80 B1 FD | 	call	#__system___string_cmp
042cc     00 FA 0D F2 | 	cmp	result1, #0 wz
042d0     C4 03 90 AD |  if_e	jmp	#LR__0315
042d4     5E 01 00 FF 
042d8     15 14 06 F6 | 	mov	arg02, ##@LR__4788
042dc     0F 13 02 F6 | 	mov	arg01, local01
042e0     20 80 B1 FD | 	call	#__system___string_cmp
042e4     00 FA 0D F2 | 	cmp	result1, #0 wz
042e8     B4 03 90 AD |  if_e	jmp	#LR__0316
042ec     5E 01 00 FF 
042f0     20 14 06 F6 | 	mov	arg02, ##@LR__4789
042f4     0F 13 02 F6 | 	mov	arg01, local01
042f8     08 80 B1 FD | 	call	#__system___string_cmp
042fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04300     A4 03 90 AD |  if_e	jmp	#LR__0317
04304     5E 01 00 FF 
04308     27 14 06 F6 | 	mov	arg02, ##@LR__4790
0430c     0F 13 02 F6 | 	mov	arg01, local01
04310     F0 7F B1 FD | 	call	#__system___string_cmp
04314     00 FA 0D F2 | 	cmp	result1, #0 wz
04318     94 03 90 AD |  if_e	jmp	#LR__0318
0431c     5E 01 00 FF 
04320     2F 14 06 F6 | 	mov	arg02, ##@LR__4791
04324     0F 13 02 F6 | 	mov	arg01, local01
04328     D8 7F B1 FD | 	call	#__system___string_cmp
0432c     00 FA 0D F2 | 	cmp	result1, #0 wz
04330     84 03 90 AD |  if_e	jmp	#LR__0319
04334     5E 01 00 FF 
04338     35 14 06 F6 | 	mov	arg02, ##@LR__4792
0433c     0F 13 02 F6 | 	mov	arg01, local01
04340     C0 7F B1 FD | 	call	#__system___string_cmp
04344     00 FA 0D F2 | 	cmp	result1, #0 wz
04348     74 03 90 AD |  if_e	jmp	#LR__0320
0434c     5E 01 00 FF 
04350     39 14 06 F6 | 	mov	arg02, ##@LR__4793
04354     0F 13 02 F6 | 	mov	arg01, local01
04358     A8 7F B1 FD | 	call	#__system___string_cmp
0435c     00 FA 0D F2 | 	cmp	result1, #0 wz
04360     64 03 90 AD |  if_e	jmp	#LR__0321
04364     5E 01 00 FF 
04368     40 14 06 F6 | 	mov	arg02, ##@LR__4794
0436c     0F 13 02 F6 | 	mov	arg01, local01
04370     90 7F B1 FD | 	call	#__system___string_cmp
04374     00 FA 0D F2 | 	cmp	result1, #0 wz
04378     54 03 90 AD |  if_e	jmp	#LR__0322
0437c     5E 01 00 FF 
04380     44 14 06 F6 | 	mov	arg02, ##@LR__4795
04384     0F 13 02 F6 | 	mov	arg01, local01
04388     78 7F B1 FD | 	call	#__system___string_cmp
0438c     00 FA 0D F2 | 	cmp	result1, #0 wz
04390     44 03 90 AD |  if_e	jmp	#LR__0323
04394     5E 01 00 FF 
04398     49 14 06 F6 | 	mov	arg02, ##@LR__4796
0439c     0F 13 02 F6 | 	mov	arg01, local01
043a0     60 7F B1 FD | 	call	#__system___string_cmp
043a4     00 FA 0D F2 | 	cmp	result1, #0 wz
043a8     34 03 90 AD |  if_e	jmp	#LR__0324
043ac     5E 01 00 FF 
043b0     50 14 06 F6 | 	mov	arg02, ##@LR__4797
043b4     0F 13 02 F6 | 	mov	arg01, local01
043b8     48 7F B1 FD | 	call	#__system___string_cmp
043bc     00 FA 0D F2 | 	cmp	result1, #0 wz
043c0     24 03 90 AD |  if_e	jmp	#LR__0325
043c4     5E 01 00 FF 
043c8     5A 14 06 F6 | 	mov	arg02, ##@LR__4798
043cc     0F 13 02 F6 | 	mov	arg01, local01
043d0     30 7F B1 FD | 	call	#__system___string_cmp
043d4     00 FA 0D F2 | 	cmp	result1, #0 wz
043d8     14 03 90 AD |  if_e	jmp	#LR__0326
043dc     5E 01 00 FF 
043e0     5E 14 06 F6 | 	mov	arg02, ##@LR__4799
043e4     0F 13 02 F6 | 	mov	arg01, local01
043e8     18 7F B1 FD | 	call	#__system___string_cmp
043ec     00 FA 0D F2 | 	cmp	result1, #0 wz
043f0     04 03 90 AD |  if_e	jmp	#LR__0327
043f4     5E 01 00 FF 
043f8     66 14 06 F6 | 	mov	arg02, ##@LR__4800
043fc     0F 13 02 F6 | 	mov	arg01, local01
04400     00 7F B1 FD | 	call	#__system___string_cmp
04404     00 FA 0D F2 | 	cmp	result1, #0 wz
04408     F4 02 90 AD |  if_e	jmp	#LR__0328
0440c     5E 01 00 FF 
04410     6A 14 06 F6 | 	mov	arg02, ##@LR__4801
04414     0F 13 02 F6 | 	mov	arg01, local01
04418     E8 7E B1 FD | 	call	#__system___string_cmp
0441c     00 FA 0D F2 | 	cmp	result1, #0 wz
04420     E4 02 90 AD |  if_e	jmp	#LR__0329
04424     5E 01 00 FF 
04428     70 14 06 F6 | 	mov	arg02, ##@LR__4802
0442c     0F 13 02 F6 | 	mov	arg01, local01
04430     D0 7E B1 FD | 	call	#__system___string_cmp
04434     00 FA 0D F2 | 	cmp	result1, #0 wz
04438     D4 02 90 AD |  if_e	jmp	#LR__0330
0443c     D8 02 90 FD | 	jmp	#LR__0331
04440                 | LR__0240
04440     5C FA 05 F6 | 	mov	result1, #92
04444     D4 02 90 FD | 	jmp	#LR__0332
04448                 | LR__0241
04448     5C FA 05 F6 | 	mov	result1, #92
0444c     CC 02 90 FD | 	jmp	#LR__0332
04450                 | LR__0242
04450     47 FA 05 F6 | 	mov	result1, #71
04454     C4 02 90 FD | 	jmp	#LR__0332
04458                 | LR__0243
04458     59 FA 05 F6 | 	mov	result1, #89
0445c     BC 02 90 FD | 	jmp	#LR__0332
04460                 | LR__0244
04460     59 FA 05 F6 | 	mov	result1, #89
04464     B4 02 90 FD | 	jmp	#LR__0332
04468                 | LR__0245
04468     45 FA 05 F6 | 	mov	result1, #69
0446c     AC 02 90 FD | 	jmp	#LR__0332
04470                 | LR__0246
04470     45 FA 05 F6 | 	mov	result1, #69
04474     A4 02 90 FD | 	jmp	#LR__0332
04478                 | LR__0247
04478     69 FA 05 F6 | 	mov	result1, #105
0447c     9C 02 90 FD | 	jmp	#LR__0332
04480                 | LR__0248
04480     40 FA 05 F6 | 	mov	result1, #64
04484     94 02 90 FD | 	jmp	#LR__0332
04488                 | LR__0249
04488     49 FA 05 F6 | 	mov	result1, #73
0448c     8C 02 90 FD | 	jmp	#LR__0332
04490                 | LR__0250
04490     49 FA 05 F6 | 	mov	result1, #73
04494     84 02 90 FD | 	jmp	#LR__0332
04498                 | LR__0251
04498     50 FA 05 F6 | 	mov	result1, #80
0449c     7C 02 90 FD | 	jmp	#LR__0332
044a0                 | LR__0252
044a0     50 FA 05 F6 | 	mov	result1, #80
044a4     74 02 90 FD | 	jmp	#LR__0332
044a8                 | LR__0253
044a8     68 FA 05 F6 | 	mov	result1, #104
044ac     6C 02 90 FD | 	jmp	#LR__0332
044b0                 | LR__0254
044b0     73 FA 05 F6 | 	mov	result1, #115
044b4     64 02 90 FD | 	jmp	#LR__0332
044b8                 | LR__0255
044b8     74 FA 05 F6 | 	mov	result1, #116
044bc     5C 02 90 FD | 	jmp	#LR__0332
044c0                 | LR__0256
044c0     6C FA 05 F6 | 	mov	result1, #108
044c4     54 02 90 FD | 	jmp	#LR__0332
044c8                 | LR__0257
044c8     6C FA 05 F6 | 	mov	result1, #108
044cc     4C 02 90 FD | 	jmp	#LR__0332
044d0                 | LR__0258
044d0     89 FA 05 F6 | 	mov	result1, #137
044d4     44 02 90 FD | 	jmp	#LR__0332
044d8                 | LR__0259
044d8     72 FA 05 F6 | 	mov	result1, #114
044dc     3C 02 90 FD | 	jmp	#LR__0332
044e0                 | LR__0260
044e0     5D FA 05 F6 | 	mov	result1, #93
044e4     34 02 90 FD | 	jmp	#LR__0332
044e8                 | LR__0261
044e8     96 FA 05 F6 | 	mov	result1, #150
044ec     2C 02 90 FD | 	jmp	#LR__0332
044f0                 | LR__0262
044f0     43 FA 05 F6 | 	mov	result1, #67
044f4     24 02 90 FD | 	jmp	#LR__0332
044f8                 | LR__0263
044f8     43 FA 05 F6 | 	mov	result1, #67
044fc     1C 02 90 FD | 	jmp	#LR__0332
04500                 | LR__0264
04500     5A FA 05 F6 | 	mov	result1, #90
04504     14 02 90 FD | 	jmp	#LR__0332
04508                 | LR__0265
04508     46 FA 05 F6 | 	mov	result1, #70
0450c     0C 02 90 FD | 	jmp	#LR__0332
04510                 | LR__0266
04510     46 FA 05 F6 | 	mov	result1, #70
04514     04 02 90 FD | 	jmp	#LR__0332
04518                 | LR__0267
04518     71 FA 05 F6 | 	mov	result1, #113
0451c     FC 01 90 FD | 	jmp	#LR__0332
04520                 | LR__0268
04520     71 FA 05 F6 | 	mov	result1, #113
04524     F4 01 90 FD | 	jmp	#LR__0332
04528                 | LR__0269
04528     60 FA 05 F6 | 	mov	result1, #96
0452c     EC 01 90 FD | 	jmp	#LR__0332
04530                 | LR__0270
04530     4A FA 05 F6 | 	mov	result1, #74
04534     E4 01 90 FD | 	jmp	#LR__0332
04538                 | LR__0271
04538     4A FA 05 F6 | 	mov	result1, #74
0453c     DC 01 90 FD | 	jmp	#LR__0332
04540                 | LR__0272
04540     48 FA 05 F6 | 	mov	result1, #72
04544     D4 01 90 FD | 	jmp	#LR__0332
04548                 | LR__0273
04548     48 FA 05 F6 | 	mov	result1, #72
0454c     CC 01 90 FD | 	jmp	#LR__0332
04550                 | LR__0274
04550     4E FA 05 F6 | 	mov	result1, #78
04554     C4 01 90 FD | 	jmp	#LR__0332
04558                 | LR__0275
04558     4E FA 05 F6 | 	mov	result1, #78
0455c     BC 01 90 FD | 	jmp	#LR__0332
04560                 | LR__0276
04560     58 FA 05 F6 | 	mov	result1, #88
04564     B4 01 90 FD | 	jmp	#LR__0332
04568                 | LR__0277
04568     5F FA 05 F6 | 	mov	result1, #95
0456c     AC 01 90 FD | 	jmp	#LR__0332
04570                 | LR__0278
04570     5F FA 05 F6 | 	mov	result1, #95
04574     A4 01 90 FD | 	jmp	#LR__0332
04578                 | LR__0279
04578     8A FA 05 F6 | 	mov	result1, #138
0457c     9C 01 90 FD | 	jmp	#LR__0332
04580                 | LR__0280
04580     4C FA 05 F6 | 	mov	result1, #76
04584     94 01 90 FD | 	jmp	#LR__0332
04588                 | LR__0281
04588     4C FA 05 F6 | 	mov	result1, #76
0458c     8C 01 90 FD | 	jmp	#LR__0332
04590                 | LR__0282
04590     52 FA 05 F6 | 	mov	result1, #82
04594     84 01 90 FD | 	jmp	#LR__0332
04598                 | LR__0283
04598     52 FA 05 F6 | 	mov	result1, #82
0459c     7C 01 90 FD | 	jmp	#LR__0332
045a0                 | LR__0284
045a0     97 FA 05 F6 | 	mov	result1, #151
045a4     74 01 90 FD | 	jmp	#LR__0332
045a8                 | LR__0285
045a8     61 FA 05 F6 | 	mov	result1, #97
045ac     6C 01 90 FD | 	jmp	#LR__0332
045b0                 | LR__0286
045b0     61 FA 05 F6 | 	mov	result1, #97
045b4     64 01 90 FD | 	jmp	#LR__0332
045b8                 | LR__0287
045b8     63 FA 05 F6 | 	mov	result1, #99
045bc     5C 01 90 FD | 	jmp	#LR__0332
045c0                 | LR__0288
045c0     41 FA 05 F6 | 	mov	result1, #65
045c4     54 01 90 FD | 	jmp	#LR__0332
045c8                 | LR__0289
045c8     4B FA 05 F6 | 	mov	result1, #75
045cc     4C 01 90 FD | 	jmp	#LR__0332
045d0                 | LR__0290
045d0     4B FA 05 F6 | 	mov	result1, #75
045d4     44 01 90 FD | 	jmp	#LR__0332
045d8                 | LR__0291
045d8     5E FA 05 F6 | 	mov	result1, #94
045dc     3C 01 90 FD | 	jmp	#LR__0332
045e0                 | LR__0292
045e0     5E FA 05 F6 | 	mov	result1, #94
045e4     34 01 90 FD | 	jmp	#LR__0332
045e8                 | LR__0293
045e8     7C FA 05 F6 | 	mov	result1, #124
045ec     2C 01 90 FD | 	jmp	#LR__0332
045f0                 | LR__0294
045f0     7E FA 05 F6 | 	mov	result1, #126
045f4     24 01 90 FD | 	jmp	#LR__0332
045f8                 | LR__0295
045f8     7D FA 05 F6 | 	mov	result1, #125
045fc     1C 01 90 FD | 	jmp	#LR__0332
04600                 | LR__0296
04600     7F FA 05 F6 | 	mov	result1, #127
04604     14 01 90 FD | 	jmp	#LR__0332
04608                 | LR__0297
04608     80 FA 05 F6 | 	mov	result1, #128
0460c     0C 01 90 FD | 	jmp	#LR__0332
04610                 | LR__0298
04610     55 FA 05 F6 | 	mov	result1, #85
04614     04 01 90 FD | 	jmp	#LR__0332
04618                 | LR__0299
04618     75 FA 05 F6 | 	mov	result1, #117
0461c     FC 00 90 FD | 	jmp	#LR__0332
04620                 | LR__0300
04620     42 FA 05 F6 | 	mov	result1, #66
04624     F4 00 90 FD | 	jmp	#LR__0332
04628                 | LR__0301
04628     42 FA 05 F6 | 	mov	result1, #66
0462c     EC 00 90 FD | 	jmp	#LR__0332
04630                 | LR__0302
04630     95 FA 05 F6 | 	mov	result1, #149
04634     E4 00 90 FD | 	jmp	#LR__0332
04638                 | LR__0303
04638     81 FA 05 F6 | 	mov	result1, #129
0463c     DC 00 90 FD | 	jmp	#LR__0332
04640                 | LR__0304
04640     81 FA 05 F6 | 	mov	result1, #129
04644     D4 00 90 FD | 	jmp	#LR__0332
04648                 | LR__0305
04648     44 FA 05 F6 | 	mov	result1, #68
0464c     CC 00 90 FD | 	jmp	#LR__0332
04650                 | LR__0306
04650     44 FA 05 F6 | 	mov	result1, #68
04654     C4 00 90 FD | 	jmp	#LR__0332
04658                 | LR__0307
04658     88 FA 05 F6 | 	mov	result1, #136
0465c     BC 00 90 FD | 	jmp	#LR__0332
04660                 | LR__0308
04660     92 FA 05 F6 | 	mov	result1, #146
04664     B4 00 90 FD | 	jmp	#LR__0332
04668                 | LR__0309
04668     4D FA 05 F6 | 	mov	result1, #77
0466c     AC 00 90 FD | 	jmp	#LR__0332
04670                 | LR__0310
04670     51 FA 05 F6 | 	mov	result1, #81
04674     A4 00 90 FD | 	jmp	#LR__0332
04678                 | LR__0311
04678     51 FA 05 F6 | 	mov	result1, #81
0467c     9C 00 90 FD | 	jmp	#LR__0332
04680                 | LR__0312
04680     8E FA 05 F6 | 	mov	result1, #142
04684     94 00 90 FD | 	jmp	#LR__0332
04688                 | LR__0313
04688     90 FA 05 F6 | 	mov	result1, #144
0468c     8C 00 90 FD | 	jmp	#LR__0332
04690                 | LR__0314
04690     8D FA 05 F6 | 	mov	result1, #141
04694     84 00 90 FD | 	jmp	#LR__0332
04698                 | LR__0315
04698     8C FA 05 F6 | 	mov	result1, #140
0469c     7C 00 90 FD | 	jmp	#LR__0332
046a0                 | LR__0316
046a0     91 FA 05 F6 | 	mov	result1, #145
046a4     74 00 90 FD | 	jmp	#LR__0332
046a8                 | LR__0317
046a8     8B FA 05 F6 | 	mov	result1, #139
046ac     6C 00 90 FD | 	jmp	#LR__0332
046b0                 | LR__0318
046b0     8F FA 05 F6 | 	mov	result1, #143
046b4     64 00 90 FD | 	jmp	#LR__0332
046b8                 | LR__0319
046b8     75 FA 05 F6 | 	mov	result1, #117
046bc     5C 00 90 FD | 	jmp	#LR__0332
046c0                 | LR__0320
046c0     75 FA 05 F6 | 	mov	result1, #117
046c4     54 00 90 FD | 	jmp	#LR__0332
046c8                 | LR__0321
046c8     6D FA 05 F6 | 	mov	result1, #109
046cc     4C 00 90 FD | 	jmp	#LR__0332
046d0                 | LR__0322
046d0     6D FA 05 F6 | 	mov	result1, #109
046d4     44 00 90 FD | 	jmp	#LR__0332
046d8                 | LR__0323
046d8     5B FA 05 F6 | 	mov	result1, #91
046dc     3C 00 90 FD | 	jmp	#LR__0332
046e0                 | LR__0324
046e0     56 FA 05 F6 | 	mov	result1, #86
046e4     34 00 90 FD | 	jmp	#LR__0332
046e8                 | LR__0325
046e8     70 FA 05 F6 | 	mov	result1, #112
046ec     2C 00 90 FD | 	jmp	#LR__0332
046f0                 | LR__0326
046f0     70 FA 05 F6 | 	mov	result1, #112
046f4     24 00 90 FD | 	jmp	#LR__0332
046f8                 | LR__0327
046f8     57 FA 05 F6 | 	mov	result1, #87
046fc     1C 00 90 FD | 	jmp	#LR__0332
04700                 | LR__0328
04700     57 FA 05 F6 | 	mov	result1, #87
04704     14 00 90 FD | 	jmp	#LR__0332
04708                 | LR__0329
04708     77 FA 05 F6 | 	mov	result1, #119
0470c     0C 00 90 FD | 	jmp	#LR__0332
04710                 | LR__0330
04710     78 FA 05 F6 | 	mov	result1, #120
04714     04 00 90 FD | 	jmp	#LR__0332
04718                 | LR__0331
04718     00 FA 05 F6 | 	mov	result1, #0
0471c                 | LR__0332
0471c     A7 F0 03 F6 | 	mov	ptra, fp
04720     B2 00 A0 FD | 	call	#popregs_
04724                 | _iscommand_ret
04724     2D 00 64 FD | 	ret
04728                 | 
04728                 | ' 
04728                 | ' function isfunction(s as string) as ubyte
04728                 | _isfunction
04728     01 4A 05 F6 | 	mov	COUNT_, #1
0472c     A8 00 A0 FD | 	call	#pushregs_
04730                 | ' 
04730                 | ' select case s
04730     09 1F 02 F6 | 	mov	local01, arg01
04734     5E 01 00 FF 
04738     76 14 06 F6 | 	mov	arg02, ##@LR__4803
0473c     0F 13 02 F6 | 	mov	arg01, local01
04740     C0 7B B1 FD | 	call	#__system___string_cmp
04744     00 FA 0D F2 | 	cmp	result1, #0 wz
04748     D4 02 90 AD |  if_e	jmp	#LR__0340
0474c     5E 01 00 FF 
04750     7A 14 06 F6 | 	mov	arg02, ##@LR__4804
04754     0F 13 02 F6 | 	mov	arg01, local01
04758     A8 7B B1 FD | 	call	#__system___string_cmp
0475c     00 FA 0D F2 | 	cmp	result1, #0 wz
04760     C4 02 90 AD |  if_e	jmp	#LR__0341
04764     5E 01 00 FF 
04768     7F 14 06 F6 | 	mov	arg02, ##@LR__4805
0476c     0F 13 02 F6 | 	mov	arg01, local01
04770     90 7B B1 FD | 	call	#__system___string_cmp
04774     00 FA 0D F2 | 	cmp	result1, #0 wz
04778     B4 02 90 AD |  if_e	jmp	#LR__0342
0477c     5E 01 00 FF 
04780     83 14 06 F6 | 	mov	arg02, ##@LR__4806
04784     0F 13 02 F6 | 	mov	arg01, local01
04788     78 7B B1 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     A4 02 90 AD |  if_e	jmp	#LR__0343
04794     5E 01 00 FF 
04798     88 14 06 F6 | 	mov	arg02, ##@LR__4807
0479c     0F 13 02 F6 | 	mov	arg01, local01
047a0     60 7B B1 FD | 	call	#__system___string_cmp
047a4     00 FA 0D F2 | 	cmp	result1, #0 wz
047a8     94 02 90 AD |  if_e	jmp	#LR__0344
047ac     5E 01 00 FF 
047b0     8F 14 06 F6 | 	mov	arg02, ##@LR__4808
047b4     0F 13 02 F6 | 	mov	arg01, local01
047b8     48 7B B1 FD | 	call	#__system___string_cmp
047bc     00 FA 0D F2 | 	cmp	result1, #0 wz
047c0     84 02 90 AD |  if_e	jmp	#LR__0345
047c4     5E 01 00 FF 
047c8     94 14 06 F6 | 	mov	arg02, ##@LR__4809
047cc     0F 13 02 F6 | 	mov	arg01, local01
047d0     30 7B B1 FD | 	call	#__system___string_cmp
047d4     00 FA 0D F2 | 	cmp	result1, #0 wz
047d8     74 02 90 AD |  if_e	jmp	#LR__0346
047dc     5E 01 00 FF 
047e0     98 14 06 F6 | 	mov	arg02, ##@LR__4810
047e4     0F 13 02 F6 | 	mov	arg01, local01
047e8     18 7B B1 FD | 	call	#__system___string_cmp
047ec     00 FA 0D F2 | 	cmp	result1, #0 wz
047f0     64 02 90 AD |  if_e	jmp	#LR__0347
047f4     5E 01 00 FF 
047f8     9C 14 06 F6 | 	mov	arg02, ##@LR__4811
047fc     0F 13 02 F6 | 	mov	arg01, local01
04800     00 7B B1 FD | 	call	#__system___string_cmp
04804     00 FA 0D F2 | 	cmp	result1, #0 wz
04808     54 02 90 AD |  if_e	jmp	#LR__0348
0480c     5E 01 00 FF 
04810     A2 14 06 F6 | 	mov	arg02, ##@LR__4812
04814     0F 13 02 F6 | 	mov	arg01, local01
04818     E8 7A B1 FD | 	call	#__system___string_cmp
0481c     00 FA 0D F2 | 	cmp	result1, #0 wz
04820     44 02 90 AD |  if_e	jmp	#LR__0349
04824     5E 01 00 FF 
04828     A6 14 06 F6 | 	mov	arg02, ##@LR__4813
0482c     0F 13 02 F6 | 	mov	arg01, local01
04830     D0 7A B1 FD | 	call	#__system___string_cmp
04834     00 FA 0D F2 | 	cmp	result1, #0 wz
04838     34 02 90 AD |  if_e	jmp	#LR__0350
0483c     5E 01 00 FF 
04840     AF 14 06 F6 | 	mov	arg02, ##@LR__4814
04844     0F 13 02 F6 | 	mov	arg01, local01
04848     B8 7A B1 FD | 	call	#__system___string_cmp
0484c     00 FA 0D F2 | 	cmp	result1, #0 wz
04850     24 02 90 AD |  if_e	jmp	#LR__0351
04854     5E 01 00 FF 
04858     B3 14 06 F6 | 	mov	arg02, ##@LR__4815
0485c     0F 13 02 F6 | 	mov	arg01, local01
04860     A0 7A B1 FD | 	call	#__system___string_cmp
04864     00 FA 0D F2 | 	cmp	result1, #0 wz
04868     14 02 90 AD |  if_e	jmp	#LR__0352
0486c     5E 01 00 FF 
04870     C1 14 06 F6 | 	mov	arg02, ##@LR__4816
04874     0F 13 02 F6 | 	mov	arg01, local01
04878     88 7A B1 FD | 	call	#__system___string_cmp
0487c     00 FA 0D F2 | 	cmp	result1, #0 wz
04880     04 02 90 AD |  if_e	jmp	#LR__0353
04884     5E 01 00 FF 
04888     CE 14 06 F6 | 	mov	arg02, ##@LR__4817
0488c     0F 13 02 F6 | 	mov	arg01, local01
04890     70 7A B1 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     F4 01 90 AD |  if_e	jmp	#LR__0354
0489c     5E 01 00 FF 
048a0     D6 14 06 F6 | 	mov	arg02, ##@LR__4818
048a4     0F 13 02 F6 | 	mov	arg01, local01
048a8     58 7A B1 FD | 	call	#__system___string_cmp
048ac     00 FA 0D F2 | 	cmp	result1, #0 wz
048b0     E4 01 90 AD |  if_e	jmp	#LR__0355
048b4     5E 01 00 FF 
048b8     DD 14 06 F6 | 	mov	arg02, ##@LR__4819
048bc     0F 13 02 F6 | 	mov	arg01, local01
048c0     40 7A B1 FD | 	call	#__system___string_cmp
048c4     00 FA 0D F2 | 	cmp	result1, #0 wz
048c8     D4 01 90 AD |  if_e	jmp	#LR__0356
048cc     5E 01 00 FF 
048d0     E3 14 06 F6 | 	mov	arg02, ##@LR__4820
048d4     0F 13 02 F6 | 	mov	arg01, local01
048d8     28 7A B1 FD | 	call	#__system___string_cmp
048dc     00 FA 0D F2 | 	cmp	result1, #0 wz
048e0     C4 01 90 AD |  if_e	jmp	#LR__0357
048e4     5E 01 00 FF 
048e8     EA 14 06 F6 | 	mov	arg02, ##@LR__4821
048ec     0F 13 02 F6 | 	mov	arg01, local01
048f0     10 7A B1 FD | 	call	#__system___string_cmp
048f4     00 FA 0D F2 | 	cmp	result1, #0 wz
048f8     B4 01 90 AD |  if_e	jmp	#LR__0358
048fc     5E 01 00 FF 
04900     F1 14 06 F6 | 	mov	arg02, ##@LR__4822
04904     0F 13 02 F6 | 	mov	arg01, local01
04908     F8 79 B1 FD | 	call	#__system___string_cmp
0490c     00 FA 0D F2 | 	cmp	result1, #0 wz
04910     A4 01 90 AD |  if_e	jmp	#LR__0359
04914     5E 01 00 FF 
04918     F8 14 06 F6 | 	mov	arg02, ##@LR__4823
0491c     0F 13 02 F6 | 	mov	arg01, local01
04920     E0 79 B1 FD | 	call	#__system___string_cmp
04924     00 FA 0D F2 | 	cmp	result1, #0 wz
04928     94 01 90 AD |  if_e	jmp	#LR__0360
0492c     5E 01 00 FF 
04930     FF 14 06 F6 | 	mov	arg02, ##@LR__4824
04934     0F 13 02 F6 | 	mov	arg01, local01
04938     C8 79 B1 FD | 	call	#__system___string_cmp
0493c     00 FA 0D F2 | 	cmp	result1, #0 wz
04940     84 01 90 AD |  if_e	jmp	#LR__0361
04944     5E 01 00 FF 
04948     04 15 06 F6 | 	mov	arg02, ##@LR__4825
0494c     0F 13 02 F6 | 	mov	arg01, local01
04950     B0 79 B1 FD | 	call	#__system___string_cmp
04954     00 FA 0D F2 | 	cmp	result1, #0 wz
04958     74 01 90 AD |  if_e	jmp	#LR__0362
0495c     5E 01 00 FF 
04960     0C 15 06 F6 | 	mov	arg02, ##@LR__4826
04964     0F 13 02 F6 | 	mov	arg01, local01
04968     98 79 B1 FD | 	call	#__system___string_cmp
0496c     00 FA 0D F2 | 	cmp	result1, #0 wz
04970     64 01 90 AD |  if_e	jmp	#LR__0363
04974     5E 01 00 FF 
04978     12 15 06 F6 | 	mov	arg02, ##@LR__4827
0497c     0F 13 02 F6 | 	mov	arg01, local01
04980     80 79 B1 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     54 01 90 AD |  if_e	jmp	#LR__0364
0498c     5E 01 00 FF 
04990     18 15 06 F6 | 	mov	arg02, ##@LR__4828
04994     0F 13 02 F6 | 	mov	arg01, local01
04998     68 79 B1 FD | 	call	#__system___string_cmp
0499c     00 FA 0D F2 | 	cmp	result1, #0 wz
049a0     44 01 90 AD |  if_e	jmp	#LR__0365
049a4     5E 01 00 FF 
049a8     1C 15 06 F6 | 	mov	arg02, ##@LR__4829
049ac     0F 13 02 F6 | 	mov	arg01, local01
049b0     50 79 B1 FD | 	call	#__system___string_cmp
049b4     00 FA 0D F2 | 	cmp	result1, #0 wz
049b8     34 01 90 AD |  if_e	jmp	#LR__0366
049bc     5E 01 00 FF 
049c0     20 15 06 F6 | 	mov	arg02, ##@LR__4830
049c4     0F 13 02 F6 | 	mov	arg01, local01
049c8     38 79 B1 FD | 	call	#__system___string_cmp
049cc     00 FA 0D F2 | 	cmp	result1, #0 wz
049d0     24 01 90 AD |  if_e	jmp	#LR__0367
049d4     5E 01 00 FF 
049d8     24 15 06 F6 | 	mov	arg02, ##@LR__4831
049dc     0F 13 02 F6 | 	mov	arg01, local01
049e0     20 79 B1 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     14 01 90 AD |  if_e	jmp	#LR__0368
049ec     5E 01 00 FF 
049f0     2A 15 06 F6 | 	mov	arg02, ##@LR__4832
049f4     0F 13 02 F6 | 	mov	arg01, local01
049f8     08 79 B1 FD | 	call	#__system___string_cmp
049fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04a00     04 01 90 AD |  if_e	jmp	#LR__0369
04a04     5E 01 00 FF 
04a08     30 15 06 F6 | 	mov	arg02, ##@LR__4833
04a0c     0F 13 02 F6 | 	mov	arg01, local01
04a10     F0 78 B1 FD | 	call	#__system___string_cmp
04a14     00 FA 0D F2 | 	cmp	result1, #0 wz
04a18     F4 00 90 AD |  if_e	jmp	#LR__0370
04a1c     F8 00 90 FD | 	jmp	#LR__0371
04a20                 | LR__0340
04a20     9E FA 05 F6 | 	mov	result1, #158
04a24     F4 00 90 FD | 	jmp	#LR__0372
04a28                 | LR__0341
04a28     85 FA 05 F6 | 	mov	result1, #133
04a2c     EC 00 90 FD | 	jmp	#LR__0372
04a30                 | LR__0342
04a30     9B FA 05 F6 | 	mov	result1, #155
04a34     E4 00 90 FD | 	jmp	#LR__0372
04a38                 | LR__0343
04a38     9B FA 05 F6 | 	mov	result1, #155
04a3c     DC 00 90 FD | 	jmp	#LR__0372
04a40                 | LR__0344
04a40     9B FA 05 F6 | 	mov	result1, #155
04a44     D4 00 90 FD | 	jmp	#LR__0372
04a48                 | LR__0345
04a48     84 FA 05 F6 | 	mov	result1, #132
04a4c     CC 00 90 FD | 	jmp	#LR__0372
04a50                 | LR__0346
04a50     86 FA 05 F6 | 	mov	result1, #134
04a54     C4 00 90 FD | 	jmp	#LR__0372
04a58                 | LR__0347
04a58     82 FA 05 F6 | 	mov	result1, #130
04a5c     BC 00 90 FD | 	jmp	#LR__0372
04a60                 | LR__0348
04a60     99 FA 05 F6 | 	mov	result1, #153
04a64     B4 00 90 FD | 	jmp	#LR__0372
04a68                 | LR__0349
04a68     9C FA 05 F6 | 	mov	result1, #156
04a6c     AC 00 90 FD | 	jmp	#LR__0372
04a70                 | LR__0350
04a70     6F FA 05 F6 | 	mov	result1, #111
04a74     A4 00 90 FD | 	jmp	#LR__0372
04a78                 | LR__0351
04a78     6F FA 05 F6 | 	mov	result1, #111
04a7c     9C 00 90 FD | 	jmp	#LR__0372
04a80                 | LR__0352
04a80     93 FA 05 F6 | 	mov	result1, #147
04a84     94 00 90 FD | 	jmp	#LR__0372
04a88                 | LR__0353
04a88     94 FA 05 F6 | 	mov	result1, #148
04a8c     8C 00 90 FD | 	jmp	#LR__0372
04a90                 | LR__0354
04a90     62 FA 05 F6 | 	mov	result1, #98
04a94     84 00 90 FD | 	jmp	#LR__0372
04a98                 | LR__0355
04a98     9D FA 05 F6 | 	mov	result1, #157
04a9c     7C 00 90 FD | 	jmp	#LR__0372
04aa0                 | LR__0356
04aa0     9A FA 05 F6 | 	mov	result1, #154
04aa4     74 00 90 FD | 	jmp	#LR__0372
04aa8                 | LR__0357
04aa8     66 FA 05 F6 | 	mov	result1, #102
04aac     6C 00 90 FD | 	jmp	#LR__0372
04ab0                 | LR__0358
04ab0     67 FA 05 F6 | 	mov	result1, #103
04ab4     64 00 90 FD | 	jmp	#LR__0372
04ab8                 | LR__0359
04ab8     64 FA 05 F6 | 	mov	result1, #100
04abc     5C 00 90 FD | 	jmp	#LR__0372
04ac0                 | LR__0360
04ac0     65 FA 05 F6 | 	mov	result1, #101
04ac4     54 00 90 FD | 	jmp	#LR__0372
04ac8                 | LR__0361
04ac8     98 FA 05 F6 | 	mov	result1, #152
04acc     4C 00 90 FD | 	jmp	#LR__0372
04ad0                 | LR__0362
04ad0     7B FA 05 F6 | 	mov	result1, #123
04ad4     44 00 90 FD | 	jmp	#LR__0372
04ad8                 | LR__0363
04ad8     76 FA 05 F6 | 	mov	result1, #118
04adc     3C 00 90 FD | 	jmp	#LR__0372
04ae0                 | LR__0364
04ae0     7A FA 05 F6 | 	mov	result1, #122
04ae4     34 00 90 FD | 	jmp	#LR__0372
04ae8                 | LR__0365
04ae8     54 FA 05 F6 | 	mov	result1, #84
04aec     2C 00 90 FD | 	jmp	#LR__0372
04af0                 | LR__0366
04af0     6B FA 05 F6 | 	mov	result1, #107
04af4     24 00 90 FD | 	jmp	#LR__0372
04af8                 | LR__0367
04af8     87 FA 05 F6 | 	mov	result1, #135
04afc     1C 00 90 FD | 	jmp	#LR__0372
04b00                 | LR__0368
04b00     6A FA 05 F6 | 	mov	result1, #106
04b04     14 00 90 FD | 	jmp	#LR__0372
04b08                 | LR__0369
04b08     6E FA 05 F6 | 	mov	result1, #110
04b0c     0C 00 90 FD | 	jmp	#LR__0372
04b10                 | LR__0370
04b10     83 FA 05 F6 | 	mov	result1, #131
04b14     04 00 90 FD | 	jmp	#LR__0372
04b18                 | LR__0371
04b18     00 FA 05 F6 | 	mov	result1, #0
04b1c                 | LR__0372
04b1c     A7 F0 03 F6 | 	mov	ptra, fp
04b20     B2 00 A0 FD | 	call	#popregs_
04b24                 | _isfunction_ret
04b24     2D 00 64 FD | 	ret
04b28                 | 
04b28                 | ' 
04b28                 | ' function isname(s as string) as boolean
04b28                 | _isname
04b28     0D 4A 05 F6 | 	mov	COUNT_, #13
04b2c     A8 00 A0 FD | 	call	#pushregs_
04b30     09 1F 02 F6 | 	mov	local01, arg01
04b34     09 21 02 F6 | 	mov	local02, arg01
04b38     97 06 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
04b3c                 | LR__0380
04b3c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04b40     01 20 06 51 |  if_ne	add	local02, #1
04b44     F4 FF 9F 5D |  if_ne	jmp	#LR__0380
04b48                 | LR__0381
04b48     09 21 82 F1 | 	sub	local02, arg01
04b4c     10 FB 01 F6 | 	mov	result1, local02
04b50     FD 22 0A F6 | 	mov	local03, result1 wz
04b54     00 FA 05 A6 |  if_e	mov	result1, #0
04b58     34 02 90 AD |  if_e	jmp	#LR__0393
04b5c     0F 13 02 F6 | 	mov	arg01, local01
04b60     01 14 06 F6 | 	mov	arg02, #1
04b64     01 16 06 F6 | 	mov	arg03, #1
04b68     CC 98 B1 FD | 	call	#__system__Mid_S
04b6c     FD 24 02 F6 | 	mov	local04, result1
04b70                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04b70     5E 01 00 FF 
04b74     34 15 06 F6 | 	mov	arg02, ##@LR__4834
04b78     12 13 02 F6 | 	mov	arg01, local04
04b7c     84 77 B1 FD | 	call	#__system___string_cmp
04b80     00 FA 55 F2 | 	cmps	result1, #0 wc
04b84     18 00 90 CD |  if_b	jmp	#LR__0382
04b88     5E 01 00 FF 
04b8c     36 15 06 F6 | 	mov	arg02, ##@LR__4835
04b90     12 13 02 F6 | 	mov	arg01, local04
04b94     6C 77 B1 FD | 	call	#__system___string_cmp
04b98     01 FA 55 F2 | 	cmps	result1, #1 wc
04b9c     1C 00 90 CD |  if_b	jmp	#LR__0383
04ba0                 | LR__0382
04ba0     5E 01 00 FF 
04ba4     38 15 06 F6 | 	mov	arg02, ##@LR__4836
04ba8     12 13 02 F6 | 	mov	arg01, local04
04bac     54 77 B1 FD | 	call	#__system___string_cmp
04bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb4     00 FA 05 56 |  if_ne	mov	result1, #0
04bb8     D4 01 90 5D |  if_ne	jmp	#LR__0393
04bbc                 | LR__0383
04bbc                 | ' if l>2 then 
04bbc     03 22 56 F2 | 	cmps	local03, #3 wc
04bc0     C8 01 90 CD |  if_b	jmp	#LR__0392
04bc4                 | '   for i=2 to l
04bc4     02 26 06 F6 | 	mov	local05, #2
04bc8     11 29 02 F6 | 	mov	local06, local03
04bcc     01 28 06 F1 | 	add	local06, #1
04bd0                 | LR__0384
04bd0     14 27 52 F2 | 	cmps	local05, local06 wc
04bd4     B4 01 90 3D |  if_ae	jmp	#LR__0391
04bd8     0F 13 02 F6 | 	mov	arg01, local01
04bdc     13 15 02 F6 | 	mov	arg02, local05
04be0     01 16 06 F6 | 	mov	arg03, #1
04be4     50 98 B1 FD | 	call	#__system__Mid_S
04be8     FD 24 02 F6 | 	mov	local04, result1
04bec                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04bec     11 27 52 F2 | 	cmps	local05, local03 wc
04bf0     9C 00 90 3D |  if_ae	jmp	#LR__0387
04bf4     5E 01 00 FF 
04bf8     3A 15 06 F6 | 	mov	arg02, ##@LR__4837
04bfc     12 13 02 F6 | 	mov	arg01, local04
04c00     00 77 B1 FD | 	call	#__system___string_cmp
04c04     00 FA 55 F2 | 	cmps	result1, #0 wc
04c08     18 00 90 CD |  if_b	jmp	#LR__0385
04c0c     5E 01 00 FF 
04c10     3C 15 06 F6 | 	mov	arg02, ##@LR__4838
04c14     12 13 02 F6 | 	mov	arg01, local04
04c18     E8 76 B1 FD | 	call	#__system___string_cmp
04c1c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c20     6C 00 90 CD |  if_b	jmp	#LR__0387
04c24                 | LR__0385
04c24     5E 01 00 FF 
04c28     3E 15 06 F6 | 	mov	arg02, ##@LR__4839
04c2c     12 13 02 F6 | 	mov	arg01, local04
04c30     D0 76 B1 FD | 	call	#__system___string_cmp
04c34     00 FA 55 F2 | 	cmps	result1, #0 wc
04c38     18 00 90 CD |  if_b	jmp	#LR__0386
04c3c     5E 01 00 FF 
04c40     40 15 06 F6 | 	mov	arg02, ##@LR__4840
04c44     12 13 02 F6 | 	mov	arg01, local04
04c48     B8 76 B1 FD | 	call	#__system___string_cmp
04c4c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c50     3C 00 90 CD |  if_b	jmp	#LR__0387
04c54                 | LR__0386
04c54     5E 01 00 FF 
04c58     42 2B 06 F6 | 	mov	local07, ##@LR__4841
04c5c     12 13 02 F6 | 	mov	arg01, local04
04c60     15 15 02 F6 | 	mov	arg02, local07
04c64     9C 76 B1 FD | 	call	#__system___string_cmp
04c68     00 FA 0D F2 | 	cmp	result1, #0 wz
04c6c     20 00 90 AD |  if_e	jmp	#LR__0387
04c70     5E 01 00 FF 
04c74     44 2D 06 F6 | 	mov	local08, ##@LR__4842
04c78     12 13 02 F6 | 	mov	arg01, local04
04c7c     16 15 02 F6 | 	mov	arg02, local08
04c80     80 76 B1 FD | 	call	#__system___string_cmp
04c84     FD 2E 0A F6 | 	mov	local09, result1 wz
04c88     00 FA 05 56 |  if_ne	mov	result1, #0
04c8c     00 01 90 5D |  if_ne	jmp	#LR__0393
04c90                 | LR__0387
04c90                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04c90     11 27 0A F2 | 	cmp	local05, local03 wz
04c94     EC 00 90 5D |  if_ne	jmp	#LR__0390
04c98     5E 01 00 FF 
04c9c     46 31 06 F6 | 	mov	local10, ##@LR__4843
04ca0     12 13 02 F6 | 	mov	arg01, local04
04ca4     18 15 02 F6 | 	mov	arg02, local10
04ca8     58 76 B1 FD | 	call	#__system___string_cmp
04cac     FD 32 02 F6 | 	mov	local11, result1
04cb0     00 32 56 F2 | 	cmps	local11, #0 wc
04cb4     1C 00 90 CD |  if_b	jmp	#LR__0388
04cb8     5E 01 00 FF 
04cbc     48 15 06 F6 | 	mov	arg02, ##@LR__4844
04cc0     12 13 02 F6 | 	mov	arg01, local04
04cc4     3C 76 B1 FD | 	call	#__system___string_cmp
04cc8     FD 30 02 F6 | 	mov	local10, result1
04ccc     01 30 56 F2 | 	cmps	local10, #1 wc
04cd0     B0 00 90 CD |  if_b	jmp	#LR__0390
04cd4                 | LR__0388
04cd4     5E 01 00 FF 
04cd8     4A 15 06 F6 | 	mov	arg02, ##@LR__4845
04cdc     12 13 02 F6 | 	mov	arg01, local04
04ce0     20 76 B1 FD | 	call	#__system___string_cmp
04ce4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ce8     1C 00 90 CD |  if_b	jmp	#LR__0389
04cec     5E 01 00 FF 
04cf0     4C 2F 06 F6 | 	mov	local09, ##@LR__4846
04cf4     12 13 02 F6 | 	mov	arg01, local04
04cf8     17 15 02 F6 | 	mov	arg02, local09
04cfc     04 76 B1 FD | 	call	#__system___string_cmp
04d00     01 FA 55 F2 | 	cmps	result1, #1 wc
04d04     7C 00 90 CD |  if_b	jmp	#LR__0390
04d08                 | LR__0389
04d08     5E 01 00 FF 
04d0c     4E 2F 06 F6 | 	mov	local09, ##@LR__4847
04d10     12 13 02 F6 | 	mov	arg01, local04
04d14     17 15 02 F6 | 	mov	arg02, local09
04d18     E8 75 B1 FD | 	call	#__system___string_cmp
04d1c     00 FA 4D F2 | 	cmps	result1, #0 wz
04d20     60 00 90 AD |  if_e	jmp	#LR__0390
04d24     5E 01 00 FF 
04d28     50 2D 06 F6 | 	mov	local08, ##@LR__4848
04d2c     12 13 02 F6 | 	mov	arg01, local04
04d30     16 15 02 F6 | 	mov	arg02, local08
04d34     CC 75 B1 FD | 	call	#__system___string_cmp
04d38     FD 2E 0A F6 | 	mov	local09, result1 wz
04d3c     44 00 90 AD |  if_e	jmp	#LR__0390
04d40     5E 01 00 FF 
04d44     52 35 06 F6 | 	mov	local12, ##@LR__4849
04d48     1A 2D 02 F6 | 	mov	local08, local12
04d4c     12 13 02 F6 | 	mov	arg01, local04
04d50     16 15 02 F6 | 	mov	arg02, local08
04d54     AC 75 B1 FD | 	call	#__system___string_cmp
04d58     FD 2A 0A F6 | 	mov	local07, result1 wz
04d5c     24 00 90 AD |  if_e	jmp	#LR__0390
04d60     5E 01 00 FF 
04d64     54 37 06 F6 | 	mov	local13, ##@LR__4850
04d68     1B 35 02 F6 | 	mov	local12, local13
04d6c     12 13 02 F6 | 	mov	arg01, local04
04d70     1A 15 02 F6 | 	mov	arg02, local12
04d74     8C 75 B1 FD | 	call	#__system___string_cmp
04d78     FD 2C 0A F6 | 	mov	local08, result1 wz
04d7c     00 FA 05 56 |  if_ne	mov	result1, #0
04d80     0C 00 90 5D |  if_ne	jmp	#LR__0393
04d84                 | LR__0390
04d84     01 26 06 F1 | 	add	local05, #1
04d88     44 FE 9F FD | 	jmp	#LR__0384
04d8c                 | LR__0391
04d8c                 | LR__0392
04d8c                 | ' return true
04d8c     01 FA 65 F6 | 	neg	result1, #1
04d90                 | LR__0393
04d90     A7 F0 03 F6 | 	mov	ptra, fp
04d94     B2 00 A0 FD | 	call	#popregs_
04d98                 | _isname_ret
04d98     2D 00 64 FD | 	ret
04d9c                 | 
04d9c                 | ' 
04d9c                 | ' function isnum(s as string) as boolean
04d9c                 | _isnum
04d9c     0D 4A 05 F6 | 	mov	COUNT_, #13
04da0     A8 00 A0 FD | 	call	#pushregs_
04da4     09 1F 02 F6 | 	mov	local01, arg01
04da8     00 20 06 F6 | 	mov	local02, #0
04dac     00 22 06 F6 | 	mov	local03, #0
04db0     0F 13 02 F6 | 	mov	arg01, local01
04db4     09 25 02 F6 | 	mov	local04, arg01
04db8     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
04dbc                 | LR__0400
04dbc     12 FB C9 FA | 	rdbyte	result1, local04 wz
04dc0     01 24 06 51 |  if_ne	add	local04, #1
04dc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
04dc8                 | LR__0401
04dc8     09 25 82 F1 | 	sub	local04, arg01
04dcc     12 FB 01 F6 | 	mov	result1, local04
04dd0     FD 26 0A F6 | 	mov	local05, result1 wz
04dd4     00 FA 05 A6 |  if_e	mov	result1, #0
04dd8     8C 02 90 AD |  if_e	jmp	#LR__0412
04ddc     0F 13 02 F6 | 	mov	arg01, local01
04de0     01 14 06 F6 | 	mov	arg02, #1
04de4     01 16 06 F6 | 	mov	arg03, #1
04de8     4C 96 B1 FD | 	call	#__system__Mid_S
04dec     FD 28 02 F6 | 	mov	local06, result1
04df0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04df0     5E 01 00 FF 
04df4     56 15 06 F6 | 	mov	arg02, ##@LR__4851
04df8     14 13 02 F6 | 	mov	arg01, local06
04dfc     04 75 B1 FD | 	call	#__system___string_cmp
04e00     00 FA 55 F2 | 	cmps	result1, #0 wc
04e04     18 00 90 CD |  if_b	jmp	#LR__0402
04e08     5E 01 00 FF 
04e0c     58 15 06 F6 | 	mov	arg02, ##@LR__4852
04e10     14 13 02 F6 | 	mov	arg01, local06
04e14     EC 74 B1 FD | 	call	#__system___string_cmp
04e18     01 FA 55 F2 | 	cmps	result1, #1 wc
04e1c     78 00 90 CD |  if_b	jmp	#LR__0403
04e20                 | LR__0402
04e20     5E 01 00 FF 
04e24     5A 15 06 F6 | 	mov	arg02, ##@LR__4853
04e28     14 13 02 F6 | 	mov	arg01, local06
04e2c     D4 74 B1 FD | 	call	#__system___string_cmp
04e30     00 FA 0D F2 | 	cmp	result1, #0 wz
04e34     60 00 90 AD |  if_e	jmp	#LR__0403
04e38     5E 01 00 FF 
04e3c     5C 2B 06 F6 | 	mov	local07, ##@LR__4854
04e40     14 13 02 F6 | 	mov	arg01, local06
04e44     15 15 02 F6 | 	mov	arg02, local07
04e48     B8 74 B1 FD | 	call	#__system___string_cmp
04e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e50     44 00 90 AD |  if_e	jmp	#LR__0403
04e54     5E 01 00 FF 
04e58     5E 2D 06 F6 | 	mov	local08, ##@LR__4855
04e5c     16 2B 02 F6 | 	mov	local07, local08
04e60     14 13 02 F6 | 	mov	arg01, local06
04e64     15 15 02 F6 | 	mov	arg02, local07
04e68     98 74 B1 FD | 	call	#__system___string_cmp
04e6c     00 FA 4D F2 | 	cmps	result1, #0 wz
04e70     24 00 90 AD |  if_e	jmp	#LR__0403
04e74     5E 01 00 FF 
04e78     60 2F 06 F6 | 	mov	local09, ##@LR__4856
04e7c     17 2D 02 F6 | 	mov	local08, local09
04e80     14 13 02 F6 | 	mov	arg01, local06
04e84     16 15 02 F6 | 	mov	arg02, local08
04e88     78 74 B1 FD | 	call	#__system___string_cmp
04e8c     FD 2A 0A F6 | 	mov	local07, result1 wz
04e90     00 FA 05 56 |  if_ne	mov	result1, #0
04e94     D0 01 90 5D |  if_ne	jmp	#LR__0412
04e98                 | LR__0403
04e98                 | ' if m$="." then ds=1
04e98     5E 01 00 FF 
04e9c     62 15 06 F6 | 	mov	arg02, ##@LR__4857
04ea0     14 13 02 F6 | 	mov	arg01, local06
04ea4     5C 74 B1 FD | 	call	#__system___string_cmp
04ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eac     01 20 06 A6 |  if_e	mov	local02, #1
04eb0                 | ' if l>1 then 
04eb0     02 26 56 F2 | 	cmps	local05, #2 wc
04eb4     AC 01 90 CD |  if_b	jmp	#LR__0411
04eb8                 | '   for i=2 to l
04eb8     02 30 06 F6 | 	mov	local10, #2
04ebc     13 33 02 F6 | 	mov	local11, local05
04ec0     01 32 06 F1 | 	add	local11, #1
04ec4                 | LR__0404
04ec4     19 31 52 F2 | 	cmps	local10, local11 wc
04ec8     98 01 90 3D |  if_ae	jmp	#LR__0410
04ecc     0F 13 02 F6 | 	mov	arg01, local01
04ed0     18 15 02 F6 | 	mov	arg02, local10
04ed4     01 16 06 F6 | 	mov	arg03, #1
04ed8     5C 95 B1 FD | 	call	#__system__Mid_S
04edc     FD 28 02 F6 | 	mov	local06, result1
04ee0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04ee0     5E 01 00 FF 
04ee4     64 15 06 F6 | 	mov	arg02, ##@LR__4858
04ee8     14 13 02 F6 | 	mov	arg01, local06
04eec     14 74 B1 FD | 	call	#__system___string_cmp
04ef0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ef4     18 00 90 CD |  if_b	jmp	#LR__0405
04ef8     5E 01 00 FF 
04efc     66 15 06 F6 | 	mov	arg02, ##@LR__4859
04f00     14 13 02 F6 | 	mov	arg01, local06
04f04     FC 73 B1 FD | 	call	#__system___string_cmp
04f08     01 FA 55 F2 | 	cmps	result1, #1 wc
04f0c     98 00 90 CD |  if_b	jmp	#LR__0406
04f10                 | LR__0405
04f10     5E 01 00 FF 
04f14     68 15 06 F6 | 	mov	arg02, ##@LR__4860
04f18     14 13 02 F6 | 	mov	arg01, local06
04f1c     E4 73 B1 FD | 	call	#__system___string_cmp
04f20     00 FA 0D F2 | 	cmp	result1, #0 wz
04f24     80 00 90 AD |  if_e	jmp	#LR__0406
04f28     5E 01 00 FF 
04f2c     6A 2B 06 F6 | 	mov	local07, ##@LR__4861
04f30     14 13 02 F6 | 	mov	arg01, local06
04f34     15 15 02 F6 | 	mov	arg02, local07
04f38     C8 73 B1 FD | 	call	#__system___string_cmp
04f3c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f40     64 00 90 AD |  if_e	jmp	#LR__0406
04f44     5E 01 00 FF 
04f48     6C 2D 06 F6 | 	mov	local08, ##@LR__4862
04f4c     16 2B 02 F6 | 	mov	local07, local08
04f50     14 13 02 F6 | 	mov	arg01, local06
04f54     15 15 02 F6 | 	mov	arg02, local07
04f58     A8 73 B1 FD | 	call	#__system___string_cmp
04f5c     FD 34 0A F6 | 	mov	local12, result1 wz
04f60     44 00 90 AD |  if_e	jmp	#LR__0406
04f64     5E 01 00 FF 
04f68     6E 2F 06 F6 | 	mov	local09, ##@LR__4863
04f6c     17 2D 02 F6 | 	mov	local08, local09
04f70     14 13 02 F6 | 	mov	arg01, local06
04f74     16 15 02 F6 | 	mov	arg02, local08
04f78     88 73 B1 FD | 	call	#__system___string_cmp
04f7c     FD 2A 0A F6 | 	mov	local07, result1 wz
04f80     24 00 90 AD |  if_e	jmp	#LR__0406
04f84     5E 01 00 FF 
04f88     70 37 06 F6 | 	mov	local13, ##@LR__4864
04f8c     1B 2F 02 F6 | 	mov	local09, local13
04f90     14 13 02 F6 | 	mov	arg01, local06
04f94     17 15 02 F6 | 	mov	arg02, local09
04f98     68 73 B1 FD | 	call	#__system___string_cmp
04f9c     FD 2C 0A F6 | 	mov	local08, result1 wz
04fa0     00 FA 05 56 |  if_ne	mov	result1, #0
04fa4     C0 00 90 5D |  if_ne	jmp	#LR__0412
04fa8                 | LR__0406
04fa8                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04fa8     5E 01 00 FF 
04fac     72 15 06 F6 | 	mov	arg02, ##@LR__4865
04fb0     14 13 02 F6 | 	mov	arg01, local06
04fb4     4C 73 B1 FD | 	call	#__system___string_cmp
04fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fbc     38 00 90 5D |  if_ne	jmp	#LR__0407
04fc0     18 15 02 F6 | 	mov	arg02, local10
04fc4     01 14 86 F1 | 	sub	arg02, #1
04fc8     0F 13 02 F6 | 	mov	arg01, local01
04fcc     01 16 06 F6 | 	mov	arg03, #1
04fd0     64 94 B1 FD | 	call	#__system__Mid_S
04fd4     FD 12 02 F6 | 	mov	arg01, result1
04fd8     54 96 B1 FD | 	call	#__system__LCase_S
04fdc     FD 12 02 F6 | 	mov	arg01, result1
04fe0     5E 01 00 FF 
04fe4     74 15 06 F6 | 	mov	arg02, ##@LR__4866
04fe8     18 73 B1 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     00 FA 05 56 |  if_ne	mov	result1, #0
04ff4     70 00 90 5D |  if_ne	jmp	#LR__0412
04ff8                 | LR__0407
04ff8                 | '     if m$="." then ds+=1: if ds>1 then return false
04ff8     5E 01 00 FF 
04ffc     76 15 06 F6 | 	mov	arg02, ##@LR__4867
05000     14 13 02 F6 | 	mov	arg01, local06
05004     FC 72 B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     01 20 06 A1 |  if_e	add	local02, #1
05010     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05014     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05018     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0412
0501c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0501c     5E 01 00 FF 
05020     78 15 06 F6 | 	mov	arg02, ##@LR__4868
05024     14 13 02 F6 | 	mov	arg01, local06
05028     D8 72 B1 FD | 	call	#__system___string_cmp
0502c     00 FA 4D F2 | 	cmps	result1, #0 wz
05030     18 00 90 AD |  if_e	jmp	#LR__0408
05034     5E 01 00 FF 
05038     7A 15 06 F6 | 	mov	arg02, ##@LR__4869
0503c     14 13 02 F6 | 	mov	arg01, local06
05040     C0 72 B1 FD | 	call	#__system___string_cmp
05044     00 FA 4D F2 | 	cmps	result1, #0 wz
05048     10 00 90 5D |  if_ne	jmp	#LR__0409
0504c                 | LR__0408
0504c     01 22 06 F1 | 	add	local03, #1
05050     02 22 56 F2 | 	cmps	local03, #2 wc
05054     00 FA 05 36 |  if_ae	mov	result1, #0
05058     0C 00 90 3D |  if_ae	jmp	#LR__0412
0505c                 | LR__0409
0505c     01 30 06 F1 | 	add	local10, #1
05060     60 FE 9F FD | 	jmp	#LR__0404
05064                 | LR__0410
05064                 | LR__0411
05064                 | ' return true
05064     01 FA 65 F6 | 	neg	result1, #1
05068                 | LR__0412
05068     A7 F0 03 F6 | 	mov	ptra, fp
0506c     B2 00 A0 FD | 	call	#popregs_
05070                 | _isnum_ret
05070     2D 00 64 FD | 	ret
05074                 | 
05074                 | '   
05074                 | ' function isint(s as string) as boolean
05074                 | _isint
05074     05 4A 05 F6 | 	mov	COUNT_, #5
05078     A8 00 A0 FD | 	call	#pushregs_
0507c     09 1F 02 F6 | 	mov	local01, arg01
05080     09 21 02 F6 | 	mov	local02, arg01
05084     97 06 48 FB | 	callpa	#(@LR__0421-@LR__0420)>>2,fcache_load_ptr_
05088                 | LR__0420
05088     10 FB C9 FA | 	rdbyte	result1, local02 wz
0508c     01 20 06 51 |  if_ne	add	local02, #1
05090     F4 FF 9F 5D |  if_ne	jmp	#LR__0420
05094                 | LR__0421
05094     09 21 82 F1 | 	sub	local02, arg01
05098     10 FB 01 F6 | 	mov	result1, local02
0509c     FD 20 0A F6 | 	mov	local02, result1 wz
050a0     00 FA 05 A6 |  if_e	mov	result1, #0
050a4     18 01 90 AD |  if_e	jmp	#LR__0429
050a8     0F 13 02 F6 | 	mov	arg01, local01
050ac     01 14 06 F6 | 	mov	arg02, #1
050b0     01 16 06 F6 | 	mov	arg03, #1
050b4     80 93 B1 FD | 	call	#__system__Mid_S
050b8     FD 22 02 F6 | 	mov	local03, result1
050bc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
050bc     5E 01 00 FF 
050c0     7C 15 06 F6 | 	mov	arg02, ##@LR__4870
050c4     11 13 02 F6 | 	mov	arg01, local03
050c8     38 72 B1 FD | 	call	#__system___string_cmp
050cc     00 FA 55 F2 | 	cmps	result1, #0 wc
050d0     18 00 90 CD |  if_b	jmp	#LR__0422
050d4     5E 01 00 FF 
050d8     7E 15 06 F6 | 	mov	arg02, ##@LR__4871
050dc     11 13 02 F6 | 	mov	arg01, local03
050e0     20 72 B1 FD | 	call	#__system___string_cmp
050e4     01 FA 55 F2 | 	cmps	result1, #1 wc
050e8     4C 00 90 CD |  if_b	jmp	#LR__0423
050ec                 | LR__0422
050ec     5E 01 00 FF 
050f0     80 15 06 F6 | 	mov	arg02, ##@LR__4872
050f4     11 13 02 F6 | 	mov	arg01, local03
050f8     08 72 B1 FD | 	call	#__system___string_cmp
050fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05100     34 00 90 AD |  if_e	jmp	#LR__0423
05104     5E 01 00 FF 
05108     82 15 06 F6 | 	mov	arg02, ##@LR__4873
0510c     11 13 02 F6 | 	mov	arg01, local03
05110     F0 71 B1 FD | 	call	#__system___string_cmp
05114     00 FA 0D F2 | 	cmp	result1, #0 wz
05118     1C 00 90 AD |  if_e	jmp	#LR__0423
0511c     5E 01 00 FF 
05120     84 15 06 F6 | 	mov	arg02, ##@LR__4874
05124     11 13 02 F6 | 	mov	arg01, local03
05128     D8 71 B1 FD | 	call	#__system___string_cmp
0512c     00 FA 0D F2 | 	cmp	result1, #0 wz
05130     00 FA 05 56 |  if_ne	mov	result1, #0
05134     88 00 90 5D |  if_ne	jmp	#LR__0429
05138                 | LR__0423
05138                 | ' 
05138                 | ' if l>1 then 
05138     02 20 56 F2 | 	cmps	local02, #2 wc
0513c     7C 00 90 CD |  if_b	jmp	#LR__0428
05140                 | '   for i=2 to l
05140     02 24 06 F6 | 	mov	local04, #2
05144     10 27 02 F6 | 	mov	local05, local02
05148     01 26 06 F1 | 	add	local05, #1
0514c                 | LR__0424
0514c     13 25 52 F2 | 	cmps	local04, local05 wc
05150     68 00 90 3D |  if_ae	jmp	#LR__0427
05154     0F 13 02 F6 | 	mov	arg01, local01
05158     12 15 02 F6 | 	mov	arg02, local04
0515c     01 16 06 F6 | 	mov	arg03, #1
05160     D4 92 B1 FD | 	call	#__system__Mid_S
05164     FD 22 02 F6 | 	mov	local03, result1
05168                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05168     5E 01 00 FF 
0516c     86 15 06 F6 | 	mov	arg02, ##@LR__4875
05170     11 13 02 F6 | 	mov	arg01, local03
05174     8C 71 B1 FD | 	call	#__system___string_cmp
05178     00 FA 55 F2 | 	cmps	result1, #0 wc
0517c     18 00 90 CD |  if_b	jmp	#LR__0425
05180     5E 01 00 FF 
05184     88 15 06 F6 | 	mov	arg02, ##@LR__4876
05188     11 13 02 F6 | 	mov	arg01, local03
0518c     74 71 B1 FD | 	call	#__system___string_cmp
05190     01 FA 55 F2 | 	cmps	result1, #1 wc
05194     1C 00 90 CD |  if_b	jmp	#LR__0426
05198                 | LR__0425
05198     5E 01 00 FF 
0519c     8A 15 06 F6 | 	mov	arg02, ##@LR__4877
051a0     11 13 02 F6 | 	mov	arg01, local03
051a4     5C 71 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     00 FA 05 56 |  if_ne	mov	result1, #0
051b0     0C 00 90 5D |  if_ne	jmp	#LR__0429
051b4                 | LR__0426
051b4     01 24 06 F1 | 	add	local04, #1
051b8     90 FF 9F FD | 	jmp	#LR__0424
051bc                 | LR__0427
051bc                 | LR__0428
051bc                 | ' return true
051bc     01 FA 65 F6 | 	neg	result1, #1
051c0                 | LR__0429
051c0     A7 F0 03 F6 | 	mov	ptra, fp
051c4     B2 00 A0 FD | 	call	#popregs_
051c8                 | _isint_ret
051c8     2D 00 64 FD | 	ret
051cc                 | 
051cc                 | ' 
051cc                 | ' function isdec(s as string) as boolean
051cc                 | _isdec
051cc     05 4A 05 F6 | 	mov	COUNT_, #5
051d0     A8 00 A0 FD | 	call	#pushregs_
051d4     09 1F 02 F6 | 	mov	local01, arg01
051d8     09 21 02 F6 | 	mov	local02, arg01
051dc     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
051e0                 | LR__0430
051e0     10 FB C9 FA | 	rdbyte	result1, local02 wz
051e4     01 20 06 51 |  if_ne	add	local02, #1
051e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
051ec                 | LR__0431
051ec     09 21 82 F1 | 	sub	local02, arg01
051f0     10 FB 01 F6 | 	mov	result1, local02
051f4     FD 20 0A F6 | 	mov	local02, result1 wz
051f8     00 FA 05 A6 |  if_e	mov	result1, #0
051fc     80 00 90 AD |  if_e	jmp	#LR__0436
05200                 | ' for i=1 to l
05200     01 22 06 F6 | 	mov	local03, #1
05204     10 25 02 F6 | 	mov	local04, local02
05208     01 24 06 F1 | 	add	local04, #1
0520c                 | LR__0432
0520c     12 23 52 F2 | 	cmps	local03, local04 wc
05210     68 00 90 3D |  if_ae	jmp	#LR__0435
05214     0F 13 02 F6 | 	mov	arg01, local01
05218     11 15 02 F6 | 	mov	arg02, local03
0521c     01 16 06 F6 | 	mov	arg03, #1
05220     14 92 B1 FD | 	call	#__system__Mid_S
05224     FD 26 02 F6 | 	mov	local05, result1
05228                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05228     5E 01 00 FF 
0522c     8C 15 06 F6 | 	mov	arg02, ##@LR__4878
05230     13 13 02 F6 | 	mov	arg01, local05
05234     CC 70 B1 FD | 	call	#__system___string_cmp
05238     00 FA 55 F2 | 	cmps	result1, #0 wc
0523c     18 00 90 CD |  if_b	jmp	#LR__0433
05240     5E 01 00 FF 
05244     8E 15 06 F6 | 	mov	arg02, ##@LR__4879
05248     13 13 02 F6 | 	mov	arg01, local05
0524c     B4 70 B1 FD | 	call	#__system___string_cmp
05250     01 FA 55 F2 | 	cmps	result1, #1 wc
05254     1C 00 90 CD |  if_b	jmp	#LR__0434
05258                 | LR__0433
05258     5E 01 00 FF 
0525c     90 15 06 F6 | 	mov	arg02, ##@LR__4880
05260     13 13 02 F6 | 	mov	arg01, local05
05264     9C 70 B1 FD | 	call	#__system___string_cmp
05268     00 FA 0D F2 | 	cmp	result1, #0 wz
0526c     00 FA 05 56 |  if_ne	mov	result1, #0
05270     0C 00 90 5D |  if_ne	jmp	#LR__0436
05274                 | LR__0434
05274     01 22 06 F1 | 	add	local03, #1
05278     90 FF 9F FD | 	jmp	#LR__0432
0527c                 | LR__0435
0527c                 | ' return true
0527c     01 FA 65 F6 | 	neg	result1, #1
05280                 | LR__0436
05280     A7 F0 03 F6 | 	mov	ptra, fp
05284     B2 00 A0 FD | 	call	#popregs_
05288                 | _isdec_ret
05288     2D 00 64 FD | 	ret
0528c                 | 
0528c                 | ' 
0528c                 | ' function isstring(s as string) as boolean
0528c                 | _isstring
0528c     01 4A 05 F6 | 	mov	COUNT_, #1
05290     A8 00 A0 FD | 	call	#pushregs_
05294                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
05294     09 1F 02 F6 | 	mov	local01, arg01
05298     01 14 06 F6 | 	mov	arg02, #1
0529c     80 90 B1 FD | 	call	#__system__Left_S
052a0     FD 12 02 F6 | 	mov	arg01, result1
052a4     5E 01 00 FF 
052a8     92 15 06 F6 | 	mov	arg02, ##@LR__4881
052ac     54 70 B1 FD | 	call	#__system___string_cmp
052b0     00 FA 4D F2 | 	cmps	result1, #0 wz
052b4     28 00 90 5D |  if_ne	jmp	#LR__0440
052b8     0F 13 02 F6 | 	mov	arg01, local01
052bc     01 14 06 F6 | 	mov	arg02, #1
052c0     E4 90 B1 FD | 	call	#__system__Right_S
052c4     FD 12 02 F6 | 	mov	arg01, result1
052c8     5E 01 00 FF 
052cc     94 15 06 F6 | 	mov	arg02, ##@LR__4882
052d0     30 70 B1 FD | 	call	#__system___string_cmp
052d4     00 FA 4D F2 | 	cmps	result1, #0 wz
052d8     01 FA 65 A6 |  if_e	neg	result1, #1
052dc     04 00 90 AD |  if_e	jmp	#LR__0441
052e0                 | LR__0440
052e0     00 FA 05 F6 | 	mov	result1, #0
052e4                 | LR__0441
052e4     A7 F0 03 F6 | 	mov	ptra, fp
052e8     B2 00 A0 FD | 	call	#popregs_
052ec                 | _isstring_ret
052ec     2D 00 64 FD | 	ret
052f0                 | 
052f0                 | ' 
052f0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
052f0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052f0                 | ' 
052f0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052f0                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
052f0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052f0                 | ' 
052f0                 | ' '----- delete a line from a program
052f0                 | ' 
052f0                 | ' function deleteline(aline as ulong) as integer
052f0                 | _deleteline
052f0     03 4A 05 F6 | 	mov	COUNT_, #3
052f4     A8 00 A0 FD | 	call	#pushregs_
052f8     2C F0 07 F1 | 	add	ptra, #44
052fc     04 4E 05 F1 | 	add	fp, #4
05300     A7 12 62 FC | 	wrlong	arg01, fp
05304     6A 00 00 FF 
05308     68 E4 05 F1 | 	add	objptr, ##54376
0530c     F2 1E 02 FB | 	rdlong	local01, objptr
05310     0C 4E 05 F1 | 	add	fp, #12
05314     A7 1E 62 FC | 	wrlong	local01, fp
05318     10 4E 85 F1 | 	sub	fp, #16
0531c                 | ' 
0531c                 | ' 
0531c                 | ' searchptr=programstart
0531c                 | ' 
0531c                 | ' do
0531c     5E 00 00 FF 
05320     A8 E5 85 F1 | 	sub	objptr, ##48552
05324                 | LR__0450
05324     14 4E 05 F1 | 	add	fp, #20
05328     A7 12 02 F6 | 	mov	arg01, fp
0532c     04 4E 85 F1 | 	sub	fp, #4
05330     A7 14 02 FB | 	rdlong	arg02, fp
05334     10 4E 85 F1 | 	sub	fp, #16
05338     18 16 06 F6 | 	mov	arg03, #24
0533c     98 63 B1 FD | 	call	#_psram_spin2_read1
05340     10 4E 05 F1 | 	add	fp, #16
05344     A7 1E 02 FB | 	rdlong	local01, fp
05348     08 4E 85 F1 | 	sub	fp, #8
0534c     A7 1E 62 FC | 	wrlong	local01, fp
05350     20 4E 05 F1 | 	add	fp, #32
05354     A7 1E 02 FB | 	rdlong	local01, fp
05358     18 4E 85 F1 | 	sub	fp, #24
0535c     A7 1E 62 FC | 	wrlong	local01, fp
05360     04 4E 05 F1 | 	add	fp, #4
05364     A7 1E 02 FB | 	rdlong	local01, fp
05368     10 4E 85 F1 | 	sub	fp, #16
0536c     A7 16 02 FB | 	rdlong	arg03, fp
05370     04 4E 85 F1 | 	sub	fp, #4
05374     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05378     28 4E 05 C1 |  if_b	add	fp, #40
0537c     A7 20 02 CB |  if_b	rdlong	local02, fp
05380     28 4E 85 C1 |  if_b	sub	fp, #40
05384     FF FF 3F CF 
05388     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0538c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0450
05390     0B 00 00 FF 
05394     C0 E4 85 F1 | 	sub	objptr, ##5824
05398                 | ' 
05398                 | ' 
05398                 | ' if header(0)<>aline then return -1
05398     14 4E 05 F1 | 	add	fp, #20
0539c     A7 1E 02 FB | 	rdlong	local01, fp
053a0     10 4E 85 F1 | 	sub	fp, #16
053a4     A7 22 02 FB | 	rdlong	local03, fp
053a8     04 4E 85 F1 | 	sub	fp, #4
053ac     11 1F 0A F2 | 	cmp	local01, local03 wz
053b0     01 FA 65 56 |  if_ne	neg	result1, #1
053b4     C8 02 90 5D |  if_ne	jmp	#LR__0456
053b8     08 4E 05 F1 | 	add	fp, #8
053bc     A7 12 02 FB | 	rdlong	arg01, fp
053c0     08 4E 85 F1 | 	sub	fp, #8
053c4     01 14 66 F6 | 	neg	arg02, #1
053c8     F0 38 B1 FD | 	call	#_pslpoke
053cc                 | ' 
053cc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
053cc                 | ' 
053cc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
053cc     28 4E 05 F1 | 	add	fp, #40
053d0     A7 1E 02 FB | 	rdlong	local01, fp
053d4     28 4E 85 F1 | 	sub	fp, #40
053d8     FF FF 3F FF 
053dc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
053e0     24 4E 05 A1 |  if_e	add	fp, #36
053e4     A7 22 02 AB |  if_e	rdlong	local03, fp
053e8     24 4E 85 A1 |  if_e	sub	fp, #36
053ec     FF FF 7F AF 
053f0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
053f4     78 00 90 5D |  if_ne	jmp	#LR__0451
053f8     6A 00 00 FF 
053fc     68 E4 05 F1 | 	add	objptr, ##54376
05400     F2 00 68 FC | 	wrlong	#0, objptr
05404     07 00 00 FF 
05408     28 E4 85 F1 | 	sub	objptr, ##3624
0540c     F2 00 68 FC | 	wrlong	#0, objptr
05410     07 00 00 FF 
05414     2C E4 05 F1 | 	add	objptr, ##3628
05418     F2 00 68 FC | 	wrlong	#0, objptr
0541c     04 E4 05 F1 | 	add	objptr, #4
05420     FF FF FF FF 
05424     F2 FE 6B FC | 	wrlong	##-1, objptr
05428     6A 00 00 FF 
0542c     70 E4 85 F1 | 	sub	objptr, ##54384
05430     00 12 06 F6 | 	mov	arg01, #0
05434     01 14 66 F6 | 	neg	arg02, #1
05438     80 38 B1 FD | 	call	#_pslpoke
0543c     10 12 06 F6 | 	mov	arg01, #16
05440     01 14 66 F6 | 	neg	arg02, #1
05444     74 38 B1 FD | 	call	#_pslpoke
05448     14 12 06 F6 | 	mov	arg01, #20
0544c     1E 14 CE F9 | 	bmask	arg02, #30
05450     68 38 B1 FD | 	call	#_pslpoke
05454     79 00 00 FF 
05458     94 E5 05 F1 | 	add	objptr, ##62356
0545c     F2 00 68 FC | 	wrlong	#0, objptr
05460     04 E4 05 F1 | 	add	objptr, #4
05464     F2 00 68 FC | 	wrlong	#0, objptr
05468     79 00 00 FF 
0546c     98 E5 85 F1 | 	sub	objptr, ##62360
05470                 | LR__0451
05470                 | ' 
05470                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05470     28 4E 05 F1 | 	add	fp, #40
05474     A7 1E 02 FB | 	rdlong	local01, fp
05478     28 4E 85 F1 | 	sub	fp, #40
0547c     FF FF 3F FF 
05480     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05484     74 00 90 5D |  if_ne	jmp	#LR__0452
05488     24 4E 05 F1 | 	add	fp, #36
0548c     A7 22 02 FB | 	rdlong	local03, fp
05490     24 4E 85 F1 | 	sub	fp, #36
05494     FF FF 7F FF 
05498     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0549c     5C 00 90 AD |  if_e	jmp	#LR__0452
054a0     24 4E 05 F1 | 	add	fp, #36
054a4     A7 12 02 FB | 	rdlong	arg01, fp
054a8     24 4E 85 F1 | 	sub	fp, #36
054ac     14 12 06 F1 | 	add	arg01, #20
054b0     1E 14 CE F9 | 	bmask	arg02, #30
054b4     04 38 B1 FD | 	call	#_pslpoke
054b8     24 4E 05 F1 | 	add	fp, #36
054bc     A7 1E 02 FB | 	rdlong	local01, fp
054c0     6A 00 00 FF 
054c4     70 E4 05 F1 | 	add	objptr, ##54384
054c8     F2 1E 62 FC | 	wrlong	local01, objptr
054cc     6A 00 00 FF 
054d0     70 E4 85 F1 | 	sub	objptr, ##54384
054d4     A7 12 02 FB | 	rdlong	arg01, fp
054d8     24 4E 85 F1 | 	sub	fp, #36
054dc     0C 39 B1 FD | 	call	#_pslpeek
054e0     6A 00 00 FF 
054e4     6C E4 05 F1 | 	add	objptr, ##54380
054e8     F2 FA 61 FC | 	wrlong	result1, objptr
054ec     6A 00 00 FF 
054f0     6C E4 85 F1 | 	sub	objptr, ##54380
054f4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
054f4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
054f4                 | '   lastline=pslpeek(header(4))
054f4                 | '   return 0
054f4     00 FA 05 F6 | 	mov	result1, #0
054f8     84 01 90 FD | 	jmp	#LR__0456
054fc                 | LR__0452
054fc                 | ' 
054fc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
054fc     28 4E 05 F1 | 	add	fp, #40
05500     A7 1E 02 FB | 	rdlong	local01, fp
05504     28 4E 85 F1 | 	sub	fp, #40
05508     FF FF 3F FF 
0550c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05510     58 00 90 AD |  if_e	jmp	#LR__0453
05514     24 4E 05 F1 | 	add	fp, #36
05518     A7 22 02 FB | 	rdlong	local03, fp
0551c     24 4E 85 F1 | 	sub	fp, #36
05520     FF FF 7F FF 
05524     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05528     40 00 90 5D |  if_ne	jmp	#LR__0453
0552c     28 4E 05 F1 | 	add	fp, #40
05530     A7 12 02 FB | 	rdlong	arg01, fp
05534     28 4E 85 F1 | 	sub	fp, #40
05538     10 12 06 F1 | 	add	arg01, #16
0553c     01 14 66 F6 | 	neg	arg02, #1
05540     78 37 B1 FD | 	call	#_pslpoke
05544     28 4E 05 F1 | 	add	fp, #40
05548     A7 1E 02 FB | 	rdlong	local01, fp
0554c     28 4E 85 F1 | 	sub	fp, #40
05550     6A 00 00 FF 
05554     68 E4 05 F1 | 	add	objptr, ##54376
05558     F2 1E 62 FC | 	wrlong	local01, objptr
0555c     6A 00 00 FF 
05560     68 E4 85 F1 | 	sub	objptr, ##54376
05564                 | ' '   print "deleted first line"
05564                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05564                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05564                 | '   return 0
05564     00 FA 05 F6 | 	mov	result1, #0
05568     14 01 90 FD | 	jmp	#LR__0456
0556c                 | LR__0453
0556c                 | ' 
0556c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0556c     28 4E 05 F1 | 	add	fp, #40
05570     A7 1E 02 FB | 	rdlong	local01, fp
05574     28 4E 85 F1 | 	sub	fp, #40
05578     FF FF 3F FF 
0557c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05580     24 4E 05 51 |  if_ne	add	fp, #36
05584     A7 22 02 5B |  if_ne	rdlong	local03, fp
05588     24 4E 85 51 |  if_ne	sub	fp, #36
0558c     FF FF 7F 5F 
05590     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05594     40 00 90 AD |  if_e	jmp	#LR__0454
05598     28 4E 05 F1 | 	add	fp, #40
0559c     A7 12 02 FB | 	rdlong	arg01, fp
055a0     10 12 06 F1 | 	add	arg01, #16
055a4     04 4E 85 F1 | 	sub	fp, #4
055a8     A7 14 02 FB | 	rdlong	arg02, fp
055ac     24 4E 85 F1 | 	sub	fp, #36
055b0     08 37 B1 FD | 	call	#_pslpoke
055b4     24 4E 05 F1 | 	add	fp, #36
055b8     A7 12 02 FB | 	rdlong	arg01, fp
055bc     14 12 06 F1 | 	add	arg01, #20
055c0     04 4E 05 F1 | 	add	fp, #4
055c4     A7 14 02 FB | 	rdlong	arg02, fp
055c8     28 4E 85 F1 | 	sub	fp, #40
055cc     EC 36 B1 FD | 	call	#_pslpoke
055d0                 | '    pslpoke(header(5)+16,header(4))  
055d0                 | '    pslpoke(header(4)+20, header(5))
055d0                 | '    return 0
055d0     00 FA 05 F6 | 	mov	result1, #0
055d4     A8 00 90 FD | 	jmp	#LR__0456
055d8                 | LR__0454
055d8     10 4E 05 F1 | 	add	fp, #16
055dc     A7 1E 02 FB | 	rdlong	local01, fp
055e0     08 4E 85 F1 | 	sub	fp, #8
055e4     A7 1E 62 FC | 	wrlong	local01, fp
055e8     6A 00 00 FF 
055ec     68 E4 05 F1 | 	add	objptr, ##54376
055f0     F2 1E 02 FB | 	rdlong	local01, objptr
055f4     08 4E 05 F1 | 	add	fp, #8
055f8     A7 1E 62 FC | 	wrlong	local01, fp
055fc     10 4E 85 F1 | 	sub	fp, #16
05600                 | ' 
05600                 | ' 
05600                 | ' 
05600                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05600                 | ' 
05600                 | ' lineptr2=searchptr
05600                 | ' searchptr=programstart
05600                 | ' 
05600                 | ' do
05600     5E 00 00 FF 
05604     A8 E5 85 F1 | 	sub	objptr, ##48552
05608                 | LR__0455
05608     14 4E 05 F1 | 	add	fp, #20
0560c     A7 12 02 F6 | 	mov	arg01, fp
05610     04 4E 85 F1 | 	sub	fp, #4
05614     A7 14 02 FB | 	rdlong	arg02, fp
05618     10 4E 85 F1 | 	sub	fp, #16
0561c     18 16 06 F6 | 	mov	arg03, #24
05620     B4 60 B1 FD | 	call	#_psram_spin2_read1
05624     10 4E 05 F1 | 	add	fp, #16
05628     A7 1E 02 FB | 	rdlong	local01, fp
0562c     08 4E 85 F1 | 	sub	fp, #8
05630     A7 1E 62 FC | 	wrlong	local01, fp
05634     20 4E 05 F1 | 	add	fp, #32
05638     A7 1E 02 FB | 	rdlong	local01, fp
0563c     18 4E 85 F1 | 	sub	fp, #24
05640     A7 1E 62 FC | 	wrlong	local01, fp
05644     04 4E 05 F1 | 	add	fp, #4
05648     A7 1E 02 FB | 	rdlong	local01, fp
0564c     10 4E 85 F1 | 	sub	fp, #16
05650     A7 22 02 FB | 	rdlong	local03, fp
05654     04 4E 85 F1 | 	sub	fp, #4
05658     11 1F 12 F2 | 	cmp	local01, local03 wc
0565c     28 4E 05 C1 |  if_b	add	fp, #40
05660     A7 20 02 CB |  if_b	rdlong	local02, fp
05664     28 4E 85 C1 |  if_b	sub	fp, #40
05668     FF FF 3F CF 
0566c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05670     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0455
05674     0B 00 00 FF 
05678     C0 E4 85 F1 | 	sub	objptr, ##5824
0567c     00 FA 05 F6 | 	mov	result1, #0
05680                 | LR__0456
05680     A7 F0 03 F6 | 	mov	ptra, fp
05684     B2 00 A0 FD | 	call	#popregs_
05688                 | _deleteline_ret
05688     2D 00 64 FD | 	ret
0568c                 | 
0568c                 | ' 
0568c                 | ' sub save_line
0568c                 | _save_line
0568c     03 4A 05 F6 | 	mov	COUNT_, #3
05690     A8 00 A0 FD | 	call	#pushregs_
05694     6A 00 00 FF 
05698     60 E4 05 F1 | 	add	objptr, ##54368
0569c     F2 16 02 FB | 	rdlong	arg03, objptr
056a0     01 16 06 F1 | 	add	arg03, #1
056a4     05 00 00 FF 
056a8     18 E4 85 F1 | 	sub	objptr, ##2584
056ac     F2 14 02 FB | 	rdlong	arg02, objptr
056b0     0B 15 02 FD | 	qmul	arg02, arg03
056b4     0E 00 00 FF 
056b8     44 E4 85 F1 | 	sub	objptr, ##7236
056bc     F2 12 02 FB | 	rdlong	arg01, objptr
056c0     57 00 00 FF 
056c4     04 E4 85 F1 | 	sub	objptr, ##44548
056c8     09 1F 02 F6 | 	mov	local01, arg01
056cc     18 20 62 FD | 	getqx	local02
056d0     97 06 48 FB | 	callpa	#(@LR__0461-@LR__0460)>>2,fcache_load_ptr_
056d4                 | LR__0460
056d4     0F FB C9 FA | 	rdbyte	result1, local01 wz
056d8     01 1E 06 51 |  if_ne	add	local01, #1
056dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0460
056e0                 | LR__0461
056e0     09 1F 82 F1 | 	sub	local01, arg01
056e4     03 1E CE F7 | 	test	local01, #3 wz
056e8     02 1E 46 50 |  if_ne	shr	local01, #2
056ec     01 1E 06 51 |  if_ne	add	local01, #1
056f0     02 1E 66 50 |  if_ne	shl	local01, #2
056f4     10 23 02 F6 | 	mov	local03, local02
056f8     0F 23 02 F1 | 	add	local03, local01
056fc     63 00 00 FF 
05700     40 E4 05 F1 | 	add	objptr, ##50752
05704     F2 16 02 FB | 	rdlong	arg03, objptr
05708     10 17 02 F1 | 	add	arg03, local02
0570c     04 00 00 FF 
05710     28 E4 05 F1 | 	add	objptr, ##2088
05714     F2 16 62 FC | 	wrlong	arg03, objptr
05718     04 E4 05 F1 | 	add	objptr, #4
0571c     F2 1E 62 FC | 	wrlong	local01, objptr
05720     0C E4 85 F1 | 	sub	objptr, #12
05724     F2 12 02 F6 | 	mov	arg01, objptr
05728     04 00 00 FF 
0572c     20 E4 85 F1 | 	sub	objptr, ##2080
05730     F2 14 02 FB | 	rdlong	arg02, objptr
05734     10 17 02 F6 | 	mov	arg03, local02
05738     57 00 00 FF 
0573c     80 E5 85 F1 | 	sub	objptr, ##44928
05740     30 60 B1 FD | 	call	#_psram_spin2_write
05744     4B 00 00 FF 
05748     44 E5 05 F1 | 	add	objptr, ##38724
0574c     F2 12 02 FB | 	rdlong	arg01, objptr
05750     0C 00 00 FF 
05754     3C E4 05 F1 | 	add	objptr, ##6204
05758     F2 14 02 FB | 	rdlong	arg02, objptr
0575c     10 15 02 F1 | 	add	arg02, local02
05760     0F 17 02 F6 | 	mov	arg03, local01
05764     57 00 00 FF 
05768     80 E5 85 F1 | 	sub	objptr, ##44928
0576c     04 60 B1 FD | 	call	#_psram_spin2_write
05770     57 00 00 FF 
05774     80 E5 05 F1 | 	add	objptr, ##44928
05778     F2 1E 02 FB | 	rdlong	local01, objptr
0577c     11 1F 02 F1 | 	add	local01, local03
05780     F2 1E 62 FC | 	wrlong	local01, objptr
05784     63 00 00 FF 
05788     40 E4 85 F1 | 	sub	objptr, ##50752
0578c     A7 F0 03 F6 | 	mov	ptra, fp
05790     B2 00 A0 FD | 	call	#popregs_
05794                 | _save_line_ret
05794     2D 00 64 FD | 	ret
05798                 | 
05798                 | ' 
05798                 | ' 
05798                 | ' function insertline(aline as ulong) as integer
05798                 | _insertline
05798     02 4A 05 F6 | 	mov	COUNT_, #2
0579c     A8 00 A0 FD | 	call	#pushregs_
057a0     28 F0 07 F1 | 	add	ptra, #40
057a4     04 4E 05 F1 | 	add	fp, #4
057a8     A7 12 62 FC | 	wrlong	arg01, fp
057ac     6A 00 00 FF 
057b0     68 E4 05 F1 | 	add	objptr, ##54376
057b4     F2 1E 02 FB | 	rdlong	local01, objptr
057b8     04 4E 05 F1 | 	add	fp, #4
057bc     A7 1E 62 FC | 	wrlong	local01, fp
057c0     08 4E 85 F1 | 	sub	fp, #8
057c4                 | ' 
057c4                 | ' do
057c4     5E 00 00 FF 
057c8     A8 E5 85 F1 | 	sub	objptr, ##48552
057cc                 | LR__0470
057cc     10 4E 05 F1 | 	add	fp, #16
057d0     A7 12 02 F6 | 	mov	arg01, fp
057d4     08 4E 85 F1 | 	sub	fp, #8
057d8     A7 14 02 FB | 	rdlong	arg02, fp
057dc     08 4E 85 F1 | 	sub	fp, #8
057e0     18 16 06 F6 | 	mov	arg03, #24
057e4     F0 5E B1 FD | 	call	#_psram_spin2_read1
057e8     08 4E 05 F1 | 	add	fp, #8
057ec     A7 1E 02 FB | 	rdlong	local01, fp
057f0     04 4E 05 F1 | 	add	fp, #4
057f4     A7 1E 62 FC | 	wrlong	local01, fp
057f8     18 4E 05 F1 | 	add	fp, #24
057fc     A7 1E 02 FB | 	rdlong	local01, fp
05800     1C 4E 85 F1 | 	sub	fp, #28
05804     A7 1E 62 FC | 	wrlong	local01, fp
05808     08 4E 05 F1 | 	add	fp, #8
0580c     A7 1E 02 FB | 	rdlong	local01, fp
05810     0C 4E 85 F1 | 	sub	fp, #12
05814     A7 16 02 FB | 	rdlong	arg03, fp
05818     04 4E 85 F1 | 	sub	fp, #4
0581c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05820     24 4E 05 C1 |  if_b	add	fp, #36
05824     A7 20 02 CB |  if_b	rdlong	local02, fp
05828     24 4E 85 C1 |  if_b	sub	fp, #36
0582c     FF FF 3F CF 
05830     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05834     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0470
05838     0B 00 00 FF 
0583c     C0 E4 85 F1 | 	sub	objptr, ##5824
05840                 | ' 
05840                 | ' if header(0)=aline then return -1 ' delete it first
05840     10 4E 05 F1 | 	add	fp, #16
05844     A7 1E 02 FB | 	rdlong	local01, fp
05848     0C 4E 85 F1 | 	sub	fp, #12
0584c     A7 20 02 FB | 	rdlong	local02, fp
05850     04 4E 85 F1 | 	sub	fp, #4
05854     10 1F 0A F2 | 	cmp	local01, local02 wz
05858     01 FA 65 A6 |  if_e	neg	result1, #1
0585c     48 01 90 AD |  if_e	jmp	#LR__0473
05860                 | ' if header(0)<aline then return -2 ' end of program reached
05860     10 4E 05 F1 | 	add	fp, #16
05864     A7 1E 02 FB | 	rdlong	local01, fp
05868     0C 4E 85 F1 | 	sub	fp, #12
0586c     A7 16 02 FB | 	rdlong	arg03, fp
05870     04 4E 85 F1 | 	sub	fp, #4
05874     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05878     02 FA 65 C6 |  if_b	neg	result1, #2
0587c     28 01 90 CD |  if_b	jmp	#LR__0473
05880                 | ' 
05880                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05880     20 4E 05 F1 | 	add	fp, #32
05884     A7 1E 02 FB | 	rdlong	local01, fp
05888     20 4E 85 F1 | 	sub	fp, #32
0588c     FF FF 7F FF 
05890     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05894     78 00 90 5D |  if_ne	jmp	#LR__0471
05898     63 00 00 FF 
0589c     40 E4 05 F1 | 	add	objptr, ##50752
058a0     F2 1E 02 FB | 	rdlong	local01, objptr
058a4     07 00 00 FF 
058a8     28 E4 05 F1 | 	add	objptr, ##3624
058ac     F2 1E 62 FC | 	wrlong	local01, objptr
058b0     0C 4E 05 F1 | 	add	fp, #12
058b4     A7 12 02 FB | 	rdlong	arg01, fp
058b8     0C 4E 85 F1 | 	sub	fp, #12
058bc     10 12 06 F1 | 	add	arg01, #16
058c0     07 00 00 FF 
058c4     28 E4 85 F1 | 	sub	objptr, ##3624
058c8     F2 14 02 FB | 	rdlong	arg02, objptr
058cc     63 00 00 FF 
058d0     40 E4 85 F1 | 	sub	objptr, ##50752
058d4     E4 33 B1 FD | 	call	#_pslpoke
058d8     67 00 00 FF 
058dc     70 E4 05 F1 | 	add	objptr, ##52848
058e0     FF FF FF FF 
058e4     F2 FE 6B FC | 	wrlong	##-1, objptr
058e8     0C 4E 05 F1 | 	add	fp, #12
058ec     A7 1E 02 FB | 	rdlong	local01, fp
058f0     0C 4E 85 F1 | 	sub	fp, #12
058f4     04 E4 05 F1 | 	add	objptr, #4
058f8     F2 1E 62 FC | 	wrlong	local01, objptr
058fc     67 00 00 FF 
05900     74 E4 85 F1 | 	sub	objptr, ##52852
05904     84 FD BF FD | 	call	#_save_line
05908                 | '   programstart=programptr
05908                 | '   pslpoke(lineptr2+16,programptr)
05908                 | '   ucompiledline(4)=$FFFF_FFFF
05908                 | '   ucompiledline(5)=lineptr2
05908                 | '   save_line
05908                 | '   return 0
05908     00 FA 05 F6 | 	mov	result1, #0
0590c     98 00 90 FD | 	jmp	#LR__0473
05910                 | LR__0471
05910                 | ' 
05910                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05910     20 4E 05 F1 | 	add	fp, #32
05914     A7 1E 02 FB | 	rdlong	local01, fp
05918     20 4E 85 F1 | 	sub	fp, #32
0591c     FF FF 7F FF 
05920     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05924     7C 00 90 AD |  if_e	jmp	#LR__0472
05928     20 4E 05 F1 | 	add	fp, #32
0592c     A7 1E 02 FB | 	rdlong	local01, fp
05930     67 00 00 FF 
05934     70 E4 05 F1 | 	add	objptr, ##52848
05938     F2 1E 62 FC | 	wrlong	local01, objptr
0593c     14 4E 85 F1 | 	sub	fp, #20
05940     A7 1E 02 FB | 	rdlong	local01, fp
05944     04 E4 05 F1 | 	add	objptr, #4
05948     F2 1E 62 FC | 	wrlong	local01, objptr
0594c     A7 12 02 FB | 	rdlong	arg01, fp
05950     0C 4E 85 F1 | 	sub	fp, #12
05954     10 12 06 F1 | 	add	arg01, #16
05958     04 00 00 FF 
0595c     34 E4 85 F1 | 	sub	objptr, ##2100
05960     F2 14 02 FB | 	rdlong	arg02, objptr
05964     63 00 00 FF 
05968     40 E4 85 F1 | 	sub	objptr, ##50752
0596c     4C 33 B1 FD | 	call	#_pslpoke
05970     20 4E 05 F1 | 	add	fp, #32
05974     A7 12 02 FB | 	rdlong	arg01, fp
05978     20 4E 85 F1 | 	sub	fp, #32
0597c     14 12 06 F1 | 	add	arg01, #20
05980     63 00 00 FF 
05984     40 E4 05 F1 | 	add	objptr, ##50752
05988     F2 14 02 FB | 	rdlong	arg02, objptr
0598c     63 00 00 FF 
05990     40 E4 85 F1 | 	sub	objptr, ##50752
05994     24 33 B1 FD | 	call	#_pslpoke
05998     F0 FC BF FD | 	call	#_save_line
0599c                 | '   ucompiledline(4)=header(4)
0599c                 | '   ucompiledline(5)=lineptr2
0599c                 | '   pslpoke(lineptr2+16,programptr)
0599c                 | '   pslpoke(header(4)+20,programptr)
0599c                 | '   save_line
0599c                 | '   return 0
0599c     00 FA 05 F6 | 	mov	result1, #0
059a0     04 00 90 FD | 	jmp	#LR__0473
059a4                 | LR__0472
059a4     00 FA 05 F6 | 	mov	result1, #0
059a8                 | LR__0473
059a8     A7 F0 03 F6 | 	mov	ptra, fp
059ac     B2 00 A0 FD | 	call	#popregs_
059b0                 | _insertline_ret
059b0     2D 00 64 FD | 	ret
059b4                 | 
059b4                 | ' 
059b4                 | ' sub add_line_at_end(aline) 
059b4                 | _add_line_at_end
059b4     6A 00 00 FF 
059b8     6C E4 05 F1 | 	add	objptr, ##54380
059bc     F2 12 62 FC | 	wrlong	arg01, objptr
059c0     04 E4 05 F1 | 	add	objptr, #4
059c4     F2 14 02 FB | 	rdlong	arg02, objptr
059c8     03 00 00 FF 
059cc     00 E4 85 F1 | 	sub	objptr, ##1536
059d0     F2 14 62 FC | 	wrlong	arg02, objptr
059d4     03 00 00 FF 
059d8     00 E4 05 F1 | 	add	objptr, ##1536
059dc     F2 12 02 FB | 	rdlong	arg01, objptr
059e0     14 12 06 F1 | 	add	arg01, #20
059e4     07 00 00 FF 
059e8     30 E4 85 F1 | 	sub	objptr, ##3632
059ec     F2 14 02 FB | 	rdlong	arg02, objptr
059f0     63 00 00 FF 
059f4     40 E4 85 F1 | 	sub	objptr, ##50752
059f8     C0 32 B1 FD | 	call	#_pslpoke
059fc     63 00 00 FF 
05a00     40 E4 05 F1 | 	add	objptr, ##50752
05a04     F2 14 02 FB | 	rdlong	arg02, objptr
05a08     07 00 00 FF 
05a0c     30 E4 05 F1 | 	add	objptr, ##3632
05a10     F2 14 62 FC | 	wrlong	arg02, objptr
05a14     02 00 00 FF 
05a18     FC E5 85 F1 | 	sub	objptr, ##1532
05a1c     FF FF BF FF 
05a20     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05a24                 | ' 
05a24                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05a24                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05a24     04 00 00 FF 
05a28     34 E4 85 F1 | 	sub	objptr, ##2100
05a2c     F2 14 0A FB | 	rdlong	arg02, objptr wz
05a30     63 00 00 FF 
05a34     40 E4 85 F1 | 	sub	objptr, ##50752
05a38     67 00 00 AF 
05a3c     70 E4 05 A1 |  if_e	add	objptr, ##52848
05a40     FF FF FF AF 
05a44     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05a48     67 00 00 AF 
05a4c     70 E4 85 A1 |  if_e	sub	objptr, ##52848
05a50     38 FC BF FD | 	call	#_save_line
05a54     63 00 00 FF 
05a58     40 E4 05 F1 | 	add	objptr, ##50752
05a5c     F2 12 02 FB | 	rdlong	arg01, objptr
05a60     63 00 00 FF 
05a64     40 E4 85 F1 | 	sub	objptr, ##50752
05a68     01 14 66 F6 | 	neg	arg02, #1
05a6c     4C 32 B1 FD | 	call	#_pslpoke
05a70                 | _add_line_at_end_ret
05a70     2D 00 64 FD | 	ret
05a74                 | 
05a74                 | ' 
05a74                 | ' function compile_immediate(linetype as ulong) as integer
05a74                 | _compile_immediate
05a74     09 4A 05 F6 | 	mov	COUNT_, #9
05a78     A8 00 A0 FD | 	call	#pushregs_
05a7c                 | _compile_immediate_enter
05a7c     09 25 0A F6 | 	mov	local04, arg01 wz
05a80     00 26 06 F6 | 	mov	local05, #0
05a84     00 28 06 F6 | 	mov	local06, #0
05a88                 | ' 
05a88                 | ' ' linetype=cont+1, linetype=0 immediate
05a88                 | ' '  : 1: this is the first part of the line that will continue
05a88                 | ' ' 2 - this is the continuation of the line
05a88                 | ' ' 3 - this is the last continued line
05a88                 | ' ' 4 - this is the one and only part
05a88                 | ' 
05a88                 | ' err=0
05a88                 | ' cmd=0
05a88                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05a88     30 00 90 5D |  if_ne	jmp	#LR__0480
05a8c     54 00 00 FF 
05a90     F4 E5 05 F1 | 	add	objptr, ##43508
05a94     F2 28 02 FB | 	rdlong	local06, objptr
05a98     02 00 00 FF 
05a9c     34 E4 05 F1 | 	add	objptr, ##1076
05aa0     F2 02 68 FC | 	wrlong	#1, objptr
05aa4     00 2A 06 F6 | 	mov	local07, #0
05aa8     13 00 00 FF 
05aac     38 E4 05 F1 | 	add	objptr, ##9784
05ab0     F2 00 68 FC | 	wrlong	#0, objptr
05ab4     6A 00 00 FF 
05ab8     60 E4 85 F1 | 	sub	objptr, ##54368
05abc                 | LR__0480
05abc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05abc     02 24 0E F2 | 	cmp	local04, #2 wz
05ac0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05ac4     24 00 90 5D |  if_ne	jmp	#LR__0481
05ac8     54 00 00 FF 
05acc     F4 E5 05 F1 | 	add	objptr, ##43508
05ad0     F2 28 02 FB | 	rdlong	local06, objptr
05ad4     01 2A 06 F6 | 	mov	local07, #1
05ad8     02 00 00 FF 
05adc     34 E4 05 F1 | 	add	objptr, ##1076
05ae0     F2 02 68 FC | 	wrlong	#1, objptr
05ae4     57 00 00 FF 
05ae8     28 E4 85 F1 | 	sub	objptr, ##44584
05aec                 | LR__0481
05aec                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05aec     04 24 0E F2 | 	cmp	local04, #4 wz
05af0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05af4     30 00 90 5D |  if_ne	jmp	#LR__0482
05af8     54 00 00 FF 
05afc     FC E5 05 F1 | 	add	objptr, ##43516
05b00     F2 28 02 FB | 	rdlong	local06, objptr
05b04     02 2A 06 F6 | 	mov	local07, #2
05b08     02 00 00 FF 
05b0c     2C E4 05 F1 | 	add	objptr, ##1068
05b10     F2 04 68 FC | 	wrlong	#2, objptr
05b14     13 00 00 FF 
05b18     38 E4 05 F1 | 	add	objptr, ##9784
05b1c     F2 04 68 FC | 	wrlong	#2, objptr
05b20     6A 00 00 FF 
05b24     60 E4 85 F1 | 	sub	objptr, ##54368
05b28                 | LR__0482
05b28                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05b28     05 24 0E F2 | 	cmp	local04, #5 wz
05b2c     44 00 90 5D |  if_ne	jmp	#LR__0483
05b30     57 00 00 FF 
05b34     28 E4 05 F1 | 	add	objptr, ##44584
05b38     F2 FA 01 FB | 	rdlong	result1, objptr
05b3c     FD 2A 02 F6 | 	mov	local07, result1
05b40     03 2A 66 F0 | 	shl	local07, #3
05b44     02 00 00 FF 
05b48     38 E4 85 F1 | 	sub	objptr, ##1080
05b4c     F2 2A 02 F1 | 	add	local07, objptr
05b50     04 2A 06 F1 | 	add	local07, #4
05b54     15 29 02 FB | 	rdlong	local06, local07
05b58     FD 2A 02 F6 | 	mov	local07, result1
05b5c     01 2A 06 F1 | 	add	local07, #1
05b60     02 00 00 FF 
05b64     38 E4 05 F1 | 	add	objptr, ##1080
05b68     F2 2A 62 FC | 	wrlong	local07, objptr
05b6c     57 00 00 FF 
05b70     28 E4 85 F1 | 	sub	objptr, ##44584
05b74                 | LR__0483
05b74     00 2C 06 F6 | 	mov	local08, #0
05b78                 | ' vars=0
05b78                 | ' 'print  "In compile_immediate cmd=:", cmd
05b78                 | ' 451 select case cmd
05b78     5C 28 0E F2 | 	cmp	local06, #92 wz
05b7c     08 02 90 AD |  if_e	jmp	#LR__0484
05b80     47 28 0E F2 | 	cmp	local06, #71 wz
05b84     0C 02 90 AD |  if_e	jmp	#LR__0485
05b88     59 28 0E F2 | 	cmp	local06, #89 wz
05b8c     10 02 90 AD |  if_e	jmp	#LR__0486
05b90     45 28 0E F2 | 	cmp	local06, #69 wz
05b94     14 02 90 AD |  if_e	jmp	#LR__0487
05b98     69 28 0E F2 | 	cmp	local06, #105 wz
05b9c     18 02 90 AD |  if_e	jmp	#LR__0488
05ba0     40 28 0E F2 | 	cmp	local06, #64 wz
05ba4     84 04 90 AD |  if_e	jmp	#LR__0543
05ba8     49 28 0E F2 | 	cmp	local06, #73 wz
05bac     14 02 90 AD |  if_e	jmp	#LR__0489
05bb0     50 28 0E F2 | 	cmp	local06, #80 wz
05bb4     18 02 90 AD |  if_e	jmp	#LR__0490
05bb8     68 28 0E F2 | 	cmp	local06, #104 wz
05bbc     1C 02 90 AD |  if_e	jmp	#LR__0491
05bc0     74 28 0E F2 | 	cmp	local06, #116 wz
05bc4     20 02 90 AD |  if_e	jmp	#LR__0492
05bc8     73 28 0E F2 | 	cmp	local06, #115 wz
05bcc     24 02 90 AD |  if_e	jmp	#LR__0493
05bd0     6C 28 0E F2 | 	cmp	local06, #108 wz
05bd4     28 02 90 AD |  if_e	jmp	#LR__0494
05bd8     89 28 0E F2 | 	cmp	local06, #137 wz
05bdc     4C 04 90 AD |  if_e	jmp	#LR__0543
05be0     72 28 0E F2 | 	cmp	local06, #114 wz
05be4     24 02 90 AD |  if_e	jmp	#LR__0495
05be8     5D 28 0E F2 | 	cmp	local06, #93 wz
05bec     3C 04 90 AD |  if_e	jmp	#LR__0543
05bf0     96 28 0E F2 | 	cmp	local06, #150 wz
05bf4     1C 02 90 AD |  if_e	jmp	#LR__0496
05bf8     43 28 0E F2 | 	cmp	local06, #67 wz
05bfc     1C 02 90 AD |  if_e	jmp	#LR__0497
05c00     5A 28 0E F2 | 	cmp	local06, #90 wz
05c04     20 02 90 AD |  if_e	jmp	#LR__0498
05c08     4E 28 0E F2 | 	cmp	local06, #78 wz
05c0c     20 02 90 AD |  if_e	jmp	#LR__0499
05c10     46 28 0E F2 | 	cmp	local06, #70 wz
05c14     34 02 90 AD |  if_e	jmp	#LR__0501
05c18     71 28 0E F2 | 	cmp	local06, #113 wz
05c1c     38 02 90 AD |  if_e	jmp	#LR__0502
05c20     60 28 0E F2 | 	cmp	local06, #96 wz
05c24     3C 02 90 AD |  if_e	jmp	#LR__0503
05c28     4A 28 0E F2 | 	cmp	local06, #74 wz
05c2c     40 02 90 AD |  if_e	jmp	#LR__0504
05c30     48 28 0E F2 | 	cmp	local06, #72 wz
05c34     40 02 90 AD |  if_e	jmp	#LR__0505
05c38     58 28 0E F2 | 	cmp	local06, #88 wz
05c3c     44 02 90 AD |  if_e	jmp	#LR__0506
05c40     5F 28 0E F2 | 	cmp	local06, #95 wz
05c44     44 02 90 AD |  if_e	jmp	#LR__0507
05c48     8A 28 0E F2 | 	cmp	local06, #138 wz
05c4c     48 02 90 AD |  if_e	jmp	#LR__0508
05c50     4C 28 0E F2 | 	cmp	local06, #76 wz
05c54     4C 02 90 AD |  if_e	jmp	#LR__0509
05c58     52 28 0E F2 | 	cmp	local06, #82 wz
05c5c     50 02 90 AD |  if_e	jmp	#LR__0510
05c60     97 28 0E F2 | 	cmp	local06, #151 wz
05c64     54 02 90 AD |  if_e	jmp	#LR__0511
05c68     61 28 0E F2 | 	cmp	local06, #97 wz
05c6c     58 02 90 AD |  if_e	jmp	#LR__0512
05c70     63 28 0E F2 | 	cmp	local06, #99 wz
05c74     5C 02 90 AD |  if_e	jmp	#LR__0513
05c78     41 28 0E F2 | 	cmp	local06, #65 wz
05c7c     AC 03 90 AD |  if_e	jmp	#LR__0543
05c80     4B 28 0E F2 | 	cmp	local06, #75 wz
05c84     58 02 90 AD |  if_e	jmp	#LR__0514
05c88     5E 28 0E F2 | 	cmp	local06, #94 wz
05c8c     58 02 90 AD |  if_e	jmp	#LR__0515
05c90     7C 28 0E F2 | 	cmp	local06, #124 wz
05c94     5C 02 90 AD |  if_e	jmp	#LR__0516
05c98     7D 28 0E F2 | 	cmp	local06, #125 wz
05c9c     60 02 90 AD |  if_e	jmp	#LR__0517
05ca0     7E 28 0E F2 | 	cmp	local06, #126 wz
05ca4     64 02 90 AD |  if_e	jmp	#LR__0518
05ca8     7F 28 0E F2 | 	cmp	local06, #127 wz
05cac     68 02 90 AD |  if_e	jmp	#LR__0519
05cb0     80 28 0E F2 | 	cmp	local06, #128 wz
05cb4     6C 02 90 AD |  if_e	jmp	#LR__0520
05cb8     55 28 0E F2 | 	cmp	local06, #85 wz
05cbc     70 02 90 AD |  if_e	jmp	#LR__0521
05cc0     75 28 0E F2 | 	cmp	local06, #117 wz
05cc4     74 02 90 AD |  if_e	jmp	#LR__0522
05cc8     42 28 0E F2 | 	cmp	local06, #66 wz
05ccc     78 02 90 AD |  if_e	jmp	#LR__0523
05cd0     95 28 0E F2 | 	cmp	local06, #149 wz
05cd4     7C 02 90 AD |  if_e	jmp	#LR__0524
05cd8     81 28 0E F2 | 	cmp	local06, #129 wz
05cdc     80 02 90 AD |  if_e	jmp	#LR__0525
05ce0     44 28 0E F2 | 	cmp	local06, #68 wz
05ce4     84 02 90 AD |  if_e	jmp	#LR__0526
05ce8     88 28 0E F2 | 	cmp	local06, #136 wz
05cec     3C 03 90 AD |  if_e	jmp	#LR__0543
05cf0     92 28 0E F2 | 	cmp	local06, #146 wz
05cf4     80 02 90 AD |  if_e	jmp	#LR__0527
05cf8     4D 28 0E F2 | 	cmp	local06, #77 wz
05cfc     2C 03 90 AD |  if_e	jmp	#LR__0543
05d00     51 28 0E F2 | 	cmp	local06, #81 wz
05d04     78 02 90 AD |  if_e	jmp	#LR__0528
05d08     8E 28 0E F2 | 	cmp	local06, #142 wz
05d0c     7C 02 90 AD |  if_e	jmp	#LR__0529
05d10     90 28 0E F2 | 	cmp	local06, #144 wz
05d14     80 02 90 AD |  if_e	jmp	#LR__0530
05d18     8D 28 0E F2 | 	cmp	local06, #141 wz
05d1c     84 02 90 AD |  if_e	jmp	#LR__0531
05d20     8C 28 0E F2 | 	cmp	local06, #140 wz
05d24     88 02 90 AD |  if_e	jmp	#LR__0532
05d28     91 28 0E F2 | 	cmp	local06, #145 wz
05d2c     8C 02 90 AD |  if_e	jmp	#LR__0533
05d30     8B 28 0E F2 | 	cmp	local06, #139 wz
05d34     90 02 90 AD |  if_e	jmp	#LR__0534
05d38     8F 28 0E F2 | 	cmp	local06, #143 wz
05d3c     94 02 90 AD |  if_e	jmp	#LR__0535
05d40     6D 28 0E F2 | 	cmp	local06, #109 wz
05d44     98 02 90 AD |  if_e	jmp	#LR__0536
05d48     70 28 0E F2 | 	cmp	local06, #112 wz
05d4c     DC 02 90 AD |  if_e	jmp	#LR__0543
05d50     56 28 0E F2 | 	cmp	local06, #86 wz
05d54     94 02 90 AD |  if_e	jmp	#LR__0537
05d58     57 28 0E F2 | 	cmp	local06, #87 wz
05d5c     CC 02 90 AD |  if_e	jmp	#LR__0543
05d60     79 28 0E F2 | 	cmp	local06, #121 wz
05d64     90 02 90 AD |  if_e	jmp	#LR__0538
05d68     77 28 0E F2 | 	cmp	local06, #119 wz
05d6c     94 02 90 AD |  if_e	jmp	#LR__0539
05d70     78 28 0E F2 | 	cmp	local06, #120 wz
05d74     98 02 90 AD |  if_e	jmp	#LR__0540
05d78     01 00 00 FF 
05d7c     04 28 0E F2 | 	cmp	local06, ##516 wz
05d80     98 02 90 AD |  if_e	jmp	#LR__0541
05d84     9C 02 90 FD | 	jmp	#LR__0542
05d88                 | LR__0484
05d88     A0 0C B0 FD | 	call	#_compile_fun_2p
05d8c     FD 26 02 F6 | 	mov	local05, result1
05d90     98 02 90 FD | 	jmp	#LR__0543
05d94                 | LR__0485
05d94     D4 0D B0 FD | 	call	#_compile_fun_4p
05d98     FD 26 02 F6 | 	mov	local05, result1
05d9c     8C 02 90 FD | 	jmp	#LR__0543
05da0                 | LR__0486
05da0     9C 2E B0 FD | 	call	#_expr
05da4                 | ' expr()
05da4                 | ' return 0
05da4     00 26 06 F6 | 	mov	local05, #0
05da8     80 02 90 FD | 	jmp	#LR__0543
05dac                 | LR__0487
05dac     F0 0C B0 FD | 	call	#_compile_fun_3p
05db0     FD 26 02 F6 | 	mov	local05, result1
05db4     74 02 90 FD | 	jmp	#LR__0543
05db8                 | LR__0488
05db8     84 2E B0 FD | 	call	#_expr
05dbc                 | ' expr()
05dbc                 | ' return 0
05dbc     00 26 06 F6 | 	mov	local05, #0
05dc0     68 02 90 FD | 	jmp	#LR__0543
05dc4                 | LR__0489
05dc4     78 2E B0 FD | 	call	#_expr
05dc8                 | ' expr()
05dc8                 | ' return 0
05dc8     00 26 06 F6 | 	mov	local05, #0
05dcc     5C 02 90 FD | 	jmp	#LR__0543
05dd0                 | LR__0490
05dd0     38 10 B0 FD | 	call	#_compile_fun_varp
05dd4     FD 2C 02 F6 | 	mov	local08, result1
05dd8     50 02 90 FD | 	jmp	#LR__0543
05ddc                 | LR__0491
05ddc     60 2E B0 FD | 	call	#_expr
05de0                 | ' expr()
05de0                 | ' return 0
05de0     00 26 06 F6 | 	mov	local05, #0
05de4     44 02 90 FD | 	jmp	#LR__0543
05de8                 | LR__0492
05de8     20 10 B0 FD | 	call	#_compile_fun_varp
05dec     FD 2C 02 F6 | 	mov	local08, result1
05df0     38 02 90 FD | 	jmp	#LR__0543
05df4                 | LR__0493
05df4     14 10 B0 FD | 	call	#_compile_fun_varp
05df8     FD 2C 02 F6 | 	mov	local08, result1
05dfc     2C 02 90 FD | 	jmp	#LR__0543
05e00                 | LR__0494
05e00     8C 0E B0 FD | 	call	#_compile_fun_5p
05e04     FD 26 02 F6 | 	mov	local05, result1
05e08     20 02 90 FD | 	jmp	#LR__0543
05e0c                 | LR__0495
05e0c     E8 19 B0 FD | 	call	#_compile_dim
05e10     D4 02 90 FD | 	jmp	#LR__0544
05e14                 | LR__0496
05e14     14 0C B0 FD | 	call	#_compile_fun_2p
05e18     10 02 90 FD | 	jmp	#LR__0543
05e1c                 | LR__0497
05e1c     0C 0C B0 FD | 	call	#_compile_fun_2p
05e20     FD 26 02 F6 | 	mov	local05, result1
05e24     04 02 90 FD | 	jmp	#LR__0543
05e28                 | LR__0498
05e28     A4 18 B0 FD | 	call	#_compile_else
05e2c     B8 02 90 FD | 	jmp	#LR__0544
05e30                 | LR__0499
05e30     01 24 16 F2 | 	cmp	local04, #1 wc
05e34     08 00 90 CD |  if_b	jmp	#LR__0500
05e38     A4 2A B0 FD | 	call	#_compile_goto
05e3c     A8 02 90 FD | 	jmp	#LR__0544
05e40                 | LR__0500
05e40     19 12 06 F6 | 	mov	arg01, #25
05e44     10 2D B1 FD | 	call	#_printerror
05e48     9C 02 90 FD | 	jmp	#LR__0544
05e4c                 | LR__0501
05e4c     50 0C B0 FD | 	call	#_compile_fun_3p
05e50     FD 26 02 F6 | 	mov	local05, result1
05e54     D4 01 90 FD | 	jmp	#LR__0543
05e58                 | LR__0502
05e58     10 0D B0 FD | 	call	#_compile_fun_4p
05e5c     FD 26 02 F6 | 	mov	local05, result1
05e60     C8 01 90 FD | 	jmp	#LR__0543
05e64                 | LR__0503
05e64     D8 2D B0 FD | 	call	#_expr
05e68                 | ' expr()
05e68                 | ' return 0
05e68     00 26 06 F6 | 	mov	local05, #0
05e6c     BC 01 90 FD | 	jmp	#LR__0543
05e70                 | LR__0504
05e70     94 20 B0 FD | 	call	#_compile_for
05e74     70 02 90 FD | 	jmp	#LR__0544
05e78                 | LR__0505
05e78     F0 0C B0 FD | 	call	#_compile_fun_4p
05e7c     FD 26 02 F6 | 	mov	local05, result1
05e80     A8 01 90 FD | 	jmp	#LR__0543
05e84                 | LR__0506
05e84     08 17 B0 FD | 	call	#_compile_if
05e88     5C 02 90 FD | 	jmp	#LR__0544
05e8c                 | LR__0507
05e8c     B0 2D B0 FD | 	call	#_expr
05e90                 | ' expr()
05e90                 | ' return 0
05e90     00 26 06 F6 | 	mov	local05, #0
05e94     94 01 90 FD | 	jmp	#LR__0543
05e98                 | LR__0508
05e98     A4 2D B0 FD | 	call	#_expr
05e9c                 | ' expr()
05e9c                 | ' return 0
05e9c     00 26 06 F6 | 	mov	local05, #0
05ea0     88 01 90 FD | 	jmp	#LR__0543
05ea4                 | LR__0509
05ea4     64 0F B0 FD | 	call	#_compile_fun_varp
05ea8     FD 2C 02 F6 | 	mov	local08, result1
05eac     7C 01 90 FD | 	jmp	#LR__0543
05eb0                 | LR__0510
05eb0     58 0F B0 FD | 	call	#_compile_fun_varp
05eb4     FD 2C 02 F6 | 	mov	local08, result1
05eb8     70 01 90 FD | 	jmp	#LR__0543
05ebc                 | LR__0511
05ebc     6C 0B B0 FD | 	call	#_compile_fun_2p
05ec0     FD 26 02 F6 | 	mov	local05, result1
05ec4     64 01 90 FD | 	jmp	#LR__0543
05ec8                 | LR__0512
05ec8     74 2D B0 FD | 	call	#_expr
05ecc                 | ' expr()
05ecc                 | ' return 0
05ecc     00 26 06 F6 | 	mov	local05, #0
05ed0     58 01 90 FD | 	jmp	#LR__0543
05ed4                 | LR__0513
05ed4     68 2D B0 FD | 	call	#_expr
05ed8                 | ' expr()
05ed8                 | ' return 0
05ed8     00 26 06 F6 | 	mov	local05, #0
05edc     4C 01 90 FD | 	jmp	#LR__0543
05ee0                 | LR__0514
05ee0     4C 28 B0 FD | 	call	#_compile_next
05ee4     00 02 90 FD | 	jmp	#LR__0544
05ee8                 | LR__0515
05ee8     54 2D B0 FD | 	call	#_expr
05eec                 | ' expr()
05eec                 | ' return 0
05eec     00 26 06 F6 | 	mov	local05, #0
05ef0     38 01 90 FD | 	jmp	#LR__0543
05ef4                 | LR__0516
05ef4     48 2D B0 FD | 	call	#_expr
05ef8                 | ' expr()
05ef8                 | ' return 0
05ef8     00 26 06 F6 | 	mov	local05, #0
05efc     2C 01 90 FD | 	jmp	#LR__0543
05f00                 | LR__0517
05f00     3C 2D B0 FD | 	call	#_expr
05f04                 | ' expr()
05f04                 | ' return 0
05f04     00 26 06 F6 | 	mov	local05, #0
05f08     20 01 90 FD | 	jmp	#LR__0543
05f0c                 | LR__0518
05f0c     30 2D B0 FD | 	call	#_expr
05f10                 | ' expr()
05f10                 | ' return 0
05f10     00 26 06 F6 | 	mov	local05, #0
05f14     14 01 90 FD | 	jmp	#LR__0543
05f18                 | LR__0519
05f18     50 0C B0 FD | 	call	#_compile_fun_4p
05f1c     FD 26 02 F6 | 	mov	local05, result1
05f20     08 01 90 FD | 	jmp	#LR__0543
05f24                 | LR__0520
05f24     18 2D B0 FD | 	call	#_expr
05f28                 | ' expr()
05f28                 | ' return 0
05f28     00 26 06 F6 | 	mov	local05, #0
05f2c     FC 00 90 FD | 	jmp	#LR__0543
05f30                 | LR__0521
05f30     F8 0A B0 FD | 	call	#_compile_fun_2p
05f34     FD 26 02 F6 | 	mov	local05, result1
05f38     F0 00 90 FD | 	jmp	#LR__0543
05f3c                 | LR__0522
05f3c     CC 0E B0 FD | 	call	#_compile_fun_varp
05f40     FD 2C 02 F6 | 	mov	local08, result1
05f44     E4 00 90 FD | 	jmp	#LR__0543
05f48                 | LR__0523
05f48     E0 0A B0 FD | 	call	#_compile_fun_2p
05f4c     FD 26 02 F6 | 	mov	local05, result1
05f50     D8 00 90 FD | 	jmp	#LR__0543
05f54                 | LR__0524
05f54     D4 0A B0 FD | 	call	#_compile_fun_2p
05f58     FD 26 02 F6 | 	mov	local05, result1
05f5c     CC 00 90 FD | 	jmp	#LR__0543
05f60                 | LR__0525
05f60     C8 0A B0 FD | 	call	#_compile_fun_2p
05f64     FD 26 02 F6 | 	mov	local05, result1
05f68     C0 00 90 FD | 	jmp	#LR__0543
05f6c                 | LR__0526
05f6c     48 0F B0 FD | 	call	#_compile_print
05f70     FD 26 02 F6 | 	mov	local05, result1
05f74     70 01 90 FD | 	jmp	#LR__0544
05f78                 | LR__0527
05f78     C4 2C B0 FD | 	call	#_expr
05f7c                 | ' expr()
05f7c                 | ' return 0
05f7c     AC 00 90 FD | 	jmp	#LR__0543
05f80                 | LR__0528
05f80     88 0E B0 FD | 	call	#_compile_fun_varp
05f84     FD 2C 02 F6 | 	mov	local08, result1
05f88     A0 00 90 FD | 	jmp	#LR__0543
05f8c                 | LR__0529
05f8c     9C 0A B0 FD | 	call	#_compile_fun_2p
05f90     FD 26 02 F6 | 	mov	local05, result1
05f94     94 00 90 FD | 	jmp	#LR__0543
05f98                 | LR__0530
05f98     90 0A B0 FD | 	call	#_compile_fun_2p
05f9c     FD 26 02 F6 | 	mov	local05, result1
05fa0     88 00 90 FD | 	jmp	#LR__0543
05fa4                 | LR__0531
05fa4     84 0A B0 FD | 	call	#_compile_fun_2p
05fa8     FD 26 02 F6 | 	mov	local05, result1
05fac     7C 00 90 FD | 	jmp	#LR__0543
05fb0                 | LR__0532
05fb0     78 0A B0 FD | 	call	#_compile_fun_2p
05fb4     FD 26 02 F6 | 	mov	local05, result1
05fb8     70 00 90 FD | 	jmp	#LR__0543
05fbc                 | LR__0533
05fbc     6C 0A B0 FD | 	call	#_compile_fun_2p
05fc0     FD 26 02 F6 | 	mov	local05, result1
05fc4     64 00 90 FD | 	jmp	#LR__0543
05fc8                 | LR__0534
05fc8     60 0A B0 FD | 	call	#_compile_fun_2p
05fcc     FD 26 02 F6 | 	mov	local05, result1
05fd0     58 00 90 FD | 	jmp	#LR__0543
05fd4                 | LR__0535
05fd4     54 0A B0 FD | 	call	#_compile_fun_2p
05fd8     FD 26 02 F6 | 	mov	local05, result1
05fdc     4C 00 90 FD | 	jmp	#LR__0543
05fe0                 | LR__0536
05fe0     BC 0A B0 FD | 	call	#_compile_fun_3p
05fe4     FD 26 02 F6 | 	mov	local05, result1
05fe8     40 00 90 FD | 	jmp	#LR__0543
05fec                 | LR__0537
05fec     50 2C B0 FD | 	call	#_expr
05ff0                 | ' expr()
05ff0                 | ' return 0
05ff0     00 26 06 F6 | 	mov	local05, #0
05ff4     34 00 90 FD | 	jmp	#LR__0543
05ff8                 | LR__0538
05ff8     30 0A B0 FD | 	call	#_compile_fun_2p
05ffc     FD 26 02 F6 | 	mov	local05, result1
06000     28 00 90 FD | 	jmp	#LR__0543
06004                 | LR__0539
06004     24 0A B0 FD | 	call	#_compile_fun_2p
06008     FD 26 02 F6 | 	mov	local05, result1
0600c     1C 00 90 FD | 	jmp	#LR__0543
06010                 | LR__0540
06010     18 0A B0 FD | 	call	#_compile_fun_2p
06014     FD 26 02 F6 | 	mov	local05, result1
06018     10 00 90 FD | 	jmp	#LR__0543
0601c                 | LR__0541
0601c     E8 01 B0 FD | 	call	#_compile_array_assign
06020     C4 00 90 FD | 	jmp	#LR__0544
06024                 | LR__0542
06024     48 09 B0 FD | 	call	#_compile_unknown
06028     BC 00 90 FD | 	jmp	#LR__0544
0602c                 | LR__0543
0602c     14 23 02 F6 | 	mov	local03, local06
06030     16 1F 02 F6 | 	mov	local01, local08
06034     0F 2B 02 F6 | 	mov	local07, local01
06038     10 2F 02 F6 | 	mov	local09, local02
0603c     11 29 02 F6 | 	mov	local06, local03
06040     6A 00 00 FF 
06044     60 E4 05 F1 | 	add	objptr, ##54368
06048     F2 1E 02 FB | 	rdlong	local01, objptr
0604c     0F 2D 02 F6 | 	mov	local08, local01
06050     01 2C 66 F0 | 	shl	local08, #1
06054     0F 2D 02 F1 | 	add	local08, local01
06058     02 2C 66 F0 | 	shl	local08, #2
0605c     03 00 00 FF 
06060     00 E4 85 F1 | 	sub	objptr, ##1536
06064     F2 2C 02 F1 | 	add	local08, objptr
06068     16 2B 62 FC | 	wrlong	local07, local08
0606c     03 00 00 FF 
06070     00 E4 05 F1 | 	add	objptr, ##1536
06074     F2 1E 02 FB | 	rdlong	local01, objptr
06078     0F 2D 02 F6 | 	mov	local08, local01
0607c     01 2C 66 F0 | 	shl	local08, #1
06080     0F 2D 02 F1 | 	add	local08, local01
06084     02 2C 66 F0 | 	shl	local08, #2
06088     03 00 00 FF 
0608c     00 E4 85 F1 | 	sub	objptr, ##1536
06090     F2 2C 02 F1 | 	add	local08, objptr
06094     04 2C 06 F1 | 	add	local08, #4
06098     16 2F 62 FC | 	wrlong	local09, local08
0609c     03 00 00 FF 
060a0     00 E4 05 F1 | 	add	objptr, ##1536
060a4     F2 1E 02 FB | 	rdlong	local01, objptr
060a8     0F 2D 02 F6 | 	mov	local08, local01
060ac     01 2C 66 F0 | 	shl	local08, #1
060b0     0F 2D 02 F1 | 	add	local08, local01
060b4     02 2C 66 F0 | 	shl	local08, #2
060b8     03 00 00 FF 
060bc     00 E4 85 F1 | 	sub	objptr, ##1536
060c0     F2 2C 02 F1 | 	add	local08, objptr
060c4     08 2C 06 F1 | 	add	local08, #8
060c8     16 29 62 FC | 	wrlong	local06, local08
060cc     03 00 00 FF 
060d0     00 E4 05 F1 | 	add	objptr, ##1536
060d4     F2 2A 02 FB | 	rdlong	local07, objptr
060d8     01 2A 06 F1 | 	add	local07, #1
060dc     F2 2A 62 FC | 	wrlong	local07, objptr
060e0     6A 00 00 FF 
060e4     60 E4 85 F1 | 	sub	objptr, ##54368
060e8                 | LR__0544
060e8                 | ' 
060e8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
060e8                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
060e8     00 24 0E F2 | 	cmp	local04, #0 wz
060ec     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
060f0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
060f4     38 00 90 5D |  if_ne	jmp	#LR__0545
060f8     6A 00 00 FF 
060fc     60 E4 05 F1 | 	add	objptr, ##54368
06100     F2 2C 02 FB | 	rdlong	local08, objptr
06104     16 1F 02 F6 | 	mov	local01, local08
06108     01 1E 66 F0 | 	shl	local01, #1
0610c     16 1F 02 F1 | 	add	local01, local08
06110     02 1E 66 F0 | 	shl	local01, #2
06114     03 00 00 FF 
06118     00 E4 85 F1 | 	sub	objptr, ##1536
0611c     F2 1E 02 F1 | 	add	local01, objptr
06120     08 1E 06 F1 | 	add	local01, #8
06124     0F FD 6B FC | 	wrlong	#510, local01
06128     67 00 00 FF 
0612c     60 E4 85 F1 | 	sub	objptr, ##52832
06130                 | LR__0545
06130                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
06130     6A 00 00 FF 
06134     60 E4 05 F1 | 	add	objptr, ##54368
06138     F2 1E 02 FB | 	rdlong	local01, objptr
0613c     6A 00 00 FF 
06140     60 E4 85 F1 | 	sub	objptr, ##54368
06144     97 58 48 FB | 	callpa	#(@LR__0548-@LR__0546)>>2,fcache_load_ptr_
06148                 | LR__0546
06148     0F 2D 02 F6 | 	mov	local08, local01
0614c     01 2C 66 F0 | 	shl	local08, #1
06150     0F 2D 02 F1 | 	add	local08, local01
06154     02 2C 66 F0 | 	shl	local08, #2
06158     67 00 00 FF 
0615c     60 E4 05 F1 | 	add	objptr, ##52832
06160     F2 2C 02 F1 | 	add	local08, objptr
06164     08 2C 06 F1 | 	add	local08, #8
06168     16 2D 02 FB | 	rdlong	local08, local08
0616c     9B 2C 0E F2 | 	cmp	local08, #155 wz
06170     67 00 00 FF 
06174     60 E4 85 F1 | 	sub	objptr, ##52832
06178     70 00 90 5D |  if_ne	jmp	#LR__0547
0617c     0F 2D 02 F6 | 	mov	local08, local01
06180     01 2C 86 F1 | 	sub	local08, #1
06184     16 2F 02 F6 | 	mov	local09, local08
06188     01 2E 66 F0 | 	shl	local09, #1
0618c     16 2F 02 F1 | 	add	local09, local08
06190     02 2E 66 F0 | 	shl	local09, #2
06194     67 00 00 FF 
06198     60 E4 05 F1 | 	add	objptr, ##52832
0619c     F2 2E 02 F1 | 	add	local09, objptr
061a0     08 2E 06 F1 | 	add	local09, #8
061a4     17 2D 02 FB | 	rdlong	local08, local09
061a8     11 2C 0E F2 | 	cmp	local08, #17 wz
061ac     67 00 00 FF 
061b0     60 E4 85 F1 | 	sub	objptr, ##52832
061b4     34 00 90 5D |  if_ne	jmp	#LR__0547
061b8     0F 2F 02 F6 | 	mov	local09, local01
061bc     01 2E 86 F1 | 	sub	local09, #1
061c0     17 2D 02 F6 | 	mov	local08, local09
061c4     01 2C 66 F0 | 	shl	local08, #1
061c8     17 2D 02 F1 | 	add	local08, local09
061cc     02 2C 66 F0 | 	shl	local08, #2
061d0     67 00 00 FF 
061d4     60 E4 05 F1 | 	add	objptr, ##52832
061d8     F2 2C 02 F1 | 	add	local08, objptr
061dc     08 2C 06 F1 | 	add	local08, #8
061e0     16 25 68 FC | 	wrlong	#18, local08
061e4     67 00 00 FF 
061e8     60 E4 85 F1 | 	sub	objptr, ##52832
061ec                 | LR__0547
061ec     01 1E 86 F1 | 	sub	local01, #1
061f0     01 1E 56 F2 | 	cmps	local01, #1 wc
061f4     50 FF 9F 3D |  if_ae	jmp	#LR__0546
061f8                 | LR__0548
061f8                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
061f8                 | ' return err
061f8     13 FB 01 F6 | 	mov	result1, local05
061fc     A7 F0 03 F6 | 	mov	ptra, fp
06200     B2 00 A0 FD | 	call	#popregs_
06204                 | _compile_immediate_ret
06204     2D 00 64 FD | 	ret
06208                 | 
06208                 | ' 
06208                 | ' sub compile_array_assign
06208                 | _compile_array_assign
06208     0A 4A 05 F6 | 	mov	COUNT_, #10
0620c     A8 00 A0 FD | 	call	#pushregs_
06210     00 24 06 F6 | 	mov	local04, #0
06214     57 00 00 FF 
06218     28 E4 05 F1 | 	add	objptr, ##44584
0621c     F2 26 02 FB | 	rdlong	local05, objptr
06220     13 FB 01 F6 | 	mov	result1, local05
06224     01 FA 85 F1 | 	sub	result1, #1
06228     03 FA 65 F0 | 	shl	result1, #3
0622c     02 00 00 FF 
06230     38 E4 85 F1 | 	sub	objptr, ##1080
06234     F2 FA 01 F1 | 	add	result1, objptr
06238     FD 28 02 FB | 	rdlong	local06, result1
0623c                 | ' numpar=0
0623c                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
0623c                 | ' ' todo here: recognize params and t1.result.twowords=numpar
0623c                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
0623c                 | ' if lparts(ct).token=token_lpar then
0623c     03 26 66 F0 | 	shl	local05, #3
06240     F2 26 02 F1 | 	add	local05, objptr
06244     04 26 06 F1 | 	add	local05, #4
06248     13 27 02 FB | 	rdlong	local05, local05
0624c     15 26 0E F2 | 	cmp	local05, #21 wz
06250     54 00 00 FF 
06254     F0 E5 85 F1 | 	sub	objptr, ##43504
06258     D4 01 90 5D |  if_ne	jmp	#LR__0554
0625c     57 00 00 FF 
06260     28 E4 05 F1 | 	add	objptr, ##44584
06264     F2 2A 02 FB | 	rdlong	local07, objptr
06268     01 2A 06 F1 | 	add	local07, #1
0626c     F2 2A 62 FC | 	wrlong	local07, objptr
06270     57 00 00 FF 
06274     28 E4 85 F1 | 	sub	objptr, ##44584
06278                 | '   ct+=1 											' omit this lpar, this is for expr list
06278                 | '   do
06278                 | LR__0550
06278     C4 29 B0 FD | 	call	#_expr
0627c     57 00 00 FF 
06280     28 E4 05 F1 | 	add	objptr, ##44584
06284     F2 26 02 FB | 	rdlong	local05, objptr
06288     01 26 06 F1 | 	add	local05, #1
0628c     F2 26 62 FC | 	wrlong	local05, objptr
06290     01 24 06 F1 | 	add	local04, #1
06294     01 26 86 F1 | 	sub	local05, #1
06298     03 26 66 F0 | 	shl	local05, #3
0629c     02 00 00 FF 
062a0     38 E4 85 F1 | 	sub	objptr, ##1080
062a4     F2 26 02 F1 | 	add	local05, objptr
062a8     04 26 06 F1 | 	add	local05, #4
062ac     13 2B 02 FB | 	rdlong	local07, local05
062b0     14 2A 0E F2 | 	cmp	local07, #20 wz
062b4     54 00 00 FF 
062b8     F0 E5 85 F1 | 	sub	objptr, ##43504
062bc     34 00 90 AD |  if_e	jmp	#LR__0551
062c0     57 00 00 FF 
062c4     28 E4 05 F1 | 	add	objptr, ##44584
062c8     F2 2A 02 FB | 	rdlong	local07, objptr
062cc     03 2A 66 F0 | 	shl	local07, #3
062d0     02 00 00 FF 
062d4     38 E4 85 F1 | 	sub	objptr, ##1080
062d8     F2 2A 02 F1 | 	add	local07, objptr
062dc     04 2A 06 F1 | 	add	local07, #4
062e0     15 2B 02 FB | 	rdlong	local07, local07
062e4     FE 2B 0E F2 | 	cmp	local07, #510 wz
062e8     54 00 00 FF 
062ec     F0 E5 85 F1 | 	sub	objptr, ##43504
062f0     84 FF 9F 5D |  if_ne	jmp	#LR__0550
062f4                 | LR__0551
062f4     57 00 00 FF 
062f8     28 E4 05 F1 | 	add	objptr, ##44584
062fc     F2 2A 02 FB | 	rdlong	local07, objptr
06300     01 2A 06 F1 | 	add	local07, #1
06304     F2 2A 62 FC | 	wrlong	local07, objptr
06308     57 00 00 FF 
0630c     28 E4 85 F1 | 	sub	objptr, ##44584
06310     2C 29 B0 FD | 	call	#_expr
06314     01 2C 66 F6 | 	neg	local08, #1
06318     00 2E 06 F6 | 	mov	local09, #0
0631c                 | ' '   print "in array_assign, rpar found, numpar=",numpar
0631c                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
0631c                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
0631c                 | ' ct+=1 : expr()
0631c                 | ' ' now find the vae
0631c                 | ' 
0631c                 | ' j=-1 : i=0 : do : 
0631c                 | LR__0552
0631c                 | '   if variables(i).name=varname$ then j=i: exit loop
0631c     17 27 02 F6 | 	mov	local05, local09
06320     04 26 66 F0 | 	shl	local05, #4
06324     34 00 00 FF 
06328     EC E5 05 F1 | 	add	objptr, ##27116
0632c     F2 26 02 F1 | 	add	local05, objptr
06330     13 13 02 FB | 	rdlong	arg01, local05
06334     14 15 02 F6 | 	mov	arg02, local06
06338     34 00 00 FF 
0633c     EC E5 85 F1 | 	sub	objptr, ##27116
06340     C0 5F B1 FD | 	call	#__system___string_cmp
06344     00 FA 0D F2 | 	cmp	result1, #0 wz
06348     17 2D 02 A6 |  if_e	mov	local08, local09
0634c     20 00 90 AD |  if_e	jmp	#LR__0553
06350     01 2E 06 F1 | 	add	local09, #1
06354     54 00 00 FF 
06358     EC E5 05 F1 | 	add	objptr, ##43500
0635c     F2 2A 02 FB | 	rdlong	local07, objptr
06360     54 00 00 FF 
06364     EC E5 85 F1 | 	sub	objptr, ##43500
06368     15 2F 5A F2 | 	cmps	local09, local07 wcz
0636c     AC FF 9F ED |  if_be	jmp	#LR__0552
06370                 | LR__0553
06370     16 1F 02 F6 | 	mov	local01, local08
06374     12 21 02 F6 | 	mov	local02, local04
06378     17 22 06 F6 | 	mov	local03, #23
0637c     0F 2B 02 F6 | 	mov	local07, local01
06380     10 31 02 F6 | 	mov	local10, local02
06384     11 2D 02 F6 | 	mov	local08, local03
06388     6A 00 00 FF 
0638c     60 E4 05 F1 | 	add	objptr, ##54368
06390     F2 1E 02 FB | 	rdlong	local01, objptr
06394     0F 2F 02 F6 | 	mov	local09, local01
06398     01 2E 66 F0 | 	shl	local09, #1
0639c     0F 2F 02 F1 | 	add	local09, local01
063a0     02 2E 66 F0 | 	shl	local09, #2
063a4     03 00 00 FF 
063a8     00 E4 85 F1 | 	sub	objptr, ##1536
063ac     F2 2E 02 F1 | 	add	local09, objptr
063b0     17 2B 62 FC | 	wrlong	local07, local09
063b4     03 00 00 FF 
063b8     00 E4 05 F1 | 	add	objptr, ##1536
063bc     F2 1E 02 FB | 	rdlong	local01, objptr
063c0     0F 2F 02 F6 | 	mov	local09, local01
063c4     01 2E 66 F0 | 	shl	local09, #1
063c8     0F 2F 02 F1 | 	add	local09, local01
063cc     02 2E 66 F0 | 	shl	local09, #2
063d0     03 00 00 FF 
063d4     00 E4 85 F1 | 	sub	objptr, ##1536
063d8     F2 2E 02 F1 | 	add	local09, objptr
063dc     04 2E 06 F1 | 	add	local09, #4
063e0     17 31 62 FC | 	wrlong	local10, local09
063e4     03 00 00 FF 
063e8     00 E4 05 F1 | 	add	objptr, ##1536
063ec     F2 30 02 FB | 	rdlong	local10, objptr
063f0     18 1F 02 F6 | 	mov	local01, local10
063f4     01 1E 66 F0 | 	shl	local01, #1
063f8     18 1F 02 F1 | 	add	local01, local10
063fc     02 1E 66 F0 | 	shl	local01, #2
06400     03 00 00 FF 
06404     00 E4 85 F1 | 	sub	objptr, ##1536
06408     F2 1E 02 F1 | 	add	local01, objptr
0640c     08 1E 06 F1 | 	add	local01, #8
06410     0F 2D 62 FC | 	wrlong	local08, local01
06414     03 00 00 FF 
06418     00 E4 05 F1 | 	add	objptr, ##1536
0641c     F2 2A 02 FB | 	rdlong	local07, objptr
06420     01 2A 06 F1 | 	add	local07, #1
06424     F2 2A 62 FC | 	wrlong	local07, objptr
06428     6A 00 00 FF 
0642c     60 E4 85 F1 | 	sub	objptr, ##54368
06430                 | LR__0554
06430     A7 F0 03 F6 | 	mov	ptra, fp
06434     B2 00 A0 FD | 	call	#popregs_
06438                 | _compile_array_assign_ret
06438     2D 00 64 FD | 	ret
0643c                 | 
0643c                 | ' 
0643c                 | ' 
0643c                 | ' sub compile_immediate_assign(linetype as ulong)
0643c                 | _compile_immediate_assign
0643c     09 4A 05 F6 | 	mov	COUNT_, #9
06440     A8 00 A0 FD | 	call	#pushregs_
06444     09 25 0A F6 | 	mov	local04, arg01 wz
06448     FF 22 06 F6 | 	mov	local03, #255
0644c     01 26 66 F6 | 	neg	local05, #1
06450                 | ' 
06450                 | ' t1.result_type=result_error : t1.result.uresult=0
06450                 | ' i=-1: j=-1
06450                 | ' 
06450                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
06450     2C 00 90 5D |  if_ne	jmp	#LR__0560
06454     54 00 00 FF 
06458     F0 E5 05 F1 | 	add	objptr, ##43504
0645c     F2 28 02 FB | 	rdlong	local06, objptr
06460     02 00 00 FF 
06464     38 E4 05 F1 | 	add	objptr, ##1080
06468     F2 04 68 FC | 	wrlong	#2, objptr
0646c     13 00 00 FF 
06470     38 E4 05 F1 | 	add	objptr, ##9784
06474     F2 00 68 FC | 	wrlong	#0, objptr
06478     6A 00 00 FF 
0647c     60 E4 85 F1 | 	sub	objptr, ##54368
06480                 | LR__0560
06480                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
06480     02 24 0E F2 | 	cmp	local04, #2 wz
06484     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06488     54 00 00 AF 
0648c     F0 E5 05 A1 |  if_e	add	objptr, ##43504
06490     F2 28 02 AB |  if_e	rdlong	local06, objptr
06494     02 00 00 AF 
06498     38 E4 05 A1 |  if_e	add	objptr, ##1080
0649c     F2 04 68 AC |  if_e	wrlong	#2, objptr
064a0     57 00 00 AF 
064a4     28 E4 85 A1 |  if_e	sub	objptr, ##44584
064a8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
064a8     04 24 0E F2 | 	cmp	local04, #4 wz
064ac     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
064b0     2C 00 90 5D |  if_ne	jmp	#LR__0561
064b4     54 00 00 FF 
064b8     F8 E5 05 F1 | 	add	objptr, ##43512
064bc     F2 28 02 FB | 	rdlong	local06, objptr
064c0     02 00 00 FF 
064c4     30 E4 05 F1 | 	add	objptr, ##1072
064c8     F2 06 68 FC | 	wrlong	#3, objptr
064cc     13 00 00 FF 
064d0     38 E4 05 F1 | 	add	objptr, ##9784
064d4     F2 04 68 FC | 	wrlong	#2, objptr
064d8     6A 00 00 FF 
064dc     60 E4 85 F1 | 	sub	objptr, ##54368
064e0                 | LR__0561
064e0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
064e0     05 24 0E F2 | 	cmp	local04, #5 wz
064e4     3C 00 90 5D |  if_ne	jmp	#LR__0562
064e8     57 00 00 FF 
064ec     28 E4 05 F1 | 	add	objptr, ##44584
064f0     F2 FA 01 FB | 	rdlong	result1, objptr
064f4     FD 28 02 F6 | 	mov	local06, result1
064f8     03 28 66 F0 | 	shl	local06, #3
064fc     02 00 00 FF 
06500     38 E4 85 F1 | 	sub	objptr, ##1080
06504     F2 28 02 F1 | 	add	local06, objptr
06508     14 29 02 FB | 	rdlong	local06, local06
0650c     02 FA 05 F1 | 	add	result1, #2
06510     02 00 00 FF 
06514     38 E4 05 F1 | 	add	objptr, ##1080
06518     F2 FA 61 FC | 	wrlong	result1, objptr
0651c     57 00 00 FF 
06520     28 E4 85 F1 | 	sub	objptr, ##44584
06524                 | LR__0562
06524     14 13 02 F6 | 	mov	arg01, local06
06528     01 14 06 F6 | 	mov	arg02, #1
0652c     78 7E B1 FD | 	call	#__system__Right_S
06530     0C 27 B0 FD | 	call	#_expr
06534                 | '  
06534                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06534                 | ' 
06534                 | ' suffix2$=right$(varname2$,1)
06534                 | ' expr()
06534                 | ' 
06534                 | ' 
06534                 | ' if varnum>0 then
06534     54 00 00 FF 
06538     EC E5 05 F1 | 	add	objptr, ##43500
0653c     F2 2A 02 FB | 	rdlong	local07, objptr
06540     54 00 00 FF 
06544     EC E5 85 F1 | 	sub	objptr, ##43500
06548     01 2A 56 F2 | 	cmps	local07, #1 wc
0654c     58 00 90 CD |  if_b	jmp	#LR__0565
06550                 | '   for i=0 to varnum-1
06550     00 2C 06 F6 | 	mov	local08, #0
06554     54 00 00 FF 
06558     EC E5 05 F1 | 	add	objptr, ##43500
0655c     F2 2E 02 FB | 	rdlong	local09, objptr
06560     54 00 00 FF 
06564     EC E5 85 F1 | 	sub	objptr, ##43500
06568                 | LR__0563
06568     17 2D 52 F2 | 	cmps	local08, local09 wc
0656c     38 00 90 3D |  if_ae	jmp	#LR__0564
06570                 | '     if variables(i).name=varname2$ then j=i : exit
06570     16 2B 02 F6 | 	mov	local07, local08
06574     04 2A 66 F0 | 	shl	local07, #4
06578     34 00 00 FF 
0657c     EC E5 05 F1 | 	add	objptr, ##27116
06580     F2 2A 02 F1 | 	add	local07, objptr
06584     15 13 02 FB | 	rdlong	arg01, local07
06588     14 15 02 F6 | 	mov	arg02, local06
0658c     34 00 00 FF 
06590     EC E5 85 F1 | 	sub	objptr, ##27116
06594     6C 5D B1 FD | 	call	#__system___string_cmp
06598     00 FA 0D F2 | 	cmp	result1, #0 wz
0659c     16 27 02 A6 |  if_e	mov	local05, local08
065a0     01 2C 06 51 |  if_ne	add	local08, #1
065a4     C0 FF 9F 5D |  if_ne	jmp	#LR__0563
065a8                 | LR__0564
065a8                 | LR__0565
065a8                 | ' if  j=-1 andalso varnum<maxvars then   
065a8     FF FF 7F FF 
065ac     FF 27 0E F2 | 	cmp	local05, ##-1 wz
065b0     60 00 90 5D |  if_ne	jmp	#LR__0566
065b4     54 00 00 FF 
065b8     EC E5 05 F1 | 	add	objptr, ##43500
065bc     F2 2A 02 FB | 	rdlong	local07, objptr
065c0     54 00 00 FF 
065c4     EC E5 85 F1 | 	sub	objptr, ##43500
065c8     01 00 00 FF 
065cc     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
065d0     40 00 90 3D |  if_ae	jmp	#LR__0566
065d4     54 00 00 FF 
065d8     EC E5 05 F1 | 	add	objptr, ##43500
065dc     F2 2E 02 FB | 	rdlong	local09, objptr
065e0     04 2E 66 F0 | 	shl	local09, #4
065e4     20 00 00 FF 
065e8     00 E4 85 F1 | 	sub	objptr, ##16384
065ec     F2 2E 02 F1 | 	add	local09, objptr
065f0     17 29 62 FC | 	wrlong	local06, local09
065f4     20 00 00 FF 
065f8     00 E4 05 F1 | 	add	objptr, ##16384
065fc     F2 2A 02 FB | 	rdlong	local07, objptr
06600     15 27 02 F6 | 	mov	local05, local07
06604     01 2A 06 F1 | 	add	local07, #1
06608     F2 2A 62 FC | 	wrlong	local07, objptr
0660c     54 00 00 FF 
06610     EC E5 85 F1 | 	sub	objptr, ##43500
06614                 | LR__0566
06614     13 1F 02 F6 | 	mov	local01, local05
06618     17 22 06 F6 | 	mov	local03, #23
0661c     0F 2B 02 F6 | 	mov	local07, local01
06620     10 2F 02 F6 | 	mov	local09, local02
06624     11 1F 02 F6 | 	mov	local01, local03
06628     6A 00 00 FF 
0662c     60 E4 05 F1 | 	add	objptr, ##54368
06630     F2 2C 02 FB | 	rdlong	local08, objptr
06634     16 29 02 F6 | 	mov	local06, local08
06638     01 28 66 F0 | 	shl	local06, #1
0663c     16 29 02 F1 | 	add	local06, local08
06640     02 28 66 F0 | 	shl	local06, #2
06644     03 00 00 FF 
06648     00 E4 85 F1 | 	sub	objptr, ##1536
0664c     F2 28 02 F1 | 	add	local06, objptr
06650     14 2B 62 FC | 	wrlong	local07, local06
06654     03 00 00 FF 
06658     00 E4 05 F1 | 	add	objptr, ##1536
0665c     F2 2C 02 FB | 	rdlong	local08, objptr
06660     16 2B 02 F6 | 	mov	local07, local08
06664     01 2A 66 F0 | 	shl	local07, #1
06668     16 2B 02 F1 | 	add	local07, local08
0666c     02 2A 66 F0 | 	shl	local07, #2
06670     03 00 00 FF 
06674     00 E4 85 F1 | 	sub	objptr, ##1536
06678     F2 2A 02 F1 | 	add	local07, objptr
0667c     04 2A 06 F1 | 	add	local07, #4
06680     15 2F 62 FC | 	wrlong	local09, local07
06684     03 00 00 FF 
06688     00 E4 05 F1 | 	add	objptr, ##1536
0668c     F2 2E 02 FB | 	rdlong	local09, objptr
06690     17 2D 02 F6 | 	mov	local08, local09
06694     01 2C 66 F0 | 	shl	local08, #1
06698     17 2D 02 F1 | 	add	local08, local09
0669c     02 2C 66 F0 | 	shl	local08, #2
066a0     03 00 00 FF 
066a4     00 E4 85 F1 | 	sub	objptr, ##1536
066a8     F2 2C 02 F1 | 	add	local08, objptr
066ac     08 2C 06 F1 | 	add	local08, #8
066b0     16 1F 62 FC | 	wrlong	local01, local08
066b4     03 00 00 FF 
066b8     00 E4 05 F1 | 	add	objptr, ##1536
066bc     F2 2A 02 FB | 	rdlong	local07, objptr
066c0     01 2A 06 F1 | 	add	local07, #1
066c4     F2 2A 62 FC | 	wrlong	local07, objptr
066c8     6A 00 00 FF 
066cc     60 E4 85 F1 | 	sub	objptr, ##54368
066d0                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' 
066d0                 | ' compiledline(lineptr)=t1:  lineptr+=1 
066d0                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
066d0     00 24 0E F2 | 	cmp	local04, #0 wz
066d4     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066d8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
066dc     38 00 90 5D |  if_ne	jmp	#LR__0567
066e0     6A 00 00 FF 
066e4     60 E4 05 F1 | 	add	objptr, ##54368
066e8     F2 1E 02 FB | 	rdlong	local01, objptr
066ec     0F 2F 02 F6 | 	mov	local09, local01
066f0     01 2E 66 F0 | 	shl	local09, #1
066f4     0F 2F 02 F1 | 	add	local09, local01
066f8     02 2E 66 F0 | 	shl	local09, #2
066fc     03 00 00 FF 
06700     00 E4 85 F1 | 	sub	objptr, ##1536
06704     F2 2E 02 F1 | 	add	local09, objptr
06708     08 2E 06 F1 | 	add	local09, #8
0670c     17 FD 6B FC | 	wrlong	#510, local09
06710     67 00 00 FF 
06714     60 E4 85 F1 | 	sub	objptr, ##52832
06718                 | LR__0567
06718     A7 F0 03 F6 | 	mov	ptra, fp
0671c     B2 00 A0 FD | 	call	#popregs_
06720                 | _compile_immediate_assign_ret
06720     2D 00 64 FD | 	ret
06724                 | 
06724                 | ' 
06724                 | ' ' ------------------ compile the line that is calling a command 
06724                 | ' 
06724                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06724                 | _compile
06724     04 4A 05 F6 | 	mov	COUNT_, #4
06728     A8 00 A0 FD | 	call	#pushregs_
0672c     09 1F 0A F6 | 	mov	local01, arg01 wz
06730     0A 21 02 F6 | 	mov	local02, arg02
06734     0B 23 02 F6 | 	mov	local03, arg03
06738                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06738                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06738                 | '  
06738                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06738                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06738     0C 00 90 5D |  if_ne	jmp	#LR__0570
0673c     00 12 06 F6 | 	mov	arg01, #0
06740     30 F3 BF FD | 	call	#_compile_immediate
06744     A0 00 90 FD | 	jmp	#LR__0577
06748                 | LR__0570
06748     67 00 00 FF 
0674c     60 E4 05 F1 | 	add	objptr, ##52832
06750     F2 1E 62 FC | 	wrlong	local01, objptr
06754     04 E4 05 F1 | 	add	objptr, #4
06758     F2 20 62 FC | 	wrlong	local02, objptr
0675c     67 00 00 FF 
06760     64 E4 85 F1 | 	sub	objptr, ##52836
06764     11 13 02 F6 | 	mov	arg01, local03
06768     01 12 06 F1 | 	add	arg01, #1
0676c     04 F3 BF FD | 	call	#_compile_immediate
06770     FD 24 0A F6 | 	mov	local04, result1 wz
06774                 | ' 
06774                 | ' ucompiledline(0)=alinemajor
06774                 | ' ucompiledline(1)=alineminor
06774                 | ' 
06774                 | ' 
06774                 | ' ' cont: 0: this is the first part of the line that will continue
06774                 | ' ' 1 - this is the continuation of the line
06774                 | ' ' 2 - this is the last continued line
06774                 | ' ' 3 - this is the ome and only part
06774                 | ' 
06774                 | ' err=compile_immediate(cont+1) 
06774                 | ' if err=0 then
06774     6C 00 90 5D |  if_ne	jmp	#LR__0576
06778                 | '   if cont=3 orelse cont=2 then 
06778     03 22 0E F2 | 	cmp	local03, #3 wz
0677c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06780     60 00 90 5D |  if_ne	jmp	#LR__0575
06784                 | '     if alinemajor >lastline then 
06784     6A 00 00 FF 
06788     6C E4 05 F1 | 	add	objptr, ##54380
0678c     F2 16 02 FB | 	rdlong	arg03, objptr
06790     6A 00 00 FF 
06794     6C E4 85 F1 | 	sub	objptr, ##54380
06798     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0679c     0C 00 90 ED |  if_be	jmp	#LR__0571
067a0     0F 13 02 F6 | 	mov	arg01, local01
067a4     0C F2 BF FD | 	call	#_add_line_at_end
067a8     38 00 90 FD | 	jmp	#LR__0574
067ac                 | LR__0571
067ac     0F 13 02 F6 | 	mov	arg01, local01
067b0     3C EB BF FD | 	call	#_deleteline
067b4                 | '       deleteline(alinemajor)  
067b4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
067b4     6A 00 00 FF 
067b8     6C E4 05 F1 | 	add	objptr, ##54380
067bc     F2 16 02 FB | 	rdlong	arg03, objptr
067c0     6A 00 00 FF 
067c4     6C E4 85 F1 | 	sub	objptr, ##54380
067c8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
067cc     0C 00 90 ED |  if_be	jmp	#LR__0572
067d0     0F 13 02 F6 | 	mov	arg01, local01
067d4     DC F1 BF FD | 	call	#_add_line_at_end
067d8     08 00 90 FD | 	jmp	#LR__0573
067dc                 | LR__0572
067dc     0F 13 02 F6 | 	mov	arg01, local01
067e0     B4 EF BF FD | 	call	#_insertline
067e4                 | LR__0573
067e4                 | LR__0574
067e4                 | LR__0575
067e4                 | LR__0576
067e4                 | ' return err
067e4     12 FB 01 F6 | 	mov	result1, local04
067e8                 | LR__0577
067e8     A7 F0 03 F6 | 	mov	ptra, fp
067ec     B2 00 A0 FD | 	call	#popregs_
067f0                 | _compile_ret
067f0     2D 00 64 FD | 	ret
067f4                 | 
067f4                 | ' 
067f4                 | ' ' ------------------ compile the line that is assigning to a variable
067f4                 | ' 
067f4                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
067f4                 | _compile_assign
067f4     03 4A 05 F6 | 	mov	COUNT_, #3
067f8     A8 00 A0 FD | 	call	#pushregs_
067fc     09 1F 0A F6 | 	mov	local01, arg01 wz
06800     0A 21 02 F6 | 	mov	local02, arg02
06804     0B 23 02 F6 | 	mov	local03, arg03
06808                 | ' 
06808                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06808                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06808     0C 00 90 5D |  if_ne	jmp	#LR__0580
0680c     00 12 06 F6 | 	mov	arg01, #0
06810     28 FC BF FD | 	call	#_compile_immediate_assign
06814     94 00 90 FD | 	jmp	#LR__0586
06818                 | LR__0580
06818     67 00 00 FF 
0681c     60 E4 05 F1 | 	add	objptr, ##52832
06820     F2 1E 62 FC | 	wrlong	local01, objptr
06824     04 E4 05 F1 | 	add	objptr, #4
06828     F2 20 62 FC | 	wrlong	local02, objptr
0682c     67 00 00 FF 
06830     64 E4 85 F1 | 	sub	objptr, ##52836
06834     11 13 02 F6 | 	mov	arg01, local03
06838     01 12 06 F1 | 	add	arg01, #1
0683c     FC FB BF FD | 	call	#_compile_immediate_assign
06840                 | ' 
06840                 | ' ucompiledline(0)=alinemajor
06840                 | ' ucompiledline(1)=alineminor
06840                 | ' 
06840                 | ' compile_immediate_assign(cont+1) 
06840                 | ' 
06840                 | ' if cont=3 orelse cont=2 then 
06840     03 22 0E F2 | 	cmp	local03, #3 wz
06844     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06848     60 00 90 5D |  if_ne	jmp	#LR__0585
0684c                 | '   if alinemajor >lastline then 
0684c     6A 00 00 FF 
06850     6C E4 05 F1 | 	add	objptr, ##54380
06854     F2 16 02 FB | 	rdlong	arg03, objptr
06858     6A 00 00 FF 
0685c     6C E4 85 F1 | 	sub	objptr, ##54380
06860     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06864     0C 00 90 ED |  if_be	jmp	#LR__0581
06868     0F 13 02 F6 | 	mov	arg01, local01
0686c     44 F1 BF FD | 	call	#_add_line_at_end
06870     38 00 90 FD | 	jmp	#LR__0584
06874                 | LR__0581
06874     0F 13 02 F6 | 	mov	arg01, local01
06878     74 EA BF FD | 	call	#_deleteline
0687c                 | '     deleteline(alinemajor)  
0687c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0687c     6A 00 00 FF 
06880     6C E4 05 F1 | 	add	objptr, ##54380
06884     F2 16 02 FB | 	rdlong	arg03, objptr
06888     6A 00 00 FF 
0688c     6C E4 85 F1 | 	sub	objptr, ##54380
06890     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06894     0C 00 90 ED |  if_be	jmp	#LR__0582
06898     0F 13 02 F6 | 	mov	arg01, local01
0689c     14 F1 BF FD | 	call	#_add_line_at_end
068a0     08 00 90 FD | 	jmp	#LR__0583
068a4                 | LR__0582
068a4     0F 13 02 F6 | 	mov	arg01, local01
068a8     EC EE BF FD | 	call	#_insertline
068ac                 | LR__0583
068ac                 | LR__0584
068ac                 | LR__0585
068ac                 | LR__0586
068ac     A7 F0 03 F6 | 	mov	ptra, fp
068b0     B2 00 A0 FD | 	call	#popregs_
068b4                 | _compile_assign_ret
068b4     2D 00 64 FD | 	ret
068b8                 | 
068b8                 | ' 
068b8                 | ' sub compile_error(errno)
068b8                 | _compile_error
068b8     FF 04 06 F6 | 	mov	_var03, #255
068bc     01 07 02 F6 | 	mov	_var04, _var02
068c0     02 09 02 F6 | 	mov	_var05, _var03
068c4     6A 00 00 FF 
068c8     60 E4 05 F1 | 	add	objptr, ##54368
068cc     F2 0A 02 FB | 	rdlong	_var06, objptr
068d0     05 0D 02 F6 | 	mov	_var07, _var06
068d4     01 0C 66 F0 | 	shl	_var07, #1
068d8     05 0D 02 F1 | 	add	_var07, _var06
068dc     02 0C 66 F0 | 	shl	_var07, #2
068e0     03 00 00 FF 
068e4     00 E4 85 F1 | 	sub	objptr, ##1536
068e8     F2 0C 02 F1 | 	add	_var07, objptr
068ec     06 13 62 FC | 	wrlong	arg01, _var07
068f0     03 00 00 FF 
068f4     00 E4 05 F1 | 	add	objptr, ##1536
068f8     F2 0C 02 FB | 	rdlong	_var07, objptr
068fc     06 0B 02 F6 | 	mov	_var06, _var07
06900     01 0A 66 F0 | 	shl	_var06, #1
06904     06 0B 02 F1 | 	add	_var06, _var07
06908     02 0A 66 F0 | 	shl	_var06, #2
0690c     03 00 00 FF 
06910     00 E4 85 F1 | 	sub	objptr, ##1536
06914     F2 0A 02 F1 | 	add	_var06, objptr
06918     04 0A 06 F1 | 	add	_var06, #4
0691c     05 07 62 FC | 	wrlong	_var04, _var06
06920     03 00 00 FF 
06924     00 E4 05 F1 | 	add	objptr, ##1536
06928     F2 0C 02 FB | 	rdlong	_var07, objptr
0692c     06 0B 02 F6 | 	mov	_var06, _var07
06930     01 0A 66 F0 | 	shl	_var06, #1
06934     06 0B 02 F1 | 	add	_var06, _var07
06938     02 0A 66 F0 | 	shl	_var06, #2
0693c     03 00 00 FF 
06940     00 E4 85 F1 | 	sub	objptr, ##1536
06944     F2 0A 02 F1 | 	add	_var06, objptr
06948     08 0A 06 F1 | 	add	_var06, #8
0694c     05 09 62 FC | 	wrlong	_var05, _var06
06950     03 00 00 FF 
06954     00 E4 05 F1 | 	add	objptr, ##1536
06958     F2 12 02 FB | 	rdlong	arg01, objptr
0695c     01 12 06 F1 | 	add	arg01, #1
06960     F2 12 62 FC | 	wrlong	arg01, objptr
06964     6A 00 00 FF 
06968     60 E4 85 F1 | 	sub	objptr, ##54368
0696c                 | _compile_error_ret
0696c     2D 00 64 FD | 	ret
06970                 | 
06970                 | ' 
06970                 | ' sub compile_unknown() 
06970                 | _compile_unknown
06970     FF 04 06 F6 | 	mov	_var03, #255
06974     17 00 06 F6 | 	mov	_var01, #23
06978     01 07 02 F6 | 	mov	_var04, _var02
0697c     02 01 02 F6 | 	mov	_var01, _var03
06980     6A 00 00 FF 
06984     60 E4 05 F1 | 	add	objptr, ##54368
06988     F2 08 02 FB | 	rdlong	_var05, objptr
0698c     04 0B 02 F6 | 	mov	_var06, _var05
06990     01 0A 66 F0 | 	shl	_var06, #1
06994     04 0B 02 F1 | 	add	_var06, _var05
06998     02 0A 66 F0 | 	shl	_var06, #2
0699c     03 00 00 FF 
069a0     00 E4 85 F1 | 	sub	objptr, ##1536
069a4     F2 0A 02 F1 | 	add	_var06, objptr
069a8     05 2F 68 FC | 	wrlong	#23, _var06
069ac     03 00 00 FF 
069b0     00 E4 05 F1 | 	add	objptr, ##1536
069b4     F2 0A 02 FB | 	rdlong	_var06, objptr
069b8     05 09 02 F6 | 	mov	_var05, _var06
069bc     01 08 66 F0 | 	shl	_var05, #1
069c0     05 09 02 F1 | 	add	_var05, _var06
069c4     02 08 66 F0 | 	shl	_var05, #2
069c8     03 00 00 FF 
069cc     00 E4 85 F1 | 	sub	objptr, ##1536
069d0     F2 08 02 F1 | 	add	_var05, objptr
069d4     04 08 06 F1 | 	add	_var05, #4
069d8     04 07 62 FC | 	wrlong	_var04, _var05
069dc     03 00 00 FF 
069e0     00 E4 05 F1 | 	add	objptr, ##1536
069e4     F2 0A 02 FB | 	rdlong	_var06, objptr
069e8     05 09 02 F6 | 	mov	_var05, _var06
069ec     01 08 66 F0 | 	shl	_var05, #1
069f0     05 09 02 F1 | 	add	_var05, _var06
069f4     02 08 66 F0 | 	shl	_var05, #2
069f8     03 00 00 FF 
069fc     00 E4 85 F1 | 	sub	objptr, ##1536
06a00     F2 08 02 F1 | 	add	_var05, objptr
06a04     08 08 06 F1 | 	add	_var05, #8
06a08     04 01 62 FC | 	wrlong	_var01, _var05
06a0c     03 00 00 FF 
06a10     00 E4 05 F1 | 	add	objptr, ##1536
06a14     F2 0A 02 FB | 	rdlong	_var06, objptr
06a18     01 0A 06 F1 | 	add	_var06, #1
06a1c     F2 0A 62 FC | 	wrlong	_var06, objptr
06a20     6A 00 00 FF 
06a24     60 E4 85 F1 | 	sub	objptr, ##54368
06a28                 | _compile_unknown_ret
06a28     2D 00 64 FD | 	ret
06a2c                 | 
06a2c                 | ' 
06a2c                 | ' function compile_fun_2p() as ulong
06a2c                 | _compile_fun_2p
06a2c     01 4A 05 F6 | 	mov	COUNT_, #1
06a30     A8 00 A0 FD | 	call	#pushregs_
06a34     08 22 B0 FD | 	call	#_expr
06a38                 | ' 
06a38                 | ' expr()
06a38                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06a38     57 00 00 FF 
06a3c     28 E4 05 F1 | 	add	objptr, ##44584
06a40     F2 1E 02 FB | 	rdlong	local01, objptr
06a44     03 1E 66 F0 | 	shl	local01, #3
06a48     02 00 00 FF 
06a4c     38 E4 85 F1 | 	sub	objptr, ##1080
06a50     F2 1E 02 F1 | 	add	local01, objptr
06a54     04 1E 06 F1 | 	add	local01, #4
06a58     0F 1F 02 FB | 	rdlong	local01, local01
06a5c     11 1E 0E F2 | 	cmp	local01, #17 wz
06a60     54 00 00 FF 
06a64     F0 E5 85 F1 | 	sub	objptr, ##43504
06a68     15 FA 05 56 |  if_ne	mov	result1, #21
06a6c     24 00 90 5D |  if_ne	jmp	#LR__0590
06a70     57 00 00 FF 
06a74     28 E4 05 F1 | 	add	objptr, ##44584
06a78     F2 1E 02 FB | 	rdlong	local01, objptr
06a7c     01 1E 06 F1 | 	add	local01, #1
06a80     F2 1E 62 FC | 	wrlong	local01, objptr
06a84     57 00 00 FF 
06a88     28 E4 85 F1 | 	sub	objptr, ##44584
06a8c     B0 21 B0 FD | 	call	#_expr
06a90     00 FA 05 F6 | 	mov	result1, #0
06a94                 | LR__0590
06a94     A7 F0 03 F6 | 	mov	ptra, fp
06a98     B2 00 A0 FD | 	call	#popregs_
06a9c                 | _compile_fun_2p_ret
06a9c     2D 00 64 FD | 	ret
06aa0                 | 
06aa0                 | ' 
06aa0                 | ' function compile_fun_3p() as ulong
06aa0                 | _compile_fun_3p
06aa0     01 4A 05 F6 | 	mov	COUNT_, #1
06aa4     A8 00 A0 FD | 	call	#pushregs_
06aa8     94 21 B0 FD | 	call	#_expr
06aac                 | ' 
06aac                 | ' expr()
06aac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06aac     57 00 00 FF 
06ab0     28 E4 05 F1 | 	add	objptr, ##44584
06ab4     F2 1E 02 FB | 	rdlong	local01, objptr
06ab8     03 1E 66 F0 | 	shl	local01, #3
06abc     02 00 00 FF 
06ac0     38 E4 85 F1 | 	sub	objptr, ##1080
06ac4     F2 1E 02 F1 | 	add	local01, objptr
06ac8     04 1E 06 F1 | 	add	local01, #4
06acc     0F 1F 02 FB | 	rdlong	local01, local01
06ad0     11 1E 0E F2 | 	cmp	local01, #17 wz
06ad4     54 00 00 FF 
06ad8     F0 E5 85 F1 | 	sub	objptr, ##43504
06adc     15 FA 05 56 |  if_ne	mov	result1, #21
06ae0     7C 00 90 5D |  if_ne	jmp	#LR__0600
06ae4     57 00 00 FF 
06ae8     28 E4 05 F1 | 	add	objptr, ##44584
06aec     F2 1E 02 FB | 	rdlong	local01, objptr
06af0     01 1E 06 F1 | 	add	local01, #1
06af4     F2 1E 62 FC | 	wrlong	local01, objptr
06af8     57 00 00 FF 
06afc     28 E4 85 F1 | 	sub	objptr, ##44584
06b00     3C 21 B0 FD | 	call	#_expr
06b04                 | ' expr()
06b04                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b04     57 00 00 FF 
06b08     28 E4 05 F1 | 	add	objptr, ##44584
06b0c     F2 1E 02 FB | 	rdlong	local01, objptr
06b10     03 1E 66 F0 | 	shl	local01, #3
06b14     02 00 00 FF 
06b18     38 E4 85 F1 | 	sub	objptr, ##1080
06b1c     F2 1E 02 F1 | 	add	local01, objptr
06b20     04 1E 06 F1 | 	add	local01, #4
06b24     0F 1F 02 FB | 	rdlong	local01, local01
06b28     11 1E 0E F2 | 	cmp	local01, #17 wz
06b2c     54 00 00 FF 
06b30     F0 E5 85 F1 | 	sub	objptr, ##43504
06b34     15 FA 05 56 |  if_ne	mov	result1, #21
06b38     24 00 90 5D |  if_ne	jmp	#LR__0600
06b3c     57 00 00 FF 
06b40     28 E4 05 F1 | 	add	objptr, ##44584
06b44     F2 1E 02 FB | 	rdlong	local01, objptr
06b48     01 1E 06 F1 | 	add	local01, #1
06b4c     F2 1E 62 FC | 	wrlong	local01, objptr
06b50     57 00 00 FF 
06b54     28 E4 85 F1 | 	sub	objptr, ##44584
06b58     E4 20 B0 FD | 	call	#_expr
06b5c     00 FA 05 F6 | 	mov	result1, #0
06b60                 | LR__0600
06b60     A7 F0 03 F6 | 	mov	ptra, fp
06b64     B2 00 A0 FD | 	call	#popregs_
06b68                 | _compile_fun_3p_ret
06b68     2D 00 64 FD | 	ret
06b6c                 | 
06b6c                 | ' 
06b6c                 | ' function compile_fun_4p() as ulong
06b6c                 | _compile_fun_4p
06b6c     01 4A 05 F6 | 	mov	COUNT_, #1
06b70     A8 00 A0 FD | 	call	#pushregs_
06b74     C8 20 B0 FD | 	call	#_expr
06b78                 | ' 
06b78                 | ' expr()
06b78                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b78     57 00 00 FF 
06b7c     28 E4 05 F1 | 	add	objptr, ##44584
06b80     F2 1E 02 FB | 	rdlong	local01, objptr
06b84     03 1E 66 F0 | 	shl	local01, #3
06b88     02 00 00 FF 
06b8c     38 E4 85 F1 | 	sub	objptr, ##1080
06b90     F2 1E 02 F1 | 	add	local01, objptr
06b94     04 1E 06 F1 | 	add	local01, #4
06b98     0F 1F 02 FB | 	rdlong	local01, local01
06b9c     11 1E 0E F2 | 	cmp	local01, #17 wz
06ba0     54 00 00 FF 
06ba4     F0 E5 85 F1 | 	sub	objptr, ##43504
06ba8     15 FA 05 56 |  if_ne	mov	result1, #21
06bac     D4 00 90 5D |  if_ne	jmp	#LR__0610
06bb0     57 00 00 FF 
06bb4     28 E4 05 F1 | 	add	objptr, ##44584
06bb8     F2 1E 02 FB | 	rdlong	local01, objptr
06bbc     01 1E 06 F1 | 	add	local01, #1
06bc0     F2 1E 62 FC | 	wrlong	local01, objptr
06bc4     57 00 00 FF 
06bc8     28 E4 85 F1 | 	sub	objptr, ##44584
06bcc     70 20 B0 FD | 	call	#_expr
06bd0                 | ' expr()
06bd0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06bd0     57 00 00 FF 
06bd4     28 E4 05 F1 | 	add	objptr, ##44584
06bd8     F2 1E 02 FB | 	rdlong	local01, objptr
06bdc     03 1E 66 F0 | 	shl	local01, #3
06be0     02 00 00 FF 
06be4     38 E4 85 F1 | 	sub	objptr, ##1080
06be8     F2 1E 02 F1 | 	add	local01, objptr
06bec     04 1E 06 F1 | 	add	local01, #4
06bf0     0F 1F 02 FB | 	rdlong	local01, local01
06bf4     11 1E 0E F2 | 	cmp	local01, #17 wz
06bf8     54 00 00 FF 
06bfc     F0 E5 85 F1 | 	sub	objptr, ##43504
06c00     15 FA 05 56 |  if_ne	mov	result1, #21
06c04     7C 00 90 5D |  if_ne	jmp	#LR__0610
06c08     57 00 00 FF 
06c0c     28 E4 05 F1 | 	add	objptr, ##44584
06c10     F2 1E 02 FB | 	rdlong	local01, objptr
06c14     01 1E 06 F1 | 	add	local01, #1
06c18     F2 1E 62 FC | 	wrlong	local01, objptr
06c1c     57 00 00 FF 
06c20     28 E4 85 F1 | 	sub	objptr, ##44584
06c24     18 20 B0 FD | 	call	#_expr
06c28                 | ' expr()
06c28                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c28     57 00 00 FF 
06c2c     28 E4 05 F1 | 	add	objptr, ##44584
06c30     F2 1E 02 FB | 	rdlong	local01, objptr
06c34     03 1E 66 F0 | 	shl	local01, #3
06c38     02 00 00 FF 
06c3c     38 E4 85 F1 | 	sub	objptr, ##1080
06c40     F2 1E 02 F1 | 	add	local01, objptr
06c44     04 1E 06 F1 | 	add	local01, #4
06c48     0F 1F 02 FB | 	rdlong	local01, local01
06c4c     11 1E 0E F2 | 	cmp	local01, #17 wz
06c50     54 00 00 FF 
06c54     F0 E5 85 F1 | 	sub	objptr, ##43504
06c58     15 FA 05 56 |  if_ne	mov	result1, #21
06c5c     24 00 90 5D |  if_ne	jmp	#LR__0610
06c60     57 00 00 FF 
06c64     28 E4 05 F1 | 	add	objptr, ##44584
06c68     F2 1E 02 FB | 	rdlong	local01, objptr
06c6c     01 1E 06 F1 | 	add	local01, #1
06c70     F2 1E 62 FC | 	wrlong	local01, objptr
06c74     57 00 00 FF 
06c78     28 E4 85 F1 | 	sub	objptr, ##44584
06c7c     C0 1F B0 FD | 	call	#_expr
06c80     00 FA 05 F6 | 	mov	result1, #0
06c84                 | LR__0610
06c84     A7 F0 03 F6 | 	mov	ptra, fp
06c88     B2 00 A0 FD | 	call	#popregs_
06c8c                 | _compile_fun_4p_ret
06c8c     2D 00 64 FD | 	ret
06c90                 | 
06c90                 | ' 
06c90                 | ' 
06c90                 | ' function compile_fun_5p() as ulong
06c90                 | _compile_fun_5p
06c90     01 4A 05 F6 | 	mov	COUNT_, #1
06c94     A8 00 A0 FD | 	call	#pushregs_
06c98     A4 1F B0 FD | 	call	#_expr
06c9c                 | ' 
06c9c                 | ' expr()
06c9c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c9c     57 00 00 FF 
06ca0     28 E4 05 F1 | 	add	objptr, ##44584
06ca4     F2 1E 02 FB | 	rdlong	local01, objptr
06ca8     03 1E 66 F0 | 	shl	local01, #3
06cac     02 00 00 FF 
06cb0     38 E4 85 F1 | 	sub	objptr, ##1080
06cb4     F2 1E 02 F1 | 	add	local01, objptr
06cb8     04 1E 06 F1 | 	add	local01, #4
06cbc     0F 1F 02 FB | 	rdlong	local01, local01
06cc0     11 1E 0E F2 | 	cmp	local01, #17 wz
06cc4     54 00 00 FF 
06cc8     F0 E5 85 F1 | 	sub	objptr, ##43504
06ccc     15 FA 05 56 |  if_ne	mov	result1, #21
06cd0     2C 01 90 5D |  if_ne	jmp	#LR__0620
06cd4     57 00 00 FF 
06cd8     28 E4 05 F1 | 	add	objptr, ##44584
06cdc     F2 1E 02 FB | 	rdlong	local01, objptr
06ce0     01 1E 06 F1 | 	add	local01, #1
06ce4     F2 1E 62 FC | 	wrlong	local01, objptr
06ce8     57 00 00 FF 
06cec     28 E4 85 F1 | 	sub	objptr, ##44584
06cf0     4C 1F B0 FD | 	call	#_expr
06cf4                 | ' expr()
06cf4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cf4     57 00 00 FF 
06cf8     28 E4 05 F1 | 	add	objptr, ##44584
06cfc     F2 1E 02 FB | 	rdlong	local01, objptr
06d00     03 1E 66 F0 | 	shl	local01, #3
06d04     02 00 00 FF 
06d08     38 E4 85 F1 | 	sub	objptr, ##1080
06d0c     F2 1E 02 F1 | 	add	local01, objptr
06d10     04 1E 06 F1 | 	add	local01, #4
06d14     0F 1F 02 FB | 	rdlong	local01, local01
06d18     11 1E 0E F2 | 	cmp	local01, #17 wz
06d1c     54 00 00 FF 
06d20     F0 E5 85 F1 | 	sub	objptr, ##43504
06d24     15 FA 05 56 |  if_ne	mov	result1, #21
06d28     D4 00 90 5D |  if_ne	jmp	#LR__0620
06d2c     57 00 00 FF 
06d30     28 E4 05 F1 | 	add	objptr, ##44584
06d34     F2 1E 02 FB | 	rdlong	local01, objptr
06d38     01 1E 06 F1 | 	add	local01, #1
06d3c     F2 1E 62 FC | 	wrlong	local01, objptr
06d40     57 00 00 FF 
06d44     28 E4 85 F1 | 	sub	objptr, ##44584
06d48     F4 1E B0 FD | 	call	#_expr
06d4c                 | ' expr()
06d4c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d4c     57 00 00 FF 
06d50     28 E4 05 F1 | 	add	objptr, ##44584
06d54     F2 1E 02 FB | 	rdlong	local01, objptr
06d58     03 1E 66 F0 | 	shl	local01, #3
06d5c     02 00 00 FF 
06d60     38 E4 85 F1 | 	sub	objptr, ##1080
06d64     F2 1E 02 F1 | 	add	local01, objptr
06d68     04 1E 06 F1 | 	add	local01, #4
06d6c     0F 1F 02 FB | 	rdlong	local01, local01
06d70     11 1E 0E F2 | 	cmp	local01, #17 wz
06d74     54 00 00 FF 
06d78     F0 E5 85 F1 | 	sub	objptr, ##43504
06d7c     15 FA 05 56 |  if_ne	mov	result1, #21
06d80     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d84     57 00 00 FF 
06d88     28 E4 05 F1 | 	add	objptr, ##44584
06d8c     F2 1E 02 FB | 	rdlong	local01, objptr
06d90     01 1E 06 F1 | 	add	local01, #1
06d94     F2 1E 62 FC | 	wrlong	local01, objptr
06d98     57 00 00 FF 
06d9c     28 E4 85 F1 | 	sub	objptr, ##44584
06da0     9C 1E B0 FD | 	call	#_expr
06da4                 | ' expr()
06da4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06da4     57 00 00 FF 
06da8     28 E4 05 F1 | 	add	objptr, ##44584
06dac     F2 1E 02 FB | 	rdlong	local01, objptr
06db0     03 1E 66 F0 | 	shl	local01, #3
06db4     02 00 00 FF 
06db8     38 E4 85 F1 | 	sub	objptr, ##1080
06dbc     F2 1E 02 F1 | 	add	local01, objptr
06dc0     04 1E 06 F1 | 	add	local01, #4
06dc4     0F 1F 02 FB | 	rdlong	local01, local01
06dc8     11 1E 0E F2 | 	cmp	local01, #17 wz
06dcc     54 00 00 FF 
06dd0     F0 E5 85 F1 | 	sub	objptr, ##43504
06dd4     15 FA 05 56 |  if_ne	mov	result1, #21
06dd8     24 00 90 5D |  if_ne	jmp	#LR__0620
06ddc     57 00 00 FF 
06de0     28 E4 05 F1 | 	add	objptr, ##44584
06de4     F2 1E 02 FB | 	rdlong	local01, objptr
06de8     01 1E 06 F1 | 	add	local01, #1
06dec     F2 1E 62 FC | 	wrlong	local01, objptr
06df0     57 00 00 FF 
06df4     28 E4 85 F1 | 	sub	objptr, ##44584
06df8     44 1E B0 FD | 	call	#_expr
06dfc     00 FA 05 F6 | 	mov	result1, #0
06e00                 | LR__0620
06e00     A7 F0 03 F6 | 	mov	ptra, fp
06e04     B2 00 A0 FD | 	call	#popregs_
06e08                 | _compile_fun_5p_ret
06e08     2D 00 64 FD | 	ret
06e0c                 | 
06e0c                 | ' 
06e0c                 | ' function compile_fun_varp() as ulong 
06e0c                 | _compile_fun_varp
06e0c     02 4A 05 F6 | 	mov	COUNT_, #2
06e10     A8 00 A0 FD | 	call	#pushregs_
06e14     00 1E 06 F6 | 	mov	local01, #0
06e18                 | ' i=0
06e18                 | ' if lparts(ct).token<>token_end then
06e18     57 00 00 FF 
06e1c     28 E4 05 F1 | 	add	objptr, ##44584
06e20     F2 20 02 FB | 	rdlong	local02, objptr
06e24     03 20 66 F0 | 	shl	local02, #3
06e28     02 00 00 FF 
06e2c     38 E4 85 F1 | 	sub	objptr, ##1080
06e30     F2 20 02 F1 | 	add	local02, objptr
06e34     04 20 06 F1 | 	add	local02, #4
06e38     10 21 02 FB | 	rdlong	local02, local02
06e3c     FE 21 0E F2 | 	cmp	local02, #510 wz
06e40     54 00 00 FF 
06e44     F0 E5 85 F1 | 	sub	objptr, ##43504
06e48     5C 00 90 AD |  if_e	jmp	#LR__0632
06e4c                 | '   do
06e4c                 | LR__0630
06e4c     F0 1D B0 FD | 	call	#_expr
06e50     01 1E 06 F1 | 	add	local01, #1
06e54                 | '   expr()
06e54                 | '    i+=1
06e54                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06e54     57 00 00 FF 
06e58     28 E4 05 F1 | 	add	objptr, ##44584
06e5c     F2 20 02 FB | 	rdlong	local02, objptr
06e60     03 20 66 F0 | 	shl	local02, #3
06e64     02 00 00 FF 
06e68     38 E4 85 F1 | 	sub	objptr, ##1080
06e6c     F2 20 02 F1 | 	add	local02, objptr
06e70     04 20 06 F1 | 	add	local02, #4
06e74     10 21 02 FB | 	rdlong	local02, local02
06e78     11 20 0E F2 | 	cmp	local02, #17 wz
06e7c     54 00 00 FF 
06e80     F0 E5 85 F1 | 	sub	objptr, ##43504
06e84     20 00 90 5D |  if_ne	jmp	#LR__0631
06e88     57 00 00 FF 
06e8c     28 E4 05 F1 | 	add	objptr, ##44584
06e90     F2 20 02 FB | 	rdlong	local02, objptr
06e94     01 20 06 F1 | 	add	local02, #1
06e98     F2 20 62 FC | 	wrlong	local02, objptr
06e9c     57 00 00 FF 
06ea0     28 E4 85 F1 | 	sub	objptr, ##44584
06ea4     A4 FF 9F FD | 	jmp	#LR__0630
06ea8                 | LR__0631
06ea8                 | LR__0632
06ea8                 | ' return i
06ea8     0F FB 01 F6 | 	mov	result1, local01
06eac     A7 F0 03 F6 | 	mov	ptra, fp
06eb0     B2 00 A0 FD | 	call	#popregs_
06eb4                 | _compile_fun_varp_ret
06eb4     2D 00 64 FD | 	ret
06eb8                 | 
06eb8                 | ' 
06eb8                 | ' 
06eb8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06eb8                 | _compile_print
06eb8     0B 4A 05 F6 | 	mov	COUNT_, #11
06ebc     A8 00 A0 FD | 	call	#pushregs_
06ec0     00 1E 06 F6 | 	mov	local01, #0
06ec4     1D 22 06 F6 | 	mov	local03, #29
06ec8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06ec8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06ec8     57 00 00 FF 
06ecc     28 E4 05 F1 | 	add	objptr, ##44584
06ed0     F2 24 02 FB | 	rdlong	local04, objptr
06ed4     03 24 66 F0 | 	shl	local04, #3
06ed8     02 00 00 FF 
06edc     38 E4 85 F1 | 	sub	objptr, ##1080
06ee0     F2 24 02 F1 | 	add	local04, objptr
06ee4     04 24 06 F1 | 	add	local04, #4
06ee8     12 25 02 FB | 	rdlong	local04, local04
06eec     FE 25 0E F2 | 	cmp	local04, #510 wz
06ef0     54 00 00 FF 
06ef4     F0 E5 85 F1 | 	sub	objptr, ##43504
06ef8     68 01 90 5D |  if_ne	jmp	#LR__0640
06efc     20 22 06 F6 | 	mov	local03, #32
06f00     0F 27 02 F6 | 	mov	local05, local01
06f04     10 29 02 F6 | 	mov	local06, local02
06f08     11 2B 02 F6 | 	mov	local07, local03
06f0c     6A 00 00 FF 
06f10     60 E4 05 F1 | 	add	objptr, ##54368
06f14     F2 2C 02 FB | 	rdlong	local08, objptr
06f18     16 2F 02 F6 | 	mov	local09, local08
06f1c     01 2E 66 F0 | 	shl	local09, #1
06f20     16 2F 02 F1 | 	add	local09, local08
06f24     02 2E 66 F0 | 	shl	local09, #2
06f28     03 00 00 FF 
06f2c     00 E4 85 F1 | 	sub	objptr, ##1536
06f30     F2 2E 02 F1 | 	add	local09, objptr
06f34     17 27 62 FC | 	wrlong	local05, local09
06f38     03 00 00 FF 
06f3c     00 E4 05 F1 | 	add	objptr, ##1536
06f40     F2 26 02 FB | 	rdlong	local05, objptr
06f44     13 31 02 F6 | 	mov	local10, local05
06f48     01 30 66 F0 | 	shl	local10, #1
06f4c     13 31 02 F1 | 	add	local10, local05
06f50     02 30 66 F0 | 	shl	local10, #2
06f54     03 00 00 FF 
06f58     00 E4 85 F1 | 	sub	objptr, ##1536
06f5c     F2 30 02 F1 | 	add	local10, objptr
06f60     04 30 06 F1 | 	add	local10, #4
06f64     18 29 62 FC | 	wrlong	local06, local10
06f68     03 00 00 FF 
06f6c     00 E4 05 F1 | 	add	objptr, ##1536
06f70     F2 26 02 FB | 	rdlong	local05, objptr
06f74     13 33 02 F6 | 	mov	local11, local05
06f78     01 32 66 F0 | 	shl	local11, #1
06f7c     13 33 02 F1 | 	add	local11, local05
06f80     02 32 66 F0 | 	shl	local11, #2
06f84     03 00 00 FF 
06f88     00 E4 85 F1 | 	sub	objptr, ##1536
06f8c     F2 32 02 F1 | 	add	local11, objptr
06f90     08 32 06 F1 | 	add	local11, #8
06f94     19 2B 62 FC | 	wrlong	local07, local11
06f98     03 00 00 FF 
06f9c     00 E4 05 F1 | 	add	objptr, ##1536
06fa0     F2 26 02 FB | 	rdlong	local05, objptr
06fa4     01 26 06 F1 | 	add	local05, #1
06fa8     F2 26 62 FC | 	wrlong	local05, objptr
06fac     44 22 06 F6 | 	mov	local03, #68
06fb0     0F 27 02 F6 | 	mov	local05, local01
06fb4     10 29 02 F6 | 	mov	local06, local02
06fb8     11 2B 02 F6 | 	mov	local07, local03
06fbc     F2 2C 02 FB | 	rdlong	local08, objptr
06fc0     16 2F 02 F6 | 	mov	local09, local08
06fc4     01 2E 66 F0 | 	shl	local09, #1
06fc8     16 2F 02 F1 | 	add	local09, local08
06fcc     02 2E 66 F0 | 	shl	local09, #2
06fd0     03 00 00 FF 
06fd4     00 E4 85 F1 | 	sub	objptr, ##1536
06fd8     F2 2E 02 F1 | 	add	local09, objptr
06fdc     17 27 62 FC | 	wrlong	local05, local09
06fe0     03 00 00 FF 
06fe4     00 E4 05 F1 | 	add	objptr, ##1536
06fe8     F2 32 02 FB | 	rdlong	local11, objptr
06fec     19 31 02 F6 | 	mov	local10, local11
06ff0     01 30 66 F0 | 	shl	local10, #1
06ff4     19 31 02 F1 | 	add	local10, local11
06ff8     02 30 66 F0 | 	shl	local10, #2
06ffc     03 00 00 FF 
07000     00 E4 85 F1 | 	sub	objptr, ##1536
07004     F2 30 02 F1 | 	add	local10, objptr
07008     04 30 06 F1 | 	add	local10, #4
0700c     18 29 62 FC | 	wrlong	local06, local10
07010     03 00 00 FF 
07014     00 E4 05 F1 | 	add	objptr, ##1536
07018     F2 30 02 FB | 	rdlong	local10, objptr
0701c     18 33 02 F6 | 	mov	local11, local10
07020     01 32 66 F0 | 	shl	local11, #1
07024     18 33 02 F1 | 	add	local11, local10
07028     02 32 66 F0 | 	shl	local11, #2
0702c     03 00 00 FF 
07030     00 E4 85 F1 | 	sub	objptr, ##1536
07034     F2 32 02 F1 | 	add	local11, objptr
07038     08 32 06 F1 | 	add	local11, #8
0703c     19 2B 62 FC | 	wrlong	local07, local11
07040     03 00 00 FF 
07044     00 E4 05 F1 | 	add	objptr, ##1536
07048     F2 26 02 FB | 	rdlong	local05, objptr
0704c     01 26 06 F1 | 	add	local05, #1
07050     F2 26 62 FC | 	wrlong	local05, objptr
07054     6A 00 00 FF 
07058     60 E4 85 F1 | 	sub	objptr, ##54368
0705c     00 FA 05 F6 | 	mov	result1, #0
07060     20 05 90 FD | 	jmp	#LR__0647
07064                 | LR__0640
07064                 | ' do
07064                 | LR__0641
07064     D8 1B B0 FD | 	call	#_expr
07068                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
07068                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07068     57 00 00 FF 
0706c     28 E4 05 F1 | 	add	objptr, ##44584
07070     F2 24 02 FB | 	rdlong	local04, objptr
07074     03 24 66 F0 | 	shl	local04, #3
07078     02 00 00 FF 
0707c     38 E4 85 F1 | 	sub	objptr, ##1080
07080     F2 24 02 F1 | 	add	local04, objptr
07084     04 24 06 F1 | 	add	local04, #4
07088     12 2D 02 FB | 	rdlong	local08, local04
0708c     11 2C 0E F2 | 	cmp	local08, #17 wz
07090     54 00 00 FF 
07094     F0 E5 85 F1 | 	sub	objptr, ##43504
07098     60 01 90 5D |  if_ne	jmp	#LR__0642
0709c     21 22 06 F6 | 	mov	local03, #33
070a0     0F 27 02 F6 | 	mov	local05, local01
070a4     10 29 02 F6 | 	mov	local06, local02
070a8     11 2B 02 F6 | 	mov	local07, local03
070ac     6A 00 00 FF 
070b0     60 E4 05 F1 | 	add	objptr, ##54368
070b4     F2 2C 02 FB | 	rdlong	local08, objptr
070b8     16 2F 02 F6 | 	mov	local09, local08
070bc     01 2E 66 F0 | 	shl	local09, #1
070c0     16 2F 02 F1 | 	add	local09, local08
070c4     02 2E 66 F0 | 	shl	local09, #2
070c8     03 00 00 FF 
070cc     00 E4 85 F1 | 	sub	objptr, ##1536
070d0     F2 2E 02 F1 | 	add	local09, objptr
070d4     17 27 62 FC | 	wrlong	local05, local09
070d8     03 00 00 FF 
070dc     00 E4 05 F1 | 	add	objptr, ##1536
070e0     F2 32 02 FB | 	rdlong	local11, objptr
070e4     19 31 02 F6 | 	mov	local10, local11
070e8     01 30 66 F0 | 	shl	local10, #1
070ec     19 31 02 F1 | 	add	local10, local11
070f0     02 30 66 F0 | 	shl	local10, #2
070f4     03 00 00 FF 
070f8     00 E4 85 F1 | 	sub	objptr, ##1536
070fc     F2 30 02 F1 | 	add	local10, objptr
07100     04 30 06 F1 | 	add	local10, #4
07104     18 29 62 FC | 	wrlong	local06, local10
07108     03 00 00 FF 
0710c     00 E4 05 F1 | 	add	objptr, ##1536
07110     F2 26 02 FB | 	rdlong	local05, objptr
07114     13 33 02 F6 | 	mov	local11, local05
07118     01 32 66 F0 | 	shl	local11, #1
0711c     13 33 02 F1 | 	add	local11, local05
07120     02 32 66 F0 | 	shl	local11, #2
07124     03 00 00 FF 
07128     00 E4 85 F1 | 	sub	objptr, ##1536
0712c     F2 32 02 F1 | 	add	local11, objptr
07130     08 32 06 F1 | 	add	local11, #8
07134     19 2B 62 FC | 	wrlong	local07, local11
07138     03 00 00 FF 
0713c     00 E4 05 F1 | 	add	objptr, ##1536
07140     F2 26 02 FB | 	rdlong	local05, objptr
07144     01 26 06 F1 | 	add	local05, #1
07148     F2 26 62 FC | 	wrlong	local05, objptr
0714c     44 22 06 F6 | 	mov	local03, #68
07150     0F 27 02 F6 | 	mov	local05, local01
07154     10 29 02 F6 | 	mov	local06, local02
07158     11 2B 02 F6 | 	mov	local07, local03
0715c     F2 2C 02 FB | 	rdlong	local08, objptr
07160     16 2F 02 F6 | 	mov	local09, local08
07164     01 2E 66 F0 | 	shl	local09, #1
07168     16 2F 02 F1 | 	add	local09, local08
0716c     02 2E 66 F0 | 	shl	local09, #2
07170     03 00 00 FF 
07174     00 E4 85 F1 | 	sub	objptr, ##1536
07178     F2 2E 02 F1 | 	add	local09, objptr
0717c     17 27 62 FC | 	wrlong	local05, local09
07180     03 00 00 FF 
07184     00 E4 05 F1 | 	add	objptr, ##1536
07188     F2 32 02 FB | 	rdlong	local11, objptr
0718c     19 31 02 F6 | 	mov	local10, local11
07190     01 30 66 F0 | 	shl	local10, #1
07194     19 31 02 F1 | 	add	local10, local11
07198     02 30 66 F0 | 	shl	local10, #2
0719c     03 00 00 FF 
071a0     00 E4 85 F1 | 	sub	objptr, ##1536
071a4     F2 30 02 F1 | 	add	local10, objptr
071a8     04 30 06 F1 | 	add	local10, #4
071ac     18 29 62 FC | 	wrlong	local06, local10
071b0     03 00 00 FF 
071b4     00 E4 05 F1 | 	add	objptr, ##1536
071b8     F2 30 02 FB | 	rdlong	local10, objptr
071bc     18 33 02 F6 | 	mov	local11, local10
071c0     01 32 66 F0 | 	shl	local11, #1
071c4     18 33 02 F1 | 	add	local11, local10
071c8     02 32 66 F0 | 	shl	local11, #2
071cc     03 00 00 FF 
071d0     00 E4 85 F1 | 	sub	objptr, ##1536
071d4     F2 32 02 F1 | 	add	local11, objptr
071d8     08 32 06 F1 | 	add	local11, #8
071dc     19 2B 62 FC | 	wrlong	local07, local11
071e0     03 00 00 FF 
071e4     00 E4 05 F1 | 	add	objptr, ##1536
071e8     F2 26 02 FB | 	rdlong	local05, objptr
071ec     01 26 06 F1 | 	add	local05, #1
071f0     F2 26 62 FC | 	wrlong	local05, objptr
071f4     6A 00 00 FF 
071f8     60 E4 85 F1 | 	sub	objptr, ##54368
071fc                 | LR__0642
071fc                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
071fc     57 00 00 FF 
07200     28 E4 05 F1 | 	add	objptr, ##44584
07204     F2 24 02 FB | 	rdlong	local04, objptr
07208     03 24 66 F0 | 	shl	local04, #3
0720c     02 00 00 FF 
07210     38 E4 85 F1 | 	sub	objptr, ##1080
07214     F2 24 02 F1 | 	add	local04, objptr
07218     04 24 06 F1 | 	add	local04, #4
0721c     12 2D 02 FB | 	rdlong	local08, local04
07220     12 2C 0E F2 | 	cmp	local08, #18 wz
07224     54 00 00 FF 
07228     F0 E5 85 F1 | 	sub	objptr, ##43504
0722c     60 01 90 5D |  if_ne	jmp	#LR__0643
07230     22 22 06 F6 | 	mov	local03, #34
07234     0F 27 02 F6 | 	mov	local05, local01
07238     10 29 02 F6 | 	mov	local06, local02
0723c     11 2B 02 F6 | 	mov	local07, local03
07240     6A 00 00 FF 
07244     60 E4 05 F1 | 	add	objptr, ##54368
07248     F2 2C 02 FB | 	rdlong	local08, objptr
0724c     16 2F 02 F6 | 	mov	local09, local08
07250     01 2E 66 F0 | 	shl	local09, #1
07254     16 2F 02 F1 | 	add	local09, local08
07258     02 2E 66 F0 | 	shl	local09, #2
0725c     03 00 00 FF 
07260     00 E4 85 F1 | 	sub	objptr, ##1536
07264     F2 2E 02 F1 | 	add	local09, objptr
07268     17 27 62 FC | 	wrlong	local05, local09
0726c     03 00 00 FF 
07270     00 E4 05 F1 | 	add	objptr, ##1536
07274     F2 32 02 FB | 	rdlong	local11, objptr
07278     19 31 02 F6 | 	mov	local10, local11
0727c     01 30 66 F0 | 	shl	local10, #1
07280     19 31 02 F1 | 	add	local10, local11
07284     02 30 66 F0 | 	shl	local10, #2
07288     03 00 00 FF 
0728c     00 E4 85 F1 | 	sub	objptr, ##1536
07290     F2 30 02 F1 | 	add	local10, objptr
07294     04 30 06 F1 | 	add	local10, #4
07298     18 29 62 FC | 	wrlong	local06, local10
0729c     03 00 00 FF 
072a0     00 E4 05 F1 | 	add	objptr, ##1536
072a4     F2 26 02 FB | 	rdlong	local05, objptr
072a8     13 33 02 F6 | 	mov	local11, local05
072ac     01 32 66 F0 | 	shl	local11, #1
072b0     13 33 02 F1 | 	add	local11, local05
072b4     02 32 66 F0 | 	shl	local11, #2
072b8     03 00 00 FF 
072bc     00 E4 85 F1 | 	sub	objptr, ##1536
072c0     F2 32 02 F1 | 	add	local11, objptr
072c4     08 32 06 F1 | 	add	local11, #8
072c8     19 2B 62 FC | 	wrlong	local07, local11
072cc     03 00 00 FF 
072d0     00 E4 05 F1 | 	add	objptr, ##1536
072d4     F2 26 02 FB | 	rdlong	local05, objptr
072d8     01 26 06 F1 | 	add	local05, #1
072dc     F2 26 62 FC | 	wrlong	local05, objptr
072e0     44 22 06 F6 | 	mov	local03, #68
072e4     0F 27 02 F6 | 	mov	local05, local01
072e8     10 29 02 F6 | 	mov	local06, local02
072ec     11 2B 02 F6 | 	mov	local07, local03
072f0     F2 2C 02 FB | 	rdlong	local08, objptr
072f4     16 2F 02 F6 | 	mov	local09, local08
072f8     01 2E 66 F0 | 	shl	local09, #1
072fc     16 2F 02 F1 | 	add	local09, local08
07300     02 2E 66 F0 | 	shl	local09, #2
07304     03 00 00 FF 
07308     00 E4 85 F1 | 	sub	objptr, ##1536
0730c     F2 2E 02 F1 | 	add	local09, objptr
07310     17 27 62 FC | 	wrlong	local05, local09
07314     03 00 00 FF 
07318     00 E4 05 F1 | 	add	objptr, ##1536
0731c     F2 32 02 FB | 	rdlong	local11, objptr
07320     19 31 02 F6 | 	mov	local10, local11
07324     01 30 66 F0 | 	shl	local10, #1
07328     19 31 02 F1 | 	add	local10, local11
0732c     02 30 66 F0 | 	shl	local10, #2
07330     03 00 00 FF 
07334     00 E4 85 F1 | 	sub	objptr, ##1536
07338     F2 30 02 F1 | 	add	local10, objptr
0733c     04 30 06 F1 | 	add	local10, #4
07340     18 29 62 FC | 	wrlong	local06, local10
07344     03 00 00 FF 
07348     00 E4 05 F1 | 	add	objptr, ##1536
0734c     F2 30 02 FB | 	rdlong	local10, objptr
07350     18 33 02 F6 | 	mov	local11, local10
07354     01 32 66 F0 | 	shl	local11, #1
07358     18 33 02 F1 | 	add	local11, local10
0735c     02 32 66 F0 | 	shl	local11, #2
07360     03 00 00 FF 
07364     00 E4 85 F1 | 	sub	objptr, ##1536
07368     F2 32 02 F1 | 	add	local11, objptr
0736c     08 32 06 F1 | 	add	local11, #8
07370     19 2B 62 FC | 	wrlong	local07, local11
07374     03 00 00 FF 
07378     00 E4 05 F1 | 	add	objptr, ##1536
0737c     F2 26 02 FB | 	rdlong	local05, objptr
07380     01 26 06 F1 | 	add	local05, #1
07384     F2 26 62 FC | 	wrlong	local05, objptr
07388     6A 00 00 FF 
0738c     60 E4 85 F1 | 	sub	objptr, ##54368
07390                 | LR__0643
07390                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07390     57 00 00 FF 
07394     28 E4 05 F1 | 	add	objptr, ##44584
07398     F2 24 02 FB | 	rdlong	local04, objptr
0739c     03 24 66 F0 | 	shl	local04, #3
073a0     02 00 00 FF 
073a4     38 E4 85 F1 | 	sub	objptr, ##1080
073a8     F2 24 02 F1 | 	add	local04, objptr
073ac     04 24 06 F1 | 	add	local04, #4
073b0     12 2D 02 FB | 	rdlong	local08, local04
073b4     FE 2D 0E F2 | 	cmp	local08, #510 wz
073b8     54 00 00 FF 
073bc     F0 E5 85 F1 | 	sub	objptr, ##43504
073c0     B8 00 90 5D |  if_ne	jmp	#LR__0644
073c4     44 22 06 F6 | 	mov	local03, #68
073c8     0F 27 02 F6 | 	mov	local05, local01
073cc     10 29 02 F6 | 	mov	local06, local02
073d0     11 2B 02 F6 | 	mov	local07, local03
073d4     6A 00 00 FF 
073d8     60 E4 05 F1 | 	add	objptr, ##54368
073dc     F2 2C 02 FB | 	rdlong	local08, objptr
073e0     16 2F 02 F6 | 	mov	local09, local08
073e4     01 2E 66 F0 | 	shl	local09, #1
073e8     16 2F 02 F1 | 	add	local09, local08
073ec     02 2E 66 F0 | 	shl	local09, #2
073f0     03 00 00 FF 
073f4     00 E4 85 F1 | 	sub	objptr, ##1536
073f8     F2 2E 02 F1 | 	add	local09, objptr
073fc     17 27 62 FC | 	wrlong	local05, local09
07400     03 00 00 FF 
07404     00 E4 05 F1 | 	add	objptr, ##1536
07408     F2 32 02 FB | 	rdlong	local11, objptr
0740c     19 31 02 F6 | 	mov	local10, local11
07410     01 30 66 F0 | 	shl	local10, #1
07414     19 31 02 F1 | 	add	local10, local11
07418     02 30 66 F0 | 	shl	local10, #2
0741c     03 00 00 FF 
07420     00 E4 85 F1 | 	sub	objptr, ##1536
07424     F2 30 02 F1 | 	add	local10, objptr
07428     04 30 06 F1 | 	add	local10, #4
0742c     18 29 62 FC | 	wrlong	local06, local10
07430     03 00 00 FF 
07434     00 E4 05 F1 | 	add	objptr, ##1536
07438     F2 30 02 FB | 	rdlong	local10, objptr
0743c     18 33 02 F6 | 	mov	local11, local10
07440     01 32 66 F0 | 	shl	local11, #1
07444     18 33 02 F1 | 	add	local11, local10
07448     02 32 66 F0 | 	shl	local11, #2
0744c     03 00 00 FF 
07450     00 E4 85 F1 | 	sub	objptr, ##1536
07454     F2 32 02 F1 | 	add	local11, objptr
07458     08 32 06 F1 | 	add	local11, #8
0745c     19 2B 62 FC | 	wrlong	local07, local11
07460     03 00 00 FF 
07464     00 E4 05 F1 | 	add	objptr, ##1536
07468     F2 26 02 FB | 	rdlong	local05, objptr
0746c     01 26 06 F1 | 	add	local05, #1
07470     F2 26 62 FC | 	wrlong	local05, objptr
07474     6A 00 00 FF 
07478     60 E4 85 F1 | 	sub	objptr, ##54368
0747c                 | LR__0644
0747c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
0747c     57 00 00 FF 
07480     28 E4 05 F1 | 	add	objptr, ##44584
07484     F2 24 02 FB | 	rdlong	local04, objptr
07488     03 24 66 F0 | 	shl	local04, #3
0748c     02 00 00 FF 
07490     38 E4 85 F1 | 	sub	objptr, ##1080
07494     F2 24 02 F1 | 	add	local04, objptr
07498     04 24 06 F1 | 	add	local04, #4
0749c     12 2D 02 FB | 	rdlong	local08, local04
074a0     11 2C 0E F2 | 	cmp	local08, #17 wz
074a4     54 00 00 FF 
074a8     F0 E5 85 F1 | 	sub	objptr, ##43504
074ac     6C 00 90 AD |  if_e	jmp	#LR__0645
074b0     57 00 00 FF 
074b4     28 E4 05 F1 | 	add	objptr, ##44584
074b8     F2 2C 02 FB | 	rdlong	local08, objptr
074bc     03 2C 66 F0 | 	shl	local08, #3
074c0     02 00 00 FF 
074c4     38 E4 85 F1 | 	sub	objptr, ##1080
074c8     F2 2C 02 F1 | 	add	local08, objptr
074cc     04 2C 06 F1 | 	add	local08, #4
074d0     16 2D 02 FB | 	rdlong	local08, local08
074d4     12 2C 0E F2 | 	cmp	local08, #18 wz
074d8     54 00 00 FF 
074dc     F0 E5 85 F1 | 	sub	objptr, ##43504
074e0     38 00 90 AD |  if_e	jmp	#LR__0645
074e4     57 00 00 FF 
074e8     28 E4 05 F1 | 	add	objptr, ##44584
074ec     F2 32 02 FB | 	rdlong	local11, objptr
074f0     03 32 66 F0 | 	shl	local11, #3
074f4     02 00 00 FF 
074f8     38 E4 85 F1 | 	sub	objptr, ##1080
074fc     F2 32 02 F1 | 	add	local11, objptr
07500     04 32 06 F1 | 	add	local11, #4
07504     19 33 02 FB | 	rdlong	local11, local11
07508     FE 33 0E F2 | 	cmp	local11, #510 wz
0750c     54 00 00 FF 
07510     F0 E5 85 F1 | 	sub	objptr, ##43504
07514     16 FA 05 56 |  if_ne	mov	result1, #22
07518     68 00 90 5D |  if_ne	jmp	#LR__0647
0751c                 | LR__0645
0751c     57 00 00 FF 
07520     28 E4 05 F1 | 	add	objptr, ##44584
07524     F2 24 02 FB | 	rdlong	local04, objptr
07528     01 24 06 F1 | 	add	local04, #1
0752c     F2 24 62 FC | 	wrlong	local04, objptr
07530     03 24 66 F0 | 	shl	local04, #3
07534     02 00 00 FF 
07538     38 E4 85 F1 | 	sub	objptr, ##1080
0753c     F2 24 02 F1 | 	add	local04, objptr
07540     04 24 06 F1 | 	add	local04, #4
07544     12 2D 02 FB | 	rdlong	local08, local04
07548     FE 2D 0E F2 | 	cmp	local08, #510 wz
0754c     54 00 00 FF 
07550     F0 E5 85 F1 | 	sub	objptr, ##43504
07554     28 00 90 AD |  if_e	jmp	#LR__0646
07558     57 00 00 FF 
0755c     28 E4 05 F1 | 	add	objptr, ##44584
07560     F2 32 02 FB | 	rdlong	local11, objptr
07564     0E 00 00 FF 
07568     1C E4 05 F1 | 	add	objptr, ##7196
0756c     F2 30 02 FB | 	rdlong	local10, objptr
07570     65 00 00 FF 
07574     44 E4 85 F1 | 	sub	objptr, ##51780
07578     18 33 52 F2 | 	cmps	local11, local10 wc
0757c     E4 FA 9F CD |  if_b	jmp	#LR__0641
07580                 | LR__0646
07580                 | ' return 0
07580     00 FA 05 F6 | 	mov	result1, #0
07584                 | LR__0647
07584     A7 F0 03 F6 | 	mov	ptra, fp
07588     B2 00 A0 FD | 	call	#popregs_
0758c                 | _compile_print_ret
0758c     2D 00 64 FD | 	ret
07590                 | 
07590                 | ' 
07590                 | ' function compile_if() as ulong  
07590                 | _compile_if
07590     05 4A 05 F6 | 	mov	COUNT_, #5
07594     A8 00 A0 FD | 	call	#pushregs_
07598                 | _compile_if_enter
07598     A4 16 B0 FD | 	call	#_expr
0759c                 | ' expr()
0759c                 | ' return 0
0759c     57 00 00 FF 
075a0     28 E4 05 F1 | 	add	objptr, ##44584
075a4     F2 FA 01 FB | 	rdlong	result1, objptr
075a8     01 FA 05 F1 | 	add	result1, #1
075ac     F2 FA 61 FC | 	wrlong	result1, objptr
075b0     58 22 06 F6 | 	mov	local03, #88
075b4     0F 25 02 F6 | 	mov	local04, local01
075b8     10 27 02 F6 | 	mov	local05, local02
075bc     11 1F 02 F6 | 	mov	local01, local03
075c0     13 00 00 FF 
075c4     38 E4 05 F1 | 	add	objptr, ##9784
075c8     F2 12 02 FB | 	rdlong	arg01, objptr
075cc     09 FB 01 F6 | 	mov	result1, arg01
075d0     01 FA 65 F0 | 	shl	result1, #1
075d4     09 FB 01 F1 | 	add	result1, arg01
075d8     02 FA 65 F0 | 	shl	result1, #2
075dc     03 00 00 FF 
075e0     00 E4 85 F1 | 	sub	objptr, ##1536
075e4     F2 FA 01 F1 | 	add	result1, objptr
075e8     FD 24 62 FC | 	wrlong	local04, result1
075ec     03 00 00 FF 
075f0     00 E4 05 F1 | 	add	objptr, ##1536
075f4     F2 12 02 FB | 	rdlong	arg01, objptr
075f8     09 25 02 F6 | 	mov	local04, arg01
075fc     01 24 66 F0 | 	shl	local04, #1
07600     09 25 02 F1 | 	add	local04, arg01
07604     02 24 66 F0 | 	shl	local04, #2
07608     03 00 00 FF 
0760c     00 E4 85 F1 | 	sub	objptr, ##1536
07610     F2 24 02 F1 | 	add	local04, objptr
07614     04 24 06 F1 | 	add	local04, #4
07618     12 27 62 FC | 	wrlong	local05, local04
0761c     03 00 00 FF 
07620     00 E4 05 F1 | 	add	objptr, ##1536
07624     F2 24 02 FB | 	rdlong	local04, objptr
07628     12 27 02 F6 | 	mov	local05, local04
0762c     01 26 66 F0 | 	shl	local05, #1
07630     12 27 02 F1 | 	add	local05, local04
07634     02 26 66 F0 | 	shl	local05, #2
07638     03 00 00 FF 
0763c     00 E4 85 F1 | 	sub	objptr, ##1536
07640     F2 26 02 F1 | 	add	local05, objptr
07644     08 26 06 F1 | 	add	local05, #8
07648     13 1F 62 FC | 	wrlong	local01, local05
0764c     03 00 00 FF 
07650     00 E4 05 F1 | 	add	objptr, ##1536
07654     F2 24 02 FB | 	rdlong	local04, objptr
07658     01 24 06 F1 | 	add	local04, #1
0765c     F2 24 62 FC | 	wrlong	local04, objptr
07660                 | ' 
07660                 | ' 'print "In compile_if"
07660                 | ' compile_fun_1p()
07660                 | ' cmd=lparts(ct).token : ct+=1
07660                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07660                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07660                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07660     13 00 00 FF 
07664     38 E4 85 F1 | 	sub	objptr, ##9784
07668     F2 26 02 FB | 	rdlong	local05, objptr
0766c     01 26 06 F1 | 	add	local05, #1
07670     03 26 66 F0 | 	shl	local05, #3
07674     02 00 00 FF 
07678     38 E4 85 F1 | 	sub	objptr, ##1080
0767c     F2 26 02 F1 | 	add	local05, objptr
07680     13 13 02 FB | 	rdlong	arg01, local05
07684     54 00 00 FF 
07688     F0 E5 85 F1 | 	sub	objptr, ##43504
0768c                 | ' 
0768c                 | ' select case s
0768c     5D 01 00 FF 
07690     88 14 06 F6 | 	mov	arg02, ##@LR__4711
07694     6C 4C B1 FD | 	call	#__system___string_cmp
07698     00 FA 0D F2 | 	cmp	result1, #0 wz
0769c     1B FA 05 A6 |  if_e	mov	result1, #27
076a0     00 FA 05 56 |  if_ne	mov	result1, #0
076a4     00 FA 0D F2 | 	cmp	result1, #0 wz
076a8     0C 00 90 AD |  if_e	jmp	#LR__0650
076ac     05 12 06 F6 | 	mov	arg01, #5
076b0     88 ED BF FD | 	call	#_compile_immediate_assign
076b4     08 00 90 FD | 	jmp	#LR__0651
076b8                 | LR__0650
076b8     05 12 06 F6 | 	mov	arg01, #5
076bc     B4 E3 BF FD | 	call	#_compile_immediate
076c0                 | LR__0651
076c0                 | ' 
076c0                 | ' 
076c0                 | ' return 0
076c0     00 FA 05 F6 | 	mov	result1, #0
076c4     A7 F0 03 F6 | 	mov	ptra, fp
076c8     B2 00 A0 FD | 	call	#popregs_
076cc                 | _compile_if_ret
076cc     2D 00 64 FD | 	ret
076d0                 | 
076d0                 | ' 
076d0                 | ' function compile_else() as ulong  
076d0                 | _compile_else
076d0     05 4A 05 F6 | 	mov	COUNT_, #5
076d4     A8 00 A0 FD | 	call	#pushregs_
076d8                 | _compile_else_enter
076d8     5A 22 06 F6 | 	mov	local03, #90
076dc     0F 25 02 F6 | 	mov	local04, local01
076e0     10 27 02 F6 | 	mov	local05, local02
076e4     11 1F 02 F6 | 	mov	local01, local03
076e8     6A 00 00 FF 
076ec     60 E4 05 F1 | 	add	objptr, ##54368
076f0     F2 12 02 FB | 	rdlong	arg01, objptr
076f4     09 FB 01 F6 | 	mov	result1, arg01
076f8     01 FA 65 F0 | 	shl	result1, #1
076fc     09 FB 01 F1 | 	add	result1, arg01
07700     02 FA 65 F0 | 	shl	result1, #2
07704     03 00 00 FF 
07708     00 E4 85 F1 | 	sub	objptr, ##1536
0770c     F2 FA 01 F1 | 	add	result1, objptr
07710     FD 24 62 FC | 	wrlong	local04, result1
07714     03 00 00 FF 
07718     00 E4 05 F1 | 	add	objptr, ##1536
0771c     F2 FA 01 FB | 	rdlong	result1, objptr
07720     FD 24 02 F6 | 	mov	local04, result1
07724     01 24 66 F0 | 	shl	local04, #1
07728     FD 24 02 F1 | 	add	local04, result1
0772c     02 24 66 F0 | 	shl	local04, #2
07730     03 00 00 FF 
07734     00 E4 85 F1 | 	sub	objptr, ##1536
07738     F2 24 02 F1 | 	add	local04, objptr
0773c     04 24 06 F1 | 	add	local04, #4
07740     12 27 62 FC | 	wrlong	local05, local04
07744     03 00 00 FF 
07748     00 E4 05 F1 | 	add	objptr, ##1536
0774c     F2 24 02 FB | 	rdlong	local04, objptr
07750     12 27 02 F6 | 	mov	local05, local04
07754     01 26 66 F0 | 	shl	local05, #1
07758     12 27 02 F1 | 	add	local05, local04
0775c     02 26 66 F0 | 	shl	local05, #2
07760     03 00 00 FF 
07764     00 E4 85 F1 | 	sub	objptr, ##1536
07768     F2 26 02 F1 | 	add	local05, objptr
0776c     08 26 06 F1 | 	add	local05, #8
07770     13 1F 62 FC | 	wrlong	local01, local05
07774     03 00 00 FF 
07778     00 E4 05 F1 | 	add	objptr, ##1536
0777c     F2 24 02 FB | 	rdlong	local04, objptr
07780     01 24 06 F1 | 	add	local04, #1
07784     F2 24 62 FC | 	wrlong	local04, objptr
07788                 | ' 
07788                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
07788                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07788     13 00 00 FF 
0778c     38 E4 85 F1 | 	sub	objptr, ##9784
07790     F2 26 02 FB | 	rdlong	local05, objptr
07794     01 26 06 F1 | 	add	local05, #1
07798     03 26 66 F0 | 	shl	local05, #3
0779c     02 00 00 FF 
077a0     38 E4 85 F1 | 	sub	objptr, ##1080
077a4     F2 26 02 F1 | 	add	local05, objptr
077a8     13 13 02 FB | 	rdlong	arg01, local05
077ac     54 00 00 FF 
077b0     F0 E5 85 F1 | 	sub	objptr, ##43504
077b4                 | ' 
077b4                 | ' select case s
077b4     5D 01 00 FF 
077b8     88 14 06 F6 | 	mov	arg02, ##@LR__4711
077bc     44 4B B1 FD | 	call	#__system___string_cmp
077c0     00 FA 0D F2 | 	cmp	result1, #0 wz
077c4     1B FA 05 A6 |  if_e	mov	result1, #27
077c8     00 FA 05 56 |  if_ne	mov	result1, #0
077cc     00 FA 0D F2 | 	cmp	result1, #0 wz
077d0     0C 00 90 AD |  if_e	jmp	#LR__0660
077d4     05 12 06 F6 | 	mov	arg01, #5
077d8     60 EC BF FD | 	call	#_compile_immediate_assign
077dc     08 00 90 FD | 	jmp	#LR__0661
077e0                 | LR__0660
077e0     05 12 06 F6 | 	mov	arg01, #5
077e4     8C E2 BF FD | 	call	#_compile_immediate
077e8                 | LR__0661
077e8                 | ' 
077e8                 | ' 
077e8                 | ' return 0
077e8     00 FA 05 F6 | 	mov	result1, #0
077ec     A7 F0 03 F6 | 	mov	ptra, fp
077f0     B2 00 A0 FD | 	call	#popregs_
077f4                 | _compile_else_ret
077f4     2D 00 64 FD | 	ret
077f8                 | 
077f8                 | ' 
077f8                 | ' 
077f8                 | ' function compile_dim() as ulong  
077f8                 | _compile_dim
077f8     11 4A 05 F6 | 	mov	COUNT_, #17
077fc     A8 00 A0 FD | 	call	#pushregs_
07800     01 1E 06 F6 | 	mov	local01, #1
07804     01 20 06 F6 | 	mov	local02, #1
07808     01 22 06 F6 | 	mov	local03, #1
0780c                 | ' 
0780c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0780c                 | ' 
0780c                 | ' if isname(lparts(ct).part$) then 
0780c     57 00 00 FF 
07810     28 E4 05 F1 | 	add	objptr, ##44584
07814     F2 18 02 FB | 	rdlong	arg04, objptr
07818     03 18 66 F0 | 	shl	arg04, #3
0781c     02 00 00 FF 
07820     38 E4 85 F1 | 	sub	objptr, ##1080
07824     F2 18 02 F1 | 	add	arg04, objptr
07828     0C 13 02 FB | 	rdlong	arg01, arg04
0782c     54 00 00 FF 
07830     F0 E5 85 F1 | 	sub	objptr, ##43504
07834     F0 D2 BF FD | 	call	#_isname
07838     00 FA 0D F2 | 	cmp	result1, #0 wz
0783c     AC 05 90 AD |  if_e	jmp	#LR__0694
07840     57 00 00 FF 
07844     28 E4 05 F1 | 	add	objptr, ##44584
07848     F2 24 02 FB | 	rdlong	local04, objptr
0784c     03 24 66 F0 | 	shl	local04, #3
07850     02 00 00 FF 
07854     38 E4 85 F1 | 	sub	objptr, ##1080
07858     F2 24 02 F1 | 	add	local04, objptr
0785c     12 27 02 FB | 	rdlong	local05, local04
07860     01 28 66 F6 | 	neg	local06, #1
07864                 | '   varname2$=lparts(ct).part$ 
07864                 | '   j=-1
07864                 | '   if varnum>0 then
07864     04 E4 85 F1 | 	sub	objptr, #4
07868     F2 2A 02 FB | 	rdlong	local07, objptr
0786c     54 00 00 FF 
07870     EC E5 85 F1 | 	sub	objptr, ##43500
07874     01 2A 56 F2 | 	cmps	local07, #1 wc
07878     58 00 90 CD |  if_b	jmp	#LR__0672
0787c                 | '  '   print "in dim, varnum=";varnum
0787c                 | '     for i=0 to varnum-1
0787c     00 2C 06 F6 | 	mov	local08, #0
07880     54 00 00 FF 
07884     EC E5 05 F1 | 	add	objptr, ##43500
07888     F2 2E 02 FB | 	rdlong	local09, objptr
0788c     54 00 00 FF 
07890     EC E5 85 F1 | 	sub	objptr, ##43500
07894                 | LR__0670
07894     17 2D 52 F2 | 	cmps	local08, local09 wc
07898     38 00 90 3D |  if_ae	jmp	#LR__0671
0789c                 | '       if variables(i).name=varname2$ then j=i : exit
0789c     16 25 02 F6 | 	mov	local04, local08
078a0     04 24 66 F0 | 	shl	local04, #4
078a4     34 00 00 FF 
078a8     EC E5 05 F1 | 	add	objptr, ##27116
078ac     F2 24 02 F1 | 	add	local04, objptr
078b0     12 13 02 FB | 	rdlong	arg01, local04
078b4     13 15 02 F6 | 	mov	arg02, local05
078b8     34 00 00 FF 
078bc     EC E5 85 F1 | 	sub	objptr, ##27116
078c0     40 4A B1 FD | 	call	#__system___string_cmp
078c4     00 FA 0D F2 | 	cmp	result1, #0 wz
078c8     16 29 02 A6 |  if_e	mov	local06, local08
078cc     01 2C 06 51 |  if_ne	add	local08, #1
078d0     C0 FF 9F 5D |  if_ne	jmp	#LR__0670
078d4                 | LR__0671
078d4                 | LR__0672
078d4                 | ' '  if j<>-1 then printerror (42) : return 42
078d4                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
078d4     FF FF 7F FF 
078d8     FF 29 0E F2 | 	cmp	local06, ##-1 wz
078dc     54 00 00 AF 
078e0     EC E5 05 A1 |  if_e	add	objptr, ##43500
078e4     F2 28 02 AB |  if_e	rdlong	local06, objptr
078e8     54 00 00 AF 
078ec     EC E5 85 A1 |  if_e	sub	objptr, ##43500
078f0     78 00 90 AD |  if_e	jmp	#LR__0673
078f4     00 12 06 F6 | 	mov	arg01, #0
078f8     70 A3 B1 FD | 	call	#__system___getiolock_0474
078fc     FD 12 02 F6 | 	mov	arg01, result1
07900     D8 49 B1 FD | 	call	#__system___lockmem
07904     5E 01 00 FF 
07908     96 15 06 F6 | 	mov	arg02, ##@LR__4883
0790c     00 12 06 F6 | 	mov	arg01, #0
07910     00 16 06 F6 | 	mov	arg03, #0
07914     C8 56 B1 FD | 	call	#__system___basic_print_string
07918     7B 00 00 FF 
0791c     74 E4 05 F1 | 	add	objptr, ##63092
07920     F2 14 02 FB | 	rdlong	arg02, objptr
07924     7B 00 00 FF 
07928     74 E4 85 F1 | 	sub	objptr, ##63092
0792c     00 12 06 F6 | 	mov	arg01, #0
07930     00 16 06 F6 | 	mov	arg03, #0
07934     0A 18 06 F6 | 	mov	arg04, #10
07938     28 57 B1 FD | 	call	#__system___basic_print_unsigned
0793c     5E 01 00 FF 
07940     A4 15 06 F6 | 	mov	arg02, ##@LR__4884
07944     00 12 06 F6 | 	mov	arg01, #0
07948     00 16 06 F6 | 	mov	arg03, #0
0794c     90 56 B1 FD | 	call	#__system___basic_print_string
07950     00 12 06 F6 | 	mov	arg01, #0
07954     0A 14 06 F6 | 	mov	arg02, #10
07958     00 16 06 F6 | 	mov	arg03, #0
0795c     28 56 B1 FD | 	call	#__system___basic_print_char
07960     00 12 06 F6 | 	mov	arg01, #0
07964     04 A3 B1 FD | 	call	#__system___getiolock_0474
07968     FD 00 68 FC | 	wrlong	#0, result1
0796c                 | LR__0673
0796c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
0796c     57 00 00 FF 
07970     28 E4 05 F1 | 	add	objptr, ##44584
07974     F2 18 02 FB | 	rdlong	arg04, objptr
07978     01 18 06 F1 | 	add	arg04, #1
0797c     03 18 66 F0 | 	shl	arg04, #3
07980     02 00 00 FF 
07984     38 E4 85 F1 | 	sub	objptr, ##1080
07988     F2 18 02 F1 | 	add	arg04, objptr
0798c     0C 13 02 FB | 	rdlong	arg01, arg04
07990     5E 01 00 FF 
07994     C5 15 06 F6 | 	mov	arg02, ##@LR__4885
07998     54 00 00 FF 
0799c     F0 E5 85 F1 | 	sub	objptr, ##43504
079a0     60 49 B1 FD | 	call	#__system___string_cmp
079a4     00 FA 0D F2 | 	cmp	result1, #0 wz
079a8     50 00 90 AD |  if_e	jmp	#LR__0674
079ac     57 00 00 FF 
079b0     28 E4 05 F1 | 	add	objptr, ##44584
079b4     F2 2E 02 FB | 	rdlong	local09, objptr
079b8     01 2E 06 F1 | 	add	local09, #1
079bc     03 2E 66 F0 | 	shl	local09, #3
079c0     02 00 00 FF 
079c4     38 E4 85 F1 | 	sub	objptr, ##1080
079c8     F2 2E 02 F1 | 	add	local09, objptr
079cc     17 13 02 FB | 	rdlong	arg01, local09
079d0     5E 01 00 FF 
079d4     C7 15 06 F6 | 	mov	arg02, ##@LR__4886
079d8     54 00 00 FF 
079dc     F0 E5 85 F1 | 	sub	objptr, ##43504
079e0     20 49 B1 FD | 	call	#__system___string_cmp
079e4     00 FA 0D F2 | 	cmp	result1, #0 wz
079e8     10 00 90 AD |  if_e	jmp	#LR__0674
079ec     2B 12 06 F6 | 	mov	arg01, #43
079f0     64 11 B1 FD | 	call	#_printerror
079f4     2B FA 05 F6 | 	mov	result1, #43
079f8     00 05 90 FD | 	jmp	#LR__0696
079fc                 | LR__0674
079fc                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
079fc     57 00 00 FF 
07a00     28 E4 05 F1 | 	add	objptr, ##44584
07a04     F2 14 02 FB | 	rdlong	arg02, objptr
07a08     01 14 06 F1 | 	add	arg02, #1
07a0c     03 14 66 F0 | 	shl	arg02, #3
07a10     02 00 00 FF 
07a14     38 E4 85 F1 | 	sub	objptr, ##1080
07a18     F2 14 02 F1 | 	add	arg02, objptr
07a1c     0A 13 02 FB | 	rdlong	arg01, arg02
07a20     5E 01 00 FF 
07a24     CA 15 06 F6 | 	mov	arg02, ##@LR__4887
07a28     54 00 00 FF 
07a2c     F0 E5 85 F1 | 	sub	objptr, ##43504
07a30     D0 48 B1 FD | 	call	#__system___string_cmp
07a34     00 FA 0D F2 | 	cmp	result1, #0 wz
07a38     57 00 00 AF 
07a3c     28 E4 05 A1 |  if_e	add	objptr, ##44584
07a40     F2 30 02 AB |  if_e	rdlong	local10, objptr
07a44     57 00 00 AF 
07a48     28 E4 85 A1 |  if_e	sub	objptr, ##44584
07a4c     01 30 06 A1 |  if_e	add	local10, #1
07a50     7C 01 90 AD |  if_e	jmp	#LR__0680
07a54     57 00 00 FF 
07a58     28 E4 05 F1 | 	add	objptr, ##44584
07a5c     F2 30 02 FB | 	rdlong	local10, objptr
07a60     57 00 00 FF 
07a64     28 E4 85 F1 | 	sub	objptr, ##44584
07a68     02 30 06 F1 | 	add	local10, #2
07a6c     00 32 06 F6 | 	mov	local11, #0
07a70                 | '   l=ct+2 : m=0 : do
07a70                 | LR__0675
07a70                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07a70                 | '     if isdec(lparts(l).part$) then 
07a70     18 25 02 F6 | 	mov	local04, local10
07a74     03 24 66 F0 | 	shl	local04, #3
07a78     54 00 00 FF 
07a7c     F0 E5 05 F1 | 	add	objptr, ##43504
07a80     F2 24 02 F1 | 	add	local04, objptr
07a84     12 13 02 FB | 	rdlong	arg01, local04
07a88     54 00 00 FF 
07a8c     F0 E5 85 F1 | 	sub	objptr, ##43504
07a90     38 D7 BF FD | 	call	#_isdec
07a94     00 FA 0D F2 | 	cmp	result1, #0 wz
07a98     44 00 90 AD |  if_e	jmp	#LR__0676
07a9c     19 35 02 F6 | 	mov	local12, local11
07aa0     0F 35 06 F1 | 	add	local12, #local01
07aa4     18 2F 02 F6 | 	mov	local09, local10
07aa8     03 2E 66 F0 | 	shl	local09, #3
07aac     54 00 00 FF 
07ab0     F0 E5 05 F1 | 	add	objptr, ##43504
07ab4     F2 2E 02 F1 | 	add	local09, objptr
07ab8     17 13 02 FB | 	rdlong	arg01, local09
07abc     00 14 06 F6 | 	mov	arg02, #0
07ac0     54 00 00 FF 
07ac4     F0 E5 85 F1 | 	sub	objptr, ##43504
07ac8     04 7A B1 FD | 	call	#__system____builtin_atoi
07acc     FD 36 02 F6 | 	mov	local13, result1
07ad0                 | 	'.live	local13
07ad0                 | 	'.live	local12
07ad0     00 34 8E F9 | 	altd	local12, #0
07ad4     1B 35 02 F6 | 	mov	local12, local13
07ad8     01 32 06 F1 | 	add	local11, #1
07adc     10 00 90 FD | 	jmp	#LR__0677
07ae0                 | LR__0676
07ae0     11 12 06 F6 | 	mov	arg01, #17
07ae4     70 10 B1 FD | 	call	#_printerror
07ae8                 | '       printerror (17)  : return(17)
07ae8     11 FA 05 F6 | 	mov	result1, #17
07aec     0C 04 90 FD | 	jmp	#LR__0696
07af0                 | LR__0677
07af0                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07af0     18 25 02 F6 | 	mov	local04, local10
07af4     01 24 06 F1 | 	add	local04, #1
07af8     03 24 66 F0 | 	shl	local04, #3
07afc     54 00 00 FF 
07b00     F0 E5 05 F1 | 	add	objptr, ##43504
07b04     F2 24 02 F1 | 	add	local04, objptr
07b08     12 13 02 FB | 	rdlong	arg01, local04
07b0c     5E 01 00 FF 
07b10     CD 15 06 F6 | 	mov	arg02, ##@LR__4888
07b14     54 00 00 FF 
07b18     F0 E5 85 F1 | 	sub	objptr, ##43504
07b1c     E4 47 B1 FD | 	call	#__system___string_cmp
07b20     00 FA 0D F2 | 	cmp	result1, #0 wz
07b24     48 00 90 AD |  if_e	jmp	#LR__0678
07b28     18 37 02 F6 | 	mov	local13, local10
07b2c     01 36 06 F1 | 	add	local13, #1
07b30     03 36 66 F0 | 	shl	local13, #3
07b34     54 00 00 FF 
07b38     F0 E5 05 F1 | 	add	objptr, ##43504
07b3c     F2 36 02 F1 | 	add	local13, objptr
07b40     1B 13 02 FB | 	rdlong	arg01, local13
07b44     5E 01 00 FF 
07b48     CF 15 06 F6 | 	mov	arg02, ##@LR__4889
07b4c     54 00 00 FF 
07b50     F0 E5 85 F1 | 	sub	objptr, ##43504
07b54     AC 47 B1 FD | 	call	#__system___string_cmp
07b58     00 FA 0D F2 | 	cmp	result1, #0 wz
07b5c     10 00 90 AD |  if_e	jmp	#LR__0678
07b60     2C 12 06 F6 | 	mov	arg01, #44
07b64     F0 0F B1 FD | 	call	#_printerror
07b68     2C FA 05 F6 | 	mov	result1, #44
07b6c     8C 03 90 FD | 	jmp	#LR__0696
07b70                 | LR__0678
07b70     02 30 06 F1 | 	add	local10, #2
07b74     18 25 02 F6 | 	mov	local04, local10
07b78     01 24 86 F1 | 	sub	local04, #1
07b7c     03 24 66 F0 | 	shl	local04, #3
07b80     54 00 00 FF 
07b84     F0 E5 05 F1 | 	add	objptr, ##43504
07b88     F2 24 02 F1 | 	add	local04, objptr
07b8c     12 13 02 FB | 	rdlong	arg01, local04
07b90     5E 01 00 FF 
07b94     D1 15 06 F6 | 	mov	arg02, ##@LR__4890
07b98     54 00 00 FF 
07b9c     F0 E5 85 F1 | 	sub	objptr, ##43504
07ba0     60 47 B1 FD | 	call	#__system___string_cmp
07ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ba8     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07bac     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0675
07bb0                 | '   if m>3 then printerror(45): return(45)
07bb0     04 32 56 F2 | 	cmps	local11, #4 wc
07bb4     10 00 90 CD |  if_b	jmp	#LR__0679
07bb8     2D 12 06 F6 | 	mov	arg01, #45
07bbc     98 0F B1 FD | 	call	#_printerror
07bc0     2D FA 05 F6 | 	mov	result1, #45
07bc4     34 03 90 FD | 	jmp	#LR__0696
07bc8                 | LR__0679
07bc8     00 39 06 F6 | 	mov	local14, #256
07bcc     0C 3A 06 F6 | 	mov	local15, #12
07bd0                 | LR__0680
07bd0                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07bd0                 | '   arraytype=array_no_type : esize=12
07bd0                 | ' 1350 
07bd0                 | '   if lparts(l).part$="as" then
07bd0     18 25 02 F6 | 	mov	local04, local10
07bd4     03 24 66 F0 | 	shl	local04, #3
07bd8     54 00 00 FF 
07bdc     F0 E5 05 F1 | 	add	objptr, ##43504
07be0     F2 24 02 F1 | 	add	local04, objptr
07be4     12 13 02 FB | 	rdlong	arg01, local04
07be8     5E 01 00 FF 
07bec     D3 15 06 F6 | 	mov	arg02, ##@LR__4891
07bf0     54 00 00 FF 
07bf4     F0 E5 85 F1 | 	sub	objptr, ##43504
07bf8     08 47 B1 FD | 	call	#__system___string_cmp
07bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
07c00     F8 01 90 5D |  if_ne	jmp	#LR__0695
07c04                 | '     select case lparts(l+1).part$
07c04     18 35 02 F6 | 	mov	local12, local10
07c08     01 34 06 F1 | 	add	local12, #1
07c0c     03 34 66 F0 | 	shl	local12, #3
07c10     54 00 00 FF 
07c14     F0 E5 05 F1 | 	add	objptr, ##43504
07c18     F2 34 02 F1 | 	add	local12, objptr
07c1c     1A 3D 02 FB | 	rdlong	local16, local12
07c20     5E 01 00 FF 
07c24     D6 15 06 F6 | 	mov	arg02, ##@LR__4892
07c28     1E 13 02 F6 | 	mov	arg01, local16
07c2c     54 00 00 FF 
07c30     F0 E5 85 F1 | 	sub	objptr, ##43504
07c34     CC 46 B1 FD | 	call	#__system___string_cmp
07c38     00 FA 0D F2 | 	cmp	result1, #0 wz
07c3c     0C 01 90 AD |  if_e	jmp	#LR__0681
07c40     5E 01 00 FF 
07c44     DB 15 06 F6 | 	mov	arg02, ##@LR__4893
07c48     1E 13 02 F6 | 	mov	arg01, local16
07c4c     B4 46 B1 FD | 	call	#__system___string_cmp
07c50     00 FA 0D F2 | 	cmp	result1, #0 wz
07c54     00 01 90 AD |  if_e	jmp	#LR__0682
07c58     5E 01 00 FF 
07c5c     E1 15 06 F6 | 	mov	arg02, ##@LR__4894
07c60     1E 13 02 F6 | 	mov	arg01, local16
07c64     9C 46 B1 FD | 	call	#__system___string_cmp
07c68     00 FA 0D F2 | 	cmp	result1, #0 wz
07c6c     F4 00 90 AD |  if_e	jmp	#LR__0683
07c70     5E 01 00 FF 
07c74     E7 15 06 F6 | 	mov	arg02, ##@LR__4895
07c78     1E 13 02 F6 | 	mov	arg01, local16
07c7c     84 46 B1 FD | 	call	#__system___string_cmp
07c80     00 FA 0D F2 | 	cmp	result1, #0 wz
07c84     E8 00 90 AD |  if_e	jmp	#LR__0684
07c88     5E 01 00 FF 
07c8c     EE 15 06 F6 | 	mov	arg02, ##@LR__4896
07c90     1E 13 02 F6 | 	mov	arg01, local16
07c94     6C 46 B1 FD | 	call	#__system___string_cmp
07c98     00 FA 0D F2 | 	cmp	result1, #0 wz
07c9c     DC 00 90 AD |  if_e	jmp	#LR__0685
07ca0     5E 01 00 FF 
07ca4     F3 15 06 F6 | 	mov	arg02, ##@LR__4897
07ca8     1E 13 02 F6 | 	mov	arg01, local16
07cac     54 46 B1 FD | 	call	#__system___string_cmp
07cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
07cb4     D0 00 90 AD |  if_e	jmp	#LR__0686
07cb8     5E 01 00 FF 
07cbc     FB 15 06 F6 | 	mov	arg02, ##@LR__4898
07cc0     1E 13 02 F6 | 	mov	arg01, local16
07cc4     3C 46 B1 FD | 	call	#__system___string_cmp
07cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07ccc     C4 00 90 AD |  if_e	jmp	#LR__0687
07cd0     5F 01 00 FF 
07cd4     01 14 06 F6 | 	mov	arg02, ##@LR__4899
07cd8     1E 13 02 F6 | 	mov	arg01, local16
07cdc     24 46 B1 FD | 	call	#__system___string_cmp
07ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
07ce4     B8 00 90 AD |  if_e	jmp	#LR__0688
07ce8     5F 01 00 FF 
07cec     07 14 06 F6 | 	mov	arg02, ##@LR__4900
07cf0     1E 13 02 F6 | 	mov	arg01, local16
07cf4     0C 46 B1 FD | 	call	#__system___string_cmp
07cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cfc     AC 00 90 AD |  if_e	jmp	#LR__0689
07d00     5F 01 00 FF 
07d04     0E 14 06 F6 | 	mov	arg02, ##@LR__4901
07d08     1E 13 02 F6 | 	mov	arg01, local16
07d0c     F4 45 B1 FD | 	call	#__system___string_cmp
07d10     00 FA 0D F2 | 	cmp	result1, #0 wz
07d14     A0 00 90 AD |  if_e	jmp	#LR__0690
07d18     5F 01 00 FF 
07d1c     15 14 06 F6 | 	mov	arg02, ##@LR__4902
07d20     1E 13 02 F6 | 	mov	arg01, local16
07d24     DC 45 B1 FD | 	call	#__system___string_cmp
07d28     00 FA 0D F2 | 	cmp	result1, #0 wz
07d2c     94 00 90 AD |  if_e	jmp	#LR__0691
07d30     5F 01 00 FF 
07d34     1C 14 06 F6 | 	mov	arg02, ##@LR__4903
07d38     1E 13 02 F6 | 	mov	arg01, local16
07d3c     C4 45 B1 FD | 	call	#__system___string_cmp
07d40     00 FA 0D F2 | 	cmp	result1, #0 wz
07d44     88 00 90 AD |  if_e	jmp	#LR__0692
07d48     90 00 90 FD | 	jmp	#LR__0693
07d4c                 | LR__0681
07d4c     01 39 06 F6 | 	mov	local14, #257
07d50     01 3A 06 F6 | 	mov	local15, #1
07d54     A4 00 90 FD | 	jmp	#LR__0695
07d58                 | LR__0682
07d58     02 39 06 F6 | 	mov	local14, #258
07d5c     01 3A 06 F6 | 	mov	local15, #1
07d60     98 00 90 FD | 	jmp	#LR__0695
07d64                 | LR__0683
07d64     03 39 06 F6 | 	mov	local14, #259
07d68     02 3A 06 F6 | 	mov	local15, #2
07d6c     8C 00 90 FD | 	jmp	#LR__0695
07d70                 | LR__0684
07d70     04 39 06 F6 | 	mov	local14, #260
07d74     02 3A 06 F6 | 	mov	local15, #2
07d78     80 00 90 FD | 	jmp	#LR__0695
07d7c                 | LR__0685
07d7c     05 39 06 F6 | 	mov	local14, #261
07d80     04 3A 06 F6 | 	mov	local15, #4
07d84     74 00 90 FD | 	jmp	#LR__0695
07d88                 | LR__0686
07d88     05 39 06 F6 | 	mov	local14, #261
07d8c     04 3A 06 F6 | 	mov	local15, #4
07d90     68 00 90 FD | 	jmp	#LR__0695
07d94                 | LR__0687
07d94     06 39 06 F6 | 	mov	local14, #262
07d98     04 3A 06 F6 | 	mov	local15, #4
07d9c     5C 00 90 FD | 	jmp	#LR__0695
07da0                 | LR__0688
07da0     07 39 06 F6 | 	mov	local14, #263
07da4     08 3A 06 F6 | 	mov	local15, #8
07da8     50 00 90 FD | 	jmp	#LR__0695
07dac                 | LR__0689
07dac     08 39 06 F6 | 	mov	local14, #264
07db0     08 3A 06 F6 | 	mov	local15, #8
07db4     44 00 90 FD | 	jmp	#LR__0695
07db8                 | LR__0690
07db8     09 39 06 F6 | 	mov	local14, #265
07dbc     04 3A 06 F6 | 	mov	local15, #4
07dc0     38 00 90 FD | 	jmp	#LR__0695
07dc4                 | LR__0691
07dc4     0A 39 06 F6 | 	mov	local14, #266
07dc8     08 3A 06 F6 | 	mov	local15, #8
07dcc     2C 00 90 FD | 	jmp	#LR__0695
07dd0                 | LR__0692
07dd0     0B 39 06 F6 | 	mov	local14, #267
07dd4     04 3A 06 F6 | 	mov	local15, #4
07dd8     20 00 90 FD | 	jmp	#LR__0695
07ddc                 | LR__0693
07ddc     2F 12 06 F6 | 	mov	arg01, #47
07de0     74 0D B1 FD | 	call	#_printerror
07de4     2F FA 05 F6 | 	mov	result1, #47
07de8     10 01 90 FD | 	jmp	#LR__0696
07dec                 | LR__0694
07dec     2E 12 06 F6 | 	mov	arg01, #46
07df0     64 0D B1 FD | 	call	#_printerror
07df4                 | '   printerror(46): return 46
07df4     2E FA 05 F6 | 	mov	result1, #46
07df8     00 01 90 FD | 	jmp	#LR__0696
07dfc                 | LR__0695
07dfc     0F 3B 02 FD | 	qmul	local15, local01
07e00     18 2A 62 FD | 	getqx	local07
07e04     10 2B 02 FD | 	qmul	local07, local02
07e08     18 3C 62 FD | 	getqx	local16
07e0c     11 3D 02 FD | 	qmul	local16, local03
07e10     7B 00 00 FF 
07e14     5C E4 05 F1 | 	add	objptr, ##63068
07e18     F2 3E 02 FB | 	rdlong	local17, objptr
07e1c     1C 15 02 F6 | 	mov	arg02, local14
07e20     18 3C 62 FD | 	getqx	local16
07e24     1E 3F 82 F1 | 	sub	local17, local16
07e28     10 3E 86 F1 | 	sub	local17, #16
07e2c     0F 3E 26 F5 | 	andn	local17, #15
07e30     F2 3E 62 FC | 	wrlong	local17, objptr
07e34     7B 00 00 FF 
07e38     5C E4 85 F1 | 	sub	objptr, ##63068
07e3c     1F 13 02 F6 | 	mov	arg01, local17
07e40     C0 0E B1 FD | 	call	#_psdpoke
07e44     1F 13 02 F6 | 	mov	arg01, local17
07e48     02 12 06 F1 | 	add	arg01, #2
07e4c     1D 15 02 F6 | 	mov	arg02, local15
07e50     B0 0E B1 FD | 	call	#_psdpoke
07e54     1F 13 02 F6 | 	mov	arg01, local17
07e58     04 12 06 F1 | 	add	arg01, #4
07e5c     0F 15 02 F6 | 	mov	arg02, local01
07e60     58 0E B1 FD | 	call	#_pslpoke
07e64     1F 13 02 F6 | 	mov	arg01, local17
07e68     08 12 06 F1 | 	add	arg01, #8
07e6c     10 15 02 F6 | 	mov	arg02, local02
07e70     48 0E B1 FD | 	call	#_pslpoke
07e74     1F 13 02 F6 | 	mov	arg01, local17
07e78     0C 12 06 F1 | 	add	arg01, #12
07e7c     11 15 02 F6 | 	mov	arg02, local03
07e80     38 0E B1 FD | 	call	#_pslpoke
07e84     14 35 02 F6 | 	mov	local12, local06
07e88     04 34 66 F0 | 	shl	local12, #4
07e8c     34 00 00 FF 
07e90     EC E5 05 F1 | 	add	objptr, ##27116
07e94     F2 34 02 F1 | 	add	local12, objptr
07e98     1A 27 62 FC | 	wrlong	local05, local12
07e9c     14 35 02 F6 | 	mov	local12, local06
07ea0     04 34 66 F0 | 	shl	local12, #4
07ea4     F2 34 02 F1 | 	add	local12, objptr
07ea8     04 34 06 F1 | 	add	local12, #4
07eac     1A 3F 62 FC | 	wrlong	local17, local12
07eb0     14 35 02 F6 | 	mov	local12, local06
07eb4     04 34 66 F0 | 	shl	local12, #4
07eb8     F2 34 02 F1 | 	add	local12, objptr
07ebc     0C 34 06 F1 | 	add	local12, #12
07ec0     1A 39 62 FC | 	wrlong	local14, local12
07ec4                 | ' memtop=arrayptr
07ec4                 | ' 
07ec4                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
07ec4                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
07ec4                 | ' pslpoke arrayptr+4,dims(0)
07ec4                 | ' pslpoke arrayptr+8,dims(1)
07ec4                 | ' pslpoke arrayptr+12,dims(2)
07ec4                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
07ec4                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
07ec4                 | ' 
07ec4                 | ' 
07ec4                 | ' variables(j).name=varname2$
07ec4                 | ' variables(j).value.uresult=arrayptr
07ec4                 | ' variables(j).vartype=arraytype
07ec4                 | ' if j=varnum then varnum+=1
07ec4     20 00 00 FF 
07ec8     00 E4 05 F1 | 	add	objptr, ##16384
07ecc     F2 2A 02 FB | 	rdlong	local07, objptr
07ed0     54 00 00 FF 
07ed4     EC E5 85 F1 | 	sub	objptr, ##43500
07ed8     15 29 0A F2 | 	cmp	local06, local07 wz
07edc     54 00 00 AF 
07ee0     EC E5 05 A1 |  if_e	add	objptr, ##43500
07ee4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07ee8     01 2A 06 A1 |  if_e	add	local07, #1
07eec     F2 2A 62 AC |  if_e	wrlong	local07, objptr
07ef0     54 00 00 AF 
07ef4     EC E5 85 A1 |  if_e	sub	objptr, ##43500
07ef8                 | ' 
07ef8                 | ' return 0
07ef8     00 FA 05 F6 | 	mov	result1, #0
07efc                 | LR__0696
07efc     A7 F0 03 F6 | 	mov	ptra, fp
07f00     B2 00 A0 FD | 	call	#popregs_
07f04                 | _compile_dim_ret
07f04     2D 00 64 FD | 	ret
07f08                 | 
07f08                 | ' 
07f08                 | ' 
07f08                 | ' function compile_for() as ulong  
07f08                 | _compile_for
07f08     07 4A 05 F6 | 	mov	COUNT_, #7
07f0c     A8 00 A0 FD | 	call	#pushregs_
07f10                 | ' 
07f10                 | ' 
07f10                 | ' 
07f10                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07f10     57 00 00 FF 
07f14     28 E4 05 F1 | 	add	objptr, ##44584
07f18     F2 14 02 FB | 	rdlong	arg02, objptr
07f1c     01 14 06 F1 | 	add	arg02, #1
07f20     03 14 66 F0 | 	shl	arg02, #3
07f24     02 00 00 FF 
07f28     38 E4 85 F1 | 	sub	objptr, ##1080
07f2c     F2 14 02 F1 | 	add	arg02, objptr
07f30     0A 13 02 FB | 	rdlong	arg01, arg02
07f34     54 00 00 FF 
07f38     F0 E5 85 F1 | 	sub	objptr, ##43504
07f3c                 | ' 
07f3c                 | ' select case s
07f3c     5D 01 00 FF 
07f40     88 14 06 F6 | 	mov	arg02, ##@LR__4711
07f44     BC 43 B1 FD | 	call	#__system___string_cmp
07f48     00 FA 0D F2 | 	cmp	result1, #0 wz
07f4c     1B FA 05 A6 |  if_e	mov	result1, #27
07f50     00 FA 05 56 |  if_ne	mov	result1, #0
07f54     00 FA 0D F2 | 	cmp	result1, #0 wz
07f58     0C 00 90 AD |  if_e	jmp	#LR__0700
07f5c     05 12 06 F6 | 	mov	arg01, #5
07f60     D8 E4 BF FD | 	call	#_compile_immediate_assign
07f64     10 00 90 FD | 	jmp	#LR__0701
07f68                 | LR__0700
07f68     20 12 06 F6 | 	mov	arg01, #32
07f6c     48 E9 BF FD | 	call	#_compile_error
07f70     20 FA 05 F6 | 	mov	result1, #32
07f74     E8 02 90 FD | 	jmp	#LR__0707
07f78                 | LR__0701
07f78     6A 00 00 FF 
07f7c     60 E4 05 F1 | 	add	objptr, ##54368
07f80     F2 12 02 FB | 	rdlong	arg01, objptr
07f84     09 25 02 F6 | 	mov	local04, arg01
07f88     01 24 86 F1 | 	sub	local04, #1
07f8c     12 15 02 F6 | 	mov	arg02, local04
07f90     01 14 66 F0 | 	shl	arg02, #1
07f94     12 15 02 F1 | 	add	arg02, local04
07f98     02 14 66 F0 | 	shl	arg02, #2
07f9c     03 00 00 FF 
07fa0     00 E4 85 F1 | 	sub	objptr, ##1536
07fa4     F2 14 02 F1 | 	add	arg02, objptr
07fa8     0A 1F 02 FB | 	rdlong	local01, arg02
07fac     04 14 06 F1 | 	add	arg02, #4
07fb0     0A 27 02 FB | 	rdlong	local05, arg02
07fb4     01 12 86 F1 | 	sub	arg01, #1
07fb8     09 29 02 F6 | 	mov	local06, arg01
07fbc     01 28 66 F0 | 	shl	local06, #1
07fc0     09 29 02 F1 | 	add	local06, arg01
07fc4     02 28 66 F0 | 	shl	local06, #2
07fc8     F2 28 02 F1 | 	add	local06, objptr
07fcc     08 28 06 F1 | 	add	local06, #8
07fd0     14 13 02 FB | 	rdlong	arg01, local06
07fd4     13 21 02 F6 | 	mov	local02, local05
07fd8     09 23 02 F6 | 	mov	local03, arg01
07fdc                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
07fdc                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
07fdc     17 22 0E F2 | 	cmp	local03, #23 wz
07fe0     67 00 00 FF 
07fe4     60 E4 85 F1 | 	sub	objptr, ##52832
07fe8     10 00 90 AD |  if_e	jmp	#LR__0702
07fec     22 12 06 F6 | 	mov	arg01, #34
07ff0     C4 E8 BF FD | 	call	#_compile_error
07ff4     22 FA 05 F6 | 	mov	result1, #34
07ff8     64 02 90 FD | 	jmp	#LR__0707
07ffc                 | LR__0702
07ffc     0F 2B 02 F6 | 	mov	local07, local01
08000                 | ' varnum=t1.result.uresult
08000                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
08000     57 00 00 FF 
08004     28 E4 05 F1 | 	add	objptr, ##44584
08008     F2 24 02 FB | 	rdlong	local04, objptr
0800c     03 24 66 F0 | 	shl	local04, #3
08010     02 00 00 FF 
08014     38 E4 85 F1 | 	sub	objptr, ##1080
08018     F2 24 02 F1 | 	add	local04, objptr
0801c     12 13 02 FB | 	rdlong	arg01, local04
08020     5F 01 00 FF 
08024     23 14 06 F6 | 	mov	arg02, ##@LR__4904
08028     54 00 00 FF 
0802c     F0 E5 85 F1 | 	sub	objptr, ##43504
08030     D0 42 B1 FD | 	call	#__system___string_cmp
08034     00 FA 0D F2 | 	cmp	result1, #0 wz
08038     10 00 90 AD |  if_e	jmp	#LR__0703
0803c     21 12 06 F6 | 	mov	arg01, #33
08040     74 E8 BF FD | 	call	#_compile_error
08044     21 FA 05 F6 | 	mov	result1, #33
08048     14 02 90 FD | 	jmp	#LR__0707
0804c                 | LR__0703
0804c     57 00 00 FF 
08050     28 E4 05 F1 | 	add	objptr, ##44584
08054     F2 24 02 FB | 	rdlong	local04, objptr
08058     01 24 06 F1 | 	add	local04, #1
0805c     F2 24 62 FC | 	wrlong	local04, objptr
08060     57 00 00 FF 
08064     28 E4 85 F1 | 	sub	objptr, ##44584
08068     D4 0B B0 FD | 	call	#_expr
0806c                 | ' ct+=1
0806c                 | ' expr()  ' there is "to" value pushed on the stack
0806c                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0806c     57 00 00 FF 
08070     28 E4 05 F1 | 	add	objptr, ##44584
08074     F2 24 02 FB | 	rdlong	local04, objptr
08078     03 24 66 F0 | 	shl	local04, #3
0807c     02 00 00 FF 
08080     38 E4 85 F1 | 	sub	objptr, ##1080
08084     F2 24 02 F1 | 	add	local04, objptr
08088     12 13 02 FB | 	rdlong	arg01, local04
0808c     5F 01 00 FF 
08090     26 14 06 F6 | 	mov	arg02, ##@LR__4905
08094     54 00 00 FF 
08098     F0 E5 85 F1 | 	sub	objptr, ##43504
0809c     64 42 B1 FD | 	call	#__system___string_cmp
080a0     00 FA 0D F2 | 	cmp	result1, #0 wz
080a4     3C 00 90 AD |  if_e	jmp	#LR__0704
080a8     57 00 00 FF 
080ac     28 E4 05 F1 | 	add	objptr, ##44584
080b0     F2 28 02 FB | 	rdlong	local06, objptr
080b4     03 28 66 F0 | 	shl	local06, #3
080b8     02 00 00 FF 
080bc     38 E4 85 F1 | 	sub	objptr, ##1080
080c0     F2 28 02 F1 | 	add	local06, objptr
080c4     14 13 02 FB | 	rdlong	arg01, local06
080c8     5F 01 00 FF 
080cc     2B 14 06 F6 | 	mov	arg02, ##@LR__4906
080d0     54 00 00 FF 
080d4     F0 E5 85 F1 | 	sub	objptr, ##43504
080d8     28 42 B1 FD | 	call	#__system___string_cmp
080dc     00 FA 0D F2 | 	cmp	result1, #0 wz
080e0     24 00 90 5D |  if_ne	jmp	#LR__0705
080e4                 | LR__0704
080e4     57 00 00 FF 
080e8     28 E4 05 F1 | 	add	objptr, ##44584
080ec     F2 28 02 FB | 	rdlong	local06, objptr
080f0     01 28 06 F1 | 	add	local06, #1
080f4     F2 28 62 FC | 	wrlong	local06, objptr
080f8     57 00 00 FF 
080fc     28 E4 85 F1 | 	sub	objptr, ##44584
08100     3C 0B B0 FD | 	call	#_expr
08104     78 00 90 FD | 	jmp	#LR__0706
08108                 | LR__0705
08108     6A 00 00 FF 
0810c     60 E4 05 F1 | 	add	objptr, ##54368
08110     F2 28 02 FB | 	rdlong	local06, objptr
08114     14 27 02 F6 | 	mov	local05, local06
08118     01 26 66 F0 | 	shl	local05, #1
0811c     14 27 02 F1 | 	add	local05, local06
08120     02 26 66 F0 | 	shl	local05, #2
08124     03 00 00 FF 
08128     00 E4 85 F1 | 	sub	objptr, ##1536
0812c     F2 26 02 F1 | 	add	local05, objptr
08130     08 26 06 F1 | 	add	local05, #8
08134     13 39 68 FC | 	wrlong	#28, local05
08138     03 00 00 FF 
0813c     00 E4 05 F1 | 	add	objptr, ##1536
08140     F2 28 02 FB | 	rdlong	local06, objptr
08144     14 27 02 F6 | 	mov	local05, local06
08148     01 26 66 F0 | 	shl	local05, #1
0814c     14 27 02 F1 | 	add	local05, local06
08150     02 26 66 F0 | 	shl	local05, #2
08154     03 00 00 FF 
08158     00 E4 85 F1 | 	sub	objptr, ##1536
0815c     F2 26 02 F1 | 	add	local05, objptr
08160     13 03 68 FC | 	wrlong	#1, local05
08164     03 00 00 FF 
08168     00 E4 05 F1 | 	add	objptr, ##1536
0816c     F2 28 02 FB | 	rdlong	local06, objptr
08170     01 28 06 F1 | 	add	local06, #1
08174     F2 28 62 FC | 	wrlong	local06, objptr
08178     6A 00 00 FF 
0817c     60 E4 85 F1 | 	sub	objptr, ##54368
08180                 | LR__0706
08180     6A 00 00 FF 
08184     60 E4 05 F1 | 	add	objptr, ##54368
08188     F2 28 02 FB | 	rdlong	local06, objptr
0818c     14 27 02 F6 | 	mov	local05, local06
08190     01 26 66 F0 | 	shl	local05, #1
08194     14 27 02 F1 | 	add	local05, local06
08198     02 26 66 F0 | 	shl	local05, #2
0819c     03 00 00 FF 
081a0     00 E4 85 F1 | 	sub	objptr, ##1536
081a4     F2 26 02 F1 | 	add	local05, objptr
081a8     08 26 06 F1 | 	add	local05, #8
081ac     13 39 68 FC | 	wrlong	#28, local05
081b0     03 00 00 FF 
081b4     00 E4 05 F1 | 	add	objptr, ##1536
081b8     F2 28 02 FB | 	rdlong	local06, objptr
081bc     14 27 02 F6 | 	mov	local05, local06
081c0     01 26 66 F0 | 	shl	local05, #1
081c4     14 27 02 F1 | 	add	local05, local06
081c8     02 26 66 F0 | 	shl	local05, #2
081cc     03 00 00 FF 
081d0     00 E4 85 F1 | 	sub	objptr, ##1536
081d4     F2 26 02 F1 | 	add	local05, objptr
081d8     13 2B 62 FC | 	wrlong	local07, local05
081dc     03 00 00 FF 
081e0     00 E4 05 F1 | 	add	objptr, ##1536
081e4     F2 2A 02 FB | 	rdlong	local07, objptr
081e8     01 2A 06 F1 | 	add	local07, #1
081ec     F2 2A 62 FC | 	wrlong	local07, objptr
081f0     15 29 02 F6 | 	mov	local06, local07
081f4     01 28 66 F0 | 	shl	local06, #1
081f8     15 29 02 F1 | 	add	local06, local07
081fc     02 28 66 F0 | 	shl	local06, #2
08200     03 00 00 FF 
08204     00 E4 85 F1 | 	sub	objptr, ##1536
08208     F2 28 02 F1 | 	add	local06, objptr
0820c     08 28 06 F1 | 	add	local06, #8
08210     14 95 68 FC | 	wrlong	#74, local06
08214     03 00 00 FF 
08218     00 E4 05 F1 | 	add	objptr, ##1536
0821c     F2 2A 02 FB | 	rdlong	local07, objptr
08220     15 29 02 F6 | 	mov	local06, local07
08224     01 28 66 F0 | 	shl	local06, #1
08228     15 29 02 F1 | 	add	local06, local07
0822c     02 28 66 F0 | 	shl	local06, #2
08230     03 00 00 FF 
08234     00 E4 85 F1 | 	sub	objptr, ##1536
08238     F2 28 02 F1 | 	add	local06, objptr
0823c     14 01 68 FC | 	wrlong	#0, local06
08240     03 00 00 FF 
08244     00 E4 05 F1 | 	add	objptr, ##1536
08248     F2 2A 02 FB | 	rdlong	local07, objptr
0824c     01 2A 06 F1 | 	add	local07, #1
08250     F2 2A 62 FC | 	wrlong	local07, objptr
08254     6A 00 00 FF 
08258     60 E4 85 F1 | 	sub	objptr, ##54368
0825c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0825c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0825c                 | ' 
0825c                 | ' 
0825c                 | ' return 0
0825c     00 FA 05 F6 | 	mov	result1, #0
08260                 | LR__0707
08260     A7 F0 03 F6 | 	mov	ptra, fp
08264     B2 00 A0 FD | 	call	#popregs_
08268                 | _compile_for_ret
08268     2D 00 64 FD | 	ret
0826c                 | 
0826c                 | ' 
0826c                 | ' 
0826c                 | ' sub do_for()
0826c                 | _do_for
0826c     05 4A 05 F6 | 	mov	COUNT_, #5
08270     A8 00 A0 FD | 	call	#pushregs_
08274     79 00 00 FF 
08278     BC E5 05 F1 | 	add	objptr, ##62396
0827c     F2 24 02 FB | 	rdlong	local04, objptr
08280     01 24 06 F1 | 	add	local04, #1
08284     F2 24 62 FC | 	wrlong	local04, objptr
08288     79 00 00 FF 
0828c     BC E5 85 F1 | 	sub	objptr, ##62396
08290     34 1E B0 FD | 	call	#_pop
08294     FD 1E 02 F6 | 	mov	local01, result1
08298     FE 20 02 F6 | 	mov	local02, result2
0829c     FF 22 02 F6 | 	mov	local03, result3
082a0     79 00 00 FF 
082a4     BC E5 05 F1 | 	add	objptr, ##62396
082a8     F2 24 02 FB | 	rdlong	local04, objptr
082ac     12 27 02 F6 | 	mov	local05, local04
082b0     02 26 66 F0 | 	shl	local05, #2
082b4     12 27 02 F1 | 	add	local05, local04
082b8     02 26 66 F0 | 	shl	local05, #2
082bc     07 00 00 FF 
082c0     40 E5 85 F1 | 	sub	objptr, ##3904
082c4     F2 26 02 F1 | 	add	local05, objptr
082c8     08 26 06 F1 | 	add	local05, #8
082cc     13 1F 62 FC | 	wrlong	local01, local05
082d0     72 00 00 FF 
082d4     7C E4 85 F1 | 	sub	objptr, ##58492
082d8     EC 1D B0 FD | 	call	#_pop
082dc     FD 1E 02 F6 | 	mov	local01, result1
082e0     FE 20 02 F6 | 	mov	local02, result2
082e4     FF 22 02 F6 | 	mov	local03, result3
082e8     79 00 00 FF 
082ec     BC E5 05 F1 | 	add	objptr, ##62396
082f0     F2 24 02 FB | 	rdlong	local04, objptr
082f4     12 27 02 F6 | 	mov	local05, local04
082f8     02 26 66 F0 | 	shl	local05, #2
082fc     12 27 02 F1 | 	add	local05, local04
08300     02 26 66 F0 | 	shl	local05, #2
08304     07 00 00 FF 
08308     40 E5 85 F1 | 	sub	objptr, ##3904
0830c     F2 26 02 F1 | 	add	local05, objptr
08310     0C 26 06 F1 | 	add	local05, #12
08314     13 1F 62 FC | 	wrlong	local01, local05
08318     72 00 00 FF 
0831c     7C E4 85 F1 | 	sub	objptr, ##58492
08320     A4 1D B0 FD | 	call	#_pop
08324     FD 1E 02 F6 | 	mov	local01, result1
08328     FE 20 02 F6 | 	mov	local02, result2
0832c     FF 22 02 F6 | 	mov	local03, result3
08330     79 00 00 FF 
08334     BC E5 05 F1 | 	add	objptr, ##62396
08338     F2 24 02 FB | 	rdlong	local04, objptr
0833c     12 27 02 F6 | 	mov	local05, local04
08340     02 26 66 F0 | 	shl	local05, #2
08344     12 27 02 F1 | 	add	local05, local04
08348     02 26 66 F0 | 	shl	local05, #2
0834c     07 00 00 FF 
08350     40 E5 85 F1 | 	sub	objptr, ##3904
08354     F2 26 02 F1 | 	add	local05, objptr
08358     10 26 06 F1 | 	add	local05, #16
0835c     13 1F 62 FC | 	wrlong	local01, local05
08360                 | ' fortop+=1
08360                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
08360                 | ' 'if i> maxfor then printerror(36) : return
08360                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
08360                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
08360                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
08360                 | ' if compiledline(lineptr_e).result_type=token_end then
08360     08 00 00 FF 
08364     18 E4 85 F1 | 	sub	objptr, ##4120
08368     F2 1E 02 FB | 	rdlong	local01, objptr
0836c     0F 27 02 F6 | 	mov	local05, local01
08370     01 26 66 F0 | 	shl	local05, #1
08374     0F 27 02 F1 | 	add	local05, local01
08378     02 26 66 F0 | 	shl	local05, #2
0837c     03 00 00 FF 
08380     04 E4 85 F1 | 	sub	objptr, ##1540
08384     F2 26 02 F1 | 	add	local05, objptr
08388     08 26 06 F1 | 	add	local05, #8
0838c     13 27 02 FB | 	rdlong	local05, local05
08390     FE 27 0E F2 | 	cmp	local05, #510 wz
08394     67 00 00 FF 
08398     60 E4 85 F1 | 	sub	objptr, ##52832
0839c     70 00 90 5D |  if_ne	jmp	#LR__0710
083a0     79 00 00 FF 
083a4     BC E5 05 F1 | 	add	objptr, ##62396
083a8     F2 1E 02 FB | 	rdlong	local01, objptr
083ac     0F 27 02 F6 | 	mov	local05, local01
083b0     02 26 66 F0 | 	shl	local05, #2
083b4     0F 27 02 F1 | 	add	local05, local01
083b8     02 26 66 F0 | 	shl	local05, #2
083bc     07 00 00 FF 
083c0     40 E5 85 F1 | 	sub	objptr, ##3904
083c4     F2 26 02 F1 | 	add	local05, objptr
083c8     07 00 00 FF 
083cc     18 E5 05 F1 | 	add	objptr, ##3864
083d0     F2 1E 02 FB | 	rdlong	local01, objptr
083d4     13 1F 62 FC | 	wrlong	local01, local05
083d8     28 E4 05 F1 | 	add	objptr, #40
083dc     F2 1E 02 FB | 	rdlong	local01, objptr
083e0     0F 27 02 F6 | 	mov	local05, local01
083e4     02 26 66 F0 | 	shl	local05, #2
083e8     0F 27 02 F1 | 	add	local05, local01
083ec     02 26 66 F0 | 	shl	local05, #2
083f0     07 00 00 FF 
083f4     40 E5 85 F1 | 	sub	objptr, ##3904
083f8     F2 26 02 F1 | 	add	local05, objptr
083fc     04 26 06 F1 | 	add	local05, #4
08400     13 01 68 FC | 	wrlong	#0, local05
08404     72 00 00 FF 
08408     7C E4 85 F1 | 	sub	objptr, ##58492
0840c     7C 00 90 FD | 	jmp	#LR__0711
08410                 | LR__0710
08410     79 00 00 FF 
08414     BC E5 05 F1 | 	add	objptr, ##62396
08418     F2 1E 02 FB | 	rdlong	local01, objptr
0841c     0F 27 02 F6 | 	mov	local05, local01
08420     02 26 66 F0 | 	shl	local05, #2
08424     0F 27 02 F1 | 	add	local05, local01
08428     02 26 66 F0 | 	shl	local05, #2
0842c     07 00 00 FF 
08430     40 E5 85 F1 | 	sub	objptr, ##3904
08434     F2 26 02 F1 | 	add	local05, objptr
08438     07 00 00 FF 
0843c     20 E5 05 F1 | 	add	objptr, ##3872
08440     F2 1E 02 FB | 	rdlong	local01, objptr
08444     13 1F 62 FC | 	wrlong	local01, local05
08448     20 E4 05 F1 | 	add	objptr, #32
0844c     F2 1E 02 FB | 	rdlong	local01, objptr
08450     0F 27 02 F6 | 	mov	local05, local01
08454     02 26 66 F0 | 	shl	local05, #2
08458     0F 27 02 F1 | 	add	local05, local01
0845c     02 26 66 F0 | 	shl	local05, #2
08460     07 00 00 FF 
08464     40 E5 85 F1 | 	sub	objptr, ##3904
08468     F2 26 02 F1 | 	add	local05, objptr
0846c     08 00 00 FF 
08470     18 E4 85 F1 | 	sub	objptr, ##4120
08474     F2 1E 02 FB | 	rdlong	local01, objptr
08478     6A 00 00 FF 
0847c     64 E4 85 F1 | 	sub	objptr, ##54372
08480     01 1E 06 F1 | 	add	local01, #1
08484     04 26 06 F1 | 	add	local05, #4
08488     13 1F 62 FC | 	wrlong	local01, local05
0848c                 | LR__0711
0848c     A7 F0 03 F6 | 	mov	ptra, fp
08490     B2 00 A0 FD | 	call	#popregs_
08494                 | _do_for_ret
08494     2D 00 64 FD | 	ret
08498                 | 
08498                 | ' 
08498                 | ' ' now do_next todo
08498                 | ' 
08498                 | ' sub do_next()
08498                 | _do_next
08498     04 4A 05 F6 | 	mov	COUNT_, #4
0849c     A8 00 A0 FD | 	call	#pushregs_
084a0     24 1C B0 FD | 	call	#_pop
084a4     FD 1E 02 F6 | 	mov	local01, result1
084a8     FE 20 02 F6 | 	mov	local02, result2
084ac     FF 22 02 F6 | 	mov	local03, result3
084b0                 | ' 
084b0                 | ' t1=pop() :varnum=t1.result.uresult
084b0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
084b0     79 00 00 FF 
084b4     BC E5 05 F1 | 	add	objptr, ##62396
084b8     F2 12 02 FB | 	rdlong	arg01, objptr
084bc     09 25 02 F6 | 	mov	local04, arg01
084c0     02 24 66 F0 | 	shl	local04, #2
084c4     09 25 02 F1 | 	add	local04, arg01
084c8     02 24 66 F0 | 	shl	local04, #2
084cc     07 00 00 FF 
084d0     40 E5 85 F1 | 	sub	objptr, ##3904
084d4     F2 24 02 F1 | 	add	local04, objptr
084d8     08 24 06 F1 | 	add	local04, #8
084dc     12 25 02 FB | 	rdlong	local04, local04
084e0     0F 25 0A F2 | 	cmp	local04, local01 wz
084e4     72 00 00 FF 
084e8     7C E4 85 F1 | 	sub	objptr, ##58492
084ec     0C 00 90 AD |  if_e	jmp	#LR__0720
084f0     25 12 06 F6 | 	mov	arg01, #37
084f4     60 06 B1 FD | 	call	#_printerror
084f8     28 02 90 FD | 	jmp	#LR__0724
084fc                 | LR__0720
084fc     79 00 00 FF 
08500     BC E5 05 F1 | 	add	objptr, ##62396
08504     F2 12 02 FB | 	rdlong	arg01, objptr
08508     09 25 02 F6 | 	mov	local04, arg01
0850c     02 24 66 F0 | 	shl	local04, #2
08510     09 25 02 F1 | 	add	local04, arg01
08514     02 24 66 F0 | 	shl	local04, #2
08518     07 00 00 FF 
0851c     40 E5 85 F1 | 	sub	objptr, ##3904
08520     F2 24 02 F1 | 	add	local04, objptr
08524     0C 24 06 F1 | 	add	local04, #12
08528     12 25 02 FB | 	rdlong	local04, local04
0852c     0F 13 02 F6 | 	mov	arg01, local01
08530     04 12 66 F0 | 	shl	arg01, #4
08534     3D 00 00 FF 
08538     90 E4 85 F1 | 	sub	objptr, ##31376
0853c     F2 12 02 F1 | 	add	arg01, objptr
08540     0F FF 01 F6 | 	mov	result3, local01
08544     04 FE 65 F0 | 	shl	result3, #4
08548     F2 FE 01 F1 | 	add	result3, objptr
0854c     04 FE 05 F1 | 	add	result3, #4
08550     FF FE 01 FB | 	rdlong	result3, result3
08554     12 FF 01 F1 | 	add	result3, local04
08558     04 12 06 F1 | 	add	arg01, #4
0855c     09 FF 61 FC | 	wrlong	result3, arg01
08560                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08560                 | ' if fortable(fortop).stepval>=0 then
08560     44 00 00 FF 
08564     D0 E5 05 F1 | 	add	objptr, ##35280
08568     F2 12 02 FB | 	rdlong	arg01, objptr
0856c     09 25 02 F6 | 	mov	local04, arg01
08570     02 24 66 F0 | 	shl	local04, #2
08574     09 25 02 F1 | 	add	local04, arg01
08578     02 24 66 F0 | 	shl	local04, #2
0857c     07 00 00 FF 
08580     40 E5 85 F1 | 	sub	objptr, ##3904
08584     F2 24 02 F1 | 	add	local04, objptr
08588     0C 24 06 F1 | 	add	local04, #12
0858c     12 25 02 FB | 	rdlong	local04, local04
08590     00 24 56 F2 | 	cmps	local04, #0 wc
08594     72 00 00 FF 
08598     7C E4 85 F1 | 	sub	objptr, ##58492
0859c     78 00 90 CD |  if_b	jmp	#LR__0721
085a0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
085a0     04 1E 66 F0 | 	shl	local01, #4
085a4     34 00 00 FF 
085a8     EC E5 05 F1 | 	add	objptr, ##27116
085ac     F2 1E 02 F1 | 	add	local01, objptr
085b0     44 00 00 FF 
085b4     D0 E5 05 F1 | 	add	objptr, ##35280
085b8     F2 24 02 FB | 	rdlong	local04, objptr
085bc     12 13 02 F6 | 	mov	arg01, local04
085c0     02 12 66 F0 | 	shl	arg01, #2
085c4     12 13 02 F1 | 	add	arg01, local04
085c8     02 12 66 F0 | 	shl	arg01, #2
085cc     07 00 00 FF 
085d0     40 E5 85 F1 | 	sub	objptr, ##3904
085d4     F2 12 02 F1 | 	add	arg01, objptr
085d8     04 1E 06 F1 | 	add	local01, #4
085dc     0F 25 02 FB | 	rdlong	local04, local01
085e0     10 12 06 F1 | 	add	arg01, #16
085e4     09 13 02 FB | 	rdlong	arg01, arg01
085e8     09 25 5A F2 | 	cmps	local04, arg01 wcz
085ec     72 00 00 FF 
085f0     7C E4 85 F1 | 	sub	objptr, ##58492
085f4     9C 00 90 ED |  if_be	jmp	#LR__0723
085f8     79 00 00 FF 
085fc     BC E5 05 F1 | 	add	objptr, ##62396
08600     F2 24 02 FB | 	rdlong	local04, objptr
08604     01 24 86 F1 | 	sub	local04, #1
08608     F2 24 62 FC | 	wrlong	local04, objptr
0860c     79 00 00 FF 
08610     BC E5 85 F1 | 	sub	objptr, ##62396
08614     0C 01 90 FD | 	jmp	#LR__0724
08618                 | LR__0721
08618                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08618     0F 13 02 F6 | 	mov	arg01, local01
0861c     04 12 66 F0 | 	shl	arg01, #4
08620     34 00 00 FF 
08624     EC E5 05 F1 | 	add	objptr, ##27116
08628     F2 12 02 F1 | 	add	arg01, objptr
0862c     44 00 00 FF 
08630     D0 E5 05 F1 | 	add	objptr, ##35280
08634     F2 24 02 FB | 	rdlong	local04, objptr
08638     12 1F 02 F6 | 	mov	local01, local04
0863c     02 1E 66 F0 | 	shl	local01, #2
08640     12 1F 02 F1 | 	add	local01, local04
08644     02 1E 66 F0 | 	shl	local01, #2
08648     07 00 00 FF 
0864c     40 E5 85 F1 | 	sub	objptr, ##3904
08650     F2 1E 02 F1 | 	add	local01, objptr
08654     04 12 06 F1 | 	add	arg01, #4
08658     09 13 02 FB | 	rdlong	arg01, arg01
0865c     10 1E 06 F1 | 	add	local01, #16
08660     0F 1F 02 FB | 	rdlong	local01, local01
08664     0F 13 52 F2 | 	cmps	arg01, local01 wc
08668     72 00 00 FF 
0866c     7C E4 85 F1 | 	sub	objptr, ##58492
08670     20 00 90 3D |  if_ae	jmp	#LR__0722
08674     79 00 00 FF 
08678     BC E5 05 F1 | 	add	objptr, ##62396
0867c     F2 24 02 FB | 	rdlong	local04, objptr
08680     01 24 86 F1 | 	sub	local04, #1
08684     F2 24 62 FC | 	wrlong	local04, objptr
08688     79 00 00 FF 
0868c     BC E5 85 F1 | 	sub	objptr, ##62396
08690     90 00 90 FD | 	jmp	#LR__0724
08694                 | LR__0722
08694                 | LR__0723
08694     79 00 00 FF 
08698     BC E5 05 F1 | 	add	objptr, ##62396
0869c     F2 1E 02 FB | 	rdlong	local01, objptr
086a0     0F 25 02 F6 | 	mov	local04, local01
086a4     02 24 66 F0 | 	shl	local04, #2
086a8     0F 25 02 F1 | 	add	local04, local01
086ac     02 24 66 F0 | 	shl	local04, #2
086b0     07 00 00 FF 
086b4     40 E5 85 F1 | 	sub	objptr, ##3904
086b8     F2 24 02 F1 | 	add	local04, objptr
086bc     12 25 02 FB | 	rdlong	local04, local04
086c0     07 00 00 FF 
086c4     18 E5 05 F1 | 	add	objptr, ##3864
086c8     F2 24 62 FC | 	wrlong	local04, objptr
086cc     28 E4 05 F1 | 	add	objptr, #40
086d0     F2 1E 02 FB | 	rdlong	local01, objptr
086d4     0F 25 02 F6 | 	mov	local04, local01
086d8     02 24 66 F0 | 	shl	local04, #2
086dc     0F 25 02 F1 | 	add	local04, local01
086e0     02 24 66 F0 | 	shl	local04, #2
086e4     07 00 00 FF 
086e8     40 E5 85 F1 | 	sub	objptr, ##3904
086ec     F2 24 02 F1 | 	add	local04, objptr
086f0     04 24 06 F1 | 	add	local04, #4
086f4     12 25 02 FB | 	rdlong	local04, local04
086f8     07 00 00 FF 
086fc     1C E5 05 F1 | 	add	objptr, ##3868
08700     F2 24 62 FC | 	wrlong	local04, objptr
08704     0F 00 00 FF 
08708     38 E5 85 F1 | 	sub	objptr, ##7992
0870c     F2 24 02 FB | 	rdlong	local04, objptr
08710     01 24 86 F1 | 	sub	local04, #1
08714     04 E4 05 F1 | 	add	objptr, #4
08718     F2 24 62 FC | 	wrlong	local04, objptr
0871c     6A 00 00 FF 
08720     64 E4 85 F1 | 	sub	objptr, ##54372
08724                 | LR__0724
08724     A7 F0 03 F6 | 	mov	ptra, fp
08728     B2 00 A0 FD | 	call	#popregs_
0872c                 | _do_next_ret
0872c     2D 00 64 FD | 	ret
08730                 | 
08730                 | ' 
08730                 | ' 
08730                 | ' function compile_next() as ulong
08730                 | _compile_next
08730     04 4A 05 F6 | 	mov	COUNT_, #4
08734     A8 00 A0 FD | 	call	#pushregs_
08738     57 00 00 FF 
0873c     28 E4 05 F1 | 	add	objptr, ##44584
08740     F2 12 02 FB | 	rdlong	arg01, objptr
08744     03 12 66 F0 | 	shl	arg01, #3
08748     02 00 00 FF 
0874c     38 E4 85 F1 | 	sub	objptr, ##1080
08750     F2 12 02 F1 | 	add	arg01, objptr
08754     09 1F 02 FB | 	rdlong	local01, arg01
08758                 | ' 
08758                 | ' varname$=lparts(ct).part$ 
08758                 | ' 'suffix$=right$(varname$,1)
08758                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08758                 | ' if varnum=0 then compile_error(35)  : return 35
08758     04 E4 85 F1 | 	sub	objptr, #4
0875c     F2 14 0A FB | 	rdlong	arg02, objptr wz
08760     54 00 00 FF 
08764     EC E5 85 F1 | 	sub	objptr, ##43500
08768     10 00 90 5D |  if_ne	jmp	#LR__0730
0876c     23 12 06 F6 | 	mov	arg01, #35
08770     44 E1 BF FD | 	call	#_compile_error
08774     23 FA 05 F6 | 	mov	result1, #35
08778     58 01 90 FD | 	jmp	#LR__0734
0877c                 | LR__0730
0877c     01 20 66 F6 | 	neg	local02, #1
08780                 | ' j=-1
08780                 | ' for i=0 to varnum-1
08780     00 22 06 F6 | 	mov	local03, #0
08784     54 00 00 FF 
08788     EC E5 05 F1 | 	add	objptr, ##43500
0878c     F2 24 02 FB | 	rdlong	local04, objptr
08790     54 00 00 FF 
08794     EC E5 85 F1 | 	sub	objptr, ##43500
08798                 | LR__0731
08798     12 23 12 F2 | 	cmp	local03, local04 wc
0879c     38 00 90 3D |  if_ae	jmp	#LR__0732
087a0                 | '   if variables(i).name=varname$ then j=i : exit
087a0     11 15 02 F6 | 	mov	arg02, local03
087a4     04 14 66 F0 | 	shl	arg02, #4
087a8     34 00 00 FF 
087ac     EC E5 05 F1 | 	add	objptr, ##27116
087b0     F2 14 02 F1 | 	add	arg02, objptr
087b4     0A 13 02 FB | 	rdlong	arg01, arg02
087b8     0F 15 02 F6 | 	mov	arg02, local01
087bc     34 00 00 FF 
087c0     EC E5 85 F1 | 	sub	objptr, ##27116
087c4     3C 3B B1 FD | 	call	#__system___string_cmp
087c8     00 FA 0D F2 | 	cmp	result1, #0 wz
087cc     11 21 02 A6 |  if_e	mov	local02, local03
087d0     01 22 06 51 |  if_ne	add	local03, #1
087d4     C0 FF 9F 5D |  if_ne	jmp	#LR__0731
087d8                 | LR__0732
087d8                 | ' if j=-1 then compile_error(35) : return 35
087d8     FF FF 7F FF 
087dc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
087e0     10 00 90 5D |  if_ne	jmp	#LR__0733
087e4     23 12 06 F6 | 	mov	arg01, #35
087e8     CC E0 BF FD | 	call	#_compile_error
087ec     23 FA 05 F6 | 	mov	result1, #35
087f0     E0 00 90 FD | 	jmp	#LR__0734
087f4                 | LR__0733
087f4     6A 00 00 FF 
087f8     60 E4 05 F1 | 	add	objptr, ##54368
087fc     F2 24 02 FB | 	rdlong	local04, objptr
08800     12 23 02 F6 | 	mov	local03, local04
08804     01 22 66 F0 | 	shl	local03, #1
08808     12 23 02 F1 | 	add	local03, local04
0880c     02 22 66 F0 | 	shl	local03, #2
08810     03 00 00 FF 
08814     00 E4 85 F1 | 	sub	objptr, ##1536
08818     F2 22 02 F1 | 	add	local03, objptr
0881c     08 22 06 F1 | 	add	local03, #8
08820     11 39 68 FC | 	wrlong	#28, local03
08824     03 00 00 FF 
08828     00 E4 05 F1 | 	add	objptr, ##1536
0882c     F2 24 02 FB | 	rdlong	local04, objptr
08830     12 23 02 F6 | 	mov	local03, local04
08834     01 22 66 F0 | 	shl	local03, #1
08838     12 23 02 F1 | 	add	local03, local04
0883c     02 22 66 F0 | 	shl	local03, #2
08840     03 00 00 FF 
08844     00 E4 85 F1 | 	sub	objptr, ##1536
08848     F2 22 02 F1 | 	add	local03, objptr
0884c     11 21 62 FC | 	wrlong	local02, local03
08850     03 00 00 FF 
08854     00 E4 05 F1 | 	add	objptr, ##1536
08858     F2 24 02 FB | 	rdlong	local04, objptr
0885c     01 24 06 F1 | 	add	local04, #1
08860     F2 24 62 FC | 	wrlong	local04, objptr
08864     12 23 02 F6 | 	mov	local03, local04
08868     01 22 66 F0 | 	shl	local03, #1
0886c     12 23 02 F1 | 	add	local03, local04
08870     02 22 66 F0 | 	shl	local03, #2
08874     03 00 00 FF 
08878     00 E4 85 F1 | 	sub	objptr, ##1536
0887c     F2 22 02 F1 | 	add	local03, objptr
08880     08 22 06 F1 | 	add	local03, #8
08884     11 97 68 FC | 	wrlong	#75, local03
08888     03 00 00 FF 
0888c     00 E4 05 F1 | 	add	objptr, ##1536
08890     F2 24 02 FB | 	rdlong	local04, objptr
08894     12 23 02 F6 | 	mov	local03, local04
08898     01 22 66 F0 | 	shl	local03, #1
0889c     12 23 02 F1 | 	add	local03, local04
088a0     02 22 66 F0 | 	shl	local03, #2
088a4     03 00 00 FF 
088a8     00 E4 85 F1 | 	sub	objptr, ##1536
088ac     F2 22 02 F1 | 	add	local03, objptr
088b0     11 01 68 FC | 	wrlong	#0, local03
088b4     03 00 00 FF 
088b8     00 E4 05 F1 | 	add	objptr, ##1536
088bc     F2 24 02 FB | 	rdlong	local04, objptr
088c0     01 24 06 F1 | 	add	local04, #1
088c4     F2 24 62 FC | 	wrlong	local04, objptr
088c8     6A 00 00 FF 
088cc     60 E4 85 F1 | 	sub	objptr, ##54368
088d0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
088d0                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
088d0                 | ' return 0
088d0     00 FA 05 F6 | 	mov	result1, #0
088d4                 | LR__0734
088d4     A7 F0 03 F6 | 	mov	ptra, fp
088d8     B2 00 A0 FD | 	call	#popregs_
088dc                 | _compile_next_ret
088dc     2D 00 64 FD | 	ret
088e0                 | 
088e0                 | ' 
088e0                 | ' 
088e0                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
088e0                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
088e0                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
088e0                 | ' 
088e0                 | ' 
088e0                 | ' function compile_goto( ) as ulong
088e0                 | _compile_goto
088e0     03 4A 05 F6 | 	mov	COUNT_, #3
088e4     A8 00 A0 FD | 	call	#pushregs_
088e8     28 F0 07 F1 | 	add	ptra, #40
088ec                 | ' 
088ec                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
088ec     57 00 00 FF 
088f0     28 E4 05 F1 | 	add	objptr, ##44584
088f4     F2 16 02 FB | 	rdlong	arg03, objptr
088f8     03 16 66 F0 | 	shl	arg03, #3
088fc     02 00 00 FF 
08900     38 E4 85 F1 | 	sub	objptr, ##1080
08904     F2 16 02 F1 | 	add	arg03, objptr
08908     04 16 06 F1 | 	add	arg03, #4
0890c     0B 17 02 FB | 	rdlong	arg03, arg03
08910     01 00 00 FF 
08914     00 16 0E F2 | 	cmp	arg03, ##512 wz
08918     54 00 00 FF 
0891c     F0 E5 85 F1 | 	sub	objptr, ##43504
08920     CC 02 90 5D |  if_ne	jmp	#LR__0745
08924     57 00 00 FF 
08928     28 E4 05 F1 | 	add	objptr, ##44584
0892c     F2 16 02 FB | 	rdlong	arg03, objptr
08930     01 16 06 F1 | 	add	arg03, #1
08934     03 16 66 F0 | 	shl	arg03, #3
08938     02 00 00 FF 
0893c     38 E4 85 F1 | 	sub	objptr, ##1080
08940     F2 16 02 F1 | 	add	arg03, objptr
08944     04 16 06 F1 | 	add	arg03, #4
08948     0B 17 02 FB | 	rdlong	arg03, arg03
0894c     FE 17 0E F2 | 	cmp	arg03, #510 wz
08950     54 00 00 FF 
08954     F0 E5 85 F1 | 	sub	objptr, ##43504
08958     94 02 90 5D |  if_ne	jmp	#LR__0745
0895c     57 00 00 FF 
08960     28 E4 05 F1 | 	add	objptr, ##44584
08964     F2 16 02 FB | 	rdlong	arg03, objptr
08968     03 16 66 F0 | 	shl	arg03, #3
0896c     02 00 00 FF 
08970     38 E4 85 F1 | 	sub	objptr, ##1080
08974     F2 16 02 F1 | 	add	arg03, objptr
08978     0B 13 02 FB | 	rdlong	arg01, arg03
0897c     00 14 06 F6 | 	mov	arg02, #0
08980     54 00 00 FF 
08984     F0 E5 85 F1 | 	sub	objptr, ##43504
08988     44 6B B1 FD | 	call	#__system____builtin_atoi
0898c     04 4E 05 F1 | 	add	fp, #4
08990     A7 FA 61 FC | 	wrlong	result1, fp
08994     6A 00 00 FF 
08998     60 E4 05 F1 | 	add	objptr, ##54368
0899c     F2 1E 02 FB | 	rdlong	local01, objptr
089a0     0F 21 02 F6 | 	mov	local02, local01
089a4     01 20 66 F0 | 	shl	local02, #1
089a8     0F 21 02 F1 | 	add	local02, local01
089ac     02 20 66 F0 | 	shl	local02, #2
089b0     03 00 00 FF 
089b4     00 E4 85 F1 | 	sub	objptr, ##1536
089b8     F2 20 02 F1 | 	add	local02, objptr
089bc     08 20 06 F1 | 	add	local02, #8
089c0     10 9D 68 FC | 	wrlong	#78, local02
089c4     03 00 00 FF 
089c8     08 E4 05 F1 | 	add	objptr, ##1544
089cc     F2 22 02 FB | 	rdlong	local03, objptr
089d0     6A 00 00 FF 
089d4     68 E4 85 F1 | 	sub	objptr, ##54376
089d8     04 4E 05 F1 | 	add	fp, #4
089dc     A7 22 62 FC | 	wrlong	local03, fp
089e0     08 4E 85 F1 | 	sub	fp, #8
089e4                 | ' 
089e4                 | '   gotoline=val%(lparts(ct).part$) 
089e4                 | '   compiledline(lineptr).result_type=token_fast_goto
089e4                 | ' ' now find a pointer to goto
089e4                 | '   gotoptr=programstart
089e4                 | '   do
089e4                 | LR__0740
089e4     10 4E 05 F1 | 	add	fp, #16
089e8     A7 12 02 F6 | 	mov	arg01, fp
089ec     08 4E 85 F1 | 	sub	fp, #8
089f0     A7 14 02 FB | 	rdlong	arg02, fp
089f4     08 4E 85 F1 | 	sub	fp, #8
089f8     18 16 06 F6 | 	mov	arg03, #24
089fc     0B 00 00 FF 
08a00     C0 E4 05 F1 | 	add	objptr, ##5824
08a04     D0 2C B1 FD | 	call	#_psram_spin2_read1
08a08     0B 00 00 FF 
08a0c     C0 E4 85 F1 | 	sub	objptr, ##5824
08a10                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08a10                 | '     if gotoheader(0)<>$FFFFFFFF then
08a10     10 4E 05 F1 | 	add	fp, #16
08a14     A7 22 02 FB | 	rdlong	local03, fp
08a18     10 4E 85 F1 | 	sub	fp, #16
08a1c     FF FF 7F FF 
08a20     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08a24     24 00 90 AD |  if_e	jmp	#LR__0741
08a28     08 4E 05 F1 | 	add	fp, #8
08a2c     A7 22 02 FB | 	rdlong	local03, fp
08a30     04 4E 05 F1 | 	add	fp, #4
08a34     A7 22 62 FC | 	wrlong	local03, fp
08a38     18 4E 05 F1 | 	add	fp, #24
08a3c     A7 22 02 FB | 	rdlong	local03, fp
08a40     1C 4E 85 F1 | 	sub	fp, #28
08a44     A7 22 62 FC | 	wrlong	local03, fp
08a48     08 4E 85 F1 | 	sub	fp, #8
08a4c                 | LR__0741
08a4c     24 4E 05 F1 | 	add	fp, #36
08a50     A7 22 02 FB | 	rdlong	local03, fp
08a54     24 4E 85 F1 | 	sub	fp, #36
08a58     FF FF 3F FF 
08a5c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08a60     10 4E 05 51 |  if_ne	add	fp, #16
08a64     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08a68     10 4E 85 51 |  if_ne	sub	fp, #16
08a6c     FF FF 7F 5F 
08a70     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08a74     1C 00 90 AD |  if_e	jmp	#LR__0742
08a78     10 4E 05 F1 | 	add	fp, #16
08a7c     A7 22 02 FB | 	rdlong	local03, fp
08a80     0C 4E 85 F1 | 	sub	fp, #12
08a84     A7 20 02 FB | 	rdlong	local02, fp
08a88     04 4E 85 F1 | 	sub	fp, #4
08a8c     10 23 0A F2 | 	cmp	local03, local02 wz
08a90     50 FF 9F 5D |  if_ne	jmp	#LR__0740
08a94                 | LR__0742
08a94                 | '   if gotoheader(0)=gotoline then
08a94     10 4E 05 F1 | 	add	fp, #16
08a98     A7 22 02 FB | 	rdlong	local03, fp
08a9c     0C 4E 85 F1 | 	sub	fp, #12
08aa0     A7 1E 02 FB | 	rdlong	local01, fp
08aa4     04 4E 85 F1 | 	sub	fp, #4
08aa8     0F 23 0A F2 | 	cmp	local03, local01 wz
08aac     7C 00 90 5D |  if_ne	jmp	#LR__0743
08ab0     6A 00 00 FF 
08ab4     60 E4 05 F1 | 	add	objptr, ##54368
08ab8     F2 1E 02 FB | 	rdlong	local01, objptr
08abc     0F 21 02 F6 | 	mov	local02, local01
08ac0     01 20 66 F0 | 	shl	local02, #1
08ac4     0F 21 02 F1 | 	add	local02, local01
08ac8     02 20 66 F0 | 	shl	local02, #2
08acc     03 00 00 FF 
08ad0     00 E4 85 F1 | 	sub	objptr, ##1536
08ad4     F2 20 02 F1 | 	add	local02, objptr
08ad8     0C 4E 05 F1 | 	add	fp, #12
08adc     A7 22 02 FB | 	rdlong	local03, fp
08ae0     10 23 62 FC | 	wrlong	local03, local02
08ae4     03 00 00 FF 
08ae8     00 E4 05 F1 | 	add	objptr, ##1536
08aec     F2 1E 02 FB | 	rdlong	local01, objptr
08af0     0F 21 02 F6 | 	mov	local02, local01
08af4     01 20 66 F0 | 	shl	local02, #1
08af8     0F 21 02 F1 | 	add	local02, local01
08afc     02 20 66 F0 | 	shl	local02, #2
08b00     03 00 00 FF 
08b04     00 E4 85 F1 | 	sub	objptr, ##1536
08b08     F2 20 02 F1 | 	add	local02, objptr
08b0c     08 4E 85 F1 | 	sub	fp, #8
08b10     A7 22 02 FB | 	rdlong	local03, fp
08b14     04 4E 85 F1 | 	sub	fp, #4
08b18     04 20 06 F1 | 	add	local02, #4
08b1c     10 23 62 FC | 	wrlong	local03, local02
08b20     67 00 00 FF 
08b24     60 E4 85 F1 | 	sub	objptr, ##52832
08b28     A4 00 90 FD | 	jmp	#LR__0744
08b2c                 | LR__0743
08b2c     6A 00 00 FF 
08b30     60 E4 05 F1 | 	add	objptr, ##54368
08b34     F2 1E 02 FB | 	rdlong	local01, objptr
08b38     0F 21 02 F6 | 	mov	local02, local01
08b3c     01 20 66 F0 | 	shl	local02, #1
08b40     0F 21 02 F1 | 	add	local02, local01
08b44     02 20 66 F0 | 	shl	local02, #2
08b48     03 00 00 FF 
08b4c     00 E4 85 F1 | 	sub	objptr, ##1536
08b50     F2 20 02 F1 | 	add	local02, objptr
08b54     00 00 C0 FF 
08b58     10 01 68 FC | 	wrlong	##-2147483648, local02
08b5c     03 00 00 FF 
08b60     00 E4 05 F1 | 	add	objptr, ##1536
08b64     F2 1E 02 FB | 	rdlong	local01, objptr
08b68     0F 21 02 F6 | 	mov	local02, local01
08b6c     01 20 66 F0 | 	shl	local02, #1
08b70     0F 21 02 F1 | 	add	local02, local01
08b74     02 20 66 F0 | 	shl	local02, #2
08b78     03 00 00 FF 
08b7c     00 E4 85 F1 | 	sub	objptr, ##1536
08b80     F2 20 02 F1 | 	add	local02, objptr
08b84     04 4E 05 F1 | 	add	fp, #4
08b88     A7 22 02 FB | 	rdlong	local03, fp
08b8c     04 4E 85 F1 | 	sub	fp, #4
08b90     04 20 06 F1 | 	add	local02, #4
08b94     10 23 62 FC | 	wrlong	local03, local02
08b98     03 00 00 FF 
08b9c     00 E4 05 F1 | 	add	objptr, ##1536
08ba0     F2 1E 02 FB | 	rdlong	local01, objptr
08ba4     0F 21 02 F6 | 	mov	local02, local01
08ba8     01 20 66 F0 | 	shl	local02, #1
08bac     0F 21 02 F1 | 	add	local02, local01
08bb0     02 20 66 F0 | 	shl	local02, #2
08bb4     03 00 00 FF 
08bb8     00 E4 85 F1 | 	sub	objptr, ##1536
08bbc     F2 20 02 F1 | 	add	local02, objptr
08bc0     08 20 06 F1 | 	add	local02, #8
08bc4     10 A7 68 FC | 	wrlong	#83, local02
08bc8     67 00 00 FF 
08bcc     60 E4 85 F1 | 	sub	objptr, ##52832
08bd0                 | LR__0744
08bd0     6A 00 00 FF 
08bd4     60 E4 05 F1 | 	add	objptr, ##54368
08bd8     F2 22 02 FB | 	rdlong	local03, objptr
08bdc     01 22 06 F1 | 	add	local03, #1
08be0     F2 22 62 FC | 	wrlong	local03, objptr
08be4     6A 00 00 FF 
08be8     60 E4 85 F1 | 	sub	objptr, ##54368
08bec     40 00 90 FD | 	jmp	#LR__0746
08bf0                 | LR__0745
08bf0                 | '    print "We have a slow goto, todo  "
08bf0     00 12 06 F6 | 	mov	arg01, #0
08bf4     74 90 B1 FD | 	call	#__system___getiolock_0474
08bf8     FD 12 02 F6 | 	mov	arg01, result1
08bfc     DC 36 B1 FD | 	call	#__system___lockmem
08c00     5F 01 00 FF 
08c04     2E 14 06 F6 | 	mov	arg02, ##@LR__4907
08c08     00 12 06 F6 | 	mov	arg01, #0
08c0c     00 16 06 F6 | 	mov	arg03, #0
08c10     CC 43 B1 FD | 	call	#__system___basic_print_string
08c14     00 12 06 F6 | 	mov	arg01, #0
08c18     0A 14 06 F6 | 	mov	arg02, #10
08c1c     00 16 06 F6 | 	mov	arg03, #0
08c20     64 43 B1 FD | 	call	#__system___basic_print_char
08c24     00 12 06 F6 | 	mov	arg01, #0
08c28     40 90 B1 FD | 	call	#__system___getiolock_0474
08c2c     FD 00 68 FC | 	wrlong	#0, result1
08c30                 | LR__0746
08c30                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08c30                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08c30                 | ' return 0
08c30     00 FA 05 F6 | 	mov	result1, #0
08c34     A7 F0 03 F6 | 	mov	ptra, fp
08c38     B2 00 A0 FD | 	call	#popregs_
08c3c                 | _compile_goto_ret
08c3c     2D 00 64 FD | 	ret
08c40                 | 
08c40                 | ' 
08c40                 | ' 
08c40                 | ' 
08c40                 | ' 
08c40                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c40                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08c40                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c40                 | ' 
08c40                 | ' 
08c40                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c40                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08c40                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c40                 | ' 
08c40                 | ' 
08c40                 | ' function expr() as integer 
08c40                 | _expr
08c40     07 4A 05 F6 | 	mov	COUNT_, #7
08c44     A8 00 A0 FD | 	call	#pushregs_
08c48                 | _expr_enter
08c48     57 00 00 FF 
08c4c     28 E4 05 F1 | 	add	objptr, ##44584
08c50     F2 24 02 FB | 	rdlong	local04, objptr
08c54     03 24 66 F0 | 	shl	local04, #3
08c58     02 00 00 FF 
08c5c     38 E4 85 F1 | 	sub	objptr, ##1080
08c60     F2 24 02 F1 | 	add	local04, objptr
08c64     04 24 06 F1 | 	add	local04, #4
08c68     12 27 02 FB | 	rdlong	local05, local04
08c6c                 | ' 
08c6c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08c6c     FE 27 0E F2 | 	cmp	local05, #510 wz
08c70     54 00 00 FF 
08c74     F0 E5 85 F1 | 	sub	objptr, ##43504
08c78     C4 00 90 5D |  if_ne	jmp	#LR__0750
08c7c     1D 1E 06 F6 | 	mov	local01, #29
08c80     FF 22 06 F6 | 	mov	local03, #255
08c84     0F 29 02 F6 | 	mov	local06, local01
08c88     10 2B 02 F6 | 	mov	local07, local02
08c8c     11 1F 02 F6 | 	mov	local01, local03
08c90     6A 00 00 FF 
08c94     60 E4 05 F1 | 	add	objptr, ##54368
08c98     F2 26 02 FB | 	rdlong	local05, objptr
08c9c     13 25 02 F6 | 	mov	local04, local05
08ca0     01 24 66 F0 | 	shl	local04, #1
08ca4     13 25 02 F1 | 	add	local04, local05
08ca8     02 24 66 F0 | 	shl	local04, #2
08cac     03 00 00 FF 
08cb0     00 E4 85 F1 | 	sub	objptr, ##1536
08cb4     F2 24 02 F1 | 	add	local04, objptr
08cb8     12 29 62 FC | 	wrlong	local06, local04
08cbc     03 00 00 FF 
08cc0     00 E4 05 F1 | 	add	objptr, ##1536
08cc4     F2 28 02 FB | 	rdlong	local06, objptr
08cc8     14 27 02 F6 | 	mov	local05, local06
08ccc     01 26 66 F0 | 	shl	local05, #1
08cd0     14 27 02 F1 | 	add	local05, local06
08cd4     02 26 66 F0 | 	shl	local05, #2
08cd8     03 00 00 FF 
08cdc     00 E4 85 F1 | 	sub	objptr, ##1536
08ce0     F2 26 02 F1 | 	add	local05, objptr
08ce4     04 26 06 F1 | 	add	local05, #4
08ce8     13 2B 62 FC | 	wrlong	local07, local05
08cec     03 00 00 FF 
08cf0     00 E4 05 F1 | 	add	objptr, ##1536
08cf4     F2 2A 02 FB | 	rdlong	local07, objptr
08cf8     15 29 02 F6 | 	mov	local06, local07
08cfc     01 28 66 F0 | 	shl	local06, #1
08d00     15 29 02 F1 | 	add	local06, local07
08d04     02 28 66 F0 | 	shl	local06, #2
08d08     03 00 00 FF 
08d0c     00 E4 85 F1 | 	sub	objptr, ##1536
08d10     F2 28 02 F1 | 	add	local06, objptr
08d14     08 28 06 F1 | 	add	local06, #8
08d18     14 1F 62 FC | 	wrlong	local01, local06
08d1c     03 00 00 FF 
08d20     00 E4 05 F1 | 	add	objptr, ##1536
08d24     F2 28 02 FB | 	rdlong	local06, objptr
08d28     01 28 06 F1 | 	add	local06, #1
08d2c     F2 28 62 FC | 	wrlong	local06, objptr
08d30     6A 00 00 FF 
08d34     60 E4 85 F1 | 	sub	objptr, ##54368
08d38     1D FA 05 F6 | 	mov	result1, #29
08d3c     54 01 90 FD | 	jmp	#LR__0753
08d40                 | LR__0750
08d40     00 1E 06 F6 | 	mov	local01, #0
08d44     58 01 B0 FD | 	call	#_addsub
08d48     57 00 00 FF 
08d4c     28 E4 05 F1 | 	add	objptr, ##44584
08d50     F2 24 02 FB | 	rdlong	local04, objptr
08d54     03 24 66 F0 | 	shl	local04, #3
08d58     02 00 00 FF 
08d5c     38 E4 85 F1 | 	sub	objptr, ##1080
08d60     F2 24 02 F1 | 	add	local04, objptr
08d64     04 24 06 F1 | 	add	local04, #4
08d68     12 27 02 FB | 	rdlong	local05, local04
08d6c                 | ' t3.result.uresult=0
08d6c                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08d6c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08d6c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08d6c     54 00 00 FF 
08d70     F0 E5 85 F1 | 	sub	objptr, ##43504
08d74                 | LR__0751
08d74     1B 26 0E F2 | 	cmp	local05, #27 wz
08d78     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08d7c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08d80     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08d84     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08d88     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08d8c     00 01 90 5D |  if_ne	jmp	#LR__0752
08d90     57 00 00 FF 
08d94     28 E4 05 F1 | 	add	objptr, ##44584
08d98     F2 28 02 FB | 	rdlong	local06, objptr
08d9c     01 28 06 F1 | 	add	local06, #1
08da0     F2 28 62 FC | 	wrlong	local06, objptr
08da4     57 00 00 FF 
08da8     28 E4 85 F1 | 	sub	objptr, ##44584
08dac     F0 00 B0 FD | 	call	#_addsub
08db0     13 23 02 F6 | 	mov	local03, local05
08db4     0F 29 02 F6 | 	mov	local06, local01
08db8     10 2B 02 F6 | 	mov	local07, local02
08dbc     11 27 02 F6 | 	mov	local05, local03
08dc0     6A 00 00 FF 
08dc4     60 E4 05 F1 | 	add	objptr, ##54368
08dc8     F2 24 02 FB | 	rdlong	local04, objptr
08dcc     12 FB 01 F6 | 	mov	result1, local04
08dd0     01 FA 65 F0 | 	shl	result1, #1
08dd4     12 FB 01 F1 | 	add	result1, local04
08dd8     02 FA 65 F0 | 	shl	result1, #2
08ddc     03 00 00 FF 
08de0     00 E4 85 F1 | 	sub	objptr, ##1536
08de4     F2 FA 01 F1 | 	add	result1, objptr
08de8     FD 28 62 FC | 	wrlong	local06, result1
08dec     03 00 00 FF 
08df0     00 E4 05 F1 | 	add	objptr, ##1536
08df4     F2 28 02 FB | 	rdlong	local06, objptr
08df8     14 25 02 F6 | 	mov	local04, local06
08dfc     01 24 66 F0 | 	shl	local04, #1
08e00     14 25 02 F1 | 	add	local04, local06
08e04     02 24 66 F0 | 	shl	local04, #2
08e08     03 00 00 FF 
08e0c     00 E4 85 F1 | 	sub	objptr, ##1536
08e10     F2 24 02 F1 | 	add	local04, objptr
08e14     04 24 06 F1 | 	add	local04, #4
08e18     12 2B 62 FC | 	wrlong	local07, local04
08e1c     03 00 00 FF 
08e20     00 E4 05 F1 | 	add	objptr, ##1536
08e24     F2 2A 02 FB | 	rdlong	local07, objptr
08e28     15 29 02 F6 | 	mov	local06, local07
08e2c     01 28 66 F0 | 	shl	local06, #1
08e30     15 29 02 F1 | 	add	local06, local07
08e34     02 28 66 F0 | 	shl	local06, #2
08e38     03 00 00 FF 
08e3c     00 E4 85 F1 | 	sub	objptr, ##1536
08e40     F2 28 02 F1 | 	add	local06, objptr
08e44     08 28 06 F1 | 	add	local06, #8
08e48     14 27 62 FC | 	wrlong	local05, local06
08e4c     03 00 00 FF 
08e50     00 E4 05 F1 | 	add	objptr, ##1536
08e54     F2 28 02 FB | 	rdlong	local06, objptr
08e58     01 28 06 F1 | 	add	local06, #1
08e5c     F2 28 62 FC | 	wrlong	local06, objptr
08e60     13 00 00 FF 
08e64     38 E4 85 F1 | 	sub	objptr, ##9784
08e68     F2 24 02 FB | 	rdlong	local04, objptr
08e6c     03 24 66 F0 | 	shl	local04, #3
08e70     02 00 00 FF 
08e74     38 E4 85 F1 | 	sub	objptr, ##1080
08e78     F2 24 02 F1 | 	add	local04, objptr
08e7c     04 24 06 F1 | 	add	local04, #4
08e80     12 27 02 FB | 	rdlong	local05, local04
08e84     54 00 00 FF 
08e88     F0 E5 85 F1 | 	sub	objptr, ##43504
08e8c     E4 FE 9F FD | 	jmp	#LR__0751
08e90                 | LR__0752
08e90                 | ' return 0  
08e90     00 FA 05 F6 | 	mov	result1, #0
08e94                 | LR__0753
08e94     A7 F0 03 F6 | 	mov	ptra, fp
08e98     B2 00 A0 FD | 	call	#popregs_
08e9c                 | _expr_ret
08e9c     2D 00 64 FD | 	ret
08ea0                 | 
08ea0                 | ' 
08ea0                 | ' 
08ea0                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08ea0                 | ' 
08ea0                 | ' function addsub() as integer 
08ea0                 | _addsub
08ea0     07 4A 05 F6 | 	mov	COUNT_, #7
08ea4     A8 00 A0 FD | 	call	#pushregs_
08ea8                 | _addsub_enter
08ea8     00 1E 06 F6 | 	mov	local01, #0
08eac     50 01 B0 FD | 	call	#_muldiv
08eb0     57 00 00 FF 
08eb4     28 E4 05 F1 | 	add	objptr, ##44584
08eb8     F2 24 02 FB | 	rdlong	local04, objptr
08ebc     03 24 66 F0 | 	shl	local04, #3
08ec0     02 00 00 FF 
08ec4     38 E4 85 F1 | 	sub	objptr, ##1080
08ec8     F2 24 02 F1 | 	add	local04, objptr
08ecc     04 24 06 F1 | 	add	local04, #4
08ed0     12 27 02 FB | 	rdlong	local05, local04
08ed4                 | ' t3.result.uresult=0
08ed4                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08ed4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08ed4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
08ed4     54 00 00 FF 
08ed8     F0 E5 85 F1 | 	sub	objptr, ##43504
08edc                 | LR__0760
08edc     01 26 0E F2 | 	cmp	local05, #1 wz
08ee0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
08ee4     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08ee8     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
08eec     00 01 90 5D |  if_ne	jmp	#LR__0761
08ef0     57 00 00 FF 
08ef4     28 E4 05 F1 | 	add	objptr, ##44584
08ef8     F2 24 02 FB | 	rdlong	local04, objptr
08efc     01 24 06 F1 | 	add	local04, #1
08f00     F2 24 62 FC | 	wrlong	local04, objptr
08f04     57 00 00 FF 
08f08     28 E4 85 F1 | 	sub	objptr, ##44584
08f0c     F0 00 B0 FD | 	call	#_muldiv
08f10     13 23 02 F6 | 	mov	local03, local05
08f14     0F 29 02 F6 | 	mov	local06, local01
08f18     10 2B 02 F6 | 	mov	local07, local02
08f1c     11 27 02 F6 | 	mov	local05, local03
08f20     6A 00 00 FF 
08f24     60 E4 05 F1 | 	add	objptr, ##54368
08f28     F2 24 02 FB | 	rdlong	local04, objptr
08f2c     12 FB 01 F6 | 	mov	result1, local04
08f30     01 FA 65 F0 | 	shl	result1, #1
08f34     12 FB 01 F1 | 	add	result1, local04
08f38     02 FA 65 F0 | 	shl	result1, #2
08f3c     03 00 00 FF 
08f40     00 E4 85 F1 | 	sub	objptr, ##1536
08f44     F2 FA 01 F1 | 	add	result1, objptr
08f48     FD 28 62 FC | 	wrlong	local06, result1
08f4c     03 00 00 FF 
08f50     00 E4 05 F1 | 	add	objptr, ##1536
08f54     F2 28 02 FB | 	rdlong	local06, objptr
08f58     14 25 02 F6 | 	mov	local04, local06
08f5c     01 24 66 F0 | 	shl	local04, #1
08f60     14 25 02 F1 | 	add	local04, local06
08f64     02 24 66 F0 | 	shl	local04, #2
08f68     03 00 00 FF 
08f6c     00 E4 85 F1 | 	sub	objptr, ##1536
08f70     F2 24 02 F1 | 	add	local04, objptr
08f74     04 24 06 F1 | 	add	local04, #4
08f78     12 2B 62 FC | 	wrlong	local07, local04
08f7c     03 00 00 FF 
08f80     00 E4 05 F1 | 	add	objptr, ##1536
08f84     F2 2A 02 FB | 	rdlong	local07, objptr
08f88     15 29 02 F6 | 	mov	local06, local07
08f8c     01 28 66 F0 | 	shl	local06, #1
08f90     15 29 02 F1 | 	add	local06, local07
08f94     02 28 66 F0 | 	shl	local06, #2
08f98     03 00 00 FF 
08f9c     00 E4 85 F1 | 	sub	objptr, ##1536
08fa0     F2 28 02 F1 | 	add	local06, objptr
08fa4     08 28 06 F1 | 	add	local06, #8
08fa8     14 27 62 FC | 	wrlong	local05, local06
08fac     03 00 00 FF 
08fb0     00 E4 05 F1 | 	add	objptr, ##1536
08fb4     F2 28 02 FB | 	rdlong	local06, objptr
08fb8     01 28 06 F1 | 	add	local06, #1
08fbc     F2 28 62 FC | 	wrlong	local06, objptr
08fc0     13 00 00 FF 
08fc4     38 E4 85 F1 | 	sub	objptr, ##9784
08fc8     F2 24 02 FB | 	rdlong	local04, objptr
08fcc     03 24 66 F0 | 	shl	local04, #3
08fd0     02 00 00 FF 
08fd4     38 E4 85 F1 | 	sub	objptr, ##1080
08fd8     F2 24 02 F1 | 	add	local04, objptr
08fdc     04 24 06 F1 | 	add	local04, #4
08fe0     12 27 02 FB | 	rdlong	local05, local04
08fe4     54 00 00 FF 
08fe8     F0 E5 85 F1 | 	sub	objptr, ##43504
08fec     EC FE 9F FD | 	jmp	#LR__0760
08ff0                 | LR__0761
08ff0                 | '   return 0
08ff0     00 FA 05 F6 | 	mov	result1, #0
08ff4     A7 F0 03 F6 | 	mov	ptra, fp
08ff8     B2 00 A0 FD | 	call	#popregs_
08ffc                 | _addsub_ret
08ffc     2D 00 64 FD | 	ret
09000                 | 
09000                 | ' 
09000                 | ' sub muldiv()
09000                 | _muldiv
09000     08 4A 05 F6 | 	mov	COUNT_, #8
09004     A8 00 A0 FD | 	call	#pushregs_
09008                 | _muldiv_enter
09008     00 1E 06 F6 | 	mov	local01, #0
0900c     58 01 B0 FD | 	call	#_getvalue
09010     57 00 00 FF 
09014     28 E4 05 F1 | 	add	objptr, ##44584
09018     F2 24 02 FB | 	rdlong	local04, objptr
0901c     03 24 66 F0 | 	shl	local04, #3
09020     02 00 00 FF 
09024     38 E4 85 F1 | 	sub	objptr, ##1080
09028     F2 24 02 F1 | 	add	local04, objptr
0902c     04 24 06 F1 | 	add	local04, #4
09030     12 27 02 FB | 	rdlong	local05, local04
09034                 | ' t3.result.uresult=0
09034                 | ' getvalue()    
09034                 | ' op = lparts(ct).token
09034                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09034     54 00 00 FF 
09038     F0 E5 85 F1 | 	sub	objptr, ##43504
0903c                 | LR__0770
0903c     05 26 0E F2 | 	cmp	local05, #5 wz
09040     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09044     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09048     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0904c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09050     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09054     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09058     00 01 90 5D |  if_ne	jmp	#LR__0771
0905c     57 00 00 FF 
09060     28 E4 05 F1 | 	add	objptr, ##44584
09064     F2 24 02 FB | 	rdlong	local04, objptr
09068     01 24 06 F1 | 	add	local04, #1
0906c     F2 24 62 FC | 	wrlong	local04, objptr
09070     57 00 00 FF 
09074     28 E4 85 F1 | 	sub	objptr, ##44584
09078     EC 00 B0 FD | 	call	#_getvalue
0907c     13 23 02 F6 | 	mov	local03, local05
09080     0F 29 02 F6 | 	mov	local06, local01
09084     10 2B 02 F6 | 	mov	local07, local02
09088     11 27 02 F6 | 	mov	local05, local03
0908c     6A 00 00 FF 
09090     60 E4 05 F1 | 	add	objptr, ##54368
09094     F2 24 02 FB | 	rdlong	local04, objptr
09098     12 2D 02 F6 | 	mov	local08, local04
0909c     01 2C 66 F0 | 	shl	local08, #1
090a0     12 2D 02 F1 | 	add	local08, local04
090a4     02 2C 66 F0 | 	shl	local08, #2
090a8     03 00 00 FF 
090ac     00 E4 85 F1 | 	sub	objptr, ##1536
090b0     F2 2C 02 F1 | 	add	local08, objptr
090b4     16 29 62 FC | 	wrlong	local06, local08
090b8     03 00 00 FF 
090bc     00 E4 05 F1 | 	add	objptr, ##1536
090c0     F2 2C 02 FB | 	rdlong	local08, objptr
090c4     16 29 02 F6 | 	mov	local06, local08
090c8     01 28 66 F0 | 	shl	local06, #1
090cc     16 29 02 F1 | 	add	local06, local08
090d0     02 28 66 F0 | 	shl	local06, #2
090d4     03 00 00 FF 
090d8     00 E4 85 F1 | 	sub	objptr, ##1536
090dc     F2 28 02 F1 | 	add	local06, objptr
090e0     04 28 06 F1 | 	add	local06, #4
090e4     14 2B 62 FC | 	wrlong	local07, local06
090e8     03 00 00 FF 
090ec     00 E4 05 F1 | 	add	objptr, ##1536
090f0     F2 2C 02 FB | 	rdlong	local08, objptr
090f4     16 2B 02 F6 | 	mov	local07, local08
090f8     01 2A 66 F0 | 	shl	local07, #1
090fc     16 2B 02 F1 | 	add	local07, local08
09100     02 2A 66 F0 | 	shl	local07, #2
09104     03 00 00 FF 
09108     00 E4 85 F1 | 	sub	objptr, ##1536
0910c     F2 2A 02 F1 | 	add	local07, objptr
09110     08 2A 06 F1 | 	add	local07, #8
09114     15 27 62 FC | 	wrlong	local05, local07
09118     03 00 00 FF 
0911c     00 E4 05 F1 | 	add	objptr, ##1536
09120     F2 28 02 FB | 	rdlong	local06, objptr
09124     01 28 06 F1 | 	add	local06, #1
09128     F2 28 62 FC | 	wrlong	local06, objptr
0912c     13 00 00 FF 
09130     38 E4 85 F1 | 	sub	objptr, ##9784
09134     F2 24 02 FB | 	rdlong	local04, objptr
09138     03 24 66 F0 | 	shl	local04, #3
0913c     02 00 00 FF 
09140     38 E4 85 F1 | 	sub	objptr, ##1080
09144     F2 24 02 F1 | 	add	local04, objptr
09148     04 24 06 F1 | 	add	local04, #4
0914c     12 27 02 FB | 	rdlong	local05, local04
09150     54 00 00 FF 
09154     F0 E5 85 F1 | 	sub	objptr, ##43504
09158     E0 FE 9F FD | 	jmp	#LR__0770
0915c                 | LR__0771
0915c     A7 F0 03 F6 | 	mov	ptra, fp
09160     B2 00 A0 FD | 	call	#popregs_
09164                 | _muldiv_ret
09164     2D 00 64 FD | 	ret
09168                 | 
09168                 | ' 
09168                 | ' sub getvalue() 
09168                 | _getvalue
09168     0B 4A 05 F6 | 	mov	COUNT_, #11
0916c     A8 00 A0 FD | 	call	#pushregs_
09170                 | _getvalue_enter
09170     01 24 06 F6 | 	mov	local04, #1
09174     00 1E 06 F6 | 	mov	local01, #0
09178     1D 22 06 F6 | 	mov	local03, #29
0917c     57 00 00 FF 
09180     28 E4 05 F1 | 	add	objptr, ##44584
09184     F2 16 02 FB | 	rdlong	arg03, objptr
09188     03 16 66 F0 | 	shl	arg03, #3
0918c     02 00 00 FF 
09190     38 E4 85 F1 | 	sub	objptr, ##1080
09194     F2 16 02 F1 | 	add	arg03, objptr
09198     04 16 06 F1 | 	add	arg03, #4
0919c     0B 27 02 FB | 	rdlong	local05, arg03
091a0                 | ' m=1
091a0                 | ' t1.result.uresult=0: t1.result_type=result_uint
091a0                 | ' op=lparts(ct).token
091a0                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
091a0     02 26 0E F2 | 	cmp	local05, #2 wz
091a4     54 00 00 FF 
091a8     F0 E5 85 F1 | 	sub	objptr, ##43504
091ac     38 00 90 5D |  if_ne	jmp	#LR__0780
091b0     01 24 66 F6 | 	neg	local04, #1
091b4     57 00 00 FF 
091b8     28 E4 05 F1 | 	add	objptr, ##44584
091bc     F2 26 02 FB | 	rdlong	local05, objptr
091c0     01 26 06 F1 | 	add	local05, #1
091c4     F2 26 62 FC | 	wrlong	local05, objptr
091c8     03 26 66 F0 | 	shl	local05, #3
091cc     02 00 00 FF 
091d0     38 E4 85 F1 | 	sub	objptr, ##1080
091d4     F2 26 02 F1 | 	add	local05, objptr
091d8     04 26 06 F1 | 	add	local05, #4
091dc     13 27 02 FB | 	rdlong	local05, local05
091e0     54 00 00 FF 
091e4     F0 E5 85 F1 | 	sub	objptr, ##43504
091e8                 | LR__0780
091e8                 | ' select case op
091e8     01 00 00 FF 
091ec     00 26 0E F2 | 	cmp	local05, ##512 wz
091f0     3C 00 90 AD |  if_e	jmp	#LR__0781
091f4     01 00 00 FF 
091f8     01 26 0E F2 | 	cmp	local05, ##513 wz
091fc     88 01 90 AD |  if_e	jmp	#LR__0784
09200     01 00 00 FF 
09204     02 26 0E F2 | 	cmp	local05, ##514 wz
09208     84 02 90 AD |  if_e	jmp	#LR__0785
0920c     01 00 00 FF 
09210     03 26 0E F2 | 	cmp	local05, ##515 wz
09214     E8 03 90 AD |  if_e	jmp	#LR__0788
09218     01 00 00 FF 
0921c     04 26 0E F2 | 	cmp	local05, ##516 wz
09220     B8 05 90 AD |  if_e	jmp	#LR__0793
09224     15 26 0E F2 | 	cmp	local05, #21 wz
09228     D8 05 90 AD |  if_e	jmp	#LR__0794
0922c     48 06 90 FD | 	jmp	#LR__0795
09230                 | LR__0781
09230                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09230     01 24 0E F2 | 	cmp	local04, #1 wz
09234     3C 00 90 5D |  if_ne	jmp	#LR__0782
09238     57 00 00 FF 
0923c     28 E4 05 F1 | 	add	objptr, ##44584
09240     F2 26 02 FB | 	rdlong	local05, objptr
09244     03 26 66 F0 | 	shl	local05, #3
09248     02 00 00 FF 
0924c     38 E4 85 F1 | 	sub	objptr, ##1080
09250     F2 26 02 F1 | 	add	local05, objptr
09254     13 13 02 FB | 	rdlong	arg01, local05
09258     00 14 06 F6 | 	mov	arg02, #0
0925c     54 00 00 FF 
09260     F0 E5 85 F1 | 	sub	objptr, ##43504
09264     68 62 B1 FD | 	call	#__system____builtin_atoi
09268     FD 24 02 FD | 	qmul	local04, result1
0926c     18 1E 62 FD | 	getqx	local01
09270     1C 22 06 F6 | 	mov	local03, #28
09274                 | LR__0782
09274                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09274     FF FF 7F FF 
09278     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0927c     3C 00 90 5D |  if_ne	jmp	#LR__0783
09280     57 00 00 FF 
09284     28 E4 05 F1 | 	add	objptr, ##44584
09288     F2 26 02 FB | 	rdlong	local05, objptr
0928c     03 26 66 F0 | 	shl	local05, #3
09290     02 00 00 FF 
09294     38 E4 85 F1 | 	sub	objptr, ##1080
09298     F2 26 02 F1 | 	add	local05, objptr
0929c     13 13 02 FB | 	rdlong	arg01, local05
092a0     00 14 06 F6 | 	mov	arg02, #0
092a4     54 00 00 FF 
092a8     F0 E5 85 F1 | 	sub	objptr, ##43504
092ac     20 62 B1 FD | 	call	#__system____builtin_atoi
092b0     FD 24 02 FD | 	qmul	local04, result1
092b4     18 1E 62 FD | 	getqx	local01
092b8     1C 22 06 F6 | 	mov	local03, #28
092bc                 | LR__0783
092bc     0F 29 02 F6 | 	mov	local06, local01
092c0     10 2B 02 F6 | 	mov	local07, local02
092c4     11 27 02 F6 | 	mov	local05, local03
092c8     6A 00 00 FF 
092cc     60 E4 05 F1 | 	add	objptr, ##54368
092d0     F2 1E 02 FB | 	rdlong	local01, objptr
092d4     0F 25 02 F6 | 	mov	local04, local01
092d8     01 24 66 F0 | 	shl	local04, #1
092dc     0F 25 02 F1 | 	add	local04, local01
092e0     02 24 66 F0 | 	shl	local04, #2
092e4     03 00 00 FF 
092e8     00 E4 85 F1 | 	sub	objptr, ##1536
092ec     F2 24 02 F1 | 	add	local04, objptr
092f0     12 29 62 FC | 	wrlong	local06, local04
092f4     03 00 00 FF 
092f8     00 E4 05 F1 | 	add	objptr, ##1536
092fc     F2 28 02 FB | 	rdlong	local06, objptr
09300     14 1F 02 F6 | 	mov	local01, local06
09304     01 1E 66 F0 | 	shl	local01, #1
09308     14 1F 02 F1 | 	add	local01, local06
0930c     02 1E 66 F0 | 	shl	local01, #2
09310     03 00 00 FF 
09314     00 E4 85 F1 | 	sub	objptr, ##1536
09318     F2 1E 02 F1 | 	add	local01, objptr
0931c     04 1E 06 F1 | 	add	local01, #4
09320     0F 2B 62 FC | 	wrlong	local07, local01
09324     03 00 00 FF 
09328     00 E4 05 F1 | 	add	objptr, ##1536
0932c     F2 2A 02 FB | 	rdlong	local07, objptr
09330     15 29 02 F6 | 	mov	local06, local07
09334     01 28 66 F0 | 	shl	local06, #1
09338     15 29 02 F1 | 	add	local06, local07
0933c     02 28 66 F0 | 	shl	local06, #2
09340     03 00 00 FF 
09344     00 E4 85 F1 | 	sub	objptr, ##1536
09348     F2 28 02 F1 | 	add	local06, objptr
0934c     08 28 06 F1 | 	add	local06, #8
09350     14 27 62 FC | 	wrlong	local05, local06
09354     03 00 00 FF 
09358     00 E4 05 F1 | 	add	objptr, ##1536
0935c     F2 28 02 FB | 	rdlong	local06, objptr
09360     01 28 06 F1 | 	add	local06, #1
09364     F2 28 62 FC | 	wrlong	local06, objptr
09368     13 00 00 FF 
0936c     38 E4 85 F1 | 	sub	objptr, ##9784
09370     F2 28 02 FB | 	rdlong	local06, objptr
09374     01 28 06 F1 | 	add	local06, #1
09378     F2 28 62 FC | 	wrlong	local06, objptr
0937c     57 00 00 FF 
09380     28 E4 85 F1 | 	sub	objptr, ##44584
09384     14 05 90 FD | 	jmp	#LR__0796
09388                 | LR__0784
09388     57 00 00 FF 
0938c     28 E4 05 F1 | 	add	objptr, ##44584
09390     F2 28 02 FB | 	rdlong	local06, objptr
09394     03 28 66 F0 | 	shl	local06, #3
09398     02 00 00 FF 
0939c     38 E4 85 F1 | 	sub	objptr, ##1080
093a0     F2 28 02 F1 | 	add	local06, objptr
093a4     14 13 02 FB | 	rdlong	arg01, local06
093a8     00 14 06 F6 | 	mov	arg02, #0
093ac     54 00 00 FF 
093b0     F0 E5 85 F1 | 	sub	objptr, ##43504
093b4     18 61 B1 FD | 	call	#__system____builtin_atoi
093b8     FD 24 02 FD | 	qmul	local04, result1
093bc     6A 00 00 FF 
093c0     60 E4 05 F1 | 	add	objptr, ##54368
093c4     F2 28 02 FB | 	rdlong	local06, objptr
093c8     14 2D 02 F6 | 	mov	local08, local06
093cc     01 2C 66 F0 | 	shl	local08, #1
093d0     14 2D 02 F1 | 	add	local08, local06
093d4     02 2C 66 F0 | 	shl	local08, #2
093d8     03 00 00 FF 
093dc     00 E4 85 F1 | 	sub	objptr, ##1536
093e0     F2 2C 02 F1 | 	add	local08, objptr
093e4     03 00 00 FF 
093e8     00 E4 05 F1 | 	add	objptr, ##1536
093ec     18 1E 62 FD | 	getqx	local01
093f0     1C 22 06 F6 | 	mov	local03, #28
093f4     0F 29 02 F6 | 	mov	local06, local01
093f8     10 2B 02 F6 | 	mov	local07, local02
093fc     16 29 62 FC | 	wrlong	local06, local08
09400     11 2D 02 F6 | 	mov	local08, local03
09404     F2 28 02 FB | 	rdlong	local06, objptr
09408     14 27 02 F6 | 	mov	local05, local06
0940c     01 26 66 F0 | 	shl	local05, #1
09410     14 27 02 F1 | 	add	local05, local06
09414     02 26 66 F0 | 	shl	local05, #2
09418     03 00 00 FF 
0941c     00 E4 85 F1 | 	sub	objptr, ##1536
09420     F2 26 02 F1 | 	add	local05, objptr
09424     04 26 06 F1 | 	add	local05, #4
09428     13 2B 62 FC | 	wrlong	local07, local05
0942c     03 00 00 FF 
09430     00 E4 05 F1 | 	add	objptr, ##1536
09434     F2 2A 02 FB | 	rdlong	local07, objptr
09438     15 29 02 F6 | 	mov	local06, local07
0943c     01 28 66 F0 | 	shl	local06, #1
09440     15 29 02 F1 | 	add	local06, local07
09444     02 28 66 F0 | 	shl	local06, #2
09448     03 00 00 FF 
0944c     00 E4 85 F1 | 	sub	objptr, ##1536
09450     F2 28 02 F1 | 	add	local06, objptr
09454     08 28 06 F1 | 	add	local06, #8
09458     14 2D 62 FC | 	wrlong	local08, local06
0945c     03 00 00 FF 
09460     00 E4 05 F1 | 	add	objptr, ##1536
09464     F2 28 02 FB | 	rdlong	local06, objptr
09468     01 28 06 F1 | 	add	local06, #1
0946c     F2 28 62 FC | 	wrlong	local06, objptr
09470     13 00 00 FF 
09474     38 E4 85 F1 | 	sub	objptr, ##9784
09478     F2 28 02 FB | 	rdlong	local06, objptr
0947c     01 28 06 F1 | 	add	local06, #1
09480     F2 28 62 FC | 	wrlong	local06, objptr
09484     57 00 00 FF 
09488     28 E4 85 F1 | 	sub	objptr, ##44584
0948c     0C 04 90 FD | 	jmp	#LR__0796
09490                 | LR__0785
09490                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09490     01 24 0E F2 | 	cmp	local04, #1 wz
09494     48 00 90 5D |  if_ne	jmp	#LR__0786
09498     00 C0 1F FF 
0949c     00 28 06 F6 | 	mov	local06, ##1065353216
094a0     57 00 00 FF 
094a4     28 E4 05 F1 | 	add	objptr, ##44584
094a8     F2 2C 02 FB | 	rdlong	local08, objptr
094ac     03 2C 66 F0 | 	shl	local08, #3
094b0     02 00 00 FF 
094b4     38 E4 85 F1 | 	sub	objptr, ##1080
094b8     F2 2C 02 F1 | 	add	local08, objptr
094bc     16 13 02 FB | 	rdlong	arg01, local08
094c0     54 00 00 FF 
094c4     F0 E5 85 F1 | 	sub	objptr, ##43504
094c8     74 61 B1 FD | 	call	#__system____builtin_atof
094cc     FD 14 02 F6 | 	mov	arg02, result1
094d0     14 13 02 F6 | 	mov	arg01, local06
094d4     80 59 B1 FD | 	call	#__system___float_mul
094d8     FD 1E 02 F6 | 	mov	local01, result1
094dc     1E 22 06 F6 | 	mov	local03, #30
094e0                 | LR__0786
094e0                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
094e0     FF FF 7F FF 
094e4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
094e8     48 00 90 5D |  if_ne	jmp	#LR__0787
094ec     00 C0 5F FF 
094f0     00 28 06 F6 | 	mov	local06, ##-1082130432
094f4     57 00 00 FF 
094f8     28 E4 05 F1 | 	add	objptr, ##44584
094fc     F2 2C 02 FB | 	rdlong	local08, objptr
09500     03 2C 66 F0 | 	shl	local08, #3
09504     02 00 00 FF 
09508     38 E4 85 F1 | 	sub	objptr, ##1080
0950c     F2 2C 02 F1 | 	add	local08, objptr
09510     16 13 02 FB | 	rdlong	arg01, local08
09514     54 00 00 FF 
09518     F0 E5 85 F1 | 	sub	objptr, ##43504
0951c     20 61 B1 FD | 	call	#__system____builtin_atof
09520     FD 14 02 F6 | 	mov	arg02, result1
09524     14 13 02 F6 | 	mov	arg01, local06
09528     2C 59 B1 FD | 	call	#__system___float_mul
0952c     FD 1E 02 F6 | 	mov	local01, result1
09530     1E 22 06 F6 | 	mov	local03, #30
09534                 | LR__0787
09534     0F 29 02 F6 | 	mov	local06, local01
09538     10 2B 02 F6 | 	mov	local07, local02
0953c     11 27 02 F6 | 	mov	local05, local03
09540     6A 00 00 FF 
09544     60 E4 05 F1 | 	add	objptr, ##54368
09548     F2 1E 02 FB | 	rdlong	local01, objptr
0954c     0F 2D 02 F6 | 	mov	local08, local01
09550     01 2C 66 F0 | 	shl	local08, #1
09554     0F 2D 02 F1 | 	add	local08, local01
09558     02 2C 66 F0 | 	shl	local08, #2
0955c     03 00 00 FF 
09560     00 E4 85 F1 | 	sub	objptr, ##1536
09564     F2 2C 02 F1 | 	add	local08, objptr
09568     16 29 62 FC | 	wrlong	local06, local08
0956c     03 00 00 FF 
09570     00 E4 05 F1 | 	add	objptr, ##1536
09574     F2 2C 02 FB | 	rdlong	local08, objptr
09578     16 29 02 F6 | 	mov	local06, local08
0957c     01 28 66 F0 | 	shl	local06, #1
09580     16 29 02 F1 | 	add	local06, local08
09584     02 28 66 F0 | 	shl	local06, #2
09588     03 00 00 FF 
0958c     00 E4 85 F1 | 	sub	objptr, ##1536
09590     F2 28 02 F1 | 	add	local06, objptr
09594     04 28 06 F1 | 	add	local06, #4
09598     14 2B 62 FC | 	wrlong	local07, local06
0959c     03 00 00 FF 
095a0     00 E4 05 F1 | 	add	objptr, ##1536
095a4     F2 2C 02 FB | 	rdlong	local08, objptr
095a8     16 2B 02 F6 | 	mov	local07, local08
095ac     01 2A 66 F0 | 	shl	local07, #1
095b0     16 2B 02 F1 | 	add	local07, local08
095b4     02 2A 66 F0 | 	shl	local07, #2
095b8     03 00 00 FF 
095bc     00 E4 85 F1 | 	sub	objptr, ##1536
095c0     F2 2A 02 F1 | 	add	local07, objptr
095c4     08 2A 06 F1 | 	add	local07, #8
095c8     15 27 62 FC | 	wrlong	local05, local07
095cc     03 00 00 FF 
095d0     00 E4 05 F1 | 	add	objptr, ##1536
095d4     F2 28 02 FB | 	rdlong	local06, objptr
095d8     01 28 06 F1 | 	add	local06, #1
095dc     F2 28 62 FC | 	wrlong	local06, objptr
095e0     13 00 00 FF 
095e4     38 E4 85 F1 | 	sub	objptr, ##9784
095e8     F2 28 02 FB | 	rdlong	local06, objptr
095ec     01 28 06 F1 | 	add	local06, #1
095f0     F2 28 62 FC | 	wrlong	local06, objptr
095f4     57 00 00 FF 
095f8     28 E4 85 F1 | 	sub	objptr, ##44584
095fc     9C 02 90 FD | 	jmp	#LR__0796
09600                 | LR__0788
09600     1F 22 06 F6 | 	mov	local03, #31
09604     57 00 00 FF 
09608     28 E4 05 F1 | 	add	objptr, ##44584
0960c     F2 16 02 FB | 	rdlong	arg03, objptr
09610     03 16 66 F0 | 	shl	arg03, #3
09614     02 00 00 FF 
09618     38 E4 85 F1 | 	sub	objptr, ##1080
0961c     F2 16 02 F1 | 	add	arg03, objptr
09620     0B 13 02 FB | 	rdlong	arg01, arg03
09624     54 00 00 FF 
09628     F0 E5 85 F1 | 	sub	objptr, ##43504
0962c     09 2F 02 F6 | 	mov	local09, arg01
09630     97 06 48 FB | 	callpa	#(@LR__0790-@LR__0789)>>2,fcache_load_ptr_
09634                 | LR__0789
09634     17 FB C9 FA | 	rdbyte	result1, local09 wz
09638     01 2E 06 51 |  if_ne	add	local09, #1
0963c     F4 FF 9F 5D |  if_ne	jmp	#LR__0789
09640                 | LR__0790
09640     09 2F 82 F1 | 	sub	local09, arg01
09644     17 FB 01 F6 | 	mov	result1, local09
09648     7B 00 00 FF 
0964c     A8 E4 05 F1 | 	add	objptr, ##63144
09650     F2 FA 61 FC | 	wrlong	result1, objptr
09654     4C E4 85 F1 | 	sub	objptr, #76
09658     F2 12 02 FB | 	rdlong	arg01, objptr
0965c     FD 12 82 F1 | 	sub	arg01, result1
09660     04 12 86 F1 | 	sub	arg01, #4
09664     03 12 26 F5 | 	andn	arg01, #3
09668     F2 12 62 FC | 	wrlong	arg01, objptr
0966c     4C E4 05 F1 | 	add	objptr, #76
09670     F2 14 02 FB | 	rdlong	arg02, objptr
09674     7B 00 00 FF 
09678     A8 E4 85 F1 | 	sub	objptr, ##63144
0967c     3C F6 B0 FD | 	call	#_pslpoke
09680                 | '     pslpoke memtop,l
09680                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09680     01 30 06 F6 | 	mov	local10, #1
09684     7B 00 00 FF 
09688     A8 E4 05 F1 | 	add	objptr, ##63144
0968c     F2 32 02 FB | 	rdlong	local11, objptr
09690     7B 00 00 FF 
09694     A8 E4 85 F1 | 	sub	objptr, ##63144
09698     01 32 06 F1 | 	add	local11, #1
0969c                 | LR__0791
0969c     19 31 52 F2 | 	cmps	local10, local11 wc
096a0     5C 00 90 3D |  if_ae	jmp	#LR__0792
096a4     7B 00 00 FF 
096a8     5C E4 05 F1 | 	add	objptr, ##63068
096ac     F2 2A 02 FB | 	rdlong	local07, objptr
096b0     03 2A 06 F1 | 	add	local07, #3
096b4     18 2B 02 F1 | 	add	local07, local10
096b8     24 00 00 FF 
096bc     34 E4 85 F1 | 	sub	objptr, ##18484
096c0     F2 2C 02 FB | 	rdlong	local08, objptr
096c4     03 2C 66 F0 | 	shl	local08, #3
096c8     02 00 00 FF 
096cc     38 E4 85 F1 | 	sub	objptr, ##1080
096d0     F2 2C 02 F1 | 	add	local08, objptr
096d4     16 13 02 FB | 	rdlong	arg01, local08
096d8     18 15 02 F6 | 	mov	arg02, local10
096dc     01 16 06 F6 | 	mov	arg03, #1
096e0     54 00 00 FF 
096e4     F0 E5 85 F1 | 	sub	objptr, ##43504
096e8     4C 4D B1 FD | 	call	#__system__Mid_S
096ec     FD 14 C2 FA | 	rdbyte	arg02, result1
096f0     15 13 02 F6 | 	mov	arg01, local07
096f4     54 F6 B0 FD | 	call	#_pspoke
096f8     01 30 06 F1 | 	add	local10, #1
096fc     9C FF 9F FD | 	jmp	#LR__0791
09700                 | LR__0792
09700     7B 00 00 FF 
09704     5C E4 05 F1 | 	add	objptr, ##63068
09708     F2 1E 02 FB | 	rdlong	local01, objptr
0970c     2B 22 06 F6 | 	mov	local03, #43
09710     0F 29 02 F6 | 	mov	local06, local01
09714     10 2B 02 F6 | 	mov	local07, local02
09718     11 33 02 F6 | 	mov	local11, local03
0971c     10 00 00 FF 
09720     FC E5 85 F1 | 	sub	objptr, ##8700
09724     F2 30 02 FB | 	rdlong	local10, objptr
09728     18 2D 02 F6 | 	mov	local08, local10
0972c     01 2C 66 F0 | 	shl	local08, #1
09730     18 2D 02 F1 | 	add	local08, local10
09734     02 2C 66 F0 | 	shl	local08, #2
09738     03 00 00 FF 
0973c     00 E4 85 F1 | 	sub	objptr, ##1536
09740     F2 2C 02 F1 | 	add	local08, objptr
09744     16 29 62 FC | 	wrlong	local06, local08
09748     03 00 00 FF 
0974c     00 E4 05 F1 | 	add	objptr, ##1536
09750     F2 30 02 FB | 	rdlong	local10, objptr
09754     18 2D 02 F6 | 	mov	local08, local10
09758     01 2C 66 F0 | 	shl	local08, #1
0975c     18 2D 02 F1 | 	add	local08, local10
09760     02 2C 66 F0 | 	shl	local08, #2
09764     03 00 00 FF 
09768     00 E4 85 F1 | 	sub	objptr, ##1536
0976c     F2 2C 02 F1 | 	add	local08, objptr
09770     04 2C 06 F1 | 	add	local08, #4
09774     16 2B 62 FC | 	wrlong	local07, local08
09778     03 00 00 FF 
0977c     00 E4 05 F1 | 	add	objptr, ##1536
09780     F2 30 02 FB | 	rdlong	local10, objptr
09784     18 2D 02 F6 | 	mov	local08, local10
09788     01 2C 66 F0 | 	shl	local08, #1
0978c     18 2D 02 F1 | 	add	local08, local10
09790     02 2C 66 F0 | 	shl	local08, #2
09794     03 00 00 FF 
09798     00 E4 85 F1 | 	sub	objptr, ##1536
0979c     F2 2C 02 F1 | 	add	local08, objptr
097a0     08 2C 06 F1 | 	add	local08, #8
097a4     16 33 62 FC | 	wrlong	local11, local08
097a8     03 00 00 FF 
097ac     00 E4 05 F1 | 	add	objptr, ##1536
097b0     F2 28 02 FB | 	rdlong	local06, objptr
097b4     01 28 06 F1 | 	add	local06, #1
097b8     F2 28 62 FC | 	wrlong	local06, objptr
097bc     13 00 00 FF 
097c0     38 E4 85 F1 | 	sub	objptr, ##9784
097c4     F2 28 02 FB | 	rdlong	local06, objptr
097c8     01 28 06 F1 | 	add	local06, #1
097cc     F2 28 62 FC | 	wrlong	local06, objptr
097d0     57 00 00 FF 
097d4     28 E4 85 F1 | 	sub	objptr, ##44584
097d8     C0 00 90 FD | 	jmp	#LR__0796
097dc                 | LR__0793
097dc     12 13 02 F6 | 	mov	arg01, local04
097e0     B8 03 B0 FD | 	call	#_getvar
097e4     57 00 00 FF 
097e8     28 E4 05 F1 | 	add	objptr, ##44584
097ec     F2 28 02 FB | 	rdlong	local06, objptr
097f0     01 28 06 F1 | 	add	local06, #1
097f4     F2 28 62 FC | 	wrlong	local06, objptr
097f8     57 00 00 FF 
097fc     28 E4 85 F1 | 	sub	objptr, ##44584
09800     98 00 90 FD | 	jmp	#LR__0796
09804                 | LR__0794
09804     57 00 00 FF 
09808     28 E4 05 F1 | 	add	objptr, ##44584
0980c     F2 28 02 FB | 	rdlong	local06, objptr
09810     01 28 06 F1 | 	add	local06, #1
09814     F2 28 62 FC | 	wrlong	local06, objptr
09818     57 00 00 FF 
0981c     28 E4 85 F1 | 	sub	objptr, ##44584
09820     1C F4 BF FD | 	call	#_expr
09824                 | '     ct+=1
09824                 | '     expr() 
09824                 | '     if lparts(ct).token=token_rpar then ct+=1
09824     57 00 00 FF 
09828     28 E4 05 F1 | 	add	objptr, ##44584
0982c     F2 32 02 FB | 	rdlong	local11, objptr
09830     03 32 66 F0 | 	shl	local11, #3
09834     02 00 00 FF 
09838     38 E4 85 F1 | 	sub	objptr, ##1080
0983c     F2 32 02 F1 | 	add	local11, objptr
09840     04 32 06 F1 | 	add	local11, #4
09844     19 33 02 FB | 	rdlong	local11, local11
09848     14 32 0E F2 | 	cmp	local11, #20 wz
0984c     54 00 00 FF 
09850     F0 E5 85 F1 | 	sub	objptr, ##43504
09854     44 00 90 5D |  if_ne	jmp	#LR__0796
09858     57 00 00 FF 
0985c     28 E4 05 F1 | 	add	objptr, ##44584
09860     F2 28 02 FB | 	rdlong	local06, objptr
09864     01 28 06 F1 | 	add	local06, #1
09868     F2 28 62 FC | 	wrlong	local06, objptr
0986c     57 00 00 FF 
09870     28 E4 85 F1 | 	sub	objptr, ##44584
09874     24 00 90 FD | 	jmp	#LR__0796
09878                 | LR__0795
09878     12 13 02 F6 | 	mov	arg01, local04
0987c     28 00 B0 FD | 	call	#_getfun
09880     57 00 00 FF 
09884     28 E4 05 F1 | 	add	objptr, ##44584
09888     F2 28 02 FB | 	rdlong	local06, objptr
0988c     01 28 06 F1 | 	add	local06, #1
09890     F2 28 62 FC | 	wrlong	local06, objptr
09894     57 00 00 FF 
09898     28 E4 85 F1 | 	sub	objptr, ##44584
0989c                 | LR__0796
0989c     A7 F0 03 F6 | 	mov	ptra, fp
098a0     B2 00 A0 FD | 	call	#popregs_
098a4                 | _getvalue_ret
098a4     2D 00 64 FD | 	ret
098a8                 | 
098a8                 | ' 
098a8                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
098a8                 | _getfun
098a8     0A 4A 05 F6 | 	mov	COUNT_, #10
098ac     A8 00 A0 FD | 	call	#pushregs_
098b0                 | _getfun_enter
098b0     09 25 02 F6 | 	mov	local04, arg01
098b4     57 00 00 FF 
098b8     28 E4 05 F1 | 	add	objptr, ##44584
098bc     F2 26 02 FB | 	rdlong	local05, objptr
098c0     13 29 02 F6 | 	mov	local06, local05
098c4     00 2A 06 F6 | 	mov	local07, #0
098c8                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
098c8                 | ' oldct=ct
098c8                 | ' numpar=0
098c8                 | '   
098c8                 | ' if lparts(ct+1).token=token_lpar then
098c8     01 26 06 F1 | 	add	local05, #1
098cc     03 26 66 F0 | 	shl	local05, #3
098d0     02 00 00 FF 
098d4     38 E4 85 F1 | 	sub	objptr, ##1080
098d8     F2 26 02 F1 | 	add	local05, objptr
098dc     04 26 06 F1 | 	add	local05, #4
098e0     13 27 02 FB | 	rdlong	local05, local05
098e4     15 26 0E F2 | 	cmp	local05, #21 wz
098e8     54 00 00 FF 
098ec     F0 E5 85 F1 | 	sub	objptr, ##43504
098f0     08 01 90 5D |  if_ne	jmp	#LR__0804
098f4     57 00 00 FF 
098f8     28 E4 05 F1 | 	add	objptr, ##44584
098fc     F2 2C 02 FB | 	rdlong	local08, objptr
09900     01 2C 06 F1 | 	add	local08, #1
09904     F2 2C 62 FC | 	wrlong	local08, objptr
09908     57 00 00 FF 
0990c     28 E4 85 F1 | 	sub	objptr, ##44584
09910                 | '   ct+=1 											' omit this lpar, this is for expr list
09910                 | '   do
09910                 | LR__0800
09910     57 00 00 FF 
09914     28 E4 05 F1 | 	add	objptr, ##44584
09918     F2 26 02 FB | 	rdlong	local05, objptr
0991c     01 26 06 F1 | 	add	local05, #1
09920     F2 26 62 FC | 	wrlong	local05, objptr
09924                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09924                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09924     03 26 66 F0 | 	shl	local05, #3
09928     02 00 00 FF 
0992c     38 E4 85 F1 | 	sub	objptr, ##1080
09930     F2 26 02 F1 | 	add	local05, objptr
09934     04 26 06 F1 | 	add	local05, #4
09938     13 2D 02 FB | 	rdlong	local08, local05
0993c     15 2C 0E F2 | 	cmp	local08, #21 wz
09940     54 00 00 FF 
09944     F0 E5 85 F1 | 	sub	objptr, ##43504
09948     40 00 90 5D |  if_ne	jmp	#LR__0801
0994c     57 00 00 FF 
09950     28 E4 05 F1 | 	add	objptr, ##44584
09954     F2 2C 02 FB | 	rdlong	local08, objptr
09958     01 2C 06 F1 | 	add	local08, #1
0995c     F2 2C 62 FC | 	wrlong	local08, objptr
09960     57 00 00 FF 
09964     28 E4 85 F1 | 	sub	objptr, ##44584
09968     D4 F2 BF FD | 	call	#_expr
0996c     57 00 00 FF 
09970     28 E4 05 F1 | 	add	objptr, ##44584
09974     F2 2C 02 FB | 	rdlong	local08, objptr
09978     01 2C 06 F1 | 	add	local08, #1
0997c     F2 2C 62 FC | 	wrlong	local08, objptr
09980     57 00 00 FF 
09984     28 E4 85 F1 | 	sub	objptr, ##44584
09988     04 00 90 FD | 	jmp	#LR__0802
0998c                 | LR__0801
0998c     B0 F2 BF FD | 	call	#_expr
09990                 | LR__0802
09990     01 2A 06 F1 | 	add	local07, #1
09994     57 00 00 FF 
09998     28 E4 05 F1 | 	add	objptr, ##44584
0999c     F2 26 02 FB | 	rdlong	local05, objptr
099a0     03 26 66 F0 | 	shl	local05, #3
099a4     02 00 00 FF 
099a8     38 E4 85 F1 | 	sub	objptr, ##1080
099ac     F2 26 02 F1 | 	add	local05, objptr
099b0     04 26 06 F1 | 	add	local05, #4
099b4     13 2D 02 FB | 	rdlong	local08, local05
099b8     14 2C 0E F2 | 	cmp	local08, #20 wz
099bc     54 00 00 FF 
099c0     F0 E5 85 F1 | 	sub	objptr, ##43504
099c4     34 00 90 AD |  if_e	jmp	#LR__0803
099c8     57 00 00 FF 
099cc     28 E4 05 F1 | 	add	objptr, ##44584
099d0     F2 2C 02 FB | 	rdlong	local08, objptr
099d4     03 2C 66 F0 | 	shl	local08, #3
099d8     02 00 00 FF 
099dc     38 E4 85 F1 | 	sub	objptr, ##1080
099e0     F2 2C 02 F1 | 	add	local08, objptr
099e4     04 2C 06 F1 | 	add	local08, #4
099e8     16 2D 02 FB | 	rdlong	local08, local08
099ec     FE 2D 0E F2 | 	cmp	local08, #510 wz
099f0     54 00 00 FF 
099f4     F0 E5 85 F1 | 	sub	objptr, ##43504
099f8     14 FF 9F 5D |  if_ne	jmp	#LR__0800
099fc                 | LR__0803
099fc                 | LR__0804
099fc     15 1F 02 F6 | 	mov	local01, local07
09a00     03 28 66 F0 | 	shl	local06, #3
09a04     54 00 00 FF 
09a08     F0 E5 05 F1 | 	add	objptr, ##43504
09a0c     F2 28 02 F1 | 	add	local06, objptr
09a10     04 28 06 F1 | 	add	local06, #4
09a14     14 23 02 FB | 	rdlong	local03, local06
09a18     0F 2D 02 F6 | 	mov	local08, local01
09a1c     10 2B 02 F6 | 	mov	local07, local02
09a20     11 29 02 F6 | 	mov	local06, local03
09a24     15 00 00 FF 
09a28     70 E4 05 F1 | 	add	objptr, ##10864
09a2c     F2 26 02 FB | 	rdlong	local05, objptr
09a30     13 13 02 F6 | 	mov	arg01, local05
09a34     01 12 66 F0 | 	shl	arg01, #1
09a38     13 13 02 F1 | 	add	arg01, local05
09a3c     02 12 66 F0 | 	shl	arg01, #2
09a40     03 00 00 FF 
09a44     00 E4 85 F1 | 	sub	objptr, ##1536
09a48     F2 12 02 F1 | 	add	arg01, objptr
09a4c     09 2D 62 FC | 	wrlong	local08, arg01
09a50     03 00 00 FF 
09a54     00 E4 05 F1 | 	add	objptr, ##1536
09a58     F2 2C 02 FB | 	rdlong	local08, objptr
09a5c     16 2F 02 F6 | 	mov	local09, local08
09a60     01 2E 66 F0 | 	shl	local09, #1
09a64     16 2F 02 F1 | 	add	local09, local08
09a68     02 2E 66 F0 | 	shl	local09, #2
09a6c     03 00 00 FF 
09a70     00 E4 85 F1 | 	sub	objptr, ##1536
09a74     F2 2E 02 F1 | 	add	local09, objptr
09a78     04 2E 06 F1 | 	add	local09, #4
09a7c     17 2B 62 FC | 	wrlong	local07, local09
09a80     03 00 00 FF 
09a84     00 E4 05 F1 | 	add	objptr, ##1536
09a88     F2 2C 02 FB | 	rdlong	local08, objptr
09a8c     16 31 02 F6 | 	mov	local10, local08
09a90     01 30 66 F0 | 	shl	local10, #1
09a94     16 31 02 F1 | 	add	local10, local08
09a98     02 30 66 F0 | 	shl	local10, #2
09a9c     03 00 00 FF 
09aa0     00 E4 85 F1 | 	sub	objptr, ##1536
09aa4     F2 30 02 F1 | 	add	local10, objptr
09aa8     08 30 06 F1 | 	add	local10, #8
09aac     18 29 62 FC | 	wrlong	local06, local10
09ab0     03 00 00 FF 
09ab4     00 E4 05 F1 | 	add	objptr, ##1536
09ab8     F2 2C 02 FB | 	rdlong	local08, objptr
09abc     01 2C 06 F1 | 	add	local08, #1
09ac0     F2 2C 62 FC | 	wrlong	local08, objptr
09ac4     6A 00 00 FF 
09ac8     60 E4 85 F1 | 	sub	objptr, ##54368
09acc                 | ' 
09acc                 | ' t2.result.uresult=numpar
09acc                 | ' 
09acc                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
09acc                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09acc                 | ' 
09acc                 | '   
09acc                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09acc     FF FF 7F FF 
09ad0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09ad4     B8 00 90 5D |  if_ne	jmp	#LR__0805
09ad8     15 22 06 F6 | 	mov	local03, #21
09adc     0F 2D 02 F6 | 	mov	local08, local01
09ae0     10 2B 02 F6 | 	mov	local07, local02
09ae4     11 29 02 F6 | 	mov	local06, local03
09ae8     6A 00 00 FF 
09aec     60 E4 05 F1 | 	add	objptr, ##54368
09af0     F2 26 02 FB | 	rdlong	local05, objptr
09af4     13 13 02 F6 | 	mov	arg01, local05
09af8     01 12 66 F0 | 	shl	arg01, #1
09afc     13 13 02 F1 | 	add	arg01, local05
09b00     02 12 66 F0 | 	shl	arg01, #2
09b04     03 00 00 FF 
09b08     00 E4 85 F1 | 	sub	objptr, ##1536
09b0c     F2 12 02 F1 | 	add	arg01, objptr
09b10     09 2D 62 FC | 	wrlong	local08, arg01
09b14     03 00 00 FF 
09b18     00 E4 05 F1 | 	add	objptr, ##1536
09b1c     F2 30 02 FB | 	rdlong	local10, objptr
09b20     18 2F 02 F6 | 	mov	local09, local10
09b24     01 2E 66 F0 | 	shl	local09, #1
09b28     18 2F 02 F1 | 	add	local09, local10
09b2c     02 2E 66 F0 | 	shl	local09, #2
09b30     03 00 00 FF 
09b34     00 E4 85 F1 | 	sub	objptr, ##1536
09b38     F2 2E 02 F1 | 	add	local09, objptr
09b3c     04 2E 06 F1 | 	add	local09, #4
09b40     17 2B 62 FC | 	wrlong	local07, local09
09b44     03 00 00 FF 
09b48     00 E4 05 F1 | 	add	objptr, ##1536
09b4c     F2 2E 02 FB | 	rdlong	local09, objptr
09b50     17 31 02 F6 | 	mov	local10, local09
09b54     01 30 66 F0 | 	shl	local10, #1
09b58     17 31 02 F1 | 	add	local10, local09
09b5c     02 30 66 F0 | 	shl	local10, #2
09b60     03 00 00 FF 
09b64     00 E4 85 F1 | 	sub	objptr, ##1536
09b68     F2 30 02 F1 | 	add	local10, objptr
09b6c     08 30 06 F1 | 	add	local10, #8
09b70     18 29 62 FC | 	wrlong	local06, local10
09b74     03 00 00 FF 
09b78     00 E4 05 F1 | 	add	objptr, ##1536
09b7c     F2 2C 02 FB | 	rdlong	local08, objptr
09b80     01 2C 06 F1 | 	add	local08, #1
09b84     F2 2C 62 FC | 	wrlong	local08, objptr
09b88     6A 00 00 FF 
09b8c     60 E4 85 F1 | 	sub	objptr, ##54368
09b90                 | LR__0805
09b90     A7 F0 03 F6 | 	mov	ptra, fp
09b94     B2 00 A0 FD | 	call	#popregs_
09b98                 | _getfun_ret
09b98     2D 00 64 FD | 	ret
09b9c                 | 
09b9c                 | '   
09b9c                 | '   
09b9c                 | ' sub getvar(m as integer) 
09b9c                 | _getvar
09b9c     0A 4A 05 F6 | 	mov	COUNT_, #10
09ba0     A8 00 A0 FD | 	call	#pushregs_
09ba4                 | _getvar_enter
09ba4     09 25 02 F6 | 	mov	local04, arg01
09ba8     57 00 00 FF 
09bac     28 E4 05 F1 | 	add	objptr, ##44584
09bb0     F2 14 02 FB | 	rdlong	arg02, objptr
09bb4     03 14 66 F0 | 	shl	arg02, #3
09bb8     02 00 00 FF 
09bbc     38 E4 85 F1 | 	sub	objptr, ##1080
09bc0     F2 14 02 F1 | 	add	arg02, objptr
09bc4     0A 27 02 FB | 	rdlong	local05, arg02
09bc8     13 13 02 F6 | 	mov	arg01, local05
09bcc     01 14 06 F6 | 	mov	arg02, #1
09bd0     54 00 00 FF 
09bd4     F0 E5 85 F1 | 	sub	objptr, ##43504
09bd8     CC 47 B1 FD | 	call	#__system__Right_S
09bdc     FD 28 02 F6 | 	mov	local06, result1
09be0     01 2A 66 F6 | 	neg	local07, #1
09be4                 | ' 
09be4                 | ' varname$=lparts(ct).part$
09be4                 | ' suffix$=right$(varname$,1)
09be4                 | ' j=-1
09be4                 | ' 
09be4                 | ' for i=0 to varnum-1
09be4     00 2C 06 F6 | 	mov	local08, #0
09be8     54 00 00 FF 
09bec     EC E5 05 F1 | 	add	objptr, ##43500
09bf0     F2 2E 02 FB | 	rdlong	local09, objptr
09bf4     54 00 00 FF 
09bf8     EC E5 85 F1 | 	sub	objptr, ##43500
09bfc                 | LR__0810
09bfc     17 2D 52 F2 | 	cmps	local08, local09 wc
09c00     38 00 90 3D |  if_ae	jmp	#LR__0811
09c04                 | '   if variables(i).name=varname$ then j=i : exit
09c04     16 15 02 F6 | 	mov	arg02, local08
09c08     04 14 66 F0 | 	shl	arg02, #4
09c0c     34 00 00 FF 
09c10     EC E5 05 F1 | 	add	objptr, ##27116
09c14     F2 14 02 F1 | 	add	arg02, objptr
09c18     0A 13 02 FB | 	rdlong	arg01, arg02
09c1c     13 15 02 F6 | 	mov	arg02, local05
09c20     34 00 00 FF 
09c24     EC E5 85 F1 | 	sub	objptr, ##27116
09c28     D8 26 B1 FD | 	call	#__system___string_cmp
09c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
09c30     16 2B 02 A6 |  if_e	mov	local07, local08
09c34     01 2C 06 51 |  if_ne	add	local08, #1
09c38     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
09c3c                 | LR__0811
09c3c                 | ' if  j=-1 andalso varnum<maxvars then   
09c3c     FF FF 7F FF 
09c40     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09c44     A8 00 90 5D |  if_ne	jmp	#LR__0812
09c48     54 00 00 FF 
09c4c     EC E5 05 F1 | 	add	objptr, ##43500
09c50     F2 2E 02 FB | 	rdlong	local09, objptr
09c54     54 00 00 FF 
09c58     EC E5 85 F1 | 	sub	objptr, ##43500
09c5c     01 00 00 FF 
09c60     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09c64     88 00 90 3D |  if_ae	jmp	#LR__0812
09c68     54 00 00 FF 
09c6c     EC E5 05 F1 | 	add	objptr, ##43500
09c70     F2 2E 02 FB | 	rdlong	local09, objptr
09c74     04 2E 66 F0 | 	shl	local09, #4
09c78     20 00 00 FF 
09c7c     00 E4 85 F1 | 	sub	objptr, ##16384
09c80     F2 2E 02 F1 | 	add	local09, objptr
09c84     17 27 62 FC | 	wrlong	local05, local09
09c88     20 00 00 FF 
09c8c     00 E4 05 F1 | 	add	objptr, ##16384
09c90     F2 2E 02 FB | 	rdlong	local09, objptr
09c94     04 2E 66 F0 | 	shl	local09, #4
09c98     20 00 00 FF 
09c9c     00 E4 85 F1 | 	sub	objptr, ##16384
09ca0     F2 2E 02 F1 | 	add	local09, objptr
09ca4     04 2E 06 F1 | 	add	local09, #4
09ca8     17 01 68 FC | 	wrlong	#0, local09
09cac     20 00 00 FF 
09cb0     00 E4 05 F1 | 	add	objptr, ##16384
09cb4     F2 2E 02 FB | 	rdlong	local09, objptr
09cb8     04 2E 66 F0 | 	shl	local09, #4
09cbc     20 00 00 FF 
09cc0     00 E4 85 F1 | 	sub	objptr, ##16384
09cc4     F2 2E 02 F1 | 	add	local09, objptr
09cc8     0C 2E 06 F1 | 	add	local09, #12
09ccc     17 39 68 FC | 	wrlong	#28, local09
09cd0     20 00 00 FF 
09cd4     00 E4 05 F1 | 	add	objptr, ##16384
09cd8     F2 2E 02 FB | 	rdlong	local09, objptr
09cdc     17 2B 02 F6 | 	mov	local07, local09
09ce0     01 2E 06 F1 | 	add	local09, #1
09ce4     F2 2E 62 FC | 	wrlong	local09, objptr
09ce8     54 00 00 FF 
09cec     EC E5 85 F1 | 	sub	objptr, ##43500
09cf0                 | LR__0812
09cf0     00 2E 06 F6 | 	mov	local09, #0
09cf4                 | ' numpar=0
09cf4                 | ' ' check if it is an array
09cf4                 | ' 
09cf4                 | ' if lparts(ct+1).token=token_lpar then
09cf4     57 00 00 FF 
09cf8     28 E4 05 F1 | 	add	objptr, ##44584
09cfc     F2 2C 02 FB | 	rdlong	local08, objptr
09d00     01 2C 06 F1 | 	add	local08, #1
09d04     03 2C 66 F0 | 	shl	local08, #3
09d08     02 00 00 FF 
09d0c     38 E4 85 F1 | 	sub	objptr, ##1080
09d10     F2 2C 02 F1 | 	add	local08, objptr
09d14     04 2C 06 F1 | 	add	local08, #4
09d18     16 2D 02 FB | 	rdlong	local08, local08
09d1c     15 2C 0E F2 | 	cmp	local08, #21 wz
09d20     54 00 00 FF 
09d24     F0 E5 85 F1 | 	sub	objptr, ##43504
09d28     08 01 90 5D |  if_ne	jmp	#LR__0817
09d2c     57 00 00 FF 
09d30     28 E4 05 F1 | 	add	objptr, ##44584
09d34     F2 30 02 FB | 	rdlong	local10, objptr
09d38     01 30 06 F1 | 	add	local10, #1
09d3c     F2 30 62 FC | 	wrlong	local10, objptr
09d40     57 00 00 FF 
09d44     28 E4 85 F1 | 	sub	objptr, ##44584
09d48                 | '   ct+=1 											' omit this lpar, this is for expr list
09d48                 | '   do
09d48                 | LR__0813
09d48     57 00 00 FF 
09d4c     28 E4 05 F1 | 	add	objptr, ##44584
09d50     F2 2C 02 FB | 	rdlong	local08, objptr
09d54     01 2C 06 F1 | 	add	local08, #1
09d58     F2 2C 62 FC | 	wrlong	local08, objptr
09d5c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09d5c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09d5c     03 2C 66 F0 | 	shl	local08, #3
09d60     02 00 00 FF 
09d64     38 E4 85 F1 | 	sub	objptr, ##1080
09d68     F2 2C 02 F1 | 	add	local08, objptr
09d6c     04 2C 06 F1 | 	add	local08, #4
09d70     16 31 02 FB | 	rdlong	local10, local08
09d74     15 30 0E F2 | 	cmp	local10, #21 wz
09d78     54 00 00 FF 
09d7c     F0 E5 85 F1 | 	sub	objptr, ##43504
09d80     40 00 90 5D |  if_ne	jmp	#LR__0814
09d84     57 00 00 FF 
09d88     28 E4 05 F1 | 	add	objptr, ##44584
09d8c     F2 30 02 FB | 	rdlong	local10, objptr
09d90     01 30 06 F1 | 	add	local10, #1
09d94     F2 30 62 FC | 	wrlong	local10, objptr
09d98     57 00 00 FF 
09d9c     28 E4 85 F1 | 	sub	objptr, ##44584
09da0     9C EE BF FD | 	call	#_expr
09da4     57 00 00 FF 
09da8     28 E4 05 F1 | 	add	objptr, ##44584
09dac     F2 30 02 FB | 	rdlong	local10, objptr
09db0     01 30 06 F1 | 	add	local10, #1
09db4     F2 30 62 FC | 	wrlong	local10, objptr
09db8     57 00 00 FF 
09dbc     28 E4 85 F1 | 	sub	objptr, ##44584
09dc0     04 00 90 FD | 	jmp	#LR__0815
09dc4                 | LR__0814
09dc4     78 EE BF FD | 	call	#_expr
09dc8                 | LR__0815
09dc8     01 2E 06 F1 | 	add	local09, #1
09dcc     57 00 00 FF 
09dd0     28 E4 05 F1 | 	add	objptr, ##44584
09dd4     F2 2C 02 FB | 	rdlong	local08, objptr
09dd8     03 2C 66 F0 | 	shl	local08, #3
09ddc     02 00 00 FF 
09de0     38 E4 85 F1 | 	sub	objptr, ##1080
09de4     F2 2C 02 F1 | 	add	local08, objptr
09de8     04 2C 06 F1 | 	add	local08, #4
09dec     16 31 02 FB | 	rdlong	local10, local08
09df0     14 30 0E F2 | 	cmp	local10, #20 wz
09df4     54 00 00 FF 
09df8     F0 E5 85 F1 | 	sub	objptr, ##43504
09dfc     34 00 90 AD |  if_e	jmp	#LR__0816
09e00     57 00 00 FF 
09e04     28 E4 05 F1 | 	add	objptr, ##44584
09e08     F2 30 02 FB | 	rdlong	local10, objptr
09e0c     03 30 66 F0 | 	shl	local10, #3
09e10     02 00 00 FF 
09e14     38 E4 85 F1 | 	sub	objptr, ##1080
09e18     F2 30 02 F1 | 	add	local10, objptr
09e1c     04 30 06 F1 | 	add	local10, #4
09e20     18 31 02 FB | 	rdlong	local10, local10
09e24     FE 31 0E F2 | 	cmp	local10, #510 wz
09e28     54 00 00 FF 
09e2c     F0 E5 85 F1 | 	sub	objptr, ##43504
09e30     14 FF 9F 5D |  if_ne	jmp	#LR__0813
09e34                 | LR__0816
09e34                 | LR__0817
09e34     17 21 02 F6 | 	mov	local02, local09
09e38     11 22 06 F6 | 	mov	local03, #17
09e3c     15 1F 02 F6 | 	mov	local01, local07
09e40     0F 31 02 F6 | 	mov	local10, local01
09e44     10 2F 02 F6 | 	mov	local09, local02
09e48     11 2D 02 F6 | 	mov	local08, local03
09e4c     6A 00 00 FF 
09e50     60 E4 05 F1 | 	add	objptr, ##54368
09e54     F2 2A 02 FB | 	rdlong	local07, objptr
09e58     15 29 02 F6 | 	mov	local06, local07
09e5c     01 28 66 F0 | 	shl	local06, #1
09e60     15 29 02 F1 | 	add	local06, local07
09e64     02 28 66 F0 | 	shl	local06, #2
09e68     03 00 00 FF 
09e6c     00 E4 85 F1 | 	sub	objptr, ##1536
09e70     F2 28 02 F1 | 	add	local06, objptr
09e74     14 31 62 FC | 	wrlong	local10, local06
09e78     03 00 00 FF 
09e7c     00 E4 05 F1 | 	add	objptr, ##1536
09e80     F2 30 02 FB | 	rdlong	local10, objptr
09e84     18 27 02 F6 | 	mov	local05, local10
09e88     01 26 66 F0 | 	shl	local05, #1
09e8c     18 27 02 F1 | 	add	local05, local10
09e90     02 26 66 F0 | 	shl	local05, #2
09e94     03 00 00 FF 
09e98     00 E4 85 F1 | 	sub	objptr, ##1536
09e9c     F2 26 02 F1 | 	add	local05, objptr
09ea0     04 26 06 F1 | 	add	local05, #4
09ea4     13 2F 62 FC | 	wrlong	local09, local05
09ea8     03 00 00 FF 
09eac     00 E4 05 F1 | 	add	objptr, ##1536
09eb0     F2 30 02 FB | 	rdlong	local10, objptr
09eb4     18 FB 01 F6 | 	mov	result1, local10
09eb8     01 FA 65 F0 | 	shl	result1, #1
09ebc     18 FB 01 F1 | 	add	result1, local10
09ec0     02 FA 65 F0 | 	shl	result1, #2
09ec4     03 00 00 FF 
09ec8     00 E4 85 F1 | 	sub	objptr, ##1536
09ecc     F2 FA 01 F1 | 	add	result1, objptr
09ed0     08 FA 05 F1 | 	add	result1, #8
09ed4     FD 2C 62 FC | 	wrlong	local08, result1
09ed8     03 00 00 FF 
09edc     00 E4 05 F1 | 	add	objptr, ##1536
09ee0     F2 30 02 FB | 	rdlong	local10, objptr
09ee4     01 30 06 F1 | 	add	local10, #1
09ee8     F2 30 62 FC | 	wrlong	local10, objptr
09eec     6A 00 00 FF 
09ef0     60 E4 85 F1 | 	sub	objptr, ##54368
09ef4                 | ' 
09ef4                 | ' t2.result.twowords(1)=numpar
09ef4                 | ' 
09ef4                 | ' 
09ef4                 | ' 
09ef4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09ef4                 | ' 
09ef4                 | ' 
09ef4                 | '  
09ef4                 | ' 
09ef4                 | ' 701 
09ef4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09ef4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09ef4     FF FF 7F FF 
09ef8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09efc     B8 00 90 5D |  if_ne	jmp	#LR__0818
09f00     15 22 06 F6 | 	mov	local03, #21
09f04     0F 31 02 F6 | 	mov	local10, local01
09f08     10 2F 02 F6 | 	mov	local09, local02
09f0c     11 2D 02 F6 | 	mov	local08, local03
09f10     6A 00 00 FF 
09f14     60 E4 05 F1 | 	add	objptr, ##54368
09f18     F2 2A 02 FB | 	rdlong	local07, objptr
09f1c     15 29 02 F6 | 	mov	local06, local07
09f20     01 28 66 F0 | 	shl	local06, #1
09f24     15 29 02 F1 | 	add	local06, local07
09f28     02 28 66 F0 | 	shl	local06, #2
09f2c     03 00 00 FF 
09f30     00 E4 85 F1 | 	sub	objptr, ##1536
09f34     F2 28 02 F1 | 	add	local06, objptr
09f38     14 31 62 FC | 	wrlong	local10, local06
09f3c     03 00 00 FF 
09f40     00 E4 05 F1 | 	add	objptr, ##1536
09f44     F2 1E 02 FB | 	rdlong	local01, objptr
09f48     0F 27 02 F6 | 	mov	local05, local01
09f4c     01 26 66 F0 | 	shl	local05, #1
09f50     0F 27 02 F1 | 	add	local05, local01
09f54     02 26 66 F0 | 	shl	local05, #2
09f58     03 00 00 FF 
09f5c     00 E4 85 F1 | 	sub	objptr, ##1536
09f60     F2 26 02 F1 | 	add	local05, objptr
09f64     04 26 06 F1 | 	add	local05, #4
09f68     13 2F 62 FC | 	wrlong	local09, local05
09f6c     03 00 00 FF 
09f70     00 E4 05 F1 | 	add	objptr, ##1536
09f74     F2 1E 02 FB | 	rdlong	local01, objptr
09f78     0F FB 01 F6 | 	mov	result1, local01
09f7c     01 FA 65 F0 | 	shl	result1, #1
09f80     0F FB 01 F1 | 	add	result1, local01
09f84     02 FA 65 F0 | 	shl	result1, #2
09f88     03 00 00 FF 
09f8c     00 E4 85 F1 | 	sub	objptr, ##1536
09f90     F2 FA 01 F1 | 	add	result1, objptr
09f94     08 FA 05 F1 | 	add	result1, #8
09f98     FD 2C 62 FC | 	wrlong	local08, result1
09f9c     03 00 00 FF 
09fa0     00 E4 05 F1 | 	add	objptr, ##1536
09fa4     F2 30 02 FB | 	rdlong	local10, objptr
09fa8     01 30 06 F1 | 	add	local10, #1
09fac     F2 30 62 FC | 	wrlong	local10, objptr
09fb0     6A 00 00 FF 
09fb4     60 E4 85 F1 | 	sub	objptr, ##54368
09fb8                 | LR__0818
09fb8     A7 F0 03 F6 | 	mov	ptra, fp
09fbc     B2 00 A0 FD | 	call	#popregs_
09fc0                 | _getvar_ret
09fc0     2D 00 64 FD | 	ret
09fc4                 | 
09fc4                 | ' 
09fc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09fc4                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
09fc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09fc4                 | ' 
09fc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09fc4                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
09fc4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09fc4                 | ' 
09fc4                 | ' function execute_line (astart=0 as integer) as integer
09fc4                 | _execute_line
09fc4     04 4A 05 F6 | 	mov	COUNT_, #4
09fc8     A8 00 A0 FD | 	call	#pushregs_
09fcc     79 00 00 FF 
09fd0     98 E5 05 F1 | 	add	objptr, ##62360
09fd4     F2 00 68 FC | 	wrlong	#0, objptr
09fd8                 | ' runptr2=0
09fd8                 | ' for lineptr_e=astart to lineptr-1
09fd8     0F 00 00 FF 
09fdc     34 E5 85 F1 | 	sub	objptr, ##7988
09fe0     F2 12 62 FC | 	wrlong	arg01, objptr
09fe4     04 E4 85 F1 | 	sub	objptr, #4
09fe8     F2 1E 02 FB | 	rdlong	local01, objptr
09fec     6A 00 00 FF 
09ff0     60 E4 85 F1 | 	sub	objptr, ##54368
09ff4                 | LR__0820
09ff4     6A 00 00 FF 
09ff8     64 E4 05 F1 | 	add	objptr, ##54372
09ffc     F2 FA 01 FB | 	rdlong	result1, objptr
0a000     6A 00 00 FF 
0a004     64 E4 85 F1 | 	sub	objptr, ##54372
0a008     0F FB 51 F2 | 	cmps	result1, local01 wc
0a00c     98 00 90 3D |  if_ae	jmp	#LR__0821
0a010     6A 00 00 FF 
0a014     64 E4 05 F1 | 	add	objptr, ##54372
0a018     F2 FA 01 FB | 	rdlong	result1, objptr
0a01c     FD 20 02 F6 | 	mov	local02, result1
0a020     01 20 66 F0 | 	shl	local02, #1
0a024     FD 20 02 F1 | 	add	local02, result1
0a028     02 20 66 F0 | 	shl	local02, #2
0a02c     03 00 00 FF 
0a030     04 E4 85 F1 | 	sub	objptr, ##1540
0a034     F2 20 02 F1 | 	add	local02, objptr
0a038     08 20 06 F1 | 	add	local02, #8
0a03c     10 21 02 FB | 	rdlong	local02, local02
0a040     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a044     02 20 66 F0 | 	shl	local02, #2
0a048     04 00 00 FF 
0a04c     1C E4 85 F1 | 	sub	objptr, ##2076
0a050     F2 20 02 F1 | 	add	local02, objptr
0a054     10 21 02 FB | 	rdlong	local02, local02
0a058     10 23 02 F6 | 	mov	local03, local02
0a05c     13 20 46 F7 | 	zerox	local02, #19
0a060     14 22 46 F0 | 	shr	local03, #20
0a064     02 22 66 F0 | 	shl	local03, #2
0a068     ED 22 02 F1 | 	add	local03, __methods__
0a06c     11 23 02 FB | 	rdlong	local03, local03
0a070     63 00 00 FF 
0a074     44 E4 85 F1 | 	sub	objptr, ##50756
0a078     F2 24 02 F6 | 	mov	local04, objptr
0a07c     10 E5 01 F6 | 	mov	objptr, local02
0a080     2D 22 62 FD | 	call	local03
0a084     12 E5 01 F6 | 	mov	objptr, local04
0a088     6A 00 00 FF 
0a08c     64 E4 05 F1 | 	add	objptr, ##54372
0a090     F2 24 02 FB | 	rdlong	local04, objptr
0a094     01 24 06 F1 | 	add	local04, #1
0a098     F2 24 62 FC | 	wrlong	local04, objptr
0a09c     6A 00 00 FF 
0a0a0     64 E4 85 F1 | 	sub	objptr, ##54372
0a0a4     4C FF 9F FD | 	jmp	#LR__0820
0a0a8                 | LR__0821
0a0a8                 | ' return runptr2
0a0a8     79 00 00 FF 
0a0ac     98 E5 05 F1 | 	add	objptr, ##62360
0a0b0     F2 FA 01 FB | 	rdlong	result1, objptr
0a0b4     79 00 00 FF 
0a0b8     98 E5 85 F1 | 	sub	objptr, ##62360
0a0bc     A7 F0 03 F6 | 	mov	ptra, fp
0a0c0     B2 00 A0 FD | 	call	#popregs_
0a0c4                 | _execute_line_ret
0a0c4     2D 00 64 FD | 	ret
0a0c8                 | 
0a0c8                 | ' 
0a0c8                 | ' 
0a0c8                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a0c8                 | ' 
0a0c8                 | ' function pop() as expr_result
0a0c8                 | _pop
0a0c8                 | ' 
0a0c8                 | ' if stackpointer=0 then
0a0c8     63 00 00 FF 
0a0cc     3C E4 05 F1 | 	add	objptr, ##50748
0a0d0     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a0d4     63 00 00 FF 
0a0d8     3C E4 85 F1 | 	sub	objptr, ##50748
0a0dc     FF 04 06 A6 |  if_e	mov	_var03, #255
0a0e0     18 00 06 A6 |  if_e	mov	_var01, #24
0a0e4     68 00 90 AD |  if_e	jmp	#LR__0830
0a0e8     63 00 00 FF 
0a0ec     3C E4 05 F1 | 	add	objptr, ##50748
0a0f0     F2 FA 01 FB | 	rdlong	result1, objptr
0a0f4     01 FA 85 F1 | 	sub	result1, #1
0a0f8     F2 FA 61 FC | 	wrlong	result1, objptr
0a0fc     FD FE 01 F6 | 	mov	result3, result1
0a100     01 FE 65 F0 | 	shl	result3, #1
0a104     FD FE 01 F1 | 	add	result3, result1
0a108     02 FE 65 F0 | 	shl	result3, #2
0a10c     0C 00 00 FF 
0a110     0C E4 85 F1 | 	sub	objptr, ##6156
0a114     F2 FE 01 F1 | 	add	result3, objptr
0a118     FF 00 02 FB | 	rdlong	_var01, result3
0a11c     04 FE 05 F1 | 	add	result3, #4
0a120     FF FE 01 FB | 	rdlong	result3, result3
0a124     FD FC 01 F6 | 	mov	result2, result1
0a128     01 FC 65 F0 | 	shl	result2, #1
0a12c     FD FC 01 F1 | 	add	result2, result1
0a130     02 FC 65 F0 | 	shl	result2, #2
0a134     F2 FC 01 F1 | 	add	result2, objptr
0a138     08 FC 05 F1 | 	add	result2, #8
0a13c     FE FA 01 FB | 	rdlong	result1, result2
0a140     FF 02 02 F6 | 	mov	_var02, result3
0a144     FD 04 02 F6 | 	mov	_var03, result1
0a148     57 00 00 FF 
0a14c     30 E4 85 F1 | 	sub	objptr, ##44592
0a150                 | LR__0830
0a150                 | ' return t1
0a150     01 FD 01 F6 | 	mov	result2, _var02
0a154     02 FF 01 F6 | 	mov	result3, _var03
0a158     00 FB 01 F6 | 	mov	result1, _var01
0a15c                 | _pop_ret
0a15c     2D 00 64 FD | 	ret
0a160                 | 
0a160                 | ' 
0a160                 | ' sub push(t1 as expr_result )
0a160                 | _push
0a160                 | ' 
0a160                 | ' 'print "In push: "; t1.result_type
0a160                 | ' 'print "In push: "; t1.result.uresult
0a160                 | ' 
0a160                 | ' if stackpointer<maxstack then 
0a160     63 00 00 FF 
0a164     3C E4 05 F1 | 	add	objptr, ##50748
0a168     F2 00 02 FB | 	rdlong	_var01, objptr
0a16c     63 00 00 FF 
0a170     3C E4 85 F1 | 	sub	objptr, ##50748
0a174     01 00 00 FF 
0a178     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a17c     BC 00 90 3D |  if_ae	jmp	#LR__0840
0a180     09 01 02 FB | 	rdlong	_var01, arg01
0a184     04 12 06 F1 | 	add	arg01, #4
0a188     09 03 02 FB | 	rdlong	_var02, arg01
0a18c     04 12 06 F1 | 	add	arg01, #4
0a190     09 13 02 FB | 	rdlong	arg01, arg01
0a194     63 00 00 FF 
0a198     3C E4 05 F1 | 	add	objptr, ##50748
0a19c     F2 04 02 FB | 	rdlong	_var03, objptr
0a1a0     02 07 02 F6 | 	mov	_var04, _var03
0a1a4     01 06 66 F0 | 	shl	_var04, #1
0a1a8     02 07 02 F1 | 	add	_var04, _var03
0a1ac     02 06 66 F0 | 	shl	_var04, #2
0a1b0     0C 00 00 FF 
0a1b4     0C E4 85 F1 | 	sub	objptr, ##6156
0a1b8     F2 06 02 F1 | 	add	_var04, objptr
0a1bc     03 01 62 FC | 	wrlong	_var01, _var04
0a1c0     0C 00 00 FF 
0a1c4     0C E4 05 F1 | 	add	objptr, ##6156
0a1c8     F2 06 02 FB | 	rdlong	_var04, objptr
0a1cc     03 05 02 F6 | 	mov	_var03, _var04
0a1d0     01 04 66 F0 | 	shl	_var03, #1
0a1d4     03 05 02 F1 | 	add	_var03, _var04
0a1d8     02 04 66 F0 | 	shl	_var03, #2
0a1dc     0C 00 00 FF 
0a1e0     0C E4 85 F1 | 	sub	objptr, ##6156
0a1e4     F2 04 02 F1 | 	add	_var03, objptr
0a1e8     04 04 06 F1 | 	add	_var03, #4
0a1ec     02 03 62 FC | 	wrlong	_var02, _var03
0a1f0     0C 00 00 FF 
0a1f4     0C E4 05 F1 | 	add	objptr, ##6156
0a1f8     F2 06 02 FB | 	rdlong	_var04, objptr
0a1fc     03 05 02 F6 | 	mov	_var03, _var04
0a200     01 04 66 F0 | 	shl	_var03, #1
0a204     03 05 02 F1 | 	add	_var03, _var04
0a208     02 04 66 F0 | 	shl	_var03, #2
0a20c     0C 00 00 FF 
0a210     0C E4 85 F1 | 	sub	objptr, ##6156
0a214     F2 04 02 F1 | 	add	_var03, objptr
0a218     08 04 06 F1 | 	add	_var03, #8
0a21c     02 13 62 FC | 	wrlong	arg01, _var03
0a220     0C 00 00 FF 
0a224     0C E4 05 F1 | 	add	objptr, ##6156
0a228     F2 00 02 FB | 	rdlong	_var01, objptr
0a22c     01 00 06 F1 | 	add	_var01, #1
0a230     F2 00 62 FC | 	wrlong	_var01, objptr
0a234     63 00 00 FF 
0a238     3C E4 85 F1 | 	sub	objptr, ##50748
0a23c                 | LR__0840
0a23c                 | _push_ret
0a23c     2D 00 64 FD | 	ret
0a240                 | 
0a240                 | ' 
0a240                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a240                 | ' 
0a240                 | ' sub do_push
0a240                 | _do_push
0a240                 | ' if stackpointer<maxstack then 
0a240     63 00 00 FF 
0a244     3C E4 05 F1 | 	add	objptr, ##50748
0a248     F2 00 02 FB | 	rdlong	_var01, objptr
0a24c     63 00 00 FF 
0a250     3C E4 85 F1 | 	sub	objptr, ##50748
0a254     01 00 00 FF 
0a258     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a25c     F8 00 90 3D |  if_ae	jmp	#LR__0850
0a260     6A 00 00 FF 
0a264     64 E4 05 F1 | 	add	objptr, ##54372
0a268     F2 02 02 FB | 	rdlong	_var02, objptr
0a26c     01 05 02 F6 | 	mov	_var03, _var02
0a270     01 04 66 F0 | 	shl	_var03, #1
0a274     01 05 02 F1 | 	add	_var03, _var02
0a278     02 04 66 F0 | 	shl	_var03, #2
0a27c     03 00 00 FF 
0a280     04 E4 85 F1 | 	sub	objptr, ##1540
0a284     F2 04 02 F1 | 	add	_var03, objptr
0a288     02 01 02 FB | 	rdlong	_var01, _var03
0a28c     04 04 06 F1 | 	add	_var03, #4
0a290     02 07 02 FB | 	rdlong	_var04, _var03
0a294     01 05 02 F6 | 	mov	_var03, _var02
0a298     01 04 66 F0 | 	shl	_var03, #1
0a29c     01 05 02 F1 | 	add	_var03, _var02
0a2a0     02 04 66 F0 | 	shl	_var03, #2
0a2a4     F2 04 02 F1 | 	add	_var03, objptr
0a2a8     08 04 06 F1 | 	add	_var03, #8
0a2ac     02 03 02 FB | 	rdlong	_var02, _var03
0a2b0     04 00 00 FF 
0a2b4     24 E4 85 F1 | 	sub	objptr, ##2084
0a2b8     F2 04 02 FB | 	rdlong	_var03, objptr
0a2bc     02 09 02 F6 | 	mov	_var05, _var03
0a2c0     01 08 66 F0 | 	shl	_var05, #1
0a2c4     02 09 02 F1 | 	add	_var05, _var03
0a2c8     02 08 66 F0 | 	shl	_var05, #2
0a2cc     0C 00 00 FF 
0a2d0     0C E4 85 F1 | 	sub	objptr, ##6156
0a2d4     F2 08 02 F1 | 	add	_var05, objptr
0a2d8     04 01 62 FC | 	wrlong	_var01, _var05
0a2dc     0C 00 00 FF 
0a2e0     0C E4 05 F1 | 	add	objptr, ##6156
0a2e4     F2 08 02 FB | 	rdlong	_var05, objptr
0a2e8     04 05 02 F6 | 	mov	_var03, _var05
0a2ec     01 04 66 F0 | 	shl	_var03, #1
0a2f0     04 05 02 F1 | 	add	_var03, _var05
0a2f4     02 04 66 F0 | 	shl	_var03, #2
0a2f8     0C 00 00 FF 
0a2fc     0C E4 85 F1 | 	sub	objptr, ##6156
0a300     F2 04 02 F1 | 	add	_var03, objptr
0a304     04 04 06 F1 | 	add	_var03, #4
0a308     02 07 62 FC | 	wrlong	_var04, _var03
0a30c     0C 00 00 FF 
0a310     0C E4 05 F1 | 	add	objptr, ##6156
0a314     F2 08 02 FB | 	rdlong	_var05, objptr
0a318     04 07 02 F6 | 	mov	_var04, _var05
0a31c     01 06 66 F0 | 	shl	_var04, #1
0a320     04 07 02 F1 | 	add	_var04, _var05
0a324     02 06 66 F0 | 	shl	_var04, #2
0a328     0C 00 00 FF 
0a32c     0C E4 85 F1 | 	sub	objptr, ##6156
0a330     F2 06 02 F1 | 	add	_var04, objptr
0a334     08 06 06 F1 | 	add	_var04, #8
0a338     03 03 62 FC | 	wrlong	_var02, _var04
0a33c     0C 00 00 FF 
0a340     0C E4 05 F1 | 	add	objptr, ##6156
0a344     F2 00 02 FB | 	rdlong	_var01, objptr
0a348     01 00 06 F1 | 	add	_var01, #1
0a34c     F2 00 62 FC | 	wrlong	_var01, objptr
0a350     63 00 00 FF 
0a354     3C E4 85 F1 | 	sub	objptr, ##50748
0a358                 | LR__0850
0a358                 | _do_push_ret
0a358     2D 00 64 FD | 	ret
0a35c                 | 
0a35c                 | ' 
0a35c                 | '   
0a35c                 | ' sub csave_block(address as ulong)
0a35c                 | _csave_block
0a35c     09 01 02 F6 | 	mov	_var01, arg01
0a360                 | ' 
0a360                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0a360                 | ' ' we enter it at the state of playing 1 kHz header tone
0a360                 | ' 
0a360                 | ' for i=0 to 63 step 2
0a360     00 02 06 F6 | 	mov	_var02, #0
0a364                 | LR__0860
0a364                 | '   do: loop until lpeek(base+32*7)>32768
0a364     56 00 00 FF 
0a368     F4 E5 05 F1 | 	add	objptr, ##44532
0a36c     97 0C 48 FB | 	callpa	#(@LR__0862-@LR__0861)>>2,fcache_load_ptr_
0a370                 | LR__0861
0a370     F2 12 02 FB | 	rdlong	arg01, objptr
0a374     E0 12 06 F1 | 	add	arg01, #224
0a378     09 FB 01 FB | 	rdlong	result1, arg01
0a37c     40 00 00 FF 
0a380     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a384     E8 FF 9F CD |  if_b	jmp	#LR__0861
0a388                 | LR__0862
0a388     00 13 02 F6 | 	mov	arg01, _var01
0a38c     01 05 02 F6 | 	mov	_var03, _var02
0a390     02 04 66 F0 | 	shl	_var03, #2
0a394     02 13 02 F1 | 	add	arg01, _var03
0a398     09 07 02 FB | 	rdlong	_var04, arg01
0a39c     24 00 00 FF 
0a3a0     D4 E4 05 F1 | 	add	objptr, ##18644
0a3a4     F2 06 62 FC | 	wrlong	_var04, objptr
0a3a8     7B 00 00 FF 
0a3ac     C8 E4 85 F1 | 	sub	objptr, ##63176
0a3b0                 | '   q=lpeek(address+4*i)
0a3b0                 | '      for bit=0 to 31
0a3b0     00 08 06 F6 | 	mov	_var05, #0
0a3b4     97 84 48 FB | 	callpa	#(@LR__0867-@LR__0863)>>2,fcache_load_ptr_
0a3b8                 | LR__0863
0a3b8                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0a3b8     7B 00 00 FF 
0a3bc     C8 E4 05 F1 | 	add	objptr, ##63176
0a3c0     F2 06 02 FB | 	rdlong	_var04, objptr
0a3c4     7B 00 00 FF 
0a3c8     C8 E4 85 F1 | 	sub	objptr, ##63176
0a3cc     04 05 C2 F9 | 	decod	_var03, _var05
0a3d0     02 07 CA F7 | 	test	_var04, _var03 wz
0a3d4     60 00 90 AD |  if_e	jmp	#LR__0864
0a3d8     04 05 02 F6 | 	mov	_var03, _var05
0a3dc     02 04 66 F0 | 	shl	_var03, #2
0a3e0     77 00 00 FF 
0a3e4     90 E4 05 F1 | 	add	objptr, ##61072
0a3e8     F2 04 02 F1 | 	add	_var03, objptr
0a3ec     02 FF 48 FC | 	wrbyte	#127, _var03
0a3f0     04 05 02 F6 | 	mov	_var03, _var05
0a3f4     02 04 66 F0 | 	shl	_var03, #2
0a3f8     01 04 06 F1 | 	add	_var03, #1
0a3fc     F2 04 02 F1 | 	add	_var03, objptr
0a400     02 01 49 FC | 	wrbyte	#128, _var03
0a404     04 05 02 F6 | 	mov	_var03, _var05
0a408     02 04 66 F0 | 	shl	_var03, #2
0a40c     02 04 06 F1 | 	add	_var03, #2
0a410     F2 04 02 F1 | 	add	_var03, objptr
0a414     02 FF 48 FC | 	wrbyte	#127, _var03
0a418     04 05 02 F6 | 	mov	_var03, _var05
0a41c     02 04 66 F0 | 	shl	_var03, #2
0a420     03 04 06 F1 | 	add	_var03, #3
0a424     F2 04 02 F1 | 	add	_var03, objptr
0a428     02 01 49 FC | 	wrbyte	#128, _var03
0a42c     77 00 00 FF 
0a430     90 E4 85 F1 | 	sub	objptr, ##61072
0a434     5C 00 90 FD | 	jmp	#LR__0865
0a438                 | LR__0864
0a438     04 05 02 F6 | 	mov	_var03, _var05
0a43c     02 04 66 F0 | 	shl	_var03, #2
0a440     77 00 00 FF 
0a444     90 E4 05 F1 | 	add	objptr, ##61072
0a448     F2 04 02 F1 | 	add	_var03, objptr
0a44c     02 01 49 FC | 	wrbyte	#128, _var03
0a450     04 05 02 F6 | 	mov	_var03, _var05
0a454     02 04 66 F0 | 	shl	_var03, #2
0a458     01 04 06 F1 | 	add	_var03, #1
0a45c     F2 04 02 F1 | 	add	_var03, objptr
0a460     02 01 49 FC | 	wrbyte	#128, _var03
0a464     04 05 02 F6 | 	mov	_var03, _var05
0a468     02 04 66 F0 | 	shl	_var03, #2
0a46c     02 04 06 F1 | 	add	_var03, #2
0a470     F2 04 02 F1 | 	add	_var03, objptr
0a474     02 FF 48 FC | 	wrbyte	#127, _var03
0a478     04 05 02 F6 | 	mov	_var03, _var05
0a47c     02 04 66 F0 | 	shl	_var03, #2
0a480     03 04 06 F1 | 	add	_var03, #3
0a484     F2 04 02 F1 | 	add	_var03, objptr
0a488     02 FF 48 FC | 	wrbyte	#127, _var03
0a48c     77 00 00 FF 
0a490     90 E4 85 F1 | 	sub	objptr, ##61072
0a494                 | LR__0865
0a494     01 08 06 F1 | 	add	_var05, #1
0a498     20 08 56 F2 | 	cmps	_var05, #32 wc
0a49c     18 FF 9F CD |  if_b	jmp	#LR__0863
0a4a0                 | '   do: loop until lpeek(base+32*7)<32768
0a4a0     56 00 00 FF 
0a4a4     F4 E5 05 F1 | 	add	objptr, ##44532
0a4a8                 | LR__0866
0a4a8     F2 12 02 FB | 	rdlong	arg01, objptr
0a4ac     E0 12 06 F1 | 	add	arg01, #224
0a4b0     09 FB 01 FB | 	rdlong	result1, arg01
0a4b4     40 00 00 FF 
0a4b8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a4bc     E8 FF 9F 3D |  if_ae	jmp	#LR__0866
0a4c0                 | LR__0867
0a4c0     00 13 02 F6 | 	mov	arg01, _var01
0a4c4     04 12 06 F1 | 	add	arg01, #4
0a4c8     01 05 02 F6 | 	mov	_var03, _var02
0a4cc     02 04 66 F0 | 	shl	_var03, #2
0a4d0     02 13 02 F1 | 	add	arg01, _var03
0a4d4     09 07 02 FB | 	rdlong	_var04, arg01
0a4d8     24 00 00 FF 
0a4dc     D4 E4 05 F1 | 	add	objptr, ##18644
0a4e0     F2 06 62 FC | 	wrlong	_var04, objptr
0a4e4     7B 00 00 FF 
0a4e8     C8 E4 85 F1 | 	sub	objptr, ##63176
0a4ec                 | '   q=lpeek(address+4+4*i)
0a4ec                 | '      for bit=0 to 31
0a4ec     00 08 06 F6 | 	mov	_var05, #0
0a4f0     97 94 48 FB | 	callpa	#(@LR__0871-@LR__0868)>>2,fcache_load_ptr_
0a4f4                 | LR__0868
0a4f4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0a4f4     7B 00 00 FF 
0a4f8     C8 E4 05 F1 | 	add	objptr, ##63176
0a4fc     F2 06 02 FB | 	rdlong	_var04, objptr
0a500     7B 00 00 FF 
0a504     C8 E4 85 F1 | 	sub	objptr, ##63176
0a508     04 05 C2 F9 | 	decod	_var03, _var05
0a50c     02 07 CA F7 | 	test	_var04, _var03 wz
0a510     80 00 90 AD |  if_e	jmp	#LR__0869
0a514     04 0B 02 F6 | 	mov	_var06, _var05
0a518     02 0A 66 F0 | 	shl	_var06, #2
0a51c     80 04 06 F6 | 	mov	_var03, #128
0a520     05 05 02 F1 | 	add	_var03, _var06
0a524     77 00 00 FF 
0a528     90 E4 05 F1 | 	add	objptr, ##61072
0a52c     F2 04 02 F1 | 	add	_var03, objptr
0a530     02 FF 48 FC | 	wrbyte	#127, _var03
0a534     04 0B 02 F6 | 	mov	_var06, _var05
0a538     02 0A 66 F0 | 	shl	_var06, #2
0a53c     80 04 06 F6 | 	mov	_var03, #128
0a540     05 05 02 F1 | 	add	_var03, _var06
0a544     01 04 06 F1 | 	add	_var03, #1
0a548     F2 04 02 F1 | 	add	_var03, objptr
0a54c     02 01 49 FC | 	wrbyte	#128, _var03
0a550     04 0B 02 F6 | 	mov	_var06, _var05
0a554     02 0A 66 F0 | 	shl	_var06, #2
0a558     80 04 06 F6 | 	mov	_var03, #128
0a55c     05 05 02 F1 | 	add	_var03, _var06
0a560     02 04 06 F1 | 	add	_var03, #2
0a564     F2 04 02 F1 | 	add	_var03, objptr
0a568     02 FF 48 FC | 	wrbyte	#127, _var03
0a56c     04 0B 02 F6 | 	mov	_var06, _var05
0a570     02 0A 66 F0 | 	shl	_var06, #2
0a574     80 04 06 F6 | 	mov	_var03, #128
0a578     05 05 02 F1 | 	add	_var03, _var06
0a57c     03 04 06 F1 | 	add	_var03, #3
0a580     F2 04 02 F1 | 	add	_var03, objptr
0a584     02 01 49 FC | 	wrbyte	#128, _var03
0a588     77 00 00 FF 
0a58c     90 E4 85 F1 | 	sub	objptr, ##61072
0a590     7C 00 90 FD | 	jmp	#LR__0870
0a594                 | LR__0869
0a594     04 0B 02 F6 | 	mov	_var06, _var05
0a598     02 0A 66 F0 | 	shl	_var06, #2
0a59c     80 04 06 F6 | 	mov	_var03, #128
0a5a0     05 05 02 F1 | 	add	_var03, _var06
0a5a4     77 00 00 FF 
0a5a8     90 E4 05 F1 | 	add	objptr, ##61072
0a5ac     F2 04 02 F1 | 	add	_var03, objptr
0a5b0     02 01 49 FC | 	wrbyte	#128, _var03
0a5b4     04 0B 02 F6 | 	mov	_var06, _var05
0a5b8     02 0A 66 F0 | 	shl	_var06, #2
0a5bc     80 04 06 F6 | 	mov	_var03, #128
0a5c0     05 05 02 F1 | 	add	_var03, _var06
0a5c4     01 04 06 F1 | 	add	_var03, #1
0a5c8     F2 04 02 F1 | 	add	_var03, objptr
0a5cc     02 01 49 FC | 	wrbyte	#128, _var03
0a5d0     04 0B 02 F6 | 	mov	_var06, _var05
0a5d4     02 0A 66 F0 | 	shl	_var06, #2
0a5d8     80 04 06 F6 | 	mov	_var03, #128
0a5dc     05 05 02 F1 | 	add	_var03, _var06
0a5e0     02 04 06 F1 | 	add	_var03, #2
0a5e4     F2 04 02 F1 | 	add	_var03, objptr
0a5e8     02 FF 48 FC | 	wrbyte	#127, _var03
0a5ec     04 0B 02 F6 | 	mov	_var06, _var05
0a5f0     02 0A 66 F0 | 	shl	_var06, #2
0a5f4     80 04 06 F6 | 	mov	_var03, #128
0a5f8     05 05 02 F1 | 	add	_var03, _var06
0a5fc     03 04 06 F1 | 	add	_var03, #3
0a600     F2 04 02 F1 | 	add	_var03, objptr
0a604     02 FF 48 FC | 	wrbyte	#127, _var03
0a608     77 00 00 FF 
0a60c     90 E4 85 F1 | 	sub	objptr, ##61072
0a610                 | LR__0870
0a610     01 08 06 F1 | 	add	_var05, #1
0a614     20 08 56 F2 | 	cmps	_var05, #32 wc
0a618     D8 FE 9F CD |  if_b	jmp	#LR__0868
0a61c                 | LR__0871
0a61c     02 02 06 F1 | 	add	_var02, #2
0a620     40 02 56 F2 | 	cmps	_var02, #64 wc
0a624     3C FD 9F CD |  if_b	jmp	#LR__0860
0a628                 | ' do: loop until lpeek(base+32*7)>32768
0a628     56 00 00 FF 
0a62c     F4 E5 05 F1 | 	add	objptr, ##44532
0a630     97 84 48 FB | 	callpa	#(@LR__0880-@LR__0872)>>2,fcache_load_ptr_
0a634                 | LR__0872
0a634     F2 12 02 FB | 	rdlong	arg01, objptr
0a638     E0 12 06 F1 | 	add	arg01, #224
0a63c     09 FB 01 FB | 	rdlong	result1, arg01
0a640     40 00 00 FF 
0a644     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a648     E8 FF 9F CD |  if_b	jmp	#LR__0872
0a64c     56 00 00 FF 
0a650     F4 E5 85 F1 | 	sub	objptr, ##44532
0a654                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a654     00 02 06 F6 | 	mov	_var02, #0
0a658                 | LR__0873
0a658     01 07 52 F6 | 	abs	_var04, _var02 wc
0a65c     07 06 06 F5 | 	and	_var04, #7
0a660     03 07 82 F6 | 	negc	_var04, _var04
0a664     04 06 56 F2 | 	cmps	_var04, #4 wc
0a668     20 00 90 3D |  if_ae	jmp	#LR__0874
0a66c     01 0B 02 F6 | 	mov	_var06, _var02
0a670     77 00 00 FF 
0a674     90 E4 05 F1 | 	add	objptr, ##61072
0a678     F2 0A 02 F1 | 	add	_var06, objptr
0a67c     05 FF 48 FC | 	wrbyte	#127, _var06
0a680     77 00 00 FF 
0a684     90 E4 85 F1 | 	sub	objptr, ##61072
0a688     1C 00 90 FD | 	jmp	#LR__0875
0a68c                 | LR__0874
0a68c     01 0B 02 F6 | 	mov	_var06, _var02
0a690     77 00 00 FF 
0a694     90 E4 05 F1 | 	add	objptr, ##61072
0a698     F2 0A 02 F1 | 	add	_var06, objptr
0a69c     05 01 49 FC | 	wrbyte	#128, _var06
0a6a0     77 00 00 FF 
0a6a4     90 E4 85 F1 | 	sub	objptr, ##61072
0a6a8                 | LR__0875
0a6a8     01 02 06 F1 | 	add	_var02, #1
0a6ac     80 02 56 F2 | 	cmps	_var02, #128 wc
0a6b0     A4 FF 9F CD |  if_b	jmp	#LR__0873
0a6b4                 | ' 
0a6b4                 | ' do: loop until lpeek(base+32*7)<32768
0a6b4     56 00 00 FF 
0a6b8     F4 E5 05 F1 | 	add	objptr, ##44532
0a6bc                 | LR__0876
0a6bc     F2 12 02 FB | 	rdlong	arg01, objptr
0a6c0     E0 12 06 F1 | 	add	arg01, #224
0a6c4     09 FB 01 FB | 	rdlong	result1, arg01
0a6c8     40 00 00 FF 
0a6cc     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a6d0     E8 FF 9F 3D |  if_ae	jmp	#LR__0876
0a6d4     56 00 00 FF 
0a6d8     F4 E5 85 F1 | 	sub	objptr, ##44532
0a6dc                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a6dc     80 02 06 F6 | 	mov	_var02, #128
0a6e0                 | LR__0877
0a6e0     01 07 52 F6 | 	abs	_var04, _var02 wc
0a6e4     07 06 06 F5 | 	and	_var04, #7
0a6e8     03 07 82 F6 | 	negc	_var04, _var04
0a6ec     04 06 56 F2 | 	cmps	_var04, #4 wc
0a6f0     20 00 90 3D |  if_ae	jmp	#LR__0878
0a6f4     01 0B 02 F6 | 	mov	_var06, _var02
0a6f8     77 00 00 FF 
0a6fc     90 E4 05 F1 | 	add	objptr, ##61072
0a700     F2 0A 02 F1 | 	add	_var06, objptr
0a704     05 FF 48 FC | 	wrbyte	#127, _var06
0a708     77 00 00 FF 
0a70c     90 E4 85 F1 | 	sub	objptr, ##61072
0a710     1C 00 90 FD | 	jmp	#LR__0879
0a714                 | LR__0878
0a714     01 0B 02 F6 | 	mov	_var06, _var02
0a718     77 00 00 FF 
0a71c     90 E4 05 F1 | 	add	objptr, ##61072
0a720     F2 0A 02 F1 | 	add	_var06, objptr
0a724     05 01 49 FC | 	wrbyte	#128, _var06
0a728     77 00 00 FF 
0a72c     90 E4 85 F1 | 	sub	objptr, ##61072
0a730                 | LR__0879
0a730     01 02 06 F1 | 	add	_var02, #1
0a734     00 03 16 F2 | 	cmp	_var02, #256 wc
0a738     A4 FF 9F CD |  if_b	jmp	#LR__0877
0a73c                 | LR__0880
0a73c                 | _csave_block_ret
0a73c     2D 00 64 FD | 	ret
0a740                 | 
0a740                 | ' 
0a740                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0a740                 | _csave_addtoblock
0a740     04 4A 05 F6 | 	mov	COUNT_, #4
0a744     A8 00 A0 FD | 	call	#pushregs_
0a748     09 1F 02 F6 | 	mov	local01, arg01
0a74c                 | ' 
0a74c                 | ' 
0a74c                 | ' if force=0 then
0a74c     07 14 4E F7 | 	zerox	arg02, #7 wz
0a750     78 00 90 5D |  if_ne	jmp	#LR__0890
0a754     79 00 00 FF 
0a758     90 E5 05 F1 | 	add	objptr, ##62352
0a75c     F2 14 02 FB | 	rdlong	arg02, objptr
0a760     02 00 00 FF 
0a764     00 E4 85 F1 | 	sub	objptr, ##1024
0a768     F2 14 02 F1 | 	add	arg02, objptr
0a76c     0A 1F 42 FC | 	wrbyte	local01, arg02
0a770     02 00 00 FF 
0a774     00 E4 05 F1 | 	add	objptr, ##1024
0a778     F2 1E 02 FB | 	rdlong	local01, objptr
0a77c     01 1E 06 F1 | 	add	local01, #1
0a780     F2 1E 62 FC | 	wrlong	local01, objptr
0a784                 | '   block(blockptr)=d
0a784                 | '   blockptr+=1
0a784                 | '   if blockptr>=255 then
0a784     79 00 00 FF 
0a788     90 E5 85 F1 | 	sub	objptr, ##62352
0a78c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a790     E4 00 90 CD |  if_b	jmp	#LR__0894
0a794     77 00 00 FF 
0a798     90 E5 05 F1 | 	add	objptr, ##61328
0a79c     F2 12 02 F6 | 	mov	arg01, objptr
0a7a0     77 00 00 FF 
0a7a4     90 E5 85 F1 | 	sub	objptr, ##61328
0a7a8     B0 FB BF FD | 	call	#_csave_block
0a7ac     79 00 00 FF 
0a7b0     90 E5 05 F1 | 	add	objptr, ##62352
0a7b4     F2 00 68 FC | 	wrlong	#0, objptr
0a7b8     79 00 00 FF 
0a7bc     90 E5 85 F1 | 	sub	objptr, ##62352
0a7c0     2C 13 06 F6 | 	mov	arg01, #300
0a7c4     08 1E B1 FD | 	call	#__system___waitms
0a7c8     AC 00 90 FD | 	jmp	#LR__0894
0a7cc                 | LR__0890
0a7cc     79 00 00 FF 
0a7d0     90 E5 05 F1 | 	add	objptr, ##62352
0a7d4     F2 20 02 FB | 	rdlong	local02, objptr
0a7d8     02 00 00 FF 
0a7dc     00 E4 85 F1 | 	sub	objptr, ##1024
0a7e0     F2 20 02 F1 | 	add	local02, objptr
0a7e4     10 1F 42 FC | 	wrbyte	local01, local02
0a7e8                 | '   block(blockptr)=d
0a7e8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a7e8     02 00 00 FF 
0a7ec     00 E4 05 F1 | 	add	objptr, ##1024
0a7f0     F2 22 02 FB | 	rdlong	local03, objptr
0a7f4     79 00 00 FF 
0a7f8     90 E5 85 F1 | 	sub	objptr, ##62352
0a7fc     FF 22 16 F2 | 	cmp	local03, #255 wc
0a800     40 00 90 3D |  if_ae	jmp	#LR__0893
0a804     79 00 00 FF 
0a808     90 E5 05 F1 | 	add	objptr, ##62352
0a80c     F2 24 02 FB | 	rdlong	local04, objptr
0a810     79 00 00 FF 
0a814     90 E5 85 F1 | 	sub	objptr, ##62352
0a818                 | LR__0891
0a818     00 25 56 F2 | 	cmps	local04, #256 wc
0a81c     24 00 90 3D |  if_ae	jmp	#LR__0892
0a820     12 21 02 F6 | 	mov	local02, local04
0a824     77 00 00 FF 
0a828     90 E5 05 F1 | 	add	objptr, ##61328
0a82c     F2 20 02 F1 | 	add	local02, objptr
0a830     10 01 48 FC | 	wrbyte	#0, local02
0a834     01 24 06 F1 | 	add	local04, #1
0a838     77 00 00 FF 
0a83c     90 E5 85 F1 | 	sub	objptr, ##61328
0a840     D4 FF 9F FD | 	jmp	#LR__0891
0a844                 | LR__0892
0a844                 | LR__0893
0a844     77 00 00 FF 
0a848     90 E5 05 F1 | 	add	objptr, ##61328
0a84c     F2 12 02 F6 | 	mov	arg01, objptr
0a850     77 00 00 FF 
0a854     90 E5 85 F1 | 	sub	objptr, ##61328
0a858     00 FB BF FD | 	call	#_csave_block
0a85c     79 00 00 FF 
0a860     90 E5 05 F1 | 	add	objptr, ##62352
0a864     F2 00 68 FC | 	wrlong	#0, objptr
0a868     79 00 00 FF 
0a86c     90 E5 85 F1 | 	sub	objptr, ##62352
0a870     2C 13 06 F6 | 	mov	arg01, #300
0a874     58 1D B1 FD | 	call	#__system___waitms
0a878                 | LR__0894
0a878     A7 F0 03 F6 | 	mov	ptra, fp
0a87c     B2 00 A0 FD | 	call	#popregs_
0a880                 | _csave_addtoblock_ret
0a880     2D 00 64 FD | 	ret
0a884                 | 
0a884                 | ' 
0a884                 | ' sub test_csave
0a884                 | _test_csave
0a884     04 4A 05 F6 | 	mov	COUNT_, #4
0a888     A8 00 A0 FD | 	call	#pushregs_
0a88c     C0 F0 07 F1 | 	add	ptra, #192
0a890                 | ' 'dim fileheader,savestart, saveptr as ulong
0a890                 | ' 
0a890                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a890     6A 00 00 FF 
0a894     68 E4 05 F1 | 	add	objptr, ##54376
0a898     F2 12 02 FB | 	rdlong	arg01, objptr
0a89c     6A 00 00 FF 
0a8a0     68 E4 85 F1 | 	sub	objptr, ##54376
0a8a4     44 E5 B0 FD | 	call	#_pslpeek
0a8a8     FF FF 7F FF 
0a8ac     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a8b0     0C 00 90 5D |  if_ne	jmp	#LR__0900
0a8b4     1B 12 06 F6 | 	mov	arg01, #27
0a8b8     9C E2 B0 FD | 	call	#_printerror
0a8bc     0C 03 90 FD | 	jmp	#LR__0912
0a8c0                 | LR__0900
0a8c0     04 F8 BF FD | 	call	#_pop
0a8c4     FF 1E 02 F6 | 	mov	local01, result3
0a8c8     90 4E 05 F1 | 	add	fp, #144
0a8cc     A7 FA 61 FC | 	wrlong	result1, fp
0a8d0     04 4E 05 F1 | 	add	fp, #4
0a8d4     A7 FC 61 FC | 	wrlong	result2, fp
0a8d8     04 4E 05 F1 | 	add	fp, #4
0a8dc     A7 1E 62 FC | 	wrlong	local01, fp
0a8e0                 | ' t1=pop()
0a8e0                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a8e0     98 4E 85 F1 | 	sub	fp, #152
0a8e4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a8e8     5F 01 00 5F 
0a8ec     4A 1E 06 56 |  if_ne	mov	local01, ##@LR__4908
0a8f0     8C 4E 05 51 |  if_ne	add	fp, #140
0a8f4     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a8f8     8C 4E 85 51 |  if_ne	sub	fp, #140
0a8fc     90 4E 05 A1 |  if_e	add	fp, #144
0a900     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a904     04 4E 85 A1 |  if_e	sub	fp, #4
0a908     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a90c     8C 4E 85 A1 |  if_e	sub	fp, #140
0a910                 | ' 
0a910                 | ' ' prepare 1 kHz header wave
0a910                 | ' 
0a910                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a910     A7 00 68 FC | 	wrlong	#0, fp
0a914     97 34 48 FB | 	callpa	#(@LR__0904-@LR__0901)>>2,fcache_load_ptr_
0a918                 | LR__0901
0a918     A7 1E 02 FB | 	rdlong	local01, fp
0a91c     0F 1F 52 F6 | 	abs	local01, local01 wc
0a920     07 1E 06 F5 | 	and	local01, #7
0a924     0F 1F 82 F6 | 	negc	local01, local01
0a928     04 1E 56 F2 | 	cmps	local01, #4 wc
0a92c     20 00 90 3D |  if_ae	jmp	#LR__0902
0a930     A7 1E 02 FB | 	rdlong	local01, fp
0a934     77 00 00 FF 
0a938     90 E4 05 F1 | 	add	objptr, ##61072
0a93c     F2 1E 02 F1 | 	add	local01, objptr
0a940     0F FF 48 FC | 	wrbyte	#127, local01
0a944     77 00 00 FF 
0a948     90 E4 85 F1 | 	sub	objptr, ##61072
0a94c     1C 00 90 FD | 	jmp	#LR__0903
0a950                 | LR__0902
0a950     A7 1E 02 FB | 	rdlong	local01, fp
0a954     77 00 00 FF 
0a958     90 E4 05 F1 | 	add	objptr, ##61072
0a95c     F2 1E 02 F1 | 	add	local01, objptr
0a960     0F 01 49 FC | 	wrbyte	#128, local01
0a964     77 00 00 FF 
0a968     90 E4 85 F1 | 	sub	objptr, ##61072
0a96c                 | LR__0903
0a96c     A7 1E 02 FB | 	rdlong	local01, fp
0a970     01 1E 06 F1 | 	add	local01, #1
0a974     A7 1E 62 FC | 	wrlong	local01, fp
0a978     00 1F 56 F2 | 	cmps	local01, #256 wc
0a97c     98 FF 9F CD |  if_b	jmp	#LR__0901
0a980                 | LR__0904
0a980     77 00 00 FF 
0a984     90 E4 05 F1 | 	add	objptr, ##61072
0a988     F2 14 02 F6 | 	mov	arg02, objptr
0a98c     07 12 06 F6 | 	mov	arg01, #7
0a990     0F 00 00 FF 
0a994     40 17 06 F6 | 	mov	arg03, ##8000
0a998     0E 18 C6 F9 | 	decod	arg04, #14
0a99c     00 1B 06 F6 | 	mov	arg05, #256
0a9a0     00 1C 06 F6 | 	mov	arg06, #0
0a9a4     6B 00 00 FF 
0a9a8     D0 E5 85 F1 | 	sub	objptr, ##55248
0a9ac     78 15 B1 FD | 	call	#_audio096_spin2_play8
0a9b0     0B 00 00 FF 
0a9b4     C0 E4 85 F1 | 	sub	objptr, ##5824
0a9b8     05 00 00 FF 
0a9bc     B8 13 06 F6 | 	mov	arg01, ##3000
0a9c0     0C 1C B1 FD | 	call	#__system___waitms
0a9c4     79 00 00 FF 
0a9c8     90 E5 05 F1 | 	add	objptr, ##62352
0a9cc     F2 00 68 FC | 	wrlong	#0, objptr
0a9d0     79 00 00 FF 
0a9d4     90 E5 85 F1 | 	sub	objptr, ##62352
0a9d8     72 12 06 F6 | 	mov	arg01, #114
0a9dc     00 14 06 F6 | 	mov	arg02, #0
0a9e0     5C FD BF FD | 	call	#_csave_addtoblock
0a9e4     62 12 06 F6 | 	mov	arg01, #98
0a9e8     00 14 06 F6 | 	mov	arg02, #0
0a9ec     50 FD BF FD | 	call	#_csave_addtoblock
0a9f0     61 12 06 F6 | 	mov	arg01, #97
0a9f4     00 14 06 F6 | 	mov	arg02, #0
0a9f8     44 FD BF FD | 	call	#_csave_addtoblock
0a9fc     0D 12 06 F6 | 	mov	arg01, #13
0aa00     00 14 06 F6 | 	mov	arg02, #0
0aa04     38 FD BF FD | 	call	#_csave_addtoblock
0aa08                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0aa08                 | ' waitms 3000 
0aa08                 | ' 
0aa08                 | ' blockptr=0
0aa08                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0aa08                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0aa08     A7 02 68 FC | 	wrlong	#1, fp
0aa0c     8C 4E 05 F1 | 	add	fp, #140
0aa10     A7 12 02 FB | 	rdlong	arg01, fp
0aa14     8C 4E 85 F1 | 	sub	fp, #140
0aa18     09 21 02 F6 | 	mov	local02, arg01
0aa1c     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0aa20                 | LR__0905
0aa20     10 FB C9 FA | 	rdbyte	result1, local02 wz
0aa24     01 20 06 51 |  if_ne	add	local02, #1
0aa28     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0aa2c                 | LR__0906
0aa2c     09 21 82 F1 | 	sub	local02, arg01
0aa30     10 23 02 F6 | 	mov	local03, local02
0aa34     01 22 06 F1 | 	add	local03, #1
0aa38                 | LR__0907
0aa38     A7 1E 02 FB | 	rdlong	local01, fp
0aa3c     11 1F 52 F2 | 	cmps	local01, local03 wc
0aa40     34 00 90 3D |  if_ae	jmp	#LR__0908
0aa44     8C 4E 05 F1 | 	add	fp, #140
0aa48     A7 12 02 FB | 	rdlong	arg01, fp
0aa4c     8C 4E 85 F1 | 	sub	fp, #140
0aa50     A7 14 02 FB | 	rdlong	arg02, fp
0aa54     01 16 06 F6 | 	mov	arg03, #1
0aa58     DC 39 B1 FD | 	call	#__system__Mid_S
0aa5c     FD 12 C2 FA | 	rdbyte	arg01, result1
0aa60     00 14 06 F6 | 	mov	arg02, #0
0aa64     D8 FC BF FD | 	call	#_csave_addtoblock
0aa68     A7 1E 02 FB | 	rdlong	local01, fp
0aa6c     01 1E 06 F1 | 	add	local01, #1
0aa70     A7 1E 62 FC | 	wrlong	local01, fp
0aa74     C0 FF 9F FD | 	jmp	#LR__0907
0aa78                 | LR__0908
0aa78     00 12 06 F6 | 	mov	arg01, #0
0aa7c     00 14 06 F6 | 	mov	arg02, #0
0aa80     BC FC BF FD | 	call	#_csave_addtoblock
0aa84     72 12 06 F6 | 	mov	arg01, #114
0aa88     00 14 06 F6 | 	mov	arg02, #0
0aa8c     B0 FC BF FD | 	call	#_csave_addtoblock
0aa90     62 12 06 F6 | 	mov	arg01, #98
0aa94     00 14 06 F6 | 	mov	arg02, #0
0aa98     A4 FC BF FD | 	call	#_csave_addtoblock
0aa9c     73 12 06 F6 | 	mov	arg01, #115
0aaa0     00 14 06 F6 | 	mov	arg02, #0
0aaa4     98 FC BF FD | 	call	#_csave_addtoblock
0aaa8     0D 12 06 F6 | 	mov	arg01, #13
0aaac     00 14 06 F6 | 	mov	arg02, #0
0aab0     8C FC BF FD | 	call	#_csave_addtoblock
0aab4     6A 00 00 FF 
0aab8     68 E4 05 F1 | 	add	objptr, ##54376
0aabc     F2 1E 02 FB | 	rdlong	local01, objptr
0aac0     6A 00 00 FF 
0aac4     68 E4 85 F1 | 	sub	objptr, ##54376
0aac8     9C 4E 05 F1 | 	add	fp, #156
0aacc     A7 1E 62 FC | 	wrlong	local01, fp
0aad0     9C 4E 85 F1 | 	sub	fp, #156
0aad4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0aad4                 | ' 
0aad4                 | ' saveptr=programstart
0aad4                 | ' do
0aad4                 | LR__0909
0aad4     A0 4E 05 F1 | 	add	fp, #160
0aad8     A7 12 02 F6 | 	mov	arg01, fp
0aadc     04 4E 85 F1 | 	sub	fp, #4
0aae0     A7 14 02 FB | 	rdlong	arg02, fp
0aae4     9C 4E 85 F1 | 	sub	fp, #156
0aae8     18 16 06 F6 | 	mov	arg03, #24
0aaec     0B 00 00 FF 
0aaf0     C0 E4 05 F1 | 	add	objptr, ##5824
0aaf4     E0 0B B1 FD | 	call	#_psram_spin2_read1
0aaf8     0C 4E 05 F1 | 	add	fp, #12
0aafc     A7 12 02 F6 | 	mov	arg01, fp
0ab00     9C 4E 05 F1 | 	add	fp, #156
0ab04     A7 14 02 FB | 	rdlong	arg02, fp
0ab08     04 4E 05 F1 | 	add	fp, #4
0ab0c     A7 16 02 FB | 	rdlong	arg03, fp
0ab10     AC 4E 85 F1 | 	sub	fp, #172
0ab14     C0 0B B1 FD | 	call	#_psram_spin2_read1
0ab18     0B 00 00 FF 
0ab1c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab20     AC 4E 05 F1 | 	add	fp, #172
0ab24     A7 12 02 FB | 	rdlong	arg01, fp
0ab28     AC 4E 85 F1 | 	sub	fp, #172
0ab2c     00 14 06 F6 | 	mov	arg02, #0
0ab30     0C FC BF FD | 	call	#_csave_addtoblock
0ab34                 | '   psram.read1(varptr(header(0)),saveptr,24)
0ab34                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0ab34                 | '   csave_addtoblock(header(3),0) ' that's always <255
0ab34                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0ab34     A7 00 68 FC | 	wrlong	#0, fp
0ab38     AC 4E 05 F1 | 	add	fp, #172
0ab3c     A7 24 02 FB | 	rdlong	local04, fp
0ab40     AC 4E 85 F1 | 	sub	fp, #172
0ab44                 | LR__0910
0ab44     A7 1E 02 FB | 	rdlong	local01, fp
0ab48     12 1F 52 F2 | 	cmps	local01, local04 wc
0ab4c     2C 00 90 3D |  if_ae	jmp	#LR__0911
0ab50     A7 22 02 FB | 	rdlong	local03, fp
0ab54     0C 4E 05 F1 | 	add	fp, #12
0ab58     A7 22 02 F1 | 	add	local03, fp
0ab5c     11 13 C2 FA | 	rdbyte	arg01, local03
0ab60     00 14 06 F6 | 	mov	arg02, #0
0ab64     0C 4E 85 F1 | 	sub	fp, #12
0ab68     D4 FB BF FD | 	call	#_csave_addtoblock
0ab6c     A7 22 02 FB | 	rdlong	local03, fp
0ab70     01 22 06 F1 | 	add	local03, #1
0ab74     A7 22 62 FC | 	wrlong	local03, fp
0ab78     C8 FF 9F FD | 	jmp	#LR__0910
0ab7c                 | LR__0911
0ab7c     B4 4E 05 F1 | 	add	fp, #180
0ab80     A7 1E 02 FB | 	rdlong	local01, fp
0ab84     18 4E 85 F1 | 	sub	fp, #24
0ab88     A7 1E 62 FC | 	wrlong	local01, fp
0ab8c     18 4E 05 F1 | 	add	fp, #24
0ab90     A7 1E 02 FB | 	rdlong	local01, fp
0ab94     B4 4E 85 F1 | 	sub	fp, #180
0ab98     FF FF 3F FF 
0ab9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0aba0     30 FF 9F 5D |  if_ne	jmp	#LR__0909
0aba4     00 12 06 F6 | 	mov	arg01, #0
0aba8     01 14 06 F6 | 	mov	arg02, #1
0abac     90 FB BF FD | 	call	#_csave_addtoblock
0abb0     56 00 00 FF 
0abb4     F4 E5 05 F1 | 	add	objptr, ##44532
0abb8     F2 12 02 FB | 	rdlong	arg01, objptr
0abbc     56 00 00 FF 
0abc0     F4 E5 85 F1 | 	sub	objptr, ##44532
0abc4     F4 12 06 F1 | 	add	arg01, #244
0abc8     09 01 58 FC | 	wrword	#0, arg01
0abcc                 | LR__0912
0abcc     A7 F0 03 F6 | 	mov	ptra, fp
0abd0     B2 00 A0 FD | 	call	#popregs_
0abd4                 | _test_csave_ret
0abd4     2D 00 64 FD | 	ret
0abd8                 | 
0abd8                 | ' 
0abd8                 | ' ' ----------------- Save the program
0abd8                 | ' 
0abd8                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0abd8                 | _do_save
0abd8     02 4A 05 F6 | 	mov	COUNT_, #2
0abdc     A8 00 A0 FD | 	call	#pushregs_
0abe0     01 00 00 FF 
0abe4     BC F0 07 F1 | 	add	ptra, ##700
0abe8     01 00 00 FF 
0abec     10 4E 05 F1 | 	add	fp, ##528
0abf0     B1 B0 86 FF 
0abf4     A7 E4 68 FC | 	wrlong	##224486002, fp
0abf8     01 00 00 FF 
0abfc     10 4E 85 F1 | 	sub	fp, ##528
0ac00     C4 F4 BF FD | 	call	#_pop
0ac04     FF 16 02 F6 | 	mov	arg03, result3
0ac08     A7 FA 61 FC | 	wrlong	result1, fp
0ac0c     04 4E 05 F1 | 	add	fp, #4
0ac10     A7 FC 61 FC | 	wrlong	result2, fp
0ac14     04 4E 05 F1 | 	add	fp, #4
0ac18     A7 16 62 FC | 	wrlong	arg03, fp
0ac1c     08 4E 85 F1 | 	sub	fp, #8
0ac20                 | ' 
0ac20                 | ' fileheader=$0D616272' rba+ver'
0ac20                 | ' 
0ac20                 | ' t1=pop() 
0ac20                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0ac20     6A 00 00 FF 
0ac24     68 E4 05 F1 | 	add	objptr, ##54376
0ac28     F2 12 02 FB | 	rdlong	arg01, objptr
0ac2c     6A 00 00 FF 
0ac30     68 E4 85 F1 | 	sub	objptr, ##54376
0ac34     B4 E1 B0 FD | 	call	#_pslpeek
0ac38     FF FF 7F FF 
0ac3c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0ac40     0C 00 90 5D |  if_ne	jmp	#LR__0920
0ac44     1B 12 06 F6 | 	mov	arg01, #27
0ac48     0C DF B0 FD | 	call	#_printerror
0ac4c     68 02 90 FD | 	jmp	#LR__0926
0ac50                 | LR__0920
0ac50                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0ac50     08 4E 05 F1 | 	add	fp, #8
0ac54     A7 16 02 FB | 	rdlong	arg03, fp
0ac58     08 4E 85 F1 | 	sub	fp, #8
0ac5c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ac60     18 00 90 5D |  if_ne	jmp	#LR__0921
0ac64     A7 12 02 FB | 	rdlong	arg01, fp
0ac68     00 34 B0 FD | 	call	#_convertstring
0ac6c     A7 FA 61 FC | 	wrlong	result1, fp
0ac70     08 4E 05 F1 | 	add	fp, #8
0ac74     A7 3E 68 FC | 	wrlong	#31, fp
0ac78     08 4E 85 F1 | 	sub	fp, #8
0ac7c                 | LR__0921
0ac7c                 | ' if t1.result_type=result_string then
0ac7c     08 4E 05 F1 | 	add	fp, #8
0ac80     A7 1E 02 FB | 	rdlong	local01, fp
0ac84     08 4E 85 F1 | 	sub	fp, #8
0ac88     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ac8c     28 02 90 5D |  if_ne	jmp	#LR__0925
0ac90                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0ac90     A7 12 02 FB | 	rdlong	arg01, fp
0ac94     5F 01 00 FF 
0ac98     55 14 06 F6 | 	mov	arg02, ##@LR__4909
0ac9c     64 16 B1 FD | 	call	#__system___string_cmp
0aca0     00 FA 0D F2 | 	cmp	result1, #0 wz
0aca4     5F 01 00 AF 
0aca8     56 1E 06 A6 |  if_e	mov	local01, ##@LR__4910
0acac     A7 1E 62 AC |  if_e	wrlong	local01, fp
0acb0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0acb0     09 12 06 F6 | 	mov	arg01, #9
0acb4     E8 65 B1 FD | 	call	#__system__close
0acb8     09 1E 06 F6 | 	mov	local01, #9
0acbc     72 00 00 FF 
0acc0     78 E4 05 F1 | 	add	objptr, ##58488
0acc4     F2 12 02 FB | 	rdlong	arg01, objptr
0acc8     72 00 00 FF 
0accc     78 E4 85 F1 | 	sub	objptr, ##58488
0acd0     5F 01 00 FF 
0acd4     61 14 06 F6 | 	mov	arg02, ##@LR__4911
0acd8     5C 16 B1 FD | 	call	#__system___string_concat
0acdc     FD 12 02 F6 | 	mov	arg01, result1
0ace0     A7 14 02 FB | 	rdlong	arg02, fp
0ace4     50 16 B1 FD | 	call	#__system___string_concat
0ace8     FD 14 02 F6 | 	mov	arg02, result1
0acec     0F 13 02 F6 | 	mov	arg01, local01
0acf0     0D 16 06 F6 | 	mov	arg03, #13
0acf4     E4 21 B1 FD | 	call	#__system___basic_open_string
0acf8     01 00 00 FF 
0acfc     0C 4E 05 F1 | 	add	fp, ##524
0ad00     A7 0A 68 FC | 	wrlong	#5, fp
0ad04     6A 00 00 FF 
0ad08     68 E4 05 F1 | 	add	objptr, ##54376
0ad0c     F2 1E 02 FB | 	rdlong	local01, objptr
0ad10     6A 00 00 FF 
0ad14     68 E4 85 F1 | 	sub	objptr, ##54376
0ad18     0C 4E 05 F1 | 	add	fp, #12
0ad1c     A7 1E 62 FC | 	wrlong	local01, fp
0ad20     01 00 00 FF 
0ad24     18 4E 85 F1 | 	sub	fp, ##536
0ad28                 | ' '  put #9,1,fileheader,1
0ad28                 | '   i=5
0ad28                 | '   saveptr=programstart
0ad28                 | '   do
0ad28                 | LR__0922
0ad28     01 00 00 FF 
0ad2c     1C 4E 05 F1 | 	add	fp, ##540
0ad30     A7 12 02 F6 | 	mov	arg01, fp
0ad34     04 4E 85 F1 | 	sub	fp, #4
0ad38     A7 14 02 FB | 	rdlong	arg02, fp
0ad3c     01 00 00 FF 
0ad40     18 4E 85 F1 | 	sub	fp, ##536
0ad44     18 16 06 F6 | 	mov	arg03, #24
0ad48     0B 00 00 FF 
0ad4c     C0 E4 05 F1 | 	add	objptr, ##5824
0ad50     84 09 B1 FD | 	call	#_psram_spin2_read1
0ad54     01 00 00 FF 
0ad58     34 4E 05 F1 | 	add	fp, ##564
0ad5c     A7 12 02 F6 | 	mov	arg01, fp
0ad60     10 4E 85 F1 | 	sub	fp, #16
0ad64     A7 14 02 FB | 	rdlong	arg02, fp
0ad68     04 4E 05 F1 | 	add	fp, #4
0ad6c     A7 16 02 FB | 	rdlong	arg03, fp
0ad70     01 00 00 FF 
0ad74     28 4E 85 F1 | 	sub	fp, ##552
0ad78     5C 09 B1 FD | 	call	#_psram_spin2_read1
0ad7c     0B 00 00 FF 
0ad80     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad84     5F 01 00 FF 
0ad88     63 1E 06 F6 | 	mov	local01, ##@LR__4912
0ad8c     01 00 00 FF 
0ad90     B4 4E 05 F1 | 	add	fp, ##692
0ad94     A7 1E 62 FC | 	wrlong	local01, fp
0ad98                 | '     psram.read1(varptr(header(0)),saveptr,24)
0ad98                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0ad98                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0ad98     A8 4E 85 F1 | 	sub	fp, #168
0ad9c     A7 02 68 FC | 	wrlong	#1, fp
0ada0     1C 4E 05 F1 | 	add	fp, #28
0ada4     A7 20 02 FB | 	rdlong	local02, fp
0ada8     01 00 00 FF 
0adac     28 4E 85 F1 | 	sub	fp, ##552
0adb0     01 20 06 F1 | 	add	local02, #1
0adb4                 | LR__0923
0adb4     01 00 00 FF 
0adb8     0C 4E 05 F1 | 	add	fp, ##524
0adbc     A7 1E 02 FB | 	rdlong	local01, fp
0adc0     01 00 00 FF 
0adc4     0C 4E 85 F1 | 	sub	fp, ##524
0adc8     10 1F 52 F2 | 	cmps	local01, local02 wc
0adcc     64 00 90 3D |  if_ae	jmp	#LR__0924
0add0     01 00 00 FF 
0add4     B4 4E 05 F1 | 	add	fp, ##692
0add8     A7 1E 02 FB | 	rdlong	local01, fp
0addc     A8 4E 85 F1 | 	sub	fp, #168
0ade0     A7 16 02 FB | 	rdlong	arg03, fp
0ade4     01 16 86 F1 | 	sub	arg03, #1
0ade8     28 4E 05 F1 | 	add	fp, #40
0adec     A7 16 02 F1 | 	add	arg03, fp
0adf0     0B 13 C2 FA | 	rdbyte	arg01, arg03
0adf4     01 00 00 FF 
0adf8     34 4E 85 F1 | 	sub	fp, ##564
0adfc     E4 36 B1 FD | 	call	#__system__Chr_S
0ae00     FD 14 02 F6 | 	mov	arg02, result1
0ae04     0F 13 02 F6 | 	mov	arg01, local01
0ae08     2C 15 B1 FD | 	call	#__system___string_concat
0ae0c     01 00 00 FF 
0ae10     B4 4E 05 F1 | 	add	fp, ##692
0ae14     A7 FA 61 FC | 	wrlong	result1, fp
0ae18     A8 4E 85 F1 | 	sub	fp, #168
0ae1c     A7 1E 02 FB | 	rdlong	local01, fp
0ae20     01 1E 06 F1 | 	add	local01, #1
0ae24     A7 1E 62 FC | 	wrlong	local01, fp
0ae28     01 00 00 FF 
0ae2c     0C 4E 85 F1 | 	sub	fp, ##524
0ae30     80 FF 9F FD | 	jmp	#LR__0923
0ae34                 | LR__0924
0ae34                 | '  '   put #9,i,header(3),1 : i+=4
0ae34                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0ae34                 | '      print #9, saveline$
0ae34     09 12 06 F6 | 	mov	arg01, #9
0ae38     30 6E B1 FD | 	call	#__system___getiolock_0474
0ae3c     FD 12 02 F6 | 	mov	arg01, result1
0ae40     98 14 B1 FD | 	call	#__system___lockmem
0ae44     01 00 00 FF 
0ae48     B4 4E 05 F1 | 	add	fp, ##692
0ae4c     A7 14 02 FB | 	rdlong	arg02, fp
0ae50     01 00 00 FF 
0ae54     B4 4E 85 F1 | 	sub	fp, ##692
0ae58     09 12 06 F6 | 	mov	arg01, #9
0ae5c     00 16 06 F6 | 	mov	arg03, #0
0ae60     7C 21 B1 FD | 	call	#__system___basic_print_string
0ae64     09 12 06 F6 | 	mov	arg01, #9
0ae68     0A 14 06 F6 | 	mov	arg02, #10
0ae6c     00 16 06 F6 | 	mov	arg03, #0
0ae70     14 21 B1 FD | 	call	#__system___basic_print_char
0ae74     09 12 06 F6 | 	mov	arg01, #9
0ae78     F0 6D B1 FD | 	call	#__system___getiolock_0474
0ae7c     FD 00 68 FC | 	wrlong	#0, result1
0ae80     01 00 00 FF 
0ae84     30 4E 05 F1 | 	add	fp, ##560
0ae88     A7 1E 02 FB | 	rdlong	local01, fp
0ae8c     18 4E 85 F1 | 	sub	fp, #24
0ae90     A7 1E 62 FC | 	wrlong	local01, fp
0ae94     18 4E 05 F1 | 	add	fp, #24
0ae98     A7 1E 02 FB | 	rdlong	local01, fp
0ae9c     01 00 00 FF 
0aea0     30 4E 85 F1 | 	sub	fp, ##560
0aea4     FF FF 3F FF 
0aea8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0aeac     78 FE 9F 5D |  if_ne	jmp	#LR__0922
0aeb0                 | '   close #9  
0aeb0     09 12 06 F6 | 	mov	arg01, #9
0aeb4     E8 63 B1 FD | 	call	#__system__close
0aeb8                 | LR__0925
0aeb8                 | LR__0926
0aeb8     A7 F0 03 F6 | 	mov	ptra, fp
0aebc     B2 00 A0 FD | 	call	#popregs_
0aec0                 | _do_save_ret
0aec0     2D 00 64 FD | 	ret
0aec4                 | 
0aec4                 | ' 
0aec4                 | ' '----------------- Load the program
0aec4                 | ' 'lo todo: errors while loading
0aec4                 | ' sub do_load
0aec4                 | _do_load
0aec4     01 4A 05 F6 | 	mov	COUNT_, #1
0aec8     A8 00 A0 FD | 	call	#pushregs_
0aecc     A4 F0 07 F1 | 	add	ptra, #164
0aed0     A0 4E 05 F1 | 	add	fp, #160
0aed4     A7 12 02 F6 | 	mov	arg01, fp
0aed8     80 4E 85 F1 | 	sub	fp, #128
0aedc     A7 14 02 F6 | 	mov	arg02, fp
0aee0     20 4E 85 F1 | 	sub	fp, #32
0aee4     09 15 62 FC | 	wrlong	arg02, arg01
0aee8     DC F1 BF FD | 	call	#_pop
0aeec     FF 1A 02 F6 | 	mov	arg05, result3
0aef0     A7 FA 61 FC | 	wrlong	result1, fp
0aef4     04 4E 05 F1 | 	add	fp, #4
0aef8     A7 FC 61 FC | 	wrlong	result2, fp
0aefc     04 4E 05 F1 | 	add	fp, #4
0af00     A7 1A 62 FC | 	wrlong	arg05, fp
0af04                 | ' 
0af04                 | ' lpoke varptr(line2$),varptr(line2)
0af04                 | ' t1=pop() 
0af04                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0af04                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0af04     08 4E 85 F1 | 	sub	fp, #8
0af08     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0af0c     18 00 90 5D |  if_ne	jmp	#LR__0930
0af10     A7 12 02 FB | 	rdlong	arg01, fp
0af14     54 31 B0 FD | 	call	#_convertstring
0af18     A7 FA 61 FC | 	wrlong	result1, fp
0af1c     08 4E 05 F1 | 	add	fp, #8
0af20     A7 3E 68 FC | 	wrlong	#31, fp
0af24     08 4E 85 F1 | 	sub	fp, #8
0af28                 | LR__0930
0af28                 | ' if t1.result_type=result_string then
0af28     08 4E 05 F1 | 	add	fp, #8
0af2c     A7 1E 02 FB | 	rdlong	local01, fp
0af30     08 4E 85 F1 | 	sub	fp, #8
0af34     1F 1E 0E F2 | 	cmp	local01, #31 wz
0af38     40 03 90 5D |  if_ne	jmp	#LR__0937
0af3c     A4 2B B0 FD | 	call	#_do_new
0af40                 | '   do_new
0af40                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0af40     A7 12 02 FB | 	rdlong	arg01, fp
0af44     5F 01 00 FF 
0af48     64 14 06 F6 | 	mov	arg02, ##@LR__4913
0af4c     B4 13 B1 FD | 	call	#__system___string_cmp
0af50     00 FA 0D F2 | 	cmp	result1, #0 wz
0af54     5F 01 00 AF 
0af58     65 1E 06 A6 |  if_e	mov	local01, ##@LR__4914
0af5c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0af60                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0af60     09 12 06 F6 | 	mov	arg01, #9
0af64     38 63 B1 FD | 	call	#__system__close
0af68     09 1E 06 F6 | 	mov	local01, #9
0af6c     72 00 00 FF 
0af70     78 E4 05 F1 | 	add	objptr, ##58488
0af74     F2 12 02 FB | 	rdlong	arg01, objptr
0af78     72 00 00 FF 
0af7c     78 E4 85 F1 | 	sub	objptr, ##58488
0af80     5F 01 00 FF 
0af84     70 14 06 F6 | 	mov	arg02, ##@LR__4915
0af88     AC 13 B1 FD | 	call	#__system___string_concat
0af8c     FD 12 02 F6 | 	mov	arg01, result1
0af90     A7 14 02 FB | 	rdlong	arg02, fp
0af94     A0 13 B1 FD | 	call	#__system___string_concat
0af98     FD 14 02 F6 | 	mov	arg02, result1
0af9c     0F 13 02 F6 | 	mov	arg01, local01
0afa0     00 16 06 F6 | 	mov	arg03, #0
0afa4     34 1F B1 FD | 	call	#__system___basic_open_string
0afa8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0afac     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0afb0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0afb4     10 4E 05 F1 | 	add	fp, #16
0afb8     A7 FA 61 FC | 	wrlong	result1, fp
0afbc                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0afbc     10 4E 85 F1 | 	sub	fp, #16
0afc0     9C 00 90 AD |  if_e	jmp	#LR__0931
0afc4     00 12 06 F6 | 	mov	arg01, #0
0afc8     A0 6C B1 FD | 	call	#__system___getiolock_0474
0afcc     FD 12 02 F6 | 	mov	arg01, result1
0afd0     08 13 B1 FD | 	call	#__system___lockmem
0afd4     5F 01 00 FF 
0afd8     72 14 06 F6 | 	mov	arg02, ##@LR__4916
0afdc     00 12 06 F6 | 	mov	arg01, #0
0afe0     00 16 06 F6 | 	mov	arg03, #0
0afe4     F8 1F B1 FD | 	call	#__system___basic_print_string
0afe8     10 4E 05 F1 | 	add	fp, #16
0afec     A7 14 02 FB | 	rdlong	arg02, fp
0aff0     10 4E 85 F1 | 	sub	fp, #16
0aff4     00 12 06 F6 | 	mov	arg01, #0
0aff8     00 16 06 F6 | 	mov	arg03, #0
0affc     0A 18 06 F6 | 	mov	arg04, #10
0b000     20 20 B1 FD | 	call	#__system___basic_print_integer
0b004     5F 01 00 FF 
0b008     80 14 06 F6 | 	mov	arg02, ##@LR__4917
0b00c     00 12 06 F6 | 	mov	arg01, #0
0b010     00 16 06 F6 | 	mov	arg03, #0
0b014     C8 1F B1 FD | 	call	#__system___basic_print_string
0b018     10 4E 05 F1 | 	add	fp, #16
0b01c     A7 12 02 FB | 	rdlong	arg01, fp
0b020     10 4E 85 F1 | 	sub	fp, #16
0b024     44 39 B1 FD | 	call	#__system___strerror
0b028     FD 14 02 F6 | 	mov	arg02, result1
0b02c     00 12 06 F6 | 	mov	arg01, #0
0b030     00 16 06 F6 | 	mov	arg03, #0
0b034     A8 1F B1 FD | 	call	#__system___basic_print_string
0b038     00 12 06 F6 | 	mov	arg01, #0
0b03c     0A 14 06 F6 | 	mov	arg02, #10
0b040     00 16 06 F6 | 	mov	arg03, #0
0b044     40 1F B1 FD | 	call	#__system___basic_print_char
0b048     00 12 06 F6 | 	mov	arg01, #0
0b04c     1C 6C B1 FD | 	call	#__system___getiolock_0474
0b050     FD 00 68 FC | 	wrlong	#0, result1
0b054     09 12 06 F6 | 	mov	arg01, #9
0b058     44 62 B1 FD | 	call	#__system__close
0b05c     24 02 90 FD | 	jmp	#LR__0939
0b060                 | LR__0931
0b060     0C 4E 05 F1 | 	add	fp, #12
0b064     A7 0A 68 FC | 	wrlong	#5, fp
0b068                 | '   i=5
0b068                 | '   get #9,1,header,1
0b068     0C 4E 05 F1 | 	add	fp, #12
0b06c     A7 16 02 F6 | 	mov	arg03, fp
0b070     18 4E 85 F1 | 	sub	fp, #24
0b074     09 12 06 F6 | 	mov	arg01, #9
0b078     01 14 06 F6 | 	mov	arg02, #1
0b07c     01 18 06 F6 | 	mov	arg04, #1
0b080     04 1A 06 F6 | 	mov	arg05, #4
0b084     68 20 B1 FD | 	call	#__system___basic_get
0b088                 | '   
0b088                 | '   if header<>$0D616272 then 
0b088     18 4E 05 F1 | 	add	fp, #24
0b08c     A7 1E 02 FB | 	rdlong	local01, fp
0b090     18 4E 85 F1 | 	sub	fp, #24
0b094     B1 B0 06 FF 
0b098     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0b09c     F0 00 90 AD |  if_e	jmp	#LR__0934
0b0a0                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b0a0     09 12 06 F6 | 	mov	arg01, #9
0b0a4     F8 61 B1 FD | 	call	#__system__close
0b0a8     09 1E 06 F6 | 	mov	local01, #9
0b0ac     72 00 00 FF 
0b0b0     78 E4 05 F1 | 	add	objptr, ##58488
0b0b4     F2 12 02 FB | 	rdlong	arg01, objptr
0b0b8     72 00 00 FF 
0b0bc     78 E4 85 F1 | 	sub	objptr, ##58488
0b0c0     5F 01 00 FF 
0b0c4     83 14 06 F6 | 	mov	arg02, ##@LR__4918
0b0c8     6C 12 B1 FD | 	call	#__system___string_concat
0b0cc     FD 12 02 F6 | 	mov	arg01, result1
0b0d0     A7 14 02 FB | 	rdlong	arg02, fp
0b0d4     60 12 B1 FD | 	call	#__system___string_concat
0b0d8     FD 14 02 F6 | 	mov	arg02, result1
0b0dc     0F 13 02 F6 | 	mov	arg01, local01
0b0e0     00 16 06 F6 | 	mov	arg03, #0
0b0e4     F4 1D B1 FD | 	call	#__system___basic_open_string
0b0e8                 | '     do
0b0e8                 | LR__0932
0b0e8     09 12 06 F6 | 	mov	arg01, #9
0b0ec     F8 13 B1 FD | 	call	#__system___basic_read_line
0b0f0     57 00 00 FF 
0b0f4     00 E4 05 F1 | 	add	objptr, ##44544
0b0f8     F2 FA 61 FC | 	wrlong	result1, objptr
0b0fc                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0b0fc     57 00 00 FF 
0b100     00 E4 85 F1 | 	sub	objptr, ##44544
0b104     FD 12 02 F6 | 	mov	arg01, result1
0b108     01 14 06 F6 | 	mov	arg02, #1
0b10c     10 32 B1 FD | 	call	#__system__Left_S
0b110     FD 12 02 F6 | 	mov	arg01, result1
0b114     5F 01 00 FF 
0b118     85 14 06 F6 | 	mov	arg02, ##@LR__4919
0b11c     E4 11 B1 FD | 	call	#__system___string_cmp
0b120     00 FA 55 F2 | 	cmps	result1, #0 wc
0b124     34 00 90 CD |  if_b	jmp	#LR__0933
0b128     57 00 00 FF 
0b12c     00 E4 05 F1 | 	add	objptr, ##44544
0b130     F2 12 02 FB | 	rdlong	arg01, objptr
0b134     57 00 00 FF 
0b138     00 E4 85 F1 | 	sub	objptr, ##44544
0b13c     01 14 06 F6 | 	mov	arg02, #1
0b140     DC 31 B1 FD | 	call	#__system__Left_S
0b144     FD 12 02 F6 | 	mov	arg01, result1
0b148     5F 01 00 FF 
0b14c     87 14 06 F6 | 	mov	arg02, ##@LR__4920
0b150     B0 11 B1 FD | 	call	#__system___string_cmp
0b154     01 FA 55 F2 | 	cmps	result1, #1 wc
0b158     C0 58 BF CD |  if_b	call	#_interpret
0b15c                 | LR__0933
0b15c     57 00 00 FF 
0b160     00 E4 05 F1 | 	add	objptr, ##44544
0b164     F2 12 02 FB | 	rdlong	arg01, objptr
0b168     57 00 00 FF 
0b16c     00 E4 85 F1 | 	sub	objptr, ##44544
0b170     5F 01 00 FF 
0b174     89 14 06 F6 | 	mov	arg02, ##@LR__4921
0b178     88 11 B1 FD | 	call	#__system___string_cmp
0b17c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b180     64 FF 9F 5D |  if_ne	jmp	#LR__0932
0b184                 | '     close #9
0b184     09 12 06 F6 | 	mov	arg01, #9
0b188     14 61 B1 FD | 	call	#__system__close
0b18c     F4 00 90 FD | 	jmp	#LR__0938
0b190                 | LR__0934
0b190                 | '   'printerror(26) : close #9 : return
0b190                 | '     do
0b190                 | LR__0935
0b190                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0b190     0C 4E 05 F1 | 	add	fp, #12
0b194     A7 14 02 FB | 	rdlong	arg02, fp
0b198     10 4E 05 F1 | 	add	fp, #16
0b19c     A7 16 02 F6 | 	mov	arg03, fp
0b1a0     1C 4E 85 F1 | 	sub	fp, #28
0b1a4     09 12 06 F6 | 	mov	arg01, #9
0b1a8     01 18 06 F6 | 	mov	arg04, #1
0b1ac     04 1A 06 F6 | 	mov	arg05, #4
0b1b0     3C 1F B1 FD | 	call	#__system___basic_get
0b1b4     14 4E 05 F1 | 	add	fp, #20
0b1b8     A7 FA 61 FC | 	wrlong	result1, fp
0b1bc     08 4E 85 F1 | 	sub	fp, #8
0b1c0     A7 1E 02 FB | 	rdlong	local01, fp
0b1c4     04 1E 06 F1 | 	add	local01, #4
0b1c8     A7 1E 62 FC | 	wrlong	local01, fp
0b1cc     10 4E 05 F1 | 	add	fp, #16
0b1d0     A7 1E 02 FB | 	rdlong	local01, fp
0b1d4     04 4E 05 F1 | 	add	fp, #4
0b1d8     A7 1E 02 F1 | 	add	local01, fp
0b1dc     0F 01 48 FC | 	wrbyte	#0, local01
0b1e0                 | '       if amount=1 then  
0b1e0     0C 4E 85 F1 | 	sub	fp, #12
0b1e4     A7 1E 02 FB | 	rdlong	local01, fp
0b1e8     14 4E 85 F1 | 	sub	fp, #20
0b1ec     01 1E 0E F2 | 	cmp	local01, #1 wz
0b1f0     68 00 90 5D |  if_ne	jmp	#LR__0936
0b1f4                 | '         get #9,i,line2(0),linelength : i+=linelength
0b1f4     0C 4E 05 F1 | 	add	fp, #12
0b1f8     A7 14 02 FB | 	rdlong	arg02, fp
0b1fc     14 4E 05 F1 | 	add	fp, #20
0b200     A7 16 02 F6 | 	mov	arg03, fp
0b204     04 4E 85 F1 | 	sub	fp, #4
0b208     A7 18 02 FB | 	rdlong	arg04, fp
0b20c     1C 4E 85 F1 | 	sub	fp, #28
0b210     09 12 06 F6 | 	mov	arg01, #9
0b214     01 1A 06 F6 | 	mov	arg05, #1
0b218     D4 1E B1 FD | 	call	#__system___basic_get
0b21c     0C 4E 05 F1 | 	add	fp, #12
0b220     A7 1E 02 FB | 	rdlong	local01, fp
0b224     10 4E 05 F1 | 	add	fp, #16
0b228     A7 1A 02 FB | 	rdlong	arg05, fp
0b22c     0D 1F 02 F1 | 	add	local01, arg05
0b230     10 4E 85 F1 | 	sub	fp, #16
0b234     A7 1E 62 FC | 	wrlong	local01, fp
0b238     94 4E 05 F1 | 	add	fp, #148
0b23c     A7 1E 02 FB | 	rdlong	local01, fp
0b240     A0 4E 85 F1 | 	sub	fp, #160
0b244     57 00 00 FF 
0b248     00 E4 05 F1 | 	add	objptr, ##44544
0b24c     F2 1E 62 FC | 	wrlong	local01, objptr
0b250     57 00 00 FF 
0b254     00 E4 85 F1 | 	sub	objptr, ##44544
0b258     C0 57 BF FD | 	call	#_interpret
0b25c                 | LR__0936
0b25c     14 4E 05 F1 | 	add	fp, #20
0b260     A7 1E 02 FB | 	rdlong	local01, fp
0b264     14 4E 85 F1 | 	sub	fp, #20
0b268     01 1E 56 F2 | 	cmps	local01, #1 wc
0b26c     20 FF 9F 3D |  if_ae	jmp	#LR__0935
0b270                 | '     close #9 
0b270     09 12 06 F6 | 	mov	arg01, #9
0b274     28 60 B1 FD | 	call	#__system__close
0b278     08 00 90 FD | 	jmp	#LR__0938
0b27c                 | LR__0937
0b27c     1E 12 06 F6 | 	mov	arg01, #30
0b280     D4 D8 B0 FD | 	call	#_printerror
0b284                 | LR__0938
0b284                 | LR__0939
0b284     A7 F0 03 F6 | 	mov	ptra, fp
0b288     B2 00 A0 FD | 	call	#popregs_
0b28c                 | _do_load_ret
0b28c     2D 00 64 FD | 	ret
0b290                 | 
0b290                 | ' 
0b290                 | ' '----------------- Run the program 
0b290                 | ' 
0b290                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0b290                 | ' 
0b290                 | ' sub do_run
0b290                 | _do_run
0b290     01 4A 05 F6 | 	mov	COUNT_, #1
0b294     A8 00 A0 FD | 	call	#pushregs_
0b298     6A 00 00 FF 
0b29c     68 E4 05 F1 | 	add	objptr, ##54376
0b2a0     F2 1C 02 FB | 	rdlong	arg06, objptr
0b2a4     0F 00 00 FF 
0b2a8     2C E5 05 F1 | 	add	objptr, ##7980
0b2ac     F2 1C 62 FC | 	wrlong	arg06, objptr
0b2b0     04 E4 05 F1 | 	add	objptr, #4
0b2b4     F2 00 68 FC | 	wrlong	#0, objptr
0b2b8     04 E4 05 F1 | 	add	objptr, #4
0b2bc     FF FF FF FF 
0b2c0     F2 FE 6B FC | 	wrlong	##-1, objptr
0b2c4                 | ' if inrun>0 then 
0b2c4     04 E4 05 F1 | 	add	objptr, #4
0b2c8     F2 1C 02 FB | 	rdlong	arg06, objptr
0b2cc     79 00 00 FF 
0b2d0     A0 E5 85 F1 | 	sub	objptr, ##62368
0b2d4     01 1C 16 F2 | 	cmp	arg06, #1 wc
0b2d8     30 00 90 CD |  if_b	jmp	#LR__0940
0b2dc     79 00 00 FF 
0b2e0     A4 E5 05 F1 | 	add	objptr, ##62372
0b2e4     F2 12 02 F6 | 	mov	arg01, objptr
0b2e8     10 E4 85 F1 | 	sub	objptr, #16
0b2ec     F2 14 02 FB | 	rdlong	arg02, objptr
0b2f0     18 16 06 F6 | 	mov	arg03, #24
0b2f4     6E 00 00 FF 
0b2f8     D4 E4 85 F1 | 	sub	objptr, ##56532
0b2fc     D8 03 B1 FD | 	call	#_psram_spin2_read1
0b300     0B 00 00 FF 
0b304     C0 E4 85 F1 | 	sub	objptr, ##5824
0b308                 | '   psram.read1(varptr(runheader),runptr,24)  
0b308                 | '   return
0b308     C4 02 90 FD | 	jmp	#LR__0946
0b30c                 | LR__0940
0b30c     79 00 00 FF 
0b310     A0 E5 05 F1 | 	add	objptr, ##62368
0b314     F2 02 68 FC | 	wrlong	#1, objptr
0b318     04 E4 05 F1 | 	add	objptr, #4
0b31c     F2 12 02 F6 | 	mov	arg01, objptr
0b320     10 E4 85 F1 | 	sub	objptr, #16
0b324     F2 14 02 FB | 	rdlong	arg02, objptr
0b328     18 16 06 F6 | 	mov	arg03, #24
0b32c     6E 00 00 FF 
0b330     D4 E4 85 F1 | 	sub	objptr, ##56532
0b334     A0 03 B1 FD | 	call	#_psram_spin2_read1
0b338                 | ' inrun=1
0b338                 | ' psram.read1(varptr(runheader),runptr,24) 
0b338                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0b338     6E 00 00 FF 
0b33c     E4 E4 05 F1 | 	add	objptr, ##56548
0b340     F2 1E 02 FB | 	rdlong	local01, objptr
0b344     79 00 00 FF 
0b348     A4 E5 85 F1 | 	sub	objptr, ##62372
0b34c     FF FF 7F FF 
0b350     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0b354     79 00 00 AF 
0b358     A0 E5 05 A1 |  if_e	add	objptr, ##62368
0b35c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0b360     79 00 00 AF 
0b364     A0 E5 85 A1 |  if_e	sub	objptr, ##62368
0b368     64 02 90 AD |  if_e	jmp	#LR__0946
0b36c                 | ' do 
0b36c                 | LR__0941
0b36c                 | '   if runptr<>oldrunptr then
0b36c     79 00 00 FF 
0b370     94 E5 05 F1 | 	add	objptr, ##62356
0b374     F2 1E 02 FB | 	rdlong	local01, objptr
0b378     08 E4 05 F1 | 	add	objptr, #8
0b37c     F2 1C 02 FB | 	rdlong	arg06, objptr
0b380     79 00 00 FF 
0b384     9C E5 85 F1 | 	sub	objptr, ##62364
0b388     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0b38c     CC 00 90 AD |  if_e	jmp	#LR__0942
0b390     79 00 00 FF 
0b394     A4 E5 05 F1 | 	add	objptr, ##62372
0b398     F2 12 02 F6 | 	mov	arg01, objptr
0b39c     10 E4 85 F1 | 	sub	objptr, #16
0b3a0     F2 14 02 FB | 	rdlong	arg02, objptr
0b3a4     18 16 06 F6 | 	mov	arg03, #24
0b3a8     6E 00 00 FF 
0b3ac     D4 E4 85 F1 | 	sub	objptr, ##56532
0b3b0     24 03 B1 FD | 	call	#_psram_spin2_read1
0b3b4     5B 00 00 FF 
0b3b8     A0 E5 05 F1 | 	add	objptr, ##47008
0b3bc     F2 12 02 F6 | 	mov	arg01, objptr
0b3c0     12 00 00 FF 
0b3c4     34 E5 05 F1 | 	add	objptr, ##9524
0b3c8     F2 14 02 FB | 	rdlong	arg02, objptr
0b3cc     14 00 00 FF 
0b3d0     4C E5 85 F1 | 	sub	objptr, ##10572
0b3d4     F2 1E 02 FB | 	rdlong	local01, objptr
0b3d8     01 1E 66 F0 | 	shl	local01, #1
0b3dc     0F 15 02 F1 | 	add	arg02, local01
0b3e0     14 00 00 FF 
0b3e4     64 E5 05 F1 | 	add	objptr, ##10596
0b3e8     F2 16 02 FB | 	rdlong	arg03, objptr
0b3ec     18 E4 85 F1 | 	sub	objptr, #24
0b3f0     F2 1E 02 FB | 	rdlong	local01, objptr
0b3f4     0F 17 82 F1 | 	sub	arg03, local01
0b3f8     6E 00 00 FF 
0b3fc     D4 E4 85 F1 | 	sub	objptr, ##56532
0b400     D4 02 B1 FD | 	call	#_psram_spin2_read1
0b404     6E 00 00 FF 
0b408     EC E4 05 F1 | 	add	objptr, ##56556
0b40c     F2 1E 02 FB | 	rdlong	local01, objptr
0b410     18 E4 85 F1 | 	sub	objptr, #24
0b414     F2 1C 02 FB | 	rdlong	arg06, objptr
0b418     0E 1F 82 F1 | 	sub	local01, arg06
0b41c     14 00 00 FF 
0b420     4C E5 85 F1 | 	sub	objptr, ##10572
0b424     F2 1C 02 FB | 	rdlong	arg06, objptr
0b428     0E 1F 12 FD | 	qdiv	local01, arg06
0b42c     05 00 00 FF 
0b430     18 E4 05 F1 | 	add	objptr, ##2584
0b434     18 1E 62 FD | 	getqx	local01
0b438     03 1E 86 F1 | 	sub	local01, #3
0b43c     F2 1E 62 FC | 	wrlong	local01, objptr
0b440     0F 00 00 FF 
0b444     34 E5 05 F1 | 	add	objptr, ##7988
0b448     F2 1E 02 FB | 	rdlong	local01, objptr
0b44c     08 E4 05 F1 | 	add	objptr, #8
0b450     F2 1E 62 FC | 	wrlong	local01, objptr
0b454     79 00 00 FF 
0b458     9C E5 85 F1 | 	sub	objptr, ##62364
0b45c                 | LR__0942
0b45c     79 00 00 FF 
0b460     B8 E5 05 F1 | 	add	objptr, ##62392
0b464     F2 1E 02 FB | 	rdlong	local01, objptr
0b468     24 E4 85 F1 | 	sub	objptr, #36
0b46c     F2 1E 62 FC | 	wrlong	local01, objptr
0b470     04 E4 05 F1 | 	add	objptr, #4
0b474     F2 12 02 FB | 	rdlong	arg01, objptr
0b478     79 00 00 FF 
0b47c     98 E5 85 F1 | 	sub	objptr, ##62360
0b480     40 EB BF FD | 	call	#_execute_line
0b484     79 00 00 FF 
0b488     98 E5 05 F1 | 	add	objptr, ##62360
0b48c     F2 FA 61 FC | 	wrlong	result1, objptr
0b490     04 E4 85 F1 | 	sub	objptr, #4
0b494     F2 1E 02 FB | 	rdlong	local01, objptr
0b498     79 00 00 FF 
0b49c     94 E5 85 F1 | 	sub	objptr, ##62356
0b4a0     FF FF 3F FF 
0b4a4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b4a8     20 00 90 AD |  if_e	jmp	#LR__0943
0b4ac     E0 12 06 F6 | 	mov	arg01, #224
0b4b0     B4 05 B1 FD | 	call	#_usbnew_spin2_keystate
0b4b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4b8     10 00 90 5D |  if_ne	jmp	#LR__0943
0b4bc     E4 12 06 F6 | 	mov	arg01, #228
0b4c0     A4 05 B1 FD | 	call	#_usbnew_spin2_keystate
0b4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4c8     A0 FE 9F AD |  if_e	jmp	#LR__0941
0b4cc                 | LR__0943
0b4cc     06 12 06 F6 | 	mov	arg01, #6
0b4d0     94 05 B1 FD | 	call	#_usbnew_spin2_keystate
0b4d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4d8     90 FE 9F AD |  if_e	jmp	#LR__0941
0b4dc                 | '   ''do whatever kbm.peek_latest_key()=$106 
0b4dc                 | ' if runheader(5)<>$7FFF_FFFF then 
0b4dc     79 00 00 FF 
0b4e0     B8 E5 05 F1 | 	add	objptr, ##62392
0b4e4     F2 1E 02 FB | 	rdlong	local01, objptr
0b4e8     79 00 00 FF 
0b4ec     B8 E5 85 F1 | 	sub	objptr, ##62392
0b4f0     FF FF 3F FF 
0b4f4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b4f8     C0 00 90 AD |  if_e	jmp	#LR__0945
0b4fc                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)  : kbm.get_key ' eat ctrl-c
0b4fc     79 00 00 FF 
0b500     C4 E5 05 F1 | 	add	objptr, ##62404
0b504     F2 1E 02 FB | 	rdlong	local01, objptr
0b508     79 00 00 FF 
0b50c     C4 E5 85 F1 | 	sub	objptr, ##62404
0b510     01 1E 0E F2 | 	cmp	local01, #1 wz
0b514     40 00 90 5D |  if_ne	jmp	#LR__0944
0b518     7B 00 00 FF 
0b51c     68 E4 05 F1 | 	add	objptr, ##63080
0b520     F2 14 02 FB | 	rdlong	arg02, objptr
0b524     04 E4 85 F1 | 	sub	objptr, #4
0b528     F2 1A 02 FB | 	rdlong	arg05, objptr
0b52c     07 12 06 F6 | 	mov	arg01, #7
0b530     56 00 00 FF 
0b534     44 16 06 F6 | 	mov	arg03, ##44100
0b538     0C 18 C6 F9 | 	decod	arg04, #12
0b53c     01 1C 66 F6 | 	neg	arg06, #1
0b540     6F 00 00 FF 
0b544     A4 E5 85 F1 | 	sub	objptr, ##57252
0b548     40 09 B1 FD | 	call	#_audio096_spin2_play
0b54c     0B 00 00 FF 
0b550     C0 E4 85 F1 | 	sub	objptr, ##5824
0b554     AC 05 B1 FD | 	call	#_usbnew_spin2_get_key
0b558                 | LR__0944
0b558                 | '   print "Stopped at line ";runheader(0)
0b558     00 12 06 F6 | 	mov	arg01, #0
0b55c     0C 67 B1 FD | 	call	#__system___getiolock_0474
0b560     FD 12 02 F6 | 	mov	arg01, result1
0b564     74 0D B1 FD | 	call	#__system___lockmem
0b568     5F 01 00 FF 
0b56c     8A 14 06 F6 | 	mov	arg02, ##@LR__4922
0b570     00 12 06 F6 | 	mov	arg01, #0
0b574     00 16 06 F6 | 	mov	arg03, #0
0b578     64 1A B1 FD | 	call	#__system___basic_print_string
0b57c     79 00 00 FF 
0b580     A4 E5 05 F1 | 	add	objptr, ##62372
0b584     F2 14 02 FB | 	rdlong	arg02, objptr
0b588     79 00 00 FF 
0b58c     A4 E5 85 F1 | 	sub	objptr, ##62372
0b590     00 12 06 F6 | 	mov	arg01, #0
0b594     00 16 06 F6 | 	mov	arg03, #0
0b598     0A 18 06 F6 | 	mov	arg04, #10
0b59c     C4 1A B1 FD | 	call	#__system___basic_print_unsigned
0b5a0     00 12 06 F6 | 	mov	arg01, #0
0b5a4     0A 14 06 F6 | 	mov	arg02, #10
0b5a8     00 16 06 F6 | 	mov	arg03, #0
0b5ac     D8 19 B1 FD | 	call	#__system___basic_print_char
0b5b0     00 12 06 F6 | 	mov	arg01, #0
0b5b4     B4 66 B1 FD | 	call	#__system___getiolock_0474
0b5b8     FD 00 68 FC | 	wrlong	#0, result1
0b5bc                 | LR__0945
0b5bc     79 00 00 FF 
0b5c0     A0 E5 05 F1 | 	add	objptr, ##62368
0b5c4     F2 00 68 FC | 	wrlong	#0, objptr
0b5c8     79 00 00 FF 
0b5cc     A0 E5 85 F1 | 	sub	objptr, ##62368
0b5d0                 | LR__0946
0b5d0     A7 F0 03 F6 | 	mov	ptra, fp
0b5d4     B2 00 A0 FD | 	call	#popregs_
0b5d8                 | _do_run_ret
0b5d8     2D 00 64 FD | 	ret
0b5dc                 | 
0b5dc                 | ' 
0b5dc                 | ' sub do_defenv
0b5dc                 | _do_defenv
0b5dc     09 4A 05 F6 | 	mov	COUNT_, #9
0b5e0     A8 00 A0 FD | 	call	#pushregs_
0b5e4     B4 F0 07 F1 | 	add	ptra, #180
0b5e8     6A 00 00 FF 
0b5ec     64 E4 05 F1 | 	add	objptr, ##54372
0b5f0     F2 1E 02 FB | 	rdlong	local01, objptr
0b5f4     0F 1B 02 F6 | 	mov	arg05, local01
0b5f8     01 1A 66 F0 | 	shl	arg05, #1
0b5fc     0F 1B 02 F1 | 	add	arg05, local01
0b600     02 1A 66 F0 | 	shl	arg05, #2
0b604     03 00 00 FF 
0b608     04 E4 85 F1 | 	sub	objptr, ##1540
0b60c     F2 20 02 F6 | 	mov	local02, objptr
0b610     F2 1A 02 F1 | 	add	arg05, objptr
0b614     0D 1B 02 FB | 	rdlong	arg05, arg05
0b618     10 4E 05 F1 | 	add	fp, #16
0b61c     A7 1A 62 FC | 	wrlong	arg05, fp
0b620                 | ' 
0b620                 | ' numpar=compiledline(lineptr_e).result.uresult
0b620                 | ' 
0b620                 | ' 
0b620                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0b620                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0b620                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0b620                 | ' 
0b620                 | ' 
0b620                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0b620     10 4E 85 F1 | 	sub	fp, #16
0b624     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b628     67 00 00 FF 
0b62c     60 E4 85 F1 | 	sub	objptr, ##52832
0b630     10 4E 05 51 |  if_ne	add	fp, #16
0b634     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b638     10 4E 85 51 |  if_ne	sub	fp, #16
0b63c     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0b640     10 4E 05 51 |  if_ne	add	fp, #16
0b644     0F 21 02 56 |  if_ne	mov	local02, local01
0b648     10 4E 85 51 |  if_ne	sub	fp, #16
0b64c     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0b650     24 0C 90 5D |  if_ne	jmp	#LR__0971
0b654                 | ' 
0b654                 | '  
0b654                 | ' if numpar=2 then
0b654     10 4E 05 F1 | 	add	fp, #16
0b658     A7 20 02 FB | 	rdlong	local02, fp
0b65c     10 4E 85 F1 | 	sub	fp, #16
0b660     02 20 0E F2 | 	cmp	local02, #2 wz
0b664     CC 03 90 5D |  if_ne	jmp	#LR__0962
0b668     5C EA BF FD | 	call	#_pop
0b66c     FF 1A 02 F6 | 	mov	arg05, result3
0b670     5C 4E 05 F1 | 	add	fp, #92
0b674     A7 FA 61 FC | 	wrlong	result1, fp
0b678     04 4E 05 F1 | 	add	fp, #4
0b67c     A7 FC 61 FC | 	wrlong	result2, fp
0b680     04 4E 05 F1 | 	add	fp, #4
0b684     A7 1A 62 FC | 	wrlong	arg05, fp
0b688                 | '   t1=pop()
0b688                 | '   if t1.result_type=result_string2 then 
0b688     64 4E 85 F1 | 	sub	fp, #100
0b68c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b690     20 00 90 5D |  if_ne	jmp	#LR__0950
0b694     5C 4E 05 F1 | 	add	fp, #92
0b698     A7 12 02 FB | 	rdlong	arg01, fp
0b69c     5C 4E 85 F1 | 	sub	fp, #92
0b6a0     C8 29 B0 FD | 	call	#_convertstring
0b6a4     68 4E 05 F1 | 	add	fp, #104
0b6a8     A7 FA 61 FC | 	wrlong	result1, fp
0b6ac     68 4E 85 F1 | 	sub	fp, #104
0b6b0     58 00 90 FD | 	jmp	#LR__0953
0b6b4                 | LR__0950
0b6b4     64 4E 05 F1 | 	add	fp, #100
0b6b8     A7 20 02 FB | 	rdlong	local02, fp
0b6bc     64 4E 85 F1 | 	sub	fp, #100
0b6c0     1F 20 0E F2 | 	cmp	local02, #31 wz
0b6c4     18 00 90 5D |  if_ne	jmp	#LR__0951
0b6c8     5C 4E 05 F1 | 	add	fp, #92
0b6cc     A7 20 02 FB | 	rdlong	local02, fp
0b6d0     0C 4E 05 F1 | 	add	fp, #12
0b6d4     A7 20 62 FC | 	wrlong	local02, fp
0b6d8     68 4E 85 F1 | 	sub	fp, #104
0b6dc     2C 00 90 FD | 	jmp	#LR__0952
0b6e0                 | LR__0951
0b6e0     5F 01 00 FF 
0b6e4     9B 20 06 F6 | 	mov	local02, ##@LR__4923
0b6e8     68 4E 05 F1 | 	add	fp, #104
0b6ec     A7 20 62 FC | 	wrlong	local02, fp
0b6f0     0C 4E 85 F1 | 	sub	fp, #12
0b6f4     A7 12 02 F6 | 	mov	arg01, fp
0b6f8     5C 4E 85 F1 | 	sub	fp, #92
0b6fc     1C 73 B0 FD | 	call	#_converttoint
0b700     24 4E 05 F1 | 	add	fp, #36
0b704     A7 FA 61 FC | 	wrlong	result1, fp
0b708     24 4E 85 F1 | 	sub	fp, #36
0b70c                 | LR__0952
0b70c                 | LR__0953
0b70c                 | ' 
0b70c                 | '     
0b70c                 | '   if s1<>"" then 
0b70c     68 4E 05 F1 | 	add	fp, #104
0b710     A7 12 02 FB | 	rdlong	arg01, fp
0b714     68 4E 85 F1 | 	sub	fp, #104
0b718     5F 01 00 FF 
0b71c     9C 14 06 F6 | 	mov	arg02, ##@LR__4924
0b720     E0 0B B1 FD | 	call	#__system___string_cmp
0b724     00 FA 0D F2 | 	cmp	result1, #0 wz
0b728     F8 01 90 AD |  if_e	jmp	#LR__0957
0b72c     98 E9 BF FD | 	call	#_pop
0b730     FF 1E 02 F6 | 	mov	local01, result3
0b734     5C 4E 05 F1 | 	add	fp, #92
0b738     A7 FA 61 FC | 	wrlong	result1, fp
0b73c     04 4E 05 F1 | 	add	fp, #4
0b740     A7 FC 61 FC | 	wrlong	result2, fp
0b744     04 4E 05 F1 | 	add	fp, #4
0b748     A7 1E 62 FC | 	wrlong	local01, fp
0b74c     08 4E 85 F1 | 	sub	fp, #8
0b750     A7 12 02 F6 | 	mov	arg01, fp
0b754     5C 4E 85 F1 | 	sub	fp, #92
0b758     C0 72 B0 FD | 	call	#_converttoint
0b75c     20 4E 05 F1 | 	add	fp, #32
0b760     A7 FA 61 FC | 	wrlong	result1, fp
0b764     20 4E 85 F1 | 	sub	fp, #32
0b768                 | '     t1=pop()
0b768                 | '     channel=converttoint(t1) 
0b768                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0b768     09 12 06 F6 | 	mov	arg01, #9
0b76c     30 5B B1 FD | 	call	#__system__close
0b770     09 20 06 F6 | 	mov	local02, #9
0b774     5F 01 00 FF 
0b778     9D 12 06 F6 | 	mov	arg01, ##@LR__4925
0b77c     68 4E 05 F1 | 	add	fp, #104
0b780     A7 14 02 FB | 	rdlong	arg02, fp
0b784     68 4E 85 F1 | 	sub	fp, #104
0b788     AC 0B B1 FD | 	call	#__system___string_concat
0b78c     FD 14 02 F6 | 	mov	arg02, result1
0b790     10 13 02 F6 | 	mov	arg01, local02
0b794     00 16 06 F6 | 	mov	arg03, #0
0b798     40 17 B1 FD | 	call	#__system___basic_open_string
0b79c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b7a0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b7a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b7a8     0C 4E 05 F1 | 	add	fp, #12
0b7ac     A7 FA 61 FC | 	wrlong	result1, fp
0b7b0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b7b0     0C 4E 85 F1 | 	sub	fp, #12
0b7b4     A0 00 90 AD |  if_e	jmp	#LR__0954
0b7b8     00 12 06 F6 | 	mov	arg01, #0
0b7bc     AC 64 B1 FD | 	call	#__system___getiolock_0474
0b7c0     FD 12 02 F6 | 	mov	arg01, result1
0b7c4     14 0B B1 FD | 	call	#__system___lockmem
0b7c8     5F 01 00 FF 
0b7cc     AA 14 06 F6 | 	mov	arg02, ##@LR__4926
0b7d0     00 12 06 F6 | 	mov	arg01, #0
0b7d4     00 16 06 F6 | 	mov	arg03, #0
0b7d8     04 18 B1 FD | 	call	#__system___basic_print_string
0b7dc     0C 4E 05 F1 | 	add	fp, #12
0b7e0     A7 14 02 FB | 	rdlong	arg02, fp
0b7e4     0C 4E 85 F1 | 	sub	fp, #12
0b7e8     00 12 06 F6 | 	mov	arg01, #0
0b7ec     00 16 06 F6 | 	mov	arg03, #0
0b7f0     0A 18 06 F6 | 	mov	arg04, #10
0b7f4     2C 18 B1 FD | 	call	#__system___basic_print_integer
0b7f8     5F 01 00 FF 
0b7fc     B8 14 06 F6 | 	mov	arg02, ##@LR__4927
0b800     00 12 06 F6 | 	mov	arg01, #0
0b804     00 16 06 F6 | 	mov	arg03, #0
0b808     D4 17 B1 FD | 	call	#__system___basic_print_string
0b80c     00 20 06 F6 | 	mov	local02, #0
0b810     0C 4E 05 F1 | 	add	fp, #12
0b814     A7 12 02 FB | 	rdlong	arg01, fp
0b818     0C 4E 85 F1 | 	sub	fp, #12
0b81c     4C 31 B1 FD | 	call	#__system___strerror
0b820     FD 14 02 F6 | 	mov	arg02, result1
0b824     10 13 02 F6 | 	mov	arg01, local02
0b828     00 16 06 F6 | 	mov	arg03, #0
0b82c     B0 17 B1 FD | 	call	#__system___basic_print_string
0b830     00 12 06 F6 | 	mov	arg01, #0
0b834     0A 14 06 F6 | 	mov	arg02, #10
0b838     00 16 06 F6 | 	mov	arg03, #0
0b83c     48 17 B1 FD | 	call	#__system___basic_print_char
0b840     00 12 06 F6 | 	mov	arg01, #0
0b844     24 64 B1 FD | 	call	#__system___getiolock_0474
0b848     FD 00 68 FC | 	wrlong	#0, result1
0b84c     09 12 06 F6 | 	mov	arg01, #9
0b850     4C 5A B1 FD | 	call	#__system__close
0b854     20 0A 90 FD | 	jmp	#LR__0971
0b858                 | LR__0954
0b858                 | '     get #9,17,envbuf8(channel,0),256
0b858     20 4E 05 F1 | 	add	fp, #32
0b85c     A7 1A 02 FB | 	rdlong	arg05, fp
0b860     20 4E 85 F1 | 	sub	fp, #32
0b864     0D 17 02 F6 | 	mov	arg03, arg05
0b868     09 16 66 F0 | 	shl	arg03, #9
0b86c     0D 17 02 F1 | 	add	arg03, arg05
0b870     2C 00 00 FF 
0b874     CC E4 05 F1 | 	add	objptr, ##22732
0b878     F2 16 02 F1 | 	add	arg03, objptr
0b87c     09 12 06 F6 | 	mov	arg01, #9
0b880     11 14 06 F6 | 	mov	arg02, #17
0b884     00 19 06 F6 | 	mov	arg04, #256
0b888     01 1A 06 F6 | 	mov	arg05, #1
0b88c     2C 00 00 FF 
0b890     CC E4 85 F1 | 	sub	objptr, ##22732
0b894     58 18 B1 FD | 	call	#__system___basic_get
0b898                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b898     14 4E 05 F1 | 	add	fp, #20
0b89c     A7 FE 69 FC | 	wrlong	#255, fp
0b8a0     14 4E 85 F1 | 	sub	fp, #20
0b8a4     2C 00 00 FF 
0b8a8     CC E4 05 F1 | 	add	objptr, ##22732
0b8ac     97 30 48 FB | 	callpa	#(@LR__0956-@LR__0955)>>2,fcache_load_ptr_
0b8b0                 | LR__0955
0b8b0     20 4E 05 F1 | 	add	fp, #32
0b8b4     A7 18 02 FB | 	rdlong	arg04, fp
0b8b8     0C 21 02 F6 | 	mov	local02, arg04
0b8bc     09 20 66 F0 | 	shl	local02, #9
0b8c0     F2 20 02 F1 | 	add	local02, objptr
0b8c4     0C 4E 85 F1 | 	sub	fp, #12
0b8c8     A7 1E 02 FB | 	rdlong	local01, fp
0b8cc     0F 1B 02 F6 | 	mov	arg05, local01
0b8d0     01 1A 66 F0 | 	shl	arg05, #1
0b8d4     10 1B 02 F1 | 	add	arg05, local02
0b8d8     0C 21 02 F6 | 	mov	local02, arg04
0b8dc     09 20 66 F0 | 	shl	local02, #9
0b8e0     0C 21 02 F1 | 	add	local02, arg04
0b8e4     F2 20 02 F1 | 	add	local02, objptr
0b8e8     10 1F 02 F1 | 	add	local01, local02
0b8ec     0F 21 C2 FA | 	rdbyte	local02, local01
0b8f0     00 21 06 FA | 	mul	local02, #256
0b8f4     0D 21 52 FC | 	wrword	local02, arg05
0b8f8     A7 20 02 FB | 	rdlong	local02, fp
0b8fc     01 20 86 F1 | 	sub	local02, #1
0b900     A7 20 62 FC | 	wrlong	local02, fp
0b904     14 4E 85 F1 | 	sub	fp, #20
0b908     00 20 56 F2 | 	cmps	local02, #0 wc
0b90c     A0 FF 9F 3D |  if_ae	jmp	#LR__0955
0b910                 | LR__0956
0b910     2C 00 00 FF 
0b914     CC E4 85 F1 | 	sub	objptr, ##22732
0b918                 | '     close #9
0b918     09 12 06 F6 | 	mov	arg01, #9
0b91c     80 59 B1 FD | 	call	#__system__close
0b920                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b920                 | '     return
0b920     54 09 90 FD | 	jmp	#LR__0971
0b924                 | LR__0957
0b924                 | '     if wptr < ($80000 - 2048) then 
0b924     24 4E 05 F1 | 	add	fp, #36
0b928     A7 22 02 FB | 	rdlong	local03, fp
0b92c     24 4E 85 F1 | 	sub	fp, #36
0b930     FC 03 00 FF 
0b934     00 22 56 F2 | 	cmps	local03, ##522240 wc
0b938     7C 00 90 3D |  if_ae	jmp	#LR__0960
0b93c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0b93c     14 4E 05 F1 | 	add	fp, #20
0b940     A7 00 68 FC | 	wrlong	#0, fp
0b944     14 4E 85 F1 | 	sub	fp, #20
0b948     2C 00 00 FF 
0b94c     CC E4 05 F1 | 	add	objptr, ##22732
0b950     97 2C 48 FB | 	callpa	#(@LR__0959-@LR__0958)>>2,fcache_load_ptr_
0b954                 | LR__0958
0b954     20 4E 05 F1 | 	add	fp, #32
0b958     A7 22 02 FB | 	rdlong	local03, fp
0b95c     09 22 66 F0 | 	shl	local03, #9
0b960     F2 22 02 F1 | 	add	local03, objptr
0b964     0C 4E 85 F1 | 	sub	fp, #12
0b968     A7 20 02 FB | 	rdlong	local02, fp
0b96c     10 1F 02 F6 | 	mov	local01, local02
0b970     01 1E 66 F0 | 	shl	local01, #1
0b974     11 1F 02 F1 | 	add	local01, local03
0b978     10 4E 05 F1 | 	add	fp, #16
0b97c     A7 12 02 FB | 	rdlong	arg01, fp
0b980     01 20 66 F0 | 	shl	local02, #1
0b984     10 13 02 F1 | 	add	arg01, local02
0b988     09 FB E1 FA | 	rdword	result1, arg01
0b98c     0F FB 51 FC | 	wrword	result1, local01
0b990     10 4E 85 F1 | 	sub	fp, #16
0b994     A7 22 02 FB | 	rdlong	local03, fp
0b998     01 22 06 F1 | 	add	local03, #1
0b99c     A7 22 62 FC | 	wrlong	local03, fp
0b9a0     14 4E 85 F1 | 	sub	fp, #20
0b9a4     00 23 56 F2 | 	cmps	local03, #256 wc
0b9a8     A8 FF 9F CD |  if_b	jmp	#LR__0958
0b9ac                 | LR__0959
0b9ac     2C 00 00 FF 
0b9b0     CC E4 85 F1 | 	sub	objptr, ##22732
0b9b4     C0 08 90 FD | 	jmp	#LR__0971
0b9b8                 | LR__0960
0b9b8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0b9b8     14 4E 05 F1 | 	add	fp, #20
0b9bc     A7 00 68 FC | 	wrlong	#0, fp
0b9c0     14 4E 85 F1 | 	sub	fp, #20
0b9c4                 | LR__0961
0b9c4     20 4E 05 F1 | 	add	fp, #32
0b9c8     A7 22 02 FB | 	rdlong	local03, fp
0b9cc     09 22 66 F0 | 	shl	local03, #9
0b9d0     2C 00 00 FF 
0b9d4     CC E4 05 F1 | 	add	objptr, ##22732
0b9d8     F2 22 02 F1 | 	add	local03, objptr
0b9dc     0C 4E 85 F1 | 	sub	fp, #12
0b9e0     A7 20 02 FB | 	rdlong	local02, fp
0b9e4     10 1F 02 F6 | 	mov	local01, local02
0b9e8     01 1E 66 F0 | 	shl	local01, #1
0b9ec     11 1F 02 F1 | 	add	local01, local03
0b9f0     10 4E 05 F1 | 	add	fp, #16
0b9f4     A7 12 02 FB | 	rdlong	arg01, fp
0b9f8     24 4E 85 F1 | 	sub	fp, #36
0b9fc     01 20 66 F0 | 	shl	local02, #1
0ba00     10 13 02 F1 | 	add	arg01, local02
0ba04     2C 00 00 FF 
0ba08     CC E4 85 F1 | 	sub	objptr, ##22732
0ba0c     34 D4 B0 FD | 	call	#_psdpeek
0ba10     0F FB 51 FC | 	wrword	result1, local01
0ba14     14 4E 05 F1 | 	add	fp, #20
0ba18     A7 24 02 FB | 	rdlong	local04, fp
0ba1c     01 24 06 F1 | 	add	local04, #1
0ba20     A7 24 62 FC | 	wrlong	local04, fp
0ba24     14 4E 85 F1 | 	sub	fp, #20
0ba28     00 25 56 F2 | 	cmps	local04, #256 wc
0ba2c     94 FF 9F CD |  if_b	jmp	#LR__0961
0ba30                 | '     return   
0ba30     44 08 90 FD | 	jmp	#LR__0971
0ba34                 | LR__0962
0ba34                 | ' 
0ba34                 | ' if numpar=5 then    'simple adsr
0ba34     10 4E 05 F1 | 	add	fp, #16
0ba38     A7 22 02 FB | 	rdlong	local03, fp
0ba3c     10 4E 85 F1 | 	sub	fp, #16
0ba40     05 22 0E F2 | 	cmp	local03, #5 wz
0ba44     30 08 90 5D |  if_ne	jmp	#LR__0970
0ba48     7C E6 BF FD | 	call	#_pop
0ba4c     FF 1E 02 F6 | 	mov	local01, result3
0ba50     5C 4E 05 F1 | 	add	fp, #92
0ba54     A7 FA 61 FC | 	wrlong	result1, fp
0ba58     04 4E 05 F1 | 	add	fp, #4
0ba5c     A7 FC 61 FC | 	wrlong	result2, fp
0ba60     04 4E 05 F1 | 	add	fp, #4
0ba64     A7 1E 62 FC | 	wrlong	local01, fp
0ba68     08 4E 85 F1 | 	sub	fp, #8
0ba6c     A7 12 02 F6 | 	mov	arg01, fp
0ba70     5C 4E 85 F1 | 	sub	fp, #92
0ba74     50 70 B0 FD | 	call	#_converttofloat
0ba78     FD 22 02 F6 | 	mov	local03, result1
0ba7c     34 4E 05 F1 | 	add	fp, #52
0ba80     A7 22 62 FC | 	wrlong	local03, fp
0ba84     34 4E 85 F1 | 	sub	fp, #52
0ba88     3C E6 BF FD | 	call	#_pop
0ba8c     FF 1E 02 F6 | 	mov	local01, result3
0ba90     5C 4E 05 F1 | 	add	fp, #92
0ba94     A7 FA 61 FC | 	wrlong	result1, fp
0ba98     04 4E 05 F1 | 	add	fp, #4
0ba9c     A7 FC 61 FC | 	wrlong	result2, fp
0baa0     04 4E 05 F1 | 	add	fp, #4
0baa4     A7 1E 62 FC | 	wrlong	local01, fp
0baa8     08 4E 85 F1 | 	sub	fp, #8
0baac     A7 12 02 F6 | 	mov	arg01, fp
0bab0     5C 4E 85 F1 | 	sub	fp, #92
0bab4     10 70 B0 FD | 	call	#_converttofloat
0bab8     FD 22 02 F6 | 	mov	local03, result1
0babc     30 4E 05 F1 | 	add	fp, #48
0bac0     A7 22 62 FC | 	wrlong	local03, fp
0bac4     30 4E 85 F1 | 	sub	fp, #48
0bac8     FC E5 BF FD | 	call	#_pop
0bacc     FF 1E 02 F6 | 	mov	local01, result3
0bad0     5C 4E 05 F1 | 	add	fp, #92
0bad4     A7 FA 61 FC | 	wrlong	result1, fp
0bad8     04 4E 05 F1 | 	add	fp, #4
0badc     A7 FC 61 FC | 	wrlong	result2, fp
0bae0     04 4E 05 F1 | 	add	fp, #4
0bae4     A7 1E 62 FC | 	wrlong	local01, fp
0bae8     08 4E 85 F1 | 	sub	fp, #8
0baec     A7 12 02 F6 | 	mov	arg01, fp
0baf0     5C 4E 85 F1 | 	sub	fp, #92
0baf4     D0 6F B0 FD | 	call	#_converttofloat
0baf8     FD 22 02 F6 | 	mov	local03, result1
0bafc     2C 4E 05 F1 | 	add	fp, #44
0bb00     A7 22 62 FC | 	wrlong	local03, fp
0bb04     2C 4E 85 F1 | 	sub	fp, #44
0bb08     BC E5 BF FD | 	call	#_pop
0bb0c     FF 1E 02 F6 | 	mov	local01, result3
0bb10     5C 4E 05 F1 | 	add	fp, #92
0bb14     A7 FA 61 FC | 	wrlong	result1, fp
0bb18     04 4E 05 F1 | 	add	fp, #4
0bb1c     A7 FC 61 FC | 	wrlong	result2, fp
0bb20     04 4E 05 F1 | 	add	fp, #4
0bb24     A7 1E 62 FC | 	wrlong	local01, fp
0bb28     08 4E 85 F1 | 	sub	fp, #8
0bb2c     A7 12 02 F6 | 	mov	arg01, fp
0bb30     5C 4E 85 F1 | 	sub	fp, #92
0bb34     90 6F B0 FD | 	call	#_converttofloat
0bb38     FD 22 02 F6 | 	mov	local03, result1
0bb3c     28 4E 05 F1 | 	add	fp, #40
0bb40     A7 22 62 FC | 	wrlong	local03, fp
0bb44     28 4E 85 F1 | 	sub	fp, #40
0bb48     7C E5 BF FD | 	call	#_pop
0bb4c     FF 1E 02 F6 | 	mov	local01, result3
0bb50     5C 4E 05 F1 | 	add	fp, #92
0bb54     A7 FA 61 FC | 	wrlong	result1, fp
0bb58     04 4E 05 F1 | 	add	fp, #4
0bb5c     A7 FC 61 FC | 	wrlong	result2, fp
0bb60     04 4E 05 F1 | 	add	fp, #4
0bb64     A7 1E 62 FC | 	wrlong	local01, fp
0bb68     08 4E 85 F1 | 	sub	fp, #8
0bb6c     A7 12 02 F6 | 	mov	arg01, fp
0bb70     5C 4E 85 F1 | 	sub	fp, #92
0bb74     A4 6E B0 FD | 	call	#_converttoint
0bb78     20 4E 05 F1 | 	add	fp, #32
0bb7c     A7 FA 61 FC | 	wrlong	result1, fp
0bb80                 | ' 
0bb80                 | '   t1=pop() : rr=converttofloat(t1)
0bb80                 | '   t1=pop() : ss=converttofloat(t1) 
0bb80                 | '   t1=pop() : dd=converttofloat(t1)
0bb80                 | '   t1=pop() : aa=converttofloat(t1)
0bb80                 | '   t1=pop() : channel=converttoint(t1)
0bb80                 | '   if ss<0.0 then ss=0.0 
0bb80     10 4E 05 F1 | 	add	fp, #16
0bb84     A7 12 02 FB | 	rdlong	arg01, fp
0bb88     30 4E 85 F1 | 	sub	fp, #48
0bb8c     00 14 06 F6 | 	mov	arg02, #0
0bb90     01 16 06 F6 | 	mov	arg03, #1
0bb94     F4 36 B1 FD | 	call	#__system___float_cmp
0bb98     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb9c     30 4E 05 C1 |  if_b	add	fp, #48
0bba0     A7 00 68 CC |  if_b	wrlong	#0, fp
0bba4     30 4E 85 C1 |  if_b	sub	fp, #48
0bba8                 | '   if ss>1.0 then ss=1.0
0bba8     30 4E 05 F1 | 	add	fp, #48
0bbac     A7 12 02 FB | 	rdlong	arg01, fp
0bbb0     30 4E 85 F1 | 	sub	fp, #48
0bbb4     00 C0 1F FF 
0bbb8     00 14 06 F6 | 	mov	arg02, ##1065353216
0bbbc     01 16 66 F6 | 	neg	arg03, #1
0bbc0     C8 36 B1 FD | 	call	#__system___float_cmp
0bbc4     01 FA 55 F2 | 	cmps	result1, #1 wc
0bbc8     30 4E 05 31 |  if_ae	add	fp, #48
0bbcc     00 C0 9F 3F 
0bbd0     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0bbd4     30 4E 85 31 |  if_ae	sub	fp, #48
0bbd8     28 4E 05 F1 | 	add	fp, #40
0bbdc     A7 12 02 FB | 	rdlong	arg01, fp
0bbe0     04 4E 05 F1 | 	add	fp, #4
0bbe4     A7 14 02 FB | 	rdlong	arg02, fp
0bbe8     2C 4E 85 F1 | 	sub	fp, #44
0bbec     98 2E B1 FD | 	call	#__system___float_add
0bbf0     FD 12 02 F6 | 	mov	arg01, result1
0bbf4     34 4E 05 F1 | 	add	fp, #52
0bbf8     A7 14 02 FB | 	rdlong	arg02, fp
0bbfc     34 4E 85 F1 | 	sub	fp, #52
0bc00     84 2E B1 FD | 	call	#__system___float_add
0bc04     4C 4E 05 F1 | 	add	fp, #76
0bc08     A7 FA 61 FC | 	wrlong	result1, fp
0bc0c     FD 14 02 F6 | 	mov	arg02, result1
0bc10     4C 4E 85 F1 | 	sub	fp, #76
0bc14     00 C0 21 FF 
0bc18     00 12 06 F6 | 	mov	arg01, ##1132462080
0bc1c     3C 34 B1 FD | 	call	#__system___float_div
0bc20     50 4E 05 F1 | 	add	fp, #80
0bc24     A7 FA 61 FC | 	wrlong	result1, fp
0bc28     28 4E 85 F1 | 	sub	fp, #40
0bc2c     A7 12 02 FB | 	rdlong	arg01, fp
0bc30     FD 14 02 F6 | 	mov	arg02, result1
0bc34     28 4E 85 F1 | 	sub	fp, #40
0bc38     1C 32 B1 FD | 	call	#__system___float_mul
0bc3c     FD 12 02 F6 | 	mov	arg01, result1
0bc40     01 14 06 F6 | 	mov	arg02, #1
0bc44     D8 36 B1 FD | 	call	#__system___float_tointeger
0bc48     A7 FA 61 FC | 	wrlong	result1, fp
0bc4c     2C 4E 05 F1 | 	add	fp, #44
0bc50     A7 12 02 FB | 	rdlong	arg01, fp
0bc54     24 4E 05 F1 | 	add	fp, #36
0bc58     A7 14 02 FB | 	rdlong	arg02, fp
0bc5c     50 4E 85 F1 | 	sub	fp, #80
0bc60     F4 31 B1 FD | 	call	#__system___float_mul
0bc64     FD 12 02 F6 | 	mov	arg01, result1
0bc68     01 14 06 F6 | 	mov	arg02, #1
0bc6c     B0 36 B1 FD | 	call	#__system___float_tointeger
0bc70     04 4E 05 F1 | 	add	fp, #4
0bc74     A7 FA 61 FC | 	wrlong	result1, fp
0bc78     30 4E 05 F1 | 	add	fp, #48
0bc7c     A7 12 02 FB | 	rdlong	arg01, fp
0bc80     1C 4E 05 F1 | 	add	fp, #28
0bc84     A7 14 02 FB | 	rdlong	arg02, fp
0bc88     50 4E 85 F1 | 	sub	fp, #80
0bc8c     C8 31 B1 FD | 	call	#__system___float_mul
0bc90     FD 12 02 F6 | 	mov	arg01, result1
0bc94     01 14 06 F6 | 	mov	arg02, #1
0bc98     84 36 B1 FD | 	call	#__system___float_tointeger
0bc9c     FD 22 02 F6 | 	mov	local03, result1
0bca0     0C 4E 05 F1 | 	add	fp, #12
0bca4     A7 22 62 FC | 	wrlong	local03, fp
0bca8     0C 4E 85 F1 | 	sub	fp, #12
0bcac                 | '   fulltime=aa+dd+rr
0bcac                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0bcac     00 12 06 F6 | 	mov	arg01, #0
0bcb0     B8 5F B1 FD | 	call	#__system___getiolock_0474
0bcb4     FD 12 02 F6 | 	mov	arg01, result1
0bcb8     20 06 B1 FD | 	call	#__system___lockmem
0bcbc     A7 14 02 FB | 	rdlong	arg02, fp
0bcc0     00 12 06 F6 | 	mov	arg01, #0
0bcc4     00 16 06 F6 | 	mov	arg03, #0
0bcc8     0A 18 06 F6 | 	mov	arg04, #10
0bccc     54 13 B1 FD | 	call	#__system___basic_print_integer
0bcd0     00 12 06 F6 | 	mov	arg01, #0
0bcd4     09 14 06 F6 | 	mov	arg02, #9
0bcd8     00 16 06 F6 | 	mov	arg03, #0
0bcdc     A8 12 B1 FD | 	call	#__system___basic_print_char
0bce0     04 4E 05 F1 | 	add	fp, #4
0bce4     A7 14 02 FB | 	rdlong	arg02, fp
0bce8     04 4E 85 F1 | 	sub	fp, #4
0bcec     00 12 06 F6 | 	mov	arg01, #0
0bcf0     00 16 06 F6 | 	mov	arg03, #0
0bcf4     0A 18 06 F6 | 	mov	arg04, #10
0bcf8     28 13 B1 FD | 	call	#__system___basic_print_integer
0bcfc     00 12 06 F6 | 	mov	arg01, #0
0bd00     09 14 06 F6 | 	mov	arg02, #9
0bd04     00 16 06 F6 | 	mov	arg03, #0
0bd08     7C 12 B1 FD | 	call	#__system___basic_print_char
0bd0c     0C 4E 05 F1 | 	add	fp, #12
0bd10     A7 14 02 FB | 	rdlong	arg02, fp
0bd14     0C 4E 85 F1 | 	sub	fp, #12
0bd18     00 12 06 F6 | 	mov	arg01, #0
0bd1c     00 16 06 F6 | 	mov	arg03, #0
0bd20     0A 18 06 F6 | 	mov	arg04, #10
0bd24     FC 12 B1 FD | 	call	#__system___basic_print_integer
0bd28     00 12 06 F6 | 	mov	arg01, #0
0bd2c     09 14 06 F6 | 	mov	arg02, #9
0bd30     00 16 06 F6 | 	mov	arg03, #0
0bd34     50 12 B1 FD | 	call	#__system___basic_print_char
0bd38     A7 14 02 FB | 	rdlong	arg02, fp
0bd3c     04 4E 05 F1 | 	add	fp, #4
0bd40     A7 22 02 FB | 	rdlong	local03, fp
0bd44     11 15 02 F1 | 	add	arg02, local03
0bd48     08 4E 05 F1 | 	add	fp, #8
0bd4c     A7 22 02 FB | 	rdlong	local03, fp
0bd50     0C 4E 85 F1 | 	sub	fp, #12
0bd54     11 15 02 F1 | 	add	arg02, local03
0bd58     00 12 06 F6 | 	mov	arg01, #0
0bd5c     00 16 06 F6 | 	mov	arg03, #0
0bd60     0A 18 06 F6 | 	mov	arg04, #10
0bd64     BC 12 B1 FD | 	call	#__system___basic_print_integer
0bd68     00 12 06 F6 | 	mov	arg01, #0
0bd6c     0A 14 06 F6 | 	mov	arg02, #10
0bd70     00 16 06 F6 | 	mov	arg03, #0
0bd74     10 12 B1 FD | 	call	#__system___basic_print_char
0bd78     00 12 06 F6 | 	mov	arg01, #0
0bd7c     EC 5E B1 FD | 	call	#__system___getiolock_0474
0bd80     FD 00 68 FC | 	wrlong	#0, result1
0bd84     F8 BF 23 FF 
0bd88     00 22 06 F6 | 	mov	local03, ##1199566848
0bd8c     A7 12 02 FB | 	rdlong	arg01, fp
0bd90     09 13 52 F6 | 	abs	arg01, arg01 wc
0bd94     1F 26 C6 C9 |  if_b	decod	local05, #31
0bd98     00 26 06 36 |  if_ae	mov	local05, #0
0bd9c     B4 2C B1 FD | 	call	#__system___float_fromuns
0bda0     13 FB 61 F5 | 	xor	result1, local05
0bda4     FD 14 02 F6 | 	mov	arg02, result1
0bda8     11 13 02 F6 | 	mov	arg01, local03
0bdac     AC 32 B1 FD | 	call	#__system___float_div
0bdb0     54 4E 05 F1 | 	add	fp, #84
0bdb4     A7 FA 61 FC | 	wrlong	result1, fp
0bdb8     F8 BF 23 FF 
0bdbc     00 22 06 F6 | 	mov	local03, ##1199566848
0bdc0     24 4E 85 F1 | 	sub	fp, #36
0bdc4     A7 14 02 FB | 	rdlong	arg02, fp
0bdc8     30 4E 85 F1 | 	sub	fp, #48
0bdcc     F8 BF 23 FF 
0bdd0     00 12 06 F6 | 	mov	arg01, ##1199566848
0bdd4     80 30 B1 FD | 	call	#__system___float_mul
0bdd8     FD 14 02 F6 | 	mov	arg02, result1
0bddc     11 13 02 F6 | 	mov	arg01, local03
0bde0     1F 14 E6 F4 | 	bitnot	arg02, #31
0bde4     A0 2C B1 FD | 	call	#__system___float_add
0bde8     FD 22 02 F6 | 	mov	local03, result1
0bdec     04 4E 05 F1 | 	add	fp, #4
0bdf0     A7 12 02 FB | 	rdlong	arg01, fp
0bdf4     04 4E 85 F1 | 	sub	fp, #4
0bdf8     09 13 52 F6 | 	abs	arg01, arg01 wc
0bdfc     1F 26 C6 C9 |  if_b	decod	local05, #31
0be00     00 26 06 36 |  if_ae	mov	local05, #0
0be04     4C 2C B1 FD | 	call	#__system___float_fromuns
0be08     13 FB 61 F5 | 	xor	result1, local05
0be0c     FD 14 02 F6 | 	mov	arg02, result1
0be10     11 13 02 F6 | 	mov	arg01, local03
0be14     44 32 B1 FD | 	call	#__system___float_div
0be18     2C 4E 05 F1 | 	add	fp, #44
0be1c     A7 FA 61 FC | 	wrlong	result1, fp
0be20     04 4E 05 F1 | 	add	fp, #4
0be24     A7 14 02 FB | 	rdlong	arg02, fp
0be28     30 4E 85 F1 | 	sub	fp, #48
0be2c     F8 BF 23 FF 
0be30     00 12 06 F6 | 	mov	arg01, ##1199566848
0be34     20 30 B1 FD | 	call	#__system___float_mul
0be38     FD 22 02 F6 | 	mov	local03, result1
0be3c     0C 4E 05 F1 | 	add	fp, #12
0be40     A7 12 02 FB | 	rdlong	arg01, fp
0be44     0C 4E 85 F1 | 	sub	fp, #12
0be48     09 13 52 F6 | 	abs	arg01, arg01 wc
0be4c     1F 26 C6 C9 |  if_b	decod	local05, #31
0be50     00 26 06 36 |  if_ae	mov	local05, #0
0be54     FC 2B B1 FD | 	call	#__system___float_fromuns
0be58     13 FB 61 F5 | 	xor	result1, local05
0be5c     FD 14 02 F6 | 	mov	arg02, result1
0be60     11 13 02 F6 | 	mov	arg01, local03
0be64     F4 31 B1 FD | 	call	#__system___float_div
0be68     FD 22 02 F6 | 	mov	local03, result1
0be6c     58 4E 05 F1 | 	add	fp, #88
0be70     A7 22 62 FC | 	wrlong	local03, fp
0be74     58 4E 85 F1 | 	sub	fp, #88
0be78                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0be78     00 12 06 F6 | 	mov	arg01, #0
0be7c     EC 5D B1 FD | 	call	#__system___getiolock_0474
0be80     FD 12 02 F6 | 	mov	arg01, result1
0be84     54 04 B1 FD | 	call	#__system___lockmem
0be88     54 4E 05 F1 | 	add	fp, #84
0be8c     A7 14 02 FB | 	rdlong	arg02, fp
0be90     54 4E 85 F1 | 	sub	fp, #84
0be94     00 12 06 F6 | 	mov	arg01, #0
0be98     00 16 06 F6 | 	mov	arg03, #0
0be9c     23 18 06 F6 | 	mov	arg04, #35
0bea0     CC 35 B1 FD | 	call	#__system___basic_print_float
0bea4     00 12 06 F6 | 	mov	arg01, #0
0bea8     09 14 06 F6 | 	mov	arg02, #9
0beac     00 16 06 F6 | 	mov	arg03, #0
0beb0     D4 10 B1 FD | 	call	#__system___basic_print_char
0beb4     2C 4E 05 F1 | 	add	fp, #44
0beb8     A7 14 02 FB | 	rdlong	arg02, fp
0bebc     2C 4E 85 F1 | 	sub	fp, #44
0bec0     00 12 06 F6 | 	mov	arg01, #0
0bec4     00 16 06 F6 | 	mov	arg03, #0
0bec8     23 18 06 F6 | 	mov	arg04, #35
0becc     A0 35 B1 FD | 	call	#__system___basic_print_float
0bed0     00 12 06 F6 | 	mov	arg01, #0
0bed4     09 14 06 F6 | 	mov	arg02, #9
0bed8     00 16 06 F6 | 	mov	arg03, #0
0bedc     A8 10 B1 FD | 	call	#__system___basic_print_char
0bee0     58 4E 05 F1 | 	add	fp, #88
0bee4     A7 14 02 FB | 	rdlong	arg02, fp
0bee8     58 4E 85 F1 | 	sub	fp, #88
0beec     00 12 06 F6 | 	mov	arg01, #0
0bef0     00 16 06 F6 | 	mov	arg03, #0
0bef4     23 18 06 F6 | 	mov	arg04, #35
0bef8     74 35 B1 FD | 	call	#__system___basic_print_float
0befc     00 12 06 F6 | 	mov	arg01, #0
0bf00     0A 14 06 F6 | 	mov	arg02, #10
0bf04     00 16 06 F6 | 	mov	arg03, #0
0bf08     7C 10 B1 FD | 	call	#__system___basic_print_char
0bf0c     00 12 06 F6 | 	mov	arg01, #0
0bf10     58 5D B1 FD | 	call	#__system___getiolock_0474
0bf14     FD 00 68 FC | 	wrlong	#0, result1
0bf18     20 4E 05 F1 | 	add	fp, #32
0bf1c     A7 28 02 FB | 	rdlong	local06, fp
0bf20     20 4E 85 F1 | 	sub	fp, #32
0bf24     01 28 66 F0 | 	shl	local06, #1
0bf28     7B 00 00 FF 
0bf2c     78 E4 05 F1 | 	add	objptr, ##63096
0bf30     F2 28 02 F1 | 	add	local06, objptr
0bf34     A7 2A 02 FB | 	rdlong	local07, fp
0bf38     04 4E 05 F1 | 	add	fp, #4
0bf3c     A7 22 02 FB | 	rdlong	local03, fp
0bf40     11 2B 02 F1 | 	add	local07, local03
0bf44     14 2B 52 FC | 	wrword	local07, local06
0bf48     24 4E 05 F1 | 	add	fp, #36
0bf4c     A7 00 68 FC | 	wrlong	#0, fp
0bf50                 | '   suspoints(channel)=a+d
0bf50                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0bf50     14 4E 85 F1 | 	sub	fp, #20
0bf54     A7 00 68 FC | 	wrlong	#0, fp
0bf58     14 4E 85 F1 | 	sub	fp, #20
0bf5c     A7 2C 02 FB | 	rdlong	local08, fp
0bf60     7B 00 00 FF 
0bf64     78 E4 85 F1 | 	sub	objptr, ##63096
0bf68                 | LR__0963
0bf68     14 4E 05 F1 | 	add	fp, #20
0bf6c     A7 22 02 FB | 	rdlong	local03, fp
0bf70     14 4E 85 F1 | 	sub	fp, #20
0bf74     16 23 52 F2 | 	cmps	local03, local08 wc
0bf78     80 00 90 3D |  if_ae	jmp	#LR__0964
0bf7c     20 4E 05 F1 | 	add	fp, #32
0bf80     A7 28 02 FB | 	rdlong	local06, fp
0bf84     09 28 66 F0 | 	shl	local06, #9
0bf88     2C 00 00 FF 
0bf8c     CC E4 05 F1 | 	add	objptr, ##22732
0bf90     F2 28 02 F1 | 	add	local06, objptr
0bf94     0C 4E 85 F1 | 	sub	fp, #12
0bf98     A7 22 02 FB | 	rdlong	local03, fp
0bf9c     01 22 66 F0 | 	shl	local03, #1
0bfa0     14 23 02 F1 | 	add	local03, local06
0bfa4     14 4E 05 F1 | 	add	fp, #20
0bfa8     A7 12 02 FB | 	rdlong	arg01, fp
0bfac     28 4E 85 F1 | 	sub	fp, #40
0bfb0     2C 00 00 FF 
0bfb4     CC E4 85 F1 | 	sub	objptr, ##22732
0bfb8     01 14 06 F6 | 	mov	arg02, #1
0bfbc     60 33 B1 FD | 	call	#__system___float_tointeger
0bfc0     11 FB 51 FC | 	wrword	result1, local03
0bfc4     28 4E 05 F1 | 	add	fp, #40
0bfc8     A7 12 02 FB | 	rdlong	arg01, fp
0bfcc     2C 4E 05 F1 | 	add	fp, #44
0bfd0     A7 14 02 FB | 	rdlong	arg02, fp
0bfd4     54 4E 85 F1 | 	sub	fp, #84
0bfd8     AC 2A B1 FD | 	call	#__system___float_add
0bfdc     28 4E 05 F1 | 	add	fp, #40
0bfe0     A7 FA 61 FC | 	wrlong	result1, fp
0bfe4     14 4E 85 F1 | 	sub	fp, #20
0bfe8     A7 20 02 FB | 	rdlong	local02, fp
0bfec     01 20 06 F1 | 	add	local02, #1
0bff0     A7 20 62 FC | 	wrlong	local02, fp
0bff4     14 4E 85 F1 | 	sub	fp, #20
0bff8     6C FF 9F FD | 	jmp	#LR__0963
0bffc                 | LR__0964
0bffc                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0bffc     A7 22 02 FB | 	rdlong	local03, fp
0c000     14 4E 05 F1 | 	add	fp, #20
0c004     A7 22 62 FC | 	wrlong	local03, fp
0c008     14 4E 85 F1 | 	sub	fp, #20
0c00c     A7 2E 02 FB | 	rdlong	local09, fp
0c010     04 4E 05 F1 | 	add	fp, #4
0c014     A7 22 02 FB | 	rdlong	local03, fp
0c018     04 4E 85 F1 | 	sub	fp, #4
0c01c     11 2F 02 F1 | 	add	local09, local03
0c020                 | LR__0965
0c020     14 4E 05 F1 | 	add	fp, #20
0c024     A7 22 02 FB | 	rdlong	local03, fp
0c028     14 4E 85 F1 | 	sub	fp, #20
0c02c     17 23 52 F2 | 	cmps	local03, local09 wc
0c030     A8 00 90 3D |  if_ae	jmp	#LR__0966
0c034     20 4E 05 F1 | 	add	fp, #32
0c038     A7 2C 02 FB | 	rdlong	local08, fp
0c03c     09 2C 66 F0 | 	shl	local08, #9
0c040     2C 00 00 FF 
0c044     CC E4 05 F1 | 	add	objptr, ##22732
0c048     F2 2C 02 F1 | 	add	local08, objptr
0c04c     0C 4E 85 F1 | 	sub	fp, #12
0c050     A7 2A 02 FB | 	rdlong	local07, fp
0c054     01 2A 66 F0 | 	shl	local07, #1
0c058     16 2B 02 F1 | 	add	local07, local08
0c05c     14 4E 05 F1 | 	add	fp, #20
0c060     A7 12 02 FB | 	rdlong	arg01, fp
0c064     28 4E 85 F1 | 	sub	fp, #40
0c068     2C 00 00 FF 
0c06c     CC E4 85 F1 | 	sub	objptr, ##22732
0c070     01 14 06 F6 | 	mov	arg02, #1
0c074     A8 32 B1 FD | 	call	#__system___float_tointeger
0c078     15 FB 51 FC | 	wrword	result1, local07
0c07c     28 4E 05 F1 | 	add	fp, #40
0c080     A7 12 02 FB | 	rdlong	arg01, fp
0c084     04 4E 05 F1 | 	add	fp, #4
0c088     A7 14 02 FB | 	rdlong	arg02, fp
0c08c     2C 4E 85 F1 | 	sub	fp, #44
0c090     1F 14 E6 F4 | 	bitnot	arg02, #31
0c094     F0 29 B1 FD | 	call	#__system___float_add
0c098     28 4E 05 F1 | 	add	fp, #40
0c09c     A7 FA 61 FC | 	wrlong	result1, fp
0c0a0     28 4E 85 F1 | 	sub	fp, #40
0c0a4     FD 12 02 F6 | 	mov	arg01, result1
0c0a8     00 14 06 F6 | 	mov	arg02, #0
0c0ac     01 16 06 F6 | 	mov	arg03, #1
0c0b0     D8 31 B1 FD | 	call	#__system___float_cmp
0c0b4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c0b8     28 4E 05 C1 |  if_b	add	fp, #40
0c0bc     A7 00 68 CC |  if_b	wrlong	#0, fp
0c0c0     28 4E 85 C1 |  if_b	sub	fp, #40
0c0c4     14 4E 05 F1 | 	add	fp, #20
0c0c8     A7 20 02 FB | 	rdlong	local02, fp
0c0cc     01 20 06 F1 | 	add	local02, #1
0c0d0     A7 20 62 FC | 	wrlong	local02, fp
0c0d4     14 4E 85 F1 | 	sub	fp, #20
0c0d8     44 FF 9F FD | 	jmp	#LR__0965
0c0dc                 | LR__0966
0c0dc                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0c0dc     A7 22 02 FB | 	rdlong	local03, fp
0c0e0     04 4E 05 F1 | 	add	fp, #4
0c0e4     A7 2E 02 FB | 	rdlong	local09, fp
0c0e8     17 23 02 F1 | 	add	local03, local09
0c0ec     10 4E 05 F1 | 	add	fp, #16
0c0f0     A7 22 62 FC | 	wrlong	local03, fp
0c0f4     14 4E 85 F1 | 	sub	fp, #20
0c0f8                 | LR__0967
0c0f8     14 4E 05 F1 | 	add	fp, #20
0c0fc     A7 28 02 FB | 	rdlong	local06, fp
0c100     14 4E 85 F1 | 	sub	fp, #20
0c104     00 29 56 F2 | 	cmps	local06, #256 wc
0c108     A8 00 90 3D |  if_ae	jmp	#LR__0968
0c10c     20 4E 05 F1 | 	add	fp, #32
0c110     A7 2E 02 FB | 	rdlong	local09, fp
0c114     09 2E 66 F0 | 	shl	local09, #9
0c118     2C 00 00 FF 
0c11c     CC E4 05 F1 | 	add	objptr, ##22732
0c120     F2 2E 02 F1 | 	add	local09, objptr
0c124     0C 4E 85 F1 | 	sub	fp, #12
0c128     A7 2C 02 FB | 	rdlong	local08, fp
0c12c     01 2C 66 F0 | 	shl	local08, #1
0c130     17 2D 02 F1 | 	add	local08, local09
0c134     14 4E 05 F1 | 	add	fp, #20
0c138     A7 12 02 FB | 	rdlong	arg01, fp
0c13c     28 4E 85 F1 | 	sub	fp, #40
0c140     2C 00 00 FF 
0c144     CC E4 85 F1 | 	sub	objptr, ##22732
0c148     01 14 06 F6 | 	mov	arg02, #1
0c14c     D0 31 B1 FD | 	call	#__system___float_tointeger
0c150     16 FB 51 FC | 	wrword	result1, local08
0c154     28 4E 05 F1 | 	add	fp, #40
0c158     A7 12 02 FB | 	rdlong	arg01, fp
0c15c     30 4E 05 F1 | 	add	fp, #48
0c160     A7 14 02 FB | 	rdlong	arg02, fp
0c164     58 4E 85 F1 | 	sub	fp, #88
0c168     1F 14 E6 F4 | 	bitnot	arg02, #31
0c16c     18 29 B1 FD | 	call	#__system___float_add
0c170     28 4E 05 F1 | 	add	fp, #40
0c174     A7 FA 61 FC | 	wrlong	result1, fp
0c178     28 4E 85 F1 | 	sub	fp, #40
0c17c     FD 12 02 F6 | 	mov	arg01, result1
0c180     00 14 06 F6 | 	mov	arg02, #0
0c184     01 16 06 F6 | 	mov	arg03, #1
0c188     00 31 B1 FD | 	call	#__system___float_cmp
0c18c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c190     28 4E 05 C1 |  if_b	add	fp, #40
0c194     A7 00 68 CC |  if_b	wrlong	#0, fp
0c198     28 4E 85 C1 |  if_b	sub	fp, #40
0c19c     14 4E 05 F1 | 	add	fp, #20
0c1a0     A7 2E 02 FB | 	rdlong	local09, fp
0c1a4     01 2E 06 F1 | 	add	local09, #1
0c1a8     A7 2E 62 FC | 	wrlong	local09, fp
0c1ac     14 4E 85 F1 | 	sub	fp, #20
0c1b0     44 FF 9F FD | 	jmp	#LR__0967
0c1b4                 | LR__0968
0c1b4     20 4E 05 F1 | 	add	fp, #32
0c1b8     A7 28 02 FB | 	rdlong	local06, fp
0c1bc     09 28 66 F0 | 	shl	local06, #9
0c1c0     2C 00 00 FF 
0c1c4     CC E4 05 F1 | 	add	objptr, ##22732
0c1c8     F2 28 02 F1 | 	add	local06, objptr
0c1cc     FE 29 06 F1 | 	add	local06, #510
0c1d0     14 01 58 FC | 	wrword	#0, local06
0c1d4                 | '   envbuf(channel,255)=0
0c1d4                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0c1d4     0C 4E 85 F1 | 	sub	fp, #12
0c1d8     A7 00 68 FC | 	wrlong	#0, fp
0c1dc     14 4E 85 F1 | 	sub	fp, #20
0c1e0     2C 00 00 FF 
0c1e4     CC E4 85 F1 | 	sub	objptr, ##22732
0c1e8                 | LR__0969
0c1e8     00 12 06 F6 | 	mov	arg01, #0
0c1ec     7C 5A B1 FD | 	call	#__system___getiolock_0474
0c1f0     FD 12 02 F6 | 	mov	arg01, result1
0c1f4     E4 00 B1 FD | 	call	#__system___lockmem
0c1f8     20 4E 05 F1 | 	add	fp, #32
0c1fc     A7 2E 02 FB | 	rdlong	local09, fp
0c200     09 2E 66 F0 | 	shl	local09, #9
0c204     2C 00 00 FF 
0c208     CC E4 05 F1 | 	add	objptr, ##22732
0c20c     F2 2E 02 F1 | 	add	local09, objptr
0c210     0C 4E 85 F1 | 	sub	fp, #12
0c214     A7 2C 02 FB | 	rdlong	local08, fp
0c218     14 4E 85 F1 | 	sub	fp, #20
0c21c     01 2C 66 F0 | 	shl	local08, #1
0c220     17 2D 02 F1 | 	add	local08, local09
0c224     16 15 E2 FA | 	rdword	arg02, local08
0c228     00 12 06 F6 | 	mov	arg01, #0
0c22c     00 16 06 F6 | 	mov	arg03, #0
0c230     0A 18 06 F6 | 	mov	arg04, #10
0c234     2C 00 00 FF 
0c238     CC E4 85 F1 | 	sub	objptr, ##22732
0c23c     24 0E B1 FD | 	call	#__system___basic_print_unsigned
0c240     00 12 06 F6 | 	mov	arg01, #0
0c244     09 14 06 F6 | 	mov	arg02, #9
0c248     00 16 06 F6 | 	mov	arg03, #0
0c24c     38 0D B1 FD | 	call	#__system___basic_print_char
0c250     00 12 06 F6 | 	mov	arg01, #0
0c254     14 5A B1 FD | 	call	#__system___getiolock_0474
0c258     FD 00 68 FC | 	wrlong	#0, result1
0c25c     14 4E 05 F1 | 	add	fp, #20
0c260     A7 2E 02 FB | 	rdlong	local09, fp
0c264     01 2E 06 F1 | 	add	local09, #1
0c268     A7 2E 62 FC | 	wrlong	local09, fp
0c26c     14 4E 85 F1 | 	sub	fp, #20
0c270     00 2F 56 F2 | 	cmps	local09, #256 wc
0c274     70 FF 9F CD |  if_b	jmp	#LR__0969
0c278                 | LR__0970
0c278                 | LR__0971
0c278     A7 F0 03 F6 | 	mov	ptra, fp
0c27c     B2 00 A0 FD | 	call	#popregs_
0c280                 | _do_defenv_ret
0c280     2D 00 64 FD | 	ret
0c284                 | 
0c284                 | ' 
0c284                 | ' 
0c284                 | ' sub do_play
0c284                 | _do_play
0c284     05 4A 05 F6 | 	mov	COUNT_, #5
0c288     A8 00 A0 FD | 	call	#pushregs_
0c28c     74 F0 07 F1 | 	add	ptra, #116
0c290     60 4E 05 F1 | 	add	fp, #96
0c294     F5 25 A2 FF 
0c298     A7 AA 68 FC | 	wrlong	##1145825877, fp
0c29c                 | ' speed_coeff=815.6614449376854599406528189911
0c29c                 | ' 
0c29c                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0c29c     5C 4E 85 F1 | 	sub	fp, #92
0c2a0     A7 00 68 FC | 	wrlong	#0, fp
0c2a4     97 18 48 FB | 	callpa	#(@LR__0981-@LR__0980)>>2,fcache_load_ptr_
0c2a8                 | LR__0980
0c2a8     A7 18 02 FB | 	rdlong	arg04, fp
0c2ac     02 18 66 F0 | 	shl	arg04, #2
0c2b0     2C 4E 05 F1 | 	add	fp, #44
0c2b4     A7 18 02 F1 | 	add	arg04, fp
0c2b8     00 00 E0 FF 
0c2bc     0C 01 68 FC | 	wrlong	##-1073741824, arg04
0c2c0     2C 4E 85 F1 | 	sub	fp, #44
0c2c4     A7 1E 02 FB | 	rdlong	local01, fp
0c2c8     01 1E 06 F1 | 	add	local01, #1
0c2cc     A7 1E 62 FC | 	wrlong	local01, fp
0c2d0     09 1E 56 F2 | 	cmps	local01, #9 wc
0c2d4     D0 FF 9F CD |  if_b	jmp	#LR__0980
0c2d8                 | LR__0981
0c2d8     04 4E 85 F1 | 	sub	fp, #4
0c2dc     6A 00 00 FF 
0c2e0     64 E4 05 F1 | 	add	objptr, ##54372
0c2e4     F2 20 02 FB | 	rdlong	local02, objptr
0c2e8     10 23 02 F6 | 	mov	local03, local02
0c2ec     01 22 66 F0 | 	shl	local03, #1
0c2f0     10 23 02 F1 | 	add	local03, local02
0c2f4     02 22 66 F0 | 	shl	local03, #2
0c2f8     03 00 00 FF 
0c2fc     04 E4 85 F1 | 	sub	objptr, ##1540
0c300     F2 22 02 F1 | 	add	local03, objptr
0c304     11 25 02 FB | 	rdlong	local04, local03
0c308     A7 24 62 FC | 	wrlong	local04, fp
0c30c                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0c30c                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0c30c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c30c                 | ' for i=numpar to 1 step -1 
0c30c     04 4E 05 F1 | 	add	fp, #4
0c310     A7 24 62 FC | 	wrlong	local04, fp
0c314     04 4E 85 F1 | 	sub	fp, #4
0c318     67 00 00 FF 
0c31c     60 E4 85 F1 | 	sub	objptr, ##52832
0c320                 | LR__0982
0c320     A4 DD BF FD | 	call	#_pop
0c324     54 4E 05 F1 | 	add	fp, #84
0c328     A7 FA 61 FC | 	wrlong	result1, fp
0c32c     04 4E 05 F1 | 	add	fp, #4
0c330     A7 FC 61 FC | 	wrlong	result2, fp
0c334     04 4E 05 F1 | 	add	fp, #4
0c338     A7 FE 61 FC | 	wrlong	result3, fp
0c33c     58 4E 85 F1 | 	sub	fp, #88
0c340     A7 22 02 FB | 	rdlong	local03, fp
0c344     01 22 86 F1 | 	sub	local03, #1
0c348     02 22 66 F0 | 	shl	local03, #2
0c34c     2C 4E 05 F1 | 	add	fp, #44
0c350     A7 22 02 F1 | 	add	local03, fp
0c354     24 4E 05 F1 | 	add	fp, #36
0c358     A7 26 02 F6 | 	mov	local05, fp
0c35c     13 13 02 F6 | 	mov	arg01, local05
0c360     54 4E 85 F1 | 	sub	fp, #84
0c364     60 67 B0 FD | 	call	#_converttofloat
0c368     11 FB 61 FC | 	wrlong	result1, local03
0c36c     04 4E 05 F1 | 	add	fp, #4
0c370     A7 1E 02 FB | 	rdlong	local01, fp
0c374     01 1E 86 F1 | 	sub	local01, #1
0c378     A7 1E 62 FC | 	wrlong	local01, fp
0c37c     04 4E 85 F1 | 	sub	fp, #4
0c380     01 1E 56 F2 | 	cmps	local01, #1 wc
0c384     98 FF 9F 3D |  if_ae	jmp	#LR__0982
0c388                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0c388     30 4E 05 F1 | 	add	fp, #48
0c38c     A7 12 02 FB | 	rdlong	arg01, fp
0c390     30 4E 85 F1 | 	sub	fp, #48
0c394     00 14 06 F6 | 	mov	arg02, #0
0c398     01 16 06 F6 | 	mov	arg03, #1
0c39c     EC 2E B1 FD | 	call	#__system___float_cmp
0c3a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0c3a4     0C 4E 05 C1 |  if_b	add	fp, #12
0c3a8     A7 00 68 CC |  if_b	wrlong	#0, fp
0c3ac     0C 4E 85 C1 |  if_b	sub	fp, #12
0c3b0     20 00 90 CD |  if_b	jmp	#LR__0983
0c3b4     30 4E 05 F1 | 	add	fp, #48
0c3b8     A7 12 02 FB | 	rdlong	arg01, fp
0c3bc     30 4E 85 F1 | 	sub	fp, #48
0c3c0     01 14 06 F6 | 	mov	arg02, #1
0c3c4     58 2F B1 FD | 	call	#__system___float_tointeger
0c3c8     0C 4E 05 F1 | 	add	fp, #12
0c3cc     A7 FA 61 FC | 	wrlong	result1, fp
0c3d0     0C 4E 85 F1 | 	sub	fp, #12
0c3d4                 | LR__0983
0c3d4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0c3d4     34 4E 05 F1 | 	add	fp, #52
0c3d8     A7 12 02 FB | 	rdlong	arg01, fp
0c3dc     34 4E 85 F1 | 	sub	fp, #52
0c3e0     00 14 06 F6 | 	mov	arg02, #0
0c3e4     01 16 06 F6 | 	mov	arg03, #1
0c3e8     A0 2E B1 FD | 	call	#__system___float_cmp
0c3ec     00 FA 55 F2 | 	cmps	result1, #0 wc
0c3f0     40 00 90 3D |  if_ae	jmp	#LR__0984
0c3f4     0C 4E 05 F1 | 	add	fp, #12
0c3f8     A7 20 02 FB | 	rdlong	local02, fp
0c3fc     10 23 02 F6 | 	mov	local03, local02
0c400     01 22 66 F0 | 	shl	local03, #1
0c404     10 23 02 F1 | 	add	local03, local02
0c408     03 22 66 F0 | 	shl	local03, #3
0c40c     34 00 00 FF 
0c410     2C E5 05 F1 | 	add	objptr, ##26924
0c414     F2 22 02 F1 | 	add	local03, objptr
0c418     11 23 02 FB | 	rdlong	local03, local03
0c41c     58 4E 05 F1 | 	add	fp, #88
0c420     A7 22 62 FC | 	wrlong	local03, fp
0c424     64 4E 85 F1 | 	sub	fp, #100
0c428     34 00 00 FF 
0c42c     2C E5 85 F1 | 	sub	objptr, ##26924
0c430     44 00 90 FD | 	jmp	#LR__0985
0c434                 | LR__0984
0c434     34 4E 05 F1 | 	add	fp, #52
0c438     A7 24 02 FB | 	rdlong	local04, fp
0c43c     30 4E 05 F1 | 	add	fp, #48
0c440     A7 24 62 FC | 	wrlong	local04, fp
0c444     58 4E 85 F1 | 	sub	fp, #88
0c448     A7 20 02 FB | 	rdlong	local02, fp
0c44c     10 23 02 F6 | 	mov	local03, local02
0c450     01 22 66 F0 | 	shl	local03, #1
0c454     10 23 02 F1 | 	add	local03, local02
0c458     03 22 66 F0 | 	shl	local03, #3
0c45c     34 00 00 FF 
0c460     2C E5 05 F1 | 	add	objptr, ##26924
0c464     F2 22 02 F1 | 	add	local03, objptr
0c468     0C 4E 85 F1 | 	sub	fp, #12
0c46c     11 25 62 FC | 	wrlong	local04, local03
0c470     34 00 00 FF 
0c474     2C E5 85 F1 | 	sub	objptr, ##26924
0c478                 | LR__0985
0c478                 | ' if params(2)<0 orelse params(2)>16.384 then vol=channels(channel).vol else vol=params(2) : channels(channel).vol=vol
0c478     38 4E 05 F1 | 	add	fp, #56
0c47c     A7 12 02 FB | 	rdlong	arg01, fp
0c480     38 4E 85 F1 | 	sub	fp, #56
0c484     00 14 06 F6 | 	mov	arg02, #0
0c488     01 16 06 F6 | 	mov	arg03, #1
0c48c     FC 2D B1 FD | 	call	#__system___float_cmp
0c490     00 FA 55 F2 | 	cmps	result1, #0 wc
0c494     24 00 90 CD |  if_b	jmp	#LR__0986
0c498     38 4E 05 F1 | 	add	fp, #56
0c49c     A7 12 02 FB | 	rdlong	arg01, fp
0c4a0     38 4E 85 F1 | 	sub	fp, #56
0c4a4     89 C1 20 FF 
0c4a8     6F 14 06 F6 | 	mov	arg02, ##1099108975
0c4ac     01 16 66 F6 | 	neg	arg03, #1
0c4b0     D8 2D B1 FD | 	call	#__system___float_cmp
0c4b4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c4b8     44 00 90 CD |  if_b	jmp	#LR__0987
0c4bc                 | LR__0986
0c4bc     0C 4E 05 F1 | 	add	fp, #12
0c4c0     A7 20 02 FB | 	rdlong	local02, fp
0c4c4     10 23 02 F6 | 	mov	local03, local02
0c4c8     01 22 66 F0 | 	shl	local03, #1
0c4cc     10 23 02 F1 | 	add	local03, local02
0c4d0     03 22 66 F0 | 	shl	local03, #3
0c4d4     34 00 00 FF 
0c4d8     2C E5 05 F1 | 	add	objptr, ##26924
0c4dc     F2 22 02 F1 | 	add	local03, objptr
0c4e0     0C 22 06 F1 | 	add	local03, #12
0c4e4     11 23 02 FB | 	rdlong	local03, local03
0c4e8     60 4E 05 F1 | 	add	fp, #96
0c4ec     A7 22 62 FC | 	wrlong	local03, fp
0c4f0     6C 4E 85 F1 | 	sub	fp, #108
0c4f4     34 00 00 FF 
0c4f8     2C E5 85 F1 | 	sub	objptr, ##26924
0c4fc     48 00 90 FD | 	jmp	#LR__0988
0c500                 | LR__0987
0c500     38 4E 05 F1 | 	add	fp, #56
0c504     A7 24 02 FB | 	rdlong	local04, fp
0c508     34 4E 05 F1 | 	add	fp, #52
0c50c     A7 24 62 FC | 	wrlong	local04, fp
0c510     60 4E 85 F1 | 	sub	fp, #96
0c514     A7 20 02 FB | 	rdlong	local02, fp
0c518     10 23 02 F6 | 	mov	local03, local02
0c51c     01 22 66 F0 | 	shl	local03, #1
0c520     10 23 02 F1 | 	add	local03, local02
0c524     03 22 66 F0 | 	shl	local03, #3
0c528     34 00 00 FF 
0c52c     2C E5 05 F1 | 	add	objptr, ##26924
0c530     F2 22 02 F1 | 	add	local03, objptr
0c534     0C 4E 85 F1 | 	sub	fp, #12
0c538     0C 22 06 F1 | 	add	local03, #12
0c53c     11 25 62 FC | 	wrlong	local04, local03
0c540     34 00 00 FF 
0c544     2C E5 85 F1 | 	sub	objptr, ##26924
0c548                 | LR__0988
0c548                 | ' if params(3)<0 orelse params(3)>8.0 then wave=channels(channel).wave else wave=round(params(3)) : channels(channel).wave=wave
0c548     3C 4E 05 F1 | 	add	fp, #60
0c54c     A7 12 02 FB | 	rdlong	arg01, fp
0c550     3C 4E 85 F1 | 	sub	fp, #60
0c554     00 14 06 F6 | 	mov	arg02, #0
0c558     01 16 06 F6 | 	mov	arg03, #1
0c55c     2C 2D B1 FD | 	call	#__system___float_cmp
0c560     00 FA 55 F2 | 	cmps	result1, #0 wc
0c564     24 00 90 CD |  if_b	jmp	#LR__0989
0c568     3C 4E 05 F1 | 	add	fp, #60
0c56c     A7 12 02 FB | 	rdlong	arg01, fp
0c570     3C 4E 85 F1 | 	sub	fp, #60
0c574     00 80 20 FF 
0c578     00 14 06 F6 | 	mov	arg02, ##1090519040
0c57c     01 16 66 F6 | 	neg	arg03, #1
0c580     08 2D B1 FD | 	call	#__system___float_cmp
0c584     01 FA 55 F2 | 	cmps	result1, #1 wc
0c588     48 00 90 CD |  if_b	jmp	#LR__0990
0c58c                 | LR__0989
0c58c     0C 4E 05 F1 | 	add	fp, #12
0c590     A7 22 02 FB | 	rdlong	local03, fp
0c594     11 27 02 F6 | 	mov	local05, local03
0c598     01 26 66 F0 | 	shl	local05, #1
0c59c     11 27 02 F1 | 	add	local05, local03
0c5a0     03 26 66 F0 | 	shl	local05, #3
0c5a4     34 00 00 FF 
0c5a8     2C E5 05 F1 | 	add	objptr, ##26924
0c5ac     F2 26 02 F1 | 	add	local05, objptr
0c5b0     04 26 06 F1 | 	add	local05, #4
0c5b4     13 27 C2 FA | 	rdbyte	local05, local05
0c5b8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c5bc     14 4E 05 F1 | 	add	fp, #20
0c5c0     A7 24 62 FC | 	wrlong	local04, fp
0c5c4     20 4E 85 F1 | 	sub	fp, #32
0c5c8     34 00 00 FF 
0c5cc     2C E5 85 F1 | 	sub	objptr, ##26924
0c5d0     54 00 90 FD | 	jmp	#LR__0991
0c5d4                 | LR__0990
0c5d4     3C 4E 05 F1 | 	add	fp, #60
0c5d8     A7 12 02 FB | 	rdlong	arg01, fp
0c5dc     3C 4E 85 F1 | 	sub	fp, #60
0c5e0     01 14 06 F6 | 	mov	arg02, #1
0c5e4     38 2D B1 FD | 	call	#__system___float_tointeger
0c5e8     20 4E 05 F1 | 	add	fp, #32
0c5ec     A7 FA 61 FC | 	wrlong	result1, fp
0c5f0     14 4E 85 F1 | 	sub	fp, #20
0c5f4     A7 20 02 FB | 	rdlong	local02, fp
0c5f8     10 23 02 F6 | 	mov	local03, local02
0c5fc     01 22 66 F0 | 	shl	local03, #1
0c600     10 23 02 F1 | 	add	local03, local02
0c604     03 22 66 F0 | 	shl	local03, #3
0c608     34 00 00 FF 
0c60c     2C E5 05 F1 | 	add	objptr, ##26924
0c610     F2 22 02 F1 | 	add	local03, objptr
0c614     0C 4E 85 F1 | 	sub	fp, #12
0c618     04 22 06 F1 | 	add	local03, #4
0c61c     11 FB 41 FC | 	wrbyte	result1, local03
0c620     34 00 00 FF 
0c624     2C E5 85 F1 | 	sub	objptr, ##26924
0c628                 | LR__0991
0c628                 | ' if params(4)<0 orelse params(4)>8.0 then env=channels(channel).env else env=round(params(4)) : channels(channel).env=env
0c628     40 4E 05 F1 | 	add	fp, #64
0c62c     A7 12 02 FB | 	rdlong	arg01, fp
0c630     40 4E 85 F1 | 	sub	fp, #64
0c634     00 14 06 F6 | 	mov	arg02, #0
0c638     01 16 06 F6 | 	mov	arg03, #1
0c63c     4C 2C B1 FD | 	call	#__system___float_cmp
0c640     00 FA 55 F2 | 	cmps	result1, #0 wc
0c644     24 00 90 CD |  if_b	jmp	#LR__0992
0c648     40 4E 05 F1 | 	add	fp, #64
0c64c     A7 12 02 FB | 	rdlong	arg01, fp
0c650     40 4E 85 F1 | 	sub	fp, #64
0c654     00 80 20 FF 
0c658     00 14 06 F6 | 	mov	arg02, ##1090519040
0c65c     01 16 66 F6 | 	neg	arg03, #1
0c660     28 2C B1 FD | 	call	#__system___float_cmp
0c664     01 FA 55 F2 | 	cmps	result1, #1 wc
0c668     48 00 90 CD |  if_b	jmp	#LR__0993
0c66c                 | LR__0992
0c66c     0C 4E 05 F1 | 	add	fp, #12
0c670     A7 22 02 FB | 	rdlong	local03, fp
0c674     11 27 02 F6 | 	mov	local05, local03
0c678     01 26 66 F0 | 	shl	local05, #1
0c67c     11 27 02 F1 | 	add	local05, local03
0c680     03 26 66 F0 | 	shl	local05, #3
0c684     34 00 00 FF 
0c688     2C E5 05 F1 | 	add	objptr, ##26924
0c68c     F2 26 02 F1 | 	add	local05, objptr
0c690     05 26 06 F1 | 	add	local05, #5
0c694     13 27 C2 FA | 	rdbyte	local05, local05
0c698     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c69c     18 4E 05 F1 | 	add	fp, #24
0c6a0     A7 24 62 FC | 	wrlong	local04, fp
0c6a4     24 4E 85 F1 | 	sub	fp, #36
0c6a8     34 00 00 FF 
0c6ac     2C E5 85 F1 | 	sub	objptr, ##26924
0c6b0     54 00 90 FD | 	jmp	#LR__0994
0c6b4                 | LR__0993
0c6b4     40 4E 05 F1 | 	add	fp, #64
0c6b8     A7 12 02 FB | 	rdlong	arg01, fp
0c6bc     40 4E 85 F1 | 	sub	fp, #64
0c6c0     01 14 06 F6 | 	mov	arg02, #1
0c6c4     58 2C B1 FD | 	call	#__system___float_tointeger
0c6c8     24 4E 05 F1 | 	add	fp, #36
0c6cc     A7 FA 61 FC | 	wrlong	result1, fp
0c6d0     18 4E 85 F1 | 	sub	fp, #24
0c6d4     A7 20 02 FB | 	rdlong	local02, fp
0c6d8     10 23 02 F6 | 	mov	local03, local02
0c6dc     01 22 66 F0 | 	shl	local03, #1
0c6e0     10 23 02 F1 | 	add	local03, local02
0c6e4     03 22 66 F0 | 	shl	local03, #3
0c6e8     34 00 00 FF 
0c6ec     2C E5 05 F1 | 	add	objptr, ##26924
0c6f0     F2 22 02 F1 | 	add	local03, objptr
0c6f4     0C 4E 85 F1 | 	sub	fp, #12
0c6f8     05 22 06 F1 | 	add	local03, #5
0c6fc     11 FB 41 FC | 	wrbyte	result1, local03
0c700     34 00 00 FF 
0c704     2C E5 85 F1 | 	sub	objptr, ##26924
0c708                 | LR__0994
0c708                 | ' if params(5)<0 orelse params(5)>1000.0 then slen=channels(channel).length else slen=params(5) : channels(channel).length=slen
0c708     44 4E 05 F1 | 	add	fp, #68
0c70c     A7 12 02 FB | 	rdlong	arg01, fp
0c710     44 4E 85 F1 | 	sub	fp, #68
0c714     00 14 06 F6 | 	mov	arg02, #0
0c718     01 16 06 F6 | 	mov	arg03, #1
0c71c     6C 2B B1 FD | 	call	#__system___float_cmp
0c720     00 FA 55 F2 | 	cmps	result1, #0 wc
0c724     24 00 90 CD |  if_b	jmp	#LR__0995
0c728     44 4E 05 F1 | 	add	fp, #68
0c72c     A7 12 02 FB | 	rdlong	arg01, fp
0c730     44 4E 85 F1 | 	sub	fp, #68
0c734     00 3D 22 FF 
0c738     00 14 06 F6 | 	mov	arg02, ##1148846080
0c73c     01 16 66 F6 | 	neg	arg03, #1
0c740     48 2B B1 FD | 	call	#__system___float_cmp
0c744     01 FA 55 F2 | 	cmps	result1, #1 wc
0c748     44 00 90 CD |  if_b	jmp	#LR__0996
0c74c                 | LR__0995
0c74c     0C 4E 05 F1 | 	add	fp, #12
0c750     A7 20 02 FB | 	rdlong	local02, fp
0c754     10 23 02 F6 | 	mov	local03, local02
0c758     01 22 66 F0 | 	shl	local03, #1
0c75c     10 23 02 F1 | 	add	local03, local02
0c760     03 22 66 F0 | 	shl	local03, #3
0c764     34 00 00 FF 
0c768     2C E5 05 F1 | 	add	objptr, ##26924
0c76c     F2 22 02 F1 | 	add	local03, objptr
0c770     08 22 06 F1 | 	add	local03, #8
0c774     11 25 02 FB | 	rdlong	local04, local03
0c778     64 4E 05 F1 | 	add	fp, #100
0c77c     A7 24 62 FC | 	wrlong	local04, fp
0c780     70 4E 85 F1 | 	sub	fp, #112
0c784     34 00 00 FF 
0c788     2C E5 85 F1 | 	sub	objptr, ##26924
0c78c     48 00 90 FD | 	jmp	#LR__0997
0c790                 | LR__0996
0c790     44 4E 05 F1 | 	add	fp, #68
0c794     A7 24 02 FB | 	rdlong	local04, fp
0c798     2C 4E 05 F1 | 	add	fp, #44
0c79c     A7 24 62 FC | 	wrlong	local04, fp
0c7a0     64 4E 85 F1 | 	sub	fp, #100
0c7a4     A7 20 02 FB | 	rdlong	local02, fp
0c7a8     10 23 02 F6 | 	mov	local03, local02
0c7ac     01 22 66 F0 | 	shl	local03, #1
0c7b0     10 23 02 F1 | 	add	local03, local02
0c7b4     03 22 66 F0 | 	shl	local03, #3
0c7b8     34 00 00 FF 
0c7bc     2C E5 05 F1 | 	add	objptr, ##26924
0c7c0     F2 22 02 F1 | 	add	local03, objptr
0c7c4     0C 4E 85 F1 | 	sub	fp, #12
0c7c8     08 22 06 F1 | 	add	local03, #8
0c7cc     11 25 62 FC | 	wrlong	local04, local03
0c7d0     34 00 00 FF 
0c7d4     2C E5 85 F1 | 	sub	objptr, ##26924
0c7d8                 | LR__0997
0c7d8                 | ' if params(6)<0 orelse params(6)>10000.0 then delay=channels(channel).delay else delay=round(params(6)) : channels(channel).delay=delay
0c7d8     48 4E 05 F1 | 	add	fp, #72
0c7dc     A7 12 02 FB | 	rdlong	arg01, fp
0c7e0     48 4E 85 F1 | 	sub	fp, #72
0c7e4     00 14 06 F6 | 	mov	arg02, #0
0c7e8     01 16 06 F6 | 	mov	arg03, #1
0c7ec     9C 2A B1 FD | 	call	#__system___float_cmp
0c7f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0c7f4     24 00 90 CD |  if_b	jmp	#LR__0998
0c7f8     48 4E 05 F1 | 	add	fp, #72
0c7fc     A7 12 02 FB | 	rdlong	arg01, fp
0c800     48 4E 85 F1 | 	sub	fp, #72
0c804     20 0E 23 FF 
0c808     00 14 06 F6 | 	mov	arg02, ##1176256512
0c80c     01 16 66 F6 | 	neg	arg03, #1
0c810     78 2A B1 FD | 	call	#__system___float_cmp
0c814     01 FA 55 F2 | 	cmps	result1, #1 wc
0c818     48 00 90 CD |  if_b	jmp	#LR__0999
0c81c                 | LR__0998
0c81c     0C 4E 05 F1 | 	add	fp, #12
0c820     A7 22 02 FB | 	rdlong	local03, fp
0c824     11 27 02 F6 | 	mov	local05, local03
0c828     01 26 66 F0 | 	shl	local05, #1
0c82c     11 27 02 F1 | 	add	local05, local03
0c830     03 26 66 F0 | 	shl	local05, #3
0c834     34 00 00 FF 
0c838     2C E5 05 F1 | 	add	objptr, ##26924
0c83c     F2 26 02 F1 | 	add	local05, objptr
0c840     06 26 06 F1 | 	add	local05, #6
0c844     13 27 E2 FA | 	rdword	local05, local05
0c848     13 25 32 F9 | 	getword	local04, local05, #0
0c84c     1C 4E 05 F1 | 	add	fp, #28
0c850     A7 24 62 FC | 	wrlong	local04, fp
0c854     28 4E 85 F1 | 	sub	fp, #40
0c858     34 00 00 FF 
0c85c     2C E5 85 F1 | 	sub	objptr, ##26924
0c860     54 00 90 FD | 	jmp	#LR__1000
0c864                 | LR__0999
0c864     48 4E 05 F1 | 	add	fp, #72
0c868     A7 12 02 FB | 	rdlong	arg01, fp
0c86c     48 4E 85 F1 | 	sub	fp, #72
0c870     01 14 06 F6 | 	mov	arg02, #1
0c874     A8 2A B1 FD | 	call	#__system___float_tointeger
0c878     28 4E 05 F1 | 	add	fp, #40
0c87c     A7 FA 61 FC | 	wrlong	result1, fp
0c880     1C 4E 85 F1 | 	sub	fp, #28
0c884     A7 20 02 FB | 	rdlong	local02, fp
0c888     10 23 02 F6 | 	mov	local03, local02
0c88c     01 22 66 F0 | 	shl	local03, #1
0c890     10 23 02 F1 | 	add	local03, local02
0c894     03 22 66 F0 | 	shl	local03, #3
0c898     34 00 00 FF 
0c89c     2C E5 05 F1 | 	add	objptr, ##26924
0c8a0     F2 22 02 F1 | 	add	local03, objptr
0c8a4     0C 4E 85 F1 | 	sub	fp, #12
0c8a8     06 22 06 F1 | 	add	local03, #6
0c8ac     11 FB 51 FC | 	wrword	result1, local03
0c8b0     34 00 00 FF 
0c8b4     2C E5 85 F1 | 	sub	objptr, ##26924
0c8b8                 | LR__1000
0c8b8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0c8b8     4C 4E 05 F1 | 	add	fp, #76
0c8bc     A7 12 02 FB | 	rdlong	arg01, fp
0c8c0     4C 4E 85 F1 | 	sub	fp, #76
0c8c4     00 C0 5F FF 
0c8c8     00 14 06 F6 | 	mov	arg02, ##-1082130432
0c8cc     01 16 06 F6 | 	mov	arg03, #1
0c8d0     B8 29 B1 FD | 	call	#__system___float_cmp
0c8d4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c8d8     24 00 90 CD |  if_b	jmp	#LR__1001
0c8dc     4C 4E 05 F1 | 	add	fp, #76
0c8e0     A7 12 02 FB | 	rdlong	arg01, fp
0c8e4     4C 4E 85 F1 | 	sub	fp, #76
0c8e8     00 C0 1F FF 
0c8ec     00 14 06 F6 | 	mov	arg02, ##1065353216
0c8f0     01 16 66 F6 | 	neg	arg03, #1
0c8f4     94 29 B1 FD | 	call	#__system___float_cmp
0c8f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0c8fc     44 00 90 CD |  if_b	jmp	#LR__1002
0c900                 | LR__1001
0c900     0C 4E 05 F1 | 	add	fp, #12
0c904     A7 20 02 FB | 	rdlong	local02, fp
0c908     10 23 02 F6 | 	mov	local03, local02
0c90c     01 22 66 F0 | 	shl	local03, #1
0c910     10 23 02 F1 | 	add	local03, local02
0c914     03 22 66 F0 | 	shl	local03, #3
0c918     34 00 00 FF 
0c91c     2C E5 05 F1 | 	add	objptr, ##26924
0c920     F2 22 02 F1 | 	add	local03, objptr
0c924     10 22 06 F1 | 	add	local03, #16
0c928     11 27 02 FB | 	rdlong	local05, local03
0c92c     5C 4E 05 F1 | 	add	fp, #92
0c930     A7 26 62 FC | 	wrlong	local05, fp
0c934     68 4E 85 F1 | 	sub	fp, #104
0c938     34 00 00 FF 
0c93c     2C E5 85 F1 | 	sub	objptr, ##26924
0c940     48 00 90 FD | 	jmp	#LR__1003
0c944                 | LR__1002
0c944     4C 4E 05 F1 | 	add	fp, #76
0c948     A7 26 02 FB | 	rdlong	local05, fp
0c94c     1C 4E 05 F1 | 	add	fp, #28
0c950     A7 26 62 FC | 	wrlong	local05, fp
0c954     5C 4E 85 F1 | 	sub	fp, #92
0c958     A7 20 02 FB | 	rdlong	local02, fp
0c95c     10 23 02 F6 | 	mov	local03, local02
0c960     01 22 66 F0 | 	shl	local03, #1
0c964     10 23 02 F1 | 	add	local03, local02
0c968     03 22 66 F0 | 	shl	local03, #3
0c96c     34 00 00 FF 
0c970     2C E5 05 F1 | 	add	objptr, ##26924
0c974     F2 22 02 F1 | 	add	local03, objptr
0c978     0C 4E 85 F1 | 	sub	fp, #12
0c97c     10 22 06 F1 | 	add	local03, #16
0c980     11 27 62 FC | 	wrlong	local05, local03
0c984     34 00 00 FF 
0c988     2C E5 85 F1 | 	sub	objptr, ##26924
0c98c                 | LR__1003
0c98c                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0c98c     50 4E 05 F1 | 	add	fp, #80
0c990     A7 12 02 FB | 	rdlong	arg01, fp
0c994     50 4E 85 F1 | 	sub	fp, #80
0c998     00 14 06 F6 | 	mov	arg02, #0
0c99c     01 16 06 F6 | 	mov	arg03, #1
0c9a0     E8 28 B1 FD | 	call	#__system___float_cmp
0c9a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0c9a8     24 00 90 CD |  if_b	jmp	#LR__1004
0c9ac     50 4E 05 F1 | 	add	fp, #80
0c9b0     A7 12 02 FB | 	rdlong	arg01, fp
0c9b4     50 4E 85 F1 | 	sub	fp, #80
0c9b8     80 BF 21 FF 
0c9bc     00 14 06 F6 | 	mov	arg02, ##1132396544
0c9c0     01 16 66 F6 | 	neg	arg03, #1
0c9c4     C4 28 B1 FD | 	call	#__system___float_cmp
0c9c8     01 FA 55 F2 | 	cmps	result1, #1 wc
0c9cc     44 00 90 CD |  if_b	jmp	#LR__1005
0c9d0                 | LR__1004
0c9d0     0C 4E 05 F1 | 	add	fp, #12
0c9d4     A7 22 02 FB | 	rdlong	local03, fp
0c9d8     11 27 02 F6 | 	mov	local05, local03
0c9dc     01 26 66 F0 | 	shl	local05, #1
0c9e0     11 27 02 F1 | 	add	local05, local03
0c9e4     03 26 66 F0 | 	shl	local05, #3
0c9e8     34 00 00 FF 
0c9ec     2C E5 05 F1 | 	add	objptr, ##26924
0c9f0     F2 26 02 F1 | 	add	local05, objptr
0c9f4     14 26 06 F1 | 	add	local05, #20
0c9f8     13 25 E2 FA | 	rdword	local04, local05
0c9fc     20 4E 05 F1 | 	add	fp, #32
0ca00     A7 24 62 FC | 	wrlong	local04, fp
0ca04     2C 4E 85 F1 | 	sub	fp, #44
0ca08     34 00 00 FF 
0ca0c     2C E5 85 F1 | 	sub	objptr, ##26924
0ca10     54 00 90 FD | 	jmp	#LR__1006
0ca14                 | LR__1005
0ca14     50 4E 05 F1 | 	add	fp, #80
0ca18     A7 12 02 FB | 	rdlong	arg01, fp
0ca1c     50 4E 85 F1 | 	sub	fp, #80
0ca20     01 14 06 F6 | 	mov	arg02, #1
0ca24     F8 28 B1 FD | 	call	#__system___float_tointeger
0ca28     2C 4E 05 F1 | 	add	fp, #44
0ca2c     A7 FA 61 FC | 	wrlong	result1, fp
0ca30     20 4E 85 F1 | 	sub	fp, #32
0ca34     A7 20 02 FB | 	rdlong	local02, fp
0ca38     10 23 02 F6 | 	mov	local03, local02
0ca3c     01 22 66 F0 | 	shl	local03, #1
0ca40     10 23 02 F1 | 	add	local03, local02
0ca44     03 22 66 F0 | 	shl	local03, #3
0ca48     34 00 00 FF 
0ca4c     2C E5 05 F1 | 	add	objptr, ##26924
0ca50     F2 22 02 F1 | 	add	local03, objptr
0ca54     0C 4E 85 F1 | 	sub	fp, #12
0ca58     14 22 06 F1 | 	add	local03, #20
0ca5c     11 FB 51 FC | 	wrword	result1, local03
0ca60     34 00 00 FF 
0ca64     2C E5 85 F1 | 	sub	objptr, ##26924
0ca68                 | LR__1006
0ca68     60 4E 05 F1 | 	add	fp, #96
0ca6c     A7 12 02 FB | 	rdlong	arg01, fp
0ca70     10 4E 05 F1 | 	add	fp, #16
0ca74     A7 14 02 FB | 	rdlong	arg02, fp
0ca78     70 4E 85 F1 | 	sub	fp, #112
0ca7c     DC 25 B1 FD | 	call	#__system___float_div
0ca80     FD 12 02 F6 | 	mov	arg01, result1
0ca84     01 14 06 F6 | 	mov	arg02, #1
0ca88     94 28 B1 FD | 	call	#__system___float_tointeger
0ca8c     FD 24 02 F6 | 	mov	local04, result1
0ca90     14 4E 05 F1 | 	add	fp, #20
0ca94     A7 24 62 FC | 	wrlong	local04, fp
0ca98     54 4E 05 F1 | 	add	fp, #84
0ca9c     A7 14 02 FB | 	rdlong	arg02, fp
0caa0     68 4E 85 F1 | 	sub	fp, #104
0caa4     00 00 23 FF 
0caa8     00 12 06 F6 | 	mov	arg01, ##1174405120
0caac     A8 23 B1 FD | 	call	#__system___float_mul
0cab0     FD 12 02 F6 | 	mov	arg01, result1
0cab4     01 14 06 F6 | 	mov	arg02, #1
0cab8     64 28 B1 FD | 	call	#__system___float_tointeger
0cabc     0D 24 C6 F9 | 	decod	local04, #13
0cac0     FD 24 02 F1 | 	add	local04, result1
0cac4     18 4E 05 F1 | 	add	fp, #24
0cac8     A7 24 62 FC | 	wrlong	local04, fp
0cacc     54 4E 05 F1 | 	add	fp, #84
0cad0     A7 14 02 FB | 	rdlong	arg02, fp
0cad4     6C 4E 85 F1 | 	sub	fp, #108
0cad8     00 3D 22 FF 
0cadc     00 12 06 F6 | 	mov	arg01, ##1148846080
0cae0     74 23 B1 FD | 	call	#__system___float_mul
0cae4     FD 12 02 F6 | 	mov	arg01, result1
0cae8     01 14 06 F6 | 	mov	arg02, #1
0caec     30 28 B1 FD | 	call	#__system___float_tointeger
0caf0     1C 4E 05 F1 | 	add	fp, #28
0caf4     A7 FA 61 FC | 	wrlong	result1, fp
0caf8     56 00 00 FF 
0cafc     F4 E5 05 F1 | 	add	objptr, ##44532
0cb00     F2 24 02 FB | 	rdlong	local04, objptr
0cb04     56 00 00 FF 
0cb08     F4 E5 85 F1 | 	sub	objptr, ##44532
0cb0c     10 4E 85 F1 | 	sub	fp, #16
0cb10     A7 20 02 FB | 	rdlong	local02, fp
0cb14     06 20 66 F0 | 	shl	local02, #6
0cb18     10 25 02 F1 | 	add	local04, local02
0cb1c     04 4E 85 F1 | 	sub	fp, #4
0cb20     A7 24 62 FC | 	wrlong	local04, fp
0cb24     5C 4E 05 F1 | 	add	fp, #92
0cb28     A7 12 02 FB | 	rdlong	arg01, fp
0cb2c     64 4E 85 F1 | 	sub	fp, #100
0cb30     72 3F 20 FF 
0cb34     EA 14 06 F6 | 	mov	arg02, ##1082057962
0cb38     1C 23 B1 FD | 	call	#__system___float_mul
0cb3c     FD 12 02 F6 | 	mov	arg01, result1
0cb40     01 14 06 F6 | 	mov	arg02, #1
0cb44     D8 27 B1 FD | 	call	#__system___float_tointeger
0cb48     10 4E 05 F1 | 	add	fp, #16
0cb4c     A7 FA 61 FC | 	wrlong	result1, fp
0cb50                 | ' 
0cb50                 | ' speed=round(speed_coeff/slen)
0cb50                 | ' ipan=8192+round(8192*pan)
0cb50                 | ' ivol=round(1000.0*vol)
0cb50                 | ' base2=base+64*channel
0cb50                 | ' skip=round(freq*3.9827219) 
0cb50                 | ' if wave <8 then 
0cb50     10 4E 05 F1 | 	add	fp, #16
0cb54     A7 24 02 FB | 	rdlong	local04, fp
0cb58     20 4E 85 F1 | 	sub	fp, #32
0cb5c     08 24 56 F2 | 	cmps	local04, #8 wc
0cb60     40 00 90 3D |  if_ae	jmp	#LR__1007
0cb64     08 4E 05 F1 | 	add	fp, #8
0cb68     A7 12 02 FB | 	rdlong	arg01, fp
0cb6c     08 12 06 F1 | 	add	arg01, #8
0cb70     18 4E 05 F1 | 	add	fp, #24
0cb74     A7 14 02 FB | 	rdlong	arg02, fp
0cb78     20 4E 85 F1 | 	sub	fp, #32
0cb7c     0B 14 66 F0 | 	shl	arg02, #11
0cb80     0C 00 00 FF 
0cb84     CC E4 05 F1 | 	add	objptr, ##6348
0cb88     F2 14 02 F1 | 	add	arg02, objptr
0cb8c     0C 00 00 FF 
0cb90     CC E4 85 F1 | 	sub	objptr, ##6348
0cb94     00 00 60 FF 
0cb98     00 14 06 F1 | 	add	arg02, ##-1073741824
0cb9c     09 15 62 FC | 	wrlong	arg02, arg01
0cba0     18 00 90 FD | 	jmp	#LR__1008
0cba4                 | LR__1007
0cba4     08 4E 05 F1 | 	add	fp, #8
0cba8     A7 12 02 FB | 	rdlong	arg01, fp
0cbac     08 4E 85 F1 | 	sub	fp, #8
0cbb0     08 12 06 F1 | 	add	arg01, #8
0cbb4     00 00 E4 FF 
0cbb8     09 01 68 FC | 	wrlong	##-939524096, arg01
0cbbc                 | LR__1008
0cbbc     08 4E 05 F1 | 	add	fp, #8
0cbc0     A7 12 02 FB | 	rdlong	arg01, fp
0cbc4     10 12 06 F1 | 	add	arg01, #16
0cbc8     04 00 80 FF 
0cbcc     09 01 68 FC | 	wrlong	##2048, arg01
0cbd0     A7 12 02 FB | 	rdlong	arg01, fp
0cbd4     0C 12 06 F1 | 	add	arg01, #12
0cbd8     09 01 68 FC | 	wrlong	#0, arg01
0cbdc     A7 12 02 FB | 	rdlong	arg01, fp
0cbe0     14 12 06 F1 | 	add	arg01, #20
0cbe4     14 4E 05 F1 | 	add	fp, #20
0cbe8     A7 14 02 FB | 	rdlong	arg02, fp
0cbec     09 15 52 FC | 	wrword	arg02, arg01
0cbf0     14 4E 85 F1 | 	sub	fp, #20
0cbf4     A7 12 02 FB | 	rdlong	arg01, fp
0cbf8     16 12 06 F1 | 	add	arg01, #22
0cbfc     10 4E 05 F1 | 	add	fp, #16
0cc00     A7 14 02 FB | 	rdlong	arg02, fp
0cc04     09 15 52 FC | 	wrword	arg02, arg01
0cc08                 | '   
0cc08                 | ' lpoke base2+16,2048
0cc08                 | ' lpoke base2+12,0
0cc08                 | ' dpoke base2+20,ivol 
0cc08                 | ' dpoke base2+22,ipan 
0cc08                 | ' if wave<8 then
0cc08     08 4E 05 F1 | 	add	fp, #8
0cc0c     A7 24 02 FB | 	rdlong	local04, fp
0cc10     20 4E 85 F1 | 	sub	fp, #32
0cc14     08 24 56 F2 | 	cmps	local04, #8 wc
0cc18     2C 00 90 3D |  if_ae	jmp	#LR__1009
0cc1c     08 4E 05 F1 | 	add	fp, #8
0cc20     A7 12 02 FB | 	rdlong	arg01, fp
0cc24     18 12 06 F1 | 	add	arg01, #24
0cc28     09 29 58 FC | 	wrword	#20, arg01
0cc2c     A7 12 02 FB | 	rdlong	arg01, fp
0cc30     1A 12 06 F1 | 	add	arg01, #26
0cc34     08 4E 05 F1 | 	add	fp, #8
0cc38     A7 14 02 FB | 	rdlong	arg02, fp
0cc3c     10 4E 85 F1 | 	sub	fp, #16
0cc40     09 15 52 FC | 	wrword	arg02, arg01
0cc44     A4 00 90 FD | 	jmp	#LR__1010
0cc48                 | LR__1009
0cc48     08 4E 05 F1 | 	add	fp, #8
0cc4c     A7 24 02 FB | 	rdlong	local04, fp
0cc50     18 24 06 F1 | 	add	local04, #24
0cc54     5C 4E 05 F1 | 	add	fp, #92
0cc58     A7 14 02 FB | 	rdlong	arg02, fp
0cc5c     64 4E 85 F1 | 	sub	fp, #100
0cc60     58 D0 24 FF 
0cc64     B0 13 06 F6 | 	mov	arg01, ##1235268016
0cc68     F0 23 B1 FD | 	call	#__system___float_div
0cc6c     FD 12 02 F6 | 	mov	arg01, result1
0cc70     01 14 06 F6 | 	mov	arg02, #1
0cc74     A8 26 B1 FD | 	call	#__system___float_tointeger
0cc78     12 FB 51 FC | 	wrword	result1, local04
0cc7c                 | '   dpoke base2+24,round(1316406/freq)  : print 1316406/freq
0cc7c     00 12 06 F6 | 	mov	arg01, #0
0cc80     E8 4F B1 FD | 	call	#__system___getiolock_0474
0cc84     FD 12 02 F6 | 	mov	arg01, result1
0cc88     50 F6 B0 FD | 	call	#__system___lockmem
0cc8c     00 20 06 F6 | 	mov	local02, #0
0cc90     64 4E 05 F1 | 	add	fp, #100
0cc94     A7 14 02 FB | 	rdlong	arg02, fp
0cc98     64 4E 85 F1 | 	sub	fp, #100
0cc9c     58 D0 24 FF 
0cca0     B0 13 06 F6 | 	mov	arg01, ##1235268016
0cca4     B4 23 B1 FD | 	call	#__system___float_div
0cca8     FD 14 02 F6 | 	mov	arg02, result1
0ccac     10 13 02 F6 | 	mov	arg01, local02
0ccb0     00 16 06 F6 | 	mov	arg03, #0
0ccb4     23 18 06 F6 | 	mov	arg04, #35
0ccb8     B4 27 B1 FD | 	call	#__system___basic_print_float
0ccbc     00 12 06 F6 | 	mov	arg01, #0
0ccc0     0A 14 06 F6 | 	mov	arg02, #10
0ccc4     00 16 06 F6 | 	mov	arg03, #0
0ccc8     BC 02 B1 FD | 	call	#__system___basic_print_char
0cccc     00 12 06 F6 | 	mov	arg01, #0
0ccd0     98 4F B1 FD | 	call	#__system___getiolock_0474
0ccd4     FD 00 68 FC | 	wrlong	#0, result1
0ccd8     08 4E 05 F1 | 	add	fp, #8
0ccdc     A7 12 02 FB | 	rdlong	arg01, fp
0cce0     08 4E 85 F1 | 	sub	fp, #8
0cce4     1A 12 06 F1 | 	add	arg01, #26
0cce8     09 01 5A FC | 	wrword	#256, arg01
0ccec                 | LR__1010
0ccec     08 4E 05 F1 | 	add	fp, #8
0ccf0     A7 12 02 FB | 	rdlong	arg01, fp
0ccf4     20 12 06 F1 | 	add	arg01, #32
0ccf8     09 01 68 FC | 	wrlong	#0, arg01
0ccfc                 | ' 'dpoke base2+28,$4000_0000
0ccfc                 | ' lpoke base2+32,0 
0ccfc                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0ccfc     1C 4E 05 F1 | 	add	fp, #28
0cd00     A7 24 02 FB | 	rdlong	local04, fp
0cd04     24 4E 85 F1 | 	sub	fp, #36
0cd08     08 24 0E F2 | 	cmp	local04, #8 wz
0cd0c     18 00 90 5D |  if_ne	jmp	#LR__1011
0cd10     08 4E 05 F1 | 	add	fp, #8
0cd14     A7 12 02 FB | 	rdlong	arg01, fp
0cd18     08 4E 85 F1 | 	sub	fp, #8
0cd1c     24 12 06 F1 | 	add	arg01, #36
0cd20     09 01 68 FC | 	wrlong	#0, arg01
0cd24     34 00 90 FD | 	jmp	#LR__1012
0cd28                 | LR__1011
0cd28     08 4E 05 F1 | 	add	fp, #8
0cd2c     A7 12 02 FB | 	rdlong	arg01, fp
0cd30     24 12 06 F1 | 	add	arg01, #36
0cd34     1C 4E 05 F1 | 	add	fp, #28
0cd38     A7 14 02 FB | 	rdlong	arg02, fp
0cd3c     24 4E 85 F1 | 	sub	fp, #36
0cd40     09 14 66 F0 | 	shl	arg02, #9
0cd44     2C 00 00 FF 
0cd48     CC E4 05 F1 | 	add	objptr, ##22732
0cd4c     F2 14 02 F1 | 	add	arg02, objptr
0cd50     2C 00 00 FF 
0cd54     CC E4 85 F1 | 	sub	objptr, ##22732
0cd58     09 15 62 FC | 	wrlong	arg02, arg01
0cd5c                 | LR__1012
0cd5c     08 4E 05 F1 | 	add	fp, #8
0cd60     A7 12 02 FB | 	rdlong	arg01, fp
0cd64     28 12 06 F1 | 	add	arg01, #40
0cd68     0C 4E 05 F1 | 	add	fp, #12
0cd6c     A7 14 02 FB | 	rdlong	arg02, fp
0cd70     09 15 62 FC | 	wrlong	arg02, arg01
0cd74     0C 4E 85 F1 | 	sub	fp, #12
0cd78     A7 12 02 FB | 	rdlong	arg01, fp
0cd7c     2C 12 06 F1 | 	add	arg01, #44
0cd80     24 4E 05 F1 | 	add	fp, #36
0cd84     A7 14 02 FB | 	rdlong	arg02, fp
0cd88     09 15 62 FC | 	wrlong	arg02, arg01
0cd8c                 | ' lpoke base2+40,speed' speed
0cd8c                 | ' lpoke base2+44,sus 'len
0cd8c                 | ' 
0cd8c                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0cd8c     04 4E 85 F1 | 	sub	fp, #4
0cd90     A7 24 02 FB | 	rdlong	local04, fp
0cd94     28 4E 85 F1 | 	sub	fp, #40
0cd98     01 24 56 F2 | 	cmps	local04, #1 wc
0cd9c     28 4E 05 31 |  if_ae	add	fp, #40
0cda0     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0cda4     28 4E 85 31 |  if_ae	sub	fp, #40
0cda8     24 F8 B0 3D |  if_ae	call	#__system___waitms
0cdac     A7 F0 03 F6 | 	mov	ptra, fp
0cdb0     B2 00 A0 FD | 	call	#popregs_
0cdb4                 | _do_play_ret
0cdb4     2D 00 64 FD | 	ret
0cdb8                 | 
0cdb8                 | ' 
0cdb8                 | ' sub do_release
0cdb8                 | _do_release
0cdb8     00 4A 05 F6 | 	mov	COUNT_, #0
0cdbc     A8 00 A0 FD | 	call	#pushregs_
0cdc0     10 F0 07 F1 | 	add	ptra, #16
0cdc4     00 D3 BF FD | 	call	#_pop
0cdc8     FF 14 02 F6 | 	mov	arg02, result3
0cdcc     A7 FA 61 FC | 	wrlong	result1, fp
0cdd0     04 4E 05 F1 | 	add	fp, #4
0cdd4     A7 FC 61 FC | 	wrlong	result2, fp
0cdd8     04 4E 05 F1 | 	add	fp, #4
0cddc     A7 14 62 FC | 	wrlong	arg02, fp
0cde0     08 4E 85 F1 | 	sub	fp, #8
0cde4     A7 12 02 F6 | 	mov	arg01, fp
0cde8     30 5C B0 FD | 	call	#_converttoint
0cdec     0C 4E 05 F1 | 	add	fp, #12
0cdf0     A7 FA 61 FC | 	wrlong	result1, fp
0cdf4                 | ' t1=pop()
0cdf4                 | ' channel=converttoint(t1)
0cdf4                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0cdf4     0C 4E 85 F1 | 	sub	fp, #12
0cdf8     00 FA 55 F2 | 	cmps	result1, #0 wc
0cdfc     44 00 90 CD |  if_b	jmp	#LR__1020
0ce00     0C 4E 05 F1 | 	add	fp, #12
0ce04     A7 14 02 FB | 	rdlong	arg02, fp
0ce08     0C 4E 85 F1 | 	sub	fp, #12
0ce0c     08 14 56 F2 | 	cmps	arg02, #8 wc
0ce10     30 00 90 3D |  if_ae	jmp	#LR__1020
0ce14     56 00 00 FF 
0ce18     F4 E5 05 F1 | 	add	objptr, ##44532
0ce1c     F2 12 02 FB | 	rdlong	arg01, objptr
0ce20     56 00 00 FF 
0ce24     F4 E5 85 F1 | 	sub	objptr, ##44532
0ce28     0C 4E 05 F1 | 	add	fp, #12
0ce2c     A7 14 02 FB | 	rdlong	arg02, fp
0ce30     0C 4E 85 F1 | 	sub	fp, #12
0ce34     06 14 66 F0 | 	shl	arg02, #6
0ce38     0A 13 02 F1 | 	add	arg01, arg02
0ce3c     2C 12 06 F1 | 	add	arg01, #44
0ce40     09 FF 69 FC | 	wrlong	#255, arg01
0ce44                 | LR__1020
0ce44     A7 F0 03 F6 | 	mov	ptra, fp
0ce48     B2 00 A0 FD | 	call	#popregs_
0ce4c                 | _do_release_ret
0ce4c     2D 00 64 FD | 	ret
0ce50                 | 
0ce50                 | ' 
0ce50                 | ' 
0ce50                 | ' sub do_defsnd
0ce50                 | _do_defsnd
0ce50     05 4A 05 F6 | 	mov	COUNT_, #5
0ce54     A8 00 A0 FD | 	call	#pushregs_
0ce58     88 F0 07 F1 | 	add	ptra, #136
0ce5c     6A 00 00 FF 
0ce60     64 E4 05 F1 | 	add	objptr, ##54372
0ce64     F2 1A 02 FB | 	rdlong	arg05, objptr
0ce68     0D 19 02 F6 | 	mov	arg04, arg05
0ce6c     01 18 66 F0 | 	shl	arg04, #1
0ce70     0D 19 02 F1 | 	add	arg04, arg05
0ce74     02 18 66 F0 | 	shl	arg04, #2
0ce78     03 00 00 FF 
0ce7c     04 E4 85 F1 | 	sub	objptr, ##1540
0ce80     F2 18 02 F1 | 	add	arg04, objptr
0ce84     0C 1B 02 FB | 	rdlong	arg05, arg04
0ce88     A7 1A 62 FC | 	wrlong	arg05, fp
0ce8c                 | ' 
0ce8c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce8c                 | ' 
0ce8c                 | ' 
0ce8c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0ce8c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0ce8c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0ce8c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0ce8c                 | ' 
0ce8c                 | ' if numpar<2 then return
0ce8c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ce90     67 00 00 FF 
0ce94     60 E4 85 F1 | 	sub	objptr, ##52832
0ce98     A0 09 90 CD |  if_b	jmp	#LR__1058
0ce9c                 | ' 
0ce9c                 | '   
0ce9c                 | ' if numpar=2 then
0ce9c     A7 1A 02 FB | 	rdlong	arg05, fp
0cea0     02 1A 0E F2 | 	cmp	arg05, #2 wz
0cea4     0C 04 90 5D |  if_ne	jmp	#LR__1041
0cea8     1C D2 BF FD | 	call	#_pop
0ceac     FF 1A 02 F6 | 	mov	arg05, result3
0ceb0     2C 4E 05 F1 | 	add	fp, #44
0ceb4     A7 FA 61 FC | 	wrlong	result1, fp
0ceb8     04 4E 05 F1 | 	add	fp, #4
0cebc     A7 FC 61 FC | 	wrlong	result2, fp
0cec0     04 4E 05 F1 | 	add	fp, #4
0cec4     A7 1A 62 FC | 	wrlong	arg05, fp
0cec8                 | '   t1=pop()
0cec8                 | '   if t1.result_type=result_string2 then 
0cec8     34 4E 85 F1 | 	sub	fp, #52
0cecc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ced0     20 00 90 5D |  if_ne	jmp	#LR__1030
0ced4     2C 4E 05 F1 | 	add	fp, #44
0ced8     A7 12 02 FB | 	rdlong	arg01, fp
0cedc     2C 4E 85 F1 | 	sub	fp, #44
0cee0     88 11 B0 FD | 	call	#_convertstring
0cee4     38 4E 05 F1 | 	add	fp, #56
0cee8     A7 FA 61 FC | 	wrlong	result1, fp
0ceec     38 4E 85 F1 | 	sub	fp, #56
0cef0     58 00 90 FD | 	jmp	#LR__1033
0cef4                 | LR__1030
0cef4     34 4E 05 F1 | 	add	fp, #52
0cef8     A7 1A 02 FB | 	rdlong	arg05, fp
0cefc     34 4E 85 F1 | 	sub	fp, #52
0cf00     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0cf04     18 00 90 5D |  if_ne	jmp	#LR__1031
0cf08     2C 4E 05 F1 | 	add	fp, #44
0cf0c     A7 1A 02 FB | 	rdlong	arg05, fp
0cf10     0C 4E 05 F1 | 	add	fp, #12
0cf14     A7 1A 62 FC | 	wrlong	arg05, fp
0cf18     38 4E 85 F1 | 	sub	fp, #56
0cf1c     2C 00 90 FD | 	jmp	#LR__1032
0cf20                 | LR__1031
0cf20     5F 01 00 FF 
0cf24     BB 1A 06 F6 | 	mov	arg05, ##@LR__4928
0cf28     38 4E 05 F1 | 	add	fp, #56
0cf2c     A7 1A 62 FC | 	wrlong	arg05, fp
0cf30     0C 4E 85 F1 | 	sub	fp, #12
0cf34     A7 12 02 F6 | 	mov	arg01, fp
0cf38     2C 4E 85 F1 | 	sub	fp, #44
0cf3c     DC 5A B0 FD | 	call	#_converttoint
0cf40     14 4E 05 F1 | 	add	fp, #20
0cf44     A7 FA 61 FC | 	wrlong	result1, fp
0cf48     14 4E 85 F1 | 	sub	fp, #20
0cf4c                 | LR__1032
0cf4c                 | LR__1033
0cf4c                 | ' 
0cf4c                 | '     
0cf4c                 | '   if s<>"" then 
0cf4c     38 4E 05 F1 | 	add	fp, #56
0cf50     A7 12 02 FB | 	rdlong	arg01, fp
0cf54     38 4E 85 F1 | 	sub	fp, #56
0cf58     5F 01 00 FF 
0cf5c     BC 14 06 F6 | 	mov	arg02, ##@LR__4929
0cf60     A0 F3 B0 FD | 	call	#__system___string_cmp
0cf64     00 FA 0D F2 | 	cmp	result1, #0 wz
0cf68     88 01 90 AD |  if_e	jmp	#LR__1035
0cf6c     58 D1 BF FD | 	call	#_pop
0cf70     FF 1A 02 F6 | 	mov	arg05, result3
0cf74     2C 4E 05 F1 | 	add	fp, #44
0cf78     A7 FA 61 FC | 	wrlong	result1, fp
0cf7c     04 4E 05 F1 | 	add	fp, #4
0cf80     A7 FC 61 FC | 	wrlong	result2, fp
0cf84     04 4E 05 F1 | 	add	fp, #4
0cf88     A7 1A 62 FC | 	wrlong	arg05, fp
0cf8c     08 4E 85 F1 | 	sub	fp, #8
0cf90     A7 12 02 F6 | 	mov	arg01, fp
0cf94     2C 4E 85 F1 | 	sub	fp, #44
0cf98     80 5A B0 FD | 	call	#_converttoint
0cf9c     10 4E 05 F1 | 	add	fp, #16
0cfa0     A7 FA 61 FC | 	wrlong	result1, fp
0cfa4     10 4E 85 F1 | 	sub	fp, #16
0cfa8                 | '     t1=pop()
0cfa8                 | '     channel=converttoint(t1) 
0cfa8                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0cfa8     09 12 06 F6 | 	mov	arg01, #9
0cfac     F0 42 B1 FD | 	call	#__system__close
0cfb0     09 1E 06 F6 | 	mov	local01, #9
0cfb4     5F 01 00 FF 
0cfb8     BD 12 06 F6 | 	mov	arg01, ##@LR__4930
0cfbc     38 4E 05 F1 | 	add	fp, #56
0cfc0     A7 14 02 FB | 	rdlong	arg02, fp
0cfc4     38 4E 85 F1 | 	sub	fp, #56
0cfc8     6C F3 B0 FD | 	call	#__system___string_concat
0cfcc     FD 14 02 F6 | 	mov	arg02, result1
0cfd0     0F 13 02 F6 | 	mov	arg01, local01
0cfd4     00 16 06 F6 | 	mov	arg03, #0
0cfd8     00 FF B0 FD | 	call	#__system___basic_open_string
0cfdc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cfe0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cfe4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cfe8     7B 00 00 FF 
0cfec     F4 E4 05 F1 | 	add	objptr, ##63220
0cff0     F2 FA 61 FC | 	wrlong	result1, objptr
0cff4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0cff4     7B 00 00 FF 
0cff8     F4 E4 85 F1 | 	sub	objptr, ##63220
0cffc     B0 00 90 AD |  if_e	jmp	#LR__1034
0d000     00 12 06 F6 | 	mov	arg01, #0
0d004     64 4C B1 FD | 	call	#__system___getiolock_0474
0d008     FD 12 02 F6 | 	mov	arg01, result1
0d00c     CC F2 B0 FD | 	call	#__system___lockmem
0d010     5F 01 00 FF 
0d014     CA 14 06 F6 | 	mov	arg02, ##@LR__4931
0d018     00 12 06 F6 | 	mov	arg01, #0
0d01c     00 16 06 F6 | 	mov	arg03, #0
0d020     BC FF B0 FD | 	call	#__system___basic_print_string
0d024     7B 00 00 FF 
0d028     F4 E4 05 F1 | 	add	objptr, ##63220
0d02c     F2 14 02 FB | 	rdlong	arg02, objptr
0d030     7B 00 00 FF 
0d034     F4 E4 85 F1 | 	sub	objptr, ##63220
0d038     00 12 06 F6 | 	mov	arg01, #0
0d03c     00 16 06 F6 | 	mov	arg03, #0
0d040     0A 18 06 F6 | 	mov	arg04, #10
0d044     DC FF B0 FD | 	call	#__system___basic_print_integer
0d048     5F 01 00 FF 
0d04c     D8 14 06 F6 | 	mov	arg02, ##@LR__4932
0d050     00 12 06 F6 | 	mov	arg01, #0
0d054     00 16 06 F6 | 	mov	arg03, #0
0d058     84 FF B0 FD | 	call	#__system___basic_print_string
0d05c     00 1E 06 F6 | 	mov	local01, #0
0d060     7B 00 00 FF 
0d064     F4 E4 05 F1 | 	add	objptr, ##63220
0d068     F2 12 02 FB | 	rdlong	arg01, objptr
0d06c     7B 00 00 FF 
0d070     F4 E4 85 F1 | 	sub	objptr, ##63220
0d074     F4 18 B1 FD | 	call	#__system___strerror
0d078     FD 14 02 F6 | 	mov	arg02, result1
0d07c     0F 13 02 F6 | 	mov	arg01, local01
0d080     00 16 06 F6 | 	mov	arg03, #0
0d084     58 FF B0 FD | 	call	#__system___basic_print_string
0d088     00 12 06 F6 | 	mov	arg01, #0
0d08c     0A 14 06 F6 | 	mov	arg02, #10
0d090     00 16 06 F6 | 	mov	arg03, #0
0d094     F0 FE B0 FD | 	call	#__system___basic_print_char
0d098     00 12 06 F6 | 	mov	arg01, #0
0d09c     CC 4B B1 FD | 	call	#__system___getiolock_0474
0d0a0     FD 00 68 FC | 	wrlong	#0, result1
0d0a4     09 12 06 F6 | 	mov	arg01, #9
0d0a8     F4 41 B1 FD | 	call	#__system__close
0d0ac     8C 07 90 FD | 	jmp	#LR__1058
0d0b0                 | LR__1034
0d0b0                 | '     get #9,17,samplebuf(channel,0),1024
0d0b0     10 4E 05 F1 | 	add	fp, #16
0d0b4     A7 16 02 FB | 	rdlong	arg03, fp
0d0b8     10 4E 85 F1 | 	sub	fp, #16
0d0bc     0B 16 66 F0 | 	shl	arg03, #11
0d0c0     0C 00 00 FF 
0d0c4     CC E4 05 F1 | 	add	objptr, ##6348
0d0c8     F2 16 02 F1 | 	add	arg03, objptr
0d0cc     09 12 06 F6 | 	mov	arg01, #9
0d0d0     11 14 06 F6 | 	mov	arg02, #17
0d0d4     0A 18 C6 F9 | 	decod	arg04, #10
0d0d8     02 1A 06 F6 | 	mov	arg05, #2
0d0dc     0C 00 00 FF 
0d0e0     CC E4 85 F1 | 	sub	objptr, ##6348
0d0e4     08 00 B1 FD | 	call	#__system___basic_get
0d0e8                 | '     close #9
0d0e8     09 12 06 F6 | 	mov	arg01, #9
0d0ec     B0 41 B1 FD | 	call	#__system__close
0d0f0                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d0f0                 | '     return
0d0f0     48 07 90 FD | 	jmp	#LR__1058
0d0f4                 | LR__1035
0d0f4                 | '     if wptr < ($80000 - 2048) then 
0d0f4     14 4E 05 F1 | 	add	fp, #20
0d0f8     A7 1E 02 FB | 	rdlong	local01, fp
0d0fc     14 4E 85 F1 | 	sub	fp, #20
0d100     FC 03 00 FF 
0d104     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0d108     80 00 90 3D |  if_ae	jmp	#LR__1038
0d10c                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0d10c     04 4E 05 F1 | 	add	fp, #4
0d110     A7 00 68 FC | 	wrlong	#0, fp
0d114     04 4E 85 F1 | 	sub	fp, #4
0d118     0C 00 00 FF 
0d11c     CC E4 05 F1 | 	add	objptr, ##6348
0d120     97 2E 48 FB | 	callpa	#(@LR__1037-@LR__1036)>>2,fcache_load_ptr_
0d124                 | LR__1036
0d124     10 4E 05 F1 | 	add	fp, #16
0d128     A7 1E 02 FB | 	rdlong	local01, fp
0d12c     0B 1E 66 F0 | 	shl	local01, #11
0d130     F2 1E 02 F1 | 	add	local01, objptr
0d134     0C 4E 85 F1 | 	sub	fp, #12
0d138     A7 1A 02 FB | 	rdlong	arg05, fp
0d13c     0D 19 02 F6 | 	mov	arg04, arg05
0d140     01 18 66 F0 | 	shl	arg04, #1
0d144     0F 19 02 F1 | 	add	arg04, local01
0d148     10 4E 05 F1 | 	add	fp, #16
0d14c     A7 12 02 FB | 	rdlong	arg01, fp
0d150     01 1A 66 F0 | 	shl	arg05, #1
0d154     0D 13 02 F1 | 	add	arg01, arg05
0d158     09 FB E1 FA | 	rdword	result1, arg01
0d15c     0C FB 51 FC | 	wrword	result1, arg04
0d160     10 4E 85 F1 | 	sub	fp, #16
0d164     A7 1E 02 FB | 	rdlong	local01, fp
0d168     01 1E 06 F1 | 	add	local01, #1
0d16c     A7 1E 62 FC | 	wrlong	local01, fp
0d170     04 4E 85 F1 | 	sub	fp, #4
0d174     02 00 00 FF 
0d178     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0d17c     A4 FF 9F CD |  if_b	jmp	#LR__1036
0d180                 | LR__1037
0d180     0C 00 00 FF 
0d184     CC E4 85 F1 | 	sub	objptr, ##6348
0d188     B0 06 90 FD | 	jmp	#LR__1058
0d18c                 | LR__1038
0d18c                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0d18c     04 4E 05 F1 | 	add	fp, #4
0d190     A7 00 68 FC | 	wrlong	#0, fp
0d194     04 4E 85 F1 | 	sub	fp, #4
0d198                 | LR__1039
0d198     10 4E 05 F1 | 	add	fp, #16
0d19c     A7 1A 02 FB | 	rdlong	arg05, fp
0d1a0     0B 1A 66 F0 | 	shl	arg05, #11
0d1a4     0C 00 00 FF 
0d1a8     CC E4 05 F1 | 	add	objptr, ##6348
0d1ac     F2 1A 02 F1 | 	add	arg05, objptr
0d1b0     0C 4E 85 F1 | 	sub	fp, #12
0d1b4     A7 18 02 FB | 	rdlong	arg04, fp
0d1b8     0C 21 02 F6 | 	mov	local02, arg04
0d1bc     01 20 66 F0 | 	shl	local02, #1
0d1c0     0D 21 02 F1 | 	add	local02, arg05
0d1c4     10 4E 05 F1 | 	add	fp, #16
0d1c8     A7 12 02 FB | 	rdlong	arg01, fp
0d1cc     14 4E 85 F1 | 	sub	fp, #20
0d1d0     01 18 66 F0 | 	shl	arg04, #1
0d1d4     0C 13 02 F1 | 	add	arg01, arg04
0d1d8     0C 00 00 FF 
0d1dc     CC E4 85 F1 | 	sub	objptr, ##6348
0d1e0     60 BC B0 FD | 	call	#_psdpeek
0d1e4     10 FB 51 FC | 	wrword	result1, local02
0d1e8     04 4E 05 F1 | 	add	fp, #4
0d1ec     A7 22 02 FB | 	rdlong	local03, fp
0d1f0     01 22 06 F1 | 	add	local03, #1
0d1f4     A7 22 62 FC | 	wrlong	local03, fp
0d1f8     04 4E 85 F1 | 	sub	fp, #4
0d1fc     02 00 00 FF 
0d200     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d204     90 FF 9F CD |  if_b	jmp	#LR__1039
0d208                 | '     return 
0d208     30 06 90 FD | 	jmp	#LR__1058
0d20c                 | '   
0d20c                 | '   par=converttoint(t1)  : print par
0d20c                 | '   t1=pop()
0d20c                 | '   channel=converttoint(t1)  
0d20c                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0d20c                 | LR__1040
0d20c     10 4E 05 F1 | 	add	fp, #16
0d210     A7 22 02 FB | 	rdlong	local03, fp
0d214     0B 22 66 F0 | 	shl	local03, #11
0d218     0C 00 00 FF 
0d21c     CC E4 05 F1 | 	add	objptr, ##6348
0d220     F2 22 02 F1 | 	add	local03, objptr
0d224     0C 4E 85 F1 | 	sub	fp, #12
0d228     A7 12 02 FB | 	rdlong	arg01, fp
0d22c     09 21 02 F6 | 	mov	local02, arg01
0d230     01 20 66 F0 | 	shl	local02, #1
0d234     11 21 02 F1 | 	add	local02, local03
0d238     04 4E 85 F1 | 	sub	fp, #4
0d23c     0C 00 00 FF 
0d240     CC E4 85 F1 | 	sub	objptr, ##6348
0d244     09 13 52 F6 | 	abs	arg01, arg01 wc
0d248     1F 24 C6 C9 |  if_b	decod	local04, #31
0d24c     00 24 06 36 |  if_ae	mov	local04, #0
0d250     00 18 B1 FD | 	call	#__system___float_fromuns
0d254     12 FB 61 F5 | 	xor	result1, local04
0d258     FD 14 02 F6 | 	mov	arg02, result1
0d25c     87 E4 1D FF 
0d260     DB 13 06 F6 | 	mov	arg01, ##1003032539
0d264     F0 1B B1 FD | 	call	#__system___float_mul
0d268     FD 12 02 F6 | 	mov	arg01, result1
0d26c     24 25 B1 FD | 	call	#__system____builtin_sinf
0d270     FD 14 02 F6 | 	mov	arg02, result1
0d274     58 7F 23 FF 
0d278     00 12 06 F6 | 	mov	arg01, ##1191096320
0d27c     D8 1B B1 FD | 	call	#__system___float_mul
0d280     FD 12 02 F6 | 	mov	arg01, result1
0d284     01 14 06 F6 | 	mov	arg02, #1
0d288     94 20 B1 FD | 	call	#__system___float_tointeger
0d28c     10 FB 51 FC | 	wrword	result1, local02
0d290     04 4E 05 F1 | 	add	fp, #4
0d294     A7 22 02 FB | 	rdlong	local03, fp
0d298     01 22 06 F1 | 	add	local03, #1
0d29c     A7 22 62 FC | 	wrlong	local03, fp
0d2a0     04 4E 85 F1 | 	sub	fp, #4
0d2a4     02 00 00 FF 
0d2a8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d2ac     5C FF 9F CD |  if_b	jmp	#LR__1040
0d2b0                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d2b0                 | '   return
0d2b0     88 05 90 FD | 	jmp	#LR__1058
0d2b4                 | LR__1041
0d2b4                 | ' for i=0 to 15 : harm(i)=0: next i  
0d2b4     04 4E 05 F1 | 	add	fp, #4
0d2b8     A7 00 68 FC | 	wrlong	#0, fp
0d2bc     97 16 48 FB | 	callpa	#(@LR__1043-@LR__1042)>>2,fcache_load_ptr_
0d2c0                 | LR__1042
0d2c0     A7 22 02 FB | 	rdlong	local03, fp
0d2c4     02 22 66 F0 | 	shl	local03, #2
0d2c8     38 4E 05 F1 | 	add	fp, #56
0d2cc     A7 22 02 F1 | 	add	local03, fp
0d2d0     11 01 68 FC | 	wrlong	#0, local03
0d2d4     38 4E 85 F1 | 	sub	fp, #56
0d2d8     A7 22 02 FB | 	rdlong	local03, fp
0d2dc     01 22 06 F1 | 	add	local03, #1
0d2e0     A7 22 62 FC | 	wrlong	local03, fp
0d2e4     10 22 56 F2 | 	cmps	local03, #16 wc
0d2e8     D4 FF 9F CD |  if_b	jmp	#LR__1042
0d2ec                 | LR__1043
0d2ec     04 4E 85 F1 | 	sub	fp, #4
0d2f0                 | ' for i=numpar to 2 step -1 
0d2f0     A7 1E 02 FB | 	rdlong	local01, fp
0d2f4     04 4E 05 F1 | 	add	fp, #4
0d2f8     A7 1E 62 FC | 	wrlong	local01, fp
0d2fc     04 4E 85 F1 | 	sub	fp, #4
0d300                 | LR__1044
0d300     C4 CD BF FD | 	call	#_pop
0d304     2C 4E 05 F1 | 	add	fp, #44
0d308     A7 FA 61 FC | 	wrlong	result1, fp
0d30c     04 4E 05 F1 | 	add	fp, #4
0d310     A7 FC 61 FC | 	wrlong	result2, fp
0d314     04 4E 05 F1 | 	add	fp, #4
0d318     A7 FE 61 FC | 	wrlong	result3, fp
0d31c     30 4E 85 F1 | 	sub	fp, #48
0d320     A7 22 02 FB | 	rdlong	local03, fp
0d324     02 22 86 F1 | 	sub	local03, #2
0d328     02 22 66 F0 | 	shl	local03, #2
0d32c     38 4E 05 F1 | 	add	fp, #56
0d330     A7 22 02 F1 | 	add	local03, fp
0d334     10 4E 85 F1 | 	sub	fp, #16
0d338     A7 12 02 F6 | 	mov	arg01, fp
0d33c     2C 4E 85 F1 | 	sub	fp, #44
0d340     84 57 B0 FD | 	call	#_converttofloat
0d344     11 FB 61 FC | 	wrlong	result1, local03
0d348     04 4E 05 F1 | 	add	fp, #4
0d34c     A7 22 02 FB | 	rdlong	local03, fp
0d350     01 22 86 F1 | 	sub	local03, #1
0d354     A7 22 62 FC | 	wrlong	local03, fp
0d358     04 4E 85 F1 | 	sub	fp, #4
0d35c     02 22 56 F2 | 	cmps	local03, #2 wc
0d360     9C FF 9F 3D |  if_ae	jmp	#LR__1044
0d364     60 CD BF FD | 	call	#_pop
0d368     FF 1E 02 F6 | 	mov	local01, result3
0d36c     2C 4E 05 F1 | 	add	fp, #44
0d370     A7 FA 61 FC | 	wrlong	result1, fp
0d374     04 4E 05 F1 | 	add	fp, #4
0d378     A7 FC 61 FC | 	wrlong	result2, fp
0d37c     04 4E 05 F1 | 	add	fp, #4
0d380     A7 1E 62 FC | 	wrlong	local01, fp
0d384     08 4E 85 F1 | 	sub	fp, #8
0d388     A7 12 02 F6 | 	mov	arg01, fp
0d38c     2C 4E 85 F1 | 	sub	fp, #44
0d390     88 56 B0 FD | 	call	#_converttoint
0d394     FD 1E 02 F6 | 	mov	local01, result1
0d398     10 4E 05 F1 | 	add	fp, #16
0d39c     A7 1E 62 FC | 	wrlong	local01, fp
0d3a0     10 4E 85 F1 | 	sub	fp, #16
0d3a4                 | ' t1=pop()
0d3a4                 | ' channel=converttoint(t1) : print channel
0d3a4     00 12 06 F6 | 	mov	arg01, #0
0d3a8     C0 48 B1 FD | 	call	#__system___getiolock_0474
0d3ac     FD 12 02 F6 | 	mov	arg01, result1
0d3b0     28 EF B0 FD | 	call	#__system___lockmem
0d3b4     10 4E 05 F1 | 	add	fp, #16
0d3b8     A7 14 02 FB | 	rdlong	arg02, fp
0d3bc     10 4E 85 F1 | 	sub	fp, #16
0d3c0     00 12 06 F6 | 	mov	arg01, #0
0d3c4     00 16 06 F6 | 	mov	arg03, #0
0d3c8     0A 18 06 F6 | 	mov	arg04, #10
0d3cc     54 FC B0 FD | 	call	#__system___basic_print_integer
0d3d0     00 12 06 F6 | 	mov	arg01, #0
0d3d4     0A 14 06 F6 | 	mov	arg02, #10
0d3d8     00 16 06 F6 | 	mov	arg03, #0
0d3dc     A8 FB B0 FD | 	call	#__system___basic_print_char
0d3e0     00 12 06 F6 | 	mov	arg01, #0
0d3e4     84 48 B1 FD | 	call	#__system___getiolock_0474
0d3e8     FD 00 68 FC | 	wrlong	#0, result1
0d3ec                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0d3ec     08 4E 05 F1 | 	add	fp, #8
0d3f0     02 00 80 FF 
0d3f4     A7 00 68 FC | 	wrlong	##1024, fp
0d3f8     08 4E 85 F1 | 	sub	fp, #8
0d3fc     0C 00 00 FF 
0d400     CC E4 05 F1 | 	add	objptr, ##6348
0d404     97 18 48 FB | 	callpa	#(@LR__1047-@LR__1045)>>2,fcache_load_ptr_
0d408                 | LR__1045
0d408     02 00 00 FF 
0d40c     00 14 DC FC | 	rep	@LR__1048, ##1024
0d410                 | LR__1046
0d410     10 4E 05 F1 | 	add	fp, #16
0d414     A7 20 02 FB | 	rdlong	local02, fp
0d418     0B 20 66 F0 | 	shl	local02, #11
0d41c     F2 20 02 F1 | 	add	local02, objptr
0d420     0C 4E 85 F1 | 	sub	fp, #12
0d424     A7 22 02 FB | 	rdlong	local03, fp
0d428     04 4E 85 F1 | 	sub	fp, #4
0d42c     01 22 66 F0 | 	shl	local03, #1
0d430     10 23 02 F1 | 	add	local03, local02
0d434     11 01 58 FC | 	wrword	#0, local03
0d438                 | LR__1047
0d438                 | LR__1048
0d438     0C 00 00 FF 
0d43c     CC E4 85 F1 | 	sub	objptr, ##6348
0d440     20 4E 05 F1 | 	add	fp, #32
0d444     A7 00 68 FC | 	wrlong	#0, fp
0d448                 | ' max=0
0d448                 | ' if harm(0)<0 then
0d448     1C 4E 05 F1 | 	add	fp, #28
0d44c     A7 12 02 FB | 	rdlong	arg01, fp
0d450     3C 4E 85 F1 | 	sub	fp, #60
0d454     00 14 06 F6 | 	mov	arg02, #0
0d458     01 16 06 F6 | 	mov	arg03, #1
0d45c     2C 1E B1 FD | 	call	#__system___float_cmp
0d460     00 FA 55 F2 | 	cmps	result1, #0 wc
0d464     04 01 90 3D |  if_ae	jmp	#LR__1051
0d468     3C 4E 05 F1 | 	add	fp, #60
0d46c     A7 FA 01 FB | 	rdlong	result1, fp
0d470     1F FA 05 F4 | 	bitl	result1, #31
0d474     24 4E 85 F1 | 	sub	fp, #36
0d478     A7 FA 61 FC | 	wrlong	result1, fp
0d47c     28 4E 05 F1 | 	add	fp, #40
0d480     A7 FA 01 FB | 	rdlong	result1, fp
0d484     1F FA 05 F4 | 	bitl	result1, #31
0d488     24 4E 85 F1 | 	sub	fp, #36
0d48c     A7 FA 61 FC | 	wrlong	result1, fp
0d490     20 4E 05 F1 | 	add	fp, #32
0d494     00 C0 9F FF 
0d498     A7 00 68 FC | 	wrlong	##1065353216, fp
0d49c     24 4E 85 F1 | 	sub	fp, #36
0d4a0     A7 1E 02 FB | 	rdlong	local01, fp
0d4a4     28 4E 05 F1 | 	add	fp, #40
0d4a8     A7 1E 62 FC | 	wrlong	local01, fp
0d4ac     24 4E 85 F1 | 	sub	fp, #36
0d4b0     A7 1E 02 FB | 	rdlong	local01, fp
0d4b4     28 4E 05 F1 | 	add	fp, #40
0d4b8     A7 1E 62 FC | 	wrlong	local01, fp
0d4bc                 | '   harm(0)=1
0d4bc                 | '   harm(1)=even
0d4bc                 | '   harm(2)=odd
0d4bc                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0d4bc     40 4E 85 F1 | 	sub	fp, #64
0d4c0     A7 06 68 FC | 	wrlong	#3, fp
0d4c4                 | LR__1049
0d4c4     A7 22 02 FB | 	rdlong	local03, fp
0d4c8     11 27 02 F6 | 	mov	local05, local03
0d4cc     02 26 66 F0 | 	shl	local05, #2
0d4d0     38 4E 05 F1 | 	add	fp, #56
0d4d4     A7 26 02 F1 | 	add	local05, fp
0d4d8     02 22 86 F1 | 	sub	local03, #2
0d4dc     02 22 66 F0 | 	shl	local03, #2
0d4e0     A7 22 02 F1 | 	add	local03, fp
0d4e4     11 13 02 FB | 	rdlong	arg01, local03
0d4e8     24 4E 85 F1 | 	sub	fp, #36
0d4ec     A7 14 02 FB | 	rdlong	arg02, fp
0d4f0     18 4E 85 F1 | 	sub	fp, #24
0d4f4     60 19 B1 FD | 	call	#__system___float_mul
0d4f8     13 FB 61 FC | 	wrlong	result1, local05
0d4fc     04 4E 05 F1 | 	add	fp, #4
0d500     A7 22 02 FB | 	rdlong	local03, fp
0d504     02 22 06 F1 | 	add	local03, #2
0d508     A7 22 62 FC | 	wrlong	local03, fp
0d50c     10 22 56 F2 | 	cmps	local03, #16 wc
0d510     B0 FF 9F CD |  if_b	jmp	#LR__1049
0d514                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0d514     A7 08 68 FC | 	wrlong	#4, fp
0d518                 | LR__1050
0d518     A7 22 02 FB | 	rdlong	local03, fp
0d51c     11 27 02 F6 | 	mov	local05, local03
0d520     02 26 66 F0 | 	shl	local05, #2
0d524     38 4E 05 F1 | 	add	fp, #56
0d528     A7 26 02 F1 | 	add	local05, fp
0d52c     02 22 86 F1 | 	sub	local03, #2
0d530     02 22 66 F0 | 	shl	local03, #2
0d534     A7 22 02 F1 | 	add	local03, fp
0d538     11 13 02 FB | 	rdlong	arg01, local03
0d53c     20 4E 85 F1 | 	sub	fp, #32
0d540     A7 14 02 FB | 	rdlong	arg02, fp
0d544     1C 4E 85 F1 | 	sub	fp, #28
0d548     0C 19 B1 FD | 	call	#__system___float_mul
0d54c     13 FB 61 FC | 	wrlong	result1, local05
0d550     04 4E 05 F1 | 	add	fp, #4
0d554     A7 22 02 FB | 	rdlong	local03, fp
0d558     02 22 06 F1 | 	add	local03, #2
0d55c     A7 22 62 FC | 	wrlong	local03, fp
0d560     0F 22 56 F2 | 	cmps	local03, #15 wc
0d564     B0 FF 9F CD |  if_b	jmp	#LR__1050
0d568     04 4E 85 F1 | 	sub	fp, #4
0d56c                 | LR__1051
0d56c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0d56c     3C 4E 05 F1 | 	add	fp, #60
0d570     A7 12 02 FB | 	rdlong	arg01, fp
0d574     3C 4E 85 F1 | 	sub	fp, #60
0d578     00 14 06 F6 | 	mov	arg02, #0
0d57c     01 16 66 F6 | 	neg	arg03, #1
0d580     08 1D B1 FD | 	call	#__system___float_cmp
0d584     00 FA 55 F2 | 	cmps	result1, #0 wc
0d588     B0 02 90 CD |  if_b	jmp	#LR__1057
0d58c                 | '   for i=0 to 1023
0d58c     04 4E 05 F1 | 	add	fp, #4
0d590     A7 00 68 FC | 	wrlong	#0, fp
0d594     04 4E 85 F1 | 	sub	fp, #4
0d598                 | LR__1052
0d598     24 4E 05 F1 | 	add	fp, #36
0d59c     A7 00 68 FC | 	wrlong	#0, fp
0d5a0                 | '     spl=0
0d5a0                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0d5a0     1C 4E 85 F1 | 	sub	fp, #28
0d5a4     A7 00 68 FC | 	wrlong	#0, fp
0d5a8                 | LR__1053
0d5a8     A7 26 02 FB | 	rdlong	local05, fp
0d5ac     02 26 66 F0 | 	shl	local05, #2
0d5b0     34 4E 05 F1 | 	add	fp, #52
0d5b4     A7 26 02 F1 | 	add	local05, fp
0d5b8     13 23 02 FB | 	rdlong	local03, local05
0d5bc     87 E4 1D FF 
0d5c0     DB 27 06 F6 | 	mov	local05, ##1003032539
0d5c4     38 4E 85 F1 | 	sub	fp, #56
0d5c8     A7 12 02 FB | 	rdlong	arg01, fp
0d5cc     04 4E 85 F1 | 	sub	fp, #4
0d5d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5d4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d5d8     00 24 06 36 |  if_ae	mov	local04, #0
0d5dc     74 14 B1 FD | 	call	#__system___float_fromuns
0d5e0     12 FB 61 F5 | 	xor	result1, local04
0d5e4     FD 14 02 F6 | 	mov	arg02, result1
0d5e8     13 13 02 F6 | 	mov	arg01, local05
0d5ec     68 18 B1 FD | 	call	#__system___float_mul
0d5f0     FD 26 02 F6 | 	mov	local05, result1
0d5f4     08 4E 05 F1 | 	add	fp, #8
0d5f8     A7 12 02 FB | 	rdlong	arg01, fp
0d5fc     08 4E 85 F1 | 	sub	fp, #8
0d600     01 12 06 F1 | 	add	arg01, #1
0d604     09 13 52 F6 | 	abs	arg01, arg01 wc
0d608     1F 24 C6 C9 |  if_b	decod	local04, #31
0d60c     00 24 06 36 |  if_ae	mov	local04, #0
0d610     40 14 B1 FD | 	call	#__system___float_fromuns
0d614     12 FB 61 F5 | 	xor	result1, local04
0d618     FD 14 02 F6 | 	mov	arg02, result1
0d61c     13 13 02 F6 | 	mov	arg01, local05
0d620     34 18 B1 FD | 	call	#__system___float_mul
0d624     FD 12 02 F6 | 	mov	arg01, result1
0d628     68 21 B1 FD | 	call	#__system____builtin_sinf
0d62c     FD 14 02 F6 | 	mov	arg02, result1
0d630     11 13 02 F6 | 	mov	arg01, local03
0d634     20 18 B1 FD | 	call	#__system___float_mul
0d638     FD 14 02 F6 | 	mov	arg02, result1
0d63c     24 4E 05 F1 | 	add	fp, #36
0d640     A7 12 02 FB | 	rdlong	arg01, fp
0d644     24 4E 85 F1 | 	sub	fp, #36
0d648     3C 14 B1 FD | 	call	#__system___float_add
0d64c     24 4E 05 F1 | 	add	fp, #36
0d650     A7 FA 61 FC | 	wrlong	result1, fp
0d654     1C 4E 85 F1 | 	sub	fp, #28
0d658     A7 16 02 FB | 	rdlong	arg03, fp
0d65c     01 16 06 F1 | 	add	arg03, #1
0d660     A7 16 62 FC | 	wrlong	arg03, fp
0d664     10 16 56 F2 | 	cmps	arg03, #16 wc
0d668     3C FF 9F CD |  if_b	jmp	#LR__1053
0d66c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0d66c     1C 4E 05 F1 | 	add	fp, #28
0d670     A7 12 02 FB | 	rdlong	arg01, fp
0d674     1F 12 06 F4 | 	bitl	arg01, #31
0d678     04 4E 85 F1 | 	sub	fp, #4
0d67c     A7 14 02 FB | 	rdlong	arg02, fp
0d680     20 4E 85 F1 | 	sub	fp, #32
0d684     01 16 66 F6 | 	neg	arg03, #1
0d688     00 1C B1 FD | 	call	#__system___float_cmp
0d68c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d690     18 00 90 CD |  if_b	jmp	#LR__1054
0d694     24 4E 05 F1 | 	add	fp, #36
0d698     A7 FA 01 FB | 	rdlong	result1, fp
0d69c     1F FA 05 F4 | 	bitl	result1, #31
0d6a0     04 4E 85 F1 | 	sub	fp, #4
0d6a4     A7 FA 61 FC | 	wrlong	result1, fp
0d6a8     20 4E 85 F1 | 	sub	fp, #32
0d6ac                 | LR__1054
0d6ac     04 4E 05 F1 | 	add	fp, #4
0d6b0     A7 22 02 FB | 	rdlong	local03, fp
0d6b4     01 22 06 F1 | 	add	local03, #1
0d6b8     A7 22 62 FC | 	wrlong	local03, fp
0d6bc     04 4E 85 F1 | 	sub	fp, #4
0d6c0     02 00 00 FF 
0d6c4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d6c8     CC FE 9F CD |  if_b	jmp	#LR__1052
0d6cc                 | '   for i=0 to 1023
0d6cc     04 4E 05 F1 | 	add	fp, #4
0d6d0     A7 00 68 FC | 	wrlong	#0, fp
0d6d4     04 4E 85 F1 | 	sub	fp, #4
0d6d8                 | LR__1055
0d6d8     24 4E 05 F1 | 	add	fp, #36
0d6dc     A7 00 68 FC | 	wrlong	#0, fp
0d6e0                 | '     spl=0
0d6e0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0d6e0     1C 4E 85 F1 | 	sub	fp, #28
0d6e4     A7 00 68 FC | 	wrlong	#0, fp
0d6e8                 | LR__1056
0d6e8     A7 26 02 FB | 	rdlong	local05, fp
0d6ec     02 26 66 F0 | 	shl	local05, #2
0d6f0     34 4E 05 F1 | 	add	fp, #52
0d6f4     A7 26 02 F1 | 	add	local05, fp
0d6f8     13 27 02 FB | 	rdlong	local05, local05
0d6fc     1C 4E 85 F1 | 	sub	fp, #28
0d700     A7 14 02 FB | 	rdlong	arg02, fp
0d704     20 4E 85 F1 | 	sub	fp, #32
0d708     58 7F 23 FF 
0d70c     00 12 06 F6 | 	mov	arg01, ##1191096320
0d710     48 19 B1 FD | 	call	#__system___float_div
0d714     FD 14 02 F6 | 	mov	arg02, result1
0d718     13 13 02 F6 | 	mov	arg01, local05
0d71c     38 17 B1 FD | 	call	#__system___float_mul
0d720     FD 22 02 F6 | 	mov	local03, result1
0d724     87 E4 1D FF 
0d728     DB 27 06 F6 | 	mov	local05, ##1003032539
0d72c     04 4E 05 F1 | 	add	fp, #4
0d730     A7 12 02 FB | 	rdlong	arg01, fp
0d734     04 4E 85 F1 | 	sub	fp, #4
0d738     09 13 52 F6 | 	abs	arg01, arg01 wc
0d73c     1F 24 C6 C9 |  if_b	decod	local04, #31
0d740     00 24 06 36 |  if_ae	mov	local04, #0
0d744     0C 13 B1 FD | 	call	#__system___float_fromuns
0d748     12 FB 61 F5 | 	xor	result1, local04
0d74c     FD 14 02 F6 | 	mov	arg02, result1
0d750     13 13 02 F6 | 	mov	arg01, local05
0d754     00 17 B1 FD | 	call	#__system___float_mul
0d758     FD 26 02 F6 | 	mov	local05, result1
0d75c     08 4E 05 F1 | 	add	fp, #8
0d760     A7 12 02 FB | 	rdlong	arg01, fp
0d764     08 4E 85 F1 | 	sub	fp, #8
0d768     01 12 06 F1 | 	add	arg01, #1
0d76c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d770     1F 24 C6 C9 |  if_b	decod	local04, #31
0d774     00 24 06 36 |  if_ae	mov	local04, #0
0d778     D8 12 B1 FD | 	call	#__system___float_fromuns
0d77c     12 FB 61 F5 | 	xor	result1, local04
0d780     FD 14 02 F6 | 	mov	arg02, result1
0d784     13 13 02 F6 | 	mov	arg01, local05
0d788     CC 16 B1 FD | 	call	#__system___float_mul
0d78c     FD 12 02 F6 | 	mov	arg01, result1
0d790     00 20 B1 FD | 	call	#__system____builtin_sinf
0d794     FD 14 02 F6 | 	mov	arg02, result1
0d798     11 13 02 F6 | 	mov	arg01, local03
0d79c     B8 16 B1 FD | 	call	#__system___float_mul
0d7a0     FD 14 02 F6 | 	mov	arg02, result1
0d7a4     24 4E 05 F1 | 	add	fp, #36
0d7a8     A7 12 02 FB | 	rdlong	arg01, fp
0d7ac     24 4E 85 F1 | 	sub	fp, #36
0d7b0     D4 12 B1 FD | 	call	#__system___float_add
0d7b4     24 4E 05 F1 | 	add	fp, #36
0d7b8     A7 FA 61 FC | 	wrlong	result1, fp
0d7bc     1C 4E 85 F1 | 	sub	fp, #28
0d7c0     A7 26 02 FB | 	rdlong	local05, fp
0d7c4     01 26 06 F1 | 	add	local05, #1
0d7c8     A7 26 62 FC | 	wrlong	local05, fp
0d7cc     10 26 56 F2 | 	cmps	local05, #16 wc
0d7d0     14 FF 9F CD |  if_b	jmp	#LR__1056
0d7d4     08 4E 05 F1 | 	add	fp, #8
0d7d8     A7 26 02 FB | 	rdlong	local05, fp
0d7dc     0B 26 66 F0 | 	shl	local05, #11
0d7e0     0C 00 00 FF 
0d7e4     CC E4 05 F1 | 	add	objptr, ##6348
0d7e8     F2 26 02 F1 | 	add	local05, objptr
0d7ec     0C 4E 85 F1 | 	sub	fp, #12
0d7f0     A7 20 02 FB | 	rdlong	local02, fp
0d7f4     01 20 66 F0 | 	shl	local02, #1
0d7f8     13 21 02 F1 | 	add	local02, local05
0d7fc     20 4E 05 F1 | 	add	fp, #32
0d800     A7 12 02 FB | 	rdlong	arg01, fp
0d804     24 4E 85 F1 | 	sub	fp, #36
0d808     0C 00 00 FF 
0d80c     CC E4 85 F1 | 	sub	objptr, ##6348
0d810     01 14 06 F6 | 	mov	arg02, #1
0d814     08 1B B1 FD | 	call	#__system___float_tointeger
0d818     10 FB 51 FC | 	wrword	result1, local02
0d81c     04 4E 05 F1 | 	add	fp, #4
0d820     A7 22 02 FB | 	rdlong	local03, fp
0d824     01 22 06 F1 | 	add	local03, #1
0d828     A7 22 62 FC | 	wrlong	local03, fp
0d82c     04 4E 85 F1 | 	sub	fp, #4
0d830     02 00 00 FF 
0d834     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d838     9C FE 9F CD |  if_b	jmp	#LR__1055
0d83c                 | LR__1057
0d83c                 | LR__1058
0d83c     A7 F0 03 F6 | 	mov	ptra, fp
0d840     B2 00 A0 FD | 	call	#popregs_
0d844                 | _do_defsnd_ret
0d844     2D 00 64 FD | 	ret
0d848                 | 
0d848                 | ' 
0d848                 | ' ' ---------------  List the program. 
0d848                 | ' 
0d848                 | ' sub do_list
0d848                 | _do_list
0d848     02 4A 05 F6 | 	mov	COUNT_, #2
0d84c     A8 00 A0 FD | 	call	#pushregs_
0d850     B8 F0 07 F1 | 	add	ptra, #184
0d854     04 4E 05 F1 | 	add	fp, #4
0d858     A7 00 68 FC | 	wrlong	#0, fp
0d85c     04 4E 05 F1 | 	add	fp, #4
0d860     FF FF BF FF 
0d864     A7 FE 6B FC | 	wrlong	##2147483647, fp
0d868     08 4E 85 F1 | 	sub	fp, #8
0d86c     6A 00 00 FF 
0d870     64 E4 05 F1 | 	add	objptr, ##54372
0d874     F2 1E 02 FB | 	rdlong	local01, objptr
0d878     0F 17 02 F6 | 	mov	arg03, local01
0d87c     01 16 66 F0 | 	shl	arg03, #1
0d880     0F 17 02 F1 | 	add	arg03, local01
0d884     02 16 66 F0 | 	shl	arg03, #2
0d888     03 00 00 FF 
0d88c     04 E4 85 F1 | 	sub	objptr, ##1540
0d890     F2 16 02 F1 | 	add	arg03, objptr
0d894     0B 17 02 FB | 	rdlong	arg03, arg03
0d898     A7 16 62 FC | 	wrlong	arg03, fp
0d89c                 | ' 
0d89c                 | ' startline=0 : endline=$7FFFFFFF
0d89c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d89c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0d89c     01 16 0E F2 | 	cmp	arg03, #1 wz
0d8a0     67 00 00 FF 
0d8a4     60 E4 85 F1 | 	sub	objptr, ##52832
0d8a8     3C 00 90 5D |  if_ne	jmp	#LR__1060
0d8ac     18 C8 BF FD | 	call	#_pop
0d8b0     FF 1E 02 F6 | 	mov	local01, result3
0d8b4     0C 4E 05 F1 | 	add	fp, #12
0d8b8     A7 FA 61 FC | 	wrlong	result1, fp
0d8bc     04 4E 05 F1 | 	add	fp, #4
0d8c0     A7 FC 61 FC | 	wrlong	result2, fp
0d8c4     04 4E 05 F1 | 	add	fp, #4
0d8c8     A7 1E 62 FC | 	wrlong	local01, fp
0d8cc     08 4E 85 F1 | 	sub	fp, #8
0d8d0     A7 12 02 F6 | 	mov	arg01, fp
0d8d4     0C 4E 85 F1 | 	sub	fp, #12
0d8d8     40 51 B0 FD | 	call	#_converttoint
0d8dc     04 4E 05 F1 | 	add	fp, #4
0d8e0     A7 FA 61 FC | 	wrlong	result1, fp
0d8e4     04 4E 85 F1 | 	sub	fp, #4
0d8e8                 | LR__1060
0d8e8                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0d8e8     A7 16 02 FB | 	rdlong	arg03, fp
0d8ec     02 16 0E F2 | 	cmp	arg03, #2 wz
0d8f0     7C 00 90 5D |  if_ne	jmp	#LR__1061
0d8f4     D0 C7 BF FD | 	call	#_pop
0d8f8     FF 1E 02 F6 | 	mov	local01, result3
0d8fc     0C 4E 05 F1 | 	add	fp, #12
0d900     A7 FA 61 FC | 	wrlong	result1, fp
0d904     04 4E 05 F1 | 	add	fp, #4
0d908     A7 FC 61 FC | 	wrlong	result2, fp
0d90c     04 4E 05 F1 | 	add	fp, #4
0d910     A7 1E 62 FC | 	wrlong	local01, fp
0d914     08 4E 85 F1 | 	sub	fp, #8
0d918     A7 12 02 F6 | 	mov	arg01, fp
0d91c     0C 4E 85 F1 | 	sub	fp, #12
0d920     F8 50 B0 FD | 	call	#_converttoint
0d924     FD 1E 02 F6 | 	mov	local01, result1
0d928     08 4E 05 F1 | 	add	fp, #8
0d92c     A7 1E 62 FC | 	wrlong	local01, fp
0d930     08 4E 85 F1 | 	sub	fp, #8
0d934     90 C7 BF FD | 	call	#_pop
0d938     FF 1E 02 F6 | 	mov	local01, result3
0d93c     0C 4E 05 F1 | 	add	fp, #12
0d940     A7 FA 61 FC | 	wrlong	result1, fp
0d944     04 4E 05 F1 | 	add	fp, #4
0d948     A7 FC 61 FC | 	wrlong	result2, fp
0d94c     04 4E 05 F1 | 	add	fp, #4
0d950     A7 1E 62 FC | 	wrlong	local01, fp
0d954     08 4E 85 F1 | 	sub	fp, #8
0d958     A7 12 02 F6 | 	mov	arg01, fp
0d95c     0C 4E 85 F1 | 	sub	fp, #12
0d960     B8 50 B0 FD | 	call	#_converttoint
0d964     04 4E 05 F1 | 	add	fp, #4
0d968     A7 FA 61 FC | 	wrlong	result1, fp
0d96c     04 4E 85 F1 | 	sub	fp, #4
0d970                 | LR__1061
0d970                 | ' 
0d970                 | ' 
0d970                 | ' print
0d970     00 12 06 F6 | 	mov	arg01, #0
0d974     F4 42 B1 FD | 	call	#__system___getiolock_0474
0d978     FD 12 02 F6 | 	mov	arg01, result1
0d97c     5C E9 B0 FD | 	call	#__system___lockmem
0d980     00 12 06 F6 | 	mov	arg01, #0
0d984     0A 14 06 F6 | 	mov	arg02, #10
0d988     00 16 06 F6 | 	mov	arg03, #0
0d98c     F8 F5 B0 FD | 	call	#__system___basic_print_char
0d990     00 12 06 F6 | 	mov	arg01, #0
0d994     D4 42 B1 FD | 	call	#__system___getiolock_0474
0d998     FD 00 68 FC | 	wrlong	#0, result1
0d99c     6A 00 00 FF 
0d9a0     68 E4 05 F1 | 	add	objptr, ##54376
0d9a4     F2 20 02 FB | 	rdlong	local02, objptr
0d9a8     11 00 00 FF 
0d9ac     84 E4 05 F1 | 	add	objptr, ##8836
0d9b0     F2 20 62 FC | 	wrlong	local02, objptr
0d9b4     7B 00 00 FF 
0d9b8     EC E4 85 F1 | 	sub	objptr, ##63212
0d9bc                 | ' do 
0d9bc                 | LR__1062
0d9bc     20 4E 05 F1 | 	add	fp, #32
0d9c0     A7 12 02 F6 | 	mov	arg01, fp
0d9c4     20 4E 85 F1 | 	sub	fp, #32
0d9c8     7B 00 00 FF 
0d9cc     EC E4 05 F1 | 	add	objptr, ##63212
0d9d0     F2 14 02 FB | 	rdlong	arg02, objptr
0d9d4     18 16 06 F6 | 	mov	arg03, #24
0d9d8     70 00 00 FF 
0d9dc     2C E4 85 F1 | 	sub	objptr, ##57388
0d9e0     F4 DC B0 FD | 	call	#_psram_spin2_read1
0d9e4     0B 00 00 FF 
0d9e8     C0 E4 85 F1 | 	sub	objptr, ##5824
0d9ec                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0d9ec                 | '   
0d9ec                 | '   if header(0)<> $FFFFFFFF then
0d9ec     20 4E 05 F1 | 	add	fp, #32
0d9f0     A7 20 02 FB | 	rdlong	local02, fp
0d9f4     20 4E 85 F1 | 	sub	fp, #32
0d9f8     FF FF 7F FF 
0d9fc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0da00     A8 00 90 AD |  if_e	jmp	#LR__1064
0da04     38 4E 05 F1 | 	add	fp, #56
0da08     3F 16 06 F6 | 	mov	arg03, #63
0da0c     28 16 62 FD | 	setq	arg03
0da10     A7 00 68 FC | 	wrlong	#0, fp
0da14     A7 12 02 F6 | 	mov	arg01, fp
0da18     10 4E 85 F1 | 	sub	fp, #16
0da1c     A7 14 02 FB | 	rdlong	arg02, fp
0da20     04 4E 05 F1 | 	add	fp, #4
0da24     A7 16 02 FB | 	rdlong	arg03, fp
0da28     2C 4E 85 F1 | 	sub	fp, #44
0da2c     0B 00 00 FF 
0da30     C0 E4 05 F1 | 	add	objptr, ##5824
0da34     A0 DC B0 FD | 	call	#_psram_spin2_read1
0da38     0B 00 00 FF 
0da3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0da40                 | '     longfill(linebuf,0,64)
0da40                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0da40                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0da40     20 4E 05 F1 | 	add	fp, #32
0da44     A7 20 02 FB | 	rdlong	local02, fp
0da48     1C 4E 85 F1 | 	sub	fp, #28
0da4c     A7 1E 02 FB | 	rdlong	local01, fp
0da50     04 4E 85 F1 | 	sub	fp, #4
0da54     0F 21 52 F2 | 	cmps	local02, local01 wc
0da58     30 00 90 CD |  if_b	jmp	#LR__1063
0da5c     20 4E 05 F1 | 	add	fp, #32
0da60     A7 20 02 FB | 	rdlong	local02, fp
0da64     18 4E 85 F1 | 	sub	fp, #24
0da68     A7 16 02 FB | 	rdlong	arg03, fp
0da6c     08 4E 85 F1 | 	sub	fp, #8
0da70     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0da74     14 00 90 1D |  if_a	jmp	#LR__1063
0da78     38 4E 05 F1 | 	add	fp, #56
0da7c     A7 12 02 F6 | 	mov	arg01, fp
0da80     38 4E 85 F1 | 	sub	fp, #56
0da84                 | ' 
0da84                 | ' write(text)
0da84     18 D7 B0 FD | 	call	#_hg010b_spin2_write
0da88                 | ' crlf
0da88     74 D8 B0 FD | 	call	#_hg010b_spin2_crlf
0da8c                 | LR__1063
0da8c     34 4E 05 F1 | 	add	fp, #52
0da90     A7 20 02 FB | 	rdlong	local02, fp
0da94     34 4E 85 F1 | 	sub	fp, #52
0da98     7B 00 00 FF 
0da9c     EC E4 05 F1 | 	add	objptr, ##63212
0daa0     F2 20 62 FC | 	wrlong	local02, objptr
0daa4     7B 00 00 FF 
0daa8     EC E4 85 F1 | 	sub	objptr, ##63212
0daac                 | LR__1064
0daac     34 4E 05 F1 | 	add	fp, #52
0dab0     A7 20 02 FB | 	rdlong	local02, fp
0dab4     34 4E 85 F1 | 	sub	fp, #52
0dab8     FF FF 3F FF 
0dabc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0dac0     20 4E 05 51 |  if_ne	add	fp, #32
0dac4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0dac8     20 4E 85 51 |  if_ne	sub	fp, #32
0dacc     FF FF 7F 5F 
0dad0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0dad4     E4 FE 9F 5D |  if_ne	jmp	#LR__1062
0dad8     A7 F0 03 F6 | 	mov	ptra, fp
0dadc     B2 00 A0 FD | 	call	#popregs_
0dae0                 | _do_list_ret
0dae0     2D 00 64 FD | 	ret
0dae4                 | 
0dae4                 | ' 
0dae4                 | ' '---------------- Clear the program
0dae4                 | ' 
0dae4                 | ' sub do_new
0dae4                 | _do_new
0dae4     03 4A 05 F6 | 	mov	COUNT_, #3
0dae8     A8 00 A0 FD | 	call	#pushregs_
0daec     00 12 06 F6 | 	mov	arg01, #0
0daf0     01 14 66 F6 | 	neg	arg02, #1
0daf4     C4 B1 B0 FD | 	call	#_pslpoke
0daf8     54 00 00 FF 
0dafc     EC E5 05 F1 | 	add	objptr, ##43500
0db00     F2 00 68 FC | 	wrlong	#0, objptr
0db04     15 00 00 FF 
0db08     7C E4 05 F1 | 	add	objptr, ##10876
0db0c     F2 00 68 FC | 	wrlong	#0, objptr
0db10     0F 00 00 FF 
0db14     2C E5 05 F1 | 	add	objptr, ##7980
0db18     F2 00 68 FC | 	wrlong	#0, objptr
0db1c     04 E4 05 F1 | 	add	objptr, #4
0db20     F2 00 68 FC | 	wrlong	#0, objptr
0db24     16 00 00 FF 
0db28     5C E5 85 F1 | 	sub	objptr, ##11612
0db2c     F2 00 68 FC | 	wrlong	#0, objptr
0db30     07 00 00 FF 
0db34     24 E4 05 F1 | 	add	objptr, ##3620
0db38     F2 00 68 FC | 	wrlong	#0, objptr
0db3c     07 00 00 FF 
0db40     20 E4 85 F1 | 	sub	objptr, ##3616
0db44     F2 00 68 FC | 	wrlong	#0, objptr
0db48     0F 00 00 FF 
0db4c     34 E4 05 F1 | 	add	objptr, ##7732
0db50     F2 00 68 FC | 	wrlong	#0, objptr
0db54     08 00 00 FF 
0db58     08 E4 85 F1 | 	sub	objptr, ##4104
0db5c     F2 00 68 FC | 	wrlong	#0, objptr
0db60     04 E4 05 F1 | 	add	objptr, #4
0db64     FF FF FF FF 
0db68     F2 FE 6B FC | 	wrlong	##-1, objptr
0db6c     0F 00 00 FF 
0db70     4C E5 05 F1 | 	add	objptr, ##8012
0db74     F2 00 68 FC | 	wrlong	#0, objptr
0db78                 | ' 
0db78                 | ' pslpoke(0,$FFFFFFFF)
0db78                 | ' varnum=0
0db78                 | ' programstart=0 :runptr=0 : runptr2=0
0db78                 | ' stackpointer=0
0db78                 | ' lineptr=0 
0db78                 | ' programptr=0 : stringptr=0
0db78                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0db78                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0db78     00 1E 06 F6 | 	mov	local01, #0
0db7c     07 00 00 FF 
0db80     40 E5 85 F1 | 	sub	objptr, ##3904
0db84     97 16 48 FB | 	callpa	#(@LR__1071-@LR__1070)>>2,fcache_load_ptr_
0db88                 | LR__1070
0db88     0F 21 02 F6 | 	mov	local02, local01
0db8c     02 20 66 F0 | 	shl	local02, #2
0db90     0F 21 02 F1 | 	add	local02, local01
0db94     02 20 66 F0 | 	shl	local02, #2
0db98     F2 20 02 F1 | 	add	local02, objptr
0db9c     08 20 06 F1 | 	add	local02, #8
0dba0     FF FF FF FF 
0dba4     10 FF 6B FC | 	wrlong	##-1, local02
0dba8     01 1E 06 F1 | 	add	local01, #1
0dbac     81 1E 56 F2 | 	cmps	local01, #129 wc
0dbb0     D4 FF 9F CD |  if_b	jmp	#LR__1070
0dbb4                 | LR__1071
0dbb4     72 00 00 FF 
0dbb8     7C E4 85 F1 | 	sub	objptr, ##58492
0dbbc                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0dbbc     00 1E 06 F6 | 	mov	local01, #0
0dbc0                 | LR__1072
0dbc0     0F 21 02 F6 | 	mov	local02, local01
0dbc4     02 20 66 F0 | 	shl	local02, #2
0dbc8     7B 00 00 FF 
0dbcc     18 E4 05 F1 | 	add	objptr, ##63000
0dbd0     F2 20 02 F1 | 	add	local02, objptr
0dbd4     10 21 0A FB | 	rdlong	local02, local02 wz
0dbd8     7B 00 00 FF 
0dbdc     18 E4 85 F1 | 	sub	objptr, ##63000
0dbe0     34 00 90 AD |  if_e	jmp	#LR__1073
0dbe4     0F 13 02 F6 | 	mov	arg01, local01
0dbe8     00 14 06 F6 | 	mov	arg02, #0
0dbec     00 16 06 F6 | 	mov	arg03, #0
0dbf0     38 C6 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dbf4     0F 21 02 F6 | 	mov	local02, local01
0dbf8     02 20 66 F0 | 	shl	local02, #2
0dbfc     7B 00 00 FF 
0dc00     18 E4 05 F1 | 	add	objptr, ##63000
0dc04     F2 20 02 F1 | 	add	local02, objptr
0dc08     10 13 02 FB | 	rdlong	arg01, local02
0dc0c     7B 00 00 FF 
0dc10     18 E4 85 F1 | 	sub	objptr, ##63000
0dc14     48 26 B1 FD | 	call	#__system___gc_free
0dc18                 | LR__1073
0dc18     7B 00 00 FF 
0dc1c     6C E4 05 F1 | 	add	objptr, ##63084
0dc20     00 C0 9F FF 
0dc24     F2 00 68 FC | 	wrlong	##1065353216, objptr
0dc28     04 E4 05 F1 | 	add	objptr, #4
0dc2c     00 C0 9F FF 
0dc30     F2 00 68 FC | 	wrlong	##1065353216, objptr
0dc34     7B 00 00 FF 
0dc38     70 E4 85 F1 | 	sub	objptr, ##63088
0dc3c     F2 22 02 FB | 	rdlong	local03, objptr
0dc40     7B 00 00 FF 
0dc44     5C E4 05 F1 | 	add	objptr, ##63068
0dc48     F2 22 62 FC | 	wrlong	local03, objptr
0dc4c     7B 00 00 FF 
0dc50     5C E4 85 F1 | 	sub	objptr, ##63068
0dc54     11 12 06 F6 | 	mov	arg01, #17
0dc58     08 14 06 F6 | 	mov	arg02, #8
0dc5c     10 16 06 F6 | 	mov	arg03, #16
0dc60     C8 C5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dc64     10 12 06 F6 | 	mov	arg01, #16
0dc68     20 14 06 F6 | 	mov	arg02, #32
0dc6c     20 16 06 F6 | 	mov	arg03, #32
0dc70     B8 C5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dc74     50 A3 B0 FD | 	call	#_init_audio
0dc78     01 1E 06 F1 | 	add	local01, #1
0dc7c     10 1E 56 F2 | 	cmps	local01, #16 wc
0dc80     3C FF 9F CD |  if_b	jmp	#LR__1072
0dc84     A7 F0 03 F6 | 	mov	ptra, fp
0dc88     B2 00 A0 FD | 	call	#popregs_
0dc8c                 | _do_new_ret
0dc8c     2D 00 64 FD | 	ret
0dc90                 | 
0dc90                 | ' 
0dc90                 | ' '----------------------- goto
0dc90                 | ' sub do_fast_goto
0dc90                 | _do_fast_goto
0dc90     02 4A 05 F6 | 	mov	COUNT_, #2
0dc94     A8 00 A0 FD | 	call	#pushregs_
0dc98                 | _do_fast_goto_enter
0dc98     6A 00 00 FF 
0dc9c     64 E4 05 F1 | 	add	objptr, ##54372
0dca0     F2 12 02 FB | 	rdlong	arg01, objptr
0dca4     09 1F 02 F6 | 	mov	local01, arg01
0dca8     01 1E 66 F0 | 	shl	local01, #1
0dcac     09 1F 02 F1 | 	add	local01, arg01
0dcb0     02 1E 66 F0 | 	shl	local01, #2
0dcb4     03 00 00 FF 
0dcb8     04 E4 85 F1 | 	sub	objptr, ##1540
0dcbc     F2 1E 02 F1 | 	add	local01, objptr
0dcc0     0F 21 02 FB | 	rdlong	local02, local01
0dcc4     10 13 02 F6 | 	mov	arg01, local02
0dcc8     67 00 00 FF 
0dccc     60 E4 85 F1 | 	sub	objptr, ##52832
0dcd0     18 B1 B0 FD | 	call	#_pslpeek
0dcd4     FD 12 02 F6 | 	mov	arg01, result1
0dcd8                 | ' 
0dcd8                 | ' testptr=compiledline(lineptr_e).result.uresult
0dcd8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0dcd8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0dcd8     6A 00 00 FF 
0dcdc     64 E4 05 F1 | 	add	objptr, ##54372
0dce0     F2 FA 01 FB | 	rdlong	result1, objptr
0dce4     FD 1E 02 F6 | 	mov	local01, result1
0dce8     01 1E 66 F0 | 	shl	local01, #1
0dcec     FD 1E 02 F1 | 	add	local01, result1
0dcf0     02 1E 66 F0 | 	shl	local01, #2
0dcf4     03 00 00 FF 
0dcf8     04 E4 85 F1 | 	sub	objptr, ##1540
0dcfc     F2 1E 02 F1 | 	add	local01, objptr
0dd00     04 1E 06 F1 | 	add	local01, #4
0dd04     0F 1F 02 FB | 	rdlong	local01, local01
0dd08     0F 13 0A F2 | 	cmp	arg01, local01 wz
0dd0c     67 00 00 FF 
0dd10     60 E4 85 F1 | 	sub	objptr, ##52832
0dd14     58 00 90 5D |  if_ne	jmp	#LR__1080
0dd18     79 00 00 FF 
0dd1c     94 E5 05 F1 | 	add	objptr, ##62356
0dd20     F2 20 62 FC | 	wrlong	local02, objptr
0dd24     0F 00 00 FF 
0dd28     34 E5 85 F1 | 	sub	objptr, ##7988
0dd2c     F2 20 02 FB | 	rdlong	local02, objptr
0dd30     01 20 86 F1 | 	sub	local02, #1
0dd34     04 E4 05 F1 | 	add	objptr, #4
0dd38     F2 20 62 FC | 	wrlong	local02, objptr
0dd3c                 | '   runptr=testptr
0dd3c                 | '   lineptr_e=lineptr-1
0dd3c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0dd3c     0F 00 00 FF 
0dd40     54 E5 05 F1 | 	add	objptr, ##8020
0dd44     F2 20 02 FB | 	rdlong	local02, objptr
0dd48     79 00 00 FF 
0dd4c     B8 E5 85 F1 | 	sub	objptr, ##62392
0dd50     FF FF 3F FF 
0dd54     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0dd58     79 00 00 AF 
0dd5c     B8 E5 05 A1 |  if_e	add	objptr, ##62392
0dd60     F2 00 68 AC |  if_e	wrlong	#0, objptr
0dd64     79 00 00 AF 
0dd68     B8 E5 85 A1 |  if_e	sub	objptr, ##62392
0dd6c     04 00 90 FD | 	jmp	#LR__1081
0dd70                 | LR__1080
0dd70     0C 00 B0 FD | 	call	#_do_find_goto
0dd74                 | LR__1081
0dd74     A7 F0 03 F6 | 	mov	ptra, fp
0dd78     B2 00 A0 FD | 	call	#popregs_
0dd7c                 | _do_fast_goto_ret
0dd7c     2D 00 64 FD | 	ret
0dd80                 | 
0dd80                 | ' 
0dd80                 | ' 
0dd80                 | ' 
0dd80                 | ' 
0dd80                 | ' sub do_find_goto
0dd80                 | _do_find_goto
0dd80     03 4A 05 F6 | 	mov	COUNT_, #3
0dd84     A8 00 A0 FD | 	call	#pushregs_
0dd88     24 F0 07 F1 | 	add	ptra, #36
0dd8c                 | _do_find_goto_enter
0dd8c     6A 00 00 FF 
0dd90     64 E4 05 F1 | 	add	objptr, ##54372
0dd94     F2 1E 02 FB | 	rdlong	local01, objptr
0dd98     0F 21 02 F6 | 	mov	local02, local01
0dd9c     01 20 66 F0 | 	shl	local02, #1
0dda0     0F 21 02 F1 | 	add	local02, local01
0dda4     02 20 66 F0 | 	shl	local02, #2
0dda8     03 00 00 FF 
0ddac     04 E4 85 F1 | 	sub	objptr, ##1540
0ddb0     F2 20 02 F1 | 	add	local02, objptr
0ddb4     04 20 06 F1 | 	add	local02, #4
0ddb8     10 21 02 FB | 	rdlong	local02, local02
0ddbc     A7 20 62 FC | 	wrlong	local02, fp
0ddc0     03 00 00 FF 
0ddc4     08 E4 05 F1 | 	add	objptr, ##1544
0ddc8     F2 22 02 FB | 	rdlong	local03, objptr
0ddcc     6A 00 00 FF 
0ddd0     68 E4 85 F1 | 	sub	objptr, ##54376
0ddd4     04 4E 05 F1 | 	add	fp, #4
0ddd8     A7 22 62 FC | 	wrlong	local03, fp
0dddc     04 4E 85 F1 | 	sub	fp, #4
0dde0                 | ' 
0dde0                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0dde0                 | '  ' print "find goto"                                                                     'print gotoline 
0dde0                 | ' gotoptr=programstart
0dde0                 | ' do
0dde0                 | LR__1090
0dde0     0C 4E 05 F1 | 	add	fp, #12
0dde4     A7 12 02 F6 | 	mov	arg01, fp
0dde8     08 4E 85 F1 | 	sub	fp, #8
0ddec     A7 14 02 FB | 	rdlong	arg02, fp
0ddf0     04 4E 85 F1 | 	sub	fp, #4
0ddf4     18 16 06 F6 | 	mov	arg03, #24
0ddf8     0B 00 00 FF 
0ddfc     C0 E4 05 F1 | 	add	objptr, ##5824
0de00     D4 D8 B0 FD | 	call	#_psram_spin2_read1
0de04     0B 00 00 FF 
0de08     C0 E4 85 F1 | 	sub	objptr, ##5824
0de0c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0de0c                 | '   if gotoheader(0)<>$FFFFFFFF then
0de0c     0C 4E 05 F1 | 	add	fp, #12
0de10     A7 22 02 FB | 	rdlong	local03, fp
0de14     0C 4E 85 F1 | 	sub	fp, #12
0de18     FF FF 7F FF 
0de1c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0de20     24 00 90 AD |  if_e	jmp	#LR__1091
0de24     04 4E 05 F1 | 	add	fp, #4
0de28     A7 22 02 FB | 	rdlong	local03, fp
0de2c     04 4E 05 F1 | 	add	fp, #4
0de30     A7 22 62 FC | 	wrlong	local03, fp
0de34     18 4E 05 F1 | 	add	fp, #24
0de38     A7 22 02 FB | 	rdlong	local03, fp
0de3c     1C 4E 85 F1 | 	sub	fp, #28
0de40     A7 22 62 FC | 	wrlong	local03, fp
0de44     04 4E 85 F1 | 	sub	fp, #4
0de48                 | LR__1091
0de48     20 4E 05 F1 | 	add	fp, #32
0de4c     A7 22 02 FB | 	rdlong	local03, fp
0de50     20 4E 85 F1 | 	sub	fp, #32
0de54     FF FF 3F FF 
0de58     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0de5c     0C 4E 05 51 |  if_ne	add	fp, #12
0de60     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0de64     0C 4E 85 51 |  if_ne	sub	fp, #12
0de68     FF FF 7F 5F 
0de6c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0de70     18 00 90 AD |  if_e	jmp	#LR__1092
0de74     0C 4E 05 F1 | 	add	fp, #12
0de78     A7 22 02 FB | 	rdlong	local03, fp
0de7c     0C 4E 85 F1 | 	sub	fp, #12
0de80     A7 20 02 FB | 	rdlong	local02, fp
0de84     10 23 0A F2 | 	cmp	local03, local02 wz
0de88     54 FF 9F 5D |  if_ne	jmp	#LR__1090
0de8c                 | LR__1092
0de8c                 | ' 
0de8c                 | ' if gotoheader(0)=gotoline then
0de8c     0C 4E 05 F1 | 	add	fp, #12
0de90     A7 22 02 FB | 	rdlong	local03, fp
0de94     0C 4E 85 F1 | 	sub	fp, #12
0de98     A7 1E 02 FB | 	rdlong	local01, fp
0de9c     0F 23 0A F2 | 	cmp	local03, local01 wz
0dea0     D8 00 90 5D |  if_ne	jmp	#LR__1093
0dea4     6A 00 00 FF 
0dea8     64 E4 05 F1 | 	add	objptr, ##54372
0deac     F2 1E 02 FB | 	rdlong	local01, objptr
0deb0     0F 21 02 F6 | 	mov	local02, local01
0deb4     01 20 66 F0 | 	shl	local02, #1
0deb8     0F 21 02 F1 | 	add	local02, local01
0debc     02 20 66 F0 | 	shl	local02, #2
0dec0     03 00 00 FF 
0dec4     04 E4 85 F1 | 	sub	objptr, ##1540
0dec8     F2 20 02 F1 | 	add	local02, objptr
0decc     08 4E 05 F1 | 	add	fp, #8
0ded0     A7 22 02 FB | 	rdlong	local03, fp
0ded4     10 23 62 FC | 	wrlong	local03, local02
0ded8     03 00 00 FF 
0dedc     04 E4 05 F1 | 	add	objptr, ##1540
0dee0     F2 1E 02 FB | 	rdlong	local01, objptr
0dee4     0F 21 02 F6 | 	mov	local02, local01
0dee8     01 20 66 F0 | 	shl	local02, #1
0deec     0F 21 02 F1 | 	add	local02, local01
0def0     02 20 66 F0 | 	shl	local02, #2
0def4     03 00 00 FF 
0def8     04 E4 85 F1 | 	sub	objptr, ##1540
0defc     F2 20 02 F1 | 	add	local02, objptr
0df00     08 20 06 F1 | 	add	local02, #8
0df04     10 9D 68 FC | 	wrlong	#78, local02
0df08     03 00 00 FF 
0df0c     04 E4 05 F1 | 	add	objptr, ##1540
0df10     F2 20 02 FB | 	rdlong	local02, objptr
0df14     10 13 02 F6 | 	mov	arg01, local02
0df18     01 12 66 F0 | 	shl	arg01, #1
0df1c     10 13 02 F1 | 	add	arg01, local02
0df20     02 12 66 F0 | 	shl	arg01, #2
0df24     03 00 00 FF 
0df28     04 E4 85 F1 | 	sub	objptr, ##1540
0df2c     F2 12 02 F1 | 	add	arg01, objptr
0df30     12 00 00 FF 
0df34     3C E5 05 F1 | 	add	objptr, ##9532
0df38     F2 14 02 FB | 	rdlong	arg02, objptr
0df3c     02 22 06 F6 | 	mov	local03, #2
0df40     10 23 02 F1 | 	add	local03, local02
0df44     14 00 00 FF 
0df48     54 E5 85 F1 | 	sub	objptr, ##10580
0df4c     F2 16 02 FB | 	rdlong	arg03, objptr
0df50     0B 23 02 FD | 	qmul	local03, arg03
0df54     08 4E 85 F1 | 	sub	fp, #8
0df58     59 00 00 FF 
0df5c     88 E5 85 F1 | 	sub	objptr, ##45960
0df60     18 22 62 FD | 	getqx	local03
0df64     11 15 02 F1 | 	add	arg02, local03
0df68     08 D8 B0 FD | 	call	#_psram_spin2_write
0df6c     0B 00 00 FF 
0df70     C0 E4 85 F1 | 	sub	objptr, ##5824
0df74     18 FD BF FD | 	call	#_do_fast_goto
0df78     08 00 90 FD | 	jmp	#LR__1094
0df7c                 | LR__1093
0df7c     26 12 06 F6 | 	mov	arg01, #38
0df80     D4 AB B0 FD | 	call	#_printerror
0df84                 | LR__1094
0df84     A7 F0 03 F6 | 	mov	ptra, fp
0df88     B2 00 A0 FD | 	call	#popregs_
0df8c                 | _do_find_goto_ret
0df8c     2D 00 64 FD | 	ret
0df90                 | 
0df90                 | ' 
0df90                 | ' sub do_slow_goto
0df90                 | _do_slow_goto
0df90                 | _do_slow_goto_ret
0df90     2D 00 64 FD | 	ret
0df94                 | 
0df94                 | ' 
0df94                 | ' '----------------------- Error processing
0df94                 | ' 
0df94                 | ' sub do_error
0df94                 | _do_error
0df94     01 4A 05 F6 | 	mov	COUNT_, #1
0df98     A8 00 A0 FD | 	call	#pushregs_
0df9c     6A 00 00 FF 
0dfa0     64 E4 05 F1 | 	add	objptr, ##54372
0dfa4     F2 18 02 FB | 	rdlong	arg04, objptr
0dfa8     0C 17 02 F6 | 	mov	arg03, arg04
0dfac     01 16 66 F0 | 	shl	arg03, #1
0dfb0     0C 17 02 F1 | 	add	arg03, arg04
0dfb4     02 16 66 F0 | 	shl	arg03, #2
0dfb8     03 00 00 FF 
0dfbc     04 E4 85 F1 | 	sub	objptr, ##1540
0dfc0     F2 16 02 F1 | 	add	arg03, objptr
0dfc4     0B 1F 02 FB | 	rdlong	local01, arg03
0dfc8                 | ' r=compiledline(lineptr_e).result.uresult
0dfc8                 | ' print "Error ";r;": ";errors$(r)
0dfc8     00 12 06 F6 | 	mov	arg01, #0
0dfcc     67 00 00 FF 
0dfd0     60 E4 85 F1 | 	sub	objptr, ##52832
0dfd4     94 3C B1 FD | 	call	#__system___getiolock_0474
0dfd8     FD 12 02 F6 | 	mov	arg01, result1
0dfdc     FC E2 B0 FD | 	call	#__system___lockmem
0dfe0     5F 01 00 FF 
0dfe4     DB 14 06 F6 | 	mov	arg02, ##@LR__4933
0dfe8     00 12 06 F6 | 	mov	arg01, #0
0dfec     00 16 06 F6 | 	mov	arg03, #0
0dff0     EC EF B0 FD | 	call	#__system___basic_print_string
0dff4     00 12 06 F6 | 	mov	arg01, #0
0dff8     0F 15 02 F6 | 	mov	arg02, local01
0dffc     00 16 06 F6 | 	mov	arg03, #0
0e000     0A 18 06 F6 | 	mov	arg04, #10
0e004     5C F0 B0 FD | 	call	#__system___basic_print_unsigned
0e008     5F 01 00 FF 
0e00c     E2 14 06 F6 | 	mov	arg02, ##@LR__4934
0e010     00 12 06 F6 | 	mov	arg01, #0
0e014     00 16 06 F6 | 	mov	arg03, #0
0e018     C4 EF B0 FD | 	call	#__system___basic_print_string
0e01c     02 1E 66 F0 | 	shl	local01, #2
0e020     65 00 00 FF 
0e024     60 E4 05 F1 | 	add	objptr, ##51808
0e028     F2 1E 02 F1 | 	add	local01, objptr
0e02c     0F 15 02 FB | 	rdlong	arg02, local01
0e030     00 12 06 F6 | 	mov	arg01, #0
0e034     00 16 06 F6 | 	mov	arg03, #0
0e038     65 00 00 FF 
0e03c     60 E4 85 F1 | 	sub	objptr, ##51808
0e040     9C EF B0 FD | 	call	#__system___basic_print_string
0e044     00 12 06 F6 | 	mov	arg01, #0
0e048     0A 14 06 F6 | 	mov	arg02, #10
0e04c     00 16 06 F6 | 	mov	arg03, #0
0e050     34 EF B0 FD | 	call	#__system___basic_print_char
0e054     00 12 06 F6 | 	mov	arg01, #0
0e058     10 3C B1 FD | 	call	#__system___getiolock_0474
0e05c     FD 00 68 FC | 	wrlong	#0, result1
0e060     A7 F0 03 F6 | 	mov	ptra, fp
0e064     B2 00 A0 FD | 	call	#popregs_
0e068                 | _do_error_ret
0e068     2D 00 64 FD | 	ret
0e06c                 | 
0e06c                 | ' 
0e06c                 | ' 
0e06c                 | ' '------------------ Assigning to a variable  
0e06c                 | ' 
0e06c                 | ' function  convertstring(psaddr as ulong) as string
0e06c                 | _convertstring
0e06c     04 4A 05 F6 | 	mov	COUNT_, #4
0e070     A8 00 A0 FD | 	call	#pushregs_
0e074     09 1F 02 F6 | 	mov	local01, arg01
0e078     70 AD B0 FD | 	call	#_pslpeek
0e07c     FD 20 02 F6 | 	mov	local02, result1
0e080     5F 01 00 FF 
0e084     E5 22 06 F6 | 	mov	local03, ##@LR__4935
0e088                 | ' 'print "in convertstring: psaddr=";psaddr
0e088                 | ' l=pslpeek(psaddr)
0e088                 | ' 'print "in convertstring: len=";l
0e088                 | ' s="" 
0e088                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0e088     01 24 06 F6 | 	mov	local04, #1
0e08c     01 20 06 F1 | 	add	local02, #1
0e090                 | LR__1100
0e090     10 25 52 F2 | 	cmps	local04, local02 wc
0e094     30 00 90 3D |  if_ae	jmp	#LR__1101
0e098     0F 13 02 F6 | 	mov	arg01, local01
0e09c     03 12 06 F1 | 	add	arg01, #3
0e0a0     12 13 02 F1 | 	add	arg01, local04
0e0a4     EC AC B0 FD | 	call	#_pspeek
0e0a8     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0e0ac     34 04 B1 FD | 	call	#__system__Chr_S
0e0b0     FD 14 02 F6 | 	mov	arg02, result1
0e0b4     11 13 02 F6 | 	mov	arg01, local03
0e0b8     7C E2 B0 FD | 	call	#__system___string_concat
0e0bc     FD 22 02 F6 | 	mov	local03, result1
0e0c0     01 24 06 F1 | 	add	local04, #1
0e0c4     C8 FF 9F FD | 	jmp	#LR__1100
0e0c8                 | LR__1101
0e0c8                 | ' 'print "in convertstring: str=";s
0e0c8                 | ' return s
0e0c8     11 FB 01 F6 | 	mov	result1, local03
0e0cc     A7 F0 03 F6 | 	mov	ptra, fp
0e0d0     B2 00 A0 FD | 	call	#popregs_
0e0d4                 | _convertstring_ret
0e0d4     2D 00 64 FD | 	ret
0e0d8                 | 
0e0d8                 | ' 
0e0d8                 | ' sub do_assign
0e0d8                 | _do_assign
0e0d8     05 4A 05 F6 | 	mov	COUNT_, #5
0e0dc     A8 00 A0 FD | 	call	#pushregs_
0e0e0     44 F0 07 F1 | 	add	ptra, #68
0e0e4     6A 00 00 FF 
0e0e8     64 E4 05 F1 | 	add	objptr, ##54372
0e0ec     F2 16 02 FB | 	rdlong	arg03, objptr
0e0f0     0B 15 02 F6 | 	mov	arg02, arg03
0e0f4     01 14 66 F0 | 	shl	arg02, #1
0e0f8     0B 15 02 F1 | 	add	arg02, arg03
0e0fc     02 14 66 F0 | 	shl	arg02, #2
0e100     03 00 00 FF 
0e104     04 E4 85 F1 | 	sub	objptr, ##1540
0e108     F2 14 02 F1 | 	add	arg02, objptr
0e10c     0A 15 02 FB | 	rdlong	arg02, arg02
0e110     18 4E 05 F1 | 	add	fp, #24
0e114     A7 14 62 FC | 	wrlong	arg02, fp
0e118                 | ' 
0e118                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0e118                 | ' 
0e118                 | ' if variables(varnum).vartype<array_no_type then 
0e118     18 4E 85 F1 | 	sub	fp, #24
0e11c     04 14 66 F0 | 	shl	arg02, #4
0e120     32 00 00 FF 
0e124     74 E4 85 F1 | 	sub	objptr, ##25716
0e128     F2 14 02 F1 | 	add	arg02, objptr
0e12c     0C 14 06 F1 | 	add	arg02, #12
0e130     0A 17 02 FB | 	rdlong	arg03, arg02
0e134     00 17 16 F2 | 	cmp	arg03, #256 wc
0e138     34 00 00 FF 
0e13c     EC E5 85 F1 | 	sub	objptr, ##27116
0e140     18 01 90 3D |  if_ae	jmp	#LR__1110
0e144     80 BF BF FD | 	call	#_pop
0e148     A7 FA 61 FC | 	wrlong	result1, fp
0e14c     04 4E 05 F1 | 	add	fp, #4
0e150     A7 FC 61 FC | 	wrlong	result2, fp
0e154     04 4E 05 F1 | 	add	fp, #4
0e158     A7 FE 61 FC | 	wrlong	result3, fp
0e15c     08 4E 85 F1 | 	sub	fp, #8
0e160     A7 16 02 FB | 	rdlong	arg03, fp
0e164     04 4E 05 F1 | 	add	fp, #4
0e168     A7 14 02 FB | 	rdlong	arg02, fp
0e16c     14 4E 05 F1 | 	add	fp, #20
0e170     A7 12 02 FB | 	rdlong	arg01, fp
0e174     04 12 66 F0 | 	shl	arg01, #4
0e178     34 00 00 FF 
0e17c     EC E5 05 F1 | 	add	objptr, ##27116
0e180     F2 12 02 F1 | 	add	arg01, objptr
0e184     04 12 06 F1 | 	add	arg01, #4
0e188     09 17 62 FC | 	wrlong	arg03, arg01
0e18c     A7 16 02 FB | 	rdlong	arg03, fp
0e190     04 16 66 F0 | 	shl	arg03, #4
0e194     F2 16 02 F1 | 	add	arg03, objptr
0e198     08 16 06 F1 | 	add	arg03, #8
0e19c     0B 15 62 FC | 	wrlong	arg02, arg03
0e1a0     A7 16 02 FB | 	rdlong	arg03, fp
0e1a4     04 16 66 F0 | 	shl	arg03, #4
0e1a8     F2 16 02 F1 | 	add	arg03, objptr
0e1ac     10 4E 85 F1 | 	sub	fp, #16
0e1b0     A7 14 02 FB | 	rdlong	arg02, fp
0e1b4     0C 16 06 F1 | 	add	arg03, #12
0e1b8     0B 15 62 FC | 	wrlong	arg02, arg03
0e1bc                 | '   t1=pop() 
0e1bc                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0e1bc                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0e1bc                 | '   if variables(varnum).vartype<>result_string2 then return
0e1bc     10 4E 05 F1 | 	add	fp, #16
0e1c0     A7 16 02 FB | 	rdlong	arg03, fp
0e1c4     18 4E 85 F1 | 	sub	fp, #24
0e1c8     04 16 66 F0 | 	shl	arg03, #4
0e1cc     F2 16 02 F1 | 	add	arg03, objptr
0e1d0     0C 16 06 F1 | 	add	arg03, #12
0e1d4     0B 17 02 FB | 	rdlong	arg03, arg03
0e1d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
0e1dc     34 00 00 FF 
0e1e0     EC E5 85 F1 | 	sub	objptr, ##27116
0e1e4     E4 04 90 5D |  if_ne	jmp	#LR__1133
0e1e8     18 4E 05 F1 | 	add	fp, #24
0e1ec     A7 16 02 FB | 	rdlong	arg03, fp
0e1f0     0B 1F 02 F6 | 	mov	local01, arg03
0e1f4     04 1E 66 F0 | 	shl	local01, #4
0e1f8     34 00 00 FF 
0e1fc     EC E5 05 F1 | 	add	objptr, ##27116
0e200     F2 1E 02 F1 | 	add	local01, objptr
0e204     18 4E 85 F1 | 	sub	fp, #24
0e208     04 16 66 F0 | 	shl	arg03, #4
0e20c     F2 16 02 F1 | 	add	arg03, objptr
0e210     04 16 06 F1 | 	add	arg03, #4
0e214     0B 13 02 FB | 	rdlong	arg01, arg03
0e218     34 00 00 FF 
0e21c     EC E5 85 F1 | 	sub	objptr, ##27116
0e220     48 FE BF FD | 	call	#_convertstring
0e224     04 1E 06 F1 | 	add	local01, #4
0e228     0F FB 61 FC | 	wrlong	result1, local01
0e22c     18 4E 05 F1 | 	add	fp, #24
0e230     A7 1E 02 FB | 	rdlong	local01, fp
0e234     18 4E 85 F1 | 	sub	fp, #24
0e238     04 1E 66 F0 | 	shl	local01, #4
0e23c     34 00 00 FF 
0e240     EC E5 05 F1 | 	add	objptr, ##27116
0e244     F2 1E 02 F1 | 	add	local01, objptr
0e248     0C 1E 06 F1 | 	add	local01, #12
0e24c     0F 3F 68 FC | 	wrlong	#31, local01
0e250                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0e250                 | '   variables(varnum).vartype=result_string
0e250                 | '   return
0e250     34 00 00 FF 
0e254     EC E5 85 F1 | 	sub	objptr, ##27116
0e258     70 04 90 FD | 	jmp	#LR__1133
0e25c                 | LR__1110
0e25c                 | ' for i=0 to 2 : arrid(i)=0 : next i
0e25c     1C 4E 05 F1 | 	add	fp, #28
0e260     A7 00 68 FC | 	wrlong	#0, fp
0e264     97 16 48 FB | 	callpa	#(@LR__1112-@LR__1111)>>2,fcache_load_ptr_
0e268                 | LR__1111
0e268     A7 1E 02 FB | 	rdlong	local01, fp
0e26c     02 1E 66 F0 | 	shl	local01, #2
0e270     18 4E 05 F1 | 	add	fp, #24
0e274     A7 1E 02 F1 | 	add	local01, fp
0e278     0F 01 68 FC | 	wrlong	#0, local01
0e27c     18 4E 85 F1 | 	sub	fp, #24
0e280     A7 1E 02 FB | 	rdlong	local01, fp
0e284     01 1E 06 F1 | 	add	local01, #1
0e288     A7 1E 62 FC | 	wrlong	local01, fp
0e28c     03 1E 16 F2 | 	cmp	local01, #3 wc
0e290     D4 FF 9F CD |  if_b	jmp	#LR__1111
0e294                 | LR__1112
0e294     6A 00 00 FF 
0e298     64 E4 05 F1 | 	add	objptr, ##54372
0e29c     F2 16 02 FB | 	rdlong	arg03, objptr
0e2a0     0B 1F 02 F6 | 	mov	local01, arg03
0e2a4     01 1E 66 F0 | 	shl	local01, #1
0e2a8     0B 1F 02 F1 | 	add	local01, arg03
0e2ac     02 1E 66 F0 | 	shl	local01, #2
0e2b0     03 00 00 FF 
0e2b4     04 E4 85 F1 | 	sub	objptr, ##1540
0e2b8     F2 1E 02 F1 | 	add	local01, objptr
0e2bc     04 1E 06 F1 | 	add	local01, #4
0e2c0     0F 21 02 FB | 	rdlong	local02, local01
0e2c4     04 4E 05 F1 | 	add	fp, #4
0e2c8     A7 20 62 FC | 	wrlong	local02, fp
0e2cc     20 4E 85 F1 | 	sub	fp, #32
0e2d0     67 00 00 FF 
0e2d4     60 E4 85 F1 | 	sub	objptr, ##52832
0e2d8     EC BD BF FD | 	call	#_pop
0e2dc     A7 FA 61 FC | 	wrlong	result1, fp
0e2e0     04 4E 05 F1 | 	add	fp, #4
0e2e4     A7 FC 61 FC | 	wrlong	result2, fp
0e2e8     04 4E 05 F1 | 	add	fp, #4
0e2ec     A7 FE 61 FC | 	wrlong	result3, fp
0e2f0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0e2f0                 | ' t1=pop() ' var value
0e2f0                 | ' if numpar>0 then
0e2f0     18 4E 05 F1 | 	add	fp, #24
0e2f4     A7 22 02 FB | 	rdlong	local03, fp
0e2f8     20 4E 85 F1 | 	sub	fp, #32
0e2fc     01 22 16 F2 | 	cmp	local03, #1 wc
0e300     78 00 90 CD |  if_b	jmp	#LR__1115
0e304                 | '   for i=numpar to 1 step -1
0e304     20 4E 05 F1 | 	add	fp, #32
0e308     A7 24 0A FB | 	rdlong	local04, fp wz
0e30c     04 4E 85 F1 | 	sub	fp, #4
0e310     A7 24 62 FC | 	wrlong	local04, fp
0e314     1C 4E 85 F1 | 	sub	fp, #28
0e318     60 00 90 AD |  if_e	jmp	#LR__1114
0e31c                 | LR__1113
0e31c     A8 BD BF FD | 	call	#_pop
0e320     0C 4E 05 F1 | 	add	fp, #12
0e324     A7 FA 61 FC | 	wrlong	result1, fp
0e328     04 4E 05 F1 | 	add	fp, #4
0e32c     A7 FC 61 FC | 	wrlong	result2, fp
0e330     04 4E 05 F1 | 	add	fp, #4
0e334     A7 FE 61 FC | 	wrlong	result3, fp
0e338     08 4E 05 F1 | 	add	fp, #8
0e33c     A7 22 02 FB | 	rdlong	local03, fp
0e340     01 22 86 F1 | 	sub	local03, #1
0e344     02 22 66 F0 | 	shl	local03, #2
0e348     18 4E 05 F1 | 	add	fp, #24
0e34c     A7 22 02 F1 | 	add	local03, fp
0e350     28 4E 85 F1 | 	sub	fp, #40
0e354     A7 12 02 F6 | 	mov	arg01, fp
0e358     0C 4E 85 F1 | 	sub	fp, #12
0e35c     BC 46 B0 FD | 	call	#_converttoint
0e360     11 FB 61 FC | 	wrlong	result1, local03
0e364     1C 4E 05 F1 | 	add	fp, #28
0e368     A7 24 02 FB | 	rdlong	local04, fp
0e36c     01 24 8E F1 | 	sub	local04, #1 wz
0e370     A7 24 62 FC | 	wrlong	local04, fp
0e374     1C 4E 85 F1 | 	sub	fp, #28
0e378     A0 FF 9F 5D |  if_ne	jmp	#LR__1113
0e37c                 | LR__1114
0e37c                 | LR__1115
0e37c     18 4E 05 F1 | 	add	fp, #24
0e380     A7 1E 02 FB | 	rdlong	local01, fp
0e384     04 1E 66 F0 | 	shl	local01, #4
0e388     34 00 00 FF 
0e38c     EC E5 05 F1 | 	add	objptr, ##27116
0e390     F2 1E 02 F1 | 	add	local01, objptr
0e394     04 1E 06 F1 | 	add	local01, #4
0e398     0F 13 02 FB | 	rdlong	arg01, local01
0e39c     0C 4E 05 F1 | 	add	fp, #12
0e3a0     A7 12 62 FC | 	wrlong	arg01, fp
0e3a4     24 4E 85 F1 | 	sub	fp, #36
0e3a8     34 00 00 FF 
0e3ac     EC E5 85 F1 | 	sub	objptr, ##27116
0e3b0     38 AA B0 FD | 	call	#_pslpeek
0e3b4     FD 24 32 F9 | 	getword	local04, result1, #0
0e3b8     28 4E 05 F1 | 	add	fp, #40
0e3bc     A7 24 62 FC | 	wrlong	local04, fp
0e3c0     04 4E 85 F1 | 	sub	fp, #4
0e3c4     A7 12 02 FB | 	rdlong	arg01, fp
0e3c8     24 4E 85 F1 | 	sub	fp, #36
0e3cc     02 12 06 F1 | 	add	arg01, #2
0e3d0     C0 A9 B0 FD | 	call	#_pspeek
0e3d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e3d8     2C 4E 05 F1 | 	add	fp, #44
0e3dc     A7 FA 61 FC | 	wrlong	result1, fp
0e3e0                 | ' esize=pspeek(arrptr+2)
0e3e0                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0e3e0     08 4E 85 F1 | 	sub	fp, #8
0e3e4     A7 12 02 FB | 	rdlong	arg01, fp
0e3e8     24 4E 85 F1 | 	sub	fp, #36
0e3ec     04 12 06 F1 | 	add	arg01, #4
0e3f0     F8 A9 B0 FD | 	call	#_pslpeek
0e3f4     FD 24 02 F6 | 	mov	local04, result1
0e3f8     34 4E 05 F1 | 	add	fp, #52
0e3fc     A7 1E 02 FB | 	rdlong	local01, fp
0e400     34 4E 85 F1 | 	sub	fp, #52
0e404     12 1F 12 F2 | 	cmp	local01, local04 wc
0e408     54 00 90 3D |  if_ae	jmp	#LR__1116
0e40c     24 4E 05 F1 | 	add	fp, #36
0e410     A7 12 02 FB | 	rdlong	arg01, fp
0e414     24 4E 85 F1 | 	sub	fp, #36
0e418     08 12 06 F1 | 	add	arg01, #8
0e41c     CC A9 B0 FD | 	call	#_pslpeek
0e420     FD 1E 02 F6 | 	mov	local01, result1
0e424     38 4E 05 F1 | 	add	fp, #56
0e428     A7 24 02 FB | 	rdlong	local04, fp
0e42c     38 4E 85 F1 | 	sub	fp, #56
0e430     0F 25 12 F2 | 	cmp	local04, local01 wc
0e434     28 00 90 3D |  if_ae	jmp	#LR__1116
0e438     24 4E 05 F1 | 	add	fp, #36
0e43c     A7 12 02 FB | 	rdlong	arg01, fp
0e440     24 4E 85 F1 | 	sub	fp, #36
0e444     0C 12 06 F1 | 	add	arg01, #12
0e448     A0 A9 B0 FD | 	call	#_pslpeek
0e44c     3C 4E 05 F1 | 	add	fp, #60
0e450     A7 24 02 FB | 	rdlong	local04, fp
0e454     3C 4E 85 F1 | 	sub	fp, #60
0e458     FD 24 12 F2 | 	cmp	local04, result1 wc
0e45c     0C 00 90 CD |  if_b	jmp	#LR__1117
0e460                 | LR__1116
0e460     31 12 06 F6 | 	mov	arg01, #49
0e464     F0 A6 B0 FD | 	call	#_printerror
0e468     60 02 90 FD | 	jmp	#LR__1133
0e46c                 | LR__1117
0e46c     24 4E 05 F1 | 	add	fp, #36
0e470     A7 12 02 FB | 	rdlong	arg01, fp
0e474     09 25 02 F6 | 	mov	local04, arg01
0e478     10 24 06 F1 | 	add	local04, #16
0e47c     24 4E 85 F1 | 	sub	fp, #36
0e480     04 12 06 F1 | 	add	arg01, #4
0e484     64 A9 B0 FD | 	call	#_pslpeek
0e488     FD 1E 02 F6 | 	mov	local01, result1
0e48c     38 4E 05 F1 | 	add	fp, #56
0e490     A7 20 02 FB | 	rdlong	local02, fp
0e494     10 1F 02 FD | 	qmul	local01, local02
0e498     04 4E 85 F1 | 	sub	fp, #4
0e49c     A7 22 02 FB | 	rdlong	local03, fp
0e4a0     10 4E 85 F1 | 	sub	fp, #16
0e4a4     A7 12 02 FB | 	rdlong	arg01, fp
0e4a8     24 4E 85 F1 | 	sub	fp, #36
0e4ac     08 12 06 F1 | 	add	arg01, #8
0e4b0     18 20 62 FD | 	getqx	local02
0e4b4     10 23 02 F1 | 	add	local03, local02
0e4b8     30 A9 B0 FD | 	call	#_pslpeek
0e4bc     FD 20 02 F6 | 	mov	local02, result1
0e4c0     24 4E 05 F1 | 	add	fp, #36
0e4c4     A7 12 02 FB | 	rdlong	arg01, fp
0e4c8     24 4E 85 F1 | 	sub	fp, #36
0e4cc     04 12 06 F1 | 	add	arg01, #4
0e4d0     18 A9 B0 FD | 	call	#_pslpeek
0e4d4     FD 20 02 FD | 	qmul	local02, result1
0e4d8     3C 4E 05 F1 | 	add	fp, #60
0e4dc     A7 20 02 FB | 	rdlong	local02, fp
0e4e0     18 1E 62 FD | 	getqx	local01
0e4e4     10 1F 02 FD | 	qmul	local01, local02
0e4e8     10 4E 85 F1 | 	sub	fp, #16
0e4ec     A7 20 02 FB | 	rdlong	local02, fp
0e4f0     18 1E 62 FD | 	getqx	local01
0e4f4     0F 23 02 F1 | 	add	local03, local01
0e4f8     11 21 02 FD | 	qmul	local02, local03
0e4fc     04 4E 05 F1 | 	add	fp, #4
0e500                 | ' 
0e500                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0e500                 | ' select case arrtype
0e500     18 22 62 FD | 	getqx	local03
0e504     11 25 02 F1 | 	add	local04, local03
0e508     A7 24 62 FC | 	wrlong	local04, fp
0e50c     08 4E 85 F1 | 	sub	fp, #8
0e510     A7 26 02 FB | 	rdlong	local05, fp
0e514     28 4E 85 F1 | 	sub	fp, #40
0e518     00 27 86 F1 | 	sub	local05, #256
0e51c     0C 26 26 F3 | 	fle	local05, #12
0e520     30 26 62 FD | 	jmprel	local05
0e524                 | LR__1118
0e524     30 00 90 FD | 	jmp	#LR__1119
0e528     58 00 90 FD | 	jmp	#LR__1120
0e52c     6C 00 90 FD | 	jmp	#LR__1121
0e530     80 00 90 FD | 	jmp	#LR__1122
0e534     B0 00 90 FD | 	jmp	#LR__1123
0e538     E0 00 90 FD | 	jmp	#LR__1124
0e53c     F4 00 90 FD | 	jmp	#LR__1125
0e540     08 01 90 FD | 	jmp	#LR__1126
0e544     1C 01 90 FD | 	jmp	#LR__1127
0e548     30 01 90 FD | 	jmp	#LR__1128
0e54c     44 01 90 FD | 	jmp	#LR__1129
0e550     58 01 90 FD | 	jmp	#LR__1130
0e554     6C 01 90 FD | 	jmp	#LR__1131
0e558                 | LR__1119
0e558     A7 12 02 F6 | 	mov	arg01, fp
0e55c     30 4E 05 F1 | 	add	fp, #48
0e560     A7 14 02 FB | 	rdlong	arg02, fp
0e564     30 4E 85 F1 | 	sub	fp, #48
0e568     0C 16 06 F6 | 	mov	arg03, #12
0e56c     0B 00 00 FF 
0e570     C0 E4 05 F1 | 	add	objptr, ##5824
0e574     FC D1 B0 FD | 	call	#_psram_spin2_write
0e578     0B 00 00 FF 
0e57c     C0 E4 85 F1 | 	sub	objptr, ##5824
0e580     48 01 90 FD | 	jmp	#LR__1132
0e584                 | LR__1120
0e584     30 4E 05 F1 | 	add	fp, #48
0e588     A7 12 02 FB | 	rdlong	arg01, fp
0e58c     30 4E 85 F1 | 	sub	fp, #48
0e590     A7 14 02 FB | 	rdlong	arg02, fp
0e594     B4 A7 B0 FD | 	call	#_pspoke
0e598     30 01 90 FD | 	jmp	#LR__1132
0e59c                 | LR__1121
0e59c     30 4E 05 F1 | 	add	fp, #48
0e5a0     A7 12 02 FB | 	rdlong	arg01, fp
0e5a4     30 4E 85 F1 | 	sub	fp, #48
0e5a8     A7 14 02 FB | 	rdlong	arg02, fp
0e5ac     9C A7 B0 FD | 	call	#_pspoke
0e5b0     18 01 90 FD | 	jmp	#LR__1132
0e5b4                 | LR__1122
0e5b4     30 4E 05 F1 | 	add	fp, #48
0e5b8     A7 12 02 FB | 	rdlong	arg01, fp
0e5bc     30 4E 85 F1 | 	sub	fp, #48
0e5c0     A7 14 02 FB | 	rdlong	arg02, fp
0e5c4     84 A7 B0 FD | 	call	#_pspoke
0e5c8     30 4E 05 F1 | 	add	fp, #48
0e5cc     A7 12 02 FB | 	rdlong	arg01, fp
0e5d0     30 4E 85 F1 | 	sub	fp, #48
0e5d4     01 12 06 F1 | 	add	arg01, #1
0e5d8     A7 14 02 FB | 	rdlong	arg02, fp
0e5dc     08 14 46 F0 | 	shr	arg02, #8
0e5e0     68 A7 B0 FD | 	call	#_pspoke
0e5e4     E4 00 90 FD | 	jmp	#LR__1132
0e5e8                 | LR__1123
0e5e8     30 4E 05 F1 | 	add	fp, #48
0e5ec     A7 12 02 FB | 	rdlong	arg01, fp
0e5f0     30 4E 85 F1 | 	sub	fp, #48
0e5f4     A7 14 02 FB | 	rdlong	arg02, fp
0e5f8     50 A7 B0 FD | 	call	#_pspoke
0e5fc     30 4E 05 F1 | 	add	fp, #48
0e600     A7 12 02 FB | 	rdlong	arg01, fp
0e604     30 4E 85 F1 | 	sub	fp, #48
0e608     01 12 06 F1 | 	add	arg01, #1
0e60c     A7 14 02 FB | 	rdlong	arg02, fp
0e610     08 14 46 F0 | 	shr	arg02, #8
0e614     34 A7 B0 FD | 	call	#_pspoke
0e618     B0 00 90 FD | 	jmp	#LR__1132
0e61c                 | LR__1124
0e61c     30 4E 05 F1 | 	add	fp, #48
0e620     A7 12 02 FB | 	rdlong	arg01, fp
0e624     30 4E 85 F1 | 	sub	fp, #48
0e628     A7 14 02 FB | 	rdlong	arg02, fp
0e62c     8C A6 B0 FD | 	call	#_pslpoke
0e630     98 00 90 FD | 	jmp	#LR__1132
0e634                 | LR__1125
0e634     30 4E 05 F1 | 	add	fp, #48
0e638     A7 12 02 FB | 	rdlong	arg01, fp
0e63c     30 4E 85 F1 | 	sub	fp, #48
0e640     A7 14 02 FB | 	rdlong	arg02, fp
0e644     74 A6 B0 FD | 	call	#_pslpoke
0e648     80 00 90 FD | 	jmp	#LR__1132
0e64c                 | LR__1126
0e64c     30 4E 05 F1 | 	add	fp, #48
0e650     A7 12 02 FB | 	rdlong	arg01, fp
0e654     30 4E 85 F1 | 	sub	fp, #48
0e658     A7 14 02 FB | 	rdlong	arg02, fp
0e65c     5C A6 B0 FD | 	call	#_pslpoke
0e660     68 00 90 FD | 	jmp	#LR__1132
0e664                 | LR__1127
0e664     30 4E 05 F1 | 	add	fp, #48
0e668     A7 12 02 FB | 	rdlong	arg01, fp
0e66c     30 4E 85 F1 | 	sub	fp, #48
0e670     A7 14 02 FB | 	rdlong	arg02, fp
0e674     44 A6 B0 FD | 	call	#_pslpoke
0e678     50 00 90 FD | 	jmp	#LR__1132
0e67c                 | LR__1128
0e67c     30 4E 05 F1 | 	add	fp, #48
0e680     A7 12 02 FB | 	rdlong	arg01, fp
0e684     30 4E 85 F1 | 	sub	fp, #48
0e688     A7 14 02 FB | 	rdlong	arg02, fp
0e68c     2C A6 B0 FD | 	call	#_pslpoke
0e690     38 00 90 FD | 	jmp	#LR__1132
0e694                 | LR__1129
0e694     30 4E 05 F1 | 	add	fp, #48
0e698     A7 12 02 FB | 	rdlong	arg01, fp
0e69c     30 4E 85 F1 | 	sub	fp, #48
0e6a0     A7 14 02 FB | 	rdlong	arg02, fp
0e6a4     14 A6 B0 FD | 	call	#_pslpoke
0e6a8     20 00 90 FD | 	jmp	#LR__1132
0e6ac                 | LR__1130
0e6ac     30 4E 05 F1 | 	add	fp, #48
0e6b0     A7 12 02 FB | 	rdlong	arg01, fp
0e6b4     30 4E 85 F1 | 	sub	fp, #48
0e6b8     A7 14 02 FB | 	rdlong	arg02, fp
0e6bc     FC A5 B0 FD | 	call	#_pslpoke
0e6c0     08 00 90 FD | 	jmp	#LR__1132
0e6c4                 | LR__1131
0e6c4     2F 12 06 F6 | 	mov	arg01, #47
0e6c8     8C A4 B0 FD | 	call	#_printerror
0e6cc                 | LR__1132
0e6cc                 | LR__1133
0e6cc     A7 F0 03 F6 | 	mov	ptra, fp
0e6d0     B2 00 A0 FD | 	call	#popregs_
0e6d4                 | _do_assign_ret
0e6d4     2D 00 64 FD | 	ret
0e6d8                 | 
0e6d8                 | ' 
0e6d8                 | ' 
0e6d8                 | ' ' --------------------- Read a variable and push to the stack
0e6d8                 | ' 
0e6d8                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0e6d8                 | ' 
0e6d8                 | ' sub do_getvar
0e6d8                 | _do_getvar
0e6d8     04 4A 05 F6 | 	mov	COUNT_, #4
0e6dc     A8 00 A0 FD | 	call	#pushregs_
0e6e0     3C F0 07 F1 | 	add	ptra, #60
0e6e4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0e6e4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0e6e4     6A 00 00 FF 
0e6e8     64 E4 05 F1 | 	add	objptr, ##54372
0e6ec     F2 1E 02 FB | 	rdlong	local01, objptr
0e6f0     0F 17 02 F6 | 	mov	arg03, local01
0e6f4     01 16 66 F0 | 	shl	arg03, #1
0e6f8     0F 17 02 F1 | 	add	arg03, local01
0e6fc     02 16 66 F0 | 	shl	arg03, #2
0e700     03 00 00 FF 
0e704     04 E4 85 F1 | 	sub	objptr, ##1540
0e708     F2 16 02 F1 | 	add	arg03, objptr
0e70c     04 16 06 F1 | 	add	arg03, #4
0e710     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0e714     67 00 00 FF 
0e718     60 E4 85 F1 | 	sub	objptr, ##52832
0e71c     C4 00 90 5D |  if_ne	jmp	#LR__1141
0e720     6A 00 00 FF 
0e724     64 E4 05 F1 | 	add	objptr, ##54372
0e728     F2 1E 02 FB | 	rdlong	local01, objptr
0e72c     0F 13 02 F6 | 	mov	arg01, local01
0e730     01 12 66 F0 | 	shl	arg01, #1
0e734     0F 13 02 F1 | 	add	arg01, local01
0e738     02 12 66 F0 | 	shl	arg01, #2
0e73c     03 00 00 FF 
0e740     04 E4 85 F1 | 	sub	objptr, ##1540
0e744     F2 12 02 F1 | 	add	arg01, objptr
0e748     09 1F 02 FB | 	rdlong	local01, arg01
0e74c     04 1E 66 F0 | 	shl	local01, #4
0e750     32 00 00 FF 
0e754     74 E4 85 F1 | 	sub	objptr, ##25716
0e758     F2 1E 02 F1 | 	add	local01, objptr
0e75c     04 1E 06 F1 | 	add	local01, #4
0e760     0F 13 02 FB | 	rdlong	arg01, local01
0e764     04 1E 06 F1 | 	add	local01, #4
0e768     0F 1F 02 FB | 	rdlong	local01, local01
0e76c     A7 12 62 FC | 	wrlong	arg01, fp
0e770     04 4E 05 F1 | 	add	fp, #4
0e774     A7 1E 62 FC | 	wrlong	local01, fp
0e778     35 00 00 FF 
0e77c     78 E4 05 F1 | 	add	objptr, ##27256
0e780     F2 1E 02 FB | 	rdlong	local01, objptr
0e784     0F 13 02 F6 | 	mov	arg01, local01
0e788     01 12 66 F0 | 	shl	arg01, #1
0e78c     0F 13 02 F1 | 	add	arg01, local01
0e790     02 12 66 F0 | 	shl	arg01, #2
0e794     03 00 00 FF 
0e798     04 E4 85 F1 | 	sub	objptr, ##1540
0e79c     F2 12 02 F1 | 	add	arg01, objptr
0e7a0     09 1F 02 FB | 	rdlong	local01, arg01
0e7a4     04 1E 66 F0 | 	shl	local01, #4
0e7a8     32 00 00 FF 
0e7ac     74 E4 85 F1 | 	sub	objptr, ##25716
0e7b0     F2 1E 02 F1 | 	add	local01, objptr
0e7b4     0C 1E 06 F1 | 	add	local01, #12
0e7b8     0F 1F 02 FB | 	rdlong	local01, local01
0e7bc     04 4E 05 F1 | 	add	fp, #4
0e7c0     A7 1E 62 FC | 	wrlong	local01, fp
0e7c4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0e7c4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0e7c4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0e7c4     08 4E 85 F1 | 	sub	fp, #8
0e7c8     00 1F 16 F2 | 	cmp	local01, #256 wc
0e7cc     34 00 00 FF 
0e7d0     EC E5 85 F1 | 	sub	objptr, ##27116
0e7d4     0C 00 90 3D |  if_ae	jmp	#LR__1140
0e7d8     A7 12 02 F6 | 	mov	arg01, fp
0e7dc     80 B9 BF FD | 	call	#_push
0e7e0     A0 04 90 FD | 	jmp	#LR__1162
0e7e4                 | LR__1140
0e7e4                 | LR__1141
0e7e4     6A 00 00 FF 
0e7e8     64 E4 05 F1 | 	add	objptr, ##54372
0e7ec     F2 16 02 FB | 	rdlong	arg03, objptr
0e7f0     0B 15 02 F6 | 	mov	arg02, arg03
0e7f4     01 14 66 F0 | 	shl	arg02, #1
0e7f8     0B 15 02 F1 | 	add	arg02, arg03
0e7fc     02 14 66 F0 | 	shl	arg02, #2
0e800     03 00 00 FF 
0e804     04 E4 85 F1 | 	sub	objptr, ##1540
0e808     F2 14 02 F1 | 	add	arg02, objptr
0e80c     0A 17 02 FB | 	rdlong	arg03, arg02
0e810     04 16 66 F0 | 	shl	arg03, #4
0e814     32 00 00 FF 
0e818     74 E4 85 F1 | 	sub	objptr, ##25716
0e81c     F2 16 02 F1 | 	add	arg03, objptr
0e820     04 16 06 F1 | 	add	arg03, #4
0e824     0B 13 02 FB | 	rdlong	arg01, arg03
0e828     0C 4E 05 F1 | 	add	fp, #12
0e82c     A7 12 62 FC | 	wrlong	arg01, fp
0e830     0C 4E 85 F1 | 	sub	fp, #12
0e834     34 00 00 FF 
0e838     EC E5 85 F1 | 	sub	objptr, ##27116
0e83c     AC A5 B0 FD | 	call	#_pslpeek
0e840     FD FA 31 F9 | 	getword	result1, result1, #0
0e844     10 4E 05 F1 | 	add	fp, #16
0e848     A7 FA 61 FC | 	wrlong	result1, fp
0e84c     6A 00 00 FF 
0e850     64 E4 05 F1 | 	add	objptr, ##54372
0e854     F2 16 02 FB | 	rdlong	arg03, objptr
0e858     0B 15 02 F6 | 	mov	arg02, arg03
0e85c     01 14 66 F0 | 	shl	arg02, #1
0e860     0B 15 02 F1 | 	add	arg02, arg03
0e864     02 14 66 F0 | 	shl	arg02, #2
0e868     03 00 00 FF 
0e86c     04 E4 85 F1 | 	sub	objptr, ##1540
0e870     F2 14 02 F1 | 	add	arg02, objptr
0e874     04 14 06 F1 | 	add	arg02, #4
0e878     0A 17 02 FB | 	rdlong	arg03, arg02
0e87c     04 4E 05 F1 | 	add	fp, #4
0e880     A7 16 62 FC | 	wrlong	arg03, fp
0e884     08 4E 85 F1 | 	sub	fp, #8
0e888     A7 12 02 FB | 	rdlong	arg01, fp
0e88c     0C 4E 85 F1 | 	sub	fp, #12
0e890     02 12 06 F1 | 	add	arg01, #2
0e894     67 00 00 FF 
0e898     60 E4 85 F1 | 	sub	objptr, ##52832
0e89c     F4 A4 B0 FD | 	call	#_pspeek
0e8a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e8a4     18 4E 05 F1 | 	add	fp, #24
0e8a8     A7 FA 61 FC | 	wrlong	result1, fp
0e8ac     0C 4E 85 F1 | 	sub	fp, #12
0e8b0     A7 12 02 FB | 	rdlong	arg01, fp
0e8b4     0C 4E 85 F1 | 	sub	fp, #12
0e8b8     04 12 06 F1 | 	add	arg01, #4
0e8bc     2C A5 B0 FD | 	call	#_pslpeek
0e8c0     1C 4E 05 F1 | 	add	fp, #28
0e8c4     A7 FA 61 FC | 	wrlong	result1, fp
0e8c8     10 4E 85 F1 | 	sub	fp, #16
0e8cc     A7 12 02 FB | 	rdlong	arg01, fp
0e8d0     0C 4E 85 F1 | 	sub	fp, #12
0e8d4     08 12 06 F1 | 	add	arg01, #8
0e8d8     10 A5 B0 FD | 	call	#_pslpeek
0e8dc     20 4E 05 F1 | 	add	fp, #32
0e8e0     A7 FA 61 FC | 	wrlong	result1, fp
0e8e4     14 4E 85 F1 | 	sub	fp, #20
0e8e8     A7 12 02 FB | 	rdlong	arg01, fp
0e8ec     0C 4E 85 F1 | 	sub	fp, #12
0e8f0     0C 12 06 F1 | 	add	arg01, #12
0e8f4     F4 A4 B0 FD | 	call	#_pslpeek
0e8f8     24 4E 05 F1 | 	add	fp, #36
0e8fc     A7 FA 61 FC | 	wrlong	result1, fp
0e900                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0e900                 | ' esize=pspeek(arrptr+2)
0e900                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0e900                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0e900                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0e900                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0e900     10 4E 85 F1 | 	sub	fp, #16
0e904     A7 16 02 FB | 	rdlong	arg03, fp
0e908     14 4E 85 F1 | 	sub	fp, #20
0e90c     03 16 16 F2 | 	cmp	arg03, #3 wc
0e910     38 00 90 CD |  if_b	jmp	#LR__1142
0e914     B0 B7 BF FD | 	call	#_pop
0e918     FF 16 02 F6 | 	mov	arg03, result3
0e91c     A7 FA 61 FC | 	wrlong	result1, fp
0e920     04 4E 05 F1 | 	add	fp, #4
0e924     A7 FC 61 FC | 	wrlong	result2, fp
0e928     04 4E 05 F1 | 	add	fp, #4
0e92c     A7 16 62 FC | 	wrlong	arg03, fp
0e930     08 4E 85 F1 | 	sub	fp, #8
0e934     A7 12 02 F6 | 	mov	arg01, fp
0e938     E0 40 B0 FD | 	call	#_converttoint
0e93c     30 4E 05 F1 | 	add	fp, #48
0e940     A7 FA 61 FC | 	wrlong	result1, fp
0e944     30 4E 85 F1 | 	sub	fp, #48
0e948     0C 00 90 FD | 	jmp	#LR__1143
0e94c                 | LR__1142
0e94c     30 4E 05 F1 | 	add	fp, #48
0e950     A7 00 68 FC | 	wrlong	#0, fp
0e954     30 4E 85 F1 | 	sub	fp, #48
0e958                 | LR__1143
0e958                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0e958     14 4E 05 F1 | 	add	fp, #20
0e95c     A7 16 02 FB | 	rdlong	arg03, fp
0e960     14 4E 85 F1 | 	sub	fp, #20
0e964     02 16 16 F2 | 	cmp	arg03, #2 wc
0e968     38 00 90 CD |  if_b	jmp	#LR__1144
0e96c     58 B7 BF FD | 	call	#_pop
0e970     FF 16 02 F6 | 	mov	arg03, result3
0e974     A7 FA 61 FC | 	wrlong	result1, fp
0e978     04 4E 05 F1 | 	add	fp, #4
0e97c     A7 FC 61 FC | 	wrlong	result2, fp
0e980     04 4E 05 F1 | 	add	fp, #4
0e984     A7 16 62 FC | 	wrlong	arg03, fp
0e988     08 4E 85 F1 | 	sub	fp, #8
0e98c     A7 12 02 F6 | 	mov	arg01, fp
0e990     88 40 B0 FD | 	call	#_converttoint
0e994     2C 4E 05 F1 | 	add	fp, #44
0e998     A7 FA 61 FC | 	wrlong	result1, fp
0e99c     2C 4E 85 F1 | 	sub	fp, #44
0e9a0     0C 00 90 FD | 	jmp	#LR__1145
0e9a4                 | LR__1144
0e9a4     2C 4E 05 F1 | 	add	fp, #44
0e9a8     A7 00 68 FC | 	wrlong	#0, fp
0e9ac     2C 4E 85 F1 | 	sub	fp, #44
0e9b0                 | LR__1145
0e9b0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0e9b0     14 4E 05 F1 | 	add	fp, #20
0e9b4     A7 16 02 FB | 	rdlong	arg03, fp
0e9b8     14 4E 85 F1 | 	sub	fp, #20
0e9bc     01 16 16 F2 | 	cmp	arg03, #1 wc
0e9c0     38 00 90 CD |  if_b	jmp	#LR__1146
0e9c4     00 B7 BF FD | 	call	#_pop
0e9c8     FF 16 02 F6 | 	mov	arg03, result3
0e9cc     A7 FA 61 FC | 	wrlong	result1, fp
0e9d0     04 4E 05 F1 | 	add	fp, #4
0e9d4     A7 FC 61 FC | 	wrlong	result2, fp
0e9d8     04 4E 05 F1 | 	add	fp, #4
0e9dc     A7 16 62 FC | 	wrlong	arg03, fp
0e9e0     08 4E 85 F1 | 	sub	fp, #8
0e9e4     A7 12 02 F6 | 	mov	arg01, fp
0e9e8     30 40 B0 FD | 	call	#_converttoint
0e9ec     28 4E 05 F1 | 	add	fp, #40
0e9f0     A7 FA 61 FC | 	wrlong	result1, fp
0e9f4     28 4E 85 F1 | 	sub	fp, #40
0e9f8     0C 00 90 FD | 	jmp	#LR__1147
0e9fc                 | LR__1146
0e9fc     28 4E 05 F1 | 	add	fp, #40
0ea00     A7 00 68 FC | 	wrlong	#0, fp
0ea04     28 4E 85 F1 | 	sub	fp, #40
0ea08                 | LR__1147
0ea08     0C 4E 05 F1 | 	add	fp, #12
0ea0c     A7 20 02 FB | 	rdlong	local02, fp
0ea10     1C 4E 05 F1 | 	add	fp, #28
0ea14     A7 22 02 FB | 	rdlong	local03, fp
0ea18     04 4E 05 F1 | 	add	fp, #4
0ea1c     A7 FC 01 FB | 	rdlong	result2, fp
0ea20     10 4E 85 F1 | 	sub	fp, #16
0ea24     A7 FE 01 FB | 	rdlong	result3, fp
0ea28     FF FC 01 FD | 	qmul	result2, result3
0ea2c     10 20 06 F1 | 	add	local02, #16
0ea30     14 4E 05 F1 | 	add	fp, #20
0ea34     A7 FC 01 FB | 	rdlong	result2, fp
0ea38     18 FA 61 FD | 	getqx	result1
0ea3c     FF FC 01 FD | 	qmul	result2, result3
0ea40     FD 22 02 F1 | 	add	local03, result1
0ea44     10 4E 85 F1 | 	sub	fp, #16
0ea48     A7 FE 01 FB | 	rdlong	result3, fp
0ea4c     18 FC 61 FD | 	getqx	result2
0ea50     FF FC 01 FD | 	qmul	result2, result3
0ea54     08 4E 85 F1 | 	sub	fp, #8
0ea58     A7 FE 01 FB | 	rdlong	result3, fp
0ea5c     18 FC 61 FD | 	getqx	result2
0ea60     FE 22 02 F1 | 	add	local03, result2
0ea64     FF 22 02 FD | 	qmul	local03, result3
0ea68     1C 4E 05 F1 | 	add	fp, #28
0ea6c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ea6c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0ea6c                 | ' 
0ea6c                 | ' select case vartype
0ea6c     18 FC 61 FD | 	getqx	result2
0ea70     FE 20 02 F1 | 	add	local02, result2
0ea74     A7 20 62 FC | 	wrlong	local02, fp
0ea78     24 4E 85 F1 | 	sub	fp, #36
0ea7c     A7 24 02 FB | 	rdlong	local04, fp
0ea80     10 4E 85 F1 | 	sub	fp, #16
0ea84     00 25 86 F1 | 	sub	local04, #256
0ea88     0C 24 26 F3 | 	fle	local04, #12
0ea8c     30 24 62 FD | 	jmprel	local04
0ea90                 | LR__1148
0ea90     30 00 90 FD | 	jmp	#LR__1149
0ea94     58 00 90 FD | 	jmp	#LR__1150
0ea98     8C 00 90 FD | 	jmp	#LR__1151
0ea9c     AC 00 90 FD | 	jmp	#LR__1152
0eaa0     E8 00 90 FD | 	jmp	#LR__1153
0eaa4     08 01 90 FD | 	jmp	#LR__1154
0eaa8     24 01 90 FD | 	jmp	#LR__1155
0eaac     40 01 90 FD | 	jmp	#LR__1156
0eab0     50 01 90 FD | 	jmp	#LR__1157
0eab4     60 01 90 FD | 	jmp	#LR__1158
0eab8     7C 01 90 FD | 	jmp	#LR__1159
0eabc     8C 01 90 FD | 	jmp	#LR__1160
0eac0     B8 01 90 FD | 	jmp	#LR__1161
0eac4                 | LR__1149
0eac4     A7 12 02 F6 | 	mov	arg01, fp
0eac8     34 4E 05 F1 | 	add	fp, #52
0eacc     A7 14 02 FB | 	rdlong	arg02, fp
0ead0     34 4E 85 F1 | 	sub	fp, #52
0ead4     0C 16 06 F6 | 	mov	arg03, #12
0ead8     0B 00 00 FF 
0eadc     C0 E4 05 F1 | 	add	objptr, ##5824
0eae0     F4 CB B0 FD | 	call	#_psram_spin2_read1
0eae4     0B 00 00 FF 
0eae8     C0 E4 85 F1 | 	sub	objptr, ##5824
0eaec     8C 01 90 FD | 	jmp	#LR__1161
0eaf0                 | LR__1150
0eaf0     08 4E 05 F1 | 	add	fp, #8
0eaf4     A7 38 68 FC | 	wrlong	#28, fp
0eaf8     2C 4E 05 F1 | 	add	fp, #44
0eafc     A7 12 02 FB | 	rdlong	arg01, fp
0eb00     34 4E 85 F1 | 	sub	fp, #52
0eb04     8C A2 B0 FD | 	call	#_pspeek
0eb08     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eb0c     A7 FA 61 FC | 	wrlong	result1, fp
0eb10     80 FA 15 F2 | 	cmp	result1, #128 wc
0eb14     00 1F 66 36 |  if_ae	neg	local01, #256
0eb18     A7 22 02 3B |  if_ae	rdlong	local03, fp
0eb1c     11 1F 42 35 |  if_ae	or	local01, local03
0eb20     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0eb24     54 01 90 FD | 	jmp	#LR__1161
0eb28                 | LR__1151
0eb28     08 4E 05 F1 | 	add	fp, #8
0eb2c     A7 3A 68 FC | 	wrlong	#29, fp
0eb30     2C 4E 05 F1 | 	add	fp, #44
0eb34     A7 12 02 FB | 	rdlong	arg01, fp
0eb38     34 4E 85 F1 | 	sub	fp, #52
0eb3c     54 A2 B0 FD | 	call	#_pspeek
0eb40     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eb44     A7 FA 61 FC | 	wrlong	result1, fp
0eb48     30 01 90 FD | 	jmp	#LR__1161
0eb4c                 | LR__1152
0eb4c     08 4E 05 F1 | 	add	fp, #8
0eb50     A7 38 68 FC | 	wrlong	#28, fp
0eb54     2C 4E 05 F1 | 	add	fp, #44
0eb58     A7 12 02 FB | 	rdlong	arg01, fp
0eb5c     34 4E 85 F1 | 	sub	fp, #52
0eb60     88 A2 B0 FD | 	call	#_pslpeek
0eb64     FD FA 31 F9 | 	getword	result1, result1, #0
0eb68     A7 FA 61 FC | 	wrlong	result1, fp
0eb6c     40 00 00 FF 
0eb70     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0eb74     FF 7F 00 3F 
0eb78     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0eb7c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0eb80     11 1F 42 35 |  if_ae	or	local01, local03
0eb84     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0eb88     F0 00 90 FD | 	jmp	#LR__1161
0eb8c                 | LR__1153
0eb8c     08 4E 05 F1 | 	add	fp, #8
0eb90     A7 3A 68 FC | 	wrlong	#29, fp
0eb94     2C 4E 05 F1 | 	add	fp, #44
0eb98     A7 12 02 FB | 	rdlong	arg01, fp
0eb9c     34 4E 85 F1 | 	sub	fp, #52
0eba0     48 A2 B0 FD | 	call	#_pslpeek
0eba4     FD FA 31 F9 | 	getword	result1, result1, #0
0eba8     A7 FA 61 FC | 	wrlong	result1, fp
0ebac     CC 00 90 FD | 	jmp	#LR__1161
0ebb0                 | LR__1154
0ebb0     08 4E 05 F1 | 	add	fp, #8
0ebb4     A7 38 68 FC | 	wrlong	#28, fp
0ebb8     2C 4E 05 F1 | 	add	fp, #44
0ebbc     A7 12 02 FB | 	rdlong	arg01, fp
0ebc0     34 4E 85 F1 | 	sub	fp, #52
0ebc4     24 A2 B0 FD | 	call	#_pslpeek
0ebc8     A7 FA 61 FC | 	wrlong	result1, fp
0ebcc     AC 00 90 FD | 	jmp	#LR__1161
0ebd0                 | LR__1155
0ebd0     08 4E 05 F1 | 	add	fp, #8
0ebd4     A7 3A 68 FC | 	wrlong	#29, fp
0ebd8     2C 4E 05 F1 | 	add	fp, #44
0ebdc     A7 12 02 FB | 	rdlong	arg01, fp
0ebe0     34 4E 85 F1 | 	sub	fp, #52
0ebe4     04 A2 B0 FD | 	call	#_pslpeek
0ebe8     A7 FA 61 FC | 	wrlong	result1, fp
0ebec     8C 00 90 FD | 	jmp	#LR__1161
0ebf0                 | LR__1156
0ebf0     08 4E 05 F1 | 	add	fp, #8
0ebf4     A7 FE 69 FC | 	wrlong	#255, fp
0ebf8     08 4E 85 F1 | 	sub	fp, #8
0ebfc     A7 60 68 FC | 	wrlong	#48, fp
0ec00     78 00 90 FD | 	jmp	#LR__1161
0ec04                 | LR__1157
0ec04     08 4E 05 F1 | 	add	fp, #8
0ec08     A7 FE 69 FC | 	wrlong	#255, fp
0ec0c     08 4E 85 F1 | 	sub	fp, #8
0ec10     A7 60 68 FC | 	wrlong	#48, fp
0ec14     64 00 90 FD | 	jmp	#LR__1161
0ec18                 | LR__1158
0ec18     08 4E 05 F1 | 	add	fp, #8
0ec1c     A7 3C 68 FC | 	wrlong	#30, fp
0ec20     2C 4E 05 F1 | 	add	fp, #44
0ec24     A7 12 02 FB | 	rdlong	arg01, fp
0ec28     34 4E 85 F1 | 	sub	fp, #52
0ec2c     BC A1 B0 FD | 	call	#_pslpeek
0ec30     A7 FA 61 FC | 	wrlong	result1, fp
0ec34     44 00 90 FD | 	jmp	#LR__1161
0ec38                 | LR__1159
0ec38     08 4E 05 F1 | 	add	fp, #8
0ec3c     A7 FE 69 FC | 	wrlong	#255, fp
0ec40     08 4E 85 F1 | 	sub	fp, #8
0ec44     A7 60 68 FC | 	wrlong	#48, fp
0ec48     30 00 90 FD | 	jmp	#LR__1161
0ec4c                 | LR__1160
0ec4c     08 4E 05 F1 | 	add	fp, #8
0ec50     A7 3E 68 FC | 	wrlong	#31, fp
0ec54     2C 4E 05 F1 | 	add	fp, #44
0ec58     A7 12 02 FB | 	rdlong	arg01, fp
0ec5c     34 4E 85 F1 | 	sub	fp, #52
0ec60     88 A1 B0 FD | 	call	#_pslpeek
0ec64     A7 FA 61 FC | 	wrlong	result1, fp
0ec68     00 04 00 FF 
0ec6c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0ec70     08 4E 05 31 |  if_ae	add	fp, #8
0ec74     A7 56 68 3C |  if_ae	wrlong	#43, fp
0ec78     08 4E 85 31 |  if_ae	sub	fp, #8
0ec7c                 | LR__1161
0ec7c     A7 12 02 F6 | 	mov	arg01, fp
0ec80     DC B4 BF FD | 	call	#_push
0ec84                 | LR__1162
0ec84     A7 F0 03 F6 | 	mov	ptra, fp
0ec88     B2 00 A0 FD | 	call	#popregs_
0ec8c                 | _do_getvar_ret
0ec8c     2D 00 64 FD | 	ret
0ec90                 | 
0ec90                 | ' 
0ec90                 | ' 
0ec90                 | ' sub do_getaddr
0ec90                 | _do_getaddr
0ec90     01 4A 05 F6 | 	mov	COUNT_, #1
0ec94     A8 00 A0 FD | 	call	#pushregs_
0ec98     38 F0 07 F1 | 	add	ptra, #56
0ec9c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0ec9c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0ec9c     6A 00 00 FF 
0eca0     64 E4 05 F1 | 	add	objptr, ##54372
0eca4     F2 12 02 FB | 	rdlong	arg01, objptr
0eca8     09 FD 01 F6 | 	mov	result2, arg01
0ecac     01 FC 65 F0 | 	shl	result2, #1
0ecb0     09 FD 01 F1 | 	add	result2, arg01
0ecb4     02 FC 65 F0 | 	shl	result2, #2
0ecb8     03 00 00 FF 
0ecbc     04 E4 85 F1 | 	sub	objptr, ##1540
0ecc0     F2 FC 01 F1 | 	add	result2, objptr
0ecc4     04 FC 05 F1 | 	add	result2, #4
0ecc8     FE FC 09 FB | 	rdlong	result2, result2 wz
0eccc     67 00 00 FF 
0ecd0     60 E4 85 F1 | 	sub	objptr, ##52832
0ecd4     C4 00 90 5D |  if_ne	jmp	#LR__1170
0ecd8     6A 00 00 FF 
0ecdc     64 E4 05 F1 | 	add	objptr, ##54372
0ece0     F2 12 02 FB | 	rdlong	arg01, objptr
0ece4     09 FD 01 F6 | 	mov	result2, arg01
0ece8     01 FC 65 F0 | 	shl	result2, #1
0ecec     09 FD 01 F1 | 	add	result2, arg01
0ecf0     02 FC 65 F0 | 	shl	result2, #2
0ecf4     03 00 00 FF 
0ecf8     04 E4 85 F1 | 	sub	objptr, ##1540
0ecfc     F2 FC 01 F1 | 	add	result2, objptr
0ed00     FE 12 02 FB | 	rdlong	arg01, result2
0ed04     04 12 66 F0 | 	shl	arg01, #4
0ed08     32 00 00 FF 
0ed0c     74 E4 85 F1 | 	sub	objptr, ##25716
0ed10     F2 12 02 F1 | 	add	arg01, objptr
0ed14     0C 12 06 F1 | 	add	arg01, #12
0ed18     09 13 02 FB | 	rdlong	arg01, arg01
0ed1c     08 4E 05 F1 | 	add	fp, #8
0ed20     A7 12 62 FC | 	wrlong	arg01, fp
0ed24                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ed24                 | '    if t1.result_type>=array_no_type then goto 2200
0ed24     08 4E 85 F1 | 	sub	fp, #8
0ed28     00 13 16 F2 | 	cmp	arg01, #256 wc
0ed2c     34 00 00 FF 
0ed30     EC E5 85 F1 | 	sub	objptr, ##27116
0ed34     64 00 90 3D |  if_ae	jmp	#LR__1171
0ed38     6A 00 00 FF 
0ed3c     64 E4 05 F1 | 	add	objptr, ##54372
0ed40     F2 12 02 FB | 	rdlong	arg01, objptr
0ed44     09 FB 01 F6 | 	mov	result1, arg01
0ed48     01 FA 65 F0 | 	shl	result1, #1
0ed4c     09 FB 01 F1 | 	add	result1, arg01
0ed50     02 FA 65 F0 | 	shl	result1, #2
0ed54     03 00 00 FF 
0ed58     04 E4 85 F1 | 	sub	objptr, ##1540
0ed5c     F2 FA 01 F1 | 	add	result1, objptr
0ed60     FD FA 01 FB | 	rdlong	result1, result1
0ed64     04 FA 65 F0 | 	shl	result1, #4
0ed68     32 00 00 FF 
0ed6c     74 E4 85 F1 | 	sub	objptr, ##25716
0ed70     F2 FA 01 F1 | 	add	result1, objptr
0ed74     04 FA 05 F1 | 	add	result1, #4
0ed78     34 00 00 FF 
0ed7c     EC E5 85 F1 | 	sub	objptr, ##27116
0ed80     A7 FA 61 FC | 	wrlong	result1, fp
0ed84     08 4E 05 F1 | 	add	fp, #8
0ed88     A7 3A 68 FC | 	wrlong	#29, fp
0ed8c     08 4E 85 F1 | 	sub	fp, #8
0ed90     A7 12 02 F6 | 	mov	arg01, fp
0ed94     C8 B3 BF FD | 	call	#_push
0ed98                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0ed98                 | '   t1.result_type=result_uint
0ed98                 | '   push t1 : return
0ed98     D8 02 90 FD | 	jmp	#LR__1180
0ed9c                 | LR__1170
0ed9c                 | LR__1171
0ed9c     6A 00 00 FF 
0eda0     64 E4 05 F1 | 	add	objptr, ##54372
0eda4     F2 FE 01 FB | 	rdlong	result3, objptr
0eda8     FF 12 02 F6 | 	mov	arg01, result3
0edac     01 12 66 F0 | 	shl	arg01, #1
0edb0     FF 12 02 F1 | 	add	arg01, result3
0edb4     02 12 66 F0 | 	shl	arg01, #2
0edb8     03 00 00 FF 
0edbc     04 E4 85 F1 | 	sub	objptr, ##1540
0edc0     F2 12 02 F1 | 	add	arg01, objptr
0edc4     09 13 02 FB | 	rdlong	arg01, arg01
0edc8     04 12 66 F0 | 	shl	arg01, #4
0edcc     32 00 00 FF 
0edd0     74 E4 85 F1 | 	sub	objptr, ##25716
0edd4     F2 12 02 F1 | 	add	arg01, objptr
0edd8     04 12 06 F1 | 	add	arg01, #4
0eddc     09 13 02 FB | 	rdlong	arg01, arg01
0ede0     0C 4E 05 F1 | 	add	fp, #12
0ede4     A7 12 62 FC | 	wrlong	arg01, fp
0ede8     0C 4E 85 F1 | 	sub	fp, #12
0edec     34 00 00 FF 
0edf0     EC E5 85 F1 | 	sub	objptr, ##27116
0edf4     F4 9F B0 FD | 	call	#_pslpeek
0edf8     FD FA 31 F9 | 	getword	result1, result1, #0
0edfc     10 4E 05 F1 | 	add	fp, #16
0ee00     A7 FA 61 FC | 	wrlong	result1, fp
0ee04     6A 00 00 FF 
0ee08     64 E4 05 F1 | 	add	objptr, ##54372
0ee0c     F2 FE 01 FB | 	rdlong	result3, objptr
0ee10     FF 12 02 F6 | 	mov	arg01, result3
0ee14     01 12 66 F0 | 	shl	arg01, #1
0ee18     FF 12 02 F1 | 	add	arg01, result3
0ee1c     02 12 66 F0 | 	shl	arg01, #2
0ee20     03 00 00 FF 
0ee24     04 E4 85 F1 | 	sub	objptr, ##1540
0ee28     F2 12 02 F1 | 	add	arg01, objptr
0ee2c     04 12 06 F1 | 	add	arg01, #4
0ee30     09 13 02 FB | 	rdlong	arg01, arg01
0ee34     04 4E 05 F1 | 	add	fp, #4
0ee38     A7 12 62 FC | 	wrlong	arg01, fp
0ee3c     08 4E 85 F1 | 	sub	fp, #8
0ee40     A7 12 02 FB | 	rdlong	arg01, fp
0ee44     0C 4E 85 F1 | 	sub	fp, #12
0ee48     02 12 06 F1 | 	add	arg01, #2
0ee4c     67 00 00 FF 
0ee50     60 E4 85 F1 | 	sub	objptr, ##52832
0ee54     3C 9F B0 FD | 	call	#_pspeek
0ee58     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ee5c     18 4E 05 F1 | 	add	fp, #24
0ee60     A7 FA 61 FC | 	wrlong	result1, fp
0ee64     0C 4E 85 F1 | 	sub	fp, #12
0ee68     A7 12 02 FB | 	rdlong	arg01, fp
0ee6c     0C 4E 85 F1 | 	sub	fp, #12
0ee70     04 12 06 F1 | 	add	arg01, #4
0ee74     74 9F B0 FD | 	call	#_pslpeek
0ee78     1C 4E 05 F1 | 	add	fp, #28
0ee7c     A7 FA 61 FC | 	wrlong	result1, fp
0ee80     10 4E 85 F1 | 	sub	fp, #16
0ee84     A7 12 02 FB | 	rdlong	arg01, fp
0ee88     0C 4E 85 F1 | 	sub	fp, #12
0ee8c     08 12 06 F1 | 	add	arg01, #8
0ee90     58 9F B0 FD | 	call	#_pslpeek
0ee94     20 4E 05 F1 | 	add	fp, #32
0ee98     A7 FA 61 FC | 	wrlong	result1, fp
0ee9c     14 4E 85 F1 | 	sub	fp, #20
0eea0     A7 12 02 FB | 	rdlong	arg01, fp
0eea4     0C 4E 85 F1 | 	sub	fp, #12
0eea8     0C 12 06 F1 | 	add	arg01, #12
0eeac     3C 9F B0 FD | 	call	#_pslpeek
0eeb0     24 4E 05 F1 | 	add	fp, #36
0eeb4     A7 FA 61 FC | 	wrlong	result1, fp
0eeb8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0eeb8                 | ' esize=pspeek(arrptr+2)
0eeb8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0eeb8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0eeb8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0eeb8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0eeb8     10 4E 85 F1 | 	sub	fp, #16
0eebc     A7 12 02 FB | 	rdlong	arg01, fp
0eec0     14 4E 85 F1 | 	sub	fp, #20
0eec4     03 12 16 F2 | 	cmp	arg01, #3 wc
0eec8     34 00 90 CD |  if_b	jmp	#LR__1172
0eecc     F8 B1 BF FD | 	call	#_pop
0eed0     A7 FA 61 FC | 	wrlong	result1, fp
0eed4     04 4E 05 F1 | 	add	fp, #4
0eed8     A7 FC 61 FC | 	wrlong	result2, fp
0eedc     04 4E 05 F1 | 	add	fp, #4
0eee0     A7 FE 61 FC | 	wrlong	result3, fp
0eee4     08 4E 85 F1 | 	sub	fp, #8
0eee8     A7 12 02 F6 | 	mov	arg01, fp
0eeec     2C 3B B0 FD | 	call	#_converttoint
0eef0     30 4E 05 F1 | 	add	fp, #48
0eef4     A7 FA 61 FC | 	wrlong	result1, fp
0eef8     30 4E 85 F1 | 	sub	fp, #48
0eefc     0C 00 90 FD | 	jmp	#LR__1173
0ef00                 | LR__1172
0ef00     30 4E 05 F1 | 	add	fp, #48
0ef04     A7 00 68 FC | 	wrlong	#0, fp
0ef08     30 4E 85 F1 | 	sub	fp, #48
0ef0c                 | LR__1173
0ef0c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0ef0c     14 4E 05 F1 | 	add	fp, #20
0ef10     A7 12 02 FB | 	rdlong	arg01, fp
0ef14     14 4E 85 F1 | 	sub	fp, #20
0ef18     02 12 16 F2 | 	cmp	arg01, #2 wc
0ef1c     34 00 90 CD |  if_b	jmp	#LR__1174
0ef20     A4 B1 BF FD | 	call	#_pop
0ef24     A7 FA 61 FC | 	wrlong	result1, fp
0ef28     04 4E 05 F1 | 	add	fp, #4
0ef2c     A7 FC 61 FC | 	wrlong	result2, fp
0ef30     04 4E 05 F1 | 	add	fp, #4
0ef34     A7 FE 61 FC | 	wrlong	result3, fp
0ef38     08 4E 85 F1 | 	sub	fp, #8
0ef3c     A7 12 02 F6 | 	mov	arg01, fp
0ef40     D8 3A B0 FD | 	call	#_converttoint
0ef44     2C 4E 05 F1 | 	add	fp, #44
0ef48     A7 FA 61 FC | 	wrlong	result1, fp
0ef4c     2C 4E 85 F1 | 	sub	fp, #44
0ef50     0C 00 90 FD | 	jmp	#LR__1175
0ef54                 | LR__1174
0ef54     2C 4E 05 F1 | 	add	fp, #44
0ef58     A7 00 68 FC | 	wrlong	#0, fp
0ef5c     2C 4E 85 F1 | 	sub	fp, #44
0ef60                 | LR__1175
0ef60                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0ef60     14 4E 05 F1 | 	add	fp, #20
0ef64     A7 12 02 FB | 	rdlong	arg01, fp
0ef68     14 4E 85 F1 | 	sub	fp, #20
0ef6c     01 12 16 F2 | 	cmp	arg01, #1 wc
0ef70     34 00 90 CD |  if_b	jmp	#LR__1176
0ef74     50 B1 BF FD | 	call	#_pop
0ef78     A7 FA 61 FC | 	wrlong	result1, fp
0ef7c     04 4E 05 F1 | 	add	fp, #4
0ef80     A7 FC 61 FC | 	wrlong	result2, fp
0ef84     04 4E 05 F1 | 	add	fp, #4
0ef88     A7 FE 61 FC | 	wrlong	result3, fp
0ef8c     08 4E 85 F1 | 	sub	fp, #8
0ef90     A7 12 02 F6 | 	mov	arg01, fp
0ef94     84 3A B0 FD | 	call	#_converttoint
0ef98     28 4E 05 F1 | 	add	fp, #40
0ef9c     A7 FA 61 FC | 	wrlong	result1, fp
0efa0     28 4E 85 F1 | 	sub	fp, #40
0efa4     0C 00 90 FD | 	jmp	#LR__1177
0efa8                 | LR__1176
0efa8     28 4E 05 F1 | 	add	fp, #40
0efac     A7 00 68 FC | 	wrlong	#0, fp
0efb0     28 4E 85 F1 | 	sub	fp, #40
0efb4                 | LR__1177
0efb4                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0efb4                 | ' if numpar>0 then
0efb4     14 4E 05 F1 | 	add	fp, #20
0efb8     A7 FE 01 FB | 	rdlong	result3, fp
0efbc     14 4E 85 F1 | 	sub	fp, #20
0efc0     01 FE 15 F2 | 	cmp	result3, #1 wc
0efc4     8C 00 90 CD |  if_b	jmp	#LR__1178
0efc8     0C 4E 05 F1 | 	add	fp, #12
0efcc     A7 FC 01 FB | 	rdlong	result2, fp
0efd0     1C 4E 05 F1 | 	add	fp, #28
0efd4     A7 FE 01 FB | 	rdlong	result3, fp
0efd8     04 4E 05 F1 | 	add	fp, #4
0efdc     A7 12 02 FB | 	rdlong	arg01, fp
0efe0     10 4E 85 F1 | 	sub	fp, #16
0efe4     A7 FA 01 FB | 	rdlong	result1, fp
0efe8     FD 12 02 FD | 	qmul	arg01, result1
0efec     10 FC 05 F1 | 	add	result2, #16
0eff0     14 4E 05 F1 | 	add	fp, #20
0eff4     A7 1E 02 FB | 	rdlong	local01, fp
0eff8     18 12 62 FD | 	getqx	arg01
0effc     FD 1E 02 FD | 	qmul	local01, result1
0f000     09 FF 01 F1 | 	add	result3, arg01
0f004     10 4E 85 F1 | 	sub	fp, #16
0f008     A7 1E 02 FB | 	rdlong	local01, fp
0f00c     18 FA 61 FD | 	getqx	result1
0f010     0F FB 01 FD | 	qmul	result1, local01
0f014     08 4E 85 F1 | 	sub	fp, #8
0f018     A7 1E 02 FB | 	rdlong	local01, fp
0f01c     18 FA 61 FD | 	getqx	result1
0f020     FD FE 01 F1 | 	add	result3, result1
0f024     0F FF 01 FD | 	qmul	result3, local01
0f028     1C 4E 05 F1 | 	add	fp, #28
0f02c     18 1E 62 FD | 	getqx	local01
0f030     0F FD 01 F1 | 	add	result2, local01
0f034     A7 FC 61 FC | 	wrlong	result2, fp
0f038     2C 4E 85 F1 | 	sub	fp, #44
0f03c     A7 3A 68 FC | 	wrlong	#29, fp
0f040     2C 4E 05 F1 | 	add	fp, #44
0f044     A7 1E 02 FB | 	rdlong	local01, fp
0f048     34 4E 85 F1 | 	sub	fp, #52
0f04c     A7 1E 62 FC | 	wrlong	local01, fp
0f050     18 00 90 FD | 	jmp	#LR__1179
0f054                 | LR__1178
0f054     08 4E 05 F1 | 	add	fp, #8
0f058     A7 3A 68 FC | 	wrlong	#29, fp
0f05c     04 4E 05 F1 | 	add	fp, #4
0f060     A7 1E 02 FB | 	rdlong	local01, fp
0f064     0C 4E 85 F1 | 	sub	fp, #12
0f068     A7 1E 62 FC | 	wrlong	local01, fp
0f06c                 | LR__1179
0f06c     A7 12 02 F6 | 	mov	arg01, fp
0f070     EC B0 BF FD | 	call	#_push
0f074                 | LR__1180
0f074     A7 F0 03 F6 | 	mov	ptra, fp
0f078     B2 00 A0 FD | 	call	#popregs_
0f07c                 | _do_getaddr_ret
0f07c     2D 00 64 FD | 	ret
0f080                 | 
0f080                 | ' 
0f080                 | ' 
0f080                 | ' sub do_inkey
0f080                 | _do_inkey
0f080     02 4A 05 F6 | 	mov	COUNT_, #2
0f084     A8 00 A0 FD | 	call	#pushregs_
0f088     0C F0 07 F1 | 	add	ptra, #12
0f08c     74 CA B0 FD | 	call	#_usbnew_spin2_get_key
0f090     65 00 00 FF 
0f094     58 E4 05 F1 | 	add	objptr, ##51800
0f098     F2 FA 61 FC | 	wrlong	result1, objptr
0f09c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0f09c     65 00 00 FF 
0f0a0     58 E4 85 F1 | 	sub	objptr, ##51800
0f0a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f0a8     94 00 90 AD |  if_e	jmp	#LR__1191
0f0ac     65 00 00 FF 
0f0b0     58 E4 05 F1 | 	add	objptr, ##51800
0f0b4     F2 1C 02 FB | 	rdlong	arg06, objptr
0f0b8     65 00 00 FF 
0f0bc     58 E4 85 F1 | 	sub	objptr, ##51800
0f0c0     00 00 40 FF 
0f0c4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f0c8     65 00 00 CF 
0f0cc     58 E4 05 C1 |  if_b	add	objptr, ##51800
0f0d0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f0d4     65 00 00 CF 
0f0d8     58 E4 85 C1 |  if_b	sub	objptr, ##51800
0f0dc     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f0e0     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f0e4     58 00 90 3D |  if_ae	jmp	#LR__1191
0f0e8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0f0e8     79 00 00 FF 
0f0ec     C4 E5 05 F1 | 	add	objptr, ##62404
0f0f0     F2 1C 02 FB | 	rdlong	arg06, objptr
0f0f4     79 00 00 FF 
0f0f8     C4 E5 85 F1 | 	sub	objptr, ##62404
0f0fc     01 1C 0E F2 | 	cmp	arg06, #1 wz
0f100     3C 00 90 5D |  if_ne	jmp	#LR__1190
0f104     7B 00 00 FF 
0f108     68 E4 05 F1 | 	add	objptr, ##63080
0f10c     F2 14 02 FB | 	rdlong	arg02, objptr
0f110     04 E4 85 F1 | 	sub	objptr, #4
0f114     F2 1A 02 FB | 	rdlong	arg05, objptr
0f118     07 12 06 F6 | 	mov	arg01, #7
0f11c     56 00 00 FF 
0f120     44 16 06 F6 | 	mov	arg03, ##44100
0f124     0C 18 C6 F9 | 	decod	arg04, #12
0f128     01 1C 66 F6 | 	neg	arg06, #1
0f12c     6F 00 00 FF 
0f130     A4 E5 85 F1 | 	sub	objptr, ##57252
0f134     54 CD B0 FD | 	call	#_audio096_spin2_play
0f138     0B 00 00 FF 
0f13c     C0 E4 85 F1 | 	sub	objptr, ##5824
0f140                 | LR__1190
0f140                 | LR__1191
0f140                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0f140     65 00 00 FF 
0f144     58 E4 05 F1 | 	add	objptr, ##51800
0f148     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0f14c     65 00 00 FF 
0f150     58 E4 85 F1 | 	sub	objptr, ##51800
0f154     D4 01 90 AD |  if_e	jmp	#LR__1200
0f158     65 00 00 FF 
0f15c     58 E4 05 F1 | 	add	objptr, ##51800
0f160     F2 1C 02 FB | 	rdlong	arg06, objptr
0f164     65 00 00 FF 
0f168     58 E4 85 F1 | 	sub	objptr, ##51800
0f16c     00 00 40 FF 
0f170     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0f174     65 00 00 CF 
0f178     58 E4 05 C1 |  if_b	add	objptr, ##51800
0f17c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0f180     65 00 00 CF 
0f184     58 E4 85 C1 |  if_b	sub	objptr, ##51800
0f188     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0f18c     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0f190     98 01 90 3D |  if_ae	jmp	#LR__1200
0f194                 | '   if leds and 2 = 2 then 
0f194     7B 00 00 FF 
0f198     88 E4 05 F1 | 	add	objptr, ##63112
0f19c     F2 1E 0A FB | 	rdlong	local01, objptr wz
0f1a0     7B 00 00 FF 
0f1a4     88 E4 85 F1 | 	sub	objptr, ##63112
0f1a8     58 01 90 AD |  if_e	jmp	#LR__1199
0f1ac                 | '     if key>96 andalso key<123 then
0f1ac     65 00 00 FF 
0f1b0     58 E4 05 F1 | 	add	objptr, ##51800
0f1b4     F2 1E 02 FB | 	rdlong	local01, objptr
0f1b8     65 00 00 FF 
0f1bc     58 E4 85 F1 | 	sub	objptr, ##51800
0f1c0     61 1E 16 F2 | 	cmp	local01, #97 wc
0f1c4     3C 00 90 CD |  if_b	jmp	#LR__1192
0f1c8     65 00 00 FF 
0f1cc     58 E4 05 F1 | 	add	objptr, ##51800
0f1d0     F2 1E 02 FB | 	rdlong	local01, objptr
0f1d4     65 00 00 FF 
0f1d8     58 E4 85 F1 | 	sub	objptr, ##51800
0f1dc     7B 1E 16 F2 | 	cmp	local01, #123 wc
0f1e0     20 00 90 3D |  if_ae	jmp	#LR__1192
0f1e4     65 00 00 FF 
0f1e8     58 E4 05 F1 | 	add	objptr, ##51800
0f1ec     F2 1E 02 FB | 	rdlong	local01, objptr
0f1f0     20 1E 86 F1 | 	sub	local01, #32
0f1f4     F2 1E 62 FC | 	wrlong	local01, objptr
0f1f8     65 00 00 FF 
0f1fc     58 E4 85 F1 | 	sub	objptr, ##51800
0f200     00 01 90 FD | 	jmp	#LR__1198
0f204                 | LR__1192
0f204     65 00 00 FF 
0f208     58 E4 05 F1 | 	add	objptr, ##51800
0f20c     F2 1E 02 FB | 	rdlong	local01, objptr
0f210     65 00 00 FF 
0f214     58 E4 85 F1 | 	sub	objptr, ##51800
0f218     41 1E 16 F2 | 	cmp	local01, #65 wc
0f21c     3C 00 90 CD |  if_b	jmp	#LR__1193
0f220     65 00 00 FF 
0f224     58 E4 05 F1 | 	add	objptr, ##51800
0f228     F2 1E 02 FB | 	rdlong	local01, objptr
0f22c     65 00 00 FF 
0f230     58 E4 85 F1 | 	sub	objptr, ##51800
0f234     5B 1E 16 F2 | 	cmp	local01, #91 wc
0f238     20 00 90 3D |  if_ae	jmp	#LR__1193
0f23c     65 00 00 FF 
0f240     58 E4 05 F1 | 	add	objptr, ##51800
0f244     F2 1E 02 FB | 	rdlong	local01, objptr
0f248     20 1E 06 F1 | 	add	local01, #32
0f24c     F2 1E 62 FC | 	wrlong	local01, objptr
0f250     65 00 00 FF 
0f254     58 E4 85 F1 | 	sub	objptr, ##51800
0f258     A8 00 90 FD | 	jmp	#LR__1197
0f25c                 | LR__1193
0f25c     65 00 00 FF 
0f260     58 E4 05 F1 | 	add	objptr, ##51800
0f264     F2 1E 02 FB | 	rdlong	local01, objptr
0f268     65 00 00 FF 
0f26c     58 E4 85 F1 | 	sub	objptr, ##51800
0f270     17 1E 16 F2 | 	cmp	local01, #23 wc
0f274     3C 00 90 CD |  if_b	jmp	#LR__1194
0f278     65 00 00 FF 
0f27c     58 E4 05 F1 | 	add	objptr, ##51800
0f280     F2 1E 02 FB | 	rdlong	local01, objptr
0f284     65 00 00 FF 
0f288     58 E4 85 F1 | 	sub	objptr, ##51800
0f28c     20 1E 16 F2 | 	cmp	local01, #32 wc
0f290     20 00 90 3D |  if_ae	jmp	#LR__1194
0f294     65 00 00 FF 
0f298     58 E4 05 F1 | 	add	objptr, ##51800
0f29c     F2 1E 02 FB | 	rdlong	local01, objptr
0f2a0     09 1E 86 F1 | 	sub	local01, #9
0f2a4     F2 1E 62 FC | 	wrlong	local01, objptr
0f2a8     65 00 00 FF 
0f2ac     58 E4 85 F1 | 	sub	objptr, ##51800
0f2b0     50 00 90 FD | 	jmp	#LR__1196
0f2b4                 | LR__1194
0f2b4     65 00 00 FF 
0f2b8     58 E4 05 F1 | 	add	objptr, ##51800
0f2bc     F2 20 02 FB | 	rdlong	local02, objptr
0f2c0     65 00 00 FF 
0f2c4     58 E4 85 F1 | 	sub	objptr, ##51800
0f2c8     0E 20 16 F2 | 	cmp	local02, #14 wc
0f2cc     34 00 90 CD |  if_b	jmp	#LR__1195
0f2d0     65 00 00 FF 
0f2d4     58 E4 05 F1 | 	add	objptr, ##51800
0f2d8     F2 1E 02 FB | 	rdlong	local01, objptr
0f2dc     65 00 00 FF 
0f2e0     58 E4 85 F1 | 	sub	objptr, ##51800
0f2e4     17 1E 16 F2 | 	cmp	local01, #23 wc
0f2e8     7B 00 00 CF 
0f2ec     98 E4 05 C1 |  if_b	add	objptr, ##63128
0f2f0     F2 20 02 CB |  if_b	rdlong	local02, objptr
0f2f4     27 20 06 C1 |  if_b	add	local02, #39
0f2f8     F2 20 62 CC |  if_b	wrlong	local02, objptr
0f2fc     7B 00 00 CF 
0f300     98 E4 85 C1 |  if_b	sub	objptr, ##63128
0f304                 | LR__1195
0f304                 | LR__1196
0f304                 | LR__1197
0f304                 | LR__1198
0f304                 | LR__1199
0f304     65 00 00 FF 
0f308     58 E4 05 F1 | 	add	objptr, ##51800
0f30c     F2 12 02 FB | 	rdlong	arg01, objptr
0f310     65 00 00 FF 
0f314     58 E4 85 F1 | 	sub	objptr, ##51800
0f318     80 9B B0 FD | 	call	#_scantochar
0f31c     FD 12 02 F6 | 	mov	arg01, result1
0f320     C0 F1 B0 FD | 	call	#__system__Chr_S
0f324     A7 FA 61 FC | 	wrlong	result1, fp
0f328     0C 00 90 FD | 	jmp	#LR__1201
0f32c                 | LR__1200
0f32c     5F 01 00 FF 
0f330     E6 20 06 F6 | 	mov	local02, ##@LR__4936
0f334     A7 20 62 FC | 	wrlong	local02, fp
0f338                 | LR__1201
0f338     08 4E 05 F1 | 	add	fp, #8
0f33c     A7 3E 68 FC | 	wrlong	#31, fp
0f340     08 4E 85 F1 | 	sub	fp, #8
0f344     A7 12 02 F6 | 	mov	arg01, fp
0f348     14 AE BF FD | 	call	#_push
0f34c     A7 F0 03 F6 | 	mov	ptra, fp
0f350     B2 00 A0 FD | 	call	#popregs_
0f354                 | _do_inkey_ret
0f354     2D 00 64 FD | 	ret
0f358                 | 
0f358                 | '  
0f358                 | ' '------------------------ Operators 
0f358                 | ' 
0f358                 | ' sub do_plus 
0f358                 | _do_plus
0f358     05 4A 05 F6 | 	mov	COUNT_, #5
0f35c     A8 00 A0 FD | 	call	#pushregs_
0f360     18 F0 07 F1 | 	add	ptra, #24
0f364     60 AD BF FD | 	call	#_pop
0f368     FD 1E 02 F6 | 	mov	local01, result1
0f36c     FE 20 02 F6 | 	mov	local02, result2
0f370     FF 22 02 F6 | 	mov	local03, result3
0f374     0C 4E 05 F1 | 	add	fp, #12
0f378     A7 1E 62 FC | 	wrlong	local01, fp
0f37c     04 4E 05 F1 | 	add	fp, #4
0f380     A7 20 62 FC | 	wrlong	local02, fp
0f384     04 4E 05 F1 | 	add	fp, #4
0f388     A7 22 62 FC | 	wrlong	local03, fp
0f38c     14 4E 85 F1 | 	sub	fp, #20
0f390     34 AD BF FD | 	call	#_pop
0f394     FF 22 02 F6 | 	mov	local03, result3
0f398     A7 FA 61 FC | 	wrlong	result1, fp
0f39c     04 4E 05 F1 | 	add	fp, #4
0f3a0     A7 FC 61 FC | 	wrlong	result2, fp
0f3a4     04 4E 05 F1 | 	add	fp, #4
0f3a8     A7 22 62 FC | 	wrlong	local03, fp
0f3ac                 | ' 
0f3ac                 | ' t2=pop()
0f3ac                 | ' t1=pop()
0f3ac                 | ' 
0f3ac                 | ' 
0f3ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0f3ac     08 4E 85 F1 | 	sub	fp, #8
0f3b0     1D 22 0E F2 | 	cmp	local03, #29 wz
0f3b4     14 4E 05 A1 |  if_e	add	fp, #20
0f3b8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f3bc     14 4E 85 A1 |  if_e	sub	fp, #20
0f3c0     12 23 02 A6 |  if_e	mov	local03, local04
0f3c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f3c8     1C 00 90 5D |  if_ne	jmp	#LR__1210
0f3cc     A7 1E 02 FB | 	rdlong	local01, fp
0f3d0     0C 4E 05 F1 | 	add	fp, #12
0f3d4     A7 20 02 FB | 	rdlong	local02, fp
0f3d8     0C 4E 85 F1 | 	sub	fp, #12
0f3dc     10 1F 02 F1 | 	add	local01, local02
0f3e0     A7 1E 62 FC | 	wrlong	local01, fp
0f3e4     48 04 90 FD | 	jmp	#LR__1225
0f3e8                 | LR__1210
0f3e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0f3e8     08 4E 05 F1 | 	add	fp, #8
0f3ec     A7 1E 02 FB | 	rdlong	local01, fp
0f3f0     08 4E 85 F1 | 	sub	fp, #8
0f3f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f3f8     14 4E 05 A1 |  if_e	add	fp, #20
0f3fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f400     14 4E 85 A1 |  if_e	sub	fp, #20
0f404     12 23 02 A6 |  if_e	mov	local03, local04
0f408     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f40c     28 00 90 5D |  if_ne	jmp	#LR__1211
0f410     A7 1E 02 FB | 	rdlong	local01, fp
0f414     0C 4E 05 F1 | 	add	fp, #12
0f418     A7 20 02 FB | 	rdlong	local02, fp
0f41c     0C 4E 85 F1 | 	sub	fp, #12
0f420     10 1F 02 F1 | 	add	local01, local02
0f424     A7 1E 62 FC | 	wrlong	local01, fp
0f428     08 4E 05 F1 | 	add	fp, #8
0f42c     A7 38 68 FC | 	wrlong	#28, fp
0f430     08 4E 85 F1 | 	sub	fp, #8
0f434     F8 03 90 FD | 	jmp	#LR__1225
0f438                 | LR__1211
0f438                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f438     08 4E 05 F1 | 	add	fp, #8
0f43c     A7 1E 02 FB | 	rdlong	local01, fp
0f440     08 4E 85 F1 | 	sub	fp, #8
0f444     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f448     14 4E 05 A1 |  if_e	add	fp, #20
0f44c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f450     14 4E 85 A1 |  if_e	sub	fp, #20
0f454     12 23 02 A6 |  if_e	mov	local03, local04
0f458     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f45c     30 00 90 5D |  if_ne	jmp	#LR__1212
0f460     A7 12 02 FB | 	rdlong	arg01, fp
0f464     EC F5 B0 FD | 	call	#__system___float_fromuns
0f468     FD 12 02 F6 | 	mov	arg01, result1
0f46c     0C 4E 05 F1 | 	add	fp, #12
0f470     A7 14 02 FB | 	rdlong	arg02, fp
0f474     0C 4E 85 F1 | 	sub	fp, #12
0f478     0C F6 B0 FD | 	call	#__system___float_add
0f47c     A7 FA 61 FC | 	wrlong	result1, fp
0f480     08 4E 05 F1 | 	add	fp, #8
0f484     A7 3C 68 FC | 	wrlong	#30, fp
0f488     08 4E 85 F1 | 	sub	fp, #8
0f48c     A0 03 90 FD | 	jmp	#LR__1225
0f490                 | LR__1212
0f490                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0f490     08 4E 05 F1 | 	add	fp, #8
0f494     A7 1E 02 FB | 	rdlong	local01, fp
0f498     08 4E 85 F1 | 	sub	fp, #8
0f49c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f4a0     14 4E 05 A1 |  if_e	add	fp, #20
0f4a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f4ac     12 23 02 A6 |  if_e	mov	local03, local04
0f4b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f4b4     1C 00 90 5D |  if_ne	jmp	#LR__1213
0f4b8     A7 1E 02 FB | 	rdlong	local01, fp
0f4bc     0C 4E 05 F1 | 	add	fp, #12
0f4c0     A7 20 02 FB | 	rdlong	local02, fp
0f4c4     0C 4E 85 F1 | 	sub	fp, #12
0f4c8     10 1F 02 F1 | 	add	local01, local02
0f4cc     A7 1E 62 FC | 	wrlong	local01, fp
0f4d0     5C 03 90 FD | 	jmp	#LR__1225
0f4d4                 | LR__1213
0f4d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0f4d4     08 4E 05 F1 | 	add	fp, #8
0f4d8     A7 1E 02 FB | 	rdlong	local01, fp
0f4dc     08 4E 85 F1 | 	sub	fp, #8
0f4e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f4e4     14 4E 05 A1 |  if_e	add	fp, #20
0f4e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f4ec     14 4E 85 A1 |  if_e	sub	fp, #20
0f4f0     12 23 02 A6 |  if_e	mov	local03, local04
0f4f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f4f8     1C 00 90 5D |  if_ne	jmp	#LR__1214
0f4fc     A7 1E 02 FB | 	rdlong	local01, fp
0f500     0C 4E 05 F1 | 	add	fp, #12
0f504     A7 20 02 FB | 	rdlong	local02, fp
0f508     0C 4E 85 F1 | 	sub	fp, #12
0f50c     10 1F 02 F1 | 	add	local01, local02
0f510     A7 1E 62 FC | 	wrlong	local01, fp
0f514     18 03 90 FD | 	jmp	#LR__1225
0f518                 | LR__1214
0f518                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f518     08 4E 05 F1 | 	add	fp, #8
0f51c     A7 1E 02 FB | 	rdlong	local01, fp
0f520     08 4E 85 F1 | 	sub	fp, #8
0f524     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f528     14 4E 05 A1 |  if_e	add	fp, #20
0f52c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f530     14 4E 85 A1 |  if_e	sub	fp, #20
0f534     12 23 02 A6 |  if_e	mov	local03, local04
0f538     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f53c     40 00 90 5D |  if_ne	jmp	#LR__1215
0f540     A7 12 02 FB | 	rdlong	arg01, fp
0f544     09 13 52 F6 | 	abs	arg01, arg01 wc
0f548     1F 26 C6 C9 |  if_b	decod	local05, #31
0f54c     00 26 06 36 |  if_ae	mov	local05, #0
0f550     00 F5 B0 FD | 	call	#__system___float_fromuns
0f554     13 FB 61 F5 | 	xor	result1, local05
0f558     FD 12 02 F6 | 	mov	arg01, result1
0f55c     0C 4E 05 F1 | 	add	fp, #12
0f560     A7 14 02 FB | 	rdlong	arg02, fp
0f564     0C 4E 85 F1 | 	sub	fp, #12
0f568     1C F5 B0 FD | 	call	#__system___float_add
0f56c     A7 FA 61 FC | 	wrlong	result1, fp
0f570     08 4E 05 F1 | 	add	fp, #8
0f574     A7 3C 68 FC | 	wrlong	#30, fp
0f578     08 4E 85 F1 | 	sub	fp, #8
0f57c     B0 02 90 FD | 	jmp	#LR__1225
0f580                 | LR__1215
0f580                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0f580     08 4E 05 F1 | 	add	fp, #8
0f584     A7 1E 02 FB | 	rdlong	local01, fp
0f588     08 4E 85 F1 | 	sub	fp, #8
0f58c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f590     14 4E 05 A1 |  if_e	add	fp, #20
0f594     A7 24 02 AB |  if_e	rdlong	local04, fp
0f598     14 4E 85 A1 |  if_e	sub	fp, #20
0f59c     12 23 02 A6 |  if_e	mov	local03, local04
0f5a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f5a4     28 00 90 5D |  if_ne	jmp	#LR__1216
0f5a8     A7 1E 02 FB | 	rdlong	local01, fp
0f5ac     0C 4E 05 F1 | 	add	fp, #12
0f5b0     A7 12 02 FB | 	rdlong	arg01, fp
0f5b4     0C 4E 85 F1 | 	sub	fp, #12
0f5b8     98 F4 B0 FD | 	call	#__system___float_fromuns
0f5bc     FD 14 02 F6 | 	mov	arg02, result1
0f5c0     0F 13 02 F6 | 	mov	arg01, local01
0f5c4     C0 F4 B0 FD | 	call	#__system___float_add
0f5c8     A7 FA 61 FC | 	wrlong	result1, fp
0f5cc     60 02 90 FD | 	jmp	#LR__1225
0f5d0                 | LR__1216
0f5d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0f5d0     08 4E 05 F1 | 	add	fp, #8
0f5d4     A7 1E 02 FB | 	rdlong	local01, fp
0f5d8     08 4E 85 F1 | 	sub	fp, #8
0f5dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f5e0     14 4E 05 A1 |  if_e	add	fp, #20
0f5e4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5e8     14 4E 85 A1 |  if_e	sub	fp, #20
0f5ec     12 23 02 A6 |  if_e	mov	local03, local04
0f5f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f5f4     38 00 90 5D |  if_ne	jmp	#LR__1217
0f5f8     A7 1E 02 FB | 	rdlong	local01, fp
0f5fc     0C 4E 05 F1 | 	add	fp, #12
0f600     A7 12 02 FB | 	rdlong	arg01, fp
0f604     0C 4E 85 F1 | 	sub	fp, #12
0f608     09 13 52 F6 | 	abs	arg01, arg01 wc
0f60c     1F 26 C6 C9 |  if_b	decod	local05, #31
0f610     00 26 06 36 |  if_ae	mov	local05, #0
0f614     3C F4 B0 FD | 	call	#__system___float_fromuns
0f618     13 FB 61 F5 | 	xor	result1, local05
0f61c     FD 14 02 F6 | 	mov	arg02, result1
0f620     0F 13 02 F6 | 	mov	arg01, local01
0f624     60 F4 B0 FD | 	call	#__system___float_add
0f628     A7 FA 61 FC | 	wrlong	result1, fp
0f62c     00 02 90 FD | 	jmp	#LR__1225
0f630                 | LR__1217
0f630                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0f630     08 4E 05 F1 | 	add	fp, #8
0f634     A7 1E 02 FB | 	rdlong	local01, fp
0f638     08 4E 85 F1 | 	sub	fp, #8
0f63c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f640     14 4E 05 A1 |  if_e	add	fp, #20
0f644     A7 24 02 AB |  if_e	rdlong	local04, fp
0f648     14 4E 85 A1 |  if_e	sub	fp, #20
0f64c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0f650     1C 00 90 5D |  if_ne	jmp	#LR__1218
0f654     A7 12 02 FB | 	rdlong	arg01, fp
0f658     0C 4E 05 F1 | 	add	fp, #12
0f65c     A7 14 02 FB | 	rdlong	arg02, fp
0f660     0C 4E 85 F1 | 	sub	fp, #12
0f664     20 F4 B0 FD | 	call	#__system___float_add
0f668     A7 FA 61 FC | 	wrlong	result1, fp
0f66c     C0 01 90 FD | 	jmp	#LR__1225
0f670                 | LR__1218
0f670                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0f670     08 4E 05 F1 | 	add	fp, #8
0f674     A7 1E 02 FB | 	rdlong	local01, fp
0f678     08 4E 85 F1 | 	sub	fp, #8
0f67c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f680     24 00 90 5D |  if_ne	jmp	#LR__1219
0f684     14 4E 05 F1 | 	add	fp, #20
0f688     A7 22 02 FB | 	rdlong	local03, fp
0f68c     14 4E 85 F1 | 	sub	fp, #20
0f690     1F 22 0E F2 | 	cmp	local03, #31 wz
0f694     A7 04 68 5C |  if_ne	wrlong	#2, fp
0f698     08 4E 05 51 |  if_ne	add	fp, #8
0f69c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f6a0     08 4E 85 51 |  if_ne	sub	fp, #8
0f6a4     88 01 90 5D |  if_ne	jmp	#LR__1225
0f6a8                 | LR__1219
0f6a8                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0f6a8     14 4E 05 F1 | 	add	fp, #20
0f6ac     A7 1E 02 FB | 	rdlong	local01, fp
0f6b0     14 4E 85 F1 | 	sub	fp, #20
0f6b4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f6b8     24 00 90 5D |  if_ne	jmp	#LR__1220
0f6bc     08 4E 05 F1 | 	add	fp, #8
0f6c0     A7 22 02 FB | 	rdlong	local03, fp
0f6c4     08 4E 85 F1 | 	sub	fp, #8
0f6c8     1F 22 0E F2 | 	cmp	local03, #31 wz
0f6cc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0f6d0     08 4E 05 51 |  if_ne	add	fp, #8
0f6d4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f6d8     08 4E 85 51 |  if_ne	sub	fp, #8
0f6dc     50 01 90 5D |  if_ne	jmp	#LR__1225
0f6e0                 | LR__1220
0f6e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0f6e0     08 4E 05 F1 | 	add	fp, #8
0f6e4     A7 1E 02 FB | 	rdlong	local01, fp
0f6e8     08 4E 85 F1 | 	sub	fp, #8
0f6ec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f6f0     14 4E 05 A1 |  if_e	add	fp, #20
0f6f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f6f8     14 4E 85 A1 |  if_e	sub	fp, #20
0f6fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f700     1C 00 90 5D |  if_ne	jmp	#LR__1221
0f704     A7 12 02 FB | 	rdlong	arg01, fp
0f708     0C 4E 05 F1 | 	add	fp, #12
0f70c     A7 14 02 FB | 	rdlong	arg02, fp
0f710     0C 4E 85 F1 | 	sub	fp, #12
0f714     20 CC B0 FD | 	call	#__system___string_concat
0f718     A7 FA 61 FC | 	wrlong	result1, fp
0f71c     10 01 90 FD | 	jmp	#LR__1225
0f720                 | LR__1221
0f720                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0f720     08 4E 05 F1 | 	add	fp, #8
0f724     A7 1E 02 FB | 	rdlong	local01, fp
0f728     08 4E 85 F1 | 	sub	fp, #8
0f72c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f730     14 4E 05 A1 |  if_e	add	fp, #20
0f734     A7 22 02 AB |  if_e	rdlong	local03, fp
0f738     14 4E 85 A1 |  if_e	sub	fp, #20
0f73c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f740     30 00 90 5D |  if_ne	jmp	#LR__1222
0f744     A7 12 02 FB | 	rdlong	arg01, fp
0f748     20 E9 BF FD | 	call	#_convertstring
0f74c     FD 12 02 F6 | 	mov	arg01, result1
0f750     0C 4E 05 F1 | 	add	fp, #12
0f754     A7 14 02 FB | 	rdlong	arg02, fp
0f758     0C 4E 85 F1 | 	sub	fp, #12
0f75c     D8 CB B0 FD | 	call	#__system___string_concat
0f760     A7 FA 61 FC | 	wrlong	result1, fp
0f764     08 4E 05 F1 | 	add	fp, #8
0f768     A7 3E 68 FC | 	wrlong	#31, fp
0f76c     08 4E 85 F1 | 	sub	fp, #8
0f770     BC 00 90 FD | 	jmp	#LR__1225
0f774                 | LR__1222
0f774                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0f774     08 4E 05 F1 | 	add	fp, #8
0f778     A7 1E 02 FB | 	rdlong	local01, fp
0f77c     08 4E 85 F1 | 	sub	fp, #8
0f780     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f784     14 4E 05 A1 |  if_e	add	fp, #20
0f788     A7 22 02 AB |  if_e	rdlong	local03, fp
0f78c     14 4E 85 A1 |  if_e	sub	fp, #20
0f790     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f794     28 00 90 5D |  if_ne	jmp	#LR__1223
0f798     A7 1E 02 FB | 	rdlong	local01, fp
0f79c     0C 4E 05 F1 | 	add	fp, #12
0f7a0     A7 12 02 FB | 	rdlong	arg01, fp
0f7a4     0C 4E 85 F1 | 	sub	fp, #12
0f7a8     C0 E8 BF FD | 	call	#_convertstring
0f7ac     FD 14 02 F6 | 	mov	arg02, result1
0f7b0     0F 13 02 F6 | 	mov	arg01, local01
0f7b4     80 CB B0 FD | 	call	#__system___string_concat
0f7b8     A7 FA 61 FC | 	wrlong	result1, fp
0f7bc     70 00 90 FD | 	jmp	#LR__1225
0f7c0                 | LR__1223
0f7c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0f7c0     08 4E 05 F1 | 	add	fp, #8
0f7c4     A7 1E 02 FB | 	rdlong	local01, fp
0f7c8     08 4E 85 F1 | 	sub	fp, #8
0f7cc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f7d0     14 4E 05 A1 |  if_e	add	fp, #20
0f7d4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7d8     14 4E 85 A1 |  if_e	sub	fp, #20
0f7dc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f7e0     3C 00 90 5D |  if_ne	jmp	#LR__1224
0f7e4     A7 12 02 FB | 	rdlong	arg01, fp
0f7e8     80 E8 BF FD | 	call	#_convertstring
0f7ec     FD 1E 02 F6 | 	mov	local01, result1
0f7f0     0C 4E 05 F1 | 	add	fp, #12
0f7f4     A7 12 02 FB | 	rdlong	arg01, fp
0f7f8     0C 4E 85 F1 | 	sub	fp, #12
0f7fc     6C E8 BF FD | 	call	#_convertstring
0f800     FD 14 02 F6 | 	mov	arg02, result1
0f804     0F 13 02 F6 | 	mov	arg01, local01
0f808     2C CB B0 FD | 	call	#__system___string_concat
0f80c     A7 FA 61 FC | 	wrlong	result1, fp
0f810     08 4E 05 F1 | 	add	fp, #8
0f814     A7 3E 68 FC | 	wrlong	#31, fp
0f818     08 4E 85 F1 | 	sub	fp, #8
0f81c     10 00 90 FD | 	jmp	#LR__1225
0f820                 | LR__1224
0f820     A7 08 68 FC | 	wrlong	#4, fp
0f824     08 4E 05 F1 | 	add	fp, #8
0f828     A7 FE 69 FC | 	wrlong	#255, fp
0f82c     08 4E 85 F1 | 	sub	fp, #8
0f830                 | LR__1225
0f830     A7 12 02 F6 | 	mov	arg01, fp
0f834     28 A9 BF FD | 	call	#_push
0f838     A7 F0 03 F6 | 	mov	ptra, fp
0f83c     B2 00 A0 FD | 	call	#popregs_
0f840                 | _do_plus_ret
0f840     2D 00 64 FD | 	ret
0f844                 | 
0f844                 | ' 
0f844                 | ' sub do_minus
0f844                 | _do_minus
0f844     05 4A 05 F6 | 	mov	COUNT_, #5
0f848     A8 00 A0 FD | 	call	#pushregs_
0f84c     18 F0 07 F1 | 	add	ptra, #24
0f850     74 A8 BF FD | 	call	#_pop
0f854     FD 1E 02 F6 | 	mov	local01, result1
0f858     FE 20 02 F6 | 	mov	local02, result2
0f85c     FF 22 02 F6 | 	mov	local03, result3
0f860     0C 4E 05 F1 | 	add	fp, #12
0f864     A7 1E 62 FC | 	wrlong	local01, fp
0f868     04 4E 05 F1 | 	add	fp, #4
0f86c     A7 20 62 FC | 	wrlong	local02, fp
0f870     04 4E 05 F1 | 	add	fp, #4
0f874     A7 22 62 FC | 	wrlong	local03, fp
0f878     14 4E 85 F1 | 	sub	fp, #20
0f87c     48 A8 BF FD | 	call	#_pop
0f880     FF 22 02 F6 | 	mov	local03, result3
0f884     A7 FA 61 FC | 	wrlong	result1, fp
0f888     04 4E 05 F1 | 	add	fp, #4
0f88c     A7 FC 61 FC | 	wrlong	result2, fp
0f890     04 4E 05 F1 | 	add	fp, #4
0f894     A7 22 62 FC | 	wrlong	local03, fp
0f898                 | ' 
0f898                 | ' t2=pop()
0f898                 | ' t1=pop()
0f898                 | ' 
0f898                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0f898     08 4E 85 F1 | 	sub	fp, #8
0f89c     1D 22 0E F2 | 	cmp	local03, #29 wz
0f8a0     14 4E 05 A1 |  if_e	add	fp, #20
0f8a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f8a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f8ac     12 23 02 A6 |  if_e	mov	local03, local04
0f8b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f8b4     5C 00 90 5D |  if_ne	jmp	#LR__1231
0f8b8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0f8b8     0C 4E 05 F1 | 	add	fp, #12
0f8bc     A7 1E 02 FB | 	rdlong	local01, fp
0f8c0     0C 4E 85 F1 | 	sub	fp, #12
0f8c4     A7 22 02 FB | 	rdlong	local03, fp
0f8c8     11 1F 12 F2 | 	cmp	local01, local03 wc
0f8cc     1C 00 90 3D |  if_ae	jmp	#LR__1230
0f8d0     A7 1E 02 FB | 	rdlong	local01, fp
0f8d4     0C 4E 05 F1 | 	add	fp, #12
0f8d8     A7 20 02 FB | 	rdlong	local02, fp
0f8dc     0C 4E 85 F1 | 	sub	fp, #12
0f8e0     10 1F 82 F1 | 	sub	local01, local02
0f8e4     A7 1E 62 FC | 	wrlong	local01, fp
0f8e8     F4 02 90 FD | 	jmp	#LR__1240
0f8ec                 | LR__1230
0f8ec     A7 1E 02 FB | 	rdlong	local01, fp
0f8f0     0C 4E 05 F1 | 	add	fp, #12
0f8f4     A7 20 02 FB | 	rdlong	local02, fp
0f8f8     0C 4E 85 F1 | 	sub	fp, #12
0f8fc     10 1F 82 F1 | 	sub	local01, local02
0f900     A7 1E 62 FC | 	wrlong	local01, fp
0f904     08 4E 05 F1 | 	add	fp, #8
0f908     A7 38 68 FC | 	wrlong	#28, fp
0f90c     08 4E 85 F1 | 	sub	fp, #8
0f910     CC 02 90 FD | 	jmp	#LR__1240
0f914                 | LR__1231
0f914                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0f914     08 4E 05 F1 | 	add	fp, #8
0f918     A7 1E 02 FB | 	rdlong	local01, fp
0f91c     08 4E 85 F1 | 	sub	fp, #8
0f920     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f924     14 4E 05 A1 |  if_e	add	fp, #20
0f928     A7 24 02 AB |  if_e	rdlong	local04, fp
0f92c     14 4E 85 A1 |  if_e	sub	fp, #20
0f930     12 23 02 A6 |  if_e	mov	local03, local04
0f934     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f938     28 00 90 5D |  if_ne	jmp	#LR__1232
0f93c     A7 1E 02 FB | 	rdlong	local01, fp
0f940     0C 4E 05 F1 | 	add	fp, #12
0f944     A7 20 02 FB | 	rdlong	local02, fp
0f948     0C 4E 85 F1 | 	sub	fp, #12
0f94c     10 1F 82 F1 | 	sub	local01, local02
0f950     A7 1E 62 FC | 	wrlong	local01, fp
0f954     08 4E 05 F1 | 	add	fp, #8
0f958     A7 38 68 FC | 	wrlong	#28, fp
0f95c     08 4E 85 F1 | 	sub	fp, #8
0f960     7C 02 90 FD | 	jmp	#LR__1240
0f964                 | LR__1232
0f964                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0f964     08 4E 05 F1 | 	add	fp, #8
0f968     A7 1E 02 FB | 	rdlong	local01, fp
0f96c     08 4E 85 F1 | 	sub	fp, #8
0f970     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f974     14 4E 05 A1 |  if_e	add	fp, #20
0f978     A7 24 02 AB |  if_e	rdlong	local04, fp
0f97c     14 4E 85 A1 |  if_e	sub	fp, #20
0f980     12 23 02 A6 |  if_e	mov	local03, local04
0f984     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f988     34 00 90 5D |  if_ne	jmp	#LR__1233
0f98c     A7 12 02 FB | 	rdlong	arg01, fp
0f990     C0 F0 B0 FD | 	call	#__system___float_fromuns
0f994     FD 12 02 F6 | 	mov	arg01, result1
0f998     0C 4E 05 F1 | 	add	fp, #12
0f99c     A7 14 02 FB | 	rdlong	arg02, fp
0f9a0     0C 4E 85 F1 | 	sub	fp, #12
0f9a4     1F 14 E6 F4 | 	bitnot	arg02, #31
0f9a8     DC F0 B0 FD | 	call	#__system___float_add
0f9ac     A7 FA 61 FC | 	wrlong	result1, fp
0f9b0     08 4E 05 F1 | 	add	fp, #8
0f9b4     A7 3C 68 FC | 	wrlong	#30, fp
0f9b8     08 4E 85 F1 | 	sub	fp, #8
0f9bc     20 02 90 FD | 	jmp	#LR__1240
0f9c0                 | LR__1233
0f9c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0f9c0     08 4E 05 F1 | 	add	fp, #8
0f9c4     A7 1E 02 FB | 	rdlong	local01, fp
0f9c8     08 4E 85 F1 | 	sub	fp, #8
0f9cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f9d0     14 4E 05 A1 |  if_e	add	fp, #20
0f9d4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f9d8     14 4E 85 A1 |  if_e	sub	fp, #20
0f9dc     12 23 02 A6 |  if_e	mov	local03, local04
0f9e0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f9e4     1C 00 90 5D |  if_ne	jmp	#LR__1234
0f9e8     A7 1E 02 FB | 	rdlong	local01, fp
0f9ec     0C 4E 05 F1 | 	add	fp, #12
0f9f0     A7 20 02 FB | 	rdlong	local02, fp
0f9f4     0C 4E 85 F1 | 	sub	fp, #12
0f9f8     10 1F 82 F1 | 	sub	local01, local02
0f9fc     A7 1E 62 FC | 	wrlong	local01, fp
0fa00     DC 01 90 FD | 	jmp	#LR__1240
0fa04                 | LR__1234
0fa04                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0fa04     08 4E 05 F1 | 	add	fp, #8
0fa08     A7 1E 02 FB | 	rdlong	local01, fp
0fa0c     08 4E 85 F1 | 	sub	fp, #8
0fa10     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa14     14 4E 05 A1 |  if_e	add	fp, #20
0fa18     A7 24 02 AB |  if_e	rdlong	local04, fp
0fa1c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa20     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0fa24     1C 00 90 5D |  if_ne	jmp	#LR__1235
0fa28     A7 1E 02 FB | 	rdlong	local01, fp
0fa2c     0C 4E 05 F1 | 	add	fp, #12
0fa30     A7 20 02 FB | 	rdlong	local02, fp
0fa34     0C 4E 85 F1 | 	sub	fp, #12
0fa38     10 1F 82 F1 | 	sub	local01, local02
0fa3c     A7 1E 62 FC | 	wrlong	local01, fp
0fa40     9C 01 90 FD | 	jmp	#LR__1240
0fa44                 | LR__1235
0fa44                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0fa44     08 4E 05 F1 | 	add	fp, #8
0fa48     A7 1E 02 FB | 	rdlong	local01, fp
0fa4c     08 4E 85 F1 | 	sub	fp, #8
0fa50     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fa54     14 4E 05 A1 |  if_e	add	fp, #20
0fa58     A7 22 02 AB |  if_e	rdlong	local03, fp
0fa5c     14 4E 85 A1 |  if_e	sub	fp, #20
0fa60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fa64     44 00 90 5D |  if_ne	jmp	#LR__1236
0fa68     A7 12 02 FB | 	rdlong	arg01, fp
0fa6c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa70     1F 26 C6 C9 |  if_b	decod	local05, #31
0fa74     00 26 06 36 |  if_ae	mov	local05, #0
0fa78     D8 EF B0 FD | 	call	#__system___float_fromuns
0fa7c     13 FB 61 F5 | 	xor	result1, local05
0fa80     FD 12 02 F6 | 	mov	arg01, result1
0fa84     0C 4E 05 F1 | 	add	fp, #12
0fa88     A7 14 02 FB | 	rdlong	arg02, fp
0fa8c     0C 4E 85 F1 | 	sub	fp, #12
0fa90     1F 14 E6 F4 | 	bitnot	arg02, #31
0fa94     F0 EF B0 FD | 	call	#__system___float_add
0fa98     A7 FA 61 FC | 	wrlong	result1, fp
0fa9c     08 4E 05 F1 | 	add	fp, #8
0faa0     A7 3C 68 FC | 	wrlong	#30, fp
0faa4     08 4E 85 F1 | 	sub	fp, #8
0faa8     34 01 90 FD | 	jmp	#LR__1240
0faac                 | LR__1236
0faac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0faac     08 4E 05 F1 | 	add	fp, #8
0fab0     A7 1E 02 FB | 	rdlong	local01, fp
0fab4     08 4E 85 F1 | 	sub	fp, #8
0fab8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fabc     14 4E 05 A1 |  if_e	add	fp, #20
0fac0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fac4     14 4E 85 A1 |  if_e	sub	fp, #20
0fac8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0facc     2C 00 90 5D |  if_ne	jmp	#LR__1237
0fad0     A7 1E 02 FB | 	rdlong	local01, fp
0fad4     0C 4E 05 F1 | 	add	fp, #12
0fad8     A7 12 02 FB | 	rdlong	arg01, fp
0fadc     0C 4E 85 F1 | 	sub	fp, #12
0fae0     70 EF B0 FD | 	call	#__system___float_fromuns
0fae4     FD 14 02 F6 | 	mov	arg02, result1
0fae8     0F 13 02 F6 | 	mov	arg01, local01
0faec     1F 14 E6 F4 | 	bitnot	arg02, #31
0faf0     94 EF B0 FD | 	call	#__system___float_add
0faf4     A7 FA 61 FC | 	wrlong	result1, fp
0faf8     E4 00 90 FD | 	jmp	#LR__1240
0fafc                 | LR__1237
0fafc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0fafc     08 4E 05 F1 | 	add	fp, #8
0fb00     A7 1E 02 FB | 	rdlong	local01, fp
0fb04     08 4E 85 F1 | 	sub	fp, #8
0fb08     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fb0c     14 4E 05 A1 |  if_e	add	fp, #20
0fb10     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb14     14 4E 85 A1 |  if_e	sub	fp, #20
0fb18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fb1c     3C 00 90 5D |  if_ne	jmp	#LR__1238
0fb20     A7 1E 02 FB | 	rdlong	local01, fp
0fb24     0C 4E 05 F1 | 	add	fp, #12
0fb28     A7 12 02 FB | 	rdlong	arg01, fp
0fb2c     0C 4E 85 F1 | 	sub	fp, #12
0fb30     09 13 52 F6 | 	abs	arg01, arg01 wc
0fb34     1F 26 C6 C9 |  if_b	decod	local05, #31
0fb38     00 26 06 36 |  if_ae	mov	local05, #0
0fb3c     14 EF B0 FD | 	call	#__system___float_fromuns
0fb40     13 FB 61 F5 | 	xor	result1, local05
0fb44     FD 14 02 F6 | 	mov	arg02, result1
0fb48     0F 13 02 F6 | 	mov	arg01, local01
0fb4c     1F 14 E6 F4 | 	bitnot	arg02, #31
0fb50     34 EF B0 FD | 	call	#__system___float_add
0fb54     A7 FA 61 FC | 	wrlong	result1, fp
0fb58     84 00 90 FD | 	jmp	#LR__1240
0fb5c                 | LR__1238
0fb5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0fb5c     08 4E 05 F1 | 	add	fp, #8
0fb60     A7 1E 02 FB | 	rdlong	local01, fp
0fb64     08 4E 85 F1 | 	sub	fp, #8
0fb68     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fb6c     14 4E 05 A1 |  if_e	add	fp, #20
0fb70     A7 22 02 AB |  if_e	rdlong	local03, fp
0fb74     14 4E 85 A1 |  if_e	sub	fp, #20
0fb78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fb7c     20 00 90 5D |  if_ne	jmp	#LR__1239
0fb80     A7 12 02 FB | 	rdlong	arg01, fp
0fb84     0C 4E 05 F1 | 	add	fp, #12
0fb88     A7 14 02 FB | 	rdlong	arg02, fp
0fb8c     0C 4E 85 F1 | 	sub	fp, #12
0fb90     1F 14 E6 F4 | 	bitnot	arg02, #31
0fb94     F0 EE B0 FD | 	call	#__system___float_add
0fb98     A7 FA 61 FC | 	wrlong	result1, fp
0fb9c     40 00 90 FD | 	jmp	#LR__1240
0fba0                 | LR__1239
0fba0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0fba0     08 4E 05 F1 | 	add	fp, #8
0fba4     A7 1E 02 FB | 	rdlong	local01, fp
0fba8     08 4E 85 F1 | 	sub	fp, #8
0fbac     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fbb0     14 4E 05 51 |  if_ne	add	fp, #20
0fbb4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fbb8     14 4E 85 51 |  if_ne	sub	fp, #20
0fbbc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0fbc0     A7 06 68 AC |  if_e	wrlong	#3, fp
0fbc4     08 4E 05 A1 |  if_e	add	fp, #8
0fbc8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fbcc     08 4E 85 A1 |  if_e	sub	fp, #8
0fbd0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0fbd4     08 4E 05 51 |  if_ne	add	fp, #8
0fbd8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fbdc     08 4E 85 51 |  if_ne	sub	fp, #8
0fbe0                 | LR__1240
0fbe0     A7 12 02 F6 | 	mov	arg01, fp
0fbe4     78 A5 BF FD | 	call	#_push
0fbe8     A7 F0 03 F6 | 	mov	ptra, fp
0fbec     B2 00 A0 FD | 	call	#popregs_
0fbf0                 | _do_minus_ret
0fbf0     2D 00 64 FD | 	ret
0fbf4                 | 
0fbf4                 | ' 
0fbf4                 | ' sub do_and 
0fbf4                 | _do_and
0fbf4     03 4A 05 F6 | 	mov	COUNT_, #3
0fbf8     A8 00 A0 FD | 	call	#pushregs_
0fbfc     18 F0 07 F1 | 	add	ptra, #24
0fc00     C4 A4 BF FD | 	call	#_pop
0fc04     FD 12 02 F6 | 	mov	arg01, result1
0fc08     FE 1E 02 F6 | 	mov	local01, result2
0fc0c     FF 20 02 F6 | 	mov	local02, result3
0fc10     0C 4E 05 F1 | 	add	fp, #12
0fc14     A7 12 62 FC | 	wrlong	arg01, fp
0fc18     04 4E 05 F1 | 	add	fp, #4
0fc1c     A7 1E 62 FC | 	wrlong	local01, fp
0fc20     04 4E 05 F1 | 	add	fp, #4
0fc24     A7 20 62 FC | 	wrlong	local02, fp
0fc28     14 4E 85 F1 | 	sub	fp, #20
0fc2c     98 A4 BF FD | 	call	#_pop
0fc30     FF 22 02 F6 | 	mov	local03, result3
0fc34     A7 FA 61 FC | 	wrlong	result1, fp
0fc38     04 4E 05 F1 | 	add	fp, #4
0fc3c     A7 FC 61 FC | 	wrlong	result2, fp
0fc40     04 4E 05 F1 | 	add	fp, #4
0fc44     A7 22 62 FC | 	wrlong	local03, fp
0fc48                 | ' 
0fc48                 | ' t2=pop()
0fc48                 | ' t1=pop()
0fc48                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fc48     08 4E 85 F1 | 	sub	fp, #8
0fc4c     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc50     A7 22 02 AB |  if_e	rdlong	local03, fp
0fc54     A7 22 62 AC |  if_e	wrlong	local03, fp
0fc58     08 4E 05 A1 |  if_e	add	fp, #8
0fc5c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fc60     08 4E 85 A1 |  if_e	sub	fp, #8
0fc64                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fc64     14 4E 05 F1 | 	add	fp, #20
0fc68     A7 22 02 FB | 	rdlong	local03, fp
0fc6c     14 4E 85 F1 | 	sub	fp, #20
0fc70     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc74     18 00 90 5D |  if_ne	jmp	#LR__1250
0fc78     0C 4E 05 F1 | 	add	fp, #12
0fc7c     A7 22 02 FB | 	rdlong	local03, fp
0fc80     A7 22 62 FC | 	wrlong	local03, fp
0fc84     08 4E 05 F1 | 	add	fp, #8
0fc88     A7 3A 68 FC | 	wrlong	#29, fp
0fc8c     14 4E 85 F1 | 	sub	fp, #20
0fc90                 | LR__1250
0fc90                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0fc90     08 4E 05 F1 | 	add	fp, #8
0fc94     A7 22 02 FB | 	rdlong	local03, fp
0fc98     08 4E 85 F1 | 	sub	fp, #8
0fc9c     1F 22 0E F2 | 	cmp	local03, #31 wz
0fca0     14 4E 05 51 |  if_ne	add	fp, #20
0fca4     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fca8     14 4E 85 51 |  if_ne	sub	fp, #20
0fcac     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fcb0     08 4E 05 51 |  if_ne	add	fp, #8
0fcb4     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fcb8     08 4E 85 51 |  if_ne	sub	fp, #8
0fcbc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fcc0     14 4E 05 51 |  if_ne	add	fp, #20
0fcc4     14 4E 85 51 |  if_ne	sub	fp, #20
0fcc8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fccc     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fcd0     08 4E 05 A1 |  if_e	add	fp, #8
0fcd4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fcd8     08 4E 85 A1 |  if_e	sub	fp, #8
0fcdc     18 00 90 AD |  if_e	jmp	#LR__1251
0fce0     A7 22 02 FB | 	rdlong	local03, fp
0fce4     0C 4E 05 F1 | 	add	fp, #12
0fce8     A7 1E 02 FB | 	rdlong	local01, fp
0fcec     0C 4E 85 F1 | 	sub	fp, #12
0fcf0     0F 23 02 F5 | 	and	local03, local01
0fcf4     A7 22 62 FC | 	wrlong	local03, fp
0fcf8                 | LR__1251
0fcf8     A7 12 02 F6 | 	mov	arg01, fp
0fcfc     60 A4 BF FD | 	call	#_push
0fd00     A7 F0 03 F6 | 	mov	ptra, fp
0fd04     B2 00 A0 FD | 	call	#popregs_
0fd08                 | _do_and_ret
0fd08     2D 00 64 FD | 	ret
0fd0c                 | 
0fd0c                 | ' 
0fd0c                 | ' sub do_or 
0fd0c                 | _do_or
0fd0c     03 4A 05 F6 | 	mov	COUNT_, #3
0fd10     A8 00 A0 FD | 	call	#pushregs_
0fd14     18 F0 07 F1 | 	add	ptra, #24
0fd18     AC A3 BF FD | 	call	#_pop
0fd1c     FD 12 02 F6 | 	mov	arg01, result1
0fd20     FE 1E 02 F6 | 	mov	local01, result2
0fd24     FF 20 02 F6 | 	mov	local02, result3
0fd28     0C 4E 05 F1 | 	add	fp, #12
0fd2c     A7 12 62 FC | 	wrlong	arg01, fp
0fd30     04 4E 05 F1 | 	add	fp, #4
0fd34     A7 1E 62 FC | 	wrlong	local01, fp
0fd38     04 4E 05 F1 | 	add	fp, #4
0fd3c     A7 20 62 FC | 	wrlong	local02, fp
0fd40     14 4E 85 F1 | 	sub	fp, #20
0fd44     80 A3 BF FD | 	call	#_pop
0fd48     FF 22 02 F6 | 	mov	local03, result3
0fd4c     A7 FA 61 FC | 	wrlong	result1, fp
0fd50     04 4E 05 F1 | 	add	fp, #4
0fd54     A7 FC 61 FC | 	wrlong	result2, fp
0fd58     04 4E 05 F1 | 	add	fp, #4
0fd5c     A7 22 62 FC | 	wrlong	local03, fp
0fd60                 | ' 
0fd60                 | ' t2=pop()
0fd60                 | ' t1=pop()
0fd60                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fd60     08 4E 85 F1 | 	sub	fp, #8
0fd64     1C 22 0E F2 | 	cmp	local03, #28 wz
0fd68     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd6c     A7 22 62 AC |  if_e	wrlong	local03, fp
0fd70     08 4E 05 A1 |  if_e	add	fp, #8
0fd74     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fd78     08 4E 85 A1 |  if_e	sub	fp, #8
0fd7c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fd7c     14 4E 05 F1 | 	add	fp, #20
0fd80     A7 22 02 FB | 	rdlong	local03, fp
0fd84     14 4E 85 F1 | 	sub	fp, #20
0fd88     1C 22 0E F2 | 	cmp	local03, #28 wz
0fd8c     18 00 90 5D |  if_ne	jmp	#LR__1260
0fd90     0C 4E 05 F1 | 	add	fp, #12
0fd94     A7 22 02 FB | 	rdlong	local03, fp
0fd98     A7 22 62 FC | 	wrlong	local03, fp
0fd9c     08 4E 05 F1 | 	add	fp, #8
0fda0     A7 3A 68 FC | 	wrlong	#29, fp
0fda4     14 4E 85 F1 | 	sub	fp, #20
0fda8                 | LR__1260
0fda8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0fda8     08 4E 05 F1 | 	add	fp, #8
0fdac     A7 22 02 FB | 	rdlong	local03, fp
0fdb0     08 4E 85 F1 | 	sub	fp, #8
0fdb4     1F 22 0E F2 | 	cmp	local03, #31 wz
0fdb8     14 4E 05 51 |  if_ne	add	fp, #20
0fdbc     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fdc0     14 4E 85 51 |  if_ne	sub	fp, #20
0fdc4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fdc8     08 4E 05 51 |  if_ne	add	fp, #8
0fdcc     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fdd0     08 4E 85 51 |  if_ne	sub	fp, #8
0fdd4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fdd8     14 4E 05 51 |  if_ne	add	fp, #20
0fddc     14 4E 85 51 |  if_ne	sub	fp, #20
0fde0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0fde4     A7 0C 68 AC |  if_e	wrlong	#6, fp
0fde8     08 4E 05 A1 |  if_e	add	fp, #8
0fdec     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fdf0     08 4E 85 A1 |  if_e	sub	fp, #8
0fdf4     18 00 90 AD |  if_e	jmp	#LR__1261
0fdf8     A7 22 02 FB | 	rdlong	local03, fp
0fdfc     0C 4E 05 F1 | 	add	fp, #12
0fe00     A7 1E 02 FB | 	rdlong	local01, fp
0fe04     0C 4E 85 F1 | 	sub	fp, #12
0fe08     0F 23 42 F5 | 	or	local03, local01
0fe0c     A7 22 62 FC | 	wrlong	local03, fp
0fe10                 | LR__1261
0fe10     A7 12 02 F6 | 	mov	arg01, fp
0fe14     48 A3 BF FD | 	call	#_push
0fe18     A7 F0 03 F6 | 	mov	ptra, fp
0fe1c     B2 00 A0 FD | 	call	#popregs_
0fe20                 | _do_or_ret
0fe20     2D 00 64 FD | 	ret
0fe24                 | 
0fe24                 | ' 
0fe24                 | ' sub do_mul
0fe24                 | _do_mul
0fe24     05 4A 05 F6 | 	mov	COUNT_, #5
0fe28     A8 00 A0 FD | 	call	#pushregs_
0fe2c     18 F0 07 F1 | 	add	ptra, #24
0fe30     94 A2 BF FD | 	call	#_pop
0fe34     FD 1E 02 F6 | 	mov	local01, result1
0fe38     FE 20 02 F6 | 	mov	local02, result2
0fe3c     FF 22 02 F6 | 	mov	local03, result3
0fe40     0C 4E 05 F1 | 	add	fp, #12
0fe44     A7 1E 62 FC | 	wrlong	local01, fp
0fe48     04 4E 05 F1 | 	add	fp, #4
0fe4c     A7 20 62 FC | 	wrlong	local02, fp
0fe50     04 4E 05 F1 | 	add	fp, #4
0fe54     A7 22 62 FC | 	wrlong	local03, fp
0fe58     14 4E 85 F1 | 	sub	fp, #20
0fe5c     68 A2 BF FD | 	call	#_pop
0fe60     FF 22 02 F6 | 	mov	local03, result3
0fe64     A7 FA 61 FC | 	wrlong	result1, fp
0fe68     04 4E 05 F1 | 	add	fp, #4
0fe6c     A7 FC 61 FC | 	wrlong	result2, fp
0fe70     04 4E 05 F1 | 	add	fp, #4
0fe74     A7 22 62 FC | 	wrlong	local03, fp
0fe78                 | ' 
0fe78                 | ' t2=pop()
0fe78                 | ' t1=pop()
0fe78                 | ' 
0fe78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0fe78     08 4E 85 F1 | 	sub	fp, #8
0fe7c     1D 22 0E F2 | 	cmp	local03, #29 wz
0fe80     14 4E 05 A1 |  if_e	add	fp, #20
0fe84     A7 24 02 AB |  if_e	rdlong	local04, fp
0fe88     14 4E 85 A1 |  if_e	sub	fp, #20
0fe8c     12 23 02 A6 |  if_e	mov	local03, local04
0fe90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fe94     20 00 90 5D |  if_ne	jmp	#LR__1270
0fe98     A7 20 02 FB | 	rdlong	local02, fp
0fe9c     0C 4E 05 F1 | 	add	fp, #12
0fea0     A7 22 02 FB | 	rdlong	local03, fp
0fea4     11 21 02 FD | 	qmul	local02, local03
0fea8     0C 4E 85 F1 | 	sub	fp, #12
0feac     18 1E 62 FD | 	getqx	local01
0feb0     A7 1E 62 FC | 	wrlong	local01, fp
0feb4     C4 02 90 FD | 	jmp	#LR__1279
0feb8                 | LR__1270
0feb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0feb8     08 4E 05 F1 | 	add	fp, #8
0febc     A7 1E 02 FB | 	rdlong	local01, fp
0fec0     08 4E 85 F1 | 	sub	fp, #8
0fec4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fec8     14 4E 05 A1 |  if_e	add	fp, #20
0fecc     A7 24 02 AB |  if_e	rdlong	local04, fp
0fed0     14 4E 85 A1 |  if_e	sub	fp, #20
0fed4     12 23 02 A6 |  if_e	mov	local03, local04
0fed8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fedc     2C 00 90 5D |  if_ne	jmp	#LR__1271
0fee0     A7 20 02 FB | 	rdlong	local02, fp
0fee4     0C 4E 05 F1 | 	add	fp, #12
0fee8     A7 22 02 FB | 	rdlong	local03, fp
0feec     11 21 02 FD | 	qmul	local02, local03
0fef0     0C 4E 85 F1 | 	sub	fp, #12
0fef4     18 1E 62 FD | 	getqx	local01
0fef8     A7 1E 62 FC | 	wrlong	local01, fp
0fefc     08 4E 05 F1 | 	add	fp, #8
0ff00     A7 38 68 FC | 	wrlong	#28, fp
0ff04     08 4E 85 F1 | 	sub	fp, #8
0ff08     70 02 90 FD | 	jmp	#LR__1279
0ff0c                 | LR__1271
0ff0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0ff0c     08 4E 05 F1 | 	add	fp, #8
0ff10     A7 1E 02 FB | 	rdlong	local01, fp
0ff14     08 4E 85 F1 | 	sub	fp, #8
0ff18     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff1c     14 4E 05 A1 |  if_e	add	fp, #20
0ff20     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff24     14 4E 85 A1 |  if_e	sub	fp, #20
0ff28     12 23 02 A6 |  if_e	mov	local03, local04
0ff2c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff30     30 00 90 5D |  if_ne	jmp	#LR__1272
0ff34     A7 12 02 FB | 	rdlong	arg01, fp
0ff38     18 EB B0 FD | 	call	#__system___float_fromuns
0ff3c     FD 12 02 F6 | 	mov	arg01, result1
0ff40     0C 4E 05 F1 | 	add	fp, #12
0ff44     A7 14 02 FB | 	rdlong	arg02, fp
0ff48     0C 4E 85 F1 | 	sub	fp, #12
0ff4c     08 EF B0 FD | 	call	#__system___float_mul
0ff50     A7 FA 61 FC | 	wrlong	result1, fp
0ff54     08 4E 05 F1 | 	add	fp, #8
0ff58     A7 3C 68 FC | 	wrlong	#30, fp
0ff5c     08 4E 85 F1 | 	sub	fp, #8
0ff60     18 02 90 FD | 	jmp	#LR__1279
0ff64                 | LR__1272
0ff64                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0ff64     08 4E 05 F1 | 	add	fp, #8
0ff68     A7 1E 02 FB | 	rdlong	local01, fp
0ff6c     08 4E 85 F1 | 	sub	fp, #8
0ff70     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff74     14 4E 05 A1 |  if_e	add	fp, #20
0ff78     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff7c     14 4E 85 A1 |  if_e	sub	fp, #20
0ff80     12 23 02 A6 |  if_e	mov	local03, local04
0ff84     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ff88     20 00 90 5D |  if_ne	jmp	#LR__1273
0ff8c     A7 20 02 FB | 	rdlong	local02, fp
0ff90     0C 4E 05 F1 | 	add	fp, #12
0ff94     A7 22 02 FB | 	rdlong	local03, fp
0ff98     11 21 02 FD | 	qmul	local02, local03
0ff9c     0C 4E 85 F1 | 	sub	fp, #12
0ffa0     18 1E 62 FD | 	getqx	local01
0ffa4     A7 1E 62 FC | 	wrlong	local01, fp
0ffa8     D0 01 90 FD | 	jmp	#LR__1279
0ffac                 | LR__1273
0ffac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0ffac     08 4E 05 F1 | 	add	fp, #8
0ffb0     A7 1E 02 FB | 	rdlong	local01, fp
0ffb4     08 4E 85 F1 | 	sub	fp, #8
0ffb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ffbc     14 4E 05 A1 |  if_e	add	fp, #20
0ffc0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffc4     14 4E 85 A1 |  if_e	sub	fp, #20
0ffc8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0ffcc     20 00 90 5D |  if_ne	jmp	#LR__1274
0ffd0     A7 20 02 FB | 	rdlong	local02, fp
0ffd4     0C 4E 05 F1 | 	add	fp, #12
0ffd8     A7 22 02 FB | 	rdlong	local03, fp
0ffdc     11 21 02 FD | 	qmul	local02, local03
0ffe0     0C 4E 85 F1 | 	sub	fp, #12
0ffe4     18 1E 62 FD | 	getqx	local01
0ffe8     A7 1E 62 FC | 	wrlong	local01, fp
0ffec     8C 01 90 FD | 	jmp	#LR__1279
0fff0                 | LR__1274
0fff0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0fff0     08 4E 05 F1 | 	add	fp, #8
0fff4     A7 1E 02 FB | 	rdlong	local01, fp
0fff8     08 4E 85 F1 | 	sub	fp, #8
0fffc     1C 1E 0E F2 | 	cmp	local01, #28 wz
10000     14 4E 05 A1 |  if_e	add	fp, #20
10004     A7 22 02 AB |  if_e	rdlong	local03, fp
10008     14 4E 85 A1 |  if_e	sub	fp, #20
1000c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10010     40 00 90 5D |  if_ne	jmp	#LR__1275
10014     A7 12 02 FB | 	rdlong	arg01, fp
10018     09 13 52 F6 | 	abs	arg01, arg01 wc
1001c     1F 26 C6 C9 |  if_b	decod	local05, #31
10020     00 26 06 36 |  if_ae	mov	local05, #0
10024     2C EA B0 FD | 	call	#__system___float_fromuns
10028     13 FB 61 F5 | 	xor	result1, local05
1002c     FD 12 02 F6 | 	mov	arg01, result1
10030     0C 4E 05 F1 | 	add	fp, #12
10034     A7 14 02 FB | 	rdlong	arg02, fp
10038     0C 4E 85 F1 | 	sub	fp, #12
1003c     18 EE B0 FD | 	call	#__system___float_mul
10040     A7 FA 61 FC | 	wrlong	result1, fp
10044     08 4E 05 F1 | 	add	fp, #8
10048     A7 3C 68 FC | 	wrlong	#30, fp
1004c     08 4E 85 F1 | 	sub	fp, #8
10050     28 01 90 FD | 	jmp	#LR__1279
10054                 | LR__1275
10054                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
10054     08 4E 05 F1 | 	add	fp, #8
10058     A7 1E 02 FB | 	rdlong	local01, fp
1005c     08 4E 85 F1 | 	sub	fp, #8
10060     1E 1E 0E F2 | 	cmp	local01, #30 wz
10064     14 4E 05 A1 |  if_e	add	fp, #20
10068     A7 22 02 AB |  if_e	rdlong	local03, fp
1006c     14 4E 85 A1 |  if_e	sub	fp, #20
10070     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10074     28 00 90 5D |  if_ne	jmp	#LR__1276
10078     A7 1E 02 FB | 	rdlong	local01, fp
1007c     0C 4E 05 F1 | 	add	fp, #12
10080     A7 12 02 FB | 	rdlong	arg01, fp
10084     0C 4E 85 F1 | 	sub	fp, #12
10088     C8 E9 B0 FD | 	call	#__system___float_fromuns
1008c     FD 14 02 F6 | 	mov	arg02, result1
10090     0F 13 02 F6 | 	mov	arg01, local01
10094     C0 ED B0 FD | 	call	#__system___float_mul
10098     A7 FA 61 FC | 	wrlong	result1, fp
1009c     DC 00 90 FD | 	jmp	#LR__1279
100a0                 | LR__1276
100a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
100a0     08 4E 05 F1 | 	add	fp, #8
100a4     A7 1E 02 FB | 	rdlong	local01, fp
100a8     08 4E 85 F1 | 	sub	fp, #8
100ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
100b0     14 4E 05 A1 |  if_e	add	fp, #20
100b4     A7 22 02 AB |  if_e	rdlong	local03, fp
100b8     14 4E 85 A1 |  if_e	sub	fp, #20
100bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
100c0     38 00 90 5D |  if_ne	jmp	#LR__1277
100c4     A7 1E 02 FB | 	rdlong	local01, fp
100c8     0C 4E 05 F1 | 	add	fp, #12
100cc     A7 12 02 FB | 	rdlong	arg01, fp
100d0     0C 4E 85 F1 | 	sub	fp, #12
100d4     09 13 52 F6 | 	abs	arg01, arg01 wc
100d8     1F 26 C6 C9 |  if_b	decod	local05, #31
100dc     00 26 06 36 |  if_ae	mov	local05, #0
100e0     70 E9 B0 FD | 	call	#__system___float_fromuns
100e4     13 FB 61 F5 | 	xor	result1, local05
100e8     FD 14 02 F6 | 	mov	arg02, result1
100ec     0F 13 02 F6 | 	mov	arg01, local01
100f0     64 ED B0 FD | 	call	#__system___float_mul
100f4     A7 FA 61 FC | 	wrlong	result1, fp
100f8     80 00 90 FD | 	jmp	#LR__1279
100fc                 | LR__1277
100fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
100fc     08 4E 05 F1 | 	add	fp, #8
10100     A7 1E 02 FB | 	rdlong	local01, fp
10104     08 4E 85 F1 | 	sub	fp, #8
10108     1E 1E 0E F2 | 	cmp	local01, #30 wz
1010c     14 4E 05 A1 |  if_e	add	fp, #20
10110     A7 22 02 AB |  if_e	rdlong	local03, fp
10114     14 4E 85 A1 |  if_e	sub	fp, #20
10118     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1011c     1C 00 90 5D |  if_ne	jmp	#LR__1278
10120     A7 12 02 FB | 	rdlong	arg01, fp
10124     0C 4E 05 F1 | 	add	fp, #12
10128     A7 14 02 FB | 	rdlong	arg02, fp
1012c     0C 4E 85 F1 | 	sub	fp, #12
10130     24 ED B0 FD | 	call	#__system___float_mul
10134     A7 FA 61 FC | 	wrlong	result1, fp
10138     40 00 90 FD | 	jmp	#LR__1279
1013c                 | LR__1278
1013c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1013c     08 4E 05 F1 | 	add	fp, #8
10140     A7 1E 02 FB | 	rdlong	local01, fp
10144     08 4E 85 F1 | 	sub	fp, #8
10148     1F 1E 0E F2 | 	cmp	local01, #31 wz
1014c     14 4E 05 51 |  if_ne	add	fp, #20
10150     A7 22 02 5B |  if_ne	rdlong	local03, fp
10154     14 4E 85 51 |  if_ne	sub	fp, #20
10158     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1015c     A7 10 68 AC |  if_e	wrlong	#8, fp
10160     08 4E 05 A1 |  if_e	add	fp, #8
10164     A7 FE 69 AC |  if_e	wrlong	#255, fp
10168     08 4E 85 A1 |  if_e	sub	fp, #8
1016c     A7 12 68 5C |  if_ne	wrlong	#9, fp
10170     08 4E 05 51 |  if_ne	add	fp, #8
10174     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10178     08 4E 85 51 |  if_ne	sub	fp, #8
1017c                 | LR__1279
1017c     A7 12 02 F6 | 	mov	arg01, fp
10180     DC 9F BF FD | 	call	#_push
10184     A7 F0 03 F6 | 	mov	ptra, fp
10188     B2 00 A0 FD | 	call	#popregs_
1018c                 | _do_mul_ret
1018c     2D 00 64 FD | 	ret
10190                 | 
10190                 | ' 
10190                 | ' sub do_div 
10190                 | _do_div
10190     01 4A 05 F6 | 	mov	COUNT_, #1
10194     A8 00 A0 FD | 	call	#pushregs_
10198     18 F0 07 F1 | 	add	ptra, #24
1019c     28 9F BF FD | 	call	#_pop
101a0     FD 66 02 F6 | 	mov	muldivb_, result1
101a4     FE 64 02 F6 | 	mov	muldiva_, result2
101a8     FF 1E 02 F6 | 	mov	local01, result3
101ac     0C 4E 05 F1 | 	add	fp, #12
101b0     A7 66 62 FC | 	wrlong	muldivb_, fp
101b4     04 4E 05 F1 | 	add	fp, #4
101b8     A7 64 62 FC | 	wrlong	muldiva_, fp
101bc     04 4E 05 F1 | 	add	fp, #4
101c0     A7 1E 62 FC | 	wrlong	local01, fp
101c4     14 4E 85 F1 | 	sub	fp, #20
101c8     FC 9E BF FD | 	call	#_pop
101cc     A7 FA 61 FC | 	wrlong	result1, fp
101d0     04 4E 05 F1 | 	add	fp, #4
101d4     A7 FC 61 FC | 	wrlong	result2, fp
101d8     04 4E 05 F1 | 	add	fp, #4
101dc     A7 FE 61 FC | 	wrlong	result3, fp
101e0                 | ' 
101e0                 | ' t2=pop()
101e0                 | ' t1=pop()
101e0                 | ' 
101e0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
101e0     08 4E 85 F1 | 	sub	fp, #8
101e4     1F FE 0D F2 | 	cmp	result3, #31 wz
101e8     14 4E 05 51 |  if_ne	add	fp, #20
101ec     A7 12 02 5B |  if_ne	rdlong	arg01, fp
101f0     14 4E 85 51 |  if_ne	sub	fp, #20
101f4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
101f8     A7 14 68 AC |  if_e	wrlong	#10, fp
101fc     08 4E 05 A1 |  if_e	add	fp, #8
10200     A7 FE 69 AC |  if_e	wrlong	#255, fp
10204     08 4E 85 A1 |  if_e	sub	fp, #8
10208     90 01 90 AD |  if_e	jmp	#LR__1286
1020c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1020c     08 4E 05 F1 | 	add	fp, #8
10210     A7 66 02 FB | 	rdlong	muldivb_, fp
10214     08 4E 85 F1 | 	sub	fp, #8
10218     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1021c     1C 00 90 5D |  if_ne	jmp	#LR__1280
10220     08 4E 05 F1 | 	add	fp, #8
10224     A7 38 68 FC | 	wrlong	#28, fp
10228     08 4E 85 F1 | 	sub	fp, #8
1022c     A7 12 02 FB | 	rdlong	arg01, fp
10230     00 14 06 F6 | 	mov	arg02, #0
10234     E8 F0 B0 FD | 	call	#__system___float_tointeger
10238     A7 FA 61 FC | 	wrlong	result1, fp
1023c                 | LR__1280
1023c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1023c     14 4E 05 F1 | 	add	fp, #20
10240     A7 66 02 FB | 	rdlong	muldivb_, fp
10244     14 4E 85 F1 | 	sub	fp, #20
10248     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1024c     28 00 90 5D |  if_ne	jmp	#LR__1281
10250     14 4E 05 F1 | 	add	fp, #20
10254     A7 38 68 FC | 	wrlong	#28, fp
10258     08 4E 85 F1 | 	sub	fp, #8
1025c     A7 12 02 FB | 	rdlong	arg01, fp
10260     0C 4E 85 F1 | 	sub	fp, #12
10264     00 14 06 F6 | 	mov	arg02, #0
10268     B4 F0 B0 FD | 	call	#__system___float_tointeger
1026c     0C 4E 05 F1 | 	add	fp, #12
10270     A7 FA 61 FC | 	wrlong	result1, fp
10274     0C 4E 85 F1 | 	sub	fp, #12
10278                 | LR__1281
10278                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10278     08 4E 05 F1 | 	add	fp, #8
1027c     A7 66 02 FB | 	rdlong	muldivb_, fp
10280     08 4E 85 F1 | 	sub	fp, #8
10284     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10288     14 4E 05 A1 |  if_e	add	fp, #20
1028c     A7 1E 02 AB |  if_e	rdlong	local01, fp
10290     14 4E 85 A1 |  if_e	sub	fp, #20
10294     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10298     20 00 90 5D |  if_ne	jmp	#LR__1282
1029c     0C 4E 05 F1 | 	add	fp, #12
102a0     A7 1E 02 FB | 	rdlong	local01, fp
102a4     0C 4E 85 F1 | 	sub	fp, #12
102a8     A7 66 02 FB | 	rdlong	muldivb_, fp
102ac     0F 67 12 FD | 	qdiv	muldivb_, local01
102b0     18 1E 62 FD | 	getqx	local01
102b4     A7 1E 62 FC | 	wrlong	local01, fp
102b8     E0 00 90 FD | 	jmp	#LR__1286
102bc                 | LR__1282
102bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
102bc     08 4E 05 F1 | 	add	fp, #8
102c0     A7 66 02 FB | 	rdlong	muldivb_, fp
102c4     08 4E 85 F1 | 	sub	fp, #8
102c8     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
102cc     14 4E 05 A1 |  if_e	add	fp, #20
102d0     A7 1E 02 AB |  if_e	rdlong	local01, fp
102d4     14 4E 85 A1 |  if_e	sub	fp, #20
102d8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
102dc     2C 00 90 5D |  if_ne	jmp	#LR__1283
102e0     0C 4E 05 F1 | 	add	fp, #12
102e4     A7 1E 02 FB | 	rdlong	local01, fp
102e8     0C 4E 85 F1 | 	sub	fp, #12
102ec     A7 66 02 FB | 	rdlong	muldivb_, fp
102f0     0F 67 12 FD | 	qdiv	muldivb_, local01
102f4     18 1E 62 FD | 	getqx	local01
102f8     A7 1E 62 FC | 	wrlong	local01, fp
102fc     08 4E 05 F1 | 	add	fp, #8
10300     A7 38 68 FC | 	wrlong	#28, fp
10304     08 4E 85 F1 | 	sub	fp, #8
10308     90 00 90 FD | 	jmp	#LR__1286
1030c                 | LR__1283
1030c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1030c     08 4E 05 F1 | 	add	fp, #8
10310     A7 66 02 FB | 	rdlong	muldivb_, fp
10314     08 4E 85 F1 | 	sub	fp, #8
10318     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1031c     14 4E 05 A1 |  if_e	add	fp, #20
10320     A7 1E 02 AB |  if_e	rdlong	local01, fp
10324     14 4E 85 A1 |  if_e	sub	fp, #20
10328     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1032c     1C 00 90 5D |  if_ne	jmp	#LR__1284
10330     A7 64 02 FB | 	rdlong	muldiva_, fp
10334     0C 4E 05 F1 | 	add	fp, #12
10338     A7 66 02 FB | 	rdlong	muldivb_, fp
1033c     0C 4E 85 F1 | 	sub	fp, #12
10340     BA 00 A0 FD | 	call	#divide_
10344     A7 66 62 FC | 	wrlong	muldivb_, fp
10348     50 00 90 FD | 	jmp	#LR__1286
1034c                 | LR__1284
1034c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1034c     08 4E 05 F1 | 	add	fp, #8
10350     A7 66 02 FB | 	rdlong	muldivb_, fp
10354     08 4E 85 F1 | 	sub	fp, #8
10358     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1035c     14 4E 05 A1 |  if_e	add	fp, #20
10360     A7 1E 02 AB |  if_e	rdlong	local01, fp
10364     14 4E 85 A1 |  if_e	sub	fp, #20
10368     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1036c     1C 00 90 5D |  if_ne	jmp	#LR__1285
10370     A7 64 02 FB | 	rdlong	muldiva_, fp
10374     0C 4E 05 F1 | 	add	fp, #12
10378     A7 66 02 FB | 	rdlong	muldivb_, fp
1037c     0C 4E 85 F1 | 	sub	fp, #12
10380     BA 00 A0 FD | 	call	#divide_
10384     A7 66 62 FC | 	wrlong	muldivb_, fp
10388     10 00 90 FD | 	jmp	#LR__1286
1038c                 | LR__1285
1038c     A7 16 68 FC | 	wrlong	#11, fp
10390     08 4E 05 F1 | 	add	fp, #8
10394     A7 FE 69 FC | 	wrlong	#255, fp
10398     08 4E 85 F1 | 	sub	fp, #8
1039c                 | LR__1286
1039c     A7 12 02 F6 | 	mov	arg01, fp
103a0     BC 9D BF FD | 	call	#_push
103a4     A7 F0 03 F6 | 	mov	ptra, fp
103a8     B2 00 A0 FD | 	call	#popregs_
103ac                 | _do_div_ret
103ac     2D 00 64 FD | 	ret
103b0                 | 
103b0                 | ' 
103b0                 | ' sub do_fdiv 
103b0                 | _do_fdiv
103b0     02 4A 05 F6 | 	mov	COUNT_, #2
103b4     A8 00 A0 FD | 	call	#pushregs_
103b8     18 F0 07 F1 | 	add	ptra, #24
103bc     08 9D BF FD | 	call	#_pop
103c0     FD 14 02 F6 | 	mov	arg02, result1
103c4     FE 12 02 F6 | 	mov	arg01, result2
103c8     FF 1E 02 F6 | 	mov	local01, result3
103cc     0C 4E 05 F1 | 	add	fp, #12
103d0     A7 14 62 FC | 	wrlong	arg02, fp
103d4     04 4E 05 F1 | 	add	fp, #4
103d8     A7 12 62 FC | 	wrlong	arg01, fp
103dc     04 4E 05 F1 | 	add	fp, #4
103e0     A7 1E 62 FC | 	wrlong	local01, fp
103e4     14 4E 85 F1 | 	sub	fp, #20
103e8     DC 9C BF FD | 	call	#_pop
103ec     A7 FA 61 FC | 	wrlong	result1, fp
103f0     04 4E 05 F1 | 	add	fp, #4
103f4     A7 FC 61 FC | 	wrlong	result2, fp
103f8     04 4E 05 F1 | 	add	fp, #4
103fc     A7 FE 61 FC | 	wrlong	result3, fp
10400                 | ' 
10400                 | ' t2=pop()
10400                 | ' t1=pop()
10400                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
10400     08 4E 85 F1 | 	sub	fp, #8
10404     1F FE 0D F2 | 	cmp	result3, #31 wz
10408     14 4E 05 51 |  if_ne	add	fp, #20
1040c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10410     14 4E 85 51 |  if_ne	sub	fp, #20
10414     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10418     A7 14 68 AC |  if_e	wrlong	#10, fp
1041c     08 4E 05 A1 |  if_e	add	fp, #8
10420     A7 FE 69 AC |  if_e	wrlong	#255, fp
10424     08 4E 85 A1 |  if_e	sub	fp, #8
10428     38 01 90 AD |  if_e	jmp	#LR__1295
1042c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1042c     08 4E 05 F1 | 	add	fp, #8
10430     A7 14 02 FB | 	rdlong	arg02, fp
10434     08 4E 85 F1 | 	sub	fp, #8
10438     1C 14 0E F2 | 	cmp	arg02, #28 wz
1043c     28 00 90 5D |  if_ne	jmp	#LR__1290
10440     08 4E 05 F1 | 	add	fp, #8
10444     A7 3C 68 FC | 	wrlong	#30, fp
10448     08 4E 85 F1 | 	sub	fp, #8
1044c     A7 12 02 FB | 	rdlong	arg01, fp
10450     09 13 52 F6 | 	abs	arg01, arg01 wc
10454     1F 20 C6 C9 |  if_b	decod	local02, #31
10458     00 20 06 36 |  if_ae	mov	local02, #0
1045c     F4 E5 B0 FD | 	call	#__system___float_fromuns
10460     10 FB 61 F5 | 	xor	result1, local02
10464     A7 FA 61 FC | 	wrlong	result1, fp
10468                 | LR__1290
10468                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
10468     08 4E 05 F1 | 	add	fp, #8
1046c     A7 14 02 FB | 	rdlong	arg02, fp
10470     08 4E 85 F1 | 	sub	fp, #8
10474     1D 14 0E F2 | 	cmp	arg02, #29 wz
10478     18 00 90 5D |  if_ne	jmp	#LR__1291
1047c     08 4E 05 F1 | 	add	fp, #8
10480     A7 3C 68 FC | 	wrlong	#30, fp
10484     08 4E 85 F1 | 	sub	fp, #8
10488     A7 12 02 FB | 	rdlong	arg01, fp
1048c     C4 E5 B0 FD | 	call	#__system___float_fromuns
10490     A7 FA 61 FC | 	wrlong	result1, fp
10494                 | LR__1291
10494                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10494     14 4E 05 F1 | 	add	fp, #20
10498     A7 14 02 FB | 	rdlong	arg02, fp
1049c     14 4E 85 F1 | 	sub	fp, #20
104a0     1C 14 0E F2 | 	cmp	arg02, #28 wz
104a4     34 00 90 5D |  if_ne	jmp	#LR__1292
104a8     14 4E 05 F1 | 	add	fp, #20
104ac     A7 3C 68 FC | 	wrlong	#30, fp
104b0     08 4E 85 F1 | 	sub	fp, #8
104b4     A7 12 02 FB | 	rdlong	arg01, fp
104b8     0C 4E 85 F1 | 	sub	fp, #12
104bc     09 13 52 F6 | 	abs	arg01, arg01 wc
104c0     1F 20 C6 C9 |  if_b	decod	local02, #31
104c4     00 20 06 36 |  if_ae	mov	local02, #0
104c8     88 E5 B0 FD | 	call	#__system___float_fromuns
104cc     10 FB 61 F5 | 	xor	result1, local02
104d0     0C 4E 05 F1 | 	add	fp, #12
104d4     A7 FA 61 FC | 	wrlong	result1, fp
104d8     0C 4E 85 F1 | 	sub	fp, #12
104dc                 | LR__1292
104dc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
104dc     14 4E 05 F1 | 	add	fp, #20
104e0     A7 14 02 FB | 	rdlong	arg02, fp
104e4     14 4E 85 F1 | 	sub	fp, #20
104e8     1D 14 0E F2 | 	cmp	arg02, #29 wz
104ec     24 00 90 5D |  if_ne	jmp	#LR__1293
104f0     14 4E 05 F1 | 	add	fp, #20
104f4     A7 3C 68 FC | 	wrlong	#30, fp
104f8     08 4E 85 F1 | 	sub	fp, #8
104fc     A7 12 02 FB | 	rdlong	arg01, fp
10500     0C 4E 85 F1 | 	sub	fp, #12
10504     4C E5 B0 FD | 	call	#__system___float_fromuns
10508     0C 4E 05 F1 | 	add	fp, #12
1050c     A7 FA 61 FC | 	wrlong	result1, fp
10510     0C 4E 85 F1 | 	sub	fp, #12
10514                 | LR__1293
10514                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
10514     08 4E 05 F1 | 	add	fp, #8
10518     A7 14 02 FB | 	rdlong	arg02, fp
1051c     08 4E 85 F1 | 	sub	fp, #8
10520     1E 14 0E F2 | 	cmp	arg02, #30 wz
10524     14 4E 05 A1 |  if_e	add	fp, #20
10528     A7 1E 02 AB |  if_e	rdlong	local01, fp
1052c     14 4E 85 A1 |  if_e	sub	fp, #20
10530     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10534     1C 00 90 5D |  if_ne	jmp	#LR__1294
10538     A7 12 02 FB | 	rdlong	arg01, fp
1053c     0C 4E 05 F1 | 	add	fp, #12
10540     A7 14 02 FB | 	rdlong	arg02, fp
10544     0C 4E 85 F1 | 	sub	fp, #12
10548     10 EB B0 FD | 	call	#__system___float_div
1054c     A7 FA 61 FC | 	wrlong	result1, fp
10550     10 00 90 FD | 	jmp	#LR__1295
10554                 | LR__1294
10554     A7 16 68 FC | 	wrlong	#11, fp
10558     08 4E 05 F1 | 	add	fp, #8
1055c     A7 FE 69 FC | 	wrlong	#255, fp
10560     08 4E 85 F1 | 	sub	fp, #8
10564                 | LR__1295
10564     A7 12 02 F6 | 	mov	arg01, fp
10568     F4 9B BF FD | 	call	#_push
1056c     A7 F0 03 F6 | 	mov	ptra, fp
10570     B2 00 A0 FD | 	call	#popregs_
10574                 | _do_fdiv_ret
10574     2D 00 64 FD | 	ret
10578                 | 
10578                 | ' 
10578                 | ' 
10578                 | ' sub do_mod 
10578                 | _do_mod
10578     01 4A 05 F6 | 	mov	COUNT_, #1
1057c     A8 00 A0 FD | 	call	#pushregs_
10580     18 F0 07 F1 | 	add	ptra, #24
10584     40 9B BF FD | 	call	#_pop
10588     FD 66 02 F6 | 	mov	muldivb_, result1
1058c     FE 64 02 F6 | 	mov	muldiva_, result2
10590     FF 1E 02 F6 | 	mov	local01, result3
10594     0C 4E 05 F1 | 	add	fp, #12
10598     A7 66 62 FC | 	wrlong	muldivb_, fp
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 64 62 FC | 	wrlong	muldiva_, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 1E 62 FC | 	wrlong	local01, fp
105ac     14 4E 85 F1 | 	sub	fp, #20
105b0     14 9B BF FD | 	call	#_pop
105b4     A7 FA 61 FC | 	wrlong	result1, fp
105b8     04 4E 05 F1 | 	add	fp, #4
105bc     A7 FC 61 FC | 	wrlong	result2, fp
105c0     04 4E 05 F1 | 	add	fp, #4
105c4     A7 FE 61 FC | 	wrlong	result3, fp
105c8                 | ' 
105c8                 | ' t2=pop()
105c8                 | ' t1=pop()
105c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
105c8     08 4E 85 F1 | 	sub	fp, #8
105cc     1F FE 0D F2 | 	cmp	result3, #31 wz
105d0     14 4E 05 51 |  if_ne	add	fp, #20
105d4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
105d8     14 4E 85 51 |  if_ne	sub	fp, #20
105dc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
105e0     A7 14 68 AC |  if_e	wrlong	#10, fp
105e4     08 4E 05 A1 |  if_e	add	fp, #8
105e8     A7 FE 69 AC |  if_e	wrlong	#255, fp
105ec     08 4E 85 A1 |  if_e	sub	fp, #8
105f0     90 01 90 AD |  if_e	jmp	#LR__1306
105f4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
105f4     08 4E 05 F1 | 	add	fp, #8
105f8     A7 66 02 FB | 	rdlong	muldivb_, fp
105fc     08 4E 85 F1 | 	sub	fp, #8
10600     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10604     1C 00 90 5D |  if_ne	jmp	#LR__1300
10608     08 4E 05 F1 | 	add	fp, #8
1060c     A7 38 68 FC | 	wrlong	#28, fp
10610     08 4E 85 F1 | 	sub	fp, #8
10614     A7 12 02 FB | 	rdlong	arg01, fp
10618     00 14 06 F6 | 	mov	arg02, #0
1061c     00 ED B0 FD | 	call	#__system___float_tointeger
10620     A7 FA 61 FC | 	wrlong	result1, fp
10624                 | LR__1300
10624                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10624     14 4E 05 F1 | 	add	fp, #20
10628     A7 66 02 FB | 	rdlong	muldivb_, fp
1062c     14 4E 85 F1 | 	sub	fp, #20
10630     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10634     28 00 90 5D |  if_ne	jmp	#LR__1301
10638     14 4E 05 F1 | 	add	fp, #20
1063c     A7 38 68 FC | 	wrlong	#28, fp
10640     08 4E 85 F1 | 	sub	fp, #8
10644     A7 12 02 FB | 	rdlong	arg01, fp
10648     0C 4E 85 F1 | 	sub	fp, #12
1064c     00 14 06 F6 | 	mov	arg02, #0
10650     CC EC B0 FD | 	call	#__system___float_tointeger
10654     0C 4E 05 F1 | 	add	fp, #12
10658     A7 FA 61 FC | 	wrlong	result1, fp
1065c     0C 4E 85 F1 | 	sub	fp, #12
10660                 | LR__1301
10660                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
10660     08 4E 05 F1 | 	add	fp, #8
10664     A7 66 02 FB | 	rdlong	muldivb_, fp
10668     08 4E 85 F1 | 	sub	fp, #8
1066c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10670     14 4E 05 A1 |  if_e	add	fp, #20
10674     A7 1E 02 AB |  if_e	rdlong	local01, fp
10678     14 4E 85 A1 |  if_e	sub	fp, #20
1067c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10680     20 00 90 5D |  if_ne	jmp	#LR__1302
10684     0C 4E 05 F1 | 	add	fp, #12
10688     A7 1E 02 FB | 	rdlong	local01, fp
1068c     0C 4E 85 F1 | 	sub	fp, #12
10690     A7 66 02 FB | 	rdlong	muldivb_, fp
10694     0F 67 12 FD | 	qdiv	muldivb_, local01
10698     19 1E 62 FD | 	getqy	local01
1069c     A7 1E 62 FC | 	wrlong	local01, fp
106a0     E0 00 90 FD | 	jmp	#LR__1306
106a4                 | LR__1302
106a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
106a4     08 4E 05 F1 | 	add	fp, #8
106a8     A7 66 02 FB | 	rdlong	muldivb_, fp
106ac     08 4E 85 F1 | 	sub	fp, #8
106b0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
106b4     14 4E 05 A1 |  if_e	add	fp, #20
106b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
106bc     14 4E 85 A1 |  if_e	sub	fp, #20
106c0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
106c4     2C 00 90 5D |  if_ne	jmp	#LR__1303
106c8     0C 4E 05 F1 | 	add	fp, #12
106cc     A7 1E 02 FB | 	rdlong	local01, fp
106d0     0C 4E 85 F1 | 	sub	fp, #12
106d4     A7 66 02 FB | 	rdlong	muldivb_, fp
106d8     0F 67 12 FD | 	qdiv	muldivb_, local01
106dc     19 1E 62 FD | 	getqy	local01
106e0     A7 1E 62 FC | 	wrlong	local01, fp
106e4     08 4E 05 F1 | 	add	fp, #8
106e8     A7 38 68 FC | 	wrlong	#28, fp
106ec     08 4E 85 F1 | 	sub	fp, #8
106f0     90 00 90 FD | 	jmp	#LR__1306
106f4                 | LR__1303
106f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
106f4     08 4E 05 F1 | 	add	fp, #8
106f8     A7 66 02 FB | 	rdlong	muldivb_, fp
106fc     08 4E 85 F1 | 	sub	fp, #8
10700     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10704     14 4E 05 A1 |  if_e	add	fp, #20
10708     A7 1E 02 AB |  if_e	rdlong	local01, fp
1070c     14 4E 85 A1 |  if_e	sub	fp, #20
10710     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10714     1C 00 90 5D |  if_ne	jmp	#LR__1304
10718     A7 64 02 FB | 	rdlong	muldiva_, fp
1071c     0C 4E 05 F1 | 	add	fp, #12
10720     A7 66 02 FB | 	rdlong	muldivb_, fp
10724     0C 4E 85 F1 | 	sub	fp, #12
10728     BA 00 A0 FD | 	call	#divide_
1072c     A7 64 62 FC | 	wrlong	muldiva_, fp
10730     50 00 90 FD | 	jmp	#LR__1306
10734                 | LR__1304
10734                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
10734     08 4E 05 F1 | 	add	fp, #8
10738     A7 66 02 FB | 	rdlong	muldivb_, fp
1073c     08 4E 85 F1 | 	sub	fp, #8
10740     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10744     14 4E 05 A1 |  if_e	add	fp, #20
10748     A7 1E 02 AB |  if_e	rdlong	local01, fp
1074c     14 4E 85 A1 |  if_e	sub	fp, #20
10750     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10754     1C 00 90 5D |  if_ne	jmp	#LR__1305
10758     A7 64 02 FB | 	rdlong	muldiva_, fp
1075c     0C 4E 05 F1 | 	add	fp, #12
10760     A7 66 02 FB | 	rdlong	muldivb_, fp
10764     0C 4E 85 F1 | 	sub	fp, #12
10768     BA 00 A0 FD | 	call	#divide_
1076c     A7 64 62 FC | 	wrlong	muldiva_, fp
10770     10 00 90 FD | 	jmp	#LR__1306
10774                 | LR__1305
10774     A7 16 68 FC | 	wrlong	#11, fp
10778     08 4E 05 F1 | 	add	fp, #8
1077c     A7 FE 69 FC | 	wrlong	#255, fp
10780     08 4E 85 F1 | 	sub	fp, #8
10784                 | LR__1306
10784     A7 12 02 F6 | 	mov	arg01, fp
10788     D4 99 BF FD | 	call	#_push
1078c     A7 F0 03 F6 | 	mov	ptra, fp
10790     B2 00 A0 FD | 	call	#popregs_
10794                 | _do_mod_ret
10794     2D 00 64 FD | 	ret
10798                 | 
10798                 | ' 
10798                 | ' sub do_shl 
10798                 | _do_shl
10798     03 4A 05 F6 | 	mov	COUNT_, #3
1079c     A8 00 A0 FD | 	call	#pushregs_
107a0     18 F0 07 F1 | 	add	ptra, #24
107a4     20 99 BF FD | 	call	#_pop
107a8     FD 12 02 F6 | 	mov	arg01, result1
107ac     FE 1E 02 F6 | 	mov	local01, result2
107b0     FF 20 02 F6 | 	mov	local02, result3
107b4     0C 4E 05 F1 | 	add	fp, #12
107b8     A7 12 62 FC | 	wrlong	arg01, fp
107bc     04 4E 05 F1 | 	add	fp, #4
107c0     A7 1E 62 FC | 	wrlong	local01, fp
107c4     04 4E 05 F1 | 	add	fp, #4
107c8     A7 20 62 FC | 	wrlong	local02, fp
107cc     14 4E 85 F1 | 	sub	fp, #20
107d0     F4 98 BF FD | 	call	#_pop
107d4     FF 22 02 F6 | 	mov	local03, result3
107d8     A7 FA 61 FC | 	wrlong	result1, fp
107dc     04 4E 05 F1 | 	add	fp, #4
107e0     A7 FC 61 FC | 	wrlong	result2, fp
107e4     04 4E 05 F1 | 	add	fp, #4
107e8     A7 22 62 FC | 	wrlong	local03, fp
107ec                 | ' 
107ec                 | ' t2=pop()
107ec                 | ' t1=pop()
107ec                 | ' 
107ec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
107ec     08 4E 85 F1 | 	sub	fp, #8
107f0     1C 22 0E F2 | 	cmp	local03, #28 wz
107f4     A7 22 02 AB |  if_e	rdlong	local03, fp
107f8     A7 22 62 AC |  if_e	wrlong	local03, fp
107fc     08 4E 05 A1 |  if_e	add	fp, #8
10800     A7 3A 68 AC |  if_e	wrlong	#29, fp
10804     08 4E 85 A1 |  if_e	sub	fp, #8
10808                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10808     14 4E 05 F1 | 	add	fp, #20
1080c     A7 22 02 FB | 	rdlong	local03, fp
10810     14 4E 85 F1 | 	sub	fp, #20
10814     1C 22 0E F2 | 	cmp	local03, #28 wz
10818     18 00 90 5D |  if_ne	jmp	#LR__1310
1081c     0C 4E 05 F1 | 	add	fp, #12
10820     A7 22 02 FB | 	rdlong	local03, fp
10824     A7 22 62 FC | 	wrlong	local03, fp
10828     08 4E 05 F1 | 	add	fp, #8
1082c     A7 3A 68 FC | 	wrlong	#29, fp
10830     14 4E 85 F1 | 	sub	fp, #20
10834                 | LR__1310
10834                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
10834     08 4E 05 F1 | 	add	fp, #8
10838     A7 22 02 FB | 	rdlong	local03, fp
1083c     08 4E 85 F1 | 	sub	fp, #8
10840     1F 22 0E F2 | 	cmp	local03, #31 wz
10844     14 4E 05 51 |  if_ne	add	fp, #20
10848     A7 20 02 5B |  if_ne	rdlong	local02, fp
1084c     14 4E 85 51 |  if_ne	sub	fp, #20
10850     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10854     08 4E 05 51 |  if_ne	add	fp, #8
10858     A7 22 02 5B |  if_ne	rdlong	local03, fp
1085c     08 4E 85 51 |  if_ne	sub	fp, #8
10860     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10864     14 4E 05 51 |  if_ne	add	fp, #20
10868     14 4E 85 51 |  if_ne	sub	fp, #20
1086c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10870     A7 0C 68 AC |  if_e	wrlong	#6, fp
10874     08 4E 05 A1 |  if_e	add	fp, #8
10878     A7 FE 69 AC |  if_e	wrlong	#255, fp
1087c     08 4E 85 A1 |  if_e	sub	fp, #8
10880     18 00 90 AD |  if_e	jmp	#LR__1311
10884     A7 22 02 FB | 	rdlong	local03, fp
10888     0C 4E 05 F1 | 	add	fp, #12
1088c     A7 1E 02 FB | 	rdlong	local01, fp
10890     0C 4E 85 F1 | 	sub	fp, #12
10894     0F 23 62 F0 | 	shl	local03, local01
10898     A7 22 62 FC | 	wrlong	local03, fp
1089c                 | LR__1311
1089c     A7 12 02 F6 | 	mov	arg01, fp
108a0     BC 98 BF FD | 	call	#_push
108a4     A7 F0 03 F6 | 	mov	ptra, fp
108a8     B2 00 A0 FD | 	call	#popregs_
108ac                 | _do_shl_ret
108ac     2D 00 64 FD | 	ret
108b0                 | 
108b0                 | ' 
108b0                 | ' sub do_shr 
108b0                 | _do_shr
108b0     03 4A 05 F6 | 	mov	COUNT_, #3
108b4     A8 00 A0 FD | 	call	#pushregs_
108b8     18 F0 07 F1 | 	add	ptra, #24
108bc     08 98 BF FD | 	call	#_pop
108c0     FD 12 02 F6 | 	mov	arg01, result1
108c4     FE 1E 02 F6 | 	mov	local01, result2
108c8     FF 20 02 F6 | 	mov	local02, result3
108cc     0C 4E 05 F1 | 	add	fp, #12
108d0     A7 12 62 FC | 	wrlong	arg01, fp
108d4     04 4E 05 F1 | 	add	fp, #4
108d8     A7 1E 62 FC | 	wrlong	local01, fp
108dc     04 4E 05 F1 | 	add	fp, #4
108e0     A7 20 62 FC | 	wrlong	local02, fp
108e4     14 4E 85 F1 | 	sub	fp, #20
108e8     DC 97 BF FD | 	call	#_pop
108ec     FF 22 02 F6 | 	mov	local03, result3
108f0     A7 FA 61 FC | 	wrlong	result1, fp
108f4     04 4E 05 F1 | 	add	fp, #4
108f8     A7 FC 61 FC | 	wrlong	result2, fp
108fc     04 4E 05 F1 | 	add	fp, #4
10900     A7 22 62 FC | 	wrlong	local03, fp
10904                 | ' t2=pop()
10904                 | ' t1=pop()
10904                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10904     08 4E 85 F1 | 	sub	fp, #8
10908     1C 22 0E F2 | 	cmp	local03, #28 wz
1090c     A7 22 02 AB |  if_e	rdlong	local03, fp
10910     A7 22 62 AC |  if_e	wrlong	local03, fp
10914     08 4E 05 A1 |  if_e	add	fp, #8
10918     A7 3A 68 AC |  if_e	wrlong	#29, fp
1091c     08 4E 85 A1 |  if_e	sub	fp, #8
10920                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10920     14 4E 05 F1 | 	add	fp, #20
10924     A7 22 02 FB | 	rdlong	local03, fp
10928     14 4E 85 F1 | 	sub	fp, #20
1092c     1C 22 0E F2 | 	cmp	local03, #28 wz
10930     18 00 90 5D |  if_ne	jmp	#LR__1320
10934     0C 4E 05 F1 | 	add	fp, #12
10938     A7 22 02 FB | 	rdlong	local03, fp
1093c     A7 22 62 FC | 	wrlong	local03, fp
10940     08 4E 05 F1 | 	add	fp, #8
10944     A7 3A 68 FC | 	wrlong	#29, fp
10948     14 4E 85 F1 | 	sub	fp, #20
1094c                 | LR__1320
1094c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1094c     08 4E 05 F1 | 	add	fp, #8
10950     A7 22 02 FB | 	rdlong	local03, fp
10954     08 4E 85 F1 | 	sub	fp, #8
10958     1F 22 0E F2 | 	cmp	local03, #31 wz
1095c     14 4E 05 51 |  if_ne	add	fp, #20
10960     A7 20 02 5B |  if_ne	rdlong	local02, fp
10964     14 4E 85 51 |  if_ne	sub	fp, #20
10968     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1096c     08 4E 05 51 |  if_ne	add	fp, #8
10970     A7 22 02 5B |  if_ne	rdlong	local03, fp
10974     08 4E 85 51 |  if_ne	sub	fp, #8
10978     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1097c     14 4E 05 51 |  if_ne	add	fp, #20
10980     14 4E 85 51 |  if_ne	sub	fp, #20
10984     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10988     A7 0C 68 AC |  if_e	wrlong	#6, fp
1098c     08 4E 05 A1 |  if_e	add	fp, #8
10990     A7 FE 69 AC |  if_e	wrlong	#255, fp
10994     08 4E 85 A1 |  if_e	sub	fp, #8
10998     18 00 90 AD |  if_e	jmp	#LR__1321
1099c     A7 22 02 FB | 	rdlong	local03, fp
109a0     0C 4E 05 F1 | 	add	fp, #12
109a4     A7 1E 02 FB | 	rdlong	local01, fp
109a8     0C 4E 85 F1 | 	sub	fp, #12
109ac     0F 23 42 F0 | 	shr	local03, local01
109b0     A7 22 62 FC | 	wrlong	local03, fp
109b4                 | LR__1321
109b4     A7 12 02 F6 | 	mov	arg01, fp
109b8     A4 97 BF FD | 	call	#_push
109bc     A7 F0 03 F6 | 	mov	ptra, fp
109c0     B2 00 A0 FD | 	call	#popregs_
109c4                 | _do_shr_ret
109c4     2D 00 64 FD | 	ret
109c8                 | 
109c8                 | ' 
109c8                 | ' sub do_power 
109c8                 | _do_power
109c8     02 4A 05 F6 | 	mov	COUNT_, #2
109cc     A8 00 A0 FD | 	call	#pushregs_
109d0     18 F0 07 F1 | 	add	ptra, #24
109d4     F0 96 BF FD | 	call	#_pop
109d8     FD 14 02 F6 | 	mov	arg02, result1
109dc     FE 12 02 F6 | 	mov	arg01, result2
109e0     FF 1E 02 F6 | 	mov	local01, result3
109e4     0C 4E 05 F1 | 	add	fp, #12
109e8     A7 14 62 FC | 	wrlong	arg02, fp
109ec     04 4E 05 F1 | 	add	fp, #4
109f0     A7 12 62 FC | 	wrlong	arg01, fp
109f4     04 4E 05 F1 | 	add	fp, #4
109f8     A7 1E 62 FC | 	wrlong	local01, fp
109fc     14 4E 85 F1 | 	sub	fp, #20
10a00     C4 96 BF FD | 	call	#_pop
10a04     A7 FA 61 FC | 	wrlong	result1, fp
10a08     04 4E 05 F1 | 	add	fp, #4
10a0c     A7 FC 61 FC | 	wrlong	result2, fp
10a10     04 4E 05 F1 | 	add	fp, #4
10a14     A7 FE 61 FC | 	wrlong	result3, fp
10a18                 | ' t2=pop()
10a18                 | ' t1=pop()
10a18                 | ' 
10a18                 | ' 
10a18                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
10a18     08 4E 85 F1 | 	sub	fp, #8
10a1c     1F FE 0D F2 | 	cmp	result3, #31 wz
10a20     14 4E 05 51 |  if_ne	add	fp, #20
10a24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10a28     14 4E 85 51 |  if_ne	sub	fp, #20
10a2c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10a30     A7 18 68 AC |  if_e	wrlong	#12, fp
10a34     08 4E 05 A1 |  if_e	add	fp, #8
10a38     A7 FE 69 AC |  if_e	wrlong	#255, fp
10a3c     08 4E 85 A1 |  if_e	sub	fp, #8
10a40     38 01 90 AD |  if_e	jmp	#LR__1335
10a44                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10a44     08 4E 05 F1 | 	add	fp, #8
10a48     A7 14 02 FB | 	rdlong	arg02, fp
10a4c     08 4E 85 F1 | 	sub	fp, #8
10a50     1C 14 0E F2 | 	cmp	arg02, #28 wz
10a54     28 00 90 5D |  if_ne	jmp	#LR__1330
10a58     08 4E 05 F1 | 	add	fp, #8
10a5c     A7 3C 68 FC | 	wrlong	#30, fp
10a60     08 4E 85 F1 | 	sub	fp, #8
10a64     A7 12 02 FB | 	rdlong	arg01, fp
10a68     09 13 52 F6 | 	abs	arg01, arg01 wc
10a6c     1F 20 C6 C9 |  if_b	decod	local02, #31
10a70     00 20 06 36 |  if_ae	mov	local02, #0
10a74     DC DF B0 FD | 	call	#__system___float_fromuns
10a78     10 FB 61 F5 | 	xor	result1, local02
10a7c     A7 FA 61 FC | 	wrlong	result1, fp
10a80                 | LR__1330
10a80                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
10a80     08 4E 05 F1 | 	add	fp, #8
10a84     A7 14 02 FB | 	rdlong	arg02, fp
10a88     08 4E 85 F1 | 	sub	fp, #8
10a8c     1D 14 0E F2 | 	cmp	arg02, #29 wz
10a90     18 00 90 5D |  if_ne	jmp	#LR__1331
10a94     08 4E 05 F1 | 	add	fp, #8
10a98     A7 3C 68 FC | 	wrlong	#30, fp
10a9c     08 4E 85 F1 | 	sub	fp, #8
10aa0     A7 12 02 FB | 	rdlong	arg01, fp
10aa4     AC DF B0 FD | 	call	#__system___float_fromuns
10aa8     A7 FA 61 FC | 	wrlong	result1, fp
10aac                 | LR__1331
10aac                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10aac     14 4E 05 F1 | 	add	fp, #20
10ab0     A7 14 02 FB | 	rdlong	arg02, fp
10ab4     14 4E 85 F1 | 	sub	fp, #20
10ab8     1C 14 0E F2 | 	cmp	arg02, #28 wz
10abc     34 00 90 5D |  if_ne	jmp	#LR__1332
10ac0     14 4E 05 F1 | 	add	fp, #20
10ac4     A7 3C 68 FC | 	wrlong	#30, fp
10ac8     08 4E 85 F1 | 	sub	fp, #8
10acc     A7 12 02 FB | 	rdlong	arg01, fp
10ad0     0C 4E 85 F1 | 	sub	fp, #12
10ad4     09 13 52 F6 | 	abs	arg01, arg01 wc
10ad8     1F 20 C6 C9 |  if_b	decod	local02, #31
10adc     00 20 06 36 |  if_ae	mov	local02, #0
10ae0     70 DF B0 FD | 	call	#__system___float_fromuns
10ae4     10 FB 61 F5 | 	xor	result1, local02
10ae8     0C 4E 05 F1 | 	add	fp, #12
10aec     A7 FA 61 FC | 	wrlong	result1, fp
10af0     0C 4E 85 F1 | 	sub	fp, #12
10af4                 | LR__1332
10af4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
10af4     14 4E 05 F1 | 	add	fp, #20
10af8     A7 14 02 FB | 	rdlong	arg02, fp
10afc     14 4E 85 F1 | 	sub	fp, #20
10b00     1D 14 0E F2 | 	cmp	arg02, #29 wz
10b04     24 00 90 5D |  if_ne	jmp	#LR__1333
10b08     14 4E 05 F1 | 	add	fp, #20
10b0c     A7 3C 68 FC | 	wrlong	#30, fp
10b10     08 4E 85 F1 | 	sub	fp, #8
10b14     A7 12 02 FB | 	rdlong	arg01, fp
10b18     0C 4E 85 F1 | 	sub	fp, #12
10b1c     34 DF B0 FD | 	call	#__system___float_fromuns
10b20     0C 4E 05 F1 | 	add	fp, #12
10b24     A7 FA 61 FC | 	wrlong	result1, fp
10b28     0C 4E 85 F1 | 	sub	fp, #12
10b2c                 | LR__1333
10b2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
10b2c     08 4E 05 F1 | 	add	fp, #8
10b30     A7 14 02 FB | 	rdlong	arg02, fp
10b34     08 4E 85 F1 | 	sub	fp, #8
10b38     1E 14 0E F2 | 	cmp	arg02, #30 wz
10b3c     14 4E 05 A1 |  if_e	add	fp, #20
10b40     A7 1E 02 AB |  if_e	rdlong	local01, fp
10b44     14 4E 85 A1 |  if_e	sub	fp, #20
10b48     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
10b4c     1C 00 90 5D |  if_ne	jmp	#LR__1334
10b50     A7 12 02 FB | 	rdlong	arg01, fp
10b54     0C 4E 05 F1 | 	add	fp, #12
10b58     A7 14 02 FB | 	rdlong	arg02, fp
10b5c     0C 4E 85 F1 | 	sub	fp, #12
10b60     D8 F1 B0 FD | 	call	#__system____builtin_powf
10b64     A7 FA 61 FC | 	wrlong	result1, fp
10b68     10 00 90 FD | 	jmp	#LR__1335
10b6c                 | LR__1334
10b6c     A7 1A 68 FC | 	wrlong	#13, fp
10b70     08 4E 05 F1 | 	add	fp, #8
10b74     A7 FE 69 FC | 	wrlong	#255, fp
10b78     08 4E 85 F1 | 	sub	fp, #8
10b7c                 | LR__1335
10b7c     A7 12 02 F6 | 	mov	arg01, fp
10b80     DC 95 BF FD | 	call	#_push
10b84     A7 F0 03 F6 | 	mov	ptra, fp
10b88     B2 00 A0 FD | 	call	#popregs_
10b8c                 | _do_power_ret
10b8c     2D 00 64 FD | 	ret
10b90                 | 
10b90                 | ' 
10b90                 | ' 
10b90                 | ' sub do_eq
10b90                 | _do_eq
10b90     05 4A 05 F6 | 	mov	COUNT_, #5
10b94     A8 00 A0 FD | 	call	#pushregs_
10b98     18 F0 07 F1 | 	add	ptra, #24
10b9c     28 95 BF FD | 	call	#_pop
10ba0     FD 1E 02 F6 | 	mov	local01, result1
10ba4     FE 20 02 F6 | 	mov	local02, result2
10ba8     FF 22 02 F6 | 	mov	local03, result3
10bac     0C 4E 05 F1 | 	add	fp, #12
10bb0     A7 1E 62 FC | 	wrlong	local01, fp
10bb4     04 4E 05 F1 | 	add	fp, #4
10bb8     A7 20 62 FC | 	wrlong	local02, fp
10bbc     04 4E 05 F1 | 	add	fp, #4
10bc0     A7 22 62 FC | 	wrlong	local03, fp
10bc4     14 4E 85 F1 | 	sub	fp, #20
10bc8     FC 94 BF FD | 	call	#_pop
10bcc     FF 22 02 F6 | 	mov	local03, result3
10bd0     A7 FA 61 FC | 	wrlong	result1, fp
10bd4     04 4E 05 F1 | 	add	fp, #4
10bd8     A7 FC 61 FC | 	wrlong	result2, fp
10bdc     04 4E 05 F1 | 	add	fp, #4
10be0     A7 22 62 FC | 	wrlong	local03, fp
10be4                 | ' t2=pop()
10be4                 | ' t1=pop()
10be4                 | ' 
10be4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
10be4     08 4E 85 F1 | 	sub	fp, #8
10be8     1F 22 0E F2 | 	cmp	local03, #31 wz
10bec     14 4E 05 A1 |  if_e	add	fp, #20
10bf0     A7 24 02 AB |  if_e	rdlong	local04, fp
10bf4     14 4E 85 A1 |  if_e	sub	fp, #20
10bf8     12 23 02 A6 |  if_e	mov	local03, local04
10bfc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10c00     28 00 90 5D |  if_ne	jmp	#LR__1340
10c04     00 1E 06 F6 | 	mov	local01, #0
10c08     A7 12 02 FB | 	rdlong	arg01, fp
10c0c     0C 4E 05 F1 | 	add	fp, #12
10c10     A7 14 02 FB | 	rdlong	arg02, fp
10c14     0C 4E 85 F1 | 	sub	fp, #12
10c18     E8 B6 B0 FD | 	call	#__system___string_cmp
10c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
10c20     00 1E 26 A6 |  if_e	not	local01, #0
10c24     A7 1E 62 FC | 	wrlong	local01, fp
10c28     1C 04 90 FD | 	jmp	#LR__1353
10c2c                 | LR__1340
10c2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
10c2c     08 4E 05 F1 | 	add	fp, #8
10c30     A7 1E 02 FB | 	rdlong	local01, fp
10c34     08 4E 85 F1 | 	sub	fp, #8
10c38     1E 1E 0E F2 | 	cmp	local01, #30 wz
10c3c     14 4E 05 A1 |  if_e	add	fp, #20
10c40     A7 24 02 AB |  if_e	rdlong	local04, fp
10c44     14 4E 85 A1 |  if_e	sub	fp, #20
10c48     12 23 02 A6 |  if_e	mov	local03, local04
10c4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10c50     2C 00 90 5D |  if_ne	jmp	#LR__1341
10c54     00 1E 06 F6 | 	mov	local01, #0
10c58     A7 12 02 FB | 	rdlong	arg01, fp
10c5c     0C 4E 05 F1 | 	add	fp, #12
10c60     A7 14 02 FB | 	rdlong	arg02, fp
10c64     0C 4E 85 F1 | 	sub	fp, #12
10c68     01 16 06 F6 | 	mov	arg03, #1
10c6c     1C E6 B0 FD | 	call	#__system___float_cmp
10c70     00 FA 0D F2 | 	cmp	result1, #0 wz
10c74     00 1E 26 A6 |  if_e	not	local01, #0
10c78     A7 1E 62 FC | 	wrlong	local01, fp
10c7c     C8 03 90 FD | 	jmp	#LR__1353
10c80                 | LR__1341
10c80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
10c80     08 4E 05 F1 | 	add	fp, #8
10c84     A7 1E 02 FB | 	rdlong	local01, fp
10c88     08 4E 85 F1 | 	sub	fp, #8
10c8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10c90     14 4E 05 A1 |  if_e	add	fp, #20
10c94     A7 24 02 AB |  if_e	rdlong	local04, fp
10c98     14 4E 85 A1 |  if_e	sub	fp, #20
10c9c     12 23 02 A6 |  if_e	mov	local03, local04
10ca0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10ca4     48 00 90 5D |  if_ne	jmp	#LR__1342
10ca8     00 1E 06 F6 | 	mov	local01, #0
10cac     A7 20 02 FB | 	rdlong	local02, fp
10cb0     0C 4E 05 F1 | 	add	fp, #12
10cb4     A7 12 02 FB | 	rdlong	arg01, fp
10cb8     0C 4E 85 F1 | 	sub	fp, #12
10cbc     09 13 52 F6 | 	abs	arg01, arg01 wc
10cc0     1F 26 C6 C9 |  if_b	decod	local05, #31
10cc4     00 26 06 36 |  if_ae	mov	local05, #0
10cc8     88 DD B0 FD | 	call	#__system___float_fromuns
10ccc     13 FB 61 F5 | 	xor	result1, local05
10cd0     FD 14 02 F6 | 	mov	arg02, result1
10cd4     10 13 02 F6 | 	mov	arg01, local02
10cd8     01 16 06 F6 | 	mov	arg03, #1
10cdc     AC E5 B0 FD | 	call	#__system___float_cmp
10ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
10ce4     00 1E 26 A6 |  if_e	not	local01, #0
10ce8     A7 1E 62 FC | 	wrlong	local01, fp
10cec     58 03 90 FD | 	jmp	#LR__1353
10cf0                 | LR__1342
10cf0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
10cf0     08 4E 05 F1 | 	add	fp, #8
10cf4     A7 1E 02 FB | 	rdlong	local01, fp
10cf8     08 4E 85 F1 | 	sub	fp, #8
10cfc     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d00     14 4E 05 A1 |  if_e	add	fp, #20
10d04     A7 24 02 AB |  if_e	rdlong	local04, fp
10d08     14 4E 85 A1 |  if_e	sub	fp, #20
10d0c     12 23 02 A6 |  if_e	mov	local03, local04
10d10     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10d14     38 00 90 5D |  if_ne	jmp	#LR__1343
10d18     00 1E 06 F6 | 	mov	local01, #0
10d1c     A7 20 02 FB | 	rdlong	local02, fp
10d20     0C 4E 05 F1 | 	add	fp, #12
10d24     A7 12 02 FB | 	rdlong	arg01, fp
10d28     0C 4E 85 F1 | 	sub	fp, #12
10d2c     24 DD B0 FD | 	call	#__system___float_fromuns
10d30     FD 14 02 F6 | 	mov	arg02, result1
10d34     10 13 02 F6 | 	mov	arg01, local02
10d38     01 16 06 F6 | 	mov	arg03, #1
10d3c     4C E5 B0 FD | 	call	#__system___float_cmp
10d40     00 FA 0D F2 | 	cmp	result1, #0 wz
10d44     00 1E 26 A6 |  if_e	not	local01, #0
10d48     A7 1E 62 FC | 	wrlong	local01, fp
10d4c     F8 02 90 FD | 	jmp	#LR__1353
10d50                 | LR__1343
10d50                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
10d50     08 4E 05 F1 | 	add	fp, #8
10d54     A7 1E 02 FB | 	rdlong	local01, fp
10d58     08 4E 85 F1 | 	sub	fp, #8
10d5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10d60     14 4E 05 A1 |  if_e	add	fp, #20
10d64     A7 24 02 AB |  if_e	rdlong	local04, fp
10d68     14 4E 85 A1 |  if_e	sub	fp, #20
10d6c     12 23 02 A6 |  if_e	mov	local03, local04
10d70     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10d74     44 00 90 5D |  if_ne	jmp	#LR__1344
10d78     00 1E 06 F6 | 	mov	local01, #0
10d7c     A7 12 02 FB | 	rdlong	arg01, fp
10d80     09 13 52 F6 | 	abs	arg01, arg01 wc
10d84     1F 26 C6 C9 |  if_b	decod	local05, #31
10d88     00 26 06 36 |  if_ae	mov	local05, #0
10d8c     C4 DC B0 FD | 	call	#__system___float_fromuns
10d90     13 FB 61 F5 | 	xor	result1, local05
10d94     FD 12 02 F6 | 	mov	arg01, result1
10d98     0C 4E 05 F1 | 	add	fp, #12
10d9c     A7 14 02 FB | 	rdlong	arg02, fp
10da0     0C 4E 85 F1 | 	sub	fp, #12
10da4     01 16 06 F6 | 	mov	arg03, #1
10da8     E0 E4 B0 FD | 	call	#__system___float_cmp
10dac     00 FA 0D F2 | 	cmp	result1, #0 wz
10db0     00 1E 26 A6 |  if_e	not	local01, #0
10db4     A7 1E 62 FC | 	wrlong	local01, fp
10db8     8C 02 90 FD | 	jmp	#LR__1353
10dbc                 | LR__1344
10dbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
10dbc     08 4E 05 F1 | 	add	fp, #8
10dc0     A7 1E 02 FB | 	rdlong	local01, fp
10dc4     08 4E 85 F1 | 	sub	fp, #8
10dc8     1C 1E 0E F2 | 	cmp	local01, #28 wz
10dcc     14 4E 05 A1 |  if_e	add	fp, #20
10dd0     A7 24 02 AB |  if_e	rdlong	local04, fp
10dd4     14 4E 85 A1 |  if_e	sub	fp, #20
10dd8     12 23 02 A6 |  if_e	mov	local03, local04
10ddc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10de0     24 00 90 5D |  if_ne	jmp	#LR__1345
10de4     00 1E 06 F6 | 	mov	local01, #0
10de8     A7 20 02 FB | 	rdlong	local02, fp
10dec     0C 4E 05 F1 | 	add	fp, #12
10df0     A7 22 02 FB | 	rdlong	local03, fp
10df4     0C 4E 85 F1 | 	sub	fp, #12
10df8     11 21 0A F2 | 	cmp	local02, local03 wz
10dfc     01 1E 66 A6 |  if_e	neg	local01, #1
10e00     A7 1E 62 FC | 	wrlong	local01, fp
10e04     40 02 90 FD | 	jmp	#LR__1353
10e08                 | LR__1345
10e08                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
10e08     08 4E 05 F1 | 	add	fp, #8
10e0c     A7 1E 02 FB | 	rdlong	local01, fp
10e10     08 4E 85 F1 | 	sub	fp, #8
10e14     1C 1E 0E F2 | 	cmp	local01, #28 wz
10e18     14 4E 05 A1 |  if_e	add	fp, #20
10e1c     A7 24 02 AB |  if_e	rdlong	local04, fp
10e20     14 4E 85 A1 |  if_e	sub	fp, #20
10e24     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10e28     24 00 90 5D |  if_ne	jmp	#LR__1346
10e2c     00 1E 06 F6 | 	mov	local01, #0
10e30     A7 20 02 FB | 	rdlong	local02, fp
10e34     0C 4E 05 F1 | 	add	fp, #12
10e38     A7 22 02 FB | 	rdlong	local03, fp
10e3c     0C 4E 85 F1 | 	sub	fp, #12
10e40     11 21 0A F2 | 	cmp	local02, local03 wz
10e44     01 1E 66 A6 |  if_e	neg	local01, #1
10e48     A7 1E 62 FC | 	wrlong	local01, fp
10e4c     F8 01 90 FD | 	jmp	#LR__1353
10e50                 | LR__1346
10e50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
10e50     08 4E 05 F1 | 	add	fp, #8
10e54     A7 1E 02 FB | 	rdlong	local01, fp
10e58     08 4E 85 F1 | 	sub	fp, #8
10e5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10e60     14 4E 05 A1 |  if_e	add	fp, #20
10e64     A7 22 02 AB |  if_e	rdlong	local03, fp
10e68     14 4E 85 A1 |  if_e	sub	fp, #20
10e6c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10e70     34 00 90 5D |  if_ne	jmp	#LR__1347
10e74     00 1E 06 F6 | 	mov	local01, #0
10e78     A7 12 02 FB | 	rdlong	arg01, fp
10e7c     D4 DB B0 FD | 	call	#__system___float_fromuns
10e80     FD 12 02 F6 | 	mov	arg01, result1
10e84     0C 4E 05 F1 | 	add	fp, #12
10e88     A7 14 02 FB | 	rdlong	arg02, fp
10e8c     0C 4E 85 F1 | 	sub	fp, #12
10e90     01 16 06 F6 | 	mov	arg03, #1
10e94     F4 E3 B0 FD | 	call	#__system___float_cmp
10e98     00 FA 0D F2 | 	cmp	result1, #0 wz
10e9c     00 1E 26 A6 |  if_e	not	local01, #0
10ea0     A7 1E 62 FC | 	wrlong	local01, fp
10ea4     A0 01 90 FD | 	jmp	#LR__1353
10ea8                 | LR__1347
10ea8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
10ea8     08 4E 05 F1 | 	add	fp, #8
10eac     A7 1E 02 FB | 	rdlong	local01, fp
10eb0     08 4E 85 F1 | 	sub	fp, #8
10eb4     1D 1E 0E F2 | 	cmp	local01, #29 wz
10eb8     14 4E 05 A1 |  if_e	add	fp, #20
10ebc     A7 22 02 AB |  if_e	rdlong	local03, fp
10ec0     14 4E 85 A1 |  if_e	sub	fp, #20
10ec4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10ec8     24 00 90 5D |  if_ne	jmp	#LR__1348
10ecc     00 1E 06 F6 | 	mov	local01, #0
10ed0     A7 20 02 FB | 	rdlong	local02, fp
10ed4     0C 4E 05 F1 | 	add	fp, #12
10ed8     A7 22 02 FB | 	rdlong	local03, fp
10edc     0C 4E 85 F1 | 	sub	fp, #12
10ee0     11 21 0A F2 | 	cmp	local02, local03 wz
10ee4     01 1E 66 A6 |  if_e	neg	local01, #1
10ee8     A7 1E 62 FC | 	wrlong	local01, fp
10eec     58 01 90 FD | 	jmp	#LR__1353
10ef0                 | LR__1348
10ef0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
10ef0     08 4E 05 F1 | 	add	fp, #8
10ef4     A7 1E 02 FB | 	rdlong	local01, fp
10ef8     08 4E 85 F1 | 	sub	fp, #8
10efc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10f00     14 4E 05 A1 |  if_e	add	fp, #20
10f04     A7 22 02 AB |  if_e	rdlong	local03, fp
10f08     14 4E 85 A1 |  if_e	sub	fp, #20
10f0c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10f10     24 00 90 5D |  if_ne	jmp	#LR__1349
10f14     00 1E 06 F6 | 	mov	local01, #0
10f18     A7 20 02 FB | 	rdlong	local02, fp
10f1c     0C 4E 05 F1 | 	add	fp, #12
10f20     A7 22 02 FB | 	rdlong	local03, fp
10f24     0C 4E 85 F1 | 	sub	fp, #12
10f28     11 21 0A F2 | 	cmp	local02, local03 wz
10f2c     01 1E 66 A6 |  if_e	neg	local01, #1
10f30     A7 1E 62 FC | 	wrlong	local01, fp
10f34     10 01 90 FD | 	jmp	#LR__1353
10f38                 | LR__1349
10f38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
10f38     08 4E 05 F1 | 	add	fp, #8
10f3c     A7 1E 02 FB | 	rdlong	local01, fp
10f40     08 4E 85 F1 | 	sub	fp, #8
10f44     2B 1E 0E F2 | 	cmp	local01, #43 wz
10f48     14 4E 05 A1 |  if_e	add	fp, #20
10f4c     A7 22 02 AB |  if_e	rdlong	local03, fp
10f50     14 4E 85 A1 |  if_e	sub	fp, #20
10f54     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10f58     30 00 90 5D |  if_ne	jmp	#LR__1350
10f5c     00 1E 06 F6 | 	mov	local01, #0
10f60     A7 12 02 FB | 	rdlong	arg01, fp
10f64     04 D1 BF FD | 	call	#_convertstring
10f68     FD 12 02 F6 | 	mov	arg01, result1
10f6c     0C 4E 05 F1 | 	add	fp, #12
10f70     A7 14 02 FB | 	rdlong	arg02, fp
10f74     0C 4E 85 F1 | 	sub	fp, #12
10f78     88 B3 B0 FD | 	call	#__system___string_cmp
10f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
10f80     00 1E 26 A6 |  if_e	not	local01, #0
10f84     A7 1E 62 FC | 	wrlong	local01, fp
10f88     BC 00 90 FD | 	jmp	#LR__1353
10f8c                 | LR__1350
10f8c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
10f8c     08 4E 05 F1 | 	add	fp, #8
10f90     A7 1E 02 FB | 	rdlong	local01, fp
10f94     08 4E 85 F1 | 	sub	fp, #8
10f98     1F 1E 0E F2 | 	cmp	local01, #31 wz
10f9c     14 4E 05 A1 |  if_e	add	fp, #20
10fa0     A7 22 02 AB |  if_e	rdlong	local03, fp
10fa4     14 4E 85 A1 |  if_e	sub	fp, #20
10fa8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10fac     34 00 90 5D |  if_ne	jmp	#LR__1351
10fb0     00 1E 06 F6 | 	mov	local01, #0
10fb4     A7 20 02 FB | 	rdlong	local02, fp
10fb8     0C 4E 05 F1 | 	add	fp, #12
10fbc     A7 12 02 FB | 	rdlong	arg01, fp
10fc0     0C 4E 85 F1 | 	sub	fp, #12
10fc4     A4 D0 BF FD | 	call	#_convertstring
10fc8     FD 14 02 F6 | 	mov	arg02, result1
10fcc     10 13 02 F6 | 	mov	arg01, local02
10fd0     30 B3 B0 FD | 	call	#__system___string_cmp
10fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
10fd8     00 1E 26 A6 |  if_e	not	local01, #0
10fdc     A7 1E 62 FC | 	wrlong	local01, fp
10fe0     64 00 90 FD | 	jmp	#LR__1353
10fe4                 | LR__1351
10fe4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
10fe4     08 4E 05 F1 | 	add	fp, #8
10fe8     A7 1E 02 FB | 	rdlong	local01, fp
10fec     08 4E 85 F1 | 	sub	fp, #8
10ff0     2B 1E 0E F2 | 	cmp	local01, #43 wz
10ff4     14 4E 05 A1 |  if_e	add	fp, #20
10ff8     A7 22 02 AB |  if_e	rdlong	local03, fp
10ffc     14 4E 85 A1 |  if_e	sub	fp, #20
11000     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11004     3C 00 90 5D |  if_ne	jmp	#LR__1352
11008     00 1E 06 F6 | 	mov	local01, #0
1100c     A7 12 02 FB | 	rdlong	arg01, fp
11010     58 D0 BF FD | 	call	#_convertstring
11014     FD 20 02 F6 | 	mov	local02, result1
11018     0C 4E 05 F1 | 	add	fp, #12
1101c     A7 12 02 FB | 	rdlong	arg01, fp
11020     0C 4E 85 F1 | 	sub	fp, #12
11024     44 D0 BF FD | 	call	#_convertstring
11028     FD 14 02 F6 | 	mov	arg02, result1
1102c     10 13 02 F6 | 	mov	arg01, local02
11030     D0 B2 B0 FD | 	call	#__system___string_cmp
11034     00 FA 0D F2 | 	cmp	result1, #0 wz
11038     00 1E 26 A6 |  if_e	not	local01, #0
1103c     A7 1E 62 FC | 	wrlong	local01, fp
11040     04 00 90 FD | 	jmp	#LR__1353
11044                 | LR__1352
11044     A7 00 68 FC | 	wrlong	#0, fp
11048                 | LR__1353
11048     08 4E 05 F1 | 	add	fp, #8
1104c     A7 38 68 FC | 	wrlong	#28, fp
11050     08 4E 85 F1 | 	sub	fp, #8
11054     A7 12 02 F6 | 	mov	arg01, fp
11058     04 91 BF FD | 	call	#_push
1105c     A7 F0 03 F6 | 	mov	ptra, fp
11060     B2 00 A0 FD | 	call	#popregs_
11064                 | _do_eq_ret
11064     2D 00 64 FD | 	ret
11068                 | 
11068                 | ' 
11068                 | ' sub do_gt
11068                 | _do_gt
11068     05 4A 05 F6 | 	mov	COUNT_, #5
1106c     A8 00 A0 FD | 	call	#pushregs_
11070     18 F0 07 F1 | 	add	ptra, #24
11074     50 90 BF FD | 	call	#_pop
11078     FD 1E 02 F6 | 	mov	local01, result1
1107c     FE 20 02 F6 | 	mov	local02, result2
11080     FF 22 02 F6 | 	mov	local03, result3
11084     0C 4E 05 F1 | 	add	fp, #12
11088     A7 1E 62 FC | 	wrlong	local01, fp
1108c     04 4E 05 F1 | 	add	fp, #4
11090     A7 20 62 FC | 	wrlong	local02, fp
11094     04 4E 05 F1 | 	add	fp, #4
11098     A7 22 62 FC | 	wrlong	local03, fp
1109c     14 4E 85 F1 | 	sub	fp, #20
110a0     24 90 BF FD | 	call	#_pop
110a4     FF 22 02 F6 | 	mov	local03, result3
110a8     A7 FA 61 FC | 	wrlong	result1, fp
110ac     04 4E 05 F1 | 	add	fp, #4
110b0     A7 FC 61 FC | 	wrlong	result2, fp
110b4     04 4E 05 F1 | 	add	fp, #4
110b8     A7 22 62 FC | 	wrlong	local03, fp
110bc                 | ' t2=pop()
110bc                 | ' t1=pop()
110bc                 | ' 
110bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
110bc     08 4E 85 F1 | 	sub	fp, #8
110c0     1F 22 0E F2 | 	cmp	local03, #31 wz
110c4     14 4E 05 A1 |  if_e	add	fp, #20
110c8     A7 24 02 AB |  if_e	rdlong	local04, fp
110cc     14 4E 85 A1 |  if_e	sub	fp, #20
110d0     12 23 02 A6 |  if_e	mov	local03, local04
110d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
110d8     28 00 90 5D |  if_ne	jmp	#LR__1360
110dc     00 1E 06 F6 | 	mov	local01, #0
110e0     A7 12 02 FB | 	rdlong	arg01, fp
110e4     0C 4E 05 F1 | 	add	fp, #12
110e8     A7 14 02 FB | 	rdlong	arg02, fp
110ec     0C 4E 85 F1 | 	sub	fp, #12
110f0     10 B2 B0 FD | 	call	#__system___string_cmp
110f4     01 FA 55 F2 | 	cmps	result1, #1 wc
110f8     00 1E 26 36 |  if_ae	not	local01, #0
110fc     A7 1E 62 FC | 	wrlong	local01, fp
11100     1C 04 90 FD | 	jmp	#LR__1373
11104                 | LR__1360
11104                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
11104     08 4E 05 F1 | 	add	fp, #8
11108     A7 1E 02 FB | 	rdlong	local01, fp
1110c     08 4E 85 F1 | 	sub	fp, #8
11110     1E 1E 0E F2 | 	cmp	local01, #30 wz
11114     14 4E 05 A1 |  if_e	add	fp, #20
11118     A7 24 02 AB |  if_e	rdlong	local04, fp
1111c     14 4E 85 A1 |  if_e	sub	fp, #20
11120     12 23 02 A6 |  if_e	mov	local03, local04
11124     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11128     2C 00 90 5D |  if_ne	jmp	#LR__1361
1112c     00 1E 06 F6 | 	mov	local01, #0
11130     A7 12 02 FB | 	rdlong	arg01, fp
11134     0C 4E 05 F1 | 	add	fp, #12
11138     A7 14 02 FB | 	rdlong	arg02, fp
1113c     0C 4E 85 F1 | 	sub	fp, #12
11140     01 16 66 F6 | 	neg	arg03, #1
11144     44 E1 B0 FD | 	call	#__system___float_cmp
11148     01 FA 55 F2 | 	cmps	result1, #1 wc
1114c     00 1E 26 36 |  if_ae	not	local01, #0
11150     A7 1E 62 FC | 	wrlong	local01, fp
11154     C8 03 90 FD | 	jmp	#LR__1373
11158                 | LR__1361
11158                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11158     08 4E 05 F1 | 	add	fp, #8
1115c     A7 1E 02 FB | 	rdlong	local01, fp
11160     08 4E 85 F1 | 	sub	fp, #8
11164     1E 1E 0E F2 | 	cmp	local01, #30 wz
11168     14 4E 05 A1 |  if_e	add	fp, #20
1116c     A7 24 02 AB |  if_e	rdlong	local04, fp
11170     14 4E 85 A1 |  if_e	sub	fp, #20
11174     12 23 02 A6 |  if_e	mov	local03, local04
11178     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1117c     48 00 90 5D |  if_ne	jmp	#LR__1362
11180     00 1E 06 F6 | 	mov	local01, #0
11184     A7 20 02 FB | 	rdlong	local02, fp
11188     0C 4E 05 F1 | 	add	fp, #12
1118c     A7 12 02 FB | 	rdlong	arg01, fp
11190     0C 4E 85 F1 | 	sub	fp, #12
11194     09 13 52 F6 | 	abs	arg01, arg01 wc
11198     1F 26 C6 C9 |  if_b	decod	local05, #31
1119c     00 26 06 36 |  if_ae	mov	local05, #0
111a0     B0 D8 B0 FD | 	call	#__system___float_fromuns
111a4     13 FB 61 F5 | 	xor	result1, local05
111a8     FD 14 02 F6 | 	mov	arg02, result1
111ac     10 13 02 F6 | 	mov	arg01, local02
111b0     01 16 66 F6 | 	neg	arg03, #1
111b4     D4 E0 B0 FD | 	call	#__system___float_cmp
111b8     01 FA 55 F2 | 	cmps	result1, #1 wc
111bc     00 1E 26 36 |  if_ae	not	local01, #0
111c0     A7 1E 62 FC | 	wrlong	local01, fp
111c4     58 03 90 FD | 	jmp	#LR__1373
111c8                 | LR__1362
111c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
111c8     08 4E 05 F1 | 	add	fp, #8
111cc     A7 1E 02 FB | 	rdlong	local01, fp
111d0     08 4E 85 F1 | 	sub	fp, #8
111d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
111d8     14 4E 05 A1 |  if_e	add	fp, #20
111dc     A7 24 02 AB |  if_e	rdlong	local04, fp
111e0     14 4E 85 A1 |  if_e	sub	fp, #20
111e4     12 23 02 A6 |  if_e	mov	local03, local04
111e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
111ec     38 00 90 5D |  if_ne	jmp	#LR__1363
111f0     00 1E 06 F6 | 	mov	local01, #0
111f4     A7 20 02 FB | 	rdlong	local02, fp
111f8     0C 4E 05 F1 | 	add	fp, #12
111fc     A7 12 02 FB | 	rdlong	arg01, fp
11200     0C 4E 85 F1 | 	sub	fp, #12
11204     4C D8 B0 FD | 	call	#__system___float_fromuns
11208     FD 14 02 F6 | 	mov	arg02, result1
1120c     10 13 02 F6 | 	mov	arg01, local02
11210     01 16 66 F6 | 	neg	arg03, #1
11214     74 E0 B0 FD | 	call	#__system___float_cmp
11218     01 FA 55 F2 | 	cmps	result1, #1 wc
1121c     00 1E 26 36 |  if_ae	not	local01, #0
11220     A7 1E 62 FC | 	wrlong	local01, fp
11224     F8 02 90 FD | 	jmp	#LR__1373
11228                 | LR__1363
11228                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11228     08 4E 05 F1 | 	add	fp, #8
1122c     A7 1E 02 FB | 	rdlong	local01, fp
11230     08 4E 85 F1 | 	sub	fp, #8
11234     1C 1E 0E F2 | 	cmp	local01, #28 wz
11238     14 4E 05 A1 |  if_e	add	fp, #20
1123c     A7 24 02 AB |  if_e	rdlong	local04, fp
11240     14 4E 85 A1 |  if_e	sub	fp, #20
11244     12 23 02 A6 |  if_e	mov	local03, local04
11248     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1124c     44 00 90 5D |  if_ne	jmp	#LR__1364
11250     00 1E 06 F6 | 	mov	local01, #0
11254     A7 12 02 FB | 	rdlong	arg01, fp
11258     09 13 52 F6 | 	abs	arg01, arg01 wc
1125c     1F 26 C6 C9 |  if_b	decod	local05, #31
11260     00 26 06 36 |  if_ae	mov	local05, #0
11264     EC D7 B0 FD | 	call	#__system___float_fromuns
11268     13 FB 61 F5 | 	xor	result1, local05
1126c     FD 12 02 F6 | 	mov	arg01, result1
11270     0C 4E 05 F1 | 	add	fp, #12
11274     A7 14 02 FB | 	rdlong	arg02, fp
11278     0C 4E 85 F1 | 	sub	fp, #12
1127c     01 16 66 F6 | 	neg	arg03, #1
11280     08 E0 B0 FD | 	call	#__system___float_cmp
11284     01 FA 55 F2 | 	cmps	result1, #1 wc
11288     00 1E 26 36 |  if_ae	not	local01, #0
1128c     A7 1E 62 FC | 	wrlong	local01, fp
11290     8C 02 90 FD | 	jmp	#LR__1373
11294                 | LR__1364
11294                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11294     08 4E 05 F1 | 	add	fp, #8
11298     A7 1E 02 FB | 	rdlong	local01, fp
1129c     08 4E 85 F1 | 	sub	fp, #8
112a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
112a4     14 4E 05 A1 |  if_e	add	fp, #20
112a8     A7 24 02 AB |  if_e	rdlong	local04, fp
112ac     14 4E 85 A1 |  if_e	sub	fp, #20
112b0     12 23 02 A6 |  if_e	mov	local03, local04
112b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
112b8     24 00 90 5D |  if_ne	jmp	#LR__1365
112bc     00 1E 06 F6 | 	mov	local01, #0
112c0     A7 20 02 FB | 	rdlong	local02, fp
112c4     0C 4E 05 F1 | 	add	fp, #12
112c8     A7 22 02 FB | 	rdlong	local03, fp
112cc     0C 4E 85 F1 | 	sub	fp, #12
112d0     11 21 5A F2 | 	cmps	local02, local03 wcz
112d4     01 1E 66 16 |  if_a	neg	local01, #1
112d8     A7 1E 62 FC | 	wrlong	local01, fp
112dc     40 02 90 FD | 	jmp	#LR__1373
112e0                 | LR__1365
112e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
112e0     08 4E 05 F1 | 	add	fp, #8
112e4     A7 1E 02 FB | 	rdlong	local01, fp
112e8     08 4E 85 F1 | 	sub	fp, #8
112ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
112f0     14 4E 05 A1 |  if_e	add	fp, #20
112f4     A7 24 02 AB |  if_e	rdlong	local04, fp
112f8     14 4E 85 A1 |  if_e	sub	fp, #20
112fc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11300     24 00 90 5D |  if_ne	jmp	#LR__1366
11304     00 1E 06 F6 | 	mov	local01, #0
11308     A7 20 02 FB | 	rdlong	local02, fp
1130c     0C 4E 05 F1 | 	add	fp, #12
11310     A7 22 02 FB | 	rdlong	local03, fp
11314     0C 4E 85 F1 | 	sub	fp, #12
11318     11 21 5A F2 | 	cmps	local02, local03 wcz
1131c     01 1E 66 16 |  if_a	neg	local01, #1
11320     A7 1E 62 FC | 	wrlong	local01, fp
11324     F8 01 90 FD | 	jmp	#LR__1373
11328                 | LR__1366
11328                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11328     08 4E 05 F1 | 	add	fp, #8
1132c     A7 1E 02 FB | 	rdlong	local01, fp
11330     08 4E 85 F1 | 	sub	fp, #8
11334     1D 1E 0E F2 | 	cmp	local01, #29 wz
11338     14 4E 05 A1 |  if_e	add	fp, #20
1133c     A7 22 02 AB |  if_e	rdlong	local03, fp
11340     14 4E 85 A1 |  if_e	sub	fp, #20
11344     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11348     34 00 90 5D |  if_ne	jmp	#LR__1367
1134c     00 1E 06 F6 | 	mov	local01, #0
11350     A7 12 02 FB | 	rdlong	arg01, fp
11354     FC D6 B0 FD | 	call	#__system___float_fromuns
11358     FD 12 02 F6 | 	mov	arg01, result1
1135c     0C 4E 05 F1 | 	add	fp, #12
11360     A7 14 02 FB | 	rdlong	arg02, fp
11364     0C 4E 85 F1 | 	sub	fp, #12
11368     01 16 66 F6 | 	neg	arg03, #1
1136c     1C DF B0 FD | 	call	#__system___float_cmp
11370     01 FA 55 F2 | 	cmps	result1, #1 wc
11374     00 1E 26 36 |  if_ae	not	local01, #0
11378     A7 1E 62 FC | 	wrlong	local01, fp
1137c     A0 01 90 FD | 	jmp	#LR__1373
11380                 | LR__1367
11380                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11380     08 4E 05 F1 | 	add	fp, #8
11384     A7 1E 02 FB | 	rdlong	local01, fp
11388     08 4E 85 F1 | 	sub	fp, #8
1138c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11390     14 4E 05 A1 |  if_e	add	fp, #20
11394     A7 22 02 AB |  if_e	rdlong	local03, fp
11398     14 4E 85 A1 |  if_e	sub	fp, #20
1139c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
113a0     24 00 90 5D |  if_ne	jmp	#LR__1368
113a4     00 1E 06 F6 | 	mov	local01, #0
113a8     A7 20 02 FB | 	rdlong	local02, fp
113ac     0C 4E 05 F1 | 	add	fp, #12
113b0     A7 22 02 FB | 	rdlong	local03, fp
113b4     0C 4E 85 F1 | 	sub	fp, #12
113b8     11 21 5A F2 | 	cmps	local02, local03 wcz
113bc     01 1E 66 16 |  if_a	neg	local01, #1
113c0     A7 1E 62 FC | 	wrlong	local01, fp
113c4     58 01 90 FD | 	jmp	#LR__1373
113c8                 | LR__1368
113c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
113c8     08 4E 05 F1 | 	add	fp, #8
113cc     A7 1E 02 FB | 	rdlong	local01, fp
113d0     08 4E 85 F1 | 	sub	fp, #8
113d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
113d8     14 4E 05 A1 |  if_e	add	fp, #20
113dc     A7 22 02 AB |  if_e	rdlong	local03, fp
113e0     14 4E 85 A1 |  if_e	sub	fp, #20
113e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
113e8     24 00 90 5D |  if_ne	jmp	#LR__1369
113ec     00 1E 06 F6 | 	mov	local01, #0
113f0     A7 20 02 FB | 	rdlong	local02, fp
113f4     0C 4E 05 F1 | 	add	fp, #12
113f8     A7 22 02 FB | 	rdlong	local03, fp
113fc     0C 4E 85 F1 | 	sub	fp, #12
11400     11 21 1A F2 | 	cmp	local02, local03 wcz
11404     01 1E 66 16 |  if_a	neg	local01, #1
11408     A7 1E 62 FC | 	wrlong	local01, fp
1140c     10 01 90 FD | 	jmp	#LR__1373
11410                 | LR__1369
11410                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
11410     08 4E 05 F1 | 	add	fp, #8
11414     A7 1E 02 FB | 	rdlong	local01, fp
11418     08 4E 85 F1 | 	sub	fp, #8
1141c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11420     14 4E 05 A1 |  if_e	add	fp, #20
11424     A7 22 02 AB |  if_e	rdlong	local03, fp
11428     14 4E 85 A1 |  if_e	sub	fp, #20
1142c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11430     30 00 90 5D |  if_ne	jmp	#LR__1370
11434     00 1E 06 F6 | 	mov	local01, #0
11438     A7 12 02 FB | 	rdlong	arg01, fp
1143c     2C CC BF FD | 	call	#_convertstring
11440     FD 12 02 F6 | 	mov	arg01, result1
11444     0C 4E 05 F1 | 	add	fp, #12
11448     A7 14 02 FB | 	rdlong	arg02, fp
1144c     0C 4E 85 F1 | 	sub	fp, #12
11450     B0 AE B0 FD | 	call	#__system___string_cmp
11454     01 FA 55 F2 | 	cmps	result1, #1 wc
11458     00 1E 26 36 |  if_ae	not	local01, #0
1145c     A7 1E 62 FC | 	wrlong	local01, fp
11460     BC 00 90 FD | 	jmp	#LR__1373
11464                 | LR__1370
11464                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
11464     08 4E 05 F1 | 	add	fp, #8
11468     A7 1E 02 FB | 	rdlong	local01, fp
1146c     08 4E 85 F1 | 	sub	fp, #8
11470     1F 1E 0E F2 | 	cmp	local01, #31 wz
11474     14 4E 05 A1 |  if_e	add	fp, #20
11478     A7 22 02 AB |  if_e	rdlong	local03, fp
1147c     14 4E 85 A1 |  if_e	sub	fp, #20
11480     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11484     34 00 90 5D |  if_ne	jmp	#LR__1371
11488     00 1E 06 F6 | 	mov	local01, #0
1148c     A7 20 02 FB | 	rdlong	local02, fp
11490     0C 4E 05 F1 | 	add	fp, #12
11494     A7 12 02 FB | 	rdlong	arg01, fp
11498     0C 4E 85 F1 | 	sub	fp, #12
1149c     CC CB BF FD | 	call	#_convertstring
114a0     FD 14 02 F6 | 	mov	arg02, result1
114a4     10 13 02 F6 | 	mov	arg01, local02
114a8     58 AE B0 FD | 	call	#__system___string_cmp
114ac     01 FA 55 F2 | 	cmps	result1, #1 wc
114b0     00 1E 26 36 |  if_ae	not	local01, #0
114b4     A7 1E 62 FC | 	wrlong	local01, fp
114b8     64 00 90 FD | 	jmp	#LR__1373
114bc                 | LR__1371
114bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
114bc     08 4E 05 F1 | 	add	fp, #8
114c0     A7 1E 02 FB | 	rdlong	local01, fp
114c4     08 4E 85 F1 | 	sub	fp, #8
114c8     2B 1E 0E F2 | 	cmp	local01, #43 wz
114cc     14 4E 05 A1 |  if_e	add	fp, #20
114d0     A7 22 02 AB |  if_e	rdlong	local03, fp
114d4     14 4E 85 A1 |  if_e	sub	fp, #20
114d8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
114dc     3C 00 90 5D |  if_ne	jmp	#LR__1372
114e0     00 1E 06 F6 | 	mov	local01, #0
114e4     A7 12 02 FB | 	rdlong	arg01, fp
114e8     80 CB BF FD | 	call	#_convertstring
114ec     FD 20 02 F6 | 	mov	local02, result1
114f0     0C 4E 05 F1 | 	add	fp, #12
114f4     A7 12 02 FB | 	rdlong	arg01, fp
114f8     0C 4E 85 F1 | 	sub	fp, #12
114fc     6C CB BF FD | 	call	#_convertstring
11500     FD 14 02 F6 | 	mov	arg02, result1
11504     10 13 02 F6 | 	mov	arg01, local02
11508     F8 AD B0 FD | 	call	#__system___string_cmp
1150c     01 FA 55 F2 | 	cmps	result1, #1 wc
11510     00 1E 26 36 |  if_ae	not	local01, #0
11514     A7 1E 62 FC | 	wrlong	local01, fp
11518     04 00 90 FD | 	jmp	#LR__1373
1151c                 | LR__1372
1151c     A7 00 68 FC | 	wrlong	#0, fp
11520                 | LR__1373
11520     08 4E 05 F1 | 	add	fp, #8
11524     A7 38 68 FC | 	wrlong	#28, fp
11528     08 4E 85 F1 | 	sub	fp, #8
1152c     A7 12 02 F6 | 	mov	arg01, fp
11530     2C 8C BF FD | 	call	#_push
11534     A7 F0 03 F6 | 	mov	ptra, fp
11538     B2 00 A0 FD | 	call	#popregs_
1153c                 | _do_gt_ret
1153c     2D 00 64 FD | 	ret
11540                 | 
11540                 | ' 
11540                 | ' sub do_lt
11540                 | _do_lt
11540     05 4A 05 F6 | 	mov	COUNT_, #5
11544     A8 00 A0 FD | 	call	#pushregs_
11548     18 F0 07 F1 | 	add	ptra, #24
1154c     78 8B BF FD | 	call	#_pop
11550     FD 1E 02 F6 | 	mov	local01, result1
11554     FE 20 02 F6 | 	mov	local02, result2
11558     FF 22 02 F6 | 	mov	local03, result3
1155c     0C 4E 05 F1 | 	add	fp, #12
11560     A7 1E 62 FC | 	wrlong	local01, fp
11564     04 4E 05 F1 | 	add	fp, #4
11568     A7 20 62 FC | 	wrlong	local02, fp
1156c     04 4E 05 F1 | 	add	fp, #4
11570     A7 22 62 FC | 	wrlong	local03, fp
11574     14 4E 85 F1 | 	sub	fp, #20
11578     4C 8B BF FD | 	call	#_pop
1157c     FF 22 02 F6 | 	mov	local03, result3
11580     A7 FA 61 FC | 	wrlong	result1, fp
11584     04 4E 05 F1 | 	add	fp, #4
11588     A7 FC 61 FC | 	wrlong	result2, fp
1158c     04 4E 05 F1 | 	add	fp, #4
11590     A7 22 62 FC | 	wrlong	local03, fp
11594                 | ' t2=pop()
11594                 | ' t1=pop()
11594                 | ' 
11594                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
11594     08 4E 85 F1 | 	sub	fp, #8
11598     1F 22 0E F2 | 	cmp	local03, #31 wz
1159c     14 4E 05 A1 |  if_e	add	fp, #20
115a0     A7 24 02 AB |  if_e	rdlong	local04, fp
115a4     14 4E 85 A1 |  if_e	sub	fp, #20
115a8     12 23 02 A6 |  if_e	mov	local03, local04
115ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
115b0     28 00 90 5D |  if_ne	jmp	#LR__1380
115b4     00 1E 06 F6 | 	mov	local01, #0
115b8     A7 12 02 FB | 	rdlong	arg01, fp
115bc     0C 4E 05 F1 | 	add	fp, #12
115c0     A7 14 02 FB | 	rdlong	arg02, fp
115c4     0C 4E 85 F1 | 	sub	fp, #12
115c8     38 AD B0 FD | 	call	#__system___string_cmp
115cc     00 FA 55 F2 | 	cmps	result1, #0 wc
115d0     00 1E 26 C6 |  if_b	not	local01, #0
115d4     A7 1E 62 FC | 	wrlong	local01, fp
115d8     0C 04 90 FD | 	jmp	#LR__1393
115dc                 | LR__1380
115dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
115dc     08 4E 05 F1 | 	add	fp, #8
115e0     A7 1E 02 FB | 	rdlong	local01, fp
115e4     08 4E 85 F1 | 	sub	fp, #8
115e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
115ec     14 4E 05 A1 |  if_e	add	fp, #20
115f0     A7 24 02 AB |  if_e	rdlong	local04, fp
115f4     14 4E 85 A1 |  if_e	sub	fp, #20
115f8     12 23 02 A6 |  if_e	mov	local03, local04
115fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11600     2C 00 90 5D |  if_ne	jmp	#LR__1381
11604     00 1E 06 F6 | 	mov	local01, #0
11608     A7 12 02 FB | 	rdlong	arg01, fp
1160c     0C 4E 05 F1 | 	add	fp, #12
11610     A7 14 02 FB | 	rdlong	arg02, fp
11614     0C 4E 85 F1 | 	sub	fp, #12
11618     01 16 06 F6 | 	mov	arg03, #1
1161c     6C DC B0 FD | 	call	#__system___float_cmp
11620     00 FA 55 F2 | 	cmps	result1, #0 wc
11624     00 1E 26 C6 |  if_b	not	local01, #0
11628     A7 1E 62 FC | 	wrlong	local01, fp
1162c     B8 03 90 FD | 	jmp	#LR__1393
11630                 | LR__1381
11630                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
11630     08 4E 05 F1 | 	add	fp, #8
11634     A7 1E 02 FB | 	rdlong	local01, fp
11638     08 4E 85 F1 | 	sub	fp, #8
1163c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11640     14 4E 05 A1 |  if_e	add	fp, #20
11644     A7 24 02 AB |  if_e	rdlong	local04, fp
11648     14 4E 85 A1 |  if_e	sub	fp, #20
1164c     12 23 02 A6 |  if_e	mov	local03, local04
11650     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11654     48 00 90 5D |  if_ne	jmp	#LR__1382
11658     00 1E 06 F6 | 	mov	local01, #0
1165c     A7 20 02 FB | 	rdlong	local02, fp
11660     0C 4E 05 F1 | 	add	fp, #12
11664     A7 12 02 FB | 	rdlong	arg01, fp
11668     0C 4E 85 F1 | 	sub	fp, #12
1166c     09 13 52 F6 | 	abs	arg01, arg01 wc
11670     1F 26 C6 C9 |  if_b	decod	local05, #31
11674     00 26 06 36 |  if_ae	mov	local05, #0
11678     D8 D3 B0 FD | 	call	#__system___float_fromuns
1167c     13 FB 61 F5 | 	xor	result1, local05
11680     FD 14 02 F6 | 	mov	arg02, result1
11684     10 13 02 F6 | 	mov	arg01, local02
11688     01 16 06 F6 | 	mov	arg03, #1
1168c     FC DB B0 FD | 	call	#__system___float_cmp
11690     00 FA 55 F2 | 	cmps	result1, #0 wc
11694     00 1E 26 C6 |  if_b	not	local01, #0
11698     A7 1E 62 FC | 	wrlong	local01, fp
1169c     48 03 90 FD | 	jmp	#LR__1393
116a0                 | LR__1382
116a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
116a0     08 4E 05 F1 | 	add	fp, #8
116a4     A7 1E 02 FB | 	rdlong	local01, fp
116a8     08 4E 85 F1 | 	sub	fp, #8
116ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
116b0     14 4E 05 A1 |  if_e	add	fp, #20
116b4     A7 24 02 AB |  if_e	rdlong	local04, fp
116b8     14 4E 85 A1 |  if_e	sub	fp, #20
116bc     12 23 02 A6 |  if_e	mov	local03, local04
116c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
116c4     38 00 90 5D |  if_ne	jmp	#LR__1383
116c8     00 1E 06 F6 | 	mov	local01, #0
116cc     A7 20 02 FB | 	rdlong	local02, fp
116d0     0C 4E 05 F1 | 	add	fp, #12
116d4     A7 12 02 FB | 	rdlong	arg01, fp
116d8     0C 4E 85 F1 | 	sub	fp, #12
116dc     74 D3 B0 FD | 	call	#__system___float_fromuns
116e0     FD 14 02 F6 | 	mov	arg02, result1
116e4     10 13 02 F6 | 	mov	arg01, local02
116e8     01 16 06 F6 | 	mov	arg03, #1
116ec     9C DB B0 FD | 	call	#__system___float_cmp
116f0     00 FA 55 F2 | 	cmps	result1, #0 wc
116f4     00 1E 26 C6 |  if_b	not	local01, #0
116f8     A7 1E 62 FC | 	wrlong	local01, fp
116fc     E8 02 90 FD | 	jmp	#LR__1393
11700                 | LR__1383
11700                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
11700     08 4E 05 F1 | 	add	fp, #8
11704     A7 1E 02 FB | 	rdlong	local01, fp
11708     08 4E 85 F1 | 	sub	fp, #8
1170c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11710     14 4E 05 A1 |  if_e	add	fp, #20
11714     A7 24 02 AB |  if_e	rdlong	local04, fp
11718     14 4E 85 A1 |  if_e	sub	fp, #20
1171c     12 23 02 A6 |  if_e	mov	local03, local04
11720     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11724     44 00 90 5D |  if_ne	jmp	#LR__1384
11728     00 1E 06 F6 | 	mov	local01, #0
1172c     A7 12 02 FB | 	rdlong	arg01, fp
11730     09 13 52 F6 | 	abs	arg01, arg01 wc
11734     1F 26 C6 C9 |  if_b	decod	local05, #31
11738     00 26 06 36 |  if_ae	mov	local05, #0
1173c     14 D3 B0 FD | 	call	#__system___float_fromuns
11740     13 FB 61 F5 | 	xor	result1, local05
11744     FD 12 02 F6 | 	mov	arg01, result1
11748     0C 4E 05 F1 | 	add	fp, #12
1174c     A7 14 02 FB | 	rdlong	arg02, fp
11750     0C 4E 85 F1 | 	sub	fp, #12
11754     01 16 06 F6 | 	mov	arg03, #1
11758     30 DB B0 FD | 	call	#__system___float_cmp
1175c     00 FA 55 F2 | 	cmps	result1, #0 wc
11760     00 1E 26 C6 |  if_b	not	local01, #0
11764     A7 1E 62 FC | 	wrlong	local01, fp
11768     7C 02 90 FD | 	jmp	#LR__1393
1176c                 | LR__1384
1176c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1176c     08 4E 05 F1 | 	add	fp, #8
11770     A7 1E 02 FB | 	rdlong	local01, fp
11774     08 4E 85 F1 | 	sub	fp, #8
11778     1C 1E 0E F2 | 	cmp	local01, #28 wz
1177c     14 4E 05 A1 |  if_e	add	fp, #20
11780     A7 24 02 AB |  if_e	rdlong	local04, fp
11784     14 4E 85 A1 |  if_e	sub	fp, #20
11788     12 23 02 A6 |  if_e	mov	local03, local04
1178c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11790     20 00 90 5D |  if_ne	jmp	#LR__1385
11794     A7 20 02 FB | 	rdlong	local02, fp
11798     0C 4E 05 F1 | 	add	fp, #12
1179c     A7 22 02 FB | 	rdlong	local03, fp
117a0     0C 4E 85 F1 | 	sub	fp, #12
117a4     11 21 52 F2 | 	cmps	local02, local03 wc
117a8     0F 1F A2 F1 | 	subx	local01, local01
117ac     A7 1E 62 FC | 	wrlong	local01, fp
117b0     34 02 90 FD | 	jmp	#LR__1393
117b4                 | LR__1385
117b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
117b4     08 4E 05 F1 | 	add	fp, #8
117b8     A7 1E 02 FB | 	rdlong	local01, fp
117bc     08 4E 85 F1 | 	sub	fp, #8
117c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
117c4     14 4E 05 A1 |  if_e	add	fp, #20
117c8     A7 24 02 AB |  if_e	rdlong	local04, fp
117cc     14 4E 85 A1 |  if_e	sub	fp, #20
117d0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
117d4     20 00 90 5D |  if_ne	jmp	#LR__1386
117d8     A7 20 02 FB | 	rdlong	local02, fp
117dc     0C 4E 05 F1 | 	add	fp, #12
117e0     A7 22 02 FB | 	rdlong	local03, fp
117e4     0C 4E 85 F1 | 	sub	fp, #12
117e8     11 21 52 F2 | 	cmps	local02, local03 wc
117ec     0F 1F A2 F1 | 	subx	local01, local01
117f0     A7 1E 62 FC | 	wrlong	local01, fp
117f4     F0 01 90 FD | 	jmp	#LR__1393
117f8                 | LR__1386
117f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
117f8     08 4E 05 F1 | 	add	fp, #8
117fc     A7 1E 02 FB | 	rdlong	local01, fp
11800     08 4E 85 F1 | 	sub	fp, #8
11804     1D 1E 0E F2 | 	cmp	local01, #29 wz
11808     14 4E 05 A1 |  if_e	add	fp, #20
1180c     A7 22 02 AB |  if_e	rdlong	local03, fp
11810     14 4E 85 A1 |  if_e	sub	fp, #20
11814     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11818     34 00 90 5D |  if_ne	jmp	#LR__1387
1181c     00 1E 06 F6 | 	mov	local01, #0
11820     A7 12 02 FB | 	rdlong	arg01, fp
11824     2C D2 B0 FD | 	call	#__system___float_fromuns
11828     FD 12 02 F6 | 	mov	arg01, result1
1182c     0C 4E 05 F1 | 	add	fp, #12
11830     A7 14 02 FB | 	rdlong	arg02, fp
11834     0C 4E 85 F1 | 	sub	fp, #12
11838     01 16 06 F6 | 	mov	arg03, #1
1183c     4C DA B0 FD | 	call	#__system___float_cmp
11840     00 FA 55 F2 | 	cmps	result1, #0 wc
11844     00 1E 26 C6 |  if_b	not	local01, #0
11848     A7 1E 62 FC | 	wrlong	local01, fp
1184c     98 01 90 FD | 	jmp	#LR__1393
11850                 | LR__1387
11850                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
11850     08 4E 05 F1 | 	add	fp, #8
11854     A7 1E 02 FB | 	rdlong	local01, fp
11858     08 4E 85 F1 | 	sub	fp, #8
1185c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11860     14 4E 05 A1 |  if_e	add	fp, #20
11864     A7 22 02 AB |  if_e	rdlong	local03, fp
11868     14 4E 85 A1 |  if_e	sub	fp, #20
1186c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11870     20 00 90 5D |  if_ne	jmp	#LR__1388
11874     A7 20 02 FB | 	rdlong	local02, fp
11878     0C 4E 05 F1 | 	add	fp, #12
1187c     A7 22 02 FB | 	rdlong	local03, fp
11880     0C 4E 85 F1 | 	sub	fp, #12
11884     11 21 52 F2 | 	cmps	local02, local03 wc
11888     0F 1F A2 F1 | 	subx	local01, local01
1188c     A7 1E 62 FC | 	wrlong	local01, fp
11890     54 01 90 FD | 	jmp	#LR__1393
11894                 | LR__1388
11894                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
11894     08 4E 05 F1 | 	add	fp, #8
11898     A7 1E 02 FB | 	rdlong	local01, fp
1189c     08 4E 85 F1 | 	sub	fp, #8
118a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
118a4     14 4E 05 A1 |  if_e	add	fp, #20
118a8     A7 22 02 AB |  if_e	rdlong	local03, fp
118ac     14 4E 85 A1 |  if_e	sub	fp, #20
118b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
118b4     20 00 90 5D |  if_ne	jmp	#LR__1389
118b8     A7 20 02 FB | 	rdlong	local02, fp
118bc     0C 4E 05 F1 | 	add	fp, #12
118c0     A7 22 02 FB | 	rdlong	local03, fp
118c4     0C 4E 85 F1 | 	sub	fp, #12
118c8     11 21 12 F2 | 	cmp	local02, local03 wc
118cc     0F 1F A2 F1 | 	subx	local01, local01
118d0     A7 1E 62 FC | 	wrlong	local01, fp
118d4     10 01 90 FD | 	jmp	#LR__1393
118d8                 | LR__1389
118d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
118d8     08 4E 05 F1 | 	add	fp, #8
118dc     A7 1E 02 FB | 	rdlong	local01, fp
118e0     08 4E 85 F1 | 	sub	fp, #8
118e4     2B 1E 0E F2 | 	cmp	local01, #43 wz
118e8     14 4E 05 A1 |  if_e	add	fp, #20
118ec     A7 22 02 AB |  if_e	rdlong	local03, fp
118f0     14 4E 85 A1 |  if_e	sub	fp, #20
118f4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
118f8     30 00 90 5D |  if_ne	jmp	#LR__1390
118fc     00 1E 06 F6 | 	mov	local01, #0
11900     A7 12 02 FB | 	rdlong	arg01, fp
11904     64 C7 BF FD | 	call	#_convertstring
11908     FD 12 02 F6 | 	mov	arg01, result1
1190c     0C 4E 05 F1 | 	add	fp, #12
11910     A7 14 02 FB | 	rdlong	arg02, fp
11914     0C 4E 85 F1 | 	sub	fp, #12
11918     E8 A9 B0 FD | 	call	#__system___string_cmp
1191c     00 FA 55 F2 | 	cmps	result1, #0 wc
11920     00 1E 26 C6 |  if_b	not	local01, #0
11924     A7 1E 62 FC | 	wrlong	local01, fp
11928     BC 00 90 FD | 	jmp	#LR__1393
1192c                 | LR__1390
1192c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1192c     08 4E 05 F1 | 	add	fp, #8
11930     A7 1E 02 FB | 	rdlong	local01, fp
11934     08 4E 85 F1 | 	sub	fp, #8
11938     1F 1E 0E F2 | 	cmp	local01, #31 wz
1193c     14 4E 05 A1 |  if_e	add	fp, #20
11940     A7 22 02 AB |  if_e	rdlong	local03, fp
11944     14 4E 85 A1 |  if_e	sub	fp, #20
11948     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1194c     34 00 90 5D |  if_ne	jmp	#LR__1391
11950     00 1E 06 F6 | 	mov	local01, #0
11954     A7 20 02 FB | 	rdlong	local02, fp
11958     0C 4E 05 F1 | 	add	fp, #12
1195c     A7 12 02 FB | 	rdlong	arg01, fp
11960     0C 4E 85 F1 | 	sub	fp, #12
11964     04 C7 BF FD | 	call	#_convertstring
11968     FD 14 02 F6 | 	mov	arg02, result1
1196c     10 13 02 F6 | 	mov	arg01, local02
11970     90 A9 B0 FD | 	call	#__system___string_cmp
11974     00 FA 55 F2 | 	cmps	result1, #0 wc
11978     00 1E 26 C6 |  if_b	not	local01, #0
1197c     A7 1E 62 FC | 	wrlong	local01, fp
11980     64 00 90 FD | 	jmp	#LR__1393
11984                 | LR__1391
11984                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
11984     08 4E 05 F1 | 	add	fp, #8
11988     A7 1E 02 FB | 	rdlong	local01, fp
1198c     08 4E 85 F1 | 	sub	fp, #8
11990     2B 1E 0E F2 | 	cmp	local01, #43 wz
11994     14 4E 05 A1 |  if_e	add	fp, #20
11998     A7 22 02 AB |  if_e	rdlong	local03, fp
1199c     14 4E 85 A1 |  if_e	sub	fp, #20
119a0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
119a4     3C 00 90 5D |  if_ne	jmp	#LR__1392
119a8     00 1E 06 F6 | 	mov	local01, #0
119ac     A7 12 02 FB | 	rdlong	arg01, fp
119b0     B8 C6 BF FD | 	call	#_convertstring
119b4     FD 20 02 F6 | 	mov	local02, result1
119b8     0C 4E 05 F1 | 	add	fp, #12
119bc     A7 12 02 FB | 	rdlong	arg01, fp
119c0     0C 4E 85 F1 | 	sub	fp, #12
119c4     A4 C6 BF FD | 	call	#_convertstring
119c8     FD 14 02 F6 | 	mov	arg02, result1
119cc     10 13 02 F6 | 	mov	arg01, local02
119d0     30 A9 B0 FD | 	call	#__system___string_cmp
119d4     00 FA 55 F2 | 	cmps	result1, #0 wc
119d8     00 1E 26 C6 |  if_b	not	local01, #0
119dc     A7 1E 62 FC | 	wrlong	local01, fp
119e0     04 00 90 FD | 	jmp	#LR__1393
119e4                 | LR__1392
119e4     A7 00 68 FC | 	wrlong	#0, fp
119e8                 | LR__1393
119e8     08 4E 05 F1 | 	add	fp, #8
119ec     A7 38 68 FC | 	wrlong	#28, fp
119f0     08 4E 85 F1 | 	sub	fp, #8
119f4     A7 12 02 F6 | 	mov	arg01, fp
119f8     64 87 BF FD | 	call	#_push
119fc     A7 F0 03 F6 | 	mov	ptra, fp
11a00     B2 00 A0 FD | 	call	#popregs_
11a04                 | _do_lt_ret
11a04     2D 00 64 FD | 	ret
11a08                 | 
11a08                 | ' 
11a08                 | ' sub do_ge
11a08                 | _do_ge
11a08     05 4A 05 F6 | 	mov	COUNT_, #5
11a0c     A8 00 A0 FD | 	call	#pushregs_
11a10     18 F0 07 F1 | 	add	ptra, #24
11a14     B0 86 BF FD | 	call	#_pop
11a18     FD 1E 02 F6 | 	mov	local01, result1
11a1c     FE 20 02 F6 | 	mov	local02, result2
11a20     FF 22 02 F6 | 	mov	local03, result3
11a24     0C 4E 05 F1 | 	add	fp, #12
11a28     A7 1E 62 FC | 	wrlong	local01, fp
11a2c     04 4E 05 F1 | 	add	fp, #4
11a30     A7 20 62 FC | 	wrlong	local02, fp
11a34     04 4E 05 F1 | 	add	fp, #4
11a38     A7 22 62 FC | 	wrlong	local03, fp
11a3c     14 4E 85 F1 | 	sub	fp, #20
11a40     84 86 BF FD | 	call	#_pop
11a44     FF 22 02 F6 | 	mov	local03, result3
11a48     A7 FA 61 FC | 	wrlong	result1, fp
11a4c     04 4E 05 F1 | 	add	fp, #4
11a50     A7 FC 61 FC | 	wrlong	result2, fp
11a54     04 4E 05 F1 | 	add	fp, #4
11a58     A7 22 62 FC | 	wrlong	local03, fp
11a5c                 | ' t2=pop()
11a5c                 | ' t1=pop()
11a5c                 | ' 
11a5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
11a5c     08 4E 85 F1 | 	sub	fp, #8
11a60     1F 22 0E F2 | 	cmp	local03, #31 wz
11a64     14 4E 05 A1 |  if_e	add	fp, #20
11a68     A7 24 02 AB |  if_e	rdlong	local04, fp
11a6c     14 4E 85 A1 |  if_e	sub	fp, #20
11a70     12 23 02 A6 |  if_e	mov	local03, local04
11a74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11a78     28 00 90 5D |  if_ne	jmp	#LR__1400
11a7c     00 1E 06 F6 | 	mov	local01, #0
11a80     A7 12 02 FB | 	rdlong	arg01, fp
11a84     0C 4E 05 F1 | 	add	fp, #12
11a88     A7 14 02 FB | 	rdlong	arg02, fp
11a8c     0C 4E 85 F1 | 	sub	fp, #12
11a90     70 A8 B0 FD | 	call	#__system___string_cmp
11a94     00 FA 55 F2 | 	cmps	result1, #0 wc
11a98     00 1E 26 36 |  if_ae	not	local01, #0
11a9c     A7 1E 62 FC | 	wrlong	local01, fp
11aa0     1C 04 90 FD | 	jmp	#LR__1413
11aa4                 | LR__1400
11aa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
11aa4     08 4E 05 F1 | 	add	fp, #8
11aa8     A7 1E 02 FB | 	rdlong	local01, fp
11aac     08 4E 85 F1 | 	sub	fp, #8
11ab0     1E 1E 0E F2 | 	cmp	local01, #30 wz
11ab4     14 4E 05 A1 |  if_e	add	fp, #20
11ab8     A7 24 02 AB |  if_e	rdlong	local04, fp
11abc     14 4E 85 A1 |  if_e	sub	fp, #20
11ac0     12 23 02 A6 |  if_e	mov	local03, local04
11ac4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ac8     2C 00 90 5D |  if_ne	jmp	#LR__1401
11acc     00 1E 06 F6 | 	mov	local01, #0
11ad0     A7 12 02 FB | 	rdlong	arg01, fp
11ad4     0C 4E 05 F1 | 	add	fp, #12
11ad8     A7 14 02 FB | 	rdlong	arg02, fp
11adc     0C 4E 85 F1 | 	sub	fp, #12
11ae0     01 16 66 F6 | 	neg	arg03, #1
11ae4     A4 D7 B0 FD | 	call	#__system___float_cmp
11ae8     00 FA 55 F2 | 	cmps	result1, #0 wc
11aec     00 1E 26 36 |  if_ae	not	local01, #0
11af0     A7 1E 62 FC | 	wrlong	local01, fp
11af4     C8 03 90 FD | 	jmp	#LR__1413
11af8                 | LR__1401
11af8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
11af8     08 4E 05 F1 | 	add	fp, #8
11afc     A7 1E 02 FB | 	rdlong	local01, fp
11b00     08 4E 85 F1 | 	sub	fp, #8
11b04     1E 1E 0E F2 | 	cmp	local01, #30 wz
11b08     14 4E 05 A1 |  if_e	add	fp, #20
11b0c     A7 24 02 AB |  if_e	rdlong	local04, fp
11b10     14 4E 85 A1 |  if_e	sub	fp, #20
11b14     12 23 02 A6 |  if_e	mov	local03, local04
11b18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b1c     48 00 90 5D |  if_ne	jmp	#LR__1402
11b20     00 1E 06 F6 | 	mov	local01, #0
11b24     A7 20 02 FB | 	rdlong	local02, fp
11b28     0C 4E 05 F1 | 	add	fp, #12
11b2c     A7 12 02 FB | 	rdlong	arg01, fp
11b30     0C 4E 85 F1 | 	sub	fp, #12
11b34     09 13 52 F6 | 	abs	arg01, arg01 wc
11b38     1F 26 C6 C9 |  if_b	decod	local05, #31
11b3c     00 26 06 36 |  if_ae	mov	local05, #0
11b40     10 CF B0 FD | 	call	#__system___float_fromuns
11b44     13 FB 61 F5 | 	xor	result1, local05
11b48     FD 14 02 F6 | 	mov	arg02, result1
11b4c     10 13 02 F6 | 	mov	arg01, local02
11b50     01 16 66 F6 | 	neg	arg03, #1
11b54     34 D7 B0 FD | 	call	#__system___float_cmp
11b58     00 FA 55 F2 | 	cmps	result1, #0 wc
11b5c     00 1E 26 36 |  if_ae	not	local01, #0
11b60     A7 1E 62 FC | 	wrlong	local01, fp
11b64     58 03 90 FD | 	jmp	#LR__1413
11b68                 | LR__1402
11b68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
11b68     08 4E 05 F1 | 	add	fp, #8
11b6c     A7 1E 02 FB | 	rdlong	local01, fp
11b70     08 4E 85 F1 | 	sub	fp, #8
11b74     1E 1E 0E F2 | 	cmp	local01, #30 wz
11b78     14 4E 05 A1 |  if_e	add	fp, #20
11b7c     A7 24 02 AB |  if_e	rdlong	local04, fp
11b80     14 4E 85 A1 |  if_e	sub	fp, #20
11b84     12 23 02 A6 |  if_e	mov	local03, local04
11b88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11b8c     38 00 90 5D |  if_ne	jmp	#LR__1403
11b90     00 1E 06 F6 | 	mov	local01, #0
11b94     A7 20 02 FB | 	rdlong	local02, fp
11b98     0C 4E 05 F1 | 	add	fp, #12
11b9c     A7 12 02 FB | 	rdlong	arg01, fp
11ba0     0C 4E 85 F1 | 	sub	fp, #12
11ba4     AC CE B0 FD | 	call	#__system___float_fromuns
11ba8     FD 14 02 F6 | 	mov	arg02, result1
11bac     10 13 02 F6 | 	mov	arg01, local02
11bb0     01 16 66 F6 | 	neg	arg03, #1
11bb4     D4 D6 B0 FD | 	call	#__system___float_cmp
11bb8     00 FA 55 F2 | 	cmps	result1, #0 wc
11bbc     00 1E 26 36 |  if_ae	not	local01, #0
11bc0     A7 1E 62 FC | 	wrlong	local01, fp
11bc4     F8 02 90 FD | 	jmp	#LR__1413
11bc8                 | LR__1403
11bc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
11bc8     08 4E 05 F1 | 	add	fp, #8
11bcc     A7 1E 02 FB | 	rdlong	local01, fp
11bd0     08 4E 85 F1 | 	sub	fp, #8
11bd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
11bd8     14 4E 05 A1 |  if_e	add	fp, #20
11bdc     A7 24 02 AB |  if_e	rdlong	local04, fp
11be0     14 4E 85 A1 |  if_e	sub	fp, #20
11be4     12 23 02 A6 |  if_e	mov	local03, local04
11be8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11bec     44 00 90 5D |  if_ne	jmp	#LR__1404
11bf0     00 1E 06 F6 | 	mov	local01, #0
11bf4     A7 12 02 FB | 	rdlong	arg01, fp
11bf8     09 13 52 F6 | 	abs	arg01, arg01 wc
11bfc     1F 26 C6 C9 |  if_b	decod	local05, #31
11c00     00 26 06 36 |  if_ae	mov	local05, #0
11c04     4C CE B0 FD | 	call	#__system___float_fromuns
11c08     13 FB 61 F5 | 	xor	result1, local05
11c0c     FD 12 02 F6 | 	mov	arg01, result1
11c10     0C 4E 05 F1 | 	add	fp, #12
11c14     A7 14 02 FB | 	rdlong	arg02, fp
11c18     0C 4E 85 F1 | 	sub	fp, #12
11c1c     01 16 66 F6 | 	neg	arg03, #1
11c20     68 D6 B0 FD | 	call	#__system___float_cmp
11c24     00 FA 55 F2 | 	cmps	result1, #0 wc
11c28     00 1E 26 36 |  if_ae	not	local01, #0
11c2c     A7 1E 62 FC | 	wrlong	local01, fp
11c30     8C 02 90 FD | 	jmp	#LR__1413
11c34                 | LR__1404
11c34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
11c34     08 4E 05 F1 | 	add	fp, #8
11c38     A7 1E 02 FB | 	rdlong	local01, fp
11c3c     08 4E 85 F1 | 	sub	fp, #8
11c40     1C 1E 0E F2 | 	cmp	local01, #28 wz
11c44     14 4E 05 A1 |  if_e	add	fp, #20
11c48     A7 24 02 AB |  if_e	rdlong	local04, fp
11c4c     14 4E 85 A1 |  if_e	sub	fp, #20
11c50     12 23 02 A6 |  if_e	mov	local03, local04
11c54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11c58     24 00 90 5D |  if_ne	jmp	#LR__1405
11c5c     00 1E 06 F6 | 	mov	local01, #0
11c60     A7 20 02 FB | 	rdlong	local02, fp
11c64     0C 4E 05 F1 | 	add	fp, #12
11c68     A7 22 02 FB | 	rdlong	local03, fp
11c6c     0C 4E 85 F1 | 	sub	fp, #12
11c70     11 21 52 F2 | 	cmps	local02, local03 wc
11c74     01 1E 66 36 |  if_ae	neg	local01, #1
11c78     A7 1E 62 FC | 	wrlong	local01, fp
11c7c     40 02 90 FD | 	jmp	#LR__1413
11c80                 | LR__1405
11c80                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
11c80     08 4E 05 F1 | 	add	fp, #8
11c84     A7 1E 02 FB | 	rdlong	local01, fp
11c88     08 4E 85 F1 | 	sub	fp, #8
11c8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11c90     14 4E 05 A1 |  if_e	add	fp, #20
11c94     A7 24 02 AB |  if_e	rdlong	local04, fp
11c98     14 4E 85 A1 |  if_e	sub	fp, #20
11c9c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11ca0     24 00 90 5D |  if_ne	jmp	#LR__1406
11ca4     00 1E 06 F6 | 	mov	local01, #0
11ca8     A7 20 02 FB | 	rdlong	local02, fp
11cac     0C 4E 05 F1 | 	add	fp, #12
11cb0     A7 22 02 FB | 	rdlong	local03, fp
11cb4     0C 4E 85 F1 | 	sub	fp, #12
11cb8     11 21 52 F2 | 	cmps	local02, local03 wc
11cbc     01 1E 66 36 |  if_ae	neg	local01, #1
11cc0     A7 1E 62 FC | 	wrlong	local01, fp
11cc4     F8 01 90 FD | 	jmp	#LR__1413
11cc8                 | LR__1406
11cc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
11cc8     08 4E 05 F1 | 	add	fp, #8
11ccc     A7 1E 02 FB | 	rdlong	local01, fp
11cd0     08 4E 85 F1 | 	sub	fp, #8
11cd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
11cd8     14 4E 05 A1 |  if_e	add	fp, #20
11cdc     A7 22 02 AB |  if_e	rdlong	local03, fp
11ce0     14 4E 85 A1 |  if_e	sub	fp, #20
11ce4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ce8     34 00 90 5D |  if_ne	jmp	#LR__1407
11cec     00 1E 06 F6 | 	mov	local01, #0
11cf0     A7 12 02 FB | 	rdlong	arg01, fp
11cf4     5C CD B0 FD | 	call	#__system___float_fromuns
11cf8     FD 12 02 F6 | 	mov	arg01, result1
11cfc     0C 4E 05 F1 | 	add	fp, #12
11d00     A7 14 02 FB | 	rdlong	arg02, fp
11d04     0C 4E 85 F1 | 	sub	fp, #12
11d08     01 16 66 F6 | 	neg	arg03, #1
11d0c     7C D5 B0 FD | 	call	#__system___float_cmp
11d10     00 FA 55 F2 | 	cmps	result1, #0 wc
11d14     00 1E 26 36 |  if_ae	not	local01, #0
11d18     A7 1E 62 FC | 	wrlong	local01, fp
11d1c     A0 01 90 FD | 	jmp	#LR__1413
11d20                 | LR__1407
11d20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
11d20     08 4E 05 F1 | 	add	fp, #8
11d24     A7 1E 02 FB | 	rdlong	local01, fp
11d28     08 4E 85 F1 | 	sub	fp, #8
11d2c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11d30     14 4E 05 A1 |  if_e	add	fp, #20
11d34     A7 22 02 AB |  if_e	rdlong	local03, fp
11d38     14 4E 85 A1 |  if_e	sub	fp, #20
11d3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11d40     24 00 90 5D |  if_ne	jmp	#LR__1408
11d44     00 1E 06 F6 | 	mov	local01, #0
11d48     A7 20 02 FB | 	rdlong	local02, fp
11d4c     0C 4E 05 F1 | 	add	fp, #12
11d50     A7 22 02 FB | 	rdlong	local03, fp
11d54     0C 4E 85 F1 | 	sub	fp, #12
11d58     11 21 52 F2 | 	cmps	local02, local03 wc
11d5c     01 1E 66 36 |  if_ae	neg	local01, #1
11d60     A7 1E 62 FC | 	wrlong	local01, fp
11d64     58 01 90 FD | 	jmp	#LR__1413
11d68                 | LR__1408
11d68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
11d68     08 4E 05 F1 | 	add	fp, #8
11d6c     A7 1E 02 FB | 	rdlong	local01, fp
11d70     08 4E 85 F1 | 	sub	fp, #8
11d74     1D 1E 0E F2 | 	cmp	local01, #29 wz
11d78     14 4E 05 A1 |  if_e	add	fp, #20
11d7c     A7 22 02 AB |  if_e	rdlong	local03, fp
11d80     14 4E 85 A1 |  if_e	sub	fp, #20
11d84     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11d88     24 00 90 5D |  if_ne	jmp	#LR__1409
11d8c     00 1E 06 F6 | 	mov	local01, #0
11d90     A7 20 02 FB | 	rdlong	local02, fp
11d94     0C 4E 05 F1 | 	add	fp, #12
11d98     A7 22 02 FB | 	rdlong	local03, fp
11d9c     0C 4E 85 F1 | 	sub	fp, #12
11da0     11 21 12 F2 | 	cmp	local02, local03 wc
11da4     01 1E 66 36 |  if_ae	neg	local01, #1
11da8     A7 1E 62 FC | 	wrlong	local01, fp
11dac     10 01 90 FD | 	jmp	#LR__1413
11db0                 | LR__1409
11db0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
11db0     08 4E 05 F1 | 	add	fp, #8
11db4     A7 1E 02 FB | 	rdlong	local01, fp
11db8     08 4E 85 F1 | 	sub	fp, #8
11dbc     2B 1E 0E F2 | 	cmp	local01, #43 wz
11dc0     14 4E 05 A1 |  if_e	add	fp, #20
11dc4     A7 22 02 AB |  if_e	rdlong	local03, fp
11dc8     14 4E 85 A1 |  if_e	sub	fp, #20
11dcc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11dd0     30 00 90 5D |  if_ne	jmp	#LR__1410
11dd4     00 1E 06 F6 | 	mov	local01, #0
11dd8     A7 12 02 FB | 	rdlong	arg01, fp
11ddc     8C C2 BF FD | 	call	#_convertstring
11de0     FD 12 02 F6 | 	mov	arg01, result1
11de4     0C 4E 05 F1 | 	add	fp, #12
11de8     A7 14 02 FB | 	rdlong	arg02, fp
11dec     0C 4E 85 F1 | 	sub	fp, #12
11df0     10 A5 B0 FD | 	call	#__system___string_cmp
11df4     00 FA 55 F2 | 	cmps	result1, #0 wc
11df8     00 1E 26 36 |  if_ae	not	local01, #0
11dfc     A7 1E 62 FC | 	wrlong	local01, fp
11e00     BC 00 90 FD | 	jmp	#LR__1413
11e04                 | LR__1410
11e04                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
11e04     08 4E 05 F1 | 	add	fp, #8
11e08     A7 1E 02 FB | 	rdlong	local01, fp
11e0c     08 4E 85 F1 | 	sub	fp, #8
11e10     1F 1E 0E F2 | 	cmp	local01, #31 wz
11e14     14 4E 05 A1 |  if_e	add	fp, #20
11e18     A7 22 02 AB |  if_e	rdlong	local03, fp
11e1c     14 4E 85 A1 |  if_e	sub	fp, #20
11e20     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11e24     34 00 90 5D |  if_ne	jmp	#LR__1411
11e28     00 1E 06 F6 | 	mov	local01, #0
11e2c     A7 20 02 FB | 	rdlong	local02, fp
11e30     0C 4E 05 F1 | 	add	fp, #12
11e34     A7 12 02 FB | 	rdlong	arg01, fp
11e38     0C 4E 85 F1 | 	sub	fp, #12
11e3c     2C C2 BF FD | 	call	#_convertstring
11e40     FD 14 02 F6 | 	mov	arg02, result1
11e44     10 13 02 F6 | 	mov	arg01, local02
11e48     B8 A4 B0 FD | 	call	#__system___string_cmp
11e4c     00 FA 55 F2 | 	cmps	result1, #0 wc
11e50     00 1E 26 36 |  if_ae	not	local01, #0
11e54     A7 1E 62 FC | 	wrlong	local01, fp
11e58     64 00 90 FD | 	jmp	#LR__1413
11e5c                 | LR__1411
11e5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
11e5c     08 4E 05 F1 | 	add	fp, #8
11e60     A7 1E 02 FB | 	rdlong	local01, fp
11e64     08 4E 85 F1 | 	sub	fp, #8
11e68     2B 1E 0E F2 | 	cmp	local01, #43 wz
11e6c     14 4E 05 A1 |  if_e	add	fp, #20
11e70     A7 22 02 AB |  if_e	rdlong	local03, fp
11e74     14 4E 85 A1 |  if_e	sub	fp, #20
11e78     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11e7c     3C 00 90 5D |  if_ne	jmp	#LR__1412
11e80     00 1E 06 F6 | 	mov	local01, #0
11e84     A7 12 02 FB | 	rdlong	arg01, fp
11e88     E0 C1 BF FD | 	call	#_convertstring
11e8c     FD 20 02 F6 | 	mov	local02, result1
11e90     0C 4E 05 F1 | 	add	fp, #12
11e94     A7 12 02 FB | 	rdlong	arg01, fp
11e98     0C 4E 85 F1 | 	sub	fp, #12
11e9c     CC C1 BF FD | 	call	#_convertstring
11ea0     FD 14 02 F6 | 	mov	arg02, result1
11ea4     10 13 02 F6 | 	mov	arg01, local02
11ea8     58 A4 B0 FD | 	call	#__system___string_cmp
11eac     00 FA 55 F2 | 	cmps	result1, #0 wc
11eb0     00 1E 26 36 |  if_ae	not	local01, #0
11eb4     A7 1E 62 FC | 	wrlong	local01, fp
11eb8     04 00 90 FD | 	jmp	#LR__1413
11ebc                 | LR__1412
11ebc     A7 00 68 FC | 	wrlong	#0, fp
11ec0                 | LR__1413
11ec0     08 4E 05 F1 | 	add	fp, #8
11ec4     A7 38 68 FC | 	wrlong	#28, fp
11ec8     08 4E 85 F1 | 	sub	fp, #8
11ecc     A7 12 02 F6 | 	mov	arg01, fp
11ed0     8C 82 BF FD | 	call	#_push
11ed4     A7 F0 03 F6 | 	mov	ptra, fp
11ed8     B2 00 A0 FD | 	call	#popregs_
11edc                 | _do_ge_ret
11edc     2D 00 64 FD | 	ret
11ee0                 | 
11ee0                 | ' 
11ee0                 | ' sub do_le
11ee0                 | _do_le
11ee0     05 4A 05 F6 | 	mov	COUNT_, #5
11ee4     A8 00 A0 FD | 	call	#pushregs_
11ee8     18 F0 07 F1 | 	add	ptra, #24
11eec     D8 81 BF FD | 	call	#_pop
11ef0     FD 1E 02 F6 | 	mov	local01, result1
11ef4     FE 20 02 F6 | 	mov	local02, result2
11ef8     FF 22 02 F6 | 	mov	local03, result3
11efc     0C 4E 05 F1 | 	add	fp, #12
11f00     A7 1E 62 FC | 	wrlong	local01, fp
11f04     04 4E 05 F1 | 	add	fp, #4
11f08     A7 20 62 FC | 	wrlong	local02, fp
11f0c     04 4E 05 F1 | 	add	fp, #4
11f10     A7 22 62 FC | 	wrlong	local03, fp
11f14     14 4E 85 F1 | 	sub	fp, #20
11f18     AC 81 BF FD | 	call	#_pop
11f1c     FF 22 02 F6 | 	mov	local03, result3
11f20     A7 FA 61 FC | 	wrlong	result1, fp
11f24     04 4E 05 F1 | 	add	fp, #4
11f28     A7 FC 61 FC | 	wrlong	result2, fp
11f2c     04 4E 05 F1 | 	add	fp, #4
11f30     A7 22 62 FC | 	wrlong	local03, fp
11f34                 | ' t2=pop()
11f34                 | ' t1=pop()
11f34                 | ' 
11f34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
11f34     08 4E 85 F1 | 	sub	fp, #8
11f38     1F 22 0E F2 | 	cmp	local03, #31 wz
11f3c     14 4E 05 A1 |  if_e	add	fp, #20
11f40     A7 24 02 AB |  if_e	rdlong	local04, fp
11f44     14 4E 85 A1 |  if_e	sub	fp, #20
11f48     12 23 02 A6 |  if_e	mov	local03, local04
11f4c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11f50     28 00 90 5D |  if_ne	jmp	#LR__1420
11f54     00 1E 06 F6 | 	mov	local01, #0
11f58     A7 12 02 FB | 	rdlong	arg01, fp
11f5c     0C 4E 05 F1 | 	add	fp, #12
11f60     A7 14 02 FB | 	rdlong	arg02, fp
11f64     0C 4E 85 F1 | 	sub	fp, #12
11f68     98 A3 B0 FD | 	call	#__system___string_cmp
11f6c     01 FA 55 F2 | 	cmps	result1, #1 wc
11f70     00 1E 26 C6 |  if_b	not	local01, #0
11f74     A7 1E 62 FC | 	wrlong	local01, fp
11f78     1C 04 90 FD | 	jmp	#LR__1433
11f7c                 | LR__1420
11f7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
11f7c     08 4E 05 F1 | 	add	fp, #8
11f80     A7 1E 02 FB | 	rdlong	local01, fp
11f84     08 4E 85 F1 | 	sub	fp, #8
11f88     1E 1E 0E F2 | 	cmp	local01, #30 wz
11f8c     14 4E 05 A1 |  if_e	add	fp, #20
11f90     A7 24 02 AB |  if_e	rdlong	local04, fp
11f94     14 4E 85 A1 |  if_e	sub	fp, #20
11f98     12 23 02 A6 |  if_e	mov	local03, local04
11f9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11fa0     2C 00 90 5D |  if_ne	jmp	#LR__1421
11fa4     00 1E 06 F6 | 	mov	local01, #0
11fa8     A7 12 02 FB | 	rdlong	arg01, fp
11fac     0C 4E 05 F1 | 	add	fp, #12
11fb0     A7 14 02 FB | 	rdlong	arg02, fp
11fb4     0C 4E 85 F1 | 	sub	fp, #12
11fb8     01 16 06 F6 | 	mov	arg03, #1
11fbc     CC D2 B0 FD | 	call	#__system___float_cmp
11fc0     01 FA 55 F2 | 	cmps	result1, #1 wc
11fc4     00 1E 26 C6 |  if_b	not	local01, #0
11fc8     A7 1E 62 FC | 	wrlong	local01, fp
11fcc     C8 03 90 FD | 	jmp	#LR__1433
11fd0                 | LR__1421
11fd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
11fd0     08 4E 05 F1 | 	add	fp, #8
11fd4     A7 1E 02 FB | 	rdlong	local01, fp
11fd8     08 4E 85 F1 | 	sub	fp, #8
11fdc     1E 1E 0E F2 | 	cmp	local01, #30 wz
11fe0     14 4E 05 A1 |  if_e	add	fp, #20
11fe4     A7 24 02 AB |  if_e	rdlong	local04, fp
11fe8     14 4E 85 A1 |  if_e	sub	fp, #20
11fec     12 23 02 A6 |  if_e	mov	local03, local04
11ff0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11ff4     48 00 90 5D |  if_ne	jmp	#LR__1422
11ff8     00 1E 06 F6 | 	mov	local01, #0
11ffc     A7 20 02 FB | 	rdlong	local02, fp
12000     0C 4E 05 F1 | 	add	fp, #12
12004     A7 12 02 FB | 	rdlong	arg01, fp
12008     0C 4E 85 F1 | 	sub	fp, #12
1200c     09 13 52 F6 | 	abs	arg01, arg01 wc
12010     1F 26 C6 C9 |  if_b	decod	local05, #31
12014     00 26 06 36 |  if_ae	mov	local05, #0
12018     38 CA B0 FD | 	call	#__system___float_fromuns
1201c     13 FB 61 F5 | 	xor	result1, local05
12020     FD 14 02 F6 | 	mov	arg02, result1
12024     10 13 02 F6 | 	mov	arg01, local02
12028     01 16 06 F6 | 	mov	arg03, #1
1202c     5C D2 B0 FD | 	call	#__system___float_cmp
12030     01 FA 55 F2 | 	cmps	result1, #1 wc
12034     00 1E 26 C6 |  if_b	not	local01, #0
12038     A7 1E 62 FC | 	wrlong	local01, fp
1203c     58 03 90 FD | 	jmp	#LR__1433
12040                 | LR__1422
12040                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12040     08 4E 05 F1 | 	add	fp, #8
12044     A7 1E 02 FB | 	rdlong	local01, fp
12048     08 4E 85 F1 | 	sub	fp, #8
1204c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12050     14 4E 05 A1 |  if_e	add	fp, #20
12054     A7 24 02 AB |  if_e	rdlong	local04, fp
12058     14 4E 85 A1 |  if_e	sub	fp, #20
1205c     12 23 02 A6 |  if_e	mov	local03, local04
12060     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12064     38 00 90 5D |  if_ne	jmp	#LR__1423
12068     00 1E 06 F6 | 	mov	local01, #0
1206c     A7 20 02 FB | 	rdlong	local02, fp
12070     0C 4E 05 F1 | 	add	fp, #12
12074     A7 12 02 FB | 	rdlong	arg01, fp
12078     0C 4E 85 F1 | 	sub	fp, #12
1207c     D4 C9 B0 FD | 	call	#__system___float_fromuns
12080     FD 14 02 F6 | 	mov	arg02, result1
12084     10 13 02 F6 | 	mov	arg01, local02
12088     01 16 06 F6 | 	mov	arg03, #1
1208c     FC D1 B0 FD | 	call	#__system___float_cmp
12090     01 FA 55 F2 | 	cmps	result1, #1 wc
12094     00 1E 26 C6 |  if_b	not	local01, #0
12098     A7 1E 62 FC | 	wrlong	local01, fp
1209c     F8 02 90 FD | 	jmp	#LR__1433
120a0                 | LR__1423
120a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
120a0     08 4E 05 F1 | 	add	fp, #8
120a4     A7 1E 02 FB | 	rdlong	local01, fp
120a8     08 4E 85 F1 | 	sub	fp, #8
120ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
120b0     14 4E 05 A1 |  if_e	add	fp, #20
120b4     A7 24 02 AB |  if_e	rdlong	local04, fp
120b8     14 4E 85 A1 |  if_e	sub	fp, #20
120bc     12 23 02 A6 |  if_e	mov	local03, local04
120c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
120c4     44 00 90 5D |  if_ne	jmp	#LR__1424
120c8     00 1E 06 F6 | 	mov	local01, #0
120cc     A7 12 02 FB | 	rdlong	arg01, fp
120d0     09 13 52 F6 | 	abs	arg01, arg01 wc
120d4     1F 26 C6 C9 |  if_b	decod	local05, #31
120d8     00 26 06 36 |  if_ae	mov	local05, #0
120dc     74 C9 B0 FD | 	call	#__system___float_fromuns
120e0     13 FB 61 F5 | 	xor	result1, local05
120e4     FD 12 02 F6 | 	mov	arg01, result1
120e8     0C 4E 05 F1 | 	add	fp, #12
120ec     A7 14 02 FB | 	rdlong	arg02, fp
120f0     0C 4E 85 F1 | 	sub	fp, #12
120f4     01 16 06 F6 | 	mov	arg03, #1
120f8     90 D1 B0 FD | 	call	#__system___float_cmp
120fc     01 FA 55 F2 | 	cmps	result1, #1 wc
12100     00 1E 26 C6 |  if_b	not	local01, #0
12104     A7 1E 62 FC | 	wrlong	local01, fp
12108     8C 02 90 FD | 	jmp	#LR__1433
1210c                 | LR__1424
1210c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1210c     08 4E 05 F1 | 	add	fp, #8
12110     A7 1E 02 FB | 	rdlong	local01, fp
12114     08 4E 85 F1 | 	sub	fp, #8
12118     1C 1E 0E F2 | 	cmp	local01, #28 wz
1211c     14 4E 05 A1 |  if_e	add	fp, #20
12120     A7 24 02 AB |  if_e	rdlong	local04, fp
12124     14 4E 85 A1 |  if_e	sub	fp, #20
12128     12 23 02 A6 |  if_e	mov	local03, local04
1212c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12130     24 00 90 5D |  if_ne	jmp	#LR__1425
12134     00 1E 06 F6 | 	mov	local01, #0
12138     A7 20 02 FB | 	rdlong	local02, fp
1213c     0C 4E 05 F1 | 	add	fp, #12
12140     A7 22 02 FB | 	rdlong	local03, fp
12144     0C 4E 85 F1 | 	sub	fp, #12
12148     11 21 5A F2 | 	cmps	local02, local03 wcz
1214c     01 1E 66 E6 |  if_be	neg	local01, #1
12150     A7 1E 62 FC | 	wrlong	local01, fp
12154     40 02 90 FD | 	jmp	#LR__1433
12158                 | LR__1425
12158                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12158     08 4E 05 F1 | 	add	fp, #8
1215c     A7 1E 02 FB | 	rdlong	local01, fp
12160     08 4E 85 F1 | 	sub	fp, #8
12164     1C 1E 0E F2 | 	cmp	local01, #28 wz
12168     14 4E 05 A1 |  if_e	add	fp, #20
1216c     A7 24 02 AB |  if_e	rdlong	local04, fp
12170     14 4E 85 A1 |  if_e	sub	fp, #20
12174     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12178     24 00 90 5D |  if_ne	jmp	#LR__1426
1217c     00 1E 06 F6 | 	mov	local01, #0
12180     A7 20 02 FB | 	rdlong	local02, fp
12184     0C 4E 05 F1 | 	add	fp, #12
12188     A7 22 02 FB | 	rdlong	local03, fp
1218c     0C 4E 85 F1 | 	sub	fp, #12
12190     11 21 5A F2 | 	cmps	local02, local03 wcz
12194     01 1E 66 E6 |  if_be	neg	local01, #1
12198     A7 1E 62 FC | 	wrlong	local01, fp
1219c     F8 01 90 FD | 	jmp	#LR__1433
121a0                 | LR__1426
121a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
121a0     08 4E 05 F1 | 	add	fp, #8
121a4     A7 1E 02 FB | 	rdlong	local01, fp
121a8     08 4E 85 F1 | 	sub	fp, #8
121ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
121b0     14 4E 05 A1 |  if_e	add	fp, #20
121b4     A7 22 02 AB |  if_e	rdlong	local03, fp
121b8     14 4E 85 A1 |  if_e	sub	fp, #20
121bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
121c0     34 00 90 5D |  if_ne	jmp	#LR__1427
121c4     00 1E 06 F6 | 	mov	local01, #0
121c8     A7 12 02 FB | 	rdlong	arg01, fp
121cc     84 C8 B0 FD | 	call	#__system___float_fromuns
121d0     FD 12 02 F6 | 	mov	arg01, result1
121d4     0C 4E 05 F1 | 	add	fp, #12
121d8     A7 14 02 FB | 	rdlong	arg02, fp
121dc     0C 4E 85 F1 | 	sub	fp, #12
121e0     01 16 06 F6 | 	mov	arg03, #1
121e4     A4 D0 B0 FD | 	call	#__system___float_cmp
121e8     01 FA 55 F2 | 	cmps	result1, #1 wc
121ec     00 1E 26 C6 |  if_b	not	local01, #0
121f0     A7 1E 62 FC | 	wrlong	local01, fp
121f4     A0 01 90 FD | 	jmp	#LR__1433
121f8                 | LR__1427
121f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
121f8     08 4E 05 F1 | 	add	fp, #8
121fc     A7 1E 02 FB | 	rdlong	local01, fp
12200     08 4E 85 F1 | 	sub	fp, #8
12204     1D 1E 0E F2 | 	cmp	local01, #29 wz
12208     14 4E 05 A1 |  if_e	add	fp, #20
1220c     A7 22 02 AB |  if_e	rdlong	local03, fp
12210     14 4E 85 A1 |  if_e	sub	fp, #20
12214     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12218     24 00 90 5D |  if_ne	jmp	#LR__1428
1221c     00 1E 06 F6 | 	mov	local01, #0
12220     A7 20 02 FB | 	rdlong	local02, fp
12224     0C 4E 05 F1 | 	add	fp, #12
12228     A7 22 02 FB | 	rdlong	local03, fp
1222c     0C 4E 85 F1 | 	sub	fp, #12
12230     11 21 5A F2 | 	cmps	local02, local03 wcz
12234     01 1E 66 E6 |  if_be	neg	local01, #1
12238     A7 1E 62 FC | 	wrlong	local01, fp
1223c     58 01 90 FD | 	jmp	#LR__1433
12240                 | LR__1428
12240                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12240     08 4E 05 F1 | 	add	fp, #8
12244     A7 1E 02 FB | 	rdlong	local01, fp
12248     08 4E 85 F1 | 	sub	fp, #8
1224c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12250     14 4E 05 A1 |  if_e	add	fp, #20
12254     A7 22 02 AB |  if_e	rdlong	local03, fp
12258     14 4E 85 A1 |  if_e	sub	fp, #20
1225c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12260     24 00 90 5D |  if_ne	jmp	#LR__1429
12264     00 1E 06 F6 | 	mov	local01, #0
12268     A7 20 02 FB | 	rdlong	local02, fp
1226c     0C 4E 05 F1 | 	add	fp, #12
12270     A7 22 02 FB | 	rdlong	local03, fp
12274     0C 4E 85 F1 | 	sub	fp, #12
12278     11 21 1A F2 | 	cmp	local02, local03 wcz
1227c     01 1E 66 E6 |  if_be	neg	local01, #1
12280     A7 1E 62 FC | 	wrlong	local01, fp
12284     10 01 90 FD | 	jmp	#LR__1433
12288                 | LR__1429
12288                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12288     08 4E 05 F1 | 	add	fp, #8
1228c     A7 1E 02 FB | 	rdlong	local01, fp
12290     08 4E 85 F1 | 	sub	fp, #8
12294     2B 1E 0E F2 | 	cmp	local01, #43 wz
12298     14 4E 05 A1 |  if_e	add	fp, #20
1229c     A7 22 02 AB |  if_e	rdlong	local03, fp
122a0     14 4E 85 A1 |  if_e	sub	fp, #20
122a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
122a8     30 00 90 5D |  if_ne	jmp	#LR__1430
122ac     00 1E 06 F6 | 	mov	local01, #0
122b0     A7 12 02 FB | 	rdlong	arg01, fp
122b4     B4 BD BF FD | 	call	#_convertstring
122b8     FD 12 02 F6 | 	mov	arg01, result1
122bc     0C 4E 05 F1 | 	add	fp, #12
122c0     A7 14 02 FB | 	rdlong	arg02, fp
122c4     0C 4E 85 F1 | 	sub	fp, #12
122c8     38 A0 B0 FD | 	call	#__system___string_cmp
122cc     01 FA 55 F2 | 	cmps	result1, #1 wc
122d0     00 1E 26 C6 |  if_b	not	local01, #0
122d4     A7 1E 62 FC | 	wrlong	local01, fp
122d8     BC 00 90 FD | 	jmp	#LR__1433
122dc                 | LR__1430
122dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
122dc     08 4E 05 F1 | 	add	fp, #8
122e0     A7 1E 02 FB | 	rdlong	local01, fp
122e4     08 4E 85 F1 | 	sub	fp, #8
122e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
122ec     14 4E 05 A1 |  if_e	add	fp, #20
122f0     A7 22 02 AB |  if_e	rdlong	local03, fp
122f4     14 4E 85 A1 |  if_e	sub	fp, #20
122f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
122fc     34 00 90 5D |  if_ne	jmp	#LR__1431
12300     00 1E 06 F6 | 	mov	local01, #0
12304     A7 20 02 FB | 	rdlong	local02, fp
12308     0C 4E 05 F1 | 	add	fp, #12
1230c     A7 12 02 FB | 	rdlong	arg01, fp
12310     0C 4E 85 F1 | 	sub	fp, #12
12314     54 BD BF FD | 	call	#_convertstring
12318     FD 14 02 F6 | 	mov	arg02, result1
1231c     10 13 02 F6 | 	mov	arg01, local02
12320     E0 9F B0 FD | 	call	#__system___string_cmp
12324     01 FA 55 F2 | 	cmps	result1, #1 wc
12328     00 1E 26 C6 |  if_b	not	local01, #0
1232c     A7 1E 62 FC | 	wrlong	local01, fp
12330     64 00 90 FD | 	jmp	#LR__1433
12334                 | LR__1431
12334                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
12334     08 4E 05 F1 | 	add	fp, #8
12338     A7 1E 02 FB | 	rdlong	local01, fp
1233c     08 4E 85 F1 | 	sub	fp, #8
12340     2B 1E 0E F2 | 	cmp	local01, #43 wz
12344     14 4E 05 A1 |  if_e	add	fp, #20
12348     A7 22 02 AB |  if_e	rdlong	local03, fp
1234c     14 4E 85 A1 |  if_e	sub	fp, #20
12350     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12354     3C 00 90 5D |  if_ne	jmp	#LR__1432
12358     00 1E 06 F6 | 	mov	local01, #0
1235c     A7 12 02 FB | 	rdlong	arg01, fp
12360     08 BD BF FD | 	call	#_convertstring
12364     FD 20 02 F6 | 	mov	local02, result1
12368     0C 4E 05 F1 | 	add	fp, #12
1236c     A7 12 02 FB | 	rdlong	arg01, fp
12370     0C 4E 85 F1 | 	sub	fp, #12
12374     F4 BC BF FD | 	call	#_convertstring
12378     FD 14 02 F6 | 	mov	arg02, result1
1237c     10 13 02 F6 | 	mov	arg01, local02
12380     80 9F B0 FD | 	call	#__system___string_cmp
12384     01 FA 55 F2 | 	cmps	result1, #1 wc
12388     00 1E 26 C6 |  if_b	not	local01, #0
1238c     A7 1E 62 FC | 	wrlong	local01, fp
12390     04 00 90 FD | 	jmp	#LR__1433
12394                 | LR__1432
12394     A7 00 68 FC | 	wrlong	#0, fp
12398                 | LR__1433
12398     08 4E 05 F1 | 	add	fp, #8
1239c     A7 38 68 FC | 	wrlong	#28, fp
123a0     08 4E 85 F1 | 	sub	fp, #8
123a4     A7 12 02 F6 | 	mov	arg01, fp
123a8     B4 7D BF FD | 	call	#_push
123ac     A7 F0 03 F6 | 	mov	ptra, fp
123b0     B2 00 A0 FD | 	call	#popregs_
123b4                 | _do_le_ret
123b4     2D 00 64 FD | 	ret
123b8                 | 
123b8                 | ' 
123b8                 | ' 
123b8                 | ' sub do_ne
123b8                 | _do_ne
123b8     05 4A 05 F6 | 	mov	COUNT_, #5
123bc     A8 00 A0 FD | 	call	#pushregs_
123c0     18 F0 07 F1 | 	add	ptra, #24
123c4     00 7D BF FD | 	call	#_pop
123c8     FD 1E 02 F6 | 	mov	local01, result1
123cc     FE 20 02 F6 | 	mov	local02, result2
123d0     FF 22 02 F6 | 	mov	local03, result3
123d4     0C 4E 05 F1 | 	add	fp, #12
123d8     A7 1E 62 FC | 	wrlong	local01, fp
123dc     04 4E 05 F1 | 	add	fp, #4
123e0     A7 20 62 FC | 	wrlong	local02, fp
123e4     04 4E 05 F1 | 	add	fp, #4
123e8     A7 22 62 FC | 	wrlong	local03, fp
123ec     14 4E 85 F1 | 	sub	fp, #20
123f0     D4 7C BF FD | 	call	#_pop
123f4     FF 22 02 F6 | 	mov	local03, result3
123f8     A7 FA 61 FC | 	wrlong	result1, fp
123fc     04 4E 05 F1 | 	add	fp, #4
12400     A7 FC 61 FC | 	wrlong	result2, fp
12404     04 4E 05 F1 | 	add	fp, #4
12408     A7 22 62 FC | 	wrlong	local03, fp
1240c                 | ' t2=pop()
1240c                 | ' t1=pop()
1240c                 | ' 
1240c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1240c     08 4E 85 F1 | 	sub	fp, #8
12410     1F 22 0E F2 | 	cmp	local03, #31 wz
12414     14 4E 05 A1 |  if_e	add	fp, #20
12418     A7 24 02 AB |  if_e	rdlong	local04, fp
1241c     14 4E 85 A1 |  if_e	sub	fp, #20
12420     12 23 02 A6 |  if_e	mov	local03, local04
12424     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12428     28 00 90 5D |  if_ne	jmp	#LR__1440
1242c     00 1E 06 F6 | 	mov	local01, #0
12430     A7 12 02 FB | 	rdlong	arg01, fp
12434     0C 4E 05 F1 | 	add	fp, #12
12438     A7 14 02 FB | 	rdlong	arg02, fp
1243c     0C 4E 85 F1 | 	sub	fp, #12
12440     C0 9E B0 FD | 	call	#__system___string_cmp
12444     00 FA 0D F2 | 	cmp	result1, #0 wz
12448     00 1E 26 56 |  if_ne	not	local01, #0
1244c     A7 1E 62 FC | 	wrlong	local01, fp
12450     1C 04 90 FD | 	jmp	#LR__1453
12454                 | LR__1440
12454                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
12454     08 4E 05 F1 | 	add	fp, #8
12458     A7 1E 02 FB | 	rdlong	local01, fp
1245c     08 4E 85 F1 | 	sub	fp, #8
12460     1E 1E 0E F2 | 	cmp	local01, #30 wz
12464     14 4E 05 A1 |  if_e	add	fp, #20
12468     A7 24 02 AB |  if_e	rdlong	local04, fp
1246c     14 4E 85 A1 |  if_e	sub	fp, #20
12470     12 23 02 A6 |  if_e	mov	local03, local04
12474     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12478     2C 00 90 5D |  if_ne	jmp	#LR__1441
1247c     00 1E 06 F6 | 	mov	local01, #0
12480     A7 12 02 FB | 	rdlong	arg01, fp
12484     0C 4E 05 F1 | 	add	fp, #12
12488     A7 14 02 FB | 	rdlong	arg02, fp
1248c     0C 4E 85 F1 | 	sub	fp, #12
12490     01 16 06 F6 | 	mov	arg03, #1
12494     F4 CD B0 FD | 	call	#__system___float_cmp
12498     00 FA 0D F2 | 	cmp	result1, #0 wz
1249c     00 1E 26 56 |  if_ne	not	local01, #0
124a0     A7 1E 62 FC | 	wrlong	local01, fp
124a4     C8 03 90 FD | 	jmp	#LR__1453
124a8                 | LR__1441
124a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
124a8     08 4E 05 F1 | 	add	fp, #8
124ac     A7 1E 02 FB | 	rdlong	local01, fp
124b0     08 4E 85 F1 | 	sub	fp, #8
124b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
124b8     14 4E 05 A1 |  if_e	add	fp, #20
124bc     A7 24 02 AB |  if_e	rdlong	local04, fp
124c0     14 4E 85 A1 |  if_e	sub	fp, #20
124c4     12 23 02 A6 |  if_e	mov	local03, local04
124c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
124cc     48 00 90 5D |  if_ne	jmp	#LR__1442
124d0     00 1E 06 F6 | 	mov	local01, #0
124d4     A7 20 02 FB | 	rdlong	local02, fp
124d8     0C 4E 05 F1 | 	add	fp, #12
124dc     A7 12 02 FB | 	rdlong	arg01, fp
124e0     0C 4E 85 F1 | 	sub	fp, #12
124e4     09 13 52 F6 | 	abs	arg01, arg01 wc
124e8     1F 26 C6 C9 |  if_b	decod	local05, #31
124ec     00 26 06 36 |  if_ae	mov	local05, #0
124f0     60 C5 B0 FD | 	call	#__system___float_fromuns
124f4     13 FB 61 F5 | 	xor	result1, local05
124f8     FD 14 02 F6 | 	mov	arg02, result1
124fc     10 13 02 F6 | 	mov	arg01, local02
12500     01 16 06 F6 | 	mov	arg03, #1
12504     84 CD B0 FD | 	call	#__system___float_cmp
12508     00 FA 0D F2 | 	cmp	result1, #0 wz
1250c     00 1E 26 56 |  if_ne	not	local01, #0
12510     A7 1E 62 FC | 	wrlong	local01, fp
12514     58 03 90 FD | 	jmp	#LR__1453
12518                 | LR__1442
12518                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
12518     08 4E 05 F1 | 	add	fp, #8
1251c     A7 1E 02 FB | 	rdlong	local01, fp
12520     08 4E 85 F1 | 	sub	fp, #8
12524     1E 1E 0E F2 | 	cmp	local01, #30 wz
12528     14 4E 05 A1 |  if_e	add	fp, #20
1252c     A7 24 02 AB |  if_e	rdlong	local04, fp
12530     14 4E 85 A1 |  if_e	sub	fp, #20
12534     12 23 02 A6 |  if_e	mov	local03, local04
12538     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1253c     38 00 90 5D |  if_ne	jmp	#LR__1443
12540     00 1E 06 F6 | 	mov	local01, #0
12544     A7 20 02 FB | 	rdlong	local02, fp
12548     0C 4E 05 F1 | 	add	fp, #12
1254c     A7 12 02 FB | 	rdlong	arg01, fp
12550     0C 4E 85 F1 | 	sub	fp, #12
12554     FC C4 B0 FD | 	call	#__system___float_fromuns
12558     FD 14 02 F6 | 	mov	arg02, result1
1255c     10 13 02 F6 | 	mov	arg01, local02
12560     01 16 06 F6 | 	mov	arg03, #1
12564     24 CD B0 FD | 	call	#__system___float_cmp
12568     00 FA 0D F2 | 	cmp	result1, #0 wz
1256c     00 1E 26 56 |  if_ne	not	local01, #0
12570     A7 1E 62 FC | 	wrlong	local01, fp
12574     F8 02 90 FD | 	jmp	#LR__1453
12578                 | LR__1443
12578                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
12578     08 4E 05 F1 | 	add	fp, #8
1257c     A7 1E 02 FB | 	rdlong	local01, fp
12580     08 4E 85 F1 | 	sub	fp, #8
12584     1C 1E 0E F2 | 	cmp	local01, #28 wz
12588     14 4E 05 A1 |  if_e	add	fp, #20
1258c     A7 24 02 AB |  if_e	rdlong	local04, fp
12590     14 4E 85 A1 |  if_e	sub	fp, #20
12594     12 23 02 A6 |  if_e	mov	local03, local04
12598     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1259c     44 00 90 5D |  if_ne	jmp	#LR__1444
125a0     00 1E 06 F6 | 	mov	local01, #0
125a4     A7 12 02 FB | 	rdlong	arg01, fp
125a8     09 13 52 F6 | 	abs	arg01, arg01 wc
125ac     1F 26 C6 C9 |  if_b	decod	local05, #31
125b0     00 26 06 36 |  if_ae	mov	local05, #0
125b4     9C C4 B0 FD | 	call	#__system___float_fromuns
125b8     13 FB 61 F5 | 	xor	result1, local05
125bc     FD 12 02 F6 | 	mov	arg01, result1
125c0     0C 4E 05 F1 | 	add	fp, #12
125c4     A7 14 02 FB | 	rdlong	arg02, fp
125c8     0C 4E 85 F1 | 	sub	fp, #12
125cc     01 16 06 F6 | 	mov	arg03, #1
125d0     B8 CC B0 FD | 	call	#__system___float_cmp
125d4     00 FA 0D F2 | 	cmp	result1, #0 wz
125d8     00 1E 26 56 |  if_ne	not	local01, #0
125dc     A7 1E 62 FC | 	wrlong	local01, fp
125e0     8C 02 90 FD | 	jmp	#LR__1453
125e4                 | LR__1444
125e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
125e4     08 4E 05 F1 | 	add	fp, #8
125e8     A7 1E 02 FB | 	rdlong	local01, fp
125ec     08 4E 85 F1 | 	sub	fp, #8
125f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
125f4     14 4E 05 A1 |  if_e	add	fp, #20
125f8     A7 24 02 AB |  if_e	rdlong	local04, fp
125fc     14 4E 85 A1 |  if_e	sub	fp, #20
12600     12 23 02 A6 |  if_e	mov	local03, local04
12604     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12608     24 00 90 5D |  if_ne	jmp	#LR__1445
1260c     00 1E 06 F6 | 	mov	local01, #0
12610     A7 20 02 FB | 	rdlong	local02, fp
12614     0C 4E 05 F1 | 	add	fp, #12
12618     A7 22 02 FB | 	rdlong	local03, fp
1261c     0C 4E 85 F1 | 	sub	fp, #12
12620     11 21 0A F2 | 	cmp	local02, local03 wz
12624     01 1E 66 56 |  if_ne	neg	local01, #1
12628     A7 1E 62 FC | 	wrlong	local01, fp
1262c     40 02 90 FD | 	jmp	#LR__1453
12630                 | LR__1445
12630                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
12630     08 4E 05 F1 | 	add	fp, #8
12634     A7 1E 02 FB | 	rdlong	local01, fp
12638     08 4E 85 F1 | 	sub	fp, #8
1263c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12640     14 4E 05 A1 |  if_e	add	fp, #20
12644     A7 24 02 AB |  if_e	rdlong	local04, fp
12648     14 4E 85 A1 |  if_e	sub	fp, #20
1264c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12650     24 00 90 5D |  if_ne	jmp	#LR__1446
12654     00 1E 06 F6 | 	mov	local01, #0
12658     A7 20 02 FB | 	rdlong	local02, fp
1265c     0C 4E 05 F1 | 	add	fp, #12
12660     A7 22 02 FB | 	rdlong	local03, fp
12664     0C 4E 85 F1 | 	sub	fp, #12
12668     11 21 0A F2 | 	cmp	local02, local03 wz
1266c     01 1E 66 56 |  if_ne	neg	local01, #1
12670     A7 1E 62 FC | 	wrlong	local01, fp
12674     F8 01 90 FD | 	jmp	#LR__1453
12678                 | LR__1446
12678                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
12678     08 4E 05 F1 | 	add	fp, #8
1267c     A7 1E 02 FB | 	rdlong	local01, fp
12680     08 4E 85 F1 | 	sub	fp, #8
12684     1D 1E 0E F2 | 	cmp	local01, #29 wz
12688     14 4E 05 A1 |  if_e	add	fp, #20
1268c     A7 22 02 AB |  if_e	rdlong	local03, fp
12690     14 4E 85 A1 |  if_e	sub	fp, #20
12694     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12698     34 00 90 5D |  if_ne	jmp	#LR__1447
1269c     00 1E 06 F6 | 	mov	local01, #0
126a0     A7 12 02 FB | 	rdlong	arg01, fp
126a4     AC C3 B0 FD | 	call	#__system___float_fromuns
126a8     FD 12 02 F6 | 	mov	arg01, result1
126ac     0C 4E 05 F1 | 	add	fp, #12
126b0     A7 14 02 FB | 	rdlong	arg02, fp
126b4     0C 4E 85 F1 | 	sub	fp, #12
126b8     01 16 06 F6 | 	mov	arg03, #1
126bc     CC CB B0 FD | 	call	#__system___float_cmp
126c0     00 FA 0D F2 | 	cmp	result1, #0 wz
126c4     00 1E 26 56 |  if_ne	not	local01, #0
126c8     A7 1E 62 FC | 	wrlong	local01, fp
126cc     A0 01 90 FD | 	jmp	#LR__1453
126d0                 | LR__1447
126d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
126d0     08 4E 05 F1 | 	add	fp, #8
126d4     A7 1E 02 FB | 	rdlong	local01, fp
126d8     08 4E 85 F1 | 	sub	fp, #8
126dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
126e0     14 4E 05 A1 |  if_e	add	fp, #20
126e4     A7 22 02 AB |  if_e	rdlong	local03, fp
126e8     14 4E 85 A1 |  if_e	sub	fp, #20
126ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
126f0     24 00 90 5D |  if_ne	jmp	#LR__1448
126f4     00 1E 06 F6 | 	mov	local01, #0
126f8     A7 20 02 FB | 	rdlong	local02, fp
126fc     0C 4E 05 F1 | 	add	fp, #12
12700     A7 22 02 FB | 	rdlong	local03, fp
12704     0C 4E 85 F1 | 	sub	fp, #12
12708     11 21 0A F2 | 	cmp	local02, local03 wz
1270c     01 1E 66 56 |  if_ne	neg	local01, #1
12710     A7 1E 62 FC | 	wrlong	local01, fp
12714     58 01 90 FD | 	jmp	#LR__1453
12718                 | LR__1448
12718                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
12718     08 4E 05 F1 | 	add	fp, #8
1271c     A7 1E 02 FB | 	rdlong	local01, fp
12720     08 4E 85 F1 | 	sub	fp, #8
12724     1D 1E 0E F2 | 	cmp	local01, #29 wz
12728     14 4E 05 A1 |  if_e	add	fp, #20
1272c     A7 22 02 AB |  if_e	rdlong	local03, fp
12730     14 4E 85 A1 |  if_e	sub	fp, #20
12734     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12738     24 00 90 5D |  if_ne	jmp	#LR__1449
1273c     00 1E 06 F6 | 	mov	local01, #0
12740     A7 20 02 FB | 	rdlong	local02, fp
12744     0C 4E 05 F1 | 	add	fp, #12
12748     A7 22 02 FB | 	rdlong	local03, fp
1274c     0C 4E 85 F1 | 	sub	fp, #12
12750     11 21 0A F2 | 	cmp	local02, local03 wz
12754     01 1E 66 56 |  if_ne	neg	local01, #1
12758     A7 1E 62 FC | 	wrlong	local01, fp
1275c     10 01 90 FD | 	jmp	#LR__1453
12760                 | LR__1449
12760                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
12760     08 4E 05 F1 | 	add	fp, #8
12764     A7 1E 02 FB | 	rdlong	local01, fp
12768     08 4E 85 F1 | 	sub	fp, #8
1276c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12770     14 4E 05 A1 |  if_e	add	fp, #20
12774     A7 22 02 AB |  if_e	rdlong	local03, fp
12778     14 4E 85 A1 |  if_e	sub	fp, #20
1277c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12780     30 00 90 5D |  if_ne	jmp	#LR__1450
12784     00 1E 06 F6 | 	mov	local01, #0
12788     A7 12 02 FB | 	rdlong	arg01, fp
1278c     DC B8 BF FD | 	call	#_convertstring
12790     FD 12 02 F6 | 	mov	arg01, result1
12794     0C 4E 05 F1 | 	add	fp, #12
12798     A7 14 02 FB | 	rdlong	arg02, fp
1279c     0C 4E 85 F1 | 	sub	fp, #12
127a0     60 9B B0 FD | 	call	#__system___string_cmp
127a4     00 FA 0D F2 | 	cmp	result1, #0 wz
127a8     00 1E 26 56 |  if_ne	not	local01, #0
127ac     A7 1E 62 FC | 	wrlong	local01, fp
127b0     BC 00 90 FD | 	jmp	#LR__1453
127b4                 | LR__1450
127b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
127b4     08 4E 05 F1 | 	add	fp, #8
127b8     A7 1E 02 FB | 	rdlong	local01, fp
127bc     08 4E 85 F1 | 	sub	fp, #8
127c0     1F 1E 0E F2 | 	cmp	local01, #31 wz
127c4     14 4E 05 A1 |  if_e	add	fp, #20
127c8     A7 22 02 AB |  if_e	rdlong	local03, fp
127cc     14 4E 85 A1 |  if_e	sub	fp, #20
127d0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
127d4     34 00 90 5D |  if_ne	jmp	#LR__1451
127d8     00 1E 06 F6 | 	mov	local01, #0
127dc     A7 20 02 FB | 	rdlong	local02, fp
127e0     0C 4E 05 F1 | 	add	fp, #12
127e4     A7 12 02 FB | 	rdlong	arg01, fp
127e8     0C 4E 85 F1 | 	sub	fp, #12
127ec     7C B8 BF FD | 	call	#_convertstring
127f0     FD 14 02 F6 | 	mov	arg02, result1
127f4     10 13 02 F6 | 	mov	arg01, local02
127f8     08 9B B0 FD | 	call	#__system___string_cmp
127fc     00 FA 0D F2 | 	cmp	result1, #0 wz
12800     00 1E 26 56 |  if_ne	not	local01, #0
12804     A7 1E 62 FC | 	wrlong	local01, fp
12808     64 00 90 FD | 	jmp	#LR__1453
1280c                 | LR__1451
1280c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1280c     08 4E 05 F1 | 	add	fp, #8
12810     A7 1E 02 FB | 	rdlong	local01, fp
12814     08 4E 85 F1 | 	sub	fp, #8
12818     2B 1E 0E F2 | 	cmp	local01, #43 wz
1281c     14 4E 05 A1 |  if_e	add	fp, #20
12820     A7 22 02 AB |  if_e	rdlong	local03, fp
12824     14 4E 85 A1 |  if_e	sub	fp, #20
12828     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1282c     3C 00 90 5D |  if_ne	jmp	#LR__1452
12830     00 1E 06 F6 | 	mov	local01, #0
12834     A7 12 02 FB | 	rdlong	arg01, fp
12838     30 B8 BF FD | 	call	#_convertstring
1283c     FD 20 02 F6 | 	mov	local02, result1
12840     0C 4E 05 F1 | 	add	fp, #12
12844     A7 12 02 FB | 	rdlong	arg01, fp
12848     0C 4E 85 F1 | 	sub	fp, #12
1284c     1C B8 BF FD | 	call	#_convertstring
12850     FD 14 02 F6 | 	mov	arg02, result1
12854     10 13 02 F6 | 	mov	arg01, local02
12858     A8 9A B0 FD | 	call	#__system___string_cmp
1285c     00 FA 0D F2 | 	cmp	result1, #0 wz
12860     00 1E 26 56 |  if_ne	not	local01, #0
12864     A7 1E 62 FC | 	wrlong	local01, fp
12868     04 00 90 FD | 	jmp	#LR__1453
1286c                 | LR__1452
1286c     A7 00 68 FC | 	wrlong	#0, fp
12870                 | LR__1453
12870     08 4E 05 F1 | 	add	fp, #8
12874     A7 38 68 FC | 	wrlong	#28, fp
12878     08 4E 85 F1 | 	sub	fp, #8
1287c     A7 12 02 F6 | 	mov	arg01, fp
12880     DC 78 BF FD | 	call	#_push
12884     A7 F0 03 F6 | 	mov	ptra, fp
12888     B2 00 A0 FD | 	call	#popregs_
1288c                 | _do_ne_ret
1288c     2D 00 64 FD | 	ret
12890                 | 
12890                 | ' 
12890                 | ' 
12890                 | ' 
12890                 | ' ' -------------------   convert a variable on the top of stack to integer
12890                 | ' 
12890                 | ' sub do_converttoint
12890                 | _do_converttoint
12890     02 4A 05 F6 | 	mov	COUNT_, #2
12894     A8 00 A0 FD | 	call	#pushregs_
12898     18 F0 07 F1 | 	add	ptra, #24
1289c     28 78 BF FD | 	call	#_pop
128a0     FE 1E 02 F6 | 	mov	local01, result2
128a4     FF 20 02 F6 | 	mov	local02, result3
128a8     A7 FA 61 FC | 	wrlong	result1, fp
128ac     04 4E 05 F1 | 	add	fp, #4
128b0     A7 1E 62 FC | 	wrlong	local01, fp
128b4     04 4E 05 F1 | 	add	fp, #4
128b8     A7 20 62 FC | 	wrlong	local02, fp
128bc                 | ' t1=pop() 
128bc                 | ' select case t1.result_type
128bc     08 4E 85 F1 | 	sub	fp, #8
128c0     1C 20 0E F2 | 	cmp	local02, #28 wz
128c4     2C 00 90 AD |  if_e	jmp	#LR__1460
128c8     1D 20 0E F2 | 	cmp	local02, #29 wz
128cc     40 00 90 AD |  if_e	jmp	#LR__1461
128d0     1E 20 0E F2 | 	cmp	local02, #30 wz
128d4     54 00 90 AD |  if_e	jmp	#LR__1462
128d8     1F 20 0E F2 | 	cmp	local02, #31 wz
128dc     70 00 90 AD |  if_e	jmp	#LR__1463
128e0     2B 20 0E F2 | 	cmp	local02, #43 wz
128e4     94 00 90 AD |  if_e	jmp	#LR__1464
128e8     FF 20 0E F2 | 	cmp	local02, #255 wz
128ec     C0 00 90 AD |  if_e	jmp	#LR__1465
128f0     DC 00 90 FD | 	jmp	#LR__1466
128f4                 | LR__1460
128f4     A7 20 02 FB | 	rdlong	local02, fp
128f8     0C 4E 05 F1 | 	add	fp, #12
128fc     A7 20 62 FC | 	wrlong	local02, fp
12900     04 4E 05 F1 | 	add	fp, #4
12904     A7 38 68 FC | 	wrlong	#28, fp
12908     10 4E 85 F1 | 	sub	fp, #16
1290c     D4 00 90 FD | 	jmp	#LR__1467
12910                 | LR__1461
12910     A7 20 02 FB | 	rdlong	local02, fp
12914     0C 4E 05 F1 | 	add	fp, #12
12918     A7 20 62 FC | 	wrlong	local02, fp
1291c     04 4E 05 F1 | 	add	fp, #4
12920     A7 38 68 FC | 	wrlong	#28, fp
12924     10 4E 85 F1 | 	sub	fp, #16
12928     B8 00 90 FD | 	jmp	#LR__1467
1292c                 | LR__1462
1292c     A7 12 02 FB | 	rdlong	arg01, fp
12930     01 14 06 F6 | 	mov	arg02, #1
12934     E8 C9 B0 FD | 	call	#__system___float_tointeger
12938     0C 4E 05 F1 | 	add	fp, #12
1293c     A7 FA 61 FC | 	wrlong	result1, fp
12940     04 4E 05 F1 | 	add	fp, #4
12944     A7 38 68 FC | 	wrlong	#28, fp
12948     10 4E 85 F1 | 	sub	fp, #16
1294c     94 00 90 FD | 	jmp	#LR__1467
12950                 | LR__1463
12950     A7 12 02 FB | 	rdlong	arg01, fp
12954     E8 CC B0 FD | 	call	#__system____builtin_atof
12958     FD 12 02 F6 | 	mov	arg01, result1
1295c     00 14 06 F6 | 	mov	arg02, #0
12960     BC C9 B0 FD | 	call	#__system___float_tointeger
12964     0C 4E 05 F1 | 	add	fp, #12
12968     A7 FA 61 FC | 	wrlong	result1, fp
1296c     04 4E 05 F1 | 	add	fp, #4
12970     A7 38 68 FC | 	wrlong	#28, fp
12974     10 4E 85 F1 | 	sub	fp, #16
12978     68 00 90 FD | 	jmp	#LR__1467
1297c                 | LR__1464
1297c     A7 12 02 FB | 	rdlong	arg01, fp
12980     E8 B6 BF FD | 	call	#_convertstring
12984     FD 12 02 F6 | 	mov	arg01, result1
12988     B4 CC B0 FD | 	call	#__system____builtin_atof
1298c     FD 12 02 F6 | 	mov	arg01, result1
12990     00 14 06 F6 | 	mov	arg02, #0
12994     88 C9 B0 FD | 	call	#__system___float_tointeger
12998     0C 4E 05 F1 | 	add	fp, #12
1299c     A7 FA 61 FC | 	wrlong	result1, fp
129a0     04 4E 05 F1 | 	add	fp, #4
129a4     A7 38 68 FC | 	wrlong	#28, fp
129a8     10 4E 85 F1 | 	sub	fp, #16
129ac     34 00 90 FD | 	jmp	#LR__1467
129b0                 | LR__1465
129b0     0C 4E 05 F1 | 	add	fp, #12
129b4     A7 00 68 FC | 	wrlong	#0, fp
129b8     0C 4E 85 F1 | 	sub	fp, #12
129bc     A7 20 02 FB | 	rdlong	local02, fp
129c0     10 4E 05 F1 | 	add	fp, #16
129c4     A7 20 62 FC | 	wrlong	local02, fp
129c8     10 4E 85 F1 | 	sub	fp, #16
129cc     14 00 90 FD | 	jmp	#LR__1467
129d0                 | LR__1466
129d0     0C 4E 05 F1 | 	add	fp, #12
129d4     A7 00 68 FC | 	wrlong	#0, fp
129d8     04 4E 05 F1 | 	add	fp, #4
129dc     A7 02 68 FC | 	wrlong	#1, fp
129e0     10 4E 85 F1 | 	sub	fp, #16
129e4                 | LR__1467
129e4     0C 4E 05 F1 | 	add	fp, #12
129e8     A7 20 02 FB | 	rdlong	local02, fp
129ec     0C 4E 85 F1 | 	sub	fp, #12
129f0     A7 20 62 FC | 	wrlong	local02, fp
129f4     10 4E 05 F1 | 	add	fp, #16
129f8     A7 20 02 FB | 	rdlong	local02, fp
129fc     08 4E 85 F1 | 	sub	fp, #8
12a00     A7 20 62 FC | 	wrlong	local02, fp
12a04     08 4E 85 F1 | 	sub	fp, #8
12a08     A7 12 02 F6 | 	mov	arg01, fp
12a0c     50 77 BF FD | 	call	#_push
12a10     A7 F0 03 F6 | 	mov	ptra, fp
12a14     B2 00 A0 FD | 	call	#popregs_
12a18                 | _do_converttoint_ret
12a18     2D 00 64 FD | 	ret
12a1c                 | 
12a1c                 | ' 
12a1c                 | ' function converttoint (t1 as expr_result) as integer
12a1c                 | _converttoint
12a1c     02 4A 05 F6 | 	mov	COUNT_, #2
12a20     A8 00 A0 FD | 	call	#pushregs_
12a24     09 1F 02 F6 | 	mov	local01, arg01
12a28                 | ' 
12a28                 | ' select case t1.result_type
12a28     08 1E 06 F1 | 	add	local01, #8
12a2c     0F 21 02 FB | 	rdlong	local02, local01
12a30     08 1E 86 F1 | 	sub	local01, #8
12a34     1C 20 0E F2 | 	cmp	local02, #28 wz
12a38     24 00 90 AD |  if_e	jmp	#LR__1470
12a3c     1D 20 0E F2 | 	cmp	local02, #29 wz
12a40     24 00 90 AD |  if_e	jmp	#LR__1471
12a44     1E 20 0E F2 | 	cmp	local02, #30 wz
12a48     24 00 90 AD |  if_e	jmp	#LR__1472
12a4c     1F 20 0E F2 | 	cmp	local02, #31 wz
12a50     2C 00 90 AD |  if_e	jmp	#LR__1473
12a54     2B 20 0E F2 | 	cmp	local02, #43 wz
12a58     3C 00 90 AD |  if_e	jmp	#LR__1474
12a5c     58 00 90 FD | 	jmp	#LR__1475
12a60                 | LR__1470
12a60     0F FB 01 FB | 	rdlong	result1, local01
12a64     54 00 90 FD | 	jmp	#LR__1476
12a68                 | LR__1471
12a68     0F FB 01 FB | 	rdlong	result1, local01
12a6c     4C 00 90 FD | 	jmp	#LR__1476
12a70                 | LR__1472
12a70     0F 13 02 FB | 	rdlong	arg01, local01
12a74     01 14 06 F6 | 	mov	arg02, #1
12a78     A4 C8 B0 FD | 	call	#__system___float_tointeger
12a7c     3C 00 90 FD | 	jmp	#LR__1476
12a80                 | LR__1473
12a80     0F 13 02 FB | 	rdlong	arg01, local01
12a84     B8 CB B0 FD | 	call	#__system____builtin_atof
12a88     FD 12 02 F6 | 	mov	arg01, result1
12a8c     00 14 06 F6 | 	mov	arg02, #0
12a90     8C C8 B0 FD | 	call	#__system___float_tointeger
12a94     24 00 90 FD | 	jmp	#LR__1476
12a98                 | LR__1474
12a98     0F 13 02 FB | 	rdlong	arg01, local01
12a9c     CC B5 BF FD | 	call	#_convertstring
12aa0     FD 12 02 F6 | 	mov	arg01, result1
12aa4     98 CB B0 FD | 	call	#__system____builtin_atof
12aa8     FD 12 02 F6 | 	mov	arg01, result1
12aac     00 14 06 F6 | 	mov	arg02, #0
12ab0     6C C8 B0 FD | 	call	#__system___float_tointeger
12ab4     04 00 90 FD | 	jmp	#LR__1476
12ab8                 | LR__1475
12ab8     00 FA 05 F6 | 	mov	result1, #0
12abc                 | LR__1476
12abc     A7 F0 03 F6 | 	mov	ptra, fp
12ac0     B2 00 A0 FD | 	call	#popregs_
12ac4                 | _converttoint_ret
12ac4     2D 00 64 FD | 	ret
12ac8                 | 
12ac8                 | ' 
12ac8                 | ' function converttofloat (t1 as expr_result) as single
12ac8                 | _converttofloat
12ac8     03 4A 05 F6 | 	mov	COUNT_, #3
12acc     A8 00 A0 FD | 	call	#pushregs_
12ad0     09 1F 02 F6 | 	mov	local01, arg01
12ad4                 | ' 
12ad4                 | ' select case t1.result_type
12ad4     08 1E 06 F1 | 	add	local01, #8
12ad8     0F 21 02 FB | 	rdlong	local02, local01
12adc     08 1E 86 F1 | 	sub	local01, #8
12ae0     1C 20 0E F2 | 	cmp	local02, #28 wz
12ae4     24 00 90 AD |  if_e	jmp	#LR__1480
12ae8     1D 20 0E F2 | 	cmp	local02, #29 wz
12aec     38 00 90 AD |  if_e	jmp	#LR__1481
12af0     1E 20 0E F2 | 	cmp	local02, #30 wz
12af4     3C 00 90 AD |  if_e	jmp	#LR__1482
12af8     1F 20 0E F2 | 	cmp	local02, #31 wz
12afc     3C 00 90 AD |  if_e	jmp	#LR__1483
12b00     2B 20 0E F2 | 	cmp	local02, #43 wz
12b04     40 00 90 AD |  if_e	jmp	#LR__1484
12b08     50 00 90 FD | 	jmp	#LR__1485
12b0c                 | LR__1480
12b0c     0F 13 02 FB | 	rdlong	arg01, local01
12b10     09 13 52 F6 | 	abs	arg01, arg01 wc
12b14     1F 22 C6 C9 |  if_b	decod	local03, #31
12b18     00 22 06 36 |  if_ae	mov	local03, #0
12b1c     34 BF B0 FD | 	call	#__system___float_fromuns
12b20     11 FB 61 F5 | 	xor	result1, local03
12b24     38 00 90 FD | 	jmp	#LR__1486
12b28                 | LR__1481
12b28     0F 13 02 FB | 	rdlong	arg01, local01
12b2c     24 BF B0 FD | 	call	#__system___float_fromuns
12b30     2C 00 90 FD | 	jmp	#LR__1486
12b34                 | LR__1482
12b34     0F FB 01 FB | 	rdlong	result1, local01
12b38     24 00 90 FD | 	jmp	#LR__1486
12b3c                 | LR__1483
12b3c     0F 13 02 FB | 	rdlong	arg01, local01
12b40     FC CA B0 FD | 	call	#__system____builtin_atof
12b44     18 00 90 FD | 	jmp	#LR__1486
12b48                 | LR__1484
12b48     0F 13 02 FB | 	rdlong	arg01, local01
12b4c     1C B5 BF FD | 	call	#_convertstring
12b50     FD 12 02 F6 | 	mov	arg01, result1
12b54     E8 CA B0 FD | 	call	#__system____builtin_atof
12b58     04 00 90 FD | 	jmp	#LR__1486
12b5c                 | LR__1485
12b5c     00 FA 05 F6 | 	mov	result1, #0
12b60                 | LR__1486
12b60     A7 F0 03 F6 | 	mov	ptra, fp
12b64     B2 00 A0 FD | 	call	#popregs_
12b68                 | _converttofloat_ret
12b68     2D 00 64 FD | 	ret
12b6c                 | 
12b6c                 | ' 
12b6c                 | ' sub do_rnd
12b6c                 | _do_rnd
12b6c     01 4A 05 F6 | 	mov	COUNT_, #1
12b70     A8 00 A0 FD | 	call	#pushregs_
12b74     10 F0 07 F1 | 	add	ptra, #16
12b78     6A 00 00 FF 
12b7c     64 E4 05 F1 | 	add	objptr, ##54372
12b80     F2 1E 02 FB | 	rdlong	local01, objptr
12b84     0F 17 02 F6 | 	mov	arg03, local01
12b88     01 16 66 F0 | 	shl	arg03, #1
12b8c     0F 17 02 F1 | 	add	arg03, local01
12b90     02 16 66 F0 | 	shl	arg03, #2
12b94     03 00 00 FF 
12b98     04 E4 85 F1 | 	sub	objptr, ##1540
12b9c     F2 16 02 F1 | 	add	arg03, objptr
12ba0     0B 17 02 FB | 	rdlong	arg03, arg03
12ba4     0C 4E 05 F1 | 	add	fp, #12
12ba8     A7 16 62 FC | 	wrlong	arg03, fp
12bac                 | ' 
12bac                 | ' numpar=compiledline(lineptr_e).result.uresult
12bac                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
12bac     0C 4E 85 F1 | 	sub	fp, #12
12bb0     02 16 16 F2 | 	cmp	arg03, #2 wc
12bb4     67 00 00 FF 
12bb8     60 E4 85 F1 | 	sub	objptr, ##52832
12bbc     3C 00 90 CD |  if_b	jmp	#LR__1490
12bc0     00 12 06 F6 | 	mov	arg01, #0
12bc4     A4 F0 B0 FD | 	call	#__system___getiolock_0474
12bc8     FD 12 02 F6 | 	mov	arg01, result1
12bcc     0C 97 B0 FD | 	call	#__system___lockmem
12bd0     5F 01 00 FF 
12bd4     E7 14 06 F6 | 	mov	arg02, ##@LR__4937
12bd8     00 12 06 F6 | 	mov	arg01, #0
12bdc     00 16 06 F6 | 	mov	arg03, #0
12be0     FC A3 B0 FD | 	call	#__system___basic_print_string
12be4     00 12 06 F6 | 	mov	arg01, #0
12be8     80 F0 B0 FD | 	call	#__system___getiolock_0474
12bec     FD 00 68 FC | 	wrlong	#0, result1
12bf0     27 12 06 F6 | 	mov	arg01, #39
12bf4     60 5F B0 FD | 	call	#_printerror
12bf8     2C 01 90 FD | 	jmp	#LR__1497
12bfc                 | LR__1490
12bfc                 | ' if numpar=0 then
12bfc     0C 4E 05 F1 | 	add	fp, #12
12c00     A7 FE 09 FB | 	rdlong	result3, fp wz
12c04     0C 4E 85 F1 | 	sub	fp, #12
12c08     20 00 90 5D |  if_ne	jmp	#LR__1491
12c0c     08 4E 05 F1 | 	add	fp, #8
12c10     A7 3A 68 FC | 	wrlong	#29, fp
12c14     08 4E 85 F1 | 	sub	fp, #8
12c18     1B FA 61 FD | 	getrnd	result1
12c1c     A7 FA 61 FC | 	wrlong	result1, fp
12c20     A7 12 02 F6 | 	mov	arg01, fp
12c24     38 75 BF FD | 	call	#_push
12c28     FC 00 90 FD | 	jmp	#LR__1496
12c2c                 | LR__1491
12c2c     98 74 BF FD | 	call	#_pop
12c30     A7 FA 61 FC | 	wrlong	result1, fp
12c34     04 4E 05 F1 | 	add	fp, #4
12c38     A7 FC 61 FC | 	wrlong	result2, fp
12c3c     04 4E 05 F1 | 	add	fp, #4
12c40     A7 FE 61 FC | 	wrlong	result3, fp
12c44                 | '   t1=pop()
12c44                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
12c44     08 4E 85 F1 | 	sub	fp, #8
12c48     1C FE 0D F2 | 	cmp	result3, #28 wz
12c4c     08 4E 05 51 |  if_ne	add	fp, #8
12c50     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12c54     08 4E 85 51 |  if_ne	sub	fp, #8
12c58     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
12c5c     2C 00 90 5D |  if_ne	jmp	#LR__1492
12c60     1B FA 61 FD | 	getrnd	result1
12c64     A7 1E 02 FB | 	rdlong	local01, fp
12c68     0F FB 11 FD | 	qdiv	result1, local01
12c6c     A7 12 02 F6 | 	mov	arg01, fp
12c70     19 1E 62 FD | 	getqy	local01
12c74     A7 1E 62 FC | 	wrlong	local01, fp
12c78     08 4E 05 F1 | 	add	fp, #8
12c7c     A7 3A 68 FC | 	wrlong	#29, fp
12c80     08 4E 85 F1 | 	sub	fp, #8
12c84     D8 74 BF FD | 	call	#_push
12c88     9C 00 90 FD | 	jmp	#LR__1495
12c8c                 | LR__1492
12c8c     08 4E 05 F1 | 	add	fp, #8
12c90     A7 1E 02 FB | 	rdlong	local01, fp
12c94     08 4E 85 F1 | 	sub	fp, #8
12c98     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c9c     48 00 90 5D |  if_ne	jmp	#LR__1493
12ca0     A7 12 02 FB | 	rdlong	arg01, fp
12ca4     00 C0 24 FF 
12ca8     00 14 06 F6 | 	mov	arg02, ##1233125376
12cac     AC C3 B0 FD | 	call	#__system___float_div
12cb0     FD 1E 02 F6 | 	mov	local01, result1
12cb4     1B 12 62 FD | 	getrnd	arg01
12cb8     74 13 06 F4 | 	bitl	arg01, #372
12cbc     94 BD B0 FD | 	call	#__system___float_fromuns
12cc0     FD 14 02 F6 | 	mov	arg02, result1
12cc4     0F 13 02 F6 | 	mov	arg01, local01
12cc8     8C C1 B0 FD | 	call	#__system___float_mul
12ccc     A7 FA 61 FC | 	wrlong	result1, fp
12cd0     08 4E 05 F1 | 	add	fp, #8
12cd4     A7 3C 68 FC | 	wrlong	#30, fp
12cd8     08 4E 85 F1 | 	sub	fp, #8
12cdc     A7 12 02 F6 | 	mov	arg01, fp
12ce0     7C 74 BF FD | 	call	#_push
12ce4     40 00 90 FD | 	jmp	#LR__1494
12ce8                 | LR__1493
12ce8                 | '     print "rnd: "; : printerror(40) 
12ce8     00 12 06 F6 | 	mov	arg01, #0
12cec     7C EF B0 FD | 	call	#__system___getiolock_0474
12cf0     FD 12 02 F6 | 	mov	arg01, result1
12cf4     E4 95 B0 FD | 	call	#__system___lockmem
12cf8     5F 01 00 FF 
12cfc     ED 14 06 F6 | 	mov	arg02, ##@LR__4938
12d00     00 12 06 F6 | 	mov	arg01, #0
12d04     00 16 06 F6 | 	mov	arg03, #0
12d08     D4 A2 B0 FD | 	call	#__system___basic_print_string
12d0c     00 12 06 F6 | 	mov	arg01, #0
12d10     58 EF B0 FD | 	call	#__system___getiolock_0474
12d14     FD 00 68 FC | 	wrlong	#0, result1
12d18     28 12 06 F6 | 	mov	arg01, #40
12d1c     38 5E B0 FD | 	call	#_printerror
12d20     A7 12 02 F6 | 	mov	arg01, fp
12d24     38 74 BF FD | 	call	#_push
12d28                 | LR__1494
12d28                 | LR__1495
12d28                 | LR__1496
12d28                 | LR__1497
12d28     A7 F0 03 F6 | 	mov	ptra, fp
12d2c     B2 00 A0 FD | 	call	#popregs_
12d30                 | _do_rnd_ret
12d30     2D 00 64 FD | 	ret
12d34                 | 
12d34                 | ' 
12d34                 | ' sub do_getenvsustain
12d34                 | _do_getenvsustain
12d34     01 4A 05 F6 | 	mov	COUNT_, #1
12d38     A8 00 A0 FD | 	call	#pushregs_
12d3c     10 F0 07 F1 | 	add	ptra, #16
12d40     6A 00 00 FF 
12d44     64 E4 05 F1 | 	add	objptr, ##54372
12d48     F2 1E 02 FB | 	rdlong	local01, objptr
12d4c     0F 17 02 F6 | 	mov	arg03, local01
12d50     01 16 66 F0 | 	shl	arg03, #1
12d54     0F 17 02 F1 | 	add	arg03, local01
12d58     02 16 66 F0 | 	shl	arg03, #2
12d5c     03 00 00 FF 
12d60     04 E4 85 F1 | 	sub	objptr, ##1540
12d64     F2 16 02 F1 | 	add	arg03, objptr
12d68     0B 17 02 FB | 	rdlong	arg03, arg03
12d6c     0C 4E 05 F1 | 	add	fp, #12
12d70     A7 16 62 FC | 	wrlong	arg03, fp
12d74                 | ' 
12d74                 | ' numpar=compiledline(lineptr_e).result.uresult
12d74                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12d74     0C 4E 85 F1 | 	sub	fp, #12
12d78     02 16 16 F2 | 	cmp	arg03, #2 wc
12d7c     67 00 00 FF 
12d80     60 E4 85 F1 | 	sub	objptr, ##52832
12d84     0C 4E 05 C1 |  if_b	add	fp, #12
12d88     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12d8c     0C 4E 85 C1 |  if_b	sub	fp, #12
12d90     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12d94     00 12 06 F6 | 	mov	arg01, #0
12d98     D0 EE B0 FD | 	call	#__system___getiolock_0474
12d9c     FD 12 02 F6 | 	mov	arg01, result1
12da0     38 95 B0 FD | 	call	#__system___lockmem
12da4     5F 01 00 FF 
12da8     F3 14 06 F6 | 	mov	arg02, ##@LR__4939
12dac     00 12 06 F6 | 	mov	arg01, #0
12db0     00 16 06 F6 | 	mov	arg03, #0
12db4     28 A2 B0 FD | 	call	#__system___basic_print_string
12db8     00 12 06 F6 | 	mov	arg01, #0
12dbc     AC EE B0 FD | 	call	#__system___getiolock_0474
12dc0     FD 00 68 FC | 	wrlong	#0, result1
12dc4     27 12 06 F6 | 	mov	arg01, #39
12dc8     8C 5D B0 FD | 	call	#_printerror
12dcc     64 00 90 FD | 	jmp	#LR__1501
12dd0                 | LR__1500
12dd0     F4 72 BF FD | 	call	#_pop
12dd4     FD 1E 02 F6 | 	mov	local01, result1
12dd8     FE 16 02 F6 | 	mov	arg03, result2
12ddc     A7 1E 62 FC | 	wrlong	local01, fp
12de0     04 4E 05 F1 | 	add	fp, #4
12de4     A7 16 62 FC | 	wrlong	arg03, fp
12de8     04 4E 05 F1 | 	add	fp, #4
12dec     A7 FE 61 FC | 	wrlong	result3, fp
12df0     08 4E 85 F1 | 	sub	fp, #8
12df4     A7 12 02 F6 | 	mov	arg01, fp
12df8     20 FC BF FD | 	call	#_converttoint
12dfc     FD 1E 02 F6 | 	mov	local01, result1
12e00     01 1E 66 F0 | 	shl	local01, #1
12e04     7B 00 00 FF 
12e08     78 E4 05 F1 | 	add	objptr, ##63096
12e0c     F2 1E 02 F1 | 	add	local01, objptr
12e10     0F 1F E2 FA | 	rdword	local01, local01
12e14     A7 1E 62 FC | 	wrlong	local01, fp
12e18     08 4E 05 F1 | 	add	fp, #8
12e1c     A7 38 68 FC | 	wrlong	#28, fp
12e20     08 4E 85 F1 | 	sub	fp, #8
12e24     A7 12 02 F6 | 	mov	arg01, fp
12e28     7B 00 00 FF 
12e2c     78 E4 85 F1 | 	sub	objptr, ##63096
12e30     2C 73 BF FD | 	call	#_push
12e34                 | LR__1501
12e34     A7 F0 03 F6 | 	mov	ptra, fp
12e38     B2 00 A0 FD | 	call	#popregs_
12e3c                 | _do_getenvsustain_ret
12e3c     2D 00 64 FD | 	ret
12e40                 | 
12e40                 | ' 
12e40                 | ' sub do_sin
12e40                 | _do_sin
12e40     01 4A 05 F6 | 	mov	COUNT_, #1
12e44     A8 00 A0 FD | 	call	#pushregs_
12e48     10 F0 07 F1 | 	add	ptra, #16
12e4c     6A 00 00 FF 
12e50     64 E4 05 F1 | 	add	objptr, ##54372
12e54     F2 1E 02 FB | 	rdlong	local01, objptr
12e58     0F 17 02 F6 | 	mov	arg03, local01
12e5c     01 16 66 F0 | 	shl	arg03, #1
12e60     0F 17 02 F1 | 	add	arg03, local01
12e64     02 16 66 F0 | 	shl	arg03, #2
12e68     03 00 00 FF 
12e6c     04 E4 85 F1 | 	sub	objptr, ##1540
12e70     F2 16 02 F1 | 	add	arg03, objptr
12e74     0B 17 02 FB | 	rdlong	arg03, arg03
12e78     0C 4E 05 F1 | 	add	fp, #12
12e7c     A7 16 62 FC | 	wrlong	arg03, fp
12e80                 | ' 
12e80                 | ' numpar=compiledline(lineptr_e).result.uresult
12e80                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
12e80     0C 4E 85 F1 | 	sub	fp, #12
12e84     02 16 16 F2 | 	cmp	arg03, #2 wc
12e88     67 00 00 FF 
12e8c     60 E4 85 F1 | 	sub	objptr, ##52832
12e90     0C 4E 05 C1 |  if_b	add	fp, #12
12e94     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12e98     0C 4E 85 C1 |  if_b	sub	fp, #12
12e9c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1510
12ea0     00 12 06 F6 | 	mov	arg01, #0
12ea4     C4 ED B0 FD | 	call	#__system___getiolock_0474
12ea8     FD 12 02 F6 | 	mov	arg01, result1
12eac     2C 94 B0 FD | 	call	#__system___lockmem
12eb0     5F 01 00 FF 
12eb4     03 15 06 F6 | 	mov	arg02, ##@LR__4940
12eb8     00 12 06 F6 | 	mov	arg01, #0
12ebc     00 16 06 F6 | 	mov	arg03, #0
12ec0     1C A1 B0 FD | 	call	#__system___basic_print_string
12ec4     00 12 06 F6 | 	mov	arg01, #0
12ec8     A0 ED B0 FD | 	call	#__system___getiolock_0474
12ecc     FD 00 68 FC | 	wrlong	#0, result1
12ed0     27 12 06 F6 | 	mov	arg01, #39
12ed4     80 5C B0 FD | 	call	#_printerror
12ed8     64 00 90 FD | 	jmp	#LR__1511
12edc                 | LR__1510
12edc     E8 71 BF FD | 	call	#_pop
12ee0     A7 FA 61 FC | 	wrlong	result1, fp
12ee4     04 4E 05 F1 | 	add	fp, #4
12ee8     A7 FC 61 FC | 	wrlong	result2, fp
12eec     04 4E 05 F1 | 	add	fp, #4
12ef0     A7 FE 61 FC | 	wrlong	result3, fp
12ef4     08 4E 85 F1 | 	sub	fp, #8
12ef8     7B 00 00 FF 
12efc     6C E4 05 F1 | 	add	objptr, ##63084
12f00     F2 1E 02 FB | 	rdlong	local01, objptr
12f04     7B 00 00 FF 
12f08     6C E4 85 F1 | 	sub	objptr, ##63084
12f0c     A7 12 02 F6 | 	mov	arg01, fp
12f10     B4 FB BF FD | 	call	#_converttofloat
12f14     FD 14 02 F6 | 	mov	arg02, result1
12f18     0F 13 02 F6 | 	mov	arg01, local01
12f1c     38 BF B0 FD | 	call	#__system___float_mul
12f20     FD 12 02 F6 | 	mov	arg01, result1
12f24     6C C8 B0 FD | 	call	#__system____builtin_sinf
12f28     A7 FA 61 FC | 	wrlong	result1, fp
12f2c     08 4E 05 F1 | 	add	fp, #8
12f30     A7 3C 68 FC | 	wrlong	#30, fp
12f34     08 4E 85 F1 | 	sub	fp, #8
12f38     A7 12 02 F6 | 	mov	arg01, fp
12f3c     20 72 BF FD | 	call	#_push
12f40                 | LR__1511
12f40     A7 F0 03 F6 | 	mov	ptra, fp
12f44     B2 00 A0 FD | 	call	#popregs_
12f48                 | _do_sin_ret
12f48     2D 00 64 FD | 	ret
12f4c                 | 
12f4c                 | ' 
12f4c                 | ' sub do_cos
12f4c                 | _do_cos
12f4c     01 4A 05 F6 | 	mov	COUNT_, #1
12f50     A8 00 A0 FD | 	call	#pushregs_
12f54     10 F0 07 F1 | 	add	ptra, #16
12f58     6A 00 00 FF 
12f5c     64 E4 05 F1 | 	add	objptr, ##54372
12f60     F2 1E 02 FB | 	rdlong	local01, objptr
12f64     0F 17 02 F6 | 	mov	arg03, local01
12f68     01 16 66 F0 | 	shl	arg03, #1
12f6c     0F 17 02 F1 | 	add	arg03, local01
12f70     02 16 66 F0 | 	shl	arg03, #2
12f74     03 00 00 FF 
12f78     04 E4 85 F1 | 	sub	objptr, ##1540
12f7c     F2 16 02 F1 | 	add	arg03, objptr
12f80     0B 17 02 FB | 	rdlong	arg03, arg03
12f84     0C 4E 05 F1 | 	add	fp, #12
12f88     A7 16 62 FC | 	wrlong	arg03, fp
12f8c                 | ' 
12f8c                 | ' numpar=compiledline(lineptr_e).result.uresult
12f8c                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
12f8c     0C 4E 85 F1 | 	sub	fp, #12
12f90     02 16 16 F2 | 	cmp	arg03, #2 wc
12f94     67 00 00 FF 
12f98     60 E4 85 F1 | 	sub	objptr, ##52832
12f9c     0C 4E 05 C1 |  if_b	add	fp, #12
12fa0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12fa4     0C 4E 85 C1 |  if_b	sub	fp, #12
12fa8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1520
12fac     00 12 06 F6 | 	mov	arg01, #0
12fb0     B8 EC B0 FD | 	call	#__system___getiolock_0474
12fb4     FD 12 02 F6 | 	mov	arg01, result1
12fb8     20 93 B0 FD | 	call	#__system___lockmem
12fbc     5F 01 00 FF 
12fc0     09 15 06 F6 | 	mov	arg02, ##@LR__4941
12fc4     00 12 06 F6 | 	mov	arg01, #0
12fc8     00 16 06 F6 | 	mov	arg03, #0
12fcc     10 A0 B0 FD | 	call	#__system___basic_print_string
12fd0     00 12 06 F6 | 	mov	arg01, #0
12fd4     94 EC B0 FD | 	call	#__system___getiolock_0474
12fd8     FD 00 68 FC | 	wrlong	#0, result1
12fdc     27 12 06 F6 | 	mov	arg01, #39
12fe0     74 5B B0 FD | 	call	#_printerror
12fe4     78 00 90 FD | 	jmp	#LR__1521
12fe8                 | LR__1520
12fe8     DC 70 BF FD | 	call	#_pop
12fec     A7 FA 61 FC | 	wrlong	result1, fp
12ff0     04 4E 05 F1 | 	add	fp, #4
12ff4     A7 FC 61 FC | 	wrlong	result2, fp
12ff8     04 4E 05 F1 | 	add	fp, #4
12ffc     A7 FE 61 FC | 	wrlong	result3, fp
13000     08 4E 85 F1 | 	sub	fp, #8
13004     7B 00 00 FF 
13008     6C E4 05 F1 | 	add	objptr, ##63084
1300c     F2 1E 02 FB | 	rdlong	local01, objptr
13010     7B 00 00 FF 
13014     6C E4 85 F1 | 	sub	objptr, ##63084
13018     A7 12 02 F6 | 	mov	arg01, fp
1301c     A8 FA BF FD | 	call	#_converttofloat
13020     FD 14 02 F6 | 	mov	arg02, result1
13024     0F 13 02 F6 | 	mov	arg01, local01
13028     2C BE B0 FD | 	call	#__system___float_mul
1302c     FD 14 02 F6 | 	mov	arg02, result1
13030     87 E4 1F FF 
13034     DB 13 06 F6 | 	mov	arg01, ##1070141403
13038     1F 14 E6 F4 | 	bitnot	arg02, #31
1303c     48 BA B0 FD | 	call	#__system___float_add
13040     FD 12 02 F6 | 	mov	arg01, result1
13044     4C C7 B0 FD | 	call	#__system____builtin_sinf
13048     A7 FA 61 FC | 	wrlong	result1, fp
1304c     08 4E 05 F1 | 	add	fp, #8
13050     A7 3C 68 FC | 	wrlong	#30, fp
13054     08 4E 85 F1 | 	sub	fp, #8
13058     A7 12 02 F6 | 	mov	arg01, fp
1305c     00 71 BF FD | 	call	#_push
13060                 | LR__1521
13060     A7 F0 03 F6 | 	mov	ptra, fp
13064     B2 00 A0 FD | 	call	#popregs_
13068                 | _do_cos_ret
13068     2D 00 64 FD | 	ret
1306c                 | 
1306c                 | ' 
1306c                 | ' sub do_tan
1306c                 | _do_tan
1306c     01 4A 05 F6 | 	mov	COUNT_, #1
13070     A8 00 A0 FD | 	call	#pushregs_
13074     10 F0 07 F1 | 	add	ptra, #16
13078     6A 00 00 FF 
1307c     64 E4 05 F1 | 	add	objptr, ##54372
13080     F2 1E 02 FB | 	rdlong	local01, objptr
13084     0F 17 02 F6 | 	mov	arg03, local01
13088     01 16 66 F0 | 	shl	arg03, #1
1308c     0F 17 02 F1 | 	add	arg03, local01
13090     02 16 66 F0 | 	shl	arg03, #2
13094     03 00 00 FF 
13098     04 E4 85 F1 | 	sub	objptr, ##1540
1309c     F2 16 02 F1 | 	add	arg03, objptr
130a0     0B 17 02 FB | 	rdlong	arg03, arg03
130a4     0C 4E 05 F1 | 	add	fp, #12
130a8     A7 16 62 FC | 	wrlong	arg03, fp
130ac                 | ' 
130ac                 | ' numpar=compiledline(lineptr_e).result.uresult
130ac                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
130ac     0C 4E 85 F1 | 	sub	fp, #12
130b0     02 16 16 F2 | 	cmp	arg03, #2 wc
130b4     67 00 00 FF 
130b8     60 E4 85 F1 | 	sub	objptr, ##52832
130bc     0C 4E 05 C1 |  if_b	add	fp, #12
130c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
130c4     0C 4E 85 C1 |  if_b	sub	fp, #12
130c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1530
130cc     00 12 06 F6 | 	mov	arg01, #0
130d0     98 EB B0 FD | 	call	#__system___getiolock_0474
130d4     FD 12 02 F6 | 	mov	arg01, result1
130d8     00 92 B0 FD | 	call	#__system___lockmem
130dc     5F 01 00 FF 
130e0     0F 15 06 F6 | 	mov	arg02, ##@LR__4942
130e4     00 12 06 F6 | 	mov	arg01, #0
130e8     00 16 06 F6 | 	mov	arg03, #0
130ec     F0 9E B0 FD | 	call	#__system___basic_print_string
130f0     00 12 06 F6 | 	mov	arg01, #0
130f4     74 EB B0 FD | 	call	#__system___getiolock_0474
130f8     FD 00 68 FC | 	wrlong	#0, result1
130fc     27 12 06 F6 | 	mov	arg01, #39
13100     54 5A B0 FD | 	call	#_printerror
13104     64 00 90 FD | 	jmp	#LR__1531
13108                 | LR__1530
13108     BC 6F BF FD | 	call	#_pop
1310c     A7 FA 61 FC | 	wrlong	result1, fp
13110     04 4E 05 F1 | 	add	fp, #4
13114     A7 FC 61 FC | 	wrlong	result2, fp
13118     04 4E 05 F1 | 	add	fp, #4
1311c     A7 FE 61 FC | 	wrlong	result3, fp
13120     08 4E 85 F1 | 	sub	fp, #8
13124     7B 00 00 FF 
13128     6C E4 05 F1 | 	add	objptr, ##63084
1312c     F2 1E 02 FB | 	rdlong	local01, objptr
13130     7B 00 00 FF 
13134     6C E4 85 F1 | 	sub	objptr, ##63084
13138     A7 12 02 F6 | 	mov	arg01, fp
1313c     88 F9 BF FD | 	call	#_converttofloat
13140     FD 14 02 F6 | 	mov	arg02, result1
13144     0F 13 02 F6 | 	mov	arg01, local01
13148     0C BD B0 FD | 	call	#__system___float_mul
1314c     FD 12 02 F6 | 	mov	arg01, result1
13150     8C C7 B0 FD | 	call	#__system____builtin_tanf
13154     A7 FA 61 FC | 	wrlong	result1, fp
13158     08 4E 05 F1 | 	add	fp, #8
1315c     A7 3C 68 FC | 	wrlong	#30, fp
13160     08 4E 85 F1 | 	sub	fp, #8
13164     A7 12 02 F6 | 	mov	arg01, fp
13168     F4 6F BF FD | 	call	#_push
1316c                 | LR__1531
1316c     A7 F0 03 F6 | 	mov	ptra, fp
13170     B2 00 A0 FD | 	call	#popregs_
13174                 | _do_tan_ret
13174     2D 00 64 FD | 	ret
13178                 | 
13178                 | ' 
13178                 | ' sub do_asin
13178                 | _do_asin
13178     01 4A 05 F6 | 	mov	COUNT_, #1
1317c     A8 00 A0 FD | 	call	#pushregs_
13180     10 F0 07 F1 | 	add	ptra, #16
13184     6A 00 00 FF 
13188     64 E4 05 F1 | 	add	objptr, ##54372
1318c     F2 1E 02 FB | 	rdlong	local01, objptr
13190     0F 17 02 F6 | 	mov	arg03, local01
13194     01 16 66 F0 | 	shl	arg03, #1
13198     0F 17 02 F1 | 	add	arg03, local01
1319c     02 16 66 F0 | 	shl	arg03, #2
131a0     03 00 00 FF 
131a4     04 E4 85 F1 | 	sub	objptr, ##1540
131a8     F2 16 02 F1 | 	add	arg03, objptr
131ac     0B 17 02 FB | 	rdlong	arg03, arg03
131b0     0C 4E 05 F1 | 	add	fp, #12
131b4     A7 16 62 FC | 	wrlong	arg03, fp
131b8                 | ' 
131b8                 | ' numpar=compiledline(lineptr_e).result.uresult
131b8                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
131b8     0C 4E 85 F1 | 	sub	fp, #12
131bc     02 16 16 F2 | 	cmp	arg03, #2 wc
131c0     67 00 00 FF 
131c4     60 E4 85 F1 | 	sub	objptr, ##52832
131c8     0C 4E 05 C1 |  if_b	add	fp, #12
131cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
131d0     0C 4E 85 C1 |  if_b	sub	fp, #12
131d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
131d8     00 12 06 F6 | 	mov	arg01, #0
131dc     8C EA B0 FD | 	call	#__system___getiolock_0474
131e0     FD 12 02 F6 | 	mov	arg01, result1
131e4     F4 90 B0 FD | 	call	#__system___lockmem
131e8     5F 01 00 FF 
131ec     15 15 06 F6 | 	mov	arg02, ##@LR__4943
131f0     00 12 06 F6 | 	mov	arg01, #0
131f4     00 16 06 F6 | 	mov	arg03, #0
131f8     E4 9D B0 FD | 	call	#__system___basic_print_string
131fc     00 12 06 F6 | 	mov	arg01, #0
13200     68 EA B0 FD | 	call	#__system___getiolock_0474
13204     FD 00 68 FC | 	wrlong	#0, result1
13208     27 12 06 F6 | 	mov	arg01, #39
1320c     48 59 B0 FD | 	call	#_printerror
13210     64 00 90 FD | 	jmp	#LR__1541
13214                 | LR__1540
13214     B0 6E BF FD | 	call	#_pop
13218     FF 1E 02 F6 | 	mov	local01, result3
1321c     A7 FA 61 FC | 	wrlong	result1, fp
13220     04 4E 05 F1 | 	add	fp, #4
13224     A7 FC 61 FC | 	wrlong	result2, fp
13228     04 4E 05 F1 | 	add	fp, #4
1322c     A7 1E 62 FC | 	wrlong	local01, fp
13230     08 4E 85 F1 | 	sub	fp, #8
13234     A7 12 02 F6 | 	mov	arg01, fp
13238     8C F8 BF FD | 	call	#_converttofloat
1323c     FD 12 02 F6 | 	mov	arg01, result1
13240     E4 C6 B0 FD | 	call	#__system____builtin_asinf
13244     FD 12 02 F6 | 	mov	arg01, result1
13248     7B 00 00 FF 
1324c     70 E4 05 F1 | 	add	objptr, ##63088
13250     F2 14 02 FB | 	rdlong	arg02, objptr
13254     7B 00 00 FF 
13258     70 E4 85 F1 | 	sub	objptr, ##63088
1325c     F8 BB B0 FD | 	call	#__system___float_mul
13260     A7 FA 61 FC | 	wrlong	result1, fp
13264     08 4E 05 F1 | 	add	fp, #8
13268     A7 3C 68 FC | 	wrlong	#30, fp
1326c     08 4E 85 F1 | 	sub	fp, #8
13270     A7 12 02 F6 | 	mov	arg01, fp
13274     E8 6E BF FD | 	call	#_push
13278                 | LR__1541
13278     A7 F0 03 F6 | 	mov	ptra, fp
1327c     B2 00 A0 FD | 	call	#popregs_
13280                 | _do_asin_ret
13280     2D 00 64 FD | 	ret
13284                 | 
13284                 | ' 
13284                 | ' sub do_acos
13284                 | _do_acos
13284     01 4A 05 F6 | 	mov	COUNT_, #1
13288     A8 00 A0 FD | 	call	#pushregs_
1328c     10 F0 07 F1 | 	add	ptra, #16
13290     6A 00 00 FF 
13294     64 E4 05 F1 | 	add	objptr, ##54372
13298     F2 1E 02 FB | 	rdlong	local01, objptr
1329c     0F 17 02 F6 | 	mov	arg03, local01
132a0     01 16 66 F0 | 	shl	arg03, #1
132a4     0F 17 02 F1 | 	add	arg03, local01
132a8     02 16 66 F0 | 	shl	arg03, #2
132ac     03 00 00 FF 
132b0     04 E4 85 F1 | 	sub	objptr, ##1540
132b4     F2 16 02 F1 | 	add	arg03, objptr
132b8     0B 17 02 FB | 	rdlong	arg03, arg03
132bc     0C 4E 05 F1 | 	add	fp, #12
132c0     A7 16 62 FC | 	wrlong	arg03, fp
132c4                 | ' 
132c4                 | ' numpar=compiledline(lineptr_e).result.uresult
132c4                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
132c4     0C 4E 85 F1 | 	sub	fp, #12
132c8     02 16 16 F2 | 	cmp	arg03, #2 wc
132cc     67 00 00 FF 
132d0     60 E4 85 F1 | 	sub	objptr, ##52832
132d4     0C 4E 05 C1 |  if_b	add	fp, #12
132d8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
132dc     0C 4E 85 C1 |  if_b	sub	fp, #12
132e0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1550
132e4     00 12 06 F6 | 	mov	arg01, #0
132e8     80 E9 B0 FD | 	call	#__system___getiolock_0474
132ec     FD 12 02 F6 | 	mov	arg01, result1
132f0     E8 8F B0 FD | 	call	#__system___lockmem
132f4     5F 01 00 FF 
132f8     1C 15 06 F6 | 	mov	arg02, ##@LR__4944
132fc     00 12 06 F6 | 	mov	arg01, #0
13300     00 16 06 F6 | 	mov	arg03, #0
13304     D8 9C B0 FD | 	call	#__system___basic_print_string
13308     00 12 06 F6 | 	mov	arg01, #0
1330c     5C E9 B0 FD | 	call	#__system___getiolock_0474
13310     FD 00 68 FC | 	wrlong	#0, result1
13314     27 12 06 F6 | 	mov	arg01, #39
13318     3C 58 B0 FD | 	call	#_printerror
1331c     64 00 90 FD | 	jmp	#LR__1551
13320                 | LR__1550
13320     A4 6D BF FD | 	call	#_pop
13324     FF 1E 02 F6 | 	mov	local01, result3
13328     A7 FA 61 FC | 	wrlong	result1, fp
1332c     04 4E 05 F1 | 	add	fp, #4
13330     A7 FC 61 FC | 	wrlong	result2, fp
13334     04 4E 05 F1 | 	add	fp, #4
13338     A7 1E 62 FC | 	wrlong	local01, fp
1333c     08 4E 85 F1 | 	sub	fp, #8
13340     A7 12 02 F6 | 	mov	arg01, fp
13344     80 F7 BF FD | 	call	#_converttofloat
13348     FD 12 02 F6 | 	mov	arg01, result1
1334c     24 C6 B0 FD | 	call	#__system____builtin_acosf
13350     FD 12 02 F6 | 	mov	arg01, result1
13354     7B 00 00 FF 
13358     70 E4 05 F1 | 	add	objptr, ##63088
1335c     F2 14 02 FB | 	rdlong	arg02, objptr
13360     7B 00 00 FF 
13364     70 E4 85 F1 | 	sub	objptr, ##63088
13368     EC BA B0 FD | 	call	#__system___float_mul
1336c     A7 FA 61 FC | 	wrlong	result1, fp
13370     08 4E 05 F1 | 	add	fp, #8
13374     A7 3C 68 FC | 	wrlong	#30, fp
13378     08 4E 85 F1 | 	sub	fp, #8
1337c     A7 12 02 F6 | 	mov	arg01, fp
13380     DC 6D BF FD | 	call	#_push
13384                 | LR__1551
13384     A7 F0 03 F6 | 	mov	ptra, fp
13388     B2 00 A0 FD | 	call	#popregs_
1338c                 | _do_acos_ret
1338c     2D 00 64 FD | 	ret
13390                 | 
13390                 | ' 
13390                 | ' sub do_atn
13390                 | _do_atn
13390     01 4A 05 F6 | 	mov	COUNT_, #1
13394     A8 00 A0 FD | 	call	#pushregs_
13398     10 F0 07 F1 | 	add	ptra, #16
1339c     6A 00 00 FF 
133a0     64 E4 05 F1 | 	add	objptr, ##54372
133a4     F2 1E 02 FB | 	rdlong	local01, objptr
133a8     0F 17 02 F6 | 	mov	arg03, local01
133ac     01 16 66 F0 | 	shl	arg03, #1
133b0     0F 17 02 F1 | 	add	arg03, local01
133b4     02 16 66 F0 | 	shl	arg03, #2
133b8     03 00 00 FF 
133bc     04 E4 85 F1 | 	sub	objptr, ##1540
133c0     F2 16 02 F1 | 	add	arg03, objptr
133c4     0B 17 02 FB | 	rdlong	arg03, arg03
133c8     0C 4E 05 F1 | 	add	fp, #12
133cc     A7 16 62 FC | 	wrlong	arg03, fp
133d0                 | ' 
133d0                 | ' numpar=compiledline(lineptr_e).result.uresult
133d0                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
133d0     0C 4E 85 F1 | 	sub	fp, #12
133d4     02 16 16 F2 | 	cmp	arg03, #2 wc
133d8     67 00 00 FF 
133dc     60 E4 85 F1 | 	sub	objptr, ##52832
133e0     0C 4E 05 C1 |  if_b	add	fp, #12
133e4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
133e8     0C 4E 85 C1 |  if_b	sub	fp, #12
133ec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
133f0     00 12 06 F6 | 	mov	arg01, #0
133f4     74 E8 B0 FD | 	call	#__system___getiolock_0474
133f8     FD 12 02 F6 | 	mov	arg01, result1
133fc     DC 8E B0 FD | 	call	#__system___lockmem
13400     5F 01 00 FF 
13404     23 15 06 F6 | 	mov	arg02, ##@LR__4945
13408     00 12 06 F6 | 	mov	arg01, #0
1340c     00 16 06 F6 | 	mov	arg03, #0
13410     CC 9B B0 FD | 	call	#__system___basic_print_string
13414     00 12 06 F6 | 	mov	arg01, #0
13418     50 E8 B0 FD | 	call	#__system___getiolock_0474
1341c     FD 00 68 FC | 	wrlong	#0, result1
13420     27 12 06 F6 | 	mov	arg01, #39
13424     30 57 B0 FD | 	call	#_printerror
13428     6C 00 90 FD | 	jmp	#LR__1561
1342c                 | LR__1560
1342c     98 6C BF FD | 	call	#_pop
13430     FF 1E 02 F6 | 	mov	local01, result3
13434     A7 FA 61 FC | 	wrlong	result1, fp
13438     04 4E 05 F1 | 	add	fp, #4
1343c     A7 FC 61 FC | 	wrlong	result2, fp
13440     04 4E 05 F1 | 	add	fp, #4
13444     A7 1E 62 FC | 	wrlong	local01, fp
13448     08 4E 85 F1 | 	sub	fp, #8
1344c     A7 12 02 F6 | 	mov	arg01, fp
13450     74 F6 BF FD | 	call	#_converttofloat
13454     FD 12 02 F6 | 	mov	arg01, result1
13458     00 C0 1F FF 
1345c     00 14 06 F6 | 	mov	arg02, ##1065353216
13460     5C C5 B0 FD | 	call	#__system____builtin_atan2f
13464     FD 12 02 F6 | 	mov	arg01, result1
13468     7B 00 00 FF 
1346c     70 E4 05 F1 | 	add	objptr, ##63088
13470     F2 14 02 FB | 	rdlong	arg02, objptr
13474     7B 00 00 FF 
13478     70 E4 85 F1 | 	sub	objptr, ##63088
1347c     D8 B9 B0 FD | 	call	#__system___float_mul
13480     A7 FA 61 FC | 	wrlong	result1, fp
13484     08 4E 05 F1 | 	add	fp, #8
13488     A7 3C 68 FC | 	wrlong	#30, fp
1348c     08 4E 85 F1 | 	sub	fp, #8
13490     A7 12 02 F6 | 	mov	arg01, fp
13494     C8 6C BF FD | 	call	#_push
13498                 | LR__1561
13498     A7 F0 03 F6 | 	mov	ptra, fp
1349c     B2 00 A0 FD | 	call	#popregs_
134a0                 | _do_atn_ret
134a0     2D 00 64 FD | 	ret
134a4                 | 
134a4                 | ' 
134a4                 | ' sub do_sqr
134a4                 | _do_sqr
134a4     01 4A 05 F6 | 	mov	COUNT_, #1
134a8     A8 00 A0 FD | 	call	#pushregs_
134ac     10 F0 07 F1 | 	add	ptra, #16
134b0     6A 00 00 FF 
134b4     64 E4 05 F1 | 	add	objptr, ##54372
134b8     F2 1E 02 FB | 	rdlong	local01, objptr
134bc     0F 17 02 F6 | 	mov	arg03, local01
134c0     01 16 66 F0 | 	shl	arg03, #1
134c4     0F 17 02 F1 | 	add	arg03, local01
134c8     02 16 66 F0 | 	shl	arg03, #2
134cc     03 00 00 FF 
134d0     04 E4 85 F1 | 	sub	objptr, ##1540
134d4     F2 16 02 F1 | 	add	arg03, objptr
134d8     0B 17 02 FB | 	rdlong	arg03, arg03
134dc     0C 4E 05 F1 | 	add	fp, #12
134e0     A7 16 62 FC | 	wrlong	arg03, fp
134e4                 | ' 
134e4                 | ' numpar=compiledline(lineptr_e).result.uresult
134e4                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
134e4     0C 4E 85 F1 | 	sub	fp, #12
134e8     02 16 16 F2 | 	cmp	arg03, #2 wc
134ec     67 00 00 FF 
134f0     60 E4 85 F1 | 	sub	objptr, ##52832
134f4     0C 4E 05 C1 |  if_b	add	fp, #12
134f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
134fc     0C 4E 85 C1 |  if_b	sub	fp, #12
13500     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
13504     00 12 06 F6 | 	mov	arg01, #0
13508     60 E7 B0 FD | 	call	#__system___getiolock_0474
1350c     FD 12 02 F6 | 	mov	arg01, result1
13510     C8 8D B0 FD | 	call	#__system___lockmem
13514     5F 01 00 FF 
13518     29 15 06 F6 | 	mov	arg02, ##@LR__4946
1351c     00 12 06 F6 | 	mov	arg01, #0
13520     00 16 06 F6 | 	mov	arg03, #0
13524     B8 9A B0 FD | 	call	#__system___basic_print_string
13528     00 12 06 F6 | 	mov	arg01, #0
1352c     3C E7 B0 FD | 	call	#__system___getiolock_0474
13530     FD 00 68 FC | 	wrlong	#0, result1
13534     27 12 06 F6 | 	mov	arg01, #39
13538     1C 56 B0 FD | 	call	#_printerror
1353c     48 00 90 FD | 	jmp	#LR__1571
13540                 | LR__1570
13540     84 6B BF FD | 	call	#_pop
13544     FF 1E 02 F6 | 	mov	local01, result3
13548     A7 FA 61 FC | 	wrlong	result1, fp
1354c     04 4E 05 F1 | 	add	fp, #4
13550     A7 FC 61 FC | 	wrlong	result2, fp
13554     04 4E 05 F1 | 	add	fp, #4
13558     A7 1E 62 FC | 	wrlong	local01, fp
1355c     08 4E 85 F1 | 	sub	fp, #8
13560     A7 12 02 F6 | 	mov	arg01, fp
13564     60 F5 BF FD | 	call	#_converttofloat
13568     FD 12 02 F6 | 	mov	arg01, result1
1356c     10 B8 B0 FD | 	call	#__system___float_sqrt
13570     A7 FA 61 FC | 	wrlong	result1, fp
13574     08 4E 05 F1 | 	add	fp, #8
13578     A7 3C 68 FC | 	wrlong	#30, fp
1357c     08 4E 85 F1 | 	sub	fp, #8
13580     A7 12 02 F6 | 	mov	arg01, fp
13584     D8 6B BF FD | 	call	#_push
13588                 | LR__1571
13588     A7 F0 03 F6 | 	mov	ptra, fp
1358c     B2 00 A0 FD | 	call	#popregs_
13590                 | _do_sqr_ret
13590     2D 00 64 FD | 	ret
13594                 | 
13594                 | ' 
13594                 | ' sub do_stick
13594                 | _do_stick
13594     01 4A 05 F6 | 	mov	COUNT_, #1
13598     A8 00 A0 FD | 	call	#pushregs_
1359c     10 F0 07 F1 | 	add	ptra, #16
135a0     6A 00 00 FF 
135a4     64 E4 05 F1 | 	add	objptr, ##54372
135a8     F2 1E 02 FB | 	rdlong	local01, objptr
135ac     0F 17 02 F6 | 	mov	arg03, local01
135b0     01 16 66 F0 | 	shl	arg03, #1
135b4     0F 17 02 F1 | 	add	arg03, local01
135b8     02 16 66 F0 | 	shl	arg03, #2
135bc     03 00 00 FF 
135c0     04 E4 85 F1 | 	sub	objptr, ##1540
135c4     F2 16 02 F1 | 	add	arg03, objptr
135c8     0B 17 02 FB | 	rdlong	arg03, arg03
135cc     0C 4E 05 F1 | 	add	fp, #12
135d0     A7 16 62 FC | 	wrlong	arg03, fp
135d4                 | ' 
135d4                 | ' numpar=compiledline(lineptr_e).result.uresult
135d4                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
135d4     0C 4E 85 F1 | 	sub	fp, #12
135d8     02 16 16 F2 | 	cmp	arg03, #2 wc
135dc     67 00 00 FF 
135e0     60 E4 85 F1 | 	sub	objptr, ##52832
135e4     3C 00 90 CD |  if_b	jmp	#LR__1580
135e8     00 12 06 F6 | 	mov	arg01, #0
135ec     7C E6 B0 FD | 	call	#__system___getiolock_0474
135f0     FD 12 02 F6 | 	mov	arg01, result1
135f4     E4 8C B0 FD | 	call	#__system___lockmem
135f8     5F 01 00 FF 
135fc     2F 15 06 F6 | 	mov	arg02, ##@LR__4947
13600     00 12 06 F6 | 	mov	arg01, #0
13604     00 16 06 F6 | 	mov	arg03, #0
13608     D4 99 B0 FD | 	call	#__system___basic_print_string
1360c     00 12 06 F6 | 	mov	arg01, #0
13610     58 E6 B0 FD | 	call	#__system___getiolock_0474
13614     FD 00 68 FC | 	wrlong	#0, result1
13618     27 12 06 F6 | 	mov	arg01, #39
1361c     38 55 B0 FD | 	call	#_printerror
13620     E8 00 90 FD | 	jmp	#LR__1584
13624                 | LR__1580
13624                 | ' 
13624                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
13624     0C 4E 05 F1 | 	add	fp, #12
13628     A7 FE 09 FB | 	rdlong	result3, fp wz
1362c     0C 4E 85 F1 | 	sub	fp, #12
13630     30 00 90 5D |  if_ne	jmp	#LR__1581
13634     7A 00 00 FF 
13638     E0 E5 05 F1 | 	add	objptr, ##62944
1363c     F2 1E 02 FB | 	rdlong	local01, objptr
13640     7A 00 00 FF 
13644     E0 E5 85 F1 | 	sub	objptr, ##62944
13648     A7 1E 62 FC | 	wrlong	local01, fp
1364c     08 4E 05 F1 | 	add	fp, #8
13650     A7 3A 68 FC | 	wrlong	#29, fp
13654     08 4E 85 F1 | 	sub	fp, #8
13658     A7 12 02 F6 | 	mov	arg01, fp
1365c     00 6B BF FD | 	call	#_push
13660     A8 00 90 FD | 	jmp	#LR__1584
13664                 | LR__1581
13664     60 6A BF FD | 	call	#_pop
13668     A7 FA 61 FC | 	wrlong	result1, fp
1366c     04 4E 05 F1 | 	add	fp, #4
13670     A7 FC 61 FC | 	wrlong	result2, fp
13674     04 4E 05 F1 | 	add	fp, #4
13678     A7 FE 61 FC | 	wrlong	result3, fp
1367c                 | ' 
1367c                 | ' t1=pop()
1367c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1367c     08 4E 85 F1 | 	sub	fp, #8
13680     1C FE 0D F2 | 	cmp	result3, #28 wz
13684     08 4E 05 51 |  if_ne	add	fp, #8
13688     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1368c     08 4E 85 51 |  if_ne	sub	fp, #8
13690     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13694     6C 00 90 5D |  if_ne	jmp	#LR__1583
13698     A7 1E 02 FB | 	rdlong	local01, fp
1369c     7B 00 00 FF 
136a0     C8 E4 05 F1 | 	add	objptr, ##63176
136a4     F2 1E 62 FC | 	wrlong	local01, objptr
136a8                 | '   q=t1.result.uresult
136a8                 | '   if q<7 then 
136a8     7B 00 00 FF 
136ac     C8 E4 85 F1 | 	sub	objptr, ##63176
136b0     07 1E 56 F2 | 	cmps	local01, #7 wc
136b4     40 00 90 3D |  if_ae	jmp	#LR__1582
136b8     7B 00 00 FF 
136bc     C8 E4 05 F1 | 	add	objptr, ##63176
136c0     F2 1E 02 FB | 	rdlong	local01, objptr
136c4     02 1E 66 F0 | 	shl	local01, #2
136c8     E8 E4 85 F1 | 	sub	objptr, #232
136cc     F2 1E 02 F1 | 	add	local01, objptr
136d0     0F 1F 02 FB | 	rdlong	local01, local01
136d4     A7 1E 62 FC | 	wrlong	local01, fp
136d8     08 4E 05 F1 | 	add	fp, #8
136dc     A7 3A 68 FC | 	wrlong	#29, fp
136e0     08 4E 85 F1 | 	sub	fp, #8
136e4     A7 12 02 F6 | 	mov	arg01, fp
136e8     7A 00 00 FF 
136ec     E0 E5 85 F1 | 	sub	objptr, ##62944
136f0     6C 6A BF FD | 	call	#_push
136f4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
136f4     14 00 90 FD | 	jmp	#LR__1584
136f8                 | LR__1582
136f8     29 12 06 F6 | 	mov	arg01, #41
136fc     58 54 B0 FD | 	call	#_printerror
13700                 | '      printerror(41) : return
13700     08 00 90 FD | 	jmp	#LR__1584
13704                 | LR__1583
13704     29 12 06 F6 | 	mov	arg01, #41
13708     4C 54 B0 FD | 	call	#_printerror
1370c                 | LR__1584
1370c     A7 F0 03 F6 | 	mov	ptra, fp
13710     B2 00 A0 FD | 	call	#popregs_
13714                 | _do_stick_ret
13714     2D 00 64 FD | 	ret
13718                 | 
13718                 | ' 
13718                 | ' sub do_strig
13718                 | _do_strig
13718     01 4A 05 F6 | 	mov	COUNT_, #1
1371c     A8 00 A0 FD | 	call	#pushregs_
13720     10 F0 07 F1 | 	add	ptra, #16
13724     6A 00 00 FF 
13728     64 E4 05 F1 | 	add	objptr, ##54372
1372c     F2 1E 02 FB | 	rdlong	local01, objptr
13730     0F 17 02 F6 | 	mov	arg03, local01
13734     01 16 66 F0 | 	shl	arg03, #1
13738     0F 17 02 F1 | 	add	arg03, local01
1373c     02 16 66 F0 | 	shl	arg03, #2
13740     03 00 00 FF 
13744     04 E4 85 F1 | 	sub	objptr, ##1540
13748     F2 16 02 F1 | 	add	arg03, objptr
1374c     0B 17 02 FB | 	rdlong	arg03, arg03
13750     0C 4E 05 F1 | 	add	fp, #12
13754     A7 16 62 FC | 	wrlong	arg03, fp
13758                 | ' 
13758                 | ' numpar=compiledline(lineptr_e).result.uresult
13758                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
13758     0C 4E 85 F1 | 	sub	fp, #12
1375c     02 16 16 F2 | 	cmp	arg03, #2 wc
13760     67 00 00 FF 
13764     60 E4 85 F1 | 	sub	objptr, ##52832
13768     3C 00 90 CD |  if_b	jmp	#LR__1590
1376c     00 12 06 F6 | 	mov	arg01, #0
13770     F8 E4 B0 FD | 	call	#__system___getiolock_0474
13774     FD 12 02 F6 | 	mov	arg01, result1
13778     60 8B B0 FD | 	call	#__system___lockmem
1377c     5F 01 00 FF 
13780     37 15 06 F6 | 	mov	arg02, ##@LR__4948
13784     00 12 06 F6 | 	mov	arg01, #0
13788     00 16 06 F6 | 	mov	arg03, #0
1378c     50 98 B0 FD | 	call	#__system___basic_print_string
13790     00 12 06 F6 | 	mov	arg01, #0
13794     D4 E4 B0 FD | 	call	#__system___getiolock_0474
13798     FD 00 68 FC | 	wrlong	#0, result1
1379c     27 12 06 F6 | 	mov	arg01, #39
137a0     B4 53 B0 FD | 	call	#_printerror
137a4     E8 00 90 FD | 	jmp	#LR__1594
137a8                 | LR__1590
137a8                 | ' 
137a8                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
137a8     0C 4E 05 F1 | 	add	fp, #12
137ac     A7 FE 09 FB | 	rdlong	result3, fp wz
137b0     0C 4E 85 F1 | 	sub	fp, #12
137b4     30 00 90 5D |  if_ne	jmp	#LR__1591
137b8     7A 00 00 FF 
137bc     FC E5 05 F1 | 	add	objptr, ##62972
137c0     F2 1E 02 FB | 	rdlong	local01, objptr
137c4     7A 00 00 FF 
137c8     FC E5 85 F1 | 	sub	objptr, ##62972
137cc     A7 1E 62 FC | 	wrlong	local01, fp
137d0     08 4E 05 F1 | 	add	fp, #8
137d4     A7 3A 68 FC | 	wrlong	#29, fp
137d8     08 4E 85 F1 | 	sub	fp, #8
137dc     A7 12 02 F6 | 	mov	arg01, fp
137e0     7C 69 BF FD | 	call	#_push
137e4     A8 00 90 FD | 	jmp	#LR__1594
137e8                 | LR__1591
137e8     DC 68 BF FD | 	call	#_pop
137ec     A7 FA 61 FC | 	wrlong	result1, fp
137f0     04 4E 05 F1 | 	add	fp, #4
137f4     A7 FC 61 FC | 	wrlong	result2, fp
137f8     04 4E 05 F1 | 	add	fp, #4
137fc     A7 FE 61 FC | 	wrlong	result3, fp
13800                 | ' 
13800                 | ' t1=pop()
13800                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
13800     08 4E 85 F1 | 	sub	fp, #8
13804     1C FE 0D F2 | 	cmp	result3, #28 wz
13808     08 4E 05 51 |  if_ne	add	fp, #8
1380c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13810     08 4E 85 51 |  if_ne	sub	fp, #8
13814     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13818     6C 00 90 5D |  if_ne	jmp	#LR__1593
1381c     A7 1E 02 FB | 	rdlong	local01, fp
13820     7B 00 00 FF 
13824     C8 E4 05 F1 | 	add	objptr, ##63176
13828     F2 1E 62 FC | 	wrlong	local01, objptr
1382c                 | '   q=t1.result.uresult
1382c                 | '   if q<7 then 
1382c     7B 00 00 FF 
13830     C8 E4 85 F1 | 	sub	objptr, ##63176
13834     07 1E 56 F2 | 	cmps	local01, #7 wc
13838     40 00 90 3D |  if_ae	jmp	#LR__1592
1383c     7B 00 00 FF 
13840     C8 E4 05 F1 | 	add	objptr, ##63176
13844     F2 1E 02 FB | 	rdlong	local01, objptr
13848     02 1E 66 F0 | 	shl	local01, #2
1384c     CC E4 85 F1 | 	sub	objptr, #204
13850     F2 1E 02 F1 | 	add	local01, objptr
13854     0F 1F 02 FB | 	rdlong	local01, local01
13858     A7 1E 62 FC | 	wrlong	local01, fp
1385c     08 4E 05 F1 | 	add	fp, #8
13860     A7 3A 68 FC | 	wrlong	#29, fp
13864     08 4E 85 F1 | 	sub	fp, #8
13868     A7 12 02 F6 | 	mov	arg01, fp
1386c     7A 00 00 FF 
13870     FC E5 85 F1 | 	sub	objptr, ##62972
13874     E8 68 BF FD | 	call	#_push
13878                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
13878     14 00 90 FD | 	jmp	#LR__1594
1387c                 | LR__1592
1387c     29 12 06 F6 | 	mov	arg01, #41
13880     D4 52 B0 FD | 	call	#_printerror
13884                 | '      printerror(41) : return
13884     08 00 90 FD | 	jmp	#LR__1594
13888                 | LR__1593
13888     29 12 06 F6 | 	mov	arg01, #41
1388c     C8 52 B0 FD | 	call	#_printerror
13890                 | LR__1594
13890     A7 F0 03 F6 | 	mov	ptra, fp
13894     B2 00 A0 FD | 	call	#popregs_
13898                 | _do_strig_ret
13898     2D 00 64 FD | 	ret
1389c                 | 
1389c                 | ' 
1389c                 | ' sub do_getpixel
1389c                 | _do_getpixel
1389c     00 4A 05 F6 | 	mov	COUNT_, #0
138a0     A8 00 A0 FD | 	call	#pushregs_
138a4     24 F0 07 F1 | 	add	ptra, #36
138a8     6A 00 00 FF 
138ac     64 E4 05 F1 | 	add	objptr, ##54372
138b0     F2 16 02 FB | 	rdlong	arg03, objptr
138b4     0B 15 02 F6 | 	mov	arg02, arg03
138b8     01 14 66 F0 | 	shl	arg02, #1
138bc     0B 15 02 F1 | 	add	arg02, arg03
138c0     02 14 66 F0 | 	shl	arg02, #2
138c4     03 00 00 FF 
138c8     04 E4 85 F1 | 	sub	objptr, ##1540
138cc     F2 14 02 F1 | 	add	arg02, objptr
138d0     0A 17 02 FB | 	rdlong	arg03, arg02
138d4     18 4E 05 F1 | 	add	fp, #24
138d8     A7 16 62 FC | 	wrlong	arg03, fp
138dc                 | ' 
138dc                 | ' numpar=compiledline(lineptr_e).result.uresult
138dc                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
138dc     18 4E 85 F1 | 	sub	fp, #24
138e0     02 16 0E F2 | 	cmp	arg03, #2 wz
138e4     67 00 00 FF 
138e8     60 E4 85 F1 | 	sub	objptr, ##52832
138ec     3C 00 90 AD |  if_e	jmp	#LR__1600
138f0     00 12 06 F6 | 	mov	arg01, #0
138f4     74 E3 B0 FD | 	call	#__system___getiolock_0474
138f8     FD 12 02 F6 | 	mov	arg01, result1
138fc     DC 89 B0 FD | 	call	#__system___lockmem
13900     5F 01 00 FF 
13904     3F 15 06 F6 | 	mov	arg02, ##@LR__4949
13908     00 12 06 F6 | 	mov	arg01, #0
1390c     00 16 06 F6 | 	mov	arg03, #0
13910     CC 96 B0 FD | 	call	#__system___basic_print_string
13914     00 12 06 F6 | 	mov	arg01, #0
13918     50 E3 B0 FD | 	call	#__system___getiolock_0474
1391c     FD 00 68 FC | 	wrlong	#0, result1
13920     27 12 06 F6 | 	mov	arg01, #39
13924     30 52 B0 FD | 	call	#_printerror
13928     B4 00 90 FD | 	jmp	#LR__1601
1392c                 | LR__1600
1392c     98 67 BF FD | 	call	#_pop
13930     FD 16 02 F6 | 	mov	arg03, result1
13934     FE 14 02 F6 | 	mov	arg02, result2
13938     FF 12 02 F6 | 	mov	arg01, result3
1393c     0C 4E 05 F1 | 	add	fp, #12
13940     A7 16 62 FC | 	wrlong	arg03, fp
13944     04 4E 05 F1 | 	add	fp, #4
13948     A7 14 62 FC | 	wrlong	arg02, fp
1394c     04 4E 05 F1 | 	add	fp, #4
13950     A7 12 62 FC | 	wrlong	arg01, fp
13954     14 4E 85 F1 | 	sub	fp, #20
13958     6C 67 BF FD | 	call	#_pop
1395c     FF 16 02 F6 | 	mov	arg03, result3
13960     A7 FA 61 FC | 	wrlong	result1, fp
13964     04 4E 05 F1 | 	add	fp, #4
13968     A7 FC 61 FC | 	wrlong	result2, fp
1396c     04 4E 05 F1 | 	add	fp, #4
13970     A7 16 62 FC | 	wrlong	arg03, fp
13974     08 4E 85 F1 | 	sub	fp, #8
13978     A7 12 02 F6 | 	mov	arg01, fp
1397c     9C F0 BF FD | 	call	#_converttoint
13980     1C 4E 05 F1 | 	add	fp, #28
13984     A7 FA 61 FC | 	wrlong	result1, fp
13988     10 4E 85 F1 | 	sub	fp, #16
1398c     A7 12 02 F6 | 	mov	arg01, fp
13990     0C 4E 85 F1 | 	sub	fp, #12
13994     84 F0 BF FD | 	call	#_converttoint
13998     FD 16 02 F6 | 	mov	arg03, result1
1399c     20 4E 05 F1 | 	add	fp, #32
139a0     A7 16 62 FC | 	wrlong	arg03, fp
139a4     F2 12 02 FB | 	rdlong	arg01, objptr
139a8     04 4E 85 F1 | 	sub	fp, #4
139ac     A7 FE 01 FB | 	rdlong	result3, fp
139b0     FF 12 02 F1 | 	add	arg01, result3
139b4     1C 4E 85 F1 | 	sub	fp, #28
139b8     0A 16 66 F0 | 	shl	arg03, #10
139bc     0B 13 02 F1 | 	add	arg01, arg03
139c0     D0 53 B0 FD | 	call	#_pspeek
139c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
139c8     A7 FA 61 FC | 	wrlong	result1, fp
139cc     08 4E 05 F1 | 	add	fp, #8
139d0     A7 3A 68 FC | 	wrlong	#29, fp
139d4     08 4E 85 F1 | 	sub	fp, #8
139d8     A7 12 02 F6 | 	mov	arg01, fp
139dc     80 67 BF FD | 	call	#_push
139e0                 | LR__1601
139e0     A7 F0 03 F6 | 	mov	ptra, fp
139e4     B2 00 A0 FD | 	call	#popregs_
139e8                 | _do_getpixel_ret
139e8     2D 00 64 FD | 	ret
139ec                 | 
139ec                 | ' 
139ec                 | ' 
139ec                 | ' 
139ec                 | ' sub do_defsprite
139ec                 | _do_defsprite
139ec     07 4A 05 F6 | 	mov	COUNT_, #7
139f0     A8 00 A0 FD | 	call	#pushregs_
139f4     5C F0 07 F1 | 	add	ptra, #92
139f8     CC 66 BF FD | 	call	#_pop
139fc     FD 16 02 F6 | 	mov	arg03, result1
13a00     FE 14 02 F6 | 	mov	arg02, result2
13a04     FF 12 02 F6 | 	mov	arg01, result3
13a08     30 4E 05 F1 | 	add	fp, #48
13a0c     A7 16 62 FC | 	wrlong	arg03, fp
13a10     04 4E 05 F1 | 	add	fp, #4
13a14     A7 14 62 FC | 	wrlong	arg02, fp
13a18     04 4E 05 F1 | 	add	fp, #4
13a1c     A7 12 62 FC | 	wrlong	arg01, fp
13a20     38 4E 85 F1 | 	sub	fp, #56
13a24     A0 66 BF FD | 	call	#_pop
13a28     FD 16 02 F6 | 	mov	arg03, result1
13a2c     FE 14 02 F6 | 	mov	arg02, result2
13a30     FF 12 02 F6 | 	mov	arg01, result3
13a34     24 4E 05 F1 | 	add	fp, #36
13a38     A7 16 62 FC | 	wrlong	arg03, fp
13a3c     04 4E 05 F1 | 	add	fp, #4
13a40     A7 14 62 FC | 	wrlong	arg02, fp
13a44     04 4E 05 F1 | 	add	fp, #4
13a48     A7 12 62 FC | 	wrlong	arg01, fp
13a4c     2C 4E 85 F1 | 	sub	fp, #44
13a50     74 66 BF FD | 	call	#_pop
13a54     FD 16 02 F6 | 	mov	arg03, result1
13a58     FE 14 02 F6 | 	mov	arg02, result2
13a5c     FF 12 02 F6 | 	mov	arg01, result3
13a60     18 4E 05 F1 | 	add	fp, #24
13a64     A7 16 62 FC | 	wrlong	arg03, fp
13a68     04 4E 05 F1 | 	add	fp, #4
13a6c     A7 14 62 FC | 	wrlong	arg02, fp
13a70     04 4E 05 F1 | 	add	fp, #4
13a74     A7 12 62 FC | 	wrlong	arg01, fp
13a78     20 4E 85 F1 | 	sub	fp, #32
13a7c     48 66 BF FD | 	call	#_pop
13a80     FD 16 02 F6 | 	mov	arg03, result1
13a84     FE 14 02 F6 | 	mov	arg02, result2
13a88     FF 12 02 F6 | 	mov	arg01, result3
13a8c     0C 4E 05 F1 | 	add	fp, #12
13a90     A7 16 62 FC | 	wrlong	arg03, fp
13a94     04 4E 05 F1 | 	add	fp, #4
13a98     A7 14 62 FC | 	wrlong	arg02, fp
13a9c     04 4E 05 F1 | 	add	fp, #4
13aa0     A7 12 62 FC | 	wrlong	arg01, fp
13aa4     14 4E 85 F1 | 	sub	fp, #20
13aa8     1C 66 BF FD | 	call	#_pop
13aac     FF 16 02 F6 | 	mov	arg03, result3
13ab0     A7 FA 61 FC | 	wrlong	result1, fp
13ab4     04 4E 05 F1 | 	add	fp, #4
13ab8     A7 FC 61 FC | 	wrlong	result2, fp
13abc     04 4E 05 F1 | 	add	fp, #4
13ac0     A7 16 62 FC | 	wrlong	arg03, fp
13ac4     08 4E 85 F1 | 	sub	fp, #8
13ac8     A7 12 02 F6 | 	mov	arg01, fp
13acc     4C EF BF FD | 	call	#_converttoint
13ad0     3C 4E 05 F1 | 	add	fp, #60
13ad4     A7 FA 61 FC | 	wrlong	result1, fp
13ad8     30 4E 85 F1 | 	sub	fp, #48
13adc     A7 12 02 F6 | 	mov	arg01, fp
13ae0     0C 4E 85 F1 | 	sub	fp, #12
13ae4     34 EF BF FD | 	call	#_converttoint
13ae8     40 4E 05 F1 | 	add	fp, #64
13aec     A7 FA 61 FC | 	wrlong	result1, fp
13af0     28 4E 85 F1 | 	sub	fp, #40
13af4     A7 12 02 F6 | 	mov	arg01, fp
13af8     18 4E 85 F1 | 	sub	fp, #24
13afc     1C EF BF FD | 	call	#_converttoint
13b00     44 4E 05 F1 | 	add	fp, #68
13b04     A7 FA 61 FC | 	wrlong	result1, fp
13b08     20 4E 85 F1 | 	sub	fp, #32
13b0c     A7 12 02 F6 | 	mov	arg01, fp
13b10     24 4E 85 F1 | 	sub	fp, #36
13b14     04 EF BF FD | 	call	#_converttoint
13b18     48 4E 05 F1 | 	add	fp, #72
13b1c     A7 FA 61 FC | 	wrlong	result1, fp
13b20     18 4E 85 F1 | 	sub	fp, #24
13b24     A7 12 02 F6 | 	mov	arg01, fp
13b28     30 4E 85 F1 | 	sub	fp, #48
13b2c     EC EE BF FD | 	call	#_converttoint
13b30     4C 4E 05 F1 | 	add	fp, #76
13b34     A7 FA 61 FC | 	wrlong	result1, fp
13b38                 | ' 
13b38                 | ' t5=pop()
13b38                 | ' t4=pop()
13b38                 | ' t3=pop()
13b38                 | ' t2=pop()
13b38                 | ' t1=pop()
13b38                 | ' 
13b38                 | ' ' do convert, defsprite is not a racing command
13b38                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
13b38                 | '  
13b38                 | ' ' todo: check parameters for linits
13b38                 | ' if sprite(a1)<> nil then delete(sprite(a1))
13b38     10 4E 85 F1 | 	sub	fp, #16
13b3c     A7 16 02 FB | 	rdlong	arg03, fp
13b40     3C 4E 85 F1 | 	sub	fp, #60
13b44     02 16 66 F0 | 	shl	arg03, #2
13b48     7B 00 00 FF 
13b4c     18 E4 05 F1 | 	add	objptr, ##63000
13b50     F2 16 02 F1 | 	add	arg03, objptr
13b54     0B 17 0A FB | 	rdlong	arg03, arg03 wz
13b58     7B 00 00 FF 
13b5c     18 E4 85 F1 | 	sub	objptr, ##63000
13b60     2C 00 90 AD |  if_e	jmp	#LR__1610
13b64     3C 4E 05 F1 | 	add	fp, #60
13b68     A7 16 02 FB | 	rdlong	arg03, fp
13b6c     3C 4E 85 F1 | 	sub	fp, #60
13b70     02 16 66 F0 | 	shl	arg03, #2
13b74     7B 00 00 FF 
13b78     18 E4 05 F1 | 	add	objptr, ##63000
13b7c     F2 16 02 F1 | 	add	arg03, objptr
13b80     0B 13 02 FB | 	rdlong	arg01, arg03
13b84     7B 00 00 FF 
13b88     18 E4 85 F1 | 	sub	objptr, ##63000
13b8c     D0 C6 B0 FD | 	call	#__system___gc_free
13b90                 | LR__1610
13b90     3C 4E 05 F1 | 	add	fp, #60
13b94     A7 1E 02 FB | 	rdlong	local01, fp
13b98     0C 4E 05 F1 | 	add	fp, #12
13b9c     A7 16 02 FB | 	rdlong	arg03, fp
13ba0     04 4E 05 F1 | 	add	fp, #4
13ba4     A7 14 02 FB | 	rdlong	arg02, fp
13ba8     0A 17 02 FD | 	qmul	arg03, arg02
13bac     02 1E 66 F0 | 	shl	local01, #2
13bb0     7B 00 00 FF 
13bb4     18 E4 05 F1 | 	add	objptr, ##63000
13bb8     F2 1E 02 F1 | 	add	local01, objptr
13bbc     4C 4E 85 F1 | 	sub	fp, #76
13bc0     7B 00 00 FF 
13bc4     18 E4 85 F1 | 	sub	objptr, ##63000
13bc8     18 12 62 FD | 	getqx	arg01
13bcc     54 C5 B0 FD | 	call	#__system___gc_alloc_managed
13bd0     0F FB 61 FC | 	wrlong	result1, local01
13bd4                 | ' for y=a3 to a3+a5-1
13bd4     44 4E 05 F1 | 	add	fp, #68
13bd8     A7 20 02 FB | 	rdlong	local02, fp
13bdc     0C 4E 05 F1 | 	add	fp, #12
13be0     A7 20 62 FC | 	wrlong	local02, fp
13be4     0C 4E 85 F1 | 	sub	fp, #12
13be8     A7 22 02 FB | 	rdlong	local03, fp
13bec     08 4E 05 F1 | 	add	fp, #8
13bf0     A7 24 02 FB | 	rdlong	local04, fp
13bf4     4C 4E 85 F1 | 	sub	fp, #76
13bf8     12 23 02 F1 | 	add	local03, local04
13bfc                 | LR__1611
13bfc     50 4E 05 F1 | 	add	fp, #80
13c00     A7 20 02 FB | 	rdlong	local02, fp
13c04     50 4E 85 F1 | 	sub	fp, #80
13c08     11 21 52 F2 | 	cmps	local02, local03 wc
13c0c     10 01 90 3D |  if_ae	jmp	#LR__1614
13c10                 | '   for x=a2 to a4+a2-1
13c10     40 4E 05 F1 | 	add	fp, #64
13c14     A7 1E 02 FB | 	rdlong	local01, fp
13c18     7B 00 00 FF 
13c1c     9C E4 05 F1 | 	add	objptr, ##63132
13c20     F2 1E 62 FC | 	wrlong	local01, objptr
13c24     7B 00 00 FF 
13c28     9C E4 85 F1 | 	sub	objptr, ##63132
13c2c     08 4E 05 F1 | 	add	fp, #8
13c30     A7 26 02 FB | 	rdlong	local05, fp
13c34     08 4E 85 F1 | 	sub	fp, #8
13c38     A7 28 02 FB | 	rdlong	local06, fp
13c3c     40 4E 85 F1 | 	sub	fp, #64
13c40     14 27 02 F1 | 	add	local05, local06
13c44                 | LR__1612
13c44     7B 00 00 FF 
13c48     9C E4 05 F1 | 	add	objptr, ##63132
13c4c     F2 1E 02 FB | 	rdlong	local01, objptr
13c50     7B 00 00 FF 
13c54     9C E4 85 F1 | 	sub	objptr, ##63132
13c58     13 1F 52 F2 | 	cmps	local01, local05 wc
13c5c     A8 00 90 3D |  if_ae	jmp	#LR__1613
13c60     3C 4E 05 F1 | 	add	fp, #60
13c64     A7 28 02 FB | 	rdlong	local06, fp
13c68     04 4E 05 F1 | 	add	fp, #4
13c6c     A7 24 02 FB | 	rdlong	local04, fp
13c70     10 4E 05 F1 | 	add	fp, #16
13c74     A7 20 02 FB | 	rdlong	local02, fp
13c78     10 1F 02 F6 | 	mov	local01, local02
13c7c     0C 4E 85 F1 | 	sub	fp, #12
13c80     A7 16 02 FB | 	rdlong	arg03, fp
13c84     0B 1F 82 F1 | 	sub	local01, arg03
13c88     04 4E 05 F1 | 	add	fp, #4
13c8c     A7 16 02 FB | 	rdlong	arg03, fp
13c90     0B 1F 02 FD | 	qmul	local01, arg03
13c94     02 28 66 F0 | 	shl	local06, #2
13c98     7B 00 00 FF 
13c9c     18 E4 05 F1 | 	add	objptr, ##63000
13ca0     F2 28 02 F1 | 	add	local06, objptr
13ca4     14 29 02 FB | 	rdlong	local06, local06
13ca8     84 E4 05 F1 | 	add	objptr, #132
13cac     F2 1E 02 FB | 	rdlong	local01, objptr
13cb0     7B 00 00 FF 
13cb4     9C E4 85 F1 | 	sub	objptr, ##63132
13cb8     0F 2B 02 F6 | 	mov	local07, local01
13cbc     12 2B 82 F1 | 	sub	local07, local04
13cc0     F2 12 02 FB | 	rdlong	arg01, objptr
13cc4     0F 13 02 F1 | 	add	arg01, local01
13cc8     48 4E 85 F1 | 	sub	fp, #72
13ccc     0A 20 66 F0 | 	shl	local02, #10
13cd0     10 13 02 F1 | 	add	arg01, local02
13cd4     18 24 62 FD | 	getqx	local04
13cd8     12 2B 02 F1 | 	add	local07, local04
13cdc     14 2B 02 F1 | 	add	local07, local06
13ce0     B0 50 B0 FD | 	call	#_pspeek
13ce4     15 FB 41 FC | 	wrbyte	result1, local07
13ce8     7B 00 00 FF 
13cec     9C E4 05 F1 | 	add	objptr, ##63132
13cf0     F2 2A 02 FB | 	rdlong	local07, objptr
13cf4     01 2A 06 F1 | 	add	local07, #1
13cf8     F2 2A 62 FC | 	wrlong	local07, objptr
13cfc     7B 00 00 FF 
13d00     9C E4 85 F1 | 	sub	objptr, ##63132
13d04     3C FF 9F FD | 	jmp	#LR__1612
13d08                 | LR__1613
13d08     50 4E 05 F1 | 	add	fp, #80
13d0c     A7 2A 02 FB | 	rdlong	local07, fp
13d10     01 2A 06 F1 | 	add	local07, #1
13d14     A7 2A 62 FC | 	wrlong	local07, fp
13d18     50 4E 85 F1 | 	sub	fp, #80
13d1c     DC FE 9F FD | 	jmp	#LR__1611
13d20                 | LR__1614
13d20     3C 4E 05 F1 | 	add	fp, #60
13d24     A7 2A 02 FB | 	rdlong	local07, fp
13d28     15 13 02 F6 | 	mov	arg01, local07
13d2c     3C 4E 85 F1 | 	sub	fp, #60
13d30     02 2A 66 F0 | 	shl	local07, #2
13d34     7B 00 00 FF 
13d38     18 E4 05 F1 | 	add	objptr, ##63000
13d3c     F2 2A 02 F1 | 	add	local07, objptr
13d40     15 15 02 FB | 	rdlong	arg02, local07
13d44     7B 00 00 FF 
13d48     18 E4 85 F1 | 	sub	objptr, ##63000
13d4c     68 64 B0 FD | 	call	#_hg010b_spin2_setspriteptr
13d50     3C 4E 05 F1 | 	add	fp, #60
13d54     A7 12 02 FB | 	rdlong	arg01, fp
13d58     0C 4E 05 F1 | 	add	fp, #12
13d5c     A7 14 02 FB | 	rdlong	arg02, fp
13d60     04 4E 05 F1 | 	add	fp, #4
13d64     A7 16 02 FB | 	rdlong	arg03, fp
13d68     4C 4E 85 F1 | 	sub	fp, #76
13d6c     BC 64 B0 FD | 	call	#_hg010b_spin2_setspritesize
13d70     A7 F0 03 F6 | 	mov	ptra, fp
13d74     B2 00 A0 FD | 	call	#popregs_
13d78                 | _do_defsprite_ret
13d78     2D 00 64 FD | 	ret
13d7c                 | 
13d7c                 | ' 
13d7c                 | ' sub do_sprite
13d7c                 | _do_sprite
13d7c     00 4A 05 F6 | 	mov	COUNT_, #0
13d80     A8 00 A0 FD | 	call	#pushregs_
13d84     30 F0 07 F1 | 	add	ptra, #48
13d88     3C 63 BF FD | 	call	#_pop
13d8c     FD 16 02 F6 | 	mov	arg03, result1
13d90     FE 14 02 F6 | 	mov	arg02, result2
13d94     FF 12 02 F6 | 	mov	arg01, result3
13d98     18 4E 05 F1 | 	add	fp, #24
13d9c     A7 16 62 FC | 	wrlong	arg03, fp
13da0     04 4E 05 F1 | 	add	fp, #4
13da4     A7 14 62 FC | 	wrlong	arg02, fp
13da8     04 4E 05 F1 | 	add	fp, #4
13dac     A7 12 62 FC | 	wrlong	arg01, fp
13db0     20 4E 85 F1 | 	sub	fp, #32
13db4     10 63 BF FD | 	call	#_pop
13db8     FD 16 02 F6 | 	mov	arg03, result1
13dbc     FE 14 02 F6 | 	mov	arg02, result2
13dc0     FF 12 02 F6 | 	mov	arg01, result3
13dc4     0C 4E 05 F1 | 	add	fp, #12
13dc8     A7 16 62 FC | 	wrlong	arg03, fp
13dcc     04 4E 05 F1 | 	add	fp, #4
13dd0     A7 14 62 FC | 	wrlong	arg02, fp
13dd4     04 4E 05 F1 | 	add	fp, #4
13dd8     A7 12 62 FC | 	wrlong	arg01, fp
13ddc     14 4E 85 F1 | 	sub	fp, #20
13de0     E4 62 BF FD | 	call	#_pop
13de4     FF 16 02 F6 | 	mov	arg03, result3
13de8     A7 FA 61 FC | 	wrlong	result1, fp
13dec     04 4E 05 F1 | 	add	fp, #4
13df0     A7 FC 61 FC | 	wrlong	result2, fp
13df4     04 4E 05 F1 | 	add	fp, #4
13df8     A7 16 62 FC | 	wrlong	arg03, fp
13dfc     08 4E 85 F1 | 	sub	fp, #8
13e00     A7 12 02 F6 | 	mov	arg01, fp
13e04     14 EC BF FD | 	call	#_converttoint
13e08     24 4E 05 F1 | 	add	fp, #36
13e0c     A7 FA 61 FC | 	wrlong	result1, fp
13e10     18 4E 85 F1 | 	sub	fp, #24
13e14     A7 12 02 F6 | 	mov	arg01, fp
13e18     0C 4E 85 F1 | 	sub	fp, #12
13e1c     FC EB BF FD | 	call	#_converttoint
13e20     28 4E 05 F1 | 	add	fp, #40
13e24     A7 FA 61 FC | 	wrlong	result1, fp
13e28     10 4E 85 F1 | 	sub	fp, #16
13e2c     A7 12 02 F6 | 	mov	arg01, fp
13e30     18 4E 85 F1 | 	sub	fp, #24
13e34     E4 EB BF FD | 	call	#_converttoint
13e38     2C 4E 05 F1 | 	add	fp, #44
13e3c     A7 FA 61 FC | 	wrlong	result1, fp
13e40     08 4E 85 F1 | 	sub	fp, #8
13e44     A7 12 02 FB | 	rdlong	arg01, fp
13e48     04 4E 05 F1 | 	add	fp, #4
13e4c     A7 14 02 FB | 	rdlong	arg02, fp
13e50     FD 16 02 F6 | 	mov	arg03, result1
13e54     28 4E 85 F1 | 	sub	fp, #40
13e58     84 63 B0 FD | 	call	#_hg010b_spin2_setspritepos
13e5c     A7 F0 03 F6 | 	mov	ptra, fp
13e60     B2 00 A0 FD | 	call	#popregs_
13e64                 | _do_sprite_ret
13e64     2D 00 64 FD | 	ret
13e68                 | 
13e68                 | ' 
13e68                 | ' sub do_mousex
13e68                 | _do_mousex
13e68     00 4A 05 F6 | 	mov	COUNT_, #0
13e6c     A8 00 A0 FD | 	call	#pushregs_
13e70     0C F0 07 F1 | 	add	ptra, #12
13e74     08 4E 05 F1 | 	add	fp, #8
13e78     A7 3A 68 FC | 	wrlong	#29, fp
13e7c     08 4E 85 F1 | 	sub	fp, #8
13e80     7A 00 00 FF 
13e84     D0 E5 05 F1 | 	add	objptr, ##62928
13e88     F2 12 02 FB | 	rdlong	arg01, objptr
13e8c     7A 00 00 FF 
13e90     D0 E5 85 F1 | 	sub	objptr, ##62928
13e94     A7 12 62 FC | 	wrlong	arg01, fp
13e98     A7 12 02 F6 | 	mov	arg01, fp
13e9c     C0 62 BF FD | 	call	#_push
13ea0     A7 F0 03 F6 | 	mov	ptra, fp
13ea4     B2 00 A0 FD | 	call	#popregs_
13ea8                 | _do_mousex_ret
13ea8     2D 00 64 FD | 	ret
13eac                 | 
13eac                 | ' 
13eac                 | ' sub do_mousey
13eac                 | _do_mousey
13eac     00 4A 05 F6 | 	mov	COUNT_, #0
13eb0     A8 00 A0 FD | 	call	#pushregs_
13eb4     0C F0 07 F1 | 	add	ptra, #12
13eb8     08 4E 05 F1 | 	add	fp, #8
13ebc     A7 3A 68 FC | 	wrlong	#29, fp
13ec0     08 4E 85 F1 | 	sub	fp, #8
13ec4     7A 00 00 FF 
13ec8     D4 E5 05 F1 | 	add	objptr, ##62932
13ecc     F2 12 02 FB | 	rdlong	arg01, objptr
13ed0     7A 00 00 FF 
13ed4     D4 E5 85 F1 | 	sub	objptr, ##62932
13ed8     A7 12 62 FC | 	wrlong	arg01, fp
13edc     A7 12 02 F6 | 	mov	arg01, fp
13ee0     7C 62 BF FD | 	call	#_push
13ee4     A7 F0 03 F6 | 	mov	ptra, fp
13ee8     B2 00 A0 FD | 	call	#popregs_
13eec                 | _do_mousey_ret
13eec     2D 00 64 FD | 	ret
13ef0                 | 
13ef0                 | ' 
13ef0                 | ' sub do_mousew
13ef0                 | _do_mousew
13ef0     00 4A 05 F6 | 	mov	COUNT_, #0
13ef4     A8 00 A0 FD | 	call	#pushregs_
13ef8     0C F0 07 F1 | 	add	ptra, #12
13efc     08 4E 05 F1 | 	add	fp, #8
13f00     A7 38 68 FC | 	wrlong	#28, fp
13f04     08 4E 85 F1 | 	sub	fp, #8
13f08     7A 00 00 FF 
13f0c     DC E5 05 F1 | 	add	objptr, ##62940
13f10     F2 12 02 FB | 	rdlong	arg01, objptr
13f14     7A 00 00 FF 
13f18     DC E5 85 F1 | 	sub	objptr, ##62940
13f1c     A7 12 62 FC | 	wrlong	arg01, fp
13f20     A7 12 02 F6 | 	mov	arg01, fp
13f24     38 62 BF FD | 	call	#_push
13f28     A7 F0 03 F6 | 	mov	ptra, fp
13f2c     B2 00 A0 FD | 	call	#popregs_
13f30                 | _do_mousew_ret
13f30     2D 00 64 FD | 	ret
13f34                 | 
13f34                 | ' 
13f34                 | ' sub do_mousek
13f34                 | _do_mousek
13f34     00 4A 05 F6 | 	mov	COUNT_, #0
13f38     A8 00 A0 FD | 	call	#pushregs_
13f3c     0C F0 07 F1 | 	add	ptra, #12
13f40     08 4E 05 F1 | 	add	fp, #8
13f44     A7 3A 68 FC | 	wrlong	#29, fp
13f48     08 4E 85 F1 | 	sub	fp, #8
13f4c     7A 00 00 FF 
13f50     D8 E5 05 F1 | 	add	objptr, ##62936
13f54     F2 12 02 FB | 	rdlong	arg01, objptr
13f58     7A 00 00 FF 
13f5c     D8 E5 85 F1 | 	sub	objptr, ##62936
13f60     A7 12 62 FC | 	wrlong	arg01, fp
13f64     A7 12 02 F6 | 	mov	arg01, fp
13f68     F4 61 BF FD | 	call	#_push
13f6c     A7 F0 03 F6 | 	mov	ptra, fp
13f70     B2 00 A0 FD | 	call	#popregs_
13f74                 | _do_mousek_ret
13f74     2D 00 64 FD | 	ret
13f78                 | 
13f78                 | ' 
13f78                 | ' 
13f78                 | ' sub do_rdpin
13f78                 | _do_rdpin
13f78     00 4A 05 F6 | 	mov	COUNT_, #0
13f7c     A8 00 A0 FD | 	call	#pushregs_
13f80     0C F0 07 F1 | 	add	ptra, #12
13f84     40 61 BF FD | 	call	#_pop
13f88     A7 FA 61 FC | 	wrlong	result1, fp
13f8c     04 4E 05 F1 | 	add	fp, #4
13f90     A7 FC 61 FC | 	wrlong	result2, fp
13f94     04 4E 05 F1 | 	add	fp, #4
13f98     A7 FE 61 FC | 	wrlong	result3, fp
13f9c     08 4E 85 F1 | 	sub	fp, #8
13fa0     A7 12 02 F6 | 	mov	arg01, fp
13fa4     74 EA BF FD | 	call	#_converttoint
13fa8     FD FA 89 FA | 	rdpin	result1, result1
13fac     7B 00 00 FF 
13fb0     F4 E4 05 F1 | 	add	objptr, ##63220
13fb4     F2 FA 61 FC | 	wrlong	result1, objptr
13fb8     7B 00 00 FF 
13fbc     F4 E4 85 F1 | 	sub	objptr, ##63220
13fc0     08 4E 05 F1 | 	add	fp, #8
13fc4     A7 3A 68 FC | 	wrlong	#29, fp
13fc8     08 4E 85 F1 | 	sub	fp, #8
13fcc     A7 08 68 FC | 	wrlong	#4, fp
13fd0     A7 12 02 F6 | 	mov	arg01, fp
13fd4     88 61 BF FD | 	call	#_push
13fd8     A7 F0 03 F6 | 	mov	ptra, fp
13fdc     B2 00 A0 FD | 	call	#popregs_
13fe0                 | _do_rdpin_ret
13fe0     2D 00 64 FD | 	ret
13fe4                 | 
13fe4                 | ' 
13fe4                 | ' sub do_rqpin
13fe4                 | _do_rqpin
13fe4     00 4A 05 F6 | 	mov	COUNT_, #0
13fe8     A8 00 A0 FD | 	call	#pushregs_
13fec     0C F0 07 F1 | 	add	ptra, #12
13ff0     D4 60 BF FD | 	call	#_pop
13ff4     A7 FA 61 FC | 	wrlong	result1, fp
13ff8     04 4E 05 F1 | 	add	fp, #4
13ffc     A7 FC 61 FC | 	wrlong	result2, fp
14000     04 4E 05 F1 | 	add	fp, #4
14004     A7 FE 61 FC | 	wrlong	result3, fp
14008     08 4E 85 F1 | 	sub	fp, #8
1400c     A7 12 02 F6 | 	mov	arg01, fp
14010     08 EA BF FD | 	call	#_converttoint
14014     FD 12 02 F6 | 	mov	arg01, result1
14018     00 FA 05 F6 | 	mov	result1, #0
1401c     09 FB 81 FA | 	rqpin	result1, arg01
14020     7B 00 00 FF 
14024     F4 E4 05 F1 | 	add	objptr, ##63220
14028     F2 FA 61 FC | 	wrlong	result1, objptr
1402c     7B 00 00 FF 
14030     F4 E4 85 F1 | 	sub	objptr, ##63220
14034     08 4E 05 F1 | 	add	fp, #8
14038     A7 3A 68 FC | 	wrlong	#29, fp
1403c     08 4E 85 F1 | 	sub	fp, #8
14040     A7 08 68 FC | 	wrlong	#4, fp
14044     A7 12 02 F6 | 	mov	arg01, fp
14048     14 61 BF FD | 	call	#_push
1404c     A7 F0 03 F6 | 	mov	ptra, fp
14050     B2 00 A0 FD | 	call	#popregs_
14054                 | _do_rqpin_ret
14054     2D 00 64 FD | 	ret
14058                 | 
14058                 | ' 
14058                 | ' sub do_pinread
14058                 | _do_pinread
14058     00 4A 05 F6 | 	mov	COUNT_, #0
1405c     A8 00 A0 FD | 	call	#pushregs_
14060     0C F0 07 F1 | 	add	ptra, #12
14064     60 60 BF FD | 	call	#_pop
14068     A7 FA 61 FC | 	wrlong	result1, fp
1406c     04 4E 05 F1 | 	add	fp, #4
14070     A7 FC 61 FC | 	wrlong	result2, fp
14074     04 4E 05 F1 | 	add	fp, #4
14078     A7 FE 61 FC | 	wrlong	result3, fp
1407c     08 4E 85 F1 | 	sub	fp, #8
14080     A7 12 02 F6 | 	mov	arg01, fp
14084     94 E9 BF FD | 	call	#_converttoint
14088     FD 12 02 F6 | 	mov	arg01, result1
1408c     20 12 CE F7 | 	test	arg01, #32 wz
14090     FF FB 01 56 |  if_ne	mov	result1, inb
14094     FE FB 01 A6 |  if_e	mov	result1, ina
14098     09 FB 41 F0 | 	shr	result1, arg01
1409c     06 12 46 F0 | 	shr	arg01, #6
140a0     09 FB 41 F7 | 	zerox	result1, arg01
140a4     7B 00 00 FF 
140a8     F4 E4 05 F1 | 	add	objptr, ##63220
140ac     F2 FA 61 FC | 	wrlong	result1, objptr
140b0     7B 00 00 FF 
140b4     F4 E4 85 F1 | 	sub	objptr, ##63220
140b8     08 4E 05 F1 | 	add	fp, #8
140bc     A7 3A 68 FC | 	wrlong	#29, fp
140c0     08 4E 85 F1 | 	sub	fp, #8
140c4     A7 08 68 FC | 	wrlong	#4, fp
140c8     A7 12 02 F6 | 	mov	arg01, fp
140cc     90 60 BF FD | 	call	#_push
140d0     A7 F0 03 F6 | 	mov	ptra, fp
140d4     B2 00 A0 FD | 	call	#popregs_
140d8                 | _do_pinread_ret
140d8     2D 00 64 FD | 	ret
140dc                 | 
140dc                 | ' 
140dc                 | ' sub do_gettime
140dc                 | _do_gettime
140dc     02 4A 05 F6 | 	mov	COUNT_, #2
140e0     A8 00 A0 FD | 	call	#pushregs_
140e4     14 F0 07 F1 | 	add	ptra, #20
140e8                 | ' 
140e8                 | ' const asm 
140e8     1A 1E 72 FD | 	getct	local01 wc
140ec     1A 20 62 FD | 	getct	local02
140f0                 | ' 
140f0                 | ' return hi1, lo1
140f0     10 FD 01 F6 | 	mov	result2, local02
140f4     A7 1E 62 FC | 	wrlong	local01, fp
140f8     04 4E 05 F1 | 	add	fp, #4
140fc     A7 FC 61 FC | 	wrlong	result2, fp
14100     0C 4E 05 F1 | 	add	fp, #12
14104     A7 3A 68 FC | 	wrlong	#29, fp
14108     0C 4E 85 F1 | 	sub	fp, #12
1410c     A7 12 02 FB | 	rdlong	arg01, fp
14110     04 4E 05 F1 | 	add	fp, #4
14114     A7 12 62 FC | 	wrlong	arg01, fp
14118     08 4E 85 F1 | 	sub	fp, #8
1411c     A7 12 02 FB | 	rdlong	arg01, fp
14120     0C 4E 05 F1 | 	add	fp, #12
14124     A7 12 62 FC | 	wrlong	arg01, fp
14128     04 4E 85 F1 | 	sub	fp, #4
1412c     A7 12 02 F6 | 	mov	arg01, fp
14130     08 4E 85 F1 | 	sub	fp, #8
14134     28 60 BF FD | 	call	#_push
14138     A7 F0 03 F6 | 	mov	ptra, fp
1413c     B2 00 A0 FD | 	call	#popregs_
14140                 | _do_gettime_ret
14140     2D 00 64 FD | 	ret
14144                 | 
14144                 | '    
14144                 | ' 
14144                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
14144                 | ' 
14144                 | ' '' ----------------------------- Clear the screen
14144                 | ' 
14144                 | ' sub do_cls
14144                 | _do_cls
14144     57 00 00 FF 
14148     20 E4 05 F1 | 	add	objptr, ##44576
1414c     F2 12 02 FB | 	rdlong	arg01, objptr
14150     04 E4 85 F1 | 	sub	objptr, #4
14154     F2 14 02 FB | 	rdlong	arg02, objptr
14158     57 00 00 FF 
1415c     1C E4 85 F1 | 	sub	objptr, ##44572
14160     80 6D B0 FD | 	call	#_hg010b_spin2_cls
14164     57 00 00 FF 
14168     20 E4 05 F1 | 	add	objptr, ##44576
1416c     F2 14 02 FB | 	rdlong	arg02, objptr
14170     14 E4 85 F1 | 	sub	objptr, #20
14174     F2 14 62 FC | 	wrlong	arg02, objptr
14178     57 00 00 FF 
1417c     0C E4 85 F1 | 	sub	objptr, ##44556
14180                 | ' cls(ink,paper): plot_color=ink: print
14180     00 12 06 F6 | 	mov	arg01, #0
14184     E4 DA B0 FD | 	call	#__system___getiolock_0474
14188     FD 12 02 F6 | 	mov	arg01, result1
1418c     4C 81 B0 FD | 	call	#__system___lockmem
14190     00 12 06 F6 | 	mov	arg01, #0
14194     0A 14 06 F6 | 	mov	arg02, #10
14198     00 16 06 F6 | 	mov	arg03, #0
1419c     E8 8D B0 FD | 	call	#__system___basic_print_char
141a0     00 12 06 F6 | 	mov	arg01, #0
141a4     C4 DA B0 FD | 	call	#__system___getiolock_0474
141a8     FD 00 68 FC | 	wrlong	#0, result1
141ac                 | _do_cls_ret
141ac     2D 00 64 FD | 	ret
141b0                 | 
141b0                 | ' 
141b0                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
141b0                 | ' 
141b0                 | ' sub do_color
141b0                 | _do_color
141b0     03 4A 05 F6 | 	mov	COUNT_, #3
141b4     A8 00 A0 FD | 	call	#pushregs_
141b8     0C 5F BF FD | 	call	#_pop
141bc     FD 1E 02 F6 | 	mov	local01, result1
141c0     FE 20 02 F6 | 	mov	local02, result2
141c4     FF 22 02 F6 | 	mov	local03, result3
141c8     57 00 00 FF 
141cc     0C E4 05 F1 | 	add	objptr, ##44556
141d0     F2 1E 62 FC | 	wrlong	local01, objptr
141d4     57 00 00 FF 
141d8     0C E4 85 F1 | 	sub	objptr, ##44556
141dc     A7 F0 03 F6 | 	mov	ptra, fp
141e0     B2 00 A0 FD | 	call	#popregs_
141e4                 | _do_color_ret
141e4     2D 00 64 FD | 	ret
141e8                 | 
141e8                 | ' 
141e8                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
141e8                 | ' 
141e8                 | ' sub do_plot
141e8                 | _do_plot
141e8     00 4A 05 F6 | 	mov	COUNT_, #0
141ec     A8 00 A0 FD | 	call	#pushregs_
141f0     20 F0 07 F1 | 	add	ptra, #32
141f4     D0 5E BF FD | 	call	#_pop
141f8     FD 16 02 F6 | 	mov	arg03, result1
141fc     FE 14 02 F6 | 	mov	arg02, result2
14200     FF 12 02 F6 | 	mov	arg01, result3
14204     0C 4E 05 F1 | 	add	fp, #12
14208     A7 16 62 FC | 	wrlong	arg03, fp
1420c     04 4E 05 F1 | 	add	fp, #4
14210     A7 14 62 FC | 	wrlong	arg02, fp
14214     04 4E 05 F1 | 	add	fp, #4
14218     A7 12 62 FC | 	wrlong	arg01, fp
1421c     14 4E 85 F1 | 	sub	fp, #20
14220     A4 5E BF FD | 	call	#_pop
14224     FF 16 02 F6 | 	mov	arg03, result3
14228     A7 FA 61 FC | 	wrlong	result1, fp
1422c     04 4E 05 F1 | 	add	fp, #4
14230     A7 FC 61 FC | 	wrlong	result2, fp
14234     04 4E 05 F1 | 	add	fp, #4
14238     A7 16 62 FC | 	wrlong	arg03, fp
1423c     08 4E 85 F1 | 	sub	fp, #8
14240     A7 12 02 F6 | 	mov	arg01, fp
14244     D4 E7 BF FD | 	call	#_converttoint
14248     18 4E 05 F1 | 	add	fp, #24
1424c     A7 FA 61 FC | 	wrlong	result1, fp
14250     0C 4E 85 F1 | 	sub	fp, #12
14254     A7 12 02 F6 | 	mov	arg01, fp
14258     0C 4E 85 F1 | 	sub	fp, #12
1425c     BC E7 BF FD | 	call	#_converttoint
14260     1C 4E 05 F1 | 	add	fp, #28
14264     A7 FA 61 FC | 	wrlong	result1, fp
14268     04 4E 85 F1 | 	sub	fp, #4
1426c     A7 16 02 FB | 	rdlong	arg03, fp
14270     57 00 00 FF 
14274     10 E4 05 F1 | 	add	objptr, ##44560
14278     F2 16 62 FC | 	wrlong	arg03, objptr
1427c     04 4E 05 F1 | 	add	fp, #4
14280     A7 14 02 FB | 	rdlong	arg02, fp
14284     1C 4E 85 F1 | 	sub	fp, #28
14288     04 E4 05 F1 | 	add	objptr, #4
1428c     F2 14 62 FC | 	wrlong	arg02, objptr
14290     04 E4 85 F1 | 	sub	objptr, #4
14294     F2 12 02 FB | 	rdlong	arg01, objptr
14298     04 E4 85 F1 | 	sub	objptr, #4
1429c     F2 16 02 FB | 	rdlong	arg03, objptr
142a0     57 00 00 FF 
142a4     0C E4 85 F1 | 	sub	objptr, ##44556
142a8     CC 5F B0 FD | 	call	#_hg010b_spin2_putpixel
142ac     A7 F0 03 F6 | 	mov	ptra, fp
142b0     B2 00 A0 FD | 	call	#popregs_
142b4                 | _do_plot_ret
142b4     2D 00 64 FD | 	ret
142b8                 | 
142b8                 | ' 
142b8                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
142b8                 | ' 
142b8                 | ' sub do_draw
142b8                 | _do_draw
142b8     00 4A 05 F6 | 	mov	COUNT_, #0
142bc     A8 00 A0 FD | 	call	#pushregs_
142c0     20 F0 07 F1 | 	add	ptra, #32
142c4     00 5E BF FD | 	call	#_pop
142c8     FD 1A 02 F6 | 	mov	arg05, result1
142cc     FE 18 02 F6 | 	mov	arg04, result2
142d0     FF 16 02 F6 | 	mov	arg03, result3
142d4     0C 4E 05 F1 | 	add	fp, #12
142d8     A7 1A 62 FC | 	wrlong	arg05, fp
142dc     04 4E 05 F1 | 	add	fp, #4
142e0     A7 18 62 FC | 	wrlong	arg04, fp
142e4     04 4E 05 F1 | 	add	fp, #4
142e8     A7 16 62 FC | 	wrlong	arg03, fp
142ec     14 4E 85 F1 | 	sub	fp, #20
142f0     D4 5D BF FD | 	call	#_pop
142f4     FF 1A 02 F6 | 	mov	arg05, result3
142f8     A7 FA 61 FC | 	wrlong	result1, fp
142fc     04 4E 05 F1 | 	add	fp, #4
14300     A7 FC 61 FC | 	wrlong	result2, fp
14304     04 4E 05 F1 | 	add	fp, #4
14308     A7 1A 62 FC | 	wrlong	arg05, fp
1430c     08 4E 85 F1 | 	sub	fp, #8
14310     A7 12 02 F6 | 	mov	arg01, fp
14314     04 E7 BF FD | 	call	#_converttoint
14318     18 4E 05 F1 | 	add	fp, #24
1431c     A7 FA 61 FC | 	wrlong	result1, fp
14320     0C 4E 85 F1 | 	sub	fp, #12
14324     A7 12 02 F6 | 	mov	arg01, fp
14328     0C 4E 85 F1 | 	sub	fp, #12
1432c     EC E6 BF FD | 	call	#_converttoint
14330     1C 4E 05 F1 | 	add	fp, #28
14334     A7 FA 61 FC | 	wrlong	result1, fp
14338     57 00 00 FF 
1433c     10 E4 05 F1 | 	add	objptr, ##44560
14340     F2 12 02 FB | 	rdlong	arg01, objptr
14344     04 E4 05 F1 | 	add	objptr, #4
14348     F2 14 02 FB | 	rdlong	arg02, objptr
1434c     04 4E 85 F1 | 	sub	fp, #4
14350     A7 16 02 FB | 	rdlong	arg03, fp
14354     FD 18 02 F6 | 	mov	arg04, result1
14358     18 4E 85 F1 | 	sub	fp, #24
1435c     08 E4 85 F1 | 	sub	objptr, #8
14360     F2 1A 02 FB | 	rdlong	arg05, objptr
14364     57 00 00 FF 
14368     0C E4 85 F1 | 	sub	objptr, ##44556
1436c     B8 61 B0 FD | 	call	#_hg010b_spin2_draw
14370     18 4E 05 F1 | 	add	fp, #24
14374     A7 1A 02 FB | 	rdlong	arg05, fp
14378     57 00 00 FF 
1437c     10 E4 05 F1 | 	add	objptr, ##44560
14380     F2 1A 62 FC | 	wrlong	arg05, objptr
14384     04 4E 05 F1 | 	add	fp, #4
14388     A7 1A 02 FB | 	rdlong	arg05, fp
1438c     1C 4E 85 F1 | 	sub	fp, #28
14390     04 E4 05 F1 | 	add	objptr, #4
14394     F2 1A 62 FC | 	wrlong	arg05, objptr
14398     57 00 00 FF 
1439c     14 E4 85 F1 | 	sub	objptr, ##44564
143a0     A7 F0 03 F6 | 	mov	ptra, fp
143a4     B2 00 A0 FD | 	call	#popregs_
143a8                 | _do_draw_ret
143a8     2D 00 64 FD | 	ret
143ac                 | 
143ac                 | ' 
143ac                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
143ac                 | ' 
143ac                 | ' sub do_fcircle
143ac                 | _do_fcircle
143ac     02 4A 05 F6 | 	mov	COUNT_, #2
143b0     A8 00 A0 FD | 	call	#pushregs_
143b4     24 F0 07 F1 | 	add	ptra, #36
143b8     0C 5D BF FD | 	call	#_pop
143bc     FD 18 02 F6 | 	mov	arg04, result1
143c0     FE 16 02 F6 | 	mov	arg03, result2
143c4     FF 14 02 F6 | 	mov	arg02, result3
143c8     18 4E 05 F1 | 	add	fp, #24
143cc     A7 18 62 FC | 	wrlong	arg04, fp
143d0     04 4E 05 F1 | 	add	fp, #4
143d4     A7 16 62 FC | 	wrlong	arg03, fp
143d8     04 4E 05 F1 | 	add	fp, #4
143dc     A7 14 62 FC | 	wrlong	arg02, fp
143e0     20 4E 85 F1 | 	sub	fp, #32
143e4     E0 5C BF FD | 	call	#_pop
143e8     FD 18 02 F6 | 	mov	arg04, result1
143ec     FE 16 02 F6 | 	mov	arg03, result2
143f0     FF 1E 02 F6 | 	mov	local01, result3
143f4     0C 4E 05 F1 | 	add	fp, #12
143f8     A7 18 62 FC | 	wrlong	arg04, fp
143fc     04 4E 05 F1 | 	add	fp, #4
14400     A7 16 62 FC | 	wrlong	arg03, fp
14404     04 4E 05 F1 | 	add	fp, #4
14408     A7 1E 62 FC | 	wrlong	local01, fp
1440c     14 4E 85 F1 | 	sub	fp, #20
14410     B4 5C BF FD | 	call	#_pop
14414     A7 FA 61 FC | 	wrlong	result1, fp
14418     04 4E 05 F1 | 	add	fp, #4
1441c     A7 FC 61 FC | 	wrlong	result2, fp
14420     04 4E 05 F1 | 	add	fp, #4
14424     A7 FE 61 FC | 	wrlong	result3, fp
14428                 | ' 
14428                 | ' t3=pop()
14428                 | ' t2=pop()
14428                 | ' t1=pop()
14428                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
14428     FF 18 02 F6 | 	mov	arg04, result3
1442c     08 4E 85 F1 | 	sub	fp, #8
14430     1C 18 0E F2 | 	cmp	arg04, #28 wz
14434     08 4E 05 51 |  if_ne	add	fp, #8
14438     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1443c     08 4E 85 51 |  if_ne	sub	fp, #8
14440     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14444     7C 00 90 5D |  if_ne	jmp	#LR__1620
14448     14 4E 05 F1 | 	add	fp, #20
1444c     A7 1E 02 FB | 	rdlong	local01, fp
14450     14 4E 85 F1 | 	sub	fp, #20
14454     1C 1E 0E F2 | 	cmp	local01, #28 wz
14458     14 4E 05 51 |  if_ne	add	fp, #20
1445c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14460     14 4E 85 51 |  if_ne	sub	fp, #20
14464     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14468     58 00 90 5D |  if_ne	jmp	#LR__1620
1446c     20 4E 05 F1 | 	add	fp, #32
14470     A7 1E 02 FB | 	rdlong	local01, fp
14474     20 4E 85 F1 | 	sub	fp, #32
14478     1C 1E 0E F2 | 	cmp	local01, #28 wz
1447c     20 4E 05 51 |  if_ne	add	fp, #32
14480     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14484     20 4E 85 51 |  if_ne	sub	fp, #32
14488     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1448c     34 00 90 5D |  if_ne	jmp	#LR__1620
14490     A7 12 02 FB | 	rdlong	arg01, fp
14494     0C 4E 05 F1 | 	add	fp, #12
14498     A7 14 02 FB | 	rdlong	arg02, fp
1449c     0C 4E 05 F1 | 	add	fp, #12
144a0     A7 16 02 FB | 	rdlong	arg03, fp
144a4     18 4E 85 F1 | 	sub	fp, #24
144a8     57 00 00 FF 
144ac     0C E4 05 F1 | 	add	objptr, ##44556
144b0     F2 18 02 FB | 	rdlong	arg04, objptr
144b4     57 00 00 FF 
144b8     0C E4 85 F1 | 	sub	objptr, ##44556
144bc     EC 64 B0 FD | 	call	#_hg010b_spin2_fcircle
144c0                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
144c0     54 00 90 FD | 	jmp	#LR__1621
144c4                 | LR__1620
144c4     A7 12 02 F6 | 	mov	arg01, fp
144c8     50 E5 BF FD | 	call	#_converttoint
144cc     FD 1E 02 F6 | 	mov	local01, result1
144d0     0C 4E 05 F1 | 	add	fp, #12
144d4     A7 12 02 F6 | 	mov	arg01, fp
144d8     0C 4E 85 F1 | 	sub	fp, #12
144dc     3C E5 BF FD | 	call	#_converttoint
144e0     FD 20 02 F6 | 	mov	local02, result1
144e4     18 4E 05 F1 | 	add	fp, #24
144e8     A7 12 02 F6 | 	mov	arg01, fp
144ec     18 4E 85 F1 | 	sub	fp, #24
144f0     28 E5 BF FD | 	call	#_converttoint
144f4     FD 16 02 F6 | 	mov	arg03, result1
144f8     57 00 00 FF 
144fc     0C E4 05 F1 | 	add	objptr, ##44556
14500     F2 18 02 FB | 	rdlong	arg04, objptr
14504     57 00 00 FF 
14508     0C E4 85 F1 | 	sub	objptr, ##44556
1450c     0F 13 02 F6 | 	mov	arg01, local01
14510     10 15 02 F6 | 	mov	arg02, local02
14514     94 64 B0 FD | 	call	#_hg010b_spin2_fcircle
14518                 | LR__1621
14518     A7 F0 03 F6 | 	mov	ptra, fp
1451c     B2 00 A0 FD | 	call	#popregs_
14520                 | _do_fcircle_ret
14520     2D 00 64 FD | 	ret
14524                 | 
14524                 | ' 
14524                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
14524                 | ' 
14524                 | ' sub do_circle
14524                 | _do_circle
14524     02 4A 05 F6 | 	mov	COUNT_, #2
14528     A8 00 A0 FD | 	call	#pushregs_
1452c     24 F0 07 F1 | 	add	ptra, #36
14530     94 5B BF FD | 	call	#_pop
14534     FD 18 02 F6 | 	mov	arg04, result1
14538     FE 16 02 F6 | 	mov	arg03, result2
1453c     FF 14 02 F6 | 	mov	arg02, result3
14540     18 4E 05 F1 | 	add	fp, #24
14544     A7 18 62 FC | 	wrlong	arg04, fp
14548     04 4E 05 F1 | 	add	fp, #4
1454c     A7 16 62 FC | 	wrlong	arg03, fp
14550     04 4E 05 F1 | 	add	fp, #4
14554     A7 14 62 FC | 	wrlong	arg02, fp
14558     20 4E 85 F1 | 	sub	fp, #32
1455c     68 5B BF FD | 	call	#_pop
14560     FD 18 02 F6 | 	mov	arg04, result1
14564     FE 16 02 F6 | 	mov	arg03, result2
14568     FF 1E 02 F6 | 	mov	local01, result3
1456c     0C 4E 05 F1 | 	add	fp, #12
14570     A7 18 62 FC | 	wrlong	arg04, fp
14574     04 4E 05 F1 | 	add	fp, #4
14578     A7 16 62 FC | 	wrlong	arg03, fp
1457c     04 4E 05 F1 | 	add	fp, #4
14580     A7 1E 62 FC | 	wrlong	local01, fp
14584     14 4E 85 F1 | 	sub	fp, #20
14588     3C 5B BF FD | 	call	#_pop
1458c     A7 FA 61 FC | 	wrlong	result1, fp
14590     04 4E 05 F1 | 	add	fp, #4
14594     A7 FC 61 FC | 	wrlong	result2, fp
14598     04 4E 05 F1 | 	add	fp, #4
1459c     A7 FE 61 FC | 	wrlong	result3, fp
145a0                 | ' 
145a0                 | ' t3=pop()
145a0                 | ' t2=pop()
145a0                 | ' t1=pop()
145a0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
145a0     FF 18 02 F6 | 	mov	arg04, result3
145a4     08 4E 85 F1 | 	sub	fp, #8
145a8     1C 18 0E F2 | 	cmp	arg04, #28 wz
145ac     08 4E 05 51 |  if_ne	add	fp, #8
145b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
145b4     08 4E 85 51 |  if_ne	sub	fp, #8
145b8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
145bc     7C 00 90 5D |  if_ne	jmp	#LR__1630
145c0     14 4E 05 F1 | 	add	fp, #20
145c4     A7 1E 02 FB | 	rdlong	local01, fp
145c8     14 4E 85 F1 | 	sub	fp, #20
145cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
145d0     14 4E 05 51 |  if_ne	add	fp, #20
145d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
145d8     14 4E 85 51 |  if_ne	sub	fp, #20
145dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
145e0     58 00 90 5D |  if_ne	jmp	#LR__1630
145e4     20 4E 05 F1 | 	add	fp, #32
145e8     A7 1E 02 FB | 	rdlong	local01, fp
145ec     20 4E 85 F1 | 	sub	fp, #32
145f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
145f4     20 4E 05 51 |  if_ne	add	fp, #32
145f8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
145fc     20 4E 85 51 |  if_ne	sub	fp, #32
14600     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14604     34 00 90 5D |  if_ne	jmp	#LR__1630
14608     A7 12 02 FB | 	rdlong	arg01, fp
1460c     0C 4E 05 F1 | 	add	fp, #12
14610     A7 14 02 FB | 	rdlong	arg02, fp
14614     0C 4E 05 F1 | 	add	fp, #12
14618     A7 16 02 FB | 	rdlong	arg03, fp
1461c     18 4E 85 F1 | 	sub	fp, #24
14620     57 00 00 FF 
14624     0C E4 05 F1 | 	add	objptr, ##44556
14628     F2 18 02 FB | 	rdlong	arg04, objptr
1462c     57 00 00 FF 
14630     0C E4 85 F1 | 	sub	objptr, ##44556
14634     80 64 B0 FD | 	call	#_hg010b_spin2_circle
14638                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
14638     54 00 90 FD | 	jmp	#LR__1631
1463c                 | LR__1630
1463c     A7 12 02 F6 | 	mov	arg01, fp
14640     D8 E3 BF FD | 	call	#_converttoint
14644     FD 1E 02 F6 | 	mov	local01, result1
14648     0C 4E 05 F1 | 	add	fp, #12
1464c     A7 12 02 F6 | 	mov	arg01, fp
14650     0C 4E 85 F1 | 	sub	fp, #12
14654     C4 E3 BF FD | 	call	#_converttoint
14658     FD 20 02 F6 | 	mov	local02, result1
1465c     18 4E 05 F1 | 	add	fp, #24
14660     A7 12 02 F6 | 	mov	arg01, fp
14664     18 4E 85 F1 | 	sub	fp, #24
14668     B0 E3 BF FD | 	call	#_converttoint
1466c     FD 16 02 F6 | 	mov	arg03, result1
14670     57 00 00 FF 
14674     0C E4 05 F1 | 	add	objptr, ##44556
14678     F2 18 02 FB | 	rdlong	arg04, objptr
1467c     57 00 00 FF 
14680     0C E4 85 F1 | 	sub	objptr, ##44556
14684     0F 13 02 F6 | 	mov	arg01, local01
14688     10 15 02 F6 | 	mov	arg02, local02
1468c     28 64 B0 FD | 	call	#_hg010b_spin2_circle
14690                 | LR__1631
14690     A7 F0 03 F6 | 	mov	ptra, fp
14694     B2 00 A0 FD | 	call	#popregs_
14698                 | _do_circle_ret
14698     2D 00 64 FD | 	ret
1469c                 | 
1469c                 | ' 
1469c                 | ' ' -------------------------- Draw a rectangle
1469c                 | ' 
1469c                 | ' sub do_box
1469c                 | _do_box
1469c     03 4A 05 F6 | 	mov	COUNT_, #3
146a0     A8 00 A0 FD | 	call	#pushregs_
146a4     30 F0 07 F1 | 	add	ptra, #48
146a8     1C 5A BF FD | 	call	#_pop
146ac     FD 1A 02 F6 | 	mov	arg05, result1
146b0     FE 18 02 F6 | 	mov	arg04, result2
146b4     FF 16 02 F6 | 	mov	arg03, result3
146b8     24 4E 05 F1 | 	add	fp, #36
146bc     A7 1A 62 FC | 	wrlong	arg05, fp
146c0     04 4E 05 F1 | 	add	fp, #4
146c4     A7 18 62 FC | 	wrlong	arg04, fp
146c8     04 4E 05 F1 | 	add	fp, #4
146cc     A7 16 62 FC | 	wrlong	arg03, fp
146d0     2C 4E 85 F1 | 	sub	fp, #44
146d4     F0 59 BF FD | 	call	#_pop
146d8     FD 1A 02 F6 | 	mov	arg05, result1
146dc     FE 18 02 F6 | 	mov	arg04, result2
146e0     FF 16 02 F6 | 	mov	arg03, result3
146e4     18 4E 05 F1 | 	add	fp, #24
146e8     A7 1A 62 FC | 	wrlong	arg05, fp
146ec     04 4E 05 F1 | 	add	fp, #4
146f0     A7 18 62 FC | 	wrlong	arg04, fp
146f4     04 4E 05 F1 | 	add	fp, #4
146f8     A7 16 62 FC | 	wrlong	arg03, fp
146fc     20 4E 85 F1 | 	sub	fp, #32
14700     C4 59 BF FD | 	call	#_pop
14704     FD 1A 02 F6 | 	mov	arg05, result1
14708     FE 18 02 F6 | 	mov	arg04, result2
1470c     FF 1E 02 F6 | 	mov	local01, result3
14710     0C 4E 05 F1 | 	add	fp, #12
14714     A7 1A 62 FC | 	wrlong	arg05, fp
14718     04 4E 05 F1 | 	add	fp, #4
1471c     A7 18 62 FC | 	wrlong	arg04, fp
14720     04 4E 05 F1 | 	add	fp, #4
14724     A7 1E 62 FC | 	wrlong	local01, fp
14728     14 4E 85 F1 | 	sub	fp, #20
1472c     98 59 BF FD | 	call	#_pop
14730     A7 FA 61 FC | 	wrlong	result1, fp
14734     04 4E 05 F1 | 	add	fp, #4
14738     A7 FC 61 FC | 	wrlong	result2, fp
1473c     04 4E 05 F1 | 	add	fp, #4
14740     A7 FE 61 FC | 	wrlong	result3, fp
14744                 | ' 
14744                 | ' t4=pop()
14744                 | ' t3=pop()
14744                 | ' t2=pop()
14744                 | ' t1=pop()
14744                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14744     FF 1A 02 F6 | 	mov	arg05, result3
14748     08 4E 85 F1 | 	sub	fp, #8
1474c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14750     08 4E 05 51 |  if_ne	add	fp, #8
14754     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14758     08 4E 85 51 |  if_ne	sub	fp, #8
1475c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14760     A8 00 90 5D |  if_ne	jmp	#LR__1640
14764     14 4E 05 F1 | 	add	fp, #20
14768     A7 1E 02 FB | 	rdlong	local01, fp
1476c     14 4E 85 F1 | 	sub	fp, #20
14770     1C 1E 0E F2 | 	cmp	local01, #28 wz
14774     14 4E 05 51 |  if_ne	add	fp, #20
14778     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1477c     14 4E 85 51 |  if_ne	sub	fp, #20
14780     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14784     84 00 90 5D |  if_ne	jmp	#LR__1640
14788     20 4E 05 F1 | 	add	fp, #32
1478c     A7 1E 02 FB | 	rdlong	local01, fp
14790     20 4E 85 F1 | 	sub	fp, #32
14794     1C 1E 0E F2 | 	cmp	local01, #28 wz
14798     20 4E 05 51 |  if_ne	add	fp, #32
1479c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
147a0     20 4E 85 51 |  if_ne	sub	fp, #32
147a4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
147a8     60 00 90 5D |  if_ne	jmp	#LR__1640
147ac     2C 4E 05 F1 | 	add	fp, #44
147b0     A7 1E 02 FB | 	rdlong	local01, fp
147b4     2C 4E 85 F1 | 	sub	fp, #44
147b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
147bc     2C 4E 05 51 |  if_ne	add	fp, #44
147c0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
147c4     2C 4E 85 51 |  if_ne	sub	fp, #44
147c8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
147cc     3C 00 90 5D |  if_ne	jmp	#LR__1640
147d0     A7 12 02 FB | 	rdlong	arg01, fp
147d4     0C 4E 05 F1 | 	add	fp, #12
147d8     A7 14 02 FB | 	rdlong	arg02, fp
147dc     0C 4E 05 F1 | 	add	fp, #12
147e0     A7 16 02 FB | 	rdlong	arg03, fp
147e4     0C 4E 05 F1 | 	add	fp, #12
147e8     A7 18 02 FB | 	rdlong	arg04, fp
147ec     24 4E 85 F1 | 	sub	fp, #36
147f0     57 00 00 FF 
147f4     0C E4 05 F1 | 	add	objptr, ##44556
147f8     F2 1A 02 FB | 	rdlong	arg05, objptr
147fc     57 00 00 FF 
14800     0C E4 85 F1 | 	sub	objptr, ##44556
14804     7C 64 B0 FD | 	call	#_hg010b_spin2_box
14808                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14808     6C 00 90 FD | 	jmp	#LR__1641
1480c                 | LR__1640
1480c     A7 12 02 F6 | 	mov	arg01, fp
14810     08 E2 BF FD | 	call	#_converttoint
14814     FD 20 02 F6 | 	mov	local02, result1
14818     0C 4E 05 F1 | 	add	fp, #12
1481c     A7 12 02 F6 | 	mov	arg01, fp
14820     0C 4E 85 F1 | 	sub	fp, #12
14824     F4 E1 BF FD | 	call	#_converttoint
14828     FD 22 02 F6 | 	mov	local03, result1
1482c     18 4E 05 F1 | 	add	fp, #24
14830     A7 12 02 F6 | 	mov	arg01, fp
14834     18 4E 85 F1 | 	sub	fp, #24
14838     E0 E1 BF FD | 	call	#_converttoint
1483c     FD 1E 02 F6 | 	mov	local01, result1
14840     24 4E 05 F1 | 	add	fp, #36
14844     A7 12 02 F6 | 	mov	arg01, fp
14848     24 4E 85 F1 | 	sub	fp, #36
1484c     CC E1 BF FD | 	call	#_converttoint
14850     FD 18 02 F6 | 	mov	arg04, result1
14854     57 00 00 FF 
14858     0C E4 05 F1 | 	add	objptr, ##44556
1485c     F2 1A 02 FB | 	rdlong	arg05, objptr
14860     57 00 00 FF 
14864     0C E4 85 F1 | 	sub	objptr, ##44556
14868     10 13 02 F6 | 	mov	arg01, local02
1486c     11 15 02 F6 | 	mov	arg02, local03
14870     0F 17 02 F6 | 	mov	arg03, local01
14874     0C 64 B0 FD | 	call	#_hg010b_spin2_box
14878                 | LR__1641
14878     A7 F0 03 F6 | 	mov	ptra, fp
1487c     B2 00 A0 FD | 	call	#popregs_
14880                 | _do_box_ret
14880     2D 00 64 FD | 	ret
14884                 | 
14884                 | ' 
14884                 | ' sub do_fill
14884                 | _do_fill
14884     03 4A 05 F6 | 	mov	COUNT_, #3
14888     A8 00 A0 FD | 	call	#pushregs_
1488c     30 F0 07 F1 | 	add	ptra, #48
14890     34 58 BF FD | 	call	#_pop
14894     FD 18 02 F6 | 	mov	arg04, result1
14898     FE 16 02 F6 | 	mov	arg03, result2
1489c     FF 14 02 F6 | 	mov	arg02, result3
148a0     24 4E 05 F1 | 	add	fp, #36
148a4     A7 18 62 FC | 	wrlong	arg04, fp
148a8     04 4E 05 F1 | 	add	fp, #4
148ac     A7 16 62 FC | 	wrlong	arg03, fp
148b0     04 4E 05 F1 | 	add	fp, #4
148b4     A7 14 62 FC | 	wrlong	arg02, fp
148b8     2C 4E 85 F1 | 	sub	fp, #44
148bc     08 58 BF FD | 	call	#_pop
148c0     FD 18 02 F6 | 	mov	arg04, result1
148c4     FE 16 02 F6 | 	mov	arg03, result2
148c8     FF 14 02 F6 | 	mov	arg02, result3
148cc     18 4E 05 F1 | 	add	fp, #24
148d0     A7 18 62 FC | 	wrlong	arg04, fp
148d4     04 4E 05 F1 | 	add	fp, #4
148d8     A7 16 62 FC | 	wrlong	arg03, fp
148dc     04 4E 05 F1 | 	add	fp, #4
148e0     A7 14 62 FC | 	wrlong	arg02, fp
148e4     20 4E 85 F1 | 	sub	fp, #32
148e8     DC 57 BF FD | 	call	#_pop
148ec     FD 18 02 F6 | 	mov	arg04, result1
148f0     FE 16 02 F6 | 	mov	arg03, result2
148f4     FF 1E 02 F6 | 	mov	local01, result3
148f8     0C 4E 05 F1 | 	add	fp, #12
148fc     A7 18 62 FC | 	wrlong	arg04, fp
14900     04 4E 05 F1 | 	add	fp, #4
14904     A7 16 62 FC | 	wrlong	arg03, fp
14908     04 4E 05 F1 | 	add	fp, #4
1490c     A7 1E 62 FC | 	wrlong	local01, fp
14910     14 4E 85 F1 | 	sub	fp, #20
14914     B0 57 BF FD | 	call	#_pop
14918     A7 FA 61 FC | 	wrlong	result1, fp
1491c     04 4E 05 F1 | 	add	fp, #4
14920     A7 FC 61 FC | 	wrlong	result2, fp
14924     04 4E 05 F1 | 	add	fp, #4
14928     A7 FE 61 FC | 	wrlong	result3, fp
1492c                 | ' 
1492c                 | ' t4=pop()
1492c                 | ' t3=pop()
1492c                 | ' t2=pop()
1492c                 | ' t1=pop()
1492c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
1492c     FF 18 02 F6 | 	mov	arg04, result3
14930     08 4E 85 F1 | 	sub	fp, #8
14934     1C 18 0E F2 | 	cmp	arg04, #28 wz
14938     08 4E 05 51 |  if_ne	add	fp, #8
1493c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14940     08 4E 85 51 |  if_ne	sub	fp, #8
14944     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14948     94 00 90 5D |  if_ne	jmp	#LR__1650
1494c     14 4E 05 F1 | 	add	fp, #20
14950     A7 1E 02 FB | 	rdlong	local01, fp
14954     14 4E 85 F1 | 	sub	fp, #20
14958     1C 1E 0E F2 | 	cmp	local01, #28 wz
1495c     14 4E 05 51 |  if_ne	add	fp, #20
14960     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14964     14 4E 85 51 |  if_ne	sub	fp, #20
14968     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1496c     70 00 90 5D |  if_ne	jmp	#LR__1650
14970     20 4E 05 F1 | 	add	fp, #32
14974     A7 1E 02 FB | 	rdlong	local01, fp
14978     20 4E 85 F1 | 	sub	fp, #32
1497c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14980     20 4E 05 51 |  if_ne	add	fp, #32
14984     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14988     20 4E 85 51 |  if_ne	sub	fp, #32
1498c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14990     4C 00 90 5D |  if_ne	jmp	#LR__1650
14994     2C 4E 05 F1 | 	add	fp, #44
14998     A7 1E 02 FB | 	rdlong	local01, fp
1499c     2C 4E 85 F1 | 	sub	fp, #44
149a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
149a4     2C 4E 05 51 |  if_ne	add	fp, #44
149a8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
149ac     2C 4E 85 51 |  if_ne	sub	fp, #44
149b0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
149b4     28 00 90 5D |  if_ne	jmp	#LR__1650
149b8     A7 12 02 FB | 	rdlong	arg01, fp
149bc     0C 4E 05 F1 | 	add	fp, #12
149c0     A7 14 02 FB | 	rdlong	arg02, fp
149c4     0C 4E 05 F1 | 	add	fp, #12
149c8     A7 16 02 FB | 	rdlong	arg03, fp
149cc     0C 4E 05 F1 | 	add	fp, #12
149d0     A7 18 02 FB | 	rdlong	arg04, fp
149d4     24 4E 85 F1 | 	sub	fp, #36
149d8     3C 5D B0 FD | 	call	#_hg010b_spin2_fill
149dc                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
149dc     58 00 90 FD | 	jmp	#LR__1651
149e0                 | LR__1650
149e0     A7 12 02 F6 | 	mov	arg01, fp
149e4     34 E0 BF FD | 	call	#_converttoint
149e8     FD 20 02 F6 | 	mov	local02, result1
149ec     0C 4E 05 F1 | 	add	fp, #12
149f0     A7 12 02 F6 | 	mov	arg01, fp
149f4     0C 4E 85 F1 | 	sub	fp, #12
149f8     20 E0 BF FD | 	call	#_converttoint
149fc     FD 22 02 F6 | 	mov	local03, result1
14a00     18 4E 05 F1 | 	add	fp, #24
14a04     A7 12 02 F6 | 	mov	arg01, fp
14a08     18 4E 85 F1 | 	sub	fp, #24
14a0c     0C E0 BF FD | 	call	#_converttoint
14a10     FD 1E 02 F6 | 	mov	local01, result1
14a14     24 4E 05 F1 | 	add	fp, #36
14a18     A7 12 02 F6 | 	mov	arg01, fp
14a1c     24 4E 85 F1 | 	sub	fp, #36
14a20     F8 DF BF FD | 	call	#_converttoint
14a24     FD 18 02 F6 | 	mov	arg04, result1
14a28     10 13 02 F6 | 	mov	arg01, local02
14a2c     11 15 02 F6 | 	mov	arg02, local03
14a30     0F 17 02 F6 | 	mov	arg03, local01
14a34     E0 5C B0 FD | 	call	#_hg010b_spin2_fill
14a38                 | LR__1651
14a38     A7 F0 03 F6 | 	mov	ptra, fp
14a3c     B2 00 A0 FD | 	call	#popregs_
14a40                 | _do_fill_ret
14a40     2D 00 64 FD | 	ret
14a44                 | 
14a44                 | ' 
14a44                 | ' ' -------------------------- Draw a frane
14a44                 | ' 
14a44                 | ' sub do_frame
14a44                 | _do_frame
14a44     03 4A 05 F6 | 	mov	COUNT_, #3
14a48     A8 00 A0 FD | 	call	#pushregs_
14a4c     30 F0 07 F1 | 	add	ptra, #48
14a50     74 56 BF FD | 	call	#_pop
14a54     FD 1A 02 F6 | 	mov	arg05, result1
14a58     FE 18 02 F6 | 	mov	arg04, result2
14a5c     FF 16 02 F6 | 	mov	arg03, result3
14a60     24 4E 05 F1 | 	add	fp, #36
14a64     A7 1A 62 FC | 	wrlong	arg05, fp
14a68     04 4E 05 F1 | 	add	fp, #4
14a6c     A7 18 62 FC | 	wrlong	arg04, fp
14a70     04 4E 05 F1 | 	add	fp, #4
14a74     A7 16 62 FC | 	wrlong	arg03, fp
14a78     2C 4E 85 F1 | 	sub	fp, #44
14a7c     48 56 BF FD | 	call	#_pop
14a80     FD 1A 02 F6 | 	mov	arg05, result1
14a84     FE 18 02 F6 | 	mov	arg04, result2
14a88     FF 16 02 F6 | 	mov	arg03, result3
14a8c     18 4E 05 F1 | 	add	fp, #24
14a90     A7 1A 62 FC | 	wrlong	arg05, fp
14a94     04 4E 05 F1 | 	add	fp, #4
14a98     A7 18 62 FC | 	wrlong	arg04, fp
14a9c     04 4E 05 F1 | 	add	fp, #4
14aa0     A7 16 62 FC | 	wrlong	arg03, fp
14aa4     20 4E 85 F1 | 	sub	fp, #32
14aa8     1C 56 BF FD | 	call	#_pop
14aac     FD 1A 02 F6 | 	mov	arg05, result1
14ab0     FE 18 02 F6 | 	mov	arg04, result2
14ab4     FF 1E 02 F6 | 	mov	local01, result3
14ab8     0C 4E 05 F1 | 	add	fp, #12
14abc     A7 1A 62 FC | 	wrlong	arg05, fp
14ac0     04 4E 05 F1 | 	add	fp, #4
14ac4     A7 18 62 FC | 	wrlong	arg04, fp
14ac8     04 4E 05 F1 | 	add	fp, #4
14acc     A7 1E 62 FC | 	wrlong	local01, fp
14ad0     14 4E 85 F1 | 	sub	fp, #20
14ad4     F0 55 BF FD | 	call	#_pop
14ad8     A7 FA 61 FC | 	wrlong	result1, fp
14adc     04 4E 05 F1 | 	add	fp, #4
14ae0     A7 FC 61 FC | 	wrlong	result2, fp
14ae4     04 4E 05 F1 | 	add	fp, #4
14ae8     A7 FE 61 FC | 	wrlong	result3, fp
14aec                 | ' 
14aec                 | ' t4=pop()
14aec                 | ' t3=pop()
14aec                 | ' t2=pop()
14aec                 | ' t1=pop()
14aec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14aec     FF 1A 02 F6 | 	mov	arg05, result3
14af0     08 4E 85 F1 | 	sub	fp, #8
14af4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14af8     08 4E 05 51 |  if_ne	add	fp, #8
14afc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14b00     08 4E 85 51 |  if_ne	sub	fp, #8
14b04     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14b08     A8 00 90 5D |  if_ne	jmp	#LR__1660
14b0c     14 4E 05 F1 | 	add	fp, #20
14b10     A7 1E 02 FB | 	rdlong	local01, fp
14b14     14 4E 85 F1 | 	sub	fp, #20
14b18     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b1c     14 4E 05 51 |  if_ne	add	fp, #20
14b20     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b24     14 4E 85 51 |  if_ne	sub	fp, #20
14b28     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b2c     84 00 90 5D |  if_ne	jmp	#LR__1660
14b30     20 4E 05 F1 | 	add	fp, #32
14b34     A7 1E 02 FB | 	rdlong	local01, fp
14b38     20 4E 85 F1 | 	sub	fp, #32
14b3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b40     20 4E 05 51 |  if_ne	add	fp, #32
14b44     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b48     20 4E 85 51 |  if_ne	sub	fp, #32
14b4c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b50     60 00 90 5D |  if_ne	jmp	#LR__1660
14b54     2C 4E 05 F1 | 	add	fp, #44
14b58     A7 1E 02 FB | 	rdlong	local01, fp
14b5c     2C 4E 85 F1 | 	sub	fp, #44
14b60     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b64     2C 4E 05 51 |  if_ne	add	fp, #44
14b68     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14b6c     2C 4E 85 51 |  if_ne	sub	fp, #44
14b70     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14b74     3C 00 90 5D |  if_ne	jmp	#LR__1660
14b78     A7 12 02 FB | 	rdlong	arg01, fp
14b7c     0C 4E 05 F1 | 	add	fp, #12
14b80     A7 14 02 FB | 	rdlong	arg02, fp
14b84     0C 4E 05 F1 | 	add	fp, #12
14b88     A7 16 02 FB | 	rdlong	arg03, fp
14b8c     0C 4E 05 F1 | 	add	fp, #12
14b90     A7 18 02 FB | 	rdlong	arg04, fp
14b94     24 4E 85 F1 | 	sub	fp, #36
14b98     57 00 00 FF 
14b9c     0C E4 05 F1 | 	add	objptr, ##44556
14ba0     F2 1A 02 FB | 	rdlong	arg05, objptr
14ba4     57 00 00 FF 
14ba8     0C E4 85 F1 | 	sub	objptr, ##44556
14bac     54 60 B0 FD | 	call	#_hg010b_spin2_frame
14bb0                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14bb0     6C 00 90 FD | 	jmp	#LR__1661
14bb4                 | LR__1660
14bb4     A7 12 02 F6 | 	mov	arg01, fp
14bb8     60 DE BF FD | 	call	#_converttoint
14bbc     FD 20 02 F6 | 	mov	local02, result1
14bc0     0C 4E 05 F1 | 	add	fp, #12
14bc4     A7 12 02 F6 | 	mov	arg01, fp
14bc8     0C 4E 85 F1 | 	sub	fp, #12
14bcc     4C DE BF FD | 	call	#_converttoint
14bd0     FD 22 02 F6 | 	mov	local03, result1
14bd4     18 4E 05 F1 | 	add	fp, #24
14bd8     A7 12 02 F6 | 	mov	arg01, fp
14bdc     18 4E 85 F1 | 	sub	fp, #24
14be0     38 DE BF FD | 	call	#_converttoint
14be4     FD 1E 02 F6 | 	mov	local01, result1
14be8     24 4E 05 F1 | 	add	fp, #36
14bec     A7 12 02 F6 | 	mov	arg01, fp
14bf0     24 4E 85 F1 | 	sub	fp, #36
14bf4     24 DE BF FD | 	call	#_converttoint
14bf8     FD 18 02 F6 | 	mov	arg04, result1
14bfc     57 00 00 FF 
14c00     0C E4 05 F1 | 	add	objptr, ##44556
14c04     F2 1A 02 FB | 	rdlong	arg05, objptr
14c08     57 00 00 FF 
14c0c     0C E4 85 F1 | 	sub	objptr, ##44556
14c10     10 13 02 F6 | 	mov	arg01, local02
14c14     11 15 02 F6 | 	mov	arg02, local03
14c18     0F 17 02 F6 | 	mov	arg03, local01
14c1c     E4 5F B0 FD | 	call	#_hg010b_spin2_frame
14c20                 | LR__1661
14c20     A7 F0 03 F6 | 	mov	ptra, fp
14c24     B2 00 A0 FD | 	call	#popregs_
14c28                 | _do_frame_ret
14c28     2D 00 64 FD | 	ret
14c2c                 | 
14c2c                 | ' 
14c2c                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
14c2c                 | ' 
14c2c                 | ' ' ------------------------- Print to the screem
14c2c                 | ' 
14c2c                 | ' sub do_print  
14c2c                 | _do_print
14c2c     0A 4A 05 F6 | 	mov	COUNT_, #10
14c30     A8 00 A0 FD | 	call	#pushregs_
14c34     00 24 06 F6 | 	mov	local04, #0
14c38     8C 54 BF FD | 	call	#_pop
14c3c     FD 26 02 F6 | 	mov	local05, result1
14c40     FE 28 02 F6 | 	mov	local06, result2
14c44     FF 2A 02 F6 | 	mov	local07, result3
14c48     13 1F 02 F6 | 	mov	local01, local05
14c4c     14 21 02 F6 | 	mov	local02, local06
14c50     15 23 02 F6 | 	mov	local03, local07
14c54                 | '  
14c54                 | ' r=0
14c54                 | ' t1=pop() 
14c54                 | ' 'print t1.result_type,t1.result.uresult
14c54                 | ' 
14c54                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
14c54     21 22 0E F2 | 	cmp	local03, #33 wz
14c58     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
14c5c     20 00 90 5D |  if_ne	jmp	#LR__1670
14c60     11 25 02 F6 | 	mov	local04, local03
14c64     60 54 BF FD | 	call	#_pop
14c68     FD 26 02 F6 | 	mov	local05, result1
14c6c     FE 28 02 F6 | 	mov	local06, result2
14c70     FF 2A 02 F6 | 	mov	local07, result3
14c74     13 1F 02 F6 | 	mov	local01, local05
14c78     14 21 02 F6 | 	mov	local02, local06
14c7c     15 23 02 F6 | 	mov	local03, local07
14c80                 | LR__1670
14c80                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14c80     20 22 0E F2 | 	cmp	local03, #32 wz
14c84     11 25 02 A6 |  if_e	mov	local04, local03
14c88                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
14c88     FF 22 0E F2 | 	cmp	local03, #255 wz
14c8c     0C 00 90 5D |  if_ne	jmp	#LR__1671
14c90     0F 13 02 F6 | 	mov	arg01, local01
14c94     C0 3E B0 FD | 	call	#_printerror
14c98     4C 04 90 FD | 	jmp	#LR__1689
14c9c                 | LR__1671
14c9c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
14c9c     2B 22 0E F2 | 	cmp	local03, #43 wz
14ca0     14 00 90 5D |  if_ne	jmp	#LR__1672
14ca4     0F 13 02 F6 | 	mov	arg01, local01
14ca8     C0 93 BF FD | 	call	#_convertstring
14cac     FD 26 02 F6 | 	mov	local05, result1
14cb0     13 1F 02 F6 | 	mov	local01, local05
14cb4     1F 22 06 F6 | 	mov	local03, #31
14cb8                 | LR__1672
14cb8                 | ' 
14cb8                 | ' if r=print_mod_comma  then
14cb8     21 24 0E F2 | 	cmp	local04, #33 wz
14cbc     AC 01 90 5D |  if_ne	jmp	#LR__1677
14cc0                 | '   if t1.result_type=result_int then print t1.result.iresult,
14cc0     1C 22 0E F2 | 	cmp	local03, #28 wz
14cc4     64 00 90 5D |  if_ne	jmp	#LR__1673
14cc8     00 12 06 F6 | 	mov	arg01, #0
14ccc     9C CF B0 FD | 	call	#__system___getiolock_0474
14cd0     FD 12 02 F6 | 	mov	arg01, result1
14cd4     04 76 B0 FD | 	call	#__system___lockmem
14cd8     00 28 06 F6 | 	mov	local06, #0
14cdc     00 12 06 F6 | 	mov	arg01, #0
14ce0     0F 15 02 F6 | 	mov	arg02, local01
14ce4     00 16 06 F6 | 	mov	arg03, #0
14ce8     0A 18 06 F6 | 	mov	arg04, #10
14cec     34 83 B0 FD | 	call	#__system___basic_print_integer
14cf0     FD 2A 02 F6 | 	mov	local07, result1
14cf4     14 27 02 F6 | 	mov	local05, local06
14cf8     15 27 02 F1 | 	add	local05, local07
14cfc     00 2C 06 F6 | 	mov	local08, #0
14d00     00 12 06 F6 | 	mov	arg01, #0
14d04     09 14 06 F6 | 	mov	arg02, #9
14d08     00 16 06 F6 | 	mov	arg03, #0
14d0c     78 82 B0 FD | 	call	#__system___basic_print_char
14d10     FD 2E 02 F6 | 	mov	local09, result1
14d14     FD 26 02 F1 | 	add	local05, result1
14d18     00 12 06 F6 | 	mov	arg01, #0
14d1c     4C CF B0 FD | 	call	#__system___getiolock_0474
14d20     FD 00 68 FC | 	wrlong	#0, result1
14d24     00 FA 05 F6 | 	mov	result1, #0
14d28     00 30 06 F6 | 	mov	local10, #0
14d2c                 | LR__1673
14d2c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
14d2c     1D 22 0E F2 | 	cmp	local03, #29 wz
14d30     64 00 90 5D |  if_ne	jmp	#LR__1674
14d34     00 12 06 F6 | 	mov	arg01, #0
14d38     30 CF B0 FD | 	call	#__system___getiolock_0474
14d3c     FD 12 02 F6 | 	mov	arg01, result1
14d40     98 75 B0 FD | 	call	#__system___lockmem
14d44     00 28 06 F6 | 	mov	local06, #0
14d48     00 12 06 F6 | 	mov	arg01, #0
14d4c     0F 15 02 F6 | 	mov	arg02, local01
14d50     00 16 06 F6 | 	mov	arg03, #0
14d54     0A 18 06 F6 | 	mov	arg04, #10
14d58     08 83 B0 FD | 	call	#__system___basic_print_unsigned
14d5c     FD 2A 02 F6 | 	mov	local07, result1
14d60     14 27 02 F6 | 	mov	local05, local06
14d64     15 27 02 F1 | 	add	local05, local07
14d68     00 2C 06 F6 | 	mov	local08, #0
14d6c     00 12 06 F6 | 	mov	arg01, #0
14d70     09 14 06 F6 | 	mov	arg02, #9
14d74     00 16 06 F6 | 	mov	arg03, #0
14d78     0C 82 B0 FD | 	call	#__system___basic_print_char
14d7c     FD 2E 02 F6 | 	mov	local09, result1
14d80     FD 26 02 F1 | 	add	local05, result1
14d84     00 12 06 F6 | 	mov	arg01, #0
14d88     E0 CE B0 FD | 	call	#__system___getiolock_0474
14d8c     FD 00 68 FC | 	wrlong	#0, result1
14d90     00 FA 05 F6 | 	mov	result1, #0
14d94     00 30 06 F6 | 	mov	local10, #0
14d98                 | LR__1674
14d98                 | '   if t1.result_type=result_float then print t1.result.fresult,
14d98     1E 22 0E F2 | 	cmp	local03, #30 wz
14d9c     64 00 90 5D |  if_ne	jmp	#LR__1675
14da0     00 12 06 F6 | 	mov	arg01, #0
14da4     C4 CE B0 FD | 	call	#__system___getiolock_0474
14da8     FD 12 02 F6 | 	mov	arg01, result1
14dac     2C 75 B0 FD | 	call	#__system___lockmem
14db0     00 28 06 F6 | 	mov	local06, #0
14db4     00 12 06 F6 | 	mov	arg01, #0
14db8     0F 15 02 F6 | 	mov	arg02, local01
14dbc     00 16 06 F6 | 	mov	arg03, #0
14dc0     23 18 06 F6 | 	mov	arg04, #35
14dc4     A8 A6 B0 FD | 	call	#__system___basic_print_float
14dc8     FD 2A 02 F6 | 	mov	local07, result1
14dcc     14 27 02 F6 | 	mov	local05, local06
14dd0     15 27 02 F1 | 	add	local05, local07
14dd4     00 2C 06 F6 | 	mov	local08, #0
14dd8     00 12 06 F6 | 	mov	arg01, #0
14ddc     09 14 06 F6 | 	mov	arg02, #9
14de0     00 16 06 F6 | 	mov	arg03, #0
14de4     A0 81 B0 FD | 	call	#__system___basic_print_char
14de8     FD 2E 02 F6 | 	mov	local09, result1
14dec     FD 26 02 F1 | 	add	local05, result1
14df0     00 12 06 F6 | 	mov	arg01, #0
14df4     74 CE B0 FD | 	call	#__system___getiolock_0474
14df8     FD 00 68 FC | 	wrlong	#0, result1
14dfc     00 FA 05 F6 | 	mov	result1, #0
14e00     00 30 06 F6 | 	mov	local10, #0
14e04                 | LR__1675
14e04                 | '   if t1.result_type=result_string then print t1.result.sresult,
14e04     1F 22 0E F2 | 	cmp	local03, #31 wz
14e08     60 00 90 5D |  if_ne	jmp	#LR__1676
14e0c     00 12 06 F6 | 	mov	arg01, #0
14e10     58 CE B0 FD | 	call	#__system___getiolock_0474
14e14     FD 12 02 F6 | 	mov	arg01, result1
14e18     C0 74 B0 FD | 	call	#__system___lockmem
14e1c     00 28 06 F6 | 	mov	local06, #0
14e20     00 12 06 F6 | 	mov	arg01, #0
14e24     0F 15 02 F6 | 	mov	arg02, local01
14e28     00 16 06 F6 | 	mov	arg03, #0
14e2c     B0 81 B0 FD | 	call	#__system___basic_print_string
14e30     FD 2A 02 F6 | 	mov	local07, result1
14e34     14 27 02 F6 | 	mov	local05, local06
14e38     15 27 02 F1 | 	add	local05, local07
14e3c     00 2C 06 F6 | 	mov	local08, #0
14e40     00 12 06 F6 | 	mov	arg01, #0
14e44     09 14 06 F6 | 	mov	arg02, #9
14e48     00 16 06 F6 | 	mov	arg03, #0
14e4c     38 81 B0 FD | 	call	#__system___basic_print_char
14e50     FD 2E 02 F6 | 	mov	local09, result1
14e54     FD 26 02 F1 | 	add	local05, result1
14e58     00 12 06 F6 | 	mov	arg01, #0
14e5c     0C CE B0 FD | 	call	#__system___getiolock_0474
14e60     FD 00 68 FC | 	wrlong	#0, result1
14e64     00 FA 05 F6 | 	mov	result1, #0
14e68     00 30 06 F6 | 	mov	local10, #0
14e6c                 | LR__1676
14e6c                 | LR__1677
14e6c                 | ' if r=print_mod_semicolon then 
14e6c     22 24 0E F2 | 	cmp	local04, #34 wz
14e70     1C 01 90 5D |  if_ne	jmp	#LR__1682
14e74                 | '   if t1.result_type=result_int then print t1.result.iresult;
14e74     1C 22 0E F2 | 	cmp	local03, #28 wz
14e78     50 00 90 5D |  if_ne	jmp	#LR__1678
14e7c     00 12 06 F6 | 	mov	arg01, #0
14e80     E8 CD B0 FD | 	call	#__system___getiolock_0474
14e84     FD 12 02 F6 | 	mov	arg01, result1
14e88     50 74 B0 FD | 	call	#__system___lockmem
14e8c     00 28 06 F6 | 	mov	local06, #0
14e90     00 30 06 F6 | 	mov	local10, #0
14e94     0A 2C 06 F6 | 	mov	local08, #10
14e98     00 12 06 F6 | 	mov	arg01, #0
14e9c     0F 15 02 F6 | 	mov	arg02, local01
14ea0     00 16 06 F6 | 	mov	arg03, #0
14ea4     0A 18 06 F6 | 	mov	arg04, #10
14ea8     78 81 B0 FD | 	call	#__system___basic_print_integer
14eac     FD 2A 02 F6 | 	mov	local07, result1
14eb0     14 27 02 F6 | 	mov	local05, local06
14eb4     15 27 02 F1 | 	add	local05, local07
14eb8     00 12 06 F6 | 	mov	arg01, #0
14ebc     AC CD B0 FD | 	call	#__system___getiolock_0474
14ec0     FD 00 68 FC | 	wrlong	#0, result1
14ec4     00 FA 05 F6 | 	mov	result1, #0
14ec8     00 2E 06 F6 | 	mov	local09, #0
14ecc                 | LR__1678
14ecc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
14ecc     1D 22 0E F2 | 	cmp	local03, #29 wz
14ed0     50 00 90 5D |  if_ne	jmp	#LR__1679
14ed4     00 12 06 F6 | 	mov	arg01, #0
14ed8     90 CD B0 FD | 	call	#__system___getiolock_0474
14edc     FD 12 02 F6 | 	mov	arg01, result1
14ee0     F8 73 B0 FD | 	call	#__system___lockmem
14ee4     00 28 06 F6 | 	mov	local06, #0
14ee8     00 30 06 F6 | 	mov	local10, #0
14eec     0A 2C 06 F6 | 	mov	local08, #10
14ef0     00 12 06 F6 | 	mov	arg01, #0
14ef4     0F 15 02 F6 | 	mov	arg02, local01
14ef8     00 16 06 F6 | 	mov	arg03, #0
14efc     0A 18 06 F6 | 	mov	arg04, #10
14f00     60 81 B0 FD | 	call	#__system___basic_print_unsigned
14f04     FD 2A 02 F6 | 	mov	local07, result1
14f08     14 27 02 F6 | 	mov	local05, local06
14f0c     15 27 02 F1 | 	add	local05, local07
14f10     00 12 06 F6 | 	mov	arg01, #0
14f14     54 CD B0 FD | 	call	#__system___getiolock_0474
14f18     FD 00 68 FC | 	wrlong	#0, result1
14f1c     00 FA 05 F6 | 	mov	result1, #0
14f20     00 2E 06 F6 | 	mov	local09, #0
14f24                 | LR__1679
14f24                 | '   if t1.result_type=result_float then print t1.result.fresult;
14f24     1E 22 0E F2 | 	cmp	local03, #30 wz
14f28     30 00 90 5D |  if_ne	jmp	#LR__1680
14f2c     00 12 06 F6 | 	mov	arg01, #0
14f30     38 CD B0 FD | 	call	#__system___getiolock_0474
14f34     FD 12 02 F6 | 	mov	arg01, result1
14f38     A0 73 B0 FD | 	call	#__system___lockmem
14f3c     00 12 06 F6 | 	mov	arg01, #0
14f40     0F 15 02 F6 | 	mov	arg02, local01
14f44     00 16 06 F6 | 	mov	arg03, #0
14f48     23 18 06 F6 | 	mov	arg04, #35
14f4c     20 A5 B0 FD | 	call	#__system___basic_print_float
14f50     00 12 06 F6 | 	mov	arg01, #0
14f54     14 CD B0 FD | 	call	#__system___getiolock_0474
14f58     FD 00 68 FC | 	wrlong	#0, result1
14f5c                 | LR__1680
14f5c                 | '   if t1.result_type=result_string then print t1.result.sresult;
14f5c     1F 22 0E F2 | 	cmp	local03, #31 wz
14f60     2C 00 90 5D |  if_ne	jmp	#LR__1681
14f64     00 12 06 F6 | 	mov	arg01, #0
14f68     00 CD B0 FD | 	call	#__system___getiolock_0474
14f6c     FD 12 02 F6 | 	mov	arg01, result1
14f70     68 73 B0 FD | 	call	#__system___lockmem
14f74     00 12 06 F6 | 	mov	arg01, #0
14f78     0F 15 02 F6 | 	mov	arg02, local01
14f7c     00 16 06 F6 | 	mov	arg03, #0
14f80     5C 80 B0 FD | 	call	#__system___basic_print_string
14f84     00 12 06 F6 | 	mov	arg01, #0
14f88     E0 CC B0 FD | 	call	#__system___getiolock_0474
14f8c     FD 00 68 FC | 	wrlong	#0, result1
14f90                 | LR__1681
14f90                 | LR__1682
14f90                 | ' if r=0 then 
14f90     00 24 0E F2 | 	cmp	local04, #0 wz
14f94     1C 01 90 5D |  if_ne	jmp	#LR__1687
14f98                 | '   if t1.result_type=result_int then print t1.result.iresult
14f98     1C 22 0E F2 | 	cmp	local03, #28 wz
14f9c     40 00 90 5D |  if_ne	jmp	#LR__1683
14fa0     00 12 06 F6 | 	mov	arg01, #0
14fa4     C4 CC B0 FD | 	call	#__system___getiolock_0474
14fa8     FD 12 02 F6 | 	mov	arg01, result1
14fac     2C 73 B0 FD | 	call	#__system___lockmem
14fb0     00 12 06 F6 | 	mov	arg01, #0
14fb4     0F 15 02 F6 | 	mov	arg02, local01
14fb8     00 16 06 F6 | 	mov	arg03, #0
14fbc     0A 18 06 F6 | 	mov	arg04, #10
14fc0     60 80 B0 FD | 	call	#__system___basic_print_integer
14fc4     00 12 06 F6 | 	mov	arg01, #0
14fc8     0A 14 06 F6 | 	mov	arg02, #10
14fcc     00 16 06 F6 | 	mov	arg03, #0
14fd0     B4 7F B0 FD | 	call	#__system___basic_print_char
14fd4     00 12 06 F6 | 	mov	arg01, #0
14fd8     90 CC B0 FD | 	call	#__system___getiolock_0474
14fdc     FD 00 68 FC | 	wrlong	#0, result1
14fe0                 | LR__1683
14fe0                 | '   if t1.result_type=result_uint then print t1.result.uresult
14fe0     1D 22 0E F2 | 	cmp	local03, #29 wz
14fe4     40 00 90 5D |  if_ne	jmp	#LR__1684
14fe8     00 12 06 F6 | 	mov	arg01, #0
14fec     7C CC B0 FD | 	call	#__system___getiolock_0474
14ff0     FD 12 02 F6 | 	mov	arg01, result1
14ff4     E4 72 B0 FD | 	call	#__system___lockmem
14ff8     00 12 06 F6 | 	mov	arg01, #0
14ffc     0F 15 02 F6 | 	mov	arg02, local01
15000     00 16 06 F6 | 	mov	arg03, #0
15004     0A 18 06 F6 | 	mov	arg04, #10
15008     58 80 B0 FD | 	call	#__system___basic_print_unsigned
1500c     00 12 06 F6 | 	mov	arg01, #0
15010     0A 14 06 F6 | 	mov	arg02, #10
15014     00 16 06 F6 | 	mov	arg03, #0
15018     6C 7F B0 FD | 	call	#__system___basic_print_char
1501c     00 12 06 F6 | 	mov	arg01, #0
15020     48 CC B0 FD | 	call	#__system___getiolock_0474
15024     FD 00 68 FC | 	wrlong	#0, result1
15028                 | LR__1684
15028                 | '   if t1.result_type=result_float then print t1.result.fresult
15028     1E 22 0E F2 | 	cmp	local03, #30 wz
1502c     40 00 90 5D |  if_ne	jmp	#LR__1685
15030     00 12 06 F6 | 	mov	arg01, #0
15034     34 CC B0 FD | 	call	#__system___getiolock_0474
15038     FD 12 02 F6 | 	mov	arg01, result1
1503c     9C 72 B0 FD | 	call	#__system___lockmem
15040     00 12 06 F6 | 	mov	arg01, #0
15044     0F 15 02 F6 | 	mov	arg02, local01
15048     00 16 06 F6 | 	mov	arg03, #0
1504c     23 18 06 F6 | 	mov	arg04, #35
15050     1C A4 B0 FD | 	call	#__system___basic_print_float
15054     00 12 06 F6 | 	mov	arg01, #0
15058     0A 14 06 F6 | 	mov	arg02, #10
1505c     00 16 06 F6 | 	mov	arg03, #0
15060     24 7F B0 FD | 	call	#__system___basic_print_char
15064     00 12 06 F6 | 	mov	arg01, #0
15068     00 CC B0 FD | 	call	#__system___getiolock_0474
1506c     FD 00 68 FC | 	wrlong	#0, result1
15070                 | LR__1685
15070                 | '   if t1.result_type=result_string then print t1.result.sresult
15070     1F 22 0E F2 | 	cmp	local03, #31 wz
15074     3C 00 90 5D |  if_ne	jmp	#LR__1686
15078     00 12 06 F6 | 	mov	arg01, #0
1507c     EC CB B0 FD | 	call	#__system___getiolock_0474
15080     FD 12 02 F6 | 	mov	arg01, result1
15084     54 72 B0 FD | 	call	#__system___lockmem
15088     00 12 06 F6 | 	mov	arg01, #0
1508c     0F 15 02 F6 | 	mov	arg02, local01
15090     00 16 06 F6 | 	mov	arg03, #0
15094     48 7F B0 FD | 	call	#__system___basic_print_string
15098     00 12 06 F6 | 	mov	arg01, #0
1509c     0A 14 06 F6 | 	mov	arg02, #10
150a0     00 16 06 F6 | 	mov	arg03, #0
150a4     E0 7E B0 FD | 	call	#__system___basic_print_char
150a8     00 12 06 F6 | 	mov	arg01, #0
150ac     BC CB B0 FD | 	call	#__system___getiolock_0474
150b0     FD 00 68 FC | 	wrlong	#0, result1
150b4                 | LR__1686
150b4                 | LR__1687
150b4                 | ' if r=print_mod_empty then print
150b4     20 24 0E F2 | 	cmp	local04, #32 wz
150b8     2C 00 90 5D |  if_ne	jmp	#LR__1688
150bc     00 12 06 F6 | 	mov	arg01, #0
150c0     A8 CB B0 FD | 	call	#__system___getiolock_0474
150c4     FD 12 02 F6 | 	mov	arg01, result1
150c8     10 72 B0 FD | 	call	#__system___lockmem
150cc     00 12 06 F6 | 	mov	arg01, #0
150d0     0A 14 06 F6 | 	mov	arg02, #10
150d4     00 16 06 F6 | 	mov	arg03, #0
150d8     AC 7E B0 FD | 	call	#__system___basic_print_char
150dc     00 12 06 F6 | 	mov	arg01, #0
150e0     88 CB B0 FD | 	call	#__system___getiolock_0474
150e4     FD 00 68 FC | 	wrlong	#0, result1
150e8                 | LR__1688
150e8                 | LR__1689
150e8     A7 F0 03 F6 | 	mov	ptra, fp
150ec     B2 00 A0 FD | 	call	#popregs_
150f0                 | _do_print_ret
150f0     2D 00 64 FD | 	ret
150f4                 | 
150f4                 | ' 
150f4                 | ' 
150f4                 | ' sub do_paper
150f4                 | _do_paper
150f4     03 4A 05 F6 | 	mov	COUNT_, #3
150f8     A8 00 A0 FD | 	call	#pushregs_
150fc     C8 4F BF FD | 	call	#_pop
15100     FD 1E 02 F6 | 	mov	local01, result1
15104     FE 20 02 F6 | 	mov	local02, result2
15108     FF 22 02 F6 | 	mov	local03, result3
1510c                 | ' t1=pop() 
1510c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1510c     1E 22 0E F2 | 	cmp	local03, #30 wz
15110     10 00 90 5D |  if_ne	jmp	#LR__1690
15114     0F 13 02 F6 | 	mov	arg01, local01
15118     00 14 06 F6 | 	mov	arg02, #0
1511c     00 A2 B0 FD | 	call	#__system___float_tointeger
15120     FD 1E 02 F6 | 	mov	local01, result1
15124                 | LR__1690
15124                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15124     1F 22 0E F2 | 	cmp	local03, #31 wz
15128     18 00 90 5D |  if_ne	jmp	#LR__1691
1512c     0F 13 02 F6 | 	mov	arg01, local01
15130     0C A5 B0 FD | 	call	#__system____builtin_atof
15134     FD 12 02 F6 | 	mov	arg01, result1
15138     00 14 06 F6 | 	mov	arg02, #0
1513c     E0 A1 B0 FD | 	call	#__system___float_tointeger
15140     FD 1E 02 F6 | 	mov	local01, result1
15144                 | LR__1691
15144     57 00 00 FF 
15148     1C E4 05 F1 | 	add	objptr, ##44572
1514c     F2 1E 62 FC | 	wrlong	local01, objptr
15150     04 E4 05 F1 | 	add	objptr, #4
15154     F2 12 02 FB | 	rdlong	arg01, objptr
15158                 | ' 
15158                 | ' write_color:=ff
15158     56 00 00 FF 
1515c     E3 E5 85 F1 | 	sub	objptr, ##44515
15160     F2 12 62 FC | 	wrlong	arg01, objptr
15164                 | ' write_background:=bb
15164     04 E4 05 F1 | 	add	objptr, #4
15168     F2 1E 62 FC | 	wrlong	local01, objptr
1516c     41 E4 85 F1 | 	sub	objptr, #65
15170     A7 F0 03 F6 | 	mov	ptra, fp
15174     B2 00 A0 FD | 	call	#popregs_
15178                 | _do_paper_ret
15178     2D 00 64 FD | 	ret
1517c                 | 
1517c                 | ' 
1517c                 | ' sub do_ink
1517c                 | _do_ink
1517c     03 4A 05 F6 | 	mov	COUNT_, #3
15180     A8 00 A0 FD | 	call	#pushregs_
15184     40 4F BF FD | 	call	#_pop
15188     FD 1E 02 F6 | 	mov	local01, result1
1518c     FE 20 02 F6 | 	mov	local02, result2
15190     FF 22 02 F6 | 	mov	local03, result3
15194                 | ' t1=pop() 
15194                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15194     1E 22 0E F2 | 	cmp	local03, #30 wz
15198     10 00 90 5D |  if_ne	jmp	#LR__1700
1519c     0F 13 02 F6 | 	mov	arg01, local01
151a0     00 14 06 F6 | 	mov	arg02, #0
151a4     78 A1 B0 FD | 	call	#__system___float_tointeger
151a8     FD 1E 02 F6 | 	mov	local01, result1
151ac                 | LR__1700
151ac                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
151ac     1F 22 0E F2 | 	cmp	local03, #31 wz
151b0     18 00 90 5D |  if_ne	jmp	#LR__1701
151b4     0F 13 02 F6 | 	mov	arg01, local01
151b8     84 A4 B0 FD | 	call	#__system____builtin_atof
151bc     FD 12 02 F6 | 	mov	arg01, result1
151c0     00 14 06 F6 | 	mov	arg02, #0
151c4     58 A1 B0 FD | 	call	#__system___float_tointeger
151c8     FD 1E 02 F6 | 	mov	local01, result1
151cc                 | LR__1701
151cc     57 00 00 FF 
151d0     20 E4 05 F1 | 	add	objptr, ##44576
151d4     F2 1E 62 FC | 	wrlong	local01, objptr
151d8     04 E4 85 F1 | 	sub	objptr, #4
151dc     F2 14 02 FB | 	rdlong	arg02, objptr
151e0                 | ' 
151e0                 | ' write_color:=ff
151e0     56 00 00 FF 
151e4     DF E5 85 F1 | 	sub	objptr, ##44511
151e8     F2 1E 62 FC | 	wrlong	local01, objptr
151ec                 | ' write_background:=bb
151ec     04 E4 05 F1 | 	add	objptr, #4
151f0     F2 14 62 FC | 	wrlong	arg02, objptr
151f4     56 00 00 FF 
151f8     DF E5 05 F1 | 	add	objptr, ##44511
151fc     F2 12 02 FB | 	rdlong	arg01, objptr
15200     57 00 00 FF 
15204     20 E4 85 F1 | 	sub	objptr, ##44576
15208     90 4C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1520c     A7 F0 03 F6 | 	mov	ptra, fp
15210     B2 00 A0 FD | 	call	#popregs_
15214                 | _do_ink_ret
15214     2D 00 64 FD | 	ret
15218                 | 
15218                 | ' 
15218                 | ' 
15218                 | ' sub do_font
15218                 | _do_font
15218     03 4A 05 F6 | 	mov	COUNT_, #3
1521c     A8 00 A0 FD | 	call	#pushregs_
15220     A4 4E BF FD | 	call	#_pop
15224     FD 1E 02 F6 | 	mov	local01, result1
15228     FE 20 02 F6 | 	mov	local02, result2
1522c     FF 22 02 F6 | 	mov	local03, result3
15230                 | ' t1=pop() 
15230                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15230     1E 22 0E F2 | 	cmp	local03, #30 wz
15234     10 00 90 5D |  if_ne	jmp	#LR__1710
15238     0F 13 02 F6 | 	mov	arg01, local01
1523c     00 14 06 F6 | 	mov	arg02, #0
15240     DC A0 B0 FD | 	call	#__system___float_tointeger
15244     FD 1E 02 F6 | 	mov	local01, result1
15248                 | LR__1710
15248                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15248     1F 22 0E F2 | 	cmp	local03, #31 wz
1524c     18 00 90 5D |  if_ne	jmp	#LR__1711
15250     0F 13 02 F6 | 	mov	arg01, local01
15254     E8 A3 B0 FD | 	call	#__system____builtin_atof
15258     FD 12 02 F6 | 	mov	arg01, result1
1525c     00 14 06 F6 | 	mov	arg02, #0
15260     BC A0 B0 FD | 	call	#__system___float_tointeger
15264     FD 1E 02 F6 | 	mov	local01, result1
15268                 | LR__1711
15268     57 00 00 FF 
1526c     24 E4 05 F1 | 	add	objptr, ##44580
15270     F2 1E 62 FC | 	wrlong	local01, objptr
15274     57 00 00 FF 
15278     24 E4 85 F1 | 	sub	objptr, ##44580
1527c     02 1E 66 F0 | 	shl	local01, #2
15280     0F 13 02 F6 | 	mov	arg01, local01
15284     74 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
15288     A7 F0 03 F6 | 	mov	ptra, fp
1528c     B2 00 A0 FD | 	call	#popregs_
15290                 | _do_font_ret
15290     2D 00 64 FD | 	ret
15294                 | 
15294                 | ' 
15294                 | ' sub do_mode
15294                 | _do_mode
15294     04 4A 05 F6 | 	mov	COUNT_, #4
15298     A8 00 A0 FD | 	call	#pushregs_
1529c     28 4E BF FD | 	call	#_pop
152a0     FD 1E 02 F6 | 	mov	local01, result1
152a4     FE 20 02 F6 | 	mov	local02, result2
152a8     FF 22 02 F6 | 	mov	local03, result3
152ac                 | ' t1=pop() 
152ac                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
152ac     1E 22 0E F2 | 	cmp	local03, #30 wz
152b0     10 00 90 5D |  if_ne	jmp	#LR__1720
152b4     0F 13 02 F6 | 	mov	arg01, local01
152b8     00 14 06 F6 | 	mov	arg02, #0
152bc     60 A0 B0 FD | 	call	#__system___float_tointeger
152c0     FD 1E 02 F6 | 	mov	local01, result1
152c4                 | LR__1720
152c4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
152c4     1F 22 0E F2 | 	cmp	local03, #31 wz
152c8     18 00 90 5D |  if_ne	jmp	#LR__1721
152cc     0F 13 02 F6 | 	mov	arg01, local01
152d0     6C A3 B0 FD | 	call	#__system____builtin_atof
152d4     FD 12 02 F6 | 	mov	arg01, result1
152d8     00 14 06 F6 | 	mov	arg02, #0
152dc     40 A0 B0 FD | 	call	#__system___float_tointeger
152e0     FD 1E 02 F6 | 	mov	local01, result1
152e4                 | LR__1721
152e4                 | ' select case t1.result.iresult
152e4     0F 25 02 F6 | 	mov	local04, local01
152e8     05 24 26 F3 | 	fle	local04, #5
152ec     30 24 62 FD | 	jmprel	local04
152f0                 | LR__1722
152f0     14 00 90 FD | 	jmp	#LR__1723
152f4     A8 00 90 FD | 	jmp	#LR__1724
152f8     10 01 90 FD | 	jmp	#LR__1725
152fc     78 01 90 FD | 	jmp	#LR__1726
15300     E0 01 90 FD | 	jmp	#LR__1727
15304     70 02 90 FD | 	jmp	#LR__1728
15308                 | LR__1723
15308     57 00 00 FF 
1530c     24 E4 05 F1 | 	add	objptr, ##44580
15310     F2 02 68 FC | 	wrlong	#1, objptr
15314     04 E4 85 F1 | 	sub	objptr, #4
15318     F2 34 69 FC | 	wrlong	#154, objptr
1531c     22 00 00 FF 
15320     A4 E5 05 F1 | 	add	objptr, ##17828
15324     F2 02 68 FC | 	wrlong	#1, objptr
15328     22 00 00 FF 
1532c     A8 E5 85 F1 | 	sub	objptr, ##17832
15330     F2 26 69 FC | 	wrlong	#147, objptr
15334     57 00 00 FF 
15338     1C E4 85 F1 | 	sub	objptr, ##44572
1533c     04 12 06 F6 | 	mov	arg01, #4
15340     B8 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
15344     57 00 00 FF 
15348     20 E4 05 F1 | 	add	objptr, ##44576
1534c     F2 12 02 FB | 	rdlong	arg01, objptr
15350     04 E4 85 F1 | 	sub	objptr, #4
15354     F2 14 02 FB | 	rdlong	arg02, objptr
15358                 | ' 
15358                 | ' write_color:=ff
15358     56 00 00 FF 
1535c     DF E5 85 F1 | 	sub	objptr, ##44511
15360     F2 12 62 FC | 	wrlong	arg01, objptr
15364                 | ' write_background:=bb
15364     04 E4 05 F1 | 	add	objptr, #4
15368     F2 14 62 FC | 	wrlong	arg02, objptr
1536c     01 00 00 FF 
15370     00 EA 05 F1 | 	add	ptr__dat__, ##512
15374     7B 00 00 FF 
15378     27 E4 05 F1 | 	add	objptr, ##63015
1537c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15380     04 E4 85 F1 | 	sub	objptr, #4
15384     03 00 80 FF 
15388     F2 30 69 FC | 	wrlong	##1688, objptr
1538c     7B 00 00 FF 
15390     64 E4 85 F1 | 	sub	objptr, ##63076
15394     01 00 00 FF 
15398     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1539c     D8 01 90 FD | 	jmp	#LR__1728
153a0                 | LR__1724
153a0     57 00 00 FF 
153a4     24 E4 05 F1 | 	add	objptr, ##44580
153a8     F2 00 68 FC | 	wrlong	#0, objptr
153ac     04 E4 85 F1 | 	sub	objptr, #4
153b0     F2 2E 68 FC | 	wrlong	#23, objptr
153b4     22 00 00 FF 
153b8     A4 E5 05 F1 | 	add	objptr, ##17828
153bc     F2 00 68 FC | 	wrlong	#0, objptr
153c0     22 00 00 FF 
153c4     A8 E5 85 F1 | 	sub	objptr, ##17832
153c8     F2 00 68 FC | 	wrlong	#0, objptr
153cc     57 00 00 FF 
153d0     1C E4 85 F1 | 	sub	objptr, ##44572
153d4     00 12 06 F6 | 	mov	arg01, #0
153d8     20 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
153dc     57 00 00 FF 
153e0     20 E4 05 F1 | 	add	objptr, ##44576
153e4     F2 12 02 FB | 	rdlong	arg01, objptr
153e8     04 E4 85 F1 | 	sub	objptr, #4
153ec     F2 14 02 FB | 	rdlong	arg02, objptr
153f0                 | ' 
153f0                 | ' write_color:=ff
153f0     56 00 00 FF 
153f4     DF E5 85 F1 | 	sub	objptr, ##44511
153f8     F2 12 62 FC | 	wrlong	arg01, objptr
153fc                 | ' write_background:=bb
153fc     04 E4 05 F1 | 	add	objptr, #4
15400     F2 14 62 FC | 	wrlong	arg02, objptr
15404     41 E4 85 F1 | 	sub	objptr, #65
15408     6C 01 90 FD | 	jmp	#LR__1728
1540c                 | LR__1725
1540c     57 00 00 FF 
15410     24 E4 05 F1 | 	add	objptr, ##44580
15414     F2 00 68 FC | 	wrlong	#0, objptr
15418     04 E4 85 F1 | 	sub	objptr, #4
1541c     F2 6A 69 FC | 	wrlong	#181, objptr
15420     22 00 00 FF 
15424     A4 E5 05 F1 | 	add	objptr, ##17828
15428     F2 00 68 FC | 	wrlong	#0, objptr
1542c     22 00 00 FF 
15430     A8 E5 85 F1 | 	sub	objptr, ##17832
15434     F2 00 68 FC | 	wrlong	#0, objptr
15438     57 00 00 FF 
1543c     1C E4 85 F1 | 	sub	objptr, ##44572
15440     00 12 06 F6 | 	mov	arg01, #0
15444     B4 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15448     57 00 00 FF 
1544c     20 E4 05 F1 | 	add	objptr, ##44576
15450     F2 12 02 FB | 	rdlong	arg01, objptr
15454     04 E4 85 F1 | 	sub	objptr, #4
15458     F2 14 02 FB | 	rdlong	arg02, objptr
1545c                 | ' 
1545c                 | ' write_color:=ff
1545c     56 00 00 FF 
15460     DF E5 85 F1 | 	sub	objptr, ##44511
15464     F2 12 62 FC | 	wrlong	arg01, objptr
15468                 | ' write_background:=bb
15468     04 E4 05 F1 | 	add	objptr, #4
1546c     F2 14 62 FC | 	wrlong	arg02, objptr
15470     41 E4 85 F1 | 	sub	objptr, #65
15474     00 01 90 FD | 	jmp	#LR__1728
15478                 | LR__1726
15478     57 00 00 FF 
1547c     24 E4 05 F1 | 	add	objptr, ##44580
15480     F2 00 68 FC | 	wrlong	#0, objptr
15484     04 E4 85 F1 | 	sub	objptr, #4
15488     F2 1E 68 FC | 	wrlong	#15, objptr
1548c     22 00 00 FF 
15490     A4 E5 05 F1 | 	add	objptr, ##17828
15494     F2 00 68 FC | 	wrlong	#0, objptr
15498     22 00 00 FF 
1549c     A8 E5 85 F1 | 	sub	objptr, ##17832
154a0     F2 00 68 FC | 	wrlong	#0, objptr
154a4     57 00 00 FF 
154a8     1C E4 85 F1 | 	sub	objptr, ##44572
154ac     00 12 06 F6 | 	mov	arg01, #0
154b0     48 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
154b4     57 00 00 FF 
154b8     20 E4 05 F1 | 	add	objptr, ##44576
154bc     F2 12 02 FB | 	rdlong	arg01, objptr
154c0     04 E4 85 F1 | 	sub	objptr, #4
154c4     F2 14 02 FB | 	rdlong	arg02, objptr
154c8                 | ' 
154c8                 | ' write_color:=ff
154c8     56 00 00 FF 
154cc     DF E5 85 F1 | 	sub	objptr, ##44511
154d0     F2 12 62 FC | 	wrlong	arg01, objptr
154d4                 | ' write_background:=bb
154d4     04 E4 05 F1 | 	add	objptr, #4
154d8     F2 14 62 FC | 	wrlong	arg02, objptr
154dc     41 E4 85 F1 | 	sub	objptr, #65
154e0     94 00 90 FD | 	jmp	#LR__1728
154e4                 | LR__1727
154e4     57 00 00 FF 
154e8     24 E4 05 F1 | 	add	objptr, ##44580
154ec     F2 02 68 FC | 	wrlong	#1, objptr
154f0     04 E4 85 F1 | 	sub	objptr, #4
154f4     F2 02 68 FC | 	wrlong	#1, objptr
154f8     22 00 00 FF 
154fc     A4 E5 05 F1 | 	add	objptr, ##17828
15500     F2 02 68 FC | 	wrlong	#1, objptr
15504     22 00 00 FF 
15508     A8 E5 85 F1 | 	sub	objptr, ##17832
1550c     F2 1C 68 FC | 	wrlong	#14, objptr
15510     57 00 00 FF 
15514     1C E4 85 F1 | 	sub	objptr, ##44572
15518     04 12 06 F6 | 	mov	arg01, #4
1551c     DC 58 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15520     57 00 00 FF 
15524     20 E4 05 F1 | 	add	objptr, ##44576
15528     F2 12 02 FB | 	rdlong	arg01, objptr
1552c     04 E4 85 F1 | 	sub	objptr, #4
15530     F2 14 02 FB | 	rdlong	arg02, objptr
15534                 | ' 
15534                 | ' write_color:=ff
15534     56 00 00 FF 
15538     DF E5 85 F1 | 	sub	objptr, ##44511
1553c     F2 12 62 FC | 	wrlong	arg01, objptr
15540                 | ' write_background:=bb
15540     04 E4 05 F1 | 	add	objptr, #4
15544     F2 14 62 FC | 	wrlong	arg02, objptr
15548     07 00 00 FF 
1554c     8A EB 05 F1 | 	add	ptr__dat__, ##3978
15550     7B 00 00 FF 
15554     27 E4 05 F1 | 	add	objptr, ##63015
15558     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1555c     04 E4 85 F1 | 	sub	objptr, #4
15560     03 00 80 FF 
15564     F2 30 69 FC | 	wrlong	##1688, objptr
15568     7B 00 00 FF 
1556c     64 E4 85 F1 | 	sub	objptr, ##63076
15570     07 00 00 FF 
15574     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
15578                 | LR__1728
15578     7B 00 00 FF 
1557c     60 E4 05 F1 | 	add	objptr, ##63072
15580     F2 1E 62 FC | 	wrlong	local01, objptr
15584     24 00 00 FF 
15588     40 E4 85 F1 | 	sub	objptr, ##18496
1558c     F2 12 02 FB | 	rdlong	arg01, objptr
15590     04 E4 85 F1 | 	sub	objptr, #4
15594     F2 14 02 FB | 	rdlong	arg02, objptr
15598     57 00 00 FF 
1559c     1C E4 85 F1 | 	sub	objptr, ##44572
155a0     40 59 B0 FD | 	call	#_hg010b_spin2_cls
155a4     5F 01 00 FF 
155a8     4A 13 06 F6 | 	mov	arg01, ##@LR__4950
155ac                 | ' 
155ac                 | ' write(text)
155ac     F0 5B B0 FD | 	call	#_hg010b_spin2_write
155b0                 | ' crlf
155b0     4C 5D B0 FD | 	call	#_hg010b_spin2_crlf
155b4     18 00 00 FF 
155b8     4C EB 05 F1 | 	add	ptr__dat__, ##12620
155bc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
155c0     18 00 00 FF 
155c4     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
155c8                 | ' 
155c8                 | ' write(text)
155c8     D4 5B B0 FD | 	call	#_hg010b_spin2_write
155cc                 | ' crlf
155cc     30 5D B0 FD | 	call	#_hg010b_spin2_crlf
155d0     79 00 00 FF 
155d4     C0 E5 05 F1 | 	add	objptr, ##62400
155d8     F2 12 02 FB | 	rdlong	arg01, objptr
155dc     79 00 00 FF 
155e0     C0 E5 85 F1 | 	sub	objptr, ##62400
155e4                 | ' 
155e4                 | ' write(text)
155e4     B8 5B B0 FD | 	call	#_hg010b_spin2_write
155e8                 | ' crlf
155e8     14 5D B0 FD | 	call	#_hg010b_spin2_crlf
155ec     A7 F0 03 F6 | 	mov	ptra, fp
155f0     B2 00 A0 FD | 	call	#popregs_
155f4                 | _do_mode_ret
155f4     2D 00 64 FD | 	ret
155f8                 | 
155f8                 | ' 
155f8                 | ' sub do_setwave
155f8                 | _do_setwave
155f8     02 4A 05 F6 | 	mov	COUNT_, #2
155fc     A8 00 A0 FD | 	call	#pushregs_
15600     18 F0 07 F1 | 	add	ptra, #24
15604     C0 4A BF FD | 	call	#_pop
15608     FD 12 02 F6 | 	mov	arg01, result1
1560c     FE 1E 02 F6 | 	mov	local01, result2
15610     FF 20 02 F6 | 	mov	local02, result3
15614     A7 12 62 FC | 	wrlong	arg01, fp
15618     04 4E 05 F1 | 	add	fp, #4
1561c     A7 1E 62 FC | 	wrlong	local01, fp
15620     04 4E 05 F1 | 	add	fp, #4
15624     A7 20 62 FC | 	wrlong	local02, fp
15628     08 4E 85 F1 | 	sub	fp, #8
1562c     98 4A BF FD | 	call	#_pop
15630     FD 20 02 F6 | 	mov	local02, result1
15634     0C 4E 05 F1 | 	add	fp, #12
15638     A7 20 62 FC | 	wrlong	local02, fp
1563c     04 4E 05 F1 | 	add	fp, #4
15640     A7 FC 61 FC | 	wrlong	result2, fp
15644     04 4E 05 F1 | 	add	fp, #4
15648     A7 FE 61 FC | 	wrlong	result3, fp
1564c     08 4E 85 F1 | 	sub	fp, #8
15650     A7 12 02 F6 | 	mov	arg01, fp
15654     0C 4E 85 F1 | 	sub	fp, #12
15658     C0 D3 BF FD | 	call	#_converttoint
1565c     FD 20 02 F6 | 	mov	local02, result1
15660     10 1F 02 F6 | 	mov	local01, local02
15664     01 1E 66 F0 | 	shl	local01, #1
15668     10 1F 02 F1 | 	add	local01, local02
1566c     03 1E 66 F0 | 	shl	local01, #3
15670     34 00 00 FF 
15674     2C E5 05 F1 | 	add	objptr, ##26924
15678     F2 1E 02 F1 | 	add	local01, objptr
1567c     A7 12 02 F6 | 	mov	arg01, fp
15680     34 00 00 FF 
15684     2C E5 85 F1 | 	sub	objptr, ##26924
15688     90 D3 BF FD | 	call	#_converttoint
1568c     04 1E 06 F1 | 	add	local01, #4
15690     0F FB 41 FC | 	wrbyte	result1, local01
15694     A7 F0 03 F6 | 	mov	ptra, fp
15698     B2 00 A0 FD | 	call	#popregs_
1569c                 | _do_setwave_ret
1569c     2D 00 64 FD | 	ret
156a0                 | 
156a0                 | ' 
156a0                 | ' sub do_setsustain
156a0                 | _do_setsustain
156a0     02 4A 05 F6 | 	mov	COUNT_, #2
156a4     A8 00 A0 FD | 	call	#pushregs_
156a8     18 F0 07 F1 | 	add	ptra, #24
156ac     18 4A BF FD | 	call	#_pop
156b0     FD 12 02 F6 | 	mov	arg01, result1
156b4     FE 1E 02 F6 | 	mov	local01, result2
156b8     FF 20 02 F6 | 	mov	local02, result3
156bc     A7 12 62 FC | 	wrlong	arg01, fp
156c0     04 4E 05 F1 | 	add	fp, #4
156c4     A7 1E 62 FC | 	wrlong	local01, fp
156c8     04 4E 05 F1 | 	add	fp, #4
156cc     A7 20 62 FC | 	wrlong	local02, fp
156d0     08 4E 85 F1 | 	sub	fp, #8
156d4     F0 49 BF FD | 	call	#_pop
156d8     FD 20 02 F6 | 	mov	local02, result1
156dc     0C 4E 05 F1 | 	add	fp, #12
156e0     A7 20 62 FC | 	wrlong	local02, fp
156e4     04 4E 05 F1 | 	add	fp, #4
156e8     A7 FC 61 FC | 	wrlong	result2, fp
156ec     04 4E 05 F1 | 	add	fp, #4
156f0     A7 FE 61 FC | 	wrlong	result3, fp
156f4     08 4E 85 F1 | 	sub	fp, #8
156f8     A7 12 02 F6 | 	mov	arg01, fp
156fc     0C 4E 85 F1 | 	sub	fp, #12
15700     18 D3 BF FD | 	call	#_converttoint
15704     FD 20 02 F6 | 	mov	local02, result1
15708     10 1F 02 F6 | 	mov	local01, local02
1570c     01 1E 66 F0 | 	shl	local01, #1
15710     10 1F 02 F1 | 	add	local01, local02
15714     03 1E 66 F0 | 	shl	local01, #3
15718     34 00 00 FF 
1571c     2C E5 05 F1 | 	add	objptr, ##26924
15720     F2 1E 02 F1 | 	add	local01, objptr
15724     A7 12 02 F6 | 	mov	arg01, fp
15728     34 00 00 FF 
1572c     2C E5 85 F1 | 	sub	objptr, ##26924
15730     E8 D2 BF FD | 	call	#_converttoint
15734     14 1E 06 F1 | 	add	local01, #20
15738     0F FB 51 FC | 	wrword	result1, local01
1573c     A7 F0 03 F6 | 	mov	ptra, fp
15740     B2 00 A0 FD | 	call	#popregs_
15744                 | _do_setsustain_ret
15744     2D 00 64 FD | 	ret
15748                 | 
15748                 | ' 
15748                 | ' sub do_setenv
15748                 | _do_setenv
15748     02 4A 05 F6 | 	mov	COUNT_, #2
1574c     A8 00 A0 FD | 	call	#pushregs_
15750     18 F0 07 F1 | 	add	ptra, #24
15754     70 49 BF FD | 	call	#_pop
15758     FD 12 02 F6 | 	mov	arg01, result1
1575c     FE 1E 02 F6 | 	mov	local01, result2
15760     FF 20 02 F6 | 	mov	local02, result3
15764     A7 12 62 FC | 	wrlong	arg01, fp
15768     04 4E 05 F1 | 	add	fp, #4
1576c     A7 1E 62 FC | 	wrlong	local01, fp
15770     04 4E 05 F1 | 	add	fp, #4
15774     A7 20 62 FC | 	wrlong	local02, fp
15778     08 4E 85 F1 | 	sub	fp, #8
1577c     48 49 BF FD | 	call	#_pop
15780     FD 20 02 F6 | 	mov	local02, result1
15784     0C 4E 05 F1 | 	add	fp, #12
15788     A7 20 62 FC | 	wrlong	local02, fp
1578c     04 4E 05 F1 | 	add	fp, #4
15790     A7 FC 61 FC | 	wrlong	result2, fp
15794     04 4E 05 F1 | 	add	fp, #4
15798     A7 FE 61 FC | 	wrlong	result3, fp
1579c     08 4E 85 F1 | 	sub	fp, #8
157a0     A7 12 02 F6 | 	mov	arg01, fp
157a4     0C 4E 85 F1 | 	sub	fp, #12
157a8     70 D2 BF FD | 	call	#_converttoint
157ac     FD 20 02 F6 | 	mov	local02, result1
157b0     10 1F 02 F6 | 	mov	local01, local02
157b4     01 1E 66 F0 | 	shl	local01, #1
157b8     10 1F 02 F1 | 	add	local01, local02
157bc     03 1E 66 F0 | 	shl	local01, #3
157c0     34 00 00 FF 
157c4     2C E5 05 F1 | 	add	objptr, ##26924
157c8     F2 1E 02 F1 | 	add	local01, objptr
157cc     A7 12 02 F6 | 	mov	arg01, fp
157d0     34 00 00 FF 
157d4     2C E5 85 F1 | 	sub	objptr, ##26924
157d8     40 D2 BF FD | 	call	#_converttoint
157dc     05 1E 06 F1 | 	add	local01, #5
157e0     0F FB 41 FC | 	wrbyte	result1, local01
157e4     A7 F0 03 F6 | 	mov	ptra, fp
157e8     B2 00 A0 FD | 	call	#popregs_
157ec                 | _do_setenv_ret
157ec     2D 00 64 FD | 	ret
157f0                 | 
157f0                 | ' 
157f0                 | ' sub do_setdelay
157f0                 | _do_setdelay
157f0     02 4A 05 F6 | 	mov	COUNT_, #2
157f4     A8 00 A0 FD | 	call	#pushregs_
157f8     18 F0 07 F1 | 	add	ptra, #24
157fc     C8 48 BF FD | 	call	#_pop
15800     FD 12 02 F6 | 	mov	arg01, result1
15804     FE 1E 02 F6 | 	mov	local01, result2
15808     FF 20 02 F6 | 	mov	local02, result3
1580c     A7 12 62 FC | 	wrlong	arg01, fp
15810     04 4E 05 F1 | 	add	fp, #4
15814     A7 1E 62 FC | 	wrlong	local01, fp
15818     04 4E 05 F1 | 	add	fp, #4
1581c     A7 20 62 FC | 	wrlong	local02, fp
15820     08 4E 85 F1 | 	sub	fp, #8
15824     A0 48 BF FD | 	call	#_pop
15828     FD 20 02 F6 | 	mov	local02, result1
1582c     0C 4E 05 F1 | 	add	fp, #12
15830     A7 20 62 FC | 	wrlong	local02, fp
15834     04 4E 05 F1 | 	add	fp, #4
15838     A7 FC 61 FC | 	wrlong	result2, fp
1583c     04 4E 05 F1 | 	add	fp, #4
15840     A7 FE 61 FC | 	wrlong	result3, fp
15844     08 4E 85 F1 | 	sub	fp, #8
15848     A7 12 02 F6 | 	mov	arg01, fp
1584c     0C 4E 85 F1 | 	sub	fp, #12
15850     C8 D1 BF FD | 	call	#_converttoint
15854     FD 20 02 F6 | 	mov	local02, result1
15858     10 1F 02 F6 | 	mov	local01, local02
1585c     01 1E 66 F0 | 	shl	local01, #1
15860     10 1F 02 F1 | 	add	local01, local02
15864     03 1E 66 F0 | 	shl	local01, #3
15868     34 00 00 FF 
1586c     2C E5 05 F1 | 	add	objptr, ##26924
15870     F2 1E 02 F1 | 	add	local01, objptr
15874     A7 12 02 F6 | 	mov	arg01, fp
15878     34 00 00 FF 
1587c     2C E5 85 F1 | 	sub	objptr, ##26924
15880     98 D1 BF FD | 	call	#_converttoint
15884     06 1E 06 F1 | 	add	local01, #6
15888     0F FB 51 FC | 	wrword	result1, local01
1588c     A7 F0 03 F6 | 	mov	ptra, fp
15890     B2 00 A0 FD | 	call	#popregs_
15894                 | _do_setdelay_ret
15894     2D 00 64 FD | 	ret
15898                 | 
15898                 | ' 
15898                 | ' sub do_setlen
15898                 | _do_setlen
15898     02 4A 05 F6 | 	mov	COUNT_, #2
1589c     A8 00 A0 FD | 	call	#pushregs_
158a0     18 F0 07 F1 | 	add	ptra, #24
158a4     20 48 BF FD | 	call	#_pop
158a8     FD 12 02 F6 | 	mov	arg01, result1
158ac     FE 1E 02 F6 | 	mov	local01, result2
158b0     FF 20 02 F6 | 	mov	local02, result3
158b4     A7 12 62 FC | 	wrlong	arg01, fp
158b8     04 4E 05 F1 | 	add	fp, #4
158bc     A7 1E 62 FC | 	wrlong	local01, fp
158c0     04 4E 05 F1 | 	add	fp, #4
158c4     A7 20 62 FC | 	wrlong	local02, fp
158c8     08 4E 85 F1 | 	sub	fp, #8
158cc     F8 47 BF FD | 	call	#_pop
158d0     FD 20 02 F6 | 	mov	local02, result1
158d4     0C 4E 05 F1 | 	add	fp, #12
158d8     A7 20 62 FC | 	wrlong	local02, fp
158dc     04 4E 05 F1 | 	add	fp, #4
158e0     A7 FC 61 FC | 	wrlong	result2, fp
158e4     04 4E 05 F1 | 	add	fp, #4
158e8     A7 FE 61 FC | 	wrlong	result3, fp
158ec     08 4E 85 F1 | 	sub	fp, #8
158f0     A7 12 02 F6 | 	mov	arg01, fp
158f4     0C 4E 85 F1 | 	sub	fp, #12
158f8     20 D1 BF FD | 	call	#_converttoint
158fc     FD 20 02 F6 | 	mov	local02, result1
15900     10 1F 02 F6 | 	mov	local01, local02
15904     01 1E 66 F0 | 	shl	local01, #1
15908     10 1F 02 F1 | 	add	local01, local02
1590c     03 1E 66 F0 | 	shl	local01, #3
15910     34 00 00 FF 
15914     2C E5 05 F1 | 	add	objptr, ##26924
15918     F2 1E 02 F1 | 	add	local01, objptr
1591c     A7 12 02 F6 | 	mov	arg01, fp
15920     34 00 00 FF 
15924     2C E5 85 F1 | 	sub	objptr, ##26924
15928     9C D1 BF FD | 	call	#_converttofloat
1592c     08 1E 06 F1 | 	add	local01, #8
15930     0F FB 61 FC | 	wrlong	result1, local01
15934     A7 F0 03 F6 | 	mov	ptra, fp
15938     B2 00 A0 FD | 	call	#popregs_
1593c                 | _do_setlen_ret
1593c     2D 00 64 FD | 	ret
15940                 | 
15940                 | ' 
15940                 | ' sub do_setvol
15940                 | _do_setvol
15940     02 4A 05 F6 | 	mov	COUNT_, #2
15944     A8 00 A0 FD | 	call	#pushregs_
15948     18 F0 07 F1 | 	add	ptra, #24
1594c     78 47 BF FD | 	call	#_pop
15950     FD 12 02 F6 | 	mov	arg01, result1
15954     FE 1E 02 F6 | 	mov	local01, result2
15958     FF 20 02 F6 | 	mov	local02, result3
1595c     A7 12 62 FC | 	wrlong	arg01, fp
15960     04 4E 05 F1 | 	add	fp, #4
15964     A7 1E 62 FC | 	wrlong	local01, fp
15968     04 4E 05 F1 | 	add	fp, #4
1596c     A7 20 62 FC | 	wrlong	local02, fp
15970     08 4E 85 F1 | 	sub	fp, #8
15974     50 47 BF FD | 	call	#_pop
15978     FD 20 02 F6 | 	mov	local02, result1
1597c     0C 4E 05 F1 | 	add	fp, #12
15980     A7 20 62 FC | 	wrlong	local02, fp
15984     04 4E 05 F1 | 	add	fp, #4
15988     A7 FC 61 FC | 	wrlong	result2, fp
1598c     04 4E 05 F1 | 	add	fp, #4
15990     A7 FE 61 FC | 	wrlong	result3, fp
15994     08 4E 85 F1 | 	sub	fp, #8
15998     A7 12 02 F6 | 	mov	arg01, fp
1599c     0C 4E 85 F1 | 	sub	fp, #12
159a0     78 D0 BF FD | 	call	#_converttoint
159a4     FD 20 02 F6 | 	mov	local02, result1
159a8     10 1F 02 F6 | 	mov	local01, local02
159ac     01 1E 66 F0 | 	shl	local01, #1
159b0     10 1F 02 F1 | 	add	local01, local02
159b4     03 1E 66 F0 | 	shl	local01, #3
159b8     34 00 00 FF 
159bc     2C E5 05 F1 | 	add	objptr, ##26924
159c0     F2 1E 02 F1 | 	add	local01, objptr
159c4     A7 12 02 F6 | 	mov	arg01, fp
159c8     34 00 00 FF 
159cc     2C E5 85 F1 | 	sub	objptr, ##26924
159d0     F4 D0 BF FD | 	call	#_converttofloat
159d4     0C 1E 06 F1 | 	add	local01, #12
159d8     0F FB 61 FC | 	wrlong	result1, local01
159dc     A7 F0 03 F6 | 	mov	ptra, fp
159e0     B2 00 A0 FD | 	call	#popregs_
159e4                 | _do_setvol_ret
159e4     2D 00 64 FD | 	ret
159e8                 | 
159e8                 | ' 
159e8                 | ' sub do_setpan
159e8                 | _do_setpan
159e8     02 4A 05 F6 | 	mov	COUNT_, #2
159ec     A8 00 A0 FD | 	call	#pushregs_
159f0     18 F0 07 F1 | 	add	ptra, #24
159f4     D0 46 BF FD | 	call	#_pop
159f8     FD 12 02 F6 | 	mov	arg01, result1
159fc     FE 1E 02 F6 | 	mov	local01, result2
15a00     FF 20 02 F6 | 	mov	local02, result3
15a04     A7 12 62 FC | 	wrlong	arg01, fp
15a08     04 4E 05 F1 | 	add	fp, #4
15a0c     A7 1E 62 FC | 	wrlong	local01, fp
15a10     04 4E 05 F1 | 	add	fp, #4
15a14     A7 20 62 FC | 	wrlong	local02, fp
15a18     08 4E 85 F1 | 	sub	fp, #8
15a1c     A8 46 BF FD | 	call	#_pop
15a20     FD 20 02 F6 | 	mov	local02, result1
15a24     0C 4E 05 F1 | 	add	fp, #12
15a28     A7 20 62 FC | 	wrlong	local02, fp
15a2c     04 4E 05 F1 | 	add	fp, #4
15a30     A7 FC 61 FC | 	wrlong	result2, fp
15a34     04 4E 05 F1 | 	add	fp, #4
15a38     A7 FE 61 FC | 	wrlong	result3, fp
15a3c     08 4E 85 F1 | 	sub	fp, #8
15a40     A7 12 02 F6 | 	mov	arg01, fp
15a44     0C 4E 85 F1 | 	sub	fp, #12
15a48     D0 CF BF FD | 	call	#_converttoint
15a4c     FD 20 02 F6 | 	mov	local02, result1
15a50     10 1F 02 F6 | 	mov	local01, local02
15a54     01 1E 66 F0 | 	shl	local01, #1
15a58     10 1F 02 F1 | 	add	local01, local02
15a5c     03 1E 66 F0 | 	shl	local01, #3
15a60     34 00 00 FF 
15a64     2C E5 05 F1 | 	add	objptr, ##26924
15a68     F2 1E 02 F1 | 	add	local01, objptr
15a6c     A7 12 02 F6 | 	mov	arg01, fp
15a70     34 00 00 FF 
15a74     2C E5 85 F1 | 	sub	objptr, ##26924
15a78     4C D0 BF FD | 	call	#_converttofloat
15a7c     10 1E 06 F1 | 	add	local01, #16
15a80     0F FB 61 FC | 	wrlong	result1, local01
15a84     A7 F0 03 F6 | 	mov	ptra, fp
15a88     B2 00 A0 FD | 	call	#popregs_
15a8c                 | _do_setpan_ret
15a8c     2D 00 64 FD | 	ret
15a90                 | 
15a90                 | ' 
15a90                 | ' 
15a90                 | ' sub do_pinwrite
15a90                 | _do_pinwrite
15a90     01 4A 05 F6 | 	mov	COUNT_, #1
15a94     A8 00 A0 FD | 	call	#pushregs_
15a98     18 F0 07 F1 | 	add	ptra, #24
15a9c     28 46 BF FD | 	call	#_pop
15aa0     FD 14 02 F6 | 	mov	arg02, result1
15aa4     FE 12 02 F6 | 	mov	arg01, result2
15aa8     FF 1E 02 F6 | 	mov	local01, result3
15aac     A7 14 62 FC | 	wrlong	arg02, fp
15ab0     04 4E 05 F1 | 	add	fp, #4
15ab4     A7 12 62 FC | 	wrlong	arg01, fp
15ab8     04 4E 05 F1 | 	add	fp, #4
15abc     A7 1E 62 FC | 	wrlong	local01, fp
15ac0     08 4E 85 F1 | 	sub	fp, #8
15ac4     00 46 BF FD | 	call	#_pop
15ac8     FF 1E 02 F6 | 	mov	local01, result3
15acc     0C 4E 05 F1 | 	add	fp, #12
15ad0     A7 FA 61 FC | 	wrlong	result1, fp
15ad4     04 4E 05 F1 | 	add	fp, #4
15ad8     A7 FC 61 FC | 	wrlong	result2, fp
15adc     04 4E 05 F1 | 	add	fp, #4
15ae0     A7 1E 62 FC | 	wrlong	local01, fp
15ae4     08 4E 85 F1 | 	sub	fp, #8
15ae8     A7 12 02 F6 | 	mov	arg01, fp
15aec     0C 4E 85 F1 | 	sub	fp, #12
15af0     28 CF BF FD | 	call	#_converttoint
15af4     FD 1E 02 F6 | 	mov	local01, result1
15af8     A7 12 02 F6 | 	mov	arg01, fp
15afc     1C CF BF FD | 	call	#_converttoint
15b00     FD 14 02 F6 | 	mov	arg02, result1
15b04     0F 13 02 F6 | 	mov	arg01, local01
15b08     84 69 B0 FD | 	call	#__system___pinwrite
15b0c     A7 F0 03 F6 | 	mov	ptra, fp
15b10     B2 00 A0 FD | 	call	#popregs_
15b14                 | _do_pinwrite_ret
15b14     2D 00 64 FD | 	ret
15b18                 | 
15b18                 | ' 
15b18                 | ' sub do_pinfloat
15b18                 | _do_pinfloat
15b18     00 4A 05 F6 | 	mov	COUNT_, #0
15b1c     A8 00 A0 FD | 	call	#pushregs_
15b20     0C F0 07 F1 | 	add	ptra, #12
15b24     A0 45 BF FD | 	call	#_pop
15b28     A7 FA 61 FC | 	wrlong	result1, fp
15b2c     04 4E 05 F1 | 	add	fp, #4
15b30     A7 FC 61 FC | 	wrlong	result2, fp
15b34     04 4E 05 F1 | 	add	fp, #4
15b38     A7 FE 61 FC | 	wrlong	result3, fp
15b3c     08 4E 85 F1 | 	sub	fp, #8
15b40     A7 12 02 F6 | 	mov	arg01, fp
15b44     D4 CE BF FD | 	call	#_converttoint
15b48     50 FA 61 FD | 	fltl	result1
15b4c     A7 F0 03 F6 | 	mov	ptra, fp
15b50     B2 00 A0 FD | 	call	#popregs_
15b54                 | _do_pinfloat_ret
15b54     2D 00 64 FD | 	ret
15b58                 | 
15b58                 | ' 
15b58                 | ' sub do_pinlo
15b58                 | _do_pinlo
15b58     00 4A 05 F6 | 	mov	COUNT_, #0
15b5c     A8 00 A0 FD | 	call	#pushregs_
15b60     0C F0 07 F1 | 	add	ptra, #12
15b64     60 45 BF FD | 	call	#_pop
15b68     A7 FA 61 FC | 	wrlong	result1, fp
15b6c     04 4E 05 F1 | 	add	fp, #4
15b70     A7 FC 61 FC | 	wrlong	result2, fp
15b74     04 4E 05 F1 | 	add	fp, #4
15b78     A7 FE 61 FC | 	wrlong	result3, fp
15b7c     08 4E 85 F1 | 	sub	fp, #8
15b80     A7 12 02 F6 | 	mov	arg01, fp
15b84     94 CE BF FD | 	call	#_converttoint
15b88     58 FA 61 FD | 	drvl	result1
15b8c     A7 F0 03 F6 | 	mov	ptra, fp
15b90     B2 00 A0 FD | 	call	#popregs_
15b94                 | _do_pinlo_ret
15b94     2D 00 64 FD | 	ret
15b98                 | 
15b98                 | ' 
15b98                 | ' sub do_pinhi
15b98                 | _do_pinhi
15b98     00 4A 05 F6 | 	mov	COUNT_, #0
15b9c     A8 00 A0 FD | 	call	#pushregs_
15ba0     0C F0 07 F1 | 	add	ptra, #12
15ba4     20 45 BF FD | 	call	#_pop
15ba8     A7 FA 61 FC | 	wrlong	result1, fp
15bac     04 4E 05 F1 | 	add	fp, #4
15bb0     A7 FC 61 FC | 	wrlong	result2, fp
15bb4     04 4E 05 F1 | 	add	fp, #4
15bb8     A7 FE 61 FC | 	wrlong	result3, fp
15bbc     08 4E 85 F1 | 	sub	fp, #8
15bc0     A7 12 02 F6 | 	mov	arg01, fp
15bc4     54 CE BF FD | 	call	#_converttoint
15bc8     59 FA 61 FD | 	drvh	result1
15bcc     A7 F0 03 F6 | 	mov	ptra, fp
15bd0     B2 00 A0 FD | 	call	#popregs_
15bd4                 | _do_pinhi_ret
15bd4     2D 00 64 FD | 	ret
15bd8                 | 
15bd8                 | ' 
15bd8                 | ' sub do_pintoggle
15bd8                 | _do_pintoggle
15bd8     00 4A 05 F6 | 	mov	COUNT_, #0
15bdc     A8 00 A0 FD | 	call	#pushregs_
15be0     0C F0 07 F1 | 	add	ptra, #12
15be4     E0 44 BF FD | 	call	#_pop
15be8     A7 FA 61 FC | 	wrlong	result1, fp
15bec     04 4E 05 F1 | 	add	fp, #4
15bf0     A7 FC 61 FC | 	wrlong	result2, fp
15bf4     04 4E 05 F1 | 	add	fp, #4
15bf8     A7 FE 61 FC | 	wrlong	result3, fp
15bfc     08 4E 85 F1 | 	sub	fp, #8
15c00     A7 12 02 F6 | 	mov	arg01, fp
15c04     14 CE BF FD | 	call	#_converttoint
15c08     5F FA 61 FD | 	drvnot	result1
15c0c     A7 F0 03 F6 | 	mov	ptra, fp
15c10     B2 00 A0 FD | 	call	#popregs_
15c14                 | _do_pintoggle_ret
15c14     2D 00 64 FD | 	ret
15c18                 | 
15c18                 | ' 
15c18                 | ' 
15c18                 | ' sub do_pinstart
15c18                 | _do_pinstart
15c18     03 4A 05 F6 | 	mov	COUNT_, #3
15c1c     A8 00 A0 FD | 	call	#pushregs_
15c20     30 F0 07 F1 | 	add	ptra, #48
15c24     A0 44 BF FD | 	call	#_pop
15c28     FD 16 02 F6 | 	mov	arg03, result1
15c2c     FE 14 02 F6 | 	mov	arg02, result2
15c30     FF 18 02 F6 | 	mov	arg04, result3
15c34     A7 16 62 FC | 	wrlong	arg03, fp
15c38     04 4E 05 F1 | 	add	fp, #4
15c3c     A7 14 62 FC | 	wrlong	arg02, fp
15c40     04 4E 05 F1 | 	add	fp, #4
15c44     A7 18 62 FC | 	wrlong	arg04, fp
15c48     08 4E 85 F1 | 	sub	fp, #8
15c4c     78 44 BF FD | 	call	#_pop
15c50     FD 16 02 F6 | 	mov	arg03, result1
15c54     FE 14 02 F6 | 	mov	arg02, result2
15c58     FF 18 02 F6 | 	mov	arg04, result3
15c5c     0C 4E 05 F1 | 	add	fp, #12
15c60     A7 16 62 FC | 	wrlong	arg03, fp
15c64     04 4E 05 F1 | 	add	fp, #4
15c68     A7 14 62 FC | 	wrlong	arg02, fp
15c6c     04 4E 05 F1 | 	add	fp, #4
15c70     A7 18 62 FC | 	wrlong	arg04, fp
15c74     14 4E 85 F1 | 	sub	fp, #20
15c78     4C 44 BF FD | 	call	#_pop
15c7c     FD 16 02 F6 | 	mov	arg03, result1
15c80     FE 14 02 F6 | 	mov	arg02, result2
15c84     FF 18 02 F6 | 	mov	arg04, result3
15c88     18 4E 05 F1 | 	add	fp, #24
15c8c     A7 16 62 FC | 	wrlong	arg03, fp
15c90     04 4E 05 F1 | 	add	fp, #4
15c94     A7 14 62 FC | 	wrlong	arg02, fp
15c98     04 4E 05 F1 | 	add	fp, #4
15c9c     A7 18 62 FC | 	wrlong	arg04, fp
15ca0     20 4E 85 F1 | 	sub	fp, #32
15ca4     20 44 BF FD | 	call	#_pop
15ca8     FF 16 02 F6 | 	mov	arg03, result3
15cac     24 4E 05 F1 | 	add	fp, #36
15cb0     A7 FA 61 FC | 	wrlong	result1, fp
15cb4     04 4E 05 F1 | 	add	fp, #4
15cb8     A7 FC 61 FC | 	wrlong	result2, fp
15cbc     04 4E 05 F1 | 	add	fp, #4
15cc0     A7 16 62 FC | 	wrlong	arg03, fp
15cc4     08 4E 85 F1 | 	sub	fp, #8
15cc8     A7 12 02 F6 | 	mov	arg01, fp
15ccc     24 4E 85 F1 | 	sub	fp, #36
15cd0     48 CD BF FD | 	call	#_converttoint
15cd4     FD 1E 02 F6 | 	mov	local01, result1
15cd8     18 4E 05 F1 | 	add	fp, #24
15cdc     A7 12 02 F6 | 	mov	arg01, fp
15ce0     18 4E 85 F1 | 	sub	fp, #24
15ce4     34 CD BF FD | 	call	#_converttoint
15ce8     FD 20 02 F6 | 	mov	local02, result1
15cec     0C 4E 05 F1 | 	add	fp, #12
15cf0     A7 12 02 F6 | 	mov	arg01, fp
15cf4     0C 4E 85 F1 | 	sub	fp, #12
15cf8     20 CD BF FD | 	call	#_converttoint
15cfc     FD 22 02 F6 | 	mov	local03, result1
15d00     A7 12 02 F6 | 	mov	arg01, fp
15d04     14 CD BF FD | 	call	#_converttoint
15d08     40 1E 62 FD | 	dirl	local01
15d0c     0F 21 02 FC | 	wrpin	local02, local01
15d10     0F 23 12 FC | 	wxpin	local03, local01
15d14     0F FB 21 FC | 	wypin	result1, local01
15d18     41 1E 62 FD | 	dirh	local01
15d1c     A7 F0 03 F6 | 	mov	ptra, fp
15d20     B2 00 A0 FD | 	call	#popregs_
15d24                 | _do_pinstart_ret
15d24     2D 00 64 FD | 	ret
15d28                 | 
15d28                 | ' 
15d28                 | ' 
15d28                 | ' sub do_wrpin
15d28                 | _do_wrpin
15d28     01 4A 05 F6 | 	mov	COUNT_, #1
15d2c     A8 00 A0 FD | 	call	#pushregs_
15d30     18 F0 07 F1 | 	add	ptra, #24
15d34     90 43 BF FD | 	call	#_pop
15d38     FD 14 02 F6 | 	mov	arg02, result1
15d3c     FE 12 02 F6 | 	mov	arg01, result2
15d40     FF 1E 02 F6 | 	mov	local01, result3
15d44     A7 14 62 FC | 	wrlong	arg02, fp
15d48     04 4E 05 F1 | 	add	fp, #4
15d4c     A7 12 62 FC | 	wrlong	arg01, fp
15d50     04 4E 05 F1 | 	add	fp, #4
15d54     A7 1E 62 FC | 	wrlong	local01, fp
15d58     08 4E 85 F1 | 	sub	fp, #8
15d5c     68 43 BF FD | 	call	#_pop
15d60     FF 1E 02 F6 | 	mov	local01, result3
15d64     0C 4E 05 F1 | 	add	fp, #12
15d68     A7 FA 61 FC | 	wrlong	result1, fp
15d6c     04 4E 05 F1 | 	add	fp, #4
15d70     A7 FC 61 FC | 	wrlong	result2, fp
15d74     04 4E 05 F1 | 	add	fp, #4
15d78     A7 1E 62 FC | 	wrlong	local01, fp
15d7c     08 4E 85 F1 | 	sub	fp, #8
15d80     A7 12 02 F6 | 	mov	arg01, fp
15d84     0C 4E 85 F1 | 	sub	fp, #12
15d88     90 CC BF FD | 	call	#_converttoint
15d8c     FD 1E 02 F6 | 	mov	local01, result1
15d90     A7 12 02 F6 | 	mov	arg01, fp
15d94     84 CC BF FD | 	call	#_converttoint
15d98     0F FB 01 FC | 	wrpin	result1, local01
15d9c     A7 F0 03 F6 | 	mov	ptra, fp
15da0     B2 00 A0 FD | 	call	#popregs_
15da4                 | _do_wrpin_ret
15da4     2D 00 64 FD | 	ret
15da8                 | 
15da8                 | ' 
15da8                 | ' sub do_wxpin
15da8                 | _do_wxpin
15da8     01 4A 05 F6 | 	mov	COUNT_, #1
15dac     A8 00 A0 FD | 	call	#pushregs_
15db0     18 F0 07 F1 | 	add	ptra, #24
15db4     10 43 BF FD | 	call	#_pop
15db8     FD 14 02 F6 | 	mov	arg02, result1
15dbc     FE 12 02 F6 | 	mov	arg01, result2
15dc0     FF 1E 02 F6 | 	mov	local01, result3
15dc4     A7 14 62 FC | 	wrlong	arg02, fp
15dc8     04 4E 05 F1 | 	add	fp, #4
15dcc     A7 12 62 FC | 	wrlong	arg01, fp
15dd0     04 4E 05 F1 | 	add	fp, #4
15dd4     A7 1E 62 FC | 	wrlong	local01, fp
15dd8     08 4E 85 F1 | 	sub	fp, #8
15ddc     E8 42 BF FD | 	call	#_pop
15de0     FF 1E 02 F6 | 	mov	local01, result3
15de4     0C 4E 05 F1 | 	add	fp, #12
15de8     A7 FA 61 FC | 	wrlong	result1, fp
15dec     04 4E 05 F1 | 	add	fp, #4
15df0     A7 FC 61 FC | 	wrlong	result2, fp
15df4     04 4E 05 F1 | 	add	fp, #4
15df8     A7 1E 62 FC | 	wrlong	local01, fp
15dfc     08 4E 85 F1 | 	sub	fp, #8
15e00     A7 12 02 F6 | 	mov	arg01, fp
15e04     0C 4E 85 F1 | 	sub	fp, #12
15e08     10 CC BF FD | 	call	#_converttoint
15e0c     FD 1E 02 F6 | 	mov	local01, result1
15e10     A7 12 02 F6 | 	mov	arg01, fp
15e14     04 CC BF FD | 	call	#_converttoint
15e18     0F FB 11 FC | 	wxpin	result1, local01
15e1c     A7 F0 03 F6 | 	mov	ptra, fp
15e20     B2 00 A0 FD | 	call	#popregs_
15e24                 | _do_wxpin_ret
15e24     2D 00 64 FD | 	ret
15e28                 | 
15e28                 | ' 
15e28                 | ' sub do_wypin
15e28                 | _do_wypin
15e28     01 4A 05 F6 | 	mov	COUNT_, #1
15e2c     A8 00 A0 FD | 	call	#pushregs_
15e30     18 F0 07 F1 | 	add	ptra, #24
15e34     90 42 BF FD | 	call	#_pop
15e38     FD 14 02 F6 | 	mov	arg02, result1
15e3c     FE 12 02 F6 | 	mov	arg01, result2
15e40     FF 1E 02 F6 | 	mov	local01, result3
15e44     A7 14 62 FC | 	wrlong	arg02, fp
15e48     04 4E 05 F1 | 	add	fp, #4
15e4c     A7 12 62 FC | 	wrlong	arg01, fp
15e50     04 4E 05 F1 | 	add	fp, #4
15e54     A7 1E 62 FC | 	wrlong	local01, fp
15e58     08 4E 85 F1 | 	sub	fp, #8
15e5c     68 42 BF FD | 	call	#_pop
15e60     FF 1E 02 F6 | 	mov	local01, result3
15e64     0C 4E 05 F1 | 	add	fp, #12
15e68     A7 FA 61 FC | 	wrlong	result1, fp
15e6c     04 4E 05 F1 | 	add	fp, #4
15e70     A7 FC 61 FC | 	wrlong	result2, fp
15e74     04 4E 05 F1 | 	add	fp, #4
15e78     A7 1E 62 FC | 	wrlong	local01, fp
15e7c     08 4E 85 F1 | 	sub	fp, #8
15e80     A7 12 02 F6 | 	mov	arg01, fp
15e84     0C 4E 85 F1 | 	sub	fp, #12
15e88     90 CB BF FD | 	call	#_converttoint
15e8c     FD 1E 02 F6 | 	mov	local01, result1
15e90     A7 12 02 F6 | 	mov	arg01, fp
15e94     84 CB BF FD | 	call	#_converttoint
15e98     0F FB 21 FC | 	wypin	result1, local01
15e9c     A7 F0 03 F6 | 	mov	ptra, fp
15ea0     B2 00 A0 FD | 	call	#popregs_
15ea4                 | _do_wypin_ret
15ea4     2D 00 64 FD | 	ret
15ea8                 | 
15ea8                 | ' 
15ea8                 | ' sub do_position
15ea8                 | _do_position
15ea8     01 4A 05 F6 | 	mov	COUNT_, #1
15eac     A8 00 A0 FD | 	call	#pushregs_
15eb0     18 F0 07 F1 | 	add	ptra, #24
15eb4     10 42 BF FD | 	call	#_pop
15eb8     FD 14 02 F6 | 	mov	arg02, result1
15ebc     FE 12 02 F6 | 	mov	arg01, result2
15ec0     FF 1E 02 F6 | 	mov	local01, result3
15ec4     A7 14 62 FC | 	wrlong	arg02, fp
15ec8     04 4E 05 F1 | 	add	fp, #4
15ecc     A7 12 62 FC | 	wrlong	arg01, fp
15ed0     04 4E 05 F1 | 	add	fp, #4
15ed4     A7 1E 62 FC | 	wrlong	local01, fp
15ed8     08 4E 85 F1 | 	sub	fp, #8
15edc     E8 41 BF FD | 	call	#_pop
15ee0     FF 1E 02 F6 | 	mov	local01, result3
15ee4     0C 4E 05 F1 | 	add	fp, #12
15ee8     A7 FA 61 FC | 	wrlong	result1, fp
15eec     04 4E 05 F1 | 	add	fp, #4
15ef0     A7 FC 61 FC | 	wrlong	result2, fp
15ef4     04 4E 05 F1 | 	add	fp, #4
15ef8     A7 1E 62 FC | 	wrlong	local01, fp
15efc     08 4E 85 F1 | 	sub	fp, #8
15f00     A7 12 02 F6 | 	mov	arg01, fp
15f04     0C 4E 85 F1 | 	sub	fp, #12
15f08     10 CB BF FD | 	call	#_converttoint
15f0c     FD 1E 02 F6 | 	mov	local01, result1
15f10     A7 12 02 F6 | 	mov	arg01, fp
15f14     04 CB BF FD | 	call	#_converttoint
15f18     FD 14 02 F6 | 	mov	arg02, result1
15f1c     0F 13 02 F6 | 	mov	arg01, local01
15f20     18 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
15f24     A7 F0 03 F6 | 	mov	ptra, fp
15f28     B2 00 A0 FD | 	call	#popregs_
15f2c                 | _do_position_ret
15f2c     2D 00 64 FD | 	ret
15f30                 | 
15f30                 | ' 
15f30                 | ' sub do_poke
15f30                 | _do_poke
15f30     01 4A 05 F6 | 	mov	COUNT_, #1
15f34     A8 00 A0 FD | 	call	#pushregs_
15f38     20 F0 07 F1 | 	add	ptra, #32
15f3c     88 41 BF FD | 	call	#_pop
15f40     FD 14 02 F6 | 	mov	arg02, result1
15f44     FE 12 02 F6 | 	mov	arg01, result2
15f48     FF 1E 02 F6 | 	mov	local01, result3
15f4c     A7 14 62 FC | 	wrlong	arg02, fp
15f50     04 4E 05 F1 | 	add	fp, #4
15f54     A7 12 62 FC | 	wrlong	arg01, fp
15f58     04 4E 05 F1 | 	add	fp, #4
15f5c     A7 1E 62 FC | 	wrlong	local01, fp
15f60     08 4E 85 F1 | 	sub	fp, #8
15f64     60 41 BF FD | 	call	#_pop
15f68     FF 1E 02 F6 | 	mov	local01, result3
15f6c     0C 4E 05 F1 | 	add	fp, #12
15f70     A7 FA 61 FC | 	wrlong	result1, fp
15f74     04 4E 05 F1 | 	add	fp, #4
15f78     A7 FC 61 FC | 	wrlong	result2, fp
15f7c     04 4E 05 F1 | 	add	fp, #4
15f80     A7 1E 62 FC | 	wrlong	local01, fp
15f84     08 4E 85 F1 | 	sub	fp, #8
15f88     A7 12 02 F6 | 	mov	arg01, fp
15f8c     0C 4E 85 F1 | 	sub	fp, #12
15f90     88 CA BF FD | 	call	#_converttoint
15f94     18 4E 05 F1 | 	add	fp, #24
15f98     A7 FA 61 FC | 	wrlong	result1, fp
15f9c     18 4E 85 F1 | 	sub	fp, #24
15fa0     A7 12 02 F6 | 	mov	arg01, fp
15fa4     74 CA BF FD | 	call	#_converttoint
15fa8     1C 4E 05 F1 | 	add	fp, #28
15fac     A7 FA 61 FC | 	wrlong	result1, fp
15fb0                 | ' t1=pop() 'value
15fb0                 | ' t2=pop() 
15fb0                 | ' a=converttoint(t2) : v=converttoint(t1)
15fb0                 | ' if a<$80000 then poke a,v else pspoke a,v
15fb0     04 4E 85 F1 | 	sub	fp, #4
15fb4     A7 1E 02 FB | 	rdlong	local01, fp
15fb8     18 4E 85 F1 | 	sub	fp, #24
15fbc     00 04 00 FF 
15fc0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
15fc4     1C 00 90 3D |  if_ae	jmp	#LR__1730
15fc8     18 4E 05 F1 | 	add	fp, #24
15fcc     A7 12 02 FB | 	rdlong	arg01, fp
15fd0     04 4E 05 F1 | 	add	fp, #4
15fd4     A7 14 02 FB | 	rdlong	arg02, fp
15fd8     1C 4E 85 F1 | 	sub	fp, #28
15fdc     09 15 42 FC | 	wrbyte	arg02, arg01
15fe0     18 00 90 FD | 	jmp	#LR__1731
15fe4                 | LR__1730
15fe4     18 4E 05 F1 | 	add	fp, #24
15fe8     A7 12 02 FB | 	rdlong	arg01, fp
15fec     04 4E 05 F1 | 	add	fp, #4
15ff0     A7 14 02 FB | 	rdlong	arg02, fp
15ff4     1C 4E 85 F1 | 	sub	fp, #28
15ff8     50 2D B0 FD | 	call	#_pspoke
15ffc                 | LR__1731
15ffc     A7 F0 03 F6 | 	mov	ptra, fp
16000     B2 00 A0 FD | 	call	#popregs_
16004                 | _do_poke_ret
16004     2D 00 64 FD | 	ret
16008                 | 
16008                 | ' 
16008                 | ' sub do_dpoke
16008                 | _do_dpoke
16008     01 4A 05 F6 | 	mov	COUNT_, #1
1600c     A8 00 A0 FD | 	call	#pushregs_
16010     20 F0 07 F1 | 	add	ptra, #32
16014     B0 40 BF FD | 	call	#_pop
16018     FD 14 02 F6 | 	mov	arg02, result1
1601c     FE 12 02 F6 | 	mov	arg01, result2
16020     FF 1E 02 F6 | 	mov	local01, result3
16024     A7 14 62 FC | 	wrlong	arg02, fp
16028     04 4E 05 F1 | 	add	fp, #4
1602c     A7 12 62 FC | 	wrlong	arg01, fp
16030     04 4E 05 F1 | 	add	fp, #4
16034     A7 1E 62 FC | 	wrlong	local01, fp
16038     08 4E 85 F1 | 	sub	fp, #8
1603c     88 40 BF FD | 	call	#_pop
16040     FF 1E 02 F6 | 	mov	local01, result3
16044     0C 4E 05 F1 | 	add	fp, #12
16048     A7 FA 61 FC | 	wrlong	result1, fp
1604c     04 4E 05 F1 | 	add	fp, #4
16050     A7 FC 61 FC | 	wrlong	result2, fp
16054     04 4E 05 F1 | 	add	fp, #4
16058     A7 1E 62 FC | 	wrlong	local01, fp
1605c     08 4E 85 F1 | 	sub	fp, #8
16060     A7 12 02 F6 | 	mov	arg01, fp
16064     0C 4E 85 F1 | 	sub	fp, #12
16068     B0 C9 BF FD | 	call	#_converttoint
1606c     18 4E 05 F1 | 	add	fp, #24
16070     A7 FA 61 FC | 	wrlong	result1, fp
16074     18 4E 85 F1 | 	sub	fp, #24
16078     A7 12 02 F6 | 	mov	arg01, fp
1607c     9C C9 BF FD | 	call	#_converttoint
16080     1C 4E 05 F1 | 	add	fp, #28
16084     A7 FA 61 FC | 	wrlong	result1, fp
16088                 | ' t1=pop() 'value
16088                 | ' t2=pop() 
16088                 | ' a=converttoint(t2) : v=converttoint(t1)
16088                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
16088     04 4E 85 F1 | 	sub	fp, #4
1608c     A7 1E 02 FB | 	rdlong	local01, fp
16090     18 4E 85 F1 | 	sub	fp, #24
16094     00 04 00 FF 
16098     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1609c     1C 00 90 3D |  if_ae	jmp	#LR__1740
160a0     18 4E 05 F1 | 	add	fp, #24
160a4     A7 12 02 FB | 	rdlong	arg01, fp
160a8     04 4E 05 F1 | 	add	fp, #4
160ac     A7 14 02 FB | 	rdlong	arg02, fp
160b0     1C 4E 85 F1 | 	sub	fp, #28
160b4     09 15 52 FC | 	wrword	arg02, arg01
160b8     18 00 90 FD | 	jmp	#LR__1741
160bc                 | LR__1740
160bc     18 4E 05 F1 | 	add	fp, #24
160c0     A7 12 02 FB | 	rdlong	arg01, fp
160c4     04 4E 05 F1 | 	add	fp, #4
160c8     A7 14 02 FB | 	rdlong	arg02, fp
160cc     1C 4E 85 F1 | 	sub	fp, #28
160d0     30 2C B0 FD | 	call	#_psdpoke
160d4                 | LR__1741
160d4     A7 F0 03 F6 | 	mov	ptra, fp
160d8     B2 00 A0 FD | 	call	#popregs_
160dc                 | _do_dpoke_ret
160dc     2D 00 64 FD | 	ret
160e0                 | 
160e0                 | ' 
160e0                 | ' sub do_lpoke
160e0                 | _do_lpoke
160e0     01 4A 05 F6 | 	mov	COUNT_, #1
160e4     A8 00 A0 FD | 	call	#pushregs_
160e8     20 F0 07 F1 | 	add	ptra, #32
160ec     D8 3F BF FD | 	call	#_pop
160f0     FD 14 02 F6 | 	mov	arg02, result1
160f4     FE 12 02 F6 | 	mov	arg01, result2
160f8     FF 1E 02 F6 | 	mov	local01, result3
160fc     A7 14 62 FC | 	wrlong	arg02, fp
16100     04 4E 05 F1 | 	add	fp, #4
16104     A7 12 62 FC | 	wrlong	arg01, fp
16108     04 4E 05 F1 | 	add	fp, #4
1610c     A7 1E 62 FC | 	wrlong	local01, fp
16110     08 4E 85 F1 | 	sub	fp, #8
16114     B0 3F BF FD | 	call	#_pop
16118     FF 1E 02 F6 | 	mov	local01, result3
1611c     0C 4E 05 F1 | 	add	fp, #12
16120     A7 FA 61 FC | 	wrlong	result1, fp
16124     04 4E 05 F1 | 	add	fp, #4
16128     A7 FC 61 FC | 	wrlong	result2, fp
1612c     04 4E 05 F1 | 	add	fp, #4
16130     A7 1E 62 FC | 	wrlong	local01, fp
16134     08 4E 85 F1 | 	sub	fp, #8
16138     A7 12 02 F6 | 	mov	arg01, fp
1613c     0C 4E 85 F1 | 	sub	fp, #12
16140     D8 C8 BF FD | 	call	#_converttoint
16144     18 4E 05 F1 | 	add	fp, #24
16148     A7 FA 61 FC | 	wrlong	result1, fp
1614c     18 4E 85 F1 | 	sub	fp, #24
16150     A7 12 02 F6 | 	mov	arg01, fp
16154     C4 C8 BF FD | 	call	#_converttoint
16158     1C 4E 05 F1 | 	add	fp, #28
1615c     A7 FA 61 FC | 	wrlong	result1, fp
16160                 | ' t1=pop() 'value
16160                 | ' t2=pop() 
16160                 | ' a=converttoint(t2) : v=converttoint(t1)
16160                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
16160     04 4E 85 F1 | 	sub	fp, #4
16164     A7 1E 02 FB | 	rdlong	local01, fp
16168     18 4E 85 F1 | 	sub	fp, #24
1616c     00 04 00 FF 
16170     00 1E 16 F2 | 	cmp	local01, ##524288 wc
16174     1C 00 90 3D |  if_ae	jmp	#LR__1750
16178     18 4E 05 F1 | 	add	fp, #24
1617c     A7 12 02 FB | 	rdlong	arg01, fp
16180     04 4E 05 F1 | 	add	fp, #4
16184     A7 14 02 FB | 	rdlong	arg02, fp
16188     1C 4E 85 F1 | 	sub	fp, #28
1618c     09 15 62 FC | 	wrlong	arg02, arg01
16190     18 00 90 FD | 	jmp	#LR__1751
16194                 | LR__1750
16194     18 4E 05 F1 | 	add	fp, #24
16198     A7 12 02 FB | 	rdlong	arg01, fp
1619c     04 4E 05 F1 | 	add	fp, #4
161a0     A7 14 02 FB | 	rdlong	arg02, fp
161a4     1C 4E 85 F1 | 	sub	fp, #28
161a8     10 2B B0 FD | 	call	#_pslpoke
161ac                 | LR__1751
161ac     A7 F0 03 F6 | 	mov	ptra, fp
161b0     B2 00 A0 FD | 	call	#popregs_
161b4                 | _do_lpoke_ret
161b4     2D 00 64 FD | 	ret
161b8                 | 
161b8                 | ' 
161b8                 | ' sub do_peek
161b8                 | _do_peek
161b8     00 4A 05 F6 | 	mov	COUNT_, #0
161bc     A8 00 A0 FD | 	call	#pushregs_
161c0     14 F0 07 F1 | 	add	ptra, #20
161c4     00 3F BF FD | 	call	#_pop
161c8     A7 FA 61 FC | 	wrlong	result1, fp
161cc     04 4E 05 F1 | 	add	fp, #4
161d0     A7 FC 61 FC | 	wrlong	result2, fp
161d4     04 4E 05 F1 | 	add	fp, #4
161d8     A7 FE 61 FC | 	wrlong	result3, fp
161dc     08 4E 85 F1 | 	sub	fp, #8
161e0     A7 12 02 F6 | 	mov	arg01, fp
161e4     34 C8 BF FD | 	call	#_converttoint
161e8     0C 4E 05 F1 | 	add	fp, #12
161ec     A7 FA 61 FC | 	wrlong	result1, fp
161f0                 | ' t1=pop()
161f0                 | ' a=converttoint(t1)
161f0                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
161f0     0C 4E 85 F1 | 	sub	fp, #12
161f4     00 04 00 FF 
161f8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
161fc     1C 00 90 3D |  if_ae	jmp	#LR__1760
16200     0C 4E 05 F1 | 	add	fp, #12
16204     A7 12 02 FB | 	rdlong	arg01, fp
16208     09 FB C1 FA | 	rdbyte	result1, arg01
1620c     04 4E 05 F1 | 	add	fp, #4
16210     A7 FA 61 FC | 	wrlong	result1, fp
16214     10 4E 85 F1 | 	sub	fp, #16
16218     20 00 90 FD | 	jmp	#LR__1761
1621c                 | LR__1760
1621c     0C 4E 05 F1 | 	add	fp, #12
16220     A7 12 02 FB | 	rdlong	arg01, fp
16224     0C 4E 85 F1 | 	sub	fp, #12
16228     68 2B B0 FD | 	call	#_pspeek
1622c     FD FA E1 F8 | 	getbyte	result1, result1, #0
16230     10 4E 05 F1 | 	add	fp, #16
16234     A7 FA 61 FC | 	wrlong	result1, fp
16238     10 4E 85 F1 | 	sub	fp, #16
1623c                 | LR__1761
1623c     08 4E 05 F1 | 	add	fp, #8
16240     A7 3A 68 FC | 	wrlong	#29, fp
16244     08 4E 05 F1 | 	add	fp, #8
16248     A7 12 02 FB | 	rdlong	arg01, fp
1624c     10 4E 85 F1 | 	sub	fp, #16
16250     A7 12 62 FC | 	wrlong	arg01, fp
16254     A7 12 02 F6 | 	mov	arg01, fp
16258     04 3F BF FD | 	call	#_push
1625c     A7 F0 03 F6 | 	mov	ptra, fp
16260     B2 00 A0 FD | 	call	#popregs_
16264                 | _do_peek_ret
16264     2D 00 64 FD | 	ret
16268                 | 
16268                 | ' 
16268                 | ' sub do_dpeek
16268                 | _do_dpeek
16268     00 4A 05 F6 | 	mov	COUNT_, #0
1626c     A8 00 A0 FD | 	call	#pushregs_
16270     14 F0 07 F1 | 	add	ptra, #20
16274     50 3E BF FD | 	call	#_pop
16278     A7 FA 61 FC | 	wrlong	result1, fp
1627c     04 4E 05 F1 | 	add	fp, #4
16280     A7 FC 61 FC | 	wrlong	result2, fp
16284     04 4E 05 F1 | 	add	fp, #4
16288     A7 FE 61 FC | 	wrlong	result3, fp
1628c     08 4E 85 F1 | 	sub	fp, #8
16290     A7 12 02 F6 | 	mov	arg01, fp
16294     84 C7 BF FD | 	call	#_converttoint
16298     0C 4E 05 F1 | 	add	fp, #12
1629c     A7 FA 61 FC | 	wrlong	result1, fp
162a0                 | ' t1=pop()
162a0                 | ' a=converttoint(t1)
162a0                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
162a0     0C 4E 85 F1 | 	sub	fp, #12
162a4     00 04 00 FF 
162a8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
162ac     1C 00 90 3D |  if_ae	jmp	#LR__1770
162b0     0C 4E 05 F1 | 	add	fp, #12
162b4     A7 12 02 FB | 	rdlong	arg01, fp
162b8     09 FB E1 FA | 	rdword	result1, arg01
162bc     04 4E 05 F1 | 	add	fp, #4
162c0     A7 FA 61 FC | 	wrlong	result1, fp
162c4     10 4E 85 F1 | 	sub	fp, #16
162c8     1C 00 90 FD | 	jmp	#LR__1771
162cc                 | LR__1770
162cc     0C 4E 05 F1 | 	add	fp, #12
162d0     A7 12 02 FB | 	rdlong	arg01, fp
162d4     0C 4E 85 F1 | 	sub	fp, #12
162d8     68 2B B0 FD | 	call	#_psdpeek
162dc     10 4E 05 F1 | 	add	fp, #16
162e0     A7 FA 61 FC | 	wrlong	result1, fp
162e4     10 4E 85 F1 | 	sub	fp, #16
162e8                 | LR__1771
162e8     08 4E 05 F1 | 	add	fp, #8
162ec     A7 3A 68 FC | 	wrlong	#29, fp
162f0     08 4E 05 F1 | 	add	fp, #8
162f4     A7 12 02 FB | 	rdlong	arg01, fp
162f8     10 4E 85 F1 | 	sub	fp, #16
162fc     A7 12 62 FC | 	wrlong	arg01, fp
16300     A7 12 02 F6 | 	mov	arg01, fp
16304     58 3E BF FD | 	call	#_push
16308     A7 F0 03 F6 | 	mov	ptra, fp
1630c     B2 00 A0 FD | 	call	#popregs_
16310                 | _do_dpeek_ret
16310     2D 00 64 FD | 	ret
16314                 | 
16314                 | ' 
16314                 | ' 
16314                 | ' sub do_lpeek
16314                 | _do_lpeek
16314     00 4A 05 F6 | 	mov	COUNT_, #0
16318     A8 00 A0 FD | 	call	#pushregs_
1631c     14 F0 07 F1 | 	add	ptra, #20
16320     A4 3D BF FD | 	call	#_pop
16324     A7 FA 61 FC | 	wrlong	result1, fp
16328     04 4E 05 F1 | 	add	fp, #4
1632c     A7 FC 61 FC | 	wrlong	result2, fp
16330     04 4E 05 F1 | 	add	fp, #4
16334     A7 FE 61 FC | 	wrlong	result3, fp
16338     08 4E 85 F1 | 	sub	fp, #8
1633c     A7 12 02 F6 | 	mov	arg01, fp
16340     D8 C6 BF FD | 	call	#_converttoint
16344     0C 4E 05 F1 | 	add	fp, #12
16348     A7 FA 61 FC | 	wrlong	result1, fp
1634c                 | ' t1=pop()
1634c                 | ' a=converttoint(t1)
1634c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1634c     0C 4E 85 F1 | 	sub	fp, #12
16350     00 04 00 FF 
16354     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16358     1C 00 90 3D |  if_ae	jmp	#LR__1780
1635c     0C 4E 05 F1 | 	add	fp, #12
16360     A7 12 02 FB | 	rdlong	arg01, fp
16364     09 FB 01 FB | 	rdlong	result1, arg01
16368     04 4E 05 F1 | 	add	fp, #4
1636c     A7 FA 61 FC | 	wrlong	result1, fp
16370     10 4E 85 F1 | 	sub	fp, #16
16374     1C 00 90 FD | 	jmp	#LR__1781
16378                 | LR__1780
16378     0C 4E 05 F1 | 	add	fp, #12
1637c     A7 12 02 FB | 	rdlong	arg01, fp
16380     0C 4E 85 F1 | 	sub	fp, #12
16384     64 2A B0 FD | 	call	#_pslpeek
16388     10 4E 05 F1 | 	add	fp, #16
1638c     A7 FA 61 FC | 	wrlong	result1, fp
16390     10 4E 85 F1 | 	sub	fp, #16
16394                 | LR__1781
16394     08 4E 05 F1 | 	add	fp, #8
16398     A7 3A 68 FC | 	wrlong	#29, fp
1639c     08 4E 05 F1 | 	add	fp, #8
163a0     A7 12 02 FB | 	rdlong	arg01, fp
163a4     10 4E 85 F1 | 	sub	fp, #16
163a8     A7 12 62 FC | 	wrlong	arg01, fp
163ac     A7 12 02 F6 | 	mov	arg01, fp
163b0     AC 3D BF FD | 	call	#_push
163b4     A7 F0 03 F6 | 	mov	ptra, fp
163b8     B2 00 A0 FD | 	call	#popregs_
163bc                 | _do_lpeek_ret
163bc     2D 00 64 FD | 	ret
163c0                 | 
163c0                 | ' 
163c0                 | ' sub do_fre
163c0                 | _do_fre
163c0     01 4A 05 F6 | 	mov	COUNT_, #1
163c4     A8 00 A0 FD | 	call	#pushregs_
163c8     0C F0 07 F1 | 	add	ptra, #12
163cc     7B 00 00 FF 
163d0     5C E4 05 F1 | 	add	objptr, ##63068
163d4     F2 12 02 FB | 	rdlong	arg01, objptr
163d8     18 00 00 FF 
163dc     1C E4 85 F1 | 	sub	objptr, ##12316
163e0     F2 1E 02 FB | 	rdlong	local01, objptr
163e4     0F 13 82 F1 | 	sub	arg01, local01
163e8     18 00 00 FF 
163ec     B4 E4 05 F1 | 	add	objptr, ##12468
163f0     F2 12 62 FC | 	wrlong	arg01, objptr
163f4     08 4E 05 F1 | 	add	fp, #8
163f8     A7 3A 68 FC | 	wrlong	#29, fp
163fc     08 4E 85 F1 | 	sub	fp, #8
16400     F2 1E 02 FB | 	rdlong	local01, objptr
16404     7B 00 00 FF 
16408     F4 E4 85 F1 | 	sub	objptr, ##63220
1640c     A7 1E 62 FC | 	wrlong	local01, fp
16410     A7 12 02 F6 | 	mov	arg01, fp
16414     48 3D BF FD | 	call	#_push
16418     A7 F0 03 F6 | 	mov	ptra, fp
1641c     B2 00 A0 FD | 	call	#popregs_
16420                 | _do_fre_ret
16420     2D 00 64 FD | 	ret
16424                 | 
16424                 | ' 
16424                 | ' sub do_adr
16424                 | _do_adr
16424                 | _do_adr_ret
16424     2D 00 64 FD | 	ret
16428                 | 
16428                 | ' 
16428                 | ' sub do_getnotevalue
16428                 | _do_getnotevalue
16428     01 4A 05 F6 | 	mov	COUNT_, #1
1642c     A8 00 A0 FD | 	call	#pushregs_
16430     1C F0 07 F1 | 	add	ptra, #28
16434     90 3C BF FD | 	call	#_pop
16438     FF 14 02 F6 | 	mov	arg02, result3
1643c     10 4E 05 F1 | 	add	fp, #16
16440     A7 FA 61 FC | 	wrlong	result1, fp
16444     04 4E 05 F1 | 	add	fp, #4
16448     A7 FC 61 FC | 	wrlong	result2, fp
1644c     04 4E 05 F1 | 	add	fp, #4
16450     A7 14 62 FC | 	wrlong	arg02, fp
16454     08 4E 85 F1 | 	sub	fp, #8
16458     A7 12 02 F6 | 	mov	arg01, fp
1645c     10 4E 85 F1 | 	sub	fp, #16
16460     B8 C5 BF FD | 	call	#_converttoint
16464     FD 14 52 F6 | 	abs	arg02, result1 wc
16468     0C 14 16 FD | 	qdiv	arg02, #12
1646c     0C 4E 05 F1 | 	add	fp, #12
16470     A7 FA 61 FC | 	wrlong	result1, fp
16474     34 00 00 FF 
16478     CC E4 05 F1 | 	add	objptr, ##26828
1647c     08 4E 85 F1 | 	sub	fp, #8
16480     19 14 62 FD | 	getqy	arg02
16484     0A 15 82 F6 | 	negc	arg02, arg02
16488     02 14 66 F0 | 	shl	arg02, #2
1648c     F2 14 02 F1 | 	add	arg02, objptr
16490     0A 15 02 FB | 	rdlong	arg02, arg02
16494     A7 14 62 FC | 	wrlong	arg02, fp
16498     08 4E 05 F1 | 	add	fp, #8
1649c     A7 14 02 FB | 	rdlong	arg02, fp
164a0     0A 15 52 F6 | 	abs	arg02, arg02 wc
164a4     0C 14 16 FD | 	qdiv	arg02, #12
164a8     0C 4E 85 F1 | 	sub	fp, #12
164ac     34 00 00 FF 
164b0     CC E4 85 F1 | 	sub	objptr, ##26828
164b4     18 14 62 FD | 	getqx	arg02
164b8     0A 13 82 F6 | 	negc	arg01, arg02
164bc     09 13 52 F6 | 	abs	arg01, arg01 wc
164c0     1F 1E C6 C9 |  if_b	decod	local01, #31
164c4     00 1E 06 36 |  if_ae	mov	local01, #0
164c8     88 85 B0 FD | 	call	#__system___float_fromuns
164cc     0F FB 61 F5 | 	xor	result1, local01
164d0     08 4E 05 F1 | 	add	fp, #8
164d4     A7 FA 61 FC | 	wrlong	result1, fp
164d8     FD 14 02 F6 | 	mov	arg02, result1
164dc     08 4E 85 F1 | 	sub	fp, #8
164e0     1E 12 C6 F9 | 	decod	arg01, #30
164e4     54 98 B0 FD | 	call	#__system____builtin_powf
164e8     FD 12 02 F6 | 	mov	arg01, result1
164ec     04 4E 05 F1 | 	add	fp, #4
164f0     A7 14 02 FB | 	rdlong	arg02, fp
164f4     04 4E 85 F1 | 	sub	fp, #4
164f8     5C 89 B0 FD | 	call	#__system___float_mul
164fc     A7 FA 61 FC | 	wrlong	result1, fp
16500     10 4E 05 F1 | 	add	fp, #16
16504     A7 FA 61 FC | 	wrlong	result1, fp
16508     08 4E 05 F1 | 	add	fp, #8
1650c     A7 3C 68 FC | 	wrlong	#30, fp
16510     08 4E 85 F1 | 	sub	fp, #8
16514     A7 12 02 F6 | 	mov	arg01, fp
16518     10 4E 85 F1 | 	sub	fp, #16
1651c     40 3C BF FD | 	call	#_push
16520     A7 F0 03 F6 | 	mov	ptra, fp
16524     B2 00 A0 FD | 	call	#popregs_
16528                 | _do_getnotevalue_ret
16528     2D 00 64 FD | 	ret
1652c                 | 
1652c                 | ' 
1652c                 | ' 
1652c                 | ' sub do_waitms
1652c                 | _do_waitms
1652c     01 4A 05 F6 | 	mov	COUNT_, #1
16530     A8 00 A0 FD | 	call	#pushregs_
16534     18 F0 07 F1 | 	add	ptra, #24
16538     8C 3B BF FD | 	call	#_pop
1653c     A7 FA 61 FC | 	wrlong	result1, fp
16540     04 4E 05 F1 | 	add	fp, #4
16544     A7 FC 61 FC | 	wrlong	result2, fp
16548     04 4E 05 F1 | 	add	fp, #4
1654c     A7 FE 61 FC | 	wrlong	result3, fp
16550                 | ' 
16550                 | ' t1=pop() 'value
16550                 | ' 
16550                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
16550     08 4E 85 F1 | 	sub	fp, #8
16554     1C FE 0D F2 | 	cmp	result3, #28 wz
16558     08 4E 05 51 |  if_ne	add	fp, #8
1655c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
16560     08 4E 85 51 |  if_ne	sub	fp, #8
16564     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
16568     A7 12 02 AB |  if_e	rdlong	arg01, fp
1656c     0C 4E 05 A1 |  if_e	add	fp, #12
16570     A7 12 62 AC |  if_e	wrlong	arg01, fp
16574     0C 4E 85 A1 |  if_e	sub	fp, #12
16578     14 00 90 AD |  if_e	jmp	#LR__1790
1657c     A7 12 02 F6 | 	mov	arg01, fp
16580     98 C4 BF FD | 	call	#_converttoint
16584     0C 4E 05 F1 | 	add	fp, #12
16588     A7 FA 61 FC | 	wrlong	result1, fp
1658c     0C 4E 85 F1 | 	sub	fp, #12
16590                 | LR__1790
16590                 | ' if t<0 then return
16590     0C 4E 05 F1 | 	add	fp, #12
16594     A7 12 02 FB | 	rdlong	arg01, fp
16598     0C 4E 85 F1 | 	sub	fp, #12
1659c     00 12 56 F2 | 	cmps	arg01, #0 wc
165a0     B8 00 90 CD |  if_b	jmp	#LR__1795
165a4                 | ' if t < 5000 then 
165a4     0C 4E 05 F1 | 	add	fp, #12
165a8     A7 12 02 FB | 	rdlong	arg01, fp
165ac     0C 4E 85 F1 | 	sub	fp, #12
165b0     09 00 00 FF 
165b4     88 13 56 F2 | 	cmps	arg01, ##5000 wc
165b8     14 00 90 3D |  if_ae	jmp	#LR__1791
165bc     0C 4E 05 F1 | 	add	fp, #12
165c0     A7 12 02 FB | 	rdlong	arg01, fp
165c4     0C 4E 85 F1 | 	sub	fp, #12
165c8     04 60 B0 FD | 	call	#__system___waitms
165cc     8C 00 90 FD | 	jmp	#LR__1794
165d0                 | LR__1791
165d0     10 4E 05 F1 | 	add	fp, #16
165d4     A7 02 68 FC | 	wrlong	#1, fp
165d8     04 4E 85 F1 | 	sub	fp, #4
165dc     A7 12 02 FB | 	rdlong	arg01, fp
165e0     09 13 52 F6 | 	abs	arg01, arg01 wc
165e4     09 00 00 FF 
165e8     88 13 16 FD | 	qdiv	arg01, ##5000
165ec                 | '   for i=1 to t/5000
165ec     0C 4E 85 F1 | 	sub	fp, #12
165f0     18 1E 62 FD | 	getqx	local01
165f4     0F 1F 82 F6 | 	negc	local01, local01
165f8     01 1E 06 F1 | 	add	local01, #1
165fc                 | LR__1792
165fc     10 4E 05 F1 | 	add	fp, #16
16600     A7 12 02 FB | 	rdlong	arg01, fp
16604     10 4E 85 F1 | 	sub	fp, #16
16608     0F 13 52 F2 | 	cmps	arg01, local01 wc
1660c     28 00 90 3D |  if_ae	jmp	#LR__1793
16610     0C 4E 05 F1 | 	add	fp, #12
16614     A7 12 02 FB | 	rdlong	arg01, fp
16618     0C 4E 85 F1 | 	sub	fp, #12
1661c     B0 5F B0 FD | 	call	#__system___waitms
16620     10 4E 05 F1 | 	add	fp, #16
16624     A7 12 02 FB | 	rdlong	arg01, fp
16628     01 12 06 F1 | 	add	arg01, #1
1662c     A7 12 62 FC | 	wrlong	arg01, fp
16630     10 4E 85 F1 | 	sub	fp, #16
16634     C4 FF 9F FD | 	jmp	#LR__1792
16638                 | LR__1793
16638     0C 4E 05 F1 | 	add	fp, #12
1663c     A7 1E 02 FB | 	rdlong	local01, fp
16640     0F 1F 52 F6 | 	abs	local01, local01 wc
16644     09 00 00 FF 
16648     88 1F 16 FD | 	qdiv	local01, ##5000
1664c     0C 4E 85 F1 | 	sub	fp, #12
16650     19 1E 62 FD | 	getqy	local01
16654     0F 13 82 F6 | 	negc	arg01, local01
16658     74 5F B0 FD | 	call	#__system___waitms
1665c                 | LR__1794
1665c                 | LR__1795
1665c     A7 F0 03 F6 | 	mov	ptra, fp
16660     B2 00 A0 FD | 	call	#popregs_
16664                 | _do_waitms_ret
16664     2D 00 64 FD | 	ret
16668                 | 
16668                 | ' 
16668                 | ' sub do_waitvbl
16668                 | _do_waitvbl
16668     01 12 06 F6 | 	mov	arg01, #1
1666c     04 48 B0 FD | 	call	#_hg010b_spin2_waitvbl
16670                 | _do_waitvbl_ret
16670     2D 00 64 FD | 	ret
16674                 | 
16674                 | ' 
16674                 | ' sub do_waitclock
16674                 | _do_waitclock
16674     7B 00 00 FF 
16678     58 E4 05 F1 | 	add	objptr, ##63064
1667c     F2 00 02 FB | 	rdlong	_var01, objptr
16680                 | ' c=hkcnt
16680                 | ' do: loop until hkcnt<>c
16680                 | LR__1800
16680     F2 02 02 FB | 	rdlong	_var02, objptr
16684     00 03 0A F2 | 	cmp	_var02, _var01 wz
16688     F4 FF 9F AD |  if_e	jmp	#LR__1800
1668c     7B 00 00 FF 
16690     58 E4 85 F1 | 	sub	objptr, ##63064
16694                 | _do_waitclock_ret
16694     2D 00 64 FD | 	ret
16698                 | 
16698                 | ' 
16698                 | ' sub do_dir
16698                 | _do_dir
16698     03 4A 05 F6 | 	mov	COUNT_, #3
1669c     A8 00 A0 FD | 	call	#pushregs_
166a0     5F 01 00 FF 
166a4     4B 13 06 F6 | 	mov	arg01, ##@LR__4951
166a8     BC 62 B0 FD | 	call	#__system___chdir
166ac                 | ' chdir("/sd/bas")       ' set working directory
166ac                 | ' print "Working directory: "; currentdir$ 
166ac     00 12 06 F6 | 	mov	arg01, #0
166b0     B8 B5 B0 FD | 	call	#__system___getiolock_0474
166b4     FD 12 02 F6 | 	mov	arg01, result1
166b8     20 5C B0 FD | 	call	#__system___lockmem
166bc     5F 01 00 FF 
166c0     53 15 06 F6 | 	mov	arg02, ##@LR__4952
166c4     00 12 06 F6 | 	mov	arg01, #0
166c8     00 16 06 F6 | 	mov	arg03, #0
166cc     10 69 B0 FD | 	call	#__system___basic_print_string
166d0     72 00 00 FF 
166d4     78 E4 05 F1 | 	add	objptr, ##58488
166d8     F2 14 02 FB | 	rdlong	arg02, objptr
166dc     72 00 00 FF 
166e0     78 E4 85 F1 | 	sub	objptr, ##58488
166e4     00 12 06 F6 | 	mov	arg01, #0
166e8     00 16 06 F6 | 	mov	arg03, #0
166ec     F0 68 B0 FD | 	call	#__system___basic_print_string
166f0     00 12 06 F6 | 	mov	arg01, #0
166f4     0A 14 06 F6 | 	mov	arg02, #10
166f8     00 16 06 F6 | 	mov	arg03, #0
166fc     88 68 B0 FD | 	call	#__system___basic_print_char
16700     00 12 06 F6 | 	mov	arg01, #0
16704     64 B5 B0 FD | 	call	#__system___getiolock_0474
16708     FD 00 68 FC | 	wrlong	#0, result1
1670c     5F 01 00 FF 
16710     67 13 06 F6 | 	mov	arg01, ##@LR__4953
16714     10 14 06 F6 | 	mov	arg02, #16
16718     88 B6 B0 FD | 	call	#__system___basic_dir
1671c     FD 1E 02 F6 | 	mov	local01, result1
16720                 | ' 
16720                 | ' filename=dir$("*", fbDirectory)
16720                 | ' while filename <> "" and filename <> nil
16720                 | LR__1810
16720     00 20 06 F6 | 	mov	local02, #0
16724     5F 01 00 FF 
16728     69 15 06 F6 | 	mov	arg02, ##@LR__4954
1672c     0F 13 02 F6 | 	mov	arg01, local01
16730     D0 5B B0 FD | 	call	#__system___string_cmp
16734     00 FA 0D F2 | 	cmp	result1, #0 wz
16738     00 20 26 56 |  if_ne	not	local02, #0
1673c     00 22 06 F6 | 	mov	local03, #0
16740     0F 13 02 F6 | 	mov	arg01, local01
16744     00 14 06 F6 | 	mov	arg02, #0
16748     B8 5B B0 FD | 	call	#__system___string_cmp
1674c     00 FA 0D F2 | 	cmp	result1, #0 wz
16750     00 22 26 56 |  if_ne	not	local03, #0
16754     11 21 CA F7 | 	test	local02, local03 wz
16758     64 00 90 AD |  if_e	jmp	#LR__1811
1675c                 | '   print "[dir] ";filename
1675c     00 12 06 F6 | 	mov	arg01, #0
16760     08 B5 B0 FD | 	call	#__system___getiolock_0474
16764     FD 12 02 F6 | 	mov	arg01, result1
16768     70 5B B0 FD | 	call	#__system___lockmem
1676c     5F 01 00 FF 
16770     6A 15 06 F6 | 	mov	arg02, ##@LR__4955
16774     00 12 06 F6 | 	mov	arg01, #0
16778     00 16 06 F6 | 	mov	arg03, #0
1677c     60 68 B0 FD | 	call	#__system___basic_print_string
16780     00 12 06 F6 | 	mov	arg01, #0
16784     0F 15 02 F6 | 	mov	arg02, local01
16788     00 16 06 F6 | 	mov	arg03, #0
1678c     50 68 B0 FD | 	call	#__system___basic_print_string
16790     00 12 06 F6 | 	mov	arg01, #0
16794     0A 14 06 F6 | 	mov	arg02, #10
16798     00 16 06 F6 | 	mov	arg03, #0
1679c     E8 67 B0 FD | 	call	#__system___basic_print_char
167a0     00 12 06 F6 | 	mov	arg01, #0
167a4     C4 B4 B0 FD | 	call	#__system___getiolock_0474
167a8     FD 00 68 FC | 	wrlong	#0, result1
167ac     00 12 06 F6 | 	mov	arg01, #0
167b0     00 14 06 F6 | 	mov	arg02, #0
167b4     EC B5 B0 FD | 	call	#__system___basic_dir
167b8     FD 1E 02 F6 | 	mov	local01, result1
167bc     60 FF 9F FD | 	jmp	#LR__1810
167c0                 | LR__1811
167c0     5F 01 00 FF 
167c4     71 13 06 F6 | 	mov	arg01, ##@LR__4956
167c8     21 14 06 F6 | 	mov	arg02, #33
167cc     D4 B5 B0 FD | 	call	#__system___basic_dir
167d0     FD 1E 02 F6 | 	mov	local01, result1
167d4                 | ' 
167d4                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
167d4                 | ' do while filename <> "" and filename <> nil
167d4                 | LR__1812
167d4     00 20 06 F6 | 	mov	local02, #0
167d8     5F 01 00 FF 
167dc     73 15 06 F6 | 	mov	arg02, ##@LR__4957
167e0     0F 13 02 F6 | 	mov	arg01, local01
167e4     1C 5B B0 FD | 	call	#__system___string_cmp
167e8     00 FA 0D F2 | 	cmp	result1, #0 wz
167ec     00 20 26 56 |  if_ne	not	local02, #0
167f0     00 22 06 F6 | 	mov	local03, #0
167f4     0F 13 02 F6 | 	mov	arg01, local01
167f8     00 14 06 F6 | 	mov	arg02, #0
167fc     04 5B B0 FD | 	call	#__system___string_cmp
16800     00 FA 0D F2 | 	cmp	result1, #0 wz
16804     00 22 26 56 |  if_ne	not	local03, #0
16808     11 21 CA F7 | 	test	local02, local03 wz
1680c     4C 01 90 AD |  if_e	jmp	#LR__1816
16810                 | '   print filename
16810     00 12 06 F6 | 	mov	arg01, #0
16814     54 B4 B0 FD | 	call	#__system___getiolock_0474
16818     FD 12 02 F6 | 	mov	arg01, result1
1681c     BC 5A B0 FD | 	call	#__system___lockmem
16820     00 12 06 F6 | 	mov	arg01, #0
16824     0F 15 02 F6 | 	mov	arg02, local01
16828     00 16 06 F6 | 	mov	arg03, #0
1682c     B0 67 B0 FD | 	call	#__system___basic_print_string
16830     00 12 06 F6 | 	mov	arg01, #0
16834     0A 14 06 F6 | 	mov	arg02, #10
16838     00 16 06 F6 | 	mov	arg03, #0
1683c     48 67 B0 FD | 	call	#__system___basic_print_char
16840     00 12 06 F6 | 	mov	arg01, #0
16844     24 B4 B0 FD | 	call	#__system___getiolock_0474
16848     FD 00 68 FC | 	wrlong	#0, result1
1684c     00 12 06 F6 | 	mov	arg01, #0
16850     00 14 06 F6 | 	mov	arg02, #0
16854     4C B5 B0 FD | 	call	#__system___basic_dir
16858     FD 1E 02 F6 | 	mov	local01, result1
1685c                 | '   filename = dir$()      ' continue scan
1685c                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
1685c                 | ' return cursor_y
1685c     3A E4 05 F1 | 	add	objptr, #58
16860     F2 FA C1 FA | 	rdbyte	result1, objptr
16864     3A E4 85 F1 | 	sub	objptr, #58
16868     22 FA 0D F2 | 	cmp	result1, #34 wz
1686c     64 FF 9F 5D |  if_ne	jmp	#LR__1812
16870                 | '     print "-----more, press any key";
16870     00 12 06 F6 | 	mov	arg01, #0
16874     F4 B3 B0 FD | 	call	#__system___getiolock_0474
16878     FD 12 02 F6 | 	mov	arg01, result1
1687c     5C 5A B0 FD | 	call	#__system___lockmem
16880     5F 01 00 FF 
16884     74 15 06 F6 | 	mov	arg02, ##@LR__4958
16888     00 12 06 F6 | 	mov	arg01, #0
1688c     00 16 06 F6 | 	mov	arg03, #0
16890     4C 67 B0 FD | 	call	#__system___basic_print_string
16894     00 12 06 F6 | 	mov	arg01, #0
16898     D0 B3 B0 FD | 	call	#__system___getiolock_0474
1689c     FD 00 68 FC | 	wrlong	#0, result1
168a0                 | '     do 
168a0                 | LR__1813
168a0     60 52 B0 FD | 	call	#_usbnew_spin2_get_key
168a4     00 FA 0D F2 | 	cmp	result1, #0 wz
168a8     F4 FF 9F 5D |  if_ne	jmp	#LR__1813
168ac                 | '     do
168ac                 | LR__1814
168ac     54 52 B0 FD | 	call	#_usbnew_spin2_get_key
168b0     00 FA 0D F2 | 	cmp	result1, #0 wz
168b4     F4 FF 9F AD |  if_e	jmp	#LR__1814
168b8                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
168b8     79 00 00 FF 
168bc     C4 E5 05 F1 | 	add	objptr, ##62404
168c0     F2 20 02 FB | 	rdlong	local02, objptr
168c4     79 00 00 FF 
168c8     C4 E5 85 F1 | 	sub	objptr, ##62404
168cc     01 20 0E F2 | 	cmp	local02, #1 wz
168d0     3C 00 90 5D |  if_ne	jmp	#LR__1815
168d4     7B 00 00 FF 
168d8     68 E4 05 F1 | 	add	objptr, ##63080
168dc     F2 14 02 FB | 	rdlong	arg02, objptr
168e0     04 E4 85 F1 | 	sub	objptr, #4
168e4     F2 1A 02 FB | 	rdlong	arg05, objptr
168e8     07 12 06 F6 | 	mov	arg01, #7
168ec     56 00 00 FF 
168f0     44 16 06 F6 | 	mov	arg03, ##44100
168f4     0E 18 C6 F9 | 	decod	arg04, #14
168f8     01 1C 66 F6 | 	neg	arg06, #1
168fc     6F 00 00 FF 
16900     A4 E5 85 F1 | 	sub	objptr, ##57252
16904     84 55 B0 FD | 	call	#_audio096_spin2_play
16908     0B 00 00 FF 
1690c     C0 E4 85 F1 | 	sub	objptr, ##5824
16910                 | LR__1815
16910     00 12 06 F6 | 	mov	arg01, #0
16914     23 14 06 F6 | 	mov	arg02, #35
16918     20 45 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1691c                 | '     position 0,35: print "                             ";: position 4,35  
1691c     00 12 06 F6 | 	mov	arg01, #0
16920     48 B3 B0 FD | 	call	#__system___getiolock_0474
16924     FD 12 02 F6 | 	mov	arg01, result1
16928     B0 59 B0 FD | 	call	#__system___lockmem
1692c     5F 01 00 FF 
16930     8D 15 06 F6 | 	mov	arg02, ##@LR__4959
16934     00 12 06 F6 | 	mov	arg01, #0
16938     00 16 06 F6 | 	mov	arg03, #0
1693c     A0 66 B0 FD | 	call	#__system___basic_print_string
16940     00 12 06 F6 | 	mov	arg01, #0
16944     24 B3 B0 FD | 	call	#__system___getiolock_0474
16948     FD 00 68 FC | 	wrlong	#0, result1
1694c     04 12 06 F6 | 	mov	arg01, #4
16950     23 14 06 F6 | 	mov	arg02, #35
16954     E4 44 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16958     78 FE 9F FD | 	jmp	#LR__1812
1695c                 | LR__1816
1695c     A7 F0 03 F6 | 	mov	ptra, fp
16960     B2 00 A0 FD | 	call	#popregs_
16964                 | _do_dir_ret
16964     2D 00 64 FD | 	ret
16968                 | 
16968                 | ' 
16968                 | ' sub do_if
16968                 | _do_if
16968     05 4A 05 F6 | 	mov	COUNT_, #5
1696c     A8 00 A0 FD | 	call	#pushregs_
16970     54 37 BF FD | 	call	#_pop
16974     FD 1E 0A F6 | 	mov	local01, result1 wz
16978     FE 20 02 F6 | 	mov	local02, result2
1697c     FF 22 02 F6 | 	mov	local03, result3
16980                 | ' t1=pop()
16980                 | ' ' if uresult=0, jump over else
16980                 | ' if t1.result.uresult = 0 then 
16980     BC 00 90 5D |  if_ne	jmp	#LR__1822
16984                 | '   for i=lineptr_e to lineptr-1
16984     6A 00 00 FF 
16988     64 E4 05 F1 | 	add	objptr, ##54372
1698c     F2 24 02 FB | 	rdlong	local04, objptr
16990     04 E4 85 F1 | 	sub	objptr, #4
16994     F2 26 02 FB | 	rdlong	local05, objptr
16998     6A 00 00 FF 
1699c     60 E4 85 F1 | 	sub	objptr, ##54368
169a0                 | LR__1820
169a0     13 25 52 F2 | 	cmps	local04, local05 wc
169a4     78 00 90 3D |  if_ae	jmp	#LR__1821
169a8     12 FF 01 F6 | 	mov	result3, local04
169ac     01 FE 65 F0 | 	shl	result3, #1
169b0     12 FF 01 F1 | 	add	result3, local04
169b4     02 FE 65 F0 | 	shl	result3, #2
169b8     67 00 00 FF 
169bc     60 E4 05 F1 | 	add	objptr, ##52832
169c0     F2 FE 01 F1 | 	add	result3, objptr
169c4     FF 1E 02 FB | 	rdlong	local01, result3
169c8     04 FE 05 F1 | 	add	result3, #4
169cc     FF FC 01 FB | 	rdlong	result2, result3
169d0     12 FF 01 F6 | 	mov	result3, local04
169d4     01 FE 65 F0 | 	shl	result3, #1
169d8     12 FF 01 F1 | 	add	result3, local04
169dc     02 FE 65 F0 | 	shl	result3, #2
169e0     F2 FE 01 F1 | 	add	result3, objptr
169e4     08 FE 05 F1 | 	add	result3, #8
169e8     FF FE 01 FB | 	rdlong	result3, result3
169ec     FE 20 02 F6 | 	mov	local02, result2
169f0     FF 22 02 F6 | 	mov	local03, result3
169f4                 | '     t1=compiledline(i)
169f4                 | '     if t1.result_type=token_else then lineptr_e=i : return
169f4     5A 22 0E F2 | 	cmp	local03, #90 wz
169f8     67 00 00 FF 
169fc     60 E4 85 F1 | 	sub	objptr, ##52832
16a00     6A 00 00 AF 
16a04     64 E4 05 A1 |  if_e	add	objptr, ##54372
16a08     F2 24 62 AC |  if_e	wrlong	local04, objptr
16a0c     6A 00 00 AF 
16a10     64 E4 85 A1 |  if_e	sub	objptr, ##54372
16a14     28 00 90 AD |  if_e	jmp	#LR__1823
16a18     01 24 06 F1 | 	add	local04, #1
16a1c     80 FF 9F FD | 	jmp	#LR__1820
16a20                 | LR__1821
16a20     6A 00 00 FF 
16a24     60 E4 05 F1 | 	add	objptr, ##54368
16a28     F2 26 02 FB | 	rdlong	local05, objptr
16a2c     01 26 86 F1 | 	sub	local05, #1
16a30     04 E4 05 F1 | 	add	objptr, #4
16a34     F2 26 62 FC | 	wrlong	local05, objptr
16a38     6A 00 00 FF 
16a3c     64 E4 85 F1 | 	sub	objptr, ##54372
16a40                 | LR__1822
16a40                 | LR__1823
16a40     A7 F0 03 F6 | 	mov	ptra, fp
16a44     B2 00 A0 FD | 	call	#popregs_
16a48                 | _do_if_ret
16a48     2D 00 64 FD | 	ret
16a4c                 | 
16a4c                 | ' 
16a4c                 | ' sub do_else
16a4c                 | _do_else
16a4c     6A 00 00 FF 
16a50     60 E4 05 F1 | 	add	objptr, ##54368
16a54     F2 00 02 FB | 	rdlong	_var01, objptr
16a58     01 00 86 F1 | 	sub	_var01, #1
16a5c     04 E4 05 F1 | 	add	objptr, #4
16a60     F2 00 62 FC | 	wrlong	_var01, objptr
16a64     6A 00 00 FF 
16a68     64 E4 85 F1 | 	sub	objptr, ##54372
16a6c                 | _do_else_ret
16a6c     2D 00 64 FD | 	ret
16a70                 | 
16a70                 | ' 
16a70                 | ' sub do_rad
16a70                 | _do_rad
16a70     7B 00 00 FF 
16a74     6C E4 05 F1 | 	add	objptr, ##63084
16a78     00 C0 9F FF 
16a7c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16a80     04 E4 05 F1 | 	add	objptr, #4
16a84     00 C0 9F FF 
16a88     F2 00 68 FC | 	wrlong	##1065353216, objptr
16a8c     7B 00 00 FF 
16a90     70 E4 85 F1 | 	sub	objptr, ##63088
16a94                 | _do_rad_ret
16a94     2D 00 64 FD | 	ret
16a98                 | 
16a98                 | ' 
16a98                 | ' sub do_deg
16a98                 | _do_deg
16a98     7B 00 00 FF 
16a9c     6C E4 05 F1 | 	add	objptr, ##63084
16aa0     7D 47 9E FF 
16aa4     F2 6A 68 FC | 	wrlong	##1016003125, objptr
16aa8     04 E4 05 F1 | 	add	objptr, #4
16aac     97 32 A1 FF 
16ab0     F2 C2 69 FC | 	wrlong	##1113927393, objptr
16ab4     7B 00 00 FF 
16ab8     70 E4 85 F1 | 	sub	objptr, ##63088
16abc                 | _do_deg_ret
16abc     2D 00 64 FD | 	ret
16ac0                 | 
16ac0                 | ' 
16ac0                 | ' sub do_int
16ac0                 | _do_int
16ac0     00 4A 05 F6 | 	mov	COUNT_, #0
16ac4     A8 00 A0 FD | 	call	#pushregs_
16ac8     0C F0 07 F1 | 	add	ptra, #12
16acc     F8 35 BF FD | 	call	#_pop
16ad0     A7 FA 61 FC | 	wrlong	result1, fp
16ad4     04 4E 05 F1 | 	add	fp, #4
16ad8     A7 FC 61 FC | 	wrlong	result2, fp
16adc     04 4E 05 F1 | 	add	fp, #4
16ae0     A7 FE 61 FC | 	wrlong	result3, fp
16ae4     08 4E 85 F1 | 	sub	fp, #8
16ae8     A7 12 02 F6 | 	mov	arg01, fp
16aec     2C BF BF FD | 	call	#_converttoint
16af0     A7 FA 61 FC | 	wrlong	result1, fp
16af4     08 4E 05 F1 | 	add	fp, #8
16af8     A7 38 68 FC | 	wrlong	#28, fp
16afc     08 4E 85 F1 | 	sub	fp, #8
16b00     A7 12 02 F6 | 	mov	arg01, fp
16b04     58 36 BF FD | 	call	#_push
16b08     A7 F0 03 F6 | 	mov	ptra, fp
16b0c     B2 00 A0 FD | 	call	#popregs_
16b10                 | _do_int_ret
16b10     2D 00 64 FD | 	ret
16b14                 | 
16b14                 | ' 
16b14                 | ' sub do_nothing
16b14                 | _do_nothing
16b14                 | _do_nothing_ret
16b14     2D 00 64 FD | 	ret
16b18                 | 
16b18                 | ' 
16b18                 | ' sub do_brun
16b18                 | _do_brun
16b18     08 4A 05 F6 | 	mov	COUNT_, #8
16b1c     A8 00 A0 FD | 	call	#pushregs_
16b20     A4 35 BF FD | 	call	#_pop
16b24     FE 1A 02 F6 | 	mov	arg05, result2
16b28     FF 18 02 F6 | 	mov	arg04, result3
16b2c     FD 1E 02 F6 | 	mov	local01, result1
16b30     0D 21 02 F6 | 	mov	local02, arg05
16b34     0C 23 02 F6 | 	mov	local03, arg04
16b38                 | ' 
16b38                 | ' t1=pop() 
16b38                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
16b38     2B 22 0E F2 | 	cmp	local03, #43 wz
16b3c     10 00 90 5D |  if_ne	jmp	#LR__1830
16b40     0F 13 02 F6 | 	mov	arg01, local01
16b44     24 75 BF FD | 	call	#_convertstring
16b48     FD 1E 02 F6 | 	mov	local01, result1
16b4c     1F 22 06 F6 | 	mov	local03, #31
16b50                 | LR__1830
16b50                 | ' if t1.result_type=result_string then
16b50     1F 22 0E F2 | 	cmp	local03, #31 wz
16b54     EC 01 90 5D |  if_ne	jmp	#LR__1834
16b58     0F 25 02 F6 | 	mov	local04, local01
16b5c                 | '   filename=t1.result.sresult
16b5c                 | '   if left$(filename,1)="/" then 
16b5c     12 13 02 F6 | 	mov	arg01, local04
16b60     01 14 06 F6 | 	mov	arg02, #1
16b64     B8 77 B0 FD | 	call	#__system__Left_S
16b68     FD 12 02 F6 | 	mov	arg01, result1
16b6c     5F 01 00 FF 
16b70     AB 15 06 F6 | 	mov	arg02, ##@LR__4960
16b74     8C 57 B0 FD | 	call	#__system___string_cmp
16b78     00 FA 0D F2 | 	cmp	result1, #0 wz
16b7c     12 27 02 A6 |  if_e	mov	local05, local04
16b80     14 00 90 AD |  if_e	jmp	#LR__1831
16b84     5F 01 00 FF 
16b88     AD 13 06 F6 | 	mov	arg01, ##@LR__4961
16b8c     12 15 02 F6 | 	mov	arg02, local04
16b90     A4 57 B0 FD | 	call	#__system___string_concat
16b94     FD 26 02 F6 | 	mov	local05, result1
16b98                 | LR__1831
16b98                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
16b98                 | '   open fullfilename for input as #9
16b98     09 12 06 F6 | 	mov	arg01, #9
16b9c     13 15 02 F6 | 	mov	arg02, local05
16ba0     00 16 06 F6 | 	mov	arg03, #0
16ba4     34 63 B0 FD | 	call	#__system___basic_open_string
16ba8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
16bac     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
16bb0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
16bb4     FD 28 0A F6 | 	mov	local06, result1 wz
16bb8                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
16bb8     8C 00 90 AD |  if_e	jmp	#LR__1832
16bbc     00 12 06 F6 | 	mov	arg01, #0
16bc0     A8 B0 B0 FD | 	call	#__system___getiolock_0474
16bc4     FD 12 02 F6 | 	mov	arg01, result1
16bc8     10 57 B0 FD | 	call	#__system___lockmem
16bcc     5F 01 00 FF 
16bd0     B6 15 06 F6 | 	mov	arg02, ##@LR__4962
16bd4     00 12 06 F6 | 	mov	arg01, #0
16bd8     00 16 06 F6 | 	mov	arg03, #0
16bdc     00 64 B0 FD | 	call	#__system___basic_print_string
16be0     00 12 06 F6 | 	mov	arg01, #0
16be4     14 15 02 F6 | 	mov	arg02, local06
16be8     00 16 06 F6 | 	mov	arg03, #0
16bec     0A 18 06 F6 | 	mov	arg04, #10
16bf0     30 64 B0 FD | 	call	#__system___basic_print_integer
16bf4     5F 01 00 FF 
16bf8     C4 15 06 F6 | 	mov	arg02, ##@LR__4963
16bfc     00 12 06 F6 | 	mov	arg01, #0
16c00     00 16 06 F6 | 	mov	arg03, #0
16c04     D8 63 B0 FD | 	call	#__system___basic_print_string
16c08     14 13 02 F6 | 	mov	arg01, local06
16c0c     5C 7D B0 FD | 	call	#__system___strerror
16c10     FD 14 02 F6 | 	mov	arg02, result1
16c14     00 12 06 F6 | 	mov	arg01, #0
16c18     00 16 06 F6 | 	mov	arg03, #0
16c1c     C0 63 B0 FD | 	call	#__system___basic_print_string
16c20     00 12 06 F6 | 	mov	arg01, #0
16c24     0A 14 06 F6 | 	mov	arg02, #10
16c28     00 16 06 F6 | 	mov	arg03, #0
16c2c     58 63 B0 FD | 	call	#__system___basic_print_char
16c30     00 12 06 F6 | 	mov	arg01, #0
16c34     34 B0 B0 FD | 	call	#__system___getiolock_0474
16c38     FD 00 68 FC | 	wrlong	#0, result1
16c3c     09 12 06 F6 | 	mov	arg01, #9
16c40     5C A6 B0 FD | 	call	#__system__close
16c44     FC 00 90 FD | 	jmp	#LR__1835
16c48                 | LR__1832
16c48     01 2A 06 F6 | 	mov	local07, #1
16c4c     00 2C 06 F6 | 	mov	local08, #0
16c50                 | '   do
16c50                 | LR__1833
16c50                 | '     get #9,pos,block(0),1024,r : pos+=r	
16c50     77 00 00 FF 
16c54     90 E5 05 F1 | 	add	objptr, ##61328
16c58     F2 16 02 F6 | 	mov	arg03, objptr
16c5c     77 00 00 FF 
16c60     90 E5 85 F1 | 	sub	objptr, ##61328
16c64     09 12 06 F6 | 	mov	arg01, #9
16c68     15 15 02 F6 | 	mov	arg02, local07
16c6c     0A 18 C6 F9 | 	decod	arg04, #10
16c70     01 1A 06 F6 | 	mov	arg05, #1
16c74     78 64 B0 FD | 	call	#__system___basic_get
16c78     FD 28 02 F6 | 	mov	local06, result1
16c7c     FD 2A 02 F1 | 	add	local07, result1
16c80     77 00 00 FF 
16c84     90 E5 05 F1 | 	add	objptr, ##61328
16c88     F2 12 02 F6 | 	mov	arg01, objptr
16c8c     16 15 02 F6 | 	mov	arg02, local08
16c90     0A 16 C6 F9 | 	decod	arg03, #10
16c94     6C 00 00 FF 
16c98     D0 E4 85 F1 | 	sub	objptr, ##55504
16c9c     D4 4A B0 FD | 	call	#_psram_spin2_write
16ca0     0B 00 00 FF 
16ca4     C0 E4 85 F1 | 	sub	objptr, ##5824
16ca8     14 2D 02 F1 | 	add	local08, local06
16cac     02 00 00 FF 
16cb0     00 28 0E F2 | 	cmp	local06, ##1024 wz
16cb4     E0 03 00 AF 
16cb8     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
16cbc     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1833
16cc0     56 00 00 FF 
16cc4     E0 E5 05 F1 | 	add	objptr, ##44512
16cc8     F2 12 02 FB | 	rdlong	arg01, objptr
16ccc     03 12 62 FD | 	cogstop	arg01
16cd0     04 E4 05 F1 | 	add	objptr, #4
16cd4     F2 12 02 FB | 	rdlong	arg01, objptr
16cd8     03 12 62 FD | 	cogstop	arg01
16cdc     04 E4 05 F1 | 	add	objptr, #4
16ce0     F2 12 02 FB | 	rdlong	arg01, objptr
16ce4     03 12 62 FD | 	cogstop	arg01
16ce8     22 00 00 FF 
16cec     E0 E5 05 F1 | 	add	objptr, ##17888
16cf0     F2 12 02 FB | 	rdlong	arg01, objptr
16cf4     03 12 62 FD | 	cogstop	arg01
16cf8     18 00 00 FF 
16cfc     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
16d00     F5 14 02 F6 | 	mov	arg02, ptr__dat__
16d04     18 00 00 FF 
16d08     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
16d0c     22 00 00 FF 
16d10     D8 E5 85 F1 | 	sub	objptr, ##17880
16d14     1E 2C 06 F6 | 	mov	local08, #30
16d18     28 E4 61 FD | 	setq	objptr
16d1c     0A 2D F2 FC | 	coginit	local08, arg02 wc
16d20     01 2C 66 C6 |  if_b	neg	local08, #1
16d24     24 00 00 FF 
16d28     0C E5 05 F1 | 	add	objptr, ##18700
16d2c     F2 2C 62 FC | 	wrlong	local08, objptr
16d30     7B 00 00 FF 
16d34     FC E4 85 F1 | 	sub	objptr, ##63228
16d38     00 12 06 F6 | 	mov	arg01, #0
16d3c     01 12 62 FD | 	cogid	arg01
16d40     03 12 62 FD | 	cogstop	arg01
16d44                 | LR__1834
16d44                 | LR__1835
16d44     A7 F0 03 F6 | 	mov	ptra, fp
16d48     B2 00 A0 FD | 	call	#popregs_
16d4c                 | _do_brun_ret
16d4c     2D 00 64 FD | 	ret
16d50                 | 
16d50                 | ' 
16d50                 | ' 
16d50                 | ' sub do_mouse
16d50                 | _do_mouse
16d50     74 33 BF FD | 	call	#_pop
16d54     00 FA 4D F2 | 	cmps	result1, #0 wz
16d58                 | ' t1=pop()
16d58                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
16d58     14 00 90 5D |  if_ne	jmp	#LR__1840
16d5c     10 12 06 F6 | 	mov	arg01, #16
16d60     00 14 06 F6 | 	mov	arg02, #0
16d64     00 16 06 F6 | 	mov	arg03, #0
16d68     C0 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16d6c     10 00 90 FD | 	jmp	#LR__1841
16d70                 | LR__1840
16d70     10 12 06 F6 | 	mov	arg01, #16
16d74     20 14 06 F6 | 	mov	arg02, #32
16d78     20 16 06 F6 | 	mov	arg03, #32
16d7c     AC 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16d80                 | LR__1841
16d80                 | _do_mouse_ret
16d80     2D 00 64 FD | 	ret
16d84                 | 
16d84                 | ' 
16d84                 | ' sub do_cursor
16d84                 | _do_cursor
16d84     40 33 BF FD | 	call	#_pop
16d88     00 FA 4D F2 | 	cmps	result1, #0 wz
16d8c                 | ' t1=pop()
16d8c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
16d8c     14 00 90 5D |  if_ne	jmp	#LR__1850
16d90     11 12 06 F6 | 	mov	arg01, #17
16d94     00 14 06 F6 | 	mov	arg02, #0
16d98     00 16 06 F6 | 	mov	arg03, #0
16d9c     8C 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16da0     10 00 90 FD | 	jmp	#LR__1851
16da4                 | LR__1850
16da4     11 12 06 F6 | 	mov	arg01, #17
16da8     08 14 06 F6 | 	mov	arg02, #8
16dac     10 16 06 F6 | 	mov	arg03, #16
16db0     78 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16db4                 | LR__1851
16db4                 | _do_cursor_ret
16db4     2D 00 64 FD | 	ret
16db8                 | 
16db8                 | ' 
16db8                 | ' 
16db8                 | ' sub do_click
16db8                 | _do_click
16db8     0C 33 BF FD | 	call	#_pop
16dbc     00 FA 4D F2 | 	cmps	result1, #0 wz
16dc0                 | ' t1=pop()
16dc0                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
16dc0     79 00 00 AF 
16dc4     C4 E5 05 A1 |  if_e	add	objptr, ##62404
16dc8     F2 00 68 AC |  if_e	wrlong	#0, objptr
16dcc     79 00 00 FF 
16dd0     C4 E5 C5 F3 | 	sumz	objptr, ##62404
16dd4     F2 02 68 5C |  if_ne	wrlong	#1, objptr
16dd8     79 00 00 5F 
16ddc     C4 E5 85 51 |  if_ne	sub	objptr, ##62404
16de0                 | _do_click_ret
16de0     2D 00 64 FD | 	ret
16de4                 | 
16de4                 | ' 
16de4                 | ' 
16de4                 | ' sub do_beep
16de4                 | _do_beep
16de4     02 4A 05 F6 | 	mov	COUNT_, #2
16de8     A8 00 A0 FD | 	call	#pushregs_
16dec     20 F0 07 F1 | 	add	ptra, #32
16df0     D4 32 BF FD | 	call	#_pop
16df4     FD 1E 02 F6 | 	mov	local01, result1
16df8     FE 1C 02 F6 | 	mov	arg06, result2
16dfc     FF 20 02 F6 | 	mov	local02, result3
16e00     0C 4E 05 F1 | 	add	fp, #12
16e04     A7 1E 62 FC | 	wrlong	local01, fp
16e08     04 4E 05 F1 | 	add	fp, #4
16e0c     A7 1C 62 FC | 	wrlong	arg06, fp
16e10     04 4E 05 F1 | 	add	fp, #4
16e14     A7 20 62 FC | 	wrlong	local02, fp
16e18     14 4E 85 F1 | 	sub	fp, #20
16e1c     A8 32 BF FD | 	call	#_pop
16e20     A7 FA 61 FC | 	wrlong	result1, fp
16e24     04 4E 05 F1 | 	add	fp, #4
16e28     A7 FC 61 FC | 	wrlong	result2, fp
16e2c     04 4E 05 F1 | 	add	fp, #4
16e30     A7 FE 61 FC | 	wrlong	result3, fp
16e34                 | ' 
16e34                 | ' t2=pop()
16e34                 | ' t1=pop()
16e34                 | ' 
16e34                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
16e34     08 4E 85 F1 | 	sub	fp, #8
16e38     1C FE 0D F2 | 	cmp	result3, #28 wz
16e3c     08 4E 05 51 |  if_ne	add	fp, #8
16e40     A7 20 02 5B |  if_ne	rdlong	local02, fp
16e44     08 4E 85 51 |  if_ne	sub	fp, #8
16e48     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
16e4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
16e50     18 4E 05 A1 |  if_e	add	fp, #24
16e54     A7 1E 62 AC |  if_e	wrlong	local01, fp
16e58     18 4E 85 A1 |  if_e	sub	fp, #24
16e5c     14 00 90 AD |  if_e	jmp	#LR__1860
16e60     A7 12 02 F6 | 	mov	arg01, fp
16e64     B4 BB BF FD | 	call	#_converttoint
16e68     18 4E 05 F1 | 	add	fp, #24
16e6c     A7 FA 61 FC | 	wrlong	result1, fp
16e70     18 4E 85 F1 | 	sub	fp, #24
16e74                 | LR__1860
16e74     1C 4E 05 F1 | 	add	fp, #28
16e78     A7 FE 48 FC | 	wrbyte	#127, fp
16e7c     01 4E 05 F1 | 	add	fp, #1
16e80     A7 00 49 FC | 	wrbyte	#128, fp
16e84     01 4E 85 F1 | 	sub	fp, #1
16e88     A7 14 02 F6 | 	mov	arg02, fp
16e8c     04 4E 85 F1 | 	sub	fp, #4
16e90     A7 16 02 FB | 	rdlong	arg03, fp
16e94     18 4E 85 F1 | 	sub	fp, #24
16e98     01 16 66 F0 | 	shl	arg03, #1
16e9c     07 12 06 F6 | 	mov	arg01, #7
16ea0     0E 18 C6 F9 | 	decod	arg04, #14
16ea4     02 1A 06 F6 | 	mov	arg05, #2
16ea8     00 1C 06 F6 | 	mov	arg06, #0
16eac     0B 00 00 FF 
16eb0     C0 E4 05 F1 | 	add	objptr, ##5824
16eb4     70 50 B0 FD | 	call	#_audio096_spin2_play8
16eb8     0B 00 00 FF 
16ebc     C0 E4 85 F1 | 	sub	objptr, ##5824
16ec0     0C 4E 05 F1 | 	add	fp, #12
16ec4     A7 12 02 F6 | 	mov	arg01, fp
16ec8     0C 4E 85 F1 | 	sub	fp, #12
16ecc     90 32 BF FD | 	call	#_push
16ed0     58 F6 BF FD | 	call	#_do_waitms
16ed4     07 12 06 F6 | 	mov	arg01, #7
16ed8     0B 00 00 FF 
16edc     C0 E4 05 F1 | 	add	objptr, ##5824
16ee0     F8 50 B0 FD | 	call	#_audio096_spin2_stop
16ee4     0B 00 00 FF 
16ee8     C0 E4 85 F1 | 	sub	objptr, ##5824
16eec     A7 F0 03 F6 | 	mov	ptra, fp
16ef0     B2 00 A0 FD | 	call	#popregs_
16ef4                 | _do_beep_ret
16ef4     2D 00 64 FD | 	ret
16ef8                 | 
16ef8                 | ' 
16ef8                 | ' sub do_no_command
16ef8                 | _do_no_command
16ef8     17 12 06 F6 | 	mov	arg01, #23
16efc     58 1C B0 FD | 	call	#_printerror
16f00                 | _do_no_command_ret
16f00     2D 00 64 FD | 	ret
16f04                 | 
16f04                 | ' 
16f04                 | ' sub do_negative
16f04                 | _do_negative
16f04     02 4A 05 F6 | 	mov	COUNT_, #2
16f08     A8 00 A0 FD | 	call	#pushregs_
16f0c     0C F0 07 F1 | 	add	ptra, #12
16f10     B4 31 BF FD | 	call	#_pop
16f14     FF 1E 02 F6 | 	mov	local01, result3
16f18     A7 FA 61 FC | 	wrlong	result1, fp
16f1c     04 4E 05 F1 | 	add	fp, #4
16f20     A7 FC 61 FC | 	wrlong	result2, fp
16f24     04 4E 05 F1 | 	add	fp, #4
16f28     A7 1E 62 FC | 	wrlong	local01, fp
16f2c                 | ' t1=pop()
16f2c                 | ' if t1.result_type=result_int then 
16f2c     08 4E 85 F1 | 	sub	fp, #8
16f30     1C 1E 0E F2 | 	cmp	local01, #28 wz
16f34     A7 20 02 AB |  if_e	rdlong	local02, fp
16f38     10 1F 62 A6 |  if_e	neg	local01, local02
16f3c     A7 1E 62 AC |  if_e	wrlong	local01, fp
16f40     5C 00 90 AD |  if_e	jmp	#LR__1872
16f44     08 4E 05 F1 | 	add	fp, #8
16f48     A7 1E 02 FB | 	rdlong	local01, fp
16f4c     08 4E 85 F1 | 	sub	fp, #8
16f50     1D 1E 0E F2 | 	cmp	local01, #29 wz
16f54     1C 00 90 5D |  if_ne	jmp	#LR__1870
16f58     A7 20 02 FB | 	rdlong	local02, fp
16f5c     10 1F 62 F6 | 	neg	local01, local02
16f60     A7 1E 62 FC | 	wrlong	local01, fp
16f64     08 4E 05 F1 | 	add	fp, #8
16f68     A7 38 68 FC | 	wrlong	#28, fp
16f6c     08 4E 85 F1 | 	sub	fp, #8
16f70     2C 00 90 FD | 	jmp	#LR__1871
16f74                 | LR__1870
16f74     08 4E 05 F1 | 	add	fp, #8
16f78     A7 1E 02 FB | 	rdlong	local01, fp
16f7c     08 4E 85 F1 | 	sub	fp, #8
16f80     1E 1E 0E F2 | 	cmp	local01, #30 wz
16f84     A7 FA 01 AB |  if_e	rdlong	result1, fp
16f88     1F FA E5 A4 |  if_e	bitnot	result1, #31
16f8c     A7 FA 61 AC |  if_e	wrlong	result1, fp
16f90     08 4E 05 51 |  if_ne	add	fp, #8
16f94     A7 FE 69 5C |  if_ne	wrlong	#255, fp
16f98     08 4E 85 51 |  if_ne	sub	fp, #8
16f9c     A7 50 68 5C |  if_ne	wrlong	#40, fp
16fa0                 | LR__1871
16fa0                 | LR__1872
16fa0     A7 12 02 F6 | 	mov	arg01, fp
16fa4     B8 31 BF FD | 	call	#_push
16fa8     A7 F0 03 F6 | 	mov	ptra, fp
16fac     B2 00 A0 FD | 	call	#popregs_
16fb0                 | _do_negative_ret
16fb0     2D 00 64 FD | 	ret
16fb4                 | 
16fb4                 | ' 
16fb4                 | ' sub do_abs
16fb4                 | _do_abs
16fb4     01 4A 05 F6 | 	mov	COUNT_, #1
16fb8     A8 00 A0 FD | 	call	#pushregs_
16fbc     0C F0 07 F1 | 	add	ptra, #12
16fc0     04 31 BF FD | 	call	#_pop
16fc4     FF 1E 02 F6 | 	mov	local01, result3
16fc8     A7 FA 61 FC | 	wrlong	result1, fp
16fcc     04 4E 05 F1 | 	add	fp, #4
16fd0     A7 FC 61 FC | 	wrlong	result2, fp
16fd4     04 4E 05 F1 | 	add	fp, #4
16fd8     A7 1E 62 FC | 	wrlong	local01, fp
16fdc                 | ' t1=pop()
16fdc                 | ' if t1.result_type=result_int then 
16fdc     08 4E 85 F1 | 	sub	fp, #8
16fe0     1C 1E 0E F2 | 	cmp	local01, #28 wz
16fe4     A7 12 02 AB |  if_e	rdlong	arg01, fp
16fe8     09 1F 42 A6 |  if_e	abs	local01, arg01
16fec     A7 1E 62 AC |  if_e	wrlong	local01, fp
16ff0     2C 00 90 AD |  if_e	jmp	#LR__1880
16ff4     08 4E 05 F1 | 	add	fp, #8
16ff8     A7 1E 02 FB | 	rdlong	local01, fp
16ffc     08 4E 85 F1 | 	sub	fp, #8
17000     1E 1E 0E F2 | 	cmp	local01, #30 wz
17004     A7 FA 01 AB |  if_e	rdlong	result1, fp
17008     1F FA 05 A4 |  if_e	bitl	result1, #31
1700c     A7 FA 61 AC |  if_e	wrlong	result1, fp
17010     08 4E 05 51 |  if_ne	add	fp, #8
17014     A7 FE 69 5C |  if_ne	wrlong	#255, fp
17018     08 4E 85 51 |  if_ne	sub	fp, #8
1701c     A7 50 68 5C |  if_ne	wrlong	#40, fp
17020                 | LR__1880
17020     A7 12 02 F6 | 	mov	arg01, fp
17024     38 31 BF FD | 	call	#_push
17028     A7 F0 03 F6 | 	mov	ptra, fp
1702c     B2 00 A0 FD | 	call	#popregs_
17030                 | _do_abs_ret
17030     2D 00 64 FD | 	ret
17034                 | 
17034                 | ' 
17034                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
17034                 | ' 
17034                 | ' ''----------------------------------------------------------------------------------------------------
17034                 | ' ''------------------ Initialization procedures -------------------------------------------------------
17034                 | ' ''----------------------------------------------------------------------------------------------------
17034                 | ' 
17034                 | ' ''--------------------------- Command function pointers
17034                 | ' 
17034                 | ' sub init_commands
17034                 | _init_commands
17034                 | ' 
17034                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
17034     00 00 06 F6 | 	mov	_var01, #0
17038     97 16 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
1703c                 | LR__1890
1703c     00 FB 01 F6 | 	mov	result1, _var01
17040     02 FA 65 F0 | 	shl	result1, #2
17044     63 00 00 FF 
17048     44 E4 05 F1 | 	add	objptr, ##50756
1704c     F2 FA 01 F1 | 	add	result1, objptr
17050     63 00 00 FF 
17054     44 E4 85 F1 | 	sub	objptr, ##50756
17058     FD E4 61 FC | 	wrlong	objptr, result1
1705c     01 00 06 F1 | 	add	_var01, #1
17060     00 01 56 F2 | 	cmps	_var01, #256 wc
17064     D4 FF 9F CD |  if_b	jmp	#LR__1890
17068                 | LR__1891
17068     F2 FA 01 F6 | 	mov	result1, objptr
1706c     14 FA 25 F4 | 	bith	result1, #20
17070     63 00 00 FF 
17074     48 E4 05 F1 | 	add	objptr, ##50760
17078     F2 FA 61 FC | 	wrlong	result1, objptr
1707c     63 00 00 FF 
17080     48 E4 85 F1 | 	sub	objptr, ##50760
17084     F2 FA 01 F6 | 	mov	result1, objptr
17088     15 FA 25 F4 | 	bith	result1, #21
1708c     63 00 00 FF 
17090     4C E4 05 F1 | 	add	objptr, ##50764
17094     F2 FA 61 FC | 	wrlong	result1, objptr
17098     63 00 00 FF 
1709c     4C E4 85 F1 | 	sub	objptr, ##50764
170a0     F2 FA 01 F6 | 	mov	result1, objptr
170a4     34 FA 25 F4 | 	bith	result1, #52
170a8     63 00 00 FF 
170ac     50 E4 05 F1 | 	add	objptr, ##50768
170b0     F2 FA 61 FC | 	wrlong	result1, objptr
170b4     63 00 00 FF 
170b8     50 E4 85 F1 | 	sub	objptr, ##50768
170bc     F2 FA 01 F6 | 	mov	result1, objptr
170c0     16 FA 25 F4 | 	bith	result1, #22
170c4     63 00 00 FF 
170c8     58 E4 05 F1 | 	add	objptr, ##50776
170cc     F2 FA 61 FC | 	wrlong	result1, objptr
170d0     63 00 00 FF 
170d4     58 E4 85 F1 | 	sub	objptr, ##50776
170d8     F2 FA 01 F6 | 	mov	result1, objptr
170dc     00 28 00 FF 
170e0     00 FA 45 F5 | 	or	result1, ##5242880
170e4     63 00 00 FF 
170e8     5C E4 05 F1 | 	add	objptr, ##50780
170ec     F2 FA 61 FC | 	wrlong	result1, objptr
170f0     63 00 00 FF 
170f4     5C E4 85 F1 | 	sub	objptr, ##50780
170f8     F2 FA 01 F6 | 	mov	result1, objptr
170fc     35 FA 25 F4 | 	bith	result1, #53
17100     63 00 00 FF 
17104     60 E4 05 F1 | 	add	objptr, ##50784
17108     F2 FA 61 FC | 	wrlong	result1, objptr
1710c     63 00 00 FF 
17110     60 E4 85 F1 | 	sub	objptr, ##50784
17114     F2 FA 01 F6 | 	mov	result1, objptr
17118     54 FA 25 F4 | 	bith	result1, #84
1711c     63 00 00 FF 
17120     64 E4 05 F1 | 	add	objptr, ##50788
17124     F2 FA 61 FC | 	wrlong	result1, objptr
17128     63 00 00 FF 
1712c     64 E4 85 F1 | 	sub	objptr, ##50788
17130     F2 FA 01 F6 | 	mov	result1, objptr
17134     17 FA 25 F4 | 	bith	result1, #23
17138     63 00 00 FF 
1713c     68 E4 05 F1 | 	add	objptr, ##50792
17140     F2 FA 61 FC | 	wrlong	result1, objptr
17144     63 00 00 FF 
17148     68 E4 85 F1 | 	sub	objptr, ##50792
1714c     F2 FA 01 F6 | 	mov	result1, objptr
17150     00 48 00 FF 
17154     00 FA 45 F5 | 	or	result1, ##9437184
17158     63 00 00 FF 
1715c     6C E4 05 F1 | 	add	objptr, ##50796
17160     F2 FA 61 FC | 	wrlong	result1, objptr
17164     63 00 00 FF 
17168     6C E4 85 F1 | 	sub	objptr, ##50796
1716c     F2 FA 01 F6 | 	mov	result1, objptr
17170     00 50 00 FF 
17174     00 FA 45 F5 | 	or	result1, ##10485760
17178     63 00 00 FF 
1717c     70 E4 05 F1 | 	add	objptr, ##50800
17180     F2 FA 61 FC | 	wrlong	result1, objptr
17184     63 00 00 FF 
17188     70 E4 85 F1 | 	sub	objptr, ##50800
1718c     F2 FA 01 F6 | 	mov	result1, objptr
17190     00 58 00 FF 
17194     00 FA 45 F5 | 	or	result1, ##11534336
17198     63 00 00 FF 
1719c     74 E4 05 F1 | 	add	objptr, ##50804
171a0     F2 FA 61 FC | 	wrlong	result1, objptr
171a4     63 00 00 FF 
171a8     74 E4 85 F1 | 	sub	objptr, ##50804
171ac     F2 FA 01 F6 | 	mov	result1, objptr
171b0     36 FA 25 F4 | 	bith	result1, #54
171b4     63 00 00 FF 
171b8     88 E4 05 F1 | 	add	objptr, ##50824
171bc     F2 FA 61 FC | 	wrlong	result1, objptr
171c0     63 00 00 FF 
171c4     88 E4 85 F1 | 	sub	objptr, ##50824
171c8     F2 FA 01 F6 | 	mov	result1, objptr
171cc     00 68 00 FF 
171d0     00 FA 45 F5 | 	or	result1, ##13631488
171d4     63 00 00 FF 
171d8     B8 E4 05 F1 | 	add	objptr, ##50872
171dc     F2 FA 61 FC | 	wrlong	result1, objptr
171e0     63 00 00 FF 
171e4     B8 E4 85 F1 | 	sub	objptr, ##50872
171e8     F2 FA 01 F6 | 	mov	result1, objptr
171ec     00 68 00 FF 
171f0     00 FA 45 F5 | 	or	result1, ##13631488
171f4     63 00 00 FF 
171f8     B4 E4 05 F1 | 	add	objptr, ##50868
171fc     F2 FA 61 FC | 	wrlong	result1, objptr
17200     63 00 00 FF 
17204     B4 E4 85 F1 | 	sub	objptr, ##50868
17208     F2 FA 01 F6 | 	mov	result1, objptr
1720c     00 68 00 FF 
17210     00 FA 45 F5 | 	or	result1, ##13631488
17214     63 00 00 FF 
17218     BC E4 05 F1 | 	add	objptr, ##50876
1721c     F2 FA 61 FC | 	wrlong	result1, objptr
17220     63 00 00 FF 
17224     BC E4 85 F1 | 	sub	objptr, ##50876
17228     F2 FA 01 F6 | 	mov	result1, objptr
1722c     00 68 00 FF 
17230     00 FA 45 F5 | 	or	result1, ##13631488
17234     63 00 00 FF 
17238     C0 E4 05 F1 | 	add	objptr, ##50880
1723c     F2 FA 61 FC | 	wrlong	result1, objptr
17240     63 00 00 FF 
17244     C0 E4 85 F1 | 	sub	objptr, ##50880
17248     F2 FA 01 F6 | 	mov	result1, objptr
1724c     00 68 00 FF 
17250     00 FA 45 F5 | 	or	result1, ##13631488
17254     63 00 00 FF 
17258     F0 E4 05 F1 | 	add	objptr, ##50928
1725c     F2 FA 61 FC | 	wrlong	result1, objptr
17260     63 00 00 FF 
17264     F0 E4 85 F1 | 	sub	objptr, ##50928
17268     F2 FA 01 F6 | 	mov	result1, objptr
1726c     55 FA 25 F4 | 	bith	result1, #85
17270     63 00 00 FF 
17274     A0 E4 05 F1 | 	add	objptr, ##50848
17278     F2 FA 61 FC | 	wrlong	result1, objptr
1727c     63 00 00 FF 
17280     A0 E4 85 F1 | 	sub	objptr, ##50848
17284     F2 FA 01 F6 | 	mov	result1, objptr
17288     00 68 00 FF 
1728c     00 FA 45 F5 | 	or	result1, ##13631488
17290     63 00 00 FF 
17294     C4 E4 05 F1 | 	add	objptr, ##50884
17298     F2 FA 61 FC | 	wrlong	result1, objptr
1729c     63 00 00 FF 
172a0     C4 E4 85 F1 | 	sub	objptr, ##50884
172a4     F2 FA 01 F6 | 	mov	result1, objptr
172a8     00 68 00 FF 
172ac     00 FA 45 F5 | 	or	result1, ##13631488
172b0     63 00 00 FF 
172b4     C8 E4 05 F1 | 	add	objptr, ##50888
172b8     F2 FA 61 FC | 	wrlong	result1, objptr
172bc     63 00 00 FF 
172c0     C8 E4 85 F1 | 	sub	objptr, ##50888
172c4     F2 FA 01 F6 | 	mov	result1, objptr
172c8     00 68 00 FF 
172cc     00 FA 45 F5 | 	or	result1, ##13631488
172d0     63 00 00 FF 
172d4     CC E4 05 F1 | 	add	objptr, ##50892
172d8     F2 FA 61 FC | 	wrlong	result1, objptr
172dc     63 00 00 FF 
172e0     CC E4 85 F1 | 	sub	objptr, ##50892
172e4     F2 FA 01 F6 | 	mov	result1, objptr
172e8     74 FA 25 F4 | 	bith	result1, #116
172ec     63 00 00 FF 
172f0     44 E5 05 F1 | 	add	objptr, ##51012
172f4     F2 FA 61 FC | 	wrlong	result1, objptr
172f8     63 00 00 FF 
172fc     44 E5 85 F1 | 	sub	objptr, ##51012
17300     F2 FA 01 F6 | 	mov	result1, objptr
17304     18 FA 25 F4 | 	bith	result1, #24
17308     63 00 00 FF 
1730c     48 E5 05 F1 | 	add	objptr, ##51016
17310     F2 FA 61 FC | 	wrlong	result1, objptr
17314     63 00 00 FF 
17318     48 E5 85 F1 | 	sub	objptr, ##51016
1731c     F2 FA 01 F6 | 	mov	result1, objptr
17320     00 88 00 FF 
17324     00 FA 45 F5 | 	or	result1, ##17825792
17328     63 00 00 FF 
1732c     4C E5 05 F1 | 	add	objptr, ##51020
17330     F2 FA 61 FC | 	wrlong	result1, objptr
17334     63 00 00 FF 
17338     4C E5 85 F1 | 	sub	objptr, ##51020
1733c     F2 FA 01 F6 | 	mov	result1, objptr
17340     00 90 00 FF 
17344     00 FA 45 F5 | 	or	result1, ##18874368
17348     63 00 00 FF 
1734c     50 E5 05 F1 | 	add	objptr, ##51024
17350     F2 FA 61 FC | 	wrlong	result1, objptr
17354     63 00 00 FF 
17358     50 E5 85 F1 | 	sub	objptr, ##51024
1735c     F2 FA 01 F6 | 	mov	result1, objptr
17360     00 98 00 FF 
17364     00 FA 45 F5 | 	or	result1, ##19922944
17368     63 00 00 FF 
1736c     54 E5 05 F1 | 	add	objptr, ##51028
17370     F2 FA 61 FC | 	wrlong	result1, objptr
17374     63 00 00 FF 
17378     54 E5 85 F1 | 	sub	objptr, ##51028
1737c     F2 FA 01 F6 | 	mov	result1, objptr
17380     00 A0 00 FF 
17384     00 FA 45 F5 | 	or	result1, ##20971520
17388     63 00 00 FF 
1738c     58 E5 05 F1 | 	add	objptr, ##51032
17390     F2 FA 61 FC | 	wrlong	result1, objptr
17394     63 00 00 FF 
17398     58 E5 85 F1 | 	sub	objptr, ##51032
1739c     F2 FA 01 F6 | 	mov	result1, objptr
173a0     00 A8 00 FF 
173a4     00 FA 45 F5 | 	or	result1, ##22020096
173a8     63 00 00 FF 
173ac     5C E5 05 F1 | 	add	objptr, ##51036
173b0     F2 FA 61 FC | 	wrlong	result1, objptr
173b4     63 00 00 FF 
173b8     5C E5 85 F1 | 	sub	objptr, ##51036
173bc     F2 FA 01 F6 | 	mov	result1, objptr
173c0     00 B0 00 FF 
173c4     00 FA 45 F5 | 	or	result1, ##23068672
173c8     63 00 00 FF 
173cc     60 E5 05 F1 | 	add	objptr, ##51040
173d0     F2 FA 61 FC | 	wrlong	result1, objptr
173d4     63 00 00 FF 
173d8     60 E5 85 F1 | 	sub	objptr, ##51040
173dc     F2 FA 01 F6 | 	mov	result1, objptr
173e0     00 B8 00 FF 
173e4     00 FA 45 F5 | 	or	result1, ##24117248
173e8     63 00 00 FF 
173ec     64 E5 05 F1 | 	add	objptr, ##51044
173f0     F2 FA 61 FC | 	wrlong	result1, objptr
173f4     63 00 00 FF 
173f8     64 E5 85 F1 | 	sub	objptr, ##51044
173fc     F2 FA 01 F6 | 	mov	result1, objptr
17400     37 FA 25 F4 | 	bith	result1, #55
17404     63 00 00 FF 
17408     68 E5 05 F1 | 	add	objptr, ##51048
1740c     F2 FA 61 FC | 	wrlong	result1, objptr
17410     63 00 00 FF 
17414     68 E5 85 F1 | 	sub	objptr, ##51048
17418     F2 FA 01 F6 | 	mov	result1, objptr
1741c     00 C8 00 FF 
17420     00 FA 45 F5 | 	or	result1, ##26214400
17424     63 00 00 FF 
17428     6C E5 05 F1 | 	add	objptr, ##51052
1742c     F2 FA 61 FC | 	wrlong	result1, objptr
17430     63 00 00 FF 
17434     6C E5 85 F1 | 	sub	objptr, ##51052
17438     F2 FA 01 F6 | 	mov	result1, objptr
1743c     00 D0 00 FF 
17440     00 FA 45 F5 | 	or	result1, ##27262976
17444     63 00 00 FF 
17448     70 E5 05 F1 | 	add	objptr, ##51056
1744c     F2 FA 61 FC | 	wrlong	result1, objptr
17450     63 00 00 FF 
17454     70 E5 85 F1 | 	sub	objptr, ##51056
17458     F2 FA 01 F6 | 	mov	result1, objptr
1745c     00 D8 00 FF 
17460     00 FA 45 F5 | 	or	result1, ##28311552
17464     63 00 00 FF 
17468     74 E5 05 F1 | 	add	objptr, ##51060
1746c     F2 FA 61 FC | 	wrlong	result1, objptr
17470     63 00 00 FF 
17474     74 E5 85 F1 | 	sub	objptr, ##51060
17478     F2 FA 01 F6 | 	mov	result1, objptr
1747c     56 FA 25 F4 | 	bith	result1, #86
17480     63 00 00 FF 
17484     78 E5 05 F1 | 	add	objptr, ##51064
17488     F2 FA 61 FC | 	wrlong	result1, objptr
1748c     63 00 00 FF 
17490     78 E5 85 F1 | 	sub	objptr, ##51064
17494     F2 FA 01 F6 | 	mov	result1, objptr
17498     00 E8 00 FF 
1749c     00 FA 45 F5 | 	or	result1, ##30408704
174a0     65 00 00 FF 
174a4     40 E4 05 F1 | 	add	objptr, ##51776
174a8     F2 FA 61 FC | 	wrlong	result1, objptr
174ac     65 00 00 FF 
174b0     40 E4 85 F1 | 	sub	objptr, ##51776
174b4     F2 FA 01 F6 | 	mov	result1, objptr
174b8     75 FA 25 F4 | 	bith	result1, #117
174bc     63 00 00 FF 
174c0     7C E5 05 F1 | 	add	objptr, ##51068
174c4     F2 FA 61 FC | 	wrlong	result1, objptr
174c8     63 00 00 FF 
174cc     7C E5 85 F1 | 	sub	objptr, ##51068
174d0     F2 FA 01 F6 | 	mov	result1, objptr
174d4     94 FA 25 F4 | 	bith	result1, #148
174d8     63 00 00 FF 
174dc     90 E5 05 F1 | 	add	objptr, ##51088
174e0     F2 FA 61 FC | 	wrlong	result1, objptr
174e4     63 00 00 FF 
174e8     90 E5 85 F1 | 	sub	objptr, ##51088
174ec     F2 FA 01 F6 | 	mov	result1, objptr
174f0     19 FA 25 F4 | 	bith	result1, #25
174f4     63 00 00 FF 
174f8     80 E5 05 F1 | 	add	objptr, ##51072
174fc     F2 FA 61 FC | 	wrlong	result1, objptr
17500     63 00 00 FF 
17504     80 E5 85 F1 | 	sub	objptr, ##51072
17508     F2 FA 01 F6 | 	mov	result1, objptr
1750c     00 08 01 FF 
17510     00 FA 45 F5 | 	or	result1, ##34603008
17514     63 00 00 FF 
17518     9C E4 05 F1 | 	add	objptr, ##50844
1751c     F2 FA 61 FC | 	wrlong	result1, objptr
17520     63 00 00 FF 
17524     9C E4 85 F1 | 	sub	objptr, ##50844
17528     F2 FA 01 F6 | 	mov	result1, objptr
1752c     00 10 01 FF 
17530     00 FA 45 F5 | 	or	result1, ##35651584
17534     63 00 00 FF 
17538     84 E5 05 F1 | 	add	objptr, ##51076
1753c     F2 FA 61 FC | 	wrlong	result1, objptr
17540     63 00 00 FF 
17544     84 E5 85 F1 | 	sub	objptr, ##51076
17548     F2 FA 01 F6 | 	mov	result1, objptr
1754c     00 18 01 FF 
17550     00 FA 45 F5 | 	or	result1, ##36700160
17554     63 00 00 FF 
17558     88 E5 05 F1 | 	add	objptr, ##51080
1755c     F2 FA 61 FC | 	wrlong	result1, objptr
17560     63 00 00 FF 
17564     88 E5 85 F1 | 	sub	objptr, ##51080
17568     F2 FA 01 F6 | 	mov	result1, objptr
1756c     00 20 01 FF 
17570     00 FA 45 F5 | 	or	result1, ##37748736
17574     63 00 00 FF 
17578     8C E5 05 F1 | 	add	objptr, ##51084
1757c     F2 FA 61 FC | 	wrlong	result1, objptr
17580     63 00 00 FF 
17584     8C E5 85 F1 | 	sub	objptr, ##51084
17588     F2 FA 01 F6 | 	mov	result1, objptr
1758c     00 28 01 FF 
17590     00 FA 45 F5 | 	or	result1, ##38797312
17594     63 00 00 FF 
17598     98 E5 05 F1 | 	add	objptr, ##51096
1759c     F2 FA 61 FC | 	wrlong	result1, objptr
175a0     63 00 00 FF 
175a4     98 E5 85 F1 | 	sub	objptr, ##51096
175a8     F2 FA 01 F6 | 	mov	result1, objptr
175ac     00 30 01 FF 
175b0     00 FA 45 F5 | 	or	result1, ##39845888
175b4     63 00 00 FF 
175b8     9C E5 05 F1 | 	add	objptr, ##51100
175bc     F2 FA 61 FC | 	wrlong	result1, objptr
175c0     63 00 00 FF 
175c4     9C E5 85 F1 | 	sub	objptr, ##51100
175c8     F2 FA 01 F6 | 	mov	result1, objptr
175cc     00 38 01 FF 
175d0     00 FA 45 F5 | 	or	result1, ##40894464
175d4     63 00 00 FF 
175d8     A0 E5 05 F1 | 	add	objptr, ##51104
175dc     F2 FA 61 FC | 	wrlong	result1, objptr
175e0     63 00 00 FF 
175e4     A0 E5 85 F1 | 	sub	objptr, ##51104
175e8     F2 FA 01 F6 | 	mov	result1, objptr
175ec     00 40 01 FF 
175f0     00 FA 45 F5 | 	or	result1, ##41943040
175f4     63 00 00 FF 
175f8     A4 E5 05 F1 | 	add	objptr, ##51108
175fc     F2 FA 61 FC | 	wrlong	result1, objptr
17600     63 00 00 FF 
17604     A4 E5 85 F1 | 	sub	objptr, ##51108
17608     F2 FA 01 F6 | 	mov	result1, objptr
1760c     00 48 01 FF 
17610     00 FA 45 F5 | 	or	result1, ##42991616
17614     63 00 00 FF 
17618     AC E5 05 F1 | 	add	objptr, ##51116
1761c     F2 FA 61 FC | 	wrlong	result1, objptr
17620     63 00 00 FF 
17624     AC E5 85 F1 | 	sub	objptr, ##51116
17628     F2 FA 01 F6 | 	mov	result1, objptr
1762c     00 50 01 FF 
17630     00 FA 45 F5 | 	or	result1, ##44040192
17634     63 00 00 FF 
17638     B0 E5 05 F1 | 	add	objptr, ##51120
1763c     F2 FA 61 FC | 	wrlong	result1, objptr
17640     63 00 00 FF 
17644     B0 E5 85 F1 | 	sub	objptr, ##51120
17648     F2 FA 01 F6 | 	mov	result1, objptr
1764c     00 58 01 FF 
17650     00 FA 45 F5 | 	or	result1, ##45088768
17654     63 00 00 FF 
17658     B0 E4 05 F1 | 	add	objptr, ##50864
1765c     F2 FA 61 FC | 	wrlong	result1, objptr
17660     63 00 00 FF 
17664     B0 E4 85 F1 | 	sub	objptr, ##50864
17668     F2 FA 01 F6 | 	mov	result1, objptr
1766c     00 60 01 FF 
17670     00 FA 45 F5 | 	or	result1, ##46137344
17674     63 00 00 FF 
17678     E0 E4 05 F1 | 	add	objptr, ##50912
1767c     F2 FA 61 FC | 	wrlong	result1, objptr
17680     63 00 00 FF 
17684     E0 E4 85 F1 | 	sub	objptr, ##50912
17688     F2 FA 01 F6 | 	mov	result1, objptr
1768c     00 68 01 FF 
17690     00 FA 45 F5 | 	or	result1, ##47185920
17694     63 00 00 FF 
17698     DC E4 05 F1 | 	add	objptr, ##50908
1769c     F2 FA 61 FC | 	wrlong	result1, objptr
176a0     63 00 00 FF 
176a4     DC E4 85 F1 | 	sub	objptr, ##50908
176a8     F2 FA 01 F6 | 	mov	result1, objptr
176ac     00 70 01 FF 
176b0     00 FA 45 F5 | 	or	result1, ##48234496
176b4     63 00 00 FF 
176b8     80 E4 05 F1 | 	add	objptr, ##50816
176bc     F2 FA 61 FC | 	wrlong	result1, objptr
176c0     63 00 00 FF 
176c4     80 E4 85 F1 | 	sub	objptr, ##50816
176c8     F2 FA 01 F6 | 	mov	result1, objptr
176cc     00 78 01 FF 
176d0     00 FA 45 F5 | 	or	result1, ##49283072
176d4     63 00 00 FF 
176d8     84 E4 05 F1 | 	add	objptr, ##50820
176dc     F2 FA 61 FC | 	wrlong	result1, objptr
176e0     63 00 00 FF 
176e4     84 E4 85 F1 | 	sub	objptr, ##50820
176e8     F2 FA 01 F6 | 	mov	result1, objptr
176ec     38 FA 25 F4 | 	bith	result1, #56
176f0     63 00 00 FF 
176f4     EC E4 05 F1 | 	add	objptr, ##50924
176f8     F2 FA 61 FC | 	wrlong	result1, objptr
176fc     63 00 00 FF 
17700     EC E4 85 F1 | 	sub	objptr, ##50924
17704     F2 FA 01 F6 | 	mov	result1, objptr
17708     00 88 01 FF 
1770c     00 FA 45 F5 | 	or	result1, ##51380224
17710     63 00 00 FF 
17714     94 E5 05 F1 | 	add	objptr, ##51092
17718     F2 FA 61 FC | 	wrlong	result1, objptr
1771c     63 00 00 FF 
17720     94 E5 85 F1 | 	sub	objptr, ##51092
17724     F2 FA 01 F6 | 	mov	result1, objptr
17728     00 90 01 FF 
1772c     00 FA 45 F5 | 	or	result1, ##52428800
17730     63 00 00 FF 
17734     A8 E5 05 F1 | 	add	objptr, ##51112
17738     F2 FA 61 FC | 	wrlong	result1, objptr
1773c     63 00 00 FF 
17740     A8 E5 85 F1 | 	sub	objptr, ##51112
17744     F2 FA 01 F6 | 	mov	result1, objptr
17748     00 98 01 FF 
1774c     00 FA 45 F5 | 	or	result1, ##53477376
17750     63 00 00 FF 
17754     B4 E5 05 F1 | 	add	objptr, ##51124
17758     F2 FA 61 FC | 	wrlong	result1, objptr
1775c     63 00 00 FF 
17760     B4 E5 85 F1 | 	sub	objptr, ##51124
17764     F2 FA 01 F6 | 	mov	result1, objptr
17768     00 A0 01 FF 
1776c     00 FA 45 F5 | 	or	result1, ##54525952
17770     63 00 00 FF 
17774     B8 E5 05 F1 | 	add	objptr, ##51128
17778     F2 FA 61 FC | 	wrlong	result1, objptr
1777c     63 00 00 FF 
17780     B8 E5 85 F1 | 	sub	objptr, ##51128
17784     F2 FA 01 F6 | 	mov	result1, objptr
17788     00 A8 01 FF 
1778c     00 FA 45 F5 | 	or	result1, ##55574528
17790     63 00 00 FF 
17794     BC E5 05 F1 | 	add	objptr, ##51132
17798     F2 FA 61 FC | 	wrlong	result1, objptr
1779c     63 00 00 FF 
177a0     BC E5 85 F1 | 	sub	objptr, ##51132
177a4     F2 FA 01 F6 | 	mov	result1, objptr
177a8     00 B0 01 FF 
177ac     00 FA 45 F5 | 	or	result1, ##56623104
177b0     63 00 00 FF 
177b4     C0 E5 05 F1 | 	add	objptr, ##51136
177b8     F2 FA 61 FC | 	wrlong	result1, objptr
177bc     63 00 00 FF 
177c0     C0 E5 85 F1 | 	sub	objptr, ##51136
177c4     F2 FA 01 F6 | 	mov	result1, objptr
177c8     00 B8 01 FF 
177cc     00 FA 45 F5 | 	or	result1, ##57671680
177d0     63 00 00 FF 
177d4     C4 E5 05 F1 | 	add	objptr, ##51140
177d8     F2 FA 61 FC | 	wrlong	result1, objptr
177dc     63 00 00 FF 
177e0     C4 E5 85 F1 | 	sub	objptr, ##51140
177e4     F2 FA 01 F6 | 	mov	result1, objptr
177e8     57 FA 25 F4 | 	bith	result1, #87
177ec     63 00 00 FF 
177f0     C8 E5 05 F1 | 	add	objptr, ##51144
177f4     F2 FA 61 FC | 	wrlong	result1, objptr
177f8     63 00 00 FF 
177fc     C8 E5 85 F1 | 	sub	objptr, ##51144
17800     F2 FA 01 F6 | 	mov	result1, objptr
17804     94 FA 25 F4 | 	bith	result1, #148
17808     63 00 00 FF 
1780c     90 E5 05 F1 | 	add	objptr, ##51088
17810     F2 FA 61 FC | 	wrlong	result1, objptr
17814     63 00 00 FF 
17818     90 E5 85 F1 | 	sub	objptr, ##51088
1781c     F2 FA 01 F6 | 	mov	result1, objptr
17820     00 C8 01 FF 
17824     00 FA 45 F5 | 	or	result1, ##59768832
17828     63 00 00 FF 
1782c     D0 E5 05 F1 | 	add	objptr, ##51152
17830     F2 FA 61 FC | 	wrlong	result1, objptr
17834     63 00 00 FF 
17838     D0 E5 85 F1 | 	sub	objptr, ##51152
1783c     F2 FA 01 F6 | 	mov	result1, objptr
17840     00 D0 01 FF 
17844     00 FA 45 F5 | 	or	result1, ##60817408
17848     63 00 00 FF 
1784c     CC E5 05 F1 | 	add	objptr, ##51148
17850     F2 FA 61 FC | 	wrlong	result1, objptr
17854     63 00 00 FF 
17858     CC E5 85 F1 | 	sub	objptr, ##51148
1785c     F2 FA 01 F6 | 	mov	result1, objptr
17860     00 D8 01 FF 
17864     00 FA 45 F5 | 	or	result1, ##61865984
17868     63 00 00 FF 
1786c     E4 E5 05 F1 | 	add	objptr, ##51172
17870     F2 FA 61 FC | 	wrlong	result1, objptr
17874     63 00 00 FF 
17878     E4 E5 85 F1 | 	sub	objptr, ##51172
1787c     F2 FA 01 F6 | 	mov	result1, objptr
17880     76 FA 25 F4 | 	bith	result1, #118
17884     63 00 00 FF 
17888     E8 E5 05 F1 | 	add	objptr, ##51176
1788c     F2 FA 61 FC | 	wrlong	result1, objptr
17890     63 00 00 FF 
17894     E8 E5 85 F1 | 	sub	objptr, ##51176
17898     F2 FA 01 F6 | 	mov	result1, objptr
1789c     00 E8 01 FF 
178a0     00 FA 45 F5 | 	or	result1, ##63963136
178a4     63 00 00 FF 
178a8     D4 E5 05 F1 | 	add	objptr, ##51156
178ac     F2 FA 61 FC | 	wrlong	result1, objptr
178b0     63 00 00 FF 
178b4     D4 E5 85 F1 | 	sub	objptr, ##51156
178b8     F2 FA 01 F6 | 	mov	result1, objptr
178bc     95 FA 25 F4 | 	bith	result1, #149
178c0     63 00 00 FF 
178c4     D8 E5 05 F1 | 	add	objptr, ##51160
178c8     F2 FA 61 FC | 	wrlong	result1, objptr
178cc     63 00 00 FF 
178d0     D8 E5 85 F1 | 	sub	objptr, ##51160
178d4     F2 FA 01 F6 | 	mov	result1, objptr
178d8     B4 FA 25 F4 | 	bith	result1, #180
178dc     63 00 00 FF 
178e0     DC E5 05 F1 | 	add	objptr, ##51164
178e4     F2 FA 61 FC | 	wrlong	result1, objptr
178e8     63 00 00 FF 
178ec     DC E5 85 F1 | 	sub	objptr, ##51164
178f0     F2 FA 01 F6 | 	mov	result1, objptr
178f4     1A FA 25 F4 | 	bith	result1, #26
178f8     63 00 00 FF 
178fc     E0 E5 05 F1 | 	add	objptr, ##51168
17900     F2 FA 61 FC | 	wrlong	result1, objptr
17904     63 00 00 FF 
17908     E0 E5 85 F1 | 	sub	objptr, ##51168
1790c     F2 FA 01 F6 | 	mov	result1, objptr
17910     00 08 02 FF 
17914     00 FA 45 F5 | 	or	result1, ##68157440
17918     63 00 00 FF 
1791c     F0 E5 05 F1 | 	add	objptr, ##51184
17920     F2 FA 61 FC | 	wrlong	result1, objptr
17924     63 00 00 FF 
17928     F0 E5 85 F1 | 	sub	objptr, ##51184
1792c     F2 FA 01 F6 | 	mov	result1, objptr
17930     00 10 02 FF 
17934     00 FA 45 F5 | 	or	result1, ##69206016
17938     63 00 00 FF 
1793c     EC E5 05 F1 | 	add	objptr, ##51180
17940     F2 FA 61 FC | 	wrlong	result1, objptr
17944     63 00 00 FF 
17948     EC E5 85 F1 | 	sub	objptr, ##51180
1794c     F2 FA 01 F6 | 	mov	result1, objptr
17950     00 18 02 FF 
17954     00 FA 45 F5 | 	or	result1, ##70254592
17958     63 00 00 FF 
1795c     FC E5 05 F1 | 	add	objptr, ##51196
17960     F2 FA 61 FC | 	wrlong	result1, objptr
17964     63 00 00 FF 
17968     FC E5 85 F1 | 	sub	objptr, ##51196
1796c     F2 FA 01 F6 | 	mov	result1, objptr
17970     00 20 02 FF 
17974     00 FA 45 F5 | 	or	result1, ##71303168
17978     63 00 00 FF 
1797c     F8 E5 05 F1 | 	add	objptr, ##51192
17980     F2 FA 61 FC | 	wrlong	result1, objptr
17984     63 00 00 FF 
17988     F8 E5 85 F1 | 	sub	objptr, ##51192
1798c     F2 FA 01 F6 | 	mov	result1, objptr
17990     00 28 02 FF 
17994     00 FA 45 F5 | 	or	result1, ##72351744
17998     63 00 00 FF 
1799c     F4 E5 05 F1 | 	add	objptr, ##51188
179a0     F2 FA 61 FC | 	wrlong	result1, objptr
179a4     63 00 00 FF 
179a8     F4 E5 85 F1 | 	sub	objptr, ##51188
179ac     F2 FA 01 F6 | 	mov	result1, objptr
179b0     00 30 02 FF 
179b4     00 FA 45 F5 | 	or	result1, ##73400320
179b8     64 00 00 FF 
179bc     00 E4 05 F1 | 	add	objptr, ##51200
179c0     F2 FA 61 FC | 	wrlong	result1, objptr
179c4     64 00 00 FF 
179c8     00 E4 85 F1 | 	sub	objptr, ##51200
179cc     F2 FA 01 F6 | 	mov	result1, objptr
179d0     00 38 02 FF 
179d4     00 FA 45 F5 | 	or	result1, ##74448896
179d8     64 00 00 FF 
179dc     04 E4 05 F1 | 	add	objptr, ##51204
179e0     F2 FA 61 FC | 	wrlong	result1, objptr
179e4     64 00 00 FF 
179e8     04 E4 85 F1 | 	sub	objptr, ##51204
179ec     F2 FA 01 F6 | 	mov	result1, objptr
179f0     00 40 02 FF 
179f4     00 FA 45 F5 | 	or	result1, ##75497472
179f8     63 00 00 FF 
179fc     98 E4 05 F1 | 	add	objptr, ##50840
17a00     F2 FA 61 FC | 	wrlong	result1, objptr
17a04     63 00 00 FF 
17a08     98 E4 85 F1 | 	sub	objptr, ##50840
17a0c     F2 FA 01 F6 | 	mov	result1, objptr
17a10     00 48 02 FF 
17a14     00 FA 45 F5 | 	or	result1, ##76546048
17a18     64 00 00 FF 
17a1c     1C E4 05 F1 | 	add	objptr, ##51228
17a20     F2 FA 61 FC | 	wrlong	result1, objptr
17a24     64 00 00 FF 
17a28     1C E4 85 F1 | 	sub	objptr, ##51228
17a2c     F2 FA 01 F6 | 	mov	result1, objptr
17a30     00 50 02 FF 
17a34     00 FA 45 F5 | 	or	result1, ##77594624
17a38     64 00 00 FF 
17a3c     2C E4 05 F1 | 	add	objptr, ##51244
17a40     F2 FA 61 FC | 	wrlong	result1, objptr
17a44     64 00 00 FF 
17a48     2C E4 85 F1 | 	sub	objptr, ##51244
17a4c     F2 FA 01 F6 | 	mov	result1, objptr
17a50     00 58 02 FF 
17a54     00 FA 45 F5 | 	or	result1, ##78643200
17a58     64 00 00 FF 
17a5c     30 E4 05 F1 | 	add	objptr, ##51248
17a60     F2 FA 61 FC | 	wrlong	result1, objptr
17a64     64 00 00 FF 
17a68     30 E4 85 F1 | 	sub	objptr, ##51248
17a6c     F2 FA 01 F6 | 	mov	result1, objptr
17a70     00 60 02 FF 
17a74     00 FA 45 F5 | 	or	result1, ##79691776
17a78     64 00 00 FF 
17a7c     28 E4 05 F1 | 	add	objptr, ##51240
17a80     F2 FA 61 FC | 	wrlong	result1, objptr
17a84     64 00 00 FF 
17a88     28 E4 85 F1 | 	sub	objptr, ##51240
17a8c     F2 FA 01 F6 | 	mov	result1, objptr
17a90     00 68 02 FF 
17a94     00 FA 45 F5 | 	or	result1, ##80740352
17a98     64 00 00 FF 
17a9c     20 E4 05 F1 | 	add	objptr, ##51232
17aa0     F2 FA 61 FC | 	wrlong	result1, objptr
17aa4     64 00 00 FF 
17aa8     20 E4 85 F1 | 	sub	objptr, ##51232
17aac     F2 FA 01 F6 | 	mov	result1, objptr
17ab0     00 70 02 FF 
17ab4     00 FA 45 F5 | 	or	result1, ##81788928
17ab8     64 00 00 FF 
17abc     24 E4 05 F1 | 	add	objptr, ##51236
17ac0     F2 FA 61 FC | 	wrlong	result1, objptr
17ac4     64 00 00 FF 
17ac8     24 E4 85 F1 | 	sub	objptr, ##51236
17acc     F2 FA 01 F6 | 	mov	result1, objptr
17ad0     00 78 02 FF 
17ad4     00 FA 45 F5 | 	or	result1, ##82837504
17ad8     64 00 00 FF 
17adc     34 E4 05 F1 | 	add	objptr, ##51252
17ae0     F2 FA 61 FC | 	wrlong	result1, objptr
17ae4     64 00 00 FF 
17ae8     34 E4 85 F1 | 	sub	objptr, ##51252
17aec     F2 FA 01 F6 | 	mov	result1, objptr
17af0     00 80 02 FF 
17af4     00 FA 45 F5 | 	or	result1, ##83886080
17af8     64 00 00 FF 
17afc     38 E4 05 F1 | 	add	objptr, ##51256
17b00     F2 FA 61 FC | 	wrlong	result1, objptr
17b04     64 00 00 FF 
17b08     38 E4 85 F1 | 	sub	objptr, ##51256
17b0c     F2 FA 01 F6 | 	mov	result1, objptr
17b10     00 88 02 FF 
17b14     00 FA 45 F5 | 	or	result1, ##84934656
17b18     64 00 00 FF 
17b1c     3C E4 05 F1 | 	add	objptr, ##51260
17b20     F2 FA 61 FC | 	wrlong	result1, objptr
17b24     64 00 00 FF 
17b28     3C E4 85 F1 | 	sub	objptr, ##51260
17b2c     F2 FA 01 F6 | 	mov	result1, objptr
17b30     00 90 02 FF 
17b34     00 FA 45 F5 | 	or	result1, ##85983232
17b38     64 00 00 FF 
17b3c     40 E4 05 F1 | 	add	objptr, ##51264
17b40     F2 FA 61 FC | 	wrlong	result1, objptr
17b44     64 00 00 FF 
17b48     40 E4 85 F1 | 	sub	objptr, ##51264
17b4c     F2 FA 01 F6 | 	mov	result1, objptr
17b50     00 98 02 FF 
17b54     00 FA 45 F5 | 	or	result1, ##87031808
17b58     64 00 00 FF 
17b5c     44 E4 05 F1 | 	add	objptr, ##51268
17b60     F2 FA 61 FC | 	wrlong	result1, objptr
17b64     64 00 00 FF 
17b68     44 E4 85 F1 | 	sub	objptr, ##51268
17b6c     F2 FA 01 F6 | 	mov	result1, objptr
17b70     00 A0 02 FF 
17b74     00 FA 45 F5 | 	or	result1, ##88080384
17b78     64 00 00 FF 
17b7c     48 E4 05 F1 | 	add	objptr, ##51272
17b80     F2 FA 61 FC | 	wrlong	result1, objptr
17b84     64 00 00 FF 
17b88     48 E4 85 F1 | 	sub	objptr, ##51272
17b8c     F2 FA 01 F6 | 	mov	result1, objptr
17b90     00 A8 02 FF 
17b94     00 FA 45 F5 | 	or	result1, ##89128960
17b98     64 00 00 FF 
17b9c     4C E4 05 F1 | 	add	objptr, ##51276
17ba0     F2 FA 61 FC | 	wrlong	result1, objptr
17ba4     64 00 00 FF 
17ba8     4C E4 85 F1 | 	sub	objptr, ##51276
17bac     F2 FA 01 F6 | 	mov	result1, objptr
17bb0     00 B0 02 FF 
17bb4     00 FA 45 F5 | 	or	result1, ##90177536
17bb8     64 00 00 FF 
17bbc     50 E4 05 F1 | 	add	objptr, ##51280
17bc0     F2 FA 61 FC | 	wrlong	result1, objptr
17bc4     64 00 00 FF 
17bc8     50 E4 85 F1 | 	sub	objptr, ##51280
17bcc     F2 FA 01 F6 | 	mov	result1, objptr
17bd0     00 B8 02 FF 
17bd4     00 FA 45 F5 | 	or	result1, ##91226112
17bd8     64 00 00 FF 
17bdc     5C E4 05 F1 | 	add	objptr, ##51292
17be0     F2 FA 61 FC | 	wrlong	result1, objptr
17be4     64 00 00 FF 
17be8     5C E4 85 F1 | 	sub	objptr, ##51292
17bec     F2 FA 01 F6 | 	mov	result1, objptr
17bf0     00 C0 02 FF 
17bf4     00 FA 45 F5 | 	or	result1, ##92274688
17bf8     64 00 00 FF 
17bfc     54 E4 05 F1 | 	add	objptr, ##51284
17c00     F2 FA 61 FC | 	wrlong	result1, objptr
17c04     64 00 00 FF 
17c08     54 E4 85 F1 | 	sub	objptr, ##51284
17c0c     F2 FA 01 F6 | 	mov	result1, objptr
17c10     00 C8 02 FF 
17c14     00 FA 45 F5 | 	or	result1, ##93323264
17c18     64 00 00 FF 
17c1c     58 E4 05 F1 | 	add	objptr, ##51288
17c20     F2 FA 61 FC | 	wrlong	result1, objptr
17c24     64 00 00 FF 
17c28     58 E4 85 F1 | 	sub	objptr, ##51288
17c2c     F2 FA 01 F6 | 	mov	result1, objptr
17c30     00 D0 02 FF 
17c34     00 FA 45 F5 | 	or	result1, ##94371840
17c38     64 00 00 FF 
17c3c     60 E4 05 F1 | 	add	objptr, ##51296
17c40     F2 FA 61 FC | 	wrlong	result1, objptr
17c44     64 00 00 FF 
17c48     60 E4 85 F1 | 	sub	objptr, ##51296
17c4c     F2 FA 01 F6 | 	mov	result1, objptr
17c50     00 D8 02 FF 
17c54     00 FA 45 F5 | 	or	result1, ##95420416
17c58     64 00 00 FF 
17c5c     08 E4 05 F1 | 	add	objptr, ##51208
17c60     F2 FA 61 FC | 	wrlong	result1, objptr
17c64     64 00 00 FF 
17c68     08 E4 85 F1 | 	sub	objptr, ##51208
17c6c     F2 FA 01 F6 | 	mov	result1, objptr
17c70     00 E0 02 FF 
17c74     00 FA 45 F5 | 	or	result1, ##96468992
17c78     64 00 00 FF 
17c7c     10 E4 05 F1 | 	add	objptr, ##51216
17c80     F2 FA 61 FC | 	wrlong	result1, objptr
17c84     64 00 00 FF 
17c88     10 E4 85 F1 | 	sub	objptr, ##51216
17c8c     F2 FA 01 F6 | 	mov	result1, objptr
17c90     00 E8 02 FF 
17c94     00 FA 45 F5 | 	or	result1, ##97517568
17c98     64 00 00 FF 
17c9c     14 E4 05 F1 | 	add	objptr, ##51220
17ca0     F2 FA 61 FC | 	wrlong	result1, objptr
17ca4     64 00 00 FF 
17ca8     14 E4 85 F1 | 	sub	objptr, ##51220
17cac     F2 FA 01 F6 | 	mov	result1, objptr
17cb0     00 F0 02 FF 
17cb4     00 FA 45 F5 | 	or	result1, ##98566144
17cb8     64 00 00 FF 
17cbc     64 E4 05 F1 | 	add	objptr, ##51300
17cc0     F2 FA 61 FC | 	wrlong	result1, objptr
17cc4     64 00 00 FF 
17cc8     64 E4 85 F1 | 	sub	objptr, ##51300
17ccc     F2 FA 01 F6 | 	mov	result1, objptr
17cd0     00 F8 02 FF 
17cd4     00 FA 45 F5 | 	or	result1, ##99614720
17cd8     64 00 00 FF 
17cdc     68 E4 05 F1 | 	add	objptr, ##51304
17ce0     F2 FA 61 FC | 	wrlong	result1, objptr
17ce4     64 00 00 FF 
17ce8     68 E4 85 F1 | 	sub	objptr, ##51304
17cec     F2 FA 01 F6 | 	mov	result1, objptr
17cf0     39 FA 25 F4 | 	bith	result1, #57
17cf4     64 00 00 FF 
17cf8     6C E4 05 F1 | 	add	objptr, ##51308
17cfc     F2 FA 61 FC | 	wrlong	result1, objptr
17d00     64 00 00 FF 
17d04     6C E4 85 F1 | 	sub	objptr, ##51308
17d08     F2 FA 01 F6 | 	mov	result1, objptr
17d0c     00 08 03 FF 
17d10     00 FA 45 F5 | 	or	result1, ##101711872
17d14     64 00 00 FF 
17d18     18 E4 05 F1 | 	add	objptr, ##51224
17d1c     F2 FA 61 FC | 	wrlong	result1, objptr
17d20     64 00 00 FF 
17d24     18 E4 85 F1 | 	sub	objptr, ##51224
17d28     F2 FA 01 F6 | 	mov	result1, objptr
17d2c     00 10 03 FF 
17d30     00 FA 45 F5 | 	or	result1, ##102760448
17d34     64 00 00 FF 
17d38     7C E4 05 F1 | 	add	objptr, ##51324
17d3c     F2 FA 61 FC | 	wrlong	result1, objptr
17d40     64 00 00 FF 
17d44     7C E4 85 F1 | 	sub	objptr, ##51324
17d48     F2 FA 01 F6 | 	mov	result1, objptr
17d4c     00 18 03 FF 
17d50     00 FA 45 F5 | 	or	result1, ##103809024
17d54     64 00 00 FF 
17d58     84 E4 05 F1 | 	add	objptr, ##51332
17d5c     F2 FA 61 FC | 	wrlong	result1, objptr
17d60     64 00 00 FF 
17d64     84 E4 85 F1 | 	sub	objptr, ##51332
17d68     F2 FA 01 F6 | 	mov	result1, objptr
17d6c     00 20 03 FF 
17d70     00 FA 45 F5 | 	or	result1, ##104857600
17d74     64 00 00 FF 
17d78     78 E4 05 F1 | 	add	objptr, ##51320
17d7c     F2 FA 61 FC | 	wrlong	result1, objptr
17d80     64 00 00 FF 
17d84     78 E4 85 F1 | 	sub	objptr, ##51320
17d88     F2 FA 01 F6 | 	mov	result1, objptr
17d8c     00 28 03 FF 
17d90     00 FA 45 F5 | 	or	result1, ##105906176
17d94     64 00 00 FF 
17d98     74 E4 05 F1 | 	add	objptr, ##51316
17d9c     F2 FA 61 FC | 	wrlong	result1, objptr
17da0     64 00 00 FF 
17da4     74 E4 85 F1 | 	sub	objptr, ##51316
17da8     F2 FA 01 F6 | 	mov	result1, objptr
17dac     00 30 03 FF 
17db0     00 FA 45 F5 | 	or	result1, ##106954752
17db4     64 00 00 FF 
17db8     70 E4 05 F1 | 	add	objptr, ##51312
17dbc     F2 FA 61 FC | 	wrlong	result1, objptr
17dc0     64 00 00 FF 
17dc4     70 E4 85 F1 | 	sub	objptr, ##51312
17dc8     F2 FA 01 F6 | 	mov	result1, objptr
17dcc     00 38 03 FF 
17dd0     00 FA 45 F5 | 	or	result1, ##108003328
17dd4     64 00 00 FF 
17dd8     80 E4 05 F1 | 	add	objptr, ##51328
17ddc     F2 FA 61 FC | 	wrlong	result1, objptr
17de0     64 00 00 FF 
17de4     80 E4 85 F1 | 	sub	objptr, ##51328
17de8     F2 FA 01 F6 | 	mov	result1, objptr
17dec     00 40 03 FF 
17df0     00 FA 45 F5 | 	or	result1, ##109051904
17df4     64 00 00 FF 
17df8     88 E4 05 F1 | 	add	objptr, ##51336
17dfc     F2 FA 61 FC | 	wrlong	result1, objptr
17e00     64 00 00 FF 
17e04     88 E4 85 F1 | 	sub	objptr, ##51336
17e08     F2 FA 01 F6 | 	mov	result1, objptr
17e0c     00 48 03 FF 
17e10     00 FA 45 F5 | 	or	result1, ##110100480
17e14     64 00 00 FF 
17e18     8C E4 05 F1 | 	add	objptr, ##51340
17e1c     F2 FA 61 FC | 	wrlong	result1, objptr
17e20     64 00 00 FF 
17e24     8C E4 85 F1 | 	sub	objptr, ##51340
17e28     F2 FA 01 F6 | 	mov	result1, objptr
17e2c     00 50 03 FF 
17e30     00 FA 45 F5 | 	or	result1, ##111149056
17e34     64 00 00 FF 
17e38     90 E4 05 F1 | 	add	objptr, ##51344
17e3c     F2 FA 61 FC | 	wrlong	result1, objptr
17e40     64 00 00 FF 
17e44     90 E4 85 F1 | 	sub	objptr, ##51344
17e48     F2 FA 01 F6 | 	mov	result1, objptr
17e4c     00 58 03 FF 
17e50     00 FA 45 F5 | 	or	result1, ##112197632
17e54     64 00 00 FF 
17e58     98 E4 05 F1 | 	add	objptr, ##51352
17e5c     F2 FA 61 FC | 	wrlong	result1, objptr
17e60     64 00 00 FF 
17e64     98 E4 85 F1 | 	sub	objptr, ##51352
17e68     F2 FA 01 F6 | 	mov	result1, objptr
17e6c     00 60 03 FF 
17e70     00 FA 45 F5 | 	or	result1, ##113246208
17e74     64 00 00 FF 
17e78     9C E4 05 F1 | 	add	objptr, ##51356
17e7c     F2 FA 61 FC | 	wrlong	result1, objptr
17e80     64 00 00 FF 
17e84     9C E4 85 F1 | 	sub	objptr, ##51356
17e88     F2 FA 01 F6 | 	mov	result1, objptr
17e8c     00 68 03 FF 
17e90     00 FA 45 F5 | 	or	result1, ##114294784
17e94     64 00 00 FF 
17e98     A0 E4 05 F1 | 	add	objptr, ##51360
17e9c     F2 FA 61 FC | 	wrlong	result1, objptr
17ea0     64 00 00 FF 
17ea4     A0 E4 85 F1 | 	sub	objptr, ##51360
17ea8     F2 FA 01 F6 | 	mov	result1, objptr
17eac     00 70 03 FF 
17eb0     00 FA 45 F5 | 	or	result1, ##115343360
17eb4     64 00 00 FF 
17eb8     A4 E4 05 F1 | 	add	objptr, ##51364
17ebc     F2 FA 61 FC | 	wrlong	result1, objptr
17ec0     64 00 00 FF 
17ec4     A4 E4 85 F1 | 	sub	objptr, ##51364
17ec8     F2 FA 01 F6 | 	mov	result1, objptr
17ecc     00 78 03 FF 
17ed0     00 FA 45 F5 | 	or	result1, ##116391936
17ed4     64 00 00 FF 
17ed8     A8 E4 05 F1 | 	add	objptr, ##51368
17edc     F2 FA 61 FC | 	wrlong	result1, objptr
17ee0     64 00 00 FF 
17ee4     A8 E4 85 F1 | 	sub	objptr, ##51368
17ee8     F2 FA 01 F6 | 	mov	result1, objptr
17eec     58 FA 25 F4 | 	bith	result1, #88
17ef0     64 00 00 FF 
17ef4     AC E4 05 F1 | 	add	objptr, ##51372
17ef8     F2 FA 61 FC | 	wrlong	result1, objptr
17efc     64 00 00 FF 
17f00     AC E4 85 F1 | 	sub	objptr, ##51372
17f04     F2 FA 01 F6 | 	mov	result1, objptr
17f08     00 88 03 FF 
17f0c     00 FA 45 F5 | 	or	result1, ##118489088
17f10     64 00 00 FF 
17f14     B0 E4 05 F1 | 	add	objptr, ##51376
17f18     F2 FA 61 FC | 	wrlong	result1, objptr
17f1c     64 00 00 FF 
17f20     B0 E4 85 F1 | 	sub	objptr, ##51376
17f24     F2 FA 01 F6 | 	mov	result1, objptr
17f28     00 90 03 FF 
17f2c     00 FA 45 F5 | 	or	result1, ##119537664
17f30     64 00 00 FF 
17f34     B4 E4 05 F1 | 	add	objptr, ##51380
17f38     F2 FA 61 FC | 	wrlong	result1, objptr
17f3c     64 00 00 FF 
17f40     B4 E4 85 F1 | 	sub	objptr, ##51380
17f44     F2 FA 01 F6 | 	mov	result1, objptr
17f48     00 98 03 FF 
17f4c     00 FA 45 F5 | 	or	result1, ##120586240
17f50     64 00 00 FF 
17f54     94 E4 05 F1 | 	add	objptr, ##51348
17f58     F2 FA 61 FC | 	wrlong	result1, objptr
17f5c     64 00 00 FF 
17f60     94 E4 85 F1 | 	sub	objptr, ##51348
17f64     F2 FA 01 F6 | 	mov	result1, objptr
17f68     00 A0 03 FF 
17f6c     00 FA 45 F5 | 	or	result1, ##121634816
17f70     63 00 00 FF 
17f74     8C E4 05 F1 | 	add	objptr, ##50828
17f78     F2 FA 61 FC | 	wrlong	result1, objptr
17f7c     63 00 00 FF 
17f80     8C E4 85 F1 | 	sub	objptr, ##50828
17f84     F2 FA 01 F6 | 	mov	result1, objptr
17f88     00 A8 03 FF 
17f8c     00 FA 45 F5 | 	or	result1, ##122683392
17f90     64 00 00 FF 
17f94     B8 E4 05 F1 | 	add	objptr, ##51384
17f98     F2 FA 61 FC | 	wrlong	result1, objptr
17f9c     64 00 00 FF 
17fa0     B8 E4 85 F1 | 	sub	objptr, ##51384
17fa4     F2 FA 01 F6 | 	mov	result1, objptr
17fa8     00 B0 03 FF 
17fac     00 FA 45 F5 | 	or	result1, ##123731968
17fb0     64 00 00 FF 
17fb4     BC E4 05 F1 | 	add	objptr, ##51388
17fb8     F2 FA 61 FC | 	wrlong	result1, objptr
17fbc     64 00 00 FF 
17fc0     BC E4 85 F1 | 	sub	objptr, ##51388
17fc4                 | _init_commands_ret
17fc4     2D 00 64 FD | 	ret
17fc8                 | 
17fc8                 | ' 
17fc8                 | ' ''--------------------------------Error strings -------------------------------------
17fc8                 | ' sub init_audio
17fc8                 | _init_audio
17fc8     05 4A 05 F6 | 	mov	COUNT_, #5
17fcc     A8 00 A0 FD | 	call	#pushregs_
17fd0     00 C0 1F FF 
17fd4     00 1E 06 F6 | 	mov	local01, ##1065353216
17fd8                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
17fd8     00 20 06 F6 | 	mov	local02, #0
17fdc                 | LR__1900
17fdc     10 23 02 F6 | 	mov	local03, local02
17fe0     01 22 66 F0 | 	shl	local03, #1
17fe4     0C 00 00 FF 
17fe8     CC E4 05 F1 | 	add	objptr, ##6348
17fec     F2 22 02 F1 | 	add	local03, objptr
17ff0     58 7F 23 FF 
17ff4     00 24 06 F6 | 	mov	local04, ##1191096320
17ff8     0C 00 00 FF 
17ffc     CC E4 85 F1 | 	sub	objptr, ##6348
18000     10 13 52 F6 | 	abs	arg01, local02 wc
18004     1F 26 C6 C9 |  if_b	decod	local05, #31
18008     00 26 06 36 |  if_ae	mov	local05, #0
1800c     44 6A B0 FD | 	call	#__system___float_fromuns
18010     13 FB 61 F5 | 	xor	result1, local05
18014     FD 12 02 F6 | 	mov	arg01, result1
18018     87 24 20 FF 
1801c     DB 15 06 F6 | 	mov	arg02, ##1078530011
18020     34 6E B0 FD | 	call	#__system___float_mul
18024     FD 12 02 F6 | 	mov	arg01, result1
18028     00 00 22 FF 
1802c     00 14 06 F6 | 	mov	arg02, ##1140850688
18030     28 70 B0 FD | 	call	#__system___float_div
18034     FD 12 02 F6 | 	mov	arg01, result1
18038     58 77 B0 FD | 	call	#__system____builtin_sinf
1803c     FD 14 02 F6 | 	mov	arg02, result1
18040     12 13 02 F6 | 	mov	arg01, local04
18044     10 6E B0 FD | 	call	#__system___float_mul
18048     FD 12 02 F6 | 	mov	arg01, result1
1804c     01 14 06 F6 | 	mov	arg02, #1
18050     CC 72 B0 FD | 	call	#__system___float_tointeger
18054     11 FB 51 FC | 	wrword	result1, local03
18058     01 20 06 F1 | 	add	local02, #1
1805c     02 00 00 FF 
18060     00 20 56 F2 | 	cmps	local02, ##1024 wc
18064     74 FF 9F CD |  if_b	jmp	#LR__1900
18068                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
18068     00 20 06 F6 | 	mov	local02, #0
1806c     10 00 00 FF 
18070     CC E4 05 F1 | 	add	objptr, ##8396
18074     97 6A 48 FB | 	callpa	#(@LR__1904-@LR__1901)>>2,fcache_load_ptr_
18078                 | LR__1901
18078     10 23 02 F6 | 	mov	local03, local02
1807c     01 22 66 F0 | 	shl	local03, #1
18080     F2 22 02 F1 | 	add	local03, objptr
18084     10 27 02 F6 | 	mov	local05, local02
18088     07 26 66 F0 | 	shl	local05, #7
1808c     10 27 82 F1 | 	sub	local05, local02
18090     C0 FF 7F FF 
18094     00 25 06 F6 | 	mov	local04, ##-32512
18098     13 25 02 F1 | 	add	local04, local05
1809c     11 25 52 FC | 	wrword	local04, local03
180a0     09 22 C6 F9 | 	decod	local03, #9
180a4     10 23 02 F1 | 	add	local03, local02
180a8     01 22 66 F0 | 	shl	local03, #1
180ac     F2 22 02 F1 | 	add	local03, objptr
180b0     10 25 02 F6 | 	mov	local04, local02
180b4     01 24 66 F0 | 	shl	local04, #1
180b8     F2 24 02 F1 | 	add	local04, objptr
180bc     12 25 E2 FA | 	rdword	local04, local04
180c0     0F 24 66 F7 | 	signx	local04, #15
180c4     12 25 62 F6 | 	neg	local04, local04
180c8     11 25 52 FC | 	wrword	local04, local03
180cc     01 20 06 F1 | 	add	local02, #1
180d0     01 00 00 FF 
180d4     00 20 56 F2 | 	cmps	local02, ##512 wc
180d8     9C FF 9F CD |  if_b	jmp	#LR__1901
180dc                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
180dc     00 20 06 F6 | 	mov	local02, #0
180e0     04 00 00 FF 
180e4     00 E4 05 F1 | 	add	objptr, ##2048
180e8                 | LR__1902
180e8     10 23 02 F6 | 	mov	local03, local02
180ec     01 22 66 F0 | 	shl	local03, #1
180f0     F2 22 02 F1 | 	add	local03, objptr
180f4     10 27 02 F6 | 	mov	local05, local02
180f8     06 26 66 F0 | 	shl	local05, #6
180fc     10 27 82 F1 | 	sub	local05, local02
18100     C1 FF 7F FF 
18104     00 24 06 F6 | 	mov	local04, ##-32256
18108     13 25 02 F1 | 	add	local04, local05
1810c     11 25 52 FC | 	wrword	local04, local03
18110     01 20 06 F1 | 	add	local02, #1
18114     02 00 00 FF 
18118     00 20 56 F2 | 	cmps	local02, ##1024 wc
1811c     C8 FF 9F CD |  if_b	jmp	#LR__1902
18120                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
18120     00 20 06 F6 | 	mov	local02, #0
18124     04 00 00 FF 
18128     00 E4 05 F1 | 	add	objptr, ##2048
1812c                 | LR__1903
1812c     10 23 02 F6 | 	mov	local03, local02
18130     01 22 66 F0 | 	shl	local03, #1
18134     F2 22 02 F1 | 	add	local03, objptr
18138     40 00 80 FF 
1813c     11 51 59 FC | 	wrword	##32936, local03
18140     01 20 06 F1 | 	add	local02, #1
18144     80 20 56 F2 | 	cmps	local02, #128 wc
18148     E0 FF 9F CD |  if_b	jmp	#LR__1903
1814c                 | LR__1904
1814c     80 20 06 F6 | 	mov	local02, #128
18150     97 68 48 FB | 	callpa	#(@LR__1910-@LR__1905)>>2,fcache_load_ptr_
18154                 | LR__1905
18154     10 23 02 F6 | 	mov	local03, local02
18158     01 22 66 F0 | 	shl	local03, #1
1815c     F2 22 02 F1 | 	add	local03, objptr
18160     3F 00 80 FF 
18164     11 B1 5A FC | 	wrword	##32600, local03
18168     01 20 06 F1 | 	add	local02, #1
1816c     02 00 00 FF 
18170     00 20 16 F2 | 	cmp	local02, ##1024 wc
18174     DC FF 9F CD |  if_b	jmp	#LR__1905
18178                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
18178     00 20 06 F6 | 	mov	local02, #0
1817c     04 00 00 FF 
18180     00 E4 05 F1 | 	add	objptr, ##2048
18184                 | LR__1906
18184     10 23 02 F6 | 	mov	local03, local02
18188     01 22 66 F0 | 	shl	local03, #1
1818c     F2 22 02 F1 | 	add	local03, objptr
18190     40 00 80 FF 
18194     11 51 59 FC | 	wrword	##32936, local03
18198     01 20 06 F1 | 	add	local02, #1
1819c     01 00 00 FF 
181a0     00 20 56 F2 | 	cmps	local02, ##512 wc
181a4     DC FF 9F CD |  if_b	jmp	#LR__1906
181a8     09 20 C6 F9 | 	decod	local02, #9
181ac                 | LR__1907
181ac     10 23 02 F6 | 	mov	local03, local02
181b0     01 22 66 F0 | 	shl	local03, #1
181b4     F2 22 02 F1 | 	add	local03, objptr
181b8     3F 00 80 FF 
181bc     11 B1 5A FC | 	wrword	##32600, local03
181c0     01 20 06 F1 | 	add	local02, #1
181c4     02 00 00 FF 
181c8     00 20 16 F2 | 	cmp	local02, ##1024 wc
181cc     DC FF 9F CD |  if_b	jmp	#LR__1907
181d0                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
181d0     00 20 06 F6 | 	mov	local02, #0
181d4     04 00 00 FF 
181d8     00 E4 05 F1 | 	add	objptr, ##2048
181dc                 | LR__1908
181dc     10 23 02 F6 | 	mov	local03, local02
181e0     01 22 66 F0 | 	shl	local03, #1
181e4     F2 22 02 F1 | 	add	local03, objptr
181e8     40 00 80 FF 
181ec     11 51 59 FC | 	wrword	##32936, local03
181f0     01 20 06 F1 | 	add	local02, #1
181f4     00 21 56 F2 | 	cmps	local02, #256 wc
181f8     E0 FF 9F CD |  if_b	jmp	#LR__1908
181fc     00 21 06 F6 | 	mov	local02, #256
18200                 | LR__1909
18200     10 23 02 F6 | 	mov	local03, local02
18204     01 22 66 F0 | 	shl	local03, #1
18208     F2 22 02 F1 | 	add	local03, objptr
1820c     3F 00 80 FF 
18210     11 B1 5A FC | 	wrword	##32600, local03
18214     01 20 06 F1 | 	add	local02, #1
18218     02 00 00 FF 
1821c     00 20 16 F2 | 	cmp	local02, ##1024 wc
18220     DC FF 9F CD |  if_b	jmp	#LR__1909
18224                 | LR__1910
18224                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
18224     00 20 06 F6 | 	mov	local02, #0
18228     04 00 00 FF 
1822c     00 E4 05 F1 | 	add	objptr, ##2048
18230     14 00 00 FF 
18234     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
18238     97 1C 48 FB | 	callpa	#(@LR__1912-@LR__1911)>>2,fcache_load_ptr_
1823c                 | LR__1911
1823c     10 23 02 F6 | 	mov	local03, local02
18240     01 22 66 F0 | 	shl	local03, #1
18244     F2 22 02 F1 | 	add	local03, objptr
18248     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1824c     10 12 06 F1 | 	add	arg01, #16
18250     10 FB 01 F6 | 	mov	result1, local02
18254     01 FA 65 F0 | 	shl	result1, #1
18258     FD 12 02 F1 | 	add	arg01, result1
1825c     09 FB E1 FA | 	rdword	result1, arg01
18260     11 FB 51 FC | 	wrword	result1, local03
18264     01 20 06 F1 | 	add	local02, #1
18268     02 00 00 FF 
1826c     00 20 56 F2 | 	cmps	local02, ##1024 wc
18270     C8 FF 9F CD |  if_b	jmp	#LR__1911
18274                 | LR__1912
18274                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
18274     00 20 06 F6 | 	mov	local02, #0
18278     04 00 00 FF 
1827c     00 E4 05 F1 | 	add	objptr, ##2048
18280     04 00 00 FF 
18284     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
18288     97 1C 48 FB | 	callpa	#(@LR__1914-@LR__1913)>>2,fcache_load_ptr_
1828c                 | LR__1913
1828c     10 23 02 F6 | 	mov	local03, local02
18290     01 22 66 F0 | 	shl	local03, #1
18294     F2 22 02 F1 | 	add	local03, objptr
18298     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1829c     10 12 06 F1 | 	add	arg01, #16
182a0     10 FB 01 F6 | 	mov	result1, local02
182a4     01 FA 65 F0 | 	shl	result1, #1
182a8     FD 12 02 F1 | 	add	arg01, result1
182ac     09 FB E1 FA | 	rdword	result1, arg01
182b0     11 FB 51 FC | 	wrword	result1, local03
182b4     01 20 06 F1 | 	add	local02, #1
182b8     02 00 00 FF 
182bc     00 20 56 F2 | 	cmps	local02, ##1024 wc
182c0     C8 FF 9F CD |  if_b	jmp	#LR__1913
182c4                 | LR__1914
182c4     10 00 00 FF 
182c8     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
182cc                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
182cc     00 20 06 F6 | 	mov	local02, #0
182d0     04 00 00 FF 
182d4     00 E4 05 F1 | 	add	objptr, ##2048
182d8     97 18 48 FB | 	callpa	#(@LR__1916-@LR__1915)>>2,fcache_load_ptr_
182dc                 | LR__1915
182dc     10 23 02 F6 | 	mov	local03, local02
182e0     01 22 66 F0 | 	shl	local03, #1
182e4     F2 22 02 F1 | 	add	local03, objptr
182e8     10 27 02 F6 | 	mov	local05, local02
182ec     08 26 66 F0 | 	shl	local05, #8
182f0     7F 00 00 FF 
182f4     00 25 06 F6 | 	mov	local04, ##65280
182f8     13 25 82 F1 | 	sub	local04, local05
182fc     11 25 52 FC | 	wrword	local04, local03
18300     01 20 06 F1 | 	add	local02, #1
18304     00 21 56 F2 | 	cmps	local02, #256 wc
18308     D0 FF 9F CD |  if_b	jmp	#LR__1915
1830c                 | LR__1916
1830c     2C 00 00 FF 
18310     CC E4 85 F1 | 	sub	objptr, ##22732
18314                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
18314     00 20 06 F6 | 	mov	local02, #0
18318                 | LR__1917
18318     10 23 02 F6 | 	mov	local03, local02
1831c     01 22 66 F0 | 	shl	local03, #1
18320     2D 00 00 FF 
18324     CC E4 05 F1 | 	add	objptr, ##23244
18328     F2 22 02 F1 | 	add	local03, objptr
1832c     80 BF 23 FF 
18330     00 12 06 F6 | 	mov	arg01, ##1199505408
18334     0F 15 02 F6 | 	mov	arg02, local01
18338     2D 00 00 FF 
1833c     CC E4 85 F1 | 	sub	objptr, ##23244
18340     14 6B B0 FD | 	call	#__system___float_mul
18344     FD 12 02 F6 | 	mov	arg01, result1
18348     01 14 06 F6 | 	mov	arg02, #1
1834c     D0 6F B0 FD | 	call	#__system___float_tointeger
18350     11 FB 51 FC | 	wrword	result1, local03
18354     0F 13 02 F6 | 	mov	arg01, local01
18358     CC BC 1F FF 
1835c     9A 15 06 F6 | 	mov	arg02, ##1064933786
18360     F4 6A B0 FD | 	call	#__system___float_mul
18364     FD 1E 02 F6 | 	mov	local01, result1
18368     01 20 06 F1 | 	add	local02, #1
1836c     00 21 56 F2 | 	cmps	local02, #256 wc
18370     A4 FF 9F CD |  if_b	jmp	#LR__1917
18374     2E 00 00 FF 
18378     CA E4 05 F1 | 	add	objptr, ##23754
1837c     F2 00 58 FC | 	wrword	#0, objptr
18380                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
18380     00 20 06 F6 | 	mov	local02, #0
18384     02 E4 05 F1 | 	add	objptr, #2
18388     97 10 48 FB | 	callpa	#(@LR__1919-@LR__1918)>>2,fcache_load_ptr_
1838c                 | LR__1918
1838c     10 23 02 F6 | 	mov	local03, local02
18390     01 22 66 F0 | 	shl	local03, #1
18394     F2 22 02 F1 | 	add	local03, objptr
18398     7F 00 80 FF 
1839c     11 01 5A FC | 	wrword	##65280, local03
183a0     01 20 06 F1 | 	add	local02, #1
183a4     FF 20 56 F2 | 	cmps	local02, #255 wc
183a8     E0 FF 9F CD |  if_b	jmp	#LR__1918
183ac                 | LR__1919
183ac     FE E5 05 F1 | 	add	objptr, #510
183b0     F2 00 58 FC | 	wrword	#0, objptr
183b4                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
183b4     00 20 06 F6 | 	mov	local02, #0
183b8     02 E4 05 F1 | 	add	objptr, #2
183bc     97 52 48 FB | 	callpa	#(@LR__1924-@LR__1920)>>2,fcache_load_ptr_
183c0                 | LR__1920
183c0     10 23 02 F6 | 	mov	local03, local02
183c4     01 22 66 F0 | 	shl	local03, #1
183c8     F2 22 02 F1 | 	add	local03, objptr
183cc     10 25 02 F6 | 	mov	local04, local02
183d0     0C 24 66 F0 | 	shl	local04, #12
183d4     11 25 52 FC | 	wrword	local04, local03
183d8     01 20 06 F1 | 	add	local02, #1
183dc     10 20 56 F2 | 	cmps	local02, #16 wc
183e0     DC FF 9F CD |  if_b	jmp	#LR__1920
183e4                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
183e4     10 20 06 F6 | 	mov	local02, #16
183e8                 | LR__1921
183e8     10 23 02 F6 | 	mov	local03, local02
183ec     01 22 66 F0 | 	shl	local03, #1
183f0     F2 22 02 F1 | 	add	local03, objptr
183f4     7F 00 80 FF 
183f8     11 01 5A FC | 	wrword	##65280, local03
183fc     01 20 06 F1 | 	add	local02, #1
18400     F0 20 16 F2 | 	cmp	local02, #240 wc
18404     E0 FF 9F CD |  if_b	jmp	#LR__1921
18408                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
18408     F0 20 06 F6 | 	mov	local02, #240
1840c                 | LR__1922
1840c     10 23 02 F6 | 	mov	local03, local02
18410     01 22 66 F0 | 	shl	local03, #1
18414     F2 22 02 F1 | 	add	local03, objptr
18418     FF 26 06 F6 | 	mov	local05, #255
1841c     10 27 82 F1 | 	sub	local05, local02
18420     0C 26 66 F0 | 	shl	local05, #12
18424     11 27 52 FC | 	wrword	local05, local03
18428     01 20 06 F1 | 	add	local02, #1
1842c     00 21 16 F2 | 	cmp	local02, #256 wc
18430     D8 FF 9F CD |  if_b	jmp	#LR__1922
18434                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
18434     00 20 06 F6 | 	mov	local02, #0
18438     01 00 00 FF 
1843c     00 E4 05 F1 | 	add	objptr, ##512
18440                 | LR__1923
18440     10 23 02 F6 | 	mov	local03, local02
18444     01 22 66 F0 | 	shl	local03, #1
18448     F2 22 02 F1 | 	add	local03, objptr
1844c     10 25 02 F6 | 	mov	local04, local02
18450     08 24 66 F0 | 	shl	local04, #8
18454     11 25 52 FC | 	wrword	local04, local03
18458     01 20 06 F1 | 	add	local02, #1
1845c     00 21 56 F2 | 	cmps	local02, #256 wc
18460     DC FF 9F CD |  if_b	jmp	#LR__1923
18464                 | LR__1924
18464     FE E5 05 F1 | 	add	objptr, #510
18468     F2 00 58 FC | 	wrword	#0, objptr
1846c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1846c     00 20 06 F6 | 	mov	local02, #0
18470     02 E4 05 F1 | 	add	objptr, #2
18474     97 6A 48 FB | 	callpa	#(@LR__1929-@LR__1925)>>2,fcache_load_ptr_
18478                 | LR__1925
18478     10 23 02 F6 | 	mov	local03, local02
1847c     01 22 66 F0 | 	shl	local03, #1
18480     F2 22 02 F1 | 	add	local03, objptr
18484     10 25 02 F6 | 	mov	local04, local02
18488     04 24 66 F0 | 	shl	local04, #4
1848c     10 25 02 F1 | 	add	local04, local02
18490     04 24 66 F0 | 	shl	local04, #4
18494     11 25 52 FC | 	wrword	local04, local03
18498     01 20 06 F1 | 	add	local02, #1
1849c     F0 20 56 F2 | 	cmps	local02, #240 wc
184a0     D4 FF 9F CD |  if_b	jmp	#LR__1925
184a4     F0 20 06 F6 | 	mov	local02, #240
184a8                 | LR__1926
184a8     10 23 02 F6 | 	mov	local03, local02
184ac     01 22 66 F0 | 	shl	local03, #1
184b0     F2 22 02 F1 | 	add	local03, objptr
184b4     FF 26 06 F6 | 	mov	local05, #255
184b8     10 27 82 F1 | 	sub	local05, local02
184bc     0C 26 66 F0 | 	shl	local05, #12
184c0     11 27 52 FC | 	wrword	local05, local03
184c4     01 20 06 F1 | 	add	local02, #1
184c8     00 21 16 F2 | 	cmp	local02, #256 wc
184cc     D8 FF 9F CD |  if_b	jmp	#LR__1926
184d0                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
184d0     00 20 06 F6 | 	mov	local02, #0
184d4     01 00 00 FF 
184d8     00 E4 05 F1 | 	add	objptr, ##512
184dc                 | LR__1927
184dc     10 23 02 F6 | 	mov	local03, local02
184e0     01 22 66 F0 | 	shl	local03, #1
184e4     F2 22 02 F1 | 	add	local03, objptr
184e8     10 25 02 F6 | 	mov	local04, local02
184ec     09 24 66 F0 | 	shl	local04, #9
184f0     11 25 52 FC | 	wrword	local04, local03
184f4     FF 22 06 F6 | 	mov	local03, #255
184f8     10 23 82 F1 | 	sub	local03, local02
184fc     01 22 66 F0 | 	shl	local03, #1
18500     F2 22 02 F1 | 	add	local03, objptr
18504     10 25 02 F6 | 	mov	local04, local02
18508     09 24 66 F0 | 	shl	local04, #9
1850c     11 25 52 FC | 	wrword	local04, local03
18510     01 20 06 F1 | 	add	local02, #1
18514     80 20 56 F2 | 	cmps	local02, #128 wc
18518     C0 FF 9F CD |  if_b	jmp	#LR__1927
1851c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1851c     00 20 06 F6 | 	mov	local02, #0
18520     01 00 00 FF 
18524     00 E4 05 F1 | 	add	objptr, ##512
18528                 | LR__1928
18528     10 23 02 F6 | 	mov	local03, local02
1852c     01 22 66 F0 | 	shl	local03, #1
18530     F2 22 02 F1 | 	add	local03, objptr
18534     10 25 02 F6 | 	mov	local04, local02
18538     0D 24 66 F0 | 	shl	local04, #13
1853c     11 25 52 FC | 	wrword	local04, local03
18540     01 20 06 F1 | 	add	local02, #1
18544     08 20 56 F2 | 	cmps	local02, #8 wc
18548     DC FF 9F CD |  if_b	jmp	#LR__1928
1854c                 | LR__1929
1854c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1854c     08 20 06 F6 | 	mov	local02, #8
18550     97 42 48 FB | 	callpa	#(@LR__1933-@LR__1930)>>2,fcache_load_ptr_
18554                 | LR__1930
18554     10 23 02 F6 | 	mov	local03, local02
18558     01 22 66 F0 | 	shl	local03, #1
1855c     F2 22 02 F1 | 	add	local03, objptr
18560     10 1F 02 F6 | 	mov	local01, local02
18564     08 1E 86 F1 | 	sub	local01, #8
18568     0B 1E 66 F0 | 	shl	local01, #11
1856c     7F 00 00 FF 
18570     00 25 06 F6 | 	mov	local04, ##65280
18574     0F 25 82 F1 | 	sub	local04, local01
18578     11 25 52 FC | 	wrword	local04, local03
1857c     01 20 06 F1 | 	add	local02, #1
18580     18 20 16 F2 | 	cmp	local02, #24 wc
18584     CC FF 9F CD |  if_b	jmp	#LR__1930
18588                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
18588     18 20 06 F6 | 	mov	local02, #24
1858c                 | LR__1931
1858c     10 23 02 F6 | 	mov	local03, local02
18590     01 22 66 F0 | 	shl	local03, #1
18594     F2 22 02 F1 | 	add	local03, objptr
18598     40 00 80 FF 
1859c     11 01 58 FC | 	wrword	##32768, local03
185a0     01 20 06 F1 | 	add	local02, #1
185a4     81 20 16 F2 | 	cmp	local02, #129 wc
185a8     E0 FF 9F CD |  if_b	jmp	#LR__1931
185ac                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
185ac     81 20 06 F6 | 	mov	local02, #129
185b0                 | LR__1932
185b0     10 23 02 F6 | 	mov	local03, local02
185b4     01 22 66 F0 | 	shl	local03, #1
185b8     F2 22 02 F1 | 	add	local03, objptr
185bc     FF 26 06 F6 | 	mov	local05, #255
185c0     10 27 82 F1 | 	sub	local05, local02
185c4     08 26 66 F0 | 	shl	local05, #8
185c8     11 27 52 FC | 	wrword	local05, local03
185cc     01 20 06 F1 | 	add	local02, #1
185d0     00 21 16 F2 | 	cmp	local02, #256 wc
185d4     D8 FF 9F CD |  if_b	jmp	#LR__1932
185d8                 | LR__1933
185d8     47 00 00 FF 
185dc     BA E5 05 F1 | 	add	objptr, ##36794
185e0     F2 00 59 FC | 	wrword	#128, objptr
185e4     7B 00 00 FF 
185e8     86 E4 85 F1 | 	sub	objptr, ##63110
185ec                 | ' for i=0 to 7
185ec     00 20 06 F6 | 	mov	local02, #0
185f0     97 8E 48 FB | 	callpa	#(@LR__1935-@LR__1934)>>2,fcache_load_ptr_
185f4                 | LR__1934
185f4     10 23 02 F6 | 	mov	local03, local02
185f8     01 22 66 F0 | 	shl	local03, #1
185fc     10 23 02 F1 | 	add	local03, local02
18600     03 22 66 F0 | 	shl	local03, #3
18604     34 00 00 FF 
18608     2C E5 05 F1 | 	add	objptr, ##26924
1860c     F2 22 02 F1 | 	add	local03, objptr
18610     00 EE A1 FF 
18614     11 01 68 FC | 	wrlong	##1138491392, local03
18618     10 23 02 F6 | 	mov	local03, local02
1861c     01 22 66 F0 | 	shl	local03, #1
18620     10 23 02 F1 | 	add	local03, local02
18624     03 22 66 F0 | 	shl	local03, #3
18628     F2 22 02 F1 | 	add	local03, objptr
1862c     04 22 06 F1 | 	add	local03, #4
18630     11 21 42 FC | 	wrbyte	local02, local03
18634     10 23 02 F6 | 	mov	local03, local02
18638     01 22 66 F0 | 	shl	local03, #1
1863c     10 23 02 F1 | 	add	local03, local02
18640     03 22 66 F0 | 	shl	local03, #3
18644     F2 22 02 F1 | 	add	local03, objptr
18648     05 22 06 F1 | 	add	local03, #5
1864c     11 21 42 FC | 	wrbyte	local02, local03
18650     10 23 02 F6 | 	mov	local03, local02
18654     01 22 66 F0 | 	shl	local03, #1
18658     10 23 02 F1 | 	add	local03, local02
1865c     03 22 66 F0 | 	shl	local03, #3
18660     F2 22 02 F1 | 	add	local03, objptr
18664     06 22 06 F1 | 	add	local03, #6
18668     11 01 58 FC | 	wrword	#0, local03
1866c     10 23 02 F6 | 	mov	local03, local02
18670     01 22 66 F0 | 	shl	local03, #1
18674     10 23 02 F1 | 	add	local03, local02
18678     03 22 66 F0 | 	shl	local03, #3
1867c     F2 22 02 F1 | 	add	local03, objptr
18680     08 22 06 F1 | 	add	local03, #8
18684     00 C0 9F FF 
18688     11 01 68 FC | 	wrlong	##1065353216, local03
1868c     10 23 02 F6 | 	mov	local03, local02
18690     01 22 66 F0 | 	shl	local03, #1
18694     10 23 02 F1 | 	add	local03, local02
18698     03 22 66 F0 | 	shl	local03, #3
1869c     F2 22 02 F1 | 	add	local03, objptr
186a0     0C 22 06 F1 | 	add	local03, #12
186a4     00 40 A0 FF 
186a8     11 01 68 FC | 	wrlong	##1082130432, local03
186ac     10 23 02 F6 | 	mov	local03, local02
186b0     01 22 66 F0 | 	shl	local03, #1
186b4     10 23 02 F1 | 	add	local03, local02
186b8     03 22 66 F0 | 	shl	local03, #3
186bc     F2 22 02 F1 | 	add	local03, objptr
186c0     10 22 06 F1 | 	add	local03, #16
186c4     11 01 68 FC | 	wrlong	#0, local03
186c8     10 23 02 F6 | 	mov	local03, local02
186cc     01 22 66 F0 | 	shl	local03, #1
186d0     10 23 02 F1 | 	add	local03, local02
186d4     03 22 66 F0 | 	shl	local03, #3
186d8     F2 22 02 F1 | 	add	local03, objptr
186dc     14 22 06 F1 | 	add	local03, #20
186e0     11 FF 59 FC | 	wrword	#255, local03
186e4     10 23 02 F6 | 	mov	local03, local02
186e8     01 22 66 F0 | 	shl	local03, #1
186ec     46 00 00 FF 
186f0     4C E5 05 F1 | 	add	objptr, ##36172
186f4     F2 22 02 F1 | 	add	local03, objptr
186f8     11 FF 59 FC | 	wrword	#255, local03
186fc     01 20 06 F1 | 	add	local02, #1
18700     08 20 56 F2 | 	cmps	local02, #8 wc
18704     7B 00 00 FF 
18708     78 E4 85 F1 | 	sub	objptr, ##63096
1870c     E4 FE 9F CD |  if_b	jmp	#LR__1934
18710                 | LR__1935
18710     00 6E 20 FF 
18714     00 1E 06 F6 | 	mov	local01, ##1088159744
18718                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
18718     03 26 06 F6 | 	mov	local05, #3
1871c                 | LR__1936
1871c     0F 13 02 F6 | 	mov	arg01, local01
18720     CE C3 1F FF 
18724     7D 14 06 F6 | 	mov	arg02, ##1065852029
18728     2C 67 B0 FD | 	call	#__system___float_mul
1872c     FD 1E 02 F6 | 	mov	local01, result1
18730     FA 27 6E FB | 	djnz	local05, #LR__1936
18734     00 20 06 F6 | 	mov	local02, #0
18738                 | LR__1937
18738     10 27 02 F6 | 	mov	local05, local02
1873c     02 26 66 F0 | 	shl	local05, #2
18740     34 00 00 FF 
18744     CC E4 05 F1 | 	add	objptr, ##26828
18748     F2 26 02 F1 | 	add	local05, objptr
1874c     13 1F 62 FC | 	wrlong	local01, local05
18750     0F 13 02 F6 | 	mov	arg01, local01
18754     CE C3 1F FF 
18758     7D 14 06 F6 | 	mov	arg02, ##1065852029
1875c     34 00 00 FF 
18760     CC E4 85 F1 | 	sub	objptr, ##26828
18764     F0 66 B0 FD | 	call	#__system___float_mul
18768     FD 1E 02 F6 | 	mov	local01, result1
1876c     01 20 06 F1 | 	add	local02, #1
18770     0C 20 56 F2 | 	cmps	local02, #12 wc
18774     C0 FF 9F CD |  if_b	jmp	#LR__1937
18778     7B 00 00 FF 
1877c     86 E4 05 F1 | 	add	objptr, ##63110
18780     F2 00 59 FC | 	wrword	#128, objptr
18784     02 E4 85 F1 | 	sub	objptr, #2
18788     F2 00 59 FC | 	wrword	#128, objptr
1878c     7B 00 00 FF 
18790     84 E4 85 F1 | 	sub	objptr, ##63108
18794     A7 F0 03 F6 | 	mov	ptra, fp
18798     B2 00 A0 FD | 	call	#popregs_
1879c                 | _init_audio_ret
1879c     2D 00 64 FD | 	ret
187a0                 | 
187a0                 | ' 
187a0                 | ' 
187a0                 | ' function getnoteval(token) as single
187a0                 | _getnoteval
187a0     02 4A 05 F6 | 	mov	COUNT_, #2
187a4     A8 00 A0 FD | 	call	#pushregs_
187a8     01 00 00 FF 
187ac     00 13 86 F1 | 	sub	arg01, ##768
187b0     09 15 52 F6 | 	abs	arg02, arg01 wc
187b4     0C 14 16 FD | 	qdiv	arg02, #12
187b8     34 00 00 FF 
187bc     CC E4 05 F1 | 	add	objptr, ##26828
187c0     19 14 62 FD | 	getqy	arg02
187c4     0A 15 82 F6 | 	negc	arg02, arg02
187c8     02 14 66 F0 | 	shl	arg02, #2
187cc     F2 14 02 F1 | 	add	arg02, objptr
187d0     0A 1F 02 FB | 	rdlong	local01, arg02
187d4     09 15 52 F6 | 	abs	arg02, arg01 wc
187d8     0C 14 16 FD | 	qdiv	arg02, #12
187dc     34 00 00 FF 
187e0     CC E4 85 F1 | 	sub	objptr, ##26828
187e4     01 12 06 F6 | 	mov	arg01, #1
187e8                 | ' noteexp=1+(note/12) 
187e8                 | ' return (2.0^noteexp)*notebase
187e8     18 14 62 FD | 	getqx	arg02
187ec     0A 13 82 F3 | 	sumc	arg01, arg02
187f0     09 13 52 F6 | 	abs	arg01, arg01 wc
187f4     1F 20 C6 C9 |  if_b	decod	local02, #31
187f8     00 20 06 36 |  if_ae	mov	local02, #0
187fc     54 62 B0 FD | 	call	#__system___float_fromuns
18800     10 FB 61 F5 | 	xor	result1, local02
18804     FD 14 02 F6 | 	mov	arg02, result1
18808     1E 12 C6 F9 | 	decod	arg01, #30
1880c     2C 75 B0 FD | 	call	#__system____builtin_powf
18810     FD 12 02 F6 | 	mov	arg01, result1
18814     0F 15 02 F6 | 	mov	arg02, local01
18818     3C 66 B0 FD | 	call	#__system___float_mul
1881c     A7 F0 03 F6 | 	mov	ptra, fp
18820     B2 00 A0 FD | 	call	#popregs_
18824                 | _getnoteval_ret
18824     2D 00 64 FD | 	ret
18828                 | 
18828                 | ' 
18828                 | ' 
18828                 | ' 
18828                 | ' sub init_error_strings
18828                 | _init_error_strings
18828     5F 01 00 FF 
1882c     C7 01 06 F6 | 	mov	_var01, ##@LR__4964
18830     65 00 00 FF 
18834     60 E4 05 F1 | 	add	objptr, ##51808
18838     F2 00 62 FC | 	wrlong	_var01, objptr
1883c     5F 01 00 FF 
18840     C8 01 06 F6 | 	mov	_var01, ##@LR__4965
18844     04 E4 05 F1 | 	add	objptr, #4
18848     F2 00 62 FC | 	wrlong	_var01, objptr
1884c     5F 01 00 FF 
18850     ED 01 06 F6 | 	mov	_var01, ##@LR__4966
18854     04 E4 05 F1 | 	add	objptr, #4
18858     F2 00 62 FC | 	wrlong	_var01, objptr
1885c     60 01 00 FF 
18860     0E 00 06 F6 | 	mov	_var01, ##@LR__4967
18864     04 E4 05 F1 | 	add	objptr, #4
18868     F2 00 62 FC | 	wrlong	_var01, objptr
1886c     60 01 00 FF 
18870     28 00 06 F6 | 	mov	_var01, ##@LR__4968
18874     04 E4 05 F1 | 	add	objptr, #4
18878     F2 00 62 FC | 	wrlong	_var01, objptr
1887c     60 01 00 FF 
18880     44 00 06 F6 | 	mov	_var01, ##@LR__4969
18884     04 E4 05 F1 | 	add	objptr, #4
18888     F2 00 62 FC | 	wrlong	_var01, objptr
1888c     60 01 00 FF 
18890     66 00 06 F6 | 	mov	_var01, ##@LR__4970
18894     04 E4 05 F1 | 	add	objptr, #4
18898     F2 00 62 FC | 	wrlong	_var01, objptr
1889c     60 01 00 FF 
188a0     94 00 06 F6 | 	mov	_var01, ##@LR__4971
188a4     04 E4 05 F1 | 	add	objptr, #4
188a8     F2 00 62 FC | 	wrlong	_var01, objptr
188ac     60 01 00 FF 
188b0     BF 00 06 F6 | 	mov	_var01, ##@LR__4972
188b4     04 E4 05 F1 | 	add	objptr, #4
188b8     F2 00 62 FC | 	wrlong	_var01, objptr
188bc     60 01 00 FF 
188c0     D8 00 06 F6 | 	mov	_var01, ##@LR__4973
188c4     04 E4 05 F1 | 	add	objptr, #4
188c8     F2 00 62 FC | 	wrlong	_var01, objptr
188cc     60 01 00 FF 
188d0     F9 00 06 F6 | 	mov	_var01, ##@LR__4974
188d4     04 E4 05 F1 | 	add	objptr, #4
188d8     F2 00 62 FC | 	wrlong	_var01, objptr
188dc     60 01 00 FF 
188e0     10 01 06 F6 | 	mov	_var01, ##@LR__4975
188e4     04 E4 05 F1 | 	add	objptr, #4
188e8     F2 00 62 FC | 	wrlong	_var01, objptr
188ec     60 01 00 FF 
188f0     2E 01 06 F6 | 	mov	_var01, ##@LR__4976
188f4     04 E4 05 F1 | 	add	objptr, #4
188f8     F2 00 62 FC | 	wrlong	_var01, objptr
188fc     60 01 00 FF 
18900     52 01 06 F6 | 	mov	_var01, ##@LR__4977
18904     04 E4 05 F1 | 	add	objptr, #4
18908     F2 00 62 FC | 	wrlong	_var01, objptr
1890c     60 01 00 FF 
18910     79 01 06 F6 | 	mov	_var01, ##@LR__4978
18914     04 E4 05 F1 | 	add	objptr, #4
18918     F2 00 62 FC | 	wrlong	_var01, objptr
1891c     60 01 00 FF 
18920     95 01 06 F6 | 	mov	_var01, ##@LR__4979
18924     04 E4 05 F1 | 	add	objptr, #4
18928     F2 00 62 FC | 	wrlong	_var01, objptr
1892c     60 01 00 FF 
18930     A6 01 06 F6 | 	mov	_var01, ##@LR__4980
18934     04 E4 05 F1 | 	add	objptr, #4
18938     F2 00 62 FC | 	wrlong	_var01, objptr
1893c     60 01 00 FF 
18940     B6 01 06 F6 | 	mov	_var01, ##@LR__4981
18944     04 E4 05 F1 | 	add	objptr, #4
18948     F2 00 62 FC | 	wrlong	_var01, objptr
1894c     60 01 00 FF 
18950     D1 01 06 F6 | 	mov	_var01, ##@LR__4982
18954     04 E4 05 F1 | 	add	objptr, #4
18958     F2 00 62 FC | 	wrlong	_var01, objptr
1895c     60 01 00 FF 
18960     E3 01 06 F6 | 	mov	_var01, ##@LR__4983
18964     04 E4 05 F1 | 	add	objptr, #4
18968     F2 00 62 FC | 	wrlong	_var01, objptr
1896c     60 01 00 FF 
18970     FB 01 06 F6 | 	mov	_var01, ##@LR__4984
18974     04 E4 05 F1 | 	add	objptr, #4
18978     F2 00 62 FC | 	wrlong	_var01, objptr
1897c     61 01 00 FF 
18980     0F 00 06 F6 | 	mov	_var01, ##@LR__4985
18984     04 E4 05 F1 | 	add	objptr, #4
18988     F2 00 62 FC | 	wrlong	_var01, objptr
1898c     61 01 00 FF 
18990     1F 00 06 F6 | 	mov	_var01, ##@LR__4986
18994     04 E4 05 F1 | 	add	objptr, #4
18998     F2 00 62 FC | 	wrlong	_var01, objptr
1899c     61 01 00 FF 
189a0     3C 00 06 F6 | 	mov	_var01, ##@LR__4987
189a4     04 E4 05 F1 | 	add	objptr, #4
189a8     F2 00 62 FC | 	wrlong	_var01, objptr
189ac     61 01 00 FF 
189b0     4D 00 06 F6 | 	mov	_var01, ##@LR__4988
189b4     04 E4 05 F1 | 	add	objptr, #4
189b8     F2 00 62 FC | 	wrlong	_var01, objptr
189bc     61 01 00 FF 
189c0     5E 00 06 F6 | 	mov	_var01, ##@LR__4989
189c4     04 E4 05 F1 | 	add	objptr, #4
189c8     F2 00 62 FC | 	wrlong	_var01, objptr
189cc     61 01 00 FF 
189d0     89 00 06 F6 | 	mov	_var01, ##@LR__4990
189d4     04 E4 05 F1 | 	add	objptr, #4
189d8     F2 00 62 FC | 	wrlong	_var01, objptr
189dc     61 01 00 FF 
189e0     A5 00 06 F6 | 	mov	_var01, ##@LR__4991
189e4     04 E4 05 F1 | 	add	objptr, #4
189e8     F2 00 62 FC | 	wrlong	_var01, objptr
189ec     61 01 00 FF 
189f0     BB 00 06 F6 | 	mov	_var01, ##@LR__4992
189f4     04 E4 05 F1 | 	add	objptr, #4
189f8     F2 00 62 FC | 	wrlong	_var01, objptr
189fc     61 01 00 FF 
18a00     C8 00 06 F6 | 	mov	_var01, ##@LR__4993
18a04     04 E4 05 F1 | 	add	objptr, #4
18a08     F2 00 62 FC | 	wrlong	_var01, objptr
18a0c     61 01 00 FF 
18a10     DA 00 06 F6 | 	mov	_var01, ##@LR__4994
18a14     04 E4 05 F1 | 	add	objptr, #4
18a18     F2 00 62 FC | 	wrlong	_var01, objptr
18a1c     61 01 00 FF 
18a20     EB 00 06 F6 | 	mov	_var01, ##@LR__4995
18a24     04 E4 05 F1 | 	add	objptr, #4
18a28     F2 00 62 FC | 	wrlong	_var01, objptr
18a2c     61 01 00 FF 
18a30     07 01 06 F6 | 	mov	_var01, ##@LR__4996
18a34     04 E4 05 F1 | 	add	objptr, #4
18a38     F2 00 62 FC | 	wrlong	_var01, objptr
18a3c     61 01 00 FF 
18a40     18 01 06 F6 | 	mov	_var01, ##@LR__4997
18a44     04 E4 05 F1 | 	add	objptr, #4
18a48     F2 00 62 FC | 	wrlong	_var01, objptr
18a4c     61 01 00 FF 
18a50     27 01 06 F6 | 	mov	_var01, ##@LR__4998
18a54     04 E4 05 F1 | 	add	objptr, #4
18a58     F2 00 62 FC | 	wrlong	_var01, objptr
18a5c     61 01 00 FF 
18a60     42 01 06 F6 | 	mov	_var01, ##@LR__4999
18a64     04 E4 05 F1 | 	add	objptr, #4
18a68     F2 00 62 FC | 	wrlong	_var01, objptr
18a6c     61 01 00 FF 
18a70     76 01 06 F6 | 	mov	_var01, ##@LR__5000
18a74     04 E4 05 F1 | 	add	objptr, #4
18a78     F2 00 62 FC | 	wrlong	_var01, objptr
18a7c     61 01 00 FF 
18a80     8F 01 06 F6 | 	mov	_var01, ##@LR__5001
18a84     04 E4 05 F1 | 	add	objptr, #4
18a88     F2 00 62 FC | 	wrlong	_var01, objptr
18a8c     61 01 00 FF 
18a90     AB 01 06 F6 | 	mov	_var01, ##@LR__5002
18a94     04 E4 05 F1 | 	add	objptr, #4
18a98     F2 00 62 FC | 	wrlong	_var01, objptr
18a9c     61 01 00 FF 
18aa0     C9 01 06 F6 | 	mov	_var01, ##@LR__5003
18aa4     04 E4 05 F1 | 	add	objptr, #4
18aa8     F2 00 62 FC | 	wrlong	_var01, objptr
18aac     61 01 00 FF 
18ab0     E2 01 06 F6 | 	mov	_var01, ##@LR__5004
18ab4     04 E4 05 F1 | 	add	objptr, #4
18ab8     F2 00 62 FC | 	wrlong	_var01, objptr
18abc     62 01 00 FF 
18ac0     01 00 06 F6 | 	mov	_var01, ##@LR__5005
18ac4     04 E4 05 F1 | 	add	objptr, #4
18ac8     F2 00 62 FC | 	wrlong	_var01, objptr
18acc     62 01 00 FF 
18ad0     10 00 06 F6 | 	mov	_var01, ##@LR__5006
18ad4     04 E4 05 F1 | 	add	objptr, #4
18ad8     F2 00 62 FC | 	wrlong	_var01, objptr
18adc     62 01 00 FF 
18ae0     3E 00 06 F6 | 	mov	_var01, ##@LR__5007
18ae4     04 E4 05 F1 | 	add	objptr, #4
18ae8     F2 00 62 FC | 	wrlong	_var01, objptr
18aec     62 01 00 FF 
18af0     4C 00 06 F6 | 	mov	_var01, ##@LR__5008
18af4     04 E4 05 F1 | 	add	objptr, #4
18af8     F2 00 62 FC | 	wrlong	_var01, objptr
18afc     62 01 00 FF 
18b00     61 00 06 F6 | 	mov	_var01, ##@LR__5009
18b04     04 E4 05 F1 | 	add	objptr, #4
18b08     F2 00 62 FC | 	wrlong	_var01, objptr
18b0c     62 01 00 FF 
18b10     85 00 06 F6 | 	mov	_var01, ##@LR__5010
18b14     04 E4 05 F1 | 	add	objptr, #4
18b18     F2 00 62 FC | 	wrlong	_var01, objptr
18b1c     62 01 00 FF 
18b20     9C 00 06 F6 | 	mov	_var01, ##@LR__5011
18b24     04 E4 05 F1 | 	add	objptr, #4
18b28     F2 00 62 FC | 	wrlong	_var01, objptr
18b2c     62 01 00 FF 
18b30     AF 00 06 F6 | 	mov	_var01, ##@LR__5012
18b34     04 E4 05 F1 | 	add	objptr, #4
18b38     F2 00 62 FC | 	wrlong	_var01, objptr
18b3c     62 01 00 FF 
18b40     C6 00 06 F6 | 	mov	_var01, ##@LR__5013
18b44     04 E4 05 F1 | 	add	objptr, #4
18b48     F2 00 62 FC | 	wrlong	_var01, objptr
18b4c     65 00 00 FF 
18b50     24 E5 85 F1 | 	sub	objptr, ##52004
18b54                 | _init_error_strings_ret
18b54     2D 00 64 FD | 	ret
18b58                 | 
18b58                 | '         
18b58                 | ' sub printerror(err as integer)
18b58                 | _printerror
18b58     01 4A 05 F6 | 	mov	COUNT_, #1
18b5c     A8 00 A0 FD | 	call	#pushregs_
18b60     09 1F 02 F6 | 	mov	local01, arg01
18b64     62 01 00 FF 
18b68     DF 12 06 F6 | 	mov	arg01, ##@LR__5014
18b6c     30 26 B0 FD | 	call	#_hg010b_spin2_write
18b70     0F 13 02 F6 | 	mov	arg01, local01
18b74     28 28 B0 FD | 	call	#_hg010b_spin2_inttostr
18b78     FD 12 02 F6 | 	mov	arg01, result1
18b7c     20 26 B0 FD | 	call	#_hg010b_spin2_write
18b80     62 01 00 FF 
18b84     E6 12 06 F6 | 	mov	arg01, ##@LR__5015
18b88     14 26 B0 FD | 	call	#_hg010b_spin2_write
18b8c     02 1E 66 F0 | 	shl	local01, #2
18b90     65 00 00 FF 
18b94     60 E4 05 F1 | 	add	objptr, ##51808
18b98     F2 1E 02 F1 | 	add	local01, objptr
18b9c     0F 13 02 FB | 	rdlong	arg01, local01
18ba0     65 00 00 FF 
18ba4     60 E4 85 F1 | 	sub	objptr, ##51808
18ba8                 | ' 
18ba8                 | ' write(text)
18ba8     F4 25 B0 FD | 	call	#_hg010b_spin2_write
18bac                 | ' crlf
18bac     50 27 B0 FD | 	call	#_hg010b_spin2_crlf
18bb0     A7 F0 03 F6 | 	mov	ptra, fp
18bb4     B2 00 A0 FD | 	call	#popregs_
18bb8                 | _printerror_ret
18bb8     2D 00 64 FD | 	ret
18bbc                 | 
18bbc                 | ' 
18bbc                 | ' '' ------------------------------- Hardware start/stop/initialization 
18bbc                 | ' 
18bbc                 | ' sub startpsram
18bbc                 | _startpsram
18bbc     00 12 06 F6 | 	mov	arg01, #0
18bc0     0A 14 C6 F9 | 	decod	arg02, #10
18bc4     0B 16 06 F6 | 	mov	arg03, #11
18bc8     07 18 06 F6 | 	mov	arg04, #7
18bcc     0B 00 00 FF 
18bd0     C0 E4 05 F1 | 	add	objptr, ##5824
18bd4     D4 28 B0 FD | 	call	#_psram_spin2_startx
18bd8     4B 00 00 FF 
18bdc     2C E5 05 F1 | 	add	objptr, ##38700
18be0     F2 FA 61 FC | 	wrlong	result1, objptr
18be4                 | '     return $7FF00 + cog*12
18be4     0C E4 05 F1 | 	add	objptr, #12
18be8     FF 03 80 FF 
18bec     F2 00 6A FC | 	wrlong	##524032, objptr
18bf0     56 00 00 FF 
18bf4     F8 E5 85 F1 | 	sub	objptr, ##44536
18bf8                 | _startpsram_ret
18bf8     2D 00 64 FD | 	ret
18bfc                 | 
18bfc                 | ' 
18bfc                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
18bfc                 | _startvideo
18bfc     01 4A 05 F6 | 	mov	COUNT_, #1
18c00     A8 00 A0 FD | 	call	#pushregs_
18c04     56 00 00 FF 
18c08     F8 E5 05 F1 | 	add	objptr, ##44536
18c0c     F2 18 02 FB | 	rdlong	arg04, objptr
18c10     56 00 00 FF 
18c14     F8 E5 85 F1 | 	sub	objptr, ##44536
18c18     0A 13 02 F6 | 	mov	arg01, arg02
18c1c     0C 15 02 F6 | 	mov	arg02, arg04
18c20     9C 10 B0 FD | 	call	#_hg010b_spin2_start
18c24     56 00 00 FF 
18c28     E4 E5 05 F1 | 	add	objptr, ##44516
18c2c     F2 FA 61 FC | 	wrlong	result1, objptr
18c30                 | ' 
18c30                 | ' videocog=v.start(pin,mbox)
18c30                 | ' 
18c30                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
18c30     00 1E 06 F6 | 	mov	local01, #0
18c34     4B 00 00 FF 
18c38     24 E5 85 F1 | 	sub	objptr, ##38692
18c3c                 | LR__1940
18c3c     0F 13 02 F6 | 	mov	arg01, local01
18c40     00 28 00 FF 
18c44     00 14 06 F6 | 	mov	arg02, ##5242880
18c48     B8 2C B0 FD | 	call	#_psram_spin2_setQos
18c4c     01 1E 06 F1 | 	add	local01, #1
18c50     08 1E 56 F2 | 	cmps	local01, #8 wc
18c54     E4 FF 9F CD |  if_b	jmp	#LR__1940
18c58     4B 00 00 FF 
18c5c     24 E5 05 F1 | 	add	objptr, ##38692
18c60     F2 12 02 FB | 	rdlong	arg01, objptr
18c64     7A 00 02 FF 
18c68     00 14 06 F6 | 	mov	arg02, ##67171328
18c6c     4B 00 00 FF 
18c70     24 E5 85 F1 | 	sub	objptr, ##38692
18c74     8C 2C B0 FD | 	call	#_psram_spin2_setQos
18c78     0B 00 00 FF 
18c7c     C0 E4 85 F1 | 	sub	objptr, ##5824
18c80                 | ' psram.setQoS(videocog, $0400f400) 
18c80                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
18c80     F2 14 02 F6 | 	mov	arg02, objptr
18c84     00 B8 03 FF 
18c88     00 14 46 F5 | 	or	arg02, ##124780544
18c8c     00 16 06 F6 | 	mov	arg03, #0
18c90     00 18 06 F6 | 	mov	arg04, #0
18c94     00 12 06 F6 | 	mov	arg01, #0
18c98     E8 40 B0 FD | 	call	#__system___basic_open
18c9c                 | ' return videocog
18c9c     56 00 00 FF 
18ca0     E4 E5 05 F1 | 	add	objptr, ##44516
18ca4     F2 FA 01 FB | 	rdlong	result1, objptr
18ca8     56 00 00 FF 
18cac     E4 E5 85 F1 | 	sub	objptr, ##44516
18cb0     A7 F0 03 F6 | 	mov	ptra, fp
18cb4     B2 00 A0 FD | 	call	#popregs_
18cb8                 | _startvideo_ret
18cb8     2D 00 64 FD | 	ret
18cbc                 | 
18cbc                 | ' 
18cbc                 | ' 
18cbc                 | ' 
18cbc                 | ' 
18cbc                 | ' '' ------------------------------- Convenient psram peek/poke
18cbc                 | ' 
18cbc                 | ' sub pslpoke(addr as ulong,value as ulong)
18cbc                 | _pslpoke
18cbc     00 4A 05 F6 | 	mov	COUNT_, #0
18cc0     A8 00 A0 FD | 	call	#pushregs_
18cc4     08 F0 07 F1 | 	add	ptra, #8
18cc8     A7 12 62 FC | 	wrlong	arg01, fp
18ccc     04 4E 05 F1 | 	add	fp, #4
18cd0     A7 14 62 FC | 	wrlong	arg02, fp
18cd4     A7 12 02 F6 | 	mov	arg01, fp
18cd8     04 4E 85 F1 | 	sub	fp, #4
18cdc     A7 14 02 FB | 	rdlong	arg02, fp
18ce0     04 16 06 F6 | 	mov	arg03, #4
18ce4     0B 00 00 FF 
18ce8     C0 E4 05 F1 | 	add	objptr, ##5824
18cec     84 2A B0 FD | 	call	#_psram_spin2_write
18cf0     0B 00 00 FF 
18cf4     C0 E4 85 F1 | 	sub	objptr, ##5824
18cf8     A7 F0 03 F6 | 	mov	ptra, fp
18cfc     B2 00 A0 FD | 	call	#popregs_
18d00                 | _pslpoke_ret
18d00     2D 00 64 FD | 	ret
18d04                 | 
18d04                 | ' 
18d04                 | ' sub psdpoke(addr as ulong,value as ulong)
18d04                 | _psdpoke
18d04     00 4A 05 F6 | 	mov	COUNT_, #0
18d08     A8 00 A0 FD | 	call	#pushregs_
18d0c     08 F0 07 F1 | 	add	ptra, #8
18d10     A7 12 62 FC | 	wrlong	arg01, fp
18d14     04 4E 05 F1 | 	add	fp, #4
18d18     A7 14 62 FC | 	wrlong	arg02, fp
18d1c     A7 12 02 F6 | 	mov	arg01, fp
18d20     04 4E 85 F1 | 	sub	fp, #4
18d24     A7 14 02 FB | 	rdlong	arg02, fp
18d28     02 16 06 F6 | 	mov	arg03, #2
18d2c     0B 00 00 FF 
18d30     C0 E4 05 F1 | 	add	objptr, ##5824
18d34     3C 2A B0 FD | 	call	#_psram_spin2_write
18d38     0B 00 00 FF 
18d3c     C0 E4 85 F1 | 	sub	objptr, ##5824
18d40     A7 F0 03 F6 | 	mov	ptra, fp
18d44     B2 00 A0 FD | 	call	#popregs_
18d48                 | _psdpoke_ret
18d48     2D 00 64 FD | 	ret
18d4c                 | 
18d4c                 | ' 
18d4c                 | ' sub pspoke(addr as ulong,value as ulong)
18d4c                 | _pspoke
18d4c     00 4A 05 F6 | 	mov	COUNT_, #0
18d50     A8 00 A0 FD | 	call	#pushregs_
18d54     08 F0 07 F1 | 	add	ptra, #8
18d58     A7 12 62 FC | 	wrlong	arg01, fp
18d5c     04 4E 05 F1 | 	add	fp, #4
18d60     A7 14 62 FC | 	wrlong	arg02, fp
18d64     A7 12 02 F6 | 	mov	arg01, fp
18d68     04 4E 85 F1 | 	sub	fp, #4
18d6c     A7 14 02 FB | 	rdlong	arg02, fp
18d70     01 16 06 F6 | 	mov	arg03, #1
18d74     0B 00 00 FF 
18d78     C0 E4 05 F1 | 	add	objptr, ##5824
18d7c     F4 29 B0 FD | 	call	#_psram_spin2_write
18d80     0B 00 00 FF 
18d84     C0 E4 85 F1 | 	sub	objptr, ##5824
18d88     A7 F0 03 F6 | 	mov	ptra, fp
18d8c     B2 00 A0 FD | 	call	#popregs_
18d90                 | _pspoke_ret
18d90     2D 00 64 FD | 	ret
18d94                 | 
18d94                 | ' 
18d94                 | ' function pspeek(adr as ulong) as ubyte
18d94                 | _pspeek
18d94     00 4A 05 F6 | 	mov	COUNT_, #0
18d98     A8 00 A0 FD | 	call	#pushregs_
18d9c     0C F0 07 F1 | 	add	ptra, #12
18da0     04 4E 05 F1 | 	add	fp, #4
18da4     A7 12 62 FC | 	wrlong	arg01, fp
18da8     04 4E 05 F1 | 	add	fp, #4
18dac     A7 12 02 F6 | 	mov	arg01, fp
18db0     04 4E 85 F1 | 	sub	fp, #4
18db4     A7 14 02 FB | 	rdlong	arg02, fp
18db8     04 4E 85 F1 | 	sub	fp, #4
18dbc     01 16 06 F6 | 	mov	arg03, #1
18dc0     0B 00 00 FF 
18dc4     C0 E4 05 F1 | 	add	objptr, ##5824
18dc8     0C 29 B0 FD | 	call	#_psram_spin2_read1
18dcc     0B 00 00 FF 
18dd0     C0 E4 85 F1 | 	sub	objptr, ##5824
18dd4                 | ' psram.read1(varptr(res),adr,1)
18dd4                 | ' return res
18dd4     08 4E 05 F1 | 	add	fp, #8
18dd8     A7 FA C1 FA | 	rdbyte	result1, fp
18ddc     08 4E 85 F1 | 	sub	fp, #8
18de0     A7 F0 03 F6 | 	mov	ptra, fp
18de4     B2 00 A0 FD | 	call	#popregs_
18de8                 | _pspeek_ret
18de8     2D 00 64 FD | 	ret
18dec                 | 
18dec                 | ' 
18dec                 | ' function pslpeek(adr as ulong) as ulong
18dec                 | _pslpeek
18dec     00 4A 05 F6 | 	mov	COUNT_, #0
18df0     A8 00 A0 FD | 	call	#pushregs_
18df4     0C F0 07 F1 | 	add	ptra, #12
18df8     04 4E 05 F1 | 	add	fp, #4
18dfc     A7 12 62 FC | 	wrlong	arg01, fp
18e00     04 4E 05 F1 | 	add	fp, #4
18e04     A7 12 02 F6 | 	mov	arg01, fp
18e08     04 4E 85 F1 | 	sub	fp, #4
18e0c     A7 14 02 FB | 	rdlong	arg02, fp
18e10     04 4E 85 F1 | 	sub	fp, #4
18e14     04 16 06 F6 | 	mov	arg03, #4
18e18     0B 00 00 FF 
18e1c     C0 E4 05 F1 | 	add	objptr, ##5824
18e20     B4 28 B0 FD | 	call	#_psram_spin2_read1
18e24     0B 00 00 FF 
18e28     C0 E4 85 F1 | 	sub	objptr, ##5824
18e2c                 | ' psram.read1(varptr(res),adr,4)
18e2c                 | ' return res
18e2c     08 4E 05 F1 | 	add	fp, #8
18e30     A7 FA 01 FB | 	rdlong	result1, fp
18e34     08 4E 85 F1 | 	sub	fp, #8
18e38     A7 F0 03 F6 | 	mov	ptra, fp
18e3c     B2 00 A0 FD | 	call	#popregs_
18e40                 | _pslpeek_ret
18e40     2D 00 64 FD | 	ret
18e44                 | 
18e44                 | ' 
18e44                 | ' function psdpeek(adr as ulong) as ulong
18e44                 | _psdpeek
18e44     00 4A 05 F6 | 	mov	COUNT_, #0
18e48     A8 00 A0 FD | 	call	#pushregs_
18e4c     0C F0 07 F1 | 	add	ptra, #12
18e50     04 4E 05 F1 | 	add	fp, #4
18e54     A7 12 62 FC | 	wrlong	arg01, fp
18e58     04 4E 05 F1 | 	add	fp, #4
18e5c     A7 12 02 F6 | 	mov	arg01, fp
18e60     04 4E 85 F1 | 	sub	fp, #4
18e64     A7 14 02 FB | 	rdlong	arg02, fp
18e68     04 4E 85 F1 | 	sub	fp, #4
18e6c     02 16 06 F6 | 	mov	arg03, #2
18e70     0B 00 00 FF 
18e74     C0 E4 05 F1 | 	add	objptr, ##5824
18e78     5C 28 B0 FD | 	call	#_psram_spin2_read1
18e7c     0B 00 00 FF 
18e80     C0 E4 85 F1 | 	sub	objptr, ##5824
18e84                 | ' psram.read1(varptr(res),adr,2)
18e84                 | ' return res
18e84     08 4E 05 F1 | 	add	fp, #8
18e88     A7 FA E1 FA | 	rdword	result1, fp
18e8c     08 4E 85 F1 | 	sub	fp, #8
18e90     A7 F0 03 F6 | 	mov	ptra, fp
18e94     B2 00 A0 FD | 	call	#popregs_
18e98                 | _psdpeek_ret
18e98     2D 00 64 FD | 	ret
18e9c                 | 
18e9c                 | ' 
18e9c                 | ' '' ------------------------------- USB keyboard scan to char translator
18e9c                 | ' 
18e9c                 | ' function scantochar(key)
18e9c                 | _scantochar
18e9c                 | ' 
18e9c                 | ' select case (key shr 8) and 255
18e9c     09 01 02 F6 | 	mov	_var01, arg01
18ea0     08 00 C6 F0 | 	sar	_var01, #8
18ea4     FF 00 0E F5 | 	and	_var01, #255 wz
18ea8     24 00 90 AD |  if_e	jmp	#LR__1950
18eac     02 00 0E F2 | 	cmp	_var01, #2 wz
18eb0     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
18eb4     30 00 90 AD |  if_e	jmp	#LR__1951
18eb8     40 00 0E F2 | 	cmp	_var01, #64 wz
18ebc     44 00 90 AD |  if_e	jmp	#LR__1952
18ec0     42 00 0E F2 | 	cmp	_var01, #66 wz
18ec4     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
18ec8     70 00 90 5D |  if_ne	jmp	#LR__1954
18ecc     50 00 90 FD | 	jmp	#LR__1953
18ed0                 | LR__1950
18ed0     09 FB 01 F6 | 	mov	result1, arg01
18ed4     7F FA 05 F5 | 	and	result1, #127
18ed8     02 FA 65 F0 | 	shl	result1, #2
18edc     F5 FA 01 F1 | 	add	result1, ptr__dat__
18ee0     FD FA C1 FA | 	rdbyte	result1, result1
18ee4     54 00 90 FD | 	jmp	#_scantochar_ret
18ee8                 | LR__1951
18ee8     09 FB 01 F6 | 	mov	result1, arg01
18eec     7F FA 05 F5 | 	and	result1, #127
18ef0     02 FA 65 F0 | 	shl	result1, #2
18ef4     01 FA 05 F1 | 	add	result1, #1
18ef8     F5 FA 01 F1 | 	add	result1, ptr__dat__
18efc     FD FA C1 FA | 	rdbyte	result1, result1
18f00     38 00 90 FD | 	jmp	#_scantochar_ret
18f04                 | LR__1952
18f04     09 FB 01 F6 | 	mov	result1, arg01
18f08     7F FA 05 F5 | 	and	result1, #127
18f0c     02 FA 65 F0 | 	shl	result1, #2
18f10     02 FA 05 F1 | 	add	result1, #2
18f14     F5 FA 01 F1 | 	add	result1, ptr__dat__
18f18     FD FA C1 FA | 	rdbyte	result1, result1
18f1c     1C 00 90 FD | 	jmp	#_scantochar_ret
18f20                 | LR__1953
18f20     09 FB 01 F6 | 	mov	result1, arg01
18f24     7F FA 05 F5 | 	and	result1, #127
18f28     02 FA 65 F0 | 	shl	result1, #2
18f2c     03 FA 05 F1 | 	add	result1, #3
18f30     F5 FA 01 F1 | 	add	result1, ptr__dat__
18f34     FD FA C1 FA | 	rdbyte	result1, result1
18f38     00 00 90 FD | 	jmp	#_scantochar_ret
18f3c                 | LR__1954
18f3c                 | _scantochar_ret
18f3c     2D 00 64 FD | 	ret
18f40                 | 
18f40                 | _program
18f40     0B 4A 05 F6 | 	mov	COUNT_, #11
18f44     A8 00 A0 FD | 	call	#pushregs_
18f48     70 FC BF FD | 	call	#_startpsram
18f4c     40 12 06 F6 | 	mov	arg01, #64
18f50     00 14 06 F6 | 	mov	arg02, #0
18f54     00 16 06 F6 | 	mov	arg03, #0
18f58     A0 FC BF FD | 	call	#_startvideo
18f5c     00 12 06 F6 | 	mov	arg01, #0
18f60     00 14 06 F6 | 	mov	arg02, #0
18f64     00 16 06 F6 | 	mov	arg03, #0
18f68     0B 00 00 FF 
18f6c     C0 E4 05 F1 | 	add	objptr, ##5824
18f70     40 2D B0 FD | 	call	#_audio096_spin2_start
18f74     FE 1C 02 F6 | 	mov	arg06, result2
18f78     4B 00 00 FF 
18f7c     20 E5 05 F1 | 	add	objptr, ##38688
18f80     F2 FA 61 FC | 	wrlong	result1, objptr
18f84     14 E4 05 F1 | 	add	objptr, #20
18f88     F2 1C 62 FC | 	wrlong	arg06, objptr
18f8c     56 00 00 FF 
18f90     F4 E5 85 F1 | 	sub	objptr, ##44532
18f94     32 12 06 F6 | 	mov	arg01, #50
18f98     34 36 B0 FD | 	call	#__system___waitms
18f9c     56 00 00 FF 
18fa0     F4 E5 05 F1 | 	add	objptr, ##44532
18fa4     F2 12 02 FB | 	rdlong	arg01, objptr
18fa8     56 00 00 FF 
18fac     F4 E5 85 F1 | 	sub	objptr, ##44532
18fb0     14 12 06 F1 | 	add	arg01, #20
18fb4     20 00 80 FF 
18fb8     09 01 58 FC | 	wrword	##16384, arg01
18fbc     4C 2A B0 FD | 	call	#_usbnew_spin2_start
18fc0     56 00 00 FF 
18fc4     E8 E5 05 F1 | 	add	objptr, ##44520
18fc8     F2 FA 61 FC | 	wrlong	result1, objptr
18fcc                 | '   mouse_limits[0] := xlim
18fcc     0F 00 00 FF 
18fd0     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
18fd4     01 00 80 FF 
18fd8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
18fdc                 | '   mouse_limits[1] := ylim
18fdc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
18fe0     01 00 80 FF 
18fe4     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
18fe8     56 00 00 FF 
18fec     DB E4 85 F1 | 	sub	objptr, ##44251
18ff0     F2 12 02 F6 | 	mov	arg01, objptr
18ff4     0D E5 85 F1 | 	sub	objptr, #269
18ff8     C4 12 06 F1 | 	add	arg01, #196
18ffc                 | '   mouse_outptr := ptr
18ffc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
19000     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
19004     0F 00 00 FF 
19008     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1900c     0E 00 00 FF 
19010     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
19014     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19018     0E 00 00 FF 
1901c     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
19020     10 12 06 F6 | 	mov	arg01, #16
19024     90 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
19028     10 12 06 F6 | 	mov	arg01, #16
1902c     20 14 06 F6 | 	mov	arg02, #32
19030     20 16 06 F6 | 	mov	arg03, #32
19034     F4 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
19038     09 12 C6 F9 | 	decod	arg01, #9
1903c     20 15 06 F6 | 	mov	arg02, #288
19040     20 2B B0 FD | 	call	#_usbnew_spin2_mouse_move
19044     F2 1C 02 F6 | 	mov	arg06, objptr
19048     79 00 00 FF 
1904c     CC E5 05 F1 | 	add	objptr, ##62412
19050     F2 1A 02 F6 | 	mov	arg05, objptr
19054     0D 1D 62 FC | 	wrlong	arg06, arg05
19058     04 1A 06 F1 | 	add	arg05, #4
1905c     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
19060     EF 14 02 F6 | 	mov	arg02, entryptr__
19064     F2 1E 02 F6 | 	mov	local01, objptr
19068     1E FA 05 F6 | 	mov	result1, #30
1906c     28 1E 62 FD | 	setq	local01
19070     0A FB F1 FC | 	coginit	result1, arg02 wc
19074     01 FA 65 C6 |  if_b	neg	result1, #1
19078     04 E4 85 F1 | 	sub	objptr, #4
1907c     F2 FA 61 FC | 	wrlong	result1, objptr
19080     01 00 00 FF 
19084     90 E4 05 F1 | 	add	objptr, ##656
19088     F2 00 68 FC | 	wrlong	#0, objptr
1908c     24 00 00 FF 
19090     40 E4 85 F1 | 	sub	objptr, ##18496
19094     F2 04 68 FC | 	wrlong	#2, objptr
19098     04 E4 05 F1 | 	add	objptr, #4
1909c     F2 26 69 FC | 	wrlong	#147, objptr
190a0     04 E4 05 F1 | 	add	objptr, #4
190a4     F2 34 69 FC | 	wrlong	#154, objptr
190a8     04 E4 05 F1 | 	add	objptr, #4
190ac     F2 08 68 FC | 	wrlong	#4, objptr
190b0     04 E4 85 F1 | 	sub	objptr, #4
190b4     F2 1C 02 FB | 	rdlong	arg06, objptr
190b8     14 E4 85 F1 | 	sub	objptr, #20
190bc     F2 1C 62 FC | 	wrlong	arg06, objptr
190c0     04 E4 05 F1 | 	add	objptr, #4
190c4     F2 00 68 FC | 	wrlong	#0, objptr
190c8     04 E4 05 F1 | 	add	objptr, #4
190cc     F2 00 68 FC | 	wrlong	#0, objptr
190d0     22 00 00 FF 
190d4     B0 E5 05 F1 | 	add	objptr, ##17840
190d8     F2 02 68 FC | 	wrlong	#1, objptr
190dc     01 00 00 FF 
190e0     9C E4 05 F1 | 	add	objptr, ##668
190e4     F2 00 68 FC | 	wrlong	#0, objptr
190e8     01 00 00 FF 
190ec     00 EA 05 F1 | 	add	ptr__dat__, ##512
190f0     08 E4 05 F1 | 	add	objptr, #8
190f4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
190f8     04 E4 85 F1 | 	sub	objptr, #4
190fc     03 00 80 FF 
19100     F2 3C 69 FC | 	wrlong	##1694, objptr
19104     16 00 00 FF 
19108     1C E4 85 F1 | 	sub	objptr, ##11292
1910c     F2 18 68 FC | 	wrlong	#12, objptr
19110     65 00 00 FF 
19114     48 E4 85 F1 | 	sub	objptr, ##51784
19118     01 00 00 FF 
1911c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
19120     10 DF BF FD | 	call	#_init_commands
19124     00 F7 BF FD | 	call	#_init_error_strings
19128     9C EE BF FD | 	call	#_init_audio
1912c     B4 49 BF FD | 	call	#_do_new
19130     57 00 00 FF 
19134     20 E4 05 F1 | 	add	objptr, ##44576
19138     F2 12 02 FB | 	rdlong	arg01, objptr
1913c     04 E4 85 F1 | 	sub	objptr, #4
19140     F2 14 02 FB | 	rdlong	arg02, objptr
19144     57 00 00 FF 
19148     1C E4 85 F1 | 	sub	objptr, ##44572
1914c     94 1D B0 FD | 	call	#_hg010b_spin2_cls
19150     57 00 00 FF 
19154     24 E4 05 F1 | 	add	objptr, ##44580
19158     F2 12 02 FB | 	rdlong	arg01, objptr
1915c     57 00 00 FF 
19160     24 E4 85 F1 | 	sub	objptr, ##44580
19164     94 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
19168                 | ' 
19168                 | ' leading_spaces:=amount
19168     01 00 00 FF 
1916c     B2 E4 05 F1 | 	add	objptr, ##690
19170     F2 04 68 FC | 	wrlong	#2, objptr
19174     01 00 00 FF 
19178     B2 E4 85 F1 | 	sub	objptr, ##690
1917c     62 01 00 FF 
19180     E9 20 06 F6 | 	mov	local02, ##@LR__5016
19184     3D 12 06 F6 | 	mov	arg01, #61
19188     3C 14 06 F6 | 	mov	arg02, #60
1918c     3B 16 06 F6 | 	mov	arg03, #59
19190     3A 18 06 F6 | 	mov	arg04, #58
19194     70 7B B0 FD | 	call	#__system___vfs_open_sdcardx
19198     FD 14 02 F6 | 	mov	arg02, result1
1919c     10 13 02 F6 | 	mov	arg01, local02
191a0     04 35 B0 FD | 	call	#__system___mount
191a4     62 01 00 FF 
191a8     ED 12 06 F6 | 	mov	arg01, ##@LR__5017
191ac     B8 37 B0 FD | 	call	#__system___chdir
191b0     62 01 00 FF 
191b4     F5 20 06 F6 | 	mov	local02, ##@LR__5018
191b8     72 00 00 FF 
191bc     78 E4 05 F1 | 	add	objptr, ##58488
191c0     F2 20 62 FC | 	wrlong	local02, objptr
191c4     1B 00 00 FF 
191c8     60 E4 85 F1 | 	sub	objptr, ##13920
191cc     F2 12 02 FB | 	rdlong	arg01, objptr
191d0     57 00 00 FF 
191d4     18 E4 85 F1 | 	sub	objptr, ##44568
191d8     01 12 66 F0 | 	shl	arg01, #1
191dc     01 14 06 F6 | 	mov	arg02, #1
191e0     58 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
191e4                 | ' 
191e4                 | ' init_commands
191e4                 | ' init_error_strings
191e4                 | ' init_audio
191e4                 | ' do_new
191e4                 | ' 
191e4                 | ' 
191e4                 | ' cls(ink, paper)
191e4                 | ' v.setfontfamily(font) 				' use ST Mono font
191e4                 | ' v.setleadingspaces(2)
191e4                 | ' mount "/sd", _vfs_open_sdcard()
191e4                 | ' chdir "/sd/bas"
191e4                 | ' 
191e4                 | ' currentdir$="/sd/bas"
191e4                 | ' 
191e4                 | ' position 2*editor_spaces,1 : print ver$
191e4     00 12 06 F6 | 	mov	arg01, #0
191e8     80 8A B0 FD | 	call	#__system___getiolock_0474
191ec     FD 12 02 F6 | 	mov	arg01, result1
191f0     E8 30 B0 FD | 	call	#__system___lockmem
191f4     18 00 00 FF 
191f8     4C EB 05 F1 | 	add	ptr__dat__, ##12620
191fc     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
19200     18 00 00 FF 
19204     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
19208     00 12 06 F6 | 	mov	arg01, #0
1920c     00 16 06 F6 | 	mov	arg03, #0
19210     CC 3D B0 FD | 	call	#__system___basic_print_string
19214     00 12 06 F6 | 	mov	arg01, #0
19218     0A 14 06 F6 | 	mov	arg02, #10
1921c     00 16 06 F6 | 	mov	arg03, #0
19220     64 3D B0 FD | 	call	#__system___basic_print_char
19224     00 12 06 F6 | 	mov	arg01, #0
19228     40 8A B0 FD | 	call	#__system___getiolock_0474
1922c     FD 00 68 FC | 	wrlong	#0, result1
19230     F2 12 02 FB | 	rdlong	arg01, objptr
19234     00 14 06 F6 | 	mov	arg02, #0
19238     0A 16 06 F6 | 	mov	arg03, #10
1923c     34 53 B0 FD | 	call	#__system__Number_S
19240     FD 12 02 F6 | 	mov	arg01, result1
19244     62 01 00 FF 
19248     FD 14 06 F6 | 	mov	arg02, ##@LR__5019
1924c     E8 30 B0 FD | 	call	#__system___string_concat
19250     FD 20 02 F6 | 	mov	local02, result1
19254     79 00 00 FF 
19258     C0 E5 05 F1 | 	add	objptr, ##62400
1925c     F2 20 62 FC | 	wrlong	local02, objptr
19260     79 00 00 FF 
19264     C0 E5 85 F1 | 	sub	objptr, ##62400
19268                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
19268     00 12 06 F6 | 	mov	arg01, #0
1926c     FC 89 B0 FD | 	call	#__system___getiolock_0474
19270     FD 12 02 F6 | 	mov	arg01, result1
19274     64 30 B0 FD | 	call	#__system___lockmem
19278     79 00 00 FF 
1927c     C0 E5 05 F1 | 	add	objptr, ##62400
19280     F2 14 02 FB | 	rdlong	arg02, objptr
19284     79 00 00 FF 
19288     C0 E5 85 F1 | 	sub	objptr, ##62400
1928c     00 12 06 F6 | 	mov	arg01, #0
19290     00 16 06 F6 | 	mov	arg03, #0
19294     48 3D B0 FD | 	call	#__system___basic_print_string
19298     00 12 06 F6 | 	mov	arg01, #0
1929c     0A 14 06 F6 | 	mov	arg02, #10
192a0     00 16 06 F6 | 	mov	arg03, #0
192a4     E0 3C B0 FD | 	call	#__system___basic_print_char
192a8     00 12 06 F6 | 	mov	arg01, #0
192ac     BC 89 B0 FD | 	call	#__system___getiolock_0474
192b0     FD 00 68 FC | 	wrlong	#0, result1
192b4     57 00 00 FF 
192b8     18 E4 05 F1 | 	add	objptr, ##44568
192bc     F2 12 02 FB | 	rdlong	arg01, objptr
192c0     57 00 00 FF 
192c4     18 E4 85 F1 | 	sub	objptr, ##44568
192c8     01 12 66 F0 | 	shl	arg01, #1
192cc     04 14 06 F6 | 	mov	arg02, #4
192d0     68 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
192d4                 | ' position 2*editor_spaces,4 : print "Ready"
192d4     00 12 06 F6 | 	mov	arg01, #0
192d8     90 89 B0 FD | 	call	#__system___getiolock_0474
192dc     FD 12 02 F6 | 	mov	arg01, result1
192e0     F8 2F B0 FD | 	call	#__system___lockmem
192e4     62 01 00 FF 
192e8     0F 15 06 F6 | 	mov	arg02, ##@LR__5020
192ec     00 12 06 F6 | 	mov	arg01, #0
192f0     00 16 06 F6 | 	mov	arg03, #0
192f4     E8 3C B0 FD | 	call	#__system___basic_print_string
192f8     FD 22 02 F6 | 	mov	local03, result1
192fc     00 12 06 F6 | 	mov	arg01, #0
19300     0A 14 06 F6 | 	mov	arg02, #10
19304     00 16 06 F6 | 	mov	arg03, #0
19308     7C 3C B0 FD | 	call	#__system___basic_print_char
1930c     01 24 06 F6 | 	mov	local04, #1
19310     00 12 06 F6 | 	mov	arg01, #0
19314     54 89 B0 FD | 	call	#__system___getiolock_0474
19318     FD 00 68 FC | 	wrlong	#0, result1
1931c     00 26 06 F6 | 	mov	local05, #0
19320     00 14 06 F6 | 	mov	arg02, #0
19324     01 14 D6 F7 | 	test	arg02, #1 wc
19328     5A 4C 64 FD | 	drvc	#38
1932c     01 14 D6 F7 | 	test	arg02, #1 wc
19330     5A 4E 64 FD | 	drvc	#39
19334                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
19334                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
19334                 | ' 
19334                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
19334                 | ' 
19334                 | ' 'base2:=@channel1[0]+64*channel
19334                 | ' 'long[base2+8]:=sample+$C0000000 
19334                 | ' 'long[base2+12]:= len
19334                 | ' 'if loop >=0 
19334                 | ' '  long[base2+16]:= loop
19334                 | ' 'else
19334                 | ' '  long[base2+16]:= len+2
19334                 | ' 'word[base2+20]:=vol
19334                 | ' 'word[base2+24]:= 3546911/splfreq 
19334                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
19334                 | ' 'long[base2+28]:=$40000000
19334                 | ' 
19334                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
19334                 | ' 'lpoke base+16,2048
19334                 | ' 'lpoke base+12,0
19334                 | ' 'dpoke base+20,16383
19334                 | ' 'dpoke base+22,8192
19334                 | ' 'dpoke base+24,60
19334                 | ' 'dpoke base+26,256 ' todo: use skip to make accurate sample rate
19334                 | ' 'dpoke base+28,$4000_0000
19334                 | ' 'lpoke base+32,0 
19334                 | ' 'lpoke base+36, 0
19334                 | ' 'lpoke base+40,25600' speed
19334                 | ' 'lpoke base+44,1023 'len
19334                 | ' 
19334                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
19334                 | ' 
19334                 | ' '-------------------------------------------------------------------------------------------------------- 
19334                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
19334                 | ' '--------------------------------------------------------------------------------------------------------
19334                 | ' 
19334                 | ' do
19334                 | LR__1960
19334     01 12 06 F6 | 	mov	arg01, #1
19338     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
1933c     06 12 06 F6 | 	mov	arg01, #6
19340     0B 00 00 FF 
19344     C0 E4 05 F1 | 	add	objptr, ##5824
19348     90 2C B0 FD | 	call	#_audio096_spin2_stop
1934c     0B 00 00 FF 
19350     C0 E4 85 F1 | 	sub	objptr, ##5824
19354     AC 27 B0 FD | 	call	#_usbnew_spin2_get_key
19358     65 00 00 FF 
1935c     58 E4 05 F1 | 	add	objptr, ##51800
19360     F2 FA 61 FC | 	wrlong	result1, objptr
19364                 | '   return hkbd_led_rep
19364     13 00 00 FF 
19368     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1936c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
19370     13 00 00 FF 
19374     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
19378     16 00 00 FF 
1937c     30 E4 05 F1 | 	add	objptr, ##11312
19380     F2 FA 61 FC | 	wrlong	result1, objptr
19384                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
19384     16 00 00 FF 
19388     30 E4 85 F1 | 	sub	objptr, ##11312
1938c     F2 20 02 FB | 	rdlong	local02, objptr
19390     65 00 00 FF 
19394     58 E4 85 F1 | 	sub	objptr, ##51800
19398     01 20 16 F2 | 	cmp	local02, #1 wc
1939c     BC 00 90 CD |  if_b	jmp	#LR__1961
193a0     65 00 00 FF 
193a4     58 E4 05 F1 | 	add	objptr, ##51800
193a8     F2 24 02 FB | 	rdlong	local04, objptr
193ac     65 00 00 FF 
193b0     58 E4 85 F1 | 	sub	objptr, ##51800
193b4     12 23 02 F6 | 	mov	local03, local04
193b8     04 22 16 F2 | 	cmp	local03, #4 wc
193bc     9C 00 90 3D |  if_ae	jmp	#LR__1961
193c0     79 00 00 FF 
193c4     C4 E5 05 F1 | 	add	objptr, ##62404
193c8     F2 1E 02 FB | 	rdlong	local01, objptr
193cc     79 00 00 FF 
193d0     C4 E5 85 F1 | 	sub	objptr, ##62404
193d4     0F 27 02 F6 | 	mov	local05, local01
193d8     01 26 0E F2 | 	cmp	local05, #1 wz
193dc     7C 00 90 5D |  if_ne	jmp	#LR__1961
193e0     04 00 00 FF 
193e4     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
193e8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
193ec     04 00 00 FF 
193f0     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
193f4     56 00 00 FF 
193f8     44 22 06 F6 | 	mov	local03, ##44100
193fc     0C 24 C6 F9 | 	decod	local04, #12
19400     00 26 06 F6 | 	mov	local05, #0
19404     03 00 00 FF 
19408     DE 1E 06 F6 | 	mov	local01, ##1758
1940c     07 12 06 F6 | 	mov	arg01, #7
19410     56 00 00 FF 
19414     44 16 06 F6 | 	mov	arg03, ##44100
19418     0C 18 C6 F9 | 	decod	arg04, #12
1941c     00 1A 06 F6 | 	mov	arg05, #0
19420     03 00 00 FF 
19424     DE 1C 06 F6 | 	mov	arg06, ##1758
19428     0B 00 00 FF 
1942c     C0 E4 05 F1 | 	add	objptr, ##5824
19430     58 2A B0 FD | 	call	#_audio096_spin2_play
19434     0B 00 00 FF 
19438     C0 E4 85 F1 | 	sub	objptr, ##5824
1943c     0A 12 06 F6 | 	mov	arg01, #10
19440     8C 31 B0 FD | 	call	#__system___waitms
19444     07 12 06 F6 | 	mov	arg01, #7
19448     0B 00 00 FF 
1944c     C0 E4 05 F1 | 	add	objptr, ##5824
19450     88 2B B0 FD | 	call	#_audio096_spin2_stop
19454     0B 00 00 FF 
19458     C0 E4 85 F1 | 	sub	objptr, ##5824
1945c                 | LR__1961
1945c                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1945c     65 00 00 FF 
19460     58 E4 05 F1 | 	add	objptr, ##51800
19464     F2 20 02 FB | 	rdlong	local02, objptr
19468     65 00 00 FF 
1946c     58 E4 85 F1 | 	sub	objptr, ##51800
19470     04 20 16 F2 | 	cmp	local02, #4 wc
19474     80 00 90 CD |  if_b	jmp	#LR__1962
19478     65 00 00 FF 
1947c     58 E4 05 F1 | 	add	objptr, ##51800
19480     F2 24 02 FB | 	rdlong	local04, objptr
19484     65 00 00 FF 
19488     58 E4 85 F1 | 	sub	objptr, ##51800
1948c     12 23 02 F6 | 	mov	local03, local04
19490     00 00 40 FF 
19494     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
19498     65 00 00 CF 
1949c     58 E4 05 C1 |  if_b	add	objptr, ##51800
194a0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
194a4     65 00 00 CF 
194a8     58 E4 85 C1 |  if_b	sub	objptr, ##51800
194ac     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
194b0     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
194b4     40 00 90 3D |  if_ae	jmp	#LR__1962
194b8     65 00 00 FF 
194bc     58 E4 05 F1 | 	add	objptr, ##51800
194c0     F2 20 02 FB | 	rdlong	local02, objptr
194c4     04 E4 05 F1 | 	add	objptr, #4
194c8     F2 20 62 FC | 	wrlong	local02, objptr
194cc     16 00 00 FF 
194d0     30 E4 05 F1 | 	add	objptr, ##11312
194d4     F2 02 68 FC | 	wrlong	#1, objptr
194d8     16 00 00 FF 
194dc     30 E4 85 F1 | 	sub	objptr, ##11312
194e0     F2 20 02 FB | 	rdlong	local02, objptr
194e4     16 00 00 FF 
194e8     34 E4 05 F1 | 	add	objptr, ##11316
194ec     F2 20 62 FC | 	wrlong	local02, objptr
194f0     7B 00 00 FF 
194f4     90 E4 85 F1 | 	sub	objptr, ##63120
194f8                 | LR__1962
194f8                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
194f8     65 00 00 FF 
194fc     58 E4 05 F1 | 	add	objptr, ##51800
19500     F2 20 02 FB | 	rdlong	local02, objptr
19504     65 00 00 FF 
19508     58 E4 85 F1 | 	sub	objptr, ##51800
1950c     00 00 40 FF 
19510     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
19514     7B 00 00 3F 
19518     94 E4 05 31 |  if_ae	add	objptr, ##63124
1951c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19520     08 E4 85 31 |  if_ae	sub	objptr, #8
19524     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19528     7B 00 00 3F 
1952c     8C E4 85 31 |  if_ae	sub	objptr, ##63116
19530                 | ' if key=0 andalso rpt=1 then rptcnt+=1
19530     65 00 00 FF 
19534     58 E4 05 F1 | 	add	objptr, ##51800
19538     F2 20 0A FB | 	rdlong	local02, objptr wz
1953c     65 00 00 FF 
19540     58 E4 85 F1 | 	sub	objptr, ##51800
19544     7B 00 00 AF 
19548     8C E4 05 A1 |  if_e	add	objptr, ##63116
1954c     F2 24 02 AB |  if_e	rdlong	local04, objptr
19550     7B 00 00 AF 
19554     8C E4 85 A1 |  if_e	sub	objptr, ##63116
19558     12 23 02 A6 |  if_e	mov	local03, local04
1955c     01 22 0E A2 |  if_e	cmp	local03, #1 wz
19560     7B 00 00 AF 
19564     94 E4 05 A1 |  if_e	add	objptr, ##63124
19568     F2 20 02 AB |  if_e	rdlong	local02, objptr
1956c     01 20 06 A1 |  if_e	add	local02, #1
19570     F2 20 62 AC |  if_e	wrlong	local02, objptr
19574     7B 00 00 AF 
19578     94 E4 85 A1 |  if_e	sub	objptr, ##63124
1957c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1957c     65 00 00 FF 
19580     58 E4 05 F1 | 	add	objptr, ##51800
19584     F2 20 02 FB | 	rdlong	local02, objptr
19588     65 00 00 FF 
1958c     58 E4 85 F1 | 	sub	objptr, ##51800
19590     00 00 40 FF 
19594     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
19598     44 00 90 3D |  if_ae	jmp	#LR__1964
1959c     7B 00 00 FF 
195a0     94 E4 05 F1 | 	add	objptr, ##63124
195a4     F2 20 02 FB | 	rdlong	local02, objptr
195a8     7B 00 00 FF 
195ac     94 E4 85 F1 | 	sub	objptr, ##63124
195b0     19 20 0E F2 | 	cmp	local02, #25 wz
195b4     28 00 90 5D |  if_ne	jmp	#LR__1963
195b8     65 00 00 FF 
195bc     5C E4 05 F1 | 	add	objptr, ##51804
195c0     F2 20 02 FB | 	rdlong	local02, objptr
195c4     16 00 00 FF 
195c8     34 E4 05 F1 | 	add	objptr, ##11316
195cc     F2 20 62 FC | 	wrlong	local02, objptr
195d0     04 E4 05 F1 | 	add	objptr, #4
195d4     F2 2A 68 FC | 	wrlong	#21, objptr
195d8     7B 00 00 FF 
195dc     94 E4 85 F1 | 	sub	objptr, ##63124
195e0                 | LR__1963
195e0                 | LR__1964
195e0                 | ' 
195e0                 | ' 
195e0                 | ' if key3<>0 then
195e0     7B 00 00 FF 
195e4     90 E4 05 F1 | 	add	objptr, ##63120
195e8     F2 28 0A FB | 	rdlong	local06, objptr wz
195ec     7B 00 00 FF 
195f0     90 E4 85 F1 | 	sub	objptr, ##63120
195f4     3C FD 9F AD |  if_e	jmp	#LR__1960
195f8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
195f8     79 00 00 FF 
195fc     C4 E5 05 F1 | 	add	objptr, ##62404
19600     F2 20 02 FB | 	rdlong	local02, objptr
19604     79 00 00 FF 
19608     C4 E5 85 F1 | 	sub	objptr, ##62404
1960c     01 20 0E F2 | 	cmp	local02, #1 wz
19610     50 00 90 5D |  if_ne	jmp	#LR__1965
19614     7B 00 00 FF 
19618     68 E4 05 F1 | 	add	objptr, ##63080
1961c     F2 14 02 FB | 	rdlong	arg02, objptr
19620     56 00 00 FF 
19624     44 22 06 F6 | 	mov	local03, ##44100
19628     0C 24 C6 F9 | 	decod	local04, #12
1962c     04 E4 85 F1 | 	sub	objptr, #4
19630     F2 26 02 FB | 	rdlong	local05, objptr
19634     01 1E 66 F6 | 	neg	local01, #1
19638     07 12 06 F6 | 	mov	arg01, #7
1963c     56 00 00 FF 
19640     44 16 06 F6 | 	mov	arg03, ##44100
19644     0C 18 C6 F9 | 	decod	arg04, #12
19648     13 1B 02 F6 | 	mov	arg05, local05
1964c     01 1C 66 F6 | 	neg	arg06, #1
19650     6F 00 00 FF 
19654     A4 E5 85 F1 | 	sub	objptr, ##57252
19658     30 28 B0 FD | 	call	#_audio096_spin2_play
1965c     0B 00 00 FF 
19660     C0 E4 85 F1 | 	sub	objptr, ##5824
19664                 | LR__1965
19664     7B 00 00 FF 
19668     90 E4 05 F1 | 	add	objptr, ##63120
1966c     F2 12 02 FB | 	rdlong	arg01, objptr
19670     7B 00 00 FF 
19674     90 E4 85 F1 | 	sub	objptr, ##63120
19678     20 F8 BF FD | 	call	#_scantochar
1967c     7B 00 00 FF 
19680     98 E4 05 F1 | 	add	objptr, ##63128
19684     F2 FA 61 FC | 	wrlong	result1, objptr
19688                 | '   if leds and 2 = 2 then 
19688     10 E4 85 F1 | 	sub	objptr, #16
1968c     F2 20 0A FB | 	rdlong	local02, objptr wz
19690     7B 00 00 FF 
19694     88 E4 85 F1 | 	sub	objptr, ##63112
19698     68 01 90 AD |  if_e	jmp	#LR__1973
1969c                 | '     if key4>96 andalso key4<123 then
1969c     7B 00 00 FF 
196a0     98 E4 05 F1 | 	add	objptr, ##63128
196a4     F2 20 02 FB | 	rdlong	local02, objptr
196a8     7B 00 00 FF 
196ac     98 E4 85 F1 | 	sub	objptr, ##63128
196b0     61 20 56 F2 | 	cmps	local02, #97 wc
196b4     40 00 90 CD |  if_b	jmp	#LR__1966
196b8     7B 00 00 FF 
196bc     98 E4 05 F1 | 	add	objptr, ##63128
196c0     F2 24 02 FB | 	rdlong	local04, objptr
196c4     7B 00 00 FF 
196c8     98 E4 85 F1 | 	sub	objptr, ##63128
196cc     12 23 02 F6 | 	mov	local03, local04
196d0     7B 22 56 F2 | 	cmps	local03, #123 wc
196d4     20 00 90 3D |  if_ae	jmp	#LR__1966
196d8     7B 00 00 FF 
196dc     98 E4 05 F1 | 	add	objptr, ##63128
196e0     F2 20 02 FB | 	rdlong	local02, objptr
196e4     20 20 86 F1 | 	sub	local02, #32
196e8     F2 20 62 FC | 	wrlong	local02, objptr
196ec     7B 00 00 FF 
196f0     98 E4 85 F1 | 	sub	objptr, ##63128
196f4     0C 01 90 FD | 	jmp	#LR__1972
196f8                 | LR__1966
196f8     7B 00 00 FF 
196fc     98 E4 05 F1 | 	add	objptr, ##63128
19700     F2 20 02 FB | 	rdlong	local02, objptr
19704     7B 00 00 FF 
19708     98 E4 85 F1 | 	sub	objptr, ##63128
1970c     41 20 56 F2 | 	cmps	local02, #65 wc
19710     40 00 90 CD |  if_b	jmp	#LR__1967
19714     7B 00 00 FF 
19718     98 E4 05 F1 | 	add	objptr, ##63128
1971c     F2 24 02 FB | 	rdlong	local04, objptr
19720     7B 00 00 FF 
19724     98 E4 85 F1 | 	sub	objptr, ##63128
19728     12 23 02 F6 | 	mov	local03, local04
1972c     5B 22 56 F2 | 	cmps	local03, #91 wc
19730     20 00 90 3D |  if_ae	jmp	#LR__1967
19734     7B 00 00 FF 
19738     98 E4 05 F1 | 	add	objptr, ##63128
1973c     F2 20 02 FB | 	rdlong	local02, objptr
19740     20 20 06 F1 | 	add	local02, #32
19744     F2 20 62 FC | 	wrlong	local02, objptr
19748     7B 00 00 FF 
1974c     98 E4 85 F1 | 	sub	objptr, ##63128
19750     B0 00 90 FD | 	jmp	#LR__1971
19754                 | LR__1967
19754     7B 00 00 FF 
19758     98 E4 05 F1 | 	add	objptr, ##63128
1975c     F2 20 02 FB | 	rdlong	local02, objptr
19760     7B 00 00 FF 
19764     98 E4 85 F1 | 	sub	objptr, ##63128
19768     17 20 56 F2 | 	cmps	local02, #23 wc
1976c     40 00 90 CD |  if_b	jmp	#LR__1968
19770     7B 00 00 FF 
19774     98 E4 05 F1 | 	add	objptr, ##63128
19778     F2 24 02 FB | 	rdlong	local04, objptr
1977c     7B 00 00 FF 
19780     98 E4 85 F1 | 	sub	objptr, ##63128
19784     12 23 02 F6 | 	mov	local03, local04
19788     20 22 56 F2 | 	cmps	local03, #32 wc
1978c     20 00 90 3D |  if_ae	jmp	#LR__1968
19790     7B 00 00 FF 
19794     98 E4 05 F1 | 	add	objptr, ##63128
19798     F2 20 02 FB | 	rdlong	local02, objptr
1979c     09 20 86 F1 | 	sub	local02, #9
197a0     F2 20 62 FC | 	wrlong	local02, objptr
197a4     7B 00 00 FF 
197a8     98 E4 85 F1 | 	sub	objptr, ##63128
197ac     54 00 90 FD | 	jmp	#LR__1970
197b0                 | LR__1968
197b0     7B 00 00 FF 
197b4     98 E4 05 F1 | 	add	objptr, ##63128
197b8     F2 20 02 FB | 	rdlong	local02, objptr
197bc     7B 00 00 FF 
197c0     98 E4 85 F1 | 	sub	objptr, ##63128
197c4     0E 20 56 F2 | 	cmps	local02, #14 wc
197c8     38 00 90 CD |  if_b	jmp	#LR__1969
197cc     7B 00 00 FF 
197d0     98 E4 05 F1 | 	add	objptr, ##63128
197d4     F2 24 02 FB | 	rdlong	local04, objptr
197d8     7B 00 00 FF 
197dc     98 E4 85 F1 | 	sub	objptr, ##63128
197e0     12 23 02 F6 | 	mov	local03, local04
197e4     17 22 56 F2 | 	cmps	local03, #23 wc
197e8     7B 00 00 CF 
197ec     98 E4 05 C1 |  if_b	add	objptr, ##63128
197f0     F2 20 02 CB |  if_b	rdlong	local02, objptr
197f4     27 20 06 C1 |  if_b	add	local02, #39
197f8     F2 20 62 CC |  if_b	wrlong	local02, objptr
197fc     7B 00 00 CF 
19800     98 E4 85 C1 |  if_b	sub	objptr, ##63128
19804                 | LR__1969
19804                 | LR__1970
19804                 | LR__1971
19804                 | LR__1972
19804                 | LR__1973
19804                 | '  
19804                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
19804     7B 00 00 FF 
19808     98 E4 05 F1 | 	add	objptr, ##63128
1980c     F2 20 02 FB | 	rdlong	local02, objptr
19810     7B 00 00 FF 
19814     98 E4 85 F1 | 	sub	objptr, ##63128
19818     01 20 56 F2 | 	cmps	local02, #1 wc
1981c     90 00 90 CD |  if_b	jmp	#LR__1974
19820     7B 00 00 FF 
19824     98 E4 05 F1 | 	add	objptr, ##63128
19828     F2 24 02 FB | 	rdlong	local04, objptr
1982c     7B 00 00 FF 
19830     98 E4 85 F1 | 	sub	objptr, ##63128
19834     12 23 02 F6 | 	mov	local03, local04
19838     7F 22 56 F2 | 	cmps	local03, #127 wc
1983c     38 E4 05 C1 |  if_b	add	objptr, #56
19840     F2 1E E2 CA |  if_b	rdword	local01, objptr
19844     38 E4 85 C1 |  if_b	sub	objptr, #56
19848     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1984c     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
19850     5C 00 90 3D |  if_ae	jmp	#LR__1974
19854     7B 00 00 FF 
19858     98 E4 05 F1 | 	add	objptr, ##63128
1985c     F2 12 02 FB | 	rdlong	arg01, objptr
19860     7B 00 00 FF 
19864     98 E4 85 F1 | 	sub	objptr, ##63128
19868     78 4C B0 FD | 	call	#__system__Chr_S
1986c     FD 2A 02 F6 | 	mov	local07, result1
19870     57 00 00 FF 
19874     00 E4 05 F1 | 	add	objptr, ##44544
19878     F2 12 02 FB | 	rdlong	arg01, objptr
1987c     57 00 00 FF 
19880     00 E4 85 F1 | 	sub	objptr, ##44544
19884     15 15 02 F6 | 	mov	arg02, local07
19888     AC 2A B0 FD | 	call	#__system___string_concat
1988c     57 00 00 FF 
19890     00 E4 05 F1 | 	add	objptr, ##44544
19894     F2 FA 61 FC | 	wrlong	result1, objptr
19898     24 00 00 FF 
1989c     98 E4 05 F1 | 	add	objptr, ##18584
198a0     F2 12 02 FB | 	rdlong	arg01, objptr
198a4     7B 00 00 FF 
198a8     98 E4 85 F1 | 	sub	objptr, ##63128
198ac     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
198b0                 | LR__1974
198b0                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
198b0     7B 00 00 FF 
198b4     98 E4 05 F1 | 	add	objptr, ##63128
198b8     F2 20 02 FB | 	rdlong	local02, objptr
198bc     7B 00 00 FF 
198c0     98 E4 85 F1 | 	sub	objptr, ##63128
198c4     01 20 56 F2 | 	cmps	local02, #1 wc
198c8     D0 00 90 CD |  if_b	jmp	#LR__1975
198cc     7B 00 00 FF 
198d0     98 E4 05 F1 | 	add	objptr, ##63128
198d4     F2 24 02 FB | 	rdlong	local04, objptr
198d8     7B 00 00 FF 
198dc     98 E4 85 F1 | 	sub	objptr, ##63128
198e0     12 23 02 F6 | 	mov	local03, local04
198e4     7F 22 56 F2 | 	cmps	local03, #127 wc
198e8     B0 00 90 3D |  if_ae	jmp	#LR__1975
198ec     38 E4 05 F1 | 	add	objptr, #56
198f0     F2 1E E2 FA | 	rdword	local01, objptr
198f4     38 E4 85 F1 | 	sub	objptr, #56
198f8     0F 27 32 F9 | 	getword	local05, local01, #0
198fc     FE 26 0E F2 | 	cmp	local05, #254 wz
19900     79 00 00 AF 
19904     C4 E5 05 A1 |  if_e	add	objptr, ##62404
19908     F2 2C 02 AB |  if_e	rdlong	local08, objptr
1990c     79 00 00 AF 
19910     C4 E5 85 A1 |  if_e	sub	objptr, ##62404
19914     16 2F 02 A6 |  if_e	mov	local09, local08
19918     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1991c     7C 00 90 5D |  if_ne	jmp	#LR__1975
19920     04 00 00 FF 
19924     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19928     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1992c     04 00 00 FF 
19930     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19934     56 00 00 FF 
19938     44 22 06 F6 | 	mov	local03, ##44100
1993c     0C 24 C6 F9 | 	decod	local04, #12
19940     00 26 06 F6 | 	mov	local05, #0
19944     03 00 00 FF 
19948     DE 1E 06 F6 | 	mov	local01, ##1758
1994c     07 12 06 F6 | 	mov	arg01, #7
19950     56 00 00 FF 
19954     44 16 06 F6 | 	mov	arg03, ##44100
19958     0C 18 C6 F9 | 	decod	arg04, #12
1995c     00 1A 06 F6 | 	mov	arg05, #0
19960     03 00 00 FF 
19964     DE 1C 06 F6 | 	mov	arg06, ##1758
19968     0B 00 00 FF 
1996c     C0 E4 05 F1 | 	add	objptr, ##5824
19970     18 25 B0 FD | 	call	#_audio096_spin2_play
19974     0B 00 00 FF 
19978     C0 E4 85 F1 | 	sub	objptr, ##5824
1997c     2C 13 06 F6 | 	mov	arg01, #300
19980     4C 2C B0 FD | 	call	#__system___waitms
19984     07 12 06 F6 | 	mov	arg01, #7
19988     0B 00 00 FF 
1998c     C0 E4 05 F1 | 	add	objptr, ##5824
19990     48 26 B0 FD | 	call	#_audio096_spin2_stop
19994     0B 00 00 FF 
19998     C0 E4 85 F1 | 	sub	objptr, ##5824
1999c                 | LR__1975
1999c                 | '  
1999c                 | '   'tab
1999c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1999c     7B 00 00 FF 
199a0     90 E4 05 F1 | 	add	objptr, ##63120
199a4     F2 20 02 FB | 	rdlong	local02, objptr
199a8     7B 00 00 FF 
199ac     90 E4 85 F1 | 	sub	objptr, ##63120
199b0     10 21 E2 F8 | 	getbyte	local02, local02, #0
199b4     2B 20 0E F2 | 	cmp	local02, #43 wz
199b8     B4 00 90 5D |  if_ne	jmp	#LR__1976
199bc     38 E4 05 F1 | 	add	objptr, #56
199c0     F2 24 E2 FA | 	rdword	local04, objptr
199c4     38 E4 85 F1 | 	sub	objptr, #56
199c8     12 23 32 F9 | 	getword	local03, local04, #0
199cc     F0 22 16 F2 | 	cmp	local03, #240 wc
199d0     9C 00 90 CD |  if_b	jmp	#LR__1976
199d4     79 00 00 FF 
199d8     C4 E5 05 F1 | 	add	objptr, ##62404
199dc     F2 1E 02 FB | 	rdlong	local01, objptr
199e0     79 00 00 FF 
199e4     C4 E5 85 F1 | 	sub	objptr, ##62404
199e8     0F 27 02 F6 | 	mov	local05, local01
199ec     01 26 0E F2 | 	cmp	local05, #1 wz
199f0     7C 00 90 5D |  if_ne	jmp	#LR__1976
199f4     04 00 00 FF 
199f8     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
199fc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19a00     04 00 00 FF 
19a04     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19a08     56 00 00 FF 
19a0c     44 22 06 F6 | 	mov	local03, ##44100
19a10     0E 24 C6 F9 | 	decod	local04, #14
19a14     00 26 06 F6 | 	mov	local05, #0
19a18     03 00 00 FF 
19a1c     DE 1E 06 F6 | 	mov	local01, ##1758
19a20     00 12 06 F6 | 	mov	arg01, #0
19a24     56 00 00 FF 
19a28     44 16 06 F6 | 	mov	arg03, ##44100
19a2c     0E 18 C6 F9 | 	decod	arg04, #14
19a30     00 1A 06 F6 | 	mov	arg05, #0
19a34     03 00 00 FF 
19a38     DE 1C 06 F6 | 	mov	arg06, ##1758
19a3c     0B 00 00 FF 
19a40     C0 E4 05 F1 | 	add	objptr, ##5824
19a44     44 24 B0 FD | 	call	#_audio096_spin2_play
19a48     0B 00 00 FF 
19a4c     C0 E4 85 F1 | 	sub	objptr, ##5824
19a50     2C 13 06 F6 | 	mov	arg01, #300
19a54     78 2B B0 FD | 	call	#__system___waitms
19a58     00 12 06 F6 | 	mov	arg01, #0
19a5c     0B 00 00 FF 
19a60     C0 E4 05 F1 | 	add	objptr, ##5824
19a64     74 25 B0 FD | 	call	#_audio096_spin2_stop
19a68     0B 00 00 FF 
19a6c     C0 E4 85 F1 | 	sub	objptr, ##5824
19a70                 | LR__1976
19a70                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
19a70     7B 00 00 FF 
19a74     90 E4 05 F1 | 	add	objptr, ##63120
19a78     F2 20 02 FB | 	rdlong	local02, objptr
19a7c     7B 00 00 FF 
19a80     90 E4 85 F1 | 	sub	objptr, ##63120
19a84     10 21 E2 F8 | 	getbyte	local02, local02, #0
19a88     2B 20 0E F2 | 	cmp	local02, #43 wz
19a8c     AC 00 90 5D |  if_ne	jmp	#LR__1979
19a90     38 E4 05 F1 | 	add	objptr, #56
19a94     F2 24 E2 FA | 	rdword	local04, objptr
19a98     38 E4 85 F1 | 	sub	objptr, #56
19a9c     12 23 32 F9 | 	getword	local03, local04, #0
19aa0     F0 22 16 F2 | 	cmp	local03, #240 wc
19aa4     94 00 90 3D |  if_ae	jmp	#LR__1979
19aa8     38 E4 05 F1 | 	add	objptr, #56
19aac     F2 20 E2 FA | 	rdword	local02, objptr
19ab0     10 23 52 F6 | 	abs	local03, local02 wc
19ab4     11 23 42 F8 | 	getnib	local03, local03, #0
19ab8     11 23 82 F6 | 	negc	local03, local03
19abc     11 25 52 F6 | 	abs	local04, local03 wc
19ac0     01 24 46 F0 | 	shr	local04, #1
19ac4     12 25 82 F6 | 	negc	local04, local04
19ac8     7B 00 00 FF 
19acc     64 E4 05 F1 | 	add	objptr, ##63076
19ad0     F2 24 62 FC | 	wrlong	local04, objptr
19ad4     12 31 02 F6 | 	mov	local10, local04
19ad8     7B 00 00 FF 
19adc     9C E4 85 F1 | 	sub	objptr, ##63132
19ae0                 | LR__1977
19ae0     08 30 56 F2 | 	cmps	local10, #8 wc
19ae4     54 00 90 3D |  if_ae	jmp	#LR__1978
19ae8     57 00 00 FF 
19aec     00 E4 05 F1 | 	add	objptr, ##44544
19af0     F2 12 02 FB | 	rdlong	arg01, objptr
19af4     57 00 00 FF 
19af8     00 E4 85 F1 | 	sub	objptr, ##44544
19afc     62 01 00 FF 
19b00     15 25 06 F6 | 	mov	local04, ##@LR__5021
19b04     12 15 02 F6 | 	mov	arg02, local04
19b08     2C 28 B0 FD | 	call	#__system___string_concat
19b0c     57 00 00 FF 
19b10     00 E4 05 F1 | 	add	objptr, ##44544
19b14     F2 FA 61 FC | 	wrlong	result1, objptr
19b18     57 00 00 FF 
19b1c     00 E4 85 F1 | 	sub	objptr, ##44544
19b20     62 01 00 FF 
19b24     17 13 06 F6 | 	mov	arg01, ##@LR__5022
19b28     74 16 B0 FD | 	call	#_hg010b_spin2_write
19b2c     18 23 02 F6 | 	mov	local03, local10
19b30     01 22 06 F1 | 	add	local03, #1
19b34     11 31 02 F6 | 	mov	local10, local03
19b38     A4 FF 9F FD | 	jmp	#LR__1977
19b3c                 | LR__1978
19b3c                 | LR__1979
19b3c                 | '  
19b3c                 | '   'backspace
19b3c                 | '   if (key3 and 255) = 42 then 
19b3c     7B 00 00 FF 
19b40     90 E4 05 F1 | 	add	objptr, ##63120
19b44     F2 20 02 FB | 	rdlong	local02, objptr
19b48     7B 00 00 FF 
19b4c     90 E4 85 F1 | 	sub	objptr, ##63120
19b50     10 21 E2 F8 | 	getbyte	local02, local02, #0
19b54     2A 20 0E F2 | 	cmp	local02, #42 wz
19b58     D4 00 90 5D |  if_ne	jmp	#LR__1984
19b5c                 | '       if v.cursor_x>4 then 
19b5c     38 E4 05 F1 | 	add	objptr, #56
19b60     F2 20 E2 FA | 	rdword	local02, objptr
19b64     38 E4 85 F1 | 	sub	objptr, #56
19b68     05 20 16 F2 | 	cmp	local02, #5 wc
19b6c     9C 00 90 CD |  if_b	jmp	#LR__1982
19b70     57 00 00 FF 
19b74     00 E4 05 F1 | 	add	objptr, ##44544
19b78     F2 26 02 FB | 	rdlong	local05, objptr
19b7c     57 00 00 FF 
19b80     00 E4 85 F1 | 	sub	objptr, ##44544
19b84     13 13 02 F6 | 	mov	arg01, local05
19b88     09 33 02 F6 | 	mov	local11, arg01
19b8c     97 06 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
19b90                 | LR__1980
19b90     19 FB C9 FA | 	rdbyte	result1, local11 wz
19b94     01 32 06 51 |  if_ne	add	local11, #1
19b98     F4 FF 9F 5D |  if_ne	jmp	#LR__1980
19b9c                 | LR__1981
19b9c     09 33 82 F1 | 	sub	local11, arg01
19ba0     19 15 02 F6 | 	mov	arg02, local11
19ba4     01 14 86 F1 | 	sub	arg02, #1
19ba8     13 13 02 F6 | 	mov	arg01, local05
19bac     70 47 B0 FD | 	call	#__system__Left_S
19bb0     57 00 00 FF 
19bb4     00 E4 05 F1 | 	add	objptr, ##44544
19bb8     F2 FA 61 FC | 	wrlong	result1, objptr
19bbc     56 00 00 FF 
19bc0     C8 E5 85 F1 | 	sub	objptr, ##44488
19bc4     F2 12 E2 FA | 	rdword	arg01, objptr
19bc8     02 12 86 F1 | 	sub	arg01, #2
19bcc     02 E4 05 F1 | 	add	objptr, #2
19bd0     F2 14 C2 FA | 	rdbyte	arg02, objptr
19bd4     3A E4 85 F1 | 	sub	objptr, #58
19bd8     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19bdc     20 12 06 F6 | 	mov	arg01, #32
19be0     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
19be4     38 E4 05 F1 | 	add	objptr, #56
19be8     F2 12 E2 FA | 	rdword	arg01, objptr
19bec     02 12 86 F1 | 	sub	arg01, #2
19bf0     02 E4 05 F1 | 	add	objptr, #2
19bf4     F2 24 C2 FA | 	rdbyte	local04, objptr
19bf8     3A E4 85 F1 | 	sub	objptr, #58
19bfc     12 23 E2 F8 | 	getbyte	local03, local04, #0
19c00     11 15 02 F6 | 	mov	arg02, local03
19c04     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19c08     24 00 90 FD | 	jmp	#LR__1983
19c0c                 | LR__1982
19c0c     62 01 00 FF 
19c10     19 21 06 F6 | 	mov	local02, ##@LR__5023
19c14     57 00 00 FF 
19c18     00 E4 05 F1 | 	add	objptr, ##44544
19c1c     F2 20 62 FC | 	wrlong	local02, objptr
19c20     56 00 00 FF 
19c24     C8 E5 85 F1 | 	sub	objptr, ##44488
19c28     F2 08 58 FC | 	wrword	#4, objptr
19c2c     38 E4 85 F1 | 	sub	objptr, #56
19c30                 | LR__1983
19c30                 | LR__1984
19c30                 | '    
19c30                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
19c30                 | '  
19c30                 | '   if key4=key_enter then 
19c30     7B 00 00 FF 
19c34     98 E4 05 F1 | 	add	objptr, ##63128
19c38     F2 28 02 FB | 	rdlong	local06, objptr
19c3c     7B 00 00 FF 
19c40     98 E4 85 F1 | 	sub	objptr, ##63128
19c44     8D 28 0E F2 | 	cmp	local06, #141 wz
19c48     50 00 90 5D |  if_ne	jmp	#LR__1985
19c4c     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
19c50     C8 6D BE FD | 	call	#_interpret
19c54     62 01 00 FF 
19c58     1A 21 06 F6 | 	mov	local02, ##@LR__5024
19c5c     57 00 00 FF 
19c60     00 E4 05 F1 | 	add	objptr, ##44544
19c64     F2 20 62 FC | 	wrlong	local02, objptr
19c68     1A FA 61 FD | 	getct	result1
19c6c     24 00 00 FF 
19c70     A0 E4 05 F1 | 	add	objptr, ##18592
19c74     F2 24 02 FB | 	rdlong	local04, objptr
19c78     12 23 02 F6 | 	mov	local03, local04
19c7c     11 FB 81 F1 | 	sub	result1, local03
19c80     F2 FA 61 FC | 	wrlong	result1, objptr
19c84     14 E4 85 F1 | 	sub	objptr, #20
19c88     F2 00 68 FC | 	wrlong	#0, objptr
19c8c     08 E4 05 F1 | 	add	objptr, #8
19c90     F2 00 68 FC | 	wrlong	#0, objptr
19c94     7B 00 00 FF 
19c98     94 E4 85 F1 | 	sub	objptr, ##63124
19c9c                 | LR__1985
19c9c     7B 00 00 FF 
19ca0     90 E4 05 F1 | 	add	objptr, ##63120
19ca4     F2 00 68 FC | 	wrlong	#0, objptr
19ca8     7B 00 00 FF 
19cac     90 E4 85 F1 | 	sub	objptr, ##63120
19cb0     80 F6 9F FD | 	jmp	#LR__1960
19cb4     A7 F0 03 F6 | 	mov	ptra, fp
19cb8     B2 00 A0 FD | 	call	#popregs_
19cbc                 | _program_ret
19cbc     2D 00 64 FD | 	ret
19cc0                 | 
19cc0                 | ' '' this is not a main program.
19cc0                 | ' 
19cc0                 | ' '****************************************************************************************************************
19cc0                 | ' '                                                                                                             	*
19cc0                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
19cc0                 | ' '                                                                                                            	*
19cc0                 | ' ' mode - mode #, see below											*
19cc0                 | ' ' base - HDMI base pin												*
19cc0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
19cc0                 | ' '														*
19cc0                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
19cc0                 | ' '' set bit #15 for custom timings														*
19cc0                 | ' '' p - 1 - psram, 0 - hub											*
19cc0                 | ' '' t - 1 - graphics, 0 - text											*
19cc0                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
19cc0                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
19cc0                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
19cc0                 | ' '														*
19cc0                 | ' '****************************************************************************************************************
19cc0                 | ' 
19cc0                 | ' pub start(base,mb):result |i
19cc0                 | _hg010b_spin2_start
19cc0                 | ' 
19cc0                 | ' '--------------------------- initialize pointers and variables
19cc0                 | ' 
19cc0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
19cc0     30 E4 05 F1 | 	add	objptr, #48
19cc4     F2 FA 01 F6 | 	mov	result1, objptr
19cc8     28 E4 85 F1 | 	sub	objptr, #40
19ccc     F2 FA 61 FC | 	wrlong	result1, objptr
19cd0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
19cd0                 | ' hdmibase:=base							' HDMI base pin, 8*n
19cd0     18 E4 05 F1 | 	add	objptr, #24
19cd4     F2 12 62 FC | 	wrlong	arg01, objptr
19cd8                 | ' mailbox_ptr:=mb		
19cd8     04 E4 05 F1 | 	add	objptr, #4
19cdc     F2 14 62 FC | 	wrlong	arg02, objptr
19ce0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
19ce0     C1 E5 05 F1 | 	add	objptr, #449
19ce4     F2 14 62 FC | 	wrlong	arg02, objptr
19ce8                 | ' sprite_ptr:=@spr1ptr
19ce8     D8 E4 85 F1 | 	sub	objptr, #216
19cec     F2 FA 01 F6 | 	mov	result1, objptr
19cf0     E5 E4 85 F1 | 	sub	objptr, #229
19cf4     F2 FA 61 FC | 	wrlong	result1, objptr
19cf8                 | ' 
19cf8                 | ' 		'
19cf8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
19cf8     E5 E4 05 F1 | 	add	objptr, #229
19cfc     F2 FA 01 FB | 	rdlong	result1, objptr
19d00     D0 FA 05 F1 | 	add	result1, #208
19d04     FD 10 58 FC | 	wrword	#8, result1
19d08                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
19d08     F2 16 02 FB | 	rdlong	arg03, objptr
19d0c     D2 16 06 F1 | 	add	arg03, #210
19d10     0B 21 58 FC | 	wrword	#16, arg03
19d14                 | ' leading_spaces:=0				'
19d14     A5 E5 05 F1 | 	add	objptr, #421
19d18     F2 00 68 FC | 	wrlong	#0, objptr
19d1c                 | ' 
19d1c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
19d1c     99 E4 85 F1 | 	sub	objptr, #153
19d20     00 00 A0 FF 
19d24     F2 0E 68 FC | 	wrlong	##1073741831, objptr
19d28                 | ' emptydl[1]:=0
19d28     04 E4 05 F1 | 	add	objptr, #4
19d2c     F2 00 68 FC | 	wrlong	#0, objptr
19d30                 | ' 
19d30                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
19d30                 | ' 
19d30                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
19d30     28 E5 85 F1 | 	sub	objptr, #296
19d34     F2 02 68 FC | 	wrlong	#1, objptr
19d38                 | ' if s_debug<>0
19d38                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
19d38     20 00 80 FF 
19d3c     F2 00 68 FC | 	wrlong	##16384, objptr
19d40     F5 E4 85 F1 | 	sub	objptr, #245
19d44                 | ' setmode()							' set the mode, see below
19d44     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
19d48                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
19d48     45 E4 05 F1 | 	add	objptr, #69
19d4c     F2 FA 01 F6 | 	mov	result1, objptr
19d50     35 E4 85 F1 | 	sub	objptr, #53
19d54     F2 FA 61 FC | 	wrlong	result1, objptr
19d58                 | ' cursor_ptr:=@cursor_x						
19d58     28 E4 05 F1 | 	add	objptr, #40
19d5c     F2 16 02 F6 | 	mov	arg03, objptr
19d60     2C E4 85 F1 | 	sub	objptr, #44
19d64     F2 16 62 FC | 	wrlong	arg03, objptr
19d68                 | ' fontnum:=0  							' start with a PC type font 
19d68     55 E4 05 F1 | 	add	objptr, #85
19d6c     F2 00 68 FC | 	wrlong	#0, objptr
19d70                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
19d70     1C E4 05 F1 | 	add	objptr, #28
19d74     F2 12 02 F6 | 	mov	arg01, objptr
19d78     7D E4 85 F1 | 	sub	objptr, #125
19d7c     10 00 00 FF 
19d80     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
19d84     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
19d88     10 00 00 FF 
19d8c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
19d90     10 16 06 F6 | 	mov	arg03, #16
19d94     64 24 B0 FD | 	call	#__system____builtin_memmove
19d98                 | ' leading_spaces:=0
19d98     01 00 00 FF 
19d9c     B2 E4 05 F1 | 	add	objptr, ##690
19da0     F2 00 68 FC | 	wrlong	#0, objptr
19da4     01 00 00 FF 
19da8     B2 E4 85 F1 | 	sub	objptr, ##690
19dac                 | ' '---------------------------- initialize a cursor (MSDOS type)
19dac                 | ' 
19dac                 | ' initcursor(154)
19dac     9A 12 06 F6 | 	mov	arg01, #154
19db0     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
19db4                 | ' 
19db4                 | ' '---------------------------- start the cog
19db4                 | ' 
19db4                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
19db4     10 00 00 FF 
19db8     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
19dbc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
19dc0     10 00 00 FF 
19dc4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
19dc8     10 E4 05 F1 | 	add	objptr, #16
19dcc     10 FA 05 F6 | 	mov	result1, #16
19dd0     28 E4 61 FD | 	setq	objptr
19dd4     0A FB F1 FC | 	coginit	result1, arg02 wc
19dd8     01 FA 65 C6 |  if_b	neg	result1, #1
19ddc     1C E4 05 F1 | 	add	objptr, #28
19de0     F2 FA 61 FC | 	wrlong	result1, objptr
19de4     2C E4 85 F1 | 	sub	objptr, #44
19de8                 | ' waitms(40)							' wait for stabilize
19de8     28 12 06 F6 | 	mov	arg01, #40
19dec     E0 27 B0 FD | 	call	#__system___waitms
19df0                 | ' return cog							' return the driver's cog #
19df0     2C E4 05 F1 | 	add	objptr, #44
19df4     F2 FA 01 FB | 	rdlong	result1, objptr
19df8     2C E4 85 F1 | 	sub	objptr, #44
19dfc                 | _hg010b_spin2_start_ret
19dfc     2D 00 64 FD | 	ret
19e00                 | 
19e00                 | ' 
19e00                 | ' 
19e00                 | ' '**************************************************************************************************************** 
19e00                 | ' '                                                                                                             	*
19e00                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
19e00                 | ' '  Mode number - see start() above or bits below								*
19e00                 | ' '                                                                                                             	*
19e00                 | ' '****************************************************************************************************************
19e00                 | ' 
19e00                 | ' '---------------------------- initialize a cursor (MSDOS type)
19e00                 | ' pub initcursor(color) |i
19e00                 | _hg010b_spin2_initcursor
19e00     03 4A 05 F6 | 	mov	COUNT_, #3
19e04     A8 00 A0 FD | 	call	#pushregs_
19e08     09 1F 02 F6 | 	mov	local01, arg01
19e0c                 | ' 
19e0c                 | ' cursor_x:=0							' place the cursor at 0:0
19e0c     38 E4 05 F1 | 	add	objptr, #56
19e10     F2 00 58 FC | 	wrword	#0, objptr
19e14                 | ' cursor_y:=0
19e14     02 E4 05 F1 | 	add	objptr, #2
19e18     F2 00 48 FC | 	wrbyte	#0, objptr
19e1c                 | ' repeat i from 0 to 111
19e1c     00 20 06 F6 | 	mov	local02, #0
19e20     F8 E5 05 F1 | 	add	objptr, #504
19e24     97 1A 48 FB | 	callpa	#(@LR__1992-@LR__1990)>>2,fcache_load_ptr_
19e28                 | LR__1990
19e28                 | '   cursor[i]:=0
19e28     10 23 02 F6 | 	mov	local03, local02
19e2c     F2 22 02 F1 | 	add	local03, objptr
19e30     11 01 48 FC | 	wrbyte	#0, local03
19e34     01 20 06 F1 | 	add	local02, #1
19e38     70 20 56 F2 | 	cmps	local02, #112 wc
19e3c     E8 FF 9F CD |  if_b	jmp	#LR__1990
19e40                 | ' repeat i from 112 to 127
19e40     70 20 06 F6 | 	mov	local02, #112
19e44                 | LR__1991
19e44                 | '   cursor[i]:=color  
19e44     10 23 02 F6 | 	mov	local03, local02
19e48     F2 22 02 F1 | 	add	local03, objptr
19e4c     11 1F 42 FC | 	wrbyte	local01, local03
19e50     01 20 06 F1 | 	add	local02, #1
19e54     80 20 16 F2 | 	cmp	local02, #128 wc
19e58     E8 FF 9F CD |  if_b	jmp	#LR__1991
19e5c                 | LR__1992
19e5c                 | ' 'repeat i from 0 to 127
19e5c                 | ' '  if ((i/8)//2)
19e5c                 | ' '    cursor[i]:=15
19e5c                 | ' '  else
19e5c                 | ' '    cursor[i]:=0
19e5c                 | ' '  if i>=120    
19e5c                 | ' '    cursor[i]:=40
19e5c                 | ' setspriteptr(17,@cursor)
19e5c     F2 14 02 F6 | 	mov	arg02, objptr
19e60     01 00 00 FF 
19e64     32 E4 85 F1 | 	sub	objptr, ##562
19e68     11 12 06 F6 | 	mov	arg01, #17
19e6c     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
19e70                 | ' setspritesize(17,8,16)
19e70     11 12 06 F6 | 	mov	arg01, #17
19e74     08 14 06 F6 | 	mov	arg02, #8
19e78     10 16 06 F6 | 	mov	arg03, #16
19e7c     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
19e80                 | ' setspritepos(17,0,0)
19e80     11 12 06 F6 | 	mov	arg01, #17
19e84     00 14 06 F6 | 	mov	arg02, #0
19e88     00 16 06 F6 | 	mov	arg03, #0
19e8c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
19e90     A7 F0 03 F6 | 	mov	ptra, fp
19e94     B2 00 A0 FD | 	call	#popregs_
19e98                 | _hg010b_spin2_initcursor_ret
19e98     2D 00 64 FD | 	ret
19e9c                 | 
19e9c                 | ' 
19e9c                 | '  
19e9c                 | ' pub setcursorcolor(color) |i
19e9c                 | _hg010b_spin2_setcursorcolor
19e9c                 | ' 
19e9c                 | ' 
19e9c                 | ' repeat i from 0 to 111
19e9c     00 00 06 F6 | 	mov	_var01, #0
19ea0     01 00 00 FF 
19ea4     32 E4 05 F1 | 	add	objptr, ##562
19ea8     97 1A 48 FB | 	callpa	#(@LR__2002-@LR__2000)>>2,fcache_load_ptr_
19eac                 | LR__2000
19eac                 | '   cursor[i]:=0
19eac     00 03 02 F6 | 	mov	_var02, _var01
19eb0     F2 02 02 F1 | 	add	_var02, objptr
19eb4     01 01 48 FC | 	wrbyte	#0, _var02
19eb8     01 00 06 F1 | 	add	_var01, #1
19ebc     70 00 56 F2 | 	cmps	_var01, #112 wc
19ec0     E8 FF 9F CD |  if_b	jmp	#LR__2000
19ec4                 | ' repeat i from 112 to 127
19ec4     70 00 06 F6 | 	mov	_var01, #112
19ec8                 | LR__2001
19ec8                 | '   cursor[i]:=color  
19ec8     00 03 02 F6 | 	mov	_var02, _var01
19ecc     F2 02 02 F1 | 	add	_var02, objptr
19ed0     01 13 42 FC | 	wrbyte	arg01, _var02
19ed4     01 00 06 F1 | 	add	_var01, #1
19ed8     80 00 16 F2 | 	cmp	_var01, #128 wc
19edc     E8 FF 9F CD |  if_b	jmp	#LR__2001
19ee0                 | LR__2002
19ee0     01 00 00 FF 
19ee4     32 E4 85 F1 | 	sub	objptr, ##562
19ee8                 | _hg010b_spin2_setcursorcolor_ret
19ee8     2D 00 64 FD | 	ret
19eec                 | 
19eec                 | '  
19eec                 | ' 
19eec                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
19eec                 | _hg010b_spin2_setmode
19eec     02 4A 05 F6 | 	mov	COUNT_, #2
19ef0     A8 00 A0 FD | 	call	#pushregs_
19ef4                 | ' 
19ef4                 | ' 
19ef4                 | ' dl_ptr:=@emptydl[0]
19ef4     01 00 00 FF 
19ef8     19 E4 05 F1 | 	add	objptr, ##537
19efc     F2 66 02 F6 | 	mov	muldivb_, objptr
19f00     FD E5 85 F1 | 	sub	objptr, #509
19f04     F2 66 62 FC | 	wrlong	muldivb_, objptr
19f08                 | ' 
19f08                 | ' if cog>0 
19f08     10 E4 05 F1 | 	add	objptr, #16
19f0c     F2 66 02 FB | 	rdlong	muldivb_, objptr
19f10     2C E4 85 F1 | 	sub	objptr, #44
19f14     01 66 56 F2 | 	cmps	muldivb_, #1 wc
19f18                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
19f18     01 12 06 36 |  if_ae	mov	arg01, #1
19f1c     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
19f20                 | ' xres:=1024
19f20     01 00 00 FF 
19f24     22 E4 05 F1 | 	add	objptr, ##546
19f28     02 00 80 FF 
19f2c     F2 00 68 FC | 	wrlong	##1024, objptr
19f30                 | ' yres:=576  
19f30     04 E4 05 F1 | 	add	objptr, #4
19f34     01 00 80 FF 
19f38     F2 80 68 FC | 	wrlong	##576, objptr
19f3c                 | ' ppl:=(timings[3])
19f3c     10 00 00 FF 
19f40     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
19f44     F7 66 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
19f48     51 E5 85 F1 | 	sub	objptr, #337
19f4c     F2 66 62 FC | 	wrlong	muldivb_, objptr
19f50                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
19f50     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
19f54     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
19f58     01 1E 66 F0 | 	shl	local01, #1
19f5c     80 E4 85 F1 | 	sub	objptr, #128
19f60     F2 1E 62 FC | 	wrlong	local01, objptr
19f64                 | ' cpl1:=cpl '' todo remove
19f64     04 E4 05 F1 | 	add	objptr, #4
19f68     F2 1E 62 FC | 	wrlong	local01, objptr
19f6c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
19f6c     02 00 00 FF 
19f70     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
19f74     41 E4 85 F1 | 	sub	objptr, #65
19f78     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
19f7c                 | ' repeat i from 0 to 3
19f7c     00 20 06 F6 | 	mov	local02, #0
19f80     02 00 00 FF 
19f84     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
19f88     08 E4 05 F1 | 	add	objptr, #8
19f8c     97 20 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
19f90                 | LR__2010
19f90                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
19f90     10 1F 02 F6 | 	mov	local01, local02
19f94     02 1E 66 F0 | 	shl	local01, #2
19f98     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
19f9c     F2 66 02 FB | 	rdlong	muldivb_, objptr
19fa0     11 66 66 F0 | 	shl	muldivb_, #17
19fa4     0F 1F 02 FB | 	rdlong	local01, local01
19fa8     33 1F 02 F1 | 	add	local01, muldivb_
19fac     80 40 38 FF 
19fb0     00 1E 06 F1 | 	add	local01, ##1887502336
19fb4     10 67 02 F6 | 	mov	muldivb_, local02
19fb8     02 66 66 F0 | 	shl	muldivb_, #2
19fbc     F7 66 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
19fc0     33 1F 62 FC | 	wrlong	local01, muldivb_
19fc4     01 20 06 F1 | 	add	local02, #1
19fc8     04 20 56 F2 | 	cmps	local02, #4 wc
19fcc     C0 FF 9F CD |  if_b	jmp	#LR__2010
19fd0                 | LR__2011
19fd0     20 E4 85 F1 | 	sub	objptr, #32
19fd4                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
19fd4     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
19fd8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
19fdc     14 1E 66 FC | 	wrlong	local01, #20
19fe0                 | ' hubset(timings[10])
19fe0     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
19fe4     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
19fe8     10 00 00 FF 
19fec     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
19ff0     00 12 62 FD | 	hubset	arg01
19ff4                 | ' waitms(1)                                                   	' wait for stabilization
19ff4     01 12 06 F6 | 	mov	arg01, #1
19ff8     D4 25 B0 FD | 	call	#__system___waitms
19ffc     10 00 00 FF 
1a000     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1a004     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1a008     5D E4 05 F1 | 	add	objptr, #93
1a00c     F2 20 62 FC | 	wrlong	local02, objptr
1a010     10 1F 52 F6 | 	abs	local01, local02 wc
1a014     04 1E 46 F0 | 	shr	local01, #4
1a018     0F 1F 82 F6 | 	negc	local01, local01
1a01c     9C E4 05 F1 | 	add	objptr, #156
1a020     F2 1E 62 FC | 	wrlong	local01, objptr
1a024     A4 E4 85 F1 | 	sub	objptr, #164
1a028     F2 20 02 FB | 	rdlong	local02, objptr
1a02c     08 E4 05 F1 | 	add	objptr, #8
1a030     F2 1E 02 FB | 	rdlong	local01, objptr
1a034     0F 21 02 FD | 	qmul	local02, local01
1a038                 | ' lines:=timings[11]
1a038                 | ' t_lines:=lines/16
1a038                 | ' buflen:=cpl*lines						' framebuffer length in longs
1a038     29 E4 85 F1 | 	sub	objptr, #41
1a03c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1a03c     19 1E C6 F9 | 	decod	local01, #25
1a040                 | ' mode_ptr:=@timings						' set pointers to timings
1a040     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
1a044                 | ' graphmode:=1024+512+192+48							' det global variable
1a044                 | ' makedl(graphmode)							' make a DL for the mode
1a044     03 00 00 FF 
1a048     F0 12 06 F6 | 	mov	arg01, ##1776
1a04c     18 20 62 FD | 	getqx	local02
1a050     F2 20 62 FC | 	wrlong	local02, objptr
1a054     34 E4 85 F1 | 	sub	objptr, #52
1a058     02 20 66 F0 | 	shl	local02, #2
1a05c     10 1F 82 F1 | 	sub	local01, local02
1a060     F2 1E 62 FC | 	wrlong	local01, objptr
1a064     14 E4 05 F1 | 	add	objptr, #20
1a068     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1a06c     79 E4 05 F1 | 	add	objptr, #121
1a070     03 00 80 FF 
1a074     F2 E0 69 FC | 	wrlong	##1776, objptr
1a078     8D E4 85 F1 | 	sub	objptr, #141
1a07c     10 00 00 FF 
1a080     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1a084     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
1a088                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1a088     F2 1E 02 FB | 	rdlong	local01, objptr
1a08c     D9 E4 05 F1 | 	add	objptr, #217
1a090     F2 1E 62 FC | 	wrlong	local01, objptr
1a094                 | ' s_font_ptr:=font_ptr
1a094     D5 E4 85 F1 | 	sub	objptr, #213
1a098     F2 1E 02 FB | 	rdlong	local01, objptr
1a09c     D9 E4 05 F1 | 	add	objptr, #217
1a0a0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0a4                 | ' s_lines:=lines
1a0a4     80 E4 85 F1 | 	sub	objptr, #128
1a0a8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0ac     84 E4 05 F1 | 	add	objptr, #132
1a0b0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0b4                 | ' s_buflen:=buflen
1a0b4     AD E4 85 F1 | 	sub	objptr, #173
1a0b8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0bc     B5 E4 05 F1 | 	add	objptr, #181
1a0c0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0c4                 | ' s_cpl:=cpl
1a0c4     94 E4 85 F1 | 	sub	objptr, #148
1a0c8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0cc     90 E4 05 F1 | 	add	objptr, #144
1a0d0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0d4                 | ' s_cpl1:=cpl
1a0d4     90 E4 85 F1 | 	sub	objptr, #144
1a0d8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0dc     98 E4 05 F1 | 	add	objptr, #152
1a0e0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0e4                 | ' st_lines:=t_lines
1a0e4     0C E4 05 F1 | 	add	objptr, #12
1a0e8     F2 1E 02 FB | 	rdlong	local01, objptr
1a0ec     04 E4 05 F1 | 	add	objptr, #4
1a0f0     F2 1E 62 FC | 	wrlong	local01, objptr
1a0f4                 | ' ppl:=ppl/xzoom  
1a0f4     28 E4 85 F1 | 	sub	objptr, #40
1a0f8     F2 64 02 FB | 	rdlong	muldiva_, objptr
1a0fc     2C E4 05 F1 | 	add	objptr, #44
1a100     F2 66 02 FB | 	rdlong	muldivb_, objptr
1a104     01 E5 85 F1 | 	sub	objptr, #257
1a108     BA 00 A0 FD | 	call	#divide_
1a10c     D5 E4 05 F1 | 	add	objptr, #213
1a110     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a114                 | ' s_ppl:=ppl
1a114     1C E4 05 F1 | 	add	objptr, #28
1a118     F2 66 62 FC | 	wrlong	muldivb_, objptr
1a11c     F1 E4 85 F1 | 	sub	objptr, #241
1a120                 | ' waitms(20)							' wait 
1a120     14 12 06 F6 | 	mov	arg01, #20
1a124     A8 24 B0 FD | 	call	#__system___waitms
1a128     A7 F0 03 F6 | 	mov	ptra, fp
1a12c     B2 00 A0 FD | 	call	#popregs_
1a130                 | _hg010b_spin2_setmode_ret
1a130     2D 00 64 FD | 	ret
1a134                 | 
1a134                 | ' 
1a134                 | ' 
1a134                 | ' '****************************************************************************************************************
1a134                 | ' '                                                                                                             	*
1a134                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1a134                 | ' '                                                                                                             	*
1a134                 | ' '****************************************************************************************************************
1a134                 | ' 
1a134                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1a134                 | _hg010b_spin2_makedl
1a134                 | ' 
1a134                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1a134                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1a134                 | ' repeat i from 0 to 11                                                           ' clear DL
1a134     00 00 06 F6 | 	mov	_var01, #0
1a138     E9 E5 05 F1 | 	add	objptr, #489
1a13c     97 0E 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
1a140                 | LR__2020
1a140                 | '   displaylist[i]:=0 
1a140     00 03 02 F6 | 	mov	_var02, _var01
1a144     02 02 66 F0 | 	shl	_var02, #2
1a148     F2 02 02 F1 | 	add	_var02, objptr
1a14c     01 01 68 FC | 	wrlong	#0, _var02
1a150     01 00 06 F1 | 	add	_var01, #1
1a154     0C 00 56 F2 | 	cmps	_var01, #12 wc
1a158     E4 FF 9F CD |  if_b	jmp	#LR__2020
1a15c                 | LR__2021
1a15c                 | '                         ' 
1a15c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1a15c     8C E5 85 F1 | 	sub	objptr, #396
1a160     F2 02 02 FB | 	rdlong	_var02, objptr
1a164     14 02 66 F0 | 	shl	_var02, #20
1a168     01 02 06 F1 | 	add	_var02, #1
1a16c     04 E4 85 F1 | 	sub	objptr, #4
1a170     F2 00 02 FB | 	rdlong	_var01, objptr
1a174     02 00 66 F0 | 	shl	_var01, #2
1a178     04 00 66 F0 | 	shl	_var01, #4
1a17c     00 03 02 F1 | 	add	_var02, _var01
1a180     90 E5 05 F1 | 	add	objptr, #400
1a184     F2 02 62 FC | 	wrlong	_var02, objptr
1a188     E9 E5 85 F1 | 	sub	objptr, #489
1a18c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1a18c     F2 02 02 FB | 	rdlong	_var02, objptr
1a190     04 02 66 F0 | 	shl	_var02, #4
1a194     02 02 06 F1 | 	add	_var02, #2
1a198     ED E5 05 F1 | 	add	objptr, #493
1a19c     F2 02 62 FC | 	wrlong	_var02, objptr
1a1a0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1a1a0     04 E4 85 F1 | 	sub	objptr, #4
1a1a4     F2 02 02 F6 | 	mov	_var02, objptr
1a1a8     CD E5 85 F1 | 	sub	objptr, #461
1a1ac     F2 02 62 FC | 	wrlong	_var02, objptr
1a1b0     1C E4 85 F1 | 	sub	objptr, #28
1a1b4                 | _hg010b_spin2_makedl_ret
1a1b4     2D 00 64 FD | 	ret
1a1b8                 | 
1a1b8                 | ' 
1a1b8                 | ' 
1a1b8                 | ' '****************************************************************************************************************
1a1b8                 | ' '                                                                        					*
1a1b8                 | ' '  Graphic primitives                                                    					*
1a1b8                 | ' '                                                                        					*
1a1b8                 | ' '****************************************************************************************************************
1a1b8                 | ' 
1a1b8                 | ' pub setspriteptr(num,ptr)
1a1b8                 | _hg010b_spin2_setspriteptr
1a1b8                 | ' long[@spr1ptr+12*num]:=ptr
1a1b8     0D E5 05 F1 | 	add	objptr, #269
1a1bc     F2 00 02 F6 | 	mov	_var01, objptr
1a1c0     09 03 02 F6 | 	mov	_var02, arg01
1a1c4     01 02 66 F0 | 	shl	_var02, #1
1a1c8     09 03 02 F1 | 	add	_var02, arg01
1a1cc     02 02 66 F0 | 	shl	_var02, #2
1a1d0     01 01 02 F1 | 	add	_var01, _var02
1a1d4     00 15 62 FC | 	wrlong	arg02, _var01
1a1d8     0D E5 85 F1 | 	sub	objptr, #269
1a1dc                 | _hg010b_spin2_setspriteptr_ret
1a1dc     2D 00 64 FD | 	ret
1a1e0                 | 
1a1e0                 | ' 
1a1e0                 | ' pub setspritepos(num,x,y)
1a1e0                 | _hg010b_spin2_setspritepos
1a1e0                 | ' word[@spr1ptr+12*num+4]:=x
1a1e0     0D E5 05 F1 | 	add	objptr, #269
1a1e4     F2 00 02 F6 | 	mov	_var01, objptr
1a1e8     09 03 02 F6 | 	mov	_var02, arg01
1a1ec     01 02 66 F0 | 	shl	_var02, #1
1a1f0     09 03 02 F1 | 	add	_var02, arg01
1a1f4     02 02 66 F0 | 	shl	_var02, #2
1a1f8     01 01 02 F1 | 	add	_var01, _var02
1a1fc     04 00 06 F1 | 	add	_var01, #4
1a200     00 15 52 FC | 	wrword	arg02, _var01
1a204                 | ' word[@spr1ptr+12*num+6]:=y
1a204     F2 00 02 F6 | 	mov	_var01, objptr
1a208     09 03 02 F6 | 	mov	_var02, arg01
1a20c     01 02 66 F0 | 	shl	_var02, #1
1a210     09 03 02 F1 | 	add	_var02, arg01
1a214     02 02 66 F0 | 	shl	_var02, #2
1a218     01 01 02 F1 | 	add	_var01, _var02
1a21c     06 00 06 F1 | 	add	_var01, #6
1a220     00 17 52 FC | 	wrword	arg03, _var01
1a224     0D E5 85 F1 | 	sub	objptr, #269
1a228                 | _hg010b_spin2_setspritepos_ret
1a228     2D 00 64 FD | 	ret
1a22c                 | 
1a22c                 | ' 
1a22c                 | ' pub setspritesize(num,w,h)
1a22c                 | _hg010b_spin2_setspritesize
1a22c                 | ' word[@spr1ptr+12*num+8]:=w
1a22c     0D E5 05 F1 | 	add	objptr, #269
1a230     F2 00 02 F6 | 	mov	_var01, objptr
1a234     09 03 02 F6 | 	mov	_var02, arg01
1a238     01 02 66 F0 | 	shl	_var02, #1
1a23c     09 03 02 F1 | 	add	_var02, arg01
1a240     02 02 66 F0 | 	shl	_var02, #2
1a244     01 01 02 F1 | 	add	_var01, _var02
1a248     08 00 06 F1 | 	add	_var01, #8
1a24c     00 15 52 FC | 	wrword	arg02, _var01
1a250                 | ' word[@spr1ptr+12*num+10]:=h
1a250     F2 00 02 F6 | 	mov	_var01, objptr
1a254     09 03 02 F6 | 	mov	_var02, arg01
1a258     01 02 66 F0 | 	shl	_var02, #1
1a25c     09 03 02 F1 | 	add	_var02, arg01
1a260     02 02 66 F0 | 	shl	_var02, #2
1a264     01 01 02 F1 | 	add	_var01, _var02
1a268     0A 00 06 F1 | 	add	_var01, #10
1a26c     00 17 52 FC | 	wrword	arg03, _var01
1a270     0D E5 85 F1 | 	sub	objptr, #269
1a274                 | _hg010b_spin2_setspritesize_ret
1a274     2D 00 64 FD | 	ret
1a278                 | 
1a278                 | ' 
1a278                 | ' 
1a278                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1a278                 | ' 
1a278                 | ' 
1a278                 | ' pub putpixel(x,y,c)
1a278                 | _hg010b_spin2_putpixel
1a278     04 4A 05 F6 | 	mov	COUNT_, #4
1a27c     A8 00 A0 FD | 	call	#pushregs_
1a280     09 1F 02 F6 | 	mov	local01, arg01
1a284                 | ' 
1a284                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1a284     00 20 06 F6 | 	mov	local02, #0
1a288     00 1E 56 F2 | 	cmps	local01, #0 wc
1a28c     01 20 66 36 |  if_ae	neg	local02, #1
1a290     E5 E4 05 F1 | 	add	objptr, #229
1a294     F2 1A 02 FB | 	rdlong	arg05, objptr
1a298     02 1A 66 F0 | 	shl	arg05, #2
1a29c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1a2a0     11 23 A2 F1 | 	subx	local03, local03
1a2a4     11 21 02 F5 | 	and	local02, local03
1a2a8     00 22 06 F6 | 	mov	local03, #0
1a2ac     00 14 56 F2 | 	cmps	arg02, #0 wc
1a2b0     01 22 66 36 |  if_ae	neg	local03, #1
1a2b4     11 21 02 F5 | 	and	local02, local03
1a2b8     04 E4 85 F1 | 	sub	objptr, #4
1a2bc     F2 22 02 FB | 	rdlong	local03, objptr
1a2c0     E1 E4 85 F1 | 	sub	objptr, #225
1a2c4     11 15 52 F2 | 	cmps	arg02, local03 wc
1a2c8     12 25 A2 F1 | 	subx	local04, local04
1a2cc     12 21 CA F7 | 	test	local02, local04 wz
1a2d0     48 00 90 AD |  if_e	jmp	#LR__2030
1a2d4     D9 E4 05 F1 | 	add	objptr, #217
1a2d8     F2 12 02 FB | 	rdlong	arg01, objptr
1a2dc     14 E4 05 F1 | 	add	objptr, #20
1a2e0     F2 24 02 FB | 	rdlong	local04, objptr
1a2e4     02 24 66 F0 | 	shl	local04, #2
1a2e8     0A 25 02 FD | 	qmul	local04, arg02
1a2ec                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1a2ec     0B 15 02 F6 | 	mov	arg02, arg03
1a2f0     01 16 06 F6 | 	mov	arg03, #1
1a2f4     00 18 06 F6 | 	mov	arg04, #0
1a2f8     01 1A 06 F6 | 	mov	arg05, #1
1a2fc     0A 00 00 FF 
1a300     D3 E5 05 F1 | 	add	objptr, ##5587
1a304     18 24 62 FD | 	getqx	local04
1a308     0F 25 02 F1 | 	add	local04, local01
1a30c     12 13 02 F1 | 	add	arg01, local04
1a310     FC 14 B0 FD | 	call	#_psram_spin2_fill
1a314     0B 00 00 FF 
1a318     C0 E4 85 F1 | 	sub	objptr, ##5824
1a31c                 | LR__2030
1a31c     A7 F0 03 F6 | 	mov	ptra, fp
1a320     B2 00 A0 FD | 	call	#popregs_
1a324                 | _hg010b_spin2_putpixel_ret
1a324     2D 00 64 FD | 	ret
1a328                 | 
1a328                 | ' 
1a328                 | ' pub putpixel2(x,y,c)
1a328                 | _hg010b_spin2_putpixel2
1a328     02 4A 05 F6 | 	mov	COUNT_, #2
1a32c     A8 00 A0 FD | 	call	#pushregs_
1a330     D9 E4 05 F1 | 	add	objptr, #217
1a334     F2 1E 02 FB | 	rdlong	local01, objptr
1a338     14 E4 05 F1 | 	add	objptr, #20
1a33c     F2 1A 02 FB | 	rdlong	arg05, objptr
1a340     02 1A 66 F0 | 	shl	arg05, #2
1a344     0A 1B 02 FD | 	qmul	arg05, arg02
1a348                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1a348     0B 15 02 F6 | 	mov	arg02, arg03
1a34c     01 16 06 F6 | 	mov	arg03, #1
1a350     00 18 06 F6 | 	mov	arg04, #0
1a354     01 1A 06 F6 | 	mov	arg05, #1
1a358     0A 00 00 FF 
1a35c     D3 E5 05 F1 | 	add	objptr, ##5587
1a360     18 20 62 FD | 	getqx	local02
1a364     09 21 02 F1 | 	add	local02, arg01
1a368     10 1F 02 F1 | 	add	local01, local02
1a36c     0F 13 02 F6 | 	mov	arg01, local01
1a370     9C 14 B0 FD | 	call	#_psram_spin2_fill
1a374     0B 00 00 FF 
1a378     C0 E4 85 F1 | 	sub	objptr, ##5824
1a37c     A7 F0 03 F6 | 	mov	ptra, fp
1a380     B2 00 A0 FD | 	call	#popregs_
1a384                 | _hg010b_spin2_putpixel2_ret
1a384     2D 00 64 FD | 	ret
1a388                 | 
1a388                 | ' 
1a388                 | ' pub getpixel2(x,y): c 
1a388                 | _hg010b_spin2_getpixel2
1a388     02 4A 05 F6 | 	mov	COUNT_, #2
1a38c     A8 00 A0 FD | 	call	#pushregs_
1a390     0C F0 07 F1 | 	add	ptra, #12
1a394     04 4E 05 F1 | 	add	fp, #4
1a398     A7 12 62 FC | 	wrlong	arg01, fp
1a39c     04 4E 05 F1 | 	add	fp, #4
1a3a0     A7 14 62 FC | 	wrlong	arg02, fp
1a3a4     08 4E 85 F1 | 	sub	fp, #8
1a3a8     A7 00 68 FC | 	wrlong	#0, fp
1a3ac     A7 12 02 F6 | 	mov	arg01, fp
1a3b0     D9 E4 05 F1 | 	add	objptr, #217
1a3b4     F2 14 02 FB | 	rdlong	arg02, objptr
1a3b8     14 E4 05 F1 | 	add	objptr, #20
1a3bc     F2 16 02 FB | 	rdlong	arg03, objptr
1a3c0     02 16 66 F0 | 	shl	arg03, #2
1a3c4     08 4E 05 F1 | 	add	fp, #8
1a3c8     A7 FA 01 FB | 	rdlong	result1, fp
1a3cc     FD 16 02 FD | 	qmul	arg03, result1
1a3d0                 | ' 
1a3d0                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1a3d0     04 4E 85 F1 | 	sub	fp, #4
1a3d4     A7 1E 02 FB | 	rdlong	local01, fp
1a3d8     04 4E 85 F1 | 	sub	fp, #4
1a3dc     01 16 06 F6 | 	mov	arg03, #1
1a3e0     0A 00 00 FF 
1a3e4     D3 E5 05 F1 | 	add	objptr, ##5587
1a3e8     18 20 62 FD | 	getqx	local02
1a3ec     0F 21 02 F1 | 	add	local02, local01
1a3f0     10 15 02 F1 | 	add	arg02, local02
1a3f4     E0 12 B0 FD | 	call	#_psram_spin2_read1
1a3f8     0B 00 00 FF 
1a3fc     C0 E4 85 F1 | 	sub	objptr, ##5824
1a400                 | ' return c
1a400     A7 FA 01 FB | 	rdlong	result1, fp
1a404     A7 F0 03 F6 | 	mov	ptra, fp
1a408     B2 00 A0 FD | 	call	#popregs_
1a40c                 | _hg010b_spin2_getpixel2_ret
1a40c     2D 00 64 FD | 	ret
1a410                 | 
1a410                 | '   
1a410                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1a410                 | ' 
1a410                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1a410                 | _hg010b_spin2_fastline
1a410     02 4A 05 F6 | 	mov	COUNT_, #2
1a414     A8 00 A0 FD | 	call	#pushregs_
1a418     09 1F 02 F6 | 	mov	local01, arg01
1a41c     0A 21 02 F6 | 	mov	local02, arg02
1a420                 | ' 
1a420                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1a420     00 16 56 F2 | 	cmps	arg03, #0 wc
1a424     F4 00 90 CD |  if_b	jmp	#LR__2040
1a428     01 00 00 FF 
1a42c     26 E4 05 F1 | 	add	objptr, ##550
1a430     F2 1A 02 FB | 	rdlong	arg05, objptr
1a434     01 00 00 FF 
1a438     26 E4 85 F1 | 	sub	objptr, ##550
1a43c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1a440     D8 00 90 3D |  if_ae	jmp	#LR__2040
1a444     00 1E 56 F2 | 	cmps	local01, #0 wc
1a448     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1a44c     CC 00 90 CD |  if_b	jmp	#LR__2040
1a450     01 00 00 FF 
1a454     22 E4 05 F1 | 	add	objptr, ##546
1a458     F2 1A 02 FB | 	rdlong	arg05, objptr
1a45c     01 00 00 FF 
1a460     22 E4 85 F1 | 	sub	objptr, ##546
1a464     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1a468     01 00 00 1F 
1a46c     22 E4 05 11 |  if_a	add	objptr, ##546
1a470     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1a474     01 00 00 1F 
1a478     22 E4 85 11 |  if_a	sub	objptr, ##546
1a47c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1a480                 | '   return
1a480     98 00 90 1D |  if_a	jmp	#LR__2040
1a484     10 1F 5A F2 | 	cmps	local01, local02 wcz
1a488     0F 1B 02 16 |  if_a	mov	arg05, local01
1a48c     10 1F 02 16 |  if_a	mov	local01, local02
1a490     0D 21 02 16 |  if_a	mov	local02, arg05
1a494     00 1E 56 F2 | 	cmps	local01, #0 wc
1a498     00 1E 06 C6 |  if_b	mov	local01, #0
1a49c     01 00 00 FF 
1a4a0     22 E4 05 F1 | 	add	objptr, ##546
1a4a4     F2 1A 02 FB | 	rdlong	arg05, objptr
1a4a8     01 00 00 FF 
1a4ac     22 E4 85 F1 | 	sub	objptr, ##546
1a4b0     0D 21 52 F2 | 	cmps	local02, arg05 wc
1a4b4     01 00 00 3F 
1a4b8     22 E4 05 31 |  if_ae	add	objptr, ##546
1a4bc     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1a4c0     01 00 00 3F 
1a4c4     22 E4 85 31 |  if_ae	sub	objptr, ##546
1a4c8     D9 E4 05 F1 | 	add	objptr, #217
1a4cc     F2 12 02 FB | 	rdlong	arg01, objptr
1a4d0     14 E4 05 F1 | 	add	objptr, #20
1a4d4     F2 1A 02 FB | 	rdlong	arg05, objptr
1a4d8     02 1A 66 F0 | 	shl	arg05, #2
1a4dc     0B 1B 02 FD | 	qmul	arg05, arg03
1a4e0                 | ' if x1>x2
1a4e0                 | '   x1,x2:=x2,x1
1a4e0                 | ' if x1<0 
1a4e0                 | '   x1:=0
1a4e0                 | ' if x2>=xres
1a4e0                 | '   x2:=xres-1  
1a4e0     01 20 86 31 |  if_ae	sub	local02, #1
1a4e4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1a4e4     01 16 06 F6 | 	mov	arg03, #1
1a4e8     10 17 02 F1 | 	add	arg03, local02
1a4ec     0F 17 82 F1 | 	sub	arg03, local01
1a4f0     0C 15 02 F6 | 	mov	arg02, arg04
1a4f4     00 18 06 F6 | 	mov	arg04, #0
1a4f8     01 1A 06 F6 | 	mov	arg05, #1
1a4fc     0A 00 00 FF 
1a500     D3 E5 05 F1 | 	add	objptr, ##5587
1a504     18 20 62 FD | 	getqx	local02
1a508     0F 21 02 F1 | 	add	local02, local01
1a50c     10 13 02 F1 | 	add	arg01, local02
1a510     FC 12 B0 FD | 	call	#_psram_spin2_fill
1a514     0B 00 00 FF 
1a518     C0 E4 85 F1 | 	sub	objptr, ##5824
1a51c                 | LR__2040
1a51c     A7 F0 03 F6 | 	mov	ptra, fp
1a520     B2 00 A0 FD | 	call	#popregs_
1a524                 | _hg010b_spin2_fastline_ret
1a524     2D 00 64 FD | 	ret
1a528                 | 
1a528                 | ' 
1a528                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1a528                 | _hg010b_spin2_draw
1a528     0E 4A 05 F6 | 	mov	COUNT_, #14
1a52c     A8 00 A0 FD | 	call	#pushregs_
1a530     09 1F 02 F6 | 	mov	local01, arg01
1a534     0A 21 02 F6 | 	mov	local02, arg02
1a538     0B 23 02 F6 | 	mov	local03, arg03
1a53c     0C 25 02 F6 | 	mov	local04, arg04
1a540     0D 27 02 F6 | 	mov	local05, arg05
1a544                 | ' 
1a544                 | ' if (y1==y2)
1a544     12 21 0A F2 | 	cmp	local02, local04 wz
1a548     18 00 90 5D |  if_ne	jmp	#LR__2050
1a54c                 | '   fastline(x1,x2,y1,c)
1a54c     0F 13 02 F6 | 	mov	arg01, local01
1a550     11 15 02 F6 | 	mov	arg02, local03
1a554     10 17 02 F6 | 	mov	arg03, local02
1a558     13 19 02 F6 | 	mov	arg04, local05
1a55c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1a560     F8 00 90 FD | 	jmp	#LR__2056
1a564                 | LR__2050
1a564                 | ' else  
1a564                 | '   x:=x1
1a564     0F 29 02 F6 | 	mov	local06, local01
1a568                 | '   y:=y1
1a568     10 2B 02 F6 | 	mov	local07, local02
1a56c                 | ' 
1a56c                 | '   if (x1<x2) 
1a56c     11 1F 52 F2 | 	cmps	local01, local03 wc
1a570                 | '     xi:=1
1a570     01 2C 06 C6 |  if_b	mov	local08, #1
1a574                 | '     dx:=x2-x1
1a574     11 2F 02 C6 |  if_b	mov	local09, local03
1a578     0F 2F 82 C1 |  if_b	sub	local09, local01
1a57c                 | '   else
1a57c                 | '     xi:=-1
1a57c     01 2C 66 36 |  if_ae	neg	local08, #1
1a580                 | '     dx:=x1-x2
1a580     11 1F 82 31 |  if_ae	sub	local01, local03
1a584     0F 2F 02 36 |  if_ae	mov	local09, local01
1a588                 | '   
1a588                 | '   if (y1<y2) 
1a588     12 21 52 F2 | 	cmps	local02, local04 wc
1a58c                 | '     yi:=1
1a58c     01 30 06 C6 |  if_b	mov	local10, #1
1a590                 | '     dy:=y2-y1
1a590     12 33 02 C6 |  if_b	mov	local11, local04
1a594     10 33 82 C1 |  if_b	sub	local11, local02
1a598                 | '   else
1a598                 | '     yi:=-1
1a598     01 30 66 36 |  if_ae	neg	local10, #1
1a59c                 | '     dy:=y1-y2
1a59c     12 21 82 31 |  if_ae	sub	local02, local04
1a5a0     10 33 02 36 |  if_ae	mov	local11, local02
1a5a4                 | ' 
1a5a4                 | '   putpixel(x,y,c)
1a5a4     13 17 02 F6 | 	mov	arg03, local05
1a5a8     14 13 02 F6 | 	mov	arg01, local06
1a5ac     15 15 02 F6 | 	mov	arg02, local07
1a5b0     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a5b4                 | ' 
1a5b4                 | '   if (dx>dy)
1a5b4     19 2F 5A F2 | 	cmps	local09, local11 wcz
1a5b8     50 00 90 ED |  if_be	jmp	#LR__2052
1a5bc                 | '     ai:=(dy-dx)*2
1a5bc     19 35 02 F6 | 	mov	local12, local11
1a5c0     17 35 82 F1 | 	sub	local12, local09
1a5c4     01 34 66 F0 | 	shl	local12, #1
1a5c8                 | '     bi:=dy*2
1a5c8     01 32 66 F0 | 	shl	local11, #1
1a5cc     19 37 02 F6 | 	mov	local13, local11
1a5d0                 | '     d:= bi-dx
1a5d0     1B 39 02 F6 | 	mov	local14, local13
1a5d4     17 39 82 F1 | 	sub	local14, local09
1a5d8                 | '     repeat while (x<>x2) 
1a5d8                 | LR__2051
1a5d8     11 29 0A F2 | 	cmp	local06, local03 wz
1a5dc     7C 00 90 AD |  if_e	jmp	#LR__2055
1a5e0                 | '       if (d>=0) 
1a5e0     00 38 56 F2 | 	cmps	local14, #0 wc
1a5e4                 | '         x+=xi
1a5e4     16 29 02 31 |  if_ae	add	local06, local08
1a5e8                 | '         y+=yi
1a5e8     18 2B 02 31 |  if_ae	add	local07, local10
1a5ec                 | '         d+=ai
1a5ec     1A 39 02 31 |  if_ae	add	local14, local12
1a5f0                 | '       else
1a5f0                 | '         d+=bi
1a5f0     1B 39 02 C1 |  if_b	add	local14, local13
1a5f4                 | '         x+=xi
1a5f4     16 29 02 C1 |  if_b	add	local06, local08
1a5f8                 | '       putpixel(x,y,c)
1a5f8     14 13 02 F6 | 	mov	arg01, local06
1a5fc     15 15 02 F6 | 	mov	arg02, local07
1a600     13 17 02 F6 | 	mov	arg03, local05
1a604     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a608     CC FF 9F FD | 	jmp	#LR__2051
1a60c                 | LR__2052
1a60c                 | '   else
1a60c                 | '     ai:=(dx-dy)*2
1a60c     17 35 02 F6 | 	mov	local12, local09
1a610     19 35 82 F1 | 	sub	local12, local11
1a614     01 34 66 F0 | 	shl	local12, #1
1a618                 | '     bi:=dx*2
1a618     01 2E 66 F0 | 	shl	local09, #1
1a61c     17 37 02 F6 | 	mov	local13, local09
1a620                 | '     d:=bi-dy
1a620     1B 39 02 F6 | 	mov	local14, local13
1a624     19 39 82 F1 | 	sub	local14, local11
1a628                 | '     repeat while (y<>y2)
1a628                 | LR__2053
1a628     12 2B 0A F2 | 	cmp	local07, local04 wz
1a62c     2C 00 90 AD |  if_e	jmp	#LR__2054
1a630                 | '       if (d>=0)
1a630     00 38 56 F2 | 	cmps	local14, #0 wc
1a634                 | '         x+=xi
1a634     16 29 02 31 |  if_ae	add	local06, local08
1a638                 | '         y+=yi
1a638     18 2B 02 31 |  if_ae	add	local07, local10
1a63c                 | '         d+=ai
1a63c     1A 39 02 31 |  if_ae	add	local14, local12
1a640                 | '       else
1a640                 | '         d+=bi
1a640     1B 39 02 C1 |  if_b	add	local14, local13
1a644                 | '         y+=yi
1a644     18 2B 02 C1 |  if_b	add	local07, local10
1a648                 | '       putpixel(x, y,c)
1a648     14 13 02 F6 | 	mov	arg01, local06
1a64c     15 15 02 F6 | 	mov	arg02, local07
1a650     13 17 02 F6 | 	mov	arg03, local05
1a654     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a658     CC FF 9F FD | 	jmp	#LR__2053
1a65c                 | LR__2054
1a65c                 | LR__2055
1a65c                 | LR__2056
1a65c     A7 F0 03 F6 | 	mov	ptra, fp
1a660     B2 00 A0 FD | 	call	#popregs_
1a664                 | _hg010b_spin2_draw_ret
1a664     2D 00 64 FD | 	ret
1a668                 | 
1a668                 | '  
1a668                 | ' pub fillpush(val) 
1a668                 | _hg010b_spin2_fillpush
1a668                 | ' fillstack[fillptr]:=val
1a668     0B 00 00 FF 
1a66c     B6 E4 05 F1 | 	add	objptr, ##5814
1a670     F2 00 02 FB | 	rdlong	_var01, objptr
1a674     02 00 66 F0 | 	shl	_var01, #2
1a678     0A 00 00 FF 
1a67c     00 E4 85 F1 | 	sub	objptr, ##5120
1a680     F2 00 02 F1 | 	add	_var01, objptr
1a684     00 13 62 FC | 	wrlong	arg01, _var01
1a688                 | ' fillptr+=1   
1a688     0A 00 00 FF 
1a68c     00 E4 05 F1 | 	add	objptr, ##5120
1a690     F2 00 02 FB | 	rdlong	_var01, objptr
1a694     01 00 06 F1 | 	add	_var01, #1
1a698     F2 00 62 FC | 	wrlong	_var01, objptr
1a69c     0B 00 00 FF 
1a6a0     B6 E4 85 F1 | 	sub	objptr, ##5814
1a6a4                 | _hg010b_spin2_fillpush_ret
1a6a4     2D 00 64 FD | 	ret
1a6a8                 | 
1a6a8                 | ' 
1a6a8                 | '     
1a6a8                 | ' pub fillpop() : val
1a6a8                 | _hg010b_spin2_fillpop
1a6a8                 | ' 
1a6a8                 | ' fillptr-=1
1a6a8     0B 00 00 FF 
1a6ac     B6 E4 05 F1 | 	add	objptr, ##5814
1a6b0     F2 FA 01 FB | 	rdlong	result1, objptr
1a6b4     01 FA 85 F1 | 	sub	result1, #1
1a6b8     F2 FA 61 FC | 	wrlong	result1, objptr
1a6bc                 | ' if fillptr<0
1a6bc     0B 00 00 FF 
1a6c0     B6 E4 85 F1 | 	sub	objptr, ##5814
1a6c4     00 FA 55 F2 | 	cmps	result1, #0 wc
1a6c8                 | '   fillptr:=0
1a6c8     0B 00 00 CF 
1a6cc     B6 E4 05 C1 |  if_b	add	objptr, ##5814
1a6d0     F2 00 68 CC |  if_b	wrlong	#0, objptr
1a6d4     0B 00 00 CF 
1a6d8     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
1a6dc                 | '   val:=-12345
1a6dc     E7 FF 7F CF 
1a6e0     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1a6e4     28 00 90 CD |  if_b	jmp	#LR__2060
1a6e8                 | ' else 
1a6e8                 | '   val:=fillstack[fillptr]
1a6e8     0B 00 00 FF 
1a6ec     B6 E4 05 F1 | 	add	objptr, ##5814
1a6f0     F2 00 02 FB | 	rdlong	_var01, objptr
1a6f4     02 00 66 F0 | 	shl	_var01, #2
1a6f8     0A 00 00 FF 
1a6fc     00 E4 85 F1 | 	sub	objptr, ##5120
1a700     F2 00 02 F1 | 	add	_var01, objptr
1a704     00 01 02 FB | 	rdlong	_var01, _var01
1a708     01 00 00 FF 
1a70c     B6 E4 85 F1 | 	sub	objptr, ##694
1a710                 | LR__2060
1a710                 | ' return val
1a710     00 FB 01 F6 | 	mov	result1, _var01
1a714                 | _hg010b_spin2_fillpop_ret
1a714     2D 00 64 FD | 	ret
1a718                 | 
1a718                 | ' 
1a718                 | '       
1a718                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1a718                 | _hg010b_spin2_fill
1a718     0B 4A 05 F6 | 	mov	COUNT_, #11
1a71c     A8 00 A0 FD | 	call	#pushregs_
1a720                 | ' 
1a720                 | ' newcolor:=newcolor & 255
1a720     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1a724                 | ' oldcolor:=oldcolor & 255
1a724     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1a728                 | ' 
1a728                 | ' if (oldcolor == newcolor) 
1a728     0F 21 0A F2 | 	cmp	local02, local01 wz
1a72c                 | '   return
1a72c     70 02 90 AD |  if_e	jmp	#LR__2079
1a730                 | ' 
1a730                 | ' fillptr:=0
1a730     0B 00 00 FF 
1a734     B6 E4 05 F1 | 	add	objptr, ##5814
1a738     F2 00 68 FC | 	wrlong	#0, objptr
1a73c                 | ' fillmax:=0
1a73c     04 E4 05 F1 | 	add	objptr, #4
1a740     F2 00 68 FC | 	wrlong	#0, objptr
1a744     0B 00 00 FF 
1a748     BA E4 85 F1 | 	sub	objptr, ##5818
1a74c                 | ' fillpush(x)
1a74c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1a750                 | ' fillpush(y)
1a750     0A 13 02 F6 | 	mov	arg01, arg02
1a754     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1a758                 | ' y:=fillpop()
1a758     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1a75c     FD 22 02 F6 | 	mov	local03, result1
1a760                 | ' x:=fillpop()
1a760     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1a764     FD 24 02 F6 | 	mov	local04, result1
1a768                 | ' 'pinhigh(38)
1a768                 | ' repeat while (x>-1)       
1a768                 | LR__2070
1a768     00 24 56 F2 | 	cmps	local04, #0 wc
1a76c     30 02 90 CD |  if_b	jmp	#LR__2078
1a770                 | '  ' pintoggle(39)
1a770                 | '   x1 := x
1a770     12 27 02 F6 | 	mov	local05, local04
1a774                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1a774                 | LR__2071
1a774     00 28 06 F6 | 	mov	local06, #0
1a778     00 2A 06 F6 | 	mov	local07, #0
1a77c     00 26 56 F2 | 	cmps	local05, #0 wc
1a780     01 2A 66 36 |  if_ae	neg	local07, #1
1a784     00 2A 0E F2 | 	cmp	local07, #0 wz
1a788     00 28 26 56 |  if_ne	not	local06, #0
1a78c     00 2C 06 F6 | 	mov	local08, #0
1a790     00 2E 06 F6 | 	mov	local09, #0
1a794     11 15 02 F6 | 	mov	arg02, local03
1a798     13 13 02 F6 | 	mov	arg01, local05
1a79c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a7a0     10 FB 09 F2 | 	cmp	result1, local02 wz
1a7a4     00 2E 26 A6 |  if_e	not	local09, #0
1a7a8     00 2E 0E F2 | 	cmp	local09, #0 wz
1a7ac     00 2C 26 56 |  if_ne	not	local08, #0
1a7b0     16 29 CA F7 | 	test	local06, local08 wz
1a7b4                 | '     x1--
1a7b4     01 26 86 51 |  if_ne	sub	local05, #1
1a7b8     B8 FF 9F 5D |  if_ne	jmp	#LR__2071
1a7bc                 | '   x1++
1a7bc     01 26 06 F1 | 	add	local05, #1
1a7c0                 | '   spanabove := 0
1a7c0     00 30 06 F6 | 	mov	local10, #0
1a7c4                 | '   spanbelow := 0
1a7c4     00 32 06 F6 | 	mov	local11, #0
1a7c8                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1a7c8                 | LR__2072
1a7c8     00 28 06 F6 | 	mov	local06, #0
1a7cc     02 00 00 FF 
1a7d0     00 26 56 F2 | 	cmps	local05, ##1024 wc
1a7d4     00 28 26 C6 |  if_b	not	local06, #0
1a7d8     00 2C 06 F6 | 	mov	local08, #0
1a7dc     00 2E 06 F6 | 	mov	local09, #0
1a7e0     11 15 02 F6 | 	mov	arg02, local03
1a7e4     13 13 02 F6 | 	mov	arg01, local05
1a7e8     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a7ec     10 FB 09 F2 | 	cmp	result1, local02 wz
1a7f0     00 2E 26 A6 |  if_e	not	local09, #0
1a7f4     00 2E 0E F2 | 	cmp	local09, #0 wz
1a7f8     00 2C 26 56 |  if_ne	not	local08, #0
1a7fc     16 29 CA F7 | 	test	local06, local08 wz
1a800     88 01 90 AD |  if_e	jmp	#LR__2077
1a804                 | '     putpixel2 (x1,y, newcolor & 255)
1a804     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1a808     13 13 02 F6 | 	mov	arg01, local05
1a80c     11 15 02 F6 | 	mov	arg02, local03
1a810     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1a814                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1a814     00 28 06 F6 | 	mov	local06, #0
1a818     00 2A 06 F6 | 	mov	local07, #0
1a81c     00 30 0E F2 | 	cmp	local10, #0 wz
1a820     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1a824     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1a828     00 2A 0E F2 | 	cmp	local07, #0 wz
1a82c     00 28 26 56 |  if_ne	not	local06, #0
1a830     00 2C 06 F6 | 	mov	local08, #0
1a834     00 2E 06 F6 | 	mov	local09, #0
1a838     11 15 02 F6 | 	mov	arg02, local03
1a83c     01 14 86 F1 | 	sub	arg02, #1
1a840     13 13 02 F6 | 	mov	arg01, local05
1a844     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a848     10 FB 09 F2 | 	cmp	result1, local02 wz
1a84c     00 2E 26 A6 |  if_e	not	local09, #0
1a850     00 2E 0E F2 | 	cmp	local09, #0 wz
1a854     00 2C 26 56 |  if_ne	not	local08, #0
1a858     16 29 CA F7 | 	test	local06, local08 wz
1a85c     1C 00 90 AD |  if_e	jmp	#LR__2073
1a860                 | '       fillpush(x1)
1a860     13 13 02 F6 | 	mov	arg01, local05
1a864     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1a868                 | '       fillpush(y-1)
1a868     11 13 02 F6 | 	mov	arg01, local03
1a86c     01 12 86 F1 | 	sub	arg01, #1
1a870     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1a874                 | '       spanabove := 1 
1a874     01 30 06 F6 | 	mov	local10, #1
1a878     4C 00 90 FD | 	jmp	#LR__2074
1a87c                 | LR__2073
1a87c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1a87c     00 28 06 F6 | 	mov	local06, #0
1a880     00 2A 06 F6 | 	mov	local07, #0
1a884     00 30 0E F2 | 	cmp	local10, #0 wz
1a888     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1a88c     01 2A 66 16 |  if_a	neg	local07, #1
1a890     00 2A 0E F2 | 	cmp	local07, #0 wz
1a894     00 28 26 56 |  if_ne	not	local06, #0
1a898     00 2C 06 F6 | 	mov	local08, #0
1a89c     00 2E 06 F6 | 	mov	local09, #0
1a8a0     11 15 02 F6 | 	mov	arg02, local03
1a8a4     01 14 86 F1 | 	sub	arg02, #1
1a8a8     13 13 02 F6 | 	mov	arg01, local05
1a8ac     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a8b0     10 FB 09 F2 | 	cmp	result1, local02 wz
1a8b4     00 2E 26 56 |  if_ne	not	local09, #0
1a8b8     00 2E 0E F2 | 	cmp	local09, #0 wz
1a8bc     00 2C 26 56 |  if_ne	not	local08, #0
1a8c0     16 29 CA F7 | 	test	local06, local08 wz
1a8c4                 | '       spanabove := 0 
1a8c4     00 30 06 56 |  if_ne	mov	local10, #0
1a8c8                 | LR__2074
1a8c8                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1a8c8     00 28 06 F6 | 	mov	local06, #0
1a8cc     00 2A 06 F6 | 	mov	local07, #0
1a8d0     00 32 0E F2 | 	cmp	local11, #0 wz
1a8d4     01 00 00 AF 
1a8d8     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1a8dc     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1a8e0     00 2A 0E F2 | 	cmp	local07, #0 wz
1a8e4     00 28 26 56 |  if_ne	not	local06, #0
1a8e8     00 2C 06 F6 | 	mov	local08, #0
1a8ec     00 2E 06 F6 | 	mov	local09, #0
1a8f0     11 15 02 F6 | 	mov	arg02, local03
1a8f4     01 14 06 F1 | 	add	arg02, #1
1a8f8     13 13 02 F6 | 	mov	arg01, local05
1a8fc     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a900     10 FB 09 F2 | 	cmp	result1, local02 wz
1a904     00 2E 26 A6 |  if_e	not	local09, #0
1a908     00 2E 0E F2 | 	cmp	local09, #0 wz
1a90c     00 2C 26 56 |  if_ne	not	local08, #0
1a910     16 29 CA F7 | 	test	local06, local08 wz
1a914     1C 00 90 AD |  if_e	jmp	#LR__2075
1a918                 | '       fillpush(x1)
1a918     13 13 02 F6 | 	mov	arg01, local05
1a91c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1a920                 | '       fillpush(y + 1)
1a920     11 13 02 F6 | 	mov	arg01, local03
1a924     01 12 06 F1 | 	add	arg01, #1
1a928     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1a92c                 | '       spanBelow := 1
1a92c     01 32 06 F6 | 	mov	local11, #1
1a930     50 00 90 FD | 	jmp	#LR__2076
1a934                 | LR__2075
1a934                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1a934     00 28 06 F6 | 	mov	local06, #0
1a938     00 2A 06 F6 | 	mov	local07, #0
1a93c     00 32 0E F2 | 	cmp	local11, #0 wz
1a940     01 00 00 5F 
1a944     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1a948     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1a94c     00 2A 0E F2 | 	cmp	local07, #0 wz
1a950     00 28 26 56 |  if_ne	not	local06, #0
1a954     00 2C 06 F6 | 	mov	local08, #0
1a958     00 2E 06 F6 | 	mov	local09, #0
1a95c     11 15 02 F6 | 	mov	arg02, local03
1a960     01 14 06 F1 | 	add	arg02, #1
1a964     13 13 02 F6 | 	mov	arg01, local05
1a968     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a96c     10 FB 09 F2 | 	cmp	result1, local02 wz
1a970     00 2E 26 56 |  if_ne	not	local09, #0
1a974     00 2E 0E F2 | 	cmp	local09, #0 wz
1a978     00 2C 26 56 |  if_ne	not	local08, #0
1a97c     16 29 CA F7 | 	test	local06, local08 wz
1a980                 | '       spanbelow := 0
1a980     00 32 06 56 |  if_ne	mov	local11, #0
1a984                 | LR__2076
1a984                 | '     x1++
1a984     01 26 06 F1 | 	add	local05, #1
1a988     3C FE 9F FD | 	jmp	#LR__2072
1a98c                 | LR__2077
1a98c                 | '   y:=fillpop()
1a98c     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1a990     FD 22 02 F6 | 	mov	local03, result1
1a994                 | '   x:=fillpop()
1a994     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1a998     FD 24 02 F6 | 	mov	local04, result1
1a99c     C8 FD 9F FD | 	jmp	#LR__2070
1a9a0                 | LR__2078
1a9a0                 | LR__2079
1a9a0     A7 F0 03 F6 | 	mov	ptra, fp
1a9a4     B2 00 A0 FD | 	call	#popregs_
1a9a8                 | _hg010b_spin2_fill_ret
1a9a8     2D 00 64 FD | 	ret
1a9ac                 | 
1a9ac                 | ' 'pinlow(38)    
1a9ac                 | ' 
1a9ac                 | ' '-- A filled circle -----------------------------------------------------
1a9ac                 | ' 
1a9ac                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1a9ac                 | _hg010b_spin2_fcircle
1a9ac     08 4A 05 F6 | 	mov	COUNT_, #8
1a9b0     A8 00 A0 FD | 	call	#pushregs_
1a9b4     0B 1F 02 F6 | 	mov	local01, arg03
1a9b8     FF FF 7F FF 
1a9bc     FE 1F 06 FD | 	qmul	local01, ##-2
1a9c0     09 21 02 F6 | 	mov	local02, arg01
1a9c4     0A 23 02 F6 | 	mov	local03, arg02
1a9c8     0C 25 02 F6 | 	mov	local04, arg04
1a9cc                 | ' 
1a9cc                 | ' d:=5-4*r
1a9cc     0F 19 02 F6 | 	mov	arg04, local01
1a9d0     02 18 66 F0 | 	shl	arg04, #2
1a9d4     05 26 06 F6 | 	mov	local05, #5
1a9d8     0C 27 82 F1 | 	sub	local05, arg04
1a9dc                 | ' x:=0
1a9dc     00 28 06 F6 | 	mov	local06, #0
1a9e0                 | ' y:=r
1a9e0                 | ' da:=(-2*r+5)*4
1a9e0                 | ' db:=3*4
1a9e0     0C 2A 06 F6 | 	mov	local07, #12
1a9e4                 | ' repeat while (x<=y) 
1a9e4     18 2C 62 FD | 	getqx	local08
1a9e8     05 2C 06 F1 | 	add	local08, #5
1a9ec     02 2C 66 F0 | 	shl	local08, #2
1a9f0                 | LR__2080
1a9f0     0F 29 5A F2 | 	cmps	local06, local01 wcz
1a9f4     B4 00 90 1D |  if_a	jmp	#LR__2082
1a9f8                 | '   fastline(x0-x,x0+x,y0-y,c)
1a9f8     10 13 02 F6 | 	mov	arg01, local02
1a9fc     14 13 82 F1 | 	sub	arg01, local06
1aa00     10 15 02 F6 | 	mov	arg02, local02
1aa04     14 15 02 F1 | 	add	arg02, local06
1aa08     11 17 02 F6 | 	mov	arg03, local03
1aa0c     0F 17 82 F1 | 	sub	arg03, local01
1aa10     12 19 02 F6 | 	mov	arg04, local04
1aa14     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1aa18                 | '   fastline(x0-x,x0+x,y0+y,c)
1aa18     10 13 02 F6 | 	mov	arg01, local02
1aa1c     14 13 82 F1 | 	sub	arg01, local06
1aa20     10 15 02 F6 | 	mov	arg02, local02
1aa24     14 15 02 F1 | 	add	arg02, local06
1aa28     11 17 02 F6 | 	mov	arg03, local03
1aa2c     0F 17 02 F1 | 	add	arg03, local01
1aa30     12 19 02 F6 | 	mov	arg04, local04
1aa34     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1aa38                 | '   fastline(x0-y,x0+y,y0-x,c)
1aa38     10 13 02 F6 | 	mov	arg01, local02
1aa3c     0F 13 82 F1 | 	sub	arg01, local01
1aa40     10 15 02 F6 | 	mov	arg02, local02
1aa44     0F 15 02 F1 | 	add	arg02, local01
1aa48     11 17 02 F6 | 	mov	arg03, local03
1aa4c     14 17 82 F1 | 	sub	arg03, local06
1aa50     12 19 02 F6 | 	mov	arg04, local04
1aa54     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1aa58                 | '   fastline(x0-y,x0+y,y0+x,c)
1aa58     10 13 02 F6 | 	mov	arg01, local02
1aa5c     0F 13 82 F1 | 	sub	arg01, local01
1aa60     10 15 02 F6 | 	mov	arg02, local02
1aa64     0F 15 02 F1 | 	add	arg02, local01
1aa68     11 17 02 F6 | 	mov	arg03, local03
1aa6c     14 17 02 F1 | 	add	arg03, local06
1aa70     12 19 02 F6 | 	mov	arg04, local04
1aa74     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1aa78                 | '   if d>0 
1aa78     01 26 56 F2 | 	cmps	local05, #1 wc
1aa7c     18 00 90 CD |  if_b	jmp	#LR__2081
1aa80                 | '     d+=da
1aa80     16 27 02 F1 | 	add	local05, local08
1aa84                 | '     y-=1
1aa84     01 1E 86 F1 | 	sub	local01, #1
1aa88                 | '     x+=1
1aa88     01 28 06 F1 | 	add	local06, #1
1aa8c                 | '     da+=4*4
1aa8c     10 2C 06 F1 | 	add	local08, #16
1aa90                 | '     db+=2*4
1aa90     08 2A 06 F1 | 	add	local07, #8
1aa94     58 FF 9F FD | 	jmp	#LR__2080
1aa98                 | LR__2081
1aa98                 | '   else
1aa98                 | '     d+=db
1aa98     15 27 02 F1 | 	add	local05, local07
1aa9c                 | '     x+=1
1aa9c     01 28 06 F1 | 	add	local06, #1
1aaa0                 | '     da+=2*4
1aaa0     08 2C 06 F1 | 	add	local08, #8
1aaa4                 | '     db+=2*4
1aaa4     08 2A 06 F1 | 	add	local07, #8
1aaa8     44 FF 9F FD | 	jmp	#LR__2080
1aaac                 | LR__2082
1aaac     A7 F0 03 F6 | 	mov	ptra, fp
1aab0     B2 00 A0 FD | 	call	#popregs_
1aab4                 | _hg010b_spin2_fcircle_ret
1aab4     2D 00 64 FD | 	ret
1aab8                 | 
1aab8                 | '  
1aab8                 | ' '-- A circle ------------------------------------------------------------ 
1aab8                 | '  
1aab8                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1aab8                 | _hg010b_spin2_circle
1aab8     08 4A 05 F6 | 	mov	COUNT_, #8
1aabc     A8 00 A0 FD | 	call	#pushregs_
1aac0     0B 1F 02 F6 | 	mov	local01, arg03
1aac4     FF FF 7F FF 
1aac8     FE 1F 06 FD | 	qmul	local01, ##-2
1aacc     09 21 02 F6 | 	mov	local02, arg01
1aad0     0A 23 02 F6 | 	mov	local03, arg02
1aad4     0C 25 02 F6 | 	mov	local04, arg04
1aad8                 | ' 
1aad8                 | '  
1aad8                 | ' d:=5-4*r
1aad8     0F 19 02 F6 | 	mov	arg04, local01
1aadc     02 18 66 F0 | 	shl	arg04, #2
1aae0     05 26 06 F6 | 	mov	local05, #5
1aae4     0C 27 82 F1 | 	sub	local05, arg04
1aae8                 | ' x:=0
1aae8     00 28 06 F6 | 	mov	local06, #0
1aaec                 | ' y:=r
1aaec                 | ' da:=(-2*r+5)*4
1aaec                 | ' db:=3*4
1aaec     0C 2A 06 F6 | 	mov	local07, #12
1aaf0                 | ' repeat while (x<=y) 
1aaf0     18 2C 62 FD | 	getqx	local08
1aaf4     05 2C 06 F1 | 	add	local08, #5
1aaf8     02 2C 66 F0 | 	shl	local08, #2
1aafc                 | LR__2090
1aafc     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ab00     F4 00 90 1D |  if_a	jmp	#LR__2092
1ab04                 | '   putpixel(x0-x,y0-y,c)
1ab04     10 13 02 F6 | 	mov	arg01, local02
1ab08     14 13 82 F1 | 	sub	arg01, local06
1ab0c     11 15 02 F6 | 	mov	arg02, local03
1ab10     0F 15 82 F1 | 	sub	arg02, local01
1ab14     12 17 02 F6 | 	mov	arg03, local04
1ab18     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ab1c                 | '   putpixel(x0-x,y0+y,c)
1ab1c     10 13 02 F6 | 	mov	arg01, local02
1ab20     14 13 82 F1 | 	sub	arg01, local06
1ab24     11 15 02 F6 | 	mov	arg02, local03
1ab28     0F 15 02 F1 | 	add	arg02, local01
1ab2c     12 17 02 F6 | 	mov	arg03, local04
1ab30     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ab34                 | '   putpixel(x0+x,y0-y,c)
1ab34     10 13 02 F6 | 	mov	arg01, local02
1ab38     14 13 02 F1 | 	add	arg01, local06
1ab3c     11 15 02 F6 | 	mov	arg02, local03
1ab40     0F 15 82 F1 | 	sub	arg02, local01
1ab44     12 17 02 F6 | 	mov	arg03, local04
1ab48     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ab4c                 | '   putpixel(x0+x,y0+y,c)
1ab4c     10 13 02 F6 | 	mov	arg01, local02
1ab50     14 13 02 F1 | 	add	arg01, local06
1ab54     11 15 02 F6 | 	mov	arg02, local03
1ab58     0F 15 02 F1 | 	add	arg02, local01
1ab5c     12 17 02 F6 | 	mov	arg03, local04
1ab60     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ab64                 | '   putpixel(x0-y,y0-x,c)
1ab64     10 13 02 F6 | 	mov	arg01, local02
1ab68     0F 13 82 F1 | 	sub	arg01, local01
1ab6c     11 15 02 F6 | 	mov	arg02, local03
1ab70     14 15 82 F1 | 	sub	arg02, local06
1ab74     12 17 02 F6 | 	mov	arg03, local04
1ab78     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ab7c                 | '   putpixel(x0-y,y0+x,c)
1ab7c     10 13 02 F6 | 	mov	arg01, local02
1ab80     0F 13 82 F1 | 	sub	arg01, local01
1ab84     11 15 02 F6 | 	mov	arg02, local03
1ab88     14 15 02 F1 | 	add	arg02, local06
1ab8c     12 17 02 F6 | 	mov	arg03, local04
1ab90     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ab94                 | '   putpixel(x0+y,y0-x,c)
1ab94     10 13 02 F6 | 	mov	arg01, local02
1ab98     0F 13 02 F1 | 	add	arg01, local01
1ab9c     11 15 02 F6 | 	mov	arg02, local03
1aba0     14 15 82 F1 | 	sub	arg02, local06
1aba4     12 17 02 F6 | 	mov	arg03, local04
1aba8     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1abac                 | '   putpixel(x0+y,y0+x,c)
1abac     10 13 02 F6 | 	mov	arg01, local02
1abb0     0F 13 02 F1 | 	add	arg01, local01
1abb4     11 15 02 F6 | 	mov	arg02, local03
1abb8     14 15 02 F1 | 	add	arg02, local06
1abbc     12 17 02 F6 | 	mov	arg03, local04
1abc0     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1abc4                 | '   if d>0 
1abc4     01 26 56 F2 | 	cmps	local05, #1 wc
1abc8     18 00 90 CD |  if_b	jmp	#LR__2091
1abcc                 | '     d+=da
1abcc     16 27 02 F1 | 	add	local05, local08
1abd0                 | '     y-=1
1abd0     01 1E 86 F1 | 	sub	local01, #1
1abd4                 | '     x+=1
1abd4     01 28 06 F1 | 	add	local06, #1
1abd8                 | '     da+=4*4
1abd8     10 2C 06 F1 | 	add	local08, #16
1abdc                 | '     db+=2*4
1abdc     08 2A 06 F1 | 	add	local07, #8
1abe0     18 FF 9F FD | 	jmp	#LR__2090
1abe4                 | LR__2091
1abe4                 | '   else
1abe4                 | '     d+=db
1abe4     15 27 02 F1 | 	add	local05, local07
1abe8                 | '     x+=1
1abe8     01 28 06 F1 | 	add	local06, #1
1abec                 | '     da+=2*4
1abec     08 2C 06 F1 | 	add	local08, #8
1abf0                 | '     db+=2*4
1abf0     08 2A 06 F1 | 	add	local07, #8
1abf4     04 FF 9F FD | 	jmp	#LR__2090
1abf8                 | LR__2092
1abf8     A7 F0 03 F6 | 	mov	ptra, fp
1abfc     B2 00 A0 FD | 	call	#popregs_
1ac00                 | _hg010b_spin2_circle_ret
1ac00     2D 00 64 FD | 	ret
1ac04                 | 
1ac04                 | '     
1ac04                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ac04                 | ' 
1ac04                 | ' pub frame(x1,y1,x2,y2,c)
1ac04                 | _hg010b_spin2_frame
1ac04     05 4A 05 F6 | 	mov	COUNT_, #5
1ac08     A8 00 A0 FD | 	call	#pushregs_
1ac0c     09 1F 02 F6 | 	mov	local01, arg01
1ac10     0A 21 02 F6 | 	mov	local02, arg02
1ac14     0B 23 02 F6 | 	mov	local03, arg03
1ac18     0C 25 02 F6 | 	mov	local04, arg04
1ac1c     0D 27 02 F6 | 	mov	local05, arg05
1ac20                 | ' 
1ac20                 | ' fastline(x1,x2,y1,c)
1ac20     0F 13 02 F6 | 	mov	arg01, local01
1ac24     11 15 02 F6 | 	mov	arg02, local03
1ac28     10 17 02 F6 | 	mov	arg03, local02
1ac2c     13 19 02 F6 | 	mov	arg04, local05
1ac30     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ac34                 | ' fastline(x1,x2,y2,c)
1ac34     0F 13 02 F6 | 	mov	arg01, local01
1ac38     11 15 02 F6 | 	mov	arg02, local03
1ac3c     12 17 02 F6 | 	mov	arg03, local04
1ac40     13 19 02 F6 | 	mov	arg04, local05
1ac44     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ac48                 | ' line(x1,y1,x1,y2,c)
1ac48     0F 13 02 F6 | 	mov	arg01, local01
1ac4c     10 15 02 F6 | 	mov	arg02, local02
1ac50     0F 17 02 F6 | 	mov	arg03, local01
1ac54     12 19 02 F6 | 	mov	arg04, local04
1ac58     13 1B 02 F6 | 	mov	arg05, local05
1ac5c                 | ' draw(x1,y1,x2,y2,c)
1ac5c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ac60                 | ' line(x2,y1,x2,y2,c)
1ac60     11 13 02 F6 | 	mov	arg01, local03
1ac64     10 15 02 F6 | 	mov	arg02, local02
1ac68     11 17 02 F6 | 	mov	arg03, local03
1ac6c     12 19 02 F6 | 	mov	arg04, local04
1ac70     13 1B 02 F6 | 	mov	arg05, local05
1ac74                 | ' draw(x1,y1,x2,y2,c)
1ac74     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1ac78     A7 F0 03 F6 | 	mov	ptra, fp
1ac7c     B2 00 A0 FD | 	call	#popregs_
1ac80                 | _hg010b_spin2_frame_ret
1ac80     2D 00 64 FD | 	ret
1ac84                 | 
1ac84                 | ' 
1ac84                 | ' '-- A box (a filled rectangle) ----------------------------------------
1ac84                 | ' 
1ac84                 | ' pub box(x1,y1,x2,y2,c) |yy
1ac84                 | _hg010b_spin2_box
1ac84     06 4A 05 F6 | 	mov	COUNT_, #6
1ac88     A8 00 A0 FD | 	call	#pushregs_
1ac8c     09 1F 02 F6 | 	mov	local01, arg01
1ac90     0A 21 02 F6 | 	mov	local02, arg02
1ac94     0B 23 02 F6 | 	mov	local03, arg03
1ac98     0C 25 02 F6 | 	mov	local04, arg04
1ac9c     0D 27 02 F6 | 	mov	local05, arg05
1aca0                 | ' 
1aca0                 | ' repeat yy from y1 to y2
1aca0     10 25 52 F2 | 	cmps	local04, local02 wc
1aca4     01 28 86 F6 | 	negc	local06, #1
1aca8     14 25 02 F1 | 	add	local04, local06
1acac                 | LR__2100
1acac                 | '   fastline(x1,x2,yy,c)
1acac     0F 13 02 F6 | 	mov	arg01, local01
1acb0     11 15 02 F6 | 	mov	arg02, local03
1acb4     13 19 02 F6 | 	mov	arg04, local05
1acb8     10 17 02 F6 | 	mov	arg03, local02
1acbc     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1acc0     14 21 02 F1 | 	add	local02, local06
1acc4     12 21 0A F2 | 	cmp	local02, local04 wz
1acc8     E0 FF 9F 5D |  if_ne	jmp	#LR__2100
1accc     A7 F0 03 F6 | 	mov	ptra, fp
1acd0     B2 00 A0 FD | 	call	#popregs_
1acd4                 | _hg010b_spin2_box_ret
1acd4     2D 00 64 FD | 	ret
1acd8                 | 
1acd8                 | '       
1acd8                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1acd8                 | _hg010b_spin2_putcharxycgf
1acd8                 | ' 
1acd8                 | '  
1acd8                 | ' repeat yy from 0 to 15
1acd8     00 00 06 F6 | 	mov	_var01, #0
1acdc     97 8C 48 FB | 	callpa	#(@LR__2112-@LR__2110)>>2,fcache_load_ptr_
1ace0                 | LR__2110
1ace0                 | ' 
1ace0                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1ace0     91 E4 05 F1 | 	add	objptr, #145
1ace4     F2 02 02 FB | 	rdlong	_var02, objptr
1ace8     0A 02 66 F0 | 	shl	_var02, #10
1acec     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1acf0     01 05 02 F1 | 	add	_var03, _var02
1acf4     0B 03 02 F6 | 	mov	_var02, arg03
1acf8     04 02 66 F0 | 	shl	_var02, #4
1acfc     01 05 02 F1 | 	add	_var03, _var02
1ad00     00 05 02 F1 | 	add	_var03, _var01
1ad04     02 05 C2 FA | 	rdbyte	_var03, _var03
1ad08                 | '   asm
1ad08     00 04 0E F4 | 	testb	_var03, #0 wz
1ad0c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ad10     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ad14     01 04 0E F4 | 	testb	_var03, #1 wz
1ad18     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ad1c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ad20     02 04 0E F4 | 	testb	_var03, #2 wz
1ad24     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ad28     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ad2c     03 04 0E F4 | 	testb	_var03, #3 wz
1ad30     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ad34     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ad38     04 04 0E F4 | 	testb	_var03, #4 wz
1ad3c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ad40     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ad44     05 04 0E F4 | 	testb	_var03, #5 wz
1ad48     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ad4c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ad50     06 04 0E F4 | 	testb	_var03, #6 wz
1ad54     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ad58     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ad5c     07 04 0E F4 | 	testb	_var03, #7 wz
1ad60     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1ad64     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1ad68                 | '   
1ad68                 | '   ccc[0]:=c1
1ad68     99 E5 05 F1 | 	add	objptr, #409
1ad6c     F2 06 62 FC | 	wrlong	_var04, objptr
1ad70                 | '   ccc[1]:=c2 
1ad70     04 E4 05 F1 | 	add	objptr, #4
1ad74     F2 08 62 FC | 	wrlong	_var05, objptr
1ad78                 | '   long[mailbox0][2]:=8
1ad78     49 E4 85 F1 | 	sub	objptr, #73
1ad7c     F2 04 02 FB | 	rdlong	_var03, objptr
1ad80     08 04 06 F1 | 	add	_var03, #8
1ad84     02 11 68 FC | 	wrlong	#8, _var03
1ad88                 | '   long[mailbox0][1]:=@ccc
1ad88     45 E4 05 F1 | 	add	objptr, #69
1ad8c     F2 04 02 F6 | 	mov	_var03, objptr
1ad90     45 E4 85 F1 | 	sub	objptr, #69
1ad94     F2 02 02 FB | 	rdlong	_var02, objptr
1ad98     04 02 06 F1 | 	add	_var02, #4
1ad9c     01 05 62 FC | 	wrlong	_var03, _var02
1ada0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1ada0     0C E5 85 F1 | 	sub	objptr, #268
1ada4     F2 04 02 FB | 	rdlong	_var03, objptr
1ada8     0A 03 02 F6 | 	mov	_var02, arg02
1adac     00 03 02 F1 | 	add	_var02, _var01
1adb0     0A 02 66 F0 | 	shl	_var02, #10
1adb4     09 0B 02 F6 | 	mov	_var06, arg01
1adb8     02 0A 66 F0 | 	shl	_var06, #2
1adbc     05 03 02 F1 | 	add	_var02, _var06
1adc0     01 05 02 F1 | 	add	_var03, _var02
1adc4     00 00 78 FF 
1adc8     00 04 06 F1 | 	add	_var03, ##-268435456
1adcc     0C E5 05 F1 | 	add	objptr, #268
1add0     F2 0A 02 FB | 	rdlong	_var06, objptr
1add4     05 05 62 FC | 	wrlong	_var03, _var06
1add8                 | '   repeat
1add8                 | LR__2111
1add8     F2 04 02 FB | 	rdlong	_var03, objptr
1addc     02 03 02 FB | 	rdlong	_var02, _var03
1ade0     00 02 56 F2 | 	cmps	_var02, #0 wc
1ade4     F0 FF 9F CD |  if_b	jmp	#LR__2111
1ade8     E5 E5 85 F1 | 	sub	objptr, #485
1adec     01 00 06 F1 | 	add	_var01, #1
1adf0     10 00 56 F2 | 	cmps	_var01, #16 wc
1adf4     E8 FE 9F CD |  if_b	jmp	#LR__2110
1adf8                 | LR__2112
1adf8                 | _hg010b_spin2_putcharxycgf_ret
1adf8     2D 00 64 FD | 	ret
1adfc                 | 
1adfc                 | ' 
1adfc                 | ' 
1adfc                 | ' '**********************************************************************r***
1adfc                 | ' '                                                                        *
1adfc                 | ' ' Font related functions                                                 *
1adfc                 | ' '                                                                        *
1adfc                 | ' '*************************************************************************
1adfc                 | ' 
1adfc                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1adfc                 | ' 
1adfc                 | ' pub setfontfamily(afontnum)
1adfc                 | _hg010b_spin2_setfontfamily
1adfc                 | ' 
1adfc                 | ' font_family:=afontnum
1adfc     91 E4 05 F1 | 	add	objptr, #145
1ae00     F2 12 62 FC | 	wrlong	arg01, objptr
1ae04     91 E4 85 F1 | 	sub	objptr, #145
1ae08                 | ' 'if afontnum==8
1ae08                 | ' '  font_ptr:=@amiga_font
1ae08                 | ' 
1ae08                 | ' if afontnum==4
1ae08     04 12 0E F2 | 	cmp	arg01, #4 wz
1ae0c                 | '   font_ptr:=@st_font
1ae0c     08 00 00 AF 
1ae10     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1ae14     04 E4 05 A1 |  if_e	add	objptr, #4
1ae18     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ae1c     04 E4 85 A1 |  if_e	sub	objptr, #4
1ae20     08 00 00 AF 
1ae24     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1ae28                 | ' if afontnum==0
1ae28     00 12 0E F2 | 	cmp	arg01, #0 wz
1ae2c                 | '   font_ptr:=@vga_font
1ae2c     04 E4 05 A1 |  if_e	add	objptr, #4
1ae30     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ae34     04 E4 85 A1 |  if_e	sub	objptr, #4
1ae38                 | _hg010b_spin2_setfontfamily_ret
1ae38     2D 00 64 FD | 	ret
1ae3c                 | 
1ae3c                 | ' 
1ae3c                 | ' '*************************************************************************
1ae3c                 | ' '                                                                        *
1ae3c                 | ' '  Cursor functions                                                      *
1ae3c                 | ' '                                                                        *
1ae3c                 | ' '*************************************************************************
1ae3c                 | ' 
1ae3c                 | ' 
1ae3c                 | ' pub setcursorpos(x,y)
1ae3c                 | _hg010b_spin2_setcursorpos
1ae3c                 | ' 
1ae3c                 | ' ''---------- Set the (x,y) position of cursor
1ae3c                 | ' 
1ae3c                 | ' cursor_x:=x
1ae3c     38 E4 05 F1 | 	add	objptr, #56
1ae40     F2 12 52 FC | 	wrword	arg01, objptr
1ae44                 | ' cursor_y:=y
1ae44     02 E4 05 F1 | 	add	objptr, #2
1ae48     F2 14 42 FC | 	wrbyte	arg02, objptr
1ae4c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1ae4c     02 E4 85 F1 | 	sub	objptr, #2
1ae50     F2 14 E2 FA | 	rdword	arg02, objptr
1ae54     02 14 66 F0 | 	shl	arg02, #2
1ae58     02 E4 05 F1 | 	add	objptr, #2
1ae5c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ae60     3A E4 85 F1 | 	sub	objptr, #58
1ae64     04 16 66 F0 | 	shl	arg03, #4
1ae68     11 12 06 F6 | 	mov	arg01, #17
1ae6c     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ae70                 | _hg010b_spin2_setcursorpos_ret
1ae70     2D 00 64 FD | 	ret
1ae74                 | 
1ae74                 | ' 
1ae74                 | ' '*************************************************************************
1ae74                 | ' '                                                                        *
1ae74                 | ' '  VBlank functions                                                      *
1ae74                 | ' '                                                                        *
1ae74                 | ' '*************************************************************************
1ae74                 | ' 
1ae74                 | ' pub waitvbl(amount) | i
1ae74                 | _hg010b_spin2_waitvbl
1ae74     03 4A 05 F6 | 	mov	COUNT_, #3
1ae78     A8 00 A0 FD | 	call	#pushregs_
1ae7c     09 1F 02 F6 | 	mov	local01, arg01
1ae80                 | ' 
1ae80                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1ae80                 | ' 
1ae80                 | ' repeat i from 1 to amount
1ae80     01 20 06 F6 | 	mov	local02, #1
1ae84     01 1E 56 F2 | 	cmps	local01, #1 wc
1ae88     01 22 86 F6 | 	negc	local03, #1
1ae8c     11 1F 02 F1 | 	add	local01, local03
1ae90                 | LR__2120
1ae90                 | '   repeat until vblank==0
1ae90                 | LR__2121
1ae90     45 E4 05 F1 | 	add	objptr, #69
1ae94     F2 12 0A FB | 	rdlong	arg01, objptr wz
1ae98     45 E4 85 F1 | 	sub	objptr, #69
1ae9c     0C 00 90 AD |  if_e	jmp	#LR__2122
1aea0                 | '     waitus(100)
1aea0     64 12 06 F6 | 	mov	arg01, #100
1aea4     94 17 B0 FD | 	call	#__system___waitus
1aea8     E4 FF 9F FD | 	jmp	#LR__2121
1aeac                 | LR__2122
1aeac                 | '   repeat until vblank==1
1aeac                 | LR__2123
1aeac     45 E4 05 F1 | 	add	objptr, #69
1aeb0     F2 12 02 FB | 	rdlong	arg01, objptr
1aeb4     45 E4 85 F1 | 	sub	objptr, #69
1aeb8     01 12 0E F2 | 	cmp	arg01, #1 wz
1aebc     0C 00 90 AD |  if_e	jmp	#LR__2124
1aec0                 | '     waitus(100)
1aec0     64 12 06 F6 | 	mov	arg01, #100
1aec4     74 17 B0 FD | 	call	#__system___waitus
1aec8     E0 FF 9F FD | 	jmp	#LR__2123
1aecc                 | LR__2124
1aecc     11 21 02 F1 | 	add	local02, local03
1aed0     0F 21 0A F2 | 	cmp	local02, local01 wz
1aed4     B8 FF 9F 5D |  if_ne	jmp	#LR__2120
1aed8     A7 F0 03 F6 | 	mov	ptra, fp
1aedc     B2 00 A0 FD | 	call	#popregs_
1aee0                 | _hg010b_spin2_waitvbl_ret
1aee0     2D 00 64 FD | 	ret
1aee4                 | 
1aee4                 | ' 
1aee4                 | ' 
1aee4                 | ' pub cls(fc,bc)   :c,i
1aee4                 | _hg010b_spin2_cls
1aee4     02 4A 05 F6 | 	mov	COUNT_, #2
1aee8     A8 00 A0 FD | 	call	#pushregs_
1aeec     09 1F 02 F6 | 	mov	local01, arg01
1aef0     0A 21 02 F6 | 	mov	local02, arg02
1aef4                 | ' 
1aef4                 | ' c:=bc
1aef4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1aef4     D9 E4 05 F1 | 	add	objptr, #217
1aef8     F2 12 02 FB | 	rdlong	arg01, objptr
1aefc     A5 E4 85 F1 | 	sub	objptr, #165
1af00     F2 16 02 FB | 	rdlong	arg03, objptr
1af04     02 16 66 F0 | 	shl	arg03, #2
1af08     10 15 02 F6 | 	mov	arg02, local02
1af0c     00 18 06 F6 | 	mov	arg04, #0
1af10     01 1A 06 F6 | 	mov	arg05, #1
1af14     0B 00 00 FF 
1af18     8C E4 05 F1 | 	add	objptr, ##5772
1af1c     F0 08 B0 FD | 	call	#_psram_spin2_fill
1af20                 | ' setwritecolors(fc,bc)
1af20                 | ' 
1af20                 | ' write_color:=ff
1af20     0B 00 00 FF 
1af24     83 E4 85 F1 | 	sub	objptr, ##5763
1af28     F2 1E 62 FC | 	wrlong	local01, objptr
1af2c                 | ' write_background:=bb
1af2c     04 E4 05 F1 | 	add	objptr, #4
1af30     F2 20 62 FC | 	wrlong	local02, objptr
1af34                 | ' cursor_x:=0
1af34     09 E4 85 F1 | 	sub	objptr, #9
1af38     F2 00 58 FC | 	wrword	#0, objptr
1af3c                 | ' cursor_y:=0
1af3c     02 E4 05 F1 | 	add	objptr, #2
1af40     F2 00 48 FC | 	wrbyte	#0, objptr
1af44                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1af44     02 E4 85 F1 | 	sub	objptr, #2
1af48     F2 14 E2 FA | 	rdword	arg02, objptr
1af4c     02 14 66 F0 | 	shl	arg02, #2
1af50     02 E4 05 F1 | 	add	objptr, #2
1af54     F2 16 C2 FA | 	rdbyte	arg03, objptr
1af58     3A E4 85 F1 | 	sub	objptr, #58
1af5c     04 16 66 F0 | 	shl	arg03, #4
1af60     11 12 06 F6 | 	mov	arg01, #17
1af64     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1af68                 | ' setcursorcolor(fc)
1af68     0F 13 02 F6 | 	mov	arg01, local01
1af6c     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
1af70     10 FB 01 F6 | 	mov	result1, local02
1af74     00 FC 05 F6 | 	mov	result2, #0
1af78     A7 F0 03 F6 | 	mov	ptra, fp
1af7c     B2 00 A0 FD | 	call	#popregs_
1af80                 | _hg010b_spin2_cls_ret
1af80     2D 00 64 FD | 	ret
1af84                 | 
1af84                 | ' 
1af84                 | ' ''---------- Output a char at the cursor position, move the cursor 
1af84                 | ' 
1af84                 | ' pub putchar(achar) | c,x,y,l,newcpl
1af84                 | _hg010b_spin2_putchar
1af84     01 4A 05 F6 | 	mov	COUNT_, #1
1af88     A8 00 A0 FD | 	call	#pushregs_
1af8c     09 1F 02 F6 | 	mov	local01, arg01
1af90                 | ' 
1af90                 | ' if achar==10
1af90     0A 1E 0E F2 | 	cmp	local01, #10 wz
1af94                 | '   crlf()
1af94     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1af98                 | ' if achar==9
1af98     09 1E 0E F2 | 	cmp	local01, #9 wz
1af9c     18 00 90 5D |  if_ne	jmp	#LR__2130
1afa0                 | '   cursor_x:=(cursor_x& %11110000)+16
1afa0     38 E4 05 F1 | 	add	objptr, #56
1afa4     F2 16 E2 FA | 	rdword	arg03, objptr
1afa8     F0 16 06 F5 | 	and	arg03, #240
1afac     10 16 06 F1 | 	add	arg03, #16
1afb0     F2 16 52 FC | 	wrword	arg03, objptr
1afb4     38 E4 85 F1 | 	sub	objptr, #56
1afb8                 | LR__2130
1afb8                 | '   
1afb8                 | ' if (achar<>9) && (achar<>10) 
1afb8     09 1E 0E F2 | 	cmp	local01, #9 wz
1afbc     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1afc0     44 00 90 AD |  if_e	jmp	#LR__2131
1afc4                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1afc4     38 E4 05 F1 | 	add	objptr, #56
1afc8     F2 12 E2 FA | 	rdword	arg01, objptr
1afcc     02 E4 05 F1 | 	add	objptr, #2
1afd0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1afd4     04 14 66 F0 | 	shl	arg02, #4
1afd8     03 E4 05 F1 | 	add	objptr, #3
1afdc     F2 18 02 FB | 	rdlong	arg04, objptr
1afe0     04 E4 05 F1 | 	add	objptr, #4
1afe4     F2 1A 02 FB | 	rdlong	arg05, objptr
1afe8     41 E4 85 F1 | 	sub	objptr, #65
1afec     0F 17 02 F6 | 	mov	arg03, local01
1aff0     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1aff4                 | '   cursor_x+=2
1aff4     38 E4 05 F1 | 	add	objptr, #56
1aff8     F2 1E E2 FA | 	rdword	local01, objptr
1affc     02 1E 06 F1 | 	add	local01, #2
1b000     F2 1E 52 FC | 	wrword	local01, objptr
1b004     38 E4 85 F1 | 	sub	objptr, #56
1b008                 | LR__2131
1b008                 | ' 
1b008                 | ' if cursor_x>=256
1b008     38 E4 05 F1 | 	add	objptr, #56
1b00c     F2 1E E2 FA | 	rdword	local01, objptr
1b010     38 E4 85 F1 | 	sub	objptr, #56
1b014     00 1F 56 F2 | 	cmps	local01, #256 wc
1b018     64 00 90 CD |  if_b	jmp	#LR__2133
1b01c                 | '   cursor_x:=0
1b01c     38 E4 05 F1 | 	add	objptr, #56
1b020     F2 00 58 FC | 	wrword	#0, objptr
1b024                 | '   cursor_y+=1
1b024     02 E4 05 F1 | 	add	objptr, #2
1b028     F2 1E C2 FA | 	rdbyte	local01, objptr
1b02c     01 1E 06 F1 | 	add	local01, #1
1b030     F2 1E 42 FC | 	wrbyte	local01, objptr
1b034                 | '   if cursor_y>st_lines-1
1b034     C3 E4 05 F1 | 	add	objptr, #195
1b038     F2 1E 02 FB | 	rdlong	local01, objptr
1b03c     01 1E 86 F1 | 	sub	local01, #1
1b040     C3 E4 85 F1 | 	sub	objptr, #195
1b044     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b048     3A E4 85 F1 | 	sub	objptr, #58
1b04c     0F 17 5A F2 | 	cmps	arg03, local01 wcz
1b050     2C 00 90 ED |  if_be	jmp	#LR__2132
1b054                 | '     scrollup()
1b054     00 12 06 F6 | 	mov	arg01, #0
1b058     01 00 00 FF 
1b05c     40 14 06 F6 | 	mov	arg02, ##576
1b060     10 16 06 F6 | 	mov	arg03, #16
1b064     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
1b068                 | '     cursor_y:=st_lines-1
1b068     FD E4 05 F1 | 	add	objptr, #253
1b06c     F2 1E 02 FB | 	rdlong	local01, objptr
1b070     01 1E 86 F1 | 	sub	local01, #1
1b074     C3 E4 85 F1 | 	sub	objptr, #195
1b078     F2 1E 42 FC | 	wrbyte	local01, objptr
1b07c     3A E4 85 F1 | 	sub	objptr, #58
1b080                 | LR__2132
1b080                 | LR__2133
1b080                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1b080     38 E4 05 F1 | 	add	objptr, #56
1b084     F2 14 E2 FA | 	rdword	arg02, objptr
1b088     02 14 66 F0 | 	shl	arg02, #2
1b08c     02 E4 05 F1 | 	add	objptr, #2
1b090     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b094     3A E4 85 F1 | 	sub	objptr, #58
1b098     04 16 66 F0 | 	shl	arg03, #4
1b09c     11 12 06 F6 | 	mov	arg01, #17
1b0a0     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1b0a4     A7 F0 03 F6 | 	mov	ptra, fp
1b0a8     B2 00 A0 FD | 	call	#popregs_
1b0ac                 | _hg010b_spin2_putchar_ret
1b0ac     2D 00 64 FD | 	ret
1b0b0                 | 
1b0b0                 | '     
1b0b0                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1b0b0                 | ' 
1b0b0                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1b0b0                 | _hg010b_spin2_putchar2
1b0b0     01 4A 05 F6 | 	mov	COUNT_, #1
1b0b4     A8 00 A0 FD | 	call	#pushregs_
1b0b8                 | ' 
1b0b8                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1b0b8     38 E4 05 F1 | 	add	objptr, #56
1b0bc     F2 1E E2 FA | 	rdword	local01, objptr
1b0c0     02 E4 05 F1 | 	add	objptr, #2
1b0c4     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b0c8     04 14 66 F0 | 	shl	arg02, #4
1b0cc     09 17 02 F6 | 	mov	arg03, arg01
1b0d0     03 E4 05 F1 | 	add	objptr, #3
1b0d4     F2 18 02 FB | 	rdlong	arg04, objptr
1b0d8     04 E4 05 F1 | 	add	objptr, #4
1b0dc     F2 1A 02 FB | 	rdlong	arg05, objptr
1b0e0     41 E4 85 F1 | 	sub	objptr, #65
1b0e4     0F 13 02 F6 | 	mov	arg01, local01
1b0e8     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
1b0ec                 | ' cursor_x+=2
1b0ec     38 E4 05 F1 | 	add	objptr, #56
1b0f0     F2 1E E2 FA | 	rdword	local01, objptr
1b0f4     02 1E 06 F1 | 	add	local01, #2
1b0f8     F2 1E 52 FC | 	wrword	local01, objptr
1b0fc                 | ' if cursor_x>=256
1b0fc     F2 1E E2 FA | 	rdword	local01, objptr
1b100     38 E4 85 F1 | 	sub	objptr, #56
1b104     00 1F 56 F2 | 	cmps	local01, #256 wc
1b108     64 00 90 CD |  if_b	jmp	#LR__2141
1b10c                 | '   cursor_x:=0
1b10c     38 E4 05 F1 | 	add	objptr, #56
1b110     F2 00 58 FC | 	wrword	#0, objptr
1b114                 | '   cursor_y+=1
1b114     02 E4 05 F1 | 	add	objptr, #2
1b118     F2 1E C2 FA | 	rdbyte	local01, objptr
1b11c     01 1E 06 F1 | 	add	local01, #1
1b120     F2 1E 42 FC | 	wrbyte	local01, objptr
1b124                 | '   if cursor_y>st_lines-1
1b124     C3 E4 05 F1 | 	add	objptr, #195
1b128     F2 1E 02 FB | 	rdlong	local01, objptr
1b12c     01 1E 86 F1 | 	sub	local01, #1
1b130     C3 E4 85 F1 | 	sub	objptr, #195
1b134     F2 1A C2 FA | 	rdbyte	arg05, objptr
1b138     3A E4 85 F1 | 	sub	objptr, #58
1b13c     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
1b140     2C 00 90 ED |  if_be	jmp	#LR__2140
1b144                 | '     scrollup()
1b144     00 12 06 F6 | 	mov	arg01, #0
1b148     01 00 00 FF 
1b14c     40 14 06 F6 | 	mov	arg02, ##576
1b150     10 16 06 F6 | 	mov	arg03, #16
1b154     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
1b158                 | '     cursor_y:=st_lines-1
1b158     FD E4 05 F1 | 	add	objptr, #253
1b15c     F2 1E 02 FB | 	rdlong	local01, objptr
1b160     01 1E 86 F1 | 	sub	local01, #1
1b164     C3 E4 85 F1 | 	sub	objptr, #195
1b168     F2 1E 42 FC | 	wrbyte	local01, objptr
1b16c     3A E4 85 F1 | 	sub	objptr, #58
1b170                 | LR__2140
1b170                 | LR__2141
1b170                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
1b170     38 E4 05 F1 | 	add	objptr, #56
1b174     F2 14 E2 FA | 	rdword	arg02, objptr
1b178     02 14 66 F0 | 	shl	arg02, #2
1b17c     02 E4 05 F1 | 	add	objptr, #2
1b180     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b184     3A E4 85 F1 | 	sub	objptr, #58
1b188     04 16 66 F0 | 	shl	arg03, #4
1b18c     11 12 06 F6 | 	mov	arg01, #17
1b190     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1b194     A7 F0 03 F6 | 	mov	ptra, fp
1b198     B2 00 A0 FD | 	call	#popregs_
1b19c                 | _hg010b_spin2_putchar2_ret
1b19c     2D 00 64 FD | 	ret
1b1a0                 | 
1b1a0                 | ' ''--------- Output a string at the cursor position, move the cursor  
1b1a0                 | ' 
1b1a0                 | ' pub write(text) | iii,c,ncx,ncy
1b1a0                 | _hg010b_spin2_write
1b1a0     04 4A 05 F6 | 	mov	COUNT_, #4
1b1a4     A8 00 A0 FD | 	call	#pushregs_
1b1a8     09 1F 02 F6 | 	mov	local01, arg01
1b1ac                 | ' 
1b1ac                 | ' repeat iii from 0 to strsize(text)-1
1b1ac     00 20 06 F6 | 	mov	local02, #0
1b1b0     0F 13 02 F6 | 	mov	arg01, local01
1b1b4     09 23 02 F6 | 	mov	local03, arg01
1b1b8     97 06 48 FB | 	callpa	#(@LR__2151-@LR__2150)>>2,fcache_load_ptr_
1b1bc                 | LR__2150
1b1bc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1b1c0     01 22 06 51 |  if_ne	add	local03, #1
1b1c4     F4 FF 9F 5D |  if_ne	jmp	#LR__2150
1b1c8                 | LR__2151
1b1c8     09 23 82 F1 | 	sub	local03, arg01
1b1cc     01 22 86 F1 | 	sub	local03, #1
1b1d0     00 22 56 F2 | 	cmps	local03, #0 wc
1b1d4     01 24 86 F6 | 	negc	local04, #1
1b1d8     12 23 02 F1 | 	add	local03, local04
1b1dc                 | LR__2152
1b1dc                 | '   putchar2(byte[text+iii])
1b1dc     0F 13 02 F6 | 	mov	arg01, local01
1b1e0     10 13 02 F1 | 	add	arg01, local02
1b1e4     09 13 C2 FA | 	rdbyte	arg01, arg01
1b1e8     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
1b1ec     12 21 02 F1 | 	add	local02, local04
1b1f0     11 21 0A F2 | 	cmp	local02, local03 wz
1b1f4     E4 FF 9F 5D |  if_ne	jmp	#LR__2152
1b1f8     A7 F0 03 F6 | 	mov	ptra, fp
1b1fc     B2 00 A0 FD | 	call	#popregs_
1b200                 | _hg010b_spin2_write_ret
1b200     2D 00 64 FD | 	ret
1b204                 | 
1b204                 | ' 
1b204                 | ' ''-----------  Scroll the screen one line up
1b204                 | ' 
1b204                 | ' pub scrollup(start=0, end=576 , amount=16) | i
1b204                 | _hg010b_spin2_scrollup
1b204     01 4A 05 F6 | 	mov	COUNT_, #1
1b208     A8 00 A0 FD | 	call	#pushregs_
1b20c                 | ' 	
1b20c                 | ' repeat i from 0 to 559 
1b20c     00 1E 06 F6 | 	mov	local01, #0
1b210                 | LR__2160
1b210     F5 E4 05 F1 | 	add	objptr, #245
1b214     F2 18 02 FB | 	rdlong	arg04, objptr
1b218     1C E4 85 F1 | 	sub	objptr, #28
1b21c     F2 14 02 FB | 	rdlong	arg02, objptr
1b220     0F 13 02 F6 | 	mov	arg01, local01
1b224     10 12 06 F1 | 	add	arg01, #16
1b228     02 12 66 F0 | 	shl	arg01, #2
1b22c     14 E4 05 F1 | 	add	objptr, #20
1b230     F2 16 02 FB | 	rdlong	arg03, objptr
1b234     0B 13 02 FD | 	qmul	arg01, arg03
1b238                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1b238     F6 03 00 FF 
1b23c     00 12 06 F6 | 	mov	arg01, ##519168
1b240     0C 13 82 F1 | 	sub	arg01, arg04
1b244     02 16 66 F0 | 	shl	arg03, #2
1b248     0A 00 00 FF 
1b24c     D3 E5 05 F1 | 	add	objptr, ##5587
1b250     18 18 62 FD | 	getqx	arg04
1b254     0C 15 02 F1 | 	add	arg02, arg04
1b258     7C 04 B0 FD | 	call	#_psram_spin2_read1
1b25c     0A 00 00 FF 
1b260     CB E5 85 F1 | 	sub	objptr, ##5579
1b264     F2 18 02 FB | 	rdlong	arg04, objptr
1b268     1C E4 85 F1 | 	sub	objptr, #28
1b26c     F2 14 02 FB | 	rdlong	arg02, objptr
1b270     0F 13 02 F6 | 	mov	arg01, local01
1b274     02 12 66 F0 | 	shl	arg01, #2
1b278     14 E4 05 F1 | 	add	objptr, #20
1b27c     F2 16 02 FB | 	rdlong	arg03, objptr
1b280     0B 13 02 FD | 	qmul	arg01, arg03
1b284                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1b284     F6 03 00 FF 
1b288     00 12 06 F6 | 	mov	arg01, ##519168
1b28c     0C 13 82 F1 | 	sub	arg01, arg04
1b290     02 16 66 F0 | 	shl	arg03, #2
1b294     0A 00 00 FF 
1b298     D3 E5 05 F1 | 	add	objptr, ##5587
1b29c     18 18 62 FD | 	getqx	arg04
1b2a0     0C 15 02 F1 | 	add	arg02, arg04
1b2a4     CC 04 B0 FD | 	call	#_psram_spin2_write
1b2a8     0B 00 00 FF 
1b2ac     C0 E4 85 F1 | 	sub	objptr, ##5824
1b2b0     01 1E 06 F1 | 	add	local01, #1
1b2b4     01 00 00 FF 
1b2b8     30 1E 56 F2 | 	cmps	local01, ##560 wc
1b2bc     50 FF 9F CD |  if_b	jmp	#LR__2160
1b2c0                 | ' 
1b2c0                 | ' repeat i from 560 to 575
1b2c0     01 00 00 FF 
1b2c4     30 1E 06 F6 | 	mov	local01, ##560
1b2c8                 | LR__2161
1b2c8                 | '    fastline(0,1023,i,write_background)   
1b2c8     41 E4 05 F1 | 	add	objptr, #65
1b2cc     F2 18 02 FB | 	rdlong	arg04, objptr
1b2d0     41 E4 85 F1 | 	sub	objptr, #65
1b2d4     00 12 06 F6 | 	mov	arg01, #0
1b2d8     09 14 CE F9 | 	bmask	arg02, #9
1b2dc     0F 17 02 F6 | 	mov	arg03, local01
1b2e0     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
1b2e4     01 1E 06 F1 | 	add	local01, #1
1b2e8     01 00 00 FF 
1b2ec     40 1E 16 F2 | 	cmp	local01, ##576 wc
1b2f0     D4 FF 9F CD |  if_b	jmp	#LR__2161
1b2f4     A7 F0 03 F6 | 	mov	ptra, fp
1b2f8     B2 00 A0 FD | 	call	#popregs_
1b2fc                 | _hg010b_spin2_scrollup_ret
1b2fc     2D 00 64 FD | 	ret
1b300                 | 
1b300                 | ' 
1b300                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1b300                 | ' 
1b300                 | ' pub crlf()
1b300                 | _hg010b_spin2_crlf
1b300                 | ' 
1b300                 | ' cursor_x:=leading_spaces*2
1b300     01 00 00 FF 
1b304     B2 E4 05 F1 | 	add	objptr, ##690
1b308     F2 16 02 FB | 	rdlong	arg03, objptr
1b30c     01 16 66 F0 | 	shl	arg03, #1
1b310     01 00 00 FF 
1b314     7A E4 85 F1 | 	sub	objptr, ##634
1b318     F2 16 52 FC | 	wrword	arg03, objptr
1b31c                 | ' cursor_y+=1
1b31c     02 E4 05 F1 | 	add	objptr, #2
1b320     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b324     01 16 06 F1 | 	add	arg03, #1
1b328     F2 16 42 FC | 	wrbyte	arg03, objptr
1b32c                 | ' if cursor_y>st_lines-1
1b32c     C3 E4 05 F1 | 	add	objptr, #195
1b330     F2 16 02 FB | 	rdlong	arg03, objptr
1b334     01 16 86 F1 | 	sub	arg03, #1
1b338     C3 E4 85 F1 | 	sub	objptr, #195
1b33c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1b340     3A E4 85 F1 | 	sub	objptr, #58
1b344     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1b348     2C 00 90 ED |  if_be	jmp	#LR__2170
1b34c                 | '   scrollup()
1b34c     00 12 06 F6 | 	mov	arg01, #0
1b350     01 00 00 FF 
1b354     40 14 06 F6 | 	mov	arg02, ##576
1b358     10 16 06 F6 | 	mov	arg03, #16
1b35c     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
1b360                 | '   cursor_y:=st_lines-1
1b360     FD E4 05 F1 | 	add	objptr, #253
1b364     F2 16 02 FB | 	rdlong	arg03, objptr
1b368     01 16 86 F1 | 	sub	arg03, #1
1b36c     C3 E4 85 F1 | 	sub	objptr, #195
1b370     F2 16 42 FC | 	wrbyte	arg03, objptr
1b374     3A E4 85 F1 | 	sub	objptr, #58
1b378                 | LR__2170
1b378                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
1b378     38 E4 05 F1 | 	add	objptr, #56
1b37c     F2 14 E2 FA | 	rdword	arg02, objptr
1b380     02 14 66 F0 | 	shl	arg02, #2
1b384     02 E4 05 F1 | 	add	objptr, #2
1b388     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b38c     3A E4 85 F1 | 	sub	objptr, #58
1b390     04 16 66 F0 | 	shl	arg03, #4
1b394     11 12 06 F6 | 	mov	arg01, #17
1b398     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1b39c                 | _hg010b_spin2_crlf_ret
1b39c     2D 00 64 FD | 	ret
1b3a0                 | 
1b3a0                 | ' 
1b3a0                 | ' 
1b3a0                 | ' '*************************************************************************
1b3a0                 | ' '                                                                        *
1b3a0                 | ' '  Conversions                                                           *
1b3a0                 | ' '                                                                        *
1b3a0                 | ' '*************************************************************************
1b3a0                 | ' 
1b3a0                 | ' ''---------- Convert a integer to dec string, return a pointer
1b3a0                 | ' 
1b3a0                 | ' pub inttostr(i):result |q,pos,k,j
1b3a0                 | _hg010b_spin2_inttostr
1b3a0     03 4A 05 F6 | 	mov	COUNT_, #3
1b3a4     A8 00 A0 FD | 	call	#pushregs_
1b3a8     09 1F 0A F6 | 	mov	local01, arg01 wz
1b3ac                 | ' 
1b3ac                 | ' j:=i
1b3ac                 | ' pos:=10
1b3ac     0A 20 06 F6 | 	mov	local02, #10
1b3b0                 | ' k:=0
1b3b0     00 22 06 F6 | 	mov	local03, #0
1b3b4                 | ' 
1b3b4                 | ' if (j==0)
1b3b4     18 00 90 5D |  if_ne	jmp	#LR__2180
1b3b8                 | '   n_string[0]:=48
1b3b8     49 E4 05 F1 | 	add	objptr, #73
1b3bc     F2 60 48 FC | 	wrbyte	#48, objptr
1b3c0                 | '   n_string[1]:=0
1b3c0     01 E4 05 F1 | 	add	objptr, #1
1b3c4     F2 00 48 FC | 	wrbyte	#0, objptr
1b3c8     4A E4 85 F1 | 	sub	objptr, #74
1b3cc     C4 00 90 FD | 	jmp	#LR__2187
1b3d0                 | LR__2180
1b3d0                 | ' 
1b3d0                 | ' else
1b3d0                 | '   if (j<0)
1b3d0     0F 1F 52 F6 | 	abs	local01, local01 wc
1b3d4                 | '     j:=0-j
1b3d4                 | '     k:=45
1b3d4     2D 22 06 C6 |  if_b	mov	local03, #45
1b3d8                 | ' 
1b3d8                 | '   n_string[11]:=0
1b3d8     54 E4 05 F1 | 	add	objptr, #84
1b3dc     F2 00 48 FC | 	wrbyte	#0, objptr
1b3e0     54 E4 85 F1 | 	sub	objptr, #84
1b3e4     97 24 48 FB | 	callpa	#(@LR__2182-@LR__2181)>>2,fcache_load_ptr_
1b3e8                 | '   repeat while (pos>-1)
1b3e8                 | LR__2181
1b3e8     00 20 56 F2 | 	cmps	local02, #0 wc
1b3ec     40 00 90 CD |  if_b	jmp	#LR__2183
1b3f0     0F FB 51 F6 | 	abs	result1, local01 wc
1b3f4     0A FA 15 FD | 	qdiv	result1, #10
1b3f8                 | '     q:=j//10
1b3f8     19 FA 61 FD | 	getqy	result1
1b3fc     FD FA 81 F6 | 	negc	result1, result1
1b400     0F 1F 52 F6 | 	abs	local01, local01 wc
1b404     0A 1E 16 FD | 	qdiv	local01, #10
1b408                 | '     q:=48+q
1b408     30 FA 05 F1 | 	add	result1, #48
1b40c                 | '     n_string[pos]:=q
1b40c     10 1F 02 F6 | 	mov	local01, local02
1b410     49 E4 05 F1 | 	add	objptr, #73
1b414     F2 1E 02 F1 | 	add	local01, objptr
1b418     0F FB 41 FC | 	wrbyte	result1, local01
1b41c                 | '     j:=j/10
1b41c     49 E4 85 F1 | 	sub	objptr, #73
1b420                 | '     pos-=1
1b420     01 20 86 F1 | 	sub	local02, #1
1b424     18 1E 62 FD | 	getqx	local01
1b428     0F 1F 82 F6 | 	negc	local01, local01
1b42c     B8 FF 9F FD | 	jmp	#LR__2181
1b430                 | LR__2182
1b430                 | LR__2183
1b430                 | '   repeat while n_string[0]==48
1b430                 | LR__2184
1b430     49 E4 05 F1 | 	add	objptr, #73
1b434     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b438     49 E4 85 F1 | 	sub	objptr, #73
1b43c     30 16 0E F2 | 	cmp	arg03, #48 wz
1b440     20 00 90 5D |  if_ne	jmp	#LR__2185
1b444                 | '     bytemove(@n_string,@n_string+1,12)
1b444     49 E4 05 F1 | 	add	objptr, #73
1b448     F2 12 02 F6 | 	mov	arg01, objptr
1b44c     F2 14 02 F6 | 	mov	arg02, objptr
1b450     49 E4 85 F1 | 	sub	objptr, #73
1b454     01 14 06 F1 | 	add	arg02, #1
1b458     0C 16 06 F6 | 	mov	arg03, #12
1b45c     9C 0D B0 FD | 	call	#__system____builtin_memmove
1b460     CC FF 9F FD | 	jmp	#LR__2184
1b464                 | LR__2185
1b464                 | ' 
1b464                 | '   if k==45
1b464     2D 22 0E F2 | 	cmp	local03, #45 wz
1b468     28 00 90 5D |  if_ne	jmp	#LR__2186
1b46c                 | '      bytemove(@n_string+1,@n_string,12)
1b46c     49 E4 05 F1 | 	add	objptr, #73
1b470     F2 12 02 F6 | 	mov	arg01, objptr
1b474     01 12 06 F1 | 	add	arg01, #1
1b478     F2 14 02 F6 | 	mov	arg02, objptr
1b47c     49 E4 85 F1 | 	sub	objptr, #73
1b480     0C 16 06 F6 | 	mov	arg03, #12
1b484     74 0D B0 FD | 	call	#__system____builtin_memmove
1b488                 | '      n_string[0]:=k
1b488     49 E4 05 F1 | 	add	objptr, #73
1b48c     F2 22 42 FC | 	wrbyte	local03, objptr
1b490     49 E4 85 F1 | 	sub	objptr, #73
1b494                 | LR__2186
1b494                 | LR__2187
1b494                 | ' 
1b494                 | ' q:=@n_string
1b494     49 E4 05 F1 | 	add	objptr, #73
1b498     F2 FA 01 F6 | 	mov	result1, objptr
1b49c     49 E4 85 F1 | 	sub	objptr, #73
1b4a0                 | ' return q
1b4a0     A7 F0 03 F6 | 	mov	ptra, fp
1b4a4     B2 00 A0 FD | 	call	#popregs_
1b4a8                 | _hg010b_spin2_inttostr_ret
1b4a8     2D 00 64 FD | 	ret
1b4ac                 | 
1b4ac                 | ' 
1b4ac                 | ' '..............................................................................
1b4ac                 | ' 
1b4ac                 | ' {{
1b4ac                 | ' }}
1b4ac                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1b4ac                 | _psram_spin2_startx
1b4ac     04 4A 05 F6 | 	mov	COUNT_, #4
1b4b0     A8 00 A0 FD | 	call	#pushregs_
1b4b4     09 1F 02 F6 | 	mov	local01, arg01
1b4b8     0B 21 02 F6 | 	mov	local02, arg03
1b4bc     0C 23 02 F6 | 	mov	local03, arg04
1b4c0                 | '     stop() ' restart driver if required
1b4c0     54 01 B0 FD | 	call	#_psram_spin2_stop
1b4c4     00 1E 0E F2 | 	cmp	local01, #0 wz
1b4c8     14 1E 06 AB |  if_e	rdlong	local01, #20
1b4cc     0F 15 52 F6 | 	abs	arg02, local01 wc
1b4d0     A1 07 00 FF 
1b4d4     40 14 16 FD | 	qdiv	arg02, ##1000000
1b4d8                 | ' 
1b4d8                 | '     ' use current frequency if none specified
1b4d8                 | ' 
1b4d8                 | '     if freq == 0 
1b4d8                 | '         freq := clkfreq 
1b4d8                 | ' 
1b4d8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1b4d8                 | ' 
1b4d8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1b4d8                 | '     if burst < 0
1b4d8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1b4d8     18 14 62 FD | 	getqx	arg02
1b4dc     0A 19 82 F6 | 	negc	arg04, arg02
1b4e0     03 18 66 F0 | 	shl	arg04, #3
1b4e4     84 18 86 F1 | 	sub	arg04, #132
1b4e8     04 18 46 F0 | 	shr	arg04, #4
1b4ec     04 18 66 F0 | 	shl	arg04, #4
1b4f0     00 18 56 F2 | 	cmps	arg04, #0 wc
1b4f4     0E FA 65 C6 |  if_b	neg	result1, #14
1b4f8     10 01 90 CD |  if_b	jmp	#LR__2193
1b4fc                 | ' 
1b4fc                 | '     ' compute the input delay
1b4fc                 | ' 
1b4fc                 | '     if delay <= 0
1b4fc     01 20 56 F2 | 	cmps	local02, #1 wc
1b500     10 00 90 3D |  if_ae	jmp	#LR__2190
1b504                 | '         delay := lookupDelay(freq)
1b504     0F 13 02 F6 | 	mov	arg01, local01
1b508     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1b50c     FD 20 02 F6 | 	mov	local02, result1
1b510     04 00 90 FD | 	jmp	#LR__2191
1b514                 | LR__2190
1b514                 | '     else
1b514                 | '         delay <#= $f ' limit to 15
1b514     0F 20 66 F3 | 	fles	local02, #15
1b518                 | LR__2191
1b518                 | ' 
1b518                 | '     ' create our lock
1b518                 | ' 
1b518                 | '     driverlock := LOCKNEW()  
1b518     00 FA 05 F6 | 	mov	result1, #0
1b51c     04 FA 61 FD | 	locknew	result1
1b520     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b524     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1b528                 | '     if driverlock == -1
1b528     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b52c     FF FF 7F FF 
1b530     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b534                 | '         return ERR_NO_LOCK
1b534     1A FA 65 A6 |  if_e	neg	result1, #26
1b538     D0 00 90 AD |  if_e	jmp	#LR__2193
1b53c                 | ' 
1b53c                 | '     ' patch in the proper data and HUB addresses to the startup structure
1b53c                 | ' 
1b53c                 | '     long[@startupData][0]:=clkfreq
1b53c     14 1E 06 FB | 	rdlong	local01, #20
1b540     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1b544     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1b548                 | ' '    long[@startupData][1]:=$1000_0000
1b548                 | '     long[@startupData][5]:=@deviceData
1b548     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1b54c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b550     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1b554     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1b558     14 14 06 F1 | 	add	arg02, #20
1b55c     0A 1F 62 FC | 	wrlong	local01, arg02
1b560                 | '     long[@startupData][6]:=@qosData
1b560     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1b564     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b568     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1b56c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1b570     18 14 06 F1 | 	add	arg02, #24
1b574     0A 1F 62 FC | 	wrlong	local01, arg02
1b578                 | '     long[@startupData][7]:=$7FF00
1b578     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b57c     1C 1E 06 F1 | 	add	local01, #28
1b580     FF 03 80 FF 
1b584     0F 01 6A FC | 	wrlong	##524032, local01
1b588                 | ' 
1b588                 | '     ' setup some default bank and QoS parameter values
1b588                 | ' 
1b588                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1b588     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1b58c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1b590     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1b594     10 18 66 F0 | 	shl	arg04, #16
1b598     0C 20 66 F0 | 	shl	local02, #12
1b59c     10 19 42 F5 | 	or	arg04, local02
1b5a0     18 18 46 F5 | 	or	arg04, #24
1b5a4     0C 15 02 F6 | 	mov	arg02, arg04
1b5a8     02 16 06 F6 | 	mov	arg03, #2
1b5ac     A0 00 A0 FD | 	call	#\builtin_longfill_
1b5b0                 | '     longfill(@qosData, $FFFF0000, 8)
1b5b0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1b5b4     07 16 06 F6 | 	mov	arg03, #7
1b5b8     28 16 62 FD | 	setq	arg03
1b5bc     80 FF FF FF 
1b5c0     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1b5c4                 | ' 
1b5c4                 | '     ' get the address of the PSRAM memory driver so we can start it
1b5c4                 | ' 
1b5c4                 | '     driverAddr:= driver.getDriverAddr()
1b5c4                 | '     return @driver_start
1b5c4     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1b5c8     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1b5cc     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1b5d0                 | ' 
1b5d0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1b5d0                 | ' 
1b5d0                 | '     if desiredcog < 0
1b5d0     00 22 56 F2 | 	cmps	local03, #0 wc
1b5d4                 | '         desiredcog := NEWCOG
1b5d4     10 22 06 C6 |  if_b	mov	local03, #16
1b5d8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1b5d8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1b5dc     11 25 02 F6 | 	mov	local04, local03
1b5e0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1b5e4     0A 25 F2 FC | 	coginit	local04, arg02 wc
1b5e8     01 24 66 C6 |  if_b	neg	local04, #1
1b5ec     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1b5f0     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1b5f4                 | '     repeat until long[@startupData] == 0 
1b5f4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1b5f8                 | LR__2192
1b5f8     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1b5fc     F8 FF 9F 5D |  if_ne	jmp	#LR__2192
1b600                 | ' 
1b600                 | '     return drivercog
1b600     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1b604     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1b608     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b60c                 | LR__2193
1b60c     A7 F0 03 F6 | 	mov	ptra, fp
1b610     B2 00 A0 FD | 	call	#popregs_
1b614                 | _psram_spin2_startx_ret
1b614     2D 00 64 FD | 	ret
1b618                 | 
1b618                 | ' 
1b618                 | ' '..............................................................................
1b618                 | ' 
1b618                 | ' {{
1b618                 | ' }}
1b618                 | ' PUB stop() : i
1b618                 | _psram_spin2_stop
1b618     00 00 06 F6 | 	mov	_var01, #0
1b61c                 | '     if drivercog <> -1
1b61c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b620     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b624     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b628     FF FF 7F FF 
1b62c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1b630     70 00 90 AD |  if_e	jmp	#LR__2203
1b634                 | '         cogstop(drivercog) ' a rather brutal stop
1b634     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b638     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b63c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b640     03 12 62 FD | 	cogstop	arg01
1b644     97 26 48 FB | 	callpa	#(@LR__2202-@LR__2200)>>2,fcache_load_ptr_
1b648                 | '         repeat i from 0 to 7
1b648                 | LR__2200
1b648                 | '             if long[$7FF00][i*3] < 0
1b648     00 FB 01 F6 | 	mov	result1, _var01
1b64c     01 FA 65 F0 | 	shl	result1, #1
1b650     00 FB 01 F1 | 	add	result1, _var01
1b654     02 FA 65 F0 | 	shl	result1, #2
1b658     FF 03 00 FF 
1b65c     00 FB 05 F1 | 	add	result1, ##524032
1b660     FD FA 01 FB | 	rdlong	result1, result1
1b664     00 FA 55 F2 | 	cmps	result1, #0 wc
1b668     1C 00 90 3D |  if_ae	jmp	#LR__2201
1b66c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1b66c     00 FB 01 F6 | 	mov	result1, _var01
1b670     01 FA 65 F0 | 	shl	result1, #1
1b674     00 FB 01 F1 | 	add	result1, _var01
1b678     02 FA 65 F0 | 	shl	result1, #2
1b67c     FF 03 00 FF 
1b680     00 FB 05 F1 | 	add	result1, ##524032
1b684     FD 20 68 FC | 	wrlong	#16, result1
1b688                 | LR__2201
1b688     01 00 06 F1 | 	add	_var01, #1
1b68c     08 00 56 F2 | 	cmps	_var01, #8 wc
1b690     B4 FF 9F CD |  if_b	jmp	#LR__2200
1b694                 | LR__2202
1b694                 | '         drivercog := -1
1b694     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b698     FF FF FF FF 
1b69c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1b6a0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b6a4                 | LR__2203
1b6a4                 | '     if driverlock <> -1
1b6a4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b6a8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1b6ac     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b6b0     FF FF 7F FF 
1b6b4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1b6b8                 | '         LOCKRET(driverlock)
1b6b8     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1b6bc     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1b6c0     05 12 62 5D |  if_ne	lockret	arg01
1b6c4                 | '         driverlock := -1
1b6c4     FF FF FF 5F 
1b6c8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1b6cc     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1b6d0     00 FB 01 F6 | 	mov	result1, _var01
1b6d4                 | _psram_spin2_stop_ret
1b6d4     2D 00 64 FD | 	ret
1b6d8                 | 
1b6d8                 | ' 
1b6d8                 | ' '..............................................................................
1b6d8                 | ' 
1b6d8                 | ' {{
1b6d8                 | ' }}
1b6d8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1b6d8                 | _psram_spin2_read1
1b6d8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1b6d8                 | '     if drivercog == -1 ' driver must be running
1b6d8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b6dc     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1b6e0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b6e4     FF FF 7F FF 
1b6e8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1b6ec                 | '         return ERR_INACTIVE
1b6ec     0F FA 65 A6 |  if_e	neg	result1, #15
1b6f0     7C 00 90 AD |  if_e	jmp	#LR__2211
1b6f4                 | '     if count == 0 ' don't even bother reading
1b6f4     00 16 0E F2 | 	cmp	arg03, #0 wz
1b6f8                 | '         return 0
1b6f8     00 FA 05 A6 |  if_e	mov	result1, #0
1b6fc     70 00 90 AD |  if_e	jmp	#LR__2211
1b700                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1b700     00 FA 05 F6 | 	mov	result1, #0
1b704     01 FA 61 FD | 	cogid	result1
1b708     FD 00 02 F6 | 	mov	_var01, result1
1b70c     01 00 66 F0 | 	shl	_var01, #1
1b710     FD 00 02 F1 | 	add	_var01, result1
1b714     02 00 66 F0 | 	shl	_var01, #2
1b718     FF 03 00 FF 
1b71c     00 03 06 F6 | 	mov	_var02, ##524032
1b720     00 03 02 F1 | 	add	_var02, _var01
1b724                 | '     if long[mailbox] < 0
1b724     01 01 02 FB | 	rdlong	_var01, _var02
1b728     00 00 56 F2 | 	cmps	_var01, #0 wc
1b72c                 | '         return ERR_MAILBOX_BUSY
1b72c     1C FA 65 C6 |  if_b	neg	result1, #28
1b730     3C 00 90 CD |  if_b	jmp	#LR__2211
1b734                 | '     long[mailbox][2] := count
1b734     08 02 06 F1 | 	add	_var02, #8
1b738     01 17 62 FC | 	wrlong	arg03, _var02
1b73c                 | '     long[mailbox][1] := dstHubAddr
1b73c     04 02 86 F1 | 	sub	_var02, #4
1b740     01 13 62 FC | 	wrlong	arg01, _var02
1b744     04 02 86 F1 | 	sub	_var02, #4
1b748                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1b748     0A 05 02 F6 | 	mov	_var03, arg02
1b74c     D9 04 06 F4 | 	bitl	_var03, #217
1b750     00 00 58 FF 
1b754     00 00 06 F6 | 	mov	_var01, ##-1342177280
1b758     02 01 02 F1 | 	add	_var01, _var03
1b75c     01 01 62 FC | 	wrlong	_var01, _var02
1b760                 | '     repeat
1b760                 | LR__2210
1b760                 | '         result := long[mailbox]    
1b760     01 05 02 FB | 	rdlong	_var03, _var02
1b764     00 04 56 F2 | 	cmps	_var03, #0 wc
1b768     F4 FF 9F CD |  if_b	jmp	#LR__2210
1b76c                 | '     while result < 0   
1b76c                 | '     return -result                       'return success or error
1b76c     02 FB 61 F6 | 	neg	result1, _var03
1b770                 | LR__2211
1b770                 | _psram_spin2_read1_ret
1b770     2D 00 64 FD | 	ret
1b774                 | 
1b774                 | ' 
1b774                 | ' '..............................................................................
1b774                 | ' 
1b774                 | ' {{
1b774                 | ' }}
1b774                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1b774                 | _psram_spin2_write
1b774                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1b774                 | '     if drivercog == -1 ' driver must be running
1b774     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b778     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1b77c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b780     FF FF 7F FF 
1b784     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1b788                 | '         return ERR_INACTIVE
1b788     0F FA 65 A6 |  if_e	neg	result1, #15
1b78c     7C 00 90 AD |  if_e	jmp	#LR__2221
1b790                 | '     if count == 0 ' don't even bother writing
1b790     00 16 0E F2 | 	cmp	arg03, #0 wz
1b794                 | '         return 0
1b794     00 FA 05 A6 |  if_e	mov	result1, #0
1b798     70 00 90 AD |  if_e	jmp	#LR__2221
1b79c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1b79c     00 FA 05 F6 | 	mov	result1, #0
1b7a0     01 FA 61 FD | 	cogid	result1
1b7a4     FD 00 02 F6 | 	mov	_var01, result1
1b7a8     01 00 66 F0 | 	shl	_var01, #1
1b7ac     FD 00 02 F1 | 	add	_var01, result1
1b7b0     02 00 66 F0 | 	shl	_var01, #2
1b7b4     FF 03 00 FF 
1b7b8     00 03 06 F6 | 	mov	_var02, ##524032
1b7bc     00 03 02 F1 | 	add	_var02, _var01
1b7c0                 | '     if long[mailbox] < 0
1b7c0     01 01 02 FB | 	rdlong	_var01, _var02
1b7c4     00 00 56 F2 | 	cmps	_var01, #0 wc
1b7c8                 | '         return ERR_MAILBOX_BUSY
1b7c8     1C FA 65 C6 |  if_b	neg	result1, #28
1b7cc     3C 00 90 CD |  if_b	jmp	#LR__2221
1b7d0                 | '     long[mailbox][2] := count
1b7d0     08 02 06 F1 | 	add	_var02, #8
1b7d4     01 17 62 FC | 	wrlong	arg03, _var02
1b7d8                 | '     long[mailbox][1] := srcHubAddr
1b7d8     04 02 86 F1 | 	sub	_var02, #4
1b7dc     01 13 62 FC | 	wrlong	arg01, _var02
1b7e0     04 02 86 F1 | 	sub	_var02, #4
1b7e4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1b7e4     0A 05 02 F6 | 	mov	_var03, arg02
1b7e8     D9 04 06 F4 | 	bitl	_var03, #217
1b7ec     00 00 78 FF 
1b7f0     00 00 06 F6 | 	mov	_var01, ##-268435456
1b7f4     02 01 02 F1 | 	add	_var01, _var03
1b7f8     01 01 62 FC | 	wrlong	_var01, _var02
1b7fc                 | '     repeat
1b7fc                 | LR__2220
1b7fc                 | '         result := long[mailbox]    
1b7fc     01 05 02 FB | 	rdlong	_var03, _var02
1b800     00 04 56 F2 | 	cmps	_var03, #0 wc
1b804     F4 FF 9F CD |  if_b	jmp	#LR__2220
1b808                 | '     while result < 0   
1b808                 | '     return -result                       'return success or error
1b808     02 FB 61 F6 | 	neg	result1, _var03
1b80c                 | LR__2221
1b80c                 | _psram_spin2_write_ret
1b80c     2D 00 64 FD | 	ret
1b810                 | 
1b810                 | ' 
1b810                 | ' ' generalized fill
1b810                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1b810                 | _psram_spin2_fill
1b810     09 01 02 F6 | 	mov	_var01, arg01
1b814     0A 03 02 F6 | 	mov	_var02, arg02
1b818     0B 05 02 F6 | 	mov	_var03, arg03
1b81c     0D 07 02 F6 | 	mov	_var04, arg05
1b820                 | '     case datasize 
1b820     01 06 86 F1 | 	sub	_var04, #1
1b824     04 06 26 F3 | 	fle	_var04, #4
1b828     30 06 62 FD | 	jmprel	_var04
1b82c                 | LR__2230
1b82c     10 00 90 FD | 	jmp	#LR__2231
1b830     18 00 90 FD | 	jmp	#LR__2232
1b834     2C 00 90 FD | 	jmp	#LR__2234
1b838     1C 00 90 FD | 	jmp	#LR__2233
1b83c     24 00 90 FD | 	jmp	#LR__2234
1b840                 | LR__2231
1b840                 | '         1: req := driver.R_WRITEBYTE
1b840     00 00 60 FF 
1b844     00 08 06 F6 | 	mov	_var05, ##-1073741824
1b848     20 00 90 FD | 	jmp	#LR__2235
1b84c                 | LR__2232
1b84c                 | '         2: req := driver.R_WRITEWORD
1b84c     00 00 68 FF 
1b850     00 08 06 F6 | 	mov	_var05, ##-805306368
1b854     14 00 90 FD | 	jmp	#LR__2235
1b858                 | LR__2233
1b858                 | '         4: req := driver.R_WRITELONG
1b858     00 00 70 FF 
1b85c     00 08 06 F6 | 	mov	_var05, ##-536870912
1b860     08 00 90 FD | 	jmp	#LR__2235
1b864                 | LR__2234
1b864                 | '         other : return ERR_INVALID
1b864     06 FA 65 F6 | 	neg	result1, #6
1b868     94 00 90 FD | 	jmp	#LR__2237
1b86c                 | LR__2235
1b86c                 | '     if count == 0   ' nothing to do
1b86c     00 04 0E F2 | 	cmp	_var03, #0 wz
1b870                 | '         return 0
1b870     00 FA 05 A6 |  if_e	mov	result1, #0
1b874     88 00 90 AD |  if_e	jmp	#LR__2237
1b878                 | '     if drivercog == -1
1b878     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b87c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1b880     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b884     FF FF 7F FF 
1b888     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1b88c                 | '         return ERR_INACTIVE
1b88c     0F FA 65 A6 |  if_e	neg	result1, #15
1b890     6C 00 90 AD |  if_e	jmp	#LR__2237
1b894                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1b894     00 FA 05 F6 | 	mov	result1, #0
1b898     01 FA 61 FD | 	cogid	result1
1b89c     FD 06 02 F6 | 	mov	_var04, result1
1b8a0     01 06 66 F0 | 	shl	_var04, #1
1b8a4     FD 06 02 F1 | 	add	_var04, result1
1b8a8     02 06 66 F0 | 	shl	_var04, #2
1b8ac     FF 03 00 FF 
1b8b0     00 0B 06 F6 | 	mov	_var06, ##524032
1b8b4     03 0B 02 F1 | 	add	_var06, _var04
1b8b8                 | '     if long[mailbox] < 0
1b8b8     05 07 02 FB | 	rdlong	_var04, _var06
1b8bc     00 06 56 F2 | 	cmps	_var04, #0 wc
1b8c0                 | '         return ERR_MAILBOX_BUSY
1b8c0     1C FA 65 C6 |  if_b	neg	result1, #28
1b8c4     38 00 90 CD |  if_b	jmp	#LR__2237
1b8c8                 | '     long[mailbox][2] := count
1b8c8     08 0A 06 F1 | 	add	_var06, #8
1b8cc     05 05 62 FC | 	wrlong	_var03, _var06
1b8d0                 | '     long[mailbox][1] := pattern
1b8d0     04 0A 86 F1 | 	sub	_var06, #4
1b8d4     05 03 62 FC | 	wrlong	_var02, _var06
1b8d8     04 0A 86 F1 | 	sub	_var06, #4
1b8dc                 | '     long[mailbox] := req + (addr & $1ffffff)
1b8dc     04 0D 02 F6 | 	mov	_var07, _var05
1b8e0     00 0F 02 F6 | 	mov	_var08, _var01
1b8e4     D9 0E 06 F4 | 	bitl	_var08, #217
1b8e8     07 0D 02 F1 | 	add	_var07, _var08
1b8ec     05 0D 62 FC | 	wrlong	_var07, _var06
1b8f0                 | '     repeat
1b8f0                 | LR__2236
1b8f0                 | '         r := long[mailbox]
1b8f0     05 0F 02 FB | 	rdlong	_var08, _var06
1b8f4     00 0E 56 F2 | 	cmps	_var08, #0 wc
1b8f8     F4 FF 9F CD |  if_b	jmp	#LR__2236
1b8fc                 | '     while r < 0
1b8fc                 | '     return -r                  ' return 0 for success or negated error code
1b8fc     07 FB 61 F6 | 	neg	result1, _var08
1b900                 | LR__2237
1b900                 | _psram_spin2_fill_ret
1b900     2D 00 64 FD | 	ret
1b904                 | 
1b904                 | ' 
1b904                 | ' '..............................................................................
1b904                 | ' 
1b904                 | ' {{
1b904                 | ' }}
1b904                 | ' PUB setQos(cog, qos) : result | mailbox
1b904                 | _psram_spin2_setQos
1b904     09 01 02 F6 | 	mov	_var01, arg01
1b908                 | '     if drivercog == -1 ' driver must be running
1b908     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b90c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1b910     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b914     FF FF 7F FF 
1b918     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1b91c                 | '         return ERR_INACTIVE
1b91c     0F FA 65 A6 |  if_e	neg	result1, #15
1b920     9C 00 90 AD |  if_e	jmp	#LR__2244
1b924                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1b924     00 00 56 F2 | 	cmps	_var01, #0 wc
1b928     08 00 90 CD |  if_b	jmp	#LR__2240
1b92c     08 00 56 F2 | 	cmps	_var01, #8 wc
1b930     08 00 90 CD |  if_b	jmp	#LR__2241
1b934                 | LR__2240
1b934                 | '         return ERR_INVALID
1b934     06 FA 65 F6 | 	neg	result1, #6
1b938     84 00 90 FD | 	jmp	#LR__2244
1b93c                 | LR__2241
1b93c                 | '     long[@qosData][cog] := qos & !$1ff
1b93c     FF 15 26 F5 | 	andn	arg02, #511
1b940     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1b944     02 00 66 F0 | 	shl	_var01, #2
1b948     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1b94c     00 15 62 FC | 	wrlong	arg02, _var01
1b950                 | '     mailbox := $7FF00 + drivercog*12
1b950     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1b954     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1b958     02 07 02 F6 | 	mov	_var04, _var03
1b95c     01 06 66 F0 | 	shl	_var04, #1
1b960     02 07 02 F1 | 	add	_var04, _var03
1b964     02 06 66 F0 | 	shl	_var04, #2
1b968     FF 03 00 FF 
1b96c     00 09 06 F6 | 	mov	_var05, ##524032
1b970     03 09 02 F1 | 	add	_var05, _var04
1b974                 | '     repeat until LOCKTRY(driverlock)
1b974     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1b978                 | LR__2242
1b978     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b97c     06 12 72 FD | 	locktry	arg01 wc
1b980     F4 FF 9F 3D |  if_ae	jmp	#LR__2242
1b984     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b988                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1b988     00 06 06 F6 | 	mov	_var04, #0
1b98c     01 06 62 FD | 	cogid	_var04
1b990     00 00 78 FF 
1b994     00 02 06 F6 | 	mov	_var02, ##-268435456
1b998     03 03 02 F1 | 	add	_var02, _var04
1b99c     04 03 62 FC | 	wrlong	_var02, _var05
1b9a0                 | '     repeat while long[mailbox] < 0
1b9a0                 | LR__2243
1b9a0     04 03 02 FB | 	rdlong	_var02, _var05
1b9a4     00 02 56 F2 | 	cmps	_var02, #0 wc
1b9a8     F4 FF 9F CD |  if_b	jmp	#LR__2243
1b9ac                 | '     LOCKREL(driverlock)
1b9ac     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b9b0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b9b4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b9b8     07 12 72 FD | 	lockrel	arg01 wc
1b9bc     00 FA 05 F6 | 	mov	result1, #0
1b9c0                 | LR__2244
1b9c0                 | _psram_spin2_setQos_ret
1b9c0     2D 00 64 FD | 	ret
1b9c4                 | 
1b9c4                 | ' 
1b9c4                 | ' '..............................................................................
1b9c4                 | ' 
1b9c4                 | ' {{
1b9c4                 | ' }}
1b9c4                 | ' PRI lookupDelay(freq) : delay | profile
1b9c4                 | _psram_spin2_lookupDelay
1b9c4                 | '     profile := @delayTable
1b9c4     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1b9c8     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1b9cc                 | '     delay := long[profile][0]
1b9cc     00 03 02 FB | 	rdlong	_var02, _var01
1b9d0                 | '     repeat while long[profile][1] 
1b9d0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1b9d4     97 16 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
1b9d8                 | LR__2250
1b9d8     04 00 06 F1 | 	add	_var01, #4
1b9dc     00 FB 09 FB | 	rdlong	result1, _var01 wz
1b9e0     04 00 86 F1 | 	sub	_var01, #4
1b9e4     1C 00 90 AD |  if_e	jmp	#LR__2252
1b9e8                 | '         if freq +< long[profile][1] 
1b9e8     04 00 06 F1 | 	add	_var01, #4
1b9ec     00 FB 01 FB | 	rdlong	result1, _var01
1b9f0     04 00 86 F1 | 	sub	_var01, #4
1b9f4     FD 12 12 F2 | 	cmp	arg01, result1 wc
1b9f8                 | '             quit
1b9f8                 | '         profile += 4
1b9f8     04 00 06 31 |  if_ae	add	_var01, #4
1b9fc                 | '         delay++
1b9fc     01 02 06 31 |  if_ae	add	_var02, #1
1ba00     D4 FF 9F 3D |  if_ae	jmp	#LR__2250
1ba04                 | LR__2251
1ba04                 | LR__2252
1ba04     01 FB 01 F6 | 	mov	result1, _var02
1ba08                 | _psram_spin2_lookupDelay_ret
1ba08     2D 00 64 FD | 	ret
1ba0c                 | 
1ba0c                 | ' 
1ba0c                 | ' PUB start() : r
1ba0c                 | _usbnew_spin2_start
1ba0c     00 00 06 F6 | 	mov	_var01, #0
1ba10                 | '   ifnot driver_cog
1ba10     15 00 00 FF 
1ba14     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1ba18     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1ba1c     15 00 00 FF 
1ba20     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1ba24     38 00 90 5D |  if_ne	jmp	#LR__2260
1ba28                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1ba28     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1ba2c     10 00 06 F6 | 	mov	_var01, #16
1ba30     00 16 06 F6 | 	mov	arg03, #0
1ba34     28 16 62 FD | 	setq	arg03
1ba38     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1ba3c     01 00 66 C6 |  if_b	neg	_var01, #1
1ba40                 | '     if r >= 0
1ba40     00 00 56 F2 | 	cmps	_var01, #0 wc
1ba44                 | '       driver_cog := r+1
1ba44     00 03 02 36 |  if_ae	mov	_var02, _var01
1ba48     01 02 06 31 |  if_ae	add	_var02, #1
1ba4c     15 00 00 3F 
1ba50     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1ba54     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1ba58     15 00 00 3F 
1ba5c     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1ba60                 | LR__2260
1ba60     00 FB 01 F6 | 	mov	result1, _var01
1ba64                 | _usbnew_spin2_start_ret
1ba64     2D 00 64 FD | 	ret
1ba68                 | 
1ba68                 | '     '' (Always enabled)
1ba68                 | ' 
1ba68                 | ' '' Get current pressed state of a keyboard key
1ba68                 | ' PUB keystate(key) : r | buf[2],tmp
1ba68                 | _usbnew_spin2_keystate
1ba68     00 04 06 F6 | 	mov	_var03, #0
1ba6c                 | '   if key >= $E0 && key < $E8
1ba6c     E0 12 56 F2 | 	cmps	arg01, #224 wc
1ba70     34 00 90 CD |  if_b	jmp	#LR__2270
1ba74     E8 12 56 F2 | 	cmps	arg01, #232 wc
1ba78     2C 00 90 3D |  if_ae	jmp	#LR__2270
1ba7c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1ba7c     00 FA 05 F6 | 	mov	result1, #0
1ba80     13 00 00 FF 
1ba84     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1ba88     09 07 02 F6 | 	mov	_var04, arg01
1ba8c     E0 06 86 F1 | 	sub	_var04, #224
1ba90     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1ba94     03 09 4A F0 | 	shr	_var05, _var04 wz
1ba98     13 00 00 FF 
1ba9c     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1baa0     01 FA 65 56 |  if_ne	neg	result1, #1
1baa4     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1baa8                 | LR__2270
1baa8                 | '   else
1baa8                 | '     '' Do this in inline ASM to ensure atomicity
1baa8                 | '     tmp := @hkbd_report
1baa8     13 00 00 FF 
1baac     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1bab0     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1bab4                 | '     org
1bab4     13 00 00 FF 
1bab8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1babc     97 1E 48 FB | 	callpa	#(@LR__2272-@LR__2271)>>2,fcache_load_ptr_
1bac0                 | LR__2271
1bac0 000             | 	org	0
1bac0 000 28 02 64 FD | 	setq	#1
1bac4 001 04 01 02 FB | 	rdlong	_var01, _var05
1bac8 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1bacc 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1bad0 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1bad4 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bad8 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1badc 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bae0 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1bae4 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1bae8 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1baec 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1baf0 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1baf4 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1baf8 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1bafc 00f             | LR__2272
1bafc                 | 	orgh
1bafc     02 FB 01 F6 | 	mov	result1, _var03
1bb00                 | _usbnew_spin2_keystate_ret
1bb00     2D 00 64 FD | 	ret
1bb04                 | 
1bb04                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1bb04                 | ' 
1bb04                 | ' '' Return key event from buffer if there is one
1bb04                 | ' PUB get_key() : r | tail
1bb04                 | _usbnew_spin2_get_key
1bb04                 | '   tail := keyq_tail
1bb04     0F 00 00 FF 
1bb08     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1bb0c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1bb10                 | '   if keyq_head == tail
1bb10     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1bb14     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1bb18     0F 00 00 FF 
1bb1c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1bb20     00 03 0A F2 | 	cmp	_var02, _var01 wz
1bb24                 | '     return 0 ' No event
1bb24     00 FA 05 A6 |  if_e	mov	result1, #0
1bb28     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1bb2c                 | '   r := keyq_data[tail]
1bb2c     00 03 02 F6 | 	mov	_var02, _var01
1bb30     02 02 66 F0 | 	shl	_var02, #2
1bb34     0F 00 00 FF 
1bb38     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1bb3c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1bb40     01 FB 01 FB | 	rdlong	result1, _var02
1bb44                 | '   if ++tail == KEYQUEUE_SIZE
1bb44     01 00 06 F1 | 	add	_var01, #1
1bb48     80 00 0E F2 | 	cmp	_var01, #128 wz
1bb4c                 | '     tail := 0
1bb4c     00 00 06 A6 |  if_e	mov	_var01, #0
1bb50                 | '   keyq_tail := tail
1bb50     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1bb54     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1bb58     0F 00 00 FF 
1bb5c     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1bb60                 | _usbnew_spin2_get_key_ret
1bb60     2D 00 64 FD | 	ret
1bb64                 | 
1bb64                 | ' 
1bb64                 | ' '' Emulate mouse movement
1bb64                 | ' PUB mouse_move(x,y)
1bb64                 | _usbnew_spin2_mouse_move
1bb64     02 4A 05 F6 | 	mov	COUNT_, #2
1bb68     A8 00 A0 FD | 	call	#pushregs_
1bb6c     09 1F 02 F6 | 	mov	local01, arg01
1bb70     0A 21 02 F6 | 	mov	local02, arg02
1bb74                 | '   mouse_lock := 1
1bb74     14 00 00 FF 
1bb78     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1bb7c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1bb80     14 00 00 FF 
1bb84     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1bb88                 | '   waitus(2) ' hope driver is now done
1bb88     02 12 06 F6 | 	mov	arg01, #2
1bb8c     AC 0A B0 FD | 	call	#__system___waitus
1bb90                 | '   mouse_xacc := x
1bb90     14 00 00 FF 
1bb94     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1bb98     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1bb9c                 | '   mouse_yacc := y
1bb9c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1bba0     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1bba4                 | '   if mouse_outptr
1bba4     04 00 00 FF 
1bba8     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1bbac     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1bbb0     0F 00 00 FF 
1bbb4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1bbb8     24 00 90 AD |  if_e	jmp	#LR__2280
1bbbc                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1bbbc     10 20 66 F0 | 	shl	local02, #16
1bbc0     0F 1F 32 F9 | 	getword	local01, local01, #0
1bbc4     0F 21 42 F5 | 	or	local02, local01
1bbc8     0F 00 00 FF 
1bbcc     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1bbd0     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1bbd4     0F 00 00 FF 
1bbd8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1bbdc     0F 21 62 FC | 	wrlong	local02, local01
1bbe0                 | LR__2280
1bbe0                 | '   mouse_lock := 0
1bbe0     14 00 00 FF 
1bbe4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1bbe8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1bbec     14 00 00 FF 
1bbf0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1bbf4     A7 F0 03 F6 | 	mov	ptra, fp
1bbf8     B2 00 A0 FD | 	call	#popregs_
1bbfc                 | _usbnew_spin2_mouse_move_ret
1bbfc     2D 00 64 FD | 	ret
1bc00                 | 
1bc00                 | '     '' Set HAVE_HIDPAD to enable.
1bc00                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1bc00                 | ' 
1bc00                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1bc00                 | ' PUB hidpad_id(dev) : r
1bc00                 | _usbnew_spin2_hidpad_id
1bc00                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1bc00     13 00 00 FF 
1bc04     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1bc08     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1bc0c     09 01 02 F6 | 	mov	_var01, arg01
1bc10     03 00 66 F0 | 	shl	_var01, #3
1bc14     09 01 82 F1 | 	sub	_var01, arg01
1bc18     02 00 66 F0 | 	shl	_var01, #2
1bc1c     00 FB 01 F1 | 	add	result1, _var01
1bc20     FD FA 01 FB | 	rdlong	result1, result1
1bc24     13 00 00 FF 
1bc28     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1bc2c                 | _usbnew_spin2_hidpad_id_ret
1bc2c     2D 00 64 FD | 	ret
1bc30                 | 
1bc30                 | ' 
1bc30                 | ' '' Get all button states for a device
1bc30                 | ' PUB hidpad_buttons(dev) : r 
1bc30                 | _usbnew_spin2_hidpad_buttons
1bc30                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1bc30     13 00 00 FF 
1bc34     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1bc38     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1bc3c     09 01 02 F6 | 	mov	_var01, arg01
1bc40     03 00 66 F0 | 	shl	_var01, #3
1bc44     09 01 82 F1 | 	sub	_var01, arg01
1bc48     02 00 66 F0 | 	shl	_var01, #2
1bc4c     00 FB 01 F1 | 	add	result1, _var01
1bc50     14 FA 05 F1 | 	add	result1, #20
1bc54     FD FA 01 FB | 	rdlong	result1, result1
1bc58     13 00 00 FF 
1bc5c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1bc60                 | _usbnew_spin2_hidpad_buttons_ret
1bc60     2D 00 64 FD | 	ret
1bc64                 | 
1bc64                 | ' 
1bc64                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1bc64                 | ' PUB hidpad_axis(dev,axnum) : r
1bc64                 | _usbnew_spin2_hidpad_axis
1bc64                 | '   if axnum +>= 6
1bc64     06 14 16 F2 | 	cmp	arg02, #6 wc
1bc68                 | '     return 0
1bc68     00 FA 05 36 |  if_ae	mov	result1, #0
1bc6c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1bc70                 | '   else 
1bc70                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1bc70     13 00 00 FF 
1bc74     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1bc78     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1bc7c     09 01 02 F6 | 	mov	_var01, arg01
1bc80     03 00 66 F0 | 	shl	_var01, #3
1bc84     09 01 82 F1 | 	sub	_var01, arg01
1bc88     02 00 66 F0 | 	shl	_var01, #2
1bc8c     00 FB 01 F1 | 	add	result1, _var01
1bc90     04 00 06 F6 | 	mov	_var01, #4
1bc94     0A 01 02 F1 | 	add	_var01, arg02
1bc98     01 00 66 F0 | 	shl	_var01, #1
1bc9c     FD 00 02 F1 | 	add	_var01, result1
1bca0     00 FB E1 FA | 	rdword	result1, _var01
1bca4     0F FA 65 F7 | 	signx	result1, #15
1bca8     13 00 00 FF 
1bcac     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1bcb0                 | _usbnew_spin2_hidpad_axis_ret
1bcb0     2D 00 64 FD | 	ret
1bcb4                 | 
1bcb4                 | ' 
1bcb4                 | ' 
1bcb4                 | ' '--------------------------------------------------------------
1bcb4                 | ' '---------- Init the variables, start the cog. ----------------
1bcb4                 | ' '--------------------------------------------------------------
1bcb4                 | ' 
1bcb4                 | ' pub start(mbox,scope,cache) :cog,base | iii
1bcb4                 | _audio096_spin2_start
1bcb4     04 4A 05 F6 | 	mov	COUNT_, #4
1bcb8     A8 00 A0 FD | 	call	#pushregs_
1bcbc     09 1F 02 F6 | 	mov	local01, arg01
1bcc0                 | ' 
1bcc0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1bcc0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1bcc0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1bcc0                 | ' 
1bcc0                 | ' mailboxaddr:=mbox 
1bcc0     F2 1E 62 FC | 	wrlong	local01, objptr
1bcc4                 | ' scope_ptr:=scope
1bcc4     04 E4 05 F1 | 	add	objptr, #4
1bcc8     F2 14 62 FC | 	wrlong	arg02, objptr
1bccc                 | ' cache_ptr:=cache
1bccc     04 E4 05 F1 | 	add	objptr, #4
1bcd0     F2 16 62 FC | 	wrlong	arg03, objptr
1bcd4                 | ' base:=@channel1[0]
1bcd4     04 E4 05 F1 | 	add	objptr, #4
1bcd8     F2 20 02 F6 | 	mov	local02, objptr
1bcdc                 | ' 
1bcdc                 | ' repeat iii from 0 to 7
1bcdc     00 22 06 F6 | 	mov	local03, #0
1bce0     02 00 00 FF 
1bce4     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1bce8     0C E4 85 F1 | 	sub	objptr, #12
1bcec     97 B0 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
1bcf0                 | LR__2290
1bcf0                 | '   long[base+64*iii]:=0
1bcf0     10 1F 02 F6 | 	mov	local01, local02
1bcf4     11 FD 01 F6 | 	mov	result2, local03
1bcf8     06 FC 65 F0 | 	shl	result2, #6
1bcfc     FE 1E 02 F1 | 	add	local01, result2
1bd00     0F 01 68 FC | 	wrlong	#0, local01
1bd04                 | '   long[base+64*iii+4]:=0
1bd04     10 1F 02 F6 | 	mov	local01, local02
1bd08     11 FD 01 F6 | 	mov	result2, local03
1bd0c     06 FC 65 F0 | 	shl	result2, #6
1bd10     FE 1E 02 F1 | 	add	local01, result2
1bd14     04 1E 06 F1 | 	add	local01, #4
1bd18     0F 01 68 FC | 	wrlong	#0, local01
1bd1c                 | '   long[base+64*iii+12]:=0
1bd1c     10 25 02 F6 | 	mov	local04, local02
1bd20     11 1F 02 F6 | 	mov	local01, local03
1bd24     06 1E 66 F0 | 	shl	local01, #6
1bd28     0F 25 02 F1 | 	add	local04, local01
1bd2c     0C 24 06 F1 | 	add	local04, #12
1bd30     12 01 68 FC | 	wrlong	#0, local04
1bd34                 | '   long[base+64*iii+16]:=2 
1bd34     10 25 02 F6 | 	mov	local04, local02
1bd38     11 1F 02 F6 | 	mov	local01, local03
1bd3c     06 1E 66 F0 | 	shl	local01, #6
1bd40     0F 25 02 F1 | 	add	local04, local01
1bd44     10 24 06 F1 | 	add	local04, #16
1bd48     12 05 68 FC | 	wrlong	#2, local04
1bd4c                 | '   word[base+64*iii+20]:=0
1bd4c     10 25 02 F6 | 	mov	local04, local02
1bd50     11 1F 02 F6 | 	mov	local01, local03
1bd54     06 1E 66 F0 | 	shl	local01, #6
1bd58     0F 25 02 F1 | 	add	local04, local01
1bd5c     14 24 06 F1 | 	add	local04, #20
1bd60     12 01 58 FC | 	wrword	#0, local04
1bd64                 | '   word[base+64*iii+22]:=8192
1bd64     10 25 02 F6 | 	mov	local04, local02
1bd68     11 1F 02 F6 | 	mov	local01, local03
1bd6c     06 1E 66 F0 | 	shl	local01, #6
1bd70     0F 25 02 F1 | 	add	local04, local01
1bd74     16 24 06 F1 | 	add	local04, #22
1bd78     10 00 80 FF 
1bd7c     12 01 58 FC | 	wrword	##8192, local04
1bd80                 | '   word[base+64*iii+24]:=4000+2*iii
1bd80     11 25 02 F6 | 	mov	local04, local03
1bd84     01 24 66 F0 | 	shl	local04, #1
1bd88     07 00 00 FF 
1bd8c     A0 1F 06 F6 | 	mov	local01, ##4000
1bd90     12 1F 02 F1 | 	add	local01, local04
1bd94     10 25 02 F6 | 	mov	local04, local02
1bd98     11 FD 01 F6 | 	mov	result2, local03
1bd9c     06 FC 65 F0 | 	shl	result2, #6
1bda0     FE 24 02 F1 | 	add	local04, result2
1bda4     18 24 06 F1 | 	add	local04, #24
1bda8     12 1F 52 FC | 	wrword	local01, local04
1bdac                 | '   word[base+64*iii+26]:=2
1bdac     10 25 02 F6 | 	mov	local04, local02
1bdb0     11 1F 02 F6 | 	mov	local01, local03
1bdb4     06 1E 66 F0 | 	shl	local01, #6
1bdb8     0F 25 02 F1 | 	add	local04, local01
1bdbc     1A 24 06 F1 | 	add	local04, #26
1bdc0     12 05 58 FC | 	wrword	#2, local04
1bdc4                 | '   long [base+64*iii+8]:=@null | $C0000000
1bdc4     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1bdc8     3E 1E 26 F4 | 	bith	local01, #62
1bdcc     10 25 02 F6 | 	mov	local04, local02
1bdd0     11 17 02 F6 | 	mov	arg03, local03
1bdd4     06 16 66 F0 | 	shl	arg03, #6
1bdd8     0B 25 02 F1 | 	add	local04, arg03
1bddc     08 24 06 F1 | 	add	local04, #8
1bde0     12 1F 62 FC | 	wrlong	local01, local04
1bde4                 | '   long[base+64*iii+32]:=0
1bde4     10 25 02 F6 | 	mov	local04, local02
1bde8     11 1F 02 F6 | 	mov	local01, local03
1bdec     06 1E 66 F0 | 	shl	local01, #6
1bdf0     0F 25 02 F1 | 	add	local04, local01
1bdf4     20 24 06 F1 | 	add	local04, #32
1bdf8     12 01 68 FC | 	wrlong	#0, local04
1bdfc                 | '   long[base+64*iii+36]:=0
1bdfc     10 25 02 F6 | 	mov	local04, local02
1be00     11 1F 02 F6 | 	mov	local01, local03
1be04     06 1E 66 F0 | 	shl	local01, #6
1be08     0F 25 02 F1 | 	add	local04, local01
1be0c     24 24 06 F1 | 	add	local04, #36
1be10     12 01 68 FC | 	wrlong	#0, local04
1be14                 | '   long[base+64*iii+40]:=0
1be14     10 25 02 F6 | 	mov	local04, local02
1be18     11 1F 02 F6 | 	mov	local01, local03
1be1c     06 1E 66 F0 | 	shl	local01, #6
1be20     0F 25 02 F1 | 	add	local04, local01
1be24     28 24 06 F1 | 	add	local04, #40
1be28     12 01 68 FC | 	wrlong	#0, local04
1be2c                 | '   long[base+64*iii+44]:=0
1be2c     10 25 02 F6 | 	mov	local04, local02
1be30     11 1F 02 F6 | 	mov	local01, local03
1be34     06 1E 66 F0 | 	shl	local01, #6
1be38     0F 25 02 F1 | 	add	local04, local01
1be3c     2C 24 06 F1 | 	add	local04, #44
1be40     12 01 68 FC | 	wrlong	#0, local04
1be44     01 22 06 F1 | 	add	local03, #1
1be48     08 22 56 F2 | 	cmps	local03, #8 wc
1be4c     A0 FE 9F CD |  if_b	jmp	#LR__2290
1be50                 | LR__2291
1be50     02 00 00 FF 
1be54     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1be58                 | '   
1be58                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1be58     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1be5c     F2 16 02 F6 | 	mov	arg03, objptr
1be60     10 24 06 F6 | 	mov	local04, #16
1be64     28 16 62 FD | 	setq	arg03
1be68     0A 25 F2 FC | 	coginit	local04, arg02 wc
1be6c     01 24 66 C6 |  if_b	neg	local04, #1
1be70                 | ' waitms(100)
1be70     64 12 06 F6 | 	mov	arg01, #100
1be74     58 07 B0 FD | 	call	#__system___waitms
1be78                 | ' return cog,base
1be78     10 FD 01 F6 | 	mov	result2, local02
1be7c     12 FB 01 F6 | 	mov	result1, local04
1be80     A7 F0 03 F6 | 	mov	ptra, fp
1be84     B2 00 A0 FD | 	call	#popregs_
1be88                 | _audio096_spin2_start_ret
1be88     2D 00 64 FD | 	ret
1be8c                 | 
1be8c                 | ' 
1be8c                 | ' ' a simple play procedure to not poke everything. 
1be8c                 | ' 
1be8c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1be8c                 | _audio096_spin2_play
1be8c     0C E4 05 F1 | 	add	objptr, #12
1be90     F2 00 02 F6 | 	mov	_var01, objptr
1be94     06 12 66 F0 | 	shl	arg01, #6
1be98     09 01 02 F1 | 	add	_var01, arg01
1be9c     00 13 02 F6 | 	mov	arg01, _var01
1bea0     0C 12 06 F1 | 	add	arg01, #12
1bea4     09 1B 62 FC | 	wrlong	arg05, arg01
1bea8     00 1C 56 F2 | 	cmps	arg06, #0 wc
1beac     00 13 02 36 |  if_ae	mov	arg01, _var01
1beb0     10 12 06 31 |  if_ae	add	arg01, #16
1beb4     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1beb8     02 1A 06 C1 |  if_b	add	arg05, #2
1bebc     00 13 02 C6 |  if_b	mov	arg01, _var01
1bec0     10 12 06 C1 |  if_b	add	arg01, #16
1bec4     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1bec8     0B 13 52 F6 | 	abs	arg01, arg03 wc
1becc     0B 0A 80 FF 
1bed0     09 6D 18 FD | 	qdiv	##1316406, arg01
1bed4                 | ' 
1bed4                 | ' base2:=@channel1[0]+64*channel
1bed4                 | ' 
1bed4                 | ' 
1bed4                 | ' long[base2+12]:= len
1bed4                 | ' if loop >=0 
1bed4                 | '   long[base2+16]:= loop
1bed4     0C E4 85 F1 | 	sub	objptr, #12
1bed8                 | ' else
1bed8                 | '   long[base2+16]:= len+2
1bed8                 | ' word[base2+20]:=vol
1bed8     00 13 02 F6 | 	mov	arg01, _var01
1bedc     14 12 06 F1 | 	add	arg01, #20
1bee0     09 19 52 FC | 	wrword	arg04, arg01
1bee4                 | ' word[base2+24]:= 1316406/splfreq 
1bee4     00 19 02 F6 | 	mov	arg04, _var01
1bee8     18 18 06 F1 | 	add	arg04, #24
1beec                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1beec                 | ' long[base2+28]:=$40000000
1beec                 | ' long[base2+8]:=sample+$C0000000 
1beec     00 00 60 FF 
1bef0     00 14 06 F1 | 	add	arg02, ##-1073741824
1bef4     18 12 62 FD | 	getqx	arg01
1bef8     09 13 82 F6 | 	negc	arg01, arg01
1befc     0C 13 52 FC | 	wrword	arg01, arg04
1bf00     00 13 02 F6 | 	mov	arg01, _var01
1bf04     1A 12 06 F1 | 	add	arg01, #26
1bf08     09 01 5A FC | 	wrword	#256, arg01
1bf0c     00 13 02 F6 | 	mov	arg01, _var01
1bf10     1C 12 06 F1 | 	add	arg01, #28
1bf14     00 00 A0 FF 
1bf18     09 01 68 FC | 	wrlong	##1073741824, arg01
1bf1c     08 00 06 F1 | 	add	_var01, #8
1bf20     00 15 62 FC | 	wrlong	arg02, _var01
1bf24                 | _audio096_spin2_play_ret
1bf24     2D 00 64 FD | 	ret
1bf28                 | 
1bf28                 | ' 
1bf28                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1bf28                 | _audio096_spin2_play8
1bf28                 | ' 
1bf28                 | ' base2:=@channel1[0]+64*channel
1bf28     0C E4 05 F1 | 	add	objptr, #12
1bf2c     F2 00 02 F6 | 	mov	_var01, objptr
1bf30     06 12 66 F0 | 	shl	arg01, #6
1bf34     09 01 02 F1 | 	add	_var01, arg01
1bf38                 | ' long[base2]:=0
1bf38     00 01 68 FC | 	wrlong	#0, _var01
1bf3c                 | ' long[base2+8]:=sample+$40000000 
1bf3c     00 00 20 FF 
1bf40     00 14 06 F1 | 	add	arg02, ##1073741824
1bf44     00 13 02 F6 | 	mov	arg01, _var01
1bf48     08 12 06 F1 | 	add	arg01, #8
1bf4c     09 15 62 FC | 	wrlong	arg02, arg01
1bf50                 | ' if loop>=0
1bf50     00 1C 56 F2 | 	cmps	arg06, #0 wc
1bf54     0C E4 85 F1 | 	sub	objptr, #12
1bf58     1C 00 90 CD |  if_b	jmp	#LR__2300
1bf5c                 | '   long[base2+12]:=loop
1bf5c     00 15 02 F6 | 	mov	arg02, _var01
1bf60     0C 14 06 F1 | 	add	arg02, #12
1bf64     0A 1D 62 FC | 	wrlong	arg06, arg02
1bf68                 | '   long[base2+16]:= len
1bf68     00 1D 02 F6 | 	mov	arg06, _var01
1bf6c     10 1C 06 F1 | 	add	arg06, #16
1bf70     0E 1B 62 FC | 	wrlong	arg05, arg06
1bf74     1C 00 90 FD | 	jmp	#LR__2301
1bf78                 | LR__2300
1bf78                 | ' else
1bf78                 | '   long[base2+12]:= len
1bf78     00 1D 02 F6 | 	mov	arg06, _var01
1bf7c     0C 1C 06 F1 | 	add	arg06, #12
1bf80     0E 1B 62 FC | 	wrlong	arg05, arg06
1bf84                 | '   long[base2+16]:= len+1
1bf84     01 1A 06 F1 | 	add	arg05, #1
1bf88     00 13 02 F6 | 	mov	arg01, _var01
1bf8c     10 12 06 F1 | 	add	arg01, #16
1bf90     09 1B 62 FC | 	wrlong	arg05, arg01
1bf94                 | LR__2301
1bf94     0B 17 52 F6 | 	abs	arg03, arg03 wc
1bf98     0B 0A 80 FF 
1bf9c     0B 6D 18 FD | 	qdiv	##1316406, arg03
1bfa0                 | ' word[base2+20]:=vol
1bfa0     00 17 02 F6 | 	mov	arg03, _var01
1bfa4     14 16 06 F1 | 	add	arg03, #20
1bfa8     0B 19 52 FC | 	wrword	arg04, arg03
1bfac                 | ' word[base2+24]:= 1316406 /splfreq 
1bfac     00 13 02 F6 | 	mov	arg01, _var01
1bfb0     18 12 06 F1 | 	add	arg01, #24
1bfb4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1bfb4                 | ' long[base2+28]:=$40000000
1bfb4     18 18 62 FD | 	getqx	arg04
1bfb8     0C 19 82 F6 | 	negc	arg04, arg04
1bfbc     09 19 52 FC | 	wrword	arg04, arg01
1bfc0     00 19 02 F6 | 	mov	arg04, _var01
1bfc4     1A 18 06 F1 | 	add	arg04, #26
1bfc8     0C 01 5A FC | 	wrword	#256, arg04
1bfcc     1C 00 06 F1 | 	add	_var01, #28
1bfd0     00 00 A0 FF 
1bfd4     00 01 68 FC | 	wrlong	##1073741824, _var01
1bfd8                 | _audio096_spin2_play8_ret
1bfd8     2D 00 64 FD | 	ret
1bfdc                 | 
1bfdc                 | ' 
1bfdc                 | '     
1bfdc                 | ' pub stop(channel) 'silence it
1bfdc                 | _audio096_spin2_stop
1bfdc                 | ' 
1bfdc                 | ' word[@channel1[0]+64*channel+20]:=0
1bfdc     0C E4 05 F1 | 	add	objptr, #12
1bfe0     F2 00 02 F6 | 	mov	_var01, objptr
1bfe4     09 03 02 F6 | 	mov	_var02, arg01
1bfe8     06 02 66 F0 | 	shl	_var02, #6
1bfec     01 01 02 F1 | 	add	_var01, _var02
1bff0     14 00 06 F1 | 	add	_var01, #20
1bff4     00 01 58 FC | 	wrword	#0, _var01
1bff8                 | ' word[@channel1[0]+64*channel+20]:=0
1bff8     F2 00 02 F6 | 	mov	_var01, objptr
1bffc     06 12 66 F0 | 	shl	arg01, #6
1c000     09 01 02 F1 | 	add	_var01, arg01
1c004     14 00 06 F1 | 	add	_var01, #20
1c008     00 01 58 FC | 	wrword	#0, _var01
1c00c     0C E4 85 F1 | 	sub	objptr, #12
1c010                 | _audio096_spin2_stop_ret
1c010     2D 00 64 FD | 	ret
1c014                 | hubexit
1c014     81 00 80 FD | 	jmp	#cogexit
1c018                 | 
1c018                 | __system___setbaud
1c018     14 64 06 FB | 	rdlong	muldiva_, #20
1c01c     09 67 02 F6 | 	mov	muldivb_, arg01
1c020     BA 00 A0 FD | 	call	#divide_
1c024     97 06 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1c028                 | LR__2310
1c028     3E FA 9D FA | 	rdpin	result1, #62 wc
1c02c     FE FC A1 F1 | 	subx	result2, result2
1c030     F4 FF 9F CD |  if_b	jmp	#LR__2310
1c034                 | LR__2311
1c034     40 7C 64 FD | 	dirl	#62
1c038     40 7E 64 FD | 	dirl	#63
1c03c     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1c040     10 66 66 F0 | 	shl	muldivb_, #16
1c044     07 14 06 F6 | 	mov	arg02, #7
1c048     33 15 02 F1 | 	add	arg02, muldivb_
1c04c     3E F8 0C FC | 	wrpin	#124, #62
1c050     3E 14 16 FC | 	wxpin	arg02, #62
1c054     3F 7C 0C FC | 	wrpin	#62, #63
1c058     14 14 06 F1 | 	add	arg02, #20
1c05c     3F 14 16 FC | 	wxpin	arg02, #63
1c060     41 7C 64 FD | 	dirh	#62
1c064     41 7E 64 FD | 	dirh	#63
1c068                 | __system___setbaud_ret
1c068     2D 00 64 FD | 	ret
1c06c                 | 
1c06c                 | __system___txraw
1c06c     01 4A 05 F6 | 	mov	COUNT_, #1
1c070     A8 00 A0 FD | 	call	#pushregs_
1c074     09 1F 02 F6 | 	mov	local01, arg01
1c078     97 06 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1c07c                 | LR__2320
1c07c     3E FA 9D FA | 	rdpin	result1, #62 wc
1c080     FE FC A1 F1 | 	subx	result2, result2
1c084     F4 FF 9F CD |  if_b	jmp	#LR__2320
1c088                 | LR__2321
1c088     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1c08c     C2 01 00 AF 
1c090     00 12 06 A6 |  if_e	mov	arg01, ##230400
1c094     80 FF BF AD |  if_e	call	#__system___setbaud
1c098     58 7C 64 FD | 	drvl	#62
1c09c     3E 1E 26 FC | 	wypin	local01, #62
1c0a0     01 FA 05 F6 | 	mov	result1, #1
1c0a4     A7 F0 03 F6 | 	mov	ptra, fp
1c0a8     B2 00 A0 FD | 	call	#popregs_
1c0ac                 | __system___txraw_ret
1c0ac     2D 00 64 FD | 	ret
1c0b0                 | 
1c0b0                 | __system___rxraw
1c0b0     0D 4A 05 F6 | 	mov	COUNT_, #13
1c0b4     A8 00 A0 FD | 	call	#pushregs_
1c0b8     09 1F 02 F6 | 	mov	local01, arg01
1c0bc     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1c0c0     C2 01 00 AF 
1c0c4     00 12 06 A6 |  if_e	mov	arg01, ##230400
1c0c8     4C FF BF AD |  if_e	call	#__system___setbaud
1c0cc     00 1E 0E F2 | 	cmp	local01, #0 wz
1c0d0     20 00 90 AD |  if_e	jmp	#LR__2330
1c0d4     14 22 06 FB | 	rdlong	local03, #20
1c0d8     0A 22 46 F0 | 	shr	local03, #10
1c0dc     11 1F 02 FD | 	qmul	local01, local03
1c0e0     1A FA 61 FD | 	getct	result1
1c0e4     18 24 62 FD | 	getqx	local04
1c0e8     12 FB 01 F1 | 	add	result1, local04
1c0ec     FD 26 02 F6 | 	mov	local05, result1
1c0f0     04 00 90 FD | 	jmp	#LR__2331
1c0f4                 | LR__2330
1c0f4     00 26 06 F6 | 	mov	local05, #0
1c0f8                 | LR__2331
1c0f8     01 28 66 F6 | 	neg	local06, #1
1c0fc     3F 2A 06 F6 | 	mov	local07, #63
1c100     00 2C 06 F6 | 	mov	local08, #0
1c104     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1c108     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1c10c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1c110                 | LR__2332
1c110     08 2E 16 F4 | 	testb	local09, #8 wc
1c114     09 2E 76 F4 | 	testbn	local09, #9 andc
1c118     0A 2E 46 F0 | 	shr	local09, #10
1c11c     01 2C 06 C6 |  if_b	mov	local08, #1
1c120     40 7E 6C 3D |  if_ae	testp	#63 wz
1c124     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1c128     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1c12c     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1c130                 | LR__2333
1c130     00 20 06 F6 | 	mov	local02, #0
1c134     00 2C 0E F2 | 	cmp	local08, #0 wz
1c138     01 20 66 56 |  if_ne	neg	local02, #1
1c13c     00 30 06 F6 | 	mov	local10, #0
1c140     00 22 06 F6 | 	mov	local03, #0
1c144     00 1E 0E F2 | 	cmp	local01, #0 wz
1c148     01 22 66 56 |  if_ne	neg	local03, #1
1c14c     00 24 06 F6 | 	mov	local04, #0
1c150     00 32 06 F6 | 	mov	local11, #0
1c154     1A FA 61 FD | 	getct	result1
1c158     FD 34 02 F6 | 	mov	local12, result1
1c15c     1A 37 02 F6 | 	mov	local13, local12
1c160     13 37 82 F1 | 	sub	local13, local05
1c164     00 36 56 F2 | 	cmps	local13, #0 wc
1c168     00 32 26 C6 |  if_b	not	local11, #0
1c16c     00 32 0E F2 | 	cmp	local11, #0 wz
1c170     00 24 26 56 |  if_ne	not	local04, #0
1c174     12 23 CA F7 | 	test	local03, local04 wz
1c178     00 30 26 56 |  if_ne	not	local10, #0
1c17c     18 21 4A F5 | 	or	local02, local10 wz
1c180     8C FF 9F AD |  if_e	jmp	#LR__2332
1c184     00 2C 0E F2 | 	cmp	local08, #0 wz
1c188     17 29 02 56 |  if_ne	mov	local06, local09
1c18c     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1c190     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1c194     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1c198     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1c19c     14 FB 01 F6 | 	mov	result1, local06
1c1a0     A7 F0 03 F6 | 	mov	ptra, fp
1c1a4     B2 00 A0 FD | 	call	#popregs_
1c1a8                 | __system___rxraw_ret
1c1a8     2D 00 64 FD | 	ret
1c1ac                 | 
1c1ac                 | __system___getus
1c1ac     1A FC 71 FD | 	getct	result2 wc
1c1b0     1A 00 62 FD | 	getct	_var01
1c1b4     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1c1b8     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1c1bc     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c1c0     20 00 90 5D |  if_ne	jmp	#LR__2340
1c1c4     14 02 06 FB | 	rdlong	_var02, #20
1c1c8     A1 07 00 FF 
1c1cc     40 02 16 FD | 	qdiv	_var02, ##1000000
1c1d0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1c1d4     18 FA 61 FD | 	getqx	result1
1c1d8     FD 02 02 F6 | 	mov	_var02, result1
1c1dc     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1c1e0     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c1e4                 | LR__2340
1c1e4     01 FD 11 FD | 	qdiv	result2, _var02
1c1e8     19 FC 61 FD | 	getqy	result2
1c1ec     28 FC 61 FD | 	setq	result2
1c1f0     01 01 12 FD | 	qdiv	_var01, _var02
1c1f4     18 FA 61 FD | 	getqx	result1
1c1f8                 | __system___getus_ret
1c1f8     2D 00 64 FD | 	ret
1c1fc                 | 
1c1fc                 | __system____builtin_memmove
1c1fc     09 01 02 F6 | 	mov	_var01, arg01
1c200     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1c204     10 00 90 CD |  if_b	jmp	#LR__2350
1c208     0A 03 02 F6 | 	mov	_var02, arg02
1c20c     0B 03 02 F1 | 	add	_var02, arg03
1c210     01 13 52 F2 | 	cmps	arg01, _var02 wc
1c214     48 00 90 CD |  if_b	jmp	#LR__2356
1c218                 | LR__2350
1c218     0B 05 02 F6 | 	mov	_var03, arg03
1c21c     02 04 4E F0 | 	shr	_var03, #2 wz
1c220     18 00 90 AD |  if_e	jmp	#LR__2355
1c224     97 0A 48 FB | 	callpa	#(@LR__2353-@LR__2351)>>2,fcache_load_ptr_
1c228                 | LR__2351
1c228     02 09 D8 FC | 	rep	@LR__2354, _var03
1c22c                 | LR__2352
1c22c     0A 05 02 FB | 	rdlong	_var03, arg02
1c230     09 05 62 FC | 	wrlong	_var03, arg01
1c234     04 12 06 F1 | 	add	arg01, #4
1c238     04 14 06 F1 | 	add	arg02, #4
1c23c                 | LR__2353
1c23c                 | LR__2354
1c23c                 | LR__2355
1c23c     02 16 CE F7 | 	test	arg03, #2 wz
1c240     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1c244     09 03 52 5C |  if_ne	wrword	_var02, arg01
1c248     02 12 06 51 |  if_ne	add	arg01, #2
1c24c     02 14 06 51 |  if_ne	add	arg02, #2
1c250     01 16 CE F7 | 	test	arg03, #1 wz
1c254     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1c258     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1c25c     28 00 90 FD | 	jmp	#LR__2362
1c260                 | LR__2356
1c260     0B 13 02 F1 | 	add	arg01, arg03
1c264     0B 15 02 F1 | 	add	arg02, arg03
1c268     0B 07 0A F6 | 	mov	_var04, arg03 wz
1c26c     18 00 90 AD |  if_e	jmp	#LR__2361
1c270     97 0A 48 FB | 	callpa	#(@LR__2359-@LR__2357)>>2,fcache_load_ptr_
1c274                 | LR__2357
1c274     03 09 D8 FC | 	rep	@LR__2360, _var04
1c278                 | LR__2358
1c278     01 12 86 F1 | 	sub	arg01, #1
1c27c     01 14 86 F1 | 	sub	arg02, #1
1c280     0A 03 C2 FA | 	rdbyte	_var02, arg02
1c284     09 03 42 FC | 	wrbyte	_var02, arg01
1c288                 | LR__2359
1c288                 | LR__2360
1c288                 | LR__2361
1c288                 | LR__2362
1c288     00 FB 01 F6 | 	mov	result1, _var01
1c28c                 | __system____builtin_memmove_ret
1c28c     2D 00 64 FD | 	ret
1c290                 | 
1c290                 | __system____builtin_strcpy
1c290     09 01 02 F6 | 	mov	_var01, arg01
1c294     97 0A 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
1c298                 | LR__2370
1c298     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1c29c     09 FB 41 FC | 	wrbyte	result1, arg01
1c2a0     01 14 06 F1 | 	add	arg02, #1
1c2a4     01 12 06 F1 | 	add	arg01, #1
1c2a8     EC FF 9F 5D |  if_ne	jmp	#LR__2370
1c2ac                 | LR__2371
1c2ac     00 FB 01 F6 | 	mov	result1, _var01
1c2b0                 | __system____builtin_strcpy_ret
1c2b0     2D 00 64 FD | 	ret
1c2b4                 | 
1c2b4                 | __system____topofstack
1c2b4     00 4A 05 F6 | 	mov	COUNT_, #0
1c2b8     A8 00 A0 FD | 	call	#pushregs_
1c2bc     08 F0 07 F1 | 	add	ptra, #8
1c2c0     04 4E 05 F1 | 	add	fp, #4
1c2c4     A7 12 62 FC | 	wrlong	arg01, fp
1c2c8     A7 FA 01 F6 | 	mov	result1, fp
1c2cc     04 4E 85 F1 | 	sub	fp, #4
1c2d0     A7 F0 03 F6 | 	mov	ptra, fp
1c2d4     B2 00 A0 FD | 	call	#popregs_
1c2d8                 | __system____topofstack_ret
1c2d8     2D 00 64 FD | 	ret
1c2dc                 | 
1c2dc                 | __system___lockmem
1c2dc     00 FA 05 F6 | 	mov	result1, #0
1c2e0     01 FA 61 FD | 	cogid	result1
1c2e4     00 FB 05 F1 | 	add	result1, #256
1c2e8                 | LR__2380
1c2e8     09 01 0A FB | 	rdlong	_var01, arg01 wz
1c2ec     09 FB 61 AC |  if_e	wrlong	result1, arg01
1c2f0     09 01 02 AB |  if_e	rdlong	_var01, arg01
1c2f4     09 01 02 AB |  if_e	rdlong	_var01, arg01
1c2f8     FD 00 0A F2 | 	cmp	_var01, result1 wz
1c2fc     E8 FF 9F 5D |  if_ne	jmp	#LR__2380
1c300                 | __system___lockmem_ret
1c300     2D 00 64 FD | 	ret
1c304                 | 
1c304                 | __system___string_cmp
1c304     97 14 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1c308                 | LR__2390
1c308     09 01 C2 FA | 	rdbyte	_var01, arg01
1c30c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1c310     00 05 02 F6 | 	mov	_var03, _var01
1c314     01 05 8A F1 | 	sub	_var03, _var02 wz
1c318     01 12 06 F1 | 	add	arg01, #1
1c31c     01 14 06 F1 | 	add	arg02, #1
1c320     0C 00 90 5D |  if_ne	jmp	#LR__2392
1c324     00 00 0E F2 | 	cmp	_var01, #0 wz
1c328     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1c32c     D8 FF 9F 5D |  if_ne	jmp	#LR__2390
1c330                 | LR__2391
1c330                 | LR__2392
1c330     02 FB 01 F6 | 	mov	result1, _var03
1c334                 | __system___string_cmp_ret
1c334     2D 00 64 FD | 	ret
1c338                 | 
1c338                 | __system___string_concat
1c338     05 4A 05 F6 | 	mov	COUNT_, #5
1c33c     A8 00 A0 FD | 	call	#pushregs_
1c340     09 1F 02 F6 | 	mov	local01, arg01
1c344     0A 21 02 F6 | 	mov	local02, arg02
1c348     0F 13 02 F6 | 	mov	arg01, local01
1c34c     09 23 02 F6 | 	mov	local03, arg01
1c350     97 06 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1c354                 | LR__2400
1c354     11 FB C9 FA | 	rdbyte	result1, local03 wz
1c358     01 22 06 51 |  if_ne	add	local03, #1
1c35c     F4 FF 9F 5D |  if_ne	jmp	#LR__2400
1c360                 | LR__2401
1c360     09 23 82 F1 | 	sub	local03, arg01
1c364     11 25 02 F6 | 	mov	local04, local03
1c368     10 13 02 F6 | 	mov	arg01, local02
1c36c     09 23 02 F6 | 	mov	local03, arg01
1c370     97 06 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1c374                 | LR__2402
1c374     11 FB C9 FA | 	rdbyte	result1, local03 wz
1c378     01 22 06 51 |  if_ne	add	local03, #1
1c37c     F4 FF 9F 5D |  if_ne	jmp	#LR__2402
1c380                 | LR__2403
1c380     09 23 82 F1 | 	sub	local03, arg01
1c384     12 13 02 F6 | 	mov	arg01, local04
1c388     11 13 02 F1 | 	add	arg01, local03
1c38c     01 12 06 F1 | 	add	arg01, #1
1c390     90 3D B0 FD | 	call	#__system___gc_alloc_managed
1c394     FD 26 0A F6 | 	mov	local05, result1 wz
1c398     28 00 90 AD |  if_e	jmp	#LR__2404
1c39c     13 13 02 F6 | 	mov	arg01, local05
1c3a0     0F 15 02 F6 | 	mov	arg02, local01
1c3a4     12 17 02 F6 | 	mov	arg03, local04
1c3a8     50 FE BF FD | 	call	#__system____builtin_memmove
1c3ac     13 13 02 F6 | 	mov	arg01, local05
1c3b0     12 13 02 F1 | 	add	arg01, local04
1c3b4     01 22 06 F1 | 	add	local03, #1
1c3b8     10 15 02 F6 | 	mov	arg02, local02
1c3bc     11 17 02 F6 | 	mov	arg03, local03
1c3c0     38 FE BF FD | 	call	#__system____builtin_memmove
1c3c4                 | LR__2404
1c3c4     13 FB 01 F6 | 	mov	result1, local05
1c3c8     A7 F0 03 F6 | 	mov	ptra, fp
1c3cc     B2 00 A0 FD | 	call	#popregs_
1c3d0                 | __system___string_concat_ret
1c3d0     2D 00 64 FD | 	ret
1c3d4                 | 
1c3d4                 | __system___tx
1c3d4     02 4A 05 F6 | 	mov	COUNT_, #2
1c3d8     A8 00 A0 FD | 	call	#pushregs_
1c3dc     09 1F 02 F6 | 	mov	local01, arg01
1c3e0     0A 1E 0E F2 | 	cmp	local01, #10 wz
1c3e4     18 00 90 5D |  if_ne	jmp	#LR__2410
1c3e8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c3ec     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1c3f0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c3f4     02 20 CE F7 | 	test	local02, #2 wz
1c3f8     0D 12 06 56 |  if_ne	mov	arg01, #13
1c3fc     6C FC BF 5D |  if_ne	call	#__system___txraw
1c400                 | LR__2410
1c400     0F 13 02 F6 | 	mov	arg01, local01
1c404     64 FC BF FD | 	call	#__system___txraw
1c408     A7 F0 03 F6 | 	mov	ptra, fp
1c40c     B2 00 A0 FD | 	call	#popregs_
1c410                 | __system___tx_ret
1c410     2D 00 64 FD | 	ret
1c414                 | 
1c414                 | __system___rx
1c414     01 4A 05 F6 | 	mov	COUNT_, #1
1c418     A8 00 A0 FD | 	call	#pushregs_
1c41c                 | LR__2420
1c41c     00 12 06 F6 | 	mov	arg01, #0
1c420     8C FC BF FD | 	call	#__system___rxraw
1c424     FD 1E 02 F6 | 	mov	local01, result1
1c428     FF FF 7F FF 
1c42c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1c430     E8 FF 9F AD |  if_e	jmp	#LR__2420
1c434     0D 1E 0E F2 | 	cmp	local01, #13 wz
1c438     14 00 90 5D |  if_ne	jmp	#LR__2421
1c43c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c440     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1c444     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c448     02 FA CD F7 | 	test	result1, #2 wz
1c44c     0A 1E 06 56 |  if_ne	mov	local01, #10
1c450                 | LR__2421
1c450     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1c454     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1c458     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1c45c     01 12 CE F7 | 	test	arg01, #1 wz
1c460     1C 00 90 AD |  if_e	jmp	#LR__2424
1c464     7F 1E 0E F2 | 	cmp	local01, #127 wz
1c468     0C 00 90 5D |  if_ne	jmp	#LR__2422
1c46c     08 12 06 F6 | 	mov	arg01, #8
1c470     60 FF BF FD | 	call	#__system___tx
1c474     08 00 90 FD | 	jmp	#LR__2423
1c478                 | LR__2422
1c478     0F 13 02 F6 | 	mov	arg01, local01
1c47c     54 FF BF FD | 	call	#__system___tx
1c480                 | LR__2423
1c480                 | LR__2424
1c480     0F FB 01 F6 | 	mov	result1, local01
1c484     A7 F0 03 F6 | 	mov	ptra, fp
1c488     B2 00 A0 FD | 	call	#popregs_
1c48c                 | __system___rx_ret
1c48c     2D 00 64 FD | 	ret
1c490                 | 
1c490                 | __system___pinwrite
1c490     09 01 02 F6 | 	mov	_var01, arg01
1c494     1F 00 06 F5 | 	and	_var01, #31
1c498     20 12 CE F7 | 	test	arg01, #32 wz
1c49c     06 12 46 F0 | 	shr	arg01, #6
1c4a0     09 13 CA F9 | 	bmask	arg01, arg01
1c4a4     00 13 62 F0 | 	shl	arg01, _var01
1c4a8     00 15 62 F0 | 	shl	arg02, _var01
1c4ac     1C 00 90 AD |  if_e	jmp	#LR__2430
1c4b0     09 F7 43 F5 | 	or	dirb, arg01
1c4b4     FD 01 02 F6 | 	mov	_var01, outb
1c4b8     09 01 22 F5 | 	andn	_var01, arg01
1c4bc     09 15 02 F5 | 	and	arg02, arg01
1c4c0     0A 01 42 F5 | 	or	_var01, arg02
1c4c4     00 FB 03 F6 | 	mov	outb, _var01
1c4c8     18 00 90 FD | 	jmp	#LR__2431
1c4cc                 | LR__2430
1c4cc     09 F5 43 F5 | 	or	dira, arg01
1c4d0     FC 01 02 F6 | 	mov	_var01, outa
1c4d4     09 01 22 F5 | 	andn	_var01, arg01
1c4d8     09 15 02 F5 | 	and	arg02, arg01
1c4dc     0A 01 42 F5 | 	or	_var01, arg02
1c4e0     00 F9 03 F6 | 	mov	outa, _var01
1c4e4                 | LR__2431
1c4e4                 | __system___pinwrite_ret
1c4e4     2D 00 64 FD | 	ret
1c4e8                 | 
1c4e8                 | __system___basic_read_line
1c4e8     06 4A 05 F6 | 	mov	COUNT_, #6
1c4ec     A8 00 A0 FD | 	call	#pushregs_
1c4f0     09 1F 02 F6 | 	mov	local01, arg01
1c4f4     00 20 06 F6 | 	mov	local02, #0
1c4f8     18 22 06 F6 | 	mov	local03, #24
1c4fc     00 24 06 F6 | 	mov	local04, #0
1c500     18 12 06 F6 | 	mov	arg01, #24
1c504     1C 3C B0 FD | 	call	#__system___gc_alloc_managed
1c508     FD 26 0A F6 | 	mov	local05, result1 wz
1c50c     13 FB 01 A6 |  if_e	mov	result1, local05
1c510     B0 00 90 AD |  if_e	jmp	#LR__2443
1c514                 | LR__2440
1c514     0F 13 02 F6 | 	mov	arg01, local01
1c518     88 0B B0 FD | 	call	#__system___basic_get_char
1c51c     FD 28 02 F6 | 	mov	local06, result1
1c520     01 28 56 F2 | 	cmps	local06, #1 wc
1c524     8C 00 90 CD |  if_b	jmp	#LR__2442
1c528     0A 28 0E F2 | 	cmp	local06, #10 wz
1c52c     10 00 90 5D |  if_ne	jmp	#LR__2441
1c530     00 24 0E F2 | 	cmp	local04, #0 wz
1c534     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1c538     01 20 86 11 |  if_a	sub	local02, #1
1c53c     74 00 90 FD | 	jmp	#LR__2442
1c540                 | LR__2441
1c540     0D 28 0E F2 | 	cmp	local06, #13 wz
1c544     01 24 06 A6 |  if_e	mov	local04, #1
1c548     00 24 06 56 |  if_ne	mov	local04, #0
1c54c     08 28 0E F2 | 	cmp	local06, #8 wz
1c550     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1c554     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1c558     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1c55c     B4 FF 9F AD |  if_e	jmp	#LR__2440
1c560     13 17 02 F6 | 	mov	arg03, local05
1c564     10 17 02 F1 | 	add	arg03, local02
1c568     0B 29 42 FC | 	wrbyte	local06, arg03
1c56c     01 20 06 F1 | 	add	local02, #1
1c570     11 21 0A F2 | 	cmp	local02, local03 wz
1c574     9C FF 9F 5D |  if_ne	jmp	#LR__2440
1c578     11 13 02 F6 | 	mov	arg01, local03
1c57c     20 12 06 F1 | 	add	arg01, #32
1c580     A0 3B B0 FD | 	call	#__system___gc_alloc_managed
1c584     FD 28 0A F6 | 	mov	local06, result1 wz
1c588     14 FB 01 A6 |  if_e	mov	result1, local06
1c58c     34 00 90 AD |  if_e	jmp	#LR__2443
1c590     14 13 02 F6 | 	mov	arg01, local06
1c594     13 15 02 F6 | 	mov	arg02, local05
1c598     11 17 02 F6 | 	mov	arg03, local03
1c59c     5C FC BF FD | 	call	#__system____builtin_memmove
1c5a0     20 22 06 F1 | 	add	local03, #32
1c5a4     13 13 02 F6 | 	mov	arg01, local05
1c5a8     B4 3C B0 FD | 	call	#__system___gc_free
1c5ac     14 27 02 F6 | 	mov	local05, local06
1c5b0     60 FF 9F FD | 	jmp	#LR__2440
1c5b4                 | LR__2442
1c5b4     13 29 02 F6 | 	mov	local06, local05
1c5b8     10 29 02 F1 | 	add	local06, local02
1c5bc     14 01 48 FC | 	wrbyte	#0, local06
1c5c0     13 FB 01 F6 | 	mov	result1, local05
1c5c4                 | LR__2443
1c5c4     A7 F0 03 F6 | 	mov	ptra, fp
1c5c8     B2 00 A0 FD | 	call	#popregs_
1c5cc                 | __system___basic_read_line_ret
1c5cc     2D 00 64 FD | 	ret
1c5d0                 | 
1c5d0                 | __system___waitms
1c5d0     09 01 02 F6 | 	mov	_var01, arg01
1c5d4     1A 02 62 FD | 	getct	_var02
1c5d8     14 04 06 FB | 	rdlong	_var03, #20
1c5dc     97 14 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1c5e0                 | LR__2450
1c5e0     01 00 00 FF 
1c5e4     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1c5e8     1C 00 90 CD |  if_b	jmp	#LR__2452
1c5ec     02 03 02 F1 | 	add	_var02, _var03
1c5f0     01 13 02 F6 | 	mov	arg01, _var02
1c5f4     00 12 66 FA | 	addct1	arg01, #0
1c5f8     24 22 60 FD | 	waitct1
1c5fc     01 00 00 FF 
1c600     E8 01 86 F1 | 	sub	_var01, ##1000
1c604     D8 FF 9F FD | 	jmp	#LR__2450
1c608                 | LR__2451
1c608                 | LR__2452
1c608     01 00 56 F2 | 	cmps	_var01, #1 wc
1c60c     28 00 90 CD |  if_b	jmp	#LR__2453
1c610     02 01 02 FD | 	qmul	_var01, _var03
1c614     01 00 00 FF 
1c618     E8 17 06 F6 | 	mov	arg03, ##1000
1c61c     19 FA 61 FD | 	getqy	result1
1c620     18 12 62 FD | 	getqx	arg01
1c624     28 FA 61 FD | 	setq	result1
1c628     0B 13 12 FD | 	qdiv	arg01, arg03
1c62c     18 12 62 FD | 	getqx	arg01
1c630     01 13 62 FA | 	addct1	arg01, _var02
1c634     24 22 60 FD | 	waitct1
1c638                 | LR__2453
1c638                 | __system___waitms_ret
1c638     2D 00 64 FD | 	ret
1c63c                 | 
1c63c                 | __system___waitus
1c63c     09 01 02 F6 | 	mov	_var01, arg01
1c640     1A 02 62 FD | 	getct	_var02
1c644     14 04 06 FB | 	rdlong	_var03, #20
1c648     97 14 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1c64c                 | LR__2460
1c64c     A1 07 00 FF 
1c650     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1c654     1C 00 90 CD |  if_b	jmp	#LR__2462
1c658     02 03 02 F1 | 	add	_var02, _var03
1c65c     01 13 02 F6 | 	mov	arg01, _var02
1c660     00 12 66 FA | 	addct1	arg01, #0
1c664     24 22 60 FD | 	waitct1
1c668     A1 07 00 FF 
1c66c     40 00 86 F1 | 	sub	_var01, ##1000000
1c670     D8 FF 9F FD | 	jmp	#LR__2460
1c674                 | LR__2461
1c674                 | LR__2462
1c674     01 00 56 F2 | 	cmps	_var01, #1 wc
1c678     28 00 90 CD |  if_b	jmp	#LR__2463
1c67c     02 01 02 FD | 	qmul	_var01, _var03
1c680     A1 07 00 FF 
1c684     40 16 06 F6 | 	mov	arg03, ##1000000
1c688     19 FA 61 FD | 	getqy	result1
1c68c     18 12 62 FD | 	getqx	arg01
1c690     28 FA 61 FD | 	setq	result1
1c694     0B 13 12 FD | 	qdiv	arg01, arg03
1c698     18 FA 61 FD | 	getqx	result1
1c69c     FD 02 62 FA | 	addct1	_var02, result1
1c6a0     24 22 60 FD | 	waitct1
1c6a4                 | LR__2463
1c6a4                 | __system___waitus_ret
1c6a4     2D 00 64 FD | 	ret
1c6a8                 | 
1c6a8                 | __system___mount
1c6a8     0B 4A 05 F6 | 	mov	COUNT_, #11
1c6ac     A8 00 A0 FD | 	call	#pushregs_
1c6b0     09 1F 02 F6 | 	mov	local01, arg01
1c6b4     0A 21 0A F6 | 	mov	local02, arg02 wz
1c6b8     01 22 66 F6 | 	neg	local03, #1
1c6bc     01 FA 65 A6 |  if_e	neg	result1, #1
1c6c0     98 02 90 AD |  if_e	jmp	#LR__2485
1c6c4     0F FB C1 FA | 	rdbyte	result1, local01
1c6c8     2F FA 0D F2 | 	cmp	result1, #47 wz
1c6cc     28 00 90 5D |  if_ne	jmp	#LR__2472
1c6d0     0F 13 02 F6 | 	mov	arg01, local01
1c6d4     09 25 02 F6 | 	mov	local04, arg01
1c6d8     97 06 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1c6dc                 | LR__2470
1c6dc     12 FB C9 FA | 	rdbyte	result1, local04 wz
1c6e0     01 24 06 51 |  if_ne	add	local04, #1
1c6e4     F4 FF 9F 5D |  if_ne	jmp	#LR__2470
1c6e8                 | LR__2471
1c6e8     09 25 82 F1 | 	sub	local04, arg01
1c6ec     12 FB 01 F6 | 	mov	result1, local04
1c6f0     10 FA 55 F2 | 	cmps	result1, #16 wc
1c6f4     14 00 90 CD |  if_b	jmp	#LR__2473
1c6f8                 | LR__2472
1c6f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1c6fc     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1c700     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1c704     01 FA 65 F6 | 	neg	result1, #1
1c708     50 02 90 FD | 	jmp	#LR__2485
1c70c                 | LR__2473
1c70c     00 26 06 F6 | 	mov	local05, #0
1c710                 | LR__2474
1c710     04 26 56 F2 | 	cmps	local05, #4 wc
1c714     B0 00 90 3D |  if_ae	jmp	#LR__2479
1c718     13 13 02 F6 | 	mov	arg01, local05
1c71c     02 12 66 F0 | 	shl	arg01, #2
1c720     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c724     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1c728     09 FB 09 FB | 	rdlong	result1, arg01 wz
1c72c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c730     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1c734     13 23 02 86 |  if_c_and_z	mov	local03, local05
1c738     84 00 90 8D |  if_c_and_z	jmp	#LR__2478
1c73c     13 13 02 F6 | 	mov	arg01, local05
1c740     02 12 66 F0 | 	shl	arg01, #2
1c744     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c748     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1c74c     09 13 02 FB | 	rdlong	arg01, arg01
1c750     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c754     09 25 02 F6 | 	mov	local04, arg01
1c758     97 06 48 FB | 	callpa	#(@LR__2476-@LR__2475)>>2,fcache_load_ptr_
1c75c                 | LR__2475
1c75c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1c760     01 24 06 51 |  if_ne	add	local04, #1
1c764     F4 FF 9F 5D |  if_ne	jmp	#LR__2475
1c768                 | LR__2476
1c768     09 25 82 F1 | 	sub	local04, arg01
1c76c     12 29 02 F6 | 	mov	local06, local04
1c770     14 13 02 F6 | 	mov	arg01, local06
1c774     0F 13 02 F1 | 	add	arg01, local01
1c778     09 FB C1 FA | 	rdbyte	result1, arg01
1c77c     2F FA 0D F2 | 	cmp	result1, #47 wz
1c780     14 2B 02 56 |  if_ne	mov	local07, local06
1c784     0F 2B 02 51 |  if_ne	add	local07, local01
1c788     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1c78c     30 00 90 5D |  if_ne	jmp	#LR__2477
1c790     13 17 02 F6 | 	mov	arg03, local05
1c794     02 16 66 F0 | 	shl	arg03, #2
1c798     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c79c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1c7a0     0B 15 02 FB | 	rdlong	arg02, arg03
1c7a4     0F 13 02 F6 | 	mov	arg01, local01
1c7a8     14 17 02 F6 | 	mov	arg03, local06
1c7ac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c7b0     B4 4D B0 FD | 	call	#__system__strncmp
1c7b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c7b8     13 23 02 A6 |  if_e	mov	local03, local05
1c7bc     08 00 90 AD |  if_e	jmp	#LR__2479
1c7c0                 | LR__2477
1c7c0                 | LR__2478
1c7c0     01 26 06 F1 | 	add	local05, #1
1c7c4     48 FF 9F FD | 	jmp	#LR__2474
1c7c8                 | LR__2479
1c7c8     FF FF 7F FF 
1c7cc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1c7d0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1c7d4     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1c7d8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1c7dc     01 FA 65 A6 |  if_e	neg	result1, #1
1c7e0     78 01 90 AD |  if_e	jmp	#LR__2485
1c7e4     11 27 02 F6 | 	mov	local05, local03
1c7e8     13 2B 02 F6 | 	mov	local07, local05
1c7ec     02 2A 66 F0 | 	shl	local07, #2
1c7f0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c7f4     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1c7f8     15 29 0A FB | 	rdlong	local06, local07 wz
1c7fc     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1c800     58 00 90 AD |  if_e	jmp	#LR__2480
1c804     4C 28 06 F1 | 	add	local06, #76
1c808     14 2B 0A FB | 	rdlong	local07, local06 wz
1c80c     4C 28 86 F1 | 	sub	local06, #76
1c810     48 00 90 AD |  if_e	jmp	#LR__2480
1c814     4C 28 06 F1 | 	add	local06, #76
1c818     14 2B 02 FB | 	rdlong	local07, local06
1c81c     15 23 02 F6 | 	mov	local03, local07
1c820     13 2A 46 F7 | 	zerox	local07, #19
1c824     14 22 46 F0 | 	shr	local03, #20
1c828     02 22 66 F0 | 	shl	local03, #2
1c82c     ED 22 02 F1 | 	add	local03, __methods__
1c830     11 23 02 FB | 	rdlong	local03, local03
1c834     13 29 02 F6 | 	mov	local06, local05
1c838     02 28 66 F0 | 	shl	local06, #2
1c83c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c840     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1c844     14 13 02 FB | 	rdlong	arg01, local06
1c848     F2 28 02 F6 | 	mov	local06, objptr
1c84c     15 E5 01 F6 | 	mov	objptr, local07
1c850     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c854     2D 22 62 FD | 	call	local03
1c858     14 E5 01 F6 | 	mov	objptr, local06
1c85c                 | LR__2480
1c85c     13 2D 02 F6 | 	mov	local08, local05
1c860     02 2C 66 F0 | 	shl	local08, #2
1c864     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c868     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1c86c     16 21 62 FC | 	wrlong	local02, local08
1c870     00 20 0E F2 | 	cmp	local02, #0 wz
1c874     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1c878     18 00 90 5D |  if_ne	jmp	#LR__2481
1c87c     02 26 66 F0 | 	shl	local05, #2
1c880     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c884     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c888     13 01 68 FC | 	wrlong	#0, local05
1c88c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c890     C4 00 90 FD | 	jmp	#LR__2484
1c894                 | LR__2481
1c894     13 2F 02 F6 | 	mov	local09, local05
1c898     04 2E 66 F0 | 	shl	local09, #4
1c89c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1c8a0     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1c8a4     17 13 02 F6 | 	mov	arg01, local09
1c8a8     0F 15 02 F6 | 	mov	arg02, local01
1c8ac     10 16 06 F6 | 	mov	arg03, #16
1c8b0     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1c8b4     04 4C B0 FD | 	call	#__system__strncpy
1c8b8     48 20 06 F1 | 	add	local02, #72
1c8bc     10 2D 0A FB | 	rdlong	local08, local02 wz
1c8c0     48 20 86 F1 | 	sub	local02, #72
1c8c4     7C 00 90 AD |  if_e	jmp	#LR__2483
1c8c8     48 20 06 F1 | 	add	local02, #72
1c8cc     10 2D 02 FB | 	rdlong	local08, local02
1c8d0     16 31 02 F6 | 	mov	local10, local08
1c8d4     13 2C 46 F7 | 	zerox	local08, #19
1c8d8     14 30 46 F0 | 	shr	local10, #20
1c8dc     02 30 66 F0 | 	shl	local10, #2
1c8e0     ED 30 02 F1 | 	add	local10, __methods__
1c8e4     18 31 02 FB | 	rdlong	local10, local10
1c8e8     17 13 02 F6 | 	mov	arg01, local09
1c8ec     F2 32 02 F6 | 	mov	local11, objptr
1c8f0     16 E5 01 F6 | 	mov	objptr, local08
1c8f4     2D 30 62 FD | 	call	local10
1c8f8     19 E5 01 F6 | 	mov	objptr, local11
1c8fc     FD 12 0A F6 | 	mov	arg01, result1 wz
1c900     40 00 90 AD |  if_e	jmp	#LR__2482
1c904     13 2D 02 F6 | 	mov	local08, local05
1c908     02 2C 66 F0 | 	shl	local08, #2
1c90c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c910     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1c914     16 01 68 FC | 	wrlong	#0, local08
1c918     02 26 66 F0 | 	shl	local05, #2
1c91c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c920     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c924     13 01 68 FC | 	wrlong	#0, local05
1c928     09 13 6A F6 | 	neg	arg01, arg01 wz
1c92c     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1c930     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1c934     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1c938     01 FA 65 56 |  if_ne	neg	result1, #1
1c93c     00 FA 05 A6 |  if_e	mov	result1, #0
1c940     18 00 90 FD | 	jmp	#LR__2485
1c944                 | LR__2482
1c944                 | LR__2483
1c944     02 26 66 F0 | 	shl	local05, #2
1c948     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c94c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c950     13 2F 62 FC | 	wrlong	local09, local05
1c954     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c958                 | LR__2484
1c958     00 FA 05 F6 | 	mov	result1, #0
1c95c                 | LR__2485
1c95c     A7 F0 03 F6 | 	mov	ptra, fp
1c960     B2 00 A0 FD | 	call	#popregs_
1c964                 | __system___mount_ret
1c964     2D 00 64 FD | 	ret
1c968                 | 
1c968                 | __system___chdir
1c968     00 4A 05 F6 | 	mov	COUNT_, #0
1c96c     A8 00 A0 FD | 	call	#pushregs_
1c970     40 F0 07 F1 | 	add	ptra, #64
1c974     04 4E 05 F1 | 	add	fp, #4
1c978     A7 12 62 FC | 	wrlong	arg01, fp
1c97c     04 4E 05 F1 | 	add	fp, #4
1c980     A7 14 02 F6 | 	mov	arg02, fp
1c984     08 4E 85 F1 | 	sub	fp, #8
1c988     10 48 B0 FD | 	call	#__system__stat
1c98c     3C 4E 05 F1 | 	add	fp, #60
1c990     A7 FA 61 FC | 	wrlong	result1, fp
1c994     3C 4E 85 F1 | 	sub	fp, #60
1c998     00 FA 0D F2 | 	cmp	result1, #0 wz
1c99c     3C 4E 05 51 |  if_ne	add	fp, #60
1c9a0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1c9a4     3C 4E 85 51 |  if_ne	sub	fp, #60
1c9a8     BC 00 90 5D |  if_ne	jmp	#LR__2492
1c9ac     10 4E 05 F1 | 	add	fp, #16
1c9b0     A7 12 02 FB | 	rdlong	arg01, fp
1c9b4     10 4E 85 F1 | 	sub	fp, #16
1c9b8     78 00 00 FF 
1c9bc     00 12 06 F5 | 	and	arg01, ##61440
1c9c0     08 00 00 FF 
1c9c4     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1c9c8     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1c9cc     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1c9d0     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1c9d4     01 FA 65 56 |  if_ne	neg	result1, #1
1c9d8     8C 00 90 5D |  if_ne	jmp	#LR__2492
1c9dc     04 4E 05 F1 | 	add	fp, #4
1c9e0     A7 16 02 FB | 	rdlong	arg03, fp
1c9e4     04 4E 85 F1 | 	sub	fp, #4
1c9e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
1c9ec     2F 16 0E F2 | 	cmp	arg03, #47 wz
1c9f0     24 00 90 5D |  if_ne	jmp	#LR__2490
1c9f4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1c9f8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c9fc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ca00     04 4E 05 F1 | 	add	fp, #4
1ca04     A7 14 02 FB | 	rdlong	arg02, fp
1ca08     04 4E 85 F1 | 	sub	fp, #4
1ca0c     00 17 06 F6 | 	mov	arg03, #256
1ca10     A8 4A B0 FD | 	call	#__system__strncpy
1ca14     4C 00 90 FD | 	jmp	#LR__2491
1ca18                 | LR__2490
1ca18     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1ca1c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1ca20     38 4E 05 F1 | 	add	fp, #56
1ca24     A7 12 62 FC | 	wrlong	arg01, fp
1ca28     38 4E 85 F1 | 	sub	fp, #56
1ca2c     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1ca30     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1ca34     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ca38     00 17 06 F6 | 	mov	arg03, #256
1ca3c     7C 4A B0 FD | 	call	#__system__strncpy
1ca40     38 4E 05 F1 | 	add	fp, #56
1ca44     A7 12 02 FB | 	rdlong	arg01, fp
1ca48     34 4E 85 F1 | 	sub	fp, #52
1ca4c     A7 14 02 FB | 	rdlong	arg02, fp
1ca50     04 4E 85 F1 | 	sub	fp, #4
1ca54     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1ca58     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1ca5c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1ca60     10 00 B0 FD | 	call	#__system____getvfsforfile
1ca64                 | LR__2491
1ca64     00 FA 05 F6 | 	mov	result1, #0
1ca68                 | LR__2492
1ca68     A7 F0 03 F6 | 	mov	ptra, fp
1ca6c     B2 00 A0 FD | 	call	#popregs_
1ca70                 | __system___chdir_ret
1ca70     2D 00 64 FD | 	ret
1ca74                 | 
1ca74                 | __system____getvfsforfile
1ca74     0E 4A 05 F6 | 	mov	COUNT_, #14
1ca78     A8 00 A0 FD | 	call	#pushregs_
1ca7c     09 1F 02 F6 | 	mov	local01, arg01
1ca80     0A 21 02 F6 | 	mov	local02, arg02
1ca84     0B 23 02 F6 | 	mov	local03, arg03
1ca88     97 10 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1ca8c                 | LR__2500
1ca8c     10 FB C1 FA | 	rdbyte	result1, local02
1ca90     2F FA 0D F2 | 	cmp	result1, #47 wz
1ca94     01 20 06 A1 |  if_e	add	local02, #1
1ca98     10 25 C2 AA |  if_e	rdbyte	local04, local02
1ca9c     01 20 86 A1 |  if_e	sub	local02, #1
1caa0     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1caa4     01 20 06 A1 |  if_e	add	local02, #1
1caa8     E0 FF 9F AD |  if_e	jmp	#LR__2500
1caac                 | LR__2501
1caac     10 25 C2 FA | 	rdbyte	local04, local02
1cab0     2F 24 0E F2 | 	cmp	local04, #47 wz
1cab4     14 00 90 5D |  if_ne	jmp	#LR__2502
1cab8     0F 13 02 F6 | 	mov	arg01, local01
1cabc     10 15 02 F6 | 	mov	arg02, local02
1cac0     00 17 06 F6 | 	mov	arg03, #256
1cac4     F4 49 B0 FD | 	call	#__system__strncpy
1cac8     7C 00 90 FD | 	jmp	#LR__2504
1cacc                 | LR__2502
1cacc     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1cad0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1cad4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1cad8     0F 13 02 F6 | 	mov	arg01, local01
1cadc     00 17 06 F6 | 	mov	arg03, #256
1cae0     D8 49 B0 FD | 	call	#__system__strncpy
1cae4     10 25 CA FA | 	rdbyte	local04, local02 wz
1cae8     5C 00 90 AD |  if_e	jmp	#LR__2503
1caec     10 25 C2 FA | 	rdbyte	local04, local02
1caf0     2E 24 0E F2 | 	cmp	local04, #46 wz
1caf4     01 20 06 A1 |  if_e	add	local02, #1
1caf8     10 27 C2 AA |  if_e	rdbyte	local05, local02
1cafc     01 20 86 A1 |  if_e	sub	local02, #1
1cb00     13 29 02 A6 |  if_e	mov	local06, local05
1cb04     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1cb08     3C 00 90 AD |  if_e	jmp	#LR__2503
1cb0c     0F 27 C2 FA | 	rdbyte	local05, local01
1cb10     2F 26 0E F2 | 	cmp	local05, #47 wz
1cb14     01 1E 06 A1 |  if_e	add	local01, #1
1cb18     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1cb1c     01 1E 86 A1 |  if_e	sub	local01, #1
1cb20     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1cb24     5C 01 00 5F 
1cb28     88 14 06 56 |  if_ne	mov	arg02, ##@LR__4560
1cb2c     0F 13 02 56 |  if_ne	mov	arg01, local01
1cb30     00 17 06 56 |  if_ne	mov	arg03, #256
1cb34     D0 49 B0 5D |  if_ne	call	#__system__strncat
1cb38     0F 13 02 F6 | 	mov	arg01, local01
1cb3c     10 15 02 F6 | 	mov	arg02, local02
1cb40     00 17 06 F6 | 	mov	arg03, #256
1cb44     C0 49 B0 FD | 	call	#__system__strncat
1cb48                 | LR__2503
1cb48                 | LR__2504
1cb48     0F 13 02 F6 | 	mov	arg01, local01
1cb4c     78 4B B0 FD | 	call	#__system___normalizeName
1cb50     0F 25 CA FA | 	rdbyte	local04, local01 wz
1cb54     1C 00 90 AD |  if_e	jmp	#LR__2505
1cb58     0F 25 C2 FA | 	rdbyte	local04, local01
1cb5c     2F 24 0E F2 | 	cmp	local04, #47 wz
1cb60     01 1E 06 A1 |  if_e	add	local01, #1
1cb64     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1cb68     01 1E 86 A1 |  if_e	sub	local01, #1
1cb6c     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1cb70     18 00 90 5D |  if_ne	jmp	#LR__2506
1cb74                 | LR__2505
1cb74     01 00 00 FF 
1cb78     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1cb7c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1cb80     01 00 00 FF 
1cb84     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1cb88     EC 01 90 FD | 	jmp	#LR__2520
1cb8c                 | LR__2506
1cb8c     00 2A 06 F6 | 	mov	local07, #0
1cb90                 | LR__2507
1cb90     04 2A 56 F2 | 	cmps	local07, #4 wc
1cb94     CC 01 90 3D |  if_ae	jmp	#LR__2519
1cb98     15 29 02 F6 | 	mov	local06, local07
1cb9c     02 28 66 F0 | 	shl	local06, #2
1cba0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cba4     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1cba8     14 29 0A FB | 	rdlong	local06, local06 wz
1cbac     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cbb0     A8 01 90 AD |  if_e	jmp	#LR__2518
1cbb4     15 25 02 F6 | 	mov	local04, local07
1cbb8     02 24 66 F0 | 	shl	local04, #2
1cbbc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cbc0     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1cbc4     12 13 02 FB | 	rdlong	arg01, local04
1cbc8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cbcc     09 2D 02 F6 | 	mov	local08, arg01
1cbd0     97 06 48 FB | 	callpa	#(@LR__2509-@LR__2508)>>2,fcache_load_ptr_
1cbd4                 | LR__2508
1cbd4     16 FB C9 FA | 	rdbyte	result1, local08 wz
1cbd8     01 2C 06 51 |  if_ne	add	local08, #1
1cbdc     F4 FF 9F 5D |  if_ne	jmp	#LR__2508
1cbe0                 | LR__2509
1cbe0     09 2D 82 F1 | 	sub	local08, arg01
1cbe4     16 2F 02 F6 | 	mov	local09, local08
1cbe8     17 25 02 F6 | 	mov	local04, local09
1cbec     0F 25 02 F1 | 	add	local04, local01
1cbf0     12 29 C2 FA | 	rdbyte	local06, local04
1cbf4     2F 28 0E F2 | 	cmp	local06, #47 wz
1cbf8     17 31 02 56 |  if_ne	mov	local10, local09
1cbfc     0F 31 02 51 |  if_ne	add	local10, local01
1cc00     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1cc04     54 01 90 5D |  if_ne	jmp	#LR__2517
1cc08     15 17 02 F6 | 	mov	arg03, local07
1cc0c     02 16 66 F0 | 	shl	arg03, #2
1cc10     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1cc14     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1cc18     0B 15 02 FB | 	rdlong	arg02, arg03
1cc1c     17 17 02 F6 | 	mov	arg03, local09
1cc20     0F 13 02 F6 | 	mov	arg01, local01
1cc24     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1cc28     3C 49 B0 FD | 	call	#__system__strncmp
1cc2c     00 FA 4D F2 | 	cmps	result1, #0 wz
1cc30     28 01 90 5D |  if_ne	jmp	#LR__2517
1cc34     15 33 02 F6 | 	mov	local11, local07
1cc38     02 32 66 F0 | 	shl	local11, #2
1cc3c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1cc40     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1cc44     19 35 02 FB | 	rdlong	local12, local11
1cc48     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1cc4c     97 22 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1cc50                 | LR__2510
1cc50     17 29 02 F6 | 	mov	local06, local09
1cc54     01 28 06 F1 | 	add	local06, #1
1cc58     0F 29 02 F1 | 	add	local06, local01
1cc5c     14 33 C2 FA | 	rdbyte	local11, local06
1cc60     2E 32 0E F2 | 	cmp	local11, #46 wz
1cc64     2C 00 90 5D |  if_ne	jmp	#LR__2512
1cc68     17 33 02 F6 | 	mov	local11, local09
1cc6c     02 32 06 F1 | 	add	local11, #2
1cc70     0F 33 02 F1 | 	add	local11, local01
1cc74     19 31 C2 FA | 	rdbyte	local10, local11
1cc78     2F 30 0E F2 | 	cmp	local10, #47 wz
1cc7c     17 37 02 56 |  if_ne	mov	local13, local09
1cc80     02 36 06 51 |  if_ne	add	local13, #2
1cc84     0F 37 02 51 |  if_ne	add	local13, local01
1cc88     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1cc8c     01 2E 06 A1 |  if_e	add	local09, #1
1cc90     BC FF 9F AD |  if_e	jmp	#LR__2510
1cc94                 | LR__2511
1cc94                 | LR__2512
1cc94     00 22 0E F2 | 	cmp	local03, #0 wz
1cc98     11 13 02 56 |  if_ne	mov	arg01, local03
1cc9c     0F 15 02 56 |  if_ne	mov	arg02, local01
1cca0     00 17 06 56 |  if_ne	mov	arg03, #256
1cca4     14 48 B0 5D |  if_ne	call	#__system__strncpy
1cca8     0F 15 02 F6 | 	mov	arg02, local01
1ccac     17 15 02 F1 | 	add	arg02, local09
1ccb0     01 14 06 F1 | 	add	arg02, #1
1ccb4     0F 13 02 F6 | 	mov	arg01, local01
1ccb8     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1ccbc     0F 13 02 F6 | 	mov	arg01, local01
1ccc0     09 2D 02 F6 | 	mov	local08, arg01
1ccc4     97 06 48 FB | 	callpa	#(@LR__2514-@LR__2513)>>2,fcache_load_ptr_
1ccc8                 | LR__2513
1ccc8     16 FB C9 FA | 	rdbyte	result1, local08 wz
1cccc     01 2C 06 51 |  if_ne	add	local08, #1
1ccd0     F4 FF 9F 5D |  if_ne	jmp	#LR__2513
1ccd4                 | LR__2514
1ccd4     09 2D 82 F1 | 	sub	local08, arg01
1ccd8     16 2F 02 F6 | 	mov	local09, local08
1ccdc                 | LR__2515
1ccdc     01 2E 56 F2 | 	cmps	local09, #1 wc
1cce0     70 00 90 CD |  if_b	jmp	#LR__2516
1cce4     17 25 02 F6 | 	mov	local04, local09
1cce8     0F 25 02 F1 | 	add	local04, local01
1ccec     12 33 C2 FA | 	rdbyte	local11, local04
1ccf0     2F 32 0E F2 | 	cmp	local11, #47 wz
1ccf4     17 33 02 A6 |  if_e	mov	local11, local09
1ccf8     0F 33 02 A1 |  if_e	add	local11, local01
1ccfc     19 01 48 AC |  if_e	wrbyte	#0, local11
1cd00     01 2E 86 A1 |  if_e	sub	local09, #1
1cd04     D4 FF 9F AD |  if_e	jmp	#LR__2515
1cd08     17 25 02 F6 | 	mov	local04, local09
1cd0c     0F 25 02 F1 | 	add	local04, local01
1cd10     12 33 C2 FA | 	rdbyte	local11, local04
1cd14     2E 32 0E F2 | 	cmp	local11, #46 wz
1cd18     38 00 90 5D |  if_ne	jmp	#LR__2516
1cd1c     02 2E 56 F2 | 	cmps	local09, #2 wc
1cd20     30 00 90 CD |  if_b	jmp	#LR__2516
1cd24     17 39 02 F6 | 	mov	local14, local09
1cd28     01 38 86 F1 | 	sub	local14, #1
1cd2c     0F 39 02 F1 | 	add	local14, local01
1cd30     1C 27 C2 FA | 	rdbyte	local05, local14
1cd34     2F 26 0E F2 | 	cmp	local05, #47 wz
1cd38     18 00 90 5D |  if_ne	jmp	#LR__2516
1cd3c     17 25 02 F6 | 	mov	local04, local09
1cd40     01 24 86 F1 | 	sub	local04, #1
1cd44     0F 25 02 F1 | 	add	local04, local01
1cd48     12 01 48 FC | 	wrbyte	#0, local04
1cd4c     02 2E 86 F1 | 	sub	local09, #2
1cd50     88 FF 9F FD | 	jmp	#LR__2515
1cd54                 | LR__2516
1cd54     1A FB 01 F6 | 	mov	result1, local12
1cd58     1C 00 90 FD | 	jmp	#LR__2520
1cd5c                 | LR__2517
1cd5c                 | LR__2518
1cd5c     01 2A 06 F1 | 	add	local07, #1
1cd60     2C FE 9F FD | 	jmp	#LR__2507
1cd64                 | LR__2519
1cd64     03 00 00 FF 
1cd68     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1cd6c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1cd70     03 00 00 FF 
1cd74     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1cd78                 | LR__2520
1cd78     A7 F0 03 F6 | 	mov	ptra, fp
1cd7c     B2 00 A0 FD | 	call	#popregs_
1cd80                 | __system____getvfsforfile_ret
1cd80     2D 00 64 FD | 	ret
1cd84                 | 
1cd84                 | __system___basic_open
1cd84     05 4A 05 F6 | 	mov	COUNT_, #5
1cd88     A8 00 A0 FD | 	call	#pushregs_
1cd8c     0A 1F 02 F6 | 	mov	local01, arg02
1cd90     0B 21 02 F6 | 	mov	local02, arg03
1cd94     0C 23 02 F6 | 	mov	local03, arg04
1cd98     00 24 06 F6 | 	mov	local04, #0
1cd9c     F4 46 B0 FD | 	call	#__system____getftab
1cda0     FD 26 0A F6 | 	mov	local05, result1 wz
1cda4     18 00 90 5D |  if_ne	jmp	#LR__2530
1cda8     EE 12 02 F6 | 	mov	arg01, abortchain
1cdac     0C 14 06 F6 | 	mov	arg02, #12
1cdb0     01 16 06 F6 | 	mov	arg03, #1
1cdb4     DA 00 A0 FD | 	call	#__longjmp
1cdb8     01 FA 65 F6 | 	neg	result1, #1
1cdbc     10 01 90 FD | 	jmp	#LR__2539
1cdc0                 | LR__2530
1cdc0     08 26 06 F1 | 	add	local05, #8
1cdc4     13 FB 09 FB | 	rdlong	result1, local05 wz
1cdc8     08 26 86 F1 | 	sub	local05, #8
1cdcc     13 13 02 56 |  if_ne	mov	arg01, local05
1cdd0     50 3E B0 5D |  if_ne	call	#__system___closeraw
1cdd4     00 1E 0E F2 | 	cmp	local01, #0 wz
1cdd8     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1cddc     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1cde0     3C 00 90 AD |  if_e	jmp	#LR__2532
1cde4     0C 12 06 F6 | 	mov	arg01, #12
1cde8     38 33 B0 FD | 	call	#__system___gc_alloc_managed
1cdec     FD 24 0A F6 | 	mov	local04, result1 wz
1cdf0     18 00 90 5D |  if_ne	jmp	#LR__2531
1cdf4     EE 12 02 F6 | 	mov	arg01, abortchain
1cdf8     07 14 06 F6 | 	mov	arg02, #7
1cdfc     01 16 06 F6 | 	mov	arg03, #1
1ce00     DA 00 A0 FD | 	call	#__longjmp
1ce04     01 FA 65 F6 | 	neg	result1, #1
1ce08     C4 00 90 FD | 	jmp	#LR__2539
1ce0c                 | LR__2531
1ce0c     12 01 68 FC | 	wrlong	#0, local04
1ce10     04 24 06 F1 | 	add	local04, #4
1ce14     12 01 68 FC | 	wrlong	#0, local04
1ce18     04 24 86 F1 | 	sub	local04, #4
1ce1c     13 25 62 FC | 	wrlong	local04, local05
1ce20                 | LR__2532
1ce20     00 1E 0E F2 | 	cmp	local01, #0 wz
1ce24     1C 00 90 AD |  if_e	jmp	#LR__2533
1ce28     12 1F 62 FC | 	wrlong	local01, local04
1ce2c     12 FB 01 F6 | 	mov	result1, local04
1ce30     77 FA 25 F4 | 	bith	result1, #119
1ce34     1C 26 06 F1 | 	add	local05, #28
1ce38     13 FB 61 FC | 	wrlong	result1, local05
1ce3c     1C 26 86 F1 | 	sub	local05, #28
1ce40     0C 00 90 FD | 	jmp	#LR__2534
1ce44                 | LR__2533
1ce44     1C 26 06 F1 | 	add	local05, #28
1ce48     13 01 68 FC | 	wrlong	#0, local05
1ce4c     1C 26 86 F1 | 	sub	local05, #28
1ce50                 | LR__2534
1ce50     00 20 0E F2 | 	cmp	local02, #0 wz
1ce54     28 00 90 AD |  if_e	jmp	#LR__2535
1ce58     04 24 06 F1 | 	add	local04, #4
1ce5c     12 21 62 FC | 	wrlong	local02, local04
1ce60     04 24 86 F1 | 	sub	local04, #4
1ce64     12 FB 01 F6 | 	mov	result1, local04
1ce68     00 C8 03 FF 
1ce6c     00 FA 45 F5 | 	or	result1, ##126877696
1ce70     20 26 06 F1 | 	add	local05, #32
1ce74     13 FB 61 FC | 	wrlong	result1, local05
1ce78     20 26 86 F1 | 	sub	local05, #32
1ce7c     0C 00 90 FD | 	jmp	#LR__2536
1ce80                 | LR__2535
1ce80     20 26 06 F1 | 	add	local05, #32
1ce84     13 01 68 FC | 	wrlong	#0, local05
1ce88     20 26 86 F1 | 	sub	local05, #32
1ce8c                 | LR__2536
1ce8c     00 22 0E F2 | 	cmp	local03, #0 wz
1ce90     24 00 90 AD |  if_e	jmp	#LR__2537
1ce94     08 24 06 F1 | 	add	local04, #8
1ce98     12 23 62 FC | 	wrlong	local03, local04
1ce9c     08 24 86 F1 | 	sub	local04, #8
1cea0     00 D0 03 FF 
1cea4     00 24 46 F5 | 	or	local04, ##127926272
1cea8     24 26 06 F1 | 	add	local05, #36
1ceac     13 25 62 FC | 	wrlong	local04, local05
1ceb0     24 26 86 F1 | 	sub	local05, #36
1ceb4     0C 00 90 FD | 	jmp	#LR__2538
1ceb8                 | LR__2537
1ceb8     24 26 06 F1 | 	add	local05, #36
1cebc     13 01 68 FC | 	wrlong	#0, local05
1cec0     24 26 86 F1 | 	sub	local05, #36
1cec4                 | LR__2538
1cec4     08 26 06 F1 | 	add	local05, #8
1cec8     13 0F 68 FC | 	wrlong	#7, local05
1cecc     00 FA 05 F6 | 	mov	result1, #0
1ced0                 | LR__2539
1ced0     A7 F0 03 F6 | 	mov	ptra, fp
1ced4     B2 00 A0 FD | 	call	#popregs_
1ced8                 | __system___basic_open_ret
1ced8     2D 00 64 FD | 	ret
1cedc                 | 
1cedc                 | __system___basic_open_string
1cedc     04 4A 05 F6 | 	mov	COUNT_, #4
1cee0     A8 00 A0 FD | 	call	#pushregs_
1cee4     0A 1F 02 F6 | 	mov	local01, arg02
1cee8     0B 21 02 F6 | 	mov	local02, arg03
1ceec     A4 45 B0 FD | 	call	#__system____getftab
1cef0     FD 22 0A F6 | 	mov	local03, result1 wz
1cef4     18 00 90 5D |  if_ne	jmp	#LR__2540
1cef8     EE 12 02 F6 | 	mov	arg01, abortchain
1cefc     0C 14 06 F6 | 	mov	arg02, #12
1cf00     01 16 06 F6 | 	mov	arg03, #1
1cf04     DA 00 A0 FD | 	call	#__longjmp
1cf08     01 FA 65 F6 | 	neg	result1, #1
1cf0c     58 00 90 FD | 	jmp	#LR__2542
1cf10                 | LR__2540
1cf10     08 22 06 F1 | 	add	local03, #8
1cf14     11 19 0A FB | 	rdlong	arg04, local03 wz
1cf18     08 22 86 F1 | 	sub	local03, #8
1cf1c     11 13 02 56 |  if_ne	mov	arg01, local03
1cf20     00 3D B0 5D |  if_ne	call	#__system___closeraw
1cf24     0F 15 02 F6 | 	mov	arg02, local01
1cf28     10 17 02 F6 | 	mov	arg03, local02
1cf2c     11 13 02 F6 | 	mov	arg01, local03
1cf30     B6 19 06 F6 | 	mov	arg04, #438
1cf34     E8 39 B0 FD | 	call	#__system___openraw
1cf38     FD 24 02 F6 | 	mov	local04, result1
1cf3c     00 24 56 F2 | 	cmps	local04, #0 wc
1cf40     20 00 90 3D |  if_ae	jmp	#LR__2541
1cf44     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1cf48     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1cf4c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1cf50     EE 12 02 F6 | 	mov	arg01, abortchain
1cf54     01 16 06 F6 | 	mov	arg03, #1
1cf58     DA 00 A0 FD | 	call	#__longjmp
1cf5c     01 FA 65 F6 | 	neg	result1, #1
1cf60     04 00 90 FD | 	jmp	#LR__2542
1cf64                 | LR__2541
1cf64     12 FB 01 F6 | 	mov	result1, local04
1cf68                 | LR__2542
1cf68     A7 F0 03 F6 | 	mov	ptra, fp
1cf6c     B2 00 A0 FD | 	call	#popregs_
1cf70                 | __system___basic_open_string_ret
1cf70     2D 00 64 FD | 	ret
1cf74                 | 
1cf74                 | __system___basic_print_nl
1cf74     0A 14 06 F6 | 	mov	arg02, #10
1cf78     00 16 06 F6 | 	mov	arg03, #0
1cf7c     08 00 B0 FD | 	call	#__system___basic_print_char
1cf80     01 FA 05 F6 | 	mov	result1, #1
1cf84                 | __system___basic_print_nl_ret
1cf84     2D 00 64 FD | 	ret
1cf88                 | 
1cf88                 | __system___basic_print_char
1cf88     03 4A 05 F6 | 	mov	COUNT_, #3
1cf8c     A8 00 A0 FD | 	call	#pushregs_
1cf90     0A 1F 02 F6 | 	mov	local01, arg02
1cf94     50 4C B0 FD | 	call	#__system___gettxfunc
1cf98     FD 20 0A F6 | 	mov	local02, result1 wz
1cf9c     00 FA 05 A6 |  if_e	mov	result1, #0
1cfa0     30 00 90 AD |  if_e	jmp	#LR__2550
1cfa4     10 23 02 F6 | 	mov	local03, local02
1cfa8     13 20 46 F7 | 	zerox	local02, #19
1cfac     14 22 46 F0 | 	shr	local03, #20
1cfb0     02 22 66 F0 | 	shl	local03, #2
1cfb4     ED 22 02 F1 | 	add	local03, __methods__
1cfb8     11 23 02 FB | 	rdlong	local03, local03
1cfbc     0F 13 02 F6 | 	mov	arg01, local01
1cfc0     F2 1E 02 F6 | 	mov	local01, objptr
1cfc4     10 E5 01 F6 | 	mov	objptr, local02
1cfc8     2D 22 62 FD | 	call	local03
1cfcc     0F E5 01 F6 | 	mov	objptr, local01
1cfd0     01 FA 05 F6 | 	mov	result1, #1
1cfd4                 | LR__2550
1cfd4     A7 F0 03 F6 | 	mov	ptra, fp
1cfd8     B2 00 A0 FD | 	call	#popregs_
1cfdc                 | __system___basic_print_char_ret
1cfdc     2D 00 64 FD | 	ret
1cfe0                 | 
1cfe0                 | __system___basic_print_string
1cfe0     03 4A 05 F6 | 	mov	COUNT_, #3
1cfe4     A8 00 A0 FD | 	call	#pushregs_
1cfe8     0A 1F 02 F6 | 	mov	local01, arg02
1cfec     0B 21 02 F6 | 	mov	local02, arg03
1cff0     F4 4B B0 FD | 	call	#__system___gettxfunc
1cff4     FD 22 0A F6 | 	mov	local03, result1 wz
1cff8     00 FA 05 A6 |  if_e	mov	result1, #0
1cffc     18 00 90 AD |  if_e	jmp	#LR__2560
1d000     00 1E 0E F2 | 	cmp	local01, #0 wz
1d004     00 FA 05 A6 |  if_e	mov	result1, #0
1d008     11 13 02 56 |  if_ne	mov	arg01, local03
1d00c     10 15 02 56 |  if_ne	mov	arg02, local02
1d010     0F 17 02 56 |  if_ne	mov	arg03, local01
1d014     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1d018                 | LR__2560
1d018     A7 F0 03 F6 | 	mov	ptra, fp
1d01c     B2 00 A0 FD | 	call	#popregs_
1d020                 | __system___basic_print_string_ret
1d020     2D 00 64 FD | 	ret
1d024                 | 
1d024                 | __system___basic_print_integer
1d024     04 4A 05 F6 | 	mov	COUNT_, #4
1d028     A8 00 A0 FD | 	call	#pushregs_
1d02c     0A 1F 02 F6 | 	mov	local01, arg02
1d030     0B 21 02 F6 | 	mov	local02, arg03
1d034     0C 23 02 F6 | 	mov	local03, arg04
1d038     AC 4B B0 FD | 	call	#__system___gettxfunc
1d03c     FD 24 0A F6 | 	mov	local04, result1 wz
1d040     00 FA 05 A6 |  if_e	mov	result1, #0
1d044     12 13 02 56 |  if_ne	mov	arg01, local04
1d048     10 15 02 56 |  if_ne	mov	arg02, local02
1d04c     0F 17 02 56 |  if_ne	mov	arg03, local01
1d050     11 19 02 56 |  if_ne	mov	arg04, local03
1d054     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1d058     A7 F0 03 F6 | 	mov	ptra, fp
1d05c     B2 00 A0 FD | 	call	#popregs_
1d060                 | __system___basic_print_integer_ret
1d060     2D 00 64 FD | 	ret
1d064                 | 
1d064                 | __system___basic_print_unsigned
1d064     03 4A 05 F6 | 	mov	COUNT_, #3
1d068     A8 00 A0 FD | 	call	#pushregs_
1d06c     0A 1F 02 F6 | 	mov	local01, arg02
1d070     0B 21 02 F6 | 	mov	local02, arg03
1d074     0C 23 02 F6 | 	mov	local03, arg04
1d078     6C 4B B0 FD | 	call	#__system___gettxfunc
1d07c     FD 12 0A F6 | 	mov	arg01, result1 wz
1d080     00 FA 05 A6 |  if_e	mov	result1, #0
1d084     3A 20 26 54 |  if_ne	bith	local02, #58
1d088     10 15 02 56 |  if_ne	mov	arg02, local02
1d08c     0F 17 02 56 |  if_ne	mov	arg03, local01
1d090     11 19 02 56 |  if_ne	mov	arg04, local03
1d094     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1d098     A7 F0 03 F6 | 	mov	ptra, fp
1d09c     B2 00 A0 FD | 	call	#popregs_
1d0a0                 | __system___basic_print_unsigned_ret
1d0a0     2D 00 64 FD | 	ret
1d0a4                 | 
1d0a4                 | __system___basic_get_char
1d0a4     03 4A 05 F6 | 	mov	COUNT_, #3
1d0a8     A8 00 A0 FD | 	call	#pushregs_
1d0ac     7C 4B B0 FD | 	call	#__system___getrxfunc
1d0b0     FD 1E 0A F6 | 	mov	local01, result1 wz
1d0b4     01 FA 65 A6 |  if_e	neg	result1, #1
1d0b8     28 00 90 AD |  if_e	jmp	#LR__2570
1d0bc     0F 21 02 F6 | 	mov	local02, local01
1d0c0     13 1E 46 F7 | 	zerox	local01, #19
1d0c4     14 20 46 F0 | 	shr	local02, #20
1d0c8     02 20 66 F0 | 	shl	local02, #2
1d0cc     ED 20 02 F1 | 	add	local02, __methods__
1d0d0     10 21 02 FB | 	rdlong	local02, local02
1d0d4     F2 22 02 F6 | 	mov	local03, objptr
1d0d8     0F E5 01 F6 | 	mov	objptr, local01
1d0dc     2D 20 62 FD | 	call	local02
1d0e0     11 E5 01 F6 | 	mov	objptr, local03
1d0e4                 | LR__2570
1d0e4     A7 F0 03 F6 | 	mov	ptra, fp
1d0e8     B2 00 A0 FD | 	call	#popregs_
1d0ec                 | __system___basic_get_char_ret
1d0ec     2D 00 64 FD | 	ret
1d0f0                 | 
1d0f0                 | __system___basic_get
1d0f0     04 4A 05 F6 | 	mov	COUNT_, #4
1d0f4     A8 00 A0 FD | 	call	#pushregs_
1d0f8     0D 1F 02 F6 | 	mov	local01, arg05
1d0fc     0F 19 02 FD | 	qmul	arg04, local01
1d100     09 21 02 F6 | 	mov	local02, arg01
1d104     0B 23 02 F6 | 	mov	local03, arg03
1d108     00 14 0E F2 | 	cmp	arg02, #0 wz
1d10c     01 14 86 51 |  if_ne	sub	arg02, #1
1d110     10 13 02 56 |  if_ne	mov	arg01, local02
1d114     00 16 06 56 |  if_ne	mov	arg03, #0
1d118     18 24 62 FD | 	getqx	local04
1d11c     BC 41 B0 5D |  if_ne	call	#__system__lseek
1d120     11 15 02 F6 | 	mov	arg02, local03
1d124     12 17 02 F6 | 	mov	arg03, local04
1d128     10 13 02 F6 | 	mov	arg01, local02
1d12c     34 41 B0 FD | 	call	#__system__read
1d130     FD 24 02 F6 | 	mov	local04, result1
1d134     01 24 56 F2 | 	cmps	local04, #1 wc
1d138     10 00 90 CD |  if_b	jmp	#LR__2580
1d13c     12 65 02 F6 | 	mov	muldiva_, local04
1d140     0F 67 02 F6 | 	mov	muldivb_, local01
1d144     BA 00 A0 FD | 	call	#divide_
1d148     33 25 02 F6 | 	mov	local04, muldivb_
1d14c                 | LR__2580
1d14c     12 FB 01 F6 | 	mov	result1, local04
1d150     A7 F0 03 F6 | 	mov	ptra, fp
1d154     B2 00 A0 FD | 	call	#popregs_
1d158                 | __system___basic_get_ret
1d158     2D 00 64 FD | 	ret
1d15c                 | 
1d15c                 | __system____lockio
1d15c     0C 4B B0 FD | 	call	#__system___getiolock_0474
1d160     FD 12 02 F6 | 	mov	arg01, result1
1d164     74 F1 BF FD | 	call	#__system___lockmem
1d168     00 FA 05 F6 | 	mov	result1, #0
1d16c                 | __system____lockio_ret
1d16c     2D 00 64 FD | 	ret
1d170                 | 
1d170                 | __system____unlockio
1d170     F8 4A B0 FD | 	call	#__system___getiolock_0474
1d174     FD 00 68 FC | 	wrlong	#0, result1
1d178     00 FA 05 F6 | 	mov	result1, #0
1d17c                 | __system____unlockio_ret
1d17c     2D 00 64 FD | 	ret
1d180                 | 
1d180                 | __system___fmtchar
1d180     00 4A 05 F6 | 	mov	COUNT_, #0
1d184     A8 00 A0 FD | 	call	#pushregs_
1d188     10 F0 07 F1 | 	add	ptra, #16
1d18c     04 4E 05 F1 | 	add	fp, #4
1d190     A7 12 62 FC | 	wrlong	arg01, fp
1d194     04 4E 05 F1 | 	add	fp, #4
1d198     A7 14 62 FC | 	wrlong	arg02, fp
1d19c     04 4E 05 F1 | 	add	fp, #4
1d1a0     A7 16 62 FC | 	wrlong	arg03, fp
1d1a4     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1d1a8     A7 16 62 FC | 	wrlong	arg03, fp
1d1ac     08 4E 85 F1 | 	sub	fp, #8
1d1b0     A7 12 02 FB | 	rdlong	arg01, fp
1d1b4     04 4E 05 F1 | 	add	fp, #4
1d1b8     A7 14 02 FB | 	rdlong	arg02, fp
1d1bc     04 4E 05 F1 | 	add	fp, #4
1d1c0     A7 16 02 F6 | 	mov	arg03, fp
1d1c4     0C 4E 85 F1 | 	sub	fp, #12
1d1c8     0C 00 B0 FD | 	call	#__system___fmtstr
1d1cc     A7 F0 03 F6 | 	mov	ptra, fp
1d1d0     B2 00 A0 FD | 	call	#popregs_
1d1d4                 | __system___fmtchar_ret
1d1d4     2D 00 64 FD | 	ret
1d1d8                 | 
1d1d8                 | __system___fmtstr
1d1d8     09 4A 05 F6 | 	mov	COUNT_, #9
1d1dc     A8 00 A0 FD | 	call	#pushregs_
1d1e0     09 1F 02 F6 | 	mov	local01, arg01
1d1e4     0A 21 02 F6 | 	mov	local02, arg02
1d1e8     0B 23 02 F6 | 	mov	local03, arg03
1d1ec     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1d1f0     11 13 02 F6 | 	mov	arg01, local03
1d1f4     09 25 02 F6 | 	mov	local04, arg01
1d1f8     97 06 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1d1fc                 | LR__2590
1d1fc     12 FB C9 FA | 	rdbyte	result1, local04 wz
1d200     01 24 06 51 |  if_ne	add	local04, #1
1d204     F4 FF 9F 5D |  if_ne	jmp	#LR__2590
1d208                 | LR__2591
1d208     09 25 82 F1 | 	sub	local04, arg01
1d20c     00 18 0E F2 | 	cmp	arg04, #0 wz
1d210     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1d214     10 15 02 F6 | 	mov	arg02, local02
1d218     12 17 02 F6 | 	mov	arg03, local04
1d21c     0F 13 02 F6 | 	mov	arg01, local01
1d220     02 18 06 F6 | 	mov	arg04, #2
1d224     60 46 B0 FD | 	call	#__system___fmtpad
1d228     FD 26 02 F6 | 	mov	local05, result1
1d22c     00 26 56 F2 | 	cmps	local05, #0 wc
1d230     13 FB 01 C6 |  if_b	mov	result1, local05
1d234     80 00 90 CD |  if_b	jmp	#LR__2594
1d238     01 24 56 F2 | 	cmps	local04, #1 wc
1d23c     50 00 90 CD |  if_b	jmp	#LR__2593
1d240     12 29 02 F6 | 	mov	local06, local04
1d244                 | LR__2592
1d244     0F 2B 02 F6 | 	mov	local07, local01
1d248     0F 2D 02 F6 | 	mov	local08, local01
1d24c     13 2A 46 F7 | 	zerox	local07, #19
1d250     14 2C 46 F0 | 	shr	local08, #20
1d254     02 2C 66 F0 | 	shl	local08, #2
1d258     ED 2C 02 F1 | 	add	local08, __methods__
1d25c     16 2D 02 FB | 	rdlong	local08, local08
1d260     11 13 C2 FA | 	rdbyte	arg01, local03
1d264     F2 2E 02 F6 | 	mov	local09, objptr
1d268     15 E5 01 F6 | 	mov	objptr, local07
1d26c     01 22 06 F1 | 	add	local03, #1
1d270     2D 2C 62 FD | 	call	local08
1d274     17 E5 01 F6 | 	mov	objptr, local09
1d278     FD 2E 02 F6 | 	mov	local09, result1
1d27c     00 2E 56 F2 | 	cmps	local09, #0 wc
1d280     17 FB 01 C6 |  if_b	mov	result1, local09
1d284     30 00 90 CD |  if_b	jmp	#LR__2594
1d288     17 27 02 F1 | 	add	local05, local09
1d28c     ED 29 6E FB | 	djnz	local06, #LR__2592
1d290                 | LR__2593
1d290     10 15 02 F6 | 	mov	arg02, local02
1d294     12 17 02 F6 | 	mov	arg03, local04
1d298     0F 13 02 F6 | 	mov	arg01, local01
1d29c     01 18 06 F6 | 	mov	arg04, #1
1d2a0     E4 45 B0 FD | 	call	#__system___fmtpad
1d2a4     FD 2E 02 F6 | 	mov	local09, result1
1d2a8     00 2E 56 F2 | 	cmps	local09, #0 wc
1d2ac     17 FB 01 C6 |  if_b	mov	result1, local09
1d2b0     17 27 02 31 |  if_ae	add	local05, local09
1d2b4     13 FB 01 36 |  if_ae	mov	result1, local05
1d2b8                 | LR__2594
1d2b8     A7 F0 03 F6 | 	mov	ptra, fp
1d2bc     B2 00 A0 FD | 	call	#popregs_
1d2c0                 | __system___fmtstr_ret
1d2c0     2D 00 64 FD | 	ret
1d2c4                 | 
1d2c4                 | __system___fmtnum
1d2c4     0B 4A 05 F6 | 	mov	COUNT_, #11
1d2c8     A8 00 A0 FD | 	call	#pushregs_
1d2cc     09 1F 02 F6 | 	mov	local01, arg01
1d2d0     0A 21 02 F6 | 	mov	local02, arg02
1d2d4     0B 23 02 F6 | 	mov	local03, arg03
1d2d8     0C 25 02 F6 | 	mov	local04, arg04
1d2dc     F8 27 02 F6 | 	mov	local05, ptra
1d2e0     13 29 02 F6 | 	mov	local06, local05
1d2e4     00 2A 06 F6 | 	mov	local07, #0
1d2e8     10 2D 02 F6 | 	mov	local08, local02
1d2ec     10 2C 46 F0 | 	shr	local08, #16
1d2f0     3F 2C 06 F5 | 	and	local08, #63
1d2f4     10 2F E2 F8 | 	getbyte	local09, local02, #0
1d2f8     10 31 02 F6 | 	mov	local10, local02
1d2fc     1A 30 46 F0 | 	shr	local10, #26
1d300     03 30 06 F5 | 	and	local10, #3
1d304     18 33 02 F6 | 	mov	local11, local10
1d308     01 2C 56 F2 | 	cmps	local08, #1 wc
1d30c     44 F0 07 F1 | 	add	ptra, #68
1d310     01 2C 86 31 |  if_ae	sub	local08, #1
1d314     41 2E 56 F2 | 	cmps	local09, #65 wc
1d318     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1d31c     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1d320     03 32 0E F2 | 	cmp	local11, #3 wz
1d324     00 32 06 A6 |  if_e	mov	local11, #0
1d328     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1d32c     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1d330     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1d334     00 32 0E F2 | 	cmp	local11, #0 wz
1d338     4C 00 90 AD |  if_e	jmp	#LR__2603
1d33c     01 2A 06 F6 | 	mov	local07, #1
1d340     17 2D 0A F2 | 	cmp	local08, local09 wz
1d344     18 00 90 5D |  if_ne	jmp	#LR__2601
1d348     05 2C 6E FB | 	djnz	local08, #LR__2600
1d34c     0F 13 02 F6 | 	mov	arg01, local01
1d350     10 15 02 F6 | 	mov	arg02, local02
1d354     23 16 06 F6 | 	mov	arg03, #35
1d358     24 FE BF FD | 	call	#__system___fmtchar
1d35c     88 00 90 FD | 	jmp	#LR__2607
1d360                 | LR__2600
1d360                 | LR__2601
1d360     02 32 0E F2 | 	cmp	local11, #2 wz
1d364     14 31 02 A6 |  if_e	mov	local10, local06
1d368     01 28 06 A1 |  if_e	add	local06, #1
1d36c     18 41 48 AC |  if_e	wrbyte	#32, local10
1d370     14 00 90 AD |  if_e	jmp	#LR__2602
1d374     04 32 0E F2 | 	cmp	local11, #4 wz
1d378     14 5B 48 AC |  if_e	wrbyte	#45, local06
1d37c     01 28 06 A1 |  if_e	add	local06, #1
1d380     14 57 48 5C |  if_ne	wrbyte	#43, local06
1d384     01 28 06 51 |  if_ne	add	local06, #1
1d388                 | LR__2602
1d388                 | LR__2603
1d388     14 13 02 F6 | 	mov	arg01, local06
1d38c     11 15 02 F6 | 	mov	arg02, local03
1d390     12 17 02 F6 | 	mov	arg03, local04
1d394     16 19 02 F6 | 	mov	arg04, local08
1d398     00 1A 06 F6 | 	mov	arg05, #0
1d39c     1D 20 2E F4 | 	testbn	local02, #29 wz
1d3a0     01 1A 06 56 |  if_ne	mov	arg05, #1
1d3a4     A8 45 B0 FD | 	call	#__system___uitoa
1d3a8     FD 2A 02 F1 | 	add	local07, result1
1d3ac     17 2B 5A F2 | 	cmps	local07, local09 wcz
1d3b0     24 00 90 ED |  if_be	jmp	#LR__2606
1d3b4     97 0E 48 FB | 	callpa	#(@LR__2605-@LR__2604)>>2,fcache_load_ptr_
1d3b8                 | LR__2604
1d3b8     17 31 02 F6 | 	mov	local10, local09
1d3bc     01 30 56 F2 | 	cmps	local10, #1 wc
1d3c0     01 2E 86 F1 | 	sub	local09, #1
1d3c4     14 31 02 36 |  if_ae	mov	local10, local06
1d3c8     01 28 06 31 |  if_ae	add	local06, #1
1d3cc     18 47 48 3C |  if_ae	wrbyte	#35, local10
1d3d0     E4 FF 9F 3D |  if_ae	jmp	#LR__2604
1d3d4                 | LR__2605
1d3d4     14 01 48 FC | 	wrbyte	#0, local06
1d3d8                 | LR__2606
1d3d8     0F 13 02 F6 | 	mov	arg01, local01
1d3dc     10 15 02 F6 | 	mov	arg02, local02
1d3e0     13 17 02 F6 | 	mov	arg03, local05
1d3e4     F0 FD BF FD | 	call	#__system___fmtstr
1d3e8                 | LR__2607
1d3e8     A7 F0 03 F6 | 	mov	ptra, fp
1d3ec     B2 00 A0 FD | 	call	#popregs_
1d3f0                 | __system___fmtnum_ret
1d3f0     2D 00 64 FD | 	ret
1d3f4                 | 
1d3f4                 | __system___fmtfloat
1d3f4     10 4A 05 F6 | 	mov	COUNT_, #16
1d3f8     A8 00 A0 FD | 	call	#pushregs_
1d3fc     24 F1 07 F1 | 	add	ptra, #292
1d400     04 4E 05 F1 | 	add	fp, #4
1d404     A7 12 62 FC | 	wrlong	arg01, fp
1d408     04 4E 05 F1 | 	add	fp, #4
1d40c     A7 14 62 FC | 	wrlong	arg02, fp
1d410     04 4E 05 F1 | 	add	fp, #4
1d414     A7 16 62 FC | 	wrlong	arg03, fp
1d418     04 4E 05 F1 | 	add	fp, #4
1d41c     A7 18 62 FC | 	wrlong	arg04, fp
1d420     0C 4E 05 F1 | 	add	fp, #12
1d424     A7 14 68 FC | 	wrlong	#10, fp
1d428     08 4E 05 F1 | 	add	fp, #8
1d42c     A7 00 68 FC | 	wrlong	#0, fp
1d430     08 4E 05 F1 | 	add	fp, #8
1d434     A7 00 68 FC | 	wrlong	#0, fp
1d438     08 4E 05 F1 | 	add	fp, #8
1d43c     A7 00 68 FC | 	wrlong	#0, fp
1d440     04 4E 05 F1 | 	add	fp, #4
1d444     A7 04 68 FC | 	wrlong	#2, fp
1d448     04 4E 05 F1 | 	add	fp, #4
1d44c     A7 00 68 FC | 	wrlong	#0, fp
1d450     04 4E 05 F1 | 	add	fp, #4
1d454     A7 00 68 FC | 	wrlong	#0, fp
1d458     04 4E 05 F1 | 	add	fp, #4
1d45c     A7 00 68 FC | 	wrlong	#0, fp
1d460     04 4E 05 F1 | 	add	fp, #4
1d464     A7 00 68 FC | 	wrlong	#0, fp
1d468     18 4E 05 F1 | 	add	fp, #24
1d46c     A7 00 68 FC | 	wrlong	#0, fp
1d470     68 4E 05 F1 | 	add	fp, #104
1d474     A7 1E 02 F6 | 	mov	local01, fp
1d478     08 4E 85 F1 | 	sub	fp, #8
1d47c     A7 1E 62 FC | 	wrlong	local01, fp
1d480     04 4E 05 F1 | 	add	fp, #4
1d484     A7 1E 62 FC | 	wrlong	local01, fp
1d488     BC 4E 85 F1 | 	sub	fp, #188
1d48c     A7 1E 02 FB | 	rdlong	local01, fp
1d490     10 1E 46 F0 | 	shr	local01, #16
1d494     3F 1E 06 F5 | 	and	local01, #63
1d498     B0 4E 05 F1 | 	add	fp, #176
1d49c     A7 1E 62 FC | 	wrlong	local01, fp
1d4a0     B0 4E 85 F1 | 	sub	fp, #176
1d4a4     A7 1E 02 FB | 	rdlong	local01, fp
1d4a8     1C 1E 46 F0 | 	shr	local01, #28
1d4ac     01 1E 06 F5 | 	and	local01, #1
1d4b0     08 4F 05 F1 | 	add	fp, #264
1d4b4     A7 1E 62 FC | 	wrlong	local01, fp
1d4b8     58 4E 85 F1 | 	sub	fp, #88
1d4bc     A7 1E 0A FB | 	rdlong	local01, fp wz
1d4c0     B8 4E 85 F1 | 	sub	fp, #184
1d4c4     3C 00 90 5D |  if_ne	jmp	#LR__2611
1d4c8     10 4E 05 F1 | 	add	fp, #16
1d4cc     A7 1E 02 FB | 	rdlong	local01, fp
1d4d0     10 4E 85 F1 | 	sub	fp, #16
1d4d4     61 1E 0E F2 | 	cmp	local01, #97 wz
1d4d8     18 00 90 5D |  if_ne	jmp	#LR__2610
1d4dc     B8 4E 05 F1 | 	add	fp, #184
1d4e0     A7 1A 68 FC | 	wrlong	#13, fp
1d4e4     84 4E 85 F1 | 	sub	fp, #132
1d4e8     A7 02 68 FC | 	wrlong	#1, fp
1d4ec     34 4E 85 F1 | 	sub	fp, #52
1d4f0     24 00 90 FD | 	jmp	#LR__2612
1d4f4                 | LR__2610
1d4f4     B8 4E 05 F1 | 	add	fp, #184
1d4f8     A7 0C 68 FC | 	wrlong	#6, fp
1d4fc     B8 4E 85 F1 | 	sub	fp, #184
1d500     14 00 90 FD | 	jmp	#LR__2612
1d504                 | LR__2611
1d504     B8 4E 05 F1 | 	add	fp, #184
1d508     A7 1E 02 FB | 	rdlong	local01, fp
1d50c     01 1E 86 F1 | 	sub	local01, #1
1d510     A7 1E 62 FC | 	wrlong	local01, fp
1d514     B8 4E 85 F1 | 	sub	fp, #184
1d518                 | LR__2612
1d518     08 4E 05 F1 | 	add	fp, #8
1d51c     A7 1E 02 FB | 	rdlong	local01, fp
1d520     16 1E 46 F0 | 	shr	local01, #22
1d524     03 1E 06 F5 | 	and	local01, #3
1d528     04 4F 05 F1 | 	add	fp, #260
1d52c     A7 1E 62 FC | 	wrlong	local01, fp
1d530     04 4F 85 F1 | 	sub	fp, #260
1d534     A7 1E 02 FB | 	rdlong	local01, fp
1d538     1D 1E 46 F0 | 	shr	local01, #29
1d53c     01 1E 06 F5 | 	and	local01, #1
1d540     B4 4E 05 F1 | 	add	fp, #180
1d544     A7 1E 62 FC | 	wrlong	local01, fp
1d548     B4 4E 85 F1 | 	sub	fp, #180
1d54c     A7 1E 02 FB | 	rdlong	local01, fp
1d550     0F 1F EA F8 | 	getbyte	local01, local01, #1
1d554     60 4E 05 F1 | 	add	fp, #96
1d558     A7 1E 62 FC | 	wrlong	local01, fp
1d55c     60 4E 85 F1 | 	sub	fp, #96
1d560     A7 1E 02 FB | 	rdlong	local01, fp
1d564     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d568     64 4E 05 F1 | 	add	fp, #100
1d56c     A7 1E 62 FC | 	wrlong	local01, fp
1d570     00 1E 06 F6 | 	mov	local01, #0
1d574     5C 4E 85 F1 | 	sub	fp, #92
1d578     A7 1A 02 FB | 	rdlong	arg05, fp
1d57c     65 1A 0E F2 | 	cmp	arg05, #101 wz
1d580     01 1E 06 A6 |  if_e	mov	local01, #1
1d584     14 4E 05 F1 | 	add	fp, #20
1d588     A7 1E 62 FC | 	wrlong	local01, fp
1d58c     98 4E 05 F1 | 	add	fp, #152
1d590     A7 20 0A FB | 	rdlong	local02, fp wz
1d594     45 1E 06 56 |  if_ne	mov	local01, #69
1d598     65 1E 06 A6 |  if_e	mov	local01, #101
1d59c     8C 4E 85 F1 | 	sub	fp, #140
1d5a0     A7 1E 62 FC | 	wrlong	local01, fp
1d5a4     20 4E 85 F1 | 	sub	fp, #32
1d5a8     A7 1E 02 FB | 	rdlong	local01, fp
1d5ac     10 4E 85 F1 | 	sub	fp, #16
1d5b0     61 1E 0E F2 | 	cmp	local01, #97 wz
1d5b4     4C 00 90 5D |  if_ne	jmp	#LR__2613
1d5b8     24 4E 05 F1 | 	add	fp, #36
1d5bc     A7 02 68 FC | 	wrlong	#1, fp
1d5c0     98 4E 05 F1 | 	add	fp, #152
1d5c4     A7 20 0A FB | 	rdlong	local02, fp wz
1d5c8     50 1E 06 56 |  if_ne	mov	local01, #80
1d5cc     70 1E 06 A6 |  if_e	mov	local01, #112
1d5d0     8C 4E 85 F1 | 	sub	fp, #140
1d5d4     A7 1E 62 FC | 	wrlong	local01, fp
1d5d8     14 4E 85 F1 | 	sub	fp, #20
1d5dc     A7 04 68 FC | 	wrlong	#2, fp
1d5e0     1C 4E 05 F1 | 	add	fp, #28
1d5e4     A7 02 68 FC | 	wrlong	#1, fp
1d5e8     84 4E 05 F1 | 	add	fp, #132
1d5ec     A7 20 0A FB | 	rdlong	local02, fp wz
1d5f0     58 1E 06 56 |  if_ne	mov	local01, #88
1d5f4     78 1E 06 A6 |  if_e	mov	local01, #120
1d5f8     7C 4E 85 F1 | 	sub	fp, #124
1d5fc     A7 1E 62 FC | 	wrlong	local01, fp
1d600     40 4E 85 F1 | 	sub	fp, #64
1d604                 | LR__2613
1d604     10 4E 05 F1 | 	add	fp, #16
1d608     A7 1E 02 FB | 	rdlong	local01, fp
1d60c     10 4E 85 F1 | 	sub	fp, #16
1d610     23 1E 0E F2 | 	cmp	local01, #35 wz
1d614     3C 00 90 5D |  if_ne	jmp	#LR__2616
1d618     48 4E 05 F1 | 	add	fp, #72
1d61c     A7 02 68 FC | 	wrlong	#1, fp
1d620     C8 4E 05 F1 | 	add	fp, #200
1d624     A7 1E 0A FB | 	rdlong	local01, fp wz
1d628     10 4F 85 F1 | 	sub	fp, #272
1d62c     18 00 90 AD |  if_e	jmp	#LR__2614
1d630     10 4E 05 F1 | 	add	fp, #16
1d634     A7 CC 68 FC | 	wrlong	#102, fp
1d638     00 4F 05 F1 | 	add	fp, #256
1d63c     A7 00 68 FC | 	wrlong	#0, fp
1d640     10 4F 85 F1 | 	sub	fp, #272
1d644     0C 00 90 FD | 	jmp	#LR__2615
1d648                 | LR__2614
1d648     10 4F 05 F1 | 	add	fp, #272
1d64c     A7 02 68 FC | 	wrlong	#1, fp
1d650     10 4F 85 F1 | 	sub	fp, #272
1d654                 | LR__2615
1d654                 | LR__2616
1d654     08 4E 05 F1 | 	add	fp, #8
1d658     A7 1E 02 FB | 	rdlong	local01, fp
1d65c     1A 1E 46 F0 | 	shr	local01, #26
1d660     03 1E 06 F5 | 	and	local01, #3
1d664     5C 4E 05 F1 | 	add	fp, #92
1d668     A7 1E 62 FC | 	wrlong	local01, fp
1d66c     58 4E 85 F1 | 	sub	fp, #88
1d670     A7 FA 01 FB | 	rdlong	result1, fp
1d674     0C 4E 85 F1 | 	sub	fp, #12
1d678     1F FA 4D F0 | 	shr	result1, #31 wz
1d67c     20 00 90 AD |  if_e	jmp	#LR__2617
1d680     2C 4E 05 F1 | 	add	fp, #44
1d684     A7 5A 68 FC | 	wrlong	#45, fp
1d688     20 4E 85 F1 | 	sub	fp, #32
1d68c     A7 FA 01 FB | 	rdlong	result1, fp
1d690     1F FA E5 F4 | 	bitnot	result1, #31
1d694     A7 FA 61 FC | 	wrlong	result1, fp
1d698     0C 4E 85 F1 | 	sub	fp, #12
1d69c     3C 00 90 FD | 	jmp	#LR__2619
1d6a0                 | LR__2617
1d6a0     64 4E 05 F1 | 	add	fp, #100
1d6a4     A7 1E 02 FB | 	rdlong	local01, fp
1d6a8     64 4E 85 F1 | 	sub	fp, #100
1d6ac     01 1E 0E F2 | 	cmp	local01, #1 wz
1d6b0     2C 4E 05 A1 |  if_e	add	fp, #44
1d6b4     A7 56 68 AC |  if_e	wrlong	#43, fp
1d6b8     2C 4E 85 A1 |  if_e	sub	fp, #44
1d6bc     1C 00 90 AD |  if_e	jmp	#LR__2618
1d6c0     64 4E 05 F1 | 	add	fp, #100
1d6c4     A7 1E 02 FB | 	rdlong	local01, fp
1d6c8     64 4E 85 F1 | 	sub	fp, #100
1d6cc     02 1E 0E F2 | 	cmp	local01, #2 wz
1d6d0     2C 4E 05 A1 |  if_e	add	fp, #44
1d6d4     A7 40 68 AC |  if_e	wrlong	#32, fp
1d6d8     2C 4E 85 A1 |  if_e	sub	fp, #44
1d6dc                 | LR__2618
1d6dc                 | LR__2619
1d6dc     08 4E 05 F1 | 	add	fp, #8
1d6e0     A7 1E 02 FB | 	rdlong	local01, fp
1d6e4     18 1E 46 F0 | 	shr	local01, #24
1d6e8     03 1E 06 F5 | 	and	local01, #3
1d6ec     3C 4E 05 F1 | 	add	fp, #60
1d6f0     A7 1E 62 FC | 	wrlong	local01, fp
1d6f4     00 1E 06 F6 | 	mov	local01, #0
1d6f8     18 4E 85 F1 | 	sub	fp, #24
1d6fc     A7 22 0A FB | 	rdlong	local03, fp wz
1d700     2C 4E 85 F1 | 	sub	fp, #44
1d704     18 00 90 5D |  if_ne	jmp	#LR__2620
1d708     1C 4E 05 F1 | 	add	fp, #28
1d70c     A7 24 02 FB | 	rdlong	local04, fp
1d710     1C 4E 85 F1 | 	sub	fp, #28
1d714     12 27 02 F6 | 	mov	local05, local04
1d718     0A 26 0E F2 | 	cmp	local05, #10 wz
1d71c     04 00 90 AD |  if_e	jmp	#LR__2621
1d720                 | LR__2620
1d720     01 1E 66 F5 | 	xor	local01, #1
1d724                 | LR__2621
1d724     3C 4E 05 F1 | 	add	fp, #60
1d728     A7 1E 62 FC | 	wrlong	local01, fp
1d72c     3C 4E 85 F1 | 	sub	fp, #60
1d730     00 1E 0E F2 | 	cmp	local01, #0 wz
1d734     0C 01 90 AD |  if_e	jmp	#LR__2623
1d738     44 4E 05 F1 | 	add	fp, #68
1d73c     A7 26 02 FB | 	rdlong	local05, fp
1d740     44 4E 85 F1 | 	sub	fp, #68
1d744     13 23 02 F6 | 	mov	local03, local05
1d748     02 22 0E F2 | 	cmp	local03, #2 wz
1d74c     F4 00 90 5D |  if_ne	jmp	#LR__2623
1d750     0C 4F 05 F1 | 	add	fp, #268
1d754     A7 28 02 FB | 	rdlong	local06, fp
1d758     0C 4F 85 F1 | 	sub	fp, #268
1d75c     14 25 02 F6 | 	mov	local04, local06
1d760     02 24 0E F2 | 	cmp	local04, #2 wz
1d764     DC 00 90 AD |  if_e	jmp	#LR__2623
1d768     C0 4E 05 F1 | 	add	fp, #192
1d76c     A7 12 02 FB | 	rdlong	arg01, fp
1d770     94 4E 85 F1 | 	sub	fp, #148
1d774     A7 14 02 FB | 	rdlong	arg02, fp
1d778     14 4E 05 F1 | 	add	fp, #20
1d77c     A7 16 02 FB | 	rdlong	arg03, fp
1d780     40 4E 85 F1 | 	sub	fp, #64
1d784     30 44 B0 FD | 	call	#__system__emitsign_0434
1d788     14 4F 05 F1 | 	add	fp, #276
1d78c     A7 FA 61 FC | 	wrlong	result1, fp
1d790     14 4F 85 F1 | 	sub	fp, #276
1d794     00 FA 55 F2 | 	cmps	result1, #0 wc
1d798     14 4F 05 C1 |  if_b	add	fp, #276
1d79c     A7 FA 01 CB |  if_b	rdlong	result1, fp
1d7a0     14 4F 85 C1 |  if_b	sub	fp, #276
1d7a4     6C 0B 90 CD |  if_b	jmp	#LR__2673
1d7a8     C0 4E 05 F1 | 	add	fp, #192
1d7ac     A7 1E 02 FB | 	rdlong	local01, fp
1d7b0     54 4E 05 F1 | 	add	fp, #84
1d7b4     A7 26 02 FB | 	rdlong	local05, fp
1d7b8     13 23 02 F6 | 	mov	local03, local05
1d7bc     13 1F 02 F1 | 	add	local01, local05
1d7c0     54 4E 85 F1 | 	sub	fp, #84
1d7c4     A7 1E 62 FC | 	wrlong	local01, fp
1d7c8     58 4E 85 F1 | 	sub	fp, #88
1d7cc     A7 1E 0A FB | 	rdlong	local01, fp wz
1d7d0     68 4E 85 F1 | 	sub	fp, #104
1d7d4     60 00 90 AD |  if_e	jmp	#LR__2622
1d7d8     68 4E 05 F1 | 	add	fp, #104
1d7dc     A7 1E 02 FB | 	rdlong	local01, fp
1d7e0     AC 4E 05 F1 | 	add	fp, #172
1d7e4     A7 22 02 FB | 	rdlong	local03, fp
1d7e8     11 1F 82 F1 | 	sub	local01, local03
1d7ec     AC 4E 85 F1 | 	sub	fp, #172
1d7f0     A7 1E 62 FC | 	wrlong	local01, fp
1d7f4     68 4E 85 F1 | 	sub	fp, #104
1d7f8     00 1E 56 F2 | 	cmps	local01, #0 wc
1d7fc     68 4E 05 C1 |  if_b	add	fp, #104
1d800     A7 00 68 CC |  if_b	wrlong	#0, fp
1d804     68 4E 85 C1 |  if_b	sub	fp, #104
1d808     08 4E 05 F1 | 	add	fp, #8
1d80c     A7 1E 02 FB | 	rdlong	local01, fp
1d810     E8 1E 06 F4 | 	bitl	local01, #232
1d814     A7 1E 62 FC | 	wrlong	local01, fp
1d818     60 4E 05 F1 | 	add	fp, #96
1d81c     A7 26 02 FB | 	rdlong	local05, fp
1d820     13 23 02 F6 | 	mov	local03, local05
1d824     08 22 66 F0 | 	shl	local03, #8
1d828     11 1F 42 F5 | 	or	local01, local03
1d82c     60 4E 85 F1 | 	sub	fp, #96
1d830     A7 1E 62 FC | 	wrlong	local01, fp
1d834     08 4E 85 F1 | 	sub	fp, #8
1d838                 | LR__2622
1d838     3C 4E 05 F1 | 	add	fp, #60
1d83c     A7 00 68 FC | 	wrlong	#0, fp
1d840     3C 4E 85 F1 | 	sub	fp, #60
1d844                 | LR__2623
1d844     0C 4E 05 F1 | 	add	fp, #12
1d848     A7 12 02 FB | 	rdlong	arg01, fp
1d84c     0C 4E 85 F1 | 	sub	fp, #12
1d850     04 1F B0 FD | 	call	#__system____builtin_ilogb
1d854     FF FF 3F FF 
1d858     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1d85c     50 00 90 5D |  if_ne	jmp	#LR__2625
1d860     2C 4E 05 F1 | 	add	fp, #44
1d864     A7 1E 0A FB | 	rdlong	local01, fp wz
1d868     2C 4E 85 F1 | 	sub	fp, #44
1d86c     24 00 90 AD |  if_e	jmp	#LR__2624
1d870     C0 4E 05 F1 | 	add	fp, #192
1d874     A7 20 02 FB | 	rdlong	local02, fp
1d878     10 23 02 F6 | 	mov	local03, local02
1d87c     01 22 06 F1 | 	add	local03, #1
1d880     A7 22 62 FC | 	wrlong	local03, fp
1d884     94 4E 85 F1 | 	sub	fp, #148
1d888     A7 24 02 FB | 	rdlong	local04, fp
1d88c     2C 4E 85 F1 | 	sub	fp, #44
1d890     10 25 42 FC | 	wrbyte	local04, local02
1d894                 | LR__2624
1d894     C0 4E 05 F1 | 	add	fp, #192
1d898     A7 12 02 FB | 	rdlong	arg01, fp
1d89c     C0 4E 85 F1 | 	sub	fp, #192
1d8a0     5C 01 00 FF 
1d8a4     8A 14 06 F6 | 	mov	arg02, ##@LR__4561
1d8a8     E4 E9 BF FD | 	call	#__system____builtin_strcpy
1d8ac     A4 08 90 FD | 	jmp	#LR__2661
1d8b0                 | LR__2625
1d8b0     0C 4E 05 F1 | 	add	fp, #12
1d8b4     A7 20 02 FB | 	rdlong	local02, fp
1d8b8     0C 4E 85 F1 | 	sub	fp, #12
1d8bc     10 13 02 F6 | 	mov	arg01, local02
1d8c0     94 1E B0 FD | 	call	#__system____builtin_ilogb
1d8c4     00 00 40 FF 
1d8c8     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1d8cc     50 00 90 5D |  if_ne	jmp	#LR__2627
1d8d0     2C 4E 05 F1 | 	add	fp, #44
1d8d4     A7 1E 0A FB | 	rdlong	local01, fp wz
1d8d8     2C 4E 85 F1 | 	sub	fp, #44
1d8dc     24 00 90 AD |  if_e	jmp	#LR__2626
1d8e0     C0 4E 05 F1 | 	add	fp, #192
1d8e4     A7 20 02 FB | 	rdlong	local02, fp
1d8e8     10 23 02 F6 | 	mov	local03, local02
1d8ec     01 22 06 F1 | 	add	local03, #1
1d8f0     A7 22 62 FC | 	wrlong	local03, fp
1d8f4     94 4E 85 F1 | 	sub	fp, #148
1d8f8     A7 24 02 FB | 	rdlong	local04, fp
1d8fc     2C 4E 85 F1 | 	sub	fp, #44
1d900     10 25 42 FC | 	wrbyte	local04, local02
1d904                 | LR__2626
1d904     C0 4E 05 F1 | 	add	fp, #192
1d908     A7 12 02 FB | 	rdlong	arg01, fp
1d90c     C0 4E 85 F1 | 	sub	fp, #192
1d910     5C 01 00 FF 
1d914     8E 14 06 F6 | 	mov	arg02, ##@LR__4562
1d918     74 E9 BF FD | 	call	#__system____builtin_strcpy
1d91c     34 08 90 FD | 	jmp	#LR__2661
1d920                 | LR__2627
1d920     10 4E 05 F1 | 	add	fp, #16
1d924     A7 1E 02 FB | 	rdlong	local01, fp
1d928     10 4E 85 F1 | 	sub	fp, #16
1d92c     67 1E 0E F2 | 	cmp	local01, #103 wz
1d930     10 4E 05 51 |  if_ne	add	fp, #16
1d934     A7 22 02 5B |  if_ne	rdlong	local03, fp
1d938     10 4E 85 51 |  if_ne	sub	fp, #16
1d93c     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1d940     94 01 90 5D |  if_ne	jmp	#LR__2632
1d944     0C 4E 05 F1 | 	add	fp, #12
1d948     A7 12 02 FB | 	rdlong	arg01, fp
1d94c     08 4E 05 F1 | 	add	fp, #8
1d950     A7 14 02 F6 | 	mov	arg02, fp
1d954     0C 4E 05 F1 | 	add	fp, #12
1d958     A7 16 02 F6 | 	mov	arg03, fp
1d95c     98 4E 05 F1 | 	add	fp, #152
1d960     A7 18 02 FB | 	rdlong	arg04, fp
1d964     9C 4E 85 F1 | 	sub	fp, #156
1d968     A7 1A 02 FB | 	rdlong	arg05, fp
1d96c     1C 4E 85 F1 | 	sub	fp, #28
1d970     50 40 B0 FD | 	call	#__system__disassemble_0432
1d974     10 4E 05 F1 | 	add	fp, #16
1d978     A7 1E 02 FB | 	rdlong	local01, fp
1d97c     10 4E 85 F1 | 	sub	fp, #16
1d980     23 1E 0E F2 | 	cmp	local01, #35 wz
1d984     A0 00 90 5D |  if_ne	jmp	#LR__2629
1d988     20 4E 05 F1 | 	add	fp, #32
1d98c     A7 1E 02 FB | 	rdlong	local01, fp
1d990     98 4E 05 F1 | 	add	fp, #152
1d994     A7 22 02 FB | 	rdlong	local03, fp
1d998     B8 4E 85 F1 | 	sub	fp, #184
1d99c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1d9a0     24 4E 05 11 |  if_a	add	fp, #36
1d9a4     A7 02 68 1C |  if_a	wrlong	#1, fp
1d9a8     24 4E 85 11 |  if_a	sub	fp, #36
1d9ac     A4 01 90 1D |  if_a	jmp	#LR__2635
1d9b0     20 4E 05 F1 | 	add	fp, #32
1d9b4     A7 1E 02 FB | 	rdlong	local01, fp
1d9b8     20 4E 85 F1 | 	sub	fp, #32
1d9bc     00 1E 56 F2 | 	cmps	local01, #0 wc
1d9c0     2C 00 90 3D |  if_ae	jmp	#LR__2628
1d9c4     B8 4E 05 F1 | 	add	fp, #184
1d9c8     A7 1E 02 FB | 	rdlong	local01, fp
1d9cc     0F 1F 62 F6 | 	neg	local01, local01
1d9d0     98 4E 85 F1 | 	sub	fp, #152
1d9d4     A7 22 02 FB | 	rdlong	local03, fp
1d9d8     20 4E 85 F1 | 	sub	fp, #32
1d9dc     0F 23 5A F2 | 	cmps	local03, local01 wcz
1d9e0     24 4E 05 E1 |  if_be	add	fp, #36
1d9e4     A7 02 68 EC |  if_be	wrlong	#1, fp
1d9e8     24 4E 85 E1 |  if_be	sub	fp, #36
1d9ec     64 01 90 FD | 	jmp	#LR__2635
1d9f0                 | LR__2628
1d9f0     20 4E 05 F1 | 	add	fp, #32
1d9f4     A7 1E 02 FB | 	rdlong	local01, fp
1d9f8     20 4E 85 F1 | 	sub	fp, #32
1d9fc     01 1E 56 F2 | 	cmps	local01, #1 wc
1da00     50 01 90 CD |  if_b	jmp	#LR__2635
1da04     B8 4E 05 F1 | 	add	fp, #184
1da08     A7 1E 02 FB | 	rdlong	local01, fp
1da0c     98 4E 85 F1 | 	sub	fp, #152
1da10     A7 22 02 FB | 	rdlong	local03, fp
1da14     11 1F 82 F1 | 	sub	local01, local03
1da18     98 4E 05 F1 | 	add	fp, #152
1da1c     A7 1E 62 FC | 	wrlong	local01, fp
1da20     B8 4E 85 F1 | 	sub	fp, #184
1da24     2C 01 90 FD | 	jmp	#LR__2635
1da28                 | LR__2629
1da28     00 1E 06 F6 | 	mov	local01, #0
1da2c     08 4E 05 F1 | 	add	fp, #8
1da30     A7 20 02 FB | 	rdlong	local02, fp
1da34     1C 20 46 F0 | 	shr	local02, #28
1da38     01 20 0E F5 | 	and	local02, #1 wz
1da3c     01 1E 06 A6 |  if_e	mov	local01, #1
1da40     2C 4E 05 F1 | 	add	fp, #44
1da44     A7 1E 62 FC | 	wrlong	local01, fp
1da48     14 4E 85 F1 | 	sub	fp, #20
1da4c     A7 1E 02 FB | 	rdlong	local01, fp
1da50     98 4E 05 F1 | 	add	fp, #152
1da54     A7 22 02 FB | 	rdlong	local03, fp
1da58     B8 4E 85 F1 | 	sub	fp, #184
1da5c     11 1F 52 F2 | 	cmps	local01, local03 wc
1da60     18 00 90 3D |  if_ae	jmp	#LR__2630
1da64     20 4E 05 F1 | 	add	fp, #32
1da68     A7 24 02 FB | 	rdlong	local04, fp
1da6c     20 4E 85 F1 | 	sub	fp, #32
1da70     FF FF 7F FF 
1da74     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1da78     10 00 90 3D |  if_ae	jmp	#LR__2631
1da7c                 | LR__2630
1da7c     24 4E 05 F1 | 	add	fp, #36
1da80     A7 02 68 FC | 	wrlong	#1, fp
1da84     24 4E 85 F1 | 	sub	fp, #36
1da88     C8 00 90 FD | 	jmp	#LR__2635
1da8c                 | LR__2631
1da8c     B8 4E 05 F1 | 	add	fp, #184
1da90     A7 24 02 FB | 	rdlong	local04, fp
1da94     98 4E 85 F1 | 	sub	fp, #152
1da98     A7 22 02 FB | 	rdlong	local03, fp
1da9c     11 25 82 F1 | 	sub	local04, local03
1daa0     98 4E 05 F1 | 	add	fp, #152
1daa4     A7 24 62 FC | 	wrlong	local04, fp
1daa8     AC 4E 85 F1 | 	sub	fp, #172
1daac     A7 12 02 FB | 	rdlong	arg01, fp
1dab0     08 4E 05 F1 | 	add	fp, #8
1dab4     A7 14 02 F6 | 	mov	arg02, fp
1dab8     0C 4E 05 F1 | 	add	fp, #12
1dabc     A7 16 02 F6 | 	mov	arg03, fp
1dac0     12 19 62 F6 | 	neg	arg04, local04
1dac4     04 4E 85 F1 | 	sub	fp, #4
1dac8     A7 1A 02 FB | 	rdlong	arg05, fp
1dacc     1C 4E 85 F1 | 	sub	fp, #28
1dad0     F0 3E B0 FD | 	call	#__system__disassemble_0432
1dad4     7C 00 90 FD | 	jmp	#LR__2635
1dad8                 | LR__2632
1dad8     24 4E 05 F1 | 	add	fp, #36
1dadc     A7 1E 0A FB | 	rdlong	local01, fp wz
1dae0     24 4E 85 F1 | 	sub	fp, #36
1dae4     34 00 90 AD |  if_e	jmp	#LR__2633
1dae8     0C 4E 05 F1 | 	add	fp, #12
1daec     A7 12 02 FB | 	rdlong	arg01, fp
1daf0     08 4E 05 F1 | 	add	fp, #8
1daf4     A7 14 02 F6 | 	mov	arg02, fp
1daf8     0C 4E 05 F1 | 	add	fp, #12
1dafc     A7 16 02 F6 | 	mov	arg03, fp
1db00     98 4E 05 F1 | 	add	fp, #152
1db04     A7 18 02 FB | 	rdlong	arg04, fp
1db08     9C 4E 85 F1 | 	sub	fp, #156
1db0c     A7 1A 02 FB | 	rdlong	arg05, fp
1db10     1C 4E 85 F1 | 	sub	fp, #28
1db14     AC 3E B0 FD | 	call	#__system__disassemble_0432
1db18     38 00 90 FD | 	jmp	#LR__2634
1db1c                 | LR__2633
1db1c     0C 4E 05 F1 | 	add	fp, #12
1db20     A7 12 02 FB | 	rdlong	arg01, fp
1db24     08 4E 05 F1 | 	add	fp, #8
1db28     A7 14 02 F6 | 	mov	arg02, fp
1db2c     0C 4E 05 F1 | 	add	fp, #12
1db30     A7 16 02 F6 | 	mov	arg03, fp
1db34     98 4E 05 F1 | 	add	fp, #152
1db38     A7 24 02 FB | 	rdlong	local04, fp
1db3c     01 24 06 F1 | 	add	local04, #1
1db40     12 19 62 F6 | 	neg	arg04, local04
1db44     9C 4E 85 F1 | 	sub	fp, #156
1db48     A7 1A 02 FB | 	rdlong	arg05, fp
1db4c     1C 4E 85 F1 | 	sub	fp, #28
1db50     70 3E B0 FD | 	call	#__system__disassemble_0432
1db54                 | LR__2634
1db54                 | LR__2635
1db54     1C 4E 05 F1 | 	add	fp, #28
1db58     A7 1E 02 FB | 	rdlong	local01, fp
1db5c     1C 4E 85 F1 | 	sub	fp, #28
1db60     02 1E 0E F2 | 	cmp	local01, #2 wz
1db64     4C 00 90 5D |  if_ne	jmp	#LR__2638
1db68     1C 4E 05 F1 | 	add	fp, #28
1db6c     A7 20 68 FC | 	wrlong	#16, fp
1db70     1C 4E 85 F1 | 	sub	fp, #28
1db74                 | LR__2636
1db74     14 4E 05 F1 | 	add	fp, #20
1db78     A7 1E 0A FB | 	rdlong	local01, fp wz
1db7c     14 4E 85 F1 | 	sub	fp, #20
1db80     30 00 90 AD |  if_e	jmp	#LR__2637
1db84     14 4E 05 F1 | 	add	fp, #20
1db88     A7 22 02 FB | 	rdlong	local03, fp
1db8c     14 4E 85 F1 | 	sub	fp, #20
1db90     00 80 00 FF 
1db94     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1db98     18 00 90 3D |  if_ae	jmp	#LR__2637
1db9c     14 4E 05 F1 | 	add	fp, #20
1dba0     A7 1E 02 FB | 	rdlong	local01, fp
1dba4     01 1E 66 F0 | 	shl	local01, #1
1dba8     A7 1E 62 FC | 	wrlong	local01, fp
1dbac     14 4E 85 F1 | 	sub	fp, #20
1dbb0     C0 FF 9F FD | 	jmp	#LR__2636
1dbb4                 | LR__2637
1dbb4                 | LR__2638
1dbb4     70 4E 05 F1 | 	add	fp, #112
1dbb8     A7 12 02 F6 | 	mov	arg01, fp
1dbbc     5C 4E 85 F1 | 	sub	fp, #92
1dbc0     A7 14 02 FB | 	rdlong	arg02, fp
1dbc4     08 4E 05 F1 | 	add	fp, #8
1dbc8     A7 16 02 FB | 	rdlong	arg03, fp
1dbcc     A0 4E 05 F1 | 	add	fp, #160
1dbd0     A7 1A 02 FB | 	rdlong	arg05, fp
1dbd4     BC 4E 85 F1 | 	sub	fp, #188
1dbd8     01 18 06 F6 | 	mov	arg04, #1
1dbdc     70 3D B0 FD | 	call	#__system___uitoa
1dbe0     58 4E 05 F1 | 	add	fp, #88
1dbe4     A7 FA 61 FC | 	wrlong	result1, fp
1dbe8     38 4E 85 F1 | 	sub	fp, #56
1dbec     A7 1E 02 FB | 	rdlong	local01, fp
1dbf0     20 4E 85 F1 | 	sub	fp, #32
1dbf4     00 1E 56 F2 | 	cmps	local01, #0 wc
1dbf8     50 00 90 3D |  if_ae	jmp	#LR__2639
1dbfc     60 4E 05 F1 | 	add	fp, #96
1dc00     A7 5A 68 FC | 	wrlong	#45, fp
1dc04     50 4E 05 F1 | 	add	fp, #80
1dc08     A7 12 02 F6 | 	mov	arg01, fp
1dc0c     90 4E 85 F1 | 	sub	fp, #144
1dc10     A7 22 02 FB | 	rdlong	local03, fp
1dc14     11 15 62 F6 | 	neg	arg02, local03
1dc18     18 4E 05 F1 | 	add	fp, #24
1dc1c     A7 18 02 FB | 	rdlong	arg04, fp
1dc20     84 4E 05 F1 | 	add	fp, #132
1dc24     A7 28 02 FB | 	rdlong	local06, fp
1dc28     BC 4E 85 F1 | 	sub	fp, #188
1dc2c     14 25 02 F6 | 	mov	local04, local06
1dc30     0A 16 06 F6 | 	mov	arg03, #10
1dc34     12 1B 02 F6 | 	mov	arg05, local04
1dc38     14 3D B0 FD | 	call	#__system___uitoa
1dc3c     5C 4E 05 F1 | 	add	fp, #92
1dc40     A7 FA 61 FC | 	wrlong	result1, fp
1dc44     5C 4E 85 F1 | 	sub	fp, #92
1dc48     48 00 90 FD | 	jmp	#LR__2640
1dc4c                 | LR__2639
1dc4c     60 4E 05 F1 | 	add	fp, #96
1dc50     A7 56 68 FC | 	wrlong	#43, fp
1dc54     50 4E 05 F1 | 	add	fp, #80
1dc58     A7 12 02 F6 | 	mov	arg01, fp
1dc5c     90 4E 85 F1 | 	sub	fp, #144
1dc60     A7 14 02 FB | 	rdlong	arg02, fp
1dc64     18 4E 05 F1 | 	add	fp, #24
1dc68     A7 18 02 FB | 	rdlong	arg04, fp
1dc6c     84 4E 05 F1 | 	add	fp, #132
1dc70     A7 28 02 FB | 	rdlong	local06, fp
1dc74     BC 4E 85 F1 | 	sub	fp, #188
1dc78     14 25 02 F6 | 	mov	local04, local06
1dc7c     0A 16 06 F6 | 	mov	arg03, #10
1dc80     12 1B 02 F6 | 	mov	arg05, local04
1dc84     C8 3C B0 FD | 	call	#__system___uitoa
1dc88     5C 4E 05 F1 | 	add	fp, #92
1dc8c     A7 FA 61 FC | 	wrlong	result1, fp
1dc90     5C 4E 85 F1 | 	sub	fp, #92
1dc94                 | LR__2640
1dc94     24 4E 05 F1 | 	add	fp, #36
1dc98     A7 1E 0A FB | 	rdlong	local01, fp wz
1dc9c     24 4E 85 F1 | 	sub	fp, #36
1dca0     2C 00 90 AD |  if_e	jmp	#LR__2641
1dca4     50 4E 05 F1 | 	add	fp, #80
1dca8     A7 00 68 FC | 	wrlong	#0, fp
1dcac     04 4E 85 F1 | 	sub	fp, #4
1dcb0     A7 00 68 FC | 	wrlong	#0, fp
1dcb4     6C 4E 05 F1 | 	add	fp, #108
1dcb8     A7 1E 02 FB | 	rdlong	local01, fp
1dcbc     01 1E 06 F1 | 	add	local01, #1
1dcc0     64 4E 85 F1 | 	sub	fp, #100
1dcc4     A7 1E 62 FC | 	wrlong	local01, fp
1dcc8     54 4E 85 F1 | 	sub	fp, #84
1dccc     88 00 90 FD | 	jmp	#LR__2644
1dcd0                 | LR__2641
1dcd0     20 4E 05 F1 | 	add	fp, #32
1dcd4     A7 1E 02 FB | 	rdlong	local01, fp
1dcd8     20 4E 85 F1 | 	sub	fp, #32
1dcdc     00 1E 56 F2 | 	cmps	local01, #0 wc
1dce0     40 00 90 3D |  if_ae	jmp	#LR__2642
1dce4     20 4E 05 F1 | 	add	fp, #32
1dce8     A7 20 02 FB | 	rdlong	local02, fp
1dcec     30 4E 05 F1 | 	add	fp, #48
1dcf0     A7 20 62 FC | 	wrlong	local02, fp
1dcf4     04 4E 85 F1 | 	sub	fp, #4
1dcf8     A7 20 62 FC | 	wrlong	local02, fp
1dcfc     2C 4E 85 F1 | 	sub	fp, #44
1dd00     A7 1E 02 FB | 	rdlong	local01, fp
1dd04     98 4E 05 F1 | 	add	fp, #152
1dd08     A7 22 02 FB | 	rdlong	local03, fp
1dd0c     11 1F 02 F1 | 	add	local01, local03
1dd10     01 1E 06 F1 | 	add	local01, #1
1dd14     64 4E 85 F1 | 	sub	fp, #100
1dd18     A7 1E 62 FC | 	wrlong	local01, fp
1dd1c     54 4E 85 F1 | 	sub	fp, #84
1dd20     34 00 90 FD | 	jmp	#LR__2643
1dd24                 | LR__2642
1dd24     4C 4E 05 F1 | 	add	fp, #76
1dd28     A7 00 68 FC | 	wrlong	#0, fp
1dd2c     2C 4E 85 F1 | 	sub	fp, #44
1dd30     A7 1E 02 FB | 	rdlong	local01, fp
1dd34     30 4E 05 F1 | 	add	fp, #48
1dd38     A7 1E 62 FC | 	wrlong	local01, fp
1dd3c     68 4E 05 F1 | 	add	fp, #104
1dd40     A7 22 02 FB | 	rdlong	local03, fp
1dd44     11 1F 02 F1 | 	add	local01, local03
1dd48     01 1E 06 F1 | 	add	local01, #1
1dd4c     64 4E 85 F1 | 	sub	fp, #100
1dd50     A7 1E 62 FC | 	wrlong	local01, fp
1dd54     54 4E 85 F1 | 	sub	fp, #84
1dd58                 | LR__2643
1dd58                 | LR__2644
1dd58     54 4E 05 F1 | 	add	fp, #84
1dd5c     A7 1E 02 FB | 	rdlong	local01, fp
1dd60     08 4E 85 F1 | 	sub	fp, #8
1dd64     A7 22 02 FB | 	rdlong	local03, fp
1dd68     11 1F 82 F1 | 	sub	local01, local03
1dd6c     01 1E 06 F1 | 	add	local01, #1
1dd70     24 4E 85 F1 | 	sub	fp, #36
1dd74     A7 1E 62 FC | 	wrlong	local01, fp
1dd78     04 4E 05 F1 | 	add	fp, #4
1dd7c     A7 1E 0A FB | 	rdlong	local01, fp wz
1dd80     2C 4E 85 F1 | 	sub	fp, #44
1dd84     28 4E 05 51 |  if_ne	add	fp, #40
1dd88     A7 22 02 5B |  if_ne	rdlong	local03, fp
1dd8c     01 22 06 51 |  if_ne	add	local03, #1
1dd90     A7 22 62 5C |  if_ne	wrlong	local03, fp
1dd94     28 4E 85 51 |  if_ne	sub	fp, #40
1dd98     1C 4E 05 F1 | 	add	fp, #28
1dd9c     A7 1E 02 FB | 	rdlong	local01, fp
1dda0     1C 4E 85 F1 | 	sub	fp, #28
1dda4     10 1E 0E F2 | 	cmp	local01, #16 wz
1dda8     28 4E 05 A1 |  if_e	add	fp, #40
1ddac     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ddb0     02 1E 06 A1 |  if_e	add	local01, #2
1ddb4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1ddb8     28 4E 85 A1 |  if_e	sub	fp, #40
1ddbc     24 4E 05 F1 | 	add	fp, #36
1ddc0     A7 1E 0A FB | 	rdlong	local01, fp wz
1ddc4     24 4E 85 F1 | 	sub	fp, #36
1ddc8     28 00 90 AD |  if_e	jmp	#LR__2645
1ddcc     28 4E 05 F1 | 	add	fp, #40
1ddd0     A7 1E 02 FB | 	rdlong	local01, fp
1ddd4     02 22 06 F6 | 	mov	local03, #2
1ddd8     34 4E 05 F1 | 	add	fp, #52
1dddc     A7 26 02 FB | 	rdlong	local05, fp
1dde0     13 23 02 F1 | 	add	local03, local05
1dde4     11 1F 02 F1 | 	add	local01, local03
1dde8     34 4E 85 F1 | 	sub	fp, #52
1ddec     A7 1E 62 FC | 	wrlong	local01, fp
1ddf0     28 4E 85 F1 | 	sub	fp, #40
1ddf4                 | LR__2645
1ddf4     28 4E 05 F1 | 	add	fp, #40
1ddf8     A7 1E 02 FB | 	rdlong	local01, fp
1ddfc     28 4E 85 F1 | 	sub	fp, #40
1de00     41 1E 56 F2 | 	cmps	local01, #65 wc
1de04     01 FA 65 36 |  if_ae	neg	result1, #1
1de08     08 05 90 3D |  if_ae	jmp	#LR__2673
1de0c     3C 4E 05 F1 | 	add	fp, #60
1de10     A7 1E 0A FB | 	rdlong	local01, fp wz
1de14     3C 4E 85 F1 | 	sub	fp, #60
1de18     60 00 90 AD |  if_e	jmp	#LR__2646
1de1c     C0 4E 05 F1 | 	add	fp, #192
1de20     A7 12 02 FB | 	rdlong	arg01, fp
1de24     94 4E 85 F1 | 	sub	fp, #148
1de28     A7 14 02 FB | 	rdlong	arg02, fp
1de2c     14 4E 05 F1 | 	add	fp, #20
1de30     A7 16 02 FB | 	rdlong	arg03, fp
1de34     40 4E 85 F1 | 	sub	fp, #64
1de38     7C 3D B0 FD | 	call	#__system__emitsign_0434
1de3c     18 4F 05 F1 | 	add	fp, #280
1de40     A7 FA 61 FC | 	wrlong	result1, fp
1de44     18 4F 85 F1 | 	sub	fp, #280
1de48     00 FA 55 F2 | 	cmps	result1, #0 wc
1de4c     18 4F 05 C1 |  if_b	add	fp, #280
1de50     A7 FA 01 CB |  if_b	rdlong	result1, fp
1de54     18 4F 85 C1 |  if_b	sub	fp, #280
1de58     B8 04 90 CD |  if_b	jmp	#LR__2673
1de5c     C0 4E 05 F1 | 	add	fp, #192
1de60     A7 1E 02 FB | 	rdlong	local01, fp
1de64     58 4E 05 F1 | 	add	fp, #88
1de68     A7 22 02 FB | 	rdlong	local03, fp
1de6c     11 1F 02 F1 | 	add	local01, local03
1de70     58 4E 85 F1 | 	sub	fp, #88
1de74     A7 1E 62 FC | 	wrlong	local01, fp
1de78     C0 4E 85 F1 | 	sub	fp, #192
1de7c                 | LR__2646
1de7c     4C 4E 05 F1 | 	add	fp, #76
1de80     A7 1E 02 FB | 	rdlong	local01, fp
1de84     34 4E 85 F1 | 	sub	fp, #52
1de88     A7 1E 62 FC | 	wrlong	local01, fp
1de8c     18 4E 85 F1 | 	sub	fp, #24
1de90     97 9E 48 FB | 	callpa	#(@LR__2652-@LR__2647)>>2,fcache_load_ptr_
1de94                 | LR__2647
1de94     18 4E 05 F1 | 	add	fp, #24
1de98     A7 20 02 FB | 	rdlong	local02, fp
1de9c     3C 4E 05 F1 | 	add	fp, #60
1dea0     A7 26 02 FB | 	rdlong	local05, fp
1dea4     54 4E 85 F1 | 	sub	fp, #84
1dea8     13 21 52 F2 | 	cmps	local02, local05 wc
1deac     20 01 90 3D |  if_ae	jmp	#LR__2653
1deb0     18 4E 05 F1 | 	add	fp, #24
1deb4     A7 28 02 FB | 	rdlong	local06, fp
1deb8     18 4E 85 F1 | 	sub	fp, #24
1debc     00 28 56 F2 | 	cmps	local06, #0 wc
1dec0     58 00 90 CD |  if_b	jmp	#LR__2648
1dec4     18 4E 05 F1 | 	add	fp, #24
1dec8     A7 28 02 FB | 	rdlong	local06, fp
1decc     40 4E 05 F1 | 	add	fp, #64
1ded0     A7 2A 02 FB | 	rdlong	local07, fp
1ded4     58 4E 85 F1 | 	sub	fp, #88
1ded8     15 29 52 F2 | 	cmps	local06, local07 wc
1dedc     3C 00 90 3D |  if_ae	jmp	#LR__2648
1dee0     C0 4E 05 F1 | 	add	fp, #192
1dee4     A7 2C 02 FB | 	rdlong	local08, fp
1dee8     16 2B 02 F6 | 	mov	local07, local08
1deec     01 2A 06 F1 | 	add	local07, #1
1def0     A7 2A 62 FC | 	wrlong	local07, fp
1def4     A8 4E 85 F1 | 	sub	fp, #168
1def8     A7 2A 02 FB | 	rdlong	local07, fp
1defc     15 2F 02 F6 | 	mov	local09, local07
1df00     58 4E 05 F1 | 	add	fp, #88
1df04     A7 30 02 F6 | 	mov	local10, fp
1df08     A7 2E 02 F1 | 	add	local09, fp
1df0c     17 33 C2 FA | 	rdbyte	local11, local09
1df10     16 33 42 FC | 	wrbyte	local11, local08
1df14     70 4E 85 F1 | 	sub	fp, #112
1df18     20 00 90 FD | 	jmp	#LR__2649
1df1c                 | LR__2648
1df1c     C0 4E 05 F1 | 	add	fp, #192
1df20     A7 2C 02 FB | 	rdlong	local08, fp
1df24     16 2F 02 F6 | 	mov	local09, local08
1df28     01 2E 06 F1 | 	add	local09, #1
1df2c     A7 2E 62 FC | 	wrlong	local09, fp
1df30     C0 4E 85 F1 | 	sub	fp, #192
1df34     30 2E 06 F6 | 	mov	local09, #48
1df38     16 61 48 FC | 	wrbyte	#48, local08
1df3c                 | LR__2649
1df3c     18 4E 05 F1 | 	add	fp, #24
1df40     A7 28 02 FB | 	rdlong	local06, fp
1df44     38 4E 05 F1 | 	add	fp, #56
1df48     A7 34 02 FB | 	rdlong	local12, fp
1df4c     50 4E 85 F1 | 	sub	fp, #80
1df50     1A 29 0A F2 | 	cmp	local06, local12 wz
1df54     5C 00 90 5D |  if_ne	jmp	#LR__2651
1df58     10 4F 05 F1 | 	add	fp, #272
1df5c     A7 2A 02 FB | 	rdlong	local07, fp
1df60     10 4F 85 F1 | 	sub	fp, #272
1df64     15 2F 0A F6 | 	mov	local09, local07 wz
1df68     28 00 90 5D |  if_ne	jmp	#LR__2650
1df6c     54 4E 05 F1 | 	add	fp, #84
1df70     A7 32 02 FB | 	rdlong	local11, fp
1df74     19 31 02 F6 | 	mov	local10, local11
1df78     01 30 86 F1 | 	sub	local10, #1
1df7c     3C 4E 85 F1 | 	sub	fp, #60
1df80     A7 36 02 FB | 	rdlong	local13, fp
1df84     18 4E 85 F1 | 	sub	fp, #24
1df88     1B 39 02 F6 | 	mov	local14, local13
1df8c     18 39 52 F2 | 	cmps	local14, local10 wc
1df90     20 00 90 3D |  if_ae	jmp	#LR__2651
1df94                 | LR__2650
1df94     C0 4E 05 F1 | 	add	fp, #192
1df98     A7 2C 02 FB | 	rdlong	local08, fp
1df9c     16 35 02 F6 | 	mov	local12, local08
1dfa0     01 34 06 F1 | 	add	local12, #1
1dfa4     A7 34 62 FC | 	wrlong	local12, fp
1dfa8     C0 4E 85 F1 | 	sub	fp, #192
1dfac     2E 2E 06 F6 | 	mov	local09, #46
1dfb0     16 5D 48 FC | 	wrbyte	#46, local08
1dfb4                 | LR__2651
1dfb4     18 4E 05 F1 | 	add	fp, #24
1dfb8     A7 3A 02 FB | 	rdlong	local15, fp
1dfbc     1D 35 02 F6 | 	mov	local12, local15
1dfc0     01 34 06 F1 | 	add	local12, #1
1dfc4     A7 34 62 FC | 	wrlong	local12, fp
1dfc8     18 4E 85 F1 | 	sub	fp, #24
1dfcc     C4 FE 9F FD | 	jmp	#LR__2647
1dfd0                 | LR__2652
1dfd0                 | LR__2653
1dfd0     34 4E 05 F1 | 	add	fp, #52
1dfd4     A7 1E 0A FB | 	rdlong	local01, fp wz
1dfd8     34 4E 85 F1 | 	sub	fp, #52
1dfdc     A0 00 90 AD |  if_e	jmp	#LR__2657
1dfe0     C0 4E 05 F1 | 	add	fp, #192
1dfe4     A7 1E 02 FB | 	rdlong	local01, fp
1dfe8     01 1E 86 F1 | 	sub	local01, #1
1dfec     A7 1E 62 FC | 	wrlong	local01, fp
1dff0     C0 4E 85 F1 | 	sub	fp, #192
1dff4     97 26 48 FB | 	callpa	#(@LR__2655-@LR__2654)>>2,fcache_load_ptr_
1dff8                 | LR__2654
1dff8     C0 4E 05 F1 | 	add	fp, #192
1dffc     A7 1E 02 FB | 	rdlong	local01, fp
1e000     04 4E 05 F1 | 	add	fp, #4
1e004     A7 22 02 FB | 	rdlong	local03, fp
1e008     C4 4E 85 F1 | 	sub	fp, #196
1e00c     11 1F 5A F2 | 	cmps	local01, local03 wcz
1e010     30 00 90 ED |  if_be	jmp	#LR__2656
1e014     C0 4E 05 F1 | 	add	fp, #192
1e018     A7 28 02 FB | 	rdlong	local06, fp
1e01c     C0 4E 85 F1 | 	sub	fp, #192
1e020     14 25 C2 FA | 	rdbyte	local04, local06
1e024     30 24 0E F2 | 	cmp	local04, #48 wz
1e028     18 00 90 5D |  if_ne	jmp	#LR__2656
1e02c     C0 4E 05 F1 | 	add	fp, #192
1e030     A7 1E 02 FB | 	rdlong	local01, fp
1e034     01 1E 86 F1 | 	sub	local01, #1
1e038     A7 1E 62 FC | 	wrlong	local01, fp
1e03c     C0 4E 85 F1 | 	sub	fp, #192
1e040     B4 FF 9F FD | 	jmp	#LR__2654
1e044                 | LR__2655
1e044                 | LR__2656
1e044     C0 4E 05 F1 | 	add	fp, #192
1e048     A7 20 02 FB | 	rdlong	local02, fp
1e04c     C0 4E 85 F1 | 	sub	fp, #192
1e050     10 1F C2 FA | 	rdbyte	local01, local02
1e054     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e058     C0 4E 05 A1 |  if_e	add	fp, #192
1e05c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1e060     01 1E 86 A1 |  if_e	sub	local01, #1
1e064     A7 1E 62 AC |  if_e	wrlong	local01, fp
1e068     C0 4E 85 A1 |  if_e	sub	fp, #192
1e06c     C0 4E 05 F1 | 	add	fp, #192
1e070     A7 22 02 FB | 	rdlong	local03, fp
1e074     01 22 06 F1 | 	add	local03, #1
1e078     A7 22 62 FC | 	wrlong	local03, fp
1e07c     C0 4E 85 F1 | 	sub	fp, #192
1e080                 | LR__2657
1e080     24 4E 05 F1 | 	add	fp, #36
1e084     A7 1E 0A FB | 	rdlong	local01, fp wz
1e088     24 4E 85 F1 | 	sub	fp, #36
1e08c     B4 00 90 AD |  if_e	jmp	#LR__2660
1e090     C0 4E 05 F1 | 	add	fp, #192
1e094     A7 20 02 FB | 	rdlong	local02, fp
1e098     10 23 02 F6 | 	mov	local03, local02
1e09c     01 22 06 F1 | 	add	local03, #1
1e0a0     A7 22 62 FC | 	wrlong	local03, fp
1e0a4     90 4E 85 F1 | 	sub	fp, #144
1e0a8     A7 24 02 FB | 	rdlong	local04, fp
1e0ac     10 25 42 FC | 	wrbyte	local04, local02
1e0b0     90 4E 05 F1 | 	add	fp, #144
1e0b4     A7 20 02 FB | 	rdlong	local02, fp
1e0b8     10 23 02 F6 | 	mov	local03, local02
1e0bc     01 22 06 F1 | 	add	local03, #1
1e0c0     A7 22 62 FC | 	wrlong	local03, fp
1e0c4     60 4E 85 F1 | 	sub	fp, #96
1e0c8     A7 24 02 FB | 	rdlong	local04, fp
1e0cc     10 25 42 FC | 	wrbyte	local04, local02
1e0d0     48 4E 85 F1 | 	sub	fp, #72
1e0d4     A7 00 68 FC | 	wrlong	#0, fp
1e0d8     18 4E 85 F1 | 	sub	fp, #24
1e0dc                 | LR__2658
1e0dc     18 4E 05 F1 | 	add	fp, #24
1e0e0     A7 20 02 FB | 	rdlong	local02, fp
1e0e4     44 4E 05 F1 | 	add	fp, #68
1e0e8     A7 26 02 FB | 	rdlong	local05, fp
1e0ec     5C 4E 85 F1 | 	sub	fp, #92
1e0f0     13 21 52 F2 | 	cmps	local02, local05 wc
1e0f4     4C 00 90 3D |  if_ae	jmp	#LR__2659
1e0f8     C0 4E 05 F1 | 	add	fp, #192
1e0fc     A7 2C 02 FB | 	rdlong	local08, fp
1e100     16 35 02 F6 | 	mov	local12, local08
1e104     01 34 06 F1 | 	add	local12, #1
1e108     A7 34 62 FC | 	wrlong	local12, fp
1e10c     A8 4E 85 F1 | 	sub	fp, #168
1e110     A7 2A 02 FB | 	rdlong	local07, fp
1e114     15 2F 02 F6 | 	mov	local09, local07
1e118     98 4E 05 F1 | 	add	fp, #152
1e11c     A7 30 02 F6 | 	mov	local10, fp
1e120     A7 2E 02 F1 | 	add	local09, fp
1e124     17 33 C2 FA | 	rdbyte	local11, local09
1e128     16 33 42 FC | 	wrbyte	local11, local08
1e12c     98 4E 85 F1 | 	sub	fp, #152
1e130     A7 34 02 FB | 	rdlong	local12, fp
1e134     01 34 06 F1 | 	add	local12, #1
1e138     A7 34 62 FC | 	wrlong	local12, fp
1e13c     18 4E 85 F1 | 	sub	fp, #24
1e140     98 FF 9F FD | 	jmp	#LR__2658
1e144                 | LR__2659
1e144                 | LR__2660
1e144     C0 4E 05 F1 | 	add	fp, #192
1e148     A7 1E 02 FB | 	rdlong	local01, fp
1e14c     C0 4E 85 F1 | 	sub	fp, #192
1e150     0F 01 48 FC | 	wrbyte	#0, local01
1e154                 | LR__2661
1e154     6C 4E 05 F1 | 	add	fp, #108
1e158     A7 1E 0A FB | 	rdlong	local01, fp wz
1e15c     6C 4E 85 F1 | 	sub	fp, #108
1e160     90 01 90 AD |  if_e	jmp	#LR__2672
1e164     48 4E 05 F1 | 	add	fp, #72
1e168     A7 22 0A FB | 	rdlong	local03, fp wz
1e16c     48 4E 85 F1 | 	sub	fp, #72
1e170     80 01 90 AD |  if_e	jmp	#LR__2672
1e174     C4 4E 05 F1 | 	add	fp, #196
1e178     A7 12 02 FB | 	rdlong	arg01, fp
1e17c     C4 4E 85 F1 | 	sub	fp, #196
1e180     09 3D 02 F6 | 	mov	local16, arg01
1e184     97 06 48 FB | 	callpa	#(@LR__2663-@LR__2662)>>2,fcache_load_ptr_
1e188                 | LR__2662
1e188     1E FB C9 FA | 	rdbyte	result1, local16 wz
1e18c     01 3C 06 51 |  if_ne	add	local16, #1
1e190     F4 FF 9F 5D |  if_ne	jmp	#LR__2662
1e194                 | LR__2663
1e194     09 3D 82 F1 | 	sub	local16, arg01
1e198     1E 25 02 F6 | 	mov	local04, local16
1e19c     6C 4E 05 F1 | 	add	fp, #108
1e1a0     A7 28 02 FB | 	rdlong	local06, fp
1e1a4     6C 4E 85 F1 | 	sub	fp, #108
1e1a8     14 25 5A F2 | 	cmps	local04, local06 wcz
1e1ac     44 01 90 ED |  if_be	jmp	#LR__2672
1e1b0     C4 4E 05 F1 | 	add	fp, #196
1e1b4     A7 1E 02 FB | 	rdlong	local01, fp
1e1b8     5C 4E 05 F1 | 	add	fp, #92
1e1bc     A7 1E 62 FC | 	wrlong	local01, fp
1e1c0     FC 4E 85 F1 | 	sub	fp, #252
1e1c4     A7 1E 0A FB | 	rdlong	local01, fp wz
1e1c8     24 4E 85 F1 | 	sub	fp, #36
1e1cc     20 00 90 AD |  if_e	jmp	#LR__2664
1e1d0     B8 4E 05 F1 | 	add	fp, #184
1e1d4     A7 00 68 FC | 	wrlong	#0, fp
1e1d8     4C 4E 85 F1 | 	sub	fp, #76
1e1dc     A7 1E 02 FB | 	rdlong	local01, fp
1e1e0     B0 4E 05 F1 | 	add	fp, #176
1e1e4     A7 1E 62 FC | 	wrlong	local01, fp
1e1e8     1C 4F 85 F1 | 	sub	fp, #284
1e1ec     24 00 90 FD | 	jmp	#LR__2665
1e1f0                 | LR__2664
1e1f0     6C 4E 05 F1 | 	add	fp, #108
1e1f4     A7 1E 02 FB | 	rdlong	local01, fp
1e1f8     01 1E 86 F1 | 	sub	local01, #1
1e1fc     4C 4E 05 F1 | 	add	fp, #76
1e200     A7 22 02 FB | 	rdlong	local03, fp
1e204     11 1F 82 F1 | 	sub	local01, local03
1e208     64 4E 05 F1 | 	add	fp, #100
1e20c     A7 1E 62 FC | 	wrlong	local01, fp
1e210     1C 4F 85 F1 | 	sub	fp, #284
1e214                 | LR__2665
1e214     97 20 48 FB | 	callpa	#(@LR__2667-@LR__2666)>>2,fcache_load_ptr_
1e218                 | LR__2666
1e218     1C 4F 05 F1 | 	add	fp, #284
1e21c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e220     1C 4F 85 F1 | 	sub	fp, #284
1e224     30 00 90 AD |  if_e	jmp	#LR__2668
1e228     20 4F 05 F1 | 	add	fp, #288
1e22c     A7 20 02 FB | 	rdlong	local02, fp
1e230     10 23 02 F6 | 	mov	local03, local02
1e234     01 22 06 F1 | 	add	local03, #1
1e238     A7 22 62 FC | 	wrlong	local03, fp
1e23c     10 55 48 FC | 	wrbyte	#42, local02
1e240     04 4E 85 F1 | 	sub	fp, #4
1e244     A7 1E 02 FB | 	rdlong	local01, fp
1e248     01 1E 86 F1 | 	sub	local01, #1
1e24c     A7 1E 62 FC | 	wrlong	local01, fp
1e250     1C 4F 85 F1 | 	sub	fp, #284
1e254     C0 FF 9F FD | 	jmp	#LR__2666
1e258                 | LR__2667
1e258                 | LR__2668
1e258     B8 4E 05 F1 | 	add	fp, #184
1e25c     A7 1E 0A FB | 	rdlong	local01, fp wz
1e260     B8 4E 85 F1 | 	sub	fp, #184
1e264     70 00 90 AD |  if_e	jmp	#LR__2671
1e268     20 4F 05 F1 | 	add	fp, #288
1e26c     A7 20 02 FB | 	rdlong	local02, fp
1e270     10 23 02 F6 | 	mov	local03, local02
1e274     01 22 06 F1 | 	add	local03, #1
1e278     A7 22 62 FC | 	wrlong	local03, fp
1e27c     10 5D 48 FC | 	wrbyte	#46, local02
1e280     04 4E 85 F1 | 	sub	fp, #4
1e284     A7 00 68 FC | 	wrlong	#0, fp
1e288     1C 4F 85 F1 | 	sub	fp, #284
1e28c                 | LR__2669
1e28c     1C 4F 05 F1 | 	add	fp, #284
1e290     A7 20 02 FB | 	rdlong	local02, fp
1e294     64 4E 85 F1 | 	sub	fp, #100
1e298     A7 26 02 FB | 	rdlong	local05, fp
1e29c     B8 4E 85 F1 | 	sub	fp, #184
1e2a0     13 21 52 F2 | 	cmps	local02, local05 wc
1e2a4     30 00 90 3D |  if_ae	jmp	#LR__2670
1e2a8     20 4F 05 F1 | 	add	fp, #288
1e2ac     A7 2C 02 FB | 	rdlong	local08, fp
1e2b0     16 35 02 F6 | 	mov	local12, local08
1e2b4     01 34 06 F1 | 	add	local12, #1
1e2b8     A7 34 62 FC | 	wrlong	local12, fp
1e2bc     16 55 48 FC | 	wrbyte	#42, local08
1e2c0     04 4E 85 F1 | 	sub	fp, #4
1e2c4     A7 34 02 FB | 	rdlong	local12, fp
1e2c8     01 34 06 F1 | 	add	local12, #1
1e2cc     A7 34 62 FC | 	wrlong	local12, fp
1e2d0     1C 4F 85 F1 | 	sub	fp, #284
1e2d4     B4 FF 9F FD | 	jmp	#LR__2669
1e2d8                 | LR__2670
1e2d8                 | LR__2671
1e2d8     20 4F 05 F1 | 	add	fp, #288
1e2dc     A7 20 02 FB | 	rdlong	local02, fp
1e2e0     10 23 02 F6 | 	mov	local03, local02
1e2e4     01 22 06 F1 | 	add	local03, #1
1e2e8     A7 22 62 FC | 	wrlong	local03, fp
1e2ec     20 4F 85 F1 | 	sub	fp, #288
1e2f0     10 01 48 FC | 	wrbyte	#0, local02
1e2f4                 | LR__2672
1e2f4     04 4E 05 F1 | 	add	fp, #4
1e2f8     A7 12 02 FB | 	rdlong	arg01, fp
1e2fc     04 4E 05 F1 | 	add	fp, #4
1e300     A7 14 02 FB | 	rdlong	arg02, fp
1e304     BC 4E 05 F1 | 	add	fp, #188
1e308     A7 16 02 FB | 	rdlong	arg03, fp
1e30c     C4 4E 85 F1 | 	sub	fp, #196
1e310     C4 EE BF FD | 	call	#__system___fmtstr
1e314                 | LR__2673
1e314     A7 F0 03 F6 | 	mov	ptra, fp
1e318     B2 00 A0 FD | 	call	#popregs_
1e31c                 | __system___fmtfloat_ret
1e31c     2D 00 64 FD | 	ret
1e320                 | 
1e320                 | __system__Left_S
1e320     04 4A 05 F6 | 	mov	COUNT_, #4
1e324     A8 00 A0 FD | 	call	#pushregs_
1e328     09 1F 02 F6 | 	mov	local01, arg01
1e32c     0A 21 02 F6 | 	mov	local02, arg02
1e330     01 20 56 F2 | 	cmps	local02, #1 wc
1e334     5C 01 00 CF 
1e338     92 FA 05 C6 |  if_b	mov	result1, ##@LR__4563
1e33c     5C 00 90 CD |  if_b	jmp	#LR__2683
1e340     0F 13 02 F6 | 	mov	arg01, local01
1e344     09 23 02 F6 | 	mov	local03, arg01
1e348     97 06 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
1e34c                 | LR__2680
1e34c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e350     01 22 06 51 |  if_ne	add	local03, #1
1e354     F4 FF 9F 5D |  if_ne	jmp	#LR__2680
1e358                 | LR__2681
1e358     09 23 82 F1 | 	sub	local03, arg01
1e35c     11 FB 01 F6 | 	mov	result1, local03
1e360     10 FB 59 F2 | 	cmps	result1, local02 wcz
1e364     0F FB 01 E6 |  if_be	mov	result1, local01
1e368     30 00 90 ED |  if_be	jmp	#LR__2683
1e36c     10 13 02 F6 | 	mov	arg01, local02
1e370     02 12 06 F1 | 	add	arg01, #2
1e374     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
1e378     FD 24 0A F6 | 	mov	local04, result1 wz
1e37c     18 00 90 AD |  if_e	jmp	#LR__2682
1e380     12 13 02 F6 | 	mov	arg01, local04
1e384     0F 15 02 F6 | 	mov	arg02, local01
1e388     10 17 02 F6 | 	mov	arg03, local02
1e38c     6C DE BF FD | 	call	#__system____builtin_memmove
1e390     12 21 02 F1 | 	add	local02, local04
1e394     10 01 48 FC | 	wrbyte	#0, local02
1e398                 | LR__2682
1e398     12 FB 01 F6 | 	mov	result1, local04
1e39c                 | LR__2683
1e39c     A7 F0 03 F6 | 	mov	ptra, fp
1e3a0     B2 00 A0 FD | 	call	#popregs_
1e3a4                 | __system__Left_S_ret
1e3a4     2D 00 64 FD | 	ret
1e3a8                 | 
1e3a8                 | __system__Right_S
1e3a8     05 4A 05 F6 | 	mov	COUNT_, #5
1e3ac     A8 00 A0 FD | 	call	#pushregs_
1e3b0     09 1F 02 F6 | 	mov	local01, arg01
1e3b4     0A 21 02 F6 | 	mov	local02, arg02
1e3b8     01 20 56 F2 | 	cmps	local02, #1 wc
1e3bc     5C 01 00 CF 
1e3c0     93 FA 05 C6 |  if_b	mov	result1, ##@LR__4564
1e3c4     64 00 90 CD |  if_b	jmp	#LR__2693
1e3c8     0F 13 02 F6 | 	mov	arg01, local01
1e3cc     09 23 02 F6 | 	mov	local03, arg01
1e3d0     97 06 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1e3d4                 | LR__2690
1e3d4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e3d8     01 22 06 51 |  if_ne	add	local03, #1
1e3dc     F4 FF 9F 5D |  if_ne	jmp	#LR__2690
1e3e0                 | LR__2691
1e3e0     09 23 82 F1 | 	sub	local03, arg01
1e3e4     11 FB 01 F6 | 	mov	result1, local03
1e3e8     FD 24 02 F6 | 	mov	local04, result1
1e3ec     10 25 5A F2 | 	cmps	local04, local02 wcz
1e3f0     0F FB 01 E6 |  if_be	mov	result1, local01
1e3f4     34 00 90 ED |  if_be	jmp	#LR__2693
1e3f8     10 13 02 F6 | 	mov	arg01, local02
1e3fc     02 12 06 F1 | 	add	arg01, #2
1e400     20 1D B0 FD | 	call	#__system___gc_alloc_managed
1e404     FD 26 0A F6 | 	mov	local05, result1 wz
1e408     1C 00 90 AD |  if_e	jmp	#LR__2692
1e40c     10 25 82 F1 | 	sub	local04, local02
1e410     0F 25 02 F1 | 	add	local04, local01
1e414     01 20 06 F1 | 	add	local02, #1
1e418     13 13 02 F6 | 	mov	arg01, local05
1e41c     12 15 02 F6 | 	mov	arg02, local04
1e420     10 17 02 F6 | 	mov	arg03, local02
1e424     D4 DD BF FD | 	call	#__system____builtin_memmove
1e428                 | LR__2692
1e428     13 FB 01 F6 | 	mov	result1, local05
1e42c                 | LR__2693
1e42c     A7 F0 03 F6 | 	mov	ptra, fp
1e430     B2 00 A0 FD | 	call	#popregs_
1e434                 | __system__Right_S_ret
1e434     2D 00 64 FD | 	ret
1e438                 | 
1e438                 | __system__Mid_S
1e438     05 4A 05 F6 | 	mov	COUNT_, #5
1e43c     A8 00 A0 FD | 	call	#pushregs_
1e440     09 1F 02 F6 | 	mov	local01, arg01
1e444     0A 21 02 F6 | 	mov	local02, arg02
1e448     01 16 56 F2 | 	cmps	arg03, #1 wc
1e44c     5C 01 00 CF 
1e450     94 FA 05 C6 |  if_b	mov	result1, ##@LR__4565
1e454     80 00 90 CD |  if_b	jmp	#LR__2703
1e458     01 20 86 F1 | 	sub	local02, #1
1e45c     00 20 56 F3 | 	fges	local02, #0 wc
1e460     0F 13 02 F6 | 	mov	arg01, local01
1e464     09 23 02 F6 | 	mov	local03, arg01
1e468     97 06 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1e46c                 | LR__2700
1e46c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1e470     01 22 06 51 |  if_ne	add	local03, #1
1e474     F4 FF 9F 5D |  if_ne	jmp	#LR__2700
1e478                 | LR__2701
1e478     09 23 82 F1 | 	sub	local03, arg01
1e47c     11 FB 01 F6 | 	mov	result1, local03
1e480     FD 14 02 F6 | 	mov	arg02, result1
1e484     10 15 52 F2 | 	cmps	arg02, local02 wc
1e488     5C 01 00 CF 
1e48c     95 FA 05 C6 |  if_b	mov	result1, ##@LR__4566
1e490     44 00 90 CD |  if_b	jmp	#LR__2703
1e494     0A 25 02 F6 | 	mov	local04, arg02
1e498     10 25 82 F1 | 	sub	local04, local02
1e49c     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1e4a0     0B 25 02 16 |  if_a	mov	local04, arg03
1e4a4     12 13 02 F6 | 	mov	arg01, local04
1e4a8     02 12 06 F1 | 	add	arg01, #2
1e4ac     74 1C B0 FD | 	call	#__system___gc_alloc_managed
1e4b0     FD 26 0A F6 | 	mov	local05, result1 wz
1e4b4     1C 00 90 AD |  if_e	jmp	#LR__2702
1e4b8     0F 21 02 F1 | 	add	local02, local01
1e4bc     13 13 02 F6 | 	mov	arg01, local05
1e4c0     10 15 02 F6 | 	mov	arg02, local02
1e4c4     12 17 02 F6 | 	mov	arg03, local04
1e4c8     30 DD BF FD | 	call	#__system____builtin_memmove
1e4cc     13 25 02 F1 | 	add	local04, local05
1e4d0     12 01 48 FC | 	wrbyte	#0, local04
1e4d4                 | LR__2702
1e4d4     13 FB 01 F6 | 	mov	result1, local05
1e4d8                 | LR__2703
1e4d8     A7 F0 03 F6 | 	mov	ptra, fp
1e4dc     B2 00 A0 FD | 	call	#popregs_
1e4e0                 | __system__Mid_S_ret
1e4e0     2D 00 64 FD | 	ret
1e4e4                 | 
1e4e4                 | __system__Chr_S
1e4e4     01 4A 05 F6 | 	mov	COUNT_, #1
1e4e8     A8 00 A0 FD | 	call	#pushregs_
1e4ec     09 1F 02 F6 | 	mov	local01, arg01
1e4f0     03 12 06 F6 | 	mov	arg01, #3
1e4f4     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
1e4f8     00 FA 4D F2 | 	cmps	result1, #0 wz
1e4fc     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1e500     01 FA 05 51 |  if_ne	add	result1, #1
1e504     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1e508     01 FA 85 51 |  if_ne	sub	result1, #1
1e50c     A7 F0 03 F6 | 	mov	ptra, fp
1e510     B2 00 A0 FD | 	call	#popregs_
1e514                 | __system__Chr_S_ret
1e514     2D 00 64 FD | 	ret
1e518                 | 
1e518                 | __system__str_S
1e518     02 4A 05 F6 | 	mov	COUNT_, #2
1e51c     A8 00 A0 FD | 	call	#pushregs_
1e520     09 1F 02 F6 | 	mov	local01, arg01
1e524     10 12 06 F6 | 	mov	arg01, #16
1e528     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
1e52c     FD 20 0A F6 | 	mov	local02, result1 wz
1e530     30 00 90 AD |  if_e	jmp	#LR__2710
1e534     F8 13 02 F6 | 	mov	arg01, ptra
1e538     08 F0 07 F1 | 	add	ptra, #8
1e53c     09 21 62 FC | 	wrlong	local02, arg01
1e540     04 12 06 F1 | 	add	arg01, #4
1e544     09 01 68 FC | 	wrlong	#0, arg01
1e548     04 12 86 F1 | 	sub	arg01, #4
1e54c     00 E8 03 FF 
1e550     00 12 46 F5 | 	or	arg01, ##131072000
1e554     00 14 06 F6 | 	mov	arg02, #0
1e558     0F 17 02 F6 | 	mov	arg03, local01
1e55c     67 18 06 F6 | 	mov	arg04, #103
1e560     90 EE BF FD | 	call	#__system___fmtfloat
1e564                 | LR__2710
1e564     10 FB 01 F6 | 	mov	result1, local02
1e568     A7 F0 03 F6 | 	mov	ptra, fp
1e56c     B2 00 A0 FD | 	call	#popregs_
1e570                 | __system__str_S_ret
1e570     2D 00 64 FD | 	ret
1e574                 | 
1e574                 | __system__Number_S
1e574     08 4A 05 F6 | 	mov	COUNT_, #8
1e578     A8 00 A0 FD | 	call	#pushregs_
1e57c     09 1F 02 F6 | 	mov	local01, arg01
1e580     0A 21 0A F6 | 	mov	local02, arg02 wz
1e584     0B 23 02 F6 | 	mov	local03, arg03
1e588     3C 00 90 5D |  if_ne	jmp	#LR__2722
1e58c     01 20 06 F6 | 	mov	local02, #1
1e590     11 25 02 F6 | 	mov	local04, local03
1e594     01 26 06 F6 | 	mov	local05, #1
1e598     97 16 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
1e59c                 | LR__2720
1e59c     00 28 06 F6 | 	mov	local06, #0
1e5a0     0F 25 1A F2 | 	cmp	local04, local01 wcz
1e5a4     01 28 66 E6 |  if_be	neg	local06, #1
1e5a8     12 27 12 F2 | 	cmp	local05, local04 wc
1e5ac     15 2B A2 F1 | 	subx	local07, local07
1e5b0     15 29 CA F7 | 	test	local06, local07 wz
1e5b4     11 25 02 5D |  if_ne	qmul	local04, local03
1e5b8     12 27 02 56 |  if_ne	mov	local05, local04
1e5bc     01 20 06 51 |  if_ne	add	local02, #1
1e5c0     18 24 62 5D |  if_ne	getqx	local04
1e5c4     D4 FF 9F 5D |  if_ne	jmp	#LR__2720
1e5c8                 | LR__2721
1e5c8                 | LR__2722
1e5c8     20 20 36 F3 | 	fle	local02, #32 wc
1e5cc     10 13 02 F6 | 	mov	arg01, local02
1e5d0     02 12 06 F1 | 	add	arg01, #2
1e5d4     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1e5d8     FD 28 02 F6 | 	mov	local06, result1
1e5dc     10 2B 02 F6 | 	mov	local07, local02
1e5e0     14 2B 02 F1 | 	add	local07, local06
1e5e4     15 01 48 FC | 	wrbyte	#0, local07
1e5e8     97 1A 48 FB | 	callpa	#(@LR__2724-@LR__2723)>>2,fcache_load_ptr_
1e5ec                 | LR__2723
1e5ec     01 20 16 F2 | 	cmp	local02, #1 wc
1e5f0     2C 00 90 CD |  if_b	jmp	#LR__2725
1e5f4     11 1F 12 FD | 	qdiv	local01, local03
1e5f8     01 20 86 F1 | 	sub	local02, #1
1e5fc     10 2B 02 F6 | 	mov	local07, local02
1e600     14 2B 02 F1 | 	add	local07, local06
1e604     19 2C 62 FD | 	getqy	local08
1e608     0A 2C 16 F2 | 	cmp	local08, #10 wc
1e60c     30 2C 06 C1 |  if_b	add	local08, #48
1e610     37 2C 06 31 |  if_ae	add	local08, #55
1e614     15 2D 42 FC | 	wrbyte	local08, local07
1e618     18 1E 62 FD | 	getqx	local01
1e61c     CC FF 9F FD | 	jmp	#LR__2723
1e620                 | LR__2724
1e620                 | LR__2725
1e620     14 FB 01 F6 | 	mov	result1, local06
1e624     A7 F0 03 F6 | 	mov	ptra, fp
1e628     B2 00 A0 FD | 	call	#popregs_
1e62c                 | __system__Number_S_ret
1e62c     2D 00 64 FD | 	ret
1e630                 | 
1e630                 | __system__LCase_S
1e630     07 4A 05 F6 | 	mov	COUNT_, #7
1e634     A8 00 A0 FD | 	call	#pushregs_
1e638     09 1F 02 F6 | 	mov	local01, arg01
1e63c     09 21 02 F6 | 	mov	local02, arg01
1e640     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
1e644                 | LR__2730
1e644     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e648     01 20 06 51 |  if_ne	add	local02, #1
1e64c     F4 FF 9F 5D |  if_ne	jmp	#LR__2730
1e650                 | LR__2731
1e650     09 21 82 F1 | 	sub	local02, arg01
1e654     10 FB 01 F6 | 	mov	result1, local02
1e658     FD 20 0A F6 | 	mov	local02, result1 wz
1e65c     5C 01 00 AF 
1e660     96 FA 05 A6 |  if_e	mov	result1, ##@LR__4567
1e664     7C 00 90 AD |  if_e	jmp	#LR__2737
1e668     10 13 02 F6 | 	mov	arg01, local02
1e66c     02 12 06 F1 | 	add	arg01, #2
1e670     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1e674     FD 22 0A F6 | 	mov	local03, result1 wz
1e678     64 00 90 AD |  if_e	jmp	#LR__2736
1e67c     01 24 66 F6 | 	neg	local04, #1
1e680     97 26 48 FB | 	callpa	#(@LR__2735-@LR__2732)>>2,fcache_load_ptr_
1e684                 | LR__2732
1e684     01 24 06 F1 | 	add	local04, #1
1e688     12 27 02 F6 | 	mov	local05, local04
1e68c     0F 27 02 F1 | 	add	local05, local01
1e690     13 29 C2 FA | 	rdbyte	local06, local05
1e694     41 28 56 F2 | 	cmps	local06, #65 wc
1e698     18 00 90 CD |  if_b	jmp	#LR__2733
1e69c     5B 28 56 F2 | 	cmps	local06, #91 wc
1e6a0     12 2B 02 C6 |  if_b	mov	local07, local04
1e6a4     11 2B 02 C1 |  if_b	add	local07, local03
1e6a8     20 28 06 C1 |  if_b	add	local06, #32
1e6ac     15 29 42 CC |  if_b	wrbyte	local06, local07
1e6b0     0C 00 90 CD |  if_b	jmp	#LR__2734
1e6b4                 | LR__2733
1e6b4     12 2B 02 F6 | 	mov	local07, local04
1e6b8     11 2B 02 F1 | 	add	local07, local03
1e6bc     15 29 42 FC | 	wrbyte	local06, local07
1e6c0                 | LR__2734
1e6c0     10 29 02 F6 | 	mov	local06, local02
1e6c4     01 28 86 F1 | 	sub	local06, #1
1e6c8     14 25 0A F2 | 	cmp	local04, local06 wz
1e6cc     B4 FF 9F 5D |  if_ne	jmp	#LR__2732
1e6d0                 | LR__2735
1e6d0     11 21 02 F1 | 	add	local02, local03
1e6d4     10 01 48 FC | 	wrbyte	#0, local02
1e6d8     11 FB 01 F6 | 	mov	result1, local03
1e6dc     04 00 90 FD | 	jmp	#LR__2737
1e6e0                 | LR__2736
1e6e0     11 FB 01 F6 | 	mov	result1, local03
1e6e4                 | LR__2737
1e6e4     A7 F0 03 F6 | 	mov	ptra, fp
1e6e8     B2 00 A0 FD | 	call	#popregs_
1e6ec                 | __system__LCase_S_ret
1e6ec     2D 00 64 FD | 	ret
1e6f0                 | 
1e6f0                 | __system__LTrim_S
1e6f0     05 4A 05 F6 | 	mov	COUNT_, #5
1e6f4     A8 00 A0 FD | 	call	#pushregs_
1e6f8     09 1F 02 F6 | 	mov	local01, arg01
1e6fc     09 21 02 F6 | 	mov	local02, arg01
1e700     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
1e704                 | LR__2740
1e704     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e708     01 20 06 51 |  if_ne	add	local02, #1
1e70c     F4 FF 9F 5D |  if_ne	jmp	#LR__2740
1e710                 | LR__2741
1e710     09 21 82 F1 | 	sub	local02, arg01
1e714     10 FB 01 F6 | 	mov	result1, local02
1e718     FD 20 0A F6 | 	mov	local02, result1 wz
1e71c     5C 01 00 AF 
1e720     97 FA 05 A6 |  if_e	mov	result1, ##@LR__4568
1e724     7C 00 90 AD |  if_e	jmp	#LR__2746
1e728     00 22 06 F6 | 	mov	local03, #0
1e72c     10 25 02 F6 | 	mov	local04, local02
1e730                 | LR__2742
1e730     12 23 52 F2 | 	cmps	local03, local04 wc
1e734     68 00 90 3D |  if_ae	jmp	#LR__2745
1e738     11 17 02 F6 | 	mov	arg03, local03
1e73c     0F 17 02 F1 | 	add	arg03, local01
1e740     0B 17 C2 FA | 	rdbyte	arg03, arg03
1e744     20 16 0E F2 | 	cmp	arg03, #32 wz
1e748     4C 00 90 AD |  if_e	jmp	#LR__2744
1e74c     10 13 02 F6 | 	mov	arg01, local02
1e750     11 13 82 F1 | 	sub	arg01, local03
1e754     02 12 06 F1 | 	add	arg01, #2
1e758     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1e75c     FD 26 0A F6 | 	mov	local05, result1 wz
1e760     2C 00 90 AD |  if_e	jmp	#LR__2743
1e764     11 15 02 F6 | 	mov	arg02, local03
1e768     0F 15 02 F1 | 	add	arg02, local01
1e76c     10 17 02 F6 | 	mov	arg03, local02
1e770     11 17 82 F1 | 	sub	arg03, local03
1e774     13 13 02 F6 | 	mov	arg01, local05
1e778     80 DA BF FD | 	call	#__system____builtin_memmove
1e77c     11 21 82 F1 | 	sub	local02, local03
1e780     13 21 02 F1 | 	add	local02, local05
1e784     10 01 48 FC | 	wrbyte	#0, local02
1e788     13 FB 01 F6 | 	mov	result1, local05
1e78c     14 00 90 FD | 	jmp	#LR__2746
1e790                 | LR__2743
1e790     13 FB 01 F6 | 	mov	result1, local05
1e794     0C 00 90 FD | 	jmp	#LR__2746
1e798                 | LR__2744
1e798     01 22 06 F1 | 	add	local03, #1
1e79c     90 FF 9F FD | 	jmp	#LR__2742
1e7a0                 | LR__2745
1e7a0     0F FB 01 F6 | 	mov	result1, local01
1e7a4                 | LR__2746
1e7a4     A7 F0 03 F6 | 	mov	ptra, fp
1e7a8     B2 00 A0 FD | 	call	#popregs_
1e7ac                 | __system__LTrim_S_ret
1e7ac     2D 00 64 FD | 	ret
1e7b0                 | 
1e7b0                 | __system__RTrim_S
1e7b0     04 4A 05 F6 | 	mov	COUNT_, #4
1e7b4     A8 00 A0 FD | 	call	#pushregs_
1e7b8     09 1F 02 F6 | 	mov	local01, arg01
1e7bc     09 21 02 F6 | 	mov	local02, arg01
1e7c0     97 06 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
1e7c4                 | LR__2750
1e7c4     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e7c8     01 20 06 51 |  if_ne	add	local02, #1
1e7cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2750
1e7d0                 | LR__2751
1e7d0     09 21 82 F1 | 	sub	local02, arg01
1e7d4     10 FB 01 F6 | 	mov	result1, local02
1e7d8     FD 20 0A F6 | 	mov	local02, result1 wz
1e7dc     5C 01 00 AF 
1e7e0     98 FA 05 A6 |  if_e	mov	result1, ##@LR__4569
1e7e4     74 00 90 AD |  if_e	jmp	#LR__2755
1e7e8     10 23 02 F6 | 	mov	local03, local02
1e7ec     01 22 86 F1 | 	sub	local03, #1
1e7f0                 | LR__2752
1e7f0     11 15 02 F6 | 	mov	arg02, local03
1e7f4     0F 15 02 F1 | 	add	arg02, local01
1e7f8     0A 21 C2 FA | 	rdbyte	local02, arg02
1e7fc     20 20 0E F2 | 	cmp	local02, #32 wz
1e800     44 00 90 AD |  if_e	jmp	#LR__2754
1e804     11 13 02 F6 | 	mov	arg01, local03
1e808     02 12 06 F1 | 	add	arg01, #2
1e80c     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1e810     FD 24 0A F6 | 	mov	local04, result1 wz
1e814     28 00 90 AD |  if_e	jmp	#LR__2753
1e818     11 17 02 F6 | 	mov	arg03, local03
1e81c     01 16 06 F1 | 	add	arg03, #1
1e820     12 13 02 F6 | 	mov	arg01, local04
1e824     0F 15 02 F6 | 	mov	arg02, local01
1e828     D0 D9 BF FD | 	call	#__system____builtin_memmove
1e82c     01 22 06 F1 | 	add	local03, #1
1e830     12 23 02 F1 | 	add	local03, local04
1e834     11 01 48 FC | 	wrbyte	#0, local03
1e838     12 FB 01 F6 | 	mov	result1, local04
1e83c     1C 00 90 FD | 	jmp	#LR__2755
1e840                 | LR__2753
1e840     12 FB 01 F6 | 	mov	result1, local04
1e844     14 00 90 FD | 	jmp	#LR__2755
1e848                 | LR__2754
1e848     01 22 86 F1 | 	sub	local03, #1
1e84c     00 22 56 F2 | 	cmps	local03, #0 wc
1e850     9C FF 9F 3D |  if_ae	jmp	#LR__2752
1e854     5C 01 00 FF 
1e858     99 FA 05 F6 | 	mov	result1, ##@LR__4570
1e85c                 | LR__2755
1e85c     A7 F0 03 F6 | 	mov	ptra, fp
1e860     B2 00 A0 FD | 	call	#popregs_
1e864                 | __system__RTrim_S_ret
1e864     2D 00 64 FD | 	ret
1e868                 | 
1e868                 | __system__Instr
1e868     07 4A 05 F6 | 	mov	COUNT_, #7
1e86c     A8 00 A0 FD | 	call	#pushregs_
1e870     09 1F 02 F6 | 	mov	local01, arg01
1e874     0A 21 02 F6 | 	mov	local02, arg02
1e878     0B 23 02 F6 | 	mov	local03, arg03
1e87c     11 13 02 F6 | 	mov	arg01, local03
1e880     09 25 02 F6 | 	mov	local04, arg01
1e884     97 06 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
1e888                 | LR__2760
1e888     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e88c     01 24 06 51 |  if_ne	add	local04, #1
1e890     F4 FF 9F 5D |  if_ne	jmp	#LR__2760
1e894                 | LR__2761
1e894     09 25 82 F1 | 	sub	local04, arg01
1e898     12 27 02 F6 | 	mov	local05, local04
1e89c     10 13 02 F6 | 	mov	arg01, local02
1e8a0     09 25 02 F6 | 	mov	local04, arg01
1e8a4     97 06 48 FB | 	callpa	#(@LR__2763-@LR__2762)>>2,fcache_load_ptr_
1e8a8                 | LR__2762
1e8a8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e8ac     01 24 06 51 |  if_ne	add	local04, #1
1e8b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2762
1e8b4                 | LR__2763
1e8b4     09 25 82 F1 | 	sub	local04, arg01
1e8b8     12 FB 01 F6 | 	mov	result1, local04
1e8bc     FD 18 0A F6 | 	mov	arg04, result1 wz
1e8c0     00 FA 05 A6 |  if_e	mov	result1, #0
1e8c4     98 00 90 AD |  if_e	jmp	#LR__2767
1e8c8     00 26 0E F2 | 	cmp	local05, #0 wz
1e8cc     00 FA 05 A6 |  if_e	mov	result1, #0
1e8d0     8C 00 90 AD |  if_e	jmp	#LR__2767
1e8d4     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1e8d8     00 FA 05 16 |  if_a	mov	result1, #0
1e8dc     80 00 90 1D |  if_a	jmp	#LR__2767
1e8e0     01 1E 56 F2 | 	cmps	local01, #1 wc
1e8e4     01 1E 06 C6 |  if_b	mov	local01, #1
1e8e8     11 29 C2 FA | 	rdbyte	local06, local03
1e8ec     01 26 0E F2 | 	cmp	local05, #1 wz
1e8f0     18 00 90 5D |  if_ne	jmp	#LR__2764
1e8f4     10 13 02 F6 | 	mov	arg01, local02
1e8f8     14 15 02 F6 | 	mov	arg02, local06
1e8fc     0F 17 02 F6 | 	mov	arg03, local01
1e900     00 18 06 F6 | 	mov	arg04, #0
1e904     B4 33 B0 FD | 	call	#__system____ScanForChar
1e908     54 00 90 FD | 	jmp	#LR__2767
1e90c                 | LR__2764
1e90c     0F 2B 02 F6 | 	mov	local07, local01
1e910                 | LR__2765
1e910     10 13 02 F6 | 	mov	arg01, local02
1e914     14 15 02 F6 | 	mov	arg02, local06
1e918     15 17 02 F6 | 	mov	arg03, local07
1e91c     00 18 06 F6 | 	mov	arg04, #0
1e920     98 33 B0 FD | 	call	#__system____ScanForChar
1e924     FD 2A 0A F6 | 	mov	local07, result1 wz
1e928     30 00 90 AD |  if_e	jmp	#LR__2766
1e92c     13 17 02 F6 | 	mov	arg03, local05
1e930     10 13 02 F6 | 	mov	arg01, local02
1e934     15 15 02 F6 | 	mov	arg02, local07
1e938     FC FA BF FD | 	call	#__system__Mid_S
1e93c     FD 12 02 F6 | 	mov	arg01, result1
1e940     11 15 02 F6 | 	mov	arg02, local03
1e944     BC D9 BF FD | 	call	#__system___string_cmp
1e948     00 FA 0D F2 | 	cmp	result1, #0 wz
1e94c     15 FB 01 A6 |  if_e	mov	result1, local07
1e950     0C 00 90 AD |  if_e	jmp	#LR__2767
1e954     13 2B 02 F1 | 	add	local07, local05
1e958     B4 FF 9F FD | 	jmp	#LR__2765
1e95c                 | LR__2766
1e95c     00 FA 05 F6 | 	mov	result1, #0
1e960                 | LR__2767
1e960     A7 F0 03 F6 | 	mov	ptra, fp
1e964     B2 00 A0 FD | 	call	#popregs_
1e968                 | __system__Instr_ret
1e968     2D 00 64 FD | 	ret
1e96c                 | 
1e96c                 | __system___strerror
1e96c     00 12 56 F2 | 	cmps	arg01, #0 wc
1e970     08 00 90 CD |  if_b	jmp	#LR__2770
1e974     1A 12 56 F2 | 	cmps	arg01, #26 wc
1e978     04 00 90 CD |  if_b	jmp	#LR__2771
1e97c                 | LR__2770
1e97c     19 12 06 F6 | 	mov	arg01, #25
1e980                 | LR__2771
1e980     02 12 66 F0 | 	shl	arg01, #2
1e984     01 00 00 FF 
1e988     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
1e98c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1e990     09 FB 01 FB | 	rdlong	result1, arg01
1e994     01 00 00 FF 
1e998     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
1e99c                 | __system___strerror_ret
1e99c     2D 00 64 FD | 	ret
1e9a0                 | 
1e9a0                 | __system___int64_shl
1e9a0     20 16 CE F7 | 	test	arg03, #32 wz
1e9a4     09 15 02 56 |  if_ne	mov	arg02, arg01
1e9a8     00 12 06 56 |  if_ne	mov	arg01, #0
1e9ac     1F 16 CE F7 | 	test	arg03, #31 wz
1e9b0     18 00 90 AD |  if_e	jmp	#LR__2780
1e9b4     0B 15 62 F0 | 	shl	arg02, arg03
1e9b8     09 FB 01 F6 | 	mov	result1, arg01
1e9bc     0B FD 61 F6 | 	neg	result2, arg03
1e9c0     FE FA 41 F0 | 	shr	result1, result2
1e9c4     FD 14 42 F5 | 	or	arg02, result1
1e9c8     0B 13 62 F0 | 	shl	arg01, arg03
1e9cc                 | LR__2780
1e9cc     0A FD 01 F6 | 	mov	result2, arg02
1e9d0     09 FB 01 F6 | 	mov	result1, arg01
1e9d4                 | __system___int64_shl_ret
1e9d4     2D 00 64 FD | 	ret
1e9d8                 | 
1e9d8                 | __system___usepins
1e9d8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1e9dc     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1e9e0     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
1e9e4     00 13 CA F7 | 	test	arg01, _var01 wz
1e9e8     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
1e9ec     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1e9f0     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
1e9f4     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1e9f8     00 FA 05 56 |  if_ne	mov	result1, #0
1e9fc     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1ea00     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1ea04     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1ea08     09 03 42 F5 | 	or	_var02, arg01
1ea0c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1ea10     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ea14     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1ea18     0A 03 42 F5 | 	or	_var02, arg02
1ea1c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1ea20     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1ea24     01 FA 65 F6 | 	neg	result1, #1
1ea28                 | __system___usepins_ret
1ea28     2D 00 64 FD | 	ret
1ea2c                 | 
1ea2c                 | __system___freepins
1ea2c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1ea30     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ea34     09 01 22 F5 | 	andn	_var01, arg01
1ea38     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ea3c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ea40     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1ea44     0A 01 22 F5 | 	andn	_var01, arg02
1ea48     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1ea4c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1ea50                 | __system___freepins_ret
1ea50     2D 00 64 FD | 	ret
1ea54                 | 
1ea54                 | __system___float_fromuns
1ea54     09 17 0A F6 | 	mov	arg03, arg01 wz
1ea58     0B FB 01 A6 |  if_e	mov	result1, arg03
1ea5c     24 00 90 AD |  if_e	jmp	#LR__2790
1ea60     0B 15 92 F7 | 	encod	arg02, arg03 wc
1ea64     01 14 06 C1 |  if_b	add	arg02, #1
1ea68     01 14 86 F1 | 	sub	arg02, #1
1ea6c     1F 12 06 F6 | 	mov	arg01, #31
1ea70     0A 13 82 F1 | 	sub	arg01, arg02
1ea74     09 17 62 F0 | 	shl	arg03, arg01
1ea78     02 16 46 F0 | 	shr	arg03, #2
1ea7c     00 12 06 F6 | 	mov	arg01, #0
1ea80     4C 09 B0 FD | 	call	#__system___float_Pack
1ea84                 | LR__2790
1ea84                 | __system___float_fromuns_ret
1ea84     2D 00 64 FD | 	ret
1ea88                 | 
1ea88                 | __system___float_add
1ea88     0F 4A 05 F6 | 	mov	COUNT_, #15
1ea8c     A8 00 A0 FD | 	call	#pushregs_
1ea90     09 1F 02 F6 | 	mov	local01, arg01
1ea94     0A 21 02 F6 | 	mov	local02, arg02
1ea98     00 22 06 F6 | 	mov	local03, #0
1ea9c     0F 25 02 F6 | 	mov	local04, local01
1eaa0     12 27 02 F6 | 	mov	local05, local04
1eaa4     16 26 46 F7 | 	zerox	local05, #22
1eaa8     12 29 02 F6 | 	mov	local06, local04
1eaac     01 28 66 F0 | 	shl	local06, #1
1eab0     18 28 46 F0 | 	shr	local06, #24
1eab4     1F 24 46 F0 | 	shr	local04, #31
1eab8     10 13 02 F6 | 	mov	arg01, local02
1eabc     09 FB 01 F6 | 	mov	result1, arg01
1eac0     FD 2A 02 F6 | 	mov	local07, result1
1eac4     15 2D 02 F6 | 	mov	local08, local07
1eac8     16 2C 46 F7 | 	zerox	local08, #22
1eacc     15 2F 02 F6 | 	mov	local09, local07
1ead0     01 2E 66 F0 | 	shl	local09, #1
1ead4     18 2E 46 F0 | 	shr	local09, #24
1ead8     17 31 02 F6 | 	mov	local10, local09
1eadc     1F 2A 46 F0 | 	shr	local07, #31
1eae0     00 32 06 F6 | 	mov	local11, #0
1eae4     00 34 06 F6 | 	mov	local12, #0
1eae8     18 29 12 F2 | 	cmp	local06, local10 wc
1eaec     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1eaf0     2C 00 90 1D |  if_a	jmp	#LR__2800
1eaf4     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1eaf8     24 00 90 3D |  if_ae	jmp	#LR__2800
1eafc     13 37 02 F6 | 	mov	local13, local05
1eb00     16 27 02 F6 | 	mov	local05, local08
1eb04     1B 2D 02 F6 | 	mov	local08, local13
1eb08     14 37 02 F6 | 	mov	local13, local06
1eb0c     18 29 02 F6 | 	mov	local06, local10
1eb10     1B 31 02 F6 | 	mov	local10, local13
1eb14     12 37 02 F6 | 	mov	local13, local04
1eb18     15 25 02 F6 | 	mov	local04, local07
1eb1c     1B 2B 02 F6 | 	mov	local07, local13
1eb20                 | LR__2800
1eb20     FF 28 0E F2 | 	cmp	local06, #255 wz
1eb24     70 01 90 AD |  if_e	jmp	#LR__2815
1eb28     00 28 0E F2 | 	cmp	local06, #0 wz
1eb2c     AC 01 90 AD |  if_e	jmp	#LR__2817
1eb30     17 26 26 F4 | 	bith	local05, #23
1eb34                 | LR__2801
1eb34     00 30 0E F2 | 	cmp	local10, #0 wz
1eb38     F0 01 90 AD |  if_e	jmp	#LR__2821
1eb3c     17 2C 26 F4 | 	bith	local08, #23
1eb40                 | LR__2802
1eb40     7F 28 86 F1 | 	sub	local06, #127
1eb44     7F 30 86 F1 | 	sub	local10, #127
1eb48     14 39 02 F6 | 	mov	local14, local06
1eb4c     18 39 82 F1 | 	sub	local14, local10
1eb50     97 14 48 FB | 	callpa	#(@LR__2804-@LR__2803)>>2,fcache_load_ptr_
1eb54                 | LR__2803
1eb54     20 38 56 F2 | 	cmps	local14, #32 wc
1eb58     20 00 90 CD |  if_b	jmp	#LR__2805
1eb5c     16 2F 02 F6 | 	mov	local09, local08
1eb60     00 32 0E F2 | 	cmp	local11, #0 wz
1eb64     6F 32 62 FD | 	wrnz	local11
1eb68     19 2F 42 F5 | 	or	local09, local11
1eb6c     17 33 02 F6 | 	mov	local11, local09
1eb70     00 2C 06 F6 | 	mov	local08, #0
1eb74     20 38 86 F1 | 	sub	local14, #32
1eb78     D8 FF 9F FD | 	jmp	#LR__2803
1eb7c                 | LR__2804
1eb7c                 | LR__2805
1eb7c     00 38 0E F2 | 	cmp	local14, #0 wz
1eb80     38 00 90 AD |  if_e	jmp	#LR__2806
1eb84     16 37 02 F6 | 	mov	local13, local08
1eb88     20 30 06 F6 | 	mov	local10, #32
1eb8c     1C 31 82 F1 | 	sub	local10, local14
1eb90     18 37 62 F0 | 	shl	local13, local10
1eb94     19 31 02 F6 | 	mov	local10, local11
1eb98     20 2E 06 F6 | 	mov	local09, #32
1eb9c     1C 2F 82 F1 | 	sub	local09, local14
1eba0     17 31 6A F0 | 	shl	local10, local09 wz
1eba4     1C 33 42 F0 | 	shr	local11, local14
1eba8     1C 2D 42 F0 | 	shr	local08, local14
1ebac     1B 33 42 F5 | 	or	local11, local13
1ebb0     00 3A 06 F6 | 	mov	local15, #0
1ebb4     01 3A 06 56 |  if_ne	mov	local15, #1
1ebb8     1D 33 42 F5 | 	or	local11, local15
1ebbc                 | LR__2806
1ebbc     12 3B 02 F6 | 	mov	local15, local04
1ebc0     15 3B 62 F5 | 	xor	local15, local07
1ebc4     01 3A CE F7 | 	test	local15, #1 wz
1ebc8     18 00 90 AD |  if_e	jmp	#LR__2807
1ebcc     16 2D 22 F6 | 	not	local08, local08
1ebd0     19 33 22 F6 | 	not	local11, local11
1ebd4     01 32 0E F1 | 	add	local11, #1 wz
1ebd8     00 3A 06 F6 | 	mov	local15, #0
1ebdc     01 3A 06 A6 |  if_e	mov	local15, #1
1ebe0     1D 2D 02 F1 | 	add	local08, local15
1ebe4                 | LR__2807
1ebe4     19 35 12 F1 | 	add	local12, local11 wc
1ebe8     16 27 22 F1 | 	addx	local05, local08
1ebec     00 26 56 F2 | 	cmps	local05, #0 wc
1ebf0     1C 00 90 3D |  if_ae	jmp	#LR__2808
1ebf4     01 24 66 F5 | 	xor	local04, #1
1ebf8     13 27 22 F6 | 	not	local05, local05
1ebfc     1A 35 22 F6 | 	not	local12, local12
1ec00     01 34 0E F1 | 	add	local12, #1 wz
1ec04     00 3A 06 F6 | 	mov	local15, #0
1ec08     01 3A 06 A6 |  if_e	mov	local15, #1
1ec0c     1D 27 02 F1 | 	add	local05, local15
1ec10                 | LR__2808
1ec10     00 80 00 FF 
1ec14     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1ec18     28 00 90 CD |  if_b	jmp	#LR__2809
1ec1c     01 28 06 F1 | 	add	local06, #1
1ec20     1A 39 02 F6 | 	mov	local14, local12
1ec24     01 38 06 F5 | 	and	local14, #1
1ec28     01 34 46 F0 | 	shr	local12, #1
1ec2c     13 3B 02 F6 | 	mov	local15, local05
1ec30     1F 3A 66 F0 | 	shl	local15, #31
1ec34     1D 35 42 F5 | 	or	local12, local15
1ec38     1C 35 42 F5 | 	or	local12, local14
1ec3c     01 26 46 F0 | 	shr	local05, #1
1ec40     3C 00 90 FD | 	jmp	#LR__2814
1ec44                 | LR__2809
1ec44     00 40 00 FF 
1ec48     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ec4c     30 00 90 3D |  if_ae	jmp	#LR__2813
1ec50     00 26 0E F2 | 	cmp	local05, #0 wz
1ec54     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1ec58     08 24 46 A5 |  if_e	or	local04, #8
1ec5c     01 24 26 A5 |  if_e	andn	local04, #1
1ec60     1C 00 90 AD |  if_e	jmp	#LR__2812
1ec64                 | LR__2810
1ec64     00 40 00 FF 
1ec68     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ec6c     10 00 90 3D |  if_ae	jmp	#LR__2811
1ec70     1A 35 12 F1 | 	add	local12, local12 wc
1ec74     13 27 22 F1 | 	addx	local05, local05
1ec78     01 28 86 F1 | 	sub	local06, #1
1ec7c     E4 FF 9F FD | 	jmp	#LR__2810
1ec80                 | LR__2811
1ec80                 | LR__2812
1ec80                 | LR__2813
1ec80                 | LR__2814
1ec80     13 13 02 F6 | 	mov	arg01, local05
1ec84     1A 15 02 F6 | 	mov	arg02, local12
1ec88     14 17 02 F6 | 	mov	arg03, local06
1ec8c     12 19 02 F6 | 	mov	arg04, local04
1ec90     6C 34 B0 FD | 	call	#__system__pack_0540
1ec94     DC 00 90 FD | 	jmp	#LR__2825
1ec98                 | LR__2815
1ec98     FF 30 0E F2 | 	cmp	local10, #255 wz
1ec9c     10 00 90 5D |  if_ne	jmp	#LR__2816
1eca0     12 2B 0A F2 | 	cmp	local07, local04 wz
1eca4     00 F8 3F 5F 
1eca8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ecac     C4 00 90 5D |  if_ne	jmp	#LR__2825
1ecb0                 | LR__2816
1ecb0     00 26 0E F2 | 	cmp	local05, #0 wz
1ecb4     00 F8 3F 5F 
1ecb8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1ecbc     B4 00 90 5D |  if_ne	jmp	#LR__2825
1ecc0     1A 15 02 F6 | 	mov	arg02, local12
1ecc4     14 17 02 F6 | 	mov	arg03, local06
1ecc8     12 19 02 F6 | 	mov	arg04, local04
1eccc     02 18 46 F5 | 	or	arg04, #2
1ecd0     13 13 02 F6 | 	mov	arg01, local05
1ecd4     28 34 B0 FD | 	call	#__system__pack_0540
1ecd8     98 00 90 FD | 	jmp	#LR__2825
1ecdc                 | LR__2817
1ecdc     00 26 0E F2 | 	cmp	local05, #0 wz
1ece0     28 00 90 AD |  if_e	jmp	#LR__2820
1ece4     01 26 66 F0 | 	shl	local05, #1
1ece8     97 0E 48 FB | 	callpa	#(@LR__2819-@LR__2818)>>2,fcache_load_ptr_
1ecec                 | LR__2818
1ecec     00 40 00 FF 
1ecf0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1ecf4     14 3B 02 C6 |  if_b	mov	local15, local06
1ecf8     01 3A 86 C1 |  if_b	sub	local15, #1
1ecfc     1D 29 02 C6 |  if_b	mov	local06, local15
1ed00     01 26 66 C0 |  if_b	shl	local05, #1
1ed04     E4 FF 9F CD |  if_b	jmp	#LR__2818
1ed08                 | LR__2819
1ed08     28 FE 9F FD | 	jmp	#LR__2801
1ed0c                 | LR__2820
1ed0c     15 25 02 F5 | 	and	local04, local07
1ed10     12 19 02 F6 | 	mov	arg04, local04
1ed14     08 18 46 F5 | 	or	arg04, #8
1ed18     00 12 06 F6 | 	mov	arg01, #0
1ed1c     00 14 06 F6 | 	mov	arg02, #0
1ed20     00 16 06 F6 | 	mov	arg03, #0
1ed24     D8 33 B0 FD | 	call	#__system__pack_0540
1ed28     48 00 90 FD | 	jmp	#LR__2825
1ed2c                 | LR__2821
1ed2c     00 2C 0E F2 | 	cmp	local08, #0 wz
1ed30     28 00 90 AD |  if_e	jmp	#LR__2824
1ed34     01 2C 66 F0 | 	shl	local08, #1
1ed38     97 0E 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
1ed3c                 | LR__2822
1ed3c     00 40 00 FF 
1ed40     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1ed44     18 3B 02 C6 |  if_b	mov	local15, local10
1ed48     01 3A 86 C1 |  if_b	sub	local15, #1
1ed4c     1D 31 02 C6 |  if_b	mov	local10, local15
1ed50     01 2C 66 C0 |  if_b	shl	local08, #1
1ed54     E4 FF 9F CD |  if_b	jmp	#LR__2822
1ed58                 | LR__2823
1ed58     E4 FD 9F FD | 	jmp	#LR__2802
1ed5c                 | LR__2824
1ed5c     7F 28 86 F1 | 	sub	local06, #127
1ed60     13 13 02 F6 | 	mov	arg01, local05
1ed64     1A 15 02 F6 | 	mov	arg02, local12
1ed68     14 17 02 F6 | 	mov	arg03, local06
1ed6c     12 19 02 F6 | 	mov	arg04, local04
1ed70     8C 33 B0 FD | 	call	#__system__pack_0540
1ed74                 | LR__2825
1ed74     A7 F0 03 F6 | 	mov	ptra, fp
1ed78     B2 00 A0 FD | 	call	#popregs_
1ed7c                 | __system___float_add_ret
1ed7c     2D 00 64 FD | 	ret
1ed80                 | 
1ed80                 | __system___float_sqrt
1ed80     04 4A 05 F6 | 	mov	COUNT_, #4
1ed84     A8 00 A0 FD | 	call	#pushregs_
1ed88     09 1F 02 F6 | 	mov	local01, arg01
1ed8c     09 FB 01 F6 | 	mov	result1, arg01
1ed90     FD 20 02 F6 | 	mov	local02, result1
1ed94     10 23 02 F6 | 	mov	local03, local02
1ed98     16 22 46 F7 | 	zerox	local03, #22
1ed9c     10 25 02 F6 | 	mov	local04, local02
1eda0     01 24 66 F0 | 	shl	local04, #1
1eda4     18 24 4E F0 | 	shr	local04, #24 wz
1eda8     1F 20 46 F0 | 	shr	local02, #31
1edac     70 00 90 AD |  if_e	jmp	#LR__2831
1edb0     17 22 26 F4 | 	bith	local03, #23
1edb4                 | LR__2830
1edb4     00 20 0E F2 | 	cmp	local02, #0 wz
1edb8     00 F8 3F 5F 
1edbc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1edc0     88 00 90 5D |  if_ne	jmp	#LR__2834
1edc4     FF 24 0E F2 | 	cmp	local04, #255 wz
1edc8     0F FB 01 A6 |  if_e	mov	result1, local01
1edcc     7C 00 90 AD |  if_e	jmp	#LR__2834
1edd0     7F 24 86 F1 | 	sub	local04, #127
1edd4     01 24 CE F7 | 	test	local04, #1 wz
1edd8     01 22 66 50 |  if_ne	shl	local03, #1
1eddc     05 22 66 F0 | 	shl	local03, #5
1ede0     11 01 38 FD | 	qsqrt	#0, local03
1ede4     01 24 86 51 |  if_ne	sub	local04, #1
1ede8     12 25 52 F6 | 	abs	local04, local04 wc
1edec     01 24 46 F0 | 	shr	local04, #1
1edf0     12 17 82 F6 | 	negc	arg03, local04
1edf4     10 19 02 F6 | 	mov	arg04, local02
1edf8     18 12 62 FD | 	getqx	arg01
1edfc     09 15 02 F6 | 	mov	arg02, arg01
1ee00     19 14 66 F0 | 	shl	arg02, #25
1ee04     07 12 46 F0 | 	shr	arg01, #7
1ee08     00 80 00 FF 
1ee0c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1ee10     01 16 06 31 |  if_ae	add	arg03, #1
1ee14     01 12 46 30 |  if_ae	shr	arg01, #1
1ee18     E4 32 B0 FD | 	call	#__system__pack_0540
1ee1c     2C 00 90 FD | 	jmp	#LR__2834
1ee20                 | LR__2831
1ee20     00 22 0E F2 | 	cmp	local03, #0 wz
1ee24     0F FB 01 A6 |  if_e	mov	result1, local01
1ee28     20 00 90 AD |  if_e	jmp	#LR__2834
1ee2c     01 22 66 F0 | 	shl	local03, #1
1ee30     97 0A 48 FB | 	callpa	#(@LR__2833-@LR__2832)>>2,fcache_load_ptr_
1ee34                 | LR__2832
1ee34     00 40 00 FF 
1ee38     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1ee3c     01 24 86 C1 |  if_b	sub	local04, #1
1ee40     01 22 66 C0 |  if_b	shl	local03, #1
1ee44     EC FF 9F CD |  if_b	jmp	#LR__2832
1ee48                 | LR__2833
1ee48     68 FF 9F FD | 	jmp	#LR__2830
1ee4c                 | LR__2834
1ee4c     A7 F0 03 F6 | 	mov	ptra, fp
1ee50     B2 00 A0 FD | 	call	#popregs_
1ee54                 | __system___float_sqrt_ret
1ee54     2D 00 64 FD | 	ret
1ee58                 | 
1ee58                 | __system___float_mul
1ee58     0B 4A 05 F6 | 	mov	COUNT_, #11
1ee5c     A8 00 A0 FD | 	call	#pushregs_
1ee60     09 1F 02 F6 | 	mov	local01, arg01
1ee64     0A 21 02 F6 | 	mov	local02, arg02
1ee68     0F 23 02 F6 | 	mov	local03, local01
1ee6c     11 25 02 F6 | 	mov	local04, local03
1ee70     16 24 46 F7 | 	zerox	local04, #22
1ee74     11 27 02 F6 | 	mov	local05, local03
1ee78     01 26 66 F0 | 	shl	local05, #1
1ee7c     18 26 46 F0 | 	shr	local05, #24
1ee80     1F 22 46 F0 | 	shr	local03, #31
1ee84     10 FB 01 F6 | 	mov	result1, local02
1ee88     FD 28 02 F6 | 	mov	local06, result1
1ee8c     14 2B 02 F6 | 	mov	local07, local06
1ee90     16 2A 46 F7 | 	zerox	local07, #22
1ee94     14 2D 02 F6 | 	mov	local08, local06
1ee98     01 2C 66 F0 | 	shl	local08, #1
1ee9c     18 2C 46 F0 | 	shr	local08, #24
1eea0     1F 28 46 F0 | 	shr	local06, #31
1eea4     14 23 62 F5 | 	xor	local03, local06
1eea8     FF 26 0E F2 | 	cmp	local05, #255 wz
1eeac     90 00 90 AD |  if_e	jmp	#LR__2843
1eeb0     FF 2C 0E F2 | 	cmp	local08, #255 wz
1eeb4     D8 00 90 AD |  if_e	jmp	#LR__2845
1eeb8     00 26 0E F2 | 	cmp	local05, #0 wz
1eebc     0C 01 90 AD |  if_e	jmp	#LR__2846
1eec0     17 24 26 F4 | 	bith	local04, #23
1eec4                 | LR__2840
1eec4     00 2C 0E F2 | 	cmp	local08, #0 wz
1eec8     44 01 90 AD |  if_e	jmp	#LR__2850
1eecc     17 2A 26 F4 | 	bith	local07, #23
1eed0                 | LR__2841
1eed0     12 21 02 F6 | 	mov	local02, local04
1eed4     04 20 66 F0 | 	shl	local02, #4
1eed8     15 29 02 F6 | 	mov	local06, local07
1eedc     05 28 66 F0 | 	shl	local06, #5
1eee0     14 21 02 FD | 	qmul	local02, local06
1eee4     16 27 02 F1 | 	add	local05, local08
1eee8     FE 26 86 F1 | 	sub	local05, #254
1eeec     13 2F 02 F6 | 	mov	local09, local05
1eef0     04 24 66 F0 | 	shl	local04, #4
1eef4     05 2A 66 F0 | 	shl	local07, #5
1eef8     18 30 62 FD | 	getqx	local10
1eefc     15 25 02 FD | 	qmul	local04, local07
1ef00     19 32 62 FD | 	getqy	local11
1ef04     00 80 00 FF 
1ef08     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1ef0c     18 00 90 CD |  if_b	jmp	#LR__2842
1ef10     01 2E 06 F1 | 	add	local09, #1
1ef14     01 30 46 F0 | 	shr	local10, #1
1ef18     19 2D 02 F6 | 	mov	local08, local11
1ef1c     1F 2C 66 F0 | 	shl	local08, #31
1ef20     16 31 42 F5 | 	or	local10, local08
1ef24     01 32 46 F0 | 	shr	local11, #1
1ef28                 | LR__2842
1ef28     19 13 02 F6 | 	mov	arg01, local11
1ef2c     18 15 02 F6 | 	mov	arg02, local10
1ef30     17 17 02 F6 | 	mov	arg03, local09
1ef34     11 19 02 F6 | 	mov	arg04, local03
1ef38     C4 31 B0 FD | 	call	#__system__pack_0540
1ef3c     10 01 90 FD | 	jmp	#LR__2854
1ef40                 | LR__2843
1ef40     00 24 0E F2 | 	cmp	local04, #0 wz
1ef44     0F FB 01 56 |  if_ne	mov	result1, local01
1ef48     04 01 90 5D |  if_ne	jmp	#LR__2854
1ef4c     FF 2C 56 F2 | 	cmps	local08, #255 wc
1ef50     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1ef54     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1ef58     18 00 90 4D |  if_c_and_nz	jmp	#LR__2844
1ef5c     00 F8 3F CF 
1ef60     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1ef64     E8 00 90 CD |  if_b	jmp	#LR__2854
1ef68     00 2A 0E F2 | 	cmp	local07, #0 wz
1ef6c     10 FB 01 56 |  if_ne	mov	result1, local02
1ef70     DC 00 90 5D |  if_ne	jmp	#LR__2854
1ef74                 | LR__2844
1ef74     02 22 46 F5 | 	or	local03, #2
1ef78     00 12 06 F6 | 	mov	arg01, #0
1ef7c     00 14 06 F6 | 	mov	arg02, #0
1ef80     13 17 02 F6 | 	mov	arg03, local05
1ef84     11 19 02 F6 | 	mov	arg04, local03
1ef88     74 31 B0 FD | 	call	#__system__pack_0540
1ef8c     C0 00 90 FD | 	jmp	#LR__2854
1ef90                 | LR__2845
1ef90     00 26 0E F2 | 	cmp	local05, #0 wz
1ef94     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1ef98     00 F8 3F AF 
1ef9c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1efa0     AC 00 90 AD |  if_e	jmp	#LR__2854
1efa4     00 2A 0E F2 | 	cmp	local07, #0 wz
1efa8     10 FB 01 56 |  if_ne	mov	result1, local02
1efac     A0 00 90 5D |  if_ne	jmp	#LR__2854
1efb0     16 17 02 F6 | 	mov	arg03, local08
1efb4     11 19 02 F6 | 	mov	arg04, local03
1efb8     02 18 46 F5 | 	or	arg04, #2
1efbc     00 12 06 F6 | 	mov	arg01, #0
1efc0     00 14 06 F6 | 	mov	arg02, #0
1efc4     38 31 B0 FD | 	call	#__system__pack_0540
1efc8     84 00 90 FD | 	jmp	#LR__2854
1efcc                 | LR__2846
1efcc     00 24 0E F2 | 	cmp	local04, #0 wz
1efd0     20 00 90 AD |  if_e	jmp	#LR__2849
1efd4     01 24 66 F0 | 	shl	local04, #1
1efd8     97 0A 48 FB | 	callpa	#(@LR__2848-@LR__2847)>>2,fcache_load_ptr_
1efdc                 | LR__2847
1efdc     00 40 00 FF 
1efe0     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1efe4     01 26 86 C1 |  if_b	sub	local05, #1
1efe8     01 24 66 C0 |  if_b	shl	local04, #1
1efec     EC FF 9F CD |  if_b	jmp	#LR__2847
1eff0                 | LR__2848
1eff0     D0 FE 9F FD | 	jmp	#LR__2840
1eff4                 | LR__2849
1eff4     08 22 46 F5 | 	or	local03, #8
1eff8     00 12 06 F6 | 	mov	arg01, #0
1effc     00 14 06 F6 | 	mov	arg02, #0
1f000     00 16 06 F6 | 	mov	arg03, #0
1f004     11 19 02 F6 | 	mov	arg04, local03
1f008     F4 30 B0 FD | 	call	#__system__pack_0540
1f00c     40 00 90 FD | 	jmp	#LR__2854
1f010                 | LR__2850
1f010     00 2A 0E F2 | 	cmp	local07, #0 wz
1f014     20 00 90 AD |  if_e	jmp	#LR__2853
1f018     01 2A 66 F0 | 	shl	local07, #1
1f01c     97 0A 48 FB | 	callpa	#(@LR__2852-@LR__2851)>>2,fcache_load_ptr_
1f020                 | LR__2851
1f020     00 40 00 FF 
1f024     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1f028     01 2C 86 C1 |  if_b	sub	local08, #1
1f02c     01 2A 66 C0 |  if_b	shl	local07, #1
1f030     EC FF 9F CD |  if_b	jmp	#LR__2851
1f034                 | LR__2852
1f034     98 FE 9F FD | 	jmp	#LR__2841
1f038                 | LR__2853
1f038     08 22 46 F5 | 	or	local03, #8
1f03c     00 12 06 F6 | 	mov	arg01, #0
1f040     00 14 06 F6 | 	mov	arg02, #0
1f044     00 16 06 F6 | 	mov	arg03, #0
1f048     11 19 02 F6 | 	mov	arg04, local03
1f04c     B0 30 B0 FD | 	call	#__system__pack_0540
1f050                 | LR__2854
1f050     A7 F0 03 F6 | 	mov	ptra, fp
1f054     B2 00 A0 FD | 	call	#popregs_
1f058                 | __system___float_mul_ret
1f058     2D 00 64 FD | 	ret
1f05c                 | 
1f05c                 | __system___float_div
1f05c     0E 4A 05 F6 | 	mov	COUNT_, #14
1f060     A8 00 A0 FD | 	call	#pushregs_
1f064     09 23 02 F6 | 	mov	local03, arg01
1f068     0A 25 02 F6 | 	mov	local04, arg02
1f06c     11 27 02 F6 | 	mov	local05, local03
1f070     13 29 02 F6 | 	mov	local06, local05
1f074     16 28 46 F7 | 	zerox	local06, #22
1f078     13 2B 02 F6 | 	mov	local07, local05
1f07c     01 2A 66 F0 | 	shl	local07, #1
1f080     18 2A 46 F0 | 	shr	local07, #24
1f084     1F 26 46 F0 | 	shr	local05, #31
1f088     12 FB 01 F6 | 	mov	result1, local04
1f08c     FD 2C 02 F6 | 	mov	local08, result1
1f090     16 2F 02 F6 | 	mov	local09, local08
1f094     16 2E 46 F7 | 	zerox	local09, #22
1f098     16 31 02 F6 | 	mov	local10, local08
1f09c     01 30 66 F0 | 	shl	local10, #1
1f0a0     18 30 46 F0 | 	shr	local10, #24
1f0a4     1F 2C 46 F0 | 	shr	local08, #31
1f0a8     16 27 62 F5 | 	xor	local05, local08
1f0ac     FF 2A 0E F2 | 	cmp	local07, #255 wz
1f0b0     D4 00 90 AD |  if_e	jmp	#LR__2865
1f0b4     FF 30 0E F2 | 	cmp	local10, #255 wz
1f0b8     04 01 90 AD |  if_e	jmp	#LR__2866
1f0bc     00 2A 0E F2 | 	cmp	local07, #0 wz
1f0c0     24 01 90 AD |  if_e	jmp	#LR__2867
1f0c4     17 28 26 F4 | 	bith	local06, #23
1f0c8                 | LR__2860
1f0c8     00 30 0E F2 | 	cmp	local10, #0 wz
1f0cc     70 01 90 AD |  if_e	jmp	#LR__2871
1f0d0     17 2E 26 F4 | 	bith	local09, #23
1f0d4                 | LR__2861
1f0d4     18 2B 82 F1 | 	sub	local07, local10
1f0d8     15 33 02 F6 | 	mov	local11, local07
1f0dc     14 13 02 F6 | 	mov	arg01, local06
1f0e0     02 12 46 F0 | 	shr	arg01, #2
1f0e4     1E 28 66 F0 | 	shl	local06, #30
1f0e8     14 15 02 F6 | 	mov	arg02, local06
1f0ec     17 17 02 F6 | 	mov	arg03, local09
1f0f0     28 12 62 FD | 	setq	arg01
1f0f4     0B 15 12 FD | 	qdiv	arg02, arg03
1f0f8     00 34 06 F6 | 	mov	local12, #0
1f0fc     18 1E 62 FD | 	getqx	local01
1f100     19 FC 61 FD | 	getqy	result2
1f104     FE 20 02 F6 | 	mov	local02, result2
1f108     0F 37 02 F6 | 	mov	local13, local01
1f10c     00 20 4E F2 | 	cmps	local02, #0 wz
1f110     1B 39 02 F6 | 	mov	local14, local13
1f114     19 38 66 F0 | 	shl	local14, #25
1f118     01 34 06 56 |  if_ne	mov	local12, #1
1f11c     1A 39 42 F5 | 	or	local14, local12
1f120     07 36 46 F0 | 	shr	local13, #7
1f124     00 80 00 FF 
1f128     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1f12c     1C 00 90 CD |  if_b	jmp	#LR__2862
1f130     01 32 06 F1 | 	add	local11, #1
1f134     01 38 46 F0 | 	shr	local14, #1
1f138     1B 35 02 F6 | 	mov	local12, local13
1f13c     1F 34 66 F0 | 	shl	local12, #31
1f140     1A 39 42 F5 | 	or	local14, local12
1f144     01 36 46 F0 | 	shr	local13, #1
1f148     24 00 90 FD | 	jmp	#LR__2864
1f14c                 | LR__2862
1f14c     00 40 00 FF 
1f150     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1f154     18 00 90 3D |  if_ae	jmp	#LR__2863
1f158     01 32 86 F1 | 	sub	local11, #1
1f15c     01 36 66 F0 | 	shl	local13, #1
1f160     1C 35 02 F6 | 	mov	local12, local14
1f164     1F 34 46 F0 | 	shr	local12, #31
1f168     1A 37 42 F5 | 	or	local13, local12
1f16c     01 38 66 F0 | 	shl	local14, #1
1f170                 | LR__2863
1f170                 | LR__2864
1f170     1B 13 02 F6 | 	mov	arg01, local13
1f174     1C 15 02 F6 | 	mov	arg02, local14
1f178     19 17 02 F6 | 	mov	arg03, local11
1f17c     13 19 02 F6 | 	mov	arg04, local05
1f180     7C 2F B0 FD | 	call	#__system__pack_0540
1f184     F8 00 90 FD | 	jmp	#LR__2875
1f188                 | LR__2865
1f188     00 28 0E F2 | 	cmp	local06, #0 wz
1f18c     11 FB 01 56 |  if_ne	mov	result1, local03
1f190     EC 00 90 5D |  if_ne	jmp	#LR__2875
1f194     FF 30 0E F2 | 	cmp	local10, #255 wz
1f198     00 F8 3F AF 
1f19c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f1a0     DC 00 90 AD |  if_e	jmp	#LR__2875
1f1a4     02 26 46 F5 | 	or	local05, #2
1f1a8     00 12 06 F6 | 	mov	arg01, #0
1f1ac     00 14 06 F6 | 	mov	arg02, #0
1f1b0     15 17 02 F6 | 	mov	arg03, local07
1f1b4     13 19 02 F6 | 	mov	arg04, local05
1f1b8     44 2F B0 FD | 	call	#__system__pack_0540
1f1bc     C0 00 90 FD | 	jmp	#LR__2875
1f1c0                 | LR__2866
1f1c0     00 2E 0E F2 | 	cmp	local09, #0 wz
1f1c4     12 FB 01 56 |  if_ne	mov	result1, local04
1f1c8     B4 00 90 5D |  if_ne	jmp	#LR__2875
1f1cc     13 19 02 F6 | 	mov	arg04, local05
1f1d0     08 18 46 F5 | 	or	arg04, #8
1f1d4     00 12 06 F6 | 	mov	arg01, #0
1f1d8     00 14 06 F6 | 	mov	arg02, #0
1f1dc     00 16 06 F6 | 	mov	arg03, #0
1f1e0     1C 2F B0 FD | 	call	#__system__pack_0540
1f1e4     98 00 90 FD | 	jmp	#LR__2875
1f1e8                 | LR__2867
1f1e8     00 28 0E F2 | 	cmp	local06, #0 wz
1f1ec     20 00 90 AD |  if_e	jmp	#LR__2870
1f1f0     01 28 66 F0 | 	shl	local06, #1
1f1f4     97 0A 48 FB | 	callpa	#(@LR__2869-@LR__2868)>>2,fcache_load_ptr_
1f1f8                 | LR__2868
1f1f8     00 40 00 FF 
1f1fc     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1f200     01 2A 86 C1 |  if_b	sub	local07, #1
1f204     01 28 66 C0 |  if_b	shl	local06, #1
1f208     EC FF 9F CD |  if_b	jmp	#LR__2868
1f20c                 | LR__2869
1f20c     B8 FE 9F FD | 	jmp	#LR__2860
1f210                 | LR__2870
1f210     00 30 0E F2 | 	cmp	local10, #0 wz
1f214     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1f218     00 F8 3F AF 
1f21c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1f220     5C 00 90 AD |  if_e	jmp	#LR__2875
1f224     13 19 02 F6 | 	mov	arg04, local05
1f228     08 18 46 F5 | 	or	arg04, #8
1f22c     00 12 06 F6 | 	mov	arg01, #0
1f230     00 14 06 F6 | 	mov	arg02, #0
1f234     00 16 06 F6 | 	mov	arg03, #0
1f238     C4 2E B0 FD | 	call	#__system__pack_0540
1f23c     40 00 90 FD | 	jmp	#LR__2875
1f240                 | LR__2871
1f240     00 2E 0E F2 | 	cmp	local09, #0 wz
1f244     20 00 90 AD |  if_e	jmp	#LR__2874
1f248     01 2E 66 F0 | 	shl	local09, #1
1f24c     97 0A 48 FB | 	callpa	#(@LR__2873-@LR__2872)>>2,fcache_load_ptr_
1f250                 | LR__2872
1f250     00 40 00 FF 
1f254     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1f258     01 30 86 C1 |  if_b	sub	local10, #1
1f25c     01 2E 66 C0 |  if_b	shl	local09, #1
1f260     EC FF 9F CD |  if_b	jmp	#LR__2872
1f264                 | LR__2873
1f264     6C FE 9F FD | 	jmp	#LR__2861
1f268                 | LR__2874
1f268     02 26 46 F5 | 	or	local05, #2
1f26c     00 12 06 F6 | 	mov	arg01, #0
1f270     00 14 06 F6 | 	mov	arg02, #0
1f274     00 16 06 F6 | 	mov	arg03, #0
1f278     13 19 02 F6 | 	mov	arg04, local05
1f27c     80 2E B0 FD | 	call	#__system__pack_0540
1f280                 | LR__2875
1f280     A7 F0 03 F6 | 	mov	ptra, fp
1f284     B2 00 A0 FD | 	call	#popregs_
1f288                 | __system___float_div_ret
1f288     2D 00 64 FD | 	ret
1f28c                 | 
1f28c                 | __system___float_cmp
1f28c     00 C0 3F FF 
1f290     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1f294     00 C0 3F CF 
1f298     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1f29c     0B FB 01 36 |  if_ae	mov	result1, arg03
1f2a0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1f2a4     00 C0 7F FF 
1f2a8     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1f2ac     00 C0 7F CF 
1f2b0     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1f2b4     0B FB 01 36 |  if_ae	mov	result1, arg03
1f2b8     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1f2bc     00 12 56 F2 | 	cmps	arg01, #0 wc
1f2c0     2C 00 90 3D |  if_ae	jmp	#LR__2880
1f2c4     00 14 56 F2 | 	cmps	arg02, #0 wc
1f2c8     0A FB 01 C6 |  if_b	mov	result1, arg02
1f2cc     09 FB 81 C1 |  if_b	sub	result1, arg01
1f2d0     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1f2d4     00 14 0E F2 | 	cmp	arg02, #0 wz
1f2d8     00 00 40 AF 
1f2dc     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1f2e0     00 FA 05 A6 |  if_e	mov	result1, #0
1f2e4     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1f2e8     01 FA 65 F6 | 	neg	result1, #1
1f2ec     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1f2f0                 | LR__2880
1f2f0     00 14 56 F2 | 	cmps	arg02, #0 wc
1f2f4     1C 00 90 3D |  if_ae	jmp	#LR__2881
1f2f8     00 12 0E F2 | 	cmp	arg01, #0 wz
1f2fc     00 00 40 AF 
1f300     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1f304     00 FA 05 A6 |  if_e	mov	result1, #0
1f308     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1f30c     01 FA 05 F6 | 	mov	result1, #1
1f310     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1f314                 | LR__2881
1f314     0A 13 82 F1 | 	sub	arg01, arg02
1f318     09 FB 01 F6 | 	mov	result1, arg01
1f31c                 | __system___float_cmp_ret
1f31c     2D 00 64 FD | 	ret
1f320                 | 
1f320                 | __system___float_tointeger
1f320     02 4A 05 F6 | 	mov	COUNT_, #2
1f324     A8 00 A0 FD | 	call	#pushregs_
1f328     50 00 B0 FD | 	call	#__system___float_Unpack
1f32c     FF FF 7F FF 
1f330     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1f334     34 00 90 CD |  if_b	jmp	#LR__2890
1f338     1F FC 55 F2 | 	cmps	result2, #31 wc
1f33c     2C 00 90 3D |  if_ae	jmp	#LR__2890
1f340     02 FE 65 F0 | 	shl	result3, #2
1f344     1E 1E 06 F6 | 	mov	local01, #30
1f348     FE 1E 82 F1 | 	sub	local01, result2
1f34c     0F FF 41 F0 | 	shr	result3, local01
1f350     FF 20 02 F6 | 	mov	local02, result3
1f354     0A 21 02 F1 | 	add	local02, arg02
1f358     01 20 46 F0 | 	shr	local02, #1
1f35c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f360     10 21 62 56 |  if_ne	neg	local02, local02
1f364     10 FB 01 F6 | 	mov	result1, local02
1f368     04 00 90 FD | 	jmp	#LR__2891
1f36c                 | LR__2890
1f36c     00 FA 05 F6 | 	mov	result1, #0
1f370                 | LR__2891
1f370     A7 F0 03 F6 | 	mov	ptra, fp
1f374     B2 00 A0 FD | 	call	#popregs_
1f378                 | __system___float_tointeger_ret
1f378     2D 00 64 FD | 	ret
1f37c                 | 
1f37c                 | __system___float_Unpack
1f37c     09 01 02 F6 | 	mov	_var01, arg01
1f380     1F 00 46 F0 | 	shr	_var01, #31
1f384     09 03 02 F6 | 	mov	_var02, arg01
1f388     01 02 66 F0 | 	shl	_var02, #1
1f38c     18 02 4E F0 | 	shr	_var02, #24 wz
1f390     17 13 06 F4 | 	bitl	arg01, #279
1f394     06 12 66 50 |  if_ne	shl	arg01, #6
1f398     1D 12 26 54 |  if_ne	bith	arg01, #29
1f39c     1C 00 90 5D |  if_ne	jmp	#LR__2900
1f3a0     09 05 92 F7 | 	encod	_var03, arg01 wc
1f3a4     01 04 06 C1 |  if_b	add	_var03, #1
1f3a8     17 04 86 F1 | 	sub	_var03, #23
1f3ac     02 03 02 F6 | 	mov	_var02, _var03
1f3b0     07 FC 05 F6 | 	mov	result2, #7
1f3b4     02 FD 81 F1 | 	sub	result2, _var03
1f3b8     FE 12 62 F0 | 	shl	arg01, result2
1f3bc                 | LR__2900
1f3bc     7F 02 86 F1 | 	sub	_var02, #127
1f3c0     09 FF 01 F6 | 	mov	result3, arg01
1f3c4     00 FB 01 F6 | 	mov	result1, _var01
1f3c8     01 FD 01 F6 | 	mov	result2, _var02
1f3cc                 | __system___float_Unpack_ret
1f3cc     2D 00 64 FD | 	ret
1f3d0                 | 
1f3d0                 | __system___float_Pack
1f3d0     00 00 06 F6 | 	mov	_var01, #0
1f3d4     00 16 0E F2 | 	cmp	arg03, #0 wz
1f3d8     8C 00 90 AD |  if_e	jmp	#LR__2911
1f3dc     0B 03 92 F7 | 	encod	_var02, arg03 wc
1f3e0     01 02 06 C1 |  if_b	add	_var02, #1
1f3e4     21 00 06 F6 | 	mov	_var01, #33
1f3e8     01 01 82 F1 | 	sub	_var01, _var02
1f3ec     00 17 62 F0 | 	shl	arg03, _var01
1f3f0     03 02 06 F6 | 	mov	_var02, #3
1f3f4     00 03 82 F1 | 	sub	_var02, _var01
1f3f8     01 15 02 F1 | 	add	arg02, _var02
1f3fc     0A 05 02 F6 | 	mov	_var03, arg02
1f400     00 17 06 F1 | 	add	arg03, #256
1f404     0B 03 02 F6 | 	mov	_var02, arg03
1f408     FF 02 2E F5 | 	andn	_var02, #255 wz
1f40c     01 04 06 A1 |  if_e	add	_var03, #1
1f410     7F 04 06 F1 | 	add	_var03, #127
1f414     FF FF 7F FF 
1f418     E9 05 46 F3 | 	fges	_var03, ##-23
1f41c     FF 04 66 F3 | 	fles	_var03, #255
1f420     01 04 56 F2 | 	cmps	_var03, #1 wc
1f424     1C 00 90 3D |  if_ae	jmp	#LR__2910
1f428     01 16 46 F0 | 	shr	arg03, #1
1f42c     1F 02 C6 F9 | 	decod	_var02, #31
1f430     0B 03 02 F1 | 	add	_var02, arg03
1f434     02 05 62 F6 | 	neg	_var03, _var03
1f438     02 03 42 F0 | 	shr	_var02, _var03
1f43c     01 17 02 F6 | 	mov	arg03, _var02
1f440     00 04 06 F6 | 	mov	_var03, #0
1f444                 | LR__2910
1f444     09 FB 01 F6 | 	mov	result1, arg01
1f448     1F FA 65 F0 | 	shl	result1, #31
1f44c     02 03 02 F6 | 	mov	_var02, _var03
1f450     17 02 66 F0 | 	shl	_var02, #23
1f454     01 FB 41 F5 | 	or	result1, _var02
1f458     0B 07 02 F6 | 	mov	_var04, arg03
1f45c     09 06 46 F0 | 	shr	_var04, #9
1f460     03 FB 41 F5 | 	or	result1, _var04
1f464     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1f468                 | LR__2911
1f468     00 FB 01 F6 | 	mov	result1, _var01
1f46c                 | __system___float_Pack_ret
1f46c     2D 00 64 FD | 	ret
1f470                 | 
1f470                 | __system___basic_print_float
1f470     05 4A 05 F6 | 	mov	COUNT_, #5
1f474     A8 00 A0 FD | 	call	#pushregs_
1f478     09 1F 02 F6 | 	mov	local01, arg01
1f47c     0A 21 02 F6 | 	mov	local02, arg02
1f480     0B 23 0A F6 | 	mov	local03, arg03 wz
1f484     0C 25 02 F6 | 	mov	local04, arg04
1f488     14 00 90 5D |  if_ne	jmp	#LR__2920
1f48c     23 24 0E F2 | 	cmp	local04, #35 wz
1f490     80 02 10 AF 
1f494     00 26 06 A6 |  if_e	mov	local05, ##537198592
1f498     1D 26 C6 59 |  if_ne	decod	local05, #29
1f49c     13 23 02 F6 | 	mov	local03, local05
1f4a0                 | LR__2920
1f4a0     0F 13 02 F6 | 	mov	arg01, local01
1f4a4     40 27 B0 FD | 	call	#__system___gettxfunc
1f4a8     FD 26 0A F6 | 	mov	local05, result1 wz
1f4ac     00 FA 05 A6 |  if_e	mov	result1, #0
1f4b0     13 13 02 56 |  if_ne	mov	arg01, local05
1f4b4     11 15 02 56 |  if_ne	mov	arg02, local03
1f4b8     10 17 02 56 |  if_ne	mov	arg03, local02
1f4bc     12 19 02 56 |  if_ne	mov	arg04, local04
1f4c0     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
1f4c4     A7 F0 03 F6 | 	mov	ptra, fp
1f4c8     B2 00 A0 FD | 	call	#popregs_
1f4cc                 | __system___basic_print_float_ret
1f4cc     2D 00 64 FD | 	ret
1f4d0                 | 
1f4d0                 | __system____builtin_atoi
1f4d0     07 4A 05 F6 | 	mov	COUNT_, #7
1f4d4     A8 00 A0 FD | 	call	#pushregs_
1f4d8                 | __system____builtin_atoi_enter
1f4d8     09 1F 02 F6 | 	mov	local01, arg01
1f4dc     0A 21 02 F6 | 	mov	local02, arg02
1f4e0     00 22 06 F6 | 	mov	local03, #0
1f4e4     00 24 06 F6 | 	mov	local04, #0
1f4e8     00 26 06 F6 | 	mov	local05, #0
1f4ec     97 08 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
1f4f0                 | LR__2930
1f4f0     0F 29 C2 FA | 	rdbyte	local06, local01
1f4f4     20 28 0E F2 | 	cmp	local06, #32 wz
1f4f8     01 1E 06 A1 |  if_e	add	local01, #1
1f4fc     F0 FF 9F AD |  if_e	jmp	#LR__2930
1f500                 | LR__2931
1f500     0F 2B C2 FA | 	rdbyte	local07, local01
1f504                 | LR__2932
1f504     2D 2A 0E F2 | 	cmp	local07, #45 wz
1f508     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1f50c     18 00 90 5D |  if_ne	jmp	#LR__2933
1f510     01 1E 06 F1 | 	add	local01, #1
1f514     2D 2A 0E F2 | 	cmp	local07, #45 wz
1f518     01 28 06 A6 |  if_e	mov	local06, #1
1f51c     14 27 C2 A2 |  if_e	subr	local05, local06
1f520     0F 2B C2 FA | 	rdbyte	local07, local01
1f524     DC FF 9F FD | 	jmp	#LR__2932
1f528                 | LR__2933
1f528     97 48 48 FB | 	callpa	#(@LR__2941-@LR__2934)>>2,fcache_load_ptr_
1f52c                 | LR__2934
1f52c                 | LR__2935
1f52c     0F 2B C2 FA | 	rdbyte	local07, local01
1f530     5F 2A 0E F2 | 	cmp	local07, #95 wz
1f534     01 1E 06 F1 | 	add	local01, #1
1f538     F0 FF 9F AD |  if_e	jmp	#LR__2935
1f53c     30 2A 0E F2 | 	cmp	local07, #48 wz
1f540     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1f544     00 24 06 A6 |  if_e	mov	local04, #0
1f548     60 00 90 AD |  if_e	jmp	#LR__2940
1f54c     31 2A 56 F2 | 	cmps	local07, #49 wc
1f550     18 00 90 CD |  if_b	jmp	#LR__2936
1f554     3A 2A 56 F2 | 	cmps	local07, #58 wc
1f558     15 25 02 C6 |  if_b	mov	local04, local07
1f55c     30 24 86 C1 |  if_b	sub	local04, #48
1f560     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1f564     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1f568     40 00 90 CD |  if_b	jmp	#LR__2939
1f56c                 | LR__2936
1f56c     0B 20 56 F2 | 	cmps	local02, #11 wc
1f570     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1f574     14 00 90 CD |  if_b	jmp	#LR__2937
1f578     67 2A 56 F2 | 	cmps	local07, #103 wc
1f57c     61 2A 86 C1 |  if_b	sub	local07, #97
1f580     0A 24 06 C6 |  if_b	mov	local04, #10
1f584     15 25 02 C1 |  if_b	add	local04, local07
1f588     20 00 90 CD |  if_b	jmp	#LR__2938
1f58c                 | LR__2937
1f58c     0B 20 56 F2 | 	cmps	local02, #11 wc
1f590     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1f594     24 00 90 CD |  if_b	jmp	#LR__2942
1f598     47 2A 56 F2 | 	cmps	local07, #71 wc
1f59c     41 2A 86 C1 |  if_b	sub	local07, #65
1f5a0     0A 24 06 C6 |  if_b	mov	local04, #10
1f5a4     15 25 02 C1 |  if_b	add	local04, local07
1f5a8     10 00 90 3D |  if_ae	jmp	#LR__2942
1f5ac                 | LR__2938
1f5ac                 | LR__2939
1f5ac                 | LR__2940
1f5ac     11 21 02 FD | 	qmul	local02, local03
1f5b0     18 22 62 FD | 	getqx	local03
1f5b4     12 23 02 F1 | 	add	local03, local04
1f5b8     70 FF 9F FD | 	jmp	#LR__2934
1f5bc                 | LR__2941
1f5bc                 | LR__2942
1f5bc     00 20 0E F2 | 	cmp	local02, #0 wz
1f5c0     64 00 90 5D |  if_ne	jmp	#LR__2948
1f5c4     78 2A 0E F2 | 	cmp	local07, #120 wz
1f5c8     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1f5cc     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1f5d0     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1f5d4     14 00 90 5D |  if_ne	jmp	#LR__2943
1f5d8     0F 13 02 F6 | 	mov	arg01, local01
1f5dc     10 14 06 F6 | 	mov	arg02, #16
1f5e0     EC FE BF FD | 	call	#__system____builtin_atoi
1f5e4     FD 22 02 F6 | 	mov	local03, result1
1f5e8     3C 00 90 FD | 	jmp	#LR__2947
1f5ec                 | LR__2943
1f5ec     62 2A 0E F2 | 	cmp	local07, #98 wz
1f5f0     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1f5f4     14 00 90 5D |  if_ne	jmp	#LR__2944
1f5f8     0F 13 02 F6 | 	mov	arg01, local01
1f5fc     02 14 06 F6 | 	mov	arg02, #2
1f600     CC FE BF FD | 	call	#__system____builtin_atoi
1f604     FD 22 02 F6 | 	mov	local03, result1
1f608     1C 00 90 FD | 	jmp	#LR__2946
1f60c                 | LR__2944
1f60c     6F 2A 0E F2 | 	cmp	local07, #111 wz
1f610     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1f614     10 00 90 5D |  if_ne	jmp	#LR__2945
1f618     0F 13 02 F6 | 	mov	arg01, local01
1f61c     08 14 06 F6 | 	mov	arg02, #8
1f620     AC FE BF FD | 	call	#__system____builtin_atoi
1f624     FD 22 02 F6 | 	mov	local03, result1
1f628                 | LR__2945
1f628                 | LR__2946
1f628                 | LR__2947
1f628                 | LR__2948
1f628     00 26 0E F2 | 	cmp	local05, #0 wz
1f62c     11 23 62 56 |  if_ne	neg	local03, local03
1f630     11 FB 01 F6 | 	mov	result1, local03
1f634     A7 F0 03 F6 | 	mov	ptra, fp
1f638     B2 00 A0 FD | 	call	#popregs_
1f63c                 | __system____builtin_atoi_ret
1f63c     2D 00 64 FD | 	ret
1f640                 | 
1f640                 | __system____builtin_atof
1f640     07 4A 05 F6 | 	mov	COUNT_, #7
1f644     A8 00 A0 FD | 	call	#pushregs_
1f648     09 1F 02 F6 | 	mov	local01, arg01
1f64c     00 20 06 F6 | 	mov	local02, #0
1f650     00 22 06 F6 | 	mov	local03, #0
1f654     00 24 06 F6 | 	mov	local04, #0
1f658     00 26 06 F6 | 	mov	local05, #0
1f65c     97 08 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
1f660                 | LR__2950
1f660     0F 17 C2 FA | 	rdbyte	arg03, local01
1f664     20 16 0E F2 | 	cmp	arg03, #32 wz
1f668     01 1E 06 A1 |  if_e	add	local01, #1
1f66c     F0 FF 9F AD |  if_e	jmp	#LR__2950
1f670                 | LR__2951
1f670     0F 29 C2 FA | 	rdbyte	local06, local01
1f674                 | LR__2952
1f674     2B 28 0E F2 | 	cmp	local06, #43 wz
1f678     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1f67c     14 00 90 5D |  if_ne	jmp	#LR__2953
1f680     2D 28 0E F2 | 	cmp	local06, #45 wz
1f684     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1f688     01 1E 06 F1 | 	add	local01, #1
1f68c     0F 29 C2 FA | 	rdbyte	local06, local01
1f690     E0 FF 9F FD | 	jmp	#LR__2952
1f694                 | LR__2953
1f694                 | LR__2954
1f694     97 08 48 FB | 	callpa	#(@LR__2956-@LR__2955)>>2,fcache_load_ptr_
1f698                 | LR__2955
1f698     0F 29 C2 FA | 	rdbyte	local06, local01
1f69c     5F 28 0E F2 | 	cmp	local06, #95 wz
1f6a0     01 1E 06 F1 | 	add	local01, #1
1f6a4     F0 FF 9F AD |  if_e	jmp	#LR__2955
1f6a8                 | LR__2956
1f6a8     00 28 0E F2 | 	cmp	local06, #0 wz
1f6ac     5C 00 90 AD |  if_e	jmp	#LR__2958
1f6b0     30 28 56 F2 | 	cmps	local06, #48 wc
1f6b4     44 00 90 CD |  if_b	jmp	#LR__2957
1f6b8     3A 28 56 F2 | 	cmps	local06, #58 wc
1f6bc     3C 00 90 3D |  if_ae	jmp	#LR__2957
1f6c0     10 13 02 F6 | 	mov	arg01, local02
1f6c4     00 90 20 FF 
1f6c8     00 14 06 F6 | 	mov	arg02, ##1092616192
1f6cc     88 F7 BF FD | 	call	#__system___float_mul
1f6d0     FD 20 02 F6 | 	mov	local02, result1
1f6d4     30 28 86 F1 | 	sub	local06, #48
1f6d8     14 13 02 F6 | 	mov	arg01, local06
1f6dc     74 F3 BF FD | 	call	#__system___float_fromuns
1f6e0     FD 14 02 F6 | 	mov	arg02, result1
1f6e4     10 13 02 F6 | 	mov	arg01, local02
1f6e8     9C F3 BF FD | 	call	#__system___float_add
1f6ec     FD 20 02 F6 | 	mov	local02, result1
1f6f0     00 26 0E F2 | 	cmp	local05, #0 wz
1f6f4     01 22 86 51 |  if_ne	sub	local03, #1
1f6f8     98 FF 9F FD | 	jmp	#LR__2954
1f6fc                 | LR__2957
1f6fc     2E 28 0E F2 | 	cmp	local06, #46 wz
1f700     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1f704     01 26 06 A6 |  if_e	mov	local05, #1
1f708     88 FF 9F AD |  if_e	jmp	#LR__2954
1f70c                 | LR__2958
1f70c     45 28 0E F2 | 	cmp	local06, #69 wz
1f710     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1f714     18 00 90 5D |  if_ne	jmp	#LR__2959
1f718     0F 13 02 F6 | 	mov	arg01, local01
1f71c     00 14 06 F6 | 	mov	arg02, #0
1f720     AC FD BF FD | 	call	#__system____builtin_atoi
1f724     11 FB 01 F1 | 	add	result1, local03
1f728     FD 2A 02 F6 | 	mov	local07, result1
1f72c     04 00 90 FD | 	jmp	#LR__2960
1f730                 | LR__2959
1f730     11 2B 02 F6 | 	mov	local07, local03
1f734                 | LR__2960
1f734     15 17 02 F6 | 	mov	arg03, local07
1f738     10 13 02 F6 | 	mov	arg01, local02
1f73c     00 90 20 FF 
1f740     00 14 06 F6 | 	mov	arg02, ##1092616192
1f744     BC 06 B0 FD | 	call	#__system___float_pow_n
1f748     12 FB 61 F5 | 	xor	result1, local04
1f74c     A7 F0 03 F6 | 	mov	ptra, fp
1f750     B2 00 A0 FD | 	call	#popregs_
1f754                 | __system____builtin_atof_ret
1f754     2D 00 64 FD | 	ret
1f758                 | 
1f758                 | __system____builtin_ilogb
1f758     20 FC BF FD | 	call	#__system___float_Unpack
1f75c     00 FE 0D F2 | 	cmp	result3, #0 wz
1f760     00 00 40 AF 
1f764     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1f768     24 00 90 AD |  if_e	jmp	#LR__2971
1f76c     80 FC 0D F2 | 	cmp	result2, #128 wz
1f770     18 00 90 5D |  if_ne	jmp	#LR__2970
1f774     00 00 10 FF 
1f778     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1f77c     1E FA CD A9 |  if_e	bmask	result1, #30
1f780     0C 00 90 AD |  if_e	jmp	#LR__2971
1f784     1F FA C5 F9 | 	decod	result1, #31
1f788     04 00 90 FD | 	jmp	#LR__2971
1f78c                 | LR__2970
1f78c     FE FA 01 F6 | 	mov	result1, result2
1f790                 | LR__2971
1f790                 | __system____builtin_ilogb_ret
1f790     2D 00 64 FD | 	ret
1f794                 | 
1f794                 | __system____builtin_sinf
1f794     03 4A 05 F6 | 	mov	COUNT_, #3
1f798     A8 00 A0 FD | 	call	#pushregs_
1f79c     09 1F 02 F6 | 	mov	local01, arg01
1f7a0     87 64 20 FF 
1f7a4     DB 15 06 F6 | 	mov	arg02, ##1086918619
1f7a8     B0 F8 BF FD | 	call	#__system___float_div
1f7ac     FD 12 02 F6 | 	mov	arg01, result1
1f7b0     00 14 06 F6 | 	mov	arg02, #0
1f7b4     68 FB BF FD | 	call	#__system___float_tointeger
1f7b8     FD 16 0A F6 | 	mov	arg03, result1 wz
1f7bc     44 00 90 AD |  if_e	jmp	#LR__2980
1f7c0     0B 13 52 F6 | 	abs	arg01, arg03 wc
1f7c4     1F 20 C6 C9 |  if_b	decod	local02, #31
1f7c8     00 20 06 36 |  if_ae	mov	local02, #0
1f7cc     84 F2 BF FD | 	call	#__system___float_fromuns
1f7d0     10 FB 61 F5 | 	xor	result1, local02
1f7d4     FD 12 02 F6 | 	mov	arg01, result1
1f7d8     1E 14 C6 F9 | 	decod	arg02, #30
1f7dc     78 F6 BF FD | 	call	#__system___float_mul
1f7e0     FD 12 02 F6 | 	mov	arg01, result1
1f7e4     87 24 20 FF 
1f7e8     DB 15 06 F6 | 	mov	arg02, ##1078530011
1f7ec     68 F6 BF FD | 	call	#__system___float_mul
1f7f0     FD 14 02 F6 | 	mov	arg02, result1
1f7f4     0F 13 02 F6 | 	mov	arg01, local01
1f7f8     1F 14 E6 F4 | 	bitnot	arg02, #31
1f7fc     88 F2 BF FD | 	call	#__system___float_add
1f800     FD 1E 02 F6 | 	mov	local01, result1
1f804                 | LR__2980
1f804     0F 13 02 F6 | 	mov	arg01, local01
1f808     66 E6 1E FF 
1f80c     CD 14 06 F6 | 	mov	arg02, ##1036831949
1f810     01 16 06 F6 | 	mov	arg03, #1
1f814     74 FA BF FD | 	call	#__system___float_cmp
1f818     00 FA 55 F2 | 	cmps	result1, #0 wc
1f81c     5C 00 90 3D |  if_ae	jmp	#LR__2981
1f820     0F 13 02 F6 | 	mov	arg01, local01
1f824     66 E6 5E FF 
1f828     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1f82c     01 16 66 F6 | 	neg	arg03, #1
1f830     58 FA BF FD | 	call	#__system___float_cmp
1f834     01 FA 55 F2 | 	cmps	result1, #1 wc
1f838     40 00 90 CD |  if_b	jmp	#LR__2981
1f83c     0F 13 02 F6 | 	mov	arg01, local01
1f840     0F 15 02 F6 | 	mov	arg02, local01
1f844     10 F6 BF FD | 	call	#__system___float_mul
1f848     FD 12 02 F6 | 	mov	arg01, result1
1f84c     0F 15 02 F6 | 	mov	arg02, local01
1f850     04 F6 BF FD | 	call	#__system___float_mul
1f854     FD 12 02 F6 | 	mov	arg01, result1
1f858     00 60 20 FF 
1f85c     00 14 06 F6 | 	mov	arg02, ##1086324736
1f860     F8 F7 BF FD | 	call	#__system___float_div
1f864     FD 14 02 F6 | 	mov	arg02, result1
1f868     0F 13 02 F6 | 	mov	arg01, local01
1f86c     1F 14 E6 F4 | 	bitnot	arg02, #31
1f870     14 F2 BF FD | 	call	#__system___float_add
1f874     FD 22 02 F6 | 	mov	local03, result1
1f878     54 00 90 FD | 	jmp	#LR__2982
1f87c                 | LR__2981
1f87c     0F 13 02 F6 | 	mov	arg01, local01
1f880     7C 91 26 FF 
1f884     83 15 06 F6 | 	mov	arg02, ##1294137731
1f888     CC F5 BF FD | 	call	#__system___float_mul
1f88c     FD 12 02 F6 | 	mov	arg01, result1
1f890     00 14 06 F6 | 	mov	arg02, #0
1f894     88 FA BF FD | 	call	#__system___float_tointeger
1f898     02 FA 65 F0 | 	shl	result1, #2
1f89c     00 00 A0 FF 
1f8a0     FD 00 48 FD | 	qrotate	##1073741824, result1
1f8a4     19 12 62 FD | 	getqy	arg01
1f8a8     09 13 52 F6 | 	abs	arg01, arg01 wc
1f8ac     1F 20 C6 C9 |  if_b	decod	local02, #31
1f8b0     00 20 06 36 |  if_ae	mov	local02, #0
1f8b4     9C F1 BF FD | 	call	#__system___float_fromuns
1f8b8     10 FB 61 F5 | 	xor	result1, local02
1f8bc     FD 12 02 F6 | 	mov	arg01, result1
1f8c0     00 40 27 FF 
1f8c4     00 14 06 F6 | 	mov	arg02, ##1317011456
1f8c8     90 F7 BF FD | 	call	#__system___float_div
1f8cc     FD 22 02 F6 | 	mov	local03, result1
1f8d0                 | LR__2982
1f8d0     11 FB 01 F6 | 	mov	result1, local03
1f8d4     A7 F0 03 F6 | 	mov	ptra, fp
1f8d8     B2 00 A0 FD | 	call	#popregs_
1f8dc                 | __system____builtin_sinf_ret
1f8dc     2D 00 64 FD | 	ret
1f8e0                 | 
1f8e0                 | __system____builtin_tanf
1f8e0     02 4A 05 F6 | 	mov	COUNT_, #2
1f8e4     A8 00 A0 FD | 	call	#pushregs_
1f8e8     09 1F 02 F6 | 	mov	local01, arg01
1f8ec     A4 FE BF FD | 	call	#__system____builtin_sinf
1f8f0     FD 20 02 F6 | 	mov	local02, result1
1f8f4     0F 15 02 F6 | 	mov	arg02, local01
1f8f8     87 E4 1F FF 
1f8fc     DB 13 06 F6 | 	mov	arg01, ##1070141403
1f900     1F 14 E6 F4 | 	bitnot	arg02, #31
1f904     80 F1 BF FD | 	call	#__system___float_add
1f908     FD 12 02 F6 | 	mov	arg01, result1
1f90c     84 FE BF FD | 	call	#__system____builtin_sinf
1f910     FD 14 02 F6 | 	mov	arg02, result1
1f914     10 13 02 F6 | 	mov	arg01, local02
1f918     40 F7 BF FD | 	call	#__system___float_div
1f91c     A7 F0 03 F6 | 	mov	ptra, fp
1f920     B2 00 A0 FD | 	call	#popregs_
1f924                 | __system____builtin_tanf_ret
1f924     2D 00 64 FD | 	ret
1f928                 | 
1f928                 | __system____builtin_asinf
1f928     01 4A 05 F6 | 	mov	COUNT_, #1
1f92c     A8 00 A0 FD | 	call	#pushregs_
1f930     09 1F 02 F6 | 	mov	local01, arg01
1f934     0F 15 02 F6 | 	mov	arg02, local01
1f938     0F 13 02 F6 | 	mov	arg01, local01
1f93c     18 F5 BF FD | 	call	#__system___float_mul
1f940     FD 14 02 F6 | 	mov	arg02, result1
1f944     00 C0 1F FF 
1f948     00 12 06 F6 | 	mov	arg01, ##1065353216
1f94c     1F 14 E6 F4 | 	bitnot	arg02, #31
1f950     34 F1 BF FD | 	call	#__system___float_add
1f954     FD 12 02 F6 | 	mov	arg01, result1
1f958     24 F4 BF FD | 	call	#__system___float_sqrt
1f95c     FD 14 02 F6 | 	mov	arg02, result1
1f960     0F 13 02 F6 | 	mov	arg01, local01
1f964     58 00 B0 FD | 	call	#__system____builtin_atan2f
1f968     A7 F0 03 F6 | 	mov	ptra, fp
1f96c     B2 00 A0 FD | 	call	#popregs_
1f970                 | __system____builtin_asinf_ret
1f970     2D 00 64 FD | 	ret
1f974                 | 
1f974                 | __system____builtin_acosf
1f974     01 4A 05 F6 | 	mov	COUNT_, #1
1f978     A8 00 A0 FD | 	call	#pushregs_
1f97c     09 1F 02 F6 | 	mov	local01, arg01
1f980     0F 15 02 F6 | 	mov	arg02, local01
1f984     0F 13 02 F6 | 	mov	arg01, local01
1f988     CC F4 BF FD | 	call	#__system___float_mul
1f98c     FD 14 02 F6 | 	mov	arg02, result1
1f990     00 C0 1F FF 
1f994     00 12 06 F6 | 	mov	arg01, ##1065353216
1f998     1F 14 E6 F4 | 	bitnot	arg02, #31
1f99c     E8 F0 BF FD | 	call	#__system___float_add
1f9a0     FD 12 02 F6 | 	mov	arg01, result1
1f9a4     D8 F3 BF FD | 	call	#__system___float_sqrt
1f9a8     FD 12 02 F6 | 	mov	arg01, result1
1f9ac     0F 15 02 F6 | 	mov	arg02, local01
1f9b0     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1f9b4     A7 F0 03 F6 | 	mov	ptra, fp
1f9b8     B2 00 A0 FD | 	call	#popregs_
1f9bc                 | __system____builtin_acosf_ret
1f9bc     2D 00 64 FD | 	ret
1f9c0                 | 
1f9c0                 | __system____builtin_atan2f
1f9c0     04 4A 05 F6 | 	mov	COUNT_, #4
1f9c4     A8 00 A0 FD | 	call	#pushregs_
1f9c8     09 1F 02 F6 | 	mov	local01, arg01
1f9cc     0A 21 02 F6 | 	mov	local02, arg02
1f9d0     0F 13 02 F6 | 	mov	arg01, local01
1f9d4     00 14 06 F6 | 	mov	arg02, #0
1f9d8     01 16 06 F6 | 	mov	arg03, #1
1f9dc     AC F8 BF FD | 	call	#__system___float_cmp
1f9e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f9e4     28 00 90 5D |  if_ne	jmp	#LR__2990
1f9e8     10 13 02 F6 | 	mov	arg01, local02
1f9ec     00 14 06 F6 | 	mov	arg02, #0
1f9f0     01 16 06 F6 | 	mov	arg03, #1
1f9f4     94 F8 BF FD | 	call	#__system___float_cmp
1f9f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f9fc     87 24 60 CF 
1fa00     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1fa04     DC 00 90 CD |  if_b	jmp	#LR__2991
1fa08     00 FA 05 F6 | 	mov	result1, #0
1fa0c     D4 00 90 FD | 	jmp	#LR__2991
1fa10                 | LR__2990
1fa10     10 13 02 F6 | 	mov	arg01, local02
1fa14     10 15 02 F6 | 	mov	arg02, local02
1fa18     3C F4 BF FD | 	call	#__system___float_mul
1fa1c     FD 22 02 F6 | 	mov	local03, result1
1fa20     0F 13 02 F6 | 	mov	arg01, local01
1fa24     0F 15 02 F6 | 	mov	arg02, local01
1fa28     2C F4 BF FD | 	call	#__system___float_mul
1fa2c     FD 14 02 F6 | 	mov	arg02, result1
1fa30     11 13 02 F6 | 	mov	arg01, local03
1fa34     50 F0 BF FD | 	call	#__system___float_add
1fa38     FD 12 02 F6 | 	mov	arg01, result1
1fa3c     40 F3 BF FD | 	call	#__system___float_sqrt
1fa40     FD 22 02 F6 | 	mov	local03, result1
1fa44     10 13 02 F6 | 	mov	arg01, local02
1fa48     11 15 02 F6 | 	mov	arg02, local03
1fa4c     0C F6 BF FD | 	call	#__system___float_div
1fa50     FD 20 02 F6 | 	mov	local02, result1
1fa54     0F 13 02 F6 | 	mov	arg01, local01
1fa58     11 15 02 F6 | 	mov	arg02, local03
1fa5c     FC F5 BF FD | 	call	#__system___float_div
1fa60     FD 1E 02 F6 | 	mov	local01, result1
1fa64     00 40 27 FF 
1fa68     00 12 06 F6 | 	mov	arg01, ##1317011456
1fa6c     10 15 02 F6 | 	mov	arg02, local02
1fa70     E4 F3 BF FD | 	call	#__system___float_mul
1fa74     FD 12 02 F6 | 	mov	arg01, result1
1fa78     00 14 06 F6 | 	mov	arg02, #0
1fa7c     A0 F8 BF FD | 	call	#__system___float_tointeger
1fa80     FD 22 02 F6 | 	mov	local03, result1
1fa84     00 40 27 FF 
1fa88     00 12 06 F6 | 	mov	arg01, ##1317011456
1fa8c     0F 15 02 F6 | 	mov	arg02, local01
1fa90     C4 F3 BF FD | 	call	#__system___float_mul
1fa94     FD 12 02 F6 | 	mov	arg01, result1
1fa98     00 14 06 F6 | 	mov	arg02, #0
1fa9c     80 F8 BF FD | 	call	#__system___float_tointeger
1faa0     FD 22 52 FD | 	qvector	local03, result1
1faa4     87 24 20 FF 
1faa8     DB 23 06 F6 | 	mov	local03, ##1078530011
1faac     19 12 62 FD | 	getqy	arg01
1fab0     01 12 C6 F0 | 	sar	arg01, #1
1fab4     09 13 52 F6 | 	abs	arg01, arg01 wc
1fab8     1F 24 C6 C9 |  if_b	decod	local04, #31
1fabc     00 24 06 36 |  if_ae	mov	local04, #0
1fac0     90 EF BF FD | 	call	#__system___float_fromuns
1fac4     12 FB 61 F5 | 	xor	result1, local04
1fac8     FD 12 02 F6 | 	mov	arg01, result1
1facc     00 40 27 FF 
1fad0     00 14 06 F6 | 	mov	arg02, ##1317011456
1fad4     84 F5 BF FD | 	call	#__system___float_div
1fad8     FD 14 02 F6 | 	mov	arg02, result1
1fadc     11 13 02 F6 | 	mov	arg01, local03
1fae0     74 F3 BF FD | 	call	#__system___float_mul
1fae4                 | LR__2991
1fae4     A7 F0 03 F6 | 	mov	ptra, fp
1fae8     B2 00 A0 FD | 	call	#popregs_
1faec                 | __system____builtin_atan2f_ret
1faec     2D 00 64 FD | 	ret
1faf0                 | 
1faf0                 | __system____builtin_exp2f
1faf0     04 4A 05 F6 | 	mov	COUNT_, #4
1faf4     A8 00 A0 FD | 	call	#pushregs_
1faf8     09 1F 02 F6 | 	mov	local01, arg01
1fafc     00 7F 21 FF 
1fb00     00 14 06 F6 | 	mov	arg02, ##1123942400
1fb04     01 16 66 F6 | 	neg	arg03, #1
1fb08     80 F7 BF FD | 	call	#__system___float_cmp
1fb0c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb10     00 C0 3F 3F 
1fb14     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1fb18     DC 00 90 3D |  if_ae	jmp	#LR__3001
1fb1c     0F 13 02 F6 | 	mov	arg01, local01
1fb20     00 7F 61 FF 
1fb24     00 14 06 F6 | 	mov	arg02, ##-1023541248
1fb28     01 16 06 F6 | 	mov	arg03, #1
1fb2c     5C F7 BF FD | 	call	#__system___float_cmp
1fb30     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb34     00 FA 05 C6 |  if_b	mov	result1, #0
1fb38     BC 00 90 CD |  if_b	jmp	#LR__3001
1fb3c     0F 13 02 F6 | 	mov	arg01, local01
1fb40     00 14 06 F6 | 	mov	arg02, #0
1fb44     D8 F7 BF FD | 	call	#__system___float_tointeger
1fb48     FD 20 02 F6 | 	mov	local02, result1
1fb4c     10 13 52 F6 | 	abs	arg01, local02 wc
1fb50     1F 22 C6 C9 |  if_b	decod	local03, #31
1fb54     00 22 06 36 |  if_ae	mov	local03, #0
1fb58     F8 EE BF FD | 	call	#__system___float_fromuns
1fb5c     11 FB 61 F5 | 	xor	result1, local03
1fb60     FD 14 02 F6 | 	mov	arg02, result1
1fb64     0F 13 02 F6 | 	mov	arg01, local01
1fb68     1F 14 E6 F4 | 	bitnot	arg02, #31
1fb6c     18 EF BF FD | 	call	#__system___float_add
1fb70     FD 24 02 F6 | 	mov	local04, result1
1fb74     12 13 02 F6 | 	mov	arg01, local04
1fb78     00 14 06 F6 | 	mov	arg02, #0
1fb7c     01 16 06 F6 | 	mov	arg03, #1
1fb80     08 F7 BF FD | 	call	#__system___float_cmp
1fb84     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb88     18 00 90 3D |  if_ae	jmp	#LR__3000
1fb8c     12 13 02 F6 | 	mov	arg01, local04
1fb90     00 C0 1F FF 
1fb94     00 14 06 F6 | 	mov	arg02, ##1065353216
1fb98     EC EE BF FD | 	call	#__system___float_add
1fb9c     FD 24 02 F6 | 	mov	local04, result1
1fba0     01 20 86 F1 | 	sub	local02, #1
1fba4                 | LR__3000
1fba4     7F 20 06 F1 | 	add	local02, #127
1fba8     17 20 66 F0 | 	shl	local02, #23
1fbac     12 13 02 F6 | 	mov	arg01, local04
1fbb0     00 80 26 FF 
1fbb4     00 14 06 F6 | 	mov	arg02, ##1291845632
1fbb8     9C F2 BF FD | 	call	#__system___float_mul
1fbbc     FD 12 02 F6 | 	mov	arg01, result1
1fbc0     00 14 06 F6 | 	mov	arg02, #0
1fbc4     58 F7 BF FD | 	call	#__system___float_tointeger
1fbc8     FD 24 0A F6 | 	mov	local04, result1 wz
1fbcc     10 FB 01 A6 |  if_e	mov	result1, local02
1fbd0     24 00 90 AD |  if_e	jmp	#LR__3001
1fbd4     3E 24 26 F4 | 	bith	local04, #62
1fbd8     0F 24 62 FD | 	qexp	local04
1fbdc     10 13 02 F6 | 	mov	arg01, local02
1fbe0     18 14 62 FD | 	getqx	arg02
1fbe4     01 14 06 F1 | 	add	arg02, #1
1fbe8     01 14 46 F0 | 	shr	arg02, #1
1fbec     00 80 1F FF 
1fbf0     00 14 06 F1 | 	add	arg02, ##1056964608
1fbf4     60 F2 BF FD | 	call	#__system___float_mul
1fbf8                 | LR__3001
1fbf8     A7 F0 03 F6 | 	mov	ptra, fp
1fbfc     B2 00 A0 FD | 	call	#popregs_
1fc00                 | __system____builtin_exp2f_ret
1fc00     2D 00 64 FD | 	ret
1fc04                 | 
1fc04                 | __system____builtin_log2f
1fc04     06 4A 05 F6 | 	mov	COUNT_, #6
1fc08     A8 00 A0 FD | 	call	#pushregs_
1fc0c     09 1F 02 F6 | 	mov	local01, arg01
1fc10     09 21 0A F6 | 	mov	local02, arg01 wz
1fc14     00 00 40 5F 
1fc18     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1fc1c     00 40 00 AF 
1fc20     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1fc24     08 01 90 AD |  if_e	jmp	#LR__3014
1fc28     00 20 56 F2 | 	cmps	local02, #0 wc
1fc2c     00 E0 3F CF 
1fc30     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1fc34     F8 00 90 CD |  if_b	jmp	#LR__3014
1fc38     0F 13 02 F6 | 	mov	arg01, local01
1fc3c     00 90 20 FF 
1fc40     00 14 06 F6 | 	mov	arg02, ##1092616192
1fc44     01 16 06 F6 | 	mov	arg03, #1
1fc48     40 F6 BF FD | 	call	#__system___float_cmp
1fc4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc50     4D 2A 20 AF 
1fc54     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1fc58     D4 00 90 AD |  if_e	jmp	#LR__3014
1fc5c     0F 13 02 F6 | 	mov	arg01, local01
1fc60     FC 16 20 FF 
1fc64     54 14 06 F6 | 	mov	arg02, ##1076754516
1fc68     01 16 06 F6 | 	mov	arg03, #1
1fc6c     1C F6 BF FD | 	call	#__system___float_cmp
1fc70     00 FA 0D F2 | 	cmp	result1, #0 wz
1fc74     55 DC 1F AF 
1fc78     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1fc7c     B0 00 90 AD |  if_e	jmp	#LR__3014
1fc80     10 23 02 F6 | 	mov	local03, local02
1fc84     17 22 46 F0 | 	shr	local03, #23
1fc88     11 23 E2 F8 | 	getbyte	local03, local03, #0
1fc8c     17 21 06 F4 | 	bitl	local02, #279
1fc90     10 25 02 F6 | 	mov	local04, local02
1fc94     FF 22 0E F2 | 	cmp	local03, #255 wz
1fc98     1C 00 90 5D |  if_ne	jmp	#LR__3010
1fc9c     00 24 0E F2 | 	cmp	local04, #0 wz
1fca0     00 C0 3F 5F 
1fca4     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1fca8     00 E0 3F AF 
1fcac     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1fcb0     13 FB 01 F6 | 	mov	result1, local05
1fcb4     78 00 90 FD | 	jmp	#LR__3014
1fcb8                 | LR__3010
1fcb8     00 22 0E F2 | 	cmp	local03, #0 wz
1fcbc     17 24 26 54 |  if_ne	bith	local04, #23
1fcc0     7F 22 86 51 |  if_ne	sub	local03, #127
1fcc4     28 00 90 5D |  if_ne	jmp	#LR__3013
1fcc8     00 24 0E F2 | 	cmp	local04, #0 wz
1fccc     00 40 00 AF 
1fcd0     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1fcd4     58 00 90 AD |  if_e	jmp	#LR__3014
1fcd8     7E 22 66 F6 | 	neg	local03, #126
1fcdc     97 08 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
1fce0                 | LR__3011
1fce0     17 24 2E F4 | 	testbn	local04, #23 wz
1fce4     01 24 66 A0 |  if_e	shl	local04, #1
1fce8     01 22 06 A1 |  if_e	add	local03, #1
1fcec     F0 FF 9F AD |  if_e	jmp	#LR__3011
1fcf0                 | LR__3012
1fcf0                 | LR__3013
1fcf0     0E 24 62 FD | 	qlog	local04
1fcf4     01 22 86 F1 | 	sub	local03, #1
1fcf8     11 13 52 F6 | 	abs	arg01, local03 wc
1fcfc     1F 28 C6 C9 |  if_b	decod	local06, #31
1fd00     00 28 06 36 |  if_ae	mov	local06, #0
1fd04     18 26 62 FD | 	getqx	local05
1fd08     9B 26 06 F4 | 	bitl	local05, #155
1fd0c     08 26 06 F1 | 	add	local05, #8
1fd10     04 26 46 F0 | 	shr	local05, #4
1fd14     00 C0 1F FF 
1fd18     00 26 06 F1 | 	add	local05, ##1065353216
1fd1c     34 ED BF FD | 	call	#__system___float_fromuns
1fd20     14 FB 61 F5 | 	xor	result1, local06
1fd24     FD 14 02 F6 | 	mov	arg02, result1
1fd28     13 13 02 F6 | 	mov	arg01, local05
1fd2c     58 ED BF FD | 	call	#__system___float_add
1fd30                 | LR__3014
1fd30     A7 F0 03 F6 | 	mov	ptra, fp
1fd34     B2 00 A0 FD | 	call	#popregs_
1fd38                 | __system____builtin_log2f_ret
1fd38     2D 00 64 FD | 	ret
1fd3c                 | 
1fd3c                 | __system____builtin_powf
1fd3c     04 4A 05 F6 | 	mov	COUNT_, #4
1fd40     A8 00 A0 FD | 	call	#pushregs_
1fd44     09 1F 02 F6 | 	mov	local01, arg01
1fd48     0A 21 02 F6 | 	mov	local02, arg02
1fd4c     10 13 02 F6 | 	mov	arg01, local02
1fd50     00 14 06 F6 | 	mov	arg02, #0
1fd54     C8 F5 BF FD | 	call	#__system___float_tointeger
1fd58     FD 22 02 F6 | 	mov	local03, result1
1fd5c     11 13 52 F6 | 	abs	arg01, local03 wc
1fd60     1F 24 C6 C9 |  if_b	decod	local04, #31
1fd64     00 24 06 36 |  if_ae	mov	local04, #0
1fd68     E8 EC BF FD | 	call	#__system___float_fromuns
1fd6c     12 FB 61 F5 | 	xor	result1, local04
1fd70     FD 12 02 F6 | 	mov	arg01, result1
1fd74     10 15 02 F6 | 	mov	arg02, local02
1fd78     01 16 06 F6 | 	mov	arg03, #1
1fd7c     0C F5 BF FD | 	call	#__system___float_cmp
1fd80     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd84     18 00 90 5D |  if_ne	jmp	#LR__3020
1fd88     00 C0 1F FF 
1fd8c     00 12 06 F6 | 	mov	arg01, ##1065353216
1fd90     0F 15 02 F6 | 	mov	arg02, local01
1fd94     11 17 02 F6 | 	mov	arg03, local03
1fd98     68 00 B0 FD | 	call	#__system___float_pow_n
1fd9c     58 00 90 FD | 	jmp	#LR__3021
1fda0                 | LR__3020
1fda0     0F 13 02 F6 | 	mov	arg01, local01
1fda4     00 14 06 F6 | 	mov	arg02, #0
1fda8     01 16 06 F6 | 	mov	arg03, #1
1fdac     DC F4 BF FD | 	call	#__system___float_cmp
1fdb0     00 FA 55 F2 | 	cmps	result1, #0 wc
1fdb4     00 E0 3F CF 
1fdb8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1fdbc     38 00 90 CD |  if_b	jmp	#LR__3021
1fdc0     0F 13 02 F6 | 	mov	arg01, local01
1fdc4     00 14 06 F6 | 	mov	arg02, #0
1fdc8     01 16 06 F6 | 	mov	arg03, #1
1fdcc     BC F4 BF FD | 	call	#__system___float_cmp
1fdd0     00 FA 0D F2 | 	cmp	result1, #0 wz
1fdd4     00 FA 05 A6 |  if_e	mov	result1, #0
1fdd8     1C 00 90 AD |  if_e	jmp	#LR__3021
1fddc     0F 13 02 F6 | 	mov	arg01, local01
1fde0     20 FE BF FD | 	call	#__system____builtin_log2f
1fde4     FD 12 02 F6 | 	mov	arg01, result1
1fde8     10 15 02 F6 | 	mov	arg02, local02
1fdec     68 F0 BF FD | 	call	#__system___float_mul
1fdf0     FD 12 02 F6 | 	mov	arg01, result1
1fdf4     F8 FC BF FD | 	call	#__system____builtin_exp2f
1fdf8                 | LR__3021
1fdf8     A7 F0 03 F6 | 	mov	ptra, fp
1fdfc     B2 00 A0 FD | 	call	#popregs_
1fe00                 | __system____builtin_powf_ret
1fe00     2D 00 64 FD | 	ret
1fe04                 | 
1fe04                 | __system___float_pow_n
1fe04     05 4A 05 F6 | 	mov	COUNT_, #5
1fe08     A8 00 A0 FD | 	call	#pushregs_
1fe0c     09 1F 02 F6 | 	mov	local01, arg01
1fe10     0A 21 02 F6 | 	mov	local02, arg02
1fe14     0B 23 02 F6 | 	mov	local03, arg03
1fe18     00 22 56 F2 | 	cmps	local03, #0 wc
1fe1c     18 00 90 3D |  if_ae	jmp	#LR__3030
1fe20     01 24 06 F6 | 	mov	local04, #1
1fe24     11 23 62 F6 | 	neg	local03, local03
1fe28     00 22 56 F2 | 	cmps	local03, #0 wc
1fe2c     00 FA 05 C6 |  if_b	mov	result1, #0
1fe30     94 00 90 CD |  if_b	jmp	#LR__3038
1fe34     04 00 90 FD | 	jmp	#LR__3031
1fe38                 | LR__3030
1fe38     00 24 06 F6 | 	mov	local04, #0
1fe3c                 | LR__3031
1fe3c     00 C0 1F FF 
1fe40     00 26 06 F6 | 	mov	local05, ##1065353216
1fe44                 | LR__3032
1fe44     01 22 56 F2 | 	cmps	local03, #1 wc
1fe48     30 00 90 CD |  if_b	jmp	#LR__3034
1fe4c     01 22 CE F7 | 	test	local03, #1 wz
1fe50     10 00 90 AD |  if_e	jmp	#LR__3033
1fe54     13 13 02 F6 | 	mov	arg01, local05
1fe58     10 15 02 F6 | 	mov	arg02, local02
1fe5c     F8 EF BF FD | 	call	#__system___float_mul
1fe60     FD 26 02 F6 | 	mov	local05, result1
1fe64                 | LR__3033
1fe64     01 22 C6 F0 | 	sar	local03, #1
1fe68     10 13 02 F6 | 	mov	arg01, local02
1fe6c     10 15 02 F6 | 	mov	arg02, local02
1fe70     E4 EF BF FD | 	call	#__system___float_mul
1fe74     FD 20 02 F6 | 	mov	local02, result1
1fe78     C8 FF 9F FD | 	jmp	#LR__3032
1fe7c                 | LR__3034
1fe7c     00 24 0E F2 | 	cmp	local04, #0 wz
1fe80     14 00 90 AD |  if_e	jmp	#LR__3035
1fe84     0F 13 02 F6 | 	mov	arg01, local01
1fe88     13 15 02 F6 | 	mov	arg02, local05
1fe8c     CC F1 BF FD | 	call	#__system___float_div
1fe90     FD 26 02 F6 | 	mov	local05, result1
1fe94     2C 00 90 FD | 	jmp	#LR__3037
1fe98                 | LR__3035
1fe98     0F 13 02 F6 | 	mov	arg01, local01
1fe9c     00 C0 1F FF 
1fea0     00 14 06 F6 | 	mov	arg02, ##1065353216
1fea4     01 16 06 F6 | 	mov	arg03, #1
1fea8     E0 F3 BF FD | 	call	#__system___float_cmp
1feac     00 FA 0D F2 | 	cmp	result1, #0 wz
1feb0     10 00 90 AD |  if_e	jmp	#LR__3036
1feb4     0F 13 02 F6 | 	mov	arg01, local01
1feb8     13 15 02 F6 | 	mov	arg02, local05
1febc     98 EF BF FD | 	call	#__system___float_mul
1fec0     FD 26 02 F6 | 	mov	local05, result1
1fec4                 | LR__3036
1fec4                 | LR__3037
1fec4     13 FB 01 F6 | 	mov	result1, local05
1fec8                 | LR__3038
1fec8     A7 F0 03 F6 | 	mov	ptra, fp
1fecc     B2 00 A0 FD | 	call	#popregs_
1fed0                 | __system___float_pow_n_ret
1fed0     2D 00 64 FD | 	ret
1fed4                 | 
1fed4                 | __system___gc_ptrs
1fed4     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1fed8     00 03 02 F6 | 	mov	_var02, _var01
1fedc     76 01 00 FF 
1fee0     F8 03 06 F1 | 	add	_var02, ##191992
1fee4     00 FD 09 FB | 	rdlong	result2, _var01 wz
1fee8     74 00 90 5D |  if_ne	jmp	#LR__3040
1feec     01 FD 01 F6 | 	mov	result2, _var02
1fef0     00 FD 81 F1 | 	sub	result2, _var01
1fef4     00 03 58 FC | 	wrword	#1, _var01
1fef8     00 FB 01 F6 | 	mov	result1, _var01
1fefc     02 FA 05 F1 | 	add	result1, #2
1ff00     36 00 80 FF 
1ff04     FD 20 59 FC | 	wrword	##27792, result1
1ff08     00 FB 01 F6 | 	mov	result1, _var01
1ff0c     04 FA 05 F1 | 	add	result1, #4
1ff10     FD 00 58 FC | 	wrword	#0, result1
1ff14     00 FB 01 F6 | 	mov	result1, _var01
1ff18     06 FA 05 F1 | 	add	result1, #6
1ff1c     FD 02 58 FC | 	wrword	#1, result1
1ff20     10 00 06 F1 | 	add	_var01, #16
1ff24     FE FC 51 F6 | 	abs	result2, result2 wc
1ff28     04 FC 45 F0 | 	shr	result2, #4
1ff2c     FE FC 81 F6 | 	negc	result2, result2
1ff30     00 FD 51 FC | 	wrword	result2, _var01
1ff34     00 FD 01 F6 | 	mov	result2, _var01
1ff38     02 FC 05 F1 | 	add	result2, #2
1ff3c     36 00 80 FF 
1ff40     FE 1E 59 FC | 	wrword	##27791, result2
1ff44     00 FD 01 F6 | 	mov	result2, _var01
1ff48     04 FC 05 F1 | 	add	result2, #4
1ff4c     FE 00 58 FC | 	wrword	#0, result2
1ff50     00 FD 01 F6 | 	mov	result2, _var01
1ff54     06 FC 05 F1 | 	add	result2, #6
1ff58     FE 00 58 FC | 	wrword	#0, result2
1ff5c     10 00 86 F1 | 	sub	_var01, #16
1ff60                 | LR__3040
1ff60     00 FB 01 F6 | 	mov	result1, _var01
1ff64     01 FD 01 F6 | 	mov	result2, _var02
1ff68                 | __system___gc_ptrs_ret
1ff68     2D 00 64 FD | 	ret
1ff6c                 | 
1ff6c                 | __system___gc_tryalloc
1ff6c     0B 4A 05 F6 | 	mov	COUNT_, #11
1ff70     A8 00 A0 FD | 	call	#pushregs_
1ff74     09 1F 02 F6 | 	mov	local01, arg01
1ff78     0A 21 02 F6 | 	mov	local02, arg02
1ff7c     54 FF BF FD | 	call	#__system___gc_ptrs
1ff80     FD 22 02 F6 | 	mov	local03, result1
1ff84     FE 24 02 F6 | 	mov	local04, result2
1ff88     11 27 02 F6 | 	mov	local05, local03
1ff8c     00 28 06 F6 | 	mov	local06, #0
1ff90     97 1E 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
1ff94                 | LR__3050
1ff94     13 2B 02 F6 | 	mov	local07, local05
1ff98     06 26 06 F1 | 	add	local05, #6
1ff9c     13 15 EA FA | 	rdword	arg02, local05 wz
1ffa0     11 13 02 F6 | 	mov	arg01, local03
1ffa4     00 FA 05 A6 |  if_e	mov	result1, #0
1ffa8     04 14 66 50 |  if_ne	shl	arg02, #4
1ffac     0A 13 02 51 |  if_ne	add	arg01, arg02
1ffb0     09 FB 01 56 |  if_ne	mov	result1, arg01
1ffb4     FD 26 0A F6 | 	mov	local05, result1 wz
1ffb8     13 29 E2 5A |  if_ne	rdword	local06, local05
1ffbc     00 26 0E F2 | 	cmp	local05, #0 wz
1ffc0     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1ffc4     08 00 90 1D |  if_a	jmp	#LR__3052
1ffc8     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1ffcc     C4 FF 9F 1D |  if_a	jmp	#LR__3050
1ffd0                 | LR__3051
1ffd0                 | LR__3052
1ffd0     00 26 0E F2 | 	cmp	local05, #0 wz
1ffd4     13 FB 01 A6 |  if_e	mov	result1, local05
1ffd8     3C 01 90 AD |  if_e	jmp	#LR__3055
1ffdc     13 FD 01 F6 | 	mov	result2, local05
1ffe0     06 FC 05 F1 | 	add	result2, #6
1ffe4     FE 2C E2 FA | 	rdword	local08, result2
1ffe8     14 1F 52 F2 | 	cmps	local01, local06 wc
1ffec     C0 00 90 3D |  if_ae	jmp	#LR__3054
1fff0     13 1F 52 FC | 	wrword	local01, local05
1fff4     13 13 02 F6 | 	mov	arg01, local05
1fff8     0F 2D 02 F6 | 	mov	local08, local01
1fffc     04 2C 66 F0 | 	shl	local08, #4
20000     16 13 02 F1 | 	add	arg01, local08
20004     0F 29 82 F1 | 	sub	local06, local01
20008     09 29 52 FC | 	wrword	local06, arg01
2000c     09 2D 02 F6 | 	mov	local08, arg01
20010     02 2C 06 F1 | 	add	local08, #2
20014     36 00 80 FF 
20018     16 1F 59 FC | 	wrword	##27791, local08
2001c     13 15 0A F6 | 	mov	arg02, local05 wz
20020     00 FA 05 A6 |  if_e	mov	result1, #0
20024     11 15 82 51 |  if_ne	sub	arg02, local03
20028     04 14 46 50 |  if_ne	shr	arg02, #4
2002c     0A FB 01 56 |  if_ne	mov	result1, arg02
20030     09 2D 02 F6 | 	mov	local08, arg01
20034     04 2C 06 F1 | 	add	local08, #4
20038     16 FB 51 FC | 	wrword	result1, local08
2003c     13 2D 02 F6 | 	mov	local08, local05
20040     06 2C 06 F1 | 	add	local08, #6
20044     09 15 02 F6 | 	mov	arg02, arg01
20048     16 2D E2 FA | 	rdword	local08, local08
2004c     06 14 06 F1 | 	add	arg02, #6
20050     0A 2D 52 FC | 	wrword	local08, arg02
20054     09 2F 02 F6 | 	mov	local09, arg01
20058     17 15 0A F6 | 	mov	arg02, local09 wz
2005c     00 FA 05 A6 |  if_e	mov	result1, #0
20060     11 15 82 51 |  if_ne	sub	arg02, local03
20064     04 14 46 50 |  if_ne	shr	arg02, #4
20068     0A FB 01 56 |  if_ne	mov	result1, arg02
2006c     FD 2C 02 F6 | 	mov	local08, result1
20070     09 31 EA FA | 	rdword	local10, arg01 wz
20074     00 FA 05 A6 |  if_e	mov	result1, #0
20078     04 30 66 50 |  if_ne	shl	local10, #4
2007c     18 13 02 51 |  if_ne	add	arg01, local10
20080     09 FB 01 56 |  if_ne	mov	result1, arg01
20084     FD 32 0A F6 | 	mov	local11, result1 wz
20088     24 00 90 AD |  if_e	jmp	#LR__3053
2008c     12 33 52 F2 | 	cmps	local11, local04 wc
20090     1C 00 90 3D |  if_ae	jmp	#LR__3053
20094     17 15 0A F6 | 	mov	arg02, local09 wz
20098     00 FA 05 A6 |  if_e	mov	result1, #0
2009c     11 15 82 51 |  if_ne	sub	arg02, local03
200a0     04 14 46 50 |  if_ne	shr	arg02, #4
200a4     0A FB 01 56 |  if_ne	mov	result1, arg02
200a8     04 32 06 F1 | 	add	local11, #4
200ac     19 FB 51 FC | 	wrword	result1, local11
200b0                 | LR__3053
200b0                 | LR__3054
200b0     06 2A 06 F1 | 	add	local07, #6
200b4     15 2D 52 FC | 	wrword	local08, local07
200b8     36 00 00 FF 
200bc     80 2E 06 F6 | 	mov	local09, ##27776
200c0     10 2F 42 F5 | 	or	local09, local02
200c4     00 FA 05 F6 | 	mov	result1, #0
200c8     01 FA 61 FD | 	cogid	result1
200cc     FD 2E 42 F5 | 	or	local09, result1
200d0     13 33 02 F6 | 	mov	local11, local05
200d4     02 32 06 F1 | 	add	local11, #2
200d8     19 2F 52 FC | 	wrword	local09, local11
200dc     11 2F 02 F6 | 	mov	local09, local03
200e0     08 2E 06 F1 | 	add	local09, #8
200e4     13 33 02 F6 | 	mov	local11, local05
200e8     17 2F E2 FA | 	rdword	local09, local09
200ec     06 32 06 F1 | 	add	local11, #6
200f0     19 2F 52 FC | 	wrword	local09, local11
200f4     13 15 0A F6 | 	mov	arg02, local05 wz
200f8     00 FA 05 A6 |  if_e	mov	result1, #0
200fc     11 15 82 51 |  if_ne	sub	arg02, local03
20100     04 14 46 50 |  if_ne	shr	arg02, #4
20104     0A FB 01 56 |  if_ne	mov	result1, arg02
20108     08 22 06 F1 | 	add	local03, #8
2010c     11 FB 51 FC | 	wrword	result1, local03
20110     08 26 06 F1 | 	add	local05, #8
20114     13 FB 01 F6 | 	mov	result1, local05
20118                 | LR__3055
20118     A7 F0 03 F6 | 	mov	ptra, fp
2011c     B2 00 A0 FD | 	call	#popregs_
20120                 | __system___gc_tryalloc_ret
20120     2D 00 64 FD | 	ret
20124                 | 
20124                 | __system___gc_alloc_managed
20124     01 4A 05 F6 | 	mov	COUNT_, #1
20128     A8 00 A0 FD | 	call	#pushregs_
2012c     09 1F 02 F6 | 	mov	local01, arg01
20130     00 14 06 F6 | 	mov	arg02, #0
20134     1C 00 B0 FD | 	call	#__system___gc_doalloc
20138     FD 14 0A F6 | 	mov	arg02, result1 wz
2013c     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
20140     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
20144     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
20148     A7 F0 03 F6 | 	mov	ptra, fp
2014c     B2 00 A0 FD | 	call	#popregs_
20150                 | __system___gc_alloc_managed_ret
20150     2D 00 64 FD | 	ret
20154                 | 
20154                 | __system___gc_doalloc
20154     06 4A 05 F6 | 	mov	COUNT_, #6
20158     A8 00 A0 FD | 	call	#pushregs_
2015c     09 1F 0A F6 | 	mov	local01, arg01 wz
20160     0A 21 02 F6 | 	mov	local02, arg02
20164     00 FA 05 A6 |  if_e	mov	result1, #0
20168     8C 00 90 AD |  if_e	jmp	#LR__3067
2016c     17 1E 06 F1 | 	add	local01, #23
20170     0F 1E 26 F5 | 	andn	local01, #15
20174     04 1E 46 F0 | 	shr	local01, #4
20178     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2017c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20180     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
20184     54 C1 BF FD | 	call	#__system___lockmem
20188     0F 13 02 F6 | 	mov	arg01, local01
2018c     10 15 02 F6 | 	mov	arg02, local02
20190     D8 FD BF FD | 	call	#__system___gc_tryalloc
20194     FD 22 0A F6 | 	mov	local03, result1 wz
20198     14 00 90 5D |  if_ne	jmp	#LR__3060
2019c     70 03 B0 FD | 	call	#__system___gc_docollect
201a0     0F 13 02 F6 | 	mov	arg01, local01
201a4     10 15 02 F6 | 	mov	arg02, local02
201a8     C0 FD BF FD | 	call	#__system___gc_tryalloc
201ac     FD 22 02 F6 | 	mov	local03, result1
201b0                 | LR__3060
201b0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
201b4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
201b8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
201bc     09 01 68 FC | 	wrlong	#0, arg01
201c0     00 22 0E F2 | 	cmp	local03, #0 wz
201c4     2C 00 90 AD |  if_e	jmp	#LR__3066
201c8     04 1E 66 F0 | 	shl	local01, #4
201cc     08 1E 86 F1 | 	sub	local01, #8
201d0     0F 25 52 F6 | 	abs	local04, local01 wc
201d4     02 24 46 F0 | 	shr	local04, #2
201d8     12 27 8A F6 | 	negc	local05, local04 wz
201dc     11 29 02 F6 | 	mov	local06, local03
201e0     10 00 90 AD |  if_e	jmp	#LR__3065
201e4     97 06 48 FB | 	callpa	#(@LR__3063-@LR__3061)>>2,fcache_load_ptr_
201e8                 | LR__3061
201e8     13 05 D8 FC | 	rep	@LR__3064, local05
201ec                 | LR__3062
201ec     14 01 68 FC | 	wrlong	#0, local06
201f0     04 28 06 F1 | 	add	local06, #4
201f4                 | LR__3063
201f4                 | LR__3064
201f4                 | LR__3065
201f4                 | LR__3066
201f4     11 FB 01 F6 | 	mov	result1, local03
201f8                 | LR__3067
201f8     A7 F0 03 F6 | 	mov	ptra, fp
201fc     B2 00 A0 FD | 	call	#popregs_
20200                 | __system___gc_doalloc_ret
20200     2D 00 64 FD | 	ret
20204                 | 
20204                 | __system___gc_isvalidptr
20204     F8 16 06 F4 | 	bitl	arg03, #248
20208     08 16 86 F1 | 	sub	arg03, #8
2020c     09 17 52 F2 | 	cmps	arg03, arg01 wc
20210     08 00 90 CD |  if_b	jmp	#LR__3070
20214     0A 17 52 F2 | 	cmps	arg03, arg02 wc
20218     08 00 90 CD |  if_b	jmp	#LR__3071
2021c                 | LR__3070
2021c     00 FA 05 F6 | 	mov	result1, #0
20220     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
20224                 | LR__3071
20224     0B 01 02 F6 | 	mov	_var01, arg03
20228     09 01 62 F5 | 	xor	_var01, arg01
2022c     0F 00 CE F7 | 	test	_var01, #15 wz
20230     00 FA 05 56 |  if_ne	mov	result1, #0
20234     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
20238     0B 01 02 F6 | 	mov	_var01, arg03
2023c     02 00 06 F1 | 	add	_var01, #2
20240     00 01 E2 FA | 	rdword	_var01, _var01
20244     7F 00 00 FF 
20248     C0 01 06 F5 | 	and	_var01, ##65472
2024c     36 00 00 FF 
20250     80 00 0E F2 | 	cmp	_var01, ##27776 wz
20254     00 FA 05 56 |  if_ne	mov	result1, #0
20258     0B FB 01 A6 |  if_e	mov	result1, arg03
2025c                 | __system___gc_isvalidptr_ret
2025c     2D 00 64 FD | 	ret
20260                 | 
20260                 | __system___gc_free
20260     09 17 02 F6 | 	mov	arg03, arg01
20264     6C FC BF FD | 	call	#__system___gc_ptrs
20268     FD 12 02 F6 | 	mov	arg01, result1
2026c     FE 14 02 F6 | 	mov	arg02, result2
20270     90 FF BF FD | 	call	#__system___gc_isvalidptr
20274     FD 14 0A F6 | 	mov	arg02, result1 wz
20278     28 00 90 AD |  if_e	jmp	#LR__3080
2027c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
20280     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
20284     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
20288     50 C0 BF FD | 	call	#__system___lockmem
2028c     0A 13 02 F6 | 	mov	arg01, arg02
20290     14 00 B0 FD | 	call	#__system___gc_dofree
20294     1C E6 05 F1 | 	add	ptr___system__dat__, #28
20298     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2029c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
202a0     09 01 68 FC | 	wrlong	#0, arg01
202a4                 | LR__3080
202a4                 | __system___gc_free_ret
202a4     2D 00 64 FD | 	ret
202a8                 | 
202a8                 | __system___gc_dofree
202a8     06 4A 05 F6 | 	mov	COUNT_, #6
202ac     A8 00 A0 FD | 	call	#pushregs_
202b0     09 1F 02 F6 | 	mov	local01, arg01
202b4     1C FC BF FD | 	call	#__system___gc_ptrs
202b8     FD 20 02 F6 | 	mov	local02, result1
202bc     FE 22 02 F6 | 	mov	local03, result2
202c0     0F 15 02 F6 | 	mov	arg02, local01
202c4     02 14 06 F1 | 	add	arg02, #2
202c8     36 00 80 FF 
202cc     0A 1F 59 FC | 	wrword	##27791, arg02
202d0     0F 25 02 F6 | 	mov	local04, local01
202d4     0F 13 02 F6 | 	mov	arg01, local01
202d8     09 27 EA FA | 	rdword	local05, arg01 wz
202dc     00 FA 05 A6 |  if_e	mov	result1, #0
202e0     04 26 66 50 |  if_ne	shl	local05, #4
202e4     13 13 02 51 |  if_ne	add	arg01, local05
202e8     09 FB 01 56 |  if_ne	mov	result1, arg01
202ec     FD 28 02 F6 | 	mov	local06, result1
202f0     97 24 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
202f4                 | LR__3090
202f4     04 24 06 F1 | 	add	local04, #4
202f8     12 15 EA FA | 	rdword	arg02, local04 wz
202fc     10 13 02 F6 | 	mov	arg01, local02
20300     00 FA 05 A6 |  if_e	mov	result1, #0
20304     04 14 66 50 |  if_ne	shl	arg02, #4
20308     0A 13 02 51 |  if_ne	add	arg01, arg02
2030c     09 FB 01 56 |  if_ne	mov	result1, arg01
20310     FD 24 0A F6 | 	mov	local04, result1 wz
20314     24 00 90 AD |  if_e	jmp	#LR__3092
20318     12 13 02 F6 | 	mov	arg01, local04
2031c     00 FA 05 F6 | 	mov	result1, #0
20320     02 12 06 F1 | 	add	arg01, #2
20324     09 13 E2 FA | 	rdword	arg01, arg01
20328     36 00 00 FF 
2032c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
20330     01 FA 65 A6 |  if_e	neg	result1, #1
20334     00 FA 0D F2 | 	cmp	result1, #0 wz
20338     B8 FF 9F AD |  if_e	jmp	#LR__3090
2033c                 | LR__3091
2033c                 | LR__3092
2033c     00 24 0E F2 | 	cmp	local04, #0 wz
20340     10 25 02 A6 |  if_e	mov	local04, local02
20344     12 15 02 F6 | 	mov	arg02, local04
20348     06 14 06 F1 | 	add	arg02, #6
2034c     0F 13 02 F6 | 	mov	arg01, local01
20350     0A 15 E2 FA | 	rdword	arg02, arg02
20354     06 12 06 F1 | 	add	arg01, #6
20358     09 15 52 FC | 	wrword	arg02, arg01
2035c     0F 15 0A F6 | 	mov	arg02, local01 wz
20360     00 FA 05 A6 |  if_e	mov	result1, #0
20364     10 15 82 51 |  if_ne	sub	arg02, local02
20368     04 14 46 50 |  if_ne	shr	arg02, #4
2036c     0A FB 01 56 |  if_ne	mov	result1, arg02
20370     12 15 02 F6 | 	mov	arg02, local04
20374     06 14 06 F1 | 	add	arg02, #6
20378     0A FB 51 FC | 	wrword	result1, arg02
2037c     10 25 0A F2 | 	cmp	local04, local02 wz
20380     A4 00 90 AD |  if_e	jmp	#LR__3095
20384     12 13 02 F6 | 	mov	arg01, local04
20388     09 27 EA FA | 	rdword	local05, arg01 wz
2038c     00 FA 05 A6 |  if_e	mov	result1, #0
20390     04 26 66 50 |  if_ne	shl	local05, #4
20394     13 13 02 51 |  if_ne	add	arg01, local05
20398     09 FB 01 56 |  if_ne	mov	result1, arg01
2039c     0F FB 09 F2 | 	cmp	result1, local01 wz
203a0     84 00 90 5D |  if_ne	jmp	#LR__3094
203a4     12 29 E2 FA | 	rdword	local06, local04
203a8     0F 15 E2 FA | 	rdword	arg02, local01
203ac     0A 29 02 F1 | 	add	local06, arg02
203b0     12 29 52 FC | 	wrword	local06, local04
203b4     0F 29 02 F6 | 	mov	local06, local01
203b8     02 28 06 F1 | 	add	local06, #2
203bc     14 01 58 FC | 	wrword	#0, local06
203c0     0F 13 02 F6 | 	mov	arg01, local01
203c4     09 27 EA FA | 	rdword	local05, arg01 wz
203c8     00 FA 05 A6 |  if_e	mov	result1, #0
203cc     04 26 66 50 |  if_ne	shl	local05, #4
203d0     13 13 02 51 |  if_ne	add	arg01, local05
203d4     09 FB 01 56 |  if_ne	mov	result1, arg01
203d8     FD 28 02 F6 | 	mov	local06, result1
203dc     11 29 52 F2 | 	cmps	local06, local03 wc
203e0     20 00 90 3D |  if_ae	jmp	#LR__3093
203e4     12 15 0A F6 | 	mov	arg02, local04 wz
203e8     00 FA 05 A6 |  if_e	mov	result1, #0
203ec     10 15 82 51 |  if_ne	sub	arg02, local02
203f0     04 14 46 50 |  if_ne	shr	arg02, #4
203f4     0A FB 01 56 |  if_ne	mov	result1, arg02
203f8     14 15 02 F6 | 	mov	arg02, local06
203fc     04 14 06 F1 | 	add	arg02, #4
20400     0A FB 51 FC | 	wrword	result1, arg02
20404                 | LR__3093
20404     0F 15 02 F6 | 	mov	arg02, local01
20408     06 14 06 F1 | 	add	arg02, #6
2040c     12 FD 01 F6 | 	mov	result2, local04
20410     0A 15 E2 FA | 	rdword	arg02, arg02
20414     06 FC 05 F1 | 	add	result2, #6
20418     FE 14 52 FC | 	wrword	arg02, result2
2041c     06 1E 06 F1 | 	add	local01, #6
20420     0F 01 58 FC | 	wrword	#0, local01
20424     12 1F 02 F6 | 	mov	local01, local04
20428                 | LR__3094
20428                 | LR__3095
20428     0F 13 02 F6 | 	mov	arg01, local01
2042c     09 27 EA FA | 	rdword	local05, arg01 wz
20430     00 FA 05 A6 |  if_e	mov	result1, #0
20434     04 26 66 50 |  if_ne	shl	local05, #4
20438     13 13 02 51 |  if_ne	add	arg01, local05
2043c     09 FB 01 56 |  if_ne	mov	result1, arg01
20440     FD 14 0A F6 | 	mov	arg02, result1 wz
20444     B8 00 90 AD |  if_e	jmp	#LR__3097
20448     11 15 52 F2 | 	cmps	arg02, local03 wc
2044c     B0 00 90 3D |  if_ae	jmp	#LR__3097
20450     0A 13 02 F6 | 	mov	arg01, arg02
20454     00 FA 05 F6 | 	mov	result1, #0
20458     02 12 06 F1 | 	add	arg01, #2
2045c     09 13 E2 FA | 	rdword	arg01, arg01
20460     36 00 00 FF 
20464     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
20468     01 FA 65 A6 |  if_e	neg	result1, #1
2046c     00 FA 0D F2 | 	cmp	result1, #0 wz
20470     8C 00 90 AD |  if_e	jmp	#LR__3097
20474     0F 25 02 F6 | 	mov	local04, local01
20478     12 29 E2 FA | 	rdword	local06, local04
2047c     0A 13 02 F6 | 	mov	arg01, arg02
20480     09 1F E2 FA | 	rdword	local01, arg01
20484     0F 29 02 F1 | 	add	local06, local01
20488     12 29 52 FC | 	wrword	local06, local04
2048c     09 29 02 F6 | 	mov	local06, arg01
20490     06 28 06 F1 | 	add	local06, #6
20494     12 1F 02 F6 | 	mov	local01, local04
20498     14 29 E2 FA | 	rdword	local06, local06
2049c     06 1E 06 F1 | 	add	local01, #6
204a0     0F 29 52 FC | 	wrword	local06, local01
204a4     09 29 02 F6 | 	mov	local06, arg01
204a8     02 28 06 F1 | 	add	local06, #2
204ac     14 55 59 FC | 	wrword	#170, local06
204b0     09 29 02 F6 | 	mov	local06, arg01
204b4     06 28 06 F1 | 	add	local06, #6
204b8     14 01 58 FC | 	wrword	#0, local06
204bc     09 27 EA FA | 	rdword	local05, arg01 wz
204c0     00 FA 05 A6 |  if_e	mov	result1, #0
204c4     04 26 66 50 |  if_ne	shl	local05, #4
204c8     13 13 02 51 |  if_ne	add	arg01, local05
204cc     09 FB 01 56 |  if_ne	mov	result1, arg01
204d0     FD 28 0A F6 | 	mov	local06, result1 wz
204d4     28 00 90 AD |  if_e	jmp	#LR__3096
204d8     11 29 52 F2 | 	cmps	local06, local03 wc
204dc     20 00 90 3D |  if_ae	jmp	#LR__3096
204e0     12 15 0A F6 | 	mov	arg02, local04 wz
204e4     00 FA 05 A6 |  if_e	mov	result1, #0
204e8     10 15 82 51 |  if_ne	sub	arg02, local02
204ec     04 14 46 50 |  if_ne	shr	arg02, #4
204f0     0A FB 01 56 |  if_ne	mov	result1, arg02
204f4     14 25 02 F6 | 	mov	local04, local06
204f8     04 24 06 F1 | 	add	local04, #4
204fc     12 FB 51 FC | 	wrword	result1, local04
20500                 | LR__3096
20500                 | LR__3097
20500     14 FB 01 F6 | 	mov	result1, local06
20504     A7 F0 03 F6 | 	mov	ptra, fp
20508     B2 00 A0 FD | 	call	#popregs_
2050c                 | __system___gc_dofree_ret
2050c     2D 00 64 FD | 	ret
20510                 | 
20510                 | __system___gc_docollect
20510     05 4A 05 F6 | 	mov	COUNT_, #5
20514     A8 00 A0 FD | 	call	#pushregs_
20518     B8 F9 BF FD | 	call	#__system___gc_ptrs
2051c     FE 1E 02 F6 | 	mov	local01, result2
20520     FD 20 02 F6 | 	mov	local02, result1
20524     10 13 02 F6 | 	mov	arg01, local02
20528     09 23 EA FA | 	rdword	local03, arg01 wz
2052c     00 FA 05 A6 |  if_e	mov	result1, #0
20530     04 22 66 50 |  if_ne	shl	local03, #4
20534     11 13 02 51 |  if_ne	add	arg01, local03
20538     09 FB 01 56 |  if_ne	mov	result1, arg01
2053c     FD 24 0A F6 | 	mov	local04, result1 wz
20540     00 FA 05 F6 | 	mov	result1, #0
20544     01 FA 61 FD | 	cogid	result1
20548     FD 26 02 F6 | 	mov	local05, result1
2054c     48 00 90 AD |  if_e	jmp	#LR__3102
20550     97 22 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
20554                 | LR__3100
20554     0F 25 52 F2 | 	cmps	local04, local01 wc
20558     3C 00 90 3D |  if_ae	jmp	#LR__3102
2055c     12 15 02 F6 | 	mov	arg02, local04
20560     02 14 06 F1 | 	add	arg02, #2
20564     0A 15 E2 FA | 	rdword	arg02, arg02
20568     20 14 26 F5 | 	andn	arg02, #32
2056c     12 13 02 F6 | 	mov	arg01, local04
20570     02 12 06 F1 | 	add	arg01, #2
20574     09 15 52 FC | 	wrword	arg02, arg01
20578     12 13 02 F6 | 	mov	arg01, local04
2057c     09 23 EA FA | 	rdword	local03, arg01 wz
20580     00 FA 05 A6 |  if_e	mov	result1, #0
20584     04 22 66 50 |  if_ne	shl	local03, #4
20588     11 13 02 51 |  if_ne	add	arg01, local03
2058c     09 FB 01 56 |  if_ne	mov	result1, arg01
20590     FD 24 0A F6 | 	mov	local04, result1 wz
20594     BC FF 9F 5D |  if_ne	jmp	#LR__3100
20598                 | LR__3101
20598                 | LR__3102
20598     00 22 06 F6 | 	mov	local03, #0
2059c     00 12 06 F6 | 	mov	arg01, #0
205a0     10 BD BF FD | 	call	#__system____topofstack
205a4     FD 14 02 F6 | 	mov	arg02, result1
205a8     11 13 02 F6 | 	mov	arg01, local03
205ac     90 00 B0 FD | 	call	#__system___gc_markhub
205b0     1C 01 B0 FD | 	call	#__system___gc_markcog
205b4     10 13 02 F6 | 	mov	arg01, local02
205b8     09 23 EA FA | 	rdword	local03, arg01 wz
205bc     00 FA 05 A6 |  if_e	mov	result1, #0
205c0     04 22 66 50 |  if_ne	shl	local03, #4
205c4     11 13 02 51 |  if_ne	add	arg01, local03
205c8     09 FB 01 56 |  if_ne	mov	result1, arg01
205cc     FD 20 0A F6 | 	mov	local02, result1 wz
205d0     60 00 90 AD |  if_e	jmp	#LR__3106
205d4                 | LR__3103
205d4     10 25 02 F6 | 	mov	local04, local02
205d8     12 13 02 F6 | 	mov	arg01, local04
205dc     09 23 EA FA | 	rdword	local03, arg01 wz
205e0     00 FA 05 A6 |  if_e	mov	result1, #0
205e4     04 22 66 50 |  if_ne	shl	local03, #4
205e8     11 13 02 51 |  if_ne	add	arg01, local03
205ec     09 FB 01 56 |  if_ne	mov	result1, arg01
205f0     FD 20 02 F6 | 	mov	local02, result1
205f4     12 15 02 F6 | 	mov	arg02, local04
205f8     02 14 06 F1 | 	add	arg02, #2
205fc     0A 15 E2 FA | 	rdword	arg02, arg02
20600     20 14 CE F7 | 	test	arg02, #32 wz
20604     10 14 CE A7 |  if_e	test	arg02, #16 wz
20608     1C 00 90 5D |  if_ne	jmp	#LR__3105
2060c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
20610     13 15 0A F2 | 	cmp	arg02, local05 wz
20614     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
20618     0C 00 90 5D |  if_ne	jmp	#LR__3104
2061c     12 13 02 F6 | 	mov	arg01, local04
20620     84 FC BF FD | 	call	#__system___gc_dofree
20624     FD 20 02 F6 | 	mov	local02, result1
20628                 | LR__3104
20628                 | LR__3105
20628     00 20 0E F2 | 	cmp	local02, #0 wz
2062c     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
20630     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3103
20634                 | LR__3106
20634     A7 F0 03 F6 | 	mov	ptra, fp
20638     B2 00 A0 FD | 	call	#popregs_
2063c                 | __system___gc_docollect_ret
2063c     2D 00 64 FD | 	ret
20640                 | 
20640                 | __system___gc_markhub
20640     04 4A 05 F6 | 	mov	COUNT_, #4
20644     A8 00 A0 FD | 	call	#pushregs_
20648     09 1F 02 F6 | 	mov	local01, arg01
2064c     0A 21 02 F6 | 	mov	local02, arg02
20650     80 F8 BF FD | 	call	#__system___gc_ptrs
20654     FD 22 02 F6 | 	mov	local03, result1
20658     FE 24 02 F6 | 	mov	local04, result2
2065c                 | LR__3110
2065c     10 1F 52 F2 | 	cmps	local01, local02 wc
20660     60 00 90 3D |  if_ae	jmp	#LR__3111
20664     0F 17 02 FB | 	rdlong	arg03, local01
20668     04 1E 06 F1 | 	add	local01, #4
2066c     12 15 02 F6 | 	mov	arg02, local04
20670     11 13 02 F6 | 	mov	arg01, local03
20674     8C FB BF FD | 	call	#__system___gc_isvalidptr
20678     FD 16 0A F6 | 	mov	arg03, result1 wz
2067c     DC FF 9F AD |  if_e	jmp	#LR__3110
20680     0B 13 02 F6 | 	mov	arg01, arg03
20684     00 FA 05 F6 | 	mov	result1, #0
20688     02 12 06 F1 | 	add	arg01, #2
2068c     09 13 E2 FA | 	rdword	arg01, arg01
20690     36 00 00 FF 
20694     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
20698     01 FA 65 A6 |  if_e	neg	result1, #1
2069c     00 FA 0D F2 | 	cmp	result1, #0 wz
206a0     B8 FF 9F 5D |  if_ne	jmp	#LR__3110
206a4     0B FD 01 F6 | 	mov	result2, arg03
206a8     02 FC 05 F1 | 	add	result2, #2
206ac     FE FC E1 FA | 	rdword	result2, result2
206b0     0F FC 25 F5 | 	andn	result2, #15
206b4     2E FC 45 F5 | 	or	result2, #46
206b8     02 16 06 F1 | 	add	arg03, #2
206bc     0B FD 51 FC | 	wrword	result2, arg03
206c0     98 FF 9F FD | 	jmp	#LR__3110
206c4                 | LR__3111
206c4     A7 F0 03 F6 | 	mov	ptra, fp
206c8     B2 00 A0 FD | 	call	#popregs_
206cc                 | __system___gc_markhub_ret
206cc     2D 00 64 FD | 	ret
206d0                 | 
206d0                 | __system___gc_markcog
206d0     04 4A 05 F6 | 	mov	COUNT_, #4
206d4     A8 00 A0 FD | 	call	#pushregs_
206d8     F8 F7 BF FD | 	call	#__system___gc_ptrs
206dc     FD 1E 02 F6 | 	mov	local01, result1
206e0     FE 20 02 F6 | 	mov	local02, result2
206e4     EF 23 06 F6 | 	mov	local03, #495
206e8                 | LR__3120
206e8                 | 	'.live	local03
206e8     00 22 96 F9 | 	alts	local03, #0
206ec     11 25 02 F6 | 	mov	local04, local03
206f0     0F 13 02 F6 | 	mov	arg01, local01
206f4     10 15 02 F6 | 	mov	arg02, local02
206f8     12 17 02 F6 | 	mov	arg03, local04
206fc     04 FB BF FD | 	call	#__system___gc_isvalidptr
20700     00 FA 0D F2 | 	cmp	result1, #0 wz
20704     18 00 90 AD |  if_e	jmp	#LR__3121
20708     FD 24 02 F6 | 	mov	local04, result1
2070c     02 24 06 F1 | 	add	local04, #2
20710     12 25 E2 FA | 	rdword	local04, local04
20714     20 24 46 F5 | 	or	local04, #32
20718     02 FA 05 F1 | 	add	result1, #2
2071c     FD 24 52 FC | 	wrword	local04, result1
20720                 | LR__3121
20720     01 22 86 F1 | 	sub	local03, #1
20724     00 22 56 F2 | 	cmps	local03, #0 wc
20728     BC FF 9F 3D |  if_ae	jmp	#LR__3120
2072c     A7 F0 03 F6 | 	mov	ptra, fp
20730     B2 00 A0 FD | 	call	#popregs_
20734                 | __system___gc_markcog_ret
20734     2D 00 64 FD | 	ret
20738                 | 
20738                 | __system__opendir
20738     06 4A 05 F6 | 	mov	COUNT_, #6
2073c     A8 00 A0 FD | 	call	#pushregs_
20740     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20744     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
20748     09 15 02 F6 | 	mov	arg02, arg01
2074c     0F 13 02 F6 | 	mov	arg01, local01
20750     00 16 06 F6 | 	mov	arg03, #0
20754     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
20758     18 C3 BF FD | 	call	#__system____getvfsforfile
2075c     FD 20 0A F6 | 	mov	local02, result1 wz
20760     10 00 90 AD |  if_e	jmp	#LR__3130
20764     28 20 06 F1 | 	add	local02, #40
20768     10 17 0A FB | 	rdlong	arg03, local02 wz
2076c     28 20 86 F1 | 	sub	local02, #40
20770     14 00 90 5D |  if_ne	jmp	#LR__3131
20774                 | LR__3130
20774     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20778     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2077c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20780     00 FA 05 F6 | 	mov	result1, #0
20784     90 00 90 FD | 	jmp	#LR__3133
20788                 | LR__3131
20788     5C 12 06 F6 | 	mov	arg01, #92
2078c     10 14 06 F6 | 	mov	arg02, #16
20790     C0 F9 BF FD | 	call	#__system___gc_doalloc
20794     FD 22 0A F6 | 	mov	local03, result1 wz
20798     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2079c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
207a0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
207a4     00 FA 05 A6 |  if_e	mov	result1, #0
207a8     6C 00 90 AD |  if_e	jmp	#LR__3133
207ac     28 20 06 F1 | 	add	local02, #40
207b0     10 25 02 FB | 	rdlong	local04, local02
207b4     12 27 02 F6 | 	mov	local05, local04
207b8     28 20 86 F1 | 	sub	local02, #40
207bc     13 26 46 F7 | 	zerox	local05, #19
207c0     14 24 46 F0 | 	shr	local04, #20
207c4     02 24 66 F0 | 	shl	local04, #2
207c8     ED 24 02 F1 | 	add	local04, __methods__
207cc     12 25 02 FB | 	rdlong	local04, local04
207d0     11 13 02 F6 | 	mov	arg01, local03
207d4     0F 15 02 F6 | 	mov	arg02, local01
207d8     F2 28 02 F6 | 	mov	local06, objptr
207dc     13 E5 01 F6 | 	mov	objptr, local05
207e0     2D 24 62 FD | 	call	local04
207e4     14 E5 01 F6 | 	mov	objptr, local06
207e8     FD 16 0A F6 | 	mov	arg03, result1 wz
207ec     20 00 90 AD |  if_e	jmp	#LR__3132
207f0     00 16 4E F2 | 	cmps	arg03, #0 wz
207f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
207f8     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
207fc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20800     11 13 02 F6 | 	mov	arg01, local03
20804     58 FA BF FD | 	call	#__system___gc_free
20808     00 FA 05 F6 | 	mov	result1, #0
2080c     08 00 90 FD | 	jmp	#LR__3133
20810                 | LR__3132
20810     11 21 62 FC | 	wrlong	local02, local03
20814     11 FB 01 F6 | 	mov	result1, local03
20818                 | LR__3133
20818     A7 F0 03 F6 | 	mov	ptra, fp
2081c     B2 00 A0 FD | 	call	#popregs_
20820                 | __system__opendir_ret
20820     2D 00 64 FD | 	ret
20824                 | 
20824                 | __system__closedir
20824     04 4A 05 F6 | 	mov	COUNT_, #4
20828     A8 00 A0 FD | 	call	#pushregs_
2082c     09 1F 02 F6 | 	mov	local01, arg01
20830     0F 13 02 FB | 	rdlong	arg01, local01
20834     2C 12 06 F1 | 	add	arg01, #44
20838     09 21 02 FB | 	rdlong	local02, arg01
2083c     10 23 02 F6 | 	mov	local03, local02
20840     13 22 46 F7 | 	zerox	local03, #19
20844     14 20 46 F0 | 	shr	local02, #20
20848     02 20 66 F0 | 	shl	local02, #2
2084c     ED 20 02 F1 | 	add	local02, __methods__
20850     10 21 02 FB | 	rdlong	local02, local02
20854     0F 13 02 F6 | 	mov	arg01, local01
20858     F2 24 02 F6 | 	mov	local04, objptr
2085c     11 E5 01 F6 | 	mov	objptr, local03
20860     2D 20 62 FD | 	call	local02
20864     12 E5 01 F6 | 	mov	objptr, local04
20868     FD 24 02 F6 | 	mov	local04, result1
2086c     0F 13 02 F6 | 	mov	arg01, local01
20870     EC F9 BF FD | 	call	#__system___gc_free
20874     00 24 4E F2 | 	cmps	local04, #0 wz
20878     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2087c     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
20880     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20884     01 FA 65 56 |  if_ne	neg	result1, #1
20888     00 FA 05 A6 |  if_e	mov	result1, #0
2088c     A7 F0 03 F6 | 	mov	ptra, fp
20890     B2 00 A0 FD | 	call	#popregs_
20894                 | __system__closedir_ret
20894     2D 00 64 FD | 	ret
20898                 | 
20898                 | __system__readdir
20898     04 4A 05 F6 | 	mov	COUNT_, #4
2089c     A8 00 A0 FD | 	call	#pushregs_
208a0     09 15 0A FB | 	rdlong	arg02, arg01 wz
208a4     08 12 06 F1 | 	add	arg01, #8
208a8     09 1F 02 F6 | 	mov	local01, arg01
208ac     08 12 86 F1 | 	sub	arg01, #8
208b0     00 FA 05 A6 |  if_e	mov	result1, #0
208b4     5C 00 90 AD |  if_e	jmp	#LR__3141
208b8     30 14 06 F1 | 	add	arg02, #48
208bc     0A 21 02 FB | 	rdlong	local02, arg02
208c0     10 23 02 F6 | 	mov	local03, local02
208c4     13 22 46 F7 | 	zerox	local03, #19
208c8     14 20 46 F0 | 	shr	local02, #20
208cc     02 20 66 F0 | 	shl	local02, #2
208d0     ED 20 02 F1 | 	add	local02, __methods__
208d4     10 21 02 FB | 	rdlong	local02, local02
208d8     0F 15 02 F6 | 	mov	arg02, local01
208dc     F2 24 02 F6 | 	mov	local04, objptr
208e0     11 E5 01 F6 | 	mov	objptr, local03
208e4     2D 20 62 FD | 	call	local02
208e8     12 E5 01 F6 | 	mov	objptr, local04
208ec     00 FA 4D F2 | 	cmps	result1, #0 wz
208f0     1C 00 90 AD |  if_e	jmp	#LR__3140
208f4     01 FA 55 F2 | 	cmps	result1, #1 wc
208f8     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
208fc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
20900     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
20904     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
20908     00 FA 05 F6 | 	mov	result1, #0
2090c     04 00 90 FD | 	jmp	#LR__3141
20910                 | LR__3140
20910     0F FB 01 F6 | 	mov	result1, local01
20914                 | LR__3141
20914     A7 F0 03 F6 | 	mov	ptra, fp
20918     B2 00 A0 FD | 	call	#popregs_
2091c                 | __system__readdir_ret
2091c     2D 00 64 FD | 	ret
20920                 | 
20920                 | __system___openraw
20920     15 4A 05 F6 | 	mov	COUNT_, #21
20924     A8 00 A0 FD | 	call	#pushregs_
20928     09 1F 02 F6 | 	mov	local01, arg01
2092c     0A 21 02 F6 | 	mov	local02, arg02
20930     0B 23 02 F6 | 	mov	local03, arg03
20934     0C 25 02 F6 | 	mov	local04, arg04
20938     04 26 06 F6 | 	mov	local05, #4
2093c     0F 29 02 F6 | 	mov	local06, local01
20940     00 2A 06 F6 | 	mov	local07, #0
20944     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20948     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
2094c     16 13 02 F6 | 	mov	arg01, local08
20950     10 15 02 F6 | 	mov	arg02, local02
20954     00 16 06 F6 | 	mov	arg03, #0
20958     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2095c     14 C1 BF FD | 	call	#__system____getvfsforfile
20960     FD 2E 0A F6 | 	mov	local09, result1 wz
20964     10 00 90 AD |  if_e	jmp	#LR__3150
20968     20 2E 06 F1 | 	add	local09, #32
2096c     17 FB 09 FB | 	rdlong	result1, local09 wz
20970     20 2E 86 F1 | 	sub	local09, #32
20974     14 00 90 5D |  if_ne	jmp	#LR__3151
20978                 | LR__3150
20978     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2097c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
20980     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20984     01 FA 65 F6 | 	neg	result1, #1
20988     8C 02 90 FD | 	jmp	#LR__3164
2098c                 | LR__3151
2098c     14 13 02 F6 | 	mov	arg01, local06
20990     00 14 06 F6 | 	mov	arg02, #0
20994     34 16 06 F6 | 	mov	arg03, #52
20998     09 31 02 F6 | 	mov	local10, arg01
2099c     98 00 A0 FD | 	call	#\builtin_bytefill_
209a0     20 2E 06 F1 | 	add	local09, #32
209a4     17 33 02 FB | 	rdlong	local11, local09
209a8     19 35 02 F6 | 	mov	local12, local11
209ac     19 37 02 F6 | 	mov	local13, local11
209b0     20 2E 86 F1 | 	sub	local09, #32
209b4     1B 39 02 F6 | 	mov	local14, local13
209b8     13 34 46 F7 | 	zerox	local12, #19
209bc     14 38 46 F0 | 	shr	local14, #20
209c0     02 38 66 F0 | 	shl	local14, #2
209c4     ED 38 02 F1 | 	add	local14, __methods__
209c8     1C 39 02 FB | 	rdlong	local14, local14
209cc     14 3B 02 F6 | 	mov	local15, local06
209d0     16 3D 02 F6 | 	mov	local16, local08
209d4     11 3F 02 F6 | 	mov	local17, local03
209d8     1D 13 02 F6 | 	mov	arg01, local15
209dc     1E 15 02 F6 | 	mov	arg02, local16
209e0     1F 17 02 F6 | 	mov	arg03, local17
209e4     F2 40 02 F6 | 	mov	local18, objptr
209e8     1A E5 01 F6 | 	mov	objptr, local12
209ec     2D 38 62 FD | 	call	local14
209f0     20 E5 01 F6 | 	mov	objptr, local18
209f4     FD 42 0A F6 | 	mov	local19, result1 wz
209f8     04 22 CE 57 |  if_ne	test	local03, #4 wz
209fc     58 00 90 AD |  if_e	jmp	#LR__3152
20a00     24 2E 06 F1 | 	add	local09, #36
20a04     17 33 02 FB | 	rdlong	local11, local09
20a08     19 35 02 F6 | 	mov	local12, local11
20a0c     19 37 02 F6 | 	mov	local13, local11
20a10     24 2E 86 F1 | 	sub	local09, #36
20a14     1B 39 02 F6 | 	mov	local14, local13
20a18     13 34 46 F7 | 	zerox	local12, #19
20a1c     14 38 46 F0 | 	shr	local14, #20
20a20     02 38 66 F0 | 	shl	local14, #2
20a24     ED 38 02 F1 | 	add	local14, __methods__
20a28     1C 39 02 FB | 	rdlong	local14, local14
20a2c     14 3B 02 F6 | 	mov	local15, local06
20a30     16 3D 02 F6 | 	mov	local16, local08
20a34     12 3F 02 F6 | 	mov	local17, local04
20a38     1D 13 02 F6 | 	mov	arg01, local15
20a3c     1E 15 02 F6 | 	mov	arg02, local16
20a40     1F 17 02 F6 | 	mov	arg03, local17
20a44     F2 40 02 F6 | 	mov	local18, objptr
20a48     1A E5 01 F6 | 	mov	objptr, local12
20a4c     2D 38 62 FD | 	call	local14
20a50     20 E5 01 F6 | 	mov	objptr, local18
20a54     FD 42 02 F6 | 	mov	local19, result1
20a58                 | LR__3152
20a58     00 42 0E F2 | 	cmp	local19, #0 wz
20a5c     8C 01 90 5D |  if_ne	jmp	#LR__3162
20a60     11 45 02 F6 | 	mov	local20, local03
20a64     03 44 0E F5 | 	and	local20, #3 wz
20a68     02 26 46 55 |  if_ne	or	local05, #2
20a6c     01 44 0E F2 | 	cmp	local20, #1 wz
20a70     01 26 46 55 |  if_ne	or	local05, #1
20a74     20 22 CE F7 | 	test	local03, #32 wz
20a78     C0 26 46 55 |  if_ne	or	local05, #192
20a7c     08 28 06 F1 | 	add	local06, #8
20a80     14 27 62 FC | 	wrlong	local05, local06
20a84     0C 28 06 F1 | 	add	local06, #12
20a88     14 47 0A FB | 	rdlong	local21, local06 wz
20a8c     14 28 86 F1 | 	sub	local06, #20
20a90     18 00 90 5D |  if_ne	jmp	#LR__3153
20a94     04 2E 06 F1 | 	add	local09, #4
20a98     17 47 02 FB | 	rdlong	local21, local09
20a9c     04 2E 86 F1 | 	sub	local09, #4
20aa0     14 28 06 F1 | 	add	local06, #20
20aa4     14 47 62 FC | 	wrlong	local21, local06
20aa8     14 28 86 F1 | 	sub	local06, #20
20aac                 | LR__3153
20aac     18 28 06 F1 | 	add	local06, #24
20ab0     14 47 0A FB | 	rdlong	local21, local06 wz
20ab4     18 28 86 F1 | 	sub	local06, #24
20ab8     18 00 90 5D |  if_ne	jmp	#LR__3154
20abc     08 2E 06 F1 | 	add	local09, #8
20ac0     17 47 02 FB | 	rdlong	local21, local09
20ac4     08 2E 86 F1 | 	sub	local09, #8
20ac8     18 28 06 F1 | 	add	local06, #24
20acc     14 47 62 FC | 	wrlong	local21, local06
20ad0     18 28 86 F1 | 	sub	local06, #24
20ad4                 | LR__3154
20ad4     24 28 06 F1 | 	add	local06, #36
20ad8     14 47 0A FB | 	rdlong	local21, local06 wz
20adc     24 28 86 F1 | 	sub	local06, #36
20ae0     17 47 02 AB |  if_e	rdlong	local21, local09
20ae4     24 28 06 A1 |  if_e	add	local06, #36
20ae8     14 47 62 AC |  if_e	wrlong	local21, local06
20aec     24 28 86 A1 |  if_e	sub	local06, #36
20af0     28 28 06 F1 | 	add	local06, #40
20af4     14 47 0A FB | 	rdlong	local21, local06 wz
20af8     28 28 86 F1 | 	sub	local06, #40
20afc     18 00 90 5D |  if_ne	jmp	#LR__3155
20b00     10 2E 06 F1 | 	add	local09, #16
20b04     17 47 02 FB | 	rdlong	local21, local09
20b08     10 2E 86 F1 | 	sub	local09, #16
20b0c     28 28 06 F1 | 	add	local06, #40
20b10     14 47 62 FC | 	wrlong	local21, local06
20b14     28 28 86 F1 | 	sub	local06, #40
20b18                 | LR__3155
20b18     30 28 06 F1 | 	add	local06, #48
20b1c     14 47 0A FB | 	rdlong	local21, local06 wz
20b20     30 28 86 F1 | 	sub	local06, #48
20b24     18 00 90 5D |  if_ne	jmp	#LR__3156
20b28     0C 2E 06 F1 | 	add	local09, #12
20b2c     17 47 02 FB | 	rdlong	local21, local09
20b30     0C 2E 86 F1 | 	sub	local09, #12
20b34     30 28 06 F1 | 	add	local06, #48
20b38     14 47 62 FC | 	wrlong	local21, local06
20b3c     30 28 86 F1 | 	sub	local06, #48
20b40                 | LR__3156
20b40     1C 28 06 F1 | 	add	local06, #28
20b44     14 47 0A FB | 	rdlong	local21, local06 wz
20b48     1C 28 86 F1 | 	sub	local06, #28
20b4c     1C 00 90 5D |  if_ne	jmp	#LR__3157
20b50     01 2A 06 F6 | 	mov	local07, #1
20b54     F2 12 02 F6 | 	mov	arg01, objptr
20b58     00 10 04 FF 
20b5c     00 12 46 F5 | 	or	arg01, ##136314880
20b60     1C 28 06 F1 | 	add	local06, #28
20b64     14 13 62 FC | 	wrlong	arg01, local06
20b68     1C 28 86 F1 | 	sub	local06, #28
20b6c                 | LR__3157
20b6c     20 28 06 F1 | 	add	local06, #32
20b70     14 47 0A FB | 	rdlong	local21, local06 wz
20b74     20 28 86 F1 | 	sub	local06, #32
20b78     1C 00 90 5D |  if_ne	jmp	#LR__3158
20b7c     01 2A 06 F6 | 	mov	local07, #1
20b80     F2 12 02 F6 | 	mov	arg01, objptr
20b84     00 18 04 FF 
20b88     00 12 46 F5 | 	or	arg01, ##137363456
20b8c     20 28 06 F1 | 	add	local06, #32
20b90     14 13 62 FC | 	wrlong	arg01, local06
20b94     20 28 86 F1 | 	sub	local06, #32
20b98                 | LR__3158
20b98     2C 28 06 F1 | 	add	local06, #44
20b9c     14 47 0A FB | 	rdlong	local21, local06 wz
20ba0     2C 28 86 F1 | 	sub	local06, #44
20ba4     44 00 90 5D |  if_ne	jmp	#LR__3161
20ba8     14 2E 06 F1 | 	add	local09, #20
20bac     17 47 0A FB | 	rdlong	local21, local09 wz
20bb0     14 2E 86 F1 | 	sub	local09, #20
20bb4     18 00 90 AD |  if_e	jmp	#LR__3159
20bb8     14 2E 06 F1 | 	add	local09, #20
20bbc     17 47 02 FB | 	rdlong	local21, local09
20bc0     2C 28 06 F1 | 	add	local06, #44
20bc4     14 47 62 FC | 	wrlong	local21, local06
20bc8     2C 28 86 F1 | 	sub	local06, #44
20bcc     1C 00 90 FD | 	jmp	#LR__3160
20bd0                 | LR__3159
20bd0     01 2A 06 F6 | 	mov	local07, #1
20bd4     F2 12 02 F6 | 	mov	arg01, objptr
20bd8     00 20 04 FF 
20bdc     00 12 46 F5 | 	or	arg01, ##138412032
20be0     2C 28 06 F1 | 	add	local06, #44
20be4     14 13 62 FC | 	wrlong	arg01, local06
20be8     2C 28 86 F1 | 	sub	local06, #44
20bec                 | LR__3160
20bec                 | LR__3161
20bec                 | LR__3162
20bec     00 2A 0E F2 | 	cmp	local07, #0 wz
20bf0     14 13 02 56 |  if_ne	mov	arg01, local06
20bf4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
20bf8     00 42 0E F2 | 	cmp	local19, #0 wz
20bfc     00 12 06 A6 |  if_e	mov	arg01, #0
20c00     10 00 90 5D |  if_ne	jmp	#LR__3163
20c04     00 12 4E F2 | 	cmps	arg01, #0 wz
20c08     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20c0c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20c10     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20c14                 | LR__3163
20c14     21 FB 01 F6 | 	mov	result1, local19
20c18                 | LR__3164
20c18     A7 F0 03 F6 | 	mov	ptra, fp
20c1c     B2 00 A0 FD | 	call	#popregs_
20c20                 | __system___openraw_ret
20c20     2D 00 64 FD | 	ret
20c24                 | 
20c24                 | __system___closeraw
20c24     05 4A 05 F6 | 	mov	COUNT_, #5
20c28     A8 00 A0 FD | 	call	#pushregs_
20c2c     09 1F 02 F6 | 	mov	local01, arg01
20c30     00 20 06 F6 | 	mov	local02, #0
20c34     08 1E 06 F1 | 	add	local01, #8
20c38     0F FB 09 FB | 	rdlong	result1, local01 wz
20c3c     08 1E 86 F1 | 	sub	local01, #8
20c40     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20c44     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
20c48     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20c4c     01 FA 65 A6 |  if_e	neg	result1, #1
20c50     A8 00 90 AD |  if_e	jmp	#LR__3172
20c54     2C 1E 06 F1 | 	add	local01, #44
20c58     0F FB 09 FB | 	rdlong	result1, local01 wz
20c5c     2C 1E 86 F1 | 	sub	local01, #44
20c60     38 00 90 AD |  if_e	jmp	#LR__3170
20c64     2C 1E 06 F1 | 	add	local01, #44
20c68     0F 23 02 FB | 	rdlong	local03, local01
20c6c     11 25 02 F6 | 	mov	local04, local03
20c70     2C 1E 86 F1 | 	sub	local01, #44
20c74     13 24 46 F7 | 	zerox	local04, #19
20c78     14 22 46 F0 | 	shr	local03, #20
20c7c     02 22 66 F0 | 	shl	local03, #2
20c80     ED 22 02 F1 | 	add	local03, __methods__
20c84     11 23 02 FB | 	rdlong	local03, local03
20c88     0F 13 02 F6 | 	mov	arg01, local01
20c8c     F2 26 02 F6 | 	mov	local05, objptr
20c90     12 E5 01 F6 | 	mov	objptr, local04
20c94     2D 22 62 FD | 	call	local03
20c98     13 E5 01 F6 | 	mov	objptr, local05
20c9c                 | LR__3170
20c9c     24 1E 06 F1 | 	add	local01, #36
20ca0     0F 27 0A FB | 	rdlong	local05, local01 wz
20ca4     24 1E 86 F1 | 	sub	local01, #36
20ca8     3C 00 90 AD |  if_e	jmp	#LR__3171
20cac     24 1E 06 F1 | 	add	local01, #36
20cb0     0F 23 02 FB | 	rdlong	local03, local01
20cb4     11 25 02 F6 | 	mov	local04, local03
20cb8     24 1E 86 F1 | 	sub	local01, #36
20cbc     13 24 46 F7 | 	zerox	local04, #19
20cc0     14 22 46 F0 | 	shr	local03, #20
20cc4     02 22 66 F0 | 	shl	local03, #2
20cc8     ED 22 02 F1 | 	add	local03, __methods__
20ccc     11 23 02 FB | 	rdlong	local03, local03
20cd0     0F 13 02 F6 | 	mov	arg01, local01
20cd4     F2 26 02 F6 | 	mov	local05, objptr
20cd8     12 E5 01 F6 | 	mov	objptr, local04
20cdc     2D 22 62 FD | 	call	local03
20ce0     13 E5 01 F6 | 	mov	objptr, local05
20ce4     FD 20 02 F6 | 	mov	local02, result1
20ce8                 | LR__3171
20ce8     0F 13 02 F6 | 	mov	arg01, local01
20cec     00 14 06 F6 | 	mov	arg02, #0
20cf0     34 16 06 F6 | 	mov	arg03, #52
20cf4     98 00 A0 FD | 	call	#\builtin_bytefill_
20cf8     10 FB 01 F6 | 	mov	result1, local02
20cfc                 | LR__3172
20cfc     A7 F0 03 F6 | 	mov	ptra, fp
20d00     B2 00 A0 FD | 	call	#popregs_
20d04                 | __system___closeraw_ret
20d04     2D 00 64 FD | 	ret
20d08                 | 
20d08                 | __system___vfs_open_sdcardx
20d08     0B 4A 05 F6 | 	mov	COUNT_, #11
20d0c     A8 00 A0 FD | 	call	#pushregs_
20d10     09 23 02 F6 | 	mov	local03, arg01
20d14     0A 25 02 F6 | 	mov	local04, arg02
20d18     0B 27 02 F6 | 	mov	local05, arg03
20d1c     0C 29 02 F6 | 	mov	local06, arg04
20d20     01 00 00 FF 
20d24     24 12 06 F6 | 	mov	arg01, ##548
20d28     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
20d2c     FD 2A 02 F6 | 	mov	local07, result1
20d30     01 00 00 FF 
20d34     34 12 06 F6 | 	mov	arg01, ##564
20d38     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
20d3c     FD 2C 02 F6 | 	mov	local08, result1
20d40     11 19 02 F6 | 	mov	arg04, local03
20d44     1F 18 C6 F0 | 	sar	arg04, #31
20d48     11 17 02 F6 | 	mov	arg03, local03
20d4c     01 12 06 F6 | 	mov	arg01, #1
20d50     00 14 06 F6 | 	mov	arg02, #0
20d54     48 DC BF FD | 	call	#__system___int64_shl
20d58     FD 1E 02 F6 | 	mov	local01, result1
20d5c     FE 2E 02 F6 | 	mov	local09, result2
20d60     12 19 02 F6 | 	mov	arg04, local04
20d64     1F 18 C6 F0 | 	sar	arg04, #31
20d68     12 17 02 F6 | 	mov	arg03, local04
20d6c     01 12 06 F6 | 	mov	arg01, #1
20d70     00 14 06 F6 | 	mov	arg02, #0
20d74     28 DC BF FD | 	call	#__system___int64_shl
20d78     FD 1E 42 F5 | 	or	local01, result1
20d7c     FE 2E 42 F5 | 	or	local09, result2
20d80     13 19 02 F6 | 	mov	arg04, local05
20d84     1F 18 C6 F0 | 	sar	arg04, #31
20d88     13 17 02 F6 | 	mov	arg03, local05
20d8c     01 12 06 F6 | 	mov	arg01, #1
20d90     00 14 06 F6 | 	mov	arg02, #0
20d94     08 DC BF FD | 	call	#__system___int64_shl
20d98     FD 1E 42 F5 | 	or	local01, result1
20d9c     FE 2E 42 F5 | 	or	local09, result2
20da0     14 19 02 F6 | 	mov	arg04, local06
20da4     1F 18 C6 F0 | 	sar	arg04, #31
20da8     14 17 02 F6 | 	mov	arg03, local06
20dac     01 12 06 F6 | 	mov	arg01, #1
20db0     00 14 06 F6 | 	mov	arg02, #0
20db4     E8 DB BF FD | 	call	#__system___int64_shl
20db8     17 15 02 F6 | 	mov	arg02, local09
20dbc     FD 1E 42 F5 | 	or	local01, result1
20dc0     0A FD 41 F5 | 	or	result2, arg02
20dc4     FE 20 02 F6 | 	mov	local02, result2
20dc8     0F 13 02 F6 | 	mov	arg01, local01
20dcc     10 15 02 F6 | 	mov	arg02, local02
20dd0     04 DC BF FD | 	call	#__system___usepins
20dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
20dd8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20ddc     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
20de0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20de4     00 FA 05 A6 |  if_e	mov	result1, #0
20de8     B4 00 90 AD |  if_e	jmp	#LR__3182
20dec     0F 31 02 F6 | 	mov	local10, local01
20df0     10 2F 02 F6 | 	mov	local09, local02
20df4     01 00 00 FF 
20df8     08 2A 06 F1 | 	add	local07, ##520
20dfc     15 31 62 FC | 	wrlong	local10, local07
20e00     04 2A 06 F1 | 	add	local07, #4
20e04     15 2F 62 FC | 	wrlong	local09, local07
20e08     01 00 00 FF 
20e0c     0C 2A 86 F1 | 	sub	local07, ##524
20e10     14 1B 02 F6 | 	mov	arg05, local06
20e14     00 12 06 F6 | 	mov	arg01, #0
20e18     11 15 02 F6 | 	mov	arg02, local03
20e1c     12 17 02 F6 | 	mov	arg03, local04
20e20     13 19 02 F6 | 	mov	arg04, local05
20e24     F2 30 02 F6 | 	mov	local10, objptr
20e28     15 E5 01 F6 | 	mov	objptr, local07
20e2c     78 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
20e30     18 E5 01 F6 | 	mov	objptr, local10
20e34     FD 32 0A F6 | 	mov	local11, result1 wz
20e38     24 00 90 5D |  if_ne	jmp	#LR__3180
20e3c     5C 01 00 FF 
20e40     F2 14 06 F6 | 	mov	arg02, ##@LR__4577
20e44     16 13 02 F6 | 	mov	arg01, local08
20e48     00 16 06 F6 | 	mov	arg03, #0
20e4c     F2 32 02 F6 | 	mov	local11, objptr
20e50     15 E5 01 F6 | 	mov	objptr, local07
20e54     A8 5E B0 FD | 	call	#_fatfs_cc_f_mount
20e58     19 E5 01 F6 | 	mov	objptr, local11
20e5c     FD 32 02 F6 | 	mov	local11, result1
20e60                 | LR__3180
20e60     00 32 0E F2 | 	cmp	local11, #0 wz
20e64     24 00 90 AD |  if_e	jmp	#LR__3181
20e68     0F 13 02 F6 | 	mov	arg01, local01
20e6c     10 15 02 F6 | 	mov	arg02, local02
20e70     B8 DB BF FD | 	call	#__system___freepins
20e74     19 13 6A F6 | 	neg	arg01, local11 wz
20e78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20e7c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20e80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20e84     00 FA 05 F6 | 	mov	result1, #0
20e88     14 00 90 FD | 	jmp	#LR__3182
20e8c                 | LR__3181
20e8c     15 13 02 F6 | 	mov	arg01, local07
20e90     F2 32 02 F6 | 	mov	local11, objptr
20e94     15 E5 01 F6 | 	mov	objptr, local07
20e98     44 9B B0 FD | 	call	#_fatfs_cc_get_vfs
20e9c     19 E5 01 F6 | 	mov	objptr, local11
20ea0                 | LR__3182
20ea0     A7 F0 03 F6 | 	mov	ptra, fp
20ea4     B2 00 A0 FD | 	call	#popregs_
20ea8                 | __system___vfs_open_sdcardx_ret
20ea8     2D 00 64 FD | 	ret
20eac                 | 
20eac                 | __system____default_getc
20eac     03 4A 05 F6 | 	mov	COUNT_, #3
20eb0     A8 00 A0 FD | 	call	#pushregs_
20eb4     09 1F 02 F6 | 	mov	local01, arg01
20eb8     0F 21 02 FB | 	rdlong	local02, local01
20ebc     08 20 06 F1 | 	add	local02, #8
20ec0     10 23 02 FB | 	rdlong	local03, local02
20ec4     02 22 CE F7 | 	test	local03, #2 wz
20ec8     0F 13 02 56 |  if_ne	mov	arg01, local01
20ecc     00 01 B0 5D |  if_ne	call	#__system____default_flush
20ed0     10 23 02 FB | 	rdlong	local03, local02
20ed4     01 22 46 F5 | 	or	local03, #1
20ed8     10 23 62 FC | 	wrlong	local03, local02
20edc     08 20 86 F1 | 	sub	local02, #8
20ee0     10 23 0A FB | 	rdlong	local03, local02 wz
20ee4     0C 00 90 5D |  if_ne	jmp	#LR__3190
20ee8     0F 13 02 F6 | 	mov	arg01, local01
20eec     60 16 B0 FD | 	call	#__system____default_filbuf
20ef0     FD 22 02 F6 | 	mov	local03, result1
20ef4                 | LR__3190
20ef4     01 22 56 F2 | 	cmps	local03, #1 wc
20ef8     01 FA 65 C6 |  if_b	neg	result1, #1
20efc     1C 00 90 CD |  if_b	jmp	#LR__3191
20f00     01 22 86 F1 | 	sub	local03, #1
20f04     10 23 62 FC | 	wrlong	local03, local02
20f08     04 20 06 F1 | 	add	local02, #4
20f0c     10 23 02 FB | 	rdlong	local03, local02
20f10     11 FB C1 FA | 	rdbyte	result1, local03
20f14     01 22 06 F1 | 	add	local03, #1
20f18     10 23 62 FC | 	wrlong	local03, local02
20f1c                 | LR__3191
20f1c     A7 F0 03 F6 | 	mov	ptra, fp
20f20     B2 00 A0 FD | 	call	#popregs_
20f24                 | __system____default_getc_ret
20f24     2D 00 64 FD | 	ret
20f28                 | 
20f28                 | __system____default_putc
20f28     06 4A 05 F6 | 	mov	COUNT_, #6
20f2c     A8 00 A0 FD | 	call	#pushregs_
20f30     09 1F 02 F6 | 	mov	local01, arg01
20f34     0A 21 02 F6 | 	mov	local02, arg02
20f38     10 23 02 FB | 	rdlong	local03, local02
20f3c     08 22 06 F1 | 	add	local03, #8
20f40     11 FB 01 FB | 	rdlong	result1, local03
20f44     01 FA CD F7 | 	test	result1, #1 wz
20f48     10 13 02 56 |  if_ne	mov	arg01, local02
20f4c     80 00 B0 5D |  if_ne	call	#__system____default_flush
20f50     11 25 02 FB | 	rdlong	local04, local03
20f54     02 24 46 F5 | 	or	local04, #2
20f58     11 25 62 FC | 	wrlong	local04, local03
20f5c     08 22 86 F1 | 	sub	local03, #8
20f60     11 27 02 FB | 	rdlong	local05, local03
20f64     10 22 06 F1 | 	add	local03, #16
20f68     11 15 02 FB | 	rdlong	arg02, local03
20f6c     10 22 86 F1 | 	sub	local03, #16
20f70     13 FB 01 F6 | 	mov	result1, local05
20f74     0A FB 01 F1 | 	add	result1, arg02
20f78     FD 1E 42 FC | 	wrbyte	local01, result1
20f7c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
20f80     01 26 06 F1 | 	add	local05, #1
20f84     11 27 62 FC | 	wrlong	local05, local03
20f88     06 20 06 F1 | 	add	local02, #6
20f8c     10 29 EA FA | 	rdword	local06, local02 wz
20f90     06 20 86 F1 | 	sub	local02, #6
20f94     0C 22 06 51 |  if_ne	add	local03, #12
20f98     11 25 02 5B |  if_ne	rdlong	local04, local03
20f9c     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
20fa0     0C 00 90 AD |  if_e	jmp	#LR__3200
20fa4     0A 1E 0E F2 | 	cmp	local01, #10 wz
20fa8     01 28 0E A2 |  if_e	cmp	local06, #1 wz
20fac     10 00 90 5D |  if_ne	jmp	#LR__3201
20fb0                 | LR__3200
20fb0     10 13 02 F6 | 	mov	arg01, local02
20fb4     18 00 B0 FD | 	call	#__system____default_flush
20fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
20fbc     01 1E 66 56 |  if_ne	neg	local01, #1
20fc0                 | LR__3201
20fc0     0F FB 01 F6 | 	mov	result1, local01
20fc4     A7 F0 03 F6 | 	mov	ptra, fp
20fc8     B2 00 A0 FD | 	call	#popregs_
20fcc                 | __system____default_putc_ret
20fcc     2D 00 64 FD | 	ret
20fd0                 | 
20fd0                 | __system____default_flush
20fd0     06 4A 05 F6 | 	mov	COUNT_, #6
20fd4     A8 00 A0 FD | 	call	#pushregs_
20fd8     09 1F 02 F6 | 	mov	local01, arg01
20fdc     0F 21 02 FB | 	rdlong	local02, local01
20fe0     10 23 02 FB | 	rdlong	local03, local02
20fe4     08 20 06 F1 | 	add	local02, #8
20fe8     10 FB 01 FB | 	rdlong	result1, local02
20fec     08 20 86 F1 | 	sub	local02, #8
20ff0     02 FA CD F7 | 	test	result1, #2 wz
20ff4     D0 00 90 AD |  if_e	jmp	#LR__3212
20ff8     01 22 56 F2 | 	cmps	local03, #1 wc
20ffc     20 01 90 CD |  if_b	jmp	#LR__3214
21000     08 1E 06 F1 | 	add	local01, #8
21004     0F FB 01 FB | 	rdlong	result1, local01
21008     08 1E 86 F1 | 	sub	local01, #8
2100c     40 FA CD F7 | 	test	result1, #64 wz
21010     68 00 90 AD |  if_e	jmp	#LR__3211
21014     08 1E 06 F1 | 	add	local01, #8
21018     0F 17 02 FB | 	rdlong	arg03, local01
2101c     08 1E 86 F1 | 	sub	local01, #8
21020     80 16 CE F7 | 	test	arg03, #128 wz
21024     54 00 90 AD |  if_e	jmp	#LR__3210
21028     30 1E 06 F1 | 	add	local01, #48
2102c     0F 25 02 FB | 	rdlong	local04, local01
21030     12 27 02 F6 | 	mov	local05, local04
21034     30 1E 86 F1 | 	sub	local01, #48
21038     13 26 46 F7 | 	zerox	local05, #19
2103c     14 24 46 F0 | 	shr	local04, #20
21040     02 24 66 F0 | 	shl	local04, #2
21044     ED 24 02 F1 | 	add	local04, __methods__
21048     12 25 02 FB | 	rdlong	local04, local04
2104c     0F 13 02 F6 | 	mov	arg01, local01
21050     00 14 06 F6 | 	mov	arg02, #0
21054     02 16 06 F6 | 	mov	arg03, #2
21058     F2 28 02 F6 | 	mov	local06, objptr
2105c     13 E5 01 F6 | 	mov	objptr, local05
21060     2D 24 62 FD | 	call	local04
21064     14 E5 01 F6 | 	mov	objptr, local06
21068     08 1E 06 F1 | 	add	local01, #8
2106c     0F 29 02 FB | 	rdlong	local06, local01
21070     80 28 26 F5 | 	andn	local06, #128
21074     0F 29 62 FC | 	wrlong	local06, local01
21078     08 1E 86 F1 | 	sub	local01, #8
2107c                 | LR__3210
2107c                 | LR__3211
2107c     18 1E 06 F1 | 	add	local01, #24
21080     0F 25 02 FB | 	rdlong	local04, local01
21084     12 27 02 F6 | 	mov	local05, local04
21088     18 1E 86 F1 | 	sub	local01, #24
2108c     13 26 46 F7 | 	zerox	local05, #19
21090     14 24 46 F0 | 	shr	local04, #20
21094     02 24 66 F0 | 	shl	local04, #2
21098     ED 24 02 F1 | 	add	local04, __methods__
2109c     12 25 02 FB | 	rdlong	local04, local04
210a0     10 20 06 F1 | 	add	local02, #16
210a4     10 15 02 FB | 	rdlong	arg02, local02
210a8     10 20 86 F1 | 	sub	local02, #16
210ac     0F 13 02 F6 | 	mov	arg01, local01
210b0     11 17 02 F6 | 	mov	arg03, local03
210b4     F2 28 02 F6 | 	mov	local06, objptr
210b8     13 E5 01 F6 | 	mov	objptr, local05
210bc     2D 24 62 FD | 	call	local04
210c0     14 E5 01 F6 | 	mov	objptr, local06
210c4     58 00 90 FD | 	jmp	#LR__3214
210c8                 | LR__3212
210c8     08 20 06 F1 | 	add	local02, #8
210cc     10 29 02 FB | 	rdlong	local06, local02
210d0     08 20 86 F1 | 	sub	local02, #8
210d4     01 28 CE F7 | 	test	local06, #1 wz
210d8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
210dc     40 00 90 AD |  if_e	jmp	#LR__3213
210e0     30 1E 06 F1 | 	add	local01, #48
210e4     0F 25 02 FB | 	rdlong	local04, local01
210e8     12 27 02 F6 | 	mov	local05, local04
210ec     30 1E 86 F1 | 	sub	local01, #48
210f0     13 26 46 F7 | 	zerox	local05, #19
210f4     14 24 46 F0 | 	shr	local04, #20
210f8     02 24 66 F0 | 	shl	local04, #2
210fc     ED 24 02 F1 | 	add	local04, __methods__
21100     12 25 02 FB | 	rdlong	local04, local04
21104     0F 13 02 F6 | 	mov	arg01, local01
21108     11 15 62 F6 | 	neg	arg02, local03
2110c     01 16 06 F6 | 	mov	arg03, #1
21110     F2 28 02 F6 | 	mov	local06, objptr
21114     13 E5 01 F6 | 	mov	objptr, local05
21118     2D 24 62 FD | 	call	local04
2111c     14 E5 01 F6 | 	mov	objptr, local06
21120                 | LR__3213
21120                 | LR__3214
21120     10 01 68 FC | 	wrlong	#0, local02
21124     04 20 06 F1 | 	add	local02, #4
21128     10 01 68 FC | 	wrlong	#0, local02
2112c     04 20 06 F1 | 	add	local02, #4
21130     10 01 68 FC | 	wrlong	#0, local02
21134     00 FA 05 F6 | 	mov	result1, #0
21138     A7 F0 03 F6 | 	mov	ptra, fp
2113c     B2 00 A0 FD | 	call	#popregs_
21140                 | __system____default_flush_ret
21140     2D 00 64 FD | 	ret
21144                 | 
21144                 | __system____default_buffer_init
21144     02 4A 05 F6 | 	mov	COUNT_, #2
21148     A8 00 A0 FD | 	call	#pushregs_
2114c     09 1F 02 F6 | 	mov	local01, arg01
21150     0F 21 02 FB | 	rdlong	local02, local01
21154     0F 13 02 F6 | 	mov	arg01, local01
21158     F8 02 B0 FD | 	call	#__system___isatty
2115c     00 FA 0D F2 | 	cmp	result1, #0 wz
21160     06 1E 06 51 |  if_ne	add	local01, #6
21164     0F 0B 58 5C |  if_ne	wrword	#5, local01
21168     06 1E 06 A1 |  if_e	add	local01, #6
2116c     0F 0D 58 AC |  if_e	wrword	#6, local01
21170     14 20 06 F1 | 	add	local02, #20
21174     10 1F 02 F6 | 	mov	local01, local02
21178     04 20 86 F1 | 	sub	local02, #4
2117c     10 1F 62 FC | 	wrlong	local01, local02
21180     04 20 86 F1 | 	sub	local02, #4
21184     02 00 80 FF 
21188     10 01 68 FC | 	wrlong	##1024, local02
2118c     00 FA 05 F6 | 	mov	result1, #0
21190     A7 F0 03 F6 | 	mov	ptra, fp
21194     B2 00 A0 FD | 	call	#popregs_
21198                 | __system____default_buffer_init_ret
21198     2D 00 64 FD | 	ret
2119c                 | 
2119c                 | __system__stat
2119c     04 4A 05 F6 | 	mov	COUNT_, #4
211a0     A8 00 A0 FD | 	call	#pushregs_
211a4     0A 1F 02 F6 | 	mov	local01, arg02
211a8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
211ac     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
211b0     09 15 02 F6 | 	mov	arg02, arg01
211b4     10 13 02 F6 | 	mov	arg01, local02
211b8     00 16 06 F6 | 	mov	arg03, #0
211bc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
211c0     B0 B8 BF FD | 	call	#__system____getvfsforfile
211c4     FD 22 0A F6 | 	mov	local03, result1 wz
211c8     10 00 90 AD |  if_e	jmp	#LR__3220
211cc     34 22 06 F1 | 	add	local03, #52
211d0     11 17 0A FB | 	rdlong	arg03, local03 wz
211d4     34 22 86 F1 | 	sub	local03, #52
211d8     14 00 90 5D |  if_ne	jmp	#LR__3221
211dc                 | LR__3220
211dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
211e0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
211e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
211e8     01 FA 65 F6 | 	neg	result1, #1
211ec     68 00 90 FD | 	jmp	#LR__3222
211f0                 | LR__3221
211f0     0F 13 02 F6 | 	mov	arg01, local01
211f4     00 14 06 F6 | 	mov	arg02, #0
211f8     30 16 06 F6 | 	mov	arg03, #48
211fc     09 25 02 F6 | 	mov	local04, arg01
21200     98 00 A0 FD | 	call	#\builtin_bytefill_
21204     12 FB 01 F6 | 	mov	result1, local04
21208     10 13 CA FA | 	rdbyte	arg01, local02 wz
2120c     08 1E 06 A1 |  if_e	add	local01, #8
21210     08 00 80 AF 
21214     0F FF 6B AC |  if_e	wrlong	##4607, local01
21218     00 FA 05 A6 |  if_e	mov	result1, #0
2121c     38 00 90 AD |  if_e	jmp	#LR__3222
21220     34 22 06 F1 | 	add	local03, #52
21224     11 23 02 FB | 	rdlong	local03, local03
21228     11 25 02 F6 | 	mov	local04, local03
2122c     13 22 46 F7 | 	zerox	local03, #19
21230     14 24 46 F0 | 	shr	local04, #20
21234     02 24 66 F0 | 	shl	local04, #2
21238     ED 24 02 F1 | 	add	local04, __methods__
2123c     12 25 02 FB | 	rdlong	local04, local04
21240     10 13 02 F6 | 	mov	arg01, local02
21244     0F 15 02 F6 | 	mov	arg02, local01
21248     F2 20 02 F6 | 	mov	local02, objptr
2124c     11 E5 01 F6 | 	mov	objptr, local03
21250     2D 24 62 FD | 	call	local04
21254     10 E5 01 F6 | 	mov	objptr, local02
21258                 | LR__3222
21258     A7 F0 03 F6 | 	mov	ptra, fp
2125c     B2 00 A0 FD | 	call	#popregs_
21260                 | __system__stat_ret
21260     2D 00 64 FD | 	ret
21264                 | 
21264                 | __system__read
21264     0A 12 16 F2 | 	cmp	arg01, #10 wc
21268     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2126c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
21270     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
21274     01 FA 65 36 |  if_ae	neg	result1, #1
21278     20 00 90 3D |  if_ae	jmp	#LR__3230
2127c     34 12 06 FD | 	qmul	arg01, #52
21280     02 00 00 FF 
21284     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
21288     18 12 62 FD | 	getqx	arg01
2128c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
21290     02 00 00 FF 
21294     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
21298     CC 0F B0 FD | 	call	#__system___vfsread
2129c                 | LR__3230
2129c                 | __system__read_ret
2129c     2D 00 64 FD | 	ret
212a0                 | 
212a0                 | __system__close
212a0     0A 12 16 F2 | 	cmp	arg01, #10 wc
212a4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
212a8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
212ac     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
212b0     01 FA 65 36 |  if_ae	neg	result1, #1
212b4     20 00 90 3D |  if_ae	jmp	#LR__3240
212b8     34 12 06 FD | 	qmul	arg01, #52
212bc     02 00 00 FF 
212c0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
212c4     18 12 62 FD | 	getqx	arg01
212c8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
212cc     02 00 00 FF 
212d0     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
212d4     4C F9 BF FD | 	call	#__system___closeraw
212d8                 | LR__3240
212d8                 | __system__close_ret
212d8     2D 00 64 FD | 	ret
212dc                 | 
212dc                 | __system__lseek
212dc     06 4A 05 F6 | 	mov	COUNT_, #6
212e0     A8 00 A0 FD | 	call	#pushregs_
212e4     0A 12 16 F2 | 	cmp	arg01, #10 wc
212e8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
212ec     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
212f0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
212f4     01 FA 65 36 |  if_ae	neg	result1, #1
212f8     C4 00 90 3D |  if_ae	jmp	#LR__3251
212fc     34 12 06 FD | 	qmul	arg01, #52
21300     02 00 00 FF 
21304     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
21308     18 1E 62 FD | 	getqx	local01
2130c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
21310     30 1E 06 F1 | 	add	local01, #48
21314     0F 13 0A FB | 	rdlong	arg01, local01 wz
21318     30 1E 86 F1 | 	sub	local01, #48
2131c     02 00 00 FF 
21320     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
21324     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21328     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2132c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21330     01 FA 65 A6 |  if_e	neg	result1, #1
21334     88 00 90 AD |  if_e	jmp	#LR__3251
21338     08 1E 06 F1 | 	add	local01, #8
2133c     0F 21 02 FB | 	rdlong	local02, local01
21340     08 1E 86 F1 | 	sub	local01, #8
21344     40 20 CE F7 | 	test	local02, #64 wz
21348     08 1E 06 51 |  if_ne	add	local01, #8
2134c     0F 21 02 5B |  if_ne	rdlong	local02, local01
21350     80 20 46 55 |  if_ne	or	local02, #128
21354     0F 21 62 5C |  if_ne	wrlong	local02, local01
21358     08 1E 86 51 |  if_ne	sub	local01, #8
2135c     30 1E 06 F1 | 	add	local01, #48
21360     0F 23 02 FB | 	rdlong	local03, local01
21364     11 25 02 F6 | 	mov	local04, local03
21368     30 1E 86 F1 | 	sub	local01, #48
2136c     13 24 46 F7 | 	zerox	local04, #19
21370     14 22 46 F0 | 	shr	local03, #20
21374     02 22 66 F0 | 	shl	local03, #2
21378     ED 22 02 F1 | 	add	local03, __methods__
2137c     11 23 02 FB | 	rdlong	local03, local03
21380     0F 13 02 F6 | 	mov	arg01, local01
21384     F2 26 02 F6 | 	mov	local05, objptr
21388     12 E5 01 F6 | 	mov	objptr, local04
2138c     2D 22 62 FD | 	call	local03
21390     13 E5 01 F6 | 	mov	objptr, local05
21394     FD 28 02 F6 | 	mov	local06, result1
21398     00 28 56 F2 | 	cmps	local06, #0 wc
2139c     1C 00 90 3D |  if_ae	jmp	#LR__3250
213a0     14 13 6A F6 | 	neg	arg01, local06 wz
213a4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
213a8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
213ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
213b0     01 FA 65 56 |  if_ne	neg	result1, #1
213b4     00 FA 05 A6 |  if_e	mov	result1, #0
213b8     04 00 90 FD | 	jmp	#LR__3251
213bc                 | LR__3250
213bc     14 FB 01 F6 | 	mov	result1, local06
213c0                 | LR__3251
213c0     A7 F0 03 F6 | 	mov	ptra, fp
213c4     B2 00 A0 FD | 	call	#popregs_
213c8                 | __system__lseek_ret
213c8     2D 00 64 FD | 	ret
213cc                 | 
213cc                 | __system___ioctl
213cc     03 4A 05 F6 | 	mov	COUNT_, #3
213d0     A8 00 A0 FD | 	call	#pushregs_
213d4     00 12 4E F2 | 	cmps	arg01, #0 wz
213d8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
213dc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
213e0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
213e4     01 FA 65 A6 |  if_e	neg	result1, #1
213e8     5C 00 90 AD |  if_e	jmp	#LR__3261
213ec     28 12 06 F1 | 	add	arg01, #40
213f0     09 1F 02 FB | 	rdlong	local01, arg01
213f4     0F 21 02 F6 | 	mov	local02, local01
213f8     28 12 86 F1 | 	sub	arg01, #40
213fc     13 20 46 F7 | 	zerox	local02, #19
21400     14 1E 46 F0 | 	shr	local01, #20
21404     02 1E 66 F0 | 	shl	local01, #2
21408     ED 1E 02 F1 | 	add	local01, __methods__
2140c     0F 1F 02 FB | 	rdlong	local01, local01
21410     F2 22 02 F6 | 	mov	local03, objptr
21414     10 E5 01 F6 | 	mov	objptr, local02
21418     2D 1E 62 FD | 	call	local01
2141c     11 E5 01 F6 | 	mov	objptr, local03
21420     FD 12 0A F6 | 	mov	arg01, result1 wz
21424     1C 00 90 AD |  if_e	jmp	#LR__3260
21428     00 12 4E F2 | 	cmps	arg01, #0 wz
2142c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21430     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21434     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21438     01 FA 65 56 |  if_ne	neg	result1, #1
2143c     00 FA 05 A6 |  if_e	mov	result1, #0
21440     04 00 90 FD | 	jmp	#LR__3261
21444                 | LR__3260
21444     00 FA 05 F6 | 	mov	result1, #0
21448                 | LR__3261
21448     A7 F0 03 F6 | 	mov	ptra, fp
2144c     B2 00 A0 FD | 	call	#popregs_
21450                 | __system___ioctl_ret
21450     2D 00 64 FD | 	ret
21454                 | 
21454                 | __system___isatty
21454     00 4A 05 F6 | 	mov	COUNT_, #0
21458     A8 00 A0 FD | 	call	#pushregs_
2145c     0C F0 07 F1 | 	add	ptra, #12
21460     04 4E 05 F1 | 	add	fp, #4
21464     A7 12 62 FC | 	wrlong	arg01, fp
21468     04 4E 05 F1 | 	add	fp, #4
2146c     A7 16 02 F6 | 	mov	arg03, fp
21470     08 4E 85 F1 | 	sub	fp, #8
21474     00 15 06 F6 | 	mov	arg02, #256
21478     50 FF BF FD | 	call	#__system___ioctl
2147c     00 FA 0D F2 | 	cmp	result1, #0 wz
21480     01 FA 05 A6 |  if_e	mov	result1, #1
21484     00 FA 05 56 |  if_ne	mov	result1, #0
21488     A7 F0 03 F6 | 	mov	ptra, fp
2148c     B2 00 A0 FD | 	call	#popregs_
21490                 | __system___isatty_ret
21490     2D 00 64 FD | 	ret
21494                 | 
21494                 | __system____getftab
21494     0A 12 16 F2 | 	cmp	arg01, #10 wc
21498     34 12 06 CD |  if_b	qmul	arg01, #52
2149c     00 FA 05 36 |  if_ae	mov	result1, #0
214a0     02 00 00 CF 
214a4     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
214a8     18 FA 61 CD |  if_b	getqx	result1
214ac     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
214b0     02 00 00 CF 
214b4     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
214b8                 | __system____getftab_ret
214b8     2D 00 64 FD | 	ret
214bc                 | 
214bc                 | __system__strncpy
214bc     09 01 02 F6 | 	mov	_var01, arg01
214c0                 | LR__3270
214c0     01 16 86 F1 | 	sub	arg03, #1
214c4     00 16 56 F2 | 	cmps	arg03, #0 wc
214c8     18 00 90 CD |  if_b	jmp	#LR__3271
214cc     0A FB C1 FA | 	rdbyte	result1, arg02
214d0     00 FB 41 FC | 	wrbyte	result1, _var01
214d4     01 14 06 F1 | 	add	arg02, #1
214d8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
214dc     01 00 06 F1 | 	add	_var01, #1
214e0     DC FF 9F 5D |  if_ne	jmp	#LR__3270
214e4                 | LR__3271
214e4     97 0C 48 FB | 	callpa	#(@LR__3273-@LR__3272)>>2,fcache_load_ptr_
214e8                 | LR__3272
214e8     01 16 86 F1 | 	sub	arg03, #1
214ec     00 16 56 F2 | 	cmps	arg03, #0 wc
214f0     00 03 02 36 |  if_ae	mov	_var02, _var01
214f4     01 00 06 31 |  if_ae	add	_var01, #1
214f8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
214fc     E8 FF 9F 3D |  if_ae	jmp	#LR__3272
21500                 | LR__3273
21500     09 FB 01 F6 | 	mov	result1, arg01
21504                 | __system__strncpy_ret
21504     2D 00 64 FD | 	ret
21508                 | 
21508                 | __system__strncat
21508     00 14 4E F2 | 	cmps	arg02, #0 wz
2150c     50 00 90 AD |  if_e	jmp	#LR__3284
21510     01 16 16 F2 | 	cmp	arg03, #1 wc
21514     48 00 90 CD |  if_b	jmp	#LR__3284
21518     09 01 02 F6 | 	mov	_var01, arg01
2151c     97 1E 48 FB | 	callpa	#(@LR__3282-@LR__3280)>>2,fcache_load_ptr_
21520                 | LR__3280
21520     00 FB C9 FA | 	rdbyte	result1, _var01 wz
21524     01 00 06 51 |  if_ne	add	_var01, #1
21528     F4 FF 9F 5D |  if_ne	jmp	#LR__3280
2152c     0B 03 02 F6 | 	mov	_var02, arg03
21530                 | LR__3281
21530     0A 05 C2 FA | 	rdbyte	_var03, arg02
21534     02 07 02 F6 | 	mov	_var04, _var03
21538     07 06 4E F7 | 	zerox	_var04, #7 wz
2153c     01 14 06 F1 | 	add	arg02, #1
21540     18 00 90 AD |  if_e	jmp	#LR__3283
21544     01 02 86 F1 | 	sub	_var02, #1
21548     00 02 56 F2 | 	cmps	_var02, #0 wc
2154c     00 07 02 36 |  if_ae	mov	_var04, _var01
21550     01 00 06 31 |  if_ae	add	_var01, #1
21554     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
21558     D4 FF 9F 3D |  if_ae	jmp	#LR__3281
2155c                 | LR__3282
2155c                 | LR__3283
2155c     00 01 48 FC | 	wrbyte	#0, _var01
21560                 | LR__3284
21560     09 FB 01 F6 | 	mov	result1, arg01
21564                 | __system__strncat_ret
21564     2D 00 64 FD | 	ret
21568                 | 
21568                 | __system__strncmp
21568     09 01 0A F6 | 	mov	_var01, arg01 wz
2156c     14 00 90 5D |  if_ne	jmp	#LR__3290
21570     00 14 0E F2 | 	cmp	arg02, #0 wz
21574     01 02 66 56 |  if_ne	neg	_var02, #1
21578     00 02 06 A6 |  if_e	mov	_var02, #0
2157c     01 FB 01 F6 | 	mov	result1, _var02
21580     74 00 90 FD | 	jmp	#__system__strncmp_ret
21584                 | LR__3290
21584     00 14 0E F2 | 	cmp	arg02, #0 wz
21588     01 FA 05 A6 |  if_e	mov	result1, #1
2158c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
21590     0B 05 02 F6 | 	mov	_var03, arg03
21594     97 16 48 FB | 	callpa	#(@LR__3292-@LR__3291)>>2,fcache_load_ptr_
21598                 | LR__3291
21598     00 07 C2 FA | 	rdbyte	_var04, _var01
2159c     0A 09 02 F6 | 	mov	_var05, arg02
215a0     04 0B C2 FA | 	rdbyte	_var06, _var05
215a4     01 04 86 F1 | 	sub	_var03, #1
215a8     00 04 56 F2 | 	cmps	_var03, #0 wc
215ac     01 00 06 F1 | 	add	_var01, #1
215b0     01 14 06 F1 | 	add	arg02, #1
215b4     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
215b8     08 00 90 2D |  if_nc_and_z	jmp	#LR__3293
215bc     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
215c0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3291
215c4                 | LR__3292
215c4                 | LR__3293
215c4     00 04 56 F2 | 	cmps	_var03, #0 wc
215c8     00 FA 05 C6 |  if_b	mov	result1, #0
215cc     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
215d0     05 07 0A F2 | 	cmp	_var04, _var06 wz
215d4     00 FA 05 A6 |  if_e	mov	result1, #0
215d8     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
215dc     00 06 0E F2 | 	cmp	_var04, #0 wz
215e0     01 FA 65 A6 |  if_e	neg	result1, #1
215e4     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
215e8     00 0A 0E F2 | 	cmp	_var06, #0 wz
215ec     01 FA 05 A6 |  if_e	mov	result1, #1
215f0     03 FB 01 56 |  if_ne	mov	result1, _var04
215f4     05 FB 81 51 |  if_ne	sub	result1, _var06
215f8                 | __system__strncmp_ret
215f8     2D 00 64 FD | 	ret
215fc                 | 
215fc                 | __system____root_opendir
215fc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21600     04 12 06 F1 | 	add	arg01, #4
21604     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
21608     00 FA 05 F6 | 	mov	result1, #0
2160c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21610                 | __system____root_opendir_ret
21610     2D 00 64 FD | 	ret
21614                 | 
21614                 | __system____root_readdir
21614     03 4A 05 F6 | 	mov	COUNT_, #3
21618     A8 00 A0 FD | 	call	#pushregs_
2161c     09 1F 02 F6 | 	mov	local01, arg01
21620     0A 21 02 F6 | 	mov	local02, arg02
21624     04 1E 06 F1 | 	add	local01, #4
21628     0F 23 02 FB | 	rdlong	local03, local01
2162c     04 1E 86 F1 | 	sub	local01, #4
21630                 | LR__3300
21630     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21634     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
21638     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2163c     01 FA 65 A6 |  if_e	neg	result1, #1
21640     48 00 90 AD |  if_e	jmp	#LR__3301
21644     11 17 0A FB | 	rdlong	arg03, local03 wz
21648     04 22 06 A1 |  if_e	add	local03, #4
2164c     E0 FF 9F AD |  if_e	jmp	#LR__3300
21650     11 15 02 FB | 	rdlong	arg02, local03
21654     01 14 06 F1 | 	add	arg02, #1
21658     10 13 02 F6 | 	mov	arg01, local02
2165c     40 16 06 F6 | 	mov	arg03, #64
21660     58 FE BF FD | 	call	#__system__strncpy
21664     50 20 06 F1 | 	add	local02, #80
21668     10 03 48 FC | 	wrbyte	#1, local02
2166c     08 20 86 F1 | 	sub	local02, #8
21670     10 01 68 FC | 	wrlong	#0, local02
21674     04 20 06 F1 | 	add	local02, #4
21678     10 01 68 FC | 	wrlong	#0, local02
2167c     04 22 06 F1 | 	add	local03, #4
21680     04 1E 06 F1 | 	add	local01, #4
21684     0F 23 62 FC | 	wrlong	local03, local01
21688     00 FA 05 F6 | 	mov	result1, #0
2168c                 | LR__3301
2168c     A7 F0 03 F6 | 	mov	ptra, fp
21690     B2 00 A0 FD | 	call	#popregs_
21694                 | __system____root_readdir_ret
21694     2D 00 64 FD | 	ret
21698                 | 
21698                 | __system____root_closedir
21698     00 FA 05 F6 | 	mov	result1, #0
2169c                 | __system____root_closedir_ret
2169c     2D 00 64 FD | 	ret
216a0                 | 
216a0                 | __system____root_stat
216a0     0A 01 02 F6 | 	mov	_var01, arg02
216a4     00 13 02 F6 | 	mov	arg01, _var01
216a8     00 14 06 F6 | 	mov	arg02, #0
216ac     30 16 06 F6 | 	mov	arg03, #48
216b0     98 00 A0 FD | 	call	#\builtin_bytefill_
216b4     08 00 06 F1 | 	add	_var01, #8
216b8     08 00 80 FF 
216bc     00 FF 6B FC | 	wrlong	##4607, _var01
216c0     00 FA 05 F6 | 	mov	result1, #0
216c4                 | __system____root_stat_ret
216c4     2D 00 64 FD | 	ret
216c8                 | 
216c8                 | __system___normalizeName
216c8     00 00 06 F6 | 	mov	_var01, #0
216cc     09 03 02 F6 | 	mov	_var02, arg01
216d0     01 05 02 F6 | 	mov	_var03, _var02
216d4                 | LR__3310
216d4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
216d8     5C 01 90 AD |  if_e	jmp	#LR__3329
216dc     00 00 0E F2 | 	cmp	_var01, #0 wz
216e0     02 07 02 56 |  if_ne	mov	_var04, _var03
216e4     01 04 06 51 |  if_ne	add	_var03, #1
216e8     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
216ec     00 00 06 56 |  if_ne	mov	_var01, #0
216f0     01 07 C2 FA | 	rdbyte	_var04, _var02
216f4     2E 06 0E F2 | 	cmp	_var04, #46 wz
216f8     D8 00 90 5D |  if_ne	jmp	#LR__3322
216fc     01 02 06 F1 | 	add	_var02, #1
21700     01 07 C2 FA | 	rdbyte	_var04, _var02
21704     01 02 86 F1 | 	sub	_var02, #1
21708     2F 06 0E F2 | 	cmp	_var04, #47 wz
2170c     18 00 90 AD |  if_e	jmp	#LR__3311
21710     01 02 06 F1 | 	add	_var02, #1
21714     01 09 C2 FA | 	rdbyte	_var05, _var02
21718     01 02 86 F1 | 	sub	_var02, #1
2171c     04 0B 02 F6 | 	mov	_var06, _var05
21720     07 0A 4E F7 | 	zerox	_var06, #7 wz
21724     10 00 90 5D |  if_ne	jmp	#LR__3312
21728                 | LR__3311
21728     01 0D 02 F6 | 	mov	_var07, _var02
2172c     01 0C 06 F1 | 	add	_var07, #1
21730     06 03 02 F6 | 	mov	_var02, _var07
21734     E0 00 90 FD | 	jmp	#LR__3326
21738                 | LR__3312
21738     01 02 06 F1 | 	add	_var02, #1
2173c     01 0D C2 FA | 	rdbyte	_var07, _var02
21740     01 02 86 F1 | 	sub	_var02, #1
21744     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
21748     2E 06 0E F2 | 	cmp	_var04, #46 wz
2174c     84 00 90 5D |  if_ne	jmp	#LR__3321
21750     02 02 06 F1 | 	add	_var02, #2
21754     01 0D C2 FA | 	rdbyte	_var07, _var02
21758     02 02 86 F1 | 	sub	_var02, #2
2175c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
21760     2F 06 0E F2 | 	cmp	_var04, #47 wz
21764     18 00 90 AD |  if_e	jmp	#LR__3313
21768     02 02 06 F1 | 	add	_var02, #2
2176c     01 09 C2 FA | 	rdbyte	_var05, _var02
21770     02 02 86 F1 | 	sub	_var02, #2
21774     04 0B 02 F6 | 	mov	_var06, _var05
21778     07 0A 4E F7 | 	zerox	_var06, #7 wz
2177c     54 00 90 5D |  if_ne	jmp	#LR__3320
21780                 | LR__3313
21780     02 02 06 F1 | 	add	_var02, #2
21784     09 05 5A F2 | 	cmps	_var03, arg01 wcz
21788     40 00 90 ED |  if_be	jmp	#LR__3319
2178c     02 0F 02 F6 | 	mov	_var08, _var03
21790     01 0E 86 F1 | 	sub	_var08, #1
21794                 | LR__3314
21794     07 07 C2 FA | 	rdbyte	_var04, _var08
21798     2F 06 0E F2 | 	cmp	_var04, #47 wz
2179c     0C 00 90 5D |  if_ne	jmp	#LR__3315
217a0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
217a4     01 0E 86 11 |  if_a	sub	_var08, #1
217a8     E8 FF 9F 1D |  if_a	jmp	#LR__3314
217ac                 | LR__3315
217ac     97 0C 48 FB | 	callpa	#(@LR__3317-@LR__3316)>>2,fcache_load_ptr_
217b0                 | LR__3316
217b0     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
217b4     10 00 90 ED |  if_be	jmp	#LR__3318
217b8     07 07 C2 FA | 	rdbyte	_var04, _var08
217bc     2F 06 0E F2 | 	cmp	_var04, #47 wz
217c0     01 0E 86 51 |  if_ne	sub	_var08, #1
217c4     E8 FF 9F 5D |  if_ne	jmp	#LR__3316
217c8                 | LR__3317
217c8                 | LR__3318
217c8     07 05 02 F6 | 	mov	_var03, _var08
217cc                 | LR__3319
217cc     01 00 06 F6 | 	mov	_var01, #1
217d0     44 00 90 FD | 	jmp	#LR__3326
217d4                 | LR__3320
217d4                 | LR__3321
217d4                 | LR__3322
217d4     97 18 48 FB | 	callpa	#(@LR__3324-@LR__3323)>>2,fcache_load_ptr_
217d8                 | LR__3323
217d8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
217dc     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
217e0     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
217e4     20 00 90 AD |  if_e	jmp	#LR__3325
217e8     01 0B 02 F6 | 	mov	_var06, _var02
217ec     01 09 02 F6 | 	mov	_var05, _var02
217f0     01 08 06 F1 | 	add	_var05, #1
217f4     05 11 C2 FA | 	rdbyte	_var09, _var06
217f8     04 03 02 F6 | 	mov	_var02, _var05
217fc     02 11 42 FC | 	wrbyte	_var09, _var03
21800     01 04 06 F1 | 	add	_var03, #1
21804     D0 FF 9F FD | 	jmp	#LR__3323
21808                 | LR__3324
21808                 | LR__3325
21808     01 07 C2 FA | 	rdbyte	_var04, _var02
2180c     2F 06 0E F2 | 	cmp	_var04, #47 wz
21810     C0 FE 9F 5D |  if_ne	jmp	#LR__3310
21814     01 00 06 F6 | 	mov	_var01, #1
21818                 | LR__3326
21818     97 0C 48 FB | 	callpa	#(@LR__3328-@LR__3327)>>2,fcache_load_ptr_
2181c                 | LR__3327
2181c     01 07 C2 FA | 	rdbyte	_var04, _var02
21820     2F 06 0E F2 | 	cmp	_var04, #47 wz
21824     01 0D 02 A6 |  if_e	mov	_var07, _var02
21828     01 0C 06 A1 |  if_e	add	_var07, #1
2182c     06 03 02 A6 |  if_e	mov	_var02, _var07
21830     E8 FF 9F AD |  if_e	jmp	#LR__3327
21834                 | LR__3328
21834     9C FE 9F FD | 	jmp	#LR__3310
21838                 | LR__3329
21838     02 01 48 FC | 	wrbyte	#0, _var03
2183c                 | __system___normalizeName_ret
2183c     2D 00 64 FD | 	ret
21840                 | 
21840                 | __system___strrev
21840     09 01 CA FA | 	rdbyte	_var01, arg01 wz
21844     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
21848     09 03 02 F6 | 	mov	_var02, arg01
2184c     97 1A 48 FB | 	callpa	#(@LR__3332-@LR__3330)>>2,fcache_load_ptr_
21850                 | LR__3330
21850     01 01 CA FA | 	rdbyte	_var01, _var02 wz
21854     01 02 06 51 |  if_ne	add	_var02, #1
21858     F4 FF 9F 5D |  if_ne	jmp	#LR__3330
2185c     01 02 86 F1 | 	sub	_var02, #1
21860                 | LR__3331
21860     09 03 5A F2 | 	cmps	_var02, arg01 wcz
21864     1C 00 90 ED |  if_be	jmp	#LR__3333
21868     09 01 C2 FA | 	rdbyte	_var01, arg01
2186c     01 05 C2 FA | 	rdbyte	_var03, _var02
21870     09 05 42 FC | 	wrbyte	_var03, arg01
21874     01 01 42 FC | 	wrbyte	_var01, _var02
21878     01 12 06 F1 | 	add	arg01, #1
2187c     01 02 86 F1 | 	sub	_var02, #1
21880     DC FF 9F FD | 	jmp	#LR__3331
21884                 | LR__3332
21884                 | LR__3333
21884                 | __system___strrev_ret
21884     2D 00 64 FD | 	ret
21888                 | 
21888                 | __system___fmtpad
21888     06 4A 05 F6 | 	mov	COUNT_, #6
2188c     A8 00 A0 FD | 	call	#pushregs_
21890     09 1F 02 F6 | 	mov	local01, arg01
21894     0A 21 02 F6 | 	mov	local02, arg02
21898     0B 23 02 F6 | 	mov	local03, arg03
2189c     10 13 EA F8 | 	getbyte	arg01, local02, #1
218a0     16 20 46 F0 | 	shr	local02, #22
218a4     03 20 0E F5 | 	and	local02, #3 wz
218a8     00 24 06 F6 | 	mov	local04, #0
218ac     01 20 06 A6 |  if_e	mov	local02, #1
218b0     0C 21 CA F7 | 	test	local02, arg04 wz
218b4     00 FA 05 A6 |  if_e	mov	result1, #0
218b8     88 00 90 AD |  if_e	jmp	#LR__3343
218bc     09 23 C2 F2 | 	subr	local03, arg01
218c0     01 22 56 F2 | 	cmps	local03, #1 wc
218c4     00 FA 05 C6 |  if_b	mov	result1, #0
218c8     78 00 90 CD |  if_b	jmp	#LR__3343
218cc     03 20 0E F2 | 	cmp	local02, #3 wz
218d0     18 00 90 5D |  if_ne	jmp	#LR__3340
218d4     01 18 0E F2 | 	cmp	arg04, #1 wz
218d8     6E 20 62 FD | 	wrz	local02
218dc     10 23 02 F1 | 	add	local03, local02
218e0     11 23 52 F6 | 	abs	local03, local03 wc
218e4     01 22 46 F0 | 	shr	local03, #1
218e8     11 23 82 F6 | 	negc	local03, local03
218ec                 | LR__3340
218ec     01 22 56 F2 | 	cmps	local03, #1 wc
218f0     4C 00 90 CD |  if_b	jmp	#LR__3342
218f4     11 27 02 F6 | 	mov	local05, local03
218f8                 | LR__3341
218f8     0F 21 02 F6 | 	mov	local02, local01
218fc     0F 29 02 F6 | 	mov	local06, local01
21900     13 20 46 F7 | 	zerox	local02, #19
21904     14 28 46 F0 | 	shr	local06, #20
21908     02 28 66 F0 | 	shl	local06, #2
2190c     ED 28 02 F1 | 	add	local06, __methods__
21910     14 29 02 FB | 	rdlong	local06, local06
21914     20 12 06 F6 | 	mov	arg01, #32
21918     F2 22 02 F6 | 	mov	local03, objptr
2191c     10 E5 01 F6 | 	mov	objptr, local02
21920     2D 28 62 FD | 	call	local06
21924     11 E5 01 F6 | 	mov	objptr, local03
21928     FD 28 02 F6 | 	mov	local06, result1
2192c     00 28 56 F2 | 	cmps	local06, #0 wc
21930     14 FB 01 C6 |  if_b	mov	result1, local06
21934     0C 00 90 CD |  if_b	jmp	#LR__3343
21938     14 25 02 F1 | 	add	local04, local06
2193c     EE 27 6E FB | 	djnz	local05, #LR__3341
21940                 | LR__3342
21940     12 FB 01 F6 | 	mov	result1, local04
21944                 | LR__3343
21944     A7 F0 03 F6 | 	mov	ptra, fp
21948     B2 00 A0 FD | 	call	#popregs_
2194c                 | __system___fmtpad_ret
2194c     2D 00 64 FD | 	ret
21950                 | 
21950                 | __system___uitoa
21950     04 4A 05 F6 | 	mov	COUNT_, #4
21954     A8 00 A0 FD | 	call	#pushregs_
21958     09 1F 02 F6 | 	mov	local01, arg01
2195c     00 1A 4E F2 | 	cmps	arg05, #0 wz
21960     0F 1B 02 F6 | 	mov	arg05, local01
21964     00 20 06 F6 | 	mov	local02, #0
21968     37 22 06 56 |  if_ne	mov	local03, #55
2196c     57 22 06 A6 |  if_e	mov	local03, #87
21970                 | LR__3350
21970     0B 15 12 FD | 	qdiv	arg02, arg03
21974     19 24 62 FD | 	getqy	local04
21978     0B 15 12 FD | 	qdiv	arg02, arg03
2197c     0A 24 16 F2 | 	cmp	local04, #10 wc
21980     30 24 06 C1 |  if_b	add	local04, #48
21984     11 25 02 31 |  if_ae	add	local04, local03
21988     0D 25 42 FC | 	wrbyte	local04, arg05
2198c     01 1A 06 F1 | 	add	arg05, #1
21990     01 20 06 F1 | 	add	local02, #1
21994     18 14 62 FD | 	getqx	arg02
21998     00 14 0E F2 | 	cmp	arg02, #0 wz
2199c     D0 FF 9F 5D |  if_ne	jmp	#LR__3350
219a0     0C 21 12 F2 | 	cmp	local02, arg04 wc
219a4     C8 FF 9F CD |  if_b	jmp	#LR__3350
219a8     0D 01 48 FC | 	wrbyte	#0, arg05
219ac     0F 13 02 F6 | 	mov	arg01, local01
219b0     8C FE BF FD | 	call	#__system___strrev
219b4     10 FB 01 F6 | 	mov	result1, local02
219b8     A7 F0 03 F6 | 	mov	ptra, fp
219bc     B2 00 A0 FD | 	call	#popregs_
219c0                 | __system___uitoa_ret
219c0     2D 00 64 FD | 	ret
219c4                 | 
219c4                 | __system__disassemble_0432
219c4     10 4A 05 F6 | 	mov	COUNT_, #16
219c8     A8 00 A0 FD | 	call	#pushregs_
219cc     09 1F 02 F6 | 	mov	local01, arg01
219d0     0A 21 02 F6 | 	mov	local02, arg02
219d4     0B 23 02 F6 | 	mov	local03, arg03
219d8     0C 25 02 F6 | 	mov	local04, arg04
219dc     0D 27 02 F6 | 	mov	local05, arg05
219e0     13 13 52 F6 | 	abs	arg01, local05 wc
219e4     1F 28 C6 C9 |  if_b	decod	local06, #31
219e8     00 28 06 36 |  if_ae	mov	local06, #0
219ec     64 D0 BF FD | 	call	#__system___float_fromuns
219f0     14 FB 61 F5 | 	xor	result1, local06
219f4     FD 2A 02 F6 | 	mov	local07, result1
219f8     00 2C 06 F6 | 	mov	local08, #0
219fc     0F 13 02 F6 | 	mov	arg01, local01
21a00     00 14 06 F6 | 	mov	arg02, #0
21a04     01 16 06 F6 | 	mov	arg03, #1
21a08     80 D8 BF FD | 	call	#__system___float_cmp
21a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
21a10     00 2E 06 A6 |  if_e	mov	local09, #0
21a14     10 01 68 AC |  if_e	wrlong	#0, local02
21a18     11 2F 62 AC |  if_e	wrlong	local09, local03
21a1c     8C 01 90 AD |  if_e	jmp	#LR__3372
21a20     0F 13 02 F6 | 	mov	arg01, local01
21a24     30 DD BF FD | 	call	#__system____builtin_ilogb
21a28     FD 30 02 F6 | 	mov	local10, result1
21a2c     0A 26 0E F2 | 	cmp	local05, #10 wz
21a30     24 00 90 5D |  if_ne	jmp	#LR__3360
21a34     18 2F 02 F6 | 	mov	local09, local10
21a38     01 2E 66 F0 | 	shl	local09, #1
21a3c     18 2F 02 F1 | 	add	local09, local10
21a40     17 31 52 F6 | 	abs	local10, local09 wc
21a44     0A 30 16 FD | 	qdiv	local10, #10
21a48     09 32 06 F6 | 	mov	local11, #9
21a4c     18 30 62 FD | 	getqx	local10
21a50     18 31 82 F6 | 	negc	local10, local10
21a54     04 00 90 FD | 	jmp	#LR__3361
21a58                 | LR__3360
21a58     18 32 06 F6 | 	mov	local11, #24
21a5c                 | LR__3361
21a5c                 | LR__3362
21a5c     08 2C 56 F2 | 	cmps	local08, #8 wc
21a60     01 2C 06 F1 | 	add	local08, #1
21a64     60 00 90 3D |  if_ae	jmp	#LR__3363
21a68     00 C0 1F FF 
21a6c     00 12 06 F6 | 	mov	arg01, ##1065353216
21a70     15 15 02 F6 | 	mov	arg02, local07
21a74     18 17 02 F6 | 	mov	arg03, local10
21a78     88 E3 BF FD | 	call	#__system___float_pow_n
21a7c     FD 14 02 F6 | 	mov	arg02, result1
21a80     0F 13 02 F6 | 	mov	arg01, local01
21a84     D4 D5 BF FD | 	call	#__system___float_div
21a88     FD 34 02 F6 | 	mov	local12, result1
21a8c     1A 13 02 F6 | 	mov	arg01, local12
21a90     00 C0 1F FF 
21a94     00 14 06 F6 | 	mov	arg02, ##1065353216
21a98     01 16 06 F6 | 	mov	arg03, #1
21a9c     EC D7 BF FD | 	call	#__system___float_cmp
21aa0     00 FA 55 F2 | 	cmps	result1, #0 wc
21aa4     01 30 86 C1 |  if_b	sub	local10, #1
21aa8     B0 FF 9F CD |  if_b	jmp	#LR__3362
21aac     15 15 02 F6 | 	mov	arg02, local07
21ab0     1A 13 02 F6 | 	mov	arg01, local12
21ab4     01 16 66 F6 | 	neg	arg03, #1
21ab8     D0 D7 BF FD | 	call	#__system___float_cmp
21abc     00 FA 55 F2 | 	cmps	result1, #0 wc
21ac0     01 30 06 31 |  if_ae	add	local10, #1
21ac4     94 FF 9F 3D |  if_ae	jmp	#LR__3362
21ac8                 | LR__3363
21ac8     1A 13 02 F6 | 	mov	arg01, local12
21acc     88 DC BF FD | 	call	#__system____builtin_ilogb
21ad0     FD 36 02 F6 | 	mov	local13, result1
21ad4     1A 39 02 F6 | 	mov	local14, local12
21ad8     17 39 06 F4 | 	bitl	local14, #279
21adc     17 38 26 F4 | 	bith	local14, #23
21ae0     1B 39 62 F0 | 	shl	local14, local13
21ae4     02 26 0E F2 | 	cmp	local05, #2 wz
21ae8     02 24 66 A0 |  if_e	shl	local04, #2
21aec     00 3A 06 F6 | 	mov	local15, #0
21af0     00 24 56 F2 | 	cmps	local04, #0 wc
21af4     10 00 90 3D |  if_ae	jmp	#LR__3364
21af8     18 25 C2 F2 | 	subr	local04, local10
21afc     00 24 56 F2 | 	cmps	local04, #0 wc
21b00     A0 00 90 CD |  if_b	jmp	#LR__3371
21b04     04 00 90 FD | 	jmp	#LR__3365
21b08                 | LR__3364
21b08     01 24 06 F1 | 	add	local04, #1
21b0c                 | LR__3365
21b0c     19 25 7A F3 | 	fles	local04, local11 wcz
21b10     01 3C 06 F6 | 	mov	local16, #1
21b14     97 22 48 FB | 	callpa	#(@LR__3367-@LR__3366)>>2,fcache_load_ptr_
21b18                 | LR__3366
21b18     00 40 00 FF 
21b1c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
21b20     38 00 90 3D |  if_ae	jmp	#LR__3368
21b24     01 24 56 F2 | 	cmps	local04, #1 wc
21b28     01 24 86 F1 | 	sub	local04, #1
21b2c     2C 00 90 CD |  if_b	jmp	#LR__3368
21b30     13 3B 02 FD | 	qmul	local15, local05
21b34     1C 37 02 F6 | 	mov	local13, local14
21b38     17 36 46 F0 | 	shr	local13, #23
21b3c     17 39 06 F4 | 	bitl	local14, #279
21b40     18 3A 62 FD | 	getqx	local15
21b44     13 3D 02 FD | 	qmul	local16, local05
21b48     18 3C 62 FD | 	getqx	local16
21b4c     13 39 02 FD | 	qmul	local14, local05
21b50     1B 3B 02 F1 | 	add	local15, local13
21b54     18 38 62 FD | 	getqx	local14
21b58     BC FF 9F FD | 	jmp	#LR__3366
21b5c                 | LR__3367
21b5c                 | LR__3368
21b5c     13 2F 02 F6 | 	mov	local09, local05
21b60     17 2E 66 F0 | 	shl	local09, #23
21b64     17 37 52 F6 | 	abs	local13, local09 wc
21b68     01 36 46 F0 | 	shr	local13, #1
21b6c     1B 37 82 F6 | 	negc	local13, local13
21b70     1B 39 1A F2 | 	cmp	local14, local13 wcz
21b74     20 00 90 1D |  if_a	jmp	#LR__3369
21b78     17 26 66 F0 | 	shl	local05, #23
21b7c     13 37 52 F6 | 	abs	local13, local05 wc
21b80     01 36 46 F0 | 	shr	local13, #1
21b84     1B 37 82 F6 | 	negc	local13, local13
21b88     1B 39 0A F2 | 	cmp	local14, local13 wz
21b8c     14 00 90 5D |  if_ne	jmp	#LR__3370
21b90     01 3A CE F7 | 	test	local15, #1 wz
21b94     0C 00 90 AD |  if_e	jmp	#LR__3370
21b98                 | LR__3369
21b98     01 3A 06 F1 | 	add	local15, #1
21b9c     1E 3B 0A F2 | 	cmp	local15, local16 wz
21ba0     01 30 06 A1 |  if_e	add	local10, #1
21ba4                 | LR__3370
21ba4                 | LR__3371
21ba4     10 3B 62 FC | 	wrlong	local15, local02
21ba8     11 31 62 FC | 	wrlong	local10, local03
21bac                 | LR__3372
21bac     A7 F0 03 F6 | 	mov	ptra, fp
21bb0     B2 00 A0 FD | 	call	#popregs_
21bb4                 | __system__disassemble_0432_ret
21bb4     2D 00 64 FD | 	ret
21bb8                 | 
21bb8                 | __system__emitsign_0434
21bb8     00 FA 05 F6 | 	mov	result1, #0
21bbc     00 14 0E F2 | 	cmp	arg02, #0 wz
21bc0     09 01 02 56 |  if_ne	mov	_var01, arg01
21bc4     01 12 06 51 |  if_ne	add	arg01, #1
21bc8     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
21bcc     01 FA 05 56 |  if_ne	mov	result1, #1
21bd0     00 16 0E F2 | 	cmp	arg03, #0 wz
21bd4     09 61 48 5C |  if_ne	wrbyte	#48, arg01
21bd8     01 12 06 51 |  if_ne	add	arg01, #1
21bdc     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
21be0     02 FA 05 51 |  if_ne	add	result1, #2
21be4                 | __system__emitsign_0434_ret
21be4     2D 00 64 FD | 	ret
21be8                 | 
21be8                 | __system___gettxfunc
21be8     01 4A 05 F6 | 	mov	COUNT_, #1
21bec     A8 00 A0 FD | 	call	#pushregs_
21bf0     A0 F8 BF FD | 	call	#__system____getftab
21bf4     FD 1E 0A F6 | 	mov	local01, result1 wz
21bf8     10 00 90 AD |  if_e	jmp	#LR__3380
21bfc     08 1E 06 F1 | 	add	local01, #8
21c00     0F 15 0A FB | 	rdlong	arg02, local01 wz
21c04     08 1E 86 F1 | 	sub	local01, #8
21c08     08 00 90 5D |  if_ne	jmp	#LR__3381
21c0c                 | LR__3380
21c0c     00 FA 05 F6 | 	mov	result1, #0
21c10     0C 00 90 FD | 	jmp	#LR__3382
21c14                 | LR__3381
21c14     00 D8 03 FF 
21c18     00 1E 46 F5 | 	or	local01, ##128974848
21c1c     0F FB 01 F6 | 	mov	result1, local01
21c20                 | LR__3382
21c20     A7 F0 03 F6 | 	mov	ptra, fp
21c24     B2 00 A0 FD | 	call	#popregs_
21c28                 | __system___gettxfunc_ret
21c28     2D 00 64 FD | 	ret
21c2c                 | 
21c2c                 | __system___getrxfunc
21c2c     01 4A 05 F6 | 	mov	COUNT_, #1
21c30     A8 00 A0 FD | 	call	#pushregs_
21c34     5C F8 BF FD | 	call	#__system____getftab
21c38     FD 1E 0A F6 | 	mov	local01, result1 wz
21c3c     10 00 90 AD |  if_e	jmp	#LR__3390
21c40     08 1E 06 F1 | 	add	local01, #8
21c44     0F 15 0A FB | 	rdlong	arg02, local01 wz
21c48     08 1E 86 F1 | 	sub	local01, #8
21c4c     08 00 90 5D |  if_ne	jmp	#LR__3391
21c50                 | LR__3390
21c50     00 FA 05 F6 | 	mov	result1, #0
21c54     08 00 90 FD | 	jmp	#LR__3392
21c58                 | LR__3391
21c58     96 1E 26 F4 | 	bith	local01, #150
21c5c     0F FB 01 F6 | 	mov	result1, local01
21c60                 | LR__3392
21c60     A7 F0 03 F6 | 	mov	ptra, fp
21c64     B2 00 A0 FD | 	call	#popregs_
21c68                 | __system___getrxfunc_ret
21c68     2D 00 64 FD | 	ret
21c6c                 | 
21c6c                 | __system___getiolock_0474
21c6c     01 4A 05 F6 | 	mov	COUNT_, #1
21c70     A8 00 A0 FD | 	call	#pushregs_
21c74     1C F8 BF FD | 	call	#__system____getftab
21c78     FD 1E 0A F6 | 	mov	local01, result1 wz
21c7c     10 00 90 AD |  if_e	jmp	#LR__3400
21c80     08 1E 06 F1 | 	add	local01, #8
21c84     0F FB 09 FB | 	rdlong	result1, local01 wz
21c88     08 1E 86 F1 | 	sub	local01, #8
21c8c     18 00 90 5D |  if_ne	jmp	#LR__3401
21c90                 | LR__3400
21c90     01 00 00 FF 
21c94     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
21c98     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
21c9c     01 00 00 FF 
21ca0     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
21ca4     08 00 90 FD | 	jmp	#LR__3402
21ca8                 | LR__3401
21ca8     0C 1E 06 F1 | 	add	local01, #12
21cac     0F FB 01 F6 | 	mov	result1, local01
21cb0                 | LR__3402
21cb0     A7 F0 03 F6 | 	mov	ptra, fp
21cb4     B2 00 A0 FD | 	call	#popregs_
21cb8                 | __system___getiolock_0474_ret
21cb8     2D 00 64 FD | 	ret
21cbc                 | 
21cbc                 | __system____ScanForChar
21cbc     09 01 02 F6 | 	mov	_var01, arg01
21cc0     09 03 02 F6 | 	mov	_var02, arg01
21cc4     97 06 48 FB | 	callpa	#(@LR__3411-@LR__3410)>>2,fcache_load_ptr_
21cc8                 | LR__3410
21cc8     01 FB C9 FA | 	rdbyte	result1, _var02 wz
21ccc     01 02 06 51 |  if_ne	add	_var02, #1
21cd0     F4 FF 9F 5D |  if_ne	jmp	#LR__3410
21cd4                 | LR__3411
21cd4     09 03 82 F1 | 	sub	_var02, arg01
21cd8     01 FB 01 F6 | 	mov	result1, _var02
21cdc     FD 12 0A F6 | 	mov	arg01, result1 wz
21ce0     00 FA 05 A6 |  if_e	mov	result1, #0
21ce4     B8 00 90 AD |  if_e	jmp	#LR__3418
21ce8     0A 05 02 F6 | 	mov	_var03, arg02
21cec     07 04 4E F7 | 	zerox	_var03, #7 wz
21cf0     00 FA 05 A6 |  if_e	mov	result1, #0
21cf4     A8 00 90 AD |  if_e	jmp	#LR__3418
21cf8     01 16 16 F2 | 	cmp	arg03, #1 wc
21cfc     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
21d00     01 16 06 86 |  if_c_and_z	mov	arg03, #1
21d04     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
21d08     94 00 90 4D |  if_c_and_nz	jmp	#LR__3418
21d0c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
21d10     10 00 90 ED |  if_be	jmp	#LR__3412
21d14     00 18 0E F2 | 	cmp	arg04, #0 wz
21d18     00 FA 05 A6 |  if_e	mov	result1, #0
21d1c     80 00 90 AD |  if_e	jmp	#LR__3418
21d20     09 17 02 F6 | 	mov	arg03, arg01
21d24                 | LR__3412
21d24     01 16 86 F1 | 	sub	arg03, #1
21d28     00 18 0E F2 | 	cmp	arg04, #0 wz
21d2c     38 00 90 5D |  if_ne	jmp	#LR__3414
21d30     0B 07 02 F6 | 	mov	_var04, arg03
21d34     09 09 02 F6 | 	mov	_var05, arg01
21d38                 | LR__3413
21d38     04 07 12 F2 | 	cmp	_var04, _var05 wc
21d3c     5C 00 90 3D |  if_ae	jmp	#LR__3417
21d40     03 05 02 F6 | 	mov	_var03, _var04
21d44     00 05 02 F1 | 	add	_var03, _var01
21d48     02 05 C2 FA | 	rdbyte	_var03, _var03
21d4c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
21d50     0C 05 0A F2 | 	cmp	_var03, arg04 wz
21d54     01 06 06 A1 |  if_e	add	_var04, #1
21d58     03 FB 01 A6 |  if_e	mov	result1, _var04
21d5c     40 00 90 AD |  if_e	jmp	#LR__3418
21d60     01 06 06 F1 | 	add	_var04, #1
21d64     D0 FF 9F FD | 	jmp	#LR__3413
21d68                 | LR__3414
21d68     0B 07 02 F6 | 	mov	_var04, arg03
21d6c                 | LR__3415
21d6c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
21d70     28 00 90 1D |  if_a	jmp	#LR__3416
21d74     03 09 02 F6 | 	mov	_var05, _var04
21d78     00 09 02 F1 | 	add	_var05, _var01
21d7c     04 05 C2 FA | 	rdbyte	_var03, _var05
21d80     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
21d84     04 05 0A F2 | 	cmp	_var03, _var05 wz
21d88     01 06 06 A1 |  if_e	add	_var04, #1
21d8c     03 FB 01 A6 |  if_e	mov	result1, _var04
21d90     0C 00 90 AD |  if_e	jmp	#LR__3418
21d94     01 06 86 F1 | 	sub	_var04, #1
21d98     D0 FF 9F FD | 	jmp	#LR__3415
21d9c                 | LR__3416
21d9c                 | LR__3417
21d9c     00 FA 05 F6 | 	mov	result1, #0
21da0                 | LR__3418
21da0                 | __system____ScanForChar_ret
21da0     2D 00 64 FD | 	ret
21da4                 | 
21da4                 | __system___basic_dir
21da4     05 4A 05 F6 | 	mov	COUNT_, #5
21da8     A8 00 A0 FD | 	call	#pushregs_
21dac     4C F0 07 F1 | 	add	ptra, #76
21db0     04 4E 05 F1 | 	add	fp, #4
21db4     A7 12 62 FC | 	wrlong	arg01, fp
21db8     04 4E 05 F1 | 	add	fp, #4
21dbc     A7 14 62 FC | 	wrlong	arg02, fp
21dc0     04 4E 85 F1 | 	sub	fp, #4
21dc4     A7 14 0A FB | 	rdlong	arg02, fp wz
21dc8     04 4E 85 F1 | 	sub	fp, #4
21dcc     04 4E 05 51 |  if_ne	add	fp, #4
21dd0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21dd4     04 4E 85 51 |  if_ne	sub	fp, #4
21dd8     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
21ddc     70 00 90 AD |  if_e	jmp	#LR__3420
21de0     03 00 00 FF 
21de4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21de8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21dec     03 00 00 FF 
21df0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21df4     03 00 00 5F 
21df8     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
21dfc     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
21e00     03 00 00 5F 
21e04     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
21e08     18 EA BF 5D |  if_ne	call	#__system__closedir
21e0c     5C 01 00 FF 
21e10     F4 12 06 F6 | 	mov	arg01, ##@LR__4578
21e14     20 E9 BF FD | 	call	#__system__opendir
21e18     03 00 00 FF 
21e1c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21e20     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
21e24     08 4E 05 F1 | 	add	fp, #8
21e28     A7 20 02 FB | 	rdlong	local02, fp
21e2c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21e30     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
21e34     04 4E 85 F1 | 	sub	fp, #4
21e38     A7 20 02 FB | 	rdlong	local02, fp
21e3c     04 4E 85 F1 | 	sub	fp, #4
21e40     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21e44     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
21e48     03 00 00 FF 
21e4c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
21e50                 | LR__3420
21e50     03 00 00 FF 
21e54     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21e58     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21e5c     03 00 00 FF 
21e60     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21e64     5C 01 00 AF 
21e68     F6 FA 05 A6 |  if_e	mov	result1, ##@LR__4579
21e6c     84 02 90 AD |  if_e	jmp	#LR__3433
21e70                 | LR__3421
21e70     03 00 00 FF 
21e74     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21e78     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21e7c     03 00 00 FF 
21e80     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21e84     10 EA BF FD | 	call	#__system__readdir
21e88     0C 4E 05 F1 | 	add	fp, #12
21e8c     A7 FA 61 FC | 	wrlong	result1, fp
21e90     0C 4E 85 F1 | 	sub	fp, #12
21e94     00 FA 0D F2 | 	cmp	result1, #0 wz
21e98     38 00 90 5D |  if_ne	jmp	#LR__3422
21e9c     03 00 00 FF 
21ea0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21ea4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21ea8     03 00 00 FF 
21eac     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21eb0     70 E9 BF FD | 	call	#__system__closedir
21eb4     03 00 00 FF 
21eb8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21ebc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
21ec0     03 00 00 FF 
21ec4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21ec8     5C 01 00 FF 
21ecc     F8 FA 05 F6 | 	mov	result1, ##@LR__4580
21ed0     20 02 90 FD | 	jmp	#LR__3433
21ed4                 | LR__3422
21ed4     0C 4E 05 F1 | 	add	fp, #12
21ed8     A7 12 02 FB | 	rdlong	arg01, fp
21edc     0C 4E 85 F1 | 	sub	fp, #12
21ee0     03 00 00 FF 
21ee4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
21ee8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
21eec     03 00 00 FF 
21ef0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
21ef4     48 07 B0 FD | 	call	#__system___pat_match
21ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
21efc     70 FF 9F AD |  if_e	jmp	#LR__3421
21f00     03 00 00 FF 
21f04     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
21f08     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21f0c     03 00 00 FF 
21f10     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
21f14     78 01 90 AD |  if_e	jmp	#LR__3429
21f18     0C 4E 05 F1 | 	add	fp, #12
21f1c     A7 12 02 FB | 	rdlong	arg01, fp
21f20     04 4E 05 F1 | 	add	fp, #4
21f24     A7 14 02 F6 | 	mov	arg02, fp
21f28     10 4E 85 F1 | 	sub	fp, #16
21f2c     6C F2 BF FD | 	call	#__system__stat
21f30     40 4E 05 F1 | 	add	fp, #64
21f34     A7 FA 61 FC | 	wrlong	result1, fp
21f38     40 4E 85 F1 | 	sub	fp, #64
21f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
21f40     5C 01 00 5F 
21f44     FA FA 05 56 |  if_ne	mov	result1, ##@LR__4581
21f48     A8 01 90 5D |  if_ne	jmp	#LR__3433
21f4c     18 4E 05 F1 | 	add	fp, #24
21f50     A7 20 02 FB | 	rdlong	local02, fp
21f54     78 00 00 FF 
21f58     00 20 06 F5 | 	and	local02, ##61440
21f5c     2C 4E 05 F1 | 	add	fp, #44
21f60     A7 20 62 FC | 	wrlong	local02, fp
21f64     38 4E 85 F1 | 	sub	fp, #56
21f68     A7 20 02 FB | 	rdlong	local02, fp
21f6c     0C 4E 85 F1 | 	sub	fp, #12
21f70     10 21 C2 FA | 	rdbyte	local02, local02
21f74     2E 20 0E F2 | 	cmp	local02, #46 wz
21f78     08 4E 05 A1 |  if_e	add	fp, #8
21f7c     A7 04 68 AC |  if_e	wrlong	#2, fp
21f80     08 4E C5 F3 | 	sumz	fp, #8
21f84     A7 00 68 5C |  if_ne	wrlong	#0, fp
21f88     08 4E 85 51 |  if_ne	sub	fp, #8
21f8c     44 4E 05 F1 | 	add	fp, #68
21f90     A7 20 02 FB | 	rdlong	local02, fp
21f94     44 4E 85 F1 | 	sub	fp, #68
21f98     08 00 00 FF 
21f9c     00 20 0E F2 | 	cmp	local02, ##4096 wz
21fa0     18 00 90 5D |  if_ne	jmp	#LR__3423
21fa4     08 4E 05 F1 | 	add	fp, #8
21fa8     A7 20 02 FB | 	rdlong	local02, fp
21fac     10 20 46 F5 | 	or	local02, #16
21fb0     A7 20 62 FC | 	wrlong	local02, fp
21fb4     08 4E 85 F1 | 	sub	fp, #8
21fb8     AC 00 90 FD | 	jmp	#LR__3428
21fbc                 | LR__3423
21fbc     44 4E 05 F1 | 	add	fp, #68
21fc0     A7 20 02 FB | 	rdlong	local02, fp
21fc4     44 4E 85 F1 | 	sub	fp, #68
21fc8     10 00 00 FF 
21fcc     00 20 0E F2 | 	cmp	local02, ##8192 wz
21fd0     44 4E 05 51 |  if_ne	add	fp, #68
21fd4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21fd8     44 4E 85 51 |  if_ne	sub	fp, #68
21fdc     18 00 00 5F 
21fe0     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
21fe4     44 4E 05 51 |  if_ne	add	fp, #68
21fe8     0F 23 02 56 |  if_ne	mov	local03, local01
21fec     44 4E 85 51 |  if_ne	sub	fp, #68
21ff0     20 00 00 5F 
21ff4     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
21ff8     18 00 90 5D |  if_ne	jmp	#LR__3424
21ffc     08 4E 05 F1 | 	add	fp, #8
22000     A7 20 02 FB | 	rdlong	local02, fp
22004     04 20 46 F5 | 	or	local02, #4
22008     A7 20 62 FC | 	wrlong	local02, fp
2200c     08 4E 85 F1 | 	sub	fp, #8
22010     54 00 90 FD | 	jmp	#LR__3427
22014                 | LR__3424
22014     18 4E 05 F1 | 	add	fp, #24
22018     A7 20 02 FB | 	rdlong	local02, fp
2201c     18 4E 85 F1 | 	sub	fp, #24
22020     92 20 CE F7 | 	test	local02, #146 wz
22024     18 00 90 5D |  if_ne	jmp	#LR__3425
22028     08 4E 05 F1 | 	add	fp, #8
2202c     A7 20 02 FB | 	rdlong	local02, fp
22030     01 20 46 F5 | 	or	local02, #1
22034     A7 20 62 FC | 	wrlong	local02, fp
22038     08 4E 85 F1 | 	sub	fp, #8
2203c     28 00 90 FD | 	jmp	#LR__3426
22040                 | LR__3425
22040     44 4E 05 F1 | 	add	fp, #68
22044     A7 24 02 FB | 	rdlong	local04, fp
22048     44 4E 85 F1 | 	sub	fp, #68
2204c     08 00 00 FF 
22050     00 24 0E F2 | 	cmp	local04, ##4096 wz
22054     08 4E 05 51 |  if_ne	add	fp, #8
22058     A7 24 02 5B |  if_ne	rdlong	local04, fp
2205c     20 24 46 55 |  if_ne	or	local04, #32
22060     A7 24 62 5C |  if_ne	wrlong	local04, fp
22064     08 4E 85 51 |  if_ne	sub	fp, #8
22068                 | LR__3426
22068                 | LR__3427
22068                 | LR__3428
22068     08 4E 05 F1 | 	add	fp, #8
2206c     A7 24 02 FB | 	rdlong	local04, fp
22070     08 4E 85 F1 | 	sub	fp, #8
22074     03 00 00 FF 
22078     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2207c     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
22080     03 00 00 FF 
22084     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
22088     0F 25 CA F7 | 	test	local04, local01 wz
2208c     E0 FD 9F AD |  if_e	jmp	#LR__3421
22090                 | LR__3429
22090     0C 4E 05 F1 | 	add	fp, #12
22094     A7 12 02 FB | 	rdlong	arg01, fp
22098     0C 4E 85 F1 | 	sub	fp, #12
2209c     09 27 02 F6 | 	mov	local05, arg01
220a0     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
220a4                 | LR__3430
220a4     13 FB C9 FA | 	rdbyte	result1, local05 wz
220a8     01 26 06 51 |  if_ne	add	local05, #1
220ac     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
220b0                 | LR__3431
220b0     13 13 C2 F2 | 	subr	arg01, local05
220b4     01 12 06 F1 | 	add	arg01, #1
220b8     68 E0 BF FD | 	call	#__system___gc_alloc_managed
220bc     48 4E 05 F1 | 	add	fp, #72
220c0     A7 FA 61 FC | 	wrlong	result1, fp
220c4     48 4E 85 F1 | 	sub	fp, #72
220c8     00 FA 0D F2 | 	cmp	result1, #0 wz
220cc     18 00 90 AD |  if_e	jmp	#LR__3432
220d0     48 4E 05 F1 | 	add	fp, #72
220d4     A7 12 02 FB | 	rdlong	arg01, fp
220d8     3C 4E 85 F1 | 	sub	fp, #60
220dc     A7 14 02 FB | 	rdlong	arg02, fp
220e0     0C 4E 85 F1 | 	sub	fp, #12
220e4     A8 A1 BF FD | 	call	#__system____builtin_strcpy
220e8                 | LR__3432
220e8     48 4E 05 F1 | 	add	fp, #72
220ec     A7 FA 01 FB | 	rdlong	result1, fp
220f0     48 4E 85 F1 | 	sub	fp, #72
220f4                 | LR__3433
220f4     A7 F0 03 F6 | 	mov	ptra, fp
220f8     B2 00 A0 FD | 	call	#popregs_
220fc                 | __system___basic_dir_ret
220fc     2D 00 64 FD | 	ret
22100                 | 
22100                 | __system__pack_0540
22100     09 01 02 F6 | 	mov	_var01, arg01
22104     7F 16 06 F1 | 	add	arg03, #127
22108     04 18 CE F7 | 	test	arg04, #4 wz
2210c     10 00 90 AD |  if_e	jmp	#LR__3440
22110     00 00 0E F2 | 	cmp	_var01, #0 wz
22114     16 00 C6 A9 |  if_e	decod	_var01, #22
22118     F7 00 26 F4 | 	bith	_var01, #247
2211c     B4 00 90 FD | 	jmp	#LR__3449
22120                 | LR__3440
22120     02 18 CE F7 | 	test	arg04, #2 wz
22124     00 C0 3F 5F 
22128     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2212c     00 14 06 56 |  if_ne	mov	arg02, #0
22130     A0 00 90 5D |  if_ne	jmp	#LR__3448
22134     08 18 CE F7 | 	test	arg04, #8 wz
22138     00 00 06 56 |  if_ne	mov	_var01, #0
2213c     94 00 90 5D |  if_ne	jmp	#LR__3447
22140     FF 16 56 F2 | 	cmps	arg03, #255 wc
22144     00 C0 3F 3F 
22148     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2214c     00 14 06 36 |  if_ae	mov	arg02, #0
22150     80 00 90 3D |  if_ae	jmp	#LR__3446
22154     01 16 56 F2 | 	cmps	arg03, #1 wc
22158     6C 00 90 3D |  if_ae	jmp	#LR__3444
2215c     01 14 46 F0 | 	shr	arg02, #1
22160     00 03 02 F6 | 	mov	_var02, _var01
22164     01 02 06 F5 | 	and	_var02, #1
22168     1F 02 66 F0 | 	shl	_var02, #31
2216c     01 15 42 F5 | 	or	arg02, _var02
22170     01 00 46 F0 | 	shr	_var01, #1
22174     97 1E 48 FB | 	callpa	#(@LR__3442-@LR__3441)>>2,fcache_load_ptr_
22178                 | LR__3441
22178     00 16 56 F2 | 	cmps	arg03, #0 wc
2217c     34 00 90 3D |  if_ae	jmp	#LR__3443
22180     00 00 0E F2 | 	cmp	_var01, #0 wz
22184     2C 00 90 AD |  if_e	jmp	#LR__3443
22188     0A 13 02 F6 | 	mov	arg01, arg02
2218c     01 12 06 F5 | 	and	arg01, #1
22190     01 16 06 F1 | 	add	arg03, #1
22194     01 14 46 F0 | 	shr	arg02, #1
22198     00 03 02 F6 | 	mov	_var02, _var01
2219c     01 02 06 F5 | 	and	_var02, #1
221a0     1F 02 66 F0 | 	shl	_var02, #31
221a4     01 15 42 F5 | 	or	arg02, _var02
221a8     09 15 42 F5 | 	or	arg02, arg01
221ac     01 00 46 F0 | 	shr	_var01, #1
221b0     C4 FF 9F FD | 	jmp	#LR__3441
221b4                 | LR__3442
221b4                 | LR__3443
221b4     00 16 56 F2 | 	cmps	arg03, #0 wc
221b8     18 00 90 3D |  if_ae	jmp	#LR__3445
221bc     00 14 0E F2 | 	cmp	arg02, #0 wz
221c0     6F 14 62 FD | 	wrnz	arg02
221c4     0C 00 90 FD | 	jmp	#LR__3445
221c8                 | LR__3444
221c8     17 01 06 F4 | 	bitl	_var01, #279
221cc     17 16 66 F0 | 	shl	arg03, #23
221d0     0B 01 42 F5 | 	or	_var01, arg03
221d4                 | LR__3445
221d4                 | LR__3446
221d4                 | LR__3447
221d4                 | LR__3448
221d4                 | LR__3449
221d4     01 00 CE F7 | 	test	_var01, #1 wz
221d8     01 14 46 55 |  if_ne	or	arg02, #1
221dc     0A 17 02 F6 | 	mov	arg03, arg02
221e0     00 02 06 F6 | 	mov	_var02, #0
221e4     FF FF 3F FF 
221e8     FF 15 06 F1 | 	add	arg02, ##2147483647
221ec     0B 15 12 F2 | 	cmp	arg02, arg03 wc
221f0     01 02 06 C6 |  if_b	mov	_var02, #1
221f4     01 01 02 F1 | 	add	_var01, _var02
221f8     01 18 CE F7 | 	test	arg04, #1 wz
221fc     1F 00 26 54 |  if_ne	bith	_var01, #31
22200     00 FB 01 F6 | 	mov	result1, _var01
22204                 | __system__pack_0540_ret
22204     2D 00 64 FD | 	ret
22208                 | 
22208                 | __system___rxtxioctl_0630
22208     00 15 0E F2 | 	cmp	arg02, #256 wz
2220c     0C 00 90 AD |  if_e	jmp	#LR__3450
22210     01 15 0E F2 | 	cmp	arg02, #257 wz
22214     1C 00 90 AD |  if_e	jmp	#LR__3451
22218     30 00 90 FD | 	jmp	#LR__3452
2221c                 | LR__3450
2221c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22220     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22224     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22228     0B FB 61 FC | 	wrlong	result1, arg03
2222c     00 FA 05 F6 | 	mov	result1, #0
22230     28 00 90 FD | 	jmp	#LR__3453
22234                 | LR__3451
22234     0B 13 02 FB | 	rdlong	arg01, arg03
22238     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2223c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22240     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22244     00 FA 05 F6 | 	mov	result1, #0
22248     10 00 90 FD | 	jmp	#LR__3453
2224c                 | LR__3452
2224c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22250     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
22254     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22258     01 FA 65 F6 | 	neg	result1, #1
2225c                 | LR__3453
2225c                 | __system___rxtxioctl_0630_ret
2225c     2D 00 64 FD | 	ret
22260                 | 
22260                 | __system____dummy_flush_0631
22260     00 FA 05 F6 | 	mov	result1, #0
22264                 | __system____dummy_flush_0631_ret
22264     2D 00 64 FD | 	ret
22268                 | 
22268                 | __system___vfsread
22268     03 4A 05 F6 | 	mov	COUNT_, #3
2226c     A8 00 A0 FD | 	call	#pushregs_
22270     28 F0 07 F1 | 	add	ptra, #40
22274     04 4E 05 F1 | 	add	fp, #4
22278     A7 12 62 FC | 	wrlong	arg01, fp
2227c     04 4E 05 F1 | 	add	fp, #4
22280     A7 14 62 FC | 	wrlong	arg02, fp
22284     04 4E 05 F1 | 	add	fp, #4
22288     A7 16 62 FC | 	wrlong	arg03, fp
2228c     04 4E 85 F1 | 	sub	fp, #4
22290     A7 FA 01 FB | 	rdlong	result1, fp
22294     14 4E 05 F1 | 	add	fp, #20
22298     A7 FA 61 FC | 	wrlong	result1, fp
2229c     04 4E 05 F1 | 	add	fp, #4
222a0     A7 00 68 FC | 	wrlong	#0, fp
222a4     1C 4E 85 F1 | 	sub	fp, #28
222a8     A7 12 02 FB | 	rdlong	arg01, fp
222ac     04 4E 85 F1 | 	sub	fp, #4
222b0     08 12 06 F1 | 	add	arg01, #8
222b4     09 FB 01 FB | 	rdlong	result1, arg01
222b8     01 FA CD F7 | 	test	result1, #1 wz
222bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
222c0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
222c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
222c8     01 FA 65 A6 |  if_e	neg	result1, #1
222cc     74 02 90 AD |  if_e	jmp	#LR__3466
222d0     04 4E 05 F1 | 	add	fp, #4
222d4     A7 12 02 FB | 	rdlong	arg01, fp
222d8     04 4E 85 F1 | 	sub	fp, #4
222dc     14 12 06 F1 | 	add	arg01, #20
222e0     09 FB 09 FB | 	rdlong	result1, arg01 wz
222e4     B8 00 90 AD |  if_e	jmp	#LR__3461
222e8     04 4E 05 F1 | 	add	fp, #4
222ec     A7 12 02 FB | 	rdlong	arg01, fp
222f0     09 17 02 F6 | 	mov	arg03, arg01
222f4     14 16 06 F1 | 	add	arg03, #20
222f8     0B 1F 02 FB | 	rdlong	local01, arg03
222fc     0F 21 02 F6 | 	mov	local02, local01
22300     13 1E 46 F7 | 	zerox	local01, #19
22304     14 20 46 F0 | 	shr	local02, #20
22308     02 20 66 F0 | 	shl	local02, #2
2230c     ED 20 02 F1 | 	add	local02, __methods__
22310     10 21 02 FB | 	rdlong	local02, local02
22314     04 4E 05 F1 | 	add	fp, #4
22318     A7 14 02 FB | 	rdlong	arg02, fp
2231c     04 4E 05 F1 | 	add	fp, #4
22320     A7 16 02 FB | 	rdlong	arg03, fp
22324     0C 4E 85 F1 | 	sub	fp, #12
22328     F2 22 02 F6 | 	mov	local03, objptr
2232c     0F E5 01 F6 | 	mov	objptr, local01
22330     2D 20 62 FD | 	call	local02
22334     11 E5 01 F6 | 	mov	objptr, local03
22338     10 4E 05 F1 | 	add	fp, #16
2233c     A7 FA 61 FC | 	wrlong	result1, fp
22340     10 4E 85 F1 | 	sub	fp, #16
22344     00 FA 55 F2 | 	cmps	result1, #0 wc
22348     44 00 90 3D |  if_ae	jmp	#LR__3460
2234c     04 4E 05 F1 | 	add	fp, #4
22350     A7 22 02 FB | 	rdlong	local03, fp
22354     11 1F 02 F6 | 	mov	local01, local03
22358     08 22 06 F1 | 	add	local03, #8
2235c     11 21 02 FB | 	rdlong	local02, local03
22360     20 20 46 F5 | 	or	local02, #32
22364     08 1E 06 F1 | 	add	local01, #8
22368     0F 21 62 FC | 	wrlong	local02, local01
2236c     0C 4E 05 F1 | 	add	fp, #12
22370     A7 12 0A FB | 	rdlong	arg01, fp wz
22374     10 4E 85 F1 | 	sub	fp, #16
22378     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2237c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22380     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22384     01 FA 65 56 |  if_ne	neg	result1, #1
22388     00 FA 05 A6 |  if_e	mov	result1, #0
2238c     B4 01 90 FD | 	jmp	#LR__3466
22390                 | LR__3460
22390     10 4E 05 F1 | 	add	fp, #16
22394     A7 FA 01 FB | 	rdlong	result1, fp
22398     10 4E 85 F1 | 	sub	fp, #16
2239c     A4 01 90 FD | 	jmp	#LR__3466
223a0                 | LR__3461
223a0     04 4E 05 F1 | 	add	fp, #4
223a4     A7 12 02 FB | 	rdlong	arg01, fp
223a8     20 12 06 F1 | 	add	arg01, #32
223ac     09 13 0A FB | 	rdlong	arg01, arg01 wz
223b0     14 4E 05 F1 | 	add	fp, #20
223b4     A7 12 62 FC | 	wrlong	arg01, fp
223b8     18 4E 85 F1 | 	sub	fp, #24
223bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
223c0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
223c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
223c8     01 FA 65 A6 |  if_e	neg	result1, #1
223cc     74 01 90 AD |  if_e	jmp	#LR__3466
223d0     04 4E 05 F1 | 	add	fp, #4
223d4     A7 22 02 FB | 	rdlong	local03, fp
223d8     04 4E 85 F1 | 	sub	fp, #4
223dc     28 22 06 F1 | 	add	local03, #40
223e0     11 21 0A FB | 	rdlong	local02, local03 wz
223e4     7C 00 90 AD |  if_e	jmp	#LR__3463
223e8     04 4E 05 F1 | 	add	fp, #4
223ec     A7 12 02 FB | 	rdlong	arg01, fp
223f0     09 23 02 F6 | 	mov	local03, arg01
223f4     28 22 06 F1 | 	add	local03, #40
223f8     11 1F 02 FB | 	rdlong	local01, local03
223fc     0F 21 02 F6 | 	mov	local02, local01
22400     13 1E 46 F7 | 	zerox	local01, #19
22404     14 20 46 F0 | 	shr	local02, #20
22408     02 20 66 F0 | 	shl	local02, #2
2240c     ED 20 02 F1 | 	add	local02, __methods__
22410     10 21 02 FB | 	rdlong	local02, local02
22414     20 4E 05 F1 | 	add	fp, #32
22418     A7 16 02 F6 | 	mov	arg03, fp
2241c     24 4E 85 F1 | 	sub	fp, #36
22420     00 15 06 F6 | 	mov	arg02, #256
22424     F2 22 02 F6 | 	mov	local03, objptr
22428     0F E5 01 F6 | 	mov	objptr, local01
2242c     2D 20 62 FD | 	call	local02
22430     11 E5 01 F6 | 	mov	objptr, local03
22434     10 4E 05 F1 | 	add	fp, #16
22438     A7 FA 61 FC | 	wrlong	result1, fp
2243c     00 FA 4D F2 | 	cmps	result1, #0 wz
22440     10 4E 85 F1 | 	sub	fp, #16
22444     1C 00 90 5D |  if_ne	jmp	#LR__3462
22448     24 4E 05 F1 | 	add	fp, #36
2244c     A7 20 02 FB | 	rdlong	local02, fp
22450     24 4E 85 F1 | 	sub	fp, #36
22454     02 20 CE F7 | 	test	local02, #2 wz
22458     20 4E 05 51 |  if_ne	add	fp, #32
2245c     A7 02 68 5C |  if_ne	wrlong	#1, fp
22460     20 4E 85 51 |  if_ne	sub	fp, #32
22464                 | LR__3462
22464                 | LR__3463
22464     10 4E 05 F1 | 	add	fp, #16
22468     A7 00 68 FC | 	wrlong	#0, fp
2246c     10 4E 85 F1 | 	sub	fp, #16
22470                 | LR__3464
22470     0C 4E 05 F1 | 	add	fp, #12
22474     A7 22 02 FB | 	rdlong	local03, fp
22478     0C 4E 85 F1 | 	sub	fp, #12
2247c     01 22 16 F2 | 	cmp	local03, #1 wc
22480     B4 00 90 CD |  if_b	jmp	#LR__3465
22484     18 4E 05 F1 | 	add	fp, #24
22488     A7 20 02 FB | 	rdlong	local02, fp
2248c     10 23 02 F6 | 	mov	local03, local02
22490     13 22 46 F7 | 	zerox	local03, #19
22494     14 20 46 F0 | 	shr	local02, #20
22498     02 20 66 F0 | 	shl	local02, #2
2249c     ED 20 02 F1 | 	add	local02, __methods__
224a0     10 21 02 FB | 	rdlong	local02, local02
224a4     14 4E 85 F1 | 	sub	fp, #20
224a8     A7 12 02 FB | 	rdlong	arg01, fp
224ac     04 4E 85 F1 | 	sub	fp, #4
224b0     F2 1E 02 F6 | 	mov	local01, objptr
224b4     11 E5 01 F6 | 	mov	objptr, local03
224b8     2D 20 62 FD | 	call	local02
224bc     0F E5 01 F6 | 	mov	objptr, local01
224c0     14 4E 05 F1 | 	add	fp, #20
224c4     A7 FA 61 FC | 	wrlong	result1, fp
224c8     14 4E 85 F1 | 	sub	fp, #20
224cc     00 FA 55 F2 | 	cmps	result1, #0 wc
224d0     64 00 90 CD |  if_b	jmp	#LR__3465
224d4     1C 4E 05 F1 | 	add	fp, #28
224d8     A7 22 02 FB | 	rdlong	local03, fp
224dc     11 21 02 F6 | 	mov	local02, local03
224e0     01 20 06 F1 | 	add	local02, #1
224e4     A7 20 62 FC | 	wrlong	local02, fp
224e8     08 4E 85 F1 | 	sub	fp, #8
224ec     A7 20 02 FB | 	rdlong	local02, fp
224f0     11 21 42 FC | 	wrbyte	local02, local03
224f4     04 4E 85 F1 | 	sub	fp, #4
224f8     A7 22 02 FB | 	rdlong	local03, fp
224fc     01 22 06 F1 | 	add	local03, #1
22500     A7 22 62 FC | 	wrlong	local03, fp
22504     04 4E 85 F1 | 	sub	fp, #4
22508     A7 22 02 FB | 	rdlong	local03, fp
2250c     01 22 86 F1 | 	sub	local03, #1
22510     A7 22 62 FC | 	wrlong	local03, fp
22514     14 4E 05 F1 | 	add	fp, #20
22518     A7 22 0A FB | 	rdlong	local03, fp wz
2251c     20 4E 85 F1 | 	sub	fp, #32
22520     4C FF 9F AD |  if_e	jmp	#LR__3464
22524     14 4E 05 F1 | 	add	fp, #20
22528     A7 20 02 FB | 	rdlong	local02, fp
2252c     14 4E 85 F1 | 	sub	fp, #20
22530     0A 20 0E F2 | 	cmp	local02, #10 wz
22534     38 FF 9F 5D |  if_ne	jmp	#LR__3464
22538                 | LR__3465
22538     10 4E 05 F1 | 	add	fp, #16
2253c     A7 FA 01 FB | 	rdlong	result1, fp
22540     10 4E 85 F1 | 	sub	fp, #16
22544                 | LR__3466
22544     A7 F0 03 F6 | 	mov	ptra, fp
22548     B2 00 A0 FD | 	call	#popregs_
2254c                 | __system___vfsread_ret
2254c     2D 00 64 FD | 	ret
22550                 | 
22550                 | __system____default_filbuf
22550     04 4A 05 F6 | 	mov	COUNT_, #4
22554     A8 00 A0 FD | 	call	#pushregs_
22558     09 1F 02 F6 | 	mov	local01, arg01
2255c     0F 21 02 FB | 	rdlong	local02, local01
22560     0C 20 06 F1 | 	add	local02, #12
22564     10 FB 09 FB | 	rdlong	result1, local02 wz
22568     0C 20 86 F1 | 	sub	local02, #12
2256c     20 00 90 5D |  if_ne	jmp	#LR__3470
22570     14 20 06 F1 | 	add	local02, #20
22574     10 FB 01 F6 | 	mov	result1, local02
22578     04 20 86 F1 | 	sub	local02, #4
2257c     10 FB 61 FC | 	wrlong	result1, local02
22580     04 20 86 F1 | 	sub	local02, #4
22584     02 00 80 FF 
22588     10 01 68 FC | 	wrlong	##1024, local02
2258c     0C 20 86 F1 | 	sub	local02, #12
22590                 | LR__3470
22590     14 1E 06 F1 | 	add	local01, #20
22594     0F 23 02 FB | 	rdlong	local03, local01
22598     11 25 02 F6 | 	mov	local04, local03
2259c     14 1E 86 F1 | 	sub	local01, #20
225a0     13 24 46 F7 | 	zerox	local04, #19
225a4     14 22 46 F0 | 	shr	local03, #20
225a8     02 22 66 F0 | 	shl	local03, #2
225ac     ED 22 02 F1 | 	add	local03, __methods__
225b0     11 23 02 FB | 	rdlong	local03, local03
225b4     10 20 06 F1 | 	add	local02, #16
225b8     10 15 02 FB | 	rdlong	arg02, local02
225bc     04 20 86 F1 | 	sub	local02, #4
225c0     10 17 02 FB | 	rdlong	arg03, local02
225c4     0C 20 86 F1 | 	sub	local02, #12
225c8     0F 13 02 F6 | 	mov	arg01, local01
225cc     F2 1E 02 F6 | 	mov	local01, objptr
225d0     12 E5 01 F6 | 	mov	objptr, local04
225d4     2D 22 62 FD | 	call	local03
225d8     0F E5 01 F6 | 	mov	objptr, local01
225dc     FD 24 02 F6 | 	mov	local04, result1
225e0     00 24 56 F2 | 	cmps	local04, #0 wc
225e4     01 FA 65 C6 |  if_b	neg	result1, #1
225e8     28 00 90 CD |  if_b	jmp	#LR__3471
225ec     10 25 62 FC | 	wrlong	local04, local02
225f0     10 20 06 F1 | 	add	local02, #16
225f4     10 23 02 FB | 	rdlong	local03, local02
225f8     0C 20 86 F1 | 	sub	local02, #12
225fc     10 23 62 FC | 	wrlong	local03, local02
22600     04 20 06 F1 | 	add	local02, #4
22604     10 23 02 FB | 	rdlong	local03, local02
22608     01 22 46 F5 | 	or	local03, #1
2260c     10 23 62 FC | 	wrlong	local03, local02
22610     12 FB 01 F6 | 	mov	result1, local04
22614                 | LR__3471
22614     A7 F0 03 F6 | 	mov	ptra, fp
22618     B2 00 A0 FD | 	call	#popregs_
2261c                 | __system____default_filbuf_ret
2261c     2D 00 64 FD | 	ret
22620                 | 
22620                 | __system__getlower_1016
22620     41 12 56 F2 | 	cmps	arg01, #65 wc
22624     10 00 90 CD |  if_b	jmp	#LR__3480
22628     5B 12 56 F2 | 	cmps	arg01, #91 wc
2262c     09 FB 01 C6 |  if_b	mov	result1, arg01
22630     20 FA 05 C1 |  if_b	add	result1, #32
22634     04 00 90 CD |  if_b	jmp	#__system__getlower_1016_ret
22638                 | LR__3480
22638     09 FB 01 F6 | 	mov	result1, arg01
2263c                 | __system__getlower_1016_ret
2263c     2D 00 64 FD | 	ret
22640                 | 
22640                 | __system___pat_match
22640     08 4A 05 F6 | 	mov	COUNT_, #8
22644     A8 00 A0 FD | 	call	#pushregs_
22648     09 1F 02 F6 | 	mov	local01, arg01
2264c                 | LR__3490
2264c     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
22650     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
22654     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
22658     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
2265c     2C 00 90 AD |  if_e	jmp	#LR__3491
22660     0A 13 C2 FA | 	rdbyte	arg01, arg02
22664     B8 FF BF FD | 	call	#__system__getlower_1016
22668     FD 22 02 F6 | 	mov	local03, result1
2266c     0F 13 C2 FA | 	rdbyte	arg01, local01
22670     AC FF BF FD | 	call	#__system__getlower_1016
22674     11 FB 09 F2 | 	cmp	result1, local03 wz
22678     00 FA 05 56 |  if_ne	mov	result1, #0
2267c     FC 00 90 5D |  if_ne	jmp	#LR__3499
22680     01 1E 06 F1 | 	add	local01, #1
22684     01 14 06 F1 | 	add	arg02, #1
22688     C0 FF 9F FD | 	jmp	#LR__3490
2268c                 | LR__3491
2268c     0A 23 C2 FA | 	rdbyte	local03, arg02
22690     2A 22 0E F2 | 	cmp	local03, #42 wz
22694     D4 00 90 5D |  if_ne	jmp	#LR__3498
22698     01 14 06 F1 | 	add	arg02, #1
2269c     0A 21 C2 FA | 	rdbyte	local02, arg02
226a0     01 14 86 F1 | 	sub	arg02, #1
226a4     2E 20 0E F2 | 	cmp	local02, #46 wz
226a8     28 00 90 5D |  if_ne	jmp	#LR__3492
226ac     02 14 06 F1 | 	add	arg02, #2
226b0     0A 21 C2 FA | 	rdbyte	local02, arg02
226b4     02 14 86 F1 | 	sub	arg02, #2
226b8     2A 20 0E F2 | 	cmp	local02, #42 wz
226bc     03 14 06 A1 |  if_e	add	arg02, #3
226c0     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
226c4     03 14 86 A1 |  if_e	sub	arg02, #3
226c8     12 27 0A A6 |  if_e	mov	local05, local04 wz
226cc     01 FA 05 A6 |  if_e	mov	result1, #1
226d0     A8 00 90 AD |  if_e	jmp	#LR__3499
226d4                 | LR__3492
226d4     01 14 06 F1 | 	add	arg02, #1
226d8     00 28 06 F6 | 	mov	local06, #0
226dc     97 1E 48 FB | 	callpa	#(@LR__3495-@LR__3493)>>2,fcache_load_ptr_
226e0                 | LR__3493
226e0     14 2B 02 F6 | 	mov	local07, local06
226e4     0A 2B 02 F1 | 	add	local07, arg02
226e8     15 2B CA FA | 	rdbyte	local07, local07 wz
226ec     14 27 02 56 |  if_ne	mov	local05, local06
226f0     01 26 06 51 |  if_ne	add	local05, #1
226f4     13 29 02 56 |  if_ne	mov	local06, local05
226f8     E4 FF 9F 5D |  if_ne	jmp	#LR__3493
226fc     00 2C 06 F6 | 	mov	local08, #0
22700                 | LR__3494
22700     16 2B 02 F6 | 	mov	local07, local08
22704     0F 2B 02 F1 | 	add	local07, local01
22708     15 2B CA FA | 	rdbyte	local07, local07 wz
2270c     16 27 02 56 |  if_ne	mov	local05, local08
22710     01 26 06 51 |  if_ne	add	local05, #1
22714     13 2D 02 56 |  if_ne	mov	local08, local05
22718     E4 FF 9F 5D |  if_ne	jmp	#LR__3494
2271c                 | LR__3495
2271c     14 2D 52 F2 | 	cmps	local08, local06 wc
22720     00 FA 05 C6 |  if_b	mov	result1, #0
22724     54 00 90 CD |  if_b	jmp	#LR__3499
22728     16 21 02 F6 | 	mov	local02, local08
2272c     14 21 82 F1 | 	sub	local02, local06
22730     10 1F 02 F1 | 	add	local01, local02
22734                 | LR__3496
22734     01 28 56 F2 | 	cmps	local06, #1 wc
22738     30 00 90 CD |  if_b	jmp	#LR__3497
2273c     0F 13 C2 FA | 	rdbyte	arg01, local01
22740     DC FE BF FD | 	call	#__system__getlower_1016
22744     FD 2C 02 F6 | 	mov	local08, result1
22748     0A 13 C2 FA | 	rdbyte	arg01, arg02
2274c     D0 FE BF FD | 	call	#__system__getlower_1016
22750     FD 2C 0A F2 | 	cmp	local08, result1 wz
22754     00 FA 05 56 |  if_ne	mov	result1, #0
22758     20 00 90 5D |  if_ne	jmp	#LR__3499
2275c     01 1E 06 F1 | 	add	local01, #1
22760     01 14 06 F1 | 	add	arg02, #1
22764     01 28 86 F1 | 	sub	local06, #1
22768     C8 FF 9F FD | 	jmp	#LR__3496
2276c                 | LR__3497
2276c                 | LR__3498
2276c     0A 2D CA FA | 	rdbyte	local08, arg02 wz
22770     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
22774     01 FA 05 A6 |  if_e	mov	result1, #1
22778     00 FA 05 56 |  if_ne	mov	result1, #0
2277c                 | LR__3499
2277c     A7 F0 03 F6 | 	mov	ptra, fp
22780     B2 00 A0 FD | 	call	#popregs_
22784                 | __system___pat_match_ret
22784     2D 00 64 FD | 	ret
22788                 | 
22788                 | _fatfs_cc_ff_uni2oem
22788     00 00 06 F6 | 	mov	_var01, #0
2278c     80 12 16 F2 | 	cmp	arg01, #128 wc
22790     09 01 02 C6 |  if_b	mov	_var01, arg01
22794     58 00 90 CD |  if_b	jmp	#LR__3504
22798     80 00 00 FF 
2279c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
227a0     4C 00 90 3D |  if_ae	jmp	#LR__3503
227a4     0A FB 31 F9 | 	getword	result1, arg02, #0
227a8     01 00 00 FF 
227ac     52 FB 0D F2 | 	cmp	result1, ##850 wz
227b0     3C 00 90 5D |  if_ne	jmp	#LR__3503
227b4                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
227b4     00 00 06 F6 | 	mov	_var01, #0
227b8     97 14 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
227bc                 | LR__3500
227bc     00 FB 31 F9 | 	getword	result1, _var01, #0
227c0     80 FA 15 F2 | 	cmp	result1, #128 wc
227c4     1C 00 90 3D |  if_ae	jmp	#LR__3502
227c8     00 FB 31 F9 | 	getword	result1, _var01, #0
227cc     01 FA 65 F0 | 	shl	result1, #1
227d0     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
227d4     FD FA E1 FA | 	rdword	result1, result1
227d8     FD 12 0A F2 | 	cmp	arg01, result1 wz
227dc     01 00 06 51 |  if_ne	add	_var01, #1
227e0     D8 FF 9F 5D |  if_ne	jmp	#LR__3500
227e4                 | LR__3501
227e4                 | LR__3502
227e4     00 01 32 F9 | 	getword	_var01, _var01, #0
227e8     80 00 06 F1 | 	add	_var01, #128
227ec     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
227f0                 | LR__3503
227f0                 | LR__3504
227f0                 | ' 			c = (c + 0x80) & 0xFF;
227f0                 | ' 		}
227f0                 | ' 	}
227f0                 | ' 
227f0                 | ' 	return c;
227f0     00 FB 01 F6 | 	mov	result1, _var01
227f4                 | _fatfs_cc_ff_uni2oem_ret
227f4     2D 00 64 FD | 	ret
227f8                 | 
227f8                 | _fatfs_cc_ff_oem2uni
227f8     00 00 06 F6 | 	mov	_var01, #0
227fc     09 FB 31 F9 | 	getword	result1, arg01, #0
22800     80 FA 15 F2 | 	cmp	result1, #128 wc
22804     09 01 02 C6 |  if_b	mov	_var01, arg01
22808     2C 00 90 CD |  if_b	jmp	#LR__3511
2280c     0A 15 32 F9 | 	getword	arg02, arg02, #0
22810     01 00 00 FF 
22814     52 15 0E F2 | 	cmp	arg02, ##850 wz
22818     1C 00 90 5D |  if_ne	jmp	#LR__3510
2281c     09 FB 31 F9 | 	getword	result1, arg01, #0
22820     00 FB 15 F2 | 	cmp	result1, #256 wc
22824     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
22828     80 12 86 C1 |  if_b	sub	arg01, #128
2282c     01 12 66 C0 |  if_b	shl	arg01, #1
22830     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
22834     09 01 E2 CA |  if_b	rdword	_var01, arg01
22838                 | LR__3510
22838                 | LR__3511
22838                 | ' 		}
22838                 | ' 	}
22838                 | ' 
22838                 | ' 	return c;
22838     00 FB 01 F6 | 	mov	result1, _var01
2283c                 | _fatfs_cc_ff_oem2uni_ret
2283c     2D 00 64 FD | 	ret
22840                 | 
22840                 | _fatfs_cc_ff_wtoupper
22840     09 01 02 F6 | 	mov	_var01, arg01
22844     80 00 00 FF 
22848     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2284c     60 01 90 3D |  if_ae	jmp	#LR__3533
22850     00 03 02 F6 | 	mov	_var02, _var01
22854     01 01 32 F9 | 	getword	_var01, _var02, #0
22858     08 00 00 FF 
2285c     00 00 16 F2 | 	cmp	_var01, ##4096 wc
22860     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
22864     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
22868     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2286c     01 00 00 3F 
22870     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
22874     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
22878     01 00 00 3F 
2287c     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
22880     02 07 02 F6 | 	mov	_var04, _var03
22884                 | ' 		uc = (WORD)uni;
22884                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
22884                 | ' 		for (;;) {
22884                 | LR__3520
22884     03 09 E2 FA | 	rdword	_var05, _var04
22888     04 05 02 F6 | 	mov	_var03, _var05
2288c     0F 04 4E F7 | 	zerox	_var03, #15 wz
22890     02 06 06 F1 | 	add	_var04, #2
22894     14 01 90 AD |  if_e	jmp	#LR__3532
22898     01 05 32 F9 | 	getword	_var03, _var02, #0
2289c     04 01 32 F9 | 	getword	_var01, _var05, #0
228a0     00 05 12 F2 | 	cmp	_var03, _var01 wc
228a4     04 01 90 CD |  if_b	jmp	#LR__3532
228a8     03 0B E2 FA | 	rdword	_var06, _var04
228ac     05 0D 32 F9 | 	getword	_var07, _var06, #0
228b0     08 0C 46 F0 | 	shr	_var07, #8
228b4     05 0B 32 F9 | 	getword	_var06, _var06, #0
228b8     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
228bc     01 05 32 F9 | 	getword	_var03, _var02, #0
228c0     04 0F 32 F9 | 	getword	_var08, _var05, #0
228c4     05 01 32 F9 | 	getword	_var01, _var06, #0
228c8     00 0F 02 F1 | 	add	_var08, _var01
228cc     07 05 52 F2 | 	cmps	_var03, _var08 wc
228d0     02 06 06 F1 | 	add	_var04, #2
228d4     C4 00 90 3D |  if_ae	jmp	#LR__3531
228d8                 | ' 				switch (cmd) {
228d8     06 11 32 F9 | 	getword	_var09, _var07, #0
228dc     09 10 26 F3 | 	fle	_var09, #9
228e0     30 10 62 FD | 	jmprel	_var09
228e4                 | LR__3521
228e4     24 00 90 FD | 	jmp	#LR__3522
228e8     3C 00 90 FD | 	jmp	#LR__3523
228ec     54 00 90 FD | 	jmp	#LR__3524
228f0     5C 00 90 FD | 	jmp	#LR__3525
228f4     64 00 90 FD | 	jmp	#LR__3526
228f8     6C 00 90 FD | 	jmp	#LR__3527
228fc     74 00 90 FD | 	jmp	#LR__3528
22900     7C 00 90 FD | 	jmp	#LR__3529
22904     84 00 90 FD | 	jmp	#LR__3530
22908     A0 00 90 FD | 	jmp	#LR__3532
2290c                 | LR__3522
2290c     01 03 32 F9 | 	getword	_var02, _var02, #0
22910     04 09 32 F9 | 	getword	_var05, _var05, #0
22914     04 03 82 F1 | 	sub	_var02, _var05
22918     01 02 66 F0 | 	shl	_var02, #1
2291c     03 03 02 F1 | 	add	_var02, _var04
22920     01 03 E2 FA | 	rdword	_var02, _var02
22924     84 00 90 FD | 	jmp	#LR__3532
22928                 | LR__3523
22928     01 05 32 F9 | 	getword	_var03, _var02, #0
2292c     01 03 32 F9 | 	getword	_var02, _var02, #0
22930     04 09 32 F9 | 	getword	_var05, _var05, #0
22934     04 03 82 F1 | 	sub	_var02, _var05
22938     01 02 06 F5 | 	and	_var02, #1
2293c     02 03 C2 F2 | 	subr	_var02, _var03
22940     68 00 90 FD | 	jmp	#LR__3532
22944                 | LR__3524
22944     01 03 32 F9 | 	getword	_var02, _var02, #0
22948     10 02 86 F1 | 	sub	_var02, #16
2294c     5C 00 90 FD | 	jmp	#LR__3532
22950                 | LR__3525
22950     01 03 32 F9 | 	getword	_var02, _var02, #0
22954     20 02 86 F1 | 	sub	_var02, #32
22958     50 00 90 FD | 	jmp	#LR__3532
2295c                 | LR__3526
2295c     01 03 32 F9 | 	getword	_var02, _var02, #0
22960     30 02 86 F1 | 	sub	_var02, #48
22964     44 00 90 FD | 	jmp	#LR__3532
22968                 | LR__3527
22968     01 03 32 F9 | 	getword	_var02, _var02, #0
2296c     1A 02 86 F1 | 	sub	_var02, #26
22970     38 00 90 FD | 	jmp	#LR__3532
22974                 | LR__3528
22974     01 03 32 F9 | 	getword	_var02, _var02, #0
22978     08 02 06 F1 | 	add	_var02, #8
2297c     2C 00 90 FD | 	jmp	#LR__3532
22980                 | LR__3529
22980     01 03 32 F9 | 	getword	_var02, _var02, #0
22984     50 02 86 F1 | 	sub	_var02, #80
22988     20 00 90 FD | 	jmp	#LR__3532
2298c                 | LR__3530
2298c     01 03 32 F9 | 	getword	_var02, _var02, #0
22990     0E 00 00 FF 
22994     60 02 86 F1 | 	sub	_var02, ##7264
22998                 | ' 				}
22998                 | ' 				break;
22998     10 00 90 FD | 	jmp	#LR__3532
2299c                 | LR__3531
2299c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
229a0     02 0A 06 AA |  if_e	mul	_var06, #2
229a4     05 07 02 A1 |  if_e	add	_var04, _var06
229a8     D8 FE 9F FD | 	jmp	#LR__3520
229ac                 | LR__3532
229ac     01 01 32 F9 | 	getword	_var01, _var02, #0
229b0                 | LR__3533
229b0                 | ' 		}
229b0                 | ' 		uni = uc;
229b0                 | ' 	}
229b0                 | ' 
229b0                 | ' 	return uni;
229b0     00 FB 01 F6 | 	mov	result1, _var01
229b4                 | _fatfs_cc_ff_wtoupper_ret
229b4     2D 00 64 FD | 	ret
229b8                 | 
229b8                 | _fatfs_cc_strncpy
229b8     09 01 02 F6 | 	mov	_var01, arg01
229bc     97 12 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
229c0                 | ' 
229c0                 | ' 	dscan = dst;
229c0                 | ' 	sscan = src;
229c0                 | ' 	count = n;
229c0                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
229c0                 | LR__3540
229c0     01 16 86 F1 | 	sub	arg03, #1
229c4     00 16 56 F2 | 	cmps	arg03, #0 wc
229c8     18 00 90 CD |  if_b	jmp	#LR__3542
229cc     0A FB C1 FA | 	rdbyte	result1, arg02
229d0     00 FB 41 FC | 	wrbyte	result1, _var01
229d4     01 14 06 F1 | 	add	arg02, #1
229d8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
229dc                 | ' 		continue;
229dc     01 00 06 F1 | 	add	_var01, #1
229e0     DC FF 9F 5D |  if_ne	jmp	#LR__3540
229e4                 | LR__3541
229e4                 | LR__3542
229e4     97 0C 48 FB | 	callpa	#(@LR__3544-@LR__3543)>>2,fcache_load_ptr_
229e8                 | ' 	while (--count >= 0)
229e8                 | LR__3543
229e8     01 16 86 F1 | 	sub	arg03, #1
229ec     00 16 56 F2 | 	cmps	arg03, #0 wc
229f0     00 03 02 36 |  if_ae	mov	_var02, _var01
229f4     01 00 06 31 |  if_ae	add	_var01, #1
229f8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
229fc     E8 FF 9F 3D |  if_ae	jmp	#LR__3543
22a00                 | LR__3544
22a00                 | ' 		*dscan++ = '\0';
22a00                 | ' 	return(dst);
22a00     09 FB 01 F6 | 	mov	result1, arg01
22a04                 | _fatfs_cc_strncpy_ret
22a04     2D 00 64 FD | 	ret
22a08                 | 
22a08                 | _fatfs_cc_memcmp
22a08                 | ' 	for (n = size; n > 0; n--)
22a08     00 16 0E F2 | 	cmp	arg03, #0 wz
22a0c     28 00 90 AD |  if_e	jmp	#LR__3551
22a10                 | LR__3550
22a10     09 01 C2 FA | 	rdbyte	_var01, arg01
22a14     0A 03 C2 FA | 	rdbyte	_var02, arg02
22a18     01 01 0A F2 | 	cmp	_var01, _var02 wz
22a1c     01 12 06 A1 |  if_e	add	arg01, #1
22a20     01 14 06 A1 |  if_e	add	arg02, #1
22a24                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
22a24     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
22a28     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
22a2c     01 FB 81 51 |  if_ne	sub	result1, _var02
22a30     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
22a34     F6 17 6E FB | 	djnz	arg03, #LR__3550
22a38                 | LR__3551
22a38                 | ' 
22a38                 | ' 	return(0);
22a38     00 FA 05 F6 | 	mov	result1, #0
22a3c                 | _fatfs_cc_memcmp_ret
22a3c     2D 00 64 FD | 	ret
22a40                 | 
22a40                 | _fatfs_cc_strncmp
22a40     09 01 0A F6 | 	mov	_var01, arg01 wz
22a44     14 00 90 5D |  if_ne	jmp	#LR__3560
22a48                 | ' 		return scan2 ? -1 : 0;
22a48     00 14 0E F2 | 	cmp	arg02, #0 wz
22a4c     01 02 66 56 |  if_ne	neg	_var02, #1
22a50     00 02 06 A6 |  if_e	mov	_var02, #0
22a54     01 FB 01 F6 | 	mov	result1, _var02
22a58     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
22a5c                 | LR__3560
22a5c     00 14 0E F2 | 	cmp	arg02, #0 wz
22a60     01 FA 05 A6 |  if_e	mov	result1, #1
22a64     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22a68     0B 05 02 F6 | 	mov	_var03, arg03
22a6c     97 16 48 FB | 	callpa	#(@LR__3562-@LR__3561)>>2,fcache_load_ptr_
22a70                 | ' 	count = n;
22a70                 | ' 	do {
22a70                 | LR__3561
22a70     00 07 C2 FA | 	rdbyte	_var04, _var01
22a74     0A 09 02 F6 | 	mov	_var05, arg02
22a78     04 0B C2 FA | 	rdbyte	_var06, _var05
22a7c     01 04 86 F1 | 	sub	_var03, #1
22a80     00 04 56 F2 | 	cmps	_var03, #0 wc
22a84     01 00 06 F1 | 	add	_var01, #1
22a88     01 14 06 F1 | 	add	arg02, #1
22a8c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
22a90     08 00 90 2D |  if_nc_and_z	jmp	#LR__3563
22a94     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
22a98     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3561
22a9c                 | LR__3562
22a9c                 | LR__3563
22a9c     00 04 56 F2 | 	cmps	_var03, #0 wc
22aa0                 | ' 		return(0);
22aa0     00 FA 05 C6 |  if_b	mov	result1, #0
22aa4     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
22aa8     05 07 0A F2 | 	cmp	_var04, _var06 wz
22aac                 | ' 		return(0);
22aac     00 FA 05 A6 |  if_e	mov	result1, #0
22ab0     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22ab4     00 06 0E F2 | 	cmp	_var04, #0 wz
22ab8                 | ' 		return(-1);
22ab8     01 FA 65 A6 |  if_e	neg	result1, #1
22abc     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22ac0     00 0A 0E F2 | 	cmp	_var06, #0 wz
22ac4                 | ' 		return(1);
22ac4     01 FA 05 A6 |  if_e	mov	result1, #1
22ac8                 | ' 		return(c1 - c2);
22ac8     03 FB 01 56 |  if_ne	mov	result1, _var04
22acc     05 FB 81 51 |  if_ne	sub	result1, _var06
22ad0                 | _fatfs_cc_strncmp_ret
22ad0     2D 00 64 FD | 	ret
22ad4                 | 
22ad4                 | _fatfs_cc_strchr
22ad4                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
22ad4                 | ' 	while ((c = *s++) != (char) charwanted)
22ad4                 | LR__3570
22ad4     09 01 02 F6 | 	mov	_var01, arg01
22ad8     00 03 C2 FA | 	rdbyte	_var02, _var01
22adc     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
22ae0     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
22ae4     03 05 0A F2 | 	cmp	_var03, _var04 wz
22ae8     01 12 06 F1 | 	add	arg01, #1
22aec     14 00 90 AD |  if_e	jmp	#LR__3571
22af0     01 05 02 F6 | 	mov	_var03, _var02
22af4     07 04 4E F7 | 	zerox	_var03, #7 wz
22af8     00 FA 05 A6 |  if_e	mov	result1, #0
22afc     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
22b00     D0 FF 9F FD | 	jmp	#LR__3570
22b04                 | LR__3571
22b04                 | ' 	return((char *)--s);
22b04     01 12 86 F1 | 	sub	arg01, #1
22b08     09 FB 01 F6 | 	mov	result1, arg01
22b0c                 | _fatfs_cc_strchr_ret
22b0c     2D 00 64 FD | 	ret
22b10                 | 
22b10                 | _fatfs_cc_disk_initialize
22b10     04 4A 05 F6 | 	mov	COUNT_, #4
22b14     A8 00 A0 FD | 	call	#pushregs_
22b18     40 F0 07 F1 | 	add	ptra, #64
22b1c     04 4E 05 F1 | 	add	fp, #4
22b20     A7 12 42 FC | 	wrbyte	arg01, fp
22b24     01 00 00 FF 
22b28     14 E4 05 F1 | 	add	objptr, ##532
22b2c     F2 18 02 FB | 	rdlong	arg04, objptr
22b30     2C 4E 05 F1 | 	add	fp, #44
22b34     A7 18 62 FC | 	wrlong	arg04, fp
22b38     04 E4 85 F1 | 	sub	objptr, #4
22b3c     F2 18 02 FB | 	rdlong	arg04, objptr
22b40     04 4E 05 F1 | 	add	fp, #4
22b44     A7 18 62 FC | 	wrlong	arg04, fp
22b48     08 E4 05 F1 | 	add	objptr, #8
22b4c     F2 18 02 FB | 	rdlong	arg04, objptr
22b50     04 4E 05 F1 | 	add	fp, #4
22b54     A7 18 62 FC | 	wrlong	arg04, fp
22b58     04 E4 05 F1 | 	add	objptr, #4
22b5c     F2 18 02 FB | 	rdlong	arg04, objptr
22b60     04 4E 05 F1 | 	add	fp, #4
22b64     A7 18 62 FC | 	wrlong	arg04, fp
22b68     04 E4 05 F1 | 	add	objptr, #4
22b6c     F2 02 48 FC | 	wrbyte	#1, objptr
22b70     01 00 00 FF 
22b74     20 E4 85 F1 | 	sub	objptr, ##544
22b78     38 4E 85 F1 | 	sub	fp, #56
22b7c     A7 18 CA FA | 	rdbyte	arg04, fp wz
22b80     04 4E 85 F1 | 	sub	fp, #4
22b84                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
22b84                 | '             return RES_NOTRDY;
22b84     03 FA 05 56 |  if_ne	mov	result1, #3
22b88     D8 05 90 5D |  if_ne	jmp	#LR__3598
22b8c     13 00 00 FF 
22b90     10 13 06 F6 | 	mov	arg01, ##10000
22b94     A4 9A BF FD | 	call	#__system___waitus
22b98     30 4E 05 F1 | 	add	fp, #48
22b9c     A7 12 02 FB | 	rdlong	arg01, fp
22ba0     09 01 08 FC | 	wrpin	#0, arg01
22ba4     04 4E 05 F1 | 	add	fp, #4
22ba8     A7 12 02 FB | 	rdlong	arg01, fp
22bac     09 01 08 FC | 	wrpin	#0, arg01
22bb0     04 4E 05 F1 | 	add	fp, #4
22bb4     A7 12 02 FB | 	rdlong	arg01, fp
22bb8     09 01 08 FC | 	wrpin	#0, arg01
22bbc     04 4E 05 F1 | 	add	fp, #4
22bc0     A7 12 02 FB | 	rdlong	arg01, fp
22bc4     09 00 80 FF 
22bc8     09 01 08 FC | 	wrpin	##4608, arg01
22bcc     0C 4E 85 F1 | 	sub	fp, #12
22bd0     A7 12 02 FB | 	rdlong	arg01, fp
22bd4     59 12 62 FD | 	drvh	arg01
22bd8     04 4E 05 F1 | 	add	fp, #4
22bdc     A7 12 02 FB | 	rdlong	arg01, fp
22be0     59 12 62 FD | 	drvh	arg01
22be4     04 4E 05 F1 | 	add	fp, #4
22be8     A7 12 02 FB | 	rdlong	arg01, fp
22bec     59 12 62 FD | 	drvh	arg01
22bf0     04 4E 05 F1 | 	add	fp, #4
22bf4     A7 12 02 FB | 	rdlong	arg01, fp
22bf8     59 12 62 FD | 	drvh	arg01
22bfc     20 4E 85 F1 | 	sub	fp, #32
22c00     00 04 80 FF 
22c04     A7 20 68 FC | 	wrlong	##524304, fp
22c08     04 4E 05 F1 | 	add	fp, #4
22c0c     20 03 80 FF 
22c10     A7 90 68 FC | 	wrlong	##409672, fp
22c14     14 4E 05 F1 | 	add	fp, #20
22c18     A7 1E 02 FB | 	rdlong	local01, fp
22c1c     18 4E 85 F1 | 	sub	fp, #24
22c20     A7 16 02 FB | 	rdlong	arg03, fp
22c24     40 1E 62 FD | 	dirl	local01
22c28     A0 03 80 FF 
22c2c     0F 91 08 FC | 	wrpin	##475208, local01
22c30     0F 17 12 FC | 	wxpin	arg03, local01
22c34     0F 01 28 FC | 	wypin	#0, local01
22c38     41 1E 62 FD | 	dirh	local01
22c3c     1C 4E 05 F1 | 	add	fp, #28
22c40     A7 20 02 FB | 	rdlong	local02, fp
22c44     10 1F 82 F1 | 	sub	local01, local02
22c48     07 1E 06 F5 | 	and	local01, #7
22c4c     18 1E 66 F0 | 	shl	local01, #24
22c50     78 14 06 F6 | 	mov	arg02, #120
22c54     0F 15 42 F5 | 	or	arg02, local01
22c58     14 4E 85 F1 | 	sub	fp, #20
22c5c     A7 14 62 FC | 	wrlong	arg02, fp
22c60     14 4E 05 F1 | 	add	fp, #20
22c64     A7 12 02 FB | 	rdlong	arg01, fp
22c68     10 14 26 F4 | 	bith	arg02, #16
22c6c     40 12 62 FD | 	dirl	arg01
22c70     09 15 02 FC | 	wrpin	arg02, arg01
22c74     09 3F 18 FC | 	wxpin	#31, arg01
22c78     FF FF FF FF 
22c7c     09 FF 2B FC | 	wypin	##-1, arg01
22c80     41 12 62 FD | 	dirh	arg01
22c84     04 4E 85 F1 | 	sub	fp, #4
22c88     A7 14 02 FB | 	rdlong	arg02, fp
22c8c     08 4E 05 F1 | 	add	fp, #8
22c90     A7 22 02 FB | 	rdlong	local03, fp
22c94     11 15 82 F1 | 	sub	arg02, local03
22c98     07 14 06 F5 | 	and	arg02, #7
22c9c     18 14 66 F0 | 	shl	arg02, #24
22ca0     14 4E 85 F1 | 	sub	fp, #20
22ca4     A7 14 62 FC | 	wrlong	arg02, fp
22ca8     29 00 00 FF 
22cac     7A 14 46 F5 | 	or	arg02, ##21114
22cb0     A7 14 62 FC | 	wrlong	arg02, fp
22cb4     14 4E 05 F1 | 	add	fp, #20
22cb8     A7 12 02 FB | 	rdlong	arg01, fp
22cbc     40 12 62 FD | 	dirl	arg01
22cc0     09 15 02 FC | 	wrpin	arg02, arg01
22cc4     09 4F 18 FC | 	wxpin	#39, arg01
22cc8     09 01 28 FC | 	wypin	#0, arg01
22ccc     41 12 62 FD | 	dirh	arg01
22cd0     28 4E 85 F1 | 	sub	fp, #40
22cd4     A7 12 02 F6 | 	mov	arg01, fp
22cd8     14 4E 85 F1 | 	sub	fp, #20
22cdc     0A 14 06 F6 | 	mov	arg02, #10
22ce0     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22ce4     00 12 06 F6 | 	mov	arg01, #0
22ce8     00 14 06 F6 | 	mov	arg02, #0
22cec     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22cf0     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1060
22cf4     64 12 06 F6 | 	mov	arg01, #100
22cf8     40 99 BF FD | 	call	#__system___waitus
22cfc     14 4E 05 F1 | 	add	fp, #20
22d00     A7 12 02 F6 | 	mov	arg01, fp
22d04     14 4E 85 F1 | 	sub	fp, #20
22d08     0A 14 06 F6 | 	mov	arg02, #10
22d0c     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22d10     0C 4E 05 F1 | 	add	fp, #12
22d14     A7 00 48 FC | 	wrbyte	#0, fp
22d18     0C 4E 85 F1 | 	sub	fp, #12
22d1c     00 12 06 F6 | 	mov	arg01, #0
22d20     00 14 06 F6 | 	mov	arg02, #0
22d24     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22d28     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
22d2c     01 18 0E F2 | 	cmp	arg04, #1 wz
22d30     B8 03 90 5D |  if_ne	jmp	#LR__3597
22d34     08 12 06 F6 | 	mov	arg01, #8
22d38     AA 15 06 F6 | 	mov	arg02, #426
22d3c     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22d40     FD FA E1 F8 | 	getbyte	result1, result1, #0
22d44     01 FA 0D F2 | 	cmp	result1, #1 wz
22d48     98 01 90 5D |  if_ne	jmp	#LR__3583
22d4c     14 4E 05 F1 | 	add	fp, #20
22d50     A7 12 02 F6 | 	mov	arg01, fp
22d54     14 4E 85 F1 | 	sub	fp, #20
22d58     04 14 06 F6 | 	mov	arg02, #4
22d5c     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22d60     16 4E 05 F1 | 	add	fp, #22
22d64     A7 24 C2 FA | 	rdbyte	local04, fp
22d68     16 4E 85 F1 | 	sub	fp, #22
22d6c     01 24 0E F2 | 	cmp	local04, #1 wz
22d70     17 4E 05 A1 |  if_e	add	fp, #23
22d74     A7 22 C2 AA |  if_e	rdbyte	local03, fp
22d78     17 4E 85 A1 |  if_e	sub	fp, #23
22d7c     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
22d80     68 03 90 5D |  if_ne	jmp	#LR__3596
22d84                 | ' 				for (tmr = 1000; tmr; tmr--) {
22d84     18 4E 05 F1 | 	add	fp, #24
22d88     01 00 80 FF 
22d8c     A7 D0 6B FC | 	wrlong	##1000, fp
22d90     18 4E 85 F1 | 	sub	fp, #24
22d94                 | LR__3580
22d94     18 4E 05 F1 | 	add	fp, #24
22d98     A7 1E 0A FB | 	rdlong	local01, fp wz
22d9c     18 4E 85 F1 | 	sub	fp, #24
22da0     3C 00 90 AD |  if_e	jmp	#LR__3581
22da4     A9 12 06 F6 | 	mov	arg01, #169
22da8     1E 14 C6 F9 | 	decod	arg02, #30
22dac     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22db0     FD 24 02 F6 | 	mov	local04, result1
22db4     07 24 4E F7 | 	zerox	local04, #7 wz
22db8     24 00 90 AD |  if_e	jmp	#LR__3581
22dbc     01 00 00 FF 
22dc0     E8 13 06 F6 | 	mov	arg01, ##1000
22dc4     74 98 BF FD | 	call	#__system___waitus
22dc8     18 4E 05 F1 | 	add	fp, #24
22dcc     A7 24 02 FB | 	rdlong	local04, fp
22dd0     01 24 86 F1 | 	sub	local04, #1
22dd4     A7 24 62 FC | 	wrlong	local04, fp
22dd8     18 4E 85 F1 | 	sub	fp, #24
22ddc     B4 FF 9F FD | 	jmp	#LR__3580
22de0                 | LR__3581
22de0     18 4E 05 F1 | 	add	fp, #24
22de4     A7 24 0A FB | 	rdlong	local04, fp wz
22de8     18 4E 85 F1 | 	sub	fp, #24
22dec     4C 00 90 AD |  if_e	jmp	#LR__3582
22df0     3A 12 06 F6 | 	mov	arg01, #58
22df4     00 14 06 F6 | 	mov	arg02, #0
22df8     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22dfc     FD 22 02 F6 | 	mov	local03, result1
22e00     07 22 4E F7 | 	zerox	local03, #7 wz
22e04     34 00 90 5D |  if_ne	jmp	#LR__3582
22e08     14 4E 05 F1 | 	add	fp, #20
22e0c     A7 12 02 F6 | 	mov	arg01, fp
22e10     14 4E 85 F1 | 	sub	fp, #20
22e14     04 14 06 F6 | 	mov	arg02, #4
22e18     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1050
22e1c     14 4E 05 F1 | 	add	fp, #20
22e20     A7 1E C2 FA | 	rdbyte	local01, fp
22e24     40 1E CE F7 | 	test	local01, #64 wz
22e28     0C 24 06 56 |  if_ne	mov	local04, #12
22e2c     04 24 06 A6 |  if_e	mov	local04, #4
22e30     08 4E 85 F1 | 	sub	fp, #8
22e34     A7 24 42 FC | 	wrbyte	local04, fp
22e38     0C 4E 85 F1 | 	sub	fp, #12
22e3c                 | LR__3582
22e3c     14 24 06 FB | 	rdlong	local04, #20
22e40     18 4E 05 F1 | 	add	fp, #24
22e44     A7 24 62 FC | 	wrlong	local04, fp
22e48     0C 4E 05 F1 | 	add	fp, #12
22e4c     A7 24 02 FB | 	rdlong	local04, fp
22e50     1B 24 26 F4 | 	bith	local04, #27
22e54     A7 24 62 FC | 	wrlong	local04, fp
22e58     0C 4E 85 F1 | 	sub	fp, #12
22e5c     A7 24 02 FB | 	rdlong	local04, fp
22e60     18 4E 85 F1 | 	sub	fp, #24
22e64     68 78 04 FF 
22e68     81 25 16 F2 | 	cmp	local04, ##150000001 wc
22e6c     1C 4E 05 C1 |  if_b	add	fp, #28
22e70     00 01 80 CF 
22e74     A7 08 68 CC |  if_b	wrlong	##131076, fp
22e78     1C 4E 85 C1 |  if_b	sub	fp, #28
22e7c     6C 02 90 CD |  if_b	jmp	#LR__3596
22e80     18 4E 05 F1 | 	add	fp, #24
22e84     A7 24 02 FB | 	rdlong	local04, fp
22e88     18 4E 85 F1 | 	sub	fp, #24
22e8c     E1 F5 05 FF 
22e90     01 24 16 F2 | 	cmp	local04, ##200000001 wc
22e94     1C 4E 05 C1 |  if_b	add	fp, #28
22e98     00 01 80 CF 
22e9c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
22ea0     1C 4E 85 C1 |  if_b	sub	fp, #28
22ea4     44 02 90 CD |  if_b	jmp	#LR__3596
22ea8     18 4E 05 F1 | 	add	fp, #24
22eac     A7 24 02 FB | 	rdlong	local04, fp
22eb0     18 4E 85 F1 | 	sub	fp, #24
22eb4     3B 58 08 FF 
22eb8     01 24 16 F2 | 	cmp	local04, ##280000001 wc
22ebc     1C 4E 05 C1 |  if_b	add	fp, #28
22ec0     00 01 80 CF 
22ec4     A7 0C 68 CC |  if_b	wrlong	##131078, fp
22ec8     1C 4E 85 C1 |  if_b	sub	fp, #28
22ecc     1C 02 90 CD |  if_b	jmp	#LR__3596
22ed0     1C 4E 05 F1 | 	add	fp, #28
22ed4     80 01 80 FF 
22ed8     A7 10 68 FC | 	wrlong	##196616, fp
22edc     1C 4E 85 F1 | 	sub	fp, #28
22ee0     08 02 90 FD | 	jmp	#LR__3596
22ee4                 | LR__3583
22ee4     A9 12 06 F6 | 	mov	arg01, #169
22ee8     00 14 06 F6 | 	mov	arg02, #0
22eec     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22ef0     FD 24 E2 F8 | 	getbyte	local04, result1, #0
22ef4     02 24 16 F2 | 	cmp	local04, #2 wc
22ef8     18 00 90 3D |  if_ae	jmp	#LR__3584
22efc     0C 4E 05 F1 | 	add	fp, #12
22f00     A7 04 48 FC | 	wrbyte	#2, fp
22f04     04 4E 05 F1 | 	add	fp, #4
22f08     A7 52 49 FC | 	wrbyte	#169, fp
22f0c     10 4E 85 F1 | 	sub	fp, #16
22f10     14 00 90 FD | 	jmp	#LR__3585
22f14                 | LR__3584
22f14     0C 4E 05 F1 | 	add	fp, #12
22f18     A7 02 48 FC | 	wrbyte	#1, fp
22f1c     04 4E 05 F1 | 	add	fp, #4
22f20     A7 02 48 FC | 	wrbyte	#1, fp
22f24     10 4E 85 F1 | 	sub	fp, #16
22f28                 | LR__3585
22f28                 | ' 				ty =  0x01 ; cmd =  (1) ;
22f28                 | ' 			}
22f28                 | ' 			for (tmr = 1000; tmr; tmr--) {
22f28     18 4E 05 F1 | 	add	fp, #24
22f2c     01 00 80 FF 
22f30     A7 D0 6B FC | 	wrlong	##1000, fp
22f34     18 4E 85 F1 | 	sub	fp, #24
22f38                 | LR__3586
22f38     18 4E 05 F1 | 	add	fp, #24
22f3c     A7 22 0A FB | 	rdlong	local03, fp wz
22f40     18 4E 85 F1 | 	sub	fp, #24
22f44     44 00 90 AD |  if_e	jmp	#LR__3587
22f48     10 4E 05 F1 | 	add	fp, #16
22f4c     A7 12 C2 FA | 	rdbyte	arg01, fp
22f50     10 4E 85 F1 | 	sub	fp, #16
22f54     00 14 06 F6 | 	mov	arg02, #0
22f58     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22f5c     FD 24 02 F6 | 	mov	local04, result1
22f60     07 24 4E F7 | 	zerox	local04, #7 wz
22f64     24 00 90 AD |  if_e	jmp	#LR__3587
22f68     01 00 00 FF 
22f6c     E8 13 06 F6 | 	mov	arg01, ##1000
22f70     C8 96 BF FD | 	call	#__system___waitus
22f74     18 4E 05 F1 | 	add	fp, #24
22f78     A7 24 02 FB | 	rdlong	local04, fp
22f7c     01 24 86 F1 | 	sub	local04, #1
22f80     A7 24 62 FC | 	wrlong	local04, fp
22f84     18 4E 85 F1 | 	sub	fp, #24
22f88     AC FF 9F FD | 	jmp	#LR__3586
22f8c                 | LR__3587
22f8c     18 4E 05 F1 | 	add	fp, #24
22f90     A7 24 0A FB | 	rdlong	local04, fp wz
22f94     18 4E 85 F1 | 	sub	fp, #24
22f98     14 00 90 AD |  if_e	jmp	#LR__3588
22f9c     10 12 06 F6 | 	mov	arg01, #16
22fa0     09 14 C6 F9 | 	decod	arg02, #9
22fa4     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1074
22fa8     07 FA 4D F7 | 	zerox	result1, #7 wz
22fac     0C 00 90 AD |  if_e	jmp	#LR__3589
22fb0                 | LR__3588
22fb0     0C 4E 05 F1 | 	add	fp, #12
22fb4     A7 00 48 FC | 	wrbyte	#0, fp
22fb8     0C 4E 85 F1 | 	sub	fp, #12
22fbc                 | LR__3589
22fbc     14 24 06 FB | 	rdlong	local04, #20
22fc0     18 4E 05 F1 | 	add	fp, #24
22fc4     A7 24 62 FC | 	wrlong	local04, fp
22fc8     18 4E 85 F1 | 	sub	fp, #24
22fcc     F0 FA 02 FF 
22fd0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
22fd4     18 00 90 3D |  if_ae	jmp	#LR__3590
22fd8     24 4E 05 F1 | 	add	fp, #36
22fdc     A7 24 02 FB | 	rdlong	local04, fp
22fe0     1B 24 26 F4 | 	bith	local04, #27
22fe4     A7 24 62 FC | 	wrlong	local04, fp
22fe8     24 4E 85 F1 | 	sub	fp, #36
22fec     2C 00 90 FD | 	jmp	#LR__3591
22ff0                 | LR__3590
22ff0     18 4E 05 F1 | 	add	fp, #24
22ff4     A7 24 02 FB | 	rdlong	local04, fp
22ff8     18 4E 85 F1 | 	sub	fp, #24
22ffc     E1 F5 05 FF 
23000     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23004     24 4E 05 C1 |  if_b	add	fp, #36
23008     A7 24 02 CB |  if_b	rdlong	local04, fp
2300c     80 00 04 CF 
23010     00 24 46 C5 |  if_b	or	local04, ##134283264
23014     A7 24 62 CC |  if_b	wrlong	local04, fp
23018     24 4E 85 C1 |  if_b	sub	fp, #36
2301c                 | LR__3591
2301c     18 4E 05 F1 | 	add	fp, #24
23020     A7 24 02 FB | 	rdlong	local04, fp
23024     18 4E 85 F1 | 	sub	fp, #24
23028     F0 FA 02 FF 
2302c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
23030     1C 4E 05 C1 |  if_b	add	fp, #28
23034     00 01 80 CF 
23038     A7 08 68 CC |  if_b	wrlong	##131076, fp
2303c     1C 4E 85 C1 |  if_b	sub	fp, #28
23040     A8 00 90 CD |  if_b	jmp	#LR__3595
23044     18 4E 05 F1 | 	add	fp, #24
23048     A7 24 02 FB | 	rdlong	local04, fp
2304c     18 4E 85 F1 | 	sub	fp, #24
23050     68 78 04 FF 
23054     81 25 16 F2 | 	cmp	local04, ##150000001 wc
23058     1C 4E 05 C1 |  if_b	add	fp, #28
2305c     80 01 80 CF 
23060     A7 0C 68 CC |  if_b	wrlong	##196614, fp
23064     1C 4E 85 C1 |  if_b	sub	fp, #28
23068     80 00 90 CD |  if_b	jmp	#LR__3594
2306c     18 4E 05 F1 | 	add	fp, #24
23070     A7 24 02 FB | 	rdlong	local04, fp
23074     18 4E 85 F1 | 	sub	fp, #24
23078     E1 F5 05 FF 
2307c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
23080     1C 4E 05 C1 |  if_b	add	fp, #28
23084     00 02 80 CF 
23088     A7 10 68 CC |  if_b	wrlong	##262152, fp
2308c     1C 4E 85 C1 |  if_b	sub	fp, #28
23090     58 00 90 CD |  if_b	jmp	#LR__3593
23094     18 4E 05 F1 | 	add	fp, #24
23098     A7 24 02 FB | 	rdlong	local04, fp
2309c     18 4E 85 F1 | 	sub	fp, #24
230a0     59 73 07 FF 
230a4     81 24 16 F2 | 	cmp	local04, ##250000001 wc
230a8     1C 4E 05 C1 |  if_b	add	fp, #28
230ac     80 02 80 CF 
230b0     A7 14 68 CC |  if_b	wrlong	##327690, fp
230b4     1C 4E 85 C1 |  if_b	sub	fp, #28
230b8     30 00 90 CD |  if_b	jmp	#LR__3592
230bc     18 4E 05 F1 | 	add	fp, #24
230c0     A7 24 02 FB | 	rdlong	local04, fp
230c4     18 4E 85 F1 | 	sub	fp, #24
230c8     D1 F0 08 FF 
230cc     01 25 16 F2 | 	cmp	local04, ##300000001 wc
230d0     1C 4E 05 C1 |  if_b	add	fp, #28
230d4     00 03 80 CF 
230d8     A7 18 68 CC |  if_b	wrlong	##393228, fp
230dc     1C 4E 85 F3 | 	sumc	fp, #28
230e0     80 03 80 3F 
230e4     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
230e8     1C 4E 85 31 |  if_ae	sub	fp, #28
230ec                 | LR__3592
230ec                 | LR__3593
230ec                 | LR__3594
230ec                 | LR__3595
230ec                 | LR__3596
230ec                 | LR__3597
230ec     0C 4E 05 F1 | 	add	fp, #12
230f0     A7 24 C2 FA | 	rdbyte	local04, fp
230f4     01 00 00 FF 
230f8     21 E4 05 F1 | 	add	objptr, ##545
230fc     F2 24 42 FC | 	wrbyte	local04, objptr
23100     A7 1E CA FA | 	rdbyte	local01, fp wz
23104     00 24 06 56 |  if_ne	mov	local04, #0
23108     01 24 06 A6 |  if_e	mov	local04, #1
2310c     20 4E 05 F1 | 	add	fp, #32
23110     A7 24 42 FC | 	wrbyte	local04, fp
23114     A7 24 C2 FA | 	rdbyte	local04, fp
23118     2C 4E 85 F1 | 	sub	fp, #44
2311c     01 E4 85 F1 | 	sub	objptr, #1
23120     F2 24 42 FC | 	wrbyte	local04, objptr
23124     01 00 00 FF 
23128     20 E4 85 F1 | 	sub	objptr, ##544
2312c     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1060
23130     34 4E 05 F1 | 	add	fp, #52
23134     A7 12 02 FB | 	rdlong	arg01, fp
23138     18 4E 85 F1 | 	sub	fp, #24
2313c     A7 14 02 FB | 	rdlong	arg02, fp
23140     09 15 12 FC | 	wxpin	arg02, arg01
23144     1C 4E 05 F1 | 	add	fp, #28
23148     A7 12 02 FB | 	rdlong	arg01, fp
2314c     14 4E 85 F1 | 	sub	fp, #20
23150     A7 14 02 FB | 	rdlong	arg02, fp
23154     09 15 02 FC | 	wrpin	arg02, arg01
23158                 | ' 
23158                 | ' 		}
23158                 | ' 	}
23158                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
23158                 | ' 	CardType = ty;
23158                 | ' 	s = ty ? 0 :  0x01 ;
23158                 | ' 	Stat = s;
23158                 | ' 
23158                 | ' 	deselect();
23158                 | ' 
23158                 | ' 
23158                 | ' 	_wxpin( PIN_CLK, ck_div );
23158                 | ' 	_wrpin( PIN_DI, spm_tx );
23158                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
23158                 | ' 	return s;
23158     08 4E 05 F1 | 	add	fp, #8
2315c     A7 FA C1 FA | 	rdbyte	result1, fp
23160     2C 4E 85 F1 | 	sub	fp, #44
23164                 | LR__3598
23164     A7 F0 03 F6 | 	mov	ptra, fp
23168     B2 00 A0 FD | 	call	#popregs_
2316c                 | _fatfs_cc_disk_initialize_ret
2316c     2D 00 64 FD | 	ret
23170                 | 
23170                 | _fatfs_cc_disk_read
23170     05 4A 05 F6 | 	mov	COUNT_, #5
23174     A8 00 A0 FD | 	call	#pushregs_
23178     0A 1F 02 F6 | 	mov	local01, arg02
2317c     0B 21 02 F6 | 	mov	local02, arg03
23180     0C 23 02 F6 | 	mov	local03, arg04
23184     00 12 0E F2 | 	cmp	arg01, #0 wz
23188     01 FA 05 56 |  if_ne	mov	result1, #1
2318c                 | ' 
2318c                 | ' 	return Stat;
2318c     01 00 00 AF 
23190     20 E4 05 A1 |  if_e	add	objptr, ##544
23194     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23198     01 00 00 AF 
2319c     20 E4 85 A1 |  if_e	sub	objptr, ##544
231a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
231a4     01 FA CD F7 | 	test	result1, #1 wz
231a8     03 FA 05 56 |  if_ne	mov	result1, #3
231ac     84 00 90 5D |  if_ne	jmp	#LR__3602
231b0     01 00 00 FF 
231b4     21 E4 05 F1 | 	add	objptr, ##545
231b8     F2 24 C2 FA | 	rdbyte	local04, objptr
231bc     01 00 00 FF 
231c0     21 E4 85 F1 | 	sub	objptr, ##545
231c4     08 24 CE F7 | 	test	local04, #8 wz
231c8     09 20 66 A0 |  if_e	shl	local02, #9
231cc     02 22 16 F2 | 	cmp	local03, #2 wc
231d0     12 24 06 36 |  if_ae	mov	local04, #18
231d4     11 24 06 C6 |  if_b	mov	local04, #17
231d8     10 15 02 F6 | 	mov	arg02, local02
231dc     12 13 02 F6 | 	mov	arg01, local04
231e0     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
231e4     FD 26 02 F6 | 	mov	local05, result1
231e8     07 26 4E F7 | 	zerox	local05, #7 wz
231ec     30 00 90 5D |  if_ne	jmp	#LR__3601
231f0                 | ' 		do {
231f0                 | LR__3600
231f0     0F 13 02 F6 | 	mov	arg01, local01
231f4     09 14 C6 F9 | 	decod	arg02, #9
231f8     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
231fc     00 FA 0D F2 | 	cmp	result1, #0 wz
23200     01 00 00 5F 
23204     00 1E 06 51 |  if_ne	add	local01, ##512
23208     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3600
2320c     12 25 E2 F8 | 	getbyte	local04, local04, #0
23210     12 24 0E F2 | 	cmp	local04, #18 wz
23214     0C 12 06 A6 |  if_e	mov	arg01, #12
23218     00 14 06 A6 |  if_e	mov	arg02, #0
2321c     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1074
23220                 | LR__3601
23220     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1060
23224                 | ' 	}
23224                 | ' 	deselect();
23224                 | ' 
23224                 | ' 	return count ? RES_ERROR : RES_OK;
23224     00 22 0E F2 | 	cmp	local03, #0 wz
23228     01 26 06 56 |  if_ne	mov	local05, #1
2322c     00 26 06 A6 |  if_e	mov	local05, #0
23230     13 FB 01 F6 | 	mov	result1, local05
23234                 | LR__3602
23234     A7 F0 03 F6 | 	mov	ptra, fp
23238     B2 00 A0 FD | 	call	#popregs_
2323c                 | _fatfs_cc_disk_read_ret
2323c     2D 00 64 FD | 	ret
23240                 | 
23240                 | _fatfs_cc_disk_write
23240     04 4A 05 F6 | 	mov	COUNT_, #4
23244     A8 00 A0 FD | 	call	#pushregs_
23248     0A 1F 02 F6 | 	mov	local01, arg02
2324c     0C 21 02 F6 | 	mov	local02, arg04
23250     0B 23 02 F6 | 	mov	local03, arg03
23254     00 12 0E F2 | 	cmp	arg01, #0 wz
23258     01 FA 05 56 |  if_ne	mov	result1, #1
2325c                 | ' 
2325c                 | ' 	return Stat;
2325c     01 00 00 AF 
23260     20 E4 05 A1 |  if_e	add	objptr, ##544
23264     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
23268     01 00 00 AF 
2326c     20 E4 85 A1 |  if_e	sub	objptr, ##544
23270     FD FA E1 F8 | 	getbyte	result1, result1, #0
23274     01 FA CD F7 | 	test	result1, #1 wz
23278     03 FA 05 56 |  if_ne	mov	result1, #3
2327c     D4 00 90 5D |  if_ne	jmp	#LR__3614
23280     01 00 00 FF 
23284     21 E4 05 F1 | 	add	objptr, ##545
23288     F2 16 C2 FA | 	rdbyte	arg03, objptr
2328c     01 00 00 FF 
23290     21 E4 85 F1 | 	sub	objptr, ##545
23294     08 16 CE F7 | 	test	arg03, #8 wz
23298     09 22 66 A0 |  if_e	shl	local03, #9
2329c     01 20 0E F2 | 	cmp	local02, #1 wz
232a0     30 00 90 5D |  if_ne	jmp	#LR__3610
232a4     18 12 06 F6 | 	mov	arg01, #24
232a8     11 15 02 F6 | 	mov	arg02, local03
232ac     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1074
232b0     FD 24 02 F6 | 	mov	local04, result1
232b4     07 24 4E F7 | 	zerox	local04, #7 wz
232b8     84 00 90 5D |  if_ne	jmp	#LR__3613
232bc     0F 13 02 F6 | 	mov	arg01, local01
232c0     FE 14 06 F6 | 	mov	arg02, #254
232c4     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
232c8     00 FA 0D F2 | 	cmp	result1, #0 wz
232cc     00 20 06 56 |  if_ne	mov	local02, #0
232d0     6C 00 90 FD | 	jmp	#LR__3613
232d4                 | LR__3610
232d4     01 00 00 FF 
232d8     21 E4 05 F1 | 	add	objptr, ##545
232dc     F2 24 C2 FA | 	rdbyte	local04, objptr
232e0     01 00 00 FF 
232e4     21 E4 85 F1 | 	sub	objptr, ##545
232e8     06 24 CE F7 | 	test	local04, #6 wz
232ec     97 12 06 56 |  if_ne	mov	arg01, #151
232f0     10 15 02 56 |  if_ne	mov	arg02, local02
232f4     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1074
232f8     11 15 02 F6 | 	mov	arg02, local03
232fc     19 12 06 F6 | 	mov	arg01, #25
23300     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1074
23304     FD 24 02 F6 | 	mov	local04, result1
23308     07 24 4E F7 | 	zerox	local04, #7 wz
2330c     30 00 90 5D |  if_ne	jmp	#LR__3612
23310                 | ' 			do {
23310                 | LR__3611
23310     0F 13 02 F6 | 	mov	arg01, local01
23314     FC 14 06 F6 | 	mov	arg02, #252
23318     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
2331c     00 FA 0D F2 | 	cmp	result1, #0 wz
23320     01 00 00 5F 
23324     00 1E 06 51 |  if_ne	add	local01, ##512
23328     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3611
2332c     00 12 06 F6 | 	mov	arg01, #0
23330     FD 14 06 F6 | 	mov	arg02, #253
23334     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1070
23338     00 FA 0D F2 | 	cmp	result1, #0 wz
2333c     01 20 06 A6 |  if_e	mov	local02, #1
23340                 | LR__3612
23340                 | LR__3613
23340     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1060
23344                 | ' 				count = 1;
23344                 | ' 		}
23344                 | ' 	}
23344                 | ' 	deselect();
23344                 | ' 
23344                 | ' 	return count ? RES_ERROR : RES_OK;
23344     00 20 0E F2 | 	cmp	local02, #0 wz
23348     01 24 06 56 |  if_ne	mov	local04, #1
2334c     00 24 06 A6 |  if_e	mov	local04, #0
23350     12 FB 01 F6 | 	mov	result1, local04
23354                 | LR__3614
23354     A7 F0 03 F6 | 	mov	ptra, fp
23358     B2 00 A0 FD | 	call	#popregs_
2335c                 | _fatfs_cc_disk_write_ret
2335c     2D 00 64 FD | 	ret
23360                 | 
23360                 | _fatfs_cc_disk_ioctl
23360     01 4A 05 F6 | 	mov	COUNT_, #1
23364     A8 00 A0 FD | 	call	#pushregs_
23368     30 F0 07 F1 | 	add	ptra, #48
2336c     04 4E 05 F1 | 	add	fp, #4
23370     A7 12 42 FC | 	wrbyte	arg01, fp
23374     04 4E 05 F1 | 	add	fp, #4
23378     A7 14 42 FC | 	wrbyte	arg02, fp
2337c     04 4E 05 F1 | 	add	fp, #4
23380     A7 16 62 FC | 	wrlong	arg03, fp
23384     08 4E 85 F1 | 	sub	fp, #8
23388     A7 12 CA FA | 	rdbyte	arg01, fp wz
2338c     04 4E 85 F1 | 	sub	fp, #4
23390     01 FA 05 56 |  if_ne	mov	result1, #1
23394                 | ' 
23394                 | ' 	return Stat;
23394     01 00 00 AF 
23398     20 E4 05 A1 |  if_e	add	objptr, ##544
2339c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
233a0     01 00 00 AF 
233a4     20 E4 85 A1 |  if_e	sub	objptr, ##544
233a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
233ac     01 FA CD F7 | 	test	result1, #1 wz
233b0     03 FA 05 56 |  if_ne	mov	result1, #3
233b4     E4 01 90 5D |  if_ne	jmp	#LR__3628
233b8     10 4E 05 F1 | 	add	fp, #16
233bc     A7 02 68 FC | 	wrlong	#1, fp
233c0                 | ' 
233c0                 | ' 	res = RES_ERROR;
233c0                 | ' 	switch (ctrl) {
233c0     08 4E 85 F1 | 	sub	fp, #8
233c4     A7 1E C2 FA | 	rdbyte	local01, fp
233c8     08 4E 85 F1 | 	sub	fp, #8
233cc     04 1E 26 F3 | 	fle	local01, #4
233d0     30 1E 62 FD | 	jmprel	local01
233d4                 | LR__3620
233d4     10 00 90 FD | 	jmp	#LR__3621
233d8     24 00 90 FD | 	jmp	#LR__3622
233dc     A0 01 90 FD | 	jmp	#LR__3626
233e0     80 01 90 FD | 	jmp	#LR__3625
233e4     98 01 90 FD | 	jmp	#LR__3626
233e8                 | LR__3621
233e8     B4 79 B0 FD | 	call	#_fatfs_cc_select_1064
233ec     00 FA 0D F2 | 	cmp	result1, #0 wz
233f0     10 4E 05 51 |  if_ne	add	fp, #16
233f4     A7 00 68 5C |  if_ne	wrlong	#0, fp
233f8     10 4E 85 51 |  if_ne	sub	fp, #16
233fc                 | ' 			break;
233fc     8C 01 90 FD | 	jmp	#LR__3627
23400                 | LR__3622
23400     09 12 06 F6 | 	mov	arg01, #9
23404     00 14 06 F6 | 	mov	arg02, #0
23408     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1074
2340c     FD 1E 02 F6 | 	mov	local01, result1
23410     07 1E 4E F7 | 	zerox	local01, #7 wz
23414     74 01 90 5D |  if_ne	jmp	#LR__3627
23418     18 4E 05 F1 | 	add	fp, #24
2341c     A7 12 02 F6 | 	mov	arg01, fp
23420     18 4E 85 F1 | 	sub	fp, #24
23424     10 14 06 F6 | 	mov	arg02, #16
23428     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1068
2342c     00 FA 0D F2 | 	cmp	result1, #0 wz
23430     58 01 90 AD |  if_e	jmp	#LR__3627
23434     18 4E 05 F1 | 	add	fp, #24
23438     A7 1E C2 FA | 	rdbyte	local01, fp
2343c     18 4E 85 F1 | 	sub	fp, #24
23440     06 1E 46 F0 | 	shr	local01, #6
23444     01 1E 0E F2 | 	cmp	local01, #1 wz
23448     5C 00 90 5D |  if_ne	jmp	#LR__3623
2344c     21 4E 05 F1 | 	add	fp, #33
23450     A7 1E C2 FA | 	rdbyte	local01, fp
23454     01 4E 85 F1 | 	sub	fp, #1
23458     A7 FA C1 FA | 	rdbyte	result1, fp
2345c     FD FA 31 F9 | 	getword	result1, result1, #0
23460     08 FA 65 F0 | 	shl	result1, #8
23464     FD 1E 02 F1 | 	add	local01, result1
23468     01 4E 85 F1 | 	sub	fp, #1
2346c     A7 FA C1 FA | 	rdbyte	result1, fp
23470     3F FA 05 F5 | 	and	result1, #63
23474     10 FA 65 F0 | 	shl	result1, #16
23478     FD 1E 02 F1 | 	add	local01, result1
2347c     01 1E 06 F1 | 	add	local01, #1
23480     09 4E 05 F1 | 	add	fp, #9
23484     A7 1E 62 FC | 	wrlong	local01, fp
23488     1C 4E 85 F1 | 	sub	fp, #28
2348c     A7 1E 02 FB | 	rdlong	local01, fp
23490     1C 4E 05 F1 | 	add	fp, #28
23494     A7 FA 01 FB | 	rdlong	result1, fp
23498     28 4E 85 F1 | 	sub	fp, #40
2349c     0A FA 65 F0 | 	shl	result1, #10
234a0     0F FB 61 FC | 	wrlong	result1, local01
234a4     AC 00 90 FD | 	jmp	#LR__3624
234a8                 | LR__3623
234a8     1D 4E 05 F1 | 	add	fp, #29
234ac     A7 1E C2 FA | 	rdbyte	local01, fp
234b0     0F 1F 42 F8 | 	getnib	local01, local01, #0
234b4     05 4E 05 F1 | 	add	fp, #5
234b8     A7 FA C1 FA | 	rdbyte	result1, fp
234bc     80 FA 05 F5 | 	and	result1, #128
234c0     07 FA C5 F0 | 	sar	result1, #7
234c4     FD 1E 02 F1 | 	add	local01, result1
234c8     01 4E 85 F1 | 	sub	fp, #1
234cc     A7 FA C1 FA | 	rdbyte	result1, fp
234d0     03 FA 05 F5 | 	and	result1, #3
234d4     01 FA 65 F0 | 	shl	result1, #1
234d8     FD 1E 02 F1 | 	add	local01, result1
234dc     02 1E 06 F1 | 	add	local01, #2
234e0     0D 4E 85 F1 | 	sub	fp, #13
234e4     A7 1E 42 FC | 	wrbyte	local01, fp
234e8     0C 4E 05 F1 | 	add	fp, #12
234ec     A7 1E C2 FA | 	rdbyte	local01, fp
234f0     06 1E 46 F0 | 	shr	local01, #6
234f4     01 4E 85 F1 | 	sub	fp, #1
234f8     A7 FA C1 FA | 	rdbyte	result1, fp
234fc     FD FA 31 F9 | 	getword	result1, result1, #0
23500     02 FA 65 F0 | 	shl	result1, #2
23504     FD 1E 02 F1 | 	add	local01, result1
23508     01 4E 85 F1 | 	sub	fp, #1
2350c     A7 FA C1 FA | 	rdbyte	result1, fp
23510     03 FA 05 F5 | 	and	result1, #3
23514     FD FA 31 F9 | 	getword	result1, result1, #0
23518     0A FA 65 F0 | 	shl	result1, #10
2351c     FD 1E 02 F1 | 	add	local01, result1
23520     01 1E 06 F1 | 	add	local01, #1
23524     0A 4E 05 F1 | 	add	fp, #10
23528     A7 1E 62 FC | 	wrlong	local01, fp
2352c     1C 4E 85 F1 | 	sub	fp, #28
23530     A7 1E 02 FB | 	rdlong	local01, fp
23534     1C 4E 05 F1 | 	add	fp, #28
23538     A7 FA 01 FB | 	rdlong	result1, fp
2353c     14 4E 85 F1 | 	sub	fp, #20
23540     A7 16 C2 FA | 	rdbyte	arg03, fp
23544     14 4E 85 F1 | 	sub	fp, #20
23548     09 16 86 F1 | 	sub	arg03, #9
2354c     0B FB 61 F0 | 	shl	result1, arg03
23550     0F FB 61 FC | 	wrlong	result1, local01
23554                 | LR__3624
23554     10 4E 05 F1 | 	add	fp, #16
23558     A7 00 68 FC | 	wrlong	#0, fp
2355c     10 4E 85 F1 | 	sub	fp, #16
23560                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
23560                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
23560                 | ' 					*(LBA_t*)buff = cs << (n - 9);
23560                 | ' 				}
23560                 | ' 				res = RES_OK;
23560                 | ' 			}
23560                 | ' 			break;
23560     28 00 90 FD | 	jmp	#LR__3627
23564                 | LR__3625
23564     0C 4E 05 F1 | 	add	fp, #12
23568     A7 1E 02 FB | 	rdlong	local01, fp
2356c     0F 01 69 FC | 	wrlong	#128, local01
23570     04 4E 05 F1 | 	add	fp, #4
23574     A7 00 68 FC | 	wrlong	#0, fp
23578     10 4E 85 F1 | 	sub	fp, #16
2357c                 | ' 			*(DWORD*)buff = 128;
2357c                 | ' 			res = RES_OK;
2357c                 | ' 			break;
2357c     0C 00 90 FD | 	jmp	#LR__3627
23580                 | LR__3626
23580     10 4E 05 F1 | 	add	fp, #16
23584     A7 08 68 FC | 	wrlong	#4, fp
23588     10 4E 85 F1 | 	sub	fp, #16
2358c                 | LR__3627
2358c     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1060
23590                 | ' 			res = RES_PARERR;
23590                 | ' 	}
23590                 | ' 
23590                 | ' 	deselect();
23590                 | ' 
23590                 | ' 	return res;
23590     10 4E 05 F1 | 	add	fp, #16
23594     A7 FA 01 FB | 	rdlong	result1, fp
23598     10 4E 85 F1 | 	sub	fp, #16
2359c                 | LR__3628
2359c     A7 F0 03 F6 | 	mov	ptra, fp
235a0     B2 00 A0 FD | 	call	#popregs_
235a4                 | _fatfs_cc_disk_ioctl_ret
235a4     2D 00 64 FD | 	ret
235a8                 | 
235a8                 | _fatfs_cc_disk_setpins
235a8     00 12 0E F2 | 	cmp	arg01, #0 wz
235ac     01 FA 65 56 |  if_ne	neg	result1, #1
235b0     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
235b4     01 00 00 FF 
235b8     10 E4 05 F1 | 	add	objptr, ##528
235bc     F2 14 62 FC | 	wrlong	arg02, objptr
235c0     04 E4 05 F1 | 	add	objptr, #4
235c4     F2 16 62 FC | 	wrlong	arg03, objptr
235c8     04 E4 05 F1 | 	add	objptr, #4
235cc     F2 18 62 FC | 	wrlong	arg04, objptr
235d0     04 E4 05 F1 | 	add	objptr, #4
235d4     F2 1A 62 FC | 	wrlong	arg05, objptr
235d8     01 00 00 FF 
235dc     1C E4 85 F1 | 	sub	objptr, ##540
235e0     00 FA 05 F6 | 	mov	result1, #0
235e4                 | _fatfs_cc_disk_setpins_ret
235e4     2D 00 64 FD | 	ret
235e8                 | 
235e8                 | _fatfs_cc_tchar2uni
235e8     09 01 02 FB | 	rdlong	_var01, arg01
235ec     00 03 02 F6 | 	mov	_var02, _var01
235f0     01 00 06 F1 | 	add	_var01, #1
235f4     00 05 02 F6 | 	mov	_var03, _var01
235f8     01 07 C2 FA | 	rdbyte	_var04, _var02
235fc     80 06 CE F7 | 	test	_var04, #128 wz
23600     E8 00 90 AD |  if_e	jmp	#LR__3637
23604     03 09 02 F6 | 	mov	_var05, _var04
23608     E0 08 06 F5 | 	and	_var05, #224
2360c     C0 08 0E F2 | 	cmp	_var05, #192 wz
23610     1F 06 06 A5 |  if_e	and	_var04, #31
23614     01 0A 06 A6 |  if_e	mov	_var06, #1
23618     34 00 90 AD |  if_e	jmp	#LR__3631
2361c     03 09 02 F6 | 	mov	_var05, _var04
23620     F0 08 06 F5 | 	and	_var05, #240
23624     E0 08 0E F2 | 	cmp	_var05, #224 wz
23628     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2362c     02 0A 06 A6 |  if_e	mov	_var06, #2
23630     1C 00 90 AD |  if_e	jmp	#LR__3630
23634     03 09 02 F6 | 	mov	_var05, _var04
23638     F8 08 06 F5 | 	and	_var05, #248
2363c     F0 08 0E F2 | 	cmp	_var05, #240 wz
23640     07 06 06 A5 |  if_e	and	_var04, #7
23644     03 0A 06 A6 |  if_e	mov	_var06, #3
23648                 | ' 			return 0xFFFFFFFF;
23648     01 FA 65 56 |  if_ne	neg	result1, #1
2364c     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
23650                 | LR__3630
23650                 | LR__3631
23650                 | ' 		}
23650                 | ' 		do {
23650                 | LR__3632
23650     02 0D C2 FA | 	rdbyte	_var07, _var03
23654     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
23658     C0 08 06 F5 | 	and	_var05, #192
2365c     80 08 0E F2 | 	cmp	_var05, #128 wz
23660     01 04 06 F1 | 	add	_var03, #1
23664     01 FA 65 56 |  if_ne	neg	result1, #1
23668     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2366c     06 06 66 F0 | 	shl	_var04, #6
23670     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
23674     3F 02 06 F5 | 	and	_var02, #63
23678     01 07 42 F5 | 	or	_var04, _var02
2367c     F4 0B 6E FB | 	djnz	_var06, #LR__3632
23680     80 06 16 F2 | 	cmp	_var04, #128 wc
23684     24 00 90 CD |  if_b	jmp	#LR__3634
23688     6C 00 00 FF 
2368c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
23690     0C 00 90 CD |  if_b	jmp	#LR__3633
23694     70 00 00 FF 
23698     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2369c     0C 00 90 CD |  if_b	jmp	#LR__3634
236a0                 | LR__3633
236a0     80 08 00 FF 
236a4     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
236a8     08 00 90 CD |  if_b	jmp	#LR__3635
236ac                 | LR__3634
236ac     01 FA 65 F6 | 	neg	result1, #1
236b0     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
236b4                 | LR__3635
236b4     80 00 00 FF 
236b8     00 06 16 F2 | 	cmp	_var04, ##65536 wc
236bc     2C 00 90 CD |  if_b	jmp	#LR__3636
236c0     03 03 02 F6 | 	mov	_var02, _var04
236c4     80 00 00 FF 
236c8     00 02 86 F1 | 	sub	_var02, ##65536
236cc     06 02 66 F0 | 	shl	_var02, #6
236d0     80 FF 01 FF 
236d4     00 02 06 F5 | 	and	_var02, ##67043328
236d8     6E 00 6C FF 
236dc     00 08 06 F6 | 	mov	_var05, ##-671032320
236e0     01 09 42 F5 | 	or	_var05, _var02
236e4     09 06 46 F7 | 	zerox	_var04, #9
236e8     04 07 42 F5 | 	or	_var04, _var05
236ec                 | LR__3636
236ec                 | LR__3637
236ec     09 05 62 FC | 	wrlong	_var03, arg01
236f0                 | ' 	}
236f0                 | ' #line 811 "ff.c"
236f0                 | ' 	*str = p;
236f0                 | ' 	return uc;
236f0     03 FB 01 F6 | 	mov	result1, _var04
236f4                 | _fatfs_cc_tchar2uni_ret
236f4     2D 00 64 FD | 	ret
236f8                 | 
236f8                 | _fatfs_cc_put_utf
236f8     80 12 16 F2 | 	cmp	arg01, #128 wc
236fc     18 00 90 3D |  if_ae	jmp	#LR__3640
23700     01 16 16 F2 | 	cmp	arg03, #1 wc
23704     00 FA 05 C6 |  if_b	mov	result1, #0
23708     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2370c     0A 13 42 FC | 	wrbyte	arg01, arg02
23710                 | ' 		*buf = (TCHAR)chr;
23710                 | ' 		return 1;
23710     01 FA 05 F6 | 	mov	result1, #1
23714     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23718                 | LR__3640
23718     04 00 00 FF 
2371c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
23720     40 00 90 3D |  if_ae	jmp	#LR__3641
23724     02 16 16 F2 | 	cmp	arg03, #2 wc
23728     00 FA 05 C6 |  if_b	mov	result1, #0
2372c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
23730     09 FB 01 F6 | 	mov	result1, arg01
23734     06 FA 45 F0 | 	shr	result1, #6
23738     1F FA 05 F5 | 	and	result1, #31
2373c     C0 16 06 F6 | 	mov	arg03, #192
23740     FD 16 42 F5 | 	or	arg03, result1
23744     0A 17 42 FC | 	wrbyte	arg03, arg02
23748     01 14 06 F1 | 	add	arg02, #1
2374c     3F 12 06 F5 | 	and	arg01, #63
23750     80 FA 05 F6 | 	mov	result1, #128
23754     09 FB 41 F5 | 	or	result1, arg01
23758     0A FB 41 FC | 	wrbyte	result1, arg02
2375c                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2375c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2375c                 | ' 		return 2;
2375c     02 FA 05 F6 | 	mov	result1, #2
23760     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23764                 | LR__3641
23764     80 00 00 FF 
23768     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2376c     70 00 90 3D |  if_ae	jmp	#LR__3644
23770     03 16 16 F2 | 	cmp	arg03, #3 wc
23774     18 00 90 CD |  if_b	jmp	#LR__3642
23778     6C 00 00 FF 
2377c     00 12 16 F2 | 	cmp	arg01, ##55296 wc
23780     14 00 90 CD |  if_b	jmp	#LR__3643
23784     70 00 00 FF 
23788     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2378c     08 00 90 3D |  if_ae	jmp	#LR__3643
23790                 | LR__3642
23790     00 FA 05 F6 | 	mov	result1, #0
23794     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23798                 | LR__3643
23798     09 FB 59 F8 | 	getnib	result1, arg01, #3
2379c     E0 16 06 F6 | 	mov	arg03, #224
237a0     FD 16 42 F5 | 	or	arg03, result1
237a4     0A 17 42 FC | 	wrbyte	arg03, arg02
237a8     01 14 06 F1 | 	add	arg02, #1
237ac     09 FB 01 F6 | 	mov	result1, arg01
237b0     06 FA 45 F0 | 	shr	result1, #6
237b4     3F FA 05 F5 | 	and	result1, #63
237b8     80 16 06 F6 | 	mov	arg03, #128
237bc     FD 16 42 F5 | 	or	arg03, result1
237c0     0A 17 42 FC | 	wrbyte	arg03, arg02
237c4     01 14 06 F1 | 	add	arg02, #1
237c8     3F 12 06 F5 | 	and	arg01, #63
237cc     80 FA 05 F6 | 	mov	result1, #128
237d0     09 FB 41 F5 | 	or	result1, arg01
237d4     0A FB 41 FC | 	wrbyte	result1, arg02
237d8                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
237d8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
237d8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
237d8                 | ' 		return 3;
237d8     03 FA 05 F6 | 	mov	result1, #3
237dc     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
237e0                 | LR__3644
237e0     04 16 16 F2 | 	cmp	arg03, #4 wc
237e4     00 FA 05 C6 |  if_b	mov	result1, #0
237e8     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
237ec     09 01 02 F6 | 	mov	_var01, arg01
237f0     E0 01 06 F4 | 	bitl	_var01, #480
237f4     00 00 6C FF 
237f8     00 00 86 F1 | 	sub	_var01, ##-671088640
237fc     06 00 46 F0 | 	shr	_var01, #6
23800     09 13 32 F9 | 	getword	arg01, arg01, #0
23804     6E 00 00 FF 
23808     00 12 86 F1 | 	sub	arg01, ##56320
2380c     00 08 00 FF 
23810     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
23814     02 00 00 CF 
23818     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2381c     00 FA 05 36 |  if_ae	mov	result1, #0
23820     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
23824     09 01 42 F5 | 	or	_var01, arg01
23828     80 00 00 FF 
2382c     00 00 06 F1 | 	add	_var01, ##65536
23830     00 FB 01 F6 | 	mov	result1, _var01
23834     12 FA 45 F0 | 	shr	result1, #18
23838     07 FA 05 F5 | 	and	result1, #7
2383c     F0 16 06 F6 | 	mov	arg03, #240
23840     FD 16 42 F5 | 	or	arg03, result1
23844     0A 17 42 FC | 	wrbyte	arg03, arg02
23848     01 14 06 F1 | 	add	arg02, #1
2384c     00 FB 01 F6 | 	mov	result1, _var01
23850     0C FA 45 F0 | 	shr	result1, #12
23854     3F FA 05 F5 | 	and	result1, #63
23858     80 16 06 F6 | 	mov	arg03, #128
2385c     FD 16 42 F5 | 	or	arg03, result1
23860     0A 17 42 FC | 	wrbyte	arg03, arg02
23864     01 14 06 F1 | 	add	arg02, #1
23868     00 FB 01 F6 | 	mov	result1, _var01
2386c     06 FA 45 F0 | 	shr	result1, #6
23870     3F FA 05 F5 | 	and	result1, #63
23874     80 16 06 F6 | 	mov	arg03, #128
23878     FD 16 42 F5 | 	or	arg03, result1
2387c     0A 17 42 FC | 	wrbyte	arg03, arg02
23880     01 14 06 F1 | 	add	arg02, #1
23884     3F 00 06 F5 | 	and	_var01, #63
23888     80 FA 05 F6 | 	mov	result1, #128
2388c     00 FB 41 F5 | 	or	result1, _var01
23890     0A FB 41 FC | 	wrbyte	result1, arg02
23894                 | ' 	chr = (hc | chr) + 0x10000;
23894                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
23894                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
23894                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
23894                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
23894                 | ' 	return 4;
23894     04 FA 05 F6 | 	mov	result1, #4
23898                 | _fatfs_cc_put_utf_ret
23898     2D 00 64 FD | 	ret
2389c                 | 
2389c                 | _fatfs_cc_sync_window
2389c     02 4A 05 F6 | 	mov	COUNT_, #2
238a0     A8 00 A0 FD | 	call	#pushregs_
238a4     09 1F 02 F6 | 	mov	local01, arg01
238a8     00 20 06 F6 | 	mov	local02, #0
238ac     03 1E 06 F1 | 	add	local01, #3
238b0     0F FB C9 FA | 	rdbyte	result1, local01 wz
238b4     03 1E 86 F1 | 	sub	local01, #3
238b8     A4 00 90 AD |  if_e	jmp	#LR__3652
238bc     01 1E 06 F1 | 	add	local01, #1
238c0     0F 13 C2 FA | 	rdbyte	arg01, local01
238c4     33 1E 06 F1 | 	add	local01, #51
238c8     0F 15 02 F6 | 	mov	arg02, local01
238cc     04 1E 86 F1 | 	sub	local01, #4
238d0     0F 17 02 FB | 	rdlong	arg03, local01
238d4     30 1E 86 F1 | 	sub	local01, #48
238d8     01 18 06 F6 | 	mov	arg04, #1
238dc     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
238e0     00 FA 0D F2 | 	cmp	result1, #0 wz
238e4     74 00 90 5D |  if_ne	jmp	#LR__3650
238e8     03 1E 06 F1 | 	add	local01, #3
238ec     0F 01 48 FC | 	wrbyte	#0, local01
238f0     2D 1E 06 F1 | 	add	local01, #45
238f4     0F FB 01 FB | 	rdlong	result1, local01
238f8     0C 1E 86 F1 | 	sub	local01, #12
238fc     0F 19 02 FB | 	rdlong	arg04, local01
23900     0C FB 81 F1 | 	sub	result1, arg04
23904     08 1E 86 F1 | 	sub	local01, #8
23908     0F 19 02 FB | 	rdlong	arg04, local01
2390c     1C 1E 86 F1 | 	sub	local01, #28
23910     0C FB 11 F2 | 	cmp	result1, arg04 wc
23914     48 00 90 3D |  if_ae	jmp	#LR__3651
23918     02 1E 06 F1 | 	add	local01, #2
2391c     0F 19 C2 FA | 	rdbyte	arg04, local01
23920     02 1E 86 F1 | 	sub	local01, #2
23924     02 18 0E F2 | 	cmp	arg04, #2 wz
23928     34 00 90 5D |  if_ne	jmp	#LR__3651
2392c     01 1E 06 F1 | 	add	local01, #1
23930     0F 13 C2 FA | 	rdbyte	arg01, local01
23934     33 1E 06 F1 | 	add	local01, #51
23938     0F 15 02 F6 | 	mov	arg02, local01
2393c     04 1E 86 F1 | 	sub	local01, #4
23940     0F 17 02 FB | 	rdlong	arg03, local01
23944     14 1E 86 F1 | 	sub	local01, #20
23948     0F 1F 02 FB | 	rdlong	local01, local01
2394c     0F 17 02 F1 | 	add	arg03, local01
23950     01 18 06 F6 | 	mov	arg04, #1
23954     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
23958     04 00 90 FD | 	jmp	#LR__3651
2395c                 | LR__3650
2395c     01 20 06 F6 | 	mov	local02, #1
23960                 | LR__3651
23960                 | LR__3652
23960                 | ' 			res = FR_DISK_ERR;
23960                 | ' 		}
23960                 | ' 	}
23960                 | ' 	return res;
23960     10 FB 01 F6 | 	mov	result1, local02
23964     A7 F0 03 F6 | 	mov	ptra, fp
23968     B2 00 A0 FD | 	call	#popregs_
2396c                 | _fatfs_cc_sync_window_ret
2396c     2D 00 64 FD | 	ret
23970                 | 
23970                 | _fatfs_cc_move_window
23970     03 4A 05 F6 | 	mov	COUNT_, #3
23974     A8 00 A0 FD | 	call	#pushregs_
23978     09 1F 02 F6 | 	mov	local01, arg01
2397c     0A 21 02 F6 | 	mov	local02, arg02
23980     00 22 06 F6 | 	mov	local03, #0
23984     30 1E 06 F1 | 	add	local01, #48
23988     0F 19 02 FB | 	rdlong	arg04, local01
2398c     30 1E 86 F1 | 	sub	local01, #48
23990     0C 21 0A F2 | 	cmp	local02, arg04 wz
23994     40 00 90 AD |  if_e	jmp	#LR__3661
23998     0F 13 02 F6 | 	mov	arg01, local01
2399c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
239a0     FD 22 0A F6 | 	mov	local03, result1 wz
239a4     30 00 90 5D |  if_ne	jmp	#LR__3660
239a8     01 1E 06 F1 | 	add	local01, #1
239ac     0F 13 C2 FA | 	rdbyte	arg01, local01
239b0     33 1E 06 F1 | 	add	local01, #51
239b4     0F 15 02 F6 | 	mov	arg02, local01
239b8     10 17 02 F6 | 	mov	arg03, local02
239bc     01 18 06 F6 | 	mov	arg04, #1
239c0     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
239c4     00 FA 0D F2 | 	cmp	result1, #0 wz
239c8     01 20 66 56 |  if_ne	neg	local02, #1
239cc     01 22 06 56 |  if_ne	mov	local03, #1
239d0     04 1E 86 F1 | 	sub	local01, #4
239d4     0F 21 62 FC | 	wrlong	local02, local01
239d8                 | LR__3660
239d8                 | LR__3661
239d8                 | ' 				sect = (LBA_t)0 - 1;
239d8                 | ' 				res = FR_DISK_ERR;
239d8                 | ' 			}
239d8                 | ' 			fs->winsect = sect;
239d8                 | ' 		}
239d8                 | ' 	}
239d8                 | ' 	return res;
239d8     11 FB 01 F6 | 	mov	result1, local03
239dc     A7 F0 03 F6 | 	mov	ptra, fp
239e0     B2 00 A0 FD | 	call	#popregs_
239e4                 | _fatfs_cc_move_window_ret
239e4     2D 00 64 FD | 	ret
239e8                 | 
239e8                 | _fatfs_cc_sync_fs
239e8     02 4A 05 F6 | 	mov	COUNT_, #2
239ec     A8 00 A0 FD | 	call	#pushregs_
239f0     09 1F 02 F6 | 	mov	local01, arg01
239f4     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
239f8     FD 20 0A F6 | 	mov	local02, result1 wz
239fc     D8 00 90 5D |  if_ne	jmp	#LR__3671
23a00     0F 19 C2 FA | 	rdbyte	arg04, local01
23a04     03 18 0E F2 | 	cmp	arg04, #3 wz
23a08     04 1E 06 A1 |  if_e	add	local01, #4
23a0c     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
23a10     04 1E 86 A1 |  if_e	sub	local01, #4
23a14     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
23a18     A0 00 90 5D |  if_ne	jmp	#LR__3670
23a1c     34 1E 06 F1 | 	add	local01, #52
23a20     0F 13 02 F6 | 	mov	arg01, local01
23a24     00 14 06 F6 | 	mov	arg02, #0
23a28     09 16 C6 F9 | 	decod	arg03, #9
23a2c     98 00 A0 FD | 	call	#\builtin_bytefill_
23a30     0F 13 02 F6 | 	mov	arg01, local01
23a34     FE 13 06 F1 | 	add	arg01, #510
23a38     55 00 80 FF 
23a3c     09 AB 58 FC | 	wrword	##43605, arg01
23a40     A9 B0 A0 FF 
23a44     0F A5 68 FC | 	wrlong	##1096897106, local01
23a48     0F 13 02 F6 | 	mov	arg01, local01
23a4c     E4 13 06 F1 | 	add	arg01, #484
23a50     B9 A0 B0 FF 
23a54     09 E5 68 FC | 	wrlong	##1631679090, arg01
23a58     0F 13 02 F6 | 	mov	arg01, local01
23a5c     E8 13 06 F1 | 	add	arg01, #488
23a60     20 1E 86 F1 | 	sub	local01, #32
23a64     0F 15 02 FB | 	rdlong	arg02, local01
23a68     09 15 62 FC | 	wrlong	arg02, arg01
23a6c     20 1E 06 F1 | 	add	local01, #32
23a70     0F 13 02 F6 | 	mov	arg01, local01
23a74     EC 13 06 F1 | 	add	arg01, #492
23a78     24 1E 86 F1 | 	sub	local01, #36
23a7c     0F 15 02 FB | 	rdlong	arg02, local01
23a80     09 15 62 FC | 	wrlong	arg02, arg01
23a84     10 1E 06 F1 | 	add	local01, #16
23a88     0F 17 02 FB | 	rdlong	arg03, local01
23a8c     01 16 06 F1 | 	add	arg03, #1
23a90     10 1E 06 F1 | 	add	local01, #16
23a94     0F 17 62 FC | 	wrlong	arg03, local01
23a98     2F 1E 86 F1 | 	sub	local01, #47
23a9c     0F 13 C2 FA | 	rdbyte	arg01, local01
23aa0     33 1E 06 F1 | 	add	local01, #51
23aa4     0F 15 02 F6 | 	mov	arg02, local01
23aa8     01 18 06 F6 | 	mov	arg04, #1
23aac     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
23ab0     30 1E 86 F1 | 	sub	local01, #48
23ab4     0F 01 48 FC | 	wrbyte	#0, local01
23ab8     04 1E 86 F1 | 	sub	local01, #4
23abc                 | LR__3670
23abc     01 1E 06 F1 | 	add	local01, #1
23ac0     0F 13 C2 FA | 	rdbyte	arg01, local01
23ac4     00 14 06 F6 | 	mov	arg02, #0
23ac8     00 16 06 F6 | 	mov	arg03, #0
23acc     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
23ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
23ad4     01 20 06 56 |  if_ne	mov	local02, #1
23ad8                 | LR__3671
23ad8                 | ' 	}
23ad8                 | ' 
23ad8                 | ' 	return res;
23ad8     10 FB 01 F6 | 	mov	result1, local02
23adc     A7 F0 03 F6 | 	mov	ptra, fp
23ae0     B2 00 A0 FD | 	call	#popregs_
23ae4                 | _fatfs_cc_sync_fs_ret
23ae4     2D 00 64 FD | 	ret
23ae8                 | 
23ae8                 | _fatfs_cc_clst2sect
23ae8     02 14 86 F1 | 	sub	arg02, #2
23aec     18 12 06 F1 | 	add	arg01, #24
23af0     09 01 02 FB | 	rdlong	_var01, arg01
23af4     18 12 86 F1 | 	sub	arg01, #24
23af8     02 00 86 F1 | 	sub	_var01, #2
23afc     00 15 12 F2 | 	cmp	arg02, _var01 wc
23b00     00 FA 05 36 |  if_ae	mov	result1, #0
23b04     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
23b08     0A 12 06 F1 | 	add	arg01, #10
23b0c     09 01 E2 FA | 	rdword	_var01, arg01
23b10     0A 01 02 FD | 	qmul	_var01, arg02
23b14                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
23b14     22 12 06 F1 | 	add	arg01, #34
23b18     09 FB 01 FB | 	rdlong	result1, arg01
23b1c     18 00 62 FD | 	getqx	_var01
23b20     00 FB 01 F1 | 	add	result1, _var01
23b24                 | _fatfs_cc_clst2sect_ret
23b24     2D 00 64 FD | 	ret
23b28                 | 
23b28                 | _fatfs_cc_get_fat
23b28     07 4A 05 F6 | 	mov	COUNT_, #7
23b2c     A8 00 A0 FD | 	call	#pushregs_
23b30     0A 1F 02 F6 | 	mov	local01, arg02
23b34     09 21 02 FB | 	rdlong	local02, arg01
23b38     02 1E 16 F2 | 	cmp	local01, #2 wc
23b3c     14 00 90 CD |  if_b	jmp	#LR__3680
23b40     18 20 06 F1 | 	add	local02, #24
23b44     10 23 02 FB | 	rdlong	local03, local02
23b48     18 20 86 F1 | 	sub	local02, #24
23b4c     11 1F 12 F2 | 	cmp	local01, local03 wc
23b50     08 00 90 CD |  if_b	jmp	#LR__3681
23b54                 | LR__3680
23b54     01 24 06 F6 | 	mov	local04, #1
23b58     60 01 90 FD | 	jmp	#LR__3688
23b5c                 | LR__3681
23b5c     01 24 66 F6 | 	neg	local04, #1
23b60                 | ' 		val = 0xFFFFFFFF;
23b60                 | ' 
23b60                 | ' 		switch (fs->fs_type) {
23b60     10 27 C2 FA | 	rdbyte	local05, local02
23b64     01 26 86 F1 | 	sub	local05, #1
23b68     03 26 26 F3 | 	fle	local05, #3
23b6c     30 26 62 FD | 	jmprel	local05
23b70                 | LR__3682
23b70     0C 00 90 FD | 	jmp	#LR__3683
23b74     B8 00 90 FD | 	jmp	#LR__3684
23b78     F8 00 90 FD | 	jmp	#LR__3685
23b7c     38 01 90 FD | 	jmp	#LR__3686
23b80                 | LR__3683
23b80     0F 27 02 F6 | 	mov	local05, local01
23b84     0F 13 02 F6 | 	mov	arg01, local01
23b88     01 12 46 F0 | 	shr	arg01, #1
23b8c     09 27 02 F1 | 	add	local05, arg01
23b90     10 13 02 F6 | 	mov	arg01, local02
23b94     13 29 02 F6 | 	mov	local06, local05
23b98     09 28 46 F0 | 	shr	local06, #9
23b9c     24 20 06 F1 | 	add	local02, #36
23ba0     10 15 02 FB | 	rdlong	arg02, local02
23ba4     24 20 86 F1 | 	sub	local02, #36
23ba8     14 15 02 F1 | 	add	arg02, local06
23bac     C0 FD BF FD | 	call	#_fatfs_cc_move_window
23bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
23bb4     04 01 90 5D |  if_ne	jmp	#LR__3687
23bb8     13 29 02 F6 | 	mov	local06, local05
23bbc     FF 29 06 F5 | 	and	local06, #511
23bc0     34 20 06 F1 | 	add	local02, #52
23bc4     10 29 02 F1 | 	add	local06, local02
23bc8     14 2B C2 FA | 	rdbyte	local07, local06
23bcc     34 20 86 F1 | 	sub	local02, #52
23bd0     10 13 02 F6 | 	mov	arg01, local02
23bd4     01 26 06 F1 | 	add	local05, #1
23bd8     13 29 02 F6 | 	mov	local06, local05
23bdc     09 28 46 F0 | 	shr	local06, #9
23be0     24 20 06 F1 | 	add	local02, #36
23be4     10 15 02 FB | 	rdlong	arg02, local02
23be8     24 20 86 F1 | 	sub	local02, #36
23bec     14 15 02 F1 | 	add	arg02, local06
23bf0     7C FD BF FD | 	call	#_fatfs_cc_move_window
23bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
23bf8     C0 00 90 5D |  if_ne	jmp	#LR__3687
23bfc     FF 27 06 F5 | 	and	local05, #511
23c00     34 20 06 F1 | 	add	local02, #52
23c04     10 27 02 F1 | 	add	local05, local02
23c08     13 29 C2 FA | 	rdbyte	local06, local05
23c0c     08 28 66 F0 | 	shl	local06, #8
23c10     14 2B 42 F5 | 	or	local07, local06
23c14     01 1E CE F7 | 	test	local01, #1 wz
23c18     04 2A 46 50 |  if_ne	shr	local07, #4
23c1c     15 23 02 56 |  if_ne	mov	local03, local07
23c20     0B 2A 46 A7 |  if_e	zerox	local07, #11
23c24     15 23 02 A6 |  if_e	mov	local03, local07
23c28     11 25 02 F6 | 	mov	local04, local03
23c2c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
23c2c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
23c2c                 | ' 			break;
23c2c     8C 00 90 FD | 	jmp	#LR__3687
23c30                 | LR__3684
23c30     10 13 02 F6 | 	mov	arg01, local02
23c34     0F 29 02 F6 | 	mov	local06, local01
23c38     08 28 46 F0 | 	shr	local06, #8
23c3c     24 20 06 F1 | 	add	local02, #36
23c40     10 15 02 FB | 	rdlong	arg02, local02
23c44     24 20 86 F1 | 	sub	local02, #36
23c48     14 15 02 F1 | 	add	arg02, local06
23c4c     20 FD BF FD | 	call	#_fatfs_cc_move_window
23c50     00 FA 0D F2 | 	cmp	result1, #0 wz
23c54     64 00 90 5D |  if_ne	jmp	#LR__3687
23c58     34 20 06 F1 | 	add	local02, #52
23c5c     01 1E 66 F0 | 	shl	local01, #1
23c60     FF 1F 06 F5 | 	and	local01, #511
23c64     0F 21 02 F1 | 	add	local02, local01
23c68                 | ' {
23c68                 | ' 
23c68                 | ' 	return *((WORD*)ptr);
23c68     10 FB E1 FA | 	rdword	result1, local02
23c6c     FD 24 32 F9 | 	getword	local04, result1, #0
23c70                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
23c70                 | ' 			break;
23c70     48 00 90 FD | 	jmp	#LR__3687
23c74                 | LR__3685
23c74     10 13 02 F6 | 	mov	arg01, local02
23c78     0F 29 02 F6 | 	mov	local06, local01
23c7c     07 28 46 F0 | 	shr	local06, #7
23c80     24 20 06 F1 | 	add	local02, #36
23c84     10 15 02 FB | 	rdlong	arg02, local02
23c88     24 20 86 F1 | 	sub	local02, #36
23c8c     14 15 02 F1 | 	add	arg02, local06
23c90     DC FC BF FD | 	call	#_fatfs_cc_move_window
23c94     00 FA 0D F2 | 	cmp	result1, #0 wz
23c98     20 00 90 5D |  if_ne	jmp	#LR__3687
23c9c     34 20 06 F1 | 	add	local02, #52
23ca0     02 1E 66 F0 | 	shl	local01, #2
23ca4     FF 1F 06 F5 | 	and	local01, #511
23ca8     0F 21 02 F1 | 	add	local02, local01
23cac                 | ' {
23cac                 | ' 
23cac                 | ' 	return *((DWORD*)ptr);
23cac     10 25 02 FB | 	rdlong	local04, local02
23cb0     7C 24 06 F4 | 	bitl	local04, #124
23cb4                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
23cb4                 | ' 			break;
23cb4     04 00 90 FD | 	jmp	#LR__3687
23cb8                 | LR__3686
23cb8     01 24 06 F6 | 	mov	local04, #1
23cbc                 | LR__3687
23cbc                 | LR__3688
23cbc                 | ' 			val = 1;
23cbc                 | ' 		}
23cbc                 | ' 	}
23cbc                 | ' 
23cbc                 | ' 	return val;
23cbc     12 FB 01 F6 | 	mov	result1, local04
23cc0     A7 F0 03 F6 | 	mov	ptra, fp
23cc4     B2 00 A0 FD | 	call	#popregs_
23cc8                 | _fatfs_cc_get_fat_ret
23cc8     2D 00 64 FD | 	ret
23ccc                 | 
23ccc                 | _fatfs_cc_put_fat
23ccc     08 4A 05 F6 | 	mov	COUNT_, #8
23cd0     A8 00 A0 FD | 	call	#pushregs_
23cd4     09 1F 02 F6 | 	mov	local01, arg01
23cd8     0A 21 02 F6 | 	mov	local02, arg02
23cdc     0B 23 02 F6 | 	mov	local03, arg03
23ce0     02 24 06 F6 | 	mov	local04, #2
23ce4     02 20 16 F2 | 	cmp	local02, #2 wc
23ce8     E0 01 90 CD |  if_b	jmp	#LR__3697
23cec     18 1E 06 F1 | 	add	local01, #24
23cf0     0F 27 02 FB | 	rdlong	local05, local01
23cf4     18 1E 86 F1 | 	sub	local01, #24
23cf8     13 21 12 F2 | 	cmp	local02, local05 wc
23cfc     CC 01 90 3D |  if_ae	jmp	#LR__3697
23d00                 | ' 		switch (fs->fs_type) {
23d00     0F 29 C2 FA | 	rdbyte	local06, local01
23d04     01 28 86 F1 | 	sub	local06, #1
23d08     03 28 26 F3 | 	fle	local06, #3
23d0c     30 28 62 FD | 	jmprel	local06
23d10                 | LR__3690
23d10     0C 00 90 FD | 	jmp	#LR__3691
23d14     F8 00 90 FD | 	jmp	#LR__3694
23d18     40 01 90 FD | 	jmp	#LR__3695
23d1c     AC 01 90 FD | 	jmp	#LR__3696
23d20                 | LR__3691
23d20     10 2B 02 F6 | 	mov	local07, local02
23d24     10 27 02 F6 | 	mov	local05, local02
23d28     01 26 46 F0 | 	shr	local05, #1
23d2c     13 2B 02 F1 | 	add	local07, local05
23d30     0F 13 02 F6 | 	mov	arg01, local01
23d34     15 29 02 F6 | 	mov	local06, local07
23d38     09 28 46 F0 | 	shr	local06, #9
23d3c     24 1E 06 F1 | 	add	local01, #36
23d40     0F 15 02 FB | 	rdlong	arg02, local01
23d44     24 1E 86 F1 | 	sub	local01, #36
23d48     14 15 02 F1 | 	add	arg02, local06
23d4c     20 FC BF FD | 	call	#_fatfs_cc_move_window
23d50     FD 24 0A F6 | 	mov	local04, result1 wz
23d54     74 01 90 5D |  if_ne	jmp	#LR__3696
23d58     34 1E 06 F1 | 	add	local01, #52
23d5c     0F 2D 02 F6 | 	mov	local08, local01
23d60     15 27 02 F6 | 	mov	local05, local07
23d64     FF 27 06 F5 | 	and	local05, #511
23d68     13 2D 02 F1 | 	add	local08, local05
23d6c     01 20 CE F7 | 	test	local02, #1 wz
23d70     34 1E 86 F1 | 	sub	local01, #52
23d74     01 2A 06 F1 | 	add	local07, #1
23d78     18 00 90 AD |  if_e	jmp	#LR__3692
23d7c     16 27 C2 FA | 	rdbyte	local05, local08
23d80     13 27 42 F8 | 	getnib	local05, local05, #0
23d84     11 29 E2 F8 | 	getbyte	local06, local03, #0
23d88     04 28 66 F0 | 	shl	local06, #4
23d8c     14 27 42 F5 | 	or	local05, local06
23d90     04 00 90 FD | 	jmp	#LR__3693
23d94                 | LR__3692
23d94     11 27 02 F6 | 	mov	local05, local03
23d98                 | LR__3693
23d98     16 27 42 FC | 	wrbyte	local05, local08
23d9c     03 1E 06 F1 | 	add	local01, #3
23da0     0F 03 48 FC | 	wrbyte	#1, local01
23da4     03 1E 86 F1 | 	sub	local01, #3
23da8     0F 13 02 F6 | 	mov	arg01, local01
23dac     15 2D 02 F6 | 	mov	local08, local07
23db0     09 2C 46 F0 | 	shr	local08, #9
23db4     24 1E 06 F1 | 	add	local01, #36
23db8     0F 15 02 FB | 	rdlong	arg02, local01
23dbc     24 1E 86 F1 | 	sub	local01, #36
23dc0     16 15 02 F1 | 	add	arg02, local08
23dc4     A8 FB BF FD | 	call	#_fatfs_cc_move_window
23dc8     FD 24 0A F6 | 	mov	local04, result1 wz
23dcc     FC 00 90 5D |  if_ne	jmp	#LR__3696
23dd0     34 1E 06 F1 | 	add	local01, #52
23dd4     0F 2D 02 F6 | 	mov	local08, local01
23dd8     FF 2B 06 F5 | 	and	local07, #511
23ddc     15 2D 02 F1 | 	add	local08, local07
23de0     01 20 CE F7 | 	test	local02, #1 wz
23de4     04 22 46 50 |  if_ne	shr	local03, #4
23de8     11 27 02 56 |  if_ne	mov	local05, local03
23dec     16 27 C2 AA |  if_e	rdbyte	local05, local08
23df0     F0 26 06 A5 |  if_e	and	local05, #240
23df4     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
23df8     11 23 42 A8 |  if_e	getnib	local03, local03, #0
23dfc     11 27 42 A5 |  if_e	or	local05, local03
23e00     16 27 42 FC | 	wrbyte	local05, local08
23e04     31 1E 86 F1 | 	sub	local01, #49
23e08     0F 03 48 FC | 	wrbyte	#1, local01
23e0c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
23e0c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
23e0c                 | ' 			fs->wflag = 1;
23e0c                 | ' 			break;
23e0c     BC 00 90 FD | 	jmp	#LR__3696
23e10                 | LR__3694
23e10     0F 13 02 F6 | 	mov	arg01, local01
23e14     10 2D 02 F6 | 	mov	local08, local02
23e18     08 2C 46 F0 | 	shr	local08, #8
23e1c     24 1E 06 F1 | 	add	local01, #36
23e20     0F 15 02 FB | 	rdlong	arg02, local01
23e24     24 1E 86 F1 | 	sub	local01, #36
23e28     16 15 02 F1 | 	add	arg02, local08
23e2c     40 FB BF FD | 	call	#_fatfs_cc_move_window
23e30     FD 24 0A F6 | 	mov	local04, result1 wz
23e34     94 00 90 5D |  if_ne	jmp	#LR__3696
23e38     34 1E 06 F1 | 	add	local01, #52
23e3c     0F 13 02 F6 | 	mov	arg01, local01
23e40     01 20 66 F0 | 	shl	local02, #1
23e44     FF 21 06 F5 | 	and	local02, #511
23e48     10 13 02 F1 | 	add	arg01, local02
23e4c     09 23 52 FC | 	wrword	local03, arg01
23e50     31 1E 86 F1 | 	sub	local01, #49
23e54     0F 03 48 FC | 	wrbyte	#1, local01
23e58                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
23e58                 | ' 			fs->wflag = 1;
23e58                 | ' 			break;
23e58     70 00 90 FD | 	jmp	#LR__3696
23e5c                 | LR__3695
23e5c     0F 13 02 F6 | 	mov	arg01, local01
23e60     10 2D 02 F6 | 	mov	local08, local02
23e64     07 2C 46 F0 | 	shr	local08, #7
23e68     24 1E 06 F1 | 	add	local01, #36
23e6c     0F 15 02 FB | 	rdlong	arg02, local01
23e70     24 1E 86 F1 | 	sub	local01, #36
23e74     16 15 02 F1 | 	add	arg02, local08
23e78     F4 FA BF FD | 	call	#_fatfs_cc_move_window
23e7c     FD 24 0A F6 | 	mov	local04, result1 wz
23e80     48 00 90 5D |  if_ne	jmp	#LR__3696
23e84     7C 22 06 F4 | 	bitl	local03, #124
23e88     34 1E 06 F1 | 	add	local01, #52
23e8c     10 2D 02 F6 | 	mov	local08, local02
23e90     02 2C 66 F0 | 	shl	local08, #2
23e94     FF 2D 06 F5 | 	and	local08, #511
23e98     0F 13 02 F6 | 	mov	arg01, local01
23e9c     16 13 02 F1 | 	add	arg01, local08
23ea0                 | ' {
23ea0                 | ' 
23ea0                 | ' 	return *((DWORD*)ptr);
23ea0     09 2D 02 FB | 	rdlong	local08, arg01
23ea4     00 00 78 FF 
23ea8     00 2C 06 F5 | 	and	local08, ##-268435456
23eac     16 23 42 F5 | 	or	local03, local08
23eb0     0F 13 02 F6 | 	mov	arg01, local01
23eb4     02 20 66 F0 | 	shl	local02, #2
23eb8     FF 21 06 F5 | 	and	local02, #511
23ebc     10 13 02 F1 | 	add	arg01, local02
23ec0     09 23 62 FC | 	wrlong	local03, arg01
23ec4     31 1E 86 F1 | 	sub	local01, #49
23ec8     0F 03 48 FC | 	wrbyte	#1, local01
23ecc                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
23ecc                 | ' 			}
23ecc                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
23ecc                 | ' 			fs->wflag = 1;
23ecc                 | ' 			break;
23ecc                 | LR__3696
23ecc                 | LR__3697
23ecc                 | ' 		}
23ecc                 | ' 	}
23ecc                 | ' 	return res;
23ecc     12 FB 01 F6 | 	mov	result1, local04
23ed0     A7 F0 03 F6 | 	mov	ptra, fp
23ed4     B2 00 A0 FD | 	call	#popregs_
23ed8                 | _fatfs_cc_put_fat_ret
23ed8     2D 00 64 FD | 	ret
23edc                 | 
23edc                 | _fatfs_cc_remove_chain
23edc     05 4A 05 F6 | 	mov	COUNT_, #5
23ee0     A8 00 A0 FD | 	call	#pushregs_
23ee4     09 1F 02 F6 | 	mov	local01, arg01
23ee8     0A 21 02 F6 | 	mov	local02, arg02
23eec     0B 23 02 F6 | 	mov	local03, arg03
23ef0     0F 25 02 FB | 	rdlong	local04, local01
23ef4     02 20 16 F2 | 	cmp	local02, #2 wc
23ef8     14 00 90 CD |  if_b	jmp	#LR__3700
23efc     18 24 06 F1 | 	add	local04, #24
23f00     12 FB 01 FB | 	rdlong	result1, local04
23f04     18 24 86 F1 | 	sub	local04, #24
23f08     FD 20 12 F2 | 	cmp	local02, result1 wc
23f0c     08 00 90 CD |  if_b	jmp	#LR__3701
23f10                 | LR__3700
23f10     02 FA 05 F6 | 	mov	result1, #2
23f14     CC 00 90 FD | 	jmp	#LR__3706
23f18                 | LR__3701
23f18     00 22 0E F2 | 	cmp	local03, #0 wz
23f1c     18 00 90 AD |  if_e	jmp	#LR__3702
23f20     11 15 02 F6 | 	mov	arg02, local03
23f24     12 13 02 F6 | 	mov	arg01, local04
23f28     01 16 66 F6 | 	neg	arg03, #1
23f2c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
23f30     00 FA 0D F2 | 	cmp	result1, #0 wz
23f34     AC 00 90 5D |  if_ne	jmp	#LR__3706
23f38                 | LR__3702
23f38                 | ' 	}
23f38                 | ' 
23f38                 | ' 
23f38                 | ' 	do {
23f38                 | LR__3703
23f38     10 15 02 F6 | 	mov	arg02, local02
23f3c     0F 13 02 F6 | 	mov	arg01, local01
23f40     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
23f44     FD 26 0A F6 | 	mov	local05, result1 wz
23f48     94 00 90 AD |  if_e	jmp	#LR__3705
23f4c     01 26 0E F2 | 	cmp	local05, #1 wz
23f50     02 FA 05 A6 |  if_e	mov	result1, #2
23f54     8C 00 90 AD |  if_e	jmp	#LR__3706
23f58     FF FF 7F FF 
23f5c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
23f60     01 FA 05 A6 |  if_e	mov	result1, #1
23f64     7C 00 90 AD |  if_e	jmp	#LR__3706
23f68     10 15 02 F6 | 	mov	arg02, local02
23f6c     12 13 02 F6 | 	mov	arg01, local04
23f70     00 16 06 F6 | 	mov	arg03, #0
23f74     54 FD BF FD | 	call	#_fatfs_cc_put_fat
23f78     FD 22 0A F6 | 	mov	local03, result1 wz
23f7c     11 FB 01 56 |  if_ne	mov	result1, local03
23f80     60 00 90 5D |  if_ne	jmp	#LR__3706
23f84     18 24 06 F1 | 	add	local04, #24
23f88     12 23 02 FB | 	rdlong	local03, local04
23f8c     02 22 86 F1 | 	sub	local03, #2
23f90     04 24 86 F1 | 	sub	local04, #4
23f94     12 21 02 FB | 	rdlong	local02, local04
23f98     14 24 86 F1 | 	sub	local04, #20
23f9c     11 21 12 F2 | 	cmp	local02, local03 wc
23fa0     24 00 90 3D |  if_ae	jmp	#LR__3704
23fa4     14 24 06 F1 | 	add	local04, #20
23fa8     12 23 02 FB | 	rdlong	local03, local04
23fac     01 22 06 F1 | 	add	local03, #1
23fb0     12 23 62 FC | 	wrlong	local03, local04
23fb4     10 24 86 F1 | 	sub	local04, #16
23fb8     12 23 C2 FA | 	rdbyte	local03, local04
23fbc     01 22 46 F5 | 	or	local03, #1
23fc0     12 23 42 FC | 	wrbyte	local03, local04
23fc4     04 24 86 F1 | 	sub	local04, #4
23fc8                 | LR__3704
23fc8     13 21 02 F6 | 	mov	local02, local05
23fcc     18 24 06 F1 | 	add	local04, #24
23fd0     12 27 02 FB | 	rdlong	local05, local04
23fd4     18 24 86 F1 | 	sub	local04, #24
23fd8     13 21 12 F2 | 	cmp	local02, local05 wc
23fdc     58 FF 9F CD |  if_b	jmp	#LR__3703
23fe0                 | LR__3705
23fe0                 | ' #line 1500 "ff.c"
23fe0                 | ' 	return FR_OK;
23fe0     00 FA 05 F6 | 	mov	result1, #0
23fe4                 | LR__3706
23fe4     A7 F0 03 F6 | 	mov	ptra, fp
23fe8     B2 00 A0 FD | 	call	#popregs_
23fec                 | _fatfs_cc_remove_chain_ret
23fec     2D 00 64 FD | 	ret
23ff0                 | 
23ff0                 | _fatfs_cc_create_chain
23ff0     09 4A 05 F6 | 	mov	COUNT_, #9
23ff4     A8 00 A0 FD | 	call	#pushregs_
23ff8     09 1F 02 F6 | 	mov	local01, arg01
23ffc     0A 21 0A F6 | 	mov	local02, arg02 wz
24000     0F 23 02 FB | 	rdlong	local03, local01
24004     28 00 90 5D |  if_ne	jmp	#LR__3710
24008     10 22 06 F1 | 	add	local03, #16
2400c     11 25 0A FB | 	rdlong	local04, local03 wz
24010     10 22 86 F1 | 	sub	local03, #16
24014     18 22 06 51 |  if_ne	add	local03, #24
24018     11 27 02 5B |  if_ne	rdlong	local05, local03
2401c     18 22 86 51 |  if_ne	sub	local03, #24
24020     13 25 12 52 |  if_ne	cmp	local04, local05 wc
24024     50 00 90 4D |  if_c_and_nz	jmp	#LR__3711
24028     01 24 06 F6 | 	mov	local04, #1
2402c     48 00 90 FD | 	jmp	#LR__3711
24030                 | LR__3710
24030     10 15 02 F6 | 	mov	arg02, local02
24034     0F 13 02 F6 | 	mov	arg01, local01
24038     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2403c     FD 24 02 F6 | 	mov	local04, result1
24040     02 24 16 F2 | 	cmp	local04, #2 wc
24044     01 FA 05 C6 |  if_b	mov	result1, #1
24048     BC 01 90 CD |  if_b	jmp	#LR__3721
2404c     FF FF 7F FF 
24050     FF 25 0E F2 | 	cmp	local04, ##-1 wz
24054     12 FB 01 A6 |  if_e	mov	result1, local04
24058     AC 01 90 AD |  if_e	jmp	#LR__3721
2405c     18 22 06 F1 | 	add	local03, #24
24060     11 27 02 FB | 	rdlong	local05, local03
24064     18 22 86 F1 | 	sub	local03, #24
24068     13 25 12 F2 | 	cmp	local04, local05 wc
2406c     12 FB 01 C6 |  if_b	mov	result1, local04
24070     94 01 90 CD |  if_b	jmp	#LR__3721
24074     10 25 02 F6 | 	mov	local04, local02
24078                 | LR__3711
24078     14 22 06 F1 | 	add	local03, #20
2407c     11 27 0A FB | 	rdlong	local05, local03 wz
24080     14 22 86 F1 | 	sub	local03, #20
24084     00 FA 05 A6 |  if_e	mov	result1, #0
24088     7C 01 90 AD |  if_e	jmp	#LR__3721
2408c     00 28 06 F6 | 	mov	local06, #0
24090     10 25 0A F2 | 	cmp	local04, local02 wz
24094     74 00 90 5D |  if_ne	jmp	#LR__3714
24098     12 29 02 F6 | 	mov	local06, local04
2409c     01 28 06 F1 | 	add	local06, #1
240a0     18 22 06 F1 | 	add	local03, #24
240a4     11 27 02 FB | 	rdlong	local05, local03
240a8     18 22 86 F1 | 	sub	local03, #24
240ac     13 29 12 F2 | 	cmp	local06, local05 wc
240b0     02 28 06 36 |  if_ae	mov	local06, #2
240b4     14 15 02 F6 | 	mov	arg02, local06
240b8     0F 13 02 F6 | 	mov	arg01, local01
240bc     68 FA BF FD | 	call	#_fatfs_cc_get_fat
240c0     FD 26 02 F6 | 	mov	local05, result1
240c4     01 26 0E F2 | 	cmp	local05, #1 wz
240c8     FF FF 7F 5F 
240cc     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
240d0     13 FB 01 A6 |  if_e	mov	result1, local05
240d4     30 01 90 AD |  if_e	jmp	#LR__3721
240d8     00 26 0E F2 | 	cmp	local05, #0 wz
240dc     2C 00 90 AD |  if_e	jmp	#LR__3713
240e0     10 22 06 F1 | 	add	local03, #16
240e4     11 2B 02 FB | 	rdlong	local07, local03
240e8     10 22 86 F1 | 	sub	local03, #16
240ec     02 2A 16 F2 | 	cmp	local07, #2 wc
240f0     14 00 90 CD |  if_b	jmp	#LR__3712
240f4     18 22 06 F1 | 	add	local03, #24
240f8     11 27 02 FB | 	rdlong	local05, local03
240fc     18 22 86 F1 | 	sub	local03, #24
24100     13 2B 12 F2 | 	cmp	local07, local05 wc
24104     15 25 02 C6 |  if_b	mov	local04, local07
24108                 | LR__3712
24108     00 28 06 F6 | 	mov	local06, #0
2410c                 | LR__3713
2410c                 | LR__3714
2410c     00 28 0E F2 | 	cmp	local06, #0 wz
24110     60 00 90 5D |  if_ne	jmp	#LR__3717
24114     12 29 02 F6 | 	mov	local06, local04
24118                 | ' 			ncl = scl;
24118                 | ' 			for (;;) {
24118                 | LR__3715
24118     01 28 06 F1 | 	add	local06, #1
2411c     18 22 06 F1 | 	add	local03, #24
24120     11 27 02 FB | 	rdlong	local05, local03
24124     18 22 86 F1 | 	sub	local03, #24
24128     13 29 12 F2 | 	cmp	local06, local05 wc
2412c     02 28 06 36 |  if_ae	mov	local06, #2
24130     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
24134     00 FA 05 16 |  if_a	mov	result1, #0
24138     CC 00 90 1D |  if_a	jmp	#LR__3721
2413c     14 15 02 F6 | 	mov	arg02, local06
24140     0F 13 02 F6 | 	mov	arg01, local01
24144     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
24148     FD 2A 0A F6 | 	mov	local07, result1 wz
2414c     24 00 90 AD |  if_e	jmp	#LR__3716
24150     01 2A 0E F2 | 	cmp	local07, #1 wz
24154     FF FF 7F 5F 
24158     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
2415c     15 FB 01 A6 |  if_e	mov	result1, local07
24160     A4 00 90 AD |  if_e	jmp	#LR__3721
24164     12 29 0A F2 | 	cmp	local06, local04 wz
24168     00 FA 05 A6 |  if_e	mov	result1, #0
2416c     98 00 90 AD |  if_e	jmp	#LR__3721
24170     A4 FF 9F FD | 	jmp	#LR__3715
24174                 | LR__3716
24174                 | LR__3717
24174     11 13 02 F6 | 	mov	arg01, local03
24178     14 15 02 F6 | 	mov	arg02, local06
2417c     01 16 66 F6 | 	neg	arg03, #1
24180     48 FB BF FD | 	call	#_fatfs_cc_put_fat
24184     FD 2C 0A F6 | 	mov	local08, result1 wz
24188     1C 00 90 5D |  if_ne	jmp	#LR__3718
2418c     00 20 0E F2 | 	cmp	local02, #0 wz
24190     14 00 90 AD |  if_e	jmp	#LR__3718
24194     11 13 02 F6 | 	mov	arg01, local03
24198     10 15 02 F6 | 	mov	arg02, local02
2419c     14 17 02 F6 | 	mov	arg03, local06
241a0     28 FB BF FD | 	call	#_fatfs_cc_put_fat
241a4     FD 2C 02 F6 | 	mov	local08, result1
241a8                 | LR__3718
241a8     00 2C 0E F2 | 	cmp	local08, #0 wz
241ac     4C 00 90 5D |  if_ne	jmp	#LR__3719
241b0     10 22 06 F1 | 	add	local03, #16
241b4     11 29 62 FC | 	wrlong	local06, local03
241b8     08 22 06 F1 | 	add	local03, #8
241bc     11 27 02 FB | 	rdlong	local05, local03
241c0     02 26 86 F1 | 	sub	local05, #2
241c4     04 22 86 F1 | 	sub	local03, #4
241c8     11 2F 02 FB | 	rdlong	local09, local03
241cc     14 22 86 F1 | 	sub	local03, #20
241d0     13 2F 1A F2 | 	cmp	local09, local05 wcz
241d4     14 22 06 E1 |  if_be	add	local03, #20
241d8     11 2F 02 EB |  if_be	rdlong	local09, local03
241dc     01 2E 86 E1 |  if_be	sub	local09, #1
241e0     11 2F 62 EC |  if_be	wrlong	local09, local03
241e4     14 22 86 E1 |  if_be	sub	local03, #20
241e8     04 22 06 F1 | 	add	local03, #4
241ec     11 27 C2 FA | 	rdbyte	local05, local03
241f0     01 26 46 F5 | 	or	local05, #1
241f4     11 27 42 FC | 	wrbyte	local05, local03
241f8     08 00 90 FD | 	jmp	#LR__3720
241fc                 | LR__3719
241fc     01 2C 0E F2 | 	cmp	local08, #1 wz
24200     01 28 C6 F6 | 	negz	local06, #1
24204                 | LR__3720
24204                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
24204                 | ' 	}
24204                 | ' 
24204                 | ' 	return ncl;
24204     14 FB 01 F6 | 	mov	result1, local06
24208                 | LR__3721
24208     A7 F0 03 F6 | 	mov	ptra, fp
2420c     B2 00 A0 FD | 	call	#popregs_
24210                 | _fatfs_cc_create_chain_ret
24210     2D 00 64 FD | 	ret
24214                 | 
24214                 | _fatfs_cc_dir_clear
24214     06 4A 05 F6 | 	mov	COUNT_, #6
24218     A8 00 A0 FD | 	call	#pushregs_
2421c     09 1F 02 F6 | 	mov	local01, arg01
24220     0A 21 02 F6 | 	mov	local02, arg02
24224     0F 13 02 F6 | 	mov	arg01, local01
24228     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2422c     00 FA 0D F2 | 	cmp	result1, #0 wz
24230     01 FA 05 56 |  if_ne	mov	result1, #1
24234     90 00 90 5D |  if_ne	jmp	#LR__3732
24238     0F 13 02 F6 | 	mov	arg01, local01
2423c     10 15 02 F6 | 	mov	arg02, local02
24240     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
24244     FD 22 02 F6 | 	mov	local03, result1
24248     30 1E 06 F1 | 	add	local01, #48
2424c     0F 23 62 FC | 	wrlong	local03, local01
24250     04 1E 06 F1 | 	add	local01, #4
24254     0F 13 02 F6 | 	mov	arg01, local01
24258     00 14 06 F6 | 	mov	arg02, #0
2425c     09 16 C6 F9 | 	decod	arg03, #9
24260     98 00 A0 FD | 	call	#\builtin_bytefill_
24264     0F 25 02 F6 | 	mov	local04, local01
24268                 | ' #line 1667 "ff.c"
24268                 | ' 	{
24268                 | ' 		ibuf = fs->win; szb = 1;
24268                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
24268     00 26 06 F6 | 	mov	local05, #0
2426c     34 1E 86 F1 | 	sub	local01, #52
24270                 | LR__3730
24270     0A 1E 06 F1 | 	add	local01, #10
24274     0F 29 E2 FA | 	rdword	local06, local01
24278     0A 1E 86 F1 | 	sub	local01, #10
2427c     14 27 12 F2 | 	cmp	local05, local06 wc
24280     2C 00 90 3D |  if_ae	jmp	#LR__3731
24284     01 1E 06 F1 | 	add	local01, #1
24288     0F 13 C2 FA | 	rdbyte	arg01, local01
2428c     01 1E 86 F1 | 	sub	local01, #1
24290     12 15 02 F6 | 	mov	arg02, local04
24294     11 17 02 F6 | 	mov	arg03, local03
24298     13 17 02 F1 | 	add	arg03, local05
2429c     01 18 06 F6 | 	mov	arg04, #1
242a0     9C EF BF FD | 	call	#_fatfs_cc_disk_write
242a4     00 FA 0D F2 | 	cmp	result1, #0 wz
242a8     01 26 06 A1 |  if_e	add	local05, #1
242ac     C0 FF 9F AD |  if_e	jmp	#LR__3730
242b0                 | LR__3731
242b0                 | ' 	}
242b0                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
242b0     0A 1E 06 F1 | 	add	local01, #10
242b4     0F 25 E2 FA | 	rdword	local04, local01
242b8     12 27 0A F2 | 	cmp	local05, local04 wz
242bc     00 28 06 A6 |  if_e	mov	local06, #0
242c0     01 28 06 56 |  if_ne	mov	local06, #1
242c4     14 FB 01 F6 | 	mov	result1, local06
242c8                 | LR__3732
242c8     A7 F0 03 F6 | 	mov	ptra, fp
242cc     B2 00 A0 FD | 	call	#popregs_
242d0                 | _fatfs_cc_dir_clear_ret
242d0     2D 00 64 FD | 	ret
242d4                 | 
242d4                 | _fatfs_cc_dir_sdi
242d4     06 4A 05 F6 | 	mov	COUNT_, #6
242d8     A8 00 A0 FD | 	call	#pushregs_
242dc     09 1F 02 F6 | 	mov	local01, arg01
242e0     0A 21 02 F6 | 	mov	local02, arg02
242e4     0F 23 02 FB | 	rdlong	local03, local01
242e8     00 10 00 FF 
242ec     00 20 16 F2 | 	cmp	local02, ##2097152 wc
242f0     1F 20 CE C7 |  if_b	test	local02, #31 wz
242f4                 | ' 		return FR_INT_ERR;
242f4     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
242f8     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3746
242fc     10 1E 06 F1 | 	add	local01, #16
24300     0F 21 62 FC | 	wrlong	local02, local01
24304     08 1E 86 F1 | 	sub	local01, #8
24308     0F 25 0A FB | 	rdlong	local04, local01 wz
2430c     08 1E 86 F1 | 	sub	local01, #8
24310     11 27 C2 AA |  if_e	rdbyte	local05, local03
24314     03 26 16 A2 |  if_e	cmp	local05, #3 wc
24318     28 22 06 21 |  if_nc_and_z	add	local03, #40
2431c     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
24320     28 22 86 21 |  if_nc_and_z	sub	local03, #40
24324     00 24 0E F2 | 	cmp	local04, #0 wz
24328     3C 00 90 5D |  if_ne	jmp	#LR__3740
2432c     10 27 02 F6 | 	mov	local05, local02
24330     05 26 46 F0 | 	shr	local05, #5
24334     08 22 06 F1 | 	add	local03, #8
24338     11 15 E2 FA | 	rdword	arg02, local03
2433c     08 22 86 F1 | 	sub	local03, #8
24340     0A 27 12 F2 | 	cmp	local05, arg02 wc
24344     02 FA 05 36 |  if_ae	mov	result1, #2
24348     E4 00 90 3D |  if_ae	jmp	#LR__3746
2434c     28 22 06 F1 | 	add	local03, #40
24350     11 27 02 FB | 	rdlong	local05, local03
24354     28 22 86 F1 | 	sub	local03, #40
24358     18 1E 06 F1 | 	add	local01, #24
2435c     0F 27 62 FC | 	wrlong	local05, local01
24360     18 1E 86 F1 | 	sub	local01, #24
24364     7C 00 90 FD | 	jmp	#LR__3745
24368                 | LR__3740
24368     0A 22 06 F1 | 	add	local03, #10
2436c     11 29 E2 FA | 	rdword	local06, local03
24370     0A 22 86 F1 | 	sub	local03, #10
24374     09 28 66 F0 | 	shl	local06, #9
24378                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
24378                 | ' 		while (ofs >= csz) {
24378                 | LR__3741
24378     14 21 12 F2 | 	cmp	local02, local06 wc
2437c     4C 00 90 CD |  if_b	jmp	#LR__3744
24380     0F 13 02 F6 | 	mov	arg01, local01
24384     12 15 02 F6 | 	mov	arg02, local04
24388     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2438c     FD 24 02 F6 | 	mov	local04, result1
24390     FF FF 7F FF 
24394     FF 25 0E F2 | 	cmp	local04, ##-1 wz
24398     01 FA 05 A6 |  if_e	mov	result1, #1
2439c     90 00 90 AD |  if_e	jmp	#LR__3746
243a0     02 24 16 F2 | 	cmp	local04, #2 wc
243a4     14 00 90 CD |  if_b	jmp	#LR__3742
243a8     18 22 06 F1 | 	add	local03, #24
243ac     11 27 02 FB | 	rdlong	local05, local03
243b0     18 22 86 F1 | 	sub	local03, #24
243b4     13 25 12 F2 | 	cmp	local04, local05 wc
243b8     08 00 90 CD |  if_b	jmp	#LR__3743
243bc                 | LR__3742
243bc     02 FA 05 F6 | 	mov	result1, #2
243c0     6C 00 90 FD | 	jmp	#LR__3746
243c4                 | LR__3743
243c4     14 21 82 F1 | 	sub	local02, local06
243c8     AC FF 9F FD | 	jmp	#LR__3741
243cc                 | LR__3744
243cc     11 13 02 F6 | 	mov	arg01, local03
243d0     12 15 02 F6 | 	mov	arg02, local04
243d4     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
243d8     18 1E 06 F1 | 	add	local01, #24
243dc     0F FB 61 FC | 	wrlong	result1, local01
243e0     18 1E 86 F1 | 	sub	local01, #24
243e4                 | LR__3745
243e4     14 1E 06 F1 | 	add	local01, #20
243e8     0F 25 62 FC | 	wrlong	local04, local01
243ec     04 1E 06 F1 | 	add	local01, #4
243f0     0F 27 0A FB | 	rdlong	local05, local01 wz
243f4     18 1E 86 F1 | 	sub	local01, #24
243f8     02 FA 05 A6 |  if_e	mov	result1, #2
243fc     30 00 90 AD |  if_e	jmp	#LR__3746
24400     10 29 02 F6 | 	mov	local06, local02
24404     09 28 46 F0 | 	shr	local06, #9
24408     18 1E 06 F1 | 	add	local01, #24
2440c     0F 27 02 FB | 	rdlong	local05, local01
24410     14 27 02 F1 | 	add	local05, local06
24414     0F 27 62 FC | 	wrlong	local05, local01
24418     34 22 06 F1 | 	add	local03, #52
2441c     FF 21 06 F5 | 	and	local02, #511
24420     10 23 02 F1 | 	add	local03, local02
24424     04 1E 06 F1 | 	add	local01, #4
24428     0F 23 62 FC | 	wrlong	local03, local01
2442c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2442c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2442c                 | ' 
2442c                 | ' 	return FR_OK;
2442c     00 FA 05 F6 | 	mov	result1, #0
24430                 | LR__3746
24430     A7 F0 03 F6 | 	mov	ptra, fp
24434     B2 00 A0 FD | 	call	#popregs_
24438                 | _fatfs_cc_dir_sdi_ret
24438     2D 00 64 FD | 	ret
2443c                 | 
2443c                 | _fatfs_cc_dir_next
2443c     05 4A 05 F6 | 	mov	COUNT_, #5
24440     A8 00 A0 FD | 	call	#pushregs_
24444     09 1F 02 F6 | 	mov	local01, arg01
24448     0A 21 02 F6 | 	mov	local02, arg02
2444c     0F 23 02 FB | 	rdlong	local03, local01
24450     10 1E 06 F1 | 	add	local01, #16
24454     0F 25 02 FB | 	rdlong	local04, local01
24458     10 1E 86 F1 | 	sub	local01, #16
2445c     20 24 06 F1 | 	add	local04, #32
24460     00 10 00 FF 
24464     00 24 16 F2 | 	cmp	local04, ##2097152 wc
24468     18 1E 06 31 |  if_ae	add	local01, #24
2446c     0F 01 68 3C |  if_ae	wrlong	#0, local01
24470     18 1E 86 31 |  if_ae	sub	local01, #24
24474     18 1E 06 F1 | 	add	local01, #24
24478     0F 15 0A FB | 	rdlong	arg02, local01 wz
2447c     18 1E 86 F1 | 	sub	local01, #24
24480     04 FA 05 A6 |  if_e	mov	result1, #4
24484     64 01 90 AD |  if_e	jmp	#LR__3755
24488     FF 25 CE F7 | 	test	local04, #511 wz
2448c     3C 01 90 5D |  if_ne	jmp	#LR__3754
24490     18 1E 06 F1 | 	add	local01, #24
24494     0F 15 02 FB | 	rdlong	arg02, local01
24498     01 14 06 F1 | 	add	arg02, #1
2449c     0F 15 62 FC | 	wrlong	arg02, local01
244a0     04 1E 86 F1 | 	sub	local01, #4
244a4     0F 15 0A FB | 	rdlong	arg02, local01 wz
244a8     14 1E 86 F1 | 	sub	local01, #20
244ac     2C 00 90 5D |  if_ne	jmp	#LR__3750
244b0     12 15 02 F6 | 	mov	arg02, local04
244b4     05 14 46 F0 | 	shr	arg02, #5
244b8     08 22 06 F1 | 	add	local03, #8
244bc     11 21 E2 FA | 	rdword	local02, local03
244c0     08 22 86 F1 | 	sub	local03, #8
244c4     10 15 12 F2 | 	cmp	arg02, local02 wc
244c8     18 1E 06 31 |  if_ae	add	local01, #24
244cc     0F 01 68 3C |  if_ae	wrlong	#0, local01
244d0                 | ' 				dp->sect = 0; return FR_NO_FILE;
244d0     04 FA 05 36 |  if_ae	mov	result1, #4
244d4     14 01 90 3D |  if_ae	jmp	#LR__3755
244d8     F0 00 90 FD | 	jmp	#LR__3753
244dc                 | LR__3750
244dc     12 13 02 F6 | 	mov	arg01, local04
244e0     09 12 46 F0 | 	shr	arg01, #9
244e4     0A 22 06 F1 | 	add	local03, #10
244e8     11 15 E2 FA | 	rdword	arg02, local03
244ec     0A 22 86 F1 | 	sub	local03, #10
244f0     01 14 86 F1 | 	sub	arg02, #1
244f4     0A 13 CA F7 | 	test	arg01, arg02 wz
244f8     D0 00 90 5D |  if_ne	jmp	#LR__3752
244fc     0F 13 02 F6 | 	mov	arg01, local01
24500     14 1E 06 F1 | 	add	local01, #20
24504     0F 15 02 FB | 	rdlong	arg02, local01
24508     14 1E 86 F1 | 	sub	local01, #20
2450c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
24510     FD 26 02 F6 | 	mov	local05, result1
24514     02 26 16 F2 | 	cmp	local05, #2 wc
24518     02 FA 05 C6 |  if_b	mov	result1, #2
2451c     CC 00 90 CD |  if_b	jmp	#LR__3755
24520     FF FF 7F FF 
24524     FF 27 0E F2 | 	cmp	local05, ##-1 wz
24528     01 FA 05 A6 |  if_e	mov	result1, #1
2452c     BC 00 90 AD |  if_e	jmp	#LR__3755
24530     18 22 06 F1 | 	add	local03, #24
24534     11 15 02 FB | 	rdlong	arg02, local03
24538     18 22 86 F1 | 	sub	local03, #24
2453c     0A 27 12 F2 | 	cmp	local05, arg02 wc
24540     68 00 90 CD |  if_b	jmp	#LR__3751
24544     00 20 0E F2 | 	cmp	local02, #0 wz
24548     18 1E 06 A1 |  if_e	add	local01, #24
2454c     0F 01 68 AC |  if_e	wrlong	#0, local01
24550                 | ' 						dp->sect = 0; return FR_NO_FILE;
24550     04 FA 05 A6 |  if_e	mov	result1, #4
24554     94 00 90 AD |  if_e	jmp	#LR__3755
24558     0F 13 02 F6 | 	mov	arg01, local01
2455c     14 1E 06 F1 | 	add	local01, #20
24560     0F 15 02 FB | 	rdlong	arg02, local01
24564     14 1E 86 F1 | 	sub	local01, #20
24568     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2456c     FD 26 0A F6 | 	mov	local05, result1 wz
24570     07 FA 05 A6 |  if_e	mov	result1, #7
24574     74 00 90 AD |  if_e	jmp	#LR__3755
24578     01 26 0E F2 | 	cmp	local05, #1 wz
2457c     02 FA 05 A6 |  if_e	mov	result1, #2
24580     68 00 90 AD |  if_e	jmp	#LR__3755
24584     FF FF 7F FF 
24588     FF 27 0E F2 | 	cmp	local05, ##-1 wz
2458c     01 FA 05 A6 |  if_e	mov	result1, #1
24590     58 00 90 AD |  if_e	jmp	#LR__3755
24594     13 15 02 F6 | 	mov	arg02, local05
24598     11 13 02 F6 | 	mov	arg01, local03
2459c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
245a0     00 FA 0D F2 | 	cmp	result1, #0 wz
245a4     01 FA 05 56 |  if_ne	mov	result1, #1
245a8     40 00 90 5D |  if_ne	jmp	#LR__3755
245ac                 | LR__3751
245ac     14 1E 06 F1 | 	add	local01, #20
245b0     0F 27 62 FC | 	wrlong	local05, local01
245b4     11 13 02 F6 | 	mov	arg01, local03
245b8     13 15 02 F6 | 	mov	arg02, local05
245bc     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
245c0     04 1E 06 F1 | 	add	local01, #4
245c4     0F FB 61 FC | 	wrlong	result1, local01
245c8     18 1E 86 F1 | 	sub	local01, #24
245cc                 | LR__3752
245cc                 | LR__3753
245cc                 | LR__3754
245cc     10 1E 06 F1 | 	add	local01, #16
245d0     0F 25 62 FC | 	wrlong	local04, local01
245d4     34 22 06 F1 | 	add	local03, #52
245d8     FF 25 06 F5 | 	and	local04, #511
245dc     12 23 02 F1 | 	add	local03, local04
245e0     0C 1E 06 F1 | 	add	local01, #12
245e4     0F 23 62 FC | 	wrlong	local03, local01
245e8                 | ' #line 1771 "ff.c"
245e8                 | ' 				}
245e8                 | ' 				dp->clust = clst;
245e8                 | ' 				dp->sect = clst2sect(fs, clst);
245e8                 | ' 			}
245e8                 | ' 		}
245e8                 | ' 	}
245e8                 | ' 	dp->dptr = ofs;
245e8                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
245e8                 | ' 
245e8                 | ' 	return FR_OK;
245e8     00 FA 05 F6 | 	mov	result1, #0
245ec                 | LR__3755
245ec     A7 F0 03 F6 | 	mov	ptra, fp
245f0     B2 00 A0 FD | 	call	#popregs_
245f4                 | _fatfs_cc_dir_next_ret
245f4     2D 00 64 FD | 	ret
245f8                 | 
245f8                 | _fatfs_cc_dir_alloc
245f8     08 4A 05 F6 | 	mov	COUNT_, #8
245fc     A8 00 A0 FD | 	call	#pushregs_
24600     09 1F 02 F6 | 	mov	local01, arg01
24604     0A 21 02 F6 | 	mov	local02, arg02
24608     0F 23 02 FB | 	rdlong	local03, local01
2460c     0F 13 02 F6 | 	mov	arg01, local01
24610     00 14 06 F6 | 	mov	arg02, #0
24614     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
24618     FD 24 0A F6 | 	mov	local04, result1 wz
2461c     70 00 90 5D |  if_ne	jmp	#LR__3764
24620     00 26 06 F6 | 	mov	local05, #0
24624                 | ' 		n = 0;
24624                 | ' 		do {
24624                 | LR__3760
24624     18 1E 06 F1 | 	add	local01, #24
24628     0F 15 02 FB | 	rdlong	arg02, local01
2462c     18 1E 86 F1 | 	sub	local01, #24
24630     11 13 02 F6 | 	mov	arg01, local03
24634     38 F3 BF FD | 	call	#_fatfs_cc_move_window
24638     FD 24 0A F6 | 	mov	local04, result1 wz
2463c     50 00 90 5D |  if_ne	jmp	#LR__3763
24640     1C 1E 06 F1 | 	add	local01, #28
24644     0F 29 02 FB | 	rdlong	local06, local01
24648     1C 1E 86 F1 | 	sub	local01, #28
2464c     14 29 C2 FA | 	rdbyte	local06, local06
24650     E5 28 0E F2 | 	cmp	local06, #229 wz
24654     1C 1E 06 51 |  if_ne	add	local01, #28
24658     0F 2B 02 5B |  if_ne	rdlong	local07, local01
2465c     1C 1E 86 51 |  if_ne	sub	local01, #28
24660     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
24664     10 00 90 5D |  if_ne	jmp	#LR__3761
24668     01 26 06 F1 | 	add	local05, #1
2466c     10 27 0A F2 | 	cmp	local05, local02 wz
24670     1C 00 90 AD |  if_e	jmp	#LR__3763
24674     04 00 90 FD | 	jmp	#LR__3762
24678                 | LR__3761
24678     00 26 06 F6 | 	mov	local05, #0
2467c                 | LR__3762
2467c     0F 13 02 F6 | 	mov	arg01, local01
24680     01 14 06 F6 | 	mov	arg02, #1
24684     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
24688     FD 24 0A F6 | 	mov	local04, result1 wz
2468c     94 FF 9F AD |  if_e	jmp	#LR__3760
24690                 | LR__3763
24690                 | LR__3764
24690     04 24 0E F2 | 	cmp	local04, #4 wz
24694     07 24 06 A6 |  if_e	mov	local04, #7
24698                 | ' 	return res;
24698     12 FB 01 F6 | 	mov	result1, local04
2469c     A7 F0 03 F6 | 	mov	ptra, fp
246a0     B2 00 A0 FD | 	call	#popregs_
246a4                 | _fatfs_cc_dir_alloc_ret
246a4     2D 00 64 FD | 	ret
246a8                 | 
246a8                 | _fatfs_cc_ld_clust
246a8     09 01 02 F6 | 	mov	_var01, arg01
246ac     0A 13 02 F6 | 	mov	arg01, arg02
246b0     1A 12 06 F1 | 	add	arg01, #26
246b4                 | ' {
246b4                 | ' 
246b4                 | ' 	return *((WORD*)ptr);
246b4     09 FB E1 FA | 	rdword	result1, arg01
246b8     FD 12 32 F9 | 	getword	arg01, result1, #0
246bc     00 01 C2 FA | 	rdbyte	_var01, _var01
246c0     03 00 0E F2 | 	cmp	_var01, #3 wz
246c4     14 14 06 A1 |  if_e	add	arg02, #20
246c8                 | ' {
246c8                 | ' 
246c8                 | ' 	return *((WORD*)ptr);
246c8     0A FB E1 AA |  if_e	rdword	result1, arg02
246cc     10 FA 65 A0 |  if_e	shl	result1, #16
246d0     FD 12 42 A5 |  if_e	or	arg01, result1
246d4                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
246d4                 | ' 	}
246d4                 | ' 
246d4                 | ' 	return cl;
246d4     09 FB 01 F6 | 	mov	result1, arg01
246d8                 | _fatfs_cc_ld_clust_ret
246d8     2D 00 64 FD | 	ret
246dc                 | 
246dc                 | _fatfs_cc_st_clust
246dc     09 01 02 F6 | 	mov	_var01, arg01
246e0     0A 13 02 F6 | 	mov	arg01, arg02
246e4     1A 12 06 F1 | 	add	arg01, #26
246e8     09 17 52 FC | 	wrword	arg03, arg01
246ec     00 01 C2 FA | 	rdbyte	_var01, _var01
246f0     03 00 0E F2 | 	cmp	_var01, #3 wz
246f4     14 14 06 A1 |  if_e	add	arg02, #20
246f8     10 16 46 A0 |  if_e	shr	arg03, #16
246fc     0A 17 52 AC |  if_e	wrword	arg03, arg02
24700                 | _fatfs_cc_st_clust_ret
24700     2D 00 64 FD | 	ret
24704                 | 
24704                 | _fatfs_cc_cmp_lfn
24704     07 4A 05 F6 | 	mov	COUNT_, #7
24708     A8 00 A0 FD | 	call	#pushregs_
2470c     09 1F 02 F6 | 	mov	local01, arg01
24710     0A 13 02 F6 | 	mov	arg01, arg02
24714     1A 12 06 F1 | 	add	arg01, #26
24718                 | ' {
24718                 | ' 
24718                 | ' 	return *((WORD*)ptr);
24718     09 FB E9 FA | 	rdword	result1, arg01 wz
2471c     00 FA 05 56 |  if_ne	mov	result1, #0
24720     E0 00 90 5D |  if_ne	jmp	#LR__3776
24724     0A 21 C2 FA | 	rdbyte	local02, arg02
24728     3F 20 06 F5 | 	and	local02, #63
2472c     01 20 86 F1 | 	sub	local02, #1
24730     0D 20 06 FD | 	qmul	local02, #13
24734                 | ' 
24734                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
24734                 | ' 
24734                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
24734     01 22 06 F6 | 	mov	local03, #1
24738     00 24 06 F6 | 	mov	local04, #0
2473c     18 26 62 FD | 	getqx	local05
24740                 | LR__3770
24740     0D 24 16 F2 | 	cmp	local04, #13 wc
24744     9C 00 90 3D |  if_ae	jmp	#LR__3775
24748     0A 13 02 F6 | 	mov	arg01, arg02
2474c     12 21 02 F6 | 	mov	local02, local04
24750     01 00 00 FF 
24754     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
24758     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2475c     10 21 C2 FA | 	rdbyte	local02, local02
24760     01 20 06 FA | 	mul	local02, #1
24764     10 13 02 F1 | 	add	arg01, local02
24768     01 00 00 FF 
2476c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
24770                 | ' {
24770                 | ' 
24770                 | ' 	return *((WORD*)ptr);
24770     09 FB E1 FA | 	rdword	result1, arg01
24774     FD 28 02 F6 | 	mov	local06, result1
24778     11 21 02 F6 | 	mov	local02, local03
2477c     0F 20 4E F7 | 	zerox	local02, #15 wz
24780     44 00 90 AD |  if_e	jmp	#LR__3773
24784     00 27 16 F2 | 	cmp	local05, #256 wc
24788     2C 00 90 3D |  if_ae	jmp	#LR__3771
2478c     14 13 32 F9 | 	getword	arg01, local06, #0
24790     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
24794     FD 20 02 F6 | 	mov	local02, result1
24798     13 23 02 F6 | 	mov	local03, local05
2479c     01 22 66 F0 | 	shl	local03, #1
247a0     0F 23 02 F1 | 	add	local03, local01
247a4     11 13 E2 FA | 	rdword	arg01, local03
247a8     01 26 06 F1 | 	add	local05, #1
247ac     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
247b0     FD 20 0A F2 | 	cmp	local02, result1 wz
247b4     08 00 90 AD |  if_e	jmp	#LR__3772
247b8                 | LR__3771
247b8                 | ' 				return 0;
247b8     00 FA 05 F6 | 	mov	result1, #0
247bc     44 00 90 FD | 	jmp	#LR__3776
247c0                 | LR__3772
247c0     14 23 02 F6 | 	mov	local03, local06
247c4     14 00 90 FD | 	jmp	#LR__3774
247c8                 | LR__3773
247c8     14 29 32 F9 | 	getword	local06, local06, #0
247cc     7F 00 00 FF 
247d0     FF 29 0E F2 | 	cmp	local06, ##65535 wz
247d4     00 FA 05 56 |  if_ne	mov	result1, #0
247d8     28 00 90 5D |  if_ne	jmp	#LR__3776
247dc                 | LR__3774
247dc     01 24 06 F1 | 	add	local04, #1
247e0     5C FF 9F FD | 	jmp	#LR__3770
247e4                 | LR__3775
247e4     0A 21 C2 FA | 	rdbyte	local02, arg02
247e8     40 20 CE F7 | 	test	local02, #64 wz
247ec     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
247f0     01 26 66 50 |  if_ne	shl	local05, #1
247f4     0F 27 02 51 |  if_ne	add	local05, local01
247f8     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
247fc     00 FA 05 56 |  if_ne	mov	result1, #0
24800                 | ' 
24800                 | ' 	return 1;
24800     01 FA 05 A6 |  if_e	mov	result1, #1
24804                 | LR__3776
24804     A7 F0 03 F6 | 	mov	ptra, fp
24808     B2 00 A0 FD | 	call	#popregs_
2480c                 | _fatfs_cc_cmp_lfn_ret
2480c     2D 00 64 FD | 	ret
24810                 | 
24810                 | _fatfs_cc_pick_lfn
24810     09 01 02 F6 | 	mov	_var01, arg01
24814     0A 13 02 F6 | 	mov	arg01, arg02
24818     1A 12 06 F1 | 	add	arg01, #26
2481c                 | ' {
2481c                 | ' 
2481c                 | ' 	return *((WORD*)ptr);
2481c     09 FB E9 FA | 	rdword	result1, arg01 wz
24820     00 FA 05 56 |  if_ne	mov	result1, #0
24824     D4 00 90 5D |  if_ne	jmp	#LR__3785
24828     0A 03 C2 FA | 	rdbyte	_var02, arg02
2482c     40 02 26 F5 | 	andn	_var02, #64
24830     01 02 86 F1 | 	sub	_var02, #1
24834     0D 02 06 FD | 	qmul	_var02, #13
24838                 | ' 
24838                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
24838                 | ' 
24838                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
24838     01 04 06 F6 | 	mov	_var03, #1
2483c     00 06 06 F6 | 	mov	_var04, #0
24840     18 08 62 FD | 	getqx	_var05
24844                 | LR__3780
24844     0D 06 16 F2 | 	cmp	_var04, #13 wc
24848     80 00 90 3D |  if_ae	jmp	#LR__3783
2484c     0A 13 02 F6 | 	mov	arg01, arg02
24850     03 03 02 F6 | 	mov	_var02, _var04
24854     01 00 00 FF 
24858     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2485c     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
24860     01 03 C2 FA | 	rdbyte	_var02, _var02
24864     01 02 06 FA | 	mul	_var02, #1
24868     01 13 02 F1 | 	add	arg01, _var02
2486c     01 00 00 FF 
24870     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
24874                 | ' {
24874                 | ' 
24874                 | ' 	return *((WORD*)ptr);
24874     09 FB E1 FA | 	rdword	result1, arg01
24878     FD 0A 02 F6 | 	mov	_var06, result1
2487c     02 03 02 F6 | 	mov	_var02, _var03
24880     0F 02 4E F7 | 	zerox	_var02, #15 wz
24884     28 00 90 AD |  if_e	jmp	#LR__3781
24888     00 09 16 F2 | 	cmp	_var05, #256 wc
2488c     00 FA 05 36 |  if_ae	mov	result1, #0
24890     68 00 90 3D |  if_ae	jmp	#LR__3785
24894     04 03 02 F6 | 	mov	_var02, _var05
24898     01 02 66 F0 | 	shl	_var02, #1
2489c     00 03 02 F1 | 	add	_var02, _var01
248a0     05 05 02 F6 | 	mov	_var03, _var06
248a4     01 05 52 FC | 	wrword	_var03, _var02
248a8     01 08 06 F1 | 	add	_var05, #1
248ac     14 00 90 FD | 	jmp	#LR__3782
248b0                 | LR__3781
248b0     05 0B 32 F9 | 	getword	_var06, _var06, #0
248b4     7F 00 00 FF 
248b8     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
248bc     00 FA 05 56 |  if_ne	mov	result1, #0
248c0     38 00 90 5D |  if_ne	jmp	#LR__3785
248c4                 | LR__3782
248c4     01 06 06 F1 | 	add	_var04, #1
248c8     78 FF 9F FD | 	jmp	#LR__3780
248cc                 | LR__3783
248cc     0A 03 C2 FA | 	rdbyte	_var02, arg02
248d0     40 02 CE F7 | 	test	_var02, #64 wz
248d4     02 0D 02 56 |  if_ne	mov	_var07, _var03
248d8     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
248dc     18 00 90 AD |  if_e	jmp	#LR__3784
248e0     00 09 16 F2 | 	cmp	_var05, #256 wc
248e4     00 FA 05 36 |  if_ae	mov	result1, #0
248e8     10 00 90 3D |  if_ae	jmp	#LR__3785
248ec     01 08 66 F0 | 	shl	_var05, #1
248f0     00 09 02 F1 | 	add	_var05, _var01
248f4     04 01 58 FC | 	wrword	#0, _var05
248f8                 | LR__3784
248f8                 | ' 		lfnbuf[i] = 0;
248f8                 | ' 	}
248f8                 | ' 
248f8                 | ' 	return 1;
248f8     01 FA 05 F6 | 	mov	result1, #1
248fc                 | LR__3785
248fc                 | _fatfs_cc_pick_lfn_ret
248fc     2D 00 64 FD | 	ret
24900                 | 
24900                 | _fatfs_cc_put_lfn
24900     0D 14 06 F1 | 	add	arg02, #13
24904     0A 19 42 FC | 	wrbyte	arg04, arg02
24908     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2490c     01 18 86 F1 | 	sub	arg04, #1
24910     0D 18 06 FD | 	qmul	arg04, #13
24914     09 01 02 F6 | 	mov	_var01, arg01
24918     02 14 86 F1 | 	sub	arg02, #2
2491c     0A 1F 48 FC | 	wrbyte	#15, arg02
24920     01 14 06 F1 | 	add	arg02, #1
24924     0A 01 48 FC | 	wrbyte	#0, arg02
24928     0C 14 86 F1 | 	sub	arg02, #12
2492c     0A 13 02 F6 | 	mov	arg01, arg02
24930     1A 12 06 F1 | 	add	arg01, #26
24934     09 01 58 FC | 	wrword	#0, arg01
24938     00 02 06 F6 | 	mov	_var02, #0
2493c     00 04 06 F6 | 	mov	_var03, #0
24940                 | ' 	BYTE* dir,
24940                 | ' 	BYTE ord,
24940                 | ' 	BYTE sum
24940                 | ' )
24940                 | ' {
24940                 | ' 	UINT i, s;
24940                 | ' 	WCHAR wc;
24940                 | ' 
24940                 | ' 
24940                 | ' 	dir[ 13 ] = sum;
24940                 | ' 	dir[ 11 ] =  0x0F ;
24940                 | ' 	dir[ 12 ] = 0;
24940                 | ' 	st_word(dir +  26 , 0);
24940                 | ' 
24940                 | ' 	i = (ord - 1) * 13;
24940                 | ' 	s = wc = 0;
24940                 | ' 	do {
24940     01 00 00 FF 
24944     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
24948     18 06 62 FD | 	getqx	_var04
2494c     97 2A 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
24950                 | LR__3790
24950     01 19 32 F9 | 	getword	arg04, _var02, #0
24954     7F 00 00 FF 
24958     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2495c     03 13 02 56 |  if_ne	mov	arg01, _var04
24960     01 06 06 51 |  if_ne	add	_var04, #1
24964     01 12 66 50 |  if_ne	shl	arg01, #1
24968     00 13 02 51 |  if_ne	add	arg01, _var01
2496c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
24970     0A 13 02 F6 | 	mov	arg01, arg02
24974     02 19 02 F6 | 	mov	arg04, _var03
24978     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2497c     0C 19 C2 FA | 	rdbyte	arg04, arg04
24980     01 18 06 FA | 	mul	arg04, #1
24984     0C 13 02 F1 | 	add	arg01, arg04
24988     09 03 52 FC | 	wrword	_var02, arg01
2498c     01 19 02 F6 | 	mov	arg04, _var02
24990     0F 18 4E F7 | 	zerox	arg04, #15 wz
24994     0F 02 CE A9 |  if_e	bmask	_var02, #15
24998     01 04 06 F1 | 	add	_var03, #1
2499c     0D 04 16 F2 | 	cmp	_var03, #13 wc
249a0     AC FF 9F CD |  if_b	jmp	#LR__3790
249a4                 | LR__3791
249a4     01 00 00 FF 
249a8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
249ac     01 03 32 F9 | 	getword	_var02, _var02, #0
249b0     7F 00 00 FF 
249b4     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
249b8     01 06 66 50 |  if_ne	shl	_var04, #1
249bc     00 07 02 51 |  if_ne	add	_var04, _var01
249c0     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
249c4     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
249c8     40 16 46 A5 |  if_e	or	arg03, #64
249cc     0A 17 42 FC | 	wrbyte	arg03, arg02
249d0                 | _fatfs_cc_put_lfn_ret
249d0     2D 00 64 FD | 	ret
249d4                 | 
249d4                 | _fatfs_cc_gen_numname
249d4     08 4A 05 F6 | 	mov	COUNT_, #8
249d8     A8 00 A0 FD | 	call	#pushregs_
249dc     2C F0 07 F1 | 	add	ptra, #44
249e0     09 1F 02 F6 | 	mov	local01, arg01
249e4     0A 21 02 F6 | 	mov	local02, arg02
249e8     0B 23 02 F6 | 	mov	local03, arg03
249ec     0C 25 02 F6 | 	mov	local04, arg04
249f0     0F 13 02 F6 | 	mov	arg01, local01
249f4     10 15 02 F6 | 	mov	arg02, local02
249f8     0B 16 06 F6 | 	mov	arg03, #11
249fc     FC 77 BF FD | 	call	#__system____builtin_memmove
24a00     06 24 16 F2 | 	cmp	local04, #6 wc
24a04     48 00 90 CD |  if_b	jmp	#LR__3805
24a08     12 27 02 F6 | 	mov	local05, local04
24a0c     97 1E 48 FB | 	callpa	#(@LR__3803-@LR__3800)>>2,fcache_load_ptr_
24a10                 | ' 		sreg = seq;
24a10                 | ' 		while (*lfn) {
24a10                 | LR__3800
24a10     11 29 EA FA | 	rdword	local06, local03 wz
24a14     34 00 90 AD |  if_e	jmp	#LR__3804
24a18     11 2B E2 FA | 	rdword	local07, local03
24a1c                 | ' 			wc = *lfn++;
24a1c                 | ' 			for (i = 0; i < 16; i++) {
24a1c     02 22 06 F1 | 	add	local03, #2
24a20     10 12 DC FC | 	rep	@LR__3802, #16
24a24                 | LR__3801
24a24     01 26 66 F0 | 	shl	local05, #1
24a28     15 29 32 F9 | 	getword	local06, local07, #0
24a2c     01 28 06 F5 | 	and	local06, #1
24a30     14 27 02 F1 | 	add	local05, local06
24a34     15 2B 32 F9 | 	getword	local07, local07, #0
24a38     01 2A 46 F0 | 	shr	local07, #1
24a3c     10 26 2E F4 | 	testbn	local05, #16 wz
24a40     88 00 00 5F 
24a44     21 26 66 55 |  if_ne	xor	local05, ##69665
24a48                 | LR__3802
24a48     C4 FF 9F FD | 	jmp	#LR__3800
24a4c                 | LR__3803
24a4c                 | LR__3804
24a4c     13 25 02 F6 | 	mov	local04, local05
24a50                 | LR__3805
24a50     07 2A 06 F6 | 	mov	local07, #7
24a54                 | ' 			}
24a54                 | ' 		}
24a54                 | ' 		seq = (UINT)sreg;
24a54                 | ' 	}
24a54                 | ' 
24a54                 | ' 
24a54                 | ' 	i = 7;
24a54                 | ' 	do {
24a54     10 4E 05 F1 | 	add	fp, #16
24a58     97 1A 48 FB | 	callpa	#(@LR__3807-@LR__3806)>>2,fcache_load_ptr_
24a5c                 | LR__3806
24a5c     12 27 42 F8 | 	getnib	local05, local04, #0
24a60     30 26 06 F1 | 	add	local05, #48
24a64     04 24 46 F0 | 	shr	local04, #4
24a68     13 29 E2 F8 | 	getbyte	local06, local05, #0
24a6c     3A 28 16 F2 | 	cmp	local06, #58 wc
24a70     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
24a74     07 26 06 31 |  if_ae	add	local05, #7
24a78     15 29 02 F6 | 	mov	local06, local07
24a7c     01 2A 8E F1 | 	sub	local07, #1 wz
24a80     A7 28 02 F1 | 	add	local06, fp
24a84     14 27 42 FC | 	wrbyte	local05, local06
24a88     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
24a8c     CC FF 9F 5D |  if_ne	jmp	#LR__3806
24a90                 | LR__3807
24a90     15 29 02 F6 | 	mov	local06, local07
24a94     A7 28 02 F1 | 	add	local06, fp
24a98     14 FD 48 FC | 	wrbyte	#126, local06
24a9c                 | ' 	ns[i] = '~';
24a9c                 | ' 
24a9c                 | ' 
24a9c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
24a9c     00 26 06 F6 | 	mov	local05, #0
24aa0     10 4E 85 F1 | 	sub	fp, #16
24aa4     97 2A 48 FB | 	callpa	#(@LR__3810-@LR__3808)>>2,fcache_load_ptr_
24aa8                 | LR__3808
24aa8     15 27 12 F2 | 	cmp	local05, local07 wc
24aac     4C 00 90 3D |  if_ae	jmp	#LR__3811
24ab0     13 29 02 F6 | 	mov	local06, local05
24ab4     0F 29 02 F1 | 	add	local06, local01
24ab8     14 29 C2 FA | 	rdbyte	local06, local06
24abc     20 28 0E F2 | 	cmp	local06, #32 wz
24ac0     38 00 90 AD |  if_e	jmp	#LR__3811
24ac4     13 13 02 F6 | 	mov	arg01, local05
24ac8     0F 13 02 F1 | 	add	arg01, local01
24acc     09 13 CA FA | 	rdbyte	arg01, arg01 wz
24ad0     00 FA 05 56 |  if_ne	mov	result1, #0
24ad4                 | ' 
24ad4                 | ' 	return 0;
24ad4     00 FA 05 A6 |  if_e	mov	result1, #0
24ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
24adc     14 00 90 AD |  if_e	jmp	#LR__3809
24ae0     15 29 02 F6 | 	mov	local06, local07
24ae4     01 28 86 F1 | 	sub	local06, #1
24ae8     14 27 0A F2 | 	cmp	local05, local06 wz
24aec     0C 00 90 AD |  if_e	jmp	#LR__3811
24af0     01 26 06 F1 | 	add	local05, #1
24af4                 | LR__3809
24af4     01 26 06 F1 | 	add	local05, #1
24af8     AC FF 9F FD | 	jmp	#LR__3808
24afc                 | LR__3810
24afc                 | LR__3811
24afc     97 20 48 FB | 	callpa	#(@LR__3815-@LR__3812)>>2,fcache_load_ptr_
24b00                 | ' 			j++;
24b00                 | ' 		}
24b00                 | ' 	}
24b00                 | ' 	do {
24b00                 | LR__3812
24b00     13 29 02 F6 | 	mov	local06, local05
24b04     0F 29 02 F1 | 	add	local06, local01
24b08     08 2A 16 F2 | 	cmp	local07, #8 wc
24b0c     01 26 06 F1 | 	add	local05, #1
24b10     1C 00 90 3D |  if_ae	jmp	#LR__3813
24b14     15 25 02 F6 | 	mov	local04, local07
24b18     10 4E 05 F1 | 	add	fp, #16
24b1c     A7 24 02 F1 | 	add	local04, fp
24b20     12 2D C2 FA | 	rdbyte	local08, local04
24b24     01 2A 06 F1 | 	add	local07, #1
24b28     10 4E 85 F1 | 	sub	fp, #16
24b2c     04 00 90 FD | 	jmp	#LR__3814
24b30                 | LR__3813
24b30     20 2C 06 F6 | 	mov	local08, #32
24b34                 | LR__3814
24b34     14 2D 42 FC | 	wrbyte	local08, local06
24b38     08 26 16 F2 | 	cmp	local05, #8 wc
24b3c     C0 FF 9F CD |  if_b	jmp	#LR__3812
24b40                 | LR__3815
24b40     A7 F0 03 F6 | 	mov	ptra, fp
24b44     B2 00 A0 FD | 	call	#popregs_
24b48                 | _fatfs_cc_gen_numname_ret
24b48     2D 00 64 FD | 	ret
24b4c                 | 
24b4c                 | _fatfs_cc_sum_sfn
24b4c     00 00 06 F6 | 	mov	_var01, #0
24b50                 | ' )
24b50                 | ' {
24b50                 | ' 	BYTE sum = 0;
24b50                 | ' 	UINT n = 11;
24b50                 | ' 
24b50                 | ' 	do {
24b50     97 12 48 FB | 	callpa	#(@LR__3822-@LR__3820)>>2,fcache_load_ptr_
24b54                 | LR__3820
24b54     0B 10 DC FC | 	rep	@LR__3823, #11
24b58                 | LR__3821
24b58     00 FB E1 F8 | 	getbyte	result1, _var01, #0
24b5c     01 FA 45 F0 | 	shr	result1, #1
24b60     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
24b64     07 00 66 F0 | 	shl	_var01, #7
24b68     00 FB 01 F1 | 	add	result1, _var01
24b6c     09 01 C2 FA | 	rdbyte	_var01, arg01
24b70     FD 00 02 F1 | 	add	_var01, result1
24b74     01 12 06 F1 | 	add	arg01, #1
24b78                 | LR__3822
24b78                 | LR__3823
24b78                 | ' 	return sum;
24b78     00 FB 01 F6 | 	mov	result1, _var01
24b7c                 | _fatfs_cc_sum_sfn_ret
24b7c     2D 00 64 FD | 	ret
24b80                 | 
24b80                 | _fatfs_cc_dir_read
24b80     0C 4A 05 F6 | 	mov	COUNT_, #12
24b84     A8 00 A0 FD | 	call	#pushregs_
24b88     09 1F 02 F6 | 	mov	local01, arg01
24b8c     0A 21 02 F6 | 	mov	local02, arg02
24b90     04 22 06 F6 | 	mov	local03, #4
24b94     0F 25 02 FB | 	rdlong	local04, local01
24b98     FF 26 06 F6 | 	mov	local05, #255
24b9c     FF 28 06 F6 | 	mov	local06, #255
24ba0                 | ' )
24ba0                 | ' {
24ba0                 | ' 	FRESULT res = FR_NO_FILE;
24ba0                 | ' 	FATFS *fs = dp->obj.fs;
24ba0                 | ' 	BYTE attr, b;
24ba0                 | ' 
24ba0                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
24ba0                 | ' 
24ba0                 | ' 
24ba0                 | ' 	while (dp->sect) {
24ba0                 | LR__3830
24ba0     18 1E 06 F1 | 	add	local01, #24
24ba4     0F FB 09 FB | 	rdlong	result1, local01 wz
24ba8     18 1E 86 F1 | 	sub	local01, #24
24bac     AC 01 90 AD |  if_e	jmp	#LR__3840
24bb0     18 1E 06 F1 | 	add	local01, #24
24bb4     0F 15 02 FB | 	rdlong	arg02, local01
24bb8     18 1E 86 F1 | 	sub	local01, #24
24bbc     12 13 02 F6 | 	mov	arg01, local04
24bc0     AC ED BF FD | 	call	#_fatfs_cc_move_window
24bc4     FD 22 0A F6 | 	mov	local03, result1 wz
24bc8     90 01 90 5D |  if_ne	jmp	#LR__3840
24bcc     1C 1E 06 F1 | 	add	local01, #28
24bd0     0F FB 01 FB | 	rdlong	result1, local01
24bd4     1C 1E 86 F1 | 	sub	local01, #28
24bd8     FD 2A C2 FA | 	rdbyte	local07, result1
24bdc     15 FB 01 F6 | 	mov	result1, local07
24be0     07 FA 4D F7 | 	zerox	result1, #7 wz
24be4     04 22 06 A6 |  if_e	mov	local03, #4
24be8                 | ' 			res = FR_NO_FILE; break;
24be8     70 01 90 AD |  if_e	jmp	#LR__3840
24bec     1C 1E 06 F1 | 	add	local01, #28
24bf0     0F 2D 02 FB | 	rdlong	local08, local01
24bf4     0B 2C 06 F1 | 	add	local08, #11
24bf8     16 2F C2 FA | 	rdbyte	local09, local08
24bfc     3F 2E 06 F5 | 	and	local09, #63
24c00     16 1E 86 F1 | 	sub	local01, #22
24c04     0F 2F 42 FC | 	wrbyte	local09, local01
24c08     06 1E 86 F1 | 	sub	local01, #6
24c0c     15 FB E1 F8 | 	getbyte	result1, local07, #0
24c10     E5 FA 0D F2 | 	cmp	result1, #229 wz
24c14     15 2D 02 56 |  if_ne	mov	local08, local07
24c18     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
24c1c     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
24c20     1C 00 90 AD |  if_e	jmp	#LR__3831
24c24     00 30 06 F6 | 	mov	local10, #0
24c28     17 2D E2 F8 | 	getbyte	local08, local09, #0
24c2c     20 2C 26 F5 | 	andn	local08, #32
24c30     08 2C 0E F2 | 	cmp	local08, #8 wz
24c34     01 30 06 A6 |  if_e	mov	local10, #1
24c38     10 31 0A F2 | 	cmp	local10, local02 wz
24c3c     08 00 90 AD |  if_e	jmp	#LR__3832
24c40                 | LR__3831
24c40     FF 26 06 F6 | 	mov	local05, #255
24c44     00 01 90 FD | 	jmp	#LR__3839
24c48                 | LR__3832
24c48     17 2F E2 F8 | 	getbyte	local09, local09, #0
24c4c     0F 2E 0E F2 | 	cmp	local09, #15 wz
24c50     B4 00 90 5D |  if_ne	jmp	#LR__3836
24c54     15 33 E2 F8 | 	getbyte	local11, local07, #0
24c58     40 32 CE F7 | 	test	local11, #64 wz
24c5c     30 00 90 AD |  if_e	jmp	#LR__3833
24c60     1C 1E 06 F1 | 	add	local01, #28
24c64     0F 33 02 FB | 	rdlong	local11, local01
24c68     0D 32 06 F1 | 	add	local11, #13
24c6c     19 29 C2 FA | 	rdbyte	local06, local11
24c70     15 2B E2 F8 | 	getbyte	local07, local07, #0
24c74     BF 2A 06 F5 | 	and	local07, #191
24c78     15 27 02 F6 | 	mov	local05, local07
24c7c     0C 1E 86 F1 | 	sub	local01, #12
24c80     0F 33 02 FB | 	rdlong	local11, local01
24c84     1C 1E 06 F1 | 	add	local01, #28
24c88     0F 33 62 FC | 	wrlong	local11, local01
24c8c     2C 1E 86 F1 | 	sub	local01, #44
24c90                 | LR__3833
24c90     15 2D E2 F8 | 	getbyte	local08, local07, #0
24c94     13 31 E2 F8 | 	getbyte	local10, local05, #0
24c98     18 2D 0A F2 | 	cmp	local08, local10 wz
24c9c     5C 00 90 5D |  if_ne	jmp	#LR__3834
24ca0     14 31 E2 F8 | 	getbyte	local10, local06, #0
24ca4     1C 1E 06 F1 | 	add	local01, #28
24ca8     0F 2F 02 FB | 	rdlong	local09, local01
24cac     1C 1E 86 F1 | 	sub	local01, #28
24cb0     0D 2E 06 F1 | 	add	local09, #13
24cb4     17 2D C2 FA | 	rdbyte	local08, local09
24cb8     16 2F E2 F8 | 	getbyte	local09, local08, #0
24cbc     17 31 0A F2 | 	cmp	local10, local09 wz
24cc0     38 00 90 5D |  if_ne	jmp	#LR__3834
24cc4     0C 24 06 F1 | 	add	local04, #12
24cc8     12 13 02 FB | 	rdlong	arg01, local04
24ccc     0C 24 86 F1 | 	sub	local04, #12
24cd0     1C 1E 06 F1 | 	add	local01, #28
24cd4     0F 35 02 FB | 	rdlong	local12, local01
24cd8     1C 1E 86 F1 | 	sub	local01, #28
24cdc     1A 15 02 F6 | 	mov	arg02, local12
24ce0     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
24ce4     00 FA 4D F2 | 	cmps	result1, #0 wz
24ce8     13 35 02 56 |  if_ne	mov	local12, local05
24cec     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
24cf0     01 34 86 51 |  if_ne	sub	local12, #1
24cf4     1A 33 02 56 |  if_ne	mov	local11, local12
24cf8     04 00 90 5D |  if_ne	jmp	#LR__3835
24cfc                 | LR__3834
24cfc     FF 32 06 F6 | 	mov	local11, #255
24d00                 | LR__3835
24d00     19 27 02 F6 | 	mov	local05, local11
24d04     40 00 90 FD | 	jmp	#LR__3838
24d08                 | LR__3836
24d08     13 33 02 F6 | 	mov	local11, local05
24d0c     07 32 4E F7 | 	zerox	local11, #7 wz
24d10     20 00 90 5D |  if_ne	jmp	#LR__3837
24d14     14 29 E2 F8 | 	getbyte	local06, local06, #0
24d18     1C 1E 06 F1 | 	add	local01, #28
24d1c     0F 13 02 FB | 	rdlong	arg01, local01
24d20     1C 1E 86 F1 | 	sub	local01, #28
24d24     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
24d28     FD FA E1 F8 | 	getbyte	result1, result1, #0
24d2c     FD 28 0A F2 | 	cmp	local06, result1 wz
24d30     28 00 90 AD |  if_e	jmp	#LR__3840
24d34                 | LR__3837
24d34     2C 1E 06 F1 | 	add	local01, #44
24d38     FF FF FF FF 
24d3c     0F FF 6B FC | 	wrlong	##-1, local01
24d40     2C 1E 86 F1 | 	sub	local01, #44
24d44                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
24d44                 | ' 					}
24d44                 | ' 					break;
24d44     14 00 90 FD | 	jmp	#LR__3840
24d48                 | LR__3838
24d48                 | LR__3839
24d48     0F 13 02 F6 | 	mov	arg01, local01
24d4c     00 14 06 F6 | 	mov	arg02, #0
24d50     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
24d54     FD 22 0A F6 | 	mov	local03, result1 wz
24d58     44 FE 9F AD |  if_e	jmp	#LR__3830
24d5c                 | LR__3840
24d5c     00 22 0E F2 | 	cmp	local03, #0 wz
24d60     18 1E 06 51 |  if_ne	add	local01, #24
24d64     0F 01 68 5C |  if_ne	wrlong	#0, local01
24d68                 | ' 	return res;
24d68     11 FB 01 F6 | 	mov	result1, local03
24d6c     A7 F0 03 F6 | 	mov	ptra, fp
24d70     B2 00 A0 FD | 	call	#popregs_
24d74                 | _fatfs_cc_dir_read_ret
24d74     2D 00 64 FD | 	ret
24d78                 | 
24d78                 | _fatfs_cc_dir_find
24d78     0B 4A 05 F6 | 	mov	COUNT_, #11
24d7c     A8 00 A0 FD | 	call	#pushregs_
24d80     09 1F 02 F6 | 	mov	local01, arg01
24d84     0F 21 02 FB | 	rdlong	local02, local01
24d88     0F 13 02 F6 | 	mov	arg01, local01
24d8c     00 14 06 F6 | 	mov	arg02, #0
24d90     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
24d94     00 FA 0D F2 | 	cmp	result1, #0 wz
24d98     18 02 90 5D |  if_ne	jmp	#LR__3862
24d9c     FF 22 06 F6 | 	mov	local03, #255
24da0     FF 24 06 F6 | 	mov	local04, #255
24da4     2C 1E 06 F1 | 	add	local01, #44
24da8     FF FF FF FF 
24dac     0F FF 6B FC | 	wrlong	##-1, local01
24db0     2C 1E 86 F1 | 	sub	local01, #44
24db4                 | ' #line 2404 "ff.c"
24db4                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
24db4                 | ' 
24db4                 | ' 	do {
24db4                 | LR__3850
24db4     18 1E 06 F1 | 	add	local01, #24
24db8     0F 15 02 FB | 	rdlong	arg02, local01
24dbc     18 1E 86 F1 | 	sub	local01, #24
24dc0     10 13 02 F6 | 	mov	arg01, local02
24dc4     A8 EB BF FD | 	call	#_fatfs_cc_move_window
24dc8     FD 26 0A F6 | 	mov	local05, result1 wz
24dcc     E0 01 90 5D |  if_ne	jmp	#LR__3861
24dd0     1C 1E 06 F1 | 	add	local01, #28
24dd4     0F 17 02 FB | 	rdlong	arg03, local01
24dd8     1C 1E 86 F1 | 	sub	local01, #28
24ddc     0B 29 C2 FA | 	rdbyte	local06, arg03
24de0     14 17 02 F6 | 	mov	arg03, local06
24de4     07 16 4E F7 | 	zerox	arg03, #7 wz
24de8     04 26 06 A6 |  if_e	mov	local05, #4
24dec     C0 01 90 AD |  if_e	jmp	#LR__3861
24df0     1C 1E 06 F1 | 	add	local01, #28
24df4     0F 2B 02 FB | 	rdlong	local07, local01
24df8     15 17 02 F6 | 	mov	arg03, local07
24dfc     0B 16 06 F1 | 	add	arg03, #11
24e00     0B 2D C2 FA | 	rdbyte	local08, arg03
24e04     3F 2C 06 F5 | 	and	local08, #63
24e08     16 1E 86 F1 | 	sub	local01, #22
24e0c     0F 2D 42 FC | 	wrbyte	local08, local01
24e10     06 1E 86 F1 | 	sub	local01, #6
24e14     14 17 E2 F8 | 	getbyte	arg03, local06, #0
24e18     E5 16 0E F2 | 	cmp	arg03, #229 wz
24e1c     18 00 90 AD |  if_e	jmp	#LR__3851
24e20     16 17 E2 F8 | 	getbyte	arg03, local08, #0
24e24     08 16 CE F7 | 	test	arg03, #8 wz
24e28     16 2B 02 56 |  if_ne	mov	local07, local08
24e2c     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
24e30     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
24e34     18 00 90 AD |  if_e	jmp	#LR__3852
24e38                 | LR__3851
24e38     FF 24 06 F6 | 	mov	local04, #255
24e3c     2C 1E 06 F1 | 	add	local01, #44
24e40     FF FF FF FF 
24e44     0F FF 6B FC | 	wrlong	##-1, local01
24e48     2C 1E 86 F1 | 	sub	local01, #44
24e4c     4C 01 90 FD | 	jmp	#LR__3860
24e50                 | LR__3852
24e50     16 2D E2 F8 | 	getbyte	local08, local08, #0
24e54     0F 2C 0E F2 | 	cmp	local08, #15 wz
24e58     C8 00 90 5D |  if_ne	jmp	#LR__3856
24e5c     2B 1E 06 F1 | 	add	local01, #43
24e60     0F 2D C2 FA | 	rdbyte	local08, local01
24e64     2B 1E 86 F1 | 	sub	local01, #43
24e68     40 2C CE F7 | 	test	local08, #64 wz
24e6c     2C 01 90 5D |  if_ne	jmp	#LR__3859
24e70     14 2F E2 F8 | 	getbyte	local09, local06, #0
24e74     40 2E CE F7 | 	test	local09, #64 wz
24e78     30 00 90 AD |  if_e	jmp	#LR__3853
24e7c     1C 1E 06 F1 | 	add	local01, #28
24e80     0F 2F 02 FB | 	rdlong	local09, local01
24e84     0D 2E 06 F1 | 	add	local09, #13
24e88     17 23 C2 FA | 	rdbyte	local03, local09
24e8c     14 29 E2 F8 | 	getbyte	local06, local06, #0
24e90     BF 28 06 F5 | 	and	local06, #191
24e94     14 25 02 F6 | 	mov	local04, local06
24e98     0C 1E 86 F1 | 	sub	local01, #12
24e9c     0F 2F 02 FB | 	rdlong	local09, local01
24ea0     1C 1E 06 F1 | 	add	local01, #28
24ea4     0F 2F 62 FC | 	wrlong	local09, local01
24ea8     2C 1E 86 F1 | 	sub	local01, #44
24eac                 | LR__3853
24eac     14 31 E2 F8 | 	getbyte	local10, local06, #0
24eb0     12 2B E2 F8 | 	getbyte	local07, local04, #0
24eb4     15 31 0A F2 | 	cmp	local10, local07 wz
24eb8     5C 00 90 5D |  if_ne	jmp	#LR__3854
24ebc     11 2D E2 F8 | 	getbyte	local08, local03, #0
24ec0     1C 1E 06 F1 | 	add	local01, #28
24ec4     0F 2B 02 FB | 	rdlong	local07, local01
24ec8     1C 1E 86 F1 | 	sub	local01, #28
24ecc     0D 2A 06 F1 | 	add	local07, #13
24ed0     15 29 C2 FA | 	rdbyte	local06, local07
24ed4     14 2B E2 F8 | 	getbyte	local07, local06, #0
24ed8     15 2D 0A F2 | 	cmp	local08, local07 wz
24edc     38 00 90 5D |  if_ne	jmp	#LR__3854
24ee0     0C 20 06 F1 | 	add	local02, #12
24ee4     10 13 02 FB | 	rdlong	arg01, local02
24ee8     0C 20 86 F1 | 	sub	local02, #12
24eec     1C 1E 06 F1 | 	add	local01, #28
24ef0     0F 33 02 FB | 	rdlong	local11, local01
24ef4     1C 1E 86 F1 | 	sub	local01, #28
24ef8     19 15 02 F6 | 	mov	arg02, local11
24efc     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
24f00     00 FA 4D F2 | 	cmps	result1, #0 wz
24f04     12 33 02 56 |  if_ne	mov	local11, local04
24f08     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
24f0c     01 32 86 51 |  if_ne	sub	local11, #1
24f10     19 2F 02 56 |  if_ne	mov	local09, local11
24f14     04 00 90 5D |  if_ne	jmp	#LR__3855
24f18                 | LR__3854
24f18     FF 2E 06 F6 | 	mov	local09, #255
24f1c                 | LR__3855
24f1c     17 25 02 F6 | 	mov	local04, local09
24f20     78 00 90 FD | 	jmp	#LR__3859
24f24                 | LR__3856
24f24     12 2F 02 F6 | 	mov	local09, local04
24f28     07 2E 4E F7 | 	zerox	local09, #7 wz
24f2c     20 00 90 5D |  if_ne	jmp	#LR__3857
24f30     11 31 E2 F8 | 	getbyte	local10, local03, #0
24f34     1C 1E 06 F1 | 	add	local01, #28
24f38     0F 13 02 FB | 	rdlong	arg01, local01
24f3c     1C 1E 86 F1 | 	sub	local01, #28
24f40     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
24f44     FD FA E1 F8 | 	getbyte	result1, result1, #0
24f48     FD 30 0A F2 | 	cmp	local10, result1 wz
24f4c     60 00 90 AD |  if_e	jmp	#LR__3861
24f50                 | LR__3857
24f50     2B 1E 06 F1 | 	add	local01, #43
24f54     0F 2F C2 FA | 	rdbyte	local09, local01
24f58     2B 1E 86 F1 | 	sub	local01, #43
24f5c     01 2E CE F7 | 	test	local09, #1 wz
24f60     24 00 90 5D |  if_ne	jmp	#LR__3858
24f64     1C 1E 06 F1 | 	add	local01, #28
24f68     0F 13 02 FB | 	rdlong	arg01, local01
24f6c     04 1E 06 F1 | 	add	local01, #4
24f70     0F 15 02 F6 | 	mov	arg02, local01
24f74     20 1E 86 F1 | 	sub	local01, #32
24f78     0B 16 06 F6 | 	mov	arg03, #11
24f7c     88 DA BF FD | 	call	#_fatfs_cc_memcmp
24f80     00 FA 0D F2 | 	cmp	result1, #0 wz
24f84     28 00 90 AD |  if_e	jmp	#LR__3861
24f88                 | LR__3858
24f88     FF 24 06 F6 | 	mov	local04, #255
24f8c     2C 1E 06 F1 | 	add	local01, #44
24f90     FF FF FF FF 
24f94     0F FF 6B FC | 	wrlong	##-1, local01
24f98     2C 1E 86 F1 | 	sub	local01, #44
24f9c                 | LR__3859
24f9c                 | LR__3860
24f9c     0F 13 02 F6 | 	mov	arg01, local01
24fa0     00 14 06 F6 | 	mov	arg02, #0
24fa4     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
24fa8     FD 26 0A F6 | 	mov	local05, result1 wz
24fac     04 FE 9F AD |  if_e	jmp	#LR__3850
24fb0                 | LR__3861
24fb0                 | ' 
24fb0                 | ' 	return res;
24fb0     13 FB 01 F6 | 	mov	result1, local05
24fb4                 | LR__3862
24fb4     A7 F0 03 F6 | 	mov	ptra, fp
24fb8     B2 00 A0 FD | 	call	#popregs_
24fbc                 | _fatfs_cc_dir_find_ret
24fbc     2D 00 64 FD | 	ret
24fc0                 | 
24fc0                 | _fatfs_cc_dir_register
24fc0     0A 4A 05 F6 | 	mov	COUNT_, #10
24fc4     A8 00 A0 FD | 	call	#pushregs_
24fc8     2C F0 07 F1 | 	add	ptra, #44
24fcc     04 4E 05 F1 | 	add	fp, #4
24fd0     A7 12 62 FC | 	wrlong	arg01, fp
24fd4     09 1F 02 FB | 	rdlong	local01, arg01
24fd8     08 4E 05 F1 | 	add	fp, #8
24fdc     A7 1E 62 FC | 	wrlong	local01, fp
24fe0     08 4E 85 F1 | 	sub	fp, #8
24fe4     A7 20 02 FB | 	rdlong	local02, fp
24fe8     04 4E 85 F1 | 	sub	fp, #4
24fec     2B 20 06 F1 | 	add	local02, #43
24ff0     10 21 C2 FA | 	rdbyte	local02, local02
24ff4     A0 20 CE F7 | 	test	local02, #160 wz
24ff8     06 FA 05 56 |  if_ne	mov	result1, #6
24ffc     F8 03 90 5D |  if_ne	jmp	#LR__3885
25000                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
25000     14 4E 05 F1 | 	add	fp, #20
25004     A7 00 68 FC | 	wrlong	#0, fp
25008     14 4E 85 F1 | 	sub	fp, #20
2500c     97 28 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
25010                 | LR__3870
25010     0C 4E 05 F1 | 	add	fp, #12
25014     A7 20 02 FB | 	rdlong	local02, fp
25018     0C 20 06 F1 | 	add	local02, #12
2501c     10 23 02 FB | 	rdlong	local03, local02
25020     08 4E 05 F1 | 	add	fp, #8
25024     A7 24 02 FB | 	rdlong	local04, fp
25028     14 4E 85 F1 | 	sub	fp, #20
2502c     01 24 66 F0 | 	shl	local04, #1
25030     11 25 02 F1 | 	add	local04, local03
25034     12 21 EA FA | 	rdword	local02, local04 wz
25038     24 00 90 AD |  if_e	jmp	#LR__3872
2503c     14 4E 05 F1 | 	add	fp, #20
25040     A7 26 02 FB | 	rdlong	local05, fp
25044     13 29 02 F6 | 	mov	local06, local05
25048     13 2B 02 F6 | 	mov	local07, local05
2504c     15 2D 02 F6 | 	mov	local08, local07
25050     01 2C 06 F1 | 	add	local08, #1
25054     A7 2C 62 FC | 	wrlong	local08, fp
25058     14 4E 85 F1 | 	sub	fp, #20
2505c     B0 FF 9F FD | 	jmp	#LR__3870
25060                 | LR__3871
25060                 | LR__3872
25060     1C 4E 05 F1 | 	add	fp, #28
25064     A7 12 02 F6 | 	mov	arg01, fp
25068     18 4E 85 F1 | 	sub	fp, #24
2506c     A7 14 02 FB | 	rdlong	arg02, fp
25070     04 4E 85 F1 | 	sub	fp, #4
25074     20 14 06 F1 | 	add	arg02, #32
25078     0C 16 06 F6 | 	mov	arg03, #12
2507c     7C 71 BF FD | 	call	#__system____builtin_memmove
25080     27 4E 05 F1 | 	add	fp, #39
25084     A7 2E C2 FA | 	rdbyte	local09, fp
25088     27 4E 85 F1 | 	sub	fp, #39
2508c     01 2E CE F7 | 	test	local09, #1 wz
25090     F4 00 90 AD |  if_e	jmp	#LR__3875
25094     04 4E 05 F1 | 	add	fp, #4
25098     A7 30 02 FB | 	rdlong	local10, fp
2509c     2B 30 06 F1 | 	add	local10, #43
250a0     18 81 48 FC | 	wrbyte	#64, local10
250a4                 | ' 		dp->fn[ 11 ] =  0x40 ;
250a4                 | ' 		for (n = 1; n < 100; n++) {
250a4     0C 4E 05 F1 | 	add	fp, #12
250a8     A7 02 68 FC | 	wrlong	#1, fp
250ac     10 4E 85 F1 | 	sub	fp, #16
250b0                 | LR__3873
250b0     10 4E 05 F1 | 	add	fp, #16
250b4     A7 20 02 FB | 	rdlong	local02, fp
250b8     10 4E 85 F1 | 	sub	fp, #16
250bc     64 20 16 F2 | 	cmp	local02, #100 wc
250c0     70 00 90 3D |  if_ae	jmp	#LR__3874
250c4     04 4E 05 F1 | 	add	fp, #4
250c8     A7 12 02 FB | 	rdlong	arg01, fp
250cc     20 12 06 F1 | 	add	arg01, #32
250d0     18 4E 05 F1 | 	add	fp, #24
250d4     A7 14 02 F6 | 	mov	arg02, fp
250d8     10 4E 85 F1 | 	sub	fp, #16
250dc     A7 30 02 FB | 	rdlong	local10, fp
250e0     0C 30 06 F1 | 	add	local10, #12
250e4     18 17 02 FB | 	rdlong	arg03, local10
250e8     04 4E 05 F1 | 	add	fp, #4
250ec     A7 18 02 FB | 	rdlong	arg04, fp
250f0     10 4E 85 F1 | 	sub	fp, #16
250f4     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
250f8     04 4E 05 F1 | 	add	fp, #4
250fc     A7 12 02 FB | 	rdlong	arg01, fp
25100     04 4E 85 F1 | 	sub	fp, #4
25104     70 FC BF FD | 	call	#_fatfs_cc_dir_find
25108     08 4E 05 F1 | 	add	fp, #8
2510c     A7 FA 61 FC | 	wrlong	result1, fp
25110     00 FA 4D F2 | 	cmps	result1, #0 wz
25114     08 4E 85 F1 | 	sub	fp, #8
25118     18 00 90 5D |  if_ne	jmp	#LR__3874
2511c     10 4E 05 F1 | 	add	fp, #16
25120     A7 30 02 FB | 	rdlong	local10, fp
25124     01 30 06 F1 | 	add	local10, #1
25128     A7 30 62 FC | 	wrlong	local10, fp
2512c     10 4E 85 F1 | 	sub	fp, #16
25130     7C FF 9F FD | 	jmp	#LR__3873
25134                 | LR__3874
25134     10 4E 05 F1 | 	add	fp, #16
25138     A7 30 02 FB | 	rdlong	local10, fp
2513c     10 4E 85 F1 | 	sub	fp, #16
25140     64 30 0E F2 | 	cmp	local10, #100 wz
25144     07 FA 05 A6 |  if_e	mov	result1, #7
25148     AC 02 90 AD |  if_e	jmp	#LR__3885
2514c     08 4E 05 F1 | 	add	fp, #8
25150     A7 30 02 FB | 	rdlong	local10, fp
25154     08 4E 85 F1 | 	sub	fp, #8
25158     04 30 0E F2 | 	cmp	local10, #4 wz
2515c     08 4E 05 51 |  if_ne	add	fp, #8
25160     A7 FA 01 5B |  if_ne	rdlong	result1, fp
25164     08 4E 85 51 |  if_ne	sub	fp, #8
25168     8C 02 90 5D |  if_ne	jmp	#LR__3885
2516c     04 4E 05 F1 | 	add	fp, #4
25170     A7 30 02 FB | 	rdlong	local10, fp
25174     23 4E 05 F1 | 	add	fp, #35
25178     A7 1E C2 FA | 	rdbyte	local01, fp
2517c     27 4E 85 F1 | 	sub	fp, #39
25180     2B 30 06 F1 | 	add	local10, #43
25184     18 1F 42 FC | 	wrbyte	local01, local10
25188                 | LR__3875
25188     27 4E 05 F1 | 	add	fp, #39
2518c     A7 20 C2 FA | 	rdbyte	local02, fp
25190     27 4E 85 F1 | 	sub	fp, #39
25194     02 20 CE F7 | 	test	local02, #2 wz
25198     20 00 90 AD |  if_e	jmp	#LR__3876
2519c     14 4E 05 F1 | 	add	fp, #20
251a0     A7 30 02 FB | 	rdlong	local10, fp
251a4     0C 30 06 F1 | 	add	local10, #12
251a8     0D 30 16 FD | 	qdiv	local10, #13
251ac     14 4E 85 F1 | 	sub	fp, #20
251b0     18 30 62 FD | 	getqx	local10
251b4     01 30 06 F1 | 	add	local10, #1
251b8     04 00 90 FD | 	jmp	#LR__3877
251bc                 | LR__3876
251bc     01 30 06 F6 | 	mov	local10, #1
251c0                 | LR__3877
251c0     18 4E 05 F1 | 	add	fp, #24
251c4     A7 30 62 FC | 	wrlong	local10, fp
251c8     14 4E 85 F1 | 	sub	fp, #20
251cc     A7 12 02 FB | 	rdlong	arg01, fp
251d0     18 15 02 F6 | 	mov	arg02, local10
251d4     04 4E 85 F1 | 	sub	fp, #4
251d8     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
251dc     08 4E 05 F1 | 	add	fp, #8
251e0     A7 FA 61 FC | 	wrlong	result1, fp
251e4     08 4E 85 F1 | 	sub	fp, #8
251e8     00 FA 0D F2 | 	cmp	result1, #0 wz
251ec     38 01 90 5D |  if_ne	jmp	#LR__3882
251f0     18 4E 05 F1 | 	add	fp, #24
251f4     A7 30 02 FB | 	rdlong	local10, fp
251f8     01 30 8E F1 | 	sub	local10, #1 wz
251fc     A7 30 62 FC | 	wrlong	local10, fp
25200     18 4E 85 F1 | 	sub	fp, #24
25204     20 01 90 AD |  if_e	jmp	#LR__3882
25208     04 4E 05 F1 | 	add	fp, #4
2520c     A7 30 02 FB | 	rdlong	local10, fp
25210     18 13 02 F6 | 	mov	arg01, local10
25214     14 4E 05 F1 | 	add	fp, #20
25218     A7 18 02 FB | 	rdlong	arg04, fp
2521c     18 4E 85 F1 | 	sub	fp, #24
25220     05 18 66 F0 | 	shl	arg04, #5
25224     10 30 06 F1 | 	add	local10, #16
25228     18 15 02 FB | 	rdlong	arg02, local10
2522c     0C 15 82 F1 | 	sub	arg02, arg04
25230     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
25234     08 4E 05 F1 | 	add	fp, #8
25238     A7 FA 61 FC | 	wrlong	result1, fp
2523c     08 4E 85 F1 | 	sub	fp, #8
25240     00 FA 0D F2 | 	cmp	result1, #0 wz
25244     E0 00 90 5D |  if_ne	jmp	#LR__3881
25248     04 4E 05 F1 | 	add	fp, #4
2524c     A7 12 02 FB | 	rdlong	arg01, fp
25250     04 4E 85 F1 | 	sub	fp, #4
25254     20 12 06 F1 | 	add	arg01, #32
25258     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2525c     FD 30 02 F6 | 	mov	local10, result1
25260     28 4E 05 F1 | 	add	fp, #40
25264     A7 30 42 FC | 	wrbyte	local10, fp
25268     28 4E 85 F1 | 	sub	fp, #40
2526c                 | ' 			sum = sum_sfn(dp->fn);
2526c                 | ' 			do {
2526c                 | LR__3878
2526c     0C 4E 05 F1 | 	add	fp, #12
25270     A7 12 02 FB | 	rdlong	arg01, fp
25274     08 4E 85 F1 | 	sub	fp, #8
25278     A7 1E 02 FB | 	rdlong	local01, fp
2527c     04 4E 85 F1 | 	sub	fp, #4
25280     18 1E 06 F1 | 	add	local01, #24
25284     0F 15 02 FB | 	rdlong	arg02, local01
25288     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2528c     08 4E 05 F1 | 	add	fp, #8
25290     A7 FA 61 FC | 	wrlong	result1, fp
25294     00 FA 4D F2 | 	cmps	result1, #0 wz
25298     08 4E 85 F1 | 	sub	fp, #8
2529c     88 00 90 5D |  if_ne	jmp	#LR__3880
252a0     0C 4E 05 F1 | 	add	fp, #12
252a4     A7 20 02 FB | 	rdlong	local02, fp
252a8     0C 20 06 F1 | 	add	local02, #12
252ac     10 13 02 FB | 	rdlong	arg01, local02
252b0     08 4E 85 F1 | 	sub	fp, #8
252b4     A7 1E 02 FB | 	rdlong	local01, fp
252b8     1C 1E 06 F1 | 	add	local01, #28
252bc     0F 15 02 FB | 	rdlong	arg02, local01
252c0     14 4E 05 F1 | 	add	fp, #20
252c4     A7 16 02 FB | 	rdlong	arg03, fp
252c8     10 4E 05 F1 | 	add	fp, #16
252cc     A7 18 C2 FA | 	rdbyte	arg04, fp
252d0     28 4E 85 F1 | 	sub	fp, #40
252d4     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
252d8     0C 4E 05 F1 | 	add	fp, #12
252dc     A7 30 02 FB | 	rdlong	local10, fp
252e0     03 30 06 F1 | 	add	local10, #3
252e4     18 03 48 FC | 	wrbyte	#1, local10
252e8     08 4E 85 F1 | 	sub	fp, #8
252ec     A7 12 02 FB | 	rdlong	arg01, fp
252f0     04 4E 85 F1 | 	sub	fp, #4
252f4     00 14 06 F6 | 	mov	arg02, #0
252f8     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
252fc     08 4E 05 F1 | 	add	fp, #8
25300     A7 FA 61 FC | 	wrlong	result1, fp
25304     00 FA 4D F2 | 	cmps	result1, #0 wz
25308     08 4E 85 F1 | 	sub	fp, #8
2530c     18 00 90 5D |  if_ne	jmp	#LR__3879
25310     18 4E 05 F1 | 	add	fp, #24
25314     A7 30 02 FB | 	rdlong	local10, fp
25318     01 30 8E F1 | 	sub	local10, #1 wz
2531c     A7 30 62 FC | 	wrlong	local10, fp
25320     18 4E 85 F1 | 	sub	fp, #24
25324     44 FF 9F 5D |  if_ne	jmp	#LR__3878
25328                 | LR__3879
25328                 | LR__3880
25328                 | LR__3881
25328                 | LR__3882
25328     08 4E 05 F1 | 	add	fp, #8
2532c     A7 30 0A FB | 	rdlong	local10, fp wz
25330     08 4E 85 F1 | 	sub	fp, #8
25334     B4 00 90 5D |  if_ne	jmp	#LR__3884
25338     0C 4E 05 F1 | 	add	fp, #12
2533c     A7 12 02 FB | 	rdlong	arg01, fp
25340     08 4E 85 F1 | 	sub	fp, #8
25344     A7 1E 02 FB | 	rdlong	local01, fp
25348     04 4E 85 F1 | 	sub	fp, #4
2534c     18 1E 06 F1 | 	add	local01, #24
25350     0F 15 02 FB | 	rdlong	arg02, local01
25354     18 E6 BF FD | 	call	#_fatfs_cc_move_window
25358     08 4E 05 F1 | 	add	fp, #8
2535c     A7 FA 61 FC | 	wrlong	result1, fp
25360     08 4E 85 F1 | 	sub	fp, #8
25364     00 FA 0D F2 | 	cmp	result1, #0 wz
25368     80 00 90 5D |  if_ne	jmp	#LR__3883
2536c     04 4E 05 F1 | 	add	fp, #4
25370     A7 20 02 FB | 	rdlong	local02, fp
25374     04 4E 85 F1 | 	sub	fp, #4
25378     1C 20 06 F1 | 	add	local02, #28
2537c     10 13 02 FB | 	rdlong	arg01, local02
25380     00 14 06 F6 | 	mov	arg02, #0
25384     20 16 06 F6 | 	mov	arg03, #32
25388     98 00 A0 FD | 	call	#\builtin_bytefill_
2538c     04 4E 05 F1 | 	add	fp, #4
25390     A7 14 02 FB | 	rdlong	arg02, fp
25394     0A 1F 02 F6 | 	mov	local01, arg02
25398     1C 1E 06 F1 | 	add	local01, #28
2539c     0F 13 02 FB | 	rdlong	arg01, local01
253a0     04 4E 85 F1 | 	sub	fp, #4
253a4     20 14 06 F1 | 	add	arg02, #32
253a8     0B 16 06 F6 | 	mov	arg03, #11
253ac     4C 6E BF FD | 	call	#__system____builtin_memmove
253b0     04 4E 05 F1 | 	add	fp, #4
253b4     A7 2E 02 FB | 	rdlong	local09, fp
253b8     17 31 02 F6 | 	mov	local10, local09
253bc     1C 30 06 F1 | 	add	local10, #28
253c0     18 1F 02 FB | 	rdlong	local01, local10
253c4     2B 2E 06 F1 | 	add	local09, #43
253c8     17 31 C2 FA | 	rdbyte	local10, local09
253cc     18 30 06 F5 | 	and	local10, #24
253d0     0C 1E 06 F1 | 	add	local01, #12
253d4     0F 31 42 FC | 	wrbyte	local10, local01
253d8     08 4E 05 F1 | 	add	fp, #8
253dc     A7 30 02 FB | 	rdlong	local10, fp
253e0     0C 4E 85 F1 | 	sub	fp, #12
253e4     03 30 06 F1 | 	add	local10, #3
253e8     18 03 48 FC | 	wrbyte	#1, local10
253ec                 | LR__3883
253ec                 | LR__3884
253ec                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
253ec                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
253ec                 | ' 
253ec                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
253ec                 | ' 
253ec                 | ' 			fs->wflag = 1;
253ec                 | ' 		}
253ec                 | ' 	}
253ec                 | ' 
253ec                 | ' 	return res;
253ec     08 4E 05 F1 | 	add	fp, #8
253f0     A7 FA 01 FB | 	rdlong	result1, fp
253f4     08 4E 85 F1 | 	sub	fp, #8
253f8                 | LR__3885
253f8     A7 F0 03 F6 | 	mov	ptra, fp
253fc     B2 00 A0 FD | 	call	#popregs_
25400                 | _fatfs_cc_dir_register_ret
25400     2D 00 64 FD | 	ret
25404                 | 
25404                 | _fatfs_cc_dir_remove
25404     05 4A 05 F6 | 	mov	COUNT_, #5
25408     A8 00 A0 FD | 	call	#pushregs_
2540c     09 1F 02 F6 | 	mov	local01, arg01
25410     0F 21 02 FB | 	rdlong	local02, local01
25414     10 1E 06 F1 | 	add	local01, #16
25418     0F 23 02 FB | 	rdlong	local03, local01
2541c     1C 1E 06 F1 | 	add	local01, #28
25420     0F 15 02 FB | 	rdlong	arg02, local01
25424     2C 1E 86 F1 | 	sub	local01, #44
25428     FF FF 7F FF 
2542c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
25430     00 24 06 A6 |  if_e	mov	local04, #0
25434     18 00 90 AD |  if_e	jmp	#LR__3890
25438     0F 13 02 F6 | 	mov	arg01, local01
2543c     2C 1E 06 F1 | 	add	local01, #44
25440     0F 15 02 FB | 	rdlong	arg02, local01
25444     2C 1E 86 F1 | 	sub	local01, #44
25448     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2544c     FD 24 02 F6 | 	mov	local04, result1
25450                 | LR__3890
25450     12 27 0A F6 | 	mov	local05, local04 wz
25454     64 00 90 5D |  if_ne	jmp	#LR__3893
25458                 | ' 		do {
25458                 | LR__3891
25458     18 1E 06 F1 | 	add	local01, #24
2545c     0F 15 02 FB | 	rdlong	arg02, local01
25460     18 1E 86 F1 | 	sub	local01, #24
25464     10 13 02 F6 | 	mov	arg01, local02
25468     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2546c     FD 26 0A F6 | 	mov	local05, result1 wz
25470     40 00 90 5D |  if_ne	jmp	#LR__3892
25474     1C 1E 06 F1 | 	add	local01, #28
25478     0F 25 02 FB | 	rdlong	local04, local01
2547c     12 CB 49 FC | 	wrbyte	#229, local04
25480     03 20 06 F1 | 	add	local02, #3
25484     10 03 48 FC | 	wrbyte	#1, local02
25488     03 20 86 F1 | 	sub	local02, #3
2548c     0C 1E 86 F1 | 	sub	local01, #12
25490     0F 25 02 FB | 	rdlong	local04, local01
25494     10 1E 86 F1 | 	sub	local01, #16
25498     11 25 12 F2 | 	cmp	local04, local03 wc
2549c     14 00 90 3D |  if_ae	jmp	#LR__3892
254a0     0F 13 02 F6 | 	mov	arg01, local01
254a4     00 14 06 F6 | 	mov	arg02, #0
254a8     90 EF BF FD | 	call	#_fatfs_cc_dir_next
254ac     FD 26 0A F6 | 	mov	local05, result1 wz
254b0     A4 FF 9F AD |  if_e	jmp	#LR__3891
254b4                 | LR__3892
254b4     04 26 0E F2 | 	cmp	local05, #4 wz
254b8     02 26 06 A6 |  if_e	mov	local05, #2
254bc                 | LR__3893
254bc                 | ' 	}
254bc                 | ' #line 2590 "ff.c"
254bc                 | ' 	return res;
254bc     13 FB 01 F6 | 	mov	result1, local05
254c0     A7 F0 03 F6 | 	mov	ptra, fp
254c4     B2 00 A0 FD | 	call	#popregs_
254c8                 | _fatfs_cc_dir_remove_ret
254c8     2D 00 64 FD | 	ret
254cc                 | 
254cc                 | _fatfs_cc_get_fileinfo
254cc     0F 4A 05 F6 | 	mov	COUNT_, #15
254d0     A8 00 A0 FD | 	call	#pushregs_
254d4     09 1F 02 F6 | 	mov	local01, arg01
254d8     0A 21 02 F6 | 	mov	local02, arg02
254dc     0F 23 02 FB | 	rdlong	local03, local01
254e0     1C 20 06 F1 | 	add	local02, #28
254e4     10 01 48 FC | 	wrbyte	#0, local02
254e8     1C 20 86 F1 | 	sub	local02, #28
254ec     18 1E 06 F1 | 	add	local01, #24
254f0     0F 25 0A FB | 	rdlong	local04, local01 wz
254f4     18 1E 86 F1 | 	sub	local01, #24
254f8     90 03 90 AD |  if_e	jmp	#LR__3914
254fc     2C 1E 06 F1 | 	add	local01, #44
25500     0F 25 02 FB | 	rdlong	local04, local01
25504     2C 1E 86 F1 | 	sub	local01, #44
25508     FF FF 7F FF 
2550c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
25510     D8 00 90 AD |  if_e	jmp	#LR__3903
25514     00 26 06 F6 | 	mov	local05, #0
25518     00 28 06 F6 | 	mov	local06, #0
2551c     00 2A 06 F6 | 	mov	local07, #0
25520                 | ' 			si = di = 0;
25520                 | ' 			hs = 0;
25520                 | ' 			while (fs->lfnbuf[si] != 0) {
25520                 | LR__3900
25520     0C 22 06 F1 | 	add	local03, #12
25524     11 25 02 FB | 	rdlong	local04, local03
25528     0C 22 86 F1 | 	sub	local03, #12
2552c     14 2D 02 F6 | 	mov	local08, local06
25530     01 2C 66 F0 | 	shl	local08, #1
25534     12 2D 02 F1 | 	add	local08, local04
25538     16 25 EA FA | 	rdword	local04, local08 wz
2553c     90 00 90 AD |  if_e	jmp	#LR__3902
25540     0C 22 06 F1 | 	add	local03, #12
25544     11 2F 02 FB | 	rdlong	local09, local03
25548     0C 22 86 F1 | 	sub	local03, #12
2554c     14 31 02 F6 | 	mov	local10, local06
25550     01 30 66 F0 | 	shl	local10, #1
25554     17 31 02 F1 | 	add	local10, local09
25558     18 33 E2 FA | 	rdword	local11, local10
2555c     15 25 02 F6 | 	mov	local04, local07
25560     0F 24 4E F7 | 	zerox	local04, #15 wz
25564     01 28 06 F1 | 	add	local06, #1
25568     24 00 90 5D |  if_ne	jmp	#LR__3901
2556c     19 35 32 F9 | 	getword	local12, local11, #0
25570     6C 00 00 FF 
25574     00 34 16 F2 | 	cmp	local12, ##55296 wc
25578     14 00 90 CD |  if_b	jmp	#LR__3901
2557c     19 37 32 F9 | 	getword	local13, local11, #0
25580     70 00 00 FF 
25584     00 36 16 F2 | 	cmp	local13, ##57344 wc
25588     19 2B 02 C6 |  if_b	mov	local07, local11
2558c                 | ' 					hs = wc; continue;
2558c     90 FF 9F CD |  if_b	jmp	#LR__3900
25590                 | LR__3901
25590     15 13 32 F9 | 	getword	arg01, local07, #0
25594     10 12 66 F0 | 	shl	arg01, #16
25598     19 33 32 F9 | 	getword	local11, local11, #0
2559c     19 13 42 F5 | 	or	arg01, local11
255a0     13 15 02 F6 | 	mov	arg02, local05
255a4     1C 20 06 F1 | 	add	local02, #28
255a8     10 15 02 F1 | 	add	arg02, local02
255ac     FF 16 06 F6 | 	mov	arg03, #255
255b0     13 17 82 F1 | 	sub	arg03, local05
255b4     1C 20 86 F1 | 	sub	local02, #28
255b8     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
255bc     FD 38 0A F6 | 	mov	local14, result1 wz
255c0     00 26 06 A6 |  if_e	mov	local05, #0
255c4     1C 27 02 51 |  if_ne	add	local05, local14
255c8     00 2A 06 56 |  if_ne	mov	local07, #0
255cc     50 FF 9F 5D |  if_ne	jmp	#LR__3900
255d0                 | LR__3902
255d0     15 25 02 F6 | 	mov	local04, local07
255d4     0F 24 4E F7 | 	zerox	local04, #15 wz
255d8     00 26 06 56 |  if_ne	mov	local05, #0
255dc     1C 20 06 F1 | 	add	local02, #28
255e0     10 27 02 F1 | 	add	local05, local02
255e4     13 01 48 FC | 	wrbyte	#0, local05
255e8     1C 20 86 F1 | 	sub	local02, #28
255ec                 | LR__3903
255ec     00 26 06 F6 | 	mov	local05, #0
255f0     00 28 06 F6 | 	mov	local06, #0
255f4                 | ' 			fno->fname[di] = 0;
255f4                 | ' 		}
255f4                 | ' 	}
255f4                 | ' 
255f4                 | ' 	si = di = 0;
255f4                 | ' 	while (si < 11) {
255f4                 | LR__3904
255f4     0B 28 16 F2 | 	cmp	local06, #11 wc
255f8     20 01 90 3D |  if_ae	jmp	#LR__3907
255fc     1C 1E 06 F1 | 	add	local01, #28
25600     0F 2F 02 FB | 	rdlong	local09, local01
25604     1C 1E 86 F1 | 	sub	local01, #28
25608     14 31 02 F6 | 	mov	local10, local06
2560c     17 31 02 F1 | 	add	local10, local09
25610     18 33 C2 FA | 	rdbyte	local11, local10
25614     19 25 32 F9 | 	getword	local04, local11, #0
25618     20 24 0E F2 | 	cmp	local04, #32 wz
2561c     01 28 06 F1 | 	add	local06, #1
25620     D0 FF 9F AD |  if_e	jmp	#LR__3904
25624     19 25 32 F9 | 	getword	local04, local11, #0
25628     05 24 0E F2 | 	cmp	local04, #5 wz
2562c     E5 32 06 A6 |  if_e	mov	local11, #229
25630     09 28 0E F2 | 	cmp	local06, #9 wz
25634     20 00 90 5D |  if_ne	jmp	#LR__3905
25638     0C 26 16 F2 | 	cmp	local05, #12 wc
2563c     18 00 90 3D |  if_ae	jmp	#LR__3905
25640     13 37 02 F6 | 	mov	local13, local05
25644     0C 20 06 F1 | 	add	local02, #12
25648     10 37 02 F1 | 	add	local13, local02
2564c     1B 5D 48 FC | 	wrbyte	#46, local13
25650     01 26 06 F1 | 	add	local05, #1
25654     0C 20 86 F1 | 	sub	local02, #12
25658                 | LR__3905
25658     19 13 32 F9 | 	getword	arg01, local11, #0
2565c     07 12 4E F7 | 	zerox	arg01, #7 wz
25660     00 FA 05 56 |  if_ne	mov	result1, #0
25664                 | ' 
25664                 | ' 	return 0;
25664     00 FA 05 A6 |  if_e	mov	result1, #0
25668     00 FA 0D F2 | 	cmp	result1, #0 wz
2566c     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
25670     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
25674     50 00 90 AD |  if_e	jmp	#LR__3906
25678     1C 1E 06 F1 | 	add	local01, #28
2567c     0F 31 02 FB | 	rdlong	local10, local01
25680     1C 1E 86 F1 | 	sub	local01, #28
25684     14 2D 02 F6 | 	mov	local08, local06
25688     18 2D 02 F1 | 	add	local08, local10
2568c     16 13 CA FA | 	rdbyte	arg01, local08 wz
25690     00 FA 05 56 |  if_ne	mov	result1, #0
25694                 | ' 
25694                 | ' 	return 0;
25694     00 FA 05 A6 |  if_e	mov	result1, #0
25698     00 FA 0D F2 | 	cmp	result1, #0 wz
2569c     28 00 90 AD |  if_e	jmp	#LR__3906
256a0     19 33 32 F9 | 	getword	local11, local11, #0
256a4     08 32 66 F0 | 	shl	local11, #8
256a8     1C 1E 06 F1 | 	add	local01, #28
256ac     0F 39 02 FB | 	rdlong	local14, local01
256b0     1C 1E 86 F1 | 	sub	local01, #28
256b4     14 2F 02 F6 | 	mov	local09, local06
256b8     1C 2F 02 F1 | 	add	local09, local14
256bc     17 35 C2 FA | 	rdbyte	local12, local09
256c0     1A 33 42 F5 | 	or	local11, local12
256c4     01 28 06 F1 | 	add	local06, #1
256c8                 | LR__3906
256c8     19 13 02 F6 | 	mov	arg01, local11
256cc     01 00 00 FF 
256d0     52 15 06 F6 | 	mov	arg02, ##850
256d4     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
256d8     FD 32 02 F6 | 	mov	local11, result1
256dc     19 25 02 F6 | 	mov	local04, local11
256e0     0F 24 4E F7 | 	zerox	local04, #15 wz
256e4     00 26 06 A6 |  if_e	mov	local05, #0
256e8     30 00 90 AD |  if_e	jmp	#LR__3907
256ec     19 13 32 F9 | 	getword	arg01, local11, #0
256f0     13 15 02 F6 | 	mov	arg02, local05
256f4     0C 20 06 F1 | 	add	local02, #12
256f8     10 15 02 F1 | 	add	arg02, local02
256fc     0C 16 06 F6 | 	mov	arg03, #12
25700     13 17 82 F1 | 	sub	arg03, local05
25704     0C 20 86 F1 | 	sub	local02, #12
25708     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2570c     FD 38 0A F6 | 	mov	local14, result1 wz
25710     00 26 06 A6 |  if_e	mov	local05, #0
25714     1C 27 02 51 |  if_ne	add	local05, local14
25718     D8 FE 9F 5D |  if_ne	jmp	#LR__3904
2571c                 | LR__3907
2571c     13 25 02 F6 | 	mov	local04, local05
25720     0C 20 06 F1 | 	add	local02, #12
25724     10 25 02 F1 | 	add	local04, local02
25728     12 01 48 FC | 	wrbyte	#0, local04
2572c     10 20 06 F1 | 	add	local02, #16
25730     10 25 CA FA | 	rdbyte	local04, local02 wz
25734     1C 20 86 F1 | 	sub	local02, #28
25738     F8 00 90 5D |  if_ne	jmp	#LR__3913
2573c     00 26 0E F2 | 	cmp	local05, #0 wz
25740     1C 00 90 5D |  if_ne	jmp	#LR__3908
25744     13 37 02 F6 | 	mov	local13, local05
25748     1C 20 06 F1 | 	add	local02, #28
2574c     10 37 02 F1 | 	add	local13, local02
25750     1B 7F 48 FC | 	wrbyte	#63, local13
25754     01 26 06 F1 | 	add	local05, #1
25758     1C 20 86 F1 | 	sub	local02, #28
2575c     A4 00 90 FD | 	jmp	#LR__3912
25760                 | LR__3908
25760                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
25760     00 26 06 F6 | 	mov	local05, #0
25764     00 28 06 F6 | 	mov	local06, #0
25768     08 3A 06 F6 | 	mov	local15, #8
2576c                 | LR__3909
2576c     14 25 02 F6 | 	mov	local04, local06
25770     0C 20 06 F1 | 	add	local02, #12
25774     10 25 02 F1 | 	add	local04, local02
25778     12 37 CA FA | 	rdbyte	local13, local04 wz
2577c     0C 20 86 F1 | 	sub	local02, #12
25780     80 00 90 AD |  if_e	jmp	#LR__3911
25784     14 2D 02 F6 | 	mov	local08, local06
25788     0C 20 06 F1 | 	add	local02, #12
2578c     10 2D 02 F1 | 	add	local08, local02
25790     16 33 C2 FA | 	rdbyte	local11, local08
25794     19 39 32 F9 | 	getword	local14, local11, #0
25798     2E 38 0E F2 | 	cmp	local14, #46 wz
2579c     0C 20 86 F1 | 	sub	local02, #12
257a0     10 3A 06 A6 |  if_e	mov	local15, #16
257a4     19 39 32 F9 | 	getword	local14, local11, #0
257a8     41 38 16 F2 | 	cmp	local14, #65 wc
257ac     30 00 90 CD |  if_b	jmp	#LR__3910
257b0     19 2D 32 F9 | 	getword	local08, local11, #0
257b4     5B 2C 16 F2 | 	cmp	local08, #91 wc
257b8     24 00 90 3D |  if_ae	jmp	#LR__3910
257bc     1C 1E 06 F1 | 	add	local01, #28
257c0     0F 2F 02 FB | 	rdlong	local09, local01
257c4     1C 1E 86 F1 | 	sub	local01, #28
257c8     0C 2E 06 F1 | 	add	local09, #12
257cc     17 31 C2 FA | 	rdbyte	local10, local09
257d0     1D 39 E2 F8 | 	getbyte	local14, local15, #0
257d4     1C 31 CA F7 | 	test	local10, local14 wz
257d8     19 33 32 59 |  if_ne	getword	local11, local11, #0
257dc     20 32 06 51 |  if_ne	add	local11, #32
257e0                 | LR__3910
257e0     13 39 02 F6 | 	mov	local14, local05
257e4     1C 20 06 F1 | 	add	local02, #28
257e8     10 39 02 F1 | 	add	local14, local02
257ec     19 33 32 F9 | 	getword	local11, local11, #0
257f0     1C 33 42 FC | 	wrbyte	local11, local14
257f4     01 28 06 F1 | 	add	local06, #1
257f8     01 26 06 F1 | 	add	local05, #1
257fc     1C 20 86 F1 | 	sub	local02, #28
25800     68 FF 9F FD | 	jmp	#LR__3909
25804                 | LR__3911
25804                 | LR__3912
25804     1C 20 06 F1 | 	add	local02, #28
25808     10 27 02 F1 | 	add	local05, local02
2580c     13 01 48 FC | 	wrbyte	#0, local05
25810     1C 1E 06 F1 | 	add	local01, #28
25814     0F 25 02 FB | 	rdlong	local04, local01
25818     1C 1E 86 F1 | 	sub	local01, #28
2581c     0C 24 06 F1 | 	add	local04, #12
25820     12 37 CA FA | 	rdbyte	local13, local04 wz
25824     1C 20 86 F1 | 	sub	local02, #28
25828     0C 20 06 A1 |  if_e	add	local02, #12
2582c     10 01 48 AC |  if_e	wrbyte	#0, local02
25830     0C 20 86 A1 |  if_e	sub	local02, #12
25834                 | LR__3913
25834     1C 1E 06 F1 | 	add	local01, #28
25838     0F 35 02 FB | 	rdlong	local12, local01
2583c     0B 34 06 F1 | 	add	local12, #11
25840     1A 25 C2 FA | 	rdbyte	local04, local12
25844     3F 24 06 F5 | 	and	local04, #63
25848     08 20 06 F1 | 	add	local02, #8
2584c     10 25 42 FC | 	wrbyte	local04, local02
25850     08 20 86 F1 | 	sub	local02, #8
25854     0F 13 02 FB | 	rdlong	arg01, local01
25858     1C 12 06 F1 | 	add	arg01, #28
2585c                 | ' {
2585c                 | ' 
2585c                 | ' 	return *((DWORD*)ptr);
2585c     09 FB 01 FB | 	rdlong	result1, arg01
25860     10 FB 61 FC | 	wrlong	result1, local02
25864     0F 13 02 FB | 	rdlong	arg01, local01
25868     16 12 06 F1 | 	add	arg01, #22
2586c                 | ' {
2586c                 | ' 
2586c                 | ' 	return *((WORD*)ptr);
2586c     09 FB E1 FA | 	rdword	result1, arg01
25870     06 20 06 F1 | 	add	local02, #6
25874     10 FB 51 FC | 	wrword	result1, local02
25878     0F 13 02 FB | 	rdlong	arg01, local01
2587c     18 12 06 F1 | 	add	arg01, #24
25880                 | ' {
25880                 | ' 
25880                 | ' 	return *((WORD*)ptr);
25880     09 FB E1 FA | 	rdword	result1, arg01
25884     02 20 86 F1 | 	sub	local02, #2
25888     10 FB 51 FC | 	wrword	result1, local02
2588c                 | LR__3914
2588c     A7 F0 03 F6 | 	mov	ptra, fp
25890     B2 00 A0 FD | 	call	#popregs_
25894                 | _fatfs_cc_get_fileinfo_ret
25894     2D 00 64 FD | 	ret
25898                 | 
25898                 | _fatfs_cc_create_name
25898     0D 4A 05 F6 | 	mov	COUNT_, #13
2589c     A8 00 A0 FD | 	call	#pushregs_
258a0     34 F0 07 F1 | 	add	ptra, #52
258a4     04 4E 05 F1 | 	add	fp, #4
258a8     A7 12 62 FC | 	wrlong	arg01, fp
258ac     04 4E 05 F1 | 	add	fp, #4
258b0     A7 14 62 FC | 	wrlong	arg02, fp
258b4     0A FB 01 FB | 	rdlong	result1, arg02
258b8     28 4E 05 F1 | 	add	fp, #40
258bc     A7 FA 61 FC | 	wrlong	result1, fp
258c0     2C 4E 85 F1 | 	sub	fp, #44
258c4     A7 FA 01 FB | 	rdlong	result1, fp
258c8     FD 1E 02 FB | 	rdlong	local01, result1
258cc     0C 1E 06 F1 | 	add	local01, #12
258d0     0F 21 02 FB | 	rdlong	local02, local01
258d4     14 4E 05 F1 | 	add	fp, #20
258d8     A7 20 62 FC | 	wrlong	local02, fp
258dc     14 4E 05 F1 | 	add	fp, #20
258e0     A7 00 68 FC | 	wrlong	#0, fp
258e4     2C 4E 85 F1 | 	sub	fp, #44
258e8                 | ' 
258e8                 | ' 
258e8                 | ' 
258e8                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
258e8                 | ' 	for (;;) {
258e8                 | LR__3920
258e8     30 4E 05 F1 | 	add	fp, #48
258ec     A7 12 02 F6 | 	mov	arg01, fp
258f0     30 4E 85 F1 | 	sub	fp, #48
258f4     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
258f8     1C 4E 05 F1 | 	add	fp, #28
258fc     A7 FA 61 FC | 	wrlong	result1, fp
25900     1C 4E 85 F1 | 	sub	fp, #28
25904     FF FF 7F FF 
25908     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2590c     06 FA 05 A6 |  if_e	mov	result1, #6
25910     74 08 90 AD |  if_e	jmp	#LR__3960
25914     1C 4E 05 F1 | 	add	fp, #28
25918     A7 1E 02 FB | 	rdlong	local01, fp
2591c     1C 4E 85 F1 | 	sub	fp, #28
25920     80 00 00 FF 
25924     00 1E 16 F2 | 	cmp	local01, ##65536 wc
25928     3C 00 90 CD |  if_b	jmp	#LR__3921
2592c     18 4E 05 F1 | 	add	fp, #24
25930     A7 22 02 FB | 	rdlong	local03, fp
25934     14 4E 05 F1 | 	add	fp, #20
25938     A7 1E 02 FB | 	rdlong	local01, fp
2593c     0F 25 02 F6 | 	mov	local04, local01
25940     01 24 06 F1 | 	add	local04, #1
25944     A7 24 62 FC | 	wrlong	local04, fp
25948     01 1E 66 F0 | 	shl	local01, #1
2594c     11 1F 02 F1 | 	add	local01, local03
25950     10 4E 85 F1 | 	sub	fp, #16
25954     A7 26 02 FB | 	rdlong	local05, fp
25958     1C 4E 85 F1 | 	sub	fp, #28
2595c     13 29 02 F6 | 	mov	local06, local05
25960     10 28 46 F0 | 	shr	local06, #16
25964     0F 29 52 FC | 	wrword	local06, local01
25968                 | LR__3921
25968     1C 4E 05 F1 | 	add	fp, #28
2596c     A7 1E 02 FB | 	rdlong	local01, fp
25970     08 4E 85 F1 | 	sub	fp, #8
25974     A7 1E 52 FC | 	wrword	local01, fp
25978     A7 1E E2 FA | 	rdword	local01, fp
2597c     14 4E 85 F1 | 	sub	fp, #20
25980     20 1E 16 F2 | 	cmp	local01, #32 wc
25984     B0 00 90 CD |  if_b	jmp	#LR__3923
25988     14 4E 05 F1 | 	add	fp, #20
2598c     A7 1E E2 FA | 	rdword	local01, fp
25990     14 4E 85 F1 | 	sub	fp, #20
25994     2F 1E 0E F2 | 	cmp	local01, #47 wz
25998     14 4E 05 51 |  if_ne	add	fp, #20
2599c     A7 24 E2 5A |  if_ne	rdword	local04, fp
259a0     14 4E 85 51 |  if_ne	sub	fp, #20
259a4     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
259a8     8C 00 90 AD |  if_e	jmp	#LR__3923
259ac     14 4E 05 F1 | 	add	fp, #20
259b0     A7 12 E2 FA | 	rdword	arg01, fp
259b4     14 4E 85 F1 | 	sub	fp, #20
259b8     80 12 16 F2 | 	cmp	arg01, #128 wc
259bc     24 00 90 3D |  if_ae	jmp	#LR__3922
259c0     5C 01 00 FF 
259c4     FC 12 06 F6 | 	mov	arg01, ##@LR__4582
259c8     14 4E 05 F1 | 	add	fp, #20
259cc     A7 14 E2 FA | 	rdword	arg02, fp
259d0     14 4E 85 F1 | 	sub	fp, #20
259d4     FC D0 BF FD | 	call	#_fatfs_cc_strchr
259d8     00 FA 0D F2 | 	cmp	result1, #0 wz
259dc     06 FA 05 56 |  if_ne	mov	result1, #6
259e0     A4 07 90 5D |  if_ne	jmp	#LR__3960
259e4                 | LR__3922
259e4     2C 4E 05 F1 | 	add	fp, #44
259e8     A7 28 02 FB | 	rdlong	local06, fp
259ec     2C 4E 85 F1 | 	sub	fp, #44
259f0     FF 28 16 F2 | 	cmp	local06, #255 wc
259f4     06 FA 05 36 |  if_ae	mov	result1, #6
259f8     8C 07 90 3D |  if_ae	jmp	#LR__3960
259fc     18 4E 05 F1 | 	add	fp, #24
25a00     A7 22 02 FB | 	rdlong	local03, fp
25a04     14 4E 05 F1 | 	add	fp, #20
25a08     A7 20 02 FB | 	rdlong	local02, fp
25a0c     10 25 02 F6 | 	mov	local04, local02
25a10     01 24 06 F1 | 	add	local04, #1
25a14     A7 24 62 FC | 	wrlong	local04, fp
25a18     10 1F 02 F6 | 	mov	local01, local02
25a1c     01 1E 66 F0 | 	shl	local01, #1
25a20     11 1F 02 F1 | 	add	local01, local03
25a24     18 4E 85 F1 | 	sub	fp, #24
25a28     A7 28 E2 FA | 	rdword	local06, fp
25a2c     14 4E 85 F1 | 	sub	fp, #20
25a30     0F 29 52 FC | 	wrword	local06, local01
25a34     B0 FE 9F FD | 	jmp	#LR__3920
25a38                 | LR__3923
25a38     14 4E 05 F1 | 	add	fp, #20
25a3c     A7 2A E2 FA | 	rdword	local07, fp
25a40     14 4E 85 F1 | 	sub	fp, #20
25a44     20 2A 16 F2 | 	cmp	local07, #32 wc
25a48     10 4E 05 C1 |  if_b	add	fp, #16
25a4c     A7 08 48 CC |  if_b	wrbyte	#4, fp
25a50     10 4E 85 C1 |  if_b	sub	fp, #16
25a54     74 00 90 CD |  if_b	jmp	#LR__3928
25a58     97 24 48 FB | 	callpa	#(@LR__3926-@LR__3924)>>2,fcache_load_ptr_
25a5c                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
25a5c                 | LR__3924
25a5c     30 4E 05 F1 | 	add	fp, #48
25a60     A7 24 02 FB | 	rdlong	local04, fp
25a64     30 4E 85 F1 | 	sub	fp, #48
25a68     12 2B C2 FA | 	rdbyte	local07, local04
25a6c     2F 2A 0E F2 | 	cmp	local07, #47 wz
25a70     18 00 90 AD |  if_e	jmp	#LR__3925
25a74     30 4E 05 F1 | 	add	fp, #48
25a78     A7 24 02 FB | 	rdlong	local04, fp
25a7c     30 4E 85 F1 | 	sub	fp, #48
25a80     12 21 C2 FA | 	rdbyte	local02, local04
25a84     5C 20 0E F2 | 	cmp	local02, #92 wz
25a88     18 00 90 5D |  if_ne	jmp	#LR__3927
25a8c                 | LR__3925
25a8c     30 4E 05 F1 | 	add	fp, #48
25a90     A7 1E 02 FB | 	rdlong	local01, fp
25a94     01 1E 06 F1 | 	add	local01, #1
25a98     A7 1E 62 FC | 	wrlong	local01, fp
25a9c     30 4E 85 F1 | 	sub	fp, #48
25aa0     B8 FF 9F FD | 	jmp	#LR__3924
25aa4                 | LR__3926
25aa4                 | LR__3927
25aa4     10 4E 05 F1 | 	add	fp, #16
25aa8     A7 00 48 FC | 	wrbyte	#0, fp
25aac     20 4E 05 F1 | 	add	fp, #32
25ab0     A7 28 02 FB | 	rdlong	local06, fp
25ab4     30 4E 85 F1 | 	sub	fp, #48
25ab8     14 2B C2 FA | 	rdbyte	local07, local06
25abc     20 2A 16 F2 | 	cmp	local07, #32 wc
25ac0     10 4E 05 C1 |  if_b	add	fp, #16
25ac4     A7 08 48 CC |  if_b	wrbyte	#4, fp
25ac8     10 4E 85 C1 |  if_b	sub	fp, #16
25acc                 | LR__3928
25acc     08 4E 05 F1 | 	add	fp, #8
25ad0     A7 2A 02 FB | 	rdlong	local07, fp
25ad4     28 4E 05 F1 | 	add	fp, #40
25ad8     A7 1E 02 FB | 	rdlong	local01, fp
25adc     30 4E 85 F1 | 	sub	fp, #48
25ae0     15 1F 62 FC | 	wrlong	local01, local07
25ae4     97 38 48 FB | 	callpa	#(@LR__3930-@LR__3929)>>2,fcache_load_ptr_
25ae8                 | ' 	}
25ae8                 | ' 	*path = p;
25ae8                 | ' #line 2862 "ff.c"
25ae8                 | ' 	while (di) {
25ae8                 | LR__3929
25ae8     2C 4E 05 F1 | 	add	fp, #44
25aec     A7 2A 0A FB | 	rdlong	local07, fp wz
25af0     2C 4E 85 F1 | 	sub	fp, #44
25af4     60 00 90 AD |  if_e	jmp	#LR__3931
25af8     18 4E 05 F1 | 	add	fp, #24
25afc     A7 28 02 FB | 	rdlong	local06, fp
25b00     14 4E 05 F1 | 	add	fp, #20
25b04     A7 24 02 FB | 	rdlong	local04, fp
25b08     01 24 86 F1 | 	sub	local04, #1
25b0c     01 24 66 F0 | 	shl	local04, #1
25b10     14 25 02 F1 | 	add	local04, local06
25b14     12 29 E2 FA | 	rdword	local06, local04
25b18     18 4E 85 F1 | 	sub	fp, #24
25b1c     A7 28 52 FC | 	wrword	local06, fp
25b20     A7 2A E2 FA | 	rdword	local07, fp
25b24     14 4E 85 F1 | 	sub	fp, #20
25b28     20 2A 0E F2 | 	cmp	local07, #32 wz
25b2c     14 4E 05 51 |  if_ne	add	fp, #20
25b30     A7 1E E2 5A |  if_ne	rdword	local01, fp
25b34     14 4E 85 51 |  if_ne	sub	fp, #20
25b38     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
25b3c     18 00 90 5D |  if_ne	jmp	#LR__3931
25b40     2C 4E 05 F1 | 	add	fp, #44
25b44     A7 1E 02 FB | 	rdlong	local01, fp
25b48     01 1E 86 F1 | 	sub	local01, #1
25b4c     A7 1E 62 FC | 	wrlong	local01, fp
25b50     2C 4E 85 F1 | 	sub	fp, #44
25b54     90 FF 9F FD | 	jmp	#LR__3929
25b58                 | LR__3930
25b58                 | LR__3931
25b58     18 4E 05 F1 | 	add	fp, #24
25b5c     A7 2C 02 FB | 	rdlong	local08, fp
25b60     14 4E 05 F1 | 	add	fp, #20
25b64     A7 24 02 FB | 	rdlong	local04, fp
25b68     01 24 66 F0 | 	shl	local04, #1
25b6c     16 25 02 F1 | 	add	local04, local08
25b70     12 01 58 FC | 	wrword	#0, local04
25b74     A7 2A 0A FB | 	rdlong	local07, fp wz
25b78     2C 4E 85 F1 | 	sub	fp, #44
25b7c     06 FA 05 A6 |  if_e	mov	result1, #6
25b80     04 06 90 AD |  if_e	jmp	#LR__3960
25b84                 | ' 
25b84                 | ' 
25b84                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
25b84     28 4E 05 F1 | 	add	fp, #40
25b88     A7 00 68 FC | 	wrlong	#0, fp
25b8c     28 4E 85 F1 | 	sub	fp, #40
25b90     97 22 48 FB | 	callpa	#(@LR__3933-@LR__3932)>>2,fcache_load_ptr_
25b94                 | LR__3932
25b94     18 4E 05 F1 | 	add	fp, #24
25b98     A7 2E 02 FB | 	rdlong	local09, fp
25b9c     10 4E 05 F1 | 	add	fp, #16
25ba0     A7 30 02 FB | 	rdlong	local10, fp
25ba4     28 4E 85 F1 | 	sub	fp, #40
25ba8     01 30 66 F0 | 	shl	local10, #1
25bac     17 31 02 F1 | 	add	local10, local09
25bb0     18 33 E2 FA | 	rdword	local11, local10
25bb4     20 32 0E F2 | 	cmp	local11, #32 wz
25bb8     1C 00 90 5D |  if_ne	jmp	#LR__3934
25bbc     28 4E 05 F1 | 	add	fp, #40
25bc0     A7 34 02 FB | 	rdlong	local12, fp
25bc4     1A 27 02 F6 | 	mov	local05, local12
25bc8     01 26 06 F1 | 	add	local05, #1
25bcc     A7 26 62 FC | 	wrlong	local05, fp
25bd0     28 4E 85 F1 | 	sub	fp, #40
25bd4     BC FF 9F FD | 	jmp	#LR__3932
25bd8                 | LR__3933
25bd8                 | LR__3934
25bd8     28 4E 05 F1 | 	add	fp, #40
25bdc     A7 2A 02 FB | 	rdlong	local07, fp
25be0     28 4E 85 F1 | 	sub	fp, #40
25be4     01 2A 16 F2 | 	cmp	local07, #1 wc
25be8     28 00 90 3D |  if_ae	jmp	#LR__3935
25bec     18 4E 05 F1 | 	add	fp, #24
25bf0     A7 22 02 FB | 	rdlong	local03, fp
25bf4     10 4E 05 F1 | 	add	fp, #16
25bf8     A7 2E 02 FB | 	rdlong	local09, fp
25bfc     28 4E 85 F1 | 	sub	fp, #40
25c00     01 2E 66 F0 | 	shl	local09, #1
25c04     11 2F 02 F1 | 	add	local09, local03
25c08     17 1F E2 FA | 	rdword	local01, local09
25c0c     2E 1E 0E F2 | 	cmp	local01, #46 wz
25c10     14 00 90 5D |  if_ne	jmp	#LR__3936
25c14                 | LR__3935
25c14     10 4E 05 F1 | 	add	fp, #16
25c18     A7 2A C2 FA | 	rdbyte	local07, fp
25c1c     03 2A 46 F5 | 	or	local07, #3
25c20     A7 2A 42 FC | 	wrbyte	local07, fp
25c24     10 4E 85 F1 | 	sub	fp, #16
25c28                 | LR__3936
25c28     97 2C 48 FB | 	callpa	#(@LR__3938-@LR__3937)>>2,fcache_load_ptr_
25c2c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
25c2c                 | LR__3937
25c2c     2C 4E 05 F1 | 	add	fp, #44
25c30     A7 2A 02 FB | 	rdlong	local07, fp
25c34     2C 4E 85 F1 | 	sub	fp, #44
25c38     01 2A 16 F2 | 	cmp	local07, #1 wc
25c3c     44 00 90 CD |  if_b	jmp	#LR__3939
25c40     18 4E 05 F1 | 	add	fp, #24
25c44     A7 28 02 FB | 	rdlong	local06, fp
25c48     14 4E 05 F1 | 	add	fp, #20
25c4c     A7 22 02 FB | 	rdlong	local03, fp
25c50     2C 4E 85 F1 | 	sub	fp, #44
25c54     01 22 86 F1 | 	sub	local03, #1
25c58     01 22 66 F0 | 	shl	local03, #1
25c5c     14 23 02 F1 | 	add	local03, local06
25c60     11 1F E2 FA | 	rdword	local01, local03
25c64     2E 1E 0E F2 | 	cmp	local01, #46 wz
25c68     18 00 90 AD |  if_e	jmp	#LR__3939
25c6c     2C 4E 05 F1 | 	add	fp, #44
25c70     A7 1E 02 FB | 	rdlong	local01, fp
25c74     01 1E 86 F1 | 	sub	local01, #1
25c78     A7 1E 62 FC | 	wrlong	local01, fp
25c7c     2C 4E 85 F1 | 	sub	fp, #44
25c80     A8 FF 9F FD | 	jmp	#LR__3937
25c84                 | LR__3938
25c84                 | LR__3939
25c84     04 4E 05 F1 | 	add	fp, #4
25c88     A7 12 02 FB | 	rdlong	arg01, fp
25c8c     04 4E 85 F1 | 	sub	fp, #4
25c90     20 12 06 F1 | 	add	arg01, #32
25c94     20 14 06 F6 | 	mov	arg02, #32
25c98     0B 16 06 F6 | 	mov	arg03, #11
25c9c     09 37 02 F6 | 	mov	local13, arg01
25ca0     98 00 A0 FD | 	call	#\builtin_bytefill_
25ca4     1B FB 01 F6 | 	mov	result1, local13
25ca8     0C 4E 05 F1 | 	add	fp, #12
25cac     A7 00 48 FC | 	wrbyte	#0, fp
25cb0     A7 2A C2 FA | 	rdbyte	local07, fp
25cb4     14 4E 05 F1 | 	add	fp, #20
25cb8     A7 2A 62 FC | 	wrlong	local07, fp
25cbc     04 4E 05 F1 | 	add	fp, #4
25cc0     A7 10 68 FC | 	wrlong	#8, fp
25cc4     24 4E 85 F1 | 	sub	fp, #36
25cc8                 | ' 
25cc8                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
25cc8                 | ' 	i = b = 0; ni = 8;
25cc8                 | ' 	for (;;) {
25cc8                 | LR__3940
25cc8     18 4E 05 F1 | 	add	fp, #24
25ccc     A7 22 02 FB | 	rdlong	local03, fp
25cd0     10 4E 05 F1 | 	add	fp, #16
25cd4     A7 2E 02 FB | 	rdlong	local09, fp
25cd8     17 25 02 F6 | 	mov	local04, local09
25cdc     01 24 06 F1 | 	add	local04, #1
25ce0     A7 24 62 FC | 	wrlong	local04, fp
25ce4     01 2E 66 F0 | 	shl	local09, #1
25ce8     11 2F 02 F1 | 	add	local09, local03
25cec     17 29 E2 FA | 	rdword	local06, local09
25cf0     14 4E 85 F1 | 	sub	fp, #20
25cf4     A7 28 52 FC | 	wrword	local06, fp
25cf8     A7 2A EA FA | 	rdword	local07, fp wz
25cfc     14 4E 85 F1 | 	sub	fp, #20
25d00     74 03 90 AD |  if_e	jmp	#LR__3956
25d04     14 4E 05 F1 | 	add	fp, #20
25d08     A7 2A E2 FA | 	rdword	local07, fp
25d0c     14 4E 85 F1 | 	sub	fp, #20
25d10     20 2A 0E F2 | 	cmp	local07, #32 wz
25d14     30 00 90 AD |  if_e	jmp	#LR__3941
25d18     14 4E 05 F1 | 	add	fp, #20
25d1c     A7 1E E2 FA | 	rdword	local01, fp
25d20     14 4E 85 F1 | 	sub	fp, #20
25d24     2E 1E 0E F2 | 	cmp	local01, #46 wz
25d28     34 00 90 5D |  if_ne	jmp	#LR__3942
25d2c     28 4E 05 F1 | 	add	fp, #40
25d30     A7 24 02 FB | 	rdlong	local04, fp
25d34     04 4E 05 F1 | 	add	fp, #4
25d38     A7 30 02 FB | 	rdlong	local10, fp
25d3c     2C 4E 85 F1 | 	sub	fp, #44
25d40     18 25 0A F2 | 	cmp	local04, local10 wz
25d44     18 00 90 AD |  if_e	jmp	#LR__3942
25d48                 | LR__3941
25d48     10 4E 05 F1 | 	add	fp, #16
25d4c     A7 2A C2 FA | 	rdbyte	local07, fp
25d50     03 2A 46 F5 | 	or	local07, #3
25d54     A7 2A 42 FC | 	wrbyte	local07, fp
25d58     10 4E 85 F1 | 	sub	fp, #16
25d5c                 | ' 			cf |=  0x01  |  0x02 ;
25d5c                 | ' 			continue;
25d5c     68 FF 9F FD | 	jmp	#LR__3940
25d60                 | LR__3942
25d60     20 4E 05 F1 | 	add	fp, #32
25d64     A7 2A 02 FB | 	rdlong	local07, fp
25d68     04 4E 05 F1 | 	add	fp, #4
25d6c     A7 1E 02 FB | 	rdlong	local01, fp
25d70     24 4E 85 F1 | 	sub	fp, #36
25d74     0F 2B 12 F2 | 	cmp	local07, local01 wc
25d78     1C 00 90 3D |  if_ae	jmp	#LR__3943
25d7c     28 4E 05 F1 | 	add	fp, #40
25d80     A7 2C 02 FB | 	rdlong	local08, fp
25d84     04 4E 05 F1 | 	add	fp, #4
25d88     A7 30 02 FB | 	rdlong	local10, fp
25d8c     2C 4E 85 F1 | 	sub	fp, #44
25d90     18 2D 0A F2 | 	cmp	local08, local10 wz
25d94     B0 00 90 5D |  if_ne	jmp	#LR__3945
25d98                 | LR__3943
25d98     24 4E 05 F1 | 	add	fp, #36
25d9c     A7 2A 02 FB | 	rdlong	local07, fp
25da0     24 4E 85 F1 | 	sub	fp, #36
25da4     0B 2A 0E F2 | 	cmp	local07, #11 wz
25da8     18 00 90 5D |  if_ne	jmp	#LR__3944
25dac     10 4E 05 F1 | 	add	fp, #16
25db0     A7 2A C2 FA | 	rdbyte	local07, fp
25db4     03 2A 46 F5 | 	or	local07, #3
25db8     A7 2A 42 FC | 	wrbyte	local07, fp
25dbc     10 4E 85 F1 | 	sub	fp, #16
25dc0                 | ' 				cf |=  0x01  |  0x02 ;
25dc0                 | ' 				break;
25dc0     B4 02 90 FD | 	jmp	#LR__3956
25dc4                 | LR__3944
25dc4     28 4E 05 F1 | 	add	fp, #40
25dc8     A7 2A 02 FB | 	rdlong	local07, fp
25dcc     04 4E 05 F1 | 	add	fp, #4
25dd0     A7 1E 02 FB | 	rdlong	local01, fp
25dd4     2C 4E 85 F1 | 	sub	fp, #44
25dd8     0F 2B 0A F2 | 	cmp	local07, local01 wz
25ddc     10 4E 05 51 |  if_ne	add	fp, #16
25de0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
25de4     03 2A 46 55 |  if_ne	or	local07, #3
25de8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
25dec     10 4E 85 51 |  if_ne	sub	fp, #16
25df0     28 4E 05 F1 | 	add	fp, #40
25df4     A7 2A 02 FB | 	rdlong	local07, fp
25df8     04 4E 05 F1 | 	add	fp, #4
25dfc     A7 20 02 FB | 	rdlong	local02, fp
25e00     2C 4E 85 F1 | 	sub	fp, #44
25e04     10 2B 1A F2 | 	cmp	local07, local02 wcz
25e08     6C 02 90 1D |  if_a	jmp	#LR__3956
25e0c     2C 4E 05 F1 | 	add	fp, #44
25e10     A7 2A 02 FB | 	rdlong	local07, fp
25e14     04 4E 85 F1 | 	sub	fp, #4
25e18     A7 2A 62 FC | 	wrlong	local07, fp
25e1c     08 4E 85 F1 | 	sub	fp, #8
25e20     A7 10 68 FC | 	wrlong	#8, fp
25e24     04 4E 05 F1 | 	add	fp, #4
25e28     A7 16 68 FC | 	wrlong	#11, fp
25e2c     18 4E 85 F1 | 	sub	fp, #24
25e30     A7 32 C2 FA | 	rdbyte	local11, fp
25e34     19 2B E2 F8 | 	getbyte	local07, local11, #0
25e38     02 2A 66 F0 | 	shl	local07, #2
25e3c     A7 2A 42 FC | 	wrbyte	local07, fp
25e40     0C 4E 85 F1 | 	sub	fp, #12
25e44                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
25e44                 | ' 			continue;
25e44     80 FE 9F FD | 	jmp	#LR__3940
25e48                 | LR__3945
25e48     14 4E 05 F1 | 	add	fp, #20
25e4c     A7 2A E2 FA | 	rdword	local07, fp
25e50     14 4E 85 F1 | 	sub	fp, #20
25e54     80 2A 16 F2 | 	cmp	local07, #128 wc
25e58     6C 00 90 CD |  if_b	jmp	#LR__3947
25e5c     10 4E 05 F1 | 	add	fp, #16
25e60     A7 2A C2 FA | 	rdbyte	local07, fp
25e64     02 2A 46 F5 | 	or	local07, #2
25e68     A7 2A 42 FC | 	wrbyte	local07, fp
25e6c     04 4E 05 F1 | 	add	fp, #4
25e70     A7 12 E2 FA | 	rdword	arg01, fp
25e74     14 4E 85 F1 | 	sub	fp, #20
25e78     01 00 00 FF 
25e7c     52 15 06 F6 | 	mov	arg02, ##850
25e80     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
25e84     14 4E 05 F1 | 	add	fp, #20
25e88     A7 FA 51 FC | 	wrword	result1, fp
25e8c     A7 2A E2 FA | 	rdword	local07, fp
25e90     14 4E 85 F1 | 	sub	fp, #20
25e94     80 2A CE F7 | 	test	local07, #128 wz
25e98     2C 00 90 AD |  if_e	jmp	#LR__3946
25e9c     14 4E 05 F1 | 	add	fp, #20
25ea0     A7 20 E2 FA | 	rdword	local02, fp
25ea4     7F 20 06 F5 | 	and	local02, #127
25ea8     01 00 00 FF 
25eac     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
25eb0     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
25eb4     10 2B C2 FA | 	rdbyte	local07, local02
25eb8     A7 2A 52 FC | 	wrword	local07, fp
25ebc     14 4E 85 F1 | 	sub	fp, #20
25ec0     01 00 00 FF 
25ec4     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
25ec8                 | LR__3946
25ec8                 | LR__3947
25ec8     14 4E 05 F1 | 	add	fp, #20
25ecc     A7 2A E2 FA | 	rdword	local07, fp
25ed0     14 4E 85 F1 | 	sub	fp, #20
25ed4     00 2B 16 F2 | 	cmp	local07, #256 wc
25ed8     88 00 90 CD |  if_b	jmp	#LR__3949
25edc     24 4E 05 F1 | 	add	fp, #36
25ee0     A7 2A 02 FB | 	rdlong	local07, fp
25ee4     01 2A 86 F1 | 	sub	local07, #1
25ee8     04 4E 85 F1 | 	sub	fp, #4
25eec     A7 20 02 FB | 	rdlong	local02, fp
25ef0     20 4E 85 F1 | 	sub	fp, #32
25ef4     15 21 12 F2 | 	cmp	local02, local07 wc
25ef8     2C 00 90 CD |  if_b	jmp	#LR__3948
25efc     10 4E 05 F1 | 	add	fp, #16
25f00     A7 32 C2 FA | 	rdbyte	local11, fp
25f04     19 2B E2 F8 | 	getbyte	local07, local11, #0
25f08     03 2A 46 F5 | 	or	local07, #3
25f0c     A7 2A 42 FC | 	wrbyte	local07, fp
25f10     14 4E 05 F1 | 	add	fp, #20
25f14     A7 2A 02 FB | 	rdlong	local07, fp
25f18     04 4E 85 F1 | 	sub	fp, #4
25f1c     A7 2A 62 FC | 	wrlong	local07, fp
25f20     20 4E 85 F1 | 	sub	fp, #32
25f24                 | ' 				cf |=  0x01  |  0x02 ;
25f24                 | ' 				i = ni; continue;
25f24     A0 FD 9F FD | 	jmp	#LR__3940
25f28                 | LR__3948
25f28     04 4E 05 F1 | 	add	fp, #4
25f2c     A7 2E 02 FB | 	rdlong	local09, fp
25f30     1C 4E 05 F1 | 	add	fp, #28
25f34     A7 30 02 FB | 	rdlong	local10, fp
25f38     18 25 02 F6 | 	mov	local04, local10
25f3c     01 24 06 F1 | 	add	local04, #1
25f40     A7 24 62 FC | 	wrlong	local04, fp
25f44     20 2E 06 F1 | 	add	local09, #32
25f48     17 31 02 F1 | 	add	local10, local09
25f4c     0C 4E 85 F1 | 	sub	fp, #12
25f50     A7 22 E2 FA | 	rdword	local03, fp
25f54     14 4E 85 F1 | 	sub	fp, #20
25f58     08 22 46 F0 | 	shr	local03, #8
25f5c     18 23 42 FC | 	wrbyte	local03, local10
25f60     D4 00 90 FD | 	jmp	#LR__3955
25f64                 | LR__3949
25f64     14 4E 05 F1 | 	add	fp, #20
25f68     A7 2A EA FA | 	rdword	local07, fp wz
25f6c     14 4E 85 F1 | 	sub	fp, #20
25f70     20 00 90 AD |  if_e	jmp	#LR__3950
25f74     5C 01 00 FF 
25f78     05 13 06 F6 | 	mov	arg01, ##@LR__4583
25f7c     14 4E 05 F1 | 	add	fp, #20
25f80     A7 14 E2 FA | 	rdword	arg02, fp
25f84     14 4E 85 F1 | 	sub	fp, #20
25f88     48 CB BF FD | 	call	#_fatfs_cc_strchr
25f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
25f90     20 00 90 AD |  if_e	jmp	#LR__3951
25f94                 | LR__3950
25f94     14 4E 05 F1 | 	add	fp, #20
25f98     A7 BE 58 FC | 	wrword	#95, fp
25f9c     04 4E 85 F1 | 	sub	fp, #4
25fa0     A7 2A C2 FA | 	rdbyte	local07, fp
25fa4     03 2A 46 F5 | 	or	local07, #3
25fa8     A7 2A 42 FC | 	wrbyte	local07, fp
25fac     10 4E 85 F1 | 	sub	fp, #16
25fb0     84 00 90 FD | 	jmp	#LR__3954
25fb4                 | LR__3951
25fb4     14 4E 05 F1 | 	add	fp, #20
25fb8     A7 2A E2 FA | 	rdword	local07, fp
25fbc     14 4E 85 F1 | 	sub	fp, #20
25fc0     41 2A 16 F2 | 	cmp	local07, #65 wc
25fc4     24 00 90 CD |  if_b	jmp	#LR__3952
25fc8     14 4E 05 F1 | 	add	fp, #20
25fcc     A7 1E E2 FA | 	rdword	local01, fp
25fd0     14 4E 85 F1 | 	sub	fp, #20
25fd4     5B 1E 16 F2 | 	cmp	local01, #91 wc
25fd8     0C 4E 05 C1 |  if_b	add	fp, #12
25fdc     A7 2A C2 CA |  if_b	rdbyte	local07, fp
25fe0     02 2A 46 C5 |  if_b	or	local07, #2
25fe4     A7 2A 42 CC |  if_b	wrbyte	local07, fp
25fe8     0C 4E 85 C1 |  if_b	sub	fp, #12
25fec                 | LR__3952
25fec     14 4E 05 F1 | 	add	fp, #20
25ff0     A7 2A E2 FA | 	rdword	local07, fp
25ff4     14 4E 85 F1 | 	sub	fp, #20
25ff8     61 2A 16 F2 | 	cmp	local07, #97 wc
25ffc     38 00 90 CD |  if_b	jmp	#LR__3953
26000     14 4E 05 F1 | 	add	fp, #20
26004     A7 1E E2 FA | 	rdword	local01, fp
26008     14 4E 85 F1 | 	sub	fp, #20
2600c     7B 1E 16 F2 | 	cmp	local01, #123 wc
26010     24 00 90 3D |  if_ae	jmp	#LR__3953
26014     0C 4E 05 F1 | 	add	fp, #12
26018     A7 2A C2 FA | 	rdbyte	local07, fp
2601c     01 2A 46 F5 | 	or	local07, #1
26020     A7 2A 42 FC | 	wrbyte	local07, fp
26024     08 4E 05 F1 | 	add	fp, #8
26028     A7 2A E2 FA | 	rdword	local07, fp
2602c     20 2A 86 F1 | 	sub	local07, #32
26030     A7 2A 52 FC | 	wrword	local07, fp
26034     14 4E 85 F1 | 	sub	fp, #20
26038                 | LR__3953
26038                 | LR__3954
26038                 | LR__3955
26038     04 4E 05 F1 | 	add	fp, #4
2603c     A7 32 02 FB | 	rdlong	local11, fp
26040     19 2F 02 F6 | 	mov	local09, local11
26044     1C 4E 05 F1 | 	add	fp, #28
26048     A7 20 02 FB | 	rdlong	local02, fp
2604c     10 25 02 F6 | 	mov	local04, local02
26050     01 24 06 F1 | 	add	local04, #1
26054     A7 24 62 FC | 	wrlong	local04, fp
26058     10 31 02 F6 | 	mov	local10, local02
2605c     20 2E 06 F1 | 	add	local09, #32
26060     17 31 02 F1 | 	add	local10, local09
26064     0C 4E 85 F1 | 	sub	fp, #12
26068     A7 22 E2 FA | 	rdword	local03, fp
2606c     14 4E 85 F1 | 	sub	fp, #20
26070     18 23 42 FC | 	wrbyte	local03, local10
26074     50 FC 9F FD | 	jmp	#LR__3940
26078                 | LR__3956
26078     04 4E 05 F1 | 	add	fp, #4
2607c     A7 32 02 FB | 	rdlong	local11, fp
26080     04 4E 85 F1 | 	sub	fp, #4
26084     20 32 06 F1 | 	add	local11, #32
26088     19 2B C2 FA | 	rdbyte	local07, local11
2608c     E5 2A 0E F2 | 	cmp	local07, #229 wz
26090     04 4E 05 A1 |  if_e	add	fp, #4
26094     A7 2A 02 AB |  if_e	rdlong	local07, fp
26098     04 4E 85 A1 |  if_e	sub	fp, #4
2609c     20 2A 06 A1 |  if_e	add	local07, #32
260a0     15 0B 48 AC |  if_e	wrbyte	#5, local07
260a4     24 4E 05 F1 | 	add	fp, #36
260a8     A7 2A 02 FB | 	rdlong	local07, fp
260ac     24 4E 85 F1 | 	sub	fp, #36
260b0     08 2A 0E F2 | 	cmp	local07, #8 wz
260b4     0C 4E 05 A1 |  if_e	add	fp, #12
260b8     A7 2A C2 AA |  if_e	rdbyte	local07, fp
260bc     02 2A 66 A0 |  if_e	shl	local07, #2
260c0     A7 2A 42 AC |  if_e	wrbyte	local07, fp
260c4     0C 4E 85 A1 |  if_e	sub	fp, #12
260c8     0C 4E 05 F1 | 	add	fp, #12
260cc     A7 2A C2 FA | 	rdbyte	local07, fp
260d0     0C 4E 85 F1 | 	sub	fp, #12
260d4     0C 2A 06 F5 | 	and	local07, #12
260d8     0C 2A 0E F2 | 	cmp	local07, #12 wz
260dc     18 00 90 AD |  if_e	jmp	#LR__3957
260e0     0C 4E 05 F1 | 	add	fp, #12
260e4     A7 1E C2 FA | 	rdbyte	local01, fp
260e8     0C 4E 85 F1 | 	sub	fp, #12
260ec     03 1E 06 F5 | 	and	local01, #3
260f0     03 1E 0E F2 | 	cmp	local01, #3 wz
260f4     14 00 90 5D |  if_ne	jmp	#LR__3958
260f8                 | LR__3957
260f8     10 4E 05 F1 | 	add	fp, #16
260fc     A7 2A C2 FA | 	rdbyte	local07, fp
26100     02 2A 46 F5 | 	or	local07, #2
26104     A7 2A 42 FC | 	wrbyte	local07, fp
26108     10 4E 85 F1 | 	sub	fp, #16
2610c                 | LR__3958
2610c     10 4E 05 F1 | 	add	fp, #16
26110     A7 2A C2 FA | 	rdbyte	local07, fp
26114     10 4E 85 F1 | 	sub	fp, #16
26118     02 2A CE F7 | 	test	local07, #2 wz
2611c     48 00 90 5D |  if_ne	jmp	#LR__3959
26120     0C 4E 05 F1 | 	add	fp, #12
26124     A7 2A C2 FA | 	rdbyte	local07, fp
26128     0C 4E 85 F1 | 	sub	fp, #12
2612c     01 2A CE F7 | 	test	local07, #1 wz
26130     10 4E 05 51 |  if_ne	add	fp, #16
26134     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
26138     10 2A 46 55 |  if_ne	or	local07, #16
2613c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
26140     10 4E 85 51 |  if_ne	sub	fp, #16
26144     0C 4E 05 F1 | 	add	fp, #12
26148     A7 2A C2 FA | 	rdbyte	local07, fp
2614c     0C 4E 85 F1 | 	sub	fp, #12
26150     04 2A CE F7 | 	test	local07, #4 wz
26154     10 4E 05 51 |  if_ne	add	fp, #16
26158     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2615c     08 2A 46 55 |  if_ne	or	local07, #8
26160     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
26164     10 4E 85 51 |  if_ne	sub	fp, #16
26168                 | LR__3959
26168     04 4E 05 F1 | 	add	fp, #4
2616c     A7 2A 02 FB | 	rdlong	local07, fp
26170     0C 4E 05 F1 | 	add	fp, #12
26174     A7 1E C2 FA | 	rdbyte	local01, fp
26178     10 4E 85 F1 | 	sub	fp, #16
2617c     2B 2A 06 F1 | 	add	local07, #43
26180     15 1F 42 FC | 	wrbyte	local01, local07
26184                 | ' 	}
26184                 | ' 
26184                 | ' 	dp->fn[ 11 ] = cf;
26184                 | ' 
26184                 | ' 	return FR_OK;
26184     00 FA 05 F6 | 	mov	result1, #0
26188                 | LR__3960
26188     A7 F0 03 F6 | 	mov	ptra, fp
2618c     B2 00 A0 FD | 	call	#popregs_
26190                 | _fatfs_cc_create_name_ret
26190     2D 00 64 FD | 	ret
26194                 | 
26194                 | _fatfs_cc_follow_path
26194     02 4A 05 F6 | 	mov	COUNT_, #2
26198     A8 00 A0 FD | 	call	#pushregs_
2619c     18 F0 07 F1 | 	add	ptra, #24
261a0     04 4E 05 F1 | 	add	fp, #4
261a4     A7 12 62 FC | 	wrlong	arg01, fp
261a8     04 4E 05 F1 | 	add	fp, #4
261ac     A7 14 62 FC | 	wrlong	arg02, fp
261b0     04 4E 85 F1 | 	sub	fp, #4
261b4     A7 FA 01 FB | 	rdlong	result1, fp
261b8     FD 1E 02 FB | 	rdlong	local01, result1
261bc     10 4E 05 F1 | 	add	fp, #16
261c0     A7 1E 62 FC | 	wrlong	local01, fp
261c4     14 4E 85 F1 | 	sub	fp, #20
261c8     97 24 48 FB | 	callpa	#(@LR__3972-@LR__3970)>>2,fcache_load_ptr_
261cc                 | ' )
261cc                 | ' {
261cc                 | ' 	FRESULT res;
261cc                 | ' 	BYTE ns;
261cc                 | ' 	FATFS *fs = dp->obj.fs;
261cc                 | ' #line 3034 "ff.c"
261cc                 | ' 	{
261cc                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
261cc                 | LR__3970
261cc     08 4E 05 F1 | 	add	fp, #8
261d0     A7 1E 02 FB | 	rdlong	local01, fp
261d4     08 4E 85 F1 | 	sub	fp, #8
261d8     0F 1F C2 FA | 	rdbyte	local01, local01
261dc     2F 1E 0E F2 | 	cmp	local01, #47 wz
261e0     18 00 90 AD |  if_e	jmp	#LR__3971
261e4     08 4E 05 F1 | 	add	fp, #8
261e8     A7 1E 02 FB | 	rdlong	local01, fp
261ec     08 4E 85 F1 | 	sub	fp, #8
261f0     0F 1F C2 FA | 	rdbyte	local01, local01
261f4     5C 1E 0E F2 | 	cmp	local01, #92 wz
261f8     18 00 90 5D |  if_ne	jmp	#LR__3973
261fc                 | LR__3971
261fc     08 4E 05 F1 | 	add	fp, #8
26200     A7 1E 02 FB | 	rdlong	local01, fp
26204     01 1E 06 F1 | 	add	local01, #1
26208     A7 1E 62 FC | 	wrlong	local01, fp
2620c     08 4E 85 F1 | 	sub	fp, #8
26210     B8 FF 9F FD | 	jmp	#LR__3970
26214                 | LR__3972
26214                 | LR__3973
26214     04 4E 05 F1 | 	add	fp, #4
26218     A7 1E 02 FB | 	rdlong	local01, fp
2621c     08 1E 06 F1 | 	add	local01, #8
26220     0F 01 68 FC | 	wrlong	#0, local01
26224     04 4E 05 F1 | 	add	fp, #4
26228     A7 1E 02 FB | 	rdlong	local01, fp
2622c     08 4E 85 F1 | 	sub	fp, #8
26230     0F 1F C2 FA | 	rdbyte	local01, local01
26234     20 1E 16 F2 | 	cmp	local01, #32 wc
26238     30 00 90 3D |  if_ae	jmp	#LR__3974
2623c     04 4E 05 F1 | 	add	fp, #4
26240     A7 1E 02 FB | 	rdlong	local01, fp
26244     2B 1E 06 F1 | 	add	local01, #43
26248     0F 01 49 FC | 	wrbyte	#128, local01
2624c     A7 12 02 FB | 	rdlong	arg01, fp
26250     04 4E 85 F1 | 	sub	fp, #4
26254     00 14 06 F6 | 	mov	arg02, #0
26258     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2625c     0C 4E 05 F1 | 	add	fp, #12
26260     A7 FA 61 FC | 	wrlong	result1, fp
26264     0C 4E 85 F1 | 	sub	fp, #12
26268     1C 01 90 FD | 	jmp	#LR__3978
2626c                 | LR__3974
2626c                 | ' 		for (;;) {
2626c                 | LR__3975
2626c     04 4E 05 F1 | 	add	fp, #4
26270     A7 12 02 FB | 	rdlong	arg01, fp
26274     04 4E 05 F1 | 	add	fp, #4
26278     A7 14 02 F6 | 	mov	arg02, fp
2627c     08 4E 85 F1 | 	sub	fp, #8
26280     14 F6 BF FD | 	call	#_fatfs_cc_create_name
26284     0C 4E 05 F1 | 	add	fp, #12
26288     A7 FA 61 FC | 	wrlong	result1, fp
2628c     00 FA 4D F2 | 	cmps	result1, #0 wz
26290     0C 4E 85 F1 | 	sub	fp, #12
26294     F0 00 90 5D |  if_ne	jmp	#LR__3977
26298     04 4E 05 F1 | 	add	fp, #4
2629c     A7 12 02 FB | 	rdlong	arg01, fp
262a0     04 4E 85 F1 | 	sub	fp, #4
262a4     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
262a8     0C 4E 05 F1 | 	add	fp, #12
262ac     A7 FA 61 FC | 	wrlong	result1, fp
262b0     08 4E 85 F1 | 	sub	fp, #8
262b4     A7 1E 02 FB | 	rdlong	local01, fp
262b8     2B 1E 06 F1 | 	add	local01, #43
262bc     0F 1F C2 FA | 	rdbyte	local01, local01
262c0     0C 4E 05 F1 | 	add	fp, #12
262c4     A7 1E 42 FC | 	wrbyte	local01, fp
262c8     04 4E 85 F1 | 	sub	fp, #4
262cc     A7 1E 0A FB | 	rdlong	local01, fp wz
262d0     0C 4E 85 F1 | 	sub	fp, #12
262d4     34 00 90 AD |  if_e	jmp	#LR__3976
262d8     0C 4E 05 F1 | 	add	fp, #12
262dc     A7 1E 02 FB | 	rdlong	local01, fp
262e0     0C 4E 85 F1 | 	sub	fp, #12
262e4     04 1E 0E F2 | 	cmp	local01, #4 wz
262e8     9C 00 90 5D |  if_ne	jmp	#LR__3977
262ec     10 4E 05 F1 | 	add	fp, #16
262f0     A7 1E C2 FA | 	rdbyte	local01, fp
262f4     10 4E 85 F1 | 	sub	fp, #16
262f8     04 1E CE F7 | 	test	local01, #4 wz
262fc     0C 4E 05 A1 |  if_e	add	fp, #12
26300     A7 0A 68 AC |  if_e	wrlong	#5, fp
26304     0C 4E 85 A1 |  if_e	sub	fp, #12
26308                 | ' 					}
26308                 | ' 				}
26308                 | ' 				break;
26308     7C 00 90 FD | 	jmp	#LR__3977
2630c                 | LR__3976
2630c     10 4E 05 F1 | 	add	fp, #16
26310     A7 1E C2 FA | 	rdbyte	local01, fp
26314     10 4E 85 F1 | 	sub	fp, #16
26318     04 1E CE F7 | 	test	local01, #4 wz
2631c     68 00 90 5D |  if_ne	jmp	#LR__3977
26320     04 4E 05 F1 | 	add	fp, #4
26324     A7 1E 02 FB | 	rdlong	local01, fp
26328     04 4E 85 F1 | 	sub	fp, #4
2632c     06 1E 06 F1 | 	add	local01, #6
26330     0F 1F C2 FA | 	rdbyte	local01, local01
26334     10 1E CE F7 | 	test	local01, #16 wz
26338     0C 4E 05 A1 |  if_e	add	fp, #12
2633c     A7 0A 68 AC |  if_e	wrlong	#5, fp
26340     0C 4E 85 A1 |  if_e	sub	fp, #12
26344                 | ' 				res = FR_NO_PATH; break;
26344     40 00 90 AD |  if_e	jmp	#LR__3977
26348     04 4E 05 F1 | 	add	fp, #4
2634c     A7 20 02 FB | 	rdlong	local02, fp
26350     10 1F 02 F6 | 	mov	local01, local02
26354     10 4E 05 F1 | 	add	fp, #16
26358     A7 14 02 FB | 	rdlong	arg02, fp
2635c     0A 13 02 F6 | 	mov	arg01, arg02
26360     34 14 06 F1 | 	add	arg02, #52
26364     14 4E 85 F1 | 	sub	fp, #20
26368     10 20 06 F1 | 	add	local02, #16
2636c     10 21 02 FB | 	rdlong	local02, local02
26370     FF 21 06 F5 | 	and	local02, #511
26374     10 15 02 F1 | 	add	arg02, local02
26378     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2637c     08 1E 06 F1 | 	add	local01, #8
26380     0F FB 61 FC | 	wrlong	result1, local01
26384     E4 FE 9F FD | 	jmp	#LR__3975
26388                 | LR__3977
26388                 | LR__3978
26388                 | ' 			}
26388                 | ' #line 3090 "ff.c"
26388                 | ' 			{
26388                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
26388                 | ' 			}
26388                 | ' 		}
26388                 | ' 	}
26388                 | ' 
26388                 | ' 	return res;
26388     0C 4E 05 F1 | 	add	fp, #12
2638c     A7 FA 01 FB | 	rdlong	result1, fp
26390     0C 4E 85 F1 | 	sub	fp, #12
26394     A7 F0 03 F6 | 	mov	ptra, fp
26398     B2 00 A0 FD | 	call	#popregs_
2639c                 | _fatfs_cc_follow_path_ret
2639c     2D 00 64 FD | 	ret
263a0                 | 
263a0                 | _fatfs_cc_get_ldnumber
263a0     01 00 66 F6 | 	neg	_var01, #1
263a4     09 03 0A FB | 	rdlong	_var02, arg01 wz
263a8     01 05 02 F6 | 	mov	_var03, _var02
263ac     01 FA 65 A6 |  if_e	neg	result1, #1
263b0     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
263b4     97 10 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
263b8                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
263b8                 | LR__3980
263b8     02 07 C2 FA | 	rdbyte	_var04, _var03
263bc     03 FB E1 F8 | 	getbyte	result1, _var04, #0
263c0     20 FA 15 F2 | 	cmp	result1, #32 wc
263c4     01 04 06 F1 | 	add	_var03, #1
263c8     03 09 02 36 |  if_ae	mov	_var05, _var04
263cc     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
263d0     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
263d4     E0 FF 9F 1D |  if_a	jmp	#LR__3980
263d8                 | LR__3981
263d8     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
263dc     3A 06 0E F2 | 	cmp	_var04, #58 wz
263e0     40 00 90 5D |  if_ne	jmp	#LR__3983
263e4     01 0A 06 F6 | 	mov	_var06, #1
263e8     01 09 C2 FA | 	rdbyte	_var05, _var02
263ec     30 08 16 F2 | 	cmp	_var05, #48 wc
263f0     1C 00 90 CD |  if_b	jmp	#LR__3982
263f4     01 09 C2 FA | 	rdbyte	_var05, _var02
263f8     3A 08 16 F2 | 	cmp	_var05, #58 wc
263fc     01 0D 02 C6 |  if_b	mov	_var07, _var02
26400     02 0C 06 C1 |  if_b	add	_var07, #2
26404     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
26408     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2640c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
26410                 | LR__3982
26410     01 0A 56 F2 | 	cmps	_var06, #1 wc
26414     05 01 02 C6 |  if_b	mov	_var01, _var06
26418     09 05 62 CC |  if_b	wrlong	_var03, arg01
2641c                 | ' 			vol = i;
2641c                 | ' 			*path = tt;
2641c                 | ' 		}
2641c                 | ' 		return vol;
2641c     00 FB 01 F6 | 	mov	result1, _var01
26420     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
26424                 | LR__3983
26424                 | ' 	}
26424                 | ' #line 3170 "ff.c"
26424                 | ' 	vol = 0;
26424                 | ' 
26424                 | ' 	return vol;
26424     00 FA 05 F6 | 	mov	result1, #0
26428                 | _fatfs_cc_get_ldnumber_ret
26428     2D 00 64 FD | 	ret
2642c                 | 
2642c                 | _fatfs_cc_check_fs
2642c     04 4A 05 F6 | 	mov	COUNT_, #4
26430     A8 00 A0 FD | 	call	#pushregs_
26434     09 1F 02 F6 | 	mov	local01, arg01
26438     03 1E 06 F1 | 	add	local01, #3
2643c     0F 01 48 FC | 	wrbyte	#0, local01
26440     2D 1E 06 F1 | 	add	local01, #45
26444     FF FF FF FF 
26448     0F FF 6B FC | 	wrlong	##-1, local01
2644c     30 1E 86 F1 | 	sub	local01, #48
26450     0F 13 02 F6 | 	mov	arg01, local01
26454     18 D5 BF FD | 	call	#_fatfs_cc_move_window
26458     00 FA 0D F2 | 	cmp	result1, #0 wz
2645c     04 FA 05 56 |  if_ne	mov	result1, #4
26460     94 01 90 5D |  if_ne	jmp	#LR__3994
26464     34 1E 06 F1 | 	add	local01, #52
26468     0F 13 02 F6 | 	mov	arg01, local01
2646c     FE 13 06 F1 | 	add	arg01, #510
26470                 | ' {
26470                 | ' 
26470                 | ' 	return *((WORD*)ptr);
26470     09 21 E2 FA | 	rdword	local02, arg01
26474     0F 23 C2 FA | 	rdbyte	local03, local01
26478     34 1E 86 F1 | 	sub	local01, #52
2647c     11 25 E2 F8 | 	getbyte	local04, local03, #0
26480     EB 24 0E F2 | 	cmp	local04, #235 wz
26484     11 17 02 56 |  if_ne	mov	arg03, local03
26488     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2648c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
26490     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
26494     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
26498     44 01 90 5D |  if_ne	jmp	#LR__3993
2649c     10 25 32 F9 | 	getword	local04, local02, #0
264a0     55 00 00 FF 
264a4     55 24 0E F2 | 	cmp	local04, ##43605 wz
264a8     2C 00 90 5D |  if_ne	jmp	#LR__3990
264ac     34 1E 06 F1 | 	add	local01, #52
264b0     0F 13 02 F6 | 	mov	arg01, local01
264b4     34 1E 86 F1 | 	sub	local01, #52
264b8     52 12 06 F1 | 	add	arg01, #82
264bc     5C 01 00 FF 
264c0     0C 15 06 F6 | 	mov	arg02, ##@LR__4584
264c4     08 16 06 F6 | 	mov	arg03, #8
264c8     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
264cc     00 FA 0D F2 | 	cmp	result1, #0 wz
264d0                 | ' 			return 0;
264d0     00 FA 05 A6 |  if_e	mov	result1, #0
264d4     20 01 90 AD |  if_e	jmp	#LR__3994
264d8                 | LR__3990
264d8     34 1E 06 F1 | 	add	local01, #52
264dc     0F 13 02 F6 | 	mov	arg01, local01
264e0     0B 12 06 F1 | 	add	arg01, #11
264e4                 | ' {
264e4                 | ' 
264e4                 | ' 	return *((WORD*)ptr);
264e4     09 FB E1 FA | 	rdword	result1, arg01
264e8     0D 1E 06 F1 | 	add	local01, #13
264ec     0F 23 C2 FA | 	rdbyte	local03, local01
264f0     41 1E 86 F1 | 	sub	local01, #65
264f4     FD 24 32 F9 | 	getword	local04, result1, #0
264f8     FD 14 32 F9 | 	getword	arg02, result1, #0
264fc     01 14 86 F1 | 	sub	arg02, #1
26500     0A 25 CA F7 | 	test	local04, arg02 wz
26504     D8 00 90 5D |  if_ne	jmp	#LR__3992
26508     FD 14 32 F9 | 	getword	arg02, result1, #0
2650c     01 00 00 FF 
26510     00 14 16 F2 | 	cmp	arg02, ##512 wc
26514     C8 00 90 CD |  if_b	jmp	#LR__3992
26518     FD 14 32 F9 | 	getword	arg02, result1, #0
2651c     01 00 00 FF 
26520     01 14 16 F2 | 	cmp	arg02, ##513 wc
26524     B8 00 90 3D |  if_ae	jmp	#LR__3992
26528     11 13 02 F6 | 	mov	arg01, local03
2652c     07 12 4E F7 | 	zerox	arg01, #7 wz
26530     AC 00 90 AD |  if_e	jmp	#LR__3992
26534     11 13 E2 F8 | 	getbyte	arg01, local03, #0
26538     11 23 E2 F8 | 	getbyte	local03, local03, #0
2653c     01 22 86 F1 | 	sub	local03, #1
26540     11 13 CA F7 | 	test	arg01, local03 wz
26544     98 00 90 5D |  if_ne	jmp	#LR__3992
26548     34 1E 06 F1 | 	add	local01, #52
2654c     0F 13 02 F6 | 	mov	arg01, local01
26550     34 1E 86 F1 | 	sub	local01, #52
26554     0E 12 06 F1 | 	add	arg01, #14
26558                 | ' {
26558                 | ' 
26558                 | ' 	return *((WORD*)ptr);
26558     09 FB E9 FA | 	rdword	result1, arg01 wz
2655c     80 00 90 AD |  if_e	jmp	#LR__3992
26560     44 1E 06 F1 | 	add	local01, #68
26564     0F 13 C2 FA | 	rdbyte	arg01, local01
26568     44 1E 86 F1 | 	sub	local01, #68
2656c     01 12 86 F1 | 	sub	arg01, #1
26570     02 12 16 F2 | 	cmp	arg01, #2 wc
26574     68 00 90 3D |  if_ae	jmp	#LR__3992
26578     34 1E 06 F1 | 	add	local01, #52
2657c     0F 13 02 F6 | 	mov	arg01, local01
26580     34 1E 86 F1 | 	sub	local01, #52
26584     11 12 06 F1 | 	add	arg01, #17
26588                 | ' {
26588                 | ' 
26588                 | ' 	return *((WORD*)ptr);
26588     09 FB E9 FA | 	rdword	result1, arg01 wz
2658c     50 00 90 AD |  if_e	jmp	#LR__3992
26590     34 1E 06 F1 | 	add	local01, #52
26594     0F 13 02 F6 | 	mov	arg01, local01
26598     34 1E 86 F1 | 	sub	local01, #52
2659c     13 12 06 F1 | 	add	arg01, #19
265a0                 | ' {
265a0                 | ' 
265a0                 | ' 	return *((WORD*)ptr);
265a0     09 FB E1 FA | 	rdword	result1, arg01
265a4     FD 22 32 F9 | 	getword	local03, result1, #0
265a8     80 22 16 F2 | 	cmp	local03, #128 wc
265ac     20 00 90 3D |  if_ae	jmp	#LR__3991
265b0     34 1E 06 F1 | 	add	local01, #52
265b4     0F 13 02 F6 | 	mov	arg01, local01
265b8     34 1E 86 F1 | 	sub	local01, #52
265bc     20 12 06 F1 | 	add	arg01, #32
265c0                 | ' {
265c0                 | ' 
265c0                 | ' 	return *((DWORD*)ptr);
265c0     09 FB 01 FB | 	rdlong	result1, arg01
265c4     80 00 00 FF 
265c8     00 FA 15 F2 | 	cmp	result1, ##65536 wc
265cc     10 00 90 CD |  if_b	jmp	#LR__3992
265d0                 | LR__3991
265d0     4A 1E 06 F1 | 	add	local01, #74
265d4                 | ' {
265d4                 | ' 
265d4                 | ' 	return *((WORD*)ptr);
265d4     0F FB E9 FA | 	rdword	result1, local01 wz
265d8                 | ' 			&& b != 0 && (b & (b - 1)) == 0
265d8                 | ' 			&& ld_word(fs->win +  14 ) != 0
265d8                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
265d8                 | ' 			&& ld_word(fs->win +  17 ) != 0
265d8                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
265d8                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
265d8                 | ' 				return 0;
265d8     00 FA 05 56 |  if_ne	mov	result1, #0
265dc     18 00 90 5D |  if_ne	jmp	#LR__3994
265e0                 | LR__3992
265e0                 | LR__3993
265e0                 | ' 		}
265e0                 | ' 	}
265e0                 | ' 	return sign == 0xAA55 ? 2 : 3;
265e0     10 23 32 F9 | 	getword	local03, local02, #0
265e4     55 00 00 FF 
265e8     55 22 0E F2 | 	cmp	local03, ##43605 wz
265ec     02 24 06 A6 |  if_e	mov	local04, #2
265f0     03 24 06 56 |  if_ne	mov	local04, #3
265f4     12 FB 01 F6 | 	mov	result1, local04
265f8                 | LR__3994
265f8     A7 F0 03 F6 | 	mov	ptra, fp
265fc     B2 00 A0 FD | 	call	#popregs_
26600                 | _fatfs_cc_check_fs_ret
26600     2D 00 64 FD | 	ret
26604                 | 
26604                 | _fatfs_cc_find_volume
26604     05 4A 05 F6 | 	mov	COUNT_, #5
26608     A8 00 A0 FD | 	call	#pushregs_
2660c     24 F0 07 F1 | 	add	ptra, #36
26610     09 1F 02 F6 | 	mov	local01, arg01
26614     0A 21 02 F6 | 	mov	local02, arg02
26618     0F 13 02 F6 | 	mov	arg01, local01
2661c     00 14 06 F6 | 	mov	arg02, #0
26620     08 FE BF FD | 	call	#_fatfs_cc_check_fs
26624     02 FA 0D F2 | 	cmp	result1, #2 wz
26628     0C 00 90 AD |  if_e	jmp	#LR__4000
2662c     03 FA 15 F2 | 	cmp	result1, #3 wc
26630     00 20 0E C2 |  if_b	cmp	local02, #0 wz
26634     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4008
26638                 | LR__4000
26638                 | ' 	for (i = 0; i < 4; i++) {
26638     00 22 06 F6 | 	mov	local03, #0
2663c     97 26 48 FB | 	callpa	#(@LR__4002-@LR__4001)>>2,fcache_load_ptr_
26640                 | LR__4001
26640     04 22 16 F2 | 	cmp	local03, #4 wc
26644     44 00 90 3D |  if_ae	jmp	#LR__4003
26648     11 25 02 F6 | 	mov	local04, local03
2664c     02 24 66 F0 | 	shl	local04, #2
26650     14 4E 05 F1 | 	add	fp, #20
26654     A7 24 02 F1 | 	add	local04, fp
26658     34 1E 06 F1 | 	add	local01, #52
2665c     0F 13 02 F6 | 	mov	arg01, local01
26660     34 1E 86 F1 | 	sub	local01, #52
26664     BE 13 06 F1 | 	add	arg01, #446
26668     11 15 02 F6 | 	mov	arg02, local03
2666c     04 14 66 F0 | 	shl	arg02, #4
26670     0A 13 02 F1 | 	add	arg01, arg02
26674     08 12 06 F1 | 	add	arg01, #8
26678                 | ' {
26678                 | ' 
26678                 | ' 	return *((DWORD*)ptr);
26678     09 FB 01 FB | 	rdlong	result1, arg01
2667c     14 4E 85 F1 | 	sub	fp, #20
26680     12 FB 61 FC | 	wrlong	result1, local04
26684     01 22 06 F1 | 	add	local03, #1
26688     B4 FF 9F FD | 	jmp	#LR__4001
2668c                 | LR__4002
2668c                 | LR__4003
2668c     00 20 0E F2 | 	cmp	local02, #0 wz
26690     10 25 02 56 |  if_ne	mov	local04, local02
26694     01 24 86 51 |  if_ne	sub	local04, #1
26698     00 24 06 A6 |  if_e	mov	local04, #0
2669c     12 23 02 F6 | 	mov	local03, local04
266a0                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
266a0                 | ' 	}
266a0                 | ' 	i = part ? part - 1 : 0;
266a0                 | ' 	do {
266a0                 | LR__4004
266a0     11 25 02 F6 | 	mov	local04, local03
266a4     02 24 66 F0 | 	shl	local04, #2
266a8     14 4E 05 F1 | 	add	fp, #20
266ac     A7 24 02 F1 | 	add	local04, fp
266b0     12 25 0A FB | 	rdlong	local04, local04 wz
266b4     14 4E 85 F1 | 	sub	fp, #20
266b8     28 00 90 AD |  if_e	jmp	#LR__4005
266bc     11 25 02 F6 | 	mov	local04, local03
266c0     02 24 66 F0 | 	shl	local04, #2
266c4     14 4E 05 F1 | 	add	fp, #20
266c8     A7 24 02 F1 | 	add	local04, fp
266cc     12 15 02 FB | 	rdlong	arg02, local04
266d0     0F 13 02 F6 | 	mov	arg01, local01
266d4     14 4E 85 F1 | 	sub	fp, #20
266d8     50 FD BF FD | 	call	#_fatfs_cc_check_fs
266dc     FD 24 02 F6 | 	mov	local04, result1
266e0     04 00 90 FD | 	jmp	#LR__4006
266e4                 | LR__4005
266e4     03 24 06 F6 | 	mov	local04, #3
266e8                 | LR__4006
266e8     12 27 02 F6 | 	mov	local05, local04
266ec     00 20 0E F2 | 	cmp	local02, #0 wz
266f0     02 26 16 A2 |  if_e	cmp	local05, #2 wc
266f4     0C 00 90 8D |  if_c_and_z	jmp	#LR__4007
266f8     01 22 06 A1 |  if_e	add	local03, #1
266fc     04 22 16 A2 |  if_e	cmp	local03, #4 wc
26700     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4004
26704                 | LR__4007
26704                 | ' 	return fmt;
26704     13 FB 01 F6 | 	mov	result1, local05
26708                 | LR__4008
26708     A7 F0 03 F6 | 	mov	ptra, fp
2670c     B2 00 A0 FD | 	call	#popregs_
26710                 | _fatfs_cc_find_volume_ret
26710     2D 00 64 FD | 	ret
26714                 | 
26714                 | _fatfs_cc_mount_volume
26714     0B 4A 05 F6 | 	mov	COUNT_, #11
26718     A8 00 A0 FD | 	call	#pushregs_
2671c     0A 1F 02 F6 | 	mov	local01, arg02
26720     0B 21 02 F6 | 	mov	local02, arg03
26724     0F 01 68 FC | 	wrlong	#0, local01
26728     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2672c     FD 22 02 F6 | 	mov	local03, result1
26730     00 22 56 F2 | 	cmps	local03, #0 wc
26734     0B FA 05 C6 |  if_b	mov	result1, #11
26738     3C 05 90 CD |  if_b	jmp	#LR__4020
2673c     11 17 02 F6 | 	mov	arg03, local03
26740     02 16 66 F0 | 	shl	arg03, #2
26744     F2 16 02 F1 | 	add	arg03, objptr
26748     0B 25 0A FB | 	rdlong	local04, arg03 wz
2674c     0C FA 05 A6 |  if_e	mov	result1, #12
26750     24 05 90 AD |  if_e	jmp	#LR__4020
26754     0F 25 62 FC | 	wrlong	local04, local01
26758     10 21 E2 F8 | 	getbyte	local02, local02, #0
2675c     FE 20 06 F5 | 	and	local02, #254
26760     12 17 CA FA | 	rdbyte	arg03, local04 wz
26764     4C 00 90 AD |  if_e	jmp	#LR__4011
26768     01 24 06 F1 | 	add	local04, #1
2676c     12 13 CA FA | 	rdbyte	arg01, local04 wz
26770     01 24 86 F1 | 	sub	local04, #1
26774     01 FA 05 56 |  if_ne	mov	result1, #1
26778                 | ' 
26778                 | ' 	return Stat;
26778     01 00 00 AF 
2677c     20 E4 05 A1 |  if_e	add	objptr, ##544
26780     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
26784     01 00 00 AF 
26788     20 E4 85 A1 |  if_e	sub	objptr, ##544
2678c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
26790     01 16 CE F7 | 	test	arg03, #1 wz
26794     1C 00 90 5D |  if_ne	jmp	#LR__4010
26798     00 20 0E F2 | 	cmp	local02, #0 wz
2679c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
267a0     04 FA CD 57 |  if_ne	test	result1, #4 wz
267a4                 | ' 				return FR_WRITE_PROTECTED;
267a4     0A FA 05 56 |  if_ne	mov	result1, #10
267a8     CC 04 90 5D |  if_ne	jmp	#LR__4020
267ac                 | ' 			}
267ac                 | ' 			return FR_OK;
267ac     00 FA 05 F6 | 	mov	result1, #0
267b0     C4 04 90 FD | 	jmp	#LR__4020
267b4                 | LR__4010
267b4                 | LR__4011
267b4     12 01 48 FC | 	wrbyte	#0, local04
267b8     01 24 06 F1 | 	add	local04, #1
267bc     12 23 42 FC | 	wrbyte	local03, local04
267c0     12 13 C2 FA | 	rdbyte	arg01, local04
267c4     01 24 86 F1 | 	sub	local04, #1
267c8     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
267cc     FD 16 02 F6 | 	mov	arg03, result1
267d0     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
267d4     01 26 CE F7 | 	test	local05, #1 wz
267d8                 | ' 		return FR_NOT_READY;
267d8     03 FA 05 56 |  if_ne	mov	result1, #3
267dc     98 04 90 5D |  if_ne	jmp	#LR__4020
267e0     00 20 0E F2 | 	cmp	local02, #0 wz
267e4     0B 27 02 56 |  if_ne	mov	local05, arg03
267e8     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
267ec     04 26 CE 57 |  if_ne	test	local05, #4 wz
267f0                 | ' 		return FR_WRITE_PROTECTED;
267f0     0A FA 05 56 |  if_ne	mov	result1, #10
267f4     80 04 90 5D |  if_ne	jmp	#LR__4020
267f8     12 13 02 F6 | 	mov	arg01, local04
267fc     00 14 06 F6 | 	mov	arg02, #0
26800     00 FE BF FD | 	call	#_fatfs_cc_find_volume
26804     FD 12 02 F6 | 	mov	arg01, result1
26808     04 12 0E F2 | 	cmp	arg01, #4 wz
2680c     01 FA 05 A6 |  if_e	mov	result1, #1
26810     64 04 90 AD |  if_e	jmp	#LR__4020
26814     02 12 16 F2 | 	cmp	arg01, #2 wc
26818     0D FA 05 36 |  if_ae	mov	result1, #13
2681c     58 04 90 3D |  if_ae	jmp	#LR__4020
26820     30 24 06 F1 | 	add	local04, #48
26824     12 29 02 FB | 	rdlong	local06, local04
26828     04 24 06 F1 | 	add	local04, #4
2682c     12 13 02 F6 | 	mov	arg01, local04
26830     34 24 86 F1 | 	sub	local04, #52
26834     0B 12 06 F1 | 	add	arg01, #11
26838                 | ' {
26838                 | ' 
26838                 | ' 	return *((WORD*)ptr);
26838     09 FB E1 FA | 	rdword	result1, arg01
2683c     01 00 00 FF 
26840     00 FA 0D F2 | 	cmp	result1, ##512 wz
26844     0D FA 05 56 |  if_ne	mov	result1, #13
26848     2C 04 90 5D |  if_ne	jmp	#LR__4020
2684c     34 24 06 F1 | 	add	local04, #52
26850     12 13 02 F6 | 	mov	arg01, local04
26854     34 24 86 F1 | 	sub	local04, #52
26858     16 12 06 F1 | 	add	arg01, #22
2685c                 | ' {
2685c                 | ' 
2685c                 | ' 	return *((WORD*)ptr);
2685c     09 FB E1 FA | 	rdword	result1, arg01
26860     FD 2A 0A F6 | 	mov	local07, result1 wz
26864     18 00 90 5D |  if_ne	jmp	#LR__4012
26868     34 24 06 F1 | 	add	local04, #52
2686c     12 13 02 F6 | 	mov	arg01, local04
26870     34 24 86 F1 | 	sub	local04, #52
26874     24 12 06 F1 | 	add	arg01, #36
26878                 | ' {
26878                 | ' 
26878                 | ' 	return *((DWORD*)ptr);
26878     09 FB 01 FB | 	rdlong	result1, arg01
2687c     FD 2A 02 F6 | 	mov	local07, result1
26880                 | LR__4012
26880     1C 24 06 F1 | 	add	local04, #28
26884     12 2B 62 FC | 	wrlong	local07, local04
26888     28 24 06 F1 | 	add	local04, #40
2688c     12 27 C2 FA | 	rdbyte	local05, local04
26890     42 24 86 F1 | 	sub	local04, #66
26894     12 27 42 FC | 	wrbyte	local05, local04
26898     12 27 C2 FA | 	rdbyte	local05, local04
2689c     02 24 86 F1 | 	sub	local04, #2
268a0     01 26 0E F2 | 	cmp	local05, #1 wz
268a4     02 24 06 51 |  if_ne	add	local04, #2
268a8     12 27 C2 5A |  if_ne	rdbyte	local05, local04
268ac     02 24 86 51 |  if_ne	sub	local04, #2
268b0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
268b4     0D FA 05 56 |  if_ne	mov	result1, #13
268b8     BC 03 90 5D |  if_ne	jmp	#LR__4020
268bc     02 24 06 F1 | 	add	local04, #2
268c0     12 27 C2 FA | 	rdbyte	local05, local04
268c4     13 2B 02 FD | 	qmul	local07, local05
268c8     3F 24 06 F1 | 	add	local04, #63
268cc     12 27 C2 FA | 	rdbyte	local05, local04
268d0     37 24 86 F1 | 	sub	local04, #55
268d4     12 27 52 FC | 	wrword	local05, local04
268d8     12 27 EA FA | 	rdword	local05, local04 wz
268dc     0A 24 86 F1 | 	sub	local04, #10
268e0     18 2A 62 FD | 	getqx	local07
268e4     20 00 90 AD |  if_e	jmp	#LR__4013
268e8     0A 24 06 F1 | 	add	local04, #10
268ec     12 27 E2 FA | 	rdword	local05, local04
268f0     13 23 32 F9 | 	getword	local03, local05, #0
268f4     0A 24 86 F1 | 	sub	local04, #10
268f8     13 27 32 F9 | 	getword	local05, local05, #0
268fc     01 26 86 F1 | 	sub	local05, #1
26900     13 23 CA F7 | 	test	local03, local05 wz
26904     08 00 90 AD |  if_e	jmp	#LR__4014
26908                 | LR__4013
26908     0D FA 05 F6 | 	mov	result1, #13
2690c     68 03 90 FD | 	jmp	#LR__4020
26910                 | LR__4014
26910     34 24 06 F1 | 	add	local04, #52
26914     12 13 02 F6 | 	mov	arg01, local04
26918     11 12 06 F1 | 	add	arg01, #17
2691c                 | ' {
2691c                 | ' 
2691c                 | ' 	return *((WORD*)ptr);
2691c     09 FB E1 FA | 	rdword	result1, arg01
26920     2C 24 86 F1 | 	sub	local04, #44
26924     12 FB 51 FC | 	wrword	result1, local04
26928     12 27 E2 FA | 	rdword	local05, local04
2692c     08 24 86 F1 | 	sub	local04, #8
26930     13 13 52 F6 | 	abs	arg01, local05 wc
26934     09 13 42 F8 | 	getnib	arg01, arg01, #0
26938     09 13 8A F6 | 	negc	arg01, arg01 wz
2693c     0D FA 05 56 |  if_ne	mov	result1, #13
26940     34 03 90 5D |  if_ne	jmp	#LR__4020
26944     34 24 06 F1 | 	add	local04, #52
26948     12 13 02 F6 | 	mov	arg01, local04
2694c     34 24 86 F1 | 	sub	local04, #52
26950     13 12 06 F1 | 	add	arg01, #19
26954                 | ' {
26954                 | ' 
26954                 | ' 	return *((WORD*)ptr);
26954     09 FB E1 FA | 	rdword	result1, arg01
26958     FD 2C 0A F6 | 	mov	local08, result1 wz
2695c     34 24 06 A1 |  if_e	add	local04, #52
26960     12 13 02 A6 |  if_e	mov	arg01, local04
26964     34 24 86 A1 |  if_e	sub	local04, #52
26968     20 12 06 A1 |  if_e	add	arg01, #32
2696c                 | ' {
2696c                 | ' 
2696c                 | ' 	return *((DWORD*)ptr);
2696c     09 2D 02 AB |  if_e	rdlong	local08, arg01
26970     34 24 06 F1 | 	add	local04, #52
26974     12 13 02 F6 | 	mov	arg01, local04
26978     34 24 86 F1 | 	sub	local04, #52
2697c     0E 12 06 F1 | 	add	arg01, #14
26980                 | ' {
26980                 | ' 
26980                 | ' 	return *((WORD*)ptr);
26980     09 FB E1 FA | 	rdword	result1, arg01
26984     FD 12 02 F6 | 	mov	arg01, result1
26988     09 27 02 F6 | 	mov	local05, arg01
2698c     0F 26 4E F7 | 	zerox	local05, #15 wz
26990     0D FA 05 A6 |  if_e	mov	result1, #13
26994     E0 02 90 AD |  if_e	jmp	#LR__4020
26998     09 2F 32 F9 | 	getword	local09, arg01, #0
2699c     15 2F 02 F1 | 	add	local09, local07
269a0     08 24 06 F1 | 	add	local04, #8
269a4     12 27 E2 FA | 	rdword	local05, local04
269a8     08 24 86 F1 | 	sub	local04, #8
269ac     13 27 52 F6 | 	abs	local05, local05 wc
269b0     04 26 46 F0 | 	shr	local05, #4
269b4     13 2F 82 F3 | 	sumc	local09, local05
269b8     17 2D 12 F2 | 	cmp	local08, local09 wc
269bc     0D FA 05 C6 |  if_b	mov	result1, #13
269c0     B4 02 90 CD |  if_b	jmp	#LR__4020
269c4     17 2D 82 F1 | 	sub	local08, local09
269c8     0A 24 06 F1 | 	add	local04, #10
269cc     12 27 E2 FA | 	rdword	local05, local04
269d0     13 2D 12 FD | 	qdiv	local08, local05
269d4     0A 24 86 F1 | 	sub	local04, #10
269d8     18 26 62 FD | 	getqx	local05
269dc     00 26 0E F2 | 	cmp	local05, #0 wz
269e0     0D FA 05 A6 |  if_e	mov	result1, #13
269e4     90 02 90 AD |  if_e	jmp	#LR__4020
269e8     00 30 06 F6 | 	mov	local10, #0
269ec     FF FF 07 FF 
269f0     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
269f4     03 30 06 C6 |  if_b	mov	local10, #3
269f8     7F 00 00 FF 
269fc     F6 27 16 F2 | 	cmp	local05, ##65526 wc
26a00     02 30 06 C6 |  if_b	mov	local10, #2
26a04     07 00 00 FF 
26a08     F6 27 16 F2 | 	cmp	local05, ##4086 wc
26a0c     01 30 06 C6 |  if_b	mov	local10, #1
26a10     00 30 0E F2 | 	cmp	local10, #0 wz
26a14     0D FA 05 A6 |  if_e	mov	result1, #13
26a18     5C 02 90 AD |  if_e	jmp	#LR__4020
26a1c     02 26 06 F1 | 	add	local05, #2
26a20     18 24 06 F1 | 	add	local04, #24
26a24     12 27 62 FC | 	wrlong	local05, local04
26a28     08 24 06 F1 | 	add	local04, #8
26a2c     12 29 62 FC | 	wrlong	local06, local04
26a30     14 27 02 F6 | 	mov	local05, local06
26a34     09 13 32 F9 | 	getword	arg01, arg01, #0
26a38     09 27 02 F1 | 	add	local05, arg01
26a3c     04 24 06 F1 | 	add	local04, #4
26a40     12 27 62 FC | 	wrlong	local05, local04
26a44     14 27 02 F6 | 	mov	local05, local06
26a48     17 27 02 F1 | 	add	local05, local09
26a4c     08 24 06 F1 | 	add	local04, #8
26a50     12 27 62 FC | 	wrlong	local05, local04
26a54     2C 24 86 F1 | 	sub	local04, #44
26a58     03 30 0E F2 | 	cmp	local10, #3 wz
26a5c     5C 00 90 5D |  if_ne	jmp	#LR__4015
26a60     34 24 06 F1 | 	add	local04, #52
26a64     12 13 02 F6 | 	mov	arg01, local04
26a68     34 24 86 F1 | 	sub	local04, #52
26a6c     2A 12 06 F1 | 	add	arg01, #42
26a70                 | ' {
26a70                 | ' 
26a70                 | ' 	return *((WORD*)ptr);
26a70     09 FB E9 FA | 	rdword	result1, arg01 wz
26a74     0D FA 05 56 |  if_ne	mov	result1, #13
26a78     FC 01 90 5D |  if_ne	jmp	#LR__4020
26a7c     08 24 06 F1 | 	add	local04, #8
26a80     12 27 EA FA | 	rdword	local05, local04 wz
26a84     08 24 86 F1 | 	sub	local04, #8
26a88     0D FA 05 56 |  if_ne	mov	result1, #13
26a8c     E8 01 90 5D |  if_ne	jmp	#LR__4020
26a90     34 24 06 F1 | 	add	local04, #52
26a94     12 13 02 F6 | 	mov	arg01, local04
26a98     2C 12 06 F1 | 	add	arg01, #44
26a9c                 | ' {
26a9c                 | ' 
26a9c                 | ' 	return *((DWORD*)ptr);
26a9c     09 FB 01 FB | 	rdlong	result1, arg01
26aa0     0C 24 86 F1 | 	sub	local04, #12
26aa4     12 FB 61 FC | 	wrlong	result1, local04
26aa8     10 24 86 F1 | 	sub	local04, #16
26aac     12 33 02 FB | 	rdlong	local11, local04
26ab0     18 24 86 F1 | 	sub	local04, #24
26ab4     02 32 66 F0 | 	shl	local11, #2
26ab8     6C 00 90 FD | 	jmp	#LR__4017
26abc                 | LR__4015
26abc     08 24 06 F1 | 	add	local04, #8
26ac0     12 27 EA FA | 	rdword	local05, local04 wz
26ac4     08 24 86 F1 | 	sub	local04, #8
26ac8     0D FA 05 A6 |  if_e	mov	result1, #13
26acc     A8 01 90 AD |  if_e	jmp	#LR__4020
26ad0     24 24 06 F1 | 	add	local04, #36
26ad4     12 27 02 FB | 	rdlong	local05, local04
26ad8     15 27 02 F1 | 	add	local05, local07
26adc     04 24 06 F1 | 	add	local04, #4
26ae0     12 27 62 FC | 	wrlong	local05, local04
26ae4     28 24 86 F1 | 	sub	local04, #40
26ae8     02 30 0E F2 | 	cmp	local10, #2 wz
26aec     18 24 06 A1 |  if_e	add	local04, #24
26af0     12 27 02 AB |  if_e	rdlong	local05, local04
26af4     18 24 86 A1 |  if_e	sub	local04, #24
26af8     01 26 66 A0 |  if_e	shl	local05, #1
26afc     24 00 90 AD |  if_e	jmp	#LR__4016
26b00     18 24 06 F1 | 	add	local04, #24
26b04     12 33 02 FB | 	rdlong	local11, local04
26b08     19 27 02 F6 | 	mov	local05, local11
26b0c     01 26 66 F0 | 	shl	local05, #1
26b10     19 27 02 F1 | 	add	local05, local11
26b14     01 26 46 F0 | 	shr	local05, #1
26b18     18 24 86 F1 | 	sub	local04, #24
26b1c     01 32 06 F5 | 	and	local11, #1
26b20     19 27 02 F1 | 	add	local05, local11
26b24                 | LR__4016
26b24     13 33 02 F6 | 	mov	local11, local05
26b28                 | LR__4017
26b28     FF 33 06 F1 | 	add	local11, #511
26b2c     09 32 46 F0 | 	shr	local11, #9
26b30     1C 24 06 F1 | 	add	local04, #28
26b34     12 17 02 FB | 	rdlong	arg03, local04
26b38     1C 24 86 F1 | 	sub	local04, #28
26b3c     19 17 12 F2 | 	cmp	arg03, local11 wc
26b40     0D FA 05 C6 |  if_b	mov	result1, #13
26b44     30 01 90 CD |  if_b	jmp	#LR__4020
26b48     14 24 06 F1 | 	add	local04, #20
26b4c     FF FF FF FF 
26b50     12 FF 6B FC | 	wrlong	##-1, local04
26b54     04 24 86 F1 | 	sub	local04, #4
26b58     FF FF FF FF 
26b5c     12 FF 6B FC | 	wrlong	##-1, local04
26b60     0C 24 86 F1 | 	sub	local04, #12
26b64     12 01 49 FC | 	wrbyte	#128, local04
26b68     04 24 86 F1 | 	sub	local04, #4
26b6c     03 30 0E F2 | 	cmp	local10, #3 wz
26b70     D0 00 90 5D |  if_ne	jmp	#LR__4019
26b74     34 24 06 F1 | 	add	local04, #52
26b78     12 13 02 F6 | 	mov	arg01, local04
26b7c     34 24 86 F1 | 	sub	local04, #52
26b80     30 12 06 F1 | 	add	arg01, #48
26b84                 | ' {
26b84                 | ' 
26b84                 | ' 	return *((WORD*)ptr);
26b84     09 FB E1 FA | 	rdword	result1, arg01
26b88     FD 26 32 F9 | 	getword	local05, result1, #0
26b8c     01 26 0E F2 | 	cmp	local05, #1 wz
26b90     B0 00 90 5D |  if_ne	jmp	#LR__4019
26b94     01 28 06 F1 | 	add	local06, #1
26b98     12 13 02 F6 | 	mov	arg01, local04
26b9c     14 15 02 F6 | 	mov	arg02, local06
26ba0     CC CD BF FD | 	call	#_fatfs_cc_move_window
26ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
26ba8     98 00 90 5D |  if_ne	jmp	#LR__4019
26bac     04 24 06 F1 | 	add	local04, #4
26bb0     12 01 48 FC | 	wrbyte	#0, local04
26bb4     30 24 06 F1 | 	add	local04, #48
26bb8     12 13 02 F6 | 	mov	arg01, local04
26bbc     34 24 86 F1 | 	sub	local04, #52
26bc0     FE 13 06 F1 | 	add	arg01, #510
26bc4                 | ' {
26bc4                 | ' 
26bc4                 | ' 	return *((WORD*)ptr);
26bc4     09 FB E1 FA | 	rdword	result1, arg01
26bc8     FD 26 32 F9 | 	getword	local05, result1, #0
26bcc     55 00 00 FF 
26bd0     55 26 0E F2 | 	cmp	local05, ##43605 wz
26bd4     34 24 06 A1 |  if_e	add	local04, #52
26bd8     12 13 02 A6 |  if_e	mov	arg01, local04
26bdc     34 24 86 A1 |  if_e	sub	local04, #52
26be0                 | ' {
26be0                 | ' 
26be0                 | ' 	return *((DWORD*)ptr);
26be0     09 FB 01 AB |  if_e	rdlong	result1, arg01
26be4     A9 B0 20 AF 
26be8     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
26bec     54 00 90 5D |  if_ne	jmp	#LR__4018
26bf0     34 24 06 F1 | 	add	local04, #52
26bf4     12 13 02 F6 | 	mov	arg01, local04
26bf8     34 24 86 F1 | 	sub	local04, #52
26bfc     E4 13 06 F1 | 	add	arg01, #484
26c00                 | ' {
26c00                 | ' 
26c00                 | ' 	return *((DWORD*)ptr);
26c00     09 FB 01 FB | 	rdlong	result1, arg01
26c04     B9 A0 30 FF 
26c08     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
26c0c     34 00 90 5D |  if_ne	jmp	#LR__4018
26c10     34 24 06 F1 | 	add	local04, #52
26c14     12 13 02 F6 | 	mov	arg01, local04
26c18     E8 13 06 F1 | 	add	arg01, #488
26c1c                 | ' {
26c1c                 | ' 
26c1c                 | ' 	return *((DWORD*)ptr);
26c1c     09 FB 01 FB | 	rdlong	result1, arg01
26c20     20 24 86 F1 | 	sub	local04, #32
26c24     12 FB 61 FC | 	wrlong	result1, local04
26c28     20 24 06 F1 | 	add	local04, #32
26c2c     12 13 02 F6 | 	mov	arg01, local04
26c30     EC 13 06 F1 | 	add	arg01, #492
26c34                 | ' {
26c34                 | ' 
26c34                 | ' 	return *((DWORD*)ptr);
26c34     09 FB 01 FB | 	rdlong	result1, arg01
26c38     24 24 86 F1 | 	sub	local04, #36
26c3c     12 FB 61 FC | 	wrlong	result1, local04
26c40     10 24 86 F1 | 	sub	local04, #16
26c44                 | LR__4018
26c44                 | LR__4019
26c44     12 31 42 FC | 	wrbyte	local10, local04
26c48     04 E4 05 F1 | 	add	objptr, #4
26c4c     F2 26 E2 FA | 	rdword	local05, objptr
26c50     01 26 06 F1 | 	add	local05, #1
26c54     F2 26 52 FC | 	wrword	local05, objptr
26c58     F2 32 E2 FA | 	rdword	local11, objptr
26c5c     06 24 06 F1 | 	add	local04, #6
26c60     12 33 52 FC | 	wrword	local11, local04
26c64     04 E4 05 F1 | 	add	objptr, #4
26c68     06 24 06 F1 | 	add	local04, #6
26c6c     12 E5 61 FC | 	wrlong	objptr, local04
26c70                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
26c70                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
26c70                 | ' 			{
26c70                 | ' 
26c70                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
26c70                 | ' 
26c70                 | ' 
26c70                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
26c70                 | ' 
26c70                 | ' 			}
26c70                 | ' 		}
26c70                 | ' 
26c70                 | ' 
26c70                 | ' 	}
26c70                 | ' 
26c70                 | ' 	fs->fs_type = (BYTE)fmt;
26c70                 | ' 	fs->id = ++Fsid;
26c70                 | ' 
26c70                 | ' 	fs->lfnbuf = LfnBuf;
26c70                 | ' #line 3567 "ff.c"
26c70                 | ' 	return FR_OK;
26c70     00 FA 05 F6 | 	mov	result1, #0
26c74     08 E4 85 F1 | 	sub	objptr, #8
26c78                 | LR__4020
26c78     A7 F0 03 F6 | 	mov	ptra, fp
26c7c     B2 00 A0 FD | 	call	#popregs_
26c80                 | _fatfs_cc_mount_volume_ret
26c80     2D 00 64 FD | 	ret
26c84                 | 
26c84                 | _fatfs_cc_validate
26c84     09 01 0A F6 | 	mov	_var01, arg01 wz
26c88     09 02 06 F6 | 	mov	_var02, #9
26c8c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
26c90     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
26c94     50 00 90 AD |  if_e	jmp	#LR__4030
26c98     04 00 06 F1 | 	add	_var01, #4
26c9c     00 07 E2 FA | 	rdword	_var04, _var01
26ca0     04 00 86 F1 | 	sub	_var01, #4
26ca4     00 13 02 FB | 	rdlong	arg01, _var01
26ca8     06 12 06 F1 | 	add	arg01, #6
26cac     09 FB E1 FA | 	rdword	result1, arg01
26cb0     FD 06 0A F2 | 	cmp	_var04, result1 wz
26cb4     30 00 90 5D |  if_ne	jmp	#LR__4030
26cb8     00 07 02 FB | 	rdlong	_var04, _var01
26cbc     01 06 06 F1 | 	add	_var04, #1
26cc0     03 13 CA FA | 	rdbyte	arg01, _var04 wz
26cc4     01 FA 05 56 |  if_ne	mov	result1, #1
26cc8                 | ' 
26cc8                 | ' 	return Stat;
26cc8     01 00 00 AF 
26ccc     20 E4 05 A1 |  if_e	add	objptr, ##544
26cd0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
26cd4     01 00 00 AF 
26cd8     20 E4 85 A1 |  if_e	sub	objptr, ##544
26cdc     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
26ce0     01 04 CE F7 | 	test	_var03, #1 wz
26ce4     00 02 06 A6 |  if_e	mov	_var02, #0
26ce8                 | LR__4030
26ce8     00 02 0E F2 | 	cmp	_var02, #0 wz
26cec     00 05 02 AB |  if_e	rdlong	_var03, _var01
26cf0     00 04 06 56 |  if_ne	mov	_var03, #0
26cf4     0A 05 62 FC | 	wrlong	_var03, arg02
26cf8                 | ' 			res = FR_OK;
26cf8                 | ' 		}
26cf8                 | ' 
26cf8                 | ' 	}
26cf8                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
26cf8                 | ' 	return res;
26cf8     01 FB 01 F6 | 	mov	result1, _var02
26cfc                 | _fatfs_cc_validate_ret
26cfc     2D 00 64 FD | 	ret
26d00                 | 
26d00                 | _fatfs_cc_f_mount
26d00     01 4A 05 F6 | 	mov	COUNT_, #1
26d04     A8 00 A0 FD | 	call	#pushregs_
26d08     20 F0 07 F1 | 	add	ptra, #32
26d0c     04 4E 05 F1 | 	add	fp, #4
26d10     A7 12 62 FC | 	wrlong	arg01, fp
26d14     04 4E 05 F1 | 	add	fp, #4
26d18     A7 14 62 FC | 	wrlong	arg02, fp
26d1c     04 4E 05 F1 | 	add	fp, #4
26d20     A7 16 42 FC | 	wrbyte	arg03, fp
26d24     04 4E 85 F1 | 	sub	fp, #4
26d28     A7 16 02 FB | 	rdlong	arg03, fp
26d2c     14 4E 05 F1 | 	add	fp, #20
26d30     A7 16 62 FC | 	wrlong	arg03, fp
26d34     A7 12 02 F6 | 	mov	arg01, fp
26d38     1C 4E 85 F1 | 	sub	fp, #28
26d3c     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
26d40     14 4E 05 F1 | 	add	fp, #20
26d44     A7 FA 61 FC | 	wrlong	result1, fp
26d48     14 4E 85 F1 | 	sub	fp, #20
26d4c     00 FA 55 F2 | 	cmps	result1, #0 wc
26d50     0B FA 05 C6 |  if_b	mov	result1, #11
26d54     C0 00 90 CD |  if_b	jmp	#LR__4041
26d58     14 4E 05 F1 | 	add	fp, #20
26d5c     A7 16 02 FB | 	rdlong	arg03, fp
26d60     02 16 66 F0 | 	shl	arg03, #2
26d64     F2 16 02 F1 | 	add	arg03, objptr
26d68     0B 17 0A FB | 	rdlong	arg03, arg03 wz
26d6c     04 4E 85 F1 | 	sub	fp, #4
26d70     A7 16 62 FC | 	wrlong	arg03, fp
26d74     10 4E 85 F1 | 	sub	fp, #16
26d78     28 00 90 AD |  if_e	jmp	#LR__4040
26d7c     10 4E 05 F1 | 	add	fp, #16
26d80     A7 16 02 FB | 	rdlong	arg03, fp
26d84     10 4E 85 F1 | 	sub	fp, #16
26d88     01 16 06 F1 | 	add	arg03, #1
26d8c     0B 13 C2 FA | 	rdbyte	arg01, arg03
26d90     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
26d94     10 4E 05 F1 | 	add	fp, #16
26d98     A7 16 02 FB | 	rdlong	arg03, fp
26d9c     10 4E 85 F1 | 	sub	fp, #16
26da0     0B 01 48 FC | 	wrbyte	#0, arg03
26da4                 | LR__4040
26da4     04 4E 05 F1 | 	add	fp, #4
26da8     A7 1E 0A FB | 	rdlong	local01, fp wz
26dac     04 4E 85 F1 | 	sub	fp, #4
26db0     04 4E 05 51 |  if_ne	add	fp, #4
26db4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26db8     04 4E 85 51 |  if_ne	sub	fp, #4
26dbc     0F 01 48 5C |  if_ne	wrbyte	#0, local01
26dc0     14 4E 05 F1 | 	add	fp, #20
26dc4     A7 1E 02 FB | 	rdlong	local01, fp
26dc8     02 1E 66 F0 | 	shl	local01, #2
26dcc     F2 1E 02 F1 | 	add	local01, objptr
26dd0     10 4E 85 F1 | 	sub	fp, #16
26dd4     A7 16 02 FB | 	rdlong	arg03, fp
26dd8     0F 17 62 FC | 	wrlong	arg03, local01
26ddc     08 4E 05 F1 | 	add	fp, #8
26de0     A7 1E CA FA | 	rdbyte	local01, fp wz
26de4     0C 4E 85 F1 | 	sub	fp, #12
26de8     00 FA 05 A6 |  if_e	mov	result1, #0
26dec     28 00 90 AD |  if_e	jmp	#LR__4041
26df0     08 4E 05 F1 | 	add	fp, #8
26df4     A7 12 02 F6 | 	mov	arg01, fp
26df8     04 4E 85 F1 | 	sub	fp, #4
26dfc     A7 14 02 F6 | 	mov	arg02, fp
26e00     04 4E 85 F1 | 	sub	fp, #4
26e04     00 16 06 F6 | 	mov	arg03, #0
26e08     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
26e0c     18 4E 05 F1 | 	add	fp, #24
26e10     A7 FA 61 FC | 	wrlong	result1, fp
26e14                 | ' 
26e14                 | ' 	res = mount_volume(&path, &fs, 0);
26e14                 | ' 	return res ;
26e14     18 4E 85 F1 | 	sub	fp, #24
26e18                 | LR__4041
26e18     A7 F0 03 F6 | 	mov	ptra, fp
26e1c     B2 00 A0 FD | 	call	#popregs_
26e20                 | _fatfs_cc_f_mount_ret
26e20     2D 00 64 FD | 	ret
26e24                 | 
26e24                 | _fatfs_cc_f_open
26e24     02 4A 05 F6 | 	mov	COUNT_, #2
26e28     A8 00 A0 FD | 	call	#pushregs_
26e2c     60 F0 07 F1 | 	add	ptra, #96
26e30     04 4E 05 F1 | 	add	fp, #4
26e34     A7 12 62 FC | 	wrlong	arg01, fp
26e38     04 4E 05 F1 | 	add	fp, #4
26e3c     A7 14 62 FC | 	wrlong	arg02, fp
26e40     04 4E 05 F1 | 	add	fp, #4
26e44     A7 16 42 FC | 	wrbyte	arg03, fp
26e48     08 4E 85 F1 | 	sub	fp, #8
26e4c     A7 18 0A FB | 	rdlong	arg04, fp wz
26e50     04 4E 85 F1 | 	sub	fp, #4
26e54     09 FA 05 A6 |  if_e	mov	result1, #9
26e58     98 06 90 AD |  if_e	jmp	#LR__4067
26e5c     0C 4E 05 F1 | 	add	fp, #12
26e60     A7 18 C2 FA | 	rdbyte	arg04, fp
26e64     3F 18 06 F5 | 	and	arg04, #63
26e68     A7 18 42 FC | 	wrbyte	arg04, fp
26e6c     04 4E 85 F1 | 	sub	fp, #4
26e70     A7 12 02 F6 | 	mov	arg01, fp
26e74     3C 4E 05 F1 | 	add	fp, #60
26e78     A7 14 02 F6 | 	mov	arg02, fp
26e7c     38 4E 85 F1 | 	sub	fp, #56
26e80     A7 16 C2 FA | 	rdbyte	arg03, fp
26e84     0C 4E 85 F1 | 	sub	fp, #12
26e88     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
26e8c     10 4E 05 F1 | 	add	fp, #16
26e90     A7 FA 61 FC | 	wrlong	result1, fp
26e94     10 4E 85 F1 | 	sub	fp, #16
26e98     00 FA 0D F2 | 	cmp	result1, #0 wz
26e9c     2C 06 90 5D |  if_ne	jmp	#LR__4066
26ea0     44 4E 05 F1 | 	add	fp, #68
26ea4     A7 18 02 FB | 	rdlong	arg04, fp
26ea8     30 4E 85 F1 | 	sub	fp, #48
26eac     A7 18 62 FC | 	wrlong	arg04, fp
26eb0     A7 12 02 F6 | 	mov	arg01, fp
26eb4     0C 4E 85 F1 | 	sub	fp, #12
26eb8     A7 1E 02 FB | 	rdlong	local01, fp
26ebc     08 4E 85 F1 | 	sub	fp, #8
26ec0     0F 15 02 F6 | 	mov	arg02, local01
26ec4     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
26ec8     10 4E 05 F1 | 	add	fp, #16
26ecc     A7 FA 61 FC | 	wrlong	result1, fp
26ed0     10 4E 85 F1 | 	sub	fp, #16
26ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
26ed8     1C 00 90 5D |  if_ne	jmp	#LR__4050
26edc     3F 4E 05 F1 | 	add	fp, #63
26ee0     A7 18 C2 FA | 	rdbyte	arg04, fp
26ee4     3F 4E 85 F1 | 	sub	fp, #63
26ee8     80 18 CE F7 | 	test	arg04, #128 wz
26eec     10 4E 05 51 |  if_ne	add	fp, #16
26ef0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
26ef4     10 4E 85 51 |  if_ne	sub	fp, #16
26ef8                 | LR__4050
26ef8     0C 4E 05 F1 | 	add	fp, #12
26efc     A7 18 C2 FA | 	rdbyte	arg04, fp
26f00     0C 4E 85 F1 | 	sub	fp, #12
26f04     1C 18 CE F7 | 	test	arg04, #28 wz
26f08     F0 01 90 AD |  if_e	jmp	#LR__4055
26f0c     10 4E 05 F1 | 	add	fp, #16
26f10     A7 1E 0A FB | 	rdlong	local01, fp wz
26f14     10 4E 85 F1 | 	sub	fp, #16
26f18     48 00 90 AD |  if_e	jmp	#LR__4052
26f1c     10 4E 05 F1 | 	add	fp, #16
26f20     A7 18 02 FB | 	rdlong	arg04, fp
26f24     10 4E 85 F1 | 	sub	fp, #16
26f28     04 18 0E F2 | 	cmp	arg04, #4 wz
26f2c     1C 00 90 5D |  if_ne	jmp	#LR__4051
26f30     14 4E 05 F1 | 	add	fp, #20
26f34     A7 12 02 F6 | 	mov	arg01, fp
26f38     14 4E 85 F1 | 	sub	fp, #20
26f3c     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
26f40     10 4E 05 F1 | 	add	fp, #16
26f44     A7 FA 61 FC | 	wrlong	result1, fp
26f48     10 4E 85 F1 | 	sub	fp, #16
26f4c                 | LR__4051
26f4c     0C 4E 05 F1 | 	add	fp, #12
26f50     A7 1E C2 FA | 	rdbyte	local01, fp
26f54     08 1E 46 F5 | 	or	local01, #8
26f58     A7 1E 42 FC | 	wrbyte	local01, fp
26f5c     0C 4E 85 F1 | 	sub	fp, #12
26f60     3C 00 90 FD | 	jmp	#LR__4054
26f64                 | LR__4052
26f64     1A 4E 05 F1 | 	add	fp, #26
26f68     A7 1E C2 FA | 	rdbyte	local01, fp
26f6c     1A 4E 85 F1 | 	sub	fp, #26
26f70     11 1E CE F7 | 	test	local01, #17 wz
26f74     10 4E 05 51 |  if_ne	add	fp, #16
26f78     A7 0E 68 5C |  if_ne	wrlong	#7, fp
26f7c     10 4E 85 51 |  if_ne	sub	fp, #16
26f80     1C 00 90 5D |  if_ne	jmp	#LR__4053
26f84     0C 4E 05 F1 | 	add	fp, #12
26f88     A7 1E C2 FA | 	rdbyte	local01, fp
26f8c     0C 4E 85 F1 | 	sub	fp, #12
26f90     04 1E CE F7 | 	test	local01, #4 wz
26f94     10 4E 05 51 |  if_ne	add	fp, #16
26f98     A7 10 68 5C |  if_ne	wrlong	#8, fp
26f9c     10 4E 85 51 |  if_ne	sub	fp, #16
26fa0                 | LR__4053
26fa0                 | LR__4054
26fa0     10 4E 05 F1 | 	add	fp, #16
26fa4     A7 1E 0A FB | 	rdlong	local01, fp wz
26fa8     10 4E 85 F1 | 	sub	fp, #16
26fac     A8 01 90 5D |  if_ne	jmp	#LR__4058
26fb0     0C 4E 05 F1 | 	add	fp, #12
26fb4     A7 1E C2 FA | 	rdbyte	local01, fp
26fb8     0C 4E 85 F1 | 	sub	fp, #12
26fbc     08 1E CE F7 | 	test	local01, #8 wz
26fc0     94 01 90 AD |  if_e	jmp	#LR__4058
26fc4     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
26fc8     54 4E 05 F1 | 	add	fp, #84
26fcc     A7 FA 61 FC | 	wrlong	result1, fp
26fd0     24 4E 85 F1 | 	sub	fp, #36
26fd4     A7 12 02 FB | 	rdlong	arg01, fp
26fd8     0E 12 06 F1 | 	add	arg01, #14
26fdc     09 FB 61 FC | 	wrlong	result1, arg01
26fe0     A7 12 02 FB | 	rdlong	arg01, fp
26fe4     16 12 06 F1 | 	add	arg01, #22
26fe8     24 4E 05 F1 | 	add	fp, #36
26fec     A7 14 02 FB | 	rdlong	arg02, fp
26ff0     09 15 62 FC | 	wrlong	arg02, arg01
26ff4     10 4E 85 F1 | 	sub	fp, #16
26ff8     A7 12 02 FB | 	rdlong	arg01, fp
26ffc     14 4E 85 F1 | 	sub	fp, #20
27000     A7 14 02 FB | 	rdlong	arg02, fp
27004     30 4E 85 F1 | 	sub	fp, #48
27008     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2700c     48 4E 05 F1 | 	add	fp, #72
27010     A7 FA 61 FC | 	wrlong	result1, fp
27014     18 4E 85 F1 | 	sub	fp, #24
27018     A7 1E 02 FB | 	rdlong	local01, fp
2701c     0B 1E 06 F1 | 	add	local01, #11
27020     0F 41 48 FC | 	wrbyte	#32, local01
27024     14 4E 05 F1 | 	add	fp, #20
27028     A7 12 02 FB | 	rdlong	arg01, fp
2702c     14 4E 85 F1 | 	sub	fp, #20
27030     A7 14 02 FB | 	rdlong	arg02, fp
27034     30 4E 85 F1 | 	sub	fp, #48
27038     00 16 06 F6 | 	mov	arg03, #0
2703c     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
27040     30 4E 05 F1 | 	add	fp, #48
27044     A7 12 02 FB | 	rdlong	arg01, fp
27048     1C 12 06 F1 | 	add	arg01, #28
2704c     09 01 68 FC | 	wrlong	#0, arg01
27050     14 4E 05 F1 | 	add	fp, #20
27054     A7 1E 02 FB | 	rdlong	local01, fp
27058     03 1E 06 F1 | 	add	local01, #3
2705c     0F 03 48 FC | 	wrbyte	#1, local01
27060     04 4E 05 F1 | 	add	fp, #4
27064     A7 1E 0A FB | 	rdlong	local01, fp wz
27068     48 4E 85 F1 | 	sub	fp, #72
2706c     E8 00 90 AD |  if_e	jmp	#LR__4058
27070     44 4E 05 F1 | 	add	fp, #68
27074     A7 1E 02 FB | 	rdlong	local01, fp
27078     30 1E 06 F1 | 	add	local01, #48
2707c     0F 1F 02 FB | 	rdlong	local01, local01
27080     14 4E 05 F1 | 	add	fp, #20
27084     A7 1E 62 FC | 	wrlong	local01, fp
27088     44 4E 85 F1 | 	sub	fp, #68
2708c     A7 12 02 F6 | 	mov	arg01, fp
27090     34 4E 05 F1 | 	add	fp, #52
27094     A7 14 02 FB | 	rdlong	arg02, fp
27098     48 4E 85 F1 | 	sub	fp, #72
2709c     00 16 06 F6 | 	mov	arg03, #0
270a0     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
270a4     10 4E 05 F1 | 	add	fp, #16
270a8     A7 FA 61 FC | 	wrlong	result1, fp
270ac     10 4E 85 F1 | 	sub	fp, #16
270b0     00 FA 0D F2 | 	cmp	result1, #0 wz
270b4     A0 00 90 5D |  if_ne	jmp	#LR__4058
270b8     44 4E 05 F1 | 	add	fp, #68
270bc     A7 12 02 FB | 	rdlong	arg01, fp
270c0     14 4E 05 F1 | 	add	fp, #20
270c4     A7 14 02 FB | 	rdlong	arg02, fp
270c8     58 4E 85 F1 | 	sub	fp, #88
270cc     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
270d0     10 4E 05 F1 | 	add	fp, #16
270d4     A7 FA 61 FC | 	wrlong	result1, fp
270d8     34 4E 05 F1 | 	add	fp, #52
270dc     A7 18 02 FB | 	rdlong	arg04, fp
270e0     04 4E 05 F1 | 	add	fp, #4
270e4     A7 1E 02 FB | 	rdlong	local01, fp
270e8     48 4E 85 F1 | 	sub	fp, #72
270ec     01 1E 86 F1 | 	sub	local01, #1
270f0     10 18 06 F1 | 	add	arg04, #16
270f4     0C 1F 62 FC | 	wrlong	local01, arg04
270f8     5C 00 90 FD | 	jmp	#LR__4058
270fc                 | LR__4055
270fc     10 4E 05 F1 | 	add	fp, #16
27100     A7 18 0A FB | 	rdlong	arg04, fp wz
27104     10 4E 85 F1 | 	sub	fp, #16
27108     4C 00 90 5D |  if_ne	jmp	#LR__4057
2710c     1A 4E 05 F1 | 	add	fp, #26
27110     A7 18 C2 FA | 	rdbyte	arg04, fp
27114     1A 4E 85 F1 | 	sub	fp, #26
27118     10 18 CE F7 | 	test	arg04, #16 wz
2711c     10 4E 05 51 |  if_ne	add	fp, #16
27120     A7 08 68 5C |  if_ne	wrlong	#4, fp
27124     10 4E 85 51 |  if_ne	sub	fp, #16
27128     2C 00 90 5D |  if_ne	jmp	#LR__4056
2712c     0C 4E 05 F1 | 	add	fp, #12
27130     A7 18 C2 FA | 	rdbyte	arg04, fp
27134     0C 4E 85 F1 | 	sub	fp, #12
27138     02 18 CE F7 | 	test	arg04, #2 wz
2713c     1A 4E 05 51 |  if_ne	add	fp, #26
27140     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
27144     1A 4E 85 51 |  if_ne	sub	fp, #26
27148     01 1E CE 57 |  if_ne	test	local01, #1 wz
2714c     10 4E 05 51 |  if_ne	add	fp, #16
27150     A7 0E 68 5C |  if_ne	wrlong	#7, fp
27154     10 4E 85 51 |  if_ne	sub	fp, #16
27158                 | LR__4056
27158                 | LR__4057
27158                 | LR__4058
27158     10 4E 05 F1 | 	add	fp, #16
2715c     A7 1E 0A FB | 	rdlong	local01, fp wz
27160     10 4E 85 F1 | 	sub	fp, #16
27164     60 00 90 5D |  if_ne	jmp	#LR__4059
27168     0C 4E 05 F1 | 	add	fp, #12
2716c     A7 20 C2 FA | 	rdbyte	local02, fp
27170     0C 4E 85 F1 | 	sub	fp, #12
27174     08 20 CE F7 | 	test	local02, #8 wz
27178     0C 4E 05 51 |  if_ne	add	fp, #12
2717c     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
27180     40 20 46 55 |  if_ne	or	local02, #64
27184     A7 20 42 5C |  if_ne	wrbyte	local02, fp
27188     0C 4E 85 51 |  if_ne	sub	fp, #12
2718c     04 4E 05 F1 | 	add	fp, #4
27190     A7 20 02 FB | 	rdlong	local02, fp
27194     40 4E 05 F1 | 	add	fp, #64
27198     A7 1E 02 FB | 	rdlong	local01, fp
2719c     30 1E 06 F1 | 	add	local01, #48
271a0     0F 1F 02 FB | 	rdlong	local01, local01
271a4     20 20 06 F1 | 	add	local02, #32
271a8     10 1F 62 FC | 	wrlong	local01, local02
271ac     40 4E 85 F1 | 	sub	fp, #64
271b0     A7 20 02 FB | 	rdlong	local02, fp
271b4     2C 4E 05 F1 | 	add	fp, #44
271b8     A7 1E 02 FB | 	rdlong	local01, fp
271bc     30 4E 85 F1 | 	sub	fp, #48
271c0     24 20 06 F1 | 	add	local02, #36
271c4     10 1F 62 FC | 	wrlong	local01, local02
271c8                 | LR__4059
271c8     10 4E 05 F1 | 	add	fp, #16
271cc     A7 20 0A FB | 	rdlong	local02, fp wz
271d0     10 4E 85 F1 | 	sub	fp, #16
271d4     F4 02 90 5D |  if_ne	jmp	#LR__4065
271d8     04 4E 05 F1 | 	add	fp, #4
271dc     A7 20 02 FB | 	rdlong	local02, fp
271e0     40 4E 05 F1 | 	add	fp, #64
271e4     A7 12 02 FB | 	rdlong	arg01, fp
271e8     14 4E 85 F1 | 	sub	fp, #20
271ec     A7 14 02 FB | 	rdlong	arg02, fp
271f0     30 4E 85 F1 | 	sub	fp, #48
271f4     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
271f8     08 20 06 F1 | 	add	local02, #8
271fc     10 FB 61 FC | 	wrlong	result1, local02
27200     04 4E 05 F1 | 	add	fp, #4
27204     A7 20 02 FB | 	rdlong	local02, fp
27208     2C 4E 05 F1 | 	add	fp, #44
2720c     A7 12 02 FB | 	rdlong	arg01, fp
27210     1C 12 06 F1 | 	add	arg01, #28
27214                 | ' {
27214                 | ' 
27214                 | ' 	return *((DWORD*)ptr);
27214     09 FB 01 FB | 	rdlong	result1, arg01
27218     0C 20 06 F1 | 	add	local02, #12
2721c     10 FB 61 FC | 	wrlong	result1, local02
27220     2C 4E 85 F1 | 	sub	fp, #44
27224     A7 20 02 FB | 	rdlong	local02, fp
27228     40 4E 05 F1 | 	add	fp, #64
2722c     A7 1E 02 FB | 	rdlong	local01, fp
27230     10 1F 62 FC | 	wrlong	local01, local02
27234     40 4E 85 F1 | 	sub	fp, #64
27238     A7 20 02 FB | 	rdlong	local02, fp
2723c     40 4E 05 F1 | 	add	fp, #64
27240     A7 1E 02 FB | 	rdlong	local01, fp
27244     06 1E 06 F1 | 	add	local01, #6
27248     0F 1F E2 FA | 	rdword	local01, local01
2724c     04 20 06 F1 | 	add	local02, #4
27250     10 1F 52 FC | 	wrword	local01, local02
27254     40 4E 85 F1 | 	sub	fp, #64
27258     A7 20 02 FB | 	rdlong	local02, fp
2725c     08 4E 05 F1 | 	add	fp, #8
27260     A7 1E C2 FA | 	rdbyte	local01, fp
27264     10 20 06 F1 | 	add	local02, #16
27268     10 1F 42 FC | 	wrbyte	local01, local02
2726c     08 4E 85 F1 | 	sub	fp, #8
27270     A7 20 02 FB | 	rdlong	local02, fp
27274     11 20 06 F1 | 	add	local02, #17
27278     10 01 48 FC | 	wrbyte	#0, local02
2727c     A7 20 02 FB | 	rdlong	local02, fp
27280     1C 20 06 F1 | 	add	local02, #28
27284     10 01 68 FC | 	wrlong	#0, local02
27288     A7 20 02 FB | 	rdlong	local02, fp
2728c     14 20 06 F1 | 	add	local02, #20
27290     10 01 68 FC | 	wrlong	#0, local02
27294     A7 12 02 FB | 	rdlong	arg01, fp
27298     04 4E 85 F1 | 	sub	fp, #4
2729c     28 12 06 F1 | 	add	arg01, #40
272a0     00 14 06 F6 | 	mov	arg02, #0
272a4     09 16 C6 F9 | 	decod	arg03, #9
272a8     98 00 A0 FD | 	call	#\builtin_bytefill_
272ac     0C 4E 05 F1 | 	add	fp, #12
272b0     A7 20 C2 FA | 	rdbyte	local02, fp
272b4     0C 4E 85 F1 | 	sub	fp, #12
272b8     20 20 CE F7 | 	test	local02, #32 wz
272bc     0C 02 90 AD |  if_e	jmp	#LR__4064
272c0     04 4E 05 F1 | 	add	fp, #4
272c4     A7 1E 02 FB | 	rdlong	local01, fp
272c8     04 4E 85 F1 | 	sub	fp, #4
272cc     0C 1E 06 F1 | 	add	local01, #12
272d0     0F 21 02 FB | 	rdlong	local02, local01
272d4     01 20 16 F2 | 	cmp	local02, #1 wc
272d8     F0 01 90 CD |  if_b	jmp	#LR__4064
272dc     04 4E 05 F1 | 	add	fp, #4
272e0     A7 1E 02 FB | 	rdlong	local01, fp
272e4     0F 21 02 F6 | 	mov	local02, local01
272e8     0C 1E 06 F1 | 	add	local01, #12
272ec     0F 1F 02 FB | 	rdlong	local01, local01
272f0     14 20 06 F1 | 	add	local02, #20
272f4     10 1F 62 FC | 	wrlong	local01, local02
272f8     40 4E 05 F1 | 	add	fp, #64
272fc     A7 20 02 FB | 	rdlong	local02, fp
27300     0A 20 06 F1 | 	add	local02, #10
27304     10 21 E2 FA | 	rdword	local02, local02
27308     09 20 66 F0 | 	shl	local02, #9
2730c     08 4E 05 F1 | 	add	fp, #8
27310     A7 20 62 FC | 	wrlong	local02, fp
27314     48 4E 85 F1 | 	sub	fp, #72
27318     A7 20 02 FB | 	rdlong	local02, fp
2731c     08 20 06 F1 | 	add	local02, #8
27320     10 1F 02 FB | 	rdlong	local01, local02
27324     4C 4E 05 F1 | 	add	fp, #76
27328     A7 1E 62 FC | 	wrlong	local01, fp
2732c                 | ' 				fp->fptr = fp->obj.objsize;
2732c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2732c                 | ' 				clst = fp->obj.sclust;
2732c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2732c     4C 4E 85 F1 | 	sub	fp, #76
27330     A7 20 02 FB | 	rdlong	local02, fp
27334     0C 20 06 F1 | 	add	local02, #12
27338     10 1F 02 FB | 	rdlong	local01, local02
2733c     58 4E 05 F1 | 	add	fp, #88
27340     A7 1E 62 FC | 	wrlong	local01, fp
27344     5C 4E 85 F1 | 	sub	fp, #92
27348                 | LR__4060
27348     10 4E 05 F1 | 	add	fp, #16
2734c     A7 20 0A FB | 	rdlong	local02, fp wz
27350     10 4E 85 F1 | 	sub	fp, #16
27354     94 00 90 5D |  if_ne	jmp	#LR__4061
27358     5C 4E 05 F1 | 	add	fp, #92
2735c     A7 20 02 FB | 	rdlong	local02, fp
27360     10 4E 85 F1 | 	sub	fp, #16
27364     A7 1E 02 FB | 	rdlong	local01, fp
27368     4C 4E 85 F1 | 	sub	fp, #76
2736c     0F 21 1A F2 | 	cmp	local02, local01 wcz
27370     78 00 90 ED |  if_be	jmp	#LR__4061
27374     04 4E 05 F1 | 	add	fp, #4
27378     A7 12 02 FB | 	rdlong	arg01, fp
2737c     4C 4E 05 F1 | 	add	fp, #76
27380     A7 14 02 FB | 	rdlong	arg02, fp
27384     50 4E 85 F1 | 	sub	fp, #80
27388     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2738c     50 4E 05 F1 | 	add	fp, #80
27390     A7 FA 61 FC | 	wrlong	result1, fp
27394     50 4E 85 F1 | 	sub	fp, #80
27398     02 FA 15 F2 | 	cmp	result1, #2 wc
2739c     10 4E 05 C1 |  if_b	add	fp, #16
273a0     A7 04 68 CC |  if_b	wrlong	#2, fp
273a4     10 4E 85 C1 |  if_b	sub	fp, #16
273a8     50 4E 05 F1 | 	add	fp, #80
273ac     A7 20 02 FB | 	rdlong	local02, fp
273b0     50 4E 85 F1 | 	sub	fp, #80
273b4     FF FF 7F FF 
273b8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
273bc     10 4E 05 A1 |  if_e	add	fp, #16
273c0     A7 02 68 AC |  if_e	wrlong	#1, fp
273c4     10 4E 85 A1 |  if_e	sub	fp, #16
273c8     5C 4E 05 F1 | 	add	fp, #92
273cc     A7 20 02 FB | 	rdlong	local02, fp
273d0     10 4E 85 F1 | 	sub	fp, #16
273d4     A7 1E 02 FB | 	rdlong	local01, fp
273d8     0F 21 82 F1 | 	sub	local02, local01
273dc     10 4E 05 F1 | 	add	fp, #16
273e0     A7 20 62 FC | 	wrlong	local02, fp
273e4     5C 4E 85 F1 | 	sub	fp, #92
273e8     5C FF 9F FD | 	jmp	#LR__4060
273ec                 | LR__4061
273ec     04 4E 05 F1 | 	add	fp, #4
273f0     A7 20 02 FB | 	rdlong	local02, fp
273f4     4C 4E 05 F1 | 	add	fp, #76
273f8     A7 1E 02 FB | 	rdlong	local01, fp
273fc     18 20 06 F1 | 	add	local02, #24
27400     10 1F 62 FC | 	wrlong	local01, local02
27404     40 4E 85 F1 | 	sub	fp, #64
27408     A7 20 0A FB | 	rdlong	local02, fp wz
2740c     10 4E 85 F1 | 	sub	fp, #16
27410     B8 00 90 5D |  if_ne	jmp	#LR__4063
27414     5C 4E 05 F1 | 	add	fp, #92
27418     A7 1E 02 FB | 	rdlong	local01, fp
2741c     5C 4E 85 F1 | 	sub	fp, #92
27420     FF 1F CE F7 | 	test	local01, #511 wz
27424     A4 00 90 AD |  if_e	jmp	#LR__4063
27428     44 4E 05 F1 | 	add	fp, #68
2742c     A7 12 02 FB | 	rdlong	arg01, fp
27430     0C 4E 05 F1 | 	add	fp, #12
27434     A7 14 02 FB | 	rdlong	arg02, fp
27438     50 4E 85 F1 | 	sub	fp, #80
2743c     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
27440     58 4E 05 F1 | 	add	fp, #88
27444     A7 FA 61 FC | 	wrlong	result1, fp
27448     00 FA 4D F2 | 	cmps	result1, #0 wz
2744c     58 4E 85 F1 | 	sub	fp, #88
27450     10 4E 05 A1 |  if_e	add	fp, #16
27454     A7 04 68 AC |  if_e	wrlong	#2, fp
27458     10 4E 85 A1 |  if_e	sub	fp, #16
2745c     6C 00 90 AD |  if_e	jmp	#LR__4062
27460     04 4E 05 F1 | 	add	fp, #4
27464     A7 20 02 FB | 	rdlong	local02, fp
27468     54 4E 05 F1 | 	add	fp, #84
2746c     A7 1E 02 FB | 	rdlong	local01, fp
27470     04 4E 05 F1 | 	add	fp, #4
27474     A7 18 02 FB | 	rdlong	arg04, fp
27478     09 18 46 F0 | 	shr	arg04, #9
2747c     0C 1F 02 F1 | 	add	local01, arg04
27480     1C 20 06 F1 | 	add	local02, #28
27484     10 1F 62 FC | 	wrlong	local01, local02
27488     18 4E 85 F1 | 	sub	fp, #24
2748c     A7 20 02 FB | 	rdlong	local02, fp
27490     01 20 06 F1 | 	add	local02, #1
27494     10 13 C2 FA | 	rdbyte	arg01, local02
27498     40 4E 85 F1 | 	sub	fp, #64
2749c     A7 20 02 FB | 	rdlong	local02, fp
274a0     10 15 02 F6 | 	mov	arg02, local02
274a4     28 14 06 F1 | 	add	arg02, #40
274a8     04 4E 85 F1 | 	sub	fp, #4
274ac     1C 20 06 F1 | 	add	local02, #28
274b0     10 17 02 FB | 	rdlong	arg03, local02
274b4     01 18 06 F6 | 	mov	arg04, #1
274b8     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
274bc     00 FA 0D F2 | 	cmp	result1, #0 wz
274c0     10 4E 05 51 |  if_ne	add	fp, #16
274c4     A7 02 68 5C |  if_ne	wrlong	#1, fp
274c8     10 4E 85 51 |  if_ne	sub	fp, #16
274cc                 | LR__4062
274cc                 | LR__4063
274cc                 | LR__4064
274cc                 | LR__4065
274cc                 | LR__4066
274cc     10 4E 05 F1 | 	add	fp, #16
274d0     A7 20 0A FB | 	rdlong	local02, fp wz
274d4     10 4E 85 F1 | 	sub	fp, #16
274d8     04 4E 05 51 |  if_ne	add	fp, #4
274dc     A7 20 02 5B |  if_ne	rdlong	local02, fp
274e0     04 4E 85 51 |  if_ne	sub	fp, #4
274e4     10 01 68 5C |  if_ne	wrlong	#0, local02
274e8                 | ' 
274e8                 | ' 	return res ;
274e8     10 4E 05 F1 | 	add	fp, #16
274ec     A7 FA 01 FB | 	rdlong	result1, fp
274f0     10 4E 85 F1 | 	sub	fp, #16
274f4                 | LR__4067
274f4     A7 F0 03 F6 | 	mov	ptra, fp
274f8     B2 00 A0 FD | 	call	#popregs_
274fc                 | _fatfs_cc_f_open_ret
274fc     2D 00 64 FD | 	ret
27500                 | 
27500                 | _fatfs_cc_f_read
27500     0E 4A 05 F6 | 	mov	COUNT_, #14
27504     A8 00 A0 FD | 	call	#pushregs_
27508     38 F0 07 F1 | 	add	ptra, #56
2750c     04 4E 05 F1 | 	add	fp, #4
27510     A7 12 62 FC | 	wrlong	arg01, fp
27514     04 4E 05 F1 | 	add	fp, #4
27518     A7 14 62 FC | 	wrlong	arg02, fp
2751c     04 4E 05 F1 | 	add	fp, #4
27520     A7 16 62 FC | 	wrlong	arg03, fp
27524     04 4E 05 F1 | 	add	fp, #4
27528     A7 18 62 FC | 	wrlong	arg04, fp
2752c     08 4E 85 F1 | 	sub	fp, #8
27530     A7 FA 01 FB | 	rdlong	result1, fp
27534     2C 4E 05 F1 | 	add	fp, #44
27538     A7 FA 61 FC | 	wrlong	result1, fp
2753c     24 4E 85 F1 | 	sub	fp, #36
27540     A7 FA 01 FB | 	rdlong	result1, fp
27544     FD 00 68 FC | 	wrlong	#0, result1
27548     0C 4E 85 F1 | 	sub	fp, #12
2754c     A7 12 02 FB | 	rdlong	arg01, fp
27550     14 4E 05 F1 | 	add	fp, #20
27554     A7 14 02 F6 | 	mov	arg02, fp
27558     18 4E 85 F1 | 	sub	fp, #24
2755c     24 F7 BF FD | 	call	#_fatfs_cc_validate
27560     14 4E 05 F1 | 	add	fp, #20
27564     A7 FA 61 FC | 	wrlong	result1, fp
27568     00 FA 4D F2 | 	cmps	result1, #0 wz
2756c     14 4E 85 F1 | 	sub	fp, #20
27570     20 00 90 5D |  if_ne	jmp	#LR__4070
27574     04 4E 05 F1 | 	add	fp, #4
27578     A7 14 02 FB | 	rdlong	arg02, fp
2757c     11 14 06 F1 | 	add	arg02, #17
27580     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
27584     10 4E 05 F1 | 	add	fp, #16
27588     A7 14 62 FC | 	wrlong	arg02, fp
2758c     14 4E 85 F1 | 	sub	fp, #20
27590     10 00 90 AD |  if_e	jmp	#LR__4071
27594                 | LR__4070
27594     14 4E 05 F1 | 	add	fp, #20
27598     A7 FA 01 FB | 	rdlong	result1, fp
2759c     14 4E 85 F1 | 	sub	fp, #20
275a0     EC 05 90 FD | 	jmp	#LR__4090
275a4                 | LR__4071
275a4     04 4E 05 F1 | 	add	fp, #4
275a8     A7 18 02 FB | 	rdlong	arg04, fp
275ac     04 4E 85 F1 | 	sub	fp, #4
275b0     10 18 06 F1 | 	add	arg04, #16
275b4     0C 19 C2 FA | 	rdbyte	arg04, arg04
275b8     01 18 CE F7 | 	test	arg04, #1 wz
275bc     07 FA 05 A6 |  if_e	mov	result1, #7
275c0     CC 05 90 AD |  if_e	jmp	#LR__4090
275c4     04 4E 05 F1 | 	add	fp, #4
275c8     A7 1E 02 FB | 	rdlong	local01, fp
275cc     0F 21 02 F6 | 	mov	local02, local01
275d0     0C 20 06 F1 | 	add	local02, #12
275d4     10 23 02 FB | 	rdlong	local03, local02
275d8     14 1E 06 F1 | 	add	local01, #20
275dc     0F 1F 02 FB | 	rdlong	local01, local01
275e0     0F 23 82 F1 | 	sub	local03, local01
275e4     20 4E 05 F1 | 	add	fp, #32
275e8     A7 22 62 FC | 	wrlong	local03, fp
275ec     18 4E 85 F1 | 	sub	fp, #24
275f0     A7 24 02 FB | 	rdlong	local04, fp
275f4     0C 4E 85 F1 | 	sub	fp, #12
275f8     11 25 1A F2 | 	cmp	local04, local03 wcz
275fc     24 4E 05 11 |  if_a	add	fp, #36
27600     A7 24 02 1B |  if_a	rdlong	local04, fp
27604     18 4E 85 11 |  if_a	sub	fp, #24
27608     A7 24 62 1C |  if_a	wrlong	local04, fp
2760c     0C 4E 85 11 |  if_a	sub	fp, #12
27610                 | ' 
27610                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
27610                 | LR__4072
27610     0C 4E 05 F1 | 	add	fp, #12
27614     A7 20 02 FB | 	rdlong	local02, fp
27618     0C 4E 85 F1 | 	sub	fp, #12
2761c     10 25 02 F6 | 	mov	local04, local02
27620     01 24 16 F2 | 	cmp	local04, #1 wc
27624     64 05 90 CD |  if_b	jmp	#LR__4089
27628     04 4E 05 F1 | 	add	fp, #4
2762c     A7 22 02 FB | 	rdlong	local03, fp
27630     04 4E 85 F1 | 	sub	fp, #4
27634     14 22 06 F1 | 	add	local03, #20
27638     11 23 02 FB | 	rdlong	local03, local03
2763c     FF 23 CE F7 | 	test	local03, #511 wz
27640     3C 04 90 5D |  if_ne	jmp	#LR__4087
27644     04 4E 05 F1 | 	add	fp, #4
27648     A7 1E 02 FB | 	rdlong	local01, fp
2764c     14 1E 06 F1 | 	add	local01, #20
27650     0F 23 02 FB | 	rdlong	local03, local01
27654     09 22 46 F0 | 	shr	local03, #9
27658     14 4E 05 F1 | 	add	fp, #20
2765c     A7 26 02 FB | 	rdlong	local05, fp
27660     13 29 02 F6 | 	mov	local06, local05
27664     0A 28 06 F1 | 	add	local06, #10
27668     14 2B E2 FA | 	rdword	local07, local06
2766c     0A 28 86 F1 | 	sub	local06, #10
27670     15 2D 32 F9 | 	getword	local08, local07, #0
27674     01 2C 86 F1 | 	sub	local08, #1
27678     16 23 0A F5 | 	and	local03, local08 wz
2767c     18 4E 05 F1 | 	add	fp, #24
27680     A7 22 62 FC | 	wrlong	local03, fp
27684     30 4E 85 F1 | 	sub	fp, #48
27688     E0 00 90 5D |  if_ne	jmp	#LR__4077
2768c     04 4E 05 F1 | 	add	fp, #4
27690     A7 22 02 FB | 	rdlong	local03, fp
27694     04 4E 85 F1 | 	sub	fp, #4
27698     14 22 06 F1 | 	add	local03, #20
2769c     11 23 0A FB | 	rdlong	local03, local03 wz
276a0     20 00 90 5D |  if_ne	jmp	#LR__4073
276a4     04 4E 05 F1 | 	add	fp, #4
276a8     A7 22 02 FB | 	rdlong	local03, fp
276ac     08 22 06 F1 | 	add	local03, #8
276b0     11 23 02 FB | 	rdlong	local03, local03
276b4     18 4E 05 F1 | 	add	fp, #24
276b8     A7 22 62 FC | 	wrlong	local03, fp
276bc     1C 4E 85 F1 | 	sub	fp, #28
276c0     28 00 90 FD | 	jmp	#LR__4074
276c4                 | LR__4073
276c4     04 4E 05 F1 | 	add	fp, #4
276c8     A7 2C 02 FB | 	rdlong	local08, fp
276cc     16 13 02 F6 | 	mov	arg01, local08
276d0     04 4E 85 F1 | 	sub	fp, #4
276d4     18 2C 06 F1 | 	add	local08, #24
276d8     16 15 02 FB | 	rdlong	arg02, local08
276dc     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
276e0     1C 4E 05 F1 | 	add	fp, #28
276e4     A7 FA 61 FC | 	wrlong	result1, fp
276e8     1C 4E 85 F1 | 	sub	fp, #28
276ec                 | LR__4074
276ec     1C 4E 05 F1 | 	add	fp, #28
276f0     A7 22 02 FB | 	rdlong	local03, fp
276f4     1C 4E 85 F1 | 	sub	fp, #28
276f8     02 22 16 F2 | 	cmp	local03, #2 wc
276fc     1C 00 90 3D |  if_ae	jmp	#LR__4075
27700     04 4E 05 F1 | 	add	fp, #4
27704     A7 22 02 FB | 	rdlong	local03, fp
27708     04 4E 85 F1 | 	sub	fp, #4
2770c     11 22 06 F1 | 	add	local03, #17
27710     11 05 48 FC | 	wrbyte	#2, local03
27714     02 FA 05 F6 | 	mov	result1, #2
27718     74 04 90 FD | 	jmp	#LR__4090
2771c                 | LR__4075
2771c     1C 4E 05 F1 | 	add	fp, #28
27720     A7 22 02 FB | 	rdlong	local03, fp
27724     1C 4E 85 F1 | 	sub	fp, #28
27728     FF FF 7F FF 
2772c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
27730     1C 00 90 5D |  if_ne	jmp	#LR__4076
27734     04 4E 05 F1 | 	add	fp, #4
27738     A7 22 02 FB | 	rdlong	local03, fp
2773c     04 4E 85 F1 | 	sub	fp, #4
27740     11 22 06 F1 | 	add	local03, #17
27744     11 03 48 FC | 	wrbyte	#1, local03
27748     01 FA 05 F6 | 	mov	result1, #1
2774c     40 04 90 FD | 	jmp	#LR__4090
27750                 | LR__4076
27750     04 4E 05 F1 | 	add	fp, #4
27754     A7 22 02 FB | 	rdlong	local03, fp
27758     18 4E 05 F1 | 	add	fp, #24
2775c     A7 2C 02 FB | 	rdlong	local08, fp
27760     1C 4E 85 F1 | 	sub	fp, #28
27764     18 22 06 F1 | 	add	local03, #24
27768     11 2D 62 FC | 	wrlong	local08, local03
2776c                 | LR__4077
2776c     18 4E 05 F1 | 	add	fp, #24
27770     A7 12 02 FB | 	rdlong	arg01, fp
27774     14 4E 85 F1 | 	sub	fp, #20
27778     A7 22 02 FB | 	rdlong	local03, fp
2777c     04 4E 85 F1 | 	sub	fp, #4
27780     18 22 06 F1 | 	add	local03, #24
27784     11 15 02 FB | 	rdlong	arg02, local03
27788     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2778c     20 4E 05 F1 | 	add	fp, #32
27790     A7 FA 61 FC | 	wrlong	result1, fp
27794     20 4E 85 F1 | 	sub	fp, #32
27798     00 FA 0D F2 | 	cmp	result1, #0 wz
2779c     1C 00 90 5D |  if_ne	jmp	#LR__4078
277a0     04 4E 05 F1 | 	add	fp, #4
277a4     A7 22 02 FB | 	rdlong	local03, fp
277a8     04 4E 85 F1 | 	sub	fp, #4
277ac     11 22 06 F1 | 	add	local03, #17
277b0     11 05 48 FC | 	wrbyte	#2, local03
277b4     02 FA 05 F6 | 	mov	result1, #2
277b8     D4 03 90 FD | 	jmp	#LR__4090
277bc                 | LR__4078
277bc     20 4E 05 F1 | 	add	fp, #32
277c0     A7 22 02 FB | 	rdlong	local03, fp
277c4     10 4E 05 F1 | 	add	fp, #16
277c8     A7 2C 02 FB | 	rdlong	local08, fp
277cc     16 23 02 F1 | 	add	local03, local08
277d0     10 4E 85 F1 | 	sub	fp, #16
277d4     A7 22 62 FC | 	wrlong	local03, fp
277d8     14 4E 85 F1 | 	sub	fp, #20
277dc     A7 22 02 FB | 	rdlong	local03, fp
277e0     09 22 46 F0 | 	shr	local03, #9
277e4     20 4E 05 F1 | 	add	fp, #32
277e8     A7 22 62 FC | 	wrlong	local03, fp
277ec     2C 4E 85 F1 | 	sub	fp, #44
277f0     01 22 16 F2 | 	cmp	local03, #1 wc
277f4     5C 01 90 CD |  if_b	jmp	#LR__4082
277f8     30 4E 05 F1 | 	add	fp, #48
277fc     A7 22 02 FB | 	rdlong	local03, fp
27800     04 4E 85 F1 | 	sub	fp, #4
27804     A7 2C 02 FB | 	rdlong	local08, fp
27808     16 23 02 F1 | 	add	local03, local08
2780c     14 4E 85 F1 | 	sub	fp, #20
27810     A7 2C 02 FB | 	rdlong	local08, fp
27814     18 4E 85 F1 | 	sub	fp, #24
27818     0A 2C 06 F1 | 	add	local08, #10
2781c     16 2D E2 FA | 	rdword	local08, local08
27820     16 23 1A F2 | 	cmp	local03, local08 wcz
27824     28 00 90 ED |  if_be	jmp	#LR__4079
27828     18 4E 05 F1 | 	add	fp, #24
2782c     A7 1E 02 FB | 	rdlong	local01, fp
27830     0A 1E 06 F1 | 	add	local01, #10
27834     0F 23 E2 FA | 	rdword	local03, local01
27838     18 4E 05 F1 | 	add	fp, #24
2783c     A7 2C 02 FB | 	rdlong	local08, fp
27840     16 23 82 F1 | 	sub	local03, local08
27844     04 4E 85 F1 | 	sub	fp, #4
27848     A7 22 62 FC | 	wrlong	local03, fp
2784c     2C 4E 85 F1 | 	sub	fp, #44
27850                 | LR__4079
27850     18 4E 05 F1 | 	add	fp, #24
27854     A7 1E 02 FB | 	rdlong	local01, fp
27858     01 1E 06 F1 | 	add	local01, #1
2785c     0F 13 C2 FA | 	rdbyte	arg01, local01
27860     1C 4E 05 F1 | 	add	fp, #28
27864     A7 14 02 FB | 	rdlong	arg02, fp
27868     14 4E 85 F1 | 	sub	fp, #20
2786c     A7 16 02 FB | 	rdlong	arg03, fp
27870     0C 4E 05 F1 | 	add	fp, #12
27874     A7 18 02 FB | 	rdlong	arg04, fp
27878     2C 4E 85 F1 | 	sub	fp, #44
2787c     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
27880     00 FA 0D F2 | 	cmp	result1, #0 wz
27884     1C 00 90 AD |  if_e	jmp	#LR__4080
27888     04 4E 05 F1 | 	add	fp, #4
2788c     A7 22 02 FB | 	rdlong	local03, fp
27890     04 4E 85 F1 | 	sub	fp, #4
27894     11 22 06 F1 | 	add	local03, #17
27898     11 03 48 FC | 	wrbyte	#1, local03
2789c     01 FA 05 F6 | 	mov	result1, #1
278a0     EC 02 90 FD | 	jmp	#LR__4090
278a4                 | LR__4080
278a4     04 4E 05 F1 | 	add	fp, #4
278a8     A7 1E 02 FB | 	rdlong	local01, fp
278ac     04 4E 85 F1 | 	sub	fp, #4
278b0     10 1E 06 F1 | 	add	local01, #16
278b4     0F 23 C2 FA | 	rdbyte	local03, local01
278b8     80 22 CE F7 | 	test	local03, #128 wz
278bc     78 00 90 AD |  if_e	jmp	#LR__4081
278c0     04 4E 05 F1 | 	add	fp, #4
278c4     A7 2C 02 FB | 	rdlong	local08, fp
278c8     1C 2C 06 F1 | 	add	local08, #28
278cc     16 2D 02 FB | 	rdlong	local08, local08
278d0     1C 4E 05 F1 | 	add	fp, #28
278d4     A7 2E 02 FB | 	rdlong	local09, fp
278d8     17 2D 82 F1 | 	sub	local08, local09
278dc     0C 4E 05 F1 | 	add	fp, #12
278e0     A7 30 02 FB | 	rdlong	local10, fp
278e4     2C 4E 85 F1 | 	sub	fp, #44
278e8     18 33 02 F6 | 	mov	local11, local10
278ec     19 2D 12 F2 | 	cmp	local08, local11 wc
278f0     44 00 90 3D |  if_ae	jmp	#LR__4081
278f4     34 4E 05 F1 | 	add	fp, #52
278f8     A7 12 02 FB | 	rdlong	arg01, fp
278fc     30 4E 85 F1 | 	sub	fp, #48
27900     A7 14 02 FB | 	rdlong	arg02, fp
27904     0A 33 02 F6 | 	mov	local11, arg02
27908     1C 32 06 F1 | 	add	local11, #28
2790c     19 2F 02 FB | 	rdlong	local09, local11
27910     1C 4E 05 F1 | 	add	fp, #28
27914     A7 26 02 FB | 	rdlong	local05, fp
27918     13 2F 82 F1 | 	sub	local09, local05
2791c     09 2E 66 F0 | 	shl	local09, #9
27920     17 33 02 F6 | 	mov	local11, local09
27924     17 13 02 F1 | 	add	arg01, local09
27928     20 4E 85 F1 | 	sub	fp, #32
2792c     28 14 06 F1 | 	add	arg02, #40
27930     09 16 C6 F9 | 	decod	arg03, #9
27934     C4 48 BF FD | 	call	#__system____builtin_memmove
27938                 | LR__4081
27938     2C 4E 05 F1 | 	add	fp, #44
2793c     A7 22 02 FB | 	rdlong	local03, fp
27940     09 22 66 F0 | 	shl	local03, #9
27944     04 4E 85 F1 | 	sub	fp, #4
27948     A7 22 62 FC | 	wrlong	local03, fp
2794c     28 4E 85 F1 | 	sub	fp, #40
27950                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
27950                 | ' 				}
27950                 | ' 
27950                 | ' 
27950                 | ' 				rcnt =  ((UINT) 512 )  * cc;
27950                 | ' 				continue;
27950     B4 01 90 FD | 	jmp	#LR__4088
27954                 | LR__4082
27954     04 4E 05 F1 | 	add	fp, #4
27958     A7 22 02 FB | 	rdlong	local03, fp
2795c     1C 22 06 F1 | 	add	local03, #28
27960     11 23 02 FB | 	rdlong	local03, local03
27964     1C 4E 05 F1 | 	add	fp, #28
27968     A7 1E 02 FB | 	rdlong	local01, fp
2796c     20 4E 85 F1 | 	sub	fp, #32
27970     0F 23 0A F2 | 	cmp	local03, local01 wz
27974     EC 00 90 AD |  if_e	jmp	#LR__4086
27978     04 4E 05 F1 | 	add	fp, #4
2797c     A7 1E 02 FB | 	rdlong	local01, fp
27980     04 4E 85 F1 | 	sub	fp, #4
27984     10 1E 06 F1 | 	add	local01, #16
27988     0F 23 C2 FA | 	rdbyte	local03, local01
2798c     80 22 CE F7 | 	test	local03, #128 wz
27990     7C 00 90 AD |  if_e	jmp	#LR__4084
27994     18 4E 05 F1 | 	add	fp, #24
27998     A7 1E 02 FB | 	rdlong	local01, fp
2799c     01 1E 06 F1 | 	add	local01, #1
279a0     0F 13 C2 FA | 	rdbyte	arg01, local01
279a4     14 4E 85 F1 | 	sub	fp, #20
279a8     A7 22 02 FB | 	rdlong	local03, fp
279ac     11 15 02 F6 | 	mov	arg02, local03
279b0     28 14 06 F1 | 	add	arg02, #40
279b4     04 4E 85 F1 | 	sub	fp, #4
279b8     1C 22 06 F1 | 	add	local03, #28
279bc     11 17 02 FB | 	rdlong	arg03, local03
279c0     01 18 06 F6 | 	mov	arg04, #1
279c4     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
279c8     00 FA 0D F2 | 	cmp	result1, #0 wz
279cc     1C 00 90 AD |  if_e	jmp	#LR__4083
279d0     04 4E 05 F1 | 	add	fp, #4
279d4     A7 22 02 FB | 	rdlong	local03, fp
279d8     04 4E 85 F1 | 	sub	fp, #4
279dc     11 22 06 F1 | 	add	local03, #17
279e0     11 03 48 FC | 	wrbyte	#1, local03
279e4     01 FA 05 F6 | 	mov	result1, #1
279e8     A4 01 90 FD | 	jmp	#LR__4090
279ec                 | LR__4083
279ec     04 4E 05 F1 | 	add	fp, #4
279f0     A7 32 02 FB | 	rdlong	local11, fp
279f4     19 23 02 F6 | 	mov	local03, local11
279f8     04 4E 85 F1 | 	sub	fp, #4
279fc     10 32 06 F1 | 	add	local11, #16
27a00     19 33 C2 FA | 	rdbyte	local11, local11
27a04     7F 32 06 F5 | 	and	local11, #127
27a08     10 22 06 F1 | 	add	local03, #16
27a0c     11 33 42 FC | 	wrbyte	local11, local03
27a10                 | LR__4084
27a10     18 4E 05 F1 | 	add	fp, #24
27a14     A7 1E 02 FB | 	rdlong	local01, fp
27a18     01 1E 06 F1 | 	add	local01, #1
27a1c     0F 13 C2 FA | 	rdbyte	arg01, local01
27a20     14 4E 85 F1 | 	sub	fp, #20
27a24     A7 14 02 FB | 	rdlong	arg02, fp
27a28     28 14 06 F1 | 	add	arg02, #40
27a2c     1C 4E 05 F1 | 	add	fp, #28
27a30     A7 16 02 FB | 	rdlong	arg03, fp
27a34     20 4E 85 F1 | 	sub	fp, #32
27a38     01 18 06 F6 | 	mov	arg04, #1
27a3c     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
27a40     00 FA 0D F2 | 	cmp	result1, #0 wz
27a44     1C 00 90 AD |  if_e	jmp	#LR__4085
27a48     04 4E 05 F1 | 	add	fp, #4
27a4c     A7 22 02 FB | 	rdlong	local03, fp
27a50     04 4E 85 F1 | 	sub	fp, #4
27a54     11 22 06 F1 | 	add	local03, #17
27a58     11 03 48 FC | 	wrbyte	#1, local03
27a5c     01 FA 05 F6 | 	mov	result1, #1
27a60     2C 01 90 FD | 	jmp	#LR__4090
27a64                 | LR__4085
27a64                 | LR__4086
27a64     04 4E 05 F1 | 	add	fp, #4
27a68     A7 22 02 FB | 	rdlong	local03, fp
27a6c     1C 4E 05 F1 | 	add	fp, #28
27a70     A7 32 02 FB | 	rdlong	local11, fp
27a74     20 4E 85 F1 | 	sub	fp, #32
27a78     1C 22 06 F1 | 	add	local03, #28
27a7c     11 33 62 FC | 	wrlong	local11, local03
27a80                 | LR__4087
27a80     04 4E 05 F1 | 	add	fp, #4
27a84     A7 1E 02 FB | 	rdlong	local01, fp
27a88     14 1E 06 F1 | 	add	local01, #20
27a8c     0F 33 02 FB | 	rdlong	local11, local01
27a90     FF 33 06 F5 | 	and	local11, #511
27a94     09 22 C6 F9 | 	decod	local03, #9
27a98     19 23 82 F1 | 	sub	local03, local11
27a9c     24 4E 05 F1 | 	add	fp, #36
27aa0     A7 22 62 FC | 	wrlong	local03, fp
27aa4     1C 4E 85 F1 | 	sub	fp, #28
27aa8     A7 32 02 FB | 	rdlong	local11, fp
27aac     0C 4E 85 F1 | 	sub	fp, #12
27ab0     19 23 1A F2 | 	cmp	local03, local11 wcz
27ab4     0C 4E 05 11 |  if_a	add	fp, #12
27ab8     A7 22 02 1B |  if_a	rdlong	local03, fp
27abc     1C 4E 05 11 |  if_a	add	fp, #28
27ac0     A7 22 62 1C |  if_a	wrlong	local03, fp
27ac4     28 4E 85 11 |  if_a	sub	fp, #40
27ac8     34 4E 05 F1 | 	add	fp, #52
27acc     A7 12 02 FB | 	rdlong	arg01, fp
27ad0     30 4E 85 F1 | 	sub	fp, #48
27ad4     A7 28 02 FB | 	rdlong	local06, fp
27ad8     14 15 02 F6 | 	mov	arg02, local06
27adc     28 14 06 F1 | 	add	arg02, #40
27ae0     14 28 06 F1 | 	add	local06, #20
27ae4     14 33 02 FB | 	rdlong	local11, local06
27ae8     19 2F 02 F6 | 	mov	local09, local11
27aec     17 31 02 F6 | 	mov	local10, local09
27af0     FF 31 06 F5 | 	and	local10, #511
27af4     18 15 02 F1 | 	add	arg02, local10
27af8     24 4E 05 F1 | 	add	fp, #36
27afc     A7 16 02 FB | 	rdlong	arg03, fp
27b00     28 4E 85 F1 | 	sub	fp, #40
27b04     F4 46 BF FD | 	call	#__system____builtin_memmove
27b08                 | LR__4088
27b08     0C 4E 05 F1 | 	add	fp, #12
27b0c     A7 22 02 FB | 	rdlong	local03, fp
27b10     1C 4E 05 F1 | 	add	fp, #28
27b14     A7 2C 02 FB | 	rdlong	local08, fp
27b18     16 23 82 F1 | 	sub	local03, local08
27b1c     1C 4E 85 F1 | 	sub	fp, #28
27b20     A7 22 62 FC | 	wrlong	local03, fp
27b24     04 4E 05 F1 | 	add	fp, #4
27b28     A7 1E 02 FB | 	rdlong	local01, fp
27b2c     0F 2B 02 FB | 	rdlong	local07, local01
27b30     18 4E 05 F1 | 	add	fp, #24
27b34     A7 2C 02 FB | 	rdlong	local08, fp
27b38     16 2B 02 F1 | 	add	local07, local08
27b3c     0F 2B 62 FC | 	wrlong	local07, local01
27b40     0C 4E 05 F1 | 	add	fp, #12
27b44     A7 22 02 FB | 	rdlong	local03, fp
27b48     0C 4E 85 F1 | 	sub	fp, #12
27b4c     A7 34 02 FB | 	rdlong	local12, fp
27b50     1A 23 02 F1 | 	add	local03, local12
27b54     0C 4E 05 F1 | 	add	fp, #12
27b58     A7 22 62 FC | 	wrlong	local03, fp
27b5c     30 4E 85 F1 | 	sub	fp, #48
27b60     A7 36 02 FB | 	rdlong	local13, fp
27b64     1B 23 02 F6 | 	mov	local03, local13
27b68     14 36 06 F1 | 	add	local13, #20
27b6c     1B 39 02 FB | 	rdlong	local14, local13
27b70     24 4E 05 F1 | 	add	fp, #36
27b74     A7 28 02 FB | 	rdlong	local06, fp
27b78     28 4E 85 F1 | 	sub	fp, #40
27b7c     14 39 02 F1 | 	add	local14, local06
27b80     14 22 06 F1 | 	add	local03, #20
27b84     11 39 62 FC | 	wrlong	local14, local03
27b88     84 FA 9F FD | 	jmp	#LR__4072
27b8c                 | LR__4089
27b8c                 | ' 
27b8c                 | ' 
27b8c                 | ' 
27b8c                 | ' 
27b8c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
27b8c                 | ' 
27b8c                 | ' 	}
27b8c                 | ' 
27b8c                 | ' 	return FR_OK ;
27b8c     00 FA 05 F6 | 	mov	result1, #0
27b90                 | LR__4090
27b90     A7 F0 03 F6 | 	mov	ptra, fp
27b94     B2 00 A0 FD | 	call	#popregs_
27b98                 | _fatfs_cc_f_read_ret
27b98     2D 00 64 FD | 	ret
27b9c                 | 
27b9c                 | _fatfs_cc_f_write
27b9c     15 4A 05 F6 | 	mov	COUNT_, #21
27ba0     A8 00 A0 FD | 	call	#pushregs_
27ba4     34 F0 07 F1 | 	add	ptra, #52
27ba8     04 4E 05 F1 | 	add	fp, #4
27bac     A7 12 62 FC | 	wrlong	arg01, fp
27bb0     04 4E 05 F1 | 	add	fp, #4
27bb4     A7 14 62 FC | 	wrlong	arg02, fp
27bb8     04 4E 05 F1 | 	add	fp, #4
27bbc     A7 16 62 FC | 	wrlong	arg03, fp
27bc0     04 4E 05 F1 | 	add	fp, #4
27bc4     A7 18 62 FC | 	wrlong	arg04, fp
27bc8     08 4E 85 F1 | 	sub	fp, #8
27bcc     A7 FA 01 FB | 	rdlong	result1, fp
27bd0     28 4E 05 F1 | 	add	fp, #40
27bd4     A7 FA 61 FC | 	wrlong	result1, fp
27bd8     20 4E 85 F1 | 	sub	fp, #32
27bdc     A7 FA 01 FB | 	rdlong	result1, fp
27be0     FD 00 68 FC | 	wrlong	#0, result1
27be4     0C 4E 85 F1 | 	sub	fp, #12
27be8     A7 12 02 FB | 	rdlong	arg01, fp
27bec     14 4E 05 F1 | 	add	fp, #20
27bf0     A7 14 02 F6 | 	mov	arg02, fp
27bf4     18 4E 85 F1 | 	sub	fp, #24
27bf8     88 F0 BF FD | 	call	#_fatfs_cc_validate
27bfc     14 4E 05 F1 | 	add	fp, #20
27c00     A7 FA 61 FC | 	wrlong	result1, fp
27c04     00 FA 4D F2 | 	cmps	result1, #0 wz
27c08     14 4E 85 F1 | 	sub	fp, #20
27c0c     20 00 90 5D |  if_ne	jmp	#LR__4100
27c10     04 4E 05 F1 | 	add	fp, #4
27c14     A7 14 02 FB | 	rdlong	arg02, fp
27c18     11 14 06 F1 | 	add	arg02, #17
27c1c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
27c20     10 4E 05 F1 | 	add	fp, #16
27c24     A7 14 62 FC | 	wrlong	arg02, fp
27c28     14 4E 85 F1 | 	sub	fp, #20
27c2c     10 00 90 AD |  if_e	jmp	#LR__4101
27c30                 | LR__4100
27c30     14 4E 05 F1 | 	add	fp, #20
27c34     A7 FA 01 FB | 	rdlong	result1, fp
27c38     14 4E 85 F1 | 	sub	fp, #20
27c3c     44 07 90 FD | 	jmp	#LR__4123
27c40                 | LR__4101
27c40     04 4E 05 F1 | 	add	fp, #4
27c44     A7 14 02 FB | 	rdlong	arg02, fp
27c48     04 4E 85 F1 | 	sub	fp, #4
27c4c     10 14 06 F1 | 	add	arg02, #16
27c50     0A 15 C2 FA | 	rdbyte	arg02, arg02
27c54     02 14 CE F7 | 	test	arg02, #2 wz
27c58     07 FA 05 A6 |  if_e	mov	result1, #7
27c5c     24 07 90 AD |  if_e	jmp	#LR__4123
27c60     04 4E 05 F1 | 	add	fp, #4
27c64     A7 14 02 FB | 	rdlong	arg02, fp
27c68     0A 13 02 F6 | 	mov	arg01, arg02
27c6c     14 12 06 F1 | 	add	arg01, #20
27c70     09 13 02 FB | 	rdlong	arg01, arg01
27c74     08 4E 05 F1 | 	add	fp, #8
27c78     A7 FA 01 FB | 	rdlong	result1, fp
27c7c     FD 12 02 F1 | 	add	arg01, result1
27c80     0C 4E 85 F1 | 	sub	fp, #12
27c84     14 14 06 F1 | 	add	arg02, #20
27c88     0A FB 01 FB | 	rdlong	result1, arg02
27c8c     FD 12 12 F2 | 	cmp	arg01, result1 wc
27c90     24 00 90 3D |  if_ae	jmp	#LR__4102
27c94     04 4E 05 F1 | 	add	fp, #4
27c98     A7 14 02 FB | 	rdlong	arg02, fp
27c9c     01 FA 65 F6 | 	neg	result1, #1
27ca0     14 14 06 F1 | 	add	arg02, #20
27ca4     0A 15 02 FB | 	rdlong	arg02, arg02
27ca8     0A FB 81 F1 | 	sub	result1, arg02
27cac     08 4E 05 F1 | 	add	fp, #8
27cb0     A7 FA 61 FC | 	wrlong	result1, fp
27cb4     0C 4E 85 F1 | 	sub	fp, #12
27cb8                 | LR__4102
27cb8                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
27cb8                 | ' 	}
27cb8                 | ' 
27cb8                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
27cb8                 | LR__4103
27cb8     0C 4E 05 F1 | 	add	fp, #12
27cbc     A7 FA 01 FB | 	rdlong	result1, fp
27cc0     0C 4E 85 F1 | 	sub	fp, #12
27cc4     01 FA 15 F2 | 	cmp	result1, #1 wc
27cc8     90 06 90 CD |  if_b	jmp	#LR__4122
27ccc     04 4E 05 F1 | 	add	fp, #4
27cd0     A7 FA 01 FB | 	rdlong	result1, fp
27cd4     04 4E 85 F1 | 	sub	fp, #4
27cd8     14 FA 05 F1 | 	add	result1, #20
27cdc     FD FA 01 FB | 	rdlong	result1, result1
27ce0     FF FB CD F7 | 	test	result1, #511 wz
27ce4     D8 04 90 5D |  if_ne	jmp	#LR__4118
27ce8     04 4E 05 F1 | 	add	fp, #4
27cec     A7 FA 01 FB | 	rdlong	result1, fp
27cf0     14 FA 05 F1 | 	add	result1, #20
27cf4     FD FA 01 FB | 	rdlong	result1, result1
27cf8     09 FA 45 F0 | 	shr	result1, #9
27cfc     14 4E 05 F1 | 	add	fp, #20
27d00     A7 14 02 FB | 	rdlong	arg02, fp
27d04     0A 14 06 F1 | 	add	arg02, #10
27d08     0A 19 E2 FA | 	rdword	arg04, arg02
27d0c     0C 15 32 F9 | 	getword	arg02, arg04, #0
27d10     01 14 86 F1 | 	sub	arg02, #1
27d14     0A FB 09 F5 | 	and	result1, arg02 wz
27d18     14 4E 05 F1 | 	add	fp, #20
27d1c     A7 FA 61 FC | 	wrlong	result1, fp
27d20     2C 4E 85 F1 | 	sub	fp, #44
27d24     44 01 90 5D |  if_ne	jmp	#LR__4109
27d28     04 4E 05 F1 | 	add	fp, #4
27d2c     A7 FA 01 FB | 	rdlong	result1, fp
27d30     04 4E 85 F1 | 	sub	fp, #4
27d34     14 FA 05 F1 | 	add	result1, #20
27d38     FD 14 0A FB | 	rdlong	arg02, result1 wz
27d3c     44 00 90 5D |  if_ne	jmp	#LR__4104
27d40     04 4E 05 F1 | 	add	fp, #4
27d44     A7 14 02 FB | 	rdlong	arg02, fp
27d48     08 14 06 F1 | 	add	arg02, #8
27d4c     0A 15 0A FB | 	rdlong	arg02, arg02 wz
27d50     18 4E 05 F1 | 	add	fp, #24
27d54     A7 14 62 FC | 	wrlong	arg02, fp
27d58     1C 4E 85 F1 | 	sub	fp, #28
27d5c     4C 00 90 5D |  if_ne	jmp	#LR__4105
27d60     04 4E 05 F1 | 	add	fp, #4
27d64     A7 12 02 FB | 	rdlong	arg01, fp
27d68     04 4E 85 F1 | 	sub	fp, #4
27d6c     00 14 06 F6 | 	mov	arg02, #0
27d70     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
27d74     1C 4E 05 F1 | 	add	fp, #28
27d78     A7 FA 61 FC | 	wrlong	result1, fp
27d7c     1C 4E 85 F1 | 	sub	fp, #28
27d80     28 00 90 FD | 	jmp	#LR__4105
27d84                 | LR__4104
27d84     04 4E 05 F1 | 	add	fp, #4
27d88     A7 18 02 FB | 	rdlong	arg04, fp
27d8c     0C 13 02 F6 | 	mov	arg01, arg04
27d90     04 4E 85 F1 | 	sub	fp, #4
27d94     18 18 06 F1 | 	add	arg04, #24
27d98     0C 15 02 FB | 	rdlong	arg02, arg04
27d9c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
27da0     1C 4E 05 F1 | 	add	fp, #28
27da4     A7 FA 61 FC | 	wrlong	result1, fp
27da8     1C 4E 85 F1 | 	sub	fp, #28
27dac                 | LR__4105
27dac     1C 4E 05 F1 | 	add	fp, #28
27db0     A7 FA 09 FB | 	rdlong	result1, fp wz
27db4     1C 4E 85 F1 | 	sub	fp, #28
27db8     A0 05 90 AD |  if_e	jmp	#LR__4122
27dbc     1C 4E 05 F1 | 	add	fp, #28
27dc0     A7 FA 01 FB | 	rdlong	result1, fp
27dc4     1C 4E 85 F1 | 	sub	fp, #28
27dc8     01 FA 0D F2 | 	cmp	result1, #1 wz
27dcc     1C 00 90 5D |  if_ne	jmp	#LR__4106
27dd0     04 4E 05 F1 | 	add	fp, #4
27dd4     A7 FA 01 FB | 	rdlong	result1, fp
27dd8     04 4E 85 F1 | 	sub	fp, #4
27ddc     11 FA 05 F1 | 	add	result1, #17
27de0     FD 04 48 FC | 	wrbyte	#2, result1
27de4     02 FA 05 F6 | 	mov	result1, #2
27de8     98 05 90 FD | 	jmp	#LR__4123
27dec                 | LR__4106
27dec     1C 4E 05 F1 | 	add	fp, #28
27df0     A7 FA 01 FB | 	rdlong	result1, fp
27df4     1C 4E 85 F1 | 	sub	fp, #28
27df8     FF FF 7F FF 
27dfc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
27e00     1C 00 90 5D |  if_ne	jmp	#LR__4107
27e04     04 4E 05 F1 | 	add	fp, #4
27e08     A7 FA 01 FB | 	rdlong	result1, fp
27e0c     04 4E 85 F1 | 	sub	fp, #4
27e10     11 FA 05 F1 | 	add	result1, #17
27e14     FD 02 48 FC | 	wrbyte	#1, result1
27e18     01 FA 05 F6 | 	mov	result1, #1
27e1c     64 05 90 FD | 	jmp	#LR__4123
27e20                 | LR__4107
27e20     04 4E 05 F1 | 	add	fp, #4
27e24     A7 FA 01 FB | 	rdlong	result1, fp
27e28     18 4E 05 F1 | 	add	fp, #24
27e2c     A7 18 02 FB | 	rdlong	arg04, fp
27e30     18 FA 05 F1 | 	add	result1, #24
27e34     FD 18 62 FC | 	wrlong	arg04, result1
27e38     18 4E 85 F1 | 	sub	fp, #24
27e3c     A7 FA 01 FB | 	rdlong	result1, fp
27e40     04 4E 85 F1 | 	sub	fp, #4
27e44     08 FA 05 F1 | 	add	result1, #8
27e48     FD FA 09 FB | 	rdlong	result1, result1 wz
27e4c     1C 00 90 5D |  if_ne	jmp	#LR__4108
27e50     04 4E 05 F1 | 	add	fp, #4
27e54     A7 18 02 FB | 	rdlong	arg04, fp
27e58     18 4E 05 F1 | 	add	fp, #24
27e5c     A7 FA 01 FB | 	rdlong	result1, fp
27e60     1C 4E 85 F1 | 	sub	fp, #28
27e64     08 18 06 F1 | 	add	arg04, #8
27e68     0C FB 61 FC | 	wrlong	result1, arg04
27e6c                 | LR__4108
27e6c                 | LR__4109
27e6c     04 4E 05 F1 | 	add	fp, #4
27e70     A7 18 02 FB | 	rdlong	arg04, fp
27e74     04 4E 85 F1 | 	sub	fp, #4
27e78     10 18 06 F1 | 	add	arg04, #16
27e7c     0C 19 C2 FA | 	rdbyte	arg04, arg04
27e80     80 18 CE F7 | 	test	arg04, #128 wz
27e84     7C 00 90 AD |  if_e	jmp	#LR__4111
27e88     18 4E 05 F1 | 	add	fp, #24
27e8c     A7 18 02 FB | 	rdlong	arg04, fp
27e90     01 18 06 F1 | 	add	arg04, #1
27e94     0C 13 C2 FA | 	rdbyte	arg01, arg04
27e98     14 4E 85 F1 | 	sub	fp, #20
27e9c     A7 18 02 FB | 	rdlong	arg04, fp
27ea0     0C 15 02 F6 | 	mov	arg02, arg04
27ea4     28 14 06 F1 | 	add	arg02, #40
27ea8     04 4E 85 F1 | 	sub	fp, #4
27eac     1C 18 06 F1 | 	add	arg04, #28
27eb0     0C 17 02 FB | 	rdlong	arg03, arg04
27eb4     01 18 06 F6 | 	mov	arg04, #1
27eb8     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
27ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
27ec0     1C 00 90 AD |  if_e	jmp	#LR__4110
27ec4     04 4E 05 F1 | 	add	fp, #4
27ec8     A7 FA 01 FB | 	rdlong	result1, fp
27ecc     04 4E 85 F1 | 	sub	fp, #4
27ed0     11 FA 05 F1 | 	add	result1, #17
27ed4     FD 02 48 FC | 	wrbyte	#1, result1
27ed8     01 FA 05 F6 | 	mov	result1, #1
27edc     A4 04 90 FD | 	jmp	#LR__4123
27ee0                 | LR__4110
27ee0     04 4E 05 F1 | 	add	fp, #4
27ee4     A7 18 02 FB | 	rdlong	arg04, fp
27ee8     0C FB 01 F6 | 	mov	result1, arg04
27eec     04 4E 85 F1 | 	sub	fp, #4
27ef0     10 18 06 F1 | 	add	arg04, #16
27ef4     0C 19 C2 FA | 	rdbyte	arg04, arg04
27ef8     7F 18 06 F5 | 	and	arg04, #127
27efc     10 FA 05 F1 | 	add	result1, #16
27f00     FD 18 42 FC | 	wrbyte	arg04, result1
27f04                 | LR__4111
27f04     18 4E 05 F1 | 	add	fp, #24
27f08     A7 12 02 FB | 	rdlong	arg01, fp
27f0c     14 4E 85 F1 | 	sub	fp, #20
27f10     A7 14 02 FB | 	rdlong	arg02, fp
27f14     04 4E 85 F1 | 	sub	fp, #4
27f18     18 14 06 F1 | 	add	arg02, #24
27f1c     0A 15 02 FB | 	rdlong	arg02, arg02
27f20     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
27f24     20 4E 05 F1 | 	add	fp, #32
27f28     A7 FA 61 FC | 	wrlong	result1, fp
27f2c     20 4E 85 F1 | 	sub	fp, #32
27f30     00 FA 0D F2 | 	cmp	result1, #0 wz
27f34     1C 00 90 5D |  if_ne	jmp	#LR__4112
27f38     04 4E 05 F1 | 	add	fp, #4
27f3c     A7 FA 01 FB | 	rdlong	result1, fp
27f40     04 4E 85 F1 | 	sub	fp, #4
27f44     11 FA 05 F1 | 	add	result1, #17
27f48     FD 04 48 FC | 	wrbyte	#2, result1
27f4c     02 FA 05 F6 | 	mov	result1, #2
27f50     30 04 90 FD | 	jmp	#LR__4123
27f54                 | LR__4112
27f54     20 4E 05 F1 | 	add	fp, #32
27f58     A7 FA 01 FB | 	rdlong	result1, fp
27f5c     0C 4E 05 F1 | 	add	fp, #12
27f60     A7 1E 02 FB | 	rdlong	local01, fp
27f64     0F FB 01 F1 | 	add	result1, local01
27f68     0C 4E 85 F1 | 	sub	fp, #12
27f6c     A7 FA 61 FC | 	wrlong	result1, fp
27f70     14 4E 85 F1 | 	sub	fp, #20
27f74     A7 FA 01 FB | 	rdlong	result1, fp
27f78     09 FA 45 F0 | 	shr	result1, #9
27f7c     1C 4E 05 F1 | 	add	fp, #28
27f80     A7 FA 61 FC | 	wrlong	result1, fp
27f84     28 4E 85 F1 | 	sub	fp, #40
27f88     01 FA 15 F2 | 	cmp	result1, #1 wc
27f8c     60 01 90 CD |  if_b	jmp	#LR__4116
27f90     2C 4E 05 F1 | 	add	fp, #44
27f94     A7 FA 01 FB | 	rdlong	result1, fp
27f98     04 4E 85 F1 | 	sub	fp, #4
27f9c     A7 18 02 FB | 	rdlong	arg04, fp
27fa0     0C FB 01 F1 | 	add	result1, arg04
27fa4     10 4E 85 F1 | 	sub	fp, #16
27fa8     A7 18 02 FB | 	rdlong	arg04, fp
27fac     18 4E 85 F1 | 	sub	fp, #24
27fb0     0A 18 06 F1 | 	add	arg04, #10
27fb4     0C 19 E2 FA | 	rdword	arg04, arg04
27fb8     0C FB 19 F2 | 	cmp	result1, arg04 wcz
27fbc     28 00 90 ED |  if_be	jmp	#LR__4113
27fc0     18 4E 05 F1 | 	add	fp, #24
27fc4     A7 FA 01 FB | 	rdlong	result1, fp
27fc8     0A FA 05 F1 | 	add	result1, #10
27fcc     FD FA E1 FA | 	rdword	result1, result1
27fd0     14 4E 05 F1 | 	add	fp, #20
27fd4     A7 18 02 FB | 	rdlong	arg04, fp
27fd8     0C FB 81 F1 | 	sub	result1, arg04
27fdc     04 4E 85 F1 | 	sub	fp, #4
27fe0     A7 FA 61 FC | 	wrlong	result1, fp
27fe4     28 4E 85 F1 | 	sub	fp, #40
27fe8                 | LR__4113
27fe8     18 4E 05 F1 | 	add	fp, #24
27fec     A7 18 02 FB | 	rdlong	arg04, fp
27ff0     01 18 06 F1 | 	add	arg04, #1
27ff4     0C 13 C2 FA | 	rdbyte	arg01, arg04
27ff8     18 4E 05 F1 | 	add	fp, #24
27ffc     A7 14 02 FB | 	rdlong	arg02, fp
28000     10 4E 85 F1 | 	sub	fp, #16
28004     A7 16 02 FB | 	rdlong	arg03, fp
28008     08 4E 05 F1 | 	add	fp, #8
2800c     A7 18 02 FB | 	rdlong	arg04, fp
28010     28 4E 85 F1 | 	sub	fp, #40
28014     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
28018     00 FA 0D F2 | 	cmp	result1, #0 wz
2801c     1C 00 90 AD |  if_e	jmp	#LR__4114
28020     04 4E 05 F1 | 	add	fp, #4
28024     A7 1E 02 FB | 	rdlong	local01, fp
28028     04 4E 85 F1 | 	sub	fp, #4
2802c     11 1E 06 F1 | 	add	local01, #17
28030     0F 03 48 FC | 	wrbyte	#1, local01
28034     01 FA 05 F6 | 	mov	result1, #1
28038     48 03 90 FD | 	jmp	#LR__4123
2803c                 | LR__4114
2803c     04 4E 05 F1 | 	add	fp, #4
28040     A7 FA 01 FB | 	rdlong	result1, fp
28044     1C FA 05 F1 | 	add	result1, #28
28048     FD FA 01 FB | 	rdlong	result1, result1
2804c     1C 4E 05 F1 | 	add	fp, #28
28050     A7 20 02 FB | 	rdlong	local02, fp
28054     10 FB 81 F1 | 	sub	result1, local02
28058     08 4E 05 F1 | 	add	fp, #8
2805c     A7 18 02 FB | 	rdlong	arg04, fp
28060     28 4E 85 F1 | 	sub	fp, #40
28064     0C FB 11 F2 | 	cmp	result1, arg04 wc
28068     68 00 90 3D |  if_ae	jmp	#LR__4115
2806c     04 4E 05 F1 | 	add	fp, #4
28070     A7 12 02 FB | 	rdlong	arg01, fp
28074     28 12 06 F1 | 	add	arg01, #40
28078     2C 4E 05 F1 | 	add	fp, #44
2807c     A7 14 02 FB | 	rdlong	arg02, fp
28080     2C 4E 85 F1 | 	sub	fp, #44
28084     A7 FA 01 FB | 	rdlong	result1, fp
28088     1C FA 05 F1 | 	add	result1, #28
2808c     FD 22 02 FB | 	rdlong	local03, result1
28090     1C 4E 05 F1 | 	add	fp, #28
28094     A7 18 02 FB | 	rdlong	arg04, fp
28098     20 4E 85 F1 | 	sub	fp, #32
2809c     0C 23 82 F1 | 	sub	local03, arg04
280a0     09 22 66 F0 | 	shl	local03, #9
280a4     11 15 02 F1 | 	add	arg02, local03
280a8     09 16 C6 F9 | 	decod	arg03, #9
280ac     4C 41 BF FD | 	call	#__system____builtin_memmove
280b0     04 4E 05 F1 | 	add	fp, #4
280b4     A7 18 02 FB | 	rdlong	arg04, fp
280b8     0C FB 01 F6 | 	mov	result1, arg04
280bc     04 4E 85 F1 | 	sub	fp, #4
280c0     10 18 06 F1 | 	add	arg04, #16
280c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
280c8     7F 18 06 F5 | 	and	arg04, #127
280cc     10 FA 05 F1 | 	add	result1, #16
280d0     FD 18 42 FC | 	wrbyte	arg04, result1
280d4                 | LR__4115
280d4     28 4E 05 F1 | 	add	fp, #40
280d8     A7 FA 01 FB | 	rdlong	result1, fp
280dc     09 FA 65 F0 | 	shl	result1, #9
280e0     04 4E 85 F1 | 	sub	fp, #4
280e4     A7 FA 61 FC | 	wrlong	result1, fp
280e8     24 4E 85 F1 | 	sub	fp, #36
280ec                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
280ec                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
280ec                 | ' 				}
280ec                 | ' 
280ec                 | ' 
280ec                 | ' 				wcnt =  ((UINT) 512 )  * cc;
280ec                 | ' 				continue;
280ec     74 01 90 FD | 	jmp	#LR__4119
280f0                 | LR__4116
280f0     04 4E 05 F1 | 	add	fp, #4
280f4     A7 20 02 FB | 	rdlong	local02, fp
280f8     1C 20 06 F1 | 	add	local02, #28
280fc     10 FB 01 FB | 	rdlong	result1, local02
28100     1C 4E 05 F1 | 	add	fp, #28
28104     A7 20 02 FB | 	rdlong	local02, fp
28108     20 4E 85 F1 | 	sub	fp, #32
2810c     10 FB 09 F2 | 	cmp	result1, local02 wz
28110     90 00 90 AD |  if_e	jmp	#LR__4117
28114     04 4E 05 F1 | 	add	fp, #4
28118     A7 FA 01 FB | 	rdlong	result1, fp
2811c     FD 22 02 F6 | 	mov	local03, result1
28120     04 4E 85 F1 | 	sub	fp, #4
28124     14 22 06 F1 | 	add	local03, #20
28128     11 23 02 FB | 	rdlong	local03, local03
2812c     0C FA 05 F1 | 	add	result1, #12
28130     FD 24 02 FB | 	rdlong	local04, result1
28134     12 27 02 F6 | 	mov	local05, local04
28138     13 23 12 F2 | 	cmp	local03, local05 wc
2813c     64 00 90 3D |  if_ae	jmp	#LR__4117
28140     18 4E 05 F1 | 	add	fp, #24
28144     A7 18 02 FB | 	rdlong	arg04, fp
28148     01 18 06 F1 | 	add	arg04, #1
2814c     0C 13 C2 FA | 	rdbyte	arg01, arg04
28150     14 4E 85 F1 | 	sub	fp, #20
28154     A7 28 02 FB | 	rdlong	local06, fp
28158     28 28 06 F1 | 	add	local06, #40
2815c     14 2B 02 F6 | 	mov	local07, local06
28160     1C 4E 05 F1 | 	add	fp, #28
28164     A7 2C 02 FB | 	rdlong	local08, fp
28168     20 4E 85 F1 | 	sub	fp, #32
2816c     01 2E 06 F6 | 	mov	local09, #1
28170     15 15 02 F6 | 	mov	arg02, local07
28174     16 17 02 F6 | 	mov	arg03, local08
28178     01 18 06 F6 | 	mov	arg04, #1
2817c     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
28180     FD 30 0A F6 | 	mov	local10, result1 wz
28184     1C 00 90 AD |  if_e	jmp	#LR__4117
28188     04 4E 05 F1 | 	add	fp, #4
2818c     A7 30 02 FB | 	rdlong	local10, fp
28190     04 4E 85 F1 | 	sub	fp, #4
28194     11 30 06 F1 | 	add	local10, #17
28198     18 03 48 FC | 	wrbyte	#1, local10
2819c                 | ' 				fp->fptr < fp->obj.objsize &&
2819c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2819c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2819c     01 FA 05 F6 | 	mov	result1, #1
281a0     E0 01 90 FD | 	jmp	#LR__4123
281a4                 | LR__4117
281a4     04 4E 05 F1 | 	add	fp, #4
281a8     A7 18 02 FB | 	rdlong	arg04, fp
281ac     1C 4E 05 F1 | 	add	fp, #28
281b0     A7 FA 01 FB | 	rdlong	result1, fp
281b4     20 4E 85 F1 | 	sub	fp, #32
281b8     1C 18 06 F1 | 	add	arg04, #28
281bc     0C FB 61 FC | 	wrlong	result1, arg04
281c0                 | LR__4118
281c0     04 4E 05 F1 | 	add	fp, #4
281c4     A7 FA 01 FB | 	rdlong	result1, fp
281c8     14 FA 05 F1 | 	add	result1, #20
281cc     FD FA 01 FB | 	rdlong	result1, result1
281d0     FF FB 05 F5 | 	and	result1, #511
281d4     09 32 C6 F9 | 	decod	local11, #9
281d8     FD 32 82 F1 | 	sub	local11, result1
281dc     20 4E 05 F1 | 	add	fp, #32
281e0     A7 32 62 FC | 	wrlong	local11, fp
281e4     18 4E 85 F1 | 	sub	fp, #24
281e8     A7 FA 01 FB | 	rdlong	result1, fp
281ec     0C 4E 85 F1 | 	sub	fp, #12
281f0     FD 32 1A F2 | 	cmp	local11, result1 wcz
281f4     0C 4E 05 11 |  if_a	add	fp, #12
281f8     A7 32 02 1B |  if_a	rdlong	local11, fp
281fc     18 4E 05 11 |  if_a	add	fp, #24
28200     A7 32 62 1C |  if_a	wrlong	local11, fp
28204     24 4E 85 11 |  if_a	sub	fp, #36
28208     04 4E 05 F1 | 	add	fp, #4
2820c     A7 32 02 FB | 	rdlong	local11, fp
28210     19 13 02 F6 | 	mov	arg01, local11
28214     28 12 06 F1 | 	add	arg01, #40
28218     14 32 06 F1 | 	add	local11, #20
2821c     19 33 02 FB | 	rdlong	local11, local11
28220     FF 33 06 F5 | 	and	local11, #511
28224     19 13 02 F1 | 	add	arg01, local11
28228     2C 4E 05 F1 | 	add	fp, #44
2822c     A7 14 02 FB | 	rdlong	arg02, fp
28230     0C 4E 85 F1 | 	sub	fp, #12
28234     A7 16 02 FB | 	rdlong	arg03, fp
28238     24 4E 85 F1 | 	sub	fp, #36
2823c     BC 3F BF FD | 	call	#__system____builtin_memmove
28240     04 4E 05 F1 | 	add	fp, #4
28244     A7 FA 01 FB | 	rdlong	result1, fp
28248     FD 32 02 F6 | 	mov	local11, result1
2824c     04 4E 85 F1 | 	sub	fp, #4
28250     10 FA 05 F1 | 	add	result1, #16
28254     FD FA C1 FA | 	rdbyte	result1, result1
28258     80 FA 45 F5 | 	or	result1, #128
2825c     10 32 06 F1 | 	add	local11, #16
28260     19 FB 41 FC | 	wrbyte	result1, local11
28264                 | LR__4119
28264     0C 4E 05 F1 | 	add	fp, #12
28268     A7 32 02 FB | 	rdlong	local11, fp
2826c     18 4E 05 F1 | 	add	fp, #24
28270     A7 FA 01 FB | 	rdlong	result1, fp
28274     FD 32 82 F1 | 	sub	local11, result1
28278     18 4E 85 F1 | 	sub	fp, #24
2827c     A7 32 62 FC | 	wrlong	local11, fp
28280     04 4E 05 F1 | 	add	fp, #4
28284     A7 34 02 FB | 	rdlong	local12, fp
28288     1A 33 02 FB | 	rdlong	local11, local12
2828c     14 4E 05 F1 | 	add	fp, #20
28290     A7 36 02 FB | 	rdlong	local13, fp
28294     1B 33 02 F1 | 	add	local11, local13
28298     1A 33 62 FC | 	wrlong	local11, local12
2829c     0C 4E 05 F1 | 	add	fp, #12
282a0     A7 32 02 FB | 	rdlong	local11, fp
282a4     0C 4E 85 F1 | 	sub	fp, #12
282a8     A7 38 02 FB | 	rdlong	local14, fp
282ac     1C 33 02 F1 | 	add	local11, local14
282b0     0C 4E 05 F1 | 	add	fp, #12
282b4     A7 32 62 FC | 	wrlong	local11, fp
282b8     2C 4E 85 F1 | 	sub	fp, #44
282bc     A7 3A 02 FB | 	rdlong	local15, fp
282c0     1D 33 02 F6 | 	mov	local11, local15
282c4     14 3A 06 F1 | 	add	local15, #20
282c8     1D 3B 02 FB | 	rdlong	local15, local15
282cc     20 4E 05 F1 | 	add	fp, #32
282d0     A7 3C 02 FB | 	rdlong	local16, fp
282d4     1E 3B 02 F1 | 	add	local15, local16
282d8     14 32 06 F1 | 	add	local11, #20
282dc     19 3B 62 FC | 	wrlong	local15, local11
282e0     20 4E 85 F1 | 	sub	fp, #32
282e4     A7 3E 02 FB | 	rdlong	local17, fp
282e8     1F 33 02 F6 | 	mov	local11, local17
282ec     1F 41 02 F6 | 	mov	local18, local17
282f0     04 4E 85 F1 | 	sub	fp, #4
282f4     14 3E 06 F1 | 	add	local17, #20
282f8     1F 43 02 FB | 	rdlong	local19, local17
282fc     0C 40 06 F1 | 	add	local18, #12
28300     20 45 02 FB | 	rdlong	local20, local18
28304     22 43 1A F2 | 	cmp	local19, local20 wcz
28308     24 00 90 ED |  if_be	jmp	#LR__4120
2830c     04 4E 05 F1 | 	add	fp, #4
28310     A7 26 02 FB | 	rdlong	local05, fp
28314     04 4E 85 F1 | 	sub	fp, #4
28318     13 23 02 F6 | 	mov	local03, local05
2831c     14 22 06 F1 | 	add	local03, #20
28320     11 25 02 FB | 	rdlong	local04, local03
28324     14 22 86 F1 | 	sub	local03, #20
28328     12 47 02 F6 | 	mov	local21, local04
2832c     20 00 90 FD | 	jmp	#LR__4121
28330                 | LR__4120
28330     04 4E 05 F1 | 	add	fp, #4
28334     A7 2A 02 FB | 	rdlong	local07, fp
28338     04 4E 85 F1 | 	sub	fp, #4
2833c     15 31 02 F6 | 	mov	local10, local07
28340     0C 30 06 F1 | 	add	local10, #12
28344     18 2D 02 FB | 	rdlong	local08, local10
28348     0C 30 86 F1 | 	sub	local10, #12
2834c     16 47 02 F6 | 	mov	local21, local08
28350                 | LR__4121
28350     0C 32 06 F1 | 	add	local11, #12
28354     19 47 62 FC | 	wrlong	local21, local11
28358     5C F9 9F FD | 	jmp	#LR__4103
2835c                 | LR__4122
2835c     04 4E 05 F1 | 	add	fp, #4
28360     A7 34 02 FB | 	rdlong	local12, fp
28364     1A 1F 02 F6 | 	mov	local01, local12
28368     04 4E 85 F1 | 	sub	fp, #4
2836c     10 34 06 F1 | 	add	local12, #16
28370     1A 33 C2 FA | 	rdbyte	local11, local12
28374     40 32 46 F5 | 	or	local11, #64
28378     10 1E 06 F1 | 	add	local01, #16
2837c     0F 33 42 FC | 	wrbyte	local11, local01
28380                 | ' 
28380                 | ' 
28380                 | ' 
28380                 | ' 
28380                 | ' 
28380                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
28380                 | ' 		fp->flag |=  0x80 ;
28380                 | ' 
28380                 | ' 	}
28380                 | ' 
28380                 | ' 	fp->flag |=  0x40 ;
28380                 | ' 
28380                 | ' 	return FR_OK ;
28380     00 FA 05 F6 | 	mov	result1, #0
28384                 | LR__4123
28384     A7 F0 03 F6 | 	mov	ptra, fp
28388     B2 00 A0 FD | 	call	#popregs_
2838c                 | _fatfs_cc_f_write_ret
2838c     2D 00 64 FD | 	ret
28390                 | 
28390                 | _fatfs_cc_f_sync
28390     00 4A 05 F6 | 	mov	COUNT_, #0
28394     A8 00 A0 FD | 	call	#pushregs_
28398     18 F0 07 F1 | 	add	ptra, #24
2839c     04 4E 05 F1 | 	add	fp, #4
283a0     A7 12 62 FC | 	wrlong	arg01, fp
283a4     08 4E 05 F1 | 	add	fp, #8
283a8     A7 14 02 F6 | 	mov	arg02, fp
283ac     0C 4E 85 F1 | 	sub	fp, #12
283b0     D0 E8 BF FD | 	call	#_fatfs_cc_validate
283b4     08 4E 05 F1 | 	add	fp, #8
283b8     A7 FA 61 FC | 	wrlong	result1, fp
283bc     08 4E 85 F1 | 	sub	fp, #8
283c0     00 FA 0D F2 | 	cmp	result1, #0 wz
283c4     C0 01 90 5D |  if_ne	jmp	#LR__4133
283c8     04 4E 05 F1 | 	add	fp, #4
283cc     A7 18 02 FB | 	rdlong	arg04, fp
283d0     04 4E 85 F1 | 	sub	fp, #4
283d4     10 18 06 F1 | 	add	arg04, #16
283d8     0C 19 C2 FA | 	rdbyte	arg04, arg04
283dc     40 18 CE F7 | 	test	arg04, #64 wz
283e0     A4 01 90 AD |  if_e	jmp	#LR__4132
283e4     04 4E 05 F1 | 	add	fp, #4
283e8     A7 18 02 FB | 	rdlong	arg04, fp
283ec     04 4E 85 F1 | 	sub	fp, #4
283f0     10 18 06 F1 | 	add	arg04, #16
283f4     0C 19 C2 FA | 	rdbyte	arg04, arg04
283f8     80 18 CE F7 | 	test	arg04, #128 wz
283fc     64 00 90 AD |  if_e	jmp	#LR__4130
28400     0C 4E 05 F1 | 	add	fp, #12
28404     A7 18 02 FB | 	rdlong	arg04, fp
28408     01 18 06 F1 | 	add	arg04, #1
2840c     0C 13 C2 FA | 	rdbyte	arg01, arg04
28410     08 4E 85 F1 | 	sub	fp, #8
28414     A7 18 02 FB | 	rdlong	arg04, fp
28418     0C 15 02 F6 | 	mov	arg02, arg04
2841c     28 14 06 F1 | 	add	arg02, #40
28420     04 4E 85 F1 | 	sub	fp, #4
28424     1C 18 06 F1 | 	add	arg04, #28
28428     0C 17 02 FB | 	rdlong	arg03, arg04
2842c     01 18 06 F6 | 	mov	arg04, #1
28430     0C AE BF FD | 	call	#_fatfs_cc_disk_write
28434     00 FA 0D F2 | 	cmp	result1, #0 wz
28438     01 FA 05 56 |  if_ne	mov	result1, #1
2843c     54 01 90 5D |  if_ne	jmp	#LR__4134
28440     04 4E 05 F1 | 	add	fp, #4
28444     A7 18 02 FB | 	rdlong	arg04, fp
28448     0C 17 02 F6 | 	mov	arg03, arg04
2844c     04 4E 85 F1 | 	sub	fp, #4
28450     10 18 06 F1 | 	add	arg04, #16
28454     0C 19 C2 FA | 	rdbyte	arg04, arg04
28458     7F 18 06 F5 | 	and	arg04, #127
2845c     10 16 06 F1 | 	add	arg03, #16
28460     0B 19 42 FC | 	wrbyte	arg04, arg03
28464                 | LR__4130
28464     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
28468     10 4E 05 F1 | 	add	fp, #16
2846c     A7 FA 61 FC | 	wrlong	result1, fp
28470     04 4E 85 F1 | 	sub	fp, #4
28474     A7 12 02 FB | 	rdlong	arg01, fp
28478     08 4E 85 F1 | 	sub	fp, #8
2847c     A7 18 02 FB | 	rdlong	arg04, fp
28480     04 4E 85 F1 | 	sub	fp, #4
28484     20 18 06 F1 | 	add	arg04, #32
28488     0C 15 02 FB | 	rdlong	arg02, arg04
2848c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
28490     08 4E 05 F1 | 	add	fp, #8
28494     A7 FA 61 FC | 	wrlong	result1, fp
28498     08 4E 85 F1 | 	sub	fp, #8
2849c     00 FA 0D F2 | 	cmp	result1, #0 wz
284a0     E4 00 90 5D |  if_ne	jmp	#LR__4131
284a4     04 4E 05 F1 | 	add	fp, #4
284a8     A7 18 02 FB | 	rdlong	arg04, fp
284ac     24 18 06 F1 | 	add	arg04, #36
284b0     0C 19 02 FB | 	rdlong	arg04, arg04
284b4     10 4E 05 F1 | 	add	fp, #16
284b8     A7 18 62 FC | 	wrlong	arg04, fp
284bc     0C 17 02 F6 | 	mov	arg03, arg04
284c0     0B 16 06 F1 | 	add	arg03, #11
284c4     0B 17 C2 FA | 	rdbyte	arg03, arg03
284c8     20 16 46 F5 | 	or	arg03, #32
284cc     0B 18 06 F1 | 	add	arg04, #11
284d0     0C 17 42 FC | 	wrbyte	arg03, arg04
284d4     10 4E 85 F1 | 	sub	fp, #16
284d8     A7 18 02 FB | 	rdlong	arg04, fp
284dc     0C 13 02 FB | 	rdlong	arg01, arg04
284e0     10 4E 05 F1 | 	add	fp, #16
284e4     A7 14 02 FB | 	rdlong	arg02, fp
284e8     14 4E 85 F1 | 	sub	fp, #20
284ec     08 18 06 F1 | 	add	arg04, #8
284f0     0C 17 02 FB | 	rdlong	arg03, arg04
284f4     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
284f8     14 4E 05 F1 | 	add	fp, #20
284fc     A7 12 02 FB | 	rdlong	arg01, fp
28500     1C 12 06 F1 | 	add	arg01, #28
28504     10 4E 85 F1 | 	sub	fp, #16
28508     A7 18 02 FB | 	rdlong	arg04, fp
2850c     0C 18 06 F1 | 	add	arg04, #12
28510     0C 15 02 FB | 	rdlong	arg02, arg04
28514     09 15 62 FC | 	wrlong	arg02, arg01
28518     10 4E 05 F1 | 	add	fp, #16
2851c     A7 12 02 FB | 	rdlong	arg01, fp
28520     16 12 06 F1 | 	add	arg01, #22
28524     04 4E 85 F1 | 	sub	fp, #4
28528     A7 14 02 FB | 	rdlong	arg02, fp
2852c     09 15 62 FC | 	wrlong	arg02, arg01
28530     04 4E 05 F1 | 	add	fp, #4
28534     A7 12 02 FB | 	rdlong	arg01, fp
28538     12 12 06 F1 | 	add	arg01, #18
2853c     09 01 58 FC | 	wrword	#0, arg01
28540     08 4E 85 F1 | 	sub	fp, #8
28544     A7 18 02 FB | 	rdlong	arg04, fp
28548     03 18 06 F1 | 	add	arg04, #3
2854c     0C 03 48 FC | 	wrbyte	#1, arg04
28550     A7 12 02 FB | 	rdlong	arg01, fp
28554     0C 4E 85 F1 | 	sub	fp, #12
28558     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2855c     08 4E 05 F1 | 	add	fp, #8
28560     A7 FA 61 FC | 	wrlong	result1, fp
28564     04 4E 85 F1 | 	sub	fp, #4
28568     A7 18 02 FB | 	rdlong	arg04, fp
2856c     0C 17 02 F6 | 	mov	arg03, arg04
28570     04 4E 85 F1 | 	sub	fp, #4
28574     10 18 06 F1 | 	add	arg04, #16
28578     0C 19 C2 FA | 	rdbyte	arg04, arg04
2857c     BF 18 06 F5 | 	and	arg04, #191
28580     10 16 06 F1 | 	add	arg03, #16
28584     0B 19 42 FC | 	wrbyte	arg04, arg03
28588                 | LR__4131
28588                 | LR__4132
28588                 | LR__4133
28588                 | ' 					dir = fp->dir_ptr;
28588                 | ' 					dir[ 11 ] |=  0x20 ;
28588                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
28588                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
28588                 | ' 					st_dword(dir +  22 , tm);
28588                 | ' 					st_word(dir +  18 , 0);
28588                 | ' 					fs->wflag = 1;
28588                 | ' 					res = sync_fs(fs);
28588                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
28588                 | ' 				}
28588                 | ' 			}
28588                 | ' 		}
28588                 | ' 	}
28588                 | ' 
28588                 | ' 	return res ;
28588     08 4E 05 F1 | 	add	fp, #8
2858c     A7 FA 01 FB | 	rdlong	result1, fp
28590     08 4E 85 F1 | 	sub	fp, #8
28594                 | LR__4134
28594     A7 F0 03 F6 | 	mov	ptra, fp
28598     B2 00 A0 FD | 	call	#popregs_
2859c                 | _fatfs_cc_f_sync_ret
2859c     2D 00 64 FD | 	ret
285a0                 | 
285a0                 | _fatfs_cc_f_close
285a0     01 4A 05 F6 | 	mov	COUNT_, #1
285a4     A8 00 A0 FD | 	call	#pushregs_
285a8     10 F0 07 F1 | 	add	ptra, #16
285ac     04 4E 05 F1 | 	add	fp, #4
285b0     A7 12 62 FC | 	wrlong	arg01, fp
285b4     04 4E 85 F1 | 	sub	fp, #4
285b8     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
285bc     08 4E 05 F1 | 	add	fp, #8
285c0     A7 FA 61 FC | 	wrlong	result1, fp
285c4     08 4E 85 F1 | 	sub	fp, #8
285c8     00 FA 0D F2 | 	cmp	result1, #0 wz
285cc     38 00 90 5D |  if_ne	jmp	#LR__4140
285d0     04 4E 05 F1 | 	add	fp, #4
285d4     A7 12 02 FB | 	rdlong	arg01, fp
285d8     08 4E 05 F1 | 	add	fp, #8
285dc     A7 14 02 F6 | 	mov	arg02, fp
285e0     0C 4E 85 F1 | 	sub	fp, #12
285e4     9C E6 BF FD | 	call	#_fatfs_cc_validate
285e8     08 4E 05 F1 | 	add	fp, #8
285ec     A7 FA 61 FC | 	wrlong	result1, fp
285f0     08 4E 85 F1 | 	sub	fp, #8
285f4     00 FA 0D F2 | 	cmp	result1, #0 wz
285f8     04 4E 05 A1 |  if_e	add	fp, #4
285fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
28600     04 4E 85 A1 |  if_e	sub	fp, #4
28604     0F 01 68 AC |  if_e	wrlong	#0, local01
28608                 | LR__4140
28608                 | ' 
28608                 | ' 
28608                 | ' 
28608                 | ' 
28608                 | ' 			fp->obj.fs = 0;
28608                 | ' #line 4192 "ff.c"
28608                 | ' 		}
28608                 | ' 	}
28608                 | ' 	return res;
28608     08 4E 05 F1 | 	add	fp, #8
2860c     A7 FA 01 FB | 	rdlong	result1, fp
28610     08 4E 85 F1 | 	sub	fp, #8
28614     A7 F0 03 F6 | 	mov	ptra, fp
28618     B2 00 A0 FD | 	call	#popregs_
2861c                 | _fatfs_cc_f_close_ret
2861c     2D 00 64 FD | 	ret
28620                 | 
28620                 | _fatfs_cc_f_lseek
28620     00 4A 05 F6 | 	mov	COUNT_, #0
28624     A8 00 A0 FD | 	call	#pushregs_
28628     24 F0 07 F1 | 	add	ptra, #36
2862c     04 4E 05 F1 | 	add	fp, #4
28630     A7 12 62 FC | 	wrlong	arg01, fp
28634     04 4E 05 F1 | 	add	fp, #4
28638     A7 14 62 FC | 	wrlong	arg02, fp
2863c     04 4E 85 F1 | 	sub	fp, #4
28640     A7 12 02 FB | 	rdlong	arg01, fp
28644     0C 4E 05 F1 | 	add	fp, #12
28648     A7 14 02 F6 | 	mov	arg02, fp
2864c     10 4E 85 F1 | 	sub	fp, #16
28650     30 E6 BF FD | 	call	#_fatfs_cc_validate
28654     0C 4E 05 F1 | 	add	fp, #12
28658     A7 FA 61 FC | 	wrlong	result1, fp
2865c     0C 4E 85 F1 | 	sub	fp, #12
28660     00 FA 0D F2 | 	cmp	result1, #0 wz
28664     1C 00 90 5D |  if_ne	jmp	#LR__4150
28668     04 4E 05 F1 | 	add	fp, #4
2866c     A7 18 02 FB | 	rdlong	arg04, fp
28670     11 18 06 F1 | 	add	arg04, #17
28674     0C 19 C2 FA | 	rdbyte	arg04, arg04
28678     08 4E 05 F1 | 	add	fp, #8
2867c     A7 18 62 FC | 	wrlong	arg04, fp
28680     0C 4E 85 F1 | 	sub	fp, #12
28684                 | LR__4150
28684     0C 4E 05 F1 | 	add	fp, #12
28688     A7 18 0A FB | 	rdlong	arg04, fp wz
2868c     0C 4E 85 F1 | 	sub	fp, #12
28690     0C 4E 05 51 |  if_ne	add	fp, #12
28694     A7 FA 01 5B |  if_ne	rdlong	result1, fp
28698     0C 4E 85 51 |  if_ne	sub	fp, #12
2869c     40 06 90 5D |  if_ne	jmp	#LR__4173
286a0     04 4E 05 F1 | 	add	fp, #4
286a4     A7 18 02 FB | 	rdlong	arg04, fp
286a8     04 4E 05 F1 | 	add	fp, #4
286ac     A7 16 02 FB | 	rdlong	arg03, fp
286b0     08 4E 85 F1 | 	sub	fp, #8
286b4     0C 18 06 F1 | 	add	arg04, #12
286b8     0C 19 02 FB | 	rdlong	arg04, arg04
286bc     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
286c0     3C 00 90 ED |  if_be	jmp	#LR__4151
286c4     04 4E 05 F1 | 	add	fp, #4
286c8     A7 16 02 FB | 	rdlong	arg03, fp
286cc     04 4E 85 F1 | 	sub	fp, #4
286d0     10 16 06 F1 | 	add	arg03, #16
286d4     0B 17 C2 FA | 	rdbyte	arg03, arg03
286d8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
286dc     02 16 CE F7 | 	test	arg03, #2 wz
286e0     1C 00 90 5D |  if_ne	jmp	#LR__4151
286e4     04 4E 05 F1 | 	add	fp, #4
286e8     A7 16 02 FB | 	rdlong	arg03, fp
286ec     0C 16 06 F1 | 	add	arg03, #12
286f0     0B 17 02 FB | 	rdlong	arg03, arg03
286f4     04 4E 05 F1 | 	add	fp, #4
286f8     A7 16 62 FC | 	wrlong	arg03, fp
286fc     08 4E 85 F1 | 	sub	fp, #8
28700                 | LR__4151
28700     04 4E 05 F1 | 	add	fp, #4
28704     A7 16 02 FB | 	rdlong	arg03, fp
28708     14 16 06 F1 | 	add	arg03, #20
2870c     0B 17 02 FB | 	rdlong	arg03, arg03
28710     1C 4E 05 F1 | 	add	fp, #28
28714     A7 16 62 FC | 	wrlong	arg03, fp
28718     1C 4E 85 F1 | 	sub	fp, #28
2871c     A7 16 02 FB | 	rdlong	arg03, fp
28720     18 4E 05 F1 | 	add	fp, #24
28724     A7 00 68 FC | 	wrlong	#0, fp
28728     14 16 06 F1 | 	add	arg03, #20
2872c     0B 01 68 FC | 	wrlong	#0, arg03
28730     14 4E 85 F1 | 	sub	fp, #20
28734     A7 16 02 FB | 	rdlong	arg03, fp
28738     08 4E 85 F1 | 	sub	fp, #8
2873c     01 16 16 F2 | 	cmp	arg03, #1 wc
28740     E4 03 90 CD |  if_b	jmp	#LR__4167
28744     10 4E 05 F1 | 	add	fp, #16
28748     A7 16 02 FB | 	rdlong	arg03, fp
2874c     0A 16 06 F1 | 	add	arg03, #10
28750     0B 19 E2 FA | 	rdword	arg04, arg03
28754     09 18 66 F0 | 	shl	arg04, #9
28758     08 4E 05 F1 | 	add	fp, #8
2875c     A7 18 62 FC | 	wrlong	arg04, fp
28760     08 4E 05 F1 | 	add	fp, #8
28764     A7 18 02 FB | 	rdlong	arg04, fp
28768     20 4E 85 F1 | 	sub	fp, #32
2876c     01 18 16 F2 | 	cmp	arg04, #1 wc
28770     AC 00 90 CD |  if_b	jmp	#LR__4152
28774     08 4E 05 F1 | 	add	fp, #8
28778     A7 18 02 FB | 	rdlong	arg04, fp
2877c     01 18 86 F1 | 	sub	arg04, #1
28780     10 4E 05 F1 | 	add	fp, #16
28784     A7 16 02 FB | 	rdlong	arg03, fp
28788     0B 19 12 FD | 	qdiv	arg04, arg03
2878c     08 4E 05 F1 | 	add	fp, #8
28790     A7 FA 01 FB | 	rdlong	result1, fp
28794     01 FA 85 F1 | 	sub	result1, #1
28798     18 18 62 FD | 	getqx	arg04
2879c     0B FB 11 FD | 	qdiv	result1, arg03
287a0     20 4E 85 F1 | 	sub	fp, #32
287a4     18 16 62 FD | 	getqx	arg03
287a8     0B 19 12 F2 | 	cmp	arg04, arg03 wc
287ac     70 00 90 CD |  if_b	jmp	#LR__4152
287b0     04 4E 05 F1 | 	add	fp, #4
287b4     A7 16 02 FB | 	rdlong	arg03, fp
287b8     1C 4E 05 F1 | 	add	fp, #28
287bc     A7 FA 01 FB | 	rdlong	result1, fp
287c0     01 FA 85 F1 | 	sub	result1, #1
287c4     08 4E 85 F1 | 	sub	fp, #8
287c8     A7 18 02 FB | 	rdlong	arg04, fp
287cc     01 18 86 F1 | 	sub	arg04, #1
287d0     0C FB 21 F5 | 	andn	result1, arg04
287d4     14 16 06 F1 | 	add	arg03, #20
287d8     0B FB 61 FC | 	wrlong	result1, arg03
287dc     10 4E 85 F1 | 	sub	fp, #16
287e0     A7 16 02 FB | 	rdlong	arg03, fp
287e4     04 4E 85 F1 | 	sub	fp, #4
287e8     A7 18 02 FB | 	rdlong	arg04, fp
287ec     14 18 06 F1 | 	add	arg04, #20
287f0     0C 19 02 FB | 	rdlong	arg04, arg04
287f4     0C 17 82 F1 | 	sub	arg03, arg04
287f8     04 4E 05 F1 | 	add	fp, #4
287fc     A7 16 62 FC | 	wrlong	arg03, fp
28800     04 4E 85 F1 | 	sub	fp, #4
28804     A7 16 02 FB | 	rdlong	arg03, fp
28808     18 16 06 F1 | 	add	arg03, #24
2880c     0B 17 02 FB | 	rdlong	arg03, arg03
28810     10 4E 05 F1 | 	add	fp, #16
28814     A7 16 62 FC | 	wrlong	arg03, fp
28818     14 4E 85 F1 | 	sub	fp, #20
2881c     D0 00 90 FD | 	jmp	#LR__4156
28820                 | LR__4152
28820     04 4E 05 F1 | 	add	fp, #4
28824     A7 16 02 FB | 	rdlong	arg03, fp
28828     08 16 06 F1 | 	add	arg03, #8
2882c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
28830     10 4E 05 F1 | 	add	fp, #16
28834     A7 16 62 FC | 	wrlong	arg03, fp
28838     14 4E 85 F1 | 	sub	fp, #20
2883c     94 00 90 5D |  if_ne	jmp	#LR__4155
28840     04 4E 05 F1 | 	add	fp, #4
28844     A7 12 02 FB | 	rdlong	arg01, fp
28848     04 4E 85 F1 | 	sub	fp, #4
2884c     00 14 06 F6 | 	mov	arg02, #0
28850     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
28854     14 4E 05 F1 | 	add	fp, #20
28858     A7 FA 61 FC | 	wrlong	result1, fp
2885c     14 4E 85 F1 | 	sub	fp, #20
28860     01 FA 0D F2 | 	cmp	result1, #1 wz
28864     1C 00 90 5D |  if_ne	jmp	#LR__4153
28868     04 4E 05 F1 | 	add	fp, #4
2886c     A7 16 02 FB | 	rdlong	arg03, fp
28870     04 4E 85 F1 | 	sub	fp, #4
28874     11 16 06 F1 | 	add	arg03, #17
28878     0B 05 48 FC | 	wrbyte	#2, arg03
2887c     02 FA 05 F6 | 	mov	result1, #2
28880     5C 04 90 FD | 	jmp	#LR__4173
28884                 | LR__4153
28884     14 4E 05 F1 | 	add	fp, #20
28888     A7 FA 01 FB | 	rdlong	result1, fp
2888c     14 4E 85 F1 | 	sub	fp, #20
28890     FF FF 7F FF 
28894     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28898     1C 00 90 5D |  if_ne	jmp	#LR__4154
2889c     04 4E 05 F1 | 	add	fp, #4
288a0     A7 16 02 FB | 	rdlong	arg03, fp
288a4     04 4E 85 F1 | 	sub	fp, #4
288a8     11 16 06 F1 | 	add	arg03, #17
288ac     0B 03 48 FC | 	wrbyte	#1, arg03
288b0     01 FA 05 F6 | 	mov	result1, #1
288b4     28 04 90 FD | 	jmp	#LR__4173
288b8                 | LR__4154
288b8     04 4E 05 F1 | 	add	fp, #4
288bc     A7 16 02 FB | 	rdlong	arg03, fp
288c0     10 4E 05 F1 | 	add	fp, #16
288c4     A7 18 02 FB | 	rdlong	arg04, fp
288c8     14 4E 85 F1 | 	sub	fp, #20
288cc     08 16 06 F1 | 	add	arg03, #8
288d0     0B 19 62 FC | 	wrlong	arg04, arg03
288d4                 | LR__4155
288d4     04 4E 05 F1 | 	add	fp, #4
288d8     A7 16 02 FB | 	rdlong	arg03, fp
288dc     10 4E 05 F1 | 	add	fp, #16
288e0     A7 18 02 FB | 	rdlong	arg04, fp
288e4     14 4E 85 F1 | 	sub	fp, #20
288e8     18 16 06 F1 | 	add	arg03, #24
288ec     0B 19 62 FC | 	wrlong	arg04, arg03
288f0                 | LR__4156
288f0     14 4E 05 F1 | 	add	fp, #20
288f4     A7 16 0A FB | 	rdlong	arg03, fp wz
288f8     14 4E 85 F1 | 	sub	fp, #20
288fc     28 02 90 AD |  if_e	jmp	#LR__4166
28900                 | ' 				while (ofs > bcs) {
28900                 | LR__4157
28900     08 4E 05 F1 | 	add	fp, #8
28904     A7 18 02 FB | 	rdlong	arg04, fp
28908     10 4E 05 F1 | 	add	fp, #16
2890c     A7 16 02 FB | 	rdlong	arg03, fp
28910     18 4E 85 F1 | 	sub	fp, #24
28914     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
28918     68 01 90 ED |  if_be	jmp	#LR__4163
2891c     08 4E 05 F1 | 	add	fp, #8
28920     A7 18 02 FB | 	rdlong	arg04, fp
28924     10 4E 05 F1 | 	add	fp, #16
28928     A7 16 02 FB | 	rdlong	arg03, fp
2892c     0B 19 82 F1 | 	sub	arg04, arg03
28930     10 4E 85 F1 | 	sub	fp, #16
28934     A7 18 62 FC | 	wrlong	arg04, fp
28938     04 4E 85 F1 | 	sub	fp, #4
2893c     A7 18 02 FB | 	rdlong	arg04, fp
28940     0C FB 01 F6 | 	mov	result1, arg04
28944     14 18 06 F1 | 	add	arg04, #20
28948     0C 19 02 FB | 	rdlong	arg04, arg04
2894c     14 4E 05 F1 | 	add	fp, #20
28950     A7 16 02 FB | 	rdlong	arg03, fp
28954     0B 19 02 F1 | 	add	arg04, arg03
28958     14 FA 05 F1 | 	add	result1, #20
2895c     FD 18 62 FC | 	wrlong	arg04, result1
28960     14 4E 85 F1 | 	sub	fp, #20
28964     A7 16 02 FB | 	rdlong	arg03, fp
28968     04 4E 85 F1 | 	sub	fp, #4
2896c     10 16 06 F1 | 	add	arg03, #16
28970     0B 17 C2 FA | 	rdbyte	arg03, arg03
28974     02 16 CE F7 | 	test	arg03, #2 wz
28978     3C 00 90 AD |  if_e	jmp	#LR__4158
2897c     04 4E 05 F1 | 	add	fp, #4
28980     A7 12 02 FB | 	rdlong	arg01, fp
28984     10 4E 05 F1 | 	add	fp, #16
28988     A7 14 02 FB | 	rdlong	arg02, fp
2898c     14 4E 85 F1 | 	sub	fp, #20
28990     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
28994     14 4E 05 F1 | 	add	fp, #20
28998     A7 FA 61 FC | 	wrlong	result1, fp
2899c     00 FA 4D F2 | 	cmps	result1, #0 wz
289a0     14 4E 85 F1 | 	sub	fp, #20
289a4     08 4E 05 A1 |  if_e	add	fp, #8
289a8     A7 00 68 AC |  if_e	wrlong	#0, fp
289ac     08 4E 85 A1 |  if_e	sub	fp, #8
289b0                 | ' 							ofs = 0; break;
289b0     D0 00 90 AD |  if_e	jmp	#LR__4163
289b4     24 00 90 FD | 	jmp	#LR__4159
289b8                 | LR__4158
289b8     04 4E 05 F1 | 	add	fp, #4
289bc     A7 12 02 FB | 	rdlong	arg01, fp
289c0     10 4E 05 F1 | 	add	fp, #16
289c4     A7 14 02 FB | 	rdlong	arg02, fp
289c8     14 4E 85 F1 | 	sub	fp, #20
289cc     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
289d0     14 4E 05 F1 | 	add	fp, #20
289d4     A7 FA 61 FC | 	wrlong	result1, fp
289d8     14 4E 85 F1 | 	sub	fp, #20
289dc                 | LR__4159
289dc     14 4E 05 F1 | 	add	fp, #20
289e0     A7 16 02 FB | 	rdlong	arg03, fp
289e4     14 4E 85 F1 | 	sub	fp, #20
289e8     FF FF 7F FF 
289ec     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
289f0     1C 00 90 5D |  if_ne	jmp	#LR__4160
289f4     04 4E 05 F1 | 	add	fp, #4
289f8     A7 16 02 FB | 	rdlong	arg03, fp
289fc     04 4E 85 F1 | 	sub	fp, #4
28a00     11 16 06 F1 | 	add	arg03, #17
28a04     0B 03 48 FC | 	wrbyte	#1, arg03
28a08     01 FA 05 F6 | 	mov	result1, #1
28a0c     D0 02 90 FD | 	jmp	#LR__4173
28a10                 | LR__4160
28a10     14 4E 05 F1 | 	add	fp, #20
28a14     A7 16 02 FB | 	rdlong	arg03, fp
28a18     14 4E 85 F1 | 	sub	fp, #20
28a1c     02 16 16 F2 | 	cmp	arg03, #2 wc
28a20     24 00 90 CD |  if_b	jmp	#LR__4161
28a24     10 4E 05 F1 | 	add	fp, #16
28a28     A7 18 02 FB | 	rdlong	arg04, fp
28a2c     04 4E 05 F1 | 	add	fp, #4
28a30     A7 16 02 FB | 	rdlong	arg03, fp
28a34     14 4E 85 F1 | 	sub	fp, #20
28a38     18 18 06 F1 | 	add	arg04, #24
28a3c     0C 19 02 FB | 	rdlong	arg04, arg04
28a40     0C 17 12 F2 | 	cmp	arg03, arg04 wc
28a44     1C 00 90 CD |  if_b	jmp	#LR__4162
28a48                 | LR__4161
28a48     04 4E 05 F1 | 	add	fp, #4
28a4c     A7 16 02 FB | 	rdlong	arg03, fp
28a50     04 4E 85 F1 | 	sub	fp, #4
28a54     11 16 06 F1 | 	add	arg03, #17
28a58     0B 05 48 FC | 	wrbyte	#2, arg03
28a5c     02 FA 05 F6 | 	mov	result1, #2
28a60     7C 02 90 FD | 	jmp	#LR__4173
28a64                 | LR__4162
28a64     04 4E 05 F1 | 	add	fp, #4
28a68     A7 18 02 FB | 	rdlong	arg04, fp
28a6c     10 4E 05 F1 | 	add	fp, #16
28a70     A7 16 02 FB | 	rdlong	arg03, fp
28a74     14 4E 85 F1 | 	sub	fp, #20
28a78     18 18 06 F1 | 	add	arg04, #24
28a7c     0C 17 62 FC | 	wrlong	arg03, arg04
28a80     7C FE 9F FD | 	jmp	#LR__4157
28a84                 | LR__4163
28a84     04 4E 05 F1 | 	add	fp, #4
28a88     A7 16 02 FB | 	rdlong	arg03, fp
28a8c     0B 13 02 F6 | 	mov	arg01, arg03
28a90     14 16 06 F1 | 	add	arg03, #20
28a94     0B 15 02 FB | 	rdlong	arg02, arg03
28a98     04 4E 05 F1 | 	add	fp, #4
28a9c     A7 16 02 FB | 	rdlong	arg03, fp
28aa0     0B 15 02 F1 | 	add	arg02, arg03
28aa4     14 12 06 F1 | 	add	arg01, #20
28aa8     09 15 62 FC | 	wrlong	arg02, arg01
28aac     A7 16 02 FB | 	rdlong	arg03, fp
28ab0     08 4E 85 F1 | 	sub	fp, #8
28ab4     FF 17 CE F7 | 	test	arg03, #511 wz
28ab8     6C 00 90 AD |  if_e	jmp	#LR__4165
28abc     10 4E 05 F1 | 	add	fp, #16
28ac0     A7 12 02 FB | 	rdlong	arg01, fp
28ac4     04 4E 05 F1 | 	add	fp, #4
28ac8     A7 14 02 FB | 	rdlong	arg02, fp
28acc     14 4E 85 F1 | 	sub	fp, #20
28ad0     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
28ad4     1C 4E 05 F1 | 	add	fp, #28
28ad8     A7 FA 61 FC | 	wrlong	result1, fp
28adc     1C 4E 85 F1 | 	sub	fp, #28
28ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
28ae4     1C 00 90 5D |  if_ne	jmp	#LR__4164
28ae8     04 4E 05 F1 | 	add	fp, #4
28aec     A7 16 02 FB | 	rdlong	arg03, fp
28af0     04 4E 85 F1 | 	sub	fp, #4
28af4     11 16 06 F1 | 	add	arg03, #17
28af8     0B 05 48 FC | 	wrbyte	#2, arg03
28afc     02 FA 05 F6 | 	mov	result1, #2
28b00     DC 01 90 FD | 	jmp	#LR__4173
28b04                 | LR__4164
28b04     1C 4E 05 F1 | 	add	fp, #28
28b08     A7 18 02 FB | 	rdlong	arg04, fp
28b0c     14 4E 85 F1 | 	sub	fp, #20
28b10     A7 16 02 FB | 	rdlong	arg03, fp
28b14     09 16 46 F0 | 	shr	arg03, #9
28b18     0B 19 02 F1 | 	add	arg04, arg03
28b1c     14 4E 05 F1 | 	add	fp, #20
28b20     A7 18 62 FC | 	wrlong	arg04, fp
28b24     1C 4E 85 F1 | 	sub	fp, #28
28b28                 | LR__4165
28b28                 | LR__4166
28b28                 | LR__4167
28b28     04 4E 05 F1 | 	add	fp, #4
28b2c     A7 18 02 FB | 	rdlong	arg04, fp
28b30     0C 17 02 F6 | 	mov	arg03, arg04
28b34     04 4E 85 F1 | 	sub	fp, #4
28b38     14 16 06 F1 | 	add	arg03, #20
28b3c     0B 17 02 FB | 	rdlong	arg03, arg03
28b40     0C 18 06 F1 | 	add	arg04, #12
28b44     0C 19 02 FB | 	rdlong	arg04, arg04
28b48     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
28b4c     3C 00 90 ED |  if_be	jmp	#LR__4168
28b50     04 4E 05 F1 | 	add	fp, #4
28b54     A7 18 02 FB | 	rdlong	arg04, fp
28b58     0C 17 02 F6 | 	mov	arg03, arg04
28b5c     14 18 06 F1 | 	add	arg04, #20
28b60     0C 19 02 FB | 	rdlong	arg04, arg04
28b64     0C 16 06 F1 | 	add	arg03, #12
28b68     0B 19 62 FC | 	wrlong	arg04, arg03
28b6c     A7 18 02 FB | 	rdlong	arg04, fp
28b70     0C 17 02 F6 | 	mov	arg03, arg04
28b74     04 4E 85 F1 | 	sub	fp, #4
28b78     10 18 06 F1 | 	add	arg04, #16
28b7c     0C 19 C2 FA | 	rdbyte	arg04, arg04
28b80     40 18 46 F5 | 	or	arg04, #64
28b84     10 16 06 F1 | 	add	arg03, #16
28b88     0B 19 42 FC | 	wrbyte	arg04, arg03
28b8c                 | LR__4168
28b8c     04 4E 05 F1 | 	add	fp, #4
28b90     A7 16 02 FB | 	rdlong	arg03, fp
28b94     04 4E 85 F1 | 	sub	fp, #4
28b98     14 16 06 F1 | 	add	arg03, #20
28b9c     0B 17 02 FB | 	rdlong	arg03, arg03
28ba0     FF 17 CE F7 | 	test	arg03, #511 wz
28ba4     2C 01 90 AD |  if_e	jmp	#LR__4172
28ba8     04 4E 05 F1 | 	add	fp, #4
28bac     A7 18 02 FB | 	rdlong	arg04, fp
28bb0     18 4E 05 F1 | 	add	fp, #24
28bb4     A7 16 02 FB | 	rdlong	arg03, fp
28bb8     1C 4E 85 F1 | 	sub	fp, #28
28bbc     1C 18 06 F1 | 	add	arg04, #28
28bc0     0C 19 02 FB | 	rdlong	arg04, arg04
28bc4     0C 17 0A F2 | 	cmp	arg03, arg04 wz
28bc8     08 01 90 AD |  if_e	jmp	#LR__4172
28bcc     04 4E 05 F1 | 	add	fp, #4
28bd0     A7 16 02 FB | 	rdlong	arg03, fp
28bd4     04 4E 85 F1 | 	sub	fp, #4
28bd8     10 16 06 F1 | 	add	arg03, #16
28bdc     0B 17 C2 FA | 	rdbyte	arg03, arg03
28be0     80 16 CE F7 | 	test	arg03, #128 wz
28be4     7C 00 90 AD |  if_e	jmp	#LR__4170
28be8     10 4E 05 F1 | 	add	fp, #16
28bec     A7 16 02 FB | 	rdlong	arg03, fp
28bf0     01 16 06 F1 | 	add	arg03, #1
28bf4     0B 13 C2 FA | 	rdbyte	arg01, arg03
28bf8     0C 4E 85 F1 | 	sub	fp, #12
28bfc     A7 16 02 FB | 	rdlong	arg03, fp
28c00     0B 15 02 F6 | 	mov	arg02, arg03
28c04     28 14 06 F1 | 	add	arg02, #40
28c08     04 4E 85 F1 | 	sub	fp, #4
28c0c     1C 16 06 F1 | 	add	arg03, #28
28c10     0B 17 02 FB | 	rdlong	arg03, arg03
28c14     01 18 06 F6 | 	mov	arg04, #1
28c18     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
28c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
28c20     1C 00 90 AD |  if_e	jmp	#LR__4169
28c24     04 4E 05 F1 | 	add	fp, #4
28c28     A7 16 02 FB | 	rdlong	arg03, fp
28c2c     04 4E 85 F1 | 	sub	fp, #4
28c30     11 16 06 F1 | 	add	arg03, #17
28c34     0B 03 48 FC | 	wrbyte	#1, arg03
28c38     01 FA 05 F6 | 	mov	result1, #1
28c3c     A0 00 90 FD | 	jmp	#LR__4173
28c40                 | LR__4169
28c40     04 4E 05 F1 | 	add	fp, #4
28c44     A7 18 02 FB | 	rdlong	arg04, fp
28c48     0C 17 02 F6 | 	mov	arg03, arg04
28c4c     04 4E 85 F1 | 	sub	fp, #4
28c50     10 18 06 F1 | 	add	arg04, #16
28c54     0C 19 C2 FA | 	rdbyte	arg04, arg04
28c58     7F 18 06 F5 | 	and	arg04, #127
28c5c     10 16 06 F1 | 	add	arg03, #16
28c60     0B 19 42 FC | 	wrbyte	arg04, arg03
28c64                 | LR__4170
28c64     10 4E 05 F1 | 	add	fp, #16
28c68     A7 16 02 FB | 	rdlong	arg03, fp
28c6c     01 16 06 F1 | 	add	arg03, #1
28c70     0B 13 C2 FA | 	rdbyte	arg01, arg03
28c74     0C 4E 85 F1 | 	sub	fp, #12
28c78     A7 14 02 FB | 	rdlong	arg02, fp
28c7c     28 14 06 F1 | 	add	arg02, #40
28c80     18 4E 05 F1 | 	add	fp, #24
28c84     A7 16 02 FB | 	rdlong	arg03, fp
28c88     1C 4E 85 F1 | 	sub	fp, #28
28c8c     01 18 06 F6 | 	mov	arg04, #1
28c90     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
28c94     00 FA 0D F2 | 	cmp	result1, #0 wz
28c98     1C 00 90 AD |  if_e	jmp	#LR__4171
28c9c     04 4E 05 F1 | 	add	fp, #4
28ca0     A7 16 02 FB | 	rdlong	arg03, fp
28ca4     04 4E 85 F1 | 	sub	fp, #4
28ca8     11 16 06 F1 | 	add	arg03, #17
28cac     0B 03 48 FC | 	wrbyte	#1, arg03
28cb0     01 FA 05 F6 | 	mov	result1, #1
28cb4     28 00 90 FD | 	jmp	#LR__4173
28cb8                 | LR__4171
28cb8     04 4E 05 F1 | 	add	fp, #4
28cbc     A7 18 02 FB | 	rdlong	arg04, fp
28cc0     18 4E 05 F1 | 	add	fp, #24
28cc4     A7 16 02 FB | 	rdlong	arg03, fp
28cc8     1C 4E 85 F1 | 	sub	fp, #28
28ccc     1C 18 06 F1 | 	add	arg04, #28
28cd0     0C 17 62 FC | 	wrlong	arg03, arg04
28cd4                 | LR__4172
28cd4                 | ' 
28cd4                 | ' 			fp->sect = nsect;
28cd4                 | ' 		}
28cd4                 | ' 	}
28cd4                 | ' 
28cd4                 | ' 	return res ;
28cd4     0C 4E 05 F1 | 	add	fp, #12
28cd8     A7 FA 01 FB | 	rdlong	result1, fp
28cdc     0C 4E 85 F1 | 	sub	fp, #12
28ce0                 | LR__4173
28ce0     A7 F0 03 F6 | 	mov	ptra, fp
28ce4     B2 00 A0 FD | 	call	#popregs_
28ce8                 | _fatfs_cc_f_lseek_ret
28ce8     2D 00 64 FD | 	ret
28cec                 | 
28cec                 | _fatfs_cc_f_opendir
28cec     01 4A 05 F6 | 	mov	COUNT_, #1
28cf0     A8 00 A0 FD | 	call	#pushregs_
28cf4     14 F0 07 F1 | 	add	ptra, #20
28cf8     04 4E 05 F1 | 	add	fp, #4
28cfc     A7 12 62 FC | 	wrlong	arg01, fp
28d00     04 4E 05 F1 | 	add	fp, #4
28d04     A7 14 62 FC | 	wrlong	arg02, fp
28d08     04 4E 85 F1 | 	sub	fp, #4
28d0c     A7 16 0A FB | 	rdlong	arg03, fp wz
28d10     04 4E 85 F1 | 	sub	fp, #4
28d14     09 FA 05 A6 |  if_e	mov	result1, #9
28d18     78 01 90 AD |  if_e	jmp	#LR__4186
28d1c     08 4E 05 F1 | 	add	fp, #8
28d20     A7 12 02 F6 | 	mov	arg01, fp
28d24     08 4E 05 F1 | 	add	fp, #8
28d28     A7 14 02 F6 | 	mov	arg02, fp
28d2c     10 4E 85 F1 | 	sub	fp, #16
28d30     00 16 06 F6 | 	mov	arg03, #0
28d34     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
28d38     0C 4E 05 F1 | 	add	fp, #12
28d3c     A7 FA 61 FC | 	wrlong	result1, fp
28d40     0C 4E 85 F1 | 	sub	fp, #12
28d44     00 FA 0D F2 | 	cmp	result1, #0 wz
28d48     20 01 90 5D |  if_ne	jmp	#LR__4185
28d4c     04 4E 05 F1 | 	add	fp, #4
28d50     A7 16 02 FB | 	rdlong	arg03, fp
28d54     0C 4E 05 F1 | 	add	fp, #12
28d58     A7 FA 01 FB | 	rdlong	result1, fp
28d5c     0B FB 61 FC | 	wrlong	result1, arg03
28d60     0C 4E 85 F1 | 	sub	fp, #12
28d64     A7 12 02 FB | 	rdlong	arg01, fp
28d68     04 4E 05 F1 | 	add	fp, #4
28d6c     A7 14 02 FB | 	rdlong	arg02, fp
28d70     08 4E 85 F1 | 	sub	fp, #8
28d74     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
28d78     0C 4E 05 F1 | 	add	fp, #12
28d7c     A7 FA 61 FC | 	wrlong	result1, fp
28d80     0C 4E 85 F1 | 	sub	fp, #12
28d84     00 FA 0D F2 | 	cmp	result1, #0 wz
28d88     C4 00 90 5D |  if_ne	jmp	#LR__4184
28d8c     04 4E 05 F1 | 	add	fp, #4
28d90     A7 16 02 FB | 	rdlong	arg03, fp
28d94     04 4E 85 F1 | 	sub	fp, #4
28d98     2B 16 06 F1 | 	add	arg03, #43
28d9c     0B 17 C2 FA | 	rdbyte	arg03, arg03
28da0     80 16 CE F7 | 	test	arg03, #128 wz
28da4     58 00 90 5D |  if_ne	jmp	#LR__4182
28da8     04 4E 05 F1 | 	add	fp, #4
28dac     A7 16 02 FB | 	rdlong	arg03, fp
28db0     04 4E 85 F1 | 	sub	fp, #4
28db4     06 16 06 F1 | 	add	arg03, #6
28db8     0B 17 C2 FA | 	rdbyte	arg03, arg03
28dbc     10 16 CE F7 | 	test	arg03, #16 wz
28dc0     30 00 90 AD |  if_e	jmp	#LR__4180
28dc4     04 4E 05 F1 | 	add	fp, #4
28dc8     A7 16 02 FB | 	rdlong	arg03, fp
28dcc     0B 1F 02 F6 | 	mov	local01, arg03
28dd0     0C 4E 05 F1 | 	add	fp, #12
28dd4     A7 12 02 FB | 	rdlong	arg01, fp
28dd8     10 4E 85 F1 | 	sub	fp, #16
28ddc     1C 16 06 F1 | 	add	arg03, #28
28de0     0B 15 02 FB | 	rdlong	arg02, arg03
28de4     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
28de8     08 1E 06 F1 | 	add	local01, #8
28dec     0F FB 61 FC | 	wrlong	result1, local01
28df0     0C 00 90 FD | 	jmp	#LR__4181
28df4                 | LR__4180
28df4     0C 4E 05 F1 | 	add	fp, #12
28df8     A7 0A 68 FC | 	wrlong	#5, fp
28dfc     0C 4E 85 F1 | 	sub	fp, #12
28e00                 | LR__4181
28e00                 | LR__4182
28e00     0C 4E 05 F1 | 	add	fp, #12
28e04     A7 1E 0A FB | 	rdlong	local01, fp wz
28e08     0C 4E 85 F1 | 	sub	fp, #12
28e0c     40 00 90 5D |  if_ne	jmp	#LR__4183
28e10     04 4E 05 F1 | 	add	fp, #4
28e14     A7 1E 02 FB | 	rdlong	local01, fp
28e18     0C 4E 05 F1 | 	add	fp, #12
28e1c     A7 16 02 FB | 	rdlong	arg03, fp
28e20     06 16 06 F1 | 	add	arg03, #6
28e24     0B 17 E2 FA | 	rdword	arg03, arg03
28e28     04 1E 06 F1 | 	add	local01, #4
28e2c     0F 17 52 FC | 	wrword	arg03, local01
28e30     0C 4E 85 F1 | 	sub	fp, #12
28e34     A7 12 02 FB | 	rdlong	arg01, fp
28e38     04 4E 85 F1 | 	sub	fp, #4
28e3c     00 14 06 F6 | 	mov	arg02, #0
28e40     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
28e44     0C 4E 05 F1 | 	add	fp, #12
28e48     A7 FA 61 FC | 	wrlong	result1, fp
28e4c     0C 4E 85 F1 | 	sub	fp, #12
28e50                 | LR__4183
28e50                 | LR__4184
28e50     0C 4E 05 F1 | 	add	fp, #12
28e54     A7 1E 02 FB | 	rdlong	local01, fp
28e58     0C 4E 85 F1 | 	sub	fp, #12
28e5c     04 1E 0E F2 | 	cmp	local01, #4 wz
28e60     0C 4E 05 A1 |  if_e	add	fp, #12
28e64     A7 0A 68 AC |  if_e	wrlong	#5, fp
28e68     0C 4E 85 A1 |  if_e	sub	fp, #12
28e6c                 | LR__4185
28e6c     0C 4E 05 F1 | 	add	fp, #12
28e70     A7 1E 0A FB | 	rdlong	local01, fp wz
28e74     0C 4E 85 F1 | 	sub	fp, #12
28e78     04 4E 05 51 |  if_ne	add	fp, #4
28e7c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
28e80     04 4E 85 51 |  if_ne	sub	fp, #4
28e84     0F 01 68 5C |  if_ne	wrlong	#0, local01
28e88                 | ' 
28e88                 | ' 	return res ;
28e88     0C 4E 05 F1 | 	add	fp, #12
28e8c     A7 FA 01 FB | 	rdlong	result1, fp
28e90     0C 4E 85 F1 | 	sub	fp, #12
28e94                 | LR__4186
28e94     A7 F0 03 F6 | 	mov	ptra, fp
28e98     B2 00 A0 FD | 	call	#popregs_
28e9c                 | _fatfs_cc_f_opendir_ret
28e9c     2D 00 64 FD | 	ret
28ea0                 | 
28ea0                 | _fatfs_cc_f_closedir
28ea0     00 4A 05 F6 | 	mov	COUNT_, #0
28ea4     A8 00 A0 FD | 	call	#pushregs_
28ea8     10 F0 07 F1 | 	add	ptra, #16
28eac     04 4E 05 F1 | 	add	fp, #4
28eb0     A7 12 62 FC | 	wrlong	arg01, fp
28eb4     08 4E 05 F1 | 	add	fp, #8
28eb8     A7 14 02 F6 | 	mov	arg02, fp
28ebc     0C 4E 85 F1 | 	sub	fp, #12
28ec0     C0 DD BF FD | 	call	#_fatfs_cc_validate
28ec4     08 4E 05 F1 | 	add	fp, #8
28ec8     A7 FA 61 FC | 	wrlong	result1, fp
28ecc     08 4E 85 F1 | 	sub	fp, #8
28ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
28ed4     04 4E 05 A1 |  if_e	add	fp, #4
28ed8     A7 FA 01 AB |  if_e	rdlong	result1, fp
28edc     04 4E 85 A1 |  if_e	sub	fp, #4
28ee0     FD 00 68 AC |  if_e	wrlong	#0, result1
28ee4                 | ' 
28ee4                 | ' 
28ee4                 | ' 
28ee4                 | ' 
28ee4                 | ' 		dp->obj.fs = 0;
28ee4                 | ' #line 4633 "ff.c"
28ee4                 | ' 	}
28ee4                 | ' 	return res;
28ee4     08 4E 05 F1 | 	add	fp, #8
28ee8     A7 FA 01 FB | 	rdlong	result1, fp
28eec     08 4E 85 F1 | 	sub	fp, #8
28ef0     A7 F0 03 F6 | 	mov	ptra, fp
28ef4     B2 00 A0 FD | 	call	#popregs_
28ef8                 | _fatfs_cc_f_closedir_ret
28ef8     2D 00 64 FD | 	ret
28efc                 | 
28efc                 | _fatfs_cc_f_readdir
28efc     00 4A 05 F6 | 	mov	COUNT_, #0
28f00     A8 00 A0 FD | 	call	#pushregs_
28f04     14 F0 07 F1 | 	add	ptra, #20
28f08     04 4E 05 F1 | 	add	fp, #4
28f0c     A7 12 62 FC | 	wrlong	arg01, fp
28f10     04 4E 05 F1 | 	add	fp, #4
28f14     A7 14 62 FC | 	wrlong	arg02, fp
28f18     04 4E 85 F1 | 	sub	fp, #4
28f1c     A7 12 02 FB | 	rdlong	arg01, fp
28f20     0C 4E 05 F1 | 	add	fp, #12
28f24     A7 14 02 F6 | 	mov	arg02, fp
28f28     10 4E 85 F1 | 	sub	fp, #16
28f2c     54 DD BF FD | 	call	#_fatfs_cc_validate
28f30     0C 4E 05 F1 | 	add	fp, #12
28f34     A7 FA 61 FC | 	wrlong	result1, fp
28f38     0C 4E 85 F1 | 	sub	fp, #12
28f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
28f40     BC 00 90 5D |  if_ne	jmp	#LR__4193
28f44     08 4E 05 F1 | 	add	fp, #8
28f48     A7 FA 09 FB | 	rdlong	result1, fp wz
28f4c     08 4E 85 F1 | 	sub	fp, #8
28f50     24 00 90 5D |  if_ne	jmp	#LR__4190
28f54     04 4E 05 F1 | 	add	fp, #4
28f58     A7 12 02 FB | 	rdlong	arg01, fp
28f5c     04 4E 85 F1 | 	sub	fp, #4
28f60     00 14 06 F6 | 	mov	arg02, #0
28f64     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
28f68     0C 4E 05 F1 | 	add	fp, #12
28f6c     A7 FA 61 FC | 	wrlong	result1, fp
28f70     0C 4E 85 F1 | 	sub	fp, #12
28f74     88 00 90 FD | 	jmp	#LR__4192
28f78                 | LR__4190
28f78     04 4E 05 F1 | 	add	fp, #4
28f7c     A7 12 02 FB | 	rdlong	arg01, fp
28f80     04 4E 85 F1 | 	sub	fp, #4
28f84     00 14 06 F6 | 	mov	arg02, #0
28f88     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
28f8c     0C 4E 05 F1 | 	add	fp, #12
28f90     A7 FA 61 FC | 	wrlong	result1, fp
28f94     0C 4E 85 F1 | 	sub	fp, #12
28f98     04 FA 0D F2 | 	cmp	result1, #4 wz
28f9c     0C 4E 05 A1 |  if_e	add	fp, #12
28fa0     A7 00 68 AC |  if_e	wrlong	#0, fp
28fa4     0C 4E 85 A1 |  if_e	sub	fp, #12
28fa8     0C 4E 05 F1 | 	add	fp, #12
28fac     A7 FA 09 FB | 	rdlong	result1, fp wz
28fb0     0C 4E 85 F1 | 	sub	fp, #12
28fb4     48 00 90 5D |  if_ne	jmp	#LR__4191
28fb8     04 4E 05 F1 | 	add	fp, #4
28fbc     A7 12 02 FB | 	rdlong	arg01, fp
28fc0     04 4E 05 F1 | 	add	fp, #4
28fc4     A7 14 02 FB | 	rdlong	arg02, fp
28fc8     08 4E 85 F1 | 	sub	fp, #8
28fcc     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
28fd0     04 4E 05 F1 | 	add	fp, #4
28fd4     A7 12 02 FB | 	rdlong	arg01, fp
28fd8     04 4E 85 F1 | 	sub	fp, #4
28fdc     00 14 06 F6 | 	mov	arg02, #0
28fe0     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
28fe4     0C 4E 05 F1 | 	add	fp, #12
28fe8     A7 FA 61 FC | 	wrlong	result1, fp
28fec     0C 4E 85 F1 | 	sub	fp, #12
28ff0     04 FA 0D F2 | 	cmp	result1, #4 wz
28ff4     0C 4E 05 A1 |  if_e	add	fp, #12
28ff8     A7 00 68 AC |  if_e	wrlong	#0, fp
28ffc     0C 4E 85 A1 |  if_e	sub	fp, #12
29000                 | LR__4191
29000                 | LR__4192
29000                 | LR__4193
29000                 | ' 			}
29000                 | ' 			;
29000                 | ' 		}
29000                 | ' 	}
29000                 | ' 	return res ;
29000     0C 4E 05 F1 | 	add	fp, #12
29004     A7 FA 01 FB | 	rdlong	result1, fp
29008     0C 4E 85 F1 | 	sub	fp, #12
2900c     A7 F0 03 F6 | 	mov	ptra, fp
29010     B2 00 A0 FD | 	call	#popregs_
29014                 | _fatfs_cc_f_readdir_ret
29014     2D 00 64 FD | 	ret
29018                 | 
29018                 | _fatfs_cc_f_stat
29018     00 4A 05 F6 | 	mov	COUNT_, #0
2901c     A8 00 A0 FD | 	call	#pushregs_
29020     40 F0 07 F1 | 	add	ptra, #64
29024     04 4E 05 F1 | 	add	fp, #4
29028     A7 12 62 FC | 	wrlong	arg01, fp
2902c     04 4E 05 F1 | 	add	fp, #4
29030     A7 14 62 FC | 	wrlong	arg02, fp
29034     04 4E 85 F1 | 	sub	fp, #4
29038     A7 12 02 F6 | 	mov	arg01, fp
2903c     0C 4E 05 F1 | 	add	fp, #12
29040     A7 14 02 F6 | 	mov	arg02, fp
29044     10 4E 85 F1 | 	sub	fp, #16
29048     00 16 06 F6 | 	mov	arg03, #0
2904c     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
29050     0C 4E 05 F1 | 	add	fp, #12
29054     A7 FA 61 FC | 	wrlong	result1, fp
29058     0C 4E 85 F1 | 	sub	fp, #12
2905c     00 FA 0D F2 | 	cmp	result1, #0 wz
29060     74 00 90 5D |  if_ne	jmp	#LR__4203
29064     10 4E 05 F1 | 	add	fp, #16
29068     A7 12 02 F6 | 	mov	arg01, fp
2906c     0C 4E 85 F1 | 	sub	fp, #12
29070     A7 14 02 FB | 	rdlong	arg02, fp
29074     04 4E 85 F1 | 	sub	fp, #4
29078     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2907c     0C 4E 05 F1 | 	add	fp, #12
29080     A7 FA 61 FC | 	wrlong	result1, fp
29084     0C 4E 85 F1 | 	sub	fp, #12
29088     00 FA 0D F2 | 	cmp	result1, #0 wz
2908c     48 00 90 5D |  if_ne	jmp	#LR__4202
29090     3B 4E 05 F1 | 	add	fp, #59
29094     A7 FA C1 FA | 	rdbyte	result1, fp
29098     3B 4E 85 F1 | 	sub	fp, #59
2909c     80 FA CD F7 | 	test	result1, #128 wz
290a0     0C 4E 05 51 |  if_ne	add	fp, #12
290a4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
290a8     0C 4E 85 51 |  if_ne	sub	fp, #12
290ac     28 00 90 5D |  if_ne	jmp	#LR__4201
290b0     08 4E 05 F1 | 	add	fp, #8
290b4     A7 FA 09 FB | 	rdlong	result1, fp wz
290b8     08 4E 85 F1 | 	sub	fp, #8
290bc     18 00 90 AD |  if_e	jmp	#LR__4200
290c0     10 4E 05 F1 | 	add	fp, #16
290c4     A7 12 02 F6 | 	mov	arg01, fp
290c8     08 4E 85 F1 | 	sub	fp, #8
290cc     A7 14 02 FB | 	rdlong	arg02, fp
290d0     08 4E 85 F1 | 	sub	fp, #8
290d4     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
290d8                 | LR__4200
290d8                 | LR__4201
290d8                 | LR__4202
290d8                 | LR__4203
290d8                 | ' 			}
290d8                 | ' 		}
290d8                 | ' 		;
290d8                 | ' 	}
290d8                 | ' 
290d8                 | ' 	return res ;
290d8     0C 4E 05 F1 | 	add	fp, #12
290dc     A7 FA 01 FB | 	rdlong	result1, fp
290e0     0C 4E 85 F1 | 	sub	fp, #12
290e4     A7 F0 03 F6 | 	mov	ptra, fp
290e8     B2 00 A0 FD | 	call	#popregs_
290ec                 | _fatfs_cc_f_stat_ret
290ec     2D 00 64 FD | 	ret
290f0                 | 
290f0                 | _fatfs_cc_f_unlink
290f0     00 4A 05 F6 | 	mov	COUNT_, #0
290f4     A8 00 A0 FD | 	call	#pushregs_
290f8     74 F0 07 F1 | 	add	ptra, #116
290fc     04 4E 05 F1 | 	add	fp, #4
29100     A7 12 62 FC | 	wrlong	arg01, fp
29104     68 4E 05 F1 | 	add	fp, #104
29108     A7 00 68 FC | 	wrlong	#0, fp
2910c     68 4E 85 F1 | 	sub	fp, #104
29110     A7 12 02 F6 | 	mov	arg01, fp
29114     6C 4E 05 F1 | 	add	fp, #108
29118     A7 14 02 F6 | 	mov	arg02, fp
2911c     70 4E 85 F1 | 	sub	fp, #112
29120     02 16 06 F6 | 	mov	arg03, #2
29124     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
29128     08 4E 05 F1 | 	add	fp, #8
2912c     A7 FA 61 FC | 	wrlong	result1, fp
29130     08 4E 85 F1 | 	sub	fp, #8
29134     00 FA 0D F2 | 	cmp	result1, #0 wz
29138     E4 01 90 5D |  if_ne	jmp	#LR__4218
2913c     70 4E 05 F1 | 	add	fp, #112
29140     A7 16 02 FB | 	rdlong	arg03, fp
29144     64 4E 85 F1 | 	sub	fp, #100
29148     A7 16 62 FC | 	wrlong	arg03, fp
2914c     A7 12 02 F6 | 	mov	arg01, fp
29150     08 4E 85 F1 | 	sub	fp, #8
29154     A7 14 02 FB | 	rdlong	arg02, fp
29158     04 4E 85 F1 | 	sub	fp, #4
2915c     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
29160     08 4E 05 F1 | 	add	fp, #8
29164     A7 FA 61 FC | 	wrlong	result1, fp
29168     00 FA 4D F2 | 	cmps	result1, #0 wz
2916c     08 4E 85 F1 | 	sub	fp, #8
29170     AC 01 90 5D |  if_ne	jmp	#LR__4217
29174     37 4E 05 F1 | 	add	fp, #55
29178     A7 FA C1 FA | 	rdbyte	result1, fp
2917c     37 4E 85 F1 | 	sub	fp, #55
29180     80 FA CD F7 | 	test	result1, #128 wz
29184     08 4E 05 51 |  if_ne	add	fp, #8
29188     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2918c     08 4E 85 51 |  if_ne	sub	fp, #8
29190     1C 00 90 5D |  if_ne	jmp	#LR__4210
29194     12 4E 05 F1 | 	add	fp, #18
29198     A7 FA C1 FA | 	rdbyte	result1, fp
2919c     12 4E 85 F1 | 	sub	fp, #18
291a0     01 FA CD F7 | 	test	result1, #1 wz
291a4     08 4E 05 51 |  if_ne	add	fp, #8
291a8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
291ac     08 4E 85 51 |  if_ne	sub	fp, #8
291b0                 | LR__4210
291b0     08 4E 05 F1 | 	add	fp, #8
291b4     A7 FA 09 FB | 	rdlong	result1, fp wz
291b8     08 4E 85 F1 | 	sub	fp, #8
291bc     C8 00 90 5D |  if_ne	jmp	#LR__4213
291c0     70 4E 05 F1 | 	add	fp, #112
291c4     A7 12 02 FB | 	rdlong	arg01, fp
291c8     48 4E 85 F1 | 	sub	fp, #72
291cc     A7 14 02 FB | 	rdlong	arg02, fp
291d0     28 4E 85 F1 | 	sub	fp, #40
291d4     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
291d8     6C 4E 05 F1 | 	add	fp, #108
291dc     A7 FA 61 FC | 	wrlong	result1, fp
291e0     5A 4E 85 F1 | 	sub	fp, #90
291e4     A7 FA C1 FA | 	rdbyte	result1, fp
291e8     12 4E 85 F1 | 	sub	fp, #18
291ec     10 FA CD F7 | 	test	result1, #16 wz
291f0     94 00 90 AD |  if_e	jmp	#LR__4212
291f4     70 4E 05 F1 | 	add	fp, #112
291f8     A7 FA 01 FB | 	rdlong	result1, fp
291fc     34 4E 85 F1 | 	sub	fp, #52
29200     A7 FA 61 FC | 	wrlong	result1, fp
29204     30 4E 05 F1 | 	add	fp, #48
29208     A7 16 02 FB | 	rdlong	arg03, fp
2920c     28 4E 85 F1 | 	sub	fp, #40
29210     A7 16 62 FC | 	wrlong	arg03, fp
29214     08 4E 85 F1 | 	sub	fp, #8
29218     A7 12 02 F6 | 	mov	arg01, fp
2921c     3C 4E 85 F1 | 	sub	fp, #60
29220     00 14 06 F6 | 	mov	arg02, #0
29224     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
29228     08 4E 05 F1 | 	add	fp, #8
2922c     A7 FA 61 FC | 	wrlong	result1, fp
29230     08 4E 85 F1 | 	sub	fp, #8
29234     00 FA 0D F2 | 	cmp	result1, #0 wz
29238     4C 00 90 5D |  if_ne	jmp	#LR__4211
2923c     3C 4E 05 F1 | 	add	fp, #60
29240     A7 12 02 F6 | 	mov	arg01, fp
29244     3C 4E 85 F1 | 	sub	fp, #60
29248     00 14 06 F6 | 	mov	arg02, #0
2924c     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
29250     08 4E 05 F1 | 	add	fp, #8
29254     A7 FA 61 FC | 	wrlong	result1, fp
29258     00 FA 4D F2 | 	cmps	result1, #0 wz
2925c     08 4E 85 F1 | 	sub	fp, #8
29260     08 4E 05 A1 |  if_e	add	fp, #8
29264     A7 0E 68 AC |  if_e	wrlong	#7, fp
29268     08 4E 85 A1 |  if_e	sub	fp, #8
2926c     08 4E 05 F1 | 	add	fp, #8
29270     A7 FA 01 FB | 	rdlong	result1, fp
29274     08 4E 85 F1 | 	sub	fp, #8
29278     04 FA 0D F2 | 	cmp	result1, #4 wz
2927c     08 4E 05 A1 |  if_e	add	fp, #8
29280     A7 00 68 AC |  if_e	wrlong	#0, fp
29284     08 4E 85 A1 |  if_e	sub	fp, #8
29288                 | LR__4211
29288                 | LR__4212
29288                 | LR__4213
29288     08 4E 05 F1 | 	add	fp, #8
2928c     A7 FA 09 FB | 	rdlong	result1, fp wz
29290     08 4E 85 F1 | 	sub	fp, #8
29294     88 00 90 5D |  if_ne	jmp	#LR__4216
29298     0C 4E 05 F1 | 	add	fp, #12
2929c     A7 12 02 F6 | 	mov	arg01, fp
292a0     0C 4E 85 F1 | 	sub	fp, #12
292a4     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
292a8     08 4E 05 F1 | 	add	fp, #8
292ac     A7 FA 61 FC | 	wrlong	result1, fp
292b0     08 4E 85 F1 | 	sub	fp, #8
292b4     00 FA 0D F2 | 	cmp	result1, #0 wz
292b8     38 00 90 5D |  if_ne	jmp	#LR__4214
292bc     6C 4E 05 F1 | 	add	fp, #108
292c0     A7 FA 09 FB | 	rdlong	result1, fp wz
292c4     6C 4E 85 F1 | 	sub	fp, #108
292c8     28 00 90 AD |  if_e	jmp	#LR__4214
292cc     0C 4E 05 F1 | 	add	fp, #12
292d0     A7 12 02 F6 | 	mov	arg01, fp
292d4     60 4E 05 F1 | 	add	fp, #96
292d8     A7 14 02 FB | 	rdlong	arg02, fp
292dc     6C 4E 85 F1 | 	sub	fp, #108
292e0     00 16 06 F6 | 	mov	arg03, #0
292e4     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
292e8     08 4E 05 F1 | 	add	fp, #8
292ec     A7 FA 61 FC | 	wrlong	result1, fp
292f0     08 4E 85 F1 | 	sub	fp, #8
292f4                 | LR__4214
292f4     08 4E 05 F1 | 	add	fp, #8
292f8     A7 FA 09 FB | 	rdlong	result1, fp wz
292fc     08 4E 85 F1 | 	sub	fp, #8
29300     1C 00 90 5D |  if_ne	jmp	#LR__4215
29304     70 4E 05 F1 | 	add	fp, #112
29308     A7 12 02 FB | 	rdlong	arg01, fp
2930c     70 4E 85 F1 | 	sub	fp, #112
29310     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
29314     08 4E 05 F1 | 	add	fp, #8
29318     A7 FA 61 FC | 	wrlong	result1, fp
2931c     08 4E 85 F1 | 	sub	fp, #8
29320                 | LR__4215
29320                 | LR__4216
29320                 | LR__4217
29320                 | LR__4218
29320                 | ' 			}
29320                 | ' 		}
29320                 | ' 		;
29320                 | ' 	}
29320                 | ' 
29320                 | ' 	return res ;
29320     08 4E 05 F1 | 	add	fp, #8
29324     A7 FA 01 FB | 	rdlong	result1, fp
29328     08 4E 85 F1 | 	sub	fp, #8
2932c     A7 F0 03 F6 | 	mov	ptra, fp
29330     B2 00 A0 FD | 	call	#popregs_
29334                 | _fatfs_cc_f_unlink_ret
29334     2D 00 64 FD | 	ret
29338                 | 
29338                 | _fatfs_cc_f_mkdir
29338     00 4A 05 F6 | 	mov	COUNT_, #0
2933c     A8 00 A0 FD | 	call	#pushregs_
29340     5C F0 07 F1 | 	add	ptra, #92
29344     04 4E 05 F1 | 	add	fp, #4
29348     A7 12 62 FC | 	wrlong	arg01, fp
2934c     A7 12 02 F6 | 	mov	arg01, fp
29350     48 4E 05 F1 | 	add	fp, #72
29354     A7 14 02 F6 | 	mov	arg02, fp
29358     4C 4E 85 F1 | 	sub	fp, #76
2935c     02 16 06 F6 | 	mov	arg03, #2
29360     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
29364     08 4E 05 F1 | 	add	fp, #8
29368     A7 FA 61 FC | 	wrlong	result1, fp
2936c     08 4E 85 F1 | 	sub	fp, #8
29370     00 FA 0D F2 | 	cmp	result1, #0 wz
29374     C4 02 90 5D |  if_ne	jmp	#LR__4225
29378     4C 4E 05 F1 | 	add	fp, #76
2937c     A7 16 02 FB | 	rdlong	arg03, fp
29380     40 4E 85 F1 | 	sub	fp, #64
29384     A7 16 62 FC | 	wrlong	arg03, fp
29388     A7 12 02 F6 | 	mov	arg01, fp
2938c     08 4E 85 F1 | 	sub	fp, #8
29390     A7 14 02 FB | 	rdlong	arg02, fp
29394     04 4E 85 F1 | 	sub	fp, #4
29398     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2939c     08 4E 05 F1 | 	add	fp, #8
293a0     A7 FA 61 FC | 	wrlong	result1, fp
293a4     00 FA 4D F2 | 	cmps	result1, #0 wz
293a8     08 4E 85 F1 | 	sub	fp, #8
293ac     08 4E 05 A1 |  if_e	add	fp, #8
293b0     A7 10 68 AC |  if_e	wrlong	#8, fp
293b4     08 4E 85 A1 |  if_e	sub	fp, #8
293b8     08 4E 05 F1 | 	add	fp, #8
293bc     A7 FA 01 FB | 	rdlong	result1, fp
293c0     08 4E 85 F1 | 	sub	fp, #8
293c4     04 FA 0D F2 | 	cmp	result1, #4 wz
293c8     70 02 90 5D |  if_ne	jmp	#LR__4224
293cc     4C 4E 05 F1 | 	add	fp, #76
293d0     A7 16 02 FB | 	rdlong	arg03, fp
293d4     10 4E 85 F1 | 	sub	fp, #16
293d8     A7 16 62 FC | 	wrlong	arg03, fp
293dc     A7 12 02 F6 | 	mov	arg01, fp
293e0     3C 4E 85 F1 | 	sub	fp, #60
293e4     00 14 06 F6 | 	mov	arg02, #0
293e8     04 AC BF FD | 	call	#_fatfs_cc_create_chain
293ec     50 4E 05 F1 | 	add	fp, #80
293f0     A7 FA 61 FC | 	wrlong	result1, fp
293f4     48 4E 85 F1 | 	sub	fp, #72
293f8     A7 00 68 FC | 	wrlong	#0, fp
293fc     48 4E 05 F1 | 	add	fp, #72
29400     A7 FA 09 FB | 	rdlong	result1, fp wz
29404     50 4E 85 F1 | 	sub	fp, #80
29408     08 4E 05 A1 |  if_e	add	fp, #8
2940c     A7 0E 68 AC |  if_e	wrlong	#7, fp
29410     08 4E 85 A1 |  if_e	sub	fp, #8
29414     50 4E 05 F1 | 	add	fp, #80
29418     A7 FA 01 FB | 	rdlong	result1, fp
2941c     50 4E 85 F1 | 	sub	fp, #80
29420     01 FA 0D F2 | 	cmp	result1, #1 wz
29424     08 4E 05 A1 |  if_e	add	fp, #8
29428     A7 04 68 AC |  if_e	wrlong	#2, fp
2942c     08 4E 85 A1 |  if_e	sub	fp, #8
29430     50 4E 05 F1 | 	add	fp, #80
29434     A7 16 02 FB | 	rdlong	arg03, fp
29438     50 4E 85 F1 | 	sub	fp, #80
2943c     FF FF 7F FF 
29440     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
29444     08 4E 05 A1 |  if_e	add	fp, #8
29448     A7 02 68 AC |  if_e	wrlong	#1, fp
2944c     08 4E 85 A1 |  if_e	sub	fp, #8
29450     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
29454     58 4E 05 F1 | 	add	fp, #88
29458     A7 FA 61 FC | 	wrlong	result1, fp
2945c     50 4E 85 F1 | 	sub	fp, #80
29460     A7 FA 09 FB | 	rdlong	result1, fp wz
29464     08 4E 85 F1 | 	sub	fp, #8
29468     1C 01 90 5D |  if_ne	jmp	#LR__4221
2946c     4C 4E 05 F1 | 	add	fp, #76
29470     A7 12 02 FB | 	rdlong	arg01, fp
29474     04 4E 05 F1 | 	add	fp, #4
29478     A7 14 02 FB | 	rdlong	arg02, fp
2947c     50 4E 85 F1 | 	sub	fp, #80
29480     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
29484     08 4E 05 F1 | 	add	fp, #8
29488     A7 FA 61 FC | 	wrlong	result1, fp
2948c     00 FA 4D F2 | 	cmps	result1, #0 wz
29490     08 4E 85 F1 | 	sub	fp, #8
29494     F0 00 90 5D |  if_ne	jmp	#LR__4220
29498     4C 4E 05 F1 | 	add	fp, #76
2949c     A7 12 02 FB | 	rdlong	arg01, fp
294a0     4C 4E 85 F1 | 	sub	fp, #76
294a4     34 12 06 F1 | 	add	arg01, #52
294a8     20 14 06 F6 | 	mov	arg02, #32
294ac     0B 16 06 F6 | 	mov	arg03, #11
294b0     98 00 A0 FD | 	call	#\builtin_bytefill_
294b4     4C 4E 05 F1 | 	add	fp, #76
294b8     A7 FA 01 FB | 	rdlong	result1, fp
294bc     34 FA 05 F1 | 	add	result1, #52
294c0     FD 5C 48 FC | 	wrbyte	#46, result1
294c4     A7 16 02 FB | 	rdlong	arg03, fp
294c8     3F 16 06 F1 | 	add	arg03, #63
294cc     0B 21 48 FC | 	wrbyte	#16, arg03
294d0     A7 12 02 FB | 	rdlong	arg01, fp
294d4     4A 12 06 F1 | 	add	arg01, #74
294d8     0C 4E 05 F1 | 	add	fp, #12
294dc     A7 14 02 FB | 	rdlong	arg02, fp
294e0     09 15 62 FC | 	wrlong	arg02, arg01
294e4     0C 4E 85 F1 | 	sub	fp, #12
294e8     A7 14 02 FB | 	rdlong	arg02, fp
294ec     0A 13 02 F6 | 	mov	arg01, arg02
294f0     34 14 06 F1 | 	add	arg02, #52
294f4     04 4E 05 F1 | 	add	fp, #4
294f8     A7 16 02 FB | 	rdlong	arg03, fp
294fc     50 4E 85 F1 | 	sub	fp, #80
29500     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
29504     4C 4E 05 F1 | 	add	fp, #76
29508     A7 14 02 FB | 	rdlong	arg02, fp
2950c     0A 13 02 F6 | 	mov	arg01, arg02
29510     54 12 06 F1 | 	add	arg01, #84
29514     4C 4E 85 F1 | 	sub	fp, #76
29518     34 14 06 F1 | 	add	arg02, #52
2951c     20 16 06 F6 | 	mov	arg03, #32
29520     D8 2C BF FD | 	call	#__system____builtin_memmove
29524     4C 4E 05 F1 | 	add	fp, #76
29528     A7 16 02 FB | 	rdlong	arg03, fp
2952c     55 16 06 F1 | 	add	arg03, #85
29530     0B 5D 48 FC | 	wrbyte	#46, arg03
29534     38 4E 85 F1 | 	sub	fp, #56
29538     A7 16 02 FB | 	rdlong	arg03, fp
2953c     40 4E 05 F1 | 	add	fp, #64
29540     A7 16 62 FC | 	wrlong	arg03, fp
29544     08 4E 85 F1 | 	sub	fp, #8
29548     A7 14 02 FB | 	rdlong	arg02, fp
2954c     0A 13 02 F6 | 	mov	arg01, arg02
29550     54 14 06 F1 | 	add	arg02, #84
29554     4C 4E 85 F1 | 	sub	fp, #76
29558     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2955c     4C 4E 05 F1 | 	add	fp, #76
29560     A7 16 02 FB | 	rdlong	arg03, fp
29564     03 16 06 F1 | 	add	arg03, #3
29568     0B 03 48 FC | 	wrbyte	#1, arg03
2956c     40 4E 85 F1 | 	sub	fp, #64
29570     A7 12 02 F6 | 	mov	arg01, fp
29574     0C 4E 85 F1 | 	sub	fp, #12
29578     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2957c     08 4E 05 F1 | 	add	fp, #8
29580     A7 FA 61 FC | 	wrlong	result1, fp
29584     08 4E 85 F1 | 	sub	fp, #8
29588                 | LR__4220
29588                 | LR__4221
29588     08 4E 05 F1 | 	add	fp, #8
2958c     A7 FA 09 FB | 	rdlong	result1, fp wz
29590     08 4E 85 F1 | 	sub	fp, #8
29594     88 00 90 5D |  if_ne	jmp	#LR__4222
29598     28 4E 05 F1 | 	add	fp, #40
2959c     A7 12 02 FB | 	rdlong	arg01, fp
295a0     16 12 06 F1 | 	add	arg01, #22
295a4     30 4E 05 F1 | 	add	fp, #48
295a8     A7 14 02 FB | 	rdlong	arg02, fp
295ac     09 15 62 FC | 	wrlong	arg02, arg01
295b0     0C 4E 85 F1 | 	sub	fp, #12
295b4     A7 12 02 FB | 	rdlong	arg01, fp
295b8     24 4E 85 F1 | 	sub	fp, #36
295bc     A7 14 02 FB | 	rdlong	arg02, fp
295c0     28 4E 05 F1 | 	add	fp, #40
295c4     A7 16 02 FB | 	rdlong	arg03, fp
295c8     50 4E 85 F1 | 	sub	fp, #80
295cc     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
295d0     28 4E 05 F1 | 	add	fp, #40
295d4     A7 FA 01 FB | 	rdlong	result1, fp
295d8     0B FA 05 F1 | 	add	result1, #11
295dc     FD 20 48 FC | 	wrbyte	#16, result1
295e0     24 4E 05 F1 | 	add	fp, #36
295e4     A7 FA 01 FB | 	rdlong	result1, fp
295e8     03 FA 05 F1 | 	add	result1, #3
295ec     FD 02 48 FC | 	wrbyte	#1, result1
295f0     44 4E 85 F1 | 	sub	fp, #68
295f4     A7 FA 09 FB | 	rdlong	result1, fp wz
295f8     08 4E 85 F1 | 	sub	fp, #8
295fc     3C 00 90 5D |  if_ne	jmp	#LR__4223
29600     4C 4E 05 F1 | 	add	fp, #76
29604     A7 12 02 FB | 	rdlong	arg01, fp
29608     4C 4E 85 F1 | 	sub	fp, #76
2960c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
29610     08 4E 05 F1 | 	add	fp, #8
29614     A7 FA 61 FC | 	wrlong	result1, fp
29618     08 4E 85 F1 | 	sub	fp, #8
2961c     1C 00 90 FD | 	jmp	#LR__4223
29620                 | LR__4222
29620     3C 4E 05 F1 | 	add	fp, #60
29624     A7 12 02 F6 | 	mov	arg01, fp
29628     14 4E 05 F1 | 	add	fp, #20
2962c     A7 14 02 FB | 	rdlong	arg02, fp
29630     50 4E 85 F1 | 	sub	fp, #80
29634     00 16 06 F6 | 	mov	arg03, #0
29638     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2963c                 | LR__4223
2963c                 | LR__4224
2963c                 | LR__4225
2963c                 | ' 				remove_chain(&sobj, dcl, 0);
2963c                 | ' 			}
2963c                 | ' 		}
2963c                 | ' 		;
2963c                 | ' 	}
2963c                 | ' 
2963c                 | ' 	return res ;
2963c     08 4E 05 F1 | 	add	fp, #8
29640     A7 FA 01 FB | 	rdlong	result1, fp
29644     08 4E 85 F1 | 	sub	fp, #8
29648     A7 F0 03 F6 | 	mov	ptra, fp
2964c     B2 00 A0 FD | 	call	#popregs_
29650                 | _fatfs_cc_f_mkdir_ret
29650     2D 00 64 FD | 	ret
29654                 | 
29654                 | _fatfs_cc_f_rename
29654     01 4A 05 F6 | 	mov	COUNT_, #1
29658     A8 00 A0 FD | 	call	#pushregs_
2965c     9C F0 07 F1 | 	add	ptra, #156
29660     04 4E 05 F1 | 	add	fp, #4
29664     A7 12 62 FC | 	wrlong	arg01, fp
29668     04 4E 05 F1 | 	add	fp, #4
2966c     A7 14 62 FC | 	wrlong	arg02, fp
29670     A7 12 02 F6 | 	mov	arg01, fp
29674     08 4E 85 F1 | 	sub	fp, #8
29678     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2967c     04 4E 05 F1 | 	add	fp, #4
29680     A7 12 02 F6 | 	mov	arg01, fp
29684     6C 4E 05 F1 | 	add	fp, #108
29688     A7 14 02 F6 | 	mov	arg02, fp
2968c     70 4E 85 F1 | 	sub	fp, #112
29690     02 16 06 F6 | 	mov	arg03, #2
29694     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
29698     0C 4E 05 F1 | 	add	fp, #12
2969c     A7 FA 61 FC | 	wrlong	result1, fp
296a0     0C 4E 85 F1 | 	sub	fp, #12
296a4     00 FA 0D F2 | 	cmp	result1, #0 wz
296a8     44 03 90 5D |  if_ne	jmp	#LR__4243
296ac     70 4E 05 F1 | 	add	fp, #112
296b0     A7 16 02 FB | 	rdlong	arg03, fp
296b4     60 4E 85 F1 | 	sub	fp, #96
296b8     A7 16 62 FC | 	wrlong	arg03, fp
296bc     A7 12 02 F6 | 	mov	arg01, fp
296c0     0C 4E 85 F1 | 	sub	fp, #12
296c4     A7 14 02 FB | 	rdlong	arg02, fp
296c8     04 4E 85 F1 | 	sub	fp, #4
296cc     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
296d0     0C 4E 05 F1 | 	add	fp, #12
296d4     A7 FA 61 FC | 	wrlong	result1, fp
296d8     00 FA 4D F2 | 	cmps	result1, #0 wz
296dc     0C 4E 85 F1 | 	sub	fp, #12
296e0     1C 00 90 5D |  if_ne	jmp	#LR__4230
296e4     3B 4E 05 F1 | 	add	fp, #59
296e8     A7 FA C1 FA | 	rdbyte	result1, fp
296ec     3B 4E 85 F1 | 	sub	fp, #59
296f0     A0 FA CD F7 | 	test	result1, #160 wz
296f4     0C 4E 05 51 |  if_ne	add	fp, #12
296f8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
296fc     0C 4E 85 51 |  if_ne	sub	fp, #12
29700                 | LR__4230
29700     0C 4E 05 F1 | 	add	fp, #12
29704     A7 1E 0A FB | 	rdlong	local01, fp wz
29708     0C 4E 85 F1 | 	sub	fp, #12
2970c     E0 02 90 5D |  if_ne	jmp	#LR__4242
29710     74 4E 05 F1 | 	add	fp, #116
29714     A7 12 02 F6 | 	mov	arg01, fp
29718     48 4E 85 F1 | 	sub	fp, #72
2971c     A7 14 02 FB | 	rdlong	arg02, fp
29720     2C 4E 85 F1 | 	sub	fp, #44
29724     20 16 06 F6 | 	mov	arg03, #32
29728     D0 2A BF FD | 	call	#__system____builtin_memmove
2972c     40 4E 05 F1 | 	add	fp, #64
29730     A7 12 02 F6 | 	mov	arg01, fp
29734     30 4E 85 F1 | 	sub	fp, #48
29738     A7 14 02 F6 | 	mov	arg02, fp
2973c     10 4E 85 F1 | 	sub	fp, #16
29740     30 16 06 F6 | 	mov	arg03, #48
29744     B4 2A BF FD | 	call	#__system____builtin_memmove
29748     40 4E 05 F1 | 	add	fp, #64
2974c     A7 12 02 F6 | 	mov	arg01, fp
29750     38 4E 85 F1 | 	sub	fp, #56
29754     A7 14 02 FB | 	rdlong	arg02, fp
29758     08 4E 85 F1 | 	sub	fp, #8
2975c     34 CA BF FD | 	call	#_fatfs_cc_follow_path
29760     0C 4E 05 F1 | 	add	fp, #12
29764     A7 FA 61 FC | 	wrlong	result1, fp
29768     0C 4E 85 F1 | 	sub	fp, #12
2976c     00 FA 0D F2 | 	cmp	result1, #0 wz
29770     4C 00 90 5D |  if_ne	jmp	#LR__4233
29774     48 4E 05 F1 | 	add	fp, #72
29778     A7 FA 01 FB | 	rdlong	result1, fp
2977c     30 4E 85 F1 | 	sub	fp, #48
29780     A7 16 02 FB | 	rdlong	arg03, fp
29784     18 4E 85 F1 | 	sub	fp, #24
29788     0B FB 09 F2 | 	cmp	result1, arg03 wz
2978c     20 00 90 5D |  if_ne	jmp	#LR__4231
29790     50 4E 05 F1 | 	add	fp, #80
29794     A7 FA 01 FB | 	rdlong	result1, fp
29798     30 4E 85 F1 | 	sub	fp, #48
2979c     A7 16 02 FB | 	rdlong	arg03, fp
297a0     20 4E 85 F1 | 	sub	fp, #32
297a4     0B FB 09 F2 | 	cmp	result1, arg03 wz
297a8     04 1E 06 A6 |  if_e	mov	local01, #4
297ac     04 00 90 AD |  if_e	jmp	#LR__4232
297b0                 | LR__4231
297b0     08 1E 06 F6 | 	mov	local01, #8
297b4                 | LR__4232
297b4     0C 4E 05 F1 | 	add	fp, #12
297b8     A7 1E 62 FC | 	wrlong	local01, fp
297bc     0C 4E 85 F1 | 	sub	fp, #12
297c0                 | LR__4233
297c0     0C 4E 05 F1 | 	add	fp, #12
297c4     A7 1E 02 FB | 	rdlong	local01, fp
297c8     0C 4E 85 F1 | 	sub	fp, #12
297cc     04 1E 0E F2 | 	cmp	local01, #4 wz
297d0     CC 01 90 5D |  if_ne	jmp	#LR__4239
297d4     40 4E 05 F1 | 	add	fp, #64
297d8     A7 12 02 F6 | 	mov	arg01, fp
297dc     40 4E 85 F1 | 	sub	fp, #64
297e0     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
297e4     0C 4E 05 F1 | 	add	fp, #12
297e8     A7 FA 61 FC | 	wrlong	result1, fp
297ec     0C 4E 85 F1 | 	sub	fp, #12
297f0     00 FA 0D F2 | 	cmp	result1, #0 wz
297f4     A8 01 90 5D |  if_ne	jmp	#LR__4238
297f8     5C 4E 05 F1 | 	add	fp, #92
297fc     A7 12 02 FB | 	rdlong	arg01, fp
29800     38 4E 05 F1 | 	add	fp, #56
29804     A7 12 62 FC | 	wrlong	arg01, fp
29808     0D 12 06 F1 | 	add	arg01, #13
2980c     20 4E 85 F1 | 	sub	fp, #32
29810     A7 14 02 F6 | 	mov	arg02, fp
29814     74 4E 85 F1 | 	sub	fp, #116
29818     0D 14 06 F1 | 	add	arg02, #13
2981c     13 16 06 F6 | 	mov	arg03, #19
29820     D8 29 BF FD | 	call	#__system____builtin_memmove
29824     94 4E 05 F1 | 	add	fp, #148
29828     A7 1E 02 FB | 	rdlong	local01, fp
2982c     15 4E 85 F1 | 	sub	fp, #21
29830     A7 FA C1 FA | 	rdbyte	result1, fp
29834     0B 1E 06 F1 | 	add	local01, #11
29838     0F FB 41 FC | 	wrbyte	result1, local01
2983c     15 4E 05 F1 | 	add	fp, #21
29840     A7 1E 02 FB | 	rdlong	local01, fp
29844     94 4E 85 F1 | 	sub	fp, #148
29848     0B 1E 06 F1 | 	add	local01, #11
2984c     0F 1F C2 FA | 	rdbyte	local01, local01
29850     10 1E CE F7 | 	test	local01, #16 wz
29854     24 00 90 5D |  if_ne	jmp	#LR__4234
29858     94 4E 05 F1 | 	add	fp, #148
2985c     A7 FA 01 FB | 	rdlong	result1, fp
29860     FD 1E 02 F6 | 	mov	local01, result1
29864     94 4E 85 F1 | 	sub	fp, #148
29868     0B FA 05 F1 | 	add	result1, #11
2986c     FD FA C1 FA | 	rdbyte	result1, result1
29870     20 FA 45 F5 | 	or	result1, #32
29874     0B 1E 06 F1 | 	add	local01, #11
29878     0F FB 41 FC | 	wrbyte	result1, local01
2987c                 | LR__4234
2987c     70 4E 05 F1 | 	add	fp, #112
29880     A7 1E 02 FB | 	rdlong	local01, fp
29884     03 1E 06 F1 | 	add	local01, #3
29888     0F 03 48 FC | 	wrbyte	#1, local01
2988c     24 4E 05 F1 | 	add	fp, #36
29890     A7 1E 02 FB | 	rdlong	local01, fp
29894     94 4E 85 F1 | 	sub	fp, #148
29898     0B 1E 06 F1 | 	add	local01, #11
2989c     0F 1F C2 FA | 	rdbyte	local01, local01
298a0     10 1E CE F7 | 	test	local01, #16 wz
298a4     F8 00 90 AD |  if_e	jmp	#LR__4237
298a8     18 4E 05 F1 | 	add	fp, #24
298ac     A7 16 02 FB | 	rdlong	arg03, fp
298b0     30 4E 05 F1 | 	add	fp, #48
298b4     A7 1E 02 FB | 	rdlong	local01, fp
298b8     48 4E 85 F1 | 	sub	fp, #72
298bc     0F 17 0A F2 | 	cmp	arg03, local01 wz
298c0     DC 00 90 AD |  if_e	jmp	#LR__4237
298c4     70 4E 05 F1 | 	add	fp, #112
298c8     A7 12 02 FB | 	rdlong	arg01, fp
298cc     09 1F 02 F6 | 	mov	local01, arg01
298d0     24 4E 05 F1 | 	add	fp, #36
298d4     A7 14 02 FB | 	rdlong	arg02, fp
298d8     94 4E 85 F1 | 	sub	fp, #148
298dc     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
298e0     FD 14 02 F6 | 	mov	arg02, result1
298e4     0F 13 02 F6 | 	mov	arg01, local01
298e8     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
298ec     98 4E 05 F1 | 	add	fp, #152
298f0     A7 FA 61 FC | 	wrlong	result1, fp
298f4     00 FA 4D F2 | 	cmps	result1, #0 wz
298f8     98 4E 85 F1 | 	sub	fp, #152
298fc     0C 4E 05 A1 |  if_e	add	fp, #12
29900     A7 04 68 AC |  if_e	wrlong	#2, fp
29904     0C 4E 85 A1 |  if_e	sub	fp, #12
29908     94 00 90 AD |  if_e	jmp	#LR__4236
2990c     70 4E 05 F1 | 	add	fp, #112
29910     A7 12 02 FB | 	rdlong	arg01, fp
29914     28 4E 05 F1 | 	add	fp, #40
29918     A7 14 02 FB | 	rdlong	arg02, fp
2991c     98 4E 85 F1 | 	sub	fp, #152
29920     4C A0 BF FD | 	call	#_fatfs_cc_move_window
29924     0C 4E 05 F1 | 	add	fp, #12
29928     A7 FA 61 FC | 	wrlong	result1, fp
2992c     64 4E 05 F1 | 	add	fp, #100
29930     A7 1E 02 FB | 	rdlong	local01, fp
29934     54 1E 06 F1 | 	add	local01, #84
29938     24 4E 05 F1 | 	add	fp, #36
2993c     A7 1E 62 FC | 	wrlong	local01, fp
29940     88 4E 85 F1 | 	sub	fp, #136
29944     A7 1E 0A FB | 	rdlong	local01, fp wz
29948     0C 4E 85 F1 | 	sub	fp, #12
2994c     50 00 90 5D |  if_ne	jmp	#LR__4235
29950     94 4E 05 F1 | 	add	fp, #148
29954     A7 1E 02 FB | 	rdlong	local01, fp
29958     94 4E 85 F1 | 	sub	fp, #148
2995c     01 1E 06 F1 | 	add	local01, #1
29960     0F 1F C2 FA | 	rdbyte	local01, local01
29964     2E 1E 0E F2 | 	cmp	local01, #46 wz
29968     34 00 90 5D |  if_ne	jmp	#LR__4235
2996c     70 4E 05 F1 | 	add	fp, #112
29970     A7 12 02 FB | 	rdlong	arg01, fp
29974     24 4E 05 F1 | 	add	fp, #36
29978     A7 14 02 FB | 	rdlong	arg02, fp
2997c     4C 4E 85 F1 | 	sub	fp, #76
29980     A7 16 02 FB | 	rdlong	arg03, fp
29984     48 4E 85 F1 | 	sub	fp, #72
29988     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2998c     70 4E 05 F1 | 	add	fp, #112
29990     A7 1E 02 FB | 	rdlong	local01, fp
29994     70 4E 85 F1 | 	sub	fp, #112
29998     03 1E 06 F1 | 	add	local01, #3
2999c     0F 03 48 FC | 	wrbyte	#1, local01
299a0                 | LR__4235
299a0                 | LR__4236
299a0                 | LR__4237
299a0                 | LR__4238
299a0                 | LR__4239
299a0     0C 4E 05 F1 | 	add	fp, #12
299a4     A7 1E 0A FB | 	rdlong	local01, fp wz
299a8     0C 4E 85 F1 | 	sub	fp, #12
299ac     40 00 90 5D |  if_ne	jmp	#LR__4241
299b0     10 4E 05 F1 | 	add	fp, #16
299b4     A7 12 02 F6 | 	mov	arg01, fp
299b8     10 4E 85 F1 | 	sub	fp, #16
299bc     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
299c0     0C 4E 05 F1 | 	add	fp, #12
299c4     A7 FA 61 FC | 	wrlong	result1, fp
299c8     0C 4E 85 F1 | 	sub	fp, #12
299cc     00 FA 0D F2 | 	cmp	result1, #0 wz
299d0     1C 00 90 5D |  if_ne	jmp	#LR__4240
299d4     70 4E 05 F1 | 	add	fp, #112
299d8     A7 12 02 FB | 	rdlong	arg01, fp
299dc     70 4E 85 F1 | 	sub	fp, #112
299e0     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
299e4     0C 4E 05 F1 | 	add	fp, #12
299e8     A7 FA 61 FC | 	wrlong	result1, fp
299ec     0C 4E 85 F1 | 	sub	fp, #12
299f0                 | LR__4240
299f0                 | LR__4241
299f0                 | LR__4242
299f0                 | LR__4243
299f0                 | ' 					res = sync_fs(fs);
299f0                 | ' 				}
299f0                 | ' 			}
299f0                 | ' 
299f0                 | ' 		}
299f0                 | ' 		;
299f0                 | ' 	}
299f0                 | ' 
299f0                 | ' 	return res ;
299f0     0C 4E 05 F1 | 	add	fp, #12
299f4     A7 FA 01 FB | 	rdlong	result1, fp
299f8     0C 4E 85 F1 | 	sub	fp, #12
299fc     A7 F0 03 F6 | 	mov	ptra, fp
29a00     B2 00 A0 FD | 	call	#popregs_
29a04                 | _fatfs_cc_f_rename_ret
29a04     2D 00 64 FD | 	ret
29a08                 | 
29a08                 | _fatfs_cc_time
29a08     00 4A 05 F6 | 	mov	COUNT_, #0
29a0c     A8 00 A0 FD | 	call	#pushregs_
29a10     14 F0 07 F1 | 	add	ptra, #20
29a14     04 4E 05 F1 | 	add	fp, #4
29a18     A7 12 62 FC | 	wrlong	arg01, fp
29a1c     04 4E 05 F1 | 	add	fp, #4
29a20     A7 12 02 F6 | 	mov	arg01, fp
29a24     08 4E 85 F1 | 	sub	fp, #8
29a28     00 14 06 F6 | 	mov	arg02, #0
29a2c     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
29a30     08 4E 05 F1 | 	add	fp, #8
29a34     A7 FA 01 FB | 	rdlong	result1, fp
29a38     08 4E 05 F1 | 	add	fp, #8
29a3c     A7 FA 61 FC | 	wrlong	result1, fp
29a40     0C 4E 85 F1 | 	sub	fp, #12
29a44     A7 FA 09 FB | 	rdlong	result1, fp wz
29a48     04 4E 85 F1 | 	sub	fp, #4
29a4c     18 00 90 AD |  if_e	jmp	#LR__4250
29a50     04 4E 05 F1 | 	add	fp, #4
29a54     A7 FA 01 FB | 	rdlong	result1, fp
29a58     0C 4E 05 F1 | 	add	fp, #12
29a5c     A7 14 02 FB | 	rdlong	arg02, fp
29a60     10 4E 85 F1 | 	sub	fp, #16
29a64     FD 14 62 FC | 	wrlong	arg02, result1
29a68                 | LR__4250
29a68                 | '         *tp = now;
29a68                 | '     return now;
29a68     10 4E 05 F1 | 	add	fp, #16
29a6c     A7 FA 01 FB | 	rdlong	result1, fp
29a70     10 4E 85 F1 | 	sub	fp, #16
29a74     A7 F0 03 F6 | 	mov	ptra, fp
29a78     B2 00 A0 FD | 	call	#popregs_
29a7c                 | _fatfs_cc_time_ret
29a7c     2D 00 64 FD | 	ret
29a80                 | 
29a80                 | _fatfs_cc_mktime
29a80     06 4A 05 F6 | 	mov	COUNT_, #6
29a84     A8 00 A0 FD | 	call	#pushregs_
29a88     09 1F 02 F6 | 	mov	local01, arg01
29a8c     14 1E 06 F1 | 	add	local01, #20
29a90     0F 13 02 FB | 	rdlong	arg01, local01
29a94     14 1E 86 F1 | 	sub	local01, #20
29a98     46 12 56 F2 | 	cmps	arg01, #70 wc
29a9c                 | '                 return (time_t) -1;
29a9c     01 FA 65 C6 |  if_b	neg	result1, #1
29aa0     7C 01 90 CD |  if_b	jmp	#LR__4264
29aa4     03 00 00 FF 
29aa8     6C 21 06 F6 | 	mov	local02, ##1900
29aac     14 1E 06 F1 | 	add	local01, #20
29ab0     0F FB 01 FB | 	rdlong	result1, local01
29ab4     FD 20 02 F1 | 	add	local02, result1
29ab8     08 1E 86 F1 | 	sub	local01, #8
29abc     0F 23 02 FB | 	rdlong	local03, local01
29ac0     01 22 86 F1 | 	sub	local03, #1
29ac4     04 1E 06 F1 | 	add	local01, #4
29ac8     0F 13 02 FB | 	rdlong	arg01, local01
29acc     10 1E 86 F1 | 	sub	local01, #16
29ad0     02 12 66 F0 | 	shl	arg01, #2
29ad4     02 00 00 FF 
29ad8     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
29adc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29ae0     09 FB 01 FB | 	rdlong	result1, arg01
29ae4     FD 22 02 F1 | 	add	local03, result1
29ae8     10 13 02 F6 | 	mov	arg01, local02
29aec     02 00 00 FF 
29af0     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
29af4     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
29af8     00 FA 0D F2 | 	cmp	result1, #0 wz
29afc     1C 00 90 AD |  if_e	jmp	#LR__4260
29b00     00 24 06 F6 | 	mov	local04, #0
29b04     10 1E 06 F1 | 	add	local01, #16
29b08     0F FB 01 FB | 	rdlong	result1, local01
29b0c     10 1E 86 F1 | 	sub	local01, #16
29b10     02 FA 55 F2 | 	cmps	result1, #2 wc
29b14     01 24 06 36 |  if_ae	mov	local04, #1
29b18     04 00 90 FD | 	jmp	#LR__4261
29b1c                 | LR__4260
29b1c     00 24 06 F6 | 	mov	local04, #0
29b20                 | LR__4261
29b20     04 1E 06 F1 | 	add	local01, #4
29b24     0F FB 01 FB | 	rdlong	result1, local01
29b28     04 1E 86 F1 | 	sub	local01, #4
29b2c     0F 27 02 FB | 	rdlong	local05, local01
29b30     08 1E 06 F1 | 	add	local01, #8
29b34     0F 13 02 FB | 	rdlong	arg01, local01
29b38     07 00 00 FF 
29b3c     10 12 06 FD | 	qmul	arg01, ##3600
29b40     12 23 02 F1 | 	add	local03, local04
29b44     FD 24 02 F6 | 	mov	local04, result1
29b48     04 24 66 F0 | 	shl	local04, #4
29b4c     FD 24 82 F1 | 	sub	local04, result1
29b50     02 24 66 F0 | 	shl	local04, #2
29b54     12 27 02 F1 | 	add	local05, local04
29b58     08 1E 86 F1 | 	sub	local01, #8
29b5c     18 24 62 FD | 	getqx	local04
29b60     A8 00 00 FF 
29b64     80 23 06 FD | 	qmul	local03, ##86400
29b68     12 27 02 F1 | 	add	local05, local04
29b6c     10 23 02 F6 | 	mov	local03, local02
29b70     03 00 00 FF 
29b74     B2 23 86 F1 | 	sub	local03, ##1970
29b78     18 24 62 FD | 	getqx	local04
29b7c     99 F0 00 FF 
29b80     80 23 06 FD | 	qmul	local03, ##31536000
29b84     12 27 02 F1 | 	add	local05, local04
29b88     10 23 02 F6 | 	mov	local03, local02
29b8c     03 00 00 FF 
29b90     B1 23 86 F1 | 	sub	local03, ##1969
29b94     11 29 52 F6 | 	abs	local06, local03 wc
29b98     02 28 46 F0 | 	shr	local06, #2
29b9c     14 29 82 F6 | 	negc	local06, local06
29ba0     03 00 00 FF 
29ba4     D1 21 56 F2 | 	cmps	local02, ##2001 wc
29ba8     18 24 62 FD | 	getqx	local04
29bac     12 27 02 F1 | 	add	local05, local04
29bb0     18 00 90 CD |  if_b	jmp	#LR__4262
29bb4     03 00 00 FF 
29bb8     D0 21 86 F1 | 	sub	local02, ##2000
29bbc     10 25 52 F6 | 	abs	local04, local02 wc
29bc0     64 24 16 FD | 	qdiv	local04, #100
29bc4     18 24 62 FD | 	getqx	local04
29bc8     12 29 A2 F3 | 	sumnc	local06, local04
29bcc                 | LR__4262
29bcc     A8 00 00 FF 
29bd0     80 29 06 FD | 	qmul	local06, ##86400
29bd4     18 28 62 FD | 	getqx	local06
29bd8     14 27 02 F1 | 	add	local05, local06
29bdc     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
29be0     02 00 00 FF 
29be4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
29be8     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
29bec     14 27 02 F1 | 	add	local05, local06
29bf0     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
29bf4     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
29bf8     02 00 00 FF 
29bfc     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
29c00     01 22 0E F2 | 	cmp	local03, #1 wz
29c04     14 00 90 5D |  if_ne	jmp	#LR__4263
29c08     0F 13 02 F6 | 	mov	arg01, local01
29c0c     DC 19 B0 FD | 	call	#_fatfs_cc___indst
29c10     00 FA 0D F2 | 	cmp	result1, #0 wz
29c14     07 00 00 5F 
29c18     10 26 86 51 |  if_ne	sub	local05, ##3600
29c1c                 | LR__4263
29c1c                 | '                 s -=  (3600L) ;
29c1c                 | ' 
29c1c                 | '         return s;
29c1c     13 FB 01 F6 | 	mov	result1, local05
29c20                 | LR__4264
29c20     A7 F0 03 F6 | 	mov	ptra, fp
29c24     B2 00 A0 FD | 	call	#popregs_
29c28                 | _fatfs_cc_mktime_ret
29c28     2D 00 64 FD | 	ret
29c2c                 | 
29c2c                 | _fatfs_cc__gmtime_r
29c2c     03 4A 05 F6 | 	mov	COUNT_, #3
29c30     A8 00 A0 FD | 	call	#pushregs_
29c34     09 1F 02 FB | 	rdlong	local01, arg01
29c38     A8 00 00 FF 
29c3c     80 1F 16 FD | 	qdiv	local01, ##86400
29c40     18 FA 61 FD | 	getqx	result1
29c44     04 FA 05 F1 | 	add	result1, #4
29c48     07 FA 15 FD | 	qdiv	result1, #7
29c4c     18 14 06 F1 | 	add	arg02, #24
29c50     D1 7F 27 FF 
29c54     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
29c58     D1 7F 27 3F 
29c5c     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
29c60     03 00 00 3F 
29c64     DC 21 06 36 |  if_ae	mov	local02, ##2012
29c68     03 00 00 CF 
29c6c     B2 21 06 C6 |  if_b	mov	local02, ##1970
29c70                 | ' 	  year = 1970;
29c70                 | ' 	}
29c70                 | ' 
29c70                 | ' 	for(;;) {
29c70     19 FA 61 FD | 	getqy	result1
29c74     0A FB 61 FC | 	wrlong	result1, arg02
29c78     18 14 86 F1 | 	sub	arg02, #24
29c7c                 | LR__4270
29c7c     10 13 02 F6 | 	mov	arg01, local02
29c80     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
29c84     00 FA 0D F2 | 	cmp	result1, #0 wz
29c88     42 F1 00 5F 
29c8c     00 23 06 56 |  if_ne	mov	local03, ##31622400
29c90     99 F0 00 AF 
29c94     80 23 06 A6 |  if_e	mov	local03, ##31536000
29c98     11 1F 12 F2 | 	cmp	local01, local03 wc
29c9c                 | ' 	    break;
29c9c     01 20 06 31 |  if_ae	add	local02, #1
29ca0     11 1F 82 31 |  if_ae	sub	local01, local03
29ca4     D4 FF 9F 3D |  if_ae	jmp	#LR__4270
29ca8     A8 00 00 FF 
29cac     80 1F 16 FD | 	qdiv	local01, ##86400
29cb0     10 23 02 F6 | 	mov	local03, local02
29cb4     03 00 00 FF 
29cb8     6C 23 86 F1 | 	sub	local03, ##1900
29cbc     14 14 06 F1 | 	add	arg02, #20
29cc0     0A 23 62 FC | 	wrlong	local03, arg02
29cc4     08 14 06 F1 | 	add	arg02, #8
29cc8     10 13 02 F6 | 	mov	arg01, local02
29ccc     18 20 62 FD | 	getqx	local02
29cd0     0A 21 62 FC | 	wrlong	local02, arg02
29cd4     1C 14 86 F1 | 	sub	arg02, #28
29cd8     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
29cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
29ce0     1D 22 06 56 |  if_ne	mov	local03, #29
29ce4     1C 22 06 A6 |  if_e	mov	local03, #28
29ce8     02 00 00 FF 
29cec     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
29cf0     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
29cf4     02 00 00 FF 
29cf8     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
29cfc                 | ' 
29cfc                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
29cfc                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
29cfc     00 12 06 F6 | 	mov	arg01, #0
29d00     97 2A 48 FB | 	callpa	#(@LR__4272-@LR__4271)>>2,fcache_load_ptr_
29d04                 | LR__4271
29d04     09 23 02 F6 | 	mov	local03, arg01
29d08     02 22 66 F0 | 	shl	local03, #2
29d0c     02 00 00 FF 
29d10     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
29d14     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
29d18     11 23 02 FB | 	rdlong	local03, local03
29d1c     11 21 52 F2 | 	cmps	local02, local03 wc
29d20     02 00 00 FF 
29d24     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
29d28     2C 00 90 CD |  if_b	jmp	#LR__4273
29d2c     09 23 02 F6 | 	mov	local03, arg01
29d30     02 22 66 F0 | 	shl	local03, #2
29d34     02 00 00 FF 
29d38     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
29d3c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
29d40     11 23 02 FB | 	rdlong	local03, local03
29d44     11 21 82 F1 | 	sub	local02, local03
29d48     01 12 06 F1 | 	add	arg01, #1
29d4c     02 00 00 FF 
29d50     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
29d54     AC FF 9F FD | 	jmp	#LR__4271
29d58                 | LR__4272
29d58                 | LR__4273
29d58     A8 00 00 FF 
29d5c     80 1F 16 FD | 	qdiv	local01, ##86400
29d60     10 14 06 F1 | 	add	arg02, #16
29d64     0A 13 62 FC | 	wrlong	arg01, arg02
29d68     01 20 06 F1 | 	add	local02, #1
29d6c     04 14 86 F1 | 	sub	arg02, #4
29d70     0A 21 62 FC | 	wrlong	local02, arg02
29d74     19 1E 62 FD | 	getqy	local01
29d78     07 00 00 FF 
29d7c     10 1E 16 FD | 	qdiv	local01, ##3600
29d80     18 22 62 FD | 	getqx	local03
29d84     07 00 00 FF 
29d88     10 1E 16 FD | 	qdiv	local01, ##3600
29d8c     04 14 86 F1 | 	sub	arg02, #4
29d90     0A 23 62 FC | 	wrlong	local03, arg02
29d94     19 1E 62 FD | 	getqy	local01
29d98     3C 1E 16 FD | 	qdiv	local01, #60
29d9c     18 22 62 FD | 	getqx	local03
29da0     3C 1E 16 FD | 	qdiv	local01, #60
29da4     04 14 86 F1 | 	sub	arg02, #4
29da8     0A 23 62 FC | 	wrlong	local03, arg02
29dac     04 14 86 F1 | 	sub	arg02, #4
29db0                 | '         stm->tm_isdst = 0;
29db0                 | ' 
29db0                 | ' ;
29db0                 | '         return stm;
29db0     0A FB 01 F6 | 	mov	result1, arg02
29db4     19 22 62 FD | 	getqy	local03
29db8     0A 23 62 FC | 	wrlong	local03, arg02
29dbc     20 14 06 F1 | 	add	arg02, #32
29dc0     0A 01 68 FC | 	wrlong	#0, arg02
29dc4     A7 F0 03 F6 | 	mov	ptra, fp
29dc8     B2 00 A0 FD | 	call	#popregs_
29dcc                 | _fatfs_cc__gmtime_r_ret
29dcc     2D 00 64 FD | 	ret
29dd0                 | 
29dd0                 | _fatfs_cc__tzset
29dd0     5C 01 00 FF 
29dd4     15 13 06 F6 | 	mov	arg01, ##@LR__4585
29dd8     34 00 B0 FD | 	call	#_fatfs_cc_getenv
29ddc     FD 12 02 F6 | 	mov	arg01, result1
29de0     02 00 00 FF 
29de4     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
29de8     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
29dec     02 00 00 FF 
29df0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
29df4     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
29df8     02 00 00 FF 
29dfc     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
29e00     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
29e04     02 00 00 FF 
29e08     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
29e0c                 | _fatfs_cc__tzset_ret
29e0c     2D 00 64 FD | 	ret
29e10                 | 
29e10                 | _fatfs_cc_getenv
29e10     06 4A 05 F6 | 	mov	COUNT_, #6
29e14     A8 00 A0 FD | 	call	#pushregs_
29e18     09 1F 02 F6 | 	mov	local01, arg01
29e1c     09 21 02 F6 | 	mov	local02, arg01
29e20     97 06 48 FB | 	callpa	#(@LR__4281-@LR__4280)>>2,fcache_load_ptr_
29e24                 | LR__4280
29e24     10 FB C9 FA | 	rdbyte	result1, local02 wz
29e28     01 20 06 51 |  if_ne	add	local02, #1
29e2c     F4 FF 9F 5D |  if_ne	jmp	#LR__4280
29e30                 | LR__4281
29e30     09 21 82 F1 | 	sub	local02, arg01
29e34     10 FB 01 F6 | 	mov	result1, local02
29e38     02 00 00 FF 
29e3c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
29e40     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
29e44     02 00 00 FF 
29e48     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
29e4c                 | '             return 0;
29e4c     00 FA 05 A6 |  if_e	mov	result1, #0
29e50     5C 00 90 AD |  if_e	jmp	#LR__4284
29e54                 | ' 
29e54                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
29e54     02 00 00 FF 
29e58     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
29e5c     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
29e60     02 00 00 FF 
29e64     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
29e68                 | LR__4282
29e68     11 25 0A FB | 	rdlong	local04, local03 wz
29e6c     3C 00 90 AD |  if_e	jmp	#LR__4283
29e70     12 13 02 F6 | 	mov	arg01, local04
29e74     0F 15 02 F6 | 	mov	arg02, local01
29e78     10 17 02 F6 | 	mov	arg03, local02
29e7c     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
29e80     00 FA 0D F2 | 	cmp	result1, #0 wz
29e84     10 27 02 A6 |  if_e	mov	local05, local02
29e88     12 27 02 A1 |  if_e	add	local05, local04
29e8c     13 29 C2 AA |  if_e	rdbyte	local06, local05
29e90     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
29e94                 | ' 			return name+len+1;
29e94     10 25 02 A1 |  if_e	add	local04, local02
29e98     01 24 06 A1 |  if_e	add	local04, #1
29e9c     12 FB 01 A6 |  if_e	mov	result1, local04
29ea0     0C 00 90 AD |  if_e	jmp	#LR__4284
29ea4     04 22 06 F1 | 	add	local03, #4
29ea8     BC FF 9F FD | 	jmp	#LR__4282
29eac                 | LR__4283
29eac                 | ' 	}
29eac                 | ' 	return 0;
29eac     00 FA 05 F6 | 	mov	result1, #0
29eb0                 | LR__4284
29eb0     A7 F0 03 F6 | 	mov	ptra, fp
29eb4     B2 00 A0 FD | 	call	#popregs_
29eb8                 | _fatfs_cc_getenv_ret
29eb8     2D 00 64 FD | 	ret
29ebc                 | 
29ebc                 | _fatfs_cc__get_fattime
29ebc     00 4A 05 F6 | 	mov	COUNT_, #0
29ec0     A8 00 A0 FD | 	call	#pushregs_
29ec4     34 F0 07 F1 | 	add	ptra, #52
29ec8     00 12 06 F6 | 	mov	arg01, #0
29ecc     38 FB BF FD | 	call	#_fatfs_cc_time
29ed0     04 4E 05 F1 | 	add	fp, #4
29ed4     A7 FA 61 FC | 	wrlong	result1, fp
29ed8     A7 12 02 F6 | 	mov	arg01, fp
29edc     0C 4E 05 F1 | 	add	fp, #12
29ee0     A7 14 02 F6 | 	mov	arg02, fp
29ee4     10 4E 85 F1 | 	sub	fp, #16
29ee8     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
29eec     24 4E 05 F1 | 	add	fp, #36
29ef0     A7 14 02 FB | 	rdlong	arg02, fp
29ef4     50 14 86 F1 | 	sub	arg02, #80
29ef8     09 14 66 F0 | 	shl	arg02, #9
29efc     04 4E 85 F1 | 	sub	fp, #4
29f00     A7 FA 01 FB | 	rdlong	result1, fp
29f04     01 FA 05 F1 | 	add	result1, #1
29f08     05 FA 65 F0 | 	shl	result1, #5
29f0c     FD 14 42 F5 | 	or	arg02, result1
29f10     04 4E 85 F1 | 	sub	fp, #4
29f14     A7 FA 01 FB | 	rdlong	result1, fp
29f18     FD 14 42 F5 | 	or	arg02, result1
29f1c     14 4E 85 F1 | 	sub	fp, #20
29f20     A7 14 62 FC | 	wrlong	arg02, fp
29f24     10 4E 05 F1 | 	add	fp, #16
29f28     A7 14 02 FB | 	rdlong	arg02, fp
29f2c     0B 14 66 F0 | 	shl	arg02, #11
29f30     04 4E 85 F1 | 	sub	fp, #4
29f34     A7 FA 01 FB | 	rdlong	result1, fp
29f38     05 FA 65 F0 | 	shl	result1, #5
29f3c     FD 14 42 F5 | 	or	arg02, result1
29f40     04 4E 85 F1 | 	sub	fp, #4
29f44     A7 FA 01 FB | 	rdlong	result1, fp
29f48     FD 14 42 F5 | 	or	arg02, result1
29f4c     04 4E 85 F1 | 	sub	fp, #4
29f50     A7 14 62 FC | 	wrlong	arg02, fp
29f54                 | ' 
29f54                 | '     now = time(0);
29f54                 | '     _gmtime_r (&now, &date);
29f54                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
29f54                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
29f54                 | '     return (ffdate << 16) | fftime;
29f54     04 4E 85 F1 | 	sub	fp, #4
29f58     A7 FA 01 FB | 	rdlong	result1, fp
29f5c     10 FA 65 F0 | 	shl	result1, #16
29f60     08 4E 85 F1 | 	sub	fp, #8
29f64     0A FB 41 F5 | 	or	result1, arg02
29f68     A7 F0 03 F6 | 	mov	ptra, fp
29f6c     B2 00 A0 FD | 	call	#popregs_
29f70                 | _fatfs_cc__get_fattime_ret
29f70     2D 00 64 FD | 	ret
29f74                 | 
29f74                 | _fatfs_cc_unixtime_0894
29f74     00 4A 05 F6 | 	mov	COUNT_, #0
29f78     A8 00 A0 FD | 	call	#pushregs_
29f7c     34 F0 07 F1 | 	add	ptra, #52
29f80     04 4E 05 F1 | 	add	fp, #4
29f84     A7 12 62 FC | 	wrlong	arg01, fp
29f88     04 4E 05 F1 | 	add	fp, #4
29f8c     A7 14 62 FC | 	wrlong	arg02, fp
29f90     04 4E 85 F1 | 	sub	fp, #4
29f94     A7 14 02 FB | 	rdlong	arg02, fp
29f98     09 14 46 F0 | 	shr	arg02, #9
29f9c     7F 14 06 F5 | 	and	arg02, #127
29fa0     50 FA 05 F6 | 	mov	result1, #80
29fa4     0A FB 01 F1 | 	add	result1, arg02
29fa8     20 4E 05 F1 | 	add	fp, #32
29fac     A7 FA 61 FC | 	wrlong	result1, fp
29fb0     20 4E 85 F1 | 	sub	fp, #32
29fb4     A7 FA 01 FB | 	rdlong	result1, fp
29fb8     05 FA 45 F0 | 	shr	result1, #5
29fbc     FD FA 41 F8 | 	getnib	result1, result1, #0
29fc0     01 FA 85 F1 | 	sub	result1, #1
29fc4     1C 4E 05 F1 | 	add	fp, #28
29fc8     A7 FA 61 FC | 	wrlong	result1, fp
29fcc     1C 4E 85 F1 | 	sub	fp, #28
29fd0     A7 FA 01 FB | 	rdlong	result1, fp
29fd4     1F FA 05 F5 | 	and	result1, #31
29fd8     18 4E 05 F1 | 	add	fp, #24
29fdc     A7 FA 61 FC | 	wrlong	result1, fp
29fe0     14 4E 85 F1 | 	sub	fp, #20
29fe4     A7 FA 01 FB | 	rdlong	result1, fp
29fe8     0B FA 45 F0 | 	shr	result1, #11
29fec     1F FA 05 F5 | 	and	result1, #31
29ff0     10 4E 05 F1 | 	add	fp, #16
29ff4     A7 FA 61 FC | 	wrlong	result1, fp
29ff8     10 4E 85 F1 | 	sub	fp, #16
29ffc     A7 FA 01 FB | 	rdlong	result1, fp
2a000     05 FA 45 F0 | 	shr	result1, #5
2a004     3F FA 05 F5 | 	and	result1, #63
2a008     0C 4E 05 F1 | 	add	fp, #12
2a00c     A7 FA 61 FC | 	wrlong	result1, fp
2a010     0C 4E 85 F1 | 	sub	fp, #12
2a014     A7 14 02 FB | 	rdlong	arg02, fp
2a018     1F 14 06 F5 | 	and	arg02, #31
2a01c     01 14 66 F0 | 	shl	arg02, #1
2a020     08 4E 05 F1 | 	add	fp, #8
2a024     A7 14 62 FC | 	wrlong	arg02, fp
2a028     A7 12 02 F6 | 	mov	arg01, fp
2a02c     10 4E 85 F1 | 	sub	fp, #16
2a030     4C FA BF FD | 	call	#_fatfs_cc_mktime
2a034     0C 4E 05 F1 | 	add	fp, #12
2a038     A7 FA 61 FC | 	wrlong	result1, fp
2a03c                 | ' 
2a03c                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2a03c                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2a03c                 | '     date.tm_mday = (dosdate & 0x1f);
2a03c                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2a03c                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2a03c                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2a03c                 | ' 
2a03c                 | '     t = mktime(&date);
2a03c                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a03c                 | '     return t;
2a03c     0C 4E 85 F1 | 	sub	fp, #12
2a040     A7 F0 03 F6 | 	mov	ptra, fp
2a044     B2 00 A0 FD | 	call	#popregs_
2a048                 | _fatfs_cc_unixtime_0894_ret
2a048     2D 00 64 FD | 	ret
2a04c                 | 
2a04c                 | _fatfs_cc__set_dos_error_0896
2a04c     09 01 02 F6 | 	mov	_var01, arg01
2a050                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a050                 | '     switch (derr) {
2a050     14 00 26 F3 | 	fle	_var01, #20
2a054     30 00 62 FD | 	jmprel	_var01
2a058                 | LR__4290
2a058     50 00 90 FD | 	jmp	#LR__4291
2a05c     84 00 90 FD | 	jmp	#LR__4305
2a060     80 00 90 FD | 	jmp	#LR__4306
2a064     7C 00 90 FD | 	jmp	#LR__4307
2a068     48 00 90 FD | 	jmp	#LR__4292
2a06c     44 00 90 FD | 	jmp	#LR__4293
2a070     40 00 90 FD | 	jmp	#LR__4294
2a074     44 00 90 FD | 	jmp	#LR__4295
2a078     48 00 90 FD | 	jmp	#LR__4297
2a07c     54 00 90 FD | 	jmp	#LR__4300
2a080     38 00 90 FD | 	jmp	#LR__4296
2a084     4C 00 90 FD | 	jmp	#LR__4301
2a088     48 00 90 FD | 	jmp	#LR__4302
2a08c     44 00 90 FD | 	jmp	#LR__4303
2a090     50 00 90 FD | 	jmp	#LR__4308
2a094     4C 00 90 FD | 	jmp	#LR__4308
2a098     48 00 90 FD | 	jmp	#LR__4308
2a09c     2C 00 90 FD | 	jmp	#LR__4298
2a0a0     38 00 90 FD | 	jmp	#LR__4304
2a0a4     2C 00 90 FD | 	jmp	#LR__4299
2a0a8     38 00 90 FD | 	jmp	#LR__4308
2a0ac                 | LR__4291
2a0ac     00 02 06 F6 | 	mov	_var02, #0
2a0b0                 | '         r = 0;
2a0b0                 | '         break;
2a0b0     34 00 90 FD | 	jmp	#LR__4309
2a0b4                 | LR__4292
2a0b4                 | LR__4293
2a0b4                 | LR__4294
2a0b4     04 02 06 F6 | 	mov	_var02, #4
2a0b8                 | '         r =  4 ;
2a0b8                 | '         break;
2a0b8     2C 00 90 FD | 	jmp	#LR__4309
2a0bc                 | LR__4295
2a0bc                 | LR__4296
2a0bc     06 02 06 F6 | 	mov	_var02, #6
2a0c0                 | '         r =  6 ;
2a0c0                 | '         break;
2a0c0     24 00 90 FD | 	jmp	#LR__4309
2a0c4                 | LR__4297
2a0c4     09 02 06 F6 | 	mov	_var02, #9
2a0c8                 | '         r =  9 ;
2a0c8                 | '         break;
2a0c8     1C 00 90 FD | 	jmp	#LR__4309
2a0cc                 | LR__4298
2a0cc     07 02 06 F6 | 	mov	_var02, #7
2a0d0                 | '         r =  7 ;
2a0d0                 | '         break;
2a0d0     14 00 90 FD | 	jmp	#LR__4309
2a0d4                 | LR__4299
2a0d4                 | LR__4300
2a0d4                 | LR__4301
2a0d4                 | LR__4302
2a0d4                 | LR__4303
2a0d4     0A 02 06 F6 | 	mov	_var02, #10
2a0d8                 | '         r =  10 ;
2a0d8                 | '         break;
2a0d8     0C 00 90 FD | 	jmp	#LR__4309
2a0dc                 | LR__4304
2a0dc     0B 02 06 F6 | 	mov	_var02, #11
2a0e0                 | '         r =  11 ;
2a0e0                 | '         break;
2a0e0     04 00 90 FD | 	jmp	#LR__4309
2a0e4                 | LR__4305
2a0e4                 | LR__4306
2a0e4                 | LR__4307
2a0e4                 | LR__4308
2a0e4     0C 02 06 F6 | 	mov	_var02, #12
2a0e8                 | '         r =  12 ;
2a0e8                 | '         break;
2a0e8                 | LR__4309
2a0e8                 | '     }
2a0e8                 | '     return _seterror(r);
2a0e8     00 02 4E F2 | 	cmps	_var02, #0 wz
2a0ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a0f0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2a0f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a0f8     01 FA 65 56 |  if_ne	neg	result1, #1
2a0fc     00 FA 05 A6 |  if_e	mov	result1, #0
2a100                 | _fatfs_cc__set_dos_error_0896_ret
2a100     2D 00 64 FD | 	ret
2a104                 | 
2a104                 | _fatfs_cc_v_creat
2a104     04 4A 05 F6 | 	mov	COUNT_, #4
2a108     A8 00 A0 FD | 	call	#pushregs_
2a10c     09 1F 02 F6 | 	mov	local01, arg01
2a110     0A 21 02 F6 | 	mov	local02, arg02
2a114     03 00 00 FF 
2a118     3C 12 06 F6 | 	mov	arg01, ##1596
2a11c                 | '     return _gc_alloc(size);
2a11c     10 14 06 F6 | 	mov	arg02, #16
2a120     30 60 BF FD | 	call	#__system___gc_doalloc
2a124     FD 22 0A F6 | 	mov	local03, result1 wz
2a128                 | '       return _seterror( 7 );
2a128     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a12c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a130     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a134     01 FA 65 A6 |  if_e	neg	result1, #1
2a138     58 00 90 AD |  if_e	jmp	#LR__4311
2a13c     11 13 02 F6 | 	mov	arg01, local03
2a140     00 14 06 F6 | 	mov	arg02, #0
2a144     03 00 00 FF 
2a148     3C 16 06 F6 | 	mov	arg03, ##1596
2a14c     98 00 A0 FD | 	call	#\builtin_bytefill_
2a150     02 00 00 FF 
2a154     14 22 06 F1 | 	add	local03, ##1044
2a158     11 13 02 F6 | 	mov	arg01, local03
2a15c     02 00 00 FF 
2a160     14 22 86 F1 | 	sub	local03, ##1044
2a164     10 15 02 F6 | 	mov	arg02, local02
2a168     07 16 06 F6 | 	mov	arg03, #7
2a16c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2a170     FD 24 0A F6 | 	mov	local04, result1 wz
2a174     14 00 90 AD |  if_e	jmp	#LR__4310
2a178     11 13 02 F6 | 	mov	arg01, local03
2a17c                 | '     return _gc_free(ptr);
2a17c     E0 60 BF FD | 	call	#__system___gc_free
2a180                 | '     free(f);
2a180                 | '     return _set_dos_error(r);
2a180     12 13 02 F6 | 	mov	arg01, local04
2a184     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a188     08 00 90 FD | 	jmp	#LR__4311
2a18c                 | LR__4310
2a18c     0F 23 62 FC | 	wrlong	local03, local01
2a190                 | '   }
2a190                 | '   fil->vfsdata = f;
2a190                 | '   return 0;
2a190     00 FA 05 F6 | 	mov	result1, #0
2a194                 | LR__4311
2a194     A7 F0 03 F6 | 	mov	ptra, fp
2a198     B2 00 A0 FD | 	call	#popregs_
2a19c                 | _fatfs_cc_v_creat_ret
2a19c     2D 00 64 FD | 	ret
2a1a0                 | 
2a1a0                 | _fatfs_cc_v_close
2a1a0     02 4A 05 F6 | 	mov	COUNT_, #2
2a1a4     A8 00 A0 FD | 	call	#pushregs_
2a1a8     09 1F 02 FB | 	rdlong	local01, arg01
2a1ac     02 00 00 FF 
2a1b0     14 1E 06 F1 | 	add	local01, ##1044
2a1b4     0F 13 02 F6 | 	mov	arg01, local01
2a1b8     02 00 00 FF 
2a1bc     14 1E 86 F1 | 	sub	local01, ##1044
2a1c0     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2a1c4     FD 20 02 F6 | 	mov	local02, result1
2a1c8     0F 13 02 F6 | 	mov	arg01, local01
2a1cc                 | '     return _gc_free(ptr);
2a1cc     90 60 BF FD | 	call	#__system___gc_free
2a1d0                 | '     FAT_FIL *f = fil->vfsdata;
2a1d0                 | '     r=f_close(&f->fil);
2a1d0                 | '     free(f);
2a1d0                 | '     return _set_dos_error(r);
2a1d0     10 13 02 F6 | 	mov	arg01, local02
2a1d4     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a1d8     A7 F0 03 F6 | 	mov	ptra, fp
2a1dc     B2 00 A0 FD | 	call	#popregs_
2a1e0                 | _fatfs_cc_v_close_ret
2a1e0     2D 00 64 FD | 	ret
2a1e4                 | 
2a1e4                 | _fatfs_cc_v_opendir
2a1e4     04 4A 05 F6 | 	mov	COUNT_, #4
2a1e8     A8 00 A0 FD | 	call	#pushregs_
2a1ec     09 1F 02 F6 | 	mov	local01, arg01
2a1f0     0A 21 02 F6 | 	mov	local02, arg02
2a1f4     30 12 06 F6 | 	mov	arg01, #48
2a1f8                 | '     return _gc_alloc(size);
2a1f8     10 14 06 F6 | 	mov	arg02, #16
2a1fc     54 5F BF FD | 	call	#__system___gc_doalloc
2a200     FD 22 0A F6 | 	mov	local03, result1 wz
2a204                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a204                 | '       return _seterror( 7 );
2a204     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a208     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a20c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a210     01 FA 65 A6 |  if_e	neg	result1, #1
2a214     34 00 90 AD |  if_e	jmp	#LR__4321
2a218     10 15 02 F6 | 	mov	arg02, local02
2a21c     11 13 02 F6 | 	mov	arg01, local03
2a220     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2a224     FD 24 0A F6 | 	mov	local04, result1 wz
2a228     14 00 90 AD |  if_e	jmp	#LR__4320
2a22c     11 13 02 F6 | 	mov	arg01, local03
2a230                 | '     return _gc_free(ptr);
2a230     2C 60 BF FD | 	call	#__system___gc_free
2a234                 | '         free(f);
2a234                 | '         return _set_dos_error(r);
2a234     12 13 02 F6 | 	mov	arg01, local04
2a238     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a23c     0C 00 90 FD | 	jmp	#LR__4321
2a240                 | LR__4320
2a240     04 1E 06 F1 | 	add	local01, #4
2a244     0F 23 62 FC | 	wrlong	local03, local01
2a248                 | '     }
2a248                 | '     dir->vfsdata = f;
2a248                 | '     return 0;
2a248     00 FA 05 F6 | 	mov	result1, #0
2a24c                 | LR__4321
2a24c     A7 F0 03 F6 | 	mov	ptra, fp
2a250     B2 00 A0 FD | 	call	#popregs_
2a254                 | _fatfs_cc_v_opendir_ret
2a254     2D 00 64 FD | 	ret
2a258                 | 
2a258                 | _fatfs_cc_v_closedir
2a258     02 4A 05 F6 | 	mov	COUNT_, #2
2a25c     A8 00 A0 FD | 	call	#pushregs_
2a260     04 12 06 F1 | 	add	arg01, #4
2a264     09 1F 02 FB | 	rdlong	local01, arg01
2a268     0F 13 02 F6 | 	mov	arg01, local01
2a26c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2a270     FD 20 02 F6 | 	mov	local02, result1
2a274     0F 13 02 F6 | 	mov	arg01, local01
2a278                 | '     return _gc_free(ptr);
2a278     E4 5F BF FD | 	call	#__system___gc_free
2a27c     00 20 0E F2 | 	cmp	local02, #0 wz
2a280     10 13 02 56 |  if_ne	mov	arg01, local02
2a284     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0896
2a288                 | '     return r;
2a288     10 FB 01 F6 | 	mov	result1, local02
2a28c     A7 F0 03 F6 | 	mov	ptra, fp
2a290     B2 00 A0 FD | 	call	#popregs_
2a294                 | _fatfs_cc_v_closedir_ret
2a294     2D 00 64 FD | 	ret
2a298                 | 
2a298                 | _fatfs_cc_v_readdir
2a298     01 4A 05 F6 | 	mov	COUNT_, #1
2a29c     A8 00 A0 FD | 	call	#pushregs_
2a2a0     2C F1 07 F1 | 	add	ptra, #300
2a2a4     04 4E 05 F1 | 	add	fp, #4
2a2a8     A7 12 62 FC | 	wrlong	arg01, fp
2a2ac     04 4E 05 F1 | 	add	fp, #4
2a2b0     A7 14 62 FC | 	wrlong	arg02, fp
2a2b4     04 4E 85 F1 | 	sub	fp, #4
2a2b8     A7 16 02 FB | 	rdlong	arg03, fp
2a2bc     04 16 06 F1 | 	add	arg03, #4
2a2c0     0B 13 02 FB | 	rdlong	arg01, arg03
2a2c4     08 4E 05 F1 | 	add	fp, #8
2a2c8     A7 14 02 F6 | 	mov	arg02, fp
2a2cc     0C 4E 85 F1 | 	sub	fp, #12
2a2d0     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2a2d4     28 4F 05 F1 | 	add	fp, #296
2a2d8     A7 FA 61 FC | 	wrlong	result1, fp
2a2dc     28 4F 85 F1 | 	sub	fp, #296
2a2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2e4     14 00 90 AD |  if_e	jmp	#LR__4330
2a2e8                 | '         return _set_dos_error(r);
2a2e8     28 4F 05 F1 | 	add	fp, #296
2a2ec     A7 12 02 FB | 	rdlong	arg01, fp
2a2f0     28 4F 85 F1 | 	sub	fp, #296
2a2f4     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a2f8     C4 00 90 FD | 	jmp	#LR__4333
2a2fc                 | LR__4330
2a2fc     28 4E 05 F1 | 	add	fp, #40
2a300     A7 16 CA FA | 	rdbyte	arg03, fp wz
2a304     28 4E 85 F1 | 	sub	fp, #40
2a308                 | '         return -1;
2a308     01 FA 65 A6 |  if_e	neg	result1, #1
2a30c     B0 00 90 AD |  if_e	jmp	#LR__4333
2a310     08 4E 05 F1 | 	add	fp, #8
2a314     A7 12 02 FB | 	rdlong	arg01, fp
2a318     20 4E 05 F1 | 	add	fp, #32
2a31c     A7 14 02 F6 | 	mov	arg02, fp
2a320     28 4E 85 F1 | 	sub	fp, #40
2a324     3F 16 06 F6 | 	mov	arg03, #63
2a328     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2a32c     08 4E 05 F1 | 	add	fp, #8
2a330     A7 16 02 FB | 	rdlong	arg03, fp
2a334     3F 16 06 F1 | 	add	arg03, #63
2a338     0B 01 48 FC | 	wrbyte	#0, arg03
2a33c     0C 4E 05 F1 | 	add	fp, #12
2a340     A7 16 C2 FA | 	rdbyte	arg03, fp
2a344     14 4E 85 F1 | 	sub	fp, #20
2a348     10 16 CE F7 | 	test	arg03, #16 wz
2a34c     18 00 90 AD |  if_e	jmp	#LR__4331
2a350     08 4E 05 F1 | 	add	fp, #8
2a354     A7 16 02 FB | 	rdlong	arg03, fp
2a358     08 4E 85 F1 | 	sub	fp, #8
2a35c     50 16 06 F1 | 	add	arg03, #80
2a360     0B 03 48 FC | 	wrbyte	#1, arg03
2a364     14 00 90 FD | 	jmp	#LR__4332
2a368                 | LR__4331
2a368     08 4E 05 F1 | 	add	fp, #8
2a36c     A7 16 02 FB | 	rdlong	arg03, fp
2a370     08 4E 85 F1 | 	sub	fp, #8
2a374     50 16 06 F1 | 	add	arg03, #80
2a378     0B 01 48 FC | 	wrbyte	#0, arg03
2a37c                 | LR__4332
2a37c     08 4E 05 F1 | 	add	fp, #8
2a380     A7 16 02 FB | 	rdlong	arg03, fp
2a384     04 4E 05 F1 | 	add	fp, #4
2a388     A7 14 02 FB | 	rdlong	arg02, fp
2a38c     48 16 06 F1 | 	add	arg03, #72
2a390     0B 15 62 FC | 	wrlong	arg02, arg03
2a394     04 4E 85 F1 | 	sub	fp, #4
2a398     A7 1E 02 FB | 	rdlong	local01, fp
2a39c     08 4E 05 F1 | 	add	fp, #8
2a3a0     A7 12 E2 FA | 	rdword	arg01, fp
2a3a4     02 4E 05 F1 | 	add	fp, #2
2a3a8     A7 14 E2 FA | 	rdword	arg02, fp
2a3ac     12 4E 85 F1 | 	sub	fp, #18
2a3b0     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0894
2a3b4     4C 1E 06 F1 | 	add	local01, #76
2a3b8     0F FB 61 FC | 	wrlong	result1, local01
2a3bc                 | '         ent->d_type =  (0) ;
2a3bc                 | '     }
2a3bc                 | '     ent->d_size = finfo.fsize;
2a3bc                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2a3bc                 | '     return 0;
2a3bc     00 FA 05 F6 | 	mov	result1, #0
2a3c0                 | LR__4333
2a3c0     A7 F0 03 F6 | 	mov	ptra, fp
2a3c4     B2 00 A0 FD | 	call	#popregs_
2a3c8                 | _fatfs_cc_v_readdir_ret
2a3c8     2D 00 64 FD | 	ret
2a3cc                 | 
2a3cc                 | _fatfs_cc_v_stat
2a3cc     03 4A 05 F6 | 	mov	COUNT_, #3
2a3d0     A8 00 A0 FD | 	call	#pushregs_
2a3d4     30 F1 07 F1 | 	add	ptra, #304
2a3d8     04 4E 05 F1 | 	add	fp, #4
2a3dc     A7 12 62 FC | 	wrlong	arg01, fp
2a3e0     04 4E 05 F1 | 	add	fp, #4
2a3e4     A7 14 62 FC | 	wrlong	arg02, fp
2a3e8     08 4E 85 F1 | 	sub	fp, #8
2a3ec     0A 13 02 F6 | 	mov	arg01, arg02
2a3f0     00 14 06 F6 | 	mov	arg02, #0
2a3f4     30 16 06 F6 | 	mov	arg03, #48
2a3f8     98 00 A0 FD | 	call	#\builtin_bytefill_
2a3fc     04 4E 05 F1 | 	add	fp, #4
2a400     A7 FA 01 FB | 	rdlong	result1, fp
2a404     04 4E 85 F1 | 	sub	fp, #4
2a408     FD FA C9 FA | 	rdbyte	result1, result1 wz
2a40c     2C 00 90 AD |  if_e	jmp	#LR__4340
2a410     04 4E 05 F1 | 	add	fp, #4
2a414     A7 FA 01 FB | 	rdlong	result1, fp
2a418     04 4E 85 F1 | 	sub	fp, #4
2a41c     FD FA C1 FA | 	rdbyte	result1, result1
2a420     2E FA 0D F2 | 	cmp	result1, #46 wz
2a424     04 4E 05 A1 |  if_e	add	fp, #4
2a428     A7 1E 02 AB |  if_e	rdlong	local01, fp
2a42c     04 4E 85 A1 |  if_e	sub	fp, #4
2a430     01 1E 06 A1 |  if_e	add	local01, #1
2a434     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2a438     18 00 90 5D |  if_ne	jmp	#LR__4341
2a43c                 | LR__4340
2a43c     18 4E 05 F1 | 	add	fp, #24
2a440     A7 20 48 FC | 	wrbyte	#16, fp
2a444     0C 4E 85 F1 | 	sub	fp, #12
2a448     A7 00 68 FC | 	wrlong	#0, fp
2a44c     0C 4E 85 F1 | 	sub	fp, #12
2a450     24 00 90 FD | 	jmp	#LR__4342
2a454                 | LR__4341
2a454     04 4E 05 F1 | 	add	fp, #4
2a458     A7 12 02 FB | 	rdlong	arg01, fp
2a45c     0C 4E 05 F1 | 	add	fp, #12
2a460     A7 14 02 F6 | 	mov	arg02, fp
2a464     10 4E 85 F1 | 	sub	fp, #16
2a468     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2a46c     0C 4E 05 F1 | 	add	fp, #12
2a470     A7 FA 61 FC | 	wrlong	result1, fp
2a474     0C 4E 85 F1 | 	sub	fp, #12
2a478                 | LR__4342
2a478     0C 4E 05 F1 | 	add	fp, #12
2a47c     A7 20 0A FB | 	rdlong	local02, fp wz
2a480     0C 4E 85 F1 | 	sub	fp, #12
2a484     14 00 90 AD |  if_e	jmp	#LR__4343
2a488                 | '         return _set_dos_error(r);
2a488     0C 4E 05 F1 | 	add	fp, #12
2a48c     A7 12 02 FB | 	rdlong	arg01, fp
2a490     0C 4E 85 F1 | 	sub	fp, #12
2a494     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a498     14 01 90 FD | 	jmp	#LR__4344
2a49c                 | LR__4343
2a49c     2C 4F 05 F1 | 	add	fp, #300
2a4a0     A7 48 6A FC | 	wrlong	#292, fp
2a4a4     14 4F 85 F1 | 	sub	fp, #276
2a4a8     A7 22 C2 FA | 	rdbyte	local03, fp
2a4ac     18 4E 85 F1 | 	sub	fp, #24
2a4b0     01 22 CE F7 | 	test	local03, #1 wz
2a4b4     2C 4F 05 A1 |  if_e	add	fp, #300
2a4b8     A7 22 02 AB |  if_e	rdlong	local03, fp
2a4bc     92 22 46 A5 |  if_e	or	local03, #146
2a4c0     A7 22 62 AC |  if_e	wrlong	local03, fp
2a4c4     2C 4F 85 A1 |  if_e	sub	fp, #300
2a4c8     18 4E 05 F1 | 	add	fp, #24
2a4cc     A7 22 C2 FA | 	rdbyte	local03, fp
2a4d0     18 4E 85 F1 | 	sub	fp, #24
2a4d4     10 22 CE F7 | 	test	local03, #16 wz
2a4d8     2C 4F 05 51 |  if_ne	add	fp, #300
2a4dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
2a4e0     08 00 00 5F 
2a4e4     49 22 46 55 |  if_ne	or	local03, ##4169
2a4e8     A7 22 62 5C |  if_ne	wrlong	local03, fp
2a4ec     2C 4F 85 51 |  if_ne	sub	fp, #300
2a4f0     08 4E 05 F1 | 	add	fp, #8
2a4f4     A7 22 02 FB | 	rdlong	local03, fp
2a4f8     24 4F 05 F1 | 	add	fp, #292
2a4fc     A7 20 02 FB | 	rdlong	local02, fp
2a500     08 22 06 F1 | 	add	local03, #8
2a504     11 21 62 FC | 	wrlong	local02, local03
2a508     24 4F 85 F1 | 	sub	fp, #292
2a50c     A7 22 02 FB | 	rdlong	local03, fp
2a510     0C 22 06 F1 | 	add	local03, #12
2a514     11 03 68 FC | 	wrlong	#1, local03
2a518     A7 22 02 FB | 	rdlong	local03, fp
2a51c     08 4E 05 F1 | 	add	fp, #8
2a520     A7 20 02 FB | 	rdlong	local02, fp
2a524     18 22 06 F1 | 	add	local03, #24
2a528     11 21 62 FC | 	wrlong	local02, local03
2a52c     08 4E 85 F1 | 	sub	fp, #8
2a530     A7 22 02 FB | 	rdlong	local03, fp
2a534     1C 22 06 F1 | 	add	local03, #28
2a538     01 00 80 FF 
2a53c     11 01 68 FC | 	wrlong	##512, local03
2a540     A7 20 02 FB | 	rdlong	local02, fp
2a544     10 23 02 F6 | 	mov	local03, local02
2a548     18 20 06 F1 | 	add	local02, #24
2a54c     10 21 02 FB | 	rdlong	local02, local02
2a550     FF 21 06 F1 | 	add	local02, #511
2a554     10 21 52 F6 | 	abs	local02, local02 wc
2a558     09 20 46 F0 | 	shr	local02, #9
2a55c     10 21 82 F6 | 	negc	local02, local02
2a560     20 22 06 F1 | 	add	local03, #32
2a564     11 21 62 FC | 	wrlong	local02, local03
2a568     A7 20 02 FB | 	rdlong	local02, fp
2a56c     10 23 02 F6 | 	mov	local03, local02
2a570     10 1F 02 F6 | 	mov	local01, local02
2a574     0C 4E 05 F1 | 	add	fp, #12
2a578     A7 12 E2 FA | 	rdword	arg01, fp
2a57c     02 4E 05 F1 | 	add	fp, #2
2a580     A7 14 E2 FA | 	rdword	arg02, fp
2a584     16 4E 85 F1 | 	sub	fp, #22
2a588     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0894
2a58c     2C 1E 06 F1 | 	add	local01, #44
2a590     0F FB 61 FC | 	wrlong	result1, local01
2a594     28 20 06 F1 | 	add	local02, #40
2a598     10 FB 61 FC | 	wrlong	result1, local02
2a59c     24 22 06 F1 | 	add	local03, #36
2a5a0     11 FB 61 FC | 	wrlong	result1, local03
2a5a4                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2a5a4                 | '     }
2a5a4                 | '     buf->st_mode = mode;
2a5a4                 | '     buf->st_nlink = 1;
2a5a4                 | '     buf->st_size = finfo.fsize;
2a5a4                 | '     buf->st_blksize = 512;
2a5a4                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2a5a4                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2a5a4                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a5a4                 | '     return r;
2a5a4     0C 4E 05 F1 | 	add	fp, #12
2a5a8     A7 FA 01 FB | 	rdlong	result1, fp
2a5ac     0C 4E 85 F1 | 	sub	fp, #12
2a5b0                 | LR__4344
2a5b0     A7 F0 03 F6 | 	mov	ptra, fp
2a5b4     B2 00 A0 FD | 	call	#popregs_
2a5b8                 | _fatfs_cc_v_stat_ret
2a5b8     2D 00 64 FD | 	ret
2a5bc                 | 
2a5bc                 | _fatfs_cc_v_read
2a5bc     00 4A 05 F6 | 	mov	COUNT_, #0
2a5c0     A8 00 A0 FD | 	call	#pushregs_
2a5c4     1C F0 07 F1 | 	add	ptra, #28
2a5c8     04 4E 05 F1 | 	add	fp, #4
2a5cc     A7 12 62 FC | 	wrlong	arg01, fp
2a5d0     04 4E 05 F1 | 	add	fp, #4
2a5d4     A7 14 62 FC | 	wrlong	arg02, fp
2a5d8     04 4E 05 F1 | 	add	fp, #4
2a5dc     A7 16 62 FC | 	wrlong	arg03, fp
2a5e0     08 4E 85 F1 | 	sub	fp, #8
2a5e4     A7 12 02 FB | 	rdlong	arg01, fp
2a5e8     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a5ec     0C 4E 05 F1 | 	add	fp, #12
2a5f0     A7 12 62 FC | 	wrlong	arg01, fp
2a5f4     10 4E 85 F1 | 	sub	fp, #16
2a5f8                 | '         return _seterror( 5 );
2a5f8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a5fc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a600     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a604     01 FA 65 A6 |  if_e	neg	result1, #1
2a608     B8 00 90 AD |  if_e	jmp	#LR__4352
2a60c     10 4E 05 F1 | 	add	fp, #16
2a610     A7 12 02 FB | 	rdlong	arg01, fp
2a614     02 00 00 FF 
2a618     14 12 06 F1 | 	add	arg01, ##1044
2a61c     08 4E 85 F1 | 	sub	fp, #8
2a620     A7 14 02 FB | 	rdlong	arg02, fp
2a624     04 4E 05 F1 | 	add	fp, #4
2a628     A7 16 02 FB | 	rdlong	arg03, fp
2a62c     0C 4E 05 F1 | 	add	fp, #12
2a630     A7 18 02 F6 | 	mov	arg04, fp
2a634     18 4E 85 F1 | 	sub	fp, #24
2a638     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2a63c     14 4E 05 F1 | 	add	fp, #20
2a640     A7 FA 61 FC | 	wrlong	result1, fp
2a644     14 4E 85 F1 | 	sub	fp, #20
2a648     00 FA 0D F2 | 	cmp	result1, #0 wz
2a64c     34 00 90 AD |  if_e	jmp	#LR__4350
2a650     04 4E 05 F1 | 	add	fp, #4
2a654     A7 18 02 FB | 	rdlong	arg04, fp
2a658     0C 17 02 F6 | 	mov	arg03, arg04
2a65c     08 18 06 F1 | 	add	arg04, #8
2a660     0C 19 02 FB | 	rdlong	arg04, arg04
2a664     20 18 46 F5 | 	or	arg04, #32
2a668     08 16 06 F1 | 	add	arg03, #8
2a66c     0B 19 62 FC | 	wrlong	arg04, arg03
2a670                 | '         fil->state |=  (0x20) ;
2a670                 | '         return _set_dos_error(r);
2a670     10 4E 05 F1 | 	add	fp, #16
2a674     A7 12 02 FB | 	rdlong	arg01, fp
2a678     14 4E 85 F1 | 	sub	fp, #20
2a67c     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a680     40 00 90 FD | 	jmp	#LR__4352
2a684                 | LR__4350
2a684     18 4E 05 F1 | 	add	fp, #24
2a688     A7 FA 09 FB | 	rdlong	result1, fp wz
2a68c     18 4E 85 F1 | 	sub	fp, #24
2a690     24 00 90 5D |  if_ne	jmp	#LR__4351
2a694     04 4E 05 F1 | 	add	fp, #4
2a698     A7 FA 01 FB | 	rdlong	result1, fp
2a69c     FD 18 02 F6 | 	mov	arg04, result1
2a6a0     04 4E 85 F1 | 	sub	fp, #4
2a6a4     08 FA 05 F1 | 	add	result1, #8
2a6a8     FD FA 01 FB | 	rdlong	result1, result1
2a6ac     10 FA 45 F5 | 	or	result1, #16
2a6b0     08 18 06 F1 | 	add	arg04, #8
2a6b4     0C FB 61 FC | 	wrlong	result1, arg04
2a6b8                 | LR__4351
2a6b8                 | '         fil->state |=  (0x10) ;
2a6b8                 | '     }
2a6b8                 | '     return x;
2a6b8     18 4E 05 F1 | 	add	fp, #24
2a6bc     A7 FA 01 FB | 	rdlong	result1, fp
2a6c0     18 4E 85 F1 | 	sub	fp, #24
2a6c4                 | LR__4352
2a6c4     A7 F0 03 F6 | 	mov	ptra, fp
2a6c8     B2 00 A0 FD | 	call	#popregs_
2a6cc                 | _fatfs_cc_v_read_ret
2a6cc     2D 00 64 FD | 	ret
2a6d0                 | 
2a6d0                 | _fatfs_cc_v_write
2a6d0     00 4A 05 F6 | 	mov	COUNT_, #0
2a6d4     A8 00 A0 FD | 	call	#pushregs_
2a6d8     1C F0 07 F1 | 	add	ptra, #28
2a6dc     04 4E 05 F1 | 	add	fp, #4
2a6e0     A7 12 62 FC | 	wrlong	arg01, fp
2a6e4     04 4E 05 F1 | 	add	fp, #4
2a6e8     A7 14 62 FC | 	wrlong	arg02, fp
2a6ec     04 4E 05 F1 | 	add	fp, #4
2a6f0     A7 16 62 FC | 	wrlong	arg03, fp
2a6f4     08 4E 85 F1 | 	sub	fp, #8
2a6f8     A7 12 02 FB | 	rdlong	arg01, fp
2a6fc     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a700     0C 4E 05 F1 | 	add	fp, #12
2a704     A7 12 62 FC | 	wrlong	arg01, fp
2a708     10 4E 85 F1 | 	sub	fp, #16
2a70c                 | '         return _seterror( 5 );
2a70c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a710     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a714     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a718     01 FA 65 A6 |  if_e	neg	result1, #1
2a71c     84 00 90 AD |  if_e	jmp	#LR__4361
2a720     10 4E 05 F1 | 	add	fp, #16
2a724     A7 12 02 FB | 	rdlong	arg01, fp
2a728     02 00 00 FF 
2a72c     14 12 06 F1 | 	add	arg01, ##1044
2a730     08 4E 85 F1 | 	sub	fp, #8
2a734     A7 14 02 FB | 	rdlong	arg02, fp
2a738     04 4E 05 F1 | 	add	fp, #4
2a73c     A7 16 02 FB | 	rdlong	arg03, fp
2a740     0C 4E 05 F1 | 	add	fp, #12
2a744     A7 18 02 F6 | 	mov	arg04, fp
2a748     18 4E 85 F1 | 	sub	fp, #24
2a74c     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2a750     14 4E 05 F1 | 	add	fp, #20
2a754     A7 FA 61 FC | 	wrlong	result1, fp
2a758     14 4E 85 F1 | 	sub	fp, #20
2a75c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a760     34 00 90 AD |  if_e	jmp	#LR__4360
2a764     04 4E 05 F1 | 	add	fp, #4
2a768     A7 18 02 FB | 	rdlong	arg04, fp
2a76c     0C 17 02 F6 | 	mov	arg03, arg04
2a770     08 18 06 F1 | 	add	arg04, #8
2a774     0C 19 02 FB | 	rdlong	arg04, arg04
2a778     20 18 46 F5 | 	or	arg04, #32
2a77c     08 16 06 F1 | 	add	arg03, #8
2a780     0B 19 62 FC | 	wrlong	arg04, arg03
2a784                 | '         fil->state |=  (0x20) ;
2a784                 | '         return _set_dos_error(r);
2a784     10 4E 05 F1 | 	add	fp, #16
2a788     A7 12 02 FB | 	rdlong	arg01, fp
2a78c     14 4E 85 F1 | 	sub	fp, #20
2a790     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a794     0C 00 90 FD | 	jmp	#LR__4361
2a798                 | LR__4360
2a798                 | '     }
2a798                 | '     return x;
2a798     18 4E 05 F1 | 	add	fp, #24
2a79c     A7 FA 01 FB | 	rdlong	result1, fp
2a7a0     18 4E 85 F1 | 	sub	fp, #24
2a7a4                 | LR__4361
2a7a4     A7 F0 03 F6 | 	mov	ptra, fp
2a7a8     B2 00 A0 FD | 	call	#popregs_
2a7ac                 | _fatfs_cc_v_write_ret
2a7ac     2D 00 64 FD | 	ret
2a7b0                 | 
2a7b0                 | _fatfs_cc_v_lseek
2a7b0     04 4A 05 F6 | 	mov	COUNT_, #4
2a7b4     A8 00 A0 FD | 	call	#pushregs_
2a7b8     0A 1F 02 F6 | 	mov	local01, arg02
2a7bc     0B 21 02 F6 | 	mov	local02, arg03
2a7c0     09 23 02 FB | 	rdlong	local03, arg01
2a7c4     02 00 00 FF 
2a7c8     14 22 0E F1 | 	add	local03, ##1044 wz
2a7cc                 | '         return _seterror( 5 );
2a7cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a7d0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a7d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a7d8     01 FA 65 A6 |  if_e	neg	result1, #1
2a7dc     4C 00 90 AD |  if_e	jmp	#LR__4372
2a7e0     00 20 0E F2 | 	cmp	local02, #0 wz
2a7e4     24 00 90 AD |  if_e	jmp	#LR__4370
2a7e8     01 20 0E F2 | 	cmp	local02, #1 wz
2a7ec     14 22 06 A1 |  if_e	add	local03, #20
2a7f0     11 25 02 AB |  if_e	rdlong	local04, local03
2a7f4     14 22 86 A1 |  if_e	sub	local03, #20
2a7f8     12 1F 02 A1 |  if_e	add	local01, local04
2a7fc     0C 22 06 51 |  if_ne	add	local03, #12
2a800     11 25 02 5B |  if_ne	rdlong	local04, local03
2a804     0C 22 86 51 |  if_ne	sub	local03, #12
2a808     12 1F 02 51 |  if_ne	add	local01, local04
2a80c                 | LR__4370
2a80c     0F 15 02 F6 | 	mov	arg02, local01
2a810     11 13 02 F6 | 	mov	arg01, local03
2a814     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2a818     FD 12 0A F6 | 	mov	arg01, result1 wz
2a81c     08 00 90 AD |  if_e	jmp	#LR__4371
2a820                 | '         return _set_dos_error(result);
2a820     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a824     04 00 90 FD | 	jmp	#LR__4372
2a828                 | LR__4371
2a828                 | '     }
2a828                 | '     return offset;
2a828     0F FB 01 F6 | 	mov	result1, local01
2a82c                 | LR__4372
2a82c     A7 F0 03 F6 | 	mov	ptra, fp
2a830     B2 00 A0 FD | 	call	#popregs_
2a834                 | _fatfs_cc_v_lseek_ret
2a834     2D 00 64 FD | 	ret
2a838                 | 
2a838                 | _fatfs_cc_v_ioctl
2a838                 | ' {
2a838                 | '     return _seterror( 10 );
2a838     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a83c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2a840     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a844     01 FA 65 F6 | 	neg	result1, #1
2a848                 | _fatfs_cc_v_ioctl_ret
2a848     2D 00 64 FD | 	ret
2a84c                 | 
2a84c                 | _fatfs_cc_v_mkdir
2a84c     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2a850     FD 12 02 F6 | 	mov	arg01, result1
2a854                 | ' 
2a854                 | '     r = f_mkdir(name);
2a854                 | '     return _set_dos_error(r);
2a854     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a858                 | _fatfs_cc_v_mkdir_ret
2a858     2D 00 64 FD | 	ret
2a85c                 | 
2a85c                 | _fatfs_cc_v_remove
2a85c     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2a860     FD 12 02 F6 | 	mov	arg01, result1
2a864                 | ' 
2a864                 | '     r = f_unlink(name);
2a864                 | '     return _set_dos_error(r);
2a864     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a868                 | _fatfs_cc_v_remove_ret
2a868     2D 00 64 FD | 	ret
2a86c                 | 
2a86c                 | _fatfs_cc_v_rmdir
2a86c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2a870     FD 12 02 F6 | 	mov	arg01, result1
2a874                 | ' 
2a874                 | '     r = f_unlink(name);
2a874                 | '     return _set_dos_error(r);
2a874     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a878                 | _fatfs_cc_v_rmdir_ret
2a878     2D 00 64 FD | 	ret
2a87c                 | 
2a87c                 | _fatfs_cc_v_rename
2a87c     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2a880     FD 12 02 F6 | 	mov	arg01, result1
2a884                 | '     return _set_dos_error(r);
2a884     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a888                 | _fatfs_cc_v_rename_ret
2a888     2D 00 64 FD | 	ret
2a88c                 | 
2a88c                 | _fatfs_cc_v_open
2a88c     07 4A 05 F6 | 	mov	COUNT_, #7
2a890     A8 00 A0 FD | 	call	#pushregs_
2a894     09 1F 02 F6 | 	mov	local01, arg01
2a898     0A 21 02 F6 | 	mov	local02, arg02
2a89c     0B 23 02 F6 | 	mov	local03, arg03
2a8a0     03 00 00 FF 
2a8a4     3C 12 06 F6 | 	mov	arg01, ##1596
2a8a8                 | '     return _gc_alloc(size);
2a8a8     10 14 06 F6 | 	mov	arg02, #16
2a8ac     A4 58 BF FD | 	call	#__system___gc_doalloc
2a8b0     FD 24 0A F6 | 	mov	local04, result1 wz
2a8b4                 | '       return _seterror( 7 );
2a8b4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a8b8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a8bc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a8c0     01 FA 65 A6 |  if_e	neg	result1, #1
2a8c4     98 00 90 AD |  if_e	jmp	#LR__4386
2a8c8     12 13 02 F6 | 	mov	arg01, local04
2a8cc     00 14 06 F6 | 	mov	arg02, #0
2a8d0     03 00 00 FF 
2a8d4     3C 16 06 F6 | 	mov	arg03, ##1596
2a8d8     98 00 A0 FD | 	call	#\builtin_bytefill_
2a8dc                 | '   switch (flags & 3) {
2a8dc     11 27 02 F6 | 	mov	local05, local03
2a8e0     03 26 0E F5 | 	and	local05, #3 wz
2a8e4     0C 00 90 AD |  if_e	jmp	#LR__4380
2a8e8     01 26 0E F2 | 	cmp	local05, #1 wz
2a8ec     0C 00 90 AD |  if_e	jmp	#LR__4381
2a8f0     10 00 90 FD | 	jmp	#LR__4382
2a8f4                 | LR__4380
2a8f4     01 28 06 F6 | 	mov	local06, #1
2a8f8                 | '       fs_flags =  0x01 ;
2a8f8                 | '       break;
2a8f8     0C 00 90 FD | 	jmp	#LR__4383
2a8fc                 | LR__4381
2a8fc     02 28 06 F6 | 	mov	local06, #2
2a900                 | '       fs_flags =  0x02 ;
2a900                 | '       break;
2a900     04 00 90 FD | 	jmp	#LR__4383
2a904                 | LR__4382
2a904     03 28 06 F6 | 	mov	local06, #3
2a908                 | '       fs_flags =  0x01  |  0x02 ;
2a908                 | '       break;
2a908                 | LR__4383
2a908     08 22 CE F7 | 	test	local03, #8 wz
2a90c     18 28 46 55 |  if_ne	or	local06, #24
2a910     08 00 90 5D |  if_ne	jmp	#LR__4384
2a914     20 22 CE F7 | 	test	local03, #32 wz
2a918     30 28 46 55 |  if_ne	or	local06, #48
2a91c                 | LR__4384
2a91c     02 00 00 FF 
2a920     14 24 06 F1 | 	add	local04, ##1044
2a924     12 13 02 F6 | 	mov	arg01, local04
2a928     02 00 00 FF 
2a92c     14 24 86 F1 | 	sub	local04, ##1044
2a930     10 15 02 F6 | 	mov	arg02, local02
2a934     14 17 02 F6 | 	mov	arg03, local06
2a938     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2a93c     FD 2A 0A F6 | 	mov	local07, result1 wz
2a940     14 00 90 AD |  if_e	jmp	#LR__4385
2a944     12 13 02 F6 | 	mov	arg01, local04
2a948                 | '     return _gc_free(ptr);
2a948     14 59 BF FD | 	call	#__system___gc_free
2a94c                 | '     free(f);
2a94c                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a94c                 | '     return _set_dos_error(r);
2a94c     15 13 02 F6 | 	mov	arg01, local07
2a950     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a954     08 00 90 FD | 	jmp	#LR__4386
2a958                 | LR__4385
2a958     0F 25 62 FC | 	wrlong	local04, local01
2a95c                 | '   }
2a95c                 | '   fil->vfsdata = f;
2a95c                 | '   return 0;
2a95c     00 FA 05 F6 | 	mov	result1, #0
2a960                 | LR__4386
2a960     A7 F0 03 F6 | 	mov	ptra, fp
2a964     B2 00 A0 FD | 	call	#popregs_
2a968                 | _fatfs_cc_v_open_ret
2a968     2D 00 64 FD | 	ret
2a96c                 | 
2a96c                 | _fatfs_cc_v_flush
2a96c     09 13 02 FB | 	rdlong	arg01, arg01
2a970     02 00 00 FF 
2a974     14 12 0E F1 | 	add	arg01, ##1044 wz
2a978                 | '         return _seterror( 5 );
2a978     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a97c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a980     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a984     01 FA 65 A6 |  if_e	neg	result1, #1
2a988     0C 00 90 AD |  if_e	jmp	#LR__4390
2a98c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2a990     FD 12 02 F6 | 	mov	arg01, result1
2a994                 | '     }
2a994                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a994                 | '     result = f_sync(f);
2a994                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a994                 | '     return _set_dos_error(result);
2a994     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0896
2a998                 | LR__4390
2a998                 | _fatfs_cc_v_flush_ret
2a998     2D 00 64 FD | 	ret
2a99c                 | 
2a99c                 | _fatfs_cc_v_init
2a99c                 | ' {
2a99c                 | '     return 0;
2a99c     00 FA 05 F6 | 	mov	result1, #0
2a9a0                 | _fatfs_cc_v_init_ret
2a9a0     2D 00 64 FD | 	ret
2a9a4                 | 
2a9a4                 | _fatfs_cc_v_deinit
2a9a4     5C 01 00 FF 
2a9a8     18 15 06 F6 | 	mov	arg02, ##@LR__4586
2a9ac     00 12 06 F6 | 	mov	arg01, #0
2a9b0     00 16 06 F6 | 	mov	arg03, #0
2a9b4     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2a9b8     01 00 00 FF 
2a9bc     08 E4 05 F1 | 	add	objptr, ##520
2a9c0     F2 12 02 FB | 	rdlong	arg01, objptr
2a9c4     04 E4 05 F1 | 	add	objptr, #4
2a9c8     F2 14 02 FB | 	rdlong	arg02, objptr
2a9cc     01 00 00 FF 
2a9d0     0C E4 85 F1 | 	sub	objptr, ##524
2a9d4     54 40 BF FD | 	call	#__system___freepins
2a9d8                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a9d8                 | '     _freepins(f_pinmask);
2a9d8                 | '     return 0;
2a9d8     00 FA 05 F6 | 	mov	result1, #0
2a9dc                 | _fatfs_cc_v_deinit_ret
2a9dc     2D 00 64 FD | 	ret
2a9e0                 | 
2a9e0                 | _fatfs_cc_get_vfs
2a9e0     01 4A 05 F6 | 	mov	COUNT_, #1
2a9e4     A8 00 A0 FD | 	call	#pushregs_
2a9e8     09 1F 02 F6 | 	mov	local01, arg01
2a9ec     50 12 06 F6 | 	mov	arg01, #80
2a9f0     30 57 BF FD | 	call	#__system___gc_alloc_managed
2a9f4     FD 12 02 F6 | 	mov	arg01, result1
2a9f8     F2 FA 01 F6 | 	mov	result1, objptr
2a9fc     00 28 04 FF 
2aa00     00 FA 45 F5 | 	or	result1, ##139460608
2aa04     09 FB 61 FC | 	wrlong	result1, arg01
2aa08     F2 FA 01 F6 | 	mov	result1, objptr
2aa0c     00 30 04 FF 
2aa10     00 FA 45 F5 | 	or	result1, ##140509184
2aa14     04 12 06 F1 | 	add	arg01, #4
2aa18     09 FB 61 FC | 	wrlong	result1, arg01
2aa1c     F2 FA 01 F6 | 	mov	result1, objptr
2aa20     00 38 04 FF 
2aa24     00 FA 45 F5 | 	or	result1, ##141557760
2aa28     04 12 06 F1 | 	add	arg01, #4
2aa2c     09 FB 61 FC | 	wrlong	result1, arg01
2aa30     F2 FA 01 F6 | 	mov	result1, objptr
2aa34     00 40 04 FF 
2aa38     00 FA 45 F5 | 	or	result1, ##142606336
2aa3c     04 12 06 F1 | 	add	arg01, #4
2aa40     09 FB 61 FC | 	wrlong	result1, arg01
2aa44     F2 FA 01 F6 | 	mov	result1, objptr
2aa48     00 48 04 FF 
2aa4c     00 FA 45 F5 | 	or	result1, ##143654912
2aa50     04 12 06 F1 | 	add	arg01, #4
2aa54     09 FB 61 FC | 	wrlong	result1, arg01
2aa58     04 12 06 F1 | 	add	arg01, #4
2aa5c     09 01 68 FC | 	wrlong	#0, arg01
2aa60     04 12 06 F1 | 	add	arg01, #4
2aa64     09 1F 62 FC | 	wrlong	local01, arg01
2aa68     04 12 06 F1 | 	add	arg01, #4
2aa6c     09 01 68 FC | 	wrlong	#0, arg01
2aa70     F2 FA 01 F6 | 	mov	result1, objptr
2aa74     00 50 04 FF 
2aa78     00 FA 45 F5 | 	or	result1, ##144703488
2aa7c     04 12 06 F1 | 	add	arg01, #4
2aa80     09 FB 61 FC | 	wrlong	result1, arg01
2aa84     F2 FA 01 F6 | 	mov	result1, objptr
2aa88     00 58 04 FF 
2aa8c     00 FA 45 F5 | 	or	result1, ##145752064
2aa90     04 12 06 F1 | 	add	arg01, #4
2aa94     09 FB 61 FC | 	wrlong	result1, arg01
2aa98     F2 FA 01 F6 | 	mov	result1, objptr
2aa9c     00 60 04 FF 
2aaa0     00 FA 45 F5 | 	or	result1, ##146800640
2aaa4     04 12 06 F1 | 	add	arg01, #4
2aaa8     09 FB 61 FC | 	wrlong	result1, arg01
2aaac     F2 FA 01 F6 | 	mov	result1, objptr
2aab0     00 68 04 FF 
2aab4     00 FA 45 F5 | 	or	result1, ##147849216
2aab8     04 12 06 F1 | 	add	arg01, #4
2aabc     09 FB 61 FC | 	wrlong	result1, arg01
2aac0     F2 FA 01 F6 | 	mov	result1, objptr
2aac4     00 70 04 FF 
2aac8     00 FA 45 F5 | 	or	result1, ##148897792
2aacc     04 12 06 F1 | 	add	arg01, #4
2aad0     09 FB 61 FC | 	wrlong	result1, arg01
2aad4     F2 FA 01 F6 | 	mov	result1, objptr
2aad8     00 78 04 FF 
2aadc     00 FA 45 F5 | 	or	result1, ##149946368
2aae0     04 12 06 F1 | 	add	arg01, #4
2aae4     09 FB 61 FC | 	wrlong	result1, arg01
2aae8     F2 FA 01 F6 | 	mov	result1, objptr
2aaec     00 80 04 FF 
2aaf0     00 FA 45 F5 | 	or	result1, ##150994944
2aaf4     04 12 06 F1 | 	add	arg01, #4
2aaf8     09 FB 61 FC | 	wrlong	result1, arg01
2aafc     F2 FA 01 F6 | 	mov	result1, objptr
2ab00     00 88 04 FF 
2ab04     00 FA 45 F5 | 	or	result1, ##152043520
2ab08     04 12 06 F1 | 	add	arg01, #4
2ab0c     09 FB 61 FC | 	wrlong	result1, arg01
2ab10     F2 FA 01 F6 | 	mov	result1, objptr
2ab14     00 90 04 FF 
2ab18     00 FA 45 F5 | 	or	result1, ##153092096
2ab1c     04 12 06 F1 | 	add	arg01, #4
2ab20     09 FB 61 FC | 	wrlong	result1, arg01
2ab24     F2 FA 01 F6 | 	mov	result1, objptr
2ab28     00 98 04 FF 
2ab2c     00 FA 45 F5 | 	or	result1, ##154140672
2ab30     04 12 06 F1 | 	add	arg01, #4
2ab34     09 FB 61 FC | 	wrlong	result1, arg01
2ab38     F2 FA 01 F6 | 	mov	result1, objptr
2ab3c     00 A0 04 FF 
2ab40     00 FA 45 F5 | 	or	result1, ##155189248
2ab44     04 12 06 F1 | 	add	arg01, #4
2ab48     09 FB 61 FC | 	wrlong	result1, arg01
2ab4c     F2 FA 01 F6 | 	mov	result1, objptr
2ab50     00 A8 04 FF 
2ab54     00 FA 45 F5 | 	or	result1, ##156237824
2ab58     04 12 06 F1 | 	add	arg01, #4
2ab5c     09 FB 61 FC | 	wrlong	result1, arg01
2ab60     4C 12 86 F1 | 	sub	arg01, #76
2ab64                 | ' 
2ab64                 | '     v->close = &v_close;
2ab64                 | '     v->read = &v_read;
2ab64                 | '     v->write = &v_write;
2ab64                 | '     v->lseek = &v_lseek;
2ab64                 | '     v->ioctl = &v_ioctl;
2ab64                 | '     v->flush = 0;
2ab64                 | '     v->vfs_data = ptr;
2ab64                 | '     v->reserved = 0;
2ab64                 | ' 
2ab64                 | '     v->open = &v_open;
2ab64                 | '     v->creat = &v_creat;
2ab64                 | '     v->opendir = &v_opendir;
2ab64                 | '     v->closedir = &v_closedir;
2ab64                 | '     v->readdir = &v_readdir;
2ab64                 | '     v->stat = &v_stat;
2ab64                 | ' 
2ab64                 | '     v->mkdir = &v_mkdir;
2ab64                 | '     v->rmdir = &v_rmdir;
2ab64                 | ' 
2ab64                 | '     v->remove = &v_remove;
2ab64                 | '     v->rename = &v_rename;
2ab64                 | ' 
2ab64                 | '     v->init = &v_init;
2ab64                 | '     v->deinit = &v_deinit;
2ab64                 | ' 
2ab64                 | '     return v;
2ab64     09 FB 01 F6 | 	mov	result1, arg01
2ab68     A7 F0 03 F6 | 	mov	ptra, fp
2ab6c     B2 00 A0 FD | 	call	#popregs_
2ab70                 | _fatfs_cc_get_vfs_ret
2ab70     2D 00 64 FD | 	ret
2ab74                 | 
2ab74                 | _fatfs_cc_xmit_mmc_1043
2ab74     01 00 00 FF 
2ab78     10 E4 05 F1 | 	add	objptr, ##528
2ab7c     F2 00 02 FB | 	rdlong	_var01, objptr
2ab80     08 E4 05 F1 | 	add	objptr, #8
2ab84     F2 02 02 FB | 	rdlong	_var02, objptr
2ab88     01 00 00 FF 
2ab8c     18 E4 85 F1 | 	sub	objptr, ##536
2ab90     40 02 62 FD | 	dirl	_var02
2ab94     28 02 64 FD | 	setq	#1
2ab98     09 05 02 FB | 	rdlong	_var03, arg01
2ab9c     69 04 62 FD | 	rev	_var03
2aba0     1B 04 FE F9 | 	movbyts	_var03, #27
2aba4     01 05 22 FC | 	wypin	_var03, _var02
2aba8     0A 05 02 F6 | 	mov	_var03, arg02
2abac     02 14 4E F0 | 	shr	arg02, #2 wz
2abb0     03 04 66 F0 | 	shl	_var03, #3
2abb4     00 05 22 FC | 	wypin	_var03, _var01
2abb8     41 02 62 FD | 	dirh	_var02
2abbc     08 12 06 F1 | 	add	arg01, #8
2abc0     69 06 62 FD | 	rev	_var04
2abc4     1B 06 FE F9 | 	movbyts	_var04, #27
2abc8                 | LR__4400
2abc8     01 07 22 5C |  if_ne	wypin	_var04, _var02
2abcc     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2abd0     04 12 06 51 |  if_ne	add	arg01, #4
2abd4     69 06 62 5D |  if_ne	rev	_var04
2abd8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2abdc                 | LR__4401
2abdc     40 02 72 5D |  if_ne	testp	_var02 wc
2abe0     F8 FF 9F 1D |  if_a	jmp	#LR__4401
2abe4     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4400
2abe8                 | LR__4402
2abe8     40 00 72 FD | 	testp	_var01 wc
2abec     F8 FF 9F 3D |  if_ae	jmp	#LR__4402
2abf0     40 02 62 FD | 	dirl	_var02
2abf4     FF FF FF FF 
2abf8     01 FF 2B FC | 	wypin	##-1, _var02
2abfc     41 02 62 FD | 	dirh	_var02
2ac00                 | _fatfs_cc_xmit_mmc_1043_ret
2ac00     2D 00 64 FD | 	ret
2ac04                 | 
2ac04                 | _fatfs_cc_rcvr_mmc_1050
2ac04     01 00 00 FF 
2ac08     10 E4 05 F1 | 	add	objptr, ##528
2ac0c     F2 00 02 FB | 	rdlong	_var01, objptr
2ac10     0C E4 05 F1 | 	add	objptr, #12
2ac14     F2 02 02 FB | 	rdlong	_var02, objptr
2ac18     01 00 00 FF 
2ac1c     1C E4 85 F1 | 	sub	objptr, ##540
2ac20     01 03 08 FC | 	akpin	_var02
2ac24     0A 05 0A F6 | 	mov	_var03, arg02 wz
2ac28     02 04 4E F0 | 	shr	_var03, #2 wz
2ac2c     30 00 90 AD |  if_e	jmp	#LR__4412
2ac30     02 07 02 F6 | 	mov	_var04, _var03
2ac34     05 06 66 F0 | 	shl	_var04, #5
2ac38     00 07 22 FC | 	wypin	_var04, _var01
2ac3c     01 7F 18 FC | 	wxpin	#63, _var02
2ac40                 | LR__4410
2ac40                 | LR__4411
2ac40     40 02 72 FD | 	testp	_var02 wc
2ac44     F8 FF 9F 3D |  if_ae	jmp	#LR__4411
2ac48     01 07 8A FA | 	rdpin	_var04, _var02
2ac4c     69 06 62 FD | 	rev	_var04
2ac50     1B 06 FE F9 | 	movbyts	_var04, #27
2ac54     09 07 62 FC | 	wrlong	_var04, arg01
2ac58     04 12 06 F1 | 	add	arg01, #4
2ac5c     F8 05 6E FB | 	djnz	_var03, #LR__4410
2ac60                 | LR__4412
2ac60     03 14 0E F5 | 	and	arg02, #3 wz
2ac64     24 00 90 AD |  if_e	jmp	#LR__4415
2ac68     01 4F 18 FC | 	wxpin	#39, _var02
2ac6c                 | LR__4413
2ac6c     00 11 28 FC | 	wypin	#8, _var01
2ac70                 | LR__4414
2ac70     40 02 72 FD | 	testp	_var02 wc
2ac74     F8 FF 9F 3D |  if_ae	jmp	#LR__4414
2ac78     01 07 8A FA | 	rdpin	_var04, _var02
2ac7c     69 06 62 FD | 	rev	_var04
2ac80     09 07 42 FC | 	wrbyte	_var04, arg01
2ac84     01 12 06 F1 | 	add	arg01, #1
2ac88     F8 15 6E FB | 	djnz	arg02, #LR__4413
2ac8c                 | LR__4415
2ac8c                 | _fatfs_cc_rcvr_mmc_1050_ret
2ac8c     2D 00 64 FD | 	ret
2ac90                 | 
2ac90                 | _fatfs_cc_wait_ready_1054
2ac90     01 4A 05 F6 | 	mov	COUNT_, #1
2ac94     A8 00 A0 FD | 	call	#pushregs_
2ac98     10 F0 07 F1 | 	add	ptra, #16
2ac9c     1A FA 61 FD | 	getct	result1
2aca0     08 4E 05 F1 | 	add	fp, #8
2aca4     A7 FA 61 FC | 	wrlong	result1, fp
2aca8     14 1E 06 FB | 	rdlong	local01, #20
2acac     01 1E 46 F0 | 	shr	local01, #1
2acb0     04 4E 05 F1 | 	add	fp, #4
2acb4     A7 1E 62 FC | 	wrlong	local01, fp
2acb8     0C 4E 85 F1 | 	sub	fp, #12
2acbc                 | ' {
2acbc                 | ' 	BYTE d;
2acbc                 | ' 	UINT tmr, tmout;
2acbc                 | ' 
2acbc                 | ' 	tmr = _cnt();
2acbc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2acbc                 | ' 	for(;;) {
2acbc                 | LR__4420
2acbc     04 4E 05 F1 | 	add	fp, #4
2acc0     A7 12 02 F6 | 	mov	arg01, fp
2acc4     04 4E 85 F1 | 	sub	fp, #4
2acc8     01 14 06 F6 | 	mov	arg02, #1
2accc     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2acd0     04 4E 05 F1 | 	add	fp, #4
2acd4     A7 1E C2 FA | 	rdbyte	local01, fp
2acd8     04 4E 85 F1 | 	sub	fp, #4
2acdc     FF 1E 0E F2 | 	cmp	local01, #255 wz
2ace0     01 FA 05 A6 |  if_e	mov	result1, #1
2ace4     28 00 90 AD |  if_e	jmp	#LR__4421
2ace8     1A FA 61 FD | 	getct	result1
2acec     08 4E 05 F1 | 	add	fp, #8
2acf0     A7 1E 02 FB | 	rdlong	local01, fp
2acf4     0F FB 81 F1 | 	sub	result1, local01
2acf8     04 4E 05 F1 | 	add	fp, #4
2acfc     A7 1E 02 FB | 	rdlong	local01, fp
2ad00     0C 4E 85 F1 | 	sub	fp, #12
2ad04     0F FB 11 F2 | 	cmp	result1, local01 wc
2ad08     00 FA 05 36 |  if_ae	mov	result1, #0
2ad0c     AC FF 9F CD |  if_b	jmp	#LR__4420
2ad10                 | LR__4421
2ad10     A7 F0 03 F6 | 	mov	ptra, fp
2ad14     B2 00 A0 FD | 	call	#popregs_
2ad18                 | _fatfs_cc_wait_ready_1054_ret
2ad18     2D 00 64 FD | 	ret
2ad1c                 | 
2ad1c                 | _fatfs_cc_deselect_1060
2ad1c     00 4A 05 F6 | 	mov	COUNT_, #0
2ad20     A8 00 A0 FD | 	call	#pushregs_
2ad24     14 F0 07 F1 | 	add	ptra, #20
2ad28     01 00 00 FF 
2ad2c     14 E4 05 F1 | 	add	objptr, ##532
2ad30     F2 14 02 FB | 	rdlong	arg02, objptr
2ad34     04 4E 05 F1 | 	add	fp, #4
2ad38     A7 14 62 FC | 	wrlong	arg02, fp
2ad3c     04 E4 85 F1 | 	sub	objptr, #4
2ad40     F2 14 02 FB | 	rdlong	arg02, objptr
2ad44     04 4E 05 F1 | 	add	fp, #4
2ad48     A7 14 62 FC | 	wrlong	arg02, fp
2ad4c     08 E4 05 F1 | 	add	objptr, #8
2ad50     F2 14 02 FB | 	rdlong	arg02, objptr
2ad54     04 4E 05 F1 | 	add	fp, #4
2ad58     A7 14 62 FC | 	wrlong	arg02, fp
2ad5c     04 E4 05 F1 | 	add	objptr, #4
2ad60     F2 14 02 FB | 	rdlong	arg02, objptr
2ad64     01 00 00 FF 
2ad68     1C E4 85 F1 | 	sub	objptr, ##540
2ad6c     04 4E 05 F1 | 	add	fp, #4
2ad70     A7 14 62 FC | 	wrlong	arg02, fp
2ad74     0C 4E 85 F1 | 	sub	fp, #12
2ad78     A7 12 02 FB | 	rdlong	arg01, fp
2ad7c     04 4E 85 F1 | 	sub	fp, #4
2ad80     59 12 62 FD | 	drvh	arg01
2ad84     1F 20 64 FD | 	waitx	#16
2ad88     A7 12 02 F6 | 	mov	arg01, fp
2ad8c     01 14 06 F6 | 	mov	arg02, #1
2ad90     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2ad94     A7 F0 03 F6 | 	mov	ptra, fp
2ad98     B2 00 A0 FD | 	call	#popregs_
2ad9c                 | _fatfs_cc_deselect_1060_ret
2ad9c     2D 00 64 FD | 	ret
2ada0                 | 
2ada0                 | _fatfs_cc_select_1064
2ada0     00 4A 05 F6 | 	mov	COUNT_, #0
2ada4     A8 00 A0 FD | 	call	#pushregs_
2ada8     10 F0 07 F1 | 	add	ptra, #16
2adac     01 00 00 FF 
2adb0     14 E4 05 F1 | 	add	objptr, ##532
2adb4     F2 14 02 FB | 	rdlong	arg02, objptr
2adb8     08 4E 05 F1 | 	add	fp, #8
2adbc     A7 14 62 FC | 	wrlong	arg02, fp
2adc0     08 E4 05 F1 | 	add	objptr, #8
2adc4     F2 12 02 FB | 	rdlong	arg01, objptr
2adc8     01 00 00 FF 
2adcc     1C E4 85 F1 | 	sub	objptr, ##540
2add0     04 4E 05 F1 | 	add	fp, #4
2add4     A7 12 62 FC | 	wrlong	arg01, fp
2add8     50 12 62 FD | 	fltl	arg01
2addc     04 4E 85 F1 | 	sub	fp, #4
2ade0     A7 12 02 FB | 	rdlong	arg01, fp
2ade4     58 12 62 FD | 	drvl	arg01
2ade8     1F 20 64 FD | 	waitx	#16
2adec     04 4E 05 F1 | 	add	fp, #4
2adf0     A7 12 02 FB | 	rdlong	arg01, fp
2adf4     41 12 62 FD | 	dirh	arg01
2adf8     08 4E 85 F1 | 	sub	fp, #8
2adfc     A7 12 02 F6 | 	mov	arg01, fp
2ae00     04 4E 85 F1 | 	sub	fp, #4
2ae04     01 14 06 F6 | 	mov	arg02, #1
2ae08     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2ae0c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1054
2ae10     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae14     01 FA 05 56 |  if_ne	mov	result1, #1
2ae18     08 00 90 5D |  if_ne	jmp	#LR__4430
2ae1c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1060
2ae20                 | ' 
2ae20                 | ' 	deselect();
2ae20                 | ' 	return 0;
2ae20     00 FA 05 F6 | 	mov	result1, #0
2ae24                 | LR__4430
2ae24     A7 F0 03 F6 | 	mov	ptra, fp
2ae28     B2 00 A0 FD | 	call	#popregs_
2ae2c                 | _fatfs_cc_select_1064_ret
2ae2c     2D 00 64 FD | 	ret
2ae30                 | 
2ae30                 | _fatfs_cc_rcvr_datablock_1068
2ae30     01 4A 05 F6 | 	mov	COUNT_, #1
2ae34     A8 00 A0 FD | 	call	#pushregs_
2ae38     18 F0 07 F1 | 	add	ptra, #24
2ae3c     04 4E 05 F1 | 	add	fp, #4
2ae40     A7 12 62 FC | 	wrlong	arg01, fp
2ae44     04 4E 05 F1 | 	add	fp, #4
2ae48     A7 14 62 FC | 	wrlong	arg02, fp
2ae4c     1A FA 61 FD | 	getct	result1
2ae50     08 4E 05 F1 | 	add	fp, #8
2ae54     A7 FA 61 FC | 	wrlong	result1, fp
2ae58     14 1E 06 FB | 	rdlong	local01, #20
2ae5c     03 1E 46 F0 | 	shr	local01, #3
2ae60     04 4E 05 F1 | 	add	fp, #4
2ae64     A7 1E 62 FC | 	wrlong	local01, fp
2ae68     14 4E 85 F1 | 	sub	fp, #20
2ae6c                 | ' 	BYTE *buff,
2ae6c                 | ' 	UINT btr
2ae6c                 | ' )
2ae6c                 | ' {
2ae6c                 | ' 	BYTE d[2];
2ae6c                 | ' 	UINT tmr, tmout;
2ae6c                 | ' 
2ae6c                 | ' 	tmr = _cnt();
2ae6c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2ae6c                 | ' 	for(;;) {
2ae6c                 | LR__4440
2ae6c     0C 4E 05 F1 | 	add	fp, #12
2ae70     A7 12 02 F6 | 	mov	arg01, fp
2ae74     0C 4E 85 F1 | 	sub	fp, #12
2ae78     01 14 06 F6 | 	mov	arg02, #1
2ae7c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2ae80     0C 4E 05 F1 | 	add	fp, #12
2ae84     A7 1E C2 FA | 	rdbyte	local01, fp
2ae88     0C 4E 85 F1 | 	sub	fp, #12
2ae8c     FF 1E 0E F2 | 	cmp	local01, #255 wz
2ae90     28 00 90 5D |  if_ne	jmp	#LR__4441
2ae94     1A FA 61 FD | 	getct	result1
2ae98     FD 1E 02 F6 | 	mov	local01, result1
2ae9c     10 4E 05 F1 | 	add	fp, #16
2aea0     A7 14 02 FB | 	rdlong	arg02, fp
2aea4     0A 1F 82 F1 | 	sub	local01, arg02
2aea8     04 4E 05 F1 | 	add	fp, #4
2aeac     A7 14 02 FB | 	rdlong	arg02, fp
2aeb0     14 4E 85 F1 | 	sub	fp, #20
2aeb4     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2aeb8     B0 FF 9F CD |  if_b	jmp	#LR__4440
2aebc                 | LR__4441
2aebc     0C 4E 05 F1 | 	add	fp, #12
2aec0     A7 1E C2 FA | 	rdbyte	local01, fp
2aec4     0C 4E 85 F1 | 	sub	fp, #12
2aec8     FE 1E 0E F2 | 	cmp	local01, #254 wz
2aecc     00 FA 05 56 |  if_ne	mov	result1, #0
2aed0     30 00 90 5D |  if_ne	jmp	#LR__4442
2aed4     04 4E 05 F1 | 	add	fp, #4
2aed8     A7 12 02 FB | 	rdlong	arg01, fp
2aedc     04 4E 05 F1 | 	add	fp, #4
2aee0     A7 14 02 FB | 	rdlong	arg02, fp
2aee4     08 4E 85 F1 | 	sub	fp, #8
2aee8     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2aeec     0C 4E 05 F1 | 	add	fp, #12
2aef0     A7 12 02 F6 | 	mov	arg01, fp
2aef4     0C 4E 85 F1 | 	sub	fp, #12
2aef8     02 14 06 F6 | 	mov	arg02, #2
2aefc     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2af00                 | ' 
2af00                 | ' 	rcvr_mmc(buff, btr);
2af00                 | ' 	rcvr_mmc(d, 2);
2af00                 | ' 
2af00                 | ' 	return 1;
2af00     01 FA 05 F6 | 	mov	result1, #1
2af04                 | LR__4442
2af04     A7 F0 03 F6 | 	mov	ptra, fp
2af08     B2 00 A0 FD | 	call	#popregs_
2af0c                 | _fatfs_cc_rcvr_datablock_1068_ret
2af0c     2D 00 64 FD | 	ret
2af10                 | 
2af10                 | _fatfs_cc_xmit_datablock_1070
2af10     00 4A 05 F6 | 	mov	COUNT_, #0
2af14     A8 00 A0 FD | 	call	#pushregs_
2af18     10 F0 07 F1 | 	add	ptra, #16
2af1c     04 4E 05 F1 | 	add	fp, #4
2af20     A7 12 62 FC | 	wrlong	arg01, fp
2af24     04 4E 05 F1 | 	add	fp, #4
2af28     A7 14 42 FC | 	wrbyte	arg02, fp
2af2c     08 4E 85 F1 | 	sub	fp, #8
2af30     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1054
2af34     00 FA 0D F2 | 	cmp	result1, #0 wz
2af38     00 FA 05 A6 |  if_e	mov	result1, #0
2af3c     90 00 90 AD |  if_e	jmp	#LR__4451
2af40     08 4E 05 F1 | 	add	fp, #8
2af44     A7 14 C2 FA | 	rdbyte	arg02, fp
2af48     04 4E 05 F1 | 	add	fp, #4
2af4c     A7 14 42 FC | 	wrbyte	arg02, fp
2af50     A7 12 02 F6 | 	mov	arg01, fp
2af54     0C 4E 85 F1 | 	sub	fp, #12
2af58     01 14 06 F6 | 	mov	arg02, #1
2af5c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2af60     08 4E 05 F1 | 	add	fp, #8
2af64     A7 14 C2 FA | 	rdbyte	arg02, fp
2af68     08 4E 85 F1 | 	sub	fp, #8
2af6c     FD 14 0E F2 | 	cmp	arg02, #253 wz
2af70     58 00 90 AD |  if_e	jmp	#LR__4450
2af74     04 4E 05 F1 | 	add	fp, #4
2af78     A7 12 02 FB | 	rdlong	arg01, fp
2af7c     04 4E 85 F1 | 	sub	fp, #4
2af80     09 14 C6 F9 | 	decod	arg02, #9
2af84     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2af88     0C 4E 05 F1 | 	add	fp, #12
2af8c     A7 12 02 F6 | 	mov	arg01, fp
2af90     0C 4E 85 F1 | 	sub	fp, #12
2af94     02 14 06 F6 | 	mov	arg02, #2
2af98     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2af9c     0C 4E 05 F1 | 	add	fp, #12
2afa0     A7 12 02 F6 | 	mov	arg01, fp
2afa4     0C 4E 85 F1 | 	sub	fp, #12
2afa8     01 14 06 F6 | 	mov	arg02, #1
2afac     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2afb0     0C 4E 05 F1 | 	add	fp, #12
2afb4     A7 14 C2 FA | 	rdbyte	arg02, fp
2afb8     0C 4E 85 F1 | 	sub	fp, #12
2afbc     1F 14 06 F5 | 	and	arg02, #31
2afc0     05 14 0E F2 | 	cmp	arg02, #5 wz
2afc4                 | ' 			return 0;
2afc4     00 FA 05 56 |  if_ne	mov	result1, #0
2afc8     04 00 90 5D |  if_ne	jmp	#LR__4451
2afcc                 | LR__4450
2afcc                 | ' 	}
2afcc                 | ' 
2afcc                 | ' 	return 1;
2afcc     01 FA 05 F6 | 	mov	result1, #1
2afd0                 | LR__4451
2afd0     A7 F0 03 F6 | 	mov	ptra, fp
2afd4     B2 00 A0 FD | 	call	#popregs_
2afd8                 | _fatfs_cc_xmit_datablock_1070_ret
2afd8     2D 00 64 FD | 	ret
2afdc                 | 
2afdc                 | _fatfs_cc_send_cmd_1074
2afdc     01 4A 05 F6 | 	mov	COUNT_, #1
2afe0     A8 00 A0 FD | 	call	#pushregs_
2afe4     1C F0 07 F1 | 	add	ptra, #28
2afe8                 | _fatfs_cc_send_cmd_1074_enter
2afe8     04 4E 05 F1 | 	add	fp, #4
2afec     A7 12 42 FC | 	wrbyte	arg01, fp
2aff0     04 4E 05 F1 | 	add	fp, #4
2aff4     A7 14 62 FC | 	wrlong	arg02, fp
2aff8     04 4E 85 F1 | 	sub	fp, #4
2affc     A7 FA C1 FA | 	rdbyte	result1, fp
2b000     04 4E 85 F1 | 	sub	fp, #4
2b004     80 FA CD F7 | 	test	result1, #128 wz
2b008     44 00 90 AD |  if_e	jmp	#LR__4460
2b00c     04 4E 05 F1 | 	add	fp, #4
2b010     A7 14 C2 FA | 	rdbyte	arg02, fp
2b014     7F 14 06 F5 | 	and	arg02, #127
2b018     A7 14 42 FC | 	wrbyte	arg02, fp
2b01c     04 4E 85 F1 | 	sub	fp, #4
2b020     37 12 06 F6 | 	mov	arg01, #55
2b024     00 14 06 F6 | 	mov	arg02, #0
2b028     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1074
2b02c     0C 4E 05 F1 | 	add	fp, #12
2b030     A7 FA 41 FC | 	wrbyte	result1, fp
2b034     A7 14 C2 FA | 	rdbyte	arg02, fp
2b038     0C 4E 85 F1 | 	sub	fp, #12
2b03c     02 14 16 F2 | 	cmp	arg02, #2 wc
2b040     0C 4E 05 31 |  if_ae	add	fp, #12
2b044     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2b048     0C 4E 85 31 |  if_ae	sub	fp, #12
2b04c     6C 01 90 3D |  if_ae	jmp	#LR__4464
2b050                 | LR__4460
2b050     04 4E 05 F1 | 	add	fp, #4
2b054     A7 14 C2 FA | 	rdbyte	arg02, fp
2b058     04 4E 85 F1 | 	sub	fp, #4
2b05c     0C 14 0E F2 | 	cmp	arg02, #12 wz
2b060     14 00 90 AD |  if_e	jmp	#LR__4461
2b064     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1060
2b068     34 FD BF FD | 	call	#_fatfs_cc_select_1064
2b06c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b070     FF FA 05 A6 |  if_e	mov	result1, #255
2b074     44 01 90 AD |  if_e	jmp	#LR__4464
2b078                 | LR__4461
2b078     04 4E 05 F1 | 	add	fp, #4
2b07c     A7 14 C2 FA | 	rdbyte	arg02, fp
2b080     40 FA 05 F6 | 	mov	result1, #64
2b084     0A FB 41 F5 | 	or	result1, arg02
2b088     10 4E 05 F1 | 	add	fp, #16
2b08c     A7 FA 41 FC | 	wrbyte	result1, fp
2b090     0C 4E 85 F1 | 	sub	fp, #12
2b094     A7 FA 01 FB | 	rdlong	result1, fp
2b098     18 FA 45 F0 | 	shr	result1, #24
2b09c     0D 4E 05 F1 | 	add	fp, #13
2b0a0     A7 FA 41 FC | 	wrbyte	result1, fp
2b0a4     0D 4E 85 F1 | 	sub	fp, #13
2b0a8     A7 FA 01 FB | 	rdlong	result1, fp
2b0ac     10 FA 45 F0 | 	shr	result1, #16
2b0b0     0E 4E 05 F1 | 	add	fp, #14
2b0b4     A7 FA 41 FC | 	wrbyte	result1, fp
2b0b8     0E 4E 85 F1 | 	sub	fp, #14
2b0bc     A7 FA 01 FB | 	rdlong	result1, fp
2b0c0     08 FA 45 F0 | 	shr	result1, #8
2b0c4     0F 4E 05 F1 | 	add	fp, #15
2b0c8     A7 FA 41 FC | 	wrbyte	result1, fp
2b0cc     0F 4E 85 F1 | 	sub	fp, #15
2b0d0     A7 FA 01 FB | 	rdlong	result1, fp
2b0d4     10 4E 05 F1 | 	add	fp, #16
2b0d8     A7 FA 41 FC | 	wrbyte	result1, fp
2b0dc     0C 4E 85 F1 | 	sub	fp, #12
2b0e0     A7 02 48 FC | 	wrbyte	#1, fp
2b0e4     08 4E 85 F1 | 	sub	fp, #8
2b0e8     A7 FA C9 FA | 	rdbyte	result1, fp wz
2b0ec     04 4E 85 F1 | 	sub	fp, #4
2b0f0     0C 4E 05 A1 |  if_e	add	fp, #12
2b0f4     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2b0f8     0C 4E 85 A1 |  if_e	sub	fp, #12
2b0fc     04 4E 05 F1 | 	add	fp, #4
2b100     A7 FA C1 FA | 	rdbyte	result1, fp
2b104     04 4E 85 F1 | 	sub	fp, #4
2b108     08 FA 0D F2 | 	cmp	result1, #8 wz
2b10c     0C 4E 05 A1 |  if_e	add	fp, #12
2b110     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2b114     0C 4E 85 A1 |  if_e	sub	fp, #12
2b118     0C 4E 05 F1 | 	add	fp, #12
2b11c     A7 14 C2 FA | 	rdbyte	arg02, fp
2b120     0D 4E 05 F1 | 	add	fp, #13
2b124     A7 14 42 FC | 	wrbyte	arg02, fp
2b128     05 4E 85 F1 | 	sub	fp, #5
2b12c     A7 12 02 F6 | 	mov	arg01, fp
2b130     14 4E 85 F1 | 	sub	fp, #20
2b134     06 14 06 F6 | 	mov	arg02, #6
2b138     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1043
2b13c     04 4E 05 F1 | 	add	fp, #4
2b140     A7 1E C2 FA | 	rdbyte	local01, fp
2b144     04 4E 85 F1 | 	sub	fp, #4
2b148     0C 1E 0E F2 | 	cmp	local01, #12 wz
2b14c     10 4E 05 A1 |  if_e	add	fp, #16
2b150     A7 12 02 A6 |  if_e	mov	arg01, fp
2b154     10 4E 85 A1 |  if_e	sub	fp, #16
2b158     01 14 06 A6 |  if_e	mov	arg02, #1
2b15c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1050
2b160     0C 4E 05 F1 | 	add	fp, #12
2b164     A7 14 48 FC | 	wrbyte	#10, fp
2b168     0C 4E 85 F1 | 	sub	fp, #12
2b16c                 | ' 	n = 10;
2b16c                 | ' 	do
2b16c                 | LR__4462
2b16c     10 4E 05 F1 | 	add	fp, #16
2b170     A7 12 02 F6 | 	mov	arg01, fp
2b174     10 4E 85 F1 | 	sub	fp, #16
2b178     01 14 06 F6 | 	mov	arg02, #1
2b17c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1050
2b180     10 4E 05 F1 | 	add	fp, #16
2b184     A7 1E C2 FA | 	rdbyte	local01, fp
2b188     10 4E 85 F1 | 	sub	fp, #16
2b18c     80 1E CE F7 | 	test	local01, #128 wz
2b190     1C 00 90 AD |  if_e	jmp	#LR__4463
2b194     0C 4E 05 F1 | 	add	fp, #12
2b198     A7 1E C2 FA | 	rdbyte	local01, fp
2b19c     01 1E 86 F1 | 	sub	local01, #1
2b1a0     A7 1E 42 FC | 	wrbyte	local01, fp
2b1a4     A7 1E CA FA | 	rdbyte	local01, fp wz
2b1a8     0C 4E 85 F1 | 	sub	fp, #12
2b1ac     BC FF 9F 5D |  if_ne	jmp	#LR__4462
2b1b0                 | LR__4463
2b1b0                 | ' 
2b1b0                 | ' 	return d;
2b1b0     10 4E 05 F1 | 	add	fp, #16
2b1b4     A7 FA C1 FA | 	rdbyte	result1, fp
2b1b8     10 4E 85 F1 | 	sub	fp, #16
2b1bc                 | LR__4464
2b1bc     A7 F0 03 F6 | 	mov	ptra, fp
2b1c0     B2 00 A0 FD | 	call	#popregs_
2b1c4                 | _fatfs_cc_send_cmd_1074_ret
2b1c4     2D 00 64 FD | 	ret
2b1c8                 | 
2b1c8                 | _fatfs_cc_disk_deinitialize
2b1c8     03 4A 05 F6 | 	mov	COUNT_, #3
2b1cc     A8 00 A0 FD | 	call	#pushregs_
2b1d0     00 12 4E F2 | 	cmps	arg01, #0 wz
2b1d4     01 00 00 FF 
2b1d8     14 E4 05 F1 | 	add	objptr, ##532
2b1dc     F2 12 02 FB | 	rdlong	arg01, objptr
2b1e0     04 E4 85 F1 | 	sub	objptr, #4
2b1e4     F2 1E 02 FB | 	rdlong	local01, objptr
2b1e8     08 E4 05 F1 | 	add	objptr, #8
2b1ec     F2 20 02 FB | 	rdlong	local02, objptr
2b1f0     04 E4 05 F1 | 	add	objptr, #4
2b1f4     F2 22 02 FB | 	rdlong	local03, objptr
2b1f8     01 00 00 FF 
2b1fc     1C E4 85 F1 | 	sub	objptr, ##540
2b200                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b200                 | '         return RES_NOTRDY;
2b200     03 FA 05 56 |  if_ne	mov	result1, #3
2b204     2C 00 90 5D |  if_ne	jmp	#LR__4470
2b208     50 12 62 FD | 	fltl	arg01
2b20c     09 01 08 FC | 	wrpin	#0, arg01
2b210     50 1E 62 FD | 	fltl	local01
2b214     0F 01 08 FC | 	wrpin	#0, local01
2b218     50 20 62 FD | 	fltl	local02
2b21c     10 01 08 FC | 	wrpin	#0, local02
2b220     50 22 62 FD | 	fltl	local03
2b224     11 01 08 FC | 	wrpin	#0, local03
2b228     0A 12 06 F6 | 	mov	arg01, #10
2b22c     A0 13 BF FD | 	call	#__system___waitms
2b230                 | '     }
2b230                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2b230                 | '     _pinclear(PIN_SS);
2b230                 | '     _pinclear(PIN_CLK);
2b230                 | '     _pinclear(PIN_DI);
2b230                 | '     _pinclear(PIN_DO);
2b230                 | ' 
2b230                 | '     _waitms(10);
2b230                 | ' 
2b230                 | '     return 0;
2b230     00 FA 05 F6 | 	mov	result1, #0
2b234                 | LR__4470
2b234     A7 F0 03 F6 | 	mov	ptra, fp
2b238     B2 00 A0 FD | 	call	#popregs_
2b23c                 | _fatfs_cc_disk_deinitialize_ret
2b23c     2D 00 64 FD | 	ret
2b240                 | 
2b240                 | _fatfs_cc_gettimeofday
2b240     04 4A 05 F6 | 	mov	COUNT_, #4
2b244     A8 00 A0 FD | 	call	#pushregs_
2b248     09 1F 02 F6 | 	mov	local01, arg01
2b24c     5C 0F BF FD | 	call	#__system___getus
2b250     FD 12 02 F6 | 	mov	arg01, result1
2b254     02 00 00 FF 
2b258     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2b25c     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2b260     09 FB 01 F6 | 	mov	result1, arg01
2b264     10 FB 81 F1 | 	sub	result1, local02
2b268     A1 07 00 FF 
2b26c     40 FA 15 FD | 	qdiv	result1, ##1000000
2b270     02 00 00 FF 
2b274     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2b278     18 20 62 FD | 	getqx	local02
2b27c     A1 07 00 FF 
2b280     40 FA 15 FD | 	qdiv	result1, ##1000000
2b284     00 20 0E F2 | 	cmp	local02, #0 wz
2b288     19 22 62 FD | 	getqy	local03
2b28c     28 00 90 AD |  if_e	jmp	#LR__4480
2b290     02 00 00 FF 
2b294     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2b298     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2b29c     10 25 02 F1 | 	add	local04, local02
2b2a0     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2b2a4     11 13 82 F1 | 	sub	arg01, local03
2b2a8     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2b2ac     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2b2b0     02 00 00 FF 
2b2b4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2b2b8                 | LR__4480
2b2b8     02 00 00 FF 
2b2bc     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2b2c0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2b2c4     02 00 00 FF 
2b2c8     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2b2cc     0F 25 62 FC | 	wrlong	local04, local01
2b2d0     04 1E 06 F1 | 	add	local01, #4
2b2d4     0F 23 62 FC | 	wrlong	local03, local01
2b2d8                 | '         lastsec += secs;
2b2d8                 | '         lastus = now - leftover;
2b2d8                 | '     }
2b2d8                 | '     tv->tv_sec = lastsec;
2b2d8                 | '     tv->tv_usec = leftover;
2b2d8                 | '     return 0;
2b2d8     00 FA 05 F6 | 	mov	result1, #0
2b2dc     A7 F0 03 F6 | 	mov	ptra, fp
2b2e0     B2 00 A0 FD | 	call	#popregs_
2b2e4                 | _fatfs_cc_gettimeofday_ret
2b2e4     2D 00 64 FD | 	ret
2b2e8                 | 
2b2e8                 | _fatfs_cc__is_leap_year
2b2e8     09 FB 51 F6 | 	abs	result1, arg01 wc
2b2ec     03 FA 05 F5 | 	and	result1, #3
2b2f0     FD FA 89 F6 | 	negc	result1, result1 wz
2b2f4     38 00 90 5D |  if_ne	jmp	#LR__4491
2b2f8     09 FB 51 F6 | 	abs	result1, arg01 wc
2b2fc     64 FA 15 FD | 	qdiv	result1, #100
2b300     19 FA 61 FD | 	getqy	result1
2b304     FD FA 89 F6 | 	negc	result1, result1 wz
2b308     1C 00 90 5D |  if_ne	jmp	#LR__4490
2b30c     09 FB 51 F6 | 	abs	result1, arg01 wc
2b310     90 FB 15 FD | 	qdiv	result1, #400
2b314                 | '       return (0 == y % 400);
2b314     00 FA 05 F6 | 	mov	result1, #0
2b318     19 00 62 FD | 	getqy	_var01
2b31c     00 01 8A F6 | 	negc	_var01, _var01 wz
2b320     01 FA 05 A6 |  if_e	mov	result1, #1
2b324     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2b328                 | LR__4490
2b328                 | '     return 1;
2b328     01 FA 05 F6 | 	mov	result1, #1
2b32c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2b330                 | LR__4491
2b330                 | '   }
2b330                 | '   return 0;
2b330     00 FA 05 F6 | 	mov	result1, #0
2b334                 | _fatfs_cc__is_leap_year_ret
2b334     2D 00 64 FD | 	ret
2b338                 | 
2b338                 | _fatfs_cc___tzoffset
2b338     09 01 0A F6 | 	mov	_var01, arg01 wz
2b33c     FF FF FF FF 
2b340     0A FF 6B FC | 	wrlong	##-1, arg02
2b344     01 02 06 F6 | 	mov	_var02, #1
2b348     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2b34c                 | '                 return 0;
2b34c     00 FA 05 A6 |  if_e	mov	result1, #0
2b350     94 02 90 AD |  if_e	jmp	#LR__4517
2b354     0A 01 68 FC | 	wrlong	#0, arg02
2b358     02 00 00 FF 
2b35c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b360     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2b364                 | ' 
2b364                 | '        *hasdst = 0;
2b364                 | ' 
2b364                 | ' 	n = stdname;
2b364                 | '         while (*s && isalpha(*s)) {
2b364     02 00 00 FF 
2b368     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2b36c     97 28 48 FB | 	callpa	#(@LR__4501-@LR__4500)>>2,fcache_load_ptr_
2b370                 | LR__4500
2b370     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2b374     48 00 90 AD |  if_e	jmp	#LR__4502
2b378     00 13 C2 FA | 	rdbyte	arg01, _var01
2b37c                 | ' {
2b37c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b37c     80 12 36 F3 | 	fle	arg01, #128 wc
2b380                 | '     return __ctype[c];
2b380     02 00 00 FF 
2b384     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b388     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b38c     09 FB C1 FA | 	rdbyte	result1, arg01
2b390     02 00 00 FF 
2b394     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b398     0C FA CD F7 | 	test	result1, #12 wz
2b39c     20 00 90 AD |  if_e	jmp	#LR__4502
2b3a0     00 09 02 F6 | 	mov	_var05, _var01
2b3a4     00 0B 02 F6 | 	mov	_var06, _var01
2b3a8     01 0A 06 F1 | 	add	_var06, #1
2b3ac     04 0D C2 FA | 	rdbyte	_var07, _var05
2b3b0     05 01 02 F6 | 	mov	_var01, _var06
2b3b4     03 0D 42 FC | 	wrbyte	_var07, _var04
2b3b8     01 06 06 F1 | 	add	_var04, #1
2b3bc     B0 FF 9F FD | 	jmp	#LR__4500
2b3c0                 | LR__4501
2b3c0                 | LR__4502
2b3c0     03 01 48 FC | 	wrbyte	#0, _var04
2b3c4     00 0E 06 F6 | 	mov	_var08, #0
2b3c8     00 05 C2 FA | 	rdbyte	_var03, _var01
2b3cc     2D 04 0E F2 | 	cmp	_var03, #45 wz
2b3d0     01 02 66 A6 |  if_e	neg	_var02, #1
2b3d4     01 00 06 A1 |  if_e	add	_var01, #1
2b3d8     97 28 48 FB | 	callpa	#(@LR__4504-@LR__4503)>>2,fcache_load_ptr_
2b3dc                 | '                 sgn = -1;
2b3dc                 | '                 s++;
2b3dc                 | '         }
2b3dc                 | '         while (isdigit(*s)) {
2b3dc                 | LR__4503
2b3dc     00 13 C2 FA | 	rdbyte	arg01, _var01
2b3e0                 | ' {
2b3e0                 | '   return  (__ctype_get(c) & 0x02 ) ;
2b3e0     80 12 36 F3 | 	fle	arg01, #128 wc
2b3e4                 | '     return __ctype[c];
2b3e4     02 00 00 FF 
2b3e8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b3ec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b3f0     09 FB C1 FA | 	rdbyte	result1, arg01
2b3f4     02 00 00 FF 
2b3f8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b3fc     02 FA CD F7 | 	test	result1, #2 wz
2b400     28 00 90 AD |  if_e	jmp	#LR__4505
2b404     07 05 02 F6 | 	mov	_var03, _var08
2b408     02 04 66 F0 | 	shl	_var03, #2
2b40c     07 05 02 F1 | 	add	_var03, _var08
2b410     01 04 66 F0 | 	shl	_var03, #1
2b414     00 09 C2 FA | 	rdbyte	_var05, _var01
2b418     30 08 86 F1 | 	sub	_var05, #48
2b41c     04 05 02 F1 | 	add	_var03, _var05
2b420     02 0F 02 F6 | 	mov	_var08, _var03
2b424     01 00 06 F1 | 	add	_var01, #1
2b428     B0 FF 9F FD | 	jmp	#LR__4503
2b42c                 | LR__4504
2b42c                 | LR__4505
2b42c     07 00 00 FF 
2b430     10 0E 06 FD | 	qmul	_var08, ##3600
2b434     00 05 C2 FA | 	rdbyte	_var03, _var01
2b438     3A 04 0E F2 | 	cmp	_var03, #58 wz
2b43c     18 10 62 FD | 	getqx	_var09
2b440     70 00 90 5D |  if_ne	jmp	#LR__4509
2b444     00 0E 06 F6 | 	mov	_var08, #0
2b448     01 00 06 F1 | 	add	_var01, #1
2b44c     97 28 48 FB | 	callpa	#(@LR__4507-@LR__4506)>>2,fcache_load_ptr_
2b450                 | '                 x = 0;
2b450                 | '                 s++;
2b450                 | '                 while (isdigit(*s)) {
2b450                 | LR__4506
2b450     00 13 C2 FA | 	rdbyte	arg01, _var01
2b454                 | ' {
2b454                 | '   return  (__ctype_get(c) & 0x02 ) ;
2b454     80 12 36 F3 | 	fle	arg01, #128 wc
2b458                 | '     return __ctype[c];
2b458     02 00 00 FF 
2b45c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b460     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b464     09 FB C1 FA | 	rdbyte	result1, arg01
2b468     02 00 00 FF 
2b46c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b470     02 FA CD F7 | 	test	result1, #2 wz
2b474     28 00 90 AD |  if_e	jmp	#LR__4508
2b478     07 05 02 F6 | 	mov	_var03, _var08
2b47c     02 04 66 F0 | 	shl	_var03, #2
2b480     07 05 02 F1 | 	add	_var03, _var08
2b484     01 04 66 F0 | 	shl	_var03, #1
2b488     00 09 C2 FA | 	rdbyte	_var05, _var01
2b48c     30 08 86 F1 | 	sub	_var05, #48
2b490     04 05 02 F1 | 	add	_var03, _var05
2b494     02 0F 02 F6 | 	mov	_var08, _var03
2b498     01 00 06 F1 | 	add	_var01, #1
2b49c     B0 FF 9F FD | 	jmp	#LR__4506
2b4a0                 | LR__4507
2b4a0                 | LR__4508
2b4a0     07 0D 02 F6 | 	mov	_var07, _var08
2b4a4     04 0C 66 F0 | 	shl	_var07, #4
2b4a8     07 0D 82 F1 | 	sub	_var07, _var08
2b4ac     02 0C 66 F0 | 	shl	_var07, #2
2b4b0     06 11 02 F1 | 	add	_var09, _var07
2b4b4                 | LR__4509
2b4b4     02 00 00 FF 
2b4b8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b4bc     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2b4c0     00 13 C2 FA | 	rdbyte	arg01, _var01
2b4c4                 | ' {
2b4c4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b4c4     80 12 36 F3 | 	fle	arg01, #128 wc
2b4c8                 | '     return __ctype[c];
2b4c8     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2b4cc     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b4d0     09 FB C1 FA | 	rdbyte	result1, arg01
2b4d4     02 00 00 FF 
2b4d8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b4dc     0C FA CD F7 | 	test	result1, #12 wz
2b4e0     50 00 90 AD |  if_e	jmp	#LR__4512
2b4e4     0A 03 68 FC | 	wrlong	#1, arg02
2b4e8                 | '                 *hasdst = 1;
2b4e8                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2b4e8                 | LR__4510
2b4e8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2b4ec     44 00 90 AD |  if_e	jmp	#LR__4511
2b4f0     00 13 C2 FA | 	rdbyte	arg01, _var01
2b4f4                 | ' {
2b4f4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b4f4     80 12 36 F3 | 	fle	arg01, #128 wc
2b4f8                 | '     return __ctype[c];
2b4f8     02 00 00 FF 
2b4fc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b500     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b504     09 FB C1 FA | 	rdbyte	result1, arg01
2b508     02 00 00 FF 
2b50c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b510     0C FA CD F7 | 	test	result1, #12 wz
2b514     1C 00 90 AD |  if_e	jmp	#LR__4511
2b518     00 0B 02 F6 | 	mov	_var06, _var01
2b51c     01 0A 06 F1 | 	add	_var06, #1
2b520     00 0D C2 FA | 	rdbyte	_var07, _var01
2b524     05 01 02 F6 | 	mov	_var01, _var06
2b528     03 0D 42 FC | 	wrbyte	_var07, _var04
2b52c     01 06 06 F1 | 	add	_var04, #1
2b530     B4 FF 9F FD | 	jmp	#LR__4510
2b534                 | LR__4511
2b534                 | LR__4512
2b534     03 01 48 FC | 	wrbyte	#0, _var04
2b538     02 00 00 FF 
2b53c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b540     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2b544     02 00 00 FF 
2b548     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2b54c     20 00 90 AD |  if_e	jmp	#LR__4513
2b550     02 00 00 FF 
2b554     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b558     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b55c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2b560     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b564     02 00 00 FF 
2b568     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2b56c     1C 00 90 FD | 	jmp	#LR__4514
2b570                 | LR__4513
2b570     02 00 00 FF 
2b574     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2b578     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b57c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2b580     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b584     02 00 00 FF 
2b588     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2b58c                 | LR__4514
2b58c     02 00 00 FF 
2b590     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b594     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2b598     02 00 00 FF 
2b59c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2b5a0     20 00 90 AD |  if_e	jmp	#LR__4515
2b5a4     02 00 00 FF 
2b5a8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b5ac     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b5b0     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2b5b4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b5b8     02 00 00 FF 
2b5bc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2b5c0     1C 00 90 FD | 	jmp	#LR__4516
2b5c4                 | LR__4515
2b5c4     02 00 00 FF 
2b5c8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b5cc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b5d0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2b5d4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b5d8     02 00 00 FF 
2b5dc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2b5e0                 | LR__4516
2b5e0     08 03 02 FD | 	qmul	_var02, _var09
2b5e4                 | ' 		_tzname[1] = stdname;
2b5e4                 | ' 
2b5e4                 | '         return sgn * off;
2b5e4     18 FA 61 FD | 	getqx	result1
2b5e8                 | LR__4517
2b5e8                 | _fatfs_cc___tzoffset_ret
2b5e8     2D 00 64 FD | 	ret
2b5ec                 | 
2b5ec                 | _fatfs_cc___indst
2b5ec     10 12 06 F1 | 	add	arg01, #16
2b5f0     09 01 02 FB | 	rdlong	_var01, arg01
2b5f4     10 12 86 F1 | 	sub	arg01, #16
2b5f8     02 00 0E F2 | 	cmp	_var01, #2 wz
2b5fc     30 00 90 5D |  if_ne	jmp	#LR__4520
2b600     07 00 06 F6 | 	mov	_var01, #7
2b604     18 12 06 F1 | 	add	arg01, #24
2b608     09 03 02 FB | 	rdlong	_var02, arg01
2b60c     01 01 02 F1 | 	add	_var01, _var02
2b610     0C 12 86 F1 | 	sub	arg01, #12
2b614     09 05 02 FB | 	rdlong	_var03, arg01
2b618     02 01 82 F1 | 	sub	_var01, _var03
2b61c     00 00 56 F2 | 	cmps	_var01, #0 wc
2b620                 | '                         return 1;
2b620     01 FA 05 C6 |  if_b	mov	result1, #1
2b624     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2b628                 | '                 return 0;
2b628     00 FA 05 F6 | 	mov	result1, #0
2b62c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2b630                 | LR__4520
2b630     10 12 06 F1 | 	add	arg01, #16
2b634     09 01 02 FB | 	rdlong	_var01, arg01
2b638     10 12 86 F1 | 	sub	arg01, #16
2b63c     0A 00 0E F2 | 	cmp	_var01, #10 wz
2b640     28 00 90 5D |  if_ne	jmp	#LR__4521
2b644     18 12 06 F1 | 	add	arg01, #24
2b648     09 01 02 FB | 	rdlong	_var01, arg01
2b64c     0C 12 86 F1 | 	sub	arg01, #12
2b650     09 07 02 FB | 	rdlong	_var04, arg01
2b654     03 01 82 F1 | 	sub	_var01, _var04
2b658     00 00 56 F2 | 	cmps	_var01, #0 wc
2b65c                 | '                         return 0;
2b65c     00 FA 05 C6 |  if_b	mov	result1, #0
2b660     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2b664                 | '                 return 1;
2b664     01 FA 05 F6 | 	mov	result1, #1
2b668     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2b66c                 | LR__4521
2b66c                 | '         }
2b66c                 | ' 
2b66c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2b66c     00 00 06 F6 | 	mov	_var01, #0
2b670     10 12 06 F1 | 	add	arg01, #16
2b674     09 03 02 FB | 	rdlong	_var02, arg01
2b678     10 12 86 F1 | 	sub	arg01, #16
2b67c     03 02 56 F2 | 	cmps	_var02, #3 wc
2b680     10 00 90 CD |  if_b	jmp	#LR__4522
2b684     10 12 06 F1 | 	add	arg01, #16
2b688     09 05 02 FB | 	rdlong	_var03, arg01
2b68c     0A 04 56 F2 | 	cmps	_var03, #10 wc
2b690     01 00 06 C6 |  if_b	mov	_var01, #1
2b694                 | LR__4522
2b694     00 FB 01 F6 | 	mov	result1, _var01
2b698                 | _fatfs_cc___indst_ret
2b698     2D 00 64 FD | 	ret
2b69c                 | 
2b69c                 | ' 	
2b69c                 | ' 	FUNCTION pfunc(c as integer) as integer
2b69c                 | ___strs_cl_pfunc
2b69c                 | ' 		if (i < 16) then
2b69c     04 E4 05 F1 | 	add	objptr, #4
2b6a0     F2 FA 01 FB | 	rdlong	result1, objptr
2b6a4     04 E4 85 F1 | 	sub	objptr, #4
2b6a8     10 FA 55 F2 | 	cmps	result1, #16 wc
2b6ac     2C 00 90 3D |  if_ae	jmp	#LR__4530
2b6b0     F2 FA 01 FB | 	rdlong	result1, objptr
2b6b4     04 E4 05 F1 | 	add	objptr, #4
2b6b8     F2 00 02 FB | 	rdlong	_var01, objptr
2b6bc     FD 00 02 F1 | 	add	_var01, result1
2b6c0     00 13 42 FC | 	wrbyte	arg01, _var01
2b6c4     F2 FA 01 FB | 	rdlong	result1, objptr
2b6c8     01 FA 05 F1 | 	add	result1, #1
2b6cc     F2 FA 61 FC | 	wrlong	result1, objptr
2b6d0     04 E4 85 F1 | 	sub	objptr, #4
2b6d4                 | ' 			p(i) = c
2b6d4                 | ' 			i = i+1
2b6d4                 | ' 			return 1
2b6d4     01 FA 05 F6 | 	mov	result1, #1
2b6d8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2b6dc                 | LR__4530
2b6dc                 | ' 			return -1
2b6dc     01 FA 65 F6 | 	neg	result1, #1
2b6e0                 | ___strs_cl_pfunc_ret
2b6e0     2D 00 64 FD | 	ret
2b6e4                 | 
2b6e4                 | __struct__s_vfs_file_t_putchar
2b6e4     04 4A 05 F6 | 	mov	COUNT_, #4
2b6e8     A8 00 A0 FD | 	call	#pushregs_
2b6ec     1C E4 05 F1 | 	add	objptr, #28
2b6f0     F2 1E 0A FB | 	rdlong	local01, objptr wz
2b6f4     1C E4 85 F1 | 	sub	objptr, #28
2b6f8     00 FA 05 A6 |  if_e	mov	result1, #0
2b6fc     48 00 90 AD |  if_e	jmp	#LR__4540
2b700     1C E4 05 F1 | 	add	objptr, #28
2b704     F2 20 02 FB | 	rdlong	local02, objptr
2b708     10 23 02 F6 | 	mov	local03, local02
2b70c     1C E4 85 F1 | 	sub	objptr, #28
2b710     13 22 46 F7 | 	zerox	local03, #19
2b714     14 20 46 F0 | 	shr	local02, #20
2b718     02 20 66 F0 | 	shl	local02, #2
2b71c     ED 20 02 F1 | 	add	local02, __methods__
2b720     10 21 02 FB | 	rdlong	local02, local02
2b724     F2 14 02 F6 | 	mov	arg02, objptr
2b728     F2 24 02 F6 | 	mov	local04, objptr
2b72c     11 E5 01 F6 | 	mov	objptr, local03
2b730     2D 20 62 FD | 	call	local02
2b734     12 E5 01 F6 | 	mov	objptr, local04
2b738                 | '     return (i < 0) ? 0 : 1;
2b738     00 FA 55 F2 | 	cmps	result1, #0 wc
2b73c     00 1E 06 C6 |  if_b	mov	local01, #0
2b740     01 1E 06 36 |  if_ae	mov	local01, #1
2b744     0F FB 01 F6 | 	mov	result1, local01
2b748                 | LR__4540
2b748     A7 F0 03 F6 | 	mov	ptra, fp
2b74c     B2 00 A0 FD | 	call	#popregs_
2b750                 | __struct__s_vfs_file_t_putchar_ret
2b750     2D 00 64 FD | 	ret
2b754                 | 
2b754                 | __struct__s_vfs_file_t_getchar
2b754     03 4A 05 F6 | 	mov	COUNT_, #3
2b758     A8 00 A0 FD | 	call	#pushregs_
2b75c     20 E4 05 F1 | 	add	objptr, #32
2b760     F2 12 0A FB | 	rdlong	arg01, objptr wz
2b764     20 E4 85 F1 | 	sub	objptr, #32
2b768     01 FA 65 A6 |  if_e	neg	result1, #1
2b76c     38 00 90 AD |  if_e	jmp	#LR__4550
2b770                 | '     return getcf(__this);
2b770     20 E4 05 F1 | 	add	objptr, #32
2b774     F2 1E 02 FB | 	rdlong	local01, objptr
2b778     0F 21 02 F6 | 	mov	local02, local01
2b77c     20 E4 85 F1 | 	sub	objptr, #32
2b780     13 20 46 F7 | 	zerox	local02, #19
2b784     14 1E 46 F0 | 	shr	local01, #20
2b788     02 1E 66 F0 | 	shl	local01, #2
2b78c     ED 1E 02 F1 | 	add	local01, __methods__
2b790     0F 1F 02 FB | 	rdlong	local01, local01
2b794     F2 12 02 F6 | 	mov	arg01, objptr
2b798     F2 22 02 F6 | 	mov	local03, objptr
2b79c     10 E5 01 F6 | 	mov	objptr, local02
2b7a0     2D 1E 62 FD | 	call	local01
2b7a4     11 E5 01 F6 | 	mov	objptr, local03
2b7a8                 | LR__4550
2b7a8     A7 F0 03 F6 | 	mov	ptra, fp
2b7ac     B2 00 A0 FD | 	call	#popregs_
2b7b0                 | __struct__s_vfs_file_t_getchar_ret
2b7b0     2D 00 64 FD | 	ret
2b7b4                 | 
2b7b4                 | __struct___bas_wrap_sender_tx
2b7b4     03 4A 05 F6 | 	mov	COUNT_, #3
2b7b8     A8 00 A0 FD | 	call	#pushregs_
2b7bc     F2 1E 02 FB | 	rdlong	local01, objptr
2b7c0     0F 21 02 F6 | 	mov	local02, local01
2b7c4     13 1E 46 F7 | 	zerox	local01, #19
2b7c8     14 20 46 F0 | 	shr	local02, #20
2b7cc     02 20 66 F0 | 	shl	local02, #2
2b7d0     ED 20 02 F1 | 	add	local02, __methods__
2b7d4     10 21 02 FB | 	rdlong	local02, local02
2b7d8     F2 22 02 F6 | 	mov	local03, objptr
2b7dc     0F E5 01 F6 | 	mov	objptr, local01
2b7e0     2D 20 62 FD | 	call	local02
2b7e4     11 E5 01 F6 | 	mov	objptr, local03
2b7e8     01 FA 05 F6 | 	mov	result1, #1
2b7ec     A7 F0 03 F6 | 	mov	ptra, fp
2b7f0     B2 00 A0 FD | 	call	#popregs_
2b7f4                 | __struct___bas_wrap_sender_tx_ret
2b7f4     2D 00 64 FD | 	ret
2b7f8                 | 
2b7f8                 | __struct___bas_wrap_sender_rx
2b7f8     03 4A 05 F6 | 	mov	COUNT_, #3
2b7fc     A8 00 A0 FD | 	call	#pushregs_
2b800     04 E4 05 F1 | 	add	objptr, #4
2b804     F2 1E 02 FB | 	rdlong	local01, objptr
2b808     0F 21 02 F6 | 	mov	local02, local01
2b80c     04 E4 85 F1 | 	sub	objptr, #4
2b810     13 20 46 F7 | 	zerox	local02, #19
2b814     14 1E 46 F0 | 	shr	local01, #20
2b818     02 1E 66 F0 | 	shl	local01, #2
2b81c     ED 1E 02 F1 | 	add	local01, __methods__
2b820     0F 1F 02 FB | 	rdlong	local01, local01
2b824     F2 22 02 F6 | 	mov	local03, objptr
2b828     10 E5 01 F6 | 	mov	objptr, local02
2b82c     2D 1E 62 FD | 	call	local01
2b830     11 E5 01 F6 | 	mov	objptr, local03
2b834     A7 F0 03 F6 | 	mov	ptra, fp
2b838     B2 00 A0 FD | 	call	#popregs_
2b83c                 | __struct___bas_wrap_sender_rx_ret
2b83c     2D 00 64 FD | 	ret
2b840                 | 
2b840                 | __struct___bas_wrap_sender_close
2b840     03 4A 05 F6 | 	mov	COUNT_, #3
2b844     A8 00 A0 FD | 	call	#pushregs_
2b848     08 E4 05 F1 | 	add	objptr, #8
2b84c     F2 1E 02 FB | 	rdlong	local01, objptr
2b850     0F 21 02 F6 | 	mov	local02, local01
2b854     08 E4 85 F1 | 	sub	objptr, #8
2b858     13 20 46 F7 | 	zerox	local02, #19
2b85c     14 1E 46 F0 | 	shr	local01, #20
2b860     02 1E 66 F0 | 	shl	local01, #2
2b864     ED 1E 02 F1 | 	add	local01, __methods__
2b868     0F 1F 02 FB | 	rdlong	local01, local01
2b86c     F2 22 02 F6 | 	mov	local03, objptr
2b870     10 E5 01 F6 | 	mov	objptr, local02
2b874     2D 1E 62 FD | 	call	local01
2b878     11 E5 01 F6 | 	mov	objptr, local03
2b87c     A7 F0 03 F6 | 	mov	ptra, fp
2b880     B2 00 A0 FD | 	call	#popregs_
2b884                 | __struct___bas_wrap_sender_close_ret
2b884     2D 00 64 FD | 	ret
2b888                 | 
2b888                 | LR__4560
2b888     2F          | 	byte	"/"
2b889     00          | 	byte	0
2b88a                 | LR__4561
2b88a     69 6E 66    | 	byte	"inf"
2b88d     00          | 	byte	0
2b88e                 | LR__4562
2b88e     6E 61 6E    | 	byte	"nan"
2b891     00          | 	byte	0
2b892                 | LR__4563
2b892                 | 	byte	
2b892     00          | 	byte	0
2b893                 | LR__4564
2b893                 | 	byte	
2b893     00          | 	byte	0
2b894                 | LR__4565
2b894                 | 	byte	
2b894     00          | 	byte	0
2b895                 | LR__4566
2b895                 | 	byte	
2b895     00          | 	byte	0
2b896                 | LR__4567
2b896                 | 	byte	
2b896     00          | 	byte	0
2b897                 | LR__4568
2b897                 | 	byte	
2b897     00          | 	byte	0
2b898                 | LR__4569
2b898                 | 	byte	
2b898     00          | 	byte	0
2b899                 | LR__4570
2b899                 | 	byte	
2b899     00          | 	byte	0
2b89a                 | LR__4571
2b89a     00          | 	byte	0
2b89b     00          | 	byte	0
2b89c                 | LR__4572
2b89c     00          | 	byte	0
2b89d     00          | 	byte	0
2b89e                 | LR__4573
2b89e     00          | 	byte	0
2b89f     00          | 	byte	0
2b8a0                 | LR__4574
2b8a0     20 21 21 21 
2b8a4     20 63 6F 72 
2b8a8     72 75 70 74 
2b8ac     65 64 20 68 
2b8b0     65 61 70 3F 
2b8b4     3F 3F 20 21 
2b8b8     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2b8bb     00          | 	byte	0
2b8bc                 | LR__4575
2b8bc     20 21 21 21 
2b8c0     20 6F 75 74 
2b8c4     20 6F 66 20 
2b8c8     68 65 61 70 
2b8cc     20 6D 65 6D 
2b8d0     6F 72 79 20 
2b8d4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2b8d8     00          | 	byte	0
2b8d9                 | LR__4576
2b8d9     20 21 21 21 
2b8dd     20 63 6F 72 
2b8e1     72 75 70 74 
2b8e5     65 64 20 68 
2b8e9     65 61 70 20 
2b8ed     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2b8f1     00          | 	byte	0
2b8f2                 | LR__4577
2b8f2     00          | 	byte	0
2b8f3     00          | 	byte	0
2b8f4                 | LR__4578
2b8f4     2E          | 	byte	"."
2b8f5     00          | 	byte	0
2b8f6                 | LR__4579
2b8f6     00          | 	byte	0
2b8f7     00          | 	byte	0
2b8f8                 | LR__4580
2b8f8     00          | 	byte	0
2b8f9     00          | 	byte	0
2b8fa                 | LR__4581
2b8fa     00          | 	byte	0
2b8fb     00          | 	byte	0
2b8fc                 | LR__4582
2b8fc     2A 3A 3C 3E 
2b900     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2b904     00          | 	byte	0
2b905                 | LR__4583
2b905     2B 2C 3B 3D 
2b909     5B 5D       | 	byte	"+,;=[]"
2b90b     00          | 	byte	0
2b90c                 | LR__4584
2b90c     46 41 54 33 
2b910     32 20 20 20 | 	byte	"FAT32   "
2b914     00          | 	byte	0
2b915                 | LR__4585
2b915     54 5A       | 	byte	"TZ"
2b917     00          | 	byte	0
2b918                 | LR__4586
2b918     00          | 	byte	0
2b919     00          | 	byte	0
2b91a                 | LR__4587
2b91a                 | 	byte	
2b91a     00          | 	byte	0
2b91b                 | LR__4588
2b91b                 | 	byte	
2b91b     00          | 	byte	0
2b91c                 | LR__4589
2b91c     22          | 	byte	34
2b91d     00          | 	byte	0
2b91e                 | LR__4590
2b91e     22          | 	byte	34
2b91f     00          | 	byte	0
2b920                 | LR__4591
2b920     3A          | 	byte	":"
2b921     00          | 	byte	0
2b922                 | LR__4592
2b922                 | 	byte	
2b922     00          | 	byte	0
2b923                 | LR__4593
2b923                 | 	byte	
2b923     00          | 	byte	0
2b924                 | LR__4594
2b924                 | 	byte	
2b924     00          | 	byte	0
2b925                 | LR__4595
2b925                 | 	byte	
2b925     00          | 	byte	0
2b926                 | LR__4596
2b926                 | 	byte	
2b926     00          | 	byte	0
2b927                 | LR__4597
2b927                 | 	byte	
2b927     00          | 	byte	0
2b928                 | LR__4598
2b928                 | 	byte	
2b928     00          | 	byte	0
2b929                 | LR__4599
2b929     22          | 	byte	34
2b92a     00          | 	byte	0
2b92b                 | LR__4600
2b92b     22          | 	byte	34
2b92c     00          | 	byte	0
2b92d                 | LR__4601
2b92d     22          | 	byte	34
2b92e     00          | 	byte	0
2b92f                 | LR__4602
2b92f     22          | 	byte	34
2b930     00          | 	byte	0
2b931                 | LR__4603
2b931     22          | 	byte	34
2b932     00          | 	byte	0
2b933                 | LR__4604
2b933     3E          | 	byte	">"
2b934     00          | 	byte	0
2b935                 | LR__4605
2b935     3E          | 	byte	">"
2b936     00          | 	byte	0
2b937                 | LR__4606
2b937     2B          | 	byte	"+"
2b938     00          | 	byte	0
2b939                 | LR__4607
2b939     2D          | 	byte	"-"
2b93a     00          | 	byte	0
2b93b                 | LR__4608
2b93b     2A          | 	byte	"*"
2b93c     00          | 	byte	0
2b93d                 | LR__4609
2b93d     2F          | 	byte	"/"
2b93e     00          | 	byte	0
2b93f                 | LR__4610
2b93f     5E          | 	byte	"^"
2b940     00          | 	byte	0
2b941                 | LR__4611
2b941     3D          | 	byte	"="
2b942     00          | 	byte	0
2b943                 | LR__4612
2b943     2B          | 	byte	"+"
2b944     00          | 	byte	0
2b945                 | LR__4613
2b945     2B          | 	byte	"+"
2b946     00          | 	byte	0
2b947                 | LR__4614
2b947     2D          | 	byte	"-"
2b948     00          | 	byte	0
2b949                 | LR__4615
2b949     2D          | 	byte	"-"
2b94a     00          | 	byte	0
2b94b                 | LR__4616
2b94b     3C          | 	byte	"<"
2b94c     00          | 	byte	0
2b94d                 | LR__4617
2b94d     3E          | 	byte	">"
2b94e     00          | 	byte	0
2b94f                 | LR__4618
2b94f     22          | 	byte	34
2b950     00          | 	byte	0
2b951                 | LR__4619
2b951     22          | 	byte	34
2b952     00          | 	byte	0
2b953                 | LR__4620
2b953     2E          | 	byte	"."
2b954     00          | 	byte	0
2b955                 | LR__4621
2b955     3F          | 	byte	"?"
2b956     00          | 	byte	0
2b957                 | LR__4622
2b957     3F          | 	byte	"?"
2b958     00          | 	byte	0
2b959                 | LR__4623
2b959     6D 6F 75 73 
2b95d     65          | 	byte	"mouse"
2b95e     00          | 	byte	0
2b95f                 | LR__4624
2b95f     63 75 72 73 
2b963     6F 72       | 	byte	"cursor"
2b965     00          | 	byte	0
2b966                 | LR__4625
2b966     63 6C 69 63 
2b96a     6B          | 	byte	"click"
2b96b     00          | 	byte	0
2b96c                 | LR__4626
2b96c     6F 6E       | 	byte	"on"
2b96e     00          | 	byte	0
2b96f                 | LR__4627
2b96f     31          | 	byte	"1"
2b970     00          | 	byte	0
2b971                 | LR__4628
2b971     6F 66 66    | 	byte	"off"
2b974     00          | 	byte	0
2b975                 | LR__4629
2b975     30          | 	byte	"0"
2b976     00          | 	byte	0
2b977                 | LR__4630
2b977     6D 6F 64 65 | 	byte	"mode"
2b97b     00          | 	byte	0
2b97c                 | LR__4631
2b97c     6D 2E       | 	byte	"m."
2b97e     00          | 	byte	0
2b97f                 | LR__4632
2b97f     61 74 61 72 
2b983     69          | 	byte	"atari"
2b984     00          | 	byte	0
2b985                 | LR__4633
2b985     30          | 	byte	"0"
2b986     00          | 	byte	0
2b987                 | LR__4634
2b987     70 63 5F 61 
2b98b     6D 62 65 72 | 	byte	"pc_amber"
2b98f     00          | 	byte	0
2b990                 | LR__4635
2b990     31          | 	byte	"1"
2b991     00          | 	byte	0
2b992                 | LR__4636
2b992     70 63 5F 67 
2b996     72 65 65 6E | 	byte	"pc_green"
2b99a     00          | 	byte	0
2b99b                 | LR__4637
2b99b     32          | 	byte	"2"
2b99c     00          | 	byte	0
2b99d                 | LR__4638
2b99d     70 63 5F 77 
2b9a1     68 69 74 65 | 	byte	"pc_white"
2b9a5     00          | 	byte	0
2b9a6                 | LR__4639
2b9a6     33          | 	byte	"3"
2b9a7     00          | 	byte	0
2b9a8                 | LR__4640
2b9a8     73 74       | 	byte	"st"
2b9aa     00          | 	byte	0
2b9ab                 | LR__4641
2b9ab     34          | 	byte	"4"
2b9ac     00          | 	byte	0
2b9ad                 | LR__4642
2b9ad                 | 	byte	
2b9ad     00          | 	byte	0
2b9ae                 | LR__4643
2b9ae     6C 6F 61 64 | 	byte	"load"
2b9b2     00          | 	byte	0
2b9b3                 | LR__4644
2b9b3     73 61 76 65 | 	byte	"save"
2b9b7     00          | 	byte	0
2b9b8                 | LR__4645
2b9b8     62 72 75 6E | 	byte	"brun"
2b9bc     00          | 	byte	0
2b9bd                 | LR__4646
2b9bd     6C 6F 2E    | 	byte	"lo."
2b9c0     00          | 	byte	0
2b9c1                 | LR__4647
2b9c1     73 2E       | 	byte	"s."
2b9c3     00          | 	byte	0
2b9c4                 | LR__4648
2b9c4     62 72 2E    | 	byte	"br."
2b9c7     00          | 	byte	0
2b9c8                 | LR__4649
2b9c8                 | 	byte	
2b9c8     00          | 	byte	0
2b9c9                 | LR__4650
2b9c9                 | 	byte	
2b9c9     00          | 	byte	0
2b9ca                 | LR__4651
2b9ca                 | 	byte	
2b9ca     00          | 	byte	0
2b9cb                 | LR__4652
2b9cb                 | 	byte	
2b9cb     00          | 	byte	0
2b9cc                 | LR__4653
2b9cc     20 55 73 65 
2b9d0     72 20 66 75 
2b9d4     6E 63 74 69 
2b9d8     6F 6E 73 20 
2b9dc     61 6E 64 20 
2b9e0     61 72 72 61 
2b9e4     79 73 20 6E 
2b9e8     6F 74 20 79 
2b9ec     65 74 20 69 
2b9f0     6D 70 6C 65 
2b9f4     6D 65 6E 74 
2b9f8     65 64       | 	byte	" User functions and arrays not yet implemented"
2b9fa     00          | 	byte	0
2b9fb                 | LR__4654
2b9fb                 | 	byte	
2b9fb     00          | 	byte	0
2b9fc                 | LR__4655
2b9fc                 | 	byte	
2b9fc     00          | 	byte	0
2b9fd                 | LR__4656
2b9fd     52 65 61 64 
2ba01     79          | 	byte	"Ready"
2ba02     00          | 	byte	0
2ba03                 | LR__4657
2ba03     2B          | 	byte	"+"
2ba04     00          | 	byte	0
2ba05                 | LR__4658
2ba05     2D          | 	byte	"-"
2ba06     00          | 	byte	0
2ba07                 | LR__4659
2ba07     6F 72       | 	byte	"or"
2ba09     00          | 	byte	0
2ba0a                 | LR__4660
2ba0a     78 6F 72    | 	byte	"xor"
2ba0d     00          | 	byte	0
2ba0e                 | LR__4661
2ba0e     2A          | 	byte	"*"
2ba0f     00          | 	byte	0
2ba10                 | LR__4662
2ba10     2F          | 	byte	"/"
2ba11     00          | 	byte	0
2ba12                 | LR__4663
2ba12     61 6E 64    | 	byte	"and"
2ba15     00          | 	byte	0
2ba16                 | LR__4664
2ba16     64 69 76    | 	byte	"div"
2ba19     00          | 	byte	0
2ba1a                 | LR__4665
2ba1a     6D 6F 64    | 	byte	"mod"
2ba1d     00          | 	byte	0
2ba1e                 | LR__4666
2ba1e     73 68 6C    | 	byte	"shl"
2ba21     00          | 	byte	0
2ba22                 | LR__4667
2ba22     73 68 72    | 	byte	"shr"
2ba25     00          | 	byte	0
2ba26                 | LR__4668
2ba26     5E          | 	byte	"^"
2ba27     00          | 	byte	0
2ba28                 | LR__4669
2ba28     6E 6F 74    | 	byte	"not"
2ba2b     00          | 	byte	0
2ba2c                 | LR__4670
2ba2c     40          | 	byte	"@"
2ba2d     00          | 	byte	0
2ba2e                 | LR__4671
2ba2e     3D          | 	byte	"="
2ba2f     00          | 	byte	0
2ba30                 | LR__4672
2ba30     3E 3D       | 	byte	">="
2ba32     00          | 	byte	0
2ba33                 | LR__4673
2ba33     3C 3D       | 	byte	"<="
2ba35     00          | 	byte	0
2ba36                 | LR__4674
2ba36     3C          | 	byte	"<"
2ba37     00          | 	byte	0
2ba38                 | LR__4675
2ba38     3E          | 	byte	">"
2ba39     00          | 	byte	0
2ba3a                 | LR__4676
2ba3a     3C 3E       | 	byte	"<>"
2ba3c     00          | 	byte	0
2ba3d                 | LR__4677
2ba3d     2B 2B       | 	byte	"++"
2ba3f     00          | 	byte	0
2ba40                 | LR__4678
2ba40     2D 2D       | 	byte	"--"
2ba42     00          | 	byte	0
2ba43                 | LR__4679
2ba43     23          | 	byte	"#"
2ba44     00          | 	byte	0
2ba45                 | LR__4680
2ba45     23          | 	byte	"#"
2ba46     00          | 	byte	0
2ba47                 | LR__4681
2ba47     2D          | 	byte	"-"
2ba48     00          | 	byte	0
2ba49                 | LR__4682
2ba49     30          | 	byte	"0"
2ba4a     00          | 	byte	0
2ba4b                 | LR__4683
2ba4b     63          | 	byte	"c"
2ba4c     00          | 	byte	0
2ba4d                 | LR__4684
2ba4d     63 23       | 	byte	"c#"
2ba4f     00          | 	byte	0
2ba50                 | LR__4685
2ba50     64          | 	byte	"d"
2ba51     00          | 	byte	0
2ba52                 | LR__4686
2ba52     64 23       | 	byte	"d#"
2ba54     00          | 	byte	0
2ba55                 | LR__4687
2ba55     65          | 	byte	"e"
2ba56     00          | 	byte	0
2ba57                 | LR__4688
2ba57     66          | 	byte	"f"
2ba58     00          | 	byte	0
2ba59                 | LR__4689
2ba59     66 23       | 	byte	"f#"
2ba5b     00          | 	byte	0
2ba5c                 | LR__4690
2ba5c     67          | 	byte	"g"
2ba5d     00          | 	byte	0
2ba5e                 | LR__4691
2ba5e     67 23       | 	byte	"g#"
2ba60     00          | 	byte	0
2ba61                 | LR__4692
2ba61     61          | 	byte	"a"
2ba62     00          | 	byte	0
2ba63                 | LR__4693
2ba63     61 23       | 	byte	"a#"
2ba65     00          | 	byte	0
2ba66                 | LR__4694
2ba66     68          | 	byte	"h"
2ba67     00          | 	byte	0
2ba68                 | LR__4695
2ba68     62          | 	byte	"b"
2ba69     00          | 	byte	0
2ba6a                 | LR__4696
2ba6a     2B          | 	byte	"+"
2ba6b     00          | 	byte	0
2ba6c                 | LR__4697
2ba6c     2D          | 	byte	"-"
2ba6d     00          | 	byte	0
2ba6e                 | LR__4698
2ba6e     3D          | 	byte	"="
2ba6f     00          | 	byte	0
2ba70                 | LR__4699
2ba70     2C          | 	byte	","
2ba71     00          | 	byte	0
2ba72                 | LR__4700
2ba72     2A          | 	byte	"*"
2ba73     00          | 	byte	0
2ba74                 | LR__4701
2ba74     2F          | 	byte	"/"
2ba75     00          | 	byte	0
2ba76                 | LR__4702
2ba76     3B          | 	byte	";"
2ba77     00          | 	byte	0
2ba78                 | LR__4703
2ba78     22          | 	byte	34
2ba79     00          | 	byte	0
2ba7a                 | LR__4704
2ba7a     5E          | 	byte	"^"
2ba7b     00          | 	byte	0
2ba7c                 | LR__4705
2ba7c     29          | 	byte	")"
2ba7d     00          | 	byte	0
2ba7e                 | LR__4706
2ba7e     28          | 	byte	"("
2ba7f     00          | 	byte	0
2ba80                 | LR__4707
2ba80     3A          | 	byte	":"
2ba81     00          | 	byte	0
2ba82                 | LR__4708
2ba82     20          | 	byte	" "
2ba83     00          | 	byte	0
2ba84                 | LR__4709
2ba84     3E          | 	byte	">"
2ba85     00          | 	byte	0
2ba86                 | LR__4710
2ba86     3C          | 	byte	"<"
2ba87     00          | 	byte	0
2ba88                 | LR__4711
2ba88     3D          | 	byte	"="
2ba89     00          | 	byte	0
2ba8a                 | LR__4712
2ba8a     62 65 65 70 | 	byte	"beep"
2ba8e     00          | 	byte	0
2ba8f                 | LR__4713
2ba8f     62 2E       | 	byte	"b."
2ba91     00          | 	byte	0
2ba92                 | LR__4714
2ba92     62 6F 78    | 	byte	"box"
2ba95     00          | 	byte	0
2ba96                 | LR__4715
2ba96     62 72 75 6E | 	byte	"brun"
2ba9a     00          | 	byte	0
2ba9b                 | LR__4716
2ba9b     62 72 2E    | 	byte	"br."
2ba9e     00          | 	byte	0
2ba9f                 | LR__4717
2ba9f     63 69 72 63 
2baa3     6C 65       | 	byte	"circle"
2baa5     00          | 	byte	0
2baa6                 | LR__4718
2baa6     63 69 2E    | 	byte	"ci."
2baa9     00          | 	byte	0
2baaa                 | LR__4719
2baaa     63 6C 69 63 
2baae     6B          | 	byte	"click"
2baaf     00          | 	byte	0
2bab0                 | LR__4720
2bab0     63 6C 73    | 	byte	"cls"
2bab3     00          | 	byte	0
2bab4                 | LR__4721
2bab4     63 6F 6C 6F 
2bab8     72          | 	byte	"color"
2bab9     00          | 	byte	0
2baba                 | LR__4722
2baba     63 2E       | 	byte	"c."
2babc     00          | 	byte	0
2babd                 | LR__4723
2babd     63 73 61 76 
2bac1     65          | 	byte	"csave"
2bac2     00          | 	byte	0
2bac3                 | LR__4724
2bac3     63 73 2E    | 	byte	"cs."
2bac6     00          | 	byte	0
2bac7                 | LR__4725
2bac7     63 75 72 73 
2bacb     6F 72       | 	byte	"cursor"
2bacd     00          | 	byte	0
2bace                 | LR__4726
2bace     64 65 66 73 
2bad2     6E 64       | 	byte	"defsnd"
2bad4     00          | 	byte	0
2bad5                 | LR__4727
2bad5     64 65 66 65 
2bad9     6E 76       | 	byte	"defenv"
2badb     00          | 	byte	0
2badc                 | LR__4728
2badc     64 65 66 73 
2bae0     70 72 69 74 
2bae4     65          | 	byte	"defsprite"
2bae5     00          | 	byte	0
2bae6                 | LR__4729
2bae6     64 73 2E    | 	byte	"ds."
2bae9     00          | 	byte	0
2baea                 | LR__4730
2baea     64 65 67    | 	byte	"deg"
2baed     00          | 	byte	0
2baee                 | LR__4731
2baee     64 69 6D    | 	byte	"dim"
2baf1     00          | 	byte	0
2baf2                 | LR__4732
2baf2     64 69 72    | 	byte	"dir"
2baf5     00          | 	byte	0
2baf6                 | LR__4733
2baf6     64 70 6F 6B 
2bafa     65          | 	byte	"dpoke"
2bafb     00          | 	byte	0
2bafc                 | LR__4734
2bafc     64 72 61 77 | 	byte	"draw"
2bb00     00          | 	byte	0
2bb01                 | LR__4735
2bb01     64 72 2E    | 	byte	"dr."
2bb04     00          | 	byte	0
2bb05                 | LR__4736
2bb05     65 6C 73 65 | 	byte	"else"
2bb09     00          | 	byte	0
2bb0a                 | LR__4737
2bb0a     66 63 69 72 
2bb0e     63 6C 65    | 	byte	"fcircle"
2bb11     00          | 	byte	0
2bb12                 | LR__4738
2bb12     66 63 2E    | 	byte	"fc."
2bb15     00          | 	byte	0
2bb16                 | LR__4739
2bb16     66 69 6C 6C | 	byte	"fill"
2bb1a     00          | 	byte	0
2bb1b                 | LR__4740
2bb1b     66 69 2E    | 	byte	"fi."
2bb1e     00          | 	byte	0
2bb1f                 | LR__4741
2bb1f     66 6F 6E 74 | 	byte	"font"
2bb23     00          | 	byte	0
2bb24                 | LR__4742
2bb24     66 6F 72    | 	byte	"for"
2bb27     00          | 	byte	0
2bb28                 | LR__4743
2bb28     66 2E       | 	byte	"f."
2bb2a     00          | 	byte	0
2bb2b                 | LR__4744
2bb2b     66 72 61 6D 
2bb2f     65          | 	byte	"frame"
2bb30     00          | 	byte	0
2bb31                 | LR__4745
2bb31     66 72 2E    | 	byte	"fr."
2bb34     00          | 	byte	0
2bb35                 | LR__4746
2bb35     67 6F 74 6F | 	byte	"goto"
2bb39     00          | 	byte	0
2bb3a                 | LR__4747
2bb3a     67 2E       | 	byte	"g."
2bb3c     00          | 	byte	0
2bb3d                 | LR__4748
2bb3d     69 66       | 	byte	"if"
2bb3f     00          | 	byte	0
2bb40                 | LR__4749
2bb40     69 6E 6B    | 	byte	"ink"
2bb43     00          | 	byte	0
2bb44                 | LR__4750
2bb44     69 2E       | 	byte	"i."
2bb46     00          | 	byte	0
2bb47                 | LR__4751
2bb47     69 6E 74    | 	byte	"int"
2bb4a     00          | 	byte	0
2bb4b                 | LR__4752
2bb4b     6C 69 73 74 | 	byte	"list"
2bb4f     00          | 	byte	0
2bb50                 | LR__4753
2bb50     6C 2E       | 	byte	"l."
2bb52     00          | 	byte	0
2bb53                 | LR__4754
2bb53     6C 6F 61 64 | 	byte	"load"
2bb57     00          | 	byte	0
2bb58                 | LR__4755
2bb58     6C 6F 2E    | 	byte	"lo."
2bb5b     00          | 	byte	0
2bb5c                 | LR__4756
2bb5c     6C 70 6F 6B 
2bb60     65          | 	byte	"lpoke"
2bb61     00          | 	byte	0
2bb62                 | LR__4757
2bb62     6D 6F 64 65 | 	byte	"mode"
2bb66     00          | 	byte	0
2bb67                 | LR__4758
2bb67     6D 2E       | 	byte	"m."
2bb69     00          | 	byte	0
2bb6a                 | LR__4759
2bb6a     6D 6F 75 73 
2bb6e     65          | 	byte	"mouse"
2bb6f     00          | 	byte	0
2bb70                 | LR__4760
2bb70     6E 65 77    | 	byte	"new"
2bb73     00          | 	byte	0
2bb74                 | LR__4761
2bb74     6E 65 78 74 | 	byte	"next"
2bb78     00          | 	byte	0
2bb79                 | LR__4762
2bb79     6E 2E       | 	byte	"n."
2bb7b     00          | 	byte	0
2bb7c                 | LR__4763
2bb7c     70 61 70 65 
2bb80     72          | 	byte	"paper"
2bb81     00          | 	byte	0
2bb82                 | LR__4764
2bb82     70 2E       | 	byte	"p."
2bb84     00          | 	byte	0
2bb85                 | LR__4765
2bb85     70 69 6E 66 
2bb89     6C 6F 61 74 | 	byte	"pinfloat"
2bb8d     00          | 	byte	0
2bb8e                 | LR__4766
2bb8e     70 69 6E 68 
2bb92     69          | 	byte	"pinhi"
2bb93     00          | 	byte	0
2bb94                 | LR__4767
2bb94     70 69 6E 6C 
2bb98     6F          | 	byte	"pinlo"
2bb99     00          | 	byte	0
2bb9a                 | LR__4768
2bb9a     70 69 6E 73 
2bb9e     74 61 72 74 | 	byte	"pinstart"
2bba2     00          | 	byte	0
2bba3                 | LR__4769
2bba3     70 69 6E 74 
2bba7     6F 67 67 6C 
2bbab     65          | 	byte	"pintoggle"
2bbac     00          | 	byte	0
2bbad                 | LR__4770
2bbad     70 69 6E 77 
2bbb1     72 69 74 65 | 	byte	"pinwrite"
2bbb5     00          | 	byte	0
2bbb6                 | LR__4771
2bbb6     70 6C 61 79 | 	byte	"play"
2bbba     00          | 	byte	0
2bbbb                 | LR__4772
2bbbb     70 6C 6F 74 | 	byte	"plot"
2bbbf     00          | 	byte	0
2bbc0                 | LR__4773
2bbc0     70 6C 2E    | 	byte	"pl."
2bbc3     00          | 	byte	0
2bbc4                 | LR__4774
2bbc4     70 6F 6B 65 | 	byte	"poke"
2bbc8     00          | 	byte	0
2bbc9                 | LR__4775
2bbc9     70 6F 73 69 
2bbcd     74 69 6F 6E | 	byte	"position"
2bbd1     00          | 	byte	0
2bbd2                 | LR__4776
2bbd2     70 6F 73 2E | 	byte	"pos."
2bbd6     00          | 	byte	0
2bbd7                 | LR__4777
2bbd7     70 72 69 6E 
2bbdb     74          | 	byte	"print"
2bbdc     00          | 	byte	0
2bbdd                 | LR__4778
2bbdd     3F          | 	byte	"?"
2bbde     00          | 	byte	0
2bbdf                 | LR__4779
2bbdf     72 61 64    | 	byte	"rad"
2bbe2     00          | 	byte	0
2bbe3                 | LR__4780
2bbe3     72 65 6C 65 
2bbe7     61 73 65    | 	byte	"release"
2bbea     00          | 	byte	0
2bbeb                 | LR__4781
2bbeb     72 75 6E    | 	byte	"run"
2bbee     00          | 	byte	0
2bbef                 | LR__4782
2bbef     73 61 76 65 | 	byte	"save"
2bbf3     00          | 	byte	0
2bbf4                 | LR__4783
2bbf4     73 2E       | 	byte	"s."
2bbf6     00          | 	byte	0
2bbf7                 | LR__4784
2bbf7     73 65 74 64 
2bbfb     65 6C 61 79 | 	byte	"setdelay"
2bbff     00          | 	byte	0
2bc00                 | LR__4785
2bc00     73 65 74 65 
2bc04     6E 76       | 	byte	"setenv"
2bc06     00          | 	byte	0
2bc07                 | LR__4786
2bc07     73 65 74 6C 
2bc0b     65 6E       | 	byte	"setlen"
2bc0d     00          | 	byte	0
2bc0e                 | LR__4787
2bc0e     73 65 74 70 
2bc12     61 6E       | 	byte	"setpan"
2bc14     00          | 	byte	0
2bc15                 | LR__4788
2bc15     73 65 74 73 
2bc19     75 73 74 61 
2bc1d     69 6E       | 	byte	"setsustain"
2bc1f     00          | 	byte	0
2bc20                 | LR__4789
2bc20     73 65 74 76 
2bc24     6F 6C       | 	byte	"setvol"
2bc26     00          | 	byte	0
2bc27                 | LR__4790
2bc27     73 65 74 77 
2bc2b     61 76 65    | 	byte	"setwave"
2bc2e     00          | 	byte	0
2bc2f                 | LR__4791
2bc2f     73 6F 75 6E 
2bc33     64          | 	byte	"sound"
2bc34     00          | 	byte	0
2bc35                 | LR__4792
2bc35     73 6F 2E    | 	byte	"so."
2bc38     00          | 	byte	0
2bc39                 | LR__4793
2bc39     73 70 72 69 
2bc3d     74 65       | 	byte	"sprite"
2bc3f     00          | 	byte	0
2bc40                 | LR__4794
2bc40     73 70 2E    | 	byte	"sp."
2bc43     00          | 	byte	0
2bc44                 | LR__4795
2bc44     74 68 65 6E | 	byte	"then"
2bc48     00          | 	byte	0
2bc49                 | LR__4796
2bc49     77 61 69 74 
2bc4d     6D 73       | 	byte	"waitms"
2bc4f     00          | 	byte	0
2bc50                 | LR__4797
2bc50     77 61 69 74 
2bc54     63 6C 6F 63 
2bc58     6B          | 	byte	"waitclock"
2bc59     00          | 	byte	0
2bc5a                 | LR__4798
2bc5a     77 63 2E    | 	byte	"wc."
2bc5d     00          | 	byte	0
2bc5e                 | LR__4799
2bc5e     77 61 69 74 
2bc62     76 62 6C    | 	byte	"waitvbl"
2bc65     00          | 	byte	0
2bc66                 | LR__4800
2bc66     77 76 2E    | 	byte	"wv."
2bc69     00          | 	byte	0
2bc6a                 | LR__4801
2bc6a     77 78 70 69 
2bc6e     6E          | 	byte	"wxpin"
2bc6f     00          | 	byte	0
2bc70                 | LR__4802
2bc70     77 79 70 69 
2bc74     6E          | 	byte	"wypin"
2bc75     00          | 	byte	0
2bc76                 | LR__4803
2bc76     61 62 73    | 	byte	"abs"
2bc79     00          | 	byte	0
2bc7a                 | LR__4804
2bc7a     61 63 6F 73 | 	byte	"acos"
2bc7e     00          | 	byte	0
2bc7f                 | LR__4805
2bc7f     61 64 72    | 	byte	"adr"
2bc82     00          | 	byte	0
2bc83                 | LR__4806
2bc83     61 64 64 72 | 	byte	"addr"
2bc87     00          | 	byte	0
2bc88                 | LR__4807
2bc88     76 61 72 70 
2bc8c     74 72       | 	byte	"varptr"
2bc8e     00          | 	byte	0
2bc8f                 | LR__4808
2bc8f     61 73 69 6E | 	byte	"asin"
2bc93     00          | 	byte	0
2bc94                 | LR__4809
2bc94     61 74 6E    | 	byte	"atn"
2bc97     00          | 	byte	0
2bc98                 | LR__4810
2bc98     63 6F 73    | 	byte	"cos"
2bc9b     00          | 	byte	0
2bc9c                 | LR__4811
2bc9c     64 70 65 65 
2bca0     6B          | 	byte	"dpeek"
2bca1     00          | 	byte	0
2bca2                 | LR__4812
2bca2     66 72 65    | 	byte	"fre"
2bca5     00          | 	byte	0
2bca6                 | LR__4813
2bca6     67 65 74 70 
2bcaa     69 78 65 6C | 	byte	"getpixel"
2bcae     00          | 	byte	0
2bcaf                 | LR__4814
2bcaf     67 65 2E    | 	byte	"ge."
2bcb2     00          | 	byte	0
2bcb3                 | LR__4815
2bcb3     67 65 74 65 
2bcb7     6E 76 73 75 
2bcbb     73 74 61 69 
2bcbf     6E          | 	byte	"getenvsustain"
2bcc0     00          | 	byte	0
2bcc1                 | LR__4816
2bcc1     67 65 74 6E 
2bcc5     6F 74 65 76 
2bcc9     61 6C 75 65 | 	byte	"getnotevalue"
2bccd     00          | 	byte	0
2bcce                 | LR__4817
2bcce     67 65 74 74 
2bcd2     69 6D 65    | 	byte	"gettime"
2bcd5     00          | 	byte	0
2bcd6                 | LR__4818
2bcd6     69 6E 6B 65 
2bcda     79 24       | 	byte	"inkey$"
2bcdc     00          | 	byte	0
2bcdd                 | LR__4819
2bcdd     6C 70 65 65 
2bce1     6B          | 	byte	"lpeek"
2bce2     00          | 	byte	0
2bce3                 | LR__4820
2bce3     6D 6F 75 73 
2bce7     65 6B       | 	byte	"mousek"
2bce9     00          | 	byte	0
2bcea                 | LR__4821
2bcea     6D 6F 75 73 
2bcee     65 77       | 	byte	"mousew"
2bcf0     00          | 	byte	0
2bcf1                 | LR__4822
2bcf1     6D 6F 75 73 
2bcf5     65 78       | 	byte	"mousex"
2bcf7     00          | 	byte	0
2bcf8                 | LR__4823
2bcf8     6D 6F 75 73 
2bcfc     65 79       | 	byte	"mousey"
2bcfe     00          | 	byte	0
2bcff                 | LR__4824
2bcff     70 65 65 6B | 	byte	"peek"
2bd03     00          | 	byte	0
2bd04                 | LR__4825
2bd04     70 69 6E 72 
2bd08     65 61 64    | 	byte	"pinread"
2bd0b     00          | 	byte	0
2bd0c                 | LR__4826
2bd0c     72 64 70 69 
2bd10     6E          | 	byte	"rdpin"
2bd11     00          | 	byte	0
2bd12                 | LR__4827
2bd12     72 71 70 69 
2bd16     6E          | 	byte	"rqpin"
2bd17     00          | 	byte	0
2bd18                 | LR__4828
2bd18     72 6E 64    | 	byte	"rnd"
2bd1b     00          | 	byte	0
2bd1c                 | LR__4829
2bd1c     73 69 6E    | 	byte	"sin"
2bd1f     00          | 	byte	0
2bd20                 | LR__4830
2bd20     73 71 72    | 	byte	"sqr"
2bd23     00          | 	byte	0
2bd24                 | LR__4831
2bd24     73 74 69 63 
2bd28     6B          | 	byte	"stick"
2bd29     00          | 	byte	0
2bd2a                 | LR__4832
2bd2a     73 74 72 69 
2bd2e     67          | 	byte	"strig"
2bd2f     00          | 	byte	0
2bd30                 | LR__4833
2bd30     74 61 6E    | 	byte	"tan"
2bd33     00          | 	byte	0
2bd34                 | LR__4834
2bd34     61          | 	byte	"a"
2bd35     00          | 	byte	0
2bd36                 | LR__4835
2bd36     7A          | 	byte	"z"
2bd37     00          | 	byte	0
2bd38                 | LR__4836
2bd38     5F          | 	byte	"_"
2bd39     00          | 	byte	0
2bd3a                 | LR__4837
2bd3a     61          | 	byte	"a"
2bd3b     00          | 	byte	0
2bd3c                 | LR__4838
2bd3c     7A          | 	byte	"z"
2bd3d     00          | 	byte	0
2bd3e                 | LR__4839
2bd3e     30          | 	byte	"0"
2bd3f     00          | 	byte	0
2bd40                 | LR__4840
2bd40     39          | 	byte	"9"
2bd41     00          | 	byte	0
2bd42                 | LR__4841
2bd42     5F          | 	byte	"_"
2bd43     00          | 	byte	0
2bd44                 | LR__4842
2bd44     2E          | 	byte	"."
2bd45     00          | 	byte	0
2bd46                 | LR__4843
2bd46     61          | 	byte	"a"
2bd47     00          | 	byte	0
2bd48                 | LR__4844
2bd48     7A          | 	byte	"z"
2bd49     00          | 	byte	0
2bd4a                 | LR__4845
2bd4a     30          | 	byte	"0"
2bd4b     00          | 	byte	0
2bd4c                 | LR__4846
2bd4c     39          | 	byte	"9"
2bd4d     00          | 	byte	0
2bd4e                 | LR__4847
2bd4e     5F          | 	byte	"_"
2bd4f     00          | 	byte	0
2bd50                 | LR__4848
2bd50     24          | 	byte	"$"
2bd51     00          | 	byte	0
2bd52                 | LR__4849
2bd52     25          | 	byte	"%"
2bd53     00          | 	byte	0
2bd54                 | LR__4850
2bd54     21          | 	byte	"!"
2bd55     00          | 	byte	0
2bd56                 | LR__4851
2bd56     30          | 	byte	"0"
2bd57     00          | 	byte	0
2bd58                 | LR__4852
2bd58     39          | 	byte	"9"
2bd59     00          | 	byte	0
2bd5a                 | LR__4853
2bd5a     2E          | 	byte	"."
2bd5b     00          | 	byte	0
2bd5c                 | LR__4854
2bd5c     24          | 	byte	"$"
2bd5d     00          | 	byte	0
2bd5e                 | LR__4855
2bd5e     25          | 	byte	"%"
2bd5f     00          | 	byte	0
2bd60                 | LR__4856
2bd60     2D          | 	byte	"-"
2bd61     00          | 	byte	0
2bd62                 | LR__4857
2bd62     2E          | 	byte	"."
2bd63     00          | 	byte	0
2bd64                 | LR__4858
2bd64     30          | 	byte	"0"
2bd65     00          | 	byte	0
2bd66                 | LR__4859
2bd66     39          | 	byte	"9"
2bd67     00          | 	byte	0
2bd68                 | LR__4860
2bd68     5F          | 	byte	"_"
2bd69     00          | 	byte	0
2bd6a                 | LR__4861
2bd6a     2E          | 	byte	"."
2bd6b     00          | 	byte	0
2bd6c                 | LR__4862
2bd6c     45          | 	byte	"E"
2bd6d     00          | 	byte	0
2bd6e                 | LR__4863
2bd6e     65          | 	byte	"e"
2bd6f     00          | 	byte	0
2bd70                 | LR__4864
2bd70     2D          | 	byte	"-"
2bd71     00          | 	byte	0
2bd72                 | LR__4865
2bd72     2D          | 	byte	"-"
2bd73     00          | 	byte	0
2bd74                 | LR__4866
2bd74     65          | 	byte	"e"
2bd75     00          | 	byte	0
2bd76                 | LR__4867
2bd76     2E          | 	byte	"."
2bd77     00          | 	byte	0
2bd78                 | LR__4868
2bd78     45          | 	byte	"E"
2bd79     00          | 	byte	0
2bd7a                 | LR__4869
2bd7a     65          | 	byte	"e"
2bd7b     00          | 	byte	0
2bd7c                 | LR__4870
2bd7c     30          | 	byte	"0"
2bd7d     00          | 	byte	0
2bd7e                 | LR__4871
2bd7e     39          | 	byte	"9"
2bd7f     00          | 	byte	0
2bd80                 | LR__4872
2bd80     24          | 	byte	"$"
2bd81     00          | 	byte	0
2bd82                 | LR__4873
2bd82     25          | 	byte	"%"
2bd83     00          | 	byte	0
2bd84                 | LR__4874
2bd84     2D          | 	byte	"-"
2bd85     00          | 	byte	0
2bd86                 | LR__4875
2bd86     30          | 	byte	"0"
2bd87     00          | 	byte	0
2bd88                 | LR__4876
2bd88     39          | 	byte	"9"
2bd89     00          | 	byte	0
2bd8a                 | LR__4877
2bd8a     5F          | 	byte	"_"
2bd8b     00          | 	byte	0
2bd8c                 | LR__4878
2bd8c     30          | 	byte	"0"
2bd8d     00          | 	byte	0
2bd8e                 | LR__4879
2bd8e     39          | 	byte	"9"
2bd8f     00          | 	byte	0
2bd90                 | LR__4880
2bd90     5F          | 	byte	"_"
2bd91     00          | 	byte	0
2bd92                 | LR__4881
2bd92     22          | 	byte	34
2bd93     00          | 	byte	0
2bd94                 | LR__4882
2bd94     22          | 	byte	34
2bd95     00          | 	byte	0
2bd96                 | LR__4883
2bd96     44 69 6D 3A 
2bd9a     20 61 74 20 
2bd9e     6C 69 6E 65 
2bda2     20          | 	byte	"Dim: at line "
2bda3     00          | 	byte	0
2bda4                 | LR__4884
2bda4     3A 20 77 61 
2bda8     72 6E 69 6E 
2bdac     67 3A 20 74 
2bdb0     68 65 20 76 
2bdb4     61 72 69 61 
2bdb8     62 6C 65 20 
2bdbc     65 78 69 73 
2bdc0     74 65 64 2E | 	byte	": warning: the variable existed."
2bdc4     00          | 	byte	0
2bdc5                 | LR__4885
2bdc5     28          | 	byte	"("
2bdc6     00          | 	byte	0
2bdc7                 | LR__4886
2bdc7     61 73       | 	byte	"as"
2bdc9     00          | 	byte	0
2bdca                 | LR__4887
2bdca     61 73       | 	byte	"as"
2bdcc     00          | 	byte	0
2bdcd                 | LR__4888
2bdcd     2C          | 	byte	","
2bdce     00          | 	byte	0
2bdcf                 | LR__4889
2bdcf     29          | 	byte	")"
2bdd0     00          | 	byte	0
2bdd1                 | LR__4890
2bdd1     29          | 	byte	")"
2bdd2     00          | 	byte	0
2bdd3                 | LR__4891
2bdd3     61 73       | 	byte	"as"
2bdd5     00          | 	byte	0
2bdd6                 | LR__4892
2bdd6     62 79 74 65 | 	byte	"byte"
2bdda     00          | 	byte	0
2bddb                 | LR__4893
2bddb     75 62 79 74 
2bddf     65          | 	byte	"ubyte"
2bde0     00          | 	byte	0
2bde1                 | LR__4894
2bde1     73 68 6F 72 
2bde5     74          | 	byte	"short"
2bde6     00          | 	byte	0
2bde7                 | LR__4895
2bde7     75 73 68 6F 
2bdeb     72 74       | 	byte	"ushort"
2bded     00          | 	byte	0
2bdee                 | LR__4896
2bdee     6C 6F 6E 67 | 	byte	"long"
2bdf2     00          | 	byte	0
2bdf3                 | LR__4897
2bdf3     69 6E 74 65 
2bdf7     67 65 72    | 	byte	"integer"
2bdfa     00          | 	byte	0
2bdfb                 | LR__4898
2bdfb     75 6C 6F 6E 
2bdff     67          | 	byte	"ulong"
2be00     00          | 	byte	0
2be01                 | LR__4899
2be01     69 6E 74 36 
2be05     34          | 	byte	"int64"
2be06     00          | 	byte	0
2be07                 | LR__4900
2be07     75 69 6E 74 
2be0b     36 34       | 	byte	"uint64"
2be0d     00          | 	byte	0
2be0e                 | LR__4901
2be0e     73 69 6E 67 
2be12     6C 65       | 	byte	"single"
2be14     00          | 	byte	0
2be15                 | LR__4902
2be15     64 6F 75 62 
2be19     6C 65       | 	byte	"double"
2be1b     00          | 	byte	0
2be1c                 | LR__4903
2be1c     73 74 72 69 
2be20     6E 67       | 	byte	"string"
2be22     00          | 	byte	0
2be23                 | LR__4904
2be23     74 6F       | 	byte	"to"
2be25     00          | 	byte	0
2be26                 | LR__4905
2be26     73 74 65 70 | 	byte	"step"
2be2a     00          | 	byte	0
2be2b                 | LR__4906
2be2b     73 2E       | 	byte	"s."
2be2d     00          | 	byte	0
2be2e                 | LR__4907
2be2e     57 65 20 68 
2be32     61 76 65 20 
2be36     61 20 73 6C 
2be3a     6F 77 20 67 
2be3e     6F 74 6F 2C 
2be42     20 74 6F 64 
2be46     6F 20 20    | 	byte	"We have a slow goto, todo  "
2be49     00          | 	byte	0
2be4a                 | LR__4908
2be4a     6E 6F 6E 61 
2be4e     6D 65 2E 62 
2be52     61 73       | 	byte	"noname.bas"
2be54     00          | 	byte	0
2be55                 | LR__4909
2be55                 | 	byte	
2be55     00          | 	byte	0
2be56                 | LR__4910
2be56     6E 6F 6E 61 
2be5a     6D 65 2E 62 
2be5e     61 73       | 	byte	"noname.bas"
2be60     00          | 	byte	0
2be61                 | LR__4911
2be61     2F          | 	byte	"/"
2be62     00          | 	byte	0
2be63                 | LR__4912
2be63                 | 	byte	
2be63     00          | 	byte	0
2be64                 | LR__4913
2be64                 | 	byte	
2be64     00          | 	byte	0
2be65                 | LR__4914
2be65     6E 6F 6E 61 
2be69     6D 65 2E 62 
2be6d     61 73       | 	byte	"noname.bas"
2be6f     00          | 	byte	0
2be70                 | LR__4915
2be70     2F          | 	byte	"/"
2be71     00          | 	byte	0
2be72                 | LR__4916
2be72     53 79 73 74 
2be76     65 6D 20 65 
2be7a     72 72 6F 72 
2be7e     20          | 	byte	"System error "
2be7f     00          | 	byte	0
2be80                 | LR__4917
2be80     3A 20       | 	byte	": "
2be82     00          | 	byte	0
2be83                 | LR__4918
2be83     2F          | 	byte	"/"
2be84     00          | 	byte	0
2be85                 | LR__4919
2be85     30          | 	byte	"0"
2be86     00          | 	byte	0
2be87                 | LR__4920
2be87     39          | 	byte	"9"
2be88     00          | 	byte	0
2be89                 | LR__4921
2be89                 | 	byte	
2be89     00          | 	byte	0
2be8a                 | LR__4922
2be8a     53 74 6F 70 
2be8e     70 65 64 20 
2be92     61 74 20 6C 
2be96     69 6E 65 20 | 	byte	"Stopped at line "
2be9a     00          | 	byte	0
2be9b                 | LR__4923
2be9b                 | 	byte	
2be9b     00          | 	byte	0
2be9c                 | LR__4924
2be9c                 | 	byte	
2be9c     00          | 	byte	0
2be9d                 | LR__4925
2be9d     2F 73 64 2F 
2bea1     6D 65 64 69 
2bea5     61 2F 68 2F | 	byte	"/sd/media/h/"
2bea9     00          | 	byte	0
2beaa                 | LR__4926
2beaa     53 79 73 74 
2beae     65 6D 20 65 
2beb2     72 72 6F 72 
2beb6     20          | 	byte	"System error "
2beb7     00          | 	byte	0
2beb8                 | LR__4927
2beb8     3A 20       | 	byte	": "
2beba     00          | 	byte	0
2bebb                 | LR__4928
2bebb                 | 	byte	
2bebb     00          | 	byte	0
2bebc                 | LR__4929
2bebc                 | 	byte	
2bebc     00          | 	byte	0
2bebd                 | LR__4930
2bebd     2F 73 64 2F 
2bec1     6D 65 64 69 
2bec5     61 2F 73 2F | 	byte	"/sd/media/s/"
2bec9     00          | 	byte	0
2beca                 | LR__4931
2beca     53 79 73 74 
2bece     65 6D 20 65 
2bed2     72 72 6F 72 
2bed6     20          | 	byte	"System error "
2bed7     00          | 	byte	0
2bed8                 | LR__4932
2bed8     3A 20       | 	byte	": "
2beda     00          | 	byte	0
2bedb                 | LR__4933
2bedb     45 72 72 6F 
2bedf     72 20       | 	byte	"Error "
2bee1     00          | 	byte	0
2bee2                 | LR__4934
2bee2     3A 20       | 	byte	": "
2bee4     00          | 	byte	0
2bee5                 | LR__4935
2bee5                 | 	byte	
2bee5     00          | 	byte	0
2bee6                 | LR__4936
2bee6                 | 	byte	
2bee6     00          | 	byte	0
2bee7                 | LR__4937
2bee7     72 6E 64 3A 
2beeb     20          | 	byte	"rnd: "
2beec     00          | 	byte	0
2beed                 | LR__4938
2beed     72 6E 64 3A 
2bef1     20          | 	byte	"rnd: "
2bef2     00          | 	byte	0
2bef3                 | LR__4939
2bef3     67 65 74 65 
2bef7     6E 76 73 75 
2befb     73 74 61 69 
2beff     6E 3A 20    | 	byte	"getenvsustain: "
2bf02     00          | 	byte	0
2bf03                 | LR__4940
2bf03     73 69 6E 3A 
2bf07     20          | 	byte	"sin: "
2bf08     00          | 	byte	0
2bf09                 | LR__4941
2bf09     63 6F 73 3A 
2bf0d     20          | 	byte	"cos: "
2bf0e     00          | 	byte	0
2bf0f                 | LR__4942
2bf0f     74 61 6E 3A 
2bf13     20          | 	byte	"tan: "
2bf14     00          | 	byte	0
2bf15                 | LR__4943
2bf15     61 73 69 6E 
2bf19     3A 20       | 	byte	"asin: "
2bf1b     00          | 	byte	0
2bf1c                 | LR__4944
2bf1c     61 63 6F 73 
2bf20     3A 20       | 	byte	"acos: "
2bf22     00          | 	byte	0
2bf23                 | LR__4945
2bf23     61 74 6E 3A 
2bf27     20          | 	byte	"atn: "
2bf28     00          | 	byte	0
2bf29                 | LR__4946
2bf29     73 71 72 3A 
2bf2d     20          | 	byte	"sqr: "
2bf2e     00          | 	byte	0
2bf2f                 | LR__4947
2bf2f     73 74 69 63 
2bf33     6B 3A 20    | 	byte	"stick: "
2bf36     00          | 	byte	0
2bf37                 | LR__4948
2bf37     73 74 72 69 
2bf3b     67 3A 20    | 	byte	"strig: "
2bf3e     00          | 	byte	0
2bf3f                 | LR__4949
2bf3f     67 65 74 70 
2bf43     69 78 65 6C 
2bf47     3A 20       | 	byte	"getpixel: "
2bf49     00          | 	byte	0
2bf4a                 | LR__4950
2bf4a                 | 	byte	
2bf4a     00          | 	byte	0
2bf4b                 | LR__4951
2bf4b     2F 73 64 2F 
2bf4f     62 61 73    | 	byte	"/sd/bas"
2bf52     00          | 	byte	0
2bf53                 | LR__4952
2bf53     57 6F 72 6B 
2bf57     69 6E 67 20 
2bf5b     64 69 72 65 
2bf5f     63 74 6F 72 
2bf63     79 3A 20    | 	byte	"Working directory: "
2bf66     00          | 	byte	0
2bf67                 | LR__4953
2bf67     2A          | 	byte	"*"
2bf68     00          | 	byte	0
2bf69                 | LR__4954
2bf69                 | 	byte	
2bf69     00          | 	byte	0
2bf6a                 | LR__4955
2bf6a     5B 64 69 72 
2bf6e     5D 20       | 	byte	"[dir] "
2bf70     00          | 	byte	0
2bf71                 | LR__4956
2bf71     2A          | 	byte	"*"
2bf72     00          | 	byte	0
2bf73                 | LR__4957
2bf73                 | 	byte	
2bf73     00          | 	byte	0
2bf74                 | LR__4958
2bf74     2D 2D 2D 2D 
2bf78     2D 6D 6F 72 
2bf7c     65 2C 20 70 
2bf80     72 65 73 73 
2bf84     20 61 6E 79 
2bf88     20 6B 65 79 | 	byte	"-----more, press any key"
2bf8c     00          | 	byte	0
2bf8d                 | LR__4959
2bf8d     20 20 20 20 
      ...             
2bfa5     20 20 20 20 
2bfa9     20          | 	byte	"                             "
2bfaa     00          | 	byte	0
2bfab                 | LR__4960
2bfab     2F          | 	byte	"/"
2bfac     00          | 	byte	0
2bfad                 | LR__4961
2bfad     2F 73 64 2F 
2bfb1     62 69 6E 2F | 	byte	"/sd/bin/"
2bfb5     00          | 	byte	0
2bfb6                 | LR__4962
2bfb6     53 79 73 74 
2bfba     65 6D 20 65 
2bfbe     72 72 6F 72 
2bfc2     20          | 	byte	"System error "
2bfc3     00          | 	byte	0
2bfc4                 | LR__4963
2bfc4     3A 20       | 	byte	": "
2bfc6     00          | 	byte	0
2bfc7                 | LR__4964
2bfc7                 | 	byte	
2bfc7     00          | 	byte	0
2bfc8                 | LR__4965
2bfc8     45 78 70 65 
2bfcc     63 74 65 64 
2bfd0     20 6E 75 6D 
2bfd4     62 65 72 2C 
2bfd8     20 67 6F 74 
2bfdc     20 73 6F 6D 
2bfe0     65 74 68 69 
2bfe4     6E 67 20 65 
2bfe8     6C 73 65 2E | 	byte	"Expected number, got something else."
2bfec     00          | 	byte	0
2bfed                 | LR__4966
2bfed     43 61 6E 6E 
2bff1     6F 74 20 61 
2bff5     64 64 20 61 
2bff9     20 6E 75 6D 
2bffd     62 65 72 20 
2c001     74 6F 20 61 
2c005     20 73 74 72 
2c009     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2c00d     00          | 	byte	0
2c00e                 | LR__4967
2c00e     43 61 6E 6E 
2c012     6F 74 20 73 
2c016     75 62 73 74 
2c01a     72 61 63 74 
2c01e     20 73 74 72 
2c022     69 6E 67 73 
2c026     2E          | 	byte	"Cannot substract strings."
2c027     00          | 	byte	0
2c028                 | LR__4968
2c028     55 6E 6B 6E 
2c02c     6F 77 6E 20 
2c030     65 72 72 6F 
2c034     72 20 77 68 
2c038     69 6C 65 20 
2c03c     61 64 64 69 
2c040     6E 67 2E    | 	byte	"Unknown error while adding."
2c043     00          | 	byte	0
2c044                 | LR__4969
2c044     55 6E 6B 6E 
2c048     6F 77 6E 20 
2c04c     65 72 72 6F 
2c050     72 20 77 68 
2c054     69 6C 65 20 
2c058     73 75 62 73 
2c05c     74 72 61 63 
2c060     74 69 6E 67 
2c064     2E          | 	byte	"Unknown error while substracting."
2c065     00          | 	byte	0
2c066                 | LR__4970
2c066     43 61 6E 6E 
2c06a     6F 74 20 64 
2c06e     6F 20 6C 6F 
2c072     67 69 63 20 
2c076     6F 70 65 72 
2c07a     61 74 69 6F 
2c07e     6E 20 6F 6E 
2c082     20 73 74 72 
2c086     69 6E 67 20 
2c08a     6F 72 20 66 
2c08e     6C 6F 61 74 
2c092     2E          | 	byte	"Cannot do logic operation on string or float."
2c093     00          | 	byte	0
2c094                 | LR__4971
2c094     55 6E 6B 6E 
2c098     6F 77 6E 20 
2c09c     65 72 72 6F 
2c0a0     72 20 77 68 
2c0a4     69 6C 65 20 
2c0a8     64 6F 69 6E 
2c0ac     67 20 6C 6F 
2c0b0     67 69 63 20 
2c0b4     6F 70 65 72 
2c0b8     61 74 69 6F 
2c0bc     6E 2E       | 	byte	"Unknown error while doing logic operation."
2c0be     00          | 	byte	0
2c0bf                 | LR__4972
2c0bf     43 61 6E 6E 
2c0c3     6F 74 20 6D 
2c0c7     75 6C 74 69 
2c0cb     70 6C 79 20 
2c0cf     73 74 72 69 
2c0d3     6E 67 73 2E | 	byte	"Cannot multiply strings."
2c0d7     00          | 	byte	0
2c0d8                 | LR__4973
2c0d8     55 6E 6B 6E 
2c0dc     6F 77 6E 20 
2c0e0     65 72 72 6F 
2c0e4     72 20 77 68 
2c0e8     69 6C 65 20 
2c0ec     6D 75 6C 74 
2c0f0     69 70 6C 79 
2c0f4     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2c0f8     00          | 	byte	0
2c0f9                 | LR__4974
2c0f9     43 61 6E 6E 
2c0fd     6F 74 20 64 
2c101     69 76 69 64 
2c105     65 20 73 74 
2c109     72 69 6E 67 
2c10d     73 2E       | 	byte	"Cannot divide strings."
2c10f     00          | 	byte	0
2c110                 | LR__4975
2c110     55 6E 6B 6E 
2c114     6F 77 6E 20 
2c118     65 72 72 6F 
2c11c     72 20 77 68 
2c120     69 6C 65 20 
2c124     64 69 76 69 
2c128     64 69 6E 67 
2c12c     2E          | 	byte	"Unknown error while dividing."
2c12d     00          | 	byte	0
2c12e                 | LR__4976
2c12e     43 61 6E 6E 
2c132     6F 74 20 63 
2c136     6F 6D 70 75 
2c13a     74 65 20 61 
2c13e     20 70 6F 77 
2c142     65 72 20 6F 
2c146     66 20 61 20 
2c14a     73 74 72 69 
2c14e     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2c151     00          | 	byte	0
2c152                 | LR__4977
2c152     55 6E 6B 6E 
2c156     6F 77 6E 20 
2c15a     65 72 72 6F 
2c15e     72 20 77 68 
2c162     69 6C 65 20 
2c166     63 6F 6D 70 
2c16a     75 74 69 6E 
2c16e     67 20 61 20 
2c172     70 6F 77 65 
2c176     72 2E       | 	byte	"Unknown error while computing a power."
2c178     00          | 	byte	0
2c179                 | LR__4978
2c179     52 69 67 68 
2c17d     74 20 70 61 
2c181     72 65 6E 74 
2c185     68 65 73 69 
2c189     73 20 65 78 
2c18d     70 65 63 74 
2c191     65 64 2E    | 	byte	"Right parenthesis expected."
2c194     00          | 	byte	0
2c195                 | LR__4979
2c195     45 78 70 65 
2c199     63 74 65 64 
2c19d     20 73 74 72 
2c1a1     69 6E 67 2E | 	byte	"Expected string."
2c1a5     00          | 	byte	0
2c1a6                 | LR__4980
2c1a6     45 78 70 65 
2c1aa     63 74 65 64 
2c1ae     20 66 6C 6F 
2c1b2     61 74 2E    | 	byte	"Expected float."
2c1b5     00          | 	byte	0
2c1b6                 | LR__4981
2c1b6     45 78 70 65 
2c1ba     63 74 65 64 
2c1be     20 75 6E 73 
2c1c2     69 67 6E 65 
2c1c6     64 20 69 6E 
2c1ca     74 65 67 65 
2c1ce     72 2E       | 	byte	"Expected unsigned integer."
2c1d0     00          | 	byte	0
2c1d1                 | LR__4982
2c1d1     45 78 70 65 
2c1d5     63 74 65 64 
2c1d9     20 69 6E 74 
2c1dd     65 67 65 72 
2c1e1     2E          | 	byte	"Expected integer."
2c1e2     00          | 	byte	0
2c1e3                 | LR__4983
2c1e3     4E 6F 20 6D 
2c1e7     6F 72 65 20 
2c1eb     76 61 72 69 
2c1ef     61 62 6C 65 
2c1f3     20 73 6C 6F 
2c1f7     74 73 2E    | 	byte	"No more variable slots."
2c1fa     00          | 	byte	0
2c1fb                 | LR__4984
2c1fb     56 61 72 69 
2c1ff     61 62 6C 65 
2c203     20 6E 6F 74 
2c207     20 66 6F 75 
2c20b     6E 64 2E    | 	byte	"Variable not found."
2c20e     00          | 	byte	0
2c20f                 | LR__4985
2c20f     43 6F 6D 6D 
2c213     61 20 65 78 
2c217     70 65 63 74 
2c21b     65 64 2E    | 	byte	"Comma expected."
2c21e     00          | 	byte	0
2c21f                 | LR__4986
2c21f     43 6F 6D 6D 
2c223     61 20 6F 72 
2c227     20 73 65 6D 
2c22b     69 63 6F 6C 
2c22f     6F 6E 20 65 
2c233     78 70 65 63 
2c237     74 65 64 2E | 	byte	"Comma or semicolon expected."
2c23b     00          | 	byte	0
2c23c                 | LR__4987
2c23c     55 6E 6B 6E 
2c240     6F 77 6E 20 
2c244     63 6F 6D 6D 
2c248     61 6E 64 2E | 	byte	"Unknown command."
2c24c     00          | 	byte	0
2c24d                 | LR__4988
2c24d     53 74 61 63 
2c251     6B 20 75 6E 
2c255     64 65 72 66 
2c259     6C 6F 77 2E | 	byte	"Stack underflow."
2c25d     00          | 	byte	0
2c25e                 | LR__4989
2c25e     43 61 6E 6E 
2c262     6F 74 20 65 
2c266     78 65 63 75 
2c26a     74 65 20 67 
2c26e     6F 74 6F 20 
2c272     69 6E 20 74 
2c276     68 65 20 69 
2c27a     6D 6D 65 64 
2c27e     69 61 74 65 
2c282     20 6D 6F 64 
2c286     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2c288     00          | 	byte	0
2c289                 | LR__4990
2c289     43 61 6E 6E 
2c28d     6F 74 20 6C 
2c291     6F 61 64 20 
2c295     66 72 6F 6D 
2c299     20 74 68 69 
2c29d     73 20 66 69 
2c2a1     6C 65 2E    | 	byte	"Cannot load from this file."
2c2a4     00          | 	byte	0
2c2a5                 | LR__4991
2c2a5     54 68 65 20 
2c2a9     70 72 6F 67 
2c2ad     72 61 6D 20 
2c2b1     69 73 20 65 
2c2b5     6D 70 74 79 
2c2b9     2E          | 	byte	"The program is empty."
2c2ba     00          | 	byte	0
2c2bb                 | LR__4992
2c2bb     49 66 20 61 
2c2bf     66 74 65 72 
2c2c3     20 69 66 2E | 	byte	"If after if."
2c2c7     00          | 	byte	0
2c2c8                 | LR__4993
2c2c8     45 6D 70 74 
2c2cc     79 20 65 78 
2c2d0     70 72 65 73 
2c2d4     73 69 6F 6E 
2c2d8     2E          | 	byte	"Empty expression."
2c2d9     00          | 	byte	0
2c2da                 | LR__4994
2c2da     53 74 72 69 
2c2de     6E 67 20 65 
2c2e2     78 70 65 63 
2c2e6     74 65 64 2E | 	byte	"String expected."
2c2ea     00          | 	byte	0
2c2eb                 | LR__4995
2c2eb     49 6E 74 65 
2c2ef     72 70 72 65 
2c2f3     74 65 72 20 
2c2f7     69 6E 74 65 
2c2fb     72 6E 61 6C 
2c2ff     20 65 72 72 
2c303     6F 72 2E    | 	byte	"Interpreter internal error."
2c306     00          | 	byte	0
2c307                 | LR__4996
2c307     45 78 70 65 
2c30b     63 74 65 64 
2c30f     20 61 73 73 
2c313     69 67 6E 2E | 	byte	"Expected assign."
2c317     00          | 	byte	0
2c318                 | LR__4997
2c318     45 78 70 65 
2c31c     63 74 65 64 
2c320     20 27 74 6F 
2c324     27 2E       | 	byte	"Expected 'to'."
2c326     00          | 	byte	0
2c327                 | LR__4998
2c327     45 78 70 65 
2c32b     63 74 65 64 
2c32f     20 69 6E 74 
2c333     65 67 65 72 
2c337     20 76 61 72 
2c33b     69 61 62 6C 
2c33f     65 2E       | 	byte	"Expected integer variable."
2c341     00          | 	byte	0
2c342                 | LR__4999
2c342     55 6E 69 6E 
2c346     69 74 69 61 
2c34a     6C 69 7A 65 
2c34e     64 20 76 61 
2c352     72 69 61 62 
2c356     6C 65 20 69 
2c35a     6E 20 27 6E 
2c35e     65 78 74 27 
2c362     2C 20 75 73 
2c366     65 20 27 66 
2c36a     6F 72 27 20 
2c36e     62 65 66 6F 
2c372     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2c375     00          | 	byte	0
2c376                 | LR__5000
2c376     4E 6F 20 6D 
2c37a     6F 72 65 20 
2c37e     73 6C 6F 74 
2c382     73 20 66 6F 
2c386     72 20 27 66 
2c38a     6F 72 27 2E | 	byte	"No more slots for 'for'."
2c38e     00          | 	byte	0
2c38f                 | LR__5001
2c38f     27 4E 65 78 
2c393     74 27 20 64 
2c397     6F 65 73 6E 
2c39b     27 74 20 6D 
2c39f     61 74 63 68 
2c3a3     20 27 66 6F 
2c3a7     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2c3aa     00          | 	byte	0
2c3ab                 | LR__5002
2c3ab     27 47 6F 74 
2c3af     6F 27 20 74 
2c3b3     61 72 67 65 
2c3b7     74 20 6C 69 
2c3bb     6E 65 20 6E 
2c3bf     6F 74 20 66 
2c3c3     6F 75 6E 64 
2c3c7     2E          | 	byte	"'Goto' target line not found."
2c3c8     00          | 	byte	0
2c3c9                 | LR__5003
2c3c9     42 61 64 20 
2c3cd     6E 75 6D 62 
2c3d1     65 72 20 6F 
2c3d5     66 20 70 61 
2c3d9     72 61 6D 65 
2c3dd     74 65 72 73 | 	byte	"Bad number of parameters"
2c3e1     00          | 	byte	0
2c3e2                 | LR__5004
2c3e2     46 75 6E 63 
2c3e6     74 69 6F 6E 
2c3ea     20 75 6E 64 
2c3ee     65 66 69 6E 
2c3f2     65 64 20 66 
2c3f6     6F 72 20 73 
2c3fa     74 72 69 6E 
2c3fe     67 73       | 	byte	"Function undefined for strings"
2c400     00          | 	byte	0
2c401                 | LR__5005
2c401     42 61 64 20 
2c405     70 61 72 61 
2c409     6D 65 74 65 
2c40d     72 2E       | 	byte	"Bad parameter."
2c40f     00          | 	byte	0
2c410                 | LR__5006
2c410     43 61 6E 6E 
2c414     6F 74 20 64 
2c418     65 63 6C 61 
2c41c     72 65 20 61 
2c420     6E 20 61 72 
2c424     72 61 79 3A 
2c428     20 74 68 65 
2c42c     20 76 61 72 
2c430     69 61 62 6C 
2c434     65 20 65 78 
2c438     69 73 74 73 
2c43c     2E          | 	byte	"Cannot declare an array: the variable exists."
2c43d     00          | 	byte	0
2c43e                 | LR__5007
2c43e     45 78 70 65 
2c442     63 74 65 64 
2c446     20 27 28 27 
2c44a     2E          | 	byte	"Expected '('."
2c44b     00          | 	byte	0
2c44c                 | LR__5008
2c44c     45 78 70 65 
2c450     63 74 65 64 
2c454     20 27 29 27 
2c458     20 6F 72 20 
2c45c     27 2C 27 2E | 	byte	"Expected ')' or ','."
2c460     00          | 	byte	0
2c461                 | LR__5009
2c461     4E 6F 20 6D 
2c465     6F 72 65 20 
2c469     74 68 61 6E 
2c46d     20 33 20 64 
2c471     69 6D 65 6E 
2c475     73 69 6F 6E 
2c479     73 20 73 75 
2c47d     70 70 6F 72 
2c481     74 65 64    | 	byte	"No more than 3 dimensions supported"
2c484     00          | 	byte	0
2c485                 | LR__5010
2c485     56 61 72 69 
2c489     61 62 6C 65 
2c48d     20 6E 61 6D 
2c491     65 20 65 78 
2c495     70 65 63 74 
2c499     65 64       | 	byte	"Variable name expected"
2c49b     00          | 	byte	0
2c49c                 | LR__5011
2c49c     54 79 70 65 
2c4a0     20 6E 61 6D 
2c4a4     65 20 65 78 
2c4a8     70 65 63 74 
2c4ac     65 64       | 	byte	"Type name expected"
2c4ae     00          | 	byte	0
2c4af                 | LR__5012
2c4af     54 79 70 65 
2c4b3     20 6E 6F 74 
2c4b7     20 73 75 70 
2c4bb     70 6F 72 74 
2c4bf     65 64 20 79 
2c4c3     65 74       | 	byte	"Type not supported yet"
2c4c5     00          | 	byte	0
2c4c6                 | LR__5013
2c4c6     41 72 72 61 
2c4ca     79 20 69 6E 
2c4ce     64 65 78 20 
2c4d2     6F 75 74 20 
2c4d6     6F 66 20 72 
2c4da     61 6E 67 65 | 	byte	"Array index out of range"
2c4de     00          | 	byte	0
2c4df                 | LR__5014
2c4df     45 72 72 6F 
2c4e3     72 20       | 	byte	"Error "
2c4e5     00          | 	byte	0
2c4e6                 | LR__5015
2c4e6     3A 20       | 	byte	": "
2c4e8     00          | 	byte	0
2c4e9                 | LR__5016
2c4e9     2F 73 64    | 	byte	"/sd"
2c4ec     00          | 	byte	0
2c4ed                 | LR__5017
2c4ed     2F 73 64 2F 
2c4f1     62 61 73    | 	byte	"/sd/bas"
2c4f4     00          | 	byte	0
2c4f5                 | LR__5018
2c4f5     2F 73 64 2F 
2c4f9     62 61 73    | 	byte	"/sd/bas"
2c4fc     00          | 	byte	0
2c4fd                 | LR__5019
2c4fd     20 42 41 53 
2c501     49 43 20 62 
2c505     79 74 65 73 
2c509     20 66 72 65 
2c50d     65          | 	byte	" BASIC bytes free"
2c50e     00          | 	byte	0
2c50f                 | LR__5020
2c50f     52 65 61 64 
2c513     79          | 	byte	"Ready"
2c514     00          | 	byte	0
2c515                 | LR__5021
2c515     20          | 	byte	" "
2c516     00          | 	byte	0
2c517                 | LR__5022
2c517     20          | 	byte	" "
2c518     00          | 	byte	0
2c519                 | LR__5023
2c519                 | 	byte	
2c519     00          | 	byte	0
2c51a                 | LR__5024
2c51a                 | 	byte	
2c51a     00          | 	byte	0
2c51b     00          | 	alignl
2c51c                 | _dat_
2c51c     00 00 00 00 
2c520     00 00 00 00 
2c524     00 00 00 00 
2c528     00 00 00 00 | 	byte	$00[16]
2c52c     61 41 17 0E 
2c530     62 42 00 00 
2c534     63 43 19 10 
2c538     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2c53c     65 45 18 0F 
2c540     66 46 00 00 
2c544     67 47 00 00 
2c548     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2c54c     69 49 00 00 
2c550     6A 4A 00 00 
2c554     6B 4B 00 00 
2c558     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2c55c     6D 4D 00 00 
2c560     6E 4E 1A 11 
2c564     6F 4F 1E 15 
2c568     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2c56c     71 51 00 00 
2c570     72 52 00 00 
2c574     73 53 1B 12 
2c578     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2c57c     75 55 00 00 
2c580     76 56 00 00 
2c584     77 57 00 00 
2c588     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2c58c     79 59 00 00 
2c590     7A 5A 1D 14 
2c594     31 21 04 00 
2c598     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2c59c     33 23 06 00 
2c5a0     34 24 07 00 
2c5a4     35 25 08 00 
2c5a8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2c5ac     37 26 0A 00 
2c5b0     38 2A 0B 00 
2c5b4     39 28 0C 00 
2c5b8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2c5bc     8D 8D 00 00 
2c5c0     9B 9B 00 00 
2c5c4     88 88 00 00 
2c5c8     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2c5cc     20 20 00 00 
2c5d0     2D 5F 00 00 
2c5d4     3D 2B 00 00 
2c5d8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2c5dc     5D 7D 00 00 
2c5e0     5C 7C 00 00 
2c5e4     23 7E 00 00 
2c5e8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2c5ec     27 22 00 00 
2c5f0     60 7E 03 00 
2c5f4     2C 3C 00 00 
2c5f8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2c5fc     2F 3F 00 00 
2c600     B9 B9 00 00 
2c604     BA 00 00 00 
2c608     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2c60c     BC 00 00 00 
2c610     BD 00 00 00 
2c614     BE 00 00 00 
2c618     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2c61c     C0 00 00 00 
2c620     C1 00 00 00 
2c624     C2 00 00 00 
2c628     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2c62c     C4 00 00 00 
2c630     C5 00 00 00 
2c634     C6 00 00 00 
2c638     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2c63c     C8 00 00 00 
2c640     C9 00 00 00 
2c644     CA 00 00 00 
2c648     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2c64c     7F 7F 00 00 
2c650     CC 00 00 00 
2c654     CD 00 00 00 
2c658     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2c65c     CF 00 00 00 
2c660     D0 00 00 00 
2c664     D1 00 00 00 
2c668     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2c66c     2F 2F 00 00 
2c670     2A 2A 00 00 
2c674     2D 2D 00 00 
2c678     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2c67c     8D 8D 00 00 
2c680     31 31 00 00 
2c684     32 32 00 00 
2c688     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2c68c     34 34 00 00 
2c690     35 35 00 00 
2c694     36 36 00 00 
2c698     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2c69c     38 38 00 00 
2c6a0     39 39 00 00 
2c6a4     30 30 00 00 
2c6a8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2c6ac     5C 7C 00 00 
2c6b0     00 00 00 00 
2c6b4     00 00 00 00 
2c6b8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2c6bc     00 00 00 00 
      ...             
2c714     00 00 00 00 
2c718     00 00 00 00 | 	byte	$00[96]
2c71c     2B 00 A6 F2 
2c720     24 A7 09 80 
2c724     5B 88 4D 89 
2c728     80 88 A5 88 | atari_spl file "atari.spl"
2c72c     6D 88 B8 88 
2c730     80 88 CB 88 
2c734     92 88 A5 88 
2c738     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2c73c     A5 88 CA 88 
2c740     A6 88 DD 88 
2c744     B8 88 AB 89 
2c748     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2c74c     C8 AD C6 F1 
2c750     91 06 B6 FF 
2c754     13 00 4A 00 
2c758     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2c75c     5D 00 5E 00 
2c760     5D 00 5E 00 
2c764     5E 00 5D 00 
2c768     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2c76c     38 00 83 00 
2c770     25 00 83 00 
2c774     C3 FE D1 04 
2c778     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2c77c     48 88 38 85 
2c780     41 8A CB 88 
2c784     28 89 B8 88 
2c788     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2c78c     15 89 03 89 
2c790     02 89 15 89 
2c794     16 89 15 89 
2c798     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2c79c     15 89 3A 89 
2c7a0     72 89 E3 89 
2c7a4     52 83 AD 97 
2c7a8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2c7ac     0C 02 B6 FF 
2c7b0     E1 00 A8 00 
2c7b4     F3 00 A8 00 
2c7b8     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2c7bc     CE 00 CD 00 
2c7c0     CD 00 BA 00 
2c7c4     E1 00 BB 00 
2c7c8     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2c7cc     DF 00 C9 FF 
2c7d0     E6 01 B6 06 
2c7d4     EE DD 8D 98 
2c7d8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2c7dc     97 89 73 89 
2c7e0     3B 89 60 89 
2c7e4     60 89 60 89 
2c7e8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2c7ec     73 89 72 89 
2c7f0     85 89 73 89 
2c7f4     AA 89 60 89 
2c7f8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2c7fc     E8 8A 18 86 
2c800     92 88 A5 C2 
2c804     E0 00 C3 05 
2c808     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2c80c     F2 00 64 01 
2c810     06 01 3E 01 
2c814     2B 01 2B 01 
2c818     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2c81c     2B 01 2A 01 
2c820     2B 01 2B 01 
2c824     2B 01 18 01 
2c828     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2c82c     39 07 61 F3 
2c830     C0 AF 37 85 
2c834     0F 88 8B 8A 
2c838     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2c83c     AB 89 D0 89 
2c840     AB 89 D0 89 
2c844     D0 89 CF 89 
2c848     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2c84c     D0 89 F5 89 
2c850     BD 89 08 8A 
2c854     CF 89 E8 8A 
2c858     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2c85c     53 B3 0D F8 
2c860     F4 07 38 00 
2c864     63 01 63 01 
2c868     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2c86c     88 01 88 01 
2c870     76 01 88 01 
2c874     88 01 89 01 
2c878     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2c87c     75 01 AE 01 
2c880     76 01 88 01 
2c884     4A 00 46 06 
2c888     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2c88c     08 8A 9A 86 
2c890     33 8B 08 8A 
2c894     2D 8A F5 89 
2c898     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2c89c     2D 8A 2D 8A 
2c8a0     2E 8A 1B 8A 
2c8a4     40 8A 2D 8A 
2c8a8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2c8ac     2E 8A 79 8A 
2c8b0     66 8A C8 8B 
2c8b4     72 82 2B 97 
2c8b8     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2c8bc     1D 02 05 01 
2c8c0     F8 01 C0 01 
2c8c4     0B 02 C0 01 
2c8c8     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2c8cc     F9 01 D3 01 
2c8d0     F8 01 D3 01 
2c8d4     F8 01 D2 01 
2c8d8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2c8dc     E6 01 2B 01 
2c8e0     8E 02 5F 07 
2c8e4     F7 E2 ED 9C 
2c8e8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2c8ec     E8 8A 78 8A 
2c8f0     78 8A 65 8A 
2c8f4     8B 8A 78 8A 
2c8f8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2c8fc     8B 8A 9D 8A 
2c900     9D 8A 8B 8A 
2c904     C2 8A 78 8A 
2c908     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2c90c     70 8C 18 86 
2c910     8B 8A 23 C9 
2c914     CB 03 C4 05 
2c918     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2c91c     0B 02 7B 02 
2c920     1E 02 55 02 
2c924     30 02 43 02 
2c928     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2c92c     43 02 44 02 
2c930     43 02 30 02 
2c934     68 02 31 02 
2c938     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2c93c     07 08 3F F7 
2c940     73 B2 13 85 
2c944     15 89 ED 8B 
2c948     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2c94c     B0 8A FB 8A 
2c950     D5 8A FA 8A 
2c954     E8 8A FB 8A 
2c958     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2c95c     E8 8A 21 8B 
2c960     E7 8A 33 8B 
2c964     E8 8A 26 8C 
2c968     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2c96c     8D B0 27 F6 
2c970     9C 08 AD 01 
2c974     7B 02 8D 02 
2c978     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2c97c     A1 02 A0 02 
2c980     A1 02 A0 02 
2c984     A0 02 A0 02 
2c988     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2c98c     7B 02 D8 02 
2c990     7B 02 C6 02 
2c994     3E 01 C3 05 
2c998     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2c99c     00 8C 2A 86 
2c9a0     E0 8C FA 8A 
2c9a4     6A 8B FB 8A 
2c9a8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2c9ac     45 8B 45 8B 
2c9b0     45 8B 6B 8B 
2c9b4     46 8B 59 8B 
2c9b8     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2c9bc     6B 8B 6B 8B 
2c9c0     6B 8B 6B 8B 
2c9c4     7D 8B 7D 8B 
2c9c8     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2c9cc     90 8B 91 8B 
2c9d0     90 8B 90 8B 
2c9d4     A3 8B A3 8B 
2c9d8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2c9dc     B5 8B B6 8B 
2c9e0     B5 8B B5 8B 
2c9e4     B6 8B C8 8B 
2c9e8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2c9ec     C8 8B DA 8B 
2c9f0     DB 8B DB 8B 
2c9f4     DB 8B DC 8B 
2c9f8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2c9fc     EE 8B EE 8B 
2ca00     00 8C 01 8C 
2ca04     00 8C 01 8C 
2ca08     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2ca0c     12 8C 13 8C 
2ca10     13 8C 26 8C 
2ca14     26 8C 26 8C 
2ca18     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2ca1c     38 8C 38 8C 
2ca20     38 8C 38 8C 
2ca24     4B 8C 4B 8C 
2ca28     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2ca2c     5E 8C 5E 8C 
2ca30     5E 8C 5E 8C 
2ca34     70 8C 70 8C 
2ca38     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2ca3c     70 8C 83 8C 
2ca40     83 8C 83 8C 
2ca44     83 8C 96 8C 
2ca48     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2ca4c     95 8C A9 8C 
2ca50     A9 8C A8 8C 
2ca54     A8 8C A8 8C 
2ca58     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2ca5c     BB 8C BB 8C 
2ca60     BB 8C CE 8C 
2ca64     CE 8C CE 8C 
2ca68     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2ca6c     E0 8C E1 8C 
2ca70     E1 8C E0 8C 
2ca74     F4 8C F2 8C 
2ca78     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2ca7c     05 8D 05 8D 
2ca80     06 8D 06 8D 
2ca84     19 8D 19 8D 
2ca88     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2ca8c     18 8D 2B 8D 
2ca90     2B 8D 2B 8D 
2ca94     2A 8D 3E 8D 
2ca98     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2ca9c     3E 8D 51 8D 
2caa0     50 8D 50 8D 
2caa4     50 8D 51 8D 
2caa8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2caac     63 8D 64 8D 
2cab0     76 8D 75 8D 
2cab4     75 8D 76 8D 
2cab8     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2cabc     88 8D 88 8D 
2cac0     89 8D 9B 8D 
2cac4     9A 8D 9B 8D 
2cac8     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2cacc     AD 8D AE 8D 
2cad0     AD 8D AE 8D 
2cad4     C1 8D C1 8D 
2cad8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2cadc     D3 8D D3 8D 
2cae0     D3 8D D3 8D 
2cae4     D3 8D E6 8D 
2cae8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2caec     E6 8D E6 8D 
2caf0     F9 8D F9 8D 
2caf4     F9 8D F8 8D 
2caf8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2cafc     0B 8E 0B 8E 
2cb00     1D 8E 1D 8E 
2cb04     1E 8E 1E 8E 
2cb08     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2cb0c     31 8E 31 8E 
2cb10     31 8E 42 8E 
2cb14     43 8E 43 8E 
2cb18     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2cb1c     56 8E 56 8E 
2cb20     55 8E 56 8E 
2cb24     68 8E 69 8E 
2cb28     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2cb2c     69 8E 7B 8E 
2cb30     7C 8E 7B 8E 
2cb34     7B 8E 8D 8E 
2cb38     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2cb3c     8D 8E A1 8E 
2cb40     A0 8E A1 8E 
2cb44     A1 8E A0 8E 
2cb48     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2cb4c     B3 8E B3 8E 
2cb50     C6 8E C5 8E 
2cb54     C6 8E C6 8E 
2cb58     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2cb5c     D8 8E D9 8E 
2cb60     D8 8E EC 8E 
2cb64     EB 8E EC 8E 
2cb68     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2cb6c     FE 8E FE 8E 
2cb70     FE 8E FE 8E 
2cb74     10 8F 10 8F 
2cb78     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2cb7c     11 8F 23 8F 
2cb80     24 8F 23 8F 
2cb84     24 8F 37 8F 
2cb88     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2cb8c     36 8F 36 8F 
2cb90     48 8F 49 8F 
2cb94     49 8F 49 8F 
2cb98     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2cb9c     5B 8F 5C 8F 
2cba0     5B 8F 6E 8F 
2cba4     6E 8F 6E 8F 
2cba8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2cbac     81 8F 81 8F 
2cbb0     81 8F 81 8F 
2cbb4     93 8F 93 8F 
2cbb8     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2cbbc     93 8F A6 8F 
2cbc0     A6 8F A6 8F 
2cbc4     A6 8F B9 8F 
2cbc8     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2cbcc     B9 8F B9 8F 
2cbd0     CC 8F CB 8F 
2cbd4     CB 8F CC 8F 
2cbd8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2cbdc     DF 8F DE 8F 
2cbe0     DE 8F F1 8F 
2cbe4     F1 8F F1 8F 
2cbe8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2cbec     03 90 04 90 
2cbf0     04 90 04 90 
2cbf4     16 90 17 90 
2cbf8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2cbfc     29 90 28 90 
2cc00     29 90 28 90 
2cc04     29 90 3C 90 
2cc08     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2cc0c     3C 90 4F 90 
2cc10     4E 90 4E 90 
2cc14     4E 90 4E 90 
2cc18     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2cc1c     61 90 61 90 
2cc20     73 90 74 90 
2cc24     74 90 74 90 
2cc28     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2cc2c     87 90 86 90 
2cc30     87 90 86 90 
2cc34     99 90 99 90 
2cc38     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2cc3c     AB 90 AB 90 
2cc40     AC 90 AB 90 
2cc44     AB 90 BF 90 
2cc48     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2cc4c     BE 90 D1 90 
2cc50     D0 90 D1 90 
2cc54     D1 90 D1 90 
2cc58     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2cc5c     E3 90 E4 90 
2cc60     F6 90 F6 90 
2cc64     F6 90 F6 90 
2cc68     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2cc6c     09 91 0A 91 
2cc70     0A 91 1C 91 
2cc74     1C 91 1C 91 
2cc78     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2cc7c     2F 91 2E 91 
2cc80     2F 91 2F 91 
2cc84     2E 91 41 91 
2cc88     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2cc8c     41 91 53 91 
2cc90     54 91 54 91 
2cc94     53 91 54 91 
2cc98     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2cc9c     67 91 67 91 
2cca0     79 91 7A 91 
2cca4     79 91 78 91 
2cca8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2ccac     8C 91 8B 91 
2ccb0     8C 91 8C 91 
2ccb4     9E 91 9E 91 
2ccb8     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2ccbc     B1 91 B1 91 
2ccc0     B2 91 B1 91 
2ccc4     B1 91 C4 91 
2ccc8     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2cccc     C4 91 D6 91 
2ccd0     D7 91 D7 91 
2ccd4     D7 91 D6 91 
2ccd8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2ccdc     EA 91 EA 91 
2cce0     EA 91 FC 91 
2cce4     FC 91 FB 91 
2cce8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2ccec     0E 92 0F 92 
2ccf0     0F 92 0E 92 
2ccf4     21 92 21 92 
2ccf8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2ccfc     21 92 34 92 
2cd00     33 92 34 92 
2cd04     34 92 47 92 
2cd08     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2cd0c     46 92 47 92 
2cd10     59 92 59 92 
2cd14     59 92 59 92 
2cd18     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2cd1c     6C 92 6C 92 
2cd20     6B 92 7E 92 
2cd24     7E 92 7E 92 
2cd28     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2cd2c     92 92 91 92 
2cd30     91 92 90 92 
2cd34     91 92 A4 92 
2cd38     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2cd3c     A3 92 B6 92 
2cd40     B6 92 B7 92 
2cd44     B7 92 B6 92 
2cd48     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2cd4c     CA 92 C9 92 
2cd50     CA 92 DC 92 
2cd54     DC 92 DC 92 
2cd58     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2cd5c     EF 92 EF 92 
2cd60     EF 92 EF 92 
2cd64     01 93 01 93 
2cd68     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2cd6c     15 93 14 93 
2cd70     14 93 14 93 
2cd74     14 93 27 93 
2cd78     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2cd7c     27 93 39 93 
2cd80     3A 93 39 93 
2cd84     39 93 39 93 
2cd88     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2cd8c     4B 93 4C 93 
2cd90     5F 93 5F 93 
2cd94     5F 93 5E 93 
2cd98     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2cd9c     5F 93 84 93 
2cda0     4C 93 96 93 
2cda4     5F 93 AE 94 
2cda8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2cdac     7B C1 00 00 
2cdb0     00 00 00 00 
2cdb4     00 00 00 00 
2cdb8     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cdbc     00 00 00 00 | 	byte	$00, $00, $00, $00
2cdc0     00 00 00 00 | zero long 0
2cdc4     7A D7 00 80 
2cdc8     87 8A 48 8F 
2cdcc     EC 8C 76 8D 
2cdd0     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2cdd4     3C 8D 82 8D 
2cdd8     42 8D 88 8D 
2cddc     8C 8D 8E 8D 
2cde0     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2cde4     97 8D DE 8D 
2cde8     E1 8D F1 8E 
2cdec     D8 8C A3 83 
2cdf0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2cdf4     65 71 C9 65 
2cdf8     FC 64 C4 65 
2cdfc     C1 65 BF 65 
2ce00     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2ce04     B6 65 B4 65 
2ce08     B2 65 AE 65 
2ce0c     AC 65 ED 65 
2ce10     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2ce14     5E 65 25 66 
2ce18     FA 62 23 6B 
2ce1c     B5 6C 61 0A 
2ce20     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2ce24     5D 90 BE 8D 
2ce28     47 8E C3 8D 
2ce2c     09 8E C9 8D 
2ce30     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2ce34     15 8E 19 8E 
2ce38     1B 8E 62 8E 
2ce3c     64 8E 68 8E 
2ce40     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2ce44     B5 8E 4C 90 
2ce48     FA 84 3C 9D 
2ce4c     98 13 79 6D 
2ce50     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2ce54     D9 66 50 66 
2ce58     D4 66 4B 66 
2ce5c     8C 66 46 66 
2ce60     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2ce64     81 66 3A 66 
2ce68     7C 66 36 66 
2ce6c     76 66 30 66 
2ce70     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2ce74     6B 66 88 72 
2ce78     BF 37 E7 B7 
2ce7c     75 83 8B 8E 
2ce80     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2ce84     94 8E 96 8E 
2ce88     DD 8E 9C 8E 
2ce8c     E2 8E A2 8E 
2ce90     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2ce94     EE 8E AE 8E 
2ce98     38 8F B5 8E 
2ce9c     3F 8F FD 8E 
2cea0     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2cea4     A5 87 1E E3 
2cea8     6D 5D FA 71 
2ceac     41 64 25 67 
2ceb0     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2ceb4     D9 66 1A 67 
2ceb8     18 67 15 67 
2cebc     12 67 0F 67 
2cec0     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2cec4     07 67 C0 66 
2cec8     01 67 BC 66 
2cecc     B8 66 DE 64 
2ced0     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2ced4     43 E5 1F 8B 
2ced8     14 8A F1 90 
2cedc     1C 8F 63 8F 
2cee0     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2cee4     29 8F 6E 8F 
2cee8     72 8F 75 8F 
2ceec     34 8F BE 8F 
2cef0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2cef4     84 8F 87 8F 
2cef8     CC 8F 56 90 
2cefc     67 91 49 80 
2cf00     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2cf04     46 77 A6 66 
2cf08     E8 66 B0 67 
2cf0c     AD 67 ED 67 
2cf10     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2cf14     A2 67 E3 67 
2cf18     9D 67 9A 67 
2cf1c     98 67 94 67 
2cf20     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2cf24     49 67 CD 67 
2cf28     28 65 5F 6E 
2cf2c     82 67 3A 01 
2cf30     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2cf34     C2 91 A9 8F 
2cf38     EF 8F AE 8F 
2cf3c     F4 8F B5 8F 
2cf40     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2cf44     01 90 03 90 
2cf48     07 90 09 90 
2cf4c     0C 90 53 90 
2cf50     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2cf54     18 90 44 93 
2cf58     85 84 D6 9D 
2cf5c     87 1F 2F 75 
2cf60     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2cf64     C4 68 F6 67 
2cf68     BE 68 F1 67 
2cf6c     76 68 2E 68 
2cf70     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2cf74     27 68 24 68 
2cf78     64 68 1E 68 
2cf7c     5F 68 19 68 
2cf80     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2cf84     DC 68 56 72 
2cf88     7E 36 C2 B8 
2cf8c     D7 84 73 90 
2cf90     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2cf94     7B 90 7F 90 
2cf98     82 90 84 90 
2cf9c     CB 90 8B 90 
2cfa0     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2cfa4     D7 90 96 90 
2cfa8     20 91 59 90 
2cfac     25 91 A2 90 
2cfb0     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2cfb4     D0 89 40 EE 
2cfb8     12 64 C4 71 
2cfbc     29 66 0C 69 
2cfc0     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2cfc4     C0 68 02 69 
2cfc8     FE 68 FB 68 
2cfcc     F9 68 F6 68 
2cfd0     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2cfd4     EE 68 A8 68 
2cfd8     2C 69 5F 68 
2cfdc     E2 68 81 66 
2cfe0     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2cfe4     1E EB A6 8A 
2cfe8     73 8B 5E 93 
2cfec     7B 90 48 91 
2cff0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2cff4     0D 91 11 91 
2cff8     14 91 16 91 
2cffc     5C 91 1C 91 
2d000     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2d004     68 91 AF 91 
2d008     2A 91 B5 91 
2d00c     75 91 1A 94 
2d010     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2d014     70 0E CB 6C 
2d018     5D 6E C4 67 
2d01c     99 69 54 69 
2d020     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2d024     D2 69 49 69 
2d028     89 69 86 69 
2d02c     40 69 C4 69 
2d030     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2d034     35 69 76 69 
2d038     58 67 EB 6D 
2d03c     E9 6D 89 0F 
2d040     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2d044     33 94 94 91 
2d048     D9 91 56 91 
2d04c     E0 91 9F 91 
2d050     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2d054     EC 91 EE 91 
2d058     F1 91 F4 91 
2d05c     F7 91 3D 92 
2d060     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2d064     46 92 21 94 
2d068     11 89 A4 9D 
2d06c     FD 0E 8F 6C 
2d070     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2d074     28 6A E1 69 
2d078     65 6A 1F 6A 
2d07c     5F 6A 1A 6A 
2d080     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2d084     54 6A 0F 6A 
2d088     4F 6A 09 6A 
2d08c     06 6A 03 6A 
2d090     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2d094     23 68 69 77 
2d098     3A 4D 38 CA 
2d09c     38 86 4E 91 
2d0a0     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2d0a4     64 92 24 92 
2d0a8     6A 92 2A 92 
2d0ac     70 92 30 92 
2d0b0     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2d0b4     7B 92 7E 92 
2d0b8     C5 92 84 92 
2d0bc     CB 92 8A 92 
2d0c0     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2d0c4     4D 8D F9 E2 
2d0c8     97 59 FE 74 
2d0cc     DB 68 6D 6A 
2d0d0     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2d0d4     A8 6A A5 6A 
2d0d8     A3 6A 9F 6A 
2d0dc     9D 6A 9B 6A 
2d0e0     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2d0e4     D6 6A 8F 6A 
2d0e8     CF 6A 46 6A 
2d0ec     CA 6A E1 67 
2d0f0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2d0f4     D3 F7 15 92 
2d0f8     90 8C BF 94 
2d0fc     A6 92 EB 92 
2d100     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2d104     B1 92 F7 92 
2d108     FA 92 FD 92 
2d10c     00 93 02 93 
2d110     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2d114     4F 93 52 93 
2d118     54 93 22 94 
2d11c     5A 93 8F 88 
2d120     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2d124     1C 77 07 6C 
2d128     E8 69 7A 6B 
2d12c     34 6B 75 6B 
2d130     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2d134     29 6B 26 6B 
2d138     24 6B 21 6B 
2d13c     1D 6B 5E 6B 
2d140     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2d144     12 6B 52 6B 
2d148     34 69 34 6E 
2d14c     BA 73 A4 24 
2d150     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2d154     7A 94 B3 93 
2d158     72 93 31 93 
2d15c     78 93 7A 93 
2d160     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2d164     83 93 86 93 
2d168     89 93 D0 93 
2d16c     D2 93 D5 93 
2d170     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2d174     DD 93 40 96 
2d178     30 8B 99 9C 
2d17c     52 10 94 71 
2d180     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2d184     46 6C 79 6B 
2d188     40 6C B7 6B 
2d18c     F7 6B B1 6B 
2d190     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2d194     EC 6B A5 6B 
2d198     A2 6B 9F 6B 
2d19c     9D 6B 9A 6B 
2d1a0     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2d1a4     C8 6A E4 76 
2d1a8     20 4B F9 CE 
2d1ac     2E 8A 1A 92 
2d1b0     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2d1b4     FB 93 BA 93 
2d1b8     01 94 03 94 
2d1bc     4A 94 09 94 
2d1c0     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2d1c4     55 94 14 94 
2d1c8     9E 94 1A 94 
2d1cc     61 94 20 94 
2d1d0     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2d1d4     3E 87 E5 CD 
2d1d8     5F 50 6C 78 
2d1dc     B5 6A 04 6C 
2d1e0     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2d1e4     83 6C 7F 6C 
2d1e8     7C 6C 36 6C 
2d1ec     76 6C 74 6C 
2d1f0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2d1f4     6B 6C 25 6C 
2d1f8     66 6C 1F 6C 
2d1fc     1D 6C 41 6A 
2d200     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2d204     BA FA FC 94 
2d208     5B 8D 97 96 
2d20c     3B 94 C5 94 
2d210     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2d214     89 94 8C 94 
2d218     8F 94 92 94 
2d21c     94 94 DB 94 
2d220     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2d224     E4 94 E7 94 
2d228     2D 95 74 95 
2d22c     C8 96 15 89 
2d230     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2d234     CB 75 31 6F 
2d238     7E 6B 10 6D 
2d23c     C9 6C 0A 6D 
2d240     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2d244     BD 6C FF 6C 
2d248     FB 6C F9 6C 
2d24c     B2 6C F3 6C 
2d250     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2d254     A7 6C E8 6C 
2d258     0D 6B 85 6F 
2d25c     C7 74 10 28 
2d260     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2d264     96 96 47 95 
2d268     06 95 0A 95 
2d26c     0C 95 0F 95 
2d270     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2d274     17 95 5E 95 
2d278     61 95 63 95 
2d27c     22 95 AC 95 
2d280     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2d284     72 95 17 98 
2d288     59 8E 01 96 
2d28c     CF FC 5A 68 
2d290     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2d294     96 6D 50 6D 
2d298     D5 6D 4A 6D 
2d29c     8C 6D 89 6D 
2d2a0     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2d2a4     80 6D 3A 6D 
2d2a8     7A 6D 77 6D 
2d2ac     75 6D 71 6D 
2d2b0     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2d2b4     18 6C BC 78 
2d2b8     9A 4F 7E CF 
2d2bc     1F 89 F1 93 
2d2c0     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2d2c4     D2 95 4E 95 
2d2c8     D7 95 53 95 
2d2cc     DD 95 E0 95 
2d2d0     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2d2d4     A5 95 EB 95 
2d2d8     EE 95 F0 95 
2d2dc     37 96 B3 95 
2d2e0     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2d2e4     1A 98 D5 8D 
2d2e8     C5 9F CD 0F 
2d2ec     0F 71 F3 73 
2d2f0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2d2f4     D9 6D 5E 6E 
2d2f8     D3 6D 58 6E 
2d2fc     12 6E 0F 6E 
2d300     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2d304     49 6E BF 6D 
2d308     87 6E 76 6D 
2d30c     81 6E 11 6B 
2d310     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2d314     3F 09 44 95 
2d318     E5 8D 3F 99 
2d31c     D4 95 A2 96 
2d320     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2d324     23 96 69 96 
2d328     6B 96 6E 96 
2d32c     71 96 74 96 
2d330     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2d334     BF 96 3C 96 
2d338     C6 96 C8 96 
2d33c     A3 98 51 8D 
2d340     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2d344     CF 75 29 73 
2d348     90 6C EC 6E 
2d34c     62 6E E7 6E 
2d350     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2d354     9A 6E 98 6E 
2d358     95 6E 91 6E 
2d35c     8E 6E CF 6E 
2d360     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2d364     40 6E C3 6E 
2d368     E8 6C 45 6F 
2d36c     A5 7B C9 35 
2d370     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2d374     2D 98 23 97 
2d378     E1 96 A0 96 
2d37c     A4 96 EA 96 
2d380     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2d384     AF 96 F4 96 
2d388     F8 96 3E 97 
2d38c     FD 96 43 97 
2d390     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2d394     08 97 6B 99 
2d398     D6 92 88 91 
2d39c     D8 EE 84 66 
2d3a0     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2d3a4     2E 6F E7 6E 
2d3a8     6C 6F 24 6F 
2d3ac     21 6F 1F 6F 
2d3b0     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2d3b4     17 6F 13 6F 
2d3b8     54 6F 0E 6F 
2d3bc     0B 6F 4B 6F 
2d3c0     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2d3c4     27 6D 1C 7B 
2d3c8     19 59 9F DB 
2d3cc     66 8E BC 94 
2d3d0     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2d3d4     67 97 26 97 
2d3d8     6D 97 2B 97 
2d3dc     72 97 32 97 
2d3e0     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2d3e4     C1 97 7F 97 
2d3e8     C6 97 85 97 
2d3ec     CB 97 CE 97 
2d3f0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2d3f4     EC 8A C4 C6 
2d3f8     68 4C F4 7D 
2d3fc     63 6E E8 6E 
2d400     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2d404     ED 6F A7 6F 
2d408     E7 6F A0 6F 
2d40c     E1 6F 9B 6F 
2d410     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2d414     D5 6F 8F 6F 
2d418     CE 6F 45 6F 
2d41c     86 6F 68 6D 
2d420     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2d424     C0 13 AD A2 
2d428     A7 8E 79 99 
2d42c     E6 97 E8 97 
2d430     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2d434     F1 97 F3 97 
2d438     F6 97 F9 97 
2d43c     FB 97 FE 97 
2d440     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2d444     4A 98 0A 98 
2d448     93 98 0F 98 
2d44c     7F 9B BF 8C 
2d450     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2d454     91 7B 62 73 
2d458     1A 6E B9 70 
2d45c     EB 6F B3 70 
2d460     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2d464     25 70 20 70 
2d468     1E 70 1B 70 
2d46c     18 70 15 70 
2d470     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2d474     0D 70 09 70 
2d478     07 70 03 70 
2d47c     01 70 FD 6F 
2d480     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2d484     F6 6F F2 6F 
2d488     EF 6F EC 6F 
2d48c     2C 70 E6 6F 
2d490     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2d494     DD 6F 97 6F 
2d498     D7 6F 84 6E 
2d49c     8F 6F 3F 7D 
2d4a0     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2d4a2     00 00 00 00 | zero1 long 0
2d4a6     FF FF FF FF 
2d4aa     FF FF       | atarist_spl file "atarist.spl" '512
2d4ac     00 00 00 00 
2d4b0     00 00 00 00 
2d4b4     00 00       | 	byte	$00[10]
2d4b6     17 7F F2 7F 
2d4ba     B2 7F 72 7F 
2d4be     33 7F F4 7E 
2d4c2     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2d4c6     36 7E F5 7D 
2d4ca     E9 51 F2 0D 
2d4ce     8E 00 F3 FD 
2d4d2     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2d4d6     57 FD 58 FD 
2d4da     5B FD 5C FD 
2d4de     5C FD 60 7D 
2d4e2     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2d4e6     D6 7C 98 7C 
2d4ea     59 7C 1A 7C 
2d4ee     DC 7B 9E 7B 
2d4f2     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2d4f6     F3 05 00 FD 
2d4fa     41 FB EA FA 
2d4fe     D9 FA DB FA 
2d502     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2d506     E4 FA 9B 36 
2d50a     F8 7A C0 7A 
2d50e     84 7A 45 7A 
2d512     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2d516     8E 79 51 79 
2d51a     15 79 D7 78 
2d51e     3C 1F EB FF 
2d522     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2d526     6D F8 65 F8 
2d52a     68 F8 6D F8 
2d52e     70 F8 74 F8 
2d532     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2d536     AB 60 79 60 
2d53a     4B 60 1A 60 
2d53e     E9 5F B9 5F 
2d542     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2d546     FB 59 B2 0B 
2d54a     92 FA 3A F7 
2d54e     96 F6 79 F6 
2d552     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2d556     82 F6 86 F6 
2d55a     8C F6 DB 5D 
2d55e     F1 5E C1 5E 
2d562     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2d566     34 5E 04 5E 
2d56a     D6 5D A6 5D 
2d56e     78 5D D4 3E 
2d572     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2d576     27 F5 BA F4 
2d57a     AB F4 AD F4 
2d57e     B2 F4 B8 F4 
2d582     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2d586     26 5D 2B 5D 
2d58a     FC 5C CD 5C 
2d58e     9F 5C 70 5C 
2d592     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2d596     E5 5B B8 5B 
2d59a     DB 24 A7 FC 
2d59e     D1 F4 4D F3 
2d5a2     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2d5a6     04 F3 0B F3 
2d5aa     11 F3 16 F3 
2d5ae     DE 18 98 5B 
2d5b2     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2d5b6     4E 4A 29 48 
2d5ba     A0 47 6A 47 
2d5be     43 47 20 47 
2d5c2     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2d5c6     E2 F6 98 F2 
2d5ca     C5 F1 A3 F1 
2d5ce     A3 F1 A8 F1 
2d5d2     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2d5d6     BF F1 00 3D 
2d5da     EF 46 CD 46 
2d5de     AA 46 86 46 
2d5e2     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2d5e6     1C 46 F9 45 
2d5ea     D7 45 EE 43 
2d5ee     DE 02 E8 F3 
2d5f2     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2d5f6     61 F0 65 F0 
2d5fa     6D F0 74 F0 
2d5fe     7C F0 84 F0 
2d602     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2d606     8E 45 6D 45 
2d60a     49 45 27 45 
2d60e     05 45 E1 44 
2d612     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2d616     F1 2F A9 FB 
2d61a     8B F1 9B EF 
2d61e     40 EF 36 EF 
2d622     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2d626     4D EF 56 EF 
2d62a     5E EF 7B 44 
2d62e     8C 44 69 44 
2d632     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2d636     03 44 E1 43 
2d63a     C0 43 F5 37 
2d63e     69 33 0F 11 
2d642     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2d646     66 EE 37 EE 
2d64a     38 EE 40 EE 
2d64e     48 EE 51 EE 
2d652     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2d656     7D 32 6A 32 
2d65a     51 32 37 32 
2d65e     1F 32 05 32 
2d662     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2d666     B9 31 A1 31 
2d66a     F1 04 F4 F1 
2d66e     50 EE A0 ED 
2d672     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2d676     93 ED 9A ED 
2d67a     A4 ED AD ED 
2d67e     F4 27 C1 31 
2d682     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2d686     78 31 5F 31 
2d68a     46 31 2E 31 
2d68e     15 31 FC 30 
2d692     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2d696     C4 EF 4A ED 
2d69a     DC EC CB EC 
2d69e     D2 EC DA EC 
2d6a2     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2d6a6     F9 EC 64 2F 
2d6aa     0A 31 F1 30 
2d6ae     D9 30 C0 30 
2d6b2     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2d6b6     78 30 5F 30 
2d6ba     46 30 38 23 
2d6be     A6 F6 19 EE 
2d6c2     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2d6c6     20 EC 28 EC 
2d6ca     32 EC 3C EC 
2d6ce     47 EC 51 EC 
2d6d2     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2d6d6     A3 22 93 22 
2d6da     7F 22 6E 22 
2d6de     5D 22 4C 22 
2d6e2     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2d6e6     77 09 76 F1 
2d6ea     CC EC F0 EB 
2d6ee     CD EB CE EB 
2d6f2     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2d6f6     ED EB F5 EB 
2d6fa     3E F6 6B 22 
2d6fe     5F 22 4E 22 
2d702     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2d706     1B 22 0B 22 
2d70a     FA 21 E9 21 
2d70e     D8 21 4D FF 
2d712     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2d716     92 EB 7B EB 
2d71a     82 EB 8C EB 
2d71e     97 EB A1 EB 
2d722     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2d726     15 22 04 22 
2d72a     F3 21 E3 21 
2d72e     D2 21 C0 21 
2d732     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2d736     8E 21 7D 21 
2d73a     9A F8 A4 ED 
2d73e     8E EB 2F EB 
2d742     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2d746     37 EB 42 EB 
2d74a     4C EB 57 EB 
2d74e     B2 17 22 19 
2d752     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2d756     FD 18 EF 18 
2d75a     E3 18 D6 18 
2d75e     CA 18 BD 18 
2d762     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2d766     60 EC 35 EB 
2d76a     01 EB 01 EB 
2d76e     0C EB 16 EB 
2d772     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2d776     34 EB D0 18 
2d77a     00 19 F4 18 
2d77e     E8 18 DA 18 
2d782     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2d786     B6 18 A9 18 
2d78a     9D 18 91 05 
2d78e     F0 EF CA EB 
2d792     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2d796     E8 EA F2 EA 
2d79a     FE EA 07 EB 
2d79e     12 EB C2 EF 
2d7a2     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2d7a6     D9 18 CD 18 
2d7aa     C0 18 B3 18 
2d7ae     A7 18 9B 18 
2d7b2     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2d7b6     B8 FC 30 EE 
2d7ba     61 EB DC EA 
2d7be     CD EA D2 EA 
2d7c2     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2d7c6     F3 EA FE EA 
2d7ca     D2 09 D1 18 
2d7ce     C3 18 17 18 
2d7d2     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2d7d6     66 11 52 11 
2d7da     49 11 41 11 
2d7de     38 11 E0 F4 
2d7e2     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2d7e6     C9 EA C5 EA 
2d7ea     CF EA DB EA 
2d7ee     E6 EA EF EA 
2d7f2     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2d7f6     89 11 80 11 
2d7fa     78 11 6E 11 
2d7fe     67 11 5D 11 
2d802     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2d806     43 11 32 0D 
2d80a     9C F1 07 EC 
2d80e     F8 EA CD EA 
2d812     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2d816     E4 EA ED EA 
2d81a     F8 EA 02 EB 
2d81e     55 11 91 11 
2d822     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2d826     75 11 6E 11 
2d82a     64 11 5E 11 
2d82e     54 11 4A 11 
2d832     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2d836     A8 EB F1 EA 
2d83a     D9 EA DC EA 
2d83e     E8 EA F1 EA 
2d842     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2d846     A6 EB 9E 11 
2d84a     A0 11 96 11 
2d84e     8D 11 85 11 
2d852     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2d856     6A 11 CA 0D 
2d85a     36 0B 57 F8 
2d85e     6C ED 57 EB 
2d862     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2d866     F4 EA FF EA 
2d86a     09 EB 15 EB 
2d86e     1E EB 1A FD 
2d872     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2d876     ED 0A E8 0A 
2d87a     E2 0A DC 0A 
2d87e     D6 0A D1 0A 
2d882     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2d886     F8 F3 BC EC 
2d88a     57 EB 1E EB 
2d88e     18 EB 24 EB 
2d892     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2d896     42 EB 4D EB 
2d89a     08 09 20 0B 
2d89e     1A 0B 14 0B 
2d8a2     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2d8a6     04 0B FE 0A 
2d8aa     F9 0A F2 0A 
2d8ae     84 08 3A F1 
2d8b2     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2d8b6     42 EB 42 EB 
2d8ba     4E EB 57 EB 
2d8be     62 EB 6B EB 
2d8c2     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2d8c6     48 0B 43 0B 
2d8ca     3C 0B 36 0B 
2d8ce     31 0B 2C 0B 
2d8d2     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2d8d6     1B 0B 5C 00 
2d8da     6A EF 1B EC 
2d8de     81 EB 6A EB 
2d8e2     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2d8e6     85 EB 8E EB 
2d8ea     99 EB A3 EB 
2d8ee     DD 05 E5 05 
2d8f2     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2d8f6     DB 05 D8 05 
2d8fa     D5 05 D1 05 
2d8fe     D0 05 CB 05 
2d902     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2d906     0C EC BB EB 
2d90a     B3 EB BB EB 
2d90e     C5 EB D0 EB 
2d912     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2d916     E4 F7 2C 06 
2d91a     28 06 24 06 
2d91e     22 06 1F 06 
2d922     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2d926     16 06 14 06 
2d92a     0F 06 D0 F3 
2d92e     65 ED 2D EC 
2d932     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2d936     01 EC 0A EC 
2d93a     14 EC 1E EC 
2d93e     29 EC FB 03 
2d942     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2d946     63 06 60 06 
2d94a     5E 06 59 06 
2d94e     58 06 54 06 
2d952     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2d956     69 F1 21 ED 
2d95a     55 EC 33 EC 
2d95e     36 EC 40 EC 
2d962     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2d966     5C EC 68 EC 
2d96a     92 02 D9 02 
2d96e     D7 02 D7 02 
2d972     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2d976     D1 02 D1 02 
2d97a     CE 02 CD 02 
2d97e     5D FC 80 EF 
2d982     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2d986     83 EC 8A EC 
2d98a     93 EC 9C EC 
2d98e     A5 EC B1 EC 
2d992     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2d996     2B 03 2A 03 
2d99a     29 03 26 03 
2d99e     25 03 24 03 
2d9a2     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2d9a6     1F 03 70 F7 
2d9aa     D0 EE 27 ED 
2d9ae     DB EC D4 EC 
2d9b2     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2d9b6     F0 EC FA EC 
2d9ba     02 ED F9 F4 
2d9be     7B 03 7C 03 
2d9c2     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2d9c6     75 03 73 03 
2d9ca     72 03 70 03 
2d9ce     6D 03 6C 03 
2d9d2     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2d9d6     54 ED 22 ED 
2d9da     22 ED 2C ED 
2d9de     35 ED 3F ED 
2d9e2     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2d9e6     14 01 C3 03 
2d9ea     C1 03 C0 03 
2d9ee     5F 01 A5 00 
2d9f2     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2d9f6     7B 00 7C 00 
2d9fa     20 00 85 F1 
2d9fe     2A EE 89 ED 
2da02     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2da06     80 ED 87 ED 
2da0a     90 ED 9A ED 
2da0e     A3 ED 73 00 
2da12     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2da16     D0 00 D0 00 
2da1a     D0 00 D0 00 
2da1e     D0 00 CF 00 
2da22     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2da26     80 F0 3D EE 
2da2a     D5 ED C7 ED 
2da2e     CD ED D6 ED 
2da32     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2da36     F2 ED FA ED 
2da3a     1D 01 29 01 
2da3e     27 01 27 01 
2da42     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2da46     25 01 26 01 
2da4a     26 01 23 01 
2da4e     D0 F7 EC EF 
2da52     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2da56     1C EE 24 EE 
2da5a     2D EE 37 EE 
2da5e     40 EE 47 EE 
2da62     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2da66     7D 01 7B 01 
2da6a     7A 01 7A 01 
2da6e     79 01 78 01 
2da72     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2da76     84 FE DE F3 
2da7a     6C EF 93 EE 
2da7e     72 EE 72 EE 
2da82     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2da86     8B EE 95 EE 
2da8a     9E EE 15 FC 
2da8e     67 FE 67 FE 
2da92     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2da96     6B FE 6B FE 
2da9a     6D FE 6D FE 
2da9e     6D FE 6F FE 
2daa2     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2daa6     DF EE CC EE 
2daaa     CF EE D9 EE 
2daae     E1 EE EA EE 
2dab2     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2dab6     5A FE C4 FE 
2daba     C3 FE C5 FE 
2dabe     C6 FE C6 FE 
2dac2     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2dac6     C8 FE C7 FE 
2daca     DA FB 85 F1 
2dace     8D EF 31 EF 
2dad2     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2dad6     34 EF 3E EF 
2dada     46 EF 4F EF 
2dade     57 EF 0D FF 
2dae2     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2dae6     1F FF 1F FF 
2daea     21 FF 21 FF 
2daee     21 FF 21 FF 
2daf2     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2daf6     15 F1 BE EF 
2dafa     84 EF 7E EF 
2dafe     88 EF 8F EF 
2db02     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2db06     A9 EF 06 F2 
2db0a     A6 FC AB FC 
2db0e     AD FC AE FC 
2db12     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2db16     B2 FC B4 FC 
2db1a     B6 FC B7 FC 
2db1e     8B F4 BD F0 
2db22     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2db26     E4 EF EE EF 
2db2a     F6 EF FD EF 
2db2e     04 F0 0E F0 
2db32     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2db36     0B FD 0D FD 
2db3a     0F FD 11 FD 
2db3e     11 FD 13 FD 
2db42     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2db46     17 FD 64 F3 
2db4a     CD F0 52 F0 
2db4e     41 F0 45 F0 
2db52     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2db56     5B F0 64 F0 
2db5a     6D F0 FB FC 
2db5e     65 FD 68 FD 
2db62     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2db66     6C FD 6D FD 
2db6a     6F FD 70 FD 
2db6e     72 FD B3 FB 
2db72     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2db76     A4 F0 99 F0 
2db7a     A0 F0 A8 F0 
2db7e     AE F0 B9 F0 
2db82     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2db86     CB FB DD FB 
2db8a     DE FB E0 FB 
2db8e     E3 FB E3 FB 
2db92     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2db96     E9 FB EC FB 
2db9a     62 F7 27 F2 
2db9e     2A F1 FF F0 
2dba2     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2dba6     0C F1 13 F1 
2dbaa     1B F1 23 F1 
2dbae     33 F2 3C FC 
2dbb2     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2dbb6     42 FC 45 FC 
2dbba     47 FC 48 FC 
2dbbe     4A FC 4C FC 
2dbc2     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2dbc6     20 F2 77 F1 
2dbca     5C F1 5F F1 
2dbce     64 F1 6C F1 
2dbd2     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2dbd6     83 F1 DC F8 
2dbda     9A FC 9A FC 
2dbde     9B FC 9E FC 
2dbe2     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2dbe6     A3 FC A4 FC 
2dbea     A6 FC A9 FC 
2dbee     90 F4 33 F2 
2dbf2     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2dbf6     BA F1 BF F1 
2dbfa     C7 F1 CE F1 
2dbfe     D6 F1 DC F1 
2dc02     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2dc06     F3 FC F5 FC 
2dc0a     FE FB 79 FB 
2dc0e     62 FB 5F FB 
2dc12     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2dc16     6F FA AF F3 
2dc1a     53 F2 12 F2 
2dc1e     0F F2 15 F2 
2dc22     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2dc26     2A F2 32 F2 
2dc2a     38 F2 9A FB 
2dc2e     AF FB B1 FB 
2dc32     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2dc36     B7 FB B8 FB 
2dc3a     BA FB BC FB 
2dc3e     C1 FB 3B F8 
2dc42     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2dc46     6E F2 6C F2 
2dc4a     74 F2 7A F2 
2dc4e     81 F2 87 F2 
2dc52     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2dc56     06 FC 09 FC 
2dc5a     0C FC 0E FC 
2dc5e     0F FC 12 FC 
2dc62     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2dc66     17 FC 1A FC 
2dc6a     B2 F6 7B F3 
2dc6e     DD F2 C5 F2 
2dc72     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2dc76     D4 F2 DB F2 
2dc7a     E0 F2 E8 F2 
2dc7e     28 F8 60 FC 
2dc82     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2dc86     64 FC 66 FC 
2dc8a     68 FC 6A FC 
2dc8e     6D FC 52 FC 
2dc92     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2dc96     78 F3 24 F3 
2dc9a     1A F3 1E F3 
2dc9e     24 F3 2A F3 
2dca2     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2dca6     3D F3 80 FA 
2dcaa     0C FB 0F FB 
2dcae     10 FB 14 FB 
2dcb2     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2dcb6     1B FB 1D FB 
2dcba     1F FB 92 FA 
2dcbe     DE F4 AE F3 
2dcc2     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2dcc6     79 F3 7E F3 
2dcca     84 F3 8C F3 
2dcce     92 F3 97 F3 
2dcd2     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2dcd6     67 FB 69 FB 
2dcda     6B FB 6F FB 
2dcde     71 FB 72 FB 
2dce2     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2dce6     E3 F8 BA F4 
2dcea     EE F3 CC F3 
2dcee     CA F3 CF F3 
2dcf2     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2dcf6     E2 F3 E8 F3 
2dcfa     ED F3 B7 FB 
2dcfe     BC FB BE FB 
2dd02     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2dd06     C4 FB C6 FB 
2dd0a     C8 FB C9 FB 
2dd0e     CC FB 8F F7 
2dd12     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2dd16     1E F4 1E F4 
2dd1a     24 F4 2A F4 
2dd1e     30 F4 38 F4 
2dd22     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2dd26     AD FA B1 FA 
2dd2a     B4 FA B6 FA 
2dd2e     BA FA BB FA 
2dd32     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2dd36     C2 FA C6 FA 
2dd3a     55 F6 C6 F4 
2dd3e     7D F4 72 F4 
2dd42     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2dd46     83 F4 89 F4 
2dd4a     8F F4 94 F4 
2dd4e     66 FA 03 FB 
2dd52     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2dd56     0A FB 0E FB 
2dd5a     10 FB 11 FB 
2dd5e     16 FB 18 FB 
2dd62     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2dd66     F9 F4 CA F4 
2dd6a     C5 F4 CB F4 
2dd6e     D1 F4 D7 F4 
2dd72     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2dd76     E8 F4 3F FB 
2dd7a     56 FB 58 FB 
2dd7e     5A FB 5E FB 
2dd82     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2dd86     64 FB 64 FB 
2dd8a     69 FB 99 F9 
2dd8e     E9 F5 33 F5 
2dd92     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2dd96     1D F5 22 F5 
2dd9a     27 F5 2E F5 
2dd9e     32 F5 37 F5 
2dda2     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2dda6     BC FA BC FA 
2ddaa     C1 FA C2 FA 
2ddae     C4 FA C8 FA 
2ddb2     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2ddb6     F9 F7 DB F5 
2ddba     78 F5 69 F5 
2ddbe     6A F5 70 F5 
2ddc2     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2ddc6     7F F5 85 F5 
2ddca     6E F7 06 FB 
2ddce     0A FB 0B FB 
2ddd2     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2ddd6     14 FB 15 FB 
2ddda     18 FB 1B FB 
2ddde     1D FB 70 F7 
2dde2     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2dde6     B6 F5 BB F5 
2ddea     C0 F5 C6 F5 
2ddee     CA F5 CF F5 
2ddf2     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2ddf6     54 FB 56 FB 
2ddfa     5A FB 5B FB 
2ddfe     5E FB 5F FB 
2de02     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2de06     67 FB 52 FB 
2de0a     29 F7 33 F6 
2de0e     06 F6 02 F6 
2de12     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2de16     10 F6 16 F6 
2de1a     1A F6 1F F6 
2de1e     81 FB 9F FB 
2de22     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2de26     51 FB F2 FA 
2de2a     E3 FA E3 FA 
2de2e     E5 FA E9 FA 
2de32     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2de36     64 F6 4D F6 
2de3a     4D F6 53 F6 
2de3e     57 F6 5C F6 
2de42     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2de46     6A F6 19 FB 
2de4a     1E FB 22 FB 
2de4e     23 FB 24 FB 
2de52     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2de56     2C FB 2E FB 
2de5a     32 FB F0 F8 
2de5e     01 F7 A5 F6 
2de62     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2de66     9F F6 A3 F6 
2de6a     A6 F6 AC F6 
2de6e     B0 F6 EB F7 
2de72     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2de76     68 FB 6C FB 
2de7a     6E FB 71 FB 
2de7e     72 FB 74 FB 
2de82     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2de86     71 F8 21 F7 
2de8a     E5 F6 DD F6 
2de8e     E1 F6 E6 F6 
2de92     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2de96     F5 F6 F7 F6 
2de9a     F7 FA AB FB 
2de9e     AD FB AF FB 
2dea2     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2dea6     B6 FB B9 FB 
2deaa     BB FB BC FB 
2deae     21 FB 07 F8 
2deb2     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2deb6     22 F7 26 F7 
2deba     2B F7 2E F7 
2debe     34 F7 38 F7 
2dec2     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2dec6     13 FB 16 FB 
2deca     17 FB 1B FB 
2dece     1E FB 20 FB 
2ded2     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2ded6     26 FB 77 FA 
2deda     F3 F7 7C F7 
2dede     67 F7 6A F7 
2dee2     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2dee6     74 F7 7A F7 
2deea     7E F7 82 F7 
2deee     53 FB 5A FB 
2def2     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2def6     5F FB 63 FB 
2defa     65 FB 67 FB 
2defe     69 FB 6A FB 
2df02     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2df06     B5 F7 A9 F7 
2df0a     AD F7 B0 F7 
2df0e     B5 F7 B8 F7 
2df12     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2df16     6E F8 99 FB 
2df1a     9C FB 9D FB 
2df1e     9F FB A4 FB 
2df22     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2df26     A9 FB AB FB 
2df2a     AD FB 46 F9 
2df2e     26 F8 F0 F7 
2df32     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2df36     F4 F7 F8 F7 
2df3a     FB F7 FF F7 
2df3e     03 F8 65 FA 
2df42     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2df46     2B FB 2F FB 
2df4a     30 FB 32 FB 
2df4e     34 FB 38 FB 
2df52     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2df56     E9 F8 4A F8 
2df5a     2E F8 2C F8 
2df5e     2F F8 36 F8 
2df62     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2df66     41 F8 44 F8 
2df6a     4A FB 67 FB 
2df6e     68 FB 6B FB 
2df72     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2df76     73 FB 74 FB 
2df7a     78 FB 7A FB 
2df7e     14 FB E7 F8 
2df82     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2df86     6D F8 70 F8 
2df8a     73 F8 78 F8 
2df8e     7C F8 80 F8 
2df92     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2df96     A6 FB A7 FB 
2df9a     A9 FB AC FB 
2df9e     AF FB B1 FB 
2dfa2     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2dfa6     B7 FB 73 FA 
2dfaa     F8 F8 B4 F8 
2dfae     A9 F8 AB F8 
2dfb2     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2dfb6     B4 F8 B8 F8 
2dfba     BB F8 FA F8 
2dfbe     64 FB 65 FB 
2dfc2     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2dfc6     6D FB 6F FB 
2dfca     70 FB 74 FB 
2dfce     77 FB 77 FB 
2dfd2     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2dfd6     E9 F8 E4 F8 
2dfda     E8 F8 EB F8 
2dfde     EE F8 F2 F8 
2dfe2     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2dfe6     B5 FA 9F FB 
2dfea     A1 FB A4 FB 
2dfee     A5 FB A9 FB 
2dff2     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2dff6     AE FB B1 FB 
2dffa     B2 FB C7 F9 
2dffe     39 F9 22 F9 
2e002     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2e006     26 F9 2A F9 
2e00a     2E F9 32 F9 
2e00e     33 F9 BA FB 
2e012     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2e016     DE FB E1 FB 
2e01a     E2 FB E4 FB 
2e01e     E5 FB E7 FB 
2e022     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2e026     C5 F9 67 F9 
2e02a     57 F9 56 F9 
2e02e     5B F9 5F F9 
2e032     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2e036     68 F9 6C F9 
2e03a     0B FC 11 FC 
2e03e     14 FC 15 FC 
2e042     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2e046     B5 FB B5 FB 
2e04a     B6 FB B8 FB 
2e04e     E9 FA C8 F9 
2e052     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2e056     90 F9 94 F9 
2e05a     95 F9 99 F9 
2e05e     9D F9 9F F9 
2e062     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2e066     DE FB DF FB 
2e06a     E2 FB E4 FB 
2e06e     E6 FB E8 FB 
2e072     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2e076     EF FB AC FA 
2e07a     E9 F9 C7 F9 
2e07e     C3 F9 C8 F9 
2e082     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2e086     D0 F9 D4 F9 
2e08a     D6 F9 0E FB 
2e08e     11 FC 13 FC 
2e092     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2e096     19 FC 1B FC 
2e09a     1D FC 1E FC 
2e09e     21 FC 22 FC 
2e0a2     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2e0a6     F7 F9 F7 F9 
2e0aa     FB F9 FE F9 
2e0ae     00 FA 03 FA 
2e0b2     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2e0b6     1B FC 45 FC 
2e0ba     46 FC 48 FC 
2e0be     4A FC 4B FC 
2e0c2     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2e0c6     52 FC 54 FC 
2e0ca     F3 FB 82 FA 
2e0ce     35 FA 28 FA 
2e0d2     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2e0d6     31 FA 32 FA 
2e0da     37 FA 37 FA 
2e0de     3C FA 00 FC 
2e0e2     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2e0e6     09 FC 0B FC 
2e0ea     0F FC 12 FC 
2e0ee     12 FC 15 FC 
2e0f2     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2e0f6     8D FA 60 FA 
2e0fa     5B FA 5C FA 
2e0fe     60 FA 61 FA 
2e102     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2e106     6C FA 6D FA 
2e10a     37 FC 3A FC 
2e10e     3B FC 3D FC 
2e112     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2e116     43 FC 44 FC 
2e11a     45 FC 47 FC 
2e11e     51 FB AB FA 
2e122     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2e126     8E FA 91 FA 
2e12a     93 FA 95 FA 
2e12e     98 FA 9B FA 
2e132     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2e136     68 FC 6A FC 
2e13a     6C FC 6E FC 
2e13e     70 FC 72 FC 
2e142     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2e146     76 FC 3B FB 
2e14a     D0 FA BB FA 
2e14e     B9 FA BD FA 
2e152     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2e156     C4 FA C6 FA 
2e15a     CA FA 13 FC 
2e15e     3A FC 3A FC 
2e162     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2e166     41 FC 43 FC 
2e16a     44 FC 47 FC 
2e16e     48 FC 3C FC 
2e172     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2e176     E6 FA E8 FA 
2e17a     EB FA EE FA 
2e17e     F0 FA F2 FA 
2e182     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2e186     61 FC 66 FC 
2e18a     68 FC 6B FC 
2e18e     6C FC 6E FC 
2e192     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2e196     73 FC 75 FC 
2e19a     13 FC 3F FB 
2e19e     17 FB 12 FB 
2e1a2     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2e1a6     1A FB 1D FB 
2e1aa     1F FB 20 FB 
2e1ae     23 FB 92 FC 
2e1b2     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2e1b6     96 FC 97 FC 
2e1ba     9A FC 9C FC 
2e1be     9E FC 9F FC 
2e1c2     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2e1c6     5A FB 41 FB 
2e1ca     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2e1ce     00 00 00 00 | zero2 long 0
2e1d2     01 00 00 00 
2e1d6     00 00 00 00 
2e1da     00 00 00 00 
2e1de     00 00 00 00 | mouse  file "mouse2.def"
2e1e2     00 00 00 00 
2e1e6     00 00 00 00 
2e1ea     00 00 00 00 
2e1ee     00 00 00 00 | 	byte	$00[16]
2e1f2     01 01 00 00 
2e1f6     00 00 00 00 
2e1fa     00 00 00 00 
2e1fe     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e202     00 00 00 00 
2e206     00 00 00 00 
2e20a     00 00 00 00 
2e20e     00 00 00 00 | 	byte	$00[16]
2e212     01 0D 01 00 
2e216     00 00 00 00 
2e21a     00 00 00 00 
2e21e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e222     00 00 00 00 
2e226     00 00 00 00 
2e22a     00 00 00 00 
2e22e     00 00 00 00 | 	byte	$00[16]
2e232     01 0D 0D 01 
2e236     00 00 00 00 
2e23a     00 00 00 00 
2e23e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e242     00 00 00 00 
2e246     00 00 00 00 
2e24a     00 00 00 00 
2e24e     00 00 00 00 | 	byte	$00[16]
2e252     01 0D 0D 0D 
2e256     01 00 00 00 
2e25a     00 00 00 00 
2e25e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e262     00 00 00 00 
2e266     00 00 00 00 
2e26a     00 00 00 00 
2e26e     00 00 00 00 | 	byte	$00[16]
2e272     01 0D 0D 0D 
2e276     0D 01 00 00 
2e27a     00 00 00 00 
2e27e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e282     00 00 00 00 
2e286     00 00 00 00 
2e28a     00 00 00 00 
2e28e     00 00 00 00 | 	byte	$00[16]
2e292     01 0D 0D 0D 
2e296     0D 0D 01 00 
2e29a     00 00 00 00 
2e29e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e2a2     00 00 00 00 
2e2a6     00 00 00 00 
2e2aa     00 00 00 00 
2e2ae     00 00 00 00 | 	byte	$00[16]
2e2b2     01 0D 0D 0D 
2e2b6     0D 0D 0D 01 
2e2ba     00 00 00 00 
2e2be     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2e2c2     00 00 00 00 
2e2c6     00 00 00 00 
2e2ca     00 00 00 00 
2e2ce     00 00 00 00 | 	byte	$00[16]
2e2d2     01 0D 0D 0D 
2e2d6     0D 0D 0D 0C 
2e2da     01 00 00 00 
2e2de     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2e2e2     00 00 00 00 
2e2e6     00 00 00 00 
2e2ea     00 00 00 00 
2e2ee     00 00 00 00 | 	byte	$00[16]
2e2f2     01 0D 0D 0D 
2e2f6     0D 0D 0D 0D 
2e2fa     0C 01 00 00 
2e2fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2e302     00 00 00 00 
2e306     00 00 00 00 
2e30a     00 00 00 00 
2e30e     00 00 00 00 | 	byte	$00[16]
2e312     01 0D 0D 0D 
2e316     0D 0D 0D 0D 
2e31a     0D 0C 01 00 
2e31e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2e322     00 00 00 00 
2e326     00 00 00 00 
2e32a     00 00 00 00 
2e32e     00 00 00 00 | 	byte	$00[16]
2e332     01 0D 0D 0D 
2e336     0D 0D 0D 0D 
2e33a     0D 0D 0B 01 
2e33e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2e342     00 00 00 00 
2e346     00 00 00 00 
2e34a     00 00 00 00 
2e34e     00 00 00 00 | 	byte	$00[16]
2e352     01 0D 0D 0D 
2e356     0C 0D 0D 03 
2e35a     01 01 01 01 
2e35e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2e362     00 00 00 00 
2e366     00 00 00 00 
2e36a     00 00 00 00 
2e36e     00 00 00 00 | 	byte	$00[16]
2e372     01 0D 0D 0C 
2e376     01 09 0D 03 
2e37a     00 00 00 00 
2e37e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2e382     00 00 00 00 
2e386     00 00 00 00 
2e38a     00 00 00 00 
2e38e     00 00 00 00 | 	byte	$00[16]
2e392     01 0D 0C 01 
2e396     00 01 0D 0B 
2e39a     01 00 00 00 
2e39e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2e3a2     00 00 00 00 
2e3a6     00 00 00 00 
2e3aa     00 00 00 00 
2e3ae     00 00 00 00 | 	byte	$00[16]
2e3b2     01 0C 01 00 
2e3b6     00 01 0A 0D 
2e3ba     01 00 00 00 
2e3be     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2e3c2     00 00 00 00 
2e3c6     00 00 00 00 
2e3ca     00 00 00 00 
2e3ce     00 00 00 00 | 	byte	$00[16]
2e3d2     01 01 00 00 
2e3d6     00 00 01 0D 
2e3da     0B 01 00 00 
2e3de     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2e3e2     00 00 00 00 
2e3e6     00 00 00 00 
2e3ea     00 00 00 00 
2e3ee     00 00 00 00 
2e3f2     00 00 00 00 
2e3f6     00 00       | 	byte	$00[22]
2e3f8     01 0B 0D 01 
2e3fc     00 00 00 00 
2e400     00 00 00 00 
2e404     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e408     00 00 00 00 
2e40c     00 00 00 00 
2e410     00 00 00 00 
2e414     00 00 00 00 
2e418     00          | 	byte	$00[17]
2e419     01 01 00 00 
2e41d     00 00 00 00 
2e421     00 00 00 00 
2e425     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e429     00 00 00 00 
      ...             
2e5cd     00 00 00 00 
2e5d1     00          | 	byte	$00[425]
2e5d2     73 32 00 04 
2e5d6     00 00 10 00 
2e5da     00 00 00 00 
2e5de     00 00 00 00 | atari2 file "atari2.s2"
2e5e2     43 87 43 87 
2e5e6     43 87 44 87 
2e5ea     43 87 44 87 
2e5ee     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e5f2     43 87 43 87 
2e5f6     43 87 44 87 
2e5fa     43 87 43 87 
2e5fe     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e602     44 87 43 87 
2e606     44 87 43 87 
2e60a     43 87 43 87 
2e60e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e612     43 87 43 87 
2e616     44 87 43 87 
2e61a     44 87 44 87 
2e61e     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
2e622     43 87 43 87 
2e626     44 87 43 87 
2e62a     43 87 42 87 
2e62e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2e632     43 87 43 87 
2e636     43 87 43 87 
2e63a     44 87 43 87 
2e63e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2e642     44 87 44 87 
2e646     43 87 44 87 
2e64a     43 87 44 87 
2e64e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e652     44 87 43 87 
2e656     44 87 44 87 
2e65a     43 87 43 87 
2e65e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e662     43 87 44 87 
2e666     44 87 43 87 
2e66a     43 87 44 87 
2e66e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e672     43 87 43 87 
2e676     43 87 43 87 
2e67a     43 87 43 87 
2e67e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e682     42 87 43 87 
2e686     44 87 42 87 
2e68a     43 87 43 87 
2e68e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e692     43 87 44 87 
2e696     44 87 43 87 
2e69a     43 87 43 87 
2e69e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e6a2     43 87 5C 87 
2e6a6     EE 86 AC 87 
2e6aa     4C 7C A3 78 
2e6ae     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
2e6b2     BC 78 BB 78 
2e6b6     BD 78 BC 78 
2e6ba     BB 78 BD 78 
2e6be     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
2e6c2     BB 78 BB 78 
2e6c6     BC 78 BC 78 
2e6ca     BC 78 BB 78 
2e6ce     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e6d2     BC 78 BC 78 
2e6d6     BC 78 BC 78 
2e6da     BC 78 BC 78 
2e6de     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e6e2     BB 78 BC 78 
2e6e6     A0 78 4C 7C 
2e6ea     11 7A 29 89 
2e6ee     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
2e6f2     44 87 43 87 
2e6f6     44 87 43 87 
2e6fa     43 87 42 87 
2e6fe     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2e702     43 87 43 87 
2e706     44 87 ED 85 
2e70a     71 85 52 79 
2e70e     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
2e712     BC 78 BC 78 
2e716     BC 78 BC 78 
2e71a     BC 78 BC 78 
2e71e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e722     BC 78 BC 78 
2e726     BC 78 A0 78 
2e72a     CF 7A B9 81 
2e72e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
2e732     44 87 43 87 
2e736     43 87 44 87 
2e73a     43 87 44 87 
2e73e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e742     43 87 43 87 
2e746     43 87 43 87 
2e74a     44 87 43 87 
2e74e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2e752     43 87 43 87 
2e756     44 87 43 87 
2e75a     44 87 43 87 
2e75e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2e762     44 87 43 87 
2e766     43 87 43 87 
2e76a     5A 87 39 81 
2e76e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
2e772     A5 78 BC 78 
2e776     BB 78 BC 78 
2e77a     BB 78 BC 78 
2e77e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
2e782     BC 78 BC 78 
2e786     BC 78 BC 78 
2e78a     BC 78 8F 79 
2e78e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
2e792     09 85 47 87 
2e796     43 87 43 87 
2e79a     42 87 42 87 
2e79e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
2e7a2     43 87 43 87 
2e7a6     43 87 43 87 
2e7aa     43 87 44 87 
2e7ae     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e7b2     43 87 43 87 
2e7b6     44 87 43 87 
2e7ba     42 87 43 87 
2e7be     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
2e7c2     44 87 43 87 
2e7c6     43 87 43 87 
2e7ca     44 87 44 87 
2e7ce     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
2e7d2     94 78 55 7A 
2e7d6     B9 78 BC 78 
2e7da     BC 78 BC 78 
2e7de     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e7e2     BC 78 BB 78 
2e7e6     BC 78 BC 78 
2e7ea     BC 78 BC 78 
2e7ee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e7f2     BB 78 BC 78 
2e7f6     BC 78 BC 78 
2e7fa     BB 78 BC 78 
2e7fe     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2e802     BC 78 BC 78 
2e806     BD 78 BC 78 
2e80a     BC 78 BB 78 
2e80e     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
2e812     94 78 B3 84 
2e816     36 84 4A 87 
2e81a     43 87 43 87 
2e81e     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e822     43 87 44 87 
2e826     43 87 43 87 
2e82a     43 87 43 87 
2e82e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e832     43 87 44 87 
2e836     43 87 44 87 
2e83a     43 87 43 87 
2e83e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e842     43 87 43 87 
2e846     43 87 45 87 
2e84a     43 87 43 87 
2e84e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e852     43 87 44 87 
2e856     44 87 44 87 
2e85a     43 87 43 87 
2e85e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e862     43 87 42 87 
2e866     43 87 43 87 
2e86a     44 87 43 87 
2e86e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2e872     54 87 3C 82 
2e876     36 83 52 79 
2e87a     C6 78 BC 78 
2e87e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
2e882     BB 78 BB 78 
2e886     BC 78 BC 78 
2e88a     BC 78 BC 78 
2e88e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2e892     BD 78 ED 78 
2e896     1B 79 F4 83 
2e89a     4D 83 4E 87 
2e89e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
2e8a2     44 87 43 87 
2e8a6     42 87 44 87 
2e8aa     43 87 42 87 
2e8ae     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
2e8b2     43 87 54 87 
2e8b6     26 82 B3 84 
2e8ba     D6 77 BB 78 
2e8be     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
2e8c2     BC 78 BB 78 
2e8c6     BB 78 BB 78 
2e8ca     BB 78 BB 78 
2e8ce     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
2e8d2     BC 78 BC 78 
2e8d6     26 79 18 75 
2e8da     36 83 1F 84 
2e8de     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
2e8e2     43 87 43 87 
2e8e6     43 87 43 87 
2e8ea     43 87 44 87 
2e8ee     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e8f2     43 87 44 87 
2e8f6     44 87 43 87 
2e8fa     43 87 43 87 
2e8fe     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
2e902     43 87 43 87 
2e906     43 87 43 87 
2e90a     44 87 44 87 
2e90e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
2e912     44 87 43 87 
2e916     43 87 43 87 
2e91a     43 87 44 87 
2e91e     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e922     44 87 44 87 
2e926     44 87 43 87 
2e92a     44 87 43 87 
2e92e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e932     43 87 43 87 
2e936     43 87 44 87 
2e93a     44 87 43 87 
2e93e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e942     43 87 43 87 
2e946     43 87 43 87 
2e94a     43 87 44 87 
2e94e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e952     43 87 44 87 
2e956     43 87 44 87 
2e95a     19 87 7D 86 
2e95e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
2e962     B1 78 BC 78 
2e966     BC 78 BC 78 
2e96a     BC 78 BC 78 
2e96e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e972     BC 78 BC 78 
2e976     BD 78 BC 78 
2e97a     B7 78 3B 7B 
2e97e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
2e982     96 86 44 87 
2e986     43 87 43 87 
2e98a     43 87 43 87 
2e98e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e992     44 87 44 87 
2e996     43 87 44 87 
2e99a     43 87 44 87 
2e99e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
2e9a2     43 87 44 87 
2e9a6     43 87 44 87 
2e9aa     43 87 44 87 
2e9ae     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e9b2     43 87 44 87 
2e9b6     43 87 43 87 
2e9ba     44 87 43 87 
2e9be     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e9c2     44 87 44 87 
2e9c6     43 87 43 87 
2e9ca     43 87 44 87 
2e9ce     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e9d2     43 87 43 87 
2e9d6     43 87 43 87 
2e9da     44 87 44 87 
2e9de     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
2e9e2     36 83 CF 7A 
2e9e6     AB 78 BB 78 
2e9ea     BC 78 BC 78 
2e9ee     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
2e9f2     BB 78 BC 78 
2e9f6     BC 78 BC 78 
2e9fa     BC 78 BC 78 
2e9fe     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2ea02     BC 78 BC 78 
2ea06     BC 78 BB 78 
2ea0a     BC 78 BC 78 
2ea0e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2ea12     BB 78 BC 78 
2ea16     BB 78 BC 78 
2ea1a     BC 78 BD 78 
2ea1e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
2ea22     BC 78 BC 78 
2ea26     BC 78 BC 78 
2ea2a     BC 78 BD 78 
2ea2e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
2ea32     BC 78 BB 78 
2ea36     BC 78 BB 78 
2ea3a     BB 78 BC 78 
2ea3e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
2ea42     BC 78 BC 78 
2ea46     BC 78 BC 78 
2ea4a     BC 78 BB 78 
2ea4e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
2ea52     BC 78 BC 78 
2ea56     BC 78 BD 78 
2ea5a     BB 78 BC 78 
2ea5e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2ea62     BC 78 BC 78 
2ea66     BC 78 BB 78 
2ea6a     BC 78 BB 78 
2ea6e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2ea72     BB 78 BC 78 
2ea76     BC 78 BC 78 
2ea7a     BC 78 BB 78 
2ea7e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ea82     BC 78 BC 78 
2ea86     BC 78 BB 78 
2ea8a     BC 78 BB 78 
2ea8e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ea92     BC 78 BC 78 
2ea96     BC 78 BC 78 
2ea9a     BB 78 BC 78 
2ea9e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2eaa2     BC 78 9F 78 
2eaa6     52 79 B3 84 
2eaaa     2F 86 60 87 
2eaae     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
2eab2     44 87 43 87 
2eab6     43 87 43 87 
2eaba     43 87 43 87 
2eabe     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2eac2     43 87 43 87 
2eac6     43 87 44 87 
2eaca     43 87 43 87 
2eace     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2ead2     43 87 43 87 
2ead6     43 87 43 87 
2eada     43 87 44 87 
2eade     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2eae2     44 87 44 87 
2eae6     5E 87 BC 80 
2eaea     FB 80 94 78 
2eaee     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
2eaf2     BD 78 BC 78 
2eaf6     BB 78 BC 78 
2eafa     BB 78 BB 78 
2eafe     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
2eb02     BC 78 BB 78 
2eb06     BB 78 6B 79 
2eb0a     D6 77 AC 87 
2eb0e     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
2eb12     43 87 44 87 
2eb16     43 87 43 87 
2eb1a     44 87 43 87 
2eb1e     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2eb22     43 87 44 87 
2eb26     43 87 5C 87 
2eb2a     E7 80 00 80 
2eb2e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
2eb32     BC 78 BD 78 
2eb36     BC 78 BC 78 
2eb3a     BC 78 BB 78 
2eb3e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2eb42     BC 78 BC 78 
2eb46     BB 78 BC 78 
2eb4a     BB 78 BC 78 
2eb4e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2eb52     BB 78 BC 78 
2eb56     BC 78 BC 78 
2eb5a     BC 78 BC 78 
2eb5e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2eb62     BC 78 BC 78 
2eb66     BC 78 BC 78 
2eb6a     A0 78 8D 7B 
2eb6e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
2eb72     60 87 43 87 
2eb76     44 87 44 87 
2eb7a     43 87 43 87 
2eb7e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
2eb82     44 87 43 87 
2eb86     43 87 43 87 
2eb8a     44 87 73 86 
2eb8e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
2eb92     51 7B B6 78 
2eb96     BC 78 BD 78 
2eb9a     BC 78 BC 78 
2eb9e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2eba2     BB 78 BC 78 
2eba6     BD 78 BB 78 
2ebaa     BC 78 BB 78 
2ebae     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2ebb2     BC 78 BC 78 
2ebb6     BC 78 BC 78 
2ebba     BB 78 BC 78 
2ebbe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ebc2     BC 78 BB 78 
2ebc6     BB 78 BC 78 
2ebca     BC 78 BB 78 
2ebce     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
2ebd2     22 8C AF 84 
2ebd6     48 87 43 87 
2ebda     44 87 43 87 
2ebde     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
2ebe2     43 87 42 87 
2ebe6     43 87 43 87 
2ebea     44 87 43 87 
2ebee     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2ebf2     43 87 43 87 
2ebf6     44 87 44 87 
2ebfa     43 87 43 87 
2ebfe     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2ec02     43 87 43 87 
2ec06     43 87 43 87 
2ec0a     44 87 43 87 
2ec0e     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
2ec12     9F 8B D6 77 
2ec16     16 7C B3 78 
2ec1a     BC 78 BB 78 
2ec1e     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2ec22     BB 78 BC 78 
2ec26     BB 78 BC 78 
2ec2a     BC 78 BC 78 
2ec2e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2ec32     BC 78 BB 78 
2ec36     BB 78 BC 78 
2ec3a     BB 78 BC 78 
2ec3e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2ec42     BB 78 BB 78 
2ec46     BC 78 BC 78 
2ec4a     BC 78 BB 78 
2ec4e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2ec52     BC 78 BC 78 
2ec56     BC 78 BD 78 
2ec5a     BB 78 BC 78 
2ec5e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
2ec62     BC 78 BC 78 
2ec66     BC 78 BB 78 
2ec6a     BC 78 BC 78 
2ec6e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2ec72     A8 78 54 7E 
2ec76     F4 83 17 82 
2ec7a     50 87 43 87 
2ec7e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
2ec82     44 87 43 87 
2ec86     44 87 43 87 
2ec8a     43 87 44 87 
2ec8e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2ec92     43 87 28 87 
2ec96     20 85 CF 7A 
2ec9a     70 7D AD 78 
2ec9e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
2eca2     BB 78 BC 78 
2eca6     BC 78 BC 78 
2ecaa     BB 78 BB 78 
2ecae     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
2ecb2     BB 78 B2 78 
2ecb6     9A 7C CF 7A 
2ecba     4A 87 0D 87 
2ecbe     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
2ecc2     43 87 44 87 
2ecc6     43 87 44 87 
2ecca     43 87 43 87 
2ecce     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
2ecd2     44 87 43 87 
2ecd6     28 87 51 85 
2ecda     11 7A 1E 7D 
2ecde     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
2ece2     BC 78 BB 78 
2ece6     BC 78 BC 78 
2ecea     BC 78 BC 78 
2ecee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2ecf2     BB 78 BC 78 
2ecf6     BB 78 BC 78 
2ecfa     BC 78 BC 78 
2ecfe     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2ed02     BB 78 BC 78 
2ed06     BC 78 BC 78 
2ed0a     BD 78 BB 78 
2ed0e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
2ed12     BC 78 BB 78 
2ed16     BC 78 BC 78 
2ed1a     BC 78 BB 78 
2ed1e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ed22     BC 78 BC 78 
2ed26     BC 78 BC 78 
2ed2a     BB 78 BC 78 
2ed2e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ed32     BC 78 BD 78 
2ed36     BC 78 BC 78 
2ed3a     BC 78 BB 78 
2ed3e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ed42     BC 78 BB 78 
2ed46     BB 78 BC 78 
2ed4a     BC 78 BB 78 
2ed4e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2ed52     BB 78 BB 78 
2ed56     BB 78 BC 78 
2ed5a     B6 78 48 7D 
2ed5e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
2ed62     56 87 43 87 
2ed66     42 87 44 87 
2ed6a     44 87 43 87 
2ed6e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2ed72     43 87 44 87 
2ed76     43 87 44 87 
2ed7a     4C 87 7E 83 
2ed7e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
2ed82     F7 78 BC 78 
2ed86     BC 78 BB 78 
2ed8a     BB 78 BC 78 
2ed8e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2ed92     BC 78 BB 78 
2ed96     BC 78 BC 78 
2ed9a     BB 78 BC 78 
2ed9e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2eda2     BB 78 BC 78 
2eda6     BC 78 BC 78 
2edaa     BC 78 BB 78 
2edae     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2edb2     BC 78 BC 78 
2edb6     BC 78 BC 78 
2edba     BC 78 BB 78 
2edbe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2edc2     BC 78 BB 78 
2edc6     BB 78 BC 78 
2edca     BC 78 BB 78 
2edce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2edd2     BC 78 BC 78 
2edd6     BB 78 BC 78 
2edda     BC 78 BC 78 
2edde     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
2ede2     73 32 00 04 
2ede6     00 00 10 00 
2edea     00 00 00 00 
2edee     00 00 00 00 | atari12 file "atari12.s2"
2edf2     00 6D 00 6D 
2edf6     00 6D 00 6D 
2edfa     00 6D 00 6D 
2edfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee02     00 6D 00 6D 
2ee06     00 6D 00 6D 
2ee0a     00 6D 00 6D 
2ee0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee12     00 6D 00 6D 
2ee16     00 6D 00 6D 
2ee1a     00 6D 00 6D 
2ee1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee22     00 6D 00 6D 
2ee26     00 6D 00 6D 
2ee2a     00 6D 00 6D 
2ee2e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee32     00 6D 00 6D 
2ee36     00 6D 00 6D 
2ee3a     00 6D 00 6D 
2ee3e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
2ee42     00 6C 00 6C 
2ee46     00 6C 00 6C 
2ee4a     00 6C 00 6C 
2ee4e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ee52     00 6C 00 6C 
2ee56     00 6C 00 6C 
2ee5a     00 6C 00 6C 
2ee5e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ee62     00 6C 00 6C 
2ee66     00 6C 00 6C 
2ee6a     00 6C 00 6C 
2ee6e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ee72     00 6C 00 6C 
2ee76     00 6C 00 6C 
2ee7a     00 6C 00 6C 
2ee7e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ee82     00 6C 00 6C 
2ee86     00 6C 00 6C 
2ee8a     00 6C 00 6C 
2ee8e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ee92     00 6C 00 6C 
2ee96     00 6C 00 6C 
2ee9a     00 6C 00 6C 
2ee9e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eea2     00 6C 00 6C 
2eea6     00 6C 00 6C 
2eeaa     00 6C 00 6C 
2eeae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eeb2     00 6C 00 6C 
2eeb6     00 6C 00 6C 
2eeba     00 6C 00 6C 
2eebe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eec2     00 6C 00 6C 
2eec6     00 6C 00 6C 
2eeca     00 6C 00 6C 
2eece     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eed2     00 6C 00 6C 
2eed6     00 6C 00 6C 
2eeda     00 6C 00 6C 
2eede     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eee2     00 6C 00 6C 
2eee6     00 6C 00 6C 
2eeea     00 6C 00 6C 
2eeee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2eef2     00 6C 00 6B 
2eef6     00 6B 00 6B 
2eefa     00 6B 00 6B 
2eefe     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef02     00 6B 00 6B 
2ef06     00 6B 00 6B 
2ef0a     00 6B 00 6B 
2ef0e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef12     00 6B 00 6B 
2ef16     00 6B 00 6B 
2ef1a     00 6B 00 6B 
2ef1e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef22     00 6B 00 6B 
2ef26     00 6B 00 6B 
2ef2a     00 6B 00 6B 
2ef2e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef32     00 6B 00 6B 
2ef36     00 6B 00 6B 
2ef3a     00 6B 00 6B 
2ef3e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef42     00 6B 00 6B 
2ef46     00 6B 00 6B 
2ef4a     00 6B 00 6B 
2ef4e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef52     00 6B 00 6B 
2ef56     00 6B 00 6B 
2ef5a     00 6B 00 6B 
2ef5e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef62     00 6B 00 6B 
2ef66     00 6B 00 6B 
2ef6a     00 6B 00 6B 
2ef6e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef72     00 6B 00 6B 
2ef76     00 6B 00 6B 
2ef7a     00 6B 00 6B 
2ef7e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ef82     00 6B 00 6B 
2ef86     00 6B 00 6B 
2ef8a     00 6A 00 9D 
2ef8e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
2ef92     00 9E 00 9E 
2ef96     00 9E 00 9E 
2ef9a     00 9E 00 9E 
2ef9e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2efa2     00 9E 00 9E 
2efa6     00 9E 00 9E 
2efaa     00 9E 00 9E 
2efae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2efb2     00 9E 00 9E 
2efb6     00 9E 00 9E 
2efba     00 9E 00 9E 
2efbe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2efc2     00 9E 00 9E 
2efc6     00 9E 00 9E 
2efca     00 9E 00 9E 
2efce     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2efd2     00 9E 00 9E 
2efd6     00 9E 00 9E 
2efda     00 9E 00 9E 
2efde     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2efe2     00 9E 00 9E 
2efe6     00 9E 00 9E 
2efea     00 9E 00 9E 
2efee     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2eff2     00 9E 00 9E 
2eff6     00 9E 00 9E 
2effa     00 9E 00 9E 
2effe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f002     00 9E 00 9E 
2f006     00 9E 00 9E 
2f00a     00 9E 00 9E 
2f00e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2f012     00 9E 00 9E 
2f016     00 9E 00 9E 
2f01a     00 9E 00 9E 
2f01e     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
2f022     00 9F 00 9F 
2f026     00 9F 00 9F 
2f02a     00 9F 00 9F 
2f02e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f032     00 9F 00 9F 
2f036     00 9F 00 9F 
2f03a     00 9F 00 9F 
2f03e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f042     00 9F 00 9F 
2f046     00 9F 00 9F 
2f04a     00 9F 00 9F 
2f04e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f052     00 9F 00 9F 
2f056     00 9F 00 9F 
2f05a     00 9F 00 9F 
2f05e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f062     00 9F 00 9F 
2f066     00 9F 00 9F 
2f06a     00 9F 00 9F 
2f06e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f072     00 9F 00 9F 
2f076     00 9F 00 9F 
2f07a     00 9F 00 9F 
2f07e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f082     00 9F 00 9F 
2f086     00 9F 00 9F 
2f08a     00 9F 00 9F 
2f08e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f092     00 9F 00 9F 
2f096     00 9F 00 9F 
2f09a     00 9F 00 9F 
2f09e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0a2     00 9F 00 9F 
2f0a6     00 9F 00 9F 
2f0aa     00 9F 00 9F 
2f0ae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0b2     00 9F 00 9F 
2f0b6     00 9F 00 9F 
2f0ba     00 9F 00 9F 
2f0be     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0c2     00 9F 00 9F 
2f0c6     00 9F 00 9F 
2f0ca     00 9F 00 9F 
2f0ce     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0d2     00 9F 00 9F 
2f0d6     00 9F 00 9F 
2f0da     00 9F 00 9F 
2f0de     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2f0e2     00 9F 00 9F 
2f0e6     00 9F 00 A0 
2f0ea     00 A0 00 A0 
2f0ee     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f0f2     00 A0 00 A0 
2f0f6     00 A0 00 A0 
2f0fa     00 A0 00 A0 
2f0fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f102     00 A0 00 A0 
2f106     00 A0 00 A0 
2f10a     00 A0 00 A0 
2f10e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f112     00 A0 00 A0 
2f116     00 A0 00 A0 
2f11a     00 A0 00 A0 
2f11e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f122     00 A0 00 A0 
2f126     00 A0 00 A0 
2f12a     00 A0 00 A0 
2f12e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f132     00 A0 00 A0 
2f136     00 A0 00 A0 
2f13a     00 A0 00 A0 
2f13e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f142     00 A0 00 A0 
2f146     00 A0 00 A0 
2f14a     00 A0 00 A0 
2f14e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f152     00 A0 00 A0 
2f156     00 A0 00 A0 
2f15a     00 A0 00 A0 
2f15e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f162     00 A0 00 A0 
2f166     00 A0 00 A0 
2f16a     00 A0 00 A0 
2f16e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f172     00 A0 00 A0 
2f176     00 A0 00 A0 
2f17a     00 A0 00 A0 
2f17e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f182     00 A0 00 A0 
2f186     00 A0 00 A0 
2f18a     00 A0 00 A0 
2f18e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f192     00 A0 00 A0 
2f196     00 A0 00 A0 
2f19a     00 A0 00 A0 
2f19e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f1a2     00 A0 00 A0 
2f1a6     00 A0 00 A0 
2f1aa     00 A0 00 A0 
2f1ae     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
2f1b2     00 6D 00 6D 
2f1b6     00 6D 00 6D 
2f1ba     00 6D 00 6D 
2f1be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f1c2     00 6D 00 6D 
2f1c6     00 6D 00 6D 
2f1ca     00 6D 00 6D 
2f1ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f1d2     00 6D 00 6D 
2f1d6     00 6D 00 6D 
2f1da     00 6D 00 6D 
2f1de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f1e2     00 6D 00 6D 
2f1e6     00 6D 00 6D 
2f1ea     00 6D 00 6D 
2f1ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f1f2     00 6D 00 6D 
2f1f6     00 6D 00 6D 
2f1fa     00 6D 00 6D 
2f1fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f202     00 6D 00 6D 
2f206     00 6D 00 6D 
2f20a     00 6D 00 6D 
2f20e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f212     00 6D 00 6D 
2f216     00 6D 00 6D 
2f21a     00 6D 00 6D 
2f21e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f222     00 6D 00 6D 
2f226     00 6D 00 6D 
2f22a     00 6D 00 6D 
2f22e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f232     00 6D 00 6D 
2f236     00 A0 00 A0 
2f23a     00 A0 00 A0 
2f23e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f242     00 A0 00 A0 
2f246     00 A0 00 A0 
2f24a     00 A0 00 A0 
2f24e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f252     00 A0 00 A0 
2f256     00 A0 00 A0 
2f25a     00 A0 00 A0 
2f25e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f262     00 A0 00 A0 
2f266     00 A0 00 A0 
2f26a     00 A0 00 A0 
2f26e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f272     00 A0 00 A0 
2f276     00 A0 00 A0 
2f27a     00 A0 00 A0 
2f27e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f282     00 A0 00 A0 
2f286     00 A0 00 A0 
2f28a     00 A0 00 A0 
2f28e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f292     00 A0 00 A0 
2f296     00 A0 00 A0 
2f29a     00 A0 00 A0 
2f29e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2a2     00 A0 00 A0 
2f2a6     00 A0 00 A0 
2f2aa     00 A0 00 A0 
2f2ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f2b2     00 A0 00 A0 
2f2b6     00 A0 00 A0 
2f2ba     00 A0 00 A0 
2f2be     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
2f2c2     00 6D 00 6D 
2f2c6     00 6D 00 6D 
2f2ca     00 6D 00 6D 
2f2ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f2d2     00 6D 00 6D 
2f2d6     00 6D 00 6D 
2f2da     00 6D 00 6D 
2f2de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f2e2     00 6D 00 6D 
2f2e6     00 6D 00 6D 
2f2ea     00 6D 00 6D 
2f2ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f2f2     00 6D 00 6D 
2f2f6     00 6D 00 6D 
2f2fa     00 6D 00 6D 
2f2fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f302     00 6D 00 6D 
2f306     00 6D 00 6D 
2f30a     00 6D 00 6D 
2f30e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f312     00 6D 00 6D 
2f316     00 6D 00 6D 
2f31a     00 6D 00 6D 
2f31e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f322     00 6D 00 6D 
2f326     00 6D 00 6D 
2f32a     00 6D 00 6D 
2f32e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f332     00 6D 00 6D 
2f336     00 6D 00 6D 
2f33a     00 6D 00 6D 
2f33e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f342     00 6D 00 6D 
2f346     00 6C 00 A0 
2f34a     00 9F 00 A0 
2f34e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
2f352     00 A0 00 A0 
2f356     00 A0 00 A0 
2f35a     00 A0 00 A0 
2f35e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f362     00 A0 00 A0 
2f366     00 A0 00 A0 
2f36a     00 A0 00 A0 
2f36e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f372     00 A0 00 A0 
2f376     00 A0 00 A0 
2f37a     00 A0 00 A0 
2f37e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f382     00 A0 00 A0 
2f386     00 A0 00 A0 
2f38a     00 A0 00 A0 
2f38e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f392     00 A0 00 A0 
2f396     00 A0 00 A0 
2f39a     00 A0 00 A0 
2f39e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3a2     00 A0 00 A0 
2f3a6     00 A0 00 A0 
2f3aa     00 A0 00 A0 
2f3ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3b2     00 A0 00 A0 
2f3b6     00 A0 00 A0 
2f3ba     00 A0 00 A0 
2f3be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3c2     00 A0 00 A0 
2f3c6     00 A0 00 A0 
2f3ca     00 A0 00 A0 
2f3ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3d2     00 A0 00 A0 
2f3d6     00 A0 00 A0 
2f3da     00 A0 00 A0 
2f3de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3e2     00 A0 00 A0 
2f3e6     00 A0 00 A0 
2f3ea     00 A0 00 A0 
2f3ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f3f2     00 A0 00 A0 
2f3f6     00 A0 00 A0 
2f3fa     00 A0 00 A0 
2f3fe     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
2f402     00 A1 00 A1 
2f406     00 A1 00 A1 
2f40a     00 A1 00 A1 
2f40e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f412     00 A1 00 A1 
2f416     00 A1 00 A1 
2f41a     00 A1 00 A1 
2f41e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f422     00 A1 00 A1 
2f426     00 A1 00 A1 
2f42a     00 A1 00 A1 
2f42e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f432     00 A1 00 A1 
2f436     00 A1 00 A1 
2f43a     00 A1 00 A1 
2f43e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f442     00 A1 00 A1 
2f446     00 A1 00 A1 
2f44a     00 A1 00 A1 
2f44e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2f452     00 A1 00 A1 
2f456     00 A1 00 A1 
2f45a     00 6E 00 6E 
2f45e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f462     00 6E 00 6E 
2f466     00 6E 00 6E 
2f46a     00 6E 00 6E 
2f46e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f472     00 6E 00 6E 
2f476     00 6E 00 6E 
2f47a     00 6E 00 6E 
2f47e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f482     00 6E 00 6E 
2f486     00 6E 00 6E 
2f48a     00 6E 00 6E 
2f48e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2f492     00 6E 00 6D 
2f496     00 6D 00 6D 
2f49a     00 6D 00 6D 
2f49e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4a2     00 6D 00 6D 
2f4a6     00 6D 00 6D 
2f4aa     00 6D 00 6D 
2f4ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4b2     00 6D 00 6D 
2f4b6     00 6D 00 6D 
2f4ba     00 6D 00 6D 
2f4be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4c2     00 6D 00 6D 
2f4c6     00 6D 00 6D 
2f4ca     00 6D 00 6D 
2f4ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4d2     00 6D 00 6D 
2f4d6     00 6D 00 6D 
2f4da     00 6D 00 6D 
2f4de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4e2     00 6D 00 6D 
2f4e6     00 6D 00 6D 
2f4ea     00 6D 00 6D 
2f4ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f4f2     00 6D 00 6D 
2f4f6     00 6D 00 6D 
2f4fa     00 6D 00 6D 
2f4fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f502     00 6D 00 6D 
2f506     00 6D 00 6D 
2f50a     00 6D 00 6D 
2f50e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f512     00 6D 00 6D 
2f516     00 6D 00 6D 
2f51a     00 6D 00 6D 
2f51e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f522     00 6D 00 6D 
2f526     00 6D 00 6D 
2f52a     00 6D 00 6D 
2f52e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f532     00 6D 00 6D 
2f536     00 6D 00 6D 
2f53a     00 6D 00 6D 
2f53e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f542     00 6D 00 6D 
2f546     00 6C 00 6C 
2f54a     00 6C 00 6C 
2f54e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f552     00 6C 00 6C 
2f556     00 6C 00 6C 
2f55a     00 6C 00 6C 
2f55e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f562     00 6C 00 6C 
2f566     00 6C 00 6C 
2f56a     00 9D 00 9F 
2f56e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
2f572     00 9F 00 9F 
2f576     00 9F 00 9F 
2f57a     00 A0 00 A0 
2f57e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f582     00 A0 00 A0 
2f586     00 A0 00 A0 
2f58a     00 A0 00 A0 
2f58e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f592     00 A0 00 A0 
2f596     00 A0 00 A0 
2f59a     00 A0 00 A0 
2f59e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5a2     00 A0 00 A0 
2f5a6     00 A0 00 A0 
2f5aa     00 A0 00 A0 
2f5ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5b2     00 A0 00 A0 
2f5b6     00 A0 00 A0 
2f5ba     00 A0 00 A0 
2f5be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5c2     00 A0 00 A0 
2f5c6     00 A0 00 A0 
2f5ca     00 A0 00 A0 
2f5ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5d2     00 A0 00 A0 
2f5d6     00 A0 00 A0 
2f5da     00 A0 00 A0 
2f5de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5e2     00 A0 00 A0 
2f5e6     00 A0 00 A0 
2f5ea     00 A0 00 A0 
2f5ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f5f2                 | 
2f5f2     00 00       |              	org
2f5f4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2f5f8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2f5fc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2f600 003             | 
2f600 003 00 30 04 F6 |                 mov     psramaddr,#0
2f604 004             | 
2f604 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2f608 005 20 00 00 FF 
2f60c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2f610 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2f614 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2f618 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2f61c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2f620 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2f624 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2f628 00d             | 
2f628 00d 20 00 00 FF 
2f62c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2f630 00f E0 03 00 FF 
2f634 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2f638 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2f63c 012             | 
2f63c 012             |                 
2f63c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2f640 013             |     
2f640 013 01 2C 60 FD |                 cogid 	t11				' get id
2f644 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2f648 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2f64c 016             | 
2f64c 016 00 00 00 00 | t11 		long 	0
2f650 017 00 FF 07 00 | mailbox 	long 	$7FF00
2f654 018 00 00 00 00 | psramaddr 	long 	0
2f658 019 00 00 00 00 | pslockval	long 	0
2f65c 01a 00 00 00 00 | cmd             long    0
2f660 01b 00 00 00 00 | buf1            long    0
2f664 01c 00 40 00 00 | buf2            long    16384
2f668 01d 6C F6 02 00 | 	long	@@@_dat_ + 12624
2f66c 01e 50 32 20 52 
2f670 01f 65 74 72 6F 
2f674 020 6D 61 63 68 
2f678 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2f67c 022 42 41 53 49 
2f680 023 43 20 76 65 
2f684 024 72 73 69 6F 
2f688 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2f68c 026 32 36 00 00 | 	byte	$32, $36, $00, $00
2f690 027             | 	alignl
2f690 027             | _hg010b_spin2_dat_
2f690 027             | 
2f690 027 00 00 00 00 
2f694 028 00 00 00 00 
2f698 029 00 00 00 00 
2f69c 02a 00 00 00 00 
2f6a0 02b 00 00 00    | vga_font       file "vgafont.def"
2f6a3 02b 7E 81 A5 81 
2f6a7 02c 81 BD 99 81 
2f6ab 02d 81 7E 00 00 
2f6af 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2f6b3 02f 7E FF DB FF 
2f6b7 030 FF C3 E7 FF 
2f6bb 031 FF 7E 00 00 
2f6bf 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2f6c3 033 00 36 7F 7F 
2f6c7 034 7F 7F 3E 1C 
2f6cb 035 08 00 00 00 
2f6cf 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2f6d3 037 00 08 1C 3E 
2f6d7 038 7F 3E 1C 08 
2f6db 039 00 00 00 00 
2f6df 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2f6e3 03b 18 3C 3C E7 
2f6e7 03c E7 E7 18 18 
2f6eb 03d 3C 00 00 00 
2f6ef 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2f6f3 03f 18 3C 7E FF 
2f6f7 040 FF 7E 18 18 
2f6fb 041 3C 00 00 00 
2f6ff 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2f703 043 00 00 00 18 
2f707 044 3C 3C 18 00 
2f70b 045 00 00 00 00 
2f70f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2f713 047 FF FF FF E7 
2f717 048 C3 C3 E7 FF 
2f71b 049 FF FF FF FF 
2f71f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2f723 04b 00 00 3C 66 
2f727 04c 42 42 66 3C 
2f72b 04d 00 00 00 00 
2f72f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2f733 04f FF FF C3 99 
2f737 050 BD BD 99 C3 
2f73b 051 FF FF FF FF 
2f73f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2f743 053 78 70 58 4C 
2f747 054 1E 33 33 33 
2f74b 055 33 1E 00 00 
2f74f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2f753 057 3C 66 66 66 
2f757 058 66 3C 18 7E 
2f75b 059 18 18 00 00 
2f75f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2f763 05b FC CC FC 0C 
2f767 05c 0C 0C 0C 0E 
2f76b 05d 0F 07 00 00 
2f76f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2f773 05f FE C6 FE C6 
2f777 060 C6 C6 C6 E6 
2f77b 061 E7 67 03 00 
2f77f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2f783 063 18 18 DB 3C 
2f787 064 E7 3C DB 18 
2f78b 065 18 00 00 00 
2f78f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2f793 067 03 07 0F 1F 
2f797 068 7F 1F 0F 07 
2f79b 069 03 01 00 00 
2f79f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2f7a3 06b 60 70 78 7C 
2f7a7 06c 7F 7C 78 70 
2f7ab 06d 60 40 00 00 
2f7af 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2f7b3 06f 18 3C 7E 18 
2f7b7 070 18 18 7E 3C 
2f7bb 071 18 00 00 00 
2f7bf 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2f7c3 073 66 66 66 66 
2f7c7 074 66 66 66    | 	byte	$66[7]
2f7ca 075 00 66 66 00 
2f7ce 076 00 00 00 00 
2f7d2 077 00 FE DB DB 
2f7d6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2f7da 079 D8 D8 D8 00 
2f7de 07a 00 00 00 3E 
2f7e2 07b 63 06 1C 36 
2f7e6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2f7ea 07d 30 63 3E 00 
2f7ee 07e 00 00 00 00 
2f7f2 07f 00 00 00 00 
2f7f6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2f7fa 081 7F 7F 7F 00 
2f7fe 082 00 00 00 00 
2f802 083 00 18 3C 7E 
2f806 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2f80a 085 3C 18 7E 00 
2f80e 086 00 00 00 00 
2f812 087 00 18 3C 7E 
2f816 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2f81a 089 18 18 18 00 
2f81e 08a 00 00 00 00 
2f822 08b 00 18 18 18 
2f826 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f82a 08d 7E 3C 18 00 
2f82e 08e 00 00 00 00 
2f832 08f 00 00 00 18 
2f836 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2f83a 091 00 00 00 00 
2f83e 092 00 00 00 00 
2f842 093 00 00 00    | 	byte	$00[11]
2f845 094 0C 06 7F 06 
2f849 095 0C 00 00 00 
2f84d 096 00 00 00 00 
2f851 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f855 098 00 03 03 03 
2f859 099 7F 00 00 00 
2f85d 09a 00 00 00 00 
2f861 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f865 09c 14 36 7F 36 
2f869 09d 14 00 00 00 
2f86d 09e 00 00 00 00 
2f871 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2f875 0a0 1C 1C 3E 3E 
2f879 0a1 7F 7F 00 00 
2f87d 0a2 00 00 00 00 
2f881 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2f885 0a4 7F 3E 3E 1C 
2f889 0a5 1C 08 00 00 
2f88d 0a6 00 00 00 00 
2f891 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f895 0a8 00 00 00 00 
2f899 0a9 00 00 00 00 
2f89d 0aa 00 00 00 00 
2f8a1 0ab 00 00       | 	byte	$00[14]
2f8a3 0ab 18 3C 3C 3C 
2f8a7 0ac 18 18 18 00 
2f8ab 0ad 18 18 00 00 
2f8af 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2f8b3 0af 66 24 00 00 
2f8b7 0b0 00 00 00 00 
2f8bb 0b1 00 00 00 00 
2f8bf 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f8c3 0b3 00 36 36 7F 
2f8c7 0b4 36 36 36 7F 
2f8cb 0b5 36 36 00 00 
2f8cf 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2f8d3 0b7 3E 63 43 03 
2f8d7 0b8 3E 60 60 61 
2f8db 0b9 63 3E 18 18 
2f8df 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2f8e3 0bb 00 00 43 63 
2f8e7 0bc 30 18 0C 06 
2f8eb 0bd 63 61 00 00 
2f8ef 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2f8f3 0bf 1C 36 36 1C 
2f8f7 0c0 6E 3B 33 33 
2f8fb 0c1 33 6E 00 00 
2f8ff 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2f903 0c3 0C 0C 0C 06 
2f907 0c4 00 00 00 00 
2f90b 0c5 00 00 00 00 
2f90f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f913 0c7 30 18 0C 0C 
2f917 0c8 0C 0C 0C 0C 
2f91b 0c9 18 30 00 00 
2f91f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2f923 0cb 0C 18 30 30 
2f927 0cc 30 30 30 30 
2f92b 0cd 18 0C 00 00 
2f92f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2f933 0cf 00 00 00 66 
2f937 0d0 3C FF 3C 66 
2f93b 0d1 00 00 00 00 
2f93f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2f943 0d3 00 00 00 18 
2f947 0d4 18 7E 18 18 
2f94b 0d5 00 00 00 00 
2f94f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2f953 0d7 00 00 00 00 
2f957 0d8 00 00 00 00 | 	byte	$00[8]
2f95b 0d9 18 18 18 0C 
2f95f 0da 00 00 00 00 
2f963 0db 00 00 00 00 
2f967 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2f96b 0dd 00 00 00 00 
2f96f 0de 00 00 00 00 
2f973 0df 00 00 00 00 
2f977 0e0 00 00 00 00 | 	byte	$00[16]
2f97b 0e1 18 18 00 00 
2f97f 0e2 00 00 00 00 
2f983 0e3 00 00 40 60 
2f987 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2f98b 0e5 03 01 00 00 
2f98f 0e6 00 00 00 00 
2f993 0e7 1C 36 63 63 
2f997 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2f99b 0e9 36 1C 00 00 
2f99f 0ea 00 00 00 00 
2f9a3 0eb 18 1C 1E 18 
2f9a7 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2f9ab 0ed 18 7E 00 00 
2f9af 0ee 00 00 00 00 
2f9b3 0ef 3E 63 60 30 
2f9b7 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2f9bb 0f1 63 7F 00 00 
2f9bf 0f2 00 00 00 00 
2f9c3 0f3 3E 63 60 60 
2f9c7 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2f9cb 0f5 63 3E 00 00 
2f9cf 0f6 00 00 00 00 
2f9d3 0f7 30 38 3C 36 
2f9d7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2f9db 0f9 30 78 00 00 
2f9df 0fa 00 00 00 00 
2f9e3 0fb 7F 03 03 03 
2f9e7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2f9eb 0fd 63 3E 00 00 
2f9ef 0fe 00 00 00 00 
2f9f3 0ff 1C 06 03 03 
2f9f7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2f9fb 101 63 3E 00 00 
2f9ff 102 00 00 00 00 
2fa03 103 7F 63 60 60 
2fa07 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2fa0b 105 0C 0C 00 00 
2fa0f 106 00 00 00 00 
2fa13 107 3E 63 63 63 
2fa17 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2fa1b 109 63 3E 00 00 
2fa1f 10a 00 00 00 00 
2fa23 10b 3E 63 63 63 
2fa27 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2fa2b 10d 30 1E 00 00 
2fa2f 10e 00 00 00 00 
2fa33 10f 00 00 00 18 
2fa37 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2fa3b 111 18 18 00 00 
2fa3f 112 00 00 00 00 
2fa43 113 00 00 00 18 
2fa47 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2fa4b 115 18 18 0C 00 
2fa4f 116 00 00 00 00 
2fa53 117 00 60 30 18 
2fa57 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2fa5b 119 30 60 00 00 
2fa5f 11a 00 00 00 00 
2fa63 11b 00 00 00 7E 
2fa67 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2fa6b 11d 00 00 00 00 
2fa6f 11e 00 00 00 00 
2fa73 11f 00          | 	byte	$00[9]
2fa74 120 06 0C 18 30 
2fa78 121 60 30 18 0C 
2fa7c 122 06 00 00 00 
2fa80 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2fa84 124 63 63 30 18 
2fa88 125 18 18 00 18 
2fa8c 126 18 00 00 00 
2fa90 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2fa94 128 3E 63 63 7B 
2fa98 129 7B 7B 3B 03 
2fa9c 12a 3E 00 00 00 
2faa0 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2faa4 12c 1C 36 63 63 
2faa8 12d 7F 63 63 63 
2faac 12e 63 00 00 00 
2fab0 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2fab4 130 66 66 66 3E 
2fab8 131 66 66 66 66 
2fabc 132 3F 00 00 00 
2fac0 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2fac4 134 66 43 03 03 
2fac8 135 03 03 43 66 
2facc 136 3C 00 00 00 
2fad0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2fad4 138 36 66 66 66 
2fad8 139 66 66 66 36 
2fadc 13a 1F 00 00 00 
2fae0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2fae4 13c 66 46 16 1E 
2fae8 13d 16 06 46 66 
2faec 13e 7F 00 00 00 
2faf0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2faf4 140 66 46 16 1E 
2faf8 141 16 06 06 06 
2fafc 142 0F 00 00 00 
2fb00 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2fb04 144 66 43 03 03 
2fb08 145 7B 63 63 66 
2fb0c 146 5C 00 00 00 
2fb10 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2fb14 148 63 63 63 7F 
2fb18 149 63 63 63 63 
2fb1c 14a 63 00 00 00 
2fb20 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2fb24 14c 18 18 18 18 
2fb28 14d 18 18 18 18 | 	byte	$18[8]
2fb2c 14e 3C 00 00 00 
2fb30 14f 00 00 00 78 
2fb34 150 30 30 30 30 
2fb38 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2fb3c 152 1E 00 00 00 
2fb40 153 00 00 00 67 
2fb44 154 66 66 36 1E 
2fb48 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2fb4c 156 67 00 00 00 
2fb50 157 00 00 00 0F 
2fb54 158 06 06 06 06 
2fb58 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2fb5c 15a 7F 00 00 00 
2fb60 15b 00 00 00 63 
2fb64 15c 77 7F 7F 6B 
2fb68 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2fb6c 15e 63 00 00 00 
2fb70 15f 00 00 00 63 
2fb74 160 67 6F 7F 7B 
2fb78 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2fb7c 162 63 00 00 00 
2fb80 163 00 00 00 3E 
2fb84 164 63 63 63 63 
2fb88 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2fb8c 166 3E 00 00 00 
2fb90 167 00 00 00 3F 
2fb94 168 66 66 66 3E 
2fb98 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2fb9c 16a 0F 00 00 00 
2fba0 16b 00 00 00 3E 
2fba4 16c 63 63 63 63 
2fba8 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2fbac 16e 3E 30 70 00 
2fbb0 16f 00 00 00 3F 
2fbb4 170 66 66 66 3E 
2fbb8 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2fbbc 172 67 00 00 00 
2fbc0 173 00 00 00 3E 
2fbc4 174 63 63 06 1C 
2fbc8 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2fbcc 176 3E 00 00 00 
2fbd0 177 00 00 00 7E 
2fbd4 178 7E 5A 18 18 
2fbd8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2fbdc 17a 3C 00 00 00 
2fbe0 17b 00 00 00 63 
2fbe4 17c 63 63 63 63 
2fbe8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2fbec 17e 3E 00 00 00 
2fbf0 17f 00 00 00 63 
2fbf4 180 63 63 63 63 
2fbf8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2fbfc 182 08 00 00 00 
2fc00 183 00 00 00 63 
2fc04 184 63 63 63 6B 
2fc08 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2fc0c 186 36 00 00 00 
2fc10 187 00 00 00 63 
2fc14 188 63 36 3E 1C 
2fc18 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2fc1c 18a 63 00 00 00 
2fc20 18b 00 00 00 66 
2fc24 18c 66 66 66 3C 
2fc28 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2fc2c 18e 3C 00 00 00 
2fc30 18f 00 00 00 7F 
2fc34 190 63 61 30 18 
2fc38 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2fc3c 192 7F 00 00 00 
2fc40 193 00 00 00 3C 
2fc44 194 0C 0C 0C 0C 
2fc48 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2fc4c 196 3C 00 00 00 
2fc50 197 00 00 00 00 
2fc54 198 01 03 07 0E 
2fc58 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2fc5c 19a 40 00 00 00 
2fc60 19b 00 00 00 3C 
2fc64 19c 30 30 30 30 
2fc68 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2fc6c 19e 3C 00 00 00 
2fc70 19f 1C 36 00 00 
2fc74 1a0 00 00 00 00 
2fc78 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fc7c 1a2 00 00 00 00 
2fc80 1a3 00 00 00 00 
2fc84 1a4 00 00 00 00 
2fc88 1a5 00 00 00 00 
2fc8c 1a6 00          | 	byte	$00[17]
2fc8d 1a6 FF 00 00 0C 
2fc91 1a7 18 00 00 00 
2fc95 1a8 00 00 00 00 
2fc99 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fc9d 1aa 00 00 00 00 
2fca1 1ab 00 00 00 00 
2fca5 1ac 00          | 	byte	$00[9]
2fca6 1ac 1E 30 3E 33 
2fcaa 1ad 33 33 6E 00 
2fcae 1ae 00 00 00 00 
2fcb2 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2fcb6 1b0 1E 36 66 66 
2fcba 1b1 66 66 3E 00 
2fcbe 1b2 00 00 00 00 
2fcc2 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fcc6 1b4 3E 63 03 03 
2fcca 1b5 03 63 3E 00 
2fcce 1b6 00 00 00 00 
2fcd2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2fcd6 1b8 3C 36 33 33 
2fcda 1b9 33 33 6E 00 
2fcde 1ba 00 00 00 00 
2fce2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fce6 1bc 3E 63 7F 03 
2fcea 1bd 03 63 3E 00 
2fcee 1be 00 00 00 00 
2fcf2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2fcf6 1c0 0C 1E 0C 0C 
2fcfa 1c1 0C 0C 1E 00 
2fcfe 1c2 00 00 00 00 
2fd02 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fd06 1c4 6E 33 33 33 
2fd0a 1c5 33 33 3E 30 
2fd0e 1c6 33 1E 00 00 
2fd12 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2fd16 1c8 36 6E 66 66 
2fd1a 1c9 66 66 67 00 
2fd1e 1ca 00 00 00 00 
2fd22 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2fd26 1cc 1C 18 18 18 
2fd2a 1cd 18 18 3C 00 
2fd2e 1ce 00 00 00 00 
2fd32 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2fd36 1d0 70 60 60 60 
2fd3a 1d1 60 60 60 66 
2fd3e 1d2 66 3C 00 00 
2fd42 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2fd46 1d4 66 36 1E 1E 
2fd4a 1d5 36 66 67 00 
2fd4e 1d6 00 00 00 00 
2fd52 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2fd56 1d8 18 18 18 18 
2fd5a 1d9 18 18       | 	byte	$18[6]
2fd5c 1da 3C 00 00 00 
2fd60 1db 00 00 00 00 
2fd64 1dc 00 00 37 7F 
2fd68 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2fd6c 1de 63 00 00 00 
2fd70 1df 00 00 00 00 
2fd74 1e0 00 00 3B 66 
2fd78 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2fd7c 1e2 66 00 00 00 
2fd80 1e3 00 00 00 00 
2fd84 1e4 00 00 3E 63 
2fd88 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2fd8c 1e6 3E 00 00 00 
2fd90 1e7 00 00 00 00 
2fd94 1e8 00 00 3B 66 
2fd98 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2fd9c 1ea 3E 06 06 0F 
2fda0 1eb 00 00 00 00 
2fda4 1ec 00 00 6E 33 
2fda8 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2fdac 1ee 3E 30 30 78 
2fdb0 1ef 00 00 00 00 
2fdb4 1f0 00 00 3B 6E 
2fdb8 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2fdbc 1f2 0F 00 00 00 
2fdc0 1f3 00 00 00 00 
2fdc4 1f4 00 00 3E 63 
2fdc8 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2fdcc 1f6 3E 00 00 00 
2fdd0 1f7 00 00 00 08 
2fdd4 1f8 0C 0C 3F 0C 
2fdd8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2fddc 1fa 38 00 00 00 
2fde0 1fb 00 00 00 00 
2fde4 1fc 00 00 33 33 
2fde8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2fdec 1fe 6E 00 00 00 
2fdf0 1ff 00 00 00 00 
2fdf4 200 00 00 63 63 
2fdf8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2fdfc 202 1C 00 00 00 
2fe00 203 00 00 00 00 
2fe04 204 00 00 63 63 
2fe08 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2fe0c 206 36 00 00 00 
2fe10 207 00 00 00 00 
2fe14 208 00 00 63 36 
2fe18 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2fe1c 20a 63 00 00 00 
2fe20 20b 00 00 00 00 
2fe24 20c 00 00 63 63 
2fe28 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2fe2c 20e 7E 60 30 1F 
2fe30 20f 00 00 00 00 
2fe34 210 00 00 7F 33 
2fe38 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2fe3c 212 7F 00 00 00 
2fe40 213 00 00 00 70 
2fe44 214 18 18 18 0E 
2fe48 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2fe4c 216 70 00 00 00 
2fe50 217 00 00 00 18 
2fe54 218 18 18 18 18 
2fe58 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2fe5c 21a 18 00 00 00 
2fe60 21b 00 00 00 0E 
2fe64 21c 18 18 18 70 
2fe68 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2fe6c 21e 0E 00 00 00 
2fe70 21f 6E 3B 00 00 
2fe74 220 00 00 00 00 
2fe78 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe7c 222 00 00 00 00 
2fe80 223 00 00 00 00 
2fe84 224 00 00       | 	byte	$00[10]
2fe86 224 08 1C 36 63 
2fe8a 225 63 63 7F 00 
2fe8e 226 00 00 00 00 
2fe92 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2fe96 228 03 03 03 03 
2fe9a 229 43 66 3C 18 
2fe9e 22a 30 1E 00 00 
2fea2 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2fea6 22c 33 33 33 33 
2feaa 22d 33 33       | 	byte	$33[6]
2feac 22e 6E 00 00 00 
2feb0 22f 00 00 60 30 
2feb4 230 18 00 3E 63 
2feb8 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2febc 232 3E 00 00 00 
2fec0 233 00 00 08 1C 
2fec4 234 36 00 1E 30 
2fec8 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2fecc 236 6E 00 00 00 
2fed0 237 00 00 00 00 
2fed4 238 33 00 1E 30 
2fed8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2fedc 23a 6E 00 00 00 
2fee0 23b 00 00 1C 36 
2fee4 23c 1C 00 33 33 
2fee8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2feec 23e 6E 00 00 00 
2fef0 23f 00 00 60 30 
2fef4 240 18 00 3E 63 
2fef8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2fefc 242 3E 00 00 00 
2ff00 243 00 00 00 00 
2ff04 244 00 00 3E 63 
2ff08 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2ff0c 246 3E 18 30 1E 
2ff10 247 00 00 00 1C 
2ff14 248 58 78 38 18 
2ff18 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2ff1c 24a 3C 00 00 00 
2ff20 24b 00 00 00 00 
2ff24 24c 63 00 3E 63 
2ff28 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2ff2c 24e 3E 00 00 00 
2ff30 24f 66 33 00 3E 
2ff34 250 63 63 63 63 
2ff38 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2ff3c 252 3E 00 00 00 
2ff40 253 00 00 CC 66 
2ff44 254 33 00 3E 63 
2ff48 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2ff4c 256 3E 00 00 00 
2ff50 257 00 00 18 3C 
2ff54 258 66 00 1C 18 
2ff58 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2ff5c 25a 3C 00 00 00 
2ff60 25b 30 18 00 7F 
2ff64 25c 63 61 30 18 
2ff68 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2ff6c 25e 7F 00 00 00 
2ff70 25f 00 63 00 08 
2ff74 260 1C 36 63 63 
2ff78 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2ff7c 262 63 00 00 00 
2ff80 263 30 18 00 3C 
2ff84 264 66 43 03 03 
2ff88 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2ff8c 266 3C 00 00 00 
2ff90 267 30 18 00 7F 
2ff94 268 66 46 16 1E 
2ff98 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2ff9c 26a 7F 00 00 00 
2ffa0 26b 0C 06 00 0F 
2ffa4 26c 06 06 06 06 
2ffa8 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2ffac 26e 7F 00 00 00 
2ffb0 26f 30 18 00 1C 
2ffb4 270 18 18 18 18 
2ffb8 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2ffbc 272 3C 00 00 00 
2ffc0 273 00 00 08 1C 
2ffc4 274 36 00 3E 63 
2ffc8 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2ffcc 276 3E 00 00 00 
2ffd0 277 00 00 00 00 
2ffd4 278 63 00 3E 63 
2ffd8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2ffdc 27a 3E 00 00 00 
2ffe0 27b 00 00 00 6F 
2ffe4 27c 46 26 06 06 
2ffe8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2ffec 27e 7F 00 00 00 
2fff0 27f 00 00 00 6E 
2fff4 280 4C 2C 0C 0C 
2fff8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2fffc 282 1E 00 00 00 
30000 283 30 18 00 3E 
30004 284 63 63 06 1C 
30008 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3000c 286 3E 00 00 00 
30010 287 00 00 60 30 
30014 288 18 00 3E 63 
30018 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3001c 28a 3E 00 00 00 
30020 28b 00 63 00 3E 
30024 28c 63 63 63 63 
30028 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3002c 28e 3E 00 00 00 
30030 28f 00 63 00 63 
30034 290 63 63 63 63 
30038 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3003c 292 3E 00 00 00 
30040 293 6C 38 00 7E 
30044 294 7E 5A 18 18 
30048 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3004c 296 3C 00 00 00 
30050 297 00 00 60 48 
30054 298 2C 0C 3F 0C 
30058 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3005c 29a 38 00 00 00 
30060 29b 00 00 00 0F 
30064 29c 26 36 1E 0E 
30068 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3006c 29e 7F 00 00 00 
30070 29f 00 00 00 00 
30074 2a0 00 63 36 1C 
30078 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3007c 2a2 00 00 00 00 
30080 2a3 00 00       | 	byte	$00[6]
30082 2a3 36 1C 08 00 
30086 2a4 3E 63 03 03 
3008a 2a5 03 63 3E 00 
3008e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
30092 2a7 30 18 0C 00 
30096 2a8 1E 30 3E 33 
3009a 2a9 33 33 6E 00 
3009e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
300a2 2ab 60 30 18 00 
300a6 2ac 1C 18 18 18 
300aa 2ad 18 18 3C 00 
300ae 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
300b2 2af 60 30 18 00 
300b6 2b0 3E 63 63 63 
300ba 2b1 63 63 3E 00 
300be 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
300c2 2b3 30 18 0C 00 
300c6 2b4 33 33 33 33 
300ca 2b5 33 33 6E 00 
300ce 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
300d2 2b7 00 08 1C 36 
300d6 2b8 63 63 7F 63 
300da 2b9 63 63 63 18 
300de 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
300e2 2bb 00 00 00 00 
300e6 2bc 1E 30 3E 33 
300ea 2bd 33 33 6E 18 
300ee 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
300f2 2bf 00 7F 63 61 
300f6 2c0 30 18 0C 06 
300fa 2c1 43 63 7F 00 
300fe 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
30102 2c3 36 1C 08 00 
30106 2c4 7F 33 18 0C 
3010a 2c5 06 63 7F 00 
3010e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
30112 2c7 00 7F 66 46 
30116 2c8 16 1E 16 06 
3011a 2c9 46 66 7F 18 
3011e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
30122 2cb 00 00 00 00 
30126 2cc 3E 63 7F 03 
3012a 2cd 03 63 3E 18 
3012e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
30132 2cf 00 3C 66 03 
30136 2d0 1F 03 0F 03 
3013a 2d1 03 66 3C 00 
3013e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
30142 2d3 60 30 18 00 
30146 2d4 7F 33 18 0C 
3014a 2d5 06 63 7F 00 
3014e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
30152 2d7 00 3C 66 43 
30156 2d8 03 03 03 03 
3015a 2d9 43 66 3C 00 
3015e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
30162 2db 00 00 00 00 
30166 2dc 3E 63 06 1C 
3016a 2dd 30 63 3E 18 
3016e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
30172 2df 00 00 00 00 
30176 2e0 00 00       | 	byte	$00[6]
30178 2e1 6C 36 1B 36 
3017c 2e2 6C 00 00 00 
30180 2e3 00 00 00 00 
30184 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30188 2e5 1B 36 6C 36 
3018c 2e6 1B 00 00 00 
30190 2e7 88 22 88 22 
30194 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
30198 2e9 88 22 88 22 
3019c 2ea 88 22 88 22 
301a0 2eb AA 55 AA 55 
301a4 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
301a8 2ed AA 55 AA 55 
301ac 2ee AA 55 AA 55 
301b0 2ef BB EE BB EE 
301b4 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
301b8 2f1 BB EE BB EE 
301bc 2f2 BB EE BB EE 
301c0 2f3 18 18 18 18 
301c4 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
301c8 2f5 18 18 18 18 
301cc 2f6 18 18 18 18 
301d0 2f7 18 18 18 18 
301d4 2f8 18 18 18    | 	byte	$18[15]
301d7 2f8 1F 18 18 18 
301db 2f9 18 18 18 18 
301df 2fa 18 30 18 00 
301e3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
301e7 2fc 63 7F 63 63 
301eb 2fd 63 63 00 00 
301ef 2fe 00 1C 36 00 
301f3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
301f7 300 63 7F 63 63 
301fb 301 63 63 00 00 
301ff 302 00 36 1C 00 
30203 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
30207 304 1E 16 06 46 
3020b 305 66 7F 00 00 
3020f 306 00 00 00 00 
30213 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
30217 308 1C 30 60 63 
3021b 309 63 3E 18 30 
3021f 30a 1E 6C 6C 6C 
30223 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
30227 30c 6F 6C 6C 6C 
3022b 30d 6C 6C 6C 6C 
3022f 30e 6C 6C 6C 6C 
30233 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30237 310 6C 6C 6C 6C 
3023b 311 6C 6C 6C 6C 
3023f 312 6C          | 	byte	$6c[9]
30240 313 00 00 00 00 
30244 314 00          | 	byte	$00[5]
30245 314 7F 60 6F 6C 
30249 315 6C 6C 6C 6C 
3024d 316 6C 6C 6C 6C 
30251 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30255 318 6F 60 7F 00 
30259 319 00 00 00 00 
3025d 31a 00 00 00 18 
30261 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
30265 31c 61 30 18 0C 
30269 31d 06 43 63 7F 
3026d 31e 00 00 00 00 
30271 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
30275 320 00 7F 33 18 
30279 321 0C 06 63 7F 
3027d 322 00 00 00 00 
30281 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
30285 324 00 00 1F 18 
30289 325 18 18 18 18 
3028d 326 18 18 18 18 
30291 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30295 328 18 18 F8 00 
30299 329 00 00 00 00 
3029d 32a 00 00 00 18 
302a1 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
302a5 32c 18 18 FF 00 
302a9 32d 00 00 00 00 
302ad 32e 00 00 00 00 
302b1 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
302b5 330 00 00 FF 18 
302b9 331 18 18 18 18 
302bd 332 18 18 18 18 
302c1 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
302c5 334 18 18 F8 18 
302c9 335 18 18 18 18 
302cd 336 18 18 18 00 
302d1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
302d5 338 00 00 FF 00 
302d9 339 00 00 00 00 
302dd 33a 00 00 00 18 
302e1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
302e5 33c 18 18 FF 18 
302e9 33d 18 18 18 18 
302ed 33e 18 18 18 63 
302f1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
302f5 340 36 63 63 7F 
302f9 341 63 63 63 63 
302fd 342 00 00 00 00 
30301 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
30305 344 00 1E 30 3E 
30309 345 33 33 33 6E 
3030d 346 00 00 00 6C 
30311 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
30315 348 EC 0C FC 00 
30319 349 00 00 00 00 
3031d 34a 00 00 00 00 
30321 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30325 34c FC 0C EC 6C 
30329 34d 6C 6C 6C 6C 
3032d 34e 6C 6C 6C 6C 
30331 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30335 350 EF 00 FF 00 
30339 351 00 00 00 00 
3033d 352 00 00 00 00 
30341 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30345 354 FF 00 EF 6C 
30349 355 6C 6C 6C 6C 
3034d 356 6C 6C 6C 6C 
30351 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
30355 358 EC 0C EC 6C 
30359 359 6C 6C 6C 6C 
3035d 35a 6C 6C 6C 00 
30361 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
30365 35c FF 00 FF 00 
30369 35d 00 00 00 00 
3036d 35e 00 00 00 6C 
30371 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
30375 360 EF 00 EF 6C 
30379 361 6C 6C 6C 6C 
3037d 362 6C 6C 6C 00 
30381 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
30385 364 63 3E 63 63 
30389 365 63 63 3E 63 
3038d 366 00 00 00 00 
30391 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
30395 368 30 3C 36 33 
30399 369 33 33 33 6E 
3039d 36a 00 00 00 00 
303a1 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
303a5 36c 66 66 6F 66 
303a9 36d 66 66 36 1F 
303ad 36e 00 00 00 36 
303b1 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
303b5 370 66 66 66 66 
303b9 371 66 66       | 	byte	$66[6]
303bb 371 36 1F 00 00 
303bf 372 00 00 63 00 
303c3 373 7F 66 46 16 
303c7 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
303cb 375 66 7F 00 00 
303cf 376 00 6C 38 00 
303d3 377 38 30 30 3C 
303d7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
303db 379 33 6E 00 00 
303df 37a 00 36 1C 00 
303e3 37b 63 67 6F 7F 
303e7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
303eb 37d 63 63 00 00 
303ef 37e 00 30 18 00 
303f3 37f 3C 18 18 18 
303f7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
303fb 381 18 3C 00 00 
303ff 382 00 3C 66 00 
30403 383 3C 18 18 18 
30407 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3040b 385 18 3C 00 00 
3040f 386 00 00 00 36 
30413 387 1C 08 00 3E 
30417 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3041b 389 63 3E 00 00 
3041f 38a 00 18 18 18 
30423 38b 18 18 18 18 
30427 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3042b 38d 00 00 00 00 
3042f 38e 00 00 00 00 
30433 38f 00 00 00 00 | 	byte	$00[12]
30437 390 F8 18 18 18 
3043b 391 18 18 18 18 
3043f 392 18 FF FF FF 
30443 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
30447 394 FF FF FF FF 
3044b 395 FF FF FF FF 
3044f 396 FF          | 	byte	$ff[9]
30450 397 00 00 00 00 
30454 398 00 00 00    | 	byte	$00[7]
30457 398 FF FF FF FF 
3045b 399 FF FF FF FF 
3045f 39a FF          | 	byte	$ff[9]
30460 39b 00 00 00 7E 
30464 39c 7E 5A 18 18 
30468 39d 18 18 18 18 
3046c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
30470 39f 1C 36 1C 63 
30474 3a0 63 63 63 63 
30478 3a1 63 63 63 63 
3047c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
30480 3a3 FF FF FF FF 
30484 3a4 FF FF FF    | 	byte	$ff[7]
30487 3a4 00 00 00 00 
3048b 3a5 00 00 00 00 
3048f 3a6 00          | 	byte	$00[9]
30490 3a7 30 18 00 3E 
30494 3a8 63 63 63 63 
30498 3a9 63 63 63 63 
3049c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
304a0 3ab 00 00 00 1E 
304a4 3ac 33 33 33 1B 
304a8 3ad 33 63 63 63 
304ac 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
304b0 3af 1C 36 00 3E 
304b4 3b0 63 63 63 63 
304b8 3b1 63 63 63 63 
304bc 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
304c0 3b3 30 18 00 63 
304c4 3b4 67 6F 7F 7B 
304c8 3b5 73 63 63 63 
304cc 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
304d0 3b7 00 00 60 30 
304d4 3b8 18 00 3B 66 
304d8 3b9 66 66 66 66 
304dc 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
304e0 3bb 00 00 36 1C 
304e4 3bc 08 00 3B 66 
304e8 3bd 66 66 66 66 
304ec 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
304f0 3bf 36 1C 00 3E 
304f4 3c0 63 63 06 1C 
304f8 3c1 30 60 63 63 
304fc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
30500 3c3 00 00 36 1C 
30504 3c4 08 00 3E 63 
30508 3c5 06 1C 30 63 
3050c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
30510 3c7 30 18 00 3F 
30514 3c8 66 66 66 3E 
30518 3c9 36 66 66 66 
3051c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
30520 3cb 30 18 00 63 
30524 3cc 63 63 63 63 
30528 3cd 63 63 63 63 
3052c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
30530 3cf 00 00 60 30 
30534 3d0 18 00 3B 6E 
30538 3d1 66 06 06 06 
3053c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
30540 3d3 66 33 00 63 
30544 3d4 63 63 63 63 
30548 3d5 63 63 63 63 
3054c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
30550 3d7 00 00 60 30 
30554 3d8 18 00 63 63 
30558 3d9 63 63 63 63 
3055c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
30560 3db 30 18 00 66 
30564 3dc 66 66 66 3C 
30568 3dd 18 18 18 18 
3056c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
30570 3df 00 00 00 08 
30574 3e0 0C 0C 3F 0C 
30578 3e1 0C 0C 0C 6C 
3057c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
30580 3e3 30 18 00 00 
30584 3e4 00 00 00 00 
30588 3e5 00 00 00 00 
3058c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30590 3e7 00 00 00 00 
30594 3e8 00 00 00 00 | 	byte	$00[8]
30598 3e9 7F 00 00 00 
3059c 3ea 00 00 00 00 
305a0 3eb 66 33 00 00 
305a4 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
305a8 3ed 00 00 00 00 
305ac 3ee 00 00 00 00 
305b0 3ef 00 00 00 00 
305b4 3f0 00 00 00 00 
305b8 3f1 00 00 00 00 
305bc 3f2 00          | 	byte	$00[21]
305bd 3f2 0C 06 3C 36 
305c1 3f3 1C 00 00 00 
305c5 3f4 00 00 00 00 
305c9 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
305cd 3f6 00 00 00 63 
305d1 3f7 3E 00 00 00 
305d5 3f8 00 00 00 00 
305d9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
305dd 3fa 00 00 00 00 
305e1 3fb 3E 63 06 1C 
305e5 3fc 36 63 63 36 
305e9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
305ed 3fe 00 00 00 00 
305f1 3ff 00 00 00 00 | 	byte	$00[8]
305f5 400 18 00 7E 00 
305f9 401 18 00 00 00 
305fd 402 00 00 00 00 
30601 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30605 404 00 00 00 00 
30609 405 00 00 00 00 | 	byte	$00[8]
3060d 406 18 30 1E 00 
30611 407 00 00 1C 36 
30615 408 36 1C 00 00 
30619 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3061d 40a 00 00 00 00 
30621 40b 63 00 00 00 
30625 40c 00 00 00 00 
30629 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3062d 40e 00 00 00 18 
30631 40f 18 00 00 00 
30635 410 00 00 00 00 
30639 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3063d 412 00 00 00 00 
30641 413 00          | 	byte	$00[5]
30642 413 CC 66 33 00 
30646 414 33 33 33 33 
3064a 415 33 33 6E 00 
3064e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
30652 417 00 3F 66 66 
30656 418 66 3E 36 66 
3065a 419 66 66 6F 00 
3065e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
30662 41b 36 1C 08 00 
30666 41c 3B 6E 66 06 
3066a 41d 06 06 0F 00 
3066e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
30672 41f 00 00 00 7E 
30676 420 7E 7E 7E 7E 
3067a 421 7E 7E 00 00 
3067e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
30682 423 00 00 00 00 
30686 424 00 00 00 00 
3068a 425 00 00 00 00 
3068e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30690 427             | 'vga_font       file "vgafont.def"
30690 427 00 00 00 00 
      ...             
306c0 433 00 00 00 00 
306c4 434 00 00 00    | st_font        file "st4font.def"
306c7 434 FF FF 00 00 
306cb 435 00 00 00 00 
306cf 436 00 18 18 18 
306d3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
306d7 438 18 18 18 18 
306db 439 18 18 18 18 
306df 43a 18          | 	byte	$18[9]
306e0 43b 00 00 00 00 
306e4 43c 00 00 00    | 	byte	$00[7]
306e7 43c FF FF 18 18 
306eb 43d 18 18 18 18 
306ef 43e 18 18 18 18 
306f3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
306f7 440 FF FF 00 00 
306fb 441 00 00 00 00 
306ff 442 00 18 18 18 
30703 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30707 444 1F 1F 18 18 
3070b 445 18 18 18 18 
3070f 446 18 18 18 18 
30713 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30717 448 F8 F8 18 18 
3071b 449 18 18 18 18 
3071f 44a 18 00 00 00 
30723 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30727 44c 1F 1F 18 18 
3072b 44d 18 18 18 18 
3072f 44e 18 00 00 00 
30733 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30737 450 F8 F8 18 18 
3073b 451 18 18 18 18 
3073f 452 18 18 18 18 
30743 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30747 454 1F 1F 00 00 
3074b 455 00 00 00 00 
3074f 456 00 18 18 18 
30753 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30757 458 F8 F8 00 00 
3075b 459 00 00 00 00 
3075f 45a 00 18 18 18 
30763 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
30767 45c FF FF 18 18 
3076b 45d 18 18 18 18 
3076f 45e 18 00 00 18 
30773 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
30777 460 66 7E 7E 66 
3077b 461 66 66 66 30 
3077f 462 18 00 00 7E 
30783 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
30787 464 3E 06 06 06 
3078b 465 06 7E 7E 18 
3078f 466 0C 30 18 3C 
30793 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
30797 468 06 06 06 66 
3079b 469 66 7E 3C 00 
3079f 46a 00 30 18 66 
307a3 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
307a7 46c 7E 7E 76 76 
307ab 46d 66 66 66 00 
307af 46e 00 30 18 7C 
307b3 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
307b7 470 1C 38 70 60 
307bb 471 60 7E 3E 00 
307bf 472 00 30 18 7E 
307c3 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
307c7 474 18 0C 0C 06 
307cb 475 06 7E 7E 00 
307cf 476 00 18 18 00 
307d3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
307d7 478 18 18 0C 0C 
307db 479 06 7E 7E 00 
307df 47a 00 30 18 3C 
307e3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
307e7 47c 66 66 66 66 
307eb 47d 66          | 	byte	$66[5]
307ec 47e 7E 3C 00 00 
307f0 47f 00 00 06 06 
307f4 480 06 06 16 1E 
307f8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
307fc 482 7E 7E 00 00 
30800 483 00 00 00 00 
30804 484 00 3C 7C 60 
30808 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3080c 486 7E 7C 30 18 
30810 487 00 00 00 00 
30814 488 00 3C 7E 66 
30818 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3081c 48a 7E 7C 18 0C 
30820 48b 00 00 30 18 
30824 48c 00 3C 3E 06 
30828 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3082c 48e 7E 7C 00 00 
30830 48f 00 00 30 18 
30834 490 00 3E 7E 66 
30838 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3083c 492 66 66 00 00 
30840 493 00 00 30 18 
30844 494 00 7C 7E 06 
30848 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3084c 496 7E 3E 00 00 
30850 497 00 00 30 18 
30854 498 00 7E 7E 30 
30858 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3085c 49a 7E 7E 00 00 
30860 49b 00 00 18 18 
30864 49c 00 7E 7E 30 
30868 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3086c 49e 7E 7E 00 00 
30870 49f 00 00 30 18 
30874 4a0 00 3C 7E 66 
30878 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3087c 4a2 7E 3C 00 00 
30880 4a3 00 00 1C 1C 
30884 4a4 18 18 38 3C 
30888 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3088c 4a6 3C 3C 00 00 
30890 4a7 00 00 00 00 
30894 4a8 00 00 00 00 
30898 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3089c 4aa 00 00 00 00 
308a0 4ab 00 00       | 	byte	$00[6]
308a2 4ab 18 18 18 18 
308a6 4ac 18 18 18 18 | 	byte	$18[8]
308aa 4ad 00 00 18 18 
308ae 4ae 00 00 00 00 
308b2 4af 66 66 66 66 
308b6 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
308ba 4b1 00 00 00 00 
308be 4b2 00 00 00 00 
308c2 4b3 00          | 	byte	$00[9]
308c3 4b3 66 66 FF FF 
308c7 4b4 66 66 FF FF 
308cb 4b5 66 66 00 00 
308cf 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
308d3 4b7 7C 7E 06 06 
308d7 4b8 3E 7C 60 60 
308db 4b9 7E 3E 18 18 
308df 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
308e3 4bb 66 30 30 18 
308e7 4bc 18 0C 0C 66 
308eb 4bd 66 00 00 00 
308ef 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
308f3 4bf 66 66 3C 1C 
308f7 4c0 1C FC FE 66 
308fb 4c1 66 FE FC 00 
308ff 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
30903 4c3 18 18 18 18 
30907 4c4 00 00 00 00 
3090b 4c5 00 00 00 00 
3090f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
30913 4c7 18 1C 0C 0C 
30917 4c8 0C 0C 0C 0C 
3091b 4c9 1C 18 30 00 
3091f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
30923 4cb 18 38 30 30 
30927 4cc 30 30 30 30 
3092b 4cd 38 18 0C 00 
3092f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
30933 4cf 66 66 3C 3C 
30937 4d0 FF FF 3C 3C 
3093b 4d1 66 66 00 00 
3093f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
30943 4d3 00 18 18 18 
30947 4d4 7E 7E 18 18 
3094b 4d5 18 00 00 00 
3094f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30953 4d7 00 00 00 00 
30957 4d8 00 00       | 	byte	$00[6]
30959 4d9 18 18 18 18 
3095d 4da 18          | 	byte	$18[5]
3095e 4da 0C 04 00 00 
30962 4db 00 00 00 00 
30966 4dc 7E 7E 00 00 
3096a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3096e 4de 00 00 00 00 
30972 4df 00 00 00 00 
30976 4e0 00 00 00 00 
3097a 4e1 00          | 	byte	$00[13]
3097b 4e1 18 18 18 00 
3097f 4e2 00 00 00 60 
30983 4e3 60 60 30 30 
30987 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3098b 4e5 06 06 06 00 
3098f 4e6 00 00 00 3C 
30993 4e7 7E 66 66 66 
30997 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3099b 4e9 66 7E 3C 00 
3099f 4ea 00 00 00 18 
309a3 4eb 18 1C 1C 18 
309a7 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
309ab 4ed 18 7E 7E 00 
309af 4ee 00 00 00 3C 
309b3 4ef 7E 66 66 30 
309b7 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
309bb 4f1 0C 7E 7E 00 
309bf 4f2 00 00 00 7E 
309c3 4f3 7E 30 30 18 
309c7 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
309cb 4f5 66 7E 3C 00 
309cf 4f6 00 00 00 30 
309d3 4f7 30 38 38 3C 
309d7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
309db 4f9 7E 30 30 00 
309df 4fa 00 00 00 7E 
309e3 4fb 7E 06 06 3E 
309e7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
309eb 4fd 66 7E 3C 00 
309ef 4fe 00 00 00 38 
309f3 4ff 3C 0E 06 06 
309f7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
309fb 501 66 7E 3C 00 
309ff 502 00 00 00 7E 
30a03 503 7E 60 60 30 
30a07 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
30a0b 505 0C 0C 0C 00 
30a0f 506 00 00 00 3C 
30a13 507 7E 66 66 3C 
30a17 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
30a1b 509 66 7E 3C 00 
30a1f 50a 00 00 00 3C 
30a23 50b 7E 66 66 7E 
30a27 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
30a2b 50d 70 3C 1C 00 
30a2f 50e 00 00 00 00 
30a33 50f 00 00 18 18 
30a37 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
30a3b 511 18 18 18 00 
30a3f 512 00 00 00 00 
30a43 513 00 00 18 18 
30a47 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
30a4b 515 18 18 18 0C 
30a4f 516 04 00 00 00 
30a53 517 70 38 1C 0E 
30a57 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
30a5b 519 70 00 00 00 
30a5f 51a 00 00 00 00 
30a63 51b 00 00 7E 7E 
30a67 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
30a6b 51d 00 00 00 00 
30a6f 51e 00 00 00 00 | 	byte	$00[8]
30a73 51f 0E 1C 38 70 
30a77 520 E0 70 38 1C 
30a7b 521 0E 00 00 00 
30a7f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
30a83 523 7E 66 66 30 
30a87 524 30 18 18 18 
30a8b 525 00 18 18 00 
30a8f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
30a93 527 7E 66 66 66 
30a97 528 66 36 06 66 
30a9b 529 66 7E 3C 00 
30a9f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
30aa3 52b 3C 7E 66 66 
30aa7 52c 66 7E 7E 66 
30aab 52d 66 66 66 00 
30aaf 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
30ab3 52f 7E 66 66 7E 
30ab7 530 3E 66 66 66 
30abb 531 66 7E 3E 00 
30abf 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
30ac3 533 7E 66 66 06 
30ac7 534 06 06 06 66 
30acb 535 66 7E 3C 00 
30acf 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
30ad3 537 7E 66 66 66 
30ad7 538 66 66 66 66 
30adb 539 66 7E 3E 00 
30adf 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
30ae3 53b 7E 06 06 3E 
30ae7 53c 3E 06 06 06 
30aeb 53d 06 7E 7E 00 
30aef 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
30af3 53f 7E 06 06 3E 
30af7 540 3E 06 06 06 
30afb 541 06 06 06 00 
30aff 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
30b03 543 7E 06 06 76 
30b07 544 76 66 66 66 
30b0b 545 66 7E 3C 00 
30b0f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
30b13 547 66 66 66 7E 
30b17 548 7E 66 66 66 
30b1b 549 66 66 66 00 
30b1f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
30b23 54b 7E 18 18 18 
30b27 54c 18 18 18 18 
30b2b 54d 18 7E 7E 00 
30b2f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
30b33 54f 60 60 60 60 
30b37 550 60 60 60    | 	byte	$60[7]
30b3a 551 66 66 7E 3C 
30b3e 552 00 00 00 00 
30b42 553 66 66 36 36 
30b46 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
30b4a 555 66 66 C6 C6 
30b4e 556 00 00 00 00 
30b52 557 06 06 06 06 
30b56 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
30b5a 559 06 06 7E 7E 
30b5e 55a 00 00 00 00 
30b62 55b C6 C6 EE EE 
30b66 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
30b6a 55d C6 C6 C6 C6 
30b6e 55e 00 00 00 00 
30b72 55f 66 66 66 6E 
30b76 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
30b7a 561 76 66 66 66 
30b7e 562 00 00 00 00 
30b82 563 3C 7E 66 66 
30b86 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
30b8a 565 66 66 7E 3C 
30b8e 566 00 00 00 00 
30b92 567 3E 7E 66 66 
30b96 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
30b9a 569 06 06 06 06 
30b9e 56a 00 00 00 00 
30ba2 56b 3C 7E 66 66 
30ba6 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
30baa 56d 66 56 3E 6C 
30bae 56e 00 00 00 00 
30bb2 56f 3E 7E 66 66 
30bb6 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
30bba 571 66 66 C6 C6 
30bbe 572 00 00 00 00 
30bc2 573 7C 7E 06 06 
30bc6 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
30bca 575 60 60 7E 3E 
30bce 576 00 00 00 00 
30bd2 577 7E 7E 18 18 
30bd6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
30bda 579 18 18 18 18 
30bde 57a 00 00 00 00 
30be2 57b 66 66 66 66 
30be6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
30bea 57d 66 66 7E 3C 
30bee 57e 00 00 00 00 
30bf2 57f 66 66 66 66 
30bf6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
30bfa 581 3C 3C 18 18 
30bfe 582 00 00 00 00 
30c02 583 C6 C6 C6 C6 
30c06 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
30c0a 585 FE EE C6 82 
30c0e 586 00 00 00 00 
30c12 587 66 66 66 3C 
30c16 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
30c1a 589 3C 66 66 66 
30c1e 58a 00 00 00 00 
30c22 58b 66 66 66 66 
30c26 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
30c2a 58d 18 18 18 18 
30c2e 58e 00 00 00 00 
30c32 58f 7E 7E 30 30 
30c36 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
30c3a 591 06 06 7E 7E 
30c3e 592 00 00 00 00 
30c42 593 3C 3C 0C 0C 
30c46 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
30c4a 595 0C 0C 3C 3C 
30c4e 596 00 00 00 00 
30c52 597 06 06 0C 0C 
30c56 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
30c5a 599 60 60 C0 C0 
30c5e 59a 00 00 00 00 
30c62 59b 3C 3C 30 30 
30c66 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
30c6a 59d 30 30 3C 3C 
30c6e 59e 00 00 00 00 
30c72 59f 18 18 3C 3C 
30c76 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
30c7a 5a1 00 00 00 00 
30c7e 5a2 00 00 00 00 
30c82 5a3 00 00 00 00 
30c86 5a4 00 00 00 00 
30c8a 5a5 00 00       | 	byte	$00[18]
30c8c 5a6 FE FE 00 00 
30c90 5a7 00 00 0C 0C 
30c94 5a8 18 18 00 00 
30c98 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
30c9c 5aa 00 00 00 00 
30ca0 5ab 00 00 00 00 
30ca4 5ac 00          | 	byte	$00[9]
30ca5 5ac 3C 7C 60 7C 
30ca9 5ad 7E 66 66 7E 
30cad 5ae 7C 00 00 00 
30cb1 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
30cb5 5b0 3E 7E 66 66 
30cb9 5b1 66 66 66 7E 
30cbd 5b2 3E 00 00 00 
30cc1 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
30cc5 5b4 3C 3E 06 06 
30cc9 5b5 06 06 06 7E 
30ccd 5b6 7C 00 00 00 
30cd1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
30cd5 5b8 7C 7E 66 66 
30cd9 5b9 66 66 66 7E 
30cdd 5ba 7C 00 00 00 
30ce1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
30ce5 5bc 3C 7E 66 66 
30ce9 5bd 7E 06 06 7E 
30ced 5be 7C 00 00 00 
30cf1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
30cf5 5c0 18 7E 7E 18 
30cf9 5c1 18 18 18 18 
30cfd 5c2 18 00 00 00 
30d01 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
30d05 5c4 7C 7E 66 66 
30d09 5c5 66 66 7E 7C 
30d0d 5c6 60 7E 3E 00 
30d11 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
30d15 5c8 3E 7E 66 66 
30d19 5c9 66 66 66 66 
30d1d 5ca 66 00 00 00 
30d21 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
30d25 5cc 1C 1C 18 18 
30d29 5cd 18 18 18 3C 
30d2d 5ce 3C 00 00 00 
30d31 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
30d35 5d0 30 30 30 30 
30d39 5d1 30 30 30 30 
30d3d 5d2 30          | 	byte	$30[9]
30d3e 5d2 3E 1E 00 00 
30d42 5d3 06 06 06 36 
30d46 5d4 36 1E 1E 1E 
30d4a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
30d4e 5d6 00 00 00 00 
30d52 5d7 1C 1C 18 18 
30d56 5d8 18 18 18 18 
30d5a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
30d5e 5da 00 00 00 00 
30d62 5db 00 00 00    | 	byte	$00[7]
30d65 5dc 6C FE FE D6 
30d69 5dd D6 C6 C6 C6 
30d6d 5de C6 00 00 00 
30d71 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
30d75 5e0 3E 7E 66 66 
30d79 5e1 66 66 66 66 
30d7d 5e2 66 00 00 00 
30d81 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
30d85 5e4 3C 7E 66 66 
30d89 5e5 66 66 66 7E 
30d8d 5e6 3C 00 00 00 
30d91 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
30d95 5e8 3E 7E 66 66 
30d99 5e9 66 66 66 7E 
30d9d 5ea 3E 06 06 00 
30da1 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
30da5 5ec 7C 7E 66 66 
30da9 5ed 66 66 66 7E 
30dad 5ee 7C 60 60 00 
30db1 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
30db5 5f0 3E 7E 66 06 
30db9 5f1 06 06 06 06 
30dbd 5f2 06 00 00 00 
30dc1 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
30dc5 5f4 7C 7E 06 0E 
30dc9 5f5 3C 70 60 7E 
30dcd 5f6 3E 00 00 00 
30dd1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
30dd5 5f8 7E 7E 18 18 
30dd9 5f9 18 18 18 78 
30ddd 5fa 70 00 00 00 
30de1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
30de5 5fc 66 66 66 66 
30de9 5fd 66 66 66    | 	byte	$66[7]
30dec 5fe 7E 7C 00 00 
30df0 5ff 00 00 00 00 
30df4 600 00 66 66 66 
30df8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
30dfc 602 18 18 00 00 
30e00 603 00 00 00 00 
30e04 604 00 C6 C6 D6 
30e08 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
30e0c 606 C6 82 00 00 
30e10 607 00 00 00 00 
30e14 608 00 66 66 3C 
30e18 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
30e1c 60a 66 66 00 00 
30e20 60b 00 00 00 00 
30e24 60c 00 66 66 66 
30e28 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
30e2c 60e 7C 60 7E 3E 
30e30 60f 00 00 00 00 
30e34 610 00 7E 7E 30 
30e38 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
30e3c 612 7E 7E 00 00 
30e40 613 00 00 30 18 
30e44 614 18 18 18 0C 
30e48 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
30e4c 616 18 30 00 00 
30e50 617 00 00 18 18 
30e54 618 18 18 18 18 
30e58 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
30e5c 61a 18 18 00 00 
30e60 61b 00 00 0C 18 
30e64 61c 18 18 18 30 
30e68 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
30e6c 61e 18 0C 00 00 
30e70 61f 00 00 6C 7E 
30e74 620 36 00 00 00 
30e78 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
30e7c 622 00 00 00 00 
30e80 623 00 00 00 00 
30e84 624 00          | 	byte	$00[9]
30e85 624 18 18 18 18 
30e89 625 18 18 00 00 
30e8d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
30e90 627             | 'amiga_font     file "amigafont.def"
30e90 627 00 6C FE FE 
30e94 628 7C 38 10 00 
30e98 629 18 18 18 F8 
30e9c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
30ea0 62b C0 C0 C0 C0 
30ea4 62c C0 C0 C0 C0 | 	byte	$c0[8]
30ea8 62d 18 18 18 1F 
30eac 62e 1F 00 00 00 
30eb0 62f 18 18 18 1F 
30eb4 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
30eb8 631 00 00 00 1F 
30ebc 632 1F 18 18 18 
30ec0 633 C0 E0 70 38 
30ec4 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
30ec8 635 03 07 0E 1C 
30ecc 636 38 70 E0 C0 
30ed0 637 80 C0 E0 F0 
30ed4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
30ed8 639 00 00 00 00 
30edc 63a F0 F0 F0 F0 
30ee0 63b 01 03 07 0F 
30ee4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
30ee8 63d F0 F0 F0 F0 
30eec 63e 00 00 00 00 
30ef0 63f 0F 0F 0F 0F 
30ef4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
30ef8 641 FF FF 00 00 
30efc 642 00 00 00 00 
30f00 643 00 00 00 00 
30f04 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
30f08 645 00 00 00 00 
30f0c 646 0F 0F 0F 0F 
30f10 647 00 38 38 EE 
30f14 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
30f18 649 00 00 00 F8 
30f1c 64a F8 18 18 18 
30f20 64b 00 00 00 FF 
30f24 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
30f28 64d 18 18 18 FF 
30f2c 64e FF 18 18 18 
30f30 64f 00 00 3C 7E 
30f34 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
30f38 651 00 00 00 00 
30f3c 652 FF FF FF FF 
30f40 653 03 03 03 03 
30f44 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
30f48 655 00 00 00 FF 
30f4c 656 FF 18 18 18 
30f50 657 18 18 18 FF 
30f54 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
30f58 659 0F 0F 0F 0F 
30f5c 65a 0F 0F 0F 0F | 	byte	$0f[8]
30f60 65b 18 18 18 F8 
30f64 65c F8 00 00 00 
30f68 65d 1E 06 1E 06 
30f6c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
30f70 65f 00 18 3C 7E 
30f74 660 18 18 18 00 
30f78 661 00 18 18 18 
30f7c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
30f80 663 00 18 0C 7E 
30f84 664 0C 18 00 00 
30f88 665 00 18 30 7E 
30f8c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
30f90 667 00 00 00 00 
30f94 668 00 00 00 00 
30f98 669 00          | 	byte	$00[9]
30f99 669 18 18 18 18 
30f9d 66a 00 18 00 00 
30fa1 66b 66 66 66 00 
30fa5 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
30fa9 66d 66 FF 66 66 
30fad 66e FF 66 00 18 
30fb1 66f 7C 06 3C 60 
30fb5 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
30fb9 671 66 36 18 0C 
30fbd 672 66 62 00 38 
30fc1 673 6C 38 1C F6 
30fc5 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
30fc9 675 18 18 18 00 
30fcd 676 00 00 00 00 
30fd1 677 70 38 18 18 
30fd5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
30fd9 679 0E 1C 18 18 
30fdd 67a 1C 0E 00 00 
30fe1 67b 66 3C FF 3C 
30fe5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
30fe9 67d 18 18 7E 18 
30fed 67e 18 00 00 00 
30ff1 67f 00 00 00 00 
30ff5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
30ff9 681 00 00 7E 00 
30ffd 682 00 00 00 00 
31001 683 00 00 00 00 
31005 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
31009 685 60 30 18 0C 
3100d 686 06 02 00 00 
31011 687 3C 66 76 6E 
31015 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
31019 689 18 1C 18 18 
3101d 68a 18 7E 00 00 
31021 68b 3C 66 30 18 
31025 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
31029 68d 7E 30 18 30 
3102d 68e 66 3C 00 00 
31031 68f 30 38 3C 36 
31035 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
31039 691 7E 06 3E 60 
3103d 692 66 3C 00 00 
31041 693 3C 06 3E 66 
31045 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
31049 695 7E 60 30 18 
3104d 696 0C 0C 00 00 
31051 697 3C 66 3C 66 
31055 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
31059 699 3C 66 7C 60 
3105d 69a 30 1C 00 00 
31061 69b 00 18 18 00 
31065 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
31069 69d 00 18 18 00 
3106d 69e 18 18 0C 60 
31071 69f 30 18 0C 18 
31075 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
31079 6a1 00 7E 00 00 
3107d 6a2 7E 00 00 06 
31081 6a3 0C 18 30 18 
31085 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
31089 6a5 3C 66 30 18 
3108d 6a6 00 18 00 00 
31091 6a7 3C 66 76 76 
31095 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
31099 6a9 18 3C 66 66 
3109d 6aa 7E 66 00 00 
310a1 6ab 3E 66 3E 66 
310a5 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
310a9 6ad 3C 66 06 06 
310ad 6ae 66 3C 00 00 
310b1 6af 1E 36 66 66 
310b5 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
310b9 6b1 7E 06 3E 06 
310bd 6b2 06 7E 00 00 
310c1 6b3 7E 06 3E 06 
310c5 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
310c9 6b5 7C 06 06 76 
310cd 6b6 66 7C 00 00 
310d1 6b7 66 66 7E 66 
310d5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
310d9 6b9 7E 18 18 18 
310dd 6ba 18 7E 00 00 
310e1 6bb 60 60 60 60 
310e5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
310e9 6bd 66 36 1E 1E 
310ed 6be 36 66 00 00 
310f1 6bf 06 06 06 06 
310f5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
310f9 6c1 C6 EE FE D6 
310fd 6c2 C6 C6 00 00 
31101 6c3 66 6E 7E 7E 
31105 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
31109 6c5 3C 66 66 66 
3110d 6c6 66 3C 00 00 
31111 6c7 3E 66 66 3E 
31115 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
31119 6c9 3C 66 66 66 
3111d 6ca 36 6C 00 00 
31121 6cb 3E 66 66 3E 
31125 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
31129 6cd 3C 06 3C 60 
3112d 6ce 60 3C 00 00 
31131 6cf 7E 18 18 18 
31135 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
31139 6d1 66 66 66 66 
3113d 6d2 66          | 	byte	$66[5]
3113e 6d2 7E 00 00 66 
31142 6d3 66 66 66 3C 
31146 6d4 18 00 00 C6 
3114a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3114e 6d6 C6 00 00 66 
31152 6d7 66 3C 3C 66 
31156 6d8 66 00 00 66 
3115a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3115e 6da 18 00 00 7E 
31162 6db 30 18 0C 06 
31166 6dc 7E 00 00 78 
3116a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3116e 6de 78 00 00 02 
31172 6df 06 0C 18 30 
31176 6e0 60 00 00 1E 
3117a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3117e 6e2 1E 00 00 10 
31182 6e3 38 6C C6 00 
31186 6e4 00 00 00 00 
3118a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3118e 6e6 FF 00 00 18 
31192 6e7 3C 7E 7E 3C 
31196 6e8 18 00 00 00 
3119a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3119e 6ea 7C 00 00 06 
311a2 6eb 06 3E 66 66 
311a6 6ec 3E 00 00 00 
311aa 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
311ae 6ee 3C 00 00 60 
311b2 6ef 60 7C 66 66 
311b6 6f0 7C 00 00 00 
311ba 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
311be 6f2 3C 00 00 70 
311c2 6f3 18 7C 18 18 
311c6 6f4 18 00 00 00 
311ca 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
311ce 6f6 60 3E 00 06 
311d2 6f7 06 3E 66 66 
311d6 6f8 66 00 00 18 
311da 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
311de 6fa 3C 00 00 60 
311e2 6fb 00 60 60 60 
311e6 6fc 60 3C 00 06 
311ea 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
311ee 6fe 66 00 00 1C 
311f2 6ff 18 18 18 18 
311f6 700 3C 00 00 00 
311fa 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
311fe 702 C6 00 00 00 
31202 703 3E 66 66 66 
31206 704 66 00 00 00 
3120a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3120e 706 3C 00 00 00 
31212 707 3E 66 66 3E 
31216 708 06 06 00 00 
3121a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3121e 70a 60 60 00 00 
31222 70b 3E 66 06 06 
31226 70c 06 00 00 00 
3122a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3122e 70e 3E 00 00 18 
31232 70f 7E 18 18 18 
31236 710 70 00 00 00 
3123a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3123e 712 7C 00 00 00 
31242 713 66 66 66 3C 
31246 714 18 00 00 00 
3124a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3124e 716 6C 00 00 00 
31252 717 66 3C 18 3C 
31256 718 66 00 00 00 
3125a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3125e 71a 30 1E 00 00 
31262 71b 7E 30 18 0C 
31266 71c 7E 00 00 18 
3126a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3126e 71e 3C 00 18 18 
31272 71f 18 18 18 18 
31276 720 18 18 00 7E 
3127a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3127e 722 60 00 10 18 
31282 723 1C 1E 1C 18 
31286 724 10 00 08 18 
3128a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3128e 726 08 00       | 	byte	$08, $00
31290 727 00 00 00 00 
31294 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
31295 728 80 00 00 00 
31299 729 00 80 00 00 
3129d 72a 80 80 00 00 
312a1 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
312a5 72c 80 00 80 00 
312a9 72d 00 40 80 00 
312ad 72e AA AA AA 00 
312b1 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
312b5 730 FF 00 00 00 
312b9 731 00 FF 00 00 
312bd 732 FF FF 00 00 
312c1 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
312c5 734 FF 00 FF 00 
312c9 735 00 FF FF 00 
312cd 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
312d0 737 00 00 00 00 
312d4 738 00          | ataripalette   file "ataripalettep2.def"
312d5 738 11 11 11 00 
312d9 739 22 22 22 00 
312dd 73a 33 33 33 00 
312e1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
312e5 73c 55 55 55 00 
312e9 73d 66 66 66 00 
312ed 73e 77 77 77 00 
312f1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
312f5 740 99 99 99 00 
312f9 741 AA AA AA 00 
312fd 742 BB BB BB 00 
31301 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
31305 744 DD DD DD 00 
31309 745 EE EE EE 00 
3130d 746 FF FF FF 00 
31311 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
31315 748 00 14 40 00 
31319 749 00 1E 60 00 
3131d 74a 00 28 80 00 
31321 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
31325 74c 00 3C BF 00 
31329 74d 00 46 DF 00 
3132d 74e 00 50 FF 00 
31331 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
31335 750 39 77 FF 00 
31339 751 55 8A FF 00 
3133d 752 71 9E FF 00 
31341 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
31345 754 AA C5 FF 00 
31349 755 C6 D8 FF 00 
3134d 756 E3 EC FF 00 
31351 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
31355 758 00 00 40 00 
31359 759 00 00 60 00 
3135d 75a 00 00 80 00 
31361 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
31365 75c 00 00 BF 00 
31369 75d 00 00 DF 00 
3136d 75e 00 00 FF 00 
31371 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
31375 760 39 39 FF 00 
31379 761 55 55 FF 00 
3137d 762 71 71 FF 00 
31381 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
31385 764 AA AA FF 00 
31389 765 C6 C6 FF 00 
3138d 766 E3 E3 FF 00 
31391 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
31395 768 20 00 40 00 
31399 769 30 00 60 00 
3139d 76a 40 00 80 00 
313a1 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
313a5 76c 60 00 BF 00 
313a9 76d 70 00 DF 00 
313ad 76e 80 00 FF 00 
313b1 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
313b5 770 9C 39 FF 00 
313b9 771 AA 55 FF 00 
313bd 772 B8 71 FF 00 
313c1 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
313c5 774 D5 AA FF 00 
313c9 775 E3 C6 FF 00 
313cd 776 F1 E3 FF 00 
313d1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
313d5 778 40 00 40 00 
313d9 779 60 00 60 00 
313dd 77a 80 00 80 00 
313e1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
313e5 77c BF 00 BF 00 
313e9 77d DF 00 DF 00 
313ed 77e FF 00 FF 00 
313f1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
313f5 780 FF 39 FF 00 
313f9 781 FF 55 FF 00 
313fd 782 FF 71 FF 00 
31401 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
31405 784 FF AA FF 00 
31409 785 FF C6 FF 00 
3140d 786 FF E3 FF 00 
31411 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
31415 788 40 00 20 00 
31419 789 60 00 30 00 
3141d 78a 80 00 40 00 
31421 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
31425 78c BF 00 60 00 
31429 78d DF 00 70 00 
3142d 78e FF 00 80 00 
31431 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
31435 790 FF 39 9C 00 
31439 791 FF 55 AA 00 
3143d 792 FF 71 B8 00 
31441 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
31445 794 FF AA D5 00 
31449 795 FF C6 E3 00 
3144d 796 FF E3 F1 00 
31451 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
31455 798 40 00 00 00 
31459 799 60 00 00 00 
3145d 79a 80 00 00 00 
31461 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
31465 79c BF 00 00 00 
31469 79d DF 00 00 00 
3146d 79e FF 00 00 00 
31471 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
31475 7a0 FF 39 39 00 
31479 7a1 FF 55 55 00 
3147d 7a2 FF 71 71 00 
31481 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
31485 7a4 FF AA AA 00 
31489 7a5 FF C6 C6 00 
3148d 7a6 FF E3 E3 00 
31491 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
31495 7a8 40 10 00 00 
31499 7a9 60 18 00 00 
3149d 7aa 80 20 00 00 
314a1 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
314a5 7ac BF 30 00 00 
314a9 7ad DF 38 00 00 
314ad 7ae FF 40 00 00 
314b1 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
314b5 7b0 FF 6A 39 00 
314b9 7b1 FF 80 55 00 
314bd 7b2 FF 95 71 00 
314c1 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
314c5 7b4 FF BF AA 00 
314c9 7b5 FF D5 C6 00 
314cd 7b6 FF EA E3 00 
314d1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
314d5 7b8 40 20 00 00 
314d9 7b9 60 30 00 00 
314dd 7ba 80 40 00 00 
314e1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
314e5 7bc BF 60 00 00 
314e9 7bd DF 70 00 00 
314ed 7be FF 80 00 00 
314f1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
314f5 7c0 FF 9C 39 00 
314f9 7c1 FF AA 55 00 
314fd 7c2 FF B8 71 00 
31501 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
31505 7c4 FF D5 AA 00 
31509 7c5 FF E3 C6 00 
3150d 7c6 FF F1 E3 00 
31511 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
31515 7c8 40 30 00 00 
31519 7c9 60 48 00 00 
3151d 7ca 80 60 00 00 
31521 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
31525 7cc BF 90 00 00 
31529 7cd DF A8 00 00 
3152d 7ce FF C0 00 00 
31531 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
31535 7d0 FF CE 39 00 
31539 7d1 FF D5 55 00 
3153d 7d2 FF DC 71 00 
31541 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
31545 7d4 FF EA AA 00 
31549 7d5 FF F1 C6 00 
3154d 7d6 FF F8 E3 00 
31551 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
31555 7d8 30 40 00 00 
31559 7d9 48 60 00 00 
3155d 7da 60 80 00 00 
31561 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
31565 7dc 90 BF 00 00 
31569 7dd A8 DF 00 00 
3156d 7de C0 FF 00 00 
31571 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
31575 7e0 CE FF 39 00 
31579 7e1 D5 FF 55 00 
3157d 7e2 DC FF 71 00 
31581 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
31585 7e4 EA FF AA 00 
31589 7e5 F1 FF C6 00 
3158d 7e6 F8 FF E3 00 
31591 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
31595 7e8 00 40 00 00 
31599 7e9 00 60 00 00 
3159d 7ea 00 80 00 00 
315a1 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
315a5 7ec 00 BF 00 00 
315a9 7ed 00 DF 00 00 
315ad 7ee 00 FF 00 00 
315b1 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
315b5 7f0 39 FF 39 00 
315b9 7f1 55 FF 55 00 
315bd 7f2 71 FF 71 00 
315c1 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
315c5 7f4 AA FF AA 00 
315c9 7f5 C6 FF C6 00 
315cd 7f6 E3 FF E3 00 
315d1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
315d5 7f8 00 40 14 00 
315d9 7f9 00 60 1E 00 
315dd 7fa 00 80 28 00 
315e1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
315e5 7fc 00 BF 3C 00 
315e9 7fd 00 DF 46 00 
315ed 7fe 00 FF 50 00 
315f1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
315f5 800 39 FF 77 00 
315f9 801 55 FF 8A 00 
315fd 802 71 FF 9E 00 
31601 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
31605 804 AA FF C5 00 
31609 805 C6 FF D8 00 
3160d 806 E3 FF EC 00 
31611 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
31615 808 00 40 28 00 
31619 809 00 60 3C 00 
3161d 80a 00 80 50 00 
31621 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
31625 80c 00 BF 78 00 
31629 80d 00 DF 8C 00 
3162d 80e 00 FF A0 00 
31631 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
31635 810 39 FF B5 00 
31639 811 55 FF C0 00 
3163d 812 71 FF CA 00 
31641 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
31645 814 AA FF DF 00 
31649 815 C6 FF EA 00 
3164d 816 E3 FF F4 00 
31651 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
31655 818 00 40 40 00 
31659 819 00 60 60 00 
3165d 81a 00 80 80 00 
31661 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
31665 81c 00 BF BF 00 
31669 81d 00 DF DF 00 
3166d 81e 00 FF FF 00 
31671 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
31675 820 39 FF FF 00 
31679 821 55 FF FF 00 
3167d 822 71 FF FF 00 
31681 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
31685 824 AA FF FF 00 
31689 825 C6 FF FF 00 
3168d 826 E3 FF FF 00 
31691 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
31695 828 00 28 40 00 
31699 829 00 3C 60 00 
3169d 82a 00 50 80 00 
316a1 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
316a5 82c 00 78 BF 00 
316a9 82d 00 8C DF 00 
316ad 82e 00 A0 FF 00 
316b1 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
316b5 830 39 B5 FF 00 
316b9 831 55 C0 FF 00 
316bd 832 71 CA FF 00 
316c1 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
316c5 834 AA DF FF 00 
316c9 835 C6 EA FF 00 
316cd 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
316d0 837             | 
316d0 837             | '**********************************************************************************
316d0 837             | '
316d0 837             | '        Timings and colors definitions
316d0 837             | '
316d0 837             | '**********************************************************************************
316d0 837             | 
316d0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
316d0 837 10 00 00 00 
316d4 838 50 00 00 00 
316d8 839 0C 00 00 00 
316dc 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
316e0 83b 08 00 00 00 
316e4 83c 04 00 00 00 
316e8 83d 08 00 00 00 
316ec 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
316f0 83f 40 02 00 00 
316f4 840 6A 8C 15 14 
316f8 841 FB 06 B7 01 
316fc 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
31700 843 00 00 00 00 
31704 844 C0 00 00 00 
31708 845 00 00 00 00 
3170c 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31710 847 00 75 C7 97 
31714 848 27 47 F6 0A 
31718 849 05 79 CB 9B 
3171c 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
31720 84b             | 
31720 84b             | ''--------  Initialization  ----------------------------------------------------------------
31720 84b             | 
31720 84b 28 0C 64 FD | hdmi            setq    #6
31724 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
31728 84d 28 10 64 FD |                 setq    #8
3172c 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
31730 84f             | 
31730 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
31734 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
31738 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3173c 852 D6 C6 01 F1 |                 add     t1,hbase
31740 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
31744 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
31748 855 7B 0B 80 5F 
3174c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
31750 857 66 66 86 FF 
31754 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
31758 859             | '
31758 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3175c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
31760 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
31764 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
31768 85d             | 
31768 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3176c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
31770 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
31774 860             | 
31774 860             | ''--------  frame rendering main loop  ---------------------------------------------------
31774 860             | 
31774 860 28 06 64 FD | p101            setq 	#3
31778 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3177c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
31780 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
31784 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
31788 865 00 A0 05 F6 |                 mov     dlinum, #0
3178c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
31790 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
31794 868             | 
31794 868             | 
31794 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
31798 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3179c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
317a0 86b             |                 
317a0 86b             | 
317a0 86b             | 
317a0 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
317a0 86b             |   
317a0 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
317a4 86c 29 FE 65 3D |          if_nc  setq2   #255
317a8 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
317ac 86e             | 
317ac 86e             | '' -----   up porch (before the picture)
317ac 86e             | 
317ac 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
317b0 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
317b4 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
317b8 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
317bc 872             |  
317bc 872             |    
317bc 872             |  
317bc 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
317c0 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
317c4 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
317c8 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
317cc 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
317d0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
317d4 878             | 
317d4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
317d8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
317dc 87a 48 00 B0 FD | 		call    #dli
317e0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
317e4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
317e8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
317ec 87e             |                 	
317ec 87e             |                 
317ec 87e             | 
317ec 87e             |  
317ec 87e             | '' ------- the main screen drawing starts here
317ec 87e             | 
317ec 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
317f0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
317f4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
317f8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
317fc 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
31800 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
31804 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
31808 885             |               
31808 885             | 
31808 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3180c 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
31810 887             | 
31810 887             | ' ---------------- All visible lines displayed now, start vblank  
31810 887             | 
31810 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
31814 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
31818 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3181c 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
31820 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
31824 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
31828 88d             | 
31828 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
31828 88d             | 
31828 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
31828 88d             | 
31828 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3182c 88e             | 
3182c 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
31830 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
31834 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
31838 891             | 
31838 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3183c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
31840 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
31844 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
31848 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3184c 896             | 
3184c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
31850 897 DD C6 41 F8 |                 getnib  t1,dl,#0
31854 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
31858 899 70 00 90 AD |     if_z        jmp     #preload
3185c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
31860 89b 94 00 90 AD |     if_z        jmp     #preload2
31864 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
31868 89d 0C 00 90 AD |     if_z        jmp     #p390
3186c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
31870 89f 28 00 90 AD |     if_z        jmp     #p391  
31874 8a0             | 
31874 8a0 2D 00 64 FD | p308            ret
31878 8a1             |    
31878 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3187c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
31880 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
31884 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
31888 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3188c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
31890 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
31894 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
31898 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3189c 8aa             |  
3189c 8aa             | '' --------  Reload palette. To do 
3189c 8aa             | 
3189c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
318a0 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
318a4 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
318a8 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
318ac 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
318b0 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
318b4 8b0 70 FF 9F FD |         	jmp     #dli                
318b8 8b1             |       
318b8 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
318b8 8b1             | 
318b8 8b1             | 
318b8 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
318b8 8b1             | 
318b8 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
318bc 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
318c0 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
318c4 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
318c8 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
318cc 8b6             |         
318cc 8b6             | '' -------------- Preload a line from PSRAM        
318cc 8b6             |         
318cc 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
318d0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
318d4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
318d8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
318dc 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
318e0 8bb             | 
318e0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
318e4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
318e8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
318ec 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
318f0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
318f4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
318f8 8c1             |  
318f8 8c1             |  
318f8 8c1             | preload2      '  incmod  dlinum,#3
318f8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
318fc 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
31900 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
31904 8c4 28 02 64 FD |                 setq	#1
31908 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3190c 8c6             |                 
3190c 8c6             | 
3190c 8c6             | '' -------------- Draw sprites
3190c 8c6             | 
3190c 8c6 CF 5C 02 F6 | sprite          mov t8,frames
31910 8c7 10 5C 0E F5 | 		and t8,#16 wz
31914 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
31918 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3191c 8ca             | 		
3191c 8ca             | 
3191c 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
31920 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
31924 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
31928 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3192c 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
31930 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
31934 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
31938 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3193c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
31940 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
31944 8d4 01 52 86 F1 |                 sub     sprite_h,#1
31948 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3194c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
31950 8d7             | 
31950 8d7             | 
31950 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
31954 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
31958 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3195c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
31960 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
31964 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
31968 8dd 00 5E 06 F6 |                 mov 	t9,#0
3196c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
31970 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
31974 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
31978 8e1             |      
31978 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3197c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
31980 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
31984 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
31988 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3198c 8e6             |                 
3198c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
31990 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
31994 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
31998 8e9             |   		
31998 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3199c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
319a0 8eb             | 
319a0 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
319a4 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
319a8 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
319ac 8ee             |  
319ac 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
319b0 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
319b4 8f0 10 00 90 CD |      if_c 	jmp     #p899		
319b8 8f1             | 	
319b8 8f1             | 	
319b8 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
319bc 8f2 28 CD 01 F1 | 		add	t4,sprite_w
319c0 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
319c4 8f4             | 
319c4 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
319c8 8f5             | 
319c8 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
319cc 8f6 01 58 86 F1 | 	 	sub     t6,#1
319d0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
319d4 8f8             | 
319d4 8f8 28 58 62 FD |                 setq   	t6
319d8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
319dc 8fa 28 5D 02 F6 |                 mov t8,sprite_w
319e0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
319e4 8fc 24 00 90 AD |         if_z    jmp #p898
319e8 8fd             |          
319e8 8fd             |         
319e8 8fd 70 5F 06 F6 |                 mov  t9,#368
319ec 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
319f0 8ff             | 
319f0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
319f4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
319f8 901 FF FF 7F FF 
319fc 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
31a00 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
31a04 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
31a08 905 2D 01 00 F5 |                 and 0-0, t7
31a0c 906             |                
31a0c 906             | 
31a0c 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
31a10 907 E5 E0 7A FA |                 wmlong 368,t3				
31a14 908             |                 
31a14 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
31a18 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
31a1c 90a 2D 00 64 FD |                 ret
31a20 90b             | 	
31a20 90b             | 	
31a20 90b             |                
31a20 90b             |  
31a20 90b             | '' -------------- Graphics line ------------------------------------------------------------
31a20 90b             |  
31a20 90b             | 
31a20 90b             | '' consts and vars
31a20 90b             | 
31a20 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
31a24 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
31a28 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
31a2c 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
31a30 90f             | 
31a30 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
31a34 910             | 
31a34 910             | '------ these longs will be set by setmode function
31a34 910             | 
31a34 910 00 00 00 00 | m_bs            long    0        'blanks before sync
31a38 911 00 00 00 00 | m_sn            long    0        'sync
31a3c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
31a40 913 00 00 00 00 | m_vi            long    0        'visible pixels #
31a44 914             | 'm_border        long    0        'left/right borders
31a44 914 00 00 00 00 | i_upporch       long    0        'up porch lines
31a48 915 00 00 00 00 | i_vsync         long    0        'vsync lines
31a4c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
31a50 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
31a54 918 00 00 00 00 | i_totalvis      long    0
31a58 919             | 
31a58 919             | '-------------------------------------
31a58 919             |  
31a58 919 00 00 00 00 | linenum         long    0
31a5c 91a 00 00 00 00 | frames          long    0
31a60 91b 00 00 00 00 | dlinum long 0
31a64 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
31a68 91d             | 
31a68 91d 00 00 00 00 | vblankptr       long    0
31a6c 91e 00 00 00 00 | modeptr         long    0
31a70 91f 00 00 00 00 | paletteptr      long    0
31a74 920 00 00 00 00 | dlptr           long    0
31a78 921 01 00 00 00 | hbase           long    1
31a7c 922 00 00 00 00 | mailbox         long    0
31a80 923 00 00 00 00 | spriteptr          long 0
31a84 924             | 
31a84 924 00 00 00 00 | cmd             long    0
31a88 925 00 B0 07 00 | buf1            long    $80000-16384-4096
31a8c 926 00 04 00 00 | buf2            long    1024
31a90 927 01 00 00 00 | dlptr2          long    1
31a94 928 01 00 00 00 | dl              long    1
31a98 929             | 
31a98 929 00 00 00 00 | buf1c long 0
31a9c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
31aa0 92b 01 00 00 00 | framebuf2       long    1
31aa4 92c 01 00 00 00 | hsync0          long    1
31aa8 92d 01 00 00 00 | hsync1          long    1
31aac 92e             | 
31aac 92e 01 00 00 00 | t1              long    1
31ab0 92f 00 00 00 00 | t2 long 0
31ab4 930 00 00 00 00 | t3 long 0
31ab8 931 00 00 00 00 | t4 long 0
31abc 932             | 
31abc 932 00 00 00 00 | rcnt            long    0  'dl repeat count
31ac0 933 00 00 00 00 | rcnt2           long    0
31ac4 934 00 00 00 00 | rcnt2a          long    0
31ac8 935 00 00 00 00 | roffset         long    0
31acc 936 00 00 00 00 | rdl             long    0  'dl repeat line
31ad0 937 00 00 00 00 | dlc             long    0  'dl command
31ad4 938             | 
31ad4 938 FF FF FF FF | affffffff       long    $ffffffff
31ad8 939 00 00 00 00 | sprite1pointer long 0
31adc 93a 00 00 00 00 | sprite1xy      long 0
31ae0 93b 00 00 00 00 | sprite1wh      long 0
31ae4 93c 00 00 00 00 | sprite2pointer long 0
31ae8 93d 00 00 00 00 | sprite2xy      long 0
31aec 93e 00 00 00 00 | sprite2wh      long 0
31af0 93f 00 00 00 00 | sprite3pointer long 0
31af4 940 00 00 00 00 | sprite3xy      long 0
31af8 941 00 00 00 00 | sprite3wh      long 0
31afc 942 00 00 00 00 | sprite4pointer long 0
31b00 943 00 00 00 00 | sprite4xy      long 0
31b04 944 00 00 00 00 | sprite4wh      long 0
31b08 945 00 00 00 00 | sprite5pointer long 0
31b0c 946 00 00 00 00 | sprite5xy      long 0
31b10 947 00 00 00 00 | sprite5wh      long 0
31b14 948 00 00 00 00 | sprite6pointer long 0
31b18 949 00 00 00 00 | sprite6xy      long 0
31b1c 94a 00 00 00 00 | sprite6wh      long 0
31b20 94b 00 00 00 00 | sprite7pointer long 0
31b24 94c 00 00 00 00 | sprite7xy      long 0
31b28 94d 00 00 00 00 | sprite7wh      long 0
31b2c 94e 00 00 00 00 | sprite8pointer long 0
31b30 94f 00 00 00 00 | sprite8xy      long 0
31b34 950 00 00 00 00 | sprite8wh      long 0
31b38 951 00 00 00 00 | sprite9pointer long 0
31b3c 952 00 00 00 00 | sprite9xy      long 0
31b40 953 00 00 00 00 | sprite9wh      long 0
31b44 954 00 00 00 00 | sprite10pointer long 0
31b48 955 00 00 00 00 | sprite10xy      long 0
31b4c 956 00 00 00 00 | sprite10wh      long 0
31b50 957 00 00 00 00 | sprite11pointer long 0
31b54 958 00 00 00 00 | sprite11xy      long 0
31b58 959 00 00 00 00 | sprite11wh      long 0
31b5c 95a 00 00 00 00 | sprite12pointer long 0
31b60 95b 00 00 00 00 | sprite12xy      long 0
31b64 95c 00 00 00 00 | sprite12wh      long 0
31b68 95d 00 00 00 00 | sprite13pointer long 0
31b6c 95e 00 00 00 00 | sprite13xy      long 0
31b70 95f 00 00 00 00 | sprite13wh      long 0
31b74 960 00 00 00 00 | sprite14pointer long 0
31b78 961 00 00 00 00 | sprite14xy      long 0
31b7c 962 00 00 00 00 | sprite14wh      long 0
31b80 963 00 00 00 00 | sprite15pointer long 0
31b84 964 00 00 00 00 | sprite15xy      long 0
31b88 965 00 00 00 00 | sprite15wh      long 0
31b8c 966 00 00 00 00 | sprite16pointer long 0
31b90 967 00 00 00 00 | sprite16xy      long 0
31b94 968 00 00 00 00 | sprite16wh      long 0
31b98 969 00 00 00 00 | sprite17pointer long 0
31b9c 96a 00 00 00 00 | sprite17xy      long 0
31ba0 96b 00 00 00 00 | sprite17wh      long 0
31ba4 96c 00 00 00 00 | sprite18pointer long 0
31ba8 96d 00 00 00 00 | sprite18xy      long 0
31bac 96e 00 00 00 00 | sprite18wh      long 0
31bb0 96f 00 00 00 00 | spritenum long 0
31bb4 970             | 
31bb4 970 00 00 00 00 | spriteline long 0
31bb8 971 84 03 00 00 | sprite_x long 900
31bbc 972 00 00 00 00 | sprite_y long 0
31bc0 973 10 00 00 00 | sprite_w long 16
31bc4 974 40 00 00 00 | sprite_h long 64
31bc8 975 00 00 00 00 | l2 long 0
31bcc 976 00 00 00 00 | t5 long 0
31bd0 977 00 00 00 00 | t6 long 0
31bd4 978 00 00 00 00 | t7 long 0
31bd8 979 00 00 00 00 | t8 long 0
31bdc 97a 00 00 00 00 | t9 long 0
31be0 97b 00 00 00 00 | preloadaddr long 0
31be4 97c 00 00 00 00 | preloadlineaddr long 0
31be8 97d 00 04 00 00 | a1024 long 1024
31bec 97e             | 
31bec 97e E0 03 00 00 | aa long 992
31bf0 97f FF 03 00 00 | a1023 long 1023
31bf4 980 00 10 00 00 | a4096 long 4096
31bf8 981             |  fit 368
31bf8 981             | _psram_spin2_dat_
31bf8 981 00 00 00 00 
      ...             
31cf0 9bf 00 00 00 00 
31cf4 9c0 00 00 00 00 |     listdata long 0[8*8]
31cf8 9c1             |             orgh
31cf8                 | 
31cf8                 | ' driver state
31cf8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
31cfc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
31d00                 | 
31d00                 | ' delay profile
31d00     07 00 00 00 
31d04     00 CF 7B 05 
31d08     80 D1 F0 08 
31d0c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
31d10     80 C4 60 0F 
31d14     80 39 7A 12 
31d18     40 2D D9 13 
31d1c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
31d20                 | 
31d20                 | ' data to be passed to driver when starting it
31d20                 | startupData
31d20     00 00 00 00 |     long    0           ' current frequency
31d24     00 00 00 00 |     long    FLAGS       ' optional flags for driver
31d28     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
31d2c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
31d30     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
31d34     40 1D 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
31d38     C0 1D 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
31d3c     E0 1D 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
31d40                 | 
31d40                 | ' data for memory
31d40                 | deviceData
31d40                 |     ' 16 bank parameters follow (16MB per bank)
31d40     00 00 00 00 
      ...             
31d78     00 00 00 00 
31d7c     00 00 00 00 |     long    0[16]                               ' banks 0-15
31d80                 |     ' 16 banks of pin parameters follow
31d80     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
31d84     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
31d88     FF FF FF FF 
      ...             
31db8     FF FF FF FF 
31dbc     FF FF FF FF |     long    -1[14]                              ' banks 2-15
31dc0                 | 
31dc0                 | ' data for COG polling
31dc0                 | qosData 
31dc0     00 00 FF FF 
31dc4     00 00 FF FF 
31dc8     00 00 FF FF 
31dcc     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
31dd0     00 00 FF FF 
31dd4     00 00 FF FF 
31dd8     00 00 FF FF 
31ddc     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
31de0                 |     
31de0                 | ' mailbox storage
31de0                 | 
31de0                 | mailboxes
31de0     00 00 00 00 
      ...             
31e38     00 00 00 00 
31e3c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
31e40                 | 	alignl
31e40                 | _psram16drv_spin2_dat_
31e40                 |                             orgh
31e40     00 00 00 00 
      ...             
31e58     00 00 00 00 
31e5c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
31e60                 | 
31e60                 | driver_start
31e60                 |                             org
31e60 000             | '..................................................................................................
31e60 000             | ' Memory layout for COG RAM once operational:
31e60 000             | '
31e60 000             | '  COG RAM address      Usage
31e60 000             | '  ---------------      ----
31e60 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
31e60 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
31e60 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
31e60 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
31e60 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
31e60 000             | '  ~$198-$1F3           State and register variables
31e60 000             | '
31e60 000             | ' Also during driver COG startup:
31e60 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
31e60 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
31e60 000             | '..................................................................................................
31e60 000             |                             
31e60 000             | ' Mailbox storage after vector initialization
31e60 000             | 
31e60 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
31e64 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
31e68 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
31e6c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
31e70 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
31e74 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
31e78 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
31e7c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
31e80 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
31e84 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
31e88 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
31e8c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
31e90 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
31e94 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
31e98 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
31e9c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
31ea0 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
31ea4 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
31ea8 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
31eac 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
31eb0 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
31eb4 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
31eb8 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
31ebc 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
31ec0 018             | 
31ec0 018             | ' Mailbox parameter addresses per COG once patched
31ec0 018             |                             
31ec0 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
31ec4 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
31ec8 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
31ecc 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
31ed0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
31ed4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
31ed8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
31edc 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
31ee0 020             | 
31ee0 020             | '..................................................................................................
31ee0 020             | ' Per COG request and state setup and service branching
31ee0 020             |         
31ee0 020             | cog0                 
31ee0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
31ee4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
31ee8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
31eec 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
31ef0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31ef4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31ef8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
31efc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
31f00 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
31f04 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31f08 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31f0c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
31f10 02c             | cog1                        
31f10 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
31f14 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
31f18 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
31f1c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
31f20 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31f24 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31f28 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
31f2c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
31f30 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
31f34 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31f38 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31f3c 037 33 CA 63 FD |                             execf   request-0               'jump to service
31f40 038             | cog2                         
31f40 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
31f44 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
31f48 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
31f4c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
31f50 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31f54 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31f58 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
31f5c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
31f60 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
31f64 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31f68 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31f6c 043 33 CA 63 FD |                             execf   request-0               'jump to service
31f70 044             | cog3                        
31f70 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
31f74 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
31f78 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
31f7c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
31f80 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31f84 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31f88 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
31f8c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
31f90 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
31f94 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31f98 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31f9c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
31fa0 050             | cog4                        
31fa0 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
31fa4 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
31fa8 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
31fac 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
31fb0 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31fb4 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31fb8 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
31fbc 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
31fc0 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
31fc4 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31fc8 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31fcc 05b 33 CA 63 FD |                             execf   request-0               'jump to service
31fd0 05c             | cog5                        
31fd0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
31fd4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
31fd8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
31fdc 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
31fe0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31fe4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31fe8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
31fec 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
31ff0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
31ff4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31ff8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31ffc 067 33 CA 63 FD |                             execf   request-0               'jump to service
32000 068             | cog6                        
32000 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
32004 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
32008 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3200c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
32010 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32014 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32018 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3201c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
32020 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
32024 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32028 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3202c 073 33 CA 63 FD |                             execf   request-0               'jump to service
32030 074             | cog7                        
32030 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
32034 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
32038 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3203c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
32040 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
32044 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
32048 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3204c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
32050 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
32054 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
32058 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3205c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
32060 080             |                             fit     128
32060 080             | 
32060 080             |                             fit     128
32060 080             | pad                         long    0[128-$]                'align init code to $80
32060 080             | 
32060 080             | '..................................................................................................
32060 080             | 
32060 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
32060 080             | 
32060 080             | init                        
32060 080             |                             ' get driver scratch long address in hub
32060 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
32064 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
32068 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3206c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
32070 084             |                     
32070 084             |                             ' read in the additional LUT RAM code
32070 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
32074 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
32078 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3207c 087             | 
3207c 087             |                             ' read the startup parameters
3207c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
32080 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
32084 089             | 
32084 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
32084 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
32088 08a             | 
32088 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3208c 08b 01 00 00 5F 
32090 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
32094 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
32098 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3209c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
320a0 090             | 
320a0 090             |                             ' setup data pin modes and data bus pin group in streamer commands
320a0 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
320a4 091 01 00 00 FF 
320a8 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
320ac 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
320b0 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
320b4 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
320b8 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
320bc 097 08 DE 47 F5 |                             or      a, #8
320c0 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
320c4 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
320c8 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
320cc 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
320d0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
320d4 09d 01 DE 07 F1 |                             add     a, #1
320d8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
320dc 09f             |  
320dc 09f             |                             ' setup device control pin states
320dc 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
320e0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
320e4 0a1 01 00 00 FF 
320e8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
320ec 0a3             | 
320ec 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
320f0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
320f4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
320f8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
320fc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
32100 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
32104 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
32108 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3210c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
32110 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
32114 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
32118 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3211c 0af             | pinloop
3211c 0af             |                             ' generate minimum CE high time before access
3211c 0af A1 07 00 FF 
32120 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
32124 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
32128 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3212c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
32130 0b4 1F DE 63 FD |                             waitx   a                       'delay
32134 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
32138 0b6             | 
32138 0b6             |                             ' setup the COG mailboxes and addresses 
32138 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3213c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
32140 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
32144 0b9             | 
32144 0b9 28 2E 64 FD |                             setq    #24-1
32148 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3214c 0bb             | 
3214c 0bb             |                             ' setup the polling loop for active COGs 
3214c 0bb 01 C2 63 FD |                             cogid   id
32150 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
32154 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
32158 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3215c 0bf 0A F0 07 F6 |                             mov     ptra, #10
32160 0c0 E1 F1 03 FA |                             mul     ptra, id
32164 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
32168 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3216c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
32170 0c4 03 C2 07 FA |                             mul     id, #3
32174 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
32178 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3217c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
32180 0c8 D8 01 B0 FD |                             call    #reloadcogs
32184 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
32188 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3218c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3218c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
32190 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
32194 0cd 08 04 DC FC |                             rep     #2, #8
32198 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3219c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
321a0 0d0             | 
321a0 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
321a0 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
321a0 0d0 01 C2 63 FD |                             cogid   id
321a4 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
321a8 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
321ac 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
321b0 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
321b4 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
321b8 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
321bc 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
321c0 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
321c4 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
321c8 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
321cc 0db 3F E4 A7 F9 |                             alti    d, #%111_111
321d0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
321d4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
321d8 0de A5 E5 03 F1 |                             add     d, const512
321dc 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
321e0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
321e4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
321e8 0e2             |                             
321e8 0e2             |                             ' setup register values for control vector loop setup after we return
321e8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
321ec 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
321f0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
321f4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
321f8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
321fc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
32200 0e8 D0 C3 8F F9 |                             altd    id, #id0
32204 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
32208 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3220c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
32210 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
32214 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
32218 0ee             |  
32218 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3221c 0ef 07 CA 07 F5 |                             and     request, #7
32220 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
32224 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
32228 0f2             |                             fit     $100                    'ensure all init code fits this space
32228 0f2             | 
32228 0f2             |                             fit     $100                    'ensure all init code fits this space
32228 0f2             | 
32228 0f2 00 00 00 00 
      ...             
32258 0fe 00 00 00 00 
3225c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
32260 100             | 
32260 100             | '..................................................................................................
32260 100             | ' Error result handling and COG notification of request completion
32260 100             | 
32260 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
32264 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
32268 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3226c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
32270 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
32274 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
32278 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3227c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
32280 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
32284 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
32288 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3228c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
32290 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
32294 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
32298 10e             | ' Poller re-starts here after a COG is serviced
32298 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3229c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
322a0 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
322a4 111             | ' Main dynamic polling loop repeats until a request arrives
322a4 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
322a8 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
322ac 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
322b0 114             | 
322b0 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
322b4 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
322b8 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
322bc 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
322c0 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
322c4 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
322c8 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
322cc 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
322d0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
322d4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
322d8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
322dc 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
322e0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
322e4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
322e8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
322ec 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
322f0 124             | 
322f0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
322f4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
322f8 126             |  
322f8 126             | '..................................................................................................
322f8 126             | ' List handler                               
322f8 126             | 
322f8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
322fc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
32300 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
32304 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
32308 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3230c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
32310 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
32314 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
32318 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3231c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
32320 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
32324 131 33 00 60 FD |                             execf   0-0                     'process the request 
32328 132             | 
32328 132             | '..................................................................................................
32328 132             | ' Restoring per COG state and resuming where we left off
32328 132             | 
32328 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3232c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
32330 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
32334 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
32338 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3233c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
32340 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
32344 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
32348 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3234c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
32350 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
32354 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
32358 13e             |                    
32358 13e             | '..................................................................................................
32358 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
32358 13e             | 
32358 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3235c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
32360 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
32364 141 D0 DF B7 F9 |                             setd    a, #id0
32368 142 D8 DF BF F9 |                             sets    a, #addr1
3236c 143 FE FF FF FF 
32370 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
32374 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
32378 146 3F DE A7 F9 |                             alti    a, #%111_111 
3237c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
32380 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
32384 149 01 E2 63 FD |                             cogid   c
32388 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3238c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
32390 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
32394 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
32398 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3239c 14f 00 E0 03 F6 |                             mov     b, 0-0
323a0 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
323a4 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
323a8 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
323ac 153 0C 00 90 AD |             if_z            jmp     #excluded               
323b0 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
323b4 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
323b8 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
323bc 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
323c0 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
323c4 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
323c8 15a             | 
323c8 15a             | 'determine priority cogs and build instructions for the polling sequence
323c8 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
323cc 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
323d0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
323d4 15d             | 
323d4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
323d8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
323dc 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
323e0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
323e4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
323e8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
323ec 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
323f0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
323f4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
323f8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
323fc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
32400 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
32404 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
32408 16a             | endprioloop
32408 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3240c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
32410 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
32414 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
32418 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3241c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
32420 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
32424 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
32428 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3242c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
32430 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
32434 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
32438 176             | 
32438 176             | ' populate the round robin COG polling instructions
32438 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3243c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
32440 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
32444 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
32448 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3244c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
32450 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
32454 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
32458 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3245c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
32460 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
32464 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
32468 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3246c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
32470 184             | '..................................................................................................
32470 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
32470 184             | 
32470 184             | set_latency                                                 '            (a) set latency
32470 184             | get_latency                                                 '            (b) get latency
32470 184             | set_burst                                                   '            (c) set burst size of bank
32470 184             | get_burst                                                   '            (d) get burst size of bank
32470 184             |                                                             '            (e) dump state
32470 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
32474 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
32478 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3247c 187             |                                                             ' | | | | e  account for following AUGS
3247c 187 04 00 00 FF 
32480 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
32484 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
32488 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3248c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
32490 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
32494 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
32498 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3249c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
324a0 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
324a4 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
324a8 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
324ac 193             | 
324ac 193             | '..................................................................................................
324ac 193             | ' Misc EXECF code
324ac 193             | 
324ac 193 33 72 63 FD | start_read_exec             execf   newburstr
324b0 194 33 7C 63 FD | start_write_exec            execf   resumewrites
324b4 195 33 78 63 FD | continue_read_exec          execf   lockedreads
324b8 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
324bc 197             | 
324bc 197             | '..................................................................................................
324bc 197             | ' Variables
324bc 197             | 
324bc 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
324c0 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
324c4 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
324c8 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
324cc 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
324d0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
324d4 19d             | 
324d4 19d 00 00 00 80 | xfreq1          long    $80000000
324d8 19e 00 00 00 40 | xfreq2          long    $40000000
324dc 19f 03 00 00 00 | delay           long    3
324e0 1a0             | 
324e0 1a0             | lutcodeaddr                 
324e0 1a0             | startupparams
324e0 1a0             | excludedcogs                                    'careful: shared register use!
324e0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
324e4 1a1 00 00 00 00 | flags           long    0
324e8 1a2             | mask                                            'careful: shared register use!
324e8 1a2 00 00 00 00 | resetmaskA      long    0
324ec 1a3             | limit                                           'careful: shared register use!
324ec 1a3 00 00 00 00 | resetmaskB      long    0
324f0 1a4 00 00 00 00 | datapins        long    0
324f4 1a5             | const512                                        'careful: shared register use!
324f4 1a5 00 00 00 00 | devicelist      long    0
324f8 1a6 00 00 00 00 | coglist         long    0
324fc 1a7 00 00 00 00 | mbox            long    0 
32500 1a8             | 
32500 1a8             | clkpin                                          'shared with code patched during init
32500 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
32504 1a9             | cspin                                           'shared with code patched during init
32504 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
32508 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3250c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
32510 1ac 01 00 00 00 | clkdelay        long    1
32514 1ad 00 00 00 00 | regdatabus      long    0
32518 1ae             | 
32518 1ae 10 00 00 00 | deviceaddr      long    $10
3251c 1af             | rrcounter
3251c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
32520 1b0             | 
32520 1b0             | ' jump addresses for the per COG handlers
32520 1b0 20 00 00 00 | cog0_handler    long    cog0
32524 1b1 2C 00 00 00 | cog1_handler    long    cog1
32528 1b2 38 00 00 00 | cog2_handler    long    cog2
3252c 1b3 44 00 00 00 | cog3_handler    long    cog3
32530 1b4 50 00 00 00 | cog4_handler    long    cog4
32534 1b5 5C 00 00 00 | cog5_handler    long    cog5
32538 1b6 68 00 00 00 | cog6_handler    long    cog6
3253c 1b7 74 00 00 00 | cog7_handler    long    cog7
32540 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
32544 1b9             | 
32544 1b9             | ' EXECF sequences
32544 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
32548 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3254c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
32550 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
32554 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
32558 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3255c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
32560 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
32560 1c0             | 
32560 1c0             | 
32560 1c0             | ' SKIPF sequences
32560 1c0             | skiptable
32560 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
32564 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
32568 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3256c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
32570 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
32574 1c5 00 00 00 00 | pattern2        long    0
32578 1c6 00 00 00 00 | pattern3        long    0
3257c 1c7 77 02 00 00 | singlelong      long    %1001110111  
32580 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
32584 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
32588 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3258c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
32590 1cc             | 
32590 1cc             | ' LUT RAM address values
32590 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
32594 1cd DD 02 00 00 | continue_read   long    continue_read_lut
32598 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3259c 1cf F6 02 00 00 | noread          long    noread_lut
325a0 1d0             | 
325a0 1d0 00 00 00 00 | id0             long    0
325a4 1d1 01 00 00 00 | id1             long    1
325a8 1d2 02 00 00 00 | id2             long    2
325ac 1d3 03 00 00 00 | id3             long    3
325b0 1d4 04 00 00 00 | id4             long    4
325b4 1d5 05 00 00 00 | id5             long    5
325b8 1d6 06 00 00 00 | id6             long    6
325bc 1d7 07 00 00 00 | id7             long    7
325c0 1d8             | 
325c0 1d8             | 'These next 10 request registers below are also temporarily reused during init 
325c0 1d8             | 'and COG updates and need to follow immediately after id0-id7
325c0 1d8 00 00 00 00 | addr1           long    0
325c4 1d9 00 00 00 00 | hubdata         long    0
325c8 1da 00 00 00 00 | count           long    0
325cc 1db 00 00 00 00 | addr2           long    0
325d0 1dc 00 00 00 00 | total           long    0
325d4 1dd 00 00 00 00 | offset1         long    0
325d8 1de 00 00 00 00 | offset2         long    0
325dc 1df 00 00 00 00 | link            long    0
325e0 1e0             | 
325e0 1e0             | burstwrite                                      'note shared register use during init
325e0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
325e4 1e1 00 00 00 00 | id              long    0
325e8 1e2             | 
325e8 1e2 00 00 00 00 | header          long    0
325ec 1e3 00 00 00 00 | trailer         long    0
325f0 1e4 00 00 00 00 | cmdaddr         long    0
325f4 1e5 00 00 00 00 | request         long    0
325f8 1e6 00 00 00 00 | rrlimit         long    0
325fc 1e7 00 00 00 00 | pinconfig       long    0
32600 1e8 00 00 00 00 | clks            long    0
32604 1e9 00 00 00 00 | resume          long    0
32608 1ea 00 00 00 00 | orighubsize     long    0
3260c 1eb 00 00 00 00 | wrclks          long    0
32610 1ec             | 
32610 1ec 00 00 00 00 | pattern         long    0
32614 1ed 00 00 00 00 | hubscratch      long    0
32618 1ee 00 10 00 00 | val4k           long    4096
3261c 1ef             | 
3261c 1ef             | ' temporary general purpose regs
3261c 1ef 00 00 00 00 | a               long    0
32620 1f0 00 00 00 00 | b               long    0
32624 1f1 00 00 00 00 | c               long    0
32628 1f2 00 00 00 00 | d               long    0
3262c 1f3             |                 fit     502
3262c 1f3             | 
3262c 1f3             |                 fit     502
3262c 1f3             | 
3262c 1f3             | '..................................................................................................
3262c 1f3             | 
3262c 1f3             |             orgh
3262c                 | 
3262c                 | lut_code
3262c                 | 'HW init code up to 80 longs
3262c                 | 
3262c                 | '..................................................................................................
3262c                 | ' Memory layout for LUT RAM once operational:
3262c                 | '
3262c                 | '  LUT RAM address      Usage
3262c                 | '  ---------------      ----
3262c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3262c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3262c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3262c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3262c                 | '
3262c                 | ' Also during driver COG startup:
3262c                 | ' $230-$24F is used for HW init setup
3262c                 | ' $250-$26F is used as temporary vector storage 
3262c                 | '..................................................................................................
3262c                 | 
3262c                 |                 org $230    
3262c 230             | 
3262c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3262c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
32630 231 24 16 60 FD |                             pollxfi
32634 232 FF AA 2A FF 
32638 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3263c 234 28 00 B0 FD |                             call    #sendqspi
32640 235 07 F8 07 FF 
32644 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
32648 237 28 00 B0 FD |                             call    #sendspi
3264c 238 F8 07 78 FF 
32650 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
32654 23a 1C 00 B0 FD |                             call    #sendspi
32658 23b 7F 78 78 FF 
3265c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
32660 23d 10 00 B0 FD |                             call    #sendspi 
32664 23e 2D 00 64 FD |                             ret
32668 23f             | 
32668 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3266c 240 32 0C 64 FD |                             skipf   #%110
32670 241 9C EF 03 F6 |                             mov     pb, xsendimm
32674 242             | 
32674 242 10 D0 07 F6 | sendspi                     mov     clks, #16
32678 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3267c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
32680 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
32684 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
32688 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3268c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
32690 249 50 48 63 FD |                             fltl    datapins                'float data bus
32694 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
32698 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3269c 24c             | 
3269c 24c 00 00 00 00 
326a0 24d 00 00 00 00 
326a4 24e 00 00 00 00 
326a8 24f 00 00 00 00 |                 long    0[$270-32-$]
326ac 250             |                 fit     $270-32  ' keep room for 32 vector longs
326ac 250             |     
326ac 250             |                 fit     $270-32  ' keep room for 32 vector longs
326ac 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
326ac 250             | rw_vect ' PSRAM jump vectors
326ac 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
326b0 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
326b4 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
326b8 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
326bc 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
326c0 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
326c4 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
326c8 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
326cc 258             | ro_vect ' R/O PSRAM jump vectors
326cc 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
326d0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
326d4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
326d8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
326dc 25c 00 01 00 00 |                 long    unsupported
326e0 25d 00 01 00 00 |                 long    unsupported
326e4 25e 00 01 00 00 |                 long    unsupported
326e8 25f 00 01 00 00 |                 long    unsupported
326ec 260             | ctrl_vect ' Control jump vectors
326ec 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
326f0 261 00 01 00 00 |                 long    unsupported
326f4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
326f8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
326fc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
32700 265 00 01 00 00 |                 long    unsupported
32704 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
32708 267 3E 01 00 00 |                 long    reconfig 
3270c 268             | no_vect ' Invalid bank jump vectors
3270c 268 01 01 00 00 |                 long    invalidbank
32710 269 01 01 00 00 |                 long    invalidbank
32714 26a 01 01 00 00 |                 long    invalidbank
32718 26b 01 01 00 00 |                 long    invalidbank
3271c 26c 01 01 00 00 |                 long    invalidbank
32720 26d 01 01 00 00 |                 long    invalidbank
32724 26e 01 01 00 00 |                 long    invalidbank
32728 26f 01 01 00 00 |                 long    invalidbank
3272c 270             |                 fit     $270
3272c 270             | 
3272c 270             |                 fit     $270
3272c 270             | '..................................................................................................
3272c 270             | ' PSRAM READS
3272c 270             |                                                             ' a b c d e f
3272c 270             |                                                             ' B W L B R L  (a) byte read
3272c 270             |                                                             ' Y O O U E O  (b) word read
3272c 270             |                                                             ' T R N R S C  (c) long read
3272c 270             |                                                             ' E D G S U K  (d) new burst read
3272c 270             |                                                             '       T M E  (e) resumed sub-burst
3272c 270             |                                                             '         E D  (f) locked sub-burst
3272c 270             | 
3272c 270             | 
3272c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
32730 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
32734 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
32738 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3273c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
32740 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
32744 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
32748 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3274c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
32750 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
32754 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
32758 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3275c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
32760 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
32764 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
32768 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3276c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
32770 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
32774 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
32778 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3277c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
32780 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
32784 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
32788 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3278c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
32790 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
32794 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
32798 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3279c 28c             | 
3279c 28c             |                             ' fall through to read bursts
3279c 28c             |                         
3279c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3279c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
327a0 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
327a4 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
327a8 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
327ac 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
327b0 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
327b4 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
327b8 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
327bc 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
327c0 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
327c4 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
327c8 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
327cc 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
327d0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
327d4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
327d8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
327dc 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
327e0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
327e4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
327e8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
327ec 2a0 E8 D1 03 F1 |                             add     clks, clks
327f0 2a1             | readcommon
327f0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
327f4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
327f8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
327fc 2a4             | 
327fc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
32800 2a5 69 C8 63 FD |                             rev     cmdaddr
32804 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
32808 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3280c 2a8             | 
3280c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
32810 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
32814 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
32814 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
32818 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3281c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
32820 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
32824 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
32824 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
32828 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3282c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
32830 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
32834 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
32838 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3283c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3283c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
32840 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
32844 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
32848 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3284c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
32850 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
32854 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
32858 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3285c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
32860 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
32864 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
32868 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3286c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
32870 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
32874 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
32874 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
32878 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3287c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
32880 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
32884 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
32888 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3288c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
32890 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
32894 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
32898 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3289c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
328a0 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
328a4 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
328a8 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
328ac 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
328b0 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
328b4 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
328b8 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
328bc 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
328c0 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
328c4 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
328c8 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
328cc 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
328d0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
328d4 2da 10 03 90 FD |                             jmp     #writecommon
328d8 2db             | 
328d8 2db             | '..................................................................................................
328d8 2db             | ' Burst continuation testing
328d8 2db             | 
328d8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
328dc 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
328e0 2dd             | continue_read_lut          
328e0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
328e4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
328e8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
328ec 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
328f0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
328f4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
328f8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
328fc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
32900 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
32904 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
32908 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3290c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
32910 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
32914 2ea             | 
32914 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
32918 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3291c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
32920 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
32924 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
32928 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3292c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
32930 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
32934 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
32938 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3293c 2f4 2A 1C 66 0D |             _ret_           push    #poller
32940 2f5             | 
32940 2f5             | 
32940 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
32944 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
32944 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
32948 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3294c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
32950 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
32954 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
32958 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3295c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
32960 2fd 2D 00 64 FD |                             ret                             ' | continue processing
32964 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
32968 2ff             | '..................................................................................................
32968 2ff             | ' Completion of requests
32968 2ff             | 
32968 2ff             | complete_rw_lut             
32968 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3296c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
32970 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
32974 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
32978 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3297c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
32980 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
32984 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
32988 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3298c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
32990 309 32 62 64 AD |             if_z            skipf   #%110001
32994 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
32998 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3299c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
329a0 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
329a4 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
329a8 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
329ac 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
329b0 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
329b4 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
329b8 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
329bc 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
329c0 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
329c4 316             |                                                             ' skipcase (a) gfx copy to/from hub
329c4 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
329c4 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
329c4 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
329c8 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
329cc 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
329d0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
329d4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
329d8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
329dc 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
329e0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
329e4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
329e8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
329ec 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
329f0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
329f4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
329f8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
329fc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
32a00 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
32a04 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
32a08 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
32a0c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
32a10 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
32a14 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
32a18 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
32a1c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
32a20 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
32a24 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
32a28 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
32a2c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
32a30 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
32a34 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
32a38 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
32a3c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
32a40 335 DF B7 03 A6 |             if_z            mov     addr2, link
32a44 336 34 FF 9F AD |             if_z            jmp     #checknext
32a48 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
32a4c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
32a50 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
32a54 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
32a58 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
32a5c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
32a60 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
32a64 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
32a68 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
32a6c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
32a70 341             | 
32a70 341             | '..................................................................................................
32a70 341             | ' PSRAM WRITES
32a70 341             |                                                             '  a b c d e f g h
32a70 341             | 
32a70 341             |                                                             '  B W L F B R L L (a) byte write(s)
32a70 341             |                                                             '  Y O O I U E O O (b) word write(s)
32a70 341             |                                                             '  T R N L R S C C (c) long write(s)
32a70 341             |                                                             '  E D G L S U K K (d) resumed fill
32a70 341             |                                                             '          T M E E (e) new burst write
32a70 341             |                                                             '            E D D (f) resumed burst
32a70 341             |                                                             '              F B (g) locked fill
32a70 341             |                                                             '              I U (h) locked burst write
32a70 341             |                                                             '              L R 
32a70 341             |                                                             '              L S 
32a70 341             |                                                             '                T 
32a70 341             | 
32a70 341             | w_single                   
32a70 341             | w_fill_cont           
32a70 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
32a74 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
32a78 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
32a7c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
32a80 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
32a84 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
32a88 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
32a8c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
32a90 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
32a94 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
32a98 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
32a9c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
32aa0 34d             |                ' disable call to r_resume_burst for single longs when z=0
32aa0 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
32aa4 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
32aa8 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
32aac 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
32ab0 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
32ab4 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
32ab8 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
32abc 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
32ac0 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
32ac4 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
32ac8 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
32acc 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
32ad0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
32ad4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
32ad8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
32adc 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
32ae0 35d             |         
32ae0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
32ae0 35d             |             '
32ae0 35d             |             '  At least one of these 3 optional components will be sent
32ae0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
32ae0 35d             |             '     body - N x full longs of data
32ae0 35d             |             '     trailer - last partial long of data
32ae0 35d             |             '
32ae0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
32ae0 35d             |             '
32ae0 35d             |             'Case    Type                           Sends
32ae0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
32ae0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
32ae0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
32ae0 35d             |             ' 4)     Multiple long fill             body only
32ae0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
32ae0 35d             | 
32ae0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
32ae0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
32ae4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
32ae8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
32aec 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
32af0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
32af4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
32af8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
32afc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
32b00 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
32b04 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
32b08 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
32b0c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
32b10 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
32b14 36a             |                             
32b14 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
32b18 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
32b1c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
32b20 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
32b24 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
32b28 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
32b2c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
32b30 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
32b34 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
32b38 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
32b3c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
32b40 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
32b44 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
32b48 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
32b4c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
32b50 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
32b54 37a             | 
32b54 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
32b58 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
32b5c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
32b60 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
32b64 37e             |                  
32b64 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
32b68 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
32b6c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
32b70 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
32b74 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
32b78 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
32b7c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
32b80 385             | 
32b80 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
32b84 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
32b88 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
32b8c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
32b90 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
32b94 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
32b98 38b             | 
32b98 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
32b98 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
32b9c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
32ba0 38d 2A B0 63 FD |                             push    addr1                   'save address
32ba4 38e             | 
32ba4 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
32ba4 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
32ba8 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
32bac 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
32bb0 391             |             
32bb0 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
32bb4 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
32bb8 393 2B B0 63 FD |                             pop     addr1                   'restore address
32bbc 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
32bc0 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
32bc4 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
32bc8 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
32bcc 398             | 
32bcc 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
32bd0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
32bd4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
32bd8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
32bdc 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
32be0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
32be4 39e             | 
32be4 39e             |                             'trailer is done
32be4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
32be8 39f             | 
32be8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
32bec 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
32bf0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
32bf4 3a2             | 
32bf4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
32bf8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
32bfc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
32c00 3a5 61 C8 63 FD |                             mergeb  cmdaddr
32c04 3a6             |                             
32c04 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
32c08 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
32c0c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
32c10 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
32c14 3aa             |                                                          
32c14 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
32c18 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
32c1c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
32c20 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
32c24 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
32c28 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
32c2c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
32c30 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
32c34 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
32c38 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
32c3c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
32c40 3b5             |  
32c40 3b5 59 52 63 FD |                             drvh    cspin
32c44 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
32c48 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
32c4c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
32c50 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
32c54 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
32c58 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
32c5c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
32c60 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
32c64 3be EA E5 03 F6 |                             mov     d, orighubsize
32c68 3bf EF E5 63 F0 |                             shl     d, a
32c6c 3c0 F2 E3 83 F1 |                             sub     c, d
32c70 3c1 DD E3 03 F1 |                             add     c, offset1
32c74 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
32c78 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
32c7c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
32c80 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
32c84 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
32c88 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
32c8c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
32c90 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
32c94 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
32c98 3cb BB D3 03 F6 |                             mov     resume, restorefill
32c9c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
32ca0 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
32ca4 3ce 6C FC BF CD |             if_c            call    #yield
32ca8 3cf 2D 00 64 FD |                             ret
32cac 3d0             |                            
32cac 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
32cac 3d0             |                       '     rczl    pa                      'rotate left into address offset
32cac 3d0             |                       '     rczl    c wcz                   'restore count and flags
32cac 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
32cb0 3d1 02 EC 67 F0 |                             shl     pa, #2
32cb4 3d2 28 06 64 AD |             if_z            setq    #3
32cb8 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
32cbc 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
32cc0 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
32cc4 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
32cc8 3d7             | 
32cc8 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
32ccc 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
32cd0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
32cd4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
32cd8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
32cdc 3dc             |                 fit 1024-32
32cdc 3dc             |         
32cdc 3dc             | 
32cdc 3dc             | '..................................................................................................
32cdc 3dc             | 
32cdc 3dc             |                 fit 1024-32
32cdc 3dc 00 00 00 00 
32ce0 3dd 00 00 00 00 
32ce4 3de 00 00 00 00 
32ce8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
32cec 3e0             |                 org 1024-32
32cec 000             | 
32cec 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
32cec 000 00 00 00 00 |                 long $0000
32cf0 001 11 11 00 00 |                 long $1111
32cf4 002 22 22 00 00 |                 long $2222
32cf8 003 33 33 00 00 |                 long $3333
32cfc 004 44 44 00 00 |                 long $4444
32d00 005 55 55 00 00 |                 long $5555
32d04 006 66 66 00 00 |                 long $6666
32d08 007 77 77 00 00 |                 long $7777
32d0c 008 88 88 00 00 |                 long $8888
32d10 009 99 99 00 00 |                 long $9999
32d14 00a AA AA 00 00 |                 long $aaaa
32d18 00b BB BB 00 00 |                 long $bbbb
32d1c 00c CC CC 00 00 |                 long $cccc
32d20 00d DD DD 00 00 |                 long $dddd
32d24 00e EE EE 00 00 |                 long $eeee
32d28 00f FF FF 00 00 |                 long $ffff
32d2c 010             | 
32d2c 010             | 'masks
32d2c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
32d30 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
32d34 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
32d38 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
32d3c 014             | 
32d3c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
32d40 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
32d44 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
32d48 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
32d4c 018             | 
32d4c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
32d50 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
32d54 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
32d58 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
32d5c 01c             | 
32d5c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
32d60 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
32d64 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
32d68 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
32d6c 020             |         fit 1024
32d6c 020             | 
32d6c 020             |         fit 1024
32d6c 020             | 
32d6c 020             | '--------------------------------------------------------------------------------------------------
32d6c 020             |         orgh
32d6c                 | 
32d6c                 | gfxexpansion
32d6c                 |                             'simple line drawing graphics expansion of memory driver
32d6c                 |                             'jmp     #donerepeats                'just return for now
32d6c                 | 
32d6c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
32d70     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
32d74     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
32d78     DD E1 03 F6 |                             mov     b, offset1              'get error term
32d7c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
32d80     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
32d84     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
32d88     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
32d8c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
32d90     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
32d94     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
32d98     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
32d9c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
32da0     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
32da4     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
32da8     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
32dac     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
32db0     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
32db4     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
32db8     DC E5 33 F9 |                             getword d, total, #0            'get line width
32dbc     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
32dc0     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
32dc4     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
32dc8     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
32dcc     C3 03 80 FD |                             jmp     #readmask               'continue filling
32dd0                 | 	alignl
32dd0                 | _usbnew_spin2_dat_
32dd0                 |                 org     $000
32dd0 000             | 
32dd0 000             | usb_host_start
32dd0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
32dd4 001             | 
32dd4 001 03 00 00 FF 
32dd8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
32ddc 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
32de0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
32de4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
32de8 006 29 70 63 FD |                 setq2   htmp
32dec 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
32df0 008             | 
32df0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
32df4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
32df8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
32dfc 00b             | 
32dfc 00b             | '------------------------------------------------------------------------------
32dfc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
32dfc 00b             | ' special because the receiving function must not respond with either STALL or
32dfc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
32dfc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
32dfc 00b             | ' corrupt packet, it must ignore the transaction
32dfc 00b             | '------------------------------------------------------------------------------
32dfc 00b             | ' On entry:
32dfc 00b             | '   PTRA - start address of the SETUP data struct.
32dfc 00b             | ' On exit:
32dfc 00b             | '   retval - PID_ACK on success, otherwise error code.
32dfc 00b             | '------------------------------------------------------------------------------
32dfc 00b             | txn_setup
32dfc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
32e00 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
32e04 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
32e08 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
32e0c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
32e10 010             | .setup
32e10 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
32e14 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32e18 012 2D 00 64 AD |         if_z    ret
32e1c 013 7C 0B B0 FD |                 call    #retry_wait
32e20 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
32e24 015 2D 00 64 AD |         if_z    ret
32e28 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
32e2c 017 E0 FF 9F FD |                 jmp     #.setup
32e30 018             | 
32e30 018             | '------------------------------------------------------------------------------
32e30 018             | ' IN/INTERRUPT transaction.
32e30 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
32e30 018             | '------------------------------------------------------------------------------
32e30 018             | ' On entry:
32e30 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
32e30 018             | '     CRC(b19..23).
32e30 018             | ' On exit:
32e30 018             | '------------------------------------------------------------------------------
32e30 018             | txn_in
32e30 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
32e34 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
32e38 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
32e3c 01b             | 
32e3c 01b             |                 ' Fall through to urx_packet
32e3c 01b             | 
32e3c 01b             | '------------------------------------------------------------------------------
32e3c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
32e3c 01b             | ' received are handshakes and IN DATAx.
32e3c 01b             | '------------------------------------------------------------------------------
32e3c 01b             | ' On entry:
32e3c 01b             | ' On exit:
32e3c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
32e3c 01b             | '     returned.
32e3c 01b             | '------------------------------------------------------------------------------
32e3c 01b             | urx_packet
32e3c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
32e40 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32e44 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
32e48 01e 1A 92 63 FD |                 getct   hct2
32e4c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
32e50 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
32e54 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
32e58 022             | .wait_sop
32e58 022 22 A7 8A FA |                 rdpin   urx, dm
32e5c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32e60 024 08 00 90 CD |         if_c    jmp     #.get_pid
32e64 025 FC 25 CC FB |                 jnct2   #.wait_sop
32e68 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
32e6c 027             | .get_pid
32e6c 027 28 02 B0 FD |                 call    #urx_next
32e70 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
32e74 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
32e78 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
32e7c 02b             | .chk_pid
32e7c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32e80 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
32e84 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
32e88 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
32e8c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
32e90 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
32e94 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
32e98 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
32e9c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
32ea0 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
32ea4 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
32ea8 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
32eac 037             | .ack_resend
32eac 037 22 A7 82 FA |                 rqpin   urx, dm
32eb0 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
32eb4 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
32eb8 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
32ebc 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
32ec0 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
32ec4 03d             | .chk_eop
32ec4 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
32ec8 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
32ecc 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
32ed0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
32ed4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
32ed8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
32edc 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
32ee0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
32ee4 045 2D 00 64 FD |                 ret
32ee8 046             | .idle
32ee8 046 22 A7 82 FA |                 rqpin   urx, dm
32eec 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
32ef0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
32ef4 049 2D 00 64 FD |                 ret
32ef8 04a             | 
32ef8 04a             | '------------------------------------------------------------------------------
32ef8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
32ef8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
32ef8 04a             | ' if one is required.
32ef8 04a             | '------------------------------------------------------------------------------
32ef8 04a             | ' On entry:
32ef8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
32ef8 04a             | ' On exit:
32ef8 04a             | '------------------------------------------------------------------------------
32ef8 04a             | utx_token
32ef8 04a 22 A7 82 FA |                 rqpin   urx, dm
32efc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
32f00 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
32f04 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
32f08 04e 34 0D B0 CD |         if_c    call    #utx_pre
32f0c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
32f10 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
32f14 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
32f18 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
32f1c 053             | .next_byte
32f1c 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
32f20 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
32f24 055             | .wait
32f24 055 40 46 72 FD |                 testp   dp                      wc
32f28 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
32f2c 057 23 03 08 FC |                 akpin   dp
32f30 058 22 A5 22 FC |                 wypin   utx, dm
32f34 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
32f38 05a             | 
32f38 05a             | '------------------------------------------------------------------------------
32f38 05a             | ' SETUP/OUT/INTERRUPT transaction.
32f38 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
32f38 05a             | '------------------------------------------------------------------------------
32f38 05a             | ' On entry:
32f38 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
32f38 05a             | '     CRC(b19..23).
32f38 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
32f38 05a             | '   pkt_data - count of DATAx payload bytes to send.
32f38 05a             | ' On exit:
32f38 05a             | '------------------------------------------------------------------------------
32f38 05a             | txn_out
32f38 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
32f3c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
32f40 05c 00 00 C0 FF 
32f44 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
32f48 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
32f4c 05f             | 
32f4c 05f             |                 ' Fall through to utx_data
32f4c 05f             | 
32f4c 05f             | '------------------------------------------------------------------------------
32f4c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
32f4c 05f             | ' calculated while the data byte is being shifted out. Since data stage
32f4c 05f             | ' success/fail is not determined until the status stage of the transaction,
32f4c 05f             | ' this routine is only concerned about the current DATAx packet.
32f4c 05f             | '------------------------------------------------------------------------------
32f4c 05f             | ' On entry:
32f4c 05f             | '   PTRA - hub start address of the data to read.
32f4c 05f             | '   pkt_cnt - data payload size.
32f4c 05f             | ' On exit:
32f4c 05f             | '------------------------------------------------------------------------------
32f4c 05f             | utx_data
32f4c 05f 22 A7 82 FA |                 rqpin   urx, dm
32f50 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32f54 061 F4 FF 9F CD |         if_c    jmp     #utx_data
32f58 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
32f5c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
32f60 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
32f64 065 D8 0C B0 CD |         if_c    call    #utx_pre
32f68 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
32f6c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
32f70 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
32f74 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
32f78 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
32f7c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
32f80 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
32f84 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
32f88 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
32f8c 06f             | .read_byte
32f8c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
32f90 070 F0 00 B0 FD |                 call    #utx_byte
32f94 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
32f98 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
32f9c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
32fa0 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
32fa4 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
32fa8 076             | .send_crc
32fa8 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
32fac 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
32fb0 078 D0 00 B0 FD |                 call    #utx_byte
32fb4 079 5D A5 EA F8 |                 getbyte utx, crc, #1
32fb8 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
32fbc 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
32fc0 07c             | 
32fc0 07c             | '------------------------------------------------------------------------------
32fc0 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
32fc0 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
32fc0 07c             | ' expects that the packet includes at least the CRC word.
32fc0 07c             | '
32fc0 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
32fc0 07c             | ' was requested, which makes it difficult to determine where the data stops
32fc0 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
32fc0 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
32fc0 07c             | ' USB-16 expected residual value of 0xB001.
32fc0 07c             | '
32fc0 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
32fc0 07c             | ' so the caller can verify IN success before writing the data to its final
32fc0 07c             | ' destination.
32fc0 07c             | '------------------------------------------------------------------------------
32fc0 07c             | ' On entry:
32fc0 07c             | '   pkt_data - max byte count expected to be in the packet.
32fc0 07c             | '   newb_flg - signals new byte ready when toggled.
32fc0 07c             | ' On exit:
32fc0 07c             | '   pkt_cnt - actual number of bytes read.
32fc0 07c             | '------------------------------------------------------------------------------
32fc0 07c             | urx_data
32fc0 07c F7 75 03 F6 |                 mov     htmp2, pb
32fc4 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
32fc8 07e 00 00 C0 FF 
32fcc 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
32fd0 080 BA EF 03 F6 |                 mov     pb, htmp2
32fd4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
32fd8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
32fdc 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
32fe0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
32fe4 085             | .wait_byte
32fe4 085             | ' In-line rx for max speed
32fe4 085 22 A7 82 FA |                 rqpin   urx, dm
32fe8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
32fec 087 53 A5 02 F5 |                 and     utx, urx
32ff0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
32ff4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
32ff8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
32ffc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
33000 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
33004 08d DC FF 9F FD |                 jmp     #.wait_byte
33008 08e             | .get_byte
33008 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3300c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
33010 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
33014 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
33018 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3301c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
33020 094             | .end_crc
33020 094 01 B8 06 F1 |                 add     pkt_cnt, #1
33024 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
33028 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3302c 097 2D 00 64 1D |         if_a    ret
33030 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
33030 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
33030 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
33030 098             | ' to miss it, so cheat a bit and look for SOP clear here.
33030 098 22 A7 82 FA |                 rqpin   urx, dm
33034 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
33038 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3303c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3303c 09b             | .chk_crc
3303c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
33040 09c 58 00 00 FF 
33044 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
33048 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3304c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
33050 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
33054 0a1 34 09 B0 FD |                 call    #poll_waitx
33058 0a2             | 
33058 0a2             |                 ' Fall through to utx_handshake
33058 0a2             | 
33058 0a2             | '------------------------------------------------------------------------------
33058 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
33058 0a2             | ' the appropriate IP delay has been inserted.
33058 0a2             | '------------------------------------------------------------------------------
33058 0a2             | ' On entry:
33058 0a2             | '   retval - handshake PID to send.
33058 0a2             | ' On exit:
33058 0a2             | '   retval unchanged.
33058 0a2             | '------------------------------------------------------------------------------
33058 0a2             | utx_handshake
33058 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3305c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
33060 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
33064 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
33068 0a6 5F A5 02 F6 |                 mov     utx, retval
3306c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
33070 0a8             | .idle
33070 0a8 22 A7 82 FA |                 rqpin   urx, dm
33074 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
33078 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3307c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
33080 0ac 08 09 90 FD |                 jmp     #poll_waitx
33084 0ad             | 
33084 0ad             | '------------------------------------------------------------------------------
33084 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
33084 0ad             | '------------------------------------------------------------------------------
33084 0ad             | ' On entry:
33084 0ad             | '   utx - byte to transmit.
33084 0ad             | ' On exit:
33084 0ad             | '------------------------------------------------------------------------------
33084 0ad             | utx_byte
33084 0ad 40 46 72 FD |                 testp   dp                      wc
33088 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3308c 0af 23 03 08 FC |                 akpin   dp
33090 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
33094 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
33098 0b2             | 
33098 0b2             | '------------------------------------------------------------------------------
33098 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
33098 0b2             | '------------------------------------------------------------------------------
33098 0b2             | ' On entry:
33098 0b2             | ' On exit:
33098 0b2             | '   retval - the byte read.
33098 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
33098 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
33098 0b2             | '     received.
33098 0b2             | '------------------------------------------------------------------------------
33098 0b2             | urx_next
33098 0b2 22 A7 8A FA |                 rdpin   urx, dm
3309c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
330a0 0b4 53 A5 02 F5 |                 and     utx, urx
330a4 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
330a8 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
330ac 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
330b0 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
330b4 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
330b8 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
330bc 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
330c0 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
330c4 0bd 2D 00 64 FD |                 ret
330c8 0be             | 
330c8 0be             | '------------------------------------------------------------------------------
330c8 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
330c8 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
330c8 0be             | ' length, and the PID is not included in the CRC calculation:
330c8 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
330c8 0be             | '  CRC5  ENDP ADDRESS PID
330c8 0be             | ' %00000_1111_1111111_xxxxxxxx
330c8 0be             | '------------------------------------------------------------------------------
330c8 0be             | ' On entry:
330c8 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
330c8 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
330c8 0be             | ' On exit:
330c8 0be             | '   ep_addr_pid - CRC value appended to the packet.
330c8 0be             | '------------------------------------------------------------------------------
330c8 0be             | calc_crc5
330c8 0be FF 03 00 FF 
330cc 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
330d0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
330d4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
330d8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
330dc 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
330e0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
330e4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
330e8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
330ec 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
330f0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
330f4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
330f8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
330fc 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
33100 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
33104 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
33108 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3310c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
33110 0d0             | 
33110 0d0             | '------------------------------------------------------------------------------
33110 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
33110 0d0             | '------------------------------------------------------------------------------
33110 0d0             | isr1_fsframe
33110 0d0 1A 92 62 FD |                 getct   iframe_ct_base
33114 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33118 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3311c 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
33120 0d4             | .wait
33120 0d4 40 46 72 FD |                 testp   dp                      wc
33124 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
33128 0d6 23 03 08 FC |                 akpin   dp
3312c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
33130 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
33134 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
33138 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3313c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
33140 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
33144 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
33148 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3314c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
33150 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
33154 0e1 2C FF BF FD |                 call    #utx_byte
33158 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3315c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
33160 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
33164 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
33168 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3316c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
33170 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
33174 0e9 5B A5 42 F5 |                 or      utx, icrc
33178 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3317c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
33180 0ec 20 00 90 FD |                 jmp     #isr1_wait
33184 0ed             | isr1_lsframe
33184 0ed 1A 92 62 FD |                 getct   iframe_ct_base
33188 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3318c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33190 0f0             | .wait
33190 0f0 40 46 72 FD |                 testp   dp                      wc
33194 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
33198 0f2 23 03 08 FC |                 akpin   dp
3319c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
331a0 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
331a4 0f5             | isr1_wait
331a4 0f5 22 A5 82 FA |                 rqpin   utx, dm
331a8 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
331ac 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
331b0 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
331b4 0f9 03 00 00 FF 
331b8 0fa FF B3 06 F5 |                 and     frame, ##$7ff
331bc 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
331c0 0fc F5 FF 3B FB |                 reti1
331c4 0fd             | 
331c4 0fd             | '------------------------------------------------------------------------------
331c4 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
331c4 0fd             | ' transaction will complete before the next frame is triggered.
331c4 0fd             | '------------------------------------------------------------------------------
331c4 0fd             | ' On entry:
331c4 0fd             | ' On exit:
331c4 0fd             | '------------------------------------------------------------------------------
331c4 0fd             | wait_txn_ok
331c4 0fd 1A 74 63 FD |                 getct   htmp2
331c8 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
331cc 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
331d0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
331d4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
331d8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
331dc 103 2D 00 64 FD |                 ret
331e0 104             | 
331e0 104             | '------------------------------------------------------------------------------
331e0 104             | ' A device connection was detected, or a bus reset was requested by the USB
331e0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
331e0 104             | ' and perform a reset sequence prior to device enumeration.
331e0 104             | '------------------------------------------------------------------------------
331e0 104             | dev_reset
331e0 104 22 A7 82 FA |                 rqpin   urx, dm
331e4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
331e8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
331ec 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
331f0 108             | reset
331f0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
331f4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
331f8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
331fc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33200 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
33204 10d 1A 92 62 FD |                 getct   iframe_ct_base
33208 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3320c 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
33210 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
33214 111 24 70 07 F1 |                 add     htmp, #36
33218 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3321c 113             | .framewait
3321c 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
33220 114 F8 FF 9F CD |         if_b    jmp     #.framewait
33224 115 2D 00 64 FD |                 ret
33228 116             | 
33228 116             | '------------------------------------------------------------------------------
33228 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
33228 116             | '------------------------------------------------------------------------------
33228 116             | ' On entry:
33228 116             | '   PTRA - source address.
33228 116             | '   PB - destination address.
33228 116             | '   hr0 - length of copy, in bytes.
33228 116             | ' On exit:
33228 116             | '------------------------------------------------------------------------------
33228 116             | hmemcpy
33228 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3322c 117 F7 71 43 FC |                 wrbyte  htmp, pb
33230 118 01 EE 07 F1 |                 add     pb, #1
33234 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
33238 11a             | 
33238 11a             | '------------------------------------------------------------------------------
33238 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
33238 11a             | ' loop until the errant device is disconnected.
33238 11a             | '------------------------------------------------------------------------------
33238 11a             | ' On entry:
33238 11a             | ' On exit:
33238 11a             | '------------------------------------------------------------------------------
33238 11a             | host_error
33238 11a             |           if ERROR_LED >= 0
33238 11a             |           end
33238 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3323c 11b             | 
3323c 11b             | '------------------------------------------------------------------------------
3323c 11b             | ' Get HID descriptor buffer for current port
3323c 11b             | '------------------------------------------------------------------------------
3323c 11b             | ' On entry:
3323c 11b             | ' On exit:
3323c 11b             | '   PB - HID descriptor buffer pointer
3323c 11b             | '------------------------------------------------------------------------------
3323c 11b             | get_hid_descr_buffer
3323c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
33240 11c 01 EE E7 F2 |                 cmpsub  pb, #1
33244 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
33248 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3324c 11f             | 
3324c 11f             | 
3324c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
33250 120             | 
33250 120             | ' USB commands and error codes
33250 120 00 00 00 00 | cmd_data        long    0
33254 121 00 00 00 00 | usb_err_code    long    ERR_NONE
33258 122             | 
33258 122             | ' Parameters block assigned at cog startup
33258 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3325c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
33260 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
33264 125             | if ACTIVITY_LED >= 0
33264 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
33264 125             | end
33264 125             | if ERROR_LED >= 0
33264 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
33264 125             | end
33264 125 00 00 00 00 | hid_descr_p     long    0
33268 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
33268 126             | 'hkbd_report_p   long    0
33268 126 00 00 00 00 | hub_descr_p     long    0
3326c 127 00 00 00 00 | urx_buff_p      long    0
33270 128 00 00 00 00 | dev_desc_buff_p long    0
33274 129 00 00 00 00 | con_desc_buff_p long    0
33278 12a 00 00 00 00 | cache_start_p   long    0
3327c 12b 00 00 00 00 | cache_end_p     long    0
33280 12c             | if EMUPAD_MAX_PLAYER > 0
33280 12c             | emupad_out_ptr  long    0
33280 12c             | end
33280 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
33284 12d             | 
33284 12d             | hdev_init_start
33284 12d             | hdev_port       res     1
33284 12d             | hdev_port       res     1
33284 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
33284 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
33284 12d             | kbm_next_datax  res     1
33284 12d             | kbm_next_datax  res     1
33284 12d             | hub_intf_num    res     1
33284 12d             | hub_intf_num    res     1
33284 12d             | hub_next_datax  res     1
33284 12d             | hub_next_datax  res     1
33284 12d             | hub_status_chg  res     1
33284 12d             | hub_status_chg  res     1
33284 12d             | hub_port_status res     1
33284 12d             | hub_port_status res     1
33284 12d             | if HAVE_MOUSE
33284 12d             | ms_intf_num     res     1
33284 12d             | ms_intf_num     res     1
33284 12d             | ms_in_max_pkt   res     1
33284 12d             | ms_in_max_pkt   res     1
33284 12d             | end
33284 12d             | kb_intf_num     res     1
33284 12d             | kb_intf_num     res     1
33284 12d             | kb_interval     res     1
33284 12d             | kb_interval     res     1
33284 12d             | kb_in_max_pkt   res     1
33284 12d             | kb_in_max_pkt   res     1
33284 12d             | kb_max_index    res     1
33284 12d             | kb_max_index    res     1
33284 12d             | kb_led_states   res     1
33284 12d             | kb_led_states   res     1
33284 12d             | gp_intf_num     res     1
33284 12d             | gp_intf_num     res     1
33284 12d             | gp_interval     res     1
33284 12d             | gp_interval     res     1
33284 12d             | gp_max_index    res     1
33284 12d             | gp_max_index    res     1
33284 12d             | gp_descr_len    res     1+MAX_DEVICES
33284 12d             | gp_descr_len    res     1+MAX_DEVICES
33284 12d             | hdev_init_end
33284 12d             | 
33284 12d             | ' Initialized at cog startup:
33284 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
33284 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
33284 12d             | iframe_ct_new   res     1
33284 12d             | iframe_ct_new   res     1
33284 12d             | iframe_ct_base  res     1
33284 12d             | iframe_ct_base  res     1
33284 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
33284 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
33284 12d             | 
33284 12d             | ' This register block is reset to zero when a USB device connects
33284 12d             | hreg_init_start
33284 12d             | hstatus         res     1         ' Host status flags
33284 12d             | hstatus         res     1         ' Host status flags
33284 12d             | hctwait         res     1         ' Poll-based wait clocks
33284 12d             | hctwait         res     1         ' Poll-based wait clocks
33284 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
33284 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
33284 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
33284 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
33284 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
33284 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
33284 12d             | xfer_retry      res     1         ' Control transfer retry count
33284 12d             | xfer_retry      res     1         ' Control transfer retry count
33284 12d             | retry           res     1         ' Transaction retry count
33284 12d             | retry           res     1         ' Transaction retry count
33284 12d             | utx             res     1         ' Byte to transmit on USB
33284 12d             | utx             res     1         ' Byte to transmit on USB
33284 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
33284 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
33284 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
33284 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
33284 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
33284 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
33284 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
33284 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
33284 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
33284 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
33284 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
33284 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
33284 12d             | frame           res     1         ' USB 1ms frame counter value
33284 12d             | frame           res     1         ' USB 1ms frame counter value
33284 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
33284 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
33284 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
33284 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
33284 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
33284 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
33284 12d             | crc             res     1         ' Used for CRC16 calculation
33284 12d             | crc             res     1         ' Used for CRC16 calculation
33284 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
33284 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
33284 12d             | retval          res     1         ' Global success/fail return parameter
33284 12d             | retval          res     1         ' Global success/fail return parameter
33284 12d             | context_retval  res     1         ' Operation contextual return parameter
33284 12d             | context_retval  res     1         ' Operation contextual return parameter
33284 12d             | ' Device stuff
33284 12d             | hdev_id         res     1+MAX_DEVICES
33284 12d             | hdev_id         res     1+MAX_DEVICES
33284 12d             | hdev_bcd        res     1
33284 12d             | hdev_bcd        res     1
33284 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
33284 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
33284 12d             | ' Keyboard/mouse stuff
33284 12d             | hctrl_ep_addr   res     1
33284 12d             | hctrl_ep_addr   res     1
33284 12d             | hctrl_max_pkt   res     1
33284 12d             | hctrl_max_pkt   res     1
33284 12d             | hconfig_base    res     1
33284 12d             | hconfig_base    res     1
33284 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
33284 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
33284 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
33284 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
33284 12d             | hdev_class      res     1
33284 12d             | hdev_class      res     1
33284 12d             | hdev_subclass   res     1
33284 12d             | hdev_subclass   res     1
33284 12d             | hdev_protocol   res     1
33284 12d             | hdev_protocol   res     1
33284 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
33284 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
33284 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
33284 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
33284 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
33284 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
33284 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
33284 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
33284 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
33284 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
33284 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
33284 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
33284 12d             | if HAVE_MOUSE
33284 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
33284 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
33284 12d             | end
33284 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
33284 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
33284 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
33284 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
33284 12d             | hdev_ep_addr    res     1+MAX_DEVICES
33284 12d             | hdev_ep_addr    res     1+MAX_DEVICES
33284 12d             | hdev_out_addr   res     1
33284 12d             | hdev_out_addr   res     1
33284 12d             | 
33284 12d             | if EMUPAD_MAX_PLAYER > 0
33284 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
33284 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
33284 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
33284 12d             | end
33284 12d             | 
33284 12d             | hreg_init_end
33284 12d             | 
33284 12d             | hidr_start
33284 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
33284 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
33284 12d             | hidr_flags      res     1
33284 12d             | hidr_flags      res     1
33284 12d             | hidr_axis       res     3
33284 12d             | hidr_axis       res     3
33284 12d             | hidr_buttons    res     1
33284 12d             | hidr_buttons    res     1
33284 12d             | hidr_hats       res     1
33284 12d             | hidr_hats       res     1
33284 12d             | '' Above are actually useful values, 6 longs
33284 12d             | hidr_id         res     1
33284 12d             | hidr_id         res     1
33284 12d             | hidr_state      res     1
33284 12d             | hidr_state      res     1
33284 12d             | hidr_size       res     1
33284 12d             | hidr_size       res     1
33284 12d             | hidr_count      res     1
33284 12d             | hidr_count      res     1
33284 12d             | hidr_offset     res     1
33284 12d             | hidr_offset     res     1
33284 12d             | hidr_usage_idx  res     1
33284 12d             | hidr_usage_idx  res     1
33284 12d             | hidr_lminmax    res     1
33284 12d             | hidr_lminmax    res     1
33284 12d             | hidr_pminmax    res     1
33284 12d             | hidr_pminmax    res     1
33284 12d             | hidr_type       res     1
33284 12d             | hidr_type       res     1
33284 12d             | hidr_end
33284 12d             | 
33284 12d             | ' Variables dependent on the system freqency
33284 12d             | _var_64_lower_  res     1
33284 12d             | _var_64_lower_  res     1
33284 12d             | _var_64_upper_  res     1
33284 12d             | _var_64_upper_  res     1
33284 12d             | _12Mbps_        res     1
33284 12d             | _12Mbps_        res     1
33284 12d             | _1_5Mbps_       res     1
33284 12d             | _1_5Mbps_       res     1
33284 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
33284 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
33284 12d             | _1us_           res     1         ' 1us
33284 12d             | _1us_           res     1         ' 1us
33284 12d             | _10us_          res     1         ' 10us
33284 12d             | _10us_          res     1         ' 10us
33284 12d             | _33us_          res     1         ' 33us
33284 12d             | _33us_          res     1         ' 33us
33284 12d             | _txn_err_       res     1         ' 250us
33284 12d             | _txn_err_       res     1         ' 250us
33284 12d             | _500us_         res     1         ' 500us
33284 12d             | _500us_         res     1         ' 500us
33284 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
33284 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
33284 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
33284 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
33284 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
33284 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
33284 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
33284 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
33284 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
33284 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
33284 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
33284 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
33284 12d             | _preamble_wait_ res     1
33284 12d             | _preamble_wait_ res     1
33284 12d             | _1ms_           res     1         ' 1ms
33284 12d             | _1ms_           res     1         ' 1ms
33284 12d             | _2ms_           res     1         ' 2ms
33284 12d             | _2ms_           res     1         ' 2ms
33284 12d             | _suspend_wait_  res     1         ' 3ms
33284 12d             | _suspend_wait_  res     1         ' 3ms
33284 12d             | _4ms_           res     1         ' 4ms
33284 12d             | _4ms_           res     1         ' 4ms
33284 12d             | _xfer_wait_     res     1         ' 5ms
33284 12d             | _xfer_wait_     res     1         ' 5ms
33284 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
33284 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
33284 12d             | _reset_hold_    res     1         ' 15ms
33284 12d             | _reset_hold_    res     1         ' 15ms
33284 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
33284 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
33284 12d             | _21ms_          res     1         ' 21ms
33284 12d             | _21ms_          res     1         ' 21ms
33284 12d             | _100ms_         res     1         ' 100ms
33284 12d             | _100ms_         res     1         ' 100ms
33284 12d             | _500ms_         res     1         ' 500ms
33284 12d             | _500ms_         res     1         ' 500ms
33284 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
33284 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
33284 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
33284 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
33284 12d             | '------------------------------------------------------------------------------
33284 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
33284 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
33284 12d             | _usb_d_ls_nco_  res     1
33284 12d             | _usb_d_ls_nco_  res     1
33284 12d             | _usb_h_fs_nco_  res     1
33284 12d             | _usb_h_fs_nco_  res     1
33284 12d             | _usb_d_fs_nco_  res     1
33284 12d             | _usb_d_fs_nco_  res     1
33284 12d             | '------------------------------------------------------------------------------
33284 12d             | ' Scratch registers
33284 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
33284 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
33284 12d             | htmp1           res     1
33284 12d             | htmp1           res     1
33284 12d             | htmp2           res     1
33284 12d             | htmp2           res     1
33284 12d             | htmp3           res     1
33284 12d             | htmp3           res     1
33284 12d             | hrep            res     1         ' Repeat count
33284 12d             | hrep            res     1         ' Repeat count
33284 12d             | hsave0          res     1         ' Subroutine parameter saves
33284 12d             | hsave0          res     1         ' Subroutine parameter saves
33284 12d             | hsave1          res     1
33284 12d             | hsave1          res     1
33284 12d             | hsave2          res     1
33284 12d             | hsave2          res     1
33284 12d             | isrtmp1         res     1
33284 12d             | isrtmp1         res     1
33284 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
33284 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
33284 12d             | hr0             res     1         ' Multi-purpose registers
33284 12d             | hr0             res     1         ' Multi-purpose registers
33284 12d             | hr1             res     1
33284 12d             | hr1             res     1
33284 12d             | hr2             res     1
33284 12d             | hr2             res     1
33284 12d             | hr3             res     1
33284 12d             | hr3             res     1
33284 12d             | hpar1           res     1         ' Routine entry/exit parameters
33284 12d             | hpar1           res     1         ' Routine entry/exit parameters
33284 12d             | hpar2           res     1
33284 12d             | hpar2           res     1
33284 12d             | hpar3           res     1
33284 12d             | hpar3           res     1
33284 12d             | hct2            res     1         ' Function response bus turn-around timer
33284 12d             | hct2            res     1         ' Function response bus turn-around timer
33284 12d             | hct3            res     1         ' Keyboard/mouse poll timer
33284 12d             | hct3            res     1         ' Keyboard/mouse poll timer
33284 12d             | mod_cnt         res     1         ' Used in idle loops
33284 12d             | mod_cnt         res     1         ' Used in idle loops
33284 12d             |                 fit     $1F0
33284 12d             |                 org     $200
33284 200             | hlut_start
33284 200             | 
33284 200             | '------------------------------------------------------------------------------
33284 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
33284 200             | ' settings to startup defaults.
33284 200             | '------------------------------------------------------------------------------
33284 200             | ' On entry:
33284 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
33284 200             | '------------------------------------------------------------------------------
33284 200             | set_speed_full
33284 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
33288 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3328c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
33290 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
33294 204             | '                ret                             wcz     ' Restore caller flags on exit
33294 204             | 
33294 204             | '------------------------------------------------------------------------------
33294 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
33294 204             | ' is a downstream hub connected (not yet implemented), the baud generator
33294 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
33294 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
33294 204             | ' putting the smart pins into reset.
33294 204             | '------------------------------------------------------------------------------
33294 204             | ' On entry:
33294 204             | ' On exit: CZ flags restored to caller states
33294 204             | '------------------------------------------------------------------------------
33294 204             | set_speed_low
33294 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
33298 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3329c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
332a0 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
332a4 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
332a8 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
332ac 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
332b0 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
332b4 20c             | 
332b4 20c             | '------------------------------------------------------------------------------
332b4 20c             | ' Perform configuration stuff required when a device intitially connects.
332b4 20c             | '------------------------------------------------------------------------------
332b4 20c             | ' On entry:
332b4 20c             | ' On exit:
332b4 20c             | '------------------------------------------------------------------------------
332b4 20c             | on_connect
332b4 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
332b8 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
332bc 20e             | .retry
332bc 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
332c0 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
332c4 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
332c8 211 00 08 00 FF 
332cc 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
332d0 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
332d4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
332d8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
332dc 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
332e0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
332e4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
332e8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
332ec 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
332f0 21b 4C 03 B0 FD |                 call    #poll_waitx
332f4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
332f8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
332fc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
33300 21f B8 FF 9F FD |                 jmp     #.retry
33304 220             | .get_dev_desc
33304 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
33308 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3330c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
33310 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
33314 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
33318 225 88 FB BF FD |                 call    #reset
3331c 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
33320 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
33324 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
33328 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3332c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33330 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
33334 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
33338 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3333c 22e 04 00 00 FF 
33340 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
33344 230 34 FA BF FD |                 call    #calc_crc5
33348 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3334c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
33350 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
33354 234 F7 AD C2 FA |                 rdbyte  total_data, pb
33358 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3335c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
33360 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33364 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
33368 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3336c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
33370 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
33374 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
33378 23d C4 02 B0 FD |                 call    #poll_waitx
3337c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
33380 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
33384 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
33388 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3338c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
33390 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33394 244 2D 00 64 5D |         if_nz   ret
33398 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3339c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
333a0 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
333a4 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
333a8 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
333ac 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
333b0 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
333b4 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
333b8 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
333bc 24e 2C FB 9F CD |         if_b    jmp     #host_error
333c0 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
333c4 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
333c8 251 2D EC 63 FD |                 call    pa
333cc 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
333d0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
333d4 254 2C EC 63 FD |                 jmp     pa
333d8 255             | 
333d8 255             | '------------------------------------------------------------------------------
333d8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
333d8 255             | ' Status reporting is always in the function-to-host direction.
333d8 255             | '------------------------------------------------------------------------------
333d8 255             | ' On entry:
333d8 255             | '   PTRA - start address of the SETUP data in hub.
333d8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
333d8 255             | '     stage.
333d8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
333d8 255             | ' On exit:
333d8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
333d8 255             | '     contains the count of data stage bytes actually received, which must
333d8 255             | '     always be <= the count requested.
333d8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
333d8 255             | '     more specific USB operation error code.
333d8 255             | '------------------------------------------------------------------------------
333d8 255             | control_read
333d8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
333dc 256 F8 8F 03 F6 |                 mov     hpar2, ptra
333e0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
333e4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
333e8 259             | .xfer_start
333e8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
333ec 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
333f0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
333f4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
333f8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
333fc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
33400 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
33404 260 61 00 00 FF 
33408 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3340c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
33410 263             | .data
33410 263 56 B1 02 F6 |                 mov     pkt_data, total_data
33414 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
33418 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3341c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
33420 267             | .nak_retry
33420 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
33424 268             | .in_retry
33424 268 BC F6 BF FD |                 call    #txn_in
33428 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3342c 26a 28 00 90 AD |         if_z    jmp     #.commit
33430 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
33434 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
33438 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3343c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
33440 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
33444 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
33448 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3344c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33450 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
33454 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
33458 275             | .commit
33458 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3345c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
33460 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
33464 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
33468 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3346c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
33470 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
33474 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
33478 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3347c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
33480 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
33484 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
33488 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3348c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
33490 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
33494 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
33498 285             | .pre_status
33498 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3349c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
334a0 287 00 B0 06 F6 |                 mov     pkt_data, #0
334a4 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
334a8 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
334ac 28a 61 00 00 FF 
334b0 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
334b4 28c             | .out_retry
334b4 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
334b8 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
334bc 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
334c0 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
334c4 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
334c8 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
334cc 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
334d0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
334d4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
334d8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
334dc 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
334e0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
334e0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
334e0 297             | ' ControlRead() transfer gets things unstuck most of the time...
334e0 297             | .xfer_retry
334e0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
334e4 298 58 01 B0 FD |                 call    #poll_waitx
334e8 299 8C F9 BF FD |                 call    #wait_txn_ok
334ec 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
334f0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
334f4 29c C8 EF 03 F6 |                 mov     pb, hpar3
334f8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
334fc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
33500 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
33504 2a0             | 
33504 2a0             | '------------------------------------------------------------------------------
33504 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
33504 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
33504 2a0             | ' the SETUP data struct is filled with the required values.
33504 2a0             | '------------------------------------------------------------------------------
33504 2a0             | ' On entry:
33504 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
33504 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
33504 2a0             | '     stage.
33504 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
33504 2a0             | ' On exit:
33504 2a0             | '   retval - used to convey the success/failure of each stage.
33504 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
33504 2a0             | '     more specific USB operation error code.
33504 2a0             | '------------------------------------------------------------------------------
33504 2a0             | control_write
33504 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33508 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3350c 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
33510 2a3             | 
33510 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
33514 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
33518 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3351c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
33520 2a7             | .xfer_start
33520 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
33524 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
33528 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3352c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33530 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
33534 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
33538 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3353c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
33540 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
33544 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
33548 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3354c 2b2             | .data
3354c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
33550 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
33554 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
33558 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3355c 2b6             | .out_retry
3355c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
33560 2b7 88 F6 BF FD |                 call    #txn_out
33564 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33568 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3356c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
33570 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
33574 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
33578 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3357c 2be             | .commit
3357c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
33580 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
33584 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
33588 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3358c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
33590 2c3             | pre_status_in
33590 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
33594 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
33598 2c5             | .status_retry
33598 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3359c 2c6 44 F5 BF FD |                 call    #txn_in
335a0 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
335a4 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
335a8 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
335ac 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
335b0 2cb 2D 00 64 AD |         if_z    ret
335b4 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
335b8 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
335bc 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
335c0 2cf             | '               ret                                     ' Caller must handle transfer retirement
335c0 2cf             | 
335c0 2cf             | '------------------------------------------------------------------------------
335c0 2cf             | ' Execute an IN interrupt transaction.
335c0 2cf             | '------------------------------------------------------------------------------
335c0 2cf             | ' On entry:
335c0 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
335c0 2cf             | '   hpar2 - Address of the IN data buffer
335c0 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
335c0 2cf             | ' On exit:
335c0 2cf             | '   retval - the result of the operation.
335c0 2cf             | '   hpar3 - the count of IN data bytes actually received.
335c0 2cf             | '------------------------------------------------------------------------------
335c0 2cf             | do_int_in
335c0 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
335c4 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
335c8 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
335cc 2d2             | 
335cc 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
335d0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
335d4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
335d8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
335dc 2d6             | .retry
335dc 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
335e0 2d7 00 F5 BF FD |                 call    #txn_in
335e4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
335e8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
335ec 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
335f0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
335f4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
335f8 2dd 54 00 B0 FD |                 call    #retry_wait
335fc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33600 2df 18 00 90 AD |         if_z    jmp     #.post_ret
33604 2e0 D4 FF 9F FD |                 jmp     #.retry
33608 2e1             | .commit
33608 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3360c 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
33610 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
33614 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
33618 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3361c 2e6             | .post_ret
3361c 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
33620 2e7             | 
33620 2e7             | 
33620 2e7             | '------------------------------------------------------------------------------
33620 2e7             | ' Resets the downstream hub port to FS
33620 2e7             | '------------------------------------------------------------------------------
33620 2e7             | dwnstream_reset
33620 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33624 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
33628 2e9             | 
33628 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3362c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
33630 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
33634 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
33638 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3363c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
33640 2ef             | 
33640 2ef             | '------------------------------------------------------------------------------
33640 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
33640 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
33640 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
33640 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
33640 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
33640 2ef             | '------------------------------------------------------------------------------
33640 2ef             | ' On entry:
33640 2ef             | '   hctwait - wait interval in sysclocks.
33640 2ef             | ' On exit:
33640 2ef             | '------------------------------------------------------------------------------
33640 2ef             | poll_waitx
33640 2ef 1A 92 63 FD |                 getct   hct2
33644 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
33648 2f1             | .wait
33648 2f1 FF 25 CC FB |                 jnct2   #.wait
3364c 2f2 2D 00 64 FD |                 ret
33650 2f3             | 
33650 2f3             | '------------------------------------------------------------------------------
33650 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
33650 2f3             | '------------------------------------------------------------------------------
33650 2f3             | ' On entry:
33650 2f3             | '   retval - transaction response PID or error code.
33650 2f3             | ' On exit:
33650 2f3             | '------------------------------------------------------------------------------
33650 2f3             | retry_wait
33650 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
33654 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
33658 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3365c 2f6 14 00 90 AD |         if_z    jmp     #.nak
33660 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
33664 2f8 D8 FF BF FD |                 call    #poll_waitx
33668 2f9             | .dec
33668 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3366c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
33670 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
33674 2fc             | .nak
33674 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
33678 2fd C4 FF BF FD |                 call    #poll_waitx
3367c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
33680 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
33684 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
33688 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3368c 302 2D 00 64 FD |                 ret
33690 303             | 
33690 303             | host_reset
33690 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
33694 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
33698 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
33698 305 BD 01 05 FF 
3369c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
336a0 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
336a4 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
336a8 309             | ' Check to see if the system clock has been changed.
336a8 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
336ac 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
336b0 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
336b4 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
336b8 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
336bc 30e 40 46 62 FD |                 dirl    dp
336c0 30f             | 
336c0 30f 28 02 64 FD |                 setq    #1
336c4 310 80 00 80 FF 
336c8 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
336cc 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
336d0 313             | .enable
336d0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
336d4 314 41 46 62 FD |                 dirh    dp
336d8 315 1F 36 63 FD |                 waitx   _1us_
336dc 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
336e0 317             | 
336e0 317             |                 ' Handle Port protection enable and startup delay
336e0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
336e4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
336e8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
336ec 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
336f0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
336f4 31c             | 
336f4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
336f8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
336fc 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
33700 31f 00 00 04 F6 |                 mov     0-0, #0
33704 320             | .regloop
33704 320             | 
33704 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
33704 320             | 
33704 320             | discon_entry
33704 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
33708 321             | 
33708 321             |               
33708 321             |         if HAVE_HIDPAD
33708 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3370c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
33710 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
33714 324 F7 01 68 FC |                 wrlong  #0,pb
33718 325             |         end
33718 325             |         if EMUPAD_MAX_PLAYER > 0
33718 325             |         end
33718 325             | 
33718 325             |                 ' Fall through to disconnected loop
33718 325             | 
33718 325             | '-----------------------------------------------------------------------------------------------------------------
33718 325             | ' Device connect handling (Section 7.1.7.3).
33718 325             | '-----------------------------------------------------------------------------------------------------------------
33718 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
33718 325             | ' device to connect (Section 7.1.7.3).
33718 325             | '-----------------------------------------------------------------------------------------------------------------
33718 325             | disconnected
33718 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3371c 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
33720 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
33724 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
33728 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3372c 32a             |         if ACTIVITY_LED >= 0
3372c 32a             |         end
3372c 32a 22 A7 82 FA |                 rqpin   urx, dm
33730 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
33734 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
33738 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3373c 32e             | .se1_test
3373c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
33740 32f FC FE BF FD |                 call    #poll_waitx
33744 330 22 A7 82 FA |                 rqpin   urx, dm
33748 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3374c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
33750 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
33754 334             | .se1            'SE1 is a fatal error condition
33754 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
33758 335 E4 FE BF FD |                 call    #poll_waitx
3375c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
33760 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
33764 338             | .connect_test                                           ' Test lines until stable J/K state seen
33764 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
33768 339 22 A7 82 FA |                 rqpin   urx, dm
3376c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
33770 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
33774 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
33778 33d             | connected
33778 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3377c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
33780 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
33784 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
33788 341             | .set_pulse
33788 341 1A 64 63 FD |                 getct   _pulse_time_
3378c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
33790 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
33790 343             | ' of 1ms and make a correction, if necessary.
33790 343             | '                mov     htmp, _1ms_
33790 343             | '                subs    htmp, iframe_delta
33790 343             | '                adds    _frame1ms_clks_, htmp
33790 343             | '                debug(udec(_frame1ms_clks_))
33790 343             | 
33790 343             |                 ' Fall through to idle/processing loop
33790 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
33794 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
33798 345             | 
33798 345             | hidle
33798 345 22 A7 82 FA |                 rqpin   urx, dm
3379c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
337a0 347 98 00 90 CD |         if_c    jmp     #.se0_test
337a4 348 24 06 70 FD |                 pollct3                         wc
337a8 349 68 00 90 3D |         if_nc   jmp     #.nopoll
337ac 34a 1A 94 63 FD |                 getct   hct3
337b0 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
337b4 34c             | 
337b4 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
337b8 34d 00 70 E3 F8 |                 getbyte htmp
337bc 34e             | 
337bc 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
337c0 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
337c4 350 40 00 90 AD |         if_z    jmp     #.poll
337c8 351             | 
337c8 351             |         if _HAVE_GAMEPAD
337c8 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
337cc 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
337d0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
337d4 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
337d8 355 2C 00 90 AD |         if_z    jmp     #.poll
337dc 356             |         end
337dc 356             | 
337dc 356             |         if HAVE_MOUSE
337dc 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
337e0 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
337e4 358 20 00 90 AD |         if_z    jmp     #.poll
337e8 359             |         end
337e8 359             | 
337e8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
337ec 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
337f0 35b 14 00 90 AD |         if_z    jmp     #.poll
337f4 35c             | 
337f4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
337f8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
337fc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
33800 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
33804 360             |         if HAVE_MOUSE
33804 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
33808 361             |         else
33808 361             |         end
33808 361             | 
33808 361             | .poll
33808 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3380c 362 2D EC 63 FD |                 call    pa
33810 363             | .skip_poll
33810 363             | 
33810 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
33814 364             | 
33814 364             | .nopoll
33814 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
33818 365 44 00 90 AD |         if_z    jmp     #hsuspend
3381c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
33820 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
33824 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
33828 369 1A 84 63 FD |                 getct   hr0
3382c 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
33830 36b             |         if ACTIVITY_LED >= 0
33830 36b             |         end
33830 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
33834 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
33838 36d 5C FF 9F FD |                 jmp     #hidle
3383c 36e             | ' Check for extended SE0 state on the bus
3383c 36e             | .se0_test
3383c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
33840 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
33844 370 22 A7 82 FA |                 rqpin   urx, dm
33848 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3384c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
33850 373 24 F6 BF FD |                 call    #wait_txn_ok
33854 374 00 00 80 FF 
33858 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3385c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3385c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
33860 377             | 
33860 377             | hsuspend
33860 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
33864 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
33868 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3386c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
33870 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
33874 37c 00 96 07 F6 |                 mov     mod_cnt, #0
33878 37d             | 
33878 37d             |                 ' Fall through to resume wait loop
33878 37d             | 
33878 37d             | hwait_resume
33878 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3387c 37e 02 86 47 F0 |                 shr     hr1, #2
33880 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
33884 380             |         if ACTIVITY_LED >= 0
33884 380             |         end
33884 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
33888 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3388c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
33890 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
33894 384 18 00 90 AD |         if_z    jmp     #.resume
33898 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3389c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
338a0 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
338a4 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
338a8 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
338ac 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
338b0 38b             | .resume
338b0 38b 22 05 28 FC |                 wypin   #OUT_K, dm
338b4 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
338b8 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
338bc 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
338c0 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
338c4 390 1F 70 63 FD |                 waitx   htmp
338c8 391 22 07 28 FC |                 wypin   #OUT_J, dm
338cc 392 01 70 47 F0 |                 shr     htmp, #1
338d0 393 1F 70 63 FD |                 waitx   htmp
338d4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
338d8 395 1A 92 62 FD |                 getct   iframe_ct_base
338dc 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
338e0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
338e4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
338e8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
338ec 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
338f0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
338f4 39c             | 
338f4 39c             | '------------------------------------------------------------------------------
338f4 39c             | ' Send preamble to enable low-speed HUB ports
338f4 39c             | '------------------------------------------------------------------------------
338f4 39c             | ' On entry:
338f4 39c             | ' On exit:
338f4 39c             | '   USB baud rate set to low-speed
338f4 39c             | '------------------------------------------------------------------------------
338f4 39c             | utx_pre
338f4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
338f8 39d 40 46 62 FD |                 dirl    dp
338fc 39e 28 02 64 FD |                 setq    #1
33900 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
33904 3a0 58 44 62 FD |                 drvl    dm
33908 3a1 59 46 62 FD |                 drvh    dp
3390c 3a2             | 
3390c 3a2 1E 00 00 FF 
33910 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
33914 3a4             | 
33914 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
33918 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3391c 3a6 28 02 64 3D |         if_nc   setq    #1
33920 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
33924 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
33928 3a9             | .l1
33928 3a9             | 
33928 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3392c 3aa 40 46 62 FD |                 dirl    dp
33930 3ab 28 02 64 FD |                 setq    #1
33934 3ac 80 00 80 FF 
33938 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3393c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
33940 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
33944 3b0 41 46 62 FD |                 dirh    dp
33948 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3394c 3b2             | 
3394c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
33950 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
33954 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
33958 3b5             | 
33958 3b5             | hlut_end
33958 3b5             |                 fit     $400
33958 3b5             |                 orgh
33958                 | if OVERLAP_MEMORY
33958                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
33958                 | end
33958                 | '------------------------------------------------------------------------------
33958                 | ' Routines called from cog space.
33958                 | '------------------------------------------------------------------------------
33958                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
33958                 | '------------------------------------------------------------------------------
33958                 | 
33958                 | '------------------------------------------------------------------------------
33958                 | ' USB host cog initialization.
33958                 | '------------------------------------------------------------------------------
33958                 | usb_host_init
33958                 |                 ' Initialize buffer pointers
33958                 |         if OVERLAP_MEMORY
33958                 |         else
33958     40 15 B0 FE |                 loc     pb, #hid_descr
3395c                 |         end
3395c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
33960                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
33960                 |                 {
33960                 |                 }
33960                 |         
33960                 |                 {
33960                 |                 }
33960                 |                 'loc     pb,#hkbd_report
33960                 |                 'mov     hkbd_report_p,pb
33960                 | 
33960     08 1D B0 FE |                 loc     pb, #hub_descr
33964     F7 4D 02 F6 |                 mov     hub_descr_p, pb
33968     1D 1D B0 FE |                 loc     pb, #urx_buff
3396c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
33970     95 1D B0 FE |                 loc     pb, #dev_desc_buff
33974     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
33978     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3397c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
33980     18 15 B0 FE |                 loc     pb, #usb_cache_start
33984     F7 55 02 F6 |                 mov     cache_start_p, pb
33988     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3398c     F7 57 02 F6 |                 mov     cache_end_p, pb
33990                 | 
33990                 |         if ERROR_LED >= 0
33990                 |         end
33990                 | 
33990                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
33990                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
33990                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
33990                 | ' Configure and enable the Serial Host USB port.
33990     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
33994                 | 
33994                 | '------------------------------------------------------------------------------
33994                 | ' Timing calculations happen before any interrupt(s) are enabled.
33994                 | '------------------------------------------------------------------------------
33994                 | ' On entry:
33994                 | '   htmp - current CLKFREQ value.
33994                 | '------------------------------------------------------------------------------
33994                 | hinit_usb_timings
33994                 | '                getct   htmp2
33994     B8 59 02 F6 |                 mov     save_sysclk, htmp
33998     8D 5B 80 FF 
3399c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
339a0     18 30 63 FD |                 getqx   _12Mbps_
339a4     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
339a8     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
339ac     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
339b0     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
339b4     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
339b8     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
339bc     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
339c0     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
339c4     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
339c8     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
339cc     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
339d0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
339d4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
339d8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
339dc     80 00 00 FF 
339e0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
339e4     18 2C 63 FD |                 getqx   _var_64_lower_
339e8     19 2E 63 FD |                 getqy   _var_64_upper_
339ec     28 2C 63 FD |                 setq    _var_64_lower_
339f0     65 CD 1D FF 
339f4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
339f8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
339fc     01 00 00 FF 
33a00     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
33a04     18 2C 63 FD |                 getqx   _var_64_lower_
33a08     19 2E 63 FD |                 getqy   _var_64_upper_
33a0c     28 2C 63 FD |                 setq    _var_64_lower_
33a10     A1 07 00 FF 
33a14     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
33a18     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
33a1c     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
33a20     09 36 57 F0 |                 shr     _1us_, #9               wc
33a24     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
33a28     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
33a2c     18 38 63 FD |                 getqx   _10us_
33a30     09 38 57 F0 |                 shr     _10us_, #9              wc
33a34     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
33a38     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
33a3c     18 3A 63 FD |                 getqx   _33us_
33a40     09 3A 57 F0 |                 shr     _33us_, #9              wc
33a44     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
33a48     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
33a4c     18 3C 63 FD |                 getqx   _txn_err_
33a50     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
33a54     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
33a58     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
33a5c     18 3E 63 FD |                 getqx   _500us_
33a60     09 3E 57 F0 |                 shr     _500us_, #9             wc
33a64     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
33a68     01 00 00 FF 
33a6c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
33a70     18 40 63 FD |                 getqx   _txn_ok_ls_
33a74     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
33a78     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
33a7c     01 00 00 FF 
33a80     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
33a84     18 42 63 FD |                 getqx   _txn_ok_fs_
33a88     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
33a8c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
33a90     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
33a94     05 00 00 FF 
33a98     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
33a9c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
33aa0     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
33aa4     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
33aa8     1C 00 00 FF 
33aac     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
33ab0     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
33ab4     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
33ab8     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
33abc     00 00 00 FF 
33ac0     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
33ac4     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
33ac8     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
33acc     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
33ad0     04 00 00 FF 
33ad4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
33ad8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
33adc     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
33ae0     8D 5B 00 FF 
33ae4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
33ae8     18 4C 63 FD |                 getqx   _preamble_wait_
33aec     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
33af0     01 00 00 FF 
33af4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
33af8     18 2C 63 FD |                 getqx   _var_64_lower_
33afc     19 2E 63 FD |                 getqy   _var_64_upper_
33b00     28 2C 63 FD |                 setq    _var_64_lower_
33b04     01 00 00 FF 
33b08     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
33b0c     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
33b10     09 4E 57 F0 |                 shr     _1ms_, #9               wc
33b14     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
33b18     FF FF 7F FF 
33b1c     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
33b20     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
33b24     A7 51 03 F6 |                 mov     _2ms_, _1ms_
33b28     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
33b2c     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
33b30     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
33b34     A7 55 03 F6 |                 mov     _4ms_, _1ms_
33b38     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
33b3c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
33b40     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
33b44     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
33b48     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
33b4c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
33b50     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
33b54     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
33b58     A7 59 03 F6 |                 mov     _8ms_, _1ms_
33b5c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
33b60     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
33b64     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
33b68     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
33b6c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
33b70     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
33b74     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
33b78     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
33b7c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
33b80     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
33b84     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
33b88                 | '        _ret_   mov     _1sec_, save_sysclk
33b88                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
33b88                 | '                ret
33b88                 | {
33b88                 | }
33b88                 | 
33b88                 | '------------------------------------------------------------------------------
33b88                 | ' Parse a configuration descriptor chain to see if the device is a recognized
33b88                 | ' one. If it is, start the task progression that will configure the device for
33b88                 | ' use.
33b88                 | '------------------------------------------------------------------------------
33b88                 | ' On entry:
33b88                 | '   hconfig_base - start address of the cached config descriptor chain.
33b88                 | ' On exit:
33b88                 | '------------------------------------------------------------------------------
33b88                 | hparse_con_desc
33b88     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
33b8c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
33b90     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
33b94     4E 70 FF F9 |                 movbyts htmp,#%%1032
33b98     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
33b9c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
33b9c                 | 
33b9c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
33ba0     6E ED 03 F1 |                 add     pa, hconfig_base
33ba4     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
33ba8                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
33ba8                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
33ba8                 | ' that defines a keyboard and/or mouse.
33ba8     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
33bac                 | .next_intf
33bac     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
33bb0     BC 01 90 3D |         if_ae   jmp     #hset_config
33bb4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
33bb8     75 F3 03 F1 |                 add     ptrb, hnext_desc
33bbc     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
33bc0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
33bc4     0C 00 90 AD |         if_z    jmp     #.intf
33bc8     80 71 C7 FA |                 rdbyte  htmp, ptrb
33bcc     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
33bd0     D8 FF 9F FD |                 jmp     #.next_intf
33bd4                 | .intf
33bd4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
33bd8     00 90 07 F6 |                 mov     hpar3, #0
33bdc     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
33be0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
33be4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
33be8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
33bec                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
33bec                 | 
33bec                 | .endp
33bec     80 71 C7 FA |                 rdbyte  htmp, ptrb
33bf0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
33bf4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
33bf8     78 00 90 3D |         if_ae   jmp     #.get_device
33bfc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
33c00     75 F3 03 F1 |                 add     ptrb, hnext_desc
33c04     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
33c08     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
33c0c     64 00 90 AD |         if_z    jmp     #.get_device
33c10     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
33c14     04 00 90 AD |         if_z    jmp     #.get_ep
33c18     D0 FF 9F FD |                 jmp     #.endp
33c1c                 | .get_ep
33c1c     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
33c20     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
33c24     0F 86 67 F0 |                 shl     hr1, #8 + 7
33c28     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
33c2c     3F 00 00 FF 
33c30     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
33c34     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
33c38     00 8E 0F F2 |                 cmp     hpar2, #0               wz
33c3c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
33c40     00 90 0F F2 |                 cmp     hpar3, #0               wz
33c44     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
33c48     A0 FF 9F FD |                 jmp     #.endp
33c4c                 | .in_ep
33c4c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
33c50     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
33c54                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
33c54     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
33c58     C2 89 DB F8 |                 setbyte hr2, hr0, #3
33c5c     8C FF 9F FD |                 jmp     #.endp
33c60                 | .out_ep
33c60     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
33c64     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
33c68                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
33c68     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
33c6c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
33c70     78 FF 9F FD |                 jmp     #.endp
33c74                 | 
33c74                 | .get_device
33c74     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
33c78     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
33c7c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
33c80     68 00 90 AD |         if_z    jmp     #.gamepad
33c84     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
33c88     AC 00 90 AD |         if_z    jmp     #.hub
33c8c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
33c90     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
33c94     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
33c98     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
33c9c     4C 00 90 AD |         if_z    jmp     #.gamepad
33ca0     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
33ca4     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
33ca8                 | .keyboard
33ca8     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
33cac                 |         if HAVE_MOUSE
33cac     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
33cb0                 |         else
33cb0                 |         end
33cb0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
33cb4     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
33cb8     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33cbc     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
33cc0     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
33cc4     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
33cc8                 |                 'debug(udec(kb_intf_num))
33cc8                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
33cc8     E0 FE 9F FD |                 jmp     #.next_intf
33ccc                 | if HAVE_MOUSE
33ccc                 | .mouse
33ccc     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
33cd0     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
33cd4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
33cd8     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
33cdc     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33ce0                 |                 'getbyte ms_interval, hr2, #3
33ce0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
33ce4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
33ce8                 |                 'debug(udec(kb_intf_num))
33ce8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
33ce8     C0 FE 9F FD |                 jmp     #.next_intf
33cec                 | end
33cec                 | .gamepad
33cec     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
33cf0     C7 71 63 F5 |                 xor     htmp, hpar2
33cf4     3F 00 00 FF 
33cf8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33cfc     AC FE 9F AD |         if_z    jmp     #.next_intf
33d00                 |         if HAVE_MOUSE
33d00     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
33d04     C7 71 63 F5 |                 xor     htmp, hpar2
33d08     3F 00 00 FF 
33d0c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33d10     98 FE 9F AD |         if_z    jmp     #.next_intf
33d14                 |         end
33d14     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
33d18     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
33d1c     8C FE 9F 5D |         if_nz   jmp     #.next_intf
33d20                 | 
33d20     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33d24     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
33d28     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33d2c     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
33d30     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
33d34                 |                 'debug(udec(gp_intf_num))
33d34                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
33d34     74 FE 9F FD |                 jmp     #.next_intf
33d38                 | .hub
33d38     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
33d3c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
33d40     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
33d44     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
33d48     60 FE 9F 5D |         if_nz   jmp     #.next_intf
33d4c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
33d50     58 FE 9F 5D |         if_nz   jmp     #.next_intf
33d54     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
33d58     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
33d5c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
33d60     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33d64     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
33d68     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
33d6c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
33d6c     3C FE 9F FD |                 jmp     #.next_intf
33d70                 | 
33d70                 | '------------------------------------------------------------------------------
33d70                 | ' If a newly-connected device is recognized, do whatever is needed to configure
33d70                 | ' it according to its function, or functions. In the case of this boot protocol
33d70                 | ' keyboard/mouse class driver:
33d70                 | ' - SetConfiguration(config_num)
33d70                 | ' - SetProtocol(boot)
33d70                 | ' - SetIdle(indefinite)
33d70                 | ' - Enter the device interrupt IN polling task stage.
33d70                 | '------------------------------------------------------------------------------
33d70                 | ' On entry:
33d70                 | ' On exit:
33d70                 | '------------------------------------------------------------------------------
33d70                 | hset_config
33d70                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
33d70                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
33d70     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
33d74     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33d78     00 00 0C F2 |                 cmp     0-0, #0                 wz
33d7c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
33d80                 |         if HAVE_MOUSE
33d80     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
33d84                 |         end
33d84     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
33d88     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
33d8c                 | .set_config
33d8c     6C 0E D0 FE |                 loc     ptra, #set_config
33d90     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
33d94     6E ED 03 F1 |                 add     pa, hconfig_base
33d98     F6 8D C3 FA |                 rdbyte  hpar1, pa
33d9c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
33da0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
33da4     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
33da8     A0 02 A0 FD |                 call    #control_write
33dac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33db0     2D 00 64 5D |         if_nz   ret
33db4                 | .kbd_config
33db4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
33db8     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
33dbc                 | 
33dbc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
33dc0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33dc4     3F 00 00 FF 
33dc8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33dcc     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
33dd0                 | 
33dd0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
33dd4     34 0E D0 FE |                 loc     ptra, #set_protocol
33dd8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
33ddc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33de0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
33de4     A0 02 A0 FD |                 call    #control_write
33de8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33dec     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
33df0     E4 02 90 5D |         if_nz   jmp     #.notify_client
33df4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
33df8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
33dfc     30 03 B0 FD |                 call    #hset_idle
33e00                 |                 'cmp     retval, #PID_ACK        wz
33e00                 |         'if_nz   mov     hkbd_ep_addr, #0
33e00                 |         'if_nz   jmp     #.notify_client
33e00     A8 99 02 F6 |                 mov     hctwait, _2ms_
33e04     EF 02 A0 FD |                 call    #poll_waitx
33e08     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
33e0c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
33e10     90 17 90 FE |                 loc     pa, #hkbd_led_rep
33e14     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
33e18     2C 03 B0 FD |                 call    #hset_kbdled_report
33e1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33e20     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
33e24     B0 02 90 5D |         if_nz   jmp     #.notify_client
33e28     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
33e2c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33e30     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33e34     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33e38     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
33e3c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
33e40     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
33e44     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
33e48     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
33e4c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
33e50     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
33e54                 |         if !!HAVE_MOUSE
33e54                 |         end
33e54                 | 
33e54                 | .mouse_config
33e54                 | if HAVE_MOUSE
33e54     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
33e58     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
33e5c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
33e60     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33e64     3F 00 00 FF 
33e68     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33e6c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
33e70                 | 
33e70                 |                 debug("mouse passed addr check")
33e70                 | 
33e70     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
33e74     00 00 80 FF 
33e78     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
33e7c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
33e80     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33e84     55 02 A0 FD |                 call    #control_read
33e88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33e8c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
33e90     44 02 90 5D |         if_nz   jmp     #.notify_client
33e94     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
33e98     56 01 00 F6 |                 mov     0-0, total_data
33e9c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33ea0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
33ea0                 | 
33ea0     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
33ea4     64 0D D0 FE |                 loc     ptra, #set_protocol
33ea8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
33eac     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33eb0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
33eb4     A0 02 A0 FD |                 call    #control_write
33eb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33ebc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
33ec0     14 02 90 5D |         if_nz   jmp     #.notify_client
33ec4                 |                 debug("mouse passed SetProtocol")
33ec4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
33ec8     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
33ecc     60 02 B0 FD |                 call    #hset_idle
33ed0                 |                 'cmp     retval, #PID_ACK        wz
33ed0                 |         'if_nz   mov     hmouse_ep_addr, #0
33ed0                 |         'if_nz   jmp     #.notify_client
33ed0                 |                 debug("mouse passed SetIdle")
33ed0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
33ed4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33ed8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33edc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33ee0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
33ee4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
33ee8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
33eec     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
33ef0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
33ef4     3F 00 00 FF 
33ef8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
33efc     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
33f00     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
33f04     D0 01 90 FD |                 jmp     #.notify_client
33f08                 | end
33f08                 | .gamepad_config
33f08                 | if _HAVE_GAMEPAD
33f08     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33f0c     00 00 0C F2 |                 cmp     0-0, #0                 wz
33f10     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
33f14     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
33f18     00 70 03 F6 |                 mov     htmp, 0-0
33f1c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33f20     3F 00 00 FF 
33f24     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33f28     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
33f2c                 | 
33f2c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
33f30     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
33f34     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33f38     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33f3c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33f40     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33f44     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
33f48     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
33f4c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
33f50     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33f54     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33f58     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
33f5c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
33f60     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
33f64                 | 
33f64                 |                 if EMUPAD_MAX_PLAYER > 0
33f64                 |                 
33f64                 | .rule_loop           
33f64                 |                 end
33f64                 | 
33f64     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
33f68     5C 00 90 AD |         if_e    jmp     #.xinput
33f6c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
33f70     00 70 03 F6 |                 mov     htmp,0-0
33f74     01 A6 02 FF 
33f78     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
33f7c     7C 00 90 AD |         if_e    jmp     #.ps3
33f80                 | 
33f80     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
33f84     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
33f88     00 00 80 5F 
33f8c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
33f90     03 00 80 AF 
33f94     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
33f98     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
33f9c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33fa0     55 02 A0 FD |                 call    #control_read
33fa4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33fa8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
33fac     00 00 04 56 |         if_nz   mov     0-0, #0
33fb0     24 01 90 5D |         if_nz   jmp     #.notify_client
33fb4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
33fb8     56 01 00 F6 |                 mov     0-0, total_data
33fbc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33fc0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
33fc0                 | 
33fc0     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
33fc4     10 01 90 FD |                 jmp     #.notify_client
33fc8                 | .xinput
33fc8     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
33fcc     2D EF 03 F6 |                 mov     pb,hdev_port
33fd0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
33fd4     03 EE 27 F3 |                 fle     pb,#3
33fd8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
33fdc     02 EF 47 FC |                 wrbyte  pb, ptra[2]
33fe0                 | 
33fe0     03 B0 06 F6 |                 mov     pkt_data, #3
33fe4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
33fe8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
33fec     5A 00 A0 FD |                 call    #txn_out
33ff0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
33ff4                 | 
33ff4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
33ff8     DC 00 90 FD |                 jmp     #.notify_client
33ffc                 | .ps3
33ffc     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
34000     2D EF 03 F6 |                 mov     pb,hdev_port
34004     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
34008     04 EE 27 F3 |                 fle     pb,#4
3400c     F7 EF C3 F9 |                 decod   pb
34010     09 EF 47 FC |                 wrbyte  pb, ptra[9]
34014                 | 
34014     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
34018     00 0C D0 FE |                 loc     ptra, #set_report
3401c     01 00 80 FF 
34020     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
34024     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34028     03 61 5C FC |                 wrword  #48, ptra[wLength]
3402c     20 0C B0 FE |                 loc     pb, #ps3_command_buff
34030     A0 02 A0 FD |                 call    #control_write
34034                 | 
34034     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
34038     E0 0B D0 FE |                 loc     ptra, #set_report
3403c     01 00 80 FF 
34040     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
34044     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
34048     03 09 5C FC |                 wrword  #4, ptra[wLength]
3404c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
34050     A0 02 A0 FD |                 call    #control_write
34054     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
34058     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3405c     00 00 04 56 |         if_nz   mov     0-0, #0
34060     74 00 90 5D |         if_nz   jmp     #.notify_client
34064                 | 
34064     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
34068     6C 00 90 FD |                 jmp     #.notify_client
3406c                 | end
3406c                 | 
3406c                 | .hub_config
3406c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
34070     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
34074     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
34078     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3407c     3F 00 00 FF 
34080     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
34084     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
34088                 | 
34088     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3408c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
34090     26 EF 03 F6 |                 mov     pb, hub_descr_p
34094     55 02 A0 FD |                 call    #control_read
34098     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3409c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
340a0     34 00 90 5D |         if_nz   jmp     #.notify_client
340a4                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
340a4                 | 
340a4     26 F1 03 F6 |                 mov     ptra, hub_descr_p
340a8     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
340ac     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
340b0                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
340b0                 | .pwr_loop
340b0     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
340b4     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
340b8     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
340bc     A0 02 A0 FD |                 call    #control_write
340c0     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
340c4                 | 
340c4     B1 99 02 F6 |                 mov     hctwait, _500ms_
340c8     B0 99 02 F1 |                 add     hctwait, _100ms_
340cc     EF 02 A0 FD |                 call    #poll_waitx
340d0                 | 
340d0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
340d4     00 00 90 FD |                 jmp     #.notify_client
340d8                 | 
340d8                 | .notify_client
340d8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
340dc     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
340e0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
340e0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
340e0     2D 00 64 FD |                 ret
340e4                 | 
340e4                 | '------------------------------------------------------------------------------
340e4                 | ' Initialize the keyboard/mouse data area to start-up values.
340e4                 | '------------------------------------------------------------------------------
340e4                 | ' On entry:
340e4                 | ' On exit:
340e4                 | '------------------------------------------------------------------------------
340e4                 | init_kbdm_data
340e4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
340e8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
340ec                 | 
340ec     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
340f0     2B ED 03 F6 |                 mov     pa, cache_end_p
340f4                 | .loop
340f4     61 01 4C FC |                 wrbyte  #0, ptra++
340f8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
340fc     F4 FF 9F CD |         if_b    jmp     #.loop
34100                 |         
34100                 |         if EMUPAD_MAX_PLAYER > 0
34100                 |         end
34100                 | 
34100                 | 
34100     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
34104                 | .regloop
34104     00 EC 8F F9 |                 altd    pa
34108     00 00 04 F6 |                 mov     0-0, #0
3410c     01 EC 07 F1 |                 add     pa, #1
34110     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
34114     EC FF 9F 5D |         if_nz   jmp     #.regloop
34118                 | 
34118     E1 E1 61 FF 
3411c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
34120     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
34124     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
34128     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3412c                 | 
3412c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
34130                 | 
34130                 | '------------------------------------------------------------------------------
34130                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
34130                 | ' function.
34130                 | '------------------------------------------------------------------------------
34130                 | ' On entry:
34130                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
34130                 | '   hpar2 - index number of the target interface.
34130                 | ' On exit:
34130                 | '------------------------------------------------------------------------------
34130                 | hset_idle
34130     A8 99 02 F6 |                 mov     hctwait, _2ms_
34134     EF 02 A0 FD |                 call    #poll_waitx
34138     D8 0A D0 FE |                 loc     ptra, #set_idle
3413c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
34140     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
34144     A0 02 80 FD |                 jmp     #control_write
34148                 | 
34148                 | '------------------------------------------------------------------------------
34148                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
34148                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
34148                 | '------------------------------------------------------------------------------
34148                 | ' On entry:
34148                 | '   ep_addr_pid - device address and enpoint for the request.
34148                 | ' On exit:
34148                 | '   retval - transaction result.
34148                 | '------------------------------------------------------------------------------
34148                 | hset_kbdled_report
34148     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3414c     CC 0A D0 FE |                 loc     ptra, #set_report
34150     01 00 80 FF 
34154     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
34158     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3415c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
34160     27 EF 03 F6 |                 mov     pb, urx_buff_p
34164     F7 77 42 FC |                 wrbyte  kb_led_states, pb
34168     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3416c                 | 
3416c                 | '------------------------------------------------------------------------------
3416c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3416c                 | '------------------------------------------------------------------------------
3416c                 | ' On entry:
3416c                 | ' On exit:
3416c                 | '------------------------------------------------------------------------------
3416c                 | hget_kbd_in_report
3416c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
34170     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34174     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
34178     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3417c     CF 02 A0 FD |                 call    #do_int_in
34180     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34184     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
34188                 | 
34188     00 90 0F F2 |                 cmp     hpar3, #0               wz
3418c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34190                 | 
34190     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
34194     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
34198     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3419c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
341a0                 | 
341a0     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
341a4     18 00 B0 FD |                 call    #hkbd_compare
341a8                 |         if EMUPAD_MAX_PLAYER > 0
341a8                 |         end
341a8                 | 
341a8                 | .led_check
341a8     3B 71 03 F6 |                 mov     htmp, kb_led_states
341ac     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
341b0     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
341b4     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
341b8     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
341bc     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
341c0                 | 
341c0                 | '------------------------------------------------------------------------------
341c0                 | ' Compare current and previous keyboard data buffers for keypress changes.
341c0                 | '------------------------------------------------------------------------------
341c0                 | hkbd_compare
341c0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
341c4     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
341c8     61 73 07 FB |                 rdlong  htmp1, ptra++
341cc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
341d0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
341d4     61 73 07 FB |                 rdlong  htmp1, ptra++
341d8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
341dc     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
341e0     2D 00 64 AD |         if_z    ret
341e4                 | 
341e4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
341e8                 | 
341e8                 |                 ' Handle modifiers
341e8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
341ec     00 87 C7 FA |                 rdbyte  hr1, ptra
341f0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
341f4     63 86 63 FD |                 mergew  hr1
341f8     08 EC 07 F6 |                 mov     pa,#8
341fc                 | .modloop
341fc     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
34200     E8 8C 07 F6 |                 mov     hpar1,#$E8
34204     F6 8D 83 F1 |                 sub     hpar1,pa
34208     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3420c     FB ED 6F FB |                 djnz    pa,#.modloop
34210                 | 
34210     6F E0 75 FD | .release        modc    _set    wc
34214                 |                 'alts    hdev_port, #hid_report_p
34214                 |                 'mov     ptra, hid_report_p
34214     02 F0 07 F1 |                 add     ptra, #2
34218     06 EC 07 F6 |                 mov     pa, #6
3421c     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
34220     20 00 90 AD |         if_z    jmp     #.rl3
34224     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
34228     02 F2 07 F1 |                 add     ptrb, #2
3422c     06 EE 07 F6 |                 mov     pb, #6
34230     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
34234     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
34238     08 00 90 AD |         if_z    jmp     #.rl3
3423c     FC EF 6F FB |                 djnz    pb, #.rl2
34240     68 00 B0 FD |                 call    #hkbd_translate
34244     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
34248                 | 
34248     00 90 07 F6 |                 mov     hpar3, #0
3424c     1F 90 27 F4 |                 bith    hpar3, #31
34250                 | 
34250     6F 00 74 FD | .press          modc    _clr    wc
34254     27 F1 03 F6 |                 mov     ptra, urx_buff_p
34258     02 F0 07 F1 |                 add     ptra, #2
3425c     06 EC 07 F6 |                 mov     pa, #6
34260     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
34264     20 00 90 AD |         if_z    jmp     #.pl3
34268     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3426c     02 F2 07 F1 |                 add     ptrb, #2
34270     06 EE 07 F6 |                 mov     pb, #6
34274     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
34278     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3427c     08 00 90 AD |         if_z    jmp     #.pl3
34280     FC EF 6F FB |                 djnz    pb, #.pl2
34284     24 00 B0 FD |                 call    #hkbd_translate
34288     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3428c                 | 
3428c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
34290     08 13 F0 FE |                 loc     ptrb, #hkbd_report
34294     28 02 64 FD |                 setq #1
34298     61 73 07 FB |                 rdlong  htmp1, ptra++
3429c     28 02 64 FD |                 setq #1
342a0     E1 73 67 FC |                 wrlong  htmp1, ptrb++
342a4     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
342a8                 | 
342a8     2D 00 64 FD |                 ret
342ac                 | 
342ac                 | '------------------------------------------------------------------------------
342ac                 | ' Translate keyboard scancode to ASCII
342ac                 | '------------------------------------------------------------------------------
342ac                 | ' On entry:
342ac                 | '   hpar1 - scancode
342ac                 | '   hpar2 - key modifiers state
342ac                 | '       c - pressed (0) or released (1) flag
342ac                 | ' On exit:
342ac                 | '   hpar1 - bit     31 = 0 pressed, 1 released
342ac                 | '               30..17 = unused
342ac                 | '                   18 = scroll-lock state 
342ac                 | '                   17 = caps-lock state
342ac                 | '                   16 = num-lock state 
342ac                 | '                15..8 = key modifiers state
342ac                 | '                 7..0 = scancode
342ac                 | '------------------------------------------------------------------------------
342ac                 | hkbd_translate
342ac     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
342b0     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
342b4     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
342b8     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
342bc     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
342c0     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
342c4                 | 
342c4                 |         if EMUPAD_MAX_PLAYER > 0
342c4                 | 
342c4                 |         if EMUPAD_BT0_BIT >= 0
342c4                 |         end
342c4                 |         if EMUPAD_BT1_BIT >= 0
342c4                 |         end
342c4                 |         if EMUPAD_BT2_BIT >= 0
342c4                 |         end
342c4                 |         if EMUPAD_BT3_BIT >= 0
342c4                 |         end
342c4                 |         if EMUPAD_BT4_BIT >= 0
342c4                 |         end
342c4                 |         if EMUPAD_BT5_BIT >= 0
342c4                 |         end
342c4                 |         if EMUPAD_BT6_BIT >= 0
342c4                 |         end
342c4                 |         if EMUPAD_BT7_BIT >= 0
342c4                 |         end
342c4                 |         if EMUPAD_BT8_BIT >= 0
342c4                 |         end
342c4                 |         if EMUPAD_BT9_BIT >= 0
342c4                 |         end
342c4                 | 
342c4                 |         end
342c4     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
342c8     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
342cc     1F 8C 47 F4 |                 bitc    hpar1, #31
342d0                 |         if KEYQUEUE_SIZE > 0
342d0     C4 09 B0 FE |                 loc pb,#keyq_head
342d4     F7 71 E3 FA |                 rdword htmp,pb
342d8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
342dc     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
342e0     B8 75 03 F6 |                 mov htmp2,htmp
342e4     04 74 07 FA |                 mul htmp2,#4
342e8     F7 75 03 F1 |                 add htmp2,pb
342ec     02 74 07 F1 |                 add htmp2,#2
342f0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
342f4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
342f8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
342fc     F7 71 43 5C |         if_nz   wrbyte htmp,pb
34300                 |         end
34300     2D 00 7C FD |                 ret wcz
34304                 | 
34304                 | if HAVE_MOUSE
34304                 | '------------------------------------------------------------------------------
34304                 | ' Execute an IN interrupt transaction to poll for mouse activity.
34304                 | '------------------------------------------------------------------------------
34304                 | ' On entry:
34304                 | ' On exit:
34304                 | '------------------------------------------------------------------------------
34304                 | hget_mouse_in_report
34304     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
34308     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3430c     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
34310     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
34314     CF 02 A0 FD |                 call    #do_int_in
34318     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3431c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
34320                 | 
34320     00 90 0F F2 |                 cmp     hpar3, #0               wz
34324     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34328                 | 
34328     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3432c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
34330     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
34334     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
34338                 | 
34338     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3433c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
34340     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
34344     01 90 87 31 |         if_ae   sub     hpar3, #1
34348                 | 
34348     40 09 90 FE |                 loc     pa, #mouse_limits
3434c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
34350                 | 
34350                 |                 ' load xacc,yacc,zacc
34350     28 04 64 FD |                 setq    #3-1
34354     80 87 07 FB |                 rdlong  hr1,ptrb
34358                 |                 ' load limits and outptr
34358     28 04 64 FD |                 setq    #3-1
3435c     F6 73 03 FB |                 rdlong  htmp1,pa
34360                 | 
34360     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
34364     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
34368     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3436c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
34370     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
34374     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
34378     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3437c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
34380                 |               
34380                 | 
34380     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
34384     07 70 67 F7 |                 signx   htmp, #7
34388     B8 87 03 F1 |                 add     hr1,htmp
3438c     00 72 0F F2 |                 cmp     htmp1,#0 wz
34390     B9 87 63 53 |         if_ne   fles    hr1,htmp1
34394     00 86 47 53 |         if_ne   fges    hr1,#0
34398                 | 
34398     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3439c     07 70 67 F7 |                 signx   htmp, #7
343a0     B8 89 03 F1 |                 add     hr2,htmp
343a4     00 74 0F F2 |                 cmp     htmp2,#0 wz
343a8     BA 89 63 53 |         if_ne   fles    hr2,htmp2
343ac     00 88 47 53 |         if_ne   fges    hr2,#0
343b0                 |                 
343b0                 | 
343b0     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
343b4     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
343b8     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
343bc     B8 8B 03 A1 |         if_z    add     hr3,htmp
343c0                 | 
343c0     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
343c4     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
343c8                 | 
343c8                 |                 ' write back accumulators
343c8     28 04 64 FD |                 setq    #3-1
343cc     80 87 67 FC |                 wrlong  hr1,ptrb
343d0                 |                 ' if outptr set, write X/Y words
343d0     00 76 0F F2 |                 cmp htmp3,#0                    wz
343d4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
343d8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
343dc     2D 00 64 FD |                 ret
343e0                 | end
343e0                 | 
343e0                 | '------------------------------------------------------------------------------
343e0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
343e0                 | '------------------------------------------------------------------------------
343e0                 | ' On entry:
343e0                 | ' On exit:
343e0                 | '------------------------------------------------------------------------------
343e0                 | if _HAVE_GAMEPAD
343e0                 | hget_gp_in_report
343e0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
343e4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
343e8                 | 
343e8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
343ec     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
343f0     00 90 E3 F8 |                 getbyte hpar3
343f4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
343f8     CF 02 A0 FD |                 call    #do_int_in
343fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34400     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
34404                 | 
34404     00 90 0F F2 |                 cmp     hpar3, #0               wz
34408     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3440c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3440c                 | 
3440c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
34410     00 70 E3 F8 |                 getbyte htmp                            ' |
34414     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
34418     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3441c     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
34420     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
34424     B8 01 C0 F8 |                 setbyte htmp                            ' |
34428                 | 
34428                 | ' Note: the following code compares the current and previous reports
34428                 | ' and process the data if there are changes to ease the debug output.
34428                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
34428                 | ' gpPreReport buffer.
34428                 | 
34428                 |                 ' ----- start of block to remove
34428                 |                 {
34428                 |                 }
34428                 |                 ' ----- end of block to remove
34428     F4 04 90 FE |                 loc pa,#hpad_translate
3442c     2A EC 63 FD |                 push pa
34430                 | 
34430                 |                 ' FALL THROUGH !!!!
34430                 | 
34430                 | '------------------------------------------------------------------------------
34430                 | ' Decode controller report
34430                 | '------------------------------------------------------------------------------
34430                 | hid_decode
34430                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
34430     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
34434     00 04 00 FF 
34438     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3443c                 | 
3443c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
34440                 | 
34440     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
34444     00 2A E3 F8 |                 getbyte hidr_type
34448     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3444c     34 02 90 AD |         if_z    jmp     #hpad_xinput
34450     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
34454     1C 03 90 AD |         if_z    jmp     #hpad_ps3
34458     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3445c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
34460     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
34464                 |                 
34464                 | 
34464                 | '------------------------------------------------------------------------------
34464                 | ' Handle HID controller (or mouse now
34464                 | ' On entry:
34464                 | '   ptrb - controller report
34464                 | '------------------------------------------------------------------------------
34464                 | hpad_hid
34464     1B 01 A0 FD |                 call    #get_hid_descr_buffer
34468     F7 F1 03 F6 |                 mov     ptra, pb
3446c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
34470     00 EC 03 F6 |                 mov     pa, 0-0
34474                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
34474     19 2A 3B FF 
34478     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3447c                 | 
3447c                 | .next
3447c     00 EC 5F F2 |                 cmps    pa, #0      wcz
34480     2D 00 7C ED |         if_be   ret     wcz
34484                 | 
34484     61 8D C7 FA |                 rdbyte  hpar1, ptra++
34488     01 EC 87 F1 |                 sub     pa, #1
3448c     00 8E 07 F6 |                 mov     hpar2, #0
34490                 | 
34490     C6 71 03 F6 |                 mov     htmp, hpar1
34494     03 70 07 F5 |                 and     htmp, #$03
34498     01 70 0F F2 |                 cmp     htmp, #1    wz
3449c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
344a0     07 8E 67 A7 |         if_z    signx   hpar2,#7
344a4     01 EC 87 A1 |         if_z    sub     pa, #1
344a8     02 70 0F F2 |                 cmp     htmp, #2    wz
344ac     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
344b0     0F 8E 67 A7 |         if_z    signx   hpar2,#15
344b4     02 EC 87 A1 |         if_z    sub     pa, #2
344b8     03 70 0F F2 |                 cmp     htmp, #3    wz
344bc     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
344c0     04 EC 87 A1 |         if_z    sub     pa, #4
344c4                 | 
344c4     FC 8C 07 F5 |                 and     hpar1, #$FC
344c8                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
344c8                 | 
344c8     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
344cc     0C 01 90 AD |         if_z    jmp     #.report_id
344d0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
344d4     24 01 90 AD |         if_z    jmp     #.usage_page
344d8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
344dc     2C 01 90 AD |         if_z    jmp     #.usage
344e0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
344e4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
344e8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
344ec     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
344f0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
344f4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
344f8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
344fc     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
34500     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
34504     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
34508     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3450c     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
34510     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
34514     64 FF 9F 5D |         if_nz   jmp     #.next
34518                 | 
34518     D8 1D A7 FB |                 tjf     hidr_state,#.next
3451c                 | 
3451c     03 8E 07 F5 |                 and     hpar2, #$03
34520     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
34524     18 00 90 5D |         if_nz   jmp     #.skip
34528                 | 
34528     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3452c     20 00 90 AD |         if_z    jmp     #.axes
34530     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
34534     5C 00 90 AD |         if_z    jmp     #.hats
34538     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3453c     70 00 90 AD |         if_z    jmp     #.buttons
34540                 | .skip
34540     8F 71 03 F6 |                 mov     htmp, hidr_size
34544     90 71 03 FA |                 mul     htmp, hidr_count
34548     B8 23 03 F1 |                 add     hidr_offset, htmp
3454c     2C FF 9F FD |                 jmp     #.next
34550                 | .axes
34550                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
34550     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
34554     90 87 03 F6 |                 mov     hr1, hidr_count
34558                 | .l1
34558     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3455c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
34560     04 03 B0 FD |                 call    #hpad_getbits
34564     64 03 B0 FD |                 call    #hpad_normalize
34568     06 84 1F F2 |                 cmp     hr0, #6         wcz
3456c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
34570     00 88 43 C8 |         if_b    getnib  hr2
34574     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
34578     5F 01 20 C9 |         if_b    setword retval
3457c     01 84 07 C1 |         if_b    add     hr0, #1
34580     8F 23 03 F1 |                 add     hidr_offset, hidr_size
34584     F4 87 6F FB |                 djnz    hr1, #.l1
34588                 | 
34588     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3458c     01 1C 07 F6 |                 mov     hidr_state, #1
34590     E8 FE 9F FD |                 jmp     #.next
34594                 | .hats
34594                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
34594     91 8D 03 F6 |                 mov     hpar1, hidr_offset
34598     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3459c     C8 02 B0 FD |                 call    #hpad_getbits
345a0     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
345a4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
345a8     01 1C 07 F6 |                 mov     hidr_state, #1
345ac     90 FF 9F FD |                 jmp     #.skip
345b0                 | .buttons
345b0                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
345b0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
345b4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
345b8     90 8F 03 FA |                 mul     hpar2, hidr_count
345bc     A8 02 B0 FD |                 call    #hpad_getbits
345c0     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
345c4     B8 BF 62 F0 |                 shl     retval, htmp
345c8     5F 17 43 F5 |                 or      hidr_buttons, retval
345cc     90 71 03 F1 |                 add     htmp, hidr_count
345d0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
345d4     01 1C 07 F6 |                 mov     hidr_state, #1
345d8     64 FF 9F FD |                 jmp     #.skip
345dc                 | .report_id
345dc     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
345e0     2D 00 7C 5D |         if_nz   ret     wcz
345e4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
345e8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
345ec     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
345f0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
345f4     01 F2 87 51 |         if_nz   sub     ptrb,#1
345f8     80 FE 9F FD |                 jmp     #.next
345fc                 | .usage_page
345fc     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
34600     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
34604     04 1C 07 A6 |         if_z    mov     hidr_state, #4
34608     70 FE 9F FD |                 jmp     #.next
3460c                 | .usage
3460c     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
34610     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
34614     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
34618     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3461c     5C FE 9F AD |         if_z    jmp     #.next
34620     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
34624     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
34628     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3462c     4C FE 9F AD |         if_z    jmp     #.next
34630     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
34634     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
34638     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3463c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
34640     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
34644     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
34648     10 00 90 AD |         if_z    jmp     #.usage_axis
3464c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
34650     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
34654     03 1C 07 A6 |         if_z    mov     hidr_state, #3
34658     20 FE 9F FD |                 jmp     #.next
3465c                 | .usage_axis
3465c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
34660     18 FE 9F CD |         if_b    jmp     #.next
34664     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
34668     C7 01 00 F8 |                 setnib  hpar2
3466c                 | 
3466c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
34670     C7 8F C3 F9 |                 decod   hpar2
34674     C7 0F 43 F5 |                 or      hidr_flags, hpar2
34678                 | 
34678     01 24 07 F1 |                 add     hidr_usage_idx, #1
3467c     02 1C 07 F6 |                 mov     hidr_state, #2
34680     F8 FD 9F FD |                 jmp     #.next
34684                 | 
34684                 | '------------------------------------------------------------------------------
34684                 | ' Handle XInput controller
34684                 | ' On entry:
34684                 | '   ptrb - controller report
34684                 | '------------------------------------------------------------------------------
34684                 | '   Default implementation translates the report to a pseudo-defacto hid
34684                 | '   standard and jumps to hpad_translate for actions.
34684                 | '   Implementors may take specific actions for this kind of controller.
34684                 | '------------------------------------------------------------------------------
34684                 | hpad_xinput
34684     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
34688     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3468c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
34690     14 70 0F F2 |                 cmp     htmp, #$14      wz
34694     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
34698                 | 
34698                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
34698                 | 
34698     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3469c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
346a0                 | 
346a0     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
346a4     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
346a8     5F BF 22 F6 |                 not     retval
346ac     5F 11 2B F9 |                 setword hidr_axis, retval, #1
346b0     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
346b4     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
346b8     5F BF 22 F6 |                 not     retval
346bc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
346c0                 | 
346c0     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
346c4     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
346c8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
346cc     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
346d0     F8 01 B0 FD |                 call    #hpad_normalize
346d4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
346d8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
346dc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
346e0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
346e4     E4 01 B0 FD |                 call    #hpad_normalize
346e8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
346ec                 | 
346ec     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
346f0     81 BF E6 FA |                 rdword  retval, ptrb[1]
346f4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
346f8     00 16 47 F4 |                 bitc    hidr_buttons, #0
346fc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
34700     01 16 47 F4 |                 bitc    hidr_buttons, #1
34704     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
34708     02 16 47 F4 |                 bitc    hidr_buttons, #2
3470c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
34710     03 16 47 F4 |                 bitc    hidr_buttons, #3
34714     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
34718     04 16 47 F4 |                 bitc    hidr_buttons, #4
3471c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
34720     05 16 47 F4 |                 bitc    hidr_buttons, #5
34724     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
34728     08 16 47 F4 |                 bitc    hidr_buttons, #8
3472c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
34730     09 16 47 F4 |                 bitc    hidr_buttons, #9
34734     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
34738     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3473c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
34740     0B 16 47 F4 |                 bitc    hidr_buttons, #11
34744     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
34748     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3474c                 | 
3474c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
34750     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
34754     7A BB 7A FF 
34758     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3475c     F9 FF 7F FF 
34760     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
34764     B9 71 5F F9 |                 altgn   htmp, #htmp1
34768     00 70 43 F8 |                 getnib  htmp
3476c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
34770                 | 
34770     AC 01 90 FD |                 jmp     #hpad_translate
34774                 | 
34774                 | '------------------------------------------------------------------------------
34774                 | ' Handle PS3 controller
34774                 | ' On entry:
34774                 | '   ptrb - controller report
34774                 | '------------------------------------------------------------------------------
34774                 | '   Default implementation translates the report to a pseudo-defacto hid
34774                 | '   standard and jumps to hpad_translate for actions.
34774                 | '   Implementors may take specific actions for this kind of controller.
34774                 | '------------------------------------------------------------------------------
34774                 | hpad_ps3
34774     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
34778     01 70 0F F2 |                 cmp     htmp, #$01      wz
3477c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
34780                 | 
34780                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
34780                 | 
34780     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
34784     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
34788     40 01 B0 FD |                 call    #hpad_normalize
3478c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
34790     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
34794     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
34798     30 01 B0 FD |                 call    #hpad_normalize
3479c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
347a0     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
347a4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
347a8     20 01 B0 FD |                 call    #hpad_normalize
347ac     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
347b0     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
347b4     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
347b8     10 01 B0 FD |                 call    #hpad_normalize
347bc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
347c0     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
347c4     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
347c8                 | 
347c8     08 8C 07 F6 |                 mov     hpar1, #8
347cc     13 8E 07 F6 |                 mov     hpar2, #19
347d0     94 00 B0 FD |                 call    #hpad_getbits
347d4                 | 
347d4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
347d8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
347dc     00 16 47 F4 |                 bitc    hidr_buttons, #0
347e0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
347e4     01 16 47 F4 |                 bitc    hidr_buttons, #1
347e8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
347ec     02 16 47 F4 |                 bitc    hidr_buttons, #2
347f0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
347f4     03 16 47 F4 |                 bitc    hidr_buttons, #3
347f8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
347fc     04 16 47 F4 |                 bitc    hidr_buttons, #4
34800     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
34804     05 16 47 F4 |                 bitc    hidr_buttons, #5
34808     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3480c     06 16 47 F4 |                 bitc    hidr_buttons, #6
34810     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
34814     07 16 47 F4 |                 bitc    hidr_buttons, #7
34818     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3481c     08 16 47 F4 |                 bitc    hidr_buttons, #8
34820     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
34824     09 16 47 F4 |                 bitc    hidr_buttons, #9
34828     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3482c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
34830     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
34834     0B 16 47 F4 |                 bitc    hidr_buttons, #11
34838     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3483c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
34840                 | 
34840     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
34844     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
34848     09 FA 79 FF 
3484c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
34850     FF FA 7F FF 
34854     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
34858     B9 71 5F F9 |                 altgn   htmp, #htmp1
3485c     00 70 43 F8 |                 getnib  htmp
34860     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
34864                 | 
34864     B8 00 90 FD |                 jmp     #hpad_translate
34868                 | 
34868                 | '------------------------------------------------------------------------------
34868                 | ' Read bits from report data buffer
34868                 | '------------------------------------------------------------------------------
34868                 | ' On entry:
34868                 | '   PTRB - report buffer
34868                 | '   hpar1 - start bit
34868                 | '   hpar2 - number of bits
34868                 | ' On exit:
34868                 | '   retval - bits
34868                 | '------------------------------------------------------------------------------
34868                 | hpad_getbits
34868     C6 71 03 F6 |                 mov     htmp, hpar1
3486c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
34870     F9 71 03 F1 |                 add     htmp, ptrb
34874     B8 BF 02 FB |                 rdlong  retval, htmp
34878                 | 
34878     C6 73 03 F6 |                 mov     htmp1, hpar1
3487c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
34880     B9 BF 42 F0 |                 shr     retval, htmp1
34884                 | 
34884     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
34888     10 00 90 1D |         if_a    jmp     #.l1
3488c                 | 
3488c     C7 8F C3 F9 |                 decod   hpar2
34890     01 8E 87 F1 |                 sub     hpar2, #1
34894     C7 BF 02 F5 |                 and     retval, hpar2
34898     2D 00 64 FD |                 ret
3489c                 | .l1
3489c     FF 7F 00 FF 
348a0     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
348a4     03 70 07 F1 |                 add     htmp, #3
348a8     B8 75 03 FB |                 rdlong  htmp2, htmp
348ac     18 8E 87 F1 |                 sub     hpar2, #24
348b0     C7 8F C3 F9 |                 decod   hpar2
348b4     01 8E 87 F1 |                 sub     hpar2, #1
348b8     B9 75 43 F0 |                 shr     htmp2, htmp1
348bc     C7 75 03 F5 |                 and     htmp2, hpar2
348c0     18 74 67 F0 |                 shl     htmp2, #24
348c4     BA BF 42 F5 |                 or      retval, htmp2
348c8     2D 00 64 FD |                 ret
348cc                 | 
348cc                 | '------------------------------------------------------------------------------
348cc                 | ' Normalize value to signed word (-32768 / 32767)
348cc                 | '------------------------------------------------------------------------------
348cc                 | ' On entry:
348cc                 | '   retval - value to normalize
348cc                 | '   hidr_lminmax - min (word 1) max (word 0) value range
348cc                 | '   - or -
348cc                 | '   hidr_pminmax - min (word 1) max (word 0) value range
348cc                 | '   hidr_size - value bits length
348cc                 | ' On exit:
348cc                 | '   retval - normalized value
348cc                 | '------------------------------------------------------------------------------
348cc                 | hpad_normalize
348cc     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
348d0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
348d4     2D 00 64 AD |         if_z    ret
348d8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
348dc     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
348e0     0F 72 77 F7 |                 signx   htmp1, #15      wc
348e4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
348e8     00 BE 66 C7 |         if_c    signx   retval, #0-0
348ec     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
348f0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
348f4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
348f8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
348fc     B8 71 53 F6 |                 abs     htmp            wc
34900     1F BE 0E F4 |                 testb   retval, #31     wz
34904     5F BF 42 F6 |                 abs     retval
34908     B8 BF 12 FD |                 qdiv    retval, htmp
3490c     18 BE 62 FD |                 getqx   retval
34910     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
34914     C0 FF 7F FF 
34918     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3491c     2D 00 64 FD |                 ret
34920                 | 
34920                 | '------------------------------------------------------------------------------
34920                 | ' Perform controller actions
34920                 | ' On entry:
34920                 | '    hidr_id        report id
34920                 | '    hidr_axis      axis value (signed word, 2 axes per long)
34920                 | '                      X = hidr_axis+0, #0
34920                 | '                      Y = hidr_axis+0, #1
34920                 | '                      Z = hidr_axis+1, #0
34920                 | '                     RX = hidr_axis+1, #1
34920                 | '                     RY = hidr_axis+2, #0
34920                 | '                     RZ = hidr_axis+2, #1
34920                 | '    hidr_buttons   buttons state (bits 0 to 31)
34920                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
34920                 | '
34920                 | '                     -------3 -------2 -------1 -------0 byte
34920                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
34920                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
34920                 | '                                zyx||| |||||||| ++++++++ n. buttons
34920                 | '                                |||||| ||||++++--------- n. axes
34920                 | '                                |||||| ++++------------- n. hats
34920                 | '                                ++++++------------------ valid axes
34920                 | '------------------------------------------------------------------------------
34920                 | hpad_translate
34920                 | 
34920                 | 
34920                 |         if HAVE_HIDPAD
34920     84 0C F0 FE |                 loc     ptrb,#hidpad_report
34924     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
34928     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3492c     01 70 E7 F2 |                 cmpsub  htmp,#1
34930     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
34934     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
34938     2D 00 7C 3D |         if_ae   ret     wcz
3493c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
34940     B8 F3 03 F1 |                 add     ptrb,htmp
34944     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
34948     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3494c     28 0C 64 FD |                 setq    #7-1
34950     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
34954                 |         end
34954                 | 
34954                 | 
34954                 |         if EMUPAD_MAX_PLAYER > 0
34954                 | .emupad_no_hat
34954                 |         if EMUPAD_BT0_BIT >= 0
34954                 |         end
34954                 |         if EMUPAD_BT1_BIT >= 0
34954                 |         end
34954                 |         if EMUPAD_BT2_BIT >= 0
34954                 |         end
34954                 |         if EMUPAD_BT3_BIT >= 0
34954                 |         end
34954                 |         if EMUPAD_BT4_BIT >= 0
34954                 |         end
34954                 |         if EMUPAD_BT5_BIT >= 0
34954                 |         end
34954                 |         if EMUPAD_BT6_BIT >= 0
34954                 |         end
34954                 |         if EMUPAD_BT7_BIT >= 0
34954                 |         end
34954                 |         if EMUPAD_BT8_BIT >= 0
34954                 |         end
34954                 |         if EMUPAD_BT9_BIT >= 0
34954                 |         end
34954                 | .emupad_slot_over
34954                 |         end
34954                 | 
34954                 |         if 0
34954                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
34954                 | 
34954                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
34954                 | 
34954                 |         end
34954     2D 00 64 FD |                 ret
34958                 | end
34958                 | 
34958                 | if EMUPAD_MAX_PLAYER > 0
34958                 | '------------------------------------------------------------------------------
34958                 | ' Clear EmuPad state
34958                 | '------------------------------------------------------------------------------
34958                 | emupad_reset
34958                 | 
34958                 | '------------------------------------------------------------------------------
34958                 | ' Get EmuPad Player number for current device (into retval)
34958                 | ' Z flag is also set if current device is valid
34958                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
34958                 | '------------------------------------------------------------------------------
34958                 | emupad_getnum
34958                 | .loop
34958                 | '------------------------------------------------------------------------------
34958                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
34958                 | '------------------------------------------------------------------------------
34958                 | emupad_discon
34958                 | .loop         
34958                 |         
34958                 |         ' FALL THROUGH!!!
34958                 | 
34958                 | '------------------------------------------------------------------------------
34958                 | ' Update EmuPad reports (all of them...)
34958                 | '------------------------------------------------------------------------------
34958                 | emupad_write_reports
34958                 | .devloop
34958                 | 
34958                 | end
34958                 | 
34958                 | 
34958                 | '------------------------------------------------------------------------------
34958                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
34958                 | '------------------------------------------------------------------------------
34958                 | ' On entry:
34958                 | ' On exit:
34958                 | '------------------------------------------------------------------------------
34958                 | hget_hub_status
34958     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3495c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
34960     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
34964     01 90 2F F9 |                 setword hpar3, #1, #1
34968     CF 02 A0 FD |                 call    #do_int_in
3496c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34970     0C 00 90 AD |         if_z    jmp     #.data
34974     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
34978     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3497c     2D 00 64 FD |                 ret
34980                 | .data
34980     00 90 0F F2 |                 cmp     hpar3, #0               wz
34984     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
34988                 | 
34988     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3498c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
34990     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
34994     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
34998                 |                 debug(ubin_long(hub_status_chg))
34998                 | 
34998     01 5A 06 F6 |                 mov     hdev_port, #1
3499c                 | .loop
3499c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
349a0     0C 00 B0 AD |         if_x1   call    #hub_port_handler
349a4     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
349a8     F0 FF 9F 3D |         if_nc   jmp     #.loop
349ac     2D 00 64 FD |                 ret
349b0                 | 
349b0                 | hub_port_handler
349b0     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
349b4     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
349b8     27 EF 03 F6 |                 mov     pb, urx_buff_p
349bc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
349c0     55 02 A0 FD |                 call    #control_read
349c4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
349c8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
349c8                 | 
349c8     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
349cc     50 01 90 5D |         if_x0   jmp     #.other
349d0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
349d4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
349d8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
349dc     A0 02 A0 FD |                 call    #control_write
349e0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
349e4     7C 01 90 5D |         if_x0   jmp     #.disconnect
349e8     B0 99 02 F6 |                 mov     hctwait, _100ms_
349ec     EF 02 A0 FD |                 call    #poll_waitx
349f0                 | 
349f0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
349f4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
349f8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
349fc     A0 02 A0 FD |                 call    #control_write
34a00                 | 
34a00     02 76 07 F6 |                 mov     htmp3, #2
34a04                 | .wait_reset
34a04     AC 99 02 F6 |                 mov     hctwait, _8ms_
34a08     EF 02 A0 FD |                 call    #poll_waitx
34a0c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34a10     27 EF 03 F6 |                 mov     pb, urx_buff_p
34a14     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34a18     55 02 A0 FD |                 call    #control_read
34a1c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
34a20     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
34a24     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
34a28                 | 
34a28     10 02 D0 FE |                 loc     ptra, #clr_port_feat
34a2c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
34a30     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34a34     A0 02 A0 FD |                 call    #control_write
34a38                 | 
34a38     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
34a3c                 | .wait_recover
34a3c     A7 99 02 F6 |                 mov     hctwait, _1ms_
34a40     EF 02 A0 FD |                 call    #poll_waitx
34a44     FD 71 6F FB |                 djnz    htmp,#.wait_recover
34a48                 | 
34a48     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
34a4c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
34a50     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
34a54                 | 
34a54     00 08 00 FF 
34a58     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
34a5c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
34a60     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
34a64     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
34a68     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
34a6c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34a70     48 01 90 5D |         if_nz   jmp     #.done
34a74                 | .get_dev_desc
34a74     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
34a78     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
34a7c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
34a80     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
34a84     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
34a88     01 71 57 FC |                 wrword  htmp, ptra[wValue]
34a8c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
34a90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34a94     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
34a98     AC 99 02 F6 |                 mov     hctwait, _8ms_
34a9c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
34aa0     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
34aa4     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
34aa8     BE 00 A0 FD |                 call    #calc_crc5
34aac     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
34ab0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
34ab4     F7 AD C2 FA |                 rdbyte  total_data, pb
34ab8     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
34abc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
34ac0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34ac4     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
34ac8     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
34acc     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
34ad0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
34ad0     9F 99 02 F6 |                 mov     hctwait, _500us_
34ad4     EF 02 A0 FD |                 call    #poll_waitx
34ad8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
34adc     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
34ae0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
34ae4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
34ae8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34aec     CC 00 90 5D |         if_nz   jmp     #.done
34af0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
34af4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
34af8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
34afc     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
34b00     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
34b04     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
34b08     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
34b0c     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
34b10     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
34b14     A4 00 90 CD |         if_b    jmp     #.done
34b18     6C F0 BF FD |                 call    #hparse_con_desc
34b1c     9C 00 90 FD |                 jmp     #.done
34b20                 | 
34b20                 | .other
34b20     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
34b24     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
34b28     28 00 90 AD |         if_x1   jmp     #.reset_feature
34b2c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
34b30     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
34b34     1C 00 90 AD |         if_x1   jmp     #.reset_feature
34b38     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
34b3c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
34b40     10 00 90 AD |         if_x1   jmp     #.reset_feature
34b44     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
34b48     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
34b4c     04 00 90 AD |         if_x1   jmp     #.reset_feature
34b50     68 00 90 FD |                 jmp     #.done
34b54                 | .reset_feature
34b54     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
34b58     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34b5c     A0 02 A0 FD |                 call    #control_write
34b60     58 00 90 FD |                 jmp     #.done
34b64                 | .disconnect
34b64                 | 
34b64     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
34b68     00 70 E3 F8 |                 getbyte htmp
34b6c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
34b70     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
34b74     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
34b78     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
34b7c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
34b80     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
34b84                 |         if EMUPAD_MAX_PLAYER > 0
34b84                 |         end
34b84                 |         if HAVE_MOUSE
34b84     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
34b88     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
34b8c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
34b90                 |         end
34b90                 |         if HAVE_HIDPAD
34b90     14 0A F0 FE |                 loc ptrb,#hidpad_report
34b94     2D 71 03 F6 |                 mov htmp,hdev_port
34b98     01 70 E7 F2 |                 cmpsub htmp,#1
34b9c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
34ba0     B8 F3 03 F1 |                 add ptrb,htmp
34ba4     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
34ba8     80 01 6C FC |                 wrlong #0,ptrb
34bac                 |         end
34bac                 | 
34bac     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
34bb0     00 00 C4 F8 |                 setbyte #0
34bb4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34bb8     00 00 04 F6 |                 mov     0-0, #0
34bbc                 | 
34bbc                 | .done
34bbc     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
34bc0     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
34bc4     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
34bc8     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
34bcc     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
34bd0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
34bd4                 | 
34bd4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34bd8     27 EF 03 F6 |                 mov     pb, urx_buff_p
34bdc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34be0     55 02 A0 FD |                 call    #control_read
34be4     00 69 06 FB |                 rdlong  hub_port_status, ptra
34be8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
34be8     2D 00 64 FD |                 ret
34bec                 | 
34bec                 | '------------------------------------------------------------------------------
34bec                 | ' Partially populated SETUP packets
34bec                 | '------------------------------------------------------------------------------
34bec     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
34bed     06          |                 byte    REQ_GET_DESC
34bee     00 01       |                 word    TYPE_DEVICE << 8
34bf0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34bf2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34bf4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
34bf5     06          |                 byte    REQ_GET_DESC
34bf6     00 02       |                 word    TYPE_CONFIG << 8
34bf8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34bfa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34bfc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
34bfd     09          |                 byte    REQ_SET_CONFIG
34bfe     00 00       |                 word    0       ' Configuration value
34c00     00 00       |                 word    0       ' Zero
34c02     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
34c04     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
34c05     05          |                 byte    REQ_SET_ADDR
34c06     00 00       |                 word    0       ' Zero
34c08     00 00       |                 word    0       ' Zero
34c0a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
34c0c                 | '------------------------------------------------------------------------------
34c0c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
34c0c                 | ' wValue field dictates which protocol should be used.
34c0c                 | '
34c0c                 | ' When initialized, all devices default to report protocol. However the host
34c0c                 | ' should not make any assumptions about the device state and should set the
34c0c                 | ' desired protocol whenever initializing a device.
34c0c                 | '------------------------------------------------------------------------------
34c0c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34c0d     0B          |                 byte    HID_SET_PROTO
34c0e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
34c10                 |                                                 ' (HID 1.11 Section 7.2.6).
34c10     00 00       |                 word    0               ' Interface index number.
34c12     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
34c14                 | '------------------------------------------------------------------------------
34c14     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34c15     0A          |                 byte    HID_SET_IDLE
34c16     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
34c18                 |                                         ' reporting until a change is detected in the report data
34c18                 | 
34c18                 |                                         ' (HID 1.11 Section 7.2.4).
34c18     00 00       |                 word    0       ' Interface index number.
34c1a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
34c1c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34c1d     09          |                 byte    HID_SET_REPORT
34c1e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
34c20                 |                                         ' (HID 1.11 Section 7.2.2).
34c20     00 00       |                 word    0       ' Interface index number.
34c22     00 00       |                 word    0       ' Size of the report, in bytes.
34c24     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
34c25     06          |                 byte    REQ_GET_DESC
34c26     00 22       |                 word    TYPE_REPORT << 8
34c28     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34c2a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c2c                 | '------------------------------------------------------------------------------
34c2c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
34c2d     06          |                 byte    REQ_GET_DESC
34c2e     00 29       |                 word    TYPE_HUB << 8
34c30     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34c32     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c34     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
34c35     03          |                 byte    REQ_SET_FEATURE
34c36     00 00       |                 word    0       ' port power
34c38     01 00       |                 word    1       ' Port index number (1+)
34c3a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c3c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
34c3d     01          |                 byte    REQ_CLEAR_FEATURE
34c3e     00 00       |                 word    0       ' port power
34c40     01 00       |                 word    1       ' Port index number (1+)
34c42     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34c44     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
34c45     00          |                 byte    REQ_GET_STATUS
34c46     00 00       |                 word    0
34c48     01 00       |                 word    1       ' Port index number (1+)
34c4a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
34c4c                 | '------------------------------------------------------------------------------
34c4c                 | if _HAVE_GAMEPAD
34c4c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
34c50                 | ps3_command_buff
34c50     00 00 00 00 
34c54     00          |                 byte    $00, $00, $00, $00, $00
34c55     00 00 00 00 
34c59     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
34c5a     FF 27 10 00 
34c5e     32          |                 byte    $FF, $27, $10, $00, $32
34c5f     FF 27 10 00 
34c63     32          |                 byte    $FF, $27, $10, $00, $32
34c64     FF 27 10 00 
34c68     32          |                 byte    $FF, $27, $10, $00, $32
34c69     FF 27 10 00 
34c6d     32          |                 byte    $FF, $27, $10, $00, $32
34c6e     00 00 00 00 
34c72     00          |                 byte    $00, $00, $00, $00, $00
34c73     00 00 00 00 
34c77     00          |                 byte    $00, $00, $00, $00, $00
34c78     00 00 00 00 
34c7c     00          |                 byte    $00, $00, $00, $00, $00
34c7d     00 00 00    |                 byte    $00, $00, $00
34c80                 | '------------------------------------------------------------------------------
34c80     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
34c83                 |                                         ' 0x01 All blinking
34c83                 |                                         ' 0x02 1 flashes, then on
34c83                 |                                         ' 0x03 2 flashes, then on
34c83                 |                                         ' 0x04 3 flashes, then on
34c83                 |                                         ' 0x05 4 flashes, then on
34c83                 |                                         ' 0x06 1 on
34c83                 |                                         ' 0x07 2 on
34c83                 |                                         ' 0x08 3 on
34c83                 |                                         ' 0x09 4 on
34c83                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
34c83                 |                                         ' 0x0B Blinking*
34c83                 |                                         ' 0x0C Slow blinking*
34c83                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
34c83     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
34c86     00          |                 byte    $00             ' Left rumble
34c87     00          |                 byte    $00             ' Right rumble
34c88     00 00 00    |                 byte    $00, $00, $00
34c8b     00          | end
34c8c                 | alignl
34c8c                 | 
34c8c                 | if HAVE_MOUSE
34c8c     00 00 00 00 
34c90     00 00 00 00 | mouse_limits long 0[2]
34c94     00 00 00 00 | mouse_outptr long 0
34c98                 | end
34c98                 | 
34c98                 | if KEYQUEUE_SIZE > 0
34c98     00          | keyq_head byte 0
34c99     00          | keyq_tail byte 0
34c9a     00 00 00 00 
      ...             
34e96     00 00 00 00 
34e9a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
34e9c                 | alignl
34e9c                 | end
34e9c                 | 
34e9c                 | if EMUPAD_MAX_PLAYER > 0
34e9c                 | emupad_rule_buffer
34e9c                 | if EMUPAD_BUILTIN_RULES
34e9c                 | file "padmap_builtin.dat"
34e9c                 | end
34e9c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
34e9c                 | '' Default rule directly follows!
34e9c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
34e9c                 | end
34e9c                 | 
34e9c                 | '------------------------------------------------------------------------------
34e9c                 | ' The USB data cache area gets zero-filled at every device disconnect
34e9c                 | '------------------------------------------------------------------------------
34e9c                 | usb_cache_start
34e9c                 | 
34e9c                 | ' HID descriptor and report buffers
34e9c                 | if !!OVERLAP_MEMORY
34e9c     00 00 00 00 
      ...             
35594     00 00 00 00 
35598     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3559c                 | end
3559c     00 00 00 00 
355a0     00 00 00 00 | hkbd_report     byte    0[8]
355a4     00 00 00 00 | hkbd_led_rep    byte    0
355a8                 | alignl
355a8                 | 
355a8                 | if HAVE_HIDPAD
355a8     00 00 00 00 
      ...             
35664     00 00 00 00 
35668     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3566c                 | end
3566c                 | 
3566c                 | ' HUB descriptor
3566c     00          | hub_descr       byte    0   ' bDescLength
3566d     00          |                 byte    0   ' bDescriptorType
3566e     00          |                 byte    0   ' bNbrPorts
3566f     00 00       |                 word    0   ' wHubCharacteristics
35671     00          |                 byte    0   ' bPwrOn2PwrGood
35672     00          |                 byte    0   ' bHubContrCurrent
35673     00          |                 byte    0   ' DeviceRemoveable
35674     00          |                 byte    0   ' PortPwrCtrlMask
35675                 | 
35675                 | usb_cache_end
35675                 | 
35675                 | if HAVE_MOUSE
35675     00 00 00 00 | mouse_xacc      long 0
35679     00 00 00 00 | mouse_yacc      long 0
3567d     00 00 00 00 | mouse_zacc      long 0
35681     00          | mouse_bstate    byte 0
35682     00          | mouse_lpending  byte 0
35683     00          | mouse_rpending  byte 0
35684     00          | mouse_mpending  byte 0
35685     00          | mouse_lock      byte 0
35686     00 00 00    |                 byte 0[3] ' padding
35689                 | end
35689                 | 
35689     00 00 00 00 
      ...             
35701     00 00 00 00 
35705     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
35709     00 00 00 00 
3570d     00 00 00 00 
35711     00 00 00 00 
35715     00 00 00 00 
35719     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3571b     00 00 00 00 
      ...             
35813     00 00 00 00 
35817     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3581b                 | 
3581b     00          | driver_cog      byte    0                       ' Current driver cog + 1
3581c                 | 	alignl
3581c                 | _audio096_spin2_dat_
3581c                 | 
3581c                 | audio       org     0
3581c                 | 
3581c     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
35820     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
35824     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
35828                 | 
35828     01 EC 63 FD |             cogid   pa                   ' compute cogid
3582c     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
35830     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
35834     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
35838                 | 
35838     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3583c     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
35840     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
35844     0F 20 06 FC |             wrpin   dac2,#right
35848     0F 00 1E FC |             wxpin   #256,#right    
3584c     41 9C 64 FD |             dirh    #left addpins 1
35850     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
35854     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
35858     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3585c                 |             
3585c                 | '---------------------------------------------------------------------------------        
3585c                 | '----------------- The main loop -------------------------------------------------
3585c                 | '---------------------------------------------------------------------------------
3585c                 | 
3585c     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
35860     10 00 90 CD |       if_c  jmp     #loop1
35864                 |   
35864     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
35868     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3586c     D3 00 80 F1 |             sub     0-0,a40000000
35870     FD FD 6D FB |             djnz    cn,#p402
35874                 |     
35874     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
35878     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
3587c     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
35880     01 FC 05 C6 |     if_c    mov     cn,#1
35884     D8 FE 39 F3 |             fle     ct,time3 wcz
35888     02 FC 05 C6 |     if_c    mov     cn,#2     
3588c     D9 FE 39 F3 |             fle     ct,time4 wcz
35890     03 FC 05 C6 |     if_c    mov     cn,#3
35894     DA FE 39 F3 |             fle     ct,time5 wcz
35898     04 FC 05 C6 |     if_c    mov     cn,#4
3589c     DB FE 39 F3 |             fle     ct,time6 wcz
358a0     05 FC 05 C6 |     if_c    mov     cn,#5
358a4     DC FE 39 F3 |             fle     ct,time7 wcz
358a8     06 FC 05 C6 |     if_c    mov     cn,#6
358ac     DD FE 39 F3 |             fle     ct,time8 wcz
358b0     07 FC 05 C6 |     if_c    mov     cn,#7
358b4                 | 
358b4                 | 
358b4                 | '----------------------------------------------------------------------------------
358b4                 | '------------- Compute channel samples --------------------------------------------
358b4                 | '----------------------------------------------------------------------------------
358b4                 | 
358b4                 | 
358b4     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
358b8     06 BC 65 F0 |             shl     channeladd,#6
358bc     DE F0 03 F1 |             add     ptra,channeladd
358c0                 | 
358c0     28 16 64 FD |             setq    #11                        	' read parameters
358c4     00 D3 05 FB |             rdlong  pointer0,ptra
358c8                 |     	    
358c8     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
358cc     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
358d0     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
358d4     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
358d8     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
358dc     00 C0 0D F2 |             cmp     qq,#0 wz                         
358e0     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
358e4     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
358e8                 |             
358e8     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
358ec     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
358f0     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
358f4                 | 
358f4     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
358f8     EA 04 3A F9 |             getword oldrs,sample0,#1
358fc     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
35900     EE F6 31 F9 |     	    getword avol0,volpan0,#0
35904     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
35908     EF F2 31 F9 |             getword afreq0,freqskip0,#0
3590c                 | 
3590c     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
35910     00 00 02 F6 |             mov     dt0,0-0    
35914     D5 00 82 F1 |             sub     dt0,time0
35918                 |             
35918     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
3591c     F9 00 00 F1 |             add     0-0,afreq0  	
35920                 |             
35920                 | '---- envelopes
35920                 |             
35920     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
35924     20 00 00 AF 
35928     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3592c     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
35930                 | 
35930     F9 44 02 F6 |             mov     envs1,afreq0
35934     F3 44 02 FA |             mul     envs1,envspd0
35938     22 E3 01 F1 |             add     envph0,envs1 
3593c                 | 
3593c     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
35940     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
35944     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
35948     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3594c     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
35950     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
35954     00 42 06 36 |     if_ge   mov     envlo,#0
35958     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
3595c     16 E2 65 30 |     if_ge   shl     envph0,#22
35960                 | 
35960     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
35964     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
35968     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
3596c     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
35970     22 47 3A F9 |             getword envs2,envs1,#1		' next value
35974     22 45 32 F9 |             getword envs1,envs1,#0		' current value
35978     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3597c     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
35980     21 45 02 FA |             mul     envs1,envlo
35984     23 45 02 F1 |             add     envs1,envs2
35988     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
3598c                 |             
3598c     1B D6 0D F4 | p410        testb   sstart0, #27 wz
35990     1B C2 61 AD |     if_z    getrnd  spl
35994     58 00 90 AD |     if_z    jmp     #p406
35998                 |  
35998     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3599c     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
359a0     08 D2 45 F0 |             shr     pointer0,#8
359a4                 |          
359a4     1F D6 0D F4 |             testb   sstart0,#31 wz            
359a8     01 D2 65 A0 |     if_z    shl     pointer0,#1        
359ac     1C D6 0D F4 |             testb   sstart0,#28 wz            
359b0     01 D2 65 A0 |     if_z    shl     pointer0,#1        
359b4                 |         
359b4     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
359b8     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
359bc     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
359c0                 |             
359c0     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
359c4     EB C0 01 F1 |             add     qq,sstart0            
359c8                 | 
359c8     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
359cc     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
359d0     14 01 B0 1D |     if_gt   call    #cache_read
359d4                 |          
359d4     1F D6 0D F4 |             testb   sstart0,#31 wz 
359d8     08 C2 65 50 |     if_nz   shl     spl,#8
359dc     08 D2 65 50 |     if_nz   shl     pointer0,#8
359e0     07 D2 65 A0 |     if_z    shl     pointer0,#7
359e4     1C D6 0D F4 |             testb   sstart0,#28 wz            
359e8     01 D2 45 A0 |     if_z    shr     pointer0,#1    
359ec     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
359f0                 | 
359f0                 | 
359f0     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
359f4     00 C2 01 F6 |             mov     spl,0-0
359f8     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
359fc     00 C2 01 F6 |             mov     spl,0-0
35a00                 | 
35a00     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
35a04     00 06 02 F6 |             mov     ls0,0-0
35a08     20 00 00 FF 
35a0c     00 C0 05 F6 |             mov     qq,##16384
35a10     FC C0 81 F1 |             sub     qq,apan0
35a14     E0 C2 31 FA |             scas    spl,qq
35a18     00 08 02 F6 |             mov     rs0, 0-0
35a1c                 | 
35a1c     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
35a20     04 0D 02 F1 |             add     rs,rs0
35a24     01 0B 82 F1 |             sub     ls,oldls
35a28     03 0B 02 F1 |             add     ls,ls0
35a2c                 |    
35a2c     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
35a30     03 D5 21 F9 |             setword sample0,ls0,#0
35a34                 |             
35a34     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
35a38     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
35a3c     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
35a40                 |   '  if_z    mov     sample0,#0
35a40     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
35a44     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
35a48     04 00 00 AF 
35a4c     00 AC 05 A1 |     if_z    add     time1,##2048
35a50     D6 AE 01 A6 |     if_z    mov     time2,time1
35a54     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
35a58                 | 
35a58     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
35a5c     00 D3 65 FC |             wrlong  pointer0,ptra
35a60     08 E3 65 FC |             wrlong  envph0,ptra[8]
35a64     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
35a68                 |                       
35a68     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
35a6c     FF BF 25 A7 |     if_z    decmod  front, #511          
35a70                 |          
35a70     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
35a74     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
35a78     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
35a7c     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
35a80                 | 	    
35a80                 | 		    
35a80     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
35a84     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
35a88     02 11 02 F6 |             mov     newsample, oldrs       
35a8c                 | 
35a8c     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
35a90     00 AB 01 F1 |             add     time0,dt0    
35a94                 |                                      
35a94     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
35a98     D8 FD 9F AD |     if_z    jmp     #loop1
35a9c     00 C1 01 F6 |             mov     qq,dt0
35aa0                 |   
35aa0     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
35aa4     00 BE 9D F2 |             cmpr    front, #0-0 wcz
35aa8     F4 FF 9F AD |     if_e    jmp     #p301    
35aac                 | 		
35aac     00 16 0E F2 | 	    cmp     scbase,#0 wz
35ab0     20 00 90 AD |     if_z    jmp     #p302	   
35ab4                 |   
35ab4     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
35ab8     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
35abc     02 1A 66 C0 |     if_c    shl     scptr2,#2
35ac0     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
35ac4     60 1A 66 FC |             wrlong  scptr2,#$60
35ac8     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
35acc     01 00 00 CF 
35ad0     7F 18 06 C7 |     if_c    incmod  scptr,##639
35ad4                 | 			    
35ad4     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
35ad8     00 00 00 FF 
35adc     FF BF 05 F7 |             incmod  front, ##511
35ae0     EF C1 6D FB |             djnz    qq,#p301
35ae4                 |             
35ae4     74 FD 9F FD |             jmp     #loop            'loop
35ae8                 | 
35ae8                 | '----------------------------------------------------------------------------------
35ae8                 | '------------- This is the end of the main loop -----------------------------------
35ae8                 | '----------------------------------------------------------------------------------
35ae8                 | 
35ae8                 | '----------------------------------------------------------------------------------
35ae8                 | '------------- PSRAM cache ----------- --------------------------------------------
35ae8                 | '----------------------------------------------------------------------------------
35ae8                 | 
35ae8                 | ' There are 8 cache pointers for 8 channels
35ae8                 | ' if 24 higher bits of address=cache, then get a word from the cache
35ae8                 | ' else load the cache from PSRAM, update the pointer, then read a sample
35ae8                 | 
35ae8                 | 
35ae8     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
35aec                 |             
35aec     E0 3C 02 F6 | 	    mov     addrhi,qq		
35af0     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
35af4     12 FD 95 F9 | 	    alts    cn,#cache1            
35af8     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
35afc     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
35b00                 | 	
35b00     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
35b04     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
35b08     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
35b0c     08 34 66 F0 | 	    shl     cmd,#8
35b10     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
35b14     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
35b18     08 36 66 F0 |             shl     hubaddr,#8                  '
35b1c     11 37 02 F1 |             add     hubaddr,hubptr 
35b20     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
35b24     28 04 64 FD |             setq    #2                          ' write 3 longs
35b28     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
35b2c     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
35b30     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
35b34                 |             
35b34                 | 	
35b34     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
35b38     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
35b3c     11 C1 01 F1 | 	    add     qq,hubptr
35b40     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
35b44     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
35b48                 |           
35b48                 | 
35b48                 | '--------------------------------------------------------------------------
35b48                 | '------ Interrupt service -------------------------------------------------
35b48                 | '------ Output the sample, get the next one if exists ---------------------
35b48                 | '--------------------------------------------------------------------------
35b48                 | 
35b48     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
35b4c     0F CC 25 FC |             wypin   rsample,#right       '4
35b50     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
35b54     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
35b58     FF F3 07 57 |     if_ne   incmod  ptrb,#511
35b5c     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
35b60     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
35b64                 |     
35b64     F5 FF 3B FB |             reti1                        '17/19 
35b68                 |           
35b68                 | '---------------------------------------------------------------------------
35b68                 | '-------- End of interrupt -------------------------------------------------
35b68                 | '---------------------------------------------------------------------------    
35b68                 | 
35b68                 | 
35b68                 | '---------------------------------------------------------------------------
35b68                 | '------- Variables ---------------------------------------------------------
35b68                 | '---------------------------------------------------------------------------
35b68                 | 
35b68                 | ' constants
35b68                 | 
35b68     00 00 00 40 | a40000000   long $40000000
35b6c     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
35b70                 | 
35b70                 | ' Time variables
35b70                 | 
35b70     00 00 00 00 | time0       long 0    ' Global sample computing time
35b74     01 00 00 00 | time1       long 1    ' Local channels time
35b78     02 00 00 00 | time2       long 2
35b7c     03 00 00 00 | time3       long 3
35b80     04 00 00 00 | time4       long 4
35b84     05 00 00 00 | time5       long 5
35b88     06 00 00 00 | time6       long 6
35b8c     07 00 00 00 | time7       long 7
35b90     08 00 00 00 | time8       long 8
35b94                 | 
35b94     00 00 00 00 | channeladd long 0
35b98                 | 
35b98     00 00 00 00 | front       long 0
35b9c                 | 
35b9c                 | ' temporary variables 
35b9c     00 00 00 00 | qq          long 0
35ba0     00 00 00 00 | spl         long 0
35ba4     00 00 00 00 | zero        long 0
35ba8     00 00 00 00 | mailbox     long 0
35bac     00 00 00 00 | mailbox2 long 0
35bb0                 | 
35bb0                 | ' Interrupt ISR variables
35bb0                 | 
35bb0     00 00 00 00 | lsample     long 0
35bb4     00 00 00 00 | rsample     long 0
35bb8     00 00 00 00 | lsnext      long 0
35bbc     00 00 00 00 | rsnext      long 0 
35bc0                 | 
35bc0                 | ' channel parameter block
35bc0                 | 
35bc0     00 00 00 00 | pointer0    long 0     
35bc4     00 00 00 00 | sample0     long 0
35bc8     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
35bcc     00 00 00 00 | lstart0     long 0
35bd0     00 00 00 00 | lend0       long 0
35bd4     00 00 00 00 | volpan0     long 0
35bd8     00 00 00 00 | freqskip0   long 0
35bdc     00 00 00 00 | command0    long 0
35be0     00 00 00 00 | envph0	    long 0
35be4     00 00 00 00 | envptr0	    long 0
35be8     00 00 00 00 | envspd0	    long 0
35bec     00 00 00 00 | envlen0	    long 0
35bf0     00 00 00 00 | res5	    long 0
35bf4     00 00 00 00 | res6	    long 0
35bf8     00 00 00 00 | res7	    long 0
35bfc     00 00 00 00 | res8	    long 0
35c00                 | 
35c00     00 00 00 00 | afreq0      long 0
35c04     00 00 00 00 | askip0      long 0
35c08     00 00 00 00 | avol0       long 0
35c0c     00 00 00 00 | apan0       long 0
35c10                 | 
35c10     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
35c14     00 00 00 00 | cn          long 0
35c18     00 00 00 00 | ct          long 0
35c1c     00 00 00 00 | dt0         long 0
35c20                 | 
35c20                 | ' Samples
35c20     00 00 00 00 | oldls       long 0
35c24     00 00 00 00 | oldrs       long 0
35c28                 | 
35c28     00 00 00 00 | ls0         long 0
35c2c     00 00 00 00 | rs0         long 0
35c30                 | 
35c30     00 00 00 00 | ls          long 0    
35c34     00 00 00 00 | rs          long 0
35c38                 | 
35c38     00 00 00 00 | oldsample   long 0
35c3c     00 00 00 00 | newsample   long 0
35c40                 | 
35c40     00 00 00 00 | nrsample    long 0
35c44     00 00 00 00 | nlsample    long 0
35c48                 | 
35c48     00 00 00 00 | scbase long 0
35c4c     00 00 00 00 | scptr long 0
35c50     00 00 00 00 | scptr2 long 0
35c54     00 00 00 00 | scope long 0
35c58                 | 
35c58     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
35c5c     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
35c60                 | 
35c60     00 18 07 00 | hubptr      long $71800
35c64     00 00 00 00 | cache1      long 0
35c68     00 00 00 00 | cache2      long 0
35c6c     00 00 00 00 | cache3      long 0
35c70     00 00 00 00 | cache4      long 0
35c74     00 00 00 00 | cache5      long 0
35c78     00 00 00 00 | cache6      long 0
35c7c     00 00 00 00 | cache7      long 0
35c80     00 00 00 00 | cache8      long 0
35c84                 | 
35c84                 | 
35c84     00 00 00 00 | cmd         long 0
35c88     00 00 00 00 | hubaddr     long 0
35c8c     00 01 00 00 | count       long 256
35c90     00 00 00 00 | addrlo long 0
35c94     00 00 00 00 | addrhi long 0
35c98     00 00 00 00 | pointer00 long 0
35c9c     00 00 00 00 | envhi long 0
35ca0     00 00 00 00 | envlo long 0
35ca4     00 00 00 00 | envs1 long 0
35ca8     00 00 00 00 | envs2 long 0
35cac     00 00 00 00 | noise0 long 0
35cb0     00 00 00 00 
35cb4     00 00 00 00 | null  			long 	0,0           ' for channel reset
35cb8                 | 	alignl
35cb8                 | __system__dat_
35cb8     00 00 00 00 
35cbc     00 00 00 00 | 	byte	$00[8]
35cc0     03 00 00 00 
35cc4     00 00 00 00 
35cc8     00 00 00 00 
35ccc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35cd0     00 00 00 00 
      ...             
35f5c     00 00 00 00 
35f60     00 00 00 00 | 	byte	$00[660]
35f64     00 00 E0 07 | 	long	(126 {__system____root_opendir})<<20
35f68     00 00 F0 07 | 	long	(127 {__system____root_closedir})<<20
35f6c     00 00 00 08 | 	long	(128 {__system____root_readdir})<<20
35f70     00 00 10 08 | 	long	(129 {__system____root_stat})<<20
35f74     00 00 00 00 
35f78     00 00 00 00 
35f7c     00 00 00 00 
35f80     00 00 00 00 
35f84     00 00 00 00 
35f88     00 00 00 00 
35f8c     00 00 00 00 | 	byte	$00[28]
35f90     F8 5F 03 00 | 	long	@@@__system__dat_ + 832
35f94     FB 5F 03 00 | 	long	@@@__system__dat_ + 835
35f98     1C 60 03 00 | 	long	@@@__system__dat_ + 868
35f9c     35 60 03 00 | 	long	@@@__system__dat_ + 893
35fa0     50 60 03 00 | 	long	@@@__system__dat_ + 920
35fa4     6A 60 03 00 | 	long	@@@__system__dat_ + 946
35fa8     7A 60 03 00 | 	long	@@@__system__dat_ + 962
35fac     8C 60 03 00 | 	long	@@@__system__dat_ + 980
35fb0     9E 60 03 00 | 	long	@@@__system__dat_ + 998
35fb4     B0 60 03 00 | 	long	@@@__system__dat_ + 1016
35fb8     BC 60 03 00 | 	long	@@@__system__dat_ + 1028
35fbc     CD 60 03 00 | 	long	@@@__system__dat_ + 1045
35fc0     E1 60 03 00 | 	long	@@@__system__dat_ + 1065
35fc4     EB 60 03 00 | 	long	@@@__system__dat_ + 1075
35fc8     FB 60 03 00 | 	long	@@@__system__dat_ + 1091
35fcc     0A 61 03 00 | 	long	@@@__system__dat_ + 1106
35fd0     20 61 03 00 | 	long	@@@__system__dat_ + 1128
35fd4     39 61 03 00 | 	long	@@@__system__dat_ + 1153
35fd8     4D 61 03 00 | 	long	@@@__system__dat_ + 1173
35fdc     5B 61 03 00 | 	long	@@@__system__dat_ + 1187
35fe0     6F 61 03 00 | 	long	@@@__system__dat_ + 1207
35fe4     7B 61 03 00 | 	long	@@@__system__dat_ + 1219
35fe8     8D 61 03 00 | 	long	@@@__system__dat_ + 1237
35fec     A5 61 03 00 | 	long	@@@__system__dat_ + 1261
35ff0     B7 61 03 00 | 	long	@@@__system__dat_ + 1279
35ff4     CA 61 03 00 | 	long	@@@__system__dat_ + 1298
35ff8     4F 4B 00 4E 
35ffc     75 6D 65 72 
36000     69 63 61 6C 
36004     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
36008     75 6D 65 6E 
3600c     74 20 6F 75 
36010     74 20 6F 66 
36014     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
36018     61 69 6E 00 
3601c     52 65 73 75 
36020     6C 74 20 6E 
36024     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
36028     65 70 72 65 
3602c     73 65 6E 74 
36030     61 62 6C 65 
36034     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
36038     65 67 61 6C 
3603c     20 6D 75 6C 
36040     74 69 62 79 
36044     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
36048     65 71 75 65 
3604c     6E 63 65 00 
36050     4E 6F 20 73 
36054     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
36058     66 69 6C 65 
3605c     20 6F 72 20 
36060     64 69 72 65 
36064     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
36068     79 00 42 61 
3606c     64 20 66 69 
36070     6C 65 20 6E 
36074     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
36078     72 00 50 65 
3607c     72 6D 69 73 
36080     73 69 6F 6E 
36084     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
36088     69 65 64 00 
3608c     4E 6F 74 20 
36090     65 6E 6F 75 
36094     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
36098     65 6D 6F 72 
3609c     79 00 54 65 
360a0     6D 70 6F 72 
360a4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
360a8     66 61 69 6C 
360ac     75 72 65 00 
360b0     46 69 6C 65 
360b4     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
360b8     73 74 73 00 
360bc     49 6E 76 61 
360c0     6C 69 64 20 
360c4     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
360c8     6D 65 6E 74 
360cc     00 54 6F 6F 
360d0     20 6D 61 6E 
360d4     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
360d8     65 6E 20 66 
360dc     69 6C 65 73 
360e0     00 49 2F 4F 
360e4     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
360e8     6F 72 00 4E 
360ec     6F 74 20 61 
360f0     20 64 69 72 
360f4     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
360f8     72 79 00 49 
360fc     73 20 61 20 
36100     64 69 72 65 
36104     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
36108     79 00 52 65 
3610c     61 64 20 6F 
36110     6E 6C 79 20 
36114     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
36118     20 73 79 73 
3611c     74 65 6D 00 
36120     46 75 6E 63 
36124     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
36128     20 6E 6F 74 
3612c     20 69 6D 70 
36130     6C 65 6D 65 
36134     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
36138     00 44 69 72 
3613c     65 63 74 6F 
36140     72 79 20 6E 
36144     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
36148     6D 70 74 79 
3614c     00 4E 61 6D 
36150     65 20 74 6F 
36154     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
36158     6E 67 00 44 
3615c     65 76 69 63 
36160     65 20 6E 6F 
36164     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
36168     65 6B 61 62 
3616c     6C 65 00 42 
36170     61 64 20 61 
36174     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
36178     73 73 00 42 
3617c     72 6F 6B 65 
36180     6E 20 63 6F 
36184     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
36188     74 69 6F 6E 
3618c     00 44 65 76 
36190     69 63 65 20 
36194     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
36198     65 73 6F 75 
3619c     72 63 65 20 
361a0     62 75 73 79 
361a4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
361a8     73 73 20 64 
361ac     65 76 69 63 
361b0     65 20 6C 69 
361b4     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
361b8     6F 20 73 70 
361bc     61 63 65 20 
361c0     6F 6E 20 64 
361c4     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
361c8     65 00 55 6E 
361cc     6B 6E 6F 77 
361d0     6E 20 65 72 
361d4     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
361d8     00 00 00 00 
361dc     00 00 00 00 | 	byte	$00[8]
361e0     05 00 00 00 
361e4     00 00 00 00 
361e8     00 00 00 00 
361ec     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361f0     00 00 00 00 | 	byte	$00, $00, $00, $00
361f4     00 00 60 09 | 	long	(150 {__system___tx})<<20
361f8     00 00 70 09 | 	long	(151 {__system___rx})<<20
361fc     00 00 00 00 | 	byte	$00, $00, $00, $00
36200     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
36204     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
36208     00 00 00 00 
3620c     00 00 00 00 | 	byte	$00[8]
36210     01 00 00 00 
36214     06 00 00 00 
36218     00 00 00 00 
3621c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36220     00 00 00 00 
36224     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
36228     00 00 60 09 | 	long	(150 {__system___tx})<<20
3622c     00 00 70 09 | 	long	(151 {__system___rx})<<20
36230     00 00 00 00 | 	byte	$00, $00, $00, $00
36234     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
36238     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
3623c     00 00 00 00 
36240     00 00 00 00 | 	byte	$00[8]
36244     01 00 00 00 
36248     06 00 00 00 
3624c     00 00 00 00 
36250     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36254     00 00 00 00 
36258     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3625c     00 00 60 09 | 	long	(150 {__system___tx})<<20
36260     00 00 70 09 | 	long	(151 {__system___rx})<<20
36264     00 00 00 00 | 	byte	$00, $00, $00, $00
36268     00 00 80 09 | 	long	(152 {__system___rxtxioctl_0630})<<20
3626c     00 00 90 09 | 	long	(153 {__system____dummy_flush_0631})<<20
36270     00 00 00 00 
      ...             
363e0     00 00 00 00 
363e4     00 00 00 00 | 	byte	$00[376]
363e8     EC 63 03 00 | 	long	@@@__system__dat_ + 1844
363ec     00 00 00 00 
363f0     00 00 00 00 
363f4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
363f8                 | 	alignl
363f8                 | _fatfs_cc_dat_
363f8     C7 00 FC 00 
363fc     E9 00 E2 00 
36400     E4 00 E0 00 
36404     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
36408     EA 00 EB 00 
3640c     E8 00 EF 00 
36410     EE 00 EC 00 
36414     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
36418     C9 00 E6 00 
3641c     C6 00 F4 00 
36420     F6 00 F2 00 
36424     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
36428     FF 00 D6 00 
3642c     DC 00 F8 00 
36430     A3 00 D8 00 
36434     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
36438     E1 00 ED 00 
3643c     F3 00 FA 00 
36440     F1 00 D1 00 
36444     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
36448     BF 00 AE 00 
3644c     AC 00 BD 00 
36450     BC 00 A1 00 
36454     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
36458     91 25 92 25 
3645c     93 25 02 25 
36460     24 25 C1 00 
36464     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
36468     A9 00 63 25 
3646c     51 25 57 25 
36470     5D 25 A2 00 
36474     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
36478     14 25 34 25 
3647c     2C 25 1C 25 
36480     00 25 3C 25 
36484     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
36488     5A 25 54 25 
3648c     69 25 66 25 
36490     60 25 50 25 
36494     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
36498     F0 00 D0 00 
3649c     CA 00 CB 00 
364a0     C8 00 31 01 
364a4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
364a8     CF 00 18 25 
364ac     0C 25 88 25 
364b0     84 25 A6 00 
364b4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
364b8     D3 00 DF 00 
364bc     D4 00 D2 00 
364c0     F5 00 D5 00 
364c4     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
364c8     DE 00 DA 00 
364cc     DB 00 D9 00 
364d0     FD 00 DD 00 
364d4     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
364d8     AD 00 B1 00 
364dc     17 20 BE 00 
364e0     B6 00 A7 00 
364e4     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
364e8     B0 00 A8 00 
364ec     B7 00 B9 00 
364f0     B3 00 B2 00 
364f4     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
364f8     61 00 1A 03 
364fc     E0 00 17 03 
36500     F8 00 07 03 
36504     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
36508     78 01 00 01 
3650c     30 01 32 01 
36510     06 01 39 01 
36514     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
36518     2E 01 79 01 
3651c     06 01 80 01 
36520     4D 00 43 02 
36524     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
36528     82 01 84 01 
3652c     84 01 86 01 
36530     87 01 87 01 
36534     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
36538     8B 01 8B 01 
3653c     8D 01 8E 01 
36540     8F 01 90 01 
36544     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
36548     93 01 94 01 
3654c     F6 01 96 01 
36550     97 01 98 01 
36554     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
36558     9B 01 9C 01 
3655c     9D 01 20 02 
36560     9F 01 A0 01 
36564     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
36568     A2 01 A4 01 
3656c     A4 01 A6 01 
36570     A7 01 A7 01 
36574     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
36578     AB 01 AC 01 
3657c     AC 01 AE 01 
36580     AF 01 AF 01 
36584     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
36588     B3 01 B3 01 
3658c     B5 01 B5 01 
36590     B7 01 B8 01 
36594     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
36598     BB 01 BC 01 
3659c     BC 01 BE 01 
365a0     F7 01 C0 01 
365a4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
365a8     C3 01 C4 01 
365ac     C5 01 C4 01 
365b0     C7 01 C8 01 
365b4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
365b8     CB 01 CA 01 
365bc     CD 01 10 01 
365c0     DD 01 01 00 
365c4     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
365c8     12 01 F3 01 
365cc     03 00 F1 01 
365d0     F4 01 F4 01 
365d4     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
365d8     22 02 12 01 
365dc     3A 02 09 00 
365e0     65 2C 3B 02 
365e4     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
365e8     66 2C 3F 02 
365ec     40 02 41 02 
365f0     41 02 46 02 
365f4     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
365f8     40 00 81 01 
365fc     86 01 55 02 
36600     89 01 8A 01 
36604     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
36608     5A 02 90 01 
3660c     5C 02 5D 02 
36610     5E 02 5F 02 
36614     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
36618     62 02 94 01 
3661c     64 02 65 02 
36620     66 02 67 02 
36624     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
36628     6A 02 62 2C 
3662c     6C 02 6D 02 
36630     6E 02 9C 01 
36634     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
36638     9D 01 73 02 
3663c     74 02 9F 01 
36640     76 02 77 02 
36644     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
36648     7A 02 7B 02 
3664c     7C 02 64 2C 
36650     7E 02 7F 02 
36654     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
36658     82 02 A9 01 
3665c     84 02 85 02 
36660     86 02 87 02 
36664     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
36668     B1 01 B2 01 
3666c     45 02 8D 02 
36670     8E 02 8F 02 
36674     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
36678     B7 01 7B 03 
3667c     03 00 FD 03 
36680     FE 03 FF 03 
36684     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
36688     86 03 88 03 
3668c     89 03 8A 03 
36690     B1 03 11 03 
36694     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
36698     A3 03 A3 03 
3669c     C4 03 08 03 
366a0     CC 03 03 00 
366a4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
366a8     8F 03 D8 03 
366ac     18 01 F2 03 
366b0     0A 00 F9 03 
366b4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
366b8     F5 03 F6 03 
366bc     F7 03 F7 03 
366c0     F9 03 FA 03 
366c4     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
366c8     20 03 50 04 
366cc     10 07 60 04 
366d0     22 01 8A 04 
366d4     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
366d8     0E 01 CF 04 
366dc     01 00 C0 04 
366e0     D0 04 44 01 
366e4     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
366e8     00 00 7D 1D 
366ec     01 00 63 2C 
366f0     00 1E 96 01 
366f4     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
366f8     00 1F 08 06 
366fc     10 1F 06 06 
36700     20 1F 08 06 
36704     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
36708     40 1F 06 06 
3670c     51 1F 07 00 
36710     59 1F 52 1F 
36714     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
36718     5D 1F 56 1F 
3671c     5F 1F 60 1F 
36720     08 06 70 1F 
36724     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
36728     BB 1F C8 1F 
3672c     C9 1F CA 1F 
36730     CB 1F DA 1F 
36734     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
36738     F9 1F EA 1F 
3673c     EB 1F FA 1F 
36740     FB 1F 80 1F 
36744     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
36748     08 06 A0 1F 
3674c     08 06 B0 1F 
36750     04 00 B8 1F 
36754     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
36758     BC 1F CC 1F 
3675c     01 00 C3 1F 
36760     D0 1F 02 06 
36764     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
36768     E5 1F 01 00 
3676c     EC 1F F3 1F 
36770     01 00 FC 1F 
36774     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
36778     32 21 70 21 
3677c     10 02 84 21 
36780     01 00 83 21 
36784     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
36788     30 2C 2F 04 
3678c     60 2C 02 01 
36790     67 2C 06 01 
36794     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
36798     80 2C 64 01 
3679c     00 2D 26 08 
367a0     41 FF 1A 03 
367a4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
367a8     05 07 09 0E 
367ac     10 12 14 16 
367b0     18 1C 1E 43 
367b4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
367b8     41 41 43 45 
367bc     45 45 49 49 
367c0     49 41 41 45 
367c4     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
367c8     4F 55 55 59 
367cc     4F 55 4F 9C 
367d0     4F 9E 9F 41 
367d4     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
367d8     A5 A6 A7 A8 
367dc     A9 AA AB AC 
367e0     AD AE AF B0 
367e4     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
367e8     41 41 41 B8 
367ec     B9 BA BB BC 
367f0     BD BE BF C0 
367f4     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
367f8     C5 41 41 C8 
367fc     C9 CA CB CC 
36800     CD CE CF D1 
36804     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
36808     49 49 49 49 
3680c     D9 DA DB DC 
36810     DD 49 DF 4F 
36814     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
36818     4F E6 E8 E8 
3681c     55 55 55 59 
36820     59 EE EF F0 
36824     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
36828     F5 F6 F7 F8 
3682c     F9 FA FB FC 
36830     FD FE FF 00 
36834     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
36838     00 00 00 00 | 	byte	$00, $00, $00, $00
3683c     00 00 50 08 | 	long	(133 {_fatfs_cc_v_close})<<20
36840     00 00 60 08 | 	long	(134 {_fatfs_cc_v_read})<<20
36844     00 00 70 08 | 	long	(135 {_fatfs_cc_v_write})<<20
36848     00 00 80 08 | 	long	(136 {_fatfs_cc_v_lseek})<<20
3684c     00 00 90 08 | 	long	(137 {_fatfs_cc_v_ioctl})<<20
36850     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_flush})<<20
36854     00 00 00 00 
36858     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3685c     00 00 A0 08 | 	long	(138 {_fatfs_cc_v_open})<<20
36860     00 00 B0 08 | 	long	(139 {_fatfs_cc_v_creat})<<20
36864     00 00 C0 08 | 	long	(140 {_fatfs_cc_v_opendir})<<20
36868     00 00 D0 08 | 	long	(141 {_fatfs_cc_v_closedir})<<20
3686c     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_readdir})<<20
36870     00 00 F0 08 | 	long	(143 {_fatfs_cc_v_stat})<<20
36874     00 00 00 09 | 	long	(144 {_fatfs_cc_v_mkdir})<<20
36878     00 00 10 09 | 	long	(145 {_fatfs_cc_v_rmdir})<<20
3687c     00 00 20 09 | 	long	(146 {_fatfs_cc_v_remove})<<20
36880     00 00 30 09 | 	long	(147 {_fatfs_cc_v_rename})<<20
36884     00 00 40 09 | 	long	(148 {_fatfs_cc_v_init})<<20
36888     00 00 50 09 | 	long	(149 {_fatfs_cc_v_deinit})<<20
3688c     FF FF FF FF 
36890     1F 00 00 00 
36894     1C 00 00 00 
36898     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3689c     1E 00 00 00 
368a0     1F 00 00 00 
368a4     1E 00 00 00 
368a8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
368ac     1F 00 00 00 
368b0     1E 00 00 00 
368b4     1F 00 00 00 
368b8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
368bc     1F 00 00 00 
368c0     00 00 00 00 
368c4     1F 00 00 00 
368c8     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
368cc     5A 00 00 00 
368d0     78 00 00 00 
368d4     97 00 00 00 
368d8     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
368dc     D4 00 00 00 
368e0     F3 00 00 00 
368e4     11 01 00 00 
368e8     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
368ec     4E 01 00 00 
368f0     6D 01 00 00 
368f4     FF FF FF FF 
368f8     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
368fc     00 00 00 00 
      ...             
36914     00 00 00 00 
36918     00 00 00 00 | 	byte	$00[32]
3691c     3A 69 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
36920     3E 69 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
36924     00 00 00 00 
36928     00 00 00 00 
3692c     00 00 00 00 
36930     00 00 00 00 
36934     00 00       | 	byte	$00[18]
36936     3F 3F 3F 00 
3693a     55 43 54 00 
3693e     55 43 54 00 
36942     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
36946     00 00 00 00 
3694a     00 00 00    | 	byte	$00[7]
3694d     CA 9A 3B 00 
36951     00 00 00 01 
36955     01 01 01 01 
36959     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3695d     91 11 11 11 
36961     11 01 01 01 
36965     01 01 01 01 
36969     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3696d     01 01 01 01 
36971     01 01 01    | 	byte	$01[7]
36974     90 20 20 20 
36978     20 20 20 20 
3697c     20 20 20 20 
36980     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
36984     42 42 42 42 
36988     42 42 42 42 
3698c     42 42       | 	byte	$42[10]
3698e     20 20 20 20 
36992     20 20 20    | 	byte	$20[7]
36995     44 44 44 44 
36999     44 44       | 	byte	$44[6]
3699b     04 04 04 04 
3699f     04 04 04 04 
369a3     04 04 04 04 
369a7     04 04 04 04 
369ab     04 04 04 04 | 	byte	$04[20]
369af     20 20 20 20 
369b3     20 20       | 	byte	$20[6]
369b5     48 48 48 48 
369b9     48 48       | 	byte	$48[6]
369bb     08 08 08 08 
369bf     08 08 08 08 
369c3     08 08 08 08 
369c7     08 08 08 08 
369cb     08 08 08 08 | 	byte	$08[20]
369cf     20 20 20 20 
369d3     01 00 00 00 
369d7     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
369d8                 | __methodtable__
369d8     F8 6E 01 00 | 	long	@_do_no_command
369dc     58 F3 00 00 | 	long	@_do_plus
369e0     44 F8 00 00 | 	long	@_do_minus
369e4     0C FD 00 00 | 	long	@_do_or
369e8     24 FE 00 00 | 	long	@_do_mul
369ec     B0 03 01 00 | 	long	@_do_fdiv
369f0     F4 FB 00 00 | 	long	@_do_and
369f4     90 01 01 00 | 	long	@_do_div
369f8     78 05 01 00 | 	long	@_do_mod
369fc     98 07 01 00 | 	long	@_do_shl
36a00     B0 08 01 00 | 	long	@_do_shr
36a04     C8 09 01 00 | 	long	@_do_power
36a08     D8 E6 00 00 | 	long	@_do_getvar
36a0c     40 A2 00 00 | 	long	@_do_push
36a10     D8 E0 00 00 | 	long	@_do_assign
36a14     44 41 01 00 | 	long	@_do_cls
36a18     E4 DA 00 00 | 	long	@_do_new
36a1c     E8 41 01 00 | 	long	@_do_plot
36a20     B8 42 01 00 | 	long	@_do_draw
36a24     2C 4C 01 00 | 	long	@_do_print
36a28     24 45 01 00 | 	long	@_do_circle
36a2c     AC 43 01 00 | 	long	@_do_fcircle
36a30     9C 46 01 00 | 	long	@_do_box
36a34     44 4A 01 00 | 	long	@_do_frame
36a38     B0 41 01 00 | 	long	@_do_color
36a3c     6C 82 00 00 | 	long	@_do_for
36a40     98 84 00 00 | 	long	@_do_next
36a44     48 D8 00 00 | 	long	@_do_list
36a48     90 B2 00 00 | 	long	@_do_run
36a4c     94 DF 00 00 | 	long	@_do_error
36a50     90 DC 00 00 | 	long	@_do_fast_goto
36a54     80 DD 00 00 | 	long	@_do_find_goto
36a58     90 DF 00 00 | 	long	@_do_slow_goto
36a5c     90 28 01 00 | 	long	@_do_converttoint
36a60     84 A8 00 00 | 	long	@_test_csave
36a64     D8 AB 00 00 | 	long	@_do_save
36a68     C4 AE 00 00 | 	long	@_do_load
36a6c     90 5A 01 00 | 	long	@_do_pinwrite
36a70     2C 65 01 00 | 	long	@_do_waitms
36a74     68 66 01 00 | 	long	@_do_waitvbl
36a78     68 69 01 00 | 	long	@_do_if
36a7c     4C 6A 01 00 | 	long	@_do_else
36a80     14 6B 01 00 | 	long	@_do_nothing
36a84     90 0B 01 00 | 	long	@_do_eq
36a88     08 1A 01 00 | 	long	@_do_ge
36a8c     E0 1E 01 00 | 	long	@_do_le
36a90     68 10 01 00 | 	long	@_do_gt
36a94     40 15 01 00 | 	long	@_do_lt
36a98     B8 23 01 00 | 	long	@_do_ne
36a9c     6C 2B 01 00 | 	long	@_do_rnd
36aa0     18 6B 01 00 | 	long	@_do_brun
36aa4     E4 6D 01 00 | 	long	@_do_beep
36aa8     98 66 01 00 | 	long	@_do_dir
36aac     F4 50 01 00 | 	long	@_do_paper
36ab0     7C 51 01 00 | 	long	@_do_ink
36ab4     18 52 01 00 | 	long	@_do_font
36ab8     94 52 01 00 | 	long	@_do_mode
36abc     50 6D 01 00 | 	long	@_do_mouse
36ac0     DC 40 01 00 | 	long	@_do_gettime
36ac4     84 6D 01 00 | 	long	@_do_cursor
36ac8     B8 6D 01 00 | 	long	@_do_click
36acc     68 3E 01 00 | 	long	@_do_mousex
36ad0     AC 3E 01 00 | 	long	@_do_mousey
36ad4     34 3F 01 00 | 	long	@_do_mousek
36ad8     F0 3E 01 00 | 	long	@_do_mousew
36adc     40 2E 01 00 | 	long	@_do_sin
36ae0     94 35 01 00 | 	long	@_do_stick
36ae4     18 37 01 00 | 	long	@_do_strig
36ae8     7C 3D 01 00 | 	long	@_do_sprite
36aec     EC 39 01 00 | 	long	@_do_defsprite
36af0     9C 38 01 00 | 	long	@_do_getpixel
36af4     74 66 01 00 | 	long	@_do_waitclock
36af8     04 6F 01 00 | 	long	@_do_negative
36afc     78 3F 01 00 | 	long	@_do_rdpin
36b00     E4 3F 01 00 | 	long	@_do_rqpin
36b04     58 40 01 00 | 	long	@_do_pinread
36b08     28 5D 01 00 | 	long	@_do_wrpin
36b0c     A8 5D 01 00 | 	long	@_do_wxpin
36b10     28 5E 01 00 | 	long	@_do_wypin
36b14     18 5B 01 00 | 	long	@_do_pinfloat
36b18     58 5B 01 00 | 	long	@_do_pinlo
36b1c     98 5B 01 00 | 	long	@_do_pinhi
36b20     18 5C 01 00 | 	long	@_do_pinstart
36b24     D8 5B 01 00 | 	long	@_do_pintoggle
36b28     A8 5E 01 00 | 	long	@_do_position
36b2c     4C 2F 01 00 | 	long	@_do_cos
36b30     6C 30 01 00 | 	long	@_do_tan
36b34     90 33 01 00 | 	long	@_do_atn
36b38     78 31 01 00 | 	long	@_do_asin
36b3c     84 32 01 00 | 	long	@_do_acos
36b40     A4 34 01 00 | 	long	@_do_sqr
36b44     84 48 01 00 | 	long	@_do_fill
36b48     50 CE 00 00 | 	long	@_do_defsnd
36b4c     DC B5 00 00 | 	long	@_do_defenv
36b50     70 6A 01 00 | 	long	@_do_rad
36b54     98 6A 01 00 | 	long	@_do_deg
36b58     C0 6A 01 00 | 	long	@_do_int
36b5c     84 C2 00 00 | 	long	@_do_play
36b60     F0 57 01 00 | 	long	@_do_setdelay
36b64     48 57 01 00 | 	long	@_do_setenv
36b68     98 58 01 00 | 	long	@_do_setlen
36b6c     E8 59 01 00 | 	long	@_do_setpan
36b70     40 59 01 00 | 	long	@_do_setvol
36b74     F8 55 01 00 | 	long	@_do_setwave
36b78     A0 56 01 00 | 	long	@_do_setsustain
36b7c     B8 CD 00 00 | 	long	@_do_release
36b80     34 2D 01 00 | 	long	@_do_getenvsustain
36b84     30 5F 01 00 | 	long	@_do_poke
36b88     08 60 01 00 | 	long	@_do_dpoke
36b8c     E0 60 01 00 | 	long	@_do_lpoke
36b90     B8 61 01 00 | 	long	@_do_peek
36b94     68 62 01 00 | 	long	@_do_dpeek
36b98     14 63 01 00 | 	long	@_do_lpeek
36b9c     24 64 01 00 | 	long	@_do_adr
36ba0     C0 63 01 00 | 	long	@_do_fre
36ba4     28 64 01 00 | 	long	@_do_getnotevalue
36ba8     90 EC 00 00 | 	long	@_do_getaddr
36bac     80 F0 00 00 | 	long	@_do_inkey
36bb0     B4 6F 01 00 | 	long	@_do_abs
36bb4     84 AF 01 00 | 	long	@_hg010b_spin2_putchar
36bb8     B4 B7 02 00 | 	long	@__struct___bas_wrap_sender_tx
36bbc     F8 B7 02 00 | 	long	@__struct___bas_wrap_sender_rx
36bc0     40 B8 02 00 | 	long	@__struct___bas_wrap_sender_close
36bc4     E4 B6 02 00 | 	long	@__struct__s_vfs_file_t_putchar
36bc8     54 B7 02 00 | 	long	@__struct__s_vfs_file_t_getchar
36bcc     9C B6 02 00 | 	long	@___strs_cl_pfunc
36bd0     FC 15 02 00 | 	long	@__system____root_opendir
36bd4     98 16 02 00 | 	long	@__system____root_closedir
36bd8     14 16 02 00 | 	long	@__system____root_readdir
36bdc     A0 16 02 00 | 	long	@__system____root_stat
36be0     28 0F 02 00 | 	long	@__system____default_putc
36be4     AC 0E 02 00 | 	long	@__system____default_getc
36be8     D0 0F 02 00 | 	long	@__system____default_flush
36bec     A0 A1 02 00 | 	long	@_fatfs_cc_v_close
36bf0     BC A5 02 00 | 	long	@_fatfs_cc_v_read
36bf4     D0 A6 02 00 | 	long	@_fatfs_cc_v_write
36bf8     B0 A7 02 00 | 	long	@_fatfs_cc_v_lseek
36bfc     38 A8 02 00 | 	long	@_fatfs_cc_v_ioctl
36c00     8C A8 02 00 | 	long	@_fatfs_cc_v_open
36c04     04 A1 02 00 | 	long	@_fatfs_cc_v_creat
36c08     E4 A1 02 00 | 	long	@_fatfs_cc_v_opendir
36c0c     58 A2 02 00 | 	long	@_fatfs_cc_v_closedir
36c10     98 A2 02 00 | 	long	@_fatfs_cc_v_readdir
36c14     CC A3 02 00 | 	long	@_fatfs_cc_v_stat
36c18     4C A8 02 00 | 	long	@_fatfs_cc_v_mkdir
36c1c     6C A8 02 00 | 	long	@_fatfs_cc_v_rmdir
36c20     5C A8 02 00 | 	long	@_fatfs_cc_v_remove
36c24     7C A8 02 00 | 	long	@_fatfs_cc_v_rename
36c28     9C A9 02 00 | 	long	@_fatfs_cc_v_init
36c2c     A4 A9 02 00 | 	long	@_fatfs_cc_v_deinit
36c30     D4 C3 01 00 | 	long	@__system___tx
36c34     14 C4 01 00 | 	long	@__system___rx
36c38     08 22 02 00 | 	long	@__system___rxtxioctl_0630
36c3c     60 22 02 00 | 	long	@__system____dummy_flush_0631
36c40     6C A9 02 00 | 	long	@_fatfs_cc_v_flush
36c44                 | __heap_base
36c44     00 00 00 00 
      ...             
65a44     00 00 00 00 
65a48     00 00 00 00 | 	long	0[48002]
65a4c                 | objmem
65a4c     00 00 00 00 
      ...             
75144     00 00 00 00 
75148     00 00 00 00 | 	long	0[15808]
7514c                 | stackspace
7514c     00 00 00 00 | 	long	0[1]
75150 100             | 	org	COG_BSS_START
75150 100             | _var01
75150 100             | 	res	1
75150 101             | _var02
75150 101             | 	res	1
75150 102             | _var03
75150 102             | 	res	1
75150 103             | _var04
75150 103             | 	res	1
75150 104             | _var05
75150 104             | 	res	1
75150 105             | _var06
75150 105             | 	res	1
75150 106             | _var07
75150 106             | 	res	1
75150 107             | _var08
75150 107             | 	res	1
75150 108             | _var09
75150 108             | 	res	1
75150 109             | arg01
75150 109             | 	res	1
75150 10a             | arg02
75150 10a             | 	res	1
75150 10b             | arg03
75150 10b             | 	res	1
75150 10c             | arg04
75150 10c             | 	res	1
75150 10d             | arg05
75150 10d             | 	res	1
75150 10e             | arg06
75150 10e             | 	res	1
75150 10f             | local01
75150 10f             | 	res	1
75150 110             | local02
75150 110             | 	res	1
75150 111             | local03
75150 111             | 	res	1
75150 112             | local04
75150 112             | 	res	1
75150 113             | local05
75150 113             | 	res	1
75150 114             | local06
75150 114             | 	res	1
75150 115             | local07
75150 115             | 	res	1
75150 116             | local08
75150 116             | 	res	1
75150 117             | local09
75150 117             | 	res	1
75150 118             | local10
75150 118             | 	res	1
75150 119             | local11
75150 119             | 	res	1
75150 11a             | local12
75150 11a             | 	res	1
75150 11b             | local13
75150 11b             | 	res	1
75150 11c             | local14
75150 11c             | 	res	1
75150 11d             | local15
75150 11d             | 	res	1
75150 11e             | local16
75150 11e             | 	res	1
75150 11f             | local17
75150 11f             | 	res	1
75150 120             | local18
75150 120             | 	res	1
75150 121             | local19
75150 121             | 	res	1
75150 122             | local20
75150 122             | 	res	1
75150 123             | local21
75150 123             | 	res	1
75150 124             | local22
75150 124             | 	res	1
75150 125             | local23
75150 125             | 	res	1
75150 126             | local24
75150 126             | 	res	1
75150 127             | local25
75150 127             | 	res	1
75150 128             | local26
75150 128             | 	res	1
75150 129             | local27
75150 129             | 	res	1
75150 12a             | local28
75150 12a             | 	res	1
75150 12b             | local29
75150 12b             | 	res	1
75150 12c             | local30
75150 12c             | 	res	1
75150 12d             | local31
75150 12d             | 	res	1
75150 12e             | local32
75150 12e             | 	res	1
75150 12f             | local33
75150 12f             | 	res	1
75150 130             | local34
75150 130             | 	res	1
75150 131             | local35
75150 131             | 	res	1
75150 132             | muldiva_
75150 132             | 	res	1
75150 133             | muldivb_
75150 133             | 	res	1
75150 134             | 	fit	480
75150 134             | 
